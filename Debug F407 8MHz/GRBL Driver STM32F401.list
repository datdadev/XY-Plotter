
GRBL Driver STM32F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000208e4  08008000  08008000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008a10  080288e8  080288e8  000228e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080312f8  080312f8  0002c664  2**0
                  CONTENTS
  4 .ARM          00000008  080312f8  080312f8  0002b2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08031300  08031300  0002c664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08031300  08031300  0002b300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08031304  08031304  0002b304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000664  20000000  08031308  0002c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002c664  2**0
                  CONTENTS
 10 .bss          000022f8  20000664  20000664  0002c664  2**2
                  ALLOC
 11 ._user_heap_stack 00004004  2000295c  2000295c  0002c664  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002c664  2**0
                  CONTENTS, READONLY
 13 .debug_info   000d100c  00000000  00000000  0002c694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b1c2  00000000  00000000  000fd6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00010717  00000000  00000000  00108862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d18  00000000  00000000  00118f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001aac  00000000  00000000  0011ac98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a650  00000000  00000000  0011c744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000f998  00000000  00000000  00146d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015672c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006f58  00000000  00000000  00156770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0015d6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	@ (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	@ (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	@ (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20000664 	.word	0x20000664
 800801c:	00000000 	.word	0x00000000
 8008020:	080288cc 	.word	0x080288cc

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	@ (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	@ (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	@ (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000668 	.word	0x20000668
 800803c:	080288cc 	.word	0x080288cc

08008040 <strcmp>:
 8008040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008048:	2a01      	cmp	r2, #1
 800804a:	bf28      	it	cs
 800804c:	429a      	cmpcs	r2, r3
 800804e:	d0f7      	beq.n	8008040 <strcmp>
 8008050:	1ad0      	subs	r0, r2, r3
 8008052:	4770      	bx	lr
	...

08008060 <memchr>:
 8008060:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008064:	2a10      	cmp	r2, #16
 8008066:	db2b      	blt.n	80080c0 <memchr+0x60>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	d008      	beq.n	8008080 <memchr+0x20>
 800806e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008072:	3a01      	subs	r2, #1
 8008074:	428b      	cmp	r3, r1
 8008076:	d02d      	beq.n	80080d4 <memchr+0x74>
 8008078:	f010 0f07 	tst.w	r0, #7
 800807c:	b342      	cbz	r2, 80080d0 <memchr+0x70>
 800807e:	d1f6      	bne.n	800806e <memchr+0xe>
 8008080:	b4f0      	push	{r4, r5, r6, r7}
 8008082:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008086:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800808a:	f022 0407 	bic.w	r4, r2, #7
 800808e:	f07f 0700 	mvns.w	r7, #0
 8008092:	2300      	movs	r3, #0
 8008094:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008098:	3c08      	subs	r4, #8
 800809a:	ea85 0501 	eor.w	r5, r5, r1
 800809e:	ea86 0601 	eor.w	r6, r6, r1
 80080a2:	fa85 f547 	uadd8	r5, r5, r7
 80080a6:	faa3 f587 	sel	r5, r3, r7
 80080aa:	fa86 f647 	uadd8	r6, r6, r7
 80080ae:	faa5 f687 	sel	r6, r5, r7
 80080b2:	b98e      	cbnz	r6, 80080d8 <memchr+0x78>
 80080b4:	d1ee      	bne.n	8008094 <memchr+0x34>
 80080b6:	bcf0      	pop	{r4, r5, r6, r7}
 80080b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80080bc:	f002 0207 	and.w	r2, r2, #7
 80080c0:	b132      	cbz	r2, 80080d0 <memchr+0x70>
 80080c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080c6:	3a01      	subs	r2, #1
 80080c8:	ea83 0301 	eor.w	r3, r3, r1
 80080cc:	b113      	cbz	r3, 80080d4 <memchr+0x74>
 80080ce:	d1f8      	bne.n	80080c2 <memchr+0x62>
 80080d0:	2000      	movs	r0, #0
 80080d2:	4770      	bx	lr
 80080d4:	3801      	subs	r0, #1
 80080d6:	4770      	bx	lr
 80080d8:	2d00      	cmp	r5, #0
 80080da:	bf06      	itte	eq
 80080dc:	4635      	moveq	r5, r6
 80080de:	3803      	subeq	r0, #3
 80080e0:	3807      	subne	r0, #7
 80080e2:	f015 0f01 	tst.w	r5, #1
 80080e6:	d107      	bne.n	80080f8 <memchr+0x98>
 80080e8:	3001      	adds	r0, #1
 80080ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80080ee:	bf02      	ittt	eq
 80080f0:	3001      	addeq	r0, #1
 80080f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80080f6:	3001      	addeq	r0, #1
 80080f8:	bcf0      	pop	{r4, r5, r6, r7}
 80080fa:	3801      	subs	r0, #1
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop

08008100 <strlen>:
 8008100:	4603      	mov	r3, r0
 8008102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008106:	2a00      	cmp	r2, #0
 8008108:	d1fb      	bne.n	8008102 <strlen+0x2>
 800810a:	1a18      	subs	r0, r3, r0
 800810c:	3801      	subs	r0, #1
 800810e:	4770      	bx	lr

08008110 <__aeabi_drsub>:
 8008110:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8008114:	e002      	b.n	800811c <__adddf3>
 8008116:	bf00      	nop

08008118 <__aeabi_dsub>:
 8008118:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800811c <__adddf3>:
 800811c:	b530      	push	{r4, r5, lr}
 800811e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008122:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008126:	ea94 0f05 	teq	r4, r5
 800812a:	bf08      	it	eq
 800812c:	ea90 0f02 	teqeq	r0, r2
 8008130:	bf1f      	itttt	ne
 8008132:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008136:	ea55 0c02 	orrsne.w	ip, r5, r2
 800813a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800813e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008142:	f000 80e2 	beq.w	800830a <__adddf3+0x1ee>
 8008146:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800814a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800814e:	bfb8      	it	lt
 8008150:	426d      	neglt	r5, r5
 8008152:	dd0c      	ble.n	800816e <__adddf3+0x52>
 8008154:	442c      	add	r4, r5
 8008156:	ea80 0202 	eor.w	r2, r0, r2
 800815a:	ea81 0303 	eor.w	r3, r1, r3
 800815e:	ea82 0000 	eor.w	r0, r2, r0
 8008162:	ea83 0101 	eor.w	r1, r3, r1
 8008166:	ea80 0202 	eor.w	r2, r0, r2
 800816a:	ea81 0303 	eor.w	r3, r1, r3
 800816e:	2d36      	cmp	r5, #54	@ 0x36
 8008170:	bf88      	it	hi
 8008172:	bd30      	pophi	{r4, r5, pc}
 8008174:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008178:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800817c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008180:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008184:	d002      	beq.n	800818c <__adddf3+0x70>
 8008186:	4240      	negs	r0, r0
 8008188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800818c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008190:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008194:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008198:	d002      	beq.n	80081a0 <__adddf3+0x84>
 800819a:	4252      	negs	r2, r2
 800819c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80081a0:	ea94 0f05 	teq	r4, r5
 80081a4:	f000 80a7 	beq.w	80082f6 <__adddf3+0x1da>
 80081a8:	f1a4 0401 	sub.w	r4, r4, #1
 80081ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80081b0:	db0d      	blt.n	80081ce <__adddf3+0xb2>
 80081b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80081b6:	fa22 f205 	lsr.w	r2, r2, r5
 80081ba:	1880      	adds	r0, r0, r2
 80081bc:	f141 0100 	adc.w	r1, r1, #0
 80081c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081c4:	1880      	adds	r0, r0, r2
 80081c6:	fa43 f305 	asr.w	r3, r3, r5
 80081ca:	4159      	adcs	r1, r3
 80081cc:	e00e      	b.n	80081ec <__adddf3+0xd0>
 80081ce:	f1a5 0520 	sub.w	r5, r5, #32
 80081d2:	f10e 0e20 	add.w	lr, lr, #32
 80081d6:	2a01      	cmp	r2, #1
 80081d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081dc:	bf28      	it	cs
 80081de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081e2:	fa43 f305 	asr.w	r3, r3, r5
 80081e6:	18c0      	adds	r0, r0, r3
 80081e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80081f0:	d507      	bpl.n	8008202 <__adddf3+0xe6>
 80081f2:	f04f 0e00 	mov.w	lr, #0
 80081f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8008202:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8008206:	d31b      	bcc.n	8008240 <__adddf3+0x124>
 8008208:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800820c:	d30c      	bcc.n	8008228 <__adddf3+0x10c>
 800820e:	0849      	lsrs	r1, r1, #1
 8008210:	ea5f 0030 	movs.w	r0, r0, rrx
 8008214:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008218:	f104 0401 	add.w	r4, r4, #1
 800821c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008220:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8008224:	f080 809a 	bcs.w	800835c <__adddf3+0x240>
 8008228:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800822c:	bf08      	it	eq
 800822e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008232:	f150 0000 	adcs.w	r0, r0, #0
 8008236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800823a:	ea41 0105 	orr.w	r1, r1, r5
 800823e:	bd30      	pop	{r4, r5, pc}
 8008240:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008244:	4140      	adcs	r0, r0
 8008246:	eb41 0101 	adc.w	r1, r1, r1
 800824a:	3c01      	subs	r4, #1
 800824c:	bf28      	it	cs
 800824e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8008252:	d2e9      	bcs.n	8008228 <__adddf3+0x10c>
 8008254:	f091 0f00 	teq	r1, #0
 8008258:	bf04      	itt	eq
 800825a:	4601      	moveq	r1, r0
 800825c:	2000      	moveq	r0, #0
 800825e:	fab1 f381 	clz	r3, r1
 8008262:	bf08      	it	eq
 8008264:	3320      	addeq	r3, #32
 8008266:	f1a3 030b 	sub.w	r3, r3, #11
 800826a:	f1b3 0220 	subs.w	r2, r3, #32
 800826e:	da0c      	bge.n	800828a <__adddf3+0x16e>
 8008270:	320c      	adds	r2, #12
 8008272:	dd08      	ble.n	8008286 <__adddf3+0x16a>
 8008274:	f102 0c14 	add.w	ip, r2, #20
 8008278:	f1c2 020c 	rsb	r2, r2, #12
 800827c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008280:	fa21 f102 	lsr.w	r1, r1, r2
 8008284:	e00c      	b.n	80082a0 <__adddf3+0x184>
 8008286:	f102 0214 	add.w	r2, r2, #20
 800828a:	bfd8      	it	le
 800828c:	f1c2 0c20 	rsble	ip, r2, #32
 8008290:	fa01 f102 	lsl.w	r1, r1, r2
 8008294:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008298:	bfdc      	itt	le
 800829a:	ea41 010c 	orrle.w	r1, r1, ip
 800829e:	4090      	lslle	r0, r2
 80082a0:	1ae4      	subs	r4, r4, r3
 80082a2:	bfa2      	ittt	ge
 80082a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80082a8:	4329      	orrge	r1, r5
 80082aa:	bd30      	popge	{r4, r5, pc}
 80082ac:	ea6f 0404 	mvn.w	r4, r4
 80082b0:	3c1f      	subs	r4, #31
 80082b2:	da1c      	bge.n	80082ee <__adddf3+0x1d2>
 80082b4:	340c      	adds	r4, #12
 80082b6:	dc0e      	bgt.n	80082d6 <__adddf3+0x1ba>
 80082b8:	f104 0414 	add.w	r4, r4, #20
 80082bc:	f1c4 0220 	rsb	r2, r4, #32
 80082c0:	fa20 f004 	lsr.w	r0, r0, r4
 80082c4:	fa01 f302 	lsl.w	r3, r1, r2
 80082c8:	ea40 0003 	orr.w	r0, r0, r3
 80082cc:	fa21 f304 	lsr.w	r3, r1, r4
 80082d0:	ea45 0103 	orr.w	r1, r5, r3
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f1c4 040c 	rsb	r4, r4, #12
 80082da:	f1c4 0220 	rsb	r2, r4, #32
 80082de:	fa20 f002 	lsr.w	r0, r0, r2
 80082e2:	fa01 f304 	lsl.w	r3, r1, r4
 80082e6:	ea40 0003 	orr.w	r0, r0, r3
 80082ea:	4629      	mov	r1, r5
 80082ec:	bd30      	pop	{r4, r5, pc}
 80082ee:	fa21 f004 	lsr.w	r0, r1, r4
 80082f2:	4629      	mov	r1, r5
 80082f4:	bd30      	pop	{r4, r5, pc}
 80082f6:	f094 0f00 	teq	r4, #0
 80082fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80082fe:	bf06      	itte	eq
 8008300:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8008304:	3401      	addeq	r4, #1
 8008306:	3d01      	subne	r5, #1
 8008308:	e74e      	b.n	80081a8 <__adddf3+0x8c>
 800830a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800830e:	bf18      	it	ne
 8008310:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008314:	d029      	beq.n	800836a <__adddf3+0x24e>
 8008316:	ea94 0f05 	teq	r4, r5
 800831a:	bf08      	it	eq
 800831c:	ea90 0f02 	teqeq	r0, r2
 8008320:	d005      	beq.n	800832e <__adddf3+0x212>
 8008322:	ea54 0c00 	orrs.w	ip, r4, r0
 8008326:	bf04      	itt	eq
 8008328:	4619      	moveq	r1, r3
 800832a:	4610      	moveq	r0, r2
 800832c:	bd30      	pop	{r4, r5, pc}
 800832e:	ea91 0f03 	teq	r1, r3
 8008332:	bf1e      	ittt	ne
 8008334:	2100      	movne	r1, #0
 8008336:	2000      	movne	r0, #0
 8008338:	bd30      	popne	{r4, r5, pc}
 800833a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800833e:	d105      	bne.n	800834c <__adddf3+0x230>
 8008340:	0040      	lsls	r0, r0, #1
 8008342:	4149      	adcs	r1, r1
 8008344:	bf28      	it	cs
 8008346:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800834a:	bd30      	pop	{r4, r5, pc}
 800834c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8008350:	bf3c      	itt	cc
 8008352:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8008356:	bd30      	popcc	{r4, r5, pc}
 8008358:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800835c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8008360:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008364:	f04f 0000 	mov.w	r0, #0
 8008368:	bd30      	pop	{r4, r5, pc}
 800836a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800836e:	bf1a      	itte	ne
 8008370:	4619      	movne	r1, r3
 8008372:	4610      	movne	r0, r2
 8008374:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008378:	bf1c      	itt	ne
 800837a:	460b      	movne	r3, r1
 800837c:	4602      	movne	r2, r0
 800837e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008382:	bf06      	itte	eq
 8008384:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008388:	ea91 0f03 	teqeq	r1, r3
 800838c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008390:	bd30      	pop	{r4, r5, pc}
 8008392:	bf00      	nop

08008394 <__aeabi_ui2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80083a8:	f04f 0500 	mov.w	r5, #0
 80083ac:	f04f 0100 	mov.w	r1, #0
 80083b0:	e750      	b.n	8008254 <__adddf3+0x138>
 80083b2:	bf00      	nop

080083b4 <__aeabi_i2d>:
 80083b4:	f090 0f00 	teq	r0, #0
 80083b8:	bf04      	itt	eq
 80083ba:	2100      	moveq	r1, #0
 80083bc:	4770      	bxeq	lr
 80083be:	b530      	push	{r4, r5, lr}
 80083c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80083c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80083c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80083cc:	bf48      	it	mi
 80083ce:	4240      	negmi	r0, r0
 80083d0:	f04f 0100 	mov.w	r1, #0
 80083d4:	e73e      	b.n	8008254 <__adddf3+0x138>
 80083d6:	bf00      	nop

080083d8 <__aeabi_f2d>:
 80083d8:	0042      	lsls	r2, r0, #1
 80083da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083de:	ea4f 0131 	mov.w	r1, r1, rrx
 80083e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083e6:	bf1f      	itttt	ne
 80083e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80083ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80083f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80083f4:	4770      	bxne	lr
 80083f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80083fa:	bf08      	it	eq
 80083fc:	4770      	bxeq	lr
 80083fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8008402:	bf04      	itt	eq
 8008404:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8008408:	4770      	bxeq	lr
 800840a:	b530      	push	{r4, r5, lr}
 800840c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8008410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8008414:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008418:	e71c      	b.n	8008254 <__adddf3+0x138>
 800841a:	bf00      	nop

0800841c <__aeabi_ul2d>:
 800841c:	ea50 0201 	orrs.w	r2, r0, r1
 8008420:	bf08      	it	eq
 8008422:	4770      	bxeq	lr
 8008424:	b530      	push	{r4, r5, lr}
 8008426:	f04f 0500 	mov.w	r5, #0
 800842a:	e00a      	b.n	8008442 <__aeabi_l2d+0x16>

0800842c <__aeabi_l2d>:
 800842c:	ea50 0201 	orrs.w	r2, r0, r1
 8008430:	bf08      	it	eq
 8008432:	4770      	bxeq	lr
 8008434:	b530      	push	{r4, r5, lr}
 8008436:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800843a:	d502      	bpl.n	8008442 <__aeabi_l2d+0x16>
 800843c:	4240      	negs	r0, r0
 800843e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008442:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008446:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800844a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800844e:	f43f aed8 	beq.w	8008202 <__adddf3+0xe6>
 8008452:	f04f 0203 	mov.w	r2, #3
 8008456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800845a:	bf18      	it	ne
 800845c:	3203      	addne	r2, #3
 800845e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008462:	bf18      	it	ne
 8008464:	3203      	addne	r2, #3
 8008466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800846a:	f1c2 0320 	rsb	r3, r2, #32
 800846e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008472:	fa20 f002 	lsr.w	r0, r0, r2
 8008476:	fa01 fe03 	lsl.w	lr, r1, r3
 800847a:	ea40 000e 	orr.w	r0, r0, lr
 800847e:	fa21 f102 	lsr.w	r1, r1, r2
 8008482:	4414      	add	r4, r2
 8008484:	e6bd      	b.n	8008202 <__adddf3+0xe6>
 8008486:	bf00      	nop

08008488 <__aeabi_dmul>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800848e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008496:	bf1d      	ittte	ne
 8008498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800849c:	ea94 0f0c 	teqne	r4, ip
 80084a0:	ea95 0f0c 	teqne	r5, ip
 80084a4:	f000 f8de 	bleq	8008664 <__aeabi_dmul+0x1dc>
 80084a8:	442c      	add	r4, r5
 80084aa:	ea81 0603 	eor.w	r6, r1, r3
 80084ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80084b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80084b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80084ba:	bf18      	it	ne
 80084bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80084c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084c8:	d038      	beq.n	800853c <__aeabi_dmul+0xb4>
 80084ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ce:	f04f 0500 	mov.w	r5, #0
 80084d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80084da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084de:	f04f 0600 	mov.w	r6, #0
 80084e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084e6:	f09c 0f00 	teq	ip, #0
 80084ea:	bf18      	it	ne
 80084ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80084f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80084f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80084f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80084fc:	d204      	bcs.n	8008508 <__aeabi_dmul+0x80>
 80084fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008502:	416d      	adcs	r5, r5
 8008504:	eb46 0606 	adc.w	r6, r6, r6
 8008508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800850c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800851c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8008520:	bf88      	it	hi
 8008522:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8008526:	d81e      	bhi.n	8008566 <__aeabi_dmul+0xde>
 8008528:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800852c:	bf08      	it	eq
 800852e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008532:	f150 0000 	adcs.w	r0, r0, #0
 8008536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800853a:	bd70      	pop	{r4, r5, r6, pc}
 800853c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8008540:	ea46 0101 	orr.w	r1, r6, r1
 8008544:	ea40 0002 	orr.w	r0, r0, r2
 8008548:	ea81 0103 	eor.w	r1, r1, r3
 800854c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008550:	bfc2      	ittt	gt
 8008552:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800855a:	bd70      	popgt	{r4, r5, r6, pc}
 800855c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008560:	f04f 0e00 	mov.w	lr, #0
 8008564:	3c01      	subs	r4, #1
 8008566:	f300 80ab 	bgt.w	80086c0 <__aeabi_dmul+0x238>
 800856a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800856e:	bfde      	ittt	le
 8008570:	2000      	movle	r0, #0
 8008572:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8008576:	bd70      	pople	{r4, r5, r6, pc}
 8008578:	f1c4 0400 	rsb	r4, r4, #0
 800857c:	3c20      	subs	r4, #32
 800857e:	da35      	bge.n	80085ec <__aeabi_dmul+0x164>
 8008580:	340c      	adds	r4, #12
 8008582:	dc1b      	bgt.n	80085bc <__aeabi_dmul+0x134>
 8008584:	f104 0414 	add.w	r4, r4, #20
 8008588:	f1c4 0520 	rsb	r5, r4, #32
 800858c:	fa00 f305 	lsl.w	r3, r0, r5
 8008590:	fa20 f004 	lsr.w	r0, r0, r4
 8008594:	fa01 f205 	lsl.w	r2, r1, r5
 8008598:	ea40 0002 	orr.w	r0, r0, r2
 800859c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80085a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80085a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085a8:	fa21 f604 	lsr.w	r6, r1, r4
 80085ac:	eb42 0106 	adc.w	r1, r2, r6
 80085b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085b4:	bf08      	it	eq
 80085b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	f1c4 040c 	rsb	r4, r4, #12
 80085c0:	f1c4 0520 	rsb	r5, r4, #32
 80085c4:	fa00 f304 	lsl.w	r3, r0, r4
 80085c8:	fa20 f005 	lsr.w	r0, r0, r5
 80085cc:	fa01 f204 	lsl.w	r2, r1, r4
 80085d0:	ea40 0002 	orr.w	r0, r0, r2
 80085d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80085d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085dc:	f141 0100 	adc.w	r1, r1, #0
 80085e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085e4:	bf08      	it	eq
 80085e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	f1c4 0520 	rsb	r5, r4, #32
 80085f0:	fa00 f205 	lsl.w	r2, r0, r5
 80085f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085f8:	fa20 f304 	lsr.w	r3, r0, r4
 80085fc:	fa01 f205 	lsl.w	r2, r1, r5
 8008600:	ea43 0302 	orr.w	r3, r3, r2
 8008604:	fa21 f004 	lsr.w	r0, r1, r4
 8008608:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800860c:	fa21 f204 	lsr.w	r2, r1, r4
 8008610:	ea20 0002 	bic.w	r0, r0, r2
 8008614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800861c:	bf08      	it	eq
 800861e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008622:	bd70      	pop	{r4, r5, r6, pc}
 8008624:	f094 0f00 	teq	r4, #0
 8008628:	d10f      	bne.n	800864a <__aeabi_dmul+0x1c2>
 800862a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800862e:	0040      	lsls	r0, r0, #1
 8008630:	eb41 0101 	adc.w	r1, r1, r1
 8008634:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008638:	bf08      	it	eq
 800863a:	3c01      	subeq	r4, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1a6>
 800863e:	ea41 0106 	orr.w	r1, r1, r6
 8008642:	f095 0f00 	teq	r5, #0
 8008646:	bf18      	it	ne
 8008648:	4770      	bxne	lr
 800864a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800864e:	0052      	lsls	r2, r2, #1
 8008650:	eb43 0303 	adc.w	r3, r3, r3
 8008654:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008658:	bf08      	it	eq
 800865a:	3d01      	subeq	r5, #1
 800865c:	d0f7      	beq.n	800864e <__aeabi_dmul+0x1c6>
 800865e:	ea43 0306 	orr.w	r3, r3, r6
 8008662:	4770      	bx	lr
 8008664:	ea94 0f0c 	teq	r4, ip
 8008668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800866c:	bf18      	it	ne
 800866e:	ea95 0f0c 	teqne	r5, ip
 8008672:	d00c      	beq.n	800868e <__aeabi_dmul+0x206>
 8008674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008678:	bf18      	it	ne
 800867a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867e:	d1d1      	bne.n	8008624 <__aeabi_dmul+0x19c>
 8008680:	ea81 0103 	eor.w	r1, r1, r3
 8008684:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008688:	f04f 0000 	mov.w	r0, #0
 800868c:	bd70      	pop	{r4, r5, r6, pc}
 800868e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008692:	bf06      	itte	eq
 8008694:	4610      	moveq	r0, r2
 8008696:	4619      	moveq	r1, r3
 8008698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800869c:	d019      	beq.n	80086d2 <__aeabi_dmul+0x24a>
 800869e:	ea94 0f0c 	teq	r4, ip
 80086a2:	d102      	bne.n	80086aa <__aeabi_dmul+0x222>
 80086a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80086a8:	d113      	bne.n	80086d2 <__aeabi_dmul+0x24a>
 80086aa:	ea95 0f0c 	teq	r5, ip
 80086ae:	d105      	bne.n	80086bc <__aeabi_dmul+0x234>
 80086b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80086b4:	bf1c      	itt	ne
 80086b6:	4610      	movne	r0, r2
 80086b8:	4619      	movne	r1, r3
 80086ba:	d10a      	bne.n	80086d2 <__aeabi_dmul+0x24a>
 80086bc:	ea81 0103 	eor.w	r1, r1, r3
 80086c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80086c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80086c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80086cc:	f04f 0000 	mov.w	r0, #0
 80086d0:	bd70      	pop	{r4, r5, r6, pc}
 80086d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80086d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80086da:	bd70      	pop	{r4, r5, r6, pc}

080086dc <__aeabi_ddiv>:
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80086e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80086e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ea:	bf1d      	ittte	ne
 80086ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086f0:	ea94 0f0c 	teqne	r4, ip
 80086f4:	ea95 0f0c 	teqne	r5, ip
 80086f8:	f000 f8a7 	bleq	800884a <__aeabi_ddiv+0x16e>
 80086fc:	eba4 0405 	sub.w	r4, r4, r5
 8008700:	ea81 0e03 	eor.w	lr, r1, r3
 8008704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008708:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800870c:	f000 8088 	beq.w	8008820 <__aeabi_ddiv+0x144>
 8008710:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008714:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8008718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800871c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008720:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800872c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008730:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8008734:	429d      	cmp	r5, r3
 8008736:	bf08      	it	eq
 8008738:	4296      	cmpeq	r6, r2
 800873a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800873e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8008742:	d202      	bcs.n	800874a <__aeabi_ddiv+0x6e>
 8008744:	085b      	lsrs	r3, r3, #1
 8008746:	ea4f 0232 	mov.w	r2, r2, rrx
 800874a:	1ab6      	subs	r6, r6, r2
 800874c:	eb65 0503 	sbc.w	r5, r5, r3
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800875a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800875e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008766:	bf22      	ittt	cs
 8008768:	1ab6      	subcs	r6, r6, r2
 800876a:	4675      	movcs	r5, lr
 800876c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008770:	085b      	lsrs	r3, r3, #1
 8008772:	ea4f 0232 	mov.w	r2, r2, rrx
 8008776:	ebb6 0e02 	subs.w	lr, r6, r2
 800877a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800877e:	bf22      	ittt	cs
 8008780:	1ab6      	subcs	r6, r6, r2
 8008782:	4675      	movcs	r5, lr
 8008784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008788:	085b      	lsrs	r3, r3, #1
 800878a:	ea4f 0232 	mov.w	r2, r2, rrx
 800878e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008792:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008796:	bf22      	ittt	cs
 8008798:	1ab6      	subcs	r6, r6, r2
 800879a:	4675      	movcs	r5, lr
 800879c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80087a0:	085b      	lsrs	r3, r3, #1
 80087a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80087a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80087aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80087ae:	bf22      	ittt	cs
 80087b0:	1ab6      	subcs	r6, r6, r2
 80087b2:	4675      	movcs	r5, lr
 80087b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80087b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80087bc:	d018      	beq.n	80087f0 <__aeabi_ddiv+0x114>
 80087be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087da:	d1c0      	bne.n	800875e <__aeabi_ddiv+0x82>
 80087dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80087e0:	d10b      	bne.n	80087fa <__aeabi_ddiv+0x11e>
 80087e2:	ea41 0100 	orr.w	r1, r1, r0
 80087e6:	f04f 0000 	mov.w	r0, #0
 80087ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80087ee:	e7b6      	b.n	800875e <__aeabi_ddiv+0x82>
 80087f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80087f4:	bf04      	itt	eq
 80087f6:	4301      	orreq	r1, r0
 80087f8:	2000      	moveq	r0, #0
 80087fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80087fe:	bf88      	it	hi
 8008800:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8008804:	f63f aeaf 	bhi.w	8008566 <__aeabi_dmul+0xde>
 8008808:	ebb5 0c03 	subs.w	ip, r5, r3
 800880c:	bf04      	itt	eq
 800880e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008816:	f150 0000 	adcs.w	r0, r0, #0
 800881a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800881e:	bd70      	pop	{r4, r5, r6, pc}
 8008820:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8008824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800882c:	bfc2      	ittt	gt
 800882e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008836:	bd70      	popgt	{r4, r5, r6, pc}
 8008838:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800883c:	f04f 0e00 	mov.w	lr, #0
 8008840:	3c01      	subs	r4, #1
 8008842:	e690      	b.n	8008566 <__aeabi_dmul+0xde>
 8008844:	ea45 0e06 	orr.w	lr, r5, r6
 8008848:	e68d      	b.n	8008566 <__aeabi_dmul+0xde>
 800884a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800884e:	ea94 0f0c 	teq	r4, ip
 8008852:	bf08      	it	eq
 8008854:	ea95 0f0c 	teqeq	r5, ip
 8008858:	f43f af3b 	beq.w	80086d2 <__aeabi_dmul+0x24a>
 800885c:	ea94 0f0c 	teq	r4, ip
 8008860:	d10a      	bne.n	8008878 <__aeabi_ddiv+0x19c>
 8008862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008866:	f47f af34 	bne.w	80086d2 <__aeabi_dmul+0x24a>
 800886a:	ea95 0f0c 	teq	r5, ip
 800886e:	f47f af25 	bne.w	80086bc <__aeabi_dmul+0x234>
 8008872:	4610      	mov	r0, r2
 8008874:	4619      	mov	r1, r3
 8008876:	e72c      	b.n	80086d2 <__aeabi_dmul+0x24a>
 8008878:	ea95 0f0c 	teq	r5, ip
 800887c:	d106      	bne.n	800888c <__aeabi_ddiv+0x1b0>
 800887e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008882:	f43f aefd 	beq.w	8008680 <__aeabi_dmul+0x1f8>
 8008886:	4610      	mov	r0, r2
 8008888:	4619      	mov	r1, r3
 800888a:	e722      	b.n	80086d2 <__aeabi_dmul+0x24a>
 800888c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008890:	bf18      	it	ne
 8008892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008896:	f47f aec5 	bne.w	8008624 <__aeabi_dmul+0x19c>
 800889a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800889e:	f47f af0d 	bne.w	80086bc <__aeabi_dmul+0x234>
 80088a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80088a6:	f47f aeeb 	bne.w	8008680 <__aeabi_dmul+0x1f8>
 80088aa:	e712      	b.n	80086d2 <__aeabi_dmul+0x24a>

080088ac <__gedf2>:
 80088ac:	f04f 3cff 	mov.w	ip, #4294967295
 80088b0:	e006      	b.n	80088c0 <__cmpdf2+0x4>
 80088b2:	bf00      	nop

080088b4 <__ledf2>:
 80088b4:	f04f 0c01 	mov.w	ip, #1
 80088b8:	e002      	b.n	80088c0 <__cmpdf2+0x4>
 80088ba:	bf00      	nop

080088bc <__cmpdf2>:
 80088bc:	f04f 0c01 	mov.w	ip, #1
 80088c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088d0:	bf18      	it	ne
 80088d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088d6:	d01b      	beq.n	8008910 <__cmpdf2+0x54>
 80088d8:	b001      	add	sp, #4
 80088da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088de:	bf0c      	ite	eq
 80088e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088e4:	ea91 0f03 	teqne	r1, r3
 80088e8:	bf02      	ittt	eq
 80088ea:	ea90 0f02 	teqeq	r0, r2
 80088ee:	2000      	moveq	r0, #0
 80088f0:	4770      	bxeq	lr
 80088f2:	f110 0f00 	cmn.w	r0, #0
 80088f6:	ea91 0f03 	teq	r1, r3
 80088fa:	bf58      	it	pl
 80088fc:	4299      	cmppl	r1, r3
 80088fe:	bf08      	it	eq
 8008900:	4290      	cmpeq	r0, r2
 8008902:	bf2c      	ite	cs
 8008904:	17d8      	asrcs	r0, r3, #31
 8008906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800890a:	f040 0001 	orr.w	r0, r0, #1
 800890e:	4770      	bx	lr
 8008910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008918:	d102      	bne.n	8008920 <__cmpdf2+0x64>
 800891a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800891e:	d107      	bne.n	8008930 <__cmpdf2+0x74>
 8008920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008928:	d1d6      	bne.n	80088d8 <__cmpdf2+0x1c>
 800892a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800892e:	d0d3      	beq.n	80088d8 <__cmpdf2+0x1c>
 8008930:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop

08008938 <__aeabi_cdrcmple>:
 8008938:	4684      	mov	ip, r0
 800893a:	4610      	mov	r0, r2
 800893c:	4662      	mov	r2, ip
 800893e:	468c      	mov	ip, r1
 8008940:	4619      	mov	r1, r3
 8008942:	4663      	mov	r3, ip
 8008944:	e000      	b.n	8008948 <__aeabi_cdcmpeq>
 8008946:	bf00      	nop

08008948 <__aeabi_cdcmpeq>:
 8008948:	b501      	push	{r0, lr}
 800894a:	f7ff ffb7 	bl	80088bc <__cmpdf2>
 800894e:	2800      	cmp	r0, #0
 8008950:	bf48      	it	mi
 8008952:	f110 0f00 	cmnmi.w	r0, #0
 8008956:	bd01      	pop	{r0, pc}

08008958 <__aeabi_dcmpeq>:
 8008958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800895c:	f7ff fff4 	bl	8008948 <__aeabi_cdcmpeq>
 8008960:	bf0c      	ite	eq
 8008962:	2001      	moveq	r0, #1
 8008964:	2000      	movne	r0, #0
 8008966:	f85d fb08 	ldr.w	pc, [sp], #8
 800896a:	bf00      	nop

0800896c <__aeabi_dcmplt>:
 800896c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008970:	f7ff ffea 	bl	8008948 <__aeabi_cdcmpeq>
 8008974:	bf34      	ite	cc
 8008976:	2001      	movcc	r0, #1
 8008978:	2000      	movcs	r0, #0
 800897a:	f85d fb08 	ldr.w	pc, [sp], #8
 800897e:	bf00      	nop

08008980 <__aeabi_dcmple>:
 8008980:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008984:	f7ff ffe0 	bl	8008948 <__aeabi_cdcmpeq>
 8008988:	bf94      	ite	ls
 800898a:	2001      	movls	r0, #1
 800898c:	2000      	movhi	r0, #0
 800898e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008992:	bf00      	nop

08008994 <__aeabi_dcmpge>:
 8008994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008998:	f7ff ffce 	bl	8008938 <__aeabi_cdrcmple>
 800899c:	bf94      	ite	ls
 800899e:	2001      	movls	r0, #1
 80089a0:	2000      	movhi	r0, #0
 80089a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80089a6:	bf00      	nop

080089a8 <__aeabi_dcmpgt>:
 80089a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089ac:	f7ff ffc4 	bl	8008938 <__aeabi_cdrcmple>
 80089b0:	bf34      	ite	cc
 80089b2:	2001      	movcc	r0, #1
 80089b4:	2000      	movcs	r0, #0
 80089b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80089ba:	bf00      	nop

080089bc <__aeabi_dcmpun>:
 80089bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089c4:	d102      	bne.n	80089cc <__aeabi_dcmpun+0x10>
 80089c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089ca:	d10a      	bne.n	80089e2 <__aeabi_dcmpun+0x26>
 80089cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089d4:	d102      	bne.n	80089dc <__aeabi_dcmpun+0x20>
 80089d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089da:	d102      	bne.n	80089e2 <__aeabi_dcmpun+0x26>
 80089dc:	f04f 0000 	mov.w	r0, #0
 80089e0:	4770      	bx	lr
 80089e2:	f04f 0001 	mov.w	r0, #1
 80089e6:	4770      	bx	lr

080089e8 <__aeabi_d2iz>:
 80089e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80089f0:	d215      	bcs.n	8008a1e <__aeabi_d2iz+0x36>
 80089f2:	d511      	bpl.n	8008a18 <__aeabi_d2iz+0x30>
 80089f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80089f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089fc:	d912      	bls.n	8008a24 <__aeabi_d2iz+0x3c>
 80089fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a0a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008a0e:	fa23 f002 	lsr.w	r0, r3, r2
 8008a12:	bf18      	it	ne
 8008a14:	4240      	negne	r0, r0
 8008a16:	4770      	bx	lr
 8008a18:	f04f 0000 	mov.w	r0, #0
 8008a1c:	4770      	bx	lr
 8008a1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a22:	d105      	bne.n	8008a30 <__aeabi_d2iz+0x48>
 8008a24:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008a28:	bf08      	it	eq
 8008a2a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008a2e:	4770      	bx	lr
 8008a30:	f04f 0000 	mov.w	r0, #0
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop

08008a38 <__aeabi_d2uiz>:
 8008a38:	004a      	lsls	r2, r1, #1
 8008a3a:	d211      	bcs.n	8008a60 <__aeabi_d2uiz+0x28>
 8008a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008a40:	d211      	bcs.n	8008a66 <__aeabi_d2uiz+0x2e>
 8008a42:	d50d      	bpl.n	8008a60 <__aeabi_d2uiz+0x28>
 8008a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a4c:	d40e      	bmi.n	8008a6c <__aeabi_d2uiz+0x34>
 8008a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a5e:	4770      	bx	lr
 8008a60:	f04f 0000 	mov.w	r0, #0
 8008a64:	4770      	bx	lr
 8008a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a6a:	d102      	bne.n	8008a72 <__aeabi_d2uiz+0x3a>
 8008a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a70:	4770      	bx	lr
 8008a72:	f04f 0000 	mov.w	r0, #0
 8008a76:	4770      	bx	lr

08008a78 <__aeabi_d2f>:
 8008a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8008a80:	bf24      	itt	cs
 8008a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8008a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8008a8a:	d90d      	bls.n	8008aa8 <__aeabi_d2f+0x30>
 8008a8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8008a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8008a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008aa0:	bf08      	it	eq
 8008aa2:	f020 0001 	biceq.w	r0, r0, #1
 8008aa6:	4770      	bx	lr
 8008aa8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8008aac:	d121      	bne.n	8008af2 <__aeabi_d2f+0x7a>
 8008aae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8008ab2:	bfbc      	itt	lt
 8008ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8008ab8:	4770      	bxlt	lr
 8008aba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008ac2:	f1c2 0218 	rsb	r2, r2, #24
 8008ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8008ace:	fa20 f002 	lsr.w	r0, r0, r2
 8008ad2:	bf18      	it	ne
 8008ad4:	f040 0001 	orrne.w	r0, r0, #1
 8008ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ae4:	ea40 000c 	orr.w	r0, r0, ip
 8008ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8008aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008af0:	e7cc      	b.n	8008a8c <__aeabi_d2f+0x14>
 8008af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008af6:	d107      	bne.n	8008b08 <__aeabi_d2f+0x90>
 8008af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008afc:	bf1e      	ittt	ne
 8008afe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8008b02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8008b06:	4770      	bxne	lr
 8008b08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8008b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8008b10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop

08008b18 <__aeabi_uldivmod>:
 8008b18:	b953      	cbnz	r3, 8008b30 <__aeabi_uldivmod+0x18>
 8008b1a:	b94a      	cbnz	r2, 8008b30 <__aeabi_uldivmod+0x18>
 8008b1c:	2900      	cmp	r1, #0
 8008b1e:	bf08      	it	eq
 8008b20:	2800      	cmpeq	r0, #0
 8008b22:	bf1c      	itt	ne
 8008b24:	f04f 31ff 	movne.w	r1, #4294967295
 8008b28:	f04f 30ff 	movne.w	r0, #4294967295
 8008b2c:	f000 b9a0 	b.w	8008e70 <__aeabi_idiv0>
 8008b30:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b38:	f000 f83c 	bl	8008bb4 <__udivmoddi4>
 8008b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b44:	b004      	add	sp, #16
 8008b46:	4770      	bx	lr

08008b48 <__aeabi_d2lz>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	4604      	mov	r4, r0
 8008b50:	460d      	mov	r5, r1
 8008b52:	f7ff ff0b 	bl	800896c <__aeabi_dcmplt>
 8008b56:	b928      	cbnz	r0, 8008b64 <__aeabi_d2lz+0x1c>
 8008b58:	4620      	mov	r0, r4
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b60:	f000 b80a 	b.w	8008b78 <__aeabi_d2ulz>
 8008b64:	4620      	mov	r0, r4
 8008b66:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8008b6a:	f000 f805 	bl	8008b78 <__aeabi_d2ulz>
 8008b6e:	4240      	negs	r0, r0
 8008b70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008b74:	bd38      	pop	{r3, r4, r5, pc}
 8008b76:	bf00      	nop

08008b78 <__aeabi_d2ulz>:
 8008b78:	b5d0      	push	{r4, r6, r7, lr}
 8008b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8008bac <__aeabi_d2ulz+0x34>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	4606      	mov	r6, r0
 8008b80:	460f      	mov	r7, r1
 8008b82:	f7ff fc81 	bl	8008488 <__aeabi_dmul>
 8008b86:	f7ff ff57 	bl	8008a38 <__aeabi_d2uiz>
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	f7ff fc02 	bl	8008394 <__aeabi_ui2d>
 8008b90:	4b07      	ldr	r3, [pc, #28]	@ (8008bb0 <__aeabi_d2ulz+0x38>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	f7ff fc78 	bl	8008488 <__aeabi_dmul>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	f7ff faba 	bl	8008118 <__aeabi_dsub>
 8008ba4:	f7ff ff48 	bl	8008a38 <__aeabi_d2uiz>
 8008ba8:	4621      	mov	r1, r4
 8008baa:	bdd0      	pop	{r4, r6, r7, pc}
 8008bac:	3df00000 	.word	0x3df00000
 8008bb0:	41f00000 	.word	0x41f00000

08008bb4 <__udivmoddi4>:
 8008bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb8:	9d08      	ldr	r5, [sp, #32]
 8008bba:	460c      	mov	r4, r1
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d14e      	bne.n	8008c5e <__udivmoddi4+0xaa>
 8008bc0:	4694      	mov	ip, r2
 8008bc2:	458c      	cmp	ip, r1
 8008bc4:	4686      	mov	lr, r0
 8008bc6:	fab2 f282 	clz	r2, r2
 8008bca:	d962      	bls.n	8008c92 <__udivmoddi4+0xde>
 8008bcc:	b14a      	cbz	r2, 8008be2 <__udivmoddi4+0x2e>
 8008bce:	f1c2 0320 	rsb	r3, r2, #32
 8008bd2:	4091      	lsls	r1, r2
 8008bd4:	fa20 f303 	lsr.w	r3, r0, r3
 8008bd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8008bdc:	4319      	orrs	r1, r3
 8008bde:	fa00 fe02 	lsl.w	lr, r0, r2
 8008be2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008be6:	fa1f f68c 	uxth.w	r6, ip
 8008bea:	fbb1 f4f7 	udiv	r4, r1, r7
 8008bee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8008bf2:	fb07 1114 	mls	r1, r7, r4, r1
 8008bf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bfa:	fb04 f106 	mul.w	r1, r4, r6
 8008bfe:	4299      	cmp	r1, r3
 8008c00:	d90a      	bls.n	8008c18 <__udivmoddi4+0x64>
 8008c02:	eb1c 0303 	adds.w	r3, ip, r3
 8008c06:	f104 30ff 	add.w	r0, r4, #4294967295
 8008c0a:	f080 8112 	bcs.w	8008e32 <__udivmoddi4+0x27e>
 8008c0e:	4299      	cmp	r1, r3
 8008c10:	f240 810f 	bls.w	8008e32 <__udivmoddi4+0x27e>
 8008c14:	3c02      	subs	r4, #2
 8008c16:	4463      	add	r3, ip
 8008c18:	1a59      	subs	r1, r3, r1
 8008c1a:	fa1f f38e 	uxth.w	r3, lr
 8008c1e:	fbb1 f0f7 	udiv	r0, r1, r7
 8008c22:	fb07 1110 	mls	r1, r7, r0, r1
 8008c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c2a:	fb00 f606 	mul.w	r6, r0, r6
 8008c2e:	429e      	cmp	r6, r3
 8008c30:	d90a      	bls.n	8008c48 <__udivmoddi4+0x94>
 8008c32:	eb1c 0303 	adds.w	r3, ip, r3
 8008c36:	f100 31ff 	add.w	r1, r0, #4294967295
 8008c3a:	f080 80fc 	bcs.w	8008e36 <__udivmoddi4+0x282>
 8008c3e:	429e      	cmp	r6, r3
 8008c40:	f240 80f9 	bls.w	8008e36 <__udivmoddi4+0x282>
 8008c44:	4463      	add	r3, ip
 8008c46:	3802      	subs	r0, #2
 8008c48:	1b9b      	subs	r3, r3, r6
 8008c4a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8008c4e:	2100      	movs	r1, #0
 8008c50:	b11d      	cbz	r5, 8008c5a <__udivmoddi4+0xa6>
 8008c52:	40d3      	lsrs	r3, r2
 8008c54:	2200      	movs	r2, #0
 8008c56:	e9c5 3200 	strd	r3, r2, [r5]
 8008c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c5e:	428b      	cmp	r3, r1
 8008c60:	d905      	bls.n	8008c6e <__udivmoddi4+0xba>
 8008c62:	b10d      	cbz	r5, 8008c68 <__udivmoddi4+0xb4>
 8008c64:	e9c5 0100 	strd	r0, r1, [r5]
 8008c68:	2100      	movs	r1, #0
 8008c6a:	4608      	mov	r0, r1
 8008c6c:	e7f5      	b.n	8008c5a <__udivmoddi4+0xa6>
 8008c6e:	fab3 f183 	clz	r1, r3
 8008c72:	2900      	cmp	r1, #0
 8008c74:	d146      	bne.n	8008d04 <__udivmoddi4+0x150>
 8008c76:	42a3      	cmp	r3, r4
 8008c78:	d302      	bcc.n	8008c80 <__udivmoddi4+0xcc>
 8008c7a:	4290      	cmp	r0, r2
 8008c7c:	f0c0 80f0 	bcc.w	8008e60 <__udivmoddi4+0x2ac>
 8008c80:	1a86      	subs	r6, r0, r2
 8008c82:	eb64 0303 	sbc.w	r3, r4, r3
 8008c86:	2001      	movs	r0, #1
 8008c88:	2d00      	cmp	r5, #0
 8008c8a:	d0e6      	beq.n	8008c5a <__udivmoddi4+0xa6>
 8008c8c:	e9c5 6300 	strd	r6, r3, [r5]
 8008c90:	e7e3      	b.n	8008c5a <__udivmoddi4+0xa6>
 8008c92:	2a00      	cmp	r2, #0
 8008c94:	f040 8090 	bne.w	8008db8 <__udivmoddi4+0x204>
 8008c98:	eba1 040c 	sub.w	r4, r1, ip
 8008c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008ca0:	fa1f f78c 	uxth.w	r7, ip
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	fbb4 f6f8 	udiv	r6, r4, r8
 8008caa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8008cae:	fb08 4416 	mls	r4, r8, r6, r4
 8008cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008cb6:	fb07 f006 	mul.w	r0, r7, r6
 8008cba:	4298      	cmp	r0, r3
 8008cbc:	d908      	bls.n	8008cd0 <__udivmoddi4+0x11c>
 8008cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8008cc2:	f106 34ff 	add.w	r4, r6, #4294967295
 8008cc6:	d202      	bcs.n	8008cce <__udivmoddi4+0x11a>
 8008cc8:	4298      	cmp	r0, r3
 8008cca:	f200 80cd 	bhi.w	8008e68 <__udivmoddi4+0x2b4>
 8008cce:	4626      	mov	r6, r4
 8008cd0:	1a1c      	subs	r4, r3, r0
 8008cd2:	fa1f f38e 	uxth.w	r3, lr
 8008cd6:	fbb4 f0f8 	udiv	r0, r4, r8
 8008cda:	fb08 4410 	mls	r4, r8, r0, r4
 8008cde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008ce2:	fb00 f707 	mul.w	r7, r0, r7
 8008ce6:	429f      	cmp	r7, r3
 8008ce8:	d908      	bls.n	8008cfc <__udivmoddi4+0x148>
 8008cea:	eb1c 0303 	adds.w	r3, ip, r3
 8008cee:	f100 34ff 	add.w	r4, r0, #4294967295
 8008cf2:	d202      	bcs.n	8008cfa <__udivmoddi4+0x146>
 8008cf4:	429f      	cmp	r7, r3
 8008cf6:	f200 80b0 	bhi.w	8008e5a <__udivmoddi4+0x2a6>
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	1bdb      	subs	r3, r3, r7
 8008cfe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008d02:	e7a5      	b.n	8008c50 <__udivmoddi4+0x9c>
 8008d04:	f1c1 0620 	rsb	r6, r1, #32
 8008d08:	408b      	lsls	r3, r1
 8008d0a:	fa22 f706 	lsr.w	r7, r2, r6
 8008d0e:	431f      	orrs	r7, r3
 8008d10:	fa20 fc06 	lsr.w	ip, r0, r6
 8008d14:	fa04 f301 	lsl.w	r3, r4, r1
 8008d18:	ea43 030c 	orr.w	r3, r3, ip
 8008d1c:	40f4      	lsrs	r4, r6
 8008d1e:	fa00 f801 	lsl.w	r8, r0, r1
 8008d22:	0c38      	lsrs	r0, r7, #16
 8008d24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8008d28:	fbb4 fef0 	udiv	lr, r4, r0
 8008d2c:	fa1f fc87 	uxth.w	ip, r7
 8008d30:	fb00 441e 	mls	r4, r0, lr, r4
 8008d34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008d38:	fb0e f90c 	mul.w	r9, lr, ip
 8008d3c:	45a1      	cmp	r9, r4
 8008d3e:	fa02 f201 	lsl.w	r2, r2, r1
 8008d42:	d90a      	bls.n	8008d5a <__udivmoddi4+0x1a6>
 8008d44:	193c      	adds	r4, r7, r4
 8008d46:	f10e 3aff 	add.w	sl, lr, #4294967295
 8008d4a:	f080 8084 	bcs.w	8008e56 <__udivmoddi4+0x2a2>
 8008d4e:	45a1      	cmp	r9, r4
 8008d50:	f240 8081 	bls.w	8008e56 <__udivmoddi4+0x2a2>
 8008d54:	f1ae 0e02 	sub.w	lr, lr, #2
 8008d58:	443c      	add	r4, r7
 8008d5a:	eba4 0409 	sub.w	r4, r4, r9
 8008d5e:	fa1f f983 	uxth.w	r9, r3
 8008d62:	fbb4 f3f0 	udiv	r3, r4, r0
 8008d66:	fb00 4413 	mls	r4, r0, r3, r4
 8008d6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008d6e:	fb03 fc0c 	mul.w	ip, r3, ip
 8008d72:	45a4      	cmp	ip, r4
 8008d74:	d907      	bls.n	8008d86 <__udivmoddi4+0x1d2>
 8008d76:	193c      	adds	r4, r7, r4
 8008d78:	f103 30ff 	add.w	r0, r3, #4294967295
 8008d7c:	d267      	bcs.n	8008e4e <__udivmoddi4+0x29a>
 8008d7e:	45a4      	cmp	ip, r4
 8008d80:	d965      	bls.n	8008e4e <__udivmoddi4+0x29a>
 8008d82:	3b02      	subs	r3, #2
 8008d84:	443c      	add	r4, r7
 8008d86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8008d8a:	fba0 9302 	umull	r9, r3, r0, r2
 8008d8e:	eba4 040c 	sub.w	r4, r4, ip
 8008d92:	429c      	cmp	r4, r3
 8008d94:	46ce      	mov	lr, r9
 8008d96:	469c      	mov	ip, r3
 8008d98:	d351      	bcc.n	8008e3e <__udivmoddi4+0x28a>
 8008d9a:	d04e      	beq.n	8008e3a <__udivmoddi4+0x286>
 8008d9c:	b155      	cbz	r5, 8008db4 <__udivmoddi4+0x200>
 8008d9e:	ebb8 030e 	subs.w	r3, r8, lr
 8008da2:	eb64 040c 	sbc.w	r4, r4, ip
 8008da6:	fa04 f606 	lsl.w	r6, r4, r6
 8008daa:	40cb      	lsrs	r3, r1
 8008dac:	431e      	orrs	r6, r3
 8008dae:	40cc      	lsrs	r4, r1
 8008db0:	e9c5 6400 	strd	r6, r4, [r5]
 8008db4:	2100      	movs	r1, #0
 8008db6:	e750      	b.n	8008c5a <__udivmoddi4+0xa6>
 8008db8:	f1c2 0320 	rsb	r3, r2, #32
 8008dbc:	fa20 f103 	lsr.w	r1, r0, r3
 8008dc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8008dc4:	fa24 f303 	lsr.w	r3, r4, r3
 8008dc8:	4094      	lsls	r4, r2
 8008dca:	430c      	orrs	r4, r1
 8008dcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008dd0:	fa00 fe02 	lsl.w	lr, r0, r2
 8008dd4:	fa1f f78c 	uxth.w	r7, ip
 8008dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ddc:	fb08 3110 	mls	r1, r8, r0, r3
 8008de0:	0c23      	lsrs	r3, r4, #16
 8008de2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008de6:	fb00 f107 	mul.w	r1, r0, r7
 8008dea:	4299      	cmp	r1, r3
 8008dec:	d908      	bls.n	8008e00 <__udivmoddi4+0x24c>
 8008dee:	eb1c 0303 	adds.w	r3, ip, r3
 8008df2:	f100 36ff 	add.w	r6, r0, #4294967295
 8008df6:	d22c      	bcs.n	8008e52 <__udivmoddi4+0x29e>
 8008df8:	4299      	cmp	r1, r3
 8008dfa:	d92a      	bls.n	8008e52 <__udivmoddi4+0x29e>
 8008dfc:	3802      	subs	r0, #2
 8008dfe:	4463      	add	r3, ip
 8008e00:	1a5b      	subs	r3, r3, r1
 8008e02:	b2a4      	uxth	r4, r4
 8008e04:	fbb3 f1f8 	udiv	r1, r3, r8
 8008e08:	fb08 3311 	mls	r3, r8, r1, r3
 8008e0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008e10:	fb01 f307 	mul.w	r3, r1, r7
 8008e14:	42a3      	cmp	r3, r4
 8008e16:	d908      	bls.n	8008e2a <__udivmoddi4+0x276>
 8008e18:	eb1c 0404 	adds.w	r4, ip, r4
 8008e1c:	f101 36ff 	add.w	r6, r1, #4294967295
 8008e20:	d213      	bcs.n	8008e4a <__udivmoddi4+0x296>
 8008e22:	42a3      	cmp	r3, r4
 8008e24:	d911      	bls.n	8008e4a <__udivmoddi4+0x296>
 8008e26:	3902      	subs	r1, #2
 8008e28:	4464      	add	r4, ip
 8008e2a:	1ae4      	subs	r4, r4, r3
 8008e2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e30:	e739      	b.n	8008ca6 <__udivmoddi4+0xf2>
 8008e32:	4604      	mov	r4, r0
 8008e34:	e6f0      	b.n	8008c18 <__udivmoddi4+0x64>
 8008e36:	4608      	mov	r0, r1
 8008e38:	e706      	b.n	8008c48 <__udivmoddi4+0x94>
 8008e3a:	45c8      	cmp	r8, r9
 8008e3c:	d2ae      	bcs.n	8008d9c <__udivmoddi4+0x1e8>
 8008e3e:	ebb9 0e02 	subs.w	lr, r9, r2
 8008e42:	eb63 0c07 	sbc.w	ip, r3, r7
 8008e46:	3801      	subs	r0, #1
 8008e48:	e7a8      	b.n	8008d9c <__udivmoddi4+0x1e8>
 8008e4a:	4631      	mov	r1, r6
 8008e4c:	e7ed      	b.n	8008e2a <__udivmoddi4+0x276>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	e799      	b.n	8008d86 <__udivmoddi4+0x1d2>
 8008e52:	4630      	mov	r0, r6
 8008e54:	e7d4      	b.n	8008e00 <__udivmoddi4+0x24c>
 8008e56:	46d6      	mov	lr, sl
 8008e58:	e77f      	b.n	8008d5a <__udivmoddi4+0x1a6>
 8008e5a:	4463      	add	r3, ip
 8008e5c:	3802      	subs	r0, #2
 8008e5e:	e74d      	b.n	8008cfc <__udivmoddi4+0x148>
 8008e60:	4606      	mov	r6, r0
 8008e62:	4623      	mov	r3, r4
 8008e64:	4608      	mov	r0, r1
 8008e66:	e70f      	b.n	8008c88 <__udivmoddi4+0xd4>
 8008e68:	3e02      	subs	r6, #2
 8008e6a:	4463      	add	r3, ip
 8008e6c:	e730      	b.n	8008cd0 <__udivmoddi4+0x11c>
 8008e6e:	bf00      	nop

08008e70 <__aeabi_idiv0>:
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop

08008e74 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8008e74:	4770      	bx	lr
	...

08008e78 <HAL_DeInit>:
{
 8008e78:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 8008e7a:	4b09      	ldr	r3, [pc, #36]	@ (8008ea0 <HAL_DeInit+0x28>)
 8008e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e80:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8008e82:	2400      	movs	r4, #0
 8008e84:	621c      	str	r4, [r3, #32]
  __HAL_RCC_APB2_FORCE_RESET();
 8008e86:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8008e88:	625c      	str	r4, [r3, #36]	@ 0x24
  __HAL_RCC_AHB1_FORCE_RESET();
 8008e8a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8008e8c:	611c      	str	r4, [r3, #16]
  __HAL_RCC_AHB2_FORCE_RESET();
 8008e8e:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8008e90:	615c      	str	r4, [r3, #20]
  __HAL_RCC_AHB3_FORCE_RESET();
 8008e92:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8008e94:	619c      	str	r4, [r3, #24]
  HAL_MspDeInit();
 8008e96:	f7ff ffed 	bl	8008e74 <HAL_MspDeInit>
}
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	bd10      	pop	{r4, pc}
 8008e9e:	bf00      	nop
 8008ea0:	40023800 	.word	0x40023800

08008ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ea4:	b510      	push	{r4, lr}
 8008ea6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8008ee4 <HAL_InitTick+0x40>)
 8008eaa:	781a      	ldrb	r2, [r3, #0]
 8008eac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8008ee8 <HAL_InitTick+0x44>)
 8008eb6:	6810      	ldr	r0, [r2, #0]
 8008eb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8008ebc:	f000 f8be 	bl	800903c <HAL_SYSTICK_Config>
 8008ec0:	b968      	cbnz	r0, 8008ede <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ec2:	2c0f      	cmp	r4, #15
 8008ec4:	d901      	bls.n	8008eca <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8008ec6:	2001      	movs	r0, #1
 8008ec8:	e00a      	b.n	8008ee0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008eca:	2200      	movs	r2, #0
 8008ecc:	4621      	mov	r1, r4
 8008ece:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed2:	f000 f891 	bl	8008ff8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008ed6:	4b05      	ldr	r3, [pc, #20]	@ (8008eec <HAL_InitTick+0x48>)
 8008ed8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008eda:	2000      	movs	r0, #0
 8008edc:	e000      	b.n	8008ee0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8008ede:	2001      	movs	r0, #1
}
 8008ee0:	bd10      	pop	{r4, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20000000 	.word	0x20000000
 8008ee8:	2000018c 	.word	0x2000018c
 8008eec:	20000004 	.word	0x20000004

08008ef0 <HAL_Init>:
{
 8008ef0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8008f20 <HAL_Init+0x30>)
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008efa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008f02:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f0a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008f0c:	2003      	movs	r0, #3
 8008f0e:	f000 f861 	bl	8008fd4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8008f12:	2000      	movs	r0, #0
 8008f14:	f7ff ffc6 	bl	8008ea4 <HAL_InitTick>
  HAL_MspInit();
 8008f18:	f003 fae4 	bl	800c4e4 <HAL_MspInit>
}
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	bd08      	pop	{r3, pc}
 8008f20:	40023c00 	.word	0x40023c00

08008f24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008f24:	4a03      	ldr	r2, [pc, #12]	@ (8008f34 <HAL_IncTick+0x10>)
 8008f26:	6811      	ldr	r1, [r2, #0]
 8008f28:	4b03      	ldr	r3, [pc, #12]	@ (8008f38 <HAL_IncTick+0x14>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	440b      	add	r3, r1
 8008f2e:	6013      	str	r3, [r2, #0]
}
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	20000680 	.word	0x20000680
 8008f38:	20000000 	.word	0x20000000

08008f3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008f3c:	4b01      	ldr	r3, [pc, #4]	@ (8008f44 <HAL_GetTick+0x8>)
 8008f3e:	6818      	ldr	r0, [r3, #0]
}
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	20000680 	.word	0x20000680

08008f48 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	db0c      	blt.n	8008f66 <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f4c:	f000 021f 	and.w	r2, r0, #31
 8008f50:	0940      	lsrs	r0, r0, #5
 8008f52:	2301      	movs	r3, #1
 8008f54:	4093      	lsls	r3, r2
 8008f56:	3020      	adds	r0, #32
 8008f58:	4a03      	ldr	r2, [pc, #12]	@ (8008f68 <__NVIC_DisableIRQ+0x20>)
 8008f5a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008f5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008f62:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8008f66:	4770      	bx	lr
 8008f68:	e000e100 	.word	0xe000e100

08008f6c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	db08      	blt.n	8008f82 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f70:	0109      	lsls	r1, r1, #4
 8008f72:	b2c9      	uxtb	r1, r1
 8008f74:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8008f78:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8008f7c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8008f80:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f82:	f000 000f 	and.w	r0, r0, #15
 8008f86:	0109      	lsls	r1, r1, #4
 8008f88:	b2c9      	uxtb	r1, r1
 8008f8a:	4b01      	ldr	r3, [pc, #4]	@ (8008f90 <__NVIC_SetPriority+0x24>)
 8008f8c:	5419      	strb	r1, [r3, r0]
  }
}
 8008f8e:	4770      	bx	lr
 8008f90:	e000ed14 	.word	0xe000ed14

08008f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008f94:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008f96:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008f9a:	f1c0 0c07 	rsb	ip, r0, #7
 8008f9e:	f1bc 0f04 	cmp.w	ip, #4
 8008fa2:	bf28      	it	cs
 8008fa4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008fa8:	1d03      	adds	r3, r0, #4
 8008faa:	2b06      	cmp	r3, #6
 8008fac:	d90f      	bls.n	8008fce <NVIC_EncodePriority+0x3a>
 8008fae:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008fb0:	f04f 3eff 	mov.w	lr, #4294967295
 8008fb4:	fa0e f00c 	lsl.w	r0, lr, ip
 8008fb8:	ea21 0100 	bic.w	r1, r1, r0
 8008fbc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008fbe:	fa0e fe03 	lsl.w	lr, lr, r3
 8008fc2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8008fc6:	ea41 0002 	orr.w	r0, r1, r2
 8008fca:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008fce:	2300      	movs	r3, #0
 8008fd0:	e7ee      	b.n	8008fb0 <NVIC_EncodePriority+0x1c>
	...

08008fd4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008fd4:	4a07      	ldr	r2, [pc, #28]	@ (8008ff4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008fd6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008fd8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008fdc:	041b      	lsls	r3, r3, #16
 8008fde:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008fe0:	0200      	lsls	r0, r0, #8
 8008fe2:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008fe6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8008fe8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8008ff0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008ff2:	4770      	bx	lr
 8008ff4:	e000ed00 	.word	0xe000ed00

08008ff8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ffc:	4b05      	ldr	r3, [pc, #20]	@ (8009014 <HAL_NVIC_SetPriority+0x1c>)
 8008ffe:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009000:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8009004:	f7ff ffc6 	bl	8008f94 <NVIC_EncodePriority>
 8009008:	4601      	mov	r1, r0
 800900a:	4620      	mov	r0, r4
 800900c:	f7ff ffae 	bl	8008f6c <__NVIC_SetPriority>
}
 8009010:	bd10      	pop	{r4, pc}
 8009012:	bf00      	nop
 8009014:	e000ed00 	.word	0xe000ed00

08009018 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8009018:	2800      	cmp	r0, #0
 800901a:	db07      	blt.n	800902c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800901c:	f000 021f 	and.w	r2, r0, #31
 8009020:	0940      	lsrs	r0, r0, #5
 8009022:	2301      	movs	r3, #1
 8009024:	4093      	lsls	r3, r2
 8009026:	4a02      	ldr	r2, [pc, #8]	@ (8009030 <HAL_NVIC_EnableIRQ+0x18>)
 8009028:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	e000e100 	.word	0xe000e100

08009034 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009034:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009036:	f7ff ff87 	bl	8008f48 <__NVIC_DisableIRQ>
}
 800903a:	bd08      	pop	{r3, pc}

0800903c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800903c:	3801      	subs	r0, #1
 800903e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8009042:	d20b      	bcs.n	800905c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009044:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009048:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800904a:	4a05      	ldr	r2, [pc, #20]	@ (8009060 <HAL_SYSTICK_Config+0x24>)
 800904c:	21f0      	movs	r1, #240	@ 0xf0
 800904e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009052:	2000      	movs	r0, #0
 8009054:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009056:	2207      	movs	r2, #7
 8009058:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800905a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800905c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800905e:	4770      	bx	lr
 8009060:	e000ed00 	.word	0xe000ed00

08009064 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009064:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009066:	490a      	ldr	r1, [pc, #40]	@ (8009090 <FLASH_Program_DoubleWord+0x2c>)
 8009068:	690c      	ldr	r4, [r1, #16]
 800906a:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
 800906e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8009070:	690c      	ldr	r4, [r1, #16]
 8009072:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
 8009076:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009078:	690c      	ldr	r4, [r1, #16]
 800907a:	f044 0401 	orr.w	r4, r4, #1
 800907e:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8009080:	6002      	str	r2, [r0, #0]
 8009082:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8009086:	6043      	str	r3, [r0, #4]
}
 8009088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	40023c00 	.word	0x40023c00

08009094 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009094:	4b07      	ldr	r3, [pc, #28]	@ (80090b4 <FLASH_Program_Word+0x20>)
 8009096:	691a      	ldr	r2, [r3, #16]
 8009098:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800909c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800909e:	691a      	ldr	r2, [r3, #16]
 80090a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090a4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80090a6:	691a      	ldr	r2, [r3, #16]
 80090a8:	f042 0201 	orr.w	r2, r2, #1
 80090ac:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80090ae:	6001      	str	r1, [r0, #0]
}
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	40023c00 	.word	0x40023c00

080090b8 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80090b8:	4b07      	ldr	r3, [pc, #28]	@ (80090d8 <FLASH_Program_HalfWord+0x20>)
 80090ba:	691a      	ldr	r2, [r3, #16]
 80090bc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80090c0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80090c2:	691a      	ldr	r2, [r3, #16]
 80090c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090c8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80090ca:	691a      	ldr	r2, [r3, #16]
 80090cc:	f042 0201 	orr.w	r2, r2, #1
 80090d0:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80090d2:	8001      	strh	r1, [r0, #0]
}
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	40023c00 	.word	0x40023c00

080090dc <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80090dc:	4b06      	ldr	r3, [pc, #24]	@ (80090f8 <FLASH_Program_Byte+0x1c>)
 80090de:	691a      	ldr	r2, [r3, #16]
 80090e0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80090e4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80090e6:	691a      	ldr	r2, [r3, #16]
 80090e8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80090ea:	691a      	ldr	r2, [r3, #16]
 80090ec:	f042 0201 	orr.w	r2, r2, #1
 80090f0:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 80090f2:	7001      	strb	r1, [r0, #0]
}
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	40023c00 	.word	0x40023c00

080090fc <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80090fc:	4b20      	ldr	r3, [pc, #128]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f013 0f10 	tst.w	r3, #16
 8009104:	d007      	beq.n	8009116 <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009106:	4a1f      	ldr	r2, [pc, #124]	@ (8009184 <FLASH_SetErrorCode+0x88>)
 8009108:	69d3      	ldr	r3, [r2, #28]
 800910a:	f043 0310 	orr.w	r3, r3, #16
 800910e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8009110:	4b1b      	ldr	r3, [pc, #108]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 8009112:	2210      	movs	r2, #16
 8009114:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8009116:	4b1a      	ldr	r3, [pc, #104]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	f013 0f20 	tst.w	r3, #32
 800911e:	d007      	beq.n	8009130 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8009120:	4a18      	ldr	r2, [pc, #96]	@ (8009184 <FLASH_SetErrorCode+0x88>)
 8009122:	69d3      	ldr	r3, [r2, #28]
 8009124:	f043 0308 	orr.w	r3, r3, #8
 8009128:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800912a:	4b15      	ldr	r3, [pc, #84]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 800912c:	2220      	movs	r2, #32
 800912e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009130:	4b13      	ldr	r3, [pc, #76]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009138:	d007      	beq.n	800914a <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800913a:	4a12      	ldr	r2, [pc, #72]	@ (8009184 <FLASH_SetErrorCode+0x88>)
 800913c:	69d3      	ldr	r3, [r2, #28]
 800913e:	f043 0304 	orr.w	r3, r3, #4
 8009142:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8009144:	4b0e      	ldr	r3, [pc, #56]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 8009146:	2240      	movs	r2, #64	@ 0x40
 8009148:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800914a:	4b0d      	ldr	r3, [pc, #52]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009152:	d007      	beq.n	8009164 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8009154:	4a0b      	ldr	r2, [pc, #44]	@ (8009184 <FLASH_SetErrorCode+0x88>)
 8009156:	69d3      	ldr	r3, [r2, #28]
 8009158:	f043 0302 	orr.w	r3, r3, #2
 800915c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800915e:	4b08      	ldr	r3, [pc, #32]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 8009160:	2280      	movs	r2, #128	@ 0x80
 8009162:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8009164:	4b06      	ldr	r3, [pc, #24]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	f013 0f02 	tst.w	r3, #2
 800916c:	d007      	beq.n	800917e <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800916e:	4a05      	ldr	r2, [pc, #20]	@ (8009184 <FLASH_SetErrorCode+0x88>)
 8009170:	69d3      	ldr	r3, [r2, #28]
 8009172:	f043 0320 	orr.w	r3, r3, #32
 8009176:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009178:	4b01      	ldr	r3, [pc, #4]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 800917a:	2202      	movs	r2, #2
 800917c:	60da      	str	r2, [r3, #12]
  }
}
 800917e:	4770      	bx	lr
 8009180:	40023c00 	.word	0x40023c00
 8009184:	20000684 	.word	0x20000684

08009188 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009188:	4b09      	ldr	r3, [pc, #36]	@ (80091b0 <HAL_FLASH_Unlock+0x28>)
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	2b00      	cmp	r3, #0
 800918e:	db01      	blt.n	8009194 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8009190:	2000      	movs	r0, #0
 8009192:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009194:	4b06      	ldr	r3, [pc, #24]	@ (80091b0 <HAL_FLASH_Unlock+0x28>)
 8009196:	4a07      	ldr	r2, [pc, #28]	@ (80091b4 <HAL_FLASH_Unlock+0x2c>)
 8009198:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800919a:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 800919e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	db01      	blt.n	80091aa <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80091a6:	2000      	movs	r0, #0
 80091a8:	4770      	bx	lr
      status = HAL_ERROR;
 80091aa:	2001      	movs	r0, #1
}
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	40023c00 	.word	0x40023c00
 80091b4:	45670123 	.word	0x45670123

080091b8 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 80091b8:	4a03      	ldr	r2, [pc, #12]	@ (80091c8 <HAL_FLASH_Lock+0x10>)
 80091ba:	6913      	ldr	r3, [r2, #16]
 80091bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091c0:	6113      	str	r3, [r2, #16]
}
 80091c2:	2000      	movs	r0, #0
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	40023c00 	.word	0x40023c00

080091cc <FLASH_WaitForLastOperation>:
{ 
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80091d0:	4b14      	ldr	r3, [pc, #80]	@ (8009224 <FLASH_WaitForLastOperation+0x58>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 80091d6:	f7ff feb1 	bl	8008f3c <HAL_GetTick>
 80091da:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80091dc:	4b12      	ldr	r3, [pc, #72]	@ (8009228 <FLASH_WaitForLastOperation+0x5c>)
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80091e4:	d00a      	beq.n	80091fc <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 80091e6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80091ea:	d0f7      	beq.n	80091dc <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80091ec:	b124      	cbz	r4, 80091f8 <FLASH_WaitForLastOperation+0x2c>
 80091ee:	f7ff fea5 	bl	8008f3c <HAL_GetTick>
 80091f2:	1b40      	subs	r0, r0, r5
 80091f4:	42a0      	cmp	r0, r4
 80091f6:	d9f1      	bls.n	80091dc <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 80091f8:	2003      	movs	r0, #3
 80091fa:	e00d      	b.n	8009218 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80091fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009228 <FLASH_WaitForLastOperation+0x5c>)
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	f013 0f01 	tst.w	r3, #1
 8009204:	d002      	beq.n	800920c <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009206:	4b08      	ldr	r3, [pc, #32]	@ (8009228 <FLASH_WaitForLastOperation+0x5c>)
 8009208:	2201      	movs	r2, #1
 800920a:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800920c:	4b06      	ldr	r3, [pc, #24]	@ (8009228 <FLASH_WaitForLastOperation+0x5c>)
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	f013 0ff2 	tst.w	r3, #242	@ 0xf2
 8009214:	d101      	bne.n	800921a <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 8009216:	2000      	movs	r0, #0
}  
 8009218:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 800921a:	f7ff ff6f 	bl	80090fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 800921e:	2001      	movs	r0, #1
 8009220:	e7fa      	b.n	8009218 <FLASH_WaitForLastOperation+0x4c>
 8009222:	bf00      	nop
 8009224:	20000684 	.word	0x20000684
 8009228:	40023c00 	.word	0x40023c00

0800922c <HAL_FLASH_Program>:
{
 800922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922e:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8009230:	4a1b      	ldr	r2, [pc, #108]	@ (80092a0 <HAL_FLASH_Program+0x74>)
 8009232:	7e12      	ldrb	r2, [r2, #24]
 8009234:	2a01      	cmp	r2, #1
 8009236:	d030      	beq.n	800929a <HAL_FLASH_Program+0x6e>
 8009238:	4604      	mov	r4, r0
 800923a:	460d      	mov	r5, r1
 800923c:	461f      	mov	r7, r3
 800923e:	4b18      	ldr	r3, [pc, #96]	@ (80092a0 <HAL_FLASH_Program+0x74>)
 8009240:	2201      	movs	r2, #1
 8009242:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009244:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009248:	f7ff ffc0 	bl	80091cc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800924c:	b990      	cbnz	r0, 8009274 <HAL_FLASH_Program+0x48>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800924e:	b1ac      	cbz	r4, 800927c <HAL_FLASH_Program+0x50>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009250:	2c01      	cmp	r4, #1
 8009252:	d018      	beq.n	8009286 <HAL_FLASH_Program+0x5a>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8009254:	2c02      	cmp	r4, #2
 8009256:	d01b      	beq.n	8009290 <HAL_FLASH_Program+0x64>
      FLASH_Program_DoubleWord(Address, Data);
 8009258:	4632      	mov	r2, r6
 800925a:	463b      	mov	r3, r7
 800925c:	4628      	mov	r0, r5
 800925e:	f7ff ff01 	bl	8009064 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009262:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009266:	f7ff ffb1 	bl	80091cc <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 800926a:	4a0e      	ldr	r2, [pc, #56]	@ (80092a4 <HAL_FLASH_Program+0x78>)
 800926c:	6913      	ldr	r3, [r2, #16]
 800926e:	f023 0301 	bic.w	r3, r3, #1
 8009272:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8009274:	4b0a      	ldr	r3, [pc, #40]	@ (80092a0 <HAL_FLASH_Program+0x74>)
 8009276:	2200      	movs	r2, #0
 8009278:	761a      	strb	r2, [r3, #24]
}
 800927a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800927c:	b2f1      	uxtb	r1, r6
 800927e:	4628      	mov	r0, r5
 8009280:	f7ff ff2c 	bl	80090dc <FLASH_Program_Byte>
 8009284:	e7ed      	b.n	8009262 <HAL_FLASH_Program+0x36>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8009286:	b2b1      	uxth	r1, r6
 8009288:	4628      	mov	r0, r5
 800928a:	f7ff ff15 	bl	80090b8 <FLASH_Program_HalfWord>
 800928e:	e7e8      	b.n	8009262 <HAL_FLASH_Program+0x36>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8009290:	4631      	mov	r1, r6
 8009292:	4628      	mov	r0, r5
 8009294:	f7ff fefe 	bl	8009094 <FLASH_Program_Word>
 8009298:	e7e3      	b.n	8009262 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 800929a:	2002      	movs	r0, #2
 800929c:	e7ed      	b.n	800927a <HAL_FLASH_Program+0x4e>
 800929e:	bf00      	nop
 80092a0:	20000684 	.word	0x20000684
 80092a4:	40023c00 	.word	0x40023c00

080092a8 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80092a8:	4b07      	ldr	r3, [pc, #28]	@ (80092c8 <FLASH_MassErase+0x20>)
 80092aa:	691a      	ldr	r2, [r3, #16]
 80092ac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80092b0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 80092b2:	691a      	ldr	r2, [r3, #16]
 80092b4:	f042 0204 	orr.w	r2, r2, #4
 80092b8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80092ba:	691a      	ldr	r2, [r3, #16]
 80092bc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80092c0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80092c4:	611a      	str	r2, [r3, #16]
}
 80092c6:	4770      	bx	lr
 80092c8:	40023c00 	.word	0x40023c00

080092cc <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80092cc:	2901      	cmp	r1, #1
 80092ce:	d01b      	beq.n	8009308 <FLASH_Erase_Sector+0x3c>
 80092d0:	2902      	cmp	r1, #2
 80092d2:	d01c      	beq.n	800930e <FLASH_Erase_Sector+0x42>
 80092d4:	b109      	cbz	r1, 80092da <FLASH_Erase_Sector+0xe>
{
 80092d6:	f44f 7140 	mov.w	r1, #768	@ 0x300
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80092da:	4b0e      	ldr	r3, [pc, #56]	@ (8009314 <FLASH_Erase_Sector+0x48>)
 80092dc:	691a      	ldr	r2, [r3, #16]
 80092de:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80092e2:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 80092e4:	691a      	ldr	r2, [r3, #16]
 80092e6:	430a      	orrs	r2, r1
 80092e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80092ea:	691a      	ldr	r2, [r3, #16]
 80092ec:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 80092f0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80092f2:	691a      	ldr	r2, [r3, #16]
 80092f4:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 80092f8:	f040 0002 	orr.w	r0, r0, #2
 80092fc:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80092fe:	691a      	ldr	r2, [r3, #16]
 8009300:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009304:	611a      	str	r2, [r3, #16]
}
 8009306:	4770      	bx	lr
{
 8009308:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800930c:	e7e5      	b.n	80092da <FLASH_Erase_Sector+0xe>
 800930e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009312:	e7e2      	b.n	80092da <FLASH_Erase_Sector+0xe>
 8009314:	40023c00 	.word	0x40023c00

08009318 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8009318:	4b16      	ldr	r3, [pc, #88]	@ (8009374 <FLASH_FlushCaches+0x5c>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8009320:	d010      	beq.n	8009344 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009322:	4b14      	ldr	r3, [pc, #80]	@ (8009374 <FLASH_FlushCaches+0x5c>)
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800932a:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800933a:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009342:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8009344:	4b0b      	ldr	r3, [pc, #44]	@ (8009374 <FLASH_FlushCaches+0x5c>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800934c:	d010      	beq.n	8009370 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800934e:	4b09      	ldr	r3, [pc, #36]	@ (8009374 <FLASH_FlushCaches+0x5c>)
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009356:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800935e:	601a      	str	r2, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009366:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800936e:	601a      	str	r2, [r3, #0]
  }
}
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	40023c00 	.word	0x40023c00

08009378 <HAL_FLASHEx_Erase>:
{
 8009378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800937a:	4b22      	ldr	r3, [pc, #136]	@ (8009404 <HAL_FLASHEx_Erase+0x8c>)
 800937c:	7e1b      	ldrb	r3, [r3, #24]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d03e      	beq.n	8009400 <HAL_FLASHEx_Erase+0x88>
 8009382:	4604      	mov	r4, r0
 8009384:	460e      	mov	r6, r1
 8009386:	4b1f      	ldr	r3, [pc, #124]	@ (8009404 <HAL_FLASHEx_Erase+0x8c>)
 8009388:	2201      	movs	r2, #1
 800938a:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800938c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009390:	f7ff ff1c 	bl	80091cc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8009394:	4607      	mov	r7, r0
 8009396:	bb70      	cbnz	r0, 80093f6 <HAL_FLASHEx_Erase+0x7e>
    *SectorError = 0xFFFFFFFFU;
 8009398:	f04f 33ff 	mov.w	r3, #4294967295
 800939c:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d016      	beq.n	80093d2 <HAL_FLASHEx_Erase+0x5a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80093a4:	68a5      	ldr	r5, [r4, #8]
 80093a6:	68e3      	ldr	r3, [r4, #12]
 80093a8:	68a2      	ldr	r2, [r4, #8]
 80093aa:	4413      	add	r3, r2
 80093ac:	42ab      	cmp	r3, r5
 80093ae:	d920      	bls.n	80093f2 <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80093b0:	7c21      	ldrb	r1, [r4, #16]
 80093b2:	4628      	mov	r0, r5
 80093b4:	f7ff ff8a 	bl	80092cc <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80093b8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80093bc:	f7ff ff06 	bl	80091cc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80093c0:	4a11      	ldr	r2, [pc, #68]	@ (8009408 <HAL_FLASHEx_Erase+0x90>)
 80093c2:	6913      	ldr	r3, [r2, #16]
 80093c4:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80093c8:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 80093ca:	4607      	mov	r7, r0
 80093cc:	b980      	cbnz	r0, 80093f0 <HAL_FLASHEx_Erase+0x78>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80093ce:	3501      	adds	r5, #1
 80093d0:	e7e9      	b.n	80093a6 <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80093d2:	6861      	ldr	r1, [r4, #4]
 80093d4:	7c20      	ldrb	r0, [r4, #16]
 80093d6:	f7ff ff67 	bl	80092a8 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80093da:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80093de:	f7ff fef5 	bl	80091cc <FLASH_WaitForLastOperation>
 80093e2:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 80093e4:	4a08      	ldr	r2, [pc, #32]	@ (8009408 <HAL_FLASHEx_Erase+0x90>)
 80093e6:	6913      	ldr	r3, [r2, #16]
 80093e8:	f023 0304 	bic.w	r3, r3, #4
 80093ec:	6113      	str	r3, [r2, #16]
 80093ee:	e000      	b.n	80093f2 <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 80093f0:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();    
 80093f2:	f7ff ff91 	bl	8009318 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80093f6:	4b03      	ldr	r3, [pc, #12]	@ (8009404 <HAL_FLASHEx_Erase+0x8c>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	761a      	strb	r2, [r3, #24]
}
 80093fc:	4638      	mov	r0, r7
 80093fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8009400:	2702      	movs	r7, #2
 8009402:	e7fb      	b.n	80093fc <HAL_FLASHEx_Erase+0x84>
 8009404:	20000684 	.word	0x20000684
 8009408:	40023c00 	.word	0x40023c00

0800940c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800940c:	2300      	movs	r3, #0
 800940e:	2b0f      	cmp	r3, #15
 8009410:	f200 80da 	bhi.w	80095c8 <HAL_GPIO_Init+0x1bc>
{
 8009414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009416:	b083      	sub	sp, #12
 8009418:	e03a      	b.n	8009490 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800941a:	2207      	movs	r2, #7
 800941c:	e000      	b.n	8009420 <HAL_GPIO_Init+0x14>
 800941e:	2200      	movs	r2, #0
 8009420:	40aa      	lsls	r2, r5
 8009422:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009424:	3402      	adds	r4, #2
 8009426:	4d69      	ldr	r5, [pc, #420]	@ (80095cc <HAL_GPIO_Init+0x1c0>)
 8009428:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800942c:	4a68      	ldr	r2, [pc, #416]	@ (80095d0 <HAL_GPIO_Init+0x1c4>)
 800942e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8009430:	ea6f 020c 	mvn.w	r2, ip
 8009434:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009438:	684e      	ldr	r6, [r1, #4]
 800943a:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 800943e:	d001      	beq.n	8009444 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8009440:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8009444:	4c62      	ldr	r4, [pc, #392]	@ (80095d0 <HAL_GPIO_Init+0x1c4>)
 8009446:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8009448:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800944a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800944e:	684e      	ldr	r6, [r1, #4]
 8009450:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8009454:	d001      	beq.n	800945a <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 8009456:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800945a:	4c5d      	ldr	r4, [pc, #372]	@ (80095d0 <HAL_GPIO_Init+0x1c4>)
 800945c:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800945e:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8009460:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009464:	684e      	ldr	r6, [r1, #4]
 8009466:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800946a:	d001      	beq.n	8009470 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 800946c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8009470:	4c57      	ldr	r4, [pc, #348]	@ (80095d0 <HAL_GPIO_Init+0x1c4>)
 8009472:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8009474:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8009476:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009478:	684d      	ldr	r5, [r1, #4]
 800947a:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
 800947e:	d001      	beq.n	8009484 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8009480:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8009484:	4c52      	ldr	r4, [pc, #328]	@ (80095d0 <HAL_GPIO_Init+0x1c4>)
 8009486:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009488:	3301      	adds	r3, #1
 800948a:	2b0f      	cmp	r3, #15
 800948c:	f200 809a 	bhi.w	80095c4 <HAL_GPIO_Init+0x1b8>
    ioposition = 0x01U << position;
 8009490:	2201      	movs	r2, #1
 8009492:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009494:	680c      	ldr	r4, [r1, #0]
 8009496:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 800949a:	ea32 0404 	bics.w	r4, r2, r4
 800949e:	d1f3      	bne.n	8009488 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80094a0:	684c      	ldr	r4, [r1, #4]
 80094a2:	1e65      	subs	r5, r4, #1
 80094a4:	2d01      	cmp	r5, #1
 80094a6:	d903      	bls.n	80094b0 <HAL_GPIO_Init+0xa4>
 80094a8:	2c11      	cmp	r4, #17
 80094aa:	d001      	beq.n	80094b0 <HAL_GPIO_Init+0xa4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80094ac:	2c12      	cmp	r4, #18
 80094ae:	d112      	bne.n	80094d6 <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR; 
 80094b0:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80094b2:	005e      	lsls	r6, r3, #1
 80094b4:	2403      	movs	r4, #3
 80094b6:	40b4      	lsls	r4, r6
 80094b8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80094bc:	68cc      	ldr	r4, [r1, #12]
 80094be:	40b4      	lsls	r4, r6
 80094c0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80094c2:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80094c4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80094c6:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80094ca:	684a      	ldr	r2, [r1, #4]
 80094cc:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80094d0:	409a      	lsls	r2, r3
 80094d2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80094d4:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80094d6:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80094d8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80094dc:	2203      	movs	r2, #3
 80094de:	fa02 f20e 	lsl.w	r2, r2, lr
 80094e2:	43d4      	mvns	r4, r2
 80094e4:	ea25 0502 	bic.w	r5, r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80094e8:	688a      	ldr	r2, [r1, #8]
 80094ea:	fa02 f20e 	lsl.w	r2, r2, lr
 80094ee:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 80094f0:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80094f2:	684a      	ldr	r2, [r1, #4]
 80094f4:	2a02      	cmp	r2, #2
 80094f6:	d001      	beq.n	80094fc <HAL_GPIO_Init+0xf0>
 80094f8:	2a12      	cmp	r2, #18
 80094fa:	d10f      	bne.n	800951c <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3U];
 80094fc:	08dd      	lsrs	r5, r3, #3
 80094fe:	3508      	adds	r5, #8
 8009500:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009504:	f003 0607 	and.w	r6, r3, #7
 8009508:	00b6      	lsls	r6, r6, #2
 800950a:	220f      	movs	r2, #15
 800950c:	40b2      	lsls	r2, r6
 800950e:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009512:	690a      	ldr	r2, [r1, #16]
 8009514:	40b2      	lsls	r2, r6
 8009516:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8009518:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 800951c:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800951e:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009520:	684a      	ldr	r2, [r1, #4]
 8009522:	f002 0203 	and.w	r2, r2, #3
 8009526:	fa02 f20e 	lsl.w	r2, r2, lr
 800952a:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800952c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800952e:	684a      	ldr	r2, [r1, #4]
 8009530:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 8009534:	d0a8      	beq.n	8009488 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009536:	2200      	movs	r2, #0
 8009538:	9201      	str	r2, [sp, #4]
 800953a:	4a26      	ldr	r2, [pc, #152]	@ (80095d4 <HAL_GPIO_Init+0x1c8>)
 800953c:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 800953e:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8009542:	6454      	str	r4, [r2, #68]	@ 0x44
 8009544:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009546:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800954a:	9201      	str	r2, [sp, #4]
 800954c:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800954e:	089c      	lsrs	r4, r3, #2
 8009550:	1ca5      	adds	r5, r4, #2
 8009552:	4a1e      	ldr	r2, [pc, #120]	@ (80095cc <HAL_GPIO_Init+0x1c0>)
 8009554:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009558:	f003 0503 	and.w	r5, r3, #3
 800955c:	00ad      	lsls	r5, r5, #2
 800955e:	220f      	movs	r2, #15
 8009560:	40aa      	lsls	r2, r5
 8009562:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009566:	4a1c      	ldr	r2, [pc, #112]	@ (80095d8 <HAL_GPIO_Init+0x1cc>)
 8009568:	4290      	cmp	r0, r2
 800956a:	f43f af58 	beq.w	800941e <HAL_GPIO_Init+0x12>
 800956e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009572:	4290      	cmp	r0, r2
 8009574:	d01a      	beq.n	80095ac <HAL_GPIO_Init+0x1a0>
 8009576:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800957a:	4290      	cmp	r0, r2
 800957c:	d018      	beq.n	80095b0 <HAL_GPIO_Init+0x1a4>
 800957e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009582:	4290      	cmp	r0, r2
 8009584:	d016      	beq.n	80095b4 <HAL_GPIO_Init+0x1a8>
 8009586:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800958a:	4290      	cmp	r0, r2
 800958c:	d014      	beq.n	80095b8 <HAL_GPIO_Init+0x1ac>
 800958e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009592:	4290      	cmp	r0, r2
 8009594:	d012      	beq.n	80095bc <HAL_GPIO_Init+0x1b0>
 8009596:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800959a:	4290      	cmp	r0, r2
 800959c:	d010      	beq.n	80095c0 <HAL_GPIO_Init+0x1b4>
 800959e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095a2:	4290      	cmp	r0, r2
 80095a4:	f43f af39 	beq.w	800941a <HAL_GPIO_Init+0xe>
 80095a8:	2208      	movs	r2, #8
 80095aa:	e739      	b.n	8009420 <HAL_GPIO_Init+0x14>
 80095ac:	2201      	movs	r2, #1
 80095ae:	e737      	b.n	8009420 <HAL_GPIO_Init+0x14>
 80095b0:	2202      	movs	r2, #2
 80095b2:	e735      	b.n	8009420 <HAL_GPIO_Init+0x14>
 80095b4:	2203      	movs	r2, #3
 80095b6:	e733      	b.n	8009420 <HAL_GPIO_Init+0x14>
 80095b8:	2204      	movs	r2, #4
 80095ba:	e731      	b.n	8009420 <HAL_GPIO_Init+0x14>
 80095bc:	2205      	movs	r2, #5
 80095be:	e72f      	b.n	8009420 <HAL_GPIO_Init+0x14>
 80095c0:	2206      	movs	r2, #6
 80095c2:	e72d      	b.n	8009420 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80095c4:	b003      	add	sp, #12
 80095c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	40013800 	.word	0x40013800
 80095d0:	40013c00 	.word	0x40013c00
 80095d4:	40023800 	.word	0x40023800
 80095d8:	40020000 	.word	0x40020000

080095dc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80095dc:	2800      	cmp	r0, #0
 80095de:	f000 81da 	beq.w	8009996 <HAL_RCC_OscConfig+0x3ba>
{
 80095e2:	b570      	push	{r4, r5, r6, lr}
 80095e4:	b082      	sub	sp, #8
 80095e6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095e8:	6803      	ldr	r3, [r0, #0]
 80095ea:	f013 0f01 	tst.w	r3, #1
 80095ee:	d03b      	beq.n	8009668 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80095f0:	4b9f      	ldr	r3, [pc, #636]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f003 030c 	and.w	r3, r3, #12
 80095f8:	2b04      	cmp	r3, #4
 80095fa:	d02c      	beq.n	8009656 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80095fc:	4b9c      	ldr	r3, [pc, #624]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009604:	2b08      	cmp	r3, #8
 8009606:	d021      	beq.n	800964c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009608:	6863      	ldr	r3, [r4, #4]
 800960a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800960e:	d04f      	beq.n	80096b0 <HAL_RCC_OscConfig+0xd4>
 8009610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009614:	d052      	beq.n	80096bc <HAL_RCC_OscConfig+0xe0>
 8009616:	4b96      	ldr	r3, [pc, #600]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009626:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009628:	6863      	ldr	r3, [r4, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d050      	beq.n	80096d0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800962e:	f7ff fc85 	bl	8008f3c <HAL_GetTick>
 8009632:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009634:	4b8e      	ldr	r3, [pc, #568]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800963c:	d114      	bne.n	8009668 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800963e:	f7ff fc7d 	bl	8008f3c <HAL_GetTick>
 8009642:	1b40      	subs	r0, r0, r5
 8009644:	2864      	cmp	r0, #100	@ 0x64
 8009646:	d9f5      	bls.n	8009634 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8009648:	2003      	movs	r0, #3
 800964a:	e1ab      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800964c:	4b88      	ldr	r3, [pc, #544]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8009654:	d0d8      	beq.n	8009608 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009656:	4b86      	ldr	r3, [pc, #536]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800965e:	d003      	beq.n	8009668 <HAL_RCC_OscConfig+0x8c>
 8009660:	6863      	ldr	r3, [r4, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 8199 	beq.w	800999a <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	f013 0f02 	tst.w	r3, #2
 800966e:	d054      	beq.n	800971a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009670:	4b7f      	ldr	r3, [pc, #508]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f013 0f0c 	tst.w	r3, #12
 8009678:	d03e      	beq.n	80096f8 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800967a:	4b7d      	ldr	r3, [pc, #500]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009682:	2b08      	cmp	r3, #8
 8009684:	d033      	beq.n	80096ee <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009686:	68e3      	ldr	r3, [r4, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d068      	beq.n	800975e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800968c:	4b79      	ldr	r3, [pc, #484]	@ (8009874 <HAL_RCC_OscConfig+0x298>)
 800968e:	2201      	movs	r2, #1
 8009690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009692:	f7ff fc53 	bl	8008f3c <HAL_GetTick>
 8009696:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009698:	4b75      	ldr	r3, [pc, #468]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f013 0f02 	tst.w	r3, #2
 80096a0:	d154      	bne.n	800974c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096a2:	f7ff fc4b 	bl	8008f3c <HAL_GetTick>
 80096a6:	1b40      	subs	r0, r0, r5
 80096a8:	2802      	cmp	r0, #2
 80096aa:	d9f5      	bls.n	8009698 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80096ac:	2003      	movs	r0, #3
 80096ae:	e179      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096b0:	4a6f      	ldr	r2, [pc, #444]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80096b2:	6813      	ldr	r3, [r2, #0]
 80096b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096b8:	6013      	str	r3, [r2, #0]
 80096ba:	e7b5      	b.n	8009628 <HAL_RCC_OscConfig+0x4c>
 80096bc:	4b6c      	ldr	r3, [pc, #432]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80096c4:	601a      	str	r2, [r3, #0]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80096cc:	601a      	str	r2, [r3, #0]
 80096ce:	e7ab      	b.n	8009628 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80096d0:	f7ff fc34 	bl	8008f3c <HAL_GetTick>
 80096d4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096d6:	4b66      	ldr	r3, [pc, #408]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80096de:	d0c3      	beq.n	8009668 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80096e0:	f7ff fc2c 	bl	8008f3c <HAL_GetTick>
 80096e4:	1b40      	subs	r0, r0, r5
 80096e6:	2864      	cmp	r0, #100	@ 0x64
 80096e8:	d9f5      	bls.n	80096d6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80096ea:	2003      	movs	r0, #3
 80096ec:	e15a      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80096ee:	4b60      	ldr	r3, [pc, #384]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80096f6:	d1c6      	bne.n	8009686 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80096f8:	4b5d      	ldr	r3, [pc, #372]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f013 0f02 	tst.w	r3, #2
 8009700:	d003      	beq.n	800970a <HAL_RCC_OscConfig+0x12e>
 8009702:	68e3      	ldr	r3, [r4, #12]
 8009704:	2b01      	cmp	r3, #1
 8009706:	f040 814a 	bne.w	800999e <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800970a:	4a59      	ldr	r2, [pc, #356]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 800970c:	6813      	ldr	r3, [r2, #0]
 800970e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009712:	6921      	ldr	r1, [r4, #16]
 8009714:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009718:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	f013 0f08 	tst.w	r3, #8
 8009720:	d042      	beq.n	80097a8 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009722:	6963      	ldr	r3, [r4, #20]
 8009724:	b36b      	cbz	r3, 8009782 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009726:	4b53      	ldr	r3, [pc, #332]	@ (8009874 <HAL_RCC_OscConfig+0x298>)
 8009728:	2201      	movs	r2, #1
 800972a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800972e:	f7ff fc05 	bl	8008f3c <HAL_GetTick>
 8009732:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009734:	4b4e      	ldr	r3, [pc, #312]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 8009736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009738:	f013 0f02 	tst.w	r3, #2
 800973c:	d134      	bne.n	80097a8 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800973e:	f7ff fbfd 	bl	8008f3c <HAL_GetTick>
 8009742:	1b40      	subs	r0, r0, r5
 8009744:	2802      	cmp	r0, #2
 8009746:	d9f5      	bls.n	8009734 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8009748:	2003      	movs	r0, #3
 800974a:	e12b      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800974c:	4a48      	ldr	r2, [pc, #288]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 800974e:	6813      	ldr	r3, [r2, #0]
 8009750:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009754:	6921      	ldr	r1, [r4, #16]
 8009756:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800975a:	6013      	str	r3, [r2, #0]
 800975c:	e7dd      	b.n	800971a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800975e:	4b45      	ldr	r3, [pc, #276]	@ (8009874 <HAL_RCC_OscConfig+0x298>)
 8009760:	2200      	movs	r2, #0
 8009762:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009764:	f7ff fbea 	bl	8008f3c <HAL_GetTick>
 8009768:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800976a:	4b41      	ldr	r3, [pc, #260]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f013 0f02 	tst.w	r3, #2
 8009772:	d0d2      	beq.n	800971a <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009774:	f7ff fbe2 	bl	8008f3c <HAL_GetTick>
 8009778:	1b40      	subs	r0, r0, r5
 800977a:	2802      	cmp	r0, #2
 800977c:	d9f5      	bls.n	800976a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800977e:	2003      	movs	r0, #3
 8009780:	e110      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009782:	4b3c      	ldr	r3, [pc, #240]	@ (8009874 <HAL_RCC_OscConfig+0x298>)
 8009784:	2200      	movs	r2, #0
 8009786:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800978a:	f7ff fbd7 	bl	8008f3c <HAL_GetTick>
 800978e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009790:	4b37      	ldr	r3, [pc, #220]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 8009792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009794:	f013 0f02 	tst.w	r3, #2
 8009798:	d006      	beq.n	80097a8 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800979a:	f7ff fbcf 	bl	8008f3c <HAL_GetTick>
 800979e:	1b40      	subs	r0, r0, r5
 80097a0:	2802      	cmp	r0, #2
 80097a2:	d9f5      	bls.n	8009790 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80097a4:	2003      	movs	r0, #3
 80097a6:	e0fd      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	f013 0f04 	tst.w	r3, #4
 80097ae:	d077      	beq.n	80098a0 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097b0:	4b2f      	ldr	r3, [pc, #188]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80097b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80097b8:	d133      	bne.n	8009822 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097ba:	2300      	movs	r3, #0
 80097bc:	9301      	str	r3, [sp, #4]
 80097be:	4b2c      	ldr	r3, [pc, #176]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80097c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097c2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80097c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80097c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80097d2:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097d4:	4b28      	ldr	r3, [pc, #160]	@ (8009878 <HAL_RCC_OscConfig+0x29c>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80097dc:	d023      	beq.n	8009826 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097de:	68a3      	ldr	r3, [r4, #8]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d034      	beq.n	800984e <HAL_RCC_OscConfig+0x272>
 80097e4:	2b05      	cmp	r3, #5
 80097e6:	d038      	beq.n	800985a <HAL_RCC_OscConfig+0x27e>
 80097e8:	4b21      	ldr	r3, [pc, #132]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80097ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80097ec:	f022 0201 	bic.w	r2, r2, #1
 80097f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80097f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80097f4:	f022 0204 	bic.w	r2, r2, #4
 80097f8:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80097fa:	68a3      	ldr	r3, [r4, #8]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d03d      	beq.n	800987c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009800:	f7ff fb9c 	bl	8008f3c <HAL_GetTick>
 8009804:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009806:	4b1a      	ldr	r3, [pc, #104]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 8009808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800980a:	f013 0f02 	tst.w	r3, #2
 800980e:	d146      	bne.n	800989e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009810:	f7ff fb94 	bl	8008f3c <HAL_GetTick>
 8009814:	1b80      	subs	r0, r0, r6
 8009816:	f241 3388 	movw	r3, #5000	@ 0x1388
 800981a:	4298      	cmp	r0, r3
 800981c:	d9f3      	bls.n	8009806 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800981e:	2003      	movs	r0, #3
 8009820:	e0c0      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
    FlagStatus       pwrclkchanged = RESET;
 8009822:	2500      	movs	r5, #0
 8009824:	e7d6      	b.n	80097d4 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009826:	4a14      	ldr	r2, [pc, #80]	@ (8009878 <HAL_RCC_OscConfig+0x29c>)
 8009828:	6813      	ldr	r3, [r2, #0]
 800982a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800982e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8009830:	f7ff fb84 	bl	8008f3c <HAL_GetTick>
 8009834:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009836:	4b10      	ldr	r3, [pc, #64]	@ (8009878 <HAL_RCC_OscConfig+0x29c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800983e:	d1ce      	bne.n	80097de <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009840:	f7ff fb7c 	bl	8008f3c <HAL_GetTick>
 8009844:	1b80      	subs	r0, r0, r6
 8009846:	2802      	cmp	r0, #2
 8009848:	d9f5      	bls.n	8009836 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800984a:	2003      	movs	r0, #3
 800984c:	e0aa      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800984e:	4a08      	ldr	r2, [pc, #32]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 8009850:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8009852:	f043 0301 	orr.w	r3, r3, #1
 8009856:	6713      	str	r3, [r2, #112]	@ 0x70
 8009858:	e7cf      	b.n	80097fa <HAL_RCC_OscConfig+0x21e>
 800985a:	4b05      	ldr	r3, [pc, #20]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 800985c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800985e:	f042 0204 	orr.w	r2, r2, #4
 8009862:	671a      	str	r2, [r3, #112]	@ 0x70
 8009864:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009866:	f042 0201 	orr.w	r2, r2, #1
 800986a:	671a      	str	r2, [r3, #112]	@ 0x70
 800986c:	e7c5      	b.n	80097fa <HAL_RCC_OscConfig+0x21e>
 800986e:	bf00      	nop
 8009870:	40023800 	.word	0x40023800
 8009874:	42470000 	.word	0x42470000
 8009878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800987c:	f7ff fb5e 	bl	8008f3c <HAL_GetTick>
 8009880:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009882:	4b4f      	ldr	r3, [pc, #316]	@ (80099c0 <HAL_RCC_OscConfig+0x3e4>)
 8009884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009886:	f013 0f02 	tst.w	r3, #2
 800988a:	d008      	beq.n	800989e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800988c:	f7ff fb56 	bl	8008f3c <HAL_GetTick>
 8009890:	1b80      	subs	r0, r0, r6
 8009892:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009896:	4298      	cmp	r0, r3
 8009898:	d9f3      	bls.n	8009882 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800989a:	2003      	movs	r0, #3
 800989c:	e082      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800989e:	b9e5      	cbnz	r5, 80098da <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80098a0:	69a3      	ldr	r3, [r4, #24]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d07d      	beq.n	80099a2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80098a6:	4a46      	ldr	r2, [pc, #280]	@ (80099c0 <HAL_RCC_OscConfig+0x3e4>)
 80098a8:	6892      	ldr	r2, [r2, #8]
 80098aa:	f002 020c 	and.w	r2, r2, #12
 80098ae:	2a08      	cmp	r2, #8
 80098b0:	d051      	beq.n	8009956 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	d017      	beq.n	80098e6 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098b6:	4b43      	ldr	r3, [pc, #268]	@ (80099c4 <HAL_RCC_OscConfig+0x3e8>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098bc:	f7ff fb3e 	bl	8008f3c <HAL_GetTick>
 80098c0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098c2:	4b3f      	ldr	r3, [pc, #252]	@ (80099c0 <HAL_RCC_OscConfig+0x3e4>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80098ca:	d042      	beq.n	8009952 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098cc:	f7ff fb36 	bl	8008f3c <HAL_GetTick>
 80098d0:	1b00      	subs	r0, r0, r4
 80098d2:	2802      	cmp	r0, #2
 80098d4:	d9f5      	bls.n	80098c2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80098d6:	2003      	movs	r0, #3
 80098d8:	e064      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 80098da:	4a39      	ldr	r2, [pc, #228]	@ (80099c0 <HAL_RCC_OscConfig+0x3e4>)
 80098dc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80098de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80098e4:	e7dc      	b.n	80098a0 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80098e6:	4b37      	ldr	r3, [pc, #220]	@ (80099c4 <HAL_RCC_OscConfig+0x3e8>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80098ec:	f7ff fb26 	bl	8008f3c <HAL_GetTick>
 80098f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098f2:	4b33      	ldr	r3, [pc, #204]	@ (80099c0 <HAL_RCC_OscConfig+0x3e4>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80098fa:	d006      	beq.n	800990a <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098fc:	f7ff fb1e 	bl	8008f3c <HAL_GetTick>
 8009900:	1b40      	subs	r0, r0, r5
 8009902:	2802      	cmp	r0, #2
 8009904:	d9f5      	bls.n	80098f2 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8009906:	2003      	movs	r0, #3
 8009908:	e04c      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800990a:	69e3      	ldr	r3, [r4, #28]
 800990c:	6a22      	ldr	r2, [r4, #32]
 800990e:	4313      	orrs	r3, r2
 8009910:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009912:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8009916:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009918:	0852      	lsrs	r2, r2, #1
 800991a:	3a01      	subs	r2, #1
 800991c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009920:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009922:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009926:	4a26      	ldr	r2, [pc, #152]	@ (80099c0 <HAL_RCC_OscConfig+0x3e4>)
 8009928:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800992a:	4b26      	ldr	r3, [pc, #152]	@ (80099c4 <HAL_RCC_OscConfig+0x3e8>)
 800992c:	2201      	movs	r2, #1
 800992e:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8009930:	f7ff fb04 	bl	8008f3c <HAL_GetTick>
 8009934:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009936:	4b22      	ldr	r3, [pc, #136]	@ (80099c0 <HAL_RCC_OscConfig+0x3e4>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800993e:	d106      	bne.n	800994e <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009940:	f7ff fafc 	bl	8008f3c <HAL_GetTick>
 8009944:	1b00      	subs	r0, r0, r4
 8009946:	2802      	cmp	r0, #2
 8009948:	d9f5      	bls.n	8009936 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800994a:	2003      	movs	r0, #3
 800994c:	e02a      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800994e:	2000      	movs	r0, #0
 8009950:	e028      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
 8009952:	2000      	movs	r0, #0
 8009954:	e026      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009956:	2b01      	cmp	r3, #1
 8009958:	d026      	beq.n	80099a8 <HAL_RCC_OscConfig+0x3cc>
        pll_config = RCC->PLLCFGR;
 800995a:	4b19      	ldr	r3, [pc, #100]	@ (80099c0 <HAL_RCC_OscConfig+0x3e4>)
 800995c:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800995e:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8009962:	69e2      	ldr	r2, [r4, #28]
 8009964:	4291      	cmp	r1, r2
 8009966:	d121      	bne.n	80099ac <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009968:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800996c:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800996e:	428a      	cmp	r2, r1
 8009970:	d11e      	bne.n	80099b0 <HAL_RCC_OscConfig+0x3d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009972:	6a61      	ldr	r1, [r4, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009974:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8009978:	401a      	ands	r2, r3
 800997a:	428a      	cmp	r2, r1
 800997c:	d11a      	bne.n	80099b4 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800997e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009982:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009984:	428a      	cmp	r2, r1
 8009986:	d117      	bne.n	80099b8 <HAL_RCC_OscConfig+0x3dc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009988:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800998c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800998e:	4293      	cmp	r3, r2
 8009990:	d114      	bne.n	80099bc <HAL_RCC_OscConfig+0x3e0>
  return HAL_OK;
 8009992:	2000      	movs	r0, #0
 8009994:	e006      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 8009996:	2001      	movs	r0, #1
}
 8009998:	4770      	bx	lr
        return HAL_ERROR;
 800999a:	2001      	movs	r0, #1
 800999c:	e002      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
        return HAL_ERROR;
 800999e:	2001      	movs	r0, #1
 80099a0:	e000      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 80099a2:	2000      	movs	r0, #0
}
 80099a4:	b002      	add	sp, #8
 80099a6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80099a8:	2001      	movs	r0, #1
 80099aa:	e7fb      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
          return HAL_ERROR;
 80099ac:	2001      	movs	r0, #1
 80099ae:	e7f9      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
 80099b0:	2001      	movs	r0, #1
 80099b2:	e7f7      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
 80099b4:	2001      	movs	r0, #1
 80099b6:	e7f5      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
 80099b8:	2001      	movs	r0, #1
 80099ba:	e7f3      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
 80099bc:	2001      	movs	r0, #1
 80099be:	e7f1      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
 80099c0:	40023800 	.word	0x40023800
 80099c4:	42470000 	.word	0x42470000

080099c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099c8:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099ca:	4b33      	ldr	r3, [pc, #204]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0xd0>)
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f003 030c 	and.w	r3, r3, #12
 80099d2:	2b04      	cmp	r3, #4
 80099d4:	d05b      	beq.n	8009a8e <HAL_RCC_GetSysClockFreq+0xc6>
 80099d6:	2b08      	cmp	r3, #8
 80099d8:	d15b      	bne.n	8009a92 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80099da:	4b2f      	ldr	r3, [pc, #188]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0xd0>)
 80099dc:	685a      	ldr	r2, [r3, #4]
 80099de:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80099e8:	d02c      	beq.n	8009a44 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80099ea:	4b2b      	ldr	r3, [pc, #172]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0xd0>)
 80099ec:	6858      	ldr	r0, [r3, #4]
 80099ee:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80099f2:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80099f6:	ebbc 0c00 	subs.w	ip, ip, r0
 80099fa:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80099fe:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8009a02:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8009a06:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8009a0a:	ebb1 010c 	subs.w	r1, r1, ip
 8009a0e:	eb63 030e 	sbc.w	r3, r3, lr
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a18:	00c9      	lsls	r1, r1, #3
 8009a1a:	eb11 0c00 	adds.w	ip, r1, r0
 8009a1e:	f143 0300 	adc.w	r3, r3, #0
 8009a22:	0259      	lsls	r1, r3, #9
 8009a24:	2300      	movs	r3, #0
 8009a26:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8009a2a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8009a2e:	f7ff f873 	bl	8008b18 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009a32:	4b19      	ldr	r3, [pc, #100]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8009a3e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8009a42:	e027      	b.n	8009a94 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a44:	4b14      	ldr	r3, [pc, #80]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009a46:	6858      	ldr	r0, [r3, #4]
 8009a48:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8009a4c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8009a50:	ebbc 0c00 	subs.w	ip, ip, r0
 8009a54:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8009a58:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8009a5c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8009a60:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8009a64:	ebb1 010c 	subs.w	r1, r1, ip
 8009a68:	eb63 030e 	sbc.w	r3, r3, lr
 8009a6c:	00db      	lsls	r3, r3, #3
 8009a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a72:	00c9      	lsls	r1, r1, #3
 8009a74:	eb11 0c00 	adds.w	ip, r1, r0
 8009a78:	f143 0300 	adc.w	r3, r3, #0
 8009a7c:	0299      	lsls	r1, r3, #10
 8009a7e:	2300      	movs	r3, #0
 8009a80:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8009a84:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8009a88:	f7ff f846 	bl	8008b18 <__aeabi_uldivmod>
 8009a8c:	e7d1      	b.n	8009a32 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8009a8e:	4803      	ldr	r0, [pc, #12]	@ (8009a9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8009a90:	e000      	b.n	8009a94 <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a92:	4803      	ldr	r0, [pc, #12]	@ (8009aa0 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8009a94:	bd08      	pop	{r3, pc}
 8009a96:	bf00      	nop
 8009a98:	40023800 	.word	0x40023800
 8009a9c:	007a1200 	.word	0x007a1200
 8009aa0:	00f42400 	.word	0x00f42400

08009aa4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	f000 809b 	beq.w	8009be0 <HAL_RCC_ClockConfig+0x13c>
{
 8009aaa:	b570      	push	{r4, r5, r6, lr}
 8009aac:	460d      	mov	r5, r1
 8009aae:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009ab0:	4b4f      	ldr	r3, [pc, #316]	@ (8009bf0 <HAL_RCC_ClockConfig+0x14c>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 030f 	and.w	r3, r3, #15
 8009ab8:	428b      	cmp	r3, r1
 8009aba:	d208      	bcs.n	8009ace <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009abc:	b2cb      	uxtb	r3, r1
 8009abe:	4a4c      	ldr	r2, [pc, #304]	@ (8009bf0 <HAL_RCC_ClockConfig+0x14c>)
 8009ac0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ac2:	6813      	ldr	r3, [r2, #0]
 8009ac4:	f003 030f 	and.w	r3, r3, #15
 8009ac8:	428b      	cmp	r3, r1
 8009aca:	f040 808b 	bne.w	8009be4 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ace:	6823      	ldr	r3, [r4, #0]
 8009ad0:	f013 0f02 	tst.w	r3, #2
 8009ad4:	d017      	beq.n	8009b06 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ad6:	f013 0f04 	tst.w	r3, #4
 8009ada:	d004      	beq.n	8009ae6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009adc:	4a45      	ldr	r2, [pc, #276]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009ade:	6893      	ldr	r3, [r2, #8]
 8009ae0:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009ae4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	f013 0f08 	tst.w	r3, #8
 8009aec:	d004      	beq.n	8009af8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009aee:	4a41      	ldr	r2, [pc, #260]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009af0:	6893      	ldr	r3, [r2, #8]
 8009af2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009af6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009af8:	4a3e      	ldr	r2, [pc, #248]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009afa:	6893      	ldr	r3, [r2, #8]
 8009afc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b00:	68a1      	ldr	r1, [r4, #8]
 8009b02:	430b      	orrs	r3, r1
 8009b04:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	f013 0f01 	tst.w	r3, #1
 8009b0c:	d032      	beq.n	8009b74 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b0e:	6863      	ldr	r3, [r4, #4]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d021      	beq.n	8009b58 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b14:	1e9a      	subs	r2, r3, #2
 8009b16:	2a01      	cmp	r2, #1
 8009b18:	d925      	bls.n	8009b66 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b1a:	4a36      	ldr	r2, [pc, #216]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009b1c:	6812      	ldr	r2, [r2, #0]
 8009b1e:	f012 0f02 	tst.w	r2, #2
 8009b22:	d061      	beq.n	8009be8 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009b24:	4933      	ldr	r1, [pc, #204]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009b26:	688a      	ldr	r2, [r1, #8]
 8009b28:	f022 0203 	bic.w	r2, r2, #3
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8009b30:	f7ff fa04 	bl	8008f3c <HAL_GetTick>
 8009b34:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b36:	4b2f      	ldr	r3, [pc, #188]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	f003 030c 	and.w	r3, r3, #12
 8009b3e:	6862      	ldr	r2, [r4, #4]
 8009b40:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009b44:	d016      	beq.n	8009b74 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b46:	f7ff f9f9 	bl	8008f3c <HAL_GetTick>
 8009b4a:	1b80      	subs	r0, r0, r6
 8009b4c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009b50:	4298      	cmp	r0, r3
 8009b52:	d9f0      	bls.n	8009b36 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8009b54:	2003      	movs	r0, #3
 8009b56:	e042      	b.n	8009bde <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b58:	4a26      	ldr	r2, [pc, #152]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009b5a:	6812      	ldr	r2, [r2, #0]
 8009b5c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8009b60:	d1e0      	bne.n	8009b24 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8009b62:	2001      	movs	r0, #1
 8009b64:	e03b      	b.n	8009bde <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b66:	4a23      	ldr	r2, [pc, #140]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009b68:	6812      	ldr	r2, [r2, #0]
 8009b6a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8009b6e:	d1d9      	bne.n	8009b24 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8009b70:	2001      	movs	r0, #1
 8009b72:	e034      	b.n	8009bde <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009b74:	4b1e      	ldr	r3, [pc, #120]	@ (8009bf0 <HAL_RCC_ClockConfig+0x14c>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 030f 	and.w	r3, r3, #15
 8009b7c:	42ab      	cmp	r3, r5
 8009b7e:	d907      	bls.n	8009b90 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b80:	b2ea      	uxtb	r2, r5
 8009b82:	4b1b      	ldr	r3, [pc, #108]	@ (8009bf0 <HAL_RCC_ClockConfig+0x14c>)
 8009b84:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 030f 	and.w	r3, r3, #15
 8009b8c:	42ab      	cmp	r3, r5
 8009b8e:	d12d      	bne.n	8009bec <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	f013 0f04 	tst.w	r3, #4
 8009b96:	d006      	beq.n	8009ba6 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b98:	4a16      	ldr	r2, [pc, #88]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009b9a:	6893      	ldr	r3, [r2, #8]
 8009b9c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8009ba0:	68e1      	ldr	r1, [r4, #12]
 8009ba2:	430b      	orrs	r3, r1
 8009ba4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	f013 0f08 	tst.w	r3, #8
 8009bac:	d007      	beq.n	8009bbe <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009bae:	4a11      	ldr	r2, [pc, #68]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009bb0:	6893      	ldr	r3, [r2, #8]
 8009bb2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8009bb6:	6921      	ldr	r1, [r4, #16]
 8009bb8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009bbc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009bbe:	f7ff ff03 	bl	80099c8 <HAL_RCC_GetSysClockFreq>
 8009bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009bca:	4a0b      	ldr	r2, [pc, #44]	@ (8009bf8 <HAL_RCC_ClockConfig+0x154>)
 8009bcc:	5cd3      	ldrb	r3, [r2, r3]
 8009bce:	40d8      	lsrs	r0, r3
 8009bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8009bfc <HAL_RCC_ClockConfig+0x158>)
 8009bd2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8009bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8009c00 <HAL_RCC_ClockConfig+0x15c>)
 8009bd6:	6818      	ldr	r0, [r3, #0]
 8009bd8:	f7ff f964 	bl	8008ea4 <HAL_InitTick>
  return HAL_OK;
 8009bdc:	2000      	movs	r0, #0
}
 8009bde:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8009be0:	2001      	movs	r0, #1
}
 8009be2:	4770      	bx	lr
      return HAL_ERROR;
 8009be4:	2001      	movs	r0, #1
 8009be6:	e7fa      	b.n	8009bde <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8009be8:	2001      	movs	r0, #1
 8009bea:	e7f8      	b.n	8009bde <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8009bec:	2001      	movs	r0, #1
 8009bee:	e7f6      	b.n	8009bde <HAL_RCC_ClockConfig+0x13a>
 8009bf0:	40023c00 	.word	0x40023c00
 8009bf4:	40023800 	.word	0x40023800
 8009bf8:	080289e4 	.word	0x080289e4
 8009bfc:	2000018c 	.word	0x2000018c
 8009c00:	20000004 	.word	0x20000004

08009c04 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8009c04:	4b01      	ldr	r3, [pc, #4]	@ (8009c0c <HAL_RCC_GetHCLKFreq+0x8>)
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	2000018c 	.word	0x2000018c

08009c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c10:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009c12:	f7ff fff7 	bl	8009c04 <HAL_RCC_GetHCLKFreq>
 8009c16:	4b04      	ldr	r3, [pc, #16]	@ (8009c28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8009c1e:	4a03      	ldr	r2, [pc, #12]	@ (8009c2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009c20:	5cd3      	ldrb	r3, [r2, r3]
}
 8009c22:	40d8      	lsrs	r0, r3
 8009c24:	bd08      	pop	{r3, pc}
 8009c26:	bf00      	nop
 8009c28:	40023800 	.word	0x40023800
 8009c2c:	080289dc 	.word	0x080289dc

08009c30 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009c30:	230f      	movs	r3, #15
 8009c32:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009c34:	4b0b      	ldr	r3, [pc, #44]	@ (8009c64 <HAL_RCC_GetClockConfig+0x34>)
 8009c36:	689a      	ldr	r2, [r3, #8]
 8009c38:	f002 0203 	and.w	r2, r2, #3
 8009c3c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009c3e:	689a      	ldr	r2, [r3, #8]
 8009c40:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8009c44:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009c46:	689a      	ldr	r2, [r3, #8]
 8009c48:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8009c4c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	08db      	lsrs	r3, r3, #3
 8009c52:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8009c56:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009c58:	4b03      	ldr	r3, [pc, #12]	@ (8009c68 <HAL_RCC_GetClockConfig+0x38>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 030f 	and.w	r3, r3, #15
 8009c60:	600b      	str	r3, [r1, #0]
}
 8009c62:	4770      	bx	lr
 8009c64:	40023800 	.word	0x40023800
 8009c68:	40023c00 	.word	0x40023c00

08009c6c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8009c6c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009c6e:	f7ff f965 	bl	8008f3c <HAL_GetTick>
 8009c72:	4604      	mov	r4, r0

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009c74:	4a46      	ldr	r2, [pc, #280]	@ (8009d90 <HAL_RCC_DeInit+0x124>)
 8009c76:	6813      	ldr	r3, [r2, #0]
 8009c78:	f043 0301 	orr.w	r3, r3, #1
 8009c7c:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8009c7e:	4b44      	ldr	r3, [pc, #272]	@ (8009d90 <HAL_RCC_DeInit+0x124>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f013 0f02 	tst.w	r3, #2
 8009c86:	d106      	bne.n	8009c96 <HAL_RCC_DeInit+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c88:	f7ff f958 	bl	8008f3c <HAL_GetTick>
 8009c8c:	1b00      	subs	r0, r0, r4
 8009c8e:	2802      	cmp	r0, #2
 8009c90:	d9f5      	bls.n	8009c7e <HAL_RCC_DeInit+0x12>
    {
      return HAL_TIMEOUT;
 8009c92:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_OK;
  }
}
 8009c94:	bd38      	pop	{r3, r4, r5, pc}
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8009c96:	4d3e      	ldr	r5, [pc, #248]	@ (8009d90 <HAL_RCC_DeInit+0x124>)
 8009c98:	682b      	ldr	r3, [r5, #0]
 8009c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c9e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8009ca0:	f7ff f94c 	bl	8008f3c <HAL_GetTick>
 8009ca4:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60ab      	str	r3, [r5, #8]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8009caa:	4b39      	ldr	r3, [pc, #228]	@ (8009d90 <HAL_RCC_DeInit+0x124>)
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	f013 0f0c 	tst.w	r3, #12
 8009cb2:	d008      	beq.n	8009cc6 <HAL_RCC_DeInit+0x5a>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cb4:	f7ff f942 	bl	8008f3c <HAL_GetTick>
 8009cb8:	1b00      	subs	r0, r0, r4
 8009cba:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009cbe:	4298      	cmp	r0, r3
 8009cc0:	d9f3      	bls.n	8009caa <HAL_RCC_DeInit+0x3e>
      return HAL_TIMEOUT;
 8009cc2:	2003      	movs	r0, #3
 8009cc4:	e7e6      	b.n	8009c94 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8009cc6:	f7ff f939 	bl	8008f3c <HAL_GetTick>
 8009cca:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8009ccc:	4a30      	ldr	r2, [pc, #192]	@ (8009d90 <HAL_RCC_DeInit+0x124>)
 8009cce:	6813      	ldr	r3, [r2, #0]
 8009cd0:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8009cd4:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8009cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8009d90 <HAL_RCC_DeInit+0x124>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009cde:	d006      	beq.n	8009cee <HAL_RCC_DeInit+0x82>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ce0:	f7ff f92c 	bl	8008f3c <HAL_GetTick>
 8009ce4:	1b00      	subs	r0, r0, r4
 8009ce6:	2864      	cmp	r0, #100	@ 0x64
 8009ce8:	d9f5      	bls.n	8009cd6 <HAL_RCC_DeInit+0x6a>
      return HAL_TIMEOUT;
 8009cea:	2003      	movs	r0, #3
 8009cec:	e7d2      	b.n	8009c94 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8009cee:	f7ff f925 	bl	8008f3c <HAL_GetTick>
 8009cf2:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8009cf4:	4a26      	ldr	r2, [pc, #152]	@ (8009d90 <HAL_RCC_DeInit+0x124>)
 8009cf6:	6813      	ldr	r3, [r2, #0]
 8009cf8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009cfc:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8009cfe:	4b24      	ldr	r3, [pc, #144]	@ (8009d90 <HAL_RCC_DeInit+0x124>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8009d06:	d006      	beq.n	8009d16 <HAL_RCC_DeInit+0xaa>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d08:	f7ff f918 	bl	8008f3c <HAL_GetTick>
 8009d0c:	1b00      	subs	r0, r0, r4
 8009d0e:	2802      	cmp	r0, #2
 8009d10:	d9f5      	bls.n	8009cfe <HAL_RCC_DeInit+0x92>
      return HAL_TIMEOUT;
 8009d12:	2003      	movs	r0, #3
 8009d14:	e7be      	b.n	8009c94 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8009d16:	f7ff f911 	bl	8008f3c <HAL_GetTick>
 8009d1a:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8009d1c:	4a1c      	ldr	r2, [pc, #112]	@ (8009d90 <HAL_RCC_DeInit+0x124>)
 8009d1e:	6813      	ldr	r3, [r2, #0]
 8009d20:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d24:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8009d26:	4b1a      	ldr	r3, [pc, #104]	@ (8009d90 <HAL_RCC_DeInit+0x124>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8009d2e:	d006      	beq.n	8009d3e <HAL_RCC_DeInit+0xd2>
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009d30:	f7ff f904 	bl	8008f3c <HAL_GetTick>
 8009d34:	1b00      	subs	r0, r0, r4
 8009d36:	2802      	cmp	r0, #2
 8009d38:	d9f5      	bls.n	8009d26 <HAL_RCC_DeInit+0xba>
      return HAL_TIMEOUT;
 8009d3a:	2003      	movs	r0, #3
 8009d3c:	e7aa      	b.n	8009c94 <HAL_RCC_DeInit+0x28>
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8009d3e:	4b14      	ldr	r3, [pc, #80]	@ (8009d90 <HAL_RCC_DeInit+0x124>)
 8009d40:	4a14      	ldr	r2, [pc, #80]	@ (8009d94 <HAL_RCC_DeInit+0x128>)
 8009d42:	605a      	str	r2, [r3, #4]
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8009d44:	4a14      	ldr	r2, [pc, #80]	@ (8009d98 <HAL_RCC_DeInit+0x12c>)
 8009d46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8009d4a:	68da      	ldr	r2, [r3, #12]
 8009d4c:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8009d50:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8009d52:	68da      	ldr	r2, [r3, #12]
 8009d54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009d58:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8009d5a:	68da      	ldr	r2, [r3, #12]
 8009d5c:	f442 021f 	orr.w	r2, r2, #10420224	@ 0x9f0000
 8009d60:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8009d62:	68da      	ldr	r2, [r3, #12]
 8009d64:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8009d68:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8009d6a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009d6c:	f022 0201 	bic.w	r2, r2, #1
 8009d70:	675a      	str	r2, [r3, #116]	@ 0x74
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8009d72:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009d74:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8009d78:	675a      	str	r2, [r3, #116]	@ 0x74
  SystemCoreClock = HSI_VALUE;
 8009d7a:	4b08      	ldr	r3, [pc, #32]	@ (8009d9c <HAL_RCC_DeInit+0x130>)
 8009d7c:	4a08      	ldr	r2, [pc, #32]	@ (8009da0 <HAL_RCC_DeInit+0x134>)
 8009d7e:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8009d80:	4b08      	ldr	r3, [pc, #32]	@ (8009da4 <HAL_RCC_DeInit+0x138>)
 8009d82:	6818      	ldr	r0, [r3, #0]
 8009d84:	f7ff f88e 	bl	8008ea4 <HAL_InitTick>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d083      	beq.n	8009c94 <HAL_RCC_DeInit+0x28>
    return HAL_ERROR;
 8009d8c:	2001      	movs	r0, #1
 8009d8e:	e781      	b.n	8009c94 <HAL_RCC_DeInit+0x28>
 8009d90:	40023800 	.word	0x40023800
 8009d94:	04003010 	.word	0x04003010
 8009d98:	20003000 	.word	0x20003000
 8009d9c:	2000018c 	.word	0x2000018c
 8009da0:	00f42400 	.word	0x00f42400
 8009da4:	20000004 	.word	0x20000004

08009da8 <__enable_irq>:
  __ASM volatile ("cpsie i" : : : "memory");
 8009da8:	b662      	cpsie	i
}
 8009daa:	4770      	bx	lr

08009dac <__disable_irq>:
  __ASM volatile ("cpsid i" : : : "memory");
 8009dac:	b672      	cpsid	i
}
 8009dae:	4770      	bx	lr

08009db0 <motor_iterator>:

static void motor_iterator (motor_iterator_callback_ptr callback)
{
    motor_map_t motor;

    if(callback) for(motor.id = 0; motor.id < N_AXIS + N_GANGED; motor.id++)
 8009db0:	b180      	cbz	r0, 8009dd4 <motor_iterator+0x24>
{
 8009db2:	b570      	push	{r4, r5, r6, lr}
 8009db4:	4606      	mov	r6, r0
    if(callback) for(motor.id = 0; motor.id < N_AXIS + N_GANGED; motor.id++)
 8009db6:	2500      	movs	r5, #0
 8009db8:	f36f 0507 	bfc	r5, #0, #8
 8009dbc:	e006      	b.n	8009dcc <motor_iterator+0x1c>
    {
        if(motor.id < N_AXIS)
            motor.axis = motor.id;
 8009dbe:	f364 250f 	bfi	r5, r4, #8, #8
            case Z2_MOTOR:
                motor.axis = Z_AXIS;
                break;
#endif
        }
        callback(motor);
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	47b0      	blx	r6
    if(callback) for(motor.id = 0; motor.id < N_AXIS + N_GANGED; motor.id++)
 8009dc6:	3401      	adds	r4, #1
 8009dc8:	f364 0507 	bfi	r5, r4, #0, #8
 8009dcc:	b2ec      	uxtb	r4, r5
 8009dce:	2c02      	cmp	r4, #2
 8009dd0:	d9f5      	bls.n	8009dbe <motor_iterator+0xe>
    }
}
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}
 8009dd4:	4770      	bx	lr
	...

08009dd8 <aux_ctrl_remap_explicit>:
    { .function = Input_ProbeDisconnect, .aux_port = 0xFF, .irq_mode = (pin_irq_mode_t)(IRQ_Mode_Rising|IRQ_Mode_Falling), .cap = { .probe_disconnected = On }, .pin = 0xFF, .port = NULL },
#endif
};

static inline aux_ctrl_t *aux_ctrl_remap_explicit (void *port, uint8_t pin, uint8_t aux_port, void *input)
{
 8009dd8:	b530      	push	{r4, r5, lr}
 8009dda:	4686      	mov	lr, r0
    aux_ctrl_t *ctrl_pin = NULL;

    uint_fast8_t idx = sizeof(aux_ctrl) / sizeof(aux_ctrl_t);
 8009ddc:	2400      	movs	r4, #0
    aux_ctrl_t *ctrl_pin = NULL;
 8009dde:	4620      	mov	r0, r4
 8009de0:	e001      	b.n	8009de6 <aux_ctrl_remap_explicit+0xe>
        if(aux_ctrl[idx].port == port && aux_ctrl[idx].pin == pin) {
            ctrl_pin = &aux_ctrl[idx];
            ctrl_pin->aux_port = aux_port;
            ctrl_pin->input = input;
        }
    } while(idx && ctrl_pin == NULL);
 8009de2:	b194      	cbz	r4, 8009e0a <aux_ctrl_remap_explicit+0x32>
 8009de4:	b988      	cbnz	r0, 8009e0a <aux_ctrl_remap_explicit+0x32>
        idx--;
 8009de6:	3c01      	subs	r4, #1
        if(aux_ctrl[idx].port == port && aux_ctrl[idx].pin == pin) {
 8009de8:	4d08      	ldr	r5, [pc, #32]	@ (8009e0c <aux_ctrl_remap_explicit+0x34>)
 8009dea:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 8009dee:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8009df2:	4575      	cmp	r5, lr
 8009df4:	d1f5      	bne.n	8009de2 <aux_ctrl_remap_explicit+0xa>
 8009df6:	f89c 5006 	ldrb.w	r5, [ip, #6]
 8009dfa:	428d      	cmp	r5, r1
 8009dfc:	d1f1      	bne.n	8009de2 <aux_ctrl_remap_explicit+0xa>
            ctrl_pin = &aux_ctrl[idx];
 8009dfe:	4660      	mov	r0, ip
            ctrl_pin->aux_port = aux_port;
 8009e00:	f88c 2001 	strb.w	r2, [ip, #1]
            ctrl_pin->input = input;
 8009e04:	f8cc 300c 	str.w	r3, [ip, #12]
 8009e08:	e7eb      	b.n	8009de2 <aux_ctrl_remap_explicit+0xa>

    return ctrl_pin;
}
 8009e0a:	bd30      	pop	{r4, r5, pc}
 8009e0c:	20000754 	.word	0x20000754

08009e10 <stepperEnable>:
   #ifdef C_ENABLE_PORT
    DIGITAL_OUT(C_ENABLE_PORT, C_ENABLE_PIN, enable.c);
   #endif
  #endif
#endif
}
 8009e10:	4770      	bx	lr
	...

08009e14 <stepperWakeUp>:

// Starts stepper driver ISR timer and forces a stepper driver interrupt callback
static void stepperWakeUp (void)
{
 8009e14:	b510      	push	{r4, lr}
    hal.stepper.enable((axes_signals_t){AXES_BITMASK});
 8009e16:	4c0b      	ldr	r4, [pc, #44]	@ (8009e44 <stepperWakeUp+0x30>)
 8009e18:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8009e1c:	f04f 0007 	mov.w	r0, #7
 8009e20:	4798      	blx	r3

    STEPPER_TIMER->ARR = hal.f_step_timer / 500; // ~2ms delay to allow drivers time to wake up.
 8009e22:	69e2      	ldr	r2, [r4, #28]
 8009e24:	4b08      	ldr	r3, [pc, #32]	@ (8009e48 <stepperWakeUp+0x34>)
 8009e26:	fba3 3202 	umull	r3, r2, r3, r2
 8009e2a:	0952      	lsrs	r2, r2, #5
 8009e2c:	4b07      	ldr	r3, [pc, #28]	@ (8009e4c <stepperWakeUp+0x38>)
 8009e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    STEPPER_TIMER->EGR = TIM_EGR_UG;
 8009e30:	2201      	movs	r2, #1
 8009e32:	615a      	str	r2, [r3, #20]
    STEPPER_TIMER->SR = ~TIM_SR_UIF;
 8009e34:	f06f 0201 	mvn.w	r2, #1
 8009e38:	611a      	str	r2, [r3, #16]
    STEPPER_TIMER->CR1 |= TIM_CR1_CEN;
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	f042 0201 	orr.w	r2, r2, #1
 8009e40:	601a      	str	r2, [r3, #0]
}
 8009e42:	bd10      	pop	{r4, pc}
 8009e44:	200011ac 	.word	0x200011ac
 8009e48:	10624dd3 	.word	0x10624dd3
 8009e4c:	40000c00 	.word	0x40000c00

08009e50 <stepperGoIdle>:

// Disables stepper driver interrupts
static void stepperGoIdle (bool clear_signals)
{
    STEPPER_TIMER->CR1 &= ~TIM_CR1_CEN;
 8009e50:	4b03      	ldr	r3, [pc, #12]	@ (8009e60 <stepperGoIdle+0x10>)
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	f022 0201 	bic.w	r2, r2, #1
 8009e58:	601a      	str	r2, [r3, #0]
    STEPPER_TIMER->CNT = 0;
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8009e5e:	4770      	bx	lr
 8009e60:	40000c00 	.word	0x40000c00

08009e64 <stepperCyclesPerTick>:

// Sets up stepper driver interrupt timeout, "Normal" version
static void stepperCyclesPerTick (uint32_t cycles_per_tick)
{
    STEPPER_TIMER->ARR = cycles_per_tick < (1UL << 20) ? cycles_per_tick : 0x000FFFFFUL;
 8009e64:	4b03      	ldr	r3, [pc, #12]	@ (8009e74 <stepperCyclesPerTick+0x10>)
 8009e66:	4298      	cmp	r0, r3
 8009e68:	bf28      	it	cs
 8009e6a:	4618      	movcs	r0, r3
 8009e6c:	4b02      	ldr	r3, [pc, #8]	@ (8009e78 <stepperCyclesPerTick+0x14>)
 8009e6e:	62d8      	str	r0, [r3, #44]	@ 0x2c
}
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	000fffff 	.word	0x000fffff
 8009e78:	40000c00 	.word	0x40000c00

08009e7c <stepperPulseStart>:
        hal.stepper.pulse_start(stepper);
        return;
    }
#endif

    if(stepper->dir_change)
 8009e7c:	7b43      	ldrb	r3, [r0, #13]
 8009e7e:	b1ab      	cbz	r3, 8009eac <stepperPulseStart+0x30>
    dir_outbits.mask ^= settings.steppers.dir_invert.mask;
 8009e80:	7bc3      	ldrb	r3, [r0, #15]
 8009e82:	4a19      	ldr	r2, [pc, #100]	@ (8009ee8 <stepperPulseStart+0x6c>)
 8009e84:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
 8009e88:	4053      	eors	r3, r2
    DIGITAL_OUT(X_DIRECTION_PORT, X_DIRECTION_PIN, dir_outbits.x);
 8009e8a:	f3c3 0100 	ubfx	r1, r3, #0, #1
 8009e8e:	4a17      	ldr	r2, [pc, #92]	@ (8009eec <stepperPulseStart+0x70>)
 8009e90:	f882 10b0 	strb.w	r1, [r2, #176]	@ 0xb0
    DIGITAL_OUT(Y_DIRECTION_PORT, Y_DIRECTION_PIN, dir_outbits.y);
 8009e94:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8009e98:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 8009e9c:	f882 10bc 	strb.w	r1, [r2, #188]	@ 0xbc
    DIGITAL_OUT(Z_DIRECTION_PORT, Z_DIRECTION_PIN, dir_outbits.z);
 8009ea0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009ea4:	f502 32c0 	add.w	r2, r2, #98304	@ 0x18000
 8009ea8:	f882 308c 	strb.w	r3, [r2, #140]	@ 0x8c
        stepperSetDirOutputs(stepper->dir_outbits);

    if(stepper->step_outbits.value) {
 8009eac:	7b83      	ldrb	r3, [r0, #14]
 8009eae:	b1cb      	cbz	r3, 8009ee4 <stepperPulseStart+0x68>
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 8009eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8009ee8 <stepperPulseStart+0x6c>)
 8009eb2:	f892 20e8 	ldrb.w	r2, [r2, #232]	@ 0xe8
 8009eb6:	4053      	eors	r3, r2
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 8009eb8:	f3c3 0100 	ubfx	r1, r3, #0, #1
 8009ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8009eec <stepperPulseStart+0x70>)
 8009ebe:	f882 10b4 	strb.w	r1, [r2, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 8009ec2:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8009ec6:	f882 10ac 	strb.w	r1, [r2, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 8009eca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009ece:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8009ed2:	f882 3088 	strb.w	r3, [r2, #136]	@ 0x88
        stepperSetStepOutputs(stepper->step_outbits);
        PULSE_TIMER->EGR = TIM_EGR_UG;
 8009ed6:	4b06      	ldr	r3, [pc, #24]	@ (8009ef0 <stepperPulseStart+0x74>)
 8009ed8:	2201      	movs	r2, #1
 8009eda:	615a      	str	r2, [r3, #20]
        PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	f042 0201 	orr.w	r2, r2, #1
 8009ee2:	601a      	str	r2, [r3, #0]
    }
}
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	20001bc4 	.word	0x20001bc4
 8009eec:	42418200 	.word	0x42418200
 8009ef0:	40000800 	.word	0x40000800

08009ef4 <stepperPulseStartDelayed>:
        hal.stepper.pulse_start(stepper);
        return;
    }
#endif

    if(stepper->dir_change) {
 8009ef4:	7b43      	ldrb	r3, [r0, #13]
 8009ef6:	b9e3      	cbnz	r3, 8009f32 <stepperPulseStartDelayed+0x3e>
        }

        return;
    }

    if(stepper->step_outbits.value) {
 8009ef8:	7b83      	ldrb	r3, [r0, #14]
 8009efa:	b1cb      	cbz	r3, 8009f30 <stepperPulseStartDelayed+0x3c>
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 8009efc:	4a20      	ldr	r2, [pc, #128]	@ (8009f80 <stepperPulseStartDelayed+0x8c>)
 8009efe:	f892 20e8 	ldrb.w	r2, [r2, #232]	@ 0xe8
 8009f02:	4053      	eors	r3, r2
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 8009f04:	f3c3 0100 	ubfx	r1, r3, #0, #1
 8009f08:	4a1e      	ldr	r2, [pc, #120]	@ (8009f84 <stepperPulseStartDelayed+0x90>)
 8009f0a:	f882 10b4 	strb.w	r1, [r2, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 8009f0e:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8009f12:	f882 10ac 	strb.w	r1, [r2, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 8009f16:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009f1a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8009f1e:	f882 3088 	strb.w	r3, [r2, #136]	@ 0x88
        stepperSetStepOutputs(stepper->step_outbits);
        PULSE_TIMER->EGR = TIM_EGR_UG;
 8009f22:	4b19      	ldr	r3, [pc, #100]	@ (8009f88 <stepperPulseStartDelayed+0x94>)
 8009f24:	2201      	movs	r2, #1
 8009f26:	615a      	str	r2, [r3, #20]
        PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	f042 0201 	orr.w	r2, r2, #1
 8009f2e:	601a      	str	r2, [r3, #0]
    }
}
 8009f30:	4770      	bx	lr
    dir_outbits.mask ^= settings.steppers.dir_invert.mask;
 8009f32:	7bc3      	ldrb	r3, [r0, #15]
 8009f34:	4a12      	ldr	r2, [pc, #72]	@ (8009f80 <stepperPulseStartDelayed+0x8c>)
 8009f36:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
 8009f3a:	4053      	eors	r3, r2
    DIGITAL_OUT(X_DIRECTION_PORT, X_DIRECTION_PIN, dir_outbits.x);
 8009f3c:	f3c3 0100 	ubfx	r1, r3, #0, #1
 8009f40:	4a10      	ldr	r2, [pc, #64]	@ (8009f84 <stepperPulseStartDelayed+0x90>)
 8009f42:	f882 10b0 	strb.w	r1, [r2, #176]	@ 0xb0
    DIGITAL_OUT(Y_DIRECTION_PORT, Y_DIRECTION_PIN, dir_outbits.y);
 8009f46:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8009f4a:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 8009f4e:	f882 10bc 	strb.w	r1, [r2, #188]	@ 0xbc
    DIGITAL_OUT(Z_DIRECTION_PORT, Z_DIRECTION_PIN, dir_outbits.z);
 8009f52:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009f56:	f502 32c0 	add.w	r2, r2, #98304	@ 0x18000
 8009f5a:	f882 308c 	strb.w	r3, [r2, #140]	@ 0x8c
        if(stepper->step_outbits.value) {
 8009f5e:	7b83      	ldrb	r3, [r0, #14]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d0e5      	beq.n	8009f30 <stepperPulseStartDelayed+0x3c>
            next_step_outbits = stepper->step_outbits; // Store out_bits
 8009f64:	461a      	mov	r2, r3
 8009f66:	4b09      	ldr	r3, [pc, #36]	@ (8009f8c <stepperPulseStartDelayed+0x98>)
 8009f68:	701a      	strb	r2, [r3, #0]
            PULSE_TIMER->ARR = pulse_delay;
 8009f6a:	4b09      	ldr	r3, [pc, #36]	@ (8009f90 <stepperPulseStartDelayed+0x9c>)
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	4b06      	ldr	r3, [pc, #24]	@ (8009f88 <stepperPulseStartDelayed+0x94>)
 8009f70:	62da      	str	r2, [r3, #44]	@ 0x2c
            PULSE_TIMER->EGR = TIM_EGR_UG;
 8009f72:	2201      	movs	r2, #1
 8009f74:	615a      	str	r2, [r3, #20]
            PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	f042 0201 	orr.w	r2, r2, #1
 8009f7c:	601a      	str	r2, [r3, #0]
        return;
 8009f7e:	4770      	bx	lr
 8009f80:	20001bc4 	.word	0x20001bc4
 8009f84:	42418200 	.word	0x42418200
 8009f88:	40000800 	.word	0x40000800
 8009f8c:	2000072c 	.word	0x2000072c
 8009f90:	20000740 	.word	0x20000740

08009f94 <limitsGetState>:
}

// Returns limit state as an limit_signals_t variable.
// Each bitfield bit indicates an axis limit, where triggered is 1 and not triggered is 0.
inline static limit_signals_t limitsGetState (void)
{
 8009f94:	b082      	sub	sp, #8
    limit_signals_t signals = {0};
 8009f96:	2300      	movs	r3, #0
 8009f98:	9300      	str	r3, [sp, #0]

    signals.min.mask = settings.limits.invert.mask;
 8009f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800a00c <limitsGetState+0x78>)
 8009f9c:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8009fa0:	f88d 3000 	strb.w	r3, [sp]
#ifdef MAX_LIMIT_SWITCHES
    signals.max.mask = settings.limits.invert.mask;
#endif

#if LIMIT_INMODE == GPIO_BITBAND
    signals.min.x = DIGITAL_IN(X_LIMIT_PORT, X_LIMIT_PIN);
 8009fa4:	4a1a      	ldr	r2, [pc, #104]	@ (800a010 <limitsGetState+0x7c>)
 8009fa6:	f892 002c 	ldrb.w	r0, [r2, #44]	@ 0x2c
 8009faa:	b2d9      	uxtb	r1, r3
 8009fac:	f360 0100 	bfi	r1, r0, #0, #1
 8009fb0:	f88d 1000 	strb.w	r1, [sp]
    signals.min.y = DIGITAL_IN(Y_LIMIT_PORT, Y_LIMIT_PIN);
 8009fb4:	f892 1030 	ldrb.w	r1, [r2, #48]	@ 0x30
 8009fb8:	f89d 2000 	ldrb.w	r2, [sp]
 8009fbc:	f361 0241 	bfi	r2, r1, #1, #1
 8009fc0:	f88d 2000 	strb.w	r2, [sp]
    signals.min.z = DIGITAL_IN(Z_LIMIT_PORT, Z_LIMIT_PIN);
 8009fc4:	4a13      	ldr	r2, [pc, #76]	@ (800a014 <limitsGetState+0x80>)
 8009fc6:	f892 1030 	ldrb.w	r1, [r2, #48]	@ 0x30
 8009fca:	f89d 2000 	ldrb.w	r2, [sp]
 8009fce:	f361 0282 	bfi	r2, r1, #2, #1
 8009fd2:	f88d 2000 	strb.w	r2, [sp]
#endif
#ifdef Z_LIMIT_PIN_MAX
    signals.max.z = DIGITAL_IN(Z_LIMIT_PORT_MAX, Z_LIMIT_PIN_MAX);
#endif

    if (settings.limits.invert.mask) {
 8009fd6:	b11b      	cbz	r3, 8009fe0 <limitsGetState+0x4c>
        signals.min.value ^= settings.limits.invert.mask;
 8009fd8:	b2d2      	uxtb	r2, r2
 8009fda:	4053      	eors	r3, r2
 8009fdc:	f88d 3000 	strb.w	r3, [sp]
#ifdef MAX_LIMIT_SWITCHES
        signals.max.value ^= settings.limits.invert.mask;
#endif
    }

    return signals;
 8009fe0:	9b00      	ldr	r3, [sp, #0]
 8009fe2:	9301      	str	r3, [sp, #4]
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009fea:	f363 0007 	bfi	r0, r3, #0, #8
 8009fee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009ff2:	f363 200f 	bfi	r0, r3, #8, #8
 8009ff6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009ffa:	f363 4017 	bfi	r0, r3, #16, #8
 8009ffe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a002:	f363 601f 	bfi	r0, r3, #24, #8
}
 800a006:	b002      	add	sp, #8
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	20001bc4 	.word	0x20001bc4
 800a010:	42400200 	.word	0x42400200
 800a014:	42408200 	.word	0x42408200

0800a018 <systemGetState>:
// Each bitfield bit indicates a control signal, where triggered is 1 and not triggered is 0.
static control_signals_t systemGetState (void)
{
    control_signals_t signals;

    signals.mask = settings.control_invert.mask;
 800a018:	4a06      	ldr	r2, [pc, #24]	@ (800a034 <systemGetState+0x1c>)
 800a01a:	f8b2 306c 	ldrh.w	r3, [r2, #108]	@ 0x6c
 800a01e:	4618      	mov	r0, r3
  #endif
#else
//    signals.value &= ~(CONTROL_MASK >> CONTROL_INMODE);
//    signals.value |= (uint16_t)((CONTROL_PORT->IDR & CONTROL_MASK) >> CONTROL_INMODE);
  #if ESTOP_ENABLE
    signals.e_stop = signals.reset;
 800a020:	f363 1086 	bfi	r0, r3, #6, #1
    signals.reset = settings.control_invert.reset;
 800a024:	f892 206c 	ldrb.w	r2, [r2, #108]	@ 0x6c
 800a028:	f362 0000 	bfi	r0, r2, #0, #1
  #endif
  #ifdef MOTOR_WARNING_PIN
    signals.motor_warning = DIGITAL_IN(MOTOR_WARNING_PORT, MOTOR_WARNING_PIN);
  #endif

    if(settings.control_invert.mask)
 800a02c:	b10b      	cbz	r3, 800a032 <systemGetState+0x1a>
        signals.value ^= settings.control_invert.mask;
 800a02e:	b280      	uxth	r0, r0
 800a030:	4058      	eors	r0, r3

#endif // AUX_CONTROLS_ENABLED


    return signals;
}
 800a032:	4770      	bx	lr
 800a034:	20001bc4 	.word	0x20001bc4

0800a038 <coolantSetState>:
#endif // SPINDLE_ENCODER_ENABLE

// Start/stop coolant (and mist if enabled)
static void coolantSetState (coolant_state_t mode)
{
    mode.value ^= settings.coolant_invert.mask;
 800a038:	b2c0      	uxtb	r0, r0
 800a03a:	4b08      	ldr	r3, [pc, #32]	@ (800a05c <coolantSetState+0x24>)
 800a03c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a040:	4058      	eors	r0, r3
    DIGITAL_OUT(COOLANT_FLOOD_PORT, COOLANT_FLOOD_PIN, mode.flood);
 800a042:	f3c0 0200 	ubfx	r2, r0, #0, #1
 800a046:	4b06      	ldr	r3, [pc, #24]	@ (800a060 <coolantSetState+0x28>)
 800a048:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
#ifdef COOLANT_MIST_PIN
    DIGITAL_OUT(COOLANT_MIST_PORT, COOLANT_MIST_PIN, mode.mist);
 800a04c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800a050:	f5a3 33c0 	sub.w	r3, r3, #98304	@ 0x18000
 800a054:	f883 0094 	strb.w	r0, [r3, #148]	@ 0x94
#endif
}
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	20001bc4 	.word	0x20001bc4
 800a060:	42420200 	.word	0x42420200

0800a064 <coolantGetState>:

// Returns coolant state in a coolant_state_t variable
static coolant_state_t coolantGetState (void)
{
    coolant_state_t state = (coolant_state_t){settings.coolant_invert.mask};
 800a064:	4b07      	ldr	r3, [pc, #28]	@ (800a084 <coolantGetState+0x20>)
 800a066:	f893 0070 	ldrb.w	r0, [r3, #112]	@ 0x70
 800a06a:	4603      	mov	r3, r0

    state.flood = DIGITAL_IN(COOLANT_FLOOD_PORT, COOLANT_FLOOD_PIN);
 800a06c:	4a06      	ldr	r2, [pc, #24]	@ (800a088 <coolantGetState+0x24>)
 800a06e:	7812      	ldrb	r2, [r2, #0]
 800a070:	f362 0300 	bfi	r3, r2, #0, #1
#ifdef COOLANT_MIST_PIN
    state.mist  = DIGITAL_IN(COOLANT_MIST_PORT, COOLANT_MIST_PIN);
 800a074:	4a05      	ldr	r2, [pc, #20]	@ (800a08c <coolantGetState+0x28>)
 800a076:	7d12      	ldrb	r2, [r2, #20]
 800a078:	f362 0341 	bfi	r3, r2, #1, #1
#endif
    state.value ^= settings.coolant_invert.mask;
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	4058      	eors	r0, r3

    return state;
}
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	20001bc4 	.word	0x20001bc4
 800a088:	42420200 	.word	0x42420200
 800a08c:	42408200 	.word	0x42408200

0800a090 <bitsSetAtomic>:
  __ASM volatile ("cpsid i" : : : "memory");
 800a090:	b672      	cpsid	i

// Helper functions for setting/clearing/inverting individual bits atomically (uninterruptable)
static void bitsSetAtomic (volatile uint_fast16_t *ptr, uint_fast16_t bits)
{
    __disable_irq();
    *ptr |= bits;
 800a092:	6803      	ldr	r3, [r0, #0]
 800a094:	4319      	orrs	r1, r3
 800a096:	6001      	str	r1, [r0, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a098:	b662      	cpsie	i
    __enable_irq();
}
 800a09a:	4770      	bx	lr

0800a09c <bitsClearAtomic>:

static uint_fast16_t bitsClearAtomic (volatile uint_fast16_t *ptr, uint_fast16_t bits)
{
 800a09c:	4603      	mov	r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
 800a09e:	b672      	cpsid	i
    __disable_irq();
    uint_fast16_t prev = *ptr;
 800a0a0:	6800      	ldr	r0, [r0, #0]
    *ptr &= ~bits;
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	ea22 0101 	bic.w	r1, r2, r1
 800a0a8:	6019      	str	r1, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a0aa:	b662      	cpsie	i
    __enable_irq();

    return prev;
}
 800a0ac:	4770      	bx	lr

0800a0ae <valueSetAtomic>:

static uint_fast16_t valueSetAtomic (volatile uint_fast16_t *ptr, uint_fast16_t value)
{
 800a0ae:	4603      	mov	r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
 800a0b0:	b672      	cpsid	i
    __disable_irq();
    uint_fast16_t prev = *ptr;
 800a0b2:	6800      	ldr	r0, [r0, #0]
    *ptr = value;
 800a0b4:	6019      	str	r1, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a0b6:	b662      	cpsie	i
    __enable_irq();

    return prev;
}
 800a0b8:	4770      	bx	lr
	...

0800a0bc <getElapsedMicros>:

static uint64_t getElapsedMicros (void)
{
 800a0bc:	b410      	push	{r4}
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0be:	4a0f      	ldr	r2, [pc, #60]	@ (800a0fc <getElapsedMicros+0x40>)
 800a0c0:	e852 3f00 	ldrex	r3, [r2]
    uint32_t ms, cycles;
    do {
        __LDREXW(&systick_safe_read);
        ms = uwTick;
 800a0c4:	4b0e      	ldr	r3, [pc, #56]	@ (800a100 <getElapsedMicros+0x44>)
 800a0c6:	681c      	ldr	r4, [r3, #0]
        cycles = cycle_count;
 800a0c8:	4b0e      	ldr	r3, [pc, #56]	@ (800a104 <getElapsedMicros+0x48>)
 800a0ca:	6818      	ldr	r0, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e842 3100 	strex	r1, r3, [r2]
    } while(__STREXW(1, &systick_safe_read));
 800a0d2:	2900      	cmp	r1, #0
 800a0d4:	d1f3      	bne.n	800a0be <getElapsedMicros+0x2>

    uint32_t cyccnt = DWT->CYCCNT;
 800a0d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a108 <getElapsedMicros+0x4c>)
 800a0d8:	685b      	ldr	r3, [r3, #4]
    asm volatile("" : : : "memory");
    uint32_t ccdelta = cyccnt - cycles;
 800a0da:	1a18      	subs	r0, r3, r0
    uint32_t frac = ((uint64_t)ccdelta * cycles2us_factor) >> 32;
 800a0dc:	4b0b      	ldr	r3, [pc, #44]	@ (800a10c <getElapsedMicros+0x50>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	fba3 3000 	umull	r3, r0, r3, r0

    return ms * 1000 + (frac > 1000 ? 1000 : frac);
 800a0e4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a0e8:	bf28      	it	cs
 800a0ea:	f44f 707a 	movcs.w	r0, #1000	@ 0x3e8
}
 800a0ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a0f2:	fb03 0004 	mla	r0, r3, r4, r0
 800a0f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	2000074c 	.word	0x2000074c
 800a100:	20000680 	.word	0x20000680
 800a104:	20000db4 	.word	0x20000db4
 800a108:	e0001000 	.word	0xe0001000
 800a10c:	20000748 	.word	0x20000748

0800a110 <getElapsedTicks>:

static uint32_t getElapsedTicks (void)
{
    return uwTick;
 800a110:	4b01      	ldr	r3, [pc, #4]	@ (800a118 <getElapsedTicks+0x8>)
 800a112:	6818      	ldr	r0, [r3, #0]
}
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	20000680 	.word	0x20000680

0800a11c <port2char>:

static char *port2char (GPIO_TypeDef *port)
{
    static char name[3] = "P?";

    name[1] = 'A' + GPIO_GET_INDEX(port);
 800a11c:	4b19      	ldr	r3, [pc, #100]	@ (800a184 <port2char+0x68>)
 800a11e:	4298      	cmp	r0, r3
 800a120:	d01f      	beq.n	800a162 <port2char+0x46>
 800a122:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a126:	4298      	cmp	r0, r3
 800a128:	d01f      	beq.n	800a16a <port2char+0x4e>
 800a12a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a12e:	4298      	cmp	r0, r3
 800a130:	d01d      	beq.n	800a16e <port2char+0x52>
 800a132:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a136:	4298      	cmp	r0, r3
 800a138:	d01b      	beq.n	800a172 <port2char+0x56>
 800a13a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a13e:	4298      	cmp	r0, r3
 800a140:	d019      	beq.n	800a176 <port2char+0x5a>
 800a142:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a146:	4298      	cmp	r0, r3
 800a148:	d017      	beq.n	800a17a <port2char+0x5e>
 800a14a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a14e:	4298      	cmp	r0, r3
 800a150:	d015      	beq.n	800a17e <port2char+0x62>
 800a152:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a156:	4298      	cmp	r0, r3
 800a158:	d001      	beq.n	800a15e <port2char+0x42>
 800a15a:	2349      	movs	r3, #73	@ 0x49
 800a15c:	e002      	b.n	800a164 <port2char+0x48>
 800a15e:	2348      	movs	r3, #72	@ 0x48
 800a160:	e000      	b.n	800a164 <port2char+0x48>
 800a162:	2341      	movs	r3, #65	@ 0x41
 800a164:	4808      	ldr	r0, [pc, #32]	@ (800a188 <port2char+0x6c>)
 800a166:	7043      	strb	r3, [r0, #1]

    return name;
}
 800a168:	4770      	bx	lr
    name[1] = 'A' + GPIO_GET_INDEX(port);
 800a16a:	2342      	movs	r3, #66	@ 0x42
 800a16c:	e7fa      	b.n	800a164 <port2char+0x48>
 800a16e:	2343      	movs	r3, #67	@ 0x43
 800a170:	e7f8      	b.n	800a164 <port2char+0x48>
 800a172:	2344      	movs	r3, #68	@ 0x44
 800a174:	e7f6      	b.n	800a164 <port2char+0x48>
 800a176:	2345      	movs	r3, #69	@ 0x45
 800a178:	e7f4      	b.n	800a164 <port2char+0x48>
 800a17a:	2346      	movs	r3, #70	@ 0x46
 800a17c:	e7f2      	b.n	800a164 <port2char+0x48>
 800a17e:	2347      	movs	r3, #71	@ 0x47
 800a180:	e7f0      	b.n	800a164 <port2char+0x48>
 800a182:	bf00      	nop
 800a184:	40020000 	.word	0x40020000
 800a188:	20000008 	.word	0x20000008

0800a18c <enumeratePins>:

static void enumeratePins (bool low_level, pin_info_ptr pin_info, void *data)
{
 800a18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a190:	4606      	mov	r6, r0
 800a192:	460f      	mov	r7, r1
 800a194:	4690      	mov	r8, r2
    static xbar_t pin = {0};

    uint8_t i, id = 0;

    pin.mode.input = On;
 800a196:	4a53      	ldr	r2, [pc, #332]	@ (800a2e4 <enumeratePins+0x158>)
 800a198:	7d93      	ldrb	r3, [r2, #22]
 800a19a:	f043 0301 	orr.w	r3, r3, #1
 800a19e:	7593      	strb	r3, [r2, #22]
    uint8_t i, id = 0;
 800a1a0:	2500      	movs	r5, #0

    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800a1a2:	462c      	mov	r4, r5
 800a1a4:	e01f      	b.n	800a1e6 <enumeratePins+0x5a>
        pin.id = id++;
        pin.pin = inputpin[i].pin;
        pin.function = inputpin[i].id;
        pin.group = inputpin[i].group;
        pin.port = low_level ? (void *)inputpin[i].port : (void *)port2char(inputpin[i].port);
 800a1a6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a1aa:	4b4f      	ldr	r3, [pc, #316]	@ (800a2e8 <enumeratePins+0x15c>)
 800a1ac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a1b0:	68d8      	ldr	r0, [r3, #12]
 800a1b2:	f7ff ffb3 	bl	800a11c <port2char>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	484a      	ldr	r0, [pc, #296]	@ (800a2e4 <enumeratePins+0x158>)
 800a1ba:	6083      	str	r3, [r0, #8]
        pin.description = inputpin[i].description;
 800a1bc:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800a1c0:	4b49      	ldr	r3, [pc, #292]	@ (800a2e8 <enumeratePins+0x15c>)
 800a1c2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
 800a1c8:	60c3      	str	r3, [r0, #12]
        pin.mode.pwm = pin.group == PinGroup_SpindlePWM;
 800a1ca:	6843      	ldr	r3, [r0, #4]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	bf14      	ite	ne
 800a1d0:	2300      	movne	r3, #0
 800a1d2:	2301      	moveq	r3, #1
 800a1d4:	7dc2      	ldrb	r2, [r0, #23]
 800a1d6:	f363 1204 	bfi	r2, r3, #4, #1
 800a1da:	75c2      	strb	r2, [r0, #23]

        pin_info(&pin, data);
 800a1dc:	4641      	mov	r1, r8
 800a1de:	47b8      	blx	r7
    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800a1e0:	3401      	adds	r4, #1
 800a1e2:	b2e4      	uxtb	r4, r4
        pin.id = id++;
 800a1e4:	464d      	mov	r5, r9
    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800a1e6:	2c02      	cmp	r4, #2
 800a1e8:	d81b      	bhi.n	800a222 <enumeratePins+0x96>
        pin.id = id++;
 800a1ea:	f105 0901 	add.w	r9, r5, #1
 800a1ee:	fa5f f989 	uxtb.w	r9, r9
 800a1f2:	4b3c      	ldr	r3, [pc, #240]	@ (800a2e4 <enumeratePins+0x158>)
 800a1f4:	701d      	strb	r5, [r3, #0]
        pin.pin = inputpin[i].pin;
 800a1f6:	4625      	mov	r5, r4
 800a1f8:	493b      	ldr	r1, [pc, #236]	@ (800a2e8 <enumeratePins+0x15c>)
 800a1fa:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a1fe:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800a202:	f892 c006 	ldrb.w	ip, [r2, #6]
 800a206:	f8c3 c010 	str.w	ip, [r3, #16]
        pin.function = inputpin[i].id;
 800a20a:	f811 1020 	ldrb.w	r1, [r1, r0, lsl #2]
 800a20e:	7059      	strb	r1, [r3, #1]
        pin.group = inputpin[i].group;
 800a210:	6912      	ldr	r2, [r2, #16]
 800a212:	605a      	str	r2, [r3, #4]
        pin.port = low_level ? (void *)inputpin[i].port : (void *)port2char(inputpin[i].port);
 800a214:	2e00      	cmp	r6, #0
 800a216:	d0c6      	beq.n	800a1a6 <enumeratePins+0x1a>
 800a218:	4b33      	ldr	r3, [pc, #204]	@ (800a2e8 <enumeratePins+0x15c>)
 800a21a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	e7ca      	b.n	800a1b8 <enumeratePins+0x2c>
    };

    pin.mode.mask = 0;
 800a222:	4b30      	ldr	r3, [pc, #192]	@ (800a2e4 <enumeratePins+0x158>)
 800a224:	2400      	movs	r4, #0
 800a226:	82dc      	strh	r4, [r3, #22]
    pin.mode.output = On;
 800a228:	7d9a      	ldrb	r2, [r3, #22]
 800a22a:	f042 0202 	orr.w	r2, r2, #2
 800a22e:	759a      	strb	r2, [r3, #22]

    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800a230:	e011      	b.n	800a256 <enumeratePins+0xca>
        pin.id = id++;
        pin.pin = outputpin[i].pin;
        pin.function = outputpin[i].id;
        pin.group = outputpin[i].group;
        pin.port = low_level ? (void *)outputpin[i].port : (void *)port2char(outputpin[i].port);
 800a232:	4b2e      	ldr	r3, [pc, #184]	@ (800a2ec <enumeratePins+0x160>)
 800a234:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	482a      	ldr	r0, [pc, #168]	@ (800a2e4 <enumeratePins+0x158>)
 800a23c:	6083      	str	r3, [r0, #8]
        pin.description = outputpin[i].description;
 800a23e:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 800a242:	4b2a      	ldr	r3, [pc, #168]	@ (800a2ec <enumeratePins+0x160>)
 800a244:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a248:	695b      	ldr	r3, [r3, #20]
 800a24a:	60c3      	str	r3, [r0, #12]

        pin_info(&pin, data);
 800a24c:	4641      	mov	r1, r8
 800a24e:	47b8      	blx	r7
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800a250:	3401      	adds	r4, #1
 800a252:	b2e4      	uxtb	r4, r4
        pin.id = id++;
 800a254:	464d      	mov	r5, r9
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800a256:	2c07      	cmp	r4, #7
 800a258:	d820      	bhi.n	800a29c <enumeratePins+0x110>
        pin.id = id++;
 800a25a:	f105 0901 	add.w	r9, r5, #1
 800a25e:	fa5f f989 	uxtb.w	r9, r9
 800a262:	4b20      	ldr	r3, [pc, #128]	@ (800a2e4 <enumeratePins+0x158>)
 800a264:	701d      	strb	r5, [r3, #0]
        pin.pin = outputpin[i].pin;
 800a266:	4625      	mov	r5, r4
 800a268:	4920      	ldr	r1, [pc, #128]	@ (800a2ec <enumeratePins+0x160>)
 800a26a:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800a26e:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800a272:	f892 c008 	ldrb.w	ip, [r2, #8]
 800a276:	f8c3 c010 	str.w	ip, [r3, #16]
        pin.function = outputpin[i].id;
 800a27a:	f811 1020 	ldrb.w	r1, [r1, r0, lsl #2]
 800a27e:	7059      	strb	r1, [r3, #1]
        pin.group = outputpin[i].group;
 800a280:	68d2      	ldr	r2, [r2, #12]
 800a282:	605a      	str	r2, [r3, #4]
        pin.port = low_level ? (void *)outputpin[i].port : (void *)port2char(outputpin[i].port);
 800a284:	2e00      	cmp	r6, #0
 800a286:	d1d4      	bne.n	800a232 <enumeratePins+0xa6>
 800a288:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800a28c:	4b17      	ldr	r3, [pc, #92]	@ (800a2ec <enumeratePins+0x160>)
 800a28e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a292:	6858      	ldr	r0, [r3, #4]
 800a294:	f7ff ff42 	bl	800a11c <port2char>
 800a298:	4603      	mov	r3, r0
 800a29a:	e7ce      	b.n	800a23a <enumeratePins+0xae>
    };

    periph_signal_t *ppin = periph_pins;
 800a29c:	4b14      	ldr	r3, [pc, #80]	@ (800a2f0 <enumeratePins+0x164>)
 800a29e:	681c      	ldr	r4, [r3, #0]

    if(ppin) do {
 800a2a0:	b984      	cbnz	r4, 800a2c4 <enumeratePins+0x138>
        pin.mode = ppin->pin.mode;
        pin.description = ppin->pin.description;

        pin_info(&pin, data);
    } while((ppin = ppin->next));
}
 800a2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        pin.port = low_level ? ppin->pin.port : (void *)port2char(ppin->pin.port);
 800a2a6:	68a0      	ldr	r0, [r4, #8]
 800a2a8:	f7ff ff38 	bl	800a11c <port2char>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	480d      	ldr	r0, [pc, #52]	@ (800a2e4 <enumeratePins+0x158>)
 800a2b0:	6083      	str	r3, [r0, #8]
        pin.mode = ppin->pin.mode;
 800a2b2:	8a23      	ldrh	r3, [r4, #16]
 800a2b4:	82c3      	strh	r3, [r0, #22]
        pin.description = ppin->pin.description;
 800a2b6:	6963      	ldr	r3, [r4, #20]
 800a2b8:	60c3      	str	r3, [r0, #12]
        pin_info(&pin, data);
 800a2ba:	4641      	mov	r1, r8
 800a2bc:	47b8      	blx	r7
    } while((ppin = ppin->next));
 800a2be:	69a4      	ldr	r4, [r4, #24]
 800a2c0:	2c00      	cmp	r4, #0
 800a2c2:	d0ee      	beq.n	800a2a2 <enumeratePins+0x116>
        pin.id = id++;
 800a2c4:	462a      	mov	r2, r5
 800a2c6:	3501      	adds	r5, #1
 800a2c8:	b2ed      	uxtb	r5, r5
 800a2ca:	4b06      	ldr	r3, [pc, #24]	@ (800a2e4 <enumeratePins+0x158>)
 800a2cc:	701a      	strb	r2, [r3, #0]
        pin.pin = ppin->pin.pin;
 800a2ce:	68e2      	ldr	r2, [r4, #12]
 800a2d0:	611a      	str	r2, [r3, #16]
        pin.function = ppin->pin.function;
 800a2d2:	7822      	ldrb	r2, [r4, #0]
 800a2d4:	705a      	strb	r2, [r3, #1]
        pin.group = ppin->pin.group;
 800a2d6:	6862      	ldr	r2, [r4, #4]
 800a2d8:	605a      	str	r2, [r3, #4]
        pin.port = low_level ? ppin->pin.port : (void *)port2char(ppin->pin.port);
 800a2da:	2e00      	cmp	r6, #0
 800a2dc:	d0e3      	beq.n	800a2a6 <enumeratePins+0x11a>
 800a2de:	68a3      	ldr	r3, [r4, #8]
 800a2e0:	e7e5      	b.n	800a2ae <enumeratePins+0x122>
 800a2e2:	bf00      	nop
 800a2e4:	200006a4 	.word	0x200006a4
 800a2e8:	200000f4 	.word	0x200000f4
 800a2ec:	20000014 	.word	0x20000014
 800a2f0:	20000750 	.word	0x20000750

0800a2f4 <setPeriphPinDescription>:
    }
}

void setPeriphPinDescription (const pin_function_t function, const pin_group_t group, const char *description)
{
    periph_signal_t *ppin = periph_pins;
 800a2f4:	4b0e      	ldr	r3, [pc, #56]	@ (800a330 <setPeriphPinDescription+0x3c>)
 800a2f6:	681b      	ldr	r3, [r3, #0]

    if(ppin) do {
 800a2f8:	b943      	cbnz	r3, 800a30c <setPeriphPinDescription+0x18>
 800a2fa:	4770      	bx	lr
        if(ppin->pin.function == function && ppin->pin.group == group) {
            ppin->pin.description = description;
 800a2fc:	615a      	str	r2, [r3, #20]
            ppin = NULL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	e00d      	b.n	800a31e <setPeriphPinDescription+0x2a>
        } else
            ppin = ppin->next;
    } while(ppin);
}
 800a302:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a306:	4770      	bx	lr
            ppin = ppin->next;
 800a308:	699b      	ldr	r3, [r3, #24]
    } while(ppin);
 800a30a:	b17b      	cbz	r3, 800a32c <setPeriphPinDescription+0x38>
        if(ppin->pin.function == function && ppin->pin.group == group) {
 800a30c:	f893 c000 	ldrb.w	ip, [r3]
 800a310:	4584      	cmp	ip, r0
 800a312:	d1f9      	bne.n	800a308 <setPeriphPinDescription+0x14>
{
 800a314:	b410      	push	{r4}
        if(ppin->pin.function == function && ppin->pin.group == group) {
 800a316:	685c      	ldr	r4, [r3, #4]
 800a318:	428c      	cmp	r4, r1
 800a31a:	d0ef      	beq.n	800a2fc <setPeriphPinDescription+0x8>
            ppin = ppin->next;
 800a31c:	699b      	ldr	r3, [r3, #24]
    } while(ppin);
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d0ef      	beq.n	800a302 <setPeriphPinDescription+0xe>
        if(ppin->pin.function == function && ppin->pin.group == group) {
 800a322:	f893 c000 	ldrb.w	ip, [r3]
 800a326:	4584      	cmp	ip, r0
 800a328:	d1f8      	bne.n	800a31c <setPeriphPinDescription+0x28>
 800a32a:	e7f4      	b.n	800a316 <setPeriphPinDescription+0x22>
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	20000750 	.word	0x20000750

0800a334 <settings_changed>:
    if(IOInitDone) {
 800a334:	4bbe      	ldr	r3, [pc, #760]	@ (800a630 <settings_changed+0x2fc>)
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f000 8398 	beq.w	800aa6e <settings_changed+0x73a>
{
 800a33e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a340:	b087      	sub	sp, #28
 800a342:	4605      	mov	r5, r0
        GPIO_InitTypeDef GPIO_Init = {
 800a344:	2300      	movs	r3, #0
 800a346:	9301      	str	r3, [sp, #4]
 800a348:	9302      	str	r3, [sp, #8]
 800a34a:	9303      	str	r3, [sp, #12]
 800a34c:	9304      	str	r3, [sp, #16]
 800a34e:	9305      	str	r3, [sp, #20]
 800a350:	2302      	movs	r3, #2
 800a352:	9304      	str	r3, [sp, #16]
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 800a354:	48b7      	ldr	r0, [pc, #732]	@ (800a634 <settings_changed+0x300>)
 800a356:	f890 30e8 	ldrb.w	r3, [r0, #232]	@ 0xe8
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 800a35a:	f3c3 0100 	ubfx	r1, r3, #0, #1
 800a35e:	4ab6      	ldr	r2, [pc, #728]	@ (800a638 <settings_changed+0x304>)
 800a360:	f882 10b4 	strb.w	r1, [r2, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 800a364:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800a368:	f882 10ac 	strb.w	r1, [r2, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 800a36c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a370:	49b2      	ldr	r1, [pc, #712]	@ (800a63c <settings_changed+0x308>)
 800a372:	f881 3088 	strb.w	r3, [r1, #136]	@ 0x88
    dir_outbits.mask ^= settings.steppers.dir_invert.mask;
 800a376:	f890 30e9 	ldrb.w	r3, [r0, #233]	@ 0xe9
    DIGITAL_OUT(X_DIRECTION_PORT, X_DIRECTION_PIN, dir_outbits.x);
 800a37a:	f3c3 0000 	ubfx	r0, r3, #0, #1
 800a37e:	f882 00b0 	strb.w	r0, [r2, #176]	@ 0xb0
    DIGITAL_OUT(Y_DIRECTION_PORT, Y_DIRECTION_PIN, dir_outbits.y);
 800a382:	f3c3 0040 	ubfx	r0, r3, #1, #1
 800a386:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 800a38a:	f882 00bc 	strb.w	r0, [r2, #188]	@ 0xbc
    DIGITAL_OUT(Z_DIRECTION_PORT, Z_DIRECTION_PIN, dir_outbits.z);
 800a38e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a392:	f881 308c 	strb.w	r3, [r1, #140]	@ 0x8c
        pulse_length = (uint32_t)(10.0f * (settings->steppers.pulse_microseconds - STEP_PULSE_LATENCY)) - 1;
 800a396:	edd5 7a3c 	vldr	s15, [r5, #240]	@ 0xf0
 800a39a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a39e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a3a2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800a3a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a3aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3ae:	ee17 3a90 	vmov	r3, s15
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	4aa2      	ldr	r2, [pc, #648]	@ (800a640 <settings_changed+0x30c>)
 800a3b6:	6013      	str	r3, [r2, #0]
        if(hal.driver_cap.step_pulse_delay && settings->steppers.pulse_delay_microseconds > 0.0f) {
 800a3b8:	4aa2      	ldr	r2, [pc, #648]	@ (800a644 <settings_changed+0x310>)
 800a3ba:	f892 21d8 	ldrb.w	r2, [r2, #472]	@ 0x1d8
 800a3be:	f012 0f02 	tst.w	r2, #2
 800a3c2:	d025      	beq.n	800a410 <settings_changed+0xdc>
 800a3c4:	edd5 7a3d 	vldr	s15, [r5, #244]	@ 0xf4
 800a3c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3d0:	dd1e      	ble.n	800a410 <settings_changed+0xdc>
            pulse_delay = (uint32_t)(10.0f * (settings->steppers.pulse_delay_microseconds - 1.0f));
 800a3d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a3da:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800a3de:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a3e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3e6:	ee17 2a90 	vmov	r2, s15
 800a3ea:	4997      	ldr	r1, [pc, #604]	@ (800a648 <settings_changed+0x314>)
 800a3ec:	edc1 7a00 	vstr	s15, [r1]
            if(pulse_delay < 2)
 800a3f0:	2a01      	cmp	r2, #1
 800a3f2:	d905      	bls.n	800a400 <settings_changed+0xcc>
            else if(pulse_delay == pulse_length)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d106      	bne.n	800a406 <settings_changed+0xd2>
                pulse_delay++;
 800a3f8:	3201      	adds	r2, #1
 800a3fa:	4993      	ldr	r1, [pc, #588]	@ (800a648 <settings_changed+0x314>)
 800a3fc:	600a      	str	r2, [r1, #0]
 800a3fe:	e002      	b.n	800a406 <settings_changed+0xd2>
                pulse_delay = 2;
 800a400:	460a      	mov	r2, r1
 800a402:	2102      	movs	r1, #2
 800a404:	6011      	str	r1, [r2, #0]
            hal.stepper.pulse_start = &stepperPulseStartDelayed;
 800a406:	4a8f      	ldr	r2, [pc, #572]	@ (800a644 <settings_changed+0x310>)
 800a408:	4990      	ldr	r1, [pc, #576]	@ (800a64c <settings_changed+0x318>)
 800a40a:	f8c2 1094 	str.w	r1, [r2, #148]	@ 0x94
 800a40e:	e006      	b.n	800a41e <settings_changed+0xea>
            pulse_delay = 0;
 800a410:	4a8d      	ldr	r2, [pc, #564]	@ (800a648 <settings_changed+0x314>)
 800a412:	2100      	movs	r1, #0
 800a414:	6011      	str	r1, [r2, #0]
            hal.stepper.pulse_start = &stepperPulseStart;
 800a416:	4a8b      	ldr	r2, [pc, #556]	@ (800a644 <settings_changed+0x310>)
 800a418:	498d      	ldr	r1, [pc, #564]	@ (800a650 <settings_changed+0x31c>)
 800a41a:	f8c2 1094 	str.w	r1, [r2, #148]	@ 0x94
        PULSE_TIMER->ARR = pulse_length;
 800a41e:	4a8d      	ldr	r2, [pc, #564]	@ (800a654 <settings_changed+0x320>)
 800a420:	62d3      	str	r3, [r2, #44]	@ 0x2c
        PULSE_TIMER->EGR = TIM_EGR_UG;
 800a422:	2301      	movs	r3, #1
 800a424:	6153      	str	r3, [r2, #20]
        HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800a426:	2028      	movs	r0, #40	@ 0x28
 800a428:	f7fe fe04 	bl	8009034 <HAL_NVIC_DisableIRQ>
        control_fei.mask = settings->control_disable_pullup.mask ^ settings->control_invert.mask;
 800a42c:	f8b5 706e 	ldrh.w	r7, [r5, #110]	@ 0x6e
 800a430:	f8b5 306c 	ldrh.w	r3, [r5, #108]	@ 0x6c
 800a434:	405f      	eors	r7, r3
        limit_fei.mask = settings->limits.disable_pullup.mask ^ settings->limits.invert.mask;
 800a436:	f895 6126 	ldrb.w	r6, [r5, #294]	@ 0x126
 800a43a:	f895 3125 	ldrb.w	r3, [r5, #293]	@ 0x125
 800a43e:	405e      	eors	r6, r3
        uint32_t i = sizeof(inputpin) / sizeof(input_signal_t);
 800a440:	2403      	movs	r4, #3
 800a442:	e224      	b.n	800a88e <settings_changed+0x55a>
            switch(input->id) {
 800a444:	2b99      	cmp	r3, #153	@ 0x99
 800a446:	d12b      	bne.n	800a4a0 <settings_changed+0x16c>
                    input->mode.pull_mode = true;
 800a448:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a44c:	4b82      	ldr	r3, [pc, #520]	@ (800a658 <settings_changed+0x324>)
 800a44e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a452:	7919      	ldrb	r1, [r3, #4]
 800a454:	2001      	movs	r0, #1
 800a456:	f360 01c4 	bfi	r1, r0, #3, #2
 800a45a:	7119      	strb	r1, [r3, #4]
                    input->mode.irq_mode = IRQ_Mode_Falling;
 800a45c:	8899      	ldrh	r1, [r3, #4]
 800a45e:	2002      	movs	r0, #2
 800a460:	f360 1149 	bfi	r1, r0, #5, #5
 800a464:	8099      	strh	r1, [r3, #4]
                    break;
 800a466:	e01b      	b.n	800a4a0 <settings_changed+0x16c>
                    input->mode.pull_mode = settings->control_disable_pullup.reset ? PullMode_None : PullMode_Up;
 800a468:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a46c:	f083 0301 	eor.w	r3, r3, #1
 800a470:	f003 0301 	and.w	r3, r3, #1
 800a474:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a478:	4977      	ldr	r1, [pc, #476]	@ (800a658 <settings_changed+0x324>)
 800a47a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a47e:	7908      	ldrb	r0, [r1, #4]
 800a480:	f363 00c4 	bfi	r0, r3, #3, #2
 800a484:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.reset ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a486:	f017 0f01 	tst.w	r7, #1
 800a48a:	d030      	beq.n	800a4ee <settings_changed+0x1ba>
 800a48c:	2002      	movs	r0, #2
 800a48e:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a492:	4b71      	ldr	r3, [pc, #452]	@ (800a658 <settings_changed+0x324>)
 800a494:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a498:	8899      	ldrh	r1, [r3, #4]
 800a49a:	f360 1149 	bfi	r1, r0, #5, #5
 800a49e:	8099      	strh	r1, [r3, #4]
            if(input->group == PinGroup_AuxInput) {
 800a4a0:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800a4a4:	f000 818a 	beq.w	800a7bc <settings_changed+0x488>
            GPIO_Init.Pin = input->bit;
 800a4a8:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a4ac:	4b6a      	ldr	r3, [pc, #424]	@ (800a658 <settings_changed+0x324>)
 800a4ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a4b2:	689a      	ldr	r2, [r3, #8]
 800a4b4:	9201      	str	r2, [sp, #4]
            GPIO_Init.Pull = input->mode.pull_mode == PullMode_Up ? GPIO_PULLUP : GPIO_NOPULL;
 800a4b6:	791b      	ldrb	r3, [r3, #4]
 800a4b8:	f003 0318 	and.w	r3, r3, #24
 800a4bc:	2b08      	cmp	r3, #8
 800a4be:	f000 81d6 	beq.w	800a86e <settings_changed+0x53a>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	9303      	str	r3, [sp, #12]
            switch(input->mode.irq_mode) {
 800a4c6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a4ca:	4b63      	ldr	r3, [pc, #396]	@ (800a658 <settings_changed+0x324>)
 800a4cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a4d0:	889b      	ldrh	r3, [r3, #4]
 800a4d2:	f3c3 1344 	ubfx	r3, r3, #5, #5
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	f000 8262 	beq.w	800a9a0 <settings_changed+0x66c>
 800a4dc:	2b04      	cmp	r3, #4
 800a4de:	f000 8262 	beq.w	800a9a6 <settings_changed+0x672>
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	f000 81c5 	beq.w	800a872 <settings_changed+0x53e>
                    GPIO_Init.Mode = GPIO_MODE_INPUT;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	9302      	str	r3, [sp, #8]
                    break;
 800a4ec:	e1c3      	b.n	800a876 <settings_changed+0x542>
                    input->mode.irq_mode = control_fei.reset ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a4ee:	2001      	movs	r0, #1
 800a4f0:	e7cd      	b.n	800a48e <settings_changed+0x15a>
                    input->mode.pull_mode = settings->control_disable_pullup.e_stop ? PullMode_None : PullMode_Up;
 800a4f2:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a4f6:	099b      	lsrs	r3, r3, #6
 800a4f8:	f083 0301 	eor.w	r3, r3, #1
 800a4fc:	f003 0301 	and.w	r3, r3, #1
 800a500:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a504:	4954      	ldr	r1, [pc, #336]	@ (800a658 <settings_changed+0x324>)
 800a506:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a50a:	7908      	ldrb	r0, [r1, #4]
 800a50c:	f363 00c4 	bfi	r0, r3, #3, #2
 800a510:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.e_stop ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a512:	f017 0f40 	tst.w	r7, #64	@ 0x40
 800a516:	d00a      	beq.n	800a52e <settings_changed+0x1fa>
 800a518:	2002      	movs	r0, #2
 800a51a:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a51e:	4b4e      	ldr	r3, [pc, #312]	@ (800a658 <settings_changed+0x324>)
 800a520:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a524:	8899      	ldrh	r1, [r3, #4]
 800a526:	f360 1149 	bfi	r1, r0, #5, #5
 800a52a:	8099      	strh	r1, [r3, #4]
                    break;
 800a52c:	e7b8      	b.n	800a4a0 <settings_changed+0x16c>
                    input->mode.irq_mode = control_fei.e_stop ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a52e:	2001      	movs	r0, #1
 800a530:	e7f3      	b.n	800a51a <settings_changed+0x1e6>
                    input->mode.pull_mode = settings->control_disable_pullup.feed_hold ? PullMode_None : PullMode_Up;
 800a532:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a536:	085b      	lsrs	r3, r3, #1
 800a538:	f083 0301 	eor.w	r3, r3, #1
 800a53c:	f003 0301 	and.w	r3, r3, #1
 800a540:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a544:	4944      	ldr	r1, [pc, #272]	@ (800a658 <settings_changed+0x324>)
 800a546:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a54a:	7908      	ldrb	r0, [r1, #4]
 800a54c:	f363 00c4 	bfi	r0, r3, #3, #2
 800a550:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.feed_hold ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a552:	f017 0f02 	tst.w	r7, #2
 800a556:	d00a      	beq.n	800a56e <settings_changed+0x23a>
 800a558:	2002      	movs	r0, #2
 800a55a:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a55e:	4b3e      	ldr	r3, [pc, #248]	@ (800a658 <settings_changed+0x324>)
 800a560:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a564:	8899      	ldrh	r1, [r3, #4]
 800a566:	f360 1149 	bfi	r1, r0, #5, #5
 800a56a:	8099      	strh	r1, [r3, #4]
                    break;
 800a56c:	e798      	b.n	800a4a0 <settings_changed+0x16c>
                    input->mode.irq_mode = control_fei.feed_hold ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a56e:	2001      	movs	r0, #1
 800a570:	e7f3      	b.n	800a55a <settings_changed+0x226>
                    input->mode.pull_mode = settings->control_disable_pullup.cycle_start ? PullMode_None : PullMode_Up;
 800a572:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a576:	089b      	lsrs	r3, r3, #2
 800a578:	f083 0301 	eor.w	r3, r3, #1
 800a57c:	f003 0301 	and.w	r3, r3, #1
 800a580:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a584:	4934      	ldr	r1, [pc, #208]	@ (800a658 <settings_changed+0x324>)
 800a586:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a58a:	7908      	ldrb	r0, [r1, #4]
 800a58c:	f363 00c4 	bfi	r0, r3, #3, #2
 800a590:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.cycle_start ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a592:	f017 0f04 	tst.w	r7, #4
 800a596:	d00a      	beq.n	800a5ae <settings_changed+0x27a>
 800a598:	2002      	movs	r0, #2
 800a59a:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a59e:	4b2e      	ldr	r3, [pc, #184]	@ (800a658 <settings_changed+0x324>)
 800a5a0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a5a4:	8899      	ldrh	r1, [r3, #4]
 800a5a6:	f360 1149 	bfi	r1, r0, #5, #5
 800a5aa:	8099      	strh	r1, [r3, #4]
                    break;
 800a5ac:	e778      	b.n	800a4a0 <settings_changed+0x16c>
                    input->mode.irq_mode = control_fei.cycle_start ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a5ae:	2001      	movs	r0, #1
 800a5b0:	e7f3      	b.n	800a59a <settings_changed+0x266>
                    input->mode.pull_mode = settings->control_disable_pullup.safety_door_ajar ? PullMode_None : PullMode_Up;
 800a5b2:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a5b6:	08db      	lsrs	r3, r3, #3
 800a5b8:	f083 0301 	eor.w	r3, r3, #1
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a5c4:	4924      	ldr	r1, [pc, #144]	@ (800a658 <settings_changed+0x324>)
 800a5c6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a5ca:	7908      	ldrb	r0, [r1, #4]
 800a5cc:	f363 00c4 	bfi	r0, r3, #3, #2
 800a5d0:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.safety_door_ajar ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a5d2:	f017 0f08 	tst.w	r7, #8
 800a5d6:	d00a      	beq.n	800a5ee <settings_changed+0x2ba>
 800a5d8:	2002      	movs	r0, #2
 800a5da:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a5de:	4b1e      	ldr	r3, [pc, #120]	@ (800a658 <settings_changed+0x324>)
 800a5e0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a5e4:	8899      	ldrh	r1, [r3, #4]
 800a5e6:	f360 1149 	bfi	r1, r0, #5, #5
 800a5ea:	8099      	strh	r1, [r3, #4]
                    break;
 800a5ec:	e758      	b.n	800a4a0 <settings_changed+0x16c>
                    input->mode.irq_mode = control_fei.safety_door_ajar ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a5ee:	2001      	movs	r0, #1
 800a5f0:	e7f3      	b.n	800a5da <settings_changed+0x2a6>
                    input->mode.pull_mode = settings->limits.disable_pullup.x ? PullMode_None : PullMode_Up;
 800a5f2:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a5f6:	f083 0301 	eor.w	r3, r3, #1
 800a5fa:	f003 0301 	and.w	r3, r3, #1
 800a5fe:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a602:	4915      	ldr	r1, [pc, #84]	@ (800a658 <settings_changed+0x324>)
 800a604:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a608:	7908      	ldrb	r0, [r1, #4]
 800a60a:	f363 00c4 	bfi	r0, r3, #3, #2
 800a60e:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.x ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a610:	f016 0f01 	tst.w	r6, #1
 800a614:	d00a      	beq.n	800a62c <settings_changed+0x2f8>
 800a616:	2002      	movs	r0, #2
 800a618:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a61c:	4b0e      	ldr	r3, [pc, #56]	@ (800a658 <settings_changed+0x324>)
 800a61e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a622:	8899      	ldrh	r1, [r3, #4]
 800a624:	f360 1149 	bfi	r1, r0, #5, #5
 800a628:	8099      	strh	r1, [r3, #4]
                    break;
 800a62a:	e739      	b.n	800a4a0 <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.x ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a62c:	2001      	movs	r0, #1
 800a62e:	e7f3      	b.n	800a618 <settings_changed+0x2e4>
 800a630:	20000738 	.word	0x20000738
 800a634:	20001bc4 	.word	0x20001bc4
 800a638:	42418200 	.word	0x42418200
 800a63c:	42420200 	.word	0x42420200
 800a640:	20000744 	.word	0x20000744
 800a644:	200011ac 	.word	0x200011ac
 800a648:	20000740 	.word	0x20000740
 800a64c:	08009ef5 	.word	0x08009ef5
 800a650:	08009e7d 	.word	0x08009e7d
 800a654:	40000800 	.word	0x40000800
 800a658:	200000f4 	.word	0x200000f4
                    input->mode.pull_mode = settings->limits.disable_pullup.y ? PullMode_None : PullMode_Up;
 800a65c:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a660:	085b      	lsrs	r3, r3, #1
 800a662:	f083 0301 	eor.w	r3, r3, #1
 800a666:	f003 0301 	and.w	r3, r3, #1
 800a66a:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a66e:	49c8      	ldr	r1, [pc, #800]	@ (800a990 <settings_changed+0x65c>)
 800a670:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a674:	7908      	ldrb	r0, [r1, #4]
 800a676:	f363 00c4 	bfi	r0, r3, #3, #2
 800a67a:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.y ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a67c:	f016 0f02 	tst.w	r6, #2
 800a680:	d00a      	beq.n	800a698 <settings_changed+0x364>
 800a682:	2002      	movs	r0, #2
 800a684:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a688:	4bc1      	ldr	r3, [pc, #772]	@ (800a990 <settings_changed+0x65c>)
 800a68a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a68e:	8899      	ldrh	r1, [r3, #4]
 800a690:	f360 1149 	bfi	r1, r0, #5, #5
 800a694:	8099      	strh	r1, [r3, #4]
                    break;
 800a696:	e703      	b.n	800a4a0 <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.y ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a698:	2001      	movs	r0, #1
 800a69a:	e7f3      	b.n	800a684 <settings_changed+0x350>
                    input->mode.pull_mode = settings->limits.disable_pullup.z ? PullMode_None : PullMode_Up;
 800a69c:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a6a0:	089b      	lsrs	r3, r3, #2
 800a6a2:	f083 0301 	eor.w	r3, r3, #1
 800a6a6:	f003 0301 	and.w	r3, r3, #1
 800a6aa:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a6ae:	49b8      	ldr	r1, [pc, #736]	@ (800a990 <settings_changed+0x65c>)
 800a6b0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a6b4:	7908      	ldrb	r0, [r1, #4]
 800a6b6:	f363 00c4 	bfi	r0, r3, #3, #2
 800a6ba:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.z ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a6bc:	f016 0f04 	tst.w	r6, #4
 800a6c0:	d00a      	beq.n	800a6d8 <settings_changed+0x3a4>
 800a6c2:	2002      	movs	r0, #2
 800a6c4:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a6c8:	4bb1      	ldr	r3, [pc, #708]	@ (800a990 <settings_changed+0x65c>)
 800a6ca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a6ce:	8899      	ldrh	r1, [r3, #4]
 800a6d0:	f360 1149 	bfi	r1, r0, #5, #5
 800a6d4:	8099      	strh	r1, [r3, #4]
                    break;
 800a6d6:	e6e3      	b.n	800a4a0 <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.z ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a6d8:	2001      	movs	r0, #1
 800a6da:	e7f3      	b.n	800a6c4 <settings_changed+0x390>
                    input->mode.pull_mode = settings->limits.disable_pullup.a ? PullMode_None : PullMode_Up;
 800a6dc:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a6e0:	08db      	lsrs	r3, r3, #3
 800a6e2:	f083 0301 	eor.w	r3, r3, #1
 800a6e6:	f003 0301 	and.w	r3, r3, #1
 800a6ea:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a6ee:	49a8      	ldr	r1, [pc, #672]	@ (800a990 <settings_changed+0x65c>)
 800a6f0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a6f4:	7908      	ldrb	r0, [r1, #4]
 800a6f6:	f363 00c4 	bfi	r0, r3, #3, #2
 800a6fa:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.a ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a6fc:	f016 0f08 	tst.w	r6, #8
 800a700:	d00a      	beq.n	800a718 <settings_changed+0x3e4>
 800a702:	2002      	movs	r0, #2
 800a704:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a708:	4ba1      	ldr	r3, [pc, #644]	@ (800a990 <settings_changed+0x65c>)
 800a70a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a70e:	8899      	ldrh	r1, [r3, #4]
 800a710:	f360 1149 	bfi	r1, r0, #5, #5
 800a714:	8099      	strh	r1, [r3, #4]
                    break;
 800a716:	e6c3      	b.n	800a4a0 <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.a ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a718:	2001      	movs	r0, #1
 800a71a:	e7f3      	b.n	800a704 <settings_changed+0x3d0>
                    input->mode.pull_mode = settings->limits.disable_pullup.b ? PullMode_None : PullMode_Up;
 800a71c:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a720:	091b      	lsrs	r3, r3, #4
 800a722:	f083 0301 	eor.w	r3, r3, #1
 800a726:	f003 0301 	and.w	r3, r3, #1
 800a72a:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a72e:	4998      	ldr	r1, [pc, #608]	@ (800a990 <settings_changed+0x65c>)
 800a730:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a734:	7908      	ldrb	r0, [r1, #4]
 800a736:	f363 00c4 	bfi	r0, r3, #3, #2
 800a73a:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.b ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a73c:	f016 0f10 	tst.w	r6, #16
 800a740:	d00a      	beq.n	800a758 <settings_changed+0x424>
 800a742:	2002      	movs	r0, #2
 800a744:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a748:	4b91      	ldr	r3, [pc, #580]	@ (800a990 <settings_changed+0x65c>)
 800a74a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a74e:	8899      	ldrh	r1, [r3, #4]
 800a750:	f360 1149 	bfi	r1, r0, #5, #5
 800a754:	8099      	strh	r1, [r3, #4]
                    break;
 800a756:	e6a3      	b.n	800a4a0 <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.b ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a758:	2001      	movs	r0, #1
 800a75a:	e7f3      	b.n	800a744 <settings_changed+0x410>
                    input->mode.pull_mode = settings->limits.disable_pullup.c ? PullMode_None : PullMode_Up;
 800a75c:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a760:	095b      	lsrs	r3, r3, #5
 800a762:	f083 0301 	eor.w	r3, r3, #1
 800a766:	f003 0301 	and.w	r3, r3, #1
 800a76a:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a76e:	4988      	ldr	r1, [pc, #544]	@ (800a990 <settings_changed+0x65c>)
 800a770:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a774:	7908      	ldrb	r0, [r1, #4]
 800a776:	f363 00c4 	bfi	r0, r3, #3, #2
 800a77a:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.c ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a77c:	f016 0f20 	tst.w	r6, #32
 800a780:	d00a      	beq.n	800a798 <settings_changed+0x464>
 800a782:	2002      	movs	r0, #2
 800a784:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a788:	4b81      	ldr	r3, [pc, #516]	@ (800a990 <settings_changed+0x65c>)
 800a78a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a78e:	8899      	ldrh	r1, [r3, #4]
 800a790:	f360 1149 	bfi	r1, r0, #5, #5
 800a794:	8099      	strh	r1, [r3, #4]
                    break;
 800a796:	e683      	b.n	800a4a0 <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.c ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a798:	2001      	movs	r0, #1
 800a79a:	e7f3      	b.n	800a784 <settings_changed+0x450>
                    input->mode.pull_mode = true;
 800a79c:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a7a0:	4b7b      	ldr	r3, [pc, #492]	@ (800a990 <settings_changed+0x65c>)
 800a7a2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a7a6:	7919      	ldrb	r1, [r3, #4]
 800a7a8:	2001      	movs	r0, #1
 800a7aa:	f360 01c4 	bfi	r1, r0, #3, #2
 800a7ae:	7119      	strb	r1, [r3, #4]
                    input->mode.irq_mode = IRQ_Mode_Falling;
 800a7b0:	8899      	ldrh	r1, [r3, #4]
 800a7b2:	2002      	movs	r0, #2
 800a7b4:	f360 1149 	bfi	r1, r0, #5, #5
 800a7b8:	8099      	strh	r1, [r3, #4]
                    break;
 800a7ba:	e671      	b.n	800a4a0 <settings_changed+0x16c>
                if(input->cap.irq_mode != IRQ_Mode_None) {
 800a7bc:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a7c0:	4b73      	ldr	r3, [pc, #460]	@ (800a990 <settings_changed+0x65c>)
 800a7c2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a7c6:	885b      	ldrh	r3, [r3, #2]
 800a7c8:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f43f ae6b 	beq.w	800a4a8 <settings_changed+0x174>
                    uint32_t extireg = SYSCFG->EXTICR[input->pin >> 2] & ~(0b1111 << ((input->pin & 0b11) << 2));
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	4a6e      	ldr	r2, [pc, #440]	@ (800a990 <settings_changed+0x65c>)
 800a7d6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a7da:	7993      	ldrb	r3, [r2, #6]
 800a7dc:	0899      	lsrs	r1, r3, #2
 800a7de:	f101 0c02 	add.w	ip, r1, #2
 800a7e2:	486c      	ldr	r0, [pc, #432]	@ (800a994 <settings_changed+0x660>)
 800a7e4:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	f003 030c 	and.w	r3, r3, #12
 800a7ee:	f04f 0c0f 	mov.w	ip, #15
 800a7f2:	fa0c fc03 	lsl.w	ip, ip, r3
 800a7f6:	ea20 000c 	bic.w	r0, r0, ip
                    extireg |= ((uint32_t)(GPIO_GET_INDEX(input->port)) << ((input->pin & 0b11) << 2));
 800a7fa:	68d2      	ldr	r2, [r2, #12]
 800a7fc:	f8df c19c 	ldr.w	ip, [pc, #412]	@ 800a99c <settings_changed+0x668>
 800a800:	4562      	cmp	r2, ip
 800a802:	d01f      	beq.n	800a844 <settings_changed+0x510>
 800a804:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800a808:	4562      	cmp	r2, ip
 800a80a:	d024      	beq.n	800a856 <settings_changed+0x522>
 800a80c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800a810:	4562      	cmp	r2, ip
 800a812:	d022      	beq.n	800a85a <settings_changed+0x526>
 800a814:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800a818:	4562      	cmp	r2, ip
 800a81a:	d020      	beq.n	800a85e <settings_changed+0x52a>
 800a81c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800a820:	4562      	cmp	r2, ip
 800a822:	d01e      	beq.n	800a862 <settings_changed+0x52e>
 800a824:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800a828:	4562      	cmp	r2, ip
 800a82a:	d01c      	beq.n	800a866 <settings_changed+0x532>
 800a82c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800a830:	4562      	cmp	r2, ip
 800a832:	d01a      	beq.n	800a86a <settings_changed+0x536>
 800a834:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800a838:	4562      	cmp	r2, ip
 800a83a:	d001      	beq.n	800a840 <settings_changed+0x50c>
 800a83c:	2208      	movs	r2, #8
 800a83e:	e002      	b.n	800a846 <settings_changed+0x512>
 800a840:	2207      	movs	r2, #7
 800a842:	e000      	b.n	800a846 <settings_changed+0x512>
 800a844:	2200      	movs	r2, #0
 800a846:	fa02 f303 	lsl.w	r3, r2, r3
 800a84a:	4303      	orrs	r3, r0
                    SYSCFG->EXTICR[input->pin >> 2] = extireg;
 800a84c:	1c8a      	adds	r2, r1, #2
 800a84e:	4951      	ldr	r1, [pc, #324]	@ (800a994 <settings_changed+0x660>)
 800a850:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a854:	e628      	b.n	800a4a8 <settings_changed+0x174>
                    extireg |= ((uint32_t)(GPIO_GET_INDEX(input->port)) << ((input->pin & 0b11) << 2));
 800a856:	2201      	movs	r2, #1
 800a858:	e7f5      	b.n	800a846 <settings_changed+0x512>
 800a85a:	2202      	movs	r2, #2
 800a85c:	e7f3      	b.n	800a846 <settings_changed+0x512>
 800a85e:	2203      	movs	r2, #3
 800a860:	e7f1      	b.n	800a846 <settings_changed+0x512>
 800a862:	2204      	movs	r2, #4
 800a864:	e7ef      	b.n	800a846 <settings_changed+0x512>
 800a866:	2205      	movs	r2, #5
 800a868:	e7ed      	b.n	800a846 <settings_changed+0x512>
 800a86a:	2206      	movs	r2, #6
 800a86c:	e7eb      	b.n	800a846 <settings_changed+0x512>
            GPIO_Init.Pull = input->mode.pull_mode == PullMode_Up ? GPIO_PULLUP : GPIO_NOPULL;
 800a86e:	2301      	movs	r3, #1
 800a870:	e628      	b.n	800a4c4 <settings_changed+0x190>
                    GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 800a872:	4b49      	ldr	r3, [pc, #292]	@ (800a998 <settings_changed+0x664>)
 800a874:	9302      	str	r3, [sp, #8]
            HAL_GPIO_Init(input->port, &GPIO_Init);
 800a876:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a87a:	4b45      	ldr	r3, [pc, #276]	@ (800a990 <settings_changed+0x65c>)
 800a87c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a880:	a901      	add	r1, sp, #4
 800a882:	68d8      	ldr	r0, [r3, #12]
 800a884:	f7fe fdc2 	bl	800940c <HAL_GPIO_Init>
        } while(i);
 800a888:	2c00      	cmp	r4, #0
 800a88a:	f000 808f 	beq.w	800a9ac <settings_changed+0x678>
            input = &inputpin[--i];
 800a88e:	3c01      	subs	r4, #1
            if(input->group == PinGroup_AuxInputAnalog)
 800a890:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a894:	4b3e      	ldr	r3, [pc, #248]	@ (800a990 <settings_changed+0x65c>)
 800a896:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a89a:	691a      	ldr	r2, [r3, #16]
 800a89c:	2a0a      	cmp	r2, #10
 800a89e:	d0f3      	beq.n	800a888 <settings_changed+0x554>
            if(input->group != PinGroup_AuxInput)
 800a8a0:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800a8a4:	d008      	beq.n	800a8b8 <settings_changed+0x584>
                input->mode.irq_mode = IRQ_Mode_None;
 800a8a6:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a8aa:	4b39      	ldr	r3, [pc, #228]	@ (800a990 <settings_changed+0x65c>)
 800a8ac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a8b0:	8899      	ldrh	r1, [r3, #4]
 800a8b2:	f36f 1149 	bfc	r1, #5, #5
 800a8b6:	8099      	strh	r1, [r3, #4]
            switch(input->id) {
 800a8b8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800a8bc:	4934      	ldr	r1, [pc, #208]	@ (800a990 <settings_changed+0x65c>)
 800a8be:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 800a8c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8c4:	f63f adbe 	bhi.w	800a444 <settings_changed+0x110>
 800a8c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8ca:	f63f ade9 	bhi.w	800a4a0 <settings_changed+0x16c>
 800a8ce:	a101      	add	r1, pc, #4	@ (adr r1, 800a8d4 <settings_changed+0x5a0>)
 800a8d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8d4:	0800a469 	.word	0x0800a469
 800a8d8:	0800a533 	.word	0x0800a533
 800a8dc:	0800a573 	.word	0x0800a573
 800a8e0:	0800a5b3 	.word	0x0800a5b3
 800a8e4:	0800a4a1 	.word	0x0800a4a1
 800a8e8:	0800a4a1 	.word	0x0800a4a1
 800a8ec:	0800a4f3 	.word	0x0800a4f3
 800a8f0:	0800a4a1 	.word	0x0800a4a1
 800a8f4:	0800a4a1 	.word	0x0800a4a1
 800a8f8:	0800a4a1 	.word	0x0800a4a1
 800a8fc:	0800a4a1 	.word	0x0800a4a1
 800a900:	0800a4a1 	.word	0x0800a4a1
 800a904:	0800a4a1 	.word	0x0800a4a1
 800a908:	0800a4a1 	.word	0x0800a4a1
 800a90c:	0800a4a1 	.word	0x0800a4a1
 800a910:	0800a4a1 	.word	0x0800a4a1
 800a914:	0800a5f3 	.word	0x0800a5f3
 800a918:	0800a5f3 	.word	0x0800a5f3
 800a91c:	0800a5f3 	.word	0x0800a5f3
 800a920:	0800a4a1 	.word	0x0800a4a1
 800a924:	0800a4a1 	.word	0x0800a4a1
 800a928:	0800a65d 	.word	0x0800a65d
 800a92c:	0800a65d 	.word	0x0800a65d
 800a930:	0800a65d 	.word	0x0800a65d
 800a934:	0800a4a1 	.word	0x0800a4a1
 800a938:	0800a4a1 	.word	0x0800a4a1
 800a93c:	0800a69d 	.word	0x0800a69d
 800a940:	0800a69d 	.word	0x0800a69d
 800a944:	0800a69d 	.word	0x0800a69d
 800a948:	0800a4a1 	.word	0x0800a4a1
 800a94c:	0800a4a1 	.word	0x0800a4a1
 800a950:	0800a6dd 	.word	0x0800a6dd
 800a954:	0800a6dd 	.word	0x0800a6dd
 800a958:	0800a4a1 	.word	0x0800a4a1
 800a95c:	0800a71d 	.word	0x0800a71d
 800a960:	0800a71d 	.word	0x0800a71d
 800a964:	0800a4a1 	.word	0x0800a4a1
 800a968:	0800a75d 	.word	0x0800a75d
 800a96c:	0800a75d 	.word	0x0800a75d
 800a970:	0800a4a1 	.word	0x0800a4a1
 800a974:	0800a4a1 	.word	0x0800a4a1
 800a978:	0800a4a1 	.word	0x0800a4a1
 800a97c:	0800a4a1 	.word	0x0800a4a1
 800a980:	0800a4a1 	.word	0x0800a4a1
 800a984:	0800a4a1 	.word	0x0800a4a1
 800a988:	0800a4a1 	.word	0x0800a4a1
 800a98c:	0800a79d 	.word	0x0800a79d
 800a990:	200000f4 	.word	0x200000f4
 800a994:	40013800 	.word	0x40013800
 800a998:	10110000 	.word	0x10110000
 800a99c:	40020000 	.word	0x40020000
                    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
 800a9a0:	4b33      	ldr	r3, [pc, #204]	@ (800aa70 <settings_changed+0x73c>)
 800a9a2:	9302      	str	r3, [sp, #8]
                    break;
 800a9a4:	e767      	b.n	800a876 <settings_changed+0x542>
                    GPIO_Init.Mode = GPIO_MODE_IT_RISING_FALLING;
 800a9a6:	4b33      	ldr	r3, [pc, #204]	@ (800aa74 <settings_changed+0x740>)
 800a9a8:	9302      	str	r3, [sp, #8]
                    break;
 800a9aa:	e764      	b.n	800a876 <settings_changed+0x542>
        uint32_t irq_mask = DRIVER_IRQMASK|aux_irq;
 800a9ac:	4b32      	ldr	r3, [pc, #200]	@ (800aa78 <settings_changed+0x744>)
 800a9ae:	681c      	ldr	r4, [r3, #0]
 800a9b0:	f444 52c0 	orr.w	r2, r4, #6144	@ 0x1800
        __HAL_GPIO_EXTI_CLEAR_IT(irq_mask);
 800a9b4:	4b31      	ldr	r3, [pc, #196]	@ (800aa7c <settings_changed+0x748>)
 800a9b6:	615a      	str	r2, [r3, #20]
        if(irq_mask & (1<<0)) {
 800a9b8:	f014 0f01 	tst.w	r4, #1
 800a9bc:	d121      	bne.n	800aa02 <settings_changed+0x6ce>
        if(irq_mask & (1<<1)) {
 800a9be:	f014 0f02 	tst.w	r4, #2
 800a9c2:	d127      	bne.n	800aa14 <settings_changed+0x6e0>
        if(irq_mask & (1<<2)) {
 800a9c4:	f014 0f04 	tst.w	r4, #4
 800a9c8:	d12d      	bne.n	800aa26 <settings_changed+0x6f2>
        if(irq_mask & (1<<3)) {
 800a9ca:	f014 0f08 	tst.w	r4, #8
 800a9ce:	d133      	bne.n	800aa38 <settings_changed+0x704>
        if(irq_mask & (1<<4)) {
 800a9d0:	f014 0f10 	tst.w	r4, #16
 800a9d4:	d139      	bne.n	800aa4a <settings_changed+0x716>
        if(irq_mask & 0x03E0) {
 800a9d6:	f414 7f78 	tst.w	r4, #992	@ 0x3e0
 800a9da:	d13f      	bne.n	800aa5c <settings_changed+0x728>
            HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800a9dc:	2200      	movs	r2, #0
 800a9de:	2102      	movs	r1, #2
 800a9e0:	2028      	movs	r0, #40	@ 0x28
 800a9e2:	f7fe fb09 	bl	8008ff8 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a9e6:	2028      	movs	r0, #40	@ 0x28
 800a9e8:	f7fe fb16 	bl	8009018 <HAL_NVIC_EnableIRQ>
        hal.limits.enable(settings->limits.flags.hard_enabled, (axes_signals_t){0});
 800a9ec:	4b24      	ldr	r3, [pc, #144]	@ (800aa80 <settings_changed+0x74c>)
 800a9ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9f0:	f895 0124 	ldrb.w	r0, [r5, #292]	@ 0x124
 800a9f4:	f04f 0100 	mov.w	r1, #0
 800a9f8:	f000 0001 	and.w	r0, r0, #1
 800a9fc:	4798      	blx	r3
}
 800a9fe:	b007      	add	sp, #28
 800aa00:	bdf0      	pop	{r4, r5, r6, r7, pc}
            HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800aa02:	2200      	movs	r2, #0
 800aa04:	2102      	movs	r1, #2
 800aa06:	2006      	movs	r0, #6
 800aa08:	f7fe faf6 	bl	8008ff8 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800aa0c:	2006      	movs	r0, #6
 800aa0e:	f7fe fb03 	bl	8009018 <HAL_NVIC_EnableIRQ>
 800aa12:	e7d4      	b.n	800a9be <settings_changed+0x68a>
            HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 800aa14:	2200      	movs	r2, #0
 800aa16:	2102      	movs	r1, #2
 800aa18:	2007      	movs	r0, #7
 800aa1a:	f7fe faed 	bl	8008ff8 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800aa1e:	2007      	movs	r0, #7
 800aa20:	f7fe fafa 	bl	8009018 <HAL_NVIC_EnableIRQ>
 800aa24:	e7ce      	b.n	800a9c4 <settings_changed+0x690>
            HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 800aa26:	2200      	movs	r2, #0
 800aa28:	2102      	movs	r1, #2
 800aa2a:	2008      	movs	r0, #8
 800aa2c:	f7fe fae4 	bl	8008ff8 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800aa30:	2008      	movs	r0, #8
 800aa32:	f7fe faf1 	bl	8009018 <HAL_NVIC_EnableIRQ>
 800aa36:	e7c8      	b.n	800a9ca <settings_changed+0x696>
            HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 800aa38:	2200      	movs	r2, #0
 800aa3a:	2102      	movs	r1, #2
 800aa3c:	2009      	movs	r0, #9
 800aa3e:	f7fe fadb 	bl	8008ff8 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800aa42:	2009      	movs	r0, #9
 800aa44:	f7fe fae8 	bl	8009018 <HAL_NVIC_EnableIRQ>
 800aa48:	e7c2      	b.n	800a9d0 <settings_changed+0x69c>
            HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	2102      	movs	r1, #2
 800aa4e:	200a      	movs	r0, #10
 800aa50:	f7fe fad2 	bl	8008ff8 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800aa54:	200a      	movs	r0, #10
 800aa56:	f7fe fadf 	bl	8009018 <HAL_NVIC_EnableIRQ>
 800aa5a:	e7bc      	b.n	800a9d6 <settings_changed+0x6a2>
            HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	2102      	movs	r1, #2
 800aa60:	2017      	movs	r0, #23
 800aa62:	f7fe fac9 	bl	8008ff8 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800aa66:	2017      	movs	r0, #23
 800aa68:	f7fe fad6 	bl	8009018 <HAL_NVIC_EnableIRQ>
 800aa6c:	e7b6      	b.n	800a9dc <settings_changed+0x6a8>
 800aa6e:	4770      	bx	lr
 800aa70:	10210000 	.word	0x10210000
 800aa74:	10310000 	.word	0x10310000
 800aa78:	2000073c 	.word	0x2000073c
 800aa7c:	40013c00 	.word	0x40013c00
 800aa80:	200011ac 	.word	0x200011ac

0800aa84 <registerPeriphPin>:
{
 800aa84:	b510      	push	{r4, lr}
 800aa86:	4604      	mov	r4, r0
    periph_signal_t *add_pin = malloc(sizeof(periph_signal_t));
 800aa88:	201c      	movs	r0, #28
 800aa8a:	f017 fc2f 	bl	80222ec <malloc>
    if(!add_pin)
 800aa8e:	b1c0      	cbz	r0, 800aac2 <registerPeriphPin+0x3e>
 800aa90:	4602      	mov	r2, r0
    memcpy(&add_pin->pin, pin, sizeof(periph_pin_t));
 800aa92:	6821      	ldr	r1, [r4, #0]
 800aa94:	6863      	ldr	r3, [r4, #4]
 800aa96:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800aa9a:	68e0      	ldr	r0, [r4, #12]
 800aa9c:	6011      	str	r1, [r2, #0]
 800aa9e:	6053      	str	r3, [r2, #4]
 800aaa0:	f8c2 c008 	str.w	ip, [r2, #8]
 800aaa4:	60d0      	str	r0, [r2, #12]
 800aaa6:	6921      	ldr	r1, [r4, #16]
 800aaa8:	6963      	ldr	r3, [r4, #20]
 800aaaa:	6111      	str	r1, [r2, #16]
 800aaac:	6153      	str	r3, [r2, #20]
    add_pin->next = NULL;
 800aaae:	2300      	movs	r3, #0
 800aab0:	6193      	str	r3, [r2, #24]
    if(periph_pins == NULL) {
 800aab2:	4b06      	ldr	r3, [pc, #24]	@ (800aacc <registerPeriphPin+0x48>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	b12b      	cbz	r3, 800aac4 <registerPeriphPin+0x40>
        while(last->next)
 800aab8:	4619      	mov	r1, r3
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1fb      	bne.n	800aab8 <registerPeriphPin+0x34>
        last->next = add_pin;
 800aac0:	618a      	str	r2, [r1, #24]
}
 800aac2:	bd10      	pop	{r4, pc}
        periph_pins = add_pin;
 800aac4:	4b01      	ldr	r3, [pc, #4]	@ (800aacc <registerPeriphPin+0x48>)
 800aac6:	601a      	str	r2, [r3, #0]
 800aac8:	e7fb      	b.n	800aac2 <registerPeriphPin+0x3e>
 800aaca:	bf00      	nop
 800aacc:	20000750 	.word	0x20000750

0800aad0 <driver_setup>:
#endif // ETHERNET_ENABLE

// Initializes MCU peripherals for grblHAL use

static bool driver_setup (settings_t *settings)
{
 800aad0:	b570      	push	{r4, r5, r6, lr}
 800aad2:	b08e      	sub	sp, #56	@ 0x38
 800aad4:	4605      	mov	r5, r0
    uint32_t latency;
    RCC_ClkInitTypeDef clock_cfg;

    HAL_RCC_GetClockConfig(&clock_cfg, &latency);
 800aad6:	a90d      	add	r1, sp, #52	@ 0x34
 800aad8:	a808      	add	r0, sp, #32
 800aada:	f7ff f8a9 	bl	8009c30 <HAL_RCC_GetClockConfig>

    GPIO_InitTypeDef GPIO_Init = {
 800aade:	2400      	movs	r4, #0
 800aae0:	9403      	str	r4, [sp, #12]
 800aae2:	9404      	str	r4, [sp, #16]
 800aae4:	9405      	str	r4, [sp, #20]
 800aae6:	9406      	str	r4, [sp, #24]
 800aae8:	9407      	str	r4, [sp, #28]
 800aaea:	2301      	movs	r3, #1
 800aaec:	9304      	str	r3, [sp, #16]
 800aaee:	2302      	movs	r3, #2
 800aaf0:	9306      	str	r3, [sp, #24]
     *************************/

    uint32_t i;

    // Switch on stepper driver power before enabling other output pins
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800aaf2:	e013      	b.n	800ab1c <driver_setup+0x4c>
        if(outputpin[i].group == PinGroup_StepperPower) {
            GPIO_Init.Pin = 1 << outputpin[i].pin;
            GPIO_Init.Mode = outputpin[i].mode.open_drain ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	9304      	str	r3, [sp, #16]
            HAL_GPIO_Init(outputpin[i].port, &GPIO_Init);
 800aaf8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800aafc:	4e6d      	ldr	r6, [pc, #436]	@ (800acb4 <driver_setup+0x1e4>)
 800aafe:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800ab02:	a903      	add	r1, sp, #12
 800ab04:	6870      	ldr	r0, [r6, #4]
 800ab06:	f7fe fc81 	bl	800940c <HAL_GPIO_Init>
            DIGITAL_OUT(outputpin[i].port, outputpin[i].pin, 1);
 800ab0a:	6872      	ldr	r2, [r6, #4]
 800ab0c:	4b6a      	ldr	r3, [pc, #424]	@ (800acb8 <driver_setup+0x1e8>)
 800ab0e:	4413      	add	r3, r2
 800ab10:	015b      	lsls	r3, r3, #5
 800ab12:	7a32      	ldrb	r2, [r6, #8]
 800ab14:	2101      	movs	r1, #1
 800ab16:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800ab1a:	3401      	adds	r4, #1
 800ab1c:	2c07      	cmp	r4, #7
 800ab1e:	d814      	bhi.n	800ab4a <driver_setup+0x7a>
        if(outputpin[i].group == PinGroup_StepperPower) {
 800ab20:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800ab24:	4b63      	ldr	r3, [pc, #396]	@ (800acb4 <driver_setup+0x1e4>)
 800ab26:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	2b05      	cmp	r3, #5
 800ab2e:	d1f4      	bne.n	800ab1a <driver_setup+0x4a>
            GPIO_Init.Pin = 1 << outputpin[i].pin;
 800ab30:	4b60      	ldr	r3, [pc, #384]	@ (800acb4 <driver_setup+0x1e4>)
 800ab32:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ab36:	7a19      	ldrb	r1, [r3, #8]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	408a      	lsls	r2, r1
 800ab3c:	9203      	str	r2, [sp, #12]
            GPIO_Init.Mode = outputpin[i].mode.open_drain ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800ab3e:	7c1b      	ldrb	r3, [r3, #16]
 800ab40:	f013 0f04 	tst.w	r3, #4
 800ab44:	d0d6      	beq.n	800aaf4 <driver_setup+0x24>
 800ab46:	2311      	movs	r3, #17
 800ab48:	e7d5      	b.n	800aaf6 <driver_setup+0x26>
        }
    }

    hal.delay_ms(100, NULL);
 800ab4a:	4b5c      	ldr	r3, [pc, #368]	@ (800acbc <driver_setup+0x1ec>)
 800ab4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab4e:	2100      	movs	r1, #0
 800ab50:	2064      	movs	r0, #100	@ 0x64
 800ab52:	4798      	blx	r3

    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800ab54:	2400      	movs	r4, #0
 800ab56:	e014      	b.n	800ab82 <driver_setup+0xb2>
              outputpin[i].group == PinGroup_AuxOutputAnalog ||
               outputpin[i].id == Output_SpindlePWM ||
                outputpin[i].id == Output_Spindle1PWM)) {

            GPIO_Init.Pin = 1 << outputpin[i].pin;
            GPIO_Init.Mode = outputpin[i].mode.open_drain ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800ab58:	2001      	movs	r0, #1
 800ab5a:	e033      	b.n	800abc4 <driver_setup+0xf4>

            if(outputpin[i].group == PinGroup_MotorChipSelect ||
                outputpin[i].group == PinGroup_MotorUART ||
                 outputpin[i].id == Output_SPICS ||
                  outputpin[i].group == PinGroup_StepperEnable)
                outputpin[i].port->ODR |= GPIO_Init.Pin;
 800ab5c:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800ab60:	4b54      	ldr	r3, [pc, #336]	@ (800acb4 <driver_setup+0x1e4>)
 800ab62:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	695a      	ldr	r2, [r3, #20]
 800ab6a:	4311      	orrs	r1, r2
 800ab6c:	6159      	str	r1, [r3, #20]

            HAL_GPIO_Init(outputpin[i].port, &GPIO_Init);
 800ab6e:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800ab72:	4b50      	ldr	r3, [pc, #320]	@ (800acb4 <driver_setup+0x1e4>)
 800ab74:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ab78:	a903      	add	r1, sp, #12
 800ab7a:	6858      	ldr	r0, [r3, #4]
 800ab7c:	f7fe fc46 	bl	800940c <HAL_GPIO_Init>
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800ab80:	3401      	adds	r4, #1
 800ab82:	2c07      	cmp	r4, #7
 800ab84:	d828      	bhi.n	800abd8 <driver_setup+0x108>
        if(!(outputpin[i].group == PinGroup_StepperPower ||
 800ab86:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800ab8a:	4b4a      	ldr	r3, [pc, #296]	@ (800acb4 <driver_setup+0x1e4>)
 800ab8c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	2b05      	cmp	r3, #5
 800ab94:	d0f4      	beq.n	800ab80 <driver_setup+0xb0>
 800ab96:	2b0b      	cmp	r3, #11
 800ab98:	d0f2      	beq.n	800ab80 <driver_setup+0xb0>
               outputpin[i].id == Output_SpindlePWM ||
 800ab9a:	4946      	ldr	r1, [pc, #280]	@ (800acb4 <driver_setup+0x1e4>)
 800ab9c:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
              outputpin[i].group == PinGroup_AuxOutputAnalog ||
 800aba0:	2a71      	cmp	r2, #113	@ 0x71
 800aba2:	d0ed      	beq.n	800ab80 <driver_setup+0xb0>
        if(!(outputpin[i].group == PinGroup_StepperPower ||
 800aba4:	2a74      	cmp	r2, #116	@ 0x74
 800aba6:	d0eb      	beq.n	800ab80 <driver_setup+0xb0>
            GPIO_Init.Pin = 1 << outputpin[i].pin;
 800aba8:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 800abac:	4841      	ldr	r0, [pc, #260]	@ (800acb4 <driver_setup+0x1e4>)
 800abae:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800abb2:	7a06      	ldrb	r6, [r0, #8]
 800abb4:	2101      	movs	r1, #1
 800abb6:	40b1      	lsls	r1, r6
 800abb8:	9103      	str	r1, [sp, #12]
            GPIO_Init.Mode = outputpin[i].mode.open_drain ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800abba:	7c00      	ldrb	r0, [r0, #16]
 800abbc:	f010 0f04 	tst.w	r0, #4
 800abc0:	d0ca      	beq.n	800ab58 <driver_setup+0x88>
 800abc2:	2011      	movs	r0, #17
 800abc4:	9004      	str	r0, [sp, #16]
            if(outputpin[i].group == PinGroup_MotorChipSelect ||
 800abc6:	f1a3 000d 	sub.w	r0, r3, #13
 800abca:	2801      	cmp	r0, #1
 800abcc:	d9c6      	bls.n	800ab5c <driver_setup+0x8c>
                outputpin[i].group == PinGroup_MotorUART ||
 800abce:	2a95      	cmp	r2, #149	@ 0x95
 800abd0:	d0c4      	beq.n	800ab5c <driver_setup+0x8c>
                 outputpin[i].id == Output_SPICS ||
 800abd2:	2b06      	cmp	r3, #6
 800abd4:	d1cb      	bne.n	800ab6e <driver_setup+0x9e>
 800abd6:	e7c1      	b.n	800ab5c <driver_setup+0x8c>
        }
    }

    GPIO_Init.Mode = GPIO_MODE_OUTPUT_PP;
 800abd8:	2301      	movs	r3, #1
 800abda:	9304      	str	r3, [sp, #16]

 // Stepper init

    STEPPER_TIMER_CLKEN();
 800abdc:	2600      	movs	r6, #0
 800abde:	9601      	str	r6, [sp, #4]
 800abe0:	4c37      	ldr	r4, [pc, #220]	@ (800acc0 <driver_setup+0x1f0>)
 800abe2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800abe4:	f043 0308 	orr.w	r3, r3, #8
 800abe8:	6423      	str	r3, [r4, #64]	@ 0x40
 800abea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800abec:	f003 0308 	and.w	r3, r3, #8
 800abf0:	9301      	str	r3, [sp, #4]
 800abf2:	9b01      	ldr	r3, [sp, #4]
    STEPPER_TIMER->CR1 &= ~TIM_CR1_CEN;
 800abf4:	4b33      	ldr	r3, [pc, #204]	@ (800acc4 <driver_setup+0x1f4>)
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	f022 0201 	bic.w	r2, r2, #1
 800abfc:	601a      	str	r2, [r3, #0]
    STEPPER_TIMER->SR &= ~TIM_SR_UIF;
 800abfe:	691a      	ldr	r2, [r3, #16]
 800ac00:	f022 0201 	bic.w	r2, r2, #1
 800ac04:	611a      	str	r2, [r3, #16]
    STEPPER_TIMER->PSC = STEPPER_TIMER_DIV - 1;
 800ac06:	2203      	movs	r2, #3
 800ac08:	629a      	str	r2, [r3, #40]	@ 0x28
    STEPPER_TIMER->CNT = 0;
 800ac0a:	625e      	str	r6, [r3, #36]	@ 0x24
    STEPPER_TIMER->CR1 |= TIM_CR1_DIR;
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	f042 0210 	orr.w	r2, r2, #16
 800ac12:	601a      	str	r2, [r3, #0]
    STEPPER_TIMER->DIER |= TIM_DIER_UIE;
 800ac14:	68da      	ldr	r2, [r3, #12]
 800ac16:	f042 0201 	orr.w	r2, r2, #1
 800ac1a:	60da      	str	r2, [r3, #12]

    HAL_NVIC_SetPriority(STEPPER_TIMER_IRQn, 0, 2);
 800ac1c:	2202      	movs	r2, #2
 800ac1e:	4631      	mov	r1, r6
 800ac20:	2032      	movs	r0, #50	@ 0x32
 800ac22:	f7fe f9e9 	bl	8008ff8 <HAL_NVIC_SetPriority>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ac26:	4b28      	ldr	r3, [pc, #160]	@ (800acc8 <driver_setup+0x1f8>)
 800ac28:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ac2c:	605a      	str	r2, [r3, #4]
    NVIC_EnableIRQ(STEPPER_TIMER_IRQn);

 // Single-shot 100 ns per tick

    PULSE_TIMER_CLKEN();
 800ac2e:	9602      	str	r6, [sp, #8]
 800ac30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac32:	f043 0304 	orr.w	r3, r3, #4
 800ac36:	6423      	str	r3, [r4, #64]	@ 0x40
 800ac38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac3a:	f003 0304 	and.w	r3, r3, #4
 800ac3e:	9302      	str	r3, [sp, #8]
 800ac40:	9b02      	ldr	r3, [sp, #8]
    PULSE_TIMER->CR1 |= TIM_CR1_OPM|TIM_CR1_DIR|TIM_CR1_CKD_1|TIM_CR1_ARPE|TIM_CR1_URS;
 800ac42:	4a22      	ldr	r2, [pc, #136]	@ (800accc <driver_setup+0x1fc>)
 800ac44:	6813      	ldr	r3, [r2, #0]
 800ac46:	f443 7327 	orr.w	r3, r3, #668	@ 0x29c
 800ac4a:	6013      	str	r3, [r2, #0]
    PULSE_TIMER->PSC = (HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock_cfg.APB1CLKDivider) / 10000000UL) - 1;
 800ac4c:	f7fe ffe0 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 800ac50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac52:	bb63      	cbnz	r3, 800acae <driver_setup+0x1de>
 800ac54:	2301      	movs	r3, #1
 800ac56:	fb00 f303 	mul.w	r3, r0, r3
 800ac5a:	4a1d      	ldr	r2, [pc, #116]	@ (800acd0 <driver_setup+0x200>)
 800ac5c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac60:	0d9b      	lsrs	r3, r3, #22
 800ac62:	3b01      	subs	r3, #1
 800ac64:	4a19      	ldr	r2, [pc, #100]	@ (800accc <driver_setup+0x1fc>)
 800ac66:	6293      	str	r3, [r2, #40]	@ 0x28
    PULSE_TIMER->SR &= ~(TIM_SR_UIF|TIM_SR_CC1IF);
 800ac68:	6913      	ldr	r3, [r2, #16]
 800ac6a:	f023 0303 	bic.w	r3, r3, #3
 800ac6e:	6113      	str	r3, [r2, #16]
    PULSE_TIMER->CNT = 0;
 800ac70:	2400      	movs	r4, #0
 800ac72:	6254      	str	r4, [r2, #36]	@ 0x24
    PULSE_TIMER->DIER |= TIM_DIER_UIE;
 800ac74:	68d3      	ldr	r3, [r2, #12]
 800ac76:	f043 0301 	orr.w	r3, r3, #1
 800ac7a:	60d3      	str	r3, [r2, #12]

    HAL_NVIC_SetPriority(PULSE_TIMER_IRQn, 0, 1);
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	4621      	mov	r1, r4
 800ac80:	201e      	movs	r0, #30
 800ac82:	f7fe f9b9 	bl	8008ff8 <HAL_NVIC_SetPriority>
 800ac86:	4b10      	ldr	r3, [pc, #64]	@ (800acc8 <driver_setup+0x1f8>)
 800ac88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800ac8c:	601a      	str	r2, [r3, #0]

    hal.periph_port.register_pin(&ssp);

#endif // SPINDLE_ENCODER_ENABLE

    IOInitDone = settings->version == 22;
 800ac8e:	682b      	ldr	r3, [r5, #0]
 800ac90:	2b16      	cmp	r3, #22
 800ac92:	bf14      	ite	ne
 800ac94:	2300      	movne	r3, #0
 800ac96:	2301      	moveq	r3, #1
 800ac98:	4e0e      	ldr	r6, [pc, #56]	@ (800acd4 <driver_setup+0x204>)
 800ac9a:	7033      	strb	r3, [r6, #0]

    hal.settings_changed(settings, (settings_changed_flags_t){0});
 800ac9c:	4b07      	ldr	r3, [pc, #28]	@ (800acbc <driver_setup+0x1ec>)
 800ac9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aca2:	4621      	mov	r1, r4
 800aca4:	4628      	mov	r0, r5
 800aca6:	4798      	blx	r3
    if(qei_enable)
        encoder_start(&qei.encoder);
#endif

    return IOInitDone;
}
 800aca8:	7830      	ldrb	r0, [r6, #0]
 800acaa:	b00e      	add	sp, #56	@ 0x38
 800acac:	bd70      	pop	{r4, r5, r6, pc}
    PULSE_TIMER->PSC = (HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock_cfg.APB1CLKDivider) / 10000000UL) - 1;
 800acae:	2302      	movs	r3, #2
 800acb0:	e7d1      	b.n	800ac56 <driver_setup+0x186>
 800acb2:	bf00      	nop
 800acb4:	20000014 	.word	0x20000014
 800acb8:	c2100014 	.word	0xc2100014
 800acbc:	200011ac 	.word	0x200011ac
 800acc0:	40023800 	.word	0x40023800
 800acc4:	40000c00 	.word	0x40000c00
 800acc8:	e000e100 	.word	0xe000e100
 800accc:	40000800 	.word	0x40000800
 800acd0:	6b5fca6b 	.word	0x6b5fca6b
 800acd4:	20000738 	.word	0x20000738

0800acd8 <driver_delay>:
{
 800acd8:	b510      	push	{r4, lr}
    if((delay.ms = ms) > 0) {
 800acda:	4b0b      	ldr	r3, [pc, #44]	@ (800ad08 <driver_delay+0x30>)
 800acdc:	6018      	str	r0, [r3, #0]
 800acde:	b160      	cbz	r0, 800acfa <driver_delay+0x22>
        if(!(delay.callback = callback)) {
 800ace0:	6059      	str	r1, [r3, #4]
 800ace2:	b129      	cbz	r1, 800acf0 <driver_delay+0x18>
}
 800ace4:	bd10      	pop	{r4, pc}
                grbl.on_execute_delay(state_get());
 800ace6:	4b09      	ldr	r3, [pc, #36]	@ (800ad0c <driver_delay+0x34>)
 800ace8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800acea:	f013 fd0b 	bl	801e704 <state_get>
 800acee:	47a0      	blx	r4
            while(delay.ms)
 800acf0:	4b05      	ldr	r3, [pc, #20]	@ (800ad08 <driver_delay+0x30>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1f6      	bne.n	800ace6 <driver_delay+0xe>
 800acf8:	e7f4      	b.n	800ace4 <driver_delay+0xc>
        delay.callback = NULL;
 800acfa:	4b03      	ldr	r3, [pc, #12]	@ (800ad08 <driver_delay+0x30>)
 800acfc:	2200      	movs	r2, #0
 800acfe:	605a      	str	r2, [r3, #4]
        if(callback)
 800ad00:	2900      	cmp	r1, #0
 800ad02:	d0ef      	beq.n	800ace4 <driver_delay+0xc>
            callback();
 800ad04:	4788      	blx	r1
}
 800ad06:	e7ed      	b.n	800ace4 <driver_delay+0xc>
 800ad08:	2000000c 	.word	0x2000000c
 800ad0c:	20001394 	.word	0x20001394

0800ad10 <get_free_mem>:
}

#endif

static uint32_t get_free_mem (void)
{
 800ad10:	b510      	push	{r4, lr}
 800ad12:	b08a      	sub	sp, #40	@ 0x28
    extern uint8_t _end; /* Symbol defined in the linker script */
    extern uint8_t _estack; /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;

    return stack_limit - (uint32_t)&_end - mallinfo().uordblks;
 800ad14:	4c05      	ldr	r4, [pc, #20]	@ (800ad2c <get_free_mem+0x1c>)
 800ad16:	4668      	mov	r0, sp
 800ad18:	f017 fba6 	bl	8022468 <mallinfo>
 800ad1c:	4b04      	ldr	r3, [pc, #16]	@ (800ad30 <get_free_mem+0x20>)
 800ad1e:	9a07      	ldr	r2, [sp, #28]
 800ad20:	4413      	add	r3, r2
}
 800ad22:	4804      	ldr	r0, [pc, #16]	@ (800ad34 <get_free_mem+0x24>)
 800ad24:	1a20      	subs	r0, r4, r0
 800ad26:	1ac0      	subs	r0, r0, r3
 800ad28:	b00a      	add	sp, #40	@ 0x28
 800ad2a:	bd10      	pop	{r4, pc}
 800ad2c:	20020000 	.word	0x20020000
 800ad30:	00001000 	.word	0x00001000
 800ad34:	20002960 	.word	0x20002960

0800ad38 <core_pin_debounce>:
#endif

#endif // SPINDLE_ENCODER_ENABLE

void core_pin_debounce (void *pin)
{
 800ad38:	b530      	push	{r4, r5, lr}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	4604      	mov	r4, r0
    input_signal_t *input = (input_signal_t *)pin;

    if(input->mode.irq_mode == IRQ_Mode_Change ||
 800ad3e:	8883      	ldrh	r3, [r0, #4]
 800ad40:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 800ad44:	2b80      	cmp	r3, #128	@ 0x80
 800ad46:	d015      	beq.n	800ad74 <core_pin_debounce+0x3c>
         DIGITAL_IN(input->port, input->pin) == (input->mode.irq_mode == IRQ_Mode_Falling ? 0 : 1)) {
 800ad48:	68c2      	ldr	r2, [r0, #12]
 800ad4a:	f102 4242 	add.w	r2, r2, #3254779904	@ 0xc2000000
 800ad4e:	f102 1210 	add.w	r2, r2, #1048592	@ 0x100010
 800ad52:	0152      	lsls	r2, r2, #5
 800ad54:	7981      	ldrb	r1, [r0, #6]
 800ad56:	f812 2021 	ldrb.w	r2, [r2, r1, lsl #2]
 800ad5a:	b2d2      	uxtb	r2, r2
 800ad5c:	3b40      	subs	r3, #64	@ 0x40
 800ad5e:	bf18      	it	ne
 800ad60:	2301      	movne	r3, #1
    if(input->mode.irq_mode == IRQ_Mode_Change ||
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d006      	beq.n	800ad74 <core_pin_debounce+0x3c>
    }

#ifdef Z_LIMIT_POLL
    if(input != z_limit_pin)
#endif
    EXTI->IMR |= input->bit; // Reenable pin interrupt
 800ad66:	4a10      	ldr	r2, [pc, #64]	@ (800ada8 <core_pin_debounce+0x70>)
 800ad68:	6813      	ldr	r3, [r2, #0]
 800ad6a:	68a1      	ldr	r1, [r4, #8]
 800ad6c:	430b      	orrs	r3, r1
 800ad6e:	6013      	str	r3, [r2, #0]
}
 800ad70:	b003      	add	sp, #12
 800ad72:	bd30      	pop	{r4, r5, pc}
        if(input->group & (PinGroup_Control)) {
 800ad74:	6923      	ldr	r3, [r4, #16]
 800ad76:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800ad7a:	d004      	beq.n	800ad86 <core_pin_debounce+0x4e>
            hal.control.interrupt_callback(systemGetState());
 800ad7c:	4b0b      	ldr	r3, [pc, #44]	@ (800adac <core_pin_debounce+0x74>)
 800ad7e:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 800ad80:	f7ff f94a 	bl	800a018 <systemGetState>
 800ad84:	47a8      	blx	r5
        if(input->group & (PinGroup_Limit|PinGroup_LimitMax)) {
 800ad86:	6923      	ldr	r3, [r4, #16]
 800ad88:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800ad8c:	d0eb      	beq.n	800ad66 <core_pin_debounce+0x2e>
            limit_signals_t state = limitsGetState();
 800ad8e:	f7ff f901 	bl	8009f94 <limitsGetState>
 800ad92:	9001      	str	r0, [sp, #4]
            if(limit_signals_merge(state).value) //TODO: add check for limit switches having same state as when limit_isr were invoked?
 800ad94:	f007 fe50 	bl	8012a38 <limit_signals_merge>
 800ad98:	b2c0      	uxtb	r0, r0
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	d0e3      	beq.n	800ad66 <core_pin_debounce+0x2e>
                hal.limits.interrupt_callback(state);
 800ad9e:	4b03      	ldr	r3, [pc, #12]	@ (800adac <core_pin_debounce+0x74>)
 800ada0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ada2:	9801      	ldr	r0, [sp, #4]
 800ada4:	4798      	blx	r3
 800ada6:	e7de      	b.n	800ad66 <core_pin_debounce+0x2e>
 800ada8:	40013c00 	.word	0x40013c00
 800adac:	200011ac 	.word	0x200011ac

0800adb0 <core_pin_irq>:

static inline void core_pin_irq (uint32_t bit)
{
 800adb0:	b510      	push	{r4, lr}
    input_signal_t *input;

    if((input = pin_irq[__builtin_ffs(bit) - 1])) {
 800adb2:	fa90 f3a0 	rbit	r3, r0
 800adb6:	fab3 f383 	clz	r3, r3
 800adba:	b908      	cbnz	r0, 800adc0 <core_pin_irq+0x10>
 800adbc:	f04f 33ff 	mov.w	r3, #4294967295
 800adc0:	4a0c      	ldr	r2, [pc, #48]	@ (800adf4 <core_pin_irq+0x44>)
 800adc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800adc6:	b134      	cbz	r4, 800add6 <core_pin_irq+0x26>
        if(input->mode.debounce && task_add_delayed(core_pin_debounce, input, 40)) {
 800adc8:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	db03      	blt.n	800add8 <core_pin_irq+0x28>
            EXTI->IMR &= ~input->bit; // Disable pin interrupt
        } else
            core_pin_debounce(input);
 800add0:	4620      	mov	r0, r4
 800add2:	f7ff ffb1 	bl	800ad38 <core_pin_debounce>
    }
}
 800add6:	bd10      	pop	{r4, pc}
        if(input->mode.debounce && task_add_delayed(core_pin_debounce, input, 40)) {
 800add8:	2228      	movs	r2, #40	@ 0x28
 800adda:	4621      	mov	r1, r4
 800addc:	4806      	ldr	r0, [pc, #24]	@ (800adf8 <core_pin_irq+0x48>)
 800adde:	f006 f995 	bl	801110c <task_add_delayed>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	d0f4      	beq.n	800add0 <core_pin_irq+0x20>
            EXTI->IMR &= ~input->bit; // Disable pin interrupt
 800ade6:	4a05      	ldr	r2, [pc, #20]	@ (800adfc <core_pin_irq+0x4c>)
 800ade8:	6813      	ldr	r3, [r2, #0]
 800adea:	68a1      	ldr	r1, [r4, #8]
 800adec:	ea23 0301 	bic.w	r3, r3, r1
 800adf0:	6013      	str	r3, [r2, #0]
 800adf2:	e7f0      	b.n	800add6 <core_pin_irq+0x26>
 800adf4:	200006ec 	.word	0x200006ec
 800adf8:	0800ad39 	.word	0x0800ad39
 800adfc:	40013c00 	.word	0x40013c00

0800ae00 <gpio_irq_enable>:
{
 800ae00:	b410      	push	{r4}
    if(irq_mode == IRQ_Mode_Rising) {
 800ae02:	2901      	cmp	r1, #1
 800ae04:	d00a      	beq.n	800ae1c <gpio_irq_enable+0x1c>
    } else if(irq_mode == IRQ_Mode_Falling) {
 800ae06:	2902      	cmp	r1, #2
 800ae08:	d01b      	beq.n	800ae42 <gpio_irq_enable+0x42>
    } else if(irq_mode == IRQ_Mode_Change) {
 800ae0a:	2904      	cmp	r1, #4
 800ae0c:	d024      	beq.n	800ae58 <gpio_irq_enable+0x58>
        EXTI->IMR &= ~input->bit;   // Disable pin interrupt
 800ae0e:	4a17      	ldr	r2, [pc, #92]	@ (800ae6c <gpio_irq_enable+0x6c>)
 800ae10:	6813      	ldr	r3, [r2, #0]
 800ae12:	6884      	ldr	r4, [r0, #8]
 800ae14:	ea23 0304 	bic.w	r3, r3, r4
 800ae18:	6013      	str	r3, [r2, #0]
 800ae1a:	e009      	b.n	800ae30 <gpio_irq_enable+0x30>
        EXTI->RTSR |= input->bit;
 800ae1c:	4b13      	ldr	r3, [pc, #76]	@ (800ae6c <gpio_irq_enable+0x6c>)
 800ae1e:	689a      	ldr	r2, [r3, #8]
 800ae20:	6884      	ldr	r4, [r0, #8]
 800ae22:	4322      	orrs	r2, r4
 800ae24:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~input->bit;
 800ae26:	68da      	ldr	r2, [r3, #12]
 800ae28:	6884      	ldr	r4, [r0, #8]
 800ae2a:	ea22 0204 	bic.w	r2, r2, r4
 800ae2e:	60da      	str	r2, [r3, #12]
    if(irq_mode != IRQ_Mode_None)
 800ae30:	b121      	cbz	r1, 800ae3c <gpio_irq_enable+0x3c>
        EXTI->IMR |= input->bit;    // Enable pin interrupt
 800ae32:	4a0e      	ldr	r2, [pc, #56]	@ (800ae6c <gpio_irq_enable+0x6c>)
 800ae34:	6813      	ldr	r3, [r2, #0]
 800ae36:	6881      	ldr	r1, [r0, #8]
 800ae38:	430b      	orrs	r3, r1
 800ae3a:	6013      	str	r3, [r2, #0]
}
 800ae3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae40:	4770      	bx	lr
        EXTI->RTSR &= ~input->bit;
 800ae42:	4b0a      	ldr	r3, [pc, #40]	@ (800ae6c <gpio_irq_enable+0x6c>)
 800ae44:	689a      	ldr	r2, [r3, #8]
 800ae46:	6884      	ldr	r4, [r0, #8]
 800ae48:	ea22 0204 	bic.w	r2, r2, r4
 800ae4c:	609a      	str	r2, [r3, #8]
        EXTI->FTSR |= input->bit;
 800ae4e:	68da      	ldr	r2, [r3, #12]
 800ae50:	6884      	ldr	r4, [r0, #8]
 800ae52:	4322      	orrs	r2, r4
 800ae54:	60da      	str	r2, [r3, #12]
 800ae56:	e7eb      	b.n	800ae30 <gpio_irq_enable+0x30>
        EXTI->RTSR |= input->bit;
 800ae58:	4b04      	ldr	r3, [pc, #16]	@ (800ae6c <gpio_irq_enable+0x6c>)
 800ae5a:	689a      	ldr	r2, [r3, #8]
 800ae5c:	6884      	ldr	r4, [r0, #8]
 800ae5e:	4322      	orrs	r2, r4
 800ae60:	609a      	str	r2, [r3, #8]
        EXTI->FTSR |= input->bit;
 800ae62:	68da      	ldr	r2, [r3, #12]
 800ae64:	6884      	ldr	r4, [r0, #8]
 800ae66:	4322      	orrs	r2, r4
 800ae68:	60da      	str	r2, [r3, #12]
 800ae6a:	e7e1      	b.n	800ae30 <gpio_irq_enable+0x30>
 800ae6c:	40013c00 	.word	0x40013c00

0800ae70 <limitsEnable>:
{
 800ae70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae74:	b082      	sub	sp, #8
 800ae76:	4606      	mov	r6, r0
 800ae78:	4688      	mov	r8, r1
    bool disable = !on;
 800ae7a:	f080 0701 	eor.w	r7, r0, #1
    uint_fast8_t idx = limit_inputs.n_pins;
 800ae7e:	4b1c      	ldr	r3, [pc, #112]	@ (800aef0 <limitsEnable+0x80>)
 800ae80:	781c      	ldrb	r4, [r3, #0]
    limit_signals_t homing_source = xbar_get_homing_source_from_cycle(homing_cycle);
 800ae82:	4608      	mov	r0, r1
 800ae84:	f001 fcbe 	bl	800c804 <xbar_get_homing_source_from_cycle>
 800ae88:	9001      	str	r0, [sp, #4]
    while(idx--) {
 800ae8a:	e019      	b.n	800aec0 <limitsEnable+0x50>
            pin = xbar_fn_to_axismask(limit->id);
 800ae8c:	5c50      	ldrb	r0, [r2, r1]
 800ae8e:	f001 fc5f 	bl	800c750 <xbar_fn_to_axismask>
            disable = limit->group == PinGroup_Limit ? (pin.mask & homing_source.min.mask) : (pin.mask & homing_source.max.mask);
 800ae92:	6923      	ldr	r3, [r4, #16]
 800ae94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae98:	d006      	beq.n	800aea8 <limitsEnable+0x38>
 800ae9a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ae9e:	4203      	tst	r3, r0
 800aea0:	bf14      	ite	ne
 800aea2:	2701      	movne	r7, #1
 800aea4:	2700      	moveq	r7, #0
 800aea6:	e019      	b.n	800aedc <limitsEnable+0x6c>
 800aea8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aeac:	4203      	tst	r3, r0
 800aeae:	bf14      	ite	ne
 800aeb0:	2701      	movne	r7, #1
 800aeb2:	2700      	moveq	r7, #0
 800aeb4:	e012      	b.n	800aedc <limitsEnable+0x6c>
        gpio_irq_enable(limit, disable ? IRQ_Mode_None : limit->mode.irq_mode);
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	4620      	mov	r0, r4
 800aeba:	f7ff ffa1 	bl	800ae00 <gpio_irq_enable>
    while(idx--) {
 800aebe:	462c      	mov	r4, r5
 800aec0:	1e65      	subs	r5, r4, #1
 800aec2:	b18c      	cbz	r4, 800aee8 <limitsEnable+0x78>
        limit = &limit_inputs.pins.inputs[idx];
 800aec4:	4b0a      	ldr	r3, [pc, #40]	@ (800aef0 <limitsEnable+0x80>)
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800aecc:	0099      	lsls	r1, r3, #2
 800aece:	eb02 0483 	add.w	r4, r2, r3, lsl #2
        if(on && homing_cycle.mask) {
 800aed2:	b11e      	cbz	r6, 800aedc <limitsEnable+0x6c>
 800aed4:	fa5f f388 	uxtb.w	r3, r8
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1d7      	bne.n	800ae8c <limitsEnable+0x1c>
        gpio_irq_enable(limit, disable ? IRQ_Mode_None : limit->mode.irq_mode);
 800aedc:	2f00      	cmp	r7, #0
 800aede:	d1ea      	bne.n	800aeb6 <limitsEnable+0x46>
 800aee0:	88a1      	ldrh	r1, [r4, #4]
 800aee2:	f3c1 1144 	ubfx	r1, r1, #5, #5
 800aee6:	e7e7      	b.n	800aeb8 <limitsEnable+0x48>
}
 800aee8:	b002      	add	sp, #8
 800aeea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeee:	bf00      	nop
 800aef0:	20000730 	.word	0x20000730

0800aef4 <driver_init>:
{
 800aef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aef6:	b08d      	sub	sp, #52	@ 0x34
    HAL_RCC_GetClockConfig(&clock_cfg, &latency);
 800aef8:	a907      	add	r1, sp, #28
 800aefa:	a802      	add	r0, sp, #8
 800aefc:	f7fe fe98 	bl	8009c30 <HAL_RCC_GetClockConfig>
    hal.info = "STM32F407";
 800af00:	4c9c      	ldr	r4, [pc, #624]	@ (800b174 <driver_init+0x280>)
 800af02:	4b9d      	ldr	r3, [pc, #628]	@ (800b178 <driver_init+0x284>)
 800af04:	6063      	str	r3, [r4, #4]
    hal.driver_version = "240624";
 800af06:	4b9d      	ldr	r3, [pc, #628]	@ (800b17c <driver_init+0x288>)
 800af08:	60a3      	str	r3, [r4, #8]
    hal.driver_url = GRBL_URL "/STM32F4xx";
 800af0a:	4b9d      	ldr	r3, [pc, #628]	@ (800b180 <driver_init+0x28c>)
 800af0c:	6123      	str	r3, [r4, #16]
    hal.board = BOARD_NAME;
 800af0e:	4b9d      	ldr	r3, [pc, #628]	@ (800b184 <driver_init+0x290>)
 800af10:	6163      	str	r3, [r4, #20]
    hal.driver_setup = driver_setup;
 800af12:	4b9d      	ldr	r3, [pc, #628]	@ (800b188 <driver_init+0x294>)
 800af14:	6363      	str	r3, [r4, #52]	@ 0x34
    hal.f_mcu = HAL_RCC_GetHCLKFreq() / 1000000UL;
 800af16:	f7fe fe75 	bl	8009c04 <HAL_RCC_GetHCLKFreq>
 800af1a:	4b9c      	ldr	r3, [pc, #624]	@ (800b18c <driver_init+0x298>)
 800af1c:	fba3 2300 	umull	r2, r3, r3, r0
 800af20:	0c9b      	lsrs	r3, r3, #18
 800af22:	6223      	str	r3, [r4, #32]
    hal.f_step_timer = HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock_cfg.APB1CLKDivider) / STEPPER_TIMER_DIV;
 800af24:	f7fe fe74 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 800af28:	9b05      	ldr	r3, [sp, #20]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d154      	bne.n	800afd8 <driver_init+0xe4>
 800af2e:	2301      	movs	r3, #1
 800af30:	fb03 f200 	mul.w	r2, r3, r0
 800af34:	0892      	lsrs	r2, r2, #2
 800af36:	4b8f      	ldr	r3, [pc, #572]	@ (800b174 <driver_init+0x280>)
 800af38:	61da      	str	r2, [r3, #28]
    hal.rx_buffer_size = RX_BUFFER_SIZE;
 800af3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800af3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hal.get_free_mem = get_free_mem;
 800af40:	4a93      	ldr	r2, [pc, #588]	@ (800b190 <driver_init+0x29c>)
 800af42:	631a      	str	r2, [r3, #48]	@ 0x30
    hal.delay_ms = &driver_delay;
 800af44:	4a93      	ldr	r2, [pc, #588]	@ (800b194 <driver_init+0x2a0>)
 800af46:	639a      	str	r2, [r3, #56]	@ 0x38
    hal.settings_changed = settings_changed;
 800af48:	4a93      	ldr	r2, [pc, #588]	@ (800b198 <driver_init+0x2a4>)
 800af4a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    cycles2us_factor = 0xFFFFFFFFU / hal.f_mcu;
 800af4e:	6a19      	ldr	r1, [r3, #32]
 800af50:	f04f 32ff 	mov.w	r2, #4294967295
 800af54:	fbb2 f2f1 	udiv	r2, r2, r1
 800af58:	4990      	ldr	r1, [pc, #576]	@ (800b19c <driver_init+0x2a8>)
 800af5a:	600a      	str	r2, [r1, #0]
    hal.stepper.wake_up = stepperWakeUp;
 800af5c:	4a90      	ldr	r2, [pc, #576]	@ (800b1a0 <driver_init+0x2ac>)
 800af5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hal.stepper.go_idle = stepperGoIdle;
 800af62:	4a90      	ldr	r2, [pc, #576]	@ (800b1a4 <driver_init+0x2b0>)
 800af64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hal.stepper.enable = stepperEnable;
 800af68:	4a8f      	ldr	r2, [pc, #572]	@ (800b1a8 <driver_init+0x2b4>)
 800af6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    hal.stepper.cycles_per_tick = stepperCyclesPerTick;
 800af6e:	4a8f      	ldr	r2, [pc, #572]	@ (800b1ac <driver_init+0x2b8>)
 800af70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    hal.stepper.pulse_start = stepperPulseStart;
 800af74:	4a8e      	ldr	r2, [pc, #568]	@ (800b1b0 <driver_init+0x2bc>)
 800af76:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hal.stepper.motor_iterator = motor_iterator;
 800af7a:	4a8e      	ldr	r2, [pc, #568]	@ (800b1b4 <driver_init+0x2c0>)
 800af7c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    hal.limits.enable = limitsEnable;
 800af80:	4a8d      	ldr	r2, [pc, #564]	@ (800b1b8 <driver_init+0x2c4>)
 800af82:	655a      	str	r2, [r3, #84]	@ 0x54
    hal.limits.get_state = limitsGetState;
 800af84:	4a8d      	ldr	r2, [pc, #564]	@ (800b1bc <driver_init+0x2c8>)
 800af86:	659a      	str	r2, [r3, #88]	@ 0x58
    hal.coolant.set_state = coolantSetState;
 800af88:	4a8d      	ldr	r2, [pc, #564]	@ (800b1c0 <driver_init+0x2cc>)
 800af8a:	671a      	str	r2, [r3, #112]	@ 0x70
    hal.coolant.get_state = coolantGetState;
 800af8c:	4a8d      	ldr	r2, [pc, #564]	@ (800b1c4 <driver_init+0x2d0>)
 800af8e:	675a      	str	r2, [r3, #116]	@ 0x74
    hal.control.get_state = systemGetState;
 800af90:	4a8d      	ldr	r2, [pc, #564]	@ (800b1c8 <driver_init+0x2d4>)
 800af92:	669a      	str	r2, [r3, #104]	@ 0x68
    hal.irq_enable = __enable_irq;
 800af94:	4a8d      	ldr	r2, [pc, #564]	@ (800b1cc <driver_init+0x2d8>)
 800af96:	649a      	str	r2, [r3, #72]	@ 0x48
    hal.irq_disable = __disable_irq;
 800af98:	4a8d      	ldr	r2, [pc, #564]	@ (800b1d0 <driver_init+0x2dc>)
 800af9a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hal.set_bits_atomic = bitsSetAtomic;
 800af9c:	4a8d      	ldr	r2, [pc, #564]	@ (800b1d4 <driver_init+0x2e0>)
 800af9e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hal.clear_bits_atomic = bitsClearAtomic;
 800afa0:	4a8d      	ldr	r2, [pc, #564]	@ (800b1d8 <driver_init+0x2e4>)
 800afa2:	641a      	str	r2, [r3, #64]	@ 0x40
    hal.set_value_atomic = valueSetAtomic;
 800afa4:	4a8d      	ldr	r2, [pc, #564]	@ (800b1dc <driver_init+0x2e8>)
 800afa6:	645a      	str	r2, [r3, #68]	@ 0x44
    hal.get_micros = getElapsedMicros;
 800afa8:	4a8d      	ldr	r2, [pc, #564]	@ (800b1e0 <driver_init+0x2ec>)
 800afaa:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
    hal.get_elapsed_ticks = getElapsedTicks;
 800afae:	4a8d      	ldr	r2, [pc, #564]	@ (800b1e4 <driver_init+0x2f0>)
 800afb0:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
    hal.enumerate_pins = enumeratePins;
 800afb4:	4a8c      	ldr	r2, [pc, #560]	@ (800b1e8 <driver_init+0x2f4>)
 800afb6:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
    hal.periph_port.register_pin = registerPeriphPin;
 800afba:	4a8c      	ldr	r2, [pc, #560]	@ (800b1ec <driver_init+0x2f8>)
 800afbc:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
    hal.periph_port.set_pin_description = setPeriphPinDescription;
 800afc0:	4a8b      	ldr	r2, [pc, #556]	@ (800b1f0 <driver_init+0x2fc>)
 800afc2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    serialRegisterStreams();
 800afc6:	f001 fa33 	bl	800c430 <serialRegisterStreams>
    if(!stream_connect_instance(SERIAL_STREAM, BAUD_RATE))
 800afca:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800afce:	2000      	movs	r0, #0
 800afd0:	f015 fbba 	bl	8020748 <stream_connect_instance>
 800afd4:	b910      	cbnz	r0, 800afdc <driver_init+0xe8>
        while(true); // Cannot boot if no communication channel is available!
 800afd6:	e7fe      	b.n	800afd6 <driver_init+0xe2>
    hal.f_step_timer = HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock_cfg.APB1CLKDivider) / STEPPER_TIMER_DIV;
 800afd8:	2302      	movs	r3, #2
 800afda:	e7a9      	b.n	800af30 <driver_init+0x3c>
    hal.nvs.type = NVS_Flash;
 800afdc:	4b65      	ldr	r3, [pc, #404]	@ (800b174 <driver_init+0x280>)
 800afde:	2203      	movs	r2, #3
 800afe0:	f883 2174 	strb.w	r2, [r3, #372]	@ 0x174
    hal.nvs.memcpy_from_flash = memcpy_from_flash;
 800afe4:	4a83      	ldr	r2, [pc, #524]	@ (800b1f4 <driver_init+0x300>)
 800afe6:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
    hal.nvs.memcpy_to_flash = memcpy_to_flash;
 800afea:	4a83      	ldr	r2, [pc, #524]	@ (800b1f8 <driver_init+0x304>)
 800afec:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
    hal.signals_cap.reset = Off;
 800aff0:	f893 21dc 	ldrb.w	r2, [r3, #476]	@ 0x1dc
 800aff4:	f36f 0200 	bfc	r2, #0, #1
 800aff8:	f883 21dc 	strb.w	r2, [r3, #476]	@ 0x1dc
    hal.signals_cap.feed_hold = Off;
 800affc:	b2d2      	uxtb	r2, r2
 800affe:	f36f 0241 	bfc	r2, #1, #1
 800b002:	f883 21dc 	strb.w	r2, [r3, #476]	@ 0x1dc
    hal.signals_cap.cycle_start = Off;
 800b006:	b2d2      	uxtb	r2, r2
 800b008:	f36f 0282 	bfc	r2, #2, #1
 800b00c:	f883 21dc 	strb.w	r2, [r3, #476]	@ 0x1dc

static inline limit_signals_t get_limits_cap (void)
{
    limit_signals_t limits = {0};
 800b010:	2400      	movs	r4, #0
 800b012:	9401      	str	r4, [sp, #4]

#if X_LIMIT_BIT
    limits.min.x = On;
 800b014:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b018:	f042 0201 	orr.w	r2, r2, #1
 800b01c:	f88d 2004 	strb.w	r2, [sp, #4]
#endif
#if Y_LIMIT_BIT
    limits.min.y = On;
 800b020:	b2d2      	uxtb	r2, r2
 800b022:	f042 0202 	orr.w	r2, r2, #2
 800b026:	f88d 2004 	strb.w	r2, [sp, #4]
#endif
#if Z_LIMIT_BIT
    limits.min.z = On;
 800b02a:	b2d2      	uxtb	r2, r2
 800b02c:	f042 0204 	orr.w	r2, r2, #4
 800b030:	f88d 2004 	strb.w	r2, [sp, #4]
#endif
#if V_LIMIT_BIT_MAX
    limits.max.v = On;
#endif

    return limits;
 800b034:	9a01      	ldr	r2, [sp, #4]
 800b036:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b038:	920a      	str	r2, [sp, #40]	@ 0x28
    hal.limits_cap = get_limits_cap();
 800b03a:	f8c3 21de 	str.w	r2, [r3, #478]	@ 0x1de
}

static inline home_signals_t get_home_cap (void)
{
    home_signals_t home = {0};
 800b03e:	f8ad 4004 	strh.w	r4, [sp, #4]
    home.b.z = On;
#endif

#endif // HOME_MASK

    return home;
 800b042:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
 800b046:	f8ad 4020 	strh.w	r4, [sp, #32]
    hal.home_cap = get_home_cap();
 800b04a:	f8a3 41e2 	strh.w	r4, [r3, #482]	@ 0x1e2
    hal.coolant_cap.flood = On;
 800b04e:	f893 21e4 	ldrb.w	r2, [r3, #484]	@ 0x1e4
 800b052:	f042 0201 	orr.w	r2, r2, #1
 800b056:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
    hal.coolant_cap.mist = On;
 800b05a:	b2d2      	uxtb	r2, r2
 800b05c:	f042 0202 	orr.w	r2, r2, #2
 800b060:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
    hal.driver_cap.software_debounce = On;
 800b064:	f893 21d8 	ldrb.w	r2, [r3, #472]	@ 0x1d8
 800b068:	f042 0201 	orr.w	r2, r2, #1
 800b06c:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    hal.driver_cap.step_pulse_delay = On;
 800b070:	b2d2      	uxtb	r2, r2
 800b072:	f042 0202 	orr.w	r2, r2, #2
 800b076:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    hal.driver_cap.amass_level = 3;
 800b07a:	b2d2      	uxtb	r2, r2
 800b07c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b080:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    hal.driver_cap.control_pull_up = On;
 800b084:	b2d2      	uxtb	r2, r2
 800b086:	f042 0208 	orr.w	r2, r2, #8
 800b08a:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    hal.driver_cap.limits_pull_up = On;
 800b08e:	b2d2      	uxtb	r2, r2
 800b090:	f042 0204 	orr.w	r2, r2, #4
 800b094:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800b098:	e0d2      	b.n	800b240 <driver_init+0x34c>
            if(aux_digital_in.pins.inputs == NULL)
 800b09a:	4a58      	ldr	r2, [pc, #352]	@ (800b1fc <driver_init+0x308>)
 800b09c:	6852      	ldr	r2, [r2, #4]
 800b09e:	2a00      	cmp	r2, #0
 800b0a0:	d062      	beq.n	800b168 <driver_init+0x274>
            input->user_port = aux_digital_in.n_pins++;
 800b0a2:	4d56      	ldr	r5, [pc, #344]	@ (800b1fc <driver_init+0x308>)
 800b0a4:	782a      	ldrb	r2, [r5, #0]
 800b0a6:	1c56      	adds	r6, r2, #1
 800b0a8:	702e      	strb	r6, [r5, #0]
 800b0aa:	4d55      	ldr	r5, [pc, #340]	@ (800b200 <driver_init+0x30c>)
 800b0ac:	eb04 06c4 	add.w	r6, r4, r4, lsl #3
 800b0b0:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800b0b4:	f88c 2014 	strb.w	r2, [ip, #20]
            input->id = (pin_function_t)(Input_Aux0 + input->user_port);
 800b0b8:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
 800b0bc:	f805 e026 	strb.w	lr, [r5, r6, lsl #2]
            input->mode.pull_mode = PullMode_Up;
 800b0c0:	f89c 5004 	ldrb.w	r5, [ip, #4]
 800b0c4:	2601      	movs	r6, #1
 800b0c6:	f366 05c4 	bfi	r5, r6, #3, #2
 800b0ca:	f88c 5004 	strb.w	r5, [ip, #4]
            input->cap.pull_mode = PullMode_UpDown;
 800b0ce:	f89c e002 	ldrb.w	lr, [ip, #2]
 800b0d2:	f04e 0e18 	orr.w	lr, lr, #24
 800b0d6:	f88c e002 	strb.w	lr, [ip, #2]
            if((input->cap.irq_mode = ((DRIVER_IRQMASK|aux_irq) & input->bit) ? IRQ_Mode_None : IRQ_Mode_Edges) != IRQ_Mode_None) {
 800b0da:	4d4a      	ldr	r5, [pc, #296]	@ (800b204 <driver_init+0x310>)
 800b0dc:	682d      	ldr	r5, [r5, #0]
 800b0de:	f445 56c0 	orr.w	r6, r5, #6144	@ 0x1800
 800b0e2:	4230      	tst	r0, r6
 800b0e4:	d043      	beq.n	800b16e <driver_init+0x27a>
 800b0e6:	2600      	movs	r6, #0
 800b0e8:	eb04 0ec4 	add.w	lr, r4, r4, lsl #3
 800b0ec:	4f44      	ldr	r7, [pc, #272]	@ (800b200 <driver_init+0x30c>)
 800b0ee:	eb07 0c8e 	add.w	ip, r7, lr, lsl #2
 800b0f2:	f8bc e002 	ldrh.w	lr, [ip, #2]
 800b0f6:	f366 1e49 	bfi	lr, r6, #5, #5
 800b0fa:	f8ac e002 	strh.w	lr, [ip, #2]
 800b0fe:	b166      	cbz	r6, 800b11a <driver_init+0x226>
                aux_irq |= input->bit;
 800b100:	4305      	orrs	r5, r0
 800b102:	4e40      	ldr	r6, [pc, #256]	@ (800b204 <driver_init+0x310>)
 800b104:	6035      	str	r5, [r6, #0]
                pin_irq[__builtin_ffs(input->bit) - 1] = input;
 800b106:	fa90 f5a0 	rbit	r5, r0
 800b10a:	fab5 f585 	clz	r5, r5
 800b10e:	b908      	cbnz	r0, 800b114 <driver_init+0x220>
 800b110:	f04f 35ff 	mov.w	r5, #4294967295
 800b114:	483c      	ldr	r0, [pc, #240]	@ (800b208 <driver_init+0x314>)
 800b116:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
            input->cap.debounce = !!input->cap.irq_mode;
 800b11a:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 800b11e:	4838      	ldr	r0, [pc, #224]	@ (800b200 <driver_init+0x30c>)
 800b120:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800b124:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 800b128:	f40c 7c78 	and.w	ip, ip, #992	@ 0x3e0
 800b12c:	f1bc 0c00 	subs.w	ip, ip, #0
 800b130:	bf18      	it	ne
 800b132:	f04f 0c01 	movne.w	ip, #1
 800b136:	78c5      	ldrb	r5, [r0, #3]
 800b138:	f36c 15c7 	bfi	r5, ip, #7, #1
 800b13c:	70c5      	strb	r5, [r0, #3]
            if((aux_remap = aux_ctrl_remap_explicit(input->port, input->pin, input->user_port, input))) {
 800b13e:	68c0      	ldr	r0, [r0, #12]
 800b140:	f7fe fe4a 	bl	8009dd8 <aux_ctrl_remap_explicit>
 800b144:	2800      	cmp	r0, #0
 800b146:	d07a      	beq.n	800b23e <driver_init+0x34a>
                if(aux_remap->function == Input_Probe && input->cap.irq_mode == IRQ_Mode_Edges)
 800b148:	7802      	ldrb	r2, [r0, #0]
 800b14a:	2a0e      	cmp	r2, #14
 800b14c:	d177      	bne.n	800b23e <driver_init+0x34a>
 800b14e:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800b152:	4a2b      	ldr	r2, [pc, #172]	@ (800b200 <driver_init+0x30c>)
 800b154:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b158:	8852      	ldrh	r2, [r2, #2]
 800b15a:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
 800b15e:	2ae0      	cmp	r2, #224	@ 0xe0
 800b160:	d16d      	bne.n	800b23e <driver_init+0x34a>
                    aux_remap->irq_mode = IRQ_Mode_Change;
 800b162:	2204      	movs	r2, #4
 800b164:	7082      	strb	r2, [r0, #2]
 800b166:	e06a      	b.n	800b23e <driver_init+0x34a>
                aux_digital_in.pins.inputs = input;
 800b168:	4a24      	ldr	r2, [pc, #144]	@ (800b1fc <driver_init+0x308>)
 800b16a:	6053      	str	r3, [r2, #4]
 800b16c:	e799      	b.n	800b0a2 <driver_init+0x1ae>
            if((input->cap.irq_mode = ((DRIVER_IRQMASK|aux_irq) & input->bit) ? IRQ_Mode_None : IRQ_Mode_Edges) != IRQ_Mode_None) {
 800b16e:	2607      	movs	r6, #7
 800b170:	e7ba      	b.n	800b0e8 <driver_init+0x1f4>
 800b172:	bf00      	nop
 800b174:	200011ac 	.word	0x200011ac
 800b178:	08028910 	.word	0x08028910
 800b17c:	0802891c 	.word	0x0802891c
 800b180:	08028924 	.word	0x08028924
 800b184:	0802894c 	.word	0x0802894c
 800b188:	0800aad1 	.word	0x0800aad1
 800b18c:	431bde83 	.word	0x431bde83
 800b190:	0800ad11 	.word	0x0800ad11
 800b194:	0800acd9 	.word	0x0800acd9
 800b198:	0800a335 	.word	0x0800a335
 800b19c:	20000748 	.word	0x20000748
 800b1a0:	08009e15 	.word	0x08009e15
 800b1a4:	08009e51 	.word	0x08009e51
 800b1a8:	08009e11 	.word	0x08009e11
 800b1ac:	08009e65 	.word	0x08009e65
 800b1b0:	08009e7d 	.word	0x08009e7d
 800b1b4:	08009db1 	.word	0x08009db1
 800b1b8:	0800ae71 	.word	0x0800ae71
 800b1bc:	08009f95 	.word	0x08009f95
 800b1c0:	0800a039 	.word	0x0800a039
 800b1c4:	0800a065 	.word	0x0800a065
 800b1c8:	0800a019 	.word	0x0800a019
 800b1cc:	08009da9 	.word	0x08009da9
 800b1d0:	08009dad 	.word	0x08009dad
 800b1d4:	0800a091 	.word	0x0800a091
 800b1d8:	0800a09d 	.word	0x0800a09d
 800b1dc:	0800a0af 	.word	0x0800a0af
 800b1e0:	0800a0bd 	.word	0x0800a0bd
 800b1e4:	0800a111 	.word	0x0800a111
 800b1e8:	0800a18d 	.word	0x0800a18d
 800b1ec:	0800aa85 	.word	0x0800aa85
 800b1f0:	0800a2f5 	.word	0x0800a2f5
 800b1f4:	0800b479 	.word	0x0800b479
 800b1f8:	0800b495 	.word	0x0800b495
 800b1fc:	200006e4 	.word	0x200006e4
 800b200:	200000f4 	.word	0x200000f4
 800b204:	2000073c 	.word	0x2000073c
 800b208:	200006ec 	.word	0x200006ec
            if(aux_analog_in.pins.inputs == NULL)
 800b20c:	4a50      	ldr	r2, [pc, #320]	@ (800b350 <driver_init+0x45c>)
 800b20e:	6852      	ldr	r2, [r2, #4]
 800b210:	2a00      	cmp	r2, #0
 800b212:	d047      	beq.n	800b2a4 <driver_init+0x3b0>
            input->id = (pin_function_t)(Input_Analog_Aux0 + aux_analog_in.n_pins++);
 800b214:	4a4e      	ldr	r2, [pc, #312]	@ (800b350 <driver_init+0x45c>)
 800b216:	7813      	ldrb	r3, [r2, #0]
 800b218:	1c59      	adds	r1, r3, #1
 800b21a:	7011      	strb	r1, [r2, #0]
 800b21c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800b220:	494c      	ldr	r1, [pc, #304]	@ (800b354 <driver_init+0x460>)
 800b222:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800b226:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 800b22a:	f801 2020 	strb.w	r2, [r1, r0, lsl #2]
            input->mode.analog = input->cap.analog = On;
 800b22e:	78da      	ldrb	r2, [r3, #3]
 800b230:	f042 0208 	orr.w	r2, r2, #8
 800b234:	70da      	strb	r2, [r3, #3]
 800b236:	795a      	ldrb	r2, [r3, #5]
 800b238:	f042 0208 	orr.w	r2, r2, #8
 800b23c:	715a      	strb	r2, [r3, #5]
    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800b23e:	3401      	adds	r4, #1
 800b240:	2c02      	cmp	r4, #2
 800b242:	d835      	bhi.n	800b2b0 <driver_init+0x3bc>
        input = &inputpin[i];
 800b244:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800b248:	4b42      	ldr	r3, [pc, #264]	@ (800b354 <driver_init+0x460>)
 800b24a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
        input->mode.input = input->cap.input = On;
 800b24e:	789a      	ldrb	r2, [r3, #2]
 800b250:	f042 0201 	orr.w	r2, r2, #1
 800b254:	709a      	strb	r2, [r3, #2]
 800b256:	791a      	ldrb	r2, [r3, #4]
 800b258:	f042 0201 	orr.w	r2, r2, #1
 800b25c:	711a      	strb	r2, [r3, #4]
        input->bit = 1 << input->pin;
 800b25e:	7999      	ldrb	r1, [r3, #6]
 800b260:	2001      	movs	r0, #1
 800b262:	4088      	lsls	r0, r1
 800b264:	6098      	str	r0, [r3, #8]
        if(input->group == PinGroup_AuxInput) {
 800b266:	691a      	ldr	r2, [r3, #16]
 800b268:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800b26c:	f43f af15 	beq.w	800b09a <driver_init+0x1a6>
        } else if(input->group == PinGroup_AuxInputAnalog) {
 800b270:	2a0a      	cmp	r2, #10
 800b272:	d0cb      	beq.n	800b20c <driver_init+0x318>
        }  else if(input->group & (PinGroup_Limit|PinGroup_LimitMax)) {
 800b274:	f412 6fc0 	tst.w	r2, #1536	@ 0x600
 800b278:	d0e1      	beq.n	800b23e <driver_init+0x34a>
            if(limit_inputs.pins.inputs == NULL)
 800b27a:	4a37      	ldr	r2, [pc, #220]	@ (800b358 <driver_init+0x464>)
 800b27c:	6852      	ldr	r2, [r2, #4]
 800b27e:	b1a2      	cbz	r2, 800b2aa <driver_init+0x3b6>
            if(LIMIT_MASK & input->bit)
 800b280:	f410 5fc0 	tst.w	r0, #6144	@ 0x1800
 800b284:	d009      	beq.n	800b29a <driver_init+0x3a6>
                pin_irq[__builtin_ffs(input->bit) - 1] = input;
 800b286:	fa90 f2a0 	rbit	r2, r0
 800b28a:	fab2 f282 	clz	r2, r2
 800b28e:	b908      	cbnz	r0, 800b294 <driver_init+0x3a0>
 800b290:	f04f 32ff 	mov.w	r2, #4294967295
 800b294:	4931      	ldr	r1, [pc, #196]	@ (800b35c <driver_init+0x468>)
 800b296:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
            limit_inputs.n_pins++;
 800b29a:	4a2f      	ldr	r2, [pc, #188]	@ (800b358 <driver_init+0x464>)
 800b29c:	7813      	ldrb	r3, [r2, #0]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	7013      	strb	r3, [r2, #0]
 800b2a2:	e7cc      	b.n	800b23e <driver_init+0x34a>
                aux_analog_in.pins.inputs = input;
 800b2a4:	4a2a      	ldr	r2, [pc, #168]	@ (800b350 <driver_init+0x45c>)
 800b2a6:	6053      	str	r3, [r2, #4]
 800b2a8:	e7b4      	b.n	800b214 <driver_init+0x320>
                limit_inputs.pins.inputs = input;
 800b2aa:	4a2b      	ldr	r2, [pc, #172]	@ (800b358 <driver_init+0x464>)
 800b2ac:	6053      	str	r3, [r2, #4]
 800b2ae:	e7e7      	b.n	800b280 <driver_init+0x38c>
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	e00e      	b.n	800b2d2 <driver_init+0x3de>
            if(aux_digital_out.pins.outputs == NULL)
 800b2b4:	492a      	ldr	r1, [pc, #168]	@ (800b360 <driver_init+0x46c>)
 800b2b6:	6849      	ldr	r1, [r1, #4]
 800b2b8:	b379      	cbz	r1, 800b31a <driver_init+0x426>
            output->id = (pin_function_t)(Output_Aux0 + aux_digital_out.n_pins);
 800b2ba:	4829      	ldr	r0, [pc, #164]	@ (800b360 <driver_init+0x46c>)
 800b2bc:	7802      	ldrb	r2, [r0, #0]
 800b2be:	f102 0c77 	add.w	ip, r2, #119	@ 0x77
 800b2c2:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800b2c6:	4c27      	ldr	r4, [pc, #156]	@ (800b364 <driver_init+0x470>)
 800b2c8:	f804 c021 	strb.w	ip, [r4, r1, lsl #2]
            aux_digital_out.n_pins++;
 800b2cc:	3201      	adds	r2, #1
 800b2ce:	7002      	strb	r2, [r0, #0]
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	2b07      	cmp	r3, #7
 800b2d4:	d827      	bhi.n	800b326 <driver_init+0x432>
        output = &outputpin[i];
 800b2d6:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800b2da:	4a22      	ldr	r2, [pc, #136]	@ (800b364 <driver_init+0x470>)
 800b2dc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
        output->mode.output = On;
 800b2e0:	7c11      	ldrb	r1, [r2, #16]
 800b2e2:	f041 0102 	orr.w	r1, r1, #2
 800b2e6:	7411      	strb	r1, [r2, #16]
        if(output->group == PinGroup_AuxOutput) {
 800b2e8:	68d1      	ldr	r1, [r2, #12]
 800b2ea:	2909      	cmp	r1, #9
 800b2ec:	d0e2      	beq.n	800b2b4 <driver_init+0x3c0>
        } else if(output->group == PinGroup_AuxOutputAnalog) {
 800b2ee:	290b      	cmp	r1, #11
 800b2f0:	d1ee      	bne.n	800b2d0 <driver_init+0x3dc>
            if(aux_analog_out.pins.outputs == NULL)
 800b2f2:	491d      	ldr	r1, [pc, #116]	@ (800b368 <driver_init+0x474>)
 800b2f4:	6849      	ldr	r1, [r1, #4]
 800b2f6:	b199      	cbz	r1, 800b320 <driver_init+0x42c>
            output->mode.analog = On;
 800b2f8:	491a      	ldr	r1, [pc, #104]	@ (800b364 <driver_init+0x470>)
 800b2fa:	ebc3 00c3 	rsb	r0, r3, r3, lsl #3
 800b2fe:	eb01 0480 	add.w	r4, r1, r0, lsl #2
 800b302:	7c62      	ldrb	r2, [r4, #17]
 800b304:	f042 0208 	orr.w	r2, r2, #8
 800b308:	7462      	strb	r2, [r4, #17]
            output->id = (pin_function_t)(Output_Analog_Aux0 + aux_analog_out.n_pins++);
 800b30a:	4c17      	ldr	r4, [pc, #92]	@ (800b368 <driver_init+0x474>)
 800b30c:	7822      	ldrb	r2, [r4, #0]
 800b30e:	1c55      	adds	r5, r2, #1
 800b310:	7025      	strb	r5, [r4, #0]
 800b312:	3a7d      	subs	r2, #125	@ 0x7d
 800b314:	f801 2020 	strb.w	r2, [r1, r0, lsl #2]
 800b318:	e7da      	b.n	800b2d0 <driver_init+0x3dc>
                aux_digital_out.pins.outputs = output;
 800b31a:	4911      	ldr	r1, [pc, #68]	@ (800b360 <driver_init+0x46c>)
 800b31c:	604a      	str	r2, [r1, #4]
 800b31e:	e7cc      	b.n	800b2ba <driver_init+0x3c6>
                aux_analog_out.pins.outputs = output;
 800b320:	4911      	ldr	r1, [pc, #68]	@ (800b368 <driver_init+0x474>)
 800b322:	604a      	str	r2, [r1, #4]
 800b324:	e7e8      	b.n	800b2f8 <driver_init+0x404>
    if(aux_digital_in.n_pins || aux_digital_out.n_pins)
 800b326:	4b11      	ldr	r3, [pc, #68]	@ (800b36c <driver_init+0x478>)
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	b913      	cbnz	r3, 800b332 <driver_init+0x43e>
 800b32c:	4b0c      	ldr	r3, [pc, #48]	@ (800b360 <driver_init+0x46c>)
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	b11b      	cbz	r3, 800b33a <driver_init+0x446>
        ioports_init(&aux_digital_in, &aux_digital_out);
 800b332:	490b      	ldr	r1, [pc, #44]	@ (800b360 <driver_init+0x46c>)
 800b334:	480d      	ldr	r0, [pc, #52]	@ (800b36c <driver_init+0x478>)
 800b336:	f000 fd93 	bl	800be60 <ioports_init>
    extern void embroidery_init (void);
    embroidery_init();
#endif

    extern void my_plugin_init (void);
    my_plugin_init();
 800b33a:	f009 fa17 	bl	801476c <my_plugin_init>
    return hal.version == 10;
 800b33e:	4b0c      	ldr	r3, [pc, #48]	@ (800b370 <driver_init+0x47c>)
 800b340:	6818      	ldr	r0, [r3, #0]
}
 800b342:	280a      	cmp	r0, #10
 800b344:	bf14      	ite	ne
 800b346:	2000      	movne	r0, #0
 800b348:	2001      	moveq	r0, #1
 800b34a:	b00d      	add	sp, #52	@ 0x34
 800b34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b34e:	bf00      	nop
 800b350:	200006dc 	.word	0x200006dc
 800b354:	200000f4 	.word	0x200000f4
 800b358:	20000730 	.word	0x20000730
 800b35c:	200006ec 	.word	0x200006ec
 800b360:	200006d4 	.word	0x200006d4
 800b364:	20000014 	.word	0x20000014
 800b368:	200006cc 	.word	0x200006cc
 800b36c:	200006e4 	.word	0x200006e4
 800b370:	200011ac 	.word	0x200011ac

0800b374 <TIM5_IRQHandler>:
{
 800b374:	b508      	push	{r3, lr}
    if((STEPPER_TIMER->SR & TIM_SR_UIF) != 0) {    // check interrupt source
 800b376:	4b07      	ldr	r3, [pc, #28]	@ (800b394 <TIM5_IRQHandler+0x20>)
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	f013 0f01 	tst.w	r3, #1
 800b37e:	d007      	beq.n	800b390 <TIM5_IRQHandler+0x1c>
        STEPPER_TIMER->SR = ~TIM_SR_UIF;            // clear UIF flag
 800b380:	4b04      	ldr	r3, [pc, #16]	@ (800b394 <TIM5_IRQHandler+0x20>)
 800b382:	f06f 0201 	mvn.w	r2, #1
 800b386:	611a      	str	r2, [r3, #16]
        hal.stepper.interrupt_callback();
 800b388:	4b03      	ldr	r3, [pc, #12]	@ (800b398 <TIM5_IRQHandler+0x24>)
 800b38a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b38e:	4798      	blx	r3
}
 800b390:	bd08      	pop	{r3, pc}
 800b392:	bf00      	nop
 800b394:	40000c00 	.word	0x40000c00
 800b398:	200011ac 	.word	0x200011ac

0800b39c <TIM4_IRQHandler>:
    PULSE_TIMER->SR &= ~TIM_SR_UIF;                 // Clear UIF flag
 800b39c:	4b1e      	ldr	r3, [pc, #120]	@ (800b418 <TIM4_IRQHandler+0x7c>)
 800b39e:	691a      	ldr	r2, [r3, #16]
 800b3a0:	f022 0201 	bic.w	r2, r2, #1
 800b3a4:	611a      	str	r2, [r3, #16]
    if(PULSE_TIMER->ARR == pulse_delay) {          // Delayed step pulse?
 800b3a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3a8:	4b1c      	ldr	r3, [pc, #112]	@ (800b41c <TIM4_IRQHandler+0x80>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d012      	beq.n	800b3d6 <TIM4_IRQHandler+0x3a>
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 800b3b0:	4b1b      	ldr	r3, [pc, #108]	@ (800b420 <TIM4_IRQHandler+0x84>)
 800b3b2:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 800b3b6:	f3c3 0100 	ubfx	r1, r3, #0, #1
 800b3ba:	4a1a      	ldr	r2, [pc, #104]	@ (800b424 <TIM4_IRQHandler+0x88>)
 800b3bc:	f882 10b4 	strb.w	r1, [r2, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 800b3c0:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800b3c4:	f882 10ac 	strb.w	r1, [r2, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 800b3c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b3cc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800b3d0:	f882 3088 	strb.w	r3, [r2, #136]	@ 0x88
}
 800b3d4:	4770      	bx	lr
        PULSE_TIMER->ARR = pulse_length;
 800b3d6:	4b14      	ldr	r3, [pc, #80]	@ (800b428 <TIM4_IRQHandler+0x8c>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a0f      	ldr	r2, [pc, #60]	@ (800b418 <TIM4_IRQHandler+0x7c>)
 800b3dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 800b3de:	4b13      	ldr	r3, [pc, #76]	@ (800b42c <TIM4_IRQHandler+0x90>)
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	490f      	ldr	r1, [pc, #60]	@ (800b420 <TIM4_IRQHandler+0x84>)
 800b3e4:	f891 10e8 	ldrb.w	r1, [r1, #232]	@ 0xe8
 800b3e8:	404b      	eors	r3, r1
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 800b3ea:	f3c3 0000 	ubfx	r0, r3, #0, #1
 800b3ee:	490d      	ldr	r1, [pc, #52]	@ (800b424 <TIM4_IRQHandler+0x88>)
 800b3f0:	f881 00b4 	strb.w	r0, [r1, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 800b3f4:	f3c3 0040 	ubfx	r0, r3, #1, #1
 800b3f8:	f881 00ac 	strb.w	r0, [r1, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 800b3fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b400:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 800b404:	f881 3088 	strb.w	r3, [r1, #136]	@ 0x88
        PULSE_TIMER->EGR = TIM_EGR_UG;
 800b408:	2301      	movs	r3, #1
 800b40a:	6153      	str	r3, [r2, #20]
        PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 800b40c:	6813      	ldr	r3, [r2, #0]
 800b40e:	f043 0301 	orr.w	r3, r3, #1
 800b412:	6013      	str	r3, [r2, #0]
 800b414:	4770      	bx	lr
 800b416:	bf00      	nop
 800b418:	40000800 	.word	0x40000800
 800b41c:	20000740 	.word	0x20000740
 800b420:	20001bc4 	.word	0x20001bc4
 800b424:	42418200 	.word	0x42418200
 800b428:	20000744 	.word	0x20000744
 800b42c:	2000072c 	.word	0x2000072c

0800b430 <EXTI15_10_IRQHandler>:
#endif

#if (DRIVER_IRQMASK|AUXINPUT_MASK) & (0xFC00)

void EXTI15_10_IRQHandler(void)
{
 800b430:	b508      	push	{r3, lr}
    uint32_t ifg = __HAL_GPIO_EXTI_GET_IT(0xFC00);
 800b432:	4b07      	ldr	r3, [pc, #28]	@ (800b450 <EXTI15_10_IRQHandler+0x20>)
 800b434:	695b      	ldr	r3, [r3, #20]

    if(ifg) {
 800b436:	f413 407c 	ands.w	r0, r3, #64512	@ 0xfc00
 800b43a:	d004      	beq.n	800b446 <EXTI15_10_IRQHandler+0x16>
        __HAL_GPIO_EXTI_CLEAR_IT(ifg);
 800b43c:	4a04      	ldr	r2, [pc, #16]	@ (800b450 <EXTI15_10_IRQHandler+0x20>)
 800b43e:	6150      	str	r0, [r2, #20]
#if CONTROL_MASK & 0xFC00
        if(ifg & CONTROL_MASK)
            hal.control.interrupt_callback(systemGetState());
#endif
#if LIMIT_MASK & 0xFC00
        if(ifg & LIMIT_MASK)
 800b440:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 800b444:	d100      	bne.n	800b448 <EXTI15_10_IRQHandler+0x18>
#if AUXINPUT_MASK & 0xFC00
        if(ifg & aux_irq)
            aux_pin_irq(ifg & aux_irq);
#endif
    }
}
 800b446:	bd08      	pop	{r3, pc}
            core_pin_irq(ifg);
 800b448:	f7ff fcb2 	bl	800adb0 <core_pin_irq>
}
 800b44c:	e7fb      	b.n	800b446 <EXTI15_10_IRQHandler+0x16>
 800b44e:	bf00      	nop
 800b450:	40013c00 	.word	0x40013c00

0800b454 <Driver_IncTick>:

#endif

// Interrupt handler for 1 ms interval timer
void Driver_IncTick (void)
{
 800b454:	b508      	push	{r3, lr}
            }
        }
    }
#endif

    if(delay.ms && !(--delay.ms)) {
 800b456:	4b07      	ldr	r3, [pc, #28]	@ (800b474 <Driver_IncTick+0x20>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	b153      	cbz	r3, 800b472 <Driver_IncTick+0x1e>
 800b45c:	4a05      	ldr	r2, [pc, #20]	@ (800b474 <Driver_IncTick+0x20>)
 800b45e:	6813      	ldr	r3, [r2, #0]
 800b460:	3b01      	subs	r3, #1
 800b462:	6013      	str	r3, [r2, #0]
 800b464:	b92b      	cbnz	r3, 800b472 <Driver_IncTick+0x1e>
        if(delay.callback) {
 800b466:	6853      	ldr	r3, [r2, #4]
 800b468:	b11b      	cbz	r3, 800b472 <Driver_IncTick+0x1e>
            delay.callback();
 800b46a:	4798      	blx	r3
            delay.callback = NULL;
 800b46c:	4b01      	ldr	r3, [pc, #4]	@ (800b474 <Driver_IncTick+0x20>)
 800b46e:	2200      	movs	r2, #0
 800b470:	605a      	str	r2, [r3, #4]
        }
    }
}
 800b472:	bd08      	pop	{r3, pc}
 800b474:	2000000c 	.word	0x2000000c

0800b478 <memcpy_from_flash>:

extern void *_EEPROM_Emul_Start;
extern uint8_t _EEPROM_Emul_Sector;

bool memcpy_from_flash (uint8_t *dest)
{
 800b478:	b508      	push	{r3, lr}
    memcpy(dest, &_EEPROM_Emul_Start, hal.nvs.size);
 800b47a:	4b04      	ldr	r3, [pc, #16]	@ (800b48c <memcpy_from_flash+0x14>)
 800b47c:	f8d3 2178 	ldr.w	r2, [r3, #376]	@ 0x178
 800b480:	4903      	ldr	r1, [pc, #12]	@ (800b490 <memcpy_from_flash+0x18>)
 800b482:	f019 f95c 	bl	802473e <memcpy>

    return true;
}
 800b486:	2001      	movs	r0, #1
 800b488:	bd08      	pop	{r3, pc}
 800b48a:	bf00      	nop
 800b48c:	200011ac 	.word	0x200011ac
 800b490:	08004000 	.word	0x08004000

0800b494 <memcpy_to_flash>:

bool memcpy_to_flash (uint8_t *source)
{
 800b494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b498:	b082      	sub	sp, #8
 800b49a:	4605      	mov	r5, r0
    if (!memcmp(source, &_EEPROM_Emul_Start, hal.nvs.size))
 800b49c:	4b21      	ldr	r3, [pc, #132]	@ (800b524 <memcpy_to_flash+0x90>)
 800b49e:	f8d3 2178 	ldr.w	r2, [r3, #376]	@ 0x178
 800b4a2:	4921      	ldr	r1, [pc, #132]	@ (800b528 <memcpy_to_flash+0x94>)
 800b4a4:	f018 ffc1 	bl	802442a <memcmp>
 800b4a8:	b918      	cbnz	r0, 800b4b2 <memcpy_to_flash+0x1e>
        return true;
 800b4aa:	2001      	movs	r0, #1

        HAL_FLASH_Lock();
    }

    return status == HAL_OK;
}
 800b4ac:	b002      	add	sp, #8
 800b4ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((status = HAL_FLASH_Unlock()) == HAL_OK) {
 800b4b2:	f7fd fe69 	bl	8009188 <HAL_FLASH_Unlock>
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	b118      	cbz	r0, 800b4c2 <memcpy_to_flash+0x2e>
    return status == HAL_OK;
 800b4ba:	fab4 f084 	clz	r0, r4
 800b4be:	0940      	lsrs	r0, r0, #5
 800b4c0:	e7f4      	b.n	800b4ac <memcpy_to_flash+0x18>
        if((status = HAL_FLASHEx_Erase(&erase, &error)) != HAL_OK)
 800b4c2:	a901      	add	r1, sp, #4
 800b4c4:	4819      	ldr	r0, [pc, #100]	@ (800b52c <memcpy_to_flash+0x98>)
 800b4c6:	f7fd ff57 	bl	8009378 <HAL_FLASHEx_Erase>
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	b920      	cbnz	r0, 800b4d8 <memcpy_to_flash+0x44>
        uint32_t address = (uint32_t)&_EEPROM_Emul_Start, remaining = (uint32_t)hal.nvs.size;
 800b4ce:	4f16      	ldr	r7, [pc, #88]	@ (800b528 <memcpy_to_flash+0x94>)
 800b4d0:	4b14      	ldr	r3, [pc, #80]	@ (800b524 <memcpy_to_flash+0x90>)
 800b4d2:	f8d3 8178 	ldr.w	r8, [r3, #376]	@ 0x178
        while(remaining && status == HAL_OK) {
 800b4d6:	e009      	b.n	800b4ec <memcpy_to_flash+0x58>
            status = HAL_FLASHEx_Erase(&erase, &error);
 800b4d8:	a901      	add	r1, sp, #4
 800b4da:	4814      	ldr	r0, [pc, #80]	@ (800b52c <memcpy_to_flash+0x98>)
 800b4dc:	f7fd ff4c 	bl	8009378 <HAL_FLASHEx_Erase>
 800b4e0:	4604      	mov	r4, r0
 800b4e2:	e7f4      	b.n	800b4ce <memcpy_to_flash+0x3a>
            address += 4;
 800b4e4:	3704      	adds	r7, #4
            remaining -= 4;
 800b4e6:	f1a8 0804 	sub.w	r8, r8, #4
 800b4ea:	4635      	mov	r5, r6
        while(remaining && status == HAL_OK) {
 800b4ec:	f1b8 0f00 	cmp.w	r8, #0
 800b4f0:	d014      	beq.n	800b51c <memcpy_to_flash+0x88>
 800b4f2:	b99c      	cbnz	r4, 800b51c <memcpy_to_flash+0x88>
            if((status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data++)) == HAL_OK)
 800b4f4:	462e      	mov	r6, r5
 800b4f6:	f836 2b02 	ldrh.w	r2, [r6], #2
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	4639      	mov	r1, r7
 800b4fe:	2001      	movs	r0, #1
 800b500:	f7fd fe94 	bl	800922c <HAL_FLASH_Program>
 800b504:	4604      	mov	r4, r0
 800b506:	2800      	cmp	r0, #0
 800b508:	d1ec      	bne.n	800b4e4 <memcpy_to_flash+0x50>
                status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, *data++);
 800b50a:	1d2e      	adds	r6, r5, #4
 800b50c:	886a      	ldrh	r2, [r5, #2]
 800b50e:	2300      	movs	r3, #0
 800b510:	1cb9      	adds	r1, r7, #2
 800b512:	2001      	movs	r0, #1
 800b514:	f7fd fe8a 	bl	800922c <HAL_FLASH_Program>
 800b518:	4604      	mov	r4, r0
 800b51a:	e7e3      	b.n	800b4e4 <memcpy_to_flash+0x50>
        HAL_FLASH_Lock();
 800b51c:	f7fd fe4c 	bl	80091b8 <HAL_FLASH_Lock>
 800b520:	e7cb      	b.n	800b4ba <memcpy_to_flash+0x26>
 800b522:	bf00      	nop
 800b524:	200011ac 	.word	0x200011ac
 800b528:	08004000 	.word	0x08004000
 800b52c:	20000160 	.word	0x20000160

0800b530 <digital_out>:
    return output->id < digital.out.n_ports;
}

static void digital_out (uint8_t port, bool on)
{
    if(port < digital.out.n_ports) {
 800b530:	4b0d      	ldr	r3, [pc, #52]	@ (800b568 <digital_out+0x38>)
 800b532:	7b1b      	ldrb	r3, [r3, #12]
 800b534:	4283      	cmp	r3, r0
 800b536:	d916      	bls.n	800b566 <digital_out+0x36>
        port = ioports_map(digital.out, port);
 800b538:	4b0b      	ldr	r3, [pc, #44]	@ (800b568 <digital_out+0x38>)
 800b53a:	691b      	ldr	r3, [r3, #16]
 800b53c:	b103      	cbz	r3, 800b540 <digital_out+0x10>
 800b53e:	5c18      	ldrb	r0, [r3, r0]
        DIGITAL_OUT(aux_out[port].port, aux_out[port].pin, aux_out[port].mode.inverted ? !on : on);
 800b540:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800b544:	4b09      	ldr	r3, [pc, #36]	@ (800b56c <digital_out+0x3c>)
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800b54c:	7c53      	ldrb	r3, [r2, #17]
 800b54e:	f013 0f04 	tst.w	r3, #4
 800b552:	d001      	beq.n	800b558 <digital_out+0x28>
 800b554:	f081 0101 	eor.w	r1, r1, #1
 800b558:	6850      	ldr	r0, [r2, #4]
 800b55a:	4b05      	ldr	r3, [pc, #20]	@ (800b570 <digital_out+0x40>)
 800b55c:	4403      	add	r3, r0
 800b55e:	015b      	lsls	r3, r3, #5
 800b560:	7a12      	ldrb	r2, [r2, #8]
 800b562:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    }
}
 800b566:	4770      	bx	lr
 800b568:	20000788 	.word	0x20000788
 800b56c:	20000780 	.word	0x20000780
 800b570:	c2100014 	.word	0xc2100014

0800b574 <digital_out_state>:

static float digital_out_state (xbar_t *output)
{
    float value = -1.0f;

    if(output->id < digital.out.n_ports)
 800b574:	7803      	ldrb	r3, [r0, #0]
 800b576:	4a0f      	ldr	r2, [pc, #60]	@ (800b5b4 <digital_out_state+0x40>)
 800b578:	7b12      	ldrb	r2, [r2, #12]
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d217      	bcs.n	800b5ae <digital_out_state+0x3a>
        value = (float)(DIGITAL_IN(aux_out[output->id].port, aux_out[output->id].pin) ^ aux_out[output->id].mode.inverted);
 800b57e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b582:	4a0d      	ldr	r2, [pc, #52]	@ (800b5b8 <digital_out_state+0x44>)
 800b584:	6812      	ldr	r2, [r2, #0]
 800b586:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b58a:	6853      	ldr	r3, [r2, #4]
 800b58c:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800b590:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800b594:	015b      	lsls	r3, r3, #5
 800b596:	7a11      	ldrb	r1, [r2, #8]
 800b598:	f813 3021 	ldrb.w	r3, [r3, r1, lsl #2]
 800b59c:	7c52      	ldrb	r2, [r2, #17]
 800b59e:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800b5a2:	4053      	eors	r3, r2
 800b5a4:	ee00 3a10 	vmov	s0, r3
 800b5a8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b5ac:	4770      	bx	lr
    float value = -1.0f;
 800b5ae:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0

    return value;
}
 800b5b2:	4770      	bx	lr
 800b5b4:	20000788 	.word	0x20000788
 800b5b8:	20000780 	.word	0x20000780

0800b5bc <digital_in_state>:

static float digital_in_state (xbar_t *input)
{
    float value = -1.0f;

    if(input->id < digital.in.n_ports)
 800b5bc:	7803      	ldrb	r3, [r0, #0]
 800b5be:	4a0f      	ldr	r2, [pc, #60]	@ (800b5fc <digital_in_state+0x40>)
 800b5c0:	7912      	ldrb	r2, [r2, #4]
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d217      	bcs.n	800b5f6 <digital_in_state+0x3a>
        value = (float)(DIGITAL_IN(aux_in[input->id].port, aux_in[input->id].pin) ^ aux_in[input->id].mode.inverted);
 800b5c6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800b5ca:	4a0d      	ldr	r2, [pc, #52]	@ (800b600 <digital_in_state+0x44>)
 800b5cc:	6812      	ldr	r2, [r2, #0]
 800b5ce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b5d2:	68d3      	ldr	r3, [r2, #12]
 800b5d4:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800b5d8:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800b5dc:	015b      	lsls	r3, r3, #5
 800b5de:	7991      	ldrb	r1, [r2, #6]
 800b5e0:	f813 3021 	ldrb.w	r3, [r3, r1, lsl #2]
 800b5e4:	7952      	ldrb	r2, [r2, #5]
 800b5e6:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800b5ea:	4053      	eors	r3, r2
 800b5ec:	ee00 3a10 	vmov	s0, r3
 800b5f0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b5f4:	4770      	bx	lr
    float value = -1.0f;
 800b5f6:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0

    return value;
}
 800b5fa:	4770      	bx	lr
 800b5fc:	20000788 	.word	0x20000788
 800b600:	20000784 	.word	0x20000784

0800b604 <get_pin_info>:
{
    static xbar_t pin;

    xbar_t *info = NULL;

    if(type == Port_Digital) {
 800b604:	2801      	cmp	r0, #1
 800b606:	d16f      	bne.n	800b6e8 <get_pin_info+0xe4>
{
 800b608:	b530      	push	{r4, r5, lr}

        if(dir == Port_Input && port < digital.in.n_ports) {
 800b60a:	2900      	cmp	r1, #0
 800b60c:	d136      	bne.n	800b67c <get_pin_info+0x78>
 800b60e:	4b37      	ldr	r3, [pc, #220]	@ (800b6ec <get_pin_info+0xe8>)
 800b610:	791b      	ldrb	r3, [r3, #4]
 800b612:	4293      	cmp	r3, r2
 800b614:	d936      	bls.n	800b684 <get_pin_info+0x80>
            XBAR_SET_DIN_INFO(pin, ioports_map(digital.in, port), aux_in[pin.id], digital_in_cfg, digital_in_state);
 800b616:	4b35      	ldr	r3, [pc, #212]	@ (800b6ec <get_pin_info+0xe8>)
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d02c      	beq.n	800b678 <get_pin_info+0x74>
 800b61e:	5c9b      	ldrb	r3, [r3, r2]
 800b620:	4833      	ldr	r0, [pc, #204]	@ (800b6f0 <get_pin_info+0xec>)
 800b622:	7003      	strb	r3, [r0, #0]
 800b624:	eb03 0ec3 	add.w	lr, r3, r3, lsl #3
 800b628:	4b32      	ldr	r3, [pc, #200]	@ (800b6f4 <get_pin_info+0xf0>)
 800b62a:	681c      	ldr	r4, [r3, #0]
 800b62c:	eb04 038e 	add.w	r3, r4, lr, lsl #2
 800b630:	889d      	ldrh	r5, [r3, #4]
 800b632:	82c5      	strh	r5, [r0, #22]
 800b634:	885d      	ldrh	r5, [r3, #2]
 800b636:	8285      	strh	r5, [r0, #20]
 800b638:	f890 c015 	ldrb.w	ip, [r0, #21]
 800b63c:	f04c 0c04 	orr.w	ip, ip, #4
 800b640:	f880 c015 	strb.w	ip, [r0, #21]
 800b644:	f893 c005 	ldrb.w	ip, [r3, #5]
 800b648:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 800b64c:	f08c 0c01 	eor.w	ip, ip, #1
 800b650:	7d45      	ldrb	r5, [r0, #21]
 800b652:	f36c 1586 	bfi	r5, ip, #6, #1
 800b656:	7545      	strb	r5, [r0, #21]
 800b658:	f814 402e 	ldrb.w	r4, [r4, lr, lsl #2]
 800b65c:	7044      	strb	r4, [r0, #1]
 800b65e:	691c      	ldr	r4, [r3, #16]
 800b660:	6044      	str	r4, [r0, #4]
 800b662:	799c      	ldrb	r4, [r3, #6]
 800b664:	6104      	str	r4, [r0, #16]
 800b666:	68dc      	ldr	r4, [r3, #12]
 800b668:	6084      	str	r4, [r0, #8]
 800b66a:	6a1b      	ldr	r3, [r3, #32]
 800b66c:	60c3      	str	r3, [r0, #12]
 800b66e:	4b22      	ldr	r3, [pc, #136]	@ (800b6f8 <get_pin_info+0xf4>)
 800b670:	6183      	str	r3, [r0, #24]
 800b672:	4b22      	ldr	r3, [pc, #136]	@ (800b6fc <get_pin_info+0xf8>)
 800b674:	61c3      	str	r3, [r0, #28]
            info = &pin;
 800b676:	e002      	b.n	800b67e <get_pin_info+0x7a>
            XBAR_SET_DIN_INFO(pin, ioports_map(digital.in, port), aux_in[pin.id], digital_in_cfg, digital_in_state);
 800b678:	4613      	mov	r3, r2
 800b67a:	e7d1      	b.n	800b620 <get_pin_info+0x1c>
    xbar_t *info = NULL;
 800b67c:	2000      	movs	r0, #0
        }

        if(dir == Port_Output && port < digital.out.n_ports) {
 800b67e:	2901      	cmp	r1, #1
 800b680:	d002      	beq.n	800b688 <get_pin_info+0x84>
            info = &pin;
        }
    }

    return info;
}
 800b682:	bd30      	pop	{r4, r5, pc}
    xbar_t *info = NULL;
 800b684:	2000      	movs	r0, #0
 800b686:	e7fa      	b.n	800b67e <get_pin_info+0x7a>
        if(dir == Port_Output && port < digital.out.n_ports) {
 800b688:	4b18      	ldr	r3, [pc, #96]	@ (800b6ec <get_pin_info+0xe8>)
 800b68a:	7b1b      	ldrb	r3, [r3, #12]
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d9f8      	bls.n	800b682 <get_pin_info+0x7e>
            XBAR_SET_DOUT_INFO(pin, ioports_map(digital.out, port), aux_out[pin.id], digital_out_cfg, digital_out_state);
 800b690:	4b16      	ldr	r3, [pc, #88]	@ (800b6ec <get_pin_info+0xe8>)
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	b103      	cbz	r3, 800b698 <get_pin_info+0x94>
 800b696:	5c9a      	ldrb	r2, [r3, r2]
 800b698:	4815      	ldr	r0, [pc, #84]	@ (800b6f0 <get_pin_info+0xec>)
 800b69a:	7002      	strb	r2, [r0, #0]
 800b69c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b6a0:	4b17      	ldr	r3, [pc, #92]	@ (800b700 <get_pin_info+0xfc>)
 800b6a2:	681c      	ldr	r4, [r3, #0]
 800b6a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6a8:	8a19      	ldrh	r1, [r3, #16]
 800b6aa:	82c1      	strh	r1, [r0, #22]
 800b6ac:	8a19      	ldrh	r1, [r3, #16]
 800b6ae:	8281      	strh	r1, [r0, #20]
 800b6b0:	7d41      	ldrb	r1, [r0, #21]
 800b6b2:	f041 0104 	orr.w	r1, r1, #4
 800b6b6:	7541      	strb	r1, [r0, #21]
 800b6b8:	7c59      	ldrb	r1, [r3, #17]
 800b6ba:	0989      	lsrs	r1, r1, #6
 800b6bc:	f081 0101 	eor.w	r1, r1, #1
 800b6c0:	7d45      	ldrb	r5, [r0, #21]
 800b6c2:	f361 1586 	bfi	r5, r1, #6, #1
 800b6c6:	7545      	strb	r5, [r0, #21]
 800b6c8:	f814 2022 	ldrb.w	r2, [r4, r2, lsl #2]
 800b6cc:	7042      	strb	r2, [r0, #1]
 800b6ce:	68da      	ldr	r2, [r3, #12]
 800b6d0:	6042      	str	r2, [r0, #4]
 800b6d2:	7a1a      	ldrb	r2, [r3, #8]
 800b6d4:	6102      	str	r2, [r0, #16]
 800b6d6:	685a      	ldr	r2, [r3, #4]
 800b6d8:	6082      	str	r2, [r0, #8]
 800b6da:	695b      	ldr	r3, [r3, #20]
 800b6dc:	60c3      	str	r3, [r0, #12]
 800b6de:	4b09      	ldr	r3, [pc, #36]	@ (800b704 <get_pin_info+0x100>)
 800b6e0:	6183      	str	r3, [r0, #24]
 800b6e2:	4b09      	ldr	r3, [pc, #36]	@ (800b708 <get_pin_info+0x104>)
 800b6e4:	61c3      	str	r3, [r0, #28]
            info = &pin;
 800b6e6:	e7cc      	b.n	800b682 <get_pin_info+0x7e>
    xbar_t *info = NULL;
 800b6e8:	2000      	movs	r0, #0
}
 800b6ea:	4770      	bx	lr
 800b6ec:	20000788 	.word	0x20000788
 800b6f0:	20000754 	.word	0x20000754
 800b6f4:	20000784 	.word	0x20000784
 800b6f8:	0800b85d 	.word	0x0800b85d
 800b6fc:	0800b5bd 	.word	0x0800b5bd
 800b700:	20000780 	.word	0x20000780
 800b704:	0800b77d 	.word	0x0800b77d
 800b708:	0800b575 	.word	0x0800b575

0800b70c <set_pin_description>:

static void set_pin_description (io_port_type_t type, io_port_direction_t dir, uint8_t port, const char *s)
{
    if(type == Port_Digital) {
 800b70c:	2801      	cmp	r0, #1
 800b70e:	d000      	beq.n	800b712 <set_pin_description+0x6>
 800b710:	4770      	bx	lr
{
 800b712:	b410      	push	{r4}
        if(dir == Port_Input && port < digital.in.n_ports)
 800b714:	b971      	cbnz	r1, 800b734 <set_pin_description+0x28>
 800b716:	4816      	ldr	r0, [pc, #88]	@ (800b770 <set_pin_description+0x64>)
 800b718:	7900      	ldrb	r0, [r0, #4]
 800b71a:	4290      	cmp	r0, r2
 800b71c:	d90a      	bls.n	800b734 <set_pin_description+0x28>
            aux_in[ioports_map(digital.in, port)].description = s;
 800b71e:	4815      	ldr	r0, [pc, #84]	@ (800b774 <set_pin_description+0x68>)
 800b720:	6804      	ldr	r4, [r0, #0]
 800b722:	4813      	ldr	r0, [pc, #76]	@ (800b770 <set_pin_description+0x64>)
 800b724:	6880      	ldr	r0, [r0, #8]
 800b726:	b150      	cbz	r0, 800b73e <set_pin_description+0x32>
 800b728:	5c80      	ldrb	r0, [r0, r2]
 800b72a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800b72e:	0080      	lsls	r0, r0, #2
 800b730:	4420      	add	r0, r4
 800b732:	6203      	str	r3, [r0, #32]
        if(dir == Port_Output && port < digital.out.n_ports)
 800b734:	2901      	cmp	r1, #1
 800b736:	d006      	beq.n	800b746 <set_pin_description+0x3a>
            aux_out[ioports_map(digital.out, port)].description = s;
    }
}
 800b738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b73c:	4770      	bx	lr
            aux_in[ioports_map(digital.in, port)].description = s;
 800b73e:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
 800b742:	0080      	lsls	r0, r0, #2
 800b744:	e7f4      	b.n	800b730 <set_pin_description+0x24>
        if(dir == Port_Output && port < digital.out.n_ports)
 800b746:	490a      	ldr	r1, [pc, #40]	@ (800b770 <set_pin_description+0x64>)
 800b748:	7b09      	ldrb	r1, [r1, #12]
 800b74a:	4291      	cmp	r1, r2
 800b74c:	d9f4      	bls.n	800b738 <set_pin_description+0x2c>
            aux_out[ioports_map(digital.out, port)].description = s;
 800b74e:	490a      	ldr	r1, [pc, #40]	@ (800b778 <set_pin_description+0x6c>)
 800b750:	6809      	ldr	r1, [r1, #0]
 800b752:	4807      	ldr	r0, [pc, #28]	@ (800b770 <set_pin_description+0x64>)
 800b754:	6900      	ldr	r0, [r0, #16]
 800b756:	b130      	cbz	r0, 800b766 <set_pin_description+0x5a>
 800b758:	5c82      	ldrb	r2, [r0, r2]
 800b75a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b75e:	0092      	lsls	r2, r2, #2
 800b760:	440a      	add	r2, r1
 800b762:	6153      	str	r3, [r2, #20]
}
 800b764:	e7e8      	b.n	800b738 <set_pin_description+0x2c>
            aux_out[ioports_map(digital.out, port)].description = s;
 800b766:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b76a:	0092      	lsls	r2, r2, #2
 800b76c:	e7f8      	b.n	800b760 <set_pin_description+0x54>
 800b76e:	bf00      	nop
 800b770:	20000788 	.word	0x20000788
 800b774:	20000784 	.word	0x20000784
 800b778:	20000780 	.word	0x20000780

0800b77c <digital_out_cfg>:
{
 800b77c:	b570      	push	{r4, r5, r6, lr}
 800b77e:	4604      	mov	r4, r0
    if(output->id < digital.out.n_ports) {
 800b780:	7803      	ldrb	r3, [r0, #0]
 800b782:	4833      	ldr	r0, [pc, #204]	@ (800b850 <digital_out_cfg+0xd4>)
 800b784:	7b00      	ldrb	r0, [r0, #12]
 800b786:	4283      	cmp	r3, r0
 800b788:	d248      	bcs.n	800b81c <digital_out_cfg+0xa0>
        if(config->inverted != aux_out[output->id].mode.inverted) {
 800b78a:	780d      	ldrb	r5, [r1, #0]
 800b78c:	4831      	ldr	r0, [pc, #196]	@ (800b854 <digital_out_cfg+0xd8>)
 800b78e:	6800      	ldr	r0, [r0, #0]
 800b790:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b794:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b798:	f893 c011 	ldrb.w	ip, [r3, #17]
 800b79c:	f3cc 0c80 	ubfx	ip, ip, #2, #1
 800b7a0:	4565      	cmp	r5, ip
 800b7a2:	d01b      	beq.n	800b7dc <digital_out_cfg+0x60>
            aux_out[output->id].mode.inverted = config->inverted;
 800b7a4:	7c5e      	ldrb	r6, [r3, #17]
 800b7a6:	f365 0682 	bfi	r6, r5, #2, #1
 800b7aa:	745e      	strb	r6, [r3, #17]
            DIGITAL_OUT(aux_out[output->id].port, aux_out[output->id].pin, !DIGITAL_IN(aux_out[output->id].port, aux_out[output->id].pin));
 800b7ac:	7823      	ldrb	r3, [r4, #0]
 800b7ae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b7b2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b7b6:	685e      	ldr	r6, [r3, #4]
 800b7b8:	f106 4c42 	add.w	ip, r6, #3254779904	@ 0xc2000000
 800b7bc:	f10c 1c10 	add.w	ip, ip, #1048592	@ 0x100010
 800b7c0:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 800b7c4:	7a1d      	ldrb	r5, [r3, #8]
 800b7c6:	f81c c025 	ldrb.w	ip, [ip, r5, lsl #2]
 800b7ca:	4b23      	ldr	r3, [pc, #140]	@ (800b858 <digital_out_cfg+0xdc>)
 800b7cc:	4433      	add	r3, r6
 800b7ce:	015b      	lsls	r3, r3, #5
 800b7d0:	fabc fc8c 	clz	ip, ip
 800b7d4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800b7d8:	f803 c025 	strb.w	ip, [r3, r5, lsl #2]
        if(config->open_drain != aux_out[output->id].mode.open_drain) {
 800b7dc:	784d      	ldrb	r5, [r1, #1]
 800b7de:	7823      	ldrb	r3, [r4, #0]
 800b7e0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b7e4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b7e8:	f893 c010 	ldrb.w	ip, [r3, #16]
 800b7ec:	f3cc 0c80 	ubfx	ip, ip, #2, #1
 800b7f0:	4565      	cmp	r5, ip
 800b7f2:	d012      	beq.n	800b81a <digital_out_cfg+0x9e>
            if((aux_out[output->id].mode.open_drain = config->open_drain))
 800b7f4:	f893 c010 	ldrb.w	ip, [r3, #16]
 800b7f8:	f365 0c82 	bfi	ip, r5, #2, #1
 800b7fc:	f883 c010 	strb.w	ip, [r3, #16]
 800b800:	b1a5      	cbz	r5, 800b82c <digital_out_cfg+0xb0>
                aux_out[output->id].port->OTYPER |= (GPIO_OTYPER_OT_0 << aux_out[output->id].pin);
 800b802:	7823      	ldrb	r3, [r4, #0]
 800b804:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b808:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b80c:	685d      	ldr	r5, [r3, #4]
 800b80e:	6868      	ldr	r0, [r5, #4]
 800b810:	7a1e      	ldrb	r6, [r3, #8]
 800b812:	2301      	movs	r3, #1
 800b814:	40b3      	lsls	r3, r6
 800b816:	4303      	orrs	r3, r0
 800b818:	606b      	str	r3, [r5, #4]
        if(persistent)
 800b81a:	b9aa      	cbnz	r2, 800b848 <digital_out_cfg+0xcc>
    return output->id < digital.out.n_ports;
 800b81c:	7820      	ldrb	r0, [r4, #0]
 800b81e:	4b0c      	ldr	r3, [pc, #48]	@ (800b850 <digital_out_cfg+0xd4>)
 800b820:	7b1b      	ldrb	r3, [r3, #12]
}
 800b822:	4298      	cmp	r0, r3
 800b824:	bf2c      	ite	cs
 800b826:	2000      	movcs	r0, #0
 800b828:	2001      	movcc	r0, #1
 800b82a:	bd70      	pop	{r4, r5, r6, pc}
                aux_out[output->id].port->OTYPER &= ~(GPIO_OTYPER_OT_0 << aux_out[output->id].pin);
 800b82c:	7823      	ldrb	r3, [r4, #0]
 800b82e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b832:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800b836:	6845      	ldr	r5, [r0, #4]
 800b838:	686b      	ldr	r3, [r5, #4]
 800b83a:	7a06      	ldrb	r6, [r0, #8]
 800b83c:	2001      	movs	r0, #1
 800b83e:	40b0      	lsls	r0, r6
 800b840:	ea23 0300 	bic.w	r3, r3, r0
 800b844:	606b      	str	r3, [r5, #4]
 800b846:	e7e8      	b.n	800b81a <digital_out_cfg+0x9e>
            ioport_save_output_settings(output, config);
 800b848:	4620      	mov	r0, r4
 800b84a:	f006 fb67 	bl	8011f1c <ioport_save_output_settings>
 800b84e:	e7e5      	b.n	800b81c <digital_out_cfg+0xa0>
 800b850:	20000788 	.word	0x20000788
 800b854:	20000780 	.word	0x20000780
 800b858:	c2100014 	.word	0xc2100014

0800b85c <digital_in_cfg>:
{
 800b85c:	b570      	push	{r4, r5, r6, lr}
 800b85e:	4604      	mov	r4, r0
    if(input->id < digital.in.n_ports && config->pull_mode != PullMode_UpDown) {
 800b860:	7803      	ldrb	r3, [r0, #0]
 800b862:	482b      	ldr	r0, [pc, #172]	@ (800b910 <digital_in_cfg+0xb4>)
 800b864:	7900      	ldrb	r0, [r0, #4]
 800b866:	4283      	cmp	r3, r0
 800b868:	d245      	bcs.n	800b8f6 <digital_in_cfg+0x9a>
 800b86a:	7888      	ldrb	r0, [r1, #2]
 800b86c:	2803      	cmp	r0, #3
 800b86e:	d042      	beq.n	800b8f6 <digital_in_cfg+0x9a>
        aux_in[input->id].mode.inverted = config->inverted;
 800b870:	4828      	ldr	r0, [pc, #160]	@ (800b914 <digital_in_cfg+0xb8>)
 800b872:	6800      	ldr	r0, [r0, #0]
 800b874:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800b878:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b87c:	f891 c000 	ldrb.w	ip, [r1]
 800b880:	795d      	ldrb	r5, [r3, #5]
 800b882:	f36c 0582 	bfi	r5, ip, #2, #1
 800b886:	715d      	strb	r5, [r3, #5]
        aux_in[input->id].mode.debounce = config->debounce;
 800b888:	7823      	ldrb	r3, [r4, #0]
 800b88a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800b88e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b892:	f891 c001 	ldrb.w	ip, [r1, #1]
 800b896:	795d      	ldrb	r5, [r3, #5]
 800b898:	f36c 15c7 	bfi	r5, ip, #7, #1
 800b89c:	715d      	strb	r5, [r3, #5]
        aux_in[input->id].mode.pull_mode = config->pull_mode;
 800b89e:	7823      	ldrb	r3, [r4, #0]
 800b8a0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800b8a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b8a8:	f891 c002 	ldrb.w	ip, [r1, #2]
 800b8ac:	791d      	ldrb	r5, [r3, #4]
 800b8ae:	f36c 05c4 	bfi	r5, ip, #3, #2
 800b8b2:	711d      	strb	r5, [r3, #4]
        aux_in[input->id].port->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (input->pin << 1));
 800b8b4:	7823      	ldrb	r3, [r4, #0]
 800b8b6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800b8ba:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b8be:	68dd      	ldr	r5, [r3, #12]
 800b8c0:	68eb      	ldr	r3, [r5, #12]
 800b8c2:	6926      	ldr	r6, [r4, #16]
 800b8c4:	ea4f 0e46 	mov.w	lr, r6, lsl #1
 800b8c8:	f04f 0c03 	mov.w	ip, #3
 800b8cc:	fa0c fc0e 	lsl.w	ip, ip, lr
 800b8d0:	ea23 030c 	bic.w	r3, r3, ip
 800b8d4:	60eb      	str	r3, [r5, #12]
        aux_in[input->id].port->PUPDR |= (config->pull_mode << (input->pin << 1));
 800b8d6:	7823      	ldrb	r3, [r4, #0]
 800b8d8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800b8dc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800b8e0:	68c5      	ldr	r5, [r0, #12]
 800b8e2:	68eb      	ldr	r3, [r5, #12]
 800b8e4:	7888      	ldrb	r0, [r1, #2]
 800b8e6:	6926      	ldr	r6, [r4, #16]
 800b8e8:	ea4f 0c46 	mov.w	ip, r6, lsl #1
 800b8ec:	fa00 f00c 	lsl.w	r0, r0, ip
 800b8f0:	4303      	orrs	r3, r0
 800b8f2:	60eb      	str	r3, [r5, #12]
        if(persistent)
 800b8f4:	b93a      	cbnz	r2, 800b906 <digital_in_cfg+0xaa>
    return input->id < digital.in.n_ports;
 800b8f6:	7820      	ldrb	r0, [r4, #0]
 800b8f8:	4b05      	ldr	r3, [pc, #20]	@ (800b910 <digital_in_cfg+0xb4>)
 800b8fa:	791b      	ldrb	r3, [r3, #4]
}
 800b8fc:	4298      	cmp	r0, r3
 800b8fe:	bf2c      	ite	cs
 800b900:	2000      	movcs	r0, #0
 800b902:	2001      	movcc	r0, #1
 800b904:	bd70      	pop	{r4, r5, r6, pc}
            ioport_save_input_settings(input, config);
 800b906:	4620      	mov	r0, r4
 800b908:	f006 fabc 	bl	8011e84 <ioport_save_input_settings>
 800b90c:	e7f3      	b.n	800b8f6 <digital_in_cfg+0x9a>
 800b90e:	bf00      	nop
 800b910:	20000788 	.word	0x20000788
 800b914:	20000784 	.word	0x20000784

0800b918 <swap_pins>:

    return ok;
}

static bool swap_pins (io_port_type_t type, io_port_direction_t dir, uint8_t port_a, uint8_t port_b)
{
 800b918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b91c:	b08a      	sub	sp, #40	@ 0x28
 800b91e:	4686      	mov	lr, r0
    bool ok = port_a == port_b;
 800b920:	429a      	cmp	r2, r3
 800b922:	bf0c      	ite	eq
 800b924:	2001      	moveq	r0, #1
 800b926:	2000      	movne	r0, #0

    if(!ok && type == Port_Digital) {
 800b928:	d005      	beq.n	800b936 <swap_pins+0x1e>
 800b92a:	460d      	mov	r5, r1
 800b92c:	4694      	mov	ip, r2
 800b92e:	461c      	mov	r4, r3
 800b930:	f1be 0f01 	cmp.w	lr, #1
 800b934:	d002      	beq.n	800b93c <swap_pins+0x24>
            memcpy(&aux_out[port_b], &tmp, sizeof(output_signal_t));
        }
    }

    return ok;
}
 800b936:	b00a      	add	sp, #40	@ 0x28
 800b938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                  aux_in[port_a].interrupt_callback == NULL &&
 800b93c:	b971      	cbnz	r1, 800b95c <swap_pins+0x44>
        if((ok = dir == Port_Input && port_a < digital.in.n_ports && port_b < digital.in.n_ports &&
 800b93e:	4b56      	ldr	r3, [pc, #344]	@ (800ba98 <swap_pins+0x180>)
 800b940:	791b      	ldrb	r3, [r3, #4]
 800b942:	4293      	cmp	r3, r2
 800b944:	d90a      	bls.n	800b95c <swap_pins+0x44>
 800b946:	42a3      	cmp	r3, r4
 800b948:	d908      	bls.n	800b95c <swap_pins+0x44>
                  aux_in[port_a].interrupt_callback == NULL &&
 800b94a:	4b54      	ldr	r3, [pc, #336]	@ (800ba9c <swap_pins+0x184>)
 800b94c:	681e      	ldr	r6, [r3, #0]
 800b94e:	eb02 0ec2 	add.w	lr, r2, r2, lsl #3
 800b952:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
 800b956:	f8de 2018 	ldr.w	r2, [lr, #24]
        if((ok = dir == Port_Input && port_a < digital.in.n_ports && port_b < digital.in.n_ports &&
 800b95a:	b11a      	cbz	r2, 800b964 <swap_pins+0x4c>
        if((ok = dir == Port_Output && port_a < digital.out.n_ports && port_b < digital.out.n_ports)) {
 800b95c:	2d01      	cmp	r5, #1
 800b95e:	d04b      	beq.n	800b9f8 <swap_pins+0xe0>
 800b960:	2000      	movs	r0, #0
 800b962:	e7e8      	b.n	800b936 <swap_pins+0x1e>
                   aux_in[port_b].interrupt_callback == NULL)) {
 800b964:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800b968:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800b96c:	69b3      	ldr	r3, [r6, #24]
                  aux_in[port_a].interrupt_callback == NULL &&
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d1f4      	bne.n	800b95c <swap_pins+0x44>
            memcpy(&tmp, &aux_in[port_a], sizeof(input_signal_t));
 800b972:	4677      	mov	r7, lr
 800b974:	f10d 0904 	add.w	r9, sp, #4
 800b978:	f10e 0a20 	add.w	sl, lr, #32
 800b97c:	46c8      	mov	r8, r9
 800b97e:	6838      	ldr	r0, [r7, #0]
 800b980:	6879      	ldr	r1, [r7, #4]
 800b982:	68ba      	ldr	r2, [r7, #8]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800b98a:	3710      	adds	r7, #16
 800b98c:	46c1      	mov	r9, r8
 800b98e:	4557      	cmp	r7, sl
 800b990:	d1f4      	bne.n	800b97c <swap_pins+0x64>
 800b992:	6838      	ldr	r0, [r7, #0]
 800b994:	f8c8 0000 	str.w	r0, [r8]
            memcpy(&aux_in[port_a], &aux_in[port_b], sizeof(input_signal_t));
 800b998:	4633      	mov	r3, r6
 800b99a:	4672      	mov	r2, lr
 800b99c:	f106 0920 	add.w	r9, r6, #32
 800b9a0:	f8d3 8000 	ldr.w	r8, [r3]
 800b9a4:	685f      	ldr	r7, [r3, #4]
 800b9a6:	6898      	ldr	r0, [r3, #8]
 800b9a8:	68d9      	ldr	r1, [r3, #12]
 800b9aa:	f8c2 8000 	str.w	r8, [r2]
 800b9ae:	6057      	str	r7, [r2, #4]
 800b9b0:	6090      	str	r0, [r2, #8]
 800b9b2:	60d1      	str	r1, [r2, #12]
 800b9b4:	3310      	adds	r3, #16
 800b9b6:	3210      	adds	r2, #16
 800b9b8:	454b      	cmp	r3, r9
 800b9ba:	d1f1      	bne.n	800b9a0 <swap_pins+0x88>
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	6013      	str	r3, [r2, #0]
            aux_in[port_a].description = tmp.description;
 800b9c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9c2:	f8ce 3020 	str.w	r3, [lr, #32]
            tmp.description = aux_in[port_b].description;
 800b9c6:	6a33      	ldr	r3, [r6, #32]
 800b9c8:	9309      	str	r3, [sp, #36]	@ 0x24
            memcpy(&aux_in[port_b], &tmp, sizeof(input_signal_t));
 800b9ca:	af01      	add	r7, sp, #4
 800b9cc:	46b6      	mov	lr, r6
 800b9ce:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 800b9d2:	463e      	mov	r6, r7
 800b9d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b9d6:	f8ce 0000 	str.w	r0, [lr]
 800b9da:	f8ce 1004 	str.w	r1, [lr, #4]
 800b9de:	f8ce 2008 	str.w	r2, [lr, #8]
 800b9e2:	f8ce 300c 	str.w	r3, [lr, #12]
 800b9e6:	4637      	mov	r7, r6
 800b9e8:	f10e 0e10 	add.w	lr, lr, #16
 800b9ec:	4546      	cmp	r6, r8
 800b9ee:	d1f0      	bne.n	800b9d2 <swap_pins+0xba>
 800b9f0:	6830      	ldr	r0, [r6, #0]
 800b9f2:	f8ce 0000 	str.w	r0, [lr]
 800b9f6:	e7b1      	b.n	800b95c <swap_pins+0x44>
        if((ok = dir == Port_Output && port_a < digital.out.n_ports && port_b < digital.out.n_ports)) {
 800b9f8:	4b27      	ldr	r3, [pc, #156]	@ (800ba98 <swap_pins+0x180>)
 800b9fa:	7b1b      	ldrb	r3, [r3, #12]
 800b9fc:	4563      	cmp	r3, ip
 800b9fe:	d949      	bls.n	800ba94 <swap_pins+0x17c>
 800ba00:	42a3      	cmp	r3, r4
 800ba02:	d801      	bhi.n	800ba08 <swap_pins+0xf0>
 800ba04:	2000      	movs	r0, #0
 800ba06:	e796      	b.n	800b936 <swap_pins+0x1e>
            memcpy(&tmp, &aux_out[port_a], sizeof(output_signal_t));
 800ba08:	4b25      	ldr	r3, [pc, #148]	@ (800baa0 <swap_pins+0x188>)
 800ba0a:	681e      	ldr	r6, [r3, #0]
 800ba0c:	ebcc 0ccc 	rsb	ip, ip, ip, lsl #3
 800ba10:	eb06 058c 	add.w	r5, r6, ip, lsl #2
 800ba14:	f10d 0e04 	add.w	lr, sp, #4
 800ba18:	f856 002c 	ldr.w	r0, [r6, ip, lsl #2]
 800ba1c:	6869      	ldr	r1, [r5, #4]
 800ba1e:	68aa      	ldr	r2, [r5, #8]
 800ba20:	68eb      	ldr	r3, [r5, #12]
 800ba22:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ba26:	6928      	ldr	r0, [r5, #16]
 800ba28:	6969      	ldr	r1, [r5, #20]
 800ba2a:	69aa      	ldr	r2, [r5, #24]
 800ba2c:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
            memcpy(&aux_out[port_a], &aux_out[port_b], sizeof(output_signal_t));
 800ba30:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800ba34:	eb06 0e84 	add.w	lr, r6, r4, lsl #2
 800ba38:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800ba3c:	f8de 2004 	ldr.w	r2, [lr, #4]
 800ba40:	f8de 3008 	ldr.w	r3, [lr, #8]
 800ba44:	f8de 000c 	ldr.w	r0, [lr, #12]
 800ba48:	f846 102c 	str.w	r1, [r6, ip, lsl #2]
 800ba4c:	606a      	str	r2, [r5, #4]
 800ba4e:	60ab      	str	r3, [r5, #8]
 800ba50:	60e8      	str	r0, [r5, #12]
 800ba52:	f8de 1010 	ldr.w	r1, [lr, #16]
 800ba56:	f8de 2014 	ldr.w	r2, [lr, #20]
 800ba5a:	f8de 3018 	ldr.w	r3, [lr, #24]
 800ba5e:	6129      	str	r1, [r5, #16]
 800ba60:	616a      	str	r2, [r5, #20]
 800ba62:	61ab      	str	r3, [r5, #24]
            aux_out[port_a].description = tmp.description;
 800ba64:	9b06      	ldr	r3, [sp, #24]
 800ba66:	616b      	str	r3, [r5, #20]
            tmp.description = aux_out[port_b].description;
 800ba68:	f8de 3014 	ldr.w	r3, [lr, #20]
 800ba6c:	9306      	str	r3, [sp, #24]
            memcpy(&aux_out[port_b], &tmp, sizeof(output_signal_t));
 800ba6e:	ad01      	add	r5, sp, #4
 800ba70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba72:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 800ba76:	f8ce 1004 	str.w	r1, [lr, #4]
 800ba7a:	f8ce 2008 	str.w	r2, [lr, #8]
 800ba7e:	f8ce 300c 	str.w	r3, [lr, #12]
 800ba82:	cd07      	ldmia	r5!, {r0, r1, r2}
 800ba84:	f8ce 0010 	str.w	r0, [lr, #16]
 800ba88:	f8ce 1014 	str.w	r1, [lr, #20]
 800ba8c:	f8ce 2018 	str.w	r2, [lr, #24]
        if((ok = dir == Port_Output && port_a < digital.out.n_ports && port_b < digital.out.n_ports)) {
 800ba90:	2001      	movs	r0, #1
 800ba92:	e750      	b.n	800b936 <swap_pins+0x1e>
 800ba94:	2000      	movs	r0, #0
 800ba96:	e74e      	b.n	800b936 <swap_pins+0x1e>
 800ba98:	20000788 	.word	0x20000788
 800ba9c:	20000784 	.word	0x20000784
 800baa0:	20000780 	.word	0x20000780

0800baa4 <claim>:
    if(type == Port_Digital) {
 800baa4:	2801      	cmp	r0, #1
 800baa6:	d001      	beq.n	800baac <claim+0x8>
    bool ok = false;
 800baa8:	2000      	movs	r0, #0
}
 800baaa:	4770      	bx	lr
{
 800baac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bab0:	4615      	mov	r5, r2
 800bab2:	461c      	mov	r4, r3
        if(dir == Port_Input) {
 800bab4:	2900      	cmp	r1, #0
 800bab6:	d166      	bne.n	800bb86 <claim+0xe2>
            if((ok = digital.in.map && *port < digital.in.n_ports && !aux_in[*port].mode.claimed)) {
 800bab8:	4b62      	ldr	r3, [pc, #392]	@ (800bc44 <claim+0x1a0>)
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	2b00      	cmp	r3, #0
 800babe:	f000 80b8 	beq.w	800bc32 <claim+0x18e>
 800bac2:	7813      	ldrb	r3, [r2, #0]
 800bac4:	4a5f      	ldr	r2, [pc, #380]	@ (800bc44 <claim+0x1a0>)
 800bac6:	7912      	ldrb	r2, [r2, #4]
 800bac8:	4293      	cmp	r3, r2
 800baca:	f080 80b4 	bcs.w	800bc36 <claim+0x192>
 800bace:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bad2:	4a5d      	ldr	r2, [pc, #372]	@ (800bc48 <claim+0x1a4>)
 800bad4:	6812      	ldr	r2, [r2, #0]
 800bad6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bada:	795b      	ldrb	r3, [r3, #5]
 800badc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800bae0:	d001      	beq.n	800bae6 <claim+0x42>
 800bae2:	2000      	movs	r0, #0
 800bae4:	e0a8      	b.n	800bc38 <claim+0x194>
                hal.port.num_digital_in--;
 800bae6:	4a59      	ldr	r2, [pc, #356]	@ (800bc4c <claim+0x1a8>)
 800bae8:	f892 3114 	ldrb.w	r3, [r2, #276]	@ 0x114
 800baec:	3b01      	subs	r3, #1
 800baee:	f882 3114 	strb.w	r3, [r2, #276]	@ 0x114
                for(i = ioports_map_reverse(&digital.in, *port); i < hal.port.num_digital_in ; i++) {
 800baf2:	7829      	ldrb	r1, [r5, #0]
 800baf4:	4856      	ldr	r0, [pc, #344]	@ (800bc50 <claim+0x1ac>)
 800baf6:	f005 ff9d 	bl	8011a34 <ioports_map_reverse>
 800bafa:	4606      	mov	r6, r0
 800bafc:	e019      	b.n	800bb32 <claim+0x8e>
                    digital.in.map[i] = digital.in.map[i + 1];
 800bafe:	4851      	ldr	r0, [pc, #324]	@ (800bc44 <claim+0x1a0>)
 800bb00:	6883      	ldr	r3, [r0, #8]
 800bb02:	199a      	adds	r2, r3, r6
 800bb04:	7852      	ldrb	r2, [r2, #1]
 800bb06:	559a      	strb	r2, [r3, r6]
                    aux_in[digital.in.map[i]].user_port = i;
 800bb08:	4b4f      	ldr	r3, [pc, #316]	@ (800bc48 <claim+0x1a4>)
 800bb0a:	681f      	ldr	r7, [r3, #0]
 800bb0c:	6881      	ldr	r1, [r0, #8]
 800bb0e:	5d8b      	ldrb	r3, [r1, r6]
 800bb10:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bb14:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800bb18:	751e      	strb	r6, [r3, #20]
                    aux_in[digital.in.map[i]].description = iports_get_pnum(digital, i);
 800bb1a:	f8d0 8014 	ldr.w	r8, [r0, #20]
 800bb1e:	5d8b      	ldrb	r3, [r1, r6]
 800bb20:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bb24:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800bb28:	4631      	mov	r1, r6
 800bb2a:	47c0      	blx	r8
 800bb2c:	6238      	str	r0, [r7, #32]
                for(i = ioports_map_reverse(&digital.in, *port); i < hal.port.num_digital_in ; i++) {
 800bb2e:	3601      	adds	r6, #1
 800bb30:	b2f6      	uxtb	r6, r6
 800bb32:	4b46      	ldr	r3, [pc, #280]	@ (800bc4c <claim+0x1a8>)
 800bb34:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800bb38:	42b3      	cmp	r3, r6
 800bb3a:	d8e0      	bhi.n	800bafe <claim+0x5a>
                aux_in[*port].mode.claimed = On;
 800bb3c:	4b42      	ldr	r3, [pc, #264]	@ (800bc48 <claim+0x1a4>)
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	782b      	ldrb	r3, [r5, #0]
 800bb42:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bb46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb4a:	7959      	ldrb	r1, [r3, #5]
 800bb4c:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800bb50:	7159      	strb	r1, [r3, #5]
                aux_in[*port].user_port = hal.port.num_digital_in;
 800bb52:	782b      	ldrb	r3, [r5, #0]
 800bb54:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bb58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb5c:	493b      	ldr	r1, [pc, #236]	@ (800bc4c <claim+0x1a8>)
 800bb5e:	f891 0114 	ldrb.w	r0, [r1, #276]	@ 0x114
 800bb62:	7518      	strb	r0, [r3, #20]
                aux_in[*port].description = description;
 800bb64:	782b      	ldrb	r3, [r5, #0]
 800bb66:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bb6a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bb6e:	6214      	str	r4, [r2, #32]
                digital.in.map[hal.port.num_digital_in] = *port;
 800bb70:	4b34      	ldr	r3, [pc, #208]	@ (800bc44 <claim+0x1a0>)
 800bb72:	689a      	ldr	r2, [r3, #8]
 800bb74:	f891 3114 	ldrb.w	r3, [r1, #276]	@ 0x114
 800bb78:	7828      	ldrb	r0, [r5, #0]
 800bb7a:	54d0      	strb	r0, [r2, r3]
                *port = hal.port.num_digital_in;
 800bb7c:	f891 3114 	ldrb.w	r3, [r1, #276]	@ 0x114
 800bb80:	702b      	strb	r3, [r5, #0]
            if((ok = digital.in.map && *port < digital.in.n_ports && !aux_in[*port].mode.claimed)) {
 800bb82:	2001      	movs	r0, #1
 800bb84:	e058      	b.n	800bc38 <claim+0x194>
        } else if((ok = digital.out.map && *port < digital.out.n_ports && !aux_out[*port].mode.claimed)) {
 800bb86:	4b2f      	ldr	r3, [pc, #188]	@ (800bc44 <claim+0x1a0>)
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d056      	beq.n	800bc3c <claim+0x198>
 800bb8e:	7813      	ldrb	r3, [r2, #0]
 800bb90:	4a2c      	ldr	r2, [pc, #176]	@ (800bc44 <claim+0x1a0>)
 800bb92:	7b12      	ldrb	r2, [r2, #12]
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d253      	bcs.n	800bc40 <claim+0x19c>
 800bb98:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bb9c:	4a2d      	ldr	r2, [pc, #180]	@ (800bc54 <claim+0x1b0>)
 800bb9e:	6812      	ldr	r2, [r2, #0]
 800bba0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bba4:	7c5b      	ldrb	r3, [r3, #17]
 800bba6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800bbaa:	d001      	beq.n	800bbb0 <claim+0x10c>
 800bbac:	2000      	movs	r0, #0
 800bbae:	e043      	b.n	800bc38 <claim+0x194>
            hal.port.num_digital_out--;
 800bbb0:	4a26      	ldr	r2, [pc, #152]	@ (800bc4c <claim+0x1a8>)
 800bbb2:	f892 3115 	ldrb.w	r3, [r2, #277]	@ 0x115
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	f882 3115 	strb.w	r3, [r2, #277]	@ 0x115
            for(i = ioports_map_reverse(&digital.out, *port); i < hal.port.num_digital_out; i++) {
 800bbbc:	7829      	ldrb	r1, [r5, #0]
 800bbbe:	4826      	ldr	r0, [pc, #152]	@ (800bc58 <claim+0x1b4>)
 800bbc0:	f005 ff38 	bl	8011a34 <ioports_map_reverse>
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	e012      	b.n	800bbee <claim+0x14a>
                digital.out.map[i] = digital.out.map[i + 1];
 800bbc8:	481e      	ldr	r0, [pc, #120]	@ (800bc44 <claim+0x1a0>)
 800bbca:	6903      	ldr	r3, [r0, #16]
 800bbcc:	199a      	adds	r2, r3, r6
 800bbce:	7852      	ldrb	r2, [r2, #1]
 800bbd0:	559a      	strb	r2, [r3, r6]
                aux_out[digital.out.map[i]].description = iports_get_pnum(digital, i);
 800bbd2:	6942      	ldr	r2, [r0, #20]
 800bbd4:	6903      	ldr	r3, [r0, #16]
 800bbd6:	5d9b      	ldrb	r3, [r3, r6]
 800bbd8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bbdc:	491d      	ldr	r1, [pc, #116]	@ (800bc54 <claim+0x1b0>)
 800bbde:	680f      	ldr	r7, [r1, #0]
 800bbe0:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800bbe4:	4631      	mov	r1, r6
 800bbe6:	4790      	blx	r2
 800bbe8:	6178      	str	r0, [r7, #20]
            for(i = ioports_map_reverse(&digital.out, *port); i < hal.port.num_digital_out; i++) {
 800bbea:	3601      	adds	r6, #1
 800bbec:	b2f6      	uxtb	r6, r6
 800bbee:	4b17      	ldr	r3, [pc, #92]	@ (800bc4c <claim+0x1a8>)
 800bbf0:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800bbf4:	42b3      	cmp	r3, r6
 800bbf6:	d8e7      	bhi.n	800bbc8 <claim+0x124>
            aux_out[*port].mode.claimed = On;
 800bbf8:	4b16      	ldr	r3, [pc, #88]	@ (800bc54 <claim+0x1b0>)
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	782b      	ldrb	r3, [r5, #0]
 800bbfe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bc02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc06:	7c59      	ldrb	r1, [r3, #17]
 800bc08:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800bc0c:	7459      	strb	r1, [r3, #17]
            aux_out[*port].description = description;
 800bc0e:	782b      	ldrb	r3, [r5, #0]
 800bc10:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bc14:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bc18:	6154      	str	r4, [r2, #20]
            digital.out.map[hal.port.num_digital_out] = *port;
 800bc1a:	4b0a      	ldr	r3, [pc, #40]	@ (800bc44 <claim+0x1a0>)
 800bc1c:	6919      	ldr	r1, [r3, #16]
 800bc1e:	4b0b      	ldr	r3, [pc, #44]	@ (800bc4c <claim+0x1a8>)
 800bc20:	f893 2115 	ldrb.w	r2, [r3, #277]	@ 0x115
 800bc24:	7828      	ldrb	r0, [r5, #0]
 800bc26:	5488      	strb	r0, [r1, r2]
            *port = hal.port.num_digital_out;
 800bc28:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800bc2c:	702b      	strb	r3, [r5, #0]
        } else if((ok = digital.out.map && *port < digital.out.n_ports && !aux_out[*port].mode.claimed)) {
 800bc2e:	2001      	movs	r0, #1
 800bc30:	e002      	b.n	800bc38 <claim+0x194>
            if((ok = digital.in.map && *port < digital.in.n_ports && !aux_in[*port].mode.claimed)) {
 800bc32:	2000      	movs	r0, #0
 800bc34:	e000      	b.n	800bc38 <claim+0x194>
 800bc36:	2000      	movs	r0, #0
}
 800bc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else if((ok = digital.out.map && *port < digital.out.n_ports && !aux_out[*port].mode.claimed)) {
 800bc3c:	2000      	movs	r0, #0
 800bc3e:	e7fb      	b.n	800bc38 <claim+0x194>
 800bc40:	2000      	movs	r0, #0
 800bc42:	e7f9      	b.n	800bc38 <claim+0x194>
 800bc44:	20000788 	.word	0x20000788
 800bc48:	20000784 	.word	0x20000784
 800bc4c:	200011ac 	.word	0x200011ac
 800bc50:	2000078c 	.word	0x2000078c
 800bc54:	20000780 	.word	0x20000780
 800bc58:	20000794 	.word	0x20000794

0800bc5c <register_interrupt_handler>:
{
 800bc5c:	b570      	push	{r4, r5, r6, lr}
 800bc5e:	460c      	mov	r4, r1
    port = ioports_map(digital.in, port);
 800bc60:	4b1f      	ldr	r3, [pc, #124]	@ (800bce0 <register_interrupt_handler+0x84>)
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	b103      	cbz	r3, 800bc68 <register_interrupt_handler+0xc>
 800bc66:	5c18      	ldrb	r0, [r3, r0]
    if((ok = port < digital.in.n_ports && aux_in[port].cap.irq_mode != IRQ_Mode_None)) {
 800bc68:	4b1d      	ldr	r3, [pc, #116]	@ (800bce0 <register_interrupt_handler+0x84>)
 800bc6a:	791b      	ldrb	r3, [r3, #4]
 800bc6c:	4283      	cmp	r3, r0
 800bc6e:	d932      	bls.n	800bcd6 <register_interrupt_handler+0x7a>
 800bc70:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800bc74:	4b1b      	ldr	r3, [pc, #108]	@ (800bce4 <register_interrupt_handler+0x88>)
 800bc76:	681d      	ldr	r5, [r3, #0]
 800bc78:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 800bc7c:	886b      	ldrh	r3, [r5, #2]
 800bc7e:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 800bc82:	b35b      	cbz	r3, 800bcdc <register_interrupt_handler+0x80>
        if((ok = (irq_mode & input->cap.irq_mode) == irq_mode && interrupt_callback != NULL)) {
 800bc84:	886b      	ldrh	r3, [r5, #2]
 800bc86:	f3c3 1344 	ubfx	r3, r3, #5, #5
 800bc8a:	ea34 0303 	bics.w	r3, r4, r3
 800bc8e:	d014      	beq.n	800bcba <register_interrupt_handler+0x5e>
 800bc90:	2600      	movs	r6, #0
        if(irq_mode == IRQ_Mode_None || !ok) {
 800bc92:	b104      	cbz	r4, 800bc96 <register_interrupt_handler+0x3a>
 800bc94:	bb06      	cbnz	r6, 800bcd8 <register_interrupt_handler+0x7c>
            hal.irq_disable();
 800bc96:	4c14      	ldr	r4, [pc, #80]	@ (800bce8 <register_interrupt_handler+0x8c>)
 800bc98:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800bc9a:	4798      	blx	r3
            EXTI->IMR &= ~input->bit;     // Disable pin interrupt
 800bc9c:	4a13      	ldr	r2, [pc, #76]	@ (800bcec <register_interrupt_handler+0x90>)
 800bc9e:	6813      	ldr	r3, [r2, #0]
 800bca0:	68a9      	ldr	r1, [r5, #8]
 800bca2:	ea23 0301 	bic.w	r3, r3, r1
 800bca6:	6013      	str	r3, [r2, #0]
            input->mode.irq_mode = IRQ_Mode_None;
 800bca8:	88ab      	ldrh	r3, [r5, #4]
 800bcaa:	f36f 1349 	bfc	r3, #5, #5
 800bcae:	80ab      	strh	r3, [r5, #4]
            input->interrupt_callback = NULL;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	61ab      	str	r3, [r5, #24]
            hal.irq_enable();
 800bcb4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800bcb6:	4798      	blx	r3
 800bcb8:	e00e      	b.n	800bcd8 <register_interrupt_handler+0x7c>
        if((ok = (irq_mode & input->cap.irq_mode) == irq_mode && interrupt_callback != NULL)) {
 800bcba:	b152      	cbz	r2, 800bcd2 <register_interrupt_handler+0x76>
            input->mode.irq_mode = irq_mode;
 800bcbc:	88ab      	ldrh	r3, [r5, #4]
 800bcbe:	f364 1349 	bfi	r3, r4, #5, #5
 800bcc2:	80ab      	strh	r3, [r5, #4]
            input->interrupt_callback = interrupt_callback;
 800bcc4:	61aa      	str	r2, [r5, #24]
            gpio_irq_enable(input, irq_mode);
 800bcc6:	4621      	mov	r1, r4
 800bcc8:	4628      	mov	r0, r5
 800bcca:	f7ff f899 	bl	800ae00 <gpio_irq_enable>
        if((ok = (irq_mode & input->cap.irq_mode) == irq_mode && interrupt_callback != NULL)) {
 800bcce:	2601      	movs	r6, #1
 800bcd0:	e7df      	b.n	800bc92 <register_interrupt_handler+0x36>
 800bcd2:	2600      	movs	r6, #0
 800bcd4:	e7dd      	b.n	800bc92 <register_interrupt_handler+0x36>
    if((ok = port < digital.in.n_ports && aux_in[port].cap.irq_mode != IRQ_Mode_None)) {
 800bcd6:	2600      	movs	r6, #0
}
 800bcd8:	4630      	mov	r0, r6
 800bcda:	bd70      	pop	{r4, r5, r6, pc}
    if((ok = port < digital.in.n_ports && aux_in[port].cap.irq_mode != IRQ_Mode_None)) {
 800bcdc:	2600      	movs	r6, #0
 800bcde:	e7fb      	b.n	800bcd8 <register_interrupt_handler+0x7c>
 800bce0:	20000788 	.word	0x20000788
 800bce4:	20000784 	.word	0x20000784
 800bce8:	200011ac 	.word	0x200011ac
 800bcec:	40013c00 	.word	0x40013c00

0800bcf0 <wait_on_input>:
{
 800bcf0:	b570      	push	{r4, r5, r6, lr}
    if(type == Port_Digital && port < digital.in.n_ports) {
 800bcf2:	2801      	cmp	r0, #1
 800bcf4:	f040 809a 	bne.w	800be2c <wait_on_input+0x13c>
 800bcf8:	4616      	mov	r6, r2
 800bcfa:	4b54      	ldr	r3, [pc, #336]	@ (800be4c <wait_on_input+0x15c>)
 800bcfc:	791b      	ldrb	r3, [r3, #4]
 800bcfe:	428b      	cmp	r3, r1
 800bd00:	f240 8097 	bls.w	800be32 <wait_on_input+0x142>
        port = ioports_map(digital.in, port);
 800bd04:	4b51      	ldr	r3, [pc, #324]	@ (800be4c <wait_on_input+0x15c>)
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	b103      	cbz	r3, 800bd0c <wait_on_input+0x1c>
 800bd0a:	5c59      	ldrb	r1, [r3, r1]
        value = get_input(&aux_in[port], wait_mode, timeout);
 800bd0c:	4b50      	ldr	r3, [pc, #320]	@ (800be50 <wait_on_input+0x160>)
 800bd0e:	681d      	ldr	r5, [r3, #0]
 800bd10:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800bd14:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    if(wait_mode == WaitMode_Immediate)
 800bd18:	2e00      	cmp	r6, #0
 800bd1a:	d032      	beq.n	800bd82 <wait_on_input+0x92>
    uint_fast16_t delay = (uint_fast16_t)ceilf((1000.0f / 50.0f) * timeout) + 1;
 800bd1c:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 800bd20:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bd24:	f01b fa1a 	bl	802715c <ceilf>
 800bd28:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800bd2c:	ee10 4a10 	vmov	r4, s0
 800bd30:	3401      	adds	r4, #1
    if(wait_mode == WaitMode_Rise || wait_mode == WaitMode_Fall) {
 800bd32:	1e73      	subs	r3, r6, #1
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d932      	bls.n	800bda0 <wait_on_input+0xb0>
        bool wait_for = wait_mode != WaitMode_Low;
 800bd3a:	3e04      	subs	r6, #4
 800bd3c:	bf18      	it	ne
 800bd3e:	2601      	movne	r6, #1
            if((DIGITAL_IN(input->port, input->pin) ^ input->mode.inverted) == wait_for) {
 800bd40:	68eb      	ldr	r3, [r5, #12]
 800bd42:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800bd46:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800bd4a:	015b      	lsls	r3, r3, #5
 800bd4c:	79a8      	ldrb	r0, [r5, #6]
 800bd4e:	f813 1020 	ldrb.w	r1, [r3, r0, lsl #2]
 800bd52:	796a      	ldrb	r2, [r5, #5]
 800bd54:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800bd58:	4051      	eors	r1, r2
 800bd5a:	42b1      	cmp	r1, r6
 800bd5c:	d062      	beq.n	800be24 <wait_on_input+0x134>
            if(delay) {
 800bd5e:	2c00      	cmp	r4, #0
 800bd60:	d06d      	beq.n	800be3e <wait_on_input+0x14e>
                protocol_execute_realtime();
 800bd62:	f00b f967 	bl	8017034 <protocol_execute_realtime>
                hal.delay_ms(50, NULL);
 800bd66:	4b3b      	ldr	r3, [pc, #236]	@ (800be54 <wait_on_input+0x164>)
 800bd68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	2032      	movs	r0, #50	@ 0x32
 800bd6e:	4798      	blx	r3
        } while(--delay && !sys.abort);
 800bd70:	3c01      	subs	r4, #1
 800bd72:	d067      	beq.n	800be44 <wait_on_input+0x154>
 800bd74:	4b38      	ldr	r3, [pc, #224]	@ (800be58 <wait_on_input+0x168>)
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d0e1      	beq.n	800bd40 <wait_on_input+0x50>
    int32_t value = -1;
 800bd7c:	f04f 34ff 	mov.w	r4, #4294967295
 800bd80:	e00c      	b.n	800bd9c <wait_on_input+0xac>
        return DIGITAL_IN(input->port, input->pin) ^ input->mode.inverted;
 800bd82:	68eb      	ldr	r3, [r5, #12]
 800bd84:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800bd88:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800bd8c:	015b      	lsls	r3, r3, #5
 800bd8e:	79aa      	ldrb	r2, [r5, #6]
 800bd90:	f813 4022 	ldrb.w	r4, [r3, r2, lsl #2]
 800bd94:	796b      	ldrb	r3, [r5, #5]
 800bd96:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bd9a:	405c      	eors	r4, r3
}
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	bd70      	pop	{r4, r5, r6, pc}
        pin_irq_mode_t irq_mode = wait_mode == WaitMode_Rise ? IRQ_Mode_Rising : IRQ_Mode_Falling;
 800bda0:	2e01      	cmp	r6, #1
 800bda2:	d000      	beq.n	800bda6 <wait_on_input+0xb6>
 800bda4:	2602      	movs	r6, #2
        if(input->cap.irq_mode & irq_mode) {
 800bda6:	886b      	ldrh	r3, [r5, #2]
 800bda8:	f3c3 1344 	ubfx	r3, r3, #5, #5
 800bdac:	421e      	tst	r6, r3
 800bdae:	d043      	beq.n	800be38 <wait_on_input+0x148>
            event_bits &= ~input->bit;
 800bdb0:	68a9      	ldr	r1, [r5, #8]
 800bdb2:	4a2a      	ldr	r2, [pc, #168]	@ (800be5c <wait_on_input+0x16c>)
 800bdb4:	6813      	ldr	r3, [r2, #0]
 800bdb6:	ea23 0301 	bic.w	r3, r3, r1
 800bdba:	6013      	str	r3, [r2, #0]
            gpio_irq_enable(input, irq_mode);
 800bdbc:	4631      	mov	r1, r6
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	f7ff f81e 	bl	800ae00 <gpio_irq_enable>
                if(event_bits & input->bit) {
 800bdc4:	68aa      	ldr	r2, [r5, #8]
 800bdc6:	4b25      	ldr	r3, [pc, #148]	@ (800be5c <wait_on_input+0x16c>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	421a      	tst	r2, r3
 800bdcc:	d110      	bne.n	800bdf0 <wait_on_input+0x100>
                if(delay) {
 800bdce:	b31c      	cbz	r4, 800be18 <wait_on_input+0x128>
                    protocol_execute_realtime();
 800bdd0:	f00b f930 	bl	8017034 <protocol_execute_realtime>
                    hal.delay_ms(50, NULL);
 800bdd4:	4b1f      	ldr	r3, [pc, #124]	@ (800be54 <wait_on_input+0x164>)
 800bdd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdd8:	2100      	movs	r1, #0
 800bdda:	2032      	movs	r0, #50	@ 0x32
 800bddc:	4798      	blx	r3
            } while(--delay && !sys.abort);
 800bdde:	3c01      	subs	r4, #1
 800bde0:	d01d      	beq.n	800be1e <wait_on_input+0x12e>
 800bde2:	4b1d      	ldr	r3, [pc, #116]	@ (800be58 <wait_on_input+0x168>)
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d0ec      	beq.n	800bdc4 <wait_on_input+0xd4>
    int32_t value = -1;
 800bdea:	f04f 34ff 	mov.w	r4, #4294967295
 800bdee:	e00c      	b.n	800be0a <wait_on_input+0x11a>
                    value = DIGITAL_IN(input->port, input->pin) ^ input->mode.inverted;
 800bdf0:	68eb      	ldr	r3, [r5, #12]
 800bdf2:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800bdf6:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800bdfa:	015b      	lsls	r3, r3, #5
 800bdfc:	79aa      	ldrb	r2, [r5, #6]
 800bdfe:	f813 4022 	ldrb.w	r4, [r3, r2, lsl #2]
 800be02:	796b      	ldrb	r3, [r5, #5]
 800be04:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800be08:	405c      	eors	r4, r3
            gpio_irq_enable(input, input->mode.irq_mode);    // Restore pin interrupt status
 800be0a:	88a9      	ldrh	r1, [r5, #4]
 800be0c:	f3c1 1144 	ubfx	r1, r1, #5, #5
 800be10:	4628      	mov	r0, r5
 800be12:	f7fe fff5 	bl	800ae00 <gpio_irq_enable>
 800be16:	e7c1      	b.n	800bd9c <wait_on_input+0xac>
    int32_t value = -1;
 800be18:	f04f 34ff 	mov.w	r4, #4294967295
 800be1c:	e7f5      	b.n	800be0a <wait_on_input+0x11a>
 800be1e:	f04f 34ff 	mov.w	r4, #4294967295
 800be22:	e7f2      	b.n	800be0a <wait_on_input+0x11a>
                value = DIGITAL_IN(input->port, input->pin) ^ input->mode.inverted;
 800be24:	f813 4020 	ldrb.w	r4, [r3, r0, lsl #2]
 800be28:	4054      	eors	r4, r2
                break;
 800be2a:	e7b7      	b.n	800bd9c <wait_on_input+0xac>
    int32_t value = -1;
 800be2c:	f04f 34ff 	mov.w	r4, #4294967295
 800be30:	e7b4      	b.n	800bd9c <wait_on_input+0xac>
 800be32:	f04f 34ff 	mov.w	r4, #4294967295
 800be36:	e7b1      	b.n	800bd9c <wait_on_input+0xac>
    int32_t value = -1;
 800be38:	f04f 34ff 	mov.w	r4, #4294967295
 800be3c:	e7ae      	b.n	800bd9c <wait_on_input+0xac>
 800be3e:	f04f 34ff 	mov.w	r4, #4294967295
 800be42:	e7ab      	b.n	800bd9c <wait_on_input+0xac>
 800be44:	f04f 34ff 	mov.w	r4, #4294967295
    return value;
 800be48:	e7a8      	b.n	800bd9c <wait_on_input+0xac>
 800be4a:	bf00      	nop
 800be4c:	20000788 	.word	0x20000788
 800be50:	20000784 	.word	0x20000784
 800be54:	200011ac 	.word	0x200011ac
 800be58:	2000148c 	.word	0x2000148c
 800be5c:	2000077c 	.word	0x2000077c

0800be60 <ioports_init>:

void ioports_init (pin_group_pins_t *aux_inputs, pin_group_pins_t *aux_outputs)
{
 800be60:	b508      	push	{r3, lr}
    aux_in = aux_inputs->pins.inputs;
 800be62:	6842      	ldr	r2, [r0, #4]
 800be64:	4b1a      	ldr	r3, [pc, #104]	@ (800bed0 <ioports_init+0x70>)
 800be66:	601a      	str	r2, [r3, #0]
    aux_out = aux_outputs->pins.outputs;
 800be68:	684a      	ldr	r2, [r1, #4]
 800be6a:	4b1a      	ldr	r3, [pc, #104]	@ (800bed4 <ioports_init+0x74>)
 800be6c:	601a      	str	r2, [r3, #0]

    hal.port.set_pin_description = set_pin_description;
 800be6e:	4b1a      	ldr	r3, [pc, #104]	@ (800bed8 <ioports_init+0x78>)
 800be70:	4a1a      	ldr	r2, [pc, #104]	@ (800bedc <ioports_init+0x7c>)
 800be72:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    if(ioports_add(&digital, Port_Digital, aux_inputs->n_pins, aux_outputs->n_pins))  {
 800be76:	780b      	ldrb	r3, [r1, #0]
 800be78:	7802      	ldrb	r2, [r0, #0]
 800be7a:	2101      	movs	r1, #1
 800be7c:	4818      	ldr	r0, [pc, #96]	@ (800bee0 <ioports_init+0x80>)
 800be7e:	f005 fcbd 	bl	80117fc <ioports_add>
 800be82:	b1f8      	cbz	r0, 800bec4 <ioports_init+0x64>

        if(digital.in.n_ports) {
 800be84:	4b16      	ldr	r3, [pc, #88]	@ (800bee0 <ioports_init+0x80>)
 800be86:	791b      	ldrb	r3, [r3, #4]
 800be88:	b133      	cbz	r3, 800be98 <ioports_init+0x38>
            hal.port.wait_on_input = wait_on_input;
 800be8a:	4b13      	ldr	r3, [pc, #76]	@ (800bed8 <ioports_init+0x78>)
 800be8c:	4a15      	ldr	r2, [pc, #84]	@ (800bee4 <ioports_init+0x84>)
 800be8e:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
            hal.port.register_interrupt_handler = register_interrupt_handler;
 800be92:	4a15      	ldr	r2, [pc, #84]	@ (800bee8 <ioports_init+0x88>)
 800be94:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
        }

        if(digital.out.n_ports)
 800be98:	4b11      	ldr	r3, [pc, #68]	@ (800bee0 <ioports_init+0x80>)
 800be9a:	7b1b      	ldrb	r3, [r3, #12]
 800be9c:	b11b      	cbz	r3, 800bea6 <ioports_init+0x46>
            hal.port.digital_out = digital_out;
 800be9e:	4b0e      	ldr	r3, [pc, #56]	@ (800bed8 <ioports_init+0x78>)
 800bea0:	4a12      	ldr	r2, [pc, #72]	@ (800beec <ioports_init+0x8c>)
 800bea2:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

        hal.port.claim = claim;
 800bea6:	4b0c      	ldr	r3, [pc, #48]	@ (800bed8 <ioports_init+0x78>)
 800bea8:	4a11      	ldr	r2, [pc, #68]	@ (800bef0 <ioports_init+0x90>)
 800beaa:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
        hal.port.swap_pins = swap_pins;
 800beae:	4a11      	ldr	r2, [pc, #68]	@ (800bef4 <ioports_init+0x94>)
 800beb0:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        hal.port.get_pin_info = get_pin_info;
 800beb4:	4a10      	ldr	r2, [pc, #64]	@ (800bef8 <ioports_init+0x98>)
 800beb6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

        ioports_add_settings(NULL, NULL);
 800beba:	2100      	movs	r1, #0
 800bebc:	4608      	mov	r0, r1
 800bebe:	f006 f93f 	bl	8012140 <ioports_add_settings>

    } else
        hal.port.set_pin_description = NULL;
}
 800bec2:	bd08      	pop	{r3, pc}
        hal.port.set_pin_description = NULL;
 800bec4:	4b04      	ldr	r3, [pc, #16]	@ (800bed8 <ioports_init+0x78>)
 800bec6:	2200      	movs	r2, #0
 800bec8:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
}
 800becc:	e7f9      	b.n	800bec2 <ioports_init+0x62>
 800bece:	bf00      	nop
 800bed0:	20000784 	.word	0x20000784
 800bed4:	20000780 	.word	0x20000780
 800bed8:	200011ac 	.word	0x200011ac
 800bedc:	0800b70d 	.word	0x0800b70d
 800bee0:	20000788 	.word	0x20000788
 800bee4:	0800bcf1 	.word	0x0800bcf1
 800bee8:	0800bc5d 	.word	0x0800bc5d
 800beec:	0800b531 	.word	0x0800b531
 800bef0:	0800baa5 	.word	0x0800baa5
 800bef4:	0800b919 	.word	0x0800b919
 800bef8:	0800b605 	.word	0x0800b605

0800befc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800befc:	b088      	sub	sp, #32
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800befe:	2200      	movs	r2, #0
 800bf00:	9200      	str	r2, [sp, #0]
 800bf02:	4b29      	ldr	r3, [pc, #164]	@ (800bfa8 <MX_GPIO_Init+0xac>)
 800bf04:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf06:	f041 0101 	orr.w	r1, r1, #1
 800bf0a:	6319      	str	r1, [r3, #48]	@ 0x30
 800bf0c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf0e:	f001 0101 	and.w	r1, r1, #1
 800bf12:	9100      	str	r1, [sp, #0]
 800bf14:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf16:	9201      	str	r2, [sp, #4]
 800bf18:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf1a:	f041 0102 	orr.w	r1, r1, #2
 800bf1e:	6319      	str	r1, [r3, #48]	@ 0x30
 800bf20:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf22:	f001 0102 	and.w	r1, r1, #2
 800bf26:	9101      	str	r1, [sp, #4]
 800bf28:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bf2a:	9202      	str	r2, [sp, #8]
 800bf2c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf2e:	f041 0104 	orr.w	r1, r1, #4
 800bf32:	6319      	str	r1, [r3, #48]	@ 0x30
 800bf34:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf36:	f001 0104 	and.w	r1, r1, #4
 800bf3a:	9102      	str	r1, [sp, #8]
 800bf3c:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bf3e:	9203      	str	r2, [sp, #12]
 800bf40:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf42:	f041 0108 	orr.w	r1, r1, #8
 800bf46:	6319      	str	r1, [r3, #48]	@ 0x30
 800bf48:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf4a:	f001 0108 	and.w	r1, r1, #8
 800bf4e:	9103      	str	r1, [sp, #12]
 800bf50:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800bf52:	9204      	str	r2, [sp, #16]
 800bf54:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf56:	f041 0110 	orr.w	r1, r1, #16
 800bf5a:	6319      	str	r1, [r3, #48]	@ 0x30
 800bf5c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf5e:	f001 0110 	and.w	r1, r1, #16
 800bf62:	9104      	str	r1, [sp, #16]
 800bf64:	9904      	ldr	r1, [sp, #16]
#ifdef GPIOF
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800bf66:	9205      	str	r2, [sp, #20]
 800bf68:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf6a:	f041 0120 	orr.w	r1, r1, #32
 800bf6e:	6319      	str	r1, [r3, #48]	@ 0x30
 800bf70:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf72:	f001 0120 	and.w	r1, r1, #32
 800bf76:	9105      	str	r1, [sp, #20]
 800bf78:	9905      	ldr	r1, [sp, #20]
#endif
#ifdef GPIOG
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800bf7a:	9206      	str	r2, [sp, #24]
 800bf7c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf7e:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800bf82:	6319      	str	r1, [r3, #48]	@ 0x30
 800bf84:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf86:	f001 0140 	and.w	r1, r1, #64	@ 0x40
 800bf8a:	9106      	str	r1, [sp, #24]
 800bf8c:	9906      	ldr	r1, [sp, #24]
#endif
#ifdef GPIOH
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bf8e:	9207      	str	r2, [sp, #28]
 800bf90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bf96:	631a      	str	r2, [r3, #48]	@ 0x30
 800bf98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf9e:	9307      	str	r3, [sp, #28]
 800bfa0:	9b07      	ldr	r3, [sp, #28]
#endif
}
 800bfa2:	b008      	add	sp, #32
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	40023800 	.word	0x40023800

0800bfac <SystemClock_Config>:
{
 800bfac:	b510      	push	{r4, lr}
 800bfae:	b094      	sub	sp, #80	@ 0x50
  __HAL_RCC_PWR_CLK_ENABLE();
 800bfb0:	2100      	movs	r1, #0
 800bfb2:	9101      	str	r1, [sp, #4]
 800bfb4:	4b1e      	ldr	r3, [pc, #120]	@ (800c030 <SystemClock_Config+0x84>)
 800bfb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bfb8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800bfbc:	641a      	str	r2, [r3, #64]	@ 0x40
 800bfbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bfc4:	9301      	str	r3, [sp, #4]
 800bfc6:	9b01      	ldr	r3, [sp, #4]
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800bfc8:	9102      	str	r1, [sp, #8]
 800bfca:	4b1a      	ldr	r3, [pc, #104]	@ (800c034 <SystemClock_Config+0x88>)
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bfda:	9302      	str	r3, [sp, #8]
 800bfdc:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitTypeDef RCC_OscInitStruct = {
 800bfde:	2230      	movs	r2, #48	@ 0x30
 800bfe0:	a808      	add	r0, sp, #32
 800bfe2:	f018 fa4c 	bl	802447e <memset>
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	9308      	str	r3, [sp, #32]
 800bfea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800bfee:	9309      	str	r3, [sp, #36]	@ 0x24
 800bff0:	2302      	movs	r3, #2
 800bff2:	930e      	str	r3, [sp, #56]	@ 0x38
 800bff4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800bff8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bffa:	2208      	movs	r2, #8
 800bffc:	9210      	str	r2, [sp, #64]	@ 0x40
 800bffe:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 800c002:	9211      	str	r2, [sp, #68]	@ 0x44
 800c004:	9312      	str	r3, [sp, #72]	@ 0x48
 800c006:	2307      	movs	r3, #7
 800c008:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800c00a:	a808      	add	r0, sp, #32
 800c00c:	f7fd fae6 	bl	80095dc <HAL_RCC_OscConfig>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 800c010:	f10d 0c0c 	add.w	ip, sp, #12
 800c014:	4c08      	ldr	r4, [pc, #32]	@ (800c038 <SystemClock_Config+0x8c>)
 800c016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c018:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c01c:	6823      	ldr	r3, [r4, #0]
 800c01e:	f8cc 3000 	str.w	r3, [ip]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY) != HAL_OK) {
 800c022:	2105      	movs	r1, #5
 800c024:	a803      	add	r0, sp, #12
 800c026:	f7fd fd3d 	bl	8009aa4 <HAL_RCC_ClockConfig>
}
 800c02a:	b014      	add	sp, #80	@ 0x50
 800c02c:	bd10      	pop	{r4, pc}
 800c02e:	bf00      	nop
 800c030:	40023800 	.word	0x40023800
 800c034:	40007000 	.word	0x40007000
 800c038:	080288e8 	.word	0x080288e8

0800c03c <main>:
{
 800c03c:	b508      	push	{r3, lr}
    HAL_Init();
 800c03e:	f7fc ff57 	bl	8008ef0 <HAL_Init>
    SystemClock_Config();
 800c042:	f7ff ffb3 	bl	800bfac <SystemClock_Config>
    MX_GPIO_Init();
 800c046:	f7ff ff59 	bl	800befc <MX_GPIO_Init>
    if(!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 800c04a:	4b0c      	ldr	r3, [pc, #48]	@ (800c07c <main+0x40>)
 800c04c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800c050:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800c054:	d10d      	bne.n	800c072 <main+0x36>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800c056:	4a09      	ldr	r2, [pc, #36]	@ (800c07c <main+0x40>)
 800c058:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
 800c05c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c060:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
        DWT->CYCCNT = 0;
 800c064:	4b06      	ldr	r3, [pc, #24]	@ (800c080 <main+0x44>)
 800c066:	2200      	movs	r2, #0
 800c068:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	f042 0201 	orr.w	r2, r2, #1
 800c070:	601a      	str	r2, [r3, #0]
    grbl_enter();
 800c072:	f005 f887 	bl	8011184 <grbl_enter>
}
 800c076:	2000      	movs	r0, #0
 800c078:	bd08      	pop	{r3, pc}
 800c07a:	bf00      	nop
 800c07c:	e000ed00 	.word	0xe000ed00
 800c080:	e0001000 	.word	0xe0001000

0800c084 <serialClaimPort>:
{
    bool ok = false;
    uint_fast8_t idx = sizeof(serial) / sizeof(io_stream_properties_t);

    do {
        if(serial[--idx].instance == instance) {
 800c084:	4b0c      	ldr	r3, [pc, #48]	@ (800c0b8 <serialClaimPort+0x34>)
 800c086:	785b      	ldrb	r3, [r3, #1]
 800c088:	4283      	cmp	r3, r0
 800c08a:	d001      	beq.n	800c090 <serialClaimPort+0xc>
    bool ok = false;
 800c08c:	2000      	movs	r0, #0
 800c08e:	4770      	bx	lr
            if((ok = serial[idx].flags.claimable && !serial[idx].flags.claimed))
 800c090:	4b09      	ldr	r3, [pc, #36]	@ (800c0b8 <serialClaimPort+0x34>)
 800c092:	789b      	ldrb	r3, [r3, #2]
 800c094:	f3c3 0040 	ubfx	r0, r3, #1, #1
 800c098:	f013 0f02 	tst.w	r3, #2
 800c09c:	d00a      	beq.n	800c0b4 <serialClaimPort+0x30>
 800c09e:	4b06      	ldr	r3, [pc, #24]	@ (800c0b8 <serialClaimPort+0x34>)
 800c0a0:	789b      	ldrb	r3, [r3, #2]
 800c0a2:	f013 0f04 	tst.w	r3, #4
 800c0a6:	d104      	bne.n	800c0b2 <serialClaimPort+0x2e>
                serial[idx].flags.claimed = On;
 800c0a8:	4a03      	ldr	r2, [pc, #12]	@ (800c0b8 <serialClaimPort+0x34>)
 800c0aa:	f043 0304 	orr.w	r3, r3, #4
 800c0ae:	7093      	strb	r3, [r2, #2]
 800c0b0:	4770      	bx	lr
            if((ok = serial[idx].flags.claimable && !serial[idx].flags.claimed))
 800c0b2:	2000      	movs	r0, #0
        }

    } while(idx);

    return ok;
}
 800c0b4:	4770      	bx	lr
 800c0b6:	bf00      	nop
 800c0b8:	20000180 	.word	0x20000180

0800c0bc <serialRxFree>:
//
// Returns number of free characters in serial input buffer
//
static uint16_t serialRxFree (void)
{
    uint16_t tail = rxbuf.tail, head = rxbuf.head;
 800c0bc:	4b08      	ldr	r3, [pc, #32]	@ (800c0e0 <serialRxFree+0x24>)
 800c0be:	6858      	ldr	r0, [r3, #4]
 800c0c0:	b280      	uxth	r0, r0
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	b29b      	uxth	r3, r3

    return (RX_BUFFER_SIZE - 1) - BUFCOUNT(head, tail, RX_BUFFER_SIZE);
 800c0c6:	4298      	cmp	r0, r3
 800c0c8:	d804      	bhi.n	800c0d4 <serialRxFree+0x18>
 800c0ca:	1ac0      	subs	r0, r0, r3
 800c0cc:	f200 30ff 	addw	r0, r0, #1023	@ 0x3ff
 800c0d0:	b280      	uxth	r0, r0
 800c0d2:	4770      	bx	lr
 800c0d4:	1ac0      	subs	r0, r0, r3
 800c0d6:	b280      	uxth	r0, r0
 800c0d8:	3801      	subs	r0, #1
 800c0da:	b280      	uxth	r0, r0
}
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop
 800c0e0:	200009a8 	.word	0x200009a8

0800c0e4 <serialRxCount>:
//
// Returns number of characters in serial input buffer
//
static uint16_t serialRxCount (void)
{
    uint32_t tail = rxbuf.tail, head = rxbuf.head;
 800c0e4:	4a07      	ldr	r2, [pc, #28]	@ (800c104 <serialRxCount+0x20>)
 800c0e6:	6853      	ldr	r3, [r2, #4]
 800c0e8:	6810      	ldr	r0, [r2, #0]

    return BUFCOUNT(head, tail, RX_BUFFER_SIZE);
 800c0ea:	4283      	cmp	r3, r0
 800c0ec:	d804      	bhi.n	800c0f8 <serialRxCount+0x14>
 800c0ee:	b280      	uxth	r0, r0
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	1ac0      	subs	r0, r0, r3
 800c0f4:	b280      	uxth	r0, r0
 800c0f6:	4770      	bx	lr
 800c0f8:	1ac0      	subs	r0, r0, r3
 800c0fa:	b280      	uxth	r0, r0
 800c0fc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800c100:	b280      	uxth	r0, r0
}
 800c102:	4770      	bx	lr
 800c104:	200009a8 	.word	0x200009a8

0800c108 <serialRxFlush>:
//
// Flushes the serial input buffer
//
static void serialRxFlush (void)
{
    rxbuf.tail = rxbuf.head;
 800c108:	4b01      	ldr	r3, [pc, #4]	@ (800c110 <serialRxFlush+0x8>)
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	605a      	str	r2, [r3, #4]
}
 800c10e:	4770      	bx	lr
 800c110:	200009a8 	.word	0x200009a8

0800c114 <serialRxCancel>:
//
// Flushes and adds a CAN character to the serial input buffer
//
static void serialRxCancel (void)
{
    rxbuf.data[rxbuf.head] = ASCII_CAN;
 800c114:	4b06      	ldr	r3, [pc, #24]	@ (800c130 <serialRxCancel+0x1c>)
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	441a      	add	r2, r3
 800c11a:	2118      	movs	r1, #24
 800c11c:	72d1      	strb	r1, [r2, #11]
    rxbuf.tail = rxbuf.head;
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	605a      	str	r2, [r3, #4]
    rxbuf.head = BUFNEXT(rxbuf.head, rxbuf);
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	3201      	adds	r2, #1
 800c126:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c12a:	601a      	str	r2, [r3, #0]
}
 800c12c:	4770      	bx	lr
 800c12e:	bf00      	nop
 800c130:	200009a8 	.word	0x200009a8

0800c134 <serialPutC>:

//
// Writes a character to the serial output stream
//
static bool serialPutC (const char c)
{
 800c134:	b538      	push	{r3, r4, r5, lr}
 800c136:	4605      	mov	r5, r0
    uint16_t next_head = BUFNEXT(txbuf.head, txbuf);    // Get pointer to next free slot in buffer
 800c138:	4b0e      	ldr	r3, [pc, #56]	@ (800c174 <serialPutC+0x40>)
 800c13a:	681c      	ldr	r4, [r3, #0]
 800c13c:	3401      	adds	r4, #1
 800c13e:	f3c4 0408 	ubfx	r4, r4, #0, #9

    while(txbuf.tail == next_head) {                    // While TX buffer full
 800c142:	4b0c      	ldr	r3, [pc, #48]	@ (800c174 <serialPutC+0x40>)
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	42a3      	cmp	r3, r4
 800c148:	d107      	bne.n	800c15a <serialPutC+0x26>
        if(!hal.stream_blocking_callback())             // check if blocking for space,
 800c14a:	4b0b      	ldr	r3, [pc, #44]	@ (800c178 <serialPutC+0x44>)
 800c14c:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800c150:	4798      	blx	r3
 800c152:	4603      	mov	r3, r0
 800c154:	2800      	cmp	r0, #0
 800c156:	d1f4      	bne.n	800c142 <serialPutC+0xe>
 800c158:	e00a      	b.n	800c170 <serialPutC+0x3c>
            return false;                               // exit if not (leaves TX buffer in an inconsistent state)
    }
    txbuf.data[txbuf.head] = c;                         // Add data to buffer,
 800c15a:	4b06      	ldr	r3, [pc, #24]	@ (800c174 <serialPutC+0x40>)
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	441a      	add	r2, r3
 800c160:	7215      	strb	r5, [r2, #8]
    txbuf.head = next_head;                             // update head pointer and
 800c162:	601c      	str	r4, [r3, #0]
    UART0->CR1 |= USART_CR1_TXEIE;                      // enable TX interrupts
 800c164:	4a05      	ldr	r2, [pc, #20]	@ (800c17c <serialPutC+0x48>)
 800c166:	68d3      	ldr	r3, [r2, #12]
 800c168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c16c:	60d3      	str	r3, [r2, #12]

    return true;
 800c16e:	2301      	movs	r3, #1
}
 800c170:	4618      	mov	r0, r3
 800c172:	bd38      	pop	{r3, r4, r5, pc}
 800c174:	200007a0 	.word	0x200007a0
 800c178:	200011ac 	.word	0x200011ac
 800c17c:	40004400 	.word	0x40004400

0800c180 <serialWriteS>:

//
// Writes a null terminated string to the serial output stream, blocks if buffer full
//
static void serialWriteS (const char *s)
{
 800c180:	b510      	push	{r4, lr}
 800c182:	4604      	mov	r4, r0
    char c, *ptr = (char *)s;

    while((c = *ptr++) != '\0')
 800c184:	e001      	b.n	800c18a <serialWriteS+0xa>
        serialPutC(c);
 800c186:	f7ff ffd5 	bl	800c134 <serialPutC>
    while((c = *ptr++) != '\0')
 800c18a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c18e:	2800      	cmp	r0, #0
 800c190:	d1f9      	bne.n	800c186 <serialWriteS+0x6>
}
 800c192:	bd10      	pop	{r4, pc}

0800c194 <serialWrite>:

//
// Writes a number of characters from string to the serial output stream followed by EOL, blocks if buffer full
//
static void serialWrite (const char *s, uint16_t length)
{
 800c194:	b538      	push	{r3, r4, r5, lr}
 800c196:	4604      	mov	r4, r0
    char *ptr = (char *)s;

    while(length--)
 800c198:	e004      	b.n	800c1a4 <serialWrite+0x10>
        serialPutC(*ptr++);
 800c19a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c19e:	f7ff ffc9 	bl	800c134 <serialPutC>
    while(length--)
 800c1a2:	4629      	mov	r1, r5
 800c1a4:	1e4b      	subs	r3, r1, #1
 800c1a6:	b29d      	uxth	r5, r3
 800c1a8:	2900      	cmp	r1, #0
 800c1aa:	d1f6      	bne.n	800c19a <serialWrite+0x6>
}
 800c1ac:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c1b0 <serialTxFlush>:
//
// Flushes the serial output buffer
//
static void serialTxFlush (void)
{
    UART0->CR1 &= ~USART_CR1_TXEIE;     // Disable TX interrupts
 800c1b0:	4a04      	ldr	r2, [pc, #16]	@ (800c1c4 <serialTxFlush+0x14>)
 800c1b2:	68d3      	ldr	r3, [r2, #12]
 800c1b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c1b8:	60d3      	str	r3, [r2, #12]
    txbuf.tail = txbuf.head;
 800c1ba:	4b03      	ldr	r3, [pc, #12]	@ (800c1c8 <serialTxFlush+0x18>)
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	605a      	str	r2, [r3, #4]
}
 800c1c0:	4770      	bx	lr
 800c1c2:	bf00      	nop
 800c1c4:	40004400 	.word	0x40004400
 800c1c8:	200007a0 	.word	0x200007a0

0800c1cc <serialTxCount>:
//
// Returns number of characters pending transmission
//
static uint16_t serialTxCount (void)
{
    uint32_t tail = txbuf.tail, head = txbuf.head;
 800c1cc:	4b0c      	ldr	r3, [pc, #48]	@ (800c200 <serialTxCount+0x34>)
 800c1ce:	685a      	ldr	r2, [r3, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]

    return BUFCOUNT(head, tail, TX_BUFFER_SIZE) + (UART0->SR & USART_SR_TC ? 0 : 1);
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d80d      	bhi.n	800c1f2 <serialTxCount+0x26>
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	b292      	uxth	r2, r2
 800c1da:	1a9b      	subs	r3, r3, r2
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	4a09      	ldr	r2, [pc, #36]	@ (800c204 <serialTxCount+0x38>)
 800c1e0:	6812      	ldr	r2, [r2, #0]
 800c1e2:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800c1e6:	bf0c      	ite	eq
 800c1e8:	2001      	moveq	r0, #1
 800c1ea:	2000      	movne	r0, #0
 800c1ec:	4418      	add	r0, r3
}
 800c1ee:	b280      	uxth	r0, r0
 800c1f0:	4770      	bx	lr
    return BUFCOUNT(head, tail, TX_BUFFER_SIZE) + (UART0->SR & USART_SR_TC ? 0 : 1);
 800c1f2:	1a9b      	subs	r3, r3, r2
 800c1f4:	b29b      	uxth	r3, r3
 800c1f6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	e7ef      	b.n	800c1de <serialTxCount+0x12>
 800c1fe:	bf00      	nop
 800c200:	200007a0 	.word	0x200007a0
 800c204:	40004400 	.word	0x40004400

0800c208 <serialGetC>:
//
// serialGetC - returns -1 if no data available
//
static int16_t serialGetC (void)
{
    uint_fast16_t tail = rxbuf.tail;    // Get buffer pointer
 800c208:	4a07      	ldr	r2, [pc, #28]	@ (800c228 <serialGetC+0x20>)
 800c20a:	6853      	ldr	r3, [r2, #4]

    if(tail == rxbuf.head)
 800c20c:	6812      	ldr	r2, [r2, #0]
 800c20e:	429a      	cmp	r2, r3
 800c210:	d007      	beq.n	800c222 <serialGetC+0x1a>
        return -1; // no data available

    char data = rxbuf.data[tail];       // Get next character
 800c212:	4a05      	ldr	r2, [pc, #20]	@ (800c228 <serialGetC+0x20>)
 800c214:	18d1      	adds	r1, r2, r3
    rxbuf.tail = BUFNEXT(tail, rxbuf);  // and update pointer
 800c216:	3301      	adds	r3, #1
 800c218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c21c:	6053      	str	r3, [r2, #4]

    return (int16_t)data;
 800c21e:	7ac8      	ldrb	r0, [r1, #11]
 800c220:	4770      	bx	lr
        return -1; // no data available
 800c222:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c226:	4770      	bx	lr
 800c228:	200009a8 	.word	0x200009a8

0800c22c <serialDisable>:
    return true;
}

static bool serialDisable (bool disable)
{
    if(disable)
 800c22c:	b130      	cbz	r0, 800c23c <serialDisable+0x10>
        UART0->CR1 &= ~USART_CR1_RXNEIE;
 800c22e:	4a06      	ldr	r2, [pc, #24]	@ (800c248 <serialDisable+0x1c>)
 800c230:	68d3      	ldr	r3, [r2, #12]
 800c232:	f023 0320 	bic.w	r3, r3, #32
 800c236:	60d3      	str	r3, [r2, #12]
    else
        UART0->CR1 |= USART_CR1_RXNEIE;

    return true;
}
 800c238:	2001      	movs	r0, #1
 800c23a:	4770      	bx	lr
        UART0->CR1 |= USART_CR1_RXNEIE;
 800c23c:	4a02      	ldr	r2, [pc, #8]	@ (800c248 <serialDisable+0x1c>)
 800c23e:	68d3      	ldr	r3, [r2, #12]
 800c240:	f043 0320 	orr.w	r3, r3, #32
 800c244:	60d3      	str	r3, [r2, #12]
 800c246:	e7f7      	b.n	800c238 <serialDisable+0xc>
 800c248:	40004400 	.word	0x40004400

0800c24c <serialEnqueueRtCommand>:

static bool serialEnqueueRtCommand (char c)
{
 800c24c:	b508      	push	{r3, lr}
    return enqueue_realtime_command(c);
 800c24e:	4b02      	ldr	r3, [pc, #8]	@ (800c258 <serialEnqueueRtCommand+0xc>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4798      	blx	r3
}
 800c254:	bd08      	pop	{r3, pc}
 800c256:	bf00      	nop
 800c258:	20000188 	.word	0x20000188

0800c25c <serialSetRtHandler>:

static enqueue_realtime_command_ptr serialSetRtHandler (enqueue_realtime_command_ptr handler)
{
 800c25c:	4603      	mov	r3, r0
    enqueue_realtime_command_ptr prev = enqueue_realtime_command;
 800c25e:	4a03      	ldr	r2, [pc, #12]	@ (800c26c <serialSetRtHandler+0x10>)
 800c260:	6810      	ldr	r0, [r2, #0]

    if(handler)
 800c262:	461a      	mov	r2, r3
 800c264:	b10b      	cbz	r3, 800c26a <serialSetRtHandler+0xe>
        enqueue_realtime_command = handler;
 800c266:	4b01      	ldr	r3, [pc, #4]	@ (800c26c <serialSetRtHandler+0x10>)
 800c268:	601a      	str	r2, [r3, #0]

    return prev;
}
 800c26a:	4770      	bx	lr
 800c26c:	20000188 	.word	0x20000188

0800c270 <serialSetBaudRate>:
{
 800c270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c274:	4607      	mov	r7, r0
    UART0->CR1 = USART_CR1_RE|USART_CR1_TE;
 800c276:	f8df a130 	ldr.w	sl, [pc, #304]	@ 800c3a8 <serialSetBaudRate+0x138>
 800c27a:	230c      	movs	r3, #12
 800c27c:	f8ca 300c 	str.w	r3, [sl, #12]
    UART0->BRR = UART_BRR_SAMPLING16(UART0_CLK, baud_rate);
 800c280:	f7fd fcc6 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 800c284:	2400      	movs	r4, #0
 800c286:	1803      	adds	r3, r0, r0
 800c288:	eb44 0104 	adc.w	r1, r4, r4
 800c28c:	181b      	adds	r3, r3, r0
 800c28e:	f141 0100 	adc.w	r1, r1, #0
 800c292:	00c9      	lsls	r1, r1, #3
 800c294:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800c298:	00db      	lsls	r3, r3, #3
 800c29a:	1818      	adds	r0, r3, r0
 800c29c:	ea4f 7997 	mov.w	r9, r7, lsr #30
 800c2a0:	ea4f 0787 	mov.w	r7, r7, lsl #2
 800c2a4:	463a      	mov	r2, r7
 800c2a6:	464b      	mov	r3, r9
 800c2a8:	f141 0100 	adc.w	r1, r1, #0
 800c2ac:	f7fc fc34 	bl	8008b18 <__aeabi_uldivmod>
 800c2b0:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 800c3ac <serialSetBaudRate+0x13c>
 800c2b4:	fba8 3500 	umull	r3, r5, r8, r0
 800c2b8:	096d      	lsrs	r5, r5, #5
 800c2ba:	012d      	lsls	r5, r5, #4
 800c2bc:	f7fd fca8 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 800c2c0:	1803      	adds	r3, r0, r0
 800c2c2:	eb44 0104 	adc.w	r1, r4, r4
 800c2c6:	181b      	adds	r3, r3, r0
 800c2c8:	f141 0100 	adc.w	r1, r1, #0
 800c2cc:	00c9      	lsls	r1, r1, #3
 800c2ce:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800c2d2:	00db      	lsls	r3, r3, #3
 800c2d4:	1818      	adds	r0, r3, r0
 800c2d6:	463a      	mov	r2, r7
 800c2d8:	464b      	mov	r3, r9
 800c2da:	f141 0100 	adc.w	r1, r1, #0
 800c2de:	f7fc fc1b 	bl	8008b18 <__aeabi_uldivmod>
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	f7fd fc94 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 800c2e8:	1803      	adds	r3, r0, r0
 800c2ea:	eb44 0104 	adc.w	r1, r4, r4
 800c2ee:	181b      	adds	r3, r3, r0
 800c2f0:	f141 0100 	adc.w	r1, r1, #0
 800c2f4:	00c9      	lsls	r1, r1, #3
 800c2f6:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800c2fa:	00db      	lsls	r3, r3, #3
 800c2fc:	1818      	adds	r0, r3, r0
 800c2fe:	463a      	mov	r2, r7
 800c300:	464b      	mov	r3, r9
 800c302:	f141 0100 	adc.w	r1, r1, #0
 800c306:	f7fc fc07 	bl	8008b18 <__aeabi_uldivmod>
 800c30a:	fba8 3000 	umull	r3, r0, r8, r0
 800c30e:	0940      	lsrs	r0, r0, #5
 800c310:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 800c314:	fb0b 6310 	mls	r3, fp, r0, r6
 800c318:	011b      	lsls	r3, r3, #4
 800c31a:	3332      	adds	r3, #50	@ 0x32
 800c31c:	fba8 2303 	umull	r2, r3, r8, r3
 800c320:	095b      	lsrs	r3, r3, #5
 800c322:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c326:	441d      	add	r5, r3
 800c328:	f7fd fc72 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 800c32c:	1803      	adds	r3, r0, r0
 800c32e:	eb44 0104 	adc.w	r1, r4, r4
 800c332:	181b      	adds	r3, r3, r0
 800c334:	f141 0100 	adc.w	r1, r1, #0
 800c338:	00c9      	lsls	r1, r1, #3
 800c33a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800c33e:	00db      	lsls	r3, r3, #3
 800c340:	1818      	adds	r0, r3, r0
 800c342:	463a      	mov	r2, r7
 800c344:	464b      	mov	r3, r9
 800c346:	f141 0100 	adc.w	r1, r1, #0
 800c34a:	f7fc fbe5 	bl	8008b18 <__aeabi_uldivmod>
 800c34e:	4606      	mov	r6, r0
 800c350:	f7fd fc5e 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 800c354:	1803      	adds	r3, r0, r0
 800c356:	4164      	adcs	r4, r4
 800c358:	181b      	adds	r3, r3, r0
 800c35a:	f144 0100 	adc.w	r1, r4, #0
 800c35e:	00c9      	lsls	r1, r1, #3
 800c360:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800c364:	00db      	lsls	r3, r3, #3
 800c366:	1818      	adds	r0, r3, r0
 800c368:	463a      	mov	r2, r7
 800c36a:	464b      	mov	r3, r9
 800c36c:	f141 0100 	adc.w	r1, r1, #0
 800c370:	f7fc fbd2 	bl	8008b18 <__aeabi_uldivmod>
 800c374:	fba8 3000 	umull	r3, r0, r8, r0
 800c378:	0940      	lsrs	r0, r0, #5
 800c37a:	fb0b 6310 	mls	r3, fp, r0, r6
 800c37e:	011b      	lsls	r3, r3, #4
 800c380:	3332      	adds	r3, #50	@ 0x32
 800c382:	fba8 8303 	umull	r8, r3, r8, r3
 800c386:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800c38a:	441d      	add	r5, r3
 800c38c:	f8ca 5008 	str.w	r5, [sl, #8]
    UART0->CR1 |= (USART_CR1_UE|USART_CR1_RXNEIE);
 800c390:	f8da 300c 	ldr.w	r3, [sl, #12]
 800c394:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c398:	f043 0320 	orr.w	r3, r3, #32
 800c39c:	f8ca 300c 	str.w	r3, [sl, #12]
}
 800c3a0:	2001      	movs	r0, #1
 800c3a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a6:	bf00      	nop
 800c3a8:	40004400 	.word	0x40004400
 800c3ac:	51eb851f 	.word	0x51eb851f

0800c3b0 <serialInit>:

static const io_stream_t *serialInit (uint32_t baud_rate)
{
 800c3b0:	b570      	push	{r4, r5, r6, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	4605      	mov	r5, r0
        .disable_rx = serialDisable,
        .set_baud_rate = serialSetBaudRate,
        .set_enqueue_rt_handler = serialSetRtHandler
    };

    if(!serialClaimPort(stream.instance))
 800c3b6:	2000      	movs	r0, #0
 800c3b8:	f7ff fe64 	bl	800c084 <serialClaimPort>
 800c3bc:	b330      	cbz	r0, 800c40c <serialInit+0x5c>
        return NULL;

    UART0_CLK_En();
 800c3be:	2600      	movs	r6, #0
 800c3c0:	9600      	str	r6, [sp, #0]
 800c3c2:	4b13      	ldr	r3, [pc, #76]	@ (800c410 <serialInit+0x60>)
 800c3c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c3c6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c3ca:	641a      	str	r2, [r3, #64]	@ 0x40
 800c3cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c3d2:	9300      	str	r3, [sp, #0]
 800c3d4:	9b00      	ldr	r3, [sp, #0]

    GPIO_InitTypeDef GPIO_InitStructure = {
 800c3d6:	f10d 0c04 	add.w	ip, sp, #4
 800c3da:	4c0e      	ldr	r4, [pc, #56]	@ (800c414 <serialInit+0x64>)
 800c3dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c3de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	f8cc 3000 	str.w	r3, [ip]
        .Pull      = GPIO_NOPULL,
        .Speed     = GPIO_SPEED_FREQ_VERY_HIGH,
        .Pin       = (1 << UART0_RX_PIN)|(1 << UART0_TX_PIN),
        .Alternate = UART0_AF
    };
    HAL_GPIO_Init(UART0_PORT, &GPIO_InitStructure);
 800c3e8:	a901      	add	r1, sp, #4
 800c3ea:	480b      	ldr	r0, [pc, #44]	@ (800c418 <serialInit+0x68>)
 800c3ec:	f7fd f80e 	bl	800940c <HAL_GPIO_Init>

    serialSetBaudRate(baud_rate);
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	f7ff ff3d 	bl	800c270 <serialSetBaudRate>

    HAL_NVIC_SetPriority(UART0_IRQ, 0, 0);
 800c3f6:	4632      	mov	r2, r6
 800c3f8:	4631      	mov	r1, r6
 800c3fa:	2026      	movs	r0, #38	@ 0x26
 800c3fc:	f7fc fdfc 	bl	8008ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART0_IRQ);
 800c400:	2026      	movs	r0, #38	@ 0x26
 800c402:	f7fc fe09 	bl	8009018 <HAL_NVIC_EnableIRQ>

    return &stream;
 800c406:	4805      	ldr	r0, [pc, #20]	@ (800c41c <serialInit+0x6c>)
}
 800c408:	b006      	add	sp, #24
 800c40a:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
 800c40c:	2000      	movs	r0, #0
 800c40e:	e7fb      	b.n	800c408 <serialInit+0x58>
 800c410:	40023800 	.word	0x40023800
 800c414:	080288fc 	.word	0x080288fc
 800c418:	40020000 	.word	0x40020000
 800c41c:	08028958 	.word	0x08028958

0800c420 <serialSuspendInput>:
{
 800c420:	b508      	push	{r3, lr}
 800c422:	4601      	mov	r1, r0
    return stream_rx_suspend(&rxbuf, suspend);
 800c424:	4801      	ldr	r0, [pc, #4]	@ (800c42c <serialSuspendInput+0xc>)
 800c426:	f013 ff0f 	bl	8020248 <stream_rx_suspend>
}
 800c42a:	bd08      	pop	{r3, pc}
 800c42c:	200009a8 	.word	0x200009a8

0800c430 <serialRegisterStreams>:
{
 800c430:	b510      	push	{r4, lr}
    hal.periph_port.register_pin(&rx0);
 800c432:	4c06      	ldr	r4, [pc, #24]	@ (800c44c <serialRegisterStreams+0x1c>)
 800c434:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
 800c438:	4805      	ldr	r0, [pc, #20]	@ (800c450 <serialRegisterStreams+0x20>)
 800c43a:	4798      	blx	r3
    hal.periph_port.register_pin(&tx0);
 800c43c:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
 800c440:	4804      	ldr	r0, [pc, #16]	@ (800c454 <serialRegisterStreams+0x24>)
 800c442:	4798      	blx	r3
    stream_register_streams(&streams);
 800c444:	4804      	ldr	r0, [pc, #16]	@ (800c458 <serialRegisterStreams+0x28>)
 800c446:	f013 fec5 	bl	80201d4 <stream_register_streams>
}
 800c44a:	bd10      	pop	{r4, pc}
 800c44c:	200011ac 	.word	0x200011ac
 800c450:	080289c4 	.word	0x080289c4
 800c454:	080289ac 	.word	0x080289ac
 800c458:	20000174 	.word	0x20000174

0800c45c <USART2_IRQHandler>:

void UART0_IRQHandler (void)
{
 800c45c:	b510      	push	{r4, lr}
    if(UART0->SR & USART_SR_RXNE) {
 800c45e:	4b1d      	ldr	r3, [pc, #116]	@ (800c4d4 <USART2_IRQHandler+0x78>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f013 0f20 	tst.w	r3, #32
 800c466:	d014      	beq.n	800c492 <USART2_IRQHandler+0x36>
        uint32_t data = UART0->DR;
 800c468:	4b1a      	ldr	r3, [pc, #104]	@ (800c4d4 <USART2_IRQHandler+0x78>)
 800c46a:	685c      	ldr	r4, [r3, #4]
        if(!enqueue_realtime_command((char)data)) {             // Check and strip realtime commands...
 800c46c:	b2e4      	uxtb	r4, r4
 800c46e:	4b1a      	ldr	r3, [pc, #104]	@ (800c4d8 <USART2_IRQHandler+0x7c>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4620      	mov	r0, r4
 800c474:	4798      	blx	r3
 800c476:	b960      	cbnz	r0, 800c492 <USART2_IRQHandler+0x36>
            uint16_t next_head = BUFNEXT(rxbuf.head, rxbuf);    // Get and increment buffer pointer
 800c478:	4a18      	ldr	r2, [pc, #96]	@ (800c4dc <USART2_IRQHandler+0x80>)
 800c47a:	6813      	ldr	r3, [r2, #0]
 800c47c:	3301      	adds	r3, #1
 800c47e:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if(next_head == rxbuf.tail)                         // If buffer full
 800c482:	6852      	ldr	r2, [r2, #4]
 800c484:	4293      	cmp	r3, r2
 800c486:	d01c      	beq.n	800c4c2 <USART2_IRQHandler+0x66>
                rxbuf.overflow = 1;                             // flag overflow
            else {
                rxbuf.data[rxbuf.head] = (char)data;            // if not add data to buffer
 800c488:	4a14      	ldr	r2, [pc, #80]	@ (800c4dc <USART2_IRQHandler+0x80>)
 800c48a:	6811      	ldr	r1, [r2, #0]
 800c48c:	4411      	add	r1, r2
 800c48e:	72cc      	strb	r4, [r1, #11]
                rxbuf.head = next_head;                         // and update pointer
 800c490:	6013      	str	r3, [r2, #0]
            }
        }
    }

    if((UART0->SR & USART_SR_TXE) && (UART0->CR1 & USART_CR1_TXEIE)) {
 800c492:	4b10      	ldr	r3, [pc, #64]	@ (800c4d4 <USART2_IRQHandler+0x78>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c49a:	d011      	beq.n	800c4c0 <USART2_IRQHandler+0x64>
 800c49c:	4b0d      	ldr	r3, [pc, #52]	@ (800c4d4 <USART2_IRQHandler+0x78>)
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c4a4:	d00c      	beq.n	800c4c0 <USART2_IRQHandler+0x64>
        uint_fast16_t tail = txbuf.tail;            // Get buffer pointer
 800c4a6:	4a0e      	ldr	r2, [pc, #56]	@ (800c4e0 <USART2_IRQHandler+0x84>)
 800c4a8:	6853      	ldr	r3, [r2, #4]
        UART0->DR = txbuf.data[tail];               // Send next character
 800c4aa:	18d1      	adds	r1, r2, r3
 800c4ac:	7a08      	ldrb	r0, [r1, #8]
 800c4ae:	4909      	ldr	r1, [pc, #36]	@ (800c4d4 <USART2_IRQHandler+0x78>)
 800c4b0:	6048      	str	r0, [r1, #4]
        txbuf.tail = tail = BUFNEXT(tail, txbuf);   // and increment pointer
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4b8:	6053      	str	r3, [r2, #4]
        if(tail == txbuf.head)                      // If buffer empty then
 800c4ba:	6812      	ldr	r2, [r2, #0]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d004      	beq.n	800c4ca <USART2_IRQHandler+0x6e>
            UART0->CR1 &= ~USART_CR1_TXEIE;         // disable UART TX interrupt
   }
}
 800c4c0:	bd10      	pop	{r4, pc}
                rxbuf.overflow = 1;                             // flag overflow
 800c4c2:	4b06      	ldr	r3, [pc, #24]	@ (800c4dc <USART2_IRQHandler+0x80>)
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	725a      	strb	r2, [r3, #9]
 800c4c8:	e7e3      	b.n	800c492 <USART2_IRQHandler+0x36>
            UART0->CR1 &= ~USART_CR1_TXEIE;         // disable UART TX interrupt
 800c4ca:	68cb      	ldr	r3, [r1, #12]
 800c4cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c4d0:	60cb      	str	r3, [r1, #12]
}
 800c4d2:	e7f5      	b.n	800c4c0 <USART2_IRQHandler+0x64>
 800c4d4:	40004400 	.word	0x40004400
 800c4d8:	20000188 	.word	0x20000188
 800c4dc:	200009a8 	.word	0x200009a8
 800c4e0:	200007a0 	.word	0x200007a0

0800c4e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c4e4:	b500      	push	{lr}
 800c4e6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	9100      	str	r1, [sp, #0]
 800c4ec:	4b0c      	ldr	r3, [pc, #48]	@ (800c520 <HAL_MspInit+0x3c>)
 800c4ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c4f4:	645a      	str	r2, [r3, #68]	@ 0x44
 800c4f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4f8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800c4fc:	9200      	str	r2, [sp, #0]
 800c4fe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c500:	9101      	str	r1, [sp, #4]
 800c502:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c504:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800c508:	641a      	str	r2, [r3, #64]	@ 0x40
 800c50a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c50c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c510:	9301      	str	r3, [sp, #4]
 800c512:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800c514:	2005      	movs	r0, #5
 800c516:	f7fc fd5d 	bl	8008fd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c51a:	b003      	add	sp, #12
 800c51c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c520:	40023800 	.word	0x40023800

0800c524 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c524:	4770      	bx	lr

0800c526 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c526:	e7fe      	b.n	800c526 <HardFault_Handler>

0800c528 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c528:	e7fe      	b.n	800c528 <MemManage_Handler>

0800c52a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c52a:	e7fe      	b.n	800c52a <BusFault_Handler>

0800c52c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c52c:	e7fe      	b.n	800c52c <UsageFault_Handler>

0800c52e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c52e:	4770      	bx	lr

0800c530 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c530:	4770      	bx	lr

0800c532 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c532:	4770      	bx	lr

0800c534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c534:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  cycle_count = DWT->CYCCNT;
 800c536:	4b04      	ldr	r3, [pc, #16]	@ (800c548 <SysTick_Handler+0x14>)
 800c538:	685a      	ldr	r2, [r3, #4]
 800c53a:	4b04      	ldr	r3, [pc, #16]	@ (800c54c <SysTick_Handler+0x18>)
 800c53c:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c53e:	f7fc fcf1 	bl	8008f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Driver_IncTick();
 800c542:	f7fe ff87 	bl	800b454 <Driver_IncTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 800c546:	bd08      	pop	{r3, pc}
 800c548:	e0001000 	.word	0xe0001000
 800c54c:	20000db4 	.word	0x20000db4

0800c550 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800c550:	2001      	movs	r0, #1
 800c552:	4770      	bx	lr

0800c554 <_kill>:

int _kill(int pid, int sig)
{
 800c554:	b508      	push	{r3, lr}
	errno = EINVAL;
 800c556:	f018 f8bd 	bl	80246d4 <__errno>
 800c55a:	2316      	movs	r3, #22
 800c55c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800c55e:	f04f 30ff 	mov.w	r0, #4294967295
 800c562:	bd08      	pop	{r3, pc}

0800c564 <_exit>:

void _exit (int status)
{
 800c564:	b508      	push	{r3, lr}
	_kill(status, -1);
 800c566:	f04f 31ff 	mov.w	r1, #4294967295
 800c56a:	f7ff fff3 	bl	800c554 <_kill>
	while (1) {}		/* Make sure we hang here */
 800c56e:	e7fe      	b.n	800c56e <_exit+0xa>

0800c570 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c570:	b570      	push	{r4, r5, r6, lr}
 800c572:	460c      	mov	r4, r1
 800c574:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c576:	2500      	movs	r5, #0
 800c578:	e006      	b.n	800c588 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800c57a:	f3af 8000 	nop.w
 800c57e:	4621      	mov	r1, r4
 800c580:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c584:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800c586:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c588:	42b5      	cmp	r5, r6
 800c58a:	dbf6      	blt.n	800c57a <_read+0xa>
	}

return len;
}
 800c58c:	4630      	mov	r0, r6
 800c58e:	bd70      	pop	{r4, r5, r6, pc}

0800c590 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c590:	b570      	push	{r4, r5, r6, lr}
 800c592:	460c      	mov	r4, r1
 800c594:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c596:	2500      	movs	r5, #0
 800c598:	e004      	b.n	800c5a4 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800c59a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c59e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c5a2:	3501      	adds	r5, #1
 800c5a4:	42b5      	cmp	r5, r6
 800c5a6:	dbf8      	blt.n	800c59a <_write+0xa>
	}
	return len;
}
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	bd70      	pop	{r4, r5, r6, pc}

0800c5ac <_close>:

int _close(int file)
{
	return -1;
}
 800c5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b0:	4770      	bx	lr

0800c5b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800c5b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c5b6:	604b      	str	r3, [r1, #4]
	return 0;
}
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	4770      	bx	lr

0800c5bc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800c5bc:	2001      	movs	r0, #1
 800c5be:	4770      	bx	lr

0800c5c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800c5c0:	2000      	movs	r0, #0
 800c5c2:	4770      	bx	lr

0800c5c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void *_sbrk(int incr)
{
 800c5c4:	b508      	push	{r3, lr}
 800c5c6:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c5c8:	4a0b      	ldr	r2, [pc, #44]	@ (800c5f8 <_sbrk+0x34>)
 800c5ca:	6812      	ldr	r2, [r2, #0]
 800c5cc:	b142      	cbz	r2, 800c5e0 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800c5ce:	4a0a      	ldr	r2, [pc, #40]	@ (800c5f8 <_sbrk+0x34>)
 800c5d0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800c5d2:	4403      	add	r3, r0
 800c5d4:	466a      	mov	r2, sp
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d806      	bhi.n	800c5e8 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (void *)-1;
	}

	heap_end += incr;
 800c5da:	4a07      	ldr	r2, [pc, #28]	@ (800c5f8 <_sbrk+0x34>)
 800c5dc:	6013      	str	r3, [r2, #0]

	return (void *)prev_heap_end;
}
 800c5de:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800c5e0:	4a05      	ldr	r2, [pc, #20]	@ (800c5f8 <_sbrk+0x34>)
 800c5e2:	4906      	ldr	r1, [pc, #24]	@ (800c5fc <_sbrk+0x38>)
 800c5e4:	6011      	str	r1, [r2, #0]
 800c5e6:	e7f2      	b.n	800c5ce <_sbrk+0xa>
		errno = ENOMEM;
 800c5e8:	f018 f874 	bl	80246d4 <__errno>
 800c5ec:	230c      	movs	r3, #12
 800c5ee:	6003      	str	r3, [r0, #0]
		return (void *)-1;
 800c5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f4:	e7f3      	b.n	800c5de <_sbrk+0x1a>
 800c5f6:	bf00      	nop
 800c5f8:	20000db8 	.word	0x20000db8
 800c5fc:	20002960 	.word	0x20002960

0800c600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c600:	b508      	push	{r3, lr}
    extern uint8_t _estack; /* Symbol defined in the linker script */

    uint32_t *addr;

    addr = (uint32_t *)(((uint32_t)&_estack - 1) & 0xFFFFFFE0);
 800c602:	4b20      	ldr	r3, [pc, #128]	@ (800c684 <SystemInit+0x84>)
 800c604:	f023 031f 	bic.w	r3, r3, #31

    if(*addr == 0xDEADBEEF) {
 800c608:	6819      	ldr	r1, [r3, #0]
 800c60a:	4a1f      	ldr	r2, [pc, #124]	@ (800c688 <SystemInit+0x88>)
 800c60c:	4291      	cmp	r1, r2
 800c60e:	d00a      	beq.n	800c626 <SystemInit+0x26>
        while(1) {};
    }

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c610:	4b1e      	ldr	r3, [pc, #120]	@ (800c68c <SystemInit+0x8c>)
 800c612:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c616:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800c61a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c61e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c622:	609a      	str	r2, [r3, #8]
#endif
}
 800c624:	bd08      	pop	{r3, pc}
        *addr = 0xCAFEFEED; // Reset our trigger
 800c626:	4a1a      	ldr	r2, [pc, #104]	@ (800c690 <SystemInit+0x90>)
 800c628:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800c62a:	b672      	cpsid	i
        HAL_RCC_DeInit();
 800c62c:	f7fd fb1e 	bl	8009c6c <HAL_RCC_DeInit>
        HAL_DeInit();
 800c630:	f7fc fc22 	bl	8008e78 <HAL_DeInit>
        for(i = 0; i < 5; i++) {
 800c634:	2300      	movs	r3, #0
 800c636:	e00b      	b.n	800c650 <SystemInit+0x50>
            NVIC->ICER[i] = 0xFFFFFFFF;
 800c638:	4a16      	ldr	r2, [pc, #88]	@ (800c694 <SystemInit+0x94>)
 800c63a:	f103 0020 	add.w	r0, r3, #32
 800c63e:	f04f 31ff 	mov.w	r1, #4294967295
 800c642:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
            NVIC->ICPR[i] = 0xFFFFFFFF;
 800c646:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 800c64a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
        for(i = 0; i < 5; i++) {
 800c64e:	3301      	adds	r3, #1
 800c650:	2b04      	cmp	r3, #4
 800c652:	d9f1      	bls.n	800c638 <SystemInit+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
 800c654:	b662      	cpsie	i
        SysTick->CTRL = SysTick->LOAD = SysTick->VAL = 0;
 800c656:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c65a:	2200      	movs	r2, #0
 800c65c:	619a      	str	r2, [r3, #24]
 800c65e:	615a      	str	r2, [r3, #20]
 800c660:	611a      	str	r2, [r3, #16]
        __HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 800c662:	4b0d      	ldr	r3, [pc, #52]	@ (800c698 <SystemInit+0x98>)
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	f022 0203 	bic.w	r2, r2, #3
 800c66a:	601a      	str	r2, [r3, #0]
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	f042 0201 	orr.w	r2, r2, #1
 800c672:	601a      	str	r2, [r3, #0]
        __set_MSP(*(uint32_t *)0x1FFF0000);
 800c674:	4b09      	ldr	r3, [pc, #36]	@ (800c69c <SystemInit+0x9c>)
 800c676:	681a      	ldr	r2, [r3, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800c678:	f382 8808 	msr	MSP, r2
        SysMemBootJump = (void(*)(void))(*((uint32_t *)0x1FFF0004));
 800c67c:	685b      	ldr	r3, [r3, #4]
        SysMemBootJump();
 800c67e:	4798      	blx	r3
        while(1) {};
 800c680:	e7fe      	b.n	800c680 <SystemInit+0x80>
 800c682:	bf00      	nop
 800c684:	2001ffff 	.word	0x2001ffff
 800c688:	deadbeef 	.word	0xdeadbeef
 800c68c:	e000ed00 	.word	0xe000ed00
 800c690:	cafefeed 	.word	0xcafefeed
 800c694:	e000e100 	.word	0xe000e100
 800c698:	40013800 	.word	0x40013800
 800c69c:	1fff0000 	.word	0x1fff0000

0800c6a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800c6a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800c6d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800c6a4:	480d      	ldr	r0, [pc, #52]	@ (800c6dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800c6a6:	490e      	ldr	r1, [pc, #56]	@ (800c6e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800c6a8:	4a0e      	ldr	r2, [pc, #56]	@ (800c6e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800c6aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c6ac:	e002      	b.n	800c6b4 <LoopCopyDataInit>

0800c6ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c6ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c6b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c6b2:	3304      	adds	r3, #4

0800c6b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c6b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c6b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c6b8:	d3f9      	bcc.n	800c6ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c6ba:	4a0b      	ldr	r2, [pc, #44]	@ (800c6e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800c6bc:	4c0b      	ldr	r4, [pc, #44]	@ (800c6ec <LoopFillZerobss+0x26>)
  movs r3, #0
 800c6be:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c6c0:	e001      	b.n	800c6c6 <LoopFillZerobss>

0800c6c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c6c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c6c4:	3204      	adds	r2, #4

0800c6c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c6c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c6c8:	d3fb      	bcc.n	800c6c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c6ca:	f7ff ff99 	bl	800c600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c6ce:	f018 f807 	bl	80246e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c6d2:	f7ff fcb3 	bl	800c03c <main>
  bx  lr    
 800c6d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800c6d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800c6dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c6e0:	20000664 	.word	0x20000664
  ldr r2, =_sidata
 800c6e4:	08031308 	.word	0x08031308
  ldr r2, =_sbss
 800c6e8:	20000664 	.word	0x20000664
  ldr r4, =_ebss
 800c6ec:	2000295c 	.word	0x2000295c

0800c6f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c6f0:	e7fe      	b.n	800c6f0 <ADC_IRQHandler>
	...

0800c6f4 <alarms_get_details>:
}

alarm_details_t *alarms_get_details (void)
{
    return &details;
}
 800c6f4:	4800      	ldr	r0, [pc, #0]	@ (800c6f8 <alarms_get_details+0x4>)
 800c6f6:	4770      	bx	lr
 800c6f8:	20000190 	.word	0x20000190

0800c6fc <canbus_enabled>:
// Public API

bool canbus_enabled (void)
{
    return isEnabled;
}
 800c6fc:	4b01      	ldr	r3, [pc, #4]	@ (800c704 <canbus_enabled+0x8>)
 800c6fe:	7818      	ldrb	r0, [r3, #0]
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	20000dbc 	.word	0x20000dbc

0800c708 <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant,
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state (coolant_state_t mode)
{
 800c708:	b508      	push	{r3, lr}
    if (!ABORTED) { // Block during abort.
 800c70a:	4b06      	ldr	r3, [pc, #24]	@ (800c724 <coolant_set_state+0x1c>)
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	b943      	cbnz	r3, 800c722 <coolant_set_state+0x1a>
 800c710:	4b04      	ldr	r3, [pc, #16]	@ (800c724 <coolant_set_state+0x1c>)
 800c712:	785b      	ldrb	r3, [r3, #1]
 800c714:	b92b      	cbnz	r3, 800c722 <coolant_set_state+0x1a>
        hal.coolant.set_state(mode);
 800c716:	4b04      	ldr	r3, [pc, #16]	@ (800c728 <coolant_set_state+0x20>)
 800c718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c71a:	4798      	blx	r3
        system_add_rt_report(Report_Coolant); // Set to report change immediately
 800c71c:	2020      	movs	r0, #32
 800c71e:	f014 ffaf 	bl	8021680 <system_add_rt_report>
    }
}
 800c722:	bd08      	pop	{r3, pc}
 800c724:	2000148c 	.word	0x2000148c
 800c728:	200011ac 	.word	0x200011ac

0800c72c <coolant_sync>:

// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails
// if an abort or check-mode is active.
bool coolant_sync (coolant_state_t mode)
{
 800c72c:	b538      	push	{r3, r4, r5, lr}
 800c72e:	4604      	mov	r4, r0
    bool ok = true;
    if (state_get() != STATE_CHECK_MODE) {
 800c730:	f011 ffe8 	bl	801e704 <state_get>
 800c734:	2802      	cmp	r0, #2
 800c736:	d102      	bne.n	800c73e <coolant_sync+0x12>
    bool ok = true;
 800c738:	2501      	movs	r5, #1
        if((ok = protocol_buffer_synchronize())) // Ensure coolant changes state when specified in program.
            coolant_set_state(mode);
    }

    return ok;
}
 800c73a:	4628      	mov	r0, r5
 800c73c:	bd38      	pop	{r3, r4, r5, pc}
        if((ok = protocol_buffer_synchronize())) // Ensure coolant changes state when specified in program.
 800c73e:	f00a ff47 	bl	80175d0 <protocol_buffer_synchronize>
 800c742:	4605      	mov	r5, r0
 800c744:	2800      	cmp	r0, #0
 800c746:	d0f8      	beq.n	800c73a <coolant_sync+0xe>
            coolant_set_state(mode);
 800c748:	4620      	mov	r0, r4
 800c74a:	f7ff ffdd 	bl	800c708 <coolant_set_state>
 800c74e:	e7f4      	b.n	800c73a <coolant_sync+0xe>

0800c750 <xbar_fn_to_axismask>:
#include "hal.h"

static limit_signals_t home_source = {0};

axes_signals_t xbar_fn_to_axismask (pin_function_t fn)
{
 800c750:	4603      	mov	r3, r0
    axes_signals_t mask = {0};
 800c752:	f04f 0000 	mov.w	r0, #0

    switch(fn) {
 800c756:	2b18      	cmp	r3, #24
 800c758:	d809      	bhi.n	800c76e <xbar_fn_to_axismask+0x1e>
 800c75a:	2b15      	cmp	r3, #21
 800c75c:	d20f      	bcs.n	800c77e <xbar_fn_to_axismask+0x2e>
 800c75e:	3b10      	subs	r3, #16
 800c760:	b2db      	uxtb	r3, r3
 800c762:	2b03      	cmp	r3, #3
 800c764:	d802      	bhi.n	800c76c <xbar_fn_to_axismask+0x1c>

        case Input_LimitX:
        case Input_LimitX_Max:
        case Input_LimitX_2:
        case Input_HomeX:
            mask.x = On;
 800c766:	f04f 0001 	mov.w	r0, #1
            break;
 800c76a:	4770      	bx	lr
 800c76c:	4770      	bx	lr
    switch(fn) {
 800c76e:	3b1a      	subs	r3, #26
 800c770:	b2db      	uxtb	r3, r3
 800c772:	2b03      	cmp	r3, #3
 800c774:	d802      	bhi.n	800c77c <xbar_fn_to_axismask+0x2c>

        case Input_LimitZ:
        case Input_LimitZ_Max:
        case Input_LimitZ_2:
        case Input_HomeZ:
            mask.z = On;
 800c776:	f04f 0004 	mov.w	r0, #4
        default:
            break;
    }

    return mask;
}
 800c77a:	4770      	bx	lr
 800c77c:	4770      	bx	lr
            mask.y = On;
 800c77e:	f04f 0002 	mov.w	r0, #2
            break;
 800c782:	4770      	bx	lr

0800c784 <xbar_set_homing_source>:

// Sets limit signals used by homing when home signals are not available.
// For internal use, called by settings.c when homing direction mask is changed.
void xbar_set_homing_source (void)
{
    if(hal.home_cap.a.mask == 0) {
 800c784:	4b0f      	ldr	r3, [pc, #60]	@ (800c7c4 <xbar_set_homing_source+0x40>)
 800c786:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 800c78a:	b9d3      	cbnz	r3, 800c7c2 <xbar_set_homing_source+0x3e>
        home_source.max.mask = hal.limits_cap.max.mask & ((~settings.homing.dir_mask.mask) & AXES_BITMASK);
 800c78c:	480d      	ldr	r0, [pc, #52]	@ (800c7c4 <xbar_set_homing_source+0x40>)
 800c78e:	f890 31df 	ldrb.w	r3, [r0, #479]	@ 0x1df
 800c792:	4a0d      	ldr	r2, [pc, #52]	@ (800c7c8 <xbar_set_homing_source+0x44>)
 800c794:	f892 1110 	ldrb.w	r1, [r2, #272]	@ 0x110
 800c798:	ea23 0301 	bic.w	r3, r3, r1
 800c79c:	f003 0307 	and.w	r3, r3, #7
 800c7a0:	4a0a      	ldr	r2, [pc, #40]	@ (800c7cc <xbar_set_homing_source+0x48>)
 800c7a2:	7053      	strb	r3, [r2, #1]
        home_source.min.mask = (~home_source.max.mask) & AXES_BITMASK;
 800c7a4:	43db      	mvns	r3, r3
 800c7a6:	f003 0307 	and.w	r3, r3, #7
 800c7aa:	7013      	strb	r3, [r2, #0]
        home_source.max2.mask = hal.limits_cap.max2.mask & ((~settings.homing.dir_mask.mask) & AXES_BITMASK);
 800c7ac:	f890 31e1 	ldrb.w	r3, [r0, #481]	@ 0x1e1
 800c7b0:	ea23 0301 	bic.w	r3, r3, r1
 800c7b4:	f003 0307 	and.w	r3, r3, #7
 800c7b8:	70d3      	strb	r3, [r2, #3]
        home_source.min2.mask = (~home_source.max2.mask) & AXES_BITMASK;
 800c7ba:	43db      	mvns	r3, r3
 800c7bc:	f003 0307 	and.w	r3, r3, #7
 800c7c0:	7093      	strb	r3, [r2, #2]
    }
}
 800c7c2:	4770      	bx	lr
 800c7c4:	200011ac 	.word	0x200011ac
 800c7c8:	20001bc4 	.word	0x20001bc4
 800c7cc:	20000dc0 	.word	0x20000dc0

0800c7d0 <xbar_get_homing_source>:

// Returns limit signals used by homing when home signals are not available.
limit_signals_t xbar_get_homing_source (void)
{
 800c7d0:	b082      	sub	sp, #8
    return home_source;
 800c7d2:	4b0b      	ldr	r3, [pc, #44]	@ (800c800 <xbar_get_homing_source+0x30>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	9301      	str	r3, [sp, #4]
 800c7d8:	2000      	movs	r0, #0
 800c7da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c7de:	f363 0007 	bfi	r0, r3, #0, #8
 800c7e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c7e6:	f363 200f 	bfi	r0, r3, #8, #8
 800c7ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c7ee:	f363 4017 	bfi	r0, r3, #16, #8
 800c7f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c7f6:	f363 601f 	bfi	r0, r3, #24, #8
}
 800c7fa:	b002      	add	sp, #8
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	20000dc0 	.word	0x20000dc0

0800c804 <xbar_get_homing_source_from_cycle>:

// Returns limit signals used by homing cycle when home signals are not available.
limit_signals_t xbar_get_homing_source_from_cycle (axes_signals_t homing_cycle)
{
 800c804:	b082      	sub	sp, #8
    limit_signals_t source = home_source;
 800c806:	4b1e      	ldr	r3, [pc, #120]	@ (800c880 <xbar_get_homing_source_from_cycle+0x7c>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	9300      	str	r3, [sp, #0]

    if(hal.home_cap.a.mask == 0) {
 800c80c:	4b1d      	ldr	r3, [pc, #116]	@ (800c884 <xbar_get_homing_source_from_cycle+0x80>)
 800c80e:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 800c812:	b9fb      	cbnz	r3, 800c854 <xbar_get_homing_source_from_cycle+0x50>
        source.min.mask &= homing_cycle.mask;
 800c814:	f89d 3000 	ldrb.w	r3, [sp]
 800c818:	b2c2      	uxtb	r2, r0
 800c81a:	ea03 0100 	and.w	r1, r3, r0
 800c81e:	f88d 1000 	strb.w	r1, [sp]
        source.min2.mask &= homing_cycle.mask;
 800c822:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800c826:	ea01 0c00 	and.w	ip, r1, r0
 800c82a:	f88d c002 	strb.w	ip, [sp, #2]
        source.min.mask |= source.min2.mask;
 800c82e:	430b      	orrs	r3, r1
 800c830:	4003      	ands	r3, r0
 800c832:	f88d 3000 	strb.w	r3, [sp]
        source.max.mask &= homing_cycle.mask;
 800c836:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c83a:	ea03 0100 	and.w	r1, r3, r0
 800c83e:	f88d 1001 	strb.w	r1, [sp, #1]
        source.max2.mask &= homing_cycle.mask;
 800c842:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800c846:	4008      	ands	r0, r1
 800c848:	f88d 0003 	strb.w	r0, [sp, #3]
        source.max.mask |= source.max2.mask;
 800c84c:	430b      	orrs	r3, r1
 800c84e:	4013      	ands	r3, r2
 800c850:	f88d 3001 	strb.w	r3, [sp, #1]
    }

    return source;
 800c854:	9b00      	ldr	r3, [sp, #0]
 800c856:	9301      	str	r3, [sp, #4]
 800c858:	2000      	movs	r0, #0
 800c85a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c85e:	f363 0007 	bfi	r0, r3, #0, #8
 800c862:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c866:	f363 200f 	bfi	r0, r3, #8, #8
 800c86a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c86e:	f363 4017 	bfi	r0, r3, #16, #8
 800c872:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c876:	f363 601f 	bfi	r0, r3, #24, #8
}
 800c87a:	b002      	add	sp, #8
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	20000dc0 	.word	0x20000dc0
 800c884:	200011ac 	.word	0x200011ac

0800c888 <xbar_fn_to_pinname>:

const char *xbar_fn_to_pinname (pin_function_t fn)
{
 800c888:	4601      	mov	r1, r0
    const char *name = NULL;
    uint_fast8_t idx = sizeof(pin_names) / sizeof(pin_name_t);
 800c88a:	238d      	movs	r3, #141	@ 0x8d
    const char *name = NULL;
 800c88c:	2000      	movs	r0, #0
 800c88e:	e001      	b.n	800c894 <xbar_fn_to_pinname+0xc>

    do {
        if(pin_names[--idx].function == fn)
            name = pin_names[idx].name;
    } while(idx && !name);
 800c890:	b15b      	cbz	r3, 800c8aa <xbar_fn_to_pinname+0x22>
 800c892:	b950      	cbnz	r0, 800c8aa <xbar_fn_to_pinname+0x22>
        if(pin_names[--idx].function == fn)
 800c894:	3b01      	subs	r3, #1
 800c896:	4a07      	ldr	r2, [pc, #28]	@ (800c8b4 <xbar_fn_to_pinname+0x2c>)
 800c898:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800c89c:	428a      	cmp	r2, r1
 800c89e:	d1f7      	bne.n	800c890 <xbar_fn_to_pinname+0x8>
            name = pin_names[idx].name;
 800c8a0:	4a04      	ldr	r2, [pc, #16]	@ (800c8b4 <xbar_fn_to_pinname+0x2c>)
 800c8a2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c8a6:	6850      	ldr	r0, [r2, #4]
 800c8a8:	e7f2      	b.n	800c890 <xbar_fn_to_pinname+0x8>

    return name ? name : "N/A";
 800c8aa:	b100      	cbz	r0, 800c8ae <xbar_fn_to_pinname+0x26>
}
 800c8ac:	4770      	bx	lr
    return name ? name : "N/A";
 800c8ae:	4802      	ldr	r0, [pc, #8]	@ (800c8b8 <xbar_fn_to_pinname+0x30>)
 800c8b0:	e7fc      	b.n	800c8ac <xbar_fn_to_pinname+0x24>
 800c8b2:	bf00      	nop
 800c8b4:	080296e8 	.word	0x080296e8
 800c8b8:	08029034 	.word	0x08029034

0800c8bc <xbar_fn_to_signals_mask>:

control_signals_t xbar_fn_to_signals_mask (pin_function_t fn)
{
    control_signals_t signals;

    signals.mask = fn >= Input_Probe ? 0 : 1 << (uint32_t)fn;
 800c8bc:	280d      	cmp	r0, #13
 800c8be:	d804      	bhi.n	800c8ca <xbar_fn_to_signals_mask+0xe>
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	fa03 f000 	lsl.w	r0, r3, r0
 800c8c6:	b280      	uxth	r0, r0
 800c8c8:	4770      	bx	lr
 800c8ca:	2000      	movs	r0, #0

    return signals;
}
 800c8cc:	4770      	bx	lr
	...

0800c8d0 <errors_get_details>:
}

error_details_t *errors_get_details (void)
{
    return &details;
}
 800c8d0:	4800      	ldr	r0, [pc, #0]	@ (800c8d4 <errors_get_details+0x4>)
 800c8d2:	4770      	bx	lr
 800c8d4:	2000019c 	.word	0x2000019c

0800c8d8 <init_sync_motion>:

    return add_cmd != NULL;
}

static status_code_t init_sync_motion (plan_line_data_t *pl_data, float pitch)
{
 800c8d8:	b508      	push	{r3, lr}
 800c8da:	ed2d 8b02 	vpush	{d8}
    if(pl_data->spindle.hal->get_data == NULL)
 800c8de:	6903      	ldr	r3, [r0, #16]
 800c8e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d049      	beq.n	800c97a <init_sync_motion+0xa2>
        FAIL(Status_GcodeUnsupportedCommand); // [Spindle not sync capable]

    pl_data->condition.inverse_time = Off;
 800c8e6:	7d03      	ldrb	r3, [r0, #20]
 800c8e8:	f36f 1345 	bfc	r3, #5, #1
 800c8ec:	7503      	strb	r3, [r0, #20]
    pl_data->feed_rate = gc_state.distance_per_rev = pitch;
 800c8ee:	4b26      	ldr	r3, [pc, #152]	@ (800c988 <init_sync_motion+0xb0>)
 800c8f0:	ed83 0a19 	vstr	s0, [r3, #100]	@ 0x64
 800c8f4:	ed80 0a00 	vstr	s0, [r0]
    pl_data->spindle.css = NULL;                    // Switch off CSS.
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	60c3      	str	r3, [r0, #12]
    pl_data->overrides = sys.override.control;      // Use current override flags and
 800c8fc:	4b23      	ldr	r3, [pc, #140]	@ (800c98c <init_sync_motion+0xb4>)
 800c8fe:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800c902:	7602      	strb	r2, [r0, #24]
    pl_data->overrides.sync = On;                   // set to sync overrides on execution of motion.
 800c904:	b2d2      	uxtb	r2, r2
 800c906:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c90a:	7602      	strb	r2, [r0, #24]

    // Disable feed rate and spindle overrides for the duration of the cycle.
    pl_data->overrides.spindle_rpm_disable = sys.override.control.spindle_rpm_disable = On;
 800c90c:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800c910:	f042 0204 	orr.w	r2, r2, #4
 800c914:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 800c918:	7e02      	ldrb	r2, [r0, #24]
 800c91a:	f042 0204 	orr.w	r2, r2, #4
 800c91e:	7602      	strb	r2, [r0, #24]
    pl_data->overrides.feed_rate_disable = sys.override.control.feed_rate_disable = On;
 800c920:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800c924:	f042 0201 	orr.w	r2, r2, #1
 800c928:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 800c92c:	7e03      	ldrb	r3, [r0, #24]
 800c92e:	f043 0301 	orr.w	r3, r3, #1
 800c932:	7603      	strb	r3, [r0, #24]
    pl_data->spindle.hal->param->override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE;
 800c934:	6903      	ldr	r3, [r0, #16]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	2264      	movs	r2, #100	@ 0x64
 800c93a:	60da      	str	r2, [r3, #12]
    // TODO: need for gc_state.distance_per_rev to be reset on modal change?
    float feed_rate = pl_data->feed_rate * pl_data->spindle.hal->get_data(SpindleData_RPM)->rpm;
 800c93c:	ed90 8a00 	vldr	s16, [r0]
 800c940:	6903      	ldr	r3, [r0, #16]
 800c942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c944:	2001      	movs	r0, #1
 800c946:	4798      	blx	r3
 800c948:	edd0 7a00 	vldr	s15, [r0]
 800c94c:	ee68 7a27 	vmul.f32	s15, s16, s15

    if(feed_rate == 0.0f)
 800c950:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c958:	d011      	beq.n	800c97e <init_sync_motion+0xa6>
        FAIL(Status_GcodeSpindleNotRunning); // [Spindle not running]

    if(feed_rate > settings.axis[Z_AXIS].max_rate * 0.9f)
 800c95a:	4b0d      	ldr	r3, [pc, #52]	@ (800c990 <init_sync_motion+0xb8>)
 800c95c:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800c960:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800c994 <init_sync_motion+0xbc>
 800c964:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c968:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c970:	d407      	bmi.n	800c982 <init_sync_motion+0xaa>
        FAIL(Status_GcodeMaxFeedRateExceeded); // [Feed rate too high]

    return Status_OK;
 800c972:	2000      	movs	r0, #0
}
 800c974:	ecbd 8b02 	vpop	{d8}
 800c978:	bd08      	pop	{r3, pc}
        FAIL(Status_GcodeUnsupportedCommand); // [Spindle not sync capable]
 800c97a:	2014      	movs	r0, #20
 800c97c:	e7fa      	b.n	800c974 <init_sync_motion+0x9c>
        FAIL(Status_GcodeSpindleNotRunning); // [Spindle not running]
 800c97e:	2029      	movs	r0, #41	@ 0x29
 800c980:	e7f8      	b.n	800c974 <init_sync_motion+0x9c>
        FAIL(Status_GcodeMaxFeedRateExceeded); // [Feed rate too high]
 800c982:	202b      	movs	r0, #43	@ 0x2b
 800c984:	e7f6      	b.n	800c974 <init_sync_motion+0x9c>
 800c986:	bf00      	nop
 800c988:	20000ee4 	.word	0x20000ee4
 800c98c:	2000148c 	.word	0x2000148c
 800c990:	20001bc4 	.word	0x20001bc4
 800c994:	3f666666 	.word	0x3f666666

0800c998 <tool_get_pending>:
{
 800c998:	b470      	push	{r4, r5, r6}
 800c99a:	4604      	mov	r4, r0
    if(grbl.tool_table.n_tools)
 800c99c:	4b0d      	ldr	r3, [pc, #52]	@ (800c9d4 <tool_get_pending+0x3c>)
 800c99e:	699b      	ldr	r3, [r3, #24]
 800c9a0:	b13b      	cbz	r3, 800c9b2 <tool_get_pending+0x1a>
        return &grbl.tool_table.tool[tool_id];
 800c9a2:	4b0c      	ldr	r3, [pc, #48]	@ (800c9d4 <tool_get_pending+0x3c>)
 800c9a4:	69d8      	ldr	r0, [r3, #28]
 800c9a6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800c9aa:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 800c9ae:	bc70      	pop	{r4, r5, r6}
 800c9b0:	4770      	bx	lr
    memcpy(&tool_data, gc_state.tool, sizeof(tool_data_t));
 800c9b2:	4b09      	ldr	r3, [pc, #36]	@ (800c9d8 <tool_get_pending+0x40>)
 800c9b4:	f8d3 60d0 	ldr.w	r6, [r3, #208]	@ 0xd0
 800c9b8:	4d08      	ldr	r5, [pc, #32]	@ (800c9dc <tool_get_pending+0x44>)
 800c9ba:	46ac      	mov	ip, r5
 800c9bc:	6830      	ldr	r0, [r6, #0]
 800c9be:	6871      	ldr	r1, [r6, #4]
 800c9c0:	68b2      	ldr	r2, [r6, #8]
 800c9c2:	68f3      	ldr	r3, [r6, #12]
 800c9c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c9c8:	6930      	ldr	r0, [r6, #16]
 800c9ca:	f8cc 0000 	str.w	r0, [ip]
    tool_data.tool_id = tool_id;
 800c9ce:	612c      	str	r4, [r5, #16]
    return &tool_data;
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	e7ec      	b.n	800c9ae <tool_get_pending+0x16>
 800c9d4:	20001394 	.word	0x20001394
 800c9d8:	20000ee4 	.word	0x20000ee4
 800c9dc:	20000dc4 	.word	0x20000dc4

0800c9e0 <add_offset>:
{
 800c9e0:	b508      	push	{r3, lr}
    gc_state.offset_id = (gc_state.offset_id + 1) & (MAX_OFFSET_ENTRIES - 1);
 800c9e2:	4b0d      	ldr	r3, [pc, #52]	@ (800ca18 <add_offset+0x38>)
 800c9e4:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 800c9e8:	3201      	adds	r2, #1
 800c9ea:	f002 0203 	and.w	r2, r2, #3
 800c9ee:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    memcpy(&gc_state.offset_queue[gc_state.offset_id], &gc_state.g92_coord_offset, sizeof(coord_data_t));
 800c9f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c9f6:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 800c9fa:	f10c 0c80 	add.w	ip, ip, #128	@ 0x80
 800c9fe:	449c      	add	ip, r3
 800ca00:	33b8      	adds	r3, #184	@ 0xb8
 800ca02:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca04:	f8cc 0004 	str.w	r0, [ip, #4]
 800ca08:	f8cc 1008 	str.w	r1, [ip, #8]
 800ca0c:	f8cc 200c 	str.w	r2, [ip, #12]
    system_flag_wco_change();
 800ca10:	f014 fec2 	bl	8021798 <system_flag_wco_change>
}
 800ca14:	bd08      	pop	{r3, pc}
 800ca16:	bf00      	nop
 800ca18:	20000ee4 	.word	0x20000ee4

0800ca1c <add_output_command>:
{
 800ca1c:	b510      	push	{r4, lr}
 800ca1e:	4604      	mov	r4, r0
    if((add_cmd = malloc(sizeof(output_command_t)))) {
 800ca20:	200c      	movs	r0, #12
 800ca22:	f015 fc63 	bl	80222ec <malloc>
 800ca26:	4601      	mov	r1, r0
 800ca28:	b168      	cbz	r0, 800ca46 <add_output_command+0x2a>
        memcpy(add_cmd, command, sizeof(output_command_t));
 800ca2a:	6820      	ldr	r0, [r4, #0]
 800ca2c:	6862      	ldr	r2, [r4, #4]
 800ca2e:	68a3      	ldr	r3, [r4, #8]
 800ca30:	6008      	str	r0, [r1, #0]
 800ca32:	604a      	str	r2, [r1, #4]
 800ca34:	608b      	str	r3, [r1, #8]
        if(output_commands == NULL)
 800ca36:	4b07      	ldr	r3, [pc, #28]	@ (800ca54 <add_output_command+0x38>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	b143      	cbz	r3, 800ca4e <add_output_command+0x32>
            while(cmd->next)
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	689b      	ldr	r3, [r3, #8]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d1fb      	bne.n	800ca3c <add_output_command+0x20>
            cmd->next = add_cmd;
 800ca44:	6091      	str	r1, [r2, #8]
}
 800ca46:	1e08      	subs	r0, r1, #0
 800ca48:	bf18      	it	ne
 800ca4a:	2001      	movne	r0, #1
 800ca4c:	bd10      	pop	{r4, pc}
            output_commands = add_cmd;
 800ca4e:	4b01      	ldr	r3, [pc, #4]	@ (800ca54 <add_output_command+0x38>)
 800ca50:	6019      	str	r1, [r3, #0]
 800ca52:	e7f8      	b.n	800ca46 <add_output_command+0x2a>
 800ca54:	20000eb0 	.word	0x20000eb0

0800ca58 <gc_get_scaling>:
}
 800ca58:	4800      	ldr	r0, [pc, #0]	@ (800ca5c <gc_get_scaling+0x4>)
 800ca5a:	4770      	bx	lr
 800ca5c:	200001b4 	.word	0x200001b4

0800ca60 <gc_get_g51_state>:
    axes_signals_t scaled = {0};
 800ca60:	f04f 0000 	mov.w	r0, #0
    uint_fast8_t idx = N_AXIS;
 800ca64:	2303      	movs	r3, #3
 800ca66:	e002      	b.n	800ca6e <gc_get_g51_state+0xe>
            scaled.value |= 0x01;
 800ca68:	f041 0001 	orr.w	r0, r1, #1
    } while(idx);
 800ca6c:	b19b      	cbz	r3, 800ca96 <gc_get_g51_state+0x36>
        scaled.value <<= 1;
 800ca6e:	b2c0      	uxtb	r0, r0
 800ca70:	0040      	lsls	r0, r0, #1
 800ca72:	b2c1      	uxtb	r1, r0
 800ca74:	4608      	mov	r0, r1
        if(scale_factor.ijk[--idx] != 1.0f)
 800ca76:	3b01      	subs	r3, #1
 800ca78:	f103 0c02 	add.w	ip, r3, #2
 800ca7c:	4a06      	ldr	r2, [pc, #24]	@ (800ca98 <gc_get_g51_state+0x38>)
 800ca7e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800ca82:	ed92 7a01 	vldr	s14, [r2, #4]
 800ca86:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ca8a:	eeb4 7a67 	vcmp.f32	s14, s15
 800ca8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca92:	d0eb      	beq.n	800ca6c <gc_get_g51_state+0xc>
 800ca94:	e7e8      	b.n	800ca68 <gc_get_g51_state+0x8>
}
 800ca96:	4770      	bx	lr
 800ca98:	200001a8 	.word	0x200001a8

0800ca9c <set_scaling>:
{
 800ca9c:	b510      	push	{r4, lr}
 800ca9e:	ed2d 8b02 	vpush	{d8}
 800caa2:	eeb0 8a40 	vmov.f32	s16, s0
    axes_signals_t state = gc_get_g51_state();
 800caa6:	f7ff ffdb 	bl	800ca60 <gc_get_g51_state>
    uint_fast8_t idx = N_AXIS;
 800caaa:	2303      	movs	r3, #3
        scale_factor.ijk[--idx] = factor;
 800caac:	3b01      	subs	r3, #1
 800caae:	4a12      	ldr	r2, [pc, #72]	@ (800caf8 <set_scaling+0x5c>)
 800cab0:	1c99      	adds	r1, r3, #2
 800cab2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800cab6:	ed81 8a01 	vstr	s16, [r1, #4]
        scale_factor.xyz[idx] = 0.0f;
 800caba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cabe:	2100      	movs	r1, #0
 800cac0:	6011      	str	r1, [r2, #0]
    } while(idx);
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1f2      	bne.n	800caac <set_scaling+0x10>
    gc_state.modal.scaling_active = factor != 1.0f;
 800cac6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800caca:	eeb4 8a67 	vcmp.f32	s16, s15
 800cace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad2:	bf14      	ite	ne
 800cad4:	2201      	movne	r2, #1
 800cad6:	2200      	moveq	r2, #0
 800cad8:	4b08      	ldr	r3, [pc, #32]	@ (800cafc <set_scaling+0x60>)
 800cada:	779a      	strb	r2, [r3, #30]
    if(state.value != gc_get_g51_state().value)
 800cadc:	b2c4      	uxtb	r4, r0
 800cade:	f7ff ffbf 	bl	800ca60 <gc_get_g51_state>
 800cae2:	b2c0      	uxtb	r0, r0
 800cae4:	4284      	cmp	r4, r0
 800cae6:	d102      	bne.n	800caee <set_scaling+0x52>
}
 800cae8:	ecbd 8b02 	vpop	{d8}
 800caec:	bd10      	pop	{r4, pc}
        system_add_rt_report(Report_Scaling);
 800caee:	2002      	movs	r0, #2
 800caf0:	f014 fdc6 	bl	8021680 <system_add_rt_report>
}
 800caf4:	e7f8      	b.n	800cae8 <set_scaling+0x4c>
 800caf6:	bf00      	nop
 800caf8:	200001a8 	.word	0x200001a8
 800cafc:	20000ee4 	.word	0x20000ee4

0800cb00 <gc_get_offset>:
{
 800cb00:	b510      	push	{r4, lr}
 800cb02:	4604      	mov	r4, r0
    if(real_time &&
 800cb04:	b311      	cbz	r1, 800cb4c <gc_get_offset+0x4c>
        !(settings.status_report.machine_position && settings.status_report.sync_on_wco_change) &&
 800cb06:	4b1c      	ldr	r3, [pc, #112]	@ (800cb78 <gc_get_offset+0x78>)
 800cb08:	f8b3 20fc 	ldrh.w	r2, [r3, #252]	@ 0xfc
    if(real_time &&
 800cb0c:	f240 1301 	movw	r3, #257	@ 0x101
 800cb10:	4393      	bics	r3, r2
 800cb12:	d01b      	beq.n	800cb4c <gc_get_offset+0x4c>
          (offset_id = st_get_offset_id()) >= 0)
 800cb14:	f013 fa5c 	bl	801ffd0 <st_get_offset_id>
        !(settings.status_report.machine_position && settings.status_report.sync_on_wco_change) &&
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	db17      	blt.n	800cb4c <gc_get_offset+0x4c>
        return gc_state.modal.coord_system.xyz[idx] + gc_state.offset_queue[offset_id].values[idx] + gc_state.tool_length_offset[idx];
 800cb1c:	4a17      	ldr	r2, [pc, #92]	@ (800cb7c <gc_get_offset+0x7c>)
 800cb1e:	1ca3      	adds	r3, r4, #2
 800cb20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb24:	ed93 0a00 	vldr	s0, [r3]
 800cb28:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800cb2c:	1903      	adds	r3, r0, r4
 800cb2e:	3320      	adds	r3, #32
 800cb30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb34:	edd3 7a01 	vldr	s15, [r3, #4]
 800cb38:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cb3c:	3430      	adds	r4, #48	@ 0x30
 800cb3e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800cb42:	edd2 7a01 	vldr	s15, [r2, #4]
 800cb46:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cb4a:	e014      	b.n	800cb76 <gc_get_offset+0x76>
        return gc_state.modal.coord_system.xyz[idx] + gc_state.g92_coord_offset[idx] + gc_state.tool_length_offset[idx];
 800cb4c:	4b0b      	ldr	r3, [pc, #44]	@ (800cb7c <gc_get_offset+0x7c>)
 800cb4e:	1ca2      	adds	r2, r4, #2
 800cb50:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800cb54:	ed92 0a00 	vldr	s0, [r2]
 800cb58:	f104 022e 	add.w	r2, r4, #46	@ 0x2e
 800cb5c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800cb60:	edd2 7a00 	vldr	s15, [r2]
 800cb64:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cb68:	3430      	adds	r4, #48	@ 0x30
 800cb6a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cb6e:	edd3 7a01 	vldr	s15, [r3, #4]
 800cb72:	ee30 0a27 	vadd.f32	s0, s0, s15
}
 800cb76:	bd10      	pop	{r4, pc}
 800cb78:	20001bc4 	.word	0x20001bc4
 800cb7c:	20000ee4 	.word	0x20000ee4

0800cb80 <gc_set_tool_offset>:
{
 800cb80:	b500      	push	{lr}
 800cb82:	b083      	sub	sp, #12
 800cb84:	9201      	str	r2, [sp, #4]
    switch(mode) {
 800cb86:	4684      	mov	ip, r0
 800cb88:	b120      	cbz	r0, 800cb94 <gc_set_tool_offset+0x14>
 800cb8a:	2802      	cmp	r0, #2
 800cb8c:	d023      	beq.n	800cbd6 <gc_set_tool_offset+0x56>
    gc_state.modal.tool_offset_mode = mode;
 800cb8e:	4b2c      	ldr	r3, [pc, #176]	@ (800cc40 <gc_set_tool_offset+0xc0>)
 800cb90:	71d8      	strb	r0, [r3, #7]
    if(tlo_changed) {
 800cb92:	e04b      	b.n	800cc2c <gc_set_tool_offset+0xac>
    switch(mode) {
 800cb94:	2000      	movs	r0, #0
 800cb96:	2203      	movs	r2, #3
 800cb98:	e007      	b.n	800cbaa <gc_set_tool_offset+0x2a>
                    gc_state.tool->offset[idx] = 0.0f;
 800cb9a:	4b29      	ldr	r3, [pc, #164]	@ (800cc40 <gc_set_tool_offset+0xc0>)
 800cb9c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800cba0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800cba4:	6019      	str	r1, [r3, #0]
            } while(idx);
 800cba6:	2a00      	cmp	r2, #0
 800cba8:	d03c      	beq.n	800cc24 <gc_set_tool_offset+0xa4>
                idx--;
 800cbaa:	3a01      	subs	r2, #1
                tlo_changed |= gc_state.tool_length_offset[idx] != 0.0f;
 800cbac:	f102 0130 	add.w	r1, r2, #48	@ 0x30
 800cbb0:	4b23      	ldr	r3, [pc, #140]	@ (800cc40 <gc_set_tool_offset+0xc0>)
 800cbb2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cbb6:	edd3 7a01 	vldr	s15, [r3, #4]
 800cbba:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cbbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbc2:	bf18      	it	ne
 800cbc4:	f040 0001 	orrne.w	r0, r0, #1
                gc_state.tool_length_offset[idx] = 0.0f;
 800cbc8:	2100      	movs	r1, #0
 800cbca:	6059      	str	r1, [r3, #4]
                if(grbl.tool_table.n_tools == 0)
 800cbcc:	4b1d      	ldr	r3, [pc, #116]	@ (800cc44 <gc_set_tool_offset+0xc4>)
 800cbce:	699b      	ldr	r3, [r3, #24]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d1e8      	bne.n	800cba6 <gc_set_tool_offset+0x26>
 800cbd4:	e7e1      	b.n	800cb9a <gc_set_tool_offset+0x1a>
                float new_offset = offset / settings.axis[idx].steps_per_mm;
 800cbd6:	eddd 7a01 	vldr	s15, [sp, #4]
 800cbda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbde:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800cbe2:	4b19      	ldr	r3, [pc, #100]	@ (800cc48 <gc_set_tool_offset+0xc8>)
 800cbe4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800cbe8:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800cbec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                tlo_changed |= gc_state.tool_length_offset[idx] != new_offset;
 800cbf0:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 800cbf4:	4b12      	ldr	r3, [pc, #72]	@ (800cc40 <gc_set_tool_offset+0xc0>)
 800cbf6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800cbfa:	edd3 7a01 	vldr	s15, [r3, #4]
 800cbfe:	eef4 7a47 	vcmp.f32	s15, s14
 800cc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc06:	bf14      	ite	ne
 800cc08:	2001      	movne	r0, #1
 800cc0a:	2000      	moveq	r0, #0
                gc_state.tool_length_offset[idx] = new_offset;
 800cc0c:	ed83 7a01 	vstr	s14, [r3, #4]
                if(grbl.tool_table.n_tools == 0)
 800cc10:	4b0c      	ldr	r3, [pc, #48]	@ (800cc44 <gc_set_tool_offset+0xc4>)
 800cc12:	699b      	ldr	r3, [r3, #24]
 800cc14:	b933      	cbnz	r3, 800cc24 <gc_set_tool_offset+0xa4>
                    gc_state.tool->offset[idx] = new_offset;
 800cc16:	4b0a      	ldr	r3, [pc, #40]	@ (800cc40 <gc_set_tool_offset+0xc0>)
 800cc18:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800cc1c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cc20:	ed83 7a00 	vstr	s14, [r3]
    gc_state.modal.tool_offset_mode = mode;
 800cc24:	4b06      	ldr	r3, [pc, #24]	@ (800cc40 <gc_set_tool_offset+0xc0>)
 800cc26:	f883 c007 	strb.w	ip, [r3, #7]
    if(tlo_changed) {
 800cc2a:	b910      	cbnz	r0, 800cc32 <gc_set_tool_offset+0xb2>
}
 800cc2c:	b003      	add	sp, #12
 800cc2e:	f85d fb04 	ldr.w	pc, [sp], #4
        system_add_rt_report(Report_ToolOffset);
 800cc32:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800cc36:	f014 fd23 	bl	8021680 <system_add_rt_report>
        system_flag_wco_change();
 800cc3a:	f014 fdad 	bl	8021798 <system_flag_wco_change>
}
 800cc3e:	e7f5      	b.n	800cc2c <gc_set_tool_offset+0xac>
 800cc40:	20000ee4 	.word	0x20000ee4
 800cc44:	20001394 	.word	0x20001394
 800cc48:	20001bc4 	.word	0x20001bc4

0800cc4c <gc_get_plane_data>:
    switch (select) {
 800cc4c:	b141      	cbz	r1, 800cc60 <gc_get_plane_data+0x14>
 800cc4e:	2901      	cmp	r1, #1
 800cc50:	d00d      	beq.n	800cc6e <gc_get_plane_data+0x22>
            plane->axis_0 = Y_AXIS;
 800cc52:	2301      	movs	r3, #1
 800cc54:	7003      	strb	r3, [r0, #0]
            plane->axis_1 = Z_AXIS;
 800cc56:	2302      	movs	r3, #2
 800cc58:	7043      	strb	r3, [r0, #1]
            plane->axis_linear = X_AXIS;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	7083      	strb	r3, [r0, #2]
}
 800cc5e:	4770      	bx	lr
            plane->axis_0 = X_AXIS;
 800cc60:	2300      	movs	r3, #0
 800cc62:	7003      	strb	r3, [r0, #0]
            plane->axis_1 = Y_AXIS;
 800cc64:	2301      	movs	r3, #1
 800cc66:	7043      	strb	r3, [r0, #1]
            plane->axis_linear = Z_AXIS;
 800cc68:	2302      	movs	r3, #2
 800cc6a:	7083      	strb	r3, [r0, #2]
            break;
 800cc6c:	4770      	bx	lr
            plane->axis_0 = Z_AXIS;
 800cc6e:	2302      	movs	r3, #2
 800cc70:	7003      	strb	r3, [r0, #0]
            plane->axis_1 = X_AXIS;
 800cc72:	2300      	movs	r3, #0
 800cc74:	7043      	strb	r3, [r0, #1]
            plane->axis_linear = Y_AXIS;
 800cc76:	2301      	movs	r3, #1
 800cc78:	7083      	strb	r3, [r0, #2]
            break;
 800cc7a:	4770      	bx	lr

0800cc7c <gc_init>:
{
 800cc7c:	b510      	push	{r4, lr}
 800cc7e:	b086      	sub	sp, #24
    if(sys.cold_start) {
 800cc80:	4b46      	ldr	r3, [pc, #280]	@ (800cd9c <gc_init+0x120>)
 800cc82:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800cc86:	b18b      	cbz	r3, 800ccac <gc_init+0x30>
        memset(&gc_state, 0, sizeof(parser_state_t));
 800cc88:	4c45      	ldr	r4, [pc, #276]	@ (800cda0 <gc_init+0x124>)
 800cc8a:	22d4      	movs	r2, #212	@ 0xd4
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	4620      	mov	r0, r4
 800cc90:	f017 fbf5 	bl	802447e <memset>
        gc_state.tool = &grbl.tool_table.tool[0];
 800cc94:	4a43      	ldr	r2, [pc, #268]	@ (800cda4 <gc_init+0x128>)
 800cc96:	69d3      	ldr	r3, [r2, #28]
 800cc98:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
        if(grbl.tool_table.n_tools == 0)
 800cc9c:	6992      	ldr	r2, [r2, #24]
 800cc9e:	b9da      	cbnz	r2, 800ccd8 <gc_init+0x5c>
            memset(grbl.tool_table.tool, 0, sizeof(tool_data_t));
 800cca0:	601a      	str	r2, [r3, #0]
 800cca2:	605a      	str	r2, [r3, #4]
 800cca4:	609a      	str	r2, [r3, #8]
 800cca6:	60da      	str	r2, [r3, #12]
 800cca8:	611a      	str	r2, [r3, #16]
 800ccaa:	e015      	b.n	800ccd8 <gc_init+0x5c>
        memset(&gc_state, 0, offsetof(parser_state_t, g92_coord_offset));
 800ccac:	4c3c      	ldr	r4, [pc, #240]	@ (800cda0 <gc_init+0x124>)
 800ccae:	22b8      	movs	r2, #184	@ 0xb8
 800ccb0:	2100      	movs	r1, #0
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f017 fbe3 	bl	802447e <memset>
        gc_state.tool_pending = gc_state.tool->tool_id;
 800ccb8:	f8d4 00d0 	ldr.w	r0, [r4, #208]	@ 0xd0
 800ccbc:	6903      	ldr	r3, [r0, #16]
 800ccbe:	67a3      	str	r3, [r4, #120]	@ 0x78
        if(hal.tool.select)
 800ccc0:	4b39      	ldr	r3, [pc, #228]	@ (800cda8 <gc_init+0x12c>)
 800ccc2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800ccc6:	b13b      	cbz	r3, 800ccd8 <gc_init+0x5c>
            hal.tool.select(gc_state.tool, false);
 800ccc8:	2100      	movs	r1, #0
 800ccca:	4798      	blx	r3
 800cccc:	e004      	b.n	800ccd8 <gc_init+0x5c>
        output_command_t *next = output_commands->next;
 800ccce:	6884      	ldr	r4, [r0, #8]
        free(output_commands);
 800ccd0:	f015 fb14 	bl	80222fc <free>
        output_commands = next;
 800ccd4:	4b35      	ldr	r3, [pc, #212]	@ (800cdac <gc_init+0x130>)
 800ccd6:	601c      	str	r4, [r3, #0]
    while(output_commands) {
 800ccd8:	4b34      	ldr	r3, [pc, #208]	@ (800cdac <gc_init+0x130>)
 800ccda:	6818      	ldr	r0, [r3, #0]
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d1f6      	bne.n	800ccce <gc_init+0x52>
    gc_state.modal.override_ctrl = sys.override.control;
 800cce0:	4c2f      	ldr	r4, [pc, #188]	@ (800cda0 <gc_init+0x124>)
 800cce2:	4b2e      	ldr	r3, [pc, #184]	@ (800cd9c <gc_init+0x120>)
 800cce4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800cce8:	7723      	strb	r3, [r4, #28]
    gc_state.spindle.hal = spindle_get(0);
 800ccea:	f011 f87b 	bl	801dde4 <spindle_get>
 800ccee:	65e0      	str	r0, [r4, #92]	@ 0x5c
    set_scaling(1.0f);
 800ccf0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ccf4:	f7ff fed2 	bl	800ca9c <set_scaling>
    if (!settings_read_coord_data(gc_state.modal.coord_system.id, &gc_state.modal.coord_system.xyz))
 800ccf8:	f104 0108 	add.w	r1, r4, #8
 800ccfc:	7d20      	ldrb	r0, [r4, #20]
 800ccfe:	f010 f8a7 	bl	801ce50 <settings_read_coord_data>
 800cd02:	b918      	cbnz	r0, 800cd0c <gc_init+0x90>
        grbl.report.status_message(Status_SettingReadFail);
 800cd04:	4b27      	ldr	r3, [pc, #156]	@ (800cda4 <gc_init+0x128>)
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	2007      	movs	r0, #7
 800cd0a:	4798      	blx	r3
    if(sys.cold_start && !settings.flags.g92_is_volatile) {
 800cd0c:	4b23      	ldr	r3, [pc, #140]	@ (800cd9c <gc_init+0x120>)
 800cd0e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800cd12:	b12b      	cbz	r3, 800cd20 <gc_init+0xa4>
 800cd14:	4b26      	ldr	r3, [pc, #152]	@ (800cdb0 <gc_init+0x134>)
 800cd16:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 800cd1a:	f013 0f02 	tst.w	r3, #2
 800cd1e:	d025      	beq.n	800cd6c <gc_init+0xf0>
    if(grbl.on_wco_changed && (!sys.cold_start ||
 800cd20:	4b20      	ldr	r3, [pc, #128]	@ (800cda4 <gc_init+0x128>)
 800cd22:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800cd24:	b1cc      	cbz	r4, 800cd5a <gc_init+0xde>
 800cd26:	4b1d      	ldr	r3, [pc, #116]	@ (800cd9c <gc_init+0x120>)
 800cd28:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800cd2c:	b1a3      	cbz	r3, 800cd58 <gc_init+0xdc>
                                !is0_position_vector(gc_state.modal.coord_system.xyz) ||
 800cd2e:	2300      	movs	r3, #0
 800cd30:	9300      	str	r3, [sp, #0]
 800cd32:	9301      	str	r3, [sp, #4]
 800cd34:	9302      	str	r3, [sp, #8]
 800cd36:	220c      	movs	r2, #12
 800cd38:	4669      	mov	r1, sp
 800cd3a:	481e      	ldr	r0, [pc, #120]	@ (800cdb4 <gc_init+0x138>)
 800cd3c:	f017 fb75 	bl	802442a <memcmp>
    if(grbl.on_wco_changed && (!sys.cold_start ||
 800cd40:	b950      	cbnz	r0, 800cd58 <gc_init+0xdc>
                                 !is0_position_vector(gc_state.g92_coord_offset)))
 800cd42:	2300      	movs	r3, #0
 800cd44:	9303      	str	r3, [sp, #12]
 800cd46:	9304      	str	r3, [sp, #16]
 800cd48:	9305      	str	r3, [sp, #20]
 800cd4a:	220c      	movs	r2, #12
 800cd4c:	eb0d 0102 	add.w	r1, sp, r2
 800cd50:	4819      	ldr	r0, [pc, #100]	@ (800cdb8 <gc_init+0x13c>)
 800cd52:	f017 fb6a 	bl	802442a <memcmp>
                                !is0_position_vector(gc_state.modal.coord_system.xyz) ||
 800cd56:	b100      	cbz	r0, 800cd5a <gc_init+0xde>
        grbl.on_wco_changed();
 800cd58:	47a0      	blx	r4
    ngc_modal_state_invalidate();
 800cd5a:	f007 ffd9 	bl	8014d10 <ngc_modal_state_invalidate>
    if(grbl.on_parser_init)
 800cd5e:	4b11      	ldr	r3, [pc, #68]	@ (800cda4 <gc_init+0x128>)
 800cd60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd62:	b10b      	cbz	r3, 800cd68 <gc_init+0xec>
        grbl.on_parser_init(&gc_state);
 800cd64:	480e      	ldr	r0, [pc, #56]	@ (800cda0 <gc_init+0x124>)
 800cd66:	4798      	blx	r3
}
 800cd68:	b006      	add	sp, #24
 800cd6a:	bd10      	pop	{r4, pc}
        if(!settings_read_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset))
 800cd6c:	4912      	ldr	r1, [pc, #72]	@ (800cdb8 <gc_init+0x13c>)
 800cd6e:	200b      	movs	r0, #11
 800cd70:	f010 f86e 	bl	801ce50 <settings_read_coord_data>
 800cd74:	b920      	cbnz	r0, 800cd80 <gc_init+0x104>
            grbl.report.status_message(Status_SettingReadFail);
 800cd76:	4b0b      	ldr	r3, [pc, #44]	@ (800cda4 <gc_init+0x128>)
 800cd78:	689b      	ldr	r3, [r3, #8]
 800cd7a:	2007      	movs	r0, #7
 800cd7c:	4798      	blx	r3
 800cd7e:	e7cf      	b.n	800cd20 <gc_init+0xa4>
            memcpy(&gc_state.offset_queue[gc_state.offset_id], &gc_state.g92_coord_offset, sizeof(coord_data_t));
 800cd80:	4c07      	ldr	r4, [pc, #28]	@ (800cda0 <gc_init+0x124>)
 800cd82:	f994 3082 	ldrsb.w	r3, [r4, #130]	@ 0x82
 800cd86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	3380      	adds	r3, #128	@ 0x80
 800cd8e:	4423      	add	r3, r4
 800cd90:	34b8      	adds	r4, #184	@ 0xb8
 800cd92:	cc07      	ldmia	r4!, {r0, r1, r2}
 800cd94:	6058      	str	r0, [r3, #4]
 800cd96:	6099      	str	r1, [r3, #8]
 800cd98:	60da      	str	r2, [r3, #12]
 800cd9a:	e7c1      	b.n	800cd20 <gc_init+0xa4>
 800cd9c:	2000148c 	.word	0x2000148c
 800cda0:	20000ee4 	.word	0x20000ee4
 800cda4:	20001394 	.word	0x20001394
 800cda8:	200011ac 	.word	0x200011ac
 800cdac:	20000eb0 	.word	0x20000eb0
 800cdb0:	20001bc4 	.word	0x20001bc4
 800cdb4:	20000eec 	.word	0x20000eec
 800cdb8:	20000f9c 	.word	0x20000f9c

0800cdbc <gc_spindle_off>:
{
 800cdbc:	b508      	push	{r3, lr}
    gc_state.spindle.rpm = 0.0f;
 800cdbe:	4b05      	ldr	r3, [pc, #20]	@ (800cdd4 <gc_spindle_off+0x18>)
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	651a      	str	r2, [r3, #80]	@ 0x50
    gc_state.modal.spindle.state.value = 0;
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	769a      	strb	r2, [r3, #26]
    spindle_all_off();
 800cdc8:	f011 fa18 	bl	801e1fc <spindle_all_off>
    system_add_rt_report(Report_Spindle);
 800cdcc:	2010      	movs	r0, #16
 800cdce:	f014 fc57 	bl	8021680 <system_add_rt_report>
}
 800cdd2:	bd08      	pop	{r3, pc}
 800cdd4:	20000ee4 	.word	0x20000ee4

0800cdd8 <gc_coolant>:
{
 800cdd8:	b508      	push	{r3, lr}
    gc_state.modal.coolant = state;
 800cdda:	4b05      	ldr	r3, [pc, #20]	@ (800cdf0 <gc_coolant+0x18>)
 800cddc:	7658      	strb	r0, [r3, #25]
    hal.coolant.set_state(gc_state.modal.coolant);
 800cdde:	4a05      	ldr	r2, [pc, #20]	@ (800cdf4 <gc_coolant+0x1c>)
 800cde0:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 800cde2:	b2c0      	uxtb	r0, r0
 800cde4:	4790      	blx	r2
    system_add_rt_report(Report_Coolant);
 800cde6:	2020      	movs	r0, #32
 800cde8:	f014 fc4a 	bl	8021680 <system_add_rt_report>
}
 800cdec:	bd08      	pop	{r3, pc}
 800cdee:	bf00      	nop
 800cdf0:	20000ee4 	.word	0x20000ee4
 800cdf4:	200011ac 	.word	0x200011ac

0800cdf8 <gc_spindle_get>:
}
 800cdf8:	4b01      	ldr	r3, [pc, #4]	@ (800ce00 <gc_spindle_get+0x8>)
 800cdfa:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	20000ee4 	.word	0x20000ee4

0800ce04 <gc_output_message>:

// Output and free previously allocated message
void gc_output_message (char *message)
{
    if(message) {
 800ce04:	b188      	cbz	r0, 800ce2a <gc_output_message+0x26>
{
 800ce06:	b510      	push	{r4, lr}
 800ce08:	4604      	mov	r4, r0

        if(grbl.on_gcode_message)
 800ce0a:	4b08      	ldr	r3, [pc, #32]	@ (800ce2c <gc_output_message+0x28>)
 800ce0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ce10:	b103      	cbz	r3, 800ce14 <gc_output_message+0x10>
            grbl.on_gcode_message(message);
 800ce12:	4798      	blx	r3

        if(*message)
 800ce14:	7823      	ldrb	r3, [r4, #0]
 800ce16:	b91b      	cbnz	r3, 800ce20 <gc_output_message+0x1c>
            report_message(message, Message_Plain);

        free(message);
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f015 fa6f 	bl	80222fc <free>
    }
}
 800ce1e:	bd10      	pop	{r4, pc}
            report_message(message, Message_Plain);
 800ce20:	2100      	movs	r1, #0
 800ce22:	4620      	mov	r0, r4
 800ce24:	f00c f866 	bl	8018ef4 <report_message>
 800ce28:	e7f6      	b.n	800ce18 <gc_output_message+0x14>
 800ce2a:	4770      	bx	lr
 800ce2c:	20001394 	.word	0x20001394

0800ce30 <gc_modal_state_restore>:

bool gc_modal_state_restore (gc_modal_t *copy)
{
    bool ok = false;

    if((ok = !!copy && !ABORTED)) {
 800ce30:	2800      	cmp	r0, #0
 800ce32:	d04f      	beq.n	800ced4 <gc_modal_state_restore+0xa4>
{
 800ce34:	b538      	push	{r3, r4, r5, lr}
 800ce36:	4604      	mov	r4, r0
    if((ok = !!copy && !ABORTED)) {
 800ce38:	4b28      	ldr	r3, [pc, #160]	@ (800cedc <gc_modal_state_restore+0xac>)
 800ce3a:	7818      	ldrb	r0, [r3, #0]
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	d14b      	bne.n	800ced8 <gc_modal_state_restore+0xa8>
 800ce40:	785b      	ldrb	r3, [r3, #1]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d149      	bne.n	800ceda <gc_modal_state_restore+0xaa>

        copy->auto_restore = false;
 800ce46:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        copy->motion = gc_state.modal.motion;
 800ce4a:	4b25      	ldr	r3, [pc, #148]	@ (800cee0 <gc_modal_state_restore+0xb0>)
 800ce4c:	881a      	ldrh	r2, [r3, #0]
 800ce4e:	8022      	strh	r2, [r4, #0]

        if(copy->coolant.value != gc_state.modal.coolant.value) {
 800ce50:	7e62      	ldrb	r2, [r4, #25]
 800ce52:	7e5b      	ldrb	r3, [r3, #25]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d009      	beq.n	800ce6c <gc_modal_state_restore+0x3c>
            hal.coolant.set_state(copy->coolant);
 800ce58:	4b22      	ldr	r3, [pc, #136]	@ (800cee4 <gc_modal_state_restore+0xb4>)
 800ce5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce5c:	7e60      	ldrb	r0, [r4, #25]
 800ce5e:	4798      	blx	r3
            delay_sec(settings.safety_door.coolant_on_delay, DelayMode_SysSuspend);
 800ce60:	2001      	movs	r0, #1
 800ce62:	4b21      	ldr	r3, [pc, #132]	@ (800cee8 <gc_modal_state_restore+0xb8>)
 800ce64:	ed93 0a51 	vldr	s0, [r3, #324]	@ 0x144
 800ce68:	f008 fb1a 	bl	80154a0 <delay_sec>
        }

        if(copy->spindle.state.value != gc_state.modal.spindle.state.value || copy->rpm != gc_state.modal.rpm)
 800ce6c:	7ea2      	ldrb	r2, [r4, #26]
 800ce6e:	4b1c      	ldr	r3, [pc, #112]	@ (800cee0 <gc_modal_state_restore+0xb0>)
 800ce70:	7e9b      	ldrb	r3, [r3, #26]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d109      	bne.n	800ce8a <gc_modal_state_restore+0x5a>
 800ce76:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 800ce7a:	4b19      	ldr	r3, [pc, #100]	@ (800cee0 <gc_modal_state_restore+0xb0>)
 800ce7c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800ce80:	eeb4 7a67 	vcmp.f32	s14, s15
 800ce84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce88:	d006      	beq.n	800ce98 <gc_modal_state_restore+0x68>
            spindle_restore(gc_state.spindle.hal, copy->spindle.state, copy->rpm);
 800ce8a:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 800ce8e:	7ea1      	ldrb	r1, [r4, #26]
 800ce90:	4b13      	ldr	r3, [pc, #76]	@ (800cee0 <gc_modal_state_restore+0xb0>)
 800ce92:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800ce94:	f011 f8a4 	bl	801dfe0 <spindle_restore>

        memcpy(&gc_state.modal, copy, sizeof(gc_modal_t));
 800ce98:	46a4      	mov	ip, r4
 800ce9a:	4d11      	ldr	r5, [pc, #68]	@ (800cee0 <gc_modal_state_restore+0xb0>)
 800ce9c:	3430      	adds	r4, #48	@ 0x30
 800ce9e:	46ae      	mov	lr, r5
 800cea0:	f8dc 0000 	ldr.w	r0, [ip]
 800cea4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cea8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800ceac:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800ceb0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ceb4:	f10c 0c10 	add.w	ip, ip, #16
 800ceb8:	4675      	mov	r5, lr
 800ceba:	45a4      	cmp	ip, r4
 800cebc:	d1ef      	bne.n	800ce9e <gc_modal_state_restore+0x6e>
 800cebe:	f8dc 0000 	ldr.w	r0, [ip]
 800cec2:	f8ce 0000 	str.w	r0, [lr]

        gc_state.spindle.rpm = gc_state.modal.rpm;
 800cec6:	4b06      	ldr	r3, [pc, #24]	@ (800cee0 <gc_modal_state_restore+0xb0>)
 800cec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ceca:	651a      	str	r2, [r3, #80]	@ 0x50
        gc_state.feed_rate = gc_state.modal.feed_rate;
 800cecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cece:	661a      	str	r2, [r3, #96]	@ 0x60
    if((ok = !!copy && !ABORTED)) {
 800ced0:	2001      	movs	r0, #1
 800ced2:	e002      	b.n	800ceda <gc_modal_state_restore+0xaa>
 800ced4:	2000      	movs	r0, #0
    }

    return ok;
}
 800ced6:	4770      	bx	lr
    if((ok = !!copy && !ABORTED)) {
 800ced8:	2000      	movs	r0, #0
}
 800ceda:	bd38      	pop	{r3, r4, r5, pc}
 800cedc:	2000148c 	.word	0x2000148c
 800cee0:	20000ee4 	.word	0x20000ee4
 800cee4:	200011ac 	.word	0x200011ac
 800cee8:	20001bc4 	.word	0x20001bc4

0800ceec <gc_normalize_block>:
// else the block delete character. Remaining characters are converted to upper case.
// If the driver handles message comments then the first is extracted and returned in a dynamically
// allocated memory block, the caller must free this after the message has been processed.

char *gc_normalize_block (char *block, char **message)
{
 800ceec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cef0:	4604      	mov	r4, r0
 800cef2:	460f      	mov	r7, r1
    char c, *s1, *s2, *comment = NULL;

    // Remove leading whitespace & control characters
    while(*block && *block <= ' ')
 800cef4:	e000      	b.n	800cef8 <gc_normalize_block+0xc>
        block++;
 800cef6:	3401      	adds	r4, #1
    while(*block && *block <= ' ')
 800cef8:	7822      	ldrb	r2, [r4, #0]
 800cefa:	1e53      	subs	r3, r2, #1
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	2b1f      	cmp	r3, #31
 800cf00:	d9f9      	bls.n	800cef6 <gc_normalize_block+0xa>

    if(*block == ';' || (*block == '/' && sys.flags.block_delete_enabled)) {
 800cf02:	2a3b      	cmp	r2, #59	@ 0x3b
 800cf04:	d00c      	beq.n	800cf20 <gc_normalize_block+0x34>
 800cf06:	2a2f      	cmp	r2, #47	@ 0x2f
 800cf08:	d005      	beq.n	800cf16 <gc_normalize_block+0x2a>
        *block = '\0';
        return block;
    }

    if(*block == '/')
 800cf0a:	2a2f      	cmp	r2, #47	@ 0x2f
 800cf0c:	d00c      	beq.n	800cf28 <gc_normalize_block+0x3c>
        block++;

    s1 = s2 = block;
 800cf0e:	46a0      	mov	r8, r4
 800cf10:	4625      	mov	r5, r4
    char c, *s1, *s2, *comment = NULL;
 800cf12:	2600      	movs	r6, #0

    while((c = *s1) != '\0') {
 800cf14:	e060      	b.n	800cfd8 <gc_normalize_block+0xec>
    if(*block == ';' || (*block == '/' && sys.flags.block_delete_enabled)) {
 800cf16:	4b41      	ldr	r3, [pc, #260]	@ (800d01c <gc_normalize_block+0x130>)
 800cf18:	7d9b      	ldrb	r3, [r3, #22]
 800cf1a:	f013 0f10 	tst.w	r3, #16
 800cf1e:	d0f4      	beq.n	800cf0a <gc_normalize_block+0x1e>
        *block = '\0';
 800cf20:	2300      	movs	r3, #0
 800cf22:	7023      	strb	r3, [r4, #0]
        return block;
 800cf24:	4620      	mov	r0, r4
 800cf26:	e076      	b.n	800d016 <gc_normalize_block+0x12a>
        block++;
 800cf28:	3401      	adds	r4, #1
 800cf2a:	e7f0      	b.n	800cf0e <gc_normalize_block+0x22>

        if(c > ' ') switch(c) {

            case ';':
                if(!comment) {
 800cf2c:	2e00      	cmp	r6, #0
 800cf2e:	d147      	bne.n	800cfc0 <gc_normalize_block+0xd4>
                    *s1 = '\0';
 800cf30:	2300      	movs	r3, #0
 800cf32:	702b      	strb	r3, [r5, #0]
                    continue;
 800cf34:	e050      	b.n	800cfd8 <gc_normalize_block+0xec>
                // TODO: generate error if a left parenthesis is found inside a comment...
                comment = s1;
                break;

            case ')':
                if(comment && !gc_state.skip_blocks) {
 800cf36:	2e00      	cmp	r6, #0
 800cf38:	d04d      	beq.n	800cfd6 <gc_normalize_block+0xea>
 800cf3a:	4b39      	ldr	r3, [pc, #228]	@ (800d020 <gc_normalize_block+0x134>)
 800cf3c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d15f      	bne.n	800d004 <gc_normalize_block+0x118>
                    *s1 = '\0';
 800cf44:	702b      	strb	r3, [r5, #0]
                    if(!hal.driver_cap.no_gcode_message_handling) {
 800cf46:	4b37      	ldr	r3, [pc, #220]	@ (800d024 <gc_normalize_block+0x138>)
 800cf48:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 800cf4c:	f013 0f04 	tst.w	r3, #4
 800cf50:	d106      	bne.n	800cf60 <gc_normalize_block+0x74>

                        size_t len = s1 - comment - 4;
 800cf52:	eba5 0906 	sub.w	r9, r5, r6
 800cf56:	f1a9 0904 	sub.w	r9, r9, #4

                        if(message && *message == NULL && !strncmp(comment, "(MSG,", 5) && (*message = malloc(len))) {
 800cf5a:	b10f      	cbz	r7, 800cf60 <gc_normalize_block+0x74>
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	b14b      	cbz	r3, 800cf74 <gc_normalize_block+0x88>
                            *comment = '\0'; // Do not generate grbl.on_gcode_comment event!
                        }
#endif // NGC_EXPRESSIONS_ENABLE
                    }

                    if(*comment && *message == NULL && grbl.on_gcode_comment)
 800cf60:	7833      	ldrb	r3, [r6, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d050      	beq.n	800d008 <gc_normalize_block+0x11c>
 800cf66:	f8d7 9000 	ldr.w	r9, [r7]
 800cf6a:	f1b9 0f00 	cmp.w	r9, #0
 800cf6e:	d01b      	beq.n	800cfa8 <gc_normalize_block+0xbc>
                        grbl.on_gcode_comment(comment);
                }
                comment = NULL;
 800cf70:	2600      	movs	r6, #0
 800cf72:	e030      	b.n	800cfd6 <gc_normalize_block+0xea>
                        if(message && *message == NULL && !strncmp(comment, "(MSG,", 5) && (*message = malloc(len))) {
 800cf74:	2205      	movs	r2, #5
 800cf76:	492c      	ldr	r1, [pc, #176]	@ (800d028 <gc_normalize_block+0x13c>)
 800cf78:	4630      	mov	r0, r6
 800cf7a:	f017 faa4 	bl	80244c6 <strncmp>
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	d1ee      	bne.n	800cf60 <gc_normalize_block+0x74>
 800cf82:	4648      	mov	r0, r9
 800cf84:	f015 f9b2 	bl	80222ec <malloc>
 800cf88:	6038      	str	r0, [r7, #0]
 800cf8a:	2800      	cmp	r0, #0
 800cf8c:	d0e8      	beq.n	800cf60 <gc_normalize_block+0x74>
                            comment += 5;
 800cf8e:	3605      	adds	r6, #5
                            while(*comment == ' ') {
 800cf90:	e002      	b.n	800cf98 <gc_normalize_block+0xac>
                                comment++;
 800cf92:	3601      	adds	r6, #1
                                len--;
 800cf94:	f109 39ff 	add.w	r9, r9, #4294967295
                            while(*comment == ' ') {
 800cf98:	7833      	ldrb	r3, [r6, #0]
 800cf9a:	2b20      	cmp	r3, #32
 800cf9c:	d0f9      	beq.n	800cf92 <gc_normalize_block+0xa6>
                            memcpy(*message, comment, len);
 800cf9e:	464a      	mov	r2, r9
 800cfa0:	4631      	mov	r1, r6
 800cfa2:	f017 fbcc 	bl	802473e <memcpy>
 800cfa6:	e7db      	b.n	800cf60 <gc_normalize_block+0x74>
                    if(*comment && *message == NULL && grbl.on_gcode_comment)
 800cfa8:	4b20      	ldr	r3, [pc, #128]	@ (800d02c <gc_normalize_block+0x140>)
 800cfaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cfae:	b36b      	cbz	r3, 800d00c <gc_normalize_block+0x120>
                        grbl.on_gcode_comment(comment);
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	4798      	blx	r3
                comment = NULL;
 800cfb4:	464e      	mov	r6, r9
 800cfb6:	e00e      	b.n	800cfd6 <gc_normalize_block+0xea>
                break;

            default:
                if(comment == NULL)
                    *s2++ = CAPS(c);
 800cfb8:	461a      	mov	r2, r3
 800cfba:	e020      	b.n	800cffe <gc_normalize_block+0x112>
        if(c > ' ') switch(c) {
 800cfbc:	462e      	mov	r6, r5

#if NGC_EXPRESSIONS_ENABLE
        if(comment && s1 - comment < (strncmp(comment, "(DEBU,", 5) ? 5 : 7))
            *s1 = CAPS(c);
#else
        if(comment && s1 - comment < 5)
 800cfbe:	b156      	cbz	r6, 800cfd6 <gc_normalize_block+0xea>
 800cfc0:	1baa      	subs	r2, r5, r6
 800cfc2:	2a04      	cmp	r2, #4
 800cfc4:	dc07      	bgt.n	800cfd6 <gc_normalize_block+0xea>
            *s1 = CAPS(c);
 800cfc6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cfca:	b2d2      	uxtb	r2, r2
 800cfcc:	2a19      	cmp	r2, #25
 800cfce:	d801      	bhi.n	800cfd4 <gc_normalize_block+0xe8>
 800cfd0:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 800cfd4:	702b      	strb	r3, [r5, #0]
#endif
        s1++;
 800cfd6:	3501      	adds	r5, #1
    while((c = *s1) != '\0') {
 800cfd8:	782b      	ldrb	r3, [r5, #0]
 800cfda:	b1cb      	cbz	r3, 800d010 <gc_normalize_block+0x124>
        if(c > ' ') switch(c) {
 800cfdc:	2b20      	cmp	r3, #32
 800cfde:	d9ee      	bls.n	800cfbe <gc_normalize_block+0xd2>
 800cfe0:	2b29      	cmp	r3, #41	@ 0x29
 800cfe2:	d0a8      	beq.n	800cf36 <gc_normalize_block+0x4a>
 800cfe4:	2b3b      	cmp	r3, #59	@ 0x3b
 800cfe6:	d0a1      	beq.n	800cf2c <gc_normalize_block+0x40>
 800cfe8:	2b28      	cmp	r3, #40	@ 0x28
 800cfea:	d0e7      	beq.n	800cfbc <gc_normalize_block+0xd0>
                if(comment == NULL)
 800cfec:	2e00      	cmp	r6, #0
 800cfee:	d1e7      	bne.n	800cfc0 <gc_normalize_block+0xd4>
                    *s2++ = CAPS(c);
 800cff0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cff4:	b2d2      	uxtb	r2, r2
 800cff6:	2a19      	cmp	r2, #25
 800cff8:	d8de      	bhi.n	800cfb8 <gc_normalize_block+0xcc>
 800cffa:	f003 025f 	and.w	r2, r3, #95	@ 0x5f
 800cffe:	f808 2b01 	strb.w	r2, [r8], #1
 800d002:	e7dc      	b.n	800cfbe <gc_normalize_block+0xd2>
                comment = NULL;
 800d004:	2600      	movs	r6, #0
 800d006:	e7e6      	b.n	800cfd6 <gc_normalize_block+0xea>
 800d008:	2600      	movs	r6, #0
 800d00a:	e7e4      	b.n	800cfd6 <gc_normalize_block+0xea>
 800d00c:	464e      	mov	r6, r9
 800d00e:	e7e2      	b.n	800cfd6 <gc_normalize_block+0xea>
    }

    *s2 = '\0';
 800d010:	f888 3000 	strb.w	r3, [r8]

    return block;
 800d014:	4620      	mov	r0, r4
}
 800d016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d01a:	bf00      	nop
 800d01c:	2000148c 	.word	0x2000148c
 800d020:	20000ee4 	.word	0x20000ee4
 800d024:	200011ac 	.word	0x200011ac
 800d028:	0802a8f4 	.word	0x0802a8f4
 800d02c:	20001394 	.word	0x20001394

0800d030 <gc_execute_block>:
// Parses and executes one block (line) of 0-terminated G-Code.
// In this function, all units and positions are converted and exported to internal functions
// in terms of (mm, mm/min) and absolute machine coordinates, respectively.

status_code_t gc_execute_block (char *block)
{
 800d030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d034:	ed2d 8b06 	vpush	{d8-d10}
 800d038:	b0a5      	sub	sp, #148	@ 0x94
       { &gc_block.values.xyz[Z_AXIS], ValueType_Float }
    };

#endif

    char *message = NULL;
 800d03a:	2300      	movs	r3, #0
 800d03c:	9323      	str	r3, [sp, #140]	@ 0x8c

    block = gc_normalize_block(block, &message);
 800d03e:	a923      	add	r1, sp, #140	@ 0x8c
 800d040:	f7ff ff54 	bl	800ceec <gc_normalize_block>

    if(block[0] == '\0') {
 800d044:	7804      	ldrb	r4, [r0, #0]
 800d046:	2c00      	cmp	r4, #0
 800d048:	d02d      	beq.n	800d0a6 <gc_execute_block+0x76>
 800d04a:	4606      	mov	r6, r0
    // Old comment from protocol.c:
    // NOTE: This maybe installed to tell grblHAL when a program is running vs manual input,
    // where, during a program, the system auto-cycle start will continue to execute
    // everything until the next '%' sign. This will help fix resuming issues with certain
    // functions that empty the planner buffer to execute its task on-time.
    if (block[0] == CMD_PROGRAM_DEMARCATION && block[1] == '\0') {
 800d04c:	2c25      	cmp	r4, #37	@ 0x25
 800d04e:	d102      	bne.n	800d056 <gc_execute_block+0x26>
 800d050:	7844      	ldrb	r4, [r0, #1]
 800d052:	2c00      	cmp	r4, #0
 800d054:	d02e      	beq.n	800d0b4 <gc_execute_block+0x84>
     updates these modes and commands as the block line is parsed and will only be used and
     executed after successful error-checking. The parser block struct also contains a block
     values struct, word tracking variables, and a non-modal commands tracker for the new
     block. This struct contains all of the necessary information to execute the block. */

    memset(&gc_block, 0, sizeof(gc_block));                           // Initialize the parser block struct.
 800d056:	4c9c      	ldr	r4, [pc, #624]	@ (800d2c8 <gc_execute_block+0x298>)
 800d058:	22d4      	movs	r2, #212	@ 0xd4
 800d05a:	2100      	movs	r1, #0
 800d05c:	4620      	mov	r0, r4
 800d05e:	f017 fa0e 	bl	802447e <memset>
    memcpy(&gc_block.modal, &gc_state.modal, sizeof(gc_state.modal)); // Copy current modes
 800d062:	3408      	adds	r4, #8
 800d064:	4d99      	ldr	r5, [pc, #612]	@ (800d2cc <gc_execute_block+0x29c>)
 800d066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d06a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d06c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d06e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d072:	682b      	ldr	r3, [r5, #0]
 800d074:	6023      	str	r3, [r4, #0]
    axis_command_t axis_command = AxisCommand_None;
    io_mcode_t port_command = (io_mcode_t)0;
    plane_t plane;

    // Initialize bitflag tracking variables for axis indices compatible operations.
    axes_signals_t axis_words = {0}; // XYZ tracking
 800d076:	f04f 0800 	mov.w	r8, #0
 800d07a:	46c3      	mov	fp, r8
    ijk_words_t ijk_words = {0}; // IJK tracking
 800d07c:	f8cd 8014 	str.w	r8, [sp, #20]

    // Initialize command and value words and parser flags variables.
    modal_groups_t command_words = {0};         // Bitfield for tracking G and M command words. Also used for modal group violations.
 800d080:	4647      	mov	r7, r8
    gc_parser_flags_t gc_parser_flags = {0};    // Parser flags for handling special cases.
    static parameter_words_t user_words = {0};  // User M-code words "taken"

    // Determine if the line is a jogging motion or a normal g-code block.
    if (block[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 800d082:	7833      	ldrb	r3, [r6, #0]
 800d084:	2b24      	cmp	r3, #36	@ 0x24
 800d086:	d023      	beq.n	800d0d0 <gc_execute_block+0xa0>
     STEP 2: Import all g-code words in the block. A g-code word is a letter followed by
     a number, which can either be a 'G'/'M' command or sets/assigns a command value. Also,
     perform initial error-checks for command word modal group violations, for any repeated
     words, and for negative values set for the value words F, N, P, T, and S. */

    uint_fast8_t char_counter = gc_parser_flags.jog_motion ? 3 /* Start parsing after `$J=` */ : 0;
 800d088:	f018 0f01 	tst.w	r8, #1
 800d08c:	d12b      	bne.n	800d0e6 <gc_execute_block+0xb6>
 800d08e:	2300      	movs	r3, #0
 800d090:	9321      	str	r3, [sp, #132]	@ 0x84
    char letter;
    float value;
    uint32_t int_value = 0;
    uint_fast16_t mantissa = 0;
    bool is_user_mcode = false;
    word_bit_t word_bit = { .parameter = {0}, .modal_group = {0} }; // Bit-value for assigning tracking variables
 800d092:	2300      	movs	r3, #0
 800d094:	931e      	str	r3, [sp, #120]	@ 0x78
 800d096:	931f      	str	r3, [sp, #124]	@ 0x7c
    bool is_user_mcode = false;
 800d098:	4699      	mov	r9, r3
    uint32_t int_value = 0;
 800d09a:	461c      	mov	r4, r3
    io_mcode_t port_command = (io_mcode_t)0;
 800d09c:	9306      	str	r3, [sp, #24]
    axis_command_t axis_command = AxisCommand_None;
 800d09e:	469a      	mov	sl, r3
    bool set_tool = false, spindle_event = false;
 800d0a0:	9307      	str	r3, [sp, #28]

    while ((letter = block[char_counter++]) != '\0') { // Loop until no more g-code words in block.
 800d0a2:	f000 bc8b 	b.w	800d9bc <gc_execute_block+0x98c>
        if(message)
 800d0a6:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	f000 809e 	beq.w	800d1ea <gc_execute_block+0x1ba>
            gc_output_message(message);
 800d0ae:	f7ff fea9 	bl	800ce04 <gc_output_message>
        return Status_OK;
 800d0b2:	e09a      	b.n	800d1ea <gc_execute_block+0x1ba>
        gc_state.file_run = !gc_state.file_run;
 800d0b4:	4a85      	ldr	r2, [pc, #532]	@ (800d2cc <gc_execute_block+0x29c>)
 800d0b6:	f892 307c 	ldrb.w	r3, [r2, #124]	@ 0x7c
 800d0ba:	f083 0301 	eor.w	r3, r3, #1
 800d0be:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
        if(message)
 800d0c2:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	f000 8090 	beq.w	800d1ea <gc_execute_block+0x1ba>
            gc_output_message(message);
 800d0ca:	f7ff fe9b 	bl	800ce04 <gc_output_message>
        return Status_OK;
 800d0ce:	e08c      	b.n	800d1ea <gc_execute_block+0x1ba>
        gc_parser_flags.jog_motion = On;
 800d0d0:	f04f 0801 	mov.w	r8, #1
        gc_block.modal.motion = MotionMode_Linear;
 800d0d4:	f1a4 0338 	sub.w	r3, r4, #56	@ 0x38
 800d0d8:	2201      	movs	r2, #1
 800d0da:	811a      	strh	r2, [r3, #8]
        gc_block.modal.feed_mode = FeedMode_UnitsPerMin;
 800d0dc:	f883 b00a 	strb.w	fp, [r3, #10]
        gc_block.modal.spindle.rpm_mode = SpindleSpeedMode_RPM;
 800d0e0:	f883 b023 	strb.w	fp, [r3, #35]	@ 0x23
        gc_block.values.n = JOG_LINE_NUMBER; // Initialize default line number reported during jog.
 800d0e4:	e7d0      	b.n	800d088 <gc_execute_block+0x58>
    uint_fast8_t char_counter = gc_parser_flags.jog_motion ? 3 /* Start parsing after `$J=` */ : 0;
 800d0e6:	2303      	movs	r3, #3
 800d0e8:	e7d2      	b.n	800d090 <gc_execute_block+0x60>
        if(!is_user_mcode && isnanf(value))
            FAIL(Status_BadNumberFormat);   // [Expected word value]

#else

        if((letter < 'A' && letter != '$') || letter > 'Z')
 800d0ea:	2d5a      	cmp	r5, #90	@ 0x5a
 800d0ec:	f240 8473 	bls.w	800d9d6 <gc_execute_block+0x9a6>
            FAIL(Status_ExpectedCommandLetter); // [Expected word letter]
 800d0f0:	2401      	movs	r4, #1
 800d0f2:	e07a      	b.n	800d1ea <gc_execute_block+0x1ba>
        // accurate enough for value words that require integers to within 0.0001. This should be
        // a good enough compromise and catch most all non-integer errors. To make it compliant,
        // we would simply need to change the mantissa to int16, but this add compiled flash space.
        // Maybe update this later.
        if(isnan(value))
            mantissa = 0;
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	f000 bc94 	b.w	800da22 <gc_execute_block+0x9f2>
             NOTE: Modal group numbers are defined in Table 4 of NIST RS274-NGC v3, pg.20 */

            case 'G': // Determine 'G' command and its modal group

                is_user_mcode = false;
                word_bit.modal_group.mask = 0;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	931f      	str	r3, [sp, #124]	@ 0x7c

                switch(int_value) {
 800d0fe:	2c41      	cmp	r4, #65	@ 0x41
 800d100:	d858      	bhi.n	800d1b4 <gc_execute_block+0x184>
 800d102:	2c41      	cmp	r4, #65	@ 0x41
 800d104:	f203 8545 	bhi.w	8010b92 <gc_execute_block+0x3b62>
 800d108:	e8df f014 	tbh	[pc, r4, lsl #1]
 800d10c:	00f200f2 	.word	0x00f200f2
 800d110:	00f200f2 	.word	0x00f200f2
 800d114:	00f20090 	.word	0x00f20090
 800d118:	00771d43 	.word	0x00771d43
 800d11c:	1d430077 	.word	0x1d430077
 800d120:	1d430089 	.word	0x1d430089
 800d124:	1d431d43 	.word	0x1d431d43
 800d128:	1d431d43 	.word	0x1d431d43
 800d12c:	01351d43 	.word	0x01351d43
 800d130:	01350135 	.word	0x01350135
 800d134:	01720172 	.word	0x01720172
 800d138:	1d431d43 	.word	0x1d431d43
 800d13c:	1d431d43 	.word	0x1d431d43
 800d140:	1d431d43 	.word	0x1d431d43
 800d144:	1d430089 	.word	0x1d430089
 800d148:	1d430089 	.word	0x1d430089
 800d14c:	00b71d43 	.word	0x00b71d43
 800d150:	1d431d43 	.word	0x1d431d43
 800d154:	1d431d43 	.word	0x1d431d43
 800d158:	1d4300cc 	.word	0x1d4300cc
 800d15c:	1d43017f 	.word	0x1d43017f
 800d160:	01861d43 	.word	0x01861d43
 800d164:	1d431d43 	.word	0x1d431d43
 800d168:	1d431d43 	.word	0x1d431d43
 800d16c:	01861d43 	.word	0x01861d43
 800d170:	024d024d 	.word	0x024d024d
 800d174:	00901d43 	.word	0x00901d43
 800d178:	01b401b4 	.word	0x01b401b4
 800d17c:	01b401b4 	.word	0x01b401b4
 800d180:	01b401b4 	.word	0x01b401b4
 800d184:	020f1d43 	.word	0x020f1d43
 800d188:	1d431d43 	.word	0x1d431d43
 800d18c:	021a1d43 	.word	0x021a1d43
 800d190:	f1a4 0249 	sub.w	r2, r4, #73	@ 0x49
 800d194:	2301      	movs	r3, #1
 800d196:	4093      	lsls	r3, r2
 800d198:	4a4d      	ldr	r2, [pc, #308]	@ (800d2d0 <gc_execute_block+0x2a0>)
 800d19a:	401a      	ands	r2, r3
 800d19c:	2a00      	cmp	r2, #0
 800d19e:	f040 80d0 	bne.w	800d342 <gc_execute_block+0x312>
 800d1a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d1a6:	f040 80a9 	bne.w	800d2fc <gc_execute_block+0x2cc>
 800d1aa:	f013 0f08 	tst.w	r3, #8
 800d1ae:	d164      	bne.n	800d27a <gc_execute_block+0x24a>
 800d1b0:	2414      	movs	r4, #20
 800d1b2:	e01a      	b.n	800d1ea <gc_execute_block+0x1ba>
 800d1b4:	2c59      	cmp	r4, #89	@ 0x59
 800d1b6:	d915      	bls.n	800d1e4 <gc_execute_block+0x1b4>
 800d1b8:	2c63      	cmp	r4, #99	@ 0x63
 800d1ba:	f203 84ed 	bhi.w	8010b98 <gc_execute_block+0x3b68>
 800d1be:	2c5a      	cmp	r4, #90	@ 0x5a
 800d1c0:	d319      	bcc.n	800d1f6 <gc_execute_block+0x1c6>
 800d1c2:	f1a4 035a 	sub.w	r3, r4, #90	@ 0x5a
 800d1c6:	2b09      	cmp	r3, #9
 800d1c8:	f203 84e0 	bhi.w	8010b8c <gc_execute_block+0x3b5c>
 800d1cc:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d1d0:	00de00de 	.word	0x00de00de
 800d1d4:	00fa0027 	.word	0x00fa0027
 800d1d8:	010600fa 	.word	0x010600fa
 800d1dc:	01cb01cb 	.word	0x01cb01cb
 800d1e0:	01df01df 	.word	0x01df01df
 800d1e4:	2c49      	cmp	r4, #73	@ 0x49
 800d1e6:	d2d3      	bcs.n	800d190 <gc_execute_block+0x160>
 800d1e8:	2414      	movs	r4, #20
#endif

    // TODO: % to denote start of program.

    return Status_OK;
}
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	b025      	add	sp, #148	@ 0x94
 800d1ee:	ecbd 8b06 	vpop	{d8-d10}
 800d1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f6:	2414      	movs	r4, #20
 800d1f8:	e7f7      	b.n	800d1ea <gc_execute_block+0x1ba>
                        if(settings.mode == Mode_Lathe) {
 800d1fa:	4b36      	ldr	r3, [pc, #216]	@ (800d2d4 <gc_execute_block+0x2a4>)
 800d1fc:	7e1b      	ldrb	r3, [r3, #24]
 800d1fe:	2b02      	cmp	r3, #2
 800d200:	f043 84cd 	bne.w	8010b9e <gc_execute_block+0x3b6e>
                            word_bit.modal_group.G15 = On;
 800d204:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800d208:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d20c:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                            gc_block.modal.diameter_mode = int_value == 7; // TODO: find specs for implementation, only affects X calculation? reporting? current position?
 800d210:	2c07      	cmp	r4, #7
 800d212:	bf14      	ite	ne
 800d214:	2200      	movne	r2, #0
 800d216:	2201      	moveq	r2, #1
 800d218:	4b2b      	ldr	r3, [pc, #172]	@ (800d2c8 <gc_execute_block+0x298>)
 800d21a:	735a      	strb	r2, [r3, #13]
                        break;
 800d21c:	e07c      	b.n	800d318 <gc_execute_block+0x2e8>
                        if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 800d21e:	b929      	cbnz	r1, 800d22c <gc_execute_block+0x1fc>
                            if (axis_command)
 800d220:	f1ba 0f00 	cmp.w	sl, #0
 800d224:	f043 84be 	bne.w	8010ba4 <gc_execute_block+0x3b74>
                            axis_command = AxisCommand_NonModal;
 800d228:	f04f 0a01 	mov.w	sl, #1
                        word_bit.modal_group.G0 = On;
 800d22c:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d230:	f043 0301 	orr.w	r3, r3, #1
 800d234:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.non_modal_command = (non_modal_t)int_value;
 800d238:	b2e3      	uxtb	r3, r4
 800d23a:	4a23      	ldr	r2, [pc, #140]	@ (800d2c8 <gc_execute_block+0x298>)
 800d23c:	7013      	strb	r3, [r2, #0]
                        if ((int_value == 28) || (int_value == 30)) {
 800d23e:	2c1c      	cmp	r4, #28
 800d240:	d00d      	beq.n	800d25e <gc_execute_block+0x22e>
 800d242:	2c1e      	cmp	r4, #30
 800d244:	d00b      	beq.n	800d25e <gc_execute_block+0x22e>
                        } else if (int_value == 92) {
 800d246:	2c5c      	cmp	r4, #92	@ 0x5c
 800d248:	d166      	bne.n	800d318 <gc_execute_block+0x2e8>
                            if (!((mantissa == 0) || (mantissa == 10) || (mantissa == 20) || (mantissa == 30)))
 800d24a:	291e      	cmp	r1, #30
 800d24c:	f203 84b0 	bhi.w	8010bb0 <gc_execute_block+0x3b80>
 800d250:	4a21      	ldr	r2, [pc, #132]	@ (800d2d8 <gc_execute_block+0x2a8>)
 800d252:	40ca      	lsrs	r2, r1
 800d254:	f012 0f01 	tst.w	r2, #1
 800d258:	d10a      	bne.n	800d270 <gc_execute_block+0x240>
                        } else if (int_value == 92) {
 800d25a:	2414      	movs	r4, #20
 800d25c:	e7c5      	b.n	800d1ea <gc_execute_block+0x1ba>
                            if (!((mantissa == 0) || (mantissa == 10)))
 800d25e:	b111      	cbz	r1, 800d266 <gc_execute_block+0x236>
 800d260:	290a      	cmp	r1, #10
 800d262:	f043 84a2 	bne.w	8010baa <gc_execute_block+0x3b7a>
                            gc_block.non_modal_command += mantissa;
 800d266:	440b      	add	r3, r1
 800d268:	4a17      	ldr	r2, [pc, #92]	@ (800d2c8 <gc_execute_block+0x298>)
 800d26a:	7013      	strb	r3, [r2, #0]
                            mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800d26c:	2100      	movs	r1, #0
 800d26e:	e053      	b.n	800d318 <gc_execute_block+0x2e8>
                            gc_block.non_modal_command += mantissa;
 800d270:	440b      	add	r3, r1
 800d272:	4a15      	ldr	r2, [pc, #84]	@ (800d2c8 <gc_execute_block+0x298>)
 800d274:	7013      	strb	r3, [r2, #0]
                            mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800d276:	2100      	movs	r1, #0
 800d278:	e04e      	b.n	800d318 <gc_execute_block+0x2e8>
                        if(mantissa != 0)
 800d27a:	2900      	cmp	r1, #0
 800d27c:	f043 849b 	bne.w	8010bb6 <gc_execute_block+0x3b86>
                        if (axis_command)
 800d280:	f1ba 0f00 	cmp.w	sl, #0
 800d284:	f043 849a 	bne.w	8010bbc <gc_execute_block+0x3b8c>
                        word_bit.modal_group.G1 = On;
 800d288:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d28c:	f043 0302 	orr.w	r3, r3, #2
 800d290:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.motion = (motion_mode_t)int_value;
 800d294:	4b0c      	ldr	r3, [pc, #48]	@ (800d2c8 <gc_execute_block+0x298>)
 800d296:	811c      	strh	r4, [r3, #8]
                        gc_block.modal.canned_cycle_active = false;
 800d298:	2200      	movs	r2, #0
 800d29a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
                        axis_command = AxisCommand_MotionMode;
 800d29e:	f04f 0a02 	mov.w	sl, #2
                        break;
 800d2a2:	e039      	b.n	800d318 <gc_execute_block+0x2e8>
                        if(!(hal.probe.get_state && ((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))))
 800d2a4:	4b0d      	ldr	r3, [pc, #52]	@ (800d2dc <gc_execute_block+0x2ac>)
 800d2a6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	f003 8489 	beq.w	8010bc2 <gc_execute_block+0x3b92>
 800d2b0:	f1a1 0214 	sub.w	r2, r1, #20
 800d2b4:	2a1e      	cmp	r2, #30
 800d2b6:	f203 8487 	bhi.w	8010bc8 <gc_execute_block+0x3b98>
 800d2ba:	4b07      	ldr	r3, [pc, #28]	@ (800d2d8 <gc_execute_block+0x2a8>)
 800d2bc:	40d3      	lsrs	r3, r2
 800d2be:	f013 0f01 	tst.w	r3, #1
 800d2c2:	d10d      	bne.n	800d2e0 <gc_execute_block+0x2b0>
 800d2c4:	2414      	movs	r4, #20
 800d2c6:	e790      	b.n	800d1ea <gc_execute_block+0x1ba>
 800d2c8:	20000ddc 	.word	0x20000ddc
 800d2cc:	20000ee4 	.word	0x20000ee4
 800d2d0:	00013701 	.word	0x00013701
 800d2d4:	20001bc4 	.word	0x20001bc4
 800d2d8:	40100401 	.word	0x40100401
 800d2dc:	200011ac 	.word	0x200011ac
                        int_value += (mantissa / 10) + 100;
 800d2e0:	4bb9      	ldr	r3, [pc, #740]	@ (800d5c8 <gc_execute_block+0x598>)
 800d2e2:	fba3 2301 	umull	r2, r3, r3, r1
 800d2e6:	eb04 03d3 	add.w	r3, r4, r3, lsr #3
 800d2ea:	f103 0464 	add.w	r4, r3, #100	@ 0x64
                        mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800d2ee:	2100      	movs	r1, #0
                        if (axis_command)
 800d2f0:	f1ba 0f00 	cmp.w	sl, #0
 800d2f4:	f043 846b 	bne.w	8010bce <gc_execute_block+0x3b9e>
                        axis_command = AxisCommand_MotionMode;
 800d2f8:	f04f 0a02 	mov.w	sl, #2
                        word_bit.modal_group.G1 = On;
 800d2fc:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d300:	f043 0302 	orr.w	r3, r3, #2
 800d304:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        if(int_value == 5 && mantissa != 0) {
 800d308:	2c05      	cmp	r4, #5
 800d30a:	d010      	beq.n	800d32e <gc_execute_block+0x2fe>
                            gc_block.modal.motion = (motion_mode_t)int_value;
 800d30c:	4baf      	ldr	r3, [pc, #700]	@ (800d5cc <gc_execute_block+0x59c>)
 800d30e:	811c      	strh	r4, [r3, #8]
                        gc_block.modal.canned_cycle_active = false;
 800d310:	4bae      	ldr	r3, [pc, #696]	@ (800d5cc <gc_execute_block+0x59c>)
 800d312:	2200      	movs	r2, #0
 800d314:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
                if (mantissa > 0)
 800d318:	2900      	cmp	r1, #0
 800d31a:	f043 8476 	bne.w	8010c0a <gc_execute_block+0x3bda>
                if (command_words.mask & word_bit.modal_group.mask)
 800d31e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800d320:	421f      	tst	r7, r3
 800d322:	f043 8475 	bne.w	8010c10 <gc_execute_block+0x3be0>
                command_words.mask |= word_bit.modal_group.mask;
 800d326:	431f      	orrs	r7, r3
                is_user_mcode = false;
 800d328:	f04f 0900 	mov.w	r9, #0
                break;
 800d32c:	e346      	b.n	800d9bc <gc_execute_block+0x98c>
                        if(int_value == 5 && mantissa != 0) {
 800d32e:	2900      	cmp	r1, #0
 800d330:	d0ec      	beq.n	800d30c <gc_execute_block+0x2dc>
                            if(mantissa == 10) {
 800d332:	290a      	cmp	r1, #10
 800d334:	f043 844e 	bne.w	8010bd4 <gc_execute_block+0x3ba4>
                                gc_block.modal.motion = MotionMode_QuadraticSpline;
 800d338:	4ba4      	ldr	r3, [pc, #656]	@ (800d5cc <gc_execute_block+0x59c>)
 800d33a:	2233      	movs	r2, #51	@ 0x33
 800d33c:	811a      	strh	r2, [r3, #8]
                                mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800d33e:	2100      	movs	r1, #0
                            if(mantissa == 10) {
 800d340:	e7e6      	b.n	800d310 <gc_execute_block+0x2e0>
                        if (axis_command)
 800d342:	f1ba 0f00 	cmp.w	sl, #0
 800d346:	f043 8448 	bne.w	8010bda <gc_execute_block+0x3baa>
                        word_bit.modal_group.G1 = On;
 800d34a:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d34e:	f043 0302 	orr.w	r3, r3, #2
 800d352:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.canned_cycle_active = true;
 800d356:	4a9d      	ldr	r2, [pc, #628]	@ (800d5cc <gc_execute_block+0x59c>)
 800d358:	2301      	movs	r3, #1
 800d35a:	f882 3027 	strb.w	r3, [r2, #39]	@ 0x27
                        gc_block.modal.motion = (motion_mode_t)int_value;
 800d35e:	b2a3      	uxth	r3, r4
 800d360:	8113      	strh	r3, [r2, #8]
                        gc_parser_flags.canned_cycle_change = gc_block.modal.motion != gc_state.modal.motion;
 800d362:	4a9b      	ldr	r2, [pc, #620]	@ (800d5d0 <gc_execute_block+0x5a0>)
 800d364:	8812      	ldrh	r2, [r2, #0]
 800d366:	1a9b      	subs	r3, r3, r2
 800d368:	bf18      	it	ne
 800d36a:	2301      	movne	r3, #1
 800d36c:	f363 0841 	bfi	r8, r3, #1, #1
                        axis_command = AxisCommand_MotionMode;
 800d370:	f04f 0a02 	mov.w	sl, #2
                        break;
 800d374:	e7d0      	b.n	800d318 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G2 = On;
 800d376:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d37a:	f043 0304 	orr.w	r3, r3, #4
 800d37e:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.plane_select = (plane_select_t)(int_value - 17);
 800d382:	b2e3      	uxtb	r3, r4
 800d384:	3b11      	subs	r3, #17
 800d386:	4a91      	ldr	r2, [pc, #580]	@ (800d5cc <gc_execute_block+0x59c>)
 800d388:	7393      	strb	r3, [r2, #14]
                        break;
 800d38a:	e7c5      	b.n	800d318 <gc_execute_block+0x2e8>
                        if (mantissa == 0) {
 800d38c:	b961      	cbnz	r1, 800d3a8 <gc_execute_block+0x378>
                            word_bit.modal_group.G3 = On;
 800d38e:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d392:	f043 0308 	orr.w	r3, r3, #8
 800d396:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                            gc_block.modal.distance_incremental = int_value == 91;
 800d39a:	2c5b      	cmp	r4, #91	@ 0x5b
 800d39c:	bf14      	ite	ne
 800d39e:	2200      	movne	r2, #0
 800d3a0:	2201      	moveq	r2, #1
 800d3a2:	4b8a      	ldr	r3, [pc, #552]	@ (800d5cc <gc_execute_block+0x59c>)
 800d3a4:	731a      	strb	r2, [r3, #12]
 800d3a6:	e7b7      	b.n	800d318 <gc_execute_block+0x2e8>
                            word_bit.modal_group.G4 = On;
 800d3a8:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d3ac:	f043 0310 	orr.w	r3, r3, #16
 800d3b0:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                            if ((mantissa != 10) || (int_value == 90))
 800d3b4:	290a      	cmp	r1, #10
 800d3b6:	f043 8413 	bne.w	8010be0 <gc_execute_block+0x3bb0>
 800d3ba:	2c5a      	cmp	r4, #90	@ 0x5a
 800d3bc:	f003 8413 	beq.w	8010be6 <gc_execute_block+0x3bb6>
                            mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	e7a9      	b.n	800d318 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G5 = On;
 800d3c4:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d3c8:	f043 0320 	orr.w	r3, r3, #32
 800d3cc:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.feed_mode = (feed_mode_t)(94 - int_value);
 800d3d0:	b2e3      	uxtb	r3, r4
 800d3d2:	f1c3 035e 	rsb	r3, r3, #94	@ 0x5e
 800d3d6:	4a7d      	ldr	r2, [pc, #500]	@ (800d5cc <gc_execute_block+0x59c>)
 800d3d8:	7293      	strb	r3, [r2, #10]
                        break;
 800d3da:	e79d      	b.n	800d318 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G5 = On;
 800d3dc:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d3e0:	f043 0320 	orr.w	r3, r3, #32
 800d3e4:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.feed_mode = FeedMode_UnitsPerRev;
 800d3e8:	4b78      	ldr	r3, [pc, #480]	@ (800d5cc <gc_execute_block+0x59c>)
 800d3ea:	2202      	movs	r2, #2
 800d3ec:	729a      	strb	r2, [r3, #10]
                        break;
 800d3ee:	e793      	b.n	800d318 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G6 = On;
 800d3f0:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d3f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3f8:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.units_imperial = int_value == 20;
 800d3fc:	2c14      	cmp	r4, #20
 800d3fe:	bf14      	ite	ne
 800d400:	2200      	movne	r2, #0
 800d402:	2201      	moveq	r2, #1
 800d404:	4b71      	ldr	r3, [pc, #452]	@ (800d5cc <gc_execute_block+0x59c>)
 800d406:	72da      	strb	r2, [r3, #11]
                        break;
 800d408:	e786      	b.n	800d318 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G7 = On;
 800d40a:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d40e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d412:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        break;
 800d416:	e77f      	b.n	800d318 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G8 = On;
 800d418:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800d41c:	f043 0301 	orr.w	r3, r3, #1
 800d420:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        if(int_value == 49) // G49
 800d424:	2c31      	cmp	r4, #49	@ 0x31
 800d426:	d007      	beq.n	800d438 <gc_execute_block+0x408>
                        else if(mantissa == 0 && grbl.tool_table.n_tools) // G43
 800d428:	b959      	cbnz	r1, 800d442 <gc_execute_block+0x412>
 800d42a:	4b6a      	ldr	r3, [pc, #424]	@ (800d5d4 <gc_execute_block+0x5a4>)
 800d42c:	699b      	ldr	r3, [r3, #24]
 800d42e:	b143      	cbz	r3, 800d442 <gc_execute_block+0x412>
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_Enable;
 800d430:	4b66      	ldr	r3, [pc, #408]	@ (800d5cc <gc_execute_block+0x59c>)
 800d432:	2201      	movs	r2, #1
 800d434:	73da      	strb	r2, [r3, #15]
 800d436:	e76f      	b.n	800d318 <gc_execute_block+0x2e8>
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_Cancel;
 800d438:	2300      	movs	r3, #0
 800d43a:	4a64      	ldr	r2, [pc, #400]	@ (800d5cc <gc_execute_block+0x59c>)
 800d43c:	73d3      	strb	r3, [r2, #15]
                        mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800d43e:	4619      	mov	r1, r3
 800d440:	e76a      	b.n	800d318 <gc_execute_block+0x2e8>
                        else if(mantissa == 20 && grbl.tool_table.n_tools) // G43.2
 800d442:	2914      	cmp	r1, #20
 800d444:	d00d      	beq.n	800d462 <gc_execute_block+0x432>
                        else if(mantissa == 10) { // G43.1
 800d446:	290a      	cmp	r1, #10
 800d448:	f043 83d0 	bne.w	8010bec <gc_execute_block+0x3bbc>
                            if(axis_command)
 800d44c:	f1ba 0f00 	cmp.w	sl, #0
 800d450:	f043 83cf 	bne.w	8010bf2 <gc_execute_block+0x3bc2>
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_EnableDynamic;
 800d454:	4b5d      	ldr	r3, [pc, #372]	@ (800d5cc <gc_execute_block+0x59c>)
 800d456:	2202      	movs	r2, #2
 800d458:	73da      	strb	r2, [r3, #15]
                        mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800d45a:	2100      	movs	r1, #0
                            axis_command = AxisCommand_ToolLengthOffset;
 800d45c:	f04f 0a03 	mov.w	sl, #3
 800d460:	e75a      	b.n	800d318 <gc_execute_block+0x2e8>
                        else if(mantissa == 20 && grbl.tool_table.n_tools) // G43.2
 800d462:	4b5c      	ldr	r3, [pc, #368]	@ (800d5d4 <gc_execute_block+0x5a4>)
 800d464:	699b      	ldr	r3, [r3, #24]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d0ed      	beq.n	800d446 <gc_execute_block+0x416>
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_ApplyAdditional;
 800d46a:	4b58      	ldr	r3, [pc, #352]	@ (800d5cc <gc_execute_block+0x59c>)
 800d46c:	2203      	movs	r2, #3
 800d46e:	73da      	strb	r2, [r3, #15]
                        mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800d470:	2100      	movs	r1, #0
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_ApplyAdditional;
 800d472:	e751      	b.n	800d318 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G12 = On;
 800d474:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800d478:	f043 0308 	orr.w	r3, r3, #8
 800d47c:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        gc_block.modal.coord_system.id = (coord_system_id_t)(int_value - 54); // Shift to array indexing.
 800d480:	b2e2      	uxtb	r2, r4
 800d482:	3a36      	subs	r2, #54	@ 0x36
 800d484:	b2d2      	uxtb	r2, r2
 800d486:	4b51      	ldr	r3, [pc, #324]	@ (800d5cc <gc_execute_block+0x59c>)
 800d488:	771a      	strb	r2, [r3, #28]
                        if(int_value == 59 && mantissa > 0) {
 800d48a:	2c3b      	cmp	r4, #59	@ 0x3b
 800d48c:	f47f af44 	bne.w	800d318 <gc_execute_block+0x2e8>
 800d490:	291e      	cmp	r1, #30
 800d492:	f203 83b1 	bhi.w	8010bf8 <gc_execute_block+0x3bc8>
 800d496:	a301      	add	r3, pc, #4	@ (adr r3, 800d49c <gc_execute_block+0x46c>)
 800d498:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800d49c:	0800d319 	.word	0x0800d319
 800d4a0:	08010bf9 	.word	0x08010bf9
 800d4a4:	08010bf9 	.word	0x08010bf9
 800d4a8:	08010bf9 	.word	0x08010bf9
 800d4ac:	08010bf9 	.word	0x08010bf9
 800d4b0:	08010bf9 	.word	0x08010bf9
 800d4b4:	08010bf9 	.word	0x08010bf9
 800d4b8:	08010bf9 	.word	0x08010bf9
 800d4bc:	08010bf9 	.word	0x08010bf9
 800d4c0:	08010bf9 	.word	0x08010bf9
 800d4c4:	0800d519 	.word	0x0800d519
 800d4c8:	08010bf9 	.word	0x08010bf9
 800d4cc:	08010bf9 	.word	0x08010bf9
 800d4d0:	08010bf9 	.word	0x08010bf9
 800d4d4:	08010bf9 	.word	0x08010bf9
 800d4d8:	08010bf9 	.word	0x08010bf9
 800d4dc:	08010bf9 	.word	0x08010bf9
 800d4e0:	08010bf9 	.word	0x08010bf9
 800d4e4:	08010bf9 	.word	0x08010bf9
 800d4e8:	08010bf9 	.word	0x08010bf9
 800d4ec:	0800d519 	.word	0x0800d519
 800d4f0:	08010bf9 	.word	0x08010bf9
 800d4f4:	08010bf9 	.word	0x08010bf9
 800d4f8:	08010bf9 	.word	0x08010bf9
 800d4fc:	08010bf9 	.word	0x08010bf9
 800d500:	08010bf9 	.word	0x08010bf9
 800d504:	08010bf9 	.word	0x08010bf9
 800d508:	08010bf9 	.word	0x08010bf9
 800d50c:	08010bf9 	.word	0x08010bf9
 800d510:	08010bf9 	.word	0x08010bf9
 800d514:	0800d519 	.word	0x0800d519
                                gc_block.modal.coord_system.id += mantissa / 10;
 800d518:	4b2b      	ldr	r3, [pc, #172]	@ (800d5c8 <gc_execute_block+0x598>)
 800d51a:	fba3 1301 	umull	r1, r3, r3, r1
 800d51e:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 800d522:	4b2a      	ldr	r3, [pc, #168]	@ (800d5cc <gc_execute_block+0x59c>)
 800d524:	771a      	strb	r2, [r3, #28]
                                mantissa = 0;
 800d526:	2100      	movs	r1, #0
 800d528:	e6f6      	b.n	800d318 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G13 = On;
 800d52a:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800d52e:	f043 0310 	orr.w	r3, r3, #16
 800d532:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        if (mantissa != 0) // [G61.1 not supported]
 800d536:	2900      	cmp	r1, #0
 800d538:	f43f aeee 	beq.w	800d318 <gc_execute_block+0x2e8>
                            FAIL(Status_GcodeUnsupportedCommand);
 800d53c:	2414      	movs	r4, #20
 800d53e:	e654      	b.n	800d1ea <gc_execute_block+0x1ba>
                        word_bit.modal_group.G0 = On;
 800d540:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d544:	f043 0301 	orr.w	r3, r3, #1
 800d548:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.non_modal_command = (non_modal_t)int_value;
 800d54c:	4b1f      	ldr	r3, [pc, #124]	@ (800d5cc <gc_execute_block+0x59c>)
 800d54e:	701c      	strb	r4, [r3, #0]
                        if(mantissa != 0 || grbl.on_macro_execute == NULL)
 800d550:	2900      	cmp	r1, #0
 800d552:	f043 8354 	bne.w	8010bfe <gc_execute_block+0x3bce>
 800d556:	4b1f      	ldr	r3, [pc, #124]	@ (800d5d4 <gc_execute_block+0x5a4>)
 800d558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	f47f aedb 	bne.w	800d318 <gc_execute_block+0x2e8>
                            FAIL(Status_GcodeUnsupportedCommand);
 800d562:	2414      	movs	r4, #20
 800d564:	e641      	b.n	800d1ea <gc_execute_block+0x1ba>
                        if(settings.mode == Mode_Lathe) {
 800d566:	4b1c      	ldr	r3, [pc, #112]	@ (800d5d8 <gc_execute_block+0x5a8>)
 800d568:	7e1b      	ldrb	r3, [r3, #24]
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	f043 834a 	bne.w	8010c04 <gc_execute_block+0x3bd4>
                            word_bit.modal_group.G14 = On;
 800d570:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800d574:	f043 0320 	orr.w	r3, r3, #32
 800d578:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                            gc_block.modal.spindle.rpm_mode = (spindle_rpm_mode_t)((int_value - 96) ^ 1);
 800d57c:	f1a4 0360 	sub.w	r3, r4, #96	@ 0x60
 800d580:	b2db      	uxtb	r3, r3
 800d582:	f083 0301 	eor.w	r3, r3, #1
 800d586:	4a11      	ldr	r2, [pc, #68]	@ (800d5cc <gc_execute_block+0x59c>)
 800d588:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
                        break;
 800d58c:	e6c4      	b.n	800d318 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G10 = On;
 800d58e:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800d592:	f043 0302 	orr.w	r3, r3, #2
 800d596:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        gc_block.modal.retract_mode = (cc_retract_mode_t)(int_value - 98);
 800d59a:	b2e3      	uxtb	r3, r4
 800d59c:	3b62      	subs	r3, #98	@ 0x62
 800d59e:	4a0b      	ldr	r2, [pc, #44]	@ (800d5cc <gc_execute_block+0x59c>)
 800d5a0:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
                        break;
 800d5a4:	e6b8      	b.n	800d318 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G11 = On;
 800d5a6:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800d5aa:	f043 0304 	orr.w	r3, r3, #4
 800d5ae:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        gc_block.modal.scaling_active = int_value == 51;
 800d5b2:	2c33      	cmp	r4, #51	@ 0x33
 800d5b4:	bf14      	ite	ne
 800d5b6:	2200      	movne	r2, #0
 800d5b8:	2201      	moveq	r2, #1
 800d5ba:	4b04      	ldr	r3, [pc, #16]	@ (800d5cc <gc_execute_block+0x59c>)
 800d5bc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                        axis_command = AxisCommand_Scaling;
 800d5c0:	f04f 0a04 	mov.w	sl, #4
                        break;
 800d5c4:	e6a8      	b.n	800d318 <gc_execute_block+0x2e8>
 800d5c6:	bf00      	nop
 800d5c8:	cccccccd 	.word	0xcccccccd
 800d5cc:	20000ddc 	.word	0x20000ddc
 800d5d0:	20000ee4 	.word	0x20000ee4
 800d5d4:	20001394 	.word	0x20001394
 800d5d8:	20001bc4 	.word	0x20001bc4
                if(gc_block.non_modal_command == NonModal_MacroCall) {
 800d5dc:	4ba4      	ldr	r3, [pc, #656]	@ (800d870 <gc_execute_block+0x840>)
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	2b41      	cmp	r3, #65	@ 0x41
 800d5e2:	d06d      	beq.n	800d6c0 <gc_execute_block+0x690>
                if(mantissa > 0)
 800d5e4:	2900      	cmp	r1, #0
 800d5e6:	f043 8319 	bne.w	8010c1c <gc_execute_block+0x3bec>
                word_bit.modal_group.mask = 0;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	931f      	str	r3, [sp, #124]	@ 0x7c
                switch(int_value) {
 800d5ee:	2c63      	cmp	r4, #99	@ 0x63
 800d5f0:	f200 81b0 	bhi.w	800d954 <gc_execute_block+0x924>
 800d5f4:	e8df f014 	tbh	[pc, r4, lsl #1]
 800d5f8:	00750075 	.word	0x00750075
 800d5fc:	00af0075 	.word	0x00af0075
 800d600:	00af00af 	.word	0x00af00af
 800d604:	00ec00d2 	.word	0x00ec00d2
 800d608:	00ec00ec 	.word	0x00ec00ec
 800d60c:	01ae01ae 	.word	0x01ae01ae
 800d610:	01ae01ae 	.word	0x01ae01ae
 800d614:	01ae01ae 	.word	0x01ae01ae
 800d618:	01ae01ae 	.word	0x01ae01ae
 800d61c:	01ae01ae 	.word	0x01ae01ae
 800d620:	01ae01ae 	.word	0x01ae01ae
 800d624:	01ae01ae 	.word	0x01ae01ae
 800d628:	01ae01ae 	.word	0x01ae01ae
 800d62c:	01ae01ae 	.word	0x01ae01ae
 800d630:	01ae01ae 	.word	0x01ae01ae
 800d634:	01ae0075 	.word	0x01ae0075
 800d638:	01ae01ae 	.word	0x01ae01ae
 800d63c:	01ae01ae 	.word	0x01ae01ae
 800d640:	01ae01ae 	.word	0x01ae01ae
 800d644:	01ae01ae 	.word	0x01ae01ae
 800d648:	01ae01ae 	.word	0x01ae01ae
 800d64c:	01ae01ae 	.word	0x01ae01ae
 800d650:	01ae01ae 	.word	0x01ae01ae
 800d654:	01ae01ae 	.word	0x01ae01ae
 800d658:	012c012c 	.word	0x012c012c
 800d65c:	012c012c 	.word	0x012c012c
 800d660:	012c01ae 	.word	0x012c01ae
 800d664:	01ae01ae 	.word	0x01ae01ae
 800d668:	01ae0125 	.word	0x01ae0125
 800d66c:	01ae01ae 	.word	0x01ae01ae
 800d670:	01440075 	.word	0x01440075
 800d674:	014f014f 	.word	0x014f014f
 800d678:	014f014f 	.word	0x014f014f
 800d67c:	017e0166 	.word	0x017e0166
 800d680:	01ae017e 	.word	0x01ae017e
 800d684:	01950195 	.word	0x01950195
 800d688:	01950195 	.word	0x01950195
 800d68c:	01ae01ae 	.word	0x01ae01ae
 800d690:	01ae01ae 	.word	0x01ae01ae
 800d694:	01ae01ae 	.word	0x01ae01ae
 800d698:	01ae01ae 	.word	0x01ae01ae
 800d69c:	01ae01ae 	.word	0x01ae01ae
 800d6a0:	01ae01ae 	.word	0x01ae01ae
 800d6a4:	01ae01ae 	.word	0x01ae01ae
 800d6a8:	01ae01ae 	.word	0x01ae01ae
 800d6ac:	01ae01ae 	.word	0x01ae01ae
 800d6b0:	01ae01ae 	.word	0x01ae01ae
 800d6b4:	01ae01ae 	.word	0x01ae01ae
 800d6b8:	01ae01ae 	.word	0x01ae01ae
 800d6bc:	019b01ae 	.word	0x019b01ae
                    if(gc_block.words.m)
 800d6c0:	4b6b      	ldr	r3, [pc, #428]	@ (800d870 <gc_execute_block+0x840>)
 800d6c2:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800d6c6:	f013 0f20 	tst.w	r3, #32
 800d6ca:	f043 82a4 	bne.w	8010c16 <gc_execute_block+0x3be6>
                    gc_block.values.m = value;
 800d6ce:	4b68      	ldr	r3, [pc, #416]	@ (800d870 <gc_execute_block+0x840>)
 800d6d0:	ed83 8a16 	vstr	s16, [r3, #88]	@ 0x58
                    gc_block.words.m = On; // Flag to indicate parameter assigned.
 800d6d4:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800d6d8:	f042 0220 	orr.w	r2, r2, #32
 800d6dc:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
                    continue;
 800d6e0:	e16c      	b.n	800d9bc <gc_execute_block+0x98c>
                        word_bit.modal_group.M4 = On;
 800d6e2:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800d6e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6ea:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        switch(int_value) {
 800d6ee:	b13c      	cbz	r4, 800d700 <gc_execute_block+0x6d0>
 800d6f0:	2c01      	cmp	r4, #1
 800d6f2:	d00c      	beq.n	800d70e <gc_execute_block+0x6de>
                                gc_block.modal.program_flow = (program_flow_t)int_value;
 800d6f4:	4b5e      	ldr	r3, [pc, #376]	@ (800d870 <gc_execute_block+0x840>)
 800d6f6:	f883 4020 	strb.w	r4, [r3, #32]
                is_user_mcode = false;
 800d6fa:	f04f 0900 	mov.w	r9, #0
 800d6fe:	e0b1      	b.n	800d864 <gc_execute_block+0x834>
                                gc_block.modal.program_flow = ProgramFlow_Paused;
 800d700:	4b5b      	ldr	r3, [pc, #364]	@ (800d870 <gc_execute_block+0x840>)
 800d702:	2203      	movs	r2, #3
 800d704:	f883 2020 	strb.w	r2, [r3, #32]
                is_user_mcode = false;
 800d708:	f04f 0900 	mov.w	r9, #0
                                break;
 800d70c:	e0aa      	b.n	800d864 <gc_execute_block+0x834>
                                if(hal.signals_cap.stop_disable ? !hal.control.get_state().stop_disable : !sys.flags.optional_stop_disable)
 800d70e:	4b59      	ldr	r3, [pc, #356]	@ (800d874 <gc_execute_block+0x844>)
 800d710:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 800d714:	f013 0f20 	tst.w	r3, #32
 800d718:	d013      	beq.n	800d742 <gc_execute_block+0x712>
 800d71a:	4b56      	ldr	r3, [pc, #344]	@ (800d874 <gc_execute_block+0x844>)
 800d71c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d71e:	4798      	blx	r3
 800d720:	f3c0 1942 	ubfx	r9, r0, #5, #3
 800d724:	f089 0901 	eor.w	r9, r9, #1
 800d728:	f009 0901 	and.w	r9, r9, #1
 800d72c:	f1b9 0f00 	cmp.w	r9, #0
 800d730:	f000 8098 	beq.w	800d864 <gc_execute_block+0x834>
                                    gc_block.modal.program_flow = ProgramFlow_OptionalStop;
 800d734:	4b4e      	ldr	r3, [pc, #312]	@ (800d870 <gc_execute_block+0x840>)
 800d736:	2201      	movs	r2, #1
 800d738:	f883 2020 	strb.w	r2, [r3, #32]
                is_user_mcode = false;
 800d73c:	f04f 0900 	mov.w	r9, #0
 800d740:	e090      	b.n	800d864 <gc_execute_block+0x834>
                                if(hal.signals_cap.stop_disable ? !hal.control.get_state().stop_disable : !sys.flags.optional_stop_disable)
 800d742:	4b4d      	ldr	r3, [pc, #308]	@ (800d878 <gc_execute_block+0x848>)
 800d744:	f893 9016 	ldrb.w	r9, [r3, #22]
 800d748:	ea4f 1999 	mov.w	r9, r9, lsr #6
 800d74c:	f089 0901 	eor.w	r9, r9, #1
 800d750:	f009 0901 	and.w	r9, r9, #1
 800d754:	e7ea      	b.n	800d72c <gc_execute_block+0x6fc>
                        word_bit.modal_group.M7 = On;
 800d756:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800d75a:	f043 0302 	orr.w	r3, r3, #2
 800d75e:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        gc_block.modal.spindle.state.on = !(int_value == 5);
 800d762:	1f61      	subs	r1, r4, #5
 800d764:	bf18      	it	ne
 800d766:	2101      	movne	r1, #1
 800d768:	4b41      	ldr	r3, [pc, #260]	@ (800d870 <gc_execute_block+0x840>)
 800d76a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800d76e:	f361 0200 	bfi	r2, r1, #0, #1
 800d772:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                        gc_block.modal.spindle.state.ccw = int_value == 4;
 800d776:	2c04      	cmp	r4, #4
 800d778:	bf14      	ite	ne
 800d77a:	2100      	movne	r1, #0
 800d77c:	2101      	moveq	r1, #1
 800d77e:	b2d2      	uxtb	r2, r2
 800d780:	f361 0241 	bfi	r2, r1, #1, #1
 800d784:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                        sys.override_delay.spindle = On;
 800d788:	4a3b      	ldr	r2, [pc, #236]	@ (800d878 <gc_execute_block+0x848>)
 800d78a:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800d78e:	f043 0304 	orr.w	r3, r3, #4
 800d792:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
                is_user_mcode = false;
 800d796:	f04f 0900 	mov.w	r9, #0
                        break;
 800d79a:	e063      	b.n	800d864 <gc_execute_block+0x834>
                        if(settings.tool_change.mode != ToolChange_Ignore) {
 800d79c:	4b37      	ldr	r3, [pc, #220]	@ (800d87c <gc_execute_block+0x84c>)
 800d79e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d7a2:	2b04      	cmp	r3, #4
 800d7a4:	f000 80ea 	beq.w	800d97c <gc_execute_block+0x94c>
                            if(hal.stream.suspend_read || hal.tool.change)
 800d7a8:	4b32      	ldr	r3, [pc, #200]	@ (800d874 <gc_execute_block+0x844>)
 800d7aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d7ae:	b143      	cbz	r3, 800d7c2 <gc_execute_block+0x792>
                                word_bit.modal_group.M6 = On;
 800d7b0:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800d7b4:	f043 0301 	orr.w	r3, r3, #1
 800d7b8:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                is_user_mcode = false;
 800d7bc:	f04f 0900 	mov.w	r9, #0
                                word_bit.modal_group.M6 = On;
 800d7c0:	e050      	b.n	800d864 <gc_execute_block+0x834>
                            if(hal.stream.suspend_read || hal.tool.change)
 800d7c2:	4b2c      	ldr	r3, [pc, #176]	@ (800d874 <gc_execute_block+0x844>)
 800d7c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1f1      	bne.n	800d7b0 <gc_execute_block+0x780>
                                FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 800d7cc:	2414      	movs	r4, #20
 800d7ce:	e50c      	b.n	800d1ea <gc_execute_block+0x1ba>
                        word_bit.modal_group.M8 = On;
 800d7d0:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800d7d4:	f043 0304 	orr.w	r3, r3, #4
 800d7d8:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        sys.override_delay.coolant = On;
 800d7dc:	4a26      	ldr	r2, [pc, #152]	@ (800d878 <gc_execute_block+0x848>)
 800d7de:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800d7e2:	f043 0302 	orr.w	r3, r3, #2
 800d7e6:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
                        gc_parser_flags.set_coolant = On;
 800d7ea:	f448 7880 	orr.w	r8, r8, #256	@ 0x100
                        switch(int_value) {
 800d7ee:	2c08      	cmp	r4, #8
 800d7f0:	d017      	beq.n	800d822 <gc_execute_block+0x7f2>
 800d7f2:	2c09      	cmp	r4, #9
 800d7f4:	d01f      	beq.n	800d836 <gc_execute_block+0x806>
 800d7f6:	2c07      	cmp	r4, #7
 800d7f8:	d002      	beq.n	800d800 <gc_execute_block+0x7d0>
 800d7fa:	f04f 0900 	mov.w	r9, #0
 800d7fe:	e031      	b.n	800d864 <gc_execute_block+0x834>
                                if(!hal.coolant_cap.mist)
 800d800:	4b1c      	ldr	r3, [pc, #112]	@ (800d874 <gc_execute_block+0x844>)
 800d802:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800d806:	f013 0f02 	tst.w	r3, #2
 800d80a:	f003 820a 	beq.w	8010c22 <gc_execute_block+0x3bf2>
                                gc_block.modal.coolant.mist = On;
 800d80e:	4a18      	ldr	r2, [pc, #96]	@ (800d870 <gc_execute_block+0x840>)
 800d810:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800d814:	f043 0302 	orr.w	r3, r3, #2
 800d818:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
                is_user_mcode = false;
 800d81c:	f04f 0900 	mov.w	r9, #0
                                break;
 800d820:	e020      	b.n	800d864 <gc_execute_block+0x834>
                                gc_block.modal.coolant.flood = On;
 800d822:	4a13      	ldr	r2, [pc, #76]	@ (800d870 <gc_execute_block+0x840>)
 800d824:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800d828:	f043 0301 	orr.w	r3, r3, #1
 800d82c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
                is_user_mcode = false;
 800d830:	f04f 0900 	mov.w	r9, #0
                                break;
 800d834:	e016      	b.n	800d864 <gc_execute_block+0x834>
                                gc_block.modal.coolant.value = 0;
 800d836:	f04f 0900 	mov.w	r9, #0
 800d83a:	4b0d      	ldr	r3, [pc, #52]	@ (800d870 <gc_execute_block+0x840>)
 800d83c:	f883 9021 	strb.w	r9, [r3, #33]	@ 0x21
                                break;
 800d840:	e010      	b.n	800d864 <gc_execute_block+0x834>
                        if(!settings.parking.flags.enable_override_control) // TODO: check if enabled?
 800d842:	4b0e      	ldr	r3, [pc, #56]	@ (800d87c <gc_execute_block+0x84c>)
 800d844:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800d848:	f013 0f04 	tst.w	r3, #4
 800d84c:	f003 81ec 	beq.w	8010c28 <gc_execute_block+0x3bf8>
                        word_bit.modal_group.M9 = On;
 800d850:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800d854:	f043 0308 	orr.w	r3, r3, #8
 800d858:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        gc_block.override_command = (override_mode_t)int_value;
 800d85c:	4b04      	ldr	r3, [pc, #16]	@ (800d870 <gc_execute_block+0x840>)
 800d85e:	705c      	strb	r4, [r3, #1]
                is_user_mcode = false;
 800d860:	f04f 0900 	mov.w	r9, #0
                if (command_words.mask & word_bit.modal_group.mask)
 800d864:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800d866:	421f      	tst	r7, r3
 800d868:	f043 81f6 	bne.w	8010c58 <gc_execute_block+0x3c28>
                command_words.mask |= word_bit.modal_group.mask;
 800d86c:	431f      	orrs	r7, r3
                break;
 800d86e:	e0a5      	b.n	800d9bc <gc_execute_block+0x98c>
 800d870:	20000ddc 	.word	0x20000ddc
 800d874:	200011ac 	.word	0x200011ac
 800d878:	2000148c 	.word	0x2000148c
 800d87c:	20001bc4 	.word	0x20001bc4
                        word_bit.modal_group.M6 = On; //??
 800d880:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800d884:	f043 0301 	orr.w	r3, r3, #1
 800d888:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                is_user_mcode = false;
 800d88c:	f04f 0900 	mov.w	r9, #0
                        set_tool = true;
 800d890:	2301      	movs	r3, #1
 800d892:	9307      	str	r3, [sp, #28]
                        break;
 800d894:	e7e6      	b.n	800d864 <gc_execute_block+0x834>
                        if(hal.port.digital_out == NULL || hal.port.num_digital_out == 0)
 800d896:	4bcc      	ldr	r3, [pc, #816]	@ (800dbc8 <gc_execute_block+0xb98>)
 800d898:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	f003 81c6 	beq.w	8010c2e <gc_execute_block+0x3bfe>
 800d8a2:	4bc9      	ldr	r3, [pc, #804]	@ (800dbc8 <gc_execute_block+0xb98>)
 800d8a4:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	f003 81c3 	beq.w	8010c34 <gc_execute_block+0x3c04>
                        word_bit.modal_group.M10 = On;
 800d8ae:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800d8b2:	f043 0310 	orr.w	r3, r3, #16
 800d8b6:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        port_command = (io_mcode_t)int_value;
 800d8ba:	b2e3      	uxtb	r3, r4
 800d8bc:	9306      	str	r3, [sp, #24]
                is_user_mcode = false;
 800d8be:	f04f 0900 	mov.w	r9, #0
                        break;
 800d8c2:	e7cf      	b.n	800d864 <gc_execute_block+0x834>
                        if(hal.port.wait_on_input == NULL || (hal.port.num_digital_in == 0 && hal.port.num_analog_in == 0))
 800d8c4:	4bc0      	ldr	r3, [pc, #768]	@ (800dbc8 <gc_execute_block+0xb98>)
 800d8c6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	f003 81b5 	beq.w	8010c3a <gc_execute_block+0x3c0a>
 800d8d0:	4bbd      	ldr	r3, [pc, #756]	@ (800dbc8 <gc_execute_block+0xb98>)
 800d8d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d8d6:	f013 1fff 	tst.w	r3, #16711935	@ 0xff00ff
 800d8da:	f003 81b1 	beq.w	8010c40 <gc_execute_block+0x3c10>
                        word_bit.modal_group.M10 = On;
 800d8de:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800d8e2:	f043 0310 	orr.w	r3, r3, #16
 800d8e6:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        port_command = (io_mcode_t)int_value;
 800d8ea:	b2e3      	uxtb	r3, r4
 800d8ec:	9306      	str	r3, [sp, #24]
                is_user_mcode = false;
 800d8ee:	f04f 0900 	mov.w	r9, #0
                        break;
 800d8f2:	e7b7      	b.n	800d864 <gc_execute_block+0x834>
                        if(hal.port.analog_out == NULL || hal.port.num_analog_out == 0)
 800d8f4:	4bb4      	ldr	r3, [pc, #720]	@ (800dbc8 <gc_execute_block+0xb98>)
 800d8f6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	f003 81a3 	beq.w	8010c46 <gc_execute_block+0x3c16>
 800d900:	4bb1      	ldr	r3, [pc, #708]	@ (800dbc8 <gc_execute_block+0xb98>)
 800d902:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 800d906:	2b00      	cmp	r3, #0
 800d908:	f003 81a0 	beq.w	8010c4c <gc_execute_block+0x3c1c>
                        word_bit.modal_group.M10 = On;
 800d90c:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800d910:	f043 0310 	orr.w	r3, r3, #16
 800d914:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        port_command = (io_mcode_t)int_value;
 800d918:	b2e3      	uxtb	r3, r4
 800d91a:	9306      	str	r3, [sp, #24]
                is_user_mcode = false;
 800d91c:	f04f 0900 	mov.w	r9, #0
                        break;
 800d920:	e7a0      	b.n	800d864 <gc_execute_block+0x834>
                        gc_block.state_action = (modal_state_action_t)int_value;
 800d922:	4baa      	ldr	r3, [pc, #680]	@ (800dbcc <gc_execute_block+0xb9c>)
 800d924:	f883 40d0 	strb.w	r4, [r3, #208]	@ 0xd0
                is_user_mcode = false;
 800d928:	f04f 0900 	mov.w	r9, #0
                        break;
 800d92c:	e79a      	b.n	800d864 <gc_execute_block+0x834>
                        word_bit.modal_group.M4 = On;
 800d92e:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800d932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d936:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        gc_block.modal.program_flow = ProgramFlow_Return;
 800d93a:	4ba4      	ldr	r3, [pc, #656]	@ (800dbcc <gc_execute_block+0xb9c>)
 800d93c:	2263      	movs	r2, #99	@ 0x63
 800d93e:	f883 2020 	strb.w	r2, [r3, #32]
                        if(grbl.on_macro_return == NULL)
 800d942:	4ba3      	ldr	r3, [pc, #652]	@ (800dbd0 <gc_execute_block+0xba0>)
 800d944:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d948:	2b00      	cmp	r3, #0
 800d94a:	f003 8182 	beq.w	8010c52 <gc_execute_block+0x3c22>
                is_user_mcode = false;
 800d94e:	f04f 0900 	mov.w	r9, #0
 800d952:	e787      	b.n	800d864 <gc_execute_block+0x834>
                        if(hal.user_mcode.check && (gc_block.user_mcode = hal.user_mcode.check((user_mcode_t)int_value))) {
 800d954:	4b9c      	ldr	r3, [pc, #624]	@ (800dbc8 <gc_execute_block+0xb98>)
 800d956:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800d95a:	b16b      	cbz	r3, 800d978 <gc_execute_block+0x948>
 800d95c:	b2a0      	uxth	r0, r4
 800d95e:	4798      	blx	r3
 800d960:	4b9a      	ldr	r3, [pc, #616]	@ (800dbcc <gc_execute_block+0xb9c>)
 800d962:	8058      	strh	r0, [r3, #2]
 800d964:	b140      	cbz	r0, 800d978 <gc_execute_block+0x948>
                            word_bit.modal_group.M10 = On;
 800d966:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800d96a:	f043 0310 	orr.w	r3, r3, #16
 800d96e:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                            is_user_mcode = true;
 800d972:	f04f 0901 	mov.w	r9, #1
                            word_bit.modal_group.M10 = On;
 800d976:	e775      	b.n	800d864 <gc_execute_block+0x834>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 800d978:	2414      	movs	r4, #20
 800d97a:	e436      	b.n	800d1ea <gc_execute_block+0x1ba>
                is_user_mcode = false;
 800d97c:	f04f 0900 	mov.w	r9, #0
 800d980:	e770      	b.n	800d864 <gc_execute_block+0x834>
                        word_bit.parameter.a = On;
 800d982:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800d986:	f043 0302 	orr.w	r3, r3, #2
 800d98a:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.a = value;
 800d98e:	4b8f      	ldr	r3, [pc, #572]	@ (800dbcc <gc_execute_block+0xb9c>)
 800d990:	ed83 8a1b 	vstr	s16, [r3, #108]	@ 0x6c
                if (gc_block.words.mask & word_bit.parameter.mask)
 800d994:	4b8d      	ldr	r3, [pc, #564]	@ (800dbcc <gc_execute_block+0xb9c>)
 800d996:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d99a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800d99c:	4213      	tst	r3, r2
 800d99e:	f043 8173 	bne.w	8010c88 <gc_execute_block+0x3c58>
                if ((word_bit.parameter.mask & positive_only_words.mask) && value < 0.0f)
 800d9a2:	498c      	ldr	r1, [pc, #560]	@ (800dbd4 <gc_execute_block+0xba4>)
 800d9a4:	420a      	tst	r2, r1
 800d9a6:	d005      	beq.n	800d9b4 <gc_execute_block+0x984>
 800d9a8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9b0:	f103 816d 	bmi.w	8010c8e <gc_execute_block+0x3c5e>
                gc_block.words.mask |= word_bit.parameter.mask; // Flag to indicate parameter assigned.
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	4a85      	ldr	r2, [pc, #532]	@ (800dbcc <gc_execute_block+0xb9c>)
 800d9b8:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
    while ((letter = block[char_counter++]) != '\0') { // Loop until no more g-code words in block.
 800d9bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d9be:	1c5a      	adds	r2, r3, #1
 800d9c0:	9221      	str	r2, [sp, #132]	@ 0x84
 800d9c2:	5cf5      	ldrb	r5, [r6, r3]
 800d9c4:	2d00      	cmp	r5, #0
 800d9c6:	f000 81fb 	beq.w	800ddc0 <gc_execute_block+0xd90>
        if((letter < 'A' && letter != '$') || letter > 'Z')
 800d9ca:	2d40      	cmp	r5, #64	@ 0x40
 800d9cc:	f63f ab8d 	bhi.w	800d0ea <gc_execute_block+0xba>
 800d9d0:	2d24      	cmp	r5, #36	@ 0x24
 800d9d2:	f043 80d5 	bne.w	8010b80 <gc_execute_block+0x3b50>
        if (!read_float(block, &char_counter, &value)) {
 800d9d6:	aa20      	add	r2, sp, #128	@ 0x80
 800d9d8:	a921      	add	r1, sp, #132	@ 0x84
 800d9da:	4630      	mov	r0, r6
 800d9dc:	f007 fcd0 	bl	8015380 <read_float>
 800d9e0:	b928      	cbnz	r0, 800d9ee <gc_execute_block+0x9be>
            if(is_user_mcode)                   // Valueless parameters allowed for user defined M-codes.
 800d9e2:	f1b9 0f00 	cmp.w	r9, #0
 800d9e6:	f003 80ce 	beq.w	8010b86 <gc_execute_block+0x3b56>
                value = NAN;                    // Parameter validation deferred to implementation.
 800d9ea:	4b7b      	ldr	r3, [pc, #492]	@ (800dbd8 <gc_execute_block+0xba8>)
 800d9ec:	9320      	str	r3, [sp, #128]	@ 0x80
        if(isnan(value))
 800d9ee:	ed9d 8a20 	vldr	s16, [sp, #128]	@ 0x80
 800d9f2:	eeb4 8a48 	vcmp.f32	s16, s16
 800d9f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9fa:	f5bf ab7b 	bvs.w	800d0f4 <gc_execute_block+0xc4>
            int_value = (uint32_t)truncf(value);
 800d9fe:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800da02:	ee17 4a90 	vmov	r4, s15
            mantissa = (uint_fast16_t)roundf(100.0f * (value - int_value));
 800da06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da0a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800da0e:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 800dbdc <gc_execute_block+0xbac>
 800da12:	ee27 0a80 	vmul.f32	s0, s15, s0
 800da16:	f019 fc27 	bl	8027268 <roundf>
 800da1a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800da1e:	ee17 1a90 	vmov	r1, s15
        switch(letter) {
 800da22:	2d47      	cmp	r5, #71	@ 0x47
 800da24:	f43f ab69 	beq.w	800d0fa <gc_execute_block+0xca>
 800da28:	2d4d      	cmp	r5, #77	@ 0x4d
 800da2a:	f43f add7 	beq.w	800d5dc <gc_execute_block+0x5ac>
                word_bit.parameter.mask = 0;
 800da2e:	2300      	movs	r3, #0
 800da30:	931e      	str	r3, [sp, #120]	@ 0x78
                switch(letter) {
 800da32:	3d24      	subs	r5, #36	@ 0x24
 800da34:	2d36      	cmp	r5, #54	@ 0x36
 800da36:	f203 8112 	bhi.w	8010c5e <gc_execute_block+0x3c2e>
 800da3a:	a301      	add	r3, pc, #4	@ (adr r3, 800da40 <gc_execute_block+0xa10>)
 800da3c:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 800da40:	0800dda3 	.word	0x0800dda3
 800da44:	08010c5f 	.word	0x08010c5f
 800da48:	08010c5f 	.word	0x08010c5f
 800da4c:	08010c5f 	.word	0x08010c5f
 800da50:	08010c5f 	.word	0x08010c5f
 800da54:	08010c5f 	.word	0x08010c5f
 800da58:	08010c5f 	.word	0x08010c5f
 800da5c:	08010c5f 	.word	0x08010c5f
 800da60:	08010c5f 	.word	0x08010c5f
 800da64:	08010c5f 	.word	0x08010c5f
 800da68:	08010c5f 	.word	0x08010c5f
 800da6c:	08010c5f 	.word	0x08010c5f
 800da70:	08010c5f 	.word	0x08010c5f
 800da74:	08010c5f 	.word	0x08010c5f
 800da78:	08010c5f 	.word	0x08010c5f
 800da7c:	08010c5f 	.word	0x08010c5f
 800da80:	08010c5f 	.word	0x08010c5f
 800da84:	08010c5f 	.word	0x08010c5f
 800da88:	08010c5f 	.word	0x08010c5f
 800da8c:	08010c5f 	.word	0x08010c5f
 800da90:	08010c5f 	.word	0x08010c5f
 800da94:	08010c5f 	.word	0x08010c5f
 800da98:	08010c5f 	.word	0x08010c5f
 800da9c:	08010c5f 	.word	0x08010c5f
 800daa0:	08010c5f 	.word	0x08010c5f
 800daa4:	08010c5f 	.word	0x08010c5f
 800daa8:	08010c5f 	.word	0x08010c5f
 800daac:	08010c5f 	.word	0x08010c5f
 800dab0:	08010c5f 	.word	0x08010c5f
 800dab4:	0800d983 	.word	0x0800d983
 800dab8:	0800db1d 	.word	0x0800db1d
 800dabc:	0800db31 	.word	0x0800db31
 800dac0:	0800db45 	.word	0x0800db45
 800dac4:	0800db59 	.word	0x0800db59
 800dac8:	0800db6d 	.word	0x0800db6d
 800dacc:	08010c5f 	.word	0x08010c5f
 800dad0:	0800db81 	.word	0x0800db81
 800dad4:	0800dbad 	.word	0x0800dbad
 800dad8:	0800dbe1 	.word	0x0800dbe1
 800dadc:	0800dbfd 	.word	0x0800dbfd
 800dae0:	0800dc19 	.word	0x0800dc19
 800dae4:	08010c5f 	.word	0x08010c5f
 800dae8:	0800dc43 	.word	0x0800dc43
 800daec:	0800dc5b 	.word	0x0800dc5b
 800daf0:	0800dc87 	.word	0x0800dc87
 800daf4:	0800dc9b 	.word	0x0800dc9b
 800daf8:	0800dcaf 	.word	0x0800dcaf
 800dafc:	0800dcc3 	.word	0x0800dcc3
 800db00:	0800dcd7 	.word	0x0800dcd7
 800db04:	0800dd1f 	.word	0x0800dd1f
 800db08:	0800dd33 	.word	0x0800dd33
 800db0c:	0800dd47 	.word	0x0800dd47
 800db10:	0800dd5b 	.word	0x0800dd5b
 800db14:	0800dd73 	.word	0x0800dd73
 800db18:	0800dd8b 	.word	0x0800dd8b
                        word_bit.parameter.b = On;
 800db1c:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800db20:	f043 0304 	orr.w	r3, r3, #4
 800db24:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.b = value;
 800db28:	4b28      	ldr	r3, [pc, #160]	@ (800dbcc <gc_execute_block+0xb9c>)
 800db2a:	ed83 8a1c 	vstr	s16, [r3, #112]	@ 0x70
                        break;
 800db2e:	e731      	b.n	800d994 <gc_execute_block+0x964>
                        word_bit.parameter.c = On;
 800db30:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800db34:	f043 0308 	orr.w	r3, r3, #8
 800db38:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.c = value;
 800db3c:	4b23      	ldr	r3, [pc, #140]	@ (800dbcc <gc_execute_block+0xb9c>)
 800db3e:	ed83 8a1d 	vstr	s16, [r3, #116]	@ 0x74
                        break;
 800db42:	e727      	b.n	800d994 <gc_execute_block+0x964>
                        word_bit.parameter.d = On;
 800db44:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800db48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db4c:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.d = value;
 800db50:	4b1e      	ldr	r3, [pc, #120]	@ (800dbcc <gc_execute_block+0xb9c>)
 800db52:	ed83 8a0f 	vstr	s16, [r3, #60]	@ 0x3c
                        break;
 800db56:	e71d      	b.n	800d994 <gc_execute_block+0x964>
                        word_bit.parameter.e = On;
 800db58:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800db5c:	f043 0301 	orr.w	r3, r3, #1
 800db60:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.e = value;
 800db64:	4b19      	ldr	r3, [pc, #100]	@ (800dbcc <gc_execute_block+0xb9c>)
 800db66:	ed83 8a10 	vstr	s16, [r3, #64]	@ 0x40
                        break;
 800db6a:	e713      	b.n	800d994 <gc_execute_block+0x964>
                        word_bit.parameter.f = On;
 800db6c:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800db70:	f043 0302 	orr.w	r3, r3, #2
 800db74:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.f = value;
 800db78:	4b14      	ldr	r3, [pc, #80]	@ (800dbcc <gc_execute_block+0xb9c>)
 800db7a:	ed83 8a11 	vstr	s16, [r3, #68]	@ 0x44
                        break;
 800db7e:	e709      	b.n	800d994 <gc_execute_block+0x964>
                        if (mantissa > 0)
 800db80:	2900      	cmp	r1, #0
 800db82:	f043 806f 	bne.w	8010c64 <gc_execute_block+0x3c34>
                        word_bit.parameter.h = On;
 800db86:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800db8a:	f043 0308 	orr.w	r3, r3, #8
 800db8e:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.h = isnan(value) ? 0xFFFFFFFF : int_value;
 800db92:	eeb4 8a48 	vcmp.f32	s16, s16
 800db96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db9a:	d604      	bvs.n	800dba6 <gc_execute_block+0xb76>
 800db9c:	4622      	mov	r2, r4
 800db9e:	4b0b      	ldr	r3, [pc, #44]	@ (800dbcc <gc_execute_block+0xb9c>)
 800dba0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
                        break;
 800dba4:	e6f6      	b.n	800d994 <gc_execute_block+0x964>
                        gc_block.values.h = isnan(value) ? 0xFFFFFFFF : int_value;
 800dba6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbaa:	e7f8      	b.n	800db9e <gc_execute_block+0xb6e>
                        ijk_words.i = On;
 800dbac:	9b05      	ldr	r3, [sp, #20]
 800dbae:	f043 0301 	orr.w	r3, r3, #1
 800dbb2:	9305      	str	r3, [sp, #20]
                        word_bit.parameter.i = On;
 800dbb4:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800dbb8:	f043 0310 	orr.w	r3, r3, #16
 800dbbc:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.ijk[I_VALUE] = value;
 800dbc0:	4b02      	ldr	r3, [pc, #8]	@ (800dbcc <gc_execute_block+0xb9c>)
 800dbc2:	ed83 8a12 	vstr	s16, [r3, #72]	@ 0x48
                        break;
 800dbc6:	e6e5      	b.n	800d994 <gc_execute_block+0x964>
 800dbc8:	200011ac 	.word	0x200011ac
 800dbcc:	20000ddc 	.word	0x20000ddc
 800dbd0:	20001394 	.word	0x20001394
 800dbd4:	0018ca80 	.word	0x0018ca80
 800dbd8:	7fc00000 	.word	0x7fc00000
 800dbdc:	42c80000 	.word	0x42c80000
                        ijk_words.j = On;
 800dbe0:	9b05      	ldr	r3, [sp, #20]
 800dbe2:	f043 0302 	orr.w	r3, r3, #2
 800dbe6:	9305      	str	r3, [sp, #20]
                        word_bit.parameter.j = On;
 800dbe8:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800dbec:	f043 0320 	orr.w	r3, r3, #32
 800dbf0:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.ijk[J_VALUE] = value;
 800dbf4:	4bb7      	ldr	r3, [pc, #732]	@ (800ded4 <gc_execute_block+0xea4>)
 800dbf6:	ed83 8a13 	vstr	s16, [r3, #76]	@ 0x4c
                        break;
 800dbfa:	e6cb      	b.n	800d994 <gc_execute_block+0x964>
                        ijk_words.k = On;
 800dbfc:	9b05      	ldr	r3, [sp, #20]
 800dbfe:	f043 0304 	orr.w	r3, r3, #4
 800dc02:	9305      	str	r3, [sp, #20]
                        word_bit.parameter.k = On;
 800dc04:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800dc08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc0c:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.ijk[K_VALUE] = value;
 800dc10:	4bb0      	ldr	r3, [pc, #704]	@ (800ded4 <gc_execute_block+0xea4>)
 800dc12:	ed83 8a14 	vstr	s16, [r3, #80]	@ 0x50
                        break;
 800dc16:	e6bd      	b.n	800d994 <gc_execute_block+0x964>
                        if (mantissa > 0)
 800dc18:	2900      	cmp	r1, #0
 800dc1a:	f043 8026 	bne.w	8010c6a <gc_execute_block+0x3c3a>
                        word_bit.parameter.l = On;
 800dc1e:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800dc22:	f043 0310 	orr.w	r3, r3, #16
 800dc26:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.l = isnan(value) ? 0xFF : (uint8_t)int_value;
 800dc2a:	eeb4 8a48 	vcmp.f32	s16, s16
 800dc2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc32:	d604      	bvs.n	800dc3e <gc_execute_block+0xc0e>
 800dc34:	b2e2      	uxtb	r2, r4
 800dc36:	4ba7      	ldr	r3, [pc, #668]	@ (800ded4 <gc_execute_block+0xea4>)
 800dc38:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                        break;
 800dc3c:	e6aa      	b.n	800d994 <gc_execute_block+0x964>
                        gc_block.values.l = isnan(value) ? 0xFF : (uint8_t)int_value;
 800dc3e:	22ff      	movs	r2, #255	@ 0xff
 800dc40:	e7f9      	b.n	800dc36 <gc_execute_block+0xc06>
                        word_bit.parameter.n = On;
 800dc42:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800dc46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc4a:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.n = (int32_t)truncf(value);
 800dc4e:	4aa1      	ldr	r2, [pc, #644]	@ (800ded4 <gc_execute_block+0xea4>)
 800dc50:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800dc54:	edc2 7a29 	vstr	s15, [r2, #164]	@ 0xa4
                        break;
 800dc58:	e69c      	b.n	800d994 <gc_execute_block+0x964>
                        if (mantissa > 0)
 800dc5a:	2900      	cmp	r1, #0
 800dc5c:	f043 8008 	bne.w	8010c70 <gc_execute_block+0x3c40>
                        word_bit.parameter.o = On;
 800dc60:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800dc64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc68:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.o = isnan(value) ? 0xFFFFFFFF : int_value;
 800dc6c:	eeb4 8a48 	vcmp.f32	s16, s16
 800dc70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc74:	d604      	bvs.n	800dc80 <gc_execute_block+0xc50>
 800dc76:	4622      	mov	r2, r4
 800dc78:	4b96      	ldr	r3, [pc, #600]	@ (800ded4 <gc_execute_block+0xea4>)
 800dc7a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                        break;
 800dc7e:	e689      	b.n	800d994 <gc_execute_block+0x964>
                        gc_block.values.o = isnan(value) ? 0xFFFFFFFF : int_value;
 800dc80:	f04f 32ff 	mov.w	r2, #4294967295
 800dc84:	e7f8      	b.n	800dc78 <gc_execute_block+0xc48>
                        word_bit.parameter.p = On;
 800dc86:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800dc8a:	f043 0301 	orr.w	r3, r3, #1
 800dc8e:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.p = value;
 800dc92:	4b90      	ldr	r3, [pc, #576]	@ (800ded4 <gc_execute_block+0xea4>)
 800dc94:	ed83 8a17 	vstr	s16, [r3, #92]	@ 0x5c
                        break;
 800dc98:	e67c      	b.n	800d994 <gc_execute_block+0x964>
                        word_bit.parameter.q = On;
 800dc9a:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800dc9e:	f043 0302 	orr.w	r3, r3, #2
 800dca2:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.q = value;
 800dca6:	4b8b      	ldr	r3, [pc, #556]	@ (800ded4 <gc_execute_block+0xea4>)
 800dca8:	ed83 8a18 	vstr	s16, [r3, #96]	@ 0x60
                        break;
 800dcac:	e672      	b.n	800d994 <gc_execute_block+0x964>
                        word_bit.parameter.r = On;
 800dcae:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800dcb2:	f043 0304 	orr.w	r3, r3, #4
 800dcb6:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.r = value;
 800dcba:	4b86      	ldr	r3, [pc, #536]	@ (800ded4 <gc_execute_block+0xea4>)
 800dcbc:	ed83 8a19 	vstr	s16, [r3, #100]	@ 0x64
                        break;
 800dcc0:	e668      	b.n	800d994 <gc_execute_block+0x964>
                        word_bit.parameter.s = On;
 800dcc2:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800dcc6:	f043 0308 	orr.w	r3, r3, #8
 800dcca:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.s = value;
 800dcce:	4b81      	ldr	r3, [pc, #516]	@ (800ded4 <gc_execute_block+0xea4>)
 800dcd0:	ed83 8a1a 	vstr	s16, [r3, #104]	@ 0x68
                        break;
 800dcd4:	e65e      	b.n	800d994 <gc_execute_block+0x964>
                        if(mantissa > 0)
 800dcd6:	2900      	cmp	r1, #0
 800dcd8:	f042 87cd 	bne.w	8010c76 <gc_execute_block+0x3c46>
                        if(int_value > (grbl.tool_table.n_tools ? grbl.tool_table.n_tools : MAX_TOOL_NUMBER))
 800dcdc:	4621      	mov	r1, r4
 800dcde:	4b7e      	ldr	r3, [pc, #504]	@ (800ded8 <gc_execute_block+0xea8>)
 800dce0:	699b      	ldr	r3, [r3, #24]
 800dce2:	b1ab      	cbz	r3, 800dd10 <gc_execute_block+0xce0>
 800dce4:	2200      	movs	r2, #0
 800dce6:	428b      	cmp	r3, r1
 800dce8:	f172 0200 	sbcs.w	r2, r2, #0
 800dcec:	f2c2 87c6 	blt.w	8010c7c <gc_execute_block+0x3c4c>
                        word_bit.parameter.t = On;
 800dcf0:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800dcf4:	f043 0310 	orr.w	r3, r3, #16
 800dcf8:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.t = isnan(value) ? 0xFFFFFFFF : int_value;
 800dcfc:	eeb4 8a48 	vcmp.f32	s16, s16
 800dd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd04:	d608      	bvs.n	800dd18 <gc_execute_block+0xce8>
 800dd06:	4622      	mov	r2, r4
 800dd08:	4b72      	ldr	r3, [pc, #456]	@ (800ded4 <gc_execute_block+0xea4>)
 800dd0a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
                        break;
 800dd0e:	e641      	b.n	800d994 <gc_execute_block+0x964>
                        if(int_value > (grbl.tool_table.n_tools ? grbl.tool_table.n_tools : MAX_TOOL_NUMBER))
 800dd10:	f06f 0301 	mvn.w	r3, #1
 800dd14:	2200      	movs	r2, #0
 800dd16:	e7e6      	b.n	800dce6 <gc_execute_block+0xcb6>
                        gc_block.values.t = isnan(value) ? 0xFFFFFFFF : int_value;
 800dd18:	f04f 32ff 	mov.w	r2, #4294967295
 800dd1c:	e7f4      	b.n	800dd08 <gc_execute_block+0xcd8>
                        word_bit.parameter.u = On;
 800dd1e:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800dd22:	f043 0320 	orr.w	r3, r3, #32
 800dd26:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.u = value;
 800dd2a:	4b6a      	ldr	r3, [pc, #424]	@ (800ded4 <gc_execute_block+0xea4>)
 800dd2c:	ed83 8a1e 	vstr	s16, [r3, #120]	@ 0x78
                        break;
 800dd30:	e630      	b.n	800d994 <gc_execute_block+0x964>
                        word_bit.parameter.v = On;
 800dd32:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800dd36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd3a:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.v = value;
 800dd3e:	4b65      	ldr	r3, [pc, #404]	@ (800ded4 <gc_execute_block+0xea4>)
 800dd40:	ed83 8a1f 	vstr	s16, [r3, #124]	@ 0x7c
                        break;
 800dd44:	e626      	b.n	800d994 <gc_execute_block+0x964>
                        word_bit.parameter.w = On;
 800dd46:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800dd4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd4e:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.w = value;
 800dd52:	4b60      	ldr	r3, [pc, #384]	@ (800ded4 <gc_execute_block+0xea4>)
 800dd54:	ed83 8a20 	vstr	s16, [r3, #128]	@ 0x80
                        break;
 800dd58:	e61c      	b.n	800d994 <gc_execute_block+0x964>
                        axis_words.x = On;
 800dd5a:	f04b 0b01 	orr.w	fp, fp, #1
                        word_bit.parameter.x = On;
 800dd5e:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800dd62:	f043 0301 	orr.w	r3, r3, #1
 800dd66:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
                        gc_block.values.xyz[X_AXIS] = value;
 800dd6a:	4b5a      	ldr	r3, [pc, #360]	@ (800ded4 <gc_execute_block+0xea4>)
 800dd6c:	ed83 8a21 	vstr	s16, [r3, #132]	@ 0x84
                        break;
 800dd70:	e610      	b.n	800d994 <gc_execute_block+0x964>
                        axis_words.y = On;
 800dd72:	f04b 0b02 	orr.w	fp, fp, #2
                        word_bit.parameter.y = On;
 800dd76:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800dd7a:	f043 0302 	orr.w	r3, r3, #2
 800dd7e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
                        gc_block.values.xyz[Y_AXIS] = value;
 800dd82:	4b54      	ldr	r3, [pc, #336]	@ (800ded4 <gc_execute_block+0xea4>)
 800dd84:	ed83 8a22 	vstr	s16, [r3, #136]	@ 0x88
                        break;
 800dd88:	e604      	b.n	800d994 <gc_execute_block+0x964>
                        axis_words.z = On;
 800dd8a:	f04b 0b04 	orr.w	fp, fp, #4
                        word_bit.parameter.z = On;
 800dd8e:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800dd92:	f043 0304 	orr.w	r3, r3, #4
 800dd96:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
                        gc_block.values.xyz[Z_AXIS] = value;
 800dd9a:	4b4e      	ldr	r3, [pc, #312]	@ (800ded4 <gc_execute_block+0xea4>)
 800dd9c:	ed83 8a23 	vstr	s16, [r3, #140]	@ 0x8c
                        break;
 800dda0:	e5f8      	b.n	800d994 <gc_execute_block+0x964>
                        if(mantissa > 0)
 800dda2:	2900      	cmp	r1, #0
 800dda4:	f042 876d 	bne.w	8010c82 <gc_execute_block+0x3c52>
                        word_bit.parameter.$ = On;
 800dda8:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800ddac:	f043 0301 	orr.w	r3, r3, #1
 800ddb0:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.$ = (int32_t)value;
 800ddb4:	4a47      	ldr	r2, [pc, #284]	@ (800ded4 <gc_execute_block+0xea4>)
 800ddb6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ddba:	edc2 7a28 	vstr	s15, [r2, #160]	@ 0xa0
                        break;
 800ddbe:	e5e9      	b.n	800d994 <gc_execute_block+0x964>
    if (axis_words.mask && !axis_command)
 800ddc0:	fa5f f38b 	uxtb.w	r3, fp
 800ddc4:	b123      	cbz	r3, 800ddd0 <gc_execute_block+0xda0>
 800ddc6:	f1ba 0f00 	cmp.w	sl, #0
 800ddca:	d101      	bne.n	800ddd0 <gc_execute_block+0xda0>
        axis_command = AxisCommand_MotionMode; // Assign implicit motion-mode
 800ddcc:	f04f 0a02 	mov.w	sl, #2
    if(gc_state.tool_change && axis_command == AxisCommand_MotionMode && !gc_parser_flags.jog_motion)
 800ddd0:	4b42      	ldr	r3, [pc, #264]	@ (800dedc <gc_execute_block+0xeac>)
 800ddd2:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800ddd6:	b113      	cbz	r3, 800ddde <gc_execute_block+0xdae>
 800ddd8:	f1ba 0f02 	cmp.w	sl, #2
 800dddc:	d051      	beq.n	800de82 <gc_execute_block+0xe52>
    if (gc_block.words.n && gc_block.values.n > MAX_LINE_NUMBER)
 800ddde:	4b3d      	ldr	r3, [pc, #244]	@ (800ded4 <gc_execute_block+0xea4>)
 800dde0:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800dde4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800dde8:	d006      	beq.n	800ddf8 <gc_execute_block+0xdc8>
 800ddea:	4a3a      	ldr	r2, [pc, #232]	@ (800ded4 <gc_execute_block+0xea4>)
 800ddec:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 800ddf0:	4a3b      	ldr	r2, [pc, #236]	@ (800dee0 <gc_execute_block+0xeb0>)
 800ddf2:	4291      	cmp	r1, r2
 800ddf4:	f302 874e 	bgt.w	8010c94 <gc_execute_block+0x3c64>
    if (gc_parser_flags.jog_motion) {
 800ddf8:	f018 0f01 	tst.w	r8, #1
 800ddfc:	d047      	beq.n	800de8e <gc_execute_block+0xe5e>
        if(!gc_block.words.f)
 800ddfe:	f013 0f02 	tst.w	r3, #2
 800de02:	f002 874a 	beq.w	8010c9a <gc_execute_block+0x3c6a>
        if (gc_block.modal.units_imperial)
 800de06:	4b33      	ldr	r3, [pc, #204]	@ (800ded4 <gc_execute_block+0xea4>)
 800de08:	7adb      	ldrb	r3, [r3, #11]
 800de0a:	b143      	cbz	r3, 800de1e <gc_execute_block+0xdee>
            gc_block.values.f *= MM_PER_INCH;
 800de0c:	4b31      	ldr	r3, [pc, #196]	@ (800ded4 <gc_execute_block+0xea4>)
 800de0e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800de12:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800dee4 <gc_execute_block+0xeb4>
 800de16:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de1a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    if(gc_block.words.$) {
 800de1e:	4b2d      	ldr	r3, [pc, #180]	@ (800ded4 <gc_execute_block+0xea4>)
 800de20:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800de24:	f013 0f01 	tst.w	r3, #1
 800de28:	f000 80de 	beq.w	800dfe8 <gc_execute_block+0xfb8>
        bool single_spindle_only = (gc_block.words.s && !user_words.s) ||
 800de2c:	4b29      	ldr	r3, [pc, #164]	@ (800ded4 <gc_execute_block+0xea4>)
 800de2e:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
                                      command_words.G14 ||
 800de32:	f013 0f08 	tst.w	r3, #8
 800de36:	d005      	beq.n	800de44 <gc_execute_block+0xe14>
        bool single_spindle_only = (gc_block.words.s && !user_words.s) ||
 800de38:	4b2b      	ldr	r3, [pc, #172]	@ (800dee8 <gc_execute_block+0xeb8>)
 800de3a:	789b      	ldrb	r3, [r3, #2]
 800de3c:	f013 0f08 	tst.w	r3, #8
 800de40:	f000 808e 	beq.w	800df60 <gc_execute_block+0xf30>
 800de44:	f017 0f01 	tst.w	r7, #1
 800de48:	d00c      	beq.n	800de64 <gc_execute_block+0xe34>
                                    (command_words.G0 && (gc_block.modal.motion == MotionMode_SpindleSynchronized ||
 800de4a:	4b22      	ldr	r3, [pc, #136]	@ (800ded4 <gc_execute_block+0xea4>)
 800de4c:	891b      	ldrh	r3, [r3, #8]
 800de4e:	2b21      	cmp	r3, #33	@ 0x21
 800de50:	f000 8091 	beq.w	800df76 <gc_execute_block+0xf46>
 800de54:	f240 124b 	movw	r2, #331	@ 0x14b
 800de58:	4293      	cmp	r3, r2
 800de5a:	f000 808e 	beq.w	800df7a <gc_execute_block+0xf4a>
                                                           gc_block.modal.motion == MotionMode_RigidTapping ||
 800de5e:	2b4c      	cmp	r3, #76	@ 0x4c
 800de60:	f000 808d 	beq.w	800df7e <gc_execute_block+0xf4e>
                                                            gc_block.modal.motion == MotionMode_Threading)) ||
 800de64:	f417 5f00 	tst.w	r7, #8192	@ 0x2000
 800de68:	f040 808b 	bne.w	800df82 <gc_execute_block+0xf52>
                                      command_words.G14 ||
 800de6c:	f417 2f00 	tst.w	r7, #524288	@ 0x80000
 800de70:	f000 8089 	beq.w	800df86 <gc_execute_block+0xf56>
                                       (command_words.M9 && gc_block.override_command == Override_SpindleSpeed);
 800de74:	4b17      	ldr	r3, [pc, #92]	@ (800ded4 <gc_execute_block+0xea4>)
 800de76:	785b      	ldrb	r3, [r3, #1]
 800de78:	2b33      	cmp	r3, #51	@ 0x33
 800de7a:	f000 8086 	beq.w	800df8a <gc_execute_block+0xf5a>
                                      command_words.G14 ||
 800de7e:	2300      	movs	r3, #0
 800de80:	e06f      	b.n	800df62 <gc_execute_block+0xf32>
    if(gc_state.tool_change && axis_command == AxisCommand_MotionMode && !gc_parser_flags.jog_motion)
 800de82:	f018 0f01 	tst.w	r8, #1
 800de86:	d1aa      	bne.n	800ddde <gc_execute_block+0xdae>
        FAIL(Status_GcodeToolChangePending); // [Motions (except jogging) not allowed when changing tool]
 800de88:	2428      	movs	r4, #40	@ 0x28
 800de8a:	f7ff b9ae 	b.w	800d1ea <gc_execute_block+0x1ba>
    } else if(gc_block.modal.motion == MotionMode_SpindleSynchronized) {
 800de8e:	4a11      	ldr	r2, [pc, #68]	@ (800ded4 <gc_execute_block+0xea4>)
 800de90:	8912      	ldrh	r2, [r2, #8]
 800de92:	2a21      	cmp	r2, #33	@ 0x21
 800de94:	d012      	beq.n	800debc <gc_execute_block+0xe8c>
    } else if (gc_block.modal.feed_mode == FeedMode_InverseTime) { // = G93
 800de96:	490f      	ldr	r1, [pc, #60]	@ (800ded4 <gc_execute_block+0xea4>)
 800de98:	7a89      	ldrb	r1, [r1, #10]
 800de9a:	2901      	cmp	r1, #1
 800de9c:	d040      	beq.n	800df20 <gc_execute_block+0xef0>
    } else if (gc_block.modal.feed_mode == FeedMode_UnitsPerMin || gc_block.modal.feed_mode == FeedMode_UnitsPerRev) {
 800de9e:	b109      	cbz	r1, 800dea4 <gc_execute_block+0xe74>
 800dea0:	2902      	cmp	r1, #2
 800dea2:	d1bc      	bne.n	800de1e <gc_execute_block+0xdee>
        if (!gc_block.words.f) {
 800dea4:	f013 0f02 	tst.w	r3, #2
 800dea8:	d14b      	bne.n	800df42 <gc_execute_block+0xf12>
            if(gc_block.modal.feed_mode == gc_state.modal.feed_mode)
 800deaa:	4b0c      	ldr	r3, [pc, #48]	@ (800dedc <gc_execute_block+0xeac>)
 800deac:	789b      	ldrb	r3, [r3, #2]
 800deae:	4299      	cmp	r1, r3
 800deb0:	d1b5      	bne.n	800de1e <gc_execute_block+0xdee>
                gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 800deb2:	4b0a      	ldr	r3, [pc, #40]	@ (800dedc <gc_execute_block+0xeac>)
 800deb4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800deb6:	4b07      	ldr	r3, [pc, #28]	@ (800ded4 <gc_execute_block+0xea4>)
 800deb8:	645a      	str	r2, [r3, #68]	@ 0x44
 800deba:	e7b0      	b.n	800de1e <gc_execute_block+0xdee>
        if (!gc_block.words.k) {
 800debc:	4b05      	ldr	r3, [pc, #20]	@ (800ded4 <gc_execute_block+0xea4>)
 800debe:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800dec2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800dec6:	d111      	bne.n	800deec <gc_execute_block+0xebc>
            gc_block.values.k = gc_state.distance_per_rev;
 800dec8:	4b04      	ldr	r3, [pc, #16]	@ (800dedc <gc_execute_block+0xeac>)
 800deca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800decc:	4b01      	ldr	r3, [pc, #4]	@ (800ded4 <gc_execute_block+0xea4>)
 800dece:	655a      	str	r2, [r3, #84]	@ 0x54
 800ded0:	e7a5      	b.n	800de1e <gc_execute_block+0xdee>
 800ded2:	bf00      	nop
 800ded4:	20000ddc 	.word	0x20000ddc
 800ded8:	20001394 	.word	0x20001394
 800dedc:	20000ee4 	.word	0x20000ee4
 800dee0:	00989680 	.word	0x00989680
 800dee4:	41cb3333 	.word	0x41cb3333
 800dee8:	20000dd8 	.word	0x20000dd8
            gc_block.words.k = Off;
 800deec:	4ba7      	ldr	r3, [pc, #668]	@ (800e18c <gc_execute_block+0x115c>)
 800deee:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800def2:	f36f 1286 	bfc	r2, #6, #1
 800def6:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
            gc_block.values.k = gc_block.modal.units_imperial ? gc_block.values.ijk[K_VALUE] *= MM_PER_INCH : gc_block.values.ijk[K_VALUE];
 800defa:	7adb      	ldrb	r3, [r3, #11]
 800defc:	b163      	cbz	r3, 800df18 <gc_execute_block+0xee8>
 800defe:	4ba3      	ldr	r3, [pc, #652]	@ (800e18c <gc_execute_block+0x115c>)
 800df00:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800df04:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800e190 <gc_execute_block+0x1160>
 800df08:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df0c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
 800df10:	4b9e      	ldr	r3, [pc, #632]	@ (800e18c <gc_execute_block+0x115c>)
 800df12:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
 800df16:	e782      	b.n	800de1e <gc_execute_block+0xdee>
 800df18:	4b9c      	ldr	r3, [pc, #624]	@ (800e18c <gc_execute_block+0x115c>)
 800df1a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800df1e:	e7f7      	b.n	800df10 <gc_execute_block+0xee0>
        if (axis_command == AxisCommand_MotionMode) {
 800df20:	f1ba 0f02 	cmp.w	sl, #2
 800df24:	f47f af7b 	bne.w	800de1e <gc_execute_block+0xdee>
            if (!(gc_block.modal.motion == MotionMode_None || gc_block.modal.motion == MotionMode_Seek)) {
 800df28:	2a50      	cmp	r2, #80	@ 0x50
 800df2a:	f43f af78 	beq.w	800de1e <gc_execute_block+0xdee>
 800df2e:	2a00      	cmp	r2, #0
 800df30:	f43f af75 	beq.w	800de1e <gc_execute_block+0xdee>
                if (!gc_block.words.f)
 800df34:	f013 0f02 	tst.w	r3, #2
 800df38:	f47f af71 	bne.w	800de1e <gc_execute_block+0xdee>
                    FAIL(Status_GcodeUndefinedFeedRate); // [F word missing]
 800df3c:	2416      	movs	r4, #22
 800df3e:	f7ff b954 	b.w	800d1ea <gc_execute_block+0x1ba>
        } else if (gc_block.modal.units_imperial)
 800df42:	4b92      	ldr	r3, [pc, #584]	@ (800e18c <gc_execute_block+0x115c>)
 800df44:	7adb      	ldrb	r3, [r3, #11]
 800df46:	2b00      	cmp	r3, #0
 800df48:	f43f af69 	beq.w	800de1e <gc_execute_block+0xdee>
            gc_block.values.f *= MM_PER_INCH;
 800df4c:	4b8f      	ldr	r3, [pc, #572]	@ (800e18c <gc_execute_block+0x115c>)
 800df4e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800df52:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 800e190 <gc_execute_block+0x1160>
 800df56:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df5a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
 800df5e:	e75e      	b.n	800de1e <gc_execute_block+0xdee>
                                      command_words.G14 ||
 800df60:	2301      	movs	r3, #1
        if(command_words.M7 || single_spindle_only) {
 800df62:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 800df66:	d112      	bne.n	800df8e <gc_execute_block+0xf5e>
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d041      	beq.n	800dff0 <gc_execute_block+0xfc0>
            if(gc_block.values.$ < (single_spindle_only ? 0 : -1))
 800df6c:	4a87      	ldr	r2, [pc, #540]	@ (800e18c <gc_execute_block+0x115c>)
 800df6e:	f8d2 00a0 	ldr.w	r0, [r2, #160]	@ 0xa0
 800df72:	2200      	movs	r2, #0
 800df74:	e010      	b.n	800df98 <gc_execute_block+0xf68>
                                      command_words.G14 ||
 800df76:	2301      	movs	r3, #1
 800df78:	e7f3      	b.n	800df62 <gc_execute_block+0xf32>
 800df7a:	2301      	movs	r3, #1
 800df7c:	e7f1      	b.n	800df62 <gc_execute_block+0xf32>
 800df7e:	2301      	movs	r3, #1
 800df80:	e7ef      	b.n	800df62 <gc_execute_block+0xf32>
 800df82:	2301      	movs	r3, #1
 800df84:	e7ed      	b.n	800df62 <gc_execute_block+0xf32>
 800df86:	2300      	movs	r3, #0
 800df88:	e7eb      	b.n	800df62 <gc_execute_block+0xf32>
 800df8a:	2301      	movs	r3, #1
 800df8c:	e7e9      	b.n	800df62 <gc_execute_block+0xf32>
            if(gc_block.values.$ < (single_spindle_only ? 0 : -1))
 800df8e:	4a7f      	ldr	r2, [pc, #508]	@ (800e18c <gc_execute_block+0x115c>)
 800df90:	f8d2 00a0 	ldr.w	r0, [r2, #160]	@ 0xa0
 800df94:	b133      	cbz	r3, 800dfa4 <gc_execute_block+0xf74>
 800df96:	2200      	movs	r2, #0
 800df98:	4290      	cmp	r0, r2
 800df9a:	da09      	bge.n	800dfb0 <gc_execute_block+0xf80>
                FAIL(single_spindle_only ? Status_NegativeValue : Status_GcodeValueOutOfRange);
 800df9c:	b12b      	cbz	r3, 800dfaa <gc_execute_block+0xf7a>
 800df9e:	2404      	movs	r4, #4
 800dfa0:	f7ff b923 	b.w	800d1ea <gc_execute_block+0x1ba>
            if(gc_block.values.$ < (single_spindle_only ? 0 : -1))
 800dfa4:	f04f 32ff 	mov.w	r2, #4294967295
 800dfa8:	e7f6      	b.n	800df98 <gc_execute_block+0xf68>
                FAIL(single_spindle_only ? Status_NegativeValue : Status_GcodeValueOutOfRange);
 800dfaa:	2427      	movs	r4, #39	@ 0x27
 800dfac:	f7ff b91d 	b.w	800d1ea <gc_execute_block+0x1ba>
            if(!spindle_is_enabled(gc_block.values.$))
 800dfb0:	b240      	sxtb	r0, r0
 800dfb2:	f00f ff01 	bl	801ddb8 <spindle_is_enabled>
 800dfb6:	2800      	cmp	r0, #0
 800dfb8:	f002 8672 	beq.w	8010ca0 <gc_execute_block+0x3c70>
            if(gc_block.values.$ >= 0)
 800dfbc:	4b73      	ldr	r3, [pc, #460]	@ (800e18c <gc_execute_block+0x115c>)
 800dfbe:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	da07      	bge.n	800dfd6 <gc_execute_block+0xfa6>
            gc_block.words.$ = Off;
 800dfc6:	4b71      	ldr	r3, [pc, #452]	@ (800e18c <gc_execute_block+0x115c>)
 800dfc8:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800dfcc:	f36f 0200 	bfc	r2, #0, #1
 800dfd0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800dfd4:	e00c      	b.n	800dff0 <gc_execute_block+0xfc0>
                gc_state.spindle.hal = gc_block.spindle = spindle_get(gc_block.values.$);
 800dfd6:	b240      	sxtb	r0, r0
 800dfd8:	f00f ff04 	bl	801dde4 <spindle_get>
 800dfdc:	4a6b      	ldr	r2, [pc, #428]	@ (800e18c <gc_execute_block+0x115c>)
 800dfde:	f8c2 00cc 	str.w	r0, [r2, #204]	@ 0xcc
 800dfe2:	4a6c      	ldr	r2, [pc, #432]	@ (800e194 <gc_execute_block+0x1164>)
 800dfe4:	65d0      	str	r0, [r2, #92]	@ 0x5c
 800dfe6:	e7ee      	b.n	800dfc6 <gc_execute_block+0xf96>
    } else if(gc_block.spindle == NULL)
 800dfe8:	4b68      	ldr	r3, [pc, #416]	@ (800e18c <gc_execute_block+0x115c>)
 800dfea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800dfee:	b323      	cbz	r3, 800e03a <gc_execute_block+0x100a>
    if(gc_block.modal.feed_mode == FeedMode_UnitsPerRev && !gc_state.spindle.hal->get_data)
 800dff0:	4b66      	ldr	r3, [pc, #408]	@ (800e18c <gc_execute_block+0x115c>)
 800dff2:	7a9b      	ldrb	r3, [r3, #10]
 800dff4:	2b02      	cmp	r3, #2
 800dff6:	d026      	beq.n	800e046 <gc_execute_block+0x1016>
    if (command_words.G14) {
 800dff8:	f3c7 2507 	ubfx	r5, r7, #8, #8
 800dffc:	f417 5f00 	tst.w	r7, #8192	@ 0x2000
 800e000:	d00d      	beq.n	800e01e <gc_execute_block+0xfee>
        if(gc_block.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 800e002:	4b62      	ldr	r3, [pc, #392]	@ (800e18c <gc_execute_block+0x115c>)
 800e004:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800e008:	2b01      	cmp	r3, #1
 800e00a:	d024      	beq.n	800e056 <gc_execute_block+0x1026>
        } else if(gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 800e00c:	4b61      	ldr	r3, [pc, #388]	@ (800e194 <gc_execute_block+0x1164>)
 800e00e:	7edb      	ldrb	r3, [r3, #27]
 800e010:	2b01      	cmp	r3, #1
 800e012:	d04e      	beq.n	800e0b2 <gc_execute_block+0x1082>
        gc_state.modal.spindle.rpm_mode = gc_block.modal.spindle.rpm_mode;
 800e014:	4b5d      	ldr	r3, [pc, #372]	@ (800e18c <gc_execute_block+0x115c>)
 800e016:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800e01a:	4b5e      	ldr	r3, [pc, #376]	@ (800e194 <gc_execute_block+0x1164>)
 800e01c:	76da      	strb	r2, [r3, #27]
    spindle_event = gc_block.words.s && !user_words.s;
 800e01e:	4b5b      	ldr	r3, [pc, #364]	@ (800e18c <gc_execute_block+0x115c>)
 800e020:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e024:	f013 0308 	ands.w	r3, r3, #8
 800e028:	d051      	beq.n	800e0ce <gc_execute_block+0x109e>
 800e02a:	4a5b      	ldr	r2, [pc, #364]	@ (800e198 <gc_execute_block+0x1168>)
 800e02c:	7892      	ldrb	r2, [r2, #2]
 800e02e:	f012 0f08 	tst.w	r2, #8
 800e032:	f000 8089 	beq.w	800e148 <gc_execute_block+0x1118>
 800e036:	2200      	movs	r2, #0
 800e038:	e04a      	b.n	800e0d0 <gc_execute_block+0x10a0>
        gc_block.spindle = gc_state.spindle.hal;
 800e03a:	4b56      	ldr	r3, [pc, #344]	@ (800e194 <gc_execute_block+0x1164>)
 800e03c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e03e:	4b53      	ldr	r3, [pc, #332]	@ (800e18c <gc_execute_block+0x115c>)
 800e040:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 800e044:	e7d4      	b.n	800dff0 <gc_execute_block+0xfc0>
    if(gc_block.modal.feed_mode == FeedMode_UnitsPerRev && !gc_state.spindle.hal->get_data)
 800e046:	4b53      	ldr	r3, [pc, #332]	@ (800e194 <gc_execute_block+0x1164>)
 800e048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e04a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d1d3      	bne.n	800dff8 <gc_execute_block+0xfc8>
        FAIL(Status_GcodeUnsupportedCommand); // [G95 not supported]
 800e050:	2414      	movs	r4, #20
 800e052:	f7ff b8ca 	b.w	800d1ea <gc_execute_block+0x1ba>
            if(!gc_state.spindle.hal->cap.variable)
 800e056:	4b4f      	ldr	r3, [pc, #316]	@ (800e194 <gc_execute_block+0x1164>)
 800e058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e05a:	7a9a      	ldrb	r2, [r3, #10]
 800e05c:	f012 0f01 	tst.w	r2, #1
 800e060:	f002 8621 	beq.w	8010ca6 <gc_execute_block+0x3c76>
            if (!gc_block.words.s) // TODO: add check for S0?
 800e064:	4a49      	ldr	r2, [pc, #292]	@ (800e18c <gc_execute_block+0x115c>)
 800e066:	f892 20ba 	ldrb.w	r2, [r2, #186]	@ 0xba
 800e06a:	f012 0f08 	tst.w	r2, #8
 800e06e:	f002 861d 	beq.w	8010cac <gc_execute_block+0x3c7c>
            if (gc_block.words.d) {
 800e072:	4a46      	ldr	r2, [pc, #280]	@ (800e18c <gc_execute_block+0x115c>)
 800e074:	f992 20b8 	ldrsb.w	r2, [r2, #184]	@ 0xb8
 800e078:	2a00      	cmp	r2, #0
 800e07a:	db03      	blt.n	800e084 <gc_execute_block+0x1054>
                gc_state.spindle.hal->param->css.max_rpm = gc_state.spindle.hal->rpm_max;
 800e07c:	685a      	ldr	r2, [r3, #4]
 800e07e:	699b      	ldr	r3, [r3, #24]
 800e080:	61d3      	str	r3, [r2, #28]
 800e082:	e7c7      	b.n	800e014 <gc_execute_block+0xfe4>
                gc_state.spindle.hal->param->css.max_rpm = min(gc_block.values.d, gc_state.spindle.hal->rpm_max);
 800e084:	4a41      	ldr	r2, [pc, #260]	@ (800e18c <gc_execute_block+0x115c>)
 800e086:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 800e08a:	edd3 7a06 	vldr	s15, [r3, #24]
 800e08e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e096:	d501      	bpl.n	800e09c <gc_execute_block+0x106c>
 800e098:	eef0 7a47 	vmov.f32	s15, s14
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	edc3 7a07 	vstr	s15, [r3, #28]
                gc_block.words.d = Off;
 800e0a2:	4b3a      	ldr	r3, [pc, #232]	@ (800e18c <gc_execute_block+0x115c>)
 800e0a4:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800e0a8:	f36f 12c7 	bfc	r2, #7, #1
 800e0ac:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e0b0:	e7b0      	b.n	800e014 <gc_execute_block+0xfe4>
            if(gc_state.spindle.css) {
 800e0b2:	4b38      	ldr	r3, [pc, #224]	@ (800e194 <gc_execute_block+0x1164>)
 800e0b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0b6:	b123      	cbz	r3, 800e0c2 <gc_execute_block+0x1092>
                gc_state.spindle.css = NULL;
 800e0b8:	4b36      	ldr	r3, [pc, #216]	@ (800e194 <gc_execute_block+0x1164>)
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	659a      	str	r2, [r3, #88]	@ 0x58
                protocol_buffer_synchronize(); // Empty planner buffer to ensure we get RPM at end of last CSS motion
 800e0be:	f009 fa87 	bl	80175d0 <protocol_buffer_synchronize>
            gc_state.spindle.rpm = gc_state.spindle.hal->param->rpm; // Is it correct to restore latest spindle RPM here?
 800e0c2:	4b34      	ldr	r3, [pc, #208]	@ (800e194 <gc_execute_block+0x1164>)
 800e0c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e0c6:	6852      	ldr	r2, [r2, #4]
 800e0c8:	6812      	ldr	r2, [r2, #0]
 800e0ca:	651a      	str	r2, [r3, #80]	@ 0x50
 800e0cc:	e7a2      	b.n	800e014 <gc_execute_block+0xfe4>
    spindle_event = gc_block.words.s && !user_words.s;
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	9208      	str	r2, [sp, #32]
    if (!gc_block.words.s)
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d13f      	bne.n	800e156 <gc_execute_block+0x1126>
        gc_block.values.s = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? gc_state.spindle.rpm : gc_state.spindle.hal->param->css.max_rpm;
 800e0d6:	4b2f      	ldr	r3, [pc, #188]	@ (800e194 <gc_execute_block+0x1164>)
 800e0d8:	7edb      	ldrb	r3, [r3, #27]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d136      	bne.n	800e14c <gc_execute_block+0x111c>
 800e0de:	4b2d      	ldr	r3, [pc, #180]	@ (800e194 <gc_execute_block+0x1164>)
 800e0e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e0e2:	4b2a      	ldr	r3, [pc, #168]	@ (800e18c <gc_execute_block+0x115c>)
 800e0e4:	669a      	str	r2, [r3, #104]	@ 0x68
    if(set_tool) { // M61
 800e0e6:	9b07      	ldr	r3, [sp, #28]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d064      	beq.n	800e1b6 <gc_execute_block+0x1186>
        if(!gc_block.words.q)
 800e0ec:	4b27      	ldr	r3, [pc, #156]	@ (800e18c <gc_execute_block+0x115c>)
 800e0ee:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e0f2:	f013 0f02 	tst.w	r3, #2
 800e0f6:	f002 85dc 	beq.w	8010cb2 <gc_execute_block+0x3c82>
        if (floorf(gc_block.values.q) - gc_block.values.q != 0.0f)
 800e0fa:	4b24      	ldr	r3, [pc, #144]	@ (800e18c <gc_execute_block+0x115c>)
 800e0fc:	ed93 8a18 	vldr	s16, [r3, #96]	@ 0x60
 800e100:	eeb0 0a48 	vmov.f32	s0, s16
 800e104:	f019 f86c 	bl	80271e0 <floorf>
 800e108:	ee70 7a48 	vsub.f32	s15, s0, s16
 800e10c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e114:	f042 85d0 	bne.w	8010cb8 <gc_execute_block+0x3c88>
        if ((uint32_t)gc_block.values.q > (grbl.tool_table.n_tools ? grbl.tool_table.n_tools : MAX_TOOL_NUMBER))
 800e118:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800e11c:	ee17 3a90 	vmov	r3, s15
 800e120:	4a1e      	ldr	r2, [pc, #120]	@ (800e19c <gc_execute_block+0x116c>)
 800e122:	6992      	ldr	r2, [r2, #24]
 800e124:	2a00      	cmp	r2, #0
 800e126:	d042      	beq.n	800e1ae <gc_execute_block+0x117e>
 800e128:	2100      	movs	r1, #0
 800e12a:	429a      	cmp	r2, r3
 800e12c:	f171 0100 	sbcs.w	r1, r1, #0
 800e130:	f2c2 85c5 	blt.w	8010cbe <gc_execute_block+0x3c8e>
        gc_block.values.t = (uint32_t)gc_block.values.q;
 800e134:	4a15      	ldr	r2, [pc, #84]	@ (800e18c <gc_execute_block+0x115c>)
 800e136:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
        gc_block.words.q = Off;
 800e13a:	f892 30ba 	ldrb.w	r3, [r2, #186]	@ 0xba
 800e13e:	f36f 0341 	bfc	r3, #1, #1
 800e142:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
 800e146:	e041      	b.n	800e1cc <gc_execute_block+0x119c>
    spindle_event = gc_block.words.s && !user_words.s;
 800e148:	2201      	movs	r2, #1
 800e14a:	e7c1      	b.n	800e0d0 <gc_execute_block+0x10a0>
        gc_block.values.s = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? gc_state.spindle.rpm : gc_state.spindle.hal->param->css.max_rpm;
 800e14c:	4b11      	ldr	r3, [pc, #68]	@ (800e194 <gc_execute_block+0x1164>)
 800e14e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	69da      	ldr	r2, [r3, #28]
 800e154:	e7c5      	b.n	800e0e2 <gc_execute_block+0x10b2>
    else if(!user_words.s && gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 800e156:	4b10      	ldr	r3, [pc, #64]	@ (800e198 <gc_execute_block+0x1168>)
 800e158:	789b      	ldrb	r3, [r3, #2]
 800e15a:	f013 0f08 	tst.w	r3, #8
 800e15e:	d1c2      	bne.n	800e0e6 <gc_execute_block+0x10b6>
 800e160:	4b0c      	ldr	r3, [pc, #48]	@ (800e194 <gc_execute_block+0x1164>)
 800e162:	7edb      	ldrb	r3, [r3, #27]
 800e164:	2b01      	cmp	r3, #1
 800e166:	d1be      	bne.n	800e0e6 <gc_execute_block+0x10b6>
        gc_block.values.s *= (gc_block.modal.units_imperial ? MM_PER_INCH * 12.0f : 1000.0f); // convert surface speed to mm/min
 800e168:	4b08      	ldr	r3, [pc, #32]	@ (800e18c <gc_execute_block+0x115c>)
 800e16a:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800e16e:	7adb      	ldrb	r3, [r3, #11]
 800e170:	b1d3      	cbz	r3, 800e1a8 <gc_execute_block+0x1178>
 800e172:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800e1a0 <gc_execute_block+0x1170>
 800e176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e17a:	4b04      	ldr	r3, [pc, #16]	@ (800e18c <gc_execute_block+0x115c>)
 800e17c:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
        gc_state.spindle.hal->param->css.surface_speed = gc_block.values.s;
 800e180:	4b04      	ldr	r3, [pc, #16]	@ (800e194 <gc_execute_block+0x1164>)
 800e182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	edc3 7a04 	vstr	s15, [r3, #16]
 800e18a:	e7ac      	b.n	800e0e6 <gc_execute_block+0x10b6>
 800e18c:	20000ddc 	.word	0x20000ddc
 800e190:	41cb3333 	.word	0x41cb3333
 800e194:	20000ee4 	.word	0x20000ee4
 800e198:	20000dd8 	.word	0x20000dd8
 800e19c:	20001394 	.word	0x20001394
 800e1a0:	43986666 	.word	0x43986666
 800e1a4:	447a0000 	.word	0x447a0000
        gc_block.values.s *= (gc_block.modal.units_imperial ? MM_PER_INCH * 12.0f : 1000.0f); // convert surface speed to mm/min
 800e1a8:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 800e1a4 <gc_execute_block+0x1174>
 800e1ac:	e7e3      	b.n	800e176 <gc_execute_block+0x1146>
        if ((uint32_t)gc_block.values.q > (grbl.tool_table.n_tools ? grbl.tool_table.n_tools : MAX_TOOL_NUMBER))
 800e1ae:	f06f 0201 	mvn.w	r2, #1
 800e1b2:	2100      	movs	r1, #0
 800e1b4:	e7b9      	b.n	800e12a <gc_execute_block+0x10fa>
    } else if (!gc_block.words.t)
 800e1b6:	4bab      	ldr	r3, [pc, #684]	@ (800e464 <gc_execute_block+0x1434>)
 800e1b8:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e1bc:	f013 0f10 	tst.w	r3, #16
 800e1c0:	d104      	bne.n	800e1cc <gc_execute_block+0x119c>
        gc_block.values.t = gc_state.tool_pending;
 800e1c2:	4ba9      	ldr	r3, [pc, #676]	@ (800e468 <gc_execute_block+0x1438>)
 800e1c4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e1c6:	4ba7      	ldr	r3, [pc, #668]	@ (800e464 <gc_execute_block+0x1434>)
 800e1c8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    if(command_words.M10 && port_command) {
 800e1cc:	f3c7 4907 	ubfx	r9, r7, #16, #8
 800e1d0:	f019 0410 	ands.w	r4, r9, #16
 800e1d4:	d071      	beq.n	800e2ba <gc_execute_block+0x128a>
 800e1d6:	9b06      	ldr	r3, [sp, #24]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d06e      	beq.n	800e2ba <gc_execute_block+0x128a>
        switch(port_command) {
 800e1dc:	2b42      	cmp	r3, #66	@ 0x42
 800e1de:	f000 80a4 	beq.w	800e32a <gc_execute_block+0x12fa>
 800e1e2:	d836      	bhi.n	800e252 <gc_execute_block+0x1222>
 800e1e4:	3b3e      	subs	r3, #62	@ 0x3e
 800e1e6:	b2db      	uxtb	r3, r3
 800e1e8:	2b03      	cmp	r3, #3
 800e1ea:	d866      	bhi.n	800e2ba <gc_execute_block+0x128a>
                if(!gc_block.words.p)
 800e1ec:	4b9d      	ldr	r3, [pc, #628]	@ (800e464 <gc_execute_block+0x1434>)
 800e1ee:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e1f2:	f013 0f01 	tst.w	r3, #1
 800e1f6:	f002 8565 	beq.w	8010cc4 <gc_execute_block+0x3c94>
                if(gc_block.values.p < 0.0f)
 800e1fa:	4b9a      	ldr	r3, [pc, #616]	@ (800e464 <gc_execute_block+0x1434>)
 800e1fc:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800e200:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e208:	f102 855f 	bmi.w	8010cca <gc_execute_block+0x3c9a>
                if((uint32_t)gc_block.values.p + 1 > hal.port.num_digital_out)
 800e20c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800e210:	ee17 3a10 	vmov	r3, s14
 800e214:	3301      	adds	r3, #1
 800e216:	4a95      	ldr	r2, [pc, #596]	@ (800e46c <gc_execute_block+0x143c>)
 800e218:	f892 2115 	ldrb.w	r2, [r2, #277]	@ 0x115
 800e21c:	4293      	cmp	r3, r2
 800e21e:	f202 8557 	bhi.w	8010cd0 <gc_execute_block+0x3ca0>
                gc_block.output_command.is_digital = true;
 800e222:	4a90      	ldr	r2, [pc, #576]	@ (800e464 <gc_execute_block+0x1434>)
 800e224:	2301      	movs	r3, #1
 800e226:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
                gc_block.output_command.port = (uint8_t)gc_block.values.p;
 800e22a:	ee17 3a10 	vmov	r3, s14
 800e22e:	f882 30be 	strb.w	r3, [r2, #190]	@ 0xbe
                gc_block.output_command.value = port_command == 62 || port_command == 64 ? 1.0f : 0.0f;
 800e232:	9b06      	ldr	r3, [sp, #24]
 800e234:	2b3e      	cmp	r3, #62	@ 0x3e
 800e236:	d076      	beq.n	800e326 <gc_execute_block+0x12f6>
 800e238:	2b40      	cmp	r3, #64	@ 0x40
 800e23a:	d072      	beq.n	800e322 <gc_execute_block+0x12f2>
 800e23c:	2200      	movs	r2, #0
 800e23e:	4b89      	ldr	r3, [pc, #548]	@ (800e464 <gc_execute_block+0x1434>)
 800e240:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
                gc_block.words.p = Off;
 800e244:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800e248:	f36f 0200 	bfc	r2, #0, #1
 800e24c:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                break;
 800e250:	e033      	b.n	800e2ba <gc_execute_block+0x128a>
        switch(port_command) {
 800e252:	9b06      	ldr	r3, [sp, #24]
 800e254:	3b43      	subs	r3, #67	@ 0x43
 800e256:	b2db      	uxtb	r3, r3
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d82e      	bhi.n	800e2ba <gc_execute_block+0x128a>
                if(!(gc_block.words.e || gc_block.words.q))
 800e25c:	4b81      	ldr	r3, [pc, #516]	@ (800e464 <gc_execute_block+0x1434>)
 800e25e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e262:	4a83      	ldr	r2, [pc, #524]	@ (800e470 <gc_execute_block+0x1440>)
 800e264:	421a      	tst	r2, r3
 800e266:	f002 8569 	beq.w	8010d3c <gc_execute_block+0x3d0c>
                if((uint32_t)gc_block.values.e + 1 > hal.port.num_analog_out)
 800e26a:	4b7e      	ldr	r3, [pc, #504]	@ (800e464 <gc_execute_block+0x1434>)
 800e26c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800e270:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800e274:	ee17 3a10 	vmov	r3, s14
 800e278:	3301      	adds	r3, #1
 800e27a:	4a7c      	ldr	r2, [pc, #496]	@ (800e46c <gc_execute_block+0x143c>)
 800e27c:	f892 2117 	ldrb.w	r2, [r2, #279]	@ 0x117
 800e280:	4293      	cmp	r3, r2
 800e282:	f202 855e 	bhi.w	8010d42 <gc_execute_block+0x3d12>
                gc_block.output_command.is_digital = false;
 800e286:	4b77      	ldr	r3, [pc, #476]	@ (800e464 <gc_execute_block+0x1434>)
 800e288:	2100      	movs	r1, #0
 800e28a:	f883 10bc 	strb.w	r1, [r3, #188]	@ 0xbc
                gc_block.output_command.port = (uint8_t)gc_block.values.e;
 800e28e:	ee17 2a10 	vmov	r2, s14
 800e292:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
                gc_block.output_command.value = gc_block.values.q;
 800e296:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800e29a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e29e:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
                gc_block.words.e = gc_block.words.q = Off;
 800e2a2:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800e2a6:	f361 0241 	bfi	r2, r1, #1, #1
 800e2aa:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800e2ae:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800e2b2:	f361 0200 	bfi	r2, r1, #0, #1
 800e2b6:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
    if(command_words.M7 && gc_block.modal.spindle.state.ccw) {
 800e2ba:	f019 0f02 	tst.w	r9, #2
 800e2be:	d010      	beq.n	800e2e2 <gc_execute_block+0x12b2>
 800e2c0:	4b68      	ldr	r3, [pc, #416]	@ (800e464 <gc_execute_block+0x1434>)
 800e2c2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800e2c6:	f013 0f02 	tst.w	r3, #2
 800e2ca:	d00a      	beq.n	800e2e2 <gc_execute_block+0x12b2>
        if(gc_block.spindle == NULL) {
 800e2cc:	4b65      	ldr	r3, [pc, #404]	@ (800e464 <gc_execute_block+0x1434>)
 800e2ce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	f000 809c 	beq.w	800e410 <gc_execute_block+0x13e0>
        } else if(!(gc_block.spindle->cap.direction || gc_block.spindle->cap.laser))
 800e2d8:	7a9b      	ldrb	r3, [r3, #10]
 800e2da:	f013 0f0a 	tst.w	r3, #10
 800e2de:	f002 8533 	beq.w	8010d48 <gc_execute_block+0x3d18>
    if (command_words.M9) {
 800e2e2:	f019 0f08 	tst.w	r9, #8
 800e2e6:	f000 80d3 	beq.w	800e490 <gc_execute_block+0x1460>
        if(!gc_block.words.p)
 800e2ea:	4b5e      	ldr	r3, [pc, #376]	@ (800e464 <gc_execute_block+0x1434>)
 800e2ec:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e2f0:	f013 0f01 	tst.w	r3, #1
 800e2f4:	f040 80a5 	bne.w	800e442 <gc_execute_block+0x1412>
            gc_block.values.p = 1.0f;
 800e2f8:	4b5a      	ldr	r3, [pc, #360]	@ (800e464 <gc_execute_block+0x1434>)
 800e2fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e2fe:	65da      	str	r2, [r3, #92]	@ 0x5c
        switch(gc_block.override_command) {
 800e300:	4b58      	ldr	r3, [pc, #352]	@ (800e464 <gc_execute_block+0x1434>)
 800e302:	785b      	ldrb	r3, [r3, #1]
 800e304:	3b30      	subs	r3, #48	@ 0x30
 800e306:	2b08      	cmp	r3, #8
 800e308:	f200 80c2 	bhi.w	800e490 <gc_execute_block+0x1460>
 800e30c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e310:	00ff00b4 	.word	0x00ff00b4
 800e314:	011d010c 	.word	0x011d010c
 800e318:	012e00c0 	.word	0x012e00c0
 800e31c:	00c000c0 	.word	0x00c000c0
 800e320:	013f      	.short	0x013f
                gc_block.output_command.value = port_command == 62 || port_command == 64 ? 1.0f : 0.0f;
 800e322:	2201      	movs	r2, #1
 800e324:	e78b      	b.n	800e23e <gc_execute_block+0x120e>
 800e326:	2201      	movs	r2, #1
 800e328:	e789      	b.n	800e23e <gc_execute_block+0x120e>
                if(!(gc_block.words.l || gc_block.words.q))
 800e32a:	4b4e      	ldr	r3, [pc, #312]	@ (800e464 <gc_execute_block+0x1434>)
 800e32c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800e330:	f412 3f04 	tst.w	r2, #135168	@ 0x21000
 800e334:	f002 84cf 	beq.w	8010cd6 <gc_execute_block+0x3ca6>
                if(gc_block.words.p && gc_block.words.e)
 800e338:	4b4e      	ldr	r3, [pc, #312]	@ (800e474 <gc_execute_block+0x1444>)
 800e33a:	4393      	bics	r3, r2
 800e33c:	f002 84ce 	beq.w	8010cdc <gc_execute_block+0x3cac>
                if(gc_block.values.l >= (uint8_t)WaitMode_Max)
 800e340:	4b48      	ldr	r3, [pc, #288]	@ (800e464 <gc_execute_block+0x1434>)
 800e342:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 800e346:	2a04      	cmp	r2, #4
 800e348:	f202 84e6 	bhi.w	8010d18 <gc_execute_block+0x3ce8>
                if((wait_mode_t)gc_block.values.l != WaitMode_Immediate && gc_block.values.q == 0.0f)
 800e34c:	b13a      	cbz	r2, 800e35e <gc_execute_block+0x132e>
 800e34e:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800e352:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e35a:	f002 84e0 	beq.w	8010d1e <gc_execute_block+0x3cee>
                if(gc_block.words.p) {
 800e35e:	4b41      	ldr	r3, [pc, #260]	@ (800e464 <gc_execute_block+0x1434>)
 800e360:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e364:	f013 0f01 	tst.w	r3, #1
 800e368:	d01b      	beq.n	800e3a2 <gc_execute_block+0x1372>
                    if(gc_block.values.p < 0.0f)
 800e36a:	4b3e      	ldr	r3, [pc, #248]	@ (800e464 <gc_execute_block+0x1434>)
 800e36c:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800e370:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e378:	f102 84d4 	bmi.w	8010d24 <gc_execute_block+0x3cf4>
                    if((uint32_t)gc_block.values.p + 1 > hal.port.num_digital_in)
 800e37c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800e380:	ee17 3a10 	vmov	r3, s14
 800e384:	3301      	adds	r3, #1
 800e386:	4939      	ldr	r1, [pc, #228]	@ (800e46c <gc_execute_block+0x143c>)
 800e388:	f891 1114 	ldrb.w	r1, [r1, #276]	@ 0x114
 800e38c:	428b      	cmp	r3, r1
 800e38e:	f202 84cc 	bhi.w	8010d2a <gc_execute_block+0x3cfa>
                    gc_block.output_command.is_digital = true;
 800e392:	4934      	ldr	r1, [pc, #208]	@ (800e464 <gc_execute_block+0x1434>)
 800e394:	2301      	movs	r3, #1
 800e396:	f881 30bc 	strb.w	r3, [r1, #188]	@ 0xbc
                    gc_block.output_command.port = (uint8_t)gc_block.values.p;
 800e39a:	ee17 3a10 	vmov	r3, s14
 800e39e:	f881 30be 	strb.w	r3, [r1, #190]	@ 0xbe
                if(gc_block.words.e) {
 800e3a2:	4b30      	ldr	r3, [pc, #192]	@ (800e464 <gc_execute_block+0x1434>)
 800e3a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800e3a8:	f013 0f01 	tst.w	r3, #1
 800e3ac:	d018      	beq.n	800e3e0 <gc_execute_block+0x13b0>
                    if((uint32_t)gc_block.values.e + 1 > hal.port.num_analog_in)
 800e3ae:	4b2d      	ldr	r3, [pc, #180]	@ (800e464 <gc_execute_block+0x1434>)
 800e3b0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800e3b4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800e3b8:	ee17 3a10 	vmov	r3, s14
 800e3bc:	3301      	adds	r3, #1
 800e3be:	492b      	ldr	r1, [pc, #172]	@ (800e46c <gc_execute_block+0x143c>)
 800e3c0:	f891 1116 	ldrb.w	r1, [r1, #278]	@ 0x116
 800e3c4:	428b      	cmp	r3, r1
 800e3c6:	f202 84b3 	bhi.w	8010d30 <gc_execute_block+0x3d00>
                    if((wait_mode_t)gc_block.values.l != WaitMode_Immediate)
 800e3ca:	2a00      	cmp	r2, #0
 800e3cc:	f042 84b3 	bne.w	8010d36 <gc_execute_block+0x3d06>
                    gc_block.output_command.is_digital = false;
 800e3d0:	4a24      	ldr	r2, [pc, #144]	@ (800e464 <gc_execute_block+0x1434>)
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
                    gc_block.output_command.port = (uint8_t)gc_block.values.e;
 800e3d8:	ee17 3a10 	vmov	r3, s14
 800e3dc:	f882 30be 	strb.w	r3, [r2, #190]	@ 0xbe
                gc_block.words.e = gc_block.words.l = gc_block.words.p = gc_block.words.q = Off;
 800e3e0:	4b20      	ldr	r3, [pc, #128]	@ (800e464 <gc_execute_block+0x1434>)
 800e3e2:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800e3e6:	f36f 0241 	bfc	r2, #1, #1
 800e3ea:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800e3ee:	b2d2      	uxtb	r2, r2
 800e3f0:	f36f 0200 	bfc	r2, #0, #1
 800e3f4:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800e3f8:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800e3fc:	f36f 1204 	bfc	r2, #4, #1
 800e400:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800e404:	b2d2      	uxtb	r2, r2
 800e406:	f36f 0200 	bfc	r2, #0, #1
 800e40a:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
                break;
 800e40e:	e754      	b.n	800e2ba <gc_execute_block+0x128a>
                if(spindle_is_enabled(idx) && !(spindle_get(idx)->cap.direction || spindle_get(idx)->cap.laser))
 800e410:	2000      	movs	r0, #0
 800e412:	f00f fcd1 	bl	801ddb8 <spindle_is_enabled>
 800e416:	2800      	cmp	r0, #0
 800e418:	f43f af63 	beq.w	800e2e2 <gc_execute_block+0x12b2>
 800e41c:	2000      	movs	r0, #0
 800e41e:	f00f fce1 	bl	801dde4 <spindle_get>
 800e422:	7a83      	ldrb	r3, [r0, #10]
 800e424:	f013 0f02 	tst.w	r3, #2
 800e428:	f47f af5b 	bne.w	800e2e2 <gc_execute_block+0x12b2>
 800e42c:	2000      	movs	r0, #0
 800e42e:	f00f fcd9 	bl	801dde4 <spindle_get>
 800e432:	7a83      	ldrb	r3, [r0, #10]
 800e434:	f013 0f08 	tst.w	r3, #8
 800e438:	f47f af53 	bne.w	800e2e2 <gc_execute_block+0x12b2>
                    FAIL(Status_GcodeUnsupportedCommand);
 800e43c:	2414      	movs	r4, #20
 800e43e:	f7fe bed4 	b.w	800d1ea <gc_execute_block+0x1ba>
            if(gc_block.values.p < 0.0f)
 800e442:	4b08      	ldr	r3, [pc, #32]	@ (800e464 <gc_execute_block+0x1434>)
 800e444:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800e448:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e450:	f102 847d 	bmi.w	8010d4e <gc_execute_block+0x3d1e>
            gc_block.words.p = Off;
 800e454:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800e458:	f36f 0200 	bfc	r2, #0, #1
 800e45c:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800e460:	e74e      	b.n	800e300 <gc_execute_block+0x12d0>
 800e462:	bf00      	nop
 800e464:	20000ddc 	.word	0x20000ddc
 800e468:	20000ee4 	.word	0x20000ee4
 800e46c:	200011ac 	.word	0x200011ac
 800e470:	00020100 	.word	0x00020100
 800e474:	00010100 	.word	0x00010100
                gc_block.modal.override_ctrl.feed_rate_disable = Off;
 800e478:	4ba5      	ldr	r3, [pc, #660]	@ (800e710 <gc_execute_block+0x16e0>)
 800e47a:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800e47e:	f36f 0200 	bfc	r2, #0, #1
 800e482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                gc_block.modal.override_ctrl.spindle_rpm_disable = Off;
 800e486:	b2d2      	uxtb	r2, r2
 800e488:	f36f 0282 	bfc	r2, #2, #1
 800e48c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (command_words.M10 && gc_block.user_mcode) {
 800e490:	b1d4      	cbz	r4, 800e4c8 <gc_execute_block+0x1498>
 800e492:	4b9f      	ldr	r3, [pc, #636]	@ (800e710 <gc_execute_block+0x16e0>)
 800e494:	885b      	ldrh	r3, [r3, #2]
 800e496:	b1bb      	cbz	r3, 800e4c8 <gc_execute_block+0x1498>
        user_words.mask = gc_block.words.mask;
 800e498:	489d      	ldr	r0, [pc, #628]	@ (800e710 <gc_execute_block+0x16e0>)
 800e49a:	4601      	mov	r1, r0
 800e49c:	f851 2fb8 	ldr.w	r2, [r1, #184]!
 800e4a0:	4b9c      	ldr	r3, [pc, #624]	@ (800e714 <gc_execute_block+0x16e4>)
 800e4a2:	601a      	str	r2, [r3, #0]
        if((int_value = (uint_fast16_t)hal.user_mcode.validate(&gc_block, &gc_block.words)))
 800e4a4:	4b9c      	ldr	r3, [pc, #624]	@ (800e718 <gc_execute_block+0x16e8>)
 800e4a6:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800e4aa:	4798      	blx	r3
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	2800      	cmp	r0, #0
 800e4b0:	f47e ae9b 	bne.w	800d1ea <gc_execute_block+0x1ba>
        user_words.mask ^= gc_block.words.mask; // Flag "taken" words for execution
 800e4b4:	4a97      	ldr	r2, [pc, #604]	@ (800e714 <gc_execute_block+0x16e4>)
 800e4b6:	6813      	ldr	r3, [r2, #0]
 800e4b8:	4995      	ldr	r1, [pc, #596]	@ (800e710 <gc_execute_block+0x16e0>)
 800e4ba:	f8d1 10b8 	ldr.w	r1, [r1, #184]	@ 0xb8
 800e4be:	404b      	eors	r3, r1
 800e4c0:	6013      	str	r3, [r2, #0]
        axis_words.mask = ijk_words.mask = 0;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	9305      	str	r3, [sp, #20]
 800e4c6:	469b      	mov	fp, r3
    if (gc_block.non_modal_command == NonModal_Dwell) {
 800e4c8:	4b91      	ldr	r3, [pc, #580]	@ (800e710 <gc_execute_block+0x16e0>)
 800e4ca:	781c      	ldrb	r4, [r3, #0]
 800e4cc:	2c04      	cmp	r4, #4
 800e4ce:	d114      	bne.n	800e4fa <gc_execute_block+0x14ca>
        if (!gc_block.words.p)
 800e4d0:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e4d4:	f013 0f01 	tst.w	r3, #1
 800e4d8:	f002 843c 	beq.w	8010d54 <gc_execute_block+0x3d24>
        if(gc_block.values.p < 0.0f)
 800e4dc:	4b8c      	ldr	r3, [pc, #560]	@ (800e710 <gc_execute_block+0x16e0>)
 800e4de:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800e4e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ea:	f53e ae7e 	bmi.w	800d1ea <gc_execute_block+0x1ba>
        gc_block.words.p = Off;
 800e4ee:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800e4f2:	f36f 0200 	bfc	r2, #0, #1
 800e4f6:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
    gc_get_plane_data(&plane, gc_block.modal.plane_select);
 800e4fa:	4c85      	ldr	r4, [pc, #532]	@ (800e710 <gc_execute_block+0x16e0>)
 800e4fc:	7ba1      	ldrb	r1, [r4, #14]
 800e4fe:	a822      	add	r0, sp, #136	@ 0x88
 800e500:	f7fe fba4 	bl	800cc4c <gc_get_plane_data>
    if (gc_block.modal.units_imperial) do { // Axes indices are consistent, so loop may be used.
 800e504:	7ae3      	ldrb	r3, [r4, #11]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d06f      	beq.n	800e5ea <gc_execute_block+0x15ba>
    uint_fast8_t idx = N_AXIS;
 800e50a:	2303      	movs	r3, #3
 800e50c:	e058      	b.n	800e5c0 <gc_execute_block+0x1590>
                gc_block.modal.override_ctrl.feed_rate_disable = On;
 800e50e:	4b80      	ldr	r3, [pc, #512]	@ (800e710 <gc_execute_block+0x16e0>)
 800e510:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800e514:	f042 0201 	orr.w	r2, r2, #1
 800e518:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                gc_block.modal.override_ctrl.spindle_rpm_disable = On;
 800e51c:	b2d2      	uxtb	r2, r2
 800e51e:	f042 0204 	orr.w	r2, r2, #4
 800e522:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800e526:	e7b3      	b.n	800e490 <gc_execute_block+0x1460>
                gc_block.modal.override_ctrl.feed_rate_disable = gc_block.values.p == 0.0f;
 800e528:	4b79      	ldr	r3, [pc, #484]	@ (800e710 <gc_execute_block+0x16e0>)
 800e52a:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800e52e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e536:	bf0c      	ite	eq
 800e538:	2101      	moveq	r1, #1
 800e53a:	2100      	movne	r1, #0
 800e53c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800e540:	f361 0200 	bfi	r2, r1, #0, #1
 800e544:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800e548:	e7a2      	b.n	800e490 <gc_execute_block+0x1460>
                gc_block.modal.override_ctrl.spindle_rpm_disable = gc_block.values.p == 0.0f;
 800e54a:	4b71      	ldr	r3, [pc, #452]	@ (800e710 <gc_execute_block+0x16e0>)
 800e54c:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800e550:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e558:	bf0c      	ite	eq
 800e55a:	2101      	moveq	r1, #1
 800e55c:	2100      	movne	r1, #0
 800e55e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800e562:	f361 0282 	bfi	r2, r1, #2, #1
 800e566:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800e56a:	e791      	b.n	800e490 <gc_execute_block+0x1460>
                gc_block.modal.override_ctrl.feed_hold_disable = gc_block.values.p == 0.0f;
 800e56c:	4b68      	ldr	r3, [pc, #416]	@ (800e710 <gc_execute_block+0x16e0>)
 800e56e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800e572:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e57a:	bf0c      	ite	eq
 800e57c:	2101      	moveq	r1, #1
 800e57e:	2100      	movne	r1, #0
 800e580:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800e584:	f361 0241 	bfi	r2, r1, #1, #1
 800e588:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800e58c:	e780      	b.n	800e490 <gc_execute_block+0x1460>
                if(settings.parking.flags.enable_override_control)
 800e58e:	4b63      	ldr	r3, [pc, #396]	@ (800e71c <gc_execute_block+0x16ec>)
 800e590:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800e594:	f013 0f04 	tst.w	r3, #4
 800e598:	f43f af7a 	beq.w	800e490 <gc_execute_block+0x1460>
                    gc_block.modal.override_ctrl.parking_disable = gc_block.values.p == 0.0f;
 800e59c:	4b5c      	ldr	r3, [pc, #368]	@ (800e710 <gc_execute_block+0x16e0>)
 800e59e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800e5a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5aa:	bf0c      	ite	eq
 800e5ac:	2101      	moveq	r1, #1
 800e5ae:	2100      	movne	r1, #0
 800e5b0:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800e5b4:	f361 02c3 	bfi	r2, r1, #3, #1
 800e5b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800e5bc:	e768      	b.n	800e490 <gc_execute_block+0x1460>
    } while(idx);
 800e5be:	b1a3      	cbz	r3, 800e5ea <gc_execute_block+0x15ba>
        idx--;
 800e5c0:	3b01      	subs	r3, #1
        if (bit_istrue(axis_words.mask, bit(idx))) {
 800e5c2:	fa5f f28b 	uxtb.w	r2, fp
 800e5c6:	40da      	lsrs	r2, r3
 800e5c8:	f012 0f01 	tst.w	r2, #1
 800e5cc:	d0f7      	beq.n	800e5be <gc_execute_block+0x158e>
            gc_block.values.xyz[idx] *= MM_PER_INCH;
 800e5ce:	f103 0120 	add.w	r1, r3, #32
 800e5d2:	4a4f      	ldr	r2, [pc, #316]	@ (800e710 <gc_execute_block+0x16e0>)
 800e5d4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e5d8:	edd2 7a01 	vldr	s15, [r2, #4]
 800e5dc:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800e720 <gc_execute_block+0x16f0>
 800e5e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e5e4:	edc2 7a01 	vstr	s15, [r2, #4]
 800e5e8:	e7e9      	b.n	800e5be <gc_execute_block+0x158e>
    if (command_words.G15 && gc_state.modal.diameter_mode != gc_block.modal.diameter_mode) {
 800e5ea:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800e5ee:	d005      	beq.n	800e5fc <gc_execute_block+0x15cc>
 800e5f0:	4b4c      	ldr	r3, [pc, #304]	@ (800e724 <gc_execute_block+0x16f4>)
 800e5f2:	795a      	ldrb	r2, [r3, #5]
 800e5f4:	4b46      	ldr	r3, [pc, #280]	@ (800e710 <gc_execute_block+0x16e0>)
 800e5f6:	7b5b      	ldrb	r3, [r3, #13]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d118      	bne.n	800e62e <gc_execute_block+0x15fe>
    if(gc_state.modal.diameter_mode && bit_istrue(axis_words.mask, bit(X_AXIS)))
 800e5fc:	4b49      	ldr	r3, [pc, #292]	@ (800e724 <gc_execute_block+0x16f4>)
 800e5fe:	795b      	ldrb	r3, [r3, #5]
 800e600:	b15b      	cbz	r3, 800e61a <gc_execute_block+0x15ea>
 800e602:	f01b 0f01 	tst.w	fp, #1
 800e606:	d008      	beq.n	800e61a <gc_execute_block+0x15ea>
        gc_block.values.xyz[X_AXIS] /= 2.0f;
 800e608:	4b41      	ldr	r3, [pc, #260]	@ (800e710 <gc_execute_block+0x16e0>)
 800e60a:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 800e60e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e612:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e616:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
    if(axis_command == AxisCommand_Scaling) {
 800e61a:	f1ba 0f04 	cmp.w	sl, #4
 800e61e:	d00c      	beq.n	800e63a <gc_execute_block+0x160a>
    if(gc_state.modal.scaling_active) {
 800e620:	4b40      	ldr	r3, [pc, #256]	@ (800e724 <gc_execute_block+0x16f4>)
 800e622:	7f9b      	ldrb	r3, [r3, #30]
 800e624:	2b00      	cmp	r3, #0
 800e626:	f000 80b8 	beq.w	800e79a <gc_execute_block+0x176a>
        idx = N_AXIS;
 800e62a:	2203      	movs	r2, #3
 800e62c:	e098      	b.n	800e760 <gc_execute_block+0x1730>
        gc_state.modal.diameter_mode = gc_block.modal.diameter_mode;
 800e62e:	4a3d      	ldr	r2, [pc, #244]	@ (800e724 <gc_execute_block+0x16f4>)
 800e630:	7153      	strb	r3, [r2, #5]
        system_add_rt_report(Report_LatheXMode);
 800e632:	2008      	movs	r0, #8
 800e634:	f013 f824 	bl	8021680 <system_add_rt_report>
 800e638:	e7e0      	b.n	800e5fc <gc_execute_block+0x15cc>
        if(gc_block.modal.scaling_active) {
 800e63a:	4b35      	ldr	r3, [pc, #212]	@ (800e710 <gc_execute_block+0x16e0>)
 800e63c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800e640:	2b00      	cmp	r3, #0
 800e642:	d05f      	beq.n	800e704 <gc_execute_block+0x16d4>
            gc_block.modal.scaling_active = false;
 800e644:	4b32      	ldr	r3, [pc, #200]	@ (800e710 <gc_execute_block+0x16e0>)
 800e646:	2200      	movs	r2, #0
 800e648:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            if (!axis_words.mask)
 800e64c:	fa5f f38b 	uxtb.w	r3, fp
 800e650:	2b00      	cmp	r3, #0
 800e652:	f002 8382 	beq.w	8010d5a <gc_execute_block+0x3d2a>
            bool report_scaling = false;
 800e656:	4616      	mov	r6, r2
            idx = N_AXIS;
 800e658:	2403      	movs	r4, #3
 800e65a:	e024      	b.n	800e6a6 <gc_execute_block+0x1676>
                    report_scaling |= scale_factor.ijk[idx] != gc_block.values.xyz[idx];
 800e65c:	1ca1      	adds	r1, r4, #2
 800e65e:	4a32      	ldr	r2, [pc, #200]	@ (800e728 <gc_execute_block+0x16f8>)
 800e660:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e664:	ed92 7a01 	vldr	s14, [r2, #4]
 800e668:	f104 0020 	add.w	r0, r4, #32
 800e66c:	4928      	ldr	r1, [pc, #160]	@ (800e710 <gc_execute_block+0x16e0>)
 800e66e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800e672:	edd1 7a01 	vldr	s15, [r1, #4]
 800e676:	eeb4 7a67 	vcmp.f32	s14, s15
 800e67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e67e:	bf18      	it	ne
 800e680:	f046 0601 	orrne.w	r6, r6, #1
                    scale_factor.ijk[idx] = gc_block.values.xyz[idx];
 800e684:	edc2 7a01 	vstr	s15, [r2, #4]
                    bit_false(axis_words.mask, bit(idx));
 800e688:	f04f 0b01 	mov.w	fp, #1
 800e68c:	fa0b fb04 	lsl.w	fp, fp, r4
 800e690:	ea23 0b0b 	bic.w	fp, r3, fp
                    system_add_rt_report(Report_Scaling);
 800e694:	2002      	movs	r0, #2
 800e696:	f012 fff3 	bl	8021680 <system_add_rt_report>
 800e69a:	e00c      	b.n	800e6b6 <gc_execute_block+0x1686>
                gc_block.modal.scaling_active = gc_block.modal.scaling_active || (scale_factor.xyz[idx] != 1.0f);
 800e69c:	2301      	movs	r3, #1
 800e69e:	4a1c      	ldr	r2, [pc, #112]	@ (800e710 <gc_execute_block+0x16e0>)
 800e6a0:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
            } while(idx);
 800e6a4:	b1e4      	cbz	r4, 800e6e0 <gc_execute_block+0x16b0>
                if(bit_istrue(axis_words.mask, bit(--idx))) {
 800e6a6:	fa5f f38b 	uxtb.w	r3, fp
 800e6aa:	3c01      	subs	r4, #1
 800e6ac:	fa23 f204 	lsr.w	r2, r3, r4
 800e6b0:	f012 0f01 	tst.w	r2, #1
 800e6b4:	d1d2      	bne.n	800e65c <gc_execute_block+0x162c>
                gc_block.modal.scaling_active = gc_block.modal.scaling_active || (scale_factor.xyz[idx] != 1.0f);
 800e6b6:	4b16      	ldr	r3, [pc, #88]	@ (800e710 <gc_execute_block+0x16e0>)
 800e6b8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d1ed      	bne.n	800e69c <gc_execute_block+0x166c>
 800e6c0:	4b19      	ldr	r3, [pc, #100]	@ (800e728 <gc_execute_block+0x16f8>)
 800e6c2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e6c6:	ed93 7a00 	vldr	s14, [r3]
 800e6ca:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e6ce:	eeb4 7a67 	vcmp.f32	s14, s15
 800e6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6d6:	d001      	beq.n	800e6dc <gc_execute_block+0x16ac>
 800e6d8:	2301      	movs	r3, #1
 800e6da:	e7e0      	b.n	800e69e <gc_execute_block+0x166e>
 800e6dc:	2300      	movs	r3, #0
 800e6de:	e7de      	b.n	800e69e <gc_execute_block+0x166e>
            gc_block.words.mask &= ~axis_words_mask.mask; // Remove axis words.
 800e6e0:	4611      	mov	r1, r2
 800e6e2:	f8d2 20b8 	ldr.w	r2, [r2, #184]	@ 0xb8
 800e6e6:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 800e6ea:	f8c1 20b8 	str.w	r2, [r1, #184]	@ 0xb8
            report_scaling |= gc_state.modal.scaling_active != gc_block.modal.scaling_active;
 800e6ee:	4a0d      	ldr	r2, [pc, #52]	@ (800e724 <gc_execute_block+0x16f4>)
 800e6f0:	7f91      	ldrb	r1, [r2, #30]
            gc_state.modal.scaling_active = gc_block.modal.scaling_active;
 800e6f2:	7793      	strb	r3, [r2, #30]
            if(report_scaling)
 800e6f4:	428b      	cmp	r3, r1
 800e6f6:	d101      	bne.n	800e6fc <gc_execute_block+0x16cc>
 800e6f8:	2e00      	cmp	r6, #0
 800e6fa:	d091      	beq.n	800e620 <gc_execute_block+0x15f0>
                system_add_rt_report(Report_Scaling);
 800e6fc:	2002      	movs	r0, #2
 800e6fe:	f012 ffbf 	bl	8021680 <system_add_rt_report>
 800e702:	e78d      	b.n	800e620 <gc_execute_block+0x15f0>
            set_scaling(1.0f);
 800e704:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e708:	f7fe f9c8 	bl	800ca9c <set_scaling>
 800e70c:	e788      	b.n	800e620 <gc_execute_block+0x15f0>
 800e70e:	bf00      	nop
 800e710:	20000ddc 	.word	0x20000ddc
 800e714:	20000dd8 	.word	0x20000dd8
 800e718:	200011ac 	.word	0x200011ac
 800e71c:	20001bc4 	.word	0x20001bc4
 800e720:	41cb3333 	.word	0x41cb3333
 800e724:	20000ee4 	.word	0x20000ee4
 800e728:	200001a8 	.word	0x200001a8
                     gc_block.values.xyz[idx] = (gc_block.values.xyz[idx] - scale_factor.xyz[idx]) * scale_factor.ijk[idx] + scale_factor.xyz[idx];
 800e72c:	f102 0120 	add.w	r1, r2, #32
 800e730:	4bb2      	ldr	r3, [pc, #712]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e732:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e736:	edd3 7a01 	vldr	s15, [r3, #4]
 800e73a:	49b1      	ldr	r1, [pc, #708]	@ (800ea00 <gc_execute_block+0x19d0>)
 800e73c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800e740:	ed90 7a00 	vldr	s14, [r0]
 800e744:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e748:	1c90      	adds	r0, r2, #2
 800e74a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800e74e:	edd1 6a01 	vldr	s13, [r1, #4]
 800e752:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e756:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e75a:	ed83 7a01 	vstr	s14, [r3, #4]
        } while(idx);
 800e75e:	b1e2      	cbz	r2, 800e79a <gc_execute_block+0x176a>
            if(bit_istrue(axis_words.mask, bit(--idx))) {
 800e760:	fa5f f38b 	uxtb.w	r3, fp
 800e764:	3a01      	subs	r2, #1
 800e766:	40d3      	lsrs	r3, r2
 800e768:	f013 0f01 	tst.w	r3, #1
 800e76c:	d0f7      	beq.n	800e75e <gc_execute_block+0x172e>
                if(gc_block.modal.distance_incremental)
 800e76e:	4ba3      	ldr	r3, [pc, #652]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e770:	7b1b      	ldrb	r3, [r3, #12]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d0da      	beq.n	800e72c <gc_execute_block+0x16fc>
                     gc_block.values.xyz[idx] *= scale_factor.ijk[idx];
 800e776:	f102 0120 	add.w	r1, r2, #32
 800e77a:	4ba0      	ldr	r3, [pc, #640]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e77c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e780:	edd3 7a01 	vldr	s15, [r3, #4]
 800e784:	1c90      	adds	r0, r2, #2
 800e786:	499e      	ldr	r1, [pc, #632]	@ (800ea00 <gc_execute_block+0x19d0>)
 800e788:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800e78c:	ed91 7a01 	vldr	s14, [r1, #4]
 800e790:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e794:	edc3 7a01 	vstr	s15, [r3, #4]
 800e798:	e7e1      	b.n	800e75e <gc_execute_block+0x172e>
    if (command_words.G8) { // Indicates called in block.
 800e79a:	f015 0301 	ands.w	r3, r5, #1
 800e79e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7a0:	d007      	beq.n	800e7b2 <gc_execute_block+0x1782>
        switch(gc_block.modal.tool_offset_mode) {
 800e7a2:	4b96      	ldr	r3, [pc, #600]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e7a4:	7bdb      	ldrb	r3, [r3, #15]
 800e7a6:	2b02      	cmp	r3, #2
 800e7a8:	d01e      	beq.n	800e7e8 <gc_execute_block+0x17b8>
 800e7aa:	2b03      	cmp	r3, #3
 800e7ac:	d049      	beq.n	800e842 <gc_execute_block+0x1812>
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d021      	beq.n	800e7f6 <gc_execute_block+0x17c6>
    if (command_words.G12) { // Check if called in block
 800e7b2:	f015 0f08 	tst.w	r5, #8
 800e7b6:	d005      	beq.n	800e7c4 <gc_execute_block+0x1794>
        if (gc_state.modal.coord_system.id != gc_block.modal.coord_system.id && !settings_read_coord_data(gc_block.modal.coord_system.id, &gc_block.modal.coord_system.xyz))
 800e7b8:	4b92      	ldr	r3, [pc, #584]	@ (800ea04 <gc_execute_block+0x19d4>)
 800e7ba:	7d1b      	ldrb	r3, [r3, #20]
 800e7bc:	4a8f      	ldr	r2, [pc, #572]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e7be:	7f10      	ldrb	r0, [r2, #28]
 800e7c0:	4283      	cmp	r3, r0
 800e7c2:	d15b      	bne.n	800e87c <gc_execute_block+0x184c>
    switch (gc_block.non_modal_command) {
 800e7c4:	4b8d      	ldr	r3, [pc, #564]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e7c6:	781b      	ldrb	r3, [r3, #0]
 800e7c8:	2b0a      	cmp	r3, #10
 800e7ca:	d060      	beq.n	800e88e <gc_execute_block+0x185e>
 800e7cc:	2b5c      	cmp	r3, #92	@ 0x5c
 800e7ce:	f000 8260 	beq.w	800ec92 <gc_execute_block+0x1c62>
            if (axis_words.mask && axis_command != AxisCommand_ToolLengthOffset) { // TLO block any axis command.
 800e7d2:	fa5f f48b 	uxtb.w	r4, fp
 800e7d6:	2c00      	cmp	r4, #0
 800e7d8:	f000 82ef 	beq.w	800edba <gc_execute_block+0x1d8a>
 800e7dc:	f1ba 0f03 	cmp.w	sl, #3
 800e7e0:	f000 82eb 	beq.w	800edba <gc_execute_block+0x1d8a>
                idx = N_AXIS;
 800e7e4:	2203      	movs	r2, #3
 800e7e6:	e2b3      	b.n	800ed50 <gc_execute_block+0x1d20>
                if(!axis_words.mask)
 800e7e8:	fa5f f38b 	uxtb.w	r3, fp
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d1e0      	bne.n	800e7b2 <gc_execute_block+0x1782>
                    FAIL(Status_GcodeG43DynamicAxisError);
 800e7f0:	2425      	movs	r4, #37	@ 0x25
 800e7f2:	f7fe bcfa 	b.w	800d1ea <gc_execute_block+0x1ba>
                if(grbl.tool_table.n_tools) {
 800e7f6:	4b84      	ldr	r3, [pc, #528]	@ (800ea08 <gc_execute_block+0x19d8>)
 800e7f8:	699a      	ldr	r2, [r3, #24]
 800e7fa:	2a00      	cmp	r2, #0
 800e7fc:	f002 82b0 	beq.w	8010d60 <gc_execute_block+0x3d30>
                    if(gc_block.words.h) {
 800e800:	4b7e      	ldr	r3, [pc, #504]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e802:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800e806:	f013 0f08 	tst.w	r3, #8
 800e80a:	d014      	beq.n	800e836 <gc_execute_block+0x1806>
                        if(gc_block.values.h > grbl.tool_table.n_tools)
 800e80c:	4b7b      	ldr	r3, [pc, #492]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e80e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e812:	429a      	cmp	r2, r3
 800e814:	f0c2 82a7 	bcc.w	8010d66 <gc_execute_block+0x3d36>
                        gc_block.words.h = Off;
 800e818:	4a78      	ldr	r2, [pc, #480]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e81a:	f892 10b9 	ldrb.w	r1, [r2, #185]	@ 0xb9
 800e81e:	f36f 01c3 	bfc	r1, #3, #1
 800e822:	f882 10b9 	strb.w	r1, [r2, #185]	@ 0xb9
                        if(gc_block.values.h == 0)
 800e826:	2b00      	cmp	r3, #0
 800e828:	d1c3      	bne.n	800e7b2 <gc_execute_block+0x1782>
                            gc_block.values.h = gc_block.values.t;
 800e82a:	4613      	mov	r3, r2
 800e82c:	f8d2 20b0 	ldr.w	r2, [r2, #176]	@ 0xb0
 800e830:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 800e834:	e7bd      	b.n	800e7b2 <gc_execute_block+0x1782>
                        gc_block.values.h = gc_block.values.t;
 800e836:	4b71      	ldr	r3, [pc, #452]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e838:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800e83c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 800e840:	e7b7      	b.n	800e7b2 <gc_execute_block+0x1782>
                if(grbl.tool_table.n_tools) {
 800e842:	4b71      	ldr	r3, [pc, #452]	@ (800ea08 <gc_execute_block+0x19d8>)
 800e844:	699a      	ldr	r2, [r3, #24]
 800e846:	2a00      	cmp	r2, #0
 800e848:	f002 8290 	beq.w	8010d6c <gc_execute_block+0x3d3c>
                    if(gc_block.words.h) {
 800e84c:	4b6b      	ldr	r3, [pc, #428]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e84e:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800e852:	f013 0f08 	tst.w	r3, #8
 800e856:	f002 828c 	beq.w	8010d72 <gc_execute_block+0x3d42>
                        if(gc_block.values.h == 0 || gc_block.values.h > grbl.tool_table.n_tools)
 800e85a:	4b68      	ldr	r3, [pc, #416]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e85c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e860:	2b00      	cmp	r3, #0
 800e862:	f002 8289 	beq.w	8010d78 <gc_execute_block+0x3d48>
 800e866:	429a      	cmp	r2, r3
 800e868:	f0c2 8289 	bcc.w	8010d7e <gc_execute_block+0x3d4e>
                        gc_block.words.h = Off;
 800e86c:	4b63      	ldr	r3, [pc, #396]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e86e:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800e872:	f36f 02c3 	bfc	r2, #3, #1
 800e876:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
                        FAIL(Status_GcodeValueWordMissing);
 800e87a:	e79a      	b.n	800e7b2 <gc_execute_block+0x1782>
        if (gc_state.modal.coord_system.id != gc_block.modal.coord_system.id && !settings_read_coord_data(gc_block.modal.coord_system.id, &gc_block.modal.coord_system.xyz))
 800e87c:	f102 0110 	add.w	r1, r2, #16
 800e880:	f00e fae6 	bl	801ce50 <settings_read_coord_data>
 800e884:	2800      	cmp	r0, #0
 800e886:	d19d      	bne.n	800e7c4 <gc_execute_block+0x1794>
            FAIL(Status_SettingReadFail);
 800e888:	2407      	movs	r4, #7
 800e88a:	f7fe bcae 	b.w	800d1ea <gc_execute_block+0x1ba>
            if (!(axis_words.mask || (gc_block.values.l != 20 && gc_block.words.r)))
 800e88e:	fa5f f68b 	uxtb.w	r6, fp
 800e892:	b966      	cbnz	r6, 800e8ae <gc_execute_block+0x187e>
 800e894:	4b59      	ldr	r3, [pc, #356]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e896:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800e89a:	2b14      	cmp	r3, #20
 800e89c:	f002 8272 	beq.w	8010d84 <gc_execute_block+0x3d54>
 800e8a0:	4b56      	ldr	r3, [pc, #344]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e8a2:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e8a6:	f013 0f04 	tst.w	r3, #4
 800e8aa:	f002 826e 	beq.w	8010d8a <gc_execute_block+0x3d5a>
            if (!(gc_block.words.p || gc_block.words.l))
 800e8ae:	4b53      	ldr	r3, [pc, #332]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e8b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e8b4:	f413 3f88 	tst.w	r3, #69632	@ 0x11000
 800e8b8:	f002 826a 	beq.w	8010d90 <gc_execute_block+0x3d60>
            if(gc_block.values.p < 0.0f)
 800e8bc:	4b4f      	ldr	r3, [pc, #316]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e8be:	ed93 0a17 	vldr	s0, [r3, #92]	@ 0x5c
 800e8c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ca:	f102 8264 	bmi.w	8010d96 <gc_execute_block+0x3d66>
            p_value = (uint8_t)truncf(gc_block.values.p); // Convert p value to int.
 800e8ce:	f018 fcef 	bl	80272b0 <truncf>
 800e8d2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800e8d6:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
 800e8da:	f89d 4028 	ldrb.w	r4, [sp, #40]	@ 0x28
            switch(gc_block.values.l) {
 800e8de:	4b47      	ldr	r3, [pc, #284]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e8e0:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800e8e4:	3b01      	subs	r3, #1
 800e8e6:	2b13      	cmp	r3, #19
 800e8e8:	f202 8258 	bhi.w	8010d9c <gc_execute_block+0x3d6c>
 800e8ec:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e8f0:	00140090 	.word	0x00140090
 800e8f4:	12561256 	.word	0x12561256
 800e8f8:	12561256 	.word	0x12561256
 800e8fc:	12561256 	.word	0x12561256
 800e900:	00901256 	.word	0x00901256
 800e904:	12560090 	.word	0x12560090
 800e908:	12561256 	.word	0x12561256
 800e90c:	12561256 	.word	0x12561256
 800e910:	12561256 	.word	0x12561256
 800e914:	001b1256 	.word	0x001b1256
                    if (gc_block.words.r)
 800e918:	4b38      	ldr	r3, [pc, #224]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e91a:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e91e:	f013 0f04 	tst.w	r3, #4
 800e922:	f042 823e 	bne.w	8010da2 <gc_execute_block+0x3d72>
                    if (p_value > N_WorkCoordinateSystems)
 800e926:	2c09      	cmp	r4, #9
 800e928:	f202 823e 	bhi.w	8010da8 <gc_execute_block+0x3d78>
                                                     : (coord_system_id_t)(p_value - 1);    // else adjust index to NVS coordinate data indexing.
 800e92c:	b9ec      	cbnz	r4, 800e96a <gc_execute_block+0x193a>
 800e92e:	4b33      	ldr	r3, [pc, #204]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e930:	7f18      	ldrb	r0, [r3, #28]
                    gc_block.values.coord_data.id = p_value == 0
 800e932:	4932      	ldr	r1, [pc, #200]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e934:	f881 009c 	strb.w	r0, [r1, #156]	@ 0x9c
                    if (!settings_read_coord_data(gc_block.values.coord_data.id, &gc_block.values.coord_data.xyz))
 800e938:	3190      	adds	r1, #144	@ 0x90
 800e93a:	f00e fa89 	bl	801ce50 <settings_read_coord_data>
 800e93e:	2800      	cmp	r0, #0
 800e940:	f002 8235 	beq.w	8010dae <gc_execute_block+0x3d7e>
                    if(settings.offset_lock.mask && gc_block.values.coord_data.id >= CoordinateSystem_G59_1 && gc_block.values.coord_data.id <= CoordinateSystem_G59_3) {
 800e944:	4b31      	ldr	r3, [pc, #196]	@ (800ea0c <gc_execute_block+0x19dc>)
 800e946:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 800e94a:	b18a      	cbz	r2, 800e970 <gc_execute_block+0x1940>
 800e94c:	4b2b      	ldr	r3, [pc, #172]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e94e:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800e952:	2b05      	cmp	r3, #5
 800e954:	d90e      	bls.n	800e974 <gc_execute_block+0x1944>
 800e956:	2b08      	cmp	r3, #8
 800e958:	d80e      	bhi.n	800e978 <gc_execute_block+0x1948>
                        if(bit_istrue(settings.offset_lock.mask, bit(gc_block.values.coord_data.id - CoordinateSystem_G59_1)))
 800e95a:	3b06      	subs	r3, #6
 800e95c:	40da      	lsrs	r2, r3
 800e95e:	f012 0f01 	tst.w	r2, #1
 800e962:	f042 8227 	bne.w	8010db4 <gc_execute_block+0x3d84>
 800e966:	2303      	movs	r3, #3
 800e968:	e031      	b.n	800e9ce <gc_execute_block+0x199e>
                                                     : (coord_system_id_t)(p_value - 1);    // else adjust index to NVS coordinate data indexing.
 800e96a:	1e60      	subs	r0, r4, #1
 800e96c:	b2c0      	uxtb	r0, r0
 800e96e:	e7e0      	b.n	800e932 <gc_execute_block+0x1902>
 800e970:	2303      	movs	r3, #3
 800e972:	e02c      	b.n	800e9ce <gc_execute_block+0x199e>
 800e974:	2303      	movs	r3, #3
 800e976:	e02a      	b.n	800e9ce <gc_execute_block+0x199e>
 800e978:	2303      	movs	r3, #3
 800e97a:	e028      	b.n	800e9ce <gc_execute_block+0x199e>
                                gc_block.values.coord_data.xyz[idx] = gc_state.position[idx] - gc_block.values.xyz[idx] - gc_state.g92_coord_offset[idx] - gc_state.tool_length_offset[idx];
 800e97c:	4a21      	ldr	r2, [pc, #132]	@ (800ea04 <gc_execute_block+0x19d4>)
 800e97e:	f103 011a 	add.w	r1, r3, #26
 800e982:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e986:	edd1 7a00 	vldr	s15, [r1]
 800e98a:	491c      	ldr	r1, [pc, #112]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e98c:	f103 0020 	add.w	r0, r3, #32
 800e990:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800e994:	ed90 7a01 	vldr	s14, [r0, #4]
 800e998:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e99c:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 800e9a0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800e9a4:	ed90 7a00 	vldr	s14, [r0]
 800e9a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9ac:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800e9b0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800e9b4:	ed92 7a01 	vldr	s14, [r2, #4]
 800e9b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9bc:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800e9c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e9c4:	edc1 7a02 	vstr	s15, [r1, #8]
                    } while(idx);
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f000 80d5 	beq.w	800eb78 <gc_execute_block+0x1b48>
                        if (bit_istrue(axis_words.mask, bit(--idx))) {
 800e9ce:	3b01      	subs	r3, #1
 800e9d0:	fa26 f203 	lsr.w	r2, r6, r3
 800e9d4:	f012 0f01 	tst.w	r2, #1
 800e9d8:	d0f6      	beq.n	800e9c8 <gc_execute_block+0x1998>
                            if (gc_block.values.l == 20)
 800e9da:	4a08      	ldr	r2, [pc, #32]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e9dc:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 800e9e0:	2a14      	cmp	r2, #20
 800e9e2:	d0cb      	beq.n	800e97c <gc_execute_block+0x194c>
                                gc_block.values.coord_data.xyz[idx] = gc_block.values.xyz[idx];
 800e9e4:	4a05      	ldr	r2, [pc, #20]	@ (800e9fc <gc_execute_block+0x19cc>)
 800e9e6:	f103 0120 	add.w	r1, r3, #32
 800e9ea:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e9ee:	6849      	ldr	r1, [r1, #4]
 800e9f0:	f103 0022 	add.w	r0, r3, #34	@ 0x22
 800e9f4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800e9f8:	6091      	str	r1, [r2, #8]
 800e9fa:	e7e5      	b.n	800e9c8 <gc_execute_block+0x1998>
 800e9fc:	20000ddc 	.word	0x20000ddc
 800ea00:	200001a8 	.word	0x200001a8
 800ea04:	20000ee4 	.word	0x20000ee4
 800ea08:	20001394 	.word	0x20001394
 800ea0c:	20001bc4 	.word	0x20001bc4
                    if(grbl.tool_table.n_tools) {
 800ea10:	4bbf      	ldr	r3, [pc, #764]	@ (800ed10 <gc_execute_block+0x1ce0>)
 800ea12:	699b      	ldr	r3, [r3, #24]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	f002 81d0 	beq.w	8010dba <gc_execute_block+0x3d8a>
                        if(p_value == 0 || p_value > grbl.tool_table.n_tools)
 800ea1a:	2c00      	cmp	r4, #0
 800ea1c:	f000 8133 	beq.w	800ec86 <gc_execute_block+0x1c56>
 800ea20:	42a3      	cmp	r3, r4
 800ea22:	f0c0 8133 	bcc.w	800ec8c <gc_execute_block+0x1c5c>
                        grbl.tool_table.tool[p_value].tool_id = (tool_id_t)p_value;
 800ea26:	4bba      	ldr	r3, [pc, #744]	@ (800ed10 <gc_execute_block+0x1ce0>)
 800ea28:	69db      	ldr	r3, [r3, #28]
 800ea2a:	2514      	movs	r5, #20
 800ea2c:	fb04 f505 	mul.w	r5, r4, r5
 800ea30:	442b      	add	r3, r5
 800ea32:	611c      	str	r4, [r3, #16]
                        if(gc_block.words.r) {
 800ea34:	4bb7      	ldr	r3, [pc, #732]	@ (800ed14 <gc_execute_block+0x1ce4>)
 800ea36:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800ea3a:	f013 0f04 	tst.w	r3, #4
 800ea3e:	d00b      	beq.n	800ea58 <gc_execute_block+0x1a28>
                            grbl.tool_table.tool[p_value].radius = gc_block.values.r;
 800ea40:	4bb3      	ldr	r3, [pc, #716]	@ (800ed10 <gc_execute_block+0x1ce0>)
 800ea42:	69da      	ldr	r2, [r3, #28]
 800ea44:	442a      	add	r2, r5
 800ea46:	4bb3      	ldr	r3, [pc, #716]	@ (800ed14 <gc_execute_block+0x1ce4>)
 800ea48:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 800ea4a:	60d1      	str	r1, [r2, #12]
                            gc_block.words.r = Off;
 800ea4c:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800ea50:	f36f 0282 	bfc	r2, #2, #1
 800ea54:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                        if(gc_block.values.l == 11 && !settings_read_coord_data(CoordinateSystem_G59_3, &g59_3_offset))
 800ea58:	4bae      	ldr	r3, [pc, #696]	@ (800ed14 <gc_execute_block+0x1ce4>)
 800ea5a:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800ea5e:	2b0b      	cmp	r3, #11
 800ea60:	d006      	beq.n	800ea70 <gc_execute_block+0x1a40>
                        if(gc_block.values.l == 1)
 800ea62:	4bac      	ldr	r3, [pc, #688]	@ (800ed14 <gc_execute_block+0x1ce4>)
 800ea64:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	d00a      	beq.n	800ea82 <gc_execute_block+0x1a52>
 800ea6c:	2303      	movs	r3, #3
 800ea6e:	e04b      	b.n	800eb08 <gc_execute_block+0x1ad8>
                        if(gc_block.values.l == 11 && !settings_read_coord_data(CoordinateSystem_G59_3, &g59_3_offset))
 800ea70:	a911      	add	r1, sp, #68	@ 0x44
 800ea72:	2008      	movs	r0, #8
 800ea74:	f00e f9ec 	bl	801ce50 <settings_read_coord_data>
 800ea78:	2800      	cmp	r0, #0
 800ea7a:	d1f2      	bne.n	800ea62 <gc_execute_block+0x1a32>
                            FAIL(Status_SettingReadFail);
 800ea7c:	2407      	movs	r4, #7
 800ea7e:	f7fe bbb4 	b.w	800d1ea <gc_execute_block+0x1ba>
                            grbl.tool_table.read(p_value, &grbl.tool_table.tool[p_value]);
 800ea82:	4ba3      	ldr	r3, [pc, #652]	@ (800ed10 <gc_execute_block+0x1ce0>)
 800ea84:	6a1a      	ldr	r2, [r3, #32]
 800ea86:	69d9      	ldr	r1, [r3, #28]
 800ea88:	4429      	add	r1, r5
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	4790      	blx	r2
 800ea8e:	e7ed      	b.n	800ea6c <gc_execute_block+0x1a3c>
                                    grbl.tool_table.tool[p_value].offset[idx] = gc_block.values.xyz[idx];
 800ea90:	4a9f      	ldr	r2, [pc, #636]	@ (800ed10 <gc_execute_block+0x1ce0>)
 800ea92:	69d2      	ldr	r2, [r2, #28]
 800ea94:	442a      	add	r2, r5
 800ea96:	f103 0020 	add.w	r0, r3, #32
 800ea9a:	499e      	ldr	r1, [pc, #632]	@ (800ed14 <gc_execute_block+0x1ce4>)
 800ea9c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800eaa0:	6849      	ldr	r1, [r1, #4]
 800eaa2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800eaa6:	6011      	str	r1, [r2, #0]
 800eaa8:	e02d      	b.n	800eb06 <gc_execute_block+0x1ad6>
                                    grbl.tool_table.tool[p_value].offset[idx] = gc_state.position[idx] - gc_state.modal.coord_system.xyz[idx] - gc_state.g92_coord_offset[idx] - gc_block.values.xyz[idx];
 800eaaa:	4a9b      	ldr	r2, [pc, #620]	@ (800ed18 <gc_execute_block+0x1ce8>)
 800eaac:	f103 011a 	add.w	r1, r3, #26
 800eab0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800eab4:	edd1 7a00 	vldr	s15, [r1]
 800eab8:	1c99      	adds	r1, r3, #2
 800eaba:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800eabe:	ed91 7a00 	vldr	s14, [r1]
 800eac2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eac6:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 800eaca:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800eace:	ed92 7a00 	vldr	s14, [r2]
 800ead2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ead6:	f103 0120 	add.w	r1, r3, #32
 800eada:	4a8e      	ldr	r2, [pc, #568]	@ (800ed14 <gc_execute_block+0x1ce4>)
 800eadc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800eae0:	ed92 7a01 	vldr	s14, [r2, #4]
 800eae4:	4a8a      	ldr	r2, [pc, #552]	@ (800ed10 <gc_execute_block+0x1ce0>)
 800eae6:	69d2      	ldr	r2, [r2, #28]
 800eae8:	442a      	add	r2, r5
 800eaea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eaee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800eaf2:	edc2 7a00 	vstr	s15, [r2]
 800eaf6:	e006      	b.n	800eb06 <gc_execute_block+0x1ad6>
                            } else if(gc_block.values.l == 10 || gc_block.values.l == 11)
 800eaf8:	4a86      	ldr	r2, [pc, #536]	@ (800ed14 <gc_execute_block+0x1ce4>)
 800eafa:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 800eafe:	3a0a      	subs	r2, #10
 800eb00:	b2d2      	uxtb	r2, r2
 800eb02:	2a01      	cmp	r2, #1
 800eb04:	d925      	bls.n	800eb52 <gc_execute_block+0x1b22>
                        } while(idx);
 800eb06:	b38b      	cbz	r3, 800eb6c <gc_execute_block+0x1b3c>
                            if(bit_istrue(axis_words.mask, bit(--idx))) {
 800eb08:	3b01      	subs	r3, #1
 800eb0a:	fa26 f203 	lsr.w	r2, r6, r3
 800eb0e:	f012 0f01 	tst.w	r2, #1
 800eb12:	d0f1      	beq.n	800eaf8 <gc_execute_block+0x1ac8>
                                if(gc_block.values.l == 1)
 800eb14:	4a7f      	ldr	r2, [pc, #508]	@ (800ed14 <gc_execute_block+0x1ce4>)
 800eb16:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 800eb1a:	2a01      	cmp	r2, #1
 800eb1c:	d0b8      	beq.n	800ea90 <gc_execute_block+0x1a60>
                                else if(gc_block.values.l == 10)
 800eb1e:	2a0a      	cmp	r2, #10
 800eb20:	d0c3      	beq.n	800eaaa <gc_execute_block+0x1a7a>
                                else if(gc_block.values.l == 11)
 800eb22:	2a0b      	cmp	r2, #11
 800eb24:	d1ef      	bne.n	800eb06 <gc_execute_block+0x1ad6>
                                    grbl.tool_table.tool[p_value].offset[idx] = g59_3_offset[idx] - gc_block.values.xyz[idx];
 800eb26:	aa24      	add	r2, sp, #144	@ 0x90
 800eb28:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800eb2c:	ed52 7a13 	vldr	s15, [r2, #-76]	@ 0xffffffb4
 800eb30:	f103 0120 	add.w	r1, r3, #32
 800eb34:	4a77      	ldr	r2, [pc, #476]	@ (800ed14 <gc_execute_block+0x1ce4>)
 800eb36:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800eb3a:	ed92 7a01 	vldr	s14, [r2, #4]
 800eb3e:	4a74      	ldr	r2, [pc, #464]	@ (800ed10 <gc_execute_block+0x1ce0>)
 800eb40:	69d2      	ldr	r2, [r2, #28]
 800eb42:	442a      	add	r2, r5
 800eb44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eb48:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800eb4c:	edc2 7a00 	vstr	s15, [r2]
 800eb50:	e7d9      	b.n	800eb06 <gc_execute_block+0x1ad6>
                                grbl.tool_table.tool[p_value].offset[idx] = gc_state.tool_length_offset[idx];
 800eb52:	4a6f      	ldr	r2, [pc, #444]	@ (800ed10 <gc_execute_block+0x1ce0>)
 800eb54:	69d2      	ldr	r2, [r2, #28]
 800eb56:	442a      	add	r2, r5
 800eb58:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800eb5c:	496e      	ldr	r1, [pc, #440]	@ (800ed18 <gc_execute_block+0x1ce8>)
 800eb5e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800eb62:	6849      	ldr	r1, [r1, #4]
 800eb64:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800eb68:	6011      	str	r1, [r2, #0]
 800eb6a:	e7cc      	b.n	800eb06 <gc_execute_block+0x1ad6>
                        if(gc_block.values.l == 1)
 800eb6c:	4b69      	ldr	r3, [pc, #420]	@ (800ed14 <gc_execute_block+0x1ce4>)
 800eb6e:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	f000 8081 	beq.w	800ec7a <gc_execute_block+0x1c4a>
            gc_block.words.l = gc_block.words.p = Off;
 800eb78:	4b66      	ldr	r3, [pc, #408]	@ (800ed14 <gc_execute_block+0x1ce4>)
 800eb7a:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800eb7e:	f36f 0200 	bfc	r2, #0, #1
 800eb82:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800eb86:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800eb8a:	f36f 1204 	bfc	r2, #4, #1
 800eb8e:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
    if (gc_block.modal.motion == MotionMode_None) {
 800eb92:	4b60      	ldr	r3, [pc, #384]	@ (800ed14 <gc_execute_block+0x1ce4>)
 800eb94:	891d      	ldrh	r5, [r3, #8]
 800eb96:	2d50      	cmp	r5, #80	@ 0x50
 800eb98:	f000 816e 	beq.w	800ee78 <gc_execute_block+0x1e48>
    } else if (axis_command == AxisCommand_MotionMode) {
 800eb9c:	f1ba 0f02 	cmp.w	sl, #2
 800eba0:	f000 8176 	beq.w	800ee90 <gc_execute_block+0x1e60>
    if (gc_parser_flags.jog_motion) // Jogging only uses the F feed rate and XYZ value words. N is valid, but S and T are invalid.
 800eba4:	f018 0301 	ands.w	r3, r8, #1
 800eba8:	9305      	str	r3, [sp, #20]
 800ebaa:	f000 879c 	beq.w	800fae6 <gc_execute_block+0x2ab6>
        gc_block.words.n = gc_block.words.f = Off;
 800ebae:	4b59      	ldr	r3, [pc, #356]	@ (800ed14 <gc_execute_block+0x1ce4>)
 800ebb0:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800ebb4:	f36f 0241 	bfc	r2, #1, #1
 800ebb8:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800ebbc:	b2d2      	uxtb	r2, r2
 800ebbe:	f36f 1286 	bfc	r2, #6, #1
 800ebc2:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
    if (axis_command)
 800ebc6:	f1ba 0f00 	cmp.w	sl, #0
 800ebca:	d006      	beq.n	800ebda <gc_execute_block+0x1baa>
        gc_block.words.mask &= ~axis_words_mask.mask; // Remove axis words.
 800ebcc:	4a51      	ldr	r2, [pc, #324]	@ (800ed14 <gc_execute_block+0x1ce4>)
 800ebce:	f8d2 30b8 	ldr.w	r3, [r2, #184]	@ 0xb8
 800ebd2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800ebd6:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
    if (gc_block.words.mask)
 800ebda:	4b4e      	ldr	r3, [pc, #312]	@ (800ed14 <gc_execute_block+0x1ce4>)
 800ebdc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	f042 8180 	bne.w	8010ee6 <gc_execute_block+0x3eb6>
    memset(&plan_data, 0, sizeof(plan_line_data_t)); // Zero plan_data struct
 800ebe6:	2228      	movs	r2, #40	@ 0x28
 800ebe8:	2100      	movs	r1, #0
 800ebea:	a814      	add	r0, sp, #80	@ 0x50
 800ebec:	f015 fc47 	bl	802447e <memset>
    plan_data.offset_id = gc_state.offset_id;
 800ebf0:	4b49      	ldr	r3, [pc, #292]	@ (800ed18 <gc_execute_block+0x1ce8>)
 800ebf2:	f993 3082 	ldrsb.w	r3, [r3, #130]	@ 0x82
 800ebf6:	f88d 3069 	strb.w	r3, [sp, #105]	@ 0x69
    plan_data.condition.target_validated = plan_data.condition.target_valid = sys.soft_limits.mask == 0;
 800ebfa:	4b48      	ldr	r3, [pc, #288]	@ (800ed1c <gc_execute_block+0x1cec>)
 800ebfc:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800ec00:	fab3 f383 	clz	r3, r3
 800ec04:	095b      	lsrs	r3, r3, #5
 800ec06:	f89d 2065 	ldrb.w	r2, [sp, #101]	@ 0x65
 800ec0a:	f363 0241 	bfi	r2, r3, #1, #1
 800ec0e:	f88d 2065 	strb.w	r2, [sp, #101]	@ 0x65
 800ec12:	b2d2      	uxtb	r2, r2
 800ec14:	f363 0282 	bfi	r2, r3, #2, #1
 800ec18:	f88d 2065 	strb.w	r2, [sp, #101]	@ 0x65
    if (gc_parser_flags.jog_motion) {
 800ec1c:	9b05      	ldr	r3, [sp, #20]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	f000 8795 	beq.w	800fb4e <gc_execute_block+0x2b1e>
        if (command_words.mask & ~jog_groups.mask)
 800ec24:	f037 0349 	bics.w	r3, r7, #73	@ 0x49
 800ec28:	f042 8160 	bne.w	8010eec <gc_execute_block+0x3ebc>
        if (!(gc_block.non_modal_command == NonModal_AbsoluteOverride || gc_block.non_modal_command == NonModal_NoAction))
 800ec2c:	4b39      	ldr	r3, [pc, #228]	@ (800ed14 <gc_execute_block+0x1ce4>)
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	2b35      	cmp	r3, #53	@ 0x35
 800ec32:	d002      	beq.n	800ec3a <gc_execute_block+0x1c0a>
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	f042 815c 	bne.w	8010ef2 <gc_execute_block+0x3ec2>
        memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t));
 800ec3a:	4c37      	ldr	r4, [pc, #220]	@ (800ed18 <gc_execute_block+0x1ce8>)
 800ec3c:	ad15      	add	r5, sp, #84	@ 0x54
 800ec3e:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 800ec42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ec44:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        plan_data.spindle.state = gc_state.modal.spindle.state;
 800ec48:	7ea3      	ldrb	r3, [r4, #26]
 800ec4a:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
        plan_data.condition.coolant = gc_state.modal.coolant;
 800ec4e:	7e63      	ldrb	r3, [r4, #25]
 800ec50:	f88d 3066 	strb.w	r3, [sp, #102]	@ 0x66
        plan_data.condition.is_rpm_rate_adjusted = gc_state.is_rpm_rate_adjusted || (gc_state.modal.spindle.state.ccw && gc_state.spindle.hal->cap.laser);
 800ec54:	f894 307e 	ldrb.w	r3, [r4, #126]	@ 0x7e
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	f040 875d 	bne.w	800fb18 <gc_execute_block+0x2ae8>
 800ec5e:	7ea3      	ldrb	r3, [r4, #26]
 800ec60:	f013 0f02 	tst.w	r3, #2
 800ec64:	f000 876f 	beq.w	800fb46 <gc_execute_block+0x2b16>
 800ec68:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800ec6a:	7a9b      	ldrb	r3, [r3, #10]
 800ec6c:	f013 0f08 	tst.w	r3, #8
 800ec70:	f040 876b 	bne.w	800fb4a <gc_execute_block+0x2b1a>
 800ec74:	2300      	movs	r3, #0
 800ec76:	f000 bf50 	b.w	800fb1a <gc_execute_block+0x2aea>
                            grbl.tool_table.write(&grbl.tool_table.tool[p_value]);
 800ec7a:	4b25      	ldr	r3, [pc, #148]	@ (800ed10 <gc_execute_block+0x1ce0>)
 800ec7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ec7e:	69d8      	ldr	r0, [r3, #28]
 800ec80:	4428      	add	r0, r5
 800ec82:	4790      	blx	r2
 800ec84:	e778      	b.n	800eb78 <gc_execute_block+0x1b48>
                           FAIL(Status_GcodeIllegalToolTableEntry); // [Greater than max allowed tool number]
 800ec86:	2426      	movs	r4, #38	@ 0x26
 800ec88:	f7fe baaf 	b.w	800d1ea <gc_execute_block+0x1ba>
 800ec8c:	2426      	movs	r4, #38	@ 0x26
 800ec8e:	f7fe baac 	b.w	800d1ea <gc_execute_block+0x1ba>
            if (!axis_words.mask)
 800ec92:	fa5f f08b 	uxtb.w	r0, fp
 800ec96:	2800      	cmp	r0, #0
 800ec98:	f002 8092 	beq.w	8010dc0 <gc_execute_block+0x3d90>
            idx = N_AXIS;
 800ec9c:	2303      	movs	r3, #3
 800ec9e:	e00e      	b.n	800ecbe <gc_execute_block+0x1c8e>
                    gc_block.values.xyz[idx] = gc_state.g92_coord_offset[idx];
 800eca0:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 800eca4:	4a1c      	ldr	r2, [pc, #112]	@ (800ed18 <gc_execute_block+0x1ce8>)
 800eca6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ecaa:	6814      	ldr	r4, [r2, #0]
 800ecac:	f103 0120 	add.w	r1, r3, #32
 800ecb0:	4a18      	ldr	r2, [pc, #96]	@ (800ed14 <gc_execute_block+0x1ce4>)
 800ecb2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ecb6:	6054      	str	r4, [r2, #4]
            } while(idx);
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	f43f af6a 	beq.w	800eb92 <gc_execute_block+0x1b62>
                if (bit_istrue(axis_words.mask, bit(--idx))) {
 800ecbe:	3b01      	subs	r3, #1
 800ecc0:	fa20 f203 	lsr.w	r2, r0, r3
 800ecc4:	f012 0f01 	tst.w	r2, #1
 800ecc8:	d0ea      	beq.n	800eca0 <gc_execute_block+0x1c70>
                    gc_block.values.xyz[idx] = gc_state.position[idx] - gc_block.modal.coord_system.xyz[idx] - gc_block.values.xyz[idx] - gc_state.tool_length_offset[idx];
 800ecca:	4913      	ldr	r1, [pc, #76]	@ (800ed18 <gc_execute_block+0x1ce8>)
 800eccc:	f103 021a 	add.w	r2, r3, #26
 800ecd0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ecd4:	edd2 7a00 	vldr	s15, [r2]
 800ecd8:	4a0e      	ldr	r2, [pc, #56]	@ (800ed14 <gc_execute_block+0x1ce4>)
 800ecda:	1d1c      	adds	r4, r3, #4
 800ecdc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ece0:	ed94 7a00 	vldr	s14, [r4]
 800ece4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ece8:	f103 0420 	add.w	r4, r3, #32
 800ecec:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800ecf0:	ed92 7a01 	vldr	s14, [r2, #4]
 800ecf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ecf8:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 800ecfc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ed00:	ed91 7a01 	vldr	s14, [r1, #4]
 800ed04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed08:	edc2 7a01 	vstr	s15, [r2, #4]
 800ed0c:	e7d4      	b.n	800ecb8 <gc_execute_block+0x1c88>
 800ed0e:	bf00      	nop
 800ed10:	20001394 	.word	0x20001394
 800ed14:	20000ddc 	.word	0x20000ddc
 800ed18:	20000ee4 	.word	0x20000ee4
 800ed1c:	2000148c 	.word	0x2000148c
                    else if(gc_block.non_modal_command != NonModal_AbsoluteOverride) {
 800ed20:	2b35      	cmp	r3, #53	@ 0x35
 800ed22:	d014      	beq.n	800ed4e <gc_execute_block+0x1d1e>
                        if(gc_block.modal.distance_incremental)
 800ed24:	49b2      	ldr	r1, [pc, #712]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800ed26:	7b09      	ldrb	r1, [r1, #12]
 800ed28:	b329      	cbz	r1, 800ed76 <gc_execute_block+0x1d46>
                            gc_block.values.xyz[idx] += gc_state.position[idx];
 800ed2a:	f102 0020 	add.w	r0, r2, #32
 800ed2e:	49b0      	ldr	r1, [pc, #704]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800ed30:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ed34:	edd1 7a01 	vldr	s15, [r1, #4]
 800ed38:	f102 051a 	add.w	r5, r2, #26
 800ed3c:	48ad      	ldr	r0, [pc, #692]	@ (800eff4 <gc_execute_block+0x1fc4>)
 800ed3e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800ed42:	ed90 7a00 	vldr	s14, [r0]
 800ed46:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed4a:	edc1 7a01 	vstr	s15, [r1, #4]
                } while(idx);
 800ed4e:	b3a2      	cbz	r2, 800edba <gc_execute_block+0x1d8a>
                    if(bit_isfalse(axis_words.mask, bit(--idx)))
 800ed50:	3a01      	subs	r2, #1
 800ed52:	fa24 f102 	lsr.w	r1, r4, r2
 800ed56:	f011 0f01 	tst.w	r1, #1
 800ed5a:	d1e1      	bne.n	800ed20 <gc_execute_block+0x1cf0>
                        gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 800ed5c:	f102 001a 	add.w	r0, r2, #26
 800ed60:	49a4      	ldr	r1, [pc, #656]	@ (800eff4 <gc_execute_block+0x1fc4>)
 800ed62:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ed66:	680d      	ldr	r5, [r1, #0]
 800ed68:	f102 0020 	add.w	r0, r2, #32
 800ed6c:	49a0      	ldr	r1, [pc, #640]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800ed6e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ed72:	604d      	str	r5, [r1, #4]
 800ed74:	e7eb      	b.n	800ed4e <gc_execute_block+0x1d1e>
    return gc_block->modal.coord_system.xyz[idx] + gc_state.g92_coord_offset[idx] + gc_state.tool_length_offset[idx];
 800ed76:	499e      	ldr	r1, [pc, #632]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800ed78:	1d10      	adds	r0, r2, #4
 800ed7a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800ed7e:	ed90 7a00 	vldr	s14, [r0]
 800ed82:	489c      	ldr	r0, [pc, #624]	@ (800eff4 <gc_execute_block+0x1fc4>)
 800ed84:	f102 052e 	add.w	r5, r2, #46	@ 0x2e
 800ed88:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800ed8c:	edd5 7a00 	vldr	s15, [r5]
 800ed90:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed94:	f102 0530 	add.w	r5, r2, #48	@ 0x30
 800ed98:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800ed9c:	ed90 7a01 	vldr	s14, [r0, #4]
 800eda0:	ee37 7a27 	vadd.f32	s14, s14, s15
                            gc_block.values.xyz[idx] += gc_get_block_offset(&gc_block, idx);
 800eda4:	f102 0020 	add.w	r0, r2, #32
 800eda8:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800edac:	edd1 7a01 	vldr	s15, [r1, #4]
 800edb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800edb4:	edc1 7a01 	vstr	s15, [r1, #4]
 800edb8:	e7c9      	b.n	800ed4e <gc_execute_block+0x1d1e>
            switch (gc_block.non_modal_command) {
 800edba:	2b35      	cmp	r3, #53	@ 0x35
 800edbc:	d052      	beq.n	800ee64 <gc_execute_block+0x1e34>
 800edbe:	d811      	bhi.n	800ede4 <gc_execute_block+0x1db4>
 800edc0:	2b1c      	cmp	r3, #28
 800edc2:	d002      	beq.n	800edca <gc_execute_block+0x1d9a>
 800edc4:	2b1e      	cmp	r3, #30
 800edc6:	f47f aee4 	bne.w	800eb92 <gc_execute_block+0x1b62>
                    if (!settings_read_coord_data(gc_block.non_modal_command == NonModal_GoHome_0 ? CoordinateSystem_G28 : CoordinateSystem_G30, &gc_block.values.coord_data.xyz))
 800edca:	2b1c      	cmp	r3, #28
 800edcc:	d032      	beq.n	800ee34 <gc_execute_block+0x1e04>
 800edce:	200a      	movs	r0, #10
 800edd0:	4989      	ldr	r1, [pc, #548]	@ (800eff8 <gc_execute_block+0x1fc8>)
 800edd2:	f00e f83d 	bl	801ce50 <settings_read_coord_data>
 800edd6:	2800      	cmp	r0, #0
 800edd8:	f001 87f5 	beq.w	8010dc6 <gc_execute_block+0x3d96>
                    if (axis_words.mask) {
 800eddc:	2c00      	cmp	r4, #0
 800edde:	d049      	beq.n	800ee74 <gc_execute_block+0x1e44>
                        idx = N_AXIS;
 800ede0:	2303      	movs	r3, #3
 800ede2:	e02c      	b.n	800ee3e <gc_execute_block+0x1e0e>
 800ede4:	2b41      	cmp	r3, #65	@ 0x41
 800ede6:	f47f aed4 	bne.w	800eb92 <gc_execute_block+0x1b62>
                    if(!gc_block.words.p)
 800edea:	4b81      	ldr	r3, [pc, #516]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800edec:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800edf0:	f013 0f01 	tst.w	r3, #1
 800edf4:	f001 87ea 	beq.w	8010dcc <gc_execute_block+0x3d9c>
                    if(gc_block.values.p > 65535.0f)
 800edf8:	4b7d      	ldr	r3, [pc, #500]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800edfa:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800edfe:	eddf 7a7f 	vldr	s15, [pc, #508]	@ 800effc <gc_execute_block+0x1fcc>
 800ee02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ee06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee0a:	f301 87e2 	bgt.w	8010dd2 <gc_execute_block+0x3da2>
                    if(!ngc_call_push(&gc_state + ngc_call_level()))
 800ee0e:	f005 ffcd 	bl	8014dac <ngc_call_level>
 800ee12:	22d4      	movs	r2, #212	@ 0xd4
 800ee14:	4b77      	ldr	r3, [pc, #476]	@ (800eff4 <gc_execute_block+0x1fc4>)
 800ee16:	fb02 3000 	mla	r0, r2, r0, r3
 800ee1a:	f005 ffad 	bl	8014d78 <ngc_call_push>
 800ee1e:	2800      	cmp	r0, #0
 800ee20:	f001 87da 	beq.w	8010dd8 <gc_execute_block+0x3da8>
                    gc_block.words.p = Off;
 800ee24:	4b72      	ldr	r3, [pc, #456]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800ee26:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800ee2a:	f36f 0200 	bfc	r2, #0, #1
 800ee2e:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                    break;
 800ee32:	e6ae      	b.n	800eb92 <gc_execute_block+0x1b62>
                    if (!settings_read_coord_data(gc_block.non_modal_command == NonModal_GoHome_0 ? CoordinateSystem_G28 : CoordinateSystem_G30, &gc_block.values.coord_data.xyz))
 800ee34:	2009      	movs	r0, #9
 800ee36:	e7cb      	b.n	800edd0 <gc_execute_block+0x1da0>
                        } while(idx);
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	f43f aeaa 	beq.w	800eb92 <gc_execute_block+0x1b62>
                            if (bit_isfalse(axis_words.mask, bit(--idx)))
 800ee3e:	3b01      	subs	r3, #1
 800ee40:	fa24 f203 	lsr.w	r2, r4, r3
 800ee44:	f012 0f01 	tst.w	r2, #1
 800ee48:	d1f6      	bne.n	800ee38 <gc_execute_block+0x1e08>
                                gc_block.values.coord_data.xyz[idx] = gc_state.position[idx];
 800ee4a:	f103 011a 	add.w	r1, r3, #26
 800ee4e:	4a69      	ldr	r2, [pc, #420]	@ (800eff4 <gc_execute_block+0x1fc4>)
 800ee50:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ee54:	6810      	ldr	r0, [r2, #0]
 800ee56:	f103 0122 	add.w	r1, r3, #34	@ 0x22
 800ee5a:	4a65      	ldr	r2, [pc, #404]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800ee5c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ee60:	6090      	str	r0, [r2, #8]
 800ee62:	e7e9      	b.n	800ee38 <gc_execute_block+0x1e08>
                    if (!(gc_block.modal.motion == MotionMode_Seek || gc_block.modal.motion == MotionMode_Linear))
 800ee64:	4b62      	ldr	r3, [pc, #392]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800ee66:	891b      	ldrh	r3, [r3, #8]
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	f67f ae92 	bls.w	800eb92 <gc_execute_block+0x1b62>
                        FAIL(Status_GcodeG53InvalidMotionMode); // [G53 G0/1 not active]
 800ee6e:	241e      	movs	r4, #30
 800ee70:	f7fe b9bb 	b.w	800d1ea <gc_execute_block+0x1ba>
                        axis_command = AxisCommand_None; // Set to none if no intermediate motion.
 800ee74:	46a2      	mov	sl, r4
 800ee76:	e68c      	b.n	800eb92 <gc_execute_block+0x1b62>
        if (axis_words.mask && axis_command != AxisCommand_NonModal) // [No axis words allowed]
 800ee78:	fa5f f38b 	uxtb.w	r3, fp
 800ee7c:	b11b      	cbz	r3, 800ee86 <gc_execute_block+0x1e56>
 800ee7e:	f1ba 0f01 	cmp.w	sl, #1
 800ee82:	f041 87ac 	bne.w	8010dde <gc_execute_block+0x3dae>
        gc_block.modal.retract_mode = CCRetractMode_Previous;
 800ee86:	4b5a      	ldr	r3, [pc, #360]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800ee88:	2200      	movs	r2, #0
 800ee8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800ee8e:	e689      	b.n	800eba4 <gc_execute_block+0x1b74>
        gc_parser_flags.motion_mode_changed = gc_block.modal.motion != gc_state.modal.motion;
 800ee90:	4b58      	ldr	r3, [pc, #352]	@ (800eff4 <gc_execute_block+0x1fc4>)
 800ee92:	8819      	ldrh	r1, [r3, #0]
 800ee94:	1a6b      	subs	r3, r5, r1
 800ee96:	bf18      	it	ne
 800ee98:	2301      	movne	r3, #1
 800ee9a:	f363 2849 	bfi	r8, r3, #9, #1
        if (gc_block.modal.motion == MotionMode_Seek) {
 800ee9e:	b935      	cbnz	r5, 800eeae <gc_execute_block+0x1e7e>
            if (!axis_words.mask)
 800eea0:	fa5f f38b 	uxtb.w	r3, fp
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	f47f ae7d 	bne.w	800eba4 <gc_execute_block+0x1b74>
                axis_command = AxisCommand_None;
 800eeaa:	469a      	mov	sl, r3
 800eeac:	e67a      	b.n	800eba4 <gc_execute_block+0x1b74>
            if(!gc_block.modal.canned_cycle_active)
 800eeae:	4b50      	ldr	r3, [pc, #320]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800eeb0:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800eeb4:	930a      	str	r3, [sp, #40]	@ 0x28
 800eeb6:	b91b      	cbnz	r3, 800eec0 <gc_execute_block+0x1e90>
                gc_block.modal.retract_mode = CCRetractMode_Previous;
 800eeb8:	4b4d      	ldr	r3, [pc, #308]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800eeba:	2200      	movs	r2, #0
 800eebc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            if(gc_block.modal.spindle.rpm_mode == SpindleSpeedMode_CSS && (!gc_block.modal.spindle.state.on || gc_block.values.s == 0.0f))
 800eec0:	4b4b      	ldr	r3, [pc, #300]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800eec2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800eec6:	2b01      	cmp	r3, #1
 800eec8:	d06e      	beq.n	800efa8 <gc_execute_block+0x1f78>
            if (gc_block.modal.motion == MotionMode_SpindleSynchronized) {
 800eeca:	2d21      	cmp	r5, #33	@ 0x21
 800eecc:	d07e      	beq.n	800efcc <gc_execute_block+0x1f9c>
            } else if (gc_block.modal.motion == MotionMode_Threading) {
 800eece:	2d4c      	cmp	r5, #76	@ 0x4c
 800eed0:	f000 8098 	beq.w	800f004 <gc_execute_block+0x1fd4>
            } else if (gc_block.values.f == 0.0f)
 800eed4:	4b46      	ldr	r3, [pc, #280]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800eed6:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800eeda:	eef5 7a40 	vcmp.f32	s15, #0.0
 800eede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eee2:	f001 87b8 	beq.w	8010e56 <gc_execute_block+0x3e26>
            if (gc_block.modal.canned_cycle_active) {
 800eee6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	f000 832c 	beq.w	800f546 <gc_execute_block+0x2516>
                if(gc_parser_flags.canned_cycle_change) {
 800eeee:	f018 0102 	ands.w	r1, r8, #2
 800eef2:	d029      	beq.n	800ef48 <gc_execute_block+0x1f18>
                    if(gc_state.modal.feed_mode == FeedMode_InverseTime)
 800eef4:	4b3f      	ldr	r3, [pc, #252]	@ (800eff4 <gc_execute_block+0x1fc4>)
 800eef6:	789b      	ldrb	r3, [r3, #2]
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	f001 87af 	beq.w	8010e5c <gc_execute_block+0x3e2c>
                    if(!gc_block.words.r)
 800eefe:	4b3c      	ldr	r3, [pc, #240]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800ef00:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800ef04:	f013 0f04 	tst.w	r3, #4
 800ef08:	f001 87ab 	beq.w	8010e62 <gc_execute_block+0x3e32>
                    if(!(axis_words.mask & bit(plane.axis_linear)))
 800ef0c:	fa5f f38b 	uxtb.w	r3, fp
 800ef10:	f89d 208a 	ldrb.w	r2, [sp, #138]	@ 0x8a
 800ef14:	40d3      	lsrs	r3, r2
 800ef16:	f013 0f01 	tst.w	r3, #1
 800ef1a:	f001 87a5 	beq.w	8010e68 <gc_execute_block+0x3e38>
                    gc_state.canned.dwell = 0.0f;
 800ef1e:	4b35      	ldr	r3, [pc, #212]	@ (800eff4 <gc_execute_block+0x1fc4>)
 800ef20:	2000      	movs	r0, #0
 800ef22:	6458      	str	r0, [r3, #68]	@ 0x44
                    gc_state.canned.xyz[plane.axis_0] = 0.0f;
 800ef24:	f89d 2088 	ldrb.w	r2, [sp, #136]	@ 0x88
 800ef28:	320c      	adds	r2, #12
 800ef2a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ef2e:	6050      	str	r0, [r2, #4]
                    gc_state.canned.xyz[plane.axis_1] = 0.0f;
 800ef30:	f89d 2089 	ldrb.w	r2, [sp, #137]	@ 0x89
 800ef34:	320c      	adds	r2, #12
 800ef36:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ef3a:	6050      	str	r0, [r2, #4]
                    gc_state.canned.rapid_retract = On;
 800ef3c:	2201      	movs	r2, #1
 800ef3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                    gc_state.canned.spindle_off = Off;
 800ef42:	2200      	movs	r2, #0
 800ef44:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
                if(!gc_block.words.l)
 800ef48:	4b29      	ldr	r3, [pc, #164]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800ef4a:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800ef4e:	f013 0f10 	tst.w	r3, #16
 800ef52:	f040 81eb 	bne.w	800f32c <gc_execute_block+0x22fc>
                    gc_block.values.l = 1;
 800ef56:	4b26      	ldr	r3, [pc, #152]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800ef58:	2201      	movs	r2, #1
 800ef5a:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                if(gc_block.words.r)
 800ef5e:	4b24      	ldr	r3, [pc, #144]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800ef60:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800ef64:	f013 0f04 	tst.w	r3, #4
 800ef68:	d01c      	beq.n	800efa4 <gc_execute_block+0x1f74>
                    gc_state.canned.retract_position = gc_block.values.r * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f) +
 800ef6a:	4b21      	ldr	r3, [pc, #132]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800ef6c:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800ef70:	7adb      	ldrb	r3, [r3, #11]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	f000 81e3 	beq.w	800f33e <gc_execute_block+0x230e>
 800ef78:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800f000 <gc_execute_block+0x1fd0>
 800ef7c:	ee27 7a87 	vmul.f32	s14, s15, s14
                                                        (gc_block.modal.distance_incremental
 800ef80:	4b1b      	ldr	r3, [pc, #108]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800ef82:	7b1b      	ldrb	r3, [r3, #12]
                                                          : gc_get_block_offset(&gc_block, plane.axis_linear));
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	f000 81dd 	beq.w	800f344 <gc_execute_block+0x2314>
                                                          ? gc_state.position[plane.axis_linear]
 800ef8a:	f89d 208a 	ldrb.w	r2, [sp, #138]	@ 0x8a
                                                          : gc_get_block_offset(&gc_block, plane.axis_linear));
 800ef8e:	321a      	adds	r2, #26
 800ef90:	4b18      	ldr	r3, [pc, #96]	@ (800eff4 <gc_execute_block+0x1fc4>)
 800ef92:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ef96:	edd3 7a00 	vldr	s15, [r3]
                    gc_state.canned.retract_position = gc_block.values.r * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f) +
 800ef9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef9e:	4b15      	ldr	r3, [pc, #84]	@ (800eff4 <gc_execute_block+0x1fc4>)
 800efa0:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
 800efa4:	2303      	movs	r3, #3
 800efa6:	e1fd      	b.n	800f3a4 <gc_execute_block+0x2374>
            if(gc_block.modal.spindle.rpm_mode == SpindleSpeedMode_CSS && (!gc_block.modal.spindle.state.on || gc_block.values.s == 0.0f))
 800efa8:	4b11      	ldr	r3, [pc, #68]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800efaa:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800efae:	f013 0f01 	tst.w	r3, #1
 800efb2:	f001 8717 	beq.w	8010de4 <gc_execute_block+0x3db4>
 800efb6:	4b0e      	ldr	r3, [pc, #56]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800efb8:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800efbc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800efc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efc4:	d181      	bne.n	800eeca <gc_execute_block+0x1e9a>
                 FAIL(Status_GcodeSpindleNotRunning);
 800efc6:	2429      	movs	r4, #41	@ 0x29
 800efc8:	f7fe b90f 	b.w	800d1ea <gc_execute_block+0x1ba>
                if(!gc_state.spindle.hal->get_data)
 800efcc:	4b09      	ldr	r3, [pc, #36]	@ (800eff4 <gc_execute_block+0x1fc4>)
 800efce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800efd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	f001 8709 	beq.w	8010dea <gc_execute_block+0x3dba>
                if(gc_block.values.k == 0.0f)
 800efd8:	4b05      	ldr	r3, [pc, #20]	@ (800eff0 <gc_execute_block+0x1fc0>)
 800efda:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800efde:	eef5 7a40 	vcmp.f32	s15, #0.0
 800efe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efe6:	f001 8703 	beq.w	8010df0 <gc_execute_block+0x3dc0>
                gc_parser_flags.spindle_force_sync = On;
 800efea:	f048 0820 	orr.w	r8, r8, #32
 800efee:	e77a      	b.n	800eee6 <gc_execute_block+0x1eb6>
 800eff0:	20000ddc 	.word	0x20000ddc
 800eff4:	20000ee4 	.word	0x20000ee4
 800eff8:	20000e6c 	.word	0x20000e6c
 800effc:	477fff00 	.word	0x477fff00
 800f000:	41cb3333 	.word	0x41cb3333
                if(!gc_state.spindle.hal->get_data)
 800f004:	4baf      	ldr	r3, [pc, #700]	@ (800f2c4 <gc_execute_block+0x2294>)
 800f006:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f008:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	f001 86f3 	beq.w	8010df6 <gc_execute_block+0x3dc6>
                if(gc_block.modal.plane_select != PlaneSelect_ZX)
 800f010:	4bad      	ldr	r3, [pc, #692]	@ (800f2c8 <gc_execute_block+0x2298>)
 800f012:	7b9b      	ldrb	r3, [r3, #14]
 800f014:	2b01      	cmp	r3, #1
 800f016:	f041 86f1 	bne.w	8010dfc <gc_execute_block+0x3dcc>
                if(axis_words.mask & ~(bit(X_AXIS)|bit(Z_AXIS)))
 800f01a:	fa5f f48b 	uxtb.w	r4, fp
 800f01e:	f01b 0ffa 	tst.w	fp, #250	@ 0xfa
 800f022:	f041 86ee 	bne.w	8010e02 <gc_execute_block+0x3dd2>
                if(gc_block.words.r && gc_block.values.r < 1.0f)
 800f026:	4ba8      	ldr	r3, [pc, #672]	@ (800f2c8 <gc_execute_block+0x2298>)
 800f028:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f02c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f02e:	f013 0304 	ands.w	r3, r3, #4
 800f032:	930c      	str	r3, [sp, #48]	@ 0x30
 800f034:	d00a      	beq.n	800f04c <gc_execute_block+0x201c>
 800f036:	4ba4      	ldr	r3, [pc, #656]	@ (800f2c8 <gc_execute_block+0x2298>)
 800f038:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 800f03c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f040:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f048:	f101 86de 	bmi.w	8010e08 <gc_execute_block+0x3dd8>
                if(!axis_words.z || !(gc_block.words.i || gc_block.words.j || gc_block.words.k || gc_block.words.p))
 800f04c:	f014 0f04 	tst.w	r4, #4
 800f050:	f001 86dd 	beq.w	8010e0e <gc_execute_block+0x3dde>
 800f054:	4b9c      	ldr	r3, [pc, #624]	@ (800f2c8 <gc_execute_block+0x2298>)
 800f056:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 800f05a:	4b9c      	ldr	r3, [pc, #624]	@ (800f2cc <gc_execute_block+0x229c>)
 800f05c:	4003      	ands	r3, r0
 800f05e:	2b00      	cmp	r3, #0
 800f060:	f001 86d8 	beq.w	8010e14 <gc_execute_block+0x3de4>
                if(gc_block.values.p < 0.0f || gc_block.values.ijk[J_VALUE] < 0.0f || gc_block.values.ijk[K_VALUE] < 0.0f)
 800f064:	4b98      	ldr	r3, [pc, #608]	@ (800f2c8 <gc_execute_block+0x2298>)
 800f066:	ed93 aa17 	vldr	s20, [r3, #92]	@ 0x5c
 800f06a:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 800f06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f072:	f101 86d2 	bmi.w	8010e1a <gc_execute_block+0x3dea>
 800f076:	ed93 9a13 	vldr	s18, [r3, #76]	@ 0x4c
 800f07a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800f07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f082:	f101 86cd 	bmi.w	8010e20 <gc_execute_block+0x3df0>
 800f086:	edd3 9a14 	vldr	s19, [r3, #80]	@ 0x50
 800f08a:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 800f08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f092:	f101 86c8 	bmi.w	8010e26 <gc_execute_block+0x3df6>
                if(gc_block.values.ijk[I_VALUE] == 0.0f ||
 800f096:	edd3 8a12 	vldr	s17, [r3, #72]	@ 0x48
 800f09a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a2:	f001 86c3 	beq.w	8010e2c <gc_execute_block+0x3dfc>
 800f0a6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ae:	f001 86c0 	beq.w	8010e32 <gc_execute_block+0x3e02>
                    gc_block.values.ijk[J_VALUE] == 0.0f ||
 800f0b2:	eeb4 9ae9 	vcmpe.f32	s18, s19
 800f0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ba:	f281 86bd 	bge.w	8010e38 <gc_execute_block+0x3e08>
                      (gc_block.words.l && (gc_taper_type)gc_block.values.l > Taper_Both))
 800f0be:	f893 60b9 	ldrb.w	r6, [r3, #185]	@ 0xb9
                     gc_block.values.ijk[K_VALUE] <= gc_block.values.ijk[J_VALUE] ||
 800f0c2:	f016 0310 	ands.w	r3, r6, #16
 800f0c6:	930d      	str	r3, [sp, #52]	@ 0x34
 800f0c8:	d005      	beq.n	800f0d6 <gc_execute_block+0x20a6>
                      (gc_block.words.l && (gc_taper_type)gc_block.values.l > Taper_Both))
 800f0ca:	4b7f      	ldr	r3, [pc, #508]	@ (800f2c8 <gc_execute_block+0x2298>)
 800f0cc:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800f0d0:	2b03      	cmp	r3, #3
 800f0d2:	f201 86b4 	bhi.w	8010e3e <gc_execute_block+0x3e0e>
                if(gc_state.spindle.rpm < gc_state.spindle.hal->rpm_min || gc_state.spindle.rpm > gc_state.spindle.hal->rpm_max)
 800f0d6:	4b7b      	ldr	r3, [pc, #492]	@ (800f2c4 <gc_execute_block+0x2294>)
 800f0d8:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800f0dc:	ed92 7a05 	vldr	s14, [r2, #20]
 800f0e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0e8:	f101 86ac 	bmi.w	8010e44 <gc_execute_block+0x3e14>
 800f0ec:	ed92 7a06 	vldr	s14, [r2, #24]
 800f0f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0f8:	f301 86a7 	bgt.w	8010e4a <gc_execute_block+0x3e1a>
                if(gc_block.modal.motion != gc_state.modal.motion) {
 800f0fc:	428d      	cmp	r5, r1
 800f0fe:	f040 80d4 	bne.w	800f2aa <gc_execute_block+0x227a>
                thread.pitch = gc_block.values.p;
 800f102:	4b73      	ldr	r3, [pc, #460]	@ (800f2d0 <gc_execute_block+0x22a0>)
 800f104:	ed83 aa00 	vstr	s20, [r3]
                thread.z_final = gc_block.values.xyz[Z_AXIS];
 800f108:	4a6f      	ldr	r2, [pc, #444]	@ (800f2c8 <gc_execute_block+0x2298>)
 800f10a:	ed92 8a23 	vldr	s16, [r2, #140]	@ 0x8c
 800f10e:	ed83 8a01 	vstr	s16, [r3, #4]
                thread.cut_direction = gc_block.values.ijk[I_VALUE] < 0.0f ? -1.0f : 1.0f;
 800f112:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800f116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f11a:	f100 80d0 	bmi.w	800f2be <gc_execute_block+0x228e>
 800f11e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800f122:	4b6b      	ldr	r3, [pc, #428]	@ (800f2d0 <gc_execute_block+0x22a0>)
 800f124:	625a      	str	r2, [r3, #36]	@ 0x24
                thread.peak = fabsf(gc_block.values.ijk[I_VALUE]);
 800f126:	eef0 8ae8 	vabs.f32	s17, s17
 800f12a:	edc3 8a02 	vstr	s17, [r3, #8]
                thread.initial_depth = gc_block.values.ijk[J_VALUE];
 800f12e:	ed83 9a03 	vstr	s18, [r3, #12]
                thread.depth = gc_block.values.ijk[K_VALUE];
 800f132:	edc3 9a04 	vstr	s19, [r3, #16]
                if(gc_block.modal.units_imperial) {
 800f136:	4b64      	ldr	r3, [pc, #400]	@ (800f2c8 <gc_execute_block+0x2298>)
 800f138:	7adb      	ldrb	r3, [r3, #11]
 800f13a:	b173      	cbz	r3, 800f15a <gc_execute_block+0x212a>
                    thread.peak *= MM_PER_INCH;
 800f13c:	4b64      	ldr	r3, [pc, #400]	@ (800f2d0 <gc_execute_block+0x22a0>)
 800f13e:	eddf 7a65 	vldr	s15, [pc, #404]	@ 800f2d4 <gc_execute_block+0x22a4>
 800f142:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f146:	edc3 8a02 	vstr	s17, [r3, #8]
                    thread.initial_depth *= MM_PER_INCH;
 800f14a:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f14e:	ed83 9a03 	vstr	s18, [r3, #12]
                    thread.depth *= MM_PER_INCH;
 800f152:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800f156:	edc3 9a04 	vstr	s19, [r3, #16]
                if(gc_block.modal.diameter_mode) {
 800f15a:	4b5b      	ldr	r3, [pc, #364]	@ (800f2c8 <gc_execute_block+0x2298>)
 800f15c:	7b5b      	ldrb	r3, [r3, #13]
 800f15e:	b1a3      	cbz	r3, 800f18a <gc_execute_block+0x215a>
                    thread.peak /= 2.0f;
 800f160:	4b5b      	ldr	r3, [pc, #364]	@ (800f2d0 <gc_execute_block+0x22a0>)
 800f162:	edd3 7a02 	vldr	s15, [r3, #8]
 800f166:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f16a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f16e:	edc3 7a02 	vstr	s15, [r3, #8]
                    thread.initial_depth /= 2.0f;
 800f172:	edd3 7a03 	vldr	s15, [r3, #12]
 800f176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f17a:	edc3 7a03 	vstr	s15, [r3, #12]
                    thread.depth /= 2.0f;
 800f17e:	edd3 7a04 	vldr	s15, [r3, #16]
 800f182:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f186:	edc3 7a04 	vstr	s15, [r3, #16]
                if(axis_words.x) {
 800f18a:	f014 0f01 	tst.w	r4, #1
 800f18e:	f040 80a5 	bne.w	800f2dc <gc_execute_block+0x22ac>
                if(gc_block.words.h)
 800f192:	f016 0f08 	tst.w	r6, #8
 800f196:	d004      	beq.n	800f1a2 <gc_execute_block+0x2172>
                    thread.spring_passes = (uint_fast16_t)gc_block.values.h;
 800f198:	4b4b      	ldr	r3, [pc, #300]	@ (800f2c8 <gc_execute_block+0x2298>)
 800f19a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800f19e:	4b4c      	ldr	r3, [pc, #304]	@ (800f2d0 <gc_execute_block+0x22a0>)
 800f1a0:	629a      	str	r2, [r3, #40]	@ 0x28
                if(gc_block.words.l)
 800f1a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f1a4:	b12b      	cbz	r3, 800f1b2 <gc_execute_block+0x2182>
                    thread.end_taper_type = (gc_taper_type)gc_block.values.l;
 800f1a6:	4b48      	ldr	r3, [pc, #288]	@ (800f2c8 <gc_execute_block+0x2298>)
 800f1a8:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 800f1ac:	4b48      	ldr	r3, [pc, #288]	@ (800f2d0 <gc_execute_block+0x22a0>)
 800f1ae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                if(gc_block.words.e)
 800f1b2:	f016 0f01 	tst.w	r6, #1
 800f1b6:	d003      	beq.n	800f1c0 <gc_execute_block+0x2190>
                    thread.end_taper_length = gc_block.values.e;
 800f1b8:	4b43      	ldr	r3, [pc, #268]	@ (800f2c8 <gc_execute_block+0x2298>)
 800f1ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f1bc:	4b44      	ldr	r3, [pc, #272]	@ (800f2d0 <gc_execute_block+0x22a0>)
 800f1be:	61da      	str	r2, [r3, #28]
                if(thread.end_taper_length <= 0.0f || thread.end_taper_type == Taper_None) {
 800f1c0:	4b43      	ldr	r3, [pc, #268]	@ (800f2d0 <gc_execute_block+0x22a0>)
 800f1c2:	edd3 7a07 	vldr	s15, [r3, #28]
 800f1c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ce:	d902      	bls.n	800f1d6 <gc_execute_block+0x21a6>
 800f1d0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f1d4:	b92b      	cbnz	r3, 800f1e2 <gc_execute_block+0x21b2>
                    thread.end_taper_length = 0.0f;
 800f1d6:	4b3e      	ldr	r3, [pc, #248]	@ (800f2d0 <gc_execute_block+0x22a0>)
 800f1d8:	2200      	movs	r2, #0
 800f1da:	61da      	str	r2, [r3, #28]
                    thread.end_taper_type = Taper_None;
 800f1dc:	2200      	movs	r2, #0
 800f1de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                if(thread.end_taper_type != Taper_None && thread.end_taper_length > abs(thread.z_final - gc_state.position[Z_AXIS]) / 2.0f)
 800f1e2:	4b3b      	ldr	r3, [pc, #236]	@ (800f2d0 <gc_execute_block+0x22a0>)
 800f1e4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f1e8:	b1e3      	cbz	r3, 800f224 <gc_execute_block+0x21f4>
 800f1ea:	4b39      	ldr	r3, [pc, #228]	@ (800f2d0 <gc_execute_block+0x22a0>)
 800f1ec:	ed93 7a07 	vldr	s14, [r3, #28]
 800f1f0:	4b34      	ldr	r3, [pc, #208]	@ (800f2c4 <gc_execute_block+0x2294>)
 800f1f2:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 800f1f6:	ee78 7a67 	vsub.f32	s15, s16, s15
 800f1fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f1fe:	ee17 3a90 	vmov	r3, s15
 800f202:	2b00      	cmp	r3, #0
 800f204:	bfb8      	it	lt
 800f206:	425b      	neglt	r3, r3
 800f208:	ee07 3a90 	vmov	s15, r3
 800f20c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f210:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800f214:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f218:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f220:	f301 8616 	bgt.w	8010e50 <gc_execute_block+0x3e20>
                if(gc_block.words.r)
 800f224:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f226:	b11b      	cbz	r3, 800f230 <gc_execute_block+0x2200>
                    thread.depth_degression = gc_block.values.r;
 800f228:	4b27      	ldr	r3, [pc, #156]	@ (800f2c8 <gc_execute_block+0x2298>)
 800f22a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f22c:	4b28      	ldr	r3, [pc, #160]	@ (800f2d0 <gc_execute_block+0x22a0>)
 800f22e:	615a      	str	r2, [r3, #20]
                if(gc_block.words.q)
 800f230:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f232:	f013 0f02 	tst.w	r3, #2
 800f236:	d003      	beq.n	800f240 <gc_execute_block+0x2210>
                    thread.infeed_angle = gc_block.values.q;
 800f238:	4b23      	ldr	r3, [pc, #140]	@ (800f2c8 <gc_execute_block+0x2298>)
 800f23a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800f23c:	4b24      	ldr	r3, [pc, #144]	@ (800f2d0 <gc_execute_block+0x22a0>)
 800f23e:	621a      	str	r2, [r3, #32]
                gc_parser_flags.spindle_force_sync = On;
 800f240:	f048 0820 	orr.w	r8, r8, #32
                gc_block.words.e = gc_block.words.h = gc_block.words.i = gc_block.words.j = gc_block.words.k = gc_block.words.l = gc_block.words.p = gc_block.words.q = gc_block.words.r = Off;
 800f244:	4b20      	ldr	r3, [pc, #128]	@ (800f2c8 <gc_execute_block+0x2298>)
 800f246:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800f24a:	f36f 0282 	bfc	r2, #2, #1
 800f24e:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800f252:	b2d2      	uxtb	r2, r2
 800f254:	f36f 0241 	bfc	r2, #1, #1
 800f258:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800f25c:	b2d2      	uxtb	r2, r2
 800f25e:	f36f 0200 	bfc	r2, #0, #1
 800f262:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800f266:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800f26a:	f36f 1204 	bfc	r2, #4, #1
 800f26e:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800f272:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800f276:	f36f 1286 	bfc	r2, #6, #1
 800f27a:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800f27e:	b2d2      	uxtb	r2, r2
 800f280:	f36f 1245 	bfc	r2, #5, #1
 800f284:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800f288:	b2d2      	uxtb	r2, r2
 800f28a:	f36f 1204 	bfc	r2, #4, #1
 800f28e:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800f292:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800f296:	f36f 02c3 	bfc	r2, #3, #1
 800f29a:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800f29e:	b2d2      	uxtb	r2, r2
 800f2a0:	f36f 0200 	bfc	r2, #0, #1
 800f2a4:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800f2a8:	e61d      	b.n	800eee6 <gc_execute_block+0x1eb6>
                    memset(&thread, 0, sizeof(gc_thread_data));
 800f2aa:	2230      	movs	r2, #48	@ 0x30
 800f2ac:	2100      	movs	r1, #0
 800f2ae:	4808      	ldr	r0, [pc, #32]	@ (800f2d0 <gc_execute_block+0x22a0>)
 800f2b0:	f015 f8e5 	bl	802447e <memset>
                    thread.depth_degression = 1.0f;
 800f2b4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800f2b8:	4a05      	ldr	r2, [pc, #20]	@ (800f2d0 <gc_execute_block+0x22a0>)
 800f2ba:	6153      	str	r3, [r2, #20]
 800f2bc:	e721      	b.n	800f102 <gc_execute_block+0x20d2>
                thread.cut_direction = gc_block.values.ijk[I_VALUE] < 0.0f ? -1.0f : 1.0f;
 800f2be:	4a06      	ldr	r2, [pc, #24]	@ (800f2d8 <gc_execute_block+0x22a8>)
 800f2c0:	e72f      	b.n	800f122 <gc_execute_block+0x20f2>
 800f2c2:	bf00      	nop
 800f2c4:	20000ee4 	.word	0x20000ee4
 800f2c8:	20000ddc 	.word	0x20000ddc
 800f2cc:	00010070 	.word	0x00010070
 800f2d0:	20000eb4 	.word	0x20000eb4
 800f2d4:	41cb3333 	.word	0x41cb3333
 800f2d8:	bf800000 	.word	0xbf800000
                    thread.main_taper_height = gc_block.values.xyz[X_AXIS] - gc_get_block_offset(&gc_block, X_AXIS);
 800f2dc:	4bb4      	ldr	r3, [pc, #720]	@ (800f5b0 <gc_execute_block+0x2580>)
 800f2de:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
    return gc_block->modal.coord_system.xyz[idx] + gc_state.g92_coord_offset[idx] + gc_state.tool_length_offset[idx];
 800f2e2:	ed93 7a04 	vldr	s14, [r3, #16]
 800f2e6:	4ab3      	ldr	r2, [pc, #716]	@ (800f5b4 <gc_execute_block+0x2584>)
 800f2e8:	edd2 6a2e 	vldr	s13, [r2, #184]	@ 0xb8
 800f2ec:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f2f0:	edd2 6a31 	vldr	s13, [r2, #196]	@ 0xc4
 800f2f4:	ee37 7a26 	vadd.f32	s14, s14, s13
                    thread.main_taper_height = gc_block.values.xyz[X_AXIS] - gc_get_block_offset(&gc_block, X_AXIS);
 800f2f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f2fc:	4cae      	ldr	r4, [pc, #696]	@ (800f5b8 <gc_execute_block+0x2588>)
 800f2fe:	edc4 7a06 	vstr	s15, [r4, #24]
                    gc_block.values.p = fabsf(thread.z_final - gc_state.position[Z_AXIS]);
 800f302:	ed92 0a1c 	vldr	s0, [r2, #112]	@ 0x70
 800f306:	ee38 0a40 	vsub.f32	s0, s16, s0
 800f30a:	eef0 8ac0 	vabs.f32	s17, s0
 800f30e:	edc3 8a17 	vstr	s17, [r3, #92]	@ 0x5c
    return sqrtf(x * x + y * y);
 800f312:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f316:	ee07 0aa7 	vmla.f32	s0, s15, s15
 800f31a:	f017 fe11 	bl	8026f40 <sqrtf>
                    thread.pitch = thread.pitch * hypot_f(thread.main_taper_height, gc_block.values.p) / gc_block.values.p;
 800f31e:	ee2a aa00 	vmul.f32	s20, s20, s0
 800f322:	eeca 7a28 	vdiv.f32	s15, s20, s17
 800f326:	edc4 7a00 	vstr	s15, [r4]
 800f32a:	e732      	b.n	800f192 <gc_execute_block+0x2162>
                else if(gc_block.values.l <= 0)
 800f32c:	4ba0      	ldr	r3, [pc, #640]	@ (800f5b0 <gc_execute_block+0x2580>)
 800f32e:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800f332:	2b00      	cmp	r3, #0
 800f334:	f47f ae13 	bne.w	800ef5e <gc_execute_block+0x1f2e>
                    FAIL(Status_NonPositiveValue); // [L <= 0]
 800f338:	2413      	movs	r4, #19
 800f33a:	f7fd bf56 	b.w	800d1ea <gc_execute_block+0x1ba>
                    gc_state.canned.retract_position = gc_block.values.r * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f) +
 800f33e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f342:	e61b      	b.n	800ef7c <gc_execute_block+0x1f4c>
                                                          : gc_get_block_offset(&gc_block, plane.axis_linear));
 800f344:	f89d 308a 	ldrb.w	r3, [sp, #138]	@ 0x8a
    return gc_block->modal.coord_system.xyz[idx] + gc_state.g92_coord_offset[idx] + gc_state.tool_length_offset[idx];
 800f348:	1d18      	adds	r0, r3, #4
 800f34a:	4a99      	ldr	r2, [pc, #612]	@ (800f5b0 <gc_execute_block+0x2580>)
 800f34c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f350:	edd2 7a00 	vldr	s15, [r2]
 800f354:	4a97      	ldr	r2, [pc, #604]	@ (800f5b4 <gc_execute_block+0x2584>)
 800f356:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 800f35a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800f35e:	edd0 6a00 	vldr	s13, [r0]
 800f362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f366:	3330      	adds	r3, #48	@ 0x30
 800f368:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f36c:	edd2 6a01 	vldr	s13, [r2, #4]
 800f370:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f374:	e611      	b.n	800ef9a <gc_execute_block+0x1f6a>
                        else if(gc_block.modal.distance_incremental)
 800f376:	4a8e      	ldr	r2, [pc, #568]	@ (800f5b0 <gc_execute_block+0x2580>)
 800f378:	7b12      	ldrb	r2, [r2, #12]
 800f37a:	b192      	cbz	r2, 800f3a2 <gc_execute_block+0x2372>
                            gc_state.canned.xyz[idx] = gc_state.canned.retract_position + (gc_state.canned.xyz[idx] - gc_state.position[idx]);
 800f37c:	4a8d      	ldr	r2, [pc, #564]	@ (800f5b4 <gc_execute_block+0x2584>)
 800f37e:	ed92 7a12 	vldr	s14, [r2, #72]	@ 0x48
 800f382:	f103 001a 	add.w	r0, r3, #26
 800f386:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800f38a:	edd0 6a00 	vldr	s13, [r0]
 800f38e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f392:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f396:	f103 000c 	add.w	r0, r3, #12
 800f39a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f39e:	edc2 7a01 	vstr	s15, [r2, #4]
                } while(idx);
 800f3a2:	b343      	cbz	r3, 800f3f6 <gc_execute_block+0x23c6>
                    if(bit_istrue(axis_words.mask, bit(--idx))) {
 800f3a4:	fa5f f28b 	uxtb.w	r2, fp
 800f3a8:	3b01      	subs	r3, #1
 800f3aa:	40da      	lsrs	r2, r3
 800f3ac:	f012 0f01 	tst.w	r2, #1
 800f3b0:	d0f7      	beq.n	800f3a2 <gc_execute_block+0x2372>
                        gc_state.canned.xyz[idx] = gc_block.values.xyz[idx];
 800f3b2:	f103 0020 	add.w	r0, r3, #32
 800f3b6:	4a7e      	ldr	r2, [pc, #504]	@ (800f5b0 <gc_execute_block+0x2580>)
 800f3b8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f3bc:	edd2 7a01 	vldr	s15, [r2, #4]
 800f3c0:	f103 000c 	add.w	r0, r3, #12
 800f3c4:	4a7b      	ldr	r2, [pc, #492]	@ (800f5b4 <gc_execute_block+0x2584>)
 800f3c6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f3ca:	edc2 7a01 	vstr	s15, [r2, #4]
                        if(idx != plane.axis_linear)
 800f3ce:	f89d 208a 	ldrb.w	r2, [sp, #138]	@ 0x8a
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d0cf      	beq.n	800f376 <gc_execute_block+0x2346>
                            gc_state.canned.xyz[idx] -= gc_state.position[idx];
 800f3d6:	4a77      	ldr	r2, [pc, #476]	@ (800f5b4 <gc_execute_block+0x2584>)
 800f3d8:	f103 001a 	add.w	r0, r3, #26
 800f3dc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800f3e0:	ed90 7a00 	vldr	s14, [r0]
 800f3e4:	f103 000c 	add.w	r0, r3, #12
 800f3e8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f3ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f3f0:	edc2 7a01 	vstr	s15, [r2, #4]
 800f3f4:	e7d5      	b.n	800f3a2 <gc_execute_block+0x2372>
                if(gc_state.canned.retract_position < gc_state.canned.xyz[plane.axis_linear])
 800f3f6:	4b6f      	ldr	r3, [pc, #444]	@ (800f5b4 <gc_execute_block+0x2584>)
 800f3f8:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800f3fc:	f89d 208a 	ldrb.w	r2, [sp, #138]	@ 0x8a
 800f400:	320c      	adds	r2, #12
 800f402:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f406:	ed93 7a01 	vldr	s14, [r3, #4]
 800f40a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f412:	f101 852c 	bmi.w	8010e6e <gc_execute_block+0x3e3e>
                gc_block.words.r = gc_block.words.l = Off; // Remove single-meaning value words.
 800f416:	4b66      	ldr	r3, [pc, #408]	@ (800f5b0 <gc_execute_block+0x2580>)
 800f418:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800f41c:	f36f 1204 	bfc	r2, #4, #1
 800f420:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800f424:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800f428:	f36f 0282 	bfc	r2, #2, #1
 800f42c:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                switch (gc_block.modal.motion) {
 800f430:	f1a5 0349 	sub.w	r3, r5, #73	@ 0x49
 800f434:	2b10      	cmp	r3, #16
 800f436:	f63f abb5 	bhi.w	800eba4 <gc_execute_block+0x1b74>
 800f43a:	a201      	add	r2, pc, #4	@ (adr r2, 800f440 <gc_execute_block+0x2410>)
 800f43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f440:	0800f4ed 	.word	0x0800f4ed
 800f444:	0800eba5 	.word	0x0800eba5
 800f448:	0800eba5 	.word	0x0800eba5
 800f44c:	0800eba5 	.word	0x0800eba5
 800f450:	0800eba5 	.word	0x0800eba5
 800f454:	0800eba5 	.word	0x0800eba5
 800f458:	0800eba5 	.word	0x0800eba5
 800f45c:	0800eba5 	.word	0x0800eba5
 800f460:	0800f4c9 	.word	0x0800f4c9
 800f464:	0800f497 	.word	0x0800f497
 800f468:	0800f4ed 	.word	0x0800f4ed
 800f46c:	0800eba5 	.word	0x0800eba5
 800f470:	0800f4c9 	.word	0x0800f4c9
 800f474:	0800f485 	.word	0x0800f485
 800f478:	0800eba5 	.word	0x0800eba5
 800f47c:	0800eba5 	.word	0x0800eba5
 800f480:	0800f485 	.word	0x0800f485
                        gc_state.canned.spindle_off = gc_block.modal.motion == MotionMode_CannedCycle86;
 800f484:	2d56      	cmp	r5, #86	@ 0x56
 800f486:	bf14      	ite	ne
 800f488:	2200      	movne	r2, #0
 800f48a:	2201      	moveq	r2, #1
 800f48c:	4b49      	ldr	r3, [pc, #292]	@ (800f5b4 <gc_execute_block+0x2584>)
 800f48e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
                        gc_state.canned.rapid_retract = gc_block.modal.motion == MotionMode_CannedCycle86;
 800f492:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                        if(gc_block.words.p) {
 800f496:	4b46      	ldr	r3, [pc, #280]	@ (800f5b0 <gc_execute_block+0x2580>)
 800f498:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f49c:	f013 0f01 	tst.w	r3, #1
 800f4a0:	d01f      	beq.n	800f4e2 <gc_execute_block+0x24b2>
                            if(gc_block.values.p < 0.0f)
 800f4a2:	4b43      	ldr	r3, [pc, #268]	@ (800f5b0 <gc_execute_block+0x2580>)
 800f4a4:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 800f4a8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800f4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4b0:	f101 84e0 	bmi.w	8010e74 <gc_execute_block+0x3e44>
                            gc_state.canned.dwell = gc_block.values.p;
 800f4b4:	4b3f      	ldr	r3, [pc, #252]	@ (800f5b4 <gc_execute_block+0x2584>)
 800f4b6:	edc3 6a11 	vstr	s13, [r3, #68]	@ 0x44
                            gc_block.words.p = Off; // Remove single-meaning value word.
 800f4ba:	4b3d      	ldr	r3, [pc, #244]	@ (800f5b0 <gc_execute_block+0x2580>)
 800f4bc:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800f4c0:	f36f 0200 	bfc	r2, #0, #1
 800f4c4:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                        gc_state.canned.delta = - gc_state.canned.xyz[plane.axis_linear] + gc_state.canned.retract_position;
 800f4c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4cc:	4b39      	ldr	r3, [pc, #228]	@ (800f5b4 <gc_execute_block+0x2584>)
 800f4ce:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
                        if(gc_block.modal.motion == MotionMode_CannedCycle85)
 800f4d2:	2d55      	cmp	r5, #85	@ 0x55
 800f4d4:	f47f ab66 	bne.w	800eba4 <gc_execute_block+0x1b74>
                            gc_state.canned.rapid_retract = Off;
 800f4d8:	2200      	movs	r2, #0
 800f4da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 800f4de:	f7ff bb61 	b.w	800eba4 <gc_execute_block+0x1b74>
                        } else if(gc_parser_flags.canned_cycle_change)
 800f4e2:	2900      	cmp	r1, #0
 800f4e4:	d0f0      	beq.n	800f4c8 <gc_execute_block+0x2498>
                            FAIL(Status_GcodeValueWordMissing);
 800f4e6:	241c      	movs	r4, #28
 800f4e8:	f7fd be7f 	b.w	800d1ea <gc_execute_block+0x1ba>
                        if(gc_block.words.q) {
 800f4ec:	4b30      	ldr	r3, [pc, #192]	@ (800f5b0 <gc_execute_block+0x2580>)
 800f4ee:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f4f2:	f013 0f02 	tst.w	r3, #2
 800f4f6:	d021      	beq.n	800f53c <gc_execute_block+0x250c>
                            if(gc_block.values.q <= 0.0f)
 800f4f8:	4b2d      	ldr	r3, [pc, #180]	@ (800f5b0 <gc_execute_block+0x2580>)
 800f4fa:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800f4fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f506:	f241 84b8 	bls.w	8010e7a <gc_execute_block+0x3e4a>
                            gc_state.canned.delta = gc_block.values.q * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f);
 800f50a:	7adb      	ldrb	r3, [r3, #11]
 800f50c:	b19b      	cbz	r3, 800f536 <gc_execute_block+0x2506>
 800f50e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800f5bc <gc_execute_block+0x258c>
 800f512:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f516:	4b27      	ldr	r3, [pc, #156]	@ (800f5b4 <gc_execute_block+0x2584>)
 800f518:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
                            gc_block.words.q = Off; // Remove single-meaning value word.
 800f51c:	4b24      	ldr	r3, [pc, #144]	@ (800f5b0 <gc_execute_block+0x2580>)
 800f51e:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800f522:	f36f 0241 	bfc	r2, #1, #1
 800f526:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                        gc_state.canned.dwell = 0.25f;
 800f52a:	4b22      	ldr	r3, [pc, #136]	@ (800f5b4 <gc_execute_block+0x2584>)
 800f52c:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 800f530:	645a      	str	r2, [r3, #68]	@ 0x44
                        break;
 800f532:	f7ff bb37 	b.w	800eba4 <gc_execute_block+0x1b74>
                            gc_state.canned.delta = gc_block.values.q * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f);
 800f536:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f53a:	e7ea      	b.n	800f512 <gc_execute_block+0x24e2>
                        } else if(gc_parser_flags.canned_cycle_change)
 800f53c:	2900      	cmp	r1, #0
 800f53e:	d0f4      	beq.n	800f52a <gc_execute_block+0x24fa>
                            FAIL(Status_GcodeValueWordMissing);
 800f540:	241c      	movs	r4, #28
 800f542:	f7fd be52 	b.w	800d1ea <gc_execute_block+0x1ba>
            } else switch (gc_block.modal.motion) {
 800f546:	2d05      	cmp	r5, #5
 800f548:	d814      	bhi.n	800f574 <gc_execute_block+0x2544>
 800f54a:	b22b      	sxth	r3, r5
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	f43f ab29 	beq.w	800eba4 <gc_execute_block+0x1b74>
 800f552:	1e6b      	subs	r3, r5, #1
 800f554:	2b04      	cmp	r3, #4
 800f556:	f63f ab25 	bhi.w	800eba4 <gc_execute_block+0x1b74>
 800f55a:	a201      	add	r2, pc, #4	@ (adr r2, 800f560 <gc_execute_block+0x2530>)
 800f55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f560:	0800f5a1 	.word	0x0800f5a1
 800f564:	0800f5c1 	.word	0x0800f5c1
 800f568:	0800f5c5 	.word	0x0800f5c5
 800f56c:	0800eba5 	.word	0x0800eba5
 800f570:	0800f8e1 	.word	0x0800f8e1
 800f574:	2d33      	cmp	r5, #51	@ 0x33
 800f576:	f000 824f 	beq.w	800fa18 <gc_execute_block+0x29e8>
 800f57a:	f4ff ab13 	bcc.w	800eba4 <gc_execute_block+0x1b74>
 800f57e:	2d8f      	cmp	r5, #143	@ 0x8f
 800f580:	f63f ab10 	bhi.w	800eba4 <gc_execute_block+0x1b74>
 800f584:	2d8c      	cmp	r5, #140	@ 0x8c
 800f586:	f4ff ab0d 	bcc.w	800eba4 <gc_execute_block+0x1b74>
 800f58a:	f1a5 038c 	sub.w	r3, r5, #140	@ 0x8c
 800f58e:	2b03      	cmp	r3, #3
 800f590:	f63f ab08 	bhi.w	800eba4 <gc_execute_block+0x1b74>
 800f594:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f598:	028d028f 	.word	0x028d028f
 800f59c:	028d028f 	.word	0x028d028f
                    if (!axis_words.mask)
 800f5a0:	fa5f f38b 	uxtb.w	r3, fp
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	f47f aafd 	bne.w	800eba4 <gc_execute_block+0x1b74>
                        axis_command = AxisCommand_None;
 800f5aa:	469a      	mov	sl, r3
 800f5ac:	f7ff bafa 	b.w	800eba4 <gc_execute_block+0x1b74>
 800f5b0:	20000ddc 	.word	0x20000ddc
 800f5b4:	20000ee4 	.word	0x20000ee4
 800f5b8:	20000eb4 	.word	0x20000eb4
 800f5bc:	41cb3333 	.word	0x41cb3333
                    gc_parser_flags.arc_is_clockwise = On;
 800f5c0:	f048 0804 	orr.w	r8, r8, #4
                    if (!axis_words.mask)
 800f5c4:	fa5f f18b 	uxtb.w	r1, fp
 800f5c8:	2900      	cmp	r1, #0
 800f5ca:	f001 8459 	beq.w	8010e80 <gc_execute_block+0x3e50>
                    if (!(axis_words.mask & (bit(plane.axis_0)|bit(plane.axis_1))))
 800f5ce:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	fa02 f303 	lsl.w	r3, r2, r3
 800f5d8:	f89d 0089 	ldrb.w	r0, [sp, #137]	@ 0x89
 800f5dc:	4082      	lsls	r2, r0
 800f5de:	4313      	orrs	r3, r2
 800f5e0:	4219      	tst	r1, r3
 800f5e2:	f001 8450 	beq.w	8010e86 <gc_execute_block+0x3e56>
                    if (gc_block.words.p) { // Number of turns
 800f5e6:	4bb7      	ldr	r3, [pc, #732]	@ (800f8c4 <gc_execute_block+0x2894>)
 800f5e8:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f5ec:	f013 0f01 	tst.w	r3, #1
 800f5f0:	f040 80a8 	bne.w	800f744 <gc_execute_block+0x2714>
                        gc_block.arc_turns = 1;
 800f5f4:	4bb3      	ldr	r3, [pc, #716]	@ (800f8c4 <gc_execute_block+0x2894>)
 800f5f6:	2201      	movs	r2, #1
 800f5f8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
                    x = gc_block.values.xyz[plane.axis_0] - gc_state.position[plane.axis_0]; // Delta x between current position and target
 800f5fc:	f89d 4088 	ldrb.w	r4, [sp, #136]	@ 0x88
 800f600:	4ab0      	ldr	r2, [pc, #704]	@ (800f8c4 <gc_execute_block+0x2894>)
 800f602:	f104 0320 	add.w	r3, r4, #32
 800f606:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f60a:	edd3 7a01 	vldr	s15, [r3, #4]
 800f60e:	4bae      	ldr	r3, [pc, #696]	@ (800f8c8 <gc_execute_block+0x2898>)
 800f610:	f104 011a 	add.w	r1, r4, #26
 800f614:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f618:	ed91 7a00 	vldr	s14, [r1]
 800f61c:	ee37 9ac7 	vsub.f32	s18, s15, s14
                    y = gc_block.values.xyz[plane.axis_1] - gc_state.position[plane.axis_1]; // Delta y between current position and target
 800f620:	f89d 5089 	ldrb.w	r5, [sp, #137]	@ 0x89
 800f624:	f105 0120 	add.w	r1, r5, #32
 800f628:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f62c:	ed91 8a01 	vldr	s16, [r1, #4]
 800f630:	f105 011a 	add.w	r1, r5, #26
 800f634:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f638:	edd3 7a00 	vldr	s15, [r3]
 800f63c:	ee38 8a67 	vsub.f32	s16, s16, s15
                    if (gc_block.words.r) { // Arc Radius Mode
 800f640:	f892 30ba 	ldrb.w	r3, [r2, #186]	@ 0xba
 800f644:	f013 0f04 	tst.w	r3, #4
 800f648:	f000 80a3 	beq.w	800f792 <gc_execute_block+0x2762>
                        gc_block.words.r = Off;
 800f64c:	4611      	mov	r1, r2
 800f64e:	f892 30ba 	ldrb.w	r3, [r2, #186]	@ 0xba
 800f652:	f36f 0382 	bfc	r3, #2, #1
 800f656:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
                        if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 800f65a:	220c      	movs	r2, #12
 800f65c:	3184      	adds	r1, #132	@ 0x84
 800f65e:	489b      	ldr	r0, [pc, #620]	@ (800f8cc <gc_execute_block+0x289c>)
 800f660:	f014 fee3 	bl	802442a <memcmp>
 800f664:	2800      	cmp	r0, #0
 800f666:	f001 8417 	beq.w	8010e98 <gc_execute_block+0x3e68>
                        if (gc_block.modal.units_imperial)
 800f66a:	4b96      	ldr	r3, [pc, #600]	@ (800f8c4 <gc_execute_block+0x2894>)
 800f66c:	7adb      	ldrb	r3, [r3, #11]
 800f66e:	b143      	cbz	r3, 800f682 <gc_execute_block+0x2652>
                            gc_block.values.r *= MM_PER_INCH;
 800f670:	4b94      	ldr	r3, [pc, #592]	@ (800f8c4 <gc_execute_block+0x2894>)
 800f672:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800f676:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 800f8d0 <gc_execute_block+0x28a0>
 800f67a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f67e:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
                        if(gc_state.modal.scaling_active)
 800f682:	4b91      	ldr	r3, [pc, #580]	@ (800f8c8 <gc_execute_block+0x2898>)
 800f684:	7f9b      	ldrb	r3, [r3, #30]
 800f686:	b1cb      	cbz	r3, 800f6bc <gc_execute_block+0x268c>
                            gc_block.values.r *= (scale_factor.ijk[plane.axis_0] > scale_factor.ijk[plane.axis_1]
 800f688:	4b8e      	ldr	r3, [pc, #568]	@ (800f8c4 <gc_execute_block+0x2894>)
 800f68a:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800f68e:	4b91      	ldr	r3, [pc, #580]	@ (800f8d4 <gc_execute_block+0x28a4>)
 800f690:	1ca2      	adds	r2, r4, #2
 800f692:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f696:	edd2 6a01 	vldr	s13, [r2, #4]
 800f69a:	1caa      	adds	r2, r5, #2
 800f69c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f6a0:	ed93 7a01 	vldr	s14, [r3, #4]
                                                   : scale_factor.ijk[plane.axis_1]);
 800f6a4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ac:	dd01      	ble.n	800f6b2 <gc_execute_block+0x2682>
 800f6ae:	eeb0 7a66 	vmov.f32	s14, s13
                            gc_block.values.r *= (scale_factor.ijk[plane.axis_0] > scale_factor.ijk[plane.axis_1]
 800f6b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f6b6:	4b83      	ldr	r3, [pc, #524]	@ (800f8c4 <gc_execute_block+0x2894>)
 800f6b8:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
                        float h_x2_div_d = 4.0f * gc_block.values.r * gc_block.values.r - x * x - y * y;
 800f6bc:	4b81      	ldr	r3, [pc, #516]	@ (800f8c4 <gc_execute_block+0x2894>)
 800f6be:	edd3 8a19 	vldr	s17, [r3, #100]	@ 0x64
 800f6c2:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800f6c6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800f6ca:	ee69 aa09 	vmul.f32	s21, s18, s18
 800f6ce:	eeb0 0a6a 	vmov.f32	s0, s21
 800f6d2:	ee18 0aa7 	vnmls.f32	s0, s17, s15
 800f6d6:	ee28 aa08 	vmul.f32	s20, s16, s16
 800f6da:	ee30 0a4a 	vsub.f32	s0, s0, s20
                        if (h_x2_div_d < 0.0f)
 800f6de:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6e6:	f101 83da 	bmi.w	8010e9e <gc_execute_block+0x3e6e>
                        h_x2_div_d = -sqrtf(h_x2_div_d) / hypot_f(x, y); // == -(h * 2 / d)
 800f6ea:	f017 fc29 	bl	8026f40 <sqrtf>
 800f6ee:	eef1 9a40 	vneg.f32	s19, s0
    return sqrtf(x * x + y * y);
 800f6f2:	ee3a 0a8a 	vadd.f32	s0, s21, s20
 800f6f6:	f017 fc23 	bl	8026f40 <sqrtf>
                        h_x2_div_d = -sqrtf(h_x2_div_d) / hypot_f(x, y); // == -(h * 2 / d)
 800f6fa:	eec9 7a80 	vdiv.f32	s15, s19, s0
                        if (gc_block.modal.motion == MotionMode_CcwArc)
 800f6fe:	4b71      	ldr	r3, [pc, #452]	@ (800f8c4 <gc_execute_block+0x2894>)
 800f700:	891b      	ldrh	r3, [r3, #8]
 800f702:	2b03      	cmp	r3, #3
 800f704:	d03a      	beq.n	800f77c <gc_execute_block+0x274c>
                        if (gc_block.values.r < 0.0f) {
 800f706:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800f70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f70e:	d438      	bmi.n	800f782 <gc_execute_block+0x2752>
                        gc_block.values.ijk[plane.axis_0] = 0.5f * (x - (y * h_x2_div_d));
 800f710:	eeb0 7a49 	vmov.f32	s14, s18
 800f714:	ee07 7ac8 	vmls.f32	s14, s15, s16
 800f718:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800f71c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f720:	4b68      	ldr	r3, [pc, #416]	@ (800f8c4 <gc_execute_block+0x2894>)
 800f722:	f104 0210 	add.w	r2, r4, #16
 800f726:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f72a:	ed82 7a02 	vstr	s14, [r2, #8]
                        gc_block.values.ijk[plane.axis_1] = 0.5f * (y + (x * h_x2_div_d));
 800f72e:	ee07 8a89 	vmla.f32	s16, s15, s18
 800f732:	ee68 7a26 	vmul.f32	s15, s16, s13
 800f736:	3510      	adds	r5, #16
 800f738:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800f73c:	edc3 7a02 	vstr	s15, [r3, #8]
 800f740:	f7ff ba30 	b.w	800eba4 <gc_execute_block+0x1b74>
                        if(!isintf(gc_block.values.p))
 800f744:	4b5f      	ldr	r3, [pc, #380]	@ (800f8c4 <gc_execute_block+0x2894>)
 800f746:	ed93 0a17 	vldr	s0, [r3, #92]	@ 0x5c
 800f74a:	f005 fe8f 	bl	801546c <isintf>
 800f74e:	2800      	cmp	r0, #0
 800f750:	f001 839c 	beq.w	8010e8c <gc_execute_block+0x3e5c>
                        gc_block.arc_turns = (uint32_t)truncf(gc_block.values.p);
 800f754:	4a5b      	ldr	r2, [pc, #364]	@ (800f8c4 <gc_execute_block+0x2894>)
 800f756:	edd2 7a17 	vldr	s15, [r2, #92]	@ 0x5c
 800f75a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f75e:	ee17 3a90 	vmov	r3, s15
 800f762:	edc2 7a32 	vstr	s15, [r2, #200]	@ 0xc8
                        if(gc_block.arc_turns == 0)
 800f766:	2b00      	cmp	r3, #0
 800f768:	f001 8393 	beq.w	8010e92 <gc_execute_block+0x3e62>
                        gc_block.words.p = Off;
 800f76c:	4613      	mov	r3, r2
 800f76e:	f892 20ba 	ldrb.w	r2, [r2, #186]	@ 0xba
 800f772:	f36f 0200 	bfc	r2, #0, #1
 800f776:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800f77a:	e73f      	b.n	800f5fc <gc_execute_block+0x25cc>
                            h_x2_div_d = -h_x2_div_d;
 800f77c:	eef1 7a67 	vneg.f32	s15, s15
 800f780:	e7c1      	b.n	800f706 <gc_execute_block+0x26d6>
                            h_x2_div_d = -h_x2_div_d;
 800f782:	eef1 7a67 	vneg.f32	s15, s15
                            gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 800f786:	eef1 8a68 	vneg.f32	s17, s17
 800f78a:	4b4e      	ldr	r3, [pc, #312]	@ (800f8c4 <gc_execute_block+0x2894>)
 800f78c:	edc3 8a19 	vstr	s17, [r3, #100]	@ 0x64
 800f790:	e7be      	b.n	800f710 <gc_execute_block+0x26e0>
                        if (!(ijk_words.mask & (bit(plane.axis_0)|bit(plane.axis_1))))
 800f792:	9805      	ldr	r0, [sp, #20]
 800f794:	4601      	mov	r1, r0
 800f796:	2301      	movs	r3, #1
 800f798:	fa03 f204 	lsl.w	r2, r3, r4
 800f79c:	40ab      	lsls	r3, r5
 800f79e:	4313      	orrs	r3, r2
 800f7a0:	4218      	tst	r0, r3
 800f7a2:	f001 837f 	beq.w	8010ea4 <gc_execute_block+0x3e74>
                        gc_block.words.i = gc_block.words.j = gc_block.words.k = Off;
 800f7a6:	4b47      	ldr	r3, [pc, #284]	@ (800f8c4 <gc_execute_block+0x2894>)
 800f7a8:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800f7ac:	f36f 1286 	bfc	r2, #6, #1
 800f7b0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800f7b4:	b2d2      	uxtb	r2, r2
 800f7b6:	f36f 1245 	bfc	r2, #5, #1
 800f7ba:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800f7be:	b2d2      	uxtb	r2, r2
 800f7c0:	f36f 1204 	bfc	r2, #4, #1
 800f7c4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
                        if (gc_block.modal.units_imperial) {
 800f7c8:	7adb      	ldrb	r3, [r3, #11]
 800f7ca:	b1b3      	cbz	r3, 800f7fa <gc_execute_block+0x27ca>
                            idx = 3;
 800f7cc:	2303      	movs	r3, #3
 800f7ce:	e000      	b.n	800f7d2 <gc_execute_block+0x27a2>
                            } while(idx);
 800f7d0:	b19b      	cbz	r3, 800f7fa <gc_execute_block+0x27ca>
                                idx--;
 800f7d2:	3b01      	subs	r3, #1
                                if (ijk_words.mask & bit(idx))
 800f7d4:	fa21 f203 	lsr.w	r2, r1, r3
 800f7d8:	f012 0f01 	tst.w	r2, #1
 800f7dc:	d0f8      	beq.n	800f7d0 <gc_execute_block+0x27a0>
                                    gc_block.values.ijk[idx] *= MM_PER_INCH;
 800f7de:	f103 0010 	add.w	r0, r3, #16
 800f7e2:	4a38      	ldr	r2, [pc, #224]	@ (800f8c4 <gc_execute_block+0x2894>)
 800f7e4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f7e8:	edd2 7a02 	vldr	s15, [r2, #8]
 800f7ec:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800f8d0 <gc_execute_block+0x28a0>
 800f7f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7f4:	edc2 7a02 	vstr	s15, [r2, #8]
 800f7f8:	e7ea      	b.n	800f7d0 <gc_execute_block+0x27a0>
                        if(gc_state.modal.scaling_active) {
 800f7fa:	4b33      	ldr	r3, [pc, #204]	@ (800f8c8 <gc_execute_block+0x2898>)
 800f7fc:	7f9b      	ldrb	r3, [r3, #30]
 800f7fe:	b1d3      	cbz	r3, 800f836 <gc_execute_block+0x2806>
                            idx = 3;
 800f800:	2303      	movs	r3, #3
 800f802:	e000      	b.n	800f806 <gc_execute_block+0x27d6>
                            } while(idx);
 800f804:	b1bb      	cbz	r3, 800f836 <gc_execute_block+0x2806>
                                if (ijk_words.mask & bit(--idx))
 800f806:	3b01      	subs	r3, #1
 800f808:	fa21 f203 	lsr.w	r2, r1, r3
 800f80c:	f012 0f01 	tst.w	r2, #1
 800f810:	d0f8      	beq.n	800f804 <gc_execute_block+0x27d4>
                                    gc_block.values.ijk[idx] *= scale_factor.ijk[idx];
 800f812:	f103 0010 	add.w	r0, r3, #16
 800f816:	4a2b      	ldr	r2, [pc, #172]	@ (800f8c4 <gc_execute_block+0x2894>)
 800f818:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f81c:	edd2 7a02 	vldr	s15, [r2, #8]
 800f820:	1c9e      	adds	r6, r3, #2
 800f822:	482c      	ldr	r0, [pc, #176]	@ (800f8d4 <gc_execute_block+0x28a4>)
 800f824:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 800f828:	ed90 7a01 	vldr	s14, [r0, #4]
 800f82c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f830:	edc2 7a02 	vstr	s15, [r2, #8]
 800f834:	e7e6      	b.n	800f804 <gc_execute_block+0x27d4>
                        x -= gc_block.values.ijk[plane.axis_0]; // Delta x between circle center and target
 800f836:	4e23      	ldr	r6, [pc, #140]	@ (800f8c4 <gc_execute_block+0x2894>)
 800f838:	f104 0310 	add.w	r3, r4, #16
 800f83c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f840:	edd3 9a02 	vldr	s19, [r3, #8]
 800f844:	ee79 7a69 	vsub.f32	s15, s18, s19
                        y -= gc_block.values.ijk[plane.axis_1]; // Delta y between circle center and target
 800f848:	f105 0310 	add.w	r3, r5, #16
 800f84c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f850:	edd3 8a02 	vldr	s17, [r3, #8]
 800f854:	ee38 8a68 	vsub.f32	s16, s16, s17
    return sqrtf(x * x + y * y);
 800f858:	ee28 8a08 	vmul.f32	s16, s16, s16
 800f85c:	eeb0 0a48 	vmov.f32	s0, s16
 800f860:	ee07 0aa7 	vmla.f32	s0, s15, s15
 800f864:	f017 fb6c 	bl	8026f40 <sqrtf>
 800f868:	eeb0 8a40 	vmov.f32	s16, s0
 800f86c:	ee68 8aa8 	vmul.f32	s17, s17, s17
 800f870:	eeb0 0a68 	vmov.f32	s0, s17
 800f874:	ee09 0aa9 	vmla.f32	s0, s19, s19
 800f878:	f017 fb62 	bl	8026f40 <sqrtf>
                        gc_block.values.r = hypot_f(gc_block.values.ijk[plane.axis_0], gc_block.values.ijk[plane.axis_1]);
 800f87c:	ed86 0a19 	vstr	s0, [r6, #100]	@ 0x64
                        float delta_r = fabsf(target_r - gc_block.values.r);
 800f880:	ee78 7a40 	vsub.f32	s15, s16, s0
 800f884:	eef0 7ae7 	vabs.f32	s15, s15
                        if (delta_r > 0.005f) {
 800f888:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800f8d8 <gc_execute_block+0x28a8>
 800f88c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f894:	f77f a986 	ble.w	800eba4 <gc_execute_block+0x1b74>
                            if (delta_r > 0.5f)
 800f898:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800f89c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8a4:	f301 8301 	bgt.w	8010eaa <gc_execute_block+0x3e7a>
                            if (delta_r > (0.001f * gc_block.values.r))
 800f8a8:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800f8dc <gc_execute_block+0x28ac>
 800f8ac:	ee20 7a26 	vmul.f32	s14, s0, s13
 800f8b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8b8:	f57f a974 	bpl.w	800eba4 <gc_execute_block+0x1b74>
                                FAIL(Status_GcodeInvalidTarget); // [Arc definition error] > 0.005mm AND 0.1% radius
 800f8bc:	2421      	movs	r4, #33	@ 0x21
 800f8be:	f7fd bc94 	b.w	800d1ea <gc_execute_block+0x1ba>
 800f8c2:	bf00      	nop
 800f8c4:	20000ddc 	.word	0x20000ddc
 800f8c8:	20000ee4 	.word	0x20000ee4
 800f8cc:	20000f4c 	.word	0x20000f4c
 800f8d0:	41cb3333 	.word	0x41cb3333
 800f8d4:	200001a8 	.word	0x200001a8
 800f8d8:	3ba3d70a 	.word	0x3ba3d70a
 800f8dc:	3a83126f 	.word	0x3a83126f
                    if(gc_block.modal.plane_select != PlaneSelect_XY)
 800f8e0:	4bb5      	ldr	r3, [pc, #724]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800f8e2:	7b9b      	ldrb	r3, [r3, #14]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	f041 82e3 	bne.w	8010eb0 <gc_execute_block+0x3e80>
                    if (axis_words.mask & ~(bit(X_AXIS)|bit(Y_AXIS)))
 800f8ea:	fa5f f38b 	uxtb.w	r3, fp
 800f8ee:	2b03      	cmp	r3, #3
 800f8f0:	f201 82e1 	bhi.w	8010eb6 <gc_execute_block+0x3e86>
                    if((gc_block.words.mask & pq_words.mask) != pq_words.mask)
 800f8f4:	4bb0      	ldr	r3, [pc, #704]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800f8f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800f8fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800f8fe:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 800f902:	f041 82db 	bne.w	8010ebc <gc_execute_block+0x3e8c>
                    if(gc_parser_flags.motion_mode_changed && (gc_block.words.mask & ij_words.mask) != ij_words.mask)
 800f906:	f418 7f00 	tst.w	r8, #512	@ 0x200
 800f90a:	d004      	beq.n	800f916 <gc_execute_block+0x28e6>
 800f90c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f910:	2b30      	cmp	r3, #48	@ 0x30
 800f912:	f041 82d6 	bne.w	8010ec2 <gc_execute_block+0x3e92>
                    if(!(gc_block.words.i || gc_block.words.j)) {
 800f916:	4ba8      	ldr	r3, [pc, #672]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800f918:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800f91c:	f013 0f30 	tst.w	r3, #48	@ 0x30
 800f920:	d151      	bne.n	800f9c6 <gc_execute_block+0x2996>
                        gc_block.values.ijk[I_VALUE] = - gc_block.values.p;
 800f922:	4ba5      	ldr	r3, [pc, #660]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800f924:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800f928:	eef1 7a67 	vneg.f32	s15, s15
 800f92c:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                        gc_block.values.ijk[J_VALUE] = - gc_block.values.q;
 800f930:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800f934:	eef1 7a67 	vneg.f32	s15, s15
 800f938:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                    if (gc_block.modal.units_imperial) {
 800f93c:	4b9e      	ldr	r3, [pc, #632]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800f93e:	7adb      	ldrb	r3, [r3, #11]
 800f940:	b173      	cbz	r3, 800f960 <gc_execute_block+0x2930>
                        gc_block.values.p *= MM_PER_INCH;
 800f942:	4b9d      	ldr	r3, [pc, #628]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800f944:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800f948:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 800fbbc <gc_execute_block+0x2b8c>
 800f94c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f950:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
                        gc_block.values.q *= MM_PER_INCH;
 800f954:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800f958:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f95c:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
                    if(gc_state.modal.scaling_active) {
 800f960:	4b97      	ldr	r3, [pc, #604]	@ (800fbc0 <gc_execute_block+0x2b90>)
 800f962:	7f9b      	ldrb	r3, [r3, #30]
 800f964:	b18b      	cbz	r3, 800f98a <gc_execute_block+0x295a>
                        gc_block.values.p *= scale_factor.ijk[X_AXIS];
 800f966:	4b94      	ldr	r3, [pc, #592]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800f968:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800f96c:	4a95      	ldr	r2, [pc, #596]	@ (800fbc4 <gc_execute_block+0x2b94>)
 800f96e:	ed92 7a03 	vldr	s14, [r2, #12]
 800f972:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f976:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
                        gc_block.values.q *= scale_factor.ijk[Y_AXIS];
 800f97a:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800f97e:	ed92 7a04 	vldr	s14, [r2, #16]
 800f982:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f986:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
                    gc_state.modal.spline_pq[X_AXIS] = gc_block.values.p;
 800f98a:	4b8b      	ldr	r3, [pc, #556]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800f98c:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800f98e:	4a8c      	ldr	r2, [pc, #560]	@ (800fbc0 <gc_execute_block+0x2b90>)
 800f990:	6211      	str	r1, [r2, #32]
                    gc_state.modal.spline_pq[Y_AXIS] = gc_block.values.q;
 800f992:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 800f994:	6251      	str	r1, [r2, #36]	@ 0x24
                    gc_block.words.p = gc_block.words.q = gc_block.words.i = gc_block.words.j = Off;
 800f996:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800f99a:	f36f 1245 	bfc	r2, #5, #1
 800f99e:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800f9a2:	b2d2      	uxtb	r2, r2
 800f9a4:	f36f 1204 	bfc	r2, #4, #1
 800f9a8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800f9ac:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800f9b0:	f36f 0241 	bfc	r2, #1, #1
 800f9b4:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800f9b8:	b2d2      	uxtb	r2, r2
 800f9ba:	f36f 0200 	bfc	r2, #0, #1
 800f9be:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                    break;
 800f9c2:	f7ff b8ef 	b.w	800eba4 <gc_execute_block+0x1b74>
                        if (gc_block.modal.units_imperial) {
 800f9c6:	4b7c      	ldr	r3, [pc, #496]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800f9c8:	7adb      	ldrb	r3, [r3, #11]
 800f9ca:	b173      	cbz	r3, 800f9ea <gc_execute_block+0x29ba>
                            gc_block.values.ijk[I_VALUE] *= MM_PER_INCH;
 800f9cc:	4b7a      	ldr	r3, [pc, #488]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800f9ce:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800f9d2:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800fbbc <gc_execute_block+0x2b8c>
 800f9d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f9da:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                            gc_block.values.ijk[J_VALUE] *= MM_PER_INCH;
 800f9de:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800f9e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f9e6:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                        if(gc_state.modal.scaling_active) {
 800f9ea:	4b75      	ldr	r3, [pc, #468]	@ (800fbc0 <gc_execute_block+0x2b90>)
 800f9ec:	7f9b      	ldrb	r3, [r3, #30]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d0a4      	beq.n	800f93c <gc_execute_block+0x290c>
                            gc_block.values.ijk[I_VALUE] *= scale_factor.ijk[X_AXIS];
 800f9f2:	4b71      	ldr	r3, [pc, #452]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800f9f4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800f9f8:	4a72      	ldr	r2, [pc, #456]	@ (800fbc4 <gc_execute_block+0x2b94>)
 800f9fa:	ed92 7a03 	vldr	s14, [r2, #12]
 800f9fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fa02:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                            gc_block.values.ijk[J_VALUE] *= scale_factor.ijk[Y_AXIS];
 800fa06:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800fa0a:	ed92 7a04 	vldr	s14, [r2, #16]
 800fa0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fa12:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
 800fa16:	e791      	b.n	800f93c <gc_execute_block+0x290c>
                    if(gc_block.modal.plane_select != PlaneSelect_XY)
 800fa18:	4b67      	ldr	r3, [pc, #412]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800fa1a:	7b9b      	ldrb	r3, [r3, #14]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	f041 8253 	bne.w	8010ec8 <gc_execute_block+0x3e98>
                    if (axis_words.mask & ~(bit(X_AXIS)|bit(Y_AXIS)))
 800fa22:	fa5f f38b 	uxtb.w	r3, fp
 800fa26:	2b03      	cmp	r3, #3
 800fa28:	f201 8251 	bhi.w	8010ece <gc_execute_block+0x3e9e>
                    if((gc_block.words.mask & ij_words.mask) != ij_words.mask)
 800fa2c:	4b62      	ldr	r3, [pc, #392]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800fa2e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800fa32:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800fa36:	2b30      	cmp	r3, #48	@ 0x30
 800fa38:	f041 824c 	bne.w	8010ed4 <gc_execute_block+0x3ea4>
                    if(gc_block.values.ijk[I_VALUE] == 0.0f && gc_block.values.ijk[I_VALUE] == 0.0f)
 800fa3c:	4b5e      	ldr	r3, [pc, #376]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800fa3e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800fa42:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fa46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa4a:	f001 8246 	beq.w	8010eda <gc_execute_block+0x3eaa>
                    if (gc_block.modal.units_imperial) {
 800fa4e:	7adb      	ldrb	r3, [r3, #11]
 800fa50:	b163      	cbz	r3, 800fa6c <gc_execute_block+0x2a3c>
                        gc_block.values.ijk[I_VALUE] *= MM_PER_INCH;
 800fa52:	4b59      	ldr	r3, [pc, #356]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800fa54:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800fbbc <gc_execute_block+0x2b8c>
 800fa58:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fa5c:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                        gc_block.values.ijk[J_VALUE] *= MM_PER_INCH;
 800fa60:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800fa64:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fa68:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                    if(gc_state.modal.scaling_active) {
 800fa6c:	4b54      	ldr	r3, [pc, #336]	@ (800fbc0 <gc_execute_block+0x2b90>)
 800fa6e:	7f9b      	ldrb	r3, [r3, #30]
 800fa70:	b18b      	cbz	r3, 800fa96 <gc_execute_block+0x2a66>
                        gc_block.values.ijk[I_VALUE] *= scale_factor.ijk[X_AXIS];
 800fa72:	4b51      	ldr	r3, [pc, #324]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800fa74:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800fa78:	4a52      	ldr	r2, [pc, #328]	@ (800fbc4 <gc_execute_block+0x2b94>)
 800fa7a:	ed92 7a03 	vldr	s14, [r2, #12]
 800fa7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fa82:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                        gc_block.values.ijk[J_VALUE] *= scale_factor.ijk[Y_AXIS];
 800fa86:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800fa8a:	ed92 7a04 	vldr	s14, [r2, #16]
 800fa8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fa92:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                    gc_block.words.i = gc_block.words.j = Off;
 800fa96:	4b48      	ldr	r3, [pc, #288]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800fa98:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800fa9c:	f36f 1245 	bfc	r2, #5, #1
 800faa0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800faa4:	b2d2      	uxtb	r2, r2
 800faa6:	f36f 1204 	bfc	r2, #4, #1
 800faaa:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
                    break;
 800faae:	f7ff b879 	b.w	800eba4 <gc_execute_block+0x1b74>
                    gc_parser_flags.probe_is_no_error = On;
 800fab2:	f048 0810 	orr.w	r8, r8, #16
                    if(gc_block.modal.motion == MotionMode_ProbeAway || gc_block.modal.motion == MotionMode_ProbeAwayNoError)
 800fab6:	f1a5 038e 	sub.w	r3, r5, #142	@ 0x8e
 800faba:	b29b      	uxth	r3, r3
 800fabc:	2b01      	cmp	r3, #1
 800fabe:	d90f      	bls.n	800fae0 <gc_execute_block+0x2ab0>
                    if (!axis_words.mask)
 800fac0:	fa5f f38b 	uxtb.w	r3, fp
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	f001 820b 	beq.w	8010ee0 <gc_execute_block+0x3eb0>
                    if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 800faca:	220c      	movs	r2, #12
 800facc:	493e      	ldr	r1, [pc, #248]	@ (800fbc8 <gc_execute_block+0x2b98>)
 800face:	483f      	ldr	r0, [pc, #252]	@ (800fbcc <gc_execute_block+0x2b9c>)
 800fad0:	f014 fcab 	bl	802442a <memcmp>
 800fad4:	2800      	cmp	r0, #0
 800fad6:	f47f a865 	bne.w	800eba4 <gc_execute_block+0x1b74>
                        FAIL(Status_GcodeInvalidTarget); // [Invalid target]
 800fada:	2421      	movs	r4, #33	@ 0x21
 800fadc:	f7fd bb85 	b.w	800d1ea <gc_execute_block+0x1ba>
                        gc_parser_flags.probe_is_away = On;
 800fae0:	f048 0808 	orr.w	r8, r8, #8
 800fae4:	e7ec      	b.n	800fac0 <gc_execute_block+0x2a90>
        gc_block.words.n = gc_block.words.f = gc_block.words.s = gc_block.words.t = Off;
 800fae6:	4b34      	ldr	r3, [pc, #208]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800fae8:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800faec:	f36f 1204 	bfc	r2, #4, #1
 800faf0:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800faf4:	b2d2      	uxtb	r2, r2
 800faf6:	f36f 02c3 	bfc	r2, #3, #1
 800fafa:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800fafe:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800fb02:	f36f 0241 	bfc	r2, #1, #1
 800fb06:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800fb0a:	b2d2      	uxtb	r2, r2
 800fb0c:	f36f 1286 	bfc	r2, #6, #1
 800fb10:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800fb14:	f7ff b857 	b.w	800ebc6 <gc_execute_block+0x1b96>
        plan_data.condition.is_rpm_rate_adjusted = gc_state.is_rpm_rate_adjusted || (gc_state.modal.spindle.state.ccw && gc_state.spindle.hal->cap.laser);
 800fb18:	2301      	movs	r3, #1
 800fb1a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800fb1e:	f363 12c7 	bfi	r2, r3, #7, #1
 800fb22:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
        if ((status_code_t)(int_value = (uint_fast16_t)mc_jog_execute(&plan_data, &gc_block, gc_state.position)) == Status_OK)
 800fb26:	4a29      	ldr	r2, [pc, #164]	@ (800fbcc <gc_execute_block+0x2b9c>)
 800fb28:	4923      	ldr	r1, [pc, #140]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800fb2a:	a814      	add	r0, sp, #80	@ 0x50
 800fb2c:	f004 f9f0 	bl	8013f10 <mc_jog_execute>
 800fb30:	4604      	mov	r4, r0
 800fb32:	2800      	cmp	r0, #0
 800fb34:	f47d ab59 	bne.w	800d1ea <gc_execute_block+0x1ba>
            memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_state.position));
 800fb38:	4b24      	ldr	r3, [pc, #144]	@ (800fbcc <gc_execute_block+0x2b9c>)
 800fb3a:	4a23      	ldr	r2, [pc, #140]	@ (800fbc8 <gc_execute_block+0x2b98>)
 800fb3c:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        return (status_code_t)int_value;
 800fb42:	f7fd bb52 	b.w	800d1ea <gc_execute_block+0x1ba>
        plan_data.condition.is_rpm_rate_adjusted = gc_state.is_rpm_rate_adjusted || (gc_state.modal.spindle.state.ccw && gc_state.spindle.hal->cap.laser);
 800fb46:	2300      	movs	r3, #0
 800fb48:	e7e7      	b.n	800fb1a <gc_execute_block+0x2aea>
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	e7e5      	b.n	800fb1a <gc_execute_block+0x2aea>
    if(gc_state.spindle.hal->cap.laser) {
 800fb4e:	4b1c      	ldr	r3, [pc, #112]	@ (800fbc0 <gc_execute_block+0x2b90>)
 800fb50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fb52:	7a9b      	ldrb	r3, [r3, #10]
 800fb54:	f013 0f08 	tst.w	r3, #8
 800fb58:	d054      	beq.n	800fc04 <gc_execute_block+0x2bd4>
        if(!motion_is_lasercut(gc_block.modal.motion))
 800fb5a:	4b17      	ldr	r3, [pc, #92]	@ (800fbb8 <gc_execute_block+0x2b88>)
 800fb5c:	891b      	ldrh	r3, [r3, #8]
    return motion == MotionMode_Linear || motion == MotionMode_CwArc || motion == MotionMode_CcwArc || motion == MotionMode_CubicSpline || motion == MotionMode_QuadraticSpline;
 800fb5e:	1e5a      	subs	r2, r3, #1
 800fb60:	b292      	uxth	r2, r2
 800fb62:	2a02      	cmp	r2, #2
 800fb64:	d907      	bls.n	800fb76 <gc_execute_block+0x2b46>
 800fb66:	2b05      	cmp	r3, #5
 800fb68:	d020      	beq.n	800fbac <gc_execute_block+0x2b7c>
 800fb6a:	2b33      	cmp	r3, #51	@ 0x33
 800fb6c:	d001      	beq.n	800fb72 <gc_execute_block+0x2b42>
 800fb6e:	2300      	movs	r3, #0
 800fb70:	e002      	b.n	800fb78 <gc_execute_block+0x2b48>
 800fb72:	2301      	movs	r3, #1
 800fb74:	e000      	b.n	800fb78 <gc_execute_block+0x2b48>
 800fb76:	2301      	movs	r3, #1
        if(!motion_is_lasercut(gc_block.modal.motion))
 800fb78:	b90b      	cbnz	r3, 800fb7e <gc_execute_block+0x2b4e>
            gc_parser_flags.laser_disable = On;
 800fb7a:	f048 0840 	orr.w	r8, r8, #64	@ 0x40
        if(axis_words.mask && (axis_command == AxisCommand_MotionMode))
 800fb7e:	fa5f f38b 	uxtb.w	r3, fp
 800fb82:	b113      	cbz	r3, 800fb8a <gc_execute_block+0x2b5a>
 800fb84:	f1ba 0f02 	cmp.w	sl, #2
 800fb88:	d012      	beq.n	800fbb0 <gc_execute_block+0x2b80>
        else if(gc_state.modal.spindle.state.on && !gc_state.modal.spindle.state.ccw) {
 800fb8a:	4b0d      	ldr	r3, [pc, #52]	@ (800fbc0 <gc_execute_block+0x2b90>)
 800fb8c:	7e9b      	ldrb	r3, [r3, #26]
 800fb8e:	f003 0303 	and.w	r3, r3, #3
 800fb92:	2b01      	cmp	r3, #1
 800fb94:	d01c      	beq.n	800fbd0 <gc_execute_block+0x2ba0>
        gc_state.is_rpm_rate_adjusted = gc_state.modal.spindle.state.ccw && !gc_parser_flags.laser_disable;
 800fb96:	4b0a      	ldr	r3, [pc, #40]	@ (800fbc0 <gc_execute_block+0x2b90>)
 800fb98:	7e9b      	ldrb	r3, [r3, #26]
 800fb9a:	f013 0f02 	tst.w	r3, #2
 800fb9e:	d02d      	beq.n	800fbfc <gc_execute_block+0x2bcc>
 800fba0:	f018 0f40 	tst.w	r8, #64	@ 0x40
 800fba4:	f000 80a7 	beq.w	800fcf6 <gc_execute_block+0x2cc6>
 800fba8:	2300      	movs	r3, #0
 800fbaa:	e028      	b.n	800fbfe <gc_execute_block+0x2bce>
    return motion == MotionMode_Linear || motion == MotionMode_CwArc || motion == MotionMode_CcwArc || motion == MotionMode_CubicSpline || motion == MotionMode_QuadraticSpline;
 800fbac:	2301      	movs	r3, #1
 800fbae:	e7e3      	b.n	800fb78 <gc_execute_block+0x2b48>
            gc_parser_flags.laser_is_motion = On;
 800fbb0:	f048 0880 	orr.w	r8, r8, #128	@ 0x80
 800fbb4:	e7ef      	b.n	800fb96 <gc_execute_block+0x2b66>
 800fbb6:	bf00      	nop
 800fbb8:	20000ddc 	.word	0x20000ddc
 800fbbc:	41cb3333 	.word	0x41cb3333
 800fbc0:	20000ee4 	.word	0x20000ee4
 800fbc4:	200001a8 	.word	0x200001a8
 800fbc8:	20000e60 	.word	0x20000e60
 800fbcc:	20000f4c 	.word	0x20000f4c
            if(motion_is_lasercut(gc_state.modal.motion)) {
 800fbd0:	4b9b      	ldr	r3, [pc, #620]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fbd2:	881b      	ldrh	r3, [r3, #0]
    return motion == MotionMode_Linear || motion == MotionMode_CwArc || motion == MotionMode_CcwArc || motion == MotionMode_CubicSpline || motion == MotionMode_QuadraticSpline;
 800fbd4:	1e5a      	subs	r2, r3, #1
 800fbd6:	b292      	uxth	r2, r2
 800fbd8:	2a02      	cmp	r2, #2
 800fbda:	d909      	bls.n	800fbf0 <gc_execute_block+0x2bc0>
 800fbdc:	2b05      	cmp	r3, #5
 800fbde:	d007      	beq.n	800fbf0 <gc_execute_block+0x2bc0>
 800fbe0:	2b33      	cmp	r3, #51	@ 0x33
 800fbe2:	d005      	beq.n	800fbf0 <gc_execute_block+0x2bc0>
            } else if(!gc_parser_flags.laser_disable) // When changing to a G1 motion mode without axis words from a non-G1/2/3 motion mode.
 800fbe4:	f018 0f40 	tst.w	r8, #64	@ 0x40
 800fbe8:	d1d5      	bne.n	800fb96 <gc_execute_block+0x2b66>
                gc_parser_flags.spindle_force_sync = On;
 800fbea:	f048 0820 	orr.w	r8, r8, #32
 800fbee:	e7d2      	b.n	800fb96 <gc_execute_block+0x2b66>
                if(gc_parser_flags.laser_disable)
 800fbf0:	f018 0f40 	tst.w	r8, #64	@ 0x40
 800fbf4:	d0cf      	beq.n	800fb96 <gc_execute_block+0x2b66>
                    gc_parser_flags.spindle_force_sync = On; // Change from G1/2/3 motion mode.
 800fbf6:	f048 0820 	orr.w	r8, r8, #32
 800fbfa:	e7cc      	b.n	800fb96 <gc_execute_block+0x2b66>
        gc_state.is_rpm_rate_adjusted = gc_state.modal.spindle.state.ccw && !gc_parser_flags.laser_disable;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	4a90      	ldr	r2, [pc, #576]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fc00:	f882 307e 	strb.w	r3, [r2, #126]	@ 0x7e
    gc_state.line_number = gc_block.values.n;
 800fc04:	4b8f      	ldr	r3, [pc, #572]	@ (800fe44 <gc_execute_block+0x2e14>)
 800fc06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fc0a:	4a8d      	ldr	r2, [pc, #564]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fc0c:	6753      	str	r3, [r2, #116]	@ 0x74
    plan_data.line_number = gc_state.line_number; // Record data for planner use.
 800fc0e:	931b      	str	r3, [sp, #108]	@ 0x6c
    bool check_mode = state_get() == STATE_CHECK_MODE;
 800fc10:	f00e fd78 	bl	801e704 <state_get>
 800fc14:	4605      	mov	r5, r0
 800fc16:	2802      	cmp	r0, #2
 800fc18:	bf14      	ite	ne
 800fc1a:	2300      	movne	r3, #0
 800fc1c:	2301      	moveq	r3, #1
 800fc1e:	930b      	str	r3, [sp, #44]	@ 0x2c
    if(message && !check_mode && (plan_data.message = malloc(strlen(message) + 1)))
 800fc20:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 800fc22:	b10c      	cbz	r4, 800fc28 <gc_execute_block+0x2bf8>
 800fc24:	2802      	cmp	r0, #2
 800fc26:	d168      	bne.n	800fcfa <gc_execute_block+0x2cca>
    gc_state.modal.feed_mode = gc_block.modal.feed_mode;
 800fc28:	4b86      	ldr	r3, [pc, #536]	@ (800fe44 <gc_execute_block+0x2e14>)
 800fc2a:	7a9b      	ldrb	r3, [r3, #10]
 800fc2c:	4a84      	ldr	r2, [pc, #528]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fc2e:	7093      	strb	r3, [r2, #2]
    if (gc_state.modal.feed_mode == FeedMode_InverseTime)
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	d06f      	beq.n	800fd14 <gc_execute_block+0x2ce4>
    gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 800fc34:	4b83      	ldr	r3, [pc, #524]	@ (800fe44 <gc_execute_block+0x2e14>)
 800fc36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fc38:	4b81      	ldr	r3, [pc, #516]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fc3a:	661a      	str	r2, [r3, #96]	@ 0x60
    plan_data.feed_rate = gc_state.feed_rate; // Record data for planner use.
 800fc3c:	9214      	str	r2, [sp, #80]	@ 0x50
    if(gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 800fc3e:	7edb      	ldrb	r3, [r3, #27]
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	d06e      	beq.n	800fd22 <gc_execute_block+0x2cf2>
    if(!user_words.s && ((gc_state.spindle.rpm != gc_block.values.s) || gc_parser_flags.spindle_force_sync)) {
 800fc44:	4b80      	ldr	r3, [pc, #512]	@ (800fe48 <gc_execute_block+0x2e18>)
 800fc46:	789b      	ldrb	r3, [r3, #2]
 800fc48:	f013 0f08 	tst.w	r3, #8
 800fc4c:	d12e      	bne.n	800fcac <gc_execute_block+0x2c7c>
 800fc4e:	4b7c      	ldr	r3, [pc, #496]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fc50:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800fc54:	4b7b      	ldr	r3, [pc, #492]	@ (800fe44 <gc_execute_block+0x2e14>)
 800fc56:	ed93 0a1a 	vldr	s0, [r3, #104]	@ 0x68
 800fc5a:	eef4 7a40 	vcmp.f32	s15, s0
 800fc5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc62:	d102      	bne.n	800fc6a <gc_execute_block+0x2c3a>
 800fc64:	f018 0f20 	tst.w	r8, #32
 800fc68:	d020      	beq.n	800fcac <gc_execute_block+0x2c7c>
        if(gc_state.modal.spindle.state.on && !gc_parser_flags.laser_is_motion) {
 800fc6a:	4b75      	ldr	r3, [pc, #468]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fc6c:	7e9b      	ldrb	r3, [r3, #26]
 800fc6e:	f013 0f01 	tst.w	r3, #1
 800fc72:	d017      	beq.n	800fca4 <gc_execute_block+0x2c74>
 800fc74:	fa5f f288 	uxtb.w	r2, r8
 800fc78:	f018 0f80 	tst.w	r8, #128	@ 0x80
 800fc7c:	d112      	bne.n	800fca4 <gc_execute_block+0x2c74>
            if(gc_block.spindle) {
 800fc7e:	4b71      	ldr	r3, [pc, #452]	@ (800fe44 <gc_execute_block+0x2e14>)
 800fc80:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800fc84:	b173      	cbz	r3, 800fca4 <gc_execute_block+0x2c74>
                gc_block.spindle->param->rpm = gc_block.values.s;
 800fc86:	685b      	ldr	r3, [r3, #4]
 800fc88:	ed83 0a00 	vstr	s0, [r3]
                spindle_sync(gc_block.spindle, gc_state.modal.spindle.state, gc_parser_flags.laser_disable ? 0.0f : gc_block.values.s);
 800fc8c:	4b6d      	ldr	r3, [pc, #436]	@ (800fe44 <gc_execute_block+0x2e14>)
 800fc8e:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 800fc92:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800fc96:	d001      	beq.n	800fc9c <gc_execute_block+0x2c6c>
 800fc98:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 800fe4c <gc_execute_block+0x2e1c>
 800fc9c:	4b68      	ldr	r3, [pc, #416]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fc9e:	7e99      	ldrb	r1, [r3, #26]
 800fca0:	f00e fa02 	bl	801e0a8 <spindle_sync>
        gc_state.spindle.rpm = gc_block.values.s; // Update spindle speed state.
 800fca4:	4b67      	ldr	r3, [pc, #412]	@ (800fe44 <gc_execute_block+0x2e14>)
 800fca6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800fca8:	4b65      	ldr	r3, [pc, #404]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fcaa:	651a      	str	r2, [r3, #80]	@ 0x50
    if (!gc_parser_flags.laser_disable)
 800fcac:	fa5f f388 	uxtb.w	r3, r8
 800fcb0:	930a      	str	r3, [sp, #40]	@ 0x28
 800fcb2:	f018 0f40 	tst.w	r8, #64	@ 0x40
 800fcb6:	d17d      	bne.n	800fdb4 <gc_execute_block+0x2d84>
        memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t)); // Record data for planner use.
 800fcb8:	ac15      	add	r4, sp, #84	@ 0x54
 800fcba:	4b65      	ldr	r3, [pc, #404]	@ (800fe50 <gc_execute_block+0x2e20>)
 800fcbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fcbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(gc_state.tool_pending != gc_block.values.t && !check_mode) {
 800fcc2:	4b5f      	ldr	r3, [pc, #380]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fcc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fcc6:	4a5f      	ldr	r2, [pc, #380]	@ (800fe44 <gc_execute_block+0x2e14>)
 800fcc8:	f8d2 00b0 	ldr.w	r0, [r2, #176]	@ 0xb0
 800fccc:	4283      	cmp	r3, r0
 800fcce:	d001      	beq.n	800fcd4 <gc_execute_block+0x2ca4>
 800fcd0:	2d02      	cmp	r5, #2
 800fcd2:	d173      	bne.n	800fdbc <gc_execute_block+0x2d8c>
    if(port_command) {
 800fcd4:	9b06      	ldr	r3, [sp, #24]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	f000 80d1 	beq.w	800fe7e <gc_execute_block+0x2e4e>
        switch(port_command) {
 800fcdc:	3b3e      	subs	r3, #62	@ 0x3e
 800fcde:	2b06      	cmp	r3, #6
 800fce0:	f200 80cd 	bhi.w	800fe7e <gc_execute_block+0x2e4e>
 800fce4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fce8:	00c800c8 	.word	0x00c800c8
 800fcec:	011f011f 	.word	0x011f011f
 800fcf0:	01460132 	.word	0x01460132
 800fcf4:	014a      	.short	0x014a
        gc_state.is_rpm_rate_adjusted = gc_state.modal.spindle.state.ccw && !gc_parser_flags.laser_disable;
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	e781      	b.n	800fbfe <gc_execute_block+0x2bce>
    if(message && !check_mode && (plan_data.message = malloc(strlen(message) + 1)))
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	f7f8 fa00 	bl	8008100 <strlen>
 800fd00:	3001      	adds	r0, #1
 800fd02:	f012 faf3 	bl	80222ec <malloc>
 800fd06:	901c      	str	r0, [sp, #112]	@ 0x70
 800fd08:	2800      	cmp	r0, #0
 800fd0a:	d08d      	beq.n	800fc28 <gc_execute_block+0x2bf8>
        strcpy(plan_data.message, message);
 800fd0c:	4621      	mov	r1, r4
 800fd0e:	f014 fd0e 	bl	802472e <strcpy>
 800fd12:	e789      	b.n	800fc28 <gc_execute_block+0x2bf8>
        plan_data.condition.inverse_time = On; // Set condition flag for planner use.
 800fd14:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800fd18:	f043 0320 	orr.w	r3, r3, #32
 800fd1c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800fd20:	e788      	b.n	800fc34 <gc_execute_block+0x2c04>
        if(gc_block.modal.motion != MotionMode_None && gc_block.modal.motion != MotionMode_Seek) {
 800fd22:	4b48      	ldr	r3, [pc, #288]	@ (800fe44 <gc_execute_block+0x2e14>)
 800fd24:	891b      	ldrh	r3, [r3, #8]
 800fd26:	2b50      	cmp	r3, #80	@ 0x50
 800fd28:	d000      	beq.n	800fd2c <gc_execute_block+0x2cfc>
 800fd2a:	b963      	cbnz	r3, 800fd46 <gc_execute_block+0x2d16>
            if(gc_state.spindle.css) {
 800fd2c:	4b44      	ldr	r3, [pc, #272]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fd2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fd30:	b123      	cbz	r3, 800fd3c <gc_execute_block+0x2d0c>
                gc_state.spindle.css = NULL;
 800fd32:	4b43      	ldr	r3, [pc, #268]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fd34:	2200      	movs	r2, #0
 800fd36:	659a      	str	r2, [r3, #88]	@ 0x58
                protocol_buffer_synchronize(); // Empty planner buffer to ensure we get RPM at end of last CSS motion
 800fd38:	f007 fc4a 	bl	80175d0 <protocol_buffer_synchronize>
            gc_block.values.s = gc_state.spindle.rpm; //gc_state.spindle.hal->param->rpm; // Keep current RPM
 800fd3c:	4b40      	ldr	r3, [pc, #256]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fd3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd40:	4b40      	ldr	r3, [pc, #256]	@ (800fe44 <gc_execute_block+0x2e14>)
 800fd42:	669a      	str	r2, [r3, #104]	@ 0x68
 800fd44:	e77e      	b.n	800fc44 <gc_execute_block+0x2c14>
            gc_state.spindle.css = &gc_state.spindle.hal->param->css;
 800fd46:	4c3e      	ldr	r4, [pc, #248]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fd48:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	3310      	adds	r3, #16
 800fd4e:	65a3      	str	r3, [r4, #88]	@ 0x58
            gc_state.spindle.css->axis = plane.axis_1;
 800fd50:	f89d 2089 	ldrb.w	r2, [sp, #137]	@ 0x89
 800fd54:	615a      	str	r2, [r3, #20]
            gc_state.spindle.css->tool_offset = gc_get_offset(gc_state.spindle.css->axis, false);
 800fd56:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 800fd58:	2100      	movs	r1, #0
 800fd5a:	6970      	ldr	r0, [r6, #20]
 800fd5c:	f7fc fed0 	bl	800cb00 <gc_get_offset>
 800fd60:	ed86 0a04 	vstr	s0, [r6, #16]
            float pos = gc_state.position[gc_state.spindle.css->axis] - gc_state.spindle.css->tool_offset;
 800fd64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fd66:	695a      	ldr	r2, [r3, #20]
 800fd68:	321a      	adds	r2, #26
 800fd6a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800fd6e:	edd4 7a00 	vldr	s15, [r4]
 800fd72:	ed93 7a04 	vldr	s14, [r3, #16]
 800fd76:	ee77 7ac7 	vsub.f32	s15, s15, s14
            gc_block.values.s = pos <= 0.0f ? gc_state.spindle.css->max_rpm : min(gc_state.spindle.css->max_rpm, gc_state.spindle.css->surface_speed / (pos * (float)(2.0f * M_PI)));
 800fd7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fd7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd82:	d911      	bls.n	800fda8 <gc_execute_block+0x2d78>
 800fd84:	edd3 6a03 	vldr	s13, [r3, #12]
 800fd88:	ed93 6a00 	vldr	s12, [r3]
 800fd8c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800fe54 <gc_execute_block+0x2e24>
 800fd90:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd94:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800fd98:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fd9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda0:	d504      	bpl.n	800fdac <gc_execute_block+0x2d7c>
 800fda2:	eeb0 7a66 	vmov.f32	s14, s13
 800fda6:	e001      	b.n	800fdac <gc_execute_block+0x2d7c>
 800fda8:	ed93 7a03 	vldr	s14, [r3, #12]
 800fdac:	4b25      	ldr	r3, [pc, #148]	@ (800fe44 <gc_execute_block+0x2e14>)
 800fdae:	ed83 7a1a 	vstr	s14, [r3, #104]	@ 0x68
        if(gc_block.modal.motion != MotionMode_None && gc_block.modal.motion != MotionMode_Seek) {
 800fdb2:	e747      	b.n	800fc44 <gc_execute_block+0x2c14>
        plan_data.spindle.hal = gc_state.spindle.hal;
 800fdb4:	4b22      	ldr	r3, [pc, #136]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fdb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fdb8:	9318      	str	r3, [sp, #96]	@ 0x60
 800fdba:	e782      	b.n	800fcc2 <gc_execute_block+0x2c92>
        tool_data_t *pending_tool = tool_get_pending((gc_state.tool_pending = gc_block.values.t));
 800fdbc:	4b20      	ldr	r3, [pc, #128]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fdbe:	6798      	str	r0, [r3, #120]	@ 0x78
 800fdc0:	f7fc fdea 	bl	800c998 <tool_get_pending>
 800fdc4:	4604      	mov	r4, r0
        if(set_tool || settings.tool_change.mode == ToolChange_Ignore || !(hal.stream.suspend_read || hal.tool.change)) {
 800fdc6:	9b07      	ldr	r3, [sp, #28]
 800fdc8:	b963      	cbnz	r3, 800fde4 <gc_execute_block+0x2db4>
 800fdca:	4b23      	ldr	r3, [pc, #140]	@ (800fe58 <gc_execute_block+0x2e28>)
 800fdcc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800fdd0:	2b04      	cmp	r3, #4
 800fdd2:	d007      	beq.n	800fde4 <gc_execute_block+0x2db4>
 800fdd4:	4b21      	ldr	r3, [pc, #132]	@ (800fe5c <gc_execute_block+0x2e2c>)
 800fdd6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800fdda:	bb33      	cbnz	r3, 800fe2a <gc_execute_block+0x2dfa>
 800fddc:	4b1f      	ldr	r3, [pc, #124]	@ (800fe5c <gc_execute_block+0x2e2c>)
 800fdde:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800fde2:	bb13      	cbnz	r3, 800fe2a <gc_execute_block+0x2dfa>
    if(grbl.tool_table.n_tools)
 800fde4:	4b1e      	ldr	r3, [pc, #120]	@ (800fe60 <gc_execute_block+0x2e30>)
 800fde6:	699b      	ldr	r3, [r3, #24]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d03b      	beq.n	800fe64 <gc_execute_block+0x2e34>
        gc_state.tool = tool;
 800fdec:	4b14      	ldr	r3, [pc, #80]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fdee:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
            if(grbl.on_tool_selected) {
 800fdf2:	4b1b      	ldr	r3, [pc, #108]	@ (800fe60 <gc_execute_block+0x2e30>)
 800fdf4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800fdf8:	b163      	cbz	r3, 800fe14 <gc_execute_block+0x2de4>
                spindle_state_t state = gc_state.modal.spindle.state;
 800fdfa:	4f11      	ldr	r7, [pc, #68]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fdfc:	7ebe      	ldrb	r6, [r7, #26]
                grbl.on_tool_selected(gc_state.tool);
 800fdfe:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 800fe02:	4798      	blx	r3
                if(state.value != gc_state.modal.spindle.state.value)
 800fe04:	b2f6      	uxtb	r6, r6
 800fe06:	7ebb      	ldrb	r3, [r7, #26]
 800fe08:	429e      	cmp	r6, r3
 800fe0a:	d003      	beq.n	800fe14 <gc_execute_block+0x2de4>
                    gc_block.modal.spindle.state = gc_state.modal.spindle.state;
 800fe0c:	7eba      	ldrb	r2, [r7, #26]
 800fe0e:	4b0d      	ldr	r3, [pc, #52]	@ (800fe44 <gc_execute_block+0x2e14>)
 800fe10:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            if(grbl.on_tool_changed)
 800fe14:	4b12      	ldr	r3, [pc, #72]	@ (800fe60 <gc_execute_block+0x2e30>)
 800fe16:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800fe1a:	b11b      	cbz	r3, 800fe24 <gc_execute_block+0x2df4>
                grbl.on_tool_changed(gc_state.tool);
 800fe1c:	4a08      	ldr	r2, [pc, #32]	@ (800fe40 <gc_execute_block+0x2e10>)
 800fe1e:	f8d2 00d0 	ldr.w	r0, [r2, #208]	@ 0xd0
 800fe22:	4798      	blx	r3
            system_add_rt_report(Report_Tool);
 800fe24:	2080      	movs	r0, #128	@ 0x80
 800fe26:	f011 fc2b 	bl	8021680 <system_add_rt_report>
        if(hal.tool.select)
 800fe2a:	4b0c      	ldr	r3, [pc, #48]	@ (800fe5c <gc_execute_block+0x2e2c>)
 800fe2c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800fe30:	b1f3      	cbz	r3, 800fe70 <gc_execute_block+0x2e40>
            hal.tool.select(pending_tool, !set_tool);
 800fe32:	9a07      	ldr	r2, [sp, #28]
 800fe34:	f082 0101 	eor.w	r1, r2, #1
 800fe38:	4620      	mov	r0, r4
 800fe3a:	4798      	blx	r3
 800fe3c:	e74a      	b.n	800fcd4 <gc_execute_block+0x2ca4>
 800fe3e:	bf00      	nop
 800fe40:	20000ee4 	.word	0x20000ee4
 800fe44:	20000ddc 	.word	0x20000ddc
 800fe48:	20000dd8 	.word	0x20000dd8
 800fe4c:	00000000 	.word	0x00000000
 800fe50:	20000f34 	.word	0x20000f34
 800fe54:	40c90fdb 	.word	0x40c90fdb
 800fe58:	20001bc4 	.word	0x20001bc4
 800fe5c:	200011ac 	.word	0x200011ac
 800fe60:	20001394 	.word	0x20001394
        gc_state.tool->tool_id = tool->tool_id;
 800fe64:	4ba0      	ldr	r3, [pc, #640]	@ (80100e8 <gc_execute_block+0x30b8>)
 800fe66:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800fe6a:	6922      	ldr	r2, [r4, #16]
 800fe6c:	611a      	str	r2, [r3, #16]
 800fe6e:	e7c0      	b.n	800fdf2 <gc_execute_block+0x2dc2>
            system_add_rt_report(Report_Tool);
 800fe70:	2080      	movs	r0, #128	@ 0x80
 800fe72:	f011 fc05 	bl	8021680 <system_add_rt_report>
 800fe76:	e72d      	b.n	800fcd4 <gc_execute_block+0x2ca4>
                add_output_command(&gc_block.output_command);
 800fe78:	489c      	ldr	r0, [pc, #624]	@ (80100ec <gc_execute_block+0x30bc>)
 800fe7a:	f7fc fdcf 	bl	800ca1c <add_output_command>
    if (command_words.M6 && !set_tool && !check_mode) {
 800fe7e:	f019 0f01 	tst.w	r9, #1
 800fe82:	d004      	beq.n	800fe8e <gc_execute_block+0x2e5e>
 800fe84:	9b07      	ldr	r3, [sp, #28]
 800fe86:	b913      	cbnz	r3, 800fe8e <gc_execute_block+0x2e5e>
 800fe88:	2d02      	cmp	r5, #2
 800fe8a:	f040 8083 	bne.w	800ff94 <gc_execute_block+0x2f64>
    if(gc_state.modal.spindle.state.value != gc_block.modal.spindle.state.value) {
 800fe8e:	4b96      	ldr	r3, [pc, #600]	@ (80100e8 <gc_execute_block+0x30b8>)
 800fe90:	7e9a      	ldrb	r2, [r3, #26]
 800fe92:	4b97      	ldr	r3, [pc, #604]	@ (80100f0 <gc_execute_block+0x30c0>)
 800fe94:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d021      	beq.n	800fee0 <gc_execute_block+0x2eb0>
        if(gc_block.spindle) {
 800fe9c:	4b94      	ldr	r3, [pc, #592]	@ (80100f0 <gc_execute_block+0x30c0>)
 800fe9e:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 800fea2:	2800      	cmp	r0, #0
 800fea4:	f000 80e5 	beq.w	8010072 <gc_execute_block+0x3042>
            if(grbl.on_spindle_programmed)
 800fea8:	4b92      	ldr	r3, [pc, #584]	@ (80100f4 <gc_execute_block+0x30c4>)
 800feaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800feac:	b13b      	cbz	r3, 800febe <gc_execute_block+0x2e8e>
                grbl.on_spindle_programmed(gc_block.spindle, gc_block.modal.spindle.state,  plan_data.spindle.rpm, gc_block.modal.spindle.rpm_mode);
 800feae:	4990      	ldr	r1, [pc, #576]	@ (80100f0 <gc_execute_block+0x30c0>)
 800feb0:	f891 2023 	ldrb.w	r2, [r1, #35]	@ 0x23
 800feb4:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 800feb8:	f891 1022 	ldrb.w	r1, [r1, #34]	@ 0x22
 800febc:	4798      	blx	r3
            if((spindle_ok = spindle_sync(gc_block.spindle, gc_block.modal.spindle.state, plan_data.spindle.rpm)))
 800febe:	4b8c      	ldr	r3, [pc, #560]	@ (80100f0 <gc_execute_block+0x30c0>)
 800fec0:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 800fec4:	f893 1022 	ldrb.w	r1, [r3, #34]	@ 0x22
 800fec8:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 800fecc:	f00e f8ec 	bl	801e0a8 <spindle_sync>
 800fed0:	4603      	mov	r3, r0
 800fed2:	2800      	cmp	r0, #0
 800fed4:	f040 80bd 	bne.w	8010052 <gc_execute_block+0x3022>
        if(!(spindle_event = !spindle_ok))
 800fed8:	f080 0301 	eor.w	r3, r0, #1
 800fedc:	b2db      	uxtb	r3, r3
 800fede:	9308      	str	r3, [sp, #32]
    if(spindle_event && grbl.on_spindle_programmed)
 800fee0:	9b08      	ldr	r3, [sp, #32]
 800fee2:	b14b      	cbz	r3, 800fef8 <gc_execute_block+0x2ec8>
 800fee4:	4b83      	ldr	r3, [pc, #524]	@ (80100f4 <gc_execute_block+0x30c4>)
 800fee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fee8:	b133      	cbz	r3, 800fef8 <gc_execute_block+0x2ec8>
        grbl.on_spindle_programmed(gc_state.spindle.hal, gc_state.modal.spindle.state, gc_state.spindle.rpm, gc_state.modal.spindle.rpm_mode);
 800feea:	487f      	ldr	r0, [pc, #508]	@ (80100e8 <gc_execute_block+0x30b8>)
 800feec:	7ec2      	ldrb	r2, [r0, #27]
 800feee:	ed90 0a14 	vldr	s0, [r0, #80]	@ 0x50
 800fef2:	7e81      	ldrb	r1, [r0, #26]
 800fef4:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 800fef6:	4798      	blx	r3
    plan_data.spindle.state = gc_state.modal.spindle.state; // Set condition flag for planner use.
 800fef8:	4b7b      	ldr	r3, [pc, #492]	@ (80100e8 <gc_execute_block+0x30b8>)
 800fefa:	7e9a      	ldrb	r2, [r3, #26]
 800fefc:	f88d 2058 	strb.w	r2, [sp, #88]	@ 0x58
    plan_data.condition.is_rpm_rate_adjusted = gc_state.is_rpm_rate_adjusted;
 800ff00:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800ff04:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800ff08:	f363 12c7 	bfi	r2, r3, #7, #1
 800ff0c:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
    plan_data.condition.is_laser_ppi_mode = gc_state.is_rpm_rate_adjusted && gc_state.is_laser_ppi_mode;
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	f000 80d7 	beq.w	80100c4 <gc_execute_block+0x3094>
 800ff16:	4b74      	ldr	r3, [pc, #464]	@ (80100e8 <gc_execute_block+0x30b8>)
 800ff18:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	f000 80d2 	beq.w	80100c6 <gc_execute_block+0x3096>
 800ff22:	2301      	movs	r3, #1
 800ff24:	e0cf      	b.n	80100c6 <gc_execute_block+0x3096>
                hal.port.digital_out(gc_block.output_command.port, gc_block.output_command.value != 0.0f);
 800ff26:	4b74      	ldr	r3, [pc, #464]	@ (80100f8 <gc_execute_block+0x30c8>)
 800ff28:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800ff2c:	4b70      	ldr	r3, [pc, #448]	@ (80100f0 <gc_execute_block+0x30c0>)
 800ff2e:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 800ff32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff36:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ff3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff3e:	bf14      	ite	ne
 800ff40:	2101      	movne	r1, #1
 800ff42:	2100      	moveq	r1, #0
 800ff44:	f893 00be 	ldrb.w	r0, [r3, #190]	@ 0xbe
 800ff48:	4790      	blx	r2
                break;
 800ff4a:	e798      	b.n	800fe7e <gc_execute_block+0x2e4e>
                sys.var5399 = hal.port.wait_on_input((io_port_type_t)gc_block.output_command.is_digital, gc_block.output_command.port, (wait_mode_t)gc_block.values.l, gc_block.values.q);
 800ff4c:	4b6a      	ldr	r3, [pc, #424]	@ (80100f8 <gc_execute_block+0x30c8>)
 800ff4e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800ff52:	4867      	ldr	r0, [pc, #412]	@ (80100f0 <gc_execute_block+0x30c0>)
 800ff54:	ed90 0a18 	vldr	s0, [r0, #96]	@ 0x60
 800ff58:	f890 20b4 	ldrb.w	r2, [r0, #180]	@ 0xb4
 800ff5c:	f890 10be 	ldrb.w	r1, [r0, #190]	@ 0xbe
 800ff60:	f890 00bc 	ldrb.w	r0, [r0, #188]	@ 0xbc
 800ff64:	4798      	blx	r3
 800ff66:	4b65      	ldr	r3, [pc, #404]	@ (80100fc <gc_execute_block+0x30cc>)
 800ff68:	6518      	str	r0, [r3, #80]	@ 0x50
                system_add_rt_report(Report_M66Result);
 800ff6a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800ff6e:	f011 fb87 	bl	8021680 <system_add_rt_report>
                break;
 800ff72:	e784      	b.n	800fe7e <gc_execute_block+0x2e4e>
                add_output_command(&gc_block.output_command);
 800ff74:	485d      	ldr	r0, [pc, #372]	@ (80100ec <gc_execute_block+0x30bc>)
 800ff76:	f7fc fd51 	bl	800ca1c <add_output_command>
                break;
 800ff7a:	e780      	b.n	800fe7e <gc_execute_block+0x2e4e>
                hal.port.analog_out(gc_block.output_command.port, gc_block.output_command.value);
 800ff7c:	4b5e      	ldr	r3, [pc, #376]	@ (80100f8 <gc_execute_block+0x30c8>)
 800ff7e:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 800ff82:	4b5b      	ldr	r3, [pc, #364]	@ (80100f0 <gc_execute_block+0x30c0>)
 800ff84:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 800ff88:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800ff8c:	f893 00be 	ldrb.w	r0, [r3, #190]	@ 0xbe
 800ff90:	4790      	blx	r2
                break;
 800ff92:	e774      	b.n	800fe7e <gc_execute_block+0x2e4e>
        tool_data_t *pending_tool = tool_get_pending(gc_state.tool_pending);
 800ff94:	4b54      	ldr	r3, [pc, #336]	@ (80100e8 <gc_execute_block+0x30b8>)
 800ff96:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800ff98:	f7fc fcfe 	bl	800c998 <tool_get_pending>
 800ff9c:	4606      	mov	r6, r0
        protocol_buffer_synchronize();
 800ff9e:	f007 fb17 	bl	80175d0 <protocol_buffer_synchronize>
        if(plan_data.message) {
 800ffa2:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800ffa4:	b118      	cbz	r0, 800ffae <gc_execute_block+0x2f7e>
            gc_output_message(plan_data.message);
 800ffa6:	f7fc ff2d 	bl	800ce04 <gc_output_message>
            plan_data.message = NULL;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	931c      	str	r3, [sp, #112]	@ 0x70
        if(pending_tool->tool_id != gc_state.tool->tool_id) {
 800ffae:	6932      	ldr	r2, [r6, #16]
 800ffb0:	4b4d      	ldr	r3, [pc, #308]	@ (80100e8 <gc_execute_block+0x30b8>)
 800ffb2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800ffb6:	691b      	ldr	r3, [r3, #16]
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	f43f af68 	beq.w	800fe8e <gc_execute_block+0x2e5e>
            if(grbl.on_tool_selected) {
 800ffbe:	4b4d      	ldr	r3, [pc, #308]	@ (80100f4 <gc_execute_block+0x30c4>)
 800ffc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ffc4:	b15b      	cbz	r3, 800ffde <gc_execute_block+0x2fae>
                spindle_state_t state = gc_state.modal.spindle.state;
 800ffc6:	4f48      	ldr	r7, [pc, #288]	@ (80100e8 <gc_execute_block+0x30b8>)
 800ffc8:	7ebc      	ldrb	r4, [r7, #26]
                grbl.on_tool_selected(pending_tool);
 800ffca:	4630      	mov	r0, r6
 800ffcc:	4798      	blx	r3
                if(state.value != gc_state.modal.spindle.state.value)
 800ffce:	b2e4      	uxtb	r4, r4
 800ffd0:	7ebb      	ldrb	r3, [r7, #26]
 800ffd2:	429c      	cmp	r4, r3
 800ffd4:	d003      	beq.n	800ffde <gc_execute_block+0x2fae>
                    gc_block.modal.spindle.state = gc_state.modal.spindle.state;
 800ffd6:	7eba      	ldrb	r2, [r7, #26]
 800ffd8:	4b45      	ldr	r3, [pc, #276]	@ (80100f0 <gc_execute_block+0x30c0>)
 800ffda:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            if(hal.tool.change) { // ATC
 800ffde:	4b46      	ldr	r3, [pc, #280]	@ (80100f8 <gc_execute_block+0x30c8>)
 800ffe0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ffe4:	b313      	cbz	r3, 801002c <gc_execute_block+0x2ffc>
                if((int_value = (uint_fast16_t)hal.tool.change(&gc_state)) != Status_OK) {
 800ffe6:	4840      	ldr	r0, [pc, #256]	@ (80100e8 <gc_execute_block+0x30b8>)
 800ffe8:	4798      	blx	r3
 800ffea:	4604      	mov	r4, r0
 800ffec:	2800      	cmp	r0, #0
 800ffee:	f47d a8fc 	bne.w	800d1ea <gc_execute_block+0x1ba>
                system_add_rt_report(Report_Tool);
 800fff2:	2080      	movs	r0, #128	@ 0x80
 800fff4:	f011 fb44 	bl	8021680 <system_add_rt_report>
    if(grbl.tool_table.n_tools)
 800fff8:	4b3e      	ldr	r3, [pc, #248]	@ (80100f4 <gc_execute_block+0x30c4>)
 800fffa:	699b      	ldr	r3, [r3, #24]
 800fffc:	b31b      	cbz	r3, 8010046 <gc_execute_block+0x3016>
        gc_state.tool = tool;
 800fffe:	4b3a      	ldr	r3, [pc, #232]	@ (80100e8 <gc_execute_block+0x30b8>)
 8010000:	f8c3 60d0 	str.w	r6, [r3, #208]	@ 0xd0
            if(grbl.on_tool_changed && state_get() != STATE_TOOL_CHANGE)
 8010004:	4b3b      	ldr	r3, [pc, #236]	@ (80100f4 <gc_execute_block+0x30c4>)
 8010006:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801000a:	2b00      	cmp	r3, #0
 801000c:	f43f af3f 	beq.w	800fe8e <gc_execute_block+0x2e5e>
 8010010:	f00e fb78 	bl	801e704 <state_get>
 8010014:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8010018:	f43f af39 	beq.w	800fe8e <gc_execute_block+0x2e5e>
                grbl.on_tool_changed(gc_state.tool);
 801001c:	4b35      	ldr	r3, [pc, #212]	@ (80100f4 <gc_execute_block+0x30c4>)
 801001e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010022:	4a31      	ldr	r2, [pc, #196]	@ (80100e8 <gc_execute_block+0x30b8>)
 8010024:	f8d2 00d0 	ldr.w	r0, [r2, #208]	@ 0xd0
 8010028:	4798      	blx	r3
 801002a:	e730      	b.n	800fe8e <gc_execute_block+0x2e5e>
                gc_state.tool_change = true;
 801002c:	4b2e      	ldr	r3, [pc, #184]	@ (80100e8 <gc_execute_block+0x30b8>)
 801002e:	2201      	movs	r2, #1
 8010030:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
                system_set_exec_state_flag(EXEC_TOOL_CHANGE);   // Set up program pause for manual tool change
 8010034:	4b30      	ldr	r3, [pc, #192]	@ (80100f8 <gc_execute_block+0x30c8>)
 8010036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010038:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801003c:	4830      	ldr	r0, [pc, #192]	@ (8010100 <gc_execute_block+0x30d0>)
 801003e:	4798      	blx	r3
                protocol_execute_realtime();                    // Execute...
 8010040:	f006 fff8 	bl	8017034 <protocol_execute_realtime>
 8010044:	e7d8      	b.n	800fff8 <gc_execute_block+0x2fc8>
        gc_state.tool->tool_id = tool->tool_id;
 8010046:	4b28      	ldr	r3, [pc, #160]	@ (80100e8 <gc_execute_block+0x30b8>)
 8010048:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801004c:	6932      	ldr	r2, [r6, #16]
 801004e:	611a      	str	r2, [r3, #16]
 8010050:	e7d8      	b.n	8010004 <gc_execute_block+0x2fd4>
                gc_block.spindle->param->state = gc_block.modal.spindle.state;
 8010052:	4a27      	ldr	r2, [pc, #156]	@ (80100f0 <gc_execute_block+0x30c0>)
 8010054:	f8d2 10cc 	ldr.w	r1, [r2, #204]	@ 0xcc
 8010058:	6849      	ldr	r1, [r1, #4]
 801005a:	f892 0022 	ldrb.w	r0, [r2, #34]	@ 0x22
 801005e:	7208      	strb	r0, [r1, #8]
        if(!(spindle_event = !spindle_ok))
 8010060:	f083 0301 	eor.w	r3, r3, #1
 8010064:	b2db      	uxtb	r3, r3
 8010066:	9308      	str	r3, [sp, #32]
            gc_state.modal.spindle.state = gc_block.modal.spindle.state;
 8010068:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 801006c:	4b1e      	ldr	r3, [pc, #120]	@ (80100e8 <gc_execute_block+0x30b8>)
 801006e:	769a      	strb	r2, [r3, #26]
 8010070:	e736      	b.n	800fee0 <gc_execute_block+0x2eb0>
                if(spindle_is_enabled(--idx)) {
 8010072:	2000      	movs	r0, #0
 8010074:	f00d fea0 	bl	801ddb8 <spindle_is_enabled>
 8010078:	9008      	str	r0, [sp, #32]
 801007a:	b910      	cbnz	r0, 8010082 <gc_execute_block+0x3052>
        if(!(spindle_event = !spindle_ok))
 801007c:	2301      	movs	r3, #1
 801007e:	9308      	str	r3, [sp, #32]
 8010080:	e72e      	b.n	800fee0 <gc_execute_block+0x2eb0>
                    spindle_ptrs_t *spindle = spindle_get(idx);
 8010082:	2000      	movs	r0, #0
 8010084:	f00d feae 	bl	801dde4 <spindle_get>
 8010088:	4604      	mov	r4, r0
                    if(grbl.on_spindle_programmed)
 801008a:	4b1a      	ldr	r3, [pc, #104]	@ (80100f4 <gc_execute_block+0x30c4>)
 801008c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801008e:	b13b      	cbz	r3, 80100a0 <gc_execute_block+0x3070>
                        grbl.on_spindle_programmed(spindle, gc_block.modal.spindle.state,  plan_data.spindle.rpm, gc_block.modal.spindle.rpm_mode);
 8010090:	4917      	ldr	r1, [pc, #92]	@ (80100f0 <gc_execute_block+0x30c0>)
 8010092:	f891 2023 	ldrb.w	r2, [r1, #35]	@ 0x23
 8010096:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 801009a:	f891 1022 	ldrb.w	r1, [r1, #34]	@ 0x22
 801009e:	4798      	blx	r3
                    if(spindle_sync(spindle, gc_block.modal.spindle.state, plan_data.spindle.rpm))
 80100a0:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 80100a4:	4b12      	ldr	r3, [pc, #72]	@ (80100f0 <gc_execute_block+0x30c0>)
 80100a6:	f893 1022 	ldrb.w	r1, [r3, #34]	@ 0x22
 80100aa:	4620      	mov	r0, r4
 80100ac:	f00d fffc 	bl	801e0a8 <spindle_sync>
 80100b0:	2800      	cmp	r0, #0
 80100b2:	f43f af15 	beq.w	800fee0 <gc_execute_block+0x2eb0>
                        spindle->param->state = gc_block.modal.spindle.state;
 80100b6:	6862      	ldr	r2, [r4, #4]
 80100b8:	490d      	ldr	r1, [pc, #52]	@ (80100f0 <gc_execute_block+0x30c0>)
 80100ba:	f891 1022 	ldrb.w	r1, [r1, #34]	@ 0x22
 80100be:	7211      	strb	r1, [r2, #8]
        if(!(spindle_event = !spindle_ok))
 80100c0:	9008      	str	r0, [sp, #32]
 80100c2:	e70d      	b.n	800fee0 <gc_execute_block+0x2eb0>
    plan_data.condition.is_laser_ppi_mode = gc_state.is_rpm_rate_adjusted && gc_state.is_laser_ppi_mode;
 80100c4:	2300      	movs	r3, #0
 80100c6:	f89d 2065 	ldrb.w	r2, [sp, #101]	@ 0x65
 80100ca:	f363 0200 	bfi	r2, r3, #0, #1
 80100ce:	f88d 2065 	strb.w	r2, [sp, #101]	@ 0x65
    switch(gc_block.state_action) {
 80100d2:	4b07      	ldr	r3, [pc, #28]	@ (80100f0 <gc_execute_block+0x30c0>)
 80100d4:	f893 10d0 	ldrb.w	r1, [r3, #208]	@ 0xd0
 80100d8:	f1a1 0346 	sub.w	r3, r1, #70	@ 0x46
 80100dc:	2b03      	cmp	r3, #3
 80100de:	d822      	bhi.n	8010126 <gc_execute_block+0x30f6>
 80100e0:	e8df f003 	tbb	[pc, r3]
 80100e4:	10851f10 	.word	0x10851f10
 80100e8:	20000ee4 	.word	0x20000ee4
 80100ec:	20000e98 	.word	0x20000e98
 80100f0:	20000ddc 	.word	0x20000ddc
 80100f4:	20001394 	.word	0x20001394
 80100f8:	200011ac 	.word	0x200011ac
 80100fc:	2000148c 	.word	0x2000148c
 8010100:	200014d4 	.word	0x200014d4
            gc_state.modal.rpm = gc_state.spindle.rpm;
 8010104:	48b1      	ldr	r0, [pc, #708]	@ (80103cc <gc_execute_block+0x339c>)
 8010106:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8010108:	6303      	str	r3, [r0, #48]	@ 0x30
            gc_state.modal.feed_rate = gc_state.feed_rate;
 801010a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 801010c:	62c3      	str	r3, [r0, #44]	@ 0x2c
            if(!ngc_modal_state_save(&gc_state.modal, gc_block.state_action == ModalState_SaveAutoRestore))
 801010e:	2949      	cmp	r1, #73	@ 0x49
 8010110:	bf14      	ite	ne
 8010112:	2100      	movne	r1, #0
 8010114:	2101      	moveq	r1, #1
 8010116:	f004 fdc3 	bl	8014ca0 <ngc_modal_state_save>
 801011a:	b920      	cbnz	r0, 8010126 <gc_execute_block+0x30f6>
                FAIL(Status_FlowControlOutOfMemory); // [Out of memory] TODO: allocate memory during validation? Static allocation?
 801011c:	2453      	movs	r4, #83	@ 0x53
 801011e:	f7fd b864 	b.w	800d1ea <gc_execute_block+0x1ba>
            ngc_modal_state_invalidate();
 8010122:	f004 fdf5 	bl	8014d10 <ngc_modal_state_invalidate>
    if (gc_parser_flags.set_coolant && gc_state.modal.coolant.value != gc_block.modal.coolant.value) {
 8010126:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801012a:	d006      	beq.n	801013a <gc_execute_block+0x310a>
 801012c:	4ba7      	ldr	r3, [pc, #668]	@ (80103cc <gc_execute_block+0x339c>)
 801012e:	7e5a      	ldrb	r2, [r3, #25]
 8010130:	4ba7      	ldr	r3, [pc, #668]	@ (80103d0 <gc_execute_block+0x33a0>)
 8010132:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010136:	429a      	cmp	r2, r3
 8010138:	d15c      	bne.n	80101f4 <gc_execute_block+0x31c4>
    plan_data.condition.coolant = gc_state.modal.coolant; // Set condition flag for planner use.
 801013a:	4ba4      	ldr	r3, [pc, #656]	@ (80103cc <gc_execute_block+0x339c>)
 801013c:	7e5a      	ldrb	r2, [r3, #25]
 801013e:	f88d 2066 	strb.w	r2, [sp, #102]	@ 0x66
    sys.override_delay.flags = 0;
 8010142:	4aa4      	ldr	r2, [pc, #656]	@ (80103d4 <gc_execute_block+0x33a4>)
 8010144:	2100      	movs	r1, #0
 8010146:	f882 102c 	strb.w	r1, [r2, #44]	@ 0x2c
    if (gc_state.modal.override_ctrl.value != gc_block.modal.override_ctrl.value) {
 801014a:	7f1a      	ldrb	r2, [r3, #28]
 801014c:	4ba0      	ldr	r3, [pc, #640]	@ (80103d0 <gc_execute_block+0x33a0>)
 801014e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8010152:	429a      	cmp	r2, r3
 8010154:	d01e      	beq.n	8010194 <gc_execute_block+0x3164>
        gc_state.modal.override_ctrl = gc_block.modal.override_ctrl;
 8010156:	4a9d      	ldr	r2, [pc, #628]	@ (80103cc <gc_execute_block+0x339c>)
 8010158:	4b9d      	ldr	r3, [pc, #628]	@ (80103d0 <gc_execute_block+0x33a0>)
 801015a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801015e:	7713      	strb	r3, [r2, #28]
        gc_state.modal.spindle.state.override_disable = gc_state.spindle.hal->param->state.override_disable = gc_state.modal.override_ctrl.spindle_rpm_disable;
 8010160:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8010162:	6859      	ldr	r1, [r3, #4]
 8010164:	7f13      	ldrb	r3, [r2, #28]
 8010166:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801016a:	7a08      	ldrb	r0, [r1, #8]
 801016c:	f363 1004 	bfi	r0, r3, #4, #1
 8010170:	7208      	strb	r0, [r1, #8]
 8010172:	7e91      	ldrb	r1, [r2, #26]
 8010174:	f363 1104 	bfi	r1, r3, #4, #1
 8010178:	7691      	strb	r1, [r2, #26]
        if(gc_state.modal.override_ctrl.feed_rate_disable)
 801017a:	7f13      	ldrb	r3, [r2, #28]
 801017c:	f013 0f01 	tst.w	r3, #1
 8010180:	d145      	bne.n	801020e <gc_execute_block+0x31de>
        if(gc_state.modal.override_ctrl.spindle_rpm_disable)
 8010182:	4b92      	ldr	r3, [pc, #584]	@ (80103cc <gc_execute_block+0x339c>)
 8010184:	7f1b      	ldrb	r3, [r3, #28]
 8010186:	f013 0f04 	tst.w	r3, #4
 801018a:	d145      	bne.n	8010218 <gc_execute_block+0x31e8>
        mc_override_ctrl_update(gc_state.modal.override_ctrl); // NOTE: must be called last!
 801018c:	4b8f      	ldr	r3, [pc, #572]	@ (80103cc <gc_execute_block+0x339c>)
 801018e:	7f18      	ldrb	r0, [r3, #28]
 8010190:	f004 f974 	bl	801447c <mc_override_ctrl_update>
    if(gc_block.user_mcode && !check_mode) {
 8010194:	4b8e      	ldr	r3, [pc, #568]	@ (80103d0 <gc_execute_block+0x33a0>)
 8010196:	885b      	ldrh	r3, [r3, #2]
 8010198:	b1a3      	cbz	r3, 80101c4 <gc_execute_block+0x3194>
 801019a:	2d02      	cmp	r5, #2
 801019c:	d012      	beq.n	80101c4 <gc_execute_block+0x3194>
        if(gc_block.user_mcode_sync)
 801019e:	4b8c      	ldr	r3, [pc, #560]	@ (80103d0 <gc_execute_block+0x33a0>)
 80101a0:	791b      	ldrb	r3, [r3, #4]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d13e      	bne.n	8010224 <gc_execute_block+0x31f4>
        gc_block.words.mask = user_words.mask;
 80101a6:	4b8c      	ldr	r3, [pc, #560]	@ (80103d8 <gc_execute_block+0x33a8>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	4c89      	ldr	r4, [pc, #548]	@ (80103d0 <gc_execute_block+0x33a0>)
 80101ac:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
        hal.user_mcode.execute(state_get(), &gc_block);
 80101b0:	4b8a      	ldr	r3, [pc, #552]	@ (80103dc <gc_execute_block+0x33ac>)
 80101b2:	f8d3 61c0 	ldr.w	r6, [r3, #448]	@ 0x1c0
 80101b6:	f00e faa5 	bl	801e704 <state_get>
 80101ba:	4621      	mov	r1, r4
 80101bc:	47b0      	blx	r6
        gc_block.words.mask = 0;
 80101be:	2300      	movs	r3, #0
 80101c0:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
    if (gc_block.non_modal_command == NonModal_Dwell)
 80101c4:	4b82      	ldr	r3, [pc, #520]	@ (80103d0 <gc_execute_block+0x33a0>)
 80101c6:	781b      	ldrb	r3, [r3, #0]
 80101c8:	2b04      	cmp	r3, #4
 80101ca:	d02e      	beq.n	801022a <gc_execute_block+0x31fa>
    gc_state.modal.plane_select = gc_block.modal.plane_select;
 80101cc:	4a80      	ldr	r2, [pc, #512]	@ (80103d0 <gc_execute_block+0x33a0>)
 80101ce:	7b91      	ldrb	r1, [r2, #14]
 80101d0:	4b7e      	ldr	r3, [pc, #504]	@ (80103cc <gc_execute_block+0x339c>)
 80101d2:	7199      	strb	r1, [r3, #6]
    gc_state.modal.units_imperial = gc_block.modal.units_imperial;
 80101d4:	7ad2      	ldrb	r2, [r2, #11]
 80101d6:	70da      	strb	r2, [r3, #3]
    if (command_words.G8) { // Indicates a change.
 80101d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101da:	2b00      	cmp	r3, #0
 80101dc:	f000 80b0 	beq.w	8010340 <gc_execute_block+0x3310>
        gc_state.modal.tool_offset_mode = gc_block.modal.tool_offset_mode;
 80101e0:	4b7b      	ldr	r3, [pc, #492]	@ (80103d0 <gc_execute_block+0x33a0>)
 80101e2:	7bd8      	ldrb	r0, [r3, #15]
 80101e4:	4b79      	ldr	r3, [pc, #484]	@ (80103cc <gc_execute_block+0x339c>)
 80101e6:	71d8      	strb	r0, [r3, #7]
        bool tlo_changed = false;
 80101e8:	2200      	movs	r2, #0
        idx = N_AXIS;
 80101ea:	2303      	movs	r3, #3
 80101ec:	e035      	b.n	801025a <gc_execute_block+0x322a>
            ngc_modal_state_restore();
 80101ee:	f004 fdab 	bl	8014d48 <ngc_modal_state_restore>
            break;
 80101f2:	e798      	b.n	8010126 <gc_execute_block+0x30f6>
        if(coolant_sync(gc_block.modal.coolant))
 80101f4:	4b76      	ldr	r3, [pc, #472]	@ (80103d0 <gc_execute_block+0x33a0>)
 80101f6:	f893 0021 	ldrb.w	r0, [r3, #33]	@ 0x21
 80101fa:	f7fc fa97 	bl	800c72c <coolant_sync>
 80101fe:	2800      	cmp	r0, #0
 8010200:	d09b      	beq.n	801013a <gc_execute_block+0x310a>
            gc_state.modal.coolant = gc_block.modal.coolant;
 8010202:	4b73      	ldr	r3, [pc, #460]	@ (80103d0 <gc_execute_block+0x33a0>)
 8010204:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8010208:	4b70      	ldr	r3, [pc, #448]	@ (80103cc <gc_execute_block+0x339c>)
 801020a:	765a      	strb	r2, [r3, #25]
 801020c:	e795      	b.n	801013a <gc_execute_block+0x310a>
            plan_feed_override(0, 0);
 801020e:	2100      	movs	r1, #0
 8010210:	4608      	mov	r0, r1
 8010212:	f006 fa09 	bl	8016628 <plan_feed_override>
 8010216:	e7b4      	b.n	8010182 <gc_execute_block+0x3152>
            spindle_set_override(gc_state.spindle.hal, DEFAULT_SPINDLE_RPM_OVERRIDE);
 8010218:	2164      	movs	r1, #100	@ 0x64
 801021a:	4b6c      	ldr	r3, [pc, #432]	@ (80103cc <gc_execute_block+0x339c>)
 801021c:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 801021e:	f00d ffa7 	bl	801e170 <spindle_set_override>
 8010222:	e7b3      	b.n	801018c <gc_execute_block+0x315c>
            protocol_buffer_synchronize(); // Ensure user defined mcode is executed when specified in program.
 8010224:	f007 f9d4 	bl	80175d0 <protocol_buffer_synchronize>
 8010228:	e7bd      	b.n	80101a6 <gc_execute_block+0x3176>
        mc_dwell(gc_block.values.p);
 801022a:	4b69      	ldr	r3, [pc, #420]	@ (80103d0 <gc_execute_block+0x33a0>)
 801022c:	ed93 0a17 	vldr	s0, [r3, #92]	@ 0x5c
 8010230:	f003 fec8 	bl	8013fc4 <mc_dwell>
 8010234:	e7ca      	b.n	80101cc <gc_execute_block+0x319c>
                    tlo_changed |= gc_state.tool_length_offset[idx] != 0.0f;
 8010236:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 801023a:	4964      	ldr	r1, [pc, #400]	@ (80103cc <gc_execute_block+0x339c>)
 801023c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010240:	edd1 7a01 	vldr	s15, [r1, #4]
 8010244:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801024c:	bf18      	it	ne
 801024e:	f042 0201 	orrne.w	r2, r2, #1
                    gc_state.tool_length_offset[idx] = 0.0f;
 8010252:	2400      	movs	r4, #0
 8010254:	604c      	str	r4, [r1, #4]
        } while(idx);
 8010256:	2b00      	cmp	r3, #0
 8010258:	d070      	beq.n	801033c <gc_execute_block+0x330c>
            idx--;
 801025a:	3b01      	subs	r3, #1
            switch(gc_state.modal.tool_offset_mode) {
 801025c:	2803      	cmp	r0, #3
 801025e:	d8fa      	bhi.n	8010256 <gc_execute_block+0x3226>
 8010260:	a101      	add	r1, pc, #4	@ (adr r1, 8010268 <gc_execute_block+0x3238>)
 8010262:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8010266:	bf00      	nop
 8010268:	08010237 	.word	0x08010237
 801026c:	08010279 	.word	0x08010279
 8010270:	080102f9 	.word	0x080102f9
 8010274:	080102bb 	.word	0x080102bb
                    if (gc_state.tool_length_offset[idx] != grbl.tool_table.tool[gc_block.values.h].offset[idx]) {
 8010278:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 801027c:	4953      	ldr	r1, [pc, #332]	@ (80103cc <gc_execute_block+0x339c>)
 801027e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010282:	ed91 7a01 	vldr	s14, [r1, #4]
 8010286:	4956      	ldr	r1, [pc, #344]	@ (80103e0 <gc_execute_block+0x33b0>)
 8010288:	69c9      	ldr	r1, [r1, #28]
 801028a:	4c51      	ldr	r4, [pc, #324]	@ (80103d0 <gc_execute_block+0x33a0>)
 801028c:	f8d4 40ac 	ldr.w	r4, [r4, #172]	@ 0xac
 8010290:	2614      	movs	r6, #20
 8010292:	fb06 1104 	mla	r1, r6, r4, r1
 8010296:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801029a:	edd1 7a00 	vldr	s15, [r1]
 801029e:	eeb4 7a67 	vcmp.f32	s14, s15
 80102a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102a6:	d0d6      	beq.n	8010256 <gc_execute_block+0x3226>
                        gc_state.tool_length_offset[idx] = grbl.tool_table.tool[gc_block.values.h].offset[idx];
 80102a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80102ac:	4a47      	ldr	r2, [pc, #284]	@ (80103cc <gc_execute_block+0x339c>)
 80102ae:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80102b2:	edc2 7a01 	vstr	s15, [r2, #4]
                        tlo_changed = true;
 80102b6:	2201      	movs	r2, #1
 80102b8:	e7cd      	b.n	8010256 <gc_execute_block+0x3226>
                    tlo_changed |= grbl.tool_table.tool[gc_block.values.h].offset[idx] != 0.0f;
 80102ba:	4949      	ldr	r1, [pc, #292]	@ (80103e0 <gc_execute_block+0x33b0>)
 80102bc:	69c9      	ldr	r1, [r1, #28]
 80102be:	4c44      	ldr	r4, [pc, #272]	@ (80103d0 <gc_execute_block+0x33a0>)
 80102c0:	f8d4 40ac 	ldr.w	r4, [r4, #172]	@ 0xac
 80102c4:	2614      	movs	r6, #20
 80102c6:	fb06 1104 	mla	r1, r6, r4, r1
 80102ca:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80102ce:	edd1 7a00 	vldr	s15, [r1]
 80102d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80102d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102da:	bf18      	it	ne
 80102dc:	f042 0201 	orrne.w	r2, r2, #1
                    gc_state.tool_length_offset[idx] += grbl.tool_table.tool[gc_block.values.h].offset[idx];
 80102e0:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 80102e4:	4939      	ldr	r1, [pc, #228]	@ (80103cc <gc_execute_block+0x339c>)
 80102e6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80102ea:	ed91 7a01 	vldr	s14, [r1, #4]
 80102ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80102f2:	edc1 7a01 	vstr	s15, [r1, #4]
                    break;
 80102f6:	e7ae      	b.n	8010256 <gc_execute_block+0x3226>
                    if (bit_istrue(axis_words.mask, bit(idx)) && gc_state.tool_length_offset[idx] != gc_block.values.xyz[idx]) {
 80102f8:	fa5f f18b 	uxtb.w	r1, fp
 80102fc:	40d9      	lsrs	r1, r3
 80102fe:	f011 0f01 	tst.w	r1, #1
 8010302:	d0a8      	beq.n	8010256 <gc_execute_block+0x3226>
 8010304:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8010308:	4930      	ldr	r1, [pc, #192]	@ (80103cc <gc_execute_block+0x339c>)
 801030a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801030e:	ed91 7a01 	vldr	s14, [r1, #4]
 8010312:	f103 0420 	add.w	r4, r3, #32
 8010316:	492e      	ldr	r1, [pc, #184]	@ (80103d0 <gc_execute_block+0x33a0>)
 8010318:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801031c:	edd1 7a01 	vldr	s15, [r1, #4]
 8010320:	eeb4 7a67 	vcmp.f32	s14, s15
 8010324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010328:	d095      	beq.n	8010256 <gc_execute_block+0x3226>
                        gc_state.tool_length_offset[idx] = gc_block.values.xyz[idx];
 801032a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801032e:	4a27      	ldr	r2, [pc, #156]	@ (80103cc <gc_execute_block+0x339c>)
 8010330:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010334:	edc2 7a01 	vstr	s15, [r2, #4]
                        tlo_changed = true;
 8010338:	2201      	movs	r2, #1
 801033a:	e78c      	b.n	8010256 <gc_execute_block+0x3226>
        if(tlo_changed) {
 801033c:	2a00      	cmp	r2, #0
 801033e:	d132      	bne.n	80103a6 <gc_execute_block+0x3376>
    if (gc_state.modal.coord_system.id != gc_block.modal.coord_system.id) {
 8010340:	4b22      	ldr	r3, [pc, #136]	@ (80103cc <gc_execute_block+0x339c>)
 8010342:	7d1a      	ldrb	r2, [r3, #20]
 8010344:	4b22      	ldr	r3, [pc, #136]	@ (80103d0 <gc_execute_block+0x33a0>)
 8010346:	7f1b      	ldrb	r3, [r3, #28]
 8010348:	429a      	cmp	r2, r3
 801034a:	d133      	bne.n	80103b4 <gc_execute_block+0x3384>
    gc_state.modal.distance_incremental = gc_block.modal.distance_incremental;
 801034c:	4b20      	ldr	r3, [pc, #128]	@ (80103d0 <gc_execute_block+0x33a0>)
 801034e:	7b19      	ldrb	r1, [r3, #12]
 8010350:	4a1e      	ldr	r2, [pc, #120]	@ (80103cc <gc_execute_block+0x339c>)
 8010352:	7111      	strb	r1, [r2, #4]
    gc_state.modal.retract_mode = gc_block.modal.retract_mode;
 8010354:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
 8010358:	7751      	strb	r1, [r2, #29]
    switch(gc_block.non_modal_command) {
 801035a:	781b      	ldrb	r3, [r3, #0]
 801035c:	2b41      	cmp	r3, #65	@ 0x41
 801035e:	d872      	bhi.n	8010446 <gc_execute_block+0x3416>
 8010360:	2b1c      	cmp	r3, #28
 8010362:	d245      	bcs.n	80103f0 <gc_execute_block+0x33c0>
 8010364:	2b0a      	cmp	r3, #10
 8010366:	f040 80ae 	bne.w	80104c6 <gc_execute_block+0x3496>
            if(gc_block.values.l == 2 || gc_block.values.l == 20) {
 801036a:	4b19      	ldr	r3, [pc, #100]	@ (80103d0 <gc_execute_block+0x33a0>)
 801036c:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8010370:	2b02      	cmp	r3, #2
 8010372:	d002      	beq.n	801037a <gc_execute_block+0x334a>
 8010374:	2b14      	cmp	r3, #20
 8010376:	f040 80a6 	bne.w	80104c6 <gc_execute_block+0x3496>
                settings_write_coord_data(gc_block.values.coord_data.id, &gc_block.values.coord_data.xyz);
 801037a:	491a      	ldr	r1, [pc, #104]	@ (80103e4 <gc_execute_block+0x33b4>)
 801037c:	f1a1 0490 	sub.w	r4, r1, #144	@ 0x90
 8010380:	7b08      	ldrb	r0, [r1, #12]
 8010382:	f00c fd41 	bl	801ce08 <settings_write_coord_data>
                if (gc_state.modal.coord_system.id == gc_block.values.coord_data.id) {
 8010386:	4b11      	ldr	r3, [pc, #68]	@ (80103cc <gc_execute_block+0x339c>)
 8010388:	7d1a      	ldrb	r2, [r3, #20]
 801038a:	f894 309c 	ldrb.w	r3, [r4, #156]	@ 0x9c
 801038e:	429a      	cmp	r2, r3
 8010390:	f040 8099 	bne.w	80104c6 <gc_execute_block+0x3496>
                    memcpy(gc_state.modal.coord_system.xyz, gc_block.values.coord_data.xyz, sizeof(gc_state.modal.coord_system.xyz));
 8010394:	4b14      	ldr	r3, [pc, #80]	@ (80103e8 <gc_execute_block+0x33b8>)
 8010396:	f104 0290 	add.w	r2, r4, #144	@ 0x90
 801039a:	ca07      	ldmia	r2, {r0, r1, r2}
 801039c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                    system_flag_wco_change();
 80103a0:	f011 f9fa 	bl	8021798 <system_flag_wco_change>
 80103a4:	e08f      	b.n	80104c6 <gc_execute_block+0x3496>
            system_add_rt_report(Report_ToolOffset);
 80103a6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80103aa:	f011 f969 	bl	8021680 <system_add_rt_report>
            system_flag_wco_change();
 80103ae:	f011 f9f3 	bl	8021798 <system_flag_wco_change>
 80103b2:	e7c5      	b.n	8010340 <gc_execute_block+0x3310>
        memcpy(&gc_state.modal.coord_system, &gc_block.modal.coord_system, sizeof(gc_state.modal.coord_system));
 80103b4:	4c0c      	ldr	r4, [pc, #48]	@ (80103e8 <gc_execute_block+0x33b8>)
 80103b6:	4b0d      	ldr	r3, [pc, #52]	@ (80103ec <gc_execute_block+0x33bc>)
 80103b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80103ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        system_add_rt_report(Report_GWCO);
 80103be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80103c2:	f011 f95d 	bl	8021680 <system_add_rt_report>
        system_flag_wco_change();
 80103c6:	f011 f9e7 	bl	8021798 <system_flag_wco_change>
 80103ca:	e7bf      	b.n	801034c <gc_execute_block+0x331c>
 80103cc:	20000ee4 	.word	0x20000ee4
 80103d0:	20000ddc 	.word	0x20000ddc
 80103d4:	2000148c 	.word	0x2000148c
 80103d8:	20000dd8 	.word	0x20000dd8
 80103dc:	200011ac 	.word	0x200011ac
 80103e0:	20001394 	.word	0x20001394
 80103e4:	20000e6c 	.word	0x20000e6c
 80103e8:	20000eec 	.word	0x20000eec
 80103ec:	20000dec 	.word	0x20000dec
    switch(gc_block.non_modal_command) {
 80103f0:	3b1c      	subs	r3, #28
 80103f2:	2b25      	cmp	r3, #37	@ 0x25
 80103f4:	d867      	bhi.n	80104c6 <gc_execute_block+0x3496>
 80103f6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80103fa:	004e      	.short	0x004e
 80103fc:	004e0066 	.word	0x004e0066
 8010400:	00660066 	.word	0x00660066
 8010404:	00660066 	.word	0x00660066
 8010408:	00660066 	.word	0x00660066
 801040c:	01010066 	.word	0x01010066
 8010410:	01060066 	.word	0x01060066
 8010414:	00660066 	.word	0x00660066
 8010418:	00660066 	.word	0x00660066
 801041c:	00660066 	.word	0x00660066
 8010420:	00660066 	.word	0x00660066
 8010424:	00660066 	.word	0x00660066
 8010428:	00660066 	.word	0x00660066
 801042c:	00660066 	.word	0x00660066
 8010430:	00660066 	.word	0x00660066
 8010434:	00660066 	.word	0x00660066
 8010438:	00660066 	.word	0x00660066
 801043c:	00660066 	.word	0x00660066
 8010440:	00660066 	.word	0x00660066
 8010444:	010b      	.short	0x010b
 8010446:	2b7a      	cmp	r3, #122	@ 0x7a
 8010448:	d83d      	bhi.n	80104c6 <gc_execute_block+0x3496>
 801044a:	2b5c      	cmp	r3, #92	@ 0x5c
 801044c:	d33b      	bcc.n	80104c6 <gc_execute_block+0x3496>
 801044e:	3b5c      	subs	r3, #92	@ 0x5c
 8010450:	2b1e      	cmp	r3, #30
 8010452:	d838      	bhi.n	80104c6 <gc_execute_block+0x3496>
 8010454:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010458:	003700fb 	.word	0x003700fb
 801045c:	00370037 	.word	0x00370037
 8010460:	00370037 	.word	0x00370037
 8010464:	00370037 	.word	0x00370037
 8010468:	00370037 	.word	0x00370037
 801046c:	00370112 	.word	0x00370112
 8010470:	00370037 	.word	0x00370037
 8010474:	00370037 	.word	0x00370037
 8010478:	00370037 	.word	0x00370037
 801047c:	00370037 	.word	0x00370037
 8010480:	0037012b 	.word	0x0037012b
 8010484:	00370037 	.word	0x00370037
 8010488:	00370037 	.word	0x00370037
 801048c:	00370037 	.word	0x00370037
 8010490:	00370037 	.word	0x00370037
 8010494:	0138      	.short	0x0138
            plan_data.condition.rapid_motion = On; // Set rapid motion condition flag.
 8010496:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801049a:	f043 0301 	orr.w	r3, r3, #1
 801049e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
            if (axis_command)
 80104a2:	f1ba 0f00 	cmp.w	sl, #0
 80104a6:	f040 80a4 	bne.w	80105f2 <gc_execute_block+0x35c2>
            mc_line(gc_block.values.coord_data.xyz, &plan_data);
 80104aa:	4c8d      	ldr	r4, [pc, #564]	@ (80106e0 <gc_execute_block+0x36b0>)
 80104ac:	a914      	add	r1, sp, #80	@ 0x50
 80104ae:	4620      	mov	r0, r4
 80104b0:	f002 ff8e 	bl	80133d0 <mc_line>
            memcpy(gc_state.position, gc_block.values.coord_data.xyz, sizeof(gc_state.position));
 80104b4:	4b8b      	ldr	r3, [pc, #556]	@ (80106e4 <gc_execute_block+0x36b4>)
 80104b6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80104ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            set_scaling(1.0f);
 80104be:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80104c2:	f7fc faeb 	bl	800ca9c <set_scaling>
    gc_state.modal.motion = gc_block.modal.motion;
 80104c6:	4a88      	ldr	r2, [pc, #544]	@ (80106e8 <gc_execute_block+0x36b8>)
 80104c8:	8910      	ldrh	r0, [r2, #8]
 80104ca:	4b88      	ldr	r3, [pc, #544]	@ (80106ec <gc_execute_block+0x36bc>)
 80104cc:	8018      	strh	r0, [r3, #0]
    gc_state.modal.canned_cycle_active = gc_block.modal.canned_cycle_active;
 80104ce:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 80104d2:	77da      	strb	r2, [r3, #31]
    if(gc_state.modal.motion != MotionMode_None && axis_command == AxisCommand_MotionMode) {
 80104d4:	2850      	cmp	r0, #80	@ 0x50
 80104d6:	d003      	beq.n	80104e0 <gc_execute_block+0x34b0>
 80104d8:	f1ba 0f02 	cmp.w	sl, #2
 80104dc:	f000 8118 	beq.w	8010710 <gc_execute_block+0x36e0>
    if(plan_data.message)
 80104e0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80104e2:	b108      	cbz	r0, 80104e8 <gc_execute_block+0x34b8>
        gc_output_message(plan_data.message);
 80104e4:	f7fc fc8e 	bl	800ce04 <gc_output_message>
    gc_state.modal.program_flow = gc_block.modal.program_flow;
 80104e8:	4b7f      	ldr	r3, [pc, #508]	@ (80106e8 <gc_execute_block+0x36b8>)
 80104ea:	f893 4020 	ldrb.w	r4, [r3, #32]
 80104ee:	4b7f      	ldr	r3, [pc, #508]	@ (80106ec <gc_execute_block+0x36bc>)
 80104f0:	761c      	strb	r4, [r3, #24]
    if(gc_state.modal.program_flow || sys.flags.single_block) {
 80104f2:	b92c      	cbnz	r4, 8010500 <gc_execute_block+0x34d0>
 80104f4:	4b7e      	ldr	r3, [pc, #504]	@ (80106f0 <gc_execute_block+0x36c0>)
 80104f6:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	f6bc ae75 	bge.w	800d1ea <gc_execute_block+0x1ba>
        protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 8010500:	f007 f866 	bl	80175d0 <protocol_buffer_synchronize>
        if(gc_state.modal.program_flow == ProgramFlow_Return) {
 8010504:	4b79      	ldr	r3, [pc, #484]	@ (80106ec <gc_execute_block+0x36bc>)
 8010506:	7e1b      	ldrb	r3, [r3, #24]
 8010508:	2b63      	cmp	r3, #99	@ 0x63
 801050a:	f000 82d1 	beq.w	8010ab0 <gc_execute_block+0x3a80>
        } else if(gc_state.modal.program_flow == ProgramFlow_Paused || gc_block.modal.program_flow == ProgramFlow_OptionalStop || gc_block.modal.program_flow == ProgramFlow_CompletedM60 || sys.flags.single_block) {
 801050e:	2b03      	cmp	r3, #3
 8010510:	f000 82d4 	beq.w	8010abc <gc_execute_block+0x3a8c>
 8010514:	4b74      	ldr	r3, [pc, #464]	@ (80106e8 <gc_execute_block+0x36b8>)
 8010516:	f893 3020 	ldrb.w	r3, [r3, #32]
 801051a:	2b01      	cmp	r3, #1
 801051c:	f000 82ce 	beq.w	8010abc <gc_execute_block+0x3a8c>
 8010520:	2b3c      	cmp	r3, #60	@ 0x3c
 8010522:	f000 82cb 	beq.w	8010abc <gc_execute_block+0x3a8c>
 8010526:	4a72      	ldr	r2, [pc, #456]	@ (80106f0 <gc_execute_block+0x36c0>)
 8010528:	f992 2016 	ldrsb.w	r2, [r2, #22]
 801052c:	2a00      	cmp	r2, #0
 801052e:	f2c0 82c5 	blt.w	8010abc <gc_execute_block+0x3a8c>
            if(!check_mode && gc_block.modal.program_flow == ProgramFlow_CompletedM30 && hal.pallet_shuttle)
 8010532:	2d02      	cmp	r5, #2
 8010534:	d002      	beq.n	801053c <gc_execute_block+0x350c>
 8010536:	2b1e      	cmp	r3, #30
 8010538:	f000 82db 	beq.w	8010af2 <gc_execute_block+0x3ac2>
            gc_state.file_run = false;
 801053c:	4b6b      	ldr	r3, [pc, #428]	@ (80106ec <gc_execute_block+0x36bc>)
 801053e:	2200      	movs	r2, #0
 8010540:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            gc_state.modal.motion = MotionMode_Linear;
 8010544:	2101      	movs	r1, #1
 8010546:	8019      	strh	r1, [r3, #0]
            gc_block.modal.canned_cycle_active = false;
 8010548:	4967      	ldr	r1, [pc, #412]	@ (80106e8 <gc_execute_block+0x36b8>)
 801054a:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
            gc_state.modal.plane_select = PlaneSelect_XY;
 801054e:	719a      	strb	r2, [r3, #6]
            gc_state.modal.spindle.rpm_mode = SpindleSpeedMode_RPM; // NOTE: not compliant with linuxcnc (?)
 8010550:	76da      	strb	r2, [r3, #27]
            gc_state.modal.distance_incremental = false;
 8010552:	711a      	strb	r2, [r3, #4]
            gc_state.modal.feed_mode = FeedMode_UnitsPerMin;
 8010554:	709a      	strb	r2, [r3, #2]
            if(gc_state.modal.coord_system.id != CoordinateSystem_G54) {
 8010556:	7d1b      	ldrb	r3, [r3, #20]
 8010558:	2b00      	cmp	r3, #0
 801055a:	f040 82d2 	bne.w	8010b02 <gc_execute_block+0x3ad2>
            gc_state.modal.spindle.state = (spindle_state_t){0};
 801055e:	4b63      	ldr	r3, [pc, #396]	@ (80106ec <gc_execute_block+0x36bc>)
 8010560:	2000      	movs	r0, #0
 8010562:	7698      	strb	r0, [r3, #26]
            gc_state.modal.coolant = (coolant_state_t){0};
 8010564:	7658      	strb	r0, [r3, #25]
            gc_state.modal.override_ctrl.feed_rate_disable = Off;
 8010566:	7f1a      	ldrb	r2, [r3, #28]
 8010568:	f360 0200 	bfi	r2, r0, #0, #1
 801056c:	771a      	strb	r2, [r3, #28]
            gc_state.modal.override_ctrl.spindle_rpm_disable = Off;
 801056e:	b2d2      	uxtb	r2, r2
 8010570:	f360 0282 	bfi	r2, r0, #2, #1
 8010574:	771a      	strb	r2, [r3, #28]
                if((spindle = spindle_get(--idx))) {
 8010576:	f00d fc35 	bl	801dde4 <spindle_get>
 801057a:	b168      	cbz	r0, 8010598 <gc_execute_block+0x3568>
                    spindle->param->state.override_disable = Off;
 801057c:	6842      	ldr	r2, [r0, #4]
 801057e:	7a11      	ldrb	r1, [r2, #8]
 8010580:	f36f 1104 	bfc	r1, #4, #1
 8010584:	7211      	strb	r1, [r2, #8]
                    if(settings.flags.restore_overrides)
 8010586:	4a5b      	ldr	r2, [pc, #364]	@ (80106f4 <gc_execute_block+0x36c4>)
 8010588:	f892 20fe 	ldrb.w	r2, [r2, #254]	@ 0xfe
 801058c:	f012 0f02 	tst.w	r2, #2
 8010590:	d002      	beq.n	8010598 <gc_execute_block+0x3568>
                        spindle->param->override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE;
 8010592:	6843      	ldr	r3, [r0, #4]
 8010594:	2264      	movs	r2, #100	@ 0x64
 8010596:	60da      	str	r2, [r3, #12]
            if(settings.parking.flags.enabled)
 8010598:	4b56      	ldr	r3, [pc, #344]	@ (80106f4 <gc_execute_block+0x36c4>)
 801059a:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801059e:	f013 0f01 	tst.w	r3, #1
 80105a2:	d00a      	beq.n	80105ba <gc_execute_block+0x358a>
                gc_state.modal.override_ctrl.parking_disable = settings.parking.flags.enable_override_control &&
 80105a4:	f003 0306 	and.w	r3, r3, #6
 80105a8:	2b06      	cmp	r3, #6
 80105aa:	bf14      	ite	ne
 80105ac:	2300      	movne	r3, #0
 80105ae:	2301      	moveq	r3, #1
 80105b0:	4a4e      	ldr	r2, [pc, #312]	@ (80106ec <gc_execute_block+0x36bc>)
 80105b2:	7f11      	ldrb	r1, [r2, #28]
 80105b4:	f363 01c3 	bfi	r1, r3, #3, #1
 80105b8:	7711      	strb	r1, [r2, #28]
            sys.override.control = gc_state.modal.override_ctrl;
 80105ba:	4b4c      	ldr	r3, [pc, #304]	@ (80106ec <gc_execute_block+0x36bc>)
 80105bc:	7f1a      	ldrb	r2, [r3, #28]
 80105be:	4b4c      	ldr	r3, [pc, #304]	@ (80106f0 <gc_execute_block+0x36c0>)
 80105c0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            if(settings.flags.restore_overrides) {
 80105c4:	4b4b      	ldr	r3, [pc, #300]	@ (80106f4 <gc_execute_block+0x36c4>)
 80105c6:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 80105ca:	f013 0f02 	tst.w	r3, #2
 80105ce:	d003      	beq.n	80105d8 <gc_execute_block+0x35a8>
                sys.override.feed_rate = DEFAULT_FEED_OVERRIDE;
 80105d0:	4b47      	ldr	r3, [pc, #284]	@ (80106f0 <gc_execute_block+0x36c0>)
 80105d2:	2264      	movs	r2, #100	@ 0x64
 80105d4:	61da      	str	r2, [r3, #28]
                sys.override.rapid_rate = DEFAULT_RAPID_OVERRIDE;
 80105d6:	621a      	str	r2, [r3, #32]
            if (!check_mode) {
 80105d8:	2d02      	cmp	r5, #2
 80105da:	f040 8299 	bne.w	8010b10 <gc_execute_block+0x3ae0>
            if(grbl.on_program_completed)
 80105de:	4b46      	ldr	r3, [pc, #280]	@ (80106f8 <gc_execute_block+0x36c8>)
 80105e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	f000 82c1 	beq.w	8010b6a <gc_execute_block+0x3b3a>
                grbl.on_program_completed(gc_state.modal.program_flow, check_mode);
 80105e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80105ea:	4a40      	ldr	r2, [pc, #256]	@ (80106ec <gc_execute_block+0x36bc>)
 80105ec:	7e10      	ldrb	r0, [r2, #24]
 80105ee:	4798      	blx	r3
 80105f0:	e2bb      	b.n	8010b6a <gc_execute_block+0x3b3a>
                mc_line(gc_block.values.xyz, &plan_data);
 80105f2:	a914      	add	r1, sp, #80	@ 0x50
 80105f4:	4841      	ldr	r0, [pc, #260]	@ (80106fc <gc_execute_block+0x36cc>)
 80105f6:	f002 feeb 	bl	80133d0 <mc_line>
 80105fa:	e756      	b.n	80104aa <gc_execute_block+0x347a>
            settings_write_coord_data(CoordinateSystem_G28, &gc_state.position);
 80105fc:	4939      	ldr	r1, [pc, #228]	@ (80106e4 <gc_execute_block+0x36b4>)
 80105fe:	2009      	movs	r0, #9
 8010600:	f00c fc02 	bl	801ce08 <settings_write_coord_data>
            break;
 8010604:	e75f      	b.n	80104c6 <gc_execute_block+0x3496>
            settings_write_coord_data(CoordinateSystem_G30, &gc_state.position);
 8010606:	4937      	ldr	r1, [pc, #220]	@ (80106e4 <gc_execute_block+0x36b4>)
 8010608:	200a      	movs	r0, #10
 801060a:	f00c fbfd 	bl	801ce08 <settings_write_coord_data>
            break;
 801060e:	e75a      	b.n	80104c6 <gc_execute_block+0x3496>
                ngc_named_param_set("_value", 0.0f);
 8010610:	ed9f 8a3b 	vldr	s16, [pc, #236]	@ 8010700 <gc_execute_block+0x36d0>
 8010614:	eeb0 0a48 	vmov.f32	s0, s16
 8010618:	483a      	ldr	r0, [pc, #232]	@ (8010704 <gc_execute_block+0x36d4>)
 801061a:	f004 fad3 	bl	8014bc4 <ngc_named_param_set>
                ngc_named_param_set("_value_returned", 0.0f);
 801061e:	eeb0 0a48 	vmov.f32	s0, s16
 8010622:	4839      	ldr	r0, [pc, #228]	@ (8010708 <gc_execute_block+0x36d8>)
 8010624:	f004 face 	bl	8014bc4 <ngc_named_param_set>
                status_code_t status = grbl.on_macro_execute((macro_id_t)gc_block.values.p);
 8010628:	4b33      	ldr	r3, [pc, #204]	@ (80106f8 <gc_execute_block+0x36c8>)
 801062a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801062e:	4a2e      	ldr	r2, [pc, #184]	@ (80106e8 <gc_execute_block+0x36b8>)
 8010630:	edd2 7a17 	vldr	s15, [r2, #92]	@ 0x5c
 8010634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010638:	ee17 2a90 	vmov	r2, s15
 801063c:	b290      	uxth	r0, r2
 801063e:	4798      	blx	r3
 8010640:	4604      	mov	r4, r0
                return status == Status_Unhandled ? Status_GcodeValueOutOfRange : status;
 8010642:	2854      	cmp	r0, #84	@ 0x54
 8010644:	f47c add1 	bne.w	800d1ea <gc_execute_block+0x1ba>
 8010648:	2427      	movs	r4, #39	@ 0x27
 801064a:	f7fc bdce 	b.w	800d1ea <gc_execute_block+0x1ba>
            gc_state.g92_coord_offset_applied = true; // TODO: check for all zero?
 801064e:	4b27      	ldr	r3, [pc, #156]	@ (80106ec <gc_execute_block+0x36bc>)
 8010650:	2201      	movs	r2, #1
 8010652:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
            memcpy(gc_state.g92_coord_offset, gc_block.values.xyz, sizeof(gc_state.g92_coord_offset));
 8010656:	33b8      	adds	r3, #184	@ 0xb8
 8010658:	4a28      	ldr	r2, [pc, #160]	@ (80106fc <gc_execute_block+0x36cc>)
 801065a:	ca07      	ldmia	r2, {r0, r1, r2}
 801065c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            if(!settings.flags.g92_is_volatile)
 8010660:	4b24      	ldr	r3, [pc, #144]	@ (80106f4 <gc_execute_block+0x36c4>)
 8010662:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 8010666:	f013 0f02 	tst.w	r3, #2
 801066a:	d002      	beq.n	8010672 <gc_execute_block+0x3642>
            add_offset();
 801066c:	f7fc f9b8 	bl	800c9e0 <add_offset>
            break;
 8010670:	e729      	b.n	80104c6 <gc_execute_block+0x3496>
                settings_write_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Save G92 offsets to non-volatile storage
 8010672:	4926      	ldr	r1, [pc, #152]	@ (801070c <gc_execute_block+0x36dc>)
 8010674:	200b      	movs	r0, #11
 8010676:	f00c fbc7 	bl	801ce08 <settings_write_coord_data>
 801067a:	e7f7      	b.n	801066c <gc_execute_block+0x363c>
            gc_state.g92_coord_offset_applied = false;
 801067c:	4a1b      	ldr	r2, [pc, #108]	@ (80106ec <gc_execute_block+0x36bc>)
 801067e:	2300      	movs	r3, #0
 8010680:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
            clear_vector(gc_state.g92_coord_offset); // Disable G92 offsets by zeroing offset vector.
 8010684:	f102 01b8 	add.w	r1, r2, #184	@ 0xb8
 8010688:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
 801068c:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
 8010690:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            if(!settings.flags.g92_is_volatile)
 8010694:	4b17      	ldr	r3, [pc, #92]	@ (80106f4 <gc_execute_block+0x36c4>)
 8010696:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 801069a:	f013 0f02 	tst.w	r3, #2
 801069e:	d002      	beq.n	80106a6 <gc_execute_block+0x3676>
            add_offset();
 80106a0:	f7fc f99e 	bl	800c9e0 <add_offset>
            break;
 80106a4:	e70f      	b.n	80104c6 <gc_execute_block+0x3496>
                settings_write_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Save G92 offsets to non-volatile storage
 80106a6:	200b      	movs	r0, #11
 80106a8:	f00c fbae 	bl	801ce08 <settings_write_coord_data>
 80106ac:	e7f8      	b.n	80106a0 <gc_execute_block+0x3670>
            gc_state.g92_coord_offset_applied = false;
 80106ae:	4a0f      	ldr	r2, [pc, #60]	@ (80106ec <gc_execute_block+0x36bc>)
 80106b0:	2300      	movs	r3, #0
 80106b2:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
            clear_vector(gc_state.g92_coord_offset); // Disable G92 offsets by zeroing offset vector.
 80106b6:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
 80106ba:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
 80106be:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            add_offset();
 80106c2:	f7fc f98d 	bl	800c9e0 <add_offset>
            break;
 80106c6:	e6fe      	b.n	80104c6 <gc_execute_block+0x3496>
            gc_state.g92_coord_offset_applied = true; // TODO: check for all zero?
 80106c8:	4908      	ldr	r1, [pc, #32]	@ (80106ec <gc_execute_block+0x36bc>)
 80106ca:	2301      	movs	r3, #1
 80106cc:	f881 30b4 	strb.w	r3, [r1, #180]	@ 0xb4
            settings_read_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Restore G92 offsets from non-volatile storage
 80106d0:	31b8      	adds	r1, #184	@ 0xb8
 80106d2:	200b      	movs	r0, #11
 80106d4:	f00c fbbc 	bl	801ce50 <settings_read_coord_data>
            add_offset();
 80106d8:	f7fc f982 	bl	800c9e0 <add_offset>
            break;
 80106dc:	e6f3      	b.n	80104c6 <gc_execute_block+0x3496>
 80106de:	bf00      	nop
 80106e0:	20000e6c 	.word	0x20000e6c
 80106e4:	20000f4c 	.word	0x20000f4c
 80106e8:	20000ddc 	.word	0x20000ddc
 80106ec:	20000ee4 	.word	0x20000ee4
 80106f0:	2000148c 	.word	0x2000148c
 80106f4:	20001bc4 	.word	0x20001bc4
 80106f8:	20001394 	.word	0x20001394
 80106fc:	20000e60 	.word	0x20000e60
 8010700:	00000000 	.word	0x00000000
 8010704:	0802a8fc 	.word	0x0802a8fc
 8010708:	0802a904 	.word	0x0802a904
 801070c:	20000f9c 	.word	0x20000f9c
        plan_data.output_commands = output_commands;
 8010710:	4ba6      	ldr	r3, [pc, #664]	@ (80109ac <gc_execute_block+0x397c>)
 8010712:	681a      	ldr	r2, [r3, #0]
 8010714:	921d      	str	r2, [sp, #116]	@ 0x74
        output_commands = NULL;
 8010716:	2200      	movs	r2, #0
 8010718:	601a      	str	r2, [r3, #0]
        switch(gc_state.modal.motion) {
 801071a:	2853      	cmp	r0, #83	@ 0x53
 801071c:	d858      	bhi.n	80107d0 <gc_execute_block+0x37a0>
 801071e:	2853      	cmp	r0, #83	@ 0x53
 8010720:	f200 81a5 	bhi.w	8010a6e <gc_execute_block+0x3a3e>
 8010724:	e8df f010 	tbh	[pc, r0, lsl #1]
 8010728:	006d0098 	.word	0x006d0098
 801072c:	00a400a4 	.word	0x00a400a4
 8010730:	00d401a3 	.word	0x00d401a3
 8010734:	01a301a3 	.word	0x01a301a3
 8010738:	01a301a3 	.word	0x01a301a3
 801073c:	01a301a3 	.word	0x01a301a3
 8010740:	01a301a3 	.word	0x01a301a3
 8010744:	01a301a3 	.word	0x01a301a3
 8010748:	01a301a3 	.word	0x01a301a3
 801074c:	01a301a3 	.word	0x01a301a3
 8010750:	01a301a3 	.word	0x01a301a3
 8010754:	01a301a3 	.word	0x01a301a3
 8010758:	01a301a3 	.word	0x01a301a3
 801075c:	01a301a3 	.word	0x01a301a3
 8010760:	01a301a3 	.word	0x01a301a3
 8010764:	01a301a3 	.word	0x01a301a3
 8010768:	015001a3 	.word	0x015001a3
 801076c:	01a301a3 	.word	0x01a301a3
 8010770:	01a301a3 	.word	0x01a301a3
 8010774:	01a301a3 	.word	0x01a301a3
 8010778:	01a301a3 	.word	0x01a301a3
 801077c:	01a301a3 	.word	0x01a301a3
 8010780:	01a301a3 	.word	0x01a301a3
 8010784:	01a301a3 	.word	0x01a301a3
 8010788:	01a301a3 	.word	0x01a301a3
 801078c:	010001a3 	.word	0x010001a3
 8010790:	01a301a3 	.word	0x01a301a3
 8010794:	01a301a3 	.word	0x01a301a3
 8010798:	01a301a3 	.word	0x01a301a3
 801079c:	01a301a3 	.word	0x01a301a3
 80107a0:	01a301a3 	.word	0x01a301a3
 80107a4:	01a301a3 	.word	0x01a301a3
 80107a8:	01a301a3 	.word	0x01a301a3
 80107ac:	01a301a3 	.word	0x01a301a3
 80107b0:	01a301a3 	.word	0x01a301a3
 80107b4:	01a301a3 	.word	0x01a301a3
 80107b8:	018901a3 	.word	0x018901a3
 80107bc:	01a301a3 	.word	0x01a301a3
 80107c0:	01a3016f 	.word	0x01a3016f
 80107c4:	01a301a3 	.word	0x01a301a3
 80107c8:	018901a3 	.word	0x018901a3
 80107cc:	01890189 	.word	0x01890189
 80107d0:	f1a0 038c 	sub.w	r3, r0, #140	@ 0x8c
 80107d4:	b29b      	uxth	r3, r3
 80107d6:	2b03      	cmp	r3, #3
 80107d8:	f200 814f 	bhi.w	8010a7a <gc_execute_block+0x3a4a>
                plan_data.condition.no_feed_override = !settings.probe.allow_feed_override;
 80107dc:	4b74      	ldr	r3, [pc, #464]	@ (80109b0 <gc_execute_block+0x3980>)
 80107de:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 80107e2:	091b      	lsrs	r3, r3, #4
 80107e4:	f083 0301 	eor.w	r3, r3, #1
 80107e8:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80107ec:	f363 1204 	bfi	r2, r3, #4, #1
 80107f0:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
                gc_update_pos = (pos_update_t)mc_probe_cycle(gc_block.values.xyz, &plan_data, gc_parser_flags);
 80107f4:	4642      	mov	r2, r8
 80107f6:	a914      	add	r1, sp, #80	@ 0x50
 80107f8:	486e      	ldr	r0, [pc, #440]	@ (80109b4 <gc_execute_block+0x3984>)
 80107fa:	f003 fcf9 	bl	80141f0 <mc_probe_cycle>
 80107fe:	4604      	mov	r4, r0
                break;
 8010800:	e136      	b.n	8010a70 <gc_execute_block+0x3a40>
                if(gc_state.modal.feed_mode == FeedMode_UnitsPerRev) {
 8010802:	4b6d      	ldr	r3, [pc, #436]	@ (80109b8 <gc_execute_block+0x3988>)
 8010804:	789b      	ldrb	r3, [r3, #2]
 8010806:	2b02      	cmp	r3, #2
 8010808:	d005      	beq.n	8010816 <gc_execute_block+0x37e6>
                mc_line(gc_block.values.xyz, &plan_data);
 801080a:	a914      	add	r1, sp, #80	@ 0x50
 801080c:	4869      	ldr	r0, [pc, #420]	@ (80109b4 <gc_execute_block+0x3984>)
 801080e:	f002 fddf 	bl	80133d0 <mc_line>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 8010812:	9c05      	ldr	r4, [sp, #20]
                break;
 8010814:	e12c      	b.n	8010a70 <gc_execute_block+0x3a40>
                    plan_data.condition.units_per_rev = On;
 8010816:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801081a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801081e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
                    plan_data.spindle.state.synchronized = settings.mode != Mode_Lathe || gc_block.values.xyz[Z_AXIS] != gc_state.position[Z_AXIS];
 8010822:	4b63      	ldr	r3, [pc, #396]	@ (80109b0 <gc_execute_block+0x3980>)
 8010824:	7e1b      	ldrb	r3, [r3, #24]
 8010826:	2b02      	cmp	r3, #2
 8010828:	d007      	beq.n	801083a <gc_execute_block+0x380a>
 801082a:	2301      	movs	r3, #1
 801082c:	f89d 2058 	ldrb.w	r2, [sp, #88]	@ 0x58
 8010830:	f363 12c7 	bfi	r2, r3, #7, #1
 8010834:	f88d 2058 	strb.w	r2, [sp, #88]	@ 0x58
 8010838:	e7e7      	b.n	801080a <gc_execute_block+0x37da>
 801083a:	4b60      	ldr	r3, [pc, #384]	@ (80109bc <gc_execute_block+0x398c>)
 801083c:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8010840:	4b5d      	ldr	r3, [pc, #372]	@ (80109b8 <gc_execute_block+0x3988>)
 8010842:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8010846:	eeb4 7a67 	vcmp.f32	s14, s15
 801084a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801084e:	d001      	beq.n	8010854 <gc_execute_block+0x3824>
 8010850:	2301      	movs	r3, #1
 8010852:	e7eb      	b.n	801082c <gc_execute_block+0x37fc>
 8010854:	2300      	movs	r3, #0
 8010856:	e7e9      	b.n	801082c <gc_execute_block+0x37fc>
                plan_data.condition.rapid_motion = On; // Set rapid motion condition flag.
 8010858:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801085c:	f043 0301 	orr.w	r3, r3, #1
 8010860:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
                mc_line(gc_block.values.xyz, &plan_data);
 8010864:	a914      	add	r1, sp, #80	@ 0x50
 8010866:	4853      	ldr	r0, [pc, #332]	@ (80109b4 <gc_execute_block+0x3984>)
 8010868:	f002 fdb2 	bl	80133d0 <mc_line>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 801086c:	9c05      	ldr	r4, [sp, #20]
                break;
 801086e:	e0ff      	b.n	8010a70 <gc_execute_block+0x3a40>
                if(gc_state.modal.feed_mode == FeedMode_UnitsPerRev)
 8010870:	4b51      	ldr	r3, [pc, #324]	@ (80109b8 <gc_execute_block+0x3988>)
 8010872:	789b      	ldrb	r3, [r3, #2]
 8010874:	2b02      	cmp	r3, #2
 8010876:	d01a      	beq.n	80108ae <gc_execute_block+0x387e>
                mc_arc(gc_block.values.xyz, &plan_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 8010878:	4b50      	ldr	r3, [pc, #320]	@ (80109bc <gc_execute_block+0x398c>)
 801087a:	ed93 0a19 	vldr	s0, [r3, #100]	@ 0x64
 801087e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010880:	f013 0f04 	tst.w	r3, #4
 8010884:	d020      	beq.n	80108c8 <gc_execute_block+0x3898>
                        plane, gc_parser_flags.arc_is_clockwise ? -gc_block.arc_turns : gc_block.arc_turns);
 8010886:	4b4d      	ldr	r3, [pc, #308]	@ (80109bc <gc_execute_block+0x398c>)
 8010888:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 801088c:	4252      	negs	r2, r2
                mc_arc(gc_block.values.xyz, &plan_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 801088e:	4b4c      	ldr	r3, [pc, #304]	@ (80109c0 <gc_execute_block+0x3990>)
 8010890:	9201      	str	r2, [sp, #4]
 8010892:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010894:	f8ad 2000 	strh.w	r2, [sp]
 8010898:	0c12      	lsrs	r2, r2, #16
 801089a:	f88d 2002 	strb.w	r2, [sp, #2]
 801089e:	4a49      	ldr	r2, [pc, #292]	@ (80109c4 <gc_execute_block+0x3994>)
 80108a0:	a914      	add	r1, sp, #80	@ 0x50
 80108a2:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80108a6:	f002 fddb 	bl	8013460 <mc_arc>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 80108aa:	9c05      	ldr	r4, [sp, #20]
                break;
 80108ac:	e0e0      	b.n	8010a70 <gc_execute_block+0x3a40>
                    plan_data.condition.units_per_rev = plan_data.spindle.state.synchronized = On;
 80108ae:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80108b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80108b6:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 80108ba:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80108be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80108c2:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80108c6:	e7d7      	b.n	8010878 <gc_execute_block+0x3848>
                        plane, gc_parser_flags.arc_is_clockwise ? -gc_block.arc_turns : gc_block.arc_turns);
 80108c8:	4b3c      	ldr	r3, [pc, #240]	@ (80109bc <gc_execute_block+0x398c>)
 80108ca:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80108ce:	e7de      	b.n	801088e <gc_execute_block+0x385e>
                        .x = gc_state.position[X_AXIS] + gc_block.values.ijk[X_AXIS],
 80108d0:	4a39      	ldr	r2, [pc, #228]	@ (80109b8 <gc_execute_block+0x3988>)
 80108d2:	edd2 7a1a 	vldr	s15, [r2, #104]	@ 0x68
 80108d6:	4839      	ldr	r0, [pc, #228]	@ (80109bc <gc_execute_block+0x398c>)
 80108d8:	ed90 7a12 	vldr	s14, [r0, #72]	@ 0x48
 80108dc:	ee77 7a87 	vadd.f32	s15, s15, s14
                    point_2d_t cp1 = {
 80108e0:	edcd 7a0f 	vstr	s15, [sp, #60]	@ 0x3c
                        .y = gc_state.position[Y_AXIS] + gc_block.values.ijk[Y_AXIS]
 80108e4:	edd2 7a1b 	vldr	s15, [r2, #108]	@ 0x6c
 80108e8:	ed90 7a13 	vldr	s14, [r0, #76]	@ 0x4c
 80108ec:	ee77 7a87 	vadd.f32	s15, s15, s14
                    point_2d_t cp1 = {
 80108f0:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
                        .x = gc_block.values.xyz[X_AXIS] + gc_state.modal.spline_pq[X_AXIS],
 80108f4:	edd0 7a21 	vldr	s15, [r0, #132]	@ 0x84
 80108f8:	ed92 7a08 	vldr	s14, [r2, #32]
 80108fc:	ee77 7a87 	vadd.f32	s15, s15, s14
                    point_2d_t cp2 = {
 8010900:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
                        .y = gc_block.values.xyz[Y_AXIS] + gc_state.modal.spline_pq[Y_AXIS]
 8010904:	edd0 7a22 	vldr	s15, [r0, #136]	@ 0x88
 8010908:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 801090c:	ee77 7a87 	vadd.f32	s15, s15, s14
                    point_2d_t cp2 = {
 8010910:	edcd 7a12 	vstr	s15, [sp, #72]	@ 0x48
                    mc_cubic_b_spline(gc_block.values.xyz, &plan_data, gc_state.position, cp1.values, cp2.values);
 8010914:	ab11      	add	r3, sp, #68	@ 0x44
 8010916:	9300      	str	r3, [sp, #0]
 8010918:	ab0f      	add	r3, sp, #60	@ 0x3c
 801091a:	3268      	adds	r2, #104	@ 0x68
 801091c:	a914      	add	r1, sp, #80	@ 0x50
 801091e:	3084      	adds	r0, #132	@ 0x84
 8010920:	f003 f85e 	bl	80139e0 <mc_cubic_b_spline>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 8010924:	9c05      	ldr	r4, [sp, #20]
                break;
 8010926:	e0a3      	b.n	8010a70 <gc_execute_block+0x3a40>
                        .x = gc_state.position[X_AXIS] + (gc_block.values.ijk[X_AXIS] * 2.0f) / 3.0f,
 8010928:	4a23      	ldr	r2, [pc, #140]	@ (80109b8 <gc_execute_block+0x3988>)
 801092a:	ed92 7a1a 	vldr	s14, [r2, #104]	@ 0x68
 801092e:	4823      	ldr	r0, [pc, #140]	@ (80109bc <gc_execute_block+0x398c>)
 8010930:	ed90 5a12 	vldr	s10, [r0, #72]	@ 0x48
 8010934:	ee35 6a05 	vadd.f32	s12, s10, s10
 8010938:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 801093c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8010940:	ee77 7a27 	vadd.f32	s15, s14, s15
                    point_2d_t cp1 = {
 8010944:	edcd 7a0f 	vstr	s15, [sp, #60]	@ 0x3c
                        .y = gc_state.position[Y_AXIS] + (gc_block.values.ijk[Y_AXIS] * 2.0f) / 3.0f
 8010948:	edd2 7a1b 	vldr	s15, [r2, #108]	@ 0x6c
 801094c:	edd0 5a13 	vldr	s11, [r0, #76]	@ 0x4c
 8010950:	ee75 4aa5 	vadd.f32	s9, s11, s11
 8010954:	ee84 6aa6 	vdiv.f32	s12, s9, s13
 8010958:	ee37 6a86 	vadd.f32	s12, s15, s12
                    point_2d_t cp1 = {
 801095c:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
                        .x = gc_block.values.xyz[X_AXIS] + ((gc_state.position[X_AXIS] + gc_block.values.ijk[X_AXIS] - gc_block.values.xyz[X_AXIS]) * 2.0f) / 3.0f,
 8010960:	ed90 6a21 	vldr	s12, [r0, #132]	@ 0x84
 8010964:	ee37 7a05 	vadd.f32	s14, s14, s10
 8010968:	ee37 7a46 	vsub.f32	s14, s14, s12
 801096c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8010970:	ee87 5a26 	vdiv.f32	s10, s14, s13
 8010974:	ee36 6a05 	vadd.f32	s12, s12, s10
                    point_2d_t cp2 = {
 8010978:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
                        .y = gc_block.values.xyz[Y_AXIS] + ((gc_state.position[Y_AXIS] + gc_block.values.ijk[Y_AXIS] - gc_block.values.xyz[Y_AXIS]) * 2.0f) / 3.0f
 801097c:	ed90 7a22 	vldr	s14, [r0, #136]	@ 0x88
 8010980:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010984:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010988:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801098c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8010990:	ee37 7a06 	vadd.f32	s14, s14, s12
                    point_2d_t cp2 = {
 8010994:	ed8d 7a12 	vstr	s14, [sp, #72]	@ 0x48
                    mc_cubic_b_spline(gc_block.values.xyz, &plan_data, gc_state.position, cp1.values, cp2.values);
 8010998:	ab11      	add	r3, sp, #68	@ 0x44
 801099a:	9300      	str	r3, [sp, #0]
 801099c:	ab0f      	add	r3, sp, #60	@ 0x3c
 801099e:	3268      	adds	r2, #104	@ 0x68
 80109a0:	a914      	add	r1, sp, #80	@ 0x50
 80109a2:	3084      	adds	r0, #132	@ 0x84
 80109a4:	f003 f81c 	bl	80139e0 <mc_cubic_b_spline>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 80109a8:	9c05      	ldr	r4, [sp, #20]
                break;
 80109aa:	e061      	b.n	8010a70 <gc_execute_block+0x3a40>
 80109ac:	20000eb0 	.word	0x20000eb0
 80109b0:	20001bc4 	.word	0x20001bc4
 80109b4:	20000e60 	.word	0x20000e60
 80109b8:	20000ee4 	.word	0x20000ee4
 80109bc:	20000ddc 	.word	0x20000ddc
 80109c0:	20000e24 	.word	0x20000e24
 80109c4:	20000f4c 	.word	0x20000f4c
                    protocol_buffer_synchronize(); // Wait until any previous moves are finished.
 80109c8:	f006 fe02 	bl	80175d0 <protocol_buffer_synchronize>
                    gc_override_flags_t overrides = sys.override.control; // Save current override disable status.
 80109cc:	4bc5      	ldr	r3, [pc, #788]	@ (8010ce4 <gc_execute_block+0x3cb4>)
 80109ce:	f893 6029 	ldrb.w	r6, [r3, #41]	@ 0x29
                    status_code_t status = init_sync_motion(&plan_data, gc_block.values.k);
 80109d2:	4bc5      	ldr	r3, [pc, #788]	@ (8010ce8 <gc_execute_block+0x3cb8>)
 80109d4:	ed93 0a15 	vldr	s0, [r3, #84]	@ 0x54
 80109d8:	a814      	add	r0, sp, #80	@ 0x50
 80109da:	f7fb ff7d 	bl	800c8d8 <init_sync_motion>
                    if(status != Status_OK)
 80109de:	4604      	mov	r4, r0
 80109e0:	2800      	cmp	r0, #0
 80109e2:	f47c ac02 	bne.w	800d1ea <gc_execute_block+0x1ba>
                    plan_data.spindle.state.synchronized = On;
 80109e6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80109ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109ee:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
                    mc_line(gc_block.values.xyz, &plan_data);
 80109f2:	a914      	add	r1, sp, #80	@ 0x50
 80109f4:	48bd      	ldr	r0, [pc, #756]	@ (8010cec <gc_execute_block+0x3cbc>)
 80109f6:	f002 fceb 	bl	80133d0 <mc_line>
                    protocol_buffer_synchronize();    // Wait until synchronized move is finished,
 80109fa:	f006 fde9 	bl	80175d0 <protocol_buffer_synchronize>
                    sys.override.control = overrides; // then restore previous override disable status.
 80109fe:	4bb9      	ldr	r3, [pc, #740]	@ (8010ce4 <gc_execute_block+0x3cb4>)
 8010a00:	f883 6029 	strb.w	r6, [r3, #41]	@ 0x29
                break;
 8010a04:	e034      	b.n	8010a70 <gc_execute_block+0x3a40>
                    protocol_buffer_synchronize(); // Wait until any previous moves are finished.
 8010a06:	f006 fde3 	bl	80175d0 <protocol_buffer_synchronize>
                    gc_override_flags_t overrides = sys.override.control; // Save current override disable status.
 8010a0a:	4bb6      	ldr	r3, [pc, #728]	@ (8010ce4 <gc_execute_block+0x3cb4>)
 8010a0c:	f893 6029 	ldrb.w	r6, [r3, #41]	@ 0x29
                    status_code_t status = init_sync_motion(&plan_data, thread.pitch);
 8010a10:	4bb7      	ldr	r3, [pc, #732]	@ (8010cf0 <gc_execute_block+0x3cc0>)
 8010a12:	ed93 0a00 	vldr	s0, [r3]
 8010a16:	a814      	add	r0, sp, #80	@ 0x50
 8010a18:	f7fb ff5e 	bl	800c8d8 <init_sync_motion>
                    if(status != Status_OK)
 8010a1c:	4604      	mov	r4, r0
 8010a1e:	2800      	cmp	r0, #0
 8010a20:	f47c abe3 	bne.w	800d1ea <gc_execute_block+0x1ba>
                    mc_thread(&plan_data, gc_state.position, &thread, overrides.feed_hold_disable);
 8010a24:	f3c6 0340 	ubfx	r3, r6, #1, #1
 8010a28:	4ab1      	ldr	r2, [pc, #708]	@ (8010cf0 <gc_execute_block+0x3cc0>)
 8010a2a:	49b2      	ldr	r1, [pc, #712]	@ (8010cf4 <gc_execute_block+0x3cc4>)
 8010a2c:	a814      	add	r0, sp, #80	@ 0x50
 8010a2e:	f003 f8ef 	bl	8013c10 <mc_thread>
                    sys.override.control = overrides; // then restore previous override disable status.
 8010a32:	4bac      	ldr	r3, [pc, #688]	@ (8010ce4 <gc_execute_block+0x3cb4>)
 8010a34:	f883 6029 	strb.w	r6, [r3, #41]	@ 0x29
                break;
 8010a38:	e01a      	b.n	8010a70 <gc_execute_block+0x3a40>
                plan_data.spindle.rpm = gc_block.values.s;
 8010a3a:	49ab      	ldr	r1, [pc, #684]	@ (8010ce8 <gc_execute_block+0x3cb8>)
 8010a3c:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 8010a3e:	9315      	str	r3, [sp, #84]	@ 0x54
                gc_state.canned.retract_mode = gc_state.modal.retract_mode;
 8010a40:	4bad      	ldr	r3, [pc, #692]	@ (8010cf8 <gc_execute_block+0x3cc8>)
 8010a42:	7f5a      	ldrb	r2, [r3, #29]
 8010a44:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
                mc_canned_drill(gc_state.modal.motion, gc_block.values.xyz, &plan_data, gc_state.position, plane, gc_block.values.l, &gc_state.canned);
 8010a48:	f891 20b4 	ldrb.w	r2, [r1, #180]	@ 0xb4
 8010a4c:	f103 0434 	add.w	r4, r3, #52	@ 0x34
 8010a50:	9402      	str	r4, [sp, #8]
 8010a52:	9201      	str	r2, [sp, #4]
 8010a54:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010a56:	f8ad 2000 	strh.w	r2, [sp]
 8010a5a:	0c12      	lsrs	r2, r2, #16
 8010a5c:	f88d 2002 	strb.w	r2, [sp, #2]
 8010a60:	3368      	adds	r3, #104	@ 0x68
 8010a62:	aa14      	add	r2, sp, #80	@ 0x50
 8010a64:	3184      	adds	r1, #132	@ 0x84
 8010a66:	f003 fac1 	bl	8013fec <mc_canned_drill>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 8010a6a:	9c05      	ldr	r4, [sp, #20]
                break;
 8010a6c:	e000      	b.n	8010a70 <gc_execute_block+0x3a40>
        switch(gc_state.modal.motion) {
 8010a6e:	9c05      	ldr	r4, [sp, #20]
        if(sys.cancel)
 8010a70:	4b9c      	ldr	r3, [pc, #624]	@ (8010ce4 <gc_execute_block+0x3cb4>)
 8010a72:	785b      	ldrb	r3, [r3, #1]
 8010a74:	b93b      	cbnz	r3, 8010a86 <gc_execute_block+0x3a56>
 8010a76:	46a2      	mov	sl, r4
 8010a78:	e005      	b.n	8010a86 <gc_execute_block+0x3a56>
        switch(gc_state.modal.motion) {
 8010a7a:	9c05      	ldr	r4, [sp, #20]
 8010a7c:	e7f8      	b.n	8010a70 <gc_execute_block+0x3a40>
            output_command_t *next = plan_data.output_commands->next;
 8010a7e:	6884      	ldr	r4, [r0, #8]
            free(plan_data.output_commands);
 8010a80:	f011 fc3c 	bl	80222fc <free>
            plan_data.output_commands = next;
 8010a84:	941d      	str	r4, [sp, #116]	@ 0x74
        while(plan_data.output_commands) {
 8010a86:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8010a88:	2800      	cmp	r0, #0
 8010a8a:	d1f8      	bne.n	8010a7e <gc_execute_block+0x3a4e>
        if (gc_update_pos == GCUpdatePos_Target)
 8010a8c:	f1ba 0f00 	cmp.w	sl, #0
 8010a90:	d105      	bne.n	8010a9e <gc_execute_block+0x3a6e>
            memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_state.position)); // gc_state.position[] = gc_block.values.xyz[]
 8010a92:	4b98      	ldr	r3, [pc, #608]	@ (8010cf4 <gc_execute_block+0x3cc4>)
 8010a94:	4a95      	ldr	r2, [pc, #596]	@ (8010cec <gc_execute_block+0x3cbc>)
 8010a96:	ca07      	ldmia	r2, {r0, r1, r2}
 8010a98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010a9c:	e520      	b.n	80104e0 <gc_execute_block+0x34b0>
        else if (gc_update_pos == GCUpdatePos_System)
 8010a9e:	f1ba 0f01 	cmp.w	sl, #1
 8010aa2:	f47f ad1d 	bne.w	80104e0 <gc_execute_block+0x34b0>
            gc_sync_position(); // gc_state.position[] = sys.position
 8010aa6:	4995      	ldr	r1, [pc, #596]	@ (8010cfc <gc_execute_block+0x3ccc>)
 8010aa8:	4892      	ldr	r0, [pc, #584]	@ (8010cf4 <gc_execute_block+0x3cc4>)
 8010aaa:	f010 fd45 	bl	8021538 <system_convert_array_steps_to_mpos>
 8010aae:	e517      	b.n	80104e0 <gc_execute_block+0x34b0>
            if(grbl.on_macro_return)
 8010ab0:	4b93      	ldr	r3, [pc, #588]	@ (8010d00 <gc_execute_block+0x3cd0>)
 8010ab2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010ab6:	b17b      	cbz	r3, 8010ad8 <gc_execute_block+0x3aa8>
                grbl.on_macro_return();
 8010ab8:	4798      	blx	r3
 8010aba:	e00d      	b.n	8010ad8 <gc_execute_block+0x3aa8>
            if(!check_mode) {
 8010abc:	2d02      	cmp	r5, #2
 8010abe:	d00b      	beq.n	8010ad8 <gc_execute_block+0x3aa8>
                if(gc_block.modal.program_flow == ProgramFlow_CompletedM60 && hal.pallet_shuttle)
 8010ac0:	4b89      	ldr	r3, [pc, #548]	@ (8010ce8 <gc_execute_block+0x3cb8>)
 8010ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ac6:	2b3c      	cmp	r3, #60	@ 0x3c
 8010ac8:	d00c      	beq.n	8010ae4 <gc_execute_block+0x3ab4>
                system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 8010aca:	4b8e      	ldr	r3, [pc, #568]	@ (8010d04 <gc_execute_block+0x3cd4>)
 8010acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ace:	2108      	movs	r1, #8
 8010ad0:	488d      	ldr	r0, [pc, #564]	@ (8010d08 <gc_execute_block+0x3cd8>)
 8010ad2:	4798      	blx	r3
                protocol_execute_realtime(); // Execute suspend.
 8010ad4:	f006 faae 	bl	8017034 <protocol_execute_realtime>
        gc_state.modal.program_flow = ProgramFlow_Running; // Reset program flow.
 8010ad8:	4b87      	ldr	r3, [pc, #540]	@ (8010cf8 <gc_execute_block+0x3cc8>)
 8010ada:	2200      	movs	r2, #0
 8010adc:	761a      	strb	r2, [r3, #24]
    return Status_OK;
 8010ade:	9c05      	ldr	r4, [sp, #20]
 8010ae0:	f7fc bb83 	b.w	800d1ea <gc_execute_block+0x1ba>
                if(gc_block.modal.program_flow == ProgramFlow_CompletedM60 && hal.pallet_shuttle)
 8010ae4:	4b87      	ldr	r3, [pc, #540]	@ (8010d04 <gc_execute_block+0x3cd4>)
 8010ae6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d0ed      	beq.n	8010aca <gc_execute_block+0x3a9a>
                    hal.pallet_shuttle();
 8010aee:	4798      	blx	r3
 8010af0:	e7eb      	b.n	8010aca <gc_execute_block+0x3a9a>
            if(!check_mode && gc_block.modal.program_flow == ProgramFlow_CompletedM30 && hal.pallet_shuttle)
 8010af2:	4b84      	ldr	r3, [pc, #528]	@ (8010d04 <gc_execute_block+0x3cd4>)
 8010af4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	f43f ad1f 	beq.w	801053c <gc_execute_block+0x350c>
                hal.pallet_shuttle();
 8010afe:	4798      	blx	r3
 8010b00:	e51c      	b.n	801053c <gc_execute_block+0x350c>
                gc_state.modal.coord_system.id = CoordinateSystem_G54;
 8010b02:	4b7d      	ldr	r3, [pc, #500]	@ (8010cf8 <gc_execute_block+0x3cc8>)
 8010b04:	751a      	strb	r2, [r3, #20]
                system_add_rt_report(Report_GWCO);
 8010b06:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010b0a:	f010 fdb9 	bl	8021680 <system_add_rt_report>
 8010b0e:	e526      	b.n	801055e <gc_execute_block+0x352e>
                if (!(settings_read_coord_data(gc_state.modal.coord_system.id, &gc_state.modal.coord_system.xyz)))
 8010b10:	497e      	ldr	r1, [pc, #504]	@ (8010d0c <gc_execute_block+0x3cdc>)
 8010b12:	7b08      	ldrb	r0, [r1, #12]
 8010b14:	f00c f99c 	bl	801ce50 <settings_read_coord_data>
 8010b18:	b1d0      	cbz	r0, 8010b50 <gc_execute_block+0x3b20>
                if(settings_read_coord_data(CoordinateSystem_G92, &g92_offset_stored) && !isequal_position_vector(g92_offset_stored, gc_state.g92_coord_offset))
 8010b1a:	a911      	add	r1, sp, #68	@ 0x44
 8010b1c:	200b      	movs	r0, #11
 8010b1e:	f00c f997 	bl	801ce50 <settings_read_coord_data>
 8010b22:	b128      	cbz	r0, 8010b30 <gc_execute_block+0x3b00>
 8010b24:	220c      	movs	r2, #12
 8010b26:	497a      	ldr	r1, [pc, #488]	@ (8010d10 <gc_execute_block+0x3ce0>)
 8010b28:	a811      	add	r0, sp, #68	@ 0x44
 8010b2a:	f013 fc7e 	bl	802442a <memcmp>
 8010b2e:	b990      	cbnz	r0, 8010b56 <gc_execute_block+0x3b26>
                system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 8010b30:	f010 fe32 	bl	8021798 <system_flag_wco_change>
                spindle_all_off();
 8010b34:	f00d fb62 	bl	801e1fc <spindle_all_off>
                hal.coolant.set_state(gc_state.modal.coolant);
 8010b38:	4b72      	ldr	r3, [pc, #456]	@ (8010d04 <gc_execute_block+0x3cd4>)
 8010b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b3c:	4a6e      	ldr	r2, [pc, #440]	@ (8010cf8 <gc_execute_block+0x3cc8>)
 8010b3e:	7e50      	ldrb	r0, [r2, #25]
 8010b40:	4798      	blx	r3
                system_add_rt_report(Report_Spindle); // Set to report change
 8010b42:	2010      	movs	r0, #16
 8010b44:	f010 fd9c 	bl	8021680 <system_add_rt_report>
                system_add_rt_report(Report_Coolant); // immediately.
 8010b48:	2020      	movs	r0, #32
 8010b4a:	f010 fd99 	bl	8021680 <system_add_rt_report>
 8010b4e:	e546      	b.n	80105de <gc_execute_block+0x35ae>
                    FAIL(Status_SettingReadFail);
 8010b50:	2407      	movs	r4, #7
 8010b52:	f7fc bb4a 	b.w	800d1ea <gc_execute_block+0x1ba>
                    settings_write_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Save G92 offsets to non-volatile storage
 8010b56:	496e      	ldr	r1, [pc, #440]	@ (8010d10 <gc_execute_block+0x3ce0>)
 8010b58:	200b      	movs	r0, #11
 8010b5a:	f00c f955 	bl	801ce08 <settings_write_coord_data>
 8010b5e:	e7e7      	b.n	8010b30 <gc_execute_block+0x3b00>
                output_command_t *next = output_commands->next;
 8010b60:	6884      	ldr	r4, [r0, #8]
                free(output_commands);
 8010b62:	f011 fbcb 	bl	80222fc <free>
                output_commands = next;
 8010b66:	4b6b      	ldr	r3, [pc, #428]	@ (8010d14 <gc_execute_block+0x3ce4>)
 8010b68:	601c      	str	r4, [r3, #0]
            while(output_commands) {
 8010b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8010d14 <gc_execute_block+0x3ce4>)
 8010b6c:	6818      	ldr	r0, [r3, #0]
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	d1f6      	bne.n	8010b60 <gc_execute_block+0x3b30>
            ngc_modal_state_invalidate();
 8010b72:	f004 f8cd 	bl	8014d10 <ngc_modal_state_invalidate>
            grbl.report.feedback_message(Message_ProgramEnd);
 8010b76:	4b62      	ldr	r3, [pc, #392]	@ (8010d00 <gc_execute_block+0x3cd0>)
 8010b78:	68db      	ldr	r3, [r3, #12]
 8010b7a:	2008      	movs	r0, #8
 8010b7c:	4798      	blx	r3
 8010b7e:	e7ab      	b.n	8010ad8 <gc_execute_block+0x3aa8>
            FAIL(Status_ExpectedCommandLetter); // [Expected word letter]
 8010b80:	2401      	movs	r4, #1
 8010b82:	f7fc bb32 	b.w	800d1ea <gc_execute_block+0x1ba>
                FAIL(Status_BadNumberFormat);   // [Expected word value]
 8010b86:	2402      	movs	r4, #2
 8010b88:	f7fc bb2f 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010b8c:	2414      	movs	r4, #20
 8010b8e:	f7fc bb2c 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010b92:	2414      	movs	r4, #20
 8010b94:	f7fc bb29 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010b98:	2414      	movs	r4, #20
 8010b9a:	f7fc bb26 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [G7 & G8 not supported]
 8010b9e:	2414      	movs	r4, #20
 8010ba0:	f7fc bb23 	b.w	800d1ea <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 8010ba4:	2418      	movs	r4, #24
 8010ba6:	f7fc bb20 	b.w	800d1ea <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeUnsupportedCommand);
 8010baa:	2414      	movs	r4, #20
 8010bac:	f7fc bb1d 	b.w	800d1ea <gc_execute_block+0x1ba>
                        } else if (int_value == 92) {
 8010bb0:	2414      	movs	r4, #20
 8010bb2:	f7fc bb1a 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [G33.1 not yet supported]
 8010bb6:	2414      	movs	r4, #20
 8010bb8:	f7fc bb17 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 8010bbc:	2418      	movs	r4, #24
 8010bbe:	f7fc bb14 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [probing not supported by driver or unsupported G38.x command]
 8010bc2:	2414      	movs	r4, #20
 8010bc4:	f7fc bb11 	b.w	800d1ea <gc_execute_block+0x1ba>
                        if(!(hal.probe.get_state && ((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))))
 8010bc8:	2414      	movs	r4, #20
 8010bca:	f7fc bb0e 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 8010bce:	2418      	movs	r4, #24
 8010bd0:	f7fc bb0b 	b.w	800d1ea <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeUnsupportedCommand);
 8010bd4:	2414      	movs	r4, #20
 8010bd6:	f7fc bb08 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 8010bda:	2418      	movs	r4, #24
 8010bdc:	f7fc bb05 	b.w	800d1ea <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeUnsupportedCommand); // [G90.1 not supported]
 8010be0:	2414      	movs	r4, #20
 8010be2:	f7fc bb02 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010be6:	2414      	movs	r4, #20
 8010be8:	f7fc baff 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported G43.x command]
 8010bec:	2414      	movs	r4, #20
 8010bee:	f7fc bafc 	b.w	800d1ea <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict] }
 8010bf2:	2418      	movs	r4, #24
 8010bf4:	f7fc baf9 	b.w	800d1ea <gc_execute_block+0x1ba>
                        if(int_value == 59 && mantissa > 0) {
 8010bf8:	2414      	movs	r4, #20
 8010bfa:	f7fc baf6 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand);
 8010bfe:	2414      	movs	r4, #20
 8010c00:	f7fc baf3 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand);
 8010c04:	2414      	movs	r4, #20
 8010c06:	f7fc baf0 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeCommandValueNotInteger); // [Unsupported or invalid Gxx.x command]
 8010c0a:	2417      	movs	r4, #23
 8010c0c:	f7fc baed 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeModalGroupViolation);
 8010c10:	2415      	movs	r4, #21
 8010c12:	f7fc baea 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeWordRepeated); // [Word repeated]
 8010c16:	2419      	movs	r4, #25
 8010c18:	f7fc bae7 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeCommandValueNotInteger); // [No Mxx.x commands]
 8010c1c:	2417      	movs	r4, #23
 8010c1e:	f7fc bae4 	b.w	800d1ea <gc_execute_block+0x1ba>
                                    FAIL(Status_GcodeUnsupportedCommand);
 8010c22:	2414      	movs	r4, #20
 8010c24:	f7fc bae1 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 8010c28:	2414      	movs	r4, #20
 8010c2a:	f7fc bade 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 8010c2e:	2414      	movs	r4, #20
 8010c30:	f7fc badb 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010c34:	2414      	movs	r4, #20
 8010c36:	f7fc bad8 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 8010c3a:	2414      	movs	r4, #20
 8010c3c:	f7fc bad5 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010c40:	2414      	movs	r4, #20
 8010c42:	f7fc bad2 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 8010c46:	2414      	movs	r4, #20
 8010c48:	f7fc bacf 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010c4c:	2414      	movs	r4, #20
 8010c4e:	f7fc bacc 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand);
 8010c52:	2414      	movs	r4, #20
 8010c54:	f7fc bac9 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeModalGroupViolation);
 8010c58:	2415      	movs	r4, #21
 8010c5a:	f7fc bac6 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010c5e:	2414      	movs	r4, #20
 8010c60:	f7fc bac3 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 8010c64:	2417      	movs	r4, #23
 8010c66:	f7fc bac0 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 8010c6a:	2417      	movs	r4, #23
 8010c6c:	f7fc babd 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 8010c70:	2417      	movs	r4, #23
 8010c72:	f7fc baba 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 8010c76:	2417      	movs	r4, #23
 8010c78:	f7fc bab7 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeIllegalToolTableEntry);
 8010c7c:	2426      	movs	r4, #38	@ 0x26
 8010c7e:	f7fc bab4 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 8010c82:	2417      	movs	r4, #23
 8010c84:	f7fc bab1 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeWordRepeated); // [Word repeated]
 8010c88:	2419      	movs	r4, #25
 8010c8a:	f7fc baae 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_NegativeValue); // [Word value cannot be negative]
 8010c8e:	2404      	movs	r4, #4
 8010c90:	f7fc baab 	b.w	800d1ea <gc_execute_block+0x1ba>
        FAIL(Status_GcodeInvalidLineNumber); // [Exceeds max line number]
 8010c94:	241b      	movs	r4, #27
 8010c96:	f7fc baa8 	b.w	800d1ea <gc_execute_block+0x1ba>
            FAIL(Status_GcodeUndefinedFeedRate);
 8010c9a:	2416      	movs	r4, #22
 8010c9c:	f7fc baa5 	b.w	800d1ea <gc_execute_block+0x1ba>
                FAIL(Status_GcodeValueOutOfRange);
 8010ca0:	2427      	movs	r4, #39	@ 0x27
 8010ca2:	f7fc baa2 	b.w	800d1ea <gc_execute_block+0x1ba>
                FAIL(Status_GcodeUnsupportedCommand);
 8010ca6:	2414      	movs	r4, #20
 8010ca8:	f7fc ba9f 	b.w	800d1ea <gc_execute_block+0x1ba>
                FAIL(Status_GcodeValueWordMissing);
 8010cac:	241c      	movs	r4, #28
 8010cae:	f7fc ba9c 	b.w	800d1ea <gc_execute_block+0x1ba>
            FAIL(Status_GcodeValueWordMissing);
 8010cb2:	241c      	movs	r4, #28
 8010cb4:	f7fc ba99 	b.w	800d1ea <gc_execute_block+0x1ba>
            FAIL(Status_GcodeCommandValueNotInteger);
 8010cb8:	2417      	movs	r4, #23
 8010cba:	f7fc ba96 	b.w	800d1ea <gc_execute_block+0x1ba>
            FAIL(Status_GcodeIllegalToolTableEntry);
 8010cbe:	2426      	movs	r4, #38	@ 0x26
 8010cc0:	f7fc ba93 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueWordMissing);
 8010cc4:	241c      	movs	r4, #28
 8010cc6:	f7fc ba90 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_NegativeValue);
 8010cca:	2404      	movs	r4, #4
 8010ccc:	f7fc ba8d 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 8010cd0:	2427      	movs	r4, #39	@ 0x27
 8010cd2:	f7fc ba8a 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueWordMissing);
 8010cd6:	241c      	movs	r4, #28
 8010cd8:	f7fc ba87 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_ValueWordConflict);
 8010cdc:	2430      	movs	r4, #48	@ 0x30
 8010cde:	f7fc ba84 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010ce2:	bf00      	nop
 8010ce4:	2000148c 	.word	0x2000148c
 8010ce8:	20000ddc 	.word	0x20000ddc
 8010cec:	20000e60 	.word	0x20000e60
 8010cf0:	20000eb4 	.word	0x20000eb4
 8010cf4:	20000f4c 	.word	0x20000f4c
 8010cf8:	20000ee4 	.word	0x20000ee4
 8010cfc:	20001514 	.word	0x20001514
 8010d00:	20001394 	.word	0x20001394
 8010d04:	200011ac 	.word	0x200011ac
 8010d08:	200014d4 	.word	0x200014d4
 8010d0c:	20000eec 	.word	0x20000eec
 8010d10:	20000f9c 	.word	0x20000f9c
 8010d14:	20000eb0 	.word	0x20000eb0
                    FAIL(Status_GcodeValueOutOfRange);
 8010d18:	2427      	movs	r4, #39	@ 0x27
 8010d1a:	f7fc ba66 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 8010d1e:	2427      	movs	r4, #39	@ 0x27
 8010d20:	f7fc ba63 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_NegativeValue);
 8010d24:	2404      	movs	r4, #4
 8010d26:	f7fc ba60 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange);
 8010d2a:	2427      	movs	r4, #39	@ 0x27
 8010d2c:	f7fc ba5d 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange);
 8010d30:	2427      	movs	r4, #39	@ 0x27
 8010d32:	f7fc ba5a 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange);
 8010d36:	2427      	movs	r4, #39	@ 0x27
 8010d38:	f7fc ba57 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueWordMissing);
 8010d3c:	241c      	movs	r4, #28
 8010d3e:	f7fc ba54 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeRPMOutOfRange);
 8010d42:	242c      	movs	r4, #44	@ 0x2c
 8010d44:	f7fc ba51 	b.w	800d1ea <gc_execute_block+0x1ba>
            FAIL(Status_GcodeUnsupportedCommand);
 8010d48:	2414      	movs	r4, #20
 8010d4a:	f7fc ba4e 	b.w	800d1ea <gc_execute_block+0x1ba>
                FAIL(Status_NegativeValue);
 8010d4e:	2404      	movs	r4, #4
 8010d50:	f7fc ba4b 	b.w	800d1ea <gc_execute_block+0x1ba>
            FAIL(Status_GcodeValueWordMissing); // [P word missing]
 8010d54:	241c      	movs	r4, #28
 8010d56:	f7fc ba48 	b.w	800d1ea <gc_execute_block+0x1ba>
                FAIL(Status_GcodeNoAxisWords); // [No axis words]
 8010d5a:	241a      	movs	r4, #26
 8010d5c:	f7fc ba45 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnsupportedCommand);
 8010d60:	2414      	movs	r4, #20
 8010d62:	f7fc ba42 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeIllegalToolTableEntry);
 8010d66:	2426      	movs	r4, #38	@ 0x26
 8010d68:	f7fc ba3f 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnsupportedCommand);
 8010d6c:	2414      	movs	r4, #20
 8010d6e:	f7fc ba3c 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing);
 8010d72:	241c      	movs	r4, #28
 8010d74:	f7fc ba39 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeIllegalToolTableEntry);
 8010d78:	2426      	movs	r4, #38	@ 0x26
 8010d7a:	f7fc ba36 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010d7e:	2426      	movs	r4, #38	@ 0x26
 8010d80:	f7fc ba33 	b.w	800d1ea <gc_execute_block+0x1ba>
                FAIL(Status_GcodeNoAxisWords); // [No axis words (or R word for tool offsets)]
 8010d84:	241a      	movs	r4, #26
 8010d86:	f7fc ba30 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010d8a:	241a      	movs	r4, #26
 8010d8c:	f7fc ba2d 	b.w	800d1ea <gc_execute_block+0x1ba>
                FAIL(Status_GcodeValueWordMissing); // [P/L word missing]
 8010d90:	241c      	movs	r4, #28
 8010d92:	f7fc ba2a 	b.w	800d1ea <gc_execute_block+0x1ba>
                FAIL(Status_NegativeValue);
 8010d96:	2404      	movs	r4, #4
 8010d98:	f7fc ba27 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010d9c:	2414      	movs	r4, #20
 8010d9e:	f7fc ba24 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeUnsupportedCommand); // [G10 L2 R not supported]
 8010da2:	2414      	movs	r4, #20
 8010da4:	f7fc ba21 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeUnsupportedCoordSys); // [Greater than N sys]
 8010da8:	241d      	movs	r4, #29
 8010daa:	f7fc ba1e 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_SettingReadFail); // [non-volatile storage read fail]
 8010dae:	2407      	movs	r4, #7
 8010db0:	f7fc ba1b 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GCodeCoordSystemLocked);
 8010db4:	2438      	movs	r4, #56	@ 0x38
 8010db6:	f7fc ba18 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeUnsupportedCommand);
 8010dba:	2414      	movs	r4, #20
 8010dbc:	f7fc ba15 	b.w	800d1ea <gc_execute_block+0x1ba>
                FAIL(Status_GcodeNoAxisWords); // [No axis words]
 8010dc0:	241a      	movs	r4, #26
 8010dc2:	f7fc ba12 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_SettingReadFail);
 8010dc6:	2407      	movs	r4, #7
 8010dc8:	f7fc ba0f 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing); // [P word missing]
 8010dcc:	241c      	movs	r4, #28
 8010dce:	f7fc ba0c 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange); // [P word out of range]
 8010dd2:	2427      	movs	r4, #39	@ 0x27
 8010dd4:	f7fc ba09 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_FlowControlStackOverflow); // [Call level too deep]
 8010dd8:	2452      	movs	r4, #82	@ 0x52
 8010dda:	f7fc ba06 	b.w	800d1ea <gc_execute_block+0x1ba>
            FAIL(Status_GcodeAxisWordsExist);
 8010dde:	241f      	movs	r4, #31
 8010de0:	f7fc ba03 	b.w	800d1ea <gc_execute_block+0x1ba>
                 FAIL(Status_GcodeSpindleNotRunning);
 8010de4:	2429      	movs	r4, #41	@ 0x29
 8010de6:	f7fc ba00 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnsupportedCommand); // [G33, G33.1]
 8010dea:	2414      	movs	r4, #20
 8010dec:	f7fc b9fd 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange); // [No distance (pitch) given]
 8010df0:	2427      	movs	r4, #39	@ 0x27
 8010df2:	f7fc b9fa 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnsupportedCommand); // [G76 not supported]
 8010df6:	2414      	movs	r4, #20
 8010df8:	f7fc b9f7 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeIllegalPlane); // [Plane not ZX]
 8010dfc:	242a      	movs	r4, #42	@ 0x2a
 8010dfe:	f7fc b9f4 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnusedWords); // [Only X and Z axis words allowed]
 8010e02:	2424      	movs	r4, #36	@ 0x24
 8010e04:	f7fc b9f1 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 8010e08:	2427      	movs	r4, #39	@ 0x27
 8010e0a:	f7fc b9ee 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueWordMissing);
 8010e0e:	241c      	movs	r4, #28
 8010e10:	f7fc b9eb 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010e14:	241c      	movs	r4, #28
 8010e16:	f7fc b9e8 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_NegativeValue);
 8010e1a:	2404      	movs	r4, #4
 8010e1c:	f7fc b9e5 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010e20:	2404      	movs	r4, #4
 8010e22:	f7fc b9e2 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010e26:	2404      	movs	r4, #4
 8010e28:	f7fc b9df 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 8010e2c:	2427      	movs	r4, #39	@ 0x27
 8010e2e:	f7fc b9dc 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010e32:	2427      	movs	r4, #39	@ 0x27
 8010e34:	f7fc b9d9 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010e38:	2427      	movs	r4, #39	@ 0x27
 8010e3a:	f7fc b9d6 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010e3e:	2427      	movs	r4, #39	@ 0x27
 8010e40:	f7fc b9d3 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeRPMOutOfRange);
 8010e44:	242c      	movs	r4, #44	@ 0x2c
 8010e46:	f7fc b9d0 	b.w	800d1ea <gc_execute_block+0x1ba>
 8010e4a:	242c      	movs	r4, #44	@ 0x2c
 8010e4c:	f7fc b9cd 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 8010e50:	2427      	movs	r4, #39	@ 0x27
 8010e52:	f7fc b9ca 	b.w	800d1ea <gc_execute_block+0x1ba>
                FAIL(Status_GcodeUndefinedFeedRate); // [Feed rate undefined]
 8010e56:	2416      	movs	r4, #22
 8010e58:	f7fc b9c7 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_InvalidStatement);
 8010e5c:	2403      	movs	r4, #3
 8010e5e:	f7fc b9c4 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing);
 8010e62:	241c      	movs	r4, #28
 8010e64:	f7fc b9c1 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing);
 8010e68:	241c      	movs	r4, #28
 8010e6a:	f7fc b9be 	b.w	800d1ea <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeInvalidRetractPosition);
 8010e6e:	2436      	movs	r4, #54	@ 0x36
 8010e70:	f7fc b9bb 	b.w	800d1ea <gc_execute_block+0x1ba>
                                FAIL(Status_NegativeValue);
 8010e74:	2404      	movs	r4, #4
 8010e76:	f7fc b9b8 	b.w	800d1ea <gc_execute_block+0x1ba>
                                FAIL(Status_NegativeValue); // [Q <= 0]
 8010e7a:	2404      	movs	r4, #4
 8010e7c:	f7fc b9b5 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeNoAxisWords); // [No axis words]
 8010e80:	241a      	movs	r4, #26
 8010e82:	f7fc b9b2 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeNoAxisWordsInPlane); // [No axis words in plane]
 8010e86:	2420      	movs	r4, #32
 8010e88:	f7fc b9af 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger); // [P word is not an integer]
 8010e8c:	2417      	movs	r4, #23
 8010e8e:	f7fc b9ac 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeValueOutOfRange); // [P word is 0]
 8010e92:	2427      	movs	r4, #39	@ 0x27
 8010e94:	f7fc b9a9 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeInvalidTarget); // [Invalid target]
 8010e98:	2421      	movs	r4, #33	@ 0x21
 8010e9a:	f7fc b9a6 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeArcRadiusError); // [Arc radius error] TODO: this will fail due to limited float precision...
 8010e9e:	2422      	movs	r4, #34	@ 0x22
 8010ea0:	f7fc b9a3 	b.w	800d1ea <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeNoOffsetsInPlane);// [No offsets in plane]
 8010ea4:	2423      	movs	r4, #35	@ 0x23
 8010ea6:	f7fc b9a0 	b.w	800d1ea <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeInvalidTarget); // [Arc definition error] > 0.5mm
 8010eaa:	2421      	movs	r4, #33	@ 0x21
 8010eac:	f7fc b99d 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeIllegalPlane); // [The active plane is not G17]
 8010eb0:	242a      	movs	r4, #42	@ 0x2a
 8010eb2:	f7fc b99a 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeAxisCommandConflict); // [An axis other than X or Y is specified]
 8010eb6:	2418      	movs	r4, #24
 8010eb8:	f7fc b997 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing); // [P and Q are not both specified]
 8010ebc:	241c      	movs	r4, #28
 8010ebe:	f7fc b994 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing); // [I or J are unspecified in the first of a series of G5 commands]
 8010ec2:	241c      	movs	r4, #28
 8010ec4:	f7fc b991 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeIllegalPlane); // [The active plane is not G17]
 8010ec8:	242a      	movs	r4, #42	@ 0x2a
 8010eca:	f7fc b98e 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeAxisCommandConflict); // [An axis other than X or Y is specified]
 8010ece:	2418      	movs	r4, #24
 8010ed0:	f7fc b98b 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing); // [I or J are unspecified]
 8010ed4:	241c      	movs	r4, #28
 8010ed6:	f7fc b988 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange); // [I or J are zero]
 8010eda:	2427      	movs	r4, #39	@ 0x27
 8010edc:	f7fc b985 	b.w	800d1ea <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeNoAxisWords); // [No axis words]
 8010ee0:	241a      	movs	r4, #26
 8010ee2:	f7fc b982 	b.w	800d1ea <gc_execute_block+0x1ba>
        FAIL(Status_GcodeUnusedWords); // [Unused words]
 8010ee6:	2424      	movs	r4, #36	@ 0x24
 8010ee8:	f7fc b97f 	b.w	800d1ea <gc_execute_block+0x1ba>
            FAIL(Status_InvalidJogCommand);
 8010eec:	2410      	movs	r4, #16
 8010eee:	f7fc b97c 	b.w	800d1ea <gc_execute_block+0x1ba>
            FAIL(Status_InvalidJogCommand);
 8010ef2:	2410      	movs	r4, #16
 8010ef4:	f7fc b979 	b.w	800d1ea <gc_execute_block+0x1ba>

08010ef8 <dummy_bool_handler>:
#endif

void dummy_bool_handler (bool arg)
{
    // NOOP
}
 8010ef8:	4770      	bx	lr

08010efa <dummy_irq_claim>:
}

static bool dummy_irq_claim (irq_type_t irq, uint_fast8_t id, irq_callback_ptr callback)
{
    return false;
}
 8010efa:	2000      	movs	r0, #0
 8010efc:	4770      	bx	lr
	...

08010f00 <get_homing_status>:
        task_add_delayed(realtime_report_check, NULL, settings.report_interval);
}

// "Wire" homing signals to limit signals, used when max limit inputs not available.
ISR_CODE static home_signals_t ISR_FUNC(get_homing_status)(void)
{
 8010f00:	b500      	push	{lr}
 8010f02:	b085      	sub	sp, #20
    home_signals_t home;
    limit_signals_t limits = hal.limits.get_state();
 8010f04:	4b0d      	ldr	r3, [pc, #52]	@ (8010f3c <get_homing_status+0x3c>)
 8010f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f08:	4798      	blx	r3
 8010f0a:	9001      	str	r0, [sp, #4]

    home.a.value = limits.min.value;
 8010f0c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010f10:	f88d 3008 	strb.w	r3, [sp, #8]
    home.b.value = limits.min2.value;
 8010f14:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010f18:	f88d 3009 	strb.w	r3, [sp, #9]

    return home;
 8010f1c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010f20:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010f24:	2000      	movs	r0, #0
 8010f26:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010f2a:	f363 0007 	bfi	r0, r3, #0, #8
 8010f2e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8010f32:	f363 200f 	bfi	r0, r3, #8, #8
}
 8010f36:	b005      	add	sp, #20
 8010f38:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f3c:	200011ac 	.word	0x200011ac

08010f40 <task_alloc>:
static inline core_task_t *task_alloc (void)
{
    core_task_t *task = NULL;
    uint_fast8_t idx = CORE_TASK_POOL_SIZE;

    if(last_freed) {
 8010f40:	4b09      	ldr	r3, [pc, #36]	@ (8010f68 <task_alloc+0x28>)
 8010f42:	6818      	ldr	r0, [r3, #0]
 8010f44:	b110      	cbz	r0, 8010f4c <task_alloc+0xc>
        task = last_freed;
        last_freed = NULL;
 8010f46:	2200      	movs	r2, #0
 8010f48:	601a      	str	r2, [r3, #0]
 8010f4a:	4770      	bx	lr
    uint_fast8_t idx = CORE_TASK_POOL_SIZE;
 8010f4c:	231e      	movs	r3, #30
    } else do {
        if(task_pool[--idx].fn == NULL)
 8010f4e:	3b01      	subs	r3, #1
 8010f50:	4a06      	ldr	r2, [pc, #24]	@ (8010f6c <task_alloc+0x2c>)
 8010f52:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8010f56:	6852      	ldr	r2, [r2, #4]
 8010f58:	b112      	cbz	r2, 8010f60 <task_alloc+0x20>
            task = &task_pool[idx];
    } while(task == NULL && idx);
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d1f7      	bne.n	8010f4e <task_alloc+0xe>

    return task;
}
 8010f5e:	4770      	bx	lr
            task = &task_pool[idx];
 8010f60:	4802      	ldr	r0, [pc, #8]	@ (8010f6c <task_alloc+0x2c>)
 8010f62:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    } while(task == NULL && idx);
 8010f66:	4770      	bx	lr
 8010f68:	20000fbc 	.word	0x20000fbc
 8010f6c:	20000fcc 	.word	0x20000fcc

08010f70 <task_execute>:
    if(last_freed == NULL)
        last_freed = task;
}

static void task_execute (sys_state_t state)
{
 8010f70:	b538      	push	{r3, r4, r5, lr}
    static uint32_t last_ms = 0;

    core_task_t *task;

    if(immediate_task && sys.driver_started) {
 8010f72:	4b27      	ldr	r3, [pc, #156]	@ (8011010 <task_execute+0xa0>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	b1db      	cbz	r3, 8010fb0 <task_execute+0x40>
 8010f78:	4b26      	ldr	r3, [pc, #152]	@ (8011014 <task_execute+0xa4>)
 8010f7a:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8010f7e:	b1bb      	cbz	r3, 8010fb0 <task_execute+0x40>

        hal.irq_disable();
 8010f80:	4d25      	ldr	r5, [pc, #148]	@ (8011018 <task_execute+0xa8>)
 8010f82:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8010f84:	4798      	blx	r3
        task = immediate_task;
 8010f86:	4b22      	ldr	r3, [pc, #136]	@ (8011010 <task_execute+0xa0>)
 8010f88:	681c      	ldr	r4, [r3, #0]
        immediate_task = NULL;
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	601a      	str	r2, [r3, #0]
        hal.irq_enable();
 8010f8e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8010f90:	4798      	blx	r3
 8010f92:	e002      	b.n	8010f9a <task_execute+0x2a>

        do {
            void *data = task->data;
            foreground_task_ptr fn = task->fn;
            task_free(task);
            fn(data);
 8010f94:	4798      	blx	r3
        } while((task = task->next));
 8010f96:	68e4      	ldr	r4, [r4, #12]
 8010f98:	b154      	cbz	r4, 8010fb0 <task_execute+0x40>
            void *data = task->data;
 8010f9a:	68a0      	ldr	r0, [r4, #8]
            foreground_task_ptr fn = task->fn;
 8010f9c:	6863      	ldr	r3, [r4, #4]
    task->fn = NULL;
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	6062      	str	r2, [r4, #4]
    if(last_freed == NULL)
 8010fa2:	4a1e      	ldr	r2, [pc, #120]	@ (801101c <task_execute+0xac>)
 8010fa4:	6812      	ldr	r2, [r2, #0]
 8010fa6:	2a00      	cmp	r2, #0
 8010fa8:	d1f4      	bne.n	8010f94 <task_execute+0x24>
        last_freed = task;
 8010faa:	4a1c      	ldr	r2, [pc, #112]	@ (801101c <task_execute+0xac>)
 8010fac:	6014      	str	r4, [r2, #0]
 8010fae:	e7f1      	b.n	8010f94 <task_execute+0x24>
    }

    uint32_t now = hal.get_elapsed_ticks();
 8010fb0:	4b19      	ldr	r3, [pc, #100]	@ (8011018 <task_execute+0xa8>)
 8010fb2:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8010fb6:	4798      	blx	r3
 8010fb8:	4605      	mov	r5, r0
    if(now == last_ms || next_task == systick_task)
 8010fba:	4b19      	ldr	r3, [pc, #100]	@ (8011020 <task_execute+0xb0>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	4283      	cmp	r3, r0
 8010fc0:	d025      	beq.n	801100e <task_execute+0x9e>
 8010fc2:	4b18      	ldr	r3, [pc, #96]	@ (8011024 <task_execute+0xb4>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	4a18      	ldr	r2, [pc, #96]	@ (8011028 <task_execute+0xb8>)
 8010fc8:	6814      	ldr	r4, [r2, #0]
 8010fca:	42a3      	cmp	r3, r4
 8010fcc:	d01f      	beq.n	801100e <task_execute+0x9e>
        return;

    last_ms = now;
 8010fce:	4b14      	ldr	r3, [pc, #80]	@ (8011020 <task_execute+0xb0>)
 8010fd0:	6018      	str	r0, [r3, #0]

    if((task = systick_task)) do {
 8010fd2:	b154      	cbz	r4, 8010fea <task_execute+0x7a>
        task->fn(task->data);
 8010fd4:	6863      	ldr	r3, [r4, #4]
 8010fd6:	68a0      	ldr	r0, [r4, #8]
 8010fd8:	4798      	blx	r3
    } while((task = task->next));
 8010fda:	68e4      	ldr	r4, [r4, #12]
 8010fdc:	2c00      	cmp	r4, #0
 8010fde:	d1f9      	bne.n	8010fd4 <task_execute+0x64>
 8010fe0:	e003      	b.n	8010fea <task_execute+0x7a>
    while(next_task && (int32_t)(next_task->time - now) <= 0) {

        void *data = next_task->data;
        foreground_task_ptr fn = next_task->fn;
        task_free(next_task);
        next_task = next_task->next;
 8010fe2:	68d9      	ldr	r1, [r3, #12]
 8010fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8011024 <task_execute+0xb4>)
 8010fe6:	6019      	str	r1, [r3, #0]

        fn(data);
 8010fe8:	4790      	blx	r2
    while(next_task && (int32_t)(next_task->time - now) <= 0) {
 8010fea:	4b0e      	ldr	r3, [pc, #56]	@ (8011024 <task_execute+0xb4>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	b173      	cbz	r3, 801100e <task_execute+0x9e>
 8010ff0:	681a      	ldr	r2, [r3, #0]
 8010ff2:	1b52      	subs	r2, r2, r5
 8010ff4:	2a00      	cmp	r2, #0
 8010ff6:	dc0a      	bgt.n	801100e <task_execute+0x9e>
        void *data = next_task->data;
 8010ff8:	6898      	ldr	r0, [r3, #8]
        foreground_task_ptr fn = next_task->fn;
 8010ffa:	685a      	ldr	r2, [r3, #4]
    task->fn = NULL;
 8010ffc:	2100      	movs	r1, #0
 8010ffe:	6059      	str	r1, [r3, #4]
    if(last_freed == NULL)
 8011000:	4906      	ldr	r1, [pc, #24]	@ (801101c <task_execute+0xac>)
 8011002:	6809      	ldr	r1, [r1, #0]
 8011004:	2900      	cmp	r1, #0
 8011006:	d1ec      	bne.n	8010fe2 <task_execute+0x72>
        last_freed = task;
 8011008:	4904      	ldr	r1, [pc, #16]	@ (801101c <task_execute+0xac>)
 801100a:	600b      	str	r3, [r1, #0]
 801100c:	e7e9      	b.n	8010fe2 <task_execute+0x72>
    }
}
 801100e:	bd38      	pop	{r3, r4, r5, pc}
 8011010:	20000fc4 	.word	0x20000fc4
 8011014:	2000148c 	.word	0x2000148c
 8011018:	200011ac 	.word	0x200011ac
 801101c:	20000fbc 	.word	0x20000fbc
 8011020:	20000fb8 	.word	0x20000fb8
 8011024:	20000fc8 	.word	0x20000fc8
 8011028:	20000fc0 	.word	0x20000fc0

0801102c <reset_handler>:
{
 801102c:	b508      	push	{r3, lr}
    report_init_fns();
 801102e:	f00a fbb5 	bl	801b79c <report_init_fns>
    grbl.on_macro_return = NULL;
 8011032:	4b02      	ldr	r3, [pc, #8]	@ (801103c <reset_handler+0x10>)
 8011034:	2200      	movs	r2, #0
 8011036:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
}
 801103a:	bd08      	pop	{r3, pc}
 801103c:	20001394 	.word	0x20001394

08011040 <get_homing_status2>:
{
 8011040:	b500      	push	{lr}
 8011042:	b085      	sub	sp, #20
    limit_signals_t source = xbar_get_homing_source(), limits = hal.limits.get_state();
 8011044:	f7fb fbc4 	bl	800c7d0 <xbar_get_homing_source>
 8011048:	9001      	str	r0, [sp, #4]
 801104a:	4b17      	ldr	r3, [pc, #92]	@ (80110a8 <get_homing_status2+0x68>)
 801104c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801104e:	4798      	blx	r3
 8011050:	9000      	str	r0, [sp, #0]
    home.a.value = (limits.min.value & source.min.mask) | (limits.max.value & source.max.mask);
 8011052:	f89d 3000 	ldrb.w	r3, [sp]
 8011056:	f89d 0004 	ldrb.w	r0, [sp, #4]
 801105a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801105e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011062:	4003      	ands	r3, r0
 8011064:	400a      	ands	r2, r1
 8011066:	4313      	orrs	r3, r2
 8011068:	f88d 3008 	strb.w	r3, [sp, #8]
    home.b.value = (limits.min2.value & source.min2.mask) | (limits.max2.value & source.max2.mask);
 801106c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011070:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8011074:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011078:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801107c:	4003      	ands	r3, r0
 801107e:	400a      	ands	r2, r1
 8011080:	4313      	orrs	r3, r2
 8011082:	f88d 3009 	strb.w	r3, [sp, #9]
    return home;
 8011086:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801108a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801108e:	2000      	movs	r0, #0
 8011090:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011094:	f363 0007 	bfi	r0, r3, #0, #8
 8011098:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801109c:	f363 200f 	bfi	r0, r3, #8, #8
}
 80110a0:	b005      	add	sp, #20
 80110a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80110a6:	bf00      	nop
 80110a8:	200011ac 	.word	0x200011ac

080110ac <report_driver_error>:
{
 80110ac:	b510      	push	{r4, lr}
 80110ae:	b08a      	sub	sp, #40	@ 0x28
    driver.ok = ~driver.ok;
 80110b0:	4b13      	ldr	r3, [pc, #76]	@ (8011100 <report_driver_error+0x54>)
 80110b2:	f893 e000 	ldrb.w	lr, [r3]
 80110b6:	ea6f 0e0e 	mvn.w	lr, lr
 80110ba:	fa5f fe8e 	uxtb.w	lr, lr
 80110be:	f883 e000 	strb.w	lr, [r3]
    strcpy(msg, "Fatal: Incompatible driver (");
 80110c2:	46ec      	mov	ip, sp
 80110c4:	4c0f      	ldr	r4, [pc, #60]	@ (8011104 <report_driver_error+0x58>)
 80110c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80110c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80110d0:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80110d4:	f88c 3000 	strb.w	r3, [ip]
    strcat(msg, uitoa(driver.ok));
 80110d8:	4670      	mov	r0, lr
 80110da:	f004 f84f 	bl	801517c <uitoa>
 80110de:	4601      	mov	r1, r0
 80110e0:	4668      	mov	r0, sp
 80110e2:	f013 f9d4 	bl	802448e <strcat>
    strcat(msg, ")");
 80110e6:	4668      	mov	r0, sp
 80110e8:	f7f7 f80a 	bl	8008100 <strlen>
 80110ec:	4b06      	ldr	r3, [pc, #24]	@ (8011108 <report_driver_error+0x5c>)
 80110ee:	881b      	ldrh	r3, [r3, #0]
 80110f0:	f82d 3000 	strh.w	r3, [sp, r0]
    report_message(msg, Message_Plain);
 80110f4:	2100      	movs	r1, #0
 80110f6:	4668      	mov	r0, sp
 80110f8:	f007 fefc 	bl	8018ef4 <report_message>
}
 80110fc:	b00a      	add	sp, #40	@ 0x28
 80110fe:	bd10      	pop	{r4, pc}
 8011100:	200001c0 	.word	0x200001c0
 8011104:	0802a914 	.word	0x0802a914
 8011108:	0802a934 	.word	0x0802a934

0801110c <task_add_delayed>:

ISR_CODE bool ISR_FUNC(task_add_delayed)(foreground_task_ptr fn, void *data, uint32_t delay_ms)
{
 801110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801110e:	4604      	mov	r4, r0
 8011110:	460e      	mov	r6, r1
 8011112:	4617      	mov	r7, r2
    core_task_t *task = NULL;

    hal.irq_disable();
 8011114:	4b19      	ldr	r3, [pc, #100]	@ (801117c <task_add_delayed+0x70>)
 8011116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011118:	4798      	blx	r3

    if(fn && (task = task_alloc())) {
 801111a:	b334      	cbz	r4, 801116a <task_add_delayed+0x5e>
 801111c:	f7ff ff10 	bl	8010f40 <task_alloc>
 8011120:	4605      	mov	r5, r0
 8011122:	b318      	cbz	r0, 801116c <task_add_delayed+0x60>

        task->time = hal.get_elapsed_ticks() + delay_ms;
 8011124:	4b15      	ldr	r3, [pc, #84]	@ (801117c <task_add_delayed+0x70>)
 8011126:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 801112a:	4798      	blx	r3
 801112c:	4438      	add	r0, r7
 801112e:	6028      	str	r0, [r5, #0]
        task->fn = fn;
 8011130:	606c      	str	r4, [r5, #4]
        task->data = data;
 8011132:	60ae      	str	r6, [r5, #8]
        task->next = NULL;
 8011134:	2300      	movs	r3, #0
 8011136:	60eb      	str	r3, [r5, #12]

        if(next_task == NULL)
 8011138:	4b11      	ldr	r3, [pc, #68]	@ (8011180 <task_add_delayed+0x74>)
 801113a:	681c      	ldr	r4, [r3, #0]
 801113c:	b164      	cbz	r4, 8011158 <task_add_delayed+0x4c>
            next_task = task;
        else if((int32_t)(task->time - next_task->time) < 0) {
 801113e:	6823      	ldr	r3, [r4, #0]
 8011140:	1ac3      	subs	r3, r0, r3
 8011142:	2b00      	cmp	r3, #0
 8011144:	db0a      	blt.n	801115c <task_add_delayed+0x50>
            task->next = next_task;
            next_task = task;
        } else {
            core_task_t *t = next_task;
            while(t) {
 8011146:	b18c      	cbz	r4, 801116c <task_add_delayed+0x60>
                if(t->next == NULL || (int32_t)(task->time - t->next->time) < 0) {
 8011148:	68e3      	ldr	r3, [r4, #12]
 801114a:	b15b      	cbz	r3, 8011164 <task_add_delayed+0x58>
 801114c:	6819      	ldr	r1, [r3, #0]
 801114e:	1a41      	subs	r1, r0, r1
 8011150:	2900      	cmp	r1, #0
 8011152:	db07      	blt.n	8011164 <task_add_delayed+0x58>
                    task->next = t->next;
                    t->next = task;
                    break;
                }
                t = t->next;
 8011154:	461c      	mov	r4, r3
 8011156:	e7f6      	b.n	8011146 <task_add_delayed+0x3a>
            next_task = task;
 8011158:	601d      	str	r5, [r3, #0]
 801115a:	e007      	b.n	801116c <task_add_delayed+0x60>
            task->next = next_task;
 801115c:	60ec      	str	r4, [r5, #12]
            next_task = task;
 801115e:	4b08      	ldr	r3, [pc, #32]	@ (8011180 <task_add_delayed+0x74>)
 8011160:	601d      	str	r5, [r3, #0]
 8011162:	e003      	b.n	801116c <task_add_delayed+0x60>
                    task->next = t->next;
 8011164:	60eb      	str	r3, [r5, #12]
                    t->next = task;
 8011166:	60e5      	str	r5, [r4, #12]
                    break;
 8011168:	e000      	b.n	801116c <task_add_delayed+0x60>
    core_task_t *task = NULL;
 801116a:	2500      	movs	r5, #0
            }
        }
    }

    hal.irq_enable();
 801116c:	4b03      	ldr	r3, [pc, #12]	@ (801117c <task_add_delayed+0x70>)
 801116e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011170:	4798      	blx	r3

    return task != NULL;
}
 8011172:	1e28      	subs	r0, r5, #0
 8011174:	bf18      	it	ne
 8011176:	2001      	movne	r0, #1
 8011178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801117a:	bf00      	nop
 801117c:	200011ac 	.word	0x200011ac
 8011180:	20000fc8 	.word	0x20000fc8

08011184 <grbl_enter>:
{
 8011184:	b570      	push	{r4, r5, r6, lr}
    memset(&grbl, 0, sizeof(grbl_t));
 8011186:	4c9e      	ldr	r4, [pc, #632]	@ (8011400 <grbl_enter+0x27c>)
 8011188:	22f8      	movs	r2, #248	@ 0xf8
 801118a:	2100      	movs	r1, #0
 801118c:	4620      	mov	r0, r4
 801118e:	f013 f976 	bl	802447e <memset>
    grbl.on_execute_realtime = grbl.on_execute_delay = task_execute;
 8011192:	4b9c      	ldr	r3, [pc, #624]	@ (8011404 <grbl_enter+0x280>)
 8011194:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8011196:	64a3      	str	r3, [r4, #72]	@ 0x48
    grbl.enqueue_gcode = protocol_enqueue_gcode;
 8011198:	4b9b      	ldr	r3, [pc, #620]	@ (8011408 <grbl_enter+0x284>)
 801119a:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
    grbl.enqueue_realtime_command = stream_enqueue_realtime_command;
 801119e:	4b9b      	ldr	r3, [pc, #620]	@ (801140c <grbl_enter+0x288>)
 80111a0:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
    grbl.on_report_options = dummy_bool_handler;
 80111a4:	4b9a      	ldr	r3, [pc, #616]	@ (8011410 <grbl_enter+0x28c>)
 80111a6:	6563      	str	r3, [r4, #84]	@ 0x54
    grbl.on_report_command_help = system_command_help;
 80111a8:	4b9a      	ldr	r3, [pc, #616]	@ (8011414 <grbl_enter+0x290>)
 80111aa:	65e3      	str	r3, [r4, #92]	@ 0x5c
    grbl.on_get_alarms = alarms_get_details;
 80111ac:	4b9a      	ldr	r3, [pc, #616]	@ (8011418 <grbl_enter+0x294>)
 80111ae:	66e3      	str	r3, [r4, #108]	@ 0x6c
    grbl.on_get_errors = errors_get_details;
 80111b0:	4b9a      	ldr	r3, [pc, #616]	@ (801141c <grbl_enter+0x298>)
 80111b2:	6723      	str	r3, [r4, #112]	@ 0x70
    grbl.on_get_settings = settings_get_details;
 80111b4:	4b9a      	ldr	r3, [pc, #616]	@ (8011420 <grbl_enter+0x29c>)
 80111b6:	6763      	str	r3, [r4, #116]	@ 0x74
    memset(&hal, 0, sizeof(grbl_hal_t));
 80111b8:	4c9a      	ldr	r4, [pc, #616]	@ (8011424 <grbl_enter+0x2a0>)
 80111ba:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80111be:	2100      	movs	r1, #0
 80111c0:	4620      	mov	r0, r4
 80111c2:	f013 f95c 	bl	802447e <memset>
    hal.version = HAL_VERSION; // Update when signatures and/or contract is changed - driver_init() should fail
 80111c6:	230a      	movs	r3, #10
 80111c8:	6023      	str	r3, [r4, #0]
    hal.driver_reset = reset_handler;
 80111ca:	4b97      	ldr	r3, [pc, #604]	@ (8011428 <grbl_enter+0x2a4>)
 80111cc:	f8c4 3170 	str.w	r3, [r4, #368]	@ 0x170
    hal.irq_enable = dummy_handler;
 80111d0:	4b96      	ldr	r3, [pc, #600]	@ (801142c <grbl_enter+0x2a8>)
 80111d2:	64a3      	str	r3, [r4, #72]	@ 0x48
    hal.irq_disable = dummy_handler;
 80111d4:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hal.irq_claim = dummy_irq_claim;
 80111d6:	4b96      	ldr	r3, [pc, #600]	@ (8011430 <grbl_enter+0x2ac>)
 80111d8:	6523      	str	r3, [r4, #80]	@ 0x50
    hal.nvs.size = GRBL_NVS_SIZE;
 80111da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80111de:	f8c4 3178 	str.w	r3, [r4, #376]	@ 0x178
    hal.coolant_cap.flood = On;
 80111e2:	f894 31e4 	ldrb.w	r3, [r4, #484]	@ 0x1e4
 80111e6:	f043 0301 	orr.w	r3, r3, #1
 80111ea:	f884 31e4 	strb.w	r3, [r4, #484]	@ 0x1e4
    hal.limits.interrupt_callback = limit_interrupt_handler;
 80111ee:	4b91      	ldr	r3, [pc, #580]	@ (8011434 <grbl_enter+0x2b0>)
 80111f0:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hal.control.interrupt_callback = control_interrupt_handler;
 80111f2:	4b91      	ldr	r3, [pc, #580]	@ (8011438 <grbl_enter+0x2b4>)
 80111f4:	66e3      	str	r3, [r4, #108]	@ 0x6c
    hal.stepper.interrupt_callback = stepper_driver_interrupt_handler;
 80111f6:	4b91      	ldr	r3, [pc, #580]	@ (801143c <grbl_enter+0x2b8>)
 80111f8:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
    hal.stream_blocking_callback = stream_tx_blocking;
 80111fc:	4b90      	ldr	r3, [pc, #576]	@ (8011440 <grbl_enter+0x2bc>)
 80111fe:	f8c4 31d4 	str.w	r3, [r4, #468]	@ 0x1d4
    hal.signals_cap.reset = hal.signals_cap.feed_hold = hal.signals_cap.cycle_start = On;
 8011202:	f894 31dc 	ldrb.w	r3, [r4, #476]	@ 0x1dc
 8011206:	f043 0304 	orr.w	r3, r3, #4
 801120a:	f884 31dc 	strb.w	r3, [r4, #476]	@ 0x1dc
 801120e:	b2db      	uxtb	r3, r3
 8011210:	f043 0302 	orr.w	r3, r3, #2
 8011214:	f884 31dc 	strb.w	r3, [r4, #476]	@ 0x1dc
 8011218:	b2db      	uxtb	r3, r3
 801121a:	f043 0301 	orr.w	r3, r3, #1
 801121e:	f884 31dc 	strb.w	r3, [r4, #476]	@ 0x1dc
    sys.cold_start = true;
 8011222:	4e88      	ldr	r6, [pc, #544]	@ (8011444 <grbl_enter+0x2c0>)
 8011224:	2301      	movs	r3, #1
 8011226:	f886 307d 	strb.w	r3, [r6, #125]	@ 0x7d
    limits_init();
 801122a:	f002 f875 	bl	8013318 <limits_init>
    nvs_buffer_alloc(); // Allocate memory block for NVS buffer
 801122e:	f004 fb4f 	bl	80158d0 <nvs_buffer_alloc>
    settings_clear();
 8011232:	f00c f9e7 	bl	801d604 <settings_clear>
    report_init_fns();
 8011236:	f00a fab1 	bl	801b79c <report_init_fns>
    driver.init = driver_init();
 801123a:	f7f9 fe5b 	bl	800aef4 <driver_init>
 801123e:	4d82      	ldr	r5, [pc, #520]	@ (8011448 <grbl_enter+0x2c4>)
 8011240:	782b      	ldrb	r3, [r5, #0]
 8011242:	f360 0300 	bfi	r3, r0, #0, #1
 8011246:	702b      	strb	r3, [r5, #0]
    nvs_buffer_init();
 8011248:	f004 fb56 	bl	80158f8 <nvs_buffer_init>
    settings_init(); // Load settings from non-volatile storage
 801124c:	f00c f9e4 	bl	801d618 <settings_init>
    memset(sys.position, 0, sizeof(sys.position)); // Clear machine position.
 8011250:	2300      	movs	r3, #0
 8011252:	f8c6 3088 	str.w	r3, [r6, #136]	@ 0x88
 8011256:	f8c6 308c 	str.w	r3, [r6, #140]	@ 0x8c
 801125a:	f8c6 3090 	str.w	r3, [r6, #144]	@ 0x90
    driver.amass = hal.driver_cap.amass_level >= MAX_AMASS_LEVEL;
 801125e:	f894 21d8 	ldrb.w	r2, [r4, #472]	@ 0x1d8
 8011262:	f002 0160 	and.w	r1, r2, #96	@ 0x60
 8011266:	2960      	cmp	r1, #96	@ 0x60
 8011268:	bf14      	ite	ne
 801126a:	2100      	movne	r1, #0
 801126c:	2101      	moveq	r1, #1
 801126e:	7828      	ldrb	r0, [r5, #0]
 8011270:	f361 00c3 	bfi	r0, r1, #3, #1
 8011274:	7028      	strb	r0, [r5, #0]
    hal.driver_cap.amass_level = MAX_AMASS_LEVEL;
 8011276:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 801127a:	f884 21d8 	strb.w	r2, [r4, #472]	@ 0x1d8
    driver.pulse_delay = hal.driver_cap.step_pulse_delay;
 801127e:	b2d2      	uxtb	r2, r2
 8011280:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8011284:	b2c1      	uxtb	r1, r0
 8011286:	f362 1104 	bfi	r1, r2, #4, #1
 801128a:	7029      	strb	r1, [r5, #0]
    sys.mpg_mode = false;
 801128c:	f886 307f 	strb.w	r3, [r6, #127]	@ 0x7f
    if(driver.ok == 0xFF)
 8011290:	b2cb      	uxtb	r3, r1
 8011292:	2bff      	cmp	r3, #255	@ 0xff
 8011294:	d054      	beq.n	8011340 <grbl_enter+0x1bc>
    if((driver.spindle = spindle_select(settings.spindle.flags.type))) {
 8011296:	4b6d      	ldr	r3, [pc, #436]	@ (801144c <grbl_enter+0x2c8>)
 8011298:	f893 00e7 	ldrb.w	r0, [r3, #231]	@ 0xe7
 801129c:	f3c0 0084 	ubfx	r0, r0, #2, #5
 80112a0:	f00c fdda 	bl	801de58 <spindle_select>
 80112a4:	4b68      	ldr	r3, [pc, #416]	@ (8011448 <grbl_enter+0x2c4>)
 80112a6:	781a      	ldrb	r2, [r3, #0]
 80112a8:	f360 0282 	bfi	r2, r0, #2, #1
 80112ac:	701a      	strb	r2, [r3, #0]
 80112ae:	2800      	cmp	r0, #0
 80112b0:	d052      	beq.n	8011358 <grbl_enter+0x1d4>
        spindle_ptrs_t *spindle = spindle_get(0);
 80112b2:	2000      	movs	r0, #0
 80112b4:	f00c fd96 	bl	801dde4 <spindle_get>
        driver.spindle = spindle->get_pwm == NULL || spindle->update_pwm != NULL;
 80112b8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d048      	beq.n	8011350 <grbl_enter+0x1cc>
 80112be:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d047      	beq.n	8011354 <grbl_enter+0x1d0>
 80112c4:	2101      	movs	r1, #1
 80112c6:	4b60      	ldr	r3, [pc, #384]	@ (8011448 <grbl_enter+0x2c4>)
 80112c8:	781a      	ldrb	r2, [r3, #0]
 80112ca:	f361 0282 	bfi	r2, r1, #2, #1
 80112ce:	701a      	strb	r2, [r3, #0]
    if(driver.ok != 0xFF) {
 80112d0:	4b5d      	ldr	r3, [pc, #372]	@ (8011448 <grbl_enter+0x2c4>)
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	2bff      	cmp	r3, #255	@ 0xff
 80112d6:	d149      	bne.n	801136c <grbl_enter+0x1e8>
    hal.stepper.enable(settings.steppers.deenergize);
 80112d8:	4c52      	ldr	r4, [pc, #328]	@ (8011424 <grbl_enter+0x2a0>)
 80112da:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 80112de:	4a5b      	ldr	r2, [pc, #364]	@ (801144c <grbl_enter+0x2c8>)
 80112e0:	f892 00ec 	ldrb.w	r0, [r2, #236]	@ 0xec
 80112e4:	4798      	blx	r3
    spindle_all_off();
 80112e6:	f00c ff89 	bl	801e1fc <spindle_all_off>
    hal.coolant.set_state((coolant_state_t){0});
 80112ea:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80112ec:	f04f 0000 	mov.w	r0, #0
 80112f0:	4798      	blx	r3
    if(hal.get_position)
 80112f2:	f8d4 31d0 	ldr.w	r3, [r4, #464]	@ 0x1d0
 80112f6:	b10b      	cbz	r3, 80112fc <grbl_enter+0x178>
        hal.get_position(&sys.position); // TODO: restore on abort when returns true?
 80112f8:	4855      	ldr	r0, [pc, #340]	@ (8011450 <grbl_enter+0x2cc>)
 80112fa:	4798      	blx	r3
    sys.driver_started = sys.alarm != Alarm_SelftestFailed;
 80112fc:	4a51      	ldr	r2, [pc, #324]	@ (8011444 <grbl_enter+0x2c0>)
 80112fe:	f892 307c 	ldrb.w	r3, [r2, #124]	@ 0x7c
 8011302:	3b10      	subs	r3, #16
 8011304:	bf18      	it	ne
 8011306:	2301      	movne	r3, #1
 8011308:	f882 307e 	strb.w	r3, [r2, #126]	@ 0x7e
    if(hal.homing.get_state == NULL || settings.homing.flags.use_limit_switches)
 801130c:	4b45      	ldr	r3, [pc, #276]	@ (8011424 <grbl_enter+0x2a0>)
 801130e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011310:	b123      	cbz	r3, 801131c <grbl_enter+0x198>
 8011312:	4b4e      	ldr	r3, [pc, #312]	@ (801144c <grbl_enter+0x2c8>)
 8011314:	f993 3114 	ldrsb.w	r3, [r3, #276]	@ 0x114
 8011318:	2b00      	cmp	r3, #0
 801131a:	da06      	bge.n	801132a <grbl_enter+0x1a6>
        hal.homing.get_state = hal.limits_cap.max.mask ? get_homing_status2 : get_homing_status;
 801131c:	4b41      	ldr	r3, [pc, #260]	@ (8011424 <grbl_enter+0x2a0>)
 801131e:	f893 31df 	ldrb.w	r3, [r3, #479]	@ 0x1df
 8011322:	b363      	cbz	r3, 801137e <grbl_enter+0x1fa>
 8011324:	4a4b      	ldr	r2, [pc, #300]	@ (8011454 <grbl_enter+0x2d0>)
 8011326:	4b3f      	ldr	r3, [pc, #252]	@ (8011424 <grbl_enter+0x2a0>)
 8011328:	661a      	str	r2, [r3, #96]	@ 0x60
    if(settings.report_interval)
 801132a:	4b48      	ldr	r3, [pc, #288]	@ (801144c <grbl_enter+0x2c8>)
 801132c:	8a9a      	ldrh	r2, [r3, #20]
 801132e:	bb42      	cbnz	r2, 8011382 <grbl_enter+0x1fe>
    if(hal.driver_cap.sd_card || hal.driver_cap.littlefs) {
 8011330:	4b3c      	ldr	r3, [pc, #240]	@ (8011424 <grbl_enter+0x2a0>)
 8011332:	f893 31d9 	ldrb.w	r3, [r3, #473]	@ 0x1d9
 8011336:	f013 0f06 	tst.w	r3, #6
 801133a:	d127      	bne.n	801138c <grbl_enter+0x208>
            looping = hal.driver_release == NULL || hal.driver_release();
 801133c:	2301      	movs	r3, #1
 801133e:	e096      	b.n	801146e <grbl_enter+0x2ea>
        driver.setup = hal.driver_setup(&settings);
 8011340:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011342:	4842      	ldr	r0, [pc, #264]	@ (801144c <grbl_enter+0x2c8>)
 8011344:	4798      	blx	r3
 8011346:	782a      	ldrb	r2, [r5, #0]
 8011348:	f360 0241 	bfi	r2, r0, #1, #1
 801134c:	702a      	strb	r2, [r5, #0]
 801134e:	e7a2      	b.n	8011296 <grbl_enter+0x112>
        driver.spindle = spindle->get_pwm == NULL || spindle->update_pwm != NULL;
 8011350:	2101      	movs	r1, #1
 8011352:	e7b8      	b.n	80112c6 <grbl_enter+0x142>
 8011354:	2100      	movs	r1, #0
 8011356:	e7b6      	b.n	80112c6 <grbl_enter+0x142>
        driver.spindle = spindle_select(spindle_add_null());
 8011358:	f00c fd5a 	bl	801de10 <spindle_add_null>
 801135c:	f00c fd7c 	bl	801de58 <spindle_select>
 8011360:	4b39      	ldr	r3, [pc, #228]	@ (8011448 <grbl_enter+0x2c4>)
 8011362:	781a      	ldrb	r2, [r3, #0]
 8011364:	f360 0282 	bfi	r2, r0, #2, #1
 8011368:	701a      	strb	r2, [r3, #0]
 801136a:	e7b1      	b.n	80112d0 <grbl_enter+0x14c>
        sys.alarm = Alarm_SelftestFailed;
 801136c:	4b35      	ldr	r3, [pc, #212]	@ (8011444 <grbl_enter+0x2c0>)
 801136e:	2210      	movs	r2, #16
 8011370:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        protocol_enqueue_foreground_task(report_driver_error, NULL);
 8011374:	2100      	movs	r1, #0
 8011376:	4838      	ldr	r0, [pc, #224]	@ (8011458 <grbl_enter+0x2d4>)
 8011378:	f006 f948 	bl	801760c <protocol_enqueue_foreground_task>
 801137c:	e7ac      	b.n	80112d8 <grbl_enter+0x154>
        hal.homing.get_state = hal.limits_cap.max.mask ? get_homing_status2 : get_homing_status;
 801137e:	4a37      	ldr	r2, [pc, #220]	@ (801145c <grbl_enter+0x2d8>)
 8011380:	e7d1      	b.n	8011326 <grbl_enter+0x1a2>
        task_add_delayed(auto_realtime_report, NULL, settings.report_interval);
 8011382:	2100      	movs	r1, #0
 8011384:	4836      	ldr	r0, [pc, #216]	@ (8011460 <grbl_enter+0x2dc>)
 8011386:	f7ff fec1 	bl	801110c <task_add_delayed>
 801138a:	e7d1      	b.n	8011330 <grbl_enter+0x1ac>
        fs_options_t fs_options = {0};
 801138c:	f04f 0100 	mov.w	r1, #0
        fs_options.lfs_hidden = hal.driver_cap.littlefs;
 8011390:	4b24      	ldr	r3, [pc, #144]	@ (8011424 <grbl_enter+0x2a0>)
 8011392:	f893 31d9 	ldrb.w	r3, [r3, #473]	@ 0x1d9
 8011396:	f3c3 0280 	ubfx	r2, r3, #2, #1
 801139a:	f362 0141 	bfi	r1, r2, #1, #1
        fs_options.sd_mount_on_boot = hal.driver_cap.sd_card;
 801139e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80113a2:	f363 0100 	bfi	r1, r3, #0, #1
        setting_remove_elements(Setting_FSOptions, fs_options.mask);
 80113a6:	b2c9      	uxtb	r1, r1
 80113a8:	f240 208a 	movw	r0, #650	@ 0x28a
 80113ac:	f00b ffcc 	bl	801d348 <setting_remove_elements>
 80113b0:	e7c4      	b.n	801133c <grbl_enter+0x1b8>
            memset(&sys, 0, offsetof(system_t, alarm)); // Clear system variables except state & alarm.
 80113b2:	227c      	movs	r2, #124	@ 0x7c
 80113b4:	2100      	movs	r1, #0
 80113b6:	4823      	ldr	r0, [pc, #140]	@ (8011444 <grbl_enter+0x2c0>)
 80113b8:	f013 f861 	bl	802447e <memset>
 80113bc:	e06a      	b.n	8011494 <grbl_enter+0x310>
                spindle_get(spindle_num)->param->override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE; // Set to 100%
 80113be:	2000      	movs	r0, #0
 80113c0:	f00c fd10 	bl	801dde4 <spindle_get>
 80113c4:	6843      	ldr	r3, [r0, #4]
 80113c6:	2264      	movs	r2, #100	@ 0x64
 80113c8:	60da      	str	r2, [r3, #12]
 80113ca:	e06f      	b.n	80114ac <grbl_enter+0x328>
            tc_init();
 80113cc:	f010 fe0e 	bl	8021fec <tc_init>
 80113d0:	e0b2      	b.n	8011538 <grbl_enter+0x3b4>
        if(!settings.flags.no_unlock_after_estop && state_get() == STATE_ESTOP)
 80113d2:	f00d f997 	bl	801e704 <state_get>
 80113d6:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80113da:	f040 80b6 	bne.w	801154a <grbl_enter+0x3c6>
            state_set(STATE_ALARM);
 80113de:	2001      	movs	r0, #1
 80113e0:	f00d f996 	bl	801e710 <state_set>
 80113e4:	e0b1      	b.n	801154a <grbl_enter+0x3c6>
            protocol_enqueue_realtime_command(sys.mpg_mode ? CMD_STATUS_REPORT_ALL : CMD_STATUS_REPORT);
 80113e6:	4b17      	ldr	r3, [pc, #92]	@ (8011444 <grbl_enter+0x2c0>)
 80113e8:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80113ec:	b11b      	cbz	r3, 80113f6 <grbl_enter+0x272>
 80113ee:	2087      	movs	r0, #135	@ 0x87
 80113f0:	f006 f932 	bl	8017658 <protocol_enqueue_realtime_command>
 80113f4:	e0af      	b.n	8011556 <grbl_enter+0x3d2>
 80113f6:	2080      	movs	r0, #128	@ 0x80
 80113f8:	e7fa      	b.n	80113f0 <grbl_enter+0x26c>
            looping = hal.driver_release == NULL || hal.driver_release();
 80113fa:	2301      	movs	r3, #1
 80113fc:	e033      	b.n	8011466 <grbl_enter+0x2e2>
 80113fe:	bf00      	nop
 8011400:	20001394 	.word	0x20001394
 8011404:	08010f71 	.word	0x08010f71
 8011408:	0801695d 	.word	0x0801695d
 801140c:	080202cd 	.word	0x080202cd
 8011410:	08010ef9 	.word	0x08010ef9
 8011414:	080212e9 	.word	0x080212e9
 8011418:	0800c6f5 	.word	0x0800c6f5
 801141c:	0800c8d1 	.word	0x0800c8d1
 8011420:	0801c7d9 	.word	0x0801c7d9
 8011424:	200011ac 	.word	0x200011ac
 8011428:	0801102d 	.word	0x0801102d
 801142c:	080156ab 	.word	0x080156ab
 8011430:	08010efb 	.word	0x08010efb
 8011434:	08012a59 	.word	0x08012a59
 8011438:	08020f15 	.word	0x08020f15
 801143c:	0801f1e1 	.word	0x0801f1e1
 8011440:	08020225 	.word	0x08020225
 8011444:	2000148c 	.word	0x2000148c
 8011448:	200001c0 	.word	0x200001c0
 801144c:	20001bc4 	.word	0x20001bc4
 8011450:	20001514 	.word	0x20001514
 8011454:	08011041 	.word	0x08011041
 8011458:	080110ad 	.word	0x080110ad
 801145c:	08010f01 	.word	0x08010f01
 8011460:	08011599 	.word	0x08011599
 8011464:	2301      	movs	r3, #1
        sys.cold_start = false;
 8011466:	4a46      	ldr	r2, [pc, #280]	@ (8011580 <grbl_enter+0x3fc>)
 8011468:	2100      	movs	r1, #0
 801146a:	f882 107d 	strb.w	r1, [r2, #125]	@ 0x7d
    while(looping) {
 801146e:	2b00      	cmp	r3, #0
 8011470:	f000 8082 	beq.w	8011578 <grbl_enter+0x3f4>
        report_init_fns();
 8011474:	f00a f992 	bl	801b79c <report_init_fns>
        if(!sys.position_lost || settings.homing.flags.keep_on_reset)
 8011478:	4b41      	ldr	r3, [pc, #260]	@ (8011580 <grbl_enter+0x3fc>)
 801147a:	78db      	ldrb	r3, [r3, #3]
 801147c:	b12b      	cbz	r3, 801148a <grbl_enter+0x306>
 801147e:	4b41      	ldr	r3, [pc, #260]	@ (8011584 <grbl_enter+0x400>)
 8011480:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8011484:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8011488:	d093      	beq.n	80113b2 <grbl_enter+0x22e>
            memset(&sys, 0, offsetof(system_t, homed)); // Clear system variables except alarm & homed status.
 801148a:	2254      	movs	r2, #84	@ 0x54
 801148c:	2100      	movs	r1, #0
 801148e:	483c      	ldr	r0, [pc, #240]	@ (8011580 <grbl_enter+0x3fc>)
 8011490:	f012 fff5 	bl	802447e <memset>
        sys.var5399 = -2;                                        // Clear last M66 result
 8011494:	4b3a      	ldr	r3, [pc, #232]	@ (8011580 <grbl_enter+0x3fc>)
 8011496:	f06f 0201 	mvn.w	r2, #1
 801149a:	651a      	str	r2, [r3, #80]	@ 0x50
        sys.override.feed_rate = DEFAULT_FEED_OVERRIDE;          // Set to 100%
 801149c:	2264      	movs	r2, #100	@ 0x64
 801149e:	61da      	str	r2, [r3, #28]
        sys.override.rapid_rate = DEFAULT_RAPID_OVERRIDE;        // Set to 100%
 80114a0:	621a      	str	r2, [r3, #32]
            if(spindle_is_enabled(--spindle_num))
 80114a2:	2000      	movs	r0, #0
 80114a4:	f00c fc88 	bl	801ddb8 <spindle_is_enabled>
 80114a8:	2800      	cmp	r0, #0
 80114aa:	d188      	bne.n	80113be <grbl_enter+0x23a>
        sys.flags.auto_reporting = settings.report_interval != 0;
 80114ac:	4a35      	ldr	r2, [pc, #212]	@ (8011584 <grbl_enter+0x400>)
 80114ae:	8a93      	ldrh	r3, [r2, #20]
 80114b0:	3b00      	subs	r3, #0
 80114b2:	bf18      	it	ne
 80114b4:	2301      	movne	r3, #1
 80114b6:	4932      	ldr	r1, [pc, #200]	@ (8011580 <grbl_enter+0x3fc>)
 80114b8:	7dc8      	ldrb	r0, [r1, #23]
 80114ba:	f363 0041 	bfi	r0, r3, #1, #1
 80114be:	75c8      	strb	r0, [r1, #23]
        if(settings.parking.flags.enabled)
 80114c0:	f892 3128 	ldrb.w	r3, [r2, #296]	@ 0x128
 80114c4:	f013 0f01 	tst.w	r3, #1
 80114c8:	d00a      	beq.n	80114e0 <grbl_enter+0x35c>
            sys.override.control.parking_disable = settings.parking.flags.deactivate_upon_init;
 80114ca:	f892 3128 	ldrb.w	r3, [r2, #296]	@ 0x128
 80114ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80114d2:	460a      	mov	r2, r1
 80114d4:	f891 1029 	ldrb.w	r1, [r1, #41]	@ 0x29
 80114d8:	f363 01c3 	bfi	r1, r3, #3, #1
 80114dc:	f882 1029 	strb.w	r1, [r2, #41]	@ 0x29
        flush_override_buffers();
 80114e0:	f004 fc0a 	bl	8015cf8 <flush_override_buffers>
        hal.stream.reset_read_buffer(); // Clear input stream buffer
 80114e4:	4c28      	ldr	r4, [pc, #160]	@ (8011588 <grbl_enter+0x404>)
 80114e6:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 80114ea:	4798      	blx	r3
        gc_init();                      // Set g-code parser to default state
 80114ec:	f7fb fbc6 	bl	800cc7c <gc_init>
        hal.limits.enable(settings.limits.flags.hard_enabled, (axes_signals_t){0});
 80114f0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80114f2:	4a24      	ldr	r2, [pc, #144]	@ (8011584 <grbl_enter+0x400>)
 80114f4:	f892 0124 	ldrb.w	r0, [r2, #292]	@ 0x124
 80114f8:	f04f 0100 	mov.w	r1, #0
 80114fc:	f000 0001 	and.w	r0, r0, #1
 8011500:	4798      	blx	r3
        plan_reset();                   // Clear block buffer and planner variables
 8011502:	f004 fd27 	bl	8015f54 <plan_reset>
        st_reset();                     // Clear stepper subsystem variables.
 8011506:	f00d ffe1 	bl	801f4cc <st_reset>
        limits_set_homing_axes();       // Set axes to be homed from settings.
 801150a:	f001 fec7 	bl	801329c <limits_set_homing_axes>
        system_init_switches();         // Set switches from inputs.
 801150e:	f00f fce5 	bl	8020edc <system_init_switches>
        sync_position();
 8011512:	f005 f84d 	bl	80165b0 <plan_sync_position>
 8011516:	491d      	ldr	r1, [pc, #116]	@ (801158c <grbl_enter+0x408>)
 8011518:	481d      	ldr	r0, [pc, #116]	@ (8011590 <grbl_enter+0x40c>)
 801151a:	f010 f80d 	bl	8021538 <system_convert_array_steps_to_mpos>
        if(hal.stepper.disable_motors)
 801151e:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8011522:	b113      	cbz	r3, 801152a <grbl_enter+0x3a6>
            hal.stepper.disable_motors((axes_signals_t){0}, SquaringMode_Both);
 8011524:	2100      	movs	r1, #0
 8011526:	4608      	mov	r0, r1
 8011528:	4798      	blx	r3
        if(!hal.driver_cap.atc)
 801152a:	4b17      	ldr	r3, [pc, #92]	@ (8011588 <grbl_enter+0x404>)
 801152c:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 8011530:	f013 0f02 	tst.w	r3, #2
 8011534:	f43f af4a 	beq.w	80113cc <grbl_enter+0x248>
        grbl.report.init_message();
 8011538:	4b16      	ldr	r3, [pc, #88]	@ (8011594 <grbl_enter+0x410>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	4798      	blx	r3
        if(!settings.flags.no_unlock_after_estop && state_get() == STATE_ESTOP)
 801153e:	4b11      	ldr	r3, [pc, #68]	@ (8011584 <grbl_enter+0x400>)
 8011540:	f993 30ff 	ldrsb.w	r3, [r3, #255]	@ 0xff
 8011544:	2b00      	cmp	r3, #0
 8011546:	f6bf af44 	bge.w	80113d2 <grbl_enter+0x24e>
        if(hal.driver_cap.mpg_mode)
 801154a:	4b0f      	ldr	r3, [pc, #60]	@ (8011588 <grbl_enter+0x404>)
 801154c:	f993 31d9 	ldrsb.w	r3, [r3, #473]	@ 0x1d9
 8011550:	2b00      	cmp	r3, #0
 8011552:	f6ff af48 	blt.w	80113e6 <grbl_enter+0x262>
        if(!(looping = protocol_main_loop()))
 8011556:	f005 fd9d 	bl	8017094 <protocol_main_loop>
 801155a:	4603      	mov	r3, r0
 801155c:	2800      	cmp	r0, #0
 801155e:	d182      	bne.n	8011466 <grbl_enter+0x2e2>
            looping = hal.driver_release == NULL || hal.driver_release();
 8011560:	4b09      	ldr	r3, [pc, #36]	@ (8011588 <grbl_enter+0x404>)
 8011562:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8011566:	2b00      	cmp	r3, #0
 8011568:	f43f af47 	beq.w	80113fa <grbl_enter+0x276>
 801156c:	4798      	blx	r3
 801156e:	2800      	cmp	r0, #0
 8011570:	f47f af78 	bne.w	8011464 <grbl_enter+0x2e0>
 8011574:	2300      	movs	r3, #0
 8011576:	e776      	b.n	8011466 <grbl_enter+0x2e2>
    nvs_buffer_free();
 8011578:	f004 fb3a 	bl	8015bf0 <nvs_buffer_free>
}
 801157c:	2000      	movs	r0, #0
 801157e:	bd70      	pop	{r4, r5, r6, pc}
 8011580:	2000148c 	.word	0x2000148c
 8011584:	20001bc4 	.word	0x20001bc4
 8011588:	200011ac 	.word	0x200011ac
 801158c:	20001514 	.word	0x20001514
 8011590:	20000f4c 	.word	0x20000f4c
 8011594:	20001394 	.word	0x20001394

08011598 <auto_realtime_report>:
{
 8011598:	b508      	push	{r3, lr}
    if(sys.flags.auto_reporting) {
 801159a:	4b0d      	ldr	r3, [pc, #52]	@ (80115d0 <auto_realtime_report+0x38>)
 801159c:	7ddb      	ldrb	r3, [r3, #23]
 801159e:	f013 0f02 	tst.w	r3, #2
 80115a2:	d00b      	beq.n	80115bc <auto_realtime_report+0x24>
        system_set_exec_state_flag(EXEC_STATUS_REPORT);
 80115a4:	4b0b      	ldr	r3, [pc, #44]	@ (80115d4 <auto_realtime_report+0x3c>)
 80115a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80115a8:	2101      	movs	r1, #1
 80115aa:	480b      	ldr	r0, [pc, #44]	@ (80115d8 <auto_realtime_report+0x40>)
 80115ac:	4798      	blx	r3
        task_add_delayed(auto_realtime_report, NULL, settings.report_interval);
 80115ae:	4b0b      	ldr	r3, [pc, #44]	@ (80115dc <auto_realtime_report+0x44>)
 80115b0:	8a9a      	ldrh	r2, [r3, #20]
 80115b2:	2100      	movs	r1, #0
 80115b4:	480a      	ldr	r0, [pc, #40]	@ (80115e0 <auto_realtime_report+0x48>)
 80115b6:	f7ff fda9 	bl	801110c <task_add_delayed>
}
 80115ba:	bd08      	pop	{r3, pc}
    } else if(settings.report_interval)
 80115bc:	4b07      	ldr	r3, [pc, #28]	@ (80115dc <auto_realtime_report+0x44>)
 80115be:	8a9a      	ldrh	r2, [r3, #20]
 80115c0:	2a00      	cmp	r2, #0
 80115c2:	d0fa      	beq.n	80115ba <auto_realtime_report+0x22>
        task_add_delayed(realtime_report_check, NULL, settings.report_interval);
 80115c4:	2100      	movs	r1, #0
 80115c6:	4807      	ldr	r0, [pc, #28]	@ (80115e4 <auto_realtime_report+0x4c>)
 80115c8:	f7ff fda0 	bl	801110c <task_add_delayed>
}
 80115cc:	e7f5      	b.n	80115ba <auto_realtime_report+0x22>
 80115ce:	bf00      	nop
 80115d0:	2000148c 	.word	0x2000148c
 80115d4:	200011ac 	.word	0x200011ac
 80115d8:	200014d4 	.word	0x200014d4
 80115dc:	20001bc4 	.word	0x20001bc4
 80115e0:	08011599 	.word	0x08011599
 80115e4:	080115e9 	.word	0x080115e9

080115e8 <realtime_report_check>:
{
 80115e8:	b508      	push	{r3, lr}
    task_add_delayed(sys.flags.auto_reporting ? auto_realtime_report : realtime_report_check, NULL, settings.report_interval);
 80115ea:	4b07      	ldr	r3, [pc, #28]	@ (8011608 <realtime_report_check+0x20>)
 80115ec:	7ddb      	ldrb	r3, [r3, #23]
 80115ee:	f013 0f02 	tst.w	r3, #2
 80115f2:	d006      	beq.n	8011602 <realtime_report_check+0x1a>
 80115f4:	4805      	ldr	r0, [pc, #20]	@ (801160c <realtime_report_check+0x24>)
 80115f6:	4b06      	ldr	r3, [pc, #24]	@ (8011610 <realtime_report_check+0x28>)
 80115f8:	8a9a      	ldrh	r2, [r3, #20]
 80115fa:	2100      	movs	r1, #0
 80115fc:	f7ff fd86 	bl	801110c <task_add_delayed>
}
 8011600:	bd08      	pop	{r3, pc}
    task_add_delayed(sys.flags.auto_reporting ? auto_realtime_report : realtime_report_check, NULL, settings.report_interval);
 8011602:	4804      	ldr	r0, [pc, #16]	@ (8011614 <realtime_report_check+0x2c>)
 8011604:	e7f7      	b.n	80115f6 <realtime_report_check+0xe>
 8011606:	bf00      	nop
 8011608:	2000148c 	.word	0x2000148c
 801160c:	08011599 	.word	0x08011599
 8011610:	20001bc4 	.word	0x20001bc4
 8011614:	080115e9 	.word	0x080115e9

08011618 <task_delete>:

void task_delete (foreground_task_ptr fn, void *data)
{
    core_task_t *task, *prev = NULL;

    if((task = next_task)) do {
 8011618:	4b12      	ldr	r3, [pc, #72]	@ (8011664 <task_delete+0x4c>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	b303      	cbz	r3, 8011660 <task_delete+0x48>
{
 801161e:	b410      	push	{r4}
    core_task_t *task, *prev = NULL;
 8011620:	2400      	movs	r4, #0
 8011622:	e00a      	b.n	801163a <task_delete+0x22>
        if(fn == task->fn && data == task->data) {
            if(prev)
                prev->next = task->next;
            else
                next_task = task->next;
 8011624:	68d9      	ldr	r1, [r3, #12]
 8011626:	4a0f      	ldr	r2, [pc, #60]	@ (8011664 <task_delete+0x4c>)
 8011628:	6011      	str	r1, [r2, #0]
 801162a:	e010      	b.n	801164e <task_delete+0x36>
        last_freed = task;
 801162c:	4a0e      	ldr	r2, [pc, #56]	@ (8011668 <task_delete+0x50>)
 801162e:	6013      	str	r3, [r2, #0]
 8011630:	e013      	b.n	801165a <task_delete+0x42>
            task_free(task);
            break;
        }
        prev = task;
    } while((task = task->next));
 8011632:	68da      	ldr	r2, [r3, #12]
        prev = task;
 8011634:	461c      	mov	r4, r3
    } while((task = task->next));
 8011636:	b182      	cbz	r2, 801165a <task_delete+0x42>
 8011638:	4613      	mov	r3, r2
        if(fn == task->fn && data == task->data) {
 801163a:	685a      	ldr	r2, [r3, #4]
 801163c:	4282      	cmp	r2, r0
 801163e:	d1f8      	bne.n	8011632 <task_delete+0x1a>
 8011640:	689a      	ldr	r2, [r3, #8]
 8011642:	428a      	cmp	r2, r1
 8011644:	d1f5      	bne.n	8011632 <task_delete+0x1a>
            if(prev)
 8011646:	2c00      	cmp	r4, #0
 8011648:	d0ec      	beq.n	8011624 <task_delete+0xc>
                prev->next = task->next;
 801164a:	68da      	ldr	r2, [r3, #12]
 801164c:	60e2      	str	r2, [r4, #12]
    task->fn = NULL;
 801164e:	2200      	movs	r2, #0
 8011650:	605a      	str	r2, [r3, #4]
    if(last_freed == NULL)
 8011652:	4a05      	ldr	r2, [pc, #20]	@ (8011668 <task_delete+0x50>)
 8011654:	6812      	ldr	r2, [r2, #0]
 8011656:	2a00      	cmp	r2, #0
 8011658:	d0e8      	beq.n	801162c <task_delete+0x14>
}
 801165a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801165e:	4770      	bx	lr
 8011660:	4770      	bx	lr
 8011662:	bf00      	nop
 8011664:	20000fc8 	.word	0x20000fc8
 8011668:	20000fbc 	.word	0x20000fbc

0801166c <ioports_count>:
static setting_changed_ptr on_setting_changed = NULL;
static io_ports_cfg_t analog, digital;
static int16_t digital_in = -1, digital_out = -1, analog_in = -1, analog_out = -1;

static uint8_t ioports_count (io_port_type_t type, io_port_direction_t dir)
{
 801166c:	b570      	push	{r4, r5, r6, lr}
 801166e:	4606      	mov	r6, r0
 8011670:	460d      	mov	r5, r1
    xbar_t *port;
    uint8_t n_ports = 0;
 8011672:	2400      	movs	r4, #0
 8011674:	e000      	b.n	8011678 <ioports_count+0xc>

    // determine how many ports, including claimed ports, that are available
    do {
        if((port = hal.port.get_pin_info(type, dir, n_ports)))
            n_ports++;
    } while(port != NULL);
 8011676:	b163      	cbz	r3, 8011692 <ioports_count+0x26>
        if((port = hal.port.get_pin_info(type, dir, n_ports)))
 8011678:	4b07      	ldr	r3, [pc, #28]	@ (8011698 <ioports_count+0x2c>)
 801167a:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801167e:	4622      	mov	r2, r4
 8011680:	4629      	mov	r1, r5
 8011682:	4630      	mov	r0, r6
 8011684:	4798      	blx	r3
 8011686:	4603      	mov	r3, r0
 8011688:	2800      	cmp	r0, #0
 801168a:	d0f4      	beq.n	8011676 <ioports_count+0xa>
            n_ports++;
 801168c:	3401      	adds	r4, #1
 801168e:	b2e4      	uxtb	r4, r4
 8011690:	e7f1      	b.n	8011676 <ioports_count+0xa>

    return n_ports;
}
 8011692:	4620      	mov	r0, r4
 8011694:	bd70      	pop	{r4, r5, r6, pc}
 8011696:	bf00      	nop
 8011698:	200011ac 	.word	0x200011ac

0801169c <get_pnum>:

/* experimental code follows */

static char *get_pnum (io_ports_data_t *ports, uint8_t port)
{
    return ports->pnum ? (ports->pnum + (port * 3) + (port > 9 ? port - 10 : 0)) : NULL;
 801169c:	6800      	ldr	r0, [r0, #0]
 801169e:	b140      	cbz	r0, 80116b2 <get_pnum+0x16>
 80116a0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80116a4:	2909      	cmp	r1, #9
 80116a6:	d901      	bls.n	80116ac <get_pnum+0x10>
 80116a8:	390a      	subs	r1, #10
 80116aa:	e000      	b.n	80116ae <get_pnum+0x12>
 80116ac:	2100      	movs	r1, #0
 80116ae:	440b      	add	r3, r1
 80116b0:	4418      	add	r0, r3
}
 80116b2:	4770      	bx	lr

080116b4 <is_setting_available>:

static bool is_setting_available (const setting_detail_t *setting)
{
    bool available = false;

    switch(setting->id) {
 80116b4:	8803      	ldrh	r3, [r0, #0]
 80116b6:	f5b3 7fba 	cmp.w	r3, #372	@ 0x174
 80116ba:	d30d      	bcc.n	80116d8 <is_setting_available+0x24>
 80116bc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80116c0:	b29b      	uxth	r3, r3
 80116c2:	2b01      	cmp	r3, #1
 80116c4:	d81e      	bhi.n	8011704 <is_setting_available+0x50>
            available = digital.in.ports && digital.inx.mask;
            break;

        case Settings_IoPort_InvertOut:
        case Settings_IoPort_OD_Enable:
            available = digital.out.ports && digital.outx.mask;
 80116c6:	4b10      	ldr	r3, [pc, #64]	@ (8011708 <is_setting_available+0x54>)
 80116c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116ca:	b1bb      	cbz	r3, 80116fc <is_setting_available+0x48>
 80116cc:	4b0e      	ldr	r3, [pc, #56]	@ (8011708 <is_setting_available+0x54>)
 80116ce:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80116d2:	b9ab      	cbnz	r3, 8011700 <is_setting_available+0x4c>
 80116d4:	2000      	movs	r0, #0
 80116d6:	4770      	bx	lr
    switch(setting->id) {
 80116d8:	f5b3 7fb9 	cmp.w	r3, #370	@ 0x172
 80116dc:	d201      	bcs.n	80116e2 <is_setting_available+0x2e>
 80116de:	2000      	movs	r0, #0
 80116e0:	4770      	bx	lr
            available = digital.in.ports && digital.inx.mask;
 80116e2:	4b09      	ldr	r3, [pc, #36]	@ (8011708 <is_setting_available+0x54>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	b12b      	cbz	r3, 80116f4 <is_setting_available+0x40>
 80116e8:	4b07      	ldr	r3, [pc, #28]	@ (8011708 <is_setting_available+0x54>)
 80116ea:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80116ee:	b91b      	cbnz	r3, 80116f8 <is_setting_available+0x44>
 80116f0:	2000      	movs	r0, #0
 80116f2:	4770      	bx	lr
 80116f4:	2000      	movs	r0, #0
 80116f6:	4770      	bx	lr
 80116f8:	2001      	movs	r0, #1
            break;
 80116fa:	4770      	bx	lr
            available = digital.out.ports && digital.outx.mask;
 80116fc:	2000      	movs	r0, #0
 80116fe:	4770      	bx	lr
 8011700:	2001      	movs	r0, #1
            break;
 8011702:	4770      	bx	lr
    switch(setting->id) {
 8011704:	2000      	movs	r0, #0
        default:
            break;
    }

    return available;
}
 8011706:	4770      	bx	lr
 8011708:	20001524 	.word	0x20001524

0801170c <aux_get_value>:

static uint32_t aux_get_value (setting_id_t id)
{
    uint32_t value = 0;

    switch(id) {
 801170c:	f5a0 70b9 	sub.w	r0, r0, #370	@ 0x172
 8011710:	2803      	cmp	r0, #3
 8011712:	d813      	bhi.n	801173c <aux_get_value+0x30>
 8011714:	e8df f000 	tbb	[pc, r0]
 8011718:	0e0a0602 	.word	0x0e0a0602

        case Settings_IoPort_InvertIn:
            value = settings.ioport.invert_in.mask;
 801171c:	4b08      	ldr	r3, [pc, #32]	@ (8011740 <aux_get_value+0x34>)
 801171e:	f893 0168 	ldrb.w	r0, [r3, #360]	@ 0x168
            break;
 8011722:	4770      	bx	lr

        case Settings_IoPort_Pullup_Disable:
            value = settings.ioport.pullup_disable_in.mask;
 8011724:	4b06      	ldr	r3, [pc, #24]	@ (8011740 <aux_get_value+0x34>)
 8011726:	f893 0169 	ldrb.w	r0, [r3, #361]	@ 0x169
            break;
 801172a:	4770      	bx	lr

        case Settings_IoPort_InvertOut:
            value = settings.ioport.invert_out.mask;
 801172c:	4b04      	ldr	r3, [pc, #16]	@ (8011740 <aux_get_value+0x34>)
 801172e:	f893 016a 	ldrb.w	r0, [r3, #362]	@ 0x16a
            break;
 8011732:	4770      	bx	lr

        case Settings_IoPort_OD_Enable:
            value = settings.ioport.od_enable_out.mask;
 8011734:	4b02      	ldr	r3, [pc, #8]	@ (8011740 <aux_get_value+0x34>)
 8011736:	f893 016b 	ldrb.w	r0, [r3, #363]	@ 0x16b
            break;
 801173a:	4770      	bx	lr
    switch(id) {
 801173c:	2000      	movs	r0, #0
        default:
            break;
    }

    return value;
}
 801173e:	4770      	bx	lr
 8011740:	20001bc4 	.word	0x20001bc4

08011744 <ioports_available>:
{
 8011744:	b508      	push	{r3, lr}
    if(hal.port.get_pin_info) {
 8011746:	4b28      	ldr	r3, [pc, #160]	@ (80117e8 <ioports_available+0xa4>)
 8011748:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801174c:	2b00      	cmp	r3, #0
 801174e:	d037      	beq.n	80117c0 <ioports_available+0x7c>
        if(type == Port_Digital) {
 8011750:	2801      	cmp	r0, #1
 8011752:	d008      	beq.n	8011766 <ioports_available+0x22>
            if(dir == Port_Input)
 8011754:	bb39      	cbnz	r1, 80117a6 <ioports_available+0x62>
                ports = analog_in == -1 ? (analog_in = ioports_count(type, dir)) : (uint8_t)analog_in;
 8011756:	4b25      	ldr	r3, [pc, #148]	@ (80117ec <ioports_available+0xa8>)
 8011758:	f9b3 3000 	ldrsh.w	r3, [r3]
 801175c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011760:	d01c      	beq.n	801179c <ioports_available+0x58>
 8011762:	b2d8      	uxtb	r0, r3
}
 8011764:	bd08      	pop	{r3, pc}
            if(dir == Port_Input)
 8011766:	b961      	cbnz	r1, 8011782 <ioports_available+0x3e>
                ports = digital_in == -1 ? (digital_in = ioports_count(type, dir)) : (uint8_t)digital_in;
 8011768:	4b21      	ldr	r3, [pc, #132]	@ (80117f0 <ioports_available+0xac>)
 801176a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801176e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011772:	d001      	beq.n	8011778 <ioports_available+0x34>
 8011774:	b2d8      	uxtb	r0, r3
 8011776:	e7f5      	b.n	8011764 <ioports_available+0x20>
 8011778:	f7ff ff78 	bl	801166c <ioports_count>
 801177c:	4b1c      	ldr	r3, [pc, #112]	@ (80117f0 <ioports_available+0xac>)
 801177e:	8018      	strh	r0, [r3, #0]
 8011780:	e7f0      	b.n	8011764 <ioports_available+0x20>
                ports = digital_out == -1 ? (digital_out = ioports_count(type, dir)) : (uint8_t)digital_out;
 8011782:	4b1c      	ldr	r3, [pc, #112]	@ (80117f4 <ioports_available+0xb0>)
 8011784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011788:	f1b3 3fff 	cmp.w	r3, #4294967295
 801178c:	d001      	beq.n	8011792 <ioports_available+0x4e>
 801178e:	b2d8      	uxtb	r0, r3
 8011790:	e7e8      	b.n	8011764 <ioports_available+0x20>
 8011792:	f7ff ff6b 	bl	801166c <ioports_count>
 8011796:	4b17      	ldr	r3, [pc, #92]	@ (80117f4 <ioports_available+0xb0>)
 8011798:	8018      	strh	r0, [r3, #0]
 801179a:	e7e3      	b.n	8011764 <ioports_available+0x20>
                ports = analog_in == -1 ? (analog_in = ioports_count(type, dir)) : (uint8_t)analog_in;
 801179c:	f7ff ff66 	bl	801166c <ioports_count>
 80117a0:	4b12      	ldr	r3, [pc, #72]	@ (80117ec <ioports_available+0xa8>)
 80117a2:	8018      	strh	r0, [r3, #0]
 80117a4:	e7de      	b.n	8011764 <ioports_available+0x20>
                ports = analog_out == -1 ? (analog_out = ioports_count(type, dir)) : (uint8_t)analog_out;
 80117a6:	4b14      	ldr	r3, [pc, #80]	@ (80117f8 <ioports_available+0xb4>)
 80117a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80117ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117b0:	d001      	beq.n	80117b6 <ioports_available+0x72>
 80117b2:	b2d8      	uxtb	r0, r3
 80117b4:	e7d6      	b.n	8011764 <ioports_available+0x20>
 80117b6:	f7ff ff59 	bl	801166c <ioports_count>
 80117ba:	4b0f      	ldr	r3, [pc, #60]	@ (80117f8 <ioports_available+0xb4>)
 80117bc:	8018      	strh	r0, [r3, #0]
 80117be:	e7d1      	b.n	8011764 <ioports_available+0x20>
        if(type == Port_Digital)
 80117c0:	2801      	cmp	r0, #1
 80117c2:	d004      	beq.n	80117ce <ioports_available+0x8a>
            ports = dir == Port_Input ? hal.port.num_analog_in : hal.port.num_analog_out;
 80117c4:	b961      	cbnz	r1, 80117e0 <ioports_available+0x9c>
 80117c6:	4b08      	ldr	r3, [pc, #32]	@ (80117e8 <ioports_available+0xa4>)
 80117c8:	f893 0116 	ldrb.w	r0, [r3, #278]	@ 0x116
 80117cc:	e7ca      	b.n	8011764 <ioports_available+0x20>
            ports = dir == Port_Input ? hal.port.num_digital_in : hal.port.num_digital_out;
 80117ce:	b919      	cbnz	r1, 80117d8 <ioports_available+0x94>
 80117d0:	4b05      	ldr	r3, [pc, #20]	@ (80117e8 <ioports_available+0xa4>)
 80117d2:	f893 0114 	ldrb.w	r0, [r3, #276]	@ 0x114
 80117d6:	e7c5      	b.n	8011764 <ioports_available+0x20>
 80117d8:	4b03      	ldr	r3, [pc, #12]	@ (80117e8 <ioports_available+0xa4>)
 80117da:	f893 0115 	ldrb.w	r0, [r3, #277]	@ 0x115
 80117de:	e7c1      	b.n	8011764 <ioports_available+0x20>
            ports = dir == Port_Input ? hal.port.num_analog_in : hal.port.num_analog_out;
 80117e0:	4b01      	ldr	r3, [pc, #4]	@ (80117e8 <ioports_available+0xa4>)
 80117e2:	f893 0117 	ldrb.w	r0, [r3, #279]	@ 0x117
 80117e6:	e7bd      	b.n	8011764 <ioports_available+0x20>
 80117e8:	200011ac 	.word	0x200011ac
 80117ec:	200001f6 	.word	0x200001f6
 80117f0:	200001fa 	.word	0x200001fa
 80117f4:	200001f8 	.word	0x200001f8
 80117f8:	200001f4 	.word	0x200001f4

080117fc <ioports_add>:
{
 80117fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011800:	4605      	mov	r5, r0
 8011802:	4689      	mov	r9, r1
 8011804:	461c      	mov	r4, r3
    ports->get_pnum = get_pnum;
 8011806:	4b81      	ldr	r3, [pc, #516]	@ (8011a0c <ioports_add+0x210>)
 8011808:	6143      	str	r3, [r0, #20]
    if(type == Port_Digital) {
 801180a:	2901      	cmp	r1, #1
 801180c:	d017      	beq.n	801183e <ioports_add+0x42>
        analog_in = analog_out = -1;
 801180e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011812:	497f      	ldr	r1, [pc, #508]	@ (8011a10 <ioports_add+0x214>)
 8011814:	800b      	strh	r3, [r1, #0]
 8011816:	497f      	ldr	r1, [pc, #508]	@ (8011a14 <ioports_add+0x218>)
 8011818:	800b      	strh	r3, [r1, #0]
        if(n_in) {
 801181a:	2a00      	cmp	r2, #0
 801181c:	d140      	bne.n	80118a0 <ioports_add+0xa4>
        if(n_out) {
 801181e:	2c00      	cmp	r4, #0
 8011820:	d150      	bne.n	80118c4 <ioports_add+0xc8>
        cfg = &analog;
 8011822:	f8df a204 	ldr.w	sl, [pc, #516]	@ 8011a28 <ioports_add+0x22c>
    if((n_ports = max(ports->in.n_ports, ports->out.n_ports)) > 0)  {
 8011826:	7b2f      	ldrb	r7, [r5, #12]
 8011828:	792b      	ldrb	r3, [r5, #4]
 801182a:	429f      	cmp	r7, r3
 801182c:	bf38      	it	cc
 801182e:	461f      	movcc	r7, r3
 8011830:	2f00      	cmp	r7, #0
 8011832:	d15b      	bne.n	80118ec <ioports_add+0xf0>
}
 8011834:	1e38      	subs	r0, r7, #0
 8011836:	bf18      	it	ne
 8011838:	2001      	movne	r0, #1
 801183a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        digital_in = digital_out = -1;
 801183e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011842:	4975      	ldr	r1, [pc, #468]	@ (8011a18 <ioports_add+0x21c>)
 8011844:	800b      	strh	r3, [r1, #0]
 8011846:	4975      	ldr	r1, [pc, #468]	@ (8011a1c <ioports_add+0x220>)
 8011848:	800b      	strh	r3, [r1, #0]
        if(n_in) {
 801184a:	b91a      	cbnz	r2, 8011854 <ioports_add+0x58>
        if(n_out) {
 801184c:	b9a4      	cbnz	r4, 8011878 <ioports_add+0x7c>
        cfg = &digital;
 801184e:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 8011a24 <ioports_add+0x228>
 8011852:	e7e8      	b.n	8011826 <ioports_add+0x2a>
            ports->in.n_start = hal.port.num_digital_in;
 8011854:	4b72      	ldr	r3, [pc, #456]	@ (8011a20 <ioports_add+0x224>)
 8011856:	f893 1114 	ldrb.w	r1, [r3, #276]	@ 0x114
 801185a:	7141      	strb	r1, [r0, #5]
            hal.port.num_digital_in += (ports->in.n_ports = n_in);
 801185c:	7102      	strb	r2, [r0, #4]
 801185e:	f893 1114 	ldrb.w	r1, [r3, #276]	@ 0x114
 8011862:	440a      	add	r2, r1
 8011864:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            ports->in.map = malloc(ports->in.n_ports * sizeof(ports->in.n_ports));
 8011868:	7900      	ldrb	r0, [r0, #4]
 801186a:	f010 fd3f 	bl	80222ec <malloc>
 801186e:	60a8      	str	r0, [r5, #8]
            digital.in.ports = &ports->in;
 8011870:	1d2b      	adds	r3, r5, #4
 8011872:	4a6c      	ldr	r2, [pc, #432]	@ (8011a24 <ioports_add+0x228>)
 8011874:	6013      	str	r3, [r2, #0]
 8011876:	e7e9      	b.n	801184c <ioports_add+0x50>
            ports->out.n_start = hal.port.num_digital_out;
 8011878:	4b69      	ldr	r3, [pc, #420]	@ (8011a20 <ioports_add+0x224>)
 801187a:	f893 2115 	ldrb.w	r2, [r3, #277]	@ 0x115
 801187e:	736a      	strb	r2, [r5, #13]
            hal.port.num_digital_out += (ports->out.n_ports = n_out);
 8011880:	732c      	strb	r4, [r5, #12]
 8011882:	f893 2115 	ldrb.w	r2, [r3, #277]	@ 0x115
 8011886:	4422      	add	r2, r4
 8011888:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
            ports->out.map = malloc(ports->out.n_ports * sizeof(ports->out.n_ports));
 801188c:	7b28      	ldrb	r0, [r5, #12]
 801188e:	f010 fd2d 	bl	80222ec <malloc>
 8011892:	6128      	str	r0, [r5, #16]
            digital.out.ports = &ports->out;
 8011894:	f105 030c 	add.w	r3, r5, #12
 8011898:	4a62      	ldr	r2, [pc, #392]	@ (8011a24 <ioports_add+0x228>)
 801189a:	6393      	str	r3, [r2, #56]	@ 0x38
        cfg = &digital;
 801189c:	4692      	mov	sl, r2
 801189e:	e7c2      	b.n	8011826 <ioports_add+0x2a>
            ports->in.n_start = hal.port.num_analog_in;
 80118a0:	4b5f      	ldr	r3, [pc, #380]	@ (8011a20 <ioports_add+0x224>)
 80118a2:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
 80118a6:	7141      	strb	r1, [r0, #5]
            hal.port.num_analog_in += (ports->in.n_ports = n_in);
 80118a8:	7102      	strb	r2, [r0, #4]
 80118aa:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
 80118ae:	440a      	add	r2, r1
 80118b0:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
            ports->in.map = malloc(ports->in.n_ports * sizeof(ports->in.n_ports));
 80118b4:	7900      	ldrb	r0, [r0, #4]
 80118b6:	f010 fd19 	bl	80222ec <malloc>
 80118ba:	60a8      	str	r0, [r5, #8]
            analog.in.ports = &ports->in;
 80118bc:	1d2b      	adds	r3, r5, #4
 80118be:	4a5a      	ldr	r2, [pc, #360]	@ (8011a28 <ioports_add+0x22c>)
 80118c0:	6013      	str	r3, [r2, #0]
 80118c2:	e7ac      	b.n	801181e <ioports_add+0x22>
            ports->out.n_start = hal.port.num_analog_out;
 80118c4:	4b56      	ldr	r3, [pc, #344]	@ (8011a20 <ioports_add+0x224>)
 80118c6:	f893 2117 	ldrb.w	r2, [r3, #279]	@ 0x117
 80118ca:	736a      	strb	r2, [r5, #13]
            hal.port.num_analog_out += (ports->out.n_ports = n_out);
 80118cc:	732c      	strb	r4, [r5, #12]
 80118ce:	f893 2117 	ldrb.w	r2, [r3, #279]	@ 0x117
 80118d2:	4422      	add	r2, r4
 80118d4:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
            ports->out.map = malloc(ports->out.n_ports * sizeof(ports->out.n_ports));
 80118d8:	7b28      	ldrb	r0, [r5, #12]
 80118da:	f010 fd07 	bl	80222ec <malloc>
 80118de:	6128      	str	r0, [r5, #16]
            analog.out.ports = &ports->out;
 80118e0:	f105 030c 	add.w	r3, r5, #12
 80118e4:	4a50      	ldr	r2, [pc, #320]	@ (8011a28 <ioports_add+0x22c>)
 80118e6:	6393      	str	r3, [r2, #56]	@ 0x38
        cfg = &analog;
 80118e8:	4692      	mov	sl, r2
 80118ea:	e79c      	b.n	8011826 <ioports_add+0x2a>
        if((ports->pnum = pn = malloc((3 * n_ports + (n_ports > 9 ? n_ports - 10 : 0)) + 1)))
 80118ec:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 80118f0:	2f0a      	cmp	r7, #10
 80118f2:	bf2c      	ite	cs
 80118f4:	19c0      	addcs	r0, r0, r7
 80118f6:	300a      	addcc	r0, #10
 80118f8:	3809      	subs	r0, #9
 80118fa:	f010 fcf7 	bl	80222ec <malloc>
 80118fe:	4606      	mov	r6, r0
 8011900:	6028      	str	r0, [r5, #0]
 8011902:	2800      	cmp	r0, #0
 8011904:	d096      	beq.n	8011834 <ioports_add+0x38>
          for(i = 0; i < n_ports; i++) {
 8011906:	2400      	movs	r4, #0
 8011908:	e02a      	b.n	8011960 <ioports_add+0x164>
                *pn = type == Port_Digital ? 'P' : 'E';
 801190a:	2350      	movs	r3, #80	@ 0x50
 801190c:	e030      	b.n	8011970 <ioports_add+0x174>
                    cfg->inx.mask = (cfg->inx.mask << 1) + 1;
 801190e:	f89a 3070 	ldrb.w	r3, [sl, #112]	@ 0x70
 8011912:	005b      	lsls	r3, r3, #1
 8011914:	b2db      	uxtb	r3, r3
 8011916:	3301      	adds	r3, #1
 8011918:	f88a 3070 	strb.w	r3, [sl, #112]	@ 0x70
                    strcat(cfg->in.port_names, i == 0 ? "Aux " : ",Aux ");
 801191c:	f10a 0804 	add.w	r8, sl, #4
 8011920:	b15c      	cbz	r4, 801193a <ioports_add+0x13e>
 8011922:	4942      	ldr	r1, [pc, #264]	@ (8011a2c <ioports_add+0x230>)
 8011924:	4640      	mov	r0, r8
 8011926:	f012 fdb2 	bl	802448e <strcat>
                    strcat(cfg->in.port_names, uitoa(i));
 801192a:	4620      	mov	r0, r4
 801192c:	f003 fc26 	bl	801517c <uitoa>
 8011930:	4601      	mov	r1, r0
 8011932:	4640      	mov	r0, r8
 8011934:	f012 fdab 	bl	802448e <strcat>
 8011938:	e03e      	b.n	80119b8 <ioports_add+0x1bc>
                    strcat(cfg->in.port_names, i == 0 ? "Aux " : ",Aux ");
 801193a:	493d      	ldr	r1, [pc, #244]	@ (8011a30 <ioports_add+0x234>)
 801193c:	e7f2      	b.n	8011924 <ioports_add+0x128>
                    strcat(cfg->out.port_names, i == 0 ? "Aux " : ",Aux ");
 801193e:	493c      	ldr	r1, [pc, #240]	@ (8011a30 <ioports_add+0x234>)
 8011940:	4640      	mov	r0, r8
 8011942:	f012 fda4 	bl	802448e <strcat>
                    strcat(cfg->out.port_names, uitoa(i));
 8011946:	4620      	mov	r0, r4
 8011948:	f003 fc18 	bl	801517c <uitoa>
 801194c:	4601      	mov	r1, r0
 801194e:	4640      	mov	r0, r8
 8011950:	f012 fd9d 	bl	802448e <strcat>
            if(pn)
 8011954:	b11e      	cbz	r6, 801195e <ioports_add+0x162>
                pn += i > 9 ? 4 : 3;
 8011956:	2c09      	cmp	r4, #9
 8011958:	d956      	bls.n	8011a08 <ioports_add+0x20c>
 801195a:	2304      	movs	r3, #4
 801195c:	441e      	add	r6, r3
          for(i = 0; i < n_ports; i++) {
 801195e:	3401      	adds	r4, #1
 8011960:	42bc      	cmp	r4, r7
 8011962:	f4bf af67 	bcs.w	8011834 <ioports_add+0x38>
            if(pn) {
 8011966:	b16e      	cbz	r6, 8011984 <ioports_add+0x188>
                *pn = type == Port_Digital ? 'P' : 'E';
 8011968:	f1b9 0f01 	cmp.w	r9, #1
 801196c:	d0cd      	beq.n	801190a <ioports_add+0x10e>
 801196e:	2345      	movs	r3, #69	@ 0x45
 8011970:	46b0      	mov	r8, r6
 8011972:	f808 3b01 	strb.w	r3, [r8], #1
                strcpy(pn + 1, uitoa(i));
 8011976:	4620      	mov	r0, r4
 8011978:	f003 fc00 	bl	801517c <uitoa>
 801197c:	4601      	mov	r1, r0
 801197e:	4640      	mov	r0, r8
 8011980:	f012 fed5 	bl	802472e <strcpy>
            if(ports->in.n_ports && i < ports->in.n_ports) {
 8011984:	792b      	ldrb	r3, [r5, #4]
 8011986:	b1bb      	cbz	r3, 80119b8 <ioports_add+0x1bc>
 8011988:	42a3      	cmp	r3, r4
 801198a:	d915      	bls.n	80119b8 <ioports_add+0x1bc>
                if(ports->in.map)
 801198c:	68ab      	ldr	r3, [r5, #8]
 801198e:	b103      	cbz	r3, 8011992 <ioports_add+0x196>
                    ports->in.map[i] = i;
 8011990:	551c      	strb	r4, [r3, r4]
                if(hal.port.set_pin_description)
 8011992:	4b23      	ldr	r3, [pc, #140]	@ (8011a20 <ioports_add+0x224>)
 8011994:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 8011998:	f1b8 0f00 	cmp.w	r8, #0
 801199c:	d00a      	beq.n	80119b4 <ioports_add+0x1b8>
                    hal.port.set_pin_description(type, Port_Input, i, get_pnum(ports, i));
 801199e:	fa5f fb84 	uxtb.w	fp, r4
 80119a2:	4659      	mov	r1, fp
 80119a4:	4628      	mov	r0, r5
 80119a6:	f7ff fe79 	bl	801169c <get_pnum>
 80119aa:	4603      	mov	r3, r0
 80119ac:	465a      	mov	r2, fp
 80119ae:	2100      	movs	r1, #0
 80119b0:	4648      	mov	r0, r9
 80119b2:	47c0      	blx	r8
                if(i < 8) {
 80119b4:	2c07      	cmp	r4, #7
 80119b6:	d9aa      	bls.n	801190e <ioports_add+0x112>
            if(ports->out.n_ports && i < ports->out.n_ports) {
 80119b8:	7b2b      	ldrb	r3, [r5, #12]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d0ca      	beq.n	8011954 <ioports_add+0x158>
 80119be:	42a3      	cmp	r3, r4
 80119c0:	d9c8      	bls.n	8011954 <ioports_add+0x158>
                if(ports->out.map)
 80119c2:	692b      	ldr	r3, [r5, #16]
 80119c4:	b103      	cbz	r3, 80119c8 <ioports_add+0x1cc>
                    ports->out.map[i] = i;
 80119c6:	551c      	strb	r4, [r3, r4]
                if(hal.port.set_pin_description)
 80119c8:	4b15      	ldr	r3, [pc, #84]	@ (8011a20 <ioports_add+0x224>)
 80119ca:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 80119ce:	f1b8 0f00 	cmp.w	r8, #0
 80119d2:	d00a      	beq.n	80119ea <ioports_add+0x1ee>
                    hal.port.set_pin_description(type, Port_Output, i, get_pnum(ports, i));
 80119d4:	fa5f fb84 	uxtb.w	fp, r4
 80119d8:	4659      	mov	r1, fp
 80119da:	4628      	mov	r0, r5
 80119dc:	f7ff fe5e 	bl	801169c <get_pnum>
 80119e0:	4603      	mov	r3, r0
 80119e2:	465a      	mov	r2, fp
 80119e4:	2101      	movs	r1, #1
 80119e6:	4648      	mov	r0, r9
 80119e8:	47c0      	blx	r8
                if(i < 8) {
 80119ea:	2c07      	cmp	r4, #7
 80119ec:	d8b2      	bhi.n	8011954 <ioports_add+0x158>
                    cfg->outx.mask = (cfg->outx.mask << 1) + 1;
 80119ee:	f89a 3071 	ldrb.w	r3, [sl, #113]	@ 0x71
 80119f2:	005b      	lsls	r3, r3, #1
 80119f4:	b2db      	uxtb	r3, r3
 80119f6:	3301      	adds	r3, #1
 80119f8:	f88a 3071 	strb.w	r3, [sl, #113]	@ 0x71
                    strcat(cfg->out.port_names, i == 0 ? "Aux " : ",Aux ");
 80119fc:	f10a 083c 	add.w	r8, sl, #60	@ 0x3c
 8011a00:	2c00      	cmp	r4, #0
 8011a02:	d09c      	beq.n	801193e <ioports_add+0x142>
 8011a04:	4909      	ldr	r1, [pc, #36]	@ (8011a2c <ioports_add+0x230>)
 8011a06:	e79b      	b.n	8011940 <ioports_add+0x144>
                pn += i > 9 ? 4 : 3;
 8011a08:	2303      	movs	r3, #3
 8011a0a:	e7a7      	b.n	801195c <ioports_add+0x160>
 8011a0c:	0801169d 	.word	0x0801169d
 8011a10:	200001f4 	.word	0x200001f4
 8011a14:	200001f6 	.word	0x200001f6
 8011a18:	200001f8 	.word	0x200001f8
 8011a1c:	200001fa 	.word	0x200001fa
 8011a20:	200011ac 	.word	0x200011ac
 8011a24:	20001524 	.word	0x20001524
 8011a28:	20001598 	.word	0x20001598
 8011a2c:	0802a940 	.word	0x0802a940
 8011a30:	0802a938 	.word	0x0802a938

08011a34 <ioports_map_reverse>:
{
 8011a34:	4603      	mov	r3, r0
 8011a36:	4608      	mov	r0, r1
    if(type->map) {
 8011a38:	6859      	ldr	r1, [r3, #4]
 8011a3a:	b131      	cbz	r1, 8011a4a <ioports_map_reverse+0x16>
        uint_fast8_t idx = type->n_ports;
 8011a3c:	781b      	ldrb	r3, [r3, #0]
            if(type->map[--idx] == port) {
 8011a3e:	3b01      	subs	r3, #1
 8011a40:	5cca      	ldrb	r2, [r1, r3]
 8011a42:	4282      	cmp	r2, r0
 8011a44:	d002      	beq.n	8011a4c <ioports_map_reverse+0x18>
        } while(idx);
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d1f9      	bne.n	8011a3e <ioports_map_reverse+0xa>
}
 8011a4a:	4770      	bx	lr
                port = idx;
 8011a4c:	b2d8      	uxtb	r0, r3
                break;
 8011a4e:	4770      	bx	lr

08011a50 <ioport_settings_load>:
};

#endif

static void ioport_settings_load (void)
{
 8011a50:	b530      	push	{r4, r5, lr}
 8011a52:	b083      	sub	sp, #12
    uint8_t port;
    xbar_t *xbar;
    gpio_in_config_t in_config = {0};
 8011a54:	2300      	movs	r3, #0
 8011a56:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011a5a:	f88d 3006 	strb.w	r3, [sp, #6]
    gpio_out_config_t out_config = {0};
 8011a5e:	f8ad 3000 	strh.w	r3, [sp]
 8011a62:	f88d 3002 	strb.w	r3, [sp, #2]

    settings.ioport.invert_in.mask &= digital.inx.mask;
 8011a66:	4b5e      	ldr	r3, [pc, #376]	@ (8011be0 <ioport_settings_load+0x190>)
 8011a68:	f893 0168 	ldrb.w	r0, [r3, #360]	@ 0x168
 8011a6c:	495d      	ldr	r1, [pc, #372]	@ (8011be4 <ioport_settings_load+0x194>)
 8011a6e:	f891 2070 	ldrb.w	r2, [r1, #112]	@ 0x70
 8011a72:	4010      	ands	r0, r2
 8011a74:	f883 0168 	strb.w	r0, [r3, #360]	@ 0x168
    settings.ioport.pullup_disable_in.mask &= digital.inx.mask;
 8011a78:	f893 0169 	ldrb.w	r0, [r3, #361]	@ 0x169
 8011a7c:	4002      	ands	r2, r0
 8011a7e:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
    settings.ioport.invert_out.mask &= digital.outx.mask;
 8011a82:	f893 016a 	ldrb.w	r0, [r3, #362]	@ 0x16a
 8011a86:	f891 2071 	ldrb.w	r2, [r1, #113]	@ 0x71
 8011a8a:	4010      	ands	r0, r2
 8011a8c:	f883 016a 	strb.w	r0, [r3, #362]	@ 0x16a
    settings.ioport.od_enable_out.mask &= digital.outx.mask;
 8011a90:	f893 016b 	ldrb.w	r0, [r3, #363]	@ 0x16b
 8011a94:	4002      	ands	r2, r0
 8011a96:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b

    if(digital.in.ports && (port = digital.in.ports->n_ports)) do {
 8011a9a:	680b      	ldr	r3, [r1, #0]
 8011a9c:	b10b      	cbz	r3, 8011aa2 <ioport_settings_load+0x52>
 8011a9e:	781c      	ldrb	r4, [r3, #0]
 8011aa0:	bb34      	cbnz	r4, 8011af0 <ioport_settings_load+0xa0>
                xbar->config(xbar, &in_config, false);
            }
        }
    } while(port);

    if(digital.out.ports && (port = digital.out.ports->n_ports)) do {
 8011aa2:	4b50      	ldr	r3, [pc, #320]	@ (8011be4 <ioport_settings_load+0x194>)
 8011aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011aa6:	b113      	cbz	r3, 8011aae <ioport_settings_load+0x5e>
 8011aa8:	781c      	ldrb	r4, [r3, #0]
 8011aaa:	2c00      	cmp	r4, #0
 8011aac:	d169      	bne.n	8011b82 <ioport_settings_load+0x132>
                xbar->config(xbar, &out_config, false);
            }
        }
    } while(port);

    if(on_settings_loaded)
 8011aae:	4b4e      	ldr	r3, [pc, #312]	@ (8011be8 <ioport_settings_load+0x198>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	b103      	cbz	r3, 8011ab6 <ioport_settings_load+0x66>
        on_settings_loaded();
 8011ab4:	4798      	blx	r3
}
 8011ab6:	b003      	add	sp, #12
 8011ab8:	bd30      	pop	{r4, r5, pc}
                    in_config.inverted = settings.probe.invert_probe_pin;
 8011aba:	4b49      	ldr	r3, [pc, #292]	@ (8011be0 <ioport_settings_load+0x190>)
 8011abc:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8011ac0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8011ac4:	f88d 3004 	strb.w	r3, [sp, #4]
                if(in_config.inverted)
 8011ac8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d04a      	beq.n	8011b66 <ioport_settings_load+0x116>
                    settings.ioport.invert_in.mask |= (1 << xbar->id);
 8011ad0:	4943      	ldr	r1, [pc, #268]	@ (8011be0 <ioport_settings_load+0x190>)
 8011ad2:	f891 3168 	ldrb.w	r3, [r1, #360]	@ 0x168
 8011ad6:	7828      	ldrb	r0, [r5, #0]
 8011ad8:	2201      	movs	r2, #1
 8011ada:	4082      	lsls	r2, r0
 8011adc:	4313      	orrs	r3, r2
 8011ade:	f881 3168 	strb.w	r3, [r1, #360]	@ 0x168
                xbar->config(xbar, &in_config, false);
 8011ae2:	69ab      	ldr	r3, [r5, #24]
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	a901      	add	r1, sp, #4
 8011ae8:	4628      	mov	r0, r5
 8011aea:	4798      	blx	r3
    } while(port);
 8011aec:	2c00      	cmp	r4, #0
 8011aee:	d0d8      	beq.n	8011aa2 <ioport_settings_load+0x52>
        if((xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, --port)))) {
 8011af0:	4b3e      	ldr	r3, [pc, #248]	@ (8011bec <ioport_settings_load+0x19c>)
 8011af2:	f8d3 5128 	ldr.w	r5, [r3, #296]	@ 0x128
 8011af6:	3c01      	subs	r4, #1
 8011af8:	b2e4      	uxtb	r4, r4
 8011afa:	4621      	mov	r1, r4
 8011afc:	4b39      	ldr	r3, [pc, #228]	@ (8011be4 <ioport_settings_load+0x194>)
 8011afe:	6818      	ldr	r0, [r3, #0]
 8011b00:	f7ff ff98 	bl	8011a34 <ioports_map_reverse>
 8011b04:	4602      	mov	r2, r0
 8011b06:	2100      	movs	r1, #0
 8011b08:	2001      	movs	r0, #1
 8011b0a:	47a8      	blx	r5
 8011b0c:	4605      	mov	r5, r0
 8011b0e:	2800      	cmp	r0, #0
 8011b10:	d0ec      	beq.n	8011aec <ioport_settings_load+0x9c>
            if(xbar->config) {
 8011b12:	6983      	ldr	r3, [r0, #24]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d0e9      	beq.n	8011aec <ioport_settings_load+0x9c>
                in_config.debounce = xbar->mode.debounce;
 8011b18:	7dc3      	ldrb	r3, [r0, #23]
 8011b1a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011b1e:	f88d 3005 	strb.w	r3, [sp, #5]
                in_config.pull_mode = (pull_mode_t)xbar->mode.pull_mode;
 8011b22:	7d83      	ldrb	r3, [r0, #22]
 8011b24:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8011b28:	f88d 3006 	strb.w	r3, [sp, #6]
                in_config.inverted = !!(settings.ioport.invert_in.mask & (1 << xbar->id));
 8011b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8011be0 <ioport_settings_load+0x190>)
 8011b2e:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 8011b32:	7802      	ldrb	r2, [r0, #0]
 8011b34:	4113      	asrs	r3, r2
 8011b36:	f003 0301 	and.w	r3, r3, #1
 8011b3a:	f88d 3004 	strb.w	r3, [sp, #4]
                if(xbar->function == Input_Probe)
 8011b3e:	7840      	ldrb	r0, [r0, #1]
 8011b40:	280e      	cmp	r0, #14
 8011b42:	d0ba      	beq.n	8011aba <ioport_settings_load+0x6a>
                else if(xbar->function < Input_Probe) {
 8011b44:	280d      	cmp	r0, #13
 8011b46:	d8bf      	bhi.n	8011ac8 <ioport_settings_load+0x78>
                    if((ctrl = xbar_fn_to_signals_mask(xbar->function)).mask)
 8011b48:	f7fa feb8 	bl	800c8bc <xbar_fn_to_signals_mask>
 8011b4c:	b280      	uxth	r0, r0
 8011b4e:	2800      	cmp	r0, #0
 8011b50:	d0ba      	beq.n	8011ac8 <ioport_settings_load+0x78>
                        in_config.inverted = !!(settings.control_invert.mask & ctrl.mask);
 8011b52:	4b23      	ldr	r3, [pc, #140]	@ (8011be0 <ioport_settings_load+0x190>)
 8011b54:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8011b58:	4218      	tst	r0, r3
 8011b5a:	bf14      	ite	ne
 8011b5c:	2301      	movne	r3, #1
 8011b5e:	2300      	moveq	r3, #0
 8011b60:	f88d 3004 	strb.w	r3, [sp, #4]
 8011b64:	e7b0      	b.n	8011ac8 <ioport_settings_load+0x78>
                    settings.ioport.invert_in.mask &= ~(1 << xbar->id);
 8011b66:	491e      	ldr	r1, [pc, #120]	@ (8011be0 <ioport_settings_load+0x190>)
 8011b68:	f891 2168 	ldrb.w	r2, [r1, #360]	@ 0x168
 8011b6c:	7828      	ldrb	r0, [r5, #0]
 8011b6e:	2301      	movs	r3, #1
 8011b70:	4083      	lsls	r3, r0
 8011b72:	43db      	mvns	r3, r3
 8011b74:	b25b      	sxtb	r3, r3
 8011b76:	4013      	ands	r3, r2
 8011b78:	f881 3168 	strb.w	r3, [r1, #360]	@ 0x168
 8011b7c:	e7b1      	b.n	8011ae2 <ioport_settings_load+0x92>
    } while(port);
 8011b7e:	2c00      	cmp	r4, #0
 8011b80:	d095      	beq.n	8011aae <ioport_settings_load+0x5e>
        if((xbar = hal.port.get_pin_info(Port_Digital, Port_Output, ioports_map_reverse(digital.out.ports, --port)))) {
 8011b82:	4b1a      	ldr	r3, [pc, #104]	@ (8011bec <ioport_settings_load+0x19c>)
 8011b84:	f8d3 5128 	ldr.w	r5, [r3, #296]	@ 0x128
 8011b88:	3c01      	subs	r4, #1
 8011b8a:	b2e4      	uxtb	r4, r4
 8011b8c:	4621      	mov	r1, r4
 8011b8e:	4b15      	ldr	r3, [pc, #84]	@ (8011be4 <ioport_settings_load+0x194>)
 8011b90:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8011b92:	f7ff ff4f 	bl	8011a34 <ioports_map_reverse>
 8011b96:	4602      	mov	r2, r0
 8011b98:	2101      	movs	r1, #1
 8011b9a:	4608      	mov	r0, r1
 8011b9c:	47a8      	blx	r5
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	2800      	cmp	r0, #0
 8011ba2:	d0ec      	beq.n	8011b7e <ioport_settings_load+0x12e>
            if(xbar->config && !(xbar->mode.pwm || xbar->mode.servo_pwm)) {
 8011ba4:	6985      	ldr	r5, [r0, #24]
 8011ba6:	2d00      	cmp	r5, #0
 8011ba8:	d0e9      	beq.n	8011b7e <ioport_settings_load+0x12e>
 8011baa:	7dc2      	ldrb	r2, [r0, #23]
 8011bac:	f012 0f30 	tst.w	r2, #48	@ 0x30
 8011bb0:	d1e5      	bne.n	8011b7e <ioport_settings_load+0x12e>
                out_config.inverted = !!(settings.ioport.invert_out.mask & (1 << xbar->id));
 8011bb2:	490b      	ldr	r1, [pc, #44]	@ (8011be0 <ioport_settings_load+0x190>)
 8011bb4:	f891 216a 	ldrb.w	r2, [r1, #362]	@ 0x16a
 8011bb8:	7800      	ldrb	r0, [r0, #0]
 8011bba:	4102      	asrs	r2, r0
 8011bbc:	f002 0201 	and.w	r2, r2, #1
 8011bc0:	f88d 2000 	strb.w	r2, [sp]
                out_config.open_drain = !!(settings.ioport.od_enable_out.mask & (1 << xbar->id));
 8011bc4:	f891 216b 	ldrb.w	r2, [r1, #363]	@ 0x16b
 8011bc8:	7819      	ldrb	r1, [r3, #0]
 8011bca:	410a      	asrs	r2, r1
 8011bcc:	f002 0201 	and.w	r2, r2, #1
 8011bd0:	f88d 2001 	strb.w	r2, [sp, #1]
                xbar->config(xbar, &out_config, false);
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	4669      	mov	r1, sp
 8011bd8:	4618      	mov	r0, r3
 8011bda:	47a8      	blx	r5
 8011bdc:	e7cf      	b.n	8011b7e <ioport_settings_load+0x12e>
 8011bde:	bf00      	nop
 8011be0:	20001bc4 	.word	0x20001bc4
 8011be4:	20001524 	.word	0x20001524
 8011be8:	20001610 	.word	0x20001610
 8011bec:	200011ac 	.word	0x200011ac

08011bf0 <aux_set_value>:
{
 8011bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bf4:	b082      	sub	sp, #8
 8011bf6:	4605      	mov	r5, r0
    switch(id) {
 8011bf8:	f5a0 73b9 	sub.w	r3, r0, #370	@ 0x172
 8011bfc:	2b03      	cmp	r3, #3
 8011bfe:	d84b      	bhi.n	8011c98 <aux_set_value+0xa8>
 8011c00:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011c04:	004e0004 	.word	0x004e0004
 8011c08:	00ea009d 	.word	0x00ea009d
            change.mask = (uint8_t)value & digital.inx.mask;
 8011c0c:	4b99      	ldr	r3, [pc, #612]	@ (8011e74 <aux_set_value+0x284>)
 8011c0e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8011c12:	ea01 0403 	and.w	r4, r1, r3
            if((changed.mask = settings.ioport.invert_in.mask ^ change.mask)) {
 8011c16:	4b98      	ldr	r3, [pc, #608]	@ (8011e78 <aux_set_value+0x288>)
 8011c18:	f893 2168 	ldrb.w	r2, [r3, #360]	@ 0x168
 8011c1c:	ea84 0302 	eor.w	r3, r4, r2
 8011c20:	4294      	cmp	r4, r2
 8011c22:	d031      	beq.n	8011c88 <aux_set_value+0x98>
                gpio_in_config_t config = {0};
 8011c24:	2600      	movs	r6, #0
 8011c26:	f8ad 6004 	strh.w	r6, [sp, #4]
 8011c2a:	f88d 6006 	strb.w	r6, [sp, #6]
 8011c2e:	e004      	b.n	8011c3a <aux_set_value+0x4a>
                    port++;
 8011c30:	3601      	adds	r6, #1
 8011c32:	b2f6      	uxtb	r6, r6
                } while(changed.mask >>= 1);
 8011c34:	087f      	lsrs	r7, r7, #1
 8011c36:	463b      	mov	r3, r7
 8011c38:	b337      	cbz	r7, 8011c88 <aux_set_value+0x98>
                    if((changed.mask & 0x01) && (xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, port)))) {
 8011c3a:	b2df      	uxtb	r7, r3
 8011c3c:	f013 0f01 	tst.w	r3, #1
 8011c40:	d0f6      	beq.n	8011c30 <aux_set_value+0x40>
 8011c42:	4b8e      	ldr	r3, [pc, #568]	@ (8011e7c <aux_set_value+0x28c>)
 8011c44:	f8d3 8128 	ldr.w	r8, [r3, #296]	@ 0x128
 8011c48:	4631      	mov	r1, r6
 8011c4a:	4b8a      	ldr	r3, [pc, #552]	@ (8011e74 <aux_set_value+0x284>)
 8011c4c:	6818      	ldr	r0, [r3, #0]
 8011c4e:	f7ff fef1 	bl	8011a34 <ioports_map_reverse>
 8011c52:	4602      	mov	r2, r0
 8011c54:	2100      	movs	r1, #0
 8011c56:	2001      	movs	r0, #1
 8011c58:	47c0      	blx	r8
 8011c5a:	2800      	cmp	r0, #0
 8011c5c:	d0e8      	beq.n	8011c30 <aux_set_value+0x40>
                        if(xbar->config) {
 8011c5e:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8011c62:	f1b8 0f00 	cmp.w	r8, #0
 8011c66:	d0e3      	beq.n	8011c30 <aux_set_value+0x40>
                            config.pull_mode = (pull_mode_t)xbar->mode.pull_mode;
 8011c68:	7d82      	ldrb	r2, [r0, #22]
 8011c6a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8011c6e:	f88d 2006 	strb.w	r2, [sp, #6]
                            config.inverted = !!(change.mask & (1 << xbar->id));
 8011c72:	7802      	ldrb	r2, [r0, #0]
 8011c74:	fa44 f202 	asr.w	r2, r4, r2
 8011c78:	f002 0201 	and.w	r2, r2, #1
 8011c7c:	f88d 2004 	strb.w	r2, [sp, #4]
                            xbar->config(xbar, &config, false);
 8011c80:	2200      	movs	r2, #0
 8011c82:	a901      	add	r1, sp, #4
 8011c84:	47c0      	blx	r8
 8011c86:	e7d3      	b.n	8011c30 <aux_set_value+0x40>
            settings.ioport.invert_in.mask = change.mask;
 8011c88:	4b7b      	ldr	r3, [pc, #492]	@ (8011e78 <aux_set_value+0x288>)
 8011c8a:	f883 4168 	strb.w	r4, [r3, #360]	@ 0x168
            if(on_setting_changed)
 8011c8e:	4b7c      	ldr	r3, [pc, #496]	@ (8011e80 <aux_set_value+0x290>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	b10b      	cbz	r3, 8011c98 <aux_set_value+0xa8>
                on_setting_changed(id);
 8011c94:	4628      	mov	r0, r5
 8011c96:	4798      	blx	r3
}
 8011c98:	2000      	movs	r0, #0
 8011c9a:	b002      	add	sp, #8
 8011c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            change.mask = (uint8_t)value & digital.inx.mask;
 8011ca0:	4b74      	ldr	r3, [pc, #464]	@ (8011e74 <aux_set_value+0x284>)
 8011ca2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8011ca6:	ea01 0403 	and.w	r4, r1, r3
            if((changed.mask = settings.ioport.pullup_disable_in.mask ^ change.mask)) {
 8011caa:	4b73      	ldr	r3, [pc, #460]	@ (8011e78 <aux_set_value+0x288>)
 8011cac:	f893 2169 	ldrb.w	r2, [r3, #361]	@ 0x169
 8011cb0:	ea84 0302 	eor.w	r3, r4, r2
 8011cb4:	4294      	cmp	r4, r2
 8011cb6:	d038      	beq.n	8011d2a <aux_set_value+0x13a>
                gpio_in_config_t config = {0};
 8011cb8:	2600      	movs	r6, #0
 8011cba:	f8ad 6004 	strh.w	r6, [sp, #4]
 8011cbe:	f88d 6006 	strb.w	r6, [sp, #6]
 8011cc2:	e012      	b.n	8011cea <aux_set_value+0xfa>
                            config.pull_mode = change.mask & (1 << xbar->id)  ? PullMode_Down : PullMode_Up;
 8011cc4:	2201      	movs	r2, #1
 8011cc6:	f88d 2006 	strb.w	r2, [sp, #6]
                            config.inverted = xbar->mode.inverted;
 8011cca:	7dda      	ldrb	r2, [r3, #23]
 8011ccc:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8011cd0:	f88d 2004 	strb.w	r2, [sp, #4]
                            config.debounce = xbar->mode.inverted;
 8011cd4:	f88d 2005 	strb.w	r2, [sp, #5]
                            xbar->config(xbar, &config, false);
 8011cd8:	2200      	movs	r2, #0
 8011cda:	a901      	add	r1, sp, #4
 8011cdc:	4618      	mov	r0, r3
 8011cde:	47c0      	blx	r8
                    port++;
 8011ce0:	3601      	adds	r6, #1
 8011ce2:	b2f6      	uxtb	r6, r6
                } while(changed.mask >>= 1);
 8011ce4:	087f      	lsrs	r7, r7, #1
 8011ce6:	463b      	mov	r3, r7
 8011ce8:	b1ff      	cbz	r7, 8011d2a <aux_set_value+0x13a>
                    if((changed.mask & 0x01) && (xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, port)))) {
 8011cea:	b2df      	uxtb	r7, r3
 8011cec:	f013 0f01 	tst.w	r3, #1
 8011cf0:	d0f6      	beq.n	8011ce0 <aux_set_value+0xf0>
 8011cf2:	4b62      	ldr	r3, [pc, #392]	@ (8011e7c <aux_set_value+0x28c>)
 8011cf4:	f8d3 8128 	ldr.w	r8, [r3, #296]	@ 0x128
 8011cf8:	4631      	mov	r1, r6
 8011cfa:	4b5e      	ldr	r3, [pc, #376]	@ (8011e74 <aux_set_value+0x284>)
 8011cfc:	6818      	ldr	r0, [r3, #0]
 8011cfe:	f7ff fe99 	bl	8011a34 <ioports_map_reverse>
 8011d02:	4602      	mov	r2, r0
 8011d04:	2100      	movs	r1, #0
 8011d06:	2001      	movs	r0, #1
 8011d08:	47c0      	blx	r8
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	2800      	cmp	r0, #0
 8011d0e:	d0e7      	beq.n	8011ce0 <aux_set_value+0xf0>
                        if(xbar->config) {
 8011d10:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8011d14:	f1b8 0f00 	cmp.w	r8, #0
 8011d18:	d0e2      	beq.n	8011ce0 <aux_set_value+0xf0>
                            config.pull_mode = change.mask & (1 << xbar->id)  ? PullMode_Down : PullMode_Up;
 8011d1a:	7802      	ldrb	r2, [r0, #0]
 8011d1c:	fa44 f202 	asr.w	r2, r4, r2
 8011d20:	f012 0f01 	tst.w	r2, #1
 8011d24:	d0ce      	beq.n	8011cc4 <aux_set_value+0xd4>
 8011d26:	2202      	movs	r2, #2
 8011d28:	e7cd      	b.n	8011cc6 <aux_set_value+0xd6>
            settings.ioport.pullup_disable_in.mask = change.mask;
 8011d2a:	4b53      	ldr	r3, [pc, #332]	@ (8011e78 <aux_set_value+0x288>)
 8011d2c:	f883 4169 	strb.w	r4, [r3, #361]	@ 0x169
            if(on_setting_changed)
 8011d30:	4b53      	ldr	r3, [pc, #332]	@ (8011e80 <aux_set_value+0x290>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d0af      	beq.n	8011c98 <aux_set_value+0xa8>
                on_setting_changed(id);
 8011d38:	4628      	mov	r0, r5
 8011d3a:	4798      	blx	r3
 8011d3c:	e7ac      	b.n	8011c98 <aux_set_value+0xa8>
            change.mask = (uint8_t)value & digital.outx.mask;
 8011d3e:	4b4d      	ldr	r3, [pc, #308]	@ (8011e74 <aux_set_value+0x284>)
 8011d40:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8011d44:	ea01 0403 	and.w	r4, r1, r3
            if((changed.mask = settings.ioport.invert_out.mask ^ change.mask)) {
 8011d48:	4b4b      	ldr	r3, [pc, #300]	@ (8011e78 <aux_set_value+0x288>)
 8011d4a:	f893 216a 	ldrb.w	r2, [r3, #362]	@ 0x16a
 8011d4e:	ea84 0302 	eor.w	r3, r4, r2
 8011d52:	4294      	cmp	r4, r2
 8011d54:	d0a0      	beq.n	8011c98 <aux_set_value+0xa8>
                gpio_out_config_t config = {0};
 8011d56:	2600      	movs	r6, #0
 8011d58:	f8ad 6004 	strh.w	r6, [sp, #4]
 8011d5c:	f88d 6006 	strb.w	r6, [sp, #6]
 8011d60:	e004      	b.n	8011d6c <aux_set_value+0x17c>
                    port++;
 8011d62:	3601      	adds	r6, #1
 8011d64:	b2f6      	uxtb	r6, r6
                } while(changed.mask >>= 1);
 8011d66:	087f      	lsrs	r7, r7, #1
 8011d68:	463b      	mov	r3, r7
 8011d6a:	b357      	cbz	r7, 8011dc2 <aux_set_value+0x1d2>
                    if((changed.mask & 0x01) && (xbar = hal.port.get_pin_info(Port_Digital, Port_Output, ioports_map_reverse(digital.out.ports, port)))) {
 8011d6c:	b2df      	uxtb	r7, r3
 8011d6e:	f013 0f01 	tst.w	r3, #1
 8011d72:	d0f6      	beq.n	8011d62 <aux_set_value+0x172>
 8011d74:	4b41      	ldr	r3, [pc, #260]	@ (8011e7c <aux_set_value+0x28c>)
 8011d76:	f8d3 8128 	ldr.w	r8, [r3, #296]	@ 0x128
 8011d7a:	4631      	mov	r1, r6
 8011d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8011e74 <aux_set_value+0x284>)
 8011d7e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8011d80:	f7ff fe58 	bl	8011a34 <ioports_map_reverse>
 8011d84:	4602      	mov	r2, r0
 8011d86:	2101      	movs	r1, #1
 8011d88:	4608      	mov	r0, r1
 8011d8a:	47c0      	blx	r8
 8011d8c:	2800      	cmp	r0, #0
 8011d8e:	d0e8      	beq.n	8011d62 <aux_set_value+0x172>
                        if(xbar->config && !(xbar->mode.pwm || xbar->mode.servo_pwm)) {
 8011d90:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8011d94:	f1b8 0f00 	cmp.w	r8, #0
 8011d98:	d0e3      	beq.n	8011d62 <aux_set_value+0x172>
 8011d9a:	7dc2      	ldrb	r2, [r0, #23]
 8011d9c:	f012 0f30 	tst.w	r2, #48	@ 0x30
 8011da0:	d1df      	bne.n	8011d62 <aux_set_value+0x172>
                            config.inverted = !!(change.mask & (1 << xbar->id));
 8011da2:	7802      	ldrb	r2, [r0, #0]
 8011da4:	fa44 f202 	asr.w	r2, r4, r2
 8011da8:	f002 0201 	and.w	r2, r2, #1
 8011dac:	f88d 2004 	strb.w	r2, [sp, #4]
                            config.open_drain = xbar->mode.open_drain;
 8011db0:	7d82      	ldrb	r2, [r0, #22]
 8011db2:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8011db6:	f88d 2005 	strb.w	r2, [sp, #5]
                            xbar->config(xbar, &config, false);
 8011dba:	2200      	movs	r2, #0
 8011dbc:	a901      	add	r1, sp, #4
 8011dbe:	47c0      	blx	r8
 8011dc0:	e7cf      	b.n	8011d62 <aux_set_value+0x172>
                settings.ioport.invert_out.mask = change.mask;
 8011dc2:	4b2d      	ldr	r3, [pc, #180]	@ (8011e78 <aux_set_value+0x288>)
 8011dc4:	f883 416a 	strb.w	r4, [r3, #362]	@ 0x16a
                if(on_setting_changed)
 8011dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8011e80 <aux_set_value+0x290>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	f43f af63 	beq.w	8011c98 <aux_set_value+0xa8>
                    on_setting_changed(id);
 8011dd2:	4628      	mov	r0, r5
 8011dd4:	4798      	blx	r3
 8011dd6:	e75f      	b.n	8011c98 <aux_set_value+0xa8>
            change.mask = (uint8_t)value & digital.outx.mask;
 8011dd8:	4b26      	ldr	r3, [pc, #152]	@ (8011e74 <aux_set_value+0x284>)
 8011dda:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8011dde:	ea01 0403 	and.w	r4, r1, r3
            if((changed.mask = settings.ioport.od_enable_out.mask ^ change.mask)) {
 8011de2:	4b25      	ldr	r3, [pc, #148]	@ (8011e78 <aux_set_value+0x288>)
 8011de4:	f893 216b 	ldrb.w	r2, [r3, #363]	@ 0x16b
 8011de8:	ea84 0302 	eor.w	r3, r4, r2
 8011dec:	4294      	cmp	r4, r2
 8011dee:	f43f af53 	beq.w	8011c98 <aux_set_value+0xa8>
                gpio_out_config_t config = {0};
 8011df2:	2600      	movs	r6, #0
 8011df4:	f8ad 6004 	strh.w	r6, [sp, #4]
 8011df8:	f88d 6006 	strb.w	r6, [sp, #6]
 8011dfc:	e004      	b.n	8011e08 <aux_set_value+0x218>
                    port++;
 8011dfe:	3601      	adds	r6, #1
 8011e00:	b2f6      	uxtb	r6, r6
                } while(changed.mask >>= 1);
 8011e02:	087f      	lsrs	r7, r7, #1
 8011e04:	463b      	mov	r3, r7
 8011e06:	b34f      	cbz	r7, 8011e5c <aux_set_value+0x26c>
                    if((changed.mask & 0x01) && (xbar = hal.port.get_pin_info(Port_Digital, Port_Output, ioports_map_reverse(digital.out.ports, port)))) {
 8011e08:	b2df      	uxtb	r7, r3
 8011e0a:	f013 0f01 	tst.w	r3, #1
 8011e0e:	d0f6      	beq.n	8011dfe <aux_set_value+0x20e>
 8011e10:	4b1a      	ldr	r3, [pc, #104]	@ (8011e7c <aux_set_value+0x28c>)
 8011e12:	f8d3 8128 	ldr.w	r8, [r3, #296]	@ 0x128
 8011e16:	4631      	mov	r1, r6
 8011e18:	4b16      	ldr	r3, [pc, #88]	@ (8011e74 <aux_set_value+0x284>)
 8011e1a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8011e1c:	f7ff fe0a 	bl	8011a34 <ioports_map_reverse>
 8011e20:	4602      	mov	r2, r0
 8011e22:	2101      	movs	r1, #1
 8011e24:	4608      	mov	r0, r1
 8011e26:	47c0      	blx	r8
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	d0e8      	beq.n	8011dfe <aux_set_value+0x20e>
                        if(xbar->config && !(xbar->mode.pwm || xbar->mode.servo_pwm)) {
 8011e2c:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8011e30:	f1b8 0f00 	cmp.w	r8, #0
 8011e34:	d0e3      	beq.n	8011dfe <aux_set_value+0x20e>
 8011e36:	7dc2      	ldrb	r2, [r0, #23]
 8011e38:	f012 0f30 	tst.w	r2, #48	@ 0x30
 8011e3c:	d1df      	bne.n	8011dfe <aux_set_value+0x20e>
                            config.inverted = xbar->mode.inverted;
 8011e3e:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8011e42:	f88d 2004 	strb.w	r2, [sp, #4]
                            config.open_drain = !!(change.mask & (1 << xbar->id));
 8011e46:	7802      	ldrb	r2, [r0, #0]
 8011e48:	fa44 f202 	asr.w	r2, r4, r2
 8011e4c:	f002 0201 	and.w	r2, r2, #1
 8011e50:	f88d 2005 	strb.w	r2, [sp, #5]
                            xbar->config(xbar, &config, false);
 8011e54:	2200      	movs	r2, #0
 8011e56:	a901      	add	r1, sp, #4
 8011e58:	47c0      	blx	r8
 8011e5a:	e7d0      	b.n	8011dfe <aux_set_value+0x20e>
                settings.ioport.od_enable_out.mask = change.mask;
 8011e5c:	4b06      	ldr	r3, [pc, #24]	@ (8011e78 <aux_set_value+0x288>)
 8011e5e:	f883 416b 	strb.w	r4, [r3, #363]	@ 0x16b
                if(on_setting_changed)
 8011e62:	4b07      	ldr	r3, [pc, #28]	@ (8011e80 <aux_set_value+0x290>)
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	f43f af16 	beq.w	8011c98 <aux_set_value+0xa8>
                    on_setting_changed(id);
 8011e6c:	4628      	mov	r0, r5
 8011e6e:	4798      	blx	r3
 8011e70:	e712      	b.n	8011c98 <aux_set_value+0xa8>
 8011e72:	bf00      	nop
 8011e74:	20001524 	.word	0x20001524
 8011e78:	20001bc4 	.word	0x20001bc4
 8011e7c:	200011ac 	.word	0x200011ac
 8011e80:	2000160c 	.word	0x2000160c

08011e84 <ioport_save_input_settings>:
{
 8011e84:	b538      	push	{r3, r4, r5, lr}
 8011e86:	460c      	mov	r4, r1
    if(digital.inx.mask & (1 << xbar->id)) {
 8011e88:	4b22      	ldr	r3, [pc, #136]	@ (8011f14 <ioport_save_input_settings+0x90>)
 8011e8a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8011e8e:	7802      	ldrb	r2, [r0, #0]
 8011e90:	4113      	asrs	r3, r2
 8011e92:	f013 0f01 	tst.w	r3, #1
 8011e96:	d00a      	beq.n	8011eae <ioport_save_input_settings+0x2a>
        if(config->inverted)
 8011e98:	780b      	ldrb	r3, [r1, #0]
 8011e9a:	b183      	cbz	r3, 8011ebe <ioport_save_input_settings+0x3a>
            settings.ioport.invert_in.mask |= (1 << xbar->id);
 8011e9c:	4d1e      	ldr	r5, [pc, #120]	@ (8011f18 <ioport_save_input_settings+0x94>)
 8011e9e:	f895 3168 	ldrb.w	r3, [r5, #360]	@ 0x168
 8011ea2:	2101      	movs	r1, #1
 8011ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8011ea8:	4313      	orrs	r3, r2
 8011eaa:	f885 3168 	strb.w	r3, [r5, #360]	@ 0x168
    if(xbar->function == Input_Probe)
 8011eae:	7840      	ldrb	r0, [r0, #1]
 8011eb0:	280e      	cmp	r0, #14
 8011eb2:	d00f      	beq.n	8011ed4 <ioport_save_input_settings+0x50>
    else if(xbar->function < Input_Probe) {
 8011eb4:	280d      	cmp	r0, #13
 8011eb6:	d916      	bls.n	8011ee6 <ioport_save_input_settings+0x62>
    settings_write_global();
 8011eb8:	f00a f86a 	bl	801bf90 <settings_write_global>
}
 8011ebc:	bd38      	pop	{r3, r4, r5, pc}
            settings.ioport.invert_in.mask &= ~(1 << xbar->id);
 8011ebe:	4d16      	ldr	r5, [pc, #88]	@ (8011f18 <ioport_save_input_settings+0x94>)
 8011ec0:	f895 1168 	ldrb.w	r1, [r5, #360]	@ 0x168
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	4093      	lsls	r3, r2
 8011ec8:	43db      	mvns	r3, r3
 8011eca:	b25b      	sxtb	r3, r3
 8011ecc:	400b      	ands	r3, r1
 8011ece:	f885 3168 	strb.w	r3, [r5, #360]	@ 0x168
 8011ed2:	e7ec      	b.n	8011eae <ioport_save_input_settings+0x2a>
        settings.probe.invert_probe_pin = config->inverted;
 8011ed4:	7821      	ldrb	r1, [r4, #0]
 8011ed6:	4b10      	ldr	r3, [pc, #64]	@ (8011f18 <ioport_save_input_settings+0x94>)
 8011ed8:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
 8011edc:	f361 0200 	bfi	r2, r1, #0, #1
 8011ee0:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8011ee4:	e7e8      	b.n	8011eb8 <ioport_save_input_settings+0x34>
        if((ctrl = xbar_fn_to_signals_mask(xbar->function)).mask) {
 8011ee6:	f7fa fce9 	bl	800c8bc <xbar_fn_to_signals_mask>
 8011eea:	b283      	uxth	r3, r0
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d0e3      	beq.n	8011eb8 <ioport_save_input_settings+0x34>
            if(config->inverted)
 8011ef0:	7822      	ldrb	r2, [r4, #0]
 8011ef2:	b132      	cbz	r2, 8011f02 <ioport_save_input_settings+0x7e>
                settings.control_invert.mask |= ctrl.mask;
 8011ef4:	4a08      	ldr	r2, [pc, #32]	@ (8011f18 <ioport_save_input_settings+0x94>)
 8011ef6:	f8b2 106c 	ldrh.w	r1, [r2, #108]	@ 0x6c
 8011efa:	430b      	orrs	r3, r1
 8011efc:	f8a2 306c 	strh.w	r3, [r2, #108]	@ 0x6c
 8011f00:	e7da      	b.n	8011eb8 <ioport_save_input_settings+0x34>
                settings.control_invert.mask &= ~ctrl.mask;
 8011f02:	4a05      	ldr	r2, [pc, #20]	@ (8011f18 <ioport_save_input_settings+0x94>)
 8011f04:	f8b2 306c 	ldrh.w	r3, [r2, #108]	@ 0x6c
 8011f08:	43c0      	mvns	r0, r0
 8011f0a:	b200      	sxth	r0, r0
 8011f0c:	4003      	ands	r3, r0
 8011f0e:	f8a2 306c 	strh.w	r3, [r2, #108]	@ 0x6c
 8011f12:	e7d1      	b.n	8011eb8 <ioport_save_input_settings+0x34>
 8011f14:	20001524 	.word	0x20001524
 8011f18:	20001bc4 	.word	0x20001bc4

08011f1c <ioport_save_output_settings>:
{
 8011f1c:	b508      	push	{r3, lr}
    if(digital.outx.mask & (1 << xbar->id)) {
 8011f1e:	4b10      	ldr	r3, [pc, #64]	@ (8011f60 <ioport_save_output_settings+0x44>)
 8011f20:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8011f24:	7802      	ldrb	r2, [r0, #0]
 8011f26:	4113      	asrs	r3, r2
 8011f28:	f013 0f01 	tst.w	r3, #1
 8011f2c:	d00a      	beq.n	8011f44 <ioport_save_output_settings+0x28>
        if(config->inverted)
 8011f2e:	780b      	ldrb	r3, [r1, #0]
 8011f30:	b15b      	cbz	r3, 8011f4a <ioport_save_output_settings+0x2e>
            settings.ioport.invert_out.mask |= (1 << xbar->id);
 8011f32:	480c      	ldr	r0, [pc, #48]	@ (8011f64 <ioport_save_output_settings+0x48>)
 8011f34:	f890 316a 	ldrb.w	r3, [r0, #362]	@ 0x16a
 8011f38:	2101      	movs	r1, #1
 8011f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8011f3e:	4313      	orrs	r3, r2
 8011f40:	f880 316a 	strb.w	r3, [r0, #362]	@ 0x16a
    settings_write_global();
 8011f44:	f00a f824 	bl	801bf90 <settings_write_global>
}
 8011f48:	bd08      	pop	{r3, pc}
            settings.ioport.invert_out.mask &= ~(1 << xbar->id);
 8011f4a:	4806      	ldr	r0, [pc, #24]	@ (8011f64 <ioport_save_output_settings+0x48>)
 8011f4c:	f890 116a 	ldrb.w	r1, [r0, #362]	@ 0x16a
 8011f50:	2301      	movs	r3, #1
 8011f52:	4093      	lsls	r3, r2
 8011f54:	43db      	mvns	r3, r3
 8011f56:	b25b      	sxtb	r3, r3
 8011f58:	400b      	ands	r3, r1
 8011f5a:	f880 316a 	strb.w	r3, [r0, #362]	@ 0x16a
 8011f5e:	e7f1      	b.n	8011f44 <ioport_save_output_settings+0x28>
 8011f60:	20001524 	.word	0x20001524
 8011f64:	20001bc4 	.word	0x20001bc4

08011f68 <ioport_setting_changed>:
    .load = ioport_settings_load,
    .save = settings_write_global
};

void ioport_setting_changed (setting_id_t id)
{
 8011f68:	b530      	push	{r4, r5, lr}
 8011f6a:	b083      	sub	sp, #12
    if(on_setting_changed)
 8011f6c:	4b70      	ldr	r3, [pc, #448]	@ (8012130 <ioport_setting_changed+0x1c8>)
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	b113      	cbz	r3, 8011f78 <ioport_setting_changed+0x10>
        on_setting_changed(id);
 8011f72:	4798      	blx	r3
            break;

        default:
            break;
    }
}
 8011f74:	b003      	add	sp, #12
 8011f76:	bd30      	pop	{r4, r5, pc}
    else switch(id) {
 8011f78:	3806      	subs	r0, #6
 8011f7a:	280d      	cmp	r0, #13
 8011f7c:	d8fa      	bhi.n	8011f74 <ioport_setting_changed+0xc>
 8011f7e:	a301      	add	r3, pc, #4	@ (adr r3, 8011f84 <ioport_setting_changed+0x1c>)
 8011f80:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8011f84:	08011fbd 	.word	0x08011fbd
 8011f88:	08011f75 	.word	0x08011f75
 8011f8c:	08011f75 	.word	0x08011f75
 8011f90:	08011f75 	.word	0x08011f75
 8011f94:	08011f75 	.word	0x08011f75
 8011f98:	08011f75 	.word	0x08011f75
 8011f9c:	08011f75 	.word	0x08011f75
 8011fa0:	08011f75 	.word	0x08011f75
 8011fa4:	0801205d 	.word	0x0801205d
 8011fa8:	08011f75 	.word	0x08011f75
 8011fac:	08011f75 	.word	0x08011f75
 8011fb0:	0801205d 	.word	0x0801205d
 8011fb4:	08011f75 	.word	0x08011f75
 8011fb8:	08011fbd 	.word	0x08011fbd
                gpio_in_config_t in_config = {0};
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011fc2:	f88d 3006 	strb.w	r3, [sp, #6]
                uint8_t port = digital.in.ports->n_ports;
 8011fc6:	4b5b      	ldr	r3, [pc, #364]	@ (8012134 <ioport_setting_changed+0x1cc>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	781c      	ldrb	r4, [r3, #0]
 8011fcc:	e011      	b.n	8011ff2 <ioport_setting_changed+0x8a>
                                settings.ioport.invert_in.mask &= ~(1 << xbar->id);
 8011fce:	485a      	ldr	r0, [pc, #360]	@ (8012138 <ioport_setting_changed+0x1d0>)
 8011fd0:	f890 1168 	ldrb.w	r1, [r0, #360]	@ 0x168
 8011fd4:	781d      	ldrb	r5, [r3, #0]
 8011fd6:	2201      	movs	r2, #1
 8011fd8:	40aa      	lsls	r2, r5
 8011fda:	43d2      	mvns	r2, r2
 8011fdc:	b252      	sxtb	r2, r2
 8011fde:	400a      	ands	r2, r1
 8011fe0:	f880 2168 	strb.w	r2, [r0, #360]	@ 0x168
                            xbar->config(xbar, &in_config, false);
 8011fe4:	699d      	ldr	r5, [r3, #24]
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	a901      	add	r1, sp, #4
 8011fea:	4618      	mov	r0, r3
 8011fec:	47a8      	blx	r5
                } while(port);
 8011fee:	2c00      	cmp	r4, #0
 8011ff0:	d0c0      	beq.n	8011f74 <ioport_setting_changed+0xc>
                    if((xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, --port)))) {
 8011ff2:	4b52      	ldr	r3, [pc, #328]	@ (801213c <ioport_setting_changed+0x1d4>)
 8011ff4:	f8d3 5128 	ldr.w	r5, [r3, #296]	@ 0x128
 8011ff8:	3c01      	subs	r4, #1
 8011ffa:	b2e4      	uxtb	r4, r4
 8011ffc:	4621      	mov	r1, r4
 8011ffe:	4b4d      	ldr	r3, [pc, #308]	@ (8012134 <ioport_setting_changed+0x1cc>)
 8012000:	6818      	ldr	r0, [r3, #0]
 8012002:	f7ff fd17 	bl	8011a34 <ioports_map_reverse>
 8012006:	4602      	mov	r2, r0
 8012008:	2100      	movs	r1, #0
 801200a:	2001      	movs	r0, #1
 801200c:	47a8      	blx	r5
 801200e:	4603      	mov	r3, r0
 8012010:	2800      	cmp	r0, #0
 8012012:	d0ec      	beq.n	8011fee <ioport_setting_changed+0x86>
                        if(xbar->config && xbar->function == Input_Probe) {
 8012014:	6982      	ldr	r2, [r0, #24]
 8012016:	2a00      	cmp	r2, #0
 8012018:	d0e9      	beq.n	8011fee <ioport_setting_changed+0x86>
 801201a:	7842      	ldrb	r2, [r0, #1]
 801201c:	2a0e      	cmp	r2, #14
 801201e:	d1e6      	bne.n	8011fee <ioport_setting_changed+0x86>
                            in_config.debounce  = Off;
 8012020:	2200      	movs	r2, #0
 8012022:	f88d 2005 	strb.w	r2, [sp, #5]
                            in_config.inverted  = settings.probe.invert_probe_pin;
 8012026:	4a44      	ldr	r2, [pc, #272]	@ (8012138 <ioport_setting_changed+0x1d0>)
 8012028:	f892 1100 	ldrb.w	r1, [r2, #256]	@ 0x100
 801202c:	f3c1 0200 	ubfx	r2, r1, #0, #1
 8012030:	f88d 2004 	strb.w	r2, [sp, #4]
                            in_config.pull_mode = settings.probe.disable_probe_pullup ? PullMode_None : PullMode_Up;
 8012034:	084a      	lsrs	r2, r1, #1
 8012036:	f082 0201 	eor.w	r2, r2, #1
 801203a:	f002 0201 	and.w	r2, r2, #1
 801203e:	f88d 2006 	strb.w	r2, [sp, #6]
                            if(in_config.inverted)
 8012042:	f011 0f01 	tst.w	r1, #1
 8012046:	d0c2      	beq.n	8011fce <ioport_setting_changed+0x66>
                                settings.ioport.invert_in.mask |= (1 << xbar->id);
 8012048:	483b      	ldr	r0, [pc, #236]	@ (8012138 <ioport_setting_changed+0x1d0>)
 801204a:	f890 2168 	ldrb.w	r2, [r0, #360]	@ 0x168
 801204e:	781d      	ldrb	r5, [r3, #0]
 8012050:	2101      	movs	r1, #1
 8012052:	40a9      	lsls	r1, r5
 8012054:	430a      	orrs	r2, r1
 8012056:	f880 2168 	strb.w	r2, [r0, #360]	@ 0x168
 801205a:	e7c3      	b.n	8011fe4 <ioport_setting_changed+0x7c>
                gpio_in_config_t in_config = {0};
 801205c:	2300      	movs	r3, #0
 801205e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012062:	f88d 3006 	strb.w	r3, [sp, #6]
                uint8_t port = digital.in.ports->n_ports;
 8012066:	4b33      	ldr	r3, [pc, #204]	@ (8012134 <ioport_setting_changed+0x1cc>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	781c      	ldrb	r4, [r3, #0]
 801206c:	e012      	b.n	8012094 <ioport_setting_changed+0x12c>
                                settings.ioport.invert_in.mask &= ~(1 << xbar->id);
 801206e:	4932      	ldr	r1, [pc, #200]	@ (8012138 <ioport_setting_changed+0x1d0>)
 8012070:	f891 2168 	ldrb.w	r2, [r1, #360]	@ 0x168
 8012074:	7828      	ldrb	r0, [r5, #0]
 8012076:	2301      	movs	r3, #1
 8012078:	4083      	lsls	r3, r0
 801207a:	43db      	mvns	r3, r3
 801207c:	b25b      	sxtb	r3, r3
 801207e:	4013      	ands	r3, r2
 8012080:	f881 3168 	strb.w	r3, [r1, #360]	@ 0x168
                            xbar->config(xbar, &in_config, false);
 8012084:	69ab      	ldr	r3, [r5, #24]
 8012086:	2200      	movs	r2, #0
 8012088:	a901      	add	r1, sp, #4
 801208a:	4628      	mov	r0, r5
 801208c:	4798      	blx	r3
                } while(port);
 801208e:	2c00      	cmp	r4, #0
 8012090:	f43f af70 	beq.w	8011f74 <ioport_setting_changed+0xc>
                    if((xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, --port)))) {
 8012094:	4b29      	ldr	r3, [pc, #164]	@ (801213c <ioport_setting_changed+0x1d4>)
 8012096:	f8d3 5128 	ldr.w	r5, [r3, #296]	@ 0x128
 801209a:	3c01      	subs	r4, #1
 801209c:	b2e4      	uxtb	r4, r4
 801209e:	4621      	mov	r1, r4
 80120a0:	4b24      	ldr	r3, [pc, #144]	@ (8012134 <ioport_setting_changed+0x1cc>)
 80120a2:	6818      	ldr	r0, [r3, #0]
 80120a4:	f7ff fcc6 	bl	8011a34 <ioports_map_reverse>
 80120a8:	4602      	mov	r2, r0
 80120aa:	2100      	movs	r1, #0
 80120ac:	2001      	movs	r0, #1
 80120ae:	47a8      	blx	r5
 80120b0:	4605      	mov	r5, r0
 80120b2:	2800      	cmp	r0, #0
 80120b4:	d0eb      	beq.n	801208e <ioport_setting_changed+0x126>
                        if(xbar->config && xbar->function < Input_Probe) {
 80120b6:	6983      	ldr	r3, [r0, #24]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d0e8      	beq.n	801208e <ioport_setting_changed+0x126>
 80120bc:	7843      	ldrb	r3, [r0, #1]
 80120be:	2b0d      	cmp	r3, #13
 80120c0:	d8e5      	bhi.n	801208e <ioport_setting_changed+0x126>
                            in_config.debounce = xbar->mode.debounce;
 80120c2:	7dc3      	ldrb	r3, [r0, #23]
 80120c4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80120c8:	f88d 3005 	strb.w	r3, [sp, #5]
                            in_config.inverted = !!(settings.ioport.invert_in.mask & (1 << xbar->id));
 80120cc:	4b1a      	ldr	r3, [pc, #104]	@ (8012138 <ioport_setting_changed+0x1d0>)
 80120ce:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 80120d2:	7802      	ldrb	r2, [r0, #0]
 80120d4:	4113      	asrs	r3, r2
 80120d6:	f003 0301 	and.w	r3, r3, #1
 80120da:	f88d 3004 	strb.w	r3, [sp, #4]
                            in_config.pull_mode = (pull_mode_t)xbar->mode.pull_mode;
 80120de:	7d83      	ldrb	r3, [r0, #22]
 80120e0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80120e4:	f88d 3006 	strb.w	r3, [sp, #6]
                            if((ctrl = xbar_fn_to_signals_mask(xbar->function)).mask) {
 80120e8:	7840      	ldrb	r0, [r0, #1]
 80120ea:	f7fa fbe7 	bl	800c8bc <xbar_fn_to_signals_mask>
 80120ee:	b280      	uxth	r0, r0
 80120f0:	b180      	cbz	r0, 8012114 <ioport_setting_changed+0x1ac>
                                in_config.inverted = !!(settings.control_invert.mask & ctrl.mask);
 80120f2:	4b11      	ldr	r3, [pc, #68]	@ (8012138 <ioport_setting_changed+0x1d0>)
 80120f4:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
 80120f8:	4210      	tst	r0, r2
 80120fa:	bf14      	ite	ne
 80120fc:	2201      	movne	r2, #1
 80120fe:	2200      	moveq	r2, #0
 8012100:	f88d 2004 	strb.w	r2, [sp, #4]
                                in_config.pull_mode = (settings.control_disable_pullup.mask & ctrl.mask) ? PullMode_None : PullMode_Up;
 8012104:	f8b3 306e 	ldrh.w	r3, [r3, #110]	@ 0x6e
 8012108:	4218      	tst	r0, r3
 801210a:	bf0c      	ite	eq
 801210c:	2301      	moveq	r3, #1
 801210e:	2300      	movne	r3, #0
 8012110:	f88d 3006 	strb.w	r3, [sp, #6]
                            if(in_config.inverted)
 8012114:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d0a8      	beq.n	801206e <ioport_setting_changed+0x106>
                                settings.ioport.invert_in.mask |= (1 << xbar->id);
 801211c:	4906      	ldr	r1, [pc, #24]	@ (8012138 <ioport_setting_changed+0x1d0>)
 801211e:	f891 3168 	ldrb.w	r3, [r1, #360]	@ 0x168
 8012122:	7828      	ldrb	r0, [r5, #0]
 8012124:	2201      	movs	r2, #1
 8012126:	4082      	lsls	r2, r0
 8012128:	4313      	orrs	r3, r2
 801212a:	f881 3168 	strb.w	r3, [r1, #360]	@ 0x168
 801212e:	e7a9      	b.n	8012084 <ioport_setting_changed+0x11c>
 8012130:	2000160c 	.word	0x2000160c
 8012134:	20001524 	.word	0x20001524
 8012138:	20001bc4 	.word	0x20001bc4
 801213c:	200011ac 	.word	0x200011ac

08012140 <ioports_add_settings>:

void ioports_add_settings (driver_settings_load_ptr settings_loaded, setting_changed_ptr setting_changed)
{
 8012140:	b508      	push	{r3, lr}
    if(settings_loaded)
 8012142:	b108      	cbz	r0, 8012148 <ioports_add_settings+0x8>
        on_settings_loaded = settings_loaded;
 8012144:	4a04      	ldr	r2, [pc, #16]	@ (8012158 <ioports_add_settings+0x18>)
 8012146:	6010      	str	r0, [r2, #0]

    if(setting_changed)
 8012148:	b109      	cbz	r1, 801214e <ioports_add_settings+0xe>
        on_setting_changed = setting_changed;
 801214a:	4b04      	ldr	r3, [pc, #16]	@ (801215c <ioports_add_settings+0x1c>)
 801214c:	6019      	str	r1, [r3, #0]

    settings_register(&setting_details);
 801214e:	4804      	ldr	r0, [pc, #16]	@ (8012160 <ioports_add_settings+0x20>)
 8012150:	f00a fb3a 	bl	801c7c8 <settings_register>
}
 8012154:	bd08      	pop	{r3, pc}
 8012156:	bf00      	nop
 8012158:	20001610 	.word	0x20001610
 801215c:	2000160c 	.word	0x2000160c
 8012160:	200001c4 	.word	0x200001c4

08012164 <homing_signals_select>:
    return state;
}

// Merge (bitwise or) home switch inputs (typically acquired from limits.min and limits.min2).
ISR_CODE static axes_signals_t ISR_FUNC(homing_signals_select)(home_signals_t signals, axes_signals_t auto_square, squaring_mode_t mode)
{
 8012164:	b082      	sub	sp, #8
 8012166:	f8ad 0004 	strh.w	r0, [sp, #4]
    axes_signals_t state;

    switch(mode) {
 801216a:	2a01      	cmp	r2, #1
 801216c:	d008      	beq.n	8012180 <homing_signals_select+0x1c>
 801216e:	2a02      	cmp	r2, #2
 8012170:	d00e      	beq.n	8012190 <homing_signals_select+0x2c>

        default:
            break;
    }

    state.mask = signals.a.mask | signals.b.mask;
 8012172:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8012176:	f89d 3005 	ldrb.w	r3, [sp, #5]

    return state;
}
 801217a:	4318      	orrs	r0, r3
 801217c:	b002      	add	sp, #8
 801217e:	4770      	bx	lr
            signals.a.mask &= ~auto_square.mask;
 8012180:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012184:	43c9      	mvns	r1, r1
 8012186:	b249      	sxtb	r1, r1
 8012188:	400b      	ands	r3, r1
 801218a:	f88d 3004 	strb.w	r3, [sp, #4]
            break;
 801218e:	e7f0      	b.n	8012172 <homing_signals_select+0xe>
            signals.b.mask &= ~auto_square.mask;
 8012190:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012194:	43c9      	mvns	r1, r1
 8012196:	b249      	sxtb	r1, r1
 8012198:	400b      	ands	r3, r1
 801219a:	f88d 3005 	strb.w	r3, [sp, #5]
            break;
 801219e:	e7e8      	b.n	8012172 <homing_signals_select+0xe>

080121a0 <get_homing_rate>:
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
}

static float get_homing_rate (axes_signals_t cycle, homing_mode_t mode)
{
    return mode == HomingMode_Locate ? settings.homing.feed_rate : settings.homing.seek_rate;
 80121a0:	2901      	cmp	r1, #1
 80121a2:	d003      	beq.n	80121ac <get_homing_rate+0xc>
 80121a4:	4b03      	ldr	r3, [pc, #12]	@ (80121b4 <get_homing_rate+0x14>)
 80121a6:	ed93 0a42 	vldr	s0, [r3, #264]	@ 0x108
}
 80121aa:	4770      	bx	lr
    return mode == HomingMode_Locate ? settings.homing.feed_rate : settings.homing.seek_rate;
 80121ac:	4b01      	ldr	r3, [pc, #4]	@ (80121b4 <get_homing_rate+0x14>)
 80121ae:	ed93 0a41 	vldr	s0, [r3, #260]	@ 0x104
 80121b2:	4770      	bx	lr
 80121b4:	20001bc4 	.word	0x20001bc4

080121b8 <check_travel_limits>:
static bool check_travel_limits (float *target, axes_signals_t axes, bool is_cartesian)
{
    bool failed = false;
    uint_fast8_t idx = N_AXIS;

    if(is_cartesian && (sys.homed.mask & axes.mask)) do {
 80121b8:	b3ca      	cbz	r2, 801222e <check_travel_limits+0x76>
{
 80121ba:	b510      	push	{r4, lr}
 80121bc:	4614      	mov	r4, r2
    if(is_cartesian && (sys.homed.mask & axes.mask)) do {
 80121be:	4b1e      	ldr	r3, [pc, #120]	@ (8012238 <check_travel_limits+0x80>)
 80121c0:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 80121c4:	fa5f fc81 	uxtb.w	ip, r1
 80121c8:	420a      	tst	r2, r1
 80121ca:	d02c      	beq.n	8012226 <check_travel_limits+0x6e>
    uint_fast8_t idx = N_AXIS;
 80121cc:	2303      	movs	r3, #3
 80121ce:	e000      	b.n	80121d2 <check_travel_limits+0x1a>
        idx--;
        if(bit_istrue(sys.homed.mask, bit(idx)) && bit_istrue(axes.mask, bit(idx)))
            failed = target[idx] < sys.work_envelope.min.values[idx] || target[idx] > sys.work_envelope.max.values[idx];
    } while(!failed && idx);
 80121d0:	b33b      	cbz	r3, 8012222 <check_travel_limits+0x6a>
        idx--;
 80121d2:	3b01      	subs	r3, #1
        if(bit_istrue(sys.homed.mask, bit(idx)) && bit_istrue(axes.mask, bit(idx)))
 80121d4:	fa22 f103 	lsr.w	r1, r2, r3
 80121d8:	f011 0f01 	tst.w	r1, #1
 80121dc:	d0f8      	beq.n	80121d0 <check_travel_limits+0x18>
 80121de:	fa2c f103 	lsr.w	r1, ip, r3
 80121e2:	f011 0f01 	tst.w	r1, #1
 80121e6:	d0f3      	beq.n	80121d0 <check_travel_limits+0x18>
            failed = target[idx] < sys.work_envelope.min.values[idx] || target[idx] > sys.work_envelope.max.values[idx];
 80121e8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80121ec:	edd1 7a00 	vldr	s15, [r1]
 80121f0:	f103 0e18 	add.w	lr, r3, #24
 80121f4:	4910      	ldr	r1, [pc, #64]	@ (8012238 <check_travel_limits+0x80>)
 80121f6:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80121fa:	ed91 7a01 	vldr	s14, [r1, #4]
 80121fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012206:	d40f      	bmi.n	8012228 <check_travel_limits+0x70>
 8012208:	f103 0e1a 	add.w	lr, r3, #26
 801220c:	490a      	ldr	r1, [pc, #40]	@ (8012238 <check_travel_limits+0x80>)
 801220e:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8012212:	ed91 7a02 	vldr	s14, [r1, #8]
 8012216:	eef4 7ac7 	vcmpe.f32	s15, s14
 801221a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801221e:	ddd7      	ble.n	80121d0 <check_travel_limits+0x18>
 8012220:	e002      	b.n	8012228 <check_travel_limits+0x70>
 8012222:	2400      	movs	r4, #0
 8012224:	e000      	b.n	8012228 <check_travel_limits+0x70>
    bool failed = false;
 8012226:	2400      	movs	r4, #0

    return is_cartesian && !failed;
 8012228:	b11c      	cbz	r4, 8012232 <check_travel_limits+0x7a>
 801222a:	2000      	movs	r0, #0
}
 801222c:	bd10      	pop	{r4, pc}
    return is_cartesian && !failed;
 801222e:	2000      	movs	r0, #0
}
 8012230:	4770      	bx	lr
    return is_cartesian && !failed;
 8012232:	2001      	movs	r0, #1
 8012234:	e7fa      	b.n	801222c <check_travel_limits+0x74>
 8012236:	bf00      	nop
 8012238:	2000148c 	.word	0x2000148c

0801223c <clip_3d_target>:

// Derived from code by Dimitrios Matthes & Vasileios Drakopoulos
// https://www.mdpi.com/1999-4893/16/4/201
static void clip_3d_target (coord_data_t *position, coord_data_t *target, work_envelope_t *envelope)
{
    float a = target->x - position->x;
 801223c:	edd1 5a00 	vldr	s11, [r1]
 8012240:	edd0 4a00 	vldr	s9, [r0]
 8012244:	ee35 6ae4 	vsub.f32	s12, s11, s9
    float b = target->y - position->y;
 8012248:	ed91 7a01 	vldr	s14, [r1, #4]
 801224c:	edd0 6a01 	vldr	s13, [r0, #4]
 8012250:	ee37 7a66 	vsub.f32	s14, s14, s13
    float c = target->z - position->z;
 8012254:	edd1 7a02 	vldr	s15, [r1, #8]
 8012258:	ed90 5a02 	vldr	s10, [r0, #8]
 801225c:	ee77 7ac5 	vsub.f32	s15, s15, s10

    if(target->x < envelope->min.x) {
 8012260:	ed92 5a00 	vldr	s10, [r2]
 8012264:	eef4 5ac5 	vcmpe.f32	s11, s10
 8012268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801226c:	d56e      	bpl.n	801234c <clip_3d_target+0x110>
        target->y = b / a * (envelope->min.x - position->x) + position->y;
 801226e:	eec7 5a06 	vdiv.f32	s11, s14, s12
 8012272:	ee35 5a64 	vsub.f32	s10, s10, s9
 8012276:	ee65 5a85 	vmul.f32	s11, s11, s10
 801227a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801227e:	edc1 6a01 	vstr	s13, [r1, #4]
        target->z = c / a * (envelope->min.x - position->x) + position->z;
 8012282:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8012286:	edd2 5a00 	vldr	s11, [r2]
 801228a:	ed90 5a00 	vldr	s10, [r0]
 801228e:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012292:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012296:	edd0 5a02 	vldr	s11, [r0, #8]
 801229a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801229e:	edc1 6a02 	vstr	s13, [r1, #8]
        target->x = envelope->min.x;
 80122a2:	6813      	ldr	r3, [r2, #0]
 80122a4:	600b      	str	r3, [r1, #0]
        target->y = b / a * (envelope->max.x - position->x) + position->y;
        target->z = c / a * (envelope->max.x - position->x) + position->z;
        target->x = envelope->max.x;
    }

    if(target->y < envelope->min.y) {
 80122a6:	edd1 6a01 	vldr	s13, [r1, #4]
 80122aa:	edd2 5a01 	vldr	s11, [r2, #4]
 80122ae:	eef4 6ae5 	vcmpe.f32	s13, s11
 80122b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122b6:	d56d      	bpl.n	8012394 <clip_3d_target+0x158>
        target->x = a / b * (envelope->min.y - position->y) + position->x;
 80122b8:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80122bc:	ed90 5a01 	vldr	s10, [r0, #4]
 80122c0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80122c4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80122c8:	edd0 5a00 	vldr	s11, [r0]
 80122cc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80122d0:	edc1 6a00 	vstr	s13, [r1]
        target->z = c / b * (envelope->min.y - position->y) + position->z;
 80122d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80122d8:	edd2 5a01 	vldr	s11, [r2, #4]
 80122dc:	ed90 5a01 	vldr	s10, [r0, #4]
 80122e0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80122e4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80122e8:	edd0 5a02 	vldr	s11, [r0, #8]
 80122ec:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80122f0:	edc1 6a02 	vstr	s13, [r1, #8]
        target->y = envelope->min.y;
 80122f4:	6853      	ldr	r3, [r2, #4]
 80122f6:	604b      	str	r3, [r1, #4]
        target->x = a / b * (envelope->max.y - position->y) + position->x;
        target->z = c / b * (envelope->max.y - position->y) + position->z;
        target->y = envelope->max.y;
    }

    if(target->z < envelope->min.z) {
 80122f8:	edd1 5a02 	vldr	s11, [r1, #8]
 80122fc:	edd2 6a02 	vldr	s13, [r2, #8]
 8012300:	eef4 5ae6 	vcmpe.f32	s11, s13
 8012304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012308:	d56c      	bpl.n	80123e4 <clip_3d_target+0x1a8>
        target->x = a / c * (envelope->min.z - position->z) + position->x;
 801230a:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801230e:	ed90 6a02 	vldr	s12, [r0, #8]
 8012312:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8012316:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801231a:	ed90 6a00 	vldr	s12, [r0]
 801231e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012322:	edc1 6a00 	vstr	s13, [r1]
        target->y = b / c * (envelope->min.z - position->z) + position->y;
 8012326:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801232a:	edd2 7a02 	vldr	s15, [r2, #8]
 801232e:	ed90 7a02 	vldr	s14, [r0, #8]
 8012332:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801233a:	ed90 7a01 	vldr	s14, [r0, #4]
 801233e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012342:	edc1 7a01 	vstr	s15, [r1, #4]
        target->z = envelope->min.z;
 8012346:	6893      	ldr	r3, [r2, #8]
 8012348:	608b      	str	r3, [r1, #8]
 801234a:	4770      	bx	lr
    } else if(target->x > envelope->max.x) {
 801234c:	ed92 5a03 	vldr	s10, [r2, #12]
 8012350:	eef4 5ac5 	vcmpe.f32	s11, s10
 8012354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012358:	dda5      	ble.n	80122a6 <clip_3d_target+0x6a>
        target->y = b / a * (envelope->max.x - position->x) + position->y;
 801235a:	eec7 5a06 	vdiv.f32	s11, s14, s12
 801235e:	ee35 5a64 	vsub.f32	s10, s10, s9
 8012362:	ee65 5a85 	vmul.f32	s11, s11, s10
 8012366:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801236a:	edc1 6a01 	vstr	s13, [r1, #4]
        target->z = c / a * (envelope->max.x - position->x) + position->z;
 801236e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8012372:	edd2 5a03 	vldr	s11, [r2, #12]
 8012376:	ed90 5a00 	vldr	s10, [r0]
 801237a:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801237e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012382:	edd0 5a02 	vldr	s11, [r0, #8]
 8012386:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801238a:	edc1 6a02 	vstr	s13, [r1, #8]
        target->x = envelope->max.x;
 801238e:	68d3      	ldr	r3, [r2, #12]
 8012390:	600b      	str	r3, [r1, #0]
 8012392:	e788      	b.n	80122a6 <clip_3d_target+0x6a>
    } else if(target->y > envelope->max.y) {
 8012394:	edd2 5a04 	vldr	s11, [r2, #16]
 8012398:	eef4 6ae5 	vcmpe.f32	s13, s11
 801239c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123a0:	ddaa      	ble.n	80122f8 <clip_3d_target+0xbc>
        target->x = a / b * (envelope->max.y - position->y) + position->x;
 80123a2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80123a6:	ed90 5a01 	vldr	s10, [r0, #4]
 80123aa:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80123ae:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80123b2:	edd0 5a00 	vldr	s11, [r0]
 80123b6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80123ba:	edc1 6a00 	vstr	s13, [r1]
        target->z = c / b * (envelope->max.y - position->y) + position->z;
 80123be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80123c2:	edd2 5a04 	vldr	s11, [r2, #16]
 80123c6:	ed90 5a01 	vldr	s10, [r0, #4]
 80123ca:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80123ce:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80123d2:	edd0 5a02 	vldr	s11, [r0, #8]
 80123d6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80123da:	edc1 6a02 	vstr	s13, [r1, #8]
        target->y = envelope->max.y;
 80123de:	6913      	ldr	r3, [r2, #16]
 80123e0:	604b      	str	r3, [r1, #4]
 80123e2:	e789      	b.n	80122f8 <clip_3d_target+0xbc>
    } else if(target->z > envelope->max.z) {
 80123e4:	edd2 6a05 	vldr	s13, [r2, #20]
 80123e8:	eef4 5ae6 	vcmpe.f32	s11, s13
 80123ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123f0:	dd1f      	ble.n	8012432 <clip_3d_target+0x1f6>
        target->x = a / c * (envelope->max.z - position->z) + position->x;
 80123f2:	eec6 5a27 	vdiv.f32	s11, s12, s15
 80123f6:	ed90 6a02 	vldr	s12, [r0, #8]
 80123fa:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80123fe:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8012402:	ed90 6a00 	vldr	s12, [r0]
 8012406:	ee76 6a86 	vadd.f32	s13, s13, s12
 801240a:	edc1 6a00 	vstr	s13, [r1]
        target->y = b / c * (envelope->max.z - position->z) + position->y;
 801240e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012412:	edd2 7a05 	vldr	s15, [r2, #20]
 8012416:	ed90 7a02 	vldr	s14, [r0, #8]
 801241a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801241e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012422:	ed90 7a01 	vldr	s14, [r0, #4]
 8012426:	ee77 7a87 	vadd.f32	s15, s15, s14
 801242a:	edc1 7a01 	vstr	s15, [r1, #4]
        target->z = envelope->max.z;
 801242e:	6953      	ldr	r3, [r2, #20]
 8012430:	608b      	str	r3, [r1, #8]
    }
}
 8012432:	4770      	bx	lr

08012434 <apply_jog_limits>:

// Limits jog commands to be within machine limits, homed axes only.
static void apply_jog_limits (float *target, float *position)
{
    if(sys.homed.mask == 0)
 8012434:	4b35      	ldr	r3, [pc, #212]	@ (801250c <apply_jog_limits+0xd8>)
 8012436:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 801243a:	2b00      	cmp	r3, #0
 801243c:	d064      	beq.n	8012508 <apply_jog_limits+0xd4>
{
 801243e:	b510      	push	{r4, lr}
 8012440:	4604      	mov	r4, r0
 8012442:	4608      	mov	r0, r1
        return;

    uint_fast8_t idx;

    if((sys.homed.mask & 0b111) == 0b111) {
 8012444:	f003 0307 	and.w	r3, r3, #7
 8012448:	2b07      	cmp	r3, #7
 801244a:	d001      	beq.n	8012450 <apply_jog_limits+0x1c>

        uint_fast8_t n_axes = 0;

        idx = Z_AXIS + 1;
 801244c:	2303      	movs	r3, #3
 801244e:	e025      	b.n	801249c <apply_jog_limits+0x68>
        uint_fast8_t n_axes = 0;
 8012450:	2200      	movs	r2, #0
        idx = Z_AXIS + 1;
 8012452:	2303      	movs	r3, #3
 8012454:	e002      	b.n	801245c <apply_jog_limits+0x28>
        do {
            idx--;
            if(fabs(target[idx] - position[idx]) > 0.001f)
                n_axes++;
        } while(idx && n_axes < 2);
 8012456:	b1bb      	cbz	r3, 8012488 <apply_jog_limits+0x54>
 8012458:	2a01      	cmp	r2, #1
 801245a:	d815      	bhi.n	8012488 <apply_jog_limits+0x54>
            idx--;
 801245c:	3b01      	subs	r3, #1
            if(fabs(target[idx] - position[idx]) > 0.001f)
 801245e:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8012462:	edd1 7a00 	vldr	s15, [r1]
 8012466:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801246a:	ed91 7a00 	vldr	s14, [r1]
 801246e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012472:	eef0 7ae7 	vabs.f32	s15, s15
 8012476:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8012510 <apply_jog_limits+0xdc>
 801247a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801247e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012482:	dde8      	ble.n	8012456 <apply_jog_limits+0x22>
                n_axes++;
 8012484:	3201      	adds	r2, #1
 8012486:	e7e6      	b.n	8012456 <apply_jog_limits+0x22>

        if(n_axes > 1)
 8012488:	2a01      	cmp	r2, #1
 801248a:	d9df      	bls.n	801244c <apply_jog_limits+0x18>
            clip_3d_target((coord_data_t *)position, (coord_data_t *)target, &sys.work_envelope);
 801248c:	4a21      	ldr	r2, [pc, #132]	@ (8012514 <apply_jog_limits+0xe0>)
 801248e:	4621      	mov	r1, r4
 8012490:	f7ff fed4 	bl	801223c <clip_3d_target>
 8012494:	e7da      	b.n	801244c <apply_jog_limits+0x18>

    idx = N_AXIS;
    do {
        idx--;
        if(bit_istrue(sys.homed.mask, bit(idx)) && settings.axis[idx].max_travel < -0.0f)
            target[idx] = max(min(target[idx], sys.work_envelope.max.values[idx]), sys.work_envelope.min.values[idx]);
 8012496:	edc0 7a00 	vstr	s15, [r0]
    } while(idx);
 801249a:	b3a3      	cbz	r3, 8012506 <apply_jog_limits+0xd2>
        idx--;
 801249c:	3b01      	subs	r3, #1
        if(bit_istrue(sys.homed.mask, bit(idx)) && settings.axis[idx].max_travel < -0.0f)
 801249e:	4a1b      	ldr	r2, [pc, #108]	@ (801250c <apply_jog_limits+0xd8>)
 80124a0:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80124a4:	40da      	lsrs	r2, r3
 80124a6:	f012 0f01 	tst.w	r2, #1
 80124aa:	d0f6      	beq.n	801249a <apply_jog_limits+0x66>
 80124ac:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80124b0:	4a19      	ldr	r2, [pc, #100]	@ (8012518 <apply_jog_limits+0xe4>)
 80124b2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80124b6:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 80124ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80124be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124c2:	d5ea      	bpl.n	801249a <apply_jog_limits+0x66>
            target[idx] = max(min(target[idx], sys.work_envelope.max.values[idx]), sys.work_envelope.min.values[idx]);
 80124c4:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 80124c8:	ed90 7a00 	vldr	s14, [r0]
 80124cc:	f103 011a 	add.w	r1, r3, #26
 80124d0:	4a0e      	ldr	r2, [pc, #56]	@ (801250c <apply_jog_limits+0xd8>)
 80124d2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80124d6:	edd2 7a02 	vldr	s15, [r2, #8]
 80124da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80124de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124e2:	d501      	bpl.n	80124e8 <apply_jog_limits+0xb4>
 80124e4:	eef0 7a47 	vmov.f32	s15, s14
 80124e8:	f103 0118 	add.w	r1, r3, #24
 80124ec:	4a07      	ldr	r2, [pc, #28]	@ (801250c <apply_jog_limits+0xd8>)
 80124ee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80124f2:	ed92 7a01 	vldr	s14, [r2, #4]
 80124f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80124fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124fe:	d4ca      	bmi.n	8012496 <apply_jog_limits+0x62>
 8012500:	eef0 7a47 	vmov.f32	s15, s14
 8012504:	e7c7      	b.n	8012496 <apply_jog_limits+0x62>
}
 8012506:	bd10      	pop	{r4, pc}
 8012508:	4770      	bx	lr
 801250a:	bf00      	nop
 801250c:	2000148c 	.word	0x2000148c
 8012510:	3a83126f 	.word	0x3a83126f
 8012514:	200014f0 	.word	0x200014f0
 8012518:	20001bc4 	.word	0x20001bc4

0801251c <limits_pull_off>:
{
 801251c:	b570      	push	{r4, r5, r6, lr}
 801251e:	ed2d 8b02 	vpush	{d8}
 8012522:	b08e      	sub	sp, #56	@ 0x38
 8012524:	4606      	mov	r6, r0
 8012526:	eeb0 8a40 	vmov.f32	s16, s0
    coord_data_t target = {0};
 801252a:	2400      	movs	r4, #0
 801252c:	940a      	str	r4, [sp, #40]	@ 0x28
 801252e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012530:	940c      	str	r4, [sp, #48]	@ 0x30
    plan_data_init(&plan_data);
 8012532:	4668      	mov	r0, sp
 8012534:	f004 f8b2 	bl	801669c <plan_data_init>
    plan_data.condition.system_motion = On;
 8012538:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801253c:	f043 0302 	orr.w	r3, r3, #2
 8012540:	f88d 3014 	strb.w	r3, [sp, #20]
    plan_data.condition.no_feed_override = On;
 8012544:	b2db      	uxtb	r3, r3
 8012546:	f043 0310 	orr.w	r3, r3, #16
 801254a:	f88d 3014 	strb.w	r3, [sp, #20]
    plan_data.line_number = DEFAULT_HOMING_CYCLE_LINE_NUMBER;
 801254e:	9407      	str	r4, [sp, #28]
    system_convert_array_steps_to_mpos(target.values, sys.position);
 8012550:	494a      	ldr	r1, [pc, #296]	@ (801267c <limits_pull_off+0x160>)
 8012552:	a80a      	add	r0, sp, #40	@ 0x28
 8012554:	f00e fff0 	bl	8021538 <system_convert_array_steps_to_mpos>
    uint_fast8_t n_axis = 0, idx = N_AXIS;
 8012558:	2303      	movs	r3, #3
 801255a:	e009      	b.n	8012570 <limits_pull_off+0x54>
                target.values[idx] -= distance;
 801255c:	aa0e      	add	r2, sp, #56	@ 0x38
 801255e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012562:	ed52 7a04 	vldr	s15, [r2, #-16]
 8012566:	ee77 7ac8 	vsub.f32	s15, s15, s16
 801256a:	ed42 7a04 	vstr	s15, [r2, #-16]
    } while(idx);
 801256e:	b1c3      	cbz	r3, 80125a2 <limits_pull_off+0x86>
        idx--;
 8012570:	3b01      	subs	r3, #1
        if(bit_istrue(axis.mask, bit(idx))) {
 8012572:	b2f5      	uxtb	r5, r6
 8012574:	fa25 f203 	lsr.w	r2, r5, r3
 8012578:	f012 0f01 	tst.w	r2, #1
 801257c:	d0f7      	beq.n	801256e <limits_pull_off+0x52>
            n_axis++;
 801257e:	3401      	adds	r4, #1
            if (bit_istrue(settings.homing.dir_mask.value, bit(idx)))
 8012580:	4a3f      	ldr	r2, [pc, #252]	@ (8012680 <limits_pull_off+0x164>)
 8012582:	f892 2110 	ldrb.w	r2, [r2, #272]	@ 0x110
 8012586:	40da      	lsrs	r2, r3
 8012588:	f012 0f01 	tst.w	r2, #1
 801258c:	d0e6      	beq.n	801255c <limits_pull_off+0x40>
                target.values[idx] += distance;
 801258e:	aa0e      	add	r2, sp, #56	@ 0x38
 8012590:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012594:	ed52 7a04 	vldr	s15, [r2, #-16]
 8012598:	ee77 7a88 	vadd.f32	s15, s15, s16
 801259c:	ed42 7a04 	vstr	s15, [r2, #-16]
 80125a0:	e7e5      	b.n	801256e <limits_pull_off+0x52>
    plan_data.feed_rate = settings.homing.seek_rate * sqrtf(n_axis); // Adjust so individual axes all move at pull-off rate.
 80125a2:	4b37      	ldr	r3, [pc, #220]	@ (8012680 <limits_pull_off+0x164>)
 80125a4:	ed93 8a42 	vldr	s16, [r3, #264]	@ 0x108
 80125a8:	ee07 4a90 	vmov	s15, r4
 80125ac:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80125b0:	f014 fcc6 	bl	8026f40 <sqrtf>
 80125b4:	ee28 8a00 	vmul.f32	s16, s16, s0
 80125b8:	ed8d 8a00 	vstr	s16, [sp]
    plan_data.condition.coolant = gc_state.modal.coolant;
 80125bc:	4b31      	ldr	r3, [pc, #196]	@ (8012684 <limits_pull_off+0x168>)
 80125be:	7e5a      	ldrb	r2, [r3, #25]
 80125c0:	f88d 2016 	strb.w	r2, [sp, #22]
    memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t));
 80125c4:	ac01      	add	r4, sp, #4
 80125c6:	3350      	adds	r3, #80	@ 0x50
 80125c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80125ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    plan_buffer_line(target.values, &plan_data);    // Bypass mc_line(). Directly plan homing motion.
 80125ce:	4669      	mov	r1, sp
 80125d0:	a80a      	add	r0, sp, #40	@ 0x28
 80125d2:	f003 fe27 	bl	8016224 <plan_buffer_line>
    sys.step_control.flags = 0;                 // Clear existing flags and
 80125d6:	4b2c      	ldr	r3, [pc, #176]	@ (8012688 <limits_pull_off+0x16c>)
 80125d8:	2200      	movs	r2, #0
 80125da:	761a      	strb	r2, [r3, #24]
    sys.step_control.execute_sys_motion = On;   // set to execute homing motion.
 80125dc:	2204      	movs	r2, #4
 80125de:	761a      	strb	r2, [r3, #24]
    sys.homing_axis_lock.mask = axis.mask;
 80125e0:	765e      	strb	r6, [r3, #25]
    st_prep_buffer();   // Prep and fill segment buffer from newly planned block.
 80125e2:	f00d f89d 	bl	801f720 <st_prep_buffer>
    st_wake_up();       // Initiate motion.
 80125e6:	f00c fda9 	bl	801f13c <st_wake_up>
 80125ea:	e009      	b.n	8012600 <limits_pull_off+0xe4>
                mc_reset(); // Stop motors, if they are running.
 80125ec:	f001 ff54 	bl	8014498 <mc_reset>
                protocol_execute_realtime();
 80125f0:	f004 fd20 	bl	8017034 <protocol_execute_realtime>
                return false;
 80125f4:	2000      	movs	r0, #0
 80125f6:	e03d      	b.n	8012674 <limits_pull_off+0x158>
        grbl.on_execute_realtime(STATE_HOMING);
 80125f8:	4b24      	ldr	r3, [pc, #144]	@ (801268c <limits_pull_off+0x170>)
 80125fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80125fc:	2004      	movs	r0, #4
 80125fe:	4798      	blx	r3
        st_prep_buffer(); // Check and prep segment buffer.
 8012600:	f00d f88e 	bl	801f720 <st_prep_buffer>
        if (sys.rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_COMPLETE)) {
 8012604:	4b20      	ldr	r3, [pc, #128]	@ (8012688 <limits_pull_off+0x16c>)
 8012606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012608:	f013 0f64 	tst.w	r3, #100	@ 0x64
 801260c:	d0f4      	beq.n	80125f8 <limits_pull_off+0xdc>
            uint_fast16_t rt_exec = sys.rt_exec_state;
 801260e:	4b1e      	ldr	r3, [pc, #120]	@ (8012688 <limits_pull_off+0x16c>)
 8012610:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
            if (rt_exec & EXEC_RESET)
 8012612:	f014 0f20 	tst.w	r4, #32
 8012616:	d004      	beq.n	8012622 <limits_pull_off+0x106>
                system_set_exec_alarm(Alarm_HomingFailReset);
 8012618:	4b1d      	ldr	r3, [pc, #116]	@ (8012690 <limits_pull_off+0x174>)
 801261a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801261c:	2106      	movs	r1, #6
 801261e:	481d      	ldr	r0, [pc, #116]	@ (8012694 <limits_pull_off+0x178>)
 8012620:	4798      	blx	r3
            if (rt_exec & EXEC_SAFETY_DOOR)
 8012622:	f014 0f40 	tst.w	r4, #64	@ 0x40
 8012626:	d004      	beq.n	8012632 <limits_pull_off+0x116>
                system_set_exec_alarm(Alarm_HomingFailDoor);
 8012628:	4b19      	ldr	r3, [pc, #100]	@ (8012690 <limits_pull_off+0x174>)
 801262a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801262c:	2107      	movs	r1, #7
 801262e:	4819      	ldr	r0, [pc, #100]	@ (8012694 <limits_pull_off+0x178>)
 8012630:	4798      	blx	r3
            if (homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask & axis.mask)
 8012632:	4b17      	ldr	r3, [pc, #92]	@ (8012690 <limits_pull_off+0x174>)
 8012634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012636:	4798      	blx	r3
 8012638:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 801263c:	2200      	movs	r2, #0
 801263e:	4611      	mov	r1, r2
 8012640:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8012642:	f7ff fd8f 	bl	8012164 <homing_signals_select>
 8012646:	4205      	tst	r5, r0
 8012648:	d004      	beq.n	8012654 <limits_pull_off+0x138>
                system_set_exec_alarm(Alarm_FailPulloff);
 801264a:	4b11      	ldr	r3, [pc, #68]	@ (8012690 <limits_pull_off+0x174>)
 801264c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801264e:	2108      	movs	r1, #8
 8012650:	4810      	ldr	r0, [pc, #64]	@ (8012694 <limits_pull_off+0x178>)
 8012652:	4798      	blx	r3
            if (sys.rt_exec_alarm) {
 8012654:	4b0c      	ldr	r3, [pc, #48]	@ (8012688 <limits_pull_off+0x16c>)
 8012656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012658:	2b00      	cmp	r3, #0
 801265a:	d1c7      	bne.n	80125ec <limits_pull_off+0xd0>
                system_clear_exec_state_flag(EXEC_CYCLE_COMPLETE);
 801265c:	4b0c      	ldr	r3, [pc, #48]	@ (8012690 <limits_pull_off+0x174>)
 801265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012660:	4c0d      	ldr	r4, [pc, #52]	@ (8012698 <limits_pull_off+0x17c>)
 8012662:	2104      	movs	r1, #4
 8012664:	4620      	mov	r0, r4
 8012666:	4798      	blx	r3
    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 8012668:	f00c ff30 	bl	801f4cc <st_reset>
    sys.step_control.flags = 0; // Return step control to normal operation.
 801266c:	2300      	movs	r3, #0
 801266e:	f804 3c30 	strb.w	r3, [r4, #-48]
    return true; // Note: failure is returned above if move fails.
 8012672:	2001      	movs	r0, #1
}
 8012674:	b00e      	add	sp, #56	@ 0x38
 8012676:	ecbd 8b02 	vpop	{d8}
 801267a:	bd70      	pop	{r4, r5, r6, pc}
 801267c:	20001514 	.word	0x20001514
 8012680:	20001bc4 	.word	0x20001bc4
 8012684:	20000ee4 	.word	0x20000ee4
 8012688:	2000148c 	.word	0x2000148c
 801268c:	20001394 	.word	0x20001394
 8012690:	200011ac 	.word	0x200011ac
 8012694:	200014d8 	.word	0x200014d8
 8012698:	200014d4 	.word	0x200014d4

0801269c <check_arc_travel_limits>:
{
 801269c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80126a0:	ed2d 8b02 	vpush	{d8}
 80126a4:	b08f      	sub	sp, #60	@ 0x3c
 80126a6:	4604      	mov	r4, r0
 80126a8:	9201      	str	r2, [sp, #4]
 80126aa:	461e      	mov	r6, r3
 80126ac:	ed8d 0a02 	vstr	s0, [sp, #8]
 80126b0:	edcd 0a03 	vstr	s1, [sp, #12]
    if((sys.soft_limits.mask & xyz.mask) == 0)
 80126b4:	4bcd      	ldr	r3, [pc, #820]	@ (80129ec <check_arc_travel_limits+0x350>)
 80126b6:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80126ba:	f013 0f07 	tst.w	r3, #7
 80126be:	f000 8097 	beq.w	80127f0 <check_arc_travel_limits+0x154>
 80126c2:	460d      	mov	r5, r1
 80126c4:	eeb0 8a41 	vmov.f32	s16, s2
    arc_x_t x = {0};
 80126c8:	2700      	movs	r7, #0
    if(turns > 0) { // CCW
 80126ca:	42be      	cmp	r6, r7
 80126cc:	f340 8099 	ble.w	8012802 <check_arc_travel_limits+0x166>
        start.x = position->values[plane.axis_0] - center.x;
 80126d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80126d4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80126d8:	edd3 7a00 	vldr	s15, [r3]
 80126dc:	eddd 6a02 	vldr	s13, [sp, #8]
 80126e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80126e4:	edcd 7a0c 	vstr	s15, [sp, #48]	@ 0x30
        start.y = position->values[plane.axis_1] - center.y;
 80126e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80126ec:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80126f0:	edd1 7a00 	vldr	s15, [r1]
 80126f4:	ed9d 7a03 	vldr	s14, [sp, #12]
 80126f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80126fc:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
        end.x = target->values[plane.axis_0] - center.x;
 8012700:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8012704:	edd2 7a00 	vldr	s15, [r2]
 8012708:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801270c:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
        end.y = target->values[plane.axis_1] - center.y;
 8012710:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012714:	edd3 7a00 	vldr	s15, [r3]
 8012718:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801271c:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
    if(labs(turns > 1))
 8012720:	2e01      	cmp	r6, #1
 8012722:	f340 8097 	ble.w	8012854 <check_arc_travel_limits+0x1b8>
        x.value = 0b1111;                   // Crosses all
 8012726:	270f      	movs	r7, #15
    memcpy(&corner1, turns > 0 ? position : target, sizeof(coord_data_t));
 8012728:	2e00      	cmp	r6, #0
 801272a:	f340 8134 	ble.w	8012996 <check_arc_travel_limits+0x2fa>
 801272e:	462a      	mov	r2, r5
 8012730:	ab07      	add	r3, sp, #28
 8012732:	6810      	ldr	r0, [r2, #0]
 8012734:	6851      	ldr	r1, [r2, #4]
 8012736:	6892      	ldr	r2, [r2, #8]
 8012738:	c307      	stmia	r3!, {r0, r1, r2}
    corner1.values[plane.axis_0] = x.neg_x ? center.x - radius : min(position->values[plane.axis_0], target->values[plane.axis_0]);
 801273a:	fa5f f887 	uxtb.w	r8, r7
 801273e:	f017 0f02 	tst.w	r7, #2
 8012742:	f000 812a 	beq.w	801299a <check_arc_travel_limits+0x2fe>
 8012746:	eddd 7a02 	vldr	s15, [sp, #8]
 801274a:	ee77 7ac8 	vsub.f32	s15, s15, s16
 801274e:	f89d 9004 	ldrb.w	r9, [sp, #4]
 8012752:	ab0e      	add	r3, sp, #56	@ 0x38
 8012754:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8012758:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
    corner1.values[plane.axis_1] = x.neg_y ? center.y - radius : max(position->values[plane.axis_1], target->values[plane.axis_1]);
 801275c:	f018 0f04 	tst.w	r8, #4
 8012760:	f000 812e 	beq.w	80129c0 <check_arc_travel_limits+0x324>
 8012764:	eddd 7a03 	vldr	s15, [sp, #12]
 8012768:	ee77 7ac8 	vsub.f32	s15, s15, s16
 801276c:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8012770:	ab0e      	add	r3, sp, #56	@ 0x38
 8012772:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8012776:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
    if(!grbl.check_travel_limits(corner1.values, sys.soft_limits, true))
 801277a:	4b9d      	ldr	r3, [pc, #628]	@ (80129f0 <check_arc_travel_limits+0x354>)
 801277c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012780:	2201      	movs	r2, #1
 8012782:	499a      	ldr	r1, [pc, #616]	@ (80129ec <check_arc_travel_limits+0x350>)
 8012784:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 8012788:	a807      	add	r0, sp, #28
 801278a:	4798      	blx	r3
 801278c:	b358      	cbz	r0, 80127e6 <check_arc_travel_limits+0x14a>
    memcpy(&corner2, turns > 0 ? target : position, sizeof(coord_data_t));
 801278e:	2e00      	cmp	r6, #0
 8012790:	f340 8129 	ble.w	80129e6 <check_arc_travel_limits+0x34a>
 8012794:	4622      	mov	r2, r4
 8012796:	ab04      	add	r3, sp, #16
 8012798:	6810      	ldr	r0, [r2, #0]
 801279a:	6851      	ldr	r1, [r2, #4]
 801279c:	6892      	ldr	r2, [r2, #8]
 801279e:	c307      	stmia	r3!, {r0, r1, r2}
    corner2.values[plane.axis_0] = x.pos_x ? center.x + radius : max(position->values[plane.axis_0], target->values[plane.axis_0]);
 80127a0:	f018 0f08 	tst.w	r8, #8
 80127a4:	f000 8126 	beq.w	80129f4 <check_arc_travel_limits+0x358>
 80127a8:	eddd 7a02 	vldr	s15, [sp, #8]
 80127ac:	ee77 7a88 	vadd.f32	s15, s15, s16
 80127b0:	ab0e      	add	r3, sp, #56	@ 0x38
 80127b2:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80127b6:	ed43 7a0a 	vstr	s15, [r3, #-40]	@ 0xffffffd8
    corner2.values[plane.axis_1] = x.pos_y ? center.y + radius : min(position->values[plane.axis_1], target->values[plane.axis_1]);
 80127ba:	f018 0f01 	tst.w	r8, #1
 80127be:	f000 812a 	beq.w	8012a16 <check_arc_travel_limits+0x37a>
 80127c2:	eddd 7a03 	vldr	s15, [sp, #12]
 80127c6:	ee77 7a88 	vadd.f32	s15, s15, s16
 80127ca:	ab0e      	add	r3, sp, #56	@ 0x38
 80127cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80127d0:	ed47 7a0a 	vstr	s15, [r7, #-40]	@ 0xffffffd8
   return grbl.check_travel_limits(corner2.values, sys.soft_limits, true);
 80127d4:	4b86      	ldr	r3, [pc, #536]	@ (80129f0 <check_arc_travel_limits+0x354>)
 80127d6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80127da:	2201      	movs	r2, #1
 80127dc:	4983      	ldr	r1, [pc, #524]	@ (80129ec <check_arc_travel_limits+0x350>)
 80127de:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 80127e2:	a804      	add	r0, sp, #16
 80127e4:	4798      	blx	r3
}
 80127e6:	b00f      	add	sp, #60	@ 0x3c
 80127e8:	ecbd 8b02 	vpop	{d8}
 80127ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return grbl.check_travel_limits(target->values, sys.soft_limits, true);
 80127f0:	4b7f      	ldr	r3, [pc, #508]	@ (80129f0 <check_arc_travel_limits+0x354>)
 80127f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80127f6:	2201      	movs	r2, #1
 80127f8:	497c      	ldr	r1, [pc, #496]	@ (80129ec <check_arc_travel_limits+0x350>)
 80127fa:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 80127fe:	4798      	blx	r3
 8012800:	e7f1      	b.n	80127e6 <check_arc_travel_limits+0x14a>
        start.x = target->values[plane.axis_0] - center.x;
 8012802:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012806:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 801280a:	edd3 7a00 	vldr	s15, [r3]
 801280e:	eddd 6a02 	vldr	s13, [sp, #8]
 8012812:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012816:	edcd 7a0c 	vstr	s15, [sp, #48]	@ 0x30
        start.y = target->values[plane.axis_1] - center.y;
 801281a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801281e:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8012822:	edd1 7a00 	vldr	s15, [r1]
 8012826:	ed9d 7a03 	vldr	s14, [sp, #12]
 801282a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801282e:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
        end.x = position->values[plane.axis_0] - center.x;
 8012832:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8012836:	edd2 7a00 	vldr	s15, [r2]
 801283a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801283e:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
        end.y = position->values[plane.axis_1] - center.y;
 8012842:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012846:	edd3 7a00 	vldr	s15, [r3]
 801284a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801284e:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 8012852:	e765      	b.n	8012720 <check_arc_travel_limits+0x84>
    else if(start.y >= 0.0f) {
 8012854:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 8012858:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801285c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012860:	db4c      	blt.n	80128fc <check_arc_travel_limits+0x260>
        if(start.x > 0.0f) {                // Starts in Q1
 8012862:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8012866:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801286e:	dd22      	ble.n	80128b6 <check_arc_travel_limits+0x21a>
            if(end.y >= 0.0f) {
 8012870:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 8012874:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801287c:	db10      	blt.n	80128a0 <check_arc_travel_limits+0x204>
                if(end.x <= 0.0f)
 801287e:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 8012882:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801288a:	d907      	bls.n	801289c <check_arc_travel_limits+0x200>
                else if(end.x >= start.x)
 801288c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012894:	f63f af48 	bhi.w	8012728 <check_arc_travel_limits+0x8c>
                    x.value = 0b1111;       // Ends in Q1, crosses all
 8012898:	270f      	movs	r7, #15
 801289a:	e745      	b.n	8012728 <check_arc_travel_limits+0x8c>
                    x.value = 0b0001;       // Ends in Q2
 801289c:	2701      	movs	r7, #1
 801289e:	e743      	b.n	8012728 <check_arc_travel_limits+0x8c>
            } else if(end.x <= 0.0f)
 80128a0:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 80128a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80128a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128ac:	d901      	bls.n	80128b2 <check_arc_travel_limits+0x216>
                x.value = 0b0111;           // Ends in Q4
 80128ae:	2707      	movs	r7, #7
 80128b0:	e73a      	b.n	8012728 <check_arc_travel_limits+0x8c>
                x.value = 0b0011;           // Ends in Q3
 80128b2:	2703      	movs	r7, #3
 80128b4:	e738      	b.n	8012728 <check_arc_travel_limits+0x8c>
            if(end.y >= 0.0f) {
 80128b6:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 80128ba:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80128be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128c2:	db10      	blt.n	80128e6 <check_arc_travel_limits+0x24a>
                if(end.x > 0.0f)
 80128c4:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 80128c8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80128cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128d0:	dd01      	ble.n	80128d6 <check_arc_travel_limits+0x23a>
                    x.value = 0b1110;       // Ends in Q1
 80128d2:	270e      	movs	r7, #14
 80128d4:	e728      	b.n	8012728 <check_arc_travel_limits+0x8c>
                else if(end.x >= start.x)
 80128d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80128da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128de:	f63f af23 	bhi.w	8012728 <check_arc_travel_limits+0x8c>
                    x.value = 0b1111;       // Ends in Q2, crosses all
 80128e2:	270f      	movs	r7, #15
 80128e4:	e720      	b.n	8012728 <check_arc_travel_limits+0x8c>
            } else if(end.x <= 0.0f)
 80128e6:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 80128ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80128ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128f2:	d901      	bls.n	80128f8 <check_arc_travel_limits+0x25c>
                x.value = 0b0110;           // Ends in Q4
 80128f4:	2706      	movs	r7, #6
 80128f6:	e717      	b.n	8012728 <check_arc_travel_limits+0x8c>
                x.value = 0b0010;           // Ends in Q3
 80128f8:	2702      	movs	r7, #2
 80128fa:	e715      	b.n	8012728 <check_arc_travel_limits+0x8c>
    } else if(start.x < 0.0f) {             // Starts in Q3
 80128fc:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8012900:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012908:	d40f      	bmi.n	801292a <check_arc_travel_limits+0x28e>
        if(end.y < 0.0f) {
 801290a:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 801290e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012916:	d42b      	bmi.n	8012970 <check_arc_travel_limits+0x2d4>
        } else if(end.x > 0.0f)
 8012918:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 801291c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012924:	dd35      	ble.n	8012992 <check_arc_travel_limits+0x2f6>
            x.value = 0b1000;               // Ends in Q1
 8012926:	2708      	movs	r7, #8
 8012928:	e6fe      	b.n	8012728 <check_arc_travel_limits+0x8c>
        if(end.y < 0.0f) {
 801292a:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 801292e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012936:	d408      	bmi.n	801294a <check_arc_travel_limits+0x2ae>
        } else if(end.x > 0.0f)
 8012938:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 801293c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012944:	dd12      	ble.n	801296c <check_arc_travel_limits+0x2d0>
            x.value = 0b1100;               // Ends in Q1
 8012946:	270c      	movs	r7, #12
 8012948:	e6ee      	b.n	8012728 <check_arc_travel_limits+0x8c>
            if(end.x > 0.0f)
 801294a:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 801294e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012956:	dd01      	ble.n	801295c <check_arc_travel_limits+0x2c0>
                x.value = 0b0100;           // Ends in Q4
 8012958:	2704      	movs	r7, #4
 801295a:	e6e5      	b.n	8012728 <check_arc_travel_limits+0x8c>
            else if(end.x <= start.x)
 801295c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012964:	f6ff aee0 	blt.w	8012728 <check_arc_travel_limits+0x8c>
                x.value = 0b1111;           // Ends in Q3, crosses all
 8012968:	270f      	movs	r7, #15
 801296a:	e6dd      	b.n	8012728 <check_arc_travel_limits+0x8c>
            x.value = 0b1101;               // Ends in Q2
 801296c:	270d      	movs	r7, #13
 801296e:	e6db      	b.n	8012728 <check_arc_travel_limits+0x8c>
            if(end.x < 0.0f)
 8012970:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 8012974:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801297c:	d407      	bmi.n	801298e <check_arc_travel_limits+0x2f2>
            else if(end.x <= start.x)
 801297e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012986:	f6ff aecf 	blt.w	8012728 <check_arc_travel_limits+0x8c>
                x.value = 0b1111;           // Ends in Q4, crosses all
 801298a:	270f      	movs	r7, #15
 801298c:	e6cc      	b.n	8012728 <check_arc_travel_limits+0x8c>
                x.value = 0b1011;           // Ends in Q3
 801298e:	270b      	movs	r7, #11
 8012990:	e6ca      	b.n	8012728 <check_arc_travel_limits+0x8c>
            x.value = 0b1001;               // Ends in Q2
 8012992:	2709      	movs	r7, #9
 8012994:	e6c8      	b.n	8012728 <check_arc_travel_limits+0x8c>
    memcpy(&corner1, turns > 0 ? position : target, sizeof(coord_data_t));
 8012996:	4622      	mov	r2, r4
 8012998:	e6ca      	b.n	8012730 <check_arc_travel_limits+0x94>
    corner1.values[plane.axis_0] = x.neg_x ? center.x - radius : min(position->values[plane.axis_0], target->values[plane.axis_0]);
 801299a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801299e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80129a2:	ed92 7a00 	vldr	s14, [r2]
 80129a6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80129aa:	edd3 7a00 	vldr	s15, [r3]
 80129ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80129b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129b6:	f57f aeca 	bpl.w	801274e <check_arc_travel_limits+0xb2>
 80129ba:	eef0 7a47 	vmov.f32	s15, s14
 80129be:	e6c6      	b.n	801274e <check_arc_travel_limits+0xb2>
    corner1.values[plane.axis_1] = x.neg_y ? center.y - radius : max(position->values[plane.axis_1], target->values[plane.axis_1]);
 80129c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80129c4:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80129c8:	ed92 7a00 	vldr	s14, [r2]
 80129cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80129d0:	edd3 7a00 	vldr	s15, [r3]
 80129d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80129d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129dc:	f77f aec6 	ble.w	801276c <check_arc_travel_limits+0xd0>
 80129e0:	eef0 7a47 	vmov.f32	s15, s14
 80129e4:	e6c2      	b.n	801276c <check_arc_travel_limits+0xd0>
    memcpy(&corner2, turns > 0 ? target : position, sizeof(coord_data_t));
 80129e6:	462a      	mov	r2, r5
 80129e8:	e6d5      	b.n	8012796 <check_arc_travel_limits+0xfa>
 80129ea:	bf00      	nop
 80129ec:	2000148c 	.word	0x2000148c
 80129f0:	20001394 	.word	0x20001394
    corner2.values[plane.axis_0] = x.pos_x ? center.x + radius : max(position->values[plane.axis_0], target->values[plane.axis_0]);
 80129f4:	eb05 0389 	add.w	r3, r5, r9, lsl #2
 80129f8:	ed93 7a00 	vldr	s14, [r3]
 80129fc:	eb04 0389 	add.w	r3, r4, r9, lsl #2
 8012a00:	edd3 7a00 	vldr	s15, [r3]
 8012a04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a0c:	f77f aed0 	ble.w	80127b0 <check_arc_travel_limits+0x114>
 8012a10:	eef0 7a47 	vmov.f32	s15, s14
 8012a14:	e6cc      	b.n	80127b0 <check_arc_travel_limits+0x114>
    corner2.values[plane.axis_1] = x.pos_y ? center.y + radius : min(position->values[plane.axis_1], target->values[plane.axis_1]);
 8012a16:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8012a1a:	ed95 7a00 	vldr	s14, [r5]
 8012a1e:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8012a22:	edd4 7a00 	vldr	s15, [r4]
 8012a26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a2e:	f57f aecc 	bpl.w	80127ca <check_arc_travel_limits+0x12e>
 8012a32:	eef0 7a47 	vmov.f32	s15, s14
 8012a36:	e6c8      	b.n	80127ca <check_arc_travel_limits+0x12e>

08012a38 <limit_signals_merge>:
{
 8012a38:	b082      	sub	sp, #8
 8012a3a:	9001      	str	r0, [sp, #4]
    state.mask = signals.min.mask | signals.min2.mask | signals.max.mask | signals.max2.mask;
 8012a3c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012a40:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8012a44:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012a48:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012a4c:	430a      	orrs	r2, r1
 8012a4e:	4313      	orrs	r3, r2
}
 8012a50:	4318      	orrs	r0, r3
 8012a52:	b002      	add	sp, #8
 8012a54:	4770      	bx	lr
	...

08012a58 <limit_interrupt_handler>:
{
 8012a58:	b500      	push	{lr}
 8012a5a:	b083      	sub	sp, #12
 8012a5c:	9001      	str	r0, [sp, #4]
    memcpy(&sys.last_event.limits, &state, sizeof(limit_signals_t));
 8012a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8012a8c <limit_interrupt_handler+0x34>)
 8012a60:	f8c3 0082 	str.w	r0, [r3, #130]	@ 0x82
    if (!(state_get() & (STATE_ALARM|STATE_ESTOP)) && !sys.rt_exec_alarm) {
 8012a64:	f00b fe4e 	bl	801e704 <state_get>
 8012a68:	f240 1301 	movw	r3, #257	@ 0x101
 8012a6c:	4218      	tst	r0, r3
 8012a6e:	d102      	bne.n	8012a76 <limit_interrupt_handler+0x1e>
 8012a70:	4b06      	ldr	r3, [pc, #24]	@ (8012a8c <limit_interrupt_handler+0x34>)
 8012a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012a74:	b113      	cbz	r3, 8012a7c <limit_interrupt_handler+0x24>
}
 8012a76:	b003      	add	sp, #12
 8012a78:	f85d fb04 	ldr.w	pc, [sp], #4
        mc_reset(); // Initiate system kill.
 8012a7c:	f001 fd0c 	bl	8014498 <mc_reset>
        system_set_exec_alarm(Alarm_HardLimit); // Indicate hard limit critical event
 8012a80:	4b03      	ldr	r3, [pc, #12]	@ (8012a90 <limit_interrupt_handler+0x38>)
 8012a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a84:	2101      	movs	r1, #1
 8012a86:	4803      	ldr	r0, [pc, #12]	@ (8012a94 <limit_interrupt_handler+0x3c>)
 8012a88:	4798      	blx	r3
}
 8012a8a:	e7f4      	b.n	8012a76 <limit_interrupt_handler+0x1e>
 8012a8c:	2000148c 	.word	0x2000148c
 8012a90:	200011ac 	.word	0x200011ac
 8012a94:	200014d8 	.word	0x200014d8

08012a98 <limits_set_work_envelope>:
    uint_fast8_t idx = N_AXIS;
 8012a98:	2303      	movs	r3, #3
 8012a9a:	e067      	b.n	8012b6c <limits_set_work_envelope+0xd4>
            float pulloff = settings.limits.flags.hard_enabled && bit_istrue(sys.homing.mask, bit(idx)) ? settings.homing.pulloff : 0.0f;
 8012a9c:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8012ba0 <limits_set_work_envelope+0x108>
            if(settings.homing.flags.force_set_origin) {
 8012aa0:	4a40      	ldr	r2, [pc, #256]	@ (8012ba4 <limits_set_work_envelope+0x10c>)
 8012aa2:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 8012aa6:	f012 0f08 	tst.w	r2, #8
 8012aaa:	d039      	beq.n	8012b20 <limits_set_work_envelope+0x88>
                if(bit_isfalse(settings.homing.dir_mask.value, bit(idx))) {
 8012aac:	4a3d      	ldr	r2, [pc, #244]	@ (8012ba4 <limits_set_work_envelope+0x10c>)
 8012aae:	f892 2110 	ldrb.w	r2, [r2, #272]	@ 0x110
 8012ab2:	40da      	lsrs	r2, r3
 8012ab4:	f012 0f01 	tst.w	r2, #1
 8012ab8:	d119      	bne.n	8012aee <limits_set_work_envelope+0x56>
                    sys.work_envelope.min.values[idx] = settings.axis[idx].max_travel + pulloff;
 8012aba:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012abe:	0091      	lsls	r1, r2, #2
 8012ac0:	4a38      	ldr	r2, [pc, #224]	@ (8012ba4 <limits_set_work_envelope+0x10c>)
 8012ac2:	440a      	add	r2, r1
 8012ac4:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 8012ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012acc:	4a36      	ldr	r2, [pc, #216]	@ (8012ba8 <limits_set_work_envelope+0x110>)
 8012ace:	f103 0118 	add.w	r1, r3, #24
 8012ad2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8012ad6:	edc1 7a01 	vstr	s15, [r1, #4]
                    sys.work_envelope.max.values[idx] = 0.0f;
 8012ada:	f103 011a 	add.w	r1, r3, #26
 8012ade:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012ae2:	2100      	movs	r1, #0
 8012ae4:	6091      	str	r1, [r2, #8]
 8012ae6:	e040      	b.n	8012b6a <limits_set_work_envelope+0xd2>
            float pulloff = settings.limits.flags.hard_enabled && bit_istrue(sys.homing.mask, bit(idx)) ? settings.homing.pulloff : 0.0f;
 8012ae8:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8012ba0 <limits_set_work_envelope+0x108>
 8012aec:	e7d8      	b.n	8012aa0 <limits_set_work_envelope+0x8>
                    sys.work_envelope.min.values[idx] = 0.0f;
 8012aee:	4a2e      	ldr	r2, [pc, #184]	@ (8012ba8 <limits_set_work_envelope+0x110>)
 8012af0:	f103 0118 	add.w	r1, r3, #24
 8012af4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8012af8:	2000      	movs	r0, #0
 8012afa:	6048      	str	r0, [r1, #4]
                    sys.work_envelope.max.values[idx] = - (settings.axis[idx].max_travel + pulloff);
 8012afc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8012b00:	0088      	lsls	r0, r1, #2
 8012b02:	4928      	ldr	r1, [pc, #160]	@ (8012ba4 <limits_set_work_envelope+0x10c>)
 8012b04:	4401      	add	r1, r0
 8012b06:	ed91 7a0f 	vldr	s14, [r1, #60]	@ 0x3c
 8012b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b0e:	eef1 7a67 	vneg.f32	s15, s15
 8012b12:	f103 011a 	add.w	r1, r3, #26
 8012b16:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012b1a:	edc2 7a02 	vstr	s15, [r2, #8]
 8012b1e:	e024      	b.n	8012b6a <limits_set_work_envelope+0xd2>
                sys.work_envelope.min.values[idx] = settings.axis[idx].max_travel + pulloff;
 8012b20:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012b24:	0091      	lsls	r1, r2, #2
 8012b26:	4a1f      	ldr	r2, [pc, #124]	@ (8012ba4 <limits_set_work_envelope+0x10c>)
 8012b28:	440a      	add	r2, r1
 8012b2a:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 8012b2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b32:	4a1d      	ldr	r2, [pc, #116]	@ (8012ba8 <limits_set_work_envelope+0x110>)
 8012b34:	f103 0118 	add.w	r1, r3, #24
 8012b38:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8012b3c:	ed81 7a01 	vstr	s14, [r1, #4]
                sys.work_envelope.max.values[idx] = - pulloff;
 8012b40:	eef1 7a67 	vneg.f32	s15, s15
 8012b44:	f103 011a 	add.w	r1, r3, #26
 8012b48:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012b4c:	edc2 7a02 	vstr	s15, [r2, #8]
 8012b50:	e00b      	b.n	8012b6a <limits_set_work_envelope+0xd2>
            sys.work_envelope.min.values[idx] = sys.work_envelope.max.values[idx] = 0.0f;
 8012b52:	4a15      	ldr	r2, [pc, #84]	@ (8012ba8 <limits_set_work_envelope+0x110>)
 8012b54:	f103 011a 	add.w	r1, r3, #26
 8012b58:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8012b5c:	2000      	movs	r0, #0
 8012b5e:	6088      	str	r0, [r1, #8]
 8012b60:	f103 0118 	add.w	r1, r3, #24
 8012b64:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012b68:	6050      	str	r0, [r2, #4]
    } while(idx);
 8012b6a:	b1bb      	cbz	r3, 8012b9c <limits_set_work_envelope+0x104>
        if(sys.homed.mask & bit(--idx)) {
 8012b6c:	4a0e      	ldr	r2, [pc, #56]	@ (8012ba8 <limits_set_work_envelope+0x110>)
 8012b6e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8012b72:	3b01      	subs	r3, #1
 8012b74:	40da      	lsrs	r2, r3
 8012b76:	f012 0f01 	tst.w	r2, #1
 8012b7a:	d0ea      	beq.n	8012b52 <limits_set_work_envelope+0xba>
            float pulloff = settings.limits.flags.hard_enabled && bit_istrue(sys.homing.mask, bit(idx)) ? settings.homing.pulloff : 0.0f;
 8012b7c:	4a09      	ldr	r2, [pc, #36]	@ (8012ba4 <limits_set_work_envelope+0x10c>)
 8012b7e:	f892 2124 	ldrb.w	r2, [r2, #292]	@ 0x124
 8012b82:	f012 0f01 	tst.w	r2, #1
 8012b86:	d089      	beq.n	8012a9c <limits_set_work_envelope+0x4>
 8012b88:	4a07      	ldr	r2, [pc, #28]	@ (8012ba8 <limits_set_work_envelope+0x110>)
 8012b8a:	7e92      	ldrb	r2, [r2, #26]
 8012b8c:	40da      	lsrs	r2, r3
 8012b8e:	f012 0f01 	tst.w	r2, #1
 8012b92:	d0a9      	beq.n	8012ae8 <limits_set_work_envelope+0x50>
 8012b94:	4a03      	ldr	r2, [pc, #12]	@ (8012ba4 <limits_set_work_envelope+0x10c>)
 8012b96:	edd2 7a43 	vldr	s15, [r2, #268]	@ 0x10c
 8012b9a:	e781      	b.n	8012aa0 <limits_set_work_envelope+0x8>
}
 8012b9c:	4770      	bx	lr
 8012b9e:	bf00      	nop
 8012ba0:	00000000 	.word	0x00000000
 8012ba4:	20001bc4 	.word	0x20001bc4
 8012ba8:	2000148c 	.word	0x2000148c

08012bac <limits_set_machine_positions>:
{
 8012bac:	b570      	push	{r4, r5, r6, lr}
 8012bae:	ed2d 8b02 	vpush	{d8}
 8012bb2:	4605      	mov	r5, r0
    float pulloff = add_pulloff ? settings.homing.pulloff : -0.0f;
 8012bb4:	b119      	cbz	r1, 8012bbe <limits_set_machine_positions+0x12>
 8012bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8012c64 <limits_set_machine_positions+0xb8>)
 8012bb8:	ed93 8a43 	vldr	s16, [r3, #268]	@ 0x10c
 8012bbc:	e001      	b.n	8012bc2 <limits_set_machine_positions+0x16>
 8012bbe:	ed9f 8a2a 	vldr	s16, [pc, #168]	@ 8012c68 <limits_set_machine_positions+0xbc>
    if(settings.homing.flags.force_set_origin) {
 8012bc2:	4b28      	ldr	r3, [pc, #160]	@ (8012c64 <limits_set_machine_positions+0xb8>)
 8012bc4:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8012bc8:	f013 0f08 	tst.w	r3, #8
 8012bcc:	d015      	beq.n	8012bfa <limits_set_machine_positions+0x4e>
    uint_fast8_t idx = N_AXIS;
 8012bce:	2203      	movs	r2, #3
 8012bd0:	e00c      	b.n	8012bec <limits_set_machine_positions+0x40>
                sys.position[idx] = 0;
 8012bd2:	4b26      	ldr	r3, [pc, #152]	@ (8012c6c <limits_set_machine_positions+0xc0>)
 8012bd4:	f102 0122 	add.w	r1, r2, #34	@ 0x22
 8012bd8:	2000      	movs	r0, #0
 8012bda:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
                sys.home_position[idx] = 0.0f;
 8012bde:	f102 0116 	add.w	r1, r2, #22
 8012be2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8012be6:	2100      	movs	r1, #0
 8012be8:	6019      	str	r1, [r3, #0]
        } while(idx);
 8012bea:	b3c2      	cbz	r2, 8012c5e <limits_set_machine_positions+0xb2>
            if (cycle.mask & bit(--idx)) {
 8012bec:	b2eb      	uxtb	r3, r5
 8012bee:	3a01      	subs	r2, #1
 8012bf0:	40d3      	lsrs	r3, r2
 8012bf2:	f013 0f01 	tst.w	r3, #1
 8012bf6:	d0f8      	beq.n	8012bea <limits_set_machine_positions+0x3e>
 8012bf8:	e7eb      	b.n	8012bd2 <limits_set_machine_positions+0x26>
    uint_fast8_t idx = N_AXIS;
 8012bfa:	2403      	movs	r4, #3
 8012bfc:	e018      	b.n	8012c30 <limits_set_machine_positions+0x84>
                                      : - pulloff;
 8012bfe:	eef1 7a48 	vneg.f32	s15, s16
            sys.home_position[idx] = bit_istrue(settings.homing.dir_mask.value, bit(idx))
 8012c02:	4e1a      	ldr	r6, [pc, #104]	@ (8012c6c <limits_set_machine_positions+0xc0>)
 8012c04:	f104 0316 	add.w	r3, r4, #22
 8012c08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012c0c:	edc3 7a00 	vstr	s15, [r3]
            sys.position[idx] = lroundf(sys.home_position[idx] * settings.axis[idx].steps_per_mm);
 8012c10:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8012c14:	4b13      	ldr	r3, [pc, #76]	@ (8012c64 <limits_set_machine_positions+0xb8>)
 8012c16:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012c1a:	ed93 0a0c 	vldr	s0, [r3, #48]	@ 0x30
 8012c1e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012c22:	f014 fa6b 	bl	80270fc <lroundf>
 8012c26:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 8012c2a:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
    } while(idx);
 8012c2e:	b1b4      	cbz	r4, 8012c5e <limits_set_machine_positions+0xb2>
        if (cycle.mask & bit(--idx)) {
 8012c30:	b2eb      	uxtb	r3, r5
 8012c32:	3c01      	subs	r4, #1
 8012c34:	40e3      	lsrs	r3, r4
 8012c36:	f013 0f01 	tst.w	r3, #1
 8012c3a:	d0f8      	beq.n	8012c2e <limits_set_machine_positions+0x82>
            sys.home_position[idx] = bit_istrue(settings.homing.dir_mask.value, bit(idx))
 8012c3c:	4b09      	ldr	r3, [pc, #36]	@ (8012c64 <limits_set_machine_positions+0xb8>)
 8012c3e:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8012c42:	40e3      	lsrs	r3, r4
                                      : - pulloff;
 8012c44:	f013 0f01 	tst.w	r3, #1
 8012c48:	d0d9      	beq.n	8012bfe <limits_set_machine_positions+0x52>
                                      ? settings.axis[idx].max_travel + pulloff
 8012c4a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8012c4e:	4b05      	ldr	r3, [pc, #20]	@ (8012c64 <limits_set_machine_positions+0xb8>)
 8012c50:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012c54:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
                                      : - pulloff;
 8012c58:	ee77 7a88 	vadd.f32	s15, s15, s16
 8012c5c:	e7d1      	b.n	8012c02 <limits_set_machine_positions+0x56>
}
 8012c5e:	ecbd 8b02 	vpop	{d8}
 8012c62:	bd70      	pop	{r4, r5, r6, pc}
 8012c64:	20001bc4 	.word	0x20001bc4
 8012c68:	80000000 	.word	0x80000000
 8012c6c:	2000148c 	.word	0x2000148c

08012c70 <homing_cycle>:
{
 8012c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c74:	ed2d 8b02 	vpush	{d8}
 8012c78:	b099      	sub	sp, #100	@ 0x64
 8012c7a:	f88d 000e 	strb.w	r0, [sp, #14]
 8012c7e:	f88d 100f 	strb.w	r1, [sp, #15]
    if (ABORTED) // Block if system reset has been issued.
 8012c82:	4b92      	ldr	r3, [pc, #584]	@ (8012ecc <homing_cycle+0x25c>)
 8012c84:	881b      	ldrh	r3, [r3, #0]
 8012c86:	b12b      	cbz	r3, 8012c94 <homing_cycle+0x24>
        return false;
 8012c88:	2000      	movs	r0, #0
}
 8012c8a:	b019      	add	sp, #100	@ 0x64
 8012c8c:	ecbd 8b02 	vpop	{d8}
 8012c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint_fast8_t n_cycle = (2 * settings.homing.locate_cycles + 1);
 8012c94:	4b8e      	ldr	r3, [pc, #568]	@ (8012ed0 <homing_cycle+0x260>)
 8012c96:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8012c9a:	005b      	lsls	r3, r3, #1
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	9302      	str	r3, [sp, #8]
    plan_data_init(&plan_data);
 8012ca0:	a806      	add	r0, sp, #24
 8012ca2:	f003 fcfb 	bl	801669c <plan_data_init>
    plan_data.condition.system_motion = On;
 8012ca6:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8012caa:	f043 0302 	orr.w	r3, r3, #2
 8012cae:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    plan_data.condition.no_feed_override = On;
 8012cb2:	b2db      	uxtb	r3, r3
 8012cb4:	f043 0310 	orr.w	r3, r3, #16
 8012cb8:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    plan_data.line_number = DEFAULT_HOMING_CYCLE_LINE_NUMBER;
 8012cbc:	2500      	movs	r5, #0
 8012cbe:	950d      	str	r5, [sp, #52]	@ 0x34
    memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t));
 8012cc0:	4e84      	ldr	r6, [pc, #528]	@ (8012ed4 <homing_cycle+0x264>)
 8012cc2:	ac07      	add	r4, sp, #28
 8012cc4:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8012cc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012cca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    plan_data.condition.coolant = gc_state.modal.coolant;
 8012cce:	7e73      	ldrb	r3, [r6, #25]
 8012cd0:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
    uint_fast8_t idx = N_AXIS;
 8012cd4:	f04f 0a03 	mov.w	sl, #3
    float max_travel = 0.0f, homing_rate;
 8012cd8:	eddf 8a7f 	vldr	s17, [pc, #508]	@ 8012ed8 <homing_cycle+0x268>
    uint_fast8_t step_pin[N_AXIS], n_active_axis, dual_motor_axis = 0;
 8012cdc:	46a9      	mov	r9, r5
 8012cde:	4653      	mov	r3, sl
 8012ce0:	e000      	b.n	8012ce4 <homing_cycle+0x74>
    } while(idx);
 8012ce2:	b343      	cbz	r3, 8012d36 <homing_cycle+0xc6>
        idx--;
 8012ce4:	3b01      	subs	r3, #1
        step_pin[idx] = bit(idx);
 8012ce6:	2201      	movs	r2, #1
 8012ce8:	409a      	lsls	r2, r3
 8012cea:	a918      	add	r1, sp, #96	@ 0x60
 8012cec:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8012cf0:	f841 2c10 	str.w	r2, [r1, #-16]
        if(bit_istrue(cycle.mask, bit(idx))) {
 8012cf4:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8012cf8:	fa22 f103 	lsr.w	r1, r2, r3
 8012cfc:	f011 0f01 	tst.w	r1, #1
 8012d00:	d0ef      	beq.n	8012ce2 <homing_cycle+0x72>
            max_travel = max(max_travel, (-HOMING_AXIS_SEARCH_SCALAR) * settings.axis[idx].max_travel);
 8012d02:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8012d06:	4972      	ldr	r1, [pc, #456]	@ (8012ed0 <homing_cycle+0x260>)
 8012d08:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8012d0c:	edd1 7a0f 	vldr	s15, [r1, #60]	@ 0x3c
 8012d10:	eebf 7a08 	vmov.f32	s14, #248	@ 0xbfc00000 -1.5
 8012d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012d18:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d20:	d401      	bmi.n	8012d26 <homing_cycle+0xb6>
 8012d22:	eef0 8a67 	vmov.f32	s17, s15
            if(bit_istrue(auto_square.mask, bit(idx)))
 8012d26:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8012d2a:	40d9      	lsrs	r1, r3
 8012d2c:	f011 0f01 	tst.w	r1, #1
 8012d30:	d0d7      	beq.n	8012ce2 <homing_cycle+0x72>
                dual_motor_axis = idx;
 8012d32:	4699      	mov	r9, r3
 8012d34:	e7d5      	b.n	8012ce2 <homing_cycle+0x72>
    if(max_travel == 0.0f)
 8012d36:	9204      	str	r2, [sp, #16]
 8012d38:	469a      	mov	sl, r3
 8012d3a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d42:	f000 8200 	beq.w	8013146 <homing_cycle+0x4d6>
    if((homing_rate = hal.homing.get_feedrate(cycle, HomingMode_Seek)) == 0.0f)
 8012d46:	4b65      	ldr	r3, [pc, #404]	@ (8012edc <homing_cycle+0x26c>)
 8012d48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012d4a:	2100      	movs	r1, #0
 8012d4c:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8012d50:	4798      	blx	r3
 8012d52:	eeb0 8a40 	vmov.f32	s16, s0
 8012d56:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d5e:	f000 81f4 	beq.w	801314a <homing_cycle+0x4da>
    if(auto_square.mask) {
 8012d62:	f89d b00f 	ldrb.w	fp, [sp, #15]
 8012d66:	f1bb 0f00 	cmp.w	fp, #0
 8012d6a:	d031      	beq.n	8012dd0 <homing_cycle+0x160>
        float fail_distance = (-settings.homing.dual_axis.fail_length_percent / 100.0f) * settings.axis[dual_motor_axis].max_travel;
 8012d6c:	4b58      	ldr	r3, [pc, #352]	@ (8012ed0 <homing_cycle+0x260>)
 8012d6e:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 8012d72:	eeb1 7a47 	vneg.f32	s14, s14
 8012d76:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8012ee0 <homing_cycle+0x270>
 8012d7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012d7e:	eb09 0189 	add.w	r1, r9, r9, lsl #2
 8012d82:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8012d86:	ed91 7a0f 	vldr	s14, [r1, #60]	@ 0x3c
 8012d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
        fail_distance = min(fail_distance, settings.homing.dual_axis.fail_distance_max);
 8012d8e:	ed93 7a47 	vldr	s14, [r3, #284]	@ 0x11c
 8012d92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d9a:	dd01      	ble.n	8012da0 <homing_cycle+0x130>
 8012d9c:	eeb0 7a67 	vmov.f32	s14, s15
        fail_distance = max(fail_distance, settings.homing.dual_axis.fail_distance_min);
 8012da0:	4b4b      	ldr	r3, [pc, #300]	@ (8012ed0 <homing_cycle+0x260>)
 8012da2:	edd3 6a48 	vldr	s13, [r3, #288]	@ 0x120
 8012da6:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dae:	d501      	bpl.n	8012db4 <homing_cycle+0x144>
 8012db0:	eef0 6a47 	vmov.f32	s13, s14
        autosquare_fail_distance = truncf(fail_distance * settings.axis[dual_motor_axis].steps_per_mm);
 8012db4:	eb09 0189 	add.w	r1, r9, r9, lsl #2
 8012db8:	4b45      	ldr	r3, [pc, #276]	@ (8012ed0 <homing_cycle+0x260>)
 8012dba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8012dbe:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8012dc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012dc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012dca:	edcd 7a01 	vstr	s15, [sp, #4]
 8012dce:	e001      	b.n	8012dd4 <homing_cycle+0x164>
    int32_t initial_trigger_position = 0, autosquare_fail_distance = 0;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	9301      	str	r3, [sp, #4]
 8012dd4:	2700      	movs	r7, #0
 8012dd6:	463e      	mov	r6, r7
 8012dd8:	46b8      	mov	r8, r7
 8012dda:	9700      	str	r7, [sp, #0]
 8012ddc:	f8cd a014 	str.w	sl, [sp, #20]
 8012de0:	f89d a00f 	ldrb.w	sl, [sp, #15]
 8012de4:	e137      	b.n	8013056 <homing_cycle+0x3e6>
                    target.values[idx] = mode == HomingMode_Pulloff ? max_travel : - max_travel;
 8012de6:	eef0 7a68 	vmov.f32	s15, s17
 8012dea:	aa18      	add	r2, sp, #96	@ 0x60
 8012dec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012df0:	ed42 7a08 	vstr	s15, [r2, #-32]	@ 0xffffffe0
                axislock.mask |= step_pin[idx];
 8012df4:	b2e4      	uxtb	r4, r4
 8012df6:	aa18      	add	r2, sp, #96	@ 0x60
 8012df8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012dfc:	f852 2c10 	ldr.w	r2, [r2, #-16]
 8012e00:	4314      	orrs	r4, r2
        } while(idx);
 8012e02:	b333      	cbz	r3, 8012e52 <homing_cycle+0x1e2>
            if (bit_istrue(cycle.mask, bit(--idx))) {
 8012e04:	3b01      	subs	r3, #1
 8012e06:	fa21 f203 	lsr.w	r2, r1, r3
 8012e0a:	f012 0f01 	tst.w	r2, #1
 8012e0e:	d0f8      	beq.n	8012e02 <homing_cycle+0x192>
                n_active_axis++;
 8012e10:	3501      	adds	r5, #1
                sys.position[idx] = 0;
 8012e12:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8012e16:	482d      	ldr	r0, [pc, #180]	@ (8012ecc <homing_cycle+0x25c>)
 8012e18:	f04f 0c00 	mov.w	ip, #0
 8012e1c:	f840 c022 	str.w	ip, [r0, r2, lsl #2]
                if (bit_istrue(settings.homing.dir_mask.value, bit(idx)))
 8012e20:	4a2b      	ldr	r2, [pc, #172]	@ (8012ed0 <homing_cycle+0x260>)
 8012e22:	f892 2110 	ldrb.w	r2, [r2, #272]	@ 0x110
 8012e26:	40da      	lsrs	r2, r3
 8012e28:	f012 0f01 	tst.w	r2, #1
 8012e2c:	d004      	beq.n	8012e38 <homing_cycle+0x1c8>
                    target.values[idx] = mode == HomingMode_Pulloff ? max_travel : - max_travel;
 8012e2e:	2e02      	cmp	r6, #2
 8012e30:	d0d9      	beq.n	8012de6 <homing_cycle+0x176>
 8012e32:	eef1 7a68 	vneg.f32	s15, s17
 8012e36:	e7d8      	b.n	8012dea <homing_cycle+0x17a>
                    target.values[idx] = mode == HomingMode_Pulloff ? - max_travel : max_travel;
 8012e38:	2e02      	cmp	r6, #2
 8012e3a:	d007      	beq.n	8012e4c <homing_cycle+0x1dc>
 8012e3c:	eef0 7a68 	vmov.f32	s15, s17
 8012e40:	aa18      	add	r2, sp, #96	@ 0x60
 8012e42:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012e46:	ed42 7a08 	vstr	s15, [r2, #-32]	@ 0xffffffe0
 8012e4a:	e7d3      	b.n	8012df4 <homing_cycle+0x184>
 8012e4c:	eef1 7a68 	vneg.f32	s15, s17
 8012e50:	e7f6      	b.n	8012e40 <homing_cycle+0x1d0>
        if(grbl.on_homing_rate_set)
 8012e52:	4b24      	ldr	r3, [pc, #144]	@ (8012ee4 <homing_cycle+0x274>)
 8012e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012e58:	b12b      	cbz	r3, 8012e66 <homing_cycle+0x1f6>
            grbl.on_homing_rate_set(cycle, homing_rate, mode);
 8012e5a:	4631      	mov	r1, r6
 8012e5c:	eeb0 0a48 	vmov.f32	s0, s16
 8012e60:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8012e64:	4798      	blx	r3
        homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8012e66:	ee07 5a90 	vmov	s15, r5
 8012e6a:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8012e6e:	f014 f867 	bl	8026f40 <sqrtf>
 8012e72:	ee28 0a00 	vmul.f32	s0, s16, s0
        plan_data.feed_rate = homing_rate;      // Set current homing rate.
 8012e76:	ed8d 0a06 	vstr	s0, [sp, #24]
        sys.homing_axis_lock.mask = axislock.mask;
 8012e7a:	4d14      	ldr	r5, [pc, #80]	@ (8012ecc <homing_cycle+0x25c>)
 8012e7c:	766c      	strb	r4, [r5, #25]
        plan_buffer_line(target.values, &plan_data);    // Bypass mc_line(). Directly plan homing motion.
 8012e7e:	a906      	add	r1, sp, #24
 8012e80:	a810      	add	r0, sp, #64	@ 0x40
 8012e82:	f003 f9cf 	bl	8016224 <plan_buffer_line>
        sys.step_control.flags = 0;
 8012e86:	2300      	movs	r3, #0
 8012e88:	762b      	strb	r3, [r5, #24]
        sys.step_control.execute_sys_motion = On; // Set to execute homing motion and clear existing flags.
 8012e8a:	2304      	movs	r3, #4
 8012e8c:	762b      	strb	r3, [r5, #24]
        st_prep_buffer();   // Prep and fill segment buffer from newly planned block.
 8012e8e:	f00c fc47 	bl	801f720 <st_prep_buffer>
        st_wake_up();       // Initiate motion
 8012e92:	f00c f953 	bl	801f13c <st_wake_up>
 8012e96:	e045      	b.n	8012f24 <homing_cycle+0x2b4>
                        squaring_mode = (signals_state.a.mask & auto_square.mask) ? SquaringMode_A : SquaringMode_B;
 8012e98:	f04f 0802 	mov.w	r8, #2
 8012e9c:	e071      	b.n	8012f82 <homing_cycle+0x312>
                } while(idx);
 8012e9e:	b31b      	cbz	r3, 8012ee8 <homing_cycle+0x278>
                    idx--;
 8012ea0:	3b01      	subs	r3, #1
                    if ((axislock.mask & step_pin[idx]) && (homing_state.mask & bit(idx))) {
 8012ea2:	b2e2      	uxtb	r2, r4
 8012ea4:	a918      	add	r1, sp, #96	@ 0x60
 8012ea6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8012eaa:	f851 1c10 	ldr.w	r1, [r1, #-16]
 8012eae:	420a      	tst	r2, r1
 8012eb0:	d0f5      	beq.n	8012e9e <homing_cycle+0x22e>
 8012eb2:	b2e9      	uxtb	r1, r5
 8012eb4:	40d9      	lsrs	r1, r3
 8012eb6:	f011 0f01 	tst.w	r1, #1
 8012eba:	d0f0      	beq.n	8012e9e <homing_cycle+0x22e>
                        axislock.mask &= ~bit(idx);
 8012ebc:	2401      	movs	r4, #1
 8012ebe:	409c      	lsls	r4, r3
 8012ec0:	ea22 0404 	bic.w	r4, r2, r4
                        if(idx == dual_motor_axis)
 8012ec4:	4599      	cmp	r9, r3
 8012ec6:	d1ea      	bne.n	8012e9e <homing_cycle+0x22e>
                            autosquare_check = false;
 8012ec8:	2700      	movs	r7, #0
 8012eca:	e7e8      	b.n	8012e9e <homing_cycle+0x22e>
 8012ecc:	2000148c 	.word	0x2000148c
 8012ed0:	20001bc4 	.word	0x20001bc4
 8012ed4:	20000ee4 	.word	0x20000ee4
 8012ed8:	00000000 	.word	0x00000000
 8012edc:	200011ac 	.word	0x200011ac
 8012ee0:	42c80000 	.word	0x42c80000
 8012ee4:	20001394 	.word	0x20001394
                sys.homing_axis_lock.mask = axislock.mask;
 8012ee8:	4b99      	ldr	r3, [pc, #612]	@ (8013150 <homing_cycle+0x4e0>)
 8012eea:	765c      	strb	r4, [r3, #25]
                if (autosquare_check && abs(initial_trigger_position - sys.position[dual_motor_axis]) > autosquare_fail_distance) {
 8012eec:	b167      	cbz	r7, 8012f08 <homing_cycle+0x298>
 8012eee:	f109 0322 	add.w	r3, r9, #34	@ 0x22
 8012ef2:	4a97      	ldr	r2, [pc, #604]	@ (8013150 <homing_cycle+0x4e0>)
 8012ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ef8:	9a00      	ldr	r2, [sp, #0]
 8012efa:	1ad3      	subs	r3, r2, r3
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	bfb8      	it	lt
 8012f00:	425b      	neglt	r3, r3
 8012f02:	9a01      	ldr	r2, [sp, #4]
 8012f04:	4293      	cmp	r3, r2
 8012f06:	dc44      	bgt.n	8012f92 <homing_cycle+0x322>
            st_prep_buffer(); // Check and prep segment buffer.
 8012f08:	f00c fc0a 	bl	801f720 <st_prep_buffer>
            if (sys.rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_COMPLETE)) {
 8012f0c:	4b90      	ldr	r3, [pc, #576]	@ (8013150 <homing_cycle+0x4e0>)
 8012f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012f10:	f013 0f64 	tst.w	r3, #100	@ 0x64
 8012f14:	d148      	bne.n	8012fa8 <homing_cycle+0x338>
            grbl.on_execute_realtime(STATE_HOMING);
 8012f16:	4b8f      	ldr	r3, [pc, #572]	@ (8013154 <homing_cycle+0x4e4>)
 8012f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012f1a:	2004      	movs	r0, #4
 8012f1c:	4798      	blx	r3
        } while (axislock.mask & AXES_BITMASK);
 8012f1e:	f014 0f07 	tst.w	r4, #7
 8012f22:	d066      	beq.n	8012ff2 <homing_cycle+0x382>
            if (mode != HomingMode_Pulloff) {
 8012f24:	2e02      	cmp	r6, #2
 8012f26:	d0ef      	beq.n	8012f08 <homing_cycle+0x298>
                homing_state = homing_signals_select(signals_state = hal.homing.get_state(), auto_square, squaring_mode);
 8012f28:	4b8b      	ldr	r3, [pc, #556]	@ (8013158 <homing_cycle+0x4e8>)
 8012f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012f2c:	4798      	blx	r3
 8012f2e:	f8ad 004c 	strh.w	r0, [sp, #76]	@ 0x4c
 8012f32:	4642      	mov	r2, r8
 8012f34:	4651      	mov	r1, sl
 8012f36:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8012f38:	f7ff f914 	bl	8012164 <homing_signals_select>
 8012f3c:	4605      	mov	r5, r0
                if((homing_state.mask & auto_square.mask) && squaring_mode == SquaringMode_Both) {
 8012f3e:	b2c2      	uxtb	r2, r0
 8012f40:	ea1b 0f05 	tst.w	fp, r5
 8012f44:	d023      	beq.n	8012f8e <homing_cycle+0x31e>
 8012f46:	f1b8 0f00 	cmp.w	r8, #0
 8012f4a:	d120      	bne.n	8012f8e <homing_cycle+0x31e>
                    if((autosquare_check = (signals_state.a.mask & auto_square.mask) != (signals_state.b.mask & auto_square.mask))) {
 8012f4c:	f89d 104c 	ldrb.w	r1, [sp, #76]	@ 0x4c
 8012f50:	f89d 304d 	ldrb.w	r3, [sp, #77]	@ 0x4d
 8012f54:	404b      	eors	r3, r1
 8012f56:	ea0b 0303 	and.w	r3, fp, r3
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	bf14      	ite	ne
 8012f5e:	2701      	movne	r7, #1
 8012f60:	2700      	moveq	r7, #0
 8012f62:	d014      	beq.n	8012f8e <homing_cycle+0x31e>
                        initial_trigger_position = sys.position[dual_motor_axis];
 8012f64:	f109 0322 	add.w	r3, r9, #34	@ 0x22
 8012f68:	4879      	ldr	r0, [pc, #484]	@ (8013150 <homing_cycle+0x4e0>)
 8012f6a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8012f6e:	9300      	str	r3, [sp, #0]
                        homing_state.mask &= ~auto_square.mask;
 8012f70:	ea6f 050b 	mvn.w	r5, fp
 8012f74:	b26d      	sxtb	r5, r5
 8012f76:	4015      	ands	r5, r2
                        squaring_mode = (signals_state.a.mask & auto_square.mask) ? SquaringMode_A : SquaringMode_B;
 8012f78:	ea1b 0f01 	tst.w	fp, r1
 8012f7c:	d08c      	beq.n	8012e98 <homing_cycle+0x228>
 8012f7e:	f04f 0801 	mov.w	r8, #1
                        hal.stepper.disable_motors(auto_square, squaring_mode);
 8012f82:	4b75      	ldr	r3, [pc, #468]	@ (8013158 <homing_cycle+0x4e8>)
 8012f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012f88:	4641      	mov	r1, r8
 8012f8a:	4650      	mov	r0, sl
 8012f8c:	4798      	blx	r3
                idx = N_AXIS;
 8012f8e:	2303      	movs	r3, #3
 8012f90:	e786      	b.n	8012ea0 <homing_cycle+0x230>
                    system_set_exec_alarm(Alarm_HomingFailAutoSquaringApproach);
 8012f92:	4b71      	ldr	r3, [pc, #452]	@ (8013158 <homing_cycle+0x4e8>)
 8012f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012f96:	210f      	movs	r1, #15
 8012f98:	4870      	ldr	r0, [pc, #448]	@ (801315c <homing_cycle+0x4ec>)
 8012f9a:	4798      	blx	r3
                    mc_reset();
 8012f9c:	f001 fa7c 	bl	8014498 <mc_reset>
                    protocol_execute_realtime();
 8012fa0:	f004 f848 	bl	8017034 <protocol_execute_realtime>
                    return false;
 8012fa4:	2000      	movs	r0, #0
 8012fa6:	e670      	b.n	8012c8a <homing_cycle+0x1a>
                uint_fast16_t rt_exec = sys.rt_exec_state;
 8012fa8:	4b69      	ldr	r3, [pc, #420]	@ (8013150 <homing_cycle+0x4e0>)
 8012faa:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                if (rt_exec & EXEC_RESET)
 8012fac:	f014 0f20 	tst.w	r4, #32
 8012fb0:	d004      	beq.n	8012fbc <homing_cycle+0x34c>
                    system_set_exec_alarm(Alarm_HomingFailReset);
 8012fb2:	4b69      	ldr	r3, [pc, #420]	@ (8013158 <homing_cycle+0x4e8>)
 8012fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012fb6:	2106      	movs	r1, #6
 8012fb8:	4868      	ldr	r0, [pc, #416]	@ (801315c <homing_cycle+0x4ec>)
 8012fba:	4798      	blx	r3
                if (rt_exec & EXEC_SAFETY_DOOR)
 8012fbc:	f014 0f40 	tst.w	r4, #64	@ 0x40
 8012fc0:	d004      	beq.n	8012fcc <homing_cycle+0x35c>
                    system_set_exec_alarm(Alarm_HomingFailDoor);
 8012fc2:	4b65      	ldr	r3, [pc, #404]	@ (8013158 <homing_cycle+0x4e8>)
 8012fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012fc6:	2107      	movs	r1, #7
 8012fc8:	4864      	ldr	r0, [pc, #400]	@ (801315c <homing_cycle+0x4ec>)
 8012fca:	4798      	blx	r3
                hal.delay_ms(2, NULL);
 8012fcc:	4b62      	ldr	r3, [pc, #392]	@ (8013158 <homing_cycle+0x4e8>)
 8012fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012fd0:	2100      	movs	r1, #0
 8012fd2:	2002      	movs	r0, #2
 8012fd4:	4798      	blx	r3
                if (mode == HomingMode_Pulloff && (homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask & cycle.mask))
 8012fd6:	2e02      	cmp	r6, #2
 8012fd8:	d047      	beq.n	801306a <homing_cycle+0x3fa>
                if (mode != HomingMode_Pulloff && (rt_exec & EXEC_CYCLE_COMPLETE))
 8012fda:	f014 0f04 	tst.w	r4, #4
 8012fde:	d158      	bne.n	8013092 <homing_cycle+0x422>
                if (sys.rt_exec_alarm) {
 8012fe0:	4b5b      	ldr	r3, [pc, #364]	@ (8013150 <homing_cycle+0x4e0>)
 8012fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d15a      	bne.n	801309e <homing_cycle+0x42e>
                    system_clear_exec_state_flag(EXEC_CYCLE_COMPLETE);
 8012fe8:	4b5b      	ldr	r3, [pc, #364]	@ (8013158 <homing_cycle+0x4e8>)
 8012fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012fec:	2104      	movs	r1, #4
 8012fee:	485c      	ldr	r0, [pc, #368]	@ (8013160 <homing_cycle+0x4f0>)
 8012ff0:	4798      	blx	r3
        st_reset(); // Immediately force kill steppers and reset step segment buffer.
 8012ff2:	f00c fa6b 	bl	801f4cc <st_reset>
        hal.delay_ms(settings.homing.debounce_delay, NULL); // Delay to allow transient dynamics to dissipate.
 8012ff6:	4b58      	ldr	r3, [pc, #352]	@ (8013158 <homing_cycle+0x4e8>)
 8012ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ffa:	2100      	movs	r1, #0
 8012ffc:	4a59      	ldr	r2, [pc, #356]	@ (8013164 <homing_cycle+0x4f4>)
 8012ffe:	f8b2 0112 	ldrh.w	r0, [r2, #274]	@ 0x112
 8013002:	4798      	blx	r3
        mode = mode == HomingMode_Pulloff ? HomingMode_Locate : HomingMode_Pulloff;
 8013004:	2e02      	cmp	r6, #2
 8013006:	d050      	beq.n	80130aa <homing_cycle+0x43a>
 8013008:	2602      	movs	r6, #2
        homing_rate = hal.homing.get_feedrate(cycle, mode);
 801300a:	4b53      	ldr	r3, [pc, #332]	@ (8013158 <homing_cycle+0x4e8>)
 801300c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801300e:	4631      	mov	r1, r6
 8013010:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8013014:	4798      	blx	r3
 8013016:	eeb0 8a40 	vmov.f32	s16, s0
        if (mode == HomingMode_Locate) {
 801301a:	2e01      	cmp	r6, #1
 801301c:	d047      	beq.n	80130ae <homing_cycle+0x43e>
            max_travel = settings.homing.pulloff;
 801301e:	4b51      	ldr	r3, [pc, #324]	@ (8013164 <homing_cycle+0x4f4>)
 8013020:	edd3 8a43 	vldr	s17, [r3, #268]	@ 0x10c
        if(auto_square.mask) {
 8013024:	f1bb 0f00 	cmp.w	fp, #0
 8013028:	d007      	beq.n	801303a <homing_cycle+0x3ca>
            hal.stepper.disable_motors((axes_signals_t){0}, SquaringMode_Both);
 801302a:	4b4b      	ldr	r3, [pc, #300]	@ (8013158 <homing_cycle+0x4e8>)
 801302c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013030:	2700      	movs	r7, #0
 8013032:	4639      	mov	r1, r7
 8013034:	4638      	mov	r0, r7
 8013036:	4798      	blx	r3
            squaring_mode = SquaringMode_Both;
 8013038:	46b8      	mov	r8, r7
    } while (homing_rate > 0.0f && cycle.mask && n_cycle-- > 0);
 801303a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801303e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013042:	dd3c      	ble.n	80130be <homing_cycle+0x44e>
 8013044:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d038      	beq.n	80130be <homing_cycle+0x44e>
 801304c:	9a02      	ldr	r2, [sp, #8]
 801304e:	1e53      	subs	r3, r2, #1
 8013050:	2a00      	cmp	r2, #0
 8013052:	d034      	beq.n	80130be <homing_cycle+0x44e>
 8013054:	9302      	str	r3, [sp, #8]
        system_convert_array_steps_to_mpos(target.values, sys.position);
 8013056:	4944      	ldr	r1, [pc, #272]	@ (8013168 <homing_cycle+0x4f8>)
 8013058:	a810      	add	r0, sp, #64	@ 0x40
 801305a:	f00e fa6d 	bl	8021538 <system_convert_array_steps_to_mpos>
        axislock = (axes_signals_t){0};
 801305e:	f04f 0400 	mov.w	r4, #0
        n_active_axis = 0;
 8013062:	9d05      	ldr	r5, [sp, #20]
        idx = N_AXIS;
 8013064:	2303      	movs	r3, #3
 8013066:	9904      	ldr	r1, [sp, #16]
 8013068:	e6cc      	b.n	8012e04 <homing_cycle+0x194>
                if (mode == HomingMode_Pulloff && (homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask & cycle.mask))
 801306a:	4b3b      	ldr	r3, [pc, #236]	@ (8013158 <homing_cycle+0x4e8>)
 801306c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801306e:	4798      	blx	r3
 8013070:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8013074:	2200      	movs	r2, #0
 8013076:	4611      	mov	r1, r2
 8013078:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801307a:	f7ff f873 	bl	8012164 <homing_signals_select>
 801307e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8013082:	4203      	tst	r3, r0
 8013084:	d0ac      	beq.n	8012fe0 <homing_cycle+0x370>
                    system_set_exec_alarm(Alarm_FailPulloff);
 8013086:	4b34      	ldr	r3, [pc, #208]	@ (8013158 <homing_cycle+0x4e8>)
 8013088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801308a:	2108      	movs	r1, #8
 801308c:	4833      	ldr	r0, [pc, #204]	@ (801315c <homing_cycle+0x4ec>)
 801308e:	4798      	blx	r3
                if (mode != HomingMode_Pulloff && (rt_exec & EXEC_CYCLE_COMPLETE))
 8013090:	e7a6      	b.n	8012fe0 <homing_cycle+0x370>
                    system_set_exec_alarm(Alarm_HomingFailApproach);
 8013092:	4b31      	ldr	r3, [pc, #196]	@ (8013158 <homing_cycle+0x4e8>)
 8013094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013096:	2109      	movs	r1, #9
 8013098:	4830      	ldr	r0, [pc, #192]	@ (801315c <homing_cycle+0x4ec>)
 801309a:	4798      	blx	r3
 801309c:	e7a0      	b.n	8012fe0 <homing_cycle+0x370>
                    mc_reset(); // Stop motors, if they are running.
 801309e:	f001 f9fb 	bl	8014498 <mc_reset>
                    protocol_execute_realtime();
 80130a2:	f003 ffc7 	bl	8017034 <protocol_execute_realtime>
                    return false;
 80130a6:	2000      	movs	r0, #0
 80130a8:	e5ef      	b.n	8012c8a <homing_cycle+0x1a>
        mode = mode == HomingMode_Pulloff ? HomingMode_Locate : HomingMode_Pulloff;
 80130aa:	2601      	movs	r6, #1
 80130ac:	e7ad      	b.n	801300a <homing_cycle+0x39a>
            max_travel = settings.homing.pulloff * HOMING_AXIS_LOCATE_SCALAR;
 80130ae:	4b2d      	ldr	r3, [pc, #180]	@ (8013164 <homing_cycle+0x4f4>)
 80130b0:	edd3 8a43 	vldr	s17, [r3, #268]	@ 0x10c
 80130b4:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80130b8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80130bc:	e7b2      	b.n	8013024 <homing_cycle+0x3b4>
    if(auto_square.mask && settings.axis[dual_motor_axis].dual_axis_offset != 0.0f) {
 80130be:	f1bb 0f00 	cmp.w	fp, #0
 80130c2:	d02d      	beq.n	8013120 <homing_cycle+0x4b0>
 80130c4:	eb09 0289 	add.w	r2, r9, r9, lsl #2
 80130c8:	4b26      	ldr	r3, [pc, #152]	@ (8013164 <homing_cycle+0x4f4>)
 80130ca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80130ce:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80130d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80130d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130da:	d021      	beq.n	8013120 <homing_cycle+0x4b0>
        hal.stepper.disable_motors(auto_square, settings.axis[dual_motor_axis].dual_axis_offset < 0.0f ? SquaringMode_B : SquaringMode_A);
 80130dc:	4b1e      	ldr	r3, [pc, #120]	@ (8013158 <homing_cycle+0x4e8>)
 80130de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80130e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80130e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ea:	d42a      	bmi.n	8013142 <homing_cycle+0x4d2>
 80130ec:	2101      	movs	r1, #1
 80130ee:	f89d 400f 	ldrb.w	r4, [sp, #15]
 80130f2:	4620      	mov	r0, r4
 80130f4:	4798      	blx	r3
        if(!limits_pull_off(auto_square, fabs(settings.axis[dual_motor_axis].dual_axis_offset)))
 80130f6:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 80130fa:	4b1a      	ldr	r3, [pc, #104]	@ (8013164 <homing_cycle+0x4f4>)
 80130fc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8013100:	ed93 0a10 	vldr	s0, [r3, #64]	@ 0x40
 8013104:	eeb0 0ac0 	vabs.f32	s0, s0
 8013108:	4620      	mov	r0, r4
 801310a:	f7ff fa07 	bl	801251c <limits_pull_off>
 801310e:	2800      	cmp	r0, #0
 8013110:	f43f adbb 	beq.w	8012c8a <homing_cycle+0x1a>
        hal.stepper.disable_motors((axes_signals_t){0}, SquaringMode_Both);
 8013114:	4b10      	ldr	r3, [pc, #64]	@ (8013158 <homing_cycle+0x4e8>)
 8013116:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801311a:	2100      	movs	r1, #0
 801311c:	4608      	mov	r0, r1
 801311e:	4798      	blx	r3
    limits_set_machine_positions(cycle, true);
 8013120:	2101      	movs	r1, #1
 8013122:	f89d 400e 	ldrb.w	r4, [sp, #14]
 8013126:	4620      	mov	r0, r4
 8013128:	f7ff fd40 	bl	8012bac <limits_set_machine_positions>
    sys.step_control.flags = 0; // Return step control to normal operation.
 801312c:	4a08      	ldr	r2, [pc, #32]	@ (8013150 <homing_cycle+0x4e0>)
 801312e:	2300      	movs	r3, #0
 8013130:	7613      	strb	r3, [r2, #24]
    sys.homed.mask |= cycle.mask;
 8013132:	f892 1054 	ldrb.w	r1, [r2, #84]	@ 0x54
 8013136:	b2e3      	uxtb	r3, r4
 8013138:	430b      	orrs	r3, r1
 801313a:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
    return true;
 801313e:	2001      	movs	r0, #1
 8013140:	e5a3      	b.n	8012c8a <homing_cycle+0x1a>
        hal.stepper.disable_motors(auto_square, settings.axis[dual_motor_axis].dual_axis_offset < 0.0f ? SquaringMode_B : SquaringMode_A);
 8013142:	2102      	movs	r1, #2
 8013144:	e7d3      	b.n	80130ee <homing_cycle+0x47e>
        return true;
 8013146:	2001      	movs	r0, #1
 8013148:	e59f      	b.n	8012c8a <homing_cycle+0x1a>
        return false;
 801314a:	2000      	movs	r0, #0
 801314c:	e59d      	b.n	8012c8a <homing_cycle+0x1a>
 801314e:	bf00      	nop
 8013150:	2000148c 	.word	0x2000148c
 8013154:	20001394 	.word	0x20001394
 8013158:	200011ac 	.word	0x200011ac
 801315c:	200014d8 	.word	0x200014d8
 8013160:	200014d4 	.word	0x200014d4
 8013164:	20001bc4 	.word	0x20001bc4
 8013168:	20001514 	.word	0x20001514

0801316c <limits_go_home>:
{
 801316c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801316e:	b083      	sub	sp, #12
 8013170:	4607      	mov	r7, r0
    axes_signals_t auto_square = {0}, auto_squared = {0};
 8013172:	2600      	movs	r6, #0
 8013174:	4634      	mov	r4, r6
    hal.limits.enable(settings.limits.flags.hard_enabled, cycle); // Disable hard limits pin change register for cycle duration
 8013176:	4d24      	ldr	r5, [pc, #144]	@ (8013208 <limits_go_home+0x9c>)
 8013178:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 801317a:	4a24      	ldr	r2, [pc, #144]	@ (801320c <limits_go_home+0xa0>)
 801317c:	f892 0124 	ldrb.w	r0, [r2, #292]	@ 0x124
 8013180:	4639      	mov	r1, r7
 8013182:	f000 0001 	and.w	r0, r0, #1
 8013186:	4798      	blx	r3
    if(hal.stepper.get_ganged)
 8013188:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 801318c:	b113      	cbz	r3, 8013194 <limits_go_home+0x28>
        auto_squared = hal.stepper.get_ganged(true);
 801318e:	2001      	movs	r0, #1
 8013190:	4798      	blx	r3
 8013192:	4606      	mov	r6, r0
    auto_squared.mask &= cycle.mask;
 8013194:	b2fd      	uxtb	r5, r7
    if(auto_squared.mask) {
 8013196:	4035      	ands	r5, r6
 8013198:	d018      	beq.n	80131cc <limits_go_home+0x60>
        if(!hal.stepper.disable_motors)
 801319a:	4b1b      	ldr	r3, [pc, #108]	@ (8013208 <limits_go_home+0x9c>)
 801319c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80131a0:	b363      	cbz	r3, 80131fc <limits_go_home+0x90>
        auto_square.x = On;
 80131a2:	f04f 0401 	mov.w	r4, #1
        while(!(auto_squared.mask & auto_square.mask))
 80131a6:	e000      	b.n	80131aa <limits_go_home+0x3e>
            auto_square.mask <<= 1;
 80131a8:	005c      	lsls	r4, r3, #1
        while(!(auto_squared.mask & auto_square.mask))
 80131aa:	b2e3      	uxtb	r3, r4
 80131ac:	4225      	tst	r5, r4
 80131ae:	d0fb      	beq.n	80131a8 <limits_go_home+0x3c>
        if(auto_squared.mask != auto_square.mask)
 80131b0:	429d      	cmp	r5, r3
 80131b2:	d125      	bne.n	8013200 <limits_go_home+0x94>
        if((auto_squared.mask & homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask) && !limits_pull_off(auto_square, settings.homing.pulloff * HOMING_AXIS_LOCATE_SCALAR))
 80131b4:	4b14      	ldr	r3, [pc, #80]	@ (8013208 <limits_go_home+0x9c>)
 80131b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80131b8:	4798      	blx	r3
 80131ba:	f8ad 0004 	strh.w	r0, [sp, #4]
 80131be:	2200      	movs	r2, #0
 80131c0:	4611      	mov	r1, r2
 80131c2:	9801      	ldr	r0, [sp, #4]
 80131c4:	f7fe ffce 	bl	8012164 <homing_signals_select>
 80131c8:	4205      	tst	r5, r0
 80131ca:	d109      	bne.n	80131e0 <limits_go_home+0x74>
    return grbl.home_machine(cycle, auto_square) ? Status_OK : Status_Unhandled;
 80131cc:	4b10      	ldr	r3, [pc, #64]	@ (8013210 <limits_go_home+0xa4>)
 80131ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80131d2:	4621      	mov	r1, r4
 80131d4:	4638      	mov	r0, r7
 80131d6:	4798      	blx	r3
 80131d8:	b1a0      	cbz	r0, 8013204 <limits_go_home+0x98>
 80131da:	2000      	movs	r0, #0
}
 80131dc:	b003      	add	sp, #12
 80131de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((auto_squared.mask & homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask) && !limits_pull_off(auto_square, settings.homing.pulloff * HOMING_AXIS_LOCATE_SCALAR))
 80131e0:	4b0a      	ldr	r3, [pc, #40]	@ (801320c <limits_go_home+0xa0>)
 80131e2:	ed93 0a43 	vldr	s0, [r3, #268]	@ 0x10c
 80131e6:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80131ea:	ee20 0a27 	vmul.f32	s0, s0, s15
 80131ee:	4620      	mov	r0, r4
 80131f0:	f7ff f994 	bl	801251c <limits_pull_off>
 80131f4:	2800      	cmp	r0, #0
 80131f6:	d1e9      	bne.n	80131cc <limits_go_home+0x60>
            return Status_LimitsEngaged; // Auto squaring with limit switch asserted is not allowed.
 80131f8:	202d      	movs	r0, #45	@ 0x2d
 80131fa:	e7ef      	b.n	80131dc <limits_go_home+0x70>
            return Status_IllegalHomingConfiguration; // Bad driver! - should not happen.
 80131fc:	2037      	movs	r0, #55	@ 0x37
 80131fe:	e7ed      	b.n	80131dc <limits_go_home+0x70>
            return Status_IllegalHomingConfiguration; // Attempt at squaring more than one auto squared axis at the same time.
 8013200:	2037      	movs	r0, #55	@ 0x37
 8013202:	e7eb      	b.n	80131dc <limits_go_home+0x70>
    return grbl.home_machine(cycle, auto_square) ? Status_OK : Status_Unhandled;
 8013204:	2054      	movs	r0, #84	@ 0x54
 8013206:	e7e9      	b.n	80131dc <limits_go_home+0x70>
 8013208:	200011ac 	.word	0x200011ac
 801320c:	20001bc4 	.word	0x20001bc4
 8013210:	20001394 	.word	0x20001394

08013214 <limits_soft_check>:
{
 8013214:	b508      	push	{r3, lr}
    if(condition.target_validated ? !condition.target_valid : !grbl.check_travel_limits(target, sys.soft_limits, true)) {
 8013216:	f3c1 2307 	ubfx	r3, r1, #8, #8
 801321a:	f411 6f80 	tst.w	r1, #1024	@ 0x400
 801321e:	d006      	beq.n	801322e <limits_soft_check+0x1a>
 8013220:	0858      	lsrs	r0, r3, #1
 8013222:	f080 0001 	eor.w	r0, r0, #1
 8013226:	f000 0001 	and.w	r0, r0, #1
 801322a:	b960      	cbnz	r0, 8013246 <limits_soft_check+0x32>
}
 801322c:	bd08      	pop	{r3, pc}
    if(condition.target_validated ? !condition.target_valid : !grbl.check_travel_limits(target, sys.soft_limits, true)) {
 801322e:	4b16      	ldr	r3, [pc, #88]	@ (8013288 <limits_soft_check+0x74>)
 8013230:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8013234:	2201      	movs	r2, #1
 8013236:	4915      	ldr	r1, [pc, #84]	@ (801328c <limits_soft_check+0x78>)
 8013238:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 801323c:	4798      	blx	r3
 801323e:	f080 0001 	eor.w	r0, r0, #1
 8013242:	b2c0      	uxtb	r0, r0
 8013244:	e7f1      	b.n	801322a <limits_soft_check+0x16>
        sys.flags.soft_limit = On;
 8013246:	4a11      	ldr	r2, [pc, #68]	@ (801328c <limits_soft_check+0x78>)
 8013248:	7d93      	ldrb	r3, [r2, #22]
 801324a:	f043 0304 	orr.w	r3, r3, #4
 801324e:	7593      	strb	r3, [r2, #22]
        if(state_get() == STATE_CYCLE) {
 8013250:	f00b fa58 	bl	801e704 <state_get>
 8013254:	2808      	cmp	r0, #8
 8013256:	d10c      	bne.n	8013272 <limits_soft_check+0x5e>
            system_set_exec_state_flag(EXEC_FEED_HOLD);
 8013258:	4b0d      	ldr	r3, [pc, #52]	@ (8013290 <limits_soft_check+0x7c>)
 801325a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801325c:	2108      	movs	r1, #8
 801325e:	480d      	ldr	r0, [pc, #52]	@ (8013294 <limits_soft_check+0x80>)
 8013260:	4798      	blx	r3
                if(!protocol_execute_realtime())
 8013262:	f003 fee7 	bl	8017034 <protocol_execute_realtime>
 8013266:	2800      	cmp	r0, #0
 8013268:	d0e0      	beq.n	801322c <limits_soft_check+0x18>
            } while(state_get() != STATE_IDLE);
 801326a:	f00b fa4b 	bl	801e704 <state_get>
 801326e:	2800      	cmp	r0, #0
 8013270:	d1f7      	bne.n	8013262 <limits_soft_check+0x4e>
        mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 8013272:	f001 f911 	bl	8014498 <mc_reset>
        system_set_exec_alarm(Alarm_SoftLimit); // Indicate soft limit critical event
 8013276:	4b06      	ldr	r3, [pc, #24]	@ (8013290 <limits_soft_check+0x7c>)
 8013278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801327a:	2102      	movs	r1, #2
 801327c:	4806      	ldr	r0, [pc, #24]	@ (8013298 <limits_soft_check+0x84>)
 801327e:	4798      	blx	r3
        protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 8013280:	f003 fed8 	bl	8017034 <protocol_execute_realtime>
 8013284:	e7d2      	b.n	801322c <limits_soft_check+0x18>
 8013286:	bf00      	nop
 8013288:	20001394 	.word	0x20001394
 801328c:	2000148c 	.word	0x2000148c
 8013290:	200011ac 	.word	0x200011ac
 8013294:	200014d4 	.word	0x200014d4
 8013298:	200014d8 	.word	0x200014d8

0801329c <limits_set_homing_axes>:
    sys.homing.mask = 0;
 801329c:	4b0a      	ldr	r3, [pc, #40]	@ (80132c8 <limits_set_homing_axes+0x2c>)
 801329e:	2200      	movs	r2, #0
 80132a0:	769a      	strb	r2, [r3, #26]
    uint_fast8_t idx = N_AXIS;
 80132a2:	2203      	movs	r2, #3
        sys.homing.mask |= settings.homing.cycle[--idx].mask;
 80132a4:	3a01      	subs	r2, #1
 80132a6:	4b09      	ldr	r3, [pc, #36]	@ (80132cc <limits_set_homing_axes+0x30>)
 80132a8:	4413      	add	r3, r2
 80132aa:	f893 0115 	ldrb.w	r0, [r3, #277]	@ 0x115
 80132ae:	4906      	ldr	r1, [pc, #24]	@ (80132c8 <limits_set_homing_axes+0x2c>)
 80132b0:	7e8b      	ldrb	r3, [r1, #26]
 80132b2:	4303      	orrs	r3, r0
 80132b4:	768b      	strb	r3, [r1, #26]
    } while(idx);
 80132b6:	2a00      	cmp	r2, #0
 80132b8:	d1f4      	bne.n	80132a4 <limits_set_homing_axes+0x8>
    sys.homed.mask &= sys.homing.mask;
 80132ba:	460a      	mov	r2, r1
 80132bc:	f891 1054 	ldrb.w	r1, [r1, #84]	@ 0x54
 80132c0:	400b      	ands	r3, r1
 80132c2:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
}
 80132c6:	4770      	bx	lr
 80132c8:	2000148c 	.word	0x2000148c
 80132cc:	20001bc4 	.word	0x20001bc4

080132d0 <limits_homing_required>:
    return settings.homing.flags.enabled && settings.homing.flags.init_lock &&
 80132d0:	4b0f      	ldr	r3, [pc, #60]	@ (8013310 <limits_homing_required+0x40>)
 80132d2:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 80132d6:	f003 0205 	and.w	r2, r3, #5
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 80132da:	2a05      	cmp	r2, #5
 80132dc:	d001      	beq.n	80132e2 <limits_homing_required+0x12>
 80132de:	2000      	movs	r0, #0
 80132e0:	4770      	bx	lr
            (sys.cold_start || !settings.homing.flags.override_locks) &&
 80132e2:	4a0c      	ldr	r2, [pc, #48]	@ (8013314 <limits_homing_required+0x44>)
 80132e4:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
    return settings.homing.flags.enabled && settings.homing.flags.init_lock &&
 80132e8:	b912      	cbnz	r2, 80132f0 <limits_homing_required+0x20>
            (sys.cold_start || !settings.homing.flags.override_locks) &&
 80132ea:	f013 0f20 	tst.w	r3, #32
 80132ee:	d10b      	bne.n	8013308 <limits_homing_required+0x38>
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 80132f0:	4b08      	ldr	r3, [pc, #32]	@ (8013314 <limits_homing_required+0x44>)
 80132f2:	7e9b      	ldrb	r3, [r3, #26]
            (sys.cold_start || !settings.homing.flags.override_locks) &&
 80132f4:	b153      	cbz	r3, 801330c <limits_homing_required+0x3c>
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 80132f6:	4a07      	ldr	r2, [pc, #28]	@ (8013314 <limits_homing_required+0x44>)
 80132f8:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80132fc:	4393      	bics	r3, r2
 80132fe:	d001      	beq.n	8013304 <limits_homing_required+0x34>
 8013300:	2001      	movs	r0, #1
}
 8013302:	4770      	bx	lr
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 8013304:	2000      	movs	r0, #0
 8013306:	4770      	bx	lr
 8013308:	2000      	movs	r0, #0
 801330a:	4770      	bx	lr
 801330c:	2000      	movs	r0, #0
 801330e:	4770      	bx	lr
 8013310:	20001bc4 	.word	0x20001bc4
 8013314:	2000148c 	.word	0x2000148c

08013318 <limits_init>:

void limits_init (void)
{
    hal.homing.get_feedrate = get_homing_rate;
 8013318:	4b08      	ldr	r3, [pc, #32]	@ (801333c <limits_init+0x24>)
 801331a:	4a09      	ldr	r2, [pc, #36]	@ (8013340 <limits_init+0x28>)
 801331c:	665a      	str	r2, [r3, #100]	@ 0x64
    grbl.check_travel_limits = check_travel_limits;
 801331e:	4b09      	ldr	r3, [pc, #36]	@ (8013344 <limits_init+0x2c>)
 8013320:	4a09      	ldr	r2, [pc, #36]	@ (8013348 <limits_init+0x30>)
 8013322:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    grbl.check_arc_travel_limits = check_arc_travel_limits;
 8013326:	4a09      	ldr	r2, [pc, #36]	@ (801334c <limits_init+0x34>)
 8013328:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    grbl.apply_jog_limits = apply_jog_limits;
 801332c:	4a08      	ldr	r2, [pc, #32]	@ (8013350 <limits_init+0x38>)
 801332e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    grbl.home_machine = homing_cycle;
 8013332:	4a08      	ldr	r2, [pc, #32]	@ (8013354 <limits_init+0x3c>)
 8013334:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
}
 8013338:	4770      	bx	lr
 801333a:	bf00      	nop
 801333c:	200011ac 	.word	0x200011ac
 8013340:	080121a1 	.word	0x080121a1
 8013344:	20001394 	.word	0x20001394
 8013348:	080121b9 	.word	0x080121b9
 801334c:	0801269d 	.word	0x0801269d
 8013350:	08012435 	.word	0x08012435
 8013354:	08012c71 	.word	0x08012c71

08013358 <message_get>:
    { .id = Message_Stop, .text = "Stop"}
};

const message_t *message_get (message_code_t id)
{
    uint_fast16_t idx = 0;
 8013358:	2300      	movs	r3, #0
    const message_t *msg = NULL;

    do {
        if(messages[idx].id == id)
 801335a:	4a07      	ldr	r2, [pc, #28]	@ (8013378 <message_get+0x20>)
 801335c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8013360:	4282      	cmp	r2, r0
 8013362:	d004      	beq.n	801336e <message_get+0x16>
            msg = &messages[idx];
    } while(msg == NULL && ++idx < Message_NextMessage);
 8013364:	3301      	adds	r3, #1
 8013366:	2b16      	cmp	r3, #22
 8013368:	d9f7      	bls.n	801335a <message_get+0x2>
 801336a:	2000      	movs	r0, #0

    return msg;
}
 801336c:	4770      	bx	lr
            msg = &messages[idx];
 801336e:	4802      	ldr	r0, [pc, #8]	@ (8013378 <message_get+0x20>)
 8013370:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    } while(msg == NULL && ++idx < Message_NextMessage);
 8013374:	4770      	bx	lr
 8013376:	bf00      	nop
 8013378:	0802ac50 	.word	0x0802ac50

0801337c <eval_bezier>:
// By Giovanni Mascellani - https://github.com/giomasce/Marlin

// Compute the linear interpolation between two real numbers.
static inline float interp (const float a, const float b, const float t)
{
    return (1.0f - t) * a + t * b;
 801337c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013380:	ee37 7a42 	vsub.f32	s14, s14, s4
 8013384:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013388:	ee60 7a82 	vmul.f32	s15, s1, s4
 801338c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013390:	ee60 0a87 	vmul.f32	s1, s1, s14
 8013394:	ee62 7a01 	vmul.f32	s15, s4, s2
 8013398:	ee70 0aa7 	vadd.f32	s1, s1, s15
 801339c:	ee21 1a07 	vmul.f32	s2, s2, s14
 80133a0:	ee62 1a21 	vmul.f32	s3, s4, s3
 80133a4:	ee31 1a21 	vadd.f32	s2, s2, s3
 80133a8:	ee67 7a00 	vmul.f32	s15, s14, s0
 80133ac:	ee62 6a20 	vmul.f32	s13, s4, s1
 80133b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80133b4:	ee60 0a87 	vmul.f32	s1, s1, s14
 80133b8:	ee22 1a01 	vmul.f32	s2, s4, s2
 80133bc:	ee70 0a81 	vadd.f32	s1, s1, s2
 80133c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80133c4:	ee22 2a20 	vmul.f32	s4, s4, s1
                icd = interp(c, d, t),
                iabc = interp(iab, ibc, t),
                ibcd = interp(ibc, icd, t);

    return interp(iabc, ibcd, t);
}
 80133c8:	ee32 0a27 	vadd.f32	s0, s4, s15
 80133cc:	4770      	bx	lr
	...

080133d0 <mc_line>:
{
 80133d0:	b538      	push	{r3, r4, r5, lr}
 80133d2:	4605      	mov	r5, r0
 80133d4:	460c      	mov	r4, r1
    if(!(pl_data->condition.target_validated && pl_data->condition.target_valid))
 80133d6:	7d4b      	ldrb	r3, [r1, #21]
 80133d8:	f003 0306 	and.w	r3, r3, #6
 80133dc:	2b06      	cmp	r3, #6
 80133de:	d10b      	bne.n	80133f8 <mc_line+0x28>
    if(state_get() != STATE_CHECK_MODE && protocol_execute_realtime()) {
 80133e0:	f00b f990 	bl	801e704 <state_get>
 80133e4:	2802      	cmp	r0, #2
 80133e6:	d10b      	bne.n	8013400 <mc_line+0x30>
    return !ABORTED;
 80133e8:	4b1b      	ldr	r3, [pc, #108]	@ (8013458 <mc_line+0x88>)
 80133ea:	781b      	ldrb	r3, [r3, #0]
 80133ec:	bb7b      	cbnz	r3, 801344e <mc_line+0x7e>
 80133ee:	4b1a      	ldr	r3, [pc, #104]	@ (8013458 <mc_line+0x88>)
 80133f0:	785b      	ldrb	r3, [r3, #1]
 80133f2:	b37b      	cbz	r3, 8013454 <mc_line+0x84>
 80133f4:	2300      	movs	r3, #0
 80133f6:	e02b      	b.n	8013450 <mc_line+0x80>
        limits_soft_check(target, pl_data->condition);
 80133f8:	6949      	ldr	r1, [r1, #20]
 80133fa:	f7ff ff0b 	bl	8013214 <limits_soft_check>
 80133fe:	e7ef      	b.n	80133e0 <mc_line+0x10>
    if(state_get() != STATE_CHECK_MODE && protocol_execute_realtime()) {
 8013400:	f003 fe18 	bl	8017034 <protocol_execute_realtime>
 8013404:	2800      	cmp	r0, #0
 8013406:	d0ef      	beq.n	80133e8 <mc_line+0x18>
            if(!protocol_execute_realtime())    // Check for any run-time commands
 8013408:	f003 fe14 	bl	8017034 <protocol_execute_realtime>
 801340c:	4603      	mov	r3, r0
 801340e:	b1f8      	cbz	r0, 8013450 <mc_line+0x80>
            if(plan_check_full_buffer())
 8013410:	f002 fe66 	bl	80160e0 <plan_check_full_buffer>
 8013414:	b110      	cbz	r0, 801341c <mc_line+0x4c>
                protocol_auto_cycle_start();    // Auto-cycle start when buffer is full.
 8013416:	f003 fad7 	bl	80169c8 <protocol_auto_cycle_start>
            if(!protocol_execute_realtime())    // Check for any run-time commands
 801341a:	e7f5      	b.n	8013408 <mc_line+0x38>
        if(!plan_buffer_line(target, pl_data) && pl_data->spindle.hal->cap.laser && pl_data->spindle.state.on && !pl_data->spindle.state.ccw) {
 801341c:	4621      	mov	r1, r4
 801341e:	4628      	mov	r0, r5
 8013420:	f002 ff00 	bl	8016224 <plan_buffer_line>
 8013424:	2800      	cmp	r0, #0
 8013426:	d1df      	bne.n	80133e8 <mc_line+0x18>
 8013428:	6923      	ldr	r3, [r4, #16]
 801342a:	7a9b      	ldrb	r3, [r3, #10]
 801342c:	f013 0f08 	tst.w	r3, #8
 8013430:	d0da      	beq.n	80133e8 <mc_line+0x18>
 8013432:	7a23      	ldrb	r3, [r4, #8]
 8013434:	f003 0303 	and.w	r3, r3, #3
 8013438:	2b01      	cmp	r3, #1
 801343a:	d1d5      	bne.n	80133e8 <mc_line+0x18>
            protocol_buffer_synchronize();
 801343c:	f004 f8c8 	bl	80175d0 <protocol_buffer_synchronize>
            pl_data->spindle.hal->set_state(pl_data->spindle.hal, pl_data->spindle.state, pl_data->spindle.rpm);
 8013440:	6920      	ldr	r0, [r4, #16]
 8013442:	6a03      	ldr	r3, [r0, #32]
 8013444:	ed94 0a01 	vldr	s0, [r4, #4]
 8013448:	7a21      	ldrb	r1, [r4, #8]
 801344a:	4798      	blx	r3
 801344c:	e7cc      	b.n	80133e8 <mc_line+0x18>
    return !ABORTED;
 801344e:	2300      	movs	r3, #0
}
 8013450:	4618      	mov	r0, r3
 8013452:	bd38      	pop	{r3, r4, r5, pc}
    return !ABORTED;
 8013454:	2301      	movs	r3, #1
 8013456:	e7fb      	b.n	8013450 <mc_line+0x80>
 8013458:	2000148c 	.word	0x2000148c
 801345c:	00000000 	.word	0x00000000

08013460 <mc_arc>:
{
 8013460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013464:	ed2d 8b06 	vpush	{d8-d10}
 8013468:	b0a9      	sub	sp, #164	@ 0xa4
 801346a:	4606      	mov	r6, r0
 801346c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801346e:	9103      	str	r1, [sp, #12]
 8013470:	4617      	mov	r7, r2
 8013472:	461c      	mov	r4, r3
 8013474:	9315      	str	r3, [sp, #84]	@ 0x54
 8013476:	eeb0 9a40 	vmov.f32	s18, s0
        .x = -(double)offset[plane.axis_0],
 801347a:	f89d 20e0 	ldrb.w	r2, [sp, #224]	@ 0xe0
 801347e:	9213      	str	r2, [sp, #76]	@ 0x4c
 8013480:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8013484:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013488:	9310      	str	r3, [sp, #64]	@ 0x40
 801348a:	6818      	ldr	r0, [r3, #0]
 801348c:	f7f4 ffa4 	bl	80083d8 <__aeabi_f2d>
 8013490:	4602      	mov	r2, r0
 8013492:	460b      	mov	r3, r1
 8013494:	4682      	mov	sl, r0
 8013496:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801349a:	f101 4b00 	add.w	fp, r1, #2147483648	@ 0x80000000
    point_2dd_t rv = {  // Radius vector from center to current location
 801349e:	e9cd ab22 	strd	sl, fp, [sp, #136]	@ 0x88
        .y = -(double)offset[plane.axis_1]
 80134a2:	f89d 30e1 	ldrb.w	r3, [sp, #225]	@ 0xe1
 80134a6:	9314      	str	r3, [sp, #80]	@ 0x50
 80134a8:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80134ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80134b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80134b2:	6818      	ldr	r0, [r3, #0]
 80134b4:	f7f4 ff90 	bl	80083d8 <__aeabi_f2d>
 80134b8:	4604      	mov	r4, r0
 80134ba:	460d      	mov	r5, r1
 80134bc:	ed9f 7ba8 	vldr	d7, [pc, #672]	@ 8013760 <mc_arc+0x300>
 80134c0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80134c4:	9004      	str	r0, [sp, #16]
 80134c6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80134ca:	9305      	str	r3, [sp, #20]
    point_2dd_t rv = {  // Radius vector from center to current location
 80134cc:	ed9d 7b04 	vldr	d7, [sp, #16]
 80134d0:	ed8d 7b24 	vstr	d7, [sp, #144]	@ 0x90
        .x = (double)position[plane.axis_0] - rv.x,
 80134d4:	eb07 0309 	add.w	r3, r7, r9
 80134d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80134da:	6818      	ldr	r0, [r3, #0]
 80134dc:	f7f4 ff7c 	bl	80083d8 <__aeabi_f2d>
 80134e0:	4602      	mov	r2, r0
 80134e2:	460b      	mov	r3, r1
 80134e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80134e8:	f7f4 fe18 	bl	800811c <__adddf3>
 80134ec:	4602      	mov	r2, r0
 80134ee:	460b      	mov	r3, r1
 80134f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    point_2dd_t center = {
 80134f4:	ec43 2b17 	vmov	d7, r2, r3
 80134f8:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
        .y = (double)position[plane.axis_1] - rv.y
 80134fc:	eb07 0308 	add.w	r3, r7, r8
 8013500:	9312      	str	r3, [sp, #72]	@ 0x48
 8013502:	6818      	ldr	r0, [r3, #0]
 8013504:	f7f4 ff68 	bl	80083d8 <__aeabi_f2d>
 8013508:	4602      	mov	r2, r0
 801350a:	460b      	mov	r3, r1
 801350c:	4620      	mov	r0, r4
 801350e:	4629      	mov	r1, r5
 8013510:	f7f4 fe04 	bl	800811c <__adddf3>
 8013514:	4603      	mov	r3, r0
 8013516:	460c      	mov	r4, r1
 8013518:	e9cd 3408 	strd	r3, r4, [sp, #32]
    point_2dd_t center = {
 801351c:	ec44 3b17 	vmov	d7, r3, r4
 8013520:	ed8d 7b20 	vstr	d7, [sp, #128]	@ 0x80
        .x = (double)target[plane.axis_0] - center.x,
 8013524:	44b1      	add	r9, r6
 8013526:	f8d9 0000 	ldr.w	r0, [r9]
 801352a:	f7f4 ff55 	bl	80083d8 <__aeabi_f2d>
 801352e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013532:	f7f4 fdf1 	bl	8008118 <__aeabi_dsub>
 8013536:	4604      	mov	r4, r0
 8013538:	460d      	mov	r5, r1
    point_2dd_t rt = {
 801353a:	e9cd 451a 	strd	r4, r5, [sp, #104]	@ 0x68
        .y = (double)target[plane.axis_1] - center.y
 801353e:	44b0      	add	r8, r6
 8013540:	f8d8 0000 	ldr.w	r0, [r8]
 8013544:	f7f4 ff48 	bl	80083d8 <__aeabi_f2d>
 8013548:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801354c:	f7f4 fde4 	bl	8008118 <__aeabi_dsub>
 8013550:	4680      	mov	r8, r0
 8013552:	4689      	mov	r9, r1
    point_2dd_t rt = {
 8013554:	e9cd 891c 	strd	r8, r9, [sp, #112]	@ 0x70
    float angular_travel = (float)atan2(rv.x * rt.y - rv.y * rt.x, rv.x * rt.x + rv.y * rt.y);
 8013558:	4602      	mov	r2, r0
 801355a:	460b      	mov	r3, r1
 801355c:	4650      	mov	r0, sl
 801355e:	4659      	mov	r1, fp
 8013560:	f7f4 ff92 	bl	8008488 <__aeabi_dmul>
 8013564:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8013568:	4622      	mov	r2, r4
 801356a:	462b      	mov	r3, r5
 801356c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013570:	f7f4 ff8a 	bl	8008488 <__aeabi_dmul>
 8013574:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013578:	4622      	mov	r2, r4
 801357a:	462b      	mov	r3, r5
 801357c:	4650      	mov	r0, sl
 801357e:	4659      	mov	r1, fp
 8013580:	f7f4 ff82 	bl	8008488 <__aeabi_dmul>
 8013584:	4604      	mov	r4, r0
 8013586:	460d      	mov	r5, r1
 8013588:	4642      	mov	r2, r8
 801358a:	464b      	mov	r3, r9
 801358c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013590:	f7f4 ff7a 	bl	8008488 <__aeabi_dmul>
 8013594:	4602      	mov	r2, r0
 8013596:	460b      	mov	r3, r1
 8013598:	4620      	mov	r0, r4
 801359a:	4629      	mov	r1, r5
 801359c:	f7f4 fdbe 	bl	800811c <__adddf3>
 80135a0:	ec41 0b18 	vmov	d8, r0, r1
 80135a4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80135a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80135ac:	f7f4 fdb4 	bl	8008118 <__aeabi_dsub>
 80135b0:	eeb0 1a48 	vmov.f32	s2, s16
 80135b4:	eef0 1a68 	vmov.f32	s3, s17
 80135b8:	ec41 0b10 	vmov	d0, r0, r1
 80135bc:	f013 fc66 	bl	8026e8c <atan2>
 80135c0:	ec51 0b10 	vmov	r0, r1, d0
 80135c4:	f7f5 fa58 	bl	8008a78 <__aeabi_d2f>
 80135c8:	ee08 0a10 	vmov	s16, r0
    if (turns > 0) { // Correct atan2 output per direction
 80135cc:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	f340 80b1 	ble.w	8013736 <mc_arc+0x2d6>
        if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON)
 80135d4:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8013770 <mc_arc+0x310>
 80135d8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80135dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135e0:	d80a      	bhi.n	80135f8 <mc_arc+0x198>
            angular_travel += 2.0f * M_PI;
 80135e2:	f7f4 fef9 	bl	80083d8 <__aeabi_f2d>
 80135e6:	a360      	add	r3, pc, #384	@ (adr r3, 8013768 <mc_arc+0x308>)
 80135e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ec:	f7f4 fd96 	bl	800811c <__adddf3>
 80135f0:	f7f5 fa42 	bl	8008a78 <__aeabi_d2f>
 80135f4:	ee08 0a10 	vmov	s16, r0
    if(!pl_data->condition.target_validated && grbl.check_arc_travel_limits) {
 80135f8:	9d03      	ldr	r5, [sp, #12]
 80135fa:	7d6b      	ldrb	r3, [r5, #21]
 80135fc:	f013 0f04 	tst.w	r3, #4
 8013600:	d125      	bne.n	801364e <mc_arc+0x1ee>
 8013602:	4b5c      	ldr	r3, [pc, #368]	@ (8013774 <mc_arc+0x314>)
 8013604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8013608:	b30b      	cbz	r3, 801364e <mc_arc+0x1ee>
        pl_data->condition.target_validated = On;
 801360a:	7d6b      	ldrb	r3, [r5, #21]
 801360c:	f043 0304 	orr.w	r3, r3, #4
 8013610:	756b      	strb	r3, [r5, #21]
        pl_data->condition.target_valid = grbl.check_arc_travel_limits((coord_data_t *)target, (coord_data_t *)position,
 8013612:	4b58      	ldr	r3, [pc, #352]	@ (8013774 <mc_arc+0x314>)
 8013614:	f8d3 40e0 	ldr.w	r4, [r3, #224]	@ 0xe0
                                                                        (point_2d_t){ .x = (float)center.x, .y = (float)center.y },
 8013618:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801361c:	f7f5 fa2c 	bl	8008a78 <__aeabi_d2f>
 8013620:	ee08 0a90 	vmov	s17, r0
 8013624:	9026      	str	r0, [sp, #152]	@ 0x98
 8013626:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801362a:	f7f5 fa25 	bl	8008a78 <__aeabi_d2f>
 801362e:	ee00 0a90 	vmov	s1, r0
 8013632:	9027      	str	r0, [sp, #156]	@ 0x9c
        pl_data->condition.target_valid = grbl.check_arc_travel_limits((coord_data_t *)target, (coord_data_t *)position,
 8013634:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8013636:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8013638:	eeb0 1a49 	vmov.f32	s2, s18
 801363c:	eeb0 0a68 	vmov.f32	s0, s17
 8013640:	4639      	mov	r1, r7
 8013642:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8013644:	47a0      	blx	r4
 8013646:	7d6b      	ldrb	r3, [r5, #21]
 8013648:	f360 0341 	bfi	r3, r0, #1, #1
 801364c:	756b      	strb	r3, [r5, #21]
    if(labs(turns) > 1) {
 801364e:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8013650:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
 8013654:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
 8013658:	2e01      	cmp	r6, #1
 801365a:	f300 8093 	bgt.w	8013784 <mc_arc+0x324>
    if(2.0f * radius > settings.arc_tolerance)
 801365e:	ee79 7a09 	vadd.f32	s15, s18, s18
 8013662:	4b45      	ldr	r3, [pc, #276]	@ (8013778 <mc_arc+0x318>)
 8013664:	ed93 0a02 	vldr	s0, [r3, #8]
 8013668:	eef4 7ac0 	vcmpe.f32	s15, s0
 801366c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013670:	f340 81a5 	ble.w	80139be <mc_arc+0x55e>
        segments = (uint_fast16_t)floorf(fabsf(0.5f * angular_travel * radius) / sqrtf(settings.arc_tolerance * (2.0f * radius - settings.arc_tolerance)));
 8013674:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 8013678:	ee68 8a28 	vmul.f32	s17, s16, s17
 801367c:	ee68 8a89 	vmul.f32	s17, s17, s18
 8013680:	eef0 8ae8 	vabs.f32	s17, s17
 8013684:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013688:	ee20 0a27 	vmul.f32	s0, s0, s15
 801368c:	f013 fc58 	bl	8026f40 <sqrtf>
 8013690:	ee88 0a80 	vdiv.f32	s0, s17, s0
 8013694:	f013 fda4 	bl	80271e0 <floorf>
 8013698:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801369c:	ee17 9a90 	vmov	r9, s15
    if(segments) {
 80136a0:	f1b9 0f00 	cmp.w	r9, #0
 80136a4:	f000 818b 	beq.w	80139be <mc_arc+0x55e>
        if (pl_data->condition.inverse_time) {
 80136a8:	9a03      	ldr	r2, [sp, #12]
 80136aa:	7d13      	ldrb	r3, [r2, #20]
 80136ac:	f013 0f20 	tst.w	r3, #32
 80136b0:	d00b      	beq.n	80136ca <mc_arc+0x26a>
            pl_data->feed_rate *= segments;
 80136b2:	ed92 7a00 	vldr	s14, [r2]
 80136b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80136ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80136be:	edc2 7a00 	vstr	s15, [r2]
            pl_data->condition.inverse_time = Off; // Force as feed absolute mode over arc segments.
 80136c2:	7d13      	ldrb	r3, [r2, #20]
 80136c4:	f36f 1345 	bfc	r3, #5, #1
 80136c8:	7513      	strb	r3, [r2, #20]
        float theta_per_segment = angular_travel / segments;
 80136ca:	ee07 9a90 	vmov	s15, r9
 80136ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80136d2:	eec8 aa07 	vdiv.f32	s21, s16, s14
        float linear_per_segment = (target[plane.axis_linear] - position[plane.axis_linear]) / segments;
 80136d6:	f89d 30e2 	ldrb.w	r3, [sp, #226]	@ 0xe2
 80136da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80136dc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80136e0:	edd2 7a00 	vldr	s15, [r2]
 80136e4:	eb07 0683 	add.w	r6, r7, r3, lsl #2
 80136e8:	edd6 6a00 	vldr	s13, [r6]
 80136ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80136f0:	ee87 aa87 	vdiv.f32	s20, s15, s14
        float cos_T = 2.0f - theta_per_segment * theta_per_segment;
 80136f4:	ee2a 7aaa 	vmul.f32	s14, s21, s21
 80136f8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80136fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
        float sin_T = theta_per_segment * 0.16666667f * (cos_T + 4.0f);
 8013700:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801377c <mc_arc+0x31c>
 8013704:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 8013708:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801370c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013710:	ee26 7a87 	vmul.f32	s14, s13, s14
 8013714:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
        cos_T *= 0.5f;
 8013718:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801371c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013720:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
        uint_fast16_t i, count = 0;
 8013724:	f04f 0b00 	mov.w	fp, #0
        for (i = 1; i < segments; i++) { // Increment (segments-1).
 8013728:	f04f 0a01 	mov.w	sl, #1
 801372c:	46b8      	mov	r8, r7
 801372e:	464f      	mov	r7, r9
 8013730:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 8013734:	e0fb      	b.n	801392e <mc_arc+0x4ce>
    } else if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON)
 8013736:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8013780 <mc_arc+0x320>
 801373a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801373e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013742:	f6ff af59 	blt.w	80135f8 <mc_arc+0x198>
        angular_travel -= 2.0f * M_PI;
 8013746:	f7f4 fe47 	bl	80083d8 <__aeabi_f2d>
 801374a:	a307      	add	r3, pc, #28	@ (adr r3, 8013768 <mc_arc+0x308>)
 801374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013750:	f7f4 fce2 	bl	8008118 <__aeabi_dsub>
 8013754:	f7f5 f990 	bl	8008a78 <__aeabi_d2f>
 8013758:	ee08 0a10 	vmov	s16, r0
 801375c:	e74c      	b.n	80135f8 <mc_arc+0x198>
 801375e:	bf00      	nop
	...
 8013768:	54442d18 	.word	0x54442d18
 801376c:	401921fb 	.word	0x401921fb
 8013770:	350637bd 	.word	0x350637bd
 8013774:	20001394 	.word	0x20001394
 8013778:	20001bc4 	.word	0x20001bc4
 801377c:	3e2aaaab 	.word	0x3e2aaaab
 8013780:	b50637bd 	.word	0xb50637bd
        uint32_t n_turns = labs(turns) - 1;
 8013784:	3e01      	subs	r6, #1
        float arc_travel = 2.0f * M_PI * n_turns + angular_travel;
 8013786:	4630      	mov	r0, r6
 8013788:	f7f4 fe04 	bl	8008394 <__aeabi_ui2d>
 801378c:	a390      	add	r3, pc, #576	@ (adr r3, 80139d0 <mc_arc+0x570>)
 801378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013792:	f7f4 fe79 	bl	8008488 <__aeabi_dmul>
 8013796:	4604      	mov	r4, r0
 8013798:	460d      	mov	r5, r1
 801379a:	ee18 0a10 	vmov	r0, s16
 801379e:	f7f4 fe1b 	bl	80083d8 <__aeabi_f2d>
 80137a2:	4622      	mov	r2, r4
 80137a4:	462b      	mov	r3, r5
 80137a6:	f7f4 fcb9 	bl	800811c <__adddf3>
 80137aa:	f7f5 f965 	bl	8008a78 <__aeabi_d2f>
 80137ae:	ee06 0a90 	vmov	s13, r0
        float linear_per_turn = (target[plane.axis_linear] - position[plane.axis_linear]) / arc_travel * 2.0f * M_PI;
 80137b2:	f89d 40e2 	ldrb.w	r4, [sp, #226]	@ 0xe2
 80137b6:	00a5      	lsls	r5, r4, #2
 80137b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80137ba:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80137be:	edd3 7a00 	vldr	s15, [r3]
 80137c2:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 80137c6:	edd3 9a00 	vldr	s19, [r3]
 80137ca:	ee77 7ae9 	vsub.f32	s15, s15, s19
 80137ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80137d2:	ee77 7a07 	vadd.f32	s15, s14, s14
 80137d6:	ee17 0a90 	vmov	r0, s15
 80137da:	f7f4 fdfd 	bl	80083d8 <__aeabi_f2d>
 80137de:	a37e      	add	r3, pc, #504	@ (adr r3, 80139d8 <mc_arc+0x578>)
 80137e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137e4:	f7f4 fe50 	bl	8008488 <__aeabi_dmul>
 80137e8:	f7f5 f946 	bl	8008a78 <__aeabi_d2f>
 80137ec:	ee08 0a90 	vmov	s17, r0
        memcpy(&arc_target, target, sizeof(coord_data_t));
 80137f0:	ab17      	add	r3, sp, #92	@ 0x5c
 80137f2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80137f4:	6810      	ldr	r0, [r2, #0]
 80137f6:	6851      	ldr	r1, [r2, #4]
 80137f8:	6892      	ldr	r2, [r2, #8]
 80137fa:	c307      	stmia	r3!, {r0, r1, r2}
        arc_target.values[plane.axis_0] = position[plane.axis_0];
 80137fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80137fe:	681a      	ldr	r2, [r3, #0]
 8013800:	a928      	add	r1, sp, #160	@ 0xa0
 8013802:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013804:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013808:	f843 2c44 	str.w	r2, [r3, #-68]
        arc_target.values[plane.axis_1] = position[plane.axis_1];
 801380c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801380e:	681a      	ldr	r2, [r3, #0]
 8013810:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013812:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013816:	f843 2c44 	str.w	r2, [r3, #-68]
        arc_target.values[plane.axis_linear] = position[plane.axis_linear];
 801381a:	f105 03a0 	add.w	r3, r5, #160	@ 0xa0
 801381e:	eb0d 0503 	add.w	r5, sp, r3
 8013822:	ed45 9a11 	vstr	s19, [r5, #-68]	@ 0xffffffbc
        while(n_turns--) {
 8013826:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
 801382a:	f8dd 80e4 	ldr.w	r8, [sp, #228]	@ 0xe4
 801382e:	e016      	b.n	801385e <mc_arc+0x3fe>
            mc_arc(arc_target.values, pl_data, position, offset, radius, plane, turns > 0 ? 1 : -1);
 8013830:	f04f 33ff 	mov.w	r3, #4294967295
 8013834:	9301      	str	r3, [sp, #4]
 8013836:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8013838:	f8ad 3000 	strh.w	r3, [sp]
 801383c:	0c1b      	lsrs	r3, r3, #16
 801383e:	f88d 3002 	strb.w	r3, [sp, #2]
 8013842:	eeb0 0a49 	vmov.f32	s0, s18
 8013846:	464b      	mov	r3, r9
 8013848:	463a      	mov	r2, r7
 801384a:	9903      	ldr	r1, [sp, #12]
 801384c:	a817      	add	r0, sp, #92	@ 0x5c
 801384e:	f7ff fe07 	bl	8013460 <mc_arc>
            memcpy(position, arc_target.values, sizeof(coord_data_t));
 8013852:	ab17      	add	r3, sp, #92	@ 0x5c
 8013854:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013856:	6038      	str	r0, [r7, #0]
 8013858:	6079      	str	r1, [r7, #4]
 801385a:	60ba      	str	r2, [r7, #8]
        while(n_turns--) {
 801385c:	462e      	mov	r6, r5
 801385e:	1e75      	subs	r5, r6, #1
 8013860:	2e00      	cmp	r6, #0
 8013862:	f43f aefc 	beq.w	801365e <mc_arc+0x1fe>
            arc_target.values[plane.axis_linear] += linear_per_turn;
 8013866:	ab28      	add	r3, sp, #160	@ 0xa0
 8013868:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801386c:	ed53 7a11 	vldr	s15, [r3, #-68]	@ 0xffffffbc
 8013870:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8013874:	ed43 7a11 	vstr	s15, [r3, #-68]	@ 0xffffffbc
            mc_arc(arc_target.values, pl_data, position, offset, radius, plane, turns > 0 ? 1 : -1);
 8013878:	f1b8 0f00 	cmp.w	r8, #0
 801387c:	ddd8      	ble.n	8013830 <mc_arc+0x3d0>
 801387e:	2301      	movs	r3, #1
 8013880:	e7d8      	b.n	8013834 <mc_arc+0x3d4>
                cos_Ti = cosf(i * theta_per_segment);
 8013882:	ee07 aa90 	vmov	s15, sl
 8013886:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 801388a:	ee28 8a2a 	vmul.f32	s16, s16, s21
 801388e:	eeb0 0a48 	vmov.f32	s0, s16
 8013892:	f013 fb73 	bl	8026f7c <cosf>
 8013896:	eef0 8a40 	vmov.f32	s17, s0
                sin_Ti = sinf(i * theta_per_segment);
 801389a:	eeb0 0a48 	vmov.f32	s0, s16
 801389e:	f013 fbb1 	bl	8027004 <sinf>
 80138a2:	eeb0 9a40 	vmov.f32	s18, s0
                rv.x = -offset[plane.axis_0] * cos_Ti + offset[plane.axis_1] * sin_Ti;
 80138a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80138a8:	edd3 7a00 	vldr	s15, [r3]
 80138ac:	eef1 9a67 	vneg.f32	s19, s15
 80138b0:	ee67 7ae8 	vnmul.f32	s15, s15, s17
 80138b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80138b6:	ed93 8a00 	vldr	s16, [r3]
 80138ba:	ee28 7a00 	vmul.f32	s14, s16, s0
 80138be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80138c2:	ee17 0a90 	vmov	r0, s15
 80138c6:	f7f4 fd87 	bl	80083d8 <__aeabi_f2d>
 80138ca:	e9cd 0122 	strd	r0, r1, [sp, #136]	@ 0x88
                rv.y = -offset[plane.axis_0] * sin_Ti - offset[plane.axis_1] * cos_Ti;
 80138ce:	ee69 9a89 	vmul.f32	s19, s19, s18
 80138d2:	ee28 8a28 	vmul.f32	s16, s16, s17
 80138d6:	ee79 7ac8 	vsub.f32	s15, s19, s16
 80138da:	ee17 0a90 	vmov	r0, s15
 80138de:	f7f4 fd7b 	bl	80083d8 <__aeabi_f2d>
 80138e2:	e9cd 0124 	strd	r0, r1, [sp, #144]	@ 0x90
                count = 0;
 80138e6:	f04f 0b00 	mov.w	fp, #0
            position[plane.axis_0] = center.x + rv.x;
 80138ea:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	@ 0x88
 80138ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80138f2:	f7f4 fc13 	bl	800811c <__adddf3>
 80138f6:	f7f5 f8bf 	bl	8008a78 <__aeabi_d2f>
 80138fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80138fc:	6018      	str	r0, [r3, #0]
            position[plane.axis_1] = center.y + rv.y;
 80138fe:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
 8013902:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013906:	f7f4 fc09 	bl	800811c <__adddf3>
 801390a:	f7f5 f8b5 	bl	8008a78 <__aeabi_d2f>
 801390e:	f8c9 0000 	str.w	r0, [r9]
            position[plane.axis_linear] += linear_per_segment;
 8013912:	edd6 7a00 	vldr	s15, [r6]
 8013916:	ee77 7a8a 	vadd.f32	s15, s15, s20
 801391a:	edc6 7a00 	vstr	s15, [r6]
            if(!mc_line(position, pl_data))
 801391e:	9903      	ldr	r1, [sp, #12]
 8013920:	4640      	mov	r0, r8
 8013922:	f7ff fd55 	bl	80133d0 <mc_line>
 8013926:	2800      	cmp	r0, #0
 8013928:	d04d      	beq.n	80139c6 <mc_arc+0x566>
        for (i = 1; i < segments; i++) { // Increment (segments-1).
 801392a:	f10a 0a01 	add.w	sl, sl, #1
 801392e:	45ba      	cmp	sl, r7
 8013930:	d245      	bcs.n	80139be <mc_arc+0x55e>
            if (count < N_ARC_CORRECTION) {
 8013932:	f1bb 0f0b 	cmp.w	fp, #11
 8013936:	d8a4      	bhi.n	8013882 <mc_arc+0x422>
                r_axisi = rv.x * sin_T + rv.y * cos_T;
 8013938:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	@ 0x88
 801393c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801393e:	f7f4 fd4b 	bl	80083d8 <__aeabi_f2d>
 8013942:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013946:	4602      	mov	r2, r0
 8013948:	460b      	mov	r3, r1
 801394a:	4620      	mov	r0, r4
 801394c:	4629      	mov	r1, r5
 801394e:	f7f4 fd9b 	bl	8008488 <__aeabi_dmul>
 8013952:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013956:	ed9d 8b24 	vldr	d8, [sp, #144]	@ 0x90
 801395a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801395c:	f7f4 fd3c 	bl	80083d8 <__aeabi_f2d>
 8013960:	4602      	mov	r2, r0
 8013962:	460b      	mov	r3, r1
 8013964:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013968:	ec51 0b18 	vmov	r0, r1, d8
 801396c:	f7f4 fd8c 	bl	8008488 <__aeabi_dmul>
 8013970:	4602      	mov	r2, r0
 8013972:	460b      	mov	r3, r1
 8013974:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013978:	f7f4 fbd0 	bl	800811c <__adddf3>
 801397c:	f7f5 f87c 	bl	8008a78 <__aeabi_d2f>
 8013980:	900e      	str	r0, [sp, #56]	@ 0x38
                rv.x = rv.x * cos_T - rv.y * sin_T;
 8013982:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013986:	4620      	mov	r0, r4
 8013988:	4629      	mov	r1, r5
 801398a:	f7f4 fd7d 	bl	8008488 <__aeabi_dmul>
 801398e:	4604      	mov	r4, r0
 8013990:	460d      	mov	r5, r1
 8013992:	ec53 2b18 	vmov	r2, r3, d8
 8013996:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801399a:	f7f4 fd75 	bl	8008488 <__aeabi_dmul>
 801399e:	4602      	mov	r2, r0
 80139a0:	460b      	mov	r3, r1
 80139a2:	4620      	mov	r0, r4
 80139a4:	4629      	mov	r1, r5
 80139a6:	f7f4 fbb7 	bl	8008118 <__aeabi_dsub>
 80139aa:	e9cd 0122 	strd	r0, r1, [sp, #136]	@ 0x88
                rv.y = r_axisi;
 80139ae:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80139b0:	f7f4 fd12 	bl	80083d8 <__aeabi_f2d>
 80139b4:	e9cd 0124 	strd	r0, r1, [sp, #144]	@ 0x90
                count++;
 80139b8:	f10b 0b01 	add.w	fp, fp, #1
 80139bc:	e795      	b.n	80138ea <mc_arc+0x48a>
    mc_line(target, pl_data);
 80139be:	9903      	ldr	r1, [sp, #12]
 80139c0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80139c2:	f7ff fd05 	bl	80133d0 <mc_line>
}
 80139c6:	b029      	add	sp, #164	@ 0xa4
 80139c8:	ecbd 8b06 	vpop	{d8-d10}
 80139cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139d0:	54442d18 	.word	0x54442d18
 80139d4:	401921fb 	.word	0x401921fb
 80139d8:	54442d18 	.word	0x54442d18
 80139dc:	400921fb 	.word	0x400921fb

080139e0 <mc_cubic_b_spline>:
 * the mitigation offered by MIN_STEP and the small computational
 * power available on Arduino, I think it is not wise to implement it.
 */

void mc_cubic_b_spline (float *target, plan_line_data_t *pl_data, float *position, float *first, float *second)
{
 80139e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80139e4:	ed2d 8b10 	vpush	{d8-d15}
 80139e8:	b085      	sub	sp, #20
 80139ea:	4607      	mov	r7, r0
 80139ec:	4689      	mov	r9, r1
 80139ee:	4615      	mov	r5, r2
 80139f0:	461e      	mov	r6, r3
 80139f2:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
    float bez_target[N_AXIS];

    memcpy(bez_target, position, sizeof(float) * N_AXIS);
 80139f6:	ab01      	add	r3, sp, #4
 80139f8:	6810      	ldr	r0, [r2, #0]
 80139fa:	6851      	ldr	r1, [r2, #4]
 80139fc:	6892      	ldr	r2, [r2, #8]
 80139fe:	c307      	stmia	r3!, {r0, r1, r2}

    float t = 0.0f, step = BEZIER_MAX_STEP;
 8013a00:	ed9f 8a80 	vldr	s16, [pc, #512]	@ 8013c04 <mc_cubic_b_spline+0x224>
 8013a04:	eddf 9a80 	vldr	s19, [pc, #512]	@ 8013c08 <mc_cubic_b_spline+0x228>

    while (t < 1.0f) {
 8013a08:	e011      	b.n	8013a2e <mc_cubic_b_spline+0x4e>
            new_pos1 = candidate_pos1;
            did_reduce = true;
        }

        // If we did not reduce the step, maybe we should enlarge it.
        if (!did_reduce) while (new_t - t <= BEZIER_MAX_STEP) {
 8013a0a:	2c00      	cmp	r4, #0
 8013a0c:	f000 809e 	beq.w	8013b4c <mc_cubic_b_spline+0x16c>
            assert(new_t - t >= (MIN_STEP) / 2.0);
            assert(new_t - t <= (MAX_STEP) * 2.0);
          }
        */

        step = new_t - t;
 8013a10:	ee39 8a69 	vsub.f32	s16, s18, s19
        t = new_t;

        bez_target[X_AXIS] = new_pos0;
 8013a14:	edcd aa01 	vstr	s21, [sp, #4]
        bez_target[Y_AXIS] = new_pos1;
 8013a18:	ed8d aa02 	vstr	s20, [sp, #8]

        // Bail mid-spline on system abort. Runtime command check already performed by mc_line.
        if(!mc_line(bez_target, pl_data))
 8013a1c:	4649      	mov	r1, r9
 8013a1e:	a801      	add	r0, sp, #4
 8013a20:	f7ff fcd6 	bl	80133d0 <mc_line>
 8013a24:	2800      	cmp	r0, #0
 8013a26:	f000 80e8 	beq.w	8013bfa <mc_cubic_b_spline+0x21a>
        t = new_t;
 8013a2a:	eef0 9a49 	vmov.f32	s19, s18
    while (t < 1.0f) {
 8013a2e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013a32:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a3a:	f140 80de 	bpl.w	8013bfa <mc_cubic_b_spline+0x21a>
        float new_t = t + step;
 8013a3e:	ee39 9a88 	vadd.f32	s18, s19, s16
        if(new_t > 1.0f)
 8013a42:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013a46:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8013a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a4e:	dd01      	ble.n	8013a54 <mc_cubic_b_spline+0x74>
            new_t = 1.0f;
 8013a50:	eeb0 9a67 	vmov.f32	s18, s15
        float new_pos0 = eval_bezier(position[X_AXIS], first[X_AXIS], second[X_AXIS], target[X_AXIS], new_t),
 8013a54:	ed95 ba00 	vldr	s22, [r5]
 8013a58:	edd6 ba00 	vldr	s23, [r6]
 8013a5c:	ed98 ca00 	vldr	s24, [r8]
 8013a60:	edd7 ca00 	vldr	s25, [r7]
 8013a64:	eeb0 2a49 	vmov.f32	s4, s18
 8013a68:	eef0 1a6c 	vmov.f32	s3, s25
 8013a6c:	eeb0 1a4c 	vmov.f32	s2, s24
 8013a70:	eef0 0a6b 	vmov.f32	s1, s23
 8013a74:	eeb0 0a4b 	vmov.f32	s0, s22
 8013a78:	f7ff fc80 	bl	801337c <eval_bezier>
 8013a7c:	eef0 aa40 	vmov.f32	s21, s0
              new_pos1 = eval_bezier(position[Y_AXIS], first[Y_AXIS], second[Y_AXIS], target[Y_AXIS], new_t);
 8013a80:	ed95 da01 	vldr	s26, [r5, #4]
 8013a84:	edd6 da01 	vldr	s27, [r6, #4]
 8013a88:	ed98 ea01 	vldr	s28, [r8, #4]
 8013a8c:	edd7 ea01 	vldr	s29, [r7, #4]
 8013a90:	eeb0 2a49 	vmov.f32	s4, s18
 8013a94:	eef0 1a6e 	vmov.f32	s3, s29
 8013a98:	eeb0 1a4e 	vmov.f32	s2, s28
 8013a9c:	eef0 0a6d 	vmov.f32	s1, s27
 8013aa0:	eeb0 0a4d 	vmov.f32	s0, s26
 8013aa4:	f7ff fc6a 	bl	801337c <eval_bezier>
 8013aa8:	eeb0 aa40 	vmov.f32	s20, s0
        bool did_reduce = false;
 8013aac:	2400      	movs	r4, #0
        while(new_t - t >= (BEZIER_MIN_STEP)) {
 8013aae:	ee79 7a69 	vsub.f32	s15, s18, s19
 8013ab2:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8013c0c <mc_cubic_b_spline+0x22c>
 8013ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013abe:	dba4      	blt.n	8013a0a <mc_cubic_b_spline+0x2a>
            const float candidate_t = 0.5f * (t + new_t),
 8013ac0:	ee39 8a89 	vadd.f32	s16, s19, s18
 8013ac4:	eeb6 fa00 	vmov.f32	s30, #96	@ 0x3f000000  0.5
 8013ac8:	ee28 8a0f 	vmul.f32	s16, s16, s30
                      candidate_pos0 = eval_bezier(position[X_AXIS], first[X_AXIS], second[X_AXIS], target[X_AXIS], candidate_t),
 8013acc:	eeb0 2a48 	vmov.f32	s4, s16
 8013ad0:	eef0 1a6c 	vmov.f32	s3, s25
 8013ad4:	eeb0 1a4c 	vmov.f32	s2, s24
 8013ad8:	eef0 0a6b 	vmov.f32	s1, s23
 8013adc:	eeb0 0a4b 	vmov.f32	s0, s22
 8013ae0:	f7ff fc4c 	bl	801337c <eval_bezier>
 8013ae4:	eef0 8a40 	vmov.f32	s17, s0
                      candidate_pos1 = eval_bezier(position[Y_AXIS], first[Y_AXIS], second[Y_AXIS], target[Y_AXIS], candidate_t),
 8013ae8:	eeb0 2a48 	vmov.f32	s4, s16
 8013aec:	eef0 1a6e 	vmov.f32	s3, s29
 8013af0:	eeb0 1a4e 	vmov.f32	s2, s28
 8013af4:	eef0 0a6d 	vmov.f32	s1, s27
 8013af8:	eeb0 0a4d 	vmov.f32	s0, s26
 8013afc:	f7ff fc3e 	bl	801337c <eval_bezier>
                      interp_pos0 = 0.5f * (bez_target[X_AXIS] + new_pos0),
 8013b00:	ed9d 7a01 	vldr	s14, [sp, #4]
 8013b04:	ee37 7a2a 	vadd.f32	s14, s14, s21
 8013b08:	ee27 7a0f 	vmul.f32	s14, s14, s30
                      interp_pos1 = 0.5f * (bez_target[Y_AXIS] + new_pos1);
 8013b0c:	eddd 7a02 	vldr	s15, [sp, #8]
 8013b10:	ee77 7a8a 	vadd.f32	s15, s15, s20
 8013b14:	ee67 7a8f 	vmul.f32	s15, s15, s30
    return fabsf(x1 - x2) + fabsf(y1 - y2);
 8013b18:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8013b1c:	eeb0 7ac7 	vabs.f32	s14, s14
 8013b20:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013b24:	eef0 7ae7 	vabs.f32	s15, s15
 8013b28:	ee77 7a87 	vadd.f32	s15, s15, s14
            if (dist1(candidate_pos0, candidate_pos1, interp_pos0, interp_pos1) <= (BEZIER_SIGMA))
 8013b2c:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8013c04 <mc_cubic_b_spline+0x224>
 8013b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b38:	f67f af67 	bls.w	8013a0a <mc_cubic_b_spline+0x2a>
            new_pos1 = candidate_pos1;
 8013b3c:	eeb0 aa40 	vmov.f32	s20, s0
            new_pos0 = candidate_pos0;
 8013b40:	eef0 aa68 	vmov.f32	s21, s17
            new_t = candidate_t;
 8013b44:	eeb0 9a48 	vmov.f32	s18, s16
            did_reduce = true;
 8013b48:	2401      	movs	r4, #1
 8013b4a:	e7b0      	b.n	8013aae <mc_cubic_b_spline+0xce>
        if (!did_reduce) while (new_t - t <= BEZIER_MAX_STEP) {
 8013b4c:	ee39 8a69 	vsub.f32	s16, s18, s19
 8013b50:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8013c04 <mc_cubic_b_spline+0x224>
 8013b54:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b5c:	f63f af58 	bhi.w	8013a10 <mc_cubic_b_spline+0x30>
            const float candidate_t = t + 2.0f * (new_t - t);
 8013b60:	ee38 8a08 	vadd.f32	s16, s16, s16
 8013b64:	ee38 8a29 	vadd.f32	s16, s16, s19
            if (candidate_t >= 1.0f)
 8013b68:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013b6c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b74:	f6bf af4c 	bge.w	8013a10 <mc_cubic_b_spline+0x30>
            const float candidate_pos0 = eval_bezier(position[X_AXIS], first[X_AXIS], second[X_AXIS], target[X_AXIS], candidate_t),
 8013b78:	eeb0 2a48 	vmov.f32	s4, s16
 8013b7c:	eef0 1a6c 	vmov.f32	s3, s25
 8013b80:	eeb0 1a4c 	vmov.f32	s2, s24
 8013b84:	eef0 0a6b 	vmov.f32	s1, s23
 8013b88:	eeb0 0a4b 	vmov.f32	s0, s22
 8013b8c:	f7ff fbf6 	bl	801337c <eval_bezier>
 8013b90:	eef0 8a40 	vmov.f32	s17, s0
                      candidate_pos1 = eval_bezier(position[Y_AXIS], first[Y_AXIS], second[Y_AXIS], target[Y_AXIS], candidate_t),
 8013b94:	eeb0 2a48 	vmov.f32	s4, s16
 8013b98:	eef0 1a6e 	vmov.f32	s3, s29
 8013b9c:	eeb0 1a4e 	vmov.f32	s2, s28
 8013ba0:	eef0 0a6d 	vmov.f32	s1, s27
 8013ba4:	eeb0 0a4d 	vmov.f32	s0, s26
 8013ba8:	f7ff fbe8 	bl	801337c <eval_bezier>
                      interp_pos0 = 0.5f * (bez_target[X_AXIS] + candidate_pos0),
 8013bac:	eddd 7a01 	vldr	s15, [sp, #4]
 8013bb0:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8013bb4:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8013bb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
                      interp_pos1 = 0.5f * (bez_target[Y_AXIS] + candidate_pos1);
 8013bbc:	ed9d 7a02 	vldr	s14, [sp, #8]
 8013bc0:	ee37 7a00 	vadd.f32	s14, s14, s0
 8013bc4:	ee27 7a26 	vmul.f32	s14, s14, s13
    return fabsf(x1 - x2) + fabsf(y1 - y2);
 8013bc8:	ee7a 7ae7 	vsub.f32	s15, s21, s15
 8013bcc:	eef0 7ae7 	vabs.f32	s15, s15
 8013bd0:	ee3a 7a47 	vsub.f32	s14, s20, s14
 8013bd4:	eeb0 7ac7 	vabs.f32	s14, s14
 8013bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
            if (dist1(new_pos0, new_pos1, interp_pos0, interp_pos1) > (BEZIER_SIGMA))
 8013bdc:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8013c04 <mc_cubic_b_spline+0x224>
 8013be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013be8:	f73f af12 	bgt.w	8013a10 <mc_cubic_b_spline+0x30>
            new_pos1 = candidate_pos1;
 8013bec:	eeb0 aa40 	vmov.f32	s20, s0
            new_pos0 = candidate_pos0;
 8013bf0:	eef0 aa68 	vmov.f32	s21, s17
            new_t = candidate_t;
 8013bf4:	eeb0 9a48 	vmov.f32	s18, s16
 8013bf8:	e7a8      	b.n	8013b4c <mc_cubic_b_spline+0x16c>
            return;
    }
}
 8013bfa:	b005      	add	sp, #20
 8013bfc:	ecbd 8b10 	vpop	{d8-d15}
 8013c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c04:	3dcccccd 	.word	0x3dcccccd
 8013c08:	00000000 	.word	0x00000000
 8013c0c:	3b03126f 	.word	0x3b03126f

08013c10 <mc_thread>:
// R - depth regression, Q - compound slide angle, H - spring passes, E - taper, L - taper end

// TODO: change pitch to follow any tapers

void mc_thread (plan_line_data_t *pl_data, float *position, gc_thread_data *thread, bool feed_hold_disabled)
{
 8013c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c14:	ed2d 8b08 	vpush	{d8-d11}
 8013c18:	b085      	sub	sp, #20
 8013c1a:	4604      	mov	r4, r0
 8013c1c:	460f      	mov	r7, r1
 8013c1e:	4615      	mov	r5, r2
 8013c20:	4699      	mov	r9, r3
    uint_fast16_t pass = 1, passes = 0;
    float doc = thread->initial_depth, inv_degression = 1.0f / thread->depth_degression, thread_length;
 8013c22:	ed92 8a03 	vldr	s16, [r2, #12]
 8013c26:	edd2 7a05 	vldr	s15, [r2, #20]
 8013c2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013c2e:	eec7 8a27 	vdiv.f32	s17, s14, s15
    float entry_taper_length = thread->end_taper_type & Taper_Entry ? thread->end_taper_length : 0.0f;
 8013c32:	f892 a02c 	ldrb.w	sl, [r2, #44]	@ 0x2c
 8013c36:	f01a 0b01 	ands.w	fp, sl, #1
 8013c3a:	d067      	beq.n	8013d0c <mc_thread+0xfc>
 8013c3c:	ed92 aa07 	vldr	s20, [r2, #28]
    float exit_taper_length = thread->end_taper_type & Taper_Exit ? thread->end_taper_length : 0.0f;
 8013c40:	f01a 0a02 	ands.w	sl, sl, #2
 8013c44:	d065      	beq.n	8013d12 <mc_thread+0x102>
 8013c46:	edd5 aa07 	vldr	s21, [r5, #28]
    float infeed_factor = tanf(thread->infeed_angle * RADDEG);
 8013c4a:	ed95 0a08 	vldr	s0, [r5, #32]
 8013c4e:	eddf 7aae 	vldr	s15, [pc, #696]	@ 8013f08 <mc_thread+0x2f8>
 8013c52:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013c56:	f013 fa1b 	bl	8027090 <tanf>
 8013c5a:	eeb0 9a40 	vmov.f32	s18, s0
    float target[N_AXIS], start_z = position[Z_AXIS] + thread->depth * infeed_factor;
 8013c5e:	edd7 9a02 	vldr	s19, [r7, #8]
 8013c62:	ed95 ba04 	vldr	s22, [r5, #16]
 8013c66:	ee6b 7a00 	vmul.f32	s15, s22, s0
 8013c6a:	ee79 9aa7 	vadd.f32	s19, s19, s15

    memcpy(target, position, sizeof(float) * N_AXIS);
 8013c6e:	ab01      	add	r3, sp, #4
 8013c70:	6838      	ldr	r0, [r7, #0]
 8013c72:	6879      	ldr	r1, [r7, #4]
 8013c74:	68ba      	ldr	r2, [r7, #8]
 8013c76:	c307      	stmia	r3!, {r0, r1, r2}
    uint_fast16_t pass = 1, passes = 0;
 8013c78:	f04f 0800 	mov.w	r8, #0

    // Calculate number of passes
    while(calc_thread_doc(++passes, doc, inv_degression) < thread->depth);
 8013c7c:	f108 0801 	add.w	r8, r8, #1
    return cut_depth * powf((float)pass, inv_degression);
 8013c80:	eef0 0a68 	vmov.f32	s1, s17
 8013c84:	ee07 8a90 	vmov	s15, r8
 8013c88:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8013c8c:	f013 f900 	bl	8026e90 <powf>
 8013c90:	ee28 0a00 	vmul.f32	s0, s16, s0
    while(calc_thread_doc(++passes, doc, inv_degression) < thread->depth);
 8013c94:	eeb4 bac0 	vcmpe.f32	s22, s0
 8013c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c9c:	dcee      	bgt.n	8013c7c <mc_thread+0x6c>

    passes += thread->spring_passes + 1;
 8013c9e:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 8013ca0:	4446      	add	r6, r8
 8013ca2:	3601      	adds	r6, #1

    if((thread_length = thread->z_final - position[Z_AXIS]) > 0.0f) {
 8013ca4:	ed95 ba01 	vldr	s22, [r5, #4]
 8013ca8:	edd7 7a02 	vldr	s15, [r7, #8]
 8013cac:	ee3b ba67 	vsub.f32	s22, s22, s15
 8013cb0:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8013cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cb8:	dd09      	ble.n	8013cce <mc_thread+0xbe>
        if(thread->end_taper_type & Taper_Entry)
 8013cba:	f1bb 0f00 	cmp.w	fp, #0
 8013cbe:	d001      	beq.n	8013cc4 <mc_thread+0xb4>
            entry_taper_length = -entry_taper_length;
 8013cc0:	eeb1 aa4a 	vneg.f32	s20, s20
        if(thread->end_taper_type & Taper_Exit)
 8013cc4:	f1ba 0f00 	cmp.w	sl, #0
 8013cc8:	d001      	beq.n	8013cce <mc_thread+0xbe>
            exit_taper_length = - exit_taper_length;
 8013cca:	eef1 aa6a 	vneg.f32	s21, s21
    }

    thread_length += entry_taper_length + exit_taper_length;
 8013cce:	ee7a 7a2a 	vadd.f32	s15, s20, s21
 8013cd2:	ee37 ba8b 	vadd.f32	s22, s15, s22

    if(thread->main_taper_height != 0.0f)
 8013cd6:	ed95 7a06 	vldr	s14, [r5, #24]
 8013cda:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ce2:	d007      	beq.n	8013cf4 <mc_thread+0xe4>
        thread->main_taper_height = thread->main_taper_height * thread_length / (thread_length - (entry_taper_length + exit_taper_length));
 8013ce4:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8013ce8:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8013cec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013cf0:	edc5 6a06 	vstr	s13, [r5, #24]

    pl_data->condition.rapid_motion = On; // Set rapid motion condition flag.
 8013cf4:	7d23      	ldrb	r3, [r4, #20]
 8013cf6:	f043 0301 	orr.w	r3, r3, #1
 8013cfa:	7523      	strb	r3, [r4, #20]
    float acc_distance = pl_data->feed_rate * pl_data->spindle.hal->get_data(SpindleData_RPM)->rpm / settings.acceleration[Z_AXIS];
    acc_distance = acc_distance * acc_distance * settings.acceleration[Z_AXIS] * 0.5f;
     */

    // Initial Z-move for compound slide angle offset.
    if(infeed_factor != 0.0f) {
 8013cfc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8013d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d04:	d108      	bne.n	8013d18 <mc_thread+0x108>

            // Restore disable feed hold status for reposition move.
            pl_data->overrides.feed_hold_disable = feed_hold_disabled;

            // 5. Back to start, add compound slide angle offset when commanded.
            target[Z_AXIS] = start_z - (infeed_factor != 0.0f ? doc * infeed_factor : 0.0f);
 8013d06:	f04f 0801 	mov.w	r8, #1
 8013d0a:	e04f      	b.n	8013dac <mc_thread+0x19c>
    float entry_taper_length = thread->end_taper_type & Taper_Entry ? thread->end_taper_length : 0.0f;
 8013d0c:	ed9f aa7f 	vldr	s20, [pc, #508]	@ 8013f0c <mc_thread+0x2fc>
 8013d10:	e796      	b.n	8013c40 <mc_thread+0x30>
    float exit_taper_length = thread->end_taper_type & Taper_Exit ? thread->end_taper_length : 0.0f;
 8013d12:	eddf aa7e 	vldr	s21, [pc, #504]	@ 8013f0c <mc_thread+0x2fc>
 8013d16:	e798      	b.n	8013c4a <mc_thread+0x3a>
        target[Z_AXIS] = start_z - doc * infeed_factor;
 8013d18:	ee68 7a09 	vmul.f32	s15, s16, s18
 8013d1c:	ee79 7ae7 	vsub.f32	s15, s19, s15
 8013d20:	edcd 7a03 	vstr	s15, [sp, #12]
        if(!mc_line(target, pl_data))
 8013d24:	4621      	mov	r1, r4
 8013d26:	a801      	add	r0, sp, #4
 8013d28:	f7ff fb52 	bl	80133d0 <mc_line>
 8013d2c:	2800      	cmp	r0, #0
 8013d2e:	d1ea      	bne.n	8013d06 <mc_thread+0xf6>
            target[X_AXIS] = position[X_AXIS];
            if(!mc_line(target, pl_data))
                return;
        }
    }
}
 8013d30:	b005      	add	sp, #20
 8013d32:	ecbd 8b08 	vpop	{d8-d11}
 8013d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            target[X_AXIS] = position[X_AXIS] + (thread->peak + doc) * thread->cut_direction;
 8013d3a:	ed97 7a00 	vldr	s14, [r7]
 8013d3e:	edd5 7a02 	vldr	s15, [r5, #8]
 8013d42:	ee77 7a88 	vadd.f32	s15, s15, s16
 8013d46:	edd5 6a09 	vldr	s13, [r5, #36]	@ 0x24
 8013d4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d52:	edcd 7a01 	vstr	s15, [sp, #4]
 8013d56:	e042      	b.n	8013dde <mc_thread+0x1ce>
        if(!protocol_buffer_synchronize() && state_get() != STATE_IDLE) // Wait until any previous moves are finished.
 8013d58:	f00a fcd4 	bl	801e704 <state_get>
 8013d5c:	2800      	cmp	r0, #0
 8013d5e:	d048      	beq.n	8013df2 <mc_thread+0x1e2>
 8013d60:	e7e6      	b.n	8013d30 <mc_thread+0x120>
            target[X_AXIS] -= thread->depth * thread->cut_direction;
 8013d62:	ed95 7a04 	vldr	s14, [r5, #16]
 8013d66:	edd5 7a09 	vldr	s15, [r5, #36]	@ 0x24
 8013d6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013d6e:	eddd 7a01 	vldr	s15, [sp, #4]
 8013d72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013d76:	edcd 7a01 	vstr	s15, [sp, #4]
            target[Z_AXIS] -= exit_taper_length;
 8013d7a:	eddd 7a03 	vldr	s15, [sp, #12]
 8013d7e:	ee77 7aea 	vsub.f32	s15, s15, s21
 8013d82:	edcd 7a03 	vstr	s15, [sp, #12]
            if(!mc_line(target, pl_data))
 8013d86:	4621      	mov	r1, r4
 8013d88:	a801      	add	r0, sp, #4
 8013d8a:	f7ff fb21 	bl	80133d0 <mc_line>
 8013d8e:	2800      	cmp	r0, #0
 8013d90:	d16c      	bne.n	8013e6c <mc_thread+0x25c>
 8013d92:	e7cd      	b.n	8013d30 <mc_thread+0x120>
            target[Z_AXIS] = start_z - (infeed_factor != 0.0f ? doc * infeed_factor : 0.0f);
 8013d94:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8013f0c <mc_thread+0x2fc>
 8013d98:	ee79 7ae7 	vsub.f32	s15, s19, s15
 8013d9c:	edcd 7a03 	vstr	s15, [sp, #12]
            if(!mc_line(target, pl_data))
 8013da0:	4621      	mov	r1, r4
 8013da2:	a801      	add	r0, sp, #4
 8013da4:	f7ff fb14 	bl	80133d0 <mc_line>
 8013da8:	2800      	cmp	r0, #0
 8013daa:	d0c1      	beq.n	8013d30 <mc_thread+0x120>
    while(--passes) {
 8013dac:	3e01      	subs	r6, #1
 8013dae:	d0bf      	beq.n	8013d30 <mc_thread+0x120>
        if(thread->end_taper_type & Taper_Entry)
 8013db0:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013db4:	f013 0f01 	tst.w	r3, #1
 8013db8:	d0bf      	beq.n	8013d3a <mc_thread+0x12a>
            target[X_AXIS] = position[X_AXIS] + (thread->peak + doc - thread->depth) * thread->cut_direction;
 8013dba:	ed97 7a00 	vldr	s14, [r7]
 8013dbe:	edd5 7a02 	vldr	s15, [r5, #8]
 8013dc2:	ee77 7a88 	vadd.f32	s15, s15, s16
 8013dc6:	edd5 6a04 	vldr	s13, [r5, #16]
 8013dca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013dce:	edd5 6a09 	vldr	s13, [r5, #36]	@ 0x24
 8013dd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013dda:	edcd 7a01 	vstr	s15, [sp, #4]
        if(!mc_line(target, pl_data))
 8013dde:	4621      	mov	r1, r4
 8013de0:	a801      	add	r0, sp, #4
 8013de2:	f7ff faf5 	bl	80133d0 <mc_line>
 8013de6:	2800      	cmp	r0, #0
 8013de8:	d0a2      	beq.n	8013d30 <mc_thread+0x120>
        if(!protocol_buffer_synchronize() && state_get() != STATE_IDLE) // Wait until any previous moves are finished.
 8013dea:	f003 fbf1 	bl	80175d0 <protocol_buffer_synchronize>
 8013dee:	2800      	cmp	r0, #0
 8013df0:	d0b2      	beq.n	8013d58 <mc_thread+0x148>
        pl_data->condition.rapid_motion = Off;      // Clear rapid motion condition flag,
 8013df2:	7d23      	ldrb	r3, [r4, #20]
 8013df4:	f36f 0300 	bfc	r3, #0, #1
 8013df8:	7523      	strb	r3, [r4, #20]
        pl_data->spindle.state.synchronized = On;   // enable spindle sync for cut
 8013dfa:	7a23      	ldrb	r3, [r4, #8]
 8013dfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e00:	7223      	strb	r3, [r4, #8]
        pl_data->overrides.feed_hold_disable = On;  // and disable feed hold
 8013e02:	7e22      	ldrb	r2, [r4, #24]
 8013e04:	f042 0202 	orr.w	r2, r2, #2
 8013e08:	7622      	strb	r2, [r4, #24]
        if(thread->end_taper_type & Taper_Entry) {
 8013e0a:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013e0e:	f013 0f01 	tst.w	r3, #1
 8013e12:	d018      	beq.n	8013e46 <mc_thread+0x236>
            target[X_AXIS] += thread->depth * thread->cut_direction;
 8013e14:	ed95 7a04 	vldr	s14, [r5, #16]
 8013e18:	edd5 7a09 	vldr	s15, [r5, #36]	@ 0x24
 8013e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013e20:	eddd 7a01 	vldr	s15, [sp, #4]
 8013e24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013e28:	edcd 7a01 	vstr	s15, [sp, #4]
            target[Z_AXIS] -= entry_taper_length;
 8013e2c:	eddd 7a03 	vldr	s15, [sp, #12]
 8013e30:	ee77 7aca 	vsub.f32	s15, s15, s20
 8013e34:	edcd 7a03 	vstr	s15, [sp, #12]
            if(!mc_line(target, pl_data))
 8013e38:	4621      	mov	r1, r4
 8013e3a:	a801      	add	r0, sp, #4
 8013e3c:	f7ff fac8 	bl	80133d0 <mc_line>
 8013e40:	2800      	cmp	r0, #0
 8013e42:	f43f af75 	beq.w	8013d30 <mc_thread+0x120>
        target[Z_AXIS] += thread_length;
 8013e46:	eddd 7a03 	vldr	s15, [sp, #12]
 8013e4a:	ee77 7a8b 	vadd.f32	s15, s15, s22
 8013e4e:	edcd 7a03 	vstr	s15, [sp, #12]
        if(!mc_line(target, pl_data))
 8013e52:	4621      	mov	r1, r4
 8013e54:	a801      	add	r0, sp, #4
 8013e56:	f7ff fabb 	bl	80133d0 <mc_line>
 8013e5a:	2800      	cmp	r0, #0
 8013e5c:	f43f af68 	beq.w	8013d30 <mc_thread+0x120>
        if(thread->end_taper_type & Taper_Exit) {
 8013e60:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013e64:	f013 0f02 	tst.w	r3, #2
 8013e68:	f47f af7b 	bne.w	8013d62 <mc_thread+0x152>
        pl_data->condition.rapid_motion = On;       // Set rapid motion condition flag and
 8013e6c:	7d23      	ldrb	r3, [r4, #20]
 8013e6e:	f043 0301 	orr.w	r3, r3, #1
 8013e72:	7523      	strb	r3, [r4, #20]
        pl_data->spindle.state.synchronized = Off;  // disable spindle sync for retract & reposition
 8013e74:	7a23      	ldrb	r3, [r4, #8]
 8013e76:	f36f 13c7 	bfc	r3, #7, #1
 8013e7a:	7223      	strb	r3, [r4, #8]
        if(passes > 1) {
 8013e7c:	2e01      	cmp	r6, #1
 8013e7e:	d936      	bls.n	8013eee <mc_thread+0x2de>
            doc = calc_thread_doc(++pass, thread->initial_depth, inv_degression);
 8013e80:	f108 0801 	add.w	r8, r8, #1
 8013e84:	ed95 8a03 	vldr	s16, [r5, #12]
    return cut_depth * powf((float)pass, inv_degression);
 8013e88:	eef0 0a68 	vmov.f32	s1, s17
 8013e8c:	ee07 8a90 	vmov	s15, r8
 8013e90:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8013e94:	f012 fffc 	bl	8026e90 <powf>
 8013e98:	ee28 8a00 	vmul.f32	s16, s16, s0
            doc = min(doc, thread->depth);
 8013e9c:	edd5 7a04 	vldr	s15, [r5, #16]
 8013ea0:	eef4 7ac8 	vcmpe.f32	s15, s16
 8013ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ea8:	dc01      	bgt.n	8013eae <mc_thread+0x29e>
 8013eaa:	eeb0 8a67 	vmov.f32	s16, s15
            target[X_AXIS] = position[X_AXIS] + (doc - thread->depth) * thread->cut_direction;
 8013eae:	ed97 7a00 	vldr	s14, [r7]
 8013eb2:	ee78 7a67 	vsub.f32	s15, s16, s15
 8013eb6:	edd5 6a09 	vldr	s13, [r5, #36]	@ 0x24
 8013eba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ec2:	edcd 7a01 	vstr	s15, [sp, #4]
            if(!mc_line(target, pl_data))
 8013ec6:	4621      	mov	r1, r4
 8013ec8:	a801      	add	r0, sp, #4
 8013eca:	f7ff fa81 	bl	80133d0 <mc_line>
 8013ece:	2800      	cmp	r0, #0
 8013ed0:	f43f af2e 	beq.w	8013d30 <mc_thread+0x120>
            pl_data->overrides.feed_hold_disable = feed_hold_disabled;
 8013ed4:	7e23      	ldrb	r3, [r4, #24]
 8013ed6:	f369 0341 	bfi	r3, r9, #1, #1
 8013eda:	7623      	strb	r3, [r4, #24]
            target[Z_AXIS] = start_z - (infeed_factor != 0.0f ? doc * infeed_factor : 0.0f);
 8013edc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8013ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ee4:	f43f af56 	beq.w	8013d94 <mc_thread+0x184>
 8013ee8:	ee68 7a09 	vmul.f32	s15, s16, s18
 8013eec:	e754      	b.n	8013d98 <mc_thread+0x188>
            doc = thread->depth;
 8013eee:	ed95 8a04 	vldr	s16, [r5, #16]
            target[X_AXIS] = position[X_AXIS];
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	9301      	str	r3, [sp, #4]
            if(!mc_line(target, pl_data))
 8013ef6:	4621      	mov	r1, r4
 8013ef8:	a801      	add	r0, sp, #4
 8013efa:	f7ff fa69 	bl	80133d0 <mc_line>
 8013efe:	2800      	cmp	r0, #0
 8013f00:	f47f af54 	bne.w	8013dac <mc_thread+0x19c>
 8013f04:	e714      	b.n	8013d30 <mc_thread+0x120>
 8013f06:	bf00      	nop
 8013f08:	3c8efa35 	.word	0x3c8efa35
 8013f0c:	00000000 	.word	0x00000000

08013f10 <mc_jog_execute>:

// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
status_code_t mc_jog_execute (plan_line_data_t *pl_data, parser_block_t *gc_block, float *position)
{
 8013f10:	b538      	push	{r3, r4, r5, lr}
 8013f12:	4604      	mov	r4, r0
 8013f14:	460d      	mov	r5, r1
    // Initialize planner data struct for jogging motions.
    // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
    pl_data->feed_rate = gc_block->values.f;
 8013f16:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
 8013f18:	6003      	str	r3, [r0, #0]
    pl_data->condition.no_feed_override =
    pl_data->condition.jog_motion =
    pl_data->condition.target_valid =
    pl_data->condition.target_validated = On;
 8013f1a:	7d43      	ldrb	r3, [r0, #21]
 8013f1c:	f043 0304 	orr.w	r3, r3, #4
 8013f20:	7543      	strb	r3, [r0, #21]
    pl_data->condition.target_valid =
 8013f22:	b2db      	uxtb	r3, r3
 8013f24:	f043 0302 	orr.w	r3, r3, #2
 8013f28:	7543      	strb	r3, [r0, #21]
    pl_data->condition.jog_motion =
 8013f2a:	7d03      	ldrb	r3, [r0, #20]
 8013f2c:	f043 0304 	orr.w	r3, r3, #4
 8013f30:	7503      	strb	r3, [r0, #20]
    pl_data->condition.no_feed_override =
 8013f32:	b2db      	uxtb	r3, r3
 8013f34:	f043 0310 	orr.w	r3, r3, #16
 8013f38:	7503      	strb	r3, [r0, #20]
    pl_data->line_number = gc_block->values.n;
 8013f3a:	f8d1 30a4 	ldr.w	r3, [r1, #164]	@ 0xa4
 8013f3e:	61c3      	str	r3, [r0, #28]

    if(settings.limits.flags.jog_soft_limited)
 8013f40:	4b1d      	ldr	r3, [pc, #116]	@ (8013fb8 <mc_jog_execute+0xa8>)
 8013f42:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 8013f46:	f013 0f08 	tst.w	r3, #8
 8013f4a:	d013      	beq.n	8013f74 <mc_jog_execute+0x64>
 8013f4c:	4611      	mov	r1, r2
        grbl.apply_jog_limits(gc_block->values.xyz, position);
 8013f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8013fbc <mc_jog_execute+0xac>)
 8013f50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8013f54:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 8013f58:	4798      	blx	r3
    else if(sys.soft_limits.mask && !grbl.check_travel_limits(gc_block->values.xyz, sys.soft_limits, true))
        return Status_TravelExceeded;

    // Valid jog command. Plan, set state, and execute.
    mc_line(gc_block->values.xyz, pl_data);
 8013f5a:	4621      	mov	r1, r4
 8013f5c:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 8013f60:	f7ff fa36 	bl	80133d0 <mc_line>

#ifndef KINEMATICS_API // kinematics may segment long jog moves triggering auto start (RUN)...
    sys_state_t state = state_get();
 8013f64:	f00a fbce 	bl	801e704 <state_get>
    if ((state == STATE_IDLE || state == STATE_TOOL_CHANGE) && plan_get_current_block() != NULL) { // Check if there is a block to execute.
 8013f68:	b1b8      	cbz	r0, 8013f9a <mc_jog_execute+0x8a>
 8013f6a:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8013f6e:	d014      	beq.n	8013f9a <mc_jog_execute+0x8a>
        st_prep_buffer();
        st_wake_up();  // NOTE: Manual start. No state machine required.
    }
#endif

    return Status_OK;
 8013f70:	2000      	movs	r0, #0
}
 8013f72:	bd38      	pop	{r3, r4, r5, pc}
    else if(sys.soft_limits.mask && !grbl.check_travel_limits(gc_block->values.xyz, sys.soft_limits, true))
 8013f74:	4b12      	ldr	r3, [pc, #72]	@ (8013fc0 <mc_jog_execute+0xb0>)
 8013f76:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d0ed      	beq.n	8013f5a <mc_jog_execute+0x4a>
 8013f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8013fbc <mc_jog_execute+0xac>)
 8013f80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8013f84:	2201      	movs	r2, #1
 8013f86:	490e      	ldr	r1, [pc, #56]	@ (8013fc0 <mc_jog_execute+0xb0>)
 8013f88:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 8013f8c:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 8013f90:	4798      	blx	r3
 8013f92:	2800      	cmp	r0, #0
 8013f94:	d1e1      	bne.n	8013f5a <mc_jog_execute+0x4a>
        return Status_TravelExceeded;
 8013f96:	200f      	movs	r0, #15
 8013f98:	e7eb      	b.n	8013f72 <mc_jog_execute+0x62>
    if ((state == STATE_IDLE || state == STATE_TOOL_CHANGE) && plan_get_current_block() != NULL) { // Check if there is a block to execute.
 8013f9a:	f002 f87f 	bl	801609c <plan_get_current_block>
 8013f9e:	b140      	cbz	r0, 8013fb2 <mc_jog_execute+0xa2>
        state_set(STATE_JOG);
 8013fa0:	2020      	movs	r0, #32
 8013fa2:	f00a fbb5 	bl	801e710 <state_set>
        st_prep_buffer();
 8013fa6:	f00b fbbb 	bl	801f720 <st_prep_buffer>
        st_wake_up();  // NOTE: Manual start. No state machine required.
 8013faa:	f00b f8c7 	bl	801f13c <st_wake_up>
    return Status_OK;
 8013fae:	2000      	movs	r0, #0
 8013fb0:	e7df      	b.n	8013f72 <mc_jog_execute+0x62>
 8013fb2:	2000      	movs	r0, #0
 8013fb4:	e7dd      	b.n	8013f72 <mc_jog_execute+0x62>
 8013fb6:	bf00      	nop
 8013fb8:	20001bc4 	.word	0x20001bc4
 8013fbc:	20001394 	.word	0x20001394
 8013fc0:	2000148c 	.word	0x2000148c

08013fc4 <mc_dwell>:

// Execute dwell in seconds.
void mc_dwell (float seconds)
{
 8013fc4:	b508      	push	{r3, lr}
 8013fc6:	ed2d 8b02 	vpush	{d8}
 8013fca:	eeb0 8a40 	vmov.f32	s16, s0
    if (state_get() != STATE_CHECK_MODE) {
 8013fce:	f00a fb99 	bl	801e704 <state_get>
 8013fd2:	2802      	cmp	r0, #2
 8013fd4:	d102      	bne.n	8013fdc <mc_dwell+0x18>
        protocol_buffer_synchronize();
        delay_sec(seconds, DelayMode_Dwell);
    }
}
 8013fd6:	ecbd 8b02 	vpop	{d8}
 8013fda:	bd08      	pop	{r3, pc}
        protocol_buffer_synchronize();
 8013fdc:	f003 faf8 	bl	80175d0 <protocol_buffer_synchronize>
        delay_sec(seconds, DelayMode_Dwell);
 8013fe0:	2000      	movs	r0, #0
 8013fe2:	eeb0 0a48 	vmov.f32	s0, s16
 8013fe6:	f001 fa5b 	bl	80154a0 <delay_sec>
}
 8013fea:	e7f4      	b.n	8013fd6 <mc_dwell+0x12>

08013fec <mc_canned_drill>:
{
 8013fec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ff0:	ed2d 8b02 	vpush	{d8}
 8013ff4:	4681      	mov	r9, r0
 8013ff6:	468a      	mov	sl, r1
 8013ff8:	4614      	mov	r4, r2
 8013ffa:	461f      	mov	r7, r3
 8013ffc:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
    pl_data->condition.rapid_motion = On; // Set rapid motion condition flag.
 8013ffe:	7d13      	ldrb	r3, [r2, #20]
 8014000:	f043 0301 	orr.w	r3, r3, #1
 8014004:	7513      	strb	r3, [r2, #20]
    if(position[plane.axis_linear] < canned->retract_position) {
 8014006:	f89d 8032 	ldrb.w	r8, [sp, #50]	@ 0x32
 801400a:	eb07 0688 	add.w	r6, r7, r8, lsl #2
 801400e:	ed96 7a00 	vldr	s14, [r6]
 8014012:	edd5 7a05 	vldr	s15, [r5, #20]
 8014016:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801401a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801401e:	d426      	bmi.n	801406e <mc_canned_drill+0x82>
    float position_linear = position[plane.axis_linear],
 8014020:	6833      	ldr	r3, [r6, #0]
          retract_to = canned->retract_mode == CCRetractMode_RPos ? canned->retract_position : position_linear;
 8014022:	7eaa      	ldrb	r2, [r5, #26]
 8014024:	2a01      	cmp	r2, #1
 8014026:	d02e      	beq.n	8014086 <mc_canned_drill+0x9a>
 8014028:	ee08 3a90 	vmov	s17, r3
    memcpy(position, target, sizeof(float) * N_AXIS);
 801402c:	f8da 0000 	ldr.w	r0, [sl]
 8014030:	f8da 1004 	ldr.w	r1, [sl, #4]
 8014034:	f8da 2008 	ldr.w	r2, [sl, #8]
 8014038:	6038      	str	r0, [r7, #0]
 801403a:	6079      	str	r1, [r7, #4]
 801403c:	60ba      	str	r2, [r7, #8]
    position[plane.axis_linear] = position_linear;
 801403e:	6033      	str	r3, [r6, #0]
    if(!mc_line(position, pl_data))
 8014040:	4621      	mov	r1, r4
 8014042:	4638      	mov	r0, r7
 8014044:	f7ff f9c4 	bl	80133d0 <mc_line>
 8014048:	b1c8      	cbz	r0, 801407e <mc_canned_drill+0x92>
    while(repeats--) {
 801404a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801404c:	f103 3bff 	add.w	fp, r3, #4294967295
 8014050:	2b00      	cmp	r3, #0
 8014052:	f000 80bc 	beq.w	80141ce <mc_canned_drill+0x1e2>
        if(position[plane.axis_linear] > canned->retract_position) {
 8014056:	ed96 7a00 	vldr	s14, [r6]
 801405a:	edd5 7a05 	vldr	s15, [r5, #20]
 801405e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014066:	dc11      	bgt.n	801408c <mc_canned_drill+0xa0>
        position_linear = position[plane.axis_linear];
 8014068:	edd6 7a00 	vldr	s15, [r6]
        while(position_linear > canned->xyz[plane.axis_linear]) {
 801406c:	e02f      	b.n	80140ce <mc_canned_drill+0xe2>
        position[plane.axis_linear] = canned->retract_position;
 801406e:	edc6 7a00 	vstr	s15, [r6]
        if(!mc_line(position, pl_data))
 8014072:	4611      	mov	r1, r2
 8014074:	4638      	mov	r0, r7
 8014076:	f7ff f9ab 	bl	80133d0 <mc_line>
 801407a:	2800      	cmp	r0, #0
 801407c:	d1d0      	bne.n	8014020 <mc_canned_drill+0x34>
}
 801407e:	ecbd 8b02 	vpop	{d8}
 8014082:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          retract_to = canned->retract_mode == CCRetractMode_RPos ? canned->retract_position : position_linear;
 8014086:	edd5 8a05 	vldr	s17, [r5, #20]
 801408a:	e7cf      	b.n	801402c <mc_canned_drill+0x40>
            position[plane.axis_linear] = canned->retract_position;
 801408c:	edc6 7a00 	vstr	s15, [r6]
            if(!mc_line(position, pl_data))
 8014090:	4621      	mov	r1, r4
 8014092:	4638      	mov	r0, r7
 8014094:	f7ff f99c 	bl	80133d0 <mc_line>
 8014098:	2800      	cmp	r0, #0
 801409a:	d1e5      	bne.n	8014068 <mc_canned_drill+0x7c>
 801409c:	e7ef      	b.n	801407e <mc_canned_drill+0x92>
                mc_dwell(canned->dwell);
 801409e:	f7ff ff91 	bl	8013fc4 <mc_dwell>
 80140a2:	e03b      	b.n	801411c <mc_canned_drill+0x130>
            switch(motion) {
 80140a4:	f1b9 0f49 	cmp.w	r9, #73	@ 0x49
 80140a8:	d043      	beq.n	8014132 <mc_canned_drill+0x146>
                    position[plane.axis_linear] = retract_to;
 80140aa:	edc6 8a00 	vstr	s17, [r6]
            pl_data->condition.rapid_motion = canned->rapid_retract;
 80140ae:	7e2a      	ldrb	r2, [r5, #24]
 80140b0:	7d23      	ldrb	r3, [r4, #20]
 80140b2:	f362 0300 	bfi	r3, r2, #0, #1
 80140b6:	7523      	strb	r3, [r4, #20]
            if(!mc_line(position, pl_data))
 80140b8:	4621      	mov	r1, r4
 80140ba:	4638      	mov	r0, r7
 80140bc:	f7ff f988 	bl	80133d0 <mc_line>
 80140c0:	2800      	cmp	r0, #0
 80140c2:	d0dc      	beq.n	801407e <mc_canned_drill+0x92>
            if(canned->spindle_off)
 80140c4:	7e6b      	ldrb	r3, [r5, #25]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d149      	bne.n	801415e <mc_canned_drill+0x172>
                                                   : position[plane.axis_linear] + settings.g73_retract;
 80140ca:	eef0 7a48 	vmov.f32	s15, s16
        while(position_linear > canned->xyz[plane.axis_linear]) {
 80140ce:	eb05 0388 	add.w	r3, r5, r8, lsl #2
 80140d2:	ed93 8a00 	vldr	s16, [r3]
 80140d6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80140da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140de:	d546      	bpl.n	801416e <mc_canned_drill+0x182>
            position_linear -= canned->delta;
 80140e0:	ed95 7a03 	vldr	s14, [r5, #12]
 80140e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
            if(position_linear < canned->xyz[plane.axis_linear])
 80140e8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80140ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140f0:	dc01      	bgt.n	80140f6 <mc_canned_drill+0x10a>
            position_linear -= canned->delta;
 80140f2:	eeb0 8a67 	vmov.f32	s16, s15
            pl_data->condition.rapid_motion = Off;
 80140f6:	7d23      	ldrb	r3, [r4, #20]
 80140f8:	f36f 0300 	bfc	r3, #0, #1
 80140fc:	7523      	strb	r3, [r4, #20]
            position[plane.axis_linear] = position_linear;
 80140fe:	ed86 8a00 	vstr	s16, [r6]
            if(!mc_line(position, pl_data)) // drill
 8014102:	4621      	mov	r1, r4
 8014104:	4638      	mov	r0, r7
 8014106:	f7ff f963 	bl	80133d0 <mc_line>
 801410a:	2800      	cmp	r0, #0
 801410c:	d0b7      	beq.n	801407e <mc_canned_drill+0x92>
            if(canned->dwell > 0.0f)
 801410e:	ed95 0a04 	vldr	s0, [r5, #16]
 8014112:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801411a:	dcc0      	bgt.n	801409e <mc_canned_drill+0xb2>
            if(canned->spindle_off)
 801411c:	7e6b      	ldrb	r3, [r5, #25]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d0c0      	beq.n	80140a4 <mc_canned_drill+0xb8>
                pl_data->spindle.hal->set_state(pl_data->spindle.hal, (spindle_state_t){0}, 0.0f);
 8014122:	6920      	ldr	r0, [r4, #16]
 8014124:	6a03      	ldr	r3, [r0, #32]
 8014126:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 80141e4 <mc_canned_drill+0x1f8>
 801412a:	f04f 0100 	mov.w	r1, #0
 801412e:	4798      	blx	r3
 8014130:	e7b8      	b.n	80140a4 <mc_canned_drill+0xb8>
                    position[plane.axis_linear] = position[plane.axis_linear] == canned->xyz[plane.axis_linear]
 8014132:	edd6 7a00 	vldr	s15, [r6]
 8014136:	eb05 0388 	add.w	r3, r5, r8, lsl #2
 801413a:	ed93 7a00 	vldr	s14, [r3]
                                                   : position[plane.axis_linear] + settings.g73_retract;
 801413e:	eef4 7a47 	vcmp.f32	s15, s14
 8014142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014146:	d005      	beq.n	8014154 <mc_canned_drill+0x168>
 8014148:	4b27      	ldr	r3, [pc, #156]	@ (80141e8 <mc_canned_drill+0x1fc>)
 801414a:	ed93 7a03 	vldr	s14, [r3, #12]
 801414e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014152:	e001      	b.n	8014158 <mc_canned_drill+0x16c>
 8014154:	eef0 7a68 	vmov.f32	s15, s17
                    position[plane.axis_linear] = position[plane.axis_linear] == canned->xyz[plane.axis_linear]
 8014158:	edc6 7a00 	vstr	s15, [r6]
                    break;
 801415c:	e7a7      	b.n	80140ae <mc_canned_drill+0xc2>
                spindle_sync(pl_data->spindle.hal, gc_state.modal.spindle.state, pl_data->spindle.rpm);
 801415e:	ed94 0a01 	vldr	s0, [r4, #4]
 8014162:	4b22      	ldr	r3, [pc, #136]	@ (80141ec <mc_canned_drill+0x200>)
 8014164:	7e99      	ldrb	r1, [r3, #26]
 8014166:	6920      	ldr	r0, [r4, #16]
 8014168:	f009 ff9e 	bl	801e0a8 <spindle_sync>
 801416c:	e7ad      	b.n	80140ca <mc_canned_drill+0xde>
        pl_data->condition.rapid_motion = On; // Set rapid motion condition flag.
 801416e:	7d23      	ldrb	r3, [r4, #20]
 8014170:	f043 0301 	orr.w	r3, r3, #1
 8014174:	7523      	strb	r3, [r4, #20]
        if(repeats && gc_state.modal.distance_incremental) {
 8014176:	f1bb 0f00 	cmp.w	fp, #0
 801417a:	d002      	beq.n	8014182 <mc_canned_drill+0x196>
 801417c:	4b1b      	ldr	r3, [pc, #108]	@ (80141ec <mc_canned_drill+0x200>)
 801417e:	791b      	ldrb	r3, [r3, #4]
 8014180:	b913      	cbnz	r3, 8014188 <mc_canned_drill+0x19c>
                                                   : position[plane.axis_linear] + settings.g73_retract;
 8014182:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8014186:	e760      	b.n	801404a <mc_canned_drill+0x5e>
            position[plane.axis_0] += canned->xyz[plane.axis_0];
 8014188:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 801418c:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 8014190:	edd2 7a00 	vldr	s15, [r2]
 8014194:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014198:	ed93 7a00 	vldr	s14, [r3]
 801419c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80141a0:	edc2 7a00 	vstr	s15, [r2]
            position[plane.axis_1] += canned->xyz[plane.axis_1];
 80141a4:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 80141a8:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 80141ac:	edd2 7a00 	vldr	s15, [r2]
 80141b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80141b4:	ed93 7a00 	vldr	s14, [r3]
 80141b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80141bc:	edc2 7a00 	vstr	s15, [r2]
            if(!mc_line(position, pl_data))
 80141c0:	4621      	mov	r1, r4
 80141c2:	4638      	mov	r0, r7
 80141c4:	f7ff f904 	bl	80133d0 <mc_line>
 80141c8:	2800      	cmp	r0, #0
 80141ca:	d1da      	bne.n	8014182 <mc_canned_drill+0x196>
 80141cc:	e757      	b.n	801407e <mc_canned_drill+0x92>
    memcpy(target, position, sizeof(float) * N_AXIS);
 80141ce:	6839      	ldr	r1, [r7, #0]
 80141d0:	687a      	ldr	r2, [r7, #4]
 80141d2:	68bb      	ldr	r3, [r7, #8]
 80141d4:	f8ca 1000 	str.w	r1, [sl]
 80141d8:	f8ca 2004 	str.w	r2, [sl, #4]
 80141dc:	f8ca 3008 	str.w	r3, [sl, #8]
 80141e0:	e74d      	b.n	801407e <mc_canned_drill+0x92>
 80141e2:	bf00      	nop
 80141e4:	00000000 	.word	0x00000000
 80141e8:	20001bc4 	.word	0x20001bc4
 80141ec:	20000ee4 	.word	0x20000ee4

080141f0 <mc_probe_cycle>:
}

// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
gc_probe_t mc_probe_cycle (float *target, plan_line_data_t *pl_data, gc_parser_flags_t parser_flags)
{
 80141f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141f4:	b084      	sub	sp, #16
 80141f6:	4605      	mov	r5, r0
 80141f8:	460f      	mov	r7, r1
 80141fa:	4616      	mov	r6, r2
    uint_fast8_t idx = N_AXIS;

    // TODO: Need to update this cycle so it obeys a non-auto cycle start.
    if (state_get() == STATE_CHECK_MODE)
 80141fc:	f00a fa82 	bl	801e704 <state_get>
 8014200:	2802      	cmp	r0, #2
 8014202:	f000 8108 	beq.w	8014416 <mc_probe_cycle+0x226>
    uint_fast8_t idx = N_AXIS;
 8014206:	2403      	movs	r4, #3
        return GCProbe_CheckMode;

    do {
        idx--;
 8014208:	3c01      	subs	r4, #1
        sys.probe_position[idx] = lroundf(target[idx] * settings.axis[idx].steps_per_mm);
 801420a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801420e:	ed93 0a00 	vldr	s0, [r3]
 8014212:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8014216:	4b82      	ldr	r3, [pc, #520]	@ (8014420 <mc_probe_cycle+0x230>)
 8014218:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801421c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8014220:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014224:	f012 ff6a 	bl	80270fc <lroundf>
 8014228:	f104 020e 	add.w	r2, r4, #14
 801422c:	4b7d      	ldr	r3, [pc, #500]	@ (8014424 <mc_probe_cycle+0x234>)
 801422e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    } while(idx);
 8014232:	2c00      	cmp	r4, #0
 8014234:	d1e8      	bne.n	8014208 <mc_probe_cycle+0x18>

    sys.probe_coordsys_id = gc_state.modal.coord_system.id;
 8014236:	4b7c      	ldr	r3, [pc, #496]	@ (8014428 <mc_probe_cycle+0x238>)
 8014238:	7d1a      	ldrb	r2, [r3, #20]
 801423a:	4b7a      	ldr	r3, [pc, #488]	@ (8014424 <mc_probe_cycle+0x234>)
 801423c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

    // Finish all queued commands and empty planner buffer before starting probe cycle.
    if (!protocol_buffer_synchronize())
 8014240:	f003 f9c6 	bl	80175d0 <protocol_buffer_synchronize>
 8014244:	4680      	mov	r8, r0
 8014246:	2800      	cmp	r0, #0
 8014248:	f000 80e7 	beq.w	801441a <mc_probe_cycle+0x22a>
        return GCProbe_Abort; // Return if system reset has been issued.

    // Initialize probing control variables
    sys.flags.probe_succeeded = Off; // Re-initialize probe history before beginning cycle.
 801424c:	4b75      	ldr	r3, [pc, #468]	@ (8014424 <mc_probe_cycle+0x234>)
 801424e:	7d9a      	ldrb	r2, [r3, #22]
 8014250:	f36f 0241 	bfc	r2, #1, #1
 8014254:	759a      	strb	r2, [r3, #22]
    hal.probe.configure(parser_flags.probe_is_away, true);
 8014256:	4b75      	ldr	r3, [pc, #468]	@ (801442c <mc_probe_cycle+0x23c>)
 8014258:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801425c:	2101      	movs	r1, #1
 801425e:	f3c6 00c0 	ubfx	r0, r6, #3, #1
 8014262:	4798      	blx	r3

#if COMPATIBILITY_LEVEL <= 1
    bool at_g59_3 = false, probe_toolsetter = grbl.on_probe_toolsetter != NULL && state_get() != STATE_TOOL_CHANGE && (sys.homed.mask & (X_AXIS_BIT|Y_AXIS_BIT));
 8014264:	4b72      	ldr	r3, [pc, #456]	@ (8014430 <mc_probe_cycle+0x240>)
 8014266:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801426a:	b1eb      	cbz	r3, 80142a8 <mc_probe_cycle+0xb8>
 801426c:	f00a fa4a 	bl	801e704 <state_get>
 8014270:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8014274:	d030      	beq.n	80142d8 <mc_probe_cycle+0xe8>
 8014276:	4b6b      	ldr	r3, [pc, #428]	@ (8014424 <mc_probe_cycle+0x234>)
 8014278:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 801427c:	f013 0f03 	tst.w	r3, #3
 8014280:	d103      	bne.n	801428a <mc_probe_cycle+0x9a>
 8014282:	f04f 0800 	mov.w	r8, #0
 8014286:	46c1      	mov	r9, r8
 8014288:	e011      	b.n	80142ae <mc_probe_cycle+0xbe>

    if(probe_toolsetter)
        grbl.on_probe_toolsetter(NULL, NULL, at_g59_3 = system_xy_at_fixture(CoordinateSystem_G59_3, TOOLSETTER_RADIUS), true);
 801428a:	4b69      	ldr	r3, [pc, #420]	@ (8014430 <mc_probe_cycle+0x240>)
 801428c:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 8014290:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8014294:	2008      	movs	r0, #8
 8014296:	f00d f96d 	bl	8021574 <system_xy_at_fixture>
 801429a:	4681      	mov	r9, r0
 801429c:	2301      	movs	r3, #1
 801429e:	4602      	mov	r2, r0
 80142a0:	2100      	movs	r1, #0
 80142a2:	4608      	mov	r0, r1
 80142a4:	47a0      	blx	r4
 80142a6:	e002      	b.n	80142ae <mc_probe_cycle+0xbe>
    bool at_g59_3 = false, probe_toolsetter = grbl.on_probe_toolsetter != NULL && state_get() != STATE_TOOL_CHANGE && (sys.homed.mask & (X_AXIS_BIT|Y_AXIS_BIT));
 80142a8:	f04f 0800 	mov.w	r8, #0
 80142ac:	46c1      	mov	r9, r8
#endif

    // After syncing, check if probe is already triggered or not connected. If so, halt and issue alarm.
    // NOTE: This probe initialization error applies to all probing cycles.
    probe_state_t probe = hal.probe.get_state();
 80142ae:	4b5f      	ldr	r3, [pc, #380]	@ (801442c <mc_probe_cycle+0x23c>)
 80142b0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80142b4:	4798      	blx	r3
    if (probe.triggered || !probe.connected) { // Check probe state.
 80142b6:	f000 0403 	and.w	r4, r0, #3
 80142ba:	2c02      	cmp	r4, #2
 80142bc:	d110      	bne.n	80142e0 <mc_probe_cycle+0xf0>
        protocol_execute_realtime();
        hal.probe.configure(false, false); // Re-initialize invert mask before returning.
        return GCProbe_FailInit; // Nothing else to do but bail.
    }

    if(grbl.on_probe_start) {
 80142be:	4b5c      	ldr	r3, [pc, #368]	@ (8014430 <mc_probe_cycle+0x240>)
 80142c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d040      	beq.n	801434a <mc_probe_cycle+0x15a>

        uint_fast8_t idx = N_AXIS;
        axes_signals_t axes = {0};
 80142c8:	f04f 0a00 	mov.w	sl, #0
        coord_data_t position;

        system_convert_array_steps_to_mpos(position.values, sys.position);
 80142cc:	4959      	ldr	r1, [pc, #356]	@ (8014434 <mc_probe_cycle+0x244>)
 80142ce:	a801      	add	r0, sp, #4
 80142d0:	f00d f932 	bl	8021538 <system_convert_array_steps_to_mpos>
        uint_fast8_t idx = N_AXIS;
 80142d4:	2303      	movs	r3, #3
 80142d6:	e015      	b.n	8014304 <mc_probe_cycle+0x114>
    bool at_g59_3 = false, probe_toolsetter = grbl.on_probe_toolsetter != NULL && state_get() != STATE_TOOL_CHANGE && (sys.homed.mask & (X_AXIS_BIT|Y_AXIS_BIT));
 80142d8:	f04f 0800 	mov.w	r8, #0
 80142dc:	46c1      	mov	r9, r8
 80142de:	e7e6      	b.n	80142ae <mc_probe_cycle+0xbe>
        system_set_exec_alarm(Alarm_ProbeFailInitial);
 80142e0:	4c52      	ldr	r4, [pc, #328]	@ (801442c <mc_probe_cycle+0x23c>)
 80142e2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80142e4:	2104      	movs	r1, #4
 80142e6:	4854      	ldr	r0, [pc, #336]	@ (8014438 <mc_probe_cycle+0x248>)
 80142e8:	4798      	blx	r3
        protocol_execute_realtime();
 80142ea:	f002 fea3 	bl	8017034 <protocol_execute_realtime>
        hal.probe.configure(false, false); // Re-initialize invert mask before returning.
 80142ee:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 80142f2:	2100      	movs	r1, #0
 80142f4:	4608      	mov	r0, r1
 80142f6:	4798      	blx	r3
        return GCProbe_FailInit; // Nothing else to do but bail.
 80142f8:	2402      	movs	r4, #2
    if(grbl.on_probe_completed)
        grbl.on_probe_completed();

    // Successful probe cycle or Failed to trigger probe within travel. With or without error.
    return sys.flags.probe_succeeded ? GCProbe_Found : GCProbe_FailEnd;
}
 80142fa:	4620      	mov	r0, r4
 80142fc:	b004      	add	sp, #16
 80142fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } while(idx);
 8014302:	b1db      	cbz	r3, 801433c <mc_probe_cycle+0x14c>
            idx--;
 8014304:	3b01      	subs	r3, #1
            if(fabsf(target[idx] - position.values[idx]) > TOLERANCE_EQUAL)
 8014306:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 801430a:	edd2 7a00 	vldr	s15, [r2]
 801430e:	aa04      	add	r2, sp, #16
 8014310:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014314:	ed12 7a03 	vldr	s14, [r2, #-12]
 8014318:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801431c:	eef0 7ae7 	vabs.f32	s15, s15
 8014320:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 801443c <mc_probe_cycle+0x24c>
 8014324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801432c:	dde9      	ble.n	8014302 <mc_probe_cycle+0x112>
                bit_true(axes.mask, bit(idx));
 801432e:	fa5f fa8a 	uxtb.w	sl, sl
 8014332:	2201      	movs	r2, #1
 8014334:	409a      	lsls	r2, r3
 8014336:	ea4a 0a02 	orr.w	sl, sl, r2
 801433a:	e7e2      	b.n	8014302 <mc_probe_cycle+0x112>
        grbl.on_probe_start(axes, target, pl_data);
 801433c:	4b3c      	ldr	r3, [pc, #240]	@ (8014430 <mc_probe_cycle+0x240>)
 801433e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014342:	463a      	mov	r2, r7
 8014344:	4629      	mov	r1, r5
 8014346:	4650      	mov	r0, sl
 8014348:	4798      	blx	r3
    if(!mc_line(target, pl_data))
 801434a:	4639      	mov	r1, r7
 801434c:	4628      	mov	r0, r5
 801434e:	f7ff f83f 	bl	80133d0 <mc_line>
 8014352:	2800      	cmp	r0, #0
 8014354:	d0d1      	beq.n	80142fa <mc_probe_cycle+0x10a>
    sys.probing_state = Probing_Active;
 8014356:	4833      	ldr	r0, [pc, #204]	@ (8014424 <mc_probe_cycle+0x234>)
 8014358:	2301      	movs	r3, #1
 801435a:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
    system_set_exec_state_flag(EXEC_CYCLE_START);
 801435e:	4b33      	ldr	r3, [pc, #204]	@ (801442c <mc_probe_cycle+0x23c>)
 8014360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014362:	2102      	movs	r1, #2
 8014364:	3048      	adds	r0, #72	@ 0x48
 8014366:	4798      	blx	r3
        if(!protocol_execute_realtime()) // Check for system abort
 8014368:	f002 fe64 	bl	8017034 <protocol_execute_realtime>
 801436c:	2800      	cmp	r0, #0
 801436e:	d0c4      	beq.n	80142fa <mc_probe_cycle+0x10a>
    } while (!(state_get() == STATE_IDLE || state_get() == STATE_TOOL_CHANGE));
 8014370:	f00a f9c8 	bl	801e704 <state_get>
 8014374:	b120      	cbz	r0, 8014380 <mc_probe_cycle+0x190>
 8014376:	f00a f9c5 	bl	801e704 <state_get>
 801437a:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 801437e:	d1f3      	bne.n	8014368 <mc_probe_cycle+0x178>
    if(sys.probing_state == Probing_Active) {
 8014380:	4b28      	ldr	r3, [pc, #160]	@ (8014424 <mc_probe_cycle+0x234>)
 8014382:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014386:	b2db      	uxtb	r3, r3
 8014388:	2b01      	cmp	r3, #1
 801438a:	d02f      	beq.n	80143ec <mc_probe_cycle+0x1fc>
        sys.flags.probe_succeeded = On; // Indicate to system the probing cycle completed successfully.
 801438c:	4a25      	ldr	r2, [pc, #148]	@ (8014424 <mc_probe_cycle+0x234>)
 801438e:	7d93      	ldrb	r3, [r2, #22]
 8014390:	f043 0302 	orr.w	r3, r3, #2
 8014394:	7593      	strb	r3, [r2, #22]
    sys.probing_state = Probing_Off;    // Ensure probe state monitor is disabled.
 8014396:	2000      	movs	r0, #0
 8014398:	4b22      	ldr	r3, [pc, #136]	@ (8014424 <mc_probe_cycle+0x234>)
 801439a:	f883 0044 	strb.w	r0, [r3, #68]	@ 0x44
    hal.probe.configure(false, false);  // Re-initialize invert mask.
 801439e:	4b23      	ldr	r3, [pc, #140]	@ (801442c <mc_probe_cycle+0x23c>)
 80143a0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80143a4:	4601      	mov	r1, r0
 80143a6:	4798      	blx	r3
    protocol_execute_realtime();        // Check and execute run-time commands
 80143a8:	f002 fe44 	bl	8017034 <protocol_execute_realtime>
    if(probe_toolsetter)
 80143ac:	f1b8 0f00 	cmp.w	r8, #0
 80143b0:	d007      	beq.n	80143c2 <mc_probe_cycle+0x1d2>
        grbl.on_probe_toolsetter(NULL, NULL, at_g59_3, false);
 80143b2:	4b1f      	ldr	r3, [pc, #124]	@ (8014430 <mc_probe_cycle+0x240>)
 80143b4:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 80143b8:	2300      	movs	r3, #0
 80143ba:	464a      	mov	r2, r9
 80143bc:	4619      	mov	r1, r3
 80143be:	4618      	mov	r0, r3
 80143c0:	47a0      	blx	r4
    st_reset();             // Reset step segment buffer.
 80143c2:	f00b f883 	bl	801f4cc <st_reset>
    plan_reset();           // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 80143c6:	f001 fdc5 	bl	8015f54 <plan_reset>
    plan_sync_position();   // Sync planner position to current machine position.
 80143ca:	f002 f8f1 	bl	80165b0 <plan_sync_position>
    if(settings.status_report.probe_coordinates)
 80143ce:	4b14      	ldr	r3, [pc, #80]	@ (8014420 <mc_probe_cycle+0x230>)
 80143d0:	f993 30fc 	ldrsb.w	r3, [r3, #252]	@ 0xfc
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	db1b      	blt.n	8014410 <mc_probe_cycle+0x220>
    if(grbl.on_probe_completed)
 80143d8:	4b15      	ldr	r3, [pc, #84]	@ (8014430 <mc_probe_cycle+0x240>)
 80143da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80143de:	b103      	cbz	r3, 80143e2 <mc_probe_cycle+0x1f2>
        grbl.on_probe_completed();
 80143e0:	4798      	blx	r3
    return sys.flags.probe_succeeded ? GCProbe_Found : GCProbe_FailEnd;
 80143e2:	4b10      	ldr	r3, [pc, #64]	@ (8014424 <mc_probe_cycle+0x234>)
 80143e4:	7d9c      	ldrb	r4, [r3, #22]
 80143e6:	f3c4 0440 	ubfx	r4, r4, #1, #1
 80143ea:	e786      	b.n	80142fa <mc_probe_cycle+0x10a>
        memcpy(sys.probe_position, sys.position, sizeof(sys.position));
 80143ec:	4b0d      	ldr	r3, [pc, #52]	@ (8014424 <mc_probe_cycle+0x234>)
 80143ee:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 80143f2:	3388      	adds	r3, #136	@ 0x88
 80143f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80143f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        if(!parser_flags.probe_is_no_error)
 80143fc:	f016 0f10 	tst.w	r6, #16
 8014400:	d1c9      	bne.n	8014396 <mc_probe_cycle+0x1a6>
            system_set_exec_alarm(Alarm_ProbeFailContact);
 8014402:	4b0a      	ldr	r3, [pc, #40]	@ (801442c <mc_probe_cycle+0x23c>)
 8014404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014406:	2105      	movs	r1, #5
 8014408:	f104 0014 	add.w	r0, r4, #20
 801440c:	4798      	blx	r3
 801440e:	e7c2      	b.n	8014396 <mc_probe_cycle+0x1a6>
        report_probe_parameters();
 8014410:	f004 fe68 	bl	80190e4 <report_probe_parameters>
 8014414:	e7e0      	b.n	80143d8 <mc_probe_cycle+0x1e8>
        return GCProbe_CheckMode;
 8014416:	2400      	movs	r4, #0
 8014418:	e76f      	b.n	80142fa <mc_probe_cycle+0x10a>
        return GCProbe_Abort; // Return if system reset has been issued.
 801441a:	2402      	movs	r4, #2
 801441c:	e76d      	b.n	80142fa <mc_probe_cycle+0x10a>
 801441e:	bf00      	nop
 8014420:	20001bc4 	.word	0x20001bc4
 8014424:	2000148c 	.word	0x2000148c
 8014428:	20000ee4 	.word	0x20000ee4
 801442c:	200011ac 	.word	0x200011ac
 8014430:	20001394 	.word	0x20001394
 8014434:	20001514 	.word	0x20001514
 8014438:	200014d8 	.word	0x200014d8
 801443c:	38d1b717 	.word	0x38d1b717

08014440 <mc_parking_motion>:


// Plans and executes the single special motion case for parking. Independent of main planner buffer.
// NOTE: Uses the always free planner ring buffer head to store motion parameters for execution.
bool mc_parking_motion (float *parking_target, plan_line_data_t *pl_data)
{
 8014440:	b510      	push	{r4, lr}
    bool ok;

    if (sys.abort)
 8014442:	4b0d      	ldr	r3, [pc, #52]	@ (8014478 <mc_parking_motion+0x38>)
 8014444:	781b      	ldrb	r3, [r3, #0]
 8014446:	b113      	cbz	r3, 801444e <mc_parking_motion+0xe>
        return false; // Block during abort.
 8014448:	2400      	movs	r4, #0
        st_prep_buffer();
        st_wake_up();
    }

    return ok;
}
 801444a:	4620      	mov	r0, r4
 801444c:	bd10      	pop	{r4, pc}
    if ((ok = plan_buffer_line(parking_target, pl_data))) {
 801444e:	f001 fee9 	bl	8016224 <plan_buffer_line>
 8014452:	4604      	mov	r4, r0
 8014454:	2800      	cmp	r0, #0
 8014456:	d0f8      	beq.n	801444a <mc_parking_motion+0xa>
        sys.step_control.execute_sys_motion = On;
 8014458:	4b07      	ldr	r3, [pc, #28]	@ (8014478 <mc_parking_motion+0x38>)
 801445a:	7e1a      	ldrb	r2, [r3, #24]
 801445c:	f042 0204 	orr.w	r2, r2, #4
 8014460:	761a      	strb	r2, [r3, #24]
        sys.step_control.end_motion = Off;  // Allow parking motion to execute, if feed hold is active.
 8014462:	b2d2      	uxtb	r2, r2
 8014464:	f36f 0200 	bfc	r2, #0, #1
 8014468:	761a      	strb	r2, [r3, #24]
        st_parking_setup_buffer();          // Setup step segment buffer for special parking motion case.
 801446a:	f00b f8d3 	bl	801f614 <st_parking_setup_buffer>
        st_prep_buffer();
 801446e:	f00b f957 	bl	801f720 <st_prep_buffer>
        st_wake_up();
 8014472:	f00a fe63 	bl	801f13c <st_wake_up>
 8014476:	e7e8      	b.n	801444a <mc_parking_motion+0xa>
 8014478:	2000148c 	.word	0x2000148c

0801447c <mc_override_ctrl_update>:

void mc_override_ctrl_update (gc_override_flags_t override_state)
{
 801447c:	b510      	push	{r4, lr}
 801447e:	4604      	mov	r4, r0
// Finish all queued commands before altering override control state
    protocol_buffer_synchronize();
 8014480:	f003 f8a6 	bl	80175d0 <protocol_buffer_synchronize>
    if (!sys.abort)
 8014484:	4b03      	ldr	r3, [pc, #12]	@ (8014494 <mc_override_ctrl_update+0x18>)
 8014486:	781b      	ldrb	r3, [r3, #0]
 8014488:	b913      	cbnz	r3, 8014490 <mc_override_ctrl_update+0x14>
        sys.override.control = override_state;
 801448a:	4b02      	ldr	r3, [pc, #8]	@ (8014494 <mc_override_ctrl_update+0x18>)
 801448c:	f883 4029 	strb.w	r4, [r3, #41]	@ 0x29
}
 8014490:	bd10      	pop	{r4, pc}
 8014492:	bf00      	nop
 8014494:	2000148c 	.word	0x2000148c

08014498 <mc_reset>:
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
ISR_CODE void ISR_FUNC(mc_reset)(void)
{
    // Only this function can set the system reset. Helps prevent multiple kill calls.
    if (bit_isfalse(sys.rt_exec_state, EXEC_RESET)) {
 8014498:	4b26      	ldr	r3, [pc, #152]	@ (8014534 <mc_reset+0x9c>)
 801449a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801449c:	f013 0f20 	tst.w	r3, #32
 80144a0:	d146      	bne.n	8014530 <mc_reset+0x98>
{
 80144a2:	b510      	push	{r4, lr}

        system_set_exec_state_flag(EXEC_RESET);
 80144a4:	4c24      	ldr	r4, [pc, #144]	@ (8014538 <mc_reset+0xa0>)
 80144a6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80144a8:	2120      	movs	r1, #32
 80144aa:	4824      	ldr	r0, [pc, #144]	@ (801453c <mc_reset+0xa4>)
 80144ac:	4798      	blx	r3

        if(hal.stream.suspend_read)
 80144ae:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 80144b2:	b10b      	cbz	r3, 80144b8 <mc_reset+0x20>
            hal.stream.suspend_read(false);
 80144b4:	2000      	movs	r0, #0
 80144b6:	4798      	blx	r3

        // Kill steppers only if in any motion state, i.e. cycle, actively holding, or homing.
        // NOTE: If steppers are kept enabled via the step idle delay setting, this also keeps
        // the steppers enabled by avoiding the go_idle call altogether, unless the motion state is
        // violated, by which, all bets are off.
        if ((state_get() & (STATE_CYCLE|STATE_HOMING|STATE_JOG)) || sys.step_control.execute_hold || sys.step_control.execute_sys_motion) {
 80144b8:	f00a f924 	bl	801e704 <state_get>
 80144bc:	f010 0f2c 	tst.w	r0, #44	@ 0x2c
 80144c0:	d104      	bne.n	80144cc <mc_reset+0x34>
 80144c2:	4b1c      	ldr	r3, [pc, #112]	@ (8014534 <mc_reset+0x9c>)
 80144c4:	7e1b      	ldrb	r3, [r3, #24]
 80144c6:	f013 0f06 	tst.w	r3, #6
 80144ca:	d00d      	beq.n	80144e8 <mc_reset+0x50>

            sys.position_lost = true;
 80144cc:	4b19      	ldr	r3, [pc, #100]	@ (8014534 <mc_reset+0x9c>)
 80144ce:	2201      	movs	r2, #1
 80144d0:	70da      	strb	r2, [r3, #3]

            if (state_get() != STATE_HOMING)
 80144d2:	f00a f917 	bl	801e704 <state_get>
 80144d6:	2804      	cmp	r0, #4
 80144d8:	d017      	beq.n	801450a <mc_reset+0x72>
                system_set_exec_alarm(Alarm_AbortCycle);
 80144da:	4b17      	ldr	r3, [pc, #92]	@ (8014538 <mc_reset+0xa0>)
 80144dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80144de:	2103      	movs	r1, #3
 80144e0:	4817      	ldr	r0, [pc, #92]	@ (8014540 <mc_reset+0xa8>)
 80144e2:	4798      	blx	r3
            else if (!sys.rt_exec_alarm)
                system_set_exec_alarm(Alarm_HomingFailReset);

            st_go_idle(); // Force kill steppers. Position has likely been lost.
 80144e4:	f00a fe38 	bl	801f158 <st_go_idle>
        }

        control_signals_t signals = hal.control.get_state();
 80144e8:	4b13      	ldr	r3, [pc, #76]	@ (8014538 <mc_reset+0xa0>)
 80144ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80144ec:	4798      	blx	r3

        if(signals.e_stop)
 80144ee:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80144f2:	d014      	beq.n	801451e <mc_reset+0x86>
            system_set_exec_alarm(Alarm_EStop);
 80144f4:	4b10      	ldr	r3, [pc, #64]	@ (8014538 <mc_reset+0xa0>)
 80144f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80144f8:	210a      	movs	r1, #10
 80144fa:	4811      	ldr	r0, [pc, #68]	@ (8014540 <mc_reset+0xa8>)
 80144fc:	4798      	blx	r3
        else if(signals.motor_fault)
            system_set_exec_alarm(Alarm_MotorFault);

        if(grbl.on_reset)
 80144fe:	4b11      	ldr	r3, [pc, #68]	@ (8014544 <mc_reset+0xac>)
 8014500:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8014504:	b103      	cbz	r3, 8014508 <mc_reset+0x70>
            grbl.on_reset();
 8014506:	4798      	blx	r3
    }
}
 8014508:	bd10      	pop	{r4, pc}
            else if (!sys.rt_exec_alarm)
 801450a:	4b0a      	ldr	r3, [pc, #40]	@ (8014534 <mc_reset+0x9c>)
 801450c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801450e:	2b00      	cmp	r3, #0
 8014510:	d1e8      	bne.n	80144e4 <mc_reset+0x4c>
                system_set_exec_alarm(Alarm_HomingFailReset);
 8014512:	4b09      	ldr	r3, [pc, #36]	@ (8014538 <mc_reset+0xa0>)
 8014514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014516:	2106      	movs	r1, #6
 8014518:	4809      	ldr	r0, [pc, #36]	@ (8014540 <mc_reset+0xa8>)
 801451a:	4798      	blx	r3
 801451c:	e7e2      	b.n	80144e4 <mc_reset+0x4c>
        else if(signals.motor_fault)
 801451e:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8014522:	d0ec      	beq.n	80144fe <mc_reset+0x66>
            system_set_exec_alarm(Alarm_MotorFault);
 8014524:	4b04      	ldr	r3, [pc, #16]	@ (8014538 <mc_reset+0xa0>)
 8014526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014528:	2111      	movs	r1, #17
 801452a:	4805      	ldr	r0, [pc, #20]	@ (8014540 <mc_reset+0xa8>)
 801452c:	4798      	blx	r3
 801452e:	e7e6      	b.n	80144fe <mc_reset+0x66>
 8014530:	4770      	bx	lr
 8014532:	bf00      	nop
 8014534:	2000148c 	.word	0x2000148c
 8014538:	200011ac 	.word	0x200011ac
 801453c:	200014d4 	.word	0x200014d4
 8014540:	200014d8 	.word	0x200014d8
 8014544:	20001394 	.word	0x20001394

08014548 <mc_homing_cycle>:
{
 8014548:	b5f0      	push	{r4, r5, r6, r7, lr}
 801454a:	b083      	sub	sp, #12
 801454c:	4604      	mov	r4, r0
    bool home_all = cycle.mask == 0;
 801454e:	b2c7      	uxtb	r7, r0
    memset(&sys.last_event.limits, 0, sizeof(limit_signals_t));
 8014550:	4b7c      	ldr	r3, [pc, #496]	@ (8014744 <mc_homing_cycle+0x1fc>)
 8014552:	2200      	movs	r2, #0
 8014554:	601a      	str	r2, [r3, #0]
    if(settings.homing.flags.manual && (home_all ? sys.homing.mask : (cycle.mask & sys.homing.mask)) == 0) {
 8014556:	4b7c      	ldr	r3, [pc, #496]	@ (8014748 <mc_homing_cycle+0x200>)
 8014558:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 801455c:	f013 0f10 	tst.w	r3, #16
 8014560:	d007      	beq.n	8014572 <mc_homing_cycle+0x2a>
 8014562:	2f00      	cmp	r7, #0
 8014564:	f040 8091 	bne.w	801468a <mc_homing_cycle+0x142>
 8014568:	4b78      	ldr	r3, [pc, #480]	@ (801474c <mc_homing_cycle+0x204>)
 801456a:	7e9b      	ldrb	r3, [r3, #26]
 801456c:	2b00      	cmp	r3, #0
 801456e:	f000 8091 	beq.w	8014694 <mc_homing_cycle+0x14c>
        if(settings.homing.seek_rate <= 0.0f)
 8014572:	4b75      	ldr	r3, [pc, #468]	@ (8014748 <mc_homing_cycle+0x200>)
 8014574:	edd3 7a42 	vldr	s15, [r3, #264]	@ 0x108
 8014578:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801457c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014580:	f240 80b5 	bls.w	80146ee <mc_homing_cycle+0x1a6>
        if (settings.limits.flags.two_switches && hal.home_cap.a.mask == 0 && limit_signals_merge(hal.limits.get_state()).value) {
 8014584:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 8014588:	f013 0f10 	tst.w	r3, #16
 801458c:	d00d      	beq.n	80145aa <mc_homing_cycle+0x62>
 801458e:	4b70      	ldr	r3, [pc, #448]	@ (8014750 <mc_homing_cycle+0x208>)
 8014590:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 8014594:	b94b      	cbnz	r3, 80145aa <mc_homing_cycle+0x62>
 8014596:	4b6e      	ldr	r3, [pc, #440]	@ (8014750 <mc_homing_cycle+0x208>)
 8014598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801459a:	4798      	blx	r3
 801459c:	9000      	str	r0, [sp, #0]
 801459e:	f7fe fa4b 	bl	8012a38 <limit_signals_merge>
 80145a2:	b2c0      	uxtb	r0, r0
 80145a4:	2800      	cmp	r0, #0
 80145a6:	f040 8085 	bne.w	80146b4 <mc_homing_cycle+0x16c>
        state_set(STATE_HOMING);                        // Set homing system state.
 80145aa:	2004      	movs	r0, #4
 80145ac:	f00a f8b0 	bl	801e710 <state_set>
        system_set_exec_state_flag(EXEC_STATUS_REPORT); // Force a status report and
 80145b0:	4b67      	ldr	r3, [pc, #412]	@ (8014750 <mc_homing_cycle+0x208>)
 80145b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80145b4:	2101      	movs	r1, #1
 80145b6:	4867      	ldr	r0, [pc, #412]	@ (8014754 <mc_homing_cycle+0x20c>)
 80145b8:	4798      	blx	r3
        delay_sec(0.1f, DelayMode_Dwell);               // delay a bit to get it sent (or perhaps wait a bit for a request?)
 80145ba:	2000      	movs	r0, #0
 80145bc:	ed9f 0a66 	vldr	s0, [pc, #408]	@ 8014758 <mc_homing_cycle+0x210>
 80145c0:	f000 ff6e 	bl	80154a0 <delay_sec>
        if(spindle_is_on())
 80145c4:	f009 fe32 	bl	801e22c <spindle_is_on>
 80145c8:	2800      	cmp	r0, #0
 80145ca:	d17c      	bne.n	80146c6 <mc_homing_cycle+0x17e>
        if(hal.coolant.get_state().mask)
 80145cc:	4b60      	ldr	r3, [pc, #384]	@ (8014750 <mc_homing_cycle+0x208>)
 80145ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80145d0:	4798      	blx	r3
 80145d2:	b2c0      	uxtb	r0, r0
 80145d4:	2800      	cmp	r0, #0
 80145d6:	d179      	bne.n	80146cc <mc_homing_cycle+0x184>
        if (!home_all) // Perform homing cycle based on mask.
 80145d8:	2f00      	cmp	r7, #0
 80145da:	d17c      	bne.n	80146d6 <mc_homing_cycle+0x18e>
            sys.homed.mask &= ~sys.homing.mask;
 80145dc:	4a5b      	ldr	r2, [pc, #364]	@ (801474c <mc_homing_cycle+0x204>)
 80145de:	f892 1054 	ldrb.w	r1, [r2, #84]	@ 0x54
 80145e2:	7e93      	ldrb	r3, [r2, #26]
 80145e4:	43db      	mvns	r3, r3
 80145e6:	b25b      	sxtb	r3, r3
 80145e8:	400b      	ands	r3, r1
 80145ea:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
    status_code_t homed_status = Status_OK;
 80145ee:	463e      	mov	r6, r7
            uint_fast8_t idx = 0;
 80145f0:	2500      	movs	r5, #0
                if(settings.homing.cycle[idx].mask) {
 80145f2:	4b55      	ldr	r3, [pc, #340]	@ (8014748 <mc_homing_cycle+0x200>)
 80145f4:	442b      	add	r3, r5
 80145f6:	f893 0115 	ldrb.w	r0, [r3, #277]	@ 0x115
 80145fa:	2800      	cmp	r0, #0
 80145fc:	d170      	bne.n	80146e0 <mc_homing_cycle+0x198>
            } while(++idx < N_AXIS);
 80145fe:	3501      	adds	r5, #1
 8014600:	2d02      	cmp	r5, #2
 8014602:	d9f6      	bls.n	80145f2 <mc_homing_cycle+0xaa>
        hal.limits.enable(settings.limits.flags.hard_enabled, (axes_signals_t){0});
 8014604:	4b52      	ldr	r3, [pc, #328]	@ (8014750 <mc_homing_cycle+0x208>)
 8014606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014608:	4a4f      	ldr	r2, [pc, #316]	@ (8014748 <mc_homing_cycle+0x200>)
 801460a:	f892 0124 	ldrb.w	r0, [r2, #292]	@ 0x124
 801460e:	f04f 0100 	mov.w	r1, #0
 8014612:	f000 0001 	and.w	r0, r0, #1
 8014616:	4798      	blx	r3
    if(cycle.mask) {
 8014618:	b2e3      	uxtb	r3, r4
 801461a:	b193      	cbz	r3, 8014642 <mc_homing_cycle+0xfa>
        if(!protocol_execute_realtime()) {  // Check for reset and set system abort.
 801461c:	f002 fd0a 	bl	8017034 <protocol_execute_realtime>
 8014620:	2800      	cmp	r0, #0
 8014622:	d066      	beq.n	80146f2 <mc_homing_cycle+0x1aa>
        if(homed_status != Status_OK) {
 8014624:	2e00      	cmp	r6, #0
 8014626:	d16d      	bne.n	8014704 <mc_homing_cycle+0x1bc>
        if(home_all && settings.homing.flags.manual)
 8014628:	b92f      	cbnz	r7, 8014636 <mc_homing_cycle+0xee>
 801462a:	4b47      	ldr	r3, [pc, #284]	@ (8014748 <mc_homing_cycle+0x200>)
 801462c:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8014630:	f013 0f10 	tst.w	r3, #16
 8014634:	d177      	bne.n	8014726 <mc_homing_cycle+0x1de>
        sync_position();
 8014636:	f001 ffbb 	bl	80165b0 <plan_sync_position>
 801463a:	4948      	ldr	r1, [pc, #288]	@ (801475c <mc_homing_cycle+0x214>)
 801463c:	4848      	ldr	r0, [pc, #288]	@ (8014760 <mc_homing_cycle+0x218>)
 801463e:	f00c ff7b 	bl	8021538 <system_convert_array_steps_to_mpos>
    system_add_rt_report(Report_Homed);
 8014642:	2004      	movs	r0, #4
 8014644:	f00d f81c 	bl	8021680 <system_add_rt_report>
    homed_status = settings.limits.flags.hard_enabled &&
 8014648:	4b3f      	ldr	r3, [pc, #252]	@ (8014748 <mc_homing_cycle+0x200>)
 801464a:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 801464e:	f003 0305 	and.w	r3, r3, #5
                    : Status_OK;
 8014652:	2b05      	cmp	r3, #5
 8014654:	d10a      	bne.n	801466c <mc_homing_cycle+0x124>
                     (limit_signals_merge(hal.limits.get_state()).value & sys.hard_limits.mask)
 8014656:	4b3e      	ldr	r3, [pc, #248]	@ (8014750 <mc_homing_cycle+0x208>)
 8014658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801465a:	4798      	blx	r3
 801465c:	9001      	str	r0, [sp, #4]
 801465e:	f7fe f9eb 	bl	8012a38 <limit_signals_merge>
 8014662:	4b3a      	ldr	r3, [pc, #232]	@ (801474c <mc_homing_cycle+0x204>)
 8014664:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
                    settings.limits.flags.check_at_init &&
 8014668:	4203      	tst	r3, r0
 801466a:	d169      	bne.n	8014740 <mc_homing_cycle+0x1f8>
        limits_set_work_envelope();
 801466c:	f7fe fa14 	bl	8012a98 <limits_set_work_envelope>
                    : Status_OK;
 8014670:	2600      	movs	r6, #0
    if(grbl.on_homing_completed)
 8014672:	4b3c      	ldr	r3, [pc, #240]	@ (8014764 <mc_homing_cycle+0x21c>)
 8014674:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014678:	b123      	cbz	r3, 8014684 <mc_homing_cycle+0x13c>
        grbl.on_homing_completed(cycle, homed_status == Status_OK);
 801467a:	fab6 f186 	clz	r1, r6
 801467e:	0949      	lsrs	r1, r1, #5
 8014680:	4620      	mov	r0, r4
 8014682:	4798      	blx	r3
}
 8014684:	4630      	mov	r0, r6
 8014686:	b003      	add	sp, #12
 8014688:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(settings.homing.flags.manual && (home_all ? sys.homing.mask : (cycle.mask & sys.homing.mask)) == 0) {
 801468a:	4b30      	ldr	r3, [pc, #192]	@ (801474c <mc_homing_cycle+0x204>)
 801468c:	7e9b      	ldrb	r3, [r3, #26]
 801468e:	421f      	tst	r7, r3
 8014690:	f47f af6f 	bne.w	8014572 <mc_homing_cycle+0x2a>
        if(home_all)
 8014694:	b90f      	cbnz	r7, 801469a <mc_homing_cycle+0x152>
            cycle.mask = AXES_BITMASK;
 8014696:	f04f 0407 	mov.w	r4, #7
        sys.homed.mask |= cycle.mask;
 801469a:	4a2c      	ldr	r2, [pc, #176]	@ (801474c <mc_homing_cycle+0x204>)
 801469c:	f892 3054 	ldrb.w	r3, [r2, #84]	@ 0x54
 80146a0:	b2e1      	uxtb	r1, r4
 80146a2:	430b      	orrs	r3, r1
 80146a4:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
        limits_set_machine_positions(cycle, false);
 80146a8:	2100      	movs	r1, #0
 80146aa:	4620      	mov	r0, r4
 80146ac:	f7fe fa7e 	bl	8012bac <limits_set_machine_positions>
    status_code_t homed_status = Status_OK;
 80146b0:	2600      	movs	r6, #0
        limits_set_machine_positions(cycle, false);
 80146b2:	e7b1      	b.n	8014618 <mc_homing_cycle+0xd0>
            mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 80146b4:	f7ff fef0 	bl	8014498 <mc_reset>
            system_set_exec_alarm(Alarm_HardLimit);
 80146b8:	4b25      	ldr	r3, [pc, #148]	@ (8014750 <mc_homing_cycle+0x208>)
 80146ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80146bc:	2101      	movs	r1, #1
 80146be:	482a      	ldr	r0, [pc, #168]	@ (8014768 <mc_homing_cycle+0x220>)
 80146c0:	4798      	blx	r3
            return Status_Unhandled;
 80146c2:	2654      	movs	r6, #84	@ 0x54
 80146c4:	e7de      	b.n	8014684 <mc_homing_cycle+0x13c>
            gc_spindle_off();
 80146c6:	f7f8 fb79 	bl	800cdbc <gc_spindle_off>
 80146ca:	e77f      	b.n	80145cc <mc_homing_cycle+0x84>
            gc_coolant((coolant_state_t){0});
 80146cc:	f04f 0000 	mov.w	r0, #0
 80146d0:	f7f8 fb82 	bl	800cdd8 <gc_coolant>
 80146d4:	e780      	b.n	80145d8 <mc_homing_cycle+0x90>
            homed_status = limits_go_home(cycle);
 80146d6:	4620      	mov	r0, r4
 80146d8:	f7fe fd48 	bl	801316c <limits_go_home>
 80146dc:	4606      	mov	r6, r0
 80146de:	e791      	b.n	8014604 <mc_homing_cycle+0xbc>
                    cycle.mask = settings.homing.cycle[idx].mask;
 80146e0:	4604      	mov	r4, r0
                    if((homed_status = limits_go_home(cycle)) != Status_OK)
 80146e2:	f7fe fd43 	bl	801316c <limits_go_home>
 80146e6:	4606      	mov	r6, r0
 80146e8:	2800      	cmp	r0, #0
 80146ea:	d088      	beq.n	80145fe <mc_homing_cycle+0xb6>
 80146ec:	e78a      	b.n	8014604 <mc_homing_cycle+0xbc>
            return Status_HomingDisabled;
 80146ee:	2605      	movs	r6, #5
 80146f0:	e7c8      	b.n	8014684 <mc_homing_cycle+0x13c>
            if(grbl.on_homing_completed)
 80146f2:	4b1c      	ldr	r3, [pc, #112]	@ (8014764 <mc_homing_cycle+0x21c>)
 80146f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80146f8:	b113      	cbz	r3, 8014700 <mc_homing_cycle+0x1b8>
                grbl.on_homing_completed(cycle, false);
 80146fa:	2100      	movs	r1, #0
 80146fc:	4620      	mov	r0, r4
 80146fe:	4798      	blx	r3
            return Status_Unhandled;        // Did not complete. Alarm state set by mc_alarm.
 8014700:	2654      	movs	r6, #84	@ 0x54
 8014702:	e7bf      	b.n	8014684 <mc_homing_cycle+0x13c>
            if(state_get() == STATE_HOMING)
 8014704:	f009 fffe 	bl	801e704 <state_get>
 8014708:	2804      	cmp	r0, #4
 801470a:	d008      	beq.n	801471e <mc_homing_cycle+0x1d6>
            if(grbl.on_homing_completed)
 801470c:	4b15      	ldr	r3, [pc, #84]	@ (8014764 <mc_homing_cycle+0x21c>)
 801470e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014712:	2b00      	cmp	r3, #0
 8014714:	d0b6      	beq.n	8014684 <mc_homing_cycle+0x13c>
                grbl.on_homing_completed(cycle, false);
 8014716:	2100      	movs	r1, #0
 8014718:	4620      	mov	r0, r4
 801471a:	4798      	blx	r3
            return homed_status;
 801471c:	e7b2      	b.n	8014684 <mc_homing_cycle+0x13c>
                state_set(STATE_IDLE);
 801471e:	2000      	movs	r0, #0
 8014720:	f009 fff6 	bl	801e710 <state_set>
 8014724:	e7f2      	b.n	801470c <mc_homing_cycle+0x1c4>
            cycle.mask = AXES_BITMASK & ~sys.homing.mask;
 8014726:	4b09      	ldr	r3, [pc, #36]	@ (801474c <mc_homing_cycle+0x204>)
 8014728:	7e98      	ldrb	r0, [r3, #26]
 801472a:	43c0      	mvns	r0, r0
 801472c:	f000 0007 	and.w	r0, r0, #7
 8014730:	4604      	mov	r4, r0
            sys.homed.mask = AXES_BITMASK;
 8014732:	2207      	movs	r2, #7
 8014734:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            limits_set_machine_positions(cycle, false);
 8014738:	2100      	movs	r1, #0
 801473a:	f7fe fa37 	bl	8012bac <limits_set_machine_positions>
 801473e:	e77a      	b.n	8014636 <mc_homing_cycle+0xee>
                    : Status_OK;
 8014740:	262d      	movs	r6, #45	@ 0x2d
 8014742:	e796      	b.n	8014672 <mc_homing_cycle+0x12a>
 8014744:	2000150e 	.word	0x2000150e
 8014748:	20001bc4 	.word	0x20001bc4
 801474c:	2000148c 	.word	0x2000148c
 8014750:	200011ac 	.word	0x200011ac
 8014754:	200014d4 	.word	0x200014d4
 8014758:	3dcccccd 	.word	0x3dcccccd
 801475c:	20001514 	.word	0x20001514
 8014760:	20000f4c 	.word	0x20000f4c
 8014764:	20001394 	.word	0x20001394
 8014768:	200014d8 	.word	0x200014d8

0801476c <my_plugin_init>:
#ifndef ADD_MY_PLUGIN

__attribute__((weak)) void my_plugin_init (void)
{
    // NOOP
}
 801476c:	4770      	bx	lr
	...

08014770 <probe_result>:
    return axis <= N_AXIS ? factors[axis - 1] : 0.0f;
}

static float probe_result (ngc_param_id_t id)
{
    return sys.flags.probe_succeeded ? 1.0f : 0.0f;
 8014770:	4b05      	ldr	r3, [pc, #20]	@ (8014788 <probe_result+0x18>)
 8014772:	7d9b      	ldrb	r3, [r3, #22]
 8014774:	f013 0f02 	tst.w	r3, #2
 8014778:	d002      	beq.n	8014780 <probe_result+0x10>
 801477a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801477e:	4770      	bx	lr
 8014780:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 801478c <probe_result+0x1c>
}
 8014784:	4770      	bx	lr
 8014786:	bf00      	nop
 8014788:	2000148c 	.word	0x2000148c
 801478c:	00000000 	.word	0x00000000

08014790 <m66_result>:
    return axis <= N_AXIS ? sys.home_position[axis - 1] : 0.0f;
}
*/
static float m66_result (ngc_param_id_t id)
{
    return (float)sys.var5399;
 8014790:	4b02      	ldr	r3, [pc, #8]	@ (801479c <m66_result+0xc>)
 8014792:	ed93 0a14 	vldr	s0, [r3, #80]	@ 0x50
}
 8014796:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801479a:	4770      	bx	lr
 801479c:	2000148c 	.word	0x2000148c

080147a0 <tool_number>:

static float tool_number (ngc_param_id_t id)
{
    return (float)gc_state.tool->tool_id;
 80147a0:	4b03      	ldr	r3, [pc, #12]	@ (80147b0 <tool_number+0x10>)
 80147a2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80147a6:	ed93 0a04 	vldr	s0, [r3, #16]
}
 80147aa:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80147ae:	4770      	bx	lr
 80147b0:	20000ee4 	.word	0x20000ee4

080147b4 <tool_offset>:

static float tool_offset (ngc_param_id_t id)
{
    uint_fast8_t axis = id % 10;
 80147b4:	4b0a      	ldr	r3, [pc, #40]	@ (80147e0 <tool_offset+0x2c>)
 80147b6:	fba3 2300 	umull	r2, r3, r3, r0
 80147ba:	08db      	lsrs	r3, r3, #3
 80147bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80147c0:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 80147c4:	b280      	uxth	r0, r0

    return axis <= N_AXIS ? gc_state.tool_length_offset[axis] : 0.0f;
 80147c6:	2803      	cmp	r0, #3
 80147c8:	d806      	bhi.n	80147d8 <tool_offset+0x24>
 80147ca:	3030      	adds	r0, #48	@ 0x30
 80147cc:	4b05      	ldr	r3, [pc, #20]	@ (80147e4 <tool_offset+0x30>)
 80147ce:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80147d2:	ed93 0a01 	vldr	s0, [r3, #4]
 80147d6:	4770      	bx	lr
 80147d8:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80147e8 <tool_offset+0x34>
}
 80147dc:	4770      	bx	lr
 80147de:	bf00      	nop
 80147e0:	cccccccd 	.word	0xcccccccd
 80147e4:	20000ee4 	.word	0x20000ee4
 80147e8:	00000000 	.word	0x00000000

080147ec <coord_system>:
    return value;
}

static float coord_system (ngc_param_id_t id)
{
    return (float)gc_state.modal.coord_system.id + 1;
 80147ec:	4b05      	ldr	r3, [pc, #20]	@ (8014804 <coord_system+0x18>)
 80147ee:	7d1b      	ldrb	r3, [r3, #20]
 80147f0:	ee00 3a10 	vmov	s0, r3
 80147f4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 80147f8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80147fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014800:	4770      	bx	lr
 8014802:	bf00      	nop
 8014804:	20000ee4 	.word	0x20000ee4

08014808 <g92_offset_applied>:
    return value;
}

static float g92_offset_applied (ngc_param_id_t id)
{
    return (float)gc_state.g92_coord_offset_applied;
 8014808:	4b03      	ldr	r3, [pc, #12]	@ (8014818 <g92_offset_applied+0x10>)
 801480a:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 801480e:	ee00 3a10 	vmov	s0, r3
}
 8014812:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8014816:	4770      	bx	lr
 8014818:	20000ee4 	.word	0x20000ee4

0801481c <g92_offset>:

static float g92_offset (ngc_param_id_t id)
{
    uint_fast8_t axis = id % 10;
 801481c:	4b0a      	ldr	r3, [pc, #40]	@ (8014848 <g92_offset+0x2c>)
 801481e:	fba3 2300 	umull	r2, r3, r3, r0
 8014822:	08db      	lsrs	r3, r3, #3
 8014824:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014828:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 801482c:	b280      	uxth	r0, r0

    return axis <= N_AXIS ? gc_state.g92_coord_offset [axis - 1] : 0.0f;
 801482e:	2803      	cmp	r0, #3
 8014830:	d806      	bhi.n	8014840 <g92_offset+0x24>
 8014832:	302d      	adds	r0, #45	@ 0x2d
 8014834:	4b05      	ldr	r3, [pc, #20]	@ (801484c <g92_offset+0x30>)
 8014836:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801483a:	ed93 0a00 	vldr	s0, [r3]
 801483e:	4770      	bx	lr
 8014840:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8014850 <g92_offset+0x34>
}
 8014844:	4770      	bx	lr
 8014846:	bf00      	nop
 8014848:	cccccccd 	.word	0xcccccccd
 801484c:	20000ee4 	.word	0x20000ee4
 8014850:	00000000 	.word	0x00000000

08014854 <debug_output>:
    return value;
}

static float debug_output (ngc_param_id_t id)
{
    return (float)settings.flags.ngc_debug_out;
 8014854:	4b04      	ldr	r3, [pc, #16]	@ (8014868 <debug_output+0x14>)
 8014856:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 801485a:	f003 0301 	and.w	r3, r3, #1
 801485e:	ee00 3a10 	vmov	s0, r3
}
 8014862:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8014866:	4770      	bx	lr
 8014868:	20001bc4 	.word	0x20001bc4

0801486c <ngc_name_tolower>:
static char *ngc_name_tolower (char *s)
{
    static char name[NGC_MAX_PARAM_LENGTH + 1];

    uint_fast8_t len = 0;
	char c, *s1 = s, *s2 = name;
 801486c:	4a0d      	ldr	r2, [pc, #52]	@ (80148a4 <ngc_name_tolower+0x38>)
    uint_fast8_t len = 0;
 801486e:	2100      	movs	r1, #0

    while((c = *s1++) && len < NGC_MAX_PARAM_LENGTH) {
 8014870:	e002      	b.n	8014878 <ngc_name_tolower+0xc>
        if(c > ' ') {
            *s2++ = LCAPS(c);
 8014872:	f802 3b01 	strb.w	r3, [r2], #1
            len++;
 8014876:	3101      	adds	r1, #1
    while((c = *s1++) && len < NGC_MAX_PARAM_LENGTH) {
 8014878:	f810 3b01 	ldrb.w	r3, [r0], #1
 801487c:	b16b      	cbz	r3, 801489a <ngc_name_tolower+0x2e>
 801487e:	2913      	cmp	r1, #19
 8014880:	d80b      	bhi.n	801489a <ngc_name_tolower+0x2e>
        if(c > ' ') {
 8014882:	2b20      	cmp	r3, #32
 8014884:	d9f8      	bls.n	8014878 <ngc_name_tolower+0xc>
            *s2++ = LCAPS(c);
 8014886:	f1a3 0c41 	sub.w	ip, r3, #65	@ 0x41
 801488a:	fa5f fc8c 	uxtb.w	ip, ip
 801488e:	f1bc 0f19 	cmp.w	ip, #25
 8014892:	d8ee      	bhi.n	8014872 <ngc_name_tolower+0x6>
 8014894:	f043 0320 	orr.w	r3, r3, #32
 8014898:	e7eb      	b.n	8014872 <ngc_name_tolower+0x6>
        }
    }
    *s2 = '\0';
 801489a:	2300      	movs	r3, #0
 801489c:	7013      	strb	r3, [r2, #0]

	return name;
}
 801489e:	4801      	ldr	r0, [pc, #4]	@ (80148a4 <ngc_name_tolower+0x38>)
 80148a0:	4770      	bx	lr
 80148a2:	bf00      	nop
 80148a4:	20001614 	.word	0x20001614

080148a8 <_relative_pos>:
    if(axis < N_AXIS) {
 80148a8:	2802      	cmp	r0, #2
 80148aa:	d902      	bls.n	80148b2 <_relative_pos+0xa>
        value = 0.0f;
 80148ac:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8014900 <_relative_pos+0x58>
}
 80148b0:	4770      	bx	lr
{
 80148b2:	b510      	push	{r4, lr}
 80148b4:	ed2d 8b02 	vpush	{d8}
        value = sys.position[axis] / settings.axis[axis].steps_per_mm - gc_get_offset(axis, false);
 80148b8:	f100 0222 	add.w	r2, r0, #34	@ 0x22
 80148bc:	4b11      	ldr	r3, [pc, #68]	@ (8014904 <_relative_pos+0x5c>)
 80148be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80148c2:	edd3 7a00 	vldr	s15, [r3]
 80148c6:	4c10      	ldr	r4, [pc, #64]	@ (8014908 <_relative_pos+0x60>)
 80148c8:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80148cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80148d0:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80148d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80148d8:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80148dc:	2100      	movs	r1, #0
 80148de:	f7f8 f90f 	bl	800cb00 <gc_get_offset>
 80148e2:	ee38 0a40 	vsub.f32	s0, s16, s0
        if(settings.flags.report_inches)
 80148e6:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 80148ea:	f013 0f01 	tst.w	r3, #1
 80148ee:	d003      	beq.n	80148f8 <_relative_pos+0x50>
            value *= 25.4f;
 80148f0:	eddf 7a06 	vldr	s15, [pc, #24]	@ 801490c <_relative_pos+0x64>
 80148f4:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 80148f8:	ecbd 8b02 	vpop	{d8}
 80148fc:	bd10      	pop	{r4, pc}
 80148fe:	bf00      	nop
 8014900:	00000000 	.word	0x00000000
 8014904:	2000148c 	.word	0x2000148c
 8014908:	20001bc4 	.word	0x20001bc4
 801490c:	41cb3333 	.word	0x41cb3333

08014910 <work_position>:
{
 8014910:	b508      	push	{r3, lr}
    uint_fast8_t axis = id % 10;
 8014912:	4b08      	ldr	r3, [pc, #32]	@ (8014934 <work_position+0x24>)
 8014914:	fba3 2300 	umull	r2, r3, r3, r0
 8014918:	08db      	lsrs	r3, r3, #3
 801491a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801491e:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8014922:	b280      	uxth	r0, r0
    if(axis < N_AXIS)
 8014924:	2802      	cmp	r0, #2
 8014926:	d902      	bls.n	801492e <work_position+0x1e>
    float value = 0.0f;
 8014928:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8014938 <work_position+0x28>
}
 801492c:	bd08      	pop	{r3, pc}
        value = _relative_pos(axis);
 801492e:	f7ff ffbb 	bl	80148a8 <_relative_pos>
 8014932:	e7fb      	b.n	801492c <work_position+0x1c>
 8014934:	cccccccd 	.word	0xcccccccd
 8014938:	00000000 	.word	0x00000000

0801493c <coord_system_offset>:
{
 801493c:	b510      	push	{r4, lr}
 801493e:	b084      	sub	sp, #16
    uint_fast8_t axis = id % 10;
 8014940:	4b15      	ldr	r3, [pc, #84]	@ (8014998 <coord_system_offset+0x5c>)
 8014942:	fba3 2300 	umull	r2, r3, r3, r0
 8014946:	08db      	lsrs	r3, r3, #3
 8014948:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801494c:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 8014950:	b29b      	uxth	r3, r3
    id = (id - 5220 - axis - (id == 0 ? 10 : 0)) / 20;
 8014952:	1ac2      	subs	r2, r0, r3
 8014954:	b978      	cbnz	r0, 8014976 <coord_system_offset+0x3a>
 8014956:	210a      	movs	r1, #10
 8014958:	1a50      	subs	r0, r2, r1
 801495a:	f5a0 50a3 	sub.w	r0, r0, #5216	@ 0x1460
 801495e:	3804      	subs	r0, #4
 8014960:	4a0d      	ldr	r2, [pc, #52]	@ (8014998 <coord_system_offset+0x5c>)
 8014962:	fba2 2000 	umull	r2, r0, r2, r0
 8014966:	0900      	lsrs	r0, r0, #4
    if (axis > 0 && axis <= N_AXIS && settings_read_coord_data((coord_system_id_t)id, &data.xyz))
 8014968:	1e5c      	subs	r4, r3, #1
 801496a:	2c02      	cmp	r4, #2
 801496c:	d905      	bls.n	801497a <coord_system_offset+0x3e>
    float value = 0.0f;
 801496e:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 801499c <coord_system_offset+0x60>
}
 8014972:	b004      	add	sp, #16
 8014974:	bd10      	pop	{r4, pc}
    id = (id - 5220 - axis - (id == 0 ? 10 : 0)) / 20;
 8014976:	2100      	movs	r1, #0
 8014978:	e7ee      	b.n	8014958 <coord_system_offset+0x1c>
    if (axis > 0 && axis <= N_AXIS && settings_read_coord_data((coord_system_id_t)id, &data.xyz))
 801497a:	4669      	mov	r1, sp
 801497c:	b2c0      	uxtb	r0, r0
 801497e:	f008 fa67 	bl	801ce50 <settings_read_coord_data>
 8014982:	b128      	cbz	r0, 8014990 <coord_system_offset+0x54>
        value = data.xyz[axis - 1];
 8014984:	ab04      	add	r3, sp, #16
 8014986:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801498a:	ed13 0a04 	vldr	s0, [r3, #-16]
 801498e:	e7f0      	b.n	8014972 <coord_system_offset+0x36>
    float value = 0.0f;
 8014990:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 801499c <coord_system_offset+0x60>
    return value;
 8014994:	e7ed      	b.n	8014972 <coord_system_offset+0x36>
 8014996:	bf00      	nop
 8014998:	cccccccd 	.word	0xcccccccd
 801499c:	00000000 	.word	0x00000000

080149a0 <g30_home>:
{
 80149a0:	b510      	push	{r4, lr}
 80149a2:	b084      	sub	sp, #16
    uint_fast8_t axis = id % 10;
 80149a4:	4b0e      	ldr	r3, [pc, #56]	@ (80149e0 <g30_home+0x40>)
 80149a6:	fba3 2300 	umull	r2, r3, r3, r0
 80149aa:	08db      	lsrs	r3, r3, #3
 80149ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80149b0:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 80149b4:	b284      	uxth	r4, r0
    if (axis <= N_AXIS && settings_read_coord_data(CoordinateSystem_G30, &data.xyz))
 80149b6:	2c03      	cmp	r4, #3
 80149b8:	d903      	bls.n	80149c2 <g30_home+0x22>
    float value = 0.0f;
 80149ba:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80149e4 <g30_home+0x44>
}
 80149be:	b004      	add	sp, #16
 80149c0:	bd10      	pop	{r4, pc}
    if (axis <= N_AXIS && settings_read_coord_data(CoordinateSystem_G30, &data.xyz))
 80149c2:	4669      	mov	r1, sp
 80149c4:	200a      	movs	r0, #10
 80149c6:	f008 fa43 	bl	801ce50 <settings_read_coord_data>
 80149ca:	b130      	cbz	r0, 80149da <g30_home+0x3a>
        value = data.xyz[axis - 1];
 80149cc:	3c01      	subs	r4, #1
 80149ce:	ab04      	add	r3, sp, #16
 80149d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80149d4:	ed14 0a04 	vldr	s0, [r4, #-16]
 80149d8:	e7f1      	b.n	80149be <g30_home+0x1e>
    float value = 0.0f;
 80149da:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80149e4 <g30_home+0x44>
    return value;
 80149de:	e7ee      	b.n	80149be <g30_home+0x1e>
 80149e0:	cccccccd 	.word	0xcccccccd
 80149e4:	00000000 	.word	0x00000000

080149e8 <g28_home>:
{
 80149e8:	b510      	push	{r4, lr}
 80149ea:	b084      	sub	sp, #16
    uint_fast8_t axis = id % 10;
 80149ec:	4b0e      	ldr	r3, [pc, #56]	@ (8014a28 <g28_home+0x40>)
 80149ee:	fba3 2300 	umull	r2, r3, r3, r0
 80149f2:	08db      	lsrs	r3, r3, #3
 80149f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80149f8:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 80149fc:	b284      	uxth	r4, r0
    if(axis <= N_AXIS && settings_read_coord_data(CoordinateSystem_G28, &data.xyz))
 80149fe:	2c03      	cmp	r4, #3
 8014a00:	d903      	bls.n	8014a0a <g28_home+0x22>
    float value = 0.0f;
 8014a02:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8014a2c <g28_home+0x44>
}
 8014a06:	b004      	add	sp, #16
 8014a08:	bd10      	pop	{r4, pc}
    if(axis <= N_AXIS && settings_read_coord_data(CoordinateSystem_G28, &data.xyz))
 8014a0a:	4669      	mov	r1, sp
 8014a0c:	2009      	movs	r0, #9
 8014a0e:	f008 fa1f 	bl	801ce50 <settings_read_coord_data>
 8014a12:	b130      	cbz	r0, 8014a22 <g28_home+0x3a>
        value = data.xyz[axis - 1];
 8014a14:	3c01      	subs	r4, #1
 8014a16:	ab04      	add	r3, sp, #16
 8014a18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014a1c:	ed14 0a04 	vldr	s0, [r4, #-16]
 8014a20:	e7f1      	b.n	8014a06 <g28_home+0x1e>
    float value = 0.0f;
 8014a22:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8014a2c <g28_home+0x44>
    return value;
 8014a26:	e7ee      	b.n	8014a06 <g28_home+0x1e>
 8014a28:	cccccccd 	.word	0xcccccccd
 8014a2c:	00000000 	.word	0x00000000

08014a30 <probe_coord>:
{
 8014a30:	b510      	push	{r4, lr}
 8014a32:	b084      	sub	sp, #16
    uint_fast8_t axis = (id % 10) - 1;
 8014a34:	4b27      	ldr	r3, [pc, #156]	@ (8014ad4 <probe_coord+0xa4>)
 8014a36:	fba3 2300 	umull	r2, r3, r3, r0
 8014a3a:	08db      	lsrs	r3, r3, #3
 8014a3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014a40:	eba0 0443 	sub.w	r4, r0, r3, lsl #1
 8014a44:	b2a4      	uxth	r4, r4
 8014a46:	3c01      	subs	r4, #1
    if(axis < N_AXIS && (sys.probe_coordsys_id == gc_state.modal.coord_system.id || settings_read_coord_data(sys.probe_coordsys_id, &data.xyz))) {
 8014a48:	2c02      	cmp	r4, #2
 8014a4a:	d83f      	bhi.n	8014acc <probe_coord+0x9c>
 8014a4c:	4b22      	ldr	r3, [pc, #136]	@ (8014ad8 <probe_coord+0xa8>)
 8014a4e:	f893 0036 	ldrb.w	r0, [r3, #54]	@ 0x36
 8014a52:	4b22      	ldr	r3, [pc, #136]	@ (8014adc <probe_coord+0xac>)
 8014a54:	7d1b      	ldrb	r3, [r3, #20]
 8014a56:	4298      	cmp	r0, r3
 8014a58:	d129      	bne.n	8014aae <probe_coord+0x7e>
        value = sys.probe_position[axis] / settings.axis[axis].steps_per_mm -
 8014a5a:	491f      	ldr	r1, [pc, #124]	@ (8014ad8 <probe_coord+0xa8>)
 8014a5c:	f104 030e 	add.w	r3, r4, #14
 8014a60:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014a64:	edd3 7a00 	vldr	s15, [r3]
 8014a68:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8014a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8014ae0 <probe_coord+0xb0>)
 8014a6e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014a72:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8014a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a7a:	ee87 0a87 	vdiv.f32	s0, s15, s14
                 (sys.probe_coordsys_id == gc_state.modal.coord_system.id ? gc_state.modal.coord_system.xyz[axis] : data.xyz[axis]);
 8014a7e:	f891 2036 	ldrb.w	r2, [r1, #54]	@ 0x36
 8014a82:	4b16      	ldr	r3, [pc, #88]	@ (8014adc <probe_coord+0xac>)
 8014a84:	7d1b      	ldrb	r3, [r3, #20]
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d019      	beq.n	8014abe <probe_coord+0x8e>
 8014a8a:	ab04      	add	r3, sp, #16
 8014a8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014a90:	ed54 7a04 	vldr	s15, [r4, #-16]
        value = sys.probe_position[axis] / settings.axis[axis].steps_per_mm -
 8014a94:	ee30 0a67 	vsub.f32	s0, s0, s15
        if(settings.flags.report_inches)
 8014a98:	4b11      	ldr	r3, [pc, #68]	@ (8014ae0 <probe_coord+0xb0>)
 8014a9a:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8014a9e:	f013 0f01 	tst.w	r3, #1
 8014aa2:	d015      	beq.n	8014ad0 <probe_coord+0xa0>
            value *= 25.4f;
 8014aa4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8014ae4 <probe_coord+0xb4>
 8014aa8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014aac:	e010      	b.n	8014ad0 <probe_coord+0xa0>
    if(axis < N_AXIS && (sys.probe_coordsys_id == gc_state.modal.coord_system.id || settings_read_coord_data(sys.probe_coordsys_id, &data.xyz))) {
 8014aae:	4669      	mov	r1, sp
 8014ab0:	f008 f9ce 	bl	801ce50 <settings_read_coord_data>
 8014ab4:	2800      	cmp	r0, #0
 8014ab6:	d1d0      	bne.n	8014a5a <probe_coord+0x2a>
    float value = 0.0f;
 8014ab8:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8014ae8 <probe_coord+0xb8>
    return value;
 8014abc:	e008      	b.n	8014ad0 <probe_coord+0xa0>
                 (sys.probe_coordsys_id == gc_state.modal.coord_system.id ? gc_state.modal.coord_system.xyz[axis] : data.xyz[axis]);
 8014abe:	3402      	adds	r4, #2
 8014ac0:	4b06      	ldr	r3, [pc, #24]	@ (8014adc <probe_coord+0xac>)
 8014ac2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014ac6:	edd3 7a00 	vldr	s15, [r3]
 8014aca:	e7e3      	b.n	8014a94 <probe_coord+0x64>
    float value = 0.0f;
 8014acc:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8014ae8 <probe_coord+0xb8>
}
 8014ad0:	b004      	add	sp, #16
 8014ad2:	bd10      	pop	{r4, pc}
 8014ad4:	cccccccd 	.word	0xcccccccd
 8014ad8:	2000148c 	.word	0x2000148c
 8014adc:	20000ee4 	.word	0x20000ee4
 8014ae0:	20001bc4 	.word	0x20001bc4
 8014ae4:	41cb3333 	.word	0x41cb3333
 8014ae8:	00000000 	.word	0x00000000

08014aec <scaling_factors>:
{
 8014aec:	b510      	push	{r4, lr}
 8014aee:	4604      	mov	r4, r0
    float *factors = gc_get_scaling();
 8014af0:	f7f7 ffb2 	bl	800ca58 <gc_get_scaling>
    uint_fast8_t axis = id % 10;
 8014af4:	4b0a      	ldr	r3, [pc, #40]	@ (8014b20 <scaling_factors+0x34>)
 8014af6:	fba3 2304 	umull	r2, r3, r3, r4
 8014afa:	08db      	lsrs	r3, r3, #3
 8014afc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014b00:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
 8014b04:	b2a4      	uxth	r4, r4
    return axis <= N_AXIS ? factors[axis - 1] : 0.0f;
 8014b06:	2c03      	cmp	r4, #3
 8014b08:	d807      	bhi.n	8014b1a <scaling_factors+0x2e>
 8014b0a:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8014b0e:	3c01      	subs	r4, #1
 8014b10:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8014b14:	ed90 0a00 	vldr	s0, [r0]
}
 8014b18:	bd10      	pop	{r4, pc}
    return axis <= N_AXIS ? factors[axis - 1] : 0.0f;
 8014b1a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8014b24 <scaling_factors+0x38>
 8014b1e:	e7fb      	b.n	8014b18 <scaling_factors+0x2c>
 8014b20:	cccccccd 	.word	0xcccccccd
 8014b24:	00000000 	.word	0x00000000

08014b28 <ngc_param_get>:
{
 8014b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b2a:	460f      	mov	r7, r1
    bool found = id > 0 && id < ngc_ro_params[0].id_min;
 8014b2c:	4605      	mov	r5, r0
 8014b2e:	b128      	cbz	r0, 8014b3c <ngc_param_get+0x14>
 8014b30:	f241 33c4 	movw	r3, #5060	@ 0x13c4
 8014b34:	4298      	cmp	r0, r3
 8014b36:	d90d      	bls.n	8014b54 <ngc_param_get+0x2c>
 8014b38:	2300      	movs	r3, #0
 8014b3a:	e000      	b.n	8014b3e <ngc_param_get+0x16>
 8014b3c:	2300      	movs	r3, #0
    *value = 0.0f;
 8014b3e:	2200      	movs	r2, #0
 8014b40:	603a      	str	r2, [r7, #0]
    if(found) {
 8014b42:	461e      	mov	r6, r3
 8014b44:	b1c3      	cbz	r3, 8014b78 <ngc_param_get+0x50>
        void *context = id > (ngc_param_id_t)30 ? NULL : call_context;
 8014b46:	2d1e      	cmp	r5, #30
 8014b48:	d806      	bhi.n	8014b58 <ngc_param_get+0x30>
 8014b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8014bb8 <ngc_param_get+0x90>)
 8014b4c:	6819      	ldr	r1, [r3, #0]
        ngc_rw_param_t *rw_param = rw_params;
 8014b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8014bbc <ngc_param_get+0x94>)
 8014b50:	681b      	ldr	r3, [r3, #0]
        while(rw_param) {
 8014b52:	e004      	b.n	8014b5e <ngc_param_get+0x36>
    bool found = id > 0 && id < ngc_ro_params[0].id_min;
 8014b54:	2301      	movs	r3, #1
 8014b56:	e7f2      	b.n	8014b3e <ngc_param_get+0x16>
        void *context = id > (ngc_param_id_t)30 ? NULL : call_context;
 8014b58:	2100      	movs	r1, #0
 8014b5a:	e7f8      	b.n	8014b4e <ngc_param_get+0x26>
                rw_param = rw_param->next;
 8014b5c:	68db      	ldr	r3, [r3, #12]
        while(rw_param) {
 8014b5e:	b14b      	cbz	r3, 8014b74 <ngc_param_get+0x4c>
            if(rw_param->context == context && rw_param->id == id) {
 8014b60:	681a      	ldr	r2, [r3, #0]
 8014b62:	428a      	cmp	r2, r1
 8014b64:	d1fa      	bne.n	8014b5c <ngc_param_get+0x34>
 8014b66:	889a      	ldrh	r2, [r3, #4]
 8014b68:	42aa      	cmp	r2, r5
 8014b6a:	d1f7      	bne.n	8014b5c <ngc_param_get+0x34>
                *value = rw_param->value;
 8014b6c:	689b      	ldr	r3, [r3, #8]
 8014b6e:	603b      	str	r3, [r7, #0]
    bool found = id > 0 && id < ngc_ro_params[0].id_min;
 8014b70:	4630      	mov	r0, r6
 8014b72:	e000      	b.n	8014b76 <ngc_param_get+0x4e>
 8014b74:	4630      	mov	r0, r6
}
 8014b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint_fast8_t idx = sizeof(ngc_ro_params) / sizeof(ngc_ro_param_t);
 8014b78:	2416      	movs	r4, #22
 8014b7a:	e012      	b.n	8014ba2 <ngc_param_get+0x7a>
        if((found = id >= ngc_ro_params[idx].id_min && id <= ngc_ro_params[idx].id_max))
 8014b7c:	4b10      	ldr	r3, [pc, #64]	@ (8014bc0 <ngc_param_get+0x98>)
 8014b7e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014b82:	885b      	ldrh	r3, [r3, #2]
 8014b84:	42ab      	cmp	r3, r5
 8014b86:	d314      	bcc.n	8014bb2 <ngc_param_get+0x8a>
            *value = ngc_ro_params[idx].get(id);
 8014b88:	4b0d      	ldr	r3, [pc, #52]	@ (8014bc0 <ngc_param_get+0x98>)
 8014b8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014b8e:	685b      	ldr	r3, [r3, #4]
 8014b90:	4628      	mov	r0, r5
 8014b92:	4798      	blx	r3
 8014b94:	ed87 0a00 	vstr	s0, [r7]
        if((found = id >= ngc_ro_params[idx].id_min && id <= ngc_ro_params[idx].id_max))
 8014b98:	2001      	movs	r0, #1
    } while(idx && !found);
 8014b9a:	2c00      	cmp	r4, #0
 8014b9c:	d0eb      	beq.n	8014b76 <ngc_param_get+0x4e>
 8014b9e:	2800      	cmp	r0, #0
 8014ba0:	d1e9      	bne.n	8014b76 <ngc_param_get+0x4e>
        idx--;
 8014ba2:	3c01      	subs	r4, #1
        if((found = id >= ngc_ro_params[idx].id_min && id <= ngc_ro_params[idx].id_max))
 8014ba4:	4b06      	ldr	r3, [pc, #24]	@ (8014bc0 <ngc_param_get+0x98>)
 8014ba6:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
 8014baa:	42ab      	cmp	r3, r5
 8014bac:	d9e6      	bls.n	8014b7c <ngc_param_get+0x54>
 8014bae:	4630      	mov	r0, r6
 8014bb0:	e7f3      	b.n	8014b9a <ngc_param_get+0x72>
 8014bb2:	4630      	mov	r0, r6
 8014bb4:	e7f1      	b.n	8014b9a <ngc_param_get+0x72>
 8014bb6:	bf00      	nop
 8014bb8:	200016b0 	.word	0x200016b0
 8014bbc:	20001630 	.word	0x20001630
 8014bc0:	0802b15c 	.word	0x0802b15c

08014bc4 <ngc_named_param_set>:

    return ok;
}

bool ngc_named_param_set (char *name, float value)
{
 8014bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bc8:	ee10 9a10 	vmov	r9, s0
    bool ok = false;
    uint_fast8_t idx = sizeof(ngc_named_ro_param) / sizeof(ngc_named_ro_param_t);

    name = ngc_name_tolower(name);
 8014bcc:	f7ff fe4e 	bl	801486c <ngc_name_tolower>
 8014bd0:	4605      	mov	r5, r0

    // Check if name is supplied, return false if not.
    if((*name == '_' ? *(name + 1) : *name) == '\0')
 8014bd2:	7807      	ldrb	r7, [r0, #0]
 8014bd4:	2f5f      	cmp	r7, #95	@ 0x5f
 8014bd6:	d018      	beq.n	8014c0a <ngc_named_param_set+0x46>
 8014bd8:	fab7 f687 	clz	r6, r7
 8014bdc:	0976      	lsrs	r6, r6, #5
 8014bde:	2e00      	cmp	r6, #0
 8014be0:	d153      	bne.n	8014c8a <ngc_named_param_set+0xc6>
        return false;

    // Check if it is a (read only) predefined parameter.
    if(*name == '_') do {
 8014be2:	2f5f      	cmp	r7, #95	@ 0x5f
 8014be4:	d016      	beq.n	8014c14 <ngc_named_param_set+0x50>
        idx--;
        ok = !strcmp(name, ngc_named_ro_param[idx].name);
    } while(idx && !ok);

    // If not predefined attempt to set it.
    if(!ok && (ok = strlen(name) < NGC_MAX_PARAM_LENGTH)) {
 8014be6:	4628      	mov	r0, r5
 8014be8:	f7f3 fa8a 	bl	8008100 <strlen>
 8014bec:	2813      	cmp	r0, #19
 8014bee:	bf94      	ite	ls
 8014bf0:	2001      	movls	r0, #1
 8014bf2:	2000      	movhi	r0, #0
 8014bf4:	d84a      	bhi.n	8014c8c <ngc_named_param_set+0xc8>

        void *context = *name == '_' ? NULL : call_context;
 8014bf6:	2f5f      	cmp	r7, #95	@ 0x5f
 8014bf8:	d01f      	beq.n	8014c3a <ngc_named_param_set+0x76>
 8014bfa:	4b26      	ldr	r3, [pc, #152]	@ (8014c94 <ngc_named_param_set+0xd0>)
 8014bfc:	681f      	ldr	r7, [r3, #0]
        ngc_named_rw_param_t *rw_param = rw_global_params, *rw_param_last = rw_global_params;
 8014bfe:	4b26      	ldr	r3, [pc, #152]	@ (8014c98 <ngc_named_param_set+0xd4>)
 8014c00:	f8d3 a000 	ldr.w	sl, [r3]
 8014c04:	46d0      	mov	r8, sl
 8014c06:	4654      	mov	r4, sl

         while(rw_param) {
 8014c08:	e01b      	b.n	8014c42 <ngc_named_param_set+0x7e>
    if((*name == '_' ? *(name + 1) : *name) == '\0')
 8014c0a:	7846      	ldrb	r6, [r0, #1]
 8014c0c:	fab6 f686 	clz	r6, r6
 8014c10:	0976      	lsrs	r6, r6, #5
 8014c12:	e7e4      	b.n	8014bde <ngc_named_param_set+0x1a>
    uint_fast8_t idx = sizeof(ngc_named_ro_param) / sizeof(ngc_named_ro_param_t);
 8014c14:	242e      	movs	r4, #46	@ 0x2e
        idx--;
 8014c16:	3c01      	subs	r4, #1
        ok = !strcmp(name, ngc_named_ro_param[idx].name);
 8014c18:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8014c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8014c9c <ngc_named_param_set+0xd8>)
 8014c1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014c22:	4628      	mov	r0, r5
 8014c24:	f7f3 fa0c 	bl	8008040 <strcmp>
 8014c28:	4603      	mov	r3, r0
 8014c2a:	fab0 f080 	clz	r0, r0
 8014c2e:	0940      	lsrs	r0, r0, #5
    } while(idx && !ok);
 8014c30:	b10c      	cbz	r4, 8014c36 <ngc_named_param_set+0x72>
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d1ef      	bne.n	8014c16 <ngc_named_param_set+0x52>
    if(!ok && (ok = strlen(name) < NGC_MAX_PARAM_LENGTH)) {
 8014c36:	bb48      	cbnz	r0, 8014c8c <ngc_named_param_set+0xc8>
 8014c38:	e7d5      	b.n	8014be6 <ngc_named_param_set+0x22>
        void *context = *name == '_' ? NULL : call_context;
 8014c3a:	2700      	movs	r7, #0
 8014c3c:	e7df      	b.n	8014bfe <ngc_named_param_set+0x3a>
             if(rw_param->context == context && !strcmp(rw_param->name, name)) {
                 break;
             } else {
                 rw_param_last = rw_param;
 8014c3e:	46a0      	mov	r8, r4
                 rw_param = rw_param->next;
 8014c40:	6a24      	ldr	r4, [r4, #32]
         while(rw_param) {
 8014c42:	b144      	cbz	r4, 8014c56 <ngc_named_param_set+0x92>
             if(rw_param->context == context && !strcmp(rw_param->name, name)) {
 8014c44:	6823      	ldr	r3, [r4, #0]
 8014c46:	42bb      	cmp	r3, r7
 8014c48:	d1f9      	bne.n	8014c3e <ngc_named_param_set+0x7a>
 8014c4a:	4629      	mov	r1, r5
 8014c4c:	1d20      	adds	r0, r4, #4
 8014c4e:	f7f3 f9f7 	bl	8008040 <strcmp>
 8014c52:	2800      	cmp	r0, #0
 8014c54:	d1f3      	bne.n	8014c3e <ngc_named_param_set+0x7a>
             }
         }

         if(rw_param == NULL && (rw_param = malloc(sizeof(ngc_named_rw_param_t)))) {
 8014c56:	b11c      	cbz	r4, 8014c60 <ngc_named_param_set+0x9c>
             else
                 rw_param_last->next = rw_param;
         }

         if((ok = rw_param != NULL))
             rw_param->value = value;
 8014c58:	f8c4 901c 	str.w	r9, [r4, #28]
 8014c5c:	2001      	movs	r0, #1
 8014c5e:	e015      	b.n	8014c8c <ngc_named_param_set+0xc8>
         if(rw_param == NULL && (rw_param = malloc(sizeof(ngc_named_rw_param_t)))) {
 8014c60:	2024      	movs	r0, #36	@ 0x24
 8014c62:	f00d fb43 	bl	80222ec <malloc>
 8014c66:	4604      	mov	r4, r0
 8014c68:	b190      	cbz	r0, 8014c90 <ngc_named_param_set+0xcc>
             strcpy(rw_param->name, name);
 8014c6a:	4629      	mov	r1, r5
 8014c6c:	3004      	adds	r0, #4
 8014c6e:	f00f fd5e 	bl	802472e <strcpy>
             rw_param->context = context;
 8014c72:	6027      	str	r7, [r4, #0]
             rw_param->next = NULL;
 8014c74:	2300      	movs	r3, #0
 8014c76:	6223      	str	r3, [r4, #32]
             if(rw_global_params == NULL)
 8014c78:	f1ba 0f00 	cmp.w	sl, #0
 8014c7c:	d002      	beq.n	8014c84 <ngc_named_param_set+0xc0>
                 rw_param_last->next = rw_param;
 8014c7e:	f8c8 4020 	str.w	r4, [r8, #32]
 8014c82:	e7e9      	b.n	8014c58 <ngc_named_param_set+0x94>
                 rw_global_params = rw_param;
 8014c84:	4b04      	ldr	r3, [pc, #16]	@ (8014c98 <ngc_named_param_set+0xd4>)
 8014c86:	601c      	str	r4, [r3, #0]
 8014c88:	e7e6      	b.n	8014c58 <ngc_named_param_set+0x94>
        return false;
 8014c8a:	2000      	movs	r0, #0
     }

    return ok;
}
 8014c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         if((ok = rw_param != NULL))
 8014c90:	4630      	mov	r0, r6
 8014c92:	e7fb      	b.n	8014c8c <ngc_named_param_set+0xc8>
 8014c94:	200016b0 	.word	0x200016b0
 8014c98:	2000162c 	.word	0x2000162c
 8014c9c:	0802af34 	.word	0x0802af34

08014ca0 <ngc_modal_state_save>:

bool ngc_modal_state_save (gc_modal_t *state, bool auto_restore)
{
 8014ca0:	b538      	push	{r3, r4, r5, lr}
 8014ca2:	4605      	mov	r5, r0
    gc_modal_t **saved_state = call_level == -1 ? &modal_state : &call_levels[call_level].modal_state;
 8014ca4:	4b17      	ldr	r3, [pc, #92]	@ (8014d04 <ngc_modal_state_save+0x64>)
 8014ca6:	681c      	ldr	r4, [r3, #0]
 8014ca8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8014cac:	d022      	beq.n	8014cf4 <ngc_modal_state_save+0x54>
 8014cae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014cb2:	00a4      	lsls	r4, r4, #2
 8014cb4:	3408      	adds	r4, #8
 8014cb6:	4b14      	ldr	r3, [pc, #80]	@ (8014d08 <ngc_modal_state_save+0x68>)
 8014cb8:	441c      	add	r4, r3

    if(*saved_state == NULL)
 8014cba:	6823      	ldr	r3, [r4, #0]
 8014cbc:	b1e3      	cbz	r3, 8014cf8 <ngc_modal_state_save+0x58>
        *saved_state = malloc(sizeof(gc_modal_t));

    if(*saved_state)
 8014cbe:	6823      	ldr	r3, [r4, #0]
 8014cc0:	b19b      	cbz	r3, 8014cea <ngc_modal_state_save+0x4a>
        memcpy(*saved_state, state, sizeof(gc_modal_t));
 8014cc2:	462a      	mov	r2, r5
 8014cc4:	3530      	adds	r5, #48	@ 0x30
 8014cc6:	f8d2 e000 	ldr.w	lr, [r2]
 8014cca:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8014cce:	6890      	ldr	r0, [r2, #8]
 8014cd0:	68d1      	ldr	r1, [r2, #12]
 8014cd2:	f8c3 e000 	str.w	lr, [r3]
 8014cd6:	f8c3 c004 	str.w	ip, [r3, #4]
 8014cda:	6098      	str	r0, [r3, #8]
 8014cdc:	60d9      	str	r1, [r3, #12]
 8014cde:	3210      	adds	r2, #16
 8014ce0:	3310      	adds	r3, #16
 8014ce2:	42aa      	cmp	r2, r5
 8014ce4:	d1ef      	bne.n	8014cc6 <ngc_modal_state_save+0x26>
 8014ce6:	6812      	ldr	r2, [r2, #0]
 8014ce8:	601a      	str	r2, [r3, #0]

    return *saved_state != NULL;
 8014cea:	6820      	ldr	r0, [r4, #0]
}
 8014cec:	3800      	subs	r0, #0
 8014cee:	bf18      	it	ne
 8014cf0:	2001      	movne	r0, #1
 8014cf2:	bd38      	pop	{r3, r4, r5, pc}
    gc_modal_t **saved_state = call_level == -1 ? &modal_state : &call_levels[call_level].modal_state;
 8014cf4:	4c05      	ldr	r4, [pc, #20]	@ (8014d0c <ngc_modal_state_save+0x6c>)
 8014cf6:	e7e0      	b.n	8014cba <ngc_modal_state_save+0x1a>
        *saved_state = malloc(sizeof(gc_modal_t));
 8014cf8:	2034      	movs	r0, #52	@ 0x34
 8014cfa:	f00d faf7 	bl	80222ec <malloc>
 8014cfe:	6020      	str	r0, [r4, #0]
 8014d00:	e7dd      	b.n	8014cbe <ngc_modal_state_save+0x1e>
 8014d02:	bf00      	nop
 8014d04:	200001fc 	.word	0x200001fc
 8014d08:	20001634 	.word	0x20001634
 8014d0c:	200016ac 	.word	0x200016ac

08014d10 <ngc_modal_state_invalidate>:

void ngc_modal_state_invalidate (void)
{
 8014d10:	b510      	push	{r4, lr}
    gc_modal_t **saved_state = call_level == -1 ? &modal_state : &call_levels[call_level].modal_state;
 8014d12:	4b0a      	ldr	r3, [pc, #40]	@ (8014d3c <ngc_modal_state_invalidate+0x2c>)
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d1a:	d00c      	beq.n	8014d36 <ngc_modal_state_invalidate+0x26>
 8014d1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014d20:	009c      	lsls	r4, r3, #2
 8014d22:	3408      	adds	r4, #8
 8014d24:	4b06      	ldr	r3, [pc, #24]	@ (8014d40 <ngc_modal_state_invalidate+0x30>)
 8014d26:	441c      	add	r4, r3

    if(*saved_state) {
 8014d28:	6820      	ldr	r0, [r4, #0]
 8014d2a:	b118      	cbz	r0, 8014d34 <ngc_modal_state_invalidate+0x24>
        free(*saved_state);
 8014d2c:	f00d fae6 	bl	80222fc <free>
        *saved_state = NULL;
 8014d30:	2300      	movs	r3, #0
 8014d32:	6023      	str	r3, [r4, #0]
    }
}
 8014d34:	bd10      	pop	{r4, pc}
    gc_modal_t **saved_state = call_level == -1 ? &modal_state : &call_levels[call_level].modal_state;
 8014d36:	4c03      	ldr	r4, [pc, #12]	@ (8014d44 <ngc_modal_state_invalidate+0x34>)
 8014d38:	e7f6      	b.n	8014d28 <ngc_modal_state_invalidate+0x18>
 8014d3a:	bf00      	nop
 8014d3c:	200001fc 	.word	0x200001fc
 8014d40:	20001634 	.word	0x20001634
 8014d44:	200016ac 	.word	0x200016ac

08014d48 <ngc_modal_state_restore>:

bool ngc_modal_state_restore (void)
{
 8014d48:	b508      	push	{r3, lr}
    return gc_modal_state_restore(call_level == -1 ? modal_state : call_levels[call_level].modal_state);
 8014d4a:	4b08      	ldr	r3, [pc, #32]	@ (8014d6c <ngc_modal_state_restore+0x24>)
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d52:	d008      	beq.n	8014d66 <ngc_modal_state_restore+0x1e>
 8014d54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014d58:	009a      	lsls	r2, r3, #2
 8014d5a:	4b05      	ldr	r3, [pc, #20]	@ (8014d70 <ngc_modal_state_restore+0x28>)
 8014d5c:	4413      	add	r3, r2
 8014d5e:	6898      	ldr	r0, [r3, #8]
 8014d60:	f7f8 f866 	bl	800ce30 <gc_modal_state_restore>
}
 8014d64:	bd08      	pop	{r3, pc}
    return gc_modal_state_restore(call_level == -1 ? modal_state : call_levels[call_level].modal_state);
 8014d66:	4b03      	ldr	r3, [pc, #12]	@ (8014d74 <ngc_modal_state_restore+0x2c>)
 8014d68:	6818      	ldr	r0, [r3, #0]
 8014d6a:	e7f9      	b.n	8014d60 <ngc_modal_state_restore+0x18>
 8014d6c:	200001fc 	.word	0x200001fc
 8014d70:	20001634 	.word	0x20001634
 8014d74:	200016ac 	.word	0x200016ac

08014d78 <ngc_call_push>:

bool ngc_call_push (void *context)
{
 8014d78:	4602      	mov	r2, r0
    bool ok;

    if((ok = call_level < (NGC_MAX_CALL_LEVEL - 1)))
 8014d7a:	4b09      	ldr	r3, [pc, #36]	@ (8014da0 <ngc_call_push+0x28>)
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	2b08      	cmp	r3, #8
 8014d80:	bfd4      	ite	le
 8014d82:	2001      	movle	r0, #1
 8014d84:	2000      	movgt	r0, #0
 8014d86:	dc0a      	bgt.n	8014d9e <ngc_call_push+0x26>
        call_levels[++call_level].context = call_context = context;
 8014d88:	4906      	ldr	r1, [pc, #24]	@ (8014da4 <ngc_call_push+0x2c>)
 8014d8a:	600a      	str	r2, [r1, #0]
 8014d8c:	3301      	adds	r3, #1
 8014d8e:	4904      	ldr	r1, [pc, #16]	@ (8014da0 <ngc_call_push+0x28>)
 8014d90:	600b      	str	r3, [r1, #0]
 8014d92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014d96:	4904      	ldr	r1, [pc, #16]	@ (8014da8 <ngc_call_push+0x30>)
 8014d98:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014d9c:	605a      	str	r2, [r3, #4]

    return ok;
}
 8014d9e:	4770      	bx	lr
 8014da0:	200001fc 	.word	0x200001fc
 8014da4:	200016b0 	.word	0x200016b0
 8014da8:	20001634 	.word	0x20001634

08014dac <ngc_call_level>:
    return call_level >= 0;
}

uint_fast8_t ngc_call_level (void)
{
    return (uint_fast8_t)(call_level + 1);
 8014dac:	4b01      	ldr	r3, [pc, #4]	@ (8014db4 <ngc_call_level+0x8>)
 8014dae:	6818      	ldr	r0, [r3, #0]
}
 8014db0:	3001      	adds	r0, #1
 8014db2:	4770      	bx	lr
 8014db4:	200001fc 	.word	0x200001fc

08014db8 <ngc_named_param_get_by_id>:
{
 8014db8:	b508      	push	{r3, lr}
    switch(id) {
 8014dba:	282d      	cmp	r0, #45	@ 0x2d
 8014dbc:	f200 8139 	bhi.w	8015032 <ngc_named_param_get_by_id+0x27a>
 8014dc0:	e8df f010 	tbh	[pc, r0, lsl #1]
 8014dc4:	013a002e 	.word	0x013a002e
 8014dc8:	00370031 	.word	0x00370031
 8014dcc:	004c0041 	.word	0x004c0041
 8014dd0:	0057004f 	.word	0x0057004f
 8014dd4:	0067005f 	.word	0x0067005f
 8014dd8:	0079006f 	.word	0x0079006f
 8014ddc:	008b0081 	.word	0x008b0081
 8014de0:	00a4009c 	.word	0x00a4009c
 8014de4:	00b600ac 	.word	0x00b600ac
 8014de8:	013a00be 	.word	0x013a00be
 8014dec:	00d000c8 	.word	0x00d000c8
 8014df0:	00e000d8 	.word	0x00e000d8
 8014df4:	00f000e8 	.word	0x00f000e8
 8014df8:	010000f8 	.word	0x010000f8
 8014dfc:	0108013a 	.word	0x0108013a
 8014e00:	01140110 	.word	0x01140110
 8014e04:	01180118 	.word	0x01180118
 8014e08:	01180118 	.word	0x01180118
 8014e0c:	01180118 	.word	0x01180118
 8014e10:	01180118 	.word	0x01180118
 8014e14:	011c0118 	.word	0x011c0118
 8014e18:	0124013a 	.word	0x0124013a
 8014e1c:	0130013a 	.word	0x0130013a
 8014e20:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 80150ac <ngc_named_param_get_by_id+0x2f4>
 8014e24:	e10a      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = (float)gc_state.line_number;
 8014e26:	4ba2      	ldr	r3, [pc, #648]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014e28:	ed93 0a1d 	vldr	s0, [r3, #116]	@ 0x74
 8014e2c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
            break;
 8014e30:	e104      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = (float)(gc_state.modal.motion * 10); // TODO: Fix G38.x
 8014e32:	4b9f      	ldr	r3, [pc, #636]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014e34:	881b      	ldrh	r3, [r3, #0]
 8014e36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014e3a:	005b      	lsls	r3, r3, #1
 8014e3c:	ee07 3a90 	vmov	s15, r3
 8014e40:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
            break;
 8014e44:	e0fa      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = (float)(170 + gc_state.modal.plane_select * 10);
 8014e46:	4b9a      	ldr	r3, [pc, #616]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014e48:	799b      	ldrb	r3, [r3, #6]
 8014e4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014e4e:	005b      	lsls	r3, r3, #1
 8014e50:	33aa      	adds	r3, #170	@ 0xaa
 8014e52:	ee00 3a10 	vmov	s0, r3
 8014e56:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
            break;
 8014e5a:	e0ef      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = 400.0f;
 8014e5c:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 80150b4 <ngc_named_param_get_by_id+0x2fc>
            break;
 8014e60:	e0ec      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.units_imperial ? 0.0f : 1.0f;
 8014e62:	4b93      	ldr	r3, [pc, #588]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014e64:	78db      	ldrb	r3, [r3, #3]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	f000 80e9 	beq.w	801503e <ngc_named_param_get_by_id+0x286>
 8014e6c:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 8014e70:	e0e4      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.units_imperial ? 1.0f : 0.0f;
 8014e72:	4b8f      	ldr	r3, [pc, #572]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014e74:	78db      	ldrb	r3, [r3, #3]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	f000 80e4 	beq.w	8015044 <ngc_named_param_get_by_id+0x28c>
 8014e7c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014e80:	e0dc      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.distance_incremental ? 0.0f : 1.0f;
 8014e82:	4b8b      	ldr	r3, [pc, #556]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014e84:	791b      	ldrb	r3, [r3, #4]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	f000 80df 	beq.w	801504a <ngc_named_param_get_by_id+0x292>
 8014e8c:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 8014e90:	e0d4      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.distance_incremental ? 1.0f : 0.0f;
 8014e92:	4b87      	ldr	r3, [pc, #540]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014e94:	791b      	ldrb	r3, [r3, #4]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	f000 80da 	beq.w	8015050 <ngc_named_param_get_by_id+0x298>
 8014e9c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014ea0:	e0cc      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.feed_mode == FeedMode_InverseTime ? 1.0f : 0.0f;
 8014ea2:	4b83      	ldr	r3, [pc, #524]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014ea4:	789b      	ldrb	r3, [r3, #2]
 8014ea6:	2b01      	cmp	r3, #1
 8014ea8:	d002      	beq.n	8014eb0 <ngc_named_param_get_by_id+0xf8>
 8014eaa:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 8014eae:	e0c5      	b.n	801503c <ngc_named_param_get_by_id+0x284>
 8014eb0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014eb4:	e0c2      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.feed_mode == FeedMode_UnitsPerMin ? 1.0f : 0.0f;
 8014eb6:	4b7e      	ldr	r3, [pc, #504]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014eb8:	789b      	ldrb	r3, [r3, #2]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	f040 80cb 	bne.w	8015056 <ngc_named_param_get_by_id+0x29e>
 8014ec0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014ec4:	e0ba      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.feed_mode == FeedMode_UnitsPerRev ? 1.0f : 0.0f;
 8014ec6:	4b7a      	ldr	r3, [pc, #488]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014ec8:	789b      	ldrb	r3, [r3, #2]
 8014eca:	2b02      	cmp	r3, #2
 8014ecc:	d002      	beq.n	8014ed4 <ngc_named_param_get_by_id+0x11c>
 8014ece:	ed9f 0a7a 	vldr	s0, [pc, #488]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 8014ed2:	e0b3      	b.n	801503c <ngc_named_param_get_by_id+0x284>
 8014ed4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014ed8:	e0b0      	b.n	801503c <ngc_named_param_get_by_id+0x284>
                uint_fast16_t id = gc_state.modal.coord_system.id * 10;
 8014eda:	4b75      	ldr	r3, [pc, #468]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014edc:	7d19      	ldrb	r1, [r3, #20]
 8014ede:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8014ee2:	0052      	lsls	r2, r2, #1
 8014ee4:	4613      	mov	r3, r2
                if(id > (CoordinateSystem_G59 * 10))
 8014ee6:	2a32      	cmp	r2, #50	@ 0x32
 8014ee8:	d901      	bls.n	8014eee <ngc_named_param_get_by_id+0x136>
                    id = (CoordinateSystem_G59 * 10) + gc_state.modal.coord_system.id - CoordinateSystem_G59;
 8014eea:	f101 032d 	add.w	r3, r1, #45	@ 0x2d
                value = (float)(540 + id);
 8014eee:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8014ef2:	ee00 3a10 	vmov	s0, r3
 8014ef6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
            break;
 8014efa:	e09f      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.tool_offset_mode >= ToolLengthOffset_Enable ? 1.0f : 0.0f;
 8014efc:	4b6c      	ldr	r3, [pc, #432]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014efe:	79db      	ldrb	r3, [r3, #7]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	f000 80ab 	beq.w	801505c <ngc_named_param_get_by_id+0x2a4>
 8014f06:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014f0a:	e097      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.retract_mode == CCRetractMode_Previous ? 1.0f : 0.0f;
 8014f0c:	4b68      	ldr	r3, [pc, #416]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014f0e:	7f5b      	ldrb	r3, [r3, #29]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	f040 80a6 	bne.w	8015062 <ngc_named_param_get_by_id+0x2aa>
 8014f16:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014f1a:	e08f      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.retract_mode == CCRetractMode_RPos ? 1.0f : 0.0f;
 8014f1c:	4b64      	ldr	r3, [pc, #400]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014f1e:	7f5b      	ldrb	r3, [r3, #29]
 8014f20:	2b01      	cmp	r3, #1
 8014f22:	d002      	beq.n	8014f2a <ngc_named_param_get_by_id+0x172>
 8014f24:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 8014f28:	e088      	b.n	801503c <ngc_named_param_get_by_id+0x284>
 8014f2a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014f2e:	e085      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? 1.0f : 0.0f;
 8014f30:	4b5f      	ldr	r3, [pc, #380]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014f32:	7edb      	ldrb	r3, [r3, #27]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	f040 8097 	bne.w	8015068 <ngc_named_param_get_by_id+0x2b0>
 8014f3a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014f3e:	e07d      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS ? 1.0f : 0.0f;
 8014f40:	4b5b      	ldr	r3, [pc, #364]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014f42:	7edb      	ldrb	r3, [r3, #27]
 8014f44:	2b01      	cmp	r3, #1
 8014f46:	d002      	beq.n	8014f4e <ngc_named_param_get_by_id+0x196>
 8014f48:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 8014f4c:	e076      	b.n	801503c <ngc_named_param_get_by_id+0x284>
 8014f4e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014f52:	e073      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.diameter_mode ? 1.0f : 0.0f;
 8014f54:	4b56      	ldr	r3, [pc, #344]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014f56:	795b      	ldrb	r3, [r3, #5]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	f000 8088 	beq.w	801506e <ngc_named_param_get_by_id+0x2b6>
 8014f5e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014f62:	e06b      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.diameter_mode ? 0.0f : 1.0f;
 8014f64:	4b52      	ldr	r3, [pc, #328]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014f66:	795b      	ldrb	r3, [r3, #5]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	f000 8083 	beq.w	8015074 <ngc_named_param_get_by_id+0x2bc>
 8014f6e:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 8014f72:	e063      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.state.on ? 1.0f : 0.0f;
 8014f74:	4b4e      	ldr	r3, [pc, #312]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014f76:	7e9b      	ldrb	r3, [r3, #26]
 8014f78:	f013 0f01 	tst.w	r3, #1
 8014f7c:	d07d      	beq.n	801507a <ngc_named_param_get_by_id+0x2c2>
 8014f7e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014f82:	e05b      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.state.ccw ? 1.0f : 0.0f;
 8014f84:	4b4a      	ldr	r3, [pc, #296]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014f86:	7e9b      	ldrb	r3, [r3, #26]
 8014f88:	f013 0f02 	tst.w	r3, #2
 8014f8c:	d078      	beq.n	8015080 <ngc_named_param_get_by_id+0x2c8>
 8014f8e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014f92:	e053      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.coolant.mist ? 1.0f : 0.0f;
 8014f94:	4b46      	ldr	r3, [pc, #280]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014f96:	7e5b      	ldrb	r3, [r3, #25]
 8014f98:	f013 0f02 	tst.w	r3, #2
 8014f9c:	d073      	beq.n	8015086 <ngc_named_param_get_by_id+0x2ce>
 8014f9e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014fa2:	e04b      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.coolant.flood ? 1.0f : 0.0f;
 8014fa4:	4b42      	ldr	r3, [pc, #264]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014fa6:	7e5b      	ldrb	r3, [r3, #25]
 8014fa8:	f013 0f01 	tst.w	r3, #1
 8014fac:	d06e      	beq.n	801508c <ngc_named_param_get_by_id+0x2d4>
 8014fae:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014fb2:	e043      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.spindle_rpm_disable ? 0.0f : 1.0f;
 8014fb4:	4b3e      	ldr	r3, [pc, #248]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014fb6:	7f1b      	ldrb	r3, [r3, #28]
 8014fb8:	f013 0f04 	tst.w	r3, #4
 8014fbc:	d069      	beq.n	8015092 <ngc_named_param_get_by_id+0x2da>
 8014fbe:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 8014fc2:	e03b      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.feed_rate_disable ? 0.0f : 1.0f;
 8014fc4:	4b3a      	ldr	r3, [pc, #232]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014fc6:	7f1b      	ldrb	r3, [r3, #28]
 8014fc8:	f013 0f01 	tst.w	r3, #1
 8014fcc:	d064      	beq.n	8015098 <ngc_named_param_get_by_id+0x2e0>
 8014fce:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 8014fd2:	e033      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.feed_hold_disable ? 0.0f : 1.0f;
 8014fd4:	4b36      	ldr	r3, [pc, #216]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014fd6:	7f1b      	ldrb	r3, [r3, #28]
 8014fd8:	f013 0f02 	tst.w	r3, #2
 8014fdc:	d05f      	beq.n	801509e <ngc_named_param_get_by_id+0x2e6>
 8014fde:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 8014fe2:	e02b      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.feed_rate;
 8014fe4:	4b32      	ldr	r3, [pc, #200]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014fe6:	ed93 0a18 	vldr	s0, [r3, #96]	@ 0x60
            break;
 8014fea:	e027      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.spindle.rpm;
 8014fec:	4b30      	ldr	r3, [pc, #192]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014fee:	ed93 0a14 	vldr	s0, [r3, #80]	@ 0x50
            break;
 8014ff2:	e023      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = _relative_pos(id - NGCParam_x);
 8014ff4:	3820      	subs	r0, #32
 8014ff6:	f7ff fc57 	bl	80148a8 <_relative_pos>
            break;
 8014ffa:	e01f      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = (float)gc_state.tool->tool_id;
 8014ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 8014ffe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8015002:	ed93 0a04 	vldr	s0, [r3, #16]
 8015006:	eeb8 0a40 	vcvt.f32.u32	s0, s0
            break;
 801500a:	e017      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.tool_pending != gc_state.tool->tool_id ? (float)gc_state.tool_pending : -1.0f;
 801500c:	4a28      	ldr	r2, [pc, #160]	@ (80150b0 <ngc_named_param_get_by_id+0x2f8>)
 801500e:	6f93      	ldr	r3, [r2, #120]	@ 0x78
 8015010:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 8015014:	6912      	ldr	r2, [r2, #16]
 8015016:	4293      	cmp	r3, r2
 8015018:	d044      	beq.n	80150a4 <ngc_named_param_get_by_id+0x2ec>
 801501a:	ee07 3a90 	vmov	s15, r3
 801501e:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8015022:	e00b      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = (float)ngc_call_level();
 8015024:	f7ff fec2 	bl	8014dac <ngc_call_level>
 8015028:	ee00 0a10 	vmov	s0, r0
 801502c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
            break;
 8015030:	e004      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = NAN;
 8015032:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80150bc <ngc_named_param_get_by_id+0x304>
 8015036:	e001      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = 0.0f; // TODO: derive from version letter?
 8015038:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
}
 801503c:	bd08      	pop	{r3, pc}
            value = gc_state.modal.units_imperial ? 0.0f : 1.0f;
 801503e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015042:	e7fb      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.units_imperial ? 1.0f : 0.0f;
 8015044:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 8015048:	e7f8      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.distance_incremental ? 0.0f : 1.0f;
 801504a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801504e:	e7f5      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.distance_incremental ? 1.0f : 0.0f;
 8015050:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 8015054:	e7f2      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.feed_mode == FeedMode_UnitsPerMin ? 1.0f : 0.0f;
 8015056:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 801505a:	e7ef      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.tool_offset_mode >= ToolLengthOffset_Enable ? 1.0f : 0.0f;
 801505c:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 8015060:	e7ec      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.retract_mode == CCRetractMode_Previous ? 1.0f : 0.0f;
 8015062:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 8015066:	e7e9      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? 1.0f : 0.0f;
 8015068:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 801506c:	e7e6      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.diameter_mode ? 1.0f : 0.0f;
 801506e:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 8015072:	e7e3      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.diameter_mode ? 0.0f : 1.0f;
 8015074:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015078:	e7e0      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.state.on ? 1.0f : 0.0f;
 801507a:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 801507e:	e7dd      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.state.ccw ? 1.0f : 0.0f;
 8015080:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 8015084:	e7da      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.coolant.mist ? 1.0f : 0.0f;
 8015086:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 801508a:	e7d7      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.coolant.flood ? 1.0f : 0.0f;
 801508c:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80150b8 <ngc_named_param_get_by_id+0x300>
 8015090:	e7d4      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.spindle_rpm_disable ? 0.0f : 1.0f;
 8015092:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015096:	e7d1      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.feed_rate_disable ? 0.0f : 1.0f;
 8015098:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801509c:	e7ce      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.feed_hold_disable ? 0.0f : 1.0f;
 801509e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80150a2:	e7cb      	b.n	801503c <ngc_named_param_get_by_id+0x284>
            value = gc_state.tool_pending != gc_state.tool->tool_id ? (float)gc_state.tool_pending : -1.0f;
 80150a4:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
    return value;
 80150a8:	e7c8      	b.n	801503c <ngc_named_param_get_by_id+0x284>
 80150aa:	bf00      	nop
 80150ac:	3f8ccccd 	.word	0x3f8ccccd
 80150b0:	20000ee4 	.word	0x20000ee4
 80150b4:	43c80000 	.word	0x43c80000
 80150b8:	00000000 	.word	0x00000000
 80150bc:	7fc00000 	.word	0x7fc00000

080150c0 <ngc_named_param_get>:
{
 80150c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150c4:	4688      	mov	r8, r1
    name = ngc_name_tolower(name);
 80150c6:	f7ff fbd1 	bl	801486c <ngc_name_tolower>
 80150ca:	4607      	mov	r7, r0
    *value = 0.0f;
 80150cc:	2300      	movs	r3, #0
 80150ce:	f8c8 3000 	str.w	r3, [r8]
     if(*name == '_') do {
 80150d2:	7803      	ldrb	r3, [r0, #0]
 80150d4:	2b5f      	cmp	r3, #95	@ 0x5f
 80150d6:	d008      	beq.n	80150ea <ngc_named_param_get+0x2a>
    bool found = false;
 80150d8:	2600      	movs	r6, #0
        void *context = *name == '_' ? NULL : call_context;
 80150da:	783b      	ldrb	r3, [r7, #0]
 80150dc:	2b5f      	cmp	r3, #95	@ 0x5f
 80150de:	d026      	beq.n	801512e <ngc_named_param_get+0x6e>
 80150e0:	4b1d      	ldr	r3, [pc, #116]	@ (8015158 <ngc_named_param_get+0x98>)
 80150e2:	681d      	ldr	r5, [r3, #0]
        ngc_named_rw_param_t *rw_param = rw_global_params;
 80150e4:	4b1d      	ldr	r3, [pc, #116]	@ (801515c <ngc_named_param_get+0x9c>)
 80150e6:	681c      	ldr	r4, [r3, #0]
        while(rw_param && !found) {
 80150e8:	e024      	b.n	8015134 <ngc_named_param_get+0x74>
    uint_fast8_t idx = sizeof(ngc_named_ro_param) / sizeof(ngc_named_ro_param_t);
 80150ea:	242e      	movs	r4, #46	@ 0x2e
 80150ec:	e001      	b.n	80150f2 <ngc_named_param_get+0x32>
    } while(idx && !found);
 80150ee:	b1cc      	cbz	r4, 8015124 <ngc_named_param_get+0x64>
 80150f0:	b1c5      	cbz	r5, 8015124 <ngc_named_param_get+0x64>
        idx--;
 80150f2:	3c01      	subs	r4, #1
        if((found = !strcmp(name, ngc_named_ro_param[idx].name)))
 80150f4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80150f8:	4b19      	ldr	r3, [pc, #100]	@ (8015160 <ngc_named_param_get+0xa0>)
 80150fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80150fe:	4638      	mov	r0, r7
 8015100:	f7f2 ff9e 	bl	8008040 <strcmp>
 8015104:	1e05      	subs	r5, r0, #0
 8015106:	bf0c      	ite	eq
 8015108:	2601      	moveq	r6, #1
 801510a:	2600      	movne	r6, #0
 801510c:	d1ef      	bne.n	80150ee <ngc_named_param_get+0x2e>
            *value = ngc_named_param_get_by_id(ngc_named_ro_param[idx].id);
 801510e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8015112:	4b13      	ldr	r3, [pc, #76]	@ (8015160 <ngc_named_param_get+0xa0>)
 8015114:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015118:	7918      	ldrb	r0, [r3, #4]
 801511a:	f7ff fe4d 	bl	8014db8 <ngc_named_param_get_by_id>
 801511e:	ed88 0a00 	vstr	s0, [r8]
 8015122:	e7e4      	b.n	80150ee <ngc_named_param_get+0x2e>
    if(!found) {
 8015124:	2e00      	cmp	r6, #0
 8015126:	d0d8      	beq.n	80150da <ngc_named_param_get+0x1a>
}
 8015128:	4630      	mov	r0, r6
 801512a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        void *context = *name == '_' ? NULL : call_context;
 801512e:	2500      	movs	r5, #0
 8015130:	e7d8      	b.n	80150e4 <ngc_named_param_get+0x24>
                rw_param = rw_param->next;
 8015132:	6a24      	ldr	r4, [r4, #32]
        while(rw_param && !found) {
 8015134:	2c00      	cmp	r4, #0
 8015136:	d0f7      	beq.n	8015128 <ngc_named_param_get+0x68>
 8015138:	2e00      	cmp	r6, #0
 801513a:	d1f5      	bne.n	8015128 <ngc_named_param_get+0x68>
            if((found = rw_param->context == context && !strcmp(rw_param->name, name)))
 801513c:	6823      	ldr	r3, [r4, #0]
 801513e:	42ab      	cmp	r3, r5
 8015140:	d1f7      	bne.n	8015132 <ngc_named_param_get+0x72>
 8015142:	4639      	mov	r1, r7
 8015144:	1d20      	adds	r0, r4, #4
 8015146:	f7f2 ff7b 	bl	8008040 <strcmp>
 801514a:	2800      	cmp	r0, #0
 801514c:	d1f1      	bne.n	8015132 <ngc_named_param_get+0x72>
                *value = rw_param->value;
 801514e:	69e3      	ldr	r3, [r4, #28]
 8015150:	f8c8 3000 	str.w	r3, [r8]
            if((found = rw_param->context == context && !strcmp(rw_param->name, name)))
 8015154:	2601      	movs	r6, #1
 8015156:	e7ed      	b.n	8015134 <ngc_named_param_get+0x74>
 8015158:	200016b0 	.word	0x200016b0
 801515c:	2000162c 	.word	0x2000162c
 8015160:	0802af34 	.word	0x0802af34

08015164 <ngc_float_decimals>:

uint8_t ngc_float_decimals (void)
{
	return settings.flags.report_inches ? N_DECIMAL_COORDVALUE_INCH : N_DECIMAL_COORDVALUE_MM;
 8015164:	4b04      	ldr	r3, [pc, #16]	@ (8015178 <ngc_float_decimals+0x14>)
 8015166:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 801516a:	f013 0f01 	tst.w	r3, #1
 801516e:	d001      	beq.n	8015174 <ngc_float_decimals+0x10>
 8015170:	2004      	movs	r0, #4
 8015172:	4770      	bx	lr
 8015174:	2003      	movs	r0, #3
}
 8015176:	4770      	bx	lr
 8015178:	20001bc4 	.word	0x20001bc4

0801517c <uitoa>:
// Converts an uint32 variable to string.
char *uitoa (uint32_t n)
{
    char *bptr = buf + sizeof(buf);

    *--bptr = '\0';
 801517c:	4b0d      	ldr	r3, [pc, #52]	@ (80151b4 <uitoa+0x38>)
 801517e:	2200      	movs	r2, #0
 8015180:	739a      	strb	r2, [r3, #14]

    if (n == 0)
 8015182:	4602      	mov	r2, r0
 8015184:	b9a0      	cbnz	r0, 80151b0 <uitoa+0x34>
        *--bptr = '0';
 8015186:	4618      	mov	r0, r3
 8015188:	2330      	movs	r3, #48	@ 0x30
 801518a:	f800 3f0d 	strb.w	r3, [r0, #13]!
 801518e:	4770      	bx	lr
    else while (n) {
        *--bptr = '0' + (n % 10);
 8015190:	4b09      	ldr	r3, [pc, #36]	@ (80151b8 <uitoa+0x3c>)
 8015192:	fba3 1302 	umull	r1, r3, r3, r2
 8015196:	08db      	lsrs	r3, r3, #3
 8015198:	4619      	mov	r1, r3
 801519a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801519e:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 80151a2:	3330      	adds	r3, #48	@ 0x30
 80151a4:	f800 3d01 	strb.w	r3, [r0, #-1]!
        n /= 10;
 80151a8:	460a      	mov	r2, r1
    else while (n) {
 80151aa:	2a00      	cmp	r2, #0
 80151ac:	d1f0      	bne.n	8015190 <uitoa+0x14>
    }

    return bptr;
}
 80151ae:	4770      	bx	lr
    *--bptr = '\0';
 80151b0:	4802      	ldr	r0, [pc, #8]	@ (80151bc <uitoa+0x40>)
 80151b2:	e7fa      	b.n	80151aa <uitoa+0x2e>
 80151b4:	200016d8 	.word	0x200016d8
 80151b8:	cccccccd 	.word	0xcccccccd
 80151bc:	200016e6 	.word	0x200016e6

080151c0 <ftoa>:

// Convert float to string by immediately converting to integers.
// Number of decimal places, which are tracked by a counter, must be set by the user.
// The integers is then efficiently converted to a string.
char *ftoa (float n, uint8_t decimal_places)
{
 80151c0:	b410      	push	{r4}
    bool isNegative;
    char *bptr = buf + sizeof(buf);

    *--bptr = '\0';
 80151c2:	4b38      	ldr	r3, [pc, #224]	@ (80152a4 <ftoa+0xe4>)
 80151c4:	2200      	movs	r2, #0
 80151c6:	739a      	strb	r2, [r3, #14]

    if ((isNegative = n < 0.0f))
 80151c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80151cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151d0:	d413      	bmi.n	80151fa <ftoa+0x3a>
 80151d2:	eeb0 7a40 	vmov.f32	s14, s0
        n = -n;

    n += froundvalues[decimal_places];
 80151d6:	4b34      	ldr	r3, [pc, #208]	@ (80152a8 <ftoa+0xe8>)
 80151d8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80151dc:	edd3 7a00 	vldr	s15, [r3]
 80151e0:	ee77 7a87 	vadd.f32	s15, s15, s14

    uint32_t a = (uint32_t)n;
 80151e4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80151e8:	ee17 1a10 	vmov	r1, s14

    if (decimal_places) {
 80151ec:	b390      	cbz	r0, 8015254 <ftoa+0x94>

        n -= (float)a;
 80151ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80151f2:	ee77 7ac7 	vsub.f32	s15, s15, s14

        uint_fast8_t decimals = decimal_places;
 80151f6:	4603      	mov	r3, r0
        while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 80151f8:	e007      	b.n	801520a <ftoa+0x4a>
        n = -n;
 80151fa:	eeb1 7a40 	vneg.f32	s14, s0
 80151fe:	e7ea      	b.n	80151d6 <ftoa+0x16>
            n *= 100.0f;
 8015200:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80152ac <ftoa+0xec>
 8015204:	ee67 7a87 	vmul.f32	s15, s15, s14
            decimals -= 2;
 8015208:	3b02      	subs	r3, #2
        while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 801520a:	2b01      	cmp	r3, #1
 801520c:	d8f8      	bhi.n	8015200 <ftoa+0x40>
        }

        if (decimals)
 801520e:	b11b      	cbz	r3, 8015218 <ftoa+0x58>
            n *= 10.0f;
 8015210:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8015214:	ee67 7a87 	vmul.f32	s15, s15, s14

        uint32_t b = (uint32_t)n;
 8015218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801521c:	ee17 2a90 	vmov	r2, s15
    *--bptr = '\0';
 8015220:	4c23      	ldr	r4, [pc, #140]	@ (80152b0 <ftoa+0xf0>)

        while(decimal_places--) {
 8015222:	e003      	b.n	801522c <ftoa+0x6c>
            if(b) {
                *--bptr = (b % 10) + '0'; // Get digit
                b /= 10;
            } else
                *--bptr = '0';
 8015224:	2330      	movs	r3, #48	@ 0x30
 8015226:	f804 3d01 	strb.w	r3, [r4, #-1]!
 801522a:	4660      	mov	r0, ip
        while(decimal_places--) {
 801522c:	1e43      	subs	r3, r0, #1
 801522e:	fa5f fc83 	uxtb.w	ip, r3
 8015232:	b180      	cbz	r0, 8015256 <ftoa+0x96>
            if(b) {
 8015234:	2a00      	cmp	r2, #0
 8015236:	d0f5      	beq.n	8015224 <ftoa+0x64>
                *--bptr = (b % 10) + '0'; // Get digit
 8015238:	4b1e      	ldr	r3, [pc, #120]	@ (80152b4 <ftoa+0xf4>)
 801523a:	fba3 0302 	umull	r0, r3, r3, r2
 801523e:	08db      	lsrs	r3, r3, #3
 8015240:	4618      	mov	r0, r3
 8015242:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015246:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 801524a:	3330      	adds	r3, #48	@ 0x30
 801524c:	f804 3d01 	strb.w	r3, [r4, #-1]!
                b /= 10;
 8015250:	4602      	mov	r2, r0
 8015252:	e7ea      	b.n	801522a <ftoa+0x6a>
    *--bptr = '\0';
 8015254:	4c16      	ldr	r4, [pc, #88]	@ (80152b0 <ftoa+0xf0>)
        }
    }

    *--bptr = '.'; // Always add decimal point (TODO: is this really needed?)
 8015256:	1e60      	subs	r0, r4, #1
 8015258:	232e      	movs	r3, #46	@ 0x2e
 801525a:	f804 3c01 	strb.w	r3, [r4, #-1]

    if(a == 0)
 801525e:	b9c1      	cbnz	r1, 8015292 <ftoa+0xd2>
        *--bptr = '0';
 8015260:	1ea0      	subs	r0, r4, #2
 8015262:	2330      	movs	r3, #48	@ 0x30
 8015264:	f804 3c02 	strb.w	r3, [r4, #-2]
    else while(a) {
        *--bptr = (a % 10) + '0'; // Get digit
        a /= 10;
    }

    if(isNegative)
 8015268:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801526c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015270:	d412      	bmi.n	8015298 <ftoa+0xd8>
        *--bptr = '-';

    return bptr;
}
 8015272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015276:	4770      	bx	lr
        *--bptr = (a % 10) + '0'; // Get digit
 8015278:	4b0e      	ldr	r3, [pc, #56]	@ (80152b4 <ftoa+0xf4>)
 801527a:	fba3 2301 	umull	r2, r3, r3, r1
 801527e:	08db      	lsrs	r3, r3, #3
 8015280:	461a      	mov	r2, r3
 8015282:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015286:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 801528a:	3330      	adds	r3, #48	@ 0x30
 801528c:	f800 3d01 	strb.w	r3, [r0, #-1]!
        a /= 10;
 8015290:	4611      	mov	r1, r2
    else while(a) {
 8015292:	2900      	cmp	r1, #0
 8015294:	d1f0      	bne.n	8015278 <ftoa+0xb8>
 8015296:	e7e7      	b.n	8015268 <ftoa+0xa8>
        *--bptr = '-';
 8015298:	232d      	movs	r3, #45	@ 0x2d
 801529a:	f800 3c01 	strb.w	r3, [r0, #-1]
 801529e:	3801      	subs	r0, #1
    return bptr;
 80152a0:	e7e7      	b.n	8015272 <ftoa+0xb2>
 80152a2:	bf00      	nop
 80152a4:	200016d8 	.word	0x200016d8
 80152a8:	0802b224 	.word	0x0802b224
 80152ac:	42c80000 	.word	0x42c80000
 80152b0:	200016e6 	.word	0x200016e6
 80152b4:	cccccccd 	.word	0xcccccccd

080152b8 <trim_float>:

// Trim trailing zeros and possibly decimal point
char *trim_float (char *s)
{
 80152b8:	b510      	push	{r4, lr}
 80152ba:	4604      	mov	r4, r0
    if(strchr(s, '.')) {
 80152bc:	212e      	movs	r1, #46	@ 0x2e
 80152be:	f00f f8f5 	bl	80244ac <strchr>
 80152c2:	b168      	cbz	r0, 80152e0 <trim_float+0x28>
        char *s2 = strchr(s, '\0') - 1;
 80152c4:	4620      	mov	r0, r4
 80152c6:	f7f2 ff1b 	bl	8008100 <strlen>
 80152ca:	1e43      	subs	r3, r0, #1
 80152cc:	4423      	add	r3, r4
        while(*s2 == '0')
 80152ce:	e002      	b.n	80152d6 <trim_float+0x1e>
            *s2-- = '\0';
 80152d0:	2200      	movs	r2, #0
 80152d2:	f803 2901 	strb.w	r2, [r3], #-1
        while(*s2 == '0')
 80152d6:	781a      	ldrb	r2, [r3, #0]
 80152d8:	2a30      	cmp	r2, #48	@ 0x30
 80152da:	d0f9      	beq.n	80152d0 <trim_float+0x18>
        if(*s2 == '.')
 80152dc:	2a2e      	cmp	r2, #46	@ 0x2e
 80152de:	d001      	beq.n	80152e4 <trim_float+0x2c>
            *s2 = '\0';
    }

    return s;
}
 80152e0:	4620      	mov	r0, r4
 80152e2:	bd10      	pop	{r4, pc}
            *s2 = '\0';
 80152e4:	2200      	movs	r2, #0
 80152e6:	701a      	strb	r2, [r3, #0]
 80152e8:	e7fa      	b.n	80152e0 <trim_float+0x28>
	...

080152ec <read_uint>:

// Extracts an unsigned integer value from a string.
status_code_t read_uint (char *line, uint_fast8_t *char_counter, uint32_t *uint_ptr)
{
 80152ec:	b570      	push	{r4, r5, r6, lr}
    char *ptr = line + *char_counter;
 80152ee:	680b      	ldr	r3, [r1, #0]
 80152f0:	18c4      	adds	r4, r0, r3
    uint_fast8_t ndigit = 0, c;
    uint32_t intval = 0;
    bool isdecimal = false, ok = false;

    // Grab first character and increment pointer. No spaces assumed in line.
    c = *ptr++;
 80152f2:	5cc3      	ldrb	r3, [r0, r3]

    if (c == '-')
 80152f4:	2b2d      	cmp	r3, #45	@ 0x2d
 80152f6:	d03b      	beq.n	8015370 <read_uint+0x84>
 80152f8:	f104 0c01 	add.w	ip, r4, #1
        return Status_NegativeValue;

    // Skip initial sign character
    if (c == '+')
 80152fc:	2b2b      	cmp	r3, #43	@ 0x2b
 80152fe:	d004      	beq.n	801530a <read_uint+0x1e>

    // Extract number into fast integer. Track decimal in terms of exponent value.
    while(c) {
        c -= '0';
        if (c <= 9) {
            ok = true;
 8015300:	2600      	movs	r6, #0
 8015302:	4635      	mov	r5, r6
 8015304:	4634      	mov	r4, r6
 8015306:	46b6      	mov	lr, r6
 8015308:	e019      	b.n	801533e <read_uint+0x52>
        c = *ptr++;
 801530a:	f104 0c02 	add.w	ip, r4, #2
 801530e:	7863      	ldrb	r3, [r4, #1]
 8015310:	e7f6      	b.n	8015300 <read_uint+0x14>
            if(!isdecimal && (c != 0 || intval))
                ndigit++;
            if (isdecimal && c != 0)
 8015312:	bb7b      	cbnz	r3, 8015374 <read_uint+0x88>
                return Status_GcodeCommandValueNotInteger;

            if ((ndigit <= 9 || c <= 4) && intval <= 429496729) {
 8015314:	f1be 0f09 	cmp.w	lr, #9
 8015318:	d901      	bls.n	801531e <read_uint+0x32>
 801531a:	2b04      	cmp	r3, #4
 801531c:	d81b      	bhi.n	8015356 <read_uint+0x6a>
 801531e:	4e17      	ldr	r6, [pc, #92]	@ (801537c <read_uint+0x90>)
 8015320:	42b4      	cmp	r4, r6
 8015322:	d81a      	bhi.n	801535a <read_uint+0x6e>
                intval = (((intval << 2) + intval) << 1) + c; // intval * 10 + c
 8015324:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8015328:	eb03 0444 	add.w	r4, r3, r4, lsl #1
            ok = true;
 801532c:	2601      	movs	r6, #1
                intval = (((intval << 2) + intval) << 1) + c; // intval * 10 + c
 801532e:	e004      	b.n	801533a <read_uint+0x4e>
            } else if (!isdecimal)
                exp++;  // Drop overflow digits
        } else if (c == (uint_fast8_t)('.' - '0') && !isdecimal)
 8015330:	f113 0f02 	cmn.w	r3, #2
 8015334:	d113      	bne.n	801535e <read_uint+0x72>
 8015336:	b995      	cbnz	r5, 801535e <read_uint+0x72>
            isdecimal = true;
 8015338:	2501      	movs	r5, #1
         else
            break;

        c = *ptr++;
 801533a:	f81c 3b01 	ldrb.w	r3, [ip], #1
    while(c) {
 801533e:	b173      	cbz	r3, 801535e <read_uint+0x72>
        c -= '0';
 8015340:	3b30      	subs	r3, #48	@ 0x30
        if (c <= 9) {
 8015342:	2b09      	cmp	r3, #9
 8015344:	d8f4      	bhi.n	8015330 <read_uint+0x44>
            if(!isdecimal && (c != 0 || intval))
 8015346:	2d00      	cmp	r5, #0
 8015348:	d1e3      	bne.n	8015312 <read_uint+0x26>
 801534a:	b90b      	cbnz	r3, 8015350 <read_uint+0x64>
 801534c:	2c00      	cmp	r4, #0
 801534e:	d0e1      	beq.n	8015314 <read_uint+0x28>
                ndigit++;
 8015350:	f10e 0e01 	add.w	lr, lr, #1
 8015354:	e7de      	b.n	8015314 <read_uint+0x28>
            ok = true;
 8015356:	2601      	movs	r6, #1
 8015358:	e7ef      	b.n	801533a <read_uint+0x4e>
 801535a:	2601      	movs	r6, #1
 801535c:	e7ed      	b.n	801533a <read_uint+0x4e>
    }

    // Return if no digits have been read.

    if (!ok)
 801535e:	b15e      	cbz	r6, 8015378 <read_uint+0x8c>
        return Status_BadNumberFormat;

    *uint_ptr = intval; // Assign value.
 8015360:	6014      	str	r4, [r2, #0]
    *char_counter = ptr - line - 1; // Set char_counter to next statement
 8015362:	ebac 0c00 	sub.w	ip, ip, r0
 8015366:	f10c 33ff 	add.w	r3, ip, #4294967295
 801536a:	600b      	str	r3, [r1, #0]

    return Status_OK;
 801536c:	2000      	movs	r0, #0
}
 801536e:	bd70      	pop	{r4, r5, r6, pc}
        return Status_NegativeValue;
 8015370:	2004      	movs	r0, #4
 8015372:	e7fc      	b.n	801536e <read_uint+0x82>
                return Status_GcodeCommandValueNotInteger;
 8015374:	2017      	movs	r0, #23
 8015376:	e7fa      	b.n	801536e <read_uint+0x82>
        return Status_BadNumberFormat;
 8015378:	2002      	movs	r0, #2
 801537a:	e7f8      	b.n	801536e <read_uint+0x82>
 801537c:	19999999 	.word	0x19999999

08015380 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
bool read_float (char *line, uint_fast8_t *char_counter, float *float_ptr)
{
 8015380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015384:	4607      	mov	r7, r0
    char *ptr = line + *char_counter;
 8015386:	6808      	ldr	r0, [r1, #0]
 8015388:	183b      	adds	r3, r7, r0
    uint_fast8_t ndigit = 0, c;
    uint32_t intval = 0;
    bool isnegative, isdecimal = false, ok = false;

    // Grab first character and increment pointer. No spaces assumed in line.
    c = *ptr++;
 801538a:	f817 8000 	ldrb.w	r8, [r7, r0]

    // Capture initial sign character
    if ((isnegative = (c == '-')) || c == '+')
 801538e:	f1b8 0f2d 	cmp.w	r8, #45	@ 0x2d
 8015392:	d006      	beq.n	80153a2 <read_float+0x22>
 8015394:	f103 0c01 	add.w	ip, r3, #1
 8015398:	f1b8 0f2b 	cmp.w	r8, #43	@ 0x2b
 801539c:	d001      	beq.n	80153a2 <read_float+0x22>
    c = *ptr++;
 801539e:	4643      	mov	r3, r8
 80153a0:	e002      	b.n	80153a8 <read_float+0x28>
        c = *ptr++;
 80153a2:	f103 0c02 	add.w	ip, r3, #2
 80153a6:	785b      	ldrb	r3, [r3, #1]
    c = *ptr++;
 80153a8:	2000      	movs	r0, #0
 80153aa:	4605      	mov	r5, r0
 80153ac:	4604      	mov	r4, r0
 80153ae:	4606      	mov	r6, r0
 80153b0:	4686      	mov	lr, r0
 80153b2:	e00b      	b.n	80153cc <read_float+0x4c>
                ndigit++;
            if (ndigit <= MAX_INT_DIGITS) {
                if (isdecimal)
                    exp--;
                intval = (((intval << 2) + intval) << 1) + c; // intval * 10 + c
            } else if (!isdecimal)
 80153b4:	b9e5      	cbnz	r5, 80153f0 <read_float+0x70>
                exp++;  // Drop overflow digits
 80153b6:	f10e 0e01 	add.w	lr, lr, #1
            ok = true;
 80153ba:	2001      	movs	r0, #1
 80153bc:	e004      	b.n	80153c8 <read_float+0x48>
        } else if (c == (uint_fast8_t)('.' - '0') && !isdecimal)
 80153be:	f113 0f02 	cmn.w	r3, #2
 80153c2:	d117      	bne.n	80153f4 <read_float+0x74>
 80153c4:	b9b5      	cbnz	r5, 80153f4 <read_float+0x74>
            isdecimal = true;
 80153c6:	2501      	movs	r5, #1
         else
            break;

        c = *ptr++;
 80153c8:	f81c 3b01 	ldrb.w	r3, [ip], #1
    while(c) {
 80153cc:	b193      	cbz	r3, 80153f4 <read_float+0x74>
        c -= '0';
 80153ce:	3b30      	subs	r3, #48	@ 0x30
        if (c <= 9) {
 80153d0:	2b09      	cmp	r3, #9
 80153d2:	d8f4      	bhi.n	80153be <read_float+0x3e>
            if(c != 0 || intval)
 80153d4:	b903      	cbnz	r3, 80153d8 <read_float+0x58>
 80153d6:	b104      	cbz	r4, 80153da <read_float+0x5a>
                ndigit++;
 80153d8:	3601      	adds	r6, #1
            if (ndigit <= MAX_INT_DIGITS) {
 80153da:	2e09      	cmp	r6, #9
 80153dc:	d8ea      	bhi.n	80153b4 <read_float+0x34>
                if (isdecimal)
 80153de:	b10d      	cbz	r5, 80153e4 <read_float+0x64>
                    exp--;
 80153e0:	f10e 3eff 	add.w	lr, lr, #4294967295
                intval = (((intval << 2) + intval) << 1) + c; // intval * 10 + c
 80153e4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80153e8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
            ok = true;
 80153ec:	2001      	movs	r0, #1
 80153ee:	e7eb      	b.n	80153c8 <read_float+0x48>
 80153f0:	4628      	mov	r0, r5
 80153f2:	e7e9      	b.n	80153c8 <read_float+0x48>
    }

    // Return if no digits have been read.
    if (!ok)
 80153f4:	b190      	cbz	r0, 801541c <read_float+0x9c>
        return false;

    // Convert integer into floating point.
    float fval = (float)intval;
 80153f6:	ee07 4a90 	vmov	s15, r4
 80153fa:	eef8 7a67 	vcvt.f32.u32	s15, s15

    // Apply decimal. Should perform no more than two floating point multiplications for the
    // expected range of E0 to E-4.
    if (fval != 0.0f) {
 80153fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015406:	d10b      	bne.n	8015420 <read_float+0xa0>
            fval *= 10.0f;
        } while (--exp > 0);
    }

    // Assign floating point value with correct sign.
    *float_ptr = isnegative ? - fval : fval;
 8015408:	f1b8 0f2d 	cmp.w	r8, #45	@ 0x2d
 801540c:	d027      	beq.n	801545e <read_float+0xde>
 801540e:	edc2 7a00 	vstr	s15, [r2]
    *char_counter = ptr - line - 1; // Set char_counter to next statement
 8015412:	ebac 0c07 	sub.w	ip, ip, r7
 8015416:	f10c 33ff 	add.w	r3, ip, #4294967295
 801541a:	600b      	str	r3, [r1, #0]

    return true;
}
 801541c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (exp <= -2) {
 8015420:	f1be 3fff 	cmp.w	lr, #4294967295
 8015424:	da06      	bge.n	8015434 <read_float+0xb4>
            fval *= 0.01f;
 8015426:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8015464 <read_float+0xe4>
 801542a:	ee67 7a87 	vmul.f32	s15, s15, s14
            exp += 2;
 801542e:	f10e 0e02 	add.w	lr, lr, #2
 8015432:	e7f5      	b.n	8015420 <read_float+0xa0>
        if (exp < 0)
 8015434:	f1be 0f00 	cmp.w	lr, #0
 8015438:	db0c      	blt.n	8015454 <read_float+0xd4>
        else if (exp > 0) do {
 801543a:	f1be 0f00 	cmp.w	lr, #0
 801543e:	dde3      	ble.n	8015408 <read_float+0x88>
            fval *= 10.0f;
 8015440:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8015444:	ee67 7a87 	vmul.f32	s15, s15, s14
        } while (--exp > 0);
 8015448:	f10e 3eff 	add.w	lr, lr, #4294967295
 801544c:	f1be 0f00 	cmp.w	lr, #0
 8015450:	dcf6      	bgt.n	8015440 <read_float+0xc0>
 8015452:	e7d9      	b.n	8015408 <read_float+0x88>
            fval *= 0.1f;
 8015454:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8015468 <read_float+0xe8>
 8015458:	ee67 7a87 	vmul.f32	s15, s15, s14
 801545c:	e7d4      	b.n	8015408 <read_float+0x88>
    *float_ptr = isnegative ? - fval : fval;
 801545e:	eef1 7a67 	vneg.f32	s15, s15
 8015462:	e7d4      	b.n	801540e <read_float+0x8e>
 8015464:	3c23d70a 	.word	0x3c23d70a
 8015468:	3dcccccd 	.word	0x3dcccccd

0801546c <isintf>:

// Returns true if float value is a whole number (integer)
bool isintf (float value)
{
 801546c:	b508      	push	{r3, lr}
 801546e:	ed2d 8b02 	vpush	{d8}
 8015472:	eeb0 8a40 	vmov.f32	s16, s0
    return value != NAN && fabsf(value - truncf(value)) < 0.001f;
 8015476:	f011 ff1b 	bl	80272b0 <truncf>
 801547a:	ee38 8a40 	vsub.f32	s16, s16, s0
 801547e:	eeb0 8ac8 	vabs.f32	s16, s16
 8015482:	eddf 7a06 	vldr	s15, [pc, #24]	@ 801549c <isintf+0x30>
 8015486:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801548a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 801548e:	bf4c      	ite	mi
 8015490:	2001      	movmi	r0, #1
 8015492:	2000      	movpl	r0, #0
 8015494:	ecbd 8b02 	vpop	{d8}
 8015498:	bd08      	pop	{r3, pc}
 801549a:	bf00      	nop
 801549c:	3a83126f 	.word	0x3a83126f

080154a0 <delay_sec>:

// Non-blocking delay function used for general operation and suspend features.
bool delay_sec (float seconds, delaymode_t mode)
{
 80154a0:	b570      	push	{r4, r5, r6, lr}
 80154a2:	4606      	mov	r6, r0
    bool ok = true;

    uint_fast16_t i = (uint_fast16_t)ceilf((1000.0f / DWELL_TIME_STEP) * seconds) + 1;
 80154a4:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 80154a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80154ac:	f011 fe56 	bl	802715c <ceilf>
 80154b0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80154b4:	ee10 5a10 	vmov	r5, s0
 80154b8:	3501      	adds	r5, #1
    bool ok = true;
 80154ba:	2401      	movs	r4, #1

    while(--i && ok) {
 80154bc:	e00d      	b.n	80154da <delay_sec+0x3a>
        if(mode == DelayMode_Dwell)
            ok = protocol_execute_realtime();
        else // DelayMode_SysSuspende, xecute rt_system() only to avoid nesting suspend loops.
            ok = protocol_exec_rt_system() && !state_door_reopened(); // Bail, if safety door reopens.
 80154be:	f001 fa91 	bl	80169e4 <protocol_exec_rt_system>
 80154c2:	4604      	mov	r4, r0
 80154c4:	b188      	cbz	r0, 80154ea <delay_sec+0x4a>
 80154c6:	f009 f907 	bl	801e6d8 <state_door_reopened>
 80154ca:	b108      	cbz	r0, 80154d0 <delay_sec+0x30>
 80154cc:	2400      	movs	r4, #0
 80154ce:	e00c      	b.n	80154ea <delay_sec+0x4a>
        if(ok)
            hal.delay_ms(DWELL_TIME_STEP, NULL); // Delay DWELL_TIME_STEP increment
 80154d0:	4b08      	ldr	r3, [pc, #32]	@ (80154f4 <delay_sec+0x54>)
 80154d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80154d4:	2100      	movs	r1, #0
 80154d6:	2032      	movs	r0, #50	@ 0x32
 80154d8:	4798      	blx	r3
    while(--i && ok) {
 80154da:	3d01      	subs	r5, #1
 80154dc:	d008      	beq.n	80154f0 <delay_sec+0x50>
 80154de:	b13c      	cbz	r4, 80154f0 <delay_sec+0x50>
        if(mode == DelayMode_Dwell)
 80154e0:	2e00      	cmp	r6, #0
 80154e2:	d1ec      	bne.n	80154be <delay_sec+0x1e>
            ok = protocol_execute_realtime();
 80154e4:	f001 fda6 	bl	8017034 <protocol_execute_realtime>
 80154e8:	4604      	mov	r4, r0
        if(ok)
 80154ea:	2c00      	cmp	r4, #0
 80154ec:	d0f5      	beq.n	80154da <delay_sec+0x3a>
 80154ee:	e7ef      	b.n	80154d0 <delay_sec+0x30>
    }

    return ok;
}
 80154f0:	4620      	mov	r0, r4
 80154f2:	bd70      	pop	{r4, r5, r6, pc}
 80154f4:	200011ac 	.word	0x200011ac

080154f8 <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector (float *vector)
{
 80154f8:	b510      	push	{r4, lr}
 80154fa:	4604      	mov	r4, r0
    uint_fast8_t idx = N_AXIS;
    float magnitude = 0.0f, inv_magnitude;
 80154fc:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 801554c <convert_delta_vector_to_unit_vector+0x54>
    uint_fast8_t idx = N_AXIS;
 8015500:	2303      	movs	r3, #3
 8015502:	e004      	b.n	801550e <convert_delta_vector_to_unit_vector+0x16>

    do {
        if (vector[--idx] != 0.0f)
            magnitude += vector[idx] * vector[idx];
 8015504:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015508:	ee30 0a27 	vadd.f32	s0, s0, s15
    } while(idx);
 801550c:	b153      	cbz	r3, 8015524 <convert_delta_vector_to_unit_vector+0x2c>
        if (vector[--idx] != 0.0f)
 801550e:	3b01      	subs	r3, #1
 8015510:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015514:	edd2 7a00 	vldr	s15, [r2]
 8015518:	eef5 7a40 	vcmp.f32	s15, #0.0
 801551c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015520:	d0f4      	beq.n	801550c <convert_delta_vector_to_unit_vector+0x14>
 8015522:	e7ef      	b.n	8015504 <convert_delta_vector_to_unit_vector+0xc>

    idx = N_AXIS;
    magnitude = sqrtf(magnitude);
 8015524:	f011 fd0c 	bl	8026f40 <sqrtf>
    inv_magnitude = 1.0f / magnitude;
 8015528:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801552c:	ee87 7a80 	vdiv.f32	s14, s15, s0
    idx = N_AXIS;
 8015530:	2303      	movs	r3, #3

    do {
        vector[--idx] *= inv_magnitude;
 8015532:	3b01      	subs	r3, #1
 8015534:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015538:	edd2 7a00 	vldr	s15, [r2]
 801553c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015540:	edc2 7a00 	vstr	s15, [r2]
    } while(idx);
 8015544:	2b00      	cmp	r3, #0
 8015546:	d1f4      	bne.n	8015532 <convert_delta_vector_to_unit_vector+0x3a>

    return magnitude;
}
 8015548:	bd10      	pop	{r4, pc}
 801554a:	bf00      	nop
 801554c:	00000000 	.word	0x00000000

08015550 <get_datetime>:

// parse ISO8601 datetime: YYYY-MM-DDTHH:MM:SSZxxx
struct tm *get_datetime (const char *s)
{
 8015550:	b570      	push	{r4, r5, r6, lr}
 8015552:	4604      	mov	r4, r0
    PROGMEM static const uint8_t mdays[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

    char *s1 = (char *)s, c;
    uint_fast16_t idx = 0, value = 0;

    memset(&dt, 0, sizeof(struct tm));
 8015554:	4d49      	ldr	r5, [pc, #292]	@ (801567c <get_datetime+0x12c>)
 8015556:	2224      	movs	r2, #36	@ 0x24
 8015558:	2100      	movs	r1, #0
 801555a:	4628      	mov	r0, r5
 801555c:	f00e ff8f 	bl	802447e <memset>
    dt.tm_year = dt.tm_mon = dt.tm_mday = dt.tm_hour = dt.tm_min = dt.tm_sec = -1;
 8015560:	f04f 33ff 	mov.w	r3, #4294967295
 8015564:	602b      	str	r3, [r5, #0]
 8015566:	606b      	str	r3, [r5, #4]
 8015568:	60ab      	str	r3, [r5, #8]
 801556a:	60eb      	str	r3, [r5, #12]
 801556c:	612b      	str	r3, [r5, #16]
 801556e:	616b      	str	r3, [r5, #20]
    uint_fast16_t idx = 0, value = 0;
 8015570:	2200      	movs	r2, #0
 8015572:	4611      	mov	r1, r2
 8015574:	e005      	b.n	8015582 <get_datetime+0x32>

    do {
        c = *s1++;

        if(isdigit(c))
            value = (value * 10) + c - '0';
 8015576:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801557a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801557e:	3a30      	subs	r2, #48	@ 0x30
                    break;
            }
            idx++;
            value = 0;
        }
    } while(c);
 8015580:	b1c3      	cbz	r3, 80155b4 <get_datetime+0x64>
        c = *s1++;
 8015582:	7823      	ldrb	r3, [r4, #0]
 8015584:	3401      	adds	r4, #1
        if(isdigit(c))
 8015586:	483e      	ldr	r0, [pc, #248]	@ (8015680 <get_datetime+0x130>)
 8015588:	5cc0      	ldrb	r0, [r0, r3]
 801558a:	f010 0f04 	tst.w	r0, #4
 801558e:	d1f2      	bne.n	8015576 <get_datetime+0x26>
        else if(!(c == '-' || c == ':' || c == 'T' || c == 'Z' || c == '\0'))
 8015590:	2b54      	cmp	r3, #84	@ 0x54
 8015592:	d004      	beq.n	801559e <get_datetime+0x4e>
 8015594:	d80a      	bhi.n	80155ac <get_datetime+0x5c>
 8015596:	2b2d      	cmp	r3, #45	@ 0x2d
 8015598:	d001      	beq.n	801559e <get_datetime+0x4e>
 801559a:	2b3a      	cmp	r3, #58	@ 0x3a
 801559c:	d108      	bne.n	80155b0 <get_datetime+0x60>
            switch(idx) {
 801559e:	2905      	cmp	r1, #5
 80155a0:	d81a      	bhi.n	80155d8 <get_datetime+0x88>
 80155a2:	e8df f001 	tbb	[pc, r1]
 80155a6:	2917      	.short	0x2917
 80155a8:	5f585133 	.word	0x5f585133
 80155ac:	2b5a      	cmp	r3, #90	@ 0x5a
 80155ae:	d0f6      	beq.n	801559e <get_datetime+0x4e>
        else if(!(c == '-' || c == ':' || c == 'T' || c == 'Z' || c == '\0'))
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d0f4      	beq.n	801559e <get_datetime+0x4e>

    return (dt.tm_year | dt.tm_mon | dt.tm_mday | dt.tm_hour | dt.tm_min | dt.tm_sec) > 0 ? &dt : NULL;
 80155b4:	4a31      	ldr	r2, [pc, #196]	@ (801567c <get_datetime+0x12c>)
 80155b6:	6953      	ldr	r3, [r2, #20]
 80155b8:	6911      	ldr	r1, [r2, #16]
 80155ba:	430b      	orrs	r3, r1
 80155bc:	68d1      	ldr	r1, [r2, #12]
 80155be:	430b      	orrs	r3, r1
 80155c0:	6891      	ldr	r1, [r2, #8]
 80155c2:	430b      	orrs	r3, r1
 80155c4:	6851      	ldr	r1, [r2, #4]
 80155c6:	430b      	orrs	r3, r1
 80155c8:	6812      	ldr	r2, [r2, #0]
 80155ca:	4313      	orrs	r3, r2
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	dd52      	ble.n	8015676 <get_datetime+0x126>
 80155d0:	482a      	ldr	r0, [pc, #168]	@ (801567c <get_datetime+0x12c>)
}
 80155d2:	bd70      	pop	{r4, r5, r6, pc}
                    if(c == '-' && value >= 1970 && value <= 2099)
 80155d4:	2b2d      	cmp	r3, #45	@ 0x2d
 80155d6:	d002      	beq.n	80155de <get_datetime+0x8e>
            idx++;
 80155d8:	3101      	adds	r1, #1
            value = 0;
 80155da:	2200      	movs	r2, #0
 80155dc:	e7d0      	b.n	8015580 <get_datetime+0x30>
                    if(c == '-' && value >= 1970 && value <= 2099)
 80155de:	f240 70b1 	movw	r0, #1969	@ 0x7b1
 80155e2:	4282      	cmp	r2, r0
 80155e4:	d9f8      	bls.n	80155d8 <get_datetime+0x88>
 80155e6:	f640 0033 	movw	r0, #2099	@ 0x833
 80155ea:	4282      	cmp	r2, r0
 80155ec:	d8f4      	bhi.n	80155d8 <get_datetime+0x88>
                        dt.tm_year = value - 1900;
 80155ee:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
 80155f2:	4822      	ldr	r0, [pc, #136]	@ (801567c <get_datetime+0x12c>)
 80155f4:	6142      	str	r2, [r0, #20]
 80155f6:	e7ef      	b.n	80155d8 <get_datetime+0x88>
                    if(c == '-' && value >= 1 && value <= 12)
 80155f8:	2b2d      	cmp	r3, #45	@ 0x2d
 80155fa:	d1ed      	bne.n	80155d8 <get_datetime+0x88>
 80155fc:	2a00      	cmp	r2, #0
 80155fe:	d0eb      	beq.n	80155d8 <get_datetime+0x88>
 8015600:	2a0c      	cmp	r2, #12
 8015602:	d8e9      	bhi.n	80155d8 <get_datetime+0x88>
                        dt.tm_mon = value - 1;
 8015604:	3a01      	subs	r2, #1
 8015606:	481d      	ldr	r0, [pc, #116]	@ (801567c <get_datetime+0x12c>)
 8015608:	6102      	str	r2, [r0, #16]
 801560a:	e7e5      	b.n	80155d8 <get_datetime+0x88>
                    if(c == 'T' && value >= 1 && value <= (mdays[dt.tm_mon >= 0 ? dt.tm_mon : 0] + (dt.tm_mon == 1 && dt.tm_year != 100 && (dt.tm_year % 4) == 0 ? 1 : 0)))
 801560c:	2b54      	cmp	r3, #84	@ 0x54
 801560e:	d1e3      	bne.n	80155d8 <get_datetime+0x88>
 8015610:	2a00      	cmp	r2, #0
 8015612:	d0e1      	beq.n	80155d8 <get_datetime+0x88>
 8015614:	4819      	ldr	r0, [pc, #100]	@ (801567c <get_datetime+0x12c>)
 8015616:	6900      	ldr	r0, [r0, #16]
 8015618:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
 801561c:	4e19      	ldr	r6, [pc, #100]	@ (8015684 <get_datetime+0x134>)
 801561e:	5d75      	ldrb	r5, [r6, r5]
 8015620:	2801      	cmp	r0, #1
 8015622:	d006      	beq.n	8015632 <get_datetime+0xe2>
 8015624:	2000      	movs	r0, #0
 8015626:	4428      	add	r0, r5
 8015628:	4290      	cmp	r0, r2
 801562a:	d3d5      	bcc.n	80155d8 <get_datetime+0x88>
                        dt.tm_mday = value;
 801562c:	4813      	ldr	r0, [pc, #76]	@ (801567c <get_datetime+0x12c>)
 801562e:	60c2      	str	r2, [r0, #12]
 8015630:	e7d2      	b.n	80155d8 <get_datetime+0x88>
                    if(c == 'T' && value >= 1 && value <= (mdays[dt.tm_mon >= 0 ? dt.tm_mon : 0] + (dt.tm_mon == 1 && dt.tm_year != 100 && (dt.tm_year % 4) == 0 ? 1 : 0)))
 8015632:	4e12      	ldr	r6, [pc, #72]	@ (801567c <get_datetime+0x12c>)
 8015634:	6976      	ldr	r6, [r6, #20]
 8015636:	2e64      	cmp	r6, #100	@ 0x64
 8015638:	d004      	beq.n	8015644 <get_datetime+0xf4>
 801563a:	f016 0f03 	tst.w	r6, #3
 801563e:	d0f2      	beq.n	8015626 <get_datetime+0xd6>
 8015640:	2000      	movs	r0, #0
 8015642:	e7f0      	b.n	8015626 <get_datetime+0xd6>
 8015644:	2000      	movs	r0, #0
 8015646:	e7ee      	b.n	8015626 <get_datetime+0xd6>
                    if(c == ':' && value <= 23)
 8015648:	2b3a      	cmp	r3, #58	@ 0x3a
 801564a:	d1c5      	bne.n	80155d8 <get_datetime+0x88>
 801564c:	2a17      	cmp	r2, #23
 801564e:	d8c3      	bhi.n	80155d8 <get_datetime+0x88>
                        dt.tm_hour = value;
 8015650:	480a      	ldr	r0, [pc, #40]	@ (801567c <get_datetime+0x12c>)
 8015652:	6082      	str	r2, [r0, #8]
 8015654:	e7c0      	b.n	80155d8 <get_datetime+0x88>
                    if(c == ':' && value <= 59)
 8015656:	2b3a      	cmp	r3, #58	@ 0x3a
 8015658:	d1be      	bne.n	80155d8 <get_datetime+0x88>
 801565a:	2a3b      	cmp	r2, #59	@ 0x3b
 801565c:	d8bc      	bhi.n	80155d8 <get_datetime+0x88>
                        dt.tm_min = value;
 801565e:	4807      	ldr	r0, [pc, #28]	@ (801567c <get_datetime+0x12c>)
 8015660:	6042      	str	r2, [r0, #4]
 8015662:	e7b9      	b.n	80155d8 <get_datetime+0x88>
                    if((c == 'Z' || c == '\0') && value <= 59)
 8015664:	2b5a      	cmp	r3, #90	@ 0x5a
 8015666:	d001      	beq.n	801566c <get_datetime+0x11c>
 8015668:	2b00      	cmp	r3, #0
 801566a:	d1b5      	bne.n	80155d8 <get_datetime+0x88>
 801566c:	2a3b      	cmp	r2, #59	@ 0x3b
 801566e:	d8b3      	bhi.n	80155d8 <get_datetime+0x88>
                        dt.tm_sec = value;
 8015670:	4802      	ldr	r0, [pc, #8]	@ (801567c <get_datetime+0x12c>)
 8015672:	6002      	str	r2, [r0, #0]
 8015674:	e7b0      	b.n	80155d8 <get_datetime+0x88>
    return (dt.tm_year | dt.tm_mon | dt.tm_mday | dt.tm_hour | dt.tm_min | dt.tm_sec) > 0 ? &dt : NULL;
 8015676:	2000      	movs	r0, #0
 8015678:	e7ab      	b.n	80155d2 <get_datetime+0x82>
 801567a:	bf00      	nop
 801567c:	200016b4 	.word	0x200016b4
 8015680:	08030aa9 	.word	0x08030aa9
 8015684:	0802b20c 	.word	0x0802b20c

08015688 <calc_checksum>:

// calculate checksum byte for data
uint8_t calc_checksum (uint8_t *data, uint32_t size) {
 8015688:	4603      	mov	r3, r0

    uint8_t checksum = 0;
 801568a:	2000      	movs	r0, #0

    while(size--) {
 801568c:	e008      	b.n	80156a0 <calc_checksum+0x18>
        checksum = (checksum << 1) | (checksum >> 7);
 801568e:	09c2      	lsrs	r2, r0, #7
 8015690:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
        checksum += *(data++);
 8015694:	f813 1b01 	ldrb.w	r1, [r3], #1
 8015698:	fa51 f282 	uxtab	r2, r1, r2
 801569c:	b2d0      	uxtb	r0, r2
    while(size--) {
 801569e:	4661      	mov	r1, ip
 80156a0:	f101 3cff 	add.w	ip, r1, #4294967295
 80156a4:	2900      	cmp	r1, #0
 80156a6:	d1f2      	bne.n	801568e <calc_checksum+0x6>
    }

    return checksum;
}
 80156a8:	4770      	bx	lr

080156aa <dummy_handler>:
}

void dummy_handler (void)
{
    // NOOP
}
 80156aa:	4770      	bx	lr

080156ac <ram_get_byte>:
    {0, 0, 0} // list termination - do not remove
};

inline static uint8_t ram_get_byte (uint32_t addr)
{
    return nvsbuffer[addr];
 80156ac:	4b01      	ldr	r3, [pc, #4]	@ (80156b4 <ram_get_byte+0x8>)
 80156ae:	681b      	ldr	r3, [r3, #0]
}
 80156b0:	5c18      	ldrb	r0, [r3, r0]
 80156b2:	4770      	bx	lr
 80156b4:	20001720 	.word	0x20001720

080156b8 <ram_put_byte>:

inline static void ram_put_byte (uint32_t addr, uint8_t new_value)
{
    if(addr == 0)
 80156b8:	4603      	mov	r3, r0
 80156ba:	b910      	cbnz	r0, 80156c2 <ram_put_byte+0xa>
        settings_dirty.version = true;
 80156bc:	4a0c      	ldr	r2, [pc, #48]	@ (80156f0 <ram_put_byte+0x38>)
 80156be:	2001      	movs	r0, #1
 80156c0:	7050      	strb	r0, [r2, #1]
    dirty = dirty || nvsbuffer[addr] != new_value || addr == 0;
 80156c2:	4a0c      	ldr	r2, [pc, #48]	@ (80156f4 <ram_put_byte+0x3c>)
 80156c4:	7812      	ldrb	r2, [r2, #0]
 80156c6:	b94a      	cbnz	r2, 80156dc <ram_put_byte+0x24>
 80156c8:	4a0b      	ldr	r2, [pc, #44]	@ (80156f8 <ram_put_byte+0x40>)
 80156ca:	6812      	ldr	r2, [r2, #0]
 80156cc:	5cd2      	ldrb	r2, [r2, r3]
 80156ce:	428a      	cmp	r2, r1
 80156d0:	d001      	beq.n	80156d6 <ram_put_byte+0x1e>
 80156d2:	2001      	movs	r0, #1
 80156d4:	e003      	b.n	80156de <ram_put_byte+0x26>
 80156d6:	b943      	cbnz	r3, 80156ea <ram_put_byte+0x32>
 80156d8:	2001      	movs	r0, #1
 80156da:	e000      	b.n	80156de <ram_put_byte+0x26>
 80156dc:	2001      	movs	r0, #1
 80156de:	4a05      	ldr	r2, [pc, #20]	@ (80156f4 <ram_put_byte+0x3c>)
 80156e0:	7010      	strb	r0, [r2, #0]
    nvsbuffer[addr] = new_value;
 80156e2:	4a05      	ldr	r2, [pc, #20]	@ (80156f8 <ram_put_byte+0x40>)
 80156e4:	6812      	ldr	r2, [r2, #0]
 80156e6:	54d1      	strb	r1, [r2, r3]
}
 80156e8:	4770      	bx	lr
    dirty = dirty || nvsbuffer[addr] != new_value || addr == 0;
 80156ea:	2000      	movs	r0, #0
 80156ec:	e7f7      	b.n	80156de <ram_put_byte+0x26>
 80156ee:	bf00      	nop
 80156f0:	200016e8 	.word	0x200016e8
 80156f4:	200016f0 	.word	0x200016f0
 80156f8:	20001720 	.word	0x20001720

080156fc <memcpy_from_ram>:

    return NVS_TransferResult_OK;
}

static nvs_transfer_result_t memcpy_from_ram (uint8_t *destination, uint32_t source, uint32_t size, bool with_checksum)
{
 80156fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015700:	4604      	mov	r4, r0
 8015702:	460d      	mov	r5, r1
 8015704:	4616      	mov	r6, r2
 8015706:	461f      	mov	r7, r3
    if(hal.nvs.driver_area.address && source > hal.nvs.driver_area.address + hal.nvs.driver_area.size)
 8015708:	4b19      	ldr	r3, [pc, #100]	@ (8015770 <memcpy_from_ram+0x74>)
 801570a:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 801570e:	b12b      	cbz	r3, 801571c <memcpy_from_ram+0x20>
 8015710:	4a17      	ldr	r2, [pc, #92]	@ (8015770 <memcpy_from_ram+0x74>)
 8015712:	f8b2 2186 	ldrh.w	r2, [r2, #390]	@ 0x186
 8015716:	4413      	add	r3, r2
 8015718:	428b      	cmp	r3, r1
 801571a:	d302      	bcc.n	8015722 <memcpy_from_ram+0x26>
        return physical_nvs.memcpy_from_nvs(destination, source, size, with_checksum);

    uint8_t checksum = with_checksum ? calc_checksum(&nvsbuffer[source], size) : 0;
 801571c:	b947      	cbnz	r7, 8015730 <memcpy_from_ram+0x34>
 801571e:	2300      	movs	r3, #0

    for(; size > 0; size--)
 8015720:	e017      	b.n	8015752 <memcpy_from_ram+0x56>
        return physical_nvs.memcpy_from_nvs(destination, source, size, with_checksum);
 8015722:	4b14      	ldr	r3, [pc, #80]	@ (8015774 <memcpy_from_ram+0x78>)
 8015724:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8015728:	463b      	mov	r3, r7
 801572a:	4632      	mov	r2, r6
 801572c:	47c0      	blx	r8
 801572e:	e019      	b.n	8015764 <memcpy_from_ram+0x68>
    uint8_t checksum = with_checksum ? calc_checksum(&nvsbuffer[source], size) : 0;
 8015730:	4b11      	ldr	r3, [pc, #68]	@ (8015778 <memcpy_from_ram+0x7c>)
 8015732:	6818      	ldr	r0, [r3, #0]
 8015734:	4631      	mov	r1, r6
 8015736:	4428      	add	r0, r5
 8015738:	f7ff ffa6 	bl	8015688 <calc_checksum>
 801573c:	4603      	mov	r3, r0
 801573e:	e008      	b.n	8015752 <memcpy_from_ram+0x56>
        *(destination++) = ram_get_byte(source++);
 8015740:	4620      	mov	r0, r4
    return nvsbuffer[addr];
 8015742:	4a0d      	ldr	r2, [pc, #52]	@ (8015778 <memcpy_from_ram+0x7c>)
 8015744:	6812      	ldr	r2, [r2, #0]
 8015746:	5d52      	ldrb	r2, [r2, r5]
        *(destination++) = ram_get_byte(source++);
 8015748:	f800 2b01 	strb.w	r2, [r0], #1
    for(; size > 0; size--)
 801574c:	3e01      	subs	r6, #1
        *(destination++) = ram_get_byte(source++);
 801574e:	3501      	adds	r5, #1
 8015750:	4604      	mov	r4, r0
    for(; size > 0; size--)
 8015752:	2e00      	cmp	r6, #0
 8015754:	d1f4      	bne.n	8015740 <memcpy_from_ram+0x44>

    return with_checksum ? (checksum == ram_get_byte(source) ? NVS_TransferResult_OK : NVS_TransferResult_Failed) : NVS_TransferResult_OK;
 8015756:	b14f      	cbz	r7, 801576c <memcpy_from_ram+0x70>
    return nvsbuffer[addr];
 8015758:	4a07      	ldr	r2, [pc, #28]	@ (8015778 <memcpy_from_ram+0x7c>)
 801575a:	6812      	ldr	r2, [r2, #0]
 801575c:	5d52      	ldrb	r2, [r2, r5]
    return with_checksum ? (checksum == ram_get_byte(source) ? NVS_TransferResult_OK : NVS_TransferResult_Failed) : NVS_TransferResult_OK;
 801575e:	4293      	cmp	r3, r2
 8015760:	d002      	beq.n	8015768 <memcpy_from_ram+0x6c>
 8015762:	2000      	movs	r0, #0
}
 8015764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return with_checksum ? (checksum == ram_get_byte(source) ? NVS_TransferResult_OK : NVS_TransferResult_Failed) : NVS_TransferResult_OK;
 8015768:	2002      	movs	r0, #2
 801576a:	e7fb      	b.n	8015764 <memcpy_from_ram+0x68>
 801576c:	2002      	movs	r0, #2
 801576e:	e7f9      	b.n	8015764 <memcpy_from_ram+0x68>
 8015770:	200011ac 	.word	0x200011ac
 8015774:	200016f4 	.word	0x200016f4
 8015778:	20001720 	.word	0x20001720

0801577c <memcpy_to_ram>:
{
 801577c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015780:	4607      	mov	r7, r0
 8015782:	460c      	mov	r4, r1
 8015784:	4615      	mov	r5, r2
 8015786:	4698      	mov	r8, r3
    if(hal.nvs.driver_area.address && destination > hal.nvs.driver_area.address + hal.nvs.driver_area.size)
 8015788:	4b4c      	ldr	r3, [pc, #304]	@ (80158bc <memcpy_to_ram+0x140>)
 801578a:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 801578e:	b12b      	cbz	r3, 801579c <memcpy_to_ram+0x20>
 8015790:	4a4a      	ldr	r2, [pc, #296]	@ (80158bc <memcpy_to_ram+0x140>)
 8015792:	f8b2 2186 	ldrh.w	r2, [r2, #390]	@ 0x186
 8015796:	4413      	add	r3, r2
 8015798:	4283      	cmp	r3, r0
 801579a:	d309      	bcc.n	80157b0 <memcpy_to_ram+0x34>
    uint8_t checksum = with_checksum ? calc_checksum(source, size) : 0;
 801579c:	f1b8 0f00 	cmp.w	r8, #0
 80157a0:	d10c      	bne.n	80157bc <memcpy_to_ram+0x40>
 80157a2:	f04f 0900 	mov.w	r9, #0
    dirty = false;
 80157a6:	4b46      	ldr	r3, [pc, #280]	@ (80158c0 <memcpy_to_ram+0x144>)
 80157a8:	2200      	movs	r2, #0
 80157aa:	701a      	strb	r2, [r3, #0]
    uint32_t dest = destination;
 80157ac:	4638      	mov	r0, r7
    for(; size > 0; size--)
 80157ae:	e012      	b.n	80157d6 <memcpy_to_ram+0x5a>
        return physical_nvs.memcpy_to_nvs(destination, source, size, with_checksum);
 80157b0:	4b44      	ldr	r3, [pc, #272]	@ (80158c4 <memcpy_to_ram+0x148>)
 80157b2:	69de      	ldr	r6, [r3, #28]
 80157b4:	4643      	mov	r3, r8
 80157b6:	462a      	mov	r2, r5
 80157b8:	47b0      	blx	r6
 80157ba:	e077      	b.n	80158ac <memcpy_to_ram+0x130>
    uint8_t checksum = with_checksum ? calc_checksum(source, size) : 0;
 80157bc:	4629      	mov	r1, r5
 80157be:	4620      	mov	r0, r4
 80157c0:	f7ff ff62 	bl	8015688 <calc_checksum>
 80157c4:	4681      	mov	r9, r0
 80157c6:	e7ee      	b.n	80157a6 <memcpy_to_ram+0x2a>
        ram_put_byte(dest++, *(source++));
 80157c8:	1c46      	adds	r6, r0, #1
 80157ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157ce:	f7ff ff73 	bl	80156b8 <ram_put_byte>
    for(; size > 0; size--)
 80157d2:	3d01      	subs	r5, #1
        ram_put_byte(dest++, *(source++));
 80157d4:	4630      	mov	r0, r6
    for(; size > 0; size--)
 80157d6:	2d00      	cmp	r5, #0
 80157d8:	d1f6      	bne.n	80157c8 <memcpy_to_ram+0x4c>
    if(with_checksum)
 80157da:	f1b8 0f00 	cmp.w	r8, #0
 80157de:	d11d      	bne.n	801581c <memcpy_to_ram+0xa0>
    if(settings_dirty.version || source == hal.nvs.driver_area.mem_address)
 80157e0:	4b39      	ldr	r3, [pc, #228]	@ (80158c8 <memcpy_to_ram+0x14c>)
 80157e2:	785b      	ldrb	r3, [r3, #1]
 80157e4:	b923      	cbnz	r3, 80157f0 <memcpy_to_ram+0x74>
 80157e6:	4b35      	ldr	r3, [pc, #212]	@ (80158bc <memcpy_to_ram+0x140>)
 80157e8:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80157ec:	42a3      	cmp	r3, r4
 80157ee:	d102      	bne.n	80157f6 <memcpy_to_ram+0x7a>
        dirty = true;
 80157f0:	4b33      	ldr	r3, [pc, #204]	@ (80158c0 <memcpy_to_ram+0x144>)
 80157f2:	2201      	movs	r2, #1
 80157f4:	701a      	strb	r2, [r3, #0]
    if(dirty && physical_nvs.type != NVS_None) {
 80157f6:	4b32      	ldr	r3, [pc, #200]	@ (80158c0 <memcpy_to_ram+0x144>)
 80157f8:	781b      	ldrb	r3, [r3, #0]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d055      	beq.n	80158aa <memcpy_to_ram+0x12e>
 80157fe:	4b31      	ldr	r3, [pc, #196]	@ (80158c4 <memcpy_to_ram+0x148>)
 8015800:	781b      	ldrb	r3, [r3, #0]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d054      	beq.n	80158b0 <memcpy_to_ram+0x134>
        settings_dirty.is_dirty = true;
 8015806:	4b30      	ldr	r3, [pc, #192]	@ (80158c8 <memcpy_to_ram+0x14c>)
 8015808:	2201      	movs	r2, #1
 801580a:	701a      	strb	r2, [r3, #0]
        if(hal.nvs.driver_area.address && destination >= hal.nvs.driver_area.address)
 801580c:	4b2b      	ldr	r3, [pc, #172]	@ (80158bc <memcpy_to_ram+0x140>)
 801580e:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8015812:	b15b      	cbz	r3, 801582c <memcpy_to_ram+0xb0>
 8015814:	42bb      	cmp	r3, r7
 8015816:	d905      	bls.n	8015824 <memcpy_to_ram+0xa8>
 8015818:	2300      	movs	r3, #0
 801581a:	e008      	b.n	801582e <memcpy_to_ram+0xb2>
        ram_put_byte(dest, checksum);
 801581c:	4649      	mov	r1, r9
 801581e:	f7ff ff4b 	bl	80156b8 <ram_put_byte>
 8015822:	e7dd      	b.n	80157e0 <memcpy_to_ram+0x64>
            settings_dirty.driver_settings = true;
 8015824:	4b28      	ldr	r3, [pc, #160]	@ (80158c8 <memcpy_to_ram+0x14c>)
 8015826:	711a      	strb	r2, [r3, #4]
    return NVS_TransferResult_OK;
 8015828:	2002      	movs	r0, #2
            settings_dirty.driver_settings = true;
 801582a:	e03f      	b.n	80158ac <memcpy_to_ram+0x130>
 801582c:	2300      	movs	r3, #0
                if(target[idx].addr == destination)
 801582e:	4a27      	ldr	r2, [pc, #156]	@ (80158cc <memcpy_to_ram+0x150>)
 8015830:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8015834:	42ba      	cmp	r2, r7
 8015836:	d006      	beq.n	8015846 <memcpy_to_ram+0xca>
            } while(target[++idx].addr);
 8015838:	3301      	adds	r3, #1
 801583a:	b2db      	uxtb	r3, r3
 801583c:	4a23      	ldr	r2, [pc, #140]	@ (80158cc <memcpy_to_ram+0x150>)
 801583e:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8015842:	2a00      	cmp	r2, #0
 8015844:	d1f3      	bne.n	801582e <memcpy_to_ram+0xb2>
            if(target[idx].addr) switch(target[idx].type) {
 8015846:	4619      	mov	r1, r3
 8015848:	4a20      	ldr	r2, [pc, #128]	@ (80158cc <memcpy_to_ram+0x150>)
 801584a:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 801584e:	2a00      	cmp	r2, #0
 8015850:	d030      	beq.n	80158b4 <memcpy_to_ram+0x138>
 8015852:	4a1e      	ldr	r2, [pc, #120]	@ (80158cc <memcpy_to_ram+0x150>)
 8015854:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015858:	7898      	ldrb	r0, [r3, #2]
 801585a:	2804      	cmp	r0, #4
 801585c:	d82c      	bhi.n	80158b8 <memcpy_to_ram+0x13c>
 801585e:	e8df f000 	tbb	[pc, r0]
 8015862:	2b03      	.short	0x2b03
 8015864:	1308      	.short	0x1308
 8015866:	1f          	.byte	0x1f
 8015867:	00          	.byte	0x00
                    settings_dirty.global_settings = true;
 8015868:	4b17      	ldr	r3, [pc, #92]	@ (80158c8 <memcpy_to_ram+0x14c>)
 801586a:	2201      	movs	r2, #1
 801586c:	709a      	strb	r2, [r3, #2]
    return NVS_TransferResult_OK;
 801586e:	2002      	movs	r0, #2
                    break;
 8015870:	e01c      	b.n	80158ac <memcpy_to_ram+0x130>
                    settings_dirty.coord_data |= (1 << target[idx].offset);
 8015872:	4c15      	ldr	r4, [pc, #84]	@ (80158c8 <memcpy_to_ram+0x14c>)
 8015874:	88e3      	ldrh	r3, [r4, #6]
 8015876:	4a15      	ldr	r2, [pc, #84]	@ (80158cc <memcpy_to_ram+0x150>)
 8015878:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801587c:	78d1      	ldrb	r1, [r2, #3]
 801587e:	2201      	movs	r2, #1
 8015880:	408a      	lsls	r2, r1
 8015882:	4313      	orrs	r3, r2
 8015884:	80e3      	strh	r3, [r4, #6]
                    break;
 8015886:	e011      	b.n	80158ac <memcpy_to_ram+0x130>
                    settings_dirty.startup_lines |= (1 << target[idx].offset);
 8015888:	480f      	ldr	r0, [pc, #60]	@ (80158c8 <memcpy_to_ram+0x14c>)
 801588a:	7943      	ldrb	r3, [r0, #5]
 801588c:	4a0f      	ldr	r2, [pc, #60]	@ (80158cc <memcpy_to_ram+0x150>)
 801588e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015892:	78d1      	ldrb	r1, [r2, #3]
 8015894:	2201      	movs	r2, #1
 8015896:	408a      	lsls	r2, r1
 8015898:	4313      	orrs	r3, r2
 801589a:	7143      	strb	r3, [r0, #5]
    return NVS_TransferResult_OK;
 801589c:	2002      	movs	r0, #2
                    break;
 801589e:	e005      	b.n	80158ac <memcpy_to_ram+0x130>
                    settings_dirty.build_info = true;
 80158a0:	4b09      	ldr	r3, [pc, #36]	@ (80158c8 <memcpy_to_ram+0x14c>)
 80158a2:	2201      	movs	r2, #1
 80158a4:	70da      	strb	r2, [r3, #3]
    return NVS_TransferResult_OK;
 80158a6:	2002      	movs	r0, #2
                    break;
 80158a8:	e000      	b.n	80158ac <memcpy_to_ram+0x130>
    return NVS_TransferResult_OK;
 80158aa:	2002      	movs	r0, #2
}
 80158ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NVS_TransferResult_OK;
 80158b0:	2002      	movs	r0, #2
 80158b2:	e7fb      	b.n	80158ac <memcpy_to_ram+0x130>
 80158b4:	2002      	movs	r0, #2
 80158b6:	e7f9      	b.n	80158ac <memcpy_to_ram+0x130>
            if(target[idx].addr) switch(target[idx].type) {
 80158b8:	2002      	movs	r0, #2
 80158ba:	e7f7      	b.n	80158ac <memcpy_to_ram+0x130>
 80158bc:	200011ac 	.word	0x200011ac
 80158c0:	200016f0 	.word	0x200016f0
 80158c4:	200016f4 	.word	0x200016f4
 80158c8:	200016e8 	.word	0x200016e8
 80158cc:	0802b288 	.word	0x0802b288

080158d0 <nvs_buffer_alloc>:

// Try to allocate RAM from heap for buffer/emulation.
bool nvs_buffer_alloc (void)
{
 80158d0:	b510      	push	{r4, lr}
    assert(NVS_SIZE >= GRBL_NVS_SIZE);

    if((nvsbuffer = malloc(NVS_SIZE)))
 80158d2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80158d6:	f00c fd09 	bl	80222ec <malloc>
 80158da:	4604      	mov	r4, r0
 80158dc:	4b05      	ldr	r3, [pc, #20]	@ (80158f4 <nvs_buffer_alloc+0x24>)
 80158de:	6018      	str	r0, [r3, #0]
 80158e0:	b120      	cbz	r0, 80158ec <nvs_buffer_alloc+0x1c>
        memset(nvsbuffer, 0xFF, NVS_SIZE);
 80158e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80158e6:	21ff      	movs	r1, #255	@ 0xff
 80158e8:	f00e fdc9 	bl	802447e <memset>

    return nvsbuffer != NULL;
}
 80158ec:	1e20      	subs	r0, r4, #0
 80158ee:	bf18      	it	ne
 80158f0:	2001      	movne	r0, #1
 80158f2:	bd10      	pop	{r4, pc}
 80158f4:	20001720 	.word	0x20001720

080158f8 <nvs_buffer_init>:
}
//
// Switch over to RAM based copy.
// Changes to RAM based copy will be written to physical storage when grblHAL is in IDLE state.
bool nvs_buffer_init (void)
{
 80158f8:	b570      	push	{r4, r5, r6, lr}
    hal.nvs.size = ((hal.nvs.size - 1) | 0x03) + 1; // Ensure NVS area ends on a word boundary
 80158fa:	4a3e      	ldr	r2, [pc, #248]	@ (80159f4 <nvs_buffer_init+0xfc>)
 80158fc:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
 8015900:	3b01      	subs	r3, #1
 8015902:	f043 0303 	orr.w	r3, r3, #3
 8015906:	3301      	adds	r3, #1
 8015908:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178

    if(nvsbuffer) {
 801590c:	4b3a      	ldr	r3, [pc, #232]	@ (80159f8 <nvs_buffer_init+0x100>)
 801590e:	681d      	ldr	r5, [r3, #0]
 8015910:	2d00      	cmp	r5, #0
 8015912:	d069      	beq.n	80159e8 <nvs_buffer_init+0xf0>

        memcpy(&physical_nvs, &hal.nvs, sizeof(nvs_io_t)); // save pointers to physical storage handler functions
 8015914:	4e39      	ldr	r6, [pc, #228]	@ (80159fc <nvs_buffer_init+0x104>)
 8015916:	46b4      	mov	ip, r6
 8015918:	f502 74ba 	add.w	r4, r2, #372	@ 0x174
 801591c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801591e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015924:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015928:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801592c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}

        // Copy physical storage content to RAM when available
        if(physical_nvs.type == NVS_Flash)
 8015930:	7833      	ldrb	r3, [r6, #0]
 8015932:	2b03      	cmp	r3, #3
 8015934:	d00c      	beq.n	8015950 <nvs_buffer_init+0x58>
            physical_nvs.memcpy_from_flash(nvsbuffer);
        else if(physical_nvs.type != NVS_None)
 8015936:	b173      	cbz	r3, 8015956 <nvs_buffer_init+0x5e>
            physical_nvs.memcpy_from_nvs(nvsbuffer, 0, GRBL_NVS_SIZE + hal.nvs.driver_area.size, false);
 8015938:	4b30      	ldr	r3, [pc, #192]	@ (80159fc <nvs_buffer_init+0x104>)
 801593a:	6a1c      	ldr	r4, [r3, #32]
 801593c:	4b2d      	ldr	r3, [pc, #180]	@ (80159f4 <nvs_buffer_init+0xfc>)
 801593e:	f8b3 2186 	ldrh.w	r2, [r3, #390]	@ 0x186
 8015942:	2300      	movs	r3, #0
 8015944:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8015948:	4619      	mov	r1, r3
 801594a:	4628      	mov	r0, r5
 801594c:	47a0      	blx	r4
 801594e:	e002      	b.n	8015956 <nvs_buffer_init+0x5e>
            physical_nvs.memcpy_from_flash(nvsbuffer);
 8015950:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8015952:	4628      	mov	r0, r5
 8015954:	4798      	blx	r3

        // Switch hal to use RAM version of non-volatile storage data
        hal.nvs.type = NVS_Emulated;
 8015956:	4b27      	ldr	r3, [pc, #156]	@ (80159f4 <nvs_buffer_init+0xfc>)
 8015958:	2204      	movs	r2, #4
 801595a:	f883 2174 	strb.w	r2, [r3, #372]	@ 0x174
        hal.nvs.get_byte = &ram_get_byte;
 801595e:	4a28      	ldr	r2, [pc, #160]	@ (8015a00 <nvs_buffer_init+0x108>)
 8015960:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
        hal.nvs.put_byte = &ram_put_byte;
 8015964:	4a27      	ldr	r2, [pc, #156]	@ (8015a04 <nvs_buffer_init+0x10c>)
 8015966:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
        hal.nvs.memcpy_to_nvs = &memcpy_to_ram;
 801596a:	4a27      	ldr	r2, [pc, #156]	@ (8015a08 <nvs_buffer_init+0x110>)
 801596c:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
        hal.nvs.memcpy_from_nvs = &memcpy_from_ram;
 8015970:	4a26      	ldr	r2, [pc, #152]	@ (8015a0c <nvs_buffer_init+0x114>)
 8015972:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
        hal.nvs.memcpy_from_flash = NULL;
 8015976:	2200      	movs	r2, #0
 8015978:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
        hal.nvs.memcpy_to_flash = NULL;
 801597c:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

        // If no physical storage available or if NVS import fails copy default settings to RAM
        // and write out to physical storage when available.
        if(physical_nvs.type == NVS_None || ram_get_byte(0) != SETTINGS_VERSION) {
 8015980:	4b1e      	ldr	r3, [pc, #120]	@ (80159fc <nvs_buffer_init+0x104>)
 8015982:	781b      	ldrb	r3, [r3, #0]
 8015984:	b123      	cbz	r3, 8015990 <nvs_buffer_init+0x98>
    return nvsbuffer[addr];
 8015986:	4b1c      	ldr	r3, [pc, #112]	@ (80159f8 <nvs_buffer_init+0x100>)
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	781b      	ldrb	r3, [r3, #0]
        if(physical_nvs.type == NVS_None || ram_get_byte(0) != SETTINGS_VERSION) {
 801598c:	2b16      	cmp	r3, #22
 801598e:	d01b      	beq.n	80159c8 <nvs_buffer_init+0xd0>
            settings_restore(settings_all);
 8015990:	4b1f      	ldr	r3, [pc, #124]	@ (8015a10 <nvs_buffer_init+0x118>)
 8015992:	7818      	ldrb	r0, [r3, #0]
 8015994:	f007 faec 	bl	801cf70 <settings_restore>
            if(physical_nvs.type == NVS_Flash)
 8015998:	4b18      	ldr	r3, [pc, #96]	@ (80159fc <nvs_buffer_init+0x104>)
 801599a:	781b      	ldrb	r3, [r3, #0]
 801599c:	2b03      	cmp	r3, #3
 801599e:	d01d      	beq.n	80159dc <nvs_buffer_init+0xe4>
                physical_nvs.memcpy_to_flash(nvsbuffer);
            else if(physical_nvs.memcpy_to_nvs)
 80159a0:	4b16      	ldr	r3, [pc, #88]	@ (80159fc <nvs_buffer_init+0x104>)
 80159a2:	69dc      	ldr	r4, [r3, #28]
 80159a4:	b14c      	cbz	r4, 80159ba <nvs_buffer_init+0xc2>
                physical_nvs.memcpy_to_nvs(0, nvsbuffer, GRBL_NVS_SIZE + hal.nvs.driver_area.size, false);
 80159a6:	4b13      	ldr	r3, [pc, #76]	@ (80159f4 <nvs_buffer_init+0xfc>)
 80159a8:	f8b3 2186 	ldrh.w	r2, [r3, #390]	@ 0x186
 80159ac:	2300      	movs	r3, #0
 80159ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80159b2:	4911      	ldr	r1, [pc, #68]	@ (80159f8 <nvs_buffer_init+0x100>)
 80159b4:	6809      	ldr	r1, [r1, #0]
 80159b6:	4618      	mov	r0, r3
 80159b8:	47a0      	blx	r4
            if(physical_nvs.type != NVS_None)
 80159ba:	4b10      	ldr	r3, [pc, #64]	@ (80159fc <nvs_buffer_init+0x104>)
 80159bc:	781b      	ldrb	r3, [r3, #0]
 80159be:	b11b      	cbz	r3, 80159c8 <nvs_buffer_init+0xd0>
                grbl.report.status_message(Status_SettingReadFail);
 80159c0:	4b14      	ldr	r3, [pc, #80]	@ (8015a14 <nvs_buffer_init+0x11c>)
 80159c2:	689b      	ldr	r3, [r3, #8]
 80159c4:	2007      	movs	r0, #7
 80159c6:	4798      	blx	r3
        }
    } else
        protocol_enqueue_foreground_task(report_warning, "Not enough heap for NVS buffer!");

    // Clear settings dirty flags
    memset(&settings_dirty, 0, sizeof(settings_dirty_t));
 80159c8:	4b13      	ldr	r3, [pc, #76]	@ (8015a18 <nvs_buffer_init+0x120>)
 80159ca:	2200      	movs	r2, #0
 80159cc:	601a      	str	r2, [r3, #0]
 80159ce:	605a      	str	r2, [r3, #4]

    return nvsbuffer != NULL;
 80159d0:	4b09      	ldr	r3, [pc, #36]	@ (80159f8 <nvs_buffer_init+0x100>)
 80159d2:	6818      	ldr	r0, [r3, #0]
}
 80159d4:	1a80      	subs	r0, r0, r2
 80159d6:	bf18      	it	ne
 80159d8:	2001      	movne	r0, #1
 80159da:	bd70      	pop	{r4, r5, r6, pc}
                physical_nvs.memcpy_to_flash(nvsbuffer);
 80159dc:	4b07      	ldr	r3, [pc, #28]	@ (80159fc <nvs_buffer_init+0x104>)
 80159de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159e0:	4a05      	ldr	r2, [pc, #20]	@ (80159f8 <nvs_buffer_init+0x100>)
 80159e2:	6810      	ldr	r0, [r2, #0]
 80159e4:	4798      	blx	r3
 80159e6:	e7e8      	b.n	80159ba <nvs_buffer_init+0xc2>
        protocol_enqueue_foreground_task(report_warning, "Not enough heap for NVS buffer!");
 80159e8:	490c      	ldr	r1, [pc, #48]	@ (8015a1c <nvs_buffer_init+0x124>)
 80159ea:	480d      	ldr	r0, [pc, #52]	@ (8015a20 <nvs_buffer_init+0x128>)
 80159ec:	f001 fe0e 	bl	801760c <protocol_enqueue_foreground_task>
 80159f0:	e7ea      	b.n	80159c8 <nvs_buffer_init+0xd0>
 80159f2:	bf00      	nop
 80159f4:	200011ac 	.word	0x200011ac
 80159f8:	20001720 	.word	0x20001720
 80159fc:	200016f4 	.word	0x200016f4
 8015a00:	080156ad 	.word	0x080156ad
 8015a04:	080156b9 	.word	0x080156b9
 8015a08:	0801577d 	.word	0x0801577d
 8015a0c:	080156fd 	.word	0x080156fd
 8015a10:	0802fe8c 	.word	0x0802fe8c
 8015a14:	20001394 	.word	0x20001394
 8015a18:	200016e8 	.word	0x200016e8
 8015a1c:	0802b250 	.word	0x0802b250
 8015a20:	08018fab 	.word	0x08018fab

08015a24 <nvs_buffer_sync_physical>:
}

// Write RAM changes to physical storage
void nvs_buffer_sync_physical (void)
{
    if(!settings_dirty.is_dirty)
 8015a24:	4b6d      	ldr	r3, [pc, #436]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015a26:	781b      	ldrb	r3, [r3, #0]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	f000 80d6 	beq.w	8015bda <nvs_buffer_sync_physical+0x1b6>
{
 8015a2e:	b570      	push	{r4, r5, r6, lr}
        return;

    if(physical_nvs.memcpy_to_nvs) {
 8015a30:	4b6b      	ldr	r3, [pc, #428]	@ (8015be0 <nvs_buffer_sync_physical+0x1bc>)
 8015a32:	69dc      	ldr	r4, [r3, #28]
 8015a34:	2c00      	cmp	r4, #0
 8015a36:	f000 80b5 	beq.w	8015ba4 <nvs_buffer_sync_physical+0x180>

        if(settings_dirty.version)
 8015a3a:	4b68      	ldr	r3, [pc, #416]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015a3c:	785b      	ldrb	r3, [r3, #1]
 8015a3e:	b153      	cbz	r3, 8015a56 <nvs_buffer_sync_physical+0x32>
            settings_dirty.version = physical_nvs.memcpy_to_nvs(0, nvsbuffer, 1, false) != NVS_TransferResult_OK;
 8015a40:	2300      	movs	r3, #0
 8015a42:	2201      	movs	r2, #1
 8015a44:	4967      	ldr	r1, [pc, #412]	@ (8015be4 <nvs_buffer_sync_physical+0x1c0>)
 8015a46:	6809      	ldr	r1, [r1, #0]
 8015a48:	4618      	mov	r0, r3
 8015a4a:	47a0      	blx	r4
 8015a4c:	3802      	subs	r0, #2
 8015a4e:	bf18      	it	ne
 8015a50:	2001      	movne	r0, #1
 8015a52:	4b62      	ldr	r3, [pc, #392]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015a54:	7058      	strb	r0, [r3, #1]

        if(settings_dirty.global_settings)
 8015a56:	4b61      	ldr	r3, [pc, #388]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015a58:	789b      	ldrb	r3, [r3, #2]
 8015a5a:	b173      	cbz	r3, 8015a7a <nvs_buffer_sync_physical+0x56>
            settings_dirty.global_settings = physical_nvs.memcpy_to_nvs(NVS_ADDR_GLOBAL, (uint8_t *)(nvsbuffer + NVS_ADDR_GLOBAL), sizeof(settings_t) + NVS_CRC_BYTES, false) != NVS_TransferResult_OK;
 8015a5c:	4b60      	ldr	r3, [pc, #384]	@ (8015be0 <nvs_buffer_sync_physical+0x1bc>)
 8015a5e:	69dc      	ldr	r4, [r3, #28]
 8015a60:	4b60      	ldr	r3, [pc, #384]	@ (8015be4 <nvs_buffer_sync_physical+0x1c0>)
 8015a62:	6819      	ldr	r1, [r3, #0]
 8015a64:	2300      	movs	r3, #0
 8015a66:	f240 126d 	movw	r2, #365	@ 0x16d
 8015a6a:	3101      	adds	r1, #1
 8015a6c:	2001      	movs	r0, #1
 8015a6e:	47a0      	blx	r4
 8015a70:	3802      	subs	r0, #2
 8015a72:	bf18      	it	ne
 8015a74:	2001      	movne	r0, #1
 8015a76:	4b59      	ldr	r3, [pc, #356]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015a78:	7098      	strb	r0, [r3, #2]

        if(settings_dirty.build_info)
 8015a7a:	4b58      	ldr	r3, [pc, #352]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015a7c:	78db      	ldrb	r3, [r3, #3]
 8015a7e:	b17b      	cbz	r3, 8015aa0 <nvs_buffer_sync_physical+0x7c>
            settings_dirty.build_info = physical_nvs.memcpy_to_nvs(NVS_ADDR_BUILD_INFO, (uint8_t *)(nvsbuffer + NVS_ADDR_BUILD_INFO), sizeof(stored_line_t) + NVS_CRC_BYTES, false) != NVS_TransferResult_OK;
 8015a80:	4b57      	ldr	r3, [pc, #348]	@ (8015be0 <nvs_buffer_sync_physical+0x1bc>)
 8015a82:	69dc      	ldr	r4, [r3, #28]
 8015a84:	4b57      	ldr	r3, [pc, #348]	@ (8015be4 <nvs_buffer_sync_physical+0x1c0>)
 8015a86:	6819      	ldr	r1, [r3, #0]
 8015a88:	2300      	movs	r3, #0
 8015a8a:	2247      	movs	r2, #71	@ 0x47
 8015a8c:	f201 31ae 	addw	r1, r1, #942	@ 0x3ae
 8015a90:	f240 30ae 	movw	r0, #942	@ 0x3ae
 8015a94:	47a0      	blx	r4
 8015a96:	3802      	subs	r0, #2
 8015a98:	bf18      	it	ne
 8015a9a:	2001      	movne	r0, #1
 8015a9c:	4b4f      	ldr	r3, [pc, #316]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015a9e:	70d8      	strb	r0, [r3, #3]

        uint_fast8_t idx = N_STARTUP_LINE, offset;
        if(settings_dirty.startup_lines) do {
 8015aa0:	4b4e      	ldr	r3, [pc, #312]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015aa2:	795b      	ldrb	r3, [r3, #5]
 8015aa4:	b30b      	cbz	r3, 8015aea <nvs_buffer_sync_physical+0xc6>
        uint_fast8_t idx = N_STARTUP_LINE, offset;
 8015aa6:	2402      	movs	r4, #2
            idx--;
 8015aa8:	3c01      	subs	r4, #1
            if(bit_istrue(settings_dirty.startup_lines, bit(idx))) {
 8015aaa:	4b4c      	ldr	r3, [pc, #304]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015aac:	795a      	ldrb	r2, [r3, #5]
 8015aae:	fa22 f304 	lsr.w	r3, r2, r4
 8015ab2:	f013 0f01 	tst.w	r3, #1
 8015ab6:	d016      	beq.n	8015ae6 <nvs_buffer_sync_physical+0xc2>
                bit_false(settings_dirty.startup_lines, bit(idx));
 8015ab8:	2301      	movs	r3, #1
 8015aba:	40a3      	lsls	r3, r4
 8015abc:	43db      	mvns	r3, r3
 8015abe:	b2dd      	uxtb	r5, r3
 8015ac0:	4013      	ands	r3, r2
 8015ac2:	4a46      	ldr	r2, [pc, #280]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015ac4:	7153      	strb	r3, [r2, #5]
                offset = NVS_ADDR_STARTUP_BLOCK + idx * (sizeof(stored_line_t) + NVS_CRC_BYTES);
 8015ac6:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8015aca:	ebc4 00c0 	rsb	r0, r4, r0, lsl #3
 8015ace:	f200 301f 	addw	r0, r0, #799	@ 0x31f
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(stored_line_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
 8015ad2:	4b43      	ldr	r3, [pc, #268]	@ (8015be0 <nvs_buffer_sync_physical+0x1bc>)
 8015ad4:	69de      	ldr	r6, [r3, #28]
 8015ad6:	4b43      	ldr	r3, [pc, #268]	@ (8015be4 <nvs_buffer_sync_physical+0x1c0>)
 8015ad8:	6819      	ldr	r1, [r3, #0]
 8015ada:	2300      	movs	r3, #0
 8015adc:	2247      	movs	r2, #71	@ 0x47
 8015ade:	4401      	add	r1, r0
 8015ae0:	47b0      	blx	r6
 8015ae2:	2802      	cmp	r0, #2
 8015ae4:	d006      	beq.n	8015af4 <nvs_buffer_sync_physical+0xd0>
                    bit_false(settings_dirty.startup_lines, bit(idx));
            }
        } while(idx);
 8015ae6:	2c00      	cmp	r4, #0
 8015ae8:	d1de      	bne.n	8015aa8 <nvs_buffer_sync_physical+0x84>

        idx = N_CoordinateSystems;
        if(settings_dirty.coord_data) do {
 8015aea:	4b3c      	ldr	r3, [pc, #240]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015aec:	88db      	ldrh	r3, [r3, #6]
 8015aee:	b33b      	cbz	r3, 8015b40 <nvs_buffer_sync_physical+0x11c>
        idx = N_CoordinateSystems;
 8015af0:	240c      	movs	r4, #12
 8015af2:	e007      	b.n	8015b04 <nvs_buffer_sync_physical+0xe0>
                    bit_false(settings_dirty.startup_lines, bit(idx));
 8015af4:	4b39      	ldr	r3, [pc, #228]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015af6:	795a      	ldrb	r2, [r3, #5]
 8015af8:	4015      	ands	r5, r2
 8015afa:	715d      	strb	r5, [r3, #5]
 8015afc:	e7f3      	b.n	8015ae6 <nvs_buffer_sync_physical+0xc2>
            if(bit_istrue(settings_dirty.coord_data, bit(idx))) {
                offset = NVS_ADDR_PARAMETERS + idx * (sizeof(coord_data_t) + NVS_CRC_BYTES);
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(coord_data_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
                    bit_false(settings_dirty.coord_data, bit(idx));
            }
        } while(idx--);
 8015afe:	1e63      	subs	r3, r4, #1
 8015b00:	b1f4      	cbz	r4, 8015b40 <nvs_buffer_sync_physical+0x11c>
 8015b02:	461c      	mov	r4, r3
            if(bit_istrue(settings_dirty.coord_data, bit(idx))) {
 8015b04:	4b35      	ldr	r3, [pc, #212]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015b06:	88db      	ldrh	r3, [r3, #6]
 8015b08:	40e3      	lsrs	r3, r4
 8015b0a:	f013 0f01 	tst.w	r3, #1
 8015b0e:	d0f6      	beq.n	8015afe <nvs_buffer_sync_physical+0xda>
                offset = NVS_ADDR_PARAMETERS + idx * (sizeof(coord_data_t) + NVS_CRC_BYTES);
 8015b10:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8015b14:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8015b18:	f500 7000 	add.w	r0, r0, #512	@ 0x200
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(coord_data_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
 8015b1c:	4b30      	ldr	r3, [pc, #192]	@ (8015be0 <nvs_buffer_sync_physical+0x1bc>)
 8015b1e:	69dd      	ldr	r5, [r3, #28]
 8015b20:	4b30      	ldr	r3, [pc, #192]	@ (8015be4 <nvs_buffer_sync_physical+0x1c0>)
 8015b22:	6819      	ldr	r1, [r3, #0]
 8015b24:	2300      	movs	r3, #0
 8015b26:	220d      	movs	r2, #13
 8015b28:	4401      	add	r1, r0
 8015b2a:	47a8      	blx	r5
 8015b2c:	2802      	cmp	r0, #2
 8015b2e:	d1e6      	bne.n	8015afe <nvs_buffer_sync_physical+0xda>
                    bit_false(settings_dirty.coord_data, bit(idx));
 8015b30:	492a      	ldr	r1, [pc, #168]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015b32:	88cb      	ldrh	r3, [r1, #6]
 8015b34:	2201      	movs	r2, #1
 8015b36:	40a2      	lsls	r2, r4
 8015b38:	ea23 0302 	bic.w	r3, r3, r2
 8015b3c:	80cb      	strh	r3, [r1, #6]
 8015b3e:	e7de      	b.n	8015afe <nvs_buffer_sync_physical+0xda>

        if(settings_dirty.driver_settings) {
 8015b40:	4b26      	ldr	r3, [pc, #152]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015b42:	791b      	ldrb	r3, [r3, #4]
 8015b44:	b193      	cbz	r3, 8015b6c <nvs_buffer_sync_physical+0x148>
            if(hal.nvs.driver_area.size > 0)
 8015b46:	4b28      	ldr	r3, [pc, #160]	@ (8015be8 <nvs_buffer_sync_physical+0x1c4>)
 8015b48:	f8b3 2186 	ldrh.w	r2, [r3, #390]	@ 0x186
 8015b4c:	b1e2      	cbz	r2, 8015b88 <nvs_buffer_sync_physical+0x164>
                settings_dirty.driver_settings = physical_nvs.memcpy_to_nvs(hal.nvs.driver_area.address, (uint8_t *)(nvsbuffer + hal.nvs.driver_area.address), hal.nvs.driver_area.size, false) != NVS_TransferResult_OK;
 8015b4e:	4b24      	ldr	r3, [pc, #144]	@ (8015be0 <nvs_buffer_sync_physical+0x1bc>)
 8015b50:	69dc      	ldr	r4, [r3, #28]
 8015b52:	4b25      	ldr	r3, [pc, #148]	@ (8015be8 <nvs_buffer_sync_physical+0x1c4>)
 8015b54:	f8b3 0184 	ldrh.w	r0, [r3, #388]	@ 0x184
 8015b58:	4b22      	ldr	r3, [pc, #136]	@ (8015be4 <nvs_buffer_sync_physical+0x1c0>)
 8015b5a:	6819      	ldr	r1, [r3, #0]
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	4401      	add	r1, r0
 8015b60:	47a0      	blx	r4
 8015b62:	3802      	subs	r0, #2
 8015b64:	bf18      	it	ne
 8015b66:	2001      	movne	r0, #1
 8015b68:	4b1c      	ldr	r3, [pc, #112]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015b6a:	7118      	strb	r0, [r3, #4]
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(tool_data_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
                    bit_false(settings_dirty.tool_data, bit(idx));
            }
        } while(idx);
#endif
        settings_dirty.is_dirty = settings_dirty.coord_data ||
 8015b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015b6e:	88db      	ldrh	r3, [r3, #6]
                                   settings_dirty.global_settings ||
                                    settings_dirty.driver_settings ||
                                     settings_dirty.startup_lines ||
 8015b70:	b973      	cbnz	r3, 8015b90 <nvs_buffer_sync_physical+0x16c>
                                   settings_dirty.global_settings ||
 8015b72:	4b1a      	ldr	r3, [pc, #104]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015b74:	789b      	ldrb	r3, [r3, #2]
        settings_dirty.is_dirty = settings_dirty.coord_data ||
 8015b76:	b97b      	cbnz	r3, 8015b98 <nvs_buffer_sync_physical+0x174>
                                    settings_dirty.driver_settings ||
 8015b78:	4b18      	ldr	r3, [pc, #96]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015b7a:	889b      	ldrh	r3, [r3, #4]
 8015b7c:	b973      	cbnz	r3, 8015b9c <nvs_buffer_sync_physical+0x178>
#if N_TOOLS
                                      settings_dirty.tool_data ||
#endif
                                       settings_dirty.build_info;
 8015b7e:	4b17      	ldr	r3, [pc, #92]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015b80:	78db      	ldrb	r3, [r3, #3]
                                     settings_dirty.startup_lines ||
 8015b82:	b16b      	cbz	r3, 8015ba0 <nvs_buffer_sync_physical+0x17c>
 8015b84:	2201      	movs	r2, #1
 8015b86:	e004      	b.n	8015b92 <nvs_buffer_sync_physical+0x16e>
                settings_dirty.driver_settings = false;
 8015b88:	4b14      	ldr	r3, [pc, #80]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015b8a:	2200      	movs	r2, #0
 8015b8c:	711a      	strb	r2, [r3, #4]
 8015b8e:	e7ed      	b.n	8015b6c <nvs_buffer_sync_physical+0x148>
                                     settings_dirty.startup_lines ||
 8015b90:	2201      	movs	r2, #1
        settings_dirty.is_dirty = settings_dirty.coord_data ||
 8015b92:	4b12      	ldr	r3, [pc, #72]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015b94:	701a      	strb	r2, [r3, #0]
            else if(--retries == 0)
                report_message("Settings write failed!", Message_Warning);
        } while(retries);
        memset(&settings_dirty, 0, sizeof(settings_dirty_t));
    }
}
 8015b96:	bd70      	pop	{r4, r5, r6, pc}
                                     settings_dirty.startup_lines ||
 8015b98:	2201      	movs	r2, #1
 8015b9a:	e7fa      	b.n	8015b92 <nvs_buffer_sync_physical+0x16e>
 8015b9c:	2201      	movs	r2, #1
 8015b9e:	e7f8      	b.n	8015b92 <nvs_buffer_sync_physical+0x16e>
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	e7f6      	b.n	8015b92 <nvs_buffer_sync_physical+0x16e>
    } else if(physical_nvs.memcpy_to_flash) {
 8015ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8015be0 <nvs_buffer_sync_physical+0x1bc>)
 8015ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d0f4      	beq.n	8015b96 <nvs_buffer_sync_physical+0x172>
        uint_fast8_t retries = 4;
 8015bac:	2404      	movs	r4, #4
 8015bae:	e001      	b.n	8015bb4 <nvs_buffer_sync_physical+0x190>
                retries = 0;
 8015bb0:	2400      	movs	r4, #0
        } while(retries);
 8015bb2:	b16c      	cbz	r4, 8015bd0 <nvs_buffer_sync_physical+0x1ac>
            if(physical_nvs.memcpy_to_flash(nvsbuffer))
 8015bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8015be0 <nvs_buffer_sync_physical+0x1bc>)
 8015bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8015be4 <nvs_buffer_sync_physical+0x1c0>)
 8015bba:	6810      	ldr	r0, [r2, #0]
 8015bbc:	4798      	blx	r3
 8015bbe:	2800      	cmp	r0, #0
 8015bc0:	d1f6      	bne.n	8015bb0 <nvs_buffer_sync_physical+0x18c>
            else if(--retries == 0)
 8015bc2:	3c01      	subs	r4, #1
 8015bc4:	d1f5      	bne.n	8015bb2 <nvs_buffer_sync_physical+0x18e>
                report_message("Settings write failed!", Message_Warning);
 8015bc6:	2102      	movs	r1, #2
 8015bc8:	4808      	ldr	r0, [pc, #32]	@ (8015bec <nvs_buffer_sync_physical+0x1c8>)
 8015bca:	f003 f993 	bl	8018ef4 <report_message>
 8015bce:	e7f0      	b.n	8015bb2 <nvs_buffer_sync_physical+0x18e>
        memset(&settings_dirty, 0, sizeof(settings_dirty_t));
 8015bd0:	4b02      	ldr	r3, [pc, #8]	@ (8015bdc <nvs_buffer_sync_physical+0x1b8>)
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	601a      	str	r2, [r3, #0]
 8015bd6:	605a      	str	r2, [r3, #4]
 8015bd8:	e7dd      	b.n	8015b96 <nvs_buffer_sync_physical+0x172>
 8015bda:	4770      	bx	lr
 8015bdc:	200016e8 	.word	0x200016e8
 8015be0:	200016f4 	.word	0x200016f4
 8015be4:	20001720 	.word	0x20001720
 8015be8:	200011ac 	.word	0x200011ac
 8015bec:	0802b270 	.word	0x0802b270

08015bf0 <nvs_buffer_free>:
{
 8015bf0:	b508      	push	{r3, lr}
    if(nvsbuffer) {
 8015bf2:	4b05      	ldr	r3, [pc, #20]	@ (8015c08 <nvs_buffer_free+0x18>)
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	b12b      	cbz	r3, 8015c04 <nvs_buffer_free+0x14>
        nvs_buffer_sync_physical();
 8015bf8:	f7ff ff14 	bl	8015a24 <nvs_buffer_sync_physical>
        free(nvsbuffer);
 8015bfc:	4b02      	ldr	r3, [pc, #8]	@ (8015c08 <nvs_buffer_free+0x18>)
 8015bfe:	6818      	ldr	r0, [r3, #0]
 8015c00:	f00c fb7c 	bl	80222fc <free>
}
 8015c04:	bd08      	pop	{r3, pc}
 8015c06:	bf00      	nop
 8015c08:	20001720 	.word	0x20001720

08015c0c <nvs_buffer_get_physical>:

nvs_io_t *nvs_buffer_get_physical (void)
{
    return hal.nvs.type == NVS_Emulated ? &physical_nvs : &hal.nvs;
 8015c0c:	4b04      	ldr	r3, [pc, #16]	@ (8015c20 <nvs_buffer_get_physical+0x14>)
 8015c0e:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 8015c12:	2b04      	cmp	r3, #4
 8015c14:	d001      	beq.n	8015c1a <nvs_buffer_get_physical+0xe>
 8015c16:	4803      	ldr	r0, [pc, #12]	@ (8015c24 <nvs_buffer_get_physical+0x18>)
}
 8015c18:	4770      	bx	lr
    return hal.nvs.type == NVS_Emulated ? &physical_nvs : &hal.nvs;
 8015c1a:	4803      	ldr	r0, [pc, #12]	@ (8015c28 <nvs_buffer_get_physical+0x1c>)
 8015c1c:	4770      	bx	lr
 8015c1e:	bf00      	nop
 8015c20:	200011ac 	.word	0x200011ac
 8015c24:	20001320 	.word	0x20001320
 8015c28:	200016f4 	.word	0x200016f4

08015c2c <enqueue_feed_override>:

static override_queue_t feed = {0}, spindle = {0}, coolant = {0};

ISR_CODE void ISR_FUNC(enqueue_feed_override)(uint8_t cmd)
{
    uint_fast8_t bptr = (feed.head + 1) & (OVERRIDE_BUFSIZE - 1);    // Get next head pointer
 8015c2c:	4a06      	ldr	r2, [pc, #24]	@ (8015c48 <enqueue_feed_override+0x1c>)
 8015c2e:	6813      	ldr	r3, [r2, #0]
 8015c30:	3301      	adds	r3, #1
 8015c32:	f003 030f 	and.w	r3, r3, #15

    if(bptr != feed.tail) {         // If not buffer full
 8015c36:	6852      	ldr	r2, [r2, #4]
 8015c38:	429a      	cmp	r2, r3
 8015c3a:	d004      	beq.n	8015c46 <enqueue_feed_override+0x1a>
        feed.buf[feed.head] = cmd;  // add data to buffer
 8015c3c:	4a02      	ldr	r2, [pc, #8]	@ (8015c48 <enqueue_feed_override+0x1c>)
 8015c3e:	6811      	ldr	r1, [r2, #0]
 8015c40:	4411      	add	r1, r2
 8015c42:	7208      	strb	r0, [r1, #8]
        feed.head = bptr;           // and update pointer
 8015c44:	6013      	str	r3, [r2, #0]
    }
}
 8015c46:	4770      	bx	lr
 8015c48:	20001754 	.word	0x20001754

08015c4c <get_feed_override>:

// Returns 0 if no commands enqueued
uint8_t get_feed_override (void)
{
    uint8_t data = 0;
    uint_fast8_t bptr = feed.tail;
 8015c4c:	4a07      	ldr	r2, [pc, #28]	@ (8015c6c <get_feed_override+0x20>)
 8015c4e:	6853      	ldr	r3, [r2, #4]

    if(bptr != feed.head) {
 8015c50:	6812      	ldr	r2, [r2, #0]
 8015c52:	429a      	cmp	r2, r3
 8015c54:	d007      	beq.n	8015c66 <get_feed_override+0x1a>
        data = feed.buf[bptr++];                    // Get next character, increment tmp pointer
 8015c56:	1c5a      	adds	r2, r3, #1
 8015c58:	4904      	ldr	r1, [pc, #16]	@ (8015c6c <get_feed_override+0x20>)
 8015c5a:	440b      	add	r3, r1
 8015c5c:	7a18      	ldrb	r0, [r3, #8]
        feed.tail = bptr & (OVERRIDE_BUFSIZE - 1);  // and update pointer
 8015c5e:	f002 020f 	and.w	r2, r2, #15
 8015c62:	604a      	str	r2, [r1, #4]
 8015c64:	4770      	bx	lr
    uint8_t data = 0;
 8015c66:	2000      	movs	r0, #0
    }

    return data;
}
 8015c68:	4770      	bx	lr
 8015c6a:	bf00      	nop
 8015c6c:	20001754 	.word	0x20001754

08015c70 <enqueue_spindle_override>:

ISR_CODE void ISR_FUNC(enqueue_spindle_override)(uint8_t cmd)
{
    uint_fast8_t bptr = (spindle.head + 1) & (OVERRIDE_BUFSIZE - 1);    // Get next head pointer
 8015c70:	4a06      	ldr	r2, [pc, #24]	@ (8015c8c <enqueue_spindle_override+0x1c>)
 8015c72:	6813      	ldr	r3, [r2, #0]
 8015c74:	3301      	adds	r3, #1
 8015c76:	f003 030f 	and.w	r3, r3, #15

    if(bptr != spindle.tail) {              // If not buffer full
 8015c7a:	6852      	ldr	r2, [r2, #4]
 8015c7c:	429a      	cmp	r2, r3
 8015c7e:	d004      	beq.n	8015c8a <enqueue_spindle_override+0x1a>
        spindle.buf[spindle.head] = cmd;    // add data to buffer
 8015c80:	4a02      	ldr	r2, [pc, #8]	@ (8015c8c <enqueue_spindle_override+0x1c>)
 8015c82:	6811      	ldr	r1, [r2, #0]
 8015c84:	4411      	add	r1, r2
 8015c86:	7208      	strb	r0, [r1, #8]
        spindle.head = bptr;                // and update pointer
 8015c88:	6013      	str	r3, [r2, #0]
    }
}
 8015c8a:	4770      	bx	lr
 8015c8c:	2000173c 	.word	0x2000173c

08015c90 <get_spindle_override>:

// Returns 0 if no commands enqueued
uint8_t get_spindle_override (void)
{
    uint8_t data = 0;
    uint_fast8_t bptr = spindle.tail;
 8015c90:	4a07      	ldr	r2, [pc, #28]	@ (8015cb0 <get_spindle_override+0x20>)
 8015c92:	6853      	ldr	r3, [r2, #4]

    if(bptr != spindle.head) {
 8015c94:	6812      	ldr	r2, [r2, #0]
 8015c96:	429a      	cmp	r2, r3
 8015c98:	d007      	beq.n	8015caa <get_spindle_override+0x1a>
        data = spindle.buf[bptr++];                     // Get next character, increment tmp pointer
 8015c9a:	1c5a      	adds	r2, r3, #1
 8015c9c:	4904      	ldr	r1, [pc, #16]	@ (8015cb0 <get_spindle_override+0x20>)
 8015c9e:	440b      	add	r3, r1
 8015ca0:	7a18      	ldrb	r0, [r3, #8]
        spindle.tail = bptr & (OVERRIDE_BUFSIZE - 1);   // and update pointer
 8015ca2:	f002 020f 	and.w	r2, r2, #15
 8015ca6:	604a      	str	r2, [r1, #4]
 8015ca8:	4770      	bx	lr
    uint8_t data = 0;
 8015caa:	2000      	movs	r0, #0
    }

    return data;
}
 8015cac:	4770      	bx	lr
 8015cae:	bf00      	nop
 8015cb0:	2000173c 	.word	0x2000173c

08015cb4 <enqueue_coolant_override>:

ISR_CODE void ISR_FUNC(enqueue_coolant_override)(uint8_t cmd)
{
    uint_fast8_t bptr = (coolant.head + 1) & (OVERRIDE_BUFSIZE - 1);    // Get next head pointer
 8015cb4:	4a06      	ldr	r2, [pc, #24]	@ (8015cd0 <enqueue_coolant_override+0x1c>)
 8015cb6:	6813      	ldr	r3, [r2, #0]
 8015cb8:	3301      	adds	r3, #1
 8015cba:	f003 030f 	and.w	r3, r3, #15

    if(bptr != coolant.tail) {              // If not buffer full
 8015cbe:	6852      	ldr	r2, [r2, #4]
 8015cc0:	429a      	cmp	r2, r3
 8015cc2:	d004      	beq.n	8015cce <enqueue_coolant_override+0x1a>
        coolant.buf[coolant.head] = cmd;    // add data to buffer
 8015cc4:	4a02      	ldr	r2, [pc, #8]	@ (8015cd0 <enqueue_coolant_override+0x1c>)
 8015cc6:	6811      	ldr	r1, [r2, #0]
 8015cc8:	4411      	add	r1, r2
 8015cca:	7208      	strb	r0, [r1, #8]
        coolant.head = bptr;                // and update pointer
 8015ccc:	6013      	str	r3, [r2, #0]
    }
}
 8015cce:	4770      	bx	lr
 8015cd0:	20001724 	.word	0x20001724

08015cd4 <get_coolant_override>:

// Returns 0 if no commands enqueued
uint8_t get_coolant_override (void)
{
    uint8_t data = 0;
    uint_fast8_t bptr = coolant.tail;
 8015cd4:	4a07      	ldr	r2, [pc, #28]	@ (8015cf4 <get_coolant_override+0x20>)
 8015cd6:	6853      	ldr	r3, [r2, #4]

    if(bptr != coolant.head) {
 8015cd8:	6812      	ldr	r2, [r2, #0]
 8015cda:	429a      	cmp	r2, r3
 8015cdc:	d007      	beq.n	8015cee <get_coolant_override+0x1a>
        data = coolant.buf[bptr++];                   // Get next character, increment tmp pointer
 8015cde:	1c5a      	adds	r2, r3, #1
 8015ce0:	4904      	ldr	r1, [pc, #16]	@ (8015cf4 <get_coolant_override+0x20>)
 8015ce2:	440b      	add	r3, r1
 8015ce4:	7a18      	ldrb	r0, [r3, #8]
        coolant.tail = bptr & (OVERRIDE_BUFSIZE - 1); // and update pointer
 8015ce6:	f002 020f 	and.w	r2, r2, #15
 8015cea:	604a      	str	r2, [r1, #4]
 8015cec:	4770      	bx	lr
    uint8_t data = 0;
 8015cee:	2000      	movs	r0, #0
    }

    return data;
}
 8015cf0:	4770      	bx	lr
 8015cf2:	bf00      	nop
 8015cf4:	20001724 	.word	0x20001724

08015cf8 <flush_override_buffers>:

void flush_override_buffers (void)
{
    feed.head = feed.tail = spindle.head = spindle.tail = coolant.head = coolant.tail = 0;
 8015cf8:	4a05      	ldr	r2, [pc, #20]	@ (8015d10 <flush_override_buffers+0x18>)
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	6053      	str	r3, [r2, #4]
 8015cfe:	6013      	str	r3, [r2, #0]
 8015d00:	4a04      	ldr	r2, [pc, #16]	@ (8015d14 <flush_override_buffers+0x1c>)
 8015d02:	6053      	str	r3, [r2, #4]
 8015d04:	6013      	str	r3, [r2, #0]
 8015d06:	4a04      	ldr	r2, [pc, #16]	@ (8015d18 <flush_override_buffers+0x20>)
 8015d08:	6053      	str	r3, [r2, #4]
 8015d0a:	6013      	str	r3, [r2, #0]
}
 8015d0c:	4770      	bx	lr
 8015d0e:	bf00      	nop
 8015d10:	20001724 	.word	0x20001724
 8015d14:	2000173c 	.word	0x2000173c
 8015d18:	20001754 	.word	0x20001754

08015d1c <limit_acceleration_by_axis_maximum>:
}

static inline float limit_acceleration_by_axis_maximum (float *unit_vec)
{
    uint_fast8_t idx = N_AXIS;
    float limit_value = SOME_LARGE_VALUE;
 8015d1c:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8015d64 <limit_acceleration_by_axis_maximum+0x48>
    uint_fast8_t idx = N_AXIS;
 8015d20:	2303      	movs	r3, #3
 8015d22:	e000      	b.n	8015d26 <limit_acceleration_by_axis_maximum+0xa>

    do {
        if (unit_vec[--idx] != 0.0f)  // Avoid divide by zero.
            limit_value = min(limit_value, fabsf(settings.axis[idx].acceleration / unit_vec[idx]));
    } while(idx);
 8015d24:	b1e3      	cbz	r3, 8015d60 <limit_acceleration_by_axis_maximum+0x44>
        if (unit_vec[--idx] != 0.0f)  // Avoid divide by zero.
 8015d26:	3b01      	subs	r3, #1
 8015d28:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8015d2c:	edd2 7a00 	vldr	s15, [r2]
 8015d30:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d38:	d0f4      	beq.n	8015d24 <limit_acceleration_by_axis_maximum+0x8>
            limit_value = min(limit_value, fabsf(settings.axis[idx].acceleration / unit_vec[idx]));
 8015d3a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8015d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8015d68 <limit_acceleration_by_axis_maximum+0x4c>)
 8015d40:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015d44:	edd2 6a0e 	vldr	s13, [r2, #56]	@ 0x38
 8015d48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015d4c:	eef0 7ac7 	vabs.f32	s15, s14
 8015d50:	eef4 7ac0 	vcmpe.f32	s15, s0
 8015d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d58:	dce4      	bgt.n	8015d24 <limit_acceleration_by_axis_maximum+0x8>
 8015d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8015d5e:	e7e1      	b.n	8015d24 <limit_acceleration_by_axis_maximum+0x8>

    return limit_value;
}
 8015d60:	4770      	bx	lr
 8015d62:	bf00      	nop
 8015d64:	7e967699 	.word	0x7e967699
 8015d68:	20001bc4 	.word	0x20001bc4

08015d6c <limit_max_rate_by_axis_maximum>:

static inline float limit_max_rate_by_axis_maximum (float *unit_vec)
{
    uint_fast8_t idx = N_AXIS;
    float limit_value = SOME_LARGE_VALUE;
 8015d6c:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8015db4 <limit_max_rate_by_axis_maximum+0x48>
    uint_fast8_t idx = N_AXIS;
 8015d70:	2303      	movs	r3, #3
 8015d72:	e000      	b.n	8015d76 <limit_max_rate_by_axis_maximum+0xa>

    do {
        if (unit_vec[--idx] != 0.0f)  // Avoid divide by zero.
            limit_value = min(limit_value, fabsf(settings.axis[idx].max_rate / unit_vec[idx]));
    } while(idx);
 8015d74:	b1e3      	cbz	r3, 8015db0 <limit_max_rate_by_axis_maximum+0x44>
        if (unit_vec[--idx] != 0.0f)  // Avoid divide by zero.
 8015d76:	3b01      	subs	r3, #1
 8015d78:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8015d7c:	edd2 7a00 	vldr	s15, [r2]
 8015d80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d88:	d0f4      	beq.n	8015d74 <limit_max_rate_by_axis_maximum+0x8>
            limit_value = min(limit_value, fabsf(settings.axis[idx].max_rate / unit_vec[idx]));
 8015d8a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8015d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8015db8 <limit_max_rate_by_axis_maximum+0x4c>)
 8015d90:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015d94:	edd2 6a0d 	vldr	s13, [r2, #52]	@ 0x34
 8015d98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015d9c:	eef0 7ac7 	vabs.f32	s15, s14
 8015da0:	eef4 7ac0 	vcmpe.f32	s15, s0
 8015da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015da8:	dce4      	bgt.n	8015d74 <limit_max_rate_by_axis_maximum+0x8>
 8015daa:	eeb0 0a67 	vmov.f32	s0, s15
 8015dae:	e7e1      	b.n	8015d74 <limit_max_rate_by_axis_maximum+0x8>

    return limit_value;
}
 8015db0:	4770      	bx	lr
 8015db2:	bf00      	nop
 8015db4:	7e967699 	.word	0x7e967699
 8015db8:	20001bc4 	.word	0x20001bc4

08015dbc <plan_cleanup>:
{
 8015dbc:	b538      	push	{r3, r4, r5, lr}
 8015dbe:	4604      	mov	r4, r0
    if(block->message) {
 8015dc0:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8015dc2:	b140      	cbz	r0, 8015dd6 <plan_cleanup+0x1a>
        free(block->message);
 8015dc4:	f00c fa9a 	bl	80222fc <free>
        block->message = NULL;
 8015dc8:	2300      	movs	r3, #0
 8015dca:	64a3      	str	r3, [r4, #72]	@ 0x48
 8015dcc:	e003      	b.n	8015dd6 <plan_cleanup+0x1a>
        output_command_t *next = block->output_commands->next;
 8015dce:	6885      	ldr	r5, [r0, #8]
        free(block->output_commands);
 8015dd0:	f00c fa94 	bl	80222fc <free>
        block->output_commands = next;
 8015dd4:	64e5      	str	r5, [r4, #76]	@ 0x4c
    while(block->output_commands) {
 8015dd6:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8015dd8:	2800      	cmp	r0, #0
 8015dda:	d1f8      	bne.n	8015dce <plan_cleanup+0x12>
}
 8015ddc:	bd38      	pop	{r3, r4, r5, pc}
	...

08015de0 <plan_reset_buffer>:
{
 8015de0:	b508      	push	{r3, lr}
    if(block_buffer_tail) {
 8015de2:	4b0e      	ldr	r3, [pc, #56]	@ (8015e1c <plan_reset_buffer+0x3c>)
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	b933      	cbnz	r3, 8015df6 <plan_reset_buffer+0x16>
 8015de8:	e00b      	b.n	8015e02 <plan_reset_buffer+0x22>
            plan_cleanup(block_buffer_tail);
 8015dea:	f7ff ffe7 	bl	8015dbc <plan_cleanup>
            block_buffer_tail = block_buffer_tail->next;
 8015dee:	4b0b      	ldr	r3, [pc, #44]	@ (8015e1c <plan_reset_buffer+0x3c>)
 8015df0:	681a      	ldr	r2, [r3, #0]
 8015df2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8015df4:	601a      	str	r2, [r3, #0]
        while(block_buffer_tail != block_buffer_head) {
 8015df6:	4b09      	ldr	r3, [pc, #36]	@ (8015e1c <plan_reset_buffer+0x3c>)
 8015df8:	6818      	ldr	r0, [r3, #0]
 8015dfa:	4b09      	ldr	r3, [pc, #36]	@ (8015e20 <plan_reset_buffer+0x40>)
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	4298      	cmp	r0, r3
 8015e00:	d1f3      	bne.n	8015dea <plan_reset_buffer+0xa>
    block_buffer_tail = block_buffer_head = block_buffer;   // Empty = tail == head
 8015e02:	4b08      	ldr	r3, [pc, #32]	@ (8015e24 <plan_reset_buffer+0x44>)
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	4a06      	ldr	r2, [pc, #24]	@ (8015e20 <plan_reset_buffer+0x40>)
 8015e08:	6013      	str	r3, [r2, #0]
 8015e0a:	4a04      	ldr	r2, [pc, #16]	@ (8015e1c <plan_reset_buffer+0x3c>)
 8015e0c:	6013      	str	r3, [r2, #0]
    next_buffer_head = block_buffer_head->next;             // = next block
 8015e0e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8015e10:	4a05      	ldr	r2, [pc, #20]	@ (8015e28 <plan_reset_buffer+0x48>)
 8015e12:	6011      	str	r1, [r2, #0]
    block_buffer_planned = block_buffer_tail;               // = block_buffer_tail
 8015e14:	4a05      	ldr	r2, [pc, #20]	@ (8015e2c <plan_reset_buffer+0x4c>)
 8015e16:	6013      	str	r3, [r2, #0]
}
 8015e18:	bd08      	pop	{r3, pc}
 8015e1a:	bf00      	nop
 8015e1c:	20001794 	.word	0x20001794
 8015e20:	20001790 	.word	0x20001790
 8015e24:	20001798 	.word	0x20001798
 8015e28:	2000178c 	.word	0x2000178c
 8015e2c:	20001788 	.word	0x20001788

08015e30 <planner_recalculate>:
{
 8015e30:	b570      	push	{r4, r5, r6, lr}
    plan_block_t *block = block_buffer_head->prev;
 8015e32:	4b42      	ldr	r3, [pc, #264]	@ (8015f3c <planner_recalculate+0x10c>)
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
    if (block == block_buffer_planned)
 8015e38:	4b41      	ldr	r3, [pc, #260]	@ (8015f40 <planner_recalculate+0x110>)
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	42b3      	cmp	r3, r6
 8015e3e:	d07b      	beq.n	8015f38 <planner_recalculate+0x108>
    current->entry_speed_sqr = min(current->max_entry_speed_sqr, 2.0f * current->acceleration * current->millimeters);
 8015e40:	ed96 7a08 	vldr	s14, [r6, #32]
 8015e44:	edd6 7a09 	vldr	s15, [r6, #36]	@ 0x24
 8015e48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015e4c:	edd6 6a0a 	vldr	s13, [r6, #40]	@ 0x28
 8015e50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015e54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e5c:	d501      	bpl.n	8015e62 <planner_recalculate+0x32>
 8015e5e:	eef0 7a47 	vmov.f32	s15, s14
 8015e62:	edc6 7a07 	vstr	s15, [r6, #28]
    block = block->prev;
 8015e66:	6d34      	ldr	r4, [r6, #80]	@ 0x50
    if (block == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 8015e68:	42a3      	cmp	r3, r4
 8015e6a:	d111      	bne.n	8015e90 <planner_recalculate+0x60>
        if (block == block_buffer_tail)
 8015e6c:	4b35      	ldr	r3, [pc, #212]	@ (8015f44 <planner_recalculate+0x114>)
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	42a3      	cmp	r3, r4
 8015e72:	d003      	beq.n	8015e7c <planner_recalculate+0x4c>
    next = block_buffer_planned; // Begin at buffer planned pointer
 8015e74:	4b32      	ldr	r3, [pc, #200]	@ (8015f40 <planner_recalculate+0x110>)
 8015e76:	681a      	ldr	r2, [r3, #0]
    block = block_buffer_planned->next;
 8015e78:	6d53      	ldr	r3, [r2, #84]	@ 0x54
    while (block != block_buffer_head) {
 8015e7a:	e03c      	b.n	8015ef6 <planner_recalculate+0xc6>
            st_update_plan_block_parameters();
 8015e7c:	f009 fbb4 	bl	801f5e8 <st_update_plan_block_parameters>
 8015e80:	e7f8      	b.n	8015e74 <planner_recalculate+0x44>
            st_update_plan_block_parameters();
 8015e82:	f009 fbb1 	bl	801f5e8 <st_update_plan_block_parameters>
 8015e86:	e00c      	b.n	8015ea2 <planner_recalculate+0x72>
            current->entry_speed_sqr = entry_speed_sqr < current->max_entry_speed_sqr ? entry_speed_sqr : current->max_entry_speed_sqr;
 8015e88:	ed84 7a07 	vstr	s14, [r4, #28]
 8015e8c:	4626      	mov	r6, r4
 8015e8e:	462c      	mov	r4, r5
    } else while (block != block_buffer_planned) { // Three or more plan-able blocks
 8015e90:	4b2b      	ldr	r3, [pc, #172]	@ (8015f40 <planner_recalculate+0x110>)
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	42a3      	cmp	r3, r4
 8015e96:	d0ed      	beq.n	8015e74 <planner_recalculate+0x44>
        block = block->prev;
 8015e98:	6d25      	ldr	r5, [r4, #80]	@ 0x50
        if (block == block_buffer_tail)
 8015e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8015f44 <planner_recalculate+0x114>)
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	42ab      	cmp	r3, r5
 8015ea0:	d0ef      	beq.n	8015e82 <planner_recalculate+0x52>
        if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 8015ea2:	edd4 7a07 	vldr	s15, [r4, #28]
 8015ea6:	ed94 7a08 	vldr	s14, [r4, #32]
 8015eaa:	eef4 7a47 	vcmp.f32	s15, s14
 8015eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eb2:	d0eb      	beq.n	8015e8c <planner_recalculate+0x5c>
            entry_speed_sqr = next->entry_speed_sqr + 2.0f * current->acceleration * current->millimeters;
 8015eb4:	edd6 6a07 	vldr	s13, [r6, #28]
 8015eb8:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 8015ebc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015ec0:	ed94 6a0a 	vldr	s12, [r4, #40]	@ 0x28
 8015ec4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015ec8:	ee76 7aa7 	vadd.f32	s15, s13, s15
            current->entry_speed_sqr = entry_speed_sqr < current->max_entry_speed_sqr ? entry_speed_sqr : current->max_entry_speed_sqr;
 8015ecc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ed4:	ddd8      	ble.n	8015e88 <planner_recalculate+0x58>
 8015ed6:	eeb0 7a67 	vmov.f32	s14, s15
 8015eda:	e7d5      	b.n	8015e88 <planner_recalculate+0x58>
        if (next->entry_speed_sqr == next->max_entry_speed_sqr)
 8015edc:	ed93 7a07 	vldr	s14, [r3, #28]
 8015ee0:	edd3 7a08 	vldr	s15, [r3, #32]
 8015ee4:	eeb4 7a67 	vcmp.f32	s14, s15
 8015ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eec:	d101      	bne.n	8015ef2 <planner_recalculate+0xc2>
            block_buffer_planned = block;
 8015eee:	4a14      	ldr	r2, [pc, #80]	@ (8015f40 <planner_recalculate+0x110>)
 8015ef0:	6013      	str	r3, [r2, #0]
        next = block;
 8015ef2:	461a      	mov	r2, r3
        block = block->next;
 8015ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    while (block != block_buffer_head) {
 8015ef6:	4911      	ldr	r1, [pc, #68]	@ (8015f3c <planner_recalculate+0x10c>)
 8015ef8:	6809      	ldr	r1, [r1, #0]
 8015efa:	4299      	cmp	r1, r3
 8015efc:	d01c      	beq.n	8015f38 <planner_recalculate+0x108>
        if (current->entry_speed_sqr < next->entry_speed_sqr) {
 8015efe:	edd2 7a07 	vldr	s15, [r2, #28]
 8015f02:	edd3 6a07 	vldr	s13, [r3, #28]
 8015f06:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f0e:	d5e5      	bpl.n	8015edc <planner_recalculate+0xac>
            entry_speed_sqr = current->entry_speed_sqr + 2.0f * current->acceleration * current->millimeters;
 8015f10:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 8015f14:	ee37 7a07 	vadd.f32	s14, s14, s14
 8015f18:	ed92 6a0a 	vldr	s12, [r2, #40]	@ 0x28
 8015f1c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015f20:	ee77 7a87 	vadd.f32	s15, s15, s14
            if (entry_speed_sqr < next->entry_speed_sqr) {
 8015f24:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f2c:	ddd6      	ble.n	8015edc <planner_recalculate+0xac>
                next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 8015f2e:	edc3 7a07 	vstr	s15, [r3, #28]
                block_buffer_planned = block; // Set optimal plan pointer.
 8015f32:	4a03      	ldr	r2, [pc, #12]	@ (8015f40 <planner_recalculate+0x110>)
 8015f34:	6013      	str	r3, [r2, #0]
 8015f36:	e7d1      	b.n	8015edc <planner_recalculate+0xac>
}
 8015f38:	bd70      	pop	{r4, r5, r6, pc}
 8015f3a:	bf00      	nop
 8015f3c:	20001790 	.word	0x20001790
 8015f40:	20001788 	.word	0x20001788
 8015f44:	20001794 	.word	0x20001794

08015f48 <plan_get_buffer_size>:
}
 8015f48:	4b01      	ldr	r3, [pc, #4]	@ (8015f50 <plan_get_buffer_size+0x8>)
 8015f4a:	6818      	ldr	r0, [r3, #0]
 8015f4c:	4770      	bx	lr
 8015f4e:	bf00      	nop
 8015f50:	2000179c 	.word	0x2000179c

08015f54 <plan_reset>:
{
 8015f54:	b510      	push	{r4, lr}
    if(block_buffer == NULL) {
 8015f56:	4b37      	ldr	r3, [pc, #220]	@ (8016034 <plan_reset+0xe0>)
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	b16b      	cbz	r3, 8015f78 <plan_reset+0x24>
    if(block_buffer_size != settings.planner_buffer_blocks)
 8015f5c:	4b36      	ldr	r3, [pc, #216]	@ (8016038 <plan_reset+0xe4>)
 8015f5e:	8ada      	ldrh	r2, [r3, #22]
 8015f60:	4b36      	ldr	r3, [pc, #216]	@ (801603c <plan_reset+0xe8>)
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	429a      	cmp	r2, r3
 8015f66:	d121      	bne.n	8015fac <plan_reset+0x58>
    if(block_buffer == NULL)
 8015f68:	4b32      	ldr	r3, [pc, #200]	@ (8016034 <plan_reset+0xe0>)
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d05e      	beq.n	801602e <plan_reset+0xda>
    if(block_buffer_tail) {
 8015f70:	4b33      	ldr	r3, [pc, #204]	@ (8016040 <plan_reset+0xec>)
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	bb2b      	cbnz	r3, 8015fc2 <plan_reset+0x6e>
 8015f76:	e02d      	b.n	8015fd4 <plan_reset+0x80>
        block_buffer_size = settings.planner_buffer_blocks;
 8015f78:	4b2f      	ldr	r3, [pc, #188]	@ (8016038 <plan_reset+0xe4>)
 8015f7a:	8ada      	ldrh	r2, [r3, #22]
 8015f7c:	4b2f      	ldr	r3, [pc, #188]	@ (801603c <plan_reset+0xe8>)
 8015f7e:	601a      	str	r2, [r3, #0]
        while((block_buffer = malloc((block_buffer_size + 1) * sizeof(plan_block_t))) == NULL) {
 8015f80:	4b2e      	ldr	r3, [pc, #184]	@ (801603c <plan_reset+0xe8>)
 8015f82:	681c      	ldr	r4, [r3, #0]
 8015f84:	2058      	movs	r0, #88	@ 0x58
 8015f86:	fb04 0000 	mla	r0, r4, r0, r0
 8015f8a:	f00c f9af 	bl	80222ec <malloc>
 8015f8e:	4b29      	ldr	r3, [pc, #164]	@ (8016034 <plan_reset+0xe0>)
 8015f90:	6018      	str	r0, [r3, #0]
 8015f92:	2800      	cmp	r0, #0
 8015f94:	d1e2      	bne.n	8015f5c <plan_reset+0x8>
            if(block_buffer_size > 40)
 8015f96:	2c28      	cmp	r4, #40	@ 0x28
 8015f98:	d9e0      	bls.n	8015f5c <plan_reset+0x8>
                block_buffer_size -= block_buffer_size >= 250 ? 100 : 10;
 8015f9a:	2cf9      	cmp	r4, #249	@ 0xf9
 8015f9c:	d904      	bls.n	8015fa8 <plan_reset+0x54>
 8015f9e:	2364      	movs	r3, #100	@ 0x64
 8015fa0:	1ae4      	subs	r4, r4, r3
 8015fa2:	4b26      	ldr	r3, [pc, #152]	@ (801603c <plan_reset+0xe8>)
 8015fa4:	601c      	str	r4, [r3, #0]
 8015fa6:	e7eb      	b.n	8015f80 <plan_reset+0x2c>
 8015fa8:	230a      	movs	r3, #10
 8015faa:	e7f9      	b.n	8015fa0 <plan_reset+0x4c>
        protocol_enqueue_foreground_task(report_plain, "Planner buffer size was reduced!");
 8015fac:	4925      	ldr	r1, [pc, #148]	@ (8016044 <plan_reset+0xf0>)
 8015fae:	4826      	ldr	r0, [pc, #152]	@ (8016048 <plan_reset+0xf4>)
 8015fb0:	f001 fb2c 	bl	801760c <protocol_enqueue_foreground_task>
 8015fb4:	e7d8      	b.n	8015f68 <plan_reset+0x14>
            plan_cleanup(block_buffer_tail);
 8015fb6:	f7ff ff01 	bl	8015dbc <plan_cleanup>
            block_buffer_tail = block_buffer_tail->next;
 8015fba:	4b21      	ldr	r3, [pc, #132]	@ (8016040 <plan_reset+0xec>)
 8015fbc:	681a      	ldr	r2, [r3, #0]
 8015fbe:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8015fc0:	601a      	str	r2, [r3, #0]
        while(block_buffer_tail != block_buffer_head) {
 8015fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8016040 <plan_reset+0xec>)
 8015fc4:	6818      	ldr	r0, [r3, #0]
 8015fc6:	4b21      	ldr	r3, [pc, #132]	@ (801604c <plan_reset+0xf8>)
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	4298      	cmp	r0, r3
 8015fcc:	d1f3      	bne.n	8015fb6 <plan_reset+0x62>
        block_buffer_tail = NULL;
 8015fce:	4b1c      	ldr	r3, [pc, #112]	@ (8016040 <plan_reset+0xec>)
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	601a      	str	r2, [r3, #0]
    memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 8015fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8016050 <plan_reset+0xfc>)
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	6013      	str	r3, [r2, #0]
 8015fda:	6053      	str	r3, [r2, #4]
 8015fdc:	6093      	str	r3, [r2, #8]
 8015fde:	60d3      	str	r3, [r2, #12]
 8015fe0:	6113      	str	r3, [r2, #16]
 8015fe2:	6153      	str	r3, [r2, #20]
 8015fe4:	6193      	str	r3, [r2, #24]
    for(idx = 0 ; idx <= block_buffer_size ; idx++) {
 8015fe6:	e010      	b.n	801600a <plan_reset+0xb6>
        block_buffer[idx].prev = &block_buffer[idx == 0 ? block_buffer_size : idx - 1];
 8015fe8:	2258      	movs	r2, #88	@ 0x58
 8015fea:	fb03 f202 	mul.w	r2, r3, r2
 8015fee:	3a58      	subs	r2, #88	@ 0x58
 8015ff0:	2058      	movs	r0, #88	@ 0x58
 8015ff2:	fb00 1003 	mla	r0, r0, r3, r1
 8015ff6:	440a      	add	r2, r1
 8015ff8:	6502      	str	r2, [r0, #80]	@ 0x50
        block_buffer[idx].next = &block_buffer[idx == block_buffer_size ? 0 : idx + 1];
 8015ffa:	429c      	cmp	r4, r3
 8015ffc:	d011      	beq.n	8016022 <plan_reset+0xce>
 8015ffe:	2258      	movs	r2, #88	@ 0x58
 8016000:	fb03 2202 	mla	r2, r3, r2, r2
 8016004:	4411      	add	r1, r2
 8016006:	6541      	str	r1, [r0, #84]	@ 0x54
    for(idx = 0 ; idx <= block_buffer_size ; idx++) {
 8016008:	3301      	adds	r3, #1
 801600a:	4a0c      	ldr	r2, [pc, #48]	@ (801603c <plan_reset+0xe8>)
 801600c:	6814      	ldr	r4, [r2, #0]
 801600e:	429c      	cmp	r4, r3
 8016010:	d309      	bcc.n	8016026 <plan_reset+0xd2>
        block_buffer[idx].prev = &block_buffer[idx == 0 ? block_buffer_size : idx - 1];
 8016012:	4a08      	ldr	r2, [pc, #32]	@ (8016034 <plan_reset+0xe0>)
 8016014:	6811      	ldr	r1, [r2, #0]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d1e6      	bne.n	8015fe8 <plan_reset+0x94>
 801601a:	2258      	movs	r2, #88	@ 0x58
 801601c:	fb04 f202 	mul.w	r2, r4, r2
 8016020:	e7e6      	b.n	8015ff0 <plan_reset+0x9c>
        block_buffer[idx].next = &block_buffer[idx == block_buffer_size ? 0 : idx + 1];
 8016022:	2200      	movs	r2, #0
 8016024:	e7ee      	b.n	8016004 <plan_reset+0xb0>
    plan_reset_buffer();
 8016026:	f7ff fedb 	bl	8015de0 <plan_reset_buffer>
    return true;
 801602a:	2001      	movs	r0, #1
}
 801602c:	bd10      	pop	{r4, pc}
        return false;
 801602e:	2000      	movs	r0, #0
 8016030:	e7fc      	b.n	801602c <plan_reset+0xd8>
 8016032:	bf00      	nop
 8016034:	20001798 	.word	0x20001798
 8016038:	20001bc4 	.word	0x20001bc4
 801603c:	2000179c 	.word	0x2000179c
 8016040:	20001794 	.word	0x20001794
 8016044:	0802b2cc 	.word	0x0802b2cc
 8016048:	08018fa1 	.word	0x08018fa1
 801604c:	20001790 	.word	0x20001790
 8016050:	2000176c 	.word	0x2000176c

08016054 <plan_discard_current_block>:
{
 8016054:	b508      	push	{r3, lr}
    if (block_buffer_tail != block_buffer_head) { // Discard non-empty buffer.
 8016056:	4b0b      	ldr	r3, [pc, #44]	@ (8016084 <plan_discard_current_block+0x30>)
 8016058:	6818      	ldr	r0, [r3, #0]
 801605a:	4b0b      	ldr	r3, [pc, #44]	@ (8016088 <plan_discard_current_block+0x34>)
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	4298      	cmp	r0, r3
 8016060:	d00a      	beq.n	8016078 <plan_discard_current_block+0x24>
        plan_cleanup(block_buffer_tail);
 8016062:	f7ff feab 	bl	8015dbc <plan_cleanup>
        if (block_buffer_tail == block_buffer_planned)
 8016066:	4b07      	ldr	r3, [pc, #28]	@ (8016084 <plan_discard_current_block+0x30>)
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	4a08      	ldr	r2, [pc, #32]	@ (801608c <plan_discard_current_block+0x38>)
 801606c:	6812      	ldr	r2, [r2, #0]
 801606e:	4293      	cmp	r3, r2
 8016070:	d003      	beq.n	801607a <plan_discard_current_block+0x26>
        block_buffer_tail = block_buffer_tail->next;
 8016072:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016074:	4b03      	ldr	r3, [pc, #12]	@ (8016084 <plan_discard_current_block+0x30>)
 8016076:	601a      	str	r2, [r3, #0]
}
 8016078:	bd08      	pop	{r3, pc}
            block_buffer_planned = block_buffer_tail->next;
 801607a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801607c:	4a03      	ldr	r2, [pc, #12]	@ (801608c <plan_discard_current_block+0x38>)
 801607e:	6011      	str	r1, [r2, #0]
 8016080:	e7f7      	b.n	8016072 <plan_discard_current_block+0x1e>
 8016082:	bf00      	nop
 8016084:	20001794 	.word	0x20001794
 8016088:	20001790 	.word	0x20001790
 801608c:	20001788 	.word	0x20001788

08016090 <plan_get_system_motion_block>:
}
 8016090:	4b01      	ldr	r3, [pc, #4]	@ (8016098 <plan_get_system_motion_block+0x8>)
 8016092:	6818      	ldr	r0, [r3, #0]
 8016094:	4770      	bx	lr
 8016096:	bf00      	nop
 8016098:	20001790 	.word	0x20001790

0801609c <plan_get_current_block>:
    return block_buffer_head == block_buffer_tail ? NULL : block_buffer_tail;
 801609c:	4b04      	ldr	r3, [pc, #16]	@ (80160b0 <plan_get_current_block+0x14>)
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	4a04      	ldr	r2, [pc, #16]	@ (80160b4 <plan_get_current_block+0x18>)
 80160a2:	6810      	ldr	r0, [r2, #0]
 80160a4:	4283      	cmp	r3, r0
 80160a6:	d000      	beq.n	80160aa <plan_get_current_block+0xe>
}
 80160a8:	4770      	bx	lr
    return block_buffer_head == block_buffer_tail ? NULL : block_buffer_tail;
 80160aa:	2000      	movs	r0, #0
 80160ac:	e7fc      	b.n	80160a8 <plan_get_current_block+0xc>
 80160ae:	bf00      	nop
 80160b0:	20001790 	.word	0x20001790
 80160b4:	20001794 	.word	0x20001794

080160b8 <plan_get_exec_block_exit_speed_sqr>:
    plan_block_t *block = block_buffer_tail->next;
 80160b8:	4b06      	ldr	r3, [pc, #24]	@ (80160d4 <plan_get_exec_block_exit_speed_sqr+0x1c>)
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    return block == block_buffer_head ? 0.0f : block->entry_speed_sqr;
 80160be:	4a06      	ldr	r2, [pc, #24]	@ (80160d8 <plan_get_exec_block_exit_speed_sqr+0x20>)
 80160c0:	6812      	ldr	r2, [r2, #0]
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d002      	beq.n	80160cc <plan_get_exec_block_exit_speed_sqr+0x14>
 80160c6:	ed93 0a07 	vldr	s0, [r3, #28]
 80160ca:	4770      	bx	lr
 80160cc:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80160dc <plan_get_exec_block_exit_speed_sqr+0x24>
}
 80160d0:	4770      	bx	lr
 80160d2:	bf00      	nop
 80160d4:	20001794 	.word	0x20001794
 80160d8:	20001790 	.word	0x20001790
 80160dc:	00000000 	.word	0x00000000

080160e0 <plan_check_full_buffer>:
    return block_buffer_tail == next_buffer_head;
 80160e0:	4b04      	ldr	r3, [pc, #16]	@ (80160f4 <plan_check_full_buffer+0x14>)
 80160e2:	6818      	ldr	r0, [r3, #0]
 80160e4:	4b04      	ldr	r3, [pc, #16]	@ (80160f8 <plan_check_full_buffer+0x18>)
 80160e6:	681b      	ldr	r3, [r3, #0]
}
 80160e8:	4298      	cmp	r0, r3
 80160ea:	bf14      	ite	ne
 80160ec:	2000      	movne	r0, #0
 80160ee:	2001      	moveq	r0, #1
 80160f0:	4770      	bx	lr
 80160f2:	bf00      	nop
 80160f4:	20001794 	.word	0x20001794
 80160f8:	2000178c 	.word	0x2000178c

080160fc <plan_compute_profile_nominal_speed>:
{
 80160fc:	b510      	push	{r4, lr}
 80160fe:	ed2d 8b02 	vpush	{d8}
 8016102:	4604      	mov	r4, r0
    float nominal_speed = block->condition.units_per_rev || block->spindle.state.synchronized
 8016104:	7d03      	ldrb	r3, [r0, #20]
                           : block->programmed_rate;
 8016106:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801610a:	d106      	bne.n	801611a <plan_compute_profile_nominal_speed+0x1e>
    float nominal_speed = block->condition.units_per_rev || block->spindle.state.synchronized
 801610c:	f990 303c 	ldrsb.w	r3, [r0, #60]	@ 0x3c
 8016110:	2b00      	cmp	r3, #0
 8016112:	db02      	blt.n	801611a <plan_compute_profile_nominal_speed+0x1e>
                           : block->programmed_rate;
 8016114:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
 8016118:	e009      	b.n	801612e <plan_compute_profile_nominal_speed+0x32>
                           ? block->programmed_rate * block->spindle.hal->get_data(SpindleData_RPM)->rpm
 801611a:	ed94 8a0d 	vldr	s16, [r4, #52]	@ 0x34
 801611e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8016120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016122:	2001      	movs	r0, #1
 8016124:	4798      	blx	r3
 8016126:	edd0 7a00 	vldr	s15, [r0]
                           : block->programmed_rate;
 801612a:	ee68 7a27 	vmul.f32	s15, s16, s15
    if(block->condition.rapid_motion)
 801612e:	7d23      	ldrb	r3, [r4, #20]
 8016130:	f013 0f01 	tst.w	r3, #1
 8016134:	d014      	beq.n	8016160 <plan_compute_profile_nominal_speed+0x64>
        nominal_speed *= (0.01f * (float)sys.override.rapid_rate);
 8016136:	4b18      	ldr	r3, [pc, #96]	@ (8016198 <plan_compute_profile_nominal_speed+0x9c>)
 8016138:	ed93 0a08 	vldr	s0, [r3, #32]
 801613c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8016140:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 801619c <plan_compute_profile_nominal_speed+0xa0>
 8016144:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016148:	ee20 0a27 	vmul.f32	s0, s0, s15
    return nominal_speed > MINIMUM_FEED_RATE ? nominal_speed : MINIMUM_FEED_RATE;
 801614c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8016150:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016158:	dd1a      	ble.n	8016190 <plan_compute_profile_nominal_speed+0x94>
}
 801615a:	ecbd 8b02 	vpop	{d8}
 801615e:	bd10      	pop	{r4, pc}
        if(!block->condition.no_feed_override)
 8016160:	f013 0f10 	tst.w	r3, #16
 8016164:	d10a      	bne.n	801617c <plan_compute_profile_nominal_speed+0x80>
            nominal_speed *= (0.01f * (float)sys.override.feed_rate);
 8016166:	4b0c      	ldr	r3, [pc, #48]	@ (8016198 <plan_compute_profile_nominal_speed+0x9c>)
 8016168:	ed93 7a07 	vldr	s14, [r3, #28]
 801616c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8016170:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 801619c <plan_compute_profile_nominal_speed+0xa0>
 8016174:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016178:	ee67 7a87 	vmul.f32	s15, s15, s14
        if(nominal_speed > block->rapid_rate)
 801617c:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 8016180:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016188:	d4e0      	bmi.n	801614c <plan_compute_profile_nominal_speed+0x50>
 801618a:	eeb0 0a67 	vmov.f32	s0, s15
 801618e:	e7dd      	b.n	801614c <plan_compute_profile_nominal_speed+0x50>
    return nominal_speed > MINIMUM_FEED_RATE ? nominal_speed : MINIMUM_FEED_RATE;
 8016190:	eeb0 0a67 	vmov.f32	s0, s15
 8016194:	e7e1      	b.n	801615a <plan_compute_profile_nominal_speed+0x5e>
 8016196:	bf00      	nop
 8016198:	2000148c 	.word	0x2000148c
 801619c:	3c23d70a 	.word	0x3c23d70a

080161a0 <plan_update_velocity_profile_parameters>:
        planner_recalculate();
}

// Re-calculates buffered motions profile parameters upon a motion-based override change.
static bool plan_update_velocity_profile_parameters (void)
{
 80161a0:	b510      	push	{r4, lr}
 80161a2:	ed2d 8b02 	vpush	{d8}
    if(block_buffer_tail != block_buffer_head) {
 80161a6:	4b1b      	ldr	r3, [pc, #108]	@ (8016214 <plan_update_velocity_profile_parameters+0x74>)
 80161a8:	681c      	ldr	r4, [r3, #0]
 80161aa:	4b1b      	ldr	r3, [pc, #108]	@ (8016218 <plan_update_velocity_profile_parameters+0x78>)
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	429c      	cmp	r4, r3
 80161b0:	d025      	beq.n	80161fe <plan_update_velocity_profile_parameters+0x5e>

        plan_block_t *block = block_buffer_tail;
        float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 80161b2:	ed9f 8a1a 	vldr	s16, [pc, #104]	@ 801621c <plan_update_velocity_profile_parameters+0x7c>
 80161b6:	e005      	b.n	80161c4 <plan_update_velocity_profile_parameters+0x24>
    block->max_entry_speed_sqr = nominal_speed > prev_nominal_speed ? (prev_nominal_speed * prev_nominal_speed) : (nominal_speed * nominal_speed);
 80161b8:	ee20 8a00 	vmul.f32	s16, s0, s0
 80161bc:	e010      	b.n	80161e0 <plan_update_velocity_profile_parameters+0x40>

        while (block != block_buffer_head) {
            prev_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), prev_nominal_speed);
            block = block->next;
 80161be:	6d64      	ldr	r4, [r4, #84]	@ 0x54
            prev_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), prev_nominal_speed);
 80161c0:	eeb0 8a40 	vmov.f32	s16, s0
        while (block != block_buffer_head) {
 80161c4:	4b14      	ldr	r3, [pc, #80]	@ (8016218 <plan_update_velocity_profile_parameters+0x78>)
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	42a3      	cmp	r3, r4
 80161ca:	d015      	beq.n	80161f8 <plan_update_velocity_profile_parameters+0x58>
            prev_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), prev_nominal_speed);
 80161cc:	4620      	mov	r0, r4
 80161ce:	f7ff ff95 	bl	80160fc <plan_compute_profile_nominal_speed>
    block->max_entry_speed_sqr = nominal_speed > prev_nominal_speed ? (prev_nominal_speed * prev_nominal_speed) : (nominal_speed * nominal_speed);
 80161d2:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80161d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161da:	dded      	ble.n	80161b8 <plan_update_velocity_profile_parameters+0x18>
 80161dc:	ee28 8a08 	vmul.f32	s16, s16, s16
 80161e0:	ed84 8a08 	vstr	s16, [r4, #32]
    if (block->max_entry_speed_sqr > block->max_junction_speed_sqr)
 80161e4:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80161e8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80161ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161f0:	dde5      	ble.n	80161be <plan_update_velocity_profile_parameters+0x1e>
        block->max_entry_speed_sqr = block->max_junction_speed_sqr;
 80161f2:	edc4 7a08 	vstr	s15, [r4, #32]
 80161f6:	e7e2      	b.n	80161be <plan_update_velocity_profile_parameters+0x1e>
        }

        pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 80161f8:	4b09      	ldr	r3, [pc, #36]	@ (8016220 <plan_update_velocity_profile_parameters+0x80>)
 80161fa:	ed83 8a06 	vstr	s16, [r3, #24]
    }

    return block_buffer_tail != block_buffer_head;
 80161fe:	4b05      	ldr	r3, [pc, #20]	@ (8016214 <plan_update_velocity_profile_parameters+0x74>)
 8016200:	6818      	ldr	r0, [r3, #0]
 8016202:	4b05      	ldr	r3, [pc, #20]	@ (8016218 <plan_update_velocity_profile_parameters+0x78>)
 8016204:	681b      	ldr	r3, [r3, #0]
}
 8016206:	1ac0      	subs	r0, r0, r3
 8016208:	bf18      	it	ne
 801620a:	2001      	movne	r0, #1
 801620c:	ecbd 8b02 	vpop	{d8}
 8016210:	bd10      	pop	{r4, pc}
 8016212:	bf00      	nop
 8016214:	20001794 	.word	0x20001794
 8016218:	20001790 	.word	0x20001790
 801621c:	7e967699 	.word	0x7e967699
 8016220:	2000176c 	.word	0x2000176c

08016224 <plan_buffer_line>:
{
 8016224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016228:	ed2d 8b04 	vpush	{d8-d9}
 801622c:	b08c      	sub	sp, #48	@ 0x30
 801622e:	4607      	mov	r7, r0
 8016230:	460e      	mov	r6, r1
    plan_block_t *block = block_buffer_head;
 8016232:	4bb6      	ldr	r3, [pc, #728]	@ (801650c <plan_buffer_line+0x2e8>)
 8016234:	681c      	ldr	r4, [r3, #0]
    memset(block, 0, sizeof(plan_block_t) - 2 * sizeof(plan_block_t *));    // Zero all block values (except linked list pointers).
 8016236:	2250      	movs	r2, #80	@ 0x50
 8016238:	2100      	movs	r1, #0
 801623a:	4620      	mov	r0, r4
 801623c:	f00e f91f 	bl	802447e <memset>
    memcpy(&block->spindle, &pl_data->spindle, sizeof(spindle_t));          // Copy spindle data (RPM etc)
 8016240:	6870      	ldr	r0, [r6, #4]
 8016242:	68b1      	ldr	r1, [r6, #8]
 8016244:	68f2      	ldr	r2, [r6, #12]
 8016246:	6933      	ldr	r3, [r6, #16]
 8016248:	63a0      	str	r0, [r4, #56]	@ 0x38
 801624a:	63e1      	str	r1, [r4, #60]	@ 0x3c
 801624c:	6422      	str	r2, [r4, #64]	@ 0x40
 801624e:	6463      	str	r3, [r4, #68]	@ 0x44
    block->condition = pl_data->condition;
 8016250:	6973      	ldr	r3, [r6, #20]
 8016252:	6163      	str	r3, [r4, #20]
    block->overrides = pl_data->overrides;
 8016254:	7e33      	ldrb	r3, [r6, #24]
 8016256:	74a3      	strb	r3, [r4, #18]
    block->line_number = pl_data->line_number;
 8016258:	69f3      	ldr	r3, [r6, #28]
 801625a:	61a3      	str	r3, [r4, #24]
    block->offset_id = pl_data->offset_id;
 801625c:	f996 3019 	ldrsb.w	r3, [r6, #25]
 8016260:	7463      	strb	r3, [r4, #17]
    block->output_commands = pl_data->output_commands;
 8016262:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8016264:	64e3      	str	r3, [r4, #76]	@ 0x4c
    block->message = pl_data->message;
 8016266:	6a33      	ldr	r3, [r6, #32]
 8016268:	64a3      	str	r3, [r4, #72]	@ 0x48
    memcpy(position_steps, block->condition.system_motion ? sys.position : pl.position, sizeof(position_steps));
 801626a:	7d23      	ldrb	r3, [r4, #20]
 801626c:	f013 0f02 	tst.w	r3, #2
 8016270:	d006      	beq.n	8016280 <plan_buffer_line+0x5c>
 8016272:	4aa7      	ldr	r2, [pc, #668]	@ (8016510 <plan_buffer_line+0x2ec>)
 8016274:	ab06      	add	r3, sp, #24
 8016276:	ca07      	ldmia	r2, {r0, r1, r2}
 8016278:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    idx = N_AXIS;
 801627c:	2503      	movs	r5, #3
 801627e:	e021      	b.n	80162c4 <plan_buffer_line+0xa0>
    memcpy(position_steps, block->condition.system_motion ? sys.position : pl.position, sizeof(position_steps));
 8016280:	4aa4      	ldr	r2, [pc, #656]	@ (8016514 <plan_buffer_line+0x2f0>)
 8016282:	e7f7      	b.n	8016274 <plan_buffer_line+0x50>
            block->steps[idx] = labs(delta_steps);
 8016284:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8016288:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 801628c:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
            block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8016290:	68e2      	ldr	r2, [r4, #12]
 8016292:	4293      	cmp	r3, r2
 8016294:	bf38      	it	cc
 8016296:	4613      	movcc	r3, r2
 8016298:	60e3      	str	r3, [r4, #12]
            unit_vec[idx] = (float)delta_steps / settings.axis[idx].steps_per_mm; // Store unit vector numerator
 801629a:	ee07 0a90 	vmov	s15, r0
 801629e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80162a2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80162a6:	4b9c      	ldr	r3, [pc, #624]	@ (8016518 <plan_buffer_line+0x2f4>)
 80162a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80162ac:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80162b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80162b4:	ab0c      	add	r3, sp, #48	@ 0x30
 80162b6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80162ba:	ed03 7a09 	vstr	s14, [r3, #-36]	@ 0xffffffdc
        if (delta_steps < 0)
 80162be:	2800      	cmp	r0, #0
 80162c0:	db25      	blt.n	801630e <plan_buffer_line+0xea>
    } while(idx);
 80162c2:	b355      	cbz	r5, 801631a <plan_buffer_line+0xf6>
        idx--;
 80162c4:	3d01      	subs	r5, #1
        target_steps[idx] = lroundf(target[idx] * settings.axis[idx].steps_per_mm);
 80162c6:	ea4f 0885 	mov.w	r8, r5, lsl #2
 80162ca:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 80162ce:	ed93 0a00 	vldr	s0, [r3]
 80162d2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80162d6:	4b90      	ldr	r3, [pc, #576]	@ (8016518 <plan_buffer_line+0x2f4>)
 80162d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80162dc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80162e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80162e4:	f010 ff0a 	bl	80270fc <lroundf>
 80162e8:	f108 0330 	add.w	r3, r8, #48	@ 0x30
 80162ec:	446b      	add	r3, sp
 80162ee:	f843 0c0c 	str.w	r0, [r3, #-12]
        if((delta_steps = target_steps[idx] - position_steps[idx])) {
 80162f2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80162f6:	1ac0      	subs	r0, r0, r3
 80162f8:	d1c4      	bne.n	8016284 <plan_buffer_line+0x60>
            block->steps[idx] = 0;
 80162fa:	2300      	movs	r3, #0
 80162fc:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
            unit_vec[idx] = 0.0f; // Store unit vector numerator
 8016300:	2200      	movs	r2, #0
 8016302:	ab0c      	add	r3, sp, #48	@ 0x30
 8016304:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8016308:	f843 2c24 	str.w	r2, [r3, #-36]
 801630c:	e7d7      	b.n	80162be <plan_buffer_line+0x9a>
            block->direction_bits.mask |= bit(idx);
 801630e:	7c23      	ldrb	r3, [r4, #16]
 8016310:	2201      	movs	r2, #1
 8016312:	40aa      	lsls	r2, r5
 8016314:	4313      	orrs	r3, r2
 8016316:	7423      	strb	r3, [r4, #16]
 8016318:	e7d3      	b.n	80162c2 <plan_buffer_line+0x9e>
    if(block->spindle.css) {
 801631a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801631c:	2b00      	cmp	r3, #0
 801631e:	d05d      	beq.n	80163dc <plan_buffer_line+0x1b8>
        if((pos = (float)position_steps[block->spindle.css->axis] / settings.axis[block->spindle.css->axis].steps_per_mm - block->spindle.css->tool_offset) > 0.0f) {
 8016320:	695a      	ldr	r2, [r3, #20]
 8016322:	a90c      	add	r1, sp, #48	@ 0x30
 8016324:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016328:	ed11 7a06 	vldr	s14, [r1, #-24]	@ 0xffffffe8
 801632c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016330:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016334:	4978      	ldr	r1, [pc, #480]	@ (8016518 <plan_buffer_line+0x2f4>)
 8016336:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801633a:	edd2 6a0c 	vldr	s13, [r2, #48]	@ 0x30
 801633e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016342:	ed93 7a04 	vldr	s14, [r3, #16]
 8016346:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801634a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801634e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016352:	dd13      	ble.n	801637c <plan_buffer_line+0x158>
            if((block->spindle.rpm = block->spindle.css->surface_speed / (pos * (float)(2.0f * M_PI))) > block->spindle.css->max_rpm)
 8016354:	edd3 6a00 	vldr	s13, [r3]
 8016358:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 801651c <plan_buffer_line+0x2f8>
 801635c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016360:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016364:	ed84 7a0e 	vstr	s14, [r4, #56]	@ 0x38
 8016368:	edd3 7a03 	vldr	s15, [r3, #12]
 801636c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016374:	dd04      	ble.n	8016380 <plan_buffer_line+0x15c>
                block->spindle.rpm = block->spindle.css->max_rpm;
 8016376:	edc4 7a0e 	vstr	s15, [r4, #56]	@ 0x38
 801637a:	e001      	b.n	8016380 <plan_buffer_line+0x15c>
            block->spindle.rpm = block->spindle.css->max_rpm;
 801637c:	68da      	ldr	r2, [r3, #12]
 801637e:	63a2      	str	r2, [r4, #56]	@ 0x38
        if((pos = target[block->spindle.css->axis] - block->spindle.css->tool_offset) > 0.0f) {
 8016380:	695a      	ldr	r2, [r3, #20]
 8016382:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 8016386:	edd7 7a00 	vldr	s15, [r7]
 801638a:	ed93 7a04 	vldr	s14, [r3, #16]
 801638e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016392:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801639a:	dd14      	ble.n	80163c6 <plan_buffer_line+0x1a2>
            if((block->spindle.css->target_rpm = block->spindle.css->surface_speed / (pos * (float)(2.0f * M_PI))) > block->spindle.css->max_rpm)
 801639c:	edd3 6a00 	vldr	s13, [r3]
 80163a0:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 801651c <plan_buffer_line+0x2f8>
 80163a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80163a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80163ac:	ed83 7a01 	vstr	s14, [r3, #4]
 80163b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80163b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80163b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80163ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163be:	dd04      	ble.n	80163ca <plan_buffer_line+0x1a6>
                block->spindle.css->target_rpm = block->spindle.css->max_rpm;
 80163c0:	edc3 7a01 	vstr	s15, [r3, #4]
 80163c4:	e001      	b.n	80163ca <plan_buffer_line+0x1a6>
            block->spindle.css->target_rpm = block->spindle.css->max_rpm;
 80163c6:	68da      	ldr	r2, [r3, #12]
 80163c8:	605a      	str	r2, [r3, #4]
        block->spindle.css->delta_rpm = block->spindle.css->target_rpm - block->spindle.rpm;
 80163ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80163cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80163d0:	ed94 7a0e 	vldr	s14, [r4, #56]	@ 0x38
 80163d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80163d8:	edc3 7a02 	vstr	s15, [r3, #8]
    pl_data->message = NULL;         // Indicate message is already queued for display on execution
 80163dc:	2300      	movs	r3, #0
 80163de:	6233      	str	r3, [r6, #32]
    pl_data->output_commands = NULL; // Indicate commands are already queued for execution
 80163e0:	6273      	str	r3, [r6, #36]	@ 0x24
    if(block->step_event_count == 0) {
 80163e2:	68e3      	ldr	r3, [r4, #12]
 80163e4:	b363      	cbz	r3, 8016440 <plan_buffer_line+0x21c>
    block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 80163e6:	a803      	add	r0, sp, #12
 80163e8:	f7ff f886 	bl	80154f8 <convert_delta_vector_to_unit_vector>
 80163ec:	eeb0 8a40 	vmov.f32	s16, s0
 80163f0:	ed84 0a0a 	vstr	s0, [r4, #40]	@ 0x28
    block->acceleration = limit_acceleration_by_axis_maximum(unit_vec);
 80163f4:	a803      	add	r0, sp, #12
 80163f6:	f7ff fc91 	bl	8015d1c <limit_acceleration_by_axis_maximum>
 80163fa:	ed84 0a09 	vstr	s0, [r4, #36]	@ 0x24
    block->rapid_rate = limit_max_rate_by_axis_maximum(unit_vec);
 80163fe:	a803      	add	r0, sp, #12
 8016400:	f7ff fcb4 	bl	8015d6c <limit_max_rate_by_axis_maximum>
 8016404:	ed84 0a0c 	vstr	s0, [r4, #48]	@ 0x30
    if (block->condition.rapid_motion)
 8016408:	7d23      	ldrb	r3, [r4, #20]
 801640a:	f013 0f01 	tst.w	r3, #1
 801640e:	d01c      	beq.n	801644a <plan_buffer_line+0x226>
        block->programmed_rate = block->rapid_rate;
 8016410:	ed84 0a0d 	vstr	s0, [r4, #52]	@ 0x34
    if ((block_buffer_head == block_buffer_tail) || (block->condition.system_motion)) {
 8016414:	4a3d      	ldr	r2, [pc, #244]	@ (801650c <plan_buffer_line+0x2e8>)
 8016416:	6811      	ldr	r1, [r2, #0]
 8016418:	4a41      	ldr	r2, [pc, #260]	@ (8016520 <plan_buffer_line+0x2fc>)
 801641a:	6812      	ldr	r2, [r2, #0]
 801641c:	4291      	cmp	r1, r2
 801641e:	d002      	beq.n	8016426 <plan_buffer_line+0x202>
 8016420:	f013 0f02 	tst.w	r3, #2
 8016424:	d01d      	beq.n	8016462 <plan_buffer_line+0x23e>
        block->entry_speed_sqr = 0.0f;
 8016426:	2300      	movs	r3, #0
 8016428:	61e3      	str	r3, [r4, #28]
        block->max_junction_speed_sqr = 0.0f; // Starting from rest. Enforce start from zero velocity.
 801642a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (!block->condition.system_motion) {
 801642c:	7d23      	ldrb	r3, [r4, #20]
 801642e:	f013 0f02 	tst.w	r3, #2
 8016432:	d07f      	beq.n	8016534 <plan_buffer_line+0x310>
    return true;
 8016434:	2001      	movs	r0, #1
}
 8016436:	b00c      	add	sp, #48	@ 0x30
 8016438:	ecbd 8b04 	vpop	{d8-d9}
 801643c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        plan_cleanup(block); // TODO: output message and execute output_commands?
 8016440:	4620      	mov	r0, r4
 8016442:	f7ff fcbb 	bl	8015dbc <plan_cleanup>
        return false;
 8016446:	2000      	movs	r0, #0
 8016448:	e7f5      	b.n	8016436 <plan_buffer_line+0x212>
        block->programmed_rate = pl_data->feed_rate;
 801644a:	edd6 7a00 	vldr	s15, [r6]
 801644e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
        if (block->condition.inverse_time)
 8016452:	f013 0f20 	tst.w	r3, #32
 8016456:	d0dd      	beq.n	8016414 <plan_buffer_line+0x1f0>
            block->programmed_rate *= block->millimeters;
 8016458:	ee28 8a27 	vmul.f32	s16, s16, s15
 801645c:	ed84 8a0d 	vstr	s16, [r4, #52]	@ 0x34
 8016460:	e7d8      	b.n	8016414 <plan_buffer_line+0x1f0>
        float junction_cos_theta = 0.0f;
 8016462:	ed9f 8a30 	vldr	s16, [pc, #192]	@ 8016524 <plan_buffer_line+0x300>
        idx = N_AXIS;
 8016466:	2303      	movs	r3, #3
            idx--;
 8016468:	3b01      	subs	r3, #1
            junction_cos_theta -= pl.previous_unit_vec[idx] * unit_vec[idx];
 801646a:	1c99      	adds	r1, r3, #2
 801646c:	4a29      	ldr	r2, [pc, #164]	@ (8016514 <plan_buffer_line+0x2f0>)
 801646e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016472:	ed92 7a01 	vldr	s14, [r2, #4]
 8016476:	aa0c      	add	r2, sp, #48	@ 0x30
 8016478:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801647c:	ed52 7a09 	vldr	s15, [r2, #-36]	@ 0xffffffdc
 8016480:	ee67 6a27 	vmul.f32	s13, s14, s15
 8016484:	ee38 8a66 	vsub.f32	s16, s16, s13
            junction_unit_vec[idx] = unit_vec[idx] - pl.previous_unit_vec[idx];
 8016488:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801648c:	ed42 7a0c 	vstr	s15, [r2, #-48]	@ 0xffffffd0
        } while(idx);
 8016490:	2b00      	cmp	r3, #0
 8016492:	d1e9      	bne.n	8016468 <plan_buffer_line+0x244>
        if (junction_cos_theta > 0.999999f)
 8016494:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8016528 <plan_buffer_line+0x304>
 8016498:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801649c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164a0:	dd02      	ble.n	80164a8 <plan_buffer_line+0x284>
            block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED * MINIMUM_JUNCTION_SPEED;
 80164a2:	2300      	movs	r3, #0
 80164a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80164a6:	e7c1      	b.n	801642c <plan_buffer_line+0x208>
        else if (junction_cos_theta < -0.999999f) {
 80164a8:	eddf 7a20 	vldr	s15, [pc, #128]	@ 801652c <plan_buffer_line+0x308>
 80164ac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80164b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164b4:	d502      	bpl.n	80164bc <plan_buffer_line+0x298>
            block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 80164b6:	4b1e      	ldr	r3, [pc, #120]	@ (8016530 <plan_buffer_line+0x30c>)
 80164b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80164ba:	e7b7      	b.n	801642c <plan_buffer_line+0x208>
            convert_delta_vector_to_unit_vector(junction_unit_vec);
 80164bc:	4668      	mov	r0, sp
 80164be:	f7ff f81b 	bl	80154f8 <convert_delta_vector_to_unit_vector>
            float junction_acceleration = limit_acceleration_by_axis_maximum(junction_unit_vec);
 80164c2:	4668      	mov	r0, sp
 80164c4:	f7ff fc2a 	bl	8015d1c <limit_acceleration_by_axis_maximum>
 80164c8:	eeb0 9a40 	vmov.f32	s18, s0
            float sin_theta_d2 = sqrtf(0.5f * (1.0f - junction_cos_theta)); // Trig half angle identity. Always positive.
 80164cc:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80164d0:	ee38 8ac8 	vsub.f32	s16, s17, s16
 80164d4:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80164d8:	ee28 0a00 	vmul.f32	s0, s16, s0
 80164dc:	f010 fd30 	bl	8026f40 <sqrtf>
            block->max_junction_speed_sqr = max(MINIMUM_JUNCTION_SPEED * MINIMUM_JUNCTION_SPEED,
 80164e0:	4b0d      	ldr	r3, [pc, #52]	@ (8016518 <plan_buffer_line+0x2f4>)
 80164e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80164e6:	ee67 7a89 	vmul.f32	s15, s15, s18
 80164ea:	ee67 7a80 	vmul.f32	s15, s15, s0
 80164ee:	ee78 8ac0 	vsub.f32	s17, s17, s0
 80164f2:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 80164f6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80164fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164fe:	d402      	bmi.n	8016506 <plan_buffer_line+0x2e2>
 8016500:	ed84 7a0b 	vstr	s14, [r4, #44]	@ 0x2c
 8016504:	e792      	b.n	801642c <plan_buffer_line+0x208>
 8016506:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8016524 <plan_buffer_line+0x300>
 801650a:	e7f9      	b.n	8016500 <plan_buffer_line+0x2dc>
 801650c:	20001790 	.word	0x20001790
 8016510:	20001514 	.word	0x20001514
 8016514:	2000176c 	.word	0x2000176c
 8016518:	20001bc4 	.word	0x20001bc4
 801651c:	40c90fdb 	.word	0x40c90fdb
 8016520:	20001794 	.word	0x20001794
 8016524:	00000000 	.word	0x00000000
 8016528:	3f7fffef 	.word	0x3f7fffef
 801652c:	bf7fffef 	.word	0xbf7fffef
 8016530:	7e967699 	.word	0x7e967699
        pl.previous_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), pl.previous_nominal_speed);
 8016534:	4620      	mov	r0, r4
 8016536:	f7ff fde1 	bl	80160fc <plan_compute_profile_nominal_speed>
 801653a:	4b1a      	ldr	r3, [pc, #104]	@ (80165a4 <plan_buffer_line+0x380>)
 801653c:	edd3 7a06 	vldr	s15, [r3, #24]
    block->max_entry_speed_sqr = nominal_speed > prev_nominal_speed ? (prev_nominal_speed * prev_nominal_speed) : (nominal_speed * nominal_speed);
 8016540:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016548:	dd29      	ble.n	801659e <plan_buffer_line+0x37a>
 801654a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801654e:	edc4 7a08 	vstr	s15, [r4, #32]
    if (block->max_entry_speed_sqr > block->max_junction_speed_sqr)
 8016552:	ed94 7a0b 	vldr	s14, [r4, #44]	@ 0x2c
 8016556:	eef4 7ac7 	vcmpe.f32	s15, s14
 801655a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801655e:	dd01      	ble.n	8016564 <plan_buffer_line+0x340>
        block->max_entry_speed_sqr = block->max_junction_speed_sqr;
 8016560:	ed84 7a08 	vstr	s14, [r4, #32]
        pl.previous_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), pl.previous_nominal_speed);
 8016564:	4b0f      	ldr	r3, [pc, #60]	@ (80165a4 <plan_buffer_line+0x380>)
 8016566:	ed83 0a06 	vstr	s0, [r3, #24]
        if(!block->condition.backlash_motion) {
 801656a:	7d23      	ldrb	r3, [r4, #20]
 801656c:	f013 0f08 	tst.w	r3, #8
 8016570:	d10b      	bne.n	801658a <plan_buffer_line+0x366>
            memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8016572:	4b0c      	ldr	r3, [pc, #48]	@ (80165a4 <plan_buffer_line+0x380>)
 8016574:	f103 040c 	add.w	r4, r3, #12
 8016578:	aa03      	add	r2, sp, #12
 801657a:	ca07      	ldmia	r2, {r0, r1, r2}
 801657c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8016580:	aa0c      	add	r2, sp, #48	@ 0x30
 8016582:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 8016586:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        block_buffer_head = next_buffer_head;
 801658a:	4b07      	ldr	r3, [pc, #28]	@ (80165a8 <plan_buffer_line+0x384>)
 801658c:	681a      	ldr	r2, [r3, #0]
 801658e:	4907      	ldr	r1, [pc, #28]	@ (80165ac <plan_buffer_line+0x388>)
 8016590:	600a      	str	r2, [r1, #0]
        next_buffer_head = block_buffer_head->next;
 8016592:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8016594:	601a      	str	r2, [r3, #0]
        planner_recalculate();
 8016596:	f7ff fc4b 	bl	8015e30 <planner_recalculate>
    return true;
 801659a:	2001      	movs	r0, #1
 801659c:	e74b      	b.n	8016436 <plan_buffer_line+0x212>
    block->max_entry_speed_sqr = nominal_speed > prev_nominal_speed ? (prev_nominal_speed * prev_nominal_speed) : (nominal_speed * nominal_speed);
 801659e:	ee60 7a00 	vmul.f32	s15, s0, s0
 80165a2:	e7d4      	b.n	801654e <plan_buffer_line+0x32a>
 80165a4:	2000176c 	.word	0x2000176c
 80165a8:	2000178c 	.word	0x2000178c
 80165ac:	20001790 	.word	0x20001790

080165b0 <plan_sync_position>:
    memcpy(pl.position, sys.position, sizeof(pl.position));
 80165b0:	4b02      	ldr	r3, [pc, #8]	@ (80165bc <plan_sync_position+0xc>)
 80165b2:	4a03      	ldr	r2, [pc, #12]	@ (80165c0 <plan_sync_position+0x10>)
 80165b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80165b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80165ba:	4770      	bx	lr
 80165bc:	2000176c 	.word	0x2000176c
 80165c0:	20001514 	.word	0x20001514

080165c4 <plan_get_block_buffer_available>:
    return (uint_fast16_t)(block_buffer_head >= block_buffer_tail
 80165c4:	4b0a      	ldr	r3, [pc, #40]	@ (80165f0 <plan_get_block_buffer_available+0x2c>)
 80165c6:	681a      	ldr	r2, [r3, #0]
 80165c8:	4b0a      	ldr	r3, [pc, #40]	@ (80165f4 <plan_get_block_buffer_available+0x30>)
 80165ca:	6818      	ldr	r0, [r3, #0]
 80165cc:	4282      	cmp	r2, r0
 80165ce:	d307      	bcc.n	80165e0 <plan_get_block_buffer_available+0x1c>
                            ? (block_buffer_size - (block_buffer_head - block_buffer_tail))
 80165d0:	4909      	ldr	r1, [pc, #36]	@ (80165f8 <plan_get_block_buffer_available+0x34>)
 80165d2:	6809      	ldr	r1, [r1, #0]
 80165d4:	1a12      	subs	r2, r2, r0
 80165d6:	10d2      	asrs	r2, r2, #3
    return (uint_fast16_t)(block_buffer_head >= block_buffer_tail
 80165d8:	4808      	ldr	r0, [pc, #32]	@ (80165fc <plan_get_block_buffer_available+0x38>)
 80165da:	fb00 1012 	mls	r0, r0, r2, r1
 80165de:	4770      	bx	lr
                            : ((block_buffer_tail - block_buffer_head) - 1));
 80165e0:	1a80      	subs	r0, r0, r2
 80165e2:	10c0      	asrs	r0, r0, #3
 80165e4:	4b05      	ldr	r3, [pc, #20]	@ (80165fc <plan_get_block_buffer_available+0x38>)
 80165e6:	fb03 f000 	mul.w	r0, r3, r0
 80165ea:	3801      	subs	r0, #1
}
 80165ec:	4770      	bx	lr
 80165ee:	bf00      	nop
 80165f0:	20001790 	.word	0x20001790
 80165f4:	20001794 	.word	0x20001794
 80165f8:	2000179c 	.word	0x2000179c
 80165fc:	ba2e8ba3 	.word	0xba2e8ba3

08016600 <plan_cycle_reinitialize>:
{
 8016600:	b508      	push	{r3, lr}
    st_update_plan_block_parameters();
 8016602:	f008 fff1 	bl	801f5e8 <st_update_plan_block_parameters>
    if((block_buffer_planned = block_buffer_tail) != block_buffer_head)
 8016606:	4b05      	ldr	r3, [pc, #20]	@ (801661c <plan_cycle_reinitialize+0x1c>)
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	4a05      	ldr	r2, [pc, #20]	@ (8016620 <plan_cycle_reinitialize+0x20>)
 801660c:	6013      	str	r3, [r2, #0]
 801660e:	4a05      	ldr	r2, [pc, #20]	@ (8016624 <plan_cycle_reinitialize+0x24>)
 8016610:	6812      	ldr	r2, [r2, #0]
 8016612:	4293      	cmp	r3, r2
 8016614:	d001      	beq.n	801661a <plan_cycle_reinitialize+0x1a>
        planner_recalculate();
 8016616:	f7ff fc0b 	bl	8015e30 <planner_recalculate>
}
 801661a:	bd08      	pop	{r3, pc}
 801661c:	20001794 	.word	0x20001794
 8016620:	20001788 	.word	0x20001788
 8016624:	20001790 	.word	0x20001790

08016628 <plan_feed_override>:
// Set feed overrides
void plan_feed_override (override_t feed_override, override_t rapid_override)
{
    bool feedrate_changed = false, rapidrate_changed = false;

    if(sys.override.control.feed_rate_disable)
 8016628:	4b1a      	ldr	r3, [pc, #104]	@ (8016694 <plan_feed_override+0x6c>)
 801662a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801662e:	f013 0f01 	tst.w	r3, #1
 8016632:	d12d      	bne.n	8016690 <plan_feed_override+0x68>
{
 8016634:	b570      	push	{r4, r5, r6, lr}
        return;

    feed_override = constrain(feed_override, MIN_FEED_RATE_OVERRIDE, MAX_FEED_RATE_OVERRIDE);
 8016636:	2809      	cmp	r0, #9
 8016638:	d904      	bls.n	8016644 <plan_feed_override+0x1c>
 801663a:	28c8      	cmp	r0, #200	@ 0xc8
 801663c:	bf28      	it	cs
 801663e:	20c8      	movcs	r0, #200	@ 0xc8
 8016640:	4604      	mov	r4, r0
 8016642:	e000      	b.n	8016646 <plan_feed_override+0x1e>
 8016644:	240a      	movs	r4, #10

    if((feedrate_changed = feed_override != sys.override.feed_rate) ||
 8016646:	4b13      	ldr	r3, [pc, #76]	@ (8016694 <plan_feed_override+0x6c>)
 8016648:	69dd      	ldr	r5, [r3, #28]
 801664a:	42a5      	cmp	r5, r4
 801664c:	d106      	bne.n	801665c <plan_feed_override+0x34>
         (rapidrate_changed = rapid_override != sys.override.rapid_rate)) {
 801664e:	6a1b      	ldr	r3, [r3, #32]
 8016650:	428b      	cmp	r3, r1
 8016652:	bf14      	ite	ne
 8016654:	2601      	movne	r6, #1
 8016656:	2600      	moveq	r6, #0
    if((feedrate_changed = feed_override != sys.override.feed_rate) ||
 8016658:	d101      	bne.n	801665e <plan_feed_override+0x36>
 801665a:	e015      	b.n	8016688 <plan_feed_override+0x60>
    bool feedrate_changed = false, rapidrate_changed = false;
 801665c:	2600      	movs	r6, #0
        sys.override.feed_rate = feed_override;
 801665e:	4b0d      	ldr	r3, [pc, #52]	@ (8016694 <plan_feed_override+0x6c>)
 8016660:	61dc      	str	r4, [r3, #28]
        sys.override.rapid_rate = rapid_override;
 8016662:	6219      	str	r1, [r3, #32]
        system_add_rt_report(Report_Overrides); // Set to report change immediately
 8016664:	2040      	movs	r0, #64	@ 0x40
 8016666:	f00b f80b 	bl	8021680 <system_add_rt_report>
        if(plan_update_velocity_profile_parameters())
 801666a:	f7ff fd99 	bl	80161a0 <plan_update_velocity_profile_parameters>
 801666e:	b960      	cbnz	r0, 801668a <plan_feed_override+0x62>
            plan_cycle_reinitialize();
        if(grbl.on_override_changed) {
 8016670:	4b09      	ldr	r3, [pc, #36]	@ (8016698 <plan_feed_override+0x70>)
 8016672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016674:	b143      	cbz	r3, 8016688 <plan_feed_override+0x60>
            if(feedrate_changed)
 8016676:	42a5      	cmp	r5, r4
 8016678:	d001      	beq.n	801667e <plan_feed_override+0x56>
                grbl.on_override_changed(OverrideChanged_FeedRate);
 801667a:	2000      	movs	r0, #0
 801667c:	4798      	blx	r3
            if(rapidrate_changed)
 801667e:	b11e      	cbz	r6, 8016688 <plan_feed_override+0x60>
                grbl.on_override_changed(OverrideChanged_RapidRate);
 8016680:	4b05      	ldr	r3, [pc, #20]	@ (8016698 <plan_feed_override+0x70>)
 8016682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016684:	2000      	movs	r0, #0
 8016686:	4798      	blx	r3
        }
    }
}
 8016688:	bd70      	pop	{r4, r5, r6, pc}
            plan_cycle_reinitialize();
 801668a:	f7ff ffb9 	bl	8016600 <plan_cycle_reinitialize>
 801668e:	e7ef      	b.n	8016670 <plan_feed_override+0x48>
 8016690:	4770      	bx	lr
 8016692:	bf00      	nop
 8016694:	2000148c 	.word	0x2000148c
 8016698:	20001394 	.word	0x20001394

0801669c <plan_data_init>:

void plan_data_init (plan_line_data_t *plan_data)
{
 801669c:	b510      	push	{r4, lr}
 801669e:	4604      	mov	r4, r0
    memset(plan_data, 0, sizeof(plan_line_data_t));
 80166a0:	2228      	movs	r2, #40	@ 0x28
 80166a2:	2100      	movs	r1, #0
 80166a4:	f00d feeb 	bl	802447e <memset>
    plan_data->offset_id = gc_state.offset_id;
 80166a8:	4b0c      	ldr	r3, [pc, #48]	@ (80166dc <plan_data_init+0x40>)
 80166aa:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 80166ae:	7662      	strb	r2, [r4, #25]
    plan_data->spindle.hal = gc_state.spindle.hal ? gc_state.spindle.hal : spindle_get(0);
 80166b0:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80166b2:	b178      	cbz	r0, 80166d4 <plan_data_init+0x38>
 80166b4:	6120      	str	r0, [r4, #16]
    plan_data->condition.target_validated = plan_data->condition.target_valid = sys.soft_limits.mask == 0;
 80166b6:	4b0a      	ldr	r3, [pc, #40]	@ (80166e0 <plan_data_init+0x44>)
 80166b8:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80166bc:	fab3 f383 	clz	r3, r3
 80166c0:	095b      	lsrs	r3, r3, #5
 80166c2:	7d62      	ldrb	r2, [r4, #21]
 80166c4:	f363 0241 	bfi	r2, r3, #1, #1
 80166c8:	7562      	strb	r2, [r4, #21]
 80166ca:	b2d2      	uxtb	r2, r2
 80166cc:	f363 0282 	bfi	r2, r3, #2, #1
 80166d0:	7562      	strb	r2, [r4, #21]
#ifdef KINEMATICS_API
    plan_data->rate_multiplier = 1.0f;
#endif
}
 80166d2:	bd10      	pop	{r4, pc}
    plan_data->spindle.hal = gc_state.spindle.hal ? gc_state.spindle.hal : spindle_get(0);
 80166d4:	f007 fb86 	bl	801dde4 <spindle_get>
 80166d8:	e7ec      	b.n	80166b4 <plan_data_init+0x18>
 80166da:	bf00      	nop
 80166dc:	20000ee4 	.word	0x20000ee4
 80166e0:	2000148c 	.word	0x2000148c

080166e4 <recheck_line>:

static bool recheck_line (char *line, line_flags_t *flags)
{
    bool keep_rt_commands = false, first_char = true;

    flags->value = 0;
 80166e4:	2300      	movs	r3, #0
 80166e6:	700b      	strb	r3, [r1, #0]

    if(*line != '\0') do {
 80166e8:	7803      	ldrb	r3, [r0, #0]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d075      	beq.n	80167da <recheck_line+0xf6>
{
 80166ee:	b410      	push	{r4}
 80166f0:	4602      	mov	r2, r0
    bool keep_rt_commands = false, first_char = true;
 80166f2:	2401      	movs	r4, #1
 80166f4:	2000      	movs	r0, #0
 80166f6:	e008      	b.n	801670a <recheck_line+0x26>

        switch(*line) {
 80166f8:	2b5b      	cmp	r3, #91	@ 0x5b
 80166fa:	d101      	bne.n	8016700 <recheck_line+0x1c>

            case '$':
            case '[':
                if(first_char)
 80166fc:	2c00      	cmp	r4, #0
 80166fe:	d16a      	bne.n	80167d6 <recheck_line+0xf2>
                break;
        }

        first_char = false;

    } while(*++line != '\0');
 8016700:	f812 3f01 	ldrb.w	r3, [r2, #1]!
        first_char = false;
 8016704:	2400      	movs	r4, #0
    } while(*++line != '\0');
 8016706:	2b00      	cmp	r3, #0
 8016708:	d069      	beq.n	80167de <recheck_line+0xfa>
        switch(*line) {
 801670a:	7813      	ldrb	r3, [r2, #0]
 801670c:	2b3b      	cmp	r3, #59	@ 0x3b
 801670e:	d8f3      	bhi.n	80166f8 <recheck_line+0x14>
 8016710:	2b24      	cmp	r3, #36	@ 0x24
 8016712:	d3f5      	bcc.n	8016700 <recheck_line+0x1c>
 8016714:	3b24      	subs	r3, #36	@ 0x24
 8016716:	2b17      	cmp	r3, #23
 8016718:	d8f2      	bhi.n	8016700 <recheck_line+0x1c>
 801671a:	f20f 0c08 	addw	ip, pc, #8
 801671e:	f85c f023 	ldr.w	pc, [ip, r3, lsl #2]
 8016722:	bf00      	nop
 8016724:	080166fd 	.word	0x080166fd
 8016728:	08016701 	.word	0x08016701
 801672c:	08016701 	.word	0x08016701
 8016730:	08016701 	.word	0x08016701
 8016734:	08016785 	.word	0x08016785
 8016738:	080167b1 	.word	0x080167b1
 801673c:	08016701 	.word	0x08016701
 8016740:	08016701 	.word	0x08016701
 8016744:	08016701 	.word	0x08016701
 8016748:	08016701 	.word	0x08016701
 801674c:	08016701 	.word	0x08016701
 8016750:	08016701 	.word	0x08016701
 8016754:	08016701 	.word	0x08016701
 8016758:	08016701 	.word	0x08016701
 801675c:	08016701 	.word	0x08016701
 8016760:	08016701 	.word	0x08016701
 8016764:	08016701 	.word	0x08016701
 8016768:	08016701 	.word	0x08016701
 801676c:	08016701 	.word	0x08016701
 8016770:	08016701 	.word	0x08016701
 8016774:	08016701 	.word	0x08016701
 8016778:	08016701 	.word	0x08016701
 801677c:	08016701 	.word	0x08016701
 8016780:	080167c5 	.word	0x080167c5
                if(!keep_rt_commands && (flags->comment_parentheses = !flags->comment_semicolon))
 8016784:	2800      	cmp	r0, #0
 8016786:	d1bb      	bne.n	8016700 <recheck_line+0x1c>
 8016788:	780c      	ldrb	r4, [r1, #0]
 801678a:	08a3      	lsrs	r3, r4, #2
 801678c:	f083 0301 	eor.w	r3, r3, #1
 8016790:	f003 0301 	and.w	r3, r3, #1
 8016794:	f363 0441 	bfi	r4, r3, #1, #1
 8016798:	700c      	strb	r4, [r1, #0]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d0b0      	beq.n	8016700 <recheck_line+0x1c>
                    keep_rt_commands = !hal.driver_cap.no_gcode_message_handling; // Suspend real-time processing of printable command characters.
 801679e:	4b11      	ldr	r3, [pc, #68]	@ (80167e4 <recheck_line+0x100>)
 80167a0:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 80167a4:	f013 0f04 	tst.w	r3, #4
 80167a8:	bf0c      	ite	eq
 80167aa:	2001      	moveq	r0, #1
 80167ac:	2000      	movne	r0, #0
 80167ae:	e7a7      	b.n	8016700 <recheck_line+0x1c>
                if(!flags->comment_semicolon)
 80167b0:	780b      	ldrb	r3, [r1, #0]
 80167b2:	f013 0f04 	tst.w	r3, #4
 80167b6:	d1a3      	bne.n	8016700 <recheck_line+0x1c>
                    flags->comment_parentheses = keep_rt_commands = false;
 80167b8:	780b      	ldrb	r3, [r1, #0]
 80167ba:	f36f 0341 	bfc	r3, #1, #1
 80167be:	700b      	strb	r3, [r1, #0]
 80167c0:	2000      	movs	r0, #0
 80167c2:	e79d      	b.n	8016700 <recheck_line+0x1c>
                if(!flags->comment_parentheses) {
 80167c4:	780b      	ldrb	r3, [r1, #0]
 80167c6:	f013 0f02 	tst.w	r3, #2
 80167ca:	d199      	bne.n	8016700 <recheck_line+0x1c>
                    flags->comment_semicolon = On;
 80167cc:	f043 0304 	orr.w	r3, r3, #4
 80167d0:	700b      	strb	r3, [r1, #0]
                    keep_rt_commands = false;
 80167d2:	2000      	movs	r0, #0
 80167d4:	e794      	b.n	8016700 <recheck_line+0x1c>
                    keep_rt_commands = true;
 80167d6:	4620      	mov	r0, r4
 80167d8:	e792      	b.n	8016700 <recheck_line+0x1c>
    bool keep_rt_commands = false, first_char = true;
 80167da:	2000      	movs	r0, #0

    return keep_rt_commands;
}
 80167dc:	4770      	bx	lr
 80167de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167e2:	4770      	bx	lr
 80167e4:	200011ac 	.word	0x200011ac

080167e8 <protocol_execute_rt_commands>:
    return protocol_enqueue_foreground_task(fn, (void *)&dummy_data);
}

// Execute enqueued functions.
static void protocol_execute_rt_commands (sys_state_t state)
{
 80167e8:	b538      	push	{r3, r4, r5, lr}
    while(realtime_queue.tail != realtime_queue.head) {
 80167ea:	e00d      	b.n	8016808 <protocol_execute_rt_commands+0x20>
        uint_fast8_t bptr = realtime_queue.tail;
        if(realtime_queue.task[bptr].task.fn) {
            if(realtime_queue.task[bptr].data == (void *)&dummy_data) {
                on_execute_realtime_ptr call = realtime_queue.task[bptr].task.fn_deprecated;
                realtime_queue.task[bptr].task.fn_deprecated = NULL;
 80167ec:	1c62      	adds	r2, r4, #1
 80167ee:	4b17      	ldr	r3, [pc, #92]	@ (801684c <protocol_execute_rt_commands+0x64>)
 80167f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80167f4:	2200      	movs	r2, #0
 80167f6:	605a      	str	r2, [r3, #4]
                call(state_get());
 80167f8:	f007 ff84 	bl	801e704 <state_get>
 80167fc:	47a8      	blx	r5
                foreground_task_ptr call = realtime_queue.task[bptr].task.fn;
                realtime_queue.task[bptr].task.fn = NULL;
                call(realtime_queue.task[bptr].data);
            }
        }
        realtime_queue.tail = (bptr + 1) & (RT_QUEUE_SIZE - 1);
 80167fe:	3401      	adds	r4, #1
 8016800:	f004 040f 	and.w	r4, r4, #15
 8016804:	4b11      	ldr	r3, [pc, #68]	@ (801684c <protocol_execute_rt_commands+0x64>)
 8016806:	605c      	str	r4, [r3, #4]
    while(realtime_queue.tail != realtime_queue.head) {
 8016808:	4b10      	ldr	r3, [pc, #64]	@ (801684c <protocol_execute_rt_commands+0x64>)
 801680a:	685a      	ldr	r2, [r3, #4]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	429a      	cmp	r2, r3
 8016810:	d016      	beq.n	8016840 <protocol_execute_rt_commands+0x58>
        uint_fast8_t bptr = realtime_queue.tail;
 8016812:	4b0e      	ldr	r3, [pc, #56]	@ (801684c <protocol_execute_rt_commands+0x64>)
 8016814:	685c      	ldr	r4, [r3, #4]
        if(realtime_queue.task[bptr].task.fn) {
 8016816:	1c62      	adds	r2, r4, #1
 8016818:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801681c:	685d      	ldr	r5, [r3, #4]
 801681e:	2d00      	cmp	r5, #0
 8016820:	d0ed      	beq.n	80167fe <protocol_execute_rt_commands+0x16>
            if(realtime_queue.task[bptr].data == (void *)&dummy_data) {
 8016822:	4613      	mov	r3, r2
 8016824:	4a09      	ldr	r2, [pc, #36]	@ (801684c <protocol_execute_rt_commands+0x64>)
 8016826:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801682a:	4b09      	ldr	r3, [pc, #36]	@ (8016850 <protocol_execute_rt_commands+0x68>)
 801682c:	4298      	cmp	r0, r3
 801682e:	d0dd      	beq.n	80167ec <protocol_execute_rt_commands+0x4>
                realtime_queue.task[bptr].task.fn = NULL;
 8016830:	1c62      	adds	r2, r4, #1
 8016832:	4b06      	ldr	r3, [pc, #24]	@ (801684c <protocol_execute_rt_commands+0x64>)
 8016834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016838:	2200      	movs	r2, #0
 801683a:	605a      	str	r2, [r3, #4]
                call(realtime_queue.task[bptr].data);
 801683c:	47a8      	blx	r5
 801683e:	e7de      	b.n	80167fe <protocol_execute_rt_commands+0x16>
    }

    if(!sys.driver_started)
 8016840:	4b04      	ldr	r3, [pc, #16]	@ (8016854 <protocol_execute_rt_commands+0x6c>)
 8016842:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8016846:	b903      	cbnz	r3, 801684a <protocol_execute_rt_commands+0x62>
        while(true);
 8016848:	e7fe      	b.n	8016848 <protocol_execute_rt_commands+0x60>
}
 801684a:	bd38      	pop	{r3, r4, r5, pc}
 801684c:	200017a8 	.word	0x200017a8
 8016850:	0802b2f4 	.word	0x0802b2f4
 8016854:	2000148c 	.word	0x2000148c

08016858 <protocol_on_execute_delay>:
{
 8016858:	b510      	push	{r4, lr}
 801685a:	4604      	mov	r4, r0
    if(sys.rt_exec_state & EXEC_RT_COMMAND) {
 801685c:	4b09      	ldr	r3, [pc, #36]	@ (8016884 <protocol_on_execute_delay+0x2c>)
 801685e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016860:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8016864:	d008      	beq.n	8016878 <protocol_on_execute_delay+0x20>
        system_clear_exec_state_flag(EXEC_RT_COMMAND);
 8016866:	4b08      	ldr	r3, [pc, #32]	@ (8016888 <protocol_on_execute_delay+0x30>)
 8016868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801686a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801686e:	4807      	ldr	r0, [pc, #28]	@ (801688c <protocol_on_execute_delay+0x34>)
 8016870:	4798      	blx	r3
        protocol_execute_rt_commands(0);
 8016872:	2000      	movs	r0, #0
 8016874:	f7ff ffb8 	bl	80167e8 <protocol_execute_rt_commands>
    on_execute_delay(state);
 8016878:	4b05      	ldr	r3, [pc, #20]	@ (8016890 <protocol_on_execute_delay+0x38>)
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	4620      	mov	r0, r4
 801687e:	4798      	blx	r3
}
 8016880:	bd10      	pop	{r4, pc}
 8016882:	bf00      	nop
 8016884:	2000148c 	.word	0x2000148c
 8016888:	200011ac 	.word	0x200011ac
 801688c:	200014d4 	.word	0x200014d4
 8016890:	200017a4 	.word	0x200017a4

08016894 <protocol_poll_cmd>:
{
 8016894:	b508      	push	{r3, lr}
    if((c = hal.stream.read()) != SERIAL_NO_DATA) {
 8016896:	4b2b      	ldr	r3, [pc, #172]	@ (8016944 <protocol_poll_cmd+0xb0>)
 8016898:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 801689c:	4798      	blx	r3
 801689e:	f1b0 3fff 	cmp.w	r0, #4294967295
 80168a2:	d04b      	beq.n	801693c <protocol_poll_cmd+0xa8>
        if ((c == '\n') || (c == '\r')) { // End of line reached
 80168a4:	280a      	cmp	r0, #10
 80168a6:	d014      	beq.n	80168d2 <protocol_poll_cmd+0x3e>
 80168a8:	280d      	cmp	r0, #13
 80168aa:	d012      	beq.n	80168d2 <protocol_poll_cmd+0x3e>
        } else if(c == ASCII_DEL || c == ASCII_BS) {
 80168ac:	287f      	cmp	r0, #127	@ 0x7f
 80168ae:	d032      	beq.n	8016916 <protocol_poll_cmd+0x82>
 80168b0:	2808      	cmp	r0, #8
 80168b2:	d030      	beq.n	8016916 <protocol_poll_cmd+0x82>
        } else if(char_counter == 0 ? c != ' ' : char_counter < (LINE_BUFFER_SIZE - 1))
 80168b4:	4b24      	ldr	r3, [pc, #144]	@ (8016948 <protocol_poll_cmd+0xb4>)
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d137      	bne.n	801692c <protocol_poll_cmd+0x98>
 80168bc:	f1b0 0220 	subs.w	r2, r0, #32
 80168c0:	bf18      	it	ne
 80168c2:	2201      	movne	r2, #1
 80168c4:	b1d2      	cbz	r2, 80168fc <protocol_poll_cmd+0x68>
            line[char_counter++] = c;
 80168c6:	1c59      	adds	r1, r3, #1
 80168c8:	4a1f      	ldr	r2, [pc, #124]	@ (8016948 <protocol_poll_cmd+0xb4>)
 80168ca:	6011      	str	r1, [r2, #0]
 80168cc:	4a1f      	ldr	r2, [pc, #124]	@ (801694c <protocol_poll_cmd+0xb8>)
 80168ce:	54d0      	strb	r0, [r2, r3]
 80168d0:	e014      	b.n	80168fc <protocol_poll_cmd+0x68>
            line[char_counter] = '\0';
 80168d2:	4b1d      	ldr	r3, [pc, #116]	@ (8016948 <protocol_poll_cmd+0xb4>)
 80168d4:	681a      	ldr	r2, [r3, #0]
 80168d6:	4b1d      	ldr	r3, [pc, #116]	@ (801694c <protocol_poll_cmd+0xb8>)
 80168d8:	2100      	movs	r1, #0
 80168da:	5499      	strb	r1, [r3, r2]
            gc_state.last_error = *line == '\0' ? Status_OK : (*line == '$' ? system_execute_line(line) : Status_SystemGClock);
 80168dc:	7818      	ldrb	r0, [r3, #0]
 80168de:	b110      	cbz	r0, 80168e6 <protocol_poll_cmd+0x52>
 80168e0:	2824      	cmp	r0, #36	@ 0x24
 80168e2:	d014      	beq.n	801690e <protocol_poll_cmd+0x7a>
 80168e4:	2009      	movs	r0, #9
 80168e6:	4b1a      	ldr	r3, [pc, #104]	@ (8016950 <protocol_poll_cmd+0xbc>)
 80168e8:	f883 0081 	strb.w	r0, [r3, #129]	@ 0x81
            char_counter = 0;
 80168ec:	2300      	movs	r3, #0
 80168ee:	4a16      	ldr	r2, [pc, #88]	@ (8016948 <protocol_poll_cmd+0xb4>)
 80168f0:	6013      	str	r3, [r2, #0]
            *line = '\0';
 80168f2:	4a16      	ldr	r2, [pc, #88]	@ (801694c <protocol_poll_cmd+0xb8>)
 80168f4:	7013      	strb	r3, [r2, #0]
            grbl.report.status_message(gc_state.last_error);
 80168f6:	4b17      	ldr	r3, [pc, #92]	@ (8016954 <protocol_poll_cmd+0xc0>)
 80168f8:	689b      	ldr	r3, [r3, #8]
 80168fa:	4798      	blx	r3
        keep_rt_commands = char_counter > 0 && *line == '$';
 80168fc:	4b12      	ldr	r3, [pc, #72]	@ (8016948 <protocol_poll_cmd+0xb4>)
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	b1cb      	cbz	r3, 8016936 <protocol_poll_cmd+0xa2>
 8016902:	4b12      	ldr	r3, [pc, #72]	@ (801694c <protocol_poll_cmd+0xb8>)
 8016904:	781b      	ldrb	r3, [r3, #0]
 8016906:	2b24      	cmp	r3, #36	@ 0x24
 8016908:	d019      	beq.n	801693e <protocol_poll_cmd+0xaa>
 801690a:	2200      	movs	r2, #0
 801690c:	e014      	b.n	8016938 <protocol_poll_cmd+0xa4>
            gc_state.last_error = *line == '\0' ? Status_OK : (*line == '$' ? system_execute_line(line) : Status_SystemGClock);
 801690e:	4618      	mov	r0, r3
 8016910:	f00a fcfc 	bl	802130c <system_execute_line>
 8016914:	e7e7      	b.n	80168e6 <protocol_poll_cmd+0x52>
            if(char_counter)
 8016916:	4b0c      	ldr	r3, [pc, #48]	@ (8016948 <protocol_poll_cmd+0xb4>)
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d0ee      	beq.n	80168fc <protocol_poll_cmd+0x68>
                line[--char_counter] = '\0';
 801691e:	3b01      	subs	r3, #1
 8016920:	4a09      	ldr	r2, [pc, #36]	@ (8016948 <protocol_poll_cmd+0xb4>)
 8016922:	6013      	str	r3, [r2, #0]
 8016924:	4a09      	ldr	r2, [pc, #36]	@ (801694c <protocol_poll_cmd+0xb8>)
 8016926:	2100      	movs	r1, #0
 8016928:	54d1      	strb	r1, [r2, r3]
 801692a:	e7e7      	b.n	80168fc <protocol_poll_cmd+0x68>
        } else if(char_counter == 0 ? c != ' ' : char_counter < (LINE_BUFFER_SIZE - 1))
 801692c:	2bff      	cmp	r3, #255	@ 0xff
 801692e:	bf8c      	ite	hi
 8016930:	2200      	movhi	r2, #0
 8016932:	2201      	movls	r2, #1
 8016934:	e7c6      	b.n	80168c4 <protocol_poll_cmd+0x30>
        keep_rt_commands = char_counter > 0 && *line == '$';
 8016936:	2200      	movs	r2, #0
 8016938:	4b07      	ldr	r3, [pc, #28]	@ (8016958 <protocol_poll_cmd+0xc4>)
 801693a:	701a      	strb	r2, [r3, #0]
}
 801693c:	bd08      	pop	{r3, pc}
        keep_rt_commands = char_counter > 0 && *line == '$';
 801693e:	2201      	movs	r2, #1
 8016940:	e7fa      	b.n	8016938 <protocol_poll_cmd+0xa4>
 8016942:	bf00      	nop
 8016944:	200011ac 	.word	0x200011ac
 8016948:	20001a3c 	.word	0x20001a3c
 801694c:	20001938 	.word	0x20001938
 8016950:	20000ee4 	.word	0x20000ee4
 8016954:	20001394 	.word	0x20001394
 8016958:	20001830 	.word	0x20001830

0801695c <protocol_enqueue_gcode>:
    bool ok = xcommand[0] == '\0' &&
 801695c:	4b16      	ldr	r3, [pc, #88]	@ (80169b8 <protocol_enqueue_gcode+0x5c>)
 801695e:	781b      	ldrb	r3, [r3, #0]
               (state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_JOG|STATE_TOOL_CHANGE))) &&
 8016960:	b10b      	cbz	r3, 8016966 <protocol_enqueue_gcode+0xa>
    bool ok = xcommand[0] == '\0' &&
 8016962:	2000      	movs	r0, #0
}
 8016964:	4770      	bx	lr
{
 8016966:	b510      	push	{r4, lr}
 8016968:	4604      	mov	r4, r0
               (state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_JOG|STATE_TOOL_CHANGE))) &&
 801696a:	f007 fecb 	bl	801e704 <state_get>
    bool ok = xcommand[0] == '\0' &&
 801696e:	b9b8      	cbnz	r0, 80169a0 <protocol_enqueue_gcode+0x44>
                 bit_isfalse(sys.rt_exec_state, EXEC_MOTION_CANCEL);
 8016970:	4b12      	ldr	r3, [pc, #72]	@ (80169bc <protocol_enqueue_gcode+0x60>)
 8016972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
               (state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_JOG|STATE_TOOL_CHANGE))) &&
 8016974:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016978:	d11a      	bne.n	80169b0 <protocol_enqueue_gcode+0x54>
    if(ok && gc_state.file_run)
 801697a:	4b11      	ldr	r3, [pc, #68]	@ (80169c0 <protocol_enqueue_gcode+0x64>)
 801697c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8016980:	b143      	cbz	r3, 8016994 <protocol_enqueue_gcode+0x38>
        ok = gc_state.modal.program_flow != ProgramFlow_Running || strncmp((char *)gcode, "$J=", 3);
 8016982:	4b0f      	ldr	r3, [pc, #60]	@ (80169c0 <protocol_enqueue_gcode+0x64>)
 8016984:	7e1b      	ldrb	r3, [r3, #24]
 8016986:	b92b      	cbnz	r3, 8016994 <protocol_enqueue_gcode+0x38>
 8016988:	2203      	movs	r2, #3
 801698a:	490e      	ldr	r1, [pc, #56]	@ (80169c4 <protocol_enqueue_gcode+0x68>)
 801698c:	4620      	mov	r0, r4
 801698e:	f00d fd9a 	bl	80244c6 <strncmp>
 8016992:	b178      	cbz	r0, 80169b4 <protocol_enqueue_gcode+0x58>
        strcpy(xcommand, gcode);
 8016994:	4621      	mov	r1, r4
 8016996:	4808      	ldr	r0, [pc, #32]	@ (80169b8 <protocol_enqueue_gcode+0x5c>)
 8016998:	f00d fec9 	bl	802472e <strcpy>
 801699c:	2001      	movs	r0, #1
 801699e:	e008      	b.n	80169b2 <protocol_enqueue_gcode+0x56>
               (state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_JOG|STATE_TOOL_CHANGE))) &&
 80169a0:	f007 feb0 	bl	801e704 <state_get>
 80169a4:	f240 2321 	movw	r3, #545	@ 0x221
 80169a8:	4218      	tst	r0, r3
 80169aa:	d1e1      	bne.n	8016970 <protocol_enqueue_gcode+0x14>
    bool ok = xcommand[0] == '\0' &&
 80169ac:	2000      	movs	r0, #0
 80169ae:	e000      	b.n	80169b2 <protocol_enqueue_gcode+0x56>
 80169b0:	2000      	movs	r0, #0
}
 80169b2:	bd10      	pop	{r4, pc}
        ok = gc_state.modal.program_flow != ProgramFlow_Running || strncmp((char *)gcode, "$J=", 3);
 80169b4:	2000      	movs	r0, #0
 80169b6:	e7fc      	b.n	80169b2 <protocol_enqueue_gcode+0x56>
 80169b8:	20001834 	.word	0x20001834
 80169bc:	2000148c 	.word	0x2000148c
 80169c0:	20000ee4 	.word	0x20000ee4
 80169c4:	0802b2f0 	.word	0x0802b2f0

080169c8 <protocol_auto_cycle_start>:
{
 80169c8:	b508      	push	{r3, lr}
    if (plan_get_current_block() != NULL) // Check if there are any blocks in the buffer.
 80169ca:	f7ff fb67 	bl	801609c <plan_get_current_block>
 80169ce:	b120      	cbz	r0, 80169da <protocol_auto_cycle_start+0x12>
        system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 80169d0:	4b02      	ldr	r3, [pc, #8]	@ (80169dc <protocol_auto_cycle_start+0x14>)
 80169d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80169d4:	2102      	movs	r1, #2
 80169d6:	4802      	ldr	r0, [pc, #8]	@ (80169e0 <protocol_auto_cycle_start+0x18>)
 80169d8:	4798      	blx	r3
}
 80169da:	bd08      	pop	{r3, pc}
 80169dc:	200011ac 	.word	0x200011ac
 80169e0:	200014d4 	.word	0x200014d4

080169e4 <protocol_exec_rt_system>:
{
 80169e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (sys.rt_exec_alarm && (rt_exec = system_clear_exec_alarm())) { // Enter only if any bit flag is true
 80169e6:	4ba3      	ldr	r3, [pc, #652]	@ (8016c74 <protocol_exec_rt_system+0x290>)
 80169e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d078      	beq.n	8016ae0 <protocol_exec_rt_system+0xfc>
 80169ee:	4ba2      	ldr	r3, [pc, #648]	@ (8016c78 <protocol_exec_rt_system+0x294>)
 80169f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80169f2:	2100      	movs	r1, #0
 80169f4:	48a1      	ldr	r0, [pc, #644]	@ (8016c7c <protocol_exec_rt_system+0x298>)
 80169f6:	4798      	blx	r3
 80169f8:	4604      	mov	r4, r0
 80169fa:	2800      	cmp	r0, #0
 80169fc:	f000 8137 	beq.w	8016c6e <protocol_exec_rt_system+0x28a>
        if((sys.reset_pending = !!(sys.rt_exec_state & EXEC_RESET))) {
 8016a00:	4b9c      	ldr	r3, [pc, #624]	@ (8016c74 <protocol_exec_rt_system+0x290>)
 8016a02:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
 8016a04:	f3c5 1540 	ubfx	r5, r5, #5, #1
 8016a08:	711d      	strb	r5, [r3, #4]
 8016a0a:	b995      	cbnz	r5, 8016a32 <protocol_exec_rt_system+0x4e>
        system_raise_alarm((alarm_code_t)rt_exec);
 8016a0c:	b2e6      	uxtb	r6, r4
 8016a0e:	4630      	mov	r0, r6
 8016a10:	f00a fde8 	bl	80215e4 <system_raise_alarm>
        if(killed) // Tell driver/plugins about reset.
 8016a14:	b11d      	cbz	r5, 8016a1e <protocol_exec_rt_system+0x3a>
            hal.driver_reset();
 8016a16:	4b98      	ldr	r3, [pc, #608]	@ (8016c78 <protocol_exec_rt_system+0x294>)
 8016a18:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8016a1c:	4798      	blx	r3
        if((sys.blocking_event = (alarm_code_t)rt_exec == Alarm_HardLimit ||
 8016a1e:	1e73      	subs	r3, r6, #1
 8016a20:	b2db      	uxtb	r3, r3
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 8016a22:	2b01      	cmp	r3, #1
 8016a24:	d90f      	bls.n	8016a46 <protocol_exec_rt_system+0x62>
                                  (alarm_code_t)rt_exec == Alarm_SoftLimit ||
 8016a26:	2e0a      	cmp	r6, #10
 8016a28:	d022      	beq.n	8016a70 <protocol_exec_rt_system+0x8c>
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 8016a2a:	2e11      	cmp	r6, #17
 8016a2c:	d009      	beq.n	8016a42 <protocol_exec_rt_system+0x5e>
 8016a2e:	2300      	movs	r3, #0
 8016a30:	e00a      	b.n	8016a48 <protocol_exec_rt_system+0x64>
            spindle_all_off();
 8016a32:	f007 fbe3 	bl	801e1fc <spindle_all_off>
            hal.coolant.set_state((coolant_state_t){0});
 8016a36:	4b90      	ldr	r3, [pc, #576]	@ (8016c78 <protocol_exec_rt_system+0x294>)
 8016a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a3a:	f04f 0000 	mov.w	r0, #0
 8016a3e:	4798      	blx	r3
 8016a40:	e7e4      	b.n	8016a0c <protocol_exec_rt_system+0x28>
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 8016a42:	2301      	movs	r3, #1
 8016a44:	e000      	b.n	8016a48 <protocol_exec_rt_system+0x64>
 8016a46:	2301      	movs	r3, #1
        if((sys.blocking_event = (alarm_code_t)rt_exec == Alarm_HardLimit ||
 8016a48:	4a8a      	ldr	r2, [pc, #552]	@ (8016c74 <protocol_exec_rt_system+0x290>)
 8016a4a:	7153      	strb	r3, [r2, #5]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d048      	beq.n	8016ae2 <protocol_exec_rt_system+0xfe>
            system_set_exec_alarm(rt_exec);
 8016a50:	4b89      	ldr	r3, [pc, #548]	@ (8016c78 <protocol_exec_rt_system+0x294>)
 8016a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016a54:	4621      	mov	r1, r4
 8016a56:	f102 004c 	add.w	r0, r2, #76	@ 0x4c
 8016a5a:	4798      	blx	r3
            switch((alarm_code_t)rt_exec) {
 8016a5c:	b2e4      	uxtb	r4, r4
 8016a5e:	2c0a      	cmp	r4, #10
 8016a60:	d008      	beq.n	8016a74 <protocol_exec_rt_system+0x90>
 8016a62:	2c11      	cmp	r4, #17
 8016a64:	d018      	beq.n	8016a98 <protocol_exec_rt_system+0xb4>
                    grbl.report.feedback_message(Message_CriticalEvent);
 8016a66:	4b86      	ldr	r3, [pc, #536]	@ (8016c80 <protocol_exec_rt_system+0x29c>)
 8016a68:	68db      	ldr	r3, [r3, #12]
 8016a6a:	2001      	movs	r0, #1
 8016a6c:	4798      	blx	r3
                    break;
 8016a6e:	e005      	b.n	8016a7c <protocol_exec_rt_system+0x98>
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 8016a70:	2301      	movs	r3, #1
 8016a72:	e7e9      	b.n	8016a48 <protocol_exec_rt_system+0x64>
                    grbl.report.feedback_message(Message_EStop);
 8016a74:	4b82      	ldr	r3, [pc, #520]	@ (8016c80 <protocol_exec_rt_system+0x29c>)
 8016a76:	68db      	ldr	r3, [r3, #12]
 8016a78:	200c      	movs	r0, #12
 8016a7a:	4798      	blx	r3
            system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8016a7c:	4c7e      	ldr	r4, [pc, #504]	@ (8016c78 <protocol_exec_rt_system+0x294>)
 8016a7e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016a80:	2120      	movs	r1, #32
 8016a82:	4880      	ldr	r0, [pc, #512]	@ (8016c84 <protocol_exec_rt_system+0x2a0>)
 8016a84:	4798      	blx	r3
            *line = '\0';
 8016a86:	2300      	movs	r3, #0
 8016a88:	4a7f      	ldr	r2, [pc, #508]	@ (8016c88 <protocol_exec_rt_system+0x2a4>)
 8016a8a:	7013      	strb	r3, [r2, #0]
            char_counter = 0;
 8016a8c:	4a7f      	ldr	r2, [pc, #508]	@ (8016c8c <protocol_exec_rt_system+0x2a8>)
 8016a8e:	6013      	str	r3, [r2, #0]
            hal.stream.reset_read_buffer();
 8016a90:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 8016a94:	4798      	blx	r3
            while (bit_isfalse(sys.rt_exec_state, EXEC_RESET)) {
 8016a96:	e00b      	b.n	8016ab0 <protocol_exec_rt_system+0xcc>
                    grbl.report.feedback_message(Message_MotorFault);
 8016a98:	4b79      	ldr	r3, [pc, #484]	@ (8016c80 <protocol_exec_rt_system+0x29c>)
 8016a9a:	68db      	ldr	r3, [r3, #12]
 8016a9c:	2010      	movs	r0, #16
 8016a9e:	4798      	blx	r3
                    break;
 8016aa0:	e7ec      	b.n	8016a7c <protocol_exec_rt_system+0x98>
                protocol_poll_cmd();
 8016aa2:	f7ff fef7 	bl	8016894 <protocol_poll_cmd>
                grbl.on_execute_realtime(STATE_ESTOP);
 8016aa6:	4b76      	ldr	r3, [pc, #472]	@ (8016c80 <protocol_exec_rt_system+0x29c>)
 8016aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016aaa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8016aae:	4798      	blx	r3
            while (bit_isfalse(sys.rt_exec_state, EXEC_RESET)) {
 8016ab0:	4b70      	ldr	r3, [pc, #448]	@ (8016c74 <protocol_exec_rt_system+0x290>)
 8016ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016ab4:	f013 0f20 	tst.w	r3, #32
 8016ab8:	d10c      	bne.n	8016ad4 <protocol_exec_rt_system+0xf0>
                if(bit_istrue(sys.rt_exec_state, EXEC_STATUS_REPORT)) {
 8016aba:	4b6e      	ldr	r3, [pc, #440]	@ (8016c74 <protocol_exec_rt_system+0x290>)
 8016abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016abe:	f013 0f01 	tst.w	r3, #1
 8016ac2:	d0ee      	beq.n	8016aa2 <protocol_exec_rt_system+0xbe>
                    system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8016ac4:	4b6c      	ldr	r3, [pc, #432]	@ (8016c78 <protocol_exec_rt_system+0x294>)
 8016ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016ac8:	2101      	movs	r1, #1
 8016aca:	486e      	ldr	r0, [pc, #440]	@ (8016c84 <protocol_exec_rt_system+0x2a0>)
 8016acc:	4798      	blx	r3
                    report_realtime_status();
 8016ace:	f003 fb29 	bl	801a124 <report_realtime_status>
 8016ad2:	e7e6      	b.n	8016aa2 <protocol_exec_rt_system+0xbe>
            system_clear_exec_alarm(); // Clear alarm
 8016ad4:	4b68      	ldr	r3, [pc, #416]	@ (8016c78 <protocol_exec_rt_system+0x294>)
 8016ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016ad8:	2100      	movs	r1, #0
 8016ada:	4868      	ldr	r0, [pc, #416]	@ (8016c7c <protocol_exec_rt_system+0x298>)
 8016adc:	4798      	blx	r3
 8016ade:	e000      	b.n	8016ae2 <protocol_exec_rt_system+0xfe>
    bool killed = false;
 8016ae0:	2500      	movs	r5, #0
    if (sys.rt_exec_state && (rt_exec = system_clear_exec_states())) { // Get and clear volatile sys.rt_exec_state atomically.
 8016ae2:	4b64      	ldr	r3, [pc, #400]	@ (8016c74 <protocol_exec_rt_system+0x290>)
 8016ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	f000 8095 	beq.w	8016c16 <protocol_exec_rt_system+0x232>
 8016aec:	4b62      	ldr	r3, [pc, #392]	@ (8016c78 <protocol_exec_rt_system+0x294>)
 8016aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016af0:	2100      	movs	r1, #0
 8016af2:	4864      	ldr	r0, [pc, #400]	@ (8016c84 <protocol_exec_rt_system+0x2a0>)
 8016af4:	4798      	blx	r3
 8016af6:	4604      	mov	r4, r0
 8016af8:	2800      	cmp	r0, #0
 8016afa:	f000 808c 	beq.w	8016c16 <protocol_exec_rt_system+0x232>
        if((sys.reset_pending = !!(rt_exec & EXEC_RESET))) {
 8016afe:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8016b02:	4a5c      	ldr	r2, [pc, #368]	@ (8016c74 <protocol_exec_rt_system+0x290>)
 8016b04:	7113      	strb	r3, [r2, #4]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	f040 80c8 	bne.w	8016c9c <protocol_exec_rt_system+0x2b8>
        if(rt_exec & EXEC_STOP) { // Experimental for now, must be verified. Do NOT move to interrupt context!
 8016b0c:	f010 0f10 	tst.w	r0, #16
 8016b10:	d058      	beq.n	8016bc4 <protocol_exec_rt_system+0x1e0>
            sys.cancel = true;
 8016b12:	4b58      	ldr	r3, [pc, #352]	@ (8016c74 <protocol_exec_rt_system+0x290>)
 8016b14:	2201      	movs	r2, #1
 8016b16:	705a      	strb	r2, [r3, #1]
            sys.step_control.flags = 0;
 8016b18:	2200      	movs	r2, #0
 8016b1a:	761a      	strb	r2, [r3, #24]
            sys.flags.feed_hold_pending = Off;
 8016b1c:	7d99      	ldrb	r1, [r3, #22]
 8016b1e:	f362 1145 	bfi	r1, r2, #5, #1
 8016b22:	7599      	strb	r1, [r3, #22]
            sys.override_delay.flags = 0;
 8016b24:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
            if(sys.override.control.sync)
 8016b28:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8016b2c:	4293      	cmp	r3, r2
 8016b2e:	f2c0 80f4 	blt.w	8016d1a <protocol_exec_rt_system+0x336>
            gc_state.tool_change = false;
 8016b32:	4b57      	ldr	r3, [pc, #348]	@ (8016c90 <protocol_exec_rt_system+0x2ac>)
 8016b34:	2200      	movs	r2, #0
 8016b36:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
            gc_state.modal.spindle.rpm_mode = SpindleSpeedMode_RPM;
 8016b3a:	76da      	strb	r2, [r3, #27]
            hal.driver_reset();
 8016b3c:	4b4e      	ldr	r3, [pc, #312]	@ (8016c78 <protocol_exec_rt_system+0x294>)
 8016b3e:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8016b42:	4798      	blx	r3
            if(!sys.flags.keep_input && hal.stream.suspend_read && hal.stream.suspend_read(false))
 8016b44:	4b4b      	ldr	r3, [pc, #300]	@ (8016c74 <protocol_exec_rt_system+0x290>)
 8016b46:	7ddb      	ldrb	r3, [r3, #23]
 8016b48:	f013 0f01 	tst.w	r3, #1
 8016b4c:	d10a      	bne.n	8016b64 <protocol_exec_rt_system+0x180>
 8016b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8016c78 <protocol_exec_rt_system+0x294>)
 8016b50:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8016b54:	b133      	cbz	r3, 8016b64 <protocol_exec_rt_system+0x180>
 8016b56:	2000      	movs	r0, #0
 8016b58:	4798      	blx	r3
 8016b5a:	b118      	cbz	r0, 8016b64 <protocol_exec_rt_system+0x180>
                hal.stream.cancel_read_buffer(); // flush pending blocks (after M6)
 8016b5c:	4b46      	ldr	r3, [pc, #280]	@ (8016c78 <protocol_exec_rt_system+0x294>)
 8016b5e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8016b62:	4798      	blx	r3
            sys.flags.keep_input = Off;
 8016b64:	4d43      	ldr	r5, [pc, #268]	@ (8016c74 <protocol_exec_rt_system+0x290>)
 8016b66:	7deb      	ldrb	r3, [r5, #23]
 8016b68:	f36f 0300 	bfc	r3, #0, #1
 8016b6c:	75eb      	strb	r3, [r5, #23]
            gc_init();
 8016b6e:	f7f6 f885 	bl	800cc7c <gc_init>
            plan_reset();
 8016b72:	f7ff f9ef 	bl	8015f54 <plan_reset>
            if(sys.alarm_pending == Alarm_ProbeProtect) {
 8016b76:	7d2b      	ldrb	r3, [r5, #20]
 8016b78:	2b0d      	cmp	r3, #13
 8016b7a:	f000 80d4 	beq.w	8016d26 <protocol_exec_rt_system+0x342>
                st_reset();
 8016b7e:	f008 fca5 	bl	801f4cc <st_reset>
            sync_position();
 8016b82:	f7ff fd15 	bl	80165b0 <plan_sync_position>
 8016b86:	4943      	ldr	r1, [pc, #268]	@ (8016c94 <protocol_exec_rt_system+0x2b0>)
 8016b88:	4843      	ldr	r0, [pc, #268]	@ (8016c98 <protocol_exec_rt_system+0x2b4>)
 8016b8a:	f00a fcd5 	bl	8021538 <system_convert_array_steps_to_mpos>
            gc_spindle_off();
 8016b8e:	f7f6 f915 	bl	800cdbc <gc_spindle_off>
            gc_coolant((coolant_state_t){0});
 8016b92:	f04f 0000 	mov.w	r0, #0
 8016b96:	f7f6 f91f 	bl	800cdd8 <gc_coolant>
            flush_override_buffers();
 8016b9a:	f7ff f8ad 	bl	8015cf8 <flush_override_buffers>
            if(!((state_get() == STATE_ALARM) && (sys.alarm == Alarm_LimitsEngaged || sys.alarm == Alarm_HomingRequired))) {
 8016b9e:	f007 fdb1 	bl	801e704 <state_get>
 8016ba2:	2801      	cmp	r0, #1
 8016ba4:	f000 80ca 	beq.w	8016d3c <protocol_exec_rt_system+0x358>
                state_set(hal.control.get_state().safety_door_ajar ? STATE_SAFETY_DOOR : STATE_IDLE);
 8016ba8:	4b33      	ldr	r3, [pc, #204]	@ (8016c78 <protocol_exec_rt_system+0x294>)
 8016baa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016bac:	4798      	blx	r3
 8016bae:	f010 0f08 	tst.w	r0, #8
 8016bb2:	f000 80cc 	beq.w	8016d4e <protocol_exec_rt_system+0x36a>
 8016bb6:	2040      	movs	r0, #64	@ 0x40
 8016bb8:	f007 fdaa 	bl	801e710 <state_set>
                grbl.report.feedback_message(Message_Stop);
 8016bbc:	4b30      	ldr	r3, [pc, #192]	@ (8016c80 <protocol_exec_rt_system+0x29c>)
 8016bbe:	68db      	ldr	r3, [r3, #12]
 8016bc0:	2016      	movs	r0, #22
 8016bc2:	4798      	blx	r3
        if (rt_exec & EXEC_STATUS_REPORT)
 8016bc4:	f014 0f01 	tst.w	r4, #1
 8016bc8:	f040 80c3 	bne.w	8016d52 <protocol_exec_rt_system+0x36e>
        if(rt_exec & EXEC_GCODE_REPORT)
 8016bcc:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 8016bd0:	f040 80c2 	bne.w	8016d58 <protocol_exec_rt_system+0x374>
        if(rt_exec & EXEC_TLO_REPORT)
 8016bd4:	f414 5f80 	tst.w	r4, #4096	@ 0x1000
 8016bd8:	f040 80c1 	bne.w	8016d5e <protocol_exec_rt_system+0x37a>
        if (rt_exec & EXEC_PID_REPORT)
 8016bdc:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 8016be0:	f040 80c0 	bne.w	8016d64 <protocol_exec_rt_system+0x380>
        if(rt_exec & EXEC_RT_COMMAND)
 8016be4:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 8016be8:	f040 80bf 	bne.w	8016d6a <protocol_exec_rt_system+0x386>
        rt_exec &= ~(EXEC_STOP|EXEC_STATUS_REPORT|EXEC_GCODE_REPORT|EXEC_PID_REPORT|EXEC_TLO_REPORT|EXEC_RT_COMMAND); // clear requests already processed
 8016bec:	f424 5070 	bic.w	r0, r4, #15360	@ 0x3c00
 8016bf0:	f020 0011 	bic.w	r0, r0, #17
        if(sys.flags.feed_hold_pending) {
 8016bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8016c74 <protocol_exec_rt_system+0x290>)
 8016bf6:	7d9b      	ldrb	r3, [r3, #22]
 8016bf8:	f013 0f20 	tst.w	r3, #32
 8016bfc:	d008      	beq.n	8016c10 <protocol_exec_rt_system+0x22c>
            if(rt_exec & EXEC_CYCLE_START)
 8016bfe:	f014 0f02 	tst.w	r4, #2
 8016c02:	f000 80b6 	beq.w	8016d72 <protocol_exec_rt_system+0x38e>
                sys.flags.feed_hold_pending = Off;
 8016c06:	4b1b      	ldr	r3, [pc, #108]	@ (8016c74 <protocol_exec_rt_system+0x290>)
 8016c08:	7d9a      	ldrb	r2, [r3, #22]
 8016c0a:	f36f 1245 	bfc	r2, #5, #1
 8016c0e:	759a      	strb	r2, [r3, #22]
        if(rt_exec)
 8016c10:	b108      	cbz	r0, 8016c16 <protocol_exec_rt_system+0x232>
            state_update(rt_exec);
 8016c12:	f007 fed5 	bl	801e9c0 <state_update>
    grbl.on_execute_realtime(state_get());
 8016c16:	4b1a      	ldr	r3, [pc, #104]	@ (8016c80 <protocol_exec_rt_system+0x29c>)
 8016c18:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8016c1a:	f007 fd73 	bl	801e704 <state_get>
 8016c1e:	47a0      	blx	r4
    if(!sys.override_delay.feedrate && (rt_exec = get_feed_override())) {
 8016c20:	4b14      	ldr	r3, [pc, #80]	@ (8016c74 <protocol_exec_rt_system+0x290>)
 8016c22:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016c26:	f013 0f01 	tst.w	r3, #1
 8016c2a:	f000 80ac 	beq.w	8016d86 <protocol_exec_rt_system+0x3a2>
    if(!sys.override_delay.spindle && (rt_exec = get_spindle_override())) {
 8016c2e:	4b11      	ldr	r3, [pc, #68]	@ (8016c74 <protocol_exec_rt_system+0x290>)
 8016c30:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016c34:	f013 0f04 	tst.w	r3, #4
 8016c38:	f000 80e5 	beq.w	8016e06 <protocol_exec_rt_system+0x422>
    if(!sys.override_delay.coolant && (rt_exec = get_coolant_override())) {
 8016c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8016c74 <protocol_exec_rt_system+0x290>)
 8016c3e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016c42:	f013 0f02 	tst.w	r3, #2
 8016c46:	f000 8145 	beq.w	8016ed4 <protocol_exec_rt_system+0x4f0>
    if (state_get() & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG))
 8016c4a:	f007 fd5b 	bl	801e704 <state_get>
 8016c4e:	f010 0ffc 	tst.w	r0, #252	@ 0xfc
 8016c52:	f040 819a 	bne.w	8016f8a <protocol_exec_rt_system+0x5a6>
    return !ABORTED;
 8016c56:	4b07      	ldr	r3, [pc, #28]	@ (8016c74 <protocol_exec_rt_system+0x290>)
 8016c58:	781b      	ldrb	r3, [r3, #0]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	f040 8198 	bne.w	8016f90 <protocol_exec_rt_system+0x5ac>
 8016c60:	4b04      	ldr	r3, [pc, #16]	@ (8016c74 <protocol_exec_rt_system+0x290>)
 8016c62:	785b      	ldrb	r3, [r3, #1]
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	f000 8195 	beq.w	8016f94 <protocol_exec_rt_system+0x5b0>
 8016c6a:	2000      	movs	r0, #0
 8016c6c:	e191      	b.n	8016f92 <protocol_exec_rt_system+0x5ae>
    bool killed = false;
 8016c6e:	2500      	movs	r5, #0
 8016c70:	e737      	b.n	8016ae2 <protocol_exec_rt_system+0xfe>
 8016c72:	bf00      	nop
 8016c74:	2000148c 	.word	0x2000148c
 8016c78:	200011ac 	.word	0x200011ac
 8016c7c:	200014d8 	.word	0x200014d8
 8016c80:	20001394 	.word	0x20001394
 8016c84:	200014d4 	.word	0x200014d4
 8016c88:	20001938 	.word	0x20001938
 8016c8c:	20001a3c 	.word	0x20001a3c
 8016c90:	20000ee4 	.word	0x20000ee4
 8016c94:	20001514 	.word	0x20001514
 8016c98:	20000f4c 	.word	0x20000f4c
            if(!killed) {
 8016c9c:	b305      	cbz	r5, 8016ce0 <protocol_exec_rt_system+0x2fc>
            if(!(sys.abort = !hal.control.get_state().e_stop)) {
 8016c9e:	4bae      	ldr	r3, [pc, #696]	@ (8016f58 <protocol_exec_rt_system+0x574>)
 8016ca0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016ca2:	4798      	blx	r3
 8016ca4:	f3c0 1381 	ubfx	r3, r0, #6, #2
 8016ca8:	f083 0301 	eor.w	r3, r3, #1
 8016cac:	f003 0301 	and.w	r3, r3, #1
 8016cb0:	4aaa      	ldr	r2, [pc, #680]	@ (8016f5c <protocol_exec_rt_system+0x578>)
 8016cb2:	7013      	strb	r3, [r2, #0]
 8016cb4:	b9e3      	cbnz	r3, 8016cf0 <protocol_exec_rt_system+0x30c>
                hal.stream.reset_read_buffer();
 8016cb6:	4ba8      	ldr	r3, [pc, #672]	@ (8016f58 <protocol_exec_rt_system+0x574>)
 8016cb8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8016cbc:	4798      	blx	r3
                system_raise_alarm(Alarm_EStop);
 8016cbe:	200a      	movs	r0, #10
 8016cc0:	f00a fc90 	bl	80215e4 <system_raise_alarm>
                grbl.report.feedback_message(Message_EStop);
 8016cc4:	4ba6      	ldr	r3, [pc, #664]	@ (8016f60 <protocol_exec_rt_system+0x57c>)
 8016cc6:	68db      	ldr	r3, [r3, #12]
 8016cc8:	200c      	movs	r0, #12
 8016cca:	4798      	blx	r3
            if(!killed) // Tell driver/plugins about reset.
 8016ccc:	b91d      	cbnz	r5, 8016cd6 <protocol_exec_rt_system+0x2f2>
                hal.driver_reset();
 8016cce:	4ba2      	ldr	r3, [pc, #648]	@ (8016f58 <protocol_exec_rt_system+0x574>)
 8016cd0:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8016cd4:	4798      	blx	r3
            return !sys.abort; // Nothing else to do but exit.
 8016cd6:	4ba1      	ldr	r3, [pc, #644]	@ (8016f5c <protocol_exec_rt_system+0x578>)
 8016cd8:	7818      	ldrb	r0, [r3, #0]
 8016cda:	f080 0001 	eor.w	r0, r0, #1
 8016cde:	e158      	b.n	8016f92 <protocol_exec_rt_system+0x5ae>
                spindle_all_off();
 8016ce0:	f007 fa8c 	bl	801e1fc <spindle_all_off>
                hal.coolant.set_state((coolant_state_t){0});
 8016ce4:	4b9c      	ldr	r3, [pc, #624]	@ (8016f58 <protocol_exec_rt_system+0x574>)
 8016ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016ce8:	f04f 0000 	mov.w	r0, #0
 8016cec:	4798      	blx	r3
 8016cee:	e7d6      	b.n	8016c9e <protocol_exec_rt_system+0x2ba>
            } else if(hal.control.get_state().motor_fault) {
 8016cf0:	4b99      	ldr	r3, [pc, #612]	@ (8016f58 <protocol_exec_rt_system+0x574>)
 8016cf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016cf4:	4798      	blx	r3
 8016cf6:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8016cfa:	d0e7      	beq.n	8016ccc <protocol_exec_rt_system+0x2e8>
                sys.abort = false;
 8016cfc:	4b97      	ldr	r3, [pc, #604]	@ (8016f5c <protocol_exec_rt_system+0x578>)
 8016cfe:	2200      	movs	r2, #0
 8016d00:	701a      	strb	r2, [r3, #0]
                hal.stream.reset_read_buffer();
 8016d02:	4b95      	ldr	r3, [pc, #596]	@ (8016f58 <protocol_exec_rt_system+0x574>)
 8016d04:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8016d08:	4798      	blx	r3
                system_raise_alarm(Alarm_MotorFault);
 8016d0a:	2011      	movs	r0, #17
 8016d0c:	f00a fc6a 	bl	80215e4 <system_raise_alarm>
                grbl.report.feedback_message(Message_MotorFault);
 8016d10:	4b93      	ldr	r3, [pc, #588]	@ (8016f60 <protocol_exec_rt_system+0x57c>)
 8016d12:	68db      	ldr	r3, [r3, #12]
 8016d14:	2010      	movs	r0, #16
 8016d16:	4798      	blx	r3
 8016d18:	e7d8      	b.n	8016ccc <protocol_exec_rt_system+0x2e8>
                sys.override.control = gc_state.modal.override_ctrl;
 8016d1a:	4b92      	ldr	r3, [pc, #584]	@ (8016f64 <protocol_exec_rt_system+0x580>)
 8016d1c:	7f1a      	ldrb	r2, [r3, #28]
 8016d1e:	4b8f      	ldr	r3, [pc, #572]	@ (8016f5c <protocol_exec_rt_system+0x578>)
 8016d20:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8016d24:	e705      	b.n	8016b32 <protocol_exec_rt_system+0x14e>
                st_go_idle();
 8016d26:	f008 fa17 	bl	801f158 <st_go_idle>
                system_set_exec_alarm(sys.alarm_pending);
 8016d2a:	4b8b      	ldr	r3, [pc, #556]	@ (8016f58 <protocol_exec_rt_system+0x574>)
 8016d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d2e:	7d29      	ldrb	r1, [r5, #20]
 8016d30:	f105 004c 	add.w	r0, r5, #76	@ 0x4c
 8016d34:	4798      	blx	r3
                sys.alarm_pending = Alarm_None;
 8016d36:	2300      	movs	r3, #0
 8016d38:	752b      	strb	r3, [r5, #20]
 8016d3a:	e722      	b.n	8016b82 <protocol_exec_rt_system+0x19e>
            if(!((state_get() == STATE_ALARM) && (sys.alarm == Alarm_LimitsEngaged || sys.alarm == Alarm_HomingRequired))) {
 8016d3c:	4b87      	ldr	r3, [pc, #540]	@ (8016f5c <protocol_exec_rt_system+0x578>)
 8016d3e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8016d42:	3b0b      	subs	r3, #11
 8016d44:	b2db      	uxtb	r3, r3
 8016d46:	2b01      	cmp	r3, #1
 8016d48:	f63f af2e 	bhi.w	8016ba8 <protocol_exec_rt_system+0x1c4>
 8016d4c:	e73a      	b.n	8016bc4 <protocol_exec_rt_system+0x1e0>
                state_set(hal.control.get_state().safety_door_ajar ? STATE_SAFETY_DOOR : STATE_IDLE);
 8016d4e:	2000      	movs	r0, #0
 8016d50:	e732      	b.n	8016bb8 <protocol_exec_rt_system+0x1d4>
            report_realtime_status();
 8016d52:	f003 f9e7 	bl	801a124 <report_realtime_status>
 8016d56:	e739      	b.n	8016bcc <protocol_exec_rt_system+0x1e8>
            report_gcode_modes();
 8016d58:	f002 fbc0 	bl	80194dc <report_gcode_modes>
 8016d5c:	e73a      	b.n	8016bd4 <protocol_exec_rt_system+0x1f0>
            report_tool_offsets();
 8016d5e:	f002 fa1f 	bl	80191a0 <report_tool_offsets>
 8016d62:	e73b      	b.n	8016bdc <protocol_exec_rt_system+0x1f8>
            report_pid_log();
 8016d64:	f004 fd12 	bl	801b78c <report_pid_log>
 8016d68:	e73c      	b.n	8016be4 <protocol_exec_rt_system+0x200>
            protocol_execute_rt_commands(0);
 8016d6a:	2000      	movs	r0, #0
 8016d6c:	f7ff fd3c 	bl	80167e8 <protocol_execute_rt_commands>
 8016d70:	e73c      	b.n	8016bec <protocol_exec_rt_system+0x208>
            else if(!sys.override.control.feed_hold_disable)
 8016d72:	4b7a      	ldr	r3, [pc, #488]	@ (8016f5c <protocol_exec_rt_system+0x578>)
 8016d74:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8016d78:	f013 0f02 	tst.w	r3, #2
 8016d7c:	f47f af48 	bne.w	8016c10 <protocol_exec_rt_system+0x22c>
                rt_exec |= EXEC_FEED_HOLD;
 8016d80:	f040 0008 	orr.w	r0, r0, #8
        if(rt_exec)
 8016d84:	e745      	b.n	8016c12 <protocol_exec_rt_system+0x22e>
    if(!sys.override_delay.feedrate && (rt_exec = get_feed_override())) {
 8016d86:	f7fe ff61 	bl	8015c4c <get_feed_override>
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	2800      	cmp	r0, #0
 8016d8e:	f43f af4e 	beq.w	8016c2e <protocol_exec_rt_system+0x24a>
        override_t new_f_override = sys.override.feed_rate;
 8016d92:	4a72      	ldr	r2, [pc, #456]	@ (8016f5c <protocol_exec_rt_system+0x578>)
 8016d94:	69d4      	ldr	r4, [r2, #28]
        override_t new_r_override = sys.override.rapid_rate;
 8016d96:	6a15      	ldr	r5, [r2, #32]
 8016d98:	e015      	b.n	8016dc6 <protocol_exec_rt_system+0x3e2>
                    new_f_override += FEED_OVERRIDE_COARSE_INCREMENT;
 8016d9a:	340a      	adds	r4, #10
                    break;
 8016d9c:	e00a      	b.n	8016db4 <protocol_exec_rt_system+0x3d0>
                    new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT;
 8016d9e:	3c0a      	subs	r4, #10
                    break;
 8016da0:	e008      	b.n	8016db4 <protocol_exec_rt_system+0x3d0>
                    new_f_override += FEED_OVERRIDE_FINE_INCREMENT;
 8016da2:	3401      	adds	r4, #1
                    break;
 8016da4:	e006      	b.n	8016db4 <protocol_exec_rt_system+0x3d0>
                    new_f_override -= FEED_OVERRIDE_FINE_INCREMENT;
 8016da6:	3c01      	subs	r4, #1
                    break;
 8016da8:	e004      	b.n	8016db4 <protocol_exec_rt_system+0x3d0>
                    new_r_override = RAPID_OVERRIDE_MEDIUM;
 8016daa:	2532      	movs	r5, #50	@ 0x32
                    break;
 8016dac:	e002      	b.n	8016db4 <protocol_exec_rt_system+0x3d0>
                    new_r_override = RAPID_OVERRIDE_LOW;
 8016dae:	2519      	movs	r5, #25
                    break;
 8016db0:	e000      	b.n	8016db4 <protocol_exec_rt_system+0x3d0>
                    new_r_override = DEFAULT_RAPID_OVERRIDE;
 8016db2:	2564      	movs	r5, #100	@ 0x64
            new_f_override = constrain(new_f_override, MIN_FEED_RATE_OVERRIDE, MAX_FEED_RATE_OVERRIDE);
 8016db4:	2c09      	cmp	r4, #9
 8016db6:	d91f      	bls.n	8016df8 <protocol_exec_rt_system+0x414>
 8016db8:	2cc8      	cmp	r4, #200	@ 0xc8
 8016dba:	bf28      	it	cs
 8016dbc:	24c8      	movcs	r4, #200	@ 0xc8
        } while((rt_exec = get_feed_override()));
 8016dbe:	f7fe ff45 	bl	8015c4c <get_feed_override>
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	b1d0      	cbz	r0, 8016dfc <protocol_exec_rt_system+0x418>
            switch(rt_exec) {
 8016dc6:	3b90      	subs	r3, #144	@ 0x90
 8016dc8:	2b07      	cmp	r3, #7
 8016dca:	d8f3      	bhi.n	8016db4 <protocol_exec_rt_system+0x3d0>
 8016dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8016dd4 <protocol_exec_rt_system+0x3f0>)
 8016dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016dd2:	bf00      	nop
 8016dd4:	08016df5 	.word	0x08016df5
 8016dd8:	08016d9b 	.word	0x08016d9b
 8016ddc:	08016d9f 	.word	0x08016d9f
 8016de0:	08016da3 	.word	0x08016da3
 8016de4:	08016da7 	.word	0x08016da7
 8016de8:	08016db3 	.word	0x08016db3
 8016dec:	08016dab 	.word	0x08016dab
 8016df0:	08016daf 	.word	0x08016daf
 8016df4:	2464      	movs	r4, #100	@ 0x64
 8016df6:	e7df      	b.n	8016db8 <protocol_exec_rt_system+0x3d4>
            new_f_override = constrain(new_f_override, MIN_FEED_RATE_OVERRIDE, MAX_FEED_RATE_OVERRIDE);
 8016df8:	240a      	movs	r4, #10
 8016dfa:	e7e0      	b.n	8016dbe <protocol_exec_rt_system+0x3da>
        plan_feed_override(new_f_override, new_r_override);
 8016dfc:	4629      	mov	r1, r5
 8016dfe:	4620      	mov	r0, r4
 8016e00:	f7ff fc12 	bl	8016628 <plan_feed_override>
 8016e04:	e713      	b.n	8016c2e <protocol_exec_rt_system+0x24a>
    if(!sys.override_delay.spindle && (rt_exec = get_spindle_override())) {
 8016e06:	f7fe ff43 	bl	8015c90 <get_spindle_override>
 8016e0a:	4605      	mov	r5, r0
 8016e0c:	2800      	cmp	r0, #0
 8016e0e:	f43f af15 	beq.w	8016c3c <protocol_exec_rt_system+0x258>
        spindle_ptrs_t *spindle = gc_spindle_get();
 8016e12:	f7f5 fff1 	bl	800cdf8 <gc_spindle_get>
 8016e16:	4606      	mov	r6, r0
        override_t last_s_override = spindle->param->override_pct;
 8016e18:	6843      	ldr	r3, [r0, #4]
 8016e1a:	68dc      	ldr	r4, [r3, #12]
        bool spindle_stop = false;
 8016e1c:	2700      	movs	r7, #0
 8016e1e:	e009      	b.n	8016e34 <protocol_exec_rt_system+0x450>
                    last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT;
 8016e20:	340a      	adds	r4, #10
            last_s_override = constrain(last_s_override, MIN_SPINDLE_RPM_OVERRIDE, MAX_SPINDLE_RPM_OVERRIDE);
 8016e22:	2c09      	cmp	r4, #9
 8016e24:	d92c      	bls.n	8016e80 <protocol_exec_rt_system+0x49c>
 8016e26:	2cc8      	cmp	r4, #200	@ 0xc8
 8016e28:	bf28      	it	cs
 8016e2a:	24c8      	movcs	r4, #200	@ 0xc8
        } while((rt_exec = get_spindle_override()));
 8016e2c:	f7fe ff30 	bl	8015c90 <get_spindle_override>
 8016e30:	4605      	mov	r5, r0
 8016e32:	b338      	cbz	r0, 8016e84 <protocol_exec_rt_system+0x4a0>
            switch(rt_exec) {
 8016e34:	f1a5 0399 	sub.w	r3, r5, #153	@ 0x99
 8016e38:	2b05      	cmp	r3, #5
 8016e3a:	d818      	bhi.n	8016e6e <protocol_exec_rt_system+0x48a>
 8016e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8016e44 <protocol_exec_rt_system+0x460>)
 8016e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e42:	bf00      	nop
 8016e44:	08016e7d 	.word	0x08016e7d
 8016e48:	08016e21 	.word	0x08016e21
 8016e4c:	08016e5d 	.word	0x08016e5d
 8016e50:	08016e61 	.word	0x08016e61
 8016e54:	08016e65 	.word	0x08016e65
 8016e58:	08016e69 	.word	0x08016e69
                    last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT;
 8016e5c:	3c0a      	subs	r4, #10
                    break;
 8016e5e:	e7e0      	b.n	8016e22 <protocol_exec_rt_system+0x43e>
                    last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT;
 8016e60:	3401      	adds	r4, #1
                    break;
 8016e62:	e7de      	b.n	8016e22 <protocol_exec_rt_system+0x43e>
                    last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT;
 8016e64:	3c01      	subs	r4, #1
                    break;
 8016e66:	e7dc      	b.n	8016e22 <protocol_exec_rt_system+0x43e>
                    spindle_stop = !spindle_stop;
 8016e68:	f087 0701 	eor.w	r7, r7, #1
                    break;
 8016e6c:	e7d9      	b.n	8016e22 <protocol_exec_rt_system+0x43e>
                    if(grbl.on_unknown_accessory_override)
 8016e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8016f60 <protocol_exec_rt_system+0x57c>)
 8016e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d0d5      	beq.n	8016e22 <protocol_exec_rt_system+0x43e>
                        grbl.on_unknown_accessory_override(rt_exec);
 8016e76:	b2e8      	uxtb	r0, r5
 8016e78:	4798      	blx	r3
 8016e7a:	e7d2      	b.n	8016e22 <protocol_exec_rt_system+0x43e>
            switch(rt_exec) {
 8016e7c:	2464      	movs	r4, #100	@ 0x64
 8016e7e:	e7d2      	b.n	8016e26 <protocol_exec_rt_system+0x442>
            last_s_override = constrain(last_s_override, MIN_SPINDLE_RPM_OVERRIDE, MAX_SPINDLE_RPM_OVERRIDE);
 8016e80:	240a      	movs	r4, #10
 8016e82:	e7d3      	b.n	8016e2c <protocol_exec_rt_system+0x448>
        spindle_set_override(spindle, last_s_override);
 8016e84:	4621      	mov	r1, r4
 8016e86:	4630      	mov	r0, r6
 8016e88:	f007 f972 	bl	801e170 <spindle_set_override>
        if (spindle_stop && state_get() == STATE_HOLD && gc_state.modal.spindle.state.on) {
 8016e8c:	2f00      	cmp	r7, #0
 8016e8e:	f43f aed5 	beq.w	8016c3c <protocol_exec_rt_system+0x258>
 8016e92:	f007 fc37 	bl	801e704 <state_get>
 8016e96:	2810      	cmp	r0, #16
 8016e98:	f47f aed0 	bne.w	8016c3c <protocol_exec_rt_system+0x258>
 8016e9c:	4b31      	ldr	r3, [pc, #196]	@ (8016f64 <protocol_exec_rt_system+0x580>)
 8016e9e:	7e9b      	ldrb	r3, [r3, #26]
 8016ea0:	f013 0f01 	tst.w	r3, #1
 8016ea4:	f43f aeca 	beq.w	8016c3c <protocol_exec_rt_system+0x258>
            if (!sys.override.spindle_stop.value)
 8016ea8:	4b2c      	ldr	r3, [pc, #176]	@ (8016f5c <protocol_exec_rt_system+0x578>)
 8016eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016eae:	b92b      	cbnz	r3, 8016ebc <protocol_exec_rt_system+0x4d8>
                sys.override.spindle_stop.initiate = On;
 8016eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8016f5c <protocol_exec_rt_system+0x578>)
 8016eb2:	f043 0302 	orr.w	r3, r3, #2
 8016eb6:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8016eba:	e6bf      	b.n	8016c3c <protocol_exec_rt_system+0x258>
            else if (sys.override.spindle_stop.enabled)
 8016ebc:	f013 0f01 	tst.w	r3, #1
 8016ec0:	f43f aebc 	beq.w	8016c3c <protocol_exec_rt_system+0x258>
                sys.override.spindle_stop.restore = On;
 8016ec4:	4a25      	ldr	r2, [pc, #148]	@ (8016f5c <protocol_exec_rt_system+0x578>)
 8016ec6:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8016eca:	f043 0304 	orr.w	r3, r3, #4
 8016ece:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8016ed2:	e6b3      	b.n	8016c3c <protocol_exec_rt_system+0x258>
    if(!sys.override_delay.coolant && (rt_exec = get_coolant_override())) {
 8016ed4:	f7fe fefe 	bl	8015cd4 <get_coolant_override>
 8016ed8:	4603      	mov	r3, r0
 8016eda:	2800      	cmp	r0, #0
 8016edc:	f43f aeb5 	beq.w	8016c4a <protocol_exec_rt_system+0x266>
        coolant_state_t coolant_state = gc_state.modal.coolant;
 8016ee0:	4a20      	ldr	r2, [pc, #128]	@ (8016f64 <protocol_exec_rt_system+0x580>)
 8016ee2:	7e54      	ldrb	r4, [r2, #25]
 8016ee4:	e022      	b.n	8016f2c <protocol_exec_rt_system+0x548>
                    if(hal.coolant_cap.mist && ((state_get() == STATE_IDLE) || (state_get() & (STATE_CYCLE | STATE_HOLD))))
 8016ee6:	f007 fc0d 	bl	801e704 <state_get>
 8016eea:	f010 0f18 	tst.w	r0, #24
 8016eee:	d019      	beq.n	8016f24 <protocol_exec_rt_system+0x540>
 8016ef0:	e02a      	b.n	8016f48 <protocol_exec_rt_system+0x564>
                    if(hal.coolant_cap.flood && ((state_get() == STATE_IDLE) || (state_get() & (STATE_CYCLE | STATE_HOLD))))
 8016ef2:	4b19      	ldr	r3, [pc, #100]	@ (8016f58 <protocol_exec_rt_system+0x574>)
 8016ef4:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 8016ef8:	f013 0f01 	tst.w	r3, #1
 8016efc:	d012      	beq.n	8016f24 <protocol_exec_rt_system+0x540>
 8016efe:	f007 fc01 	bl	801e704 <state_get>
 8016f02:	b920      	cbnz	r0, 8016f0e <protocol_exec_rt_system+0x52a>
                        coolant_state.flood = !coolant_state.flood;
 8016f04:	f084 0301 	eor.w	r3, r4, #1
 8016f08:	f363 0400 	bfi	r4, r3, #0, #1
 8016f0c:	e00a      	b.n	8016f24 <protocol_exec_rt_system+0x540>
                    if(hal.coolant_cap.flood && ((state_get() == STATE_IDLE) || (state_get() & (STATE_CYCLE | STATE_HOLD))))
 8016f0e:	f007 fbf9 	bl	801e704 <state_get>
 8016f12:	f010 0f18 	tst.w	r0, #24
 8016f16:	d005      	beq.n	8016f24 <protocol_exec_rt_system+0x540>
 8016f18:	e7f4      	b.n	8016f04 <protocol_exec_rt_system+0x520>
                    if(grbl.on_unknown_accessory_override)
 8016f1a:	4a11      	ldr	r2, [pc, #68]	@ (8016f60 <protocol_exec_rt_system+0x57c>)
 8016f1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8016f1e:	b10a      	cbz	r2, 8016f24 <protocol_exec_rt_system+0x540>
                        grbl.on_unknown_accessory_override(rt_exec);
 8016f20:	b2d8      	uxtb	r0, r3
 8016f22:	4790      	blx	r2
        } while((rt_exec = get_coolant_override()));
 8016f24:	f7fe fed6 	bl	8015cd4 <get_coolant_override>
 8016f28:	4603      	mov	r3, r0
 8016f2a:	b1e8      	cbz	r0, 8016f68 <protocol_exec_rt_system+0x584>
            switch(rt_exec) {
 8016f2c:	2ba0      	cmp	r3, #160	@ 0xa0
 8016f2e:	d0e0      	beq.n	8016ef2 <protocol_exec_rt_system+0x50e>
 8016f30:	2ba1      	cmp	r3, #161	@ 0xa1
 8016f32:	d1f2      	bne.n	8016f1a <protocol_exec_rt_system+0x536>
                    if(hal.coolant_cap.mist && ((state_get() == STATE_IDLE) || (state_get() & (STATE_CYCLE | STATE_HOLD))))
 8016f34:	4b08      	ldr	r3, [pc, #32]	@ (8016f58 <protocol_exec_rt_system+0x574>)
 8016f36:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 8016f3a:	f013 0f02 	tst.w	r3, #2
 8016f3e:	d0f1      	beq.n	8016f24 <protocol_exec_rt_system+0x540>
 8016f40:	f007 fbe0 	bl	801e704 <state_get>
 8016f44:	2800      	cmp	r0, #0
 8016f46:	d1ce      	bne.n	8016ee6 <protocol_exec_rt_system+0x502>
                        coolant_state.mist = !coolant_state.mist;
 8016f48:	f3c4 0346 	ubfx	r3, r4, #1, #7
 8016f4c:	f083 0301 	eor.w	r3, r3, #1
 8016f50:	f363 0441 	bfi	r4, r3, #1, #1
 8016f54:	e7e6      	b.n	8016f24 <protocol_exec_rt_system+0x540>
 8016f56:	bf00      	nop
 8016f58:	200011ac 	.word	0x200011ac
 8016f5c:	2000148c 	.word	0x2000148c
 8016f60:	20001394 	.word	0x20001394
 8016f64:	20000ee4 	.word	0x20000ee4
        if(coolant_state.value != gc_state.modal.coolant.value) {
 8016f68:	b2e3      	uxtb	r3, r4
 8016f6a:	4a0b      	ldr	r2, [pc, #44]	@ (8016f98 <protocol_exec_rt_system+0x5b4>)
 8016f6c:	7e52      	ldrb	r2, [r2, #25]
 8016f6e:	4293      	cmp	r3, r2
 8016f70:	f43f ae6b 	beq.w	8016c4a <protocol_exec_rt_system+0x266>
            gc_coolant(coolant_state); // Report flag set in gc_coolant().
 8016f74:	4620      	mov	r0, r4
 8016f76:	f7f5 ff2f 	bl	800cdd8 <gc_coolant>
            if(grbl.on_override_changed)
 8016f7a:	4b08      	ldr	r3, [pc, #32]	@ (8016f9c <protocol_exec_rt_system+0x5b8>)
 8016f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	f43f ae63 	beq.w	8016c4a <protocol_exec_rt_system+0x266>
                grbl.on_override_changed(OverrideChanged_CoolantState);
 8016f84:	2000      	movs	r0, #0
 8016f86:	4798      	blx	r3
 8016f88:	e65f      	b.n	8016c4a <protocol_exec_rt_system+0x266>
        st_prep_buffer();
 8016f8a:	f008 fbc9 	bl	801f720 <st_prep_buffer>
 8016f8e:	e662      	b.n	8016c56 <protocol_exec_rt_system+0x272>
    return !ABORTED;
 8016f90:	2000      	movs	r0, #0
}
 8016f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return !ABORTED;
 8016f94:	2001      	movs	r0, #1
 8016f96:	e7fc      	b.n	8016f92 <protocol_exec_rt_system+0x5ae>
 8016f98:	20000ee4 	.word	0x20000ee4
 8016f9c:	20001394 	.word	0x20001394

08016fa0 <protocol_exec_rt_suspend>:
{
 8016fa0:	b508      	push	{r3, lr}
    if((sys.blocking_event = state == STATE_SLEEP)) {
 8016fa2:	2880      	cmp	r0, #128	@ 0x80
 8016fa4:	bf14      	ite	ne
 8016fa6:	2000      	movne	r0, #0
 8016fa8:	2001      	moveq	r0, #1
 8016faa:	4b1c      	ldr	r3, [pc, #112]	@ (801701c <protocol_exec_rt_suspend+0x7c>)
 8016fac:	7158      	strb	r0, [r3, #5]
 8016fae:	b1a0      	cbz	r0, 8016fda <protocol_exec_rt_suspend+0x3a>
        *line = '\0';
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8017020 <protocol_exec_rt_suspend+0x80>)
 8016fb4:	7013      	strb	r3, [r2, #0]
        char_counter = 0;
 8016fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8017024 <protocol_exec_rt_suspend+0x84>)
 8016fb8:	6013      	str	r3, [r2, #0]
        hal.stream.reset_read_buffer();
 8016fba:	4b1b      	ldr	r3, [pc, #108]	@ (8017028 <protocol_exec_rt_suspend+0x88>)
 8016fbc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8016fc0:	4798      	blx	r3
 8016fc2:	e00a      	b.n	8016fda <protocol_exec_rt_suspend+0x3a>
            protocol_poll_cmd();
 8016fc4:	f7ff fc66 	bl	8016894 <protocol_poll_cmd>
 8016fc8:	e011      	b.n	8016fee <protocol_exec_rt_suspend+0x4e>
        if(settings.flags.sleep_enable)
 8016fca:	4b18      	ldr	r3, [pc, #96]	@ (801702c <protocol_exec_rt_suspend+0x8c>)
 8016fcc:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8016fd0:	f013 0f08 	tst.w	r3, #8
 8016fd4:	d11e      	bne.n	8017014 <protocol_exec_rt_suspend+0x74>
        protocol_exec_rt_system();
 8016fd6:	f7ff fd05 	bl	80169e4 <protocol_exec_rt_system>
    while(sys.suspend) {
 8016fda:	4b10      	ldr	r3, [pc, #64]	@ (801701c <protocol_exec_rt_suspend+0x7c>)
 8016fdc:	789b      	ldrb	r3, [r3, #2]
 8016fde:	b1e3      	cbz	r3, 801701a <protocol_exec_rt_suspend+0x7a>
        if(sys.abort)
 8016fe0:	4b0e      	ldr	r3, [pc, #56]	@ (801701c <protocol_exec_rt_suspend+0x7c>)
 8016fe2:	781b      	ldrb	r3, [r3, #0]
 8016fe4:	b9cb      	cbnz	r3, 801701a <protocol_exec_rt_suspend+0x7a>
        if(sys.blocking_event)
 8016fe6:	4b0d      	ldr	r3, [pc, #52]	@ (801701c <protocol_exec_rt_suspend+0x7c>)
 8016fe8:	795b      	ldrb	r3, [r3, #5]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d1ea      	bne.n	8016fc4 <protocol_exec_rt_suspend+0x24>
        state_suspend_manager();
 8016fee:	f008 f80d 	bl	801f00c <state_suspend_manager>
        if(state_get() == STATE_SAFETY_DOOR && !hal.control.get_state().safety_door_ajar)
 8016ff2:	f007 fb87 	bl	801e704 <state_get>
 8016ff6:	2840      	cmp	r0, #64	@ 0x40
 8016ff8:	d1e7      	bne.n	8016fca <protocol_exec_rt_suspend+0x2a>
 8016ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8017028 <protocol_exec_rt_suspend+0x88>)
 8016ffc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016ffe:	4798      	blx	r3
 8017000:	f010 0f08 	tst.w	r0, #8
 8017004:	d1e1      	bne.n	8016fca <protocol_exec_rt_suspend+0x2a>
            system_set_exec_state_flag(EXEC_DOOR_CLOSED);
 8017006:	4b08      	ldr	r3, [pc, #32]	@ (8017028 <protocol_exec_rt_suspend+0x88>)
 8017008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801700a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 801700e:	4808      	ldr	r0, [pc, #32]	@ (8017030 <protocol_exec_rt_suspend+0x90>)
 8017010:	4798      	blx	r3
 8017012:	e7da      	b.n	8016fca <protocol_exec_rt_suspend+0x2a>
            sleep_check();
 8017014:	f006 fc38 	bl	801d888 <sleep_check>
 8017018:	e7dd      	b.n	8016fd6 <protocol_exec_rt_suspend+0x36>
}
 801701a:	bd08      	pop	{r3, pc}
 801701c:	2000148c 	.word	0x2000148c
 8017020:	20001938 	.word	0x20001938
 8017024:	20001a3c 	.word	0x20001a3c
 8017028:	200011ac 	.word	0x200011ac
 801702c:	20001bc4 	.word	0x20001bc4
 8017030:	200014d4 	.word	0x200014d4

08017034 <protocol_execute_realtime>:
{
 8017034:	b510      	push	{r4, lr}
    if(protocol_exec_rt_system()) {
 8017036:	f7ff fcd5 	bl	80169e4 <protocol_exec_rt_system>
 801703a:	b938      	cbnz	r0, 801704c <protocol_execute_realtime+0x18>
    return !ABORTED;
 801703c:	4b12      	ldr	r3, [pc, #72]	@ (8017088 <protocol_execute_realtime+0x54>)
 801703e:	781b      	ldrb	r3, [r3, #0]
 8017040:	b9f3      	cbnz	r3, 8017080 <protocol_execute_realtime+0x4c>
 8017042:	4b11      	ldr	r3, [pc, #68]	@ (8017088 <protocol_execute_realtime+0x54>)
 8017044:	785b      	ldrb	r3, [r3, #1]
 8017046:	b1eb      	cbz	r3, 8017084 <protocol_execute_realtime+0x50>
 8017048:	2000      	movs	r0, #0
 801704a:	e01a      	b.n	8017082 <protocol_execute_realtime+0x4e>
        sys_state_t state = state_get();
 801704c:	f007 fb5a 	bl	801e704 <state_get>
 8017050:	4604      	mov	r4, r0
        if(sys.suspend)
 8017052:	4b0d      	ldr	r3, [pc, #52]	@ (8017088 <protocol_execute_realtime+0x54>)
 8017054:	789b      	ldrb	r3, [r3, #2]
 8017056:	b983      	cbnz	r3, 801707a <protocol_execute_realtime+0x46>
        if((state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP))) && settings_dirty.is_dirty && !gc_state.file_run)
 8017058:	b11c      	cbz	r4, 8017062 <protocol_execute_realtime+0x2e>
 801705a:	f240 1301 	movw	r3, #257	@ 0x101
 801705e:	421c      	tst	r4, r3
 8017060:	d0ec      	beq.n	801703c <protocol_execute_realtime+0x8>
 8017062:	4b0a      	ldr	r3, [pc, #40]	@ (801708c <protocol_execute_realtime+0x58>)
 8017064:	781b      	ldrb	r3, [r3, #0]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d0e8      	beq.n	801703c <protocol_execute_realtime+0x8>
 801706a:	4b09      	ldr	r3, [pc, #36]	@ (8017090 <protocol_execute_realtime+0x5c>)
 801706c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8017070:	2b00      	cmp	r3, #0
 8017072:	d1e3      	bne.n	801703c <protocol_execute_realtime+0x8>
            nvs_buffer_sync_physical();
 8017074:	f7fe fcd6 	bl	8015a24 <nvs_buffer_sync_physical>
 8017078:	e7e0      	b.n	801703c <protocol_execute_realtime+0x8>
            protocol_exec_rt_suspend(state);
 801707a:	f7ff ff91 	bl	8016fa0 <protocol_exec_rt_suspend>
 801707e:	e7eb      	b.n	8017058 <protocol_execute_realtime+0x24>
    return !ABORTED;
 8017080:	2000      	movs	r0, #0
}
 8017082:	bd10      	pop	{r4, pc}
    return !ABORTED;
 8017084:	2001      	movs	r0, #1
 8017086:	e7fc      	b.n	8017082 <protocol_execute_realtime+0x4e>
 8017088:	2000148c 	.word	0x2000148c
 801708c:	200016e8 	.word	0x200016e8
 8017090:	20000ee4 	.word	0x20000ee4

08017094 <protocol_main_loop>:
{
 8017094:	b510      	push	{r4, lr}
 8017096:	b082      	sub	sp, #8
    if(sys.alarm == Alarm_SelftestFailed) {
 8017098:	4b9f      	ldr	r3, [pc, #636]	@ (8017318 <protocol_main_loop+0x284>)
 801709a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801709e:	2b10      	cmp	r3, #16
 80170a0:	d03c      	beq.n	801711c <protocol_main_loop+0x88>
    } else if (hal.control.get_state().e_stop) {
 80170a2:	4b9e      	ldr	r3, [pc, #632]	@ (801731c <protocol_main_loop+0x288>)
 80170a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80170a6:	4798      	blx	r3
 80170a8:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80170ac:	d13e      	bne.n	801712c <protocol_main_loop+0x98>
    } else if(hal.control.get_state().motor_fault) {
 80170ae:	4b9b      	ldr	r3, [pc, #620]	@ (801731c <protocol_main_loop+0x288>)
 80170b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80170b2:	4798      	blx	r3
 80170b4:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80170b8:	d16b      	bne.n	8017192 <protocol_main_loop+0xfe>
    } else if(settings.probe.enable_protection && hal.control.get_state().probe_triggered) {
 80170ba:	4b99      	ldr	r3, [pc, #612]	@ (8017320 <protocol_main_loop+0x28c>)
 80170bc:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 80170c0:	f013 0f20 	tst.w	r3, #32
 80170c4:	d005      	beq.n	80170d2 <protocol_main_loop+0x3e>
 80170c6:	4b95      	ldr	r3, [pc, #596]	@ (801731c <protocol_main_loop+0x288>)
 80170c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80170ca:	4798      	blx	r3
 80170cc:	f410 4f80 	tst.w	r0, #16384	@ 0x4000
 80170d0:	d167      	bne.n	80171a2 <protocol_main_loop+0x10e>
    } else if (limits_homing_required()) {
 80170d2:	f7fc f8fd 	bl	80132d0 <limits_homing_required>
 80170d6:	2800      	cmp	r0, #0
 80170d8:	d16b      	bne.n	80171b2 <protocol_main_loop+0x11e>
    } else if (settings.limits.flags.hard_enabled &&
 80170da:	4b91      	ldr	r3, [pc, #580]	@ (8017320 <protocol_main_loop+0x28c>)
 80170dc:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 80170e0:	f003 0305 	and.w	r3, r3, #5
 80170e4:	2b05      	cmp	r3, #5
 80170e6:	d06c      	beq.n	80171c2 <protocol_main_loop+0x12e>
    } else if(sys.cold_start && (settings.flags.force_initialization_alarm || hal.control.get_state().reset)) {
 80170e8:	4b8b      	ldr	r3, [pc, #556]	@ (8017318 <protocol_main_loop+0x284>)
 80170ea:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	f000 8089 	beq.w	8017206 <protocol_main_loop+0x172>
 80170f4:	4b8a      	ldr	r3, [pc, #552]	@ (8017320 <protocol_main_loop+0x28c>)
 80170f6:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 80170fa:	f013 0f20 	tst.w	r3, #32
 80170fe:	d105      	bne.n	801710c <protocol_main_loop+0x78>
 8017100:	4b86      	ldr	r3, [pc, #536]	@ (801731c <protocol_main_loop+0x288>)
 8017102:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017104:	4798      	blx	r3
 8017106:	f010 0f01 	tst.w	r0, #1
 801710a:	d07c      	beq.n	8017206 <protocol_main_loop+0x172>
        state_set(STATE_ALARM); // Ensure alarm state is set.
 801710c:	2001      	movs	r0, #1
 801710e:	f007 faff 	bl	801e710 <state_set>
        grbl.report.feedback_message(Message_AlarmLock);
 8017112:	4b84      	ldr	r3, [pc, #528]	@ (8017324 <protocol_main_loop+0x290>)
 8017114:	68db      	ldr	r3, [r3, #12]
 8017116:	2002      	movs	r0, #2
 8017118:	4798      	blx	r3
 801711a:	e00e      	b.n	801713a <protocol_main_loop+0xa6>
        sys.alarm = Alarm_None;
 801711c:	4b7e      	ldr	r3, [pc, #504]	@ (8017318 <protocol_main_loop+0x284>)
 801711e:	2200      	movs	r2, #0
 8017120:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        system_raise_alarm(Alarm_SelftestFailed);
 8017124:	2010      	movs	r0, #16
 8017126:	f00a fa5d 	bl	80215e4 <system_raise_alarm>
 801712a:	e006      	b.n	801713a <protocol_main_loop+0xa6>
        system_raise_alarm(Alarm_EStop);
 801712c:	200a      	movs	r0, #10
 801712e:	f00a fa59 	bl	80215e4 <system_raise_alarm>
        grbl.report.feedback_message(Message_EStop);
 8017132:	4b7c      	ldr	r3, [pc, #496]	@ (8017324 <protocol_main_loop+0x290>)
 8017134:	68db      	ldr	r3, [r3, #12]
 8017136:	200c      	movs	r0, #12
 8017138:	4798      	blx	r3
    if(sys.cold_start) {
 801713a:	4b77      	ldr	r3, [pc, #476]	@ (8017318 <protocol_main_loop+0x284>)
 801713c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8017140:	2b00      	cmp	r3, #0
 8017142:	f000 8096 	beq.w	8017272 <protocol_main_loop+0x1de>
        spindle_all_off();
 8017146:	f007 f859 	bl	801e1fc <spindle_all_off>
        hal.coolant.set_state((coolant_state_t){0});
 801714a:	4b74      	ldr	r3, [pc, #464]	@ (801731c <protocol_main_loop+0x288>)
 801714c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801714e:	f04f 0000 	mov.w	r0, #0
 8017152:	4798      	blx	r3
        if(realtime_queue.head != realtime_queue.tail)
 8017154:	4b74      	ldr	r3, [pc, #464]	@ (8017328 <protocol_main_loop+0x294>)
 8017156:	681a      	ldr	r2, [r3, #0]
 8017158:	685b      	ldr	r3, [r3, #4]
 801715a:	429a      	cmp	r2, r3
 801715c:	d005      	beq.n	801716a <protocol_main_loop+0xd6>
            system_set_exec_state_flag(EXEC_RT_COMMAND);  // execute any boot up commands
 801715e:	4b6f      	ldr	r3, [pc, #444]	@ (801731c <protocol_main_loop+0x288>)
 8017160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017162:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8017166:	4871      	ldr	r0, [pc, #452]	@ (801732c <protocol_main_loop+0x298>)
 8017168:	4798      	blx	r3
        on_execute_delay = grbl.on_execute_delay;
 801716a:	4b6e      	ldr	r3, [pc, #440]	@ (8017324 <protocol_main_loop+0x290>)
 801716c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801716e:	4a70      	ldr	r2, [pc, #448]	@ (8017330 <protocol_main_loop+0x29c>)
 8017170:	6011      	str	r1, [r2, #0]
        grbl.on_execute_delay = protocol_on_execute_delay;
 8017172:	4a70      	ldr	r2, [pc, #448]	@ (8017334 <protocol_main_loop+0x2a0>)
 8017174:	64da      	str	r2, [r3, #76]	@ 0x4c
        sys.cold_start = false;
 8017176:	4b68      	ldr	r3, [pc, #416]	@ (8017318 <protocol_main_loop+0x284>)
 8017178:	2200      	movs	r2, #0
 801717a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    line_flags_t line_flags = {0};
 801717e:	2400      	movs	r4, #0
 8017180:	f88d 4000 	strb.w	r4, [sp]
    xcommand[0] = '\0';
 8017184:	4b6c      	ldr	r3, [pc, #432]	@ (8017338 <protocol_main_loop+0x2a4>)
 8017186:	701c      	strb	r4, [r3, #0]
    char_counter = 0;
 8017188:	4b6c      	ldr	r3, [pc, #432]	@ (801733c <protocol_main_loop+0x2a8>)
 801718a:	601c      	str	r4, [r3, #0]
    keep_rt_commands = false;
 801718c:	4b6c      	ldr	r3, [pc, #432]	@ (8017340 <protocol_main_loop+0x2ac>)
 801718e:	701c      	strb	r4, [r3, #0]
 8017190:	e1c7      	b.n	8017522 <protocol_main_loop+0x48e>
        system_raise_alarm(Alarm_MotorFault);
 8017192:	2011      	movs	r0, #17
 8017194:	f00a fa26 	bl	80215e4 <system_raise_alarm>
        grbl.report.feedback_message(Message_MotorFault);
 8017198:	4b62      	ldr	r3, [pc, #392]	@ (8017324 <protocol_main_loop+0x290>)
 801719a:	68db      	ldr	r3, [r3, #12]
 801719c:	2010      	movs	r0, #16
 801719e:	4798      	blx	r3
 80171a0:	e7cb      	b.n	801713a <protocol_main_loop+0xa6>
        system_raise_alarm(Alarm_ProbeProtect);
 80171a2:	200d      	movs	r0, #13
 80171a4:	f00a fa1e 	bl	80215e4 <system_raise_alarm>
        grbl.report.feedback_message(Message_ProbeProtected);
 80171a8:	4b5e      	ldr	r3, [pc, #376]	@ (8017324 <protocol_main_loop+0x290>)
 80171aa:	68db      	ldr	r3, [r3, #12]
 80171ac:	2015      	movs	r0, #21
 80171ae:	4798      	blx	r3
 80171b0:	e7c3      	b.n	801713a <protocol_main_loop+0xa6>
        system_raise_alarm(Alarm_HomingRequired);
 80171b2:	200b      	movs	r0, #11
 80171b4:	f00a fa16 	bl	80215e4 <system_raise_alarm>
        grbl.report.feedback_message(Message_HomingCycleRequired);
 80171b8:	4b5a      	ldr	r3, [pc, #360]	@ (8017324 <protocol_main_loop+0x290>)
 80171ba:	68db      	ldr	r3, [r3, #12]
 80171bc:	200d      	movs	r0, #13
 80171be:	4798      	blx	r3
 80171c0:	e7bb      	b.n	801713a <protocol_main_loop+0xa6>
                 (limit_signals_merge(hal.limits.get_state()).value & sys.hard_limits.mask)) {
 80171c2:	4b56      	ldr	r3, [pc, #344]	@ (801731c <protocol_main_loop+0x288>)
 80171c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80171c6:	4798      	blx	r3
 80171c8:	9001      	str	r0, [sp, #4]
 80171ca:	f7fb fc35 	bl	8012a38 <limit_signals_merge>
 80171ce:	4b52      	ldr	r3, [pc, #328]	@ (8017318 <protocol_main_loop+0x284>)
 80171d0:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
                settings.limits.flags.check_at_init &&
 80171d4:	4203      	tst	r3, r0
 80171d6:	d087      	beq.n	80170e8 <protocol_main_loop+0x54>
        if(sys.alarm == Alarm_LimitsEngaged && hal.control.get_state().limits_override)
 80171d8:	4b4f      	ldr	r3, [pc, #316]	@ (8017318 <protocol_main_loop+0x284>)
 80171da:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80171de:	2b0c      	cmp	r3, #12
 80171e0:	d105      	bne.n	80171ee <protocol_main_loop+0x15a>
 80171e2:	4b4e      	ldr	r3, [pc, #312]	@ (801731c <protocol_main_loop+0x288>)
 80171e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80171e6:	4798      	blx	r3
 80171e8:	f410 6f80 	tst.w	r0, #1024	@ 0x400
 80171ec:	d107      	bne.n	80171fe <protocol_main_loop+0x16a>
            system_raise_alarm(Alarm_LimitsEngaged);
 80171ee:	200c      	movs	r0, #12
 80171f0:	f00a f9f8 	bl	80215e4 <system_raise_alarm>
            grbl.report.feedback_message(Message_CheckLimits);
 80171f4:	4b4b      	ldr	r3, [pc, #300]	@ (8017324 <protocol_main_loop+0x290>)
 80171f6:	68db      	ldr	r3, [r3, #12]
 80171f8:	2007      	movs	r0, #7
 80171fa:	4798      	blx	r3
 80171fc:	e79d      	b.n	801713a <protocol_main_loop+0xa6>
            state_set(STATE_IDLE); // Clear alarm state to enable limit switch pulloff.
 80171fe:	2000      	movs	r0, #0
 8017200:	f007 fa86 	bl	801e710 <state_set>
 8017204:	e799      	b.n	801713a <protocol_main_loop+0xa6>
    } else if (state_get() & (STATE_ALARM|STATE_SLEEP)) {
 8017206:	f007 fa7d 	bl	801e704 <state_get>
 801720a:	f010 0f81 	tst.w	r0, #129	@ 0x81
 801720e:	d011      	beq.n	8017234 <protocol_main_loop+0x1a0>
        if(sys.alarm == Alarm_HomingRequired)
 8017210:	4b41      	ldr	r3, [pc, #260]	@ (8017318 <protocol_main_loop+0x284>)
 8017212:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8017216:	2b0b      	cmp	r3, #11
 8017218:	d007      	beq.n	801722a <protocol_main_loop+0x196>
        state_set(STATE_ALARM); // Ensure alarm state is set.
 801721a:	2001      	movs	r0, #1
 801721c:	f007 fa78 	bl	801e710 <state_set>
        grbl.report.feedback_message(Message_AlarmLock);
 8017220:	4b40      	ldr	r3, [pc, #256]	@ (8017324 <protocol_main_loop+0x290>)
 8017222:	68db      	ldr	r3, [r3, #12]
 8017224:	2002      	movs	r0, #2
 8017226:	4798      	blx	r3
 8017228:	e787      	b.n	801713a <protocol_main_loop+0xa6>
            sys.alarm = Alarm_None; // Clear Alarm_HomingRequired as the lock has been overridden by a soft reset.
 801722a:	4b3b      	ldr	r3, [pc, #236]	@ (8017318 <protocol_main_loop+0x284>)
 801722c:	2200      	movs	r2, #0
 801722e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8017232:	e7f2      	b.n	801721a <protocol_main_loop+0x186>
        state_set(STATE_IDLE);
 8017234:	2000      	movs	r0, #0
 8017236:	f007 fa6b 	bl	801e710 <state_set>
        if (hal.signals_cap.safety_door_ajar && !settings.safety_door.flags.ignore_when_idle && hal.control.get_state().safety_door_ajar) {
 801723a:	4b38      	ldr	r3, [pc, #224]	@ (801731c <protocol_main_loop+0x288>)
 801723c:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8017240:	f013 0f08 	tst.w	r3, #8
 8017244:	d012      	beq.n	801726c <protocol_main_loop+0x1d8>
 8017246:	4b36      	ldr	r3, [pc, #216]	@ (8017320 <protocol_main_loop+0x28c>)
 8017248:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 801724c:	f013 0f01 	tst.w	r3, #1
 8017250:	d10c      	bne.n	801726c <protocol_main_loop+0x1d8>
 8017252:	4b32      	ldr	r3, [pc, #200]	@ (801731c <protocol_main_loop+0x288>)
 8017254:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017256:	4798      	blx	r3
 8017258:	f010 0f08 	tst.w	r0, #8
 801725c:	d006      	beq.n	801726c <protocol_main_loop+0x1d8>
            system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 801725e:	4b2f      	ldr	r3, [pc, #188]	@ (801731c <protocol_main_loop+0x288>)
 8017260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017262:	2140      	movs	r1, #64	@ 0x40
 8017264:	4831      	ldr	r0, [pc, #196]	@ (801732c <protocol_main_loop+0x298>)
 8017266:	4798      	blx	r3
            protocol_execute_realtime(); // Enter safety door mode. Should return as IDLE state.
 8017268:	f7ff fee4 	bl	8017034 <protocol_execute_realtime>
        system_execute_startup(); // Execute startup script.
 801726c:	f009 ff32 	bl	80210d4 <system_execute_startup>
 8017270:	e763      	b.n	801713a <protocol_main_loop+0xa6>
        memset(&realtime_queue, 0, sizeof(realtime_queue_t));
 8017272:	2288      	movs	r2, #136	@ 0x88
 8017274:	2100      	movs	r1, #0
 8017276:	482c      	ldr	r0, [pc, #176]	@ (8017328 <protocol_main_loop+0x294>)
 8017278:	f00d f901 	bl	802447e <memset>
 801727c:	e77f      	b.n	801717e <protocol_main_loop+0xea>
                eol = xcommand[0] = '\0';
 801727e:	2300      	movs	r3, #0
 8017280:	4a2d      	ldr	r2, [pc, #180]	@ (8017338 <protocol_main_loop+0x2a4>)
 8017282:	7013      	strb	r3, [r2, #0]
                keep_rt_commands = false;
 8017284:	4a2e      	ldr	r2, [pc, #184]	@ (8017340 <protocol_main_loop+0x2ac>)
 8017286:	7013      	strb	r3, [r2, #0]
                char_counter = line_flags.value = 0;
 8017288:	f88d 3000 	strb.w	r3, [sp]
 801728c:	4a2b      	ldr	r2, [pc, #172]	@ (801733c <protocol_main_loop+0x2a8>)
 801728e:	6013      	str	r3, [r2, #0]
                gc_state.last_error = Status_OK;
 8017290:	4a2c      	ldr	r2, [pc, #176]	@ (8017344 <protocol_main_loop+0x2b0>)
 8017292:	f882 3081 	strb.w	r3, [r2, #129]	@ 0x81
                if (state_get() == STATE_JOG) // Block all other states from invoking motion cancel.
 8017296:	f007 fa35 	bl	801e704 <state_get>
 801729a:	2820      	cmp	r0, #32
 801729c:	d001      	beq.n	80172a2 <protocol_main_loop+0x20e>
                eol = xcommand[0] = '\0';
 801729e:	2400      	movs	r4, #0
 80172a0:	e13f      	b.n	8017522 <protocol_main_loop+0x48e>
                    system_set_exec_state_flag(EXEC_MOTION_CANCEL);
 80172a2:	4b1e      	ldr	r3, [pc, #120]	@ (801731c <protocol_main_loop+0x288>)
 80172a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80172a6:	2180      	movs	r1, #128	@ 0x80
 80172a8:	4820      	ldr	r0, [pc, #128]	@ (801732c <protocol_main_loop+0x298>)
 80172aa:	4798      	blx	r3
                eol = xcommand[0] = '\0';
 80172ac:	2400      	movs	r4, #0
 80172ae:	e138      	b.n	8017522 <protocol_main_loop+0x48e>
                if(char_counter == 0 && eol && eol != c) {
 80172b0:	4b22      	ldr	r3, [pc, #136]	@ (801733c <protocol_main_loop+0x2a8>)
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	b91b      	cbnz	r3, 80172be <protocol_main_loop+0x22a>
 80172b6:	b114      	cbz	r4, 80172be <protocol_main_loop+0x22a>
 80172b8:	4284      	cmp	r4, r0
 80172ba:	f040 810c 	bne.w	80174d6 <protocol_main_loop+0x442>
                    eol = (char)c;
 80172be:	b2c4      	uxtb	r4, r0
                if(!protocol_execute_realtime()) // Runtime command check point.
 80172c0:	f7ff feb8 	bl	8017034 <protocol_execute_realtime>
 80172c4:	b300      	cbz	r0, 8017308 <protocol_main_loop+0x274>
                line[char_counter] = '\0'; // Set string termination character.
 80172c6:	4b1d      	ldr	r3, [pc, #116]	@ (801733c <protocol_main_loop+0x2a8>)
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	4a1f      	ldr	r2, [pc, #124]	@ (8017348 <protocol_main_loop+0x2b4>)
 80172cc:	2100      	movs	r1, #0
 80172ce:	54d1      	strb	r1, [r2, r3]
                if (line_flags.overflow) // Report line overflow error.
 80172d0:	f89d 3000 	ldrb.w	r3, [sp]
 80172d4:	f013 0f01 	tst.w	r3, #1
 80172d8:	d038      	beq.n	801734c <protocol_main_loop+0x2b8>
                    gc_state.last_error = Status_Overflow;
 80172da:	4b1a      	ldr	r3, [pc, #104]	@ (8017344 <protocol_main_loop+0x2b0>)
 80172dc:	220b      	movs	r2, #11
 80172de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
                if(ABORTED)
 80172e2:	4b0d      	ldr	r3, [pc, #52]	@ (8017318 <protocol_main_loop+0x284>)
 80172e4:	881b      	ldrh	r3, [r3, #0]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	f040 80f7 	bne.w	80174da <protocol_main_loop+0x446>
                    grbl.report.status_message(gc_state.last_error);
 80172ec:	4b0d      	ldr	r3, [pc, #52]	@ (8017324 <protocol_main_loop+0x290>)
 80172ee:	689b      	ldr	r3, [r3, #8]
 80172f0:	4a14      	ldr	r2, [pc, #80]	@ (8017344 <protocol_main_loop+0x2b0>)
 80172f2:	f892 0081 	ldrb.w	r0, [r2, #129]	@ 0x81
 80172f6:	4798      	blx	r3
                keep_rt_commands = false;
 80172f8:	2300      	movs	r3, #0
 80172fa:	4a11      	ldr	r2, [pc, #68]	@ (8017340 <protocol_main_loop+0x2ac>)
 80172fc:	7013      	strb	r3, [r2, #0]
                char_counter = line_flags.value = 0;
 80172fe:	f88d 3000 	strb.w	r3, [sp]
 8017302:	4a0e      	ldr	r2, [pc, #56]	@ (801733c <protocol_main_loop+0x2a8>)
 8017304:	6013      	str	r3, [r2, #0]
 8017306:	e10c      	b.n	8017522 <protocol_main_loop+0x48e>
                    return !sys.flags.exit;      // Bail to calling function upon system abort
 8017308:	4b03      	ldr	r3, [pc, #12]	@ (8017318 <protocol_main_loop+0x284>)
 801730a:	7d98      	ldrb	r0, [r3, #22]
 801730c:	08c0      	lsrs	r0, r0, #3
 801730e:	f080 0001 	eor.w	r0, r0, #1
 8017312:	f000 0001 	and.w	r0, r0, #1
 8017316:	e144      	b.n	80175a2 <protocol_main_loop+0x50e>
 8017318:	2000148c 	.word	0x2000148c
 801731c:	200011ac 	.word	0x200011ac
 8017320:	20001bc4 	.word	0x20001bc4
 8017324:	20001394 	.word	0x20001394
 8017328:	200017a8 	.word	0x200017a8
 801732c:	200014d4 	.word	0x200014d4
 8017330:	200017a4 	.word	0x200017a4
 8017334:	08016859 	.word	0x08016859
 8017338:	20001834 	.word	0x20001834
 801733c:	20001a3c 	.word	0x20001a3c
 8017340:	20001830 	.word	0x20001830
 8017344:	20000ee4 	.word	0x20000ee4
 8017348:	20001938 	.word	0x20001938
                else if(*line == '\0') // Empty line. For syncing purposes.
 801734c:	4b97      	ldr	r3, [pc, #604]	@ (80175ac <protocol_main_loop+0x518>)
 801734e:	781b      	ldrb	r3, [r3, #0]
 8017350:	b923      	cbnz	r3, 801735c <protocol_main_loop+0x2c8>
                    gc_state.last_error = Status_OK;
 8017352:	4b97      	ldr	r3, [pc, #604]	@ (80175b0 <protocol_main_loop+0x51c>)
 8017354:	2200      	movs	r2, #0
 8017356:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 801735a:	e7c2      	b.n	80172e2 <protocol_main_loop+0x24e>
                else if(*line == '$') {// grblHAL '$' system command
 801735c:	2b24      	cmp	r3, #36	@ 0x24
 801735e:	d00b      	beq.n	8017378 <protocol_main_loop+0x2e4>
                } else if(*line == '[' && grbl.on_user_command)
 8017360:	2b5b      	cmp	r3, #91	@ 0x5b
 8017362:	d119      	bne.n	8017398 <protocol_main_loop+0x304>
 8017364:	4b93      	ldr	r3, [pc, #588]	@ (80175b4 <protocol_main_loop+0x520>)
 8017366:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801736a:	b1ab      	cbz	r3, 8017398 <protocol_main_loop+0x304>
                    gc_state.last_error = grbl.on_user_command(line);
 801736c:	488f      	ldr	r0, [pc, #572]	@ (80175ac <protocol_main_loop+0x518>)
 801736e:	4798      	blx	r3
 8017370:	4b8f      	ldr	r3, [pc, #572]	@ (80175b0 <protocol_main_loop+0x51c>)
 8017372:	f883 0081 	strb.w	r0, [r3, #129]	@ 0x81
 8017376:	e7b4      	b.n	80172e2 <protocol_main_loop+0x24e>
                    if((gc_state.last_error = system_execute_line(line)) == Status_LimitsEngaged) {
 8017378:	488c      	ldr	r0, [pc, #560]	@ (80175ac <protocol_main_loop+0x518>)
 801737a:	f009 ffc7 	bl	802130c <system_execute_line>
 801737e:	4b8c      	ldr	r3, [pc, #560]	@ (80175b0 <protocol_main_loop+0x51c>)
 8017380:	f883 0081 	strb.w	r0, [r3, #129]	@ 0x81
 8017384:	282d      	cmp	r0, #45	@ 0x2d
 8017386:	d1ac      	bne.n	80172e2 <protocol_main_loop+0x24e>
                        system_raise_alarm(Alarm_LimitsEngaged);
 8017388:	200c      	movs	r0, #12
 801738a:	f00a f92b 	bl	80215e4 <system_raise_alarm>
                        grbl.report.feedback_message(Message_CheckLimits);
 801738e:	4b89      	ldr	r3, [pc, #548]	@ (80175b4 <protocol_main_loop+0x520>)
 8017390:	68db      	ldr	r3, [r3, #12]
 8017392:	2007      	movs	r0, #7
 8017394:	4798      	blx	r3
 8017396:	e7a4      	b.n	80172e2 <protocol_main_loop+0x24e>
                else if (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_JOG)) // Everything else is gcode. Block if in alarm, eStop or jog mode.
 8017398:	f007 f9b4 	bl	801e704 <state_get>
 801739c:	f240 1321 	movw	r3, #289	@ 0x121
 80173a0:	4218      	tst	r0, r3
 80173a2:	d004      	beq.n	80173ae <protocol_main_loop+0x31a>
                    gc_state.last_error = Status_SystemGClock;
 80173a4:	4b82      	ldr	r3, [pc, #520]	@ (80175b0 <protocol_main_loop+0x51c>)
 80173a6:	2209      	movs	r2, #9
 80173a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80173ac:	e799      	b.n	80172e2 <protocol_main_loop+0x24e>
                else if(gc_state.last_error == Status_OK || gc_state.last_error == Status_GcodeToolChangePending) { // Parse and execute g-code block.
 80173ae:	4b80      	ldr	r3, [pc, #512]	@ (80175b0 <protocol_main_loop+0x51c>)
 80173b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80173b4:	b10b      	cbz	r3, 80173ba <protocol_main_loop+0x326>
 80173b6:	2b28      	cmp	r3, #40	@ 0x28
 80173b8:	d193      	bne.n	80172e2 <protocol_main_loop+0x24e>
                    gc_state.last_error = gc_execute_block(line);
 80173ba:	487c      	ldr	r0, [pc, #496]	@ (80175ac <protocol_main_loop+0x518>)
 80173bc:	f7f5 fe38 	bl	800d030 <gc_execute_block>
 80173c0:	4b7b      	ldr	r3, [pc, #492]	@ (80175b0 <protocol_main_loop+0x51c>)
 80173c2:	f883 0081 	strb.w	r0, [r3, #129]	@ 0x81
 80173c6:	e78c      	b.n	80172e2 <protocol_main_loop+0x24e>
            } else if (c != ASCII_BS && c <= (char_counter > 0 ? ' ' - 1 : ' '))
 80173c8:	4b7b      	ldr	r3, [pc, #492]	@ (80175b8 <protocol_main_loop+0x524>)
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	b1cb      	cbz	r3, 8017402 <protocol_main_loop+0x36e>
 80173ce:	221f      	movs	r2, #31
 80173d0:	4290      	cmp	r0, r2
 80173d2:	f340 80a6 	ble.w	8017522 <protocol_main_loop+0x48e>
                switch(c) {
 80173d6:	283b      	cmp	r0, #59	@ 0x3b
 80173d8:	dc29      	bgt.n	801742e <protocol_main_loop+0x39a>
 80173da:	2824      	cmp	r0, #36	@ 0x24
 80173dc:	db13      	blt.n	8017406 <protocol_main_loop+0x372>
 80173de:	f1a0 0224 	sub.w	r2, r0, #36	@ 0x24
 80173e2:	2a17      	cmp	r2, #23
 80173e4:	d811      	bhi.n	801740a <protocol_main_loop+0x376>
 80173e6:	e8df f002 	tbb	[pc, r2]
 80173ea:	1036      	.short	0x1036
 80173ec:	583c1010 	.word	0x583c1010
 80173f0:	10101010 	.word	0x10101010
 80173f4:	10101010 	.word	0x10101010
 80173f8:	10101010 	.word	0x10101010
 80173fc:	10101010 	.word	0x10101010
 8017400:	6710      	.short	0x6710
            } else if (c != ASCII_BS && c <= (char_counter > 0 ? ' ' - 1 : ' '))
 8017402:	2220      	movs	r2, #32
 8017404:	e7e4      	b.n	80173d0 <protocol_main_loop+0x33c>
                switch(c) {
 8017406:	2808      	cmp	r0, #8
 8017408:	d015      	beq.n	8017436 <protocol_main_loop+0x3a2>
                if(!(line_flags.overflow = char_counter >= (LINE_BUFFER_SIZE - 1)))
 801740a:	2bff      	cmp	r3, #255	@ 0xff
 801740c:	bf94      	ite	ls
 801740e:	2200      	movls	r2, #0
 8017410:	2201      	movhi	r2, #1
 8017412:	f89d 1000 	ldrb.w	r1, [sp]
 8017416:	f362 0100 	bfi	r1, r2, #0, #1
 801741a:	f88d 1000 	strb.w	r1, [sp]
 801741e:	2a00      	cmp	r2, #0
 8017420:	d17f      	bne.n	8017522 <protocol_main_loop+0x48e>
                    line[char_counter++] = c;
 8017422:	1c59      	adds	r1, r3, #1
 8017424:	4a64      	ldr	r2, [pc, #400]	@ (80175b8 <protocol_main_loop+0x524>)
 8017426:	6011      	str	r1, [r2, #0]
 8017428:	4a60      	ldr	r2, [pc, #384]	@ (80175ac <protocol_main_loop+0x518>)
 801742a:	54d0      	strb	r0, [r2, r3]
 801742c:	e079      	b.n	8017522 <protocol_main_loop+0x48e>
                switch(c) {
 801742e:	285b      	cmp	r0, #91	@ 0x5b
 8017430:	d011      	beq.n	8017456 <protocol_main_loop+0x3c2>
 8017432:	287f      	cmp	r0, #127	@ 0x7f
 8017434:	d1e9      	bne.n	801740a <protocol_main_loop+0x376>
                        if(char_counter) {
 8017436:	4b60      	ldr	r3, [pc, #384]	@ (80175b8 <protocol_main_loop+0x524>)
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	2b00      	cmp	r3, #0
 801743c:	d071      	beq.n	8017522 <protocol_main_loop+0x48e>
                            line[--char_counter] = '\0';
 801743e:	3b01      	subs	r3, #1
 8017440:	4a5d      	ldr	r2, [pc, #372]	@ (80175b8 <protocol_main_loop+0x524>)
 8017442:	6013      	str	r3, [r2, #0]
 8017444:	4859      	ldr	r0, [pc, #356]	@ (80175ac <protocol_main_loop+0x518>)
 8017446:	2200      	movs	r2, #0
 8017448:	54c2      	strb	r2, [r0, r3]
                            keep_rt_commands = recheck_line(line, &line_flags);
 801744a:	4669      	mov	r1, sp
 801744c:	f7ff f94a 	bl	80166e4 <recheck_line>
 8017450:	4b5a      	ldr	r3, [pc, #360]	@ (80175bc <protocol_main_loop+0x528>)
 8017452:	7018      	strb	r0, [r3, #0]
                        continue;
 8017454:	e065      	b.n	8017522 <protocol_main_loop+0x48e>
                        if(char_counter == 0)
 8017456:	2b00      	cmp	r3, #0
 8017458:	d1d7      	bne.n	801740a <protocol_main_loop+0x376>
                            keep_rt_commands = true;
 801745a:	4a58      	ldr	r2, [pc, #352]	@ (80175bc <protocol_main_loop+0x528>)
 801745c:	2101      	movs	r1, #1
 801745e:	7011      	strb	r1, [r2, #0]
 8017460:	e7d3      	b.n	801740a <protocol_main_loop+0x376>
                        if(!keep_rt_commands && (line_flags.comment_parentheses = !line_flags.comment_semicolon))
 8017462:	4a56      	ldr	r2, [pc, #344]	@ (80175bc <protocol_main_loop+0x528>)
 8017464:	7812      	ldrb	r2, [r2, #0]
 8017466:	2a00      	cmp	r2, #0
 8017468:	d1cf      	bne.n	801740a <protocol_main_loop+0x376>
 801746a:	f89d 1000 	ldrb.w	r1, [sp]
 801746e:	088a      	lsrs	r2, r1, #2
 8017470:	f082 0201 	eor.w	r2, r2, #1
 8017474:	f002 0201 	and.w	r2, r2, #1
 8017478:	f362 0141 	bfi	r1, r2, #1, #1
 801747c:	f88d 1000 	strb.w	r1, [sp]
 8017480:	2a00      	cmp	r2, #0
 8017482:	d0c2      	beq.n	801740a <protocol_main_loop+0x376>
                            keep_rt_commands = !hal.driver_cap.no_gcode_message_handling; // Suspend real-time processing of printable command characters.
 8017484:	4a4e      	ldr	r2, [pc, #312]	@ (80175c0 <protocol_main_loop+0x52c>)
 8017486:	f892 21da 	ldrb.w	r2, [r2, #474]	@ 0x1da
 801748a:	0892      	lsrs	r2, r2, #2
 801748c:	f082 0201 	eor.w	r2, r2, #1
 8017490:	f002 0201 	and.w	r2, r2, #1
 8017494:	4949      	ldr	r1, [pc, #292]	@ (80175bc <protocol_main_loop+0x528>)
 8017496:	700a      	strb	r2, [r1, #0]
 8017498:	e7b7      	b.n	801740a <protocol_main_loop+0x376>
                        if(!line_flags.comment_semicolon)
 801749a:	f89d 2000 	ldrb.w	r2, [sp]
 801749e:	f012 0f04 	tst.w	r2, #4
 80174a2:	d1b2      	bne.n	801740a <protocol_main_loop+0x376>
                            line_flags.comment_parentheses = keep_rt_commands = false;
 80174a4:	2100      	movs	r1, #0
 80174a6:	4a45      	ldr	r2, [pc, #276]	@ (80175bc <protocol_main_loop+0x528>)
 80174a8:	7011      	strb	r1, [r2, #0]
 80174aa:	f89d 2000 	ldrb.w	r2, [sp]
 80174ae:	f361 0241 	bfi	r2, r1, #1, #1
 80174b2:	f88d 2000 	strb.w	r2, [sp]
 80174b6:	e7a8      	b.n	801740a <protocol_main_loop+0x376>
                        if(!line_flags.comment_parentheses) {
 80174b8:	f89d 2000 	ldrb.w	r2, [sp]
 80174bc:	f012 0f02 	tst.w	r2, #2
 80174c0:	d1a3      	bne.n	801740a <protocol_main_loop+0x376>
                            keep_rt_commands = false;
 80174c2:	4a3e      	ldr	r2, [pc, #248]	@ (80175bc <protocol_main_loop+0x528>)
 80174c4:	2100      	movs	r1, #0
 80174c6:	7011      	strb	r1, [r2, #0]
                            line_flags.comment_semicolon = On;
 80174c8:	f89d 2000 	ldrb.w	r2, [sp]
 80174cc:	f042 0204 	orr.w	r2, r2, #4
 80174d0:	f88d 2000 	strb.w	r2, [sp]
 80174d4:	e799      	b.n	801740a <protocol_main_loop+0x376>
                    eol = '\0';
 80174d6:	2400      	movs	r4, #0
 80174d8:	e023      	b.n	8017522 <protocol_main_loop+0x48e>
        if(xcommand[0] != '\0') {
 80174da:	4b3a      	ldr	r3, [pc, #232]	@ (80175c4 <protocol_main_loop+0x530>)
 80174dc:	781b      	ldrb	r3, [r3, #0]
 80174de:	b173      	cbz	r3, 80174fe <protocol_main_loop+0x46a>
            if (xcommand[0] == '$') // grblHAL '$' system command
 80174e0:	2b24      	cmp	r3, #36	@ 0x24
 80174e2:	d04f      	beq.n	8017584 <protocol_main_loop+0x4f0>
            else if (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_JOG)) // Everything else is gcode. Block if in alarm, eStop or jog state.
 80174e4:	f007 f90e 	bl	801e704 <state_get>
 80174e8:	f240 1321 	movw	r3, #289	@ 0x121
 80174ec:	4218      	tst	r0, r3
 80174ee:	d04d      	beq.n	801758c <protocol_main_loop+0x4f8>
                grbl.report.status_message(Status_SystemGClock);
 80174f0:	4b30      	ldr	r3, [pc, #192]	@ (80175b4 <protocol_main_loop+0x520>)
 80174f2:	689b      	ldr	r3, [r3, #8]
 80174f4:	2009      	movs	r0, #9
 80174f6:	4798      	blx	r3
            xcommand[0] = '\0';
 80174f8:	4b32      	ldr	r3, [pc, #200]	@ (80175c4 <protocol_main_loop+0x530>)
 80174fa:	2200      	movs	r2, #0
 80174fc:	701a      	strb	r2, [r3, #0]
        protocol_auto_cycle_start();
 80174fe:	f7ff fa63 	bl	80169c8 <protocol_auto_cycle_start>
        if(!protocol_execute_realtime() && sys.abort) // Runtime command check point.
 8017502:	f7ff fd97 	bl	8017034 <protocol_execute_realtime>
 8017506:	b918      	cbnz	r0, 8017510 <protocol_main_loop+0x47c>
 8017508:	4b2f      	ldr	r3, [pc, #188]	@ (80175c8 <protocol_main_loop+0x534>)
 801750a:	781b      	ldrb	r3, [r3, #0]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d141      	bne.n	8017594 <protocol_main_loop+0x500>
        sys.cancel = false;
 8017510:	4b2d      	ldr	r3, [pc, #180]	@ (80175c8 <protocol_main_loop+0x534>)
 8017512:	2200      	movs	r2, #0
 8017514:	705a      	strb	r2, [r3, #1]
        if(settings.flags.sleep_enable)
 8017516:	4b2d      	ldr	r3, [pc, #180]	@ (80175cc <protocol_main_loop+0x538>)
 8017518:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 801751c:	f013 0f08 	tst.w	r3, #8
 8017520:	d141      	bne.n	80175a6 <protocol_main_loop+0x512>
        while((c = hal.stream.read()) != SERIAL_NO_DATA) {
 8017522:	4b27      	ldr	r3, [pc, #156]	@ (80175c0 <protocol_main_loop+0x52c>)
 8017524:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8017528:	4798      	blx	r3
 801752a:	f1b0 3fff 	cmp.w	r0, #4294967295
 801752e:	d0d4      	beq.n	80174da <protocol_main_loop+0x446>
            if(c == ASCII_CAN) {
 8017530:	f1a0 0308 	sub.w	r3, r0, #8
 8017534:	2b10      	cmp	r3, #16
 8017536:	f63f af47 	bhi.w	80173c8 <protocol_main_loop+0x334>
 801753a:	a201      	add	r2, pc, #4	@ (adr r2, 8017540 <protocol_main_loop+0x4ac>)
 801753c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017540:	08017437 	.word	0x08017437
 8017544:	080173c9 	.word	0x080173c9
 8017548:	080172b1 	.word	0x080172b1
 801754c:	080173c9 	.word	0x080173c9
 8017550:	080173c9 	.word	0x080173c9
 8017554:	080172b1 	.word	0x080172b1
 8017558:	080173c9 	.word	0x080173c9
 801755c:	080173c9 	.word	0x080173c9
 8017560:	080173c9 	.word	0x080173c9
 8017564:	080173c9 	.word	0x080173c9
 8017568:	080173c9 	.word	0x080173c9
 801756c:	080173c9 	.word	0x080173c9
 8017570:	080173c9 	.word	0x080173c9
 8017574:	080173c9 	.word	0x080173c9
 8017578:	080173c9 	.word	0x080173c9
 801757c:	080173c9 	.word	0x080173c9
 8017580:	0801727f 	.word	0x0801727f
                system_execute_line(xcommand);
 8017584:	480f      	ldr	r0, [pc, #60]	@ (80175c4 <protocol_main_loop+0x530>)
 8017586:	f009 fec1 	bl	802130c <system_execute_line>
 801758a:	e7b5      	b.n	80174f8 <protocol_main_loop+0x464>
                gc_execute_block(xcommand);
 801758c:	480d      	ldr	r0, [pc, #52]	@ (80175c4 <protocol_main_loop+0x530>)
 801758e:	f7f5 fd4f 	bl	800d030 <gc_execute_block>
 8017592:	e7b1      	b.n	80174f8 <protocol_main_loop+0x464>
            return !sys.flags.exit;                   // Bail to main() program loop to reset system.
 8017594:	4b0c      	ldr	r3, [pc, #48]	@ (80175c8 <protocol_main_loop+0x534>)
 8017596:	7d98      	ldrb	r0, [r3, #22]
 8017598:	08c0      	lsrs	r0, r0, #3
 801759a:	f080 0001 	eor.w	r0, r0, #1
 801759e:	f000 0001 	and.w	r0, r0, #1
}
 80175a2:	b002      	add	sp, #8
 80175a4:	bd10      	pop	{r4, pc}
            sleep_check();
 80175a6:	f006 f96f 	bl	801d888 <sleep_check>
 80175aa:	e7ba      	b.n	8017522 <protocol_main_loop+0x48e>
 80175ac:	20001938 	.word	0x20001938
 80175b0:	20000ee4 	.word	0x20000ee4
 80175b4:	20001394 	.word	0x20001394
 80175b8:	20001a3c 	.word	0x20001a3c
 80175bc:	20001830 	.word	0x20001830
 80175c0:	200011ac 	.word	0x200011ac
 80175c4:	20001834 	.word	0x20001834
 80175c8:	2000148c 	.word	0x2000148c
 80175cc:	20001bc4 	.word	0x20001bc4

080175d0 <protocol_buffer_synchronize>:
{
 80175d0:	b510      	push	{r4, lr}
    protocol_auto_cycle_start();
 80175d2:	f7ff f9f9 	bl	80169c8 <protocol_auto_cycle_start>
    sys.flags.synchronizing = On;
 80175d6:	4a0c      	ldr	r2, [pc, #48]	@ (8017608 <protocol_buffer_synchronize+0x38>)
 80175d8:	7dd3      	ldrb	r3, [r2, #23]
 80175da:	f043 0304 	orr.w	r3, r3, #4
 80175de:	75d3      	strb	r3, [r2, #23]
    while ((ok = protocol_execute_realtime()) && (plan_get_current_block() || state_get() == STATE_CYCLE));
 80175e0:	f7ff fd28 	bl	8017034 <protocol_execute_realtime>
 80175e4:	4604      	mov	r4, r0
 80175e6:	b138      	cbz	r0, 80175f8 <protocol_buffer_synchronize+0x28>
 80175e8:	f7fe fd58 	bl	801609c <plan_get_current_block>
 80175ec:	2800      	cmp	r0, #0
 80175ee:	d1f7      	bne.n	80175e0 <protocol_buffer_synchronize+0x10>
 80175f0:	f007 f888 	bl	801e704 <state_get>
 80175f4:	2808      	cmp	r0, #8
 80175f6:	d0f3      	beq.n	80175e0 <protocol_buffer_synchronize+0x10>
    sys.flags.synchronizing = Off;
 80175f8:	4b03      	ldr	r3, [pc, #12]	@ (8017608 <protocol_buffer_synchronize+0x38>)
 80175fa:	7dda      	ldrb	r2, [r3, #23]
 80175fc:	f36f 0282 	bfc	r2, #2, #1
 8017600:	75da      	strb	r2, [r3, #23]
}
 8017602:	4620      	mov	r0, r4
 8017604:	bd10      	pop	{r4, pc}
 8017606:	bf00      	nop
 8017608:	2000148c 	.word	0x2000148c

0801760c <protocol_enqueue_foreground_task>:
{
 801760c:	b538      	push	{r3, r4, r5, lr}
    uint_fast8_t bptr = (realtime_queue.head + 1) & (RT_QUEUE_SIZE - 1);    // Get next head pointer
 801760e:	4a0f      	ldr	r2, [pc, #60]	@ (801764c <protocol_enqueue_foreground_task+0x40>)
 8017610:	6813      	ldr	r3, [r2, #0]
 8017612:	3301      	adds	r3, #1
 8017614:	f003 030f 	and.w	r3, r3, #15
    if((ok = bptr != realtime_queue.tail)) {                    // If not buffer full
 8017618:	6852      	ldr	r2, [r2, #4]
 801761a:	429a      	cmp	r2, r3
 801761c:	bf14      	ite	ne
 801761e:	2401      	movne	r4, #1
 8017620:	2400      	moveq	r4, #0
 8017622:	d011      	beq.n	8017648 <protocol_enqueue_foreground_task+0x3c>
        realtime_queue.task[realtime_queue.head].data = data;
 8017624:	4a09      	ldr	r2, [pc, #36]	@ (801764c <protocol_enqueue_foreground_task+0x40>)
 8017626:	6815      	ldr	r5, [r2, #0]
 8017628:	f105 0c01 	add.w	ip, r5, #1
 801762c:	f842 103c 	str.w	r1, [r2, ip, lsl #3]
        realtime_queue.task[realtime_queue.head].task = fn;       // add function pointer to buffer,
 8017630:	6811      	ldr	r1, [r2, #0]
 8017632:	3101      	adds	r1, #1
 8017634:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8017638:	6048      	str	r0, [r1, #4]
        realtime_queue.head = bptr;                             // update pointer and
 801763a:	6013      	str	r3, [r2, #0]
        system_set_exec_state_flag(EXEC_RT_COMMAND);            // flag it for execute
 801763c:	4b04      	ldr	r3, [pc, #16]	@ (8017650 <protocol_enqueue_foreground_task+0x44>)
 801763e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017640:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8017644:	4803      	ldr	r0, [pc, #12]	@ (8017654 <protocol_enqueue_foreground_task+0x48>)
 8017646:	4798      	blx	r3
}
 8017648:	4620      	mov	r0, r4
 801764a:	bd38      	pop	{r3, r4, r5, pc}
 801764c:	200017a8 	.word	0x200017a8
 8017650:	200011ac 	.word	0x200011ac
 8017654:	200014d4 	.word	0x200014d4

08017658 <protocol_enqueue_realtime_command>:
{
 8017658:	b538      	push	{r3, r4, r5, lr}
 801765a:	4604      	mov	r4, r0
    switch ((unsigned char)c) {
 801765c:	1ec3      	subs	r3, r0, #3
 801765e:	2ba1      	cmp	r3, #161	@ 0xa1
 8017660:	f200 81b0 	bhi.w	80179c4 <protocol_enqueue_realtime_command+0x36c>
 8017664:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017668:	01ae00cc 	.word	0x01ae00cc
 801766c:	01ae00ef 	.word	0x01ae00ef
 8017670:	01ae01ae 	.word	0x01ae01ae
 8017674:	01c401ae 	.word	0x01c401ae
 8017678:	01ae01ae 	.word	0x01ae01ae
 801767c:	01ae01c4 	.word	0x01ae01c4
 8017680:	01ae01ae 	.word	0x01ae01ae
 8017684:	01ae01ae 	.word	0x01ae01ae
 8017688:	01a301ae 	.word	0x01a301ae
 801768c:	01ae01ae 	.word	0x01ae01ae
 8017690:	00c001ae 	.word	0x00c001ae
 8017694:	01ae00b3 	.word	0x01ae00b3
 8017698:	01ae01ae 	.word	0x01ae01ae
 801769c:	01ae01ae 	.word	0x01ae01ae
 80176a0:	01ae01ae 	.word	0x01ae01ae
 80176a4:	01ae01ae 	.word	0x01ae01ae
 80176a8:	00a201ae 	.word	0x00a201ae
 80176ac:	01ae01ae 	.word	0x01ae01ae
 80176b0:	01ae01ae 	.word	0x01ae01ae
 80176b4:	01ae01ae 	.word	0x01ae01ae
 80176b8:	01ae01ae 	.word	0x01ae01ae
 80176bc:	01ae01ae 	.word	0x01ae01ae
 80176c0:	01ae01ae 	.word	0x01ae01ae
 80176c4:	01ae01ae 	.word	0x01ae01ae
 80176c8:	01ae01ae 	.word	0x01ae01ae
 80176cc:	01ae01ae 	.word	0x01ae01ae
 80176d0:	01ae01ae 	.word	0x01ae01ae
 80176d4:	01ae01ae 	.word	0x01ae01ae
 80176d8:	01ae01ae 	.word	0x01ae01ae
 80176dc:	01ae01ae 	.word	0x01ae01ae
 80176e0:	01ae01ae 	.word	0x01ae01ae
 80176e4:	01ae01ae 	.word	0x01ae01ae
 80176e8:	01ae01ae 	.word	0x01ae01ae
 80176ec:	01ae01ae 	.word	0x01ae01ae
 80176f0:	01ae01ae 	.word	0x01ae01ae
 80176f4:	01ae01ae 	.word	0x01ae01ae
 80176f8:	01ae01ae 	.word	0x01ae01ae
 80176fc:	01ae01ae 	.word	0x01ae01ae
 8017700:	01ae01ae 	.word	0x01ae01ae
 8017704:	01ae01ae 	.word	0x01ae01ae
 8017708:	01ae01ae 	.word	0x01ae01ae
 801770c:	01ae01ae 	.word	0x01ae01ae
 8017710:	01ae01ae 	.word	0x01ae01ae
 8017714:	01ae01ae 	.word	0x01ae01ae
 8017718:	01ae01ae 	.word	0x01ae01ae
 801771c:	01ae01ae 	.word	0x01ae01ae
 8017720:	01ae01ae 	.word	0x01ae01ae
 8017724:	01ae01ae 	.word	0x01ae01ae
 8017728:	01ae01ae 	.word	0x01ae01ae
 801772c:	01ae01ae 	.word	0x01ae01ae
 8017730:	01ae01ae 	.word	0x01ae01ae
 8017734:	01ae01ae 	.word	0x01ae01ae
 8017738:	01ae01ae 	.word	0x01ae01ae
 801773c:	01ae01ae 	.word	0x01ae01ae
 8017740:	01ae01ae 	.word	0x01ae01ae
 8017744:	01ae01ae 	.word	0x01ae01ae
 8017748:	01ae01ae 	.word	0x01ae01ae
 801774c:	01ae01ae 	.word	0x01ae01ae
 8017750:	01ae01ae 	.word	0x01ae01ae
 8017754:	01ae01ae 	.word	0x01ae01ae
 8017758:	01ae01ae 	.word	0x01ae01ae
 801775c:	01ae01ae 	.word	0x01ae01ae
 8017760:	00ef01ae 	.word	0x00ef01ae
 8017764:	010700fc 	.word	0x010700fc
 8017768:	010e012c 	.word	0x010e012c
 801776c:	01ae011a 	.word	0x01ae011a
 8017770:	013d00d5 	.word	0x013d00d5
 8017774:	019f014e 	.word	0x019f014e
 8017778:	01870166 	.word	0x01870166
 801777c:	01ae01ae 	.word	0x01ae01ae
 8017780:	019701ae 	.word	0x019701ae
 8017784:	01970197 	.word	0x01970197
 8017788:	01970197 	.word	0x01970197
 801778c:	01970197 	.word	0x01970197
 8017790:	01ae0197 	.word	0x01ae0197
 8017794:	019b019b 	.word	0x019b019b
 8017798:	019b019b 	.word	0x019b019b
 801779c:	019b019b 	.word	0x019b019b
 80177a0:	019f01ae 	.word	0x019f01ae
 80177a4:	015e019f 	.word	0x015e019f
 80177a8:	013401ae 	.word	0x013401ae
            if(char_counter == 0)
 80177ac:	4ba3      	ldr	r3, [pc, #652]	@ (8017a3c <protocol_enqueue_realtime_command+0x3e4>)
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	f040 811f 	bne.w	80179f4 <protocol_enqueue_realtime_command+0x39c>
                keep_rt_commands = !settings.flags.legacy_rt_commands;
 80177b6:	4ba2      	ldr	r3, [pc, #648]	@ (8017a40 <protocol_enqueue_realtime_command+0x3e8>)
 80177b8:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 80177bc:	099b      	lsrs	r3, r3, #6
 80177be:	f083 0301 	eor.w	r3, r3, #1
 80177c2:	f003 0301 	and.w	r3, r3, #1
 80177c6:	4a9f      	ldr	r2, [pc, #636]	@ (8017a44 <protocol_enqueue_realtime_command+0x3ec>)
 80177c8:	7013      	strb	r3, [r2, #0]
    bool drop = false;
 80177ca:	2500      	movs	r5, #0
 80177cc:	e0bc      	b.n	8017948 <protocol_enqueue_realtime_command+0x2f0>
            system_set_exec_state_flag(EXEC_STOP);
 80177ce:	4d9e      	ldr	r5, [pc, #632]	@ (8017a48 <protocol_enqueue_realtime_command+0x3f0>)
 80177d0:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80177d2:	2110      	movs	r1, #16
 80177d4:	489d      	ldr	r0, [pc, #628]	@ (8017a4c <protocol_enqueue_realtime_command+0x3f4>)
 80177d6:	4798      	blx	r3
            char_counter = 0;
 80177d8:	4b98      	ldr	r3, [pc, #608]	@ (8017a3c <protocol_enqueue_realtime_command+0x3e4>)
 80177da:	2200      	movs	r2, #0
 80177dc:	601a      	str	r2, [r3, #0]
            hal.stream.cancel_read_buffer();
 80177de:	f8d5 30cc 	ldr.w	r3, [r5, #204]	@ 0xcc
 80177e2:	4798      	blx	r3
            drop = true;
 80177e4:	2501      	movs	r5, #1
 80177e6:	e120      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
            if(!hal.control.get_state().e_stop)
 80177e8:	4b97      	ldr	r3, [pc, #604]	@ (8017a48 <protocol_enqueue_realtime_command+0x3f0>)
 80177ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80177ec:	4798      	blx	r3
 80177ee:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80177f2:	d001      	beq.n	80177f8 <protocol_enqueue_realtime_command+0x1a0>
            drop = true;
 80177f4:	2501      	movs	r5, #1
 80177f6:	e118      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
                mc_reset();
 80177f8:	f7fc fe4e 	bl	8014498 <mc_reset>
            drop = true;
 80177fc:	2501      	movs	r5, #1
 80177fe:	e114      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
            mc_reset();
 8017800:	f7fc fe4a 	bl	8014498 <mc_reset>
            sys.flags.exit = On;
 8017804:	4a92      	ldr	r2, [pc, #584]	@ (8017a50 <protocol_enqueue_realtime_command+0x3f8>)
 8017806:	7d93      	ldrb	r3, [r2, #22]
 8017808:	f043 0308 	orr.w	r3, r3, #8
 801780c:	7593      	strb	r3, [r2, #22]
            drop = true;
 801780e:	2501      	movs	r5, #1
 8017810:	e10b      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
                report.value = (uint32_t)Report_All;
 8017812:	4890      	ldr	r0, [pc, #576]	@ (8017a54 <protocol_enqueue_realtime_command+0x3fc>)
                report.tool_offset = sys.report.tool_offset;
 8017814:	4d8e      	ldr	r5, [pc, #568]	@ (8017a50 <protocol_enqueue_realtime_command+0x3f8>)
 8017816:	f895 3031 	ldrb.w	r3, [r5, #49]	@ 0x31
 801781a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801781e:	f363 208a 	bfi	r0, r3, #10, #1
                report.m66result = sys.var5399 > -2;
 8017822:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8017824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017828:	bfb4      	ite	lt
 801782a:	2300      	movlt	r3, #0
 801782c:	2301      	movge	r3, #1
 801782e:	f363 20cb 	bfi	r0, r3, #11, #1
                system_add_rt_report((report_tracking_t)report.value);
 8017832:	f009 ff25 	bl	8021680 <system_add_rt_report>
            system_set_exec_state_flag(EXEC_STATUS_REPORT);
 8017836:	4b84      	ldr	r3, [pc, #528]	@ (8017a48 <protocol_enqueue_realtime_command+0x3f0>)
 8017838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801783a:	2101      	movs	r1, #1
 801783c:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8017840:	4798      	blx	r3
            drop = true;
 8017842:	2501      	movs	r5, #1
 8017844:	e0f1      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
            if(!sys.flags.auto_reporting)
 8017846:	4b82      	ldr	r3, [pc, #520]	@ (8017a50 <protocol_enqueue_realtime_command+0x3f8>)
 8017848:	7ddb      	ldrb	r3, [r3, #23]
 801784a:	f013 0f02 	tst.w	r3, #2
 801784e:	f040 8133 	bne.w	8017ab8 <protocol_enqueue_realtime_command+0x460>
                system_set_exec_state_flag(EXEC_STATUS_REPORT);
 8017852:	4b7d      	ldr	r3, [pc, #500]	@ (8017a48 <protocol_enqueue_realtime_command+0x3f0>)
 8017854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017856:	2101      	movs	r1, #1
 8017858:	487c      	ldr	r0, [pc, #496]	@ (8017a4c <protocol_enqueue_realtime_command+0x3f4>)
 801785a:	4798      	blx	r3
            drop = true;
 801785c:	2501      	movs	r5, #1
 801785e:	e0e4      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
            system_set_exec_state_flag(EXEC_CYCLE_START);
 8017860:	4b79      	ldr	r3, [pc, #484]	@ (8017a48 <protocol_enqueue_realtime_command+0x3f0>)
 8017862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017864:	2102      	movs	r1, #2
 8017866:	4879      	ldr	r0, [pc, #484]	@ (8017a4c <protocol_enqueue_realtime_command+0x3f4>)
 8017868:	4798      	blx	r3
            gc_state.tool_change = false;
 801786a:	4b7b      	ldr	r3, [pc, #492]	@ (8017a58 <protocol_enqueue_realtime_command+0x400>)
 801786c:	2200      	movs	r2, #0
 801786e:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
            drop = true;
 8017872:	2501      	movs	r5, #1
 8017874:	e0d9      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
            system_set_exec_state_flag(EXEC_FEED_HOLD);
 8017876:	4b74      	ldr	r3, [pc, #464]	@ (8017a48 <protocol_enqueue_realtime_command+0x3f0>)
 8017878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801787a:	2108      	movs	r1, #8
 801787c:	4873      	ldr	r0, [pc, #460]	@ (8017a4c <protocol_enqueue_realtime_command+0x3f4>)
 801787e:	4798      	blx	r3
            drop = true;
 8017880:	2501      	movs	r5, #1
 8017882:	e0d2      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
            if(state_get() != STATE_SAFETY_DOOR) {
 8017884:	f006 ff3e 	bl	801e704 <state_get>
 8017888:	2840      	cmp	r0, #64	@ 0x40
 801788a:	f000 80b5 	beq.w	80179f8 <protocol_enqueue_realtime_command+0x3a0>
                system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 801788e:	4b6e      	ldr	r3, [pc, #440]	@ (8017a48 <protocol_enqueue_realtime_command+0x3f0>)
 8017890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017892:	2140      	movs	r1, #64	@ 0x40
 8017894:	486d      	ldr	r0, [pc, #436]	@ (8017a4c <protocol_enqueue_realtime_command+0x3f4>)
 8017896:	4798      	blx	r3
                drop = true;
 8017898:	2501      	movs	r5, #1
 801789a:	e0c6      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
            char_counter = 0;
 801789c:	4b67      	ldr	r3, [pc, #412]	@ (8017a3c <protocol_enqueue_realtime_command+0x3e4>)
 801789e:	2200      	movs	r2, #0
 80178a0:	601a      	str	r2, [r3, #0]
            hal.stream.cancel_read_buffer();
 80178a2:	4b69      	ldr	r3, [pc, #420]	@ (8017a48 <protocol_enqueue_realtime_command+0x3f0>)
 80178a4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80178a8:	4798      	blx	r3
            if(grbl.on_jog_cancel)
 80178aa:	4b6c      	ldr	r3, [pc, #432]	@ (8017a5c <protocol_enqueue_realtime_command+0x404>)
 80178ac:	f8d3 50c0 	ldr.w	r5, [r3, #192]	@ 0xc0
 80178b0:	2d00      	cmp	r5, #0
 80178b2:	f000 8103 	beq.w	8017abc <protocol_enqueue_realtime_command+0x464>
                grbl.on_jog_cancel(state_get());
 80178b6:	f006 ff25 	bl	801e704 <state_get>
 80178ba:	47a8      	blx	r5
            drop = true;
 80178bc:	2501      	movs	r5, #1
 80178be:	e0b4      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
            system_set_exec_state_flag(EXEC_GCODE_REPORT);
 80178c0:	4b61      	ldr	r3, [pc, #388]	@ (8017a48 <protocol_enqueue_realtime_command+0x3f0>)
 80178c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80178c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80178c8:	4860      	ldr	r0, [pc, #384]	@ (8017a4c <protocol_enqueue_realtime_command+0x3f4>)
 80178ca:	4798      	blx	r3
            drop = true;
 80178cc:	2501      	movs	r5, #1
 80178ce:	e0ac      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
            if(hal.probe.connected_toggle)
 80178d0:	4b5d      	ldr	r3, [pc, #372]	@ (8017a48 <protocol_enqueue_realtime_command+0x3f0>)
 80178d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	f000 8090 	beq.w	80179fc <protocol_enqueue_realtime_command+0x3a4>
                hal.probe.connected_toggle();
 80178dc:	4798      	blx	r3
    bool drop = false;
 80178de:	2500      	movs	r5, #0
 80178e0:	e032      	b.n	8017948 <protocol_enqueue_realtime_command+0x2f0>
            if(!hal.signals_cap.stop_disable) // Not available as realtime command if HAL supports physical switch
 80178e2:	4b59      	ldr	r3, [pc, #356]	@ (8017a48 <protocol_enqueue_realtime_command+0x3f0>)
 80178e4:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 80178e8:	f013 0f20 	tst.w	r3, #32
 80178ec:	f040 8088 	bne.w	8017a00 <protocol_enqueue_realtime_command+0x3a8>
                sys.flags.optional_stop_disable = !sys.flags.optional_stop_disable;
 80178f0:	4957      	ldr	r1, [pc, #348]	@ (8017a50 <protocol_enqueue_realtime_command+0x3f8>)
 80178f2:	7d8b      	ldrb	r3, [r1, #22]
 80178f4:	099a      	lsrs	r2, r3, #6
 80178f6:	f082 0201 	eor.w	r2, r2, #1
 80178fa:	f362 1386 	bfi	r3, r2, #6, #1
 80178fe:	758b      	strb	r3, [r1, #22]
    bool drop = false;
 8017900:	2500      	movs	r5, #0
 8017902:	e021      	b.n	8017948 <protocol_enqueue_realtime_command+0x2f0>
            if(!hal.signals_cap.single_block) // Not available as realtime command if HAL supports physical switch
 8017904:	4b50      	ldr	r3, [pc, #320]	@ (8017a48 <protocol_enqueue_realtime_command+0x3f0>)
 8017906:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
 801790a:	f013 0f08 	tst.w	r3, #8
 801790e:	d179      	bne.n	8017a04 <protocol_enqueue_realtime_command+0x3ac>
                sys.flags.single_block = !sys.flags.single_block;
 8017910:	494f      	ldr	r1, [pc, #316]	@ (8017a50 <protocol_enqueue_realtime_command+0x3f8>)
 8017912:	7d8b      	ldrb	r3, [r1, #22]
 8017914:	43da      	mvns	r2, r3
 8017916:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801791a:	f362 13c7 	bfi	r3, r2, #7, #1
 801791e:	758b      	strb	r3, [r1, #22]
    bool drop = false;
 8017920:	2500      	movs	r5, #0
 8017922:	e011      	b.n	8017948 <protocol_enqueue_realtime_command+0x2f0>
            system_set_exec_state_flag(EXEC_PID_REPORT);
 8017924:	4b48      	ldr	r3, [pc, #288]	@ (8017a48 <protocol_enqueue_realtime_command+0x3f0>)
 8017926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017928:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801792c:	4847      	ldr	r0, [pc, #284]	@ (8017a4c <protocol_enqueue_realtime_command+0x3f4>)
 801792e:	4798      	blx	r3
            drop = true;
 8017930:	2501      	movs	r5, #1
 8017932:	e07a      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
            if((drop = hal.stream.type == StreamType_MPG))
 8017934:	4b44      	ldr	r3, [pc, #272]	@ (8017a48 <protocol_enqueue_realtime_command+0x3f0>)
 8017936:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 801793a:	2b01      	cmp	r3, #1
 801793c:	bf0c      	ite	eq
 801793e:	2501      	moveq	r5, #1
 8017940:	2500      	movne	r5, #0
 8017942:	d013      	beq.n	801796c <protocol_enqueue_realtime_command+0x314>
    if(!drop) switch ((unsigned char)c) {
 8017944:	2d00      	cmp	r5, #0
 8017946:	d170      	bne.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
 8017948:	2c3f      	cmp	r4, #63	@ 0x3f
 801794a:	d05f      	beq.n	8017a0c <protocol_enqueue_realtime_command+0x3b4>
 801794c:	2c7e      	cmp	r4, #126	@ 0x7e
 801794e:	f000 808b 	beq.w	8017a68 <protocol_enqueue_realtime_command+0x410>
 8017952:	2c21      	cmp	r4, #33	@ 0x21
 8017954:	f000 809c 	beq.w	8017a90 <protocol_enqueue_realtime_command+0x438>
            drop = !(keep_rt_commands || (unsigned char)c < 0x7F);
 8017958:	4b3a      	ldr	r3, [pc, #232]	@ (8017a44 <protocol_enqueue_realtime_command+0x3ec>)
 801795a:	781b      	ldrb	r3, [r3, #0]
 801795c:	2b00      	cmp	r3, #0
 801795e:	f040 80a7 	bne.w	8017ab0 <protocol_enqueue_realtime_command+0x458>
 8017962:	2c7e      	cmp	r4, #126	@ 0x7e
 8017964:	f200 80a6 	bhi.w	8017ab4 <protocol_enqueue_realtime_command+0x45c>
 8017968:	2500      	movs	r5, #0
 801796a:	e05e      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
                protocol_enqueue_foreground_task(stream_mpg_set_mode, NULL);
 801796c:	2100      	movs	r1, #0
 801796e:	483c      	ldr	r0, [pc, #240]	@ (8017a60 <protocol_enqueue_realtime_command+0x408>)
 8017970:	f7ff fe4c 	bl	801760c <protocol_enqueue_foreground_task>
 8017974:	e7e6      	b.n	8017944 <protocol_enqueue_realtime_command+0x2ec>
            if((drop = settings.report_interval != 0))
 8017976:	4b32      	ldr	r3, [pc, #200]	@ (8017a40 <protocol_enqueue_realtime_command+0x3e8>)
 8017978:	8a9b      	ldrh	r3, [r3, #20]
 801797a:	2b00      	cmp	r3, #0
 801797c:	bf14      	ite	ne
 801797e:	2501      	movne	r5, #1
 8017980:	2500      	moveq	r5, #0
 8017982:	d0df      	beq.n	8017944 <protocol_enqueue_realtime_command+0x2ec>
                sys.flags.auto_reporting = !sys.flags.auto_reporting;
 8017984:	4932      	ldr	r1, [pc, #200]	@ (8017a50 <protocol_enqueue_realtime_command+0x3f8>)
 8017986:	7dcb      	ldrb	r3, [r1, #23]
 8017988:	085a      	lsrs	r2, r3, #1
 801798a:	f082 0201 	eor.w	r2, r2, #1
 801798e:	f362 0341 	bfi	r3, r2, #1, #1
 8017992:	75cb      	strb	r3, [r1, #23]
 8017994:	e7d6      	b.n	8017944 <protocol_enqueue_realtime_command+0x2ec>
            enqueue_feed_override(c);
 8017996:	f7fe f949 	bl	8015c2c <enqueue_feed_override>
            drop = true;
 801799a:	2501      	movs	r5, #1
 801799c:	e045      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
            enqueue_spindle_override((uint8_t)c);
 801799e:	f7fe f967 	bl	8015c70 <enqueue_spindle_override>
            drop = true;
 80179a2:	2501      	movs	r5, #1
 80179a4:	e041      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
            enqueue_coolant_override((uint8_t)c);
 80179a6:	f7fe f985 	bl	8015cb4 <enqueue_coolant_override>
            drop = true;
 80179aa:	2501      	movs	r5, #1
 80179ac:	e03d      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
            if(esc && hal.reboot)
 80179ae:	4b2d      	ldr	r3, [pc, #180]	@ (8017a64 <protocol_enqueue_realtime_command+0x40c>)
 80179b0:	781d      	ldrb	r5, [r3, #0]
 80179b2:	2d00      	cmp	r5, #0
 80179b4:	d0c8      	beq.n	8017948 <protocol_enqueue_realtime_command+0x2f0>
 80179b6:	4b24      	ldr	r3, [pc, #144]	@ (8017a48 <protocol_enqueue_realtime_command+0x3f0>)
 80179b8:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 80179bc:	b323      	cbz	r3, 8017a08 <protocol_enqueue_realtime_command+0x3b0>
                hal.reboot(); // Force MCU reboot. This call should never return.
 80179be:	4798      	blx	r3
    bool drop = false;
 80179c0:	2500      	movs	r5, #0
 80179c2:	e7c1      	b.n	8017948 <protocol_enqueue_realtime_command+0x2f0>
            if((c < ' ' && c != ASCII_BS) || (c > ASCII_DEL && c <= 0xBF))
 80179c4:	281f      	cmp	r0, #31
 80179c6:	d80d      	bhi.n	80179e4 <protocol_enqueue_realtime_command+0x38c>
 80179c8:	2808      	cmp	r0, #8
 80179ca:	d009      	beq.n	80179e0 <protocol_enqueue_realtime_command+0x388>
                drop = grbl.on_unknown_realtime_cmd == NULL || grbl.on_unknown_realtime_cmd(c);
 80179cc:	4b23      	ldr	r3, [pc, #140]	@ (8017a5c <protocol_enqueue_realtime_command+0x404>)
 80179ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d074      	beq.n	8017ac0 <protocol_enqueue_realtime_command+0x468>
 80179d6:	4620      	mov	r0, r4
 80179d8:	4798      	blx	r3
 80179da:	4605      	mov	r5, r0
 80179dc:	bb28      	cbnz	r0, 8017a2a <protocol_enqueue_realtime_command+0x3d2>
 80179de:	e7b3      	b.n	8017948 <protocol_enqueue_realtime_command+0x2f0>
    bool drop = false;
 80179e0:	2500      	movs	r5, #0
 80179e2:	e7af      	b.n	8017944 <protocol_enqueue_realtime_command+0x2ec>
            if((c < ' ' && c != ASCII_BS) || (c > ASCII_DEL && c <= 0xBF))
 80179e4:	f080 0380 	eor.w	r3, r0, #128	@ 0x80
 80179e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80179ea:	d9ef      	bls.n	80179cc <protocol_enqueue_realtime_command+0x374>
    bool drop = false;
 80179ec:	2500      	movs	r5, #0
 80179ee:	e7ab      	b.n	8017948 <protocol_enqueue_realtime_command+0x2f0>
    switch ((unsigned char)c) {
 80179f0:	2500      	movs	r5, #0
 80179f2:	e7a9      	b.n	8017948 <protocol_enqueue_realtime_command+0x2f0>
    bool drop = false;
 80179f4:	2500      	movs	r5, #0
 80179f6:	e7a7      	b.n	8017948 <protocol_enqueue_realtime_command+0x2f0>
 80179f8:	2500      	movs	r5, #0
 80179fa:	e7a5      	b.n	8017948 <protocol_enqueue_realtime_command+0x2f0>
 80179fc:	2500      	movs	r5, #0
 80179fe:	e7a3      	b.n	8017948 <protocol_enqueue_realtime_command+0x2f0>
 8017a00:	2500      	movs	r5, #0
 8017a02:	e7a1      	b.n	8017948 <protocol_enqueue_realtime_command+0x2f0>
 8017a04:	2500      	movs	r5, #0
 8017a06:	e79f      	b.n	8017948 <protocol_enqueue_realtime_command+0x2f0>
 8017a08:	2500      	movs	r5, #0
 8017a0a:	e79d      	b.n	8017948 <protocol_enqueue_realtime_command+0x2f0>
            if(!keep_rt_commands || settings.flags.legacy_rt_commands) {
 8017a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8017a44 <protocol_enqueue_realtime_command+0x3ec>)
 8017a0e:	781b      	ldrb	r3, [r3, #0]
 8017a10:	b12b      	cbz	r3, 8017a1e <protocol_enqueue_realtime_command+0x3c6>
 8017a12:	4b0b      	ldr	r3, [pc, #44]	@ (8017a40 <protocol_enqueue_realtime_command+0x3e8>)
 8017a14:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8017a18:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8017a1c:	d005      	beq.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
                system_set_exec_state_flag(EXEC_STATUS_REPORT);
 8017a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8017a48 <protocol_enqueue_realtime_command+0x3f0>)
 8017a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017a22:	2101      	movs	r1, #1
 8017a24:	4809      	ldr	r0, [pc, #36]	@ (8017a4c <protocol_enqueue_realtime_command+0x3f4>)
 8017a26:	4798      	blx	r3
                drop = true;
 8017a28:	2501      	movs	r5, #1
    esc = c == ASCII_ESC;
 8017a2a:	2c1b      	cmp	r4, #27
 8017a2c:	bf14      	ite	ne
 8017a2e:	2400      	movne	r4, #0
 8017a30:	2401      	moveq	r4, #1
 8017a32:	4b0c      	ldr	r3, [pc, #48]	@ (8017a64 <protocol_enqueue_realtime_command+0x40c>)
 8017a34:	701c      	strb	r4, [r3, #0]
}
 8017a36:	4628      	mov	r0, r5
 8017a38:	bd38      	pop	{r3, r4, r5, pc}
 8017a3a:	bf00      	nop
 8017a3c:	20001a3c 	.word	0x20001a3c
 8017a40:	20001bc4 	.word	0x20001bc4
 8017a44:	20001830 	.word	0x20001830
 8017a48:	200011ac 	.word	0x200011ac
 8017a4c:	200014d4 	.word	0x200014d4
 8017a50:	2000148c 	.word	0x2000148c
 8017a54:	8003ffff 	.word	0x8003ffff
 8017a58:	20000ee4 	.word	0x20000ee4
 8017a5c:	20001394 	.word	0x20001394
 8017a60:	0802077d 	.word	0x0802077d
 8017a64:	200017a0 	.word	0x200017a0
            if(!keep_rt_commands || settings.flags.legacy_rt_commands) {
 8017a68:	4b16      	ldr	r3, [pc, #88]	@ (8017ac4 <protocol_enqueue_realtime_command+0x46c>)
 8017a6a:	781b      	ldrb	r3, [r3, #0]
 8017a6c:	b12b      	cbz	r3, 8017a7a <protocol_enqueue_realtime_command+0x422>
 8017a6e:	4b16      	ldr	r3, [pc, #88]	@ (8017ac8 <protocol_enqueue_realtime_command+0x470>)
 8017a70:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8017a74:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8017a78:	d0d7      	beq.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
                system_set_exec_state_flag(EXEC_CYCLE_START);
 8017a7a:	4b14      	ldr	r3, [pc, #80]	@ (8017acc <protocol_enqueue_realtime_command+0x474>)
 8017a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017a7e:	2102      	movs	r1, #2
 8017a80:	4813      	ldr	r0, [pc, #76]	@ (8017ad0 <protocol_enqueue_realtime_command+0x478>)
 8017a82:	4798      	blx	r3
                gc_state.tool_change = false;
 8017a84:	4b13      	ldr	r3, [pc, #76]	@ (8017ad4 <protocol_enqueue_realtime_command+0x47c>)
 8017a86:	2200      	movs	r2, #0
 8017a88:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
                drop = true;
 8017a8c:	2501      	movs	r5, #1
 8017a8e:	e7cc      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
            if(!keep_rt_commands || settings.flags.legacy_rt_commands) {
 8017a90:	4b0c      	ldr	r3, [pc, #48]	@ (8017ac4 <protocol_enqueue_realtime_command+0x46c>)
 8017a92:	781b      	ldrb	r3, [r3, #0]
 8017a94:	b12b      	cbz	r3, 8017aa2 <protocol_enqueue_realtime_command+0x44a>
 8017a96:	4b0c      	ldr	r3, [pc, #48]	@ (8017ac8 <protocol_enqueue_realtime_command+0x470>)
 8017a98:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8017a9c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8017aa0:	d0c3      	beq.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
                system_set_exec_state_flag(EXEC_FEED_HOLD);
 8017aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8017acc <protocol_enqueue_realtime_command+0x474>)
 8017aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017aa6:	2108      	movs	r1, #8
 8017aa8:	4809      	ldr	r0, [pc, #36]	@ (8017ad0 <protocol_enqueue_realtime_command+0x478>)
 8017aaa:	4798      	blx	r3
                drop = true;
 8017aac:	2501      	movs	r5, #1
 8017aae:	e7bc      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
            drop = !(keep_rt_commands || (unsigned char)c < 0x7F);
 8017ab0:	2500      	movs	r5, #0
 8017ab2:	e7ba      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
 8017ab4:	2501      	movs	r5, #1
            break;
 8017ab6:	e7b8      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
            drop = true;
 8017ab8:	2501      	movs	r5, #1
 8017aba:	e7b6      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
            drop = true;
 8017abc:	2501      	movs	r5, #1
 8017abe:	e7b4      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
                drop = grbl.on_unknown_realtime_cmd == NULL || grbl.on_unknown_realtime_cmd(c);
 8017ac0:	2501      	movs	r5, #1
 8017ac2:	e7b2      	b.n	8017a2a <protocol_enqueue_realtime_command+0x3d2>
 8017ac4:	20001830 	.word	0x20001830
 8017ac8:	20001bc4 	.word	0x20001bc4
 8017acc:	200011ac 	.word	0x200011ac
 8017ad0:	200014d4 	.word	0x200014d4
 8017ad4:	20000ee4 	.word	0x20000ee4

08017ad8 <matchstar>:
    return 0;
}

/* matchstar: search for c*regexp at beginning of text */
int matchstar(int c, char *regexp, char *text)
{
 8017ad8:	b570      	push	{r4, r5, r6, lr}
 8017ada:	4605      	mov	r5, r0
 8017adc:	460e      	mov	r6, r1
 8017ade:	4614      	mov	r4, r2
    do {    /* a * matches zero or more instances */
        if (matchhere(regexp, text))
 8017ae0:	4621      	mov	r1, r4
 8017ae2:	4630      	mov	r0, r6
 8017ae4:	f000 f80d 	bl	8017b02 <matchhere>
 8017ae8:	4602      	mov	r2, r0
 8017aea:	b938      	cbnz	r0, 8017afc <matchstar+0x24>
            return 1;
    } while (*text != '\0' && (*text++ == c || c == '.'));
 8017aec:	7823      	ldrb	r3, [r4, #0]
 8017aee:	b133      	cbz	r3, 8017afe <matchstar+0x26>
 8017af0:	3401      	adds	r4, #1
 8017af2:	42ab      	cmp	r3, r5
 8017af4:	d0f4      	beq.n	8017ae0 <matchstar+0x8>
 8017af6:	2d2e      	cmp	r5, #46	@ 0x2e
 8017af8:	d0f2      	beq.n	8017ae0 <matchstar+0x8>
 8017afa:	e000      	b.n	8017afe <matchstar+0x26>
            return 1;
 8017afc:	2201      	movs	r2, #1
    return 0;
}
 8017afe:	4610      	mov	r0, r2
 8017b00:	bd70      	pop	{r4, r5, r6, pc}

08017b02 <matchhere>:
{
 8017b02:	b508      	push	{r3, lr}
    if (regexp[0] == '\0')
 8017b04:	7803      	ldrb	r3, [r0, #0]
 8017b06:	b1f3      	cbz	r3, 8017b46 <matchhere+0x44>
    if (regexp[1] == '*')
 8017b08:	7842      	ldrb	r2, [r0, #1]
 8017b0a:	2a2a      	cmp	r2, #42	@ 0x2a
 8017b0c:	d009      	beq.n	8017b22 <matchhere+0x20>
    if (regexp[0] == '$' && regexp[1] == '\0')
 8017b0e:	2b24      	cmp	r3, #36	@ 0x24
 8017b10:	d00d      	beq.n	8017b2e <matchhere+0x2c>
    if (*text!='\0' && (regexp[0]=='.' || regexp[0]==*text))
 8017b12:	780a      	ldrb	r2, [r1, #0]
 8017b14:	b1ca      	cbz	r2, 8017b4a <matchhere+0x48>
 8017b16:	2b2e      	cmp	r3, #46	@ 0x2e
 8017b18:	d010      	beq.n	8017b3c <matchhere+0x3a>
 8017b1a:	4293      	cmp	r3, r2
 8017b1c:	d00e      	beq.n	8017b3c <matchhere+0x3a>
    return 0;
 8017b1e:	2000      	movs	r0, #0
 8017b20:	e012      	b.n	8017b48 <matchhere+0x46>
        return matchstar(regexp[0], regexp+2, text);
 8017b22:	460a      	mov	r2, r1
 8017b24:	1c81      	adds	r1, r0, #2
 8017b26:	4618      	mov	r0, r3
 8017b28:	f7ff ffd6 	bl	8017ad8 <matchstar>
 8017b2c:	e00c      	b.n	8017b48 <matchhere+0x46>
    if (regexp[0] == '$' && regexp[1] == '\0')
 8017b2e:	2a00      	cmp	r2, #0
 8017b30:	d1ef      	bne.n	8017b12 <matchhere+0x10>
        return *text == '\0';
 8017b32:	7808      	ldrb	r0, [r1, #0]
 8017b34:	fab0 f080 	clz	r0, r0
 8017b38:	0940      	lsrs	r0, r0, #5
 8017b3a:	e005      	b.n	8017b48 <matchhere+0x46>
        return matchhere(regexp+1, text+1);
 8017b3c:	3101      	adds	r1, #1
 8017b3e:	3001      	adds	r0, #1
 8017b40:	f7ff ffdf 	bl	8017b02 <matchhere>
 8017b44:	e000      	b.n	8017b48 <matchhere+0x46>
        return 1;
 8017b46:	2001      	movs	r0, #1
}
 8017b48:	bd08      	pop	{r3, pc}
    return 0;
 8017b4a:	2000      	movs	r0, #0
 8017b4c:	e7fc      	b.n	8017b48 <matchhere+0x46>
	...

08017b50 <axis_signals_tostring>:
// NOTE: returns pointer to null terminator!
inline static char *axis_signals_tostring (char *buf, axes_signals_t signals)
{
    uint_fast16_t idx = 0;

    signals.mask &= AXES_BITMASK;
 8017b50:	f001 0107 	and.w	r1, r1, #7
    uint_fast16_t idx = 0;
 8017b54:	2300      	movs	r3, #0

    while(signals.mask) {
 8017b56:	e002      	b.n	8017b5e <axis_signals_tostring+0xe>
        if(signals.mask & 0x01)
            *buf++ = *axis_letter[idx];
        idx++;
 8017b58:	3301      	adds	r3, #1
        signals.mask >>= 1;
 8017b5a:	f3c1 0147 	ubfx	r1, r1, #1, #8
    while(signals.mask) {
 8017b5e:	b2c9      	uxtb	r1, r1
 8017b60:	b149      	cbz	r1, 8017b76 <axis_signals_tostring+0x26>
        if(signals.mask & 0x01)
 8017b62:	f011 0f01 	tst.w	r1, #1
 8017b66:	d0f7      	beq.n	8017b58 <axis_signals_tostring+0x8>
            *buf++ = *axis_letter[idx];
 8017b68:	4a04      	ldr	r2, [pc, #16]	@ (8017b7c <axis_signals_tostring+0x2c>)
 8017b6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8017b6e:	7812      	ldrb	r2, [r2, #0]
 8017b70:	f800 2b01 	strb.w	r2, [r0], #1
 8017b74:	e7f0      	b.n	8017b58 <axis_signals_tostring+0x8>
    };

    *buf = '\0';
 8017b76:	2300      	movs	r3, #0
 8017b78:	7003      	strb	r3, [r0, #0]

    return buf;
}
 8017b7a:	4770      	bx	lr
 8017b7c:	0802b218 	.word	0x0802b218

08017b80 <control_signals_tostring>:
{
    static const char signals_map[] = "RHSDLTEOFM Q  P ";

    char *map = (char *)signals_map;

    if(!signals.deasserted)
 8017b80:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8017b84:	d12e      	bne.n	8017be4 <control_signals_tostring+0x64>
    char *map = (char *)signals_map;
 8017b86:	4b1a      	ldr	r3, [pc, #104]	@ (8017bf0 <control_signals_tostring+0x70>)
 8017b88:	e01f      	b.n	8017bca <control_signals_tostring+0x4a>
                    if(hal.signals_cap.safety_door_ajar)
                        *buf++ = *map;
                    break;

                default:
                    *buf++ = *map;
 8017b8a:	f800 2b01 	strb.w	r2, [r0], #1
                    break;
            }
        }

        map++;
 8017b8e:	3301      	adds	r3, #1
        signals.mask >>= 1;
 8017b90:	f3c1 014f 	ubfx	r1, r1, #1, #16
      while(signals.mask) {
 8017b94:	b289      	uxth	r1, r1
 8017b96:	b181      	cbz	r1, 8017bba <control_signals_tostring+0x3a>
        if(signals.mask & 0x01) {
 8017b98:	f011 0f01 	tst.w	r1, #1
 8017b9c:	d0f7      	beq.n	8017b8e <control_signals_tostring+0xe>
            switch(*map) {
 8017b9e:	781a      	ldrb	r2, [r3, #0]
 8017ba0:	2a20      	cmp	r2, #32
 8017ba2:	d0f4      	beq.n	8017b8e <control_signals_tostring+0xe>
 8017ba4:	2a44      	cmp	r2, #68	@ 0x44
 8017ba6:	d1f0      	bne.n	8017b8a <control_signals_tostring+0xa>
                    if(hal.signals_cap.safety_door_ajar)
 8017ba8:	4c12      	ldr	r4, [pc, #72]	@ (8017bf4 <control_signals_tostring+0x74>)
 8017baa:	f894 c1dc 	ldrb.w	ip, [r4, #476]	@ 0x1dc
 8017bae:	f01c 0f08 	tst.w	ip, #8
 8017bb2:	d0ec      	beq.n	8017b8e <control_signals_tostring+0xe>
                        *buf++ = *map;
 8017bb4:	f800 2b01 	strb.w	r2, [r0], #1
 8017bb8:	e7e9      	b.n	8017b8e <control_signals_tostring+0xe>
    }

    *buf = '\0';
 8017bba:	2300      	movs	r3, #0
 8017bbc:	7003      	strb	r3, [r0, #0]

    return buf;
}
 8017bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bc2:	4770      	bx	lr
        map++;
 8017bc4:	3301      	adds	r3, #1
        signals.mask >>= 1;
 8017bc6:	f3c1 014f 	ubfx	r1, r1, #1, #16
      while(signals.mask) {
 8017bca:	b289      	uxth	r1, r1
 8017bcc:	b151      	cbz	r1, 8017be4 <control_signals_tostring+0x64>
        if(signals.mask & 0x01) {
 8017bce:	f011 0f01 	tst.w	r1, #1
 8017bd2:	d0f7      	beq.n	8017bc4 <control_signals_tostring+0x44>
            switch(*map) {
 8017bd4:	781a      	ldrb	r2, [r3, #0]
 8017bd6:	2a20      	cmp	r2, #32
 8017bd8:	d0f4      	beq.n	8017bc4 <control_signals_tostring+0x44>
 8017bda:	2a44      	cmp	r2, #68	@ 0x44
 8017bdc:	d005      	beq.n	8017bea <control_signals_tostring+0x6a>
                    *buf++ = *map;
 8017bde:	f800 2b01 	strb.w	r2, [r0], #1
                    break;
 8017be2:	e7ef      	b.n	8017bc4 <control_signals_tostring+0x44>
    *buf = '\0';
 8017be4:	2300      	movs	r3, #0
 8017be6:	7003      	strb	r3, [r0, #0]
}
 8017be8:	4770      	bx	lr
{
 8017bea:	b410      	push	{r4}
 8017bec:	e7dc      	b.n	8017ba8 <control_signals_tostring+0x28>
 8017bee:	bf00      	nop
 8017bf0:	0802bbac 	.word	0x0802bbac
 8017bf4:	200011ac 	.word	0x200011ac

08017bf8 <report_init_message>:
    return id;
}

// Welcome message
static void report_init_message (void)
{
 8017bf8:	b508      	push	{r3, lr}
    override_counter = wco_counter = 0;
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	4a04      	ldr	r2, [pc, #16]	@ (8017c10 <report_init_message+0x18>)
 8017bfe:	7013      	strb	r3, [r2, #0]
 8017c00:	4a04      	ldr	r2, [pc, #16]	@ (8017c14 <report_init_message+0x1c>)
 8017c02:	7013      	strb	r3, [r2, #0]

#if COMPATIBILITY_LEVEL == 0
    hal.stream.write_all(ASCII_EOL "GrblHAL " GRBL_VERSION " ['$' or '$HELP' for help]" ASCII_EOL);
 8017c04:	4b04      	ldr	r3, [pc, #16]	@ (8017c18 <report_init_message+0x20>)
 8017c06:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017c0a:	4804      	ldr	r0, [pc, #16]	@ (8017c1c <report_init_message+0x24>)
 8017c0c:	4798      	blx	r3
#else
    hal.stream.write_all(ASCII_EOL "Grbl " GRBL_VERSION " ['$' for help]" ASCII_EOL);
#endif
}
 8017c0e:	bd08      	pop	{r3, pc}
 8017c10:	20001a85 	.word	0x20001a85
 8017c14:	20001a86 	.word	0x20001a86
 8017c18:	200011ac 	.word	0x200011ac
 8017c1c:	0802b2f8 	.word	0x0802b2f8

08017c20 <report_help_message>:

// grblHAL help message
static void report_help_message (void)
{
 8017c20:	b508      	push	{r3, lr}
    hal.stream.write("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H $B ~ ! ? ctrl-x]" ASCII_EOL);
 8017c22:	4b03      	ldr	r3, [pc, #12]	@ (8017c30 <report_help_message+0x10>)
 8017c24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017c28:	4802      	ldr	r0, [pc, #8]	@ (8017c34 <report_help_message+0x14>)
 8017c2a:	4798      	blx	r3
}
 8017c2c:	bd08      	pop	{r3, pc}
 8017c2e:	bf00      	nop
 8017c30:	200011ac 	.word	0x200011ac
 8017c34:	0802b324 	.word	0x0802b324

08017c38 <cmp_settings>:

// grblHAL settings print out.

static int cmp_settings (const void *a, const void *b)
{
  return (*(setting_detail_t **)(a))->id - (*(setting_detail_t **)(b))->id;
 8017c38:	6803      	ldr	r3, [r0, #0]
 8017c3a:	8818      	ldrh	r0, [r3, #0]
 8017c3c:	680b      	ldr	r3, [r1, #0]
 8017c3e:	881b      	ldrh	r3, [r3, #0]
}
 8017c40:	1ac0      	subs	r0, r0, r3
 8017c42:	4770      	bx	lr

08017c44 <write_quoted>:
        free(s);
    }
}

static void write_quoted (const char *s, const char *sep)
{
 8017c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c46:	4606      	mov	r6, r0
 8017c48:	460c      	mov	r4, r1
    hal.stream.write("\"");
 8017c4a:	4d0a      	ldr	r5, [pc, #40]	@ (8017c74 <write_quoted+0x30>)
 8017c4c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017c50:	4f09      	ldr	r7, [pc, #36]	@ (8017c78 <write_quoted+0x34>)
 8017c52:	4638      	mov	r0, r7
 8017c54:	4798      	blx	r3
    hal.stream.write(s); // TODO: escape double quoutes
 8017c56:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017c5a:	4630      	mov	r0, r6
 8017c5c:	4798      	blx	r3
    hal.stream.write("\"");
 8017c5e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017c62:	4638      	mov	r0, r7
 8017c64:	4798      	blx	r3
    if(sep)
 8017c66:	b11c      	cbz	r4, 8017c70 <write_quoted+0x2c>
        hal.stream.write(sep);
 8017c68:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017c6c:	4620      	mov	r0, r4
 8017c6e:	4798      	blx	r3
}
 8017c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c72:	bf00      	nop
 8017c74:	200011ac 	.word	0x200011ac
 8017c78:	0802b374 	.word	0x0802b374

08017c7c <cmp_alarms>:

#endif

static int cmp_alarms (const void *a, const void *b)
{
  return (*(alarm_detail_t **)(a))->id - (*(alarm_detail_t **)(b))->id;
 8017c7c:	6803      	ldr	r3, [r0, #0]
 8017c7e:	7818      	ldrb	r0, [r3, #0]
 8017c80:	680b      	ldr	r3, [r1, #0]
 8017c82:	781b      	ldrb	r3, [r3, #0]
}
 8017c84:	1ac0      	subs	r0, r0, r3
 8017c86:	4770      	bx	lr

08017c88 <cmp_errors>:
    return Status_OK;
}

static int cmp_errors (const void *a, const void *b)
{
  return (*(status_detail_t **)(a))->id - (*(status_detail_t **)(b))->id;
 8017c88:	6803      	ldr	r3, [r0, #0]
 8017c8a:	7818      	ldrb	r0, [r3, #0]
 8017c8c:	680b      	ldr	r3, [r1, #0]
 8017c8e:	781b      	ldrb	r3, [r3, #0]
}
 8017c90:	1ac0      	subs	r0, r0, r3
 8017c92:	4770      	bx	lr

08017c94 <cmp_setting_group_id>:
    }
}

static int cmp_setting_group_id (const void *a, const void *b)
{
    return (*(setting_group_detail_t **)(a))->id - (*(setting_group_detail_t **)(b))->id;
 8017c94:	6803      	ldr	r3, [r0, #0]
 8017c96:	7858      	ldrb	r0, [r3, #1]
 8017c98:	680b      	ldr	r3, [r1, #0]
 8017c9a:	785b      	ldrb	r3, [r3, #1]
}
 8017c9c:	1ac0      	subs	r0, r0, r3
 8017c9e:	4770      	bx	lr

08017ca0 <group_is_dup>:
    return strcmp((*(setting_group_detail_t **)(a))->name, (*(setting_group_detail_t **)(b))->name);
}

static bool group_is_dup (setting_group_detail_t **groups, setting_group_t group)
{
    while(*groups) {
 8017ca0:	e000      	b.n	8017ca4 <group_is_dup+0x4>
        if((*groups)->id == group)
            return true;
        groups++;
 8017ca2:	3004      	adds	r0, #4
    while(*groups) {
 8017ca4:	6803      	ldr	r3, [r0, #0]
 8017ca6:	b123      	cbz	r3, 8017cb2 <group_is_dup+0x12>
        if((*groups)->id == group)
 8017ca8:	785b      	ldrb	r3, [r3, #1]
 8017caa:	428b      	cmp	r3, r1
 8017cac:	d1f9      	bne.n	8017ca2 <group_is_dup+0x2>
            return true;
 8017cae:	2001      	movs	r0, #1
    }

    return false;
}
 8017cb0:	4770      	bx	lr
    return false;
 8017cb2:	2000      	movs	r0, #0
 8017cb4:	4770      	bx	lr

08017cb6 <add_limits>:

    return Status_OK;
}

static char *add_limits (char *buf, limit_signals_t limits)
{
 8017cb6:	b510      	push	{r4, lr}
 8017cb8:	b082      	sub	sp, #8
 8017cba:	9101      	str	r1, [sp, #4]
    buf = axis_signals_tostring(buf, limits.min);
 8017cbc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8017cc0:	f7ff ff46 	bl	8017b50 <axis_signals_tostring>
    *buf++ = ',';
 8017cc4:	242c      	movs	r4, #44	@ 0x2c
 8017cc6:	f800 4b01 	strb.w	r4, [r0], #1
    buf = axis_signals_tostring(buf, limits.max);
 8017cca:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8017cce:	f7ff ff3f 	bl	8017b50 <axis_signals_tostring>
    *buf++ = ',';
 8017cd2:	f800 4b01 	strb.w	r4, [r0], #1
    buf = axis_signals_tostring(buf, limits.min2);
 8017cd6:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8017cda:	f7ff ff39 	bl	8017b50 <axis_signals_tostring>
    *buf++ = ',';
 8017cde:	f800 4b01 	strb.w	r4, [r0], #1
    buf = axis_signals_tostring(buf, limits.max2);
 8017ce2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8017ce6:	f7ff ff33 	bl	8017b50 <axis_signals_tostring>

    return buf;
}
 8017cea:	b002      	add	sp, #8
 8017cec:	bd10      	pop	{r4, pc}

08017cee <count_pins>:
    return info;
}

static void count_pins (xbar_t *pin, void *data)
{
    ((pin_data_t *)data)->n_pins++;
 8017cee:	684b      	ldr	r3, [r1, #4]
 8017cf0:	3301      	adds	r3, #1
 8017cf2:	604b      	str	r3, [r1, #4]
}
 8017cf4:	4770      	bx	lr

08017cf6 <cmp_pins>:
    get_pin_info(pin, &((pin_data_t *)data)->pins[((pin_data_t *)data)->idx++]);
}

static int cmp_pins (const void *a, const void *b)
{
    return ((pin_info_t *)a)->sortkey - ((pin_info_t *)b)->sortkey;
 8017cf6:	6940      	ldr	r0, [r0, #20]
 8017cf8:	694b      	ldr	r3, [r1, #20]
}
 8017cfa:	1ac0      	subs	r0, r0, r3
 8017cfc:	4770      	bx	lr
	...

08017d00 <irq_mode>:

#ifndef NO_SETTINGS_DESCRIPTIONS

static char *irq_mode (pin_irq_mode_t mode)
{
    switch(mode) {
 8017d00:	3801      	subs	r0, #1
 8017d02:	281e      	cmp	r0, #30
 8017d04:	d81f      	bhi.n	8017d46 <irq_mode+0x46>
 8017d06:	e8df f000 	tbb	[pc, r0]
 8017d0a:	2010      	.short	0x2010
 8017d0c:	1e1e1412 	.word	0x1e1e1412
 8017d10:	1e1e1816 	.word	0x1e1e1816
 8017d14:	1e1e1e1e 	.word	0x1e1e1e1e
 8017d18:	1e1e1a1e 	.word	0x1e1e1a1e
 8017d1c:	1e1e1e1e 	.word	0x1e1e1e1e
 8017d20:	1e1e1e1e 	.word	0x1e1e1e1e
 8017d24:	1e1e1e1e 	.word	0x1e1e1e1e
 8017d28:	1c          	.byte	0x1c
 8017d29:	00          	.byte	0x00
 8017d2a:	4809      	ldr	r0, [pc, #36]	@ (8017d50 <irq_mode+0x50>)
 8017d2c:	4770      	bx	lr
        case IRQ_Mode_Rising:
            return "R";
        case IRQ_Mode_Falling:
            return "F";
        case IRQ_Mode_RisingFalling:
            return "T";
 8017d2e:	4809      	ldr	r0, [pc, #36]	@ (8017d54 <irq_mode+0x54>)
 8017d30:	4770      	bx	lr
        case IRQ_Mode_Change:
            return "C";
 8017d32:	4809      	ldr	r0, [pc, #36]	@ (8017d58 <irq_mode+0x58>)
 8017d34:	4770      	bx	lr
        case IRQ_Mode_Edges:
            return "E";
 8017d36:	4809      	ldr	r0, [pc, #36]	@ (8017d5c <irq_mode+0x5c>)
 8017d38:	4770      	bx	lr
        case IRQ_Mode_High:
            return "H";
 8017d3a:	4809      	ldr	r0, [pc, #36]	@ (8017d60 <irq_mode+0x60>)
 8017d3c:	4770      	bx	lr
        case IRQ_Mode_Low:
            return "L";
 8017d3e:	4809      	ldr	r0, [pc, #36]	@ (8017d64 <irq_mode+0x64>)
 8017d40:	4770      	bx	lr
        case IRQ_Mode_All:
            return "A";
 8017d42:	4809      	ldr	r0, [pc, #36]	@ (8017d68 <irq_mode+0x68>)
 8017d44:	4770      	bx	lr
        default:
            break;
    }

    return "-";
 8017d46:	4809      	ldr	r0, [pc, #36]	@ (8017d6c <irq_mode+0x6c>)
 8017d48:	4770      	bx	lr
            return "F";
 8017d4a:	4809      	ldr	r0, [pc, #36]	@ (8017d70 <irq_mode+0x70>)
}
 8017d4c:	4770      	bx	lr
 8017d4e:	bf00      	nop
 8017d50:	080295b8 	.word	0x080295b8
 8017d54:	0802b37c 	.word	0x0802b37c
 8017d58:	0802b380 	.word	0x0802b380
 8017d5c:	0802b384 	.word	0x0802b384
 8017d60:	0802b79c 	.word	0x0802b79c
 8017d64:	0802b388 	.word	0x0802b388
 8017d68:	08029684 	.word	0x08029684
 8017d6c:	0802b38c 	.word	0x0802b38c
 8017d70:	0802b378 	.word	0x0802b378

08017d74 <pull_mode>:

static char *pull_mode (pull_mode_t mode)
{
    switch(mode) {
 8017d74:	2802      	cmp	r0, #2
 8017d76:	d007      	beq.n	8017d88 <pull_mode+0x14>
 8017d78:	2803      	cmp	r0, #3
 8017d7a:	d007      	beq.n	8017d8c <pull_mode+0x18>
 8017d7c:	2801      	cmp	r0, #1
 8017d7e:	d001      	beq.n	8017d84 <pull_mode+0x10>
            return "B";
        default:
            break;
    }

    return "-";
 8017d80:	4803      	ldr	r0, [pc, #12]	@ (8017d90 <pull_mode+0x1c>)
}
 8017d82:	4770      	bx	lr
    switch(mode) {
 8017d84:	4803      	ldr	r0, [pc, #12]	@ (8017d94 <pull_mode+0x20>)
 8017d86:	4770      	bx	lr
            return "D";
 8017d88:	4803      	ldr	r0, [pc, #12]	@ (8017d98 <pull_mode+0x24>)
 8017d8a:	4770      	bx	lr
            return "B";
 8017d8c:	4803      	ldr	r0, [pc, #12]	@ (8017d9c <pull_mode+0x28>)
 8017d8e:	4770      	bx	lr
 8017d90:	0802b38c 	.word	0x0802b38c
 8017d94:	0802b390 	.word	0x0802b390
 8017d98:	0802b394 	.word	0x0802b394
 8017d9c:	080295c8 	.word	0x080295c8

08017da0 <get_rate_value_mm>:
{
 8017da0:	b508      	push	{r3, lr}
    return uitoa((uint32_t)value);
 8017da2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8017da6:	ee17 0a90 	vmov	r0, s15
 8017daa:	f7fd f9e7 	bl	801517c <uitoa>
}
 8017dae:	bd08      	pop	{r3, pc}

08017db0 <get_rate_value_inch>:
{
 8017db0:	b508      	push	{r3, lr}
    return uitoa((uint32_t)(value * INCH_PER_MM));
 8017db2:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8017dc8 <get_rate_value_inch+0x18>
 8017db6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017dba:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8017dbe:	ee17 0a90 	vmov	r0, s15
 8017dc2:	f7fd f9db 	bl	801517c <uitoa>
}
 8017dc6:	bd08      	pop	{r3, pc}
 8017dc8:	3d21428b 	.word	0x3d21428b

08017dcc <print_setting>:
{
 8017dcc:	b570      	push	{r4, r5, r6, lr}
 8017dce:	4604      	mov	r4, r0
    if(setting->value != NULL)
 8017dd0:	6a03      	ldr	r3, [r0, #32]
 8017dd2:	b123      	cbz	r3, 8017dde <print_setting+0x12>
        grbl.report.setting(setting, offset, data);
 8017dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8017e00 <print_setting+0x34>)
 8017dd6:	695b      	ldr	r3, [r3, #20]
 8017dd8:	4798      	blx	r3
}
 8017dda:	2001      	movs	r0, #1
 8017ddc:	bd70      	pop	{r4, r5, r6, pc}
        hal.stream.write("$");
 8017dde:	4d09      	ldr	r5, [pc, #36]	@ (8017e04 <print_setting+0x38>)
 8017de0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017de4:	4808      	ldr	r0, [pc, #32]	@ (8017e08 <print_setting+0x3c>)
 8017de6:	4798      	blx	r3
        hal.stream.write(uitoa(setting->id));
 8017de8:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8017dec:	8820      	ldrh	r0, [r4, #0]
 8017dee:	f7fd f9c5 	bl	801517c <uitoa>
 8017df2:	47b0      	blx	r6
        hal.stream.write("=N/A" ASCII_EOL);
 8017df4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017df8:	4804      	ldr	r0, [pc, #16]	@ (8017e0c <print_setting+0x40>)
 8017dfa:	4798      	blx	r3
 8017dfc:	e7ed      	b.n	8017dda <print_setting+0xe>
 8017dfe:	bf00      	nop
 8017e00:	20001394 	.word	0x20001394
 8017e04:	200011ac 	.word	0x200011ac
 8017e08:	0802b398 	.word	0x0802b398
 8017e0c:	0802b39c 	.word	0x0802b39c

08017e10 <print_alarm>:
{
 8017e10:	b570      	push	{r4, r5, r6, lr}
 8017e12:	4604      	mov	r4, r0
    if(grbl_format) {
 8017e14:	b9f1      	cbnz	r1, 8017e54 <print_alarm+0x44>
        hal.stream.write("[ALARMCODE:");
 8017e16:	4d1b      	ldr	r5, [pc, #108]	@ (8017e84 <print_alarm+0x74>)
 8017e18:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017e1c:	481a      	ldr	r0, [pc, #104]	@ (8017e88 <print_alarm+0x78>)
 8017e1e:	4798      	blx	r3
        hal.stream.write(uitoa(alarm->id));
 8017e20:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8017e24:	7820      	ldrb	r0, [r4, #0]
 8017e26:	f7fd f9a9 	bl	801517c <uitoa>
 8017e2a:	47b0      	blx	r6
        hal.stream.write(vbar);
 8017e2c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017e30:	4e16      	ldr	r6, [pc, #88]	@ (8017e8c <print_alarm+0x7c>)
 8017e32:	4630      	mov	r0, r6
 8017e34:	4798      	blx	r3
        hal.stream.write(vbar);
 8017e36:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017e3a:	4630      	mov	r0, r6
 8017e3c:	4798      	blx	r3
        if(alarm->description)
 8017e3e:	6860      	ldr	r0, [r4, #4]
 8017e40:	b110      	cbz	r0, 8017e48 <print_alarm+0x38>
            hal.stream.write(alarm->description);
 8017e42:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017e46:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 8017e48:	4b0e      	ldr	r3, [pc, #56]	@ (8017e84 <print_alarm+0x74>)
 8017e4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017e4e:	4810      	ldr	r0, [pc, #64]	@ (8017e90 <print_alarm+0x80>)
 8017e50:	4798      	blx	r3
}
 8017e52:	bd70      	pop	{r4, r5, r6, pc}
        write_quoted(uitoa(alarm->id), ",");
 8017e54:	7800      	ldrb	r0, [r0, #0]
 8017e56:	f7fd f991 	bl	801517c <uitoa>
 8017e5a:	4d0e      	ldr	r5, [pc, #56]	@ (8017e94 <print_alarm+0x84>)
 8017e5c:	4629      	mov	r1, r5
 8017e5e:	f7ff fef1 	bl	8017c44 <write_quoted>
        write_quoted("N/A", ",");
 8017e62:	4629      	mov	r1, r5
 8017e64:	480c      	ldr	r0, [pc, #48]	@ (8017e98 <print_alarm+0x88>)
 8017e66:	f7ff feed 	bl	8017c44 <write_quoted>
        write_quoted(alarm->description ? alarm->description : "", NULL);
 8017e6a:	6860      	ldr	r0, [r4, #4]
 8017e6c:	b140      	cbz	r0, 8017e80 <print_alarm+0x70>
 8017e6e:	2100      	movs	r1, #0
 8017e70:	f7ff fee8 	bl	8017c44 <write_quoted>
        hal.stream.write(ASCII_EOL);
 8017e74:	4b03      	ldr	r3, [pc, #12]	@ (8017e84 <print_alarm+0x74>)
 8017e76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017e7a:	4808      	ldr	r0, [pc, #32]	@ (8017e9c <print_alarm+0x8c>)
 8017e7c:	4798      	blx	r3
 8017e7e:	e7e8      	b.n	8017e52 <print_alarm+0x42>
        write_quoted(alarm->description ? alarm->description : "", NULL);
 8017e80:	4807      	ldr	r0, [pc, #28]	@ (8017ea0 <print_alarm+0x90>)
 8017e82:	e7f4      	b.n	8017e6e <print_alarm+0x5e>
 8017e84:	200011ac 	.word	0x200011ac
 8017e88:	0802b3a4 	.word	0x0802b3a4
 8017e8c:	0802bbd8 	.word	0x0802bbd8
 8017e90:	0802b3b0 	.word	0x0802b3b0
 8017e94:	0802b7dc 	.word	0x0802b7dc
 8017e98:	08029034 	.word	0x08029034
 8017e9c:	0802ba5c 	.word	0x0802ba5c
 8017ea0:	0802b518 	.word	0x0802b518

08017ea4 <print_error>:
{
 8017ea4:	b570      	push	{r4, r5, r6, lr}
 8017ea6:	4604      	mov	r4, r0
    if(grbl_format) {
 8017ea8:	b9f1      	cbnz	r1, 8017ee8 <print_error+0x44>
        hal.stream.write("[ERRORCODE:");
 8017eaa:	4d1b      	ldr	r5, [pc, #108]	@ (8017f18 <print_error+0x74>)
 8017eac:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017eb0:	481a      	ldr	r0, [pc, #104]	@ (8017f1c <print_error+0x78>)
 8017eb2:	4798      	blx	r3
        hal.stream.write(uitoa(error->id));
 8017eb4:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8017eb8:	7820      	ldrb	r0, [r4, #0]
 8017eba:	f7fd f95f 	bl	801517c <uitoa>
 8017ebe:	47b0      	blx	r6
        hal.stream.write(vbar);
 8017ec0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017ec4:	4e16      	ldr	r6, [pc, #88]	@ (8017f20 <print_error+0x7c>)
 8017ec6:	4630      	mov	r0, r6
 8017ec8:	4798      	blx	r3
        hal.stream.write(vbar);
 8017eca:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017ece:	4630      	mov	r0, r6
 8017ed0:	4798      	blx	r3
        if(error->description)
 8017ed2:	6860      	ldr	r0, [r4, #4]
 8017ed4:	b110      	cbz	r0, 8017edc <print_error+0x38>
            hal.stream.write(error->description);
 8017ed6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017eda:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 8017edc:	4b0e      	ldr	r3, [pc, #56]	@ (8017f18 <print_error+0x74>)
 8017ede:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017ee2:	4810      	ldr	r0, [pc, #64]	@ (8017f24 <print_error+0x80>)
 8017ee4:	4798      	blx	r3
}
 8017ee6:	bd70      	pop	{r4, r5, r6, pc}
        write_quoted(uitoa(error->id), ",");
 8017ee8:	7800      	ldrb	r0, [r0, #0]
 8017eea:	f7fd f947 	bl	801517c <uitoa>
 8017eee:	4d0e      	ldr	r5, [pc, #56]	@ (8017f28 <print_error+0x84>)
 8017ef0:	4629      	mov	r1, r5
 8017ef2:	f7ff fea7 	bl	8017c44 <write_quoted>
        write_quoted("N/A", ",");
 8017ef6:	4629      	mov	r1, r5
 8017ef8:	480c      	ldr	r0, [pc, #48]	@ (8017f2c <print_error+0x88>)
 8017efa:	f7ff fea3 	bl	8017c44 <write_quoted>
        write_quoted(error->description ? error->description : "", NULL);
 8017efe:	6860      	ldr	r0, [r4, #4]
 8017f00:	b140      	cbz	r0, 8017f14 <print_error+0x70>
 8017f02:	2100      	movs	r1, #0
 8017f04:	f7ff fe9e 	bl	8017c44 <write_quoted>
        hal.stream.write(ASCII_EOL);
 8017f08:	4b03      	ldr	r3, [pc, #12]	@ (8017f18 <print_error+0x74>)
 8017f0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017f0e:	4808      	ldr	r0, [pc, #32]	@ (8017f30 <print_error+0x8c>)
 8017f10:	4798      	blx	r3
 8017f12:	e7e8      	b.n	8017ee6 <print_error+0x42>
        write_quoted(error->description ? error->description : "", NULL);
 8017f14:	4807      	ldr	r0, [pc, #28]	@ (8017f34 <print_error+0x90>)
 8017f16:	e7f4      	b.n	8017f02 <print_error+0x5e>
 8017f18:	200011ac 	.word	0x200011ac
 8017f1c:	0802b3b4 	.word	0x0802b3b4
 8017f20:	0802bbd8 	.word	0x0802bbd8
 8017f24:	0802b3b0 	.word	0x0802b3b0
 8017f28:	0802b7dc 	.word	0x0802b7dc
 8017f2c:	08029034 	.word	0x08029034
 8017f30:	0802ba5c 	.word	0x0802ba5c
 8017f34:	0802b518 	.word	0x0802b518

08017f38 <print_uito2a>:
}

#endif

static void print_uito2a (char *prefix, uint32_t v)
{
 8017f38:	b538      	push	{r3, r4, r5, lr}
 8017f3a:	460c      	mov	r4, r1
    hal.stream.write(prefix);
 8017f3c:	4b09      	ldr	r3, [pc, #36]	@ (8017f64 <print_uito2a+0x2c>)
 8017f3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017f42:	4798      	blx	r3
    if(v < 10)
 8017f44:	2c09      	cmp	r4, #9
 8017f46:	d804      	bhi.n	8017f52 <print_uito2a+0x1a>
        hal.stream.write("0");
 8017f48:	4b06      	ldr	r3, [pc, #24]	@ (8017f64 <print_uito2a+0x2c>)
 8017f4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017f4e:	4806      	ldr	r0, [pc, #24]	@ (8017f68 <print_uito2a+0x30>)
 8017f50:	4798      	blx	r3
    hal.stream.write(uitoa(v));
 8017f52:	4b04      	ldr	r3, [pc, #16]	@ (8017f64 <print_uito2a+0x2c>)
 8017f54:	f8d3 50b4 	ldr.w	r5, [r3, #180]	@ 0xb4
 8017f58:	4620      	mov	r0, r4
 8017f5a:	f7fd f90f 	bl	801517c <uitoa>
 8017f5e:	47a8      	blx	r5
}
 8017f60:	bd38      	pop	{r3, r4, r5, pc}
 8017f62:	bf00      	nop
 8017f64:	200011ac 	.word	0x200011ac
 8017f68:	08029488 	.word	0x08029488

08017f6c <report_spindle>:

    return ok ? Status_OK : Status_InvalidStatement;
}

static void report_spindle (spindle_info_t *spindle, void *data)
{
 8017f6c:	b570      	push	{r4, r5, r6, lr}
 8017f6e:	4604      	mov	r4, r0
    if(data) {
 8017f70:	2900      	cmp	r1, #0
 8017f72:	f000 80bc 	beq.w	80180ee <report_spindle+0x182>
        char *caps = buf;
        hal.stream.write("[SPINDLE:");
 8017f76:	4d68      	ldr	r5, [pc, #416]	@ (8018118 <report_spindle+0x1ac>)
 8017f78:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017f7c:	4867      	ldr	r0, [pc, #412]	@ (801811c <report_spindle+0x1b0>)
 8017f7e:	4798      	blx	r3
        hal.stream.write(uitoa(spindle->id));
 8017f80:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8017f84:	f994 0000 	ldrsb.w	r0, [r4]
 8017f88:	f7fd f8f8 	bl	801517c <uitoa>
 8017f8c:	47b0      	blx	r6
        hal.stream.write("|");
 8017f8e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017f92:	4863      	ldr	r0, [pc, #396]	@ (8018120 <report_spindle+0x1b4>)
 8017f94:	4798      	blx	r3
        hal.stream.write(spindle->enabled ? uitoa(spindle->num) : "-");
 8017f96:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 8017f9a:	7a23      	ldrb	r3, [r4, #8]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	f040 809b 	bne.w	80180d8 <report_spindle+0x16c>
 8017fa2:	4860      	ldr	r0, [pc, #384]	@ (8018124 <report_spindle+0x1b8>)
 8017fa4:	47a8      	blx	r5
        hal.stream.write("|");
 8017fa6:	4d5c      	ldr	r5, [pc, #368]	@ (8018118 <report_spindle+0x1ac>)
 8017fa8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017fac:	485c      	ldr	r0, [pc, #368]	@ (8018120 <report_spindle+0x1b4>)
 8017fae:	4798      	blx	r3
        hal.stream.write(uitoa(spindle->hal->type));
 8017fb0:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 8017fb4:	68e3      	ldr	r3, [r4, #12]
 8017fb6:	7a18      	ldrb	r0, [r3, #8]
 8017fb8:	f7fd f8e0 	bl	801517c <uitoa>
 8017fbc:	47a8      	blx	r5
        *caps++ = '|';
 8017fbe:	4b5a      	ldr	r3, [pc, #360]	@ (8018128 <report_spindle+0x1bc>)
 8017fc0:	227c      	movs	r2, #124	@ 0x7c
 8017fc2:	701a      	strb	r2, [r3, #0]
#if N_SYS_SPINDLE == 1
        if(spindle->is_current)
 8017fc4:	7a63      	ldrb	r3, [r4, #9]
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	f000 808b 	beq.w	80180e2 <report_spindle+0x176>
            *caps++ = '*';
 8017fcc:	4b56      	ldr	r3, [pc, #344]	@ (8018128 <report_spindle+0x1bc>)
 8017fce:	222a      	movs	r2, #42	@ 0x2a
 8017fd0:	705a      	strb	r2, [r3, #1]
 8017fd2:	3302      	adds	r3, #2
#endif
        if(spindle->hal->cap.at_speed)
 8017fd4:	68e2      	ldr	r2, [r4, #12]
 8017fd6:	7a92      	ldrb	r2, [r2, #10]
 8017fd8:	f012 0f04 	tst.w	r2, #4
 8017fdc:	d002      	beq.n	8017fe4 <report_spindle+0x78>
            *caps++ = 'S';
 8017fde:	2253      	movs	r2, #83	@ 0x53
 8017fe0:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.direction)
 8017fe4:	68e2      	ldr	r2, [r4, #12]
 8017fe6:	7a92      	ldrb	r2, [r2, #10]
 8017fe8:	f012 0f02 	tst.w	r2, #2
 8017fec:	d002      	beq.n	8017ff4 <report_spindle+0x88>
            *caps++ = 'D';
 8017fee:	2244      	movs	r2, #68	@ 0x44
 8017ff0:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.laser)
 8017ff4:	68e2      	ldr	r2, [r4, #12]
 8017ff6:	7a92      	ldrb	r2, [r2, #10]
 8017ff8:	f012 0f08 	tst.w	r2, #8
 8017ffc:	d002      	beq.n	8018004 <report_spindle+0x98>
            *caps++ = 'L';
 8017ffe:	224c      	movs	r2, #76	@ 0x4c
 8018000:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.laser && spindle->hal->pulse_on)
 8018004:	68e2      	ldr	r2, [r4, #12]
 8018006:	7a91      	ldrb	r1, [r2, #10]
 8018008:	f011 0f08 	tst.w	r1, #8
 801800c:	d004      	beq.n	8018018 <report_spindle+0xac>
 801800e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8018010:	b112      	cbz	r2, 8018018 <report_spindle+0xac>
            *caps++ = 'A';
 8018012:	2241      	movs	r2, #65	@ 0x41
 8018014:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.pid)
 8018018:	68e2      	ldr	r2, [r4, #12]
 801801a:	7a92      	ldrb	r2, [r2, #10]
 801801c:	f012 0f20 	tst.w	r2, #32
 8018020:	d002      	beq.n	8018028 <report_spindle+0xbc>
            *caps++ = 'P';
 8018022:	2250      	movs	r2, #80	@ 0x50
 8018024:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.pwm_invert)
 8018028:	68e2      	ldr	r2, [r4, #12]
 801802a:	7a92      	ldrb	r2, [r2, #10]
 801802c:	f012 0f10 	tst.w	r2, #16
 8018030:	d002      	beq.n	8018038 <report_spindle+0xcc>
            *caps++ = 'I';
 8018032:	2249      	movs	r2, #73	@ 0x49
 8018034:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.pwm_linearization)
 8018038:	68e2      	ldr	r2, [r4, #12]
 801803a:	7a92      	ldrb	r2, [r2, #10]
 801803c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8018040:	d002      	beq.n	8018048 <report_spindle+0xdc>
            *caps++ = 'N';
 8018042:	224e      	movs	r2, #78	@ 0x4e
 8018044:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.rpm_range_locked)
 8018048:	68e2      	ldr	r2, [r4, #12]
 801804a:	f992 200a 	ldrsb.w	r2, [r2, #10]
 801804e:	2a00      	cmp	r2, #0
 8018050:	db49      	blt.n	80180e6 <report_spindle+0x17a>
            *caps++ = 'R';
        if(spindle->hal->cap.variable)
 8018052:	68e2      	ldr	r2, [r4, #12]
 8018054:	7a92      	ldrb	r2, [r2, #10]
 8018056:	f012 0f01 	tst.w	r2, #1
 801805a:	d002      	beq.n	8018062 <report_spindle+0xf6>
            *caps++ = 'V';
 801805c:	2256      	movs	r2, #86	@ 0x56
 801805e:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->get_data)
 8018062:	68e2      	ldr	r2, [r4, #12]
 8018064:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8018066:	b112      	cbz	r2, 801806e <report_spindle+0x102>
            *caps++ = 'E';
 8018068:	2245      	movs	r2, #69	@ 0x45
 801806a:	f803 2b01 	strb.w	r2, [r3], #1
        *caps++ = '|';
 801806e:	227c      	movs	r2, #124	@ 0x7c
 8018070:	701a      	strb	r2, [r3, #0]
        *caps = '\0';
 8018072:	2200      	movs	r2, #0
 8018074:	705a      	strb	r2, [r3, #1]
        hal.stream.write(buf);
 8018076:	4d28      	ldr	r5, [pc, #160]	@ (8018118 <report_spindle+0x1ac>)
 8018078:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801807c:	482a      	ldr	r0, [pc, #168]	@ (8018128 <report_spindle+0x1bc>)
 801807e:	4798      	blx	r3
        hal.stream.write(spindle->name);
 8018080:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018084:	6860      	ldr	r0, [r4, #4]
 8018086:	4798      	blx	r3
        if(spindle->hal->rpm_max > 0.0f) {
 8018088:	68e3      	ldr	r3, [r4, #12]
 801808a:	edd3 7a06 	vldr	s15, [r3, #24]
 801808e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018096:	dd19      	ble.n	80180cc <report_spindle+0x160>
            hal.stream.write("|");
 8018098:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801809c:	4820      	ldr	r0, [pc, #128]	@ (8018120 <report_spindle+0x1b4>)
 801809e:	4798      	blx	r3
            hal.stream.write(ftoa(spindle->hal->rpm_min, 1));
 80180a0:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 80180a4:	68e3      	ldr	r3, [r4, #12]
 80180a6:	2001      	movs	r0, #1
 80180a8:	ed93 0a05 	vldr	s0, [r3, #20]
 80180ac:	f7fd f888 	bl	80151c0 <ftoa>
 80180b0:	47b0      	blx	r6
            hal.stream.write(",");
 80180b2:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80180b6:	481d      	ldr	r0, [pc, #116]	@ (801812c <report_spindle+0x1c0>)
 80180b8:	4798      	blx	r3
            hal.stream.write(ftoa(spindle->hal->rpm_max, 1));
 80180ba:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 80180be:	68e3      	ldr	r3, [r4, #12]
 80180c0:	2001      	movs	r0, #1
 80180c2:	ed93 0a06 	vldr	s0, [r3, #24]
 80180c6:	f7fd f87b 	bl	80151c0 <ftoa>
 80180ca:	47a8      	blx	r5
        }
        hal.stream.write("]" ASCII_EOL);
 80180cc:	4b12      	ldr	r3, [pc, #72]	@ (8018118 <report_spindle+0x1ac>)
 80180ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80180d2:	4817      	ldr	r0, [pc, #92]	@ (8018130 <report_spindle+0x1c4>)
 80180d4:	4798      	blx	r3
 #endif
#endif
        }
        hal.stream.write(ASCII_EOL);
    }
}
 80180d6:	bd70      	pop	{r4, r5, r6, pc}
        hal.stream.write(spindle->enabled ? uitoa(spindle->num) : "-");
 80180d8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80180dc:	f7fd f84e 	bl	801517c <uitoa>
 80180e0:	e760      	b.n	8017fa4 <report_spindle+0x38>
        *caps++ = '|';
 80180e2:	4b14      	ldr	r3, [pc, #80]	@ (8018134 <report_spindle+0x1c8>)
 80180e4:	e776      	b.n	8017fd4 <report_spindle+0x68>
            *caps++ = 'R';
 80180e6:	2252      	movs	r2, #82	@ 0x52
 80180e8:	f803 2b01 	strb.w	r2, [r3], #1
 80180ec:	e7b1      	b.n	8018052 <report_spindle+0xe6>
        hal.stream.write(uitoa(spindle->id));
 80180ee:	4d0a      	ldr	r5, [pc, #40]	@ (8018118 <report_spindle+0x1ac>)
 80180f0:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 80180f4:	f990 0000 	ldrsb.w	r0, [r0]
 80180f8:	f7fd f840 	bl	801517c <uitoa>
 80180fc:	47b0      	blx	r6
        hal.stream.write(" - ");
 80180fe:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018102:	480d      	ldr	r0, [pc, #52]	@ (8018138 <report_spindle+0x1cc>)
 8018104:	4798      	blx	r3
        hal.stream.write(spindle->name);
 8018106:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801810a:	6860      	ldr	r0, [r4, #4]
 801810c:	4798      	blx	r3
        hal.stream.write(ASCII_EOL);
 801810e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018112:	480a      	ldr	r0, [pc, #40]	@ (801813c <report_spindle+0x1d0>)
 8018114:	4798      	blx	r3
}
 8018116:	e7de      	b.n	80180d6 <report_spindle+0x16a>
 8018118:	200011ac 	.word	0x200011ac
 801811c:	0802b3c0 	.word	0x0802b3c0
 8018120:	0802b3cc 	.word	0x0802b3cc
 8018124:	0802b38c 	.word	0x0802b38c
 8018128:	20001a94 	.word	0x20001a94
 801812c:	0802b7dc 	.word	0x0802b7dc
 8018130:	0802b3b0 	.word	0x0802b3b0
 8018134:	20001a95 	.word	0x20001a95
 8018138:	0802b3d0 	.word	0x0802b3d0
 801813c:	0802ba5c 	.word	0x0802ba5c

08018140 <get_axis_values_mm>:
{
 8018140:	b570      	push	{r4, r5, r6, lr}
 8018142:	4605      	mov	r5, r0
    buf[0] = '\0';
 8018144:	2400      	movs	r4, #0
 8018146:	4b18      	ldr	r3, [pc, #96]	@ (80181a8 <get_axis_values_mm+0x68>)
 8018148:	701c      	strb	r4, [r3, #0]
    for (idx = 0; idx < N_AXIS; idx++) {
 801814a:	e014      	b.n	8018176 <get_axis_values_mm+0x36>
            strcat(buf, ftoa(axis_values[idx], N_DECIMAL_COORDVALUE_MM));
 801814c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018150:	2003      	movs	r0, #3
 8018152:	ed93 0a00 	vldr	s0, [r3]
 8018156:	f7fd f833 	bl	80151c0 <ftoa>
 801815a:	4601      	mov	r1, r0
 801815c:	4812      	ldr	r0, [pc, #72]	@ (80181a8 <get_axis_values_mm+0x68>)
 801815e:	f00c f996 	bl	802448e <strcat>
        if (idx < (N_AXIS - 1))
 8018162:	2c01      	cmp	r4, #1
 8018164:	d806      	bhi.n	8018174 <get_axis_values_mm+0x34>
            strcat(buf, ",");
 8018166:	4e10      	ldr	r6, [pc, #64]	@ (80181a8 <get_axis_values_mm+0x68>)
 8018168:	4630      	mov	r0, r6
 801816a:	f7ef ffc9 	bl	8008100 <strlen>
 801816e:	4b0f      	ldr	r3, [pc, #60]	@ (80181ac <get_axis_values_mm+0x6c>)
 8018170:	881b      	ldrh	r3, [r3, #0]
 8018172:	5233      	strh	r3, [r6, r0]
    for (idx = 0; idx < N_AXIS; idx++) {
 8018174:	3401      	adds	r4, #1
 8018176:	2c02      	cmp	r4, #2
 8018178:	d813      	bhi.n	80181a2 <get_axis_values_mm+0x62>
        if(idx == X_AXIS && gc_state.modal.diameter_mode)
 801817a:	2c00      	cmp	r4, #0
 801817c:	d1e6      	bne.n	801814c <get_axis_values_mm+0xc>
 801817e:	4b0c      	ldr	r3, [pc, #48]	@ (80181b0 <get_axis_values_mm+0x70>)
 8018180:	795b      	ldrb	r3, [r3, #5]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d0e2      	beq.n	801814c <get_axis_values_mm+0xc>
            strcat(buf, ftoa(axis_values[idx] * 2.0f, N_DECIMAL_COORDVALUE_MM));
 8018186:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801818a:	ed93 0a00 	vldr	s0, [r3]
 801818e:	2003      	movs	r0, #3
 8018190:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018194:	f7fd f814 	bl	80151c0 <ftoa>
 8018198:	4601      	mov	r1, r0
 801819a:	4803      	ldr	r0, [pc, #12]	@ (80181a8 <get_axis_values_mm+0x68>)
 801819c:	f00c f977 	bl	802448e <strcat>
 80181a0:	e7df      	b.n	8018162 <get_axis_values_mm+0x22>
}
 80181a2:	4801      	ldr	r0, [pc, #4]	@ (80181a8 <get_axis_values_mm+0x68>)
 80181a4:	bd70      	pop	{r4, r5, r6, pc}
 80181a6:	bf00      	nop
 80181a8:	20001a94 	.word	0x20001a94
 80181ac:	0802b7dc 	.word	0x0802b7dc
 80181b0:	20000ee4 	.word	0x20000ee4

080181b4 <get_axis_values_inches>:
{
 80181b4:	b570      	push	{r4, r5, r6, lr}
 80181b6:	4605      	mov	r5, r0
    buf[0] = '\0';
 80181b8:	2400      	movs	r4, #0
 80181ba:	4b1c      	ldr	r3, [pc, #112]	@ (801822c <get_axis_values_inches+0x78>)
 80181bc:	701c      	strb	r4, [r3, #0]
    for (idx = 0; idx < N_AXIS; idx++) {
 80181be:	e018      	b.n	80181f2 <get_axis_values_inches+0x3e>
             strcat(buf, ftoa(axis_values[idx] * INCH_PER_MM, N_DECIMAL_COORDVALUE_INCH));
 80181c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80181c4:	ed93 0a00 	vldr	s0, [r3]
 80181c8:	2004      	movs	r0, #4
 80181ca:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018230 <get_axis_values_inches+0x7c>
 80181ce:	ee20 0a27 	vmul.f32	s0, s0, s15
 80181d2:	f7fc fff5 	bl	80151c0 <ftoa>
 80181d6:	4601      	mov	r1, r0
 80181d8:	4814      	ldr	r0, [pc, #80]	@ (801822c <get_axis_values_inches+0x78>)
 80181da:	f00c f958 	bl	802448e <strcat>
        if (idx < (N_AXIS - 1))
 80181de:	2c01      	cmp	r4, #1
 80181e0:	d806      	bhi.n	80181f0 <get_axis_values_inches+0x3c>
            strcat(buf, ",");
 80181e2:	4e12      	ldr	r6, [pc, #72]	@ (801822c <get_axis_values_inches+0x78>)
 80181e4:	4630      	mov	r0, r6
 80181e6:	f7ef ff8b 	bl	8008100 <strlen>
 80181ea:	4b12      	ldr	r3, [pc, #72]	@ (8018234 <get_axis_values_inches+0x80>)
 80181ec:	881b      	ldrh	r3, [r3, #0]
 80181ee:	5233      	strh	r3, [r6, r0]
    for (idx = 0; idx < N_AXIS; idx++) {
 80181f0:	3401      	adds	r4, #1
 80181f2:	2c02      	cmp	r4, #2
 80181f4:	d817      	bhi.n	8018226 <get_axis_values_inches+0x72>
        if(idx == X_AXIS && gc_state.modal.diameter_mode)
 80181f6:	2c00      	cmp	r4, #0
 80181f8:	d1e2      	bne.n	80181c0 <get_axis_values_inches+0xc>
 80181fa:	4b0f      	ldr	r3, [pc, #60]	@ (8018238 <get_axis_values_inches+0x84>)
 80181fc:	795b      	ldrb	r3, [r3, #5]
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d0de      	beq.n	80181c0 <get_axis_values_inches+0xc>
            strcat(buf, ftoa(axis_values[idx] * INCH_PER_MM * 2.0f, N_DECIMAL_COORDVALUE_INCH));
 8018202:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018206:	ed93 0a00 	vldr	s0, [r3]
 801820a:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8018230 <get_axis_values_inches+0x7c>
 801820e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018212:	2004      	movs	r0, #4
 8018214:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018218:	f7fc ffd2 	bl	80151c0 <ftoa>
 801821c:	4601      	mov	r1, r0
 801821e:	4803      	ldr	r0, [pc, #12]	@ (801822c <get_axis_values_inches+0x78>)
 8018220:	f00c f935 	bl	802448e <strcat>
 8018224:	e7db      	b.n	80181de <get_axis_values_inches+0x2a>
}
 8018226:	4801      	ldr	r0, [pc, #4]	@ (801822c <get_axis_values_inches+0x78>)
 8018228:	bd70      	pop	{r4, r5, r6, pc}
 801822a:	bf00      	nop
 801822c:	20001a94 	.word	0x20001a94
 8018230:	3d21428b 	.word	0x3d21428b
 8018234:	0802b7dc 	.word	0x0802b7dc
 8018238:	20000ee4 	.word	0x20000ee4

0801823c <get_axis_value_mm>:
{
 801823c:	b508      	push	{r3, lr}
    return strcpy(buf, ftoa(value, N_DECIMAL_COORDVALUE_MM));
 801823e:	2003      	movs	r0, #3
 8018240:	f7fc ffbe 	bl	80151c0 <ftoa>
 8018244:	4601      	mov	r1, r0
 8018246:	4802      	ldr	r0, [pc, #8]	@ (8018250 <get_axis_value_mm+0x14>)
 8018248:	f00c fa71 	bl	802472e <strcpy>
}
 801824c:	bd08      	pop	{r3, pc}
 801824e:	bf00      	nop
 8018250:	20001a94 	.word	0x20001a94

08018254 <get_axis_value_inches>:
{
 8018254:	b508      	push	{r3, lr}
    return strcpy(buf, ftoa(value * INCH_PER_MM, N_DECIMAL_COORDVALUE_INCH));
 8018256:	2004      	movs	r0, #4
 8018258:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8018270 <get_axis_value_inches+0x1c>
 801825c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018260:	f7fc ffae 	bl	80151c0 <ftoa>
 8018264:	4601      	mov	r1, r0
 8018266:	4803      	ldr	r0, [pc, #12]	@ (8018274 <get_axis_value_inches+0x20>)
 8018268:	f00c fa61 	bl	802472e <strcpy>
}
 801826c:	bd08      	pop	{r3, pc}
 801826e:	bf00      	nop
 8018270:	3d21428b 	.word	0x3d21428b
 8018274:	20001a94 	.word	0x20001a94

08018278 <map_coord_system>:
{
 8018278:	b538      	push	{r3, r4, r5, lr}
    uint8_t g5x = id + 54;
 801827a:	f100 0436 	add.w	r4, r0, #54	@ 0x36
 801827e:	b2e4      	uxtb	r4, r4
    strcpy(buf, uitoa((uint32_t)(g5x > 59 ? 59 : g5x)));
 8018280:	4620      	mov	r0, r4
 8018282:	2c3b      	cmp	r4, #59	@ 0x3b
 8018284:	bf28      	it	cs
 8018286:	203b      	movcs	r0, #59	@ 0x3b
 8018288:	f7fc ff78 	bl	801517c <uitoa>
 801828c:	4601      	mov	r1, r0
 801828e:	480b      	ldr	r0, [pc, #44]	@ (80182bc <map_coord_system+0x44>)
 8018290:	f00c fa4d 	bl	802472e <strcpy>
    if(g5x > 59) {
 8018294:	2c3b      	cmp	r4, #59	@ 0x3b
 8018296:	d801      	bhi.n	801829c <map_coord_system+0x24>
}
 8018298:	4808      	ldr	r0, [pc, #32]	@ (80182bc <map_coord_system+0x44>)
 801829a:	bd38      	pop	{r3, r4, r5, pc}
        strcat(buf, ".");
 801829c:	4d07      	ldr	r5, [pc, #28]	@ (80182bc <map_coord_system+0x44>)
 801829e:	4628      	mov	r0, r5
 80182a0:	f7ef ff2e 	bl	8008100 <strlen>
 80182a4:	4b06      	ldr	r3, [pc, #24]	@ (80182c0 <map_coord_system+0x48>)
 80182a6:	881b      	ldrh	r3, [r3, #0]
 80182a8:	522b      	strh	r3, [r5, r0]
        strcat(buf, uitoa((uint32_t)(g5x - 59)));
 80182aa:	f1a4 003b 	sub.w	r0, r4, #59	@ 0x3b
 80182ae:	f7fc ff65 	bl	801517c <uitoa>
 80182b2:	4601      	mov	r1, r0
 80182b4:	4628      	mov	r0, r5
 80182b6:	f00c f8ea 	bl	802448e <strcat>
 80182ba:	e7ed      	b.n	8018298 <map_coord_system+0x20>
 80182bc:	20001a94 	.word	0x20001a94
 80182c0:	08028c48 	.word	0x08028c48

080182c4 <get_pin_info>:
{
 80182c4:	b510      	push	{r4, lr}
 80182c6:	460c      	mov	r4, r1
    info->function = pin->function;
 80182c8:	7843      	ldrb	r3, [r0, #1]
 80182ca:	704b      	strb	r3, [r1, #1]
    info->pin = pin->pin;
 80182cc:	6903      	ldr	r3, [r0, #16]
 80182ce:	700b      	strb	r3, [r1, #0]
    info->description = pin->description;
 80182d0:	68c3      	ldr	r3, [r0, #12]
 80182d2:	610b      	str	r3, [r1, #16]
    info->sortkey = (pin->function << 8) | pin->id | (pin->group >= PinGroup_UART1 && pin->group <= PinGroup_UART4 ? pin->group << 16 : 0);
 80182d4:	7842      	ldrb	r2, [r0, #1]
 80182d6:	7803      	ldrb	r3, [r0, #0]
 80182d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80182dc:	6842      	ldr	r2, [r0, #4]
 80182de:	f1a2 0111 	sub.w	r1, r2, #17
 80182e2:	2903      	cmp	r1, #3
 80182e4:	d809      	bhi.n	80182fa <get_pin_info+0x36>
 80182e6:	0412      	lsls	r2, r2, #16
 80182e8:	4313      	orrs	r3, r2
 80182ea:	6163      	str	r3, [r4, #20]
    if(pin->port)
 80182ec:	6881      	ldr	r1, [r0, #8]
 80182ee:	b131      	cbz	r1, 80182fe <get_pin_info+0x3a>
        strcpy(info->port, (char *)pin->port);
 80182f0:	1ca0      	adds	r0, r4, #2
 80182f2:	f00c fa1c 	bl	802472e <strcpy>
}
 80182f6:	4620      	mov	r0, r4
 80182f8:	bd10      	pop	{r4, pc}
    info->sortkey = (pin->function << 8) | pin->id | (pin->group >= PinGroup_UART1 && pin->group <= PinGroup_UART4 ? pin->group << 16 : 0);
 80182fa:	2200      	movs	r2, #0
 80182fc:	e7f4      	b.n	80182e8 <get_pin_info+0x24>
        *info->port = '\0';
 80182fe:	2300      	movs	r3, #0
 8018300:	70a3      	strb	r3, [r4, #2]
 8018302:	e7f8      	b.n	80182f6 <get_pin_info+0x32>

08018304 <get_pins>:
{
 8018304:	b510      	push	{r4, lr}
    get_pin_info(pin, &((pin_data_t *)data)->pins[((pin_data_t *)data)->idx++]);
 8018306:	688a      	ldr	r2, [r1, #8]
 8018308:	680b      	ldr	r3, [r1, #0]
 801830a:	1c5c      	adds	r4, r3, #1
 801830c:	600c      	str	r4, [r1, #0]
 801830e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018312:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8018316:	f7ff ffd5 	bl	80182c4 <get_pin_info>
}
 801831a:	bd10      	pop	{r4, pc}

0801831c <appendbuf>:
{
 801831c:	b40f      	push	{r0, r1, r2, r3}
 801831e:	b410      	push	{r4}
 8018320:	b083      	sub	sp, #12
 8018322:	ab04      	add	r3, sp, #16
 8018324:	f853 4b04 	ldr.w	r4, [r3], #4
    va_start(list, argc);
 8018328:	9301      	str	r3, [sp, #4]
    char c, *s = buf, *arg;
 801832a:	480c      	ldr	r0, [pc, #48]	@ (801835c <appendbuf+0x40>)
    while(argc--) {
 801832c:	e00b      	b.n	8018346 <appendbuf+0x2a>
        arg = va_arg(list, char *);
 801832e:	9b01      	ldr	r3, [sp, #4]
 8018330:	1d1a      	adds	r2, r3, #4
 8018332:	9201      	str	r2, [sp, #4]
 8018334:	6819      	ldr	r1, [r3, #0]
 8018336:	4602      	mov	r2, r0
            c = *s++ = *arg++;
 8018338:	4610      	mov	r0, r2
 801833a:	3201      	adds	r2, #1
 801833c:	780b      	ldrb	r3, [r1, #0]
 801833e:	3101      	adds	r1, #1
 8018340:	7003      	strb	r3, [r0, #0]
        } while(c);
 8018342:	2b00      	cmp	r3, #0
 8018344:	d1f8      	bne.n	8018338 <appendbuf+0x1c>
    while(argc--) {
 8018346:	4623      	mov	r3, r4
 8018348:	3c01      	subs	r4, #1
 801834a:	2b00      	cmp	r3, #0
 801834c:	d1ef      	bne.n	801832e <appendbuf+0x12>
}
 801834e:	4803      	ldr	r0, [pc, #12]	@ (801835c <appendbuf+0x40>)
 8018350:	b003      	add	sp, #12
 8018352:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018356:	b004      	add	sp, #16
 8018358:	4770      	bx	lr
 801835a:	bf00      	nop
 801835c:	20001a94 	.word	0x20001a94

08018360 <report_alarm_message>:
{
 8018360:	b570      	push	{r4, r5, r6, lr}
 8018362:	4604      	mov	r4, r0
    hal.stream.write_all(appendbuf(3, "ALARM:", uitoa((uint32_t)alarm_code), ASCII_EOL));
 8018364:	4d08      	ldr	r5, [pc, #32]	@ (8018388 <report_alarm_message+0x28>)
 8018366:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 801836a:	f7fc ff07 	bl	801517c <uitoa>
 801836e:	4602      	mov	r2, r0
 8018370:	4b06      	ldr	r3, [pc, #24]	@ (801838c <report_alarm_message+0x2c>)
 8018372:	4907      	ldr	r1, [pc, #28]	@ (8018390 <report_alarm_message+0x30>)
 8018374:	2003      	movs	r0, #3
 8018376:	f7ff ffd1 	bl	801831c <appendbuf>
 801837a:	47b0      	blx	r6
    hal.delay_ms(100, NULL); // Force delay to ensure message clears output stream buffer.
 801837c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 801837e:	2100      	movs	r1, #0
 8018380:	2064      	movs	r0, #100	@ 0x64
 8018382:	4798      	blx	r3
}
 8018384:	4620      	mov	r0, r4
 8018386:	bd70      	pop	{r4, r5, r6, pc}
 8018388:	200011ac 	.word	0x200011ac
 801838c:	0802ba5c 	.word	0x0802ba5c
 8018390:	0802b3d4 	.word	0x0802b3d4

08018394 <report_status_message>:
{
 8018394:	b538      	push	{r3, r4, r5, lr}
    switch(status_code) {
 8018396:	4604      	mov	r4, r0
 8018398:	b930      	cbnz	r0, 80183a8 <report_status_message+0x14>
            hal.stream.write("ok" ASCII_EOL);
 801839a:	4b0a      	ldr	r3, [pc, #40]	@ (80183c4 <report_status_message+0x30>)
 801839c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80183a0:	4809      	ldr	r0, [pc, #36]	@ (80183c8 <report_status_message+0x34>)
 80183a2:	4798      	blx	r3
}
 80183a4:	4620      	mov	r0, r4
 80183a6:	bd38      	pop	{r3, r4, r5, pc}
            hal.stream.write(appendbuf(3, "error:", uitoa((uint32_t)status_code), ASCII_EOL));
 80183a8:	4b06      	ldr	r3, [pc, #24]	@ (80183c4 <report_status_message+0x30>)
 80183aa:	f8d3 50b4 	ldr.w	r5, [r3, #180]	@ 0xb4
 80183ae:	f7fc fee5 	bl	801517c <uitoa>
 80183b2:	4602      	mov	r2, r0
 80183b4:	4b05      	ldr	r3, [pc, #20]	@ (80183cc <report_status_message+0x38>)
 80183b6:	4906      	ldr	r1, [pc, #24]	@ (80183d0 <report_status_message+0x3c>)
 80183b8:	2003      	movs	r0, #3
 80183ba:	f7ff ffaf 	bl	801831c <appendbuf>
 80183be:	47a8      	blx	r5
            break;
 80183c0:	e7f0      	b.n	80183a4 <report_status_message+0x10>
 80183c2:	bf00      	nop
 80183c4:	200011ac 	.word	0x200011ac
 80183c8:	0802b3dc 	.word	0x0802b3dc
 80183cc:	0802ba5c 	.word	0x0802ba5c
 80183d0:	0802b3e4 	.word	0x0802b3e4

080183d4 <report_bitfield>:
{
 80183d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183d8:	4604      	mov	r4, r0
 80183da:	4688      	mov	r8, r1
    if((s = (char *)malloc(strlen(format) + 1))) {
 80183dc:	f7ef fe90 	bl	8008100 <strlen>
 80183e0:	3001      	adds	r0, #1
 80183e2:	f009 ff83 	bl	80222ec <malloc>
 80183e6:	2800      	cmp	r0, #0
 80183e8:	d049      	beq.n	801847e <report_bitfield+0xaa>
 80183ea:	4681      	mov	r9, r0
        strcpy(s, format);
 80183ec:	4621      	mov	r1, r4
 80183ee:	f00c f99e 	bl	802472e <strcpy>
        char *element = strtok(s, ",");
 80183f2:	4924      	ldr	r1, [pc, #144]	@ (8018484 <report_bitfield+0xb0>)
 80183f4:	4648      	mov	r0, r9
 80183f6:	f00c f8a1 	bl	802453c <strtok>
 80183fa:	4604      	mov	r4, r0
    uint_fast16_t val = 1;
 80183fc:	2701      	movs	r7, #1
    uint_fast8_t bit = 0;
 80183fe:	2600      	movs	r6, #0
        while(element) {
 8018400:	e006      	b.n	8018410 <report_bitfield+0x3c>
            bit++;
 8018402:	3601      	adds	r6, #1
            val <<= 1;
 8018404:	007f      	lsls	r7, r7, #1
            element = strtok(NULL, ",");
 8018406:	491f      	ldr	r1, [pc, #124]	@ (8018484 <report_bitfield+0xb0>)
 8018408:	2000      	movs	r0, #0
 801840a:	f00c f897 	bl	802453c <strtok>
 801840e:	4604      	mov	r4, r0
        while(element) {
 8018410:	2c00      	cmp	r4, #0
 8018412:	d031      	beq.n	8018478 <report_bitfield+0xa4>
            if(strcmp(element, "N/A")) {
 8018414:	491c      	ldr	r1, [pc, #112]	@ (8018488 <report_bitfield+0xb4>)
 8018416:	4620      	mov	r0, r4
 8018418:	f7ef fe12 	bl	8008040 <strcmp>
 801841c:	2800      	cmp	r0, #0
 801841e:	d0f0      	beq.n	8018402 <report_bitfield+0x2e>
                hal.stream.write(ASCII_EOL);
 8018420:	4d1a      	ldr	r5, [pc, #104]	@ (801848c <report_bitfield+0xb8>)
 8018422:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018426:	481a      	ldr	r0, [pc, #104]	@ (8018490 <report_bitfield+0xbc>)
 8018428:	4798      	blx	r3
                hal.stream.write("    ");
 801842a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801842e:	4819      	ldr	r0, [pc, #100]	@ (8018494 <report_bitfield+0xc0>)
 8018430:	4798      	blx	r3
                hal.stream.write(uitoa(bit));
 8018432:	f8d5 a0b4 	ldr.w	sl, [r5, #180]	@ 0xb4
 8018436:	4630      	mov	r0, r6
 8018438:	f7fc fea0 	bl	801517c <uitoa>
 801843c:	47d0      	blx	sl
                hal.stream.write(" - ");
 801843e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018442:	4815      	ldr	r0, [pc, #84]	@ (8018498 <report_bitfield+0xc4>)
 8018444:	4798      	blx	r3
                if(*element)
 8018446:	7823      	ldrb	r3, [r4, #0]
 8018448:	b11b      	cbz	r3, 8018452 <report_bitfield+0x7e>
                hal.stream.write(element);
 801844a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801844e:	4620      	mov	r0, r4
 8018450:	4798      	blx	r3
                if(bitmap) {
 8018452:	f1b8 0f00 	cmp.w	r8, #0
 8018456:	d0d4      	beq.n	8018402 <report_bitfield+0x2e>
                    hal.stream.write(" (");
 8018458:	4c0c      	ldr	r4, [pc, #48]	@ (801848c <report_bitfield+0xb8>)
 801845a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801845e:	480f      	ldr	r0, [pc, #60]	@ (801849c <report_bitfield+0xc8>)
 8018460:	4798      	blx	r3
                    hal.stream.write(uitoa(val));
 8018462:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8018466:	4638      	mov	r0, r7
 8018468:	f7fc fe88 	bl	801517c <uitoa>
 801846c:	47a8      	blx	r5
                    hal.stream.write(")");
 801846e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8018472:	480b      	ldr	r0, [pc, #44]	@ (80184a0 <report_bitfield+0xcc>)
 8018474:	4798      	blx	r3
 8018476:	e7c4      	b.n	8018402 <report_bitfield+0x2e>
        free(s);
 8018478:	4648      	mov	r0, r9
 801847a:	f009 ff3f 	bl	80222fc <free>
}
 801847e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018482:	bf00      	nop
 8018484:	0802b7dc 	.word	0x0802b7dc
 8018488:	08029034 	.word	0x08029034
 801848c:	200011ac 	.word	0x200011ac
 8018490:	0802ba5c 	.word	0x0802ba5c
 8018494:	0802b3ec 	.word	0x0802b3ec
 8018498:	0802b3d0 	.word	0x0802b3d0
 801849c:	0802b3f4 	.word	0x0802b3f4
 80184a0:	0802a934 	.word	0x0802a934

080184a4 <cmp_setting_group_name>:
{
 80184a4:	b508      	push	{r3, lr}
    return strcmp((*(setting_group_detail_t **)(a))->name, (*(setting_group_detail_t **)(b))->name);
 80184a6:	6803      	ldr	r3, [r0, #0]
 80184a8:	680a      	ldr	r2, [r1, #0]
 80184aa:	6851      	ldr	r1, [r2, #4]
 80184ac:	6858      	ldr	r0, [r3, #4]
 80184ae:	f7ef fdc7 	bl	8008040 <strcmp>
}
 80184b2:	bd08      	pop	{r3, pc}

080184b4 <write_name>:
{
 80184b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184b6:	4604      	mov	r4, r0
    char *q = hal.stream.write_n ? strchr(s, '?') : NULL;
 80184b8:	4b10      	ldr	r3, [pc, #64]	@ (80184fc <write_name+0x48>)
 80184ba:	f8d3 50d8 	ldr.w	r5, [r3, #216]	@ 0xd8
 80184be:	b1bd      	cbz	r5, 80184f0 <write_name+0x3c>
 80184c0:	460f      	mov	r7, r1
 80184c2:	213f      	movs	r1, #63	@ 0x3f
 80184c4:	f00b fff2 	bl	80244ac <strchr>
    if(q) {
 80184c8:	4606      	mov	r6, r0
 80184ca:	b188      	cbz	r0, 80184f0 <write_name+0x3c>
        if(q != s)
 80184cc:	4284      	cmp	r4, r0
 80184ce:	d003      	beq.n	80184d8 <write_name+0x24>
            hal.stream.write_n(s, q - s);
 80184d0:	1b01      	subs	r1, r0, r4
 80184d2:	b289      	uxth	r1, r1
 80184d4:	4620      	mov	r0, r4
 80184d6:	47a8      	blx	r5
        hal.stream.write(uitoa(offset + 1));
 80184d8:	4c08      	ldr	r4, [pc, #32]	@ (80184fc <write_name+0x48>)
 80184da:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 80184de:	1c78      	adds	r0, r7, #1
 80184e0:	f7fc fe4c 	bl	801517c <uitoa>
 80184e4:	47a8      	blx	r5
        hal.stream.write(q + 1);
 80184e6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80184ea:	1c70      	adds	r0, r6, #1
 80184ec:	4798      	blx	r3
 80184ee:	e004      	b.n	80184fa <write_name+0x46>
        hal.stream.write(s);
 80184f0:	4b02      	ldr	r3, [pc, #8]	@ (80184fc <write_name+0x48>)
 80184f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80184f6:	4620      	mov	r0, r4
 80184f8:	4798      	blx	r3
}
 80184fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80184fc:	200011ac 	.word	0x200011ac

08018500 <report_settings_detail>:
{
 8018500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018504:	460c      	mov	r4, r1
 8018506:	4615      	mov	r5, r2
    uint_fast8_t suboffset = setting->flags.subgroups ? offset / setting->flags.increment : offset;
 8018508:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 801850c:	f013 0f04 	tst.w	r3, #4
 8018510:	d004      	beq.n	801851c <report_settings_detail+0x1c>
 8018512:	f3c3 06c3 	ubfx	r6, r3, #3, #4
 8018516:	fbb2 f6f6 	udiv	r6, r2, r6
 801851a:	e000      	b.n	801851e <report_settings_detail+0x1e>
 801851c:	4616      	mov	r6, r2
    switch(format)
 801851e:	2803      	cmp	r0, #3
 8018520:	f200 82d3 	bhi.w	8018aca <report_settings_detail+0x5ca>
 8018524:	e8df f010 	tbh	[pc, r0, lsl #1]
 8018528:	00040132 	.word	0x00040132
 801852c:	01fa01c3 	.word	0x01fa01c3
                hal.stream.write(ASCII_EOL "$");
 8018530:	4f81      	ldr	r7, [pc, #516]	@ (8018738 <report_settings_detail+0x238>)
 8018532:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018536:	4881      	ldr	r0, [pc, #516]	@ (801873c <report_settings_detail+0x23c>)
 8018538:	4798      	blx	r3
                hal.stream.write(uitoa(setting->id + offset));
 801853a:	f8d7 80b4 	ldr.w	r8, [r7, #180]	@ 0xb4
 801853e:	8820      	ldrh	r0, [r4, #0]
 8018540:	4428      	add	r0, r5
 8018542:	f7fc fe1b 	bl	801517c <uitoa>
 8018546:	47c0      	blx	r8
                hal.stream.write(": ");
 8018548:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801854c:	487c      	ldr	r0, [pc, #496]	@ (8018740 <report_settings_detail+0x240>)
 801854e:	4798      	blx	r3
                if(setting->group == Group_Axis0)
 8018550:	78a3      	ldrb	r3, [r4, #2]
 8018552:	2b2b      	cmp	r3, #43	@ 0x2b
 8018554:	d010      	beq.n	8018578 <report_settings_detail+0x78>
                write_name(setting->name, suboffset);
 8018556:	4631      	mov	r1, r6
 8018558:	6860      	ldr	r0, [r4, #4]
 801855a:	f7ff ffab 	bl	80184b4 <write_name>
                switch(setting_datatype_to_external(setting->datatype)) {
 801855e:	7b20      	ldrb	r0, [r4, #12]
 8018560:	f004 fed3 	bl	801d30a <setting_datatype_to_external>
 8018564:	2809      	cmp	r0, #9
 8018566:	f200 8087 	bhi.w	8018678 <report_settings_detail+0x178>
 801856a:	e8df f000 	tbb	[pc, r0]
 801856e:	5d56      	.short	0x5d56
 8018570:	850c7368 	.word	0x850c7368
 8018574:	7e858585 	.word	0x7e858585
                    hal.stream.write(axis_letter[offset]);
 8018578:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801857c:	4a71      	ldr	r2, [pc, #452]	@ (8018744 <report_settings_detail+0x244>)
 801857e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018582:	4798      	blx	r3
 8018584:	e7e7      	b.n	8018556 <report_settings_detail+0x56>
                        hal.stream.write(" as axismask");
 8018586:	4b6c      	ldr	r3, [pc, #432]	@ (8018738 <report_settings_detail+0x238>)
 8018588:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801858c:	486e      	ldr	r0, [pc, #440]	@ (8018748 <report_settings_detail+0x248>)
 801858e:	4798      	blx	r3
                bool reboot_newline = false;
 8018590:	2700      	movs	r7, #0
                if(setting->min_value && setting->max_value) {
 8018592:	6963      	ldr	r3, [r4, #20]
 8018594:	2b00      	cmp	r3, #0
 8018596:	d07e      	beq.n	8018696 <report_settings_detail+0x196>
 8018598:	69a3      	ldr	r3, [r4, #24]
 801859a:	2b00      	cmp	r3, #0
 801859c:	d07b      	beq.n	8018696 <report_settings_detail+0x196>
                    hal.stream.write(", range: ");
 801859e:	4e66      	ldr	r6, [pc, #408]	@ (8018738 <report_settings_detail+0x238>)
 80185a0:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80185a4:	4869      	ldr	r0, [pc, #420]	@ (801874c <report_settings_detail+0x24c>)
 80185a6:	4798      	blx	r3
                    hal.stream.write(setting->min_value);
 80185a8:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80185ac:	6960      	ldr	r0, [r4, #20]
 80185ae:	4798      	blx	r3
                    hal.stream.write(" - ");
 80185b0:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80185b4:	4866      	ldr	r0, [pc, #408]	@ (8018750 <report_settings_detail+0x250>)
 80185b6:	4798      	blx	r3
                    hal.stream.write(setting->max_value);
 80185b8:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80185bc:	69a0      	ldr	r0, [r4, #24]
 80185be:	4798      	blx	r3
                if(setting->flags.reboot_required)
 80185c0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80185c4:	f013 0f01 	tst.w	r3, #1
 80185c8:	d006      	beq.n	80185d8 <report_settings_detail+0xd8>
                    hal.stream.write(reboot_newline ? ASCII_EOL ASCII_EOL "Reboot required." : ", reboot required");
 80185ca:	4b5b      	ldr	r3, [pc, #364]	@ (8018738 <report_settings_detail+0x238>)
 80185cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80185d0:	2f00      	cmp	r7, #0
 80185d2:	d07d      	beq.n	80186d0 <report_settings_detail+0x1d0>
 80185d4:	485f      	ldr	r0, [pc, #380]	@ (8018754 <report_settings_detail+0x254>)
 80185d6:	4798      	blx	r3
                if(hal.stream.write_n) {
 80185d8:	4b57      	ldr	r3, [pc, #348]	@ (8018738 <report_settings_detail+0x238>)
 80185da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80185de:	2b00      	cmp	r3, #0
 80185e0:	f000 8273 	beq.w	8018aca <report_settings_detail+0x5ca>
                    const char *description = setting_get_description((setting_id_t)(setting->id + offset));
 80185e4:	8820      	ldrh	r0, [r4, #0]
 80185e6:	fa10 f085 	uxtah	r0, r0, r5
 80185ea:	b280      	uxth	r0, r0
 80185ec:	f004 fdde 	bl	801d1ac <setting_get_description>
                    if(description && *description != '\0') {
 80185f0:	4606      	mov	r6, r0
 80185f2:	2800      	cmp	r0, #0
 80185f4:	f000 808c 	beq.w	8018710 <report_settings_detail+0x210>
 80185f8:	7803      	ldrb	r3, [r0, #0]
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	f000 8088 	beq.w	8018710 <report_settings_detail+0x210>
                        hal.stream.write(ASCII_EOL);
 8018600:	4b4d      	ldr	r3, [pc, #308]	@ (8018738 <report_settings_detail+0x238>)
 8018602:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018606:	4854      	ldr	r0, [pc, #336]	@ (8018758 <report_settings_detail+0x258>)
 8018608:	4798      	blx	r3
                        if((lf = strstr(description, "\\n"))) while(lf) {
 801860a:	4954      	ldr	r1, [pc, #336]	@ (801875c <report_settings_detail+0x25c>)
 801860c:	4630      	mov	r0, r6
 801860e:	f00b fff1 	bl	80245f4 <strstr>
 8018612:	4605      	mov	r5, r0
 8018614:	2800      	cmp	r0, #0
 8018616:	d16e      	bne.n	80186f6 <report_settings_detail+0x1f6>
 8018618:	e06f      	b.n	80186fa <report_settings_detail+0x1fa>
                        hal.stream.write(" as boolean");
 801861a:	4b47      	ldr	r3, [pc, #284]	@ (8018738 <report_settings_detail+0x238>)
 801861c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018620:	484f      	ldr	r0, [pc, #316]	@ (8018760 <report_settings_detail+0x260>)
 8018622:	4798      	blx	r3
                bool reboot_newline = false;
 8018624:	2700      	movs	r7, #0
                        break;
 8018626:	e7b4      	b.n	8018592 <report_settings_detail+0x92>
                        hal.stream.write(" as bitfield:");
 8018628:	4b43      	ldr	r3, [pc, #268]	@ (8018738 <report_settings_detail+0x238>)
 801862a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801862e:	484d      	ldr	r0, [pc, #308]	@ (8018764 <report_settings_detail+0x264>)
 8018630:	4798      	blx	r3
                        report_bitfield(setting->format, true);
 8018632:	2101      	movs	r1, #1
 8018634:	6920      	ldr	r0, [r4, #16]
 8018636:	f7ff fecd 	bl	80183d4 <report_bitfield>
                        reboot_newline = true;
 801863a:	2701      	movs	r7, #1
                        break;
 801863c:	e7a9      	b.n	8018592 <report_settings_detail+0x92>
                        hal.stream.write(" as bitfield where setting bit 0 enables the rest:");
 801863e:	4b3e      	ldr	r3, [pc, #248]	@ (8018738 <report_settings_detail+0x238>)
 8018640:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018644:	4848      	ldr	r0, [pc, #288]	@ (8018768 <report_settings_detail+0x268>)
 8018646:	4798      	blx	r3
                        report_bitfield(setting->format, true);
 8018648:	2101      	movs	r1, #1
 801864a:	6920      	ldr	r0, [r4, #16]
 801864c:	f7ff fec2 	bl	80183d4 <report_bitfield>
                        reboot_newline = true;
 8018650:	2701      	movs	r7, #1
                        break;
 8018652:	e79e      	b.n	8018592 <report_settings_detail+0x92>
                        hal.stream.write(":");
 8018654:	4b38      	ldr	r3, [pc, #224]	@ (8018738 <report_settings_detail+0x238>)
 8018656:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801865a:	4844      	ldr	r0, [pc, #272]	@ (801876c <report_settings_detail+0x26c>)
 801865c:	4798      	blx	r3
                        report_bitfield(setting->format, false);
 801865e:	2100      	movs	r1, #0
 8018660:	6920      	ldr	r0, [r4, #16]
 8018662:	f7ff feb7 	bl	80183d4 <report_bitfield>
                        reboot_newline = true;
 8018666:	2701      	movs	r7, #1
                        break;
 8018668:	e793      	b.n	8018592 <report_settings_detail+0x92>
                        hal.stream.write(" as IP address");
 801866a:	4b33      	ldr	r3, [pc, #204]	@ (8018738 <report_settings_detail+0x238>)
 801866c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018670:	483f      	ldr	r0, [pc, #252]	@ (8018770 <report_settings_detail+0x270>)
 8018672:	4798      	blx	r3
                bool reboot_newline = false;
 8018674:	2700      	movs	r7, #0
                        break;
 8018676:	e78c      	b.n	8018592 <report_settings_detail+0x92>
                        if(setting->unit) {
 8018678:	68a3      	ldr	r3, [r4, #8]
 801867a:	b153      	cbz	r3, 8018692 <report_settings_detail+0x192>
                            hal.stream.write(" in ");
 801867c:	4e2e      	ldr	r6, [pc, #184]	@ (8018738 <report_settings_detail+0x238>)
 801867e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018682:	483c      	ldr	r0, [pc, #240]	@ (8018774 <report_settings_detail+0x274>)
 8018684:	4798      	blx	r3
                            hal.stream.write(setting->unit);
 8018686:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801868a:	68a0      	ldr	r0, [r4, #8]
 801868c:	4798      	blx	r3
                bool reboot_newline = false;
 801868e:	2700      	movs	r7, #0
 8018690:	e77f      	b.n	8018592 <report_settings_detail+0x92>
 8018692:	2700      	movs	r7, #0
 8018694:	e77d      	b.n	8018592 <report_settings_detail+0x92>
                } else if(!setting_is_list(setting)) {
 8018696:	4620      	mov	r0, r4
 8018698:	f004 fe3e 	bl	801d318 <setting_is_list>
 801869c:	2800      	cmp	r0, #0
 801869e:	d18f      	bne.n	80185c0 <report_settings_detail+0xc0>
                    if(setting->min_value) {
 80186a0:	6963      	ldr	r3, [r4, #20]
 80186a2:	b143      	cbz	r3, 80186b6 <report_settings_detail+0x1b6>
                        hal.stream.write(", min: ");
 80186a4:	4e24      	ldr	r6, [pc, #144]	@ (8018738 <report_settings_detail+0x238>)
 80186a6:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80186aa:	4833      	ldr	r0, [pc, #204]	@ (8018778 <report_settings_detail+0x278>)
 80186ac:	4798      	blx	r3
                        hal.stream.write(setting->min_value);
 80186ae:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80186b2:	6960      	ldr	r0, [r4, #20]
 80186b4:	4798      	blx	r3
                    if(setting->max_value) {
 80186b6:	69a3      	ldr	r3, [r4, #24]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d081      	beq.n	80185c0 <report_settings_detail+0xc0>
                        hal.stream.write(", max: ");
 80186bc:	4e1e      	ldr	r6, [pc, #120]	@ (8018738 <report_settings_detail+0x238>)
 80186be:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80186c2:	482e      	ldr	r0, [pc, #184]	@ (801877c <report_settings_detail+0x27c>)
 80186c4:	4798      	blx	r3
                        hal.stream.write(setting->max_value);
 80186c6:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80186ca:	69a0      	ldr	r0, [r4, #24]
 80186cc:	4798      	blx	r3
 80186ce:	e777      	b.n	80185c0 <report_settings_detail+0xc0>
                    hal.stream.write(reboot_newline ? ASCII_EOL ASCII_EOL "Reboot required." : ", reboot required");
 80186d0:	482b      	ldr	r0, [pc, #172]	@ (8018780 <report_settings_detail+0x280>)
 80186d2:	e780      	b.n	80185d6 <report_settings_detail+0xd6>
                            hal.stream.write(ASCII_EOL);
 80186d4:	4f18      	ldr	r7, [pc, #96]	@ (8018738 <report_settings_detail+0x238>)
 80186d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80186da:	481f      	ldr	r0, [pc, #124]	@ (8018758 <report_settings_detail+0x258>)
 80186dc:	4798      	blx	r3
                            hal.stream.write_n(description, lf - description);
 80186de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80186e2:	1ba9      	subs	r1, r5, r6
 80186e4:	b289      	uxth	r1, r1
 80186e6:	4630      	mov	r0, r6
 80186e8:	4798      	blx	r3
                            description = lf + 2;
 80186ea:	1cae      	adds	r6, r5, #2
                            lf = strstr(description, "\\n");
 80186ec:	491b      	ldr	r1, [pc, #108]	@ (801875c <report_settings_detail+0x25c>)
 80186ee:	4630      	mov	r0, r6
 80186f0:	f00b ff80 	bl	80245f4 <strstr>
 80186f4:	4605      	mov	r5, r0
                        if((lf = strstr(description, "\\n"))) while(lf) {
 80186f6:	2d00      	cmp	r5, #0
 80186f8:	d1ec      	bne.n	80186d4 <report_settings_detail+0x1d4>
                        if(*description != '\0') {
 80186fa:	7833      	ldrb	r3, [r6, #0]
 80186fc:	b143      	cbz	r3, 8018710 <report_settings_detail+0x210>
                            hal.stream.write(ASCII_EOL);
 80186fe:	4d0e      	ldr	r5, [pc, #56]	@ (8018738 <report_settings_detail+0x238>)
 8018700:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018704:	4814      	ldr	r0, [pc, #80]	@ (8018758 <report_settings_detail+0x258>)
 8018706:	4798      	blx	r3
                            hal.stream.write(description);
 8018708:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801870c:	4630      	mov	r0, r6
 801870e:	4798      	blx	r3
                    if(setting->flags.reboot_required) {
 8018710:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018714:	f013 0f01 	tst.w	r3, #1
 8018718:	f000 81d7 	beq.w	8018aca <report_settings_detail+0x5ca>
                        if(description && *description != '\0')
 801871c:	b136      	cbz	r6, 801872c <report_settings_detail+0x22c>
 801871e:	7833      	ldrb	r3, [r6, #0]
 8018720:	b123      	cbz	r3, 801872c <report_settings_detail+0x22c>
                            hal.stream.write(ASCII_EOL ASCII_EOL);
 8018722:	4b05      	ldr	r3, [pc, #20]	@ (8018738 <report_settings_detail+0x238>)
 8018724:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018728:	4816      	ldr	r0, [pc, #88]	@ (8018784 <report_settings_detail+0x284>)
 801872a:	4798      	blx	r3
                        hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + 4);
 801872c:	4b02      	ldr	r3, [pc, #8]	@ (8018738 <report_settings_detail+0x238>)
 801872e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018732:	4815      	ldr	r0, [pc, #84]	@ (8018788 <report_settings_detail+0x288>)
 8018734:	4798      	blx	r3
 8018736:	e1c8      	b.n	8018aca <report_settings_detail+0x5ca>
 8018738:	200011ac 	.word	0x200011ac
 801873c:	0802b478 	.word	0x0802b478
 8018740:	0802b638 	.word	0x0802b638
 8018744:	0802b218 	.word	0x0802b218
 8018748:	0802b47c 	.word	0x0802b47c
 801874c:	0802b4f4 	.word	0x0802b4f4
 8018750:	0802b3d0 	.word	0x0802b3d0
 8018754:	0802b3f8 	.word	0x0802b3f8
 8018758:	0802ba5c 	.word	0x0802ba5c
 801875c:	0802b510 	.word	0x0802b510
 8018760:	0802b48c 	.word	0x0802b48c
 8018764:	0802b498 	.word	0x0802b498
 8018768:	0802b4a8 	.word	0x0802b4a8
 801876c:	0802b718 	.word	0x0802b718
 8018770:	0802b4dc 	.word	0x0802b4dc
 8018774:	0802b4ec 	.word	0x0802b4ec
 8018778:	0802b500 	.word	0x0802b500
 801877c:	0802b508 	.word	0x0802b508
 8018780:	0802b410 	.word	0x0802b410
 8018784:	0802b514 	.word	0x0802b514
 8018788:	0802b428 	.word	0x0802b428
            hal.stream.write("[SETTING:");
 801878c:	4f8f      	ldr	r7, [pc, #572]	@ (80189cc <report_settings_detail+0x4cc>)
 801878e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018792:	488f      	ldr	r0, [pc, #572]	@ (80189d0 <report_settings_detail+0x4d0>)
 8018794:	4798      	blx	r3
            hal.stream.write(uitoa(setting->id + offset));
 8018796:	f8d7 80b4 	ldr.w	r8, [r7, #180]	@ 0xb4
 801879a:	8820      	ldrh	r0, [r4, #0]
 801879c:	4428      	add	r0, r5
 801879e:	f7fc fced 	bl	801517c <uitoa>
 80187a2:	47c0      	blx	r8
            hal.stream.write(vbar);
 80187a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80187a8:	488a      	ldr	r0, [pc, #552]	@ (80189d4 <report_settings_detail+0x4d4>)
 80187aa:	4798      	blx	r3
            hal.stream.write(uitoa(setting->group + (setting->flags.subgroups ? suboffset : 0)));
 80187ac:	f8d7 70b4 	ldr.w	r7, [r7, #180]	@ 0xb4
 80187b0:	78a0      	ldrb	r0, [r4, #2]
 80187b2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80187b6:	f013 0f04 	tst.w	r3, #4
 80187ba:	d06e      	beq.n	801889a <report_settings_detail+0x39a>
 80187bc:	4633      	mov	r3, r6
 80187be:	4418      	add	r0, r3
 80187c0:	f7fc fcdc 	bl	801517c <uitoa>
 80187c4:	47b8      	blx	r7
            hal.stream.write(vbar);
 80187c6:	4b81      	ldr	r3, [pc, #516]	@ (80189cc <report_settings_detail+0x4cc>)
 80187c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80187cc:	4881      	ldr	r0, [pc, #516]	@ (80189d4 <report_settings_detail+0x4d4>)
 80187ce:	4798      	blx	r3
            if(setting->group == Group_Axis0)
 80187d0:	78a3      	ldrb	r3, [r4, #2]
 80187d2:	2b2b      	cmp	r3, #43	@ 0x2b
 80187d4:	d063      	beq.n	801889e <report_settings_detail+0x39e>
            write_name(setting->name, suboffset);
 80187d6:	4631      	mov	r1, r6
 80187d8:	6860      	ldr	r0, [r4, #4]
 80187da:	f7ff fe6b 	bl	80184b4 <write_name>
            hal.stream.write(vbar);
 80187de:	4b7b      	ldr	r3, [pc, #492]	@ (80189cc <report_settings_detail+0x4cc>)
 80187e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80187e4:	487b      	ldr	r0, [pc, #492]	@ (80189d4 <report_settings_detail+0x4d4>)
 80187e6:	4798      	blx	r3
            if(setting->unit)
 80187e8:	68a0      	ldr	r0, [r4, #8]
 80187ea:	b118      	cbz	r0, 80187f4 <report_settings_detail+0x2f4>
                hal.stream.write(setting->unit);
 80187ec:	4b77      	ldr	r3, [pc, #476]	@ (80189cc <report_settings_detail+0x4cc>)
 80187ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80187f2:	4798      	blx	r3
            hal.stream.write(vbar);
 80187f4:	4d75      	ldr	r5, [pc, #468]	@ (80189cc <report_settings_detail+0x4cc>)
 80187f6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80187fa:	4e76      	ldr	r6, [pc, #472]	@ (80189d4 <report_settings_detail+0x4d4>)
 80187fc:	4630      	mov	r0, r6
 80187fe:	4798      	blx	r3
            hal.stream.write(uitoa(setting_datatype_to_external(setting->datatype)));
 8018800:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 8018804:	7b20      	ldrb	r0, [r4, #12]
 8018806:	f004 fd80 	bl	801d30a <setting_datatype_to_external>
 801880a:	f7fc fcb7 	bl	801517c <uitoa>
 801880e:	47b8      	blx	r7
            hal.stream.write(vbar);
 8018810:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018814:	4630      	mov	r0, r6
 8018816:	4798      	blx	r3
            if(setting->format)
 8018818:	6920      	ldr	r0, [r4, #16]
 801881a:	b110      	cbz	r0, 8018822 <report_settings_detail+0x322>
                hal.stream.write(setting->format);
 801881c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018820:	4798      	blx	r3
            hal.stream.write(vbar);
 8018822:	4b6a      	ldr	r3, [pc, #424]	@ (80189cc <report_settings_detail+0x4cc>)
 8018824:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018828:	486a      	ldr	r0, [pc, #424]	@ (80189d4 <report_settings_detail+0x4d4>)
 801882a:	4798      	blx	r3
            if(setting->min_value && !setting_is_list(setting))
 801882c:	6963      	ldr	r3, [r4, #20]
 801882e:	b143      	cbz	r3, 8018842 <report_settings_detail+0x342>
 8018830:	4620      	mov	r0, r4
 8018832:	f004 fd71 	bl	801d318 <setting_is_list>
 8018836:	b920      	cbnz	r0, 8018842 <report_settings_detail+0x342>
                hal.stream.write(setting->min_value);
 8018838:	4b64      	ldr	r3, [pc, #400]	@ (80189cc <report_settings_detail+0x4cc>)
 801883a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801883e:	6960      	ldr	r0, [r4, #20]
 8018840:	4798      	blx	r3
            hal.stream.write(vbar);
 8018842:	4b62      	ldr	r3, [pc, #392]	@ (80189cc <report_settings_detail+0x4cc>)
 8018844:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018848:	4862      	ldr	r0, [pc, #392]	@ (80189d4 <report_settings_detail+0x4d4>)
 801884a:	4798      	blx	r3
            if(setting->max_value)
 801884c:	69a0      	ldr	r0, [r4, #24]
 801884e:	b118      	cbz	r0, 8018858 <report_settings_detail+0x358>
                hal.stream.write(setting->max_value);
 8018850:	4b5e      	ldr	r3, [pc, #376]	@ (80189cc <report_settings_detail+0x4cc>)
 8018852:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018856:	4798      	blx	r3
            hal.stream.write(vbar);
 8018858:	4d5c      	ldr	r5, [pc, #368]	@ (80189cc <report_settings_detail+0x4cc>)
 801885a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801885e:	4e5d      	ldr	r6, [pc, #372]	@ (80189d4 <report_settings_detail+0x4d4>)
 8018860:	4630      	mov	r0, r6
 8018862:	4798      	blx	r3
            hal.stream.write(uitoa(setting->flags.reboot_required));
 8018864:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 8018868:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801886c:	f000 0001 	and.w	r0, r0, #1
 8018870:	f7fc fc84 	bl	801517c <uitoa>
 8018874:	47b8      	blx	r7
            hal.stream.write(vbar);
 8018876:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801887a:	4630      	mov	r0, r6
 801887c:	4798      	blx	r3
            hal.stream.write(uitoa(setting->flags.allow_null));
 801887e:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8018882:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018886:	f3c0 0040 	ubfx	r0, r0, #1, #1
 801888a:	f7fc fc77 	bl	801517c <uitoa>
 801888e:	47b0      	blx	r6
            hal.stream.write("]");
 8018890:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018894:	4850      	ldr	r0, [pc, #320]	@ (80189d8 <report_settings_detail+0x4d8>)
 8018896:	4798      	blx	r3
            break;
 8018898:	e117      	b.n	8018aca <report_settings_detail+0x5ca>
            hal.stream.write(uitoa(setting->group + (setting->flags.subgroups ? suboffset : 0)));
 801889a:	2300      	movs	r3, #0
 801889c:	e78f      	b.n	80187be <report_settings_detail+0x2be>
                hal.stream.write(axis_letter[offset]);
 801889e:	4b4b      	ldr	r3, [pc, #300]	@ (80189cc <report_settings_detail+0x4cc>)
 80188a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80188a4:	4a4d      	ldr	r2, [pc, #308]	@ (80189dc <report_settings_detail+0x4dc>)
 80188a6:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80188aa:	4798      	blx	r3
 80188ac:	e793      	b.n	80187d6 <report_settings_detail+0x2d6>
                write_quoted(uitoa(setting->id + offset), ",");
 80188ae:	8820      	ldrh	r0, [r4, #0]
 80188b0:	4428      	add	r0, r5
 80188b2:	f7fc fc63 	bl	801517c <uitoa>
 80188b6:	494a      	ldr	r1, [pc, #296]	@ (80189e0 <report_settings_detail+0x4e0>)
 80188b8:	f7ff f9c4 	bl	8017c44 <write_quoted>
                hal.stream.write("\"");
 80188bc:	4b43      	ldr	r3, [pc, #268]	@ (80189cc <report_settings_detail+0x4cc>)
 80188be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80188c2:	4848      	ldr	r0, [pc, #288]	@ (80189e4 <report_settings_detail+0x4e4>)
 80188c4:	4798      	blx	r3
                if(setting->group == Group_Axis0)
 80188c6:	78a3      	ldrb	r3, [r4, #2]
 80188c8:	2b2b      	cmp	r3, #43	@ 0x2b
 80188ca:	d018      	beq.n	80188fe <report_settings_detail+0x3fe>
                write_name(setting->name, suboffset);
 80188cc:	4631      	mov	r1, r6
 80188ce:	6860      	ldr	r0, [r4, #4]
 80188d0:	f7ff fdf0 	bl	80184b4 <write_name>
                hal.stream.write("\",");
 80188d4:	4b3d      	ldr	r3, [pc, #244]	@ (80189cc <report_settings_detail+0x4cc>)
 80188d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80188da:	4843      	ldr	r0, [pc, #268]	@ (80189e8 <report_settings_detail+0x4e8>)
 80188dc:	4798      	blx	r3
                if(setting->unit) {
 80188de:	68a0      	ldr	r0, [r4, #8]
 80188e0:	b1a8      	cbz	r0, 801890e <report_settings_detail+0x40e>
                    write_quoted(setting->unit, ",");
 80188e2:	493f      	ldr	r1, [pc, #252]	@ (80189e0 <report_settings_detail+0x4e0>)
 80188e4:	f7ff f9ae 	bl	8017c44 <write_quoted>
                const char *description = setting_get_description((setting_id_t)(setting->id + offset));
 80188e8:	8820      	ldrh	r0, [r4, #0]
 80188ea:	fa10 f085 	uxtah	r0, r0, r5
 80188ee:	b280      	uxth	r0, r0
 80188f0:	f004 fc5c 	bl	801d1ac <setting_get_description>
                write_quoted(description ? description : "", ",");
 80188f4:	b180      	cbz	r0, 8018918 <report_settings_detail+0x418>
 80188f6:	493a      	ldr	r1, [pc, #232]	@ (80189e0 <report_settings_detail+0x4e0>)
 80188f8:	f7ff f9a4 	bl	8017c44 <write_quoted>
            break;
 80188fc:	e0e5      	b.n	8018aca <report_settings_detail+0x5ca>
                    hal.stream.write(axis_letter[offset]);
 80188fe:	4b33      	ldr	r3, [pc, #204]	@ (80189cc <report_settings_detail+0x4cc>)
 8018900:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018904:	4a35      	ldr	r2, [pc, #212]	@ (80189dc <report_settings_detail+0x4dc>)
 8018906:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801890a:	4798      	blx	r3
 801890c:	e7de      	b.n	80188cc <report_settings_detail+0x3cc>
                    write_quoted("", ",");
 801890e:	4934      	ldr	r1, [pc, #208]	@ (80189e0 <report_settings_detail+0x4e0>)
 8018910:	4836      	ldr	r0, [pc, #216]	@ (80189ec <report_settings_detail+0x4ec>)
 8018912:	f7ff f997 	bl	8017c44 <write_quoted>
 8018916:	e7e7      	b.n	80188e8 <report_settings_detail+0x3e8>
                write_quoted(description ? description : "", ",");
 8018918:	4834      	ldr	r0, [pc, #208]	@ (80189ec <report_settings_detail+0x4ec>)
 801891a:	e7ec      	b.n	80188f6 <report_settings_detail+0x3f6>
                hal.stream.write(uitoa(setting->id + offset));
 801891c:	4f2b      	ldr	r7, [pc, #172]	@ (80189cc <report_settings_detail+0x4cc>)
 801891e:	f8d7 80b4 	ldr.w	r8, [r7, #180]	@ 0xb4
 8018922:	8820      	ldrh	r0, [r4, #0]
 8018924:	4428      	add	r0, r5
 8018926:	f7fc fc29 	bl	801517c <uitoa>
 801892a:	47c0      	blx	r8
                hal.stream.write("\t");
 801892c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018930:	482f      	ldr	r0, [pc, #188]	@ (80189f0 <report_settings_detail+0x4f0>)
 8018932:	4798      	blx	r3
                if(setting->group == Group_Axis0)
 8018934:	78a3      	ldrb	r3, [r4, #2]
 8018936:	2b2b      	cmp	r3, #43	@ 0x2b
 8018938:	d024      	beq.n	8018984 <report_settings_detail+0x484>
                write_name(setting->name, suboffset);
 801893a:	4631      	mov	r1, r6
 801893c:	6860      	ldr	r0, [r4, #4]
 801893e:	f7ff fdb9 	bl	80184b4 <write_name>
                hal.stream.write("\t");
 8018942:	4b22      	ldr	r3, [pc, #136]	@ (80189cc <report_settings_detail+0x4cc>)
 8018944:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018948:	4829      	ldr	r0, [pc, #164]	@ (80189f0 <report_settings_detail+0x4f0>)
 801894a:	4798      	blx	r3
                if(setting->unit)
 801894c:	68a0      	ldr	r0, [r4, #8]
 801894e:	b300      	cbz	r0, 8018992 <report_settings_detail+0x492>
                    hal.stream.write(setting->unit);
 8018950:	4b1e      	ldr	r3, [pc, #120]	@ (80189cc <report_settings_detail+0x4cc>)
 8018952:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018956:	4798      	blx	r3
                hal.stream.write("\t");
 8018958:	4b1c      	ldr	r3, [pc, #112]	@ (80189cc <report_settings_detail+0x4cc>)
 801895a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801895e:	4824      	ldr	r0, [pc, #144]	@ (80189f0 <report_settings_detail+0x4f0>)
 8018960:	4798      	blx	r3
                switch(setting_datatype_to_external(setting->datatype)) {
 8018962:	7b20      	ldrb	r0, [r4, #12]
 8018964:	f004 fcd1 	bl	801d30a <setting_datatype_to_external>
 8018968:	2809      	cmp	r0, #9
 801896a:	d84e      	bhi.n	8018a0a <report_settings_detail+0x50a>
 801896c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8018970:	00c000ba 	.word	0x00c000ba
 8018974:	00cc00c6 	.word	0x00cc00c6
 8018978:	004800c0 	.word	0x004800c0
 801897c:	00d800b4 	.word	0x00d800b4
 8018980:	00d200de 	.word	0x00d200de
                    hal.stream.write(axis_letter[offset]);
 8018984:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018988:	4a14      	ldr	r2, [pc, #80]	@ (80189dc <report_settings_detail+0x4dc>)
 801898a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801898e:	4798      	blx	r3
 8018990:	e7d3      	b.n	801893a <report_settings_detail+0x43a>
                else if(setting->datatype == Format_AxisMask || setting->datatype == Format_Bitfield || setting->datatype == Format_XBitfield)
 8018992:	7b23      	ldrb	r3, [r4, #12]
 8018994:	2b04      	cmp	r3, #4
 8018996:	d00a      	beq.n	80189ae <report_settings_detail+0x4ae>
 8018998:	2b01      	cmp	r3, #1
 801899a:	d008      	beq.n	80189ae <report_settings_detail+0x4ae>
 801899c:	2b02      	cmp	r3, #2
 801899e:	d006      	beq.n	80189ae <report_settings_detail+0x4ae>
                else if(setting->datatype == Format_Bool)
 80189a0:	b95b      	cbnz	r3, 80189ba <report_settings_detail+0x4ba>
                    hal.stream.write("boolean");
 80189a2:	4b0a      	ldr	r3, [pc, #40]	@ (80189cc <report_settings_detail+0x4cc>)
 80189a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80189a8:	4812      	ldr	r0, [pc, #72]	@ (80189f4 <report_settings_detail+0x4f4>)
 80189aa:	4798      	blx	r3
 80189ac:	e7d4      	b.n	8018958 <report_settings_detail+0x458>
                    hal.stream.write("mask");
 80189ae:	4b07      	ldr	r3, [pc, #28]	@ (80189cc <report_settings_detail+0x4cc>)
 80189b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80189b4:	4810      	ldr	r0, [pc, #64]	@ (80189f8 <report_settings_detail+0x4f8>)
 80189b6:	4798      	blx	r3
 80189b8:	e7ce      	b.n	8018958 <report_settings_detail+0x458>
                else if(setting->datatype == Format_RadioButtons)
 80189ba:	2b03      	cmp	r3, #3
 80189bc:	d1cc      	bne.n	8018958 <report_settings_detail+0x458>
                    hal.stream.write("integer");
 80189be:	4b03      	ldr	r3, [pc, #12]	@ (80189cc <report_settings_detail+0x4cc>)
 80189c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80189c4:	480d      	ldr	r0, [pc, #52]	@ (80189fc <report_settings_detail+0x4fc>)
 80189c6:	4798      	blx	r3
 80189c8:	e7c6      	b.n	8018958 <report_settings_detail+0x458>
 80189ca:	bf00      	nop
 80189cc:	200011ac 	.word	0x200011ac
 80189d0:	0802b51c 	.word	0x0802b51c
 80189d4:	0802bbd8 	.word	0x0802bbd8
 80189d8:	0802b528 	.word	0x0802b528
 80189dc:	0802b218 	.word	0x0802b218
 80189e0:	0802b7dc 	.word	0x0802b7dc
 80189e4:	0802b374 	.word	0x0802b374
 80189e8:	0802b52c 	.word	0x0802b52c
 80189ec:	0802b518 	.word	0x0802b518
 80189f0:	0802b530 	.word	0x0802b530
 80189f4:	0802b490 	.word	0x0802b490
 80189f8:	0802b484 	.word	0x0802b484
 80189fc:	0802b534 	.word	0x0802b534
                        hal.stream.write("integer");
 8018a00:	4b55      	ldr	r3, [pc, #340]	@ (8018b58 <report_settings_detail+0x658>)
 8018a02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018a06:	4855      	ldr	r0, [pc, #340]	@ (8018b5c <report_settings_detail+0x65c>)
 8018a08:	4798      	blx	r3
                hal.stream.write("\t");
 8018a0a:	4b53      	ldr	r3, [pc, #332]	@ (8018b58 <report_settings_detail+0x658>)
 8018a0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018a10:	4853      	ldr	r0, [pc, #332]	@ (8018b60 <report_settings_detail+0x660>)
 8018a12:	4798      	blx	r3
                if(setting->format)
 8018a14:	6920      	ldr	r0, [r4, #16]
 8018a16:	2800      	cmp	r0, #0
 8018a18:	f000 808e 	beq.w	8018b38 <report_settings_detail+0x638>
                    hal.stream.write(setting->format);
 8018a1c:	4b4e      	ldr	r3, [pc, #312]	@ (8018b58 <report_settings_detail+0x658>)
 8018a1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018a22:	4798      	blx	r3
                hal.stream.write("\t");
 8018a24:	4e4c      	ldr	r6, [pc, #304]	@ (8018b58 <report_settings_detail+0x658>)
 8018a26:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018a2a:	484d      	ldr	r0, [pc, #308]	@ (8018b60 <report_settings_detail+0x660>)
 8018a2c:	4798      	blx	r3
                const char *description = setting_get_description((setting_id_t)(setting->id + offset));
 8018a2e:	8823      	ldrh	r3, [r4, #0]
 8018a30:	fa13 f085 	uxtah	r0, r3, r5
 8018a34:	b280      	uxth	r0, r0
 8018a36:	f004 fbb9 	bl	801d1ac <setting_get_description>
                hal.stream.write(description ? description : "");
 8018a3a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018a3e:	4605      	mov	r5, r0
 8018a40:	2800      	cmp	r0, #0
 8018a42:	f000 8083 	beq.w	8018b4c <report_settings_detail+0x64c>
 8018a46:	4798      	blx	r3
                if(setting->flags.reboot_required)
 8018a48:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018a4c:	f013 0f01 	tst.w	r3, #1
 8018a50:	d009      	beq.n	8018a66 <report_settings_detail+0x566>
                    hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + (description && *description != '\0' ? 0 : 4));
 8018a52:	4b41      	ldr	r3, [pc, #260]	@ (8018b58 <report_settings_detail+0x658>)
 8018a54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018a58:	2d00      	cmp	r5, #0
 8018a5a:	d079      	beq.n	8018b50 <report_settings_detail+0x650>
 8018a5c:	782a      	ldrb	r2, [r5, #0]
 8018a5e:	2a00      	cmp	r2, #0
 8018a60:	d178      	bne.n	8018b54 <report_settings_detail+0x654>
 8018a62:	4840      	ldr	r0, [pc, #256]	@ (8018b64 <report_settings_detail+0x664>)
 8018a64:	4798      	blx	r3
                hal.stream.write("\t");
 8018a66:	4b3c      	ldr	r3, [pc, #240]	@ (8018b58 <report_settings_detail+0x658>)
 8018a68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018a6c:	483c      	ldr	r0, [pc, #240]	@ (8018b60 <report_settings_detail+0x660>)
 8018a6e:	4798      	blx	r3
                if(setting->min_value)
 8018a70:	6960      	ldr	r0, [r4, #20]
 8018a72:	b118      	cbz	r0, 8018a7c <report_settings_detail+0x57c>
                    hal.stream.write(setting->min_value);
 8018a74:	4b38      	ldr	r3, [pc, #224]	@ (8018b58 <report_settings_detail+0x658>)
 8018a76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018a7a:	4798      	blx	r3
                hal.stream.write("\t");
 8018a7c:	4b36      	ldr	r3, [pc, #216]	@ (8018b58 <report_settings_detail+0x658>)
 8018a7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018a82:	4837      	ldr	r0, [pc, #220]	@ (8018b60 <report_settings_detail+0x660>)
 8018a84:	4798      	blx	r3
                if(setting->max_value)
 8018a86:	69a0      	ldr	r0, [r4, #24]
 8018a88:	b118      	cbz	r0, 8018a92 <report_settings_detail+0x592>
                    hal.stream.write(setting->max_value);
 8018a8a:	4b33      	ldr	r3, [pc, #204]	@ (8018b58 <report_settings_detail+0x658>)
 8018a8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018a90:	4798      	blx	r3
                hal.stream.write("\t");
 8018a92:	4d31      	ldr	r5, [pc, #196]	@ (8018b58 <report_settings_detail+0x658>)
 8018a94:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018a98:	4e31      	ldr	r6, [pc, #196]	@ (8018b60 <report_settings_detail+0x660>)
 8018a9a:	4630      	mov	r0, r6
 8018a9c:	4798      	blx	r3
                hal.stream.write(uitoa(setting->flags.reboot_required));
 8018a9e:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 8018aa2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018aa6:	f000 0001 	and.w	r0, r0, #1
 8018aaa:	f7fc fb67 	bl	801517c <uitoa>
 8018aae:	47b8      	blx	r7
                hal.stream.write("\t");
 8018ab0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018ab4:	4630      	mov	r0, r6
 8018ab6:	4798      	blx	r3
                hal.stream.write(uitoa(setting->flags.allow_null));
 8018ab8:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 8018abc:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018ac0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8018ac4:	f7fc fb5a 	bl	801517c <uitoa>
 8018ac8:	47a8      	blx	r5
    hal.stream.write(ASCII_EOL);
 8018aca:	4b23      	ldr	r3, [pc, #140]	@ (8018b58 <report_settings_detail+0x658>)
 8018acc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018ad0:	4825      	ldr	r0, [pc, #148]	@ (8018b68 <report_settings_detail+0x668>)
 8018ad2:	4798      	blx	r3
}
 8018ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        hal.stream.write("float");
 8018ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8018b58 <report_settings_detail+0x658>)
 8018ada:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018ade:	4823      	ldr	r0, [pc, #140]	@ (8018b6c <report_settings_detail+0x66c>)
 8018ae0:	4798      	blx	r3
                        break;
 8018ae2:	e792      	b.n	8018a0a <report_settings_detail+0x50a>
                        hal.stream.write("bool");
 8018ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8018b58 <report_settings_detail+0x658>)
 8018ae6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018aea:	4821      	ldr	r0, [pc, #132]	@ (8018b70 <report_settings_detail+0x670>)
 8018aec:	4798      	blx	r3
                        break;
 8018aee:	e78c      	b.n	8018a0a <report_settings_detail+0x50a>
                        hal.stream.write("bitfield");
 8018af0:	4b19      	ldr	r3, [pc, #100]	@ (8018b58 <report_settings_detail+0x658>)
 8018af2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018af6:	481f      	ldr	r0, [pc, #124]	@ (8018b74 <report_settings_detail+0x674>)
 8018af8:	4798      	blx	r3
                        break;
 8018afa:	e786      	b.n	8018a0a <report_settings_detail+0x50a>
                        hal.stream.write("xbitfield");
 8018afc:	4b16      	ldr	r3, [pc, #88]	@ (8018b58 <report_settings_detail+0x658>)
 8018afe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018b02:	481d      	ldr	r0, [pc, #116]	@ (8018b78 <report_settings_detail+0x678>)
 8018b04:	4798      	blx	r3
                        break;
 8018b06:	e780      	b.n	8018a0a <report_settings_detail+0x50a>
                        hal.stream.write("radiobuttons");
 8018b08:	4b13      	ldr	r3, [pc, #76]	@ (8018b58 <report_settings_detail+0x658>)
 8018b0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018b0e:	481b      	ldr	r0, [pc, #108]	@ (8018b7c <report_settings_detail+0x67c>)
 8018b10:	4798      	blx	r3
                        break;
 8018b12:	e77a      	b.n	8018a0a <report_settings_detail+0x50a>
                        hal.stream.write("ipv4");
 8018b14:	4b10      	ldr	r3, [pc, #64]	@ (8018b58 <report_settings_detail+0x658>)
 8018b16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018b1a:	4819      	ldr	r0, [pc, #100]	@ (8018b80 <report_settings_detail+0x680>)
 8018b1c:	4798      	blx	r3
                        break;
 8018b1e:	e774      	b.n	8018a0a <report_settings_detail+0x50a>
                        hal.stream.write("string");
 8018b20:	4b0d      	ldr	r3, [pc, #52]	@ (8018b58 <report_settings_detail+0x658>)
 8018b22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018b26:	4817      	ldr	r0, [pc, #92]	@ (8018b84 <report_settings_detail+0x684>)
 8018b28:	4798      	blx	r3
                        break;
 8018b2a:	e76e      	b.n	8018a0a <report_settings_detail+0x50a>
                        hal.stream.write("password");
 8018b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8018b58 <report_settings_detail+0x658>)
 8018b2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018b32:	4815      	ldr	r0, [pc, #84]	@ (8018b88 <report_settings_detail+0x688>)
 8018b34:	4798      	blx	r3
                        break;
 8018b36:	e768      	b.n	8018a0a <report_settings_detail+0x50a>
                else if (setting->datatype == Format_AxisMask)
 8018b38:	7b23      	ldrb	r3, [r4, #12]
 8018b3a:	2b04      	cmp	r3, #4
 8018b3c:	f47f af72 	bne.w	8018a24 <report_settings_detail+0x524>
                    hal.stream.write("axes");
 8018b40:	4b05      	ldr	r3, [pc, #20]	@ (8018b58 <report_settings_detail+0x658>)
 8018b42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018b46:	4811      	ldr	r0, [pc, #68]	@ (8018b8c <report_settings_detail+0x68c>)
 8018b48:	4798      	blx	r3
 8018b4a:	e76b      	b.n	8018a24 <report_settings_detail+0x524>
                hal.stream.write(description ? description : "");
 8018b4c:	4810      	ldr	r0, [pc, #64]	@ (8018b90 <report_settings_detail+0x690>)
 8018b4e:	e77a      	b.n	8018a46 <report_settings_detail+0x546>
                    hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + (description && *description != '\0' ? 0 : 4));
 8018b50:	4804      	ldr	r0, [pc, #16]	@ (8018b64 <report_settings_detail+0x664>)
 8018b52:	e787      	b.n	8018a64 <report_settings_detail+0x564>
 8018b54:	480f      	ldr	r0, [pc, #60]	@ (8018b94 <report_settings_detail+0x694>)
 8018b56:	e785      	b.n	8018a64 <report_settings_detail+0x564>
 8018b58:	200011ac 	.word	0x200011ac
 8018b5c:	0802b534 	.word	0x0802b534
 8018b60:	0802b530 	.word	0x0802b530
 8018b64:	0802b428 	.word	0x0802b428
 8018b68:	0802ba5c 	.word	0x0802ba5c
 8018b6c:	0802b53c 	.word	0x0802b53c
 8018b70:	0802b544 	.word	0x0802b544
 8018b74:	0802b54c 	.word	0x0802b54c
 8018b78:	0802b558 	.word	0x0802b558
 8018b7c:	0802b564 	.word	0x0802b564
 8018b80:	0802b574 	.word	0x0802b574
 8018b84:	08030514 	.word	0x08030514
 8018b88:	0802b57c 	.word	0x0802b57c
 8018b8c:	0802b588 	.word	0x0802b588
 8018b90:	0802b518 	.word	0x0802b518
 8018b94:	0802b424 	.word	0x0802b424

08018b98 <print_unsorted>:
{
 8018b98:	b570      	push	{r4, r5, r6, lr}
 8018b9a:	4604      	mov	r4, r0
 8018b9c:	460e      	mov	r6, r1
 8018b9e:	4615      	mov	r5, r2
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset) &&
 8018ba0:	7850      	ldrb	r0, [r2, #1]
 8018ba2:	78a3      	ldrb	r3, [r4, #2]
 8018ba4:	4298      	cmp	r0, r3
 8018ba6:	d00b      	beq.n	8018bc0 <print_unsorted+0x28>
       (setting->is_available == NULL ||setting->is_available(setting)))
 8018ba8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset) &&
 8018baa:	b113      	cbz	r3, 8018bb2 <print_unsorted+0x1a>
       (setting->is_available == NULL ||setting->is_available(setting)))
 8018bac:	4620      	mov	r0, r4
 8018bae:	4798      	blx	r3
 8018bb0:	b120      	cbz	r0, 8018bbc <print_unsorted+0x24>
        report_settings_detail(((report_args_t *)args)->format, setting, offset);
 8018bb2:	4632      	mov	r2, r6
 8018bb4:	4621      	mov	r1, r4
 8018bb6:	7828      	ldrb	r0, [r5, #0]
 8018bb8:	f7ff fca2 	bl	8018500 <report_settings_detail>
}
 8018bbc:	2001      	movs	r0, #1
 8018bbe:	bd70      	pop	{r4, r5, r6, pc}
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset) &&
 8018bc0:	6853      	ldr	r3, [r2, #4]
 8018bc2:	428b      	cmp	r3, r1
 8018bc4:	d1fa      	bne.n	8018bbc <print_unsorted+0x24>
 8018bc6:	e7ef      	b.n	8018ba8 <print_unsorted+0x10>

08018bc8 <print_sorted>:
{
 8018bc8:	b508      	push	{r3, lr}
 8018bca:	4613      	mov	r3, r2
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset))
 8018bcc:	f892 c001 	ldrb.w	ip, [r2, #1]
 8018bd0:	7882      	ldrb	r2, [r0, #2]
 8018bd2:	4594      	cmp	ip, r2
 8018bd4:	d102      	bne.n	8018bdc <print_sorted+0x14>
 8018bd6:	685a      	ldr	r2, [r3, #4]
 8018bd8:	428a      	cmp	r2, r1
 8018bda:	d104      	bne.n	8018be6 <print_sorted+0x1e>
        report_settings_detail (((report_args_t *)args)->format, setting, offset);
 8018bdc:	460a      	mov	r2, r1
 8018bde:	4601      	mov	r1, r0
 8018be0:	7818      	ldrb	r0, [r3, #0]
 8018be2:	f7ff fc8d 	bl	8018500 <report_settings_detail>
}
 8018be6:	2001      	movs	r0, #1
 8018be8:	bd08      	pop	{r3, pc}
	...

08018bec <print_settings_details>:
{
 8018bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bf0:	b083      	sub	sp, #12
 8018bf2:	4606      	mov	r6, r0
    bool reported = group == Group_All;
 8018bf4:	4688      	mov	r8, r1
 8018bf6:	fab1 fb81 	clz	fp, r1
 8018bfa:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    setting_details_t *details = settings_get_details();
 8018bfe:	f003 fdeb 	bl	801c7d8 <settings_get_details>
 8018c02:	4604      	mov	r4, r0
    args.group = settings_normalize_group(group);
 8018c04:	4640      	mov	r0, r8
 8018c06:	f004 fa33 	bl	801d070 <settings_normalize_group>
 8018c0a:	f88d 0001 	strb.w	r0, [sp, #1]
    args.offset = group - args.group;
 8018c0e:	eba8 0000 	sub.w	r0, r8, r0
 8018c12:	9001      	str	r0, [sp, #4]
    args.format = format;
 8018c14:	f88d 6000 	strb.w	r6, [sp]
    uint_fast16_t idx, n_settings = 0;
 8018c18:	2500      	movs	r5, #0
        n_settings += details->n_settings;
 8018c1a:	8923      	ldrh	r3, [r4, #8]
 8018c1c:	441d      	add	r5, r3
    } while((details = details->next));
 8018c1e:	69a4      	ldr	r4, [r4, #24]
 8018c20:	2c00      	cmp	r4, #0
 8018c22:	d1fa      	bne.n	8018c1a <print_settings_details+0x2e>
    if(format == SettingsFormat_Grbl)
 8018c24:	2e02      	cmp	r6, #2
 8018c26:	d00f      	beq.n	8018c48 <print_settings_details+0x5c>
    else if(format == SettingsFormat_grblHAL)
 8018c28:	2e03      	cmp	r6, #3
 8018c2a:	d013      	beq.n	8018c54 <print_settings_details+0x68>
    details = settings_get_details();
 8018c2c:	f003 fdd4 	bl	801c7d8 <settings_get_details>
 8018c30:	4607      	mov	r7, r0
    if((all_settings = psetting = calloc(n_settings, sizeof(setting_detail_t *)))) {
 8018c32:	2104      	movs	r1, #4
 8018c34:	4628      	mov	r0, r5
 8018c36:	f009 fb3d 	bl	80222b4 <calloc>
 8018c3a:	4682      	mov	sl, r0
 8018c3c:	2800      	cmp	r0, #0
 8018c3e:	d068      	beq.n	8018d12 <print_settings_details+0x126>
 8018c40:	4606      	mov	r6, r0
        n_settings = 0;
 8018c42:	f04f 0900 	mov.w	r9, #0
 8018c46:	e028      	b.n	8018c9a <print_settings_details+0xae>
        hal.stream.write("\"$-Code\",\" Setting\",\" Units\",\" Setting Description\"" ASCII_EOL);
 8018c48:	4b34      	ldr	r3, [pc, #208]	@ (8018d1c <print_settings_details+0x130>)
 8018c4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018c4e:	4834      	ldr	r0, [pc, #208]	@ (8018d20 <print_settings_details+0x134>)
 8018c50:	4798      	blx	r3
 8018c52:	e7eb      	b.n	8018c2c <print_settings_details+0x40>
        hal.stream.write("$-Code\tSetting\tUnits\tDatatype\tData format\tSetting Description\tMin\tMax" ASCII_EOL);
 8018c54:	4b31      	ldr	r3, [pc, #196]	@ (8018d1c <print_settings_details+0x130>)
 8018c56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018c5a:	4832      	ldr	r0, [pc, #200]	@ (8018d24 <print_settings_details+0x138>)
 8018c5c:	4798      	blx	r3
 8018c5e:	e7e5      	b.n	8018c2c <print_settings_details+0x40>
                if((group == Group_All || setting->group == args.group) && (setting->is_available == NULL || setting->is_available(setting))) {
 8018c60:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8018c62:	b113      	cbz	r3, 8018c6a <print_settings_details+0x7e>
 8018c64:	4628      	mov	r0, r5
 8018c66:	4798      	blx	r3
 8018c68:	b118      	cbz	r0, 8018c72 <print_settings_details+0x86>
                    *psetting++ = (setting_detail_t *)setting;
 8018c6a:	f846 5b04 	str.w	r5, [r6], #4
                    n_settings++;
 8018c6e:	f109 0901 	add.w	r9, r9, #1
            for(idx = 0; idx < details->n_settings; idx++) {
 8018c72:	3401      	adds	r4, #1
 8018c74:	893b      	ldrh	r3, [r7, #8]
 8018c76:	42a3      	cmp	r3, r4
 8018c78:	d90d      	bls.n	8018c96 <print_settings_details+0xaa>
                setting = &details->settings[idx];
 8018c7a:	68fd      	ldr	r5, [r7, #12]
 8018c7c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8018c80:	eb05 1503 	add.w	r5, r5, r3, lsl #4
                if((group == Group_All || setting->group == args.group) && (setting->is_available == NULL || setting->is_available(setting))) {
 8018c84:	f1b8 0f00 	cmp.w	r8, #0
 8018c88:	d0ea      	beq.n	8018c60 <print_settings_details+0x74>
 8018c8a:	78aa      	ldrb	r2, [r5, #2]
 8018c8c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8018c90:	429a      	cmp	r2, r3
 8018c92:	d1ee      	bne.n	8018c72 <print_settings_details+0x86>
 8018c94:	e7e4      	b.n	8018c60 <print_settings_details+0x74>
        } while((details = details->next));
 8018c96:	69bf      	ldr	r7, [r7, #24]
 8018c98:	b10f      	cbz	r7, 8018c9e <print_settings_details+0xb2>
            for(idx = 0; idx < details->n_settings; idx++) {
 8018c9a:	2400      	movs	r4, #0
 8018c9c:	e7ea      	b.n	8018c74 <print_settings_details+0x88>
        qsort(all_settings, n_settings, sizeof(setting_detail_t *), cmp_settings);
 8018c9e:	4b22      	ldr	r3, [pc, #136]	@ (8018d28 <print_settings_details+0x13c>)
 8018ca0:	2204      	movs	r2, #4
 8018ca2:	4649      	mov	r1, r9
 8018ca4:	4650      	mov	r0, sl
 8018ca6:	f00a fad6 	bl	8023256 <qsort>
        for(idx = 0; idx < n_settings; idx++) {
 8018caa:	2400      	movs	r4, #0
 8018cac:	e000      	b.n	8018cb0 <print_settings_details+0xc4>
 8018cae:	3401      	adds	r4, #1
 8018cb0:	454c      	cmp	r4, r9
 8018cb2:	d209      	bcs.n	8018cc8 <print_settings_details+0xdc>
            if(settings_iterator(all_settings[idx], print_sorted, &args))
 8018cb4:	466a      	mov	r2, sp
 8018cb6:	491d      	ldr	r1, [pc, #116]	@ (8018d2c <print_settings_details+0x140>)
 8018cb8:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 8018cbc:	f004 fa3a 	bl	801d134 <settings_iterator>
 8018cc0:	2800      	cmp	r0, #0
 8018cc2:	d0f4      	beq.n	8018cae <print_settings_details+0xc2>
                reported = true;
 8018cc4:	4683      	mov	fp, r0
 8018cc6:	e7f2      	b.n	8018cae <print_settings_details+0xc2>
        free(all_settings);
 8018cc8:	4650      	mov	r0, sl
 8018cca:	f009 fb17 	bl	80222fc <free>
    return reported ? Status_OK : Status_SettingDisabled;
 8018cce:	f1bb 0f00 	cmp.w	fp, #0
 8018cd2:	d020      	beq.n	8018d16 <print_settings_details+0x12a>
 8018cd4:	2000      	movs	r0, #0
}
 8018cd6:	b003      	add	sp, #12
 8018cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(settings_iterator(setting, print_unsorted, &args))
 8018cdc:	466a      	mov	r2, sp
 8018cde:	4914      	ldr	r1, [pc, #80]	@ (8018d30 <print_settings_details+0x144>)
 8018ce0:	f004 fa28 	bl	801d134 <settings_iterator>
 8018ce4:	b100      	cbz	r0, 8018ce8 <print_settings_details+0xfc>
                    reported = true;
 8018ce6:	4683      	mov	fp, r0
        for(idx = 0; idx < details->n_settings; idx++) {
 8018ce8:	3401      	adds	r4, #1
 8018cea:	893b      	ldrh	r3, [r7, #8]
 8018cec:	42a3      	cmp	r3, r4
 8018cee:	d90d      	bls.n	8018d0c <print_settings_details+0x120>
            setting = &details->settings[idx];
 8018cf0:	68f8      	ldr	r0, [r7, #12]
 8018cf2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8018cf6:	eb00 1003 	add.w	r0, r0, r3, lsl #4
            if(group == Group_All || setting->group == args.group) {
 8018cfa:	f1b8 0f00 	cmp.w	r8, #0
 8018cfe:	d0ed      	beq.n	8018cdc <print_settings_details+0xf0>
 8018d00:	7882      	ldrb	r2, [r0, #2]
 8018d02:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8018d06:	429a      	cmp	r2, r3
 8018d08:	d1ee      	bne.n	8018ce8 <print_settings_details+0xfc>
 8018d0a:	e7e7      	b.n	8018cdc <print_settings_details+0xf0>
    } while((details = details->next));
 8018d0c:	69bf      	ldr	r7, [r7, #24]
 8018d0e:	2f00      	cmp	r7, #0
 8018d10:	d0dd      	beq.n	8018cce <print_settings_details+0xe2>
        for(idx = 0; idx < details->n_settings; idx++) {
 8018d12:	2400      	movs	r4, #0
 8018d14:	e7e9      	b.n	8018cea <print_settings_details+0xfe>
    return reported ? Status_OK : Status_SettingDisabled;
 8018d16:	2035      	movs	r0, #53	@ 0x35
 8018d18:	e7dd      	b.n	8018cd6 <print_settings_details+0xea>
 8018d1a:	bf00      	nop
 8018d1c:	200011ac 	.word	0x200011ac
 8018d20:	0802b590 	.word	0x0802b590
 8018d24:	0802b5c8 	.word	0x0802b5c8
 8018d28:	08017c39 	.word	0x08017c39
 8018d2c:	08018bc9 	.word	0x08018bc9
 8018d30:	08018b99 	.word	0x08018b99

08018d34 <print_setting_group>:
{
 8018d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d36:	4604      	mov	r4, r0
 8018d38:	460d      	mov	r5, r1
    if(settings_is_group_available(group->id)) {
 8018d3a:	7840      	ldrb	r0, [r0, #1]
 8018d3c:	f004 fa80 	bl	801d240 <settings_is_group_available>
 8018d40:	b178      	cbz	r0, 8018d62 <print_setting_group+0x2e>
        if(!prefix) {
 8018d42:	b17d      	cbz	r5, 8018d64 <print_setting_group+0x30>
        } else if(group->id != Group_Root) {
 8018d44:	7863      	ldrb	r3, [r4, #1]
 8018d46:	b163      	cbz	r3, 8018d62 <print_setting_group+0x2e>
            hal.stream.write(prefix);
 8018d48:	4e18      	ldr	r6, [pc, #96]	@ (8018dac <print_setting_group+0x78>)
 8018d4a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018d4e:	4628      	mov	r0, r5
 8018d50:	4798      	blx	r3
            hal.stream.write(group->name);
 8018d52:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018d56:	6860      	ldr	r0, [r4, #4]
 8018d58:	4798      	blx	r3
            hal.stream.write(ASCII_EOL);
 8018d5a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018d5e:	4814      	ldr	r0, [pc, #80]	@ (8018db0 <print_setting_group+0x7c>)
 8018d60:	4798      	blx	r3
}
 8018d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            hal.stream.write("[SETTINGGROUP:");
 8018d64:	4d11      	ldr	r5, [pc, #68]	@ (8018dac <print_setting_group+0x78>)
 8018d66:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018d6a:	4812      	ldr	r0, [pc, #72]	@ (8018db4 <print_setting_group+0x80>)
 8018d6c:	4798      	blx	r3
            hal.stream.write(uitoa(group->id));
 8018d6e:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8018d72:	7860      	ldrb	r0, [r4, #1]
 8018d74:	f7fc fa02 	bl	801517c <uitoa>
 8018d78:	47b0      	blx	r6
            hal.stream.write(vbar);
 8018d7a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018d7e:	4e0e      	ldr	r6, [pc, #56]	@ (8018db8 <print_setting_group+0x84>)
 8018d80:	4630      	mov	r0, r6
 8018d82:	4798      	blx	r3
            hal.stream.write(uitoa(group->parent));
 8018d84:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 8018d88:	7820      	ldrb	r0, [r4, #0]
 8018d8a:	f7fc f9f7 	bl	801517c <uitoa>
 8018d8e:	47b8      	blx	r7
            hal.stream.write(vbar);
 8018d90:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018d94:	4630      	mov	r0, r6
 8018d96:	4798      	blx	r3
            hal.stream.write(group->name);
 8018d98:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018d9c:	6860      	ldr	r0, [r4, #4]
 8018d9e:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 8018da0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018da4:	4805      	ldr	r0, [pc, #20]	@ (8018dbc <print_setting_group+0x88>)
 8018da6:	4798      	blx	r3
 8018da8:	e7db      	b.n	8018d62 <print_setting_group+0x2e>
 8018daa:	bf00      	nop
 8018dac:	200011ac 	.word	0x200011ac
 8018db0:	0802ba5c 	.word	0x0802ba5c
 8018db4:	0802b610 	.word	0x0802b610
 8018db8:	0802bbd8 	.word	0x0802bbd8
 8018dbc:	0802b3b0 	.word	0x0802b3b0

08018dc0 <report_pin_info>:
{
 8018dc0:	b570      	push	{r4, r5, r6, lr}
 8018dc2:	4604      	mov	r4, r0
    hal.stream.write("[PIN:");
 8018dc4:	4b16      	ldr	r3, [pc, #88]	@ (8018e20 <report_pin_info+0x60>)
 8018dc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018dca:	4816      	ldr	r0, [pc, #88]	@ (8018e24 <report_pin_info+0x64>)
 8018dcc:	4798      	blx	r3
    if(*pin->port)
 8018dce:	78a3      	ldrb	r3, [r4, #2]
 8018dd0:	b123      	cbz	r3, 8018ddc <report_pin_info+0x1c>
        hal.stream.write(pin->port);
 8018dd2:	4b13      	ldr	r3, [pc, #76]	@ (8018e20 <report_pin_info+0x60>)
 8018dd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018dd8:	1ca0      	adds	r0, r4, #2
 8018dda:	4798      	blx	r3
    hal.stream.write(uitoa(pin->pin));
 8018ddc:	4d10      	ldr	r5, [pc, #64]	@ (8018e20 <report_pin_info+0x60>)
 8018dde:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8018de2:	7820      	ldrb	r0, [r4, #0]
 8018de4:	f7fc f9ca 	bl	801517c <uitoa>
 8018de8:	47b0      	blx	r6
    hal.stream.write(",");
 8018dea:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018dee:	480e      	ldr	r0, [pc, #56]	@ (8018e28 <report_pin_info+0x68>)
 8018df0:	4798      	blx	r3
    hal.stream.write(xbar_fn_to_pinname(pin->function));
 8018df2:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 8018df6:	7860      	ldrb	r0, [r4, #1]
 8018df8:	f7f3 fd46 	bl	800c888 <xbar_fn_to_pinname>
 8018dfc:	47a8      	blx	r5
    if(pin->description) {
 8018dfe:	6923      	ldr	r3, [r4, #16]
 8018e00:	b143      	cbz	r3, 8018e14 <report_pin_info+0x54>
        hal.stream.write(",");
 8018e02:	4d07      	ldr	r5, [pc, #28]	@ (8018e20 <report_pin_info+0x60>)
 8018e04:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018e08:	4807      	ldr	r0, [pc, #28]	@ (8018e28 <report_pin_info+0x68>)
 8018e0a:	4798      	blx	r3
        hal.stream.write(pin->description);
 8018e0c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018e10:	6920      	ldr	r0, [r4, #16]
 8018e12:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 8018e14:	4b02      	ldr	r3, [pc, #8]	@ (8018e20 <report_pin_info+0x60>)
 8018e16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018e1a:	4804      	ldr	r0, [pc, #16]	@ (8018e2c <report_pin_info+0x6c>)
 8018e1c:	4798      	blx	r3
}
 8018e1e:	bd70      	pop	{r4, r5, r6, pc}
 8018e20:	200011ac 	.word	0x200011ac
 8018e24:	0802b620 	.word	0x0802b620
 8018e28:	0802b7dc 	.word	0x0802b7dc
 8018e2c:	0802b3b0 	.word	0x0802b3b0

08018e30 <report_pin>:
{
 8018e30:	b500      	push	{lr}
 8018e32:	b087      	sub	sp, #28
    report_pin_info(get_pin_info(pin, &info));
 8018e34:	4669      	mov	r1, sp
 8018e36:	f7ff fa45 	bl	80182c4 <get_pin_info>
 8018e3a:	f7ff ffc1 	bl	8018dc0 <report_pin_info>
}
 8018e3e:	b007      	add	sp, #28
 8018e40:	f85d fb04 	ldr.w	pc, [sp], #4

08018e44 <report_setting>:
{
 8018e44:	b538      	push	{r3, r4, r5, lr}
 8018e46:	4604      	mov	r4, r0
 8018e48:	460d      	mov	r5, r1
    appendbuf(3, "$", uitoa(setting->id + offset), "=");
 8018e4a:	8800      	ldrh	r0, [r0, #0]
 8018e4c:	4408      	add	r0, r1
 8018e4e:	f7fc f995 	bl	801517c <uitoa>
 8018e52:	4602      	mov	r2, r0
 8018e54:	4b0c      	ldr	r3, [pc, #48]	@ (8018e88 <report_setting+0x44>)
 8018e56:	490d      	ldr	r1, [pc, #52]	@ (8018e8c <report_setting+0x48>)
 8018e58:	2003      	movs	r0, #3
 8018e5a:	f7ff fa5f 	bl	801831c <appendbuf>
    char *value = setting_get_value(setting, offset);
 8018e5e:	4629      	mov	r1, r5
 8018e60:	4620      	mov	r0, r4
 8018e62:	f003 fe9b 	bl	801cb9c <setting_get_value>
    if(value) {
 8018e66:	b168      	cbz	r0, 8018e84 <report_setting+0x40>
 8018e68:	4605      	mov	r5, r0
        hal.stream.write(buf);
 8018e6a:	4c09      	ldr	r4, [pc, #36]	@ (8018e90 <report_setting+0x4c>)
 8018e6c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8018e70:	4808      	ldr	r0, [pc, #32]	@ (8018e94 <report_setting+0x50>)
 8018e72:	4798      	blx	r3
        hal.stream.write(value);
 8018e74:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8018e78:	4628      	mov	r0, r5
 8018e7a:	4798      	blx	r3
        hal.stream.write(ASCII_EOL);
 8018e7c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8018e80:	4805      	ldr	r0, [pc, #20]	@ (8018e98 <report_setting+0x54>)
 8018e82:	4798      	blx	r3
}
 8018e84:	2001      	movs	r0, #1
 8018e86:	bd38      	pop	{r3, r4, r5, pc}
 8018e88:	0802b628 	.word	0x0802b628
 8018e8c:	0802b398 	.word	0x0802b398
 8018e90:	200011ac 	.word	0x200011ac
 8018e94:	20001a94 	.word	0x20001a94
 8018e98:	0802ba5c 	.word	0x0802ba5c

08018e9c <report_init>:
    get_axis_value = settings.flags.report_inches ? get_axis_value_inches : get_axis_value_mm;
 8018e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8018ecc <report_init+0x30>)
 8018e9e:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8018ea2:	f013 0301 	ands.w	r3, r3, #1
 8018ea6:	d00b      	beq.n	8018ec0 <report_init+0x24>
 8018ea8:	4909      	ldr	r1, [pc, #36]	@ (8018ed0 <report_init+0x34>)
 8018eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8018ed4 <report_init+0x38>)
 8018eac:	6011      	str	r1, [r2, #0]
    get_axis_values = settings.flags.report_inches ? get_axis_values_inches : get_axis_values_mm;
 8018eae:	b14b      	cbz	r3, 8018ec4 <report_init+0x28>
 8018eb0:	4909      	ldr	r1, [pc, #36]	@ (8018ed8 <report_init+0x3c>)
 8018eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8018edc <report_init+0x40>)
 8018eb4:	6011      	str	r1, [r2, #0]
    get_rate_value = settings.flags.report_inches ? get_rate_value_inch : get_rate_value_mm;
 8018eb6:	b13b      	cbz	r3, 8018ec8 <report_init+0x2c>
 8018eb8:	4a09      	ldr	r2, [pc, #36]	@ (8018ee0 <report_init+0x44>)
 8018eba:	4b0a      	ldr	r3, [pc, #40]	@ (8018ee4 <report_init+0x48>)
 8018ebc:	601a      	str	r2, [r3, #0]
}
 8018ebe:	4770      	bx	lr
    get_axis_value = settings.flags.report_inches ? get_axis_value_inches : get_axis_value_mm;
 8018ec0:	4909      	ldr	r1, [pc, #36]	@ (8018ee8 <report_init+0x4c>)
 8018ec2:	e7f2      	b.n	8018eaa <report_init+0xe>
    get_axis_values = settings.flags.report_inches ? get_axis_values_inches : get_axis_values_mm;
 8018ec4:	4909      	ldr	r1, [pc, #36]	@ (8018eec <report_init+0x50>)
 8018ec6:	e7f4      	b.n	8018eb2 <report_init+0x16>
    get_rate_value = settings.flags.report_inches ? get_rate_value_inch : get_rate_value_mm;
 8018ec8:	4a09      	ldr	r2, [pc, #36]	@ (8018ef0 <report_init+0x54>)
 8018eca:	e7f6      	b.n	8018eba <report_init+0x1e>
 8018ecc:	20001bc4 	.word	0x20001bc4
 8018ed0:	08018255 	.word	0x08018255
 8018ed4:	20001a8c 	.word	0x20001a8c
 8018ed8:	080181b5 	.word	0x080181b5
 8018edc:	20001a90 	.word	0x20001a90
 8018ee0:	08017db1 	.word	0x08017db1
 8018ee4:	20001a88 	.word	0x20001a88
 8018ee8:	0801823d 	.word	0x0801823d
 8018eec:	08018141 	.word	0x08018141
 8018ef0:	08017da1 	.word	0x08017da1

08018ef4 <report_message>:
{
 8018ef4:	b538      	push	{r3, r4, r5, lr}
 8018ef6:	4605      	mov	r5, r0
 8018ef8:	460c      	mov	r4, r1
    if(hal.stream.is_connected()) {
 8018efa:	4b16      	ldr	r3, [pc, #88]	@ (8018f54 <report_message+0x60>)
 8018efc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8018f00:	4798      	blx	r3
 8018f02:	b198      	cbz	r0, 8018f2c <report_message+0x38>
        hal.stream.write("[MSG:");
 8018f04:	4b13      	ldr	r3, [pc, #76]	@ (8018f54 <report_message+0x60>)
 8018f06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018f0a:	4813      	ldr	r0, [pc, #76]	@ (8018f58 <report_message+0x64>)
 8018f0c:	4798      	blx	r3
        switch(type) {
 8018f0e:	2c02      	cmp	r4, #2
 8018f10:	d013      	beq.n	8018f3a <report_message+0x46>
 8018f12:	2c03      	cmp	r4, #3
 8018f14:	d017      	beq.n	8018f46 <report_message+0x52>
 8018f16:	2c01      	cmp	r4, #1
 8018f18:	d009      	beq.n	8018f2e <report_message+0x3a>
        hal.stream.write(msg);
 8018f1a:	4c0e      	ldr	r4, [pc, #56]	@ (8018f54 <report_message+0x60>)
 8018f1c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8018f20:	4628      	mov	r0, r5
 8018f22:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 8018f24:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8018f28:	480c      	ldr	r0, [pc, #48]	@ (8018f5c <report_message+0x68>)
 8018f2a:	4798      	blx	r3
}
 8018f2c:	bd38      	pop	{r3, r4, r5, pc}
                hal.stream.write("Info: ");
 8018f2e:	4b09      	ldr	r3, [pc, #36]	@ (8018f54 <report_message+0x60>)
 8018f30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018f34:	480a      	ldr	r0, [pc, #40]	@ (8018f60 <report_message+0x6c>)
 8018f36:	4798      	blx	r3
                break;
 8018f38:	e7ef      	b.n	8018f1a <report_message+0x26>
                hal.stream.write("Warning: ");
 8018f3a:	4b06      	ldr	r3, [pc, #24]	@ (8018f54 <report_message+0x60>)
 8018f3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018f40:	4808      	ldr	r0, [pc, #32]	@ (8018f64 <report_message+0x70>)
 8018f42:	4798      	blx	r3
                break;
 8018f44:	e7e9      	b.n	8018f1a <report_message+0x26>
                hal.stream.write("Debug: ");
 8018f46:	4b03      	ldr	r3, [pc, #12]	@ (8018f54 <report_message+0x60>)
 8018f48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018f4c:	4806      	ldr	r0, [pc, #24]	@ (8018f68 <report_message+0x74>)
 8018f4e:	4798      	blx	r3
                break;
 8018f50:	e7e3      	b.n	8018f1a <report_message+0x26>
 8018f52:	bf00      	nop
 8018f54:	200011ac 	.word	0x200011ac
 8018f58:	0802b62c 	.word	0x0802b62c
 8018f5c:	0802b3b0 	.word	0x0802b3b0
 8018f60:	0802b634 	.word	0x0802b634
 8018f64:	0802b63c 	.word	0x0802b63c
 8018f68:	0802b648 	.word	0x0802b648

08018f6c <report_feedback_message>:
{
 8018f6c:	b510      	push	{r4, lr}
 8018f6e:	4604      	mov	r4, r0
    const message_t *msg = message_get(id);
 8018f70:	f7fa f9f2 	bl	8013358 <message_get>
    report_message(msg ? msg->text : "", msg ? msg->type : Message_Plain);
 8018f74:	b168      	cbz	r0, 8018f92 <report_feedback_message+0x26>
 8018f76:	4603      	mov	r3, r0
 8018f78:	6840      	ldr	r0, [r0, #4]
 8018f7a:	7859      	ldrb	r1, [r3, #1]
 8018f7c:	f7ff ffba 	bl	8018ef4 <report_message>
    if(id == Message_None && grbl.on_gcode_message)
 8018f80:	b92c      	cbnz	r4, 8018f8e <report_feedback_message+0x22>
 8018f82:	4b05      	ldr	r3, [pc, #20]	@ (8018f98 <report_feedback_message+0x2c>)
 8018f84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8018f88:	b10b      	cbz	r3, 8018f8e <report_feedback_message+0x22>
        grbl.on_gcode_message("");
 8018f8a:	4804      	ldr	r0, [pc, #16]	@ (8018f9c <report_feedback_message+0x30>)
 8018f8c:	4798      	blx	r3
}
 8018f8e:	4620      	mov	r0, r4
 8018f90:	bd10      	pop	{r4, pc}
    report_message(msg ? msg->text : "", msg ? msg->type : Message_Plain);
 8018f92:	4802      	ldr	r0, [pc, #8]	@ (8018f9c <report_feedback_message+0x30>)
 8018f94:	2100      	movs	r1, #0
 8018f96:	e7f1      	b.n	8018f7c <report_feedback_message+0x10>
 8018f98:	20001394 	.word	0x20001394
 8018f9c:	0802b518 	.word	0x0802b518

08018fa0 <report_plain>:
{
 8018fa0:	b508      	push	{r3, lr}
    report_message((char *)message, Message_Plain);
 8018fa2:	2100      	movs	r1, #0
 8018fa4:	f7ff ffa6 	bl	8018ef4 <report_message>
}
 8018fa8:	bd08      	pop	{r3, pc}

08018faa <report_warning>:
{
 8018faa:	b508      	push	{r3, lr}
    report_message((char *)message, Message_Warning);
 8018fac:	2102      	movs	r1, #2
 8018fae:	f7ff ffa1 	bl	8018ef4 <report_message>
}
 8018fb2:	bd08      	pop	{r3, pc}

08018fb4 <report_grbl_setting>:
{
 8018fb4:	b570      	push	{r4, r5, r6, lr}
 8018fb6:	4604      	mov	r4, r0
 8018fb8:	460d      	mov	r5, r1
    const setting_detail_t *setting = setting_get_details(id, NULL);
 8018fba:	2100      	movs	r1, #0
 8018fbc:	f004 f860 	bl	801d080 <setting_get_details>
    if(setting)
 8018fc0:	b138      	cbz	r0, 8018fd2 <report_grbl_setting+0x1e>
        grbl.report.setting(setting, id - setting->id, data);
 8018fc2:	4a05      	ldr	r2, [pc, #20]	@ (8018fd8 <report_grbl_setting+0x24>)
 8018fc4:	6956      	ldr	r6, [r2, #20]
 8018fc6:	8801      	ldrh	r1, [r0, #0]
 8018fc8:	462a      	mov	r2, r5
 8018fca:	1a61      	subs	r1, r4, r1
 8018fcc:	47b0      	blx	r6
    status_code_t status = Status_OK;
 8018fce:	2000      	movs	r0, #0
}
 8018fd0:	bd70      	pop	{r4, r5, r6, pc}
        status = Status_SettingDisabled;
 8018fd2:	2035      	movs	r0, #53	@ 0x35
 8018fd4:	e7fc      	b.n	8018fd0 <report_grbl_setting+0x1c>
 8018fd6:	bf00      	nop
 8018fd8:	20001394 	.word	0x20001394

08018fdc <report_grbl_settings>:
{
 8018fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fe0:	4606      	mov	r6, r0
 8018fe2:	4689      	mov	r9, r1
    setting_details_t *details = settings_get_details();
 8018fe4:	f003 fbf8 	bl	801c7d8 <settings_get_details>
    uint_fast16_t idx, n_settings = 0;
 8018fe8:	2400      	movs	r4, #0
        n_settings += details->n_settings;
 8018fea:	8903      	ldrh	r3, [r0, #8]
 8018fec:	441c      	add	r4, r3
    } while((details = details->next));
 8018fee:	6980      	ldr	r0, [r0, #24]
 8018ff0:	2800      	cmp	r0, #0
 8018ff2:	d1fa      	bne.n	8018fea <report_grbl_settings+0xe>
    details = settings_get_details();
 8018ff4:	f003 fbf0 	bl	801c7d8 <settings_get_details>
 8018ff8:	4683      	mov	fp, r0
    if((all_settings = psetting = calloc(n_settings, sizeof(setting_detail_t *)))) {
 8018ffa:	2104      	movs	r1, #4
 8018ffc:	4620      	mov	r0, r4
 8018ffe:	f009 f959 	bl	80222b4 <calloc>
 8019002:	4680      	mov	r8, r0
 8019004:	2800      	cmp	r0, #0
 8019006:	d067      	beq.n	80190d8 <report_grbl_settings+0xfc>
 8019008:	4682      	mov	sl, r0
        n_settings = 0;
 801900a:	2700      	movs	r7, #0
        for(idx = 0; idx < details->n_settings; idx++) {
 801900c:	463d      	mov	r5, r7
 801900e:	e00a      	b.n	8019026 <report_grbl_settings+0x4a>
                  (setting->is_available == NULL ||setting->is_available(setting))) {
 8019010:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            if((all || setting->type == Setting_IsLegacy || setting->type == Setting_IsLegacyFn) &&
 8019012:	b113      	cbz	r3, 801901a <report_grbl_settings+0x3e>
                  (setting->is_available == NULL ||setting->is_available(setting))) {
 8019014:	4620      	mov	r0, r4
 8019016:	4798      	blx	r3
 8019018:	b120      	cbz	r0, 8019024 <report_grbl_settings+0x48>
                *psetting++ = (setting_detail_t *)setting;
 801901a:	4653      	mov	r3, sl
 801901c:	f843 4b04 	str.w	r4, [r3], #4
                n_settings++;
 8019020:	3701      	adds	r7, #1
                *psetting++ = (setting_detail_t *)setting;
 8019022:	469a      	mov	sl, r3
        for(idx = 0; idx < details->n_settings; idx++) {
 8019024:	3501      	adds	r5, #1
 8019026:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801902a:	42ab      	cmp	r3, r5
 801902c:	d90d      	bls.n	801904a <report_grbl_settings+0x6e>
            setting = &details->settings[idx];
 801902e:	f8db 400c 	ldr.w	r4, [fp, #12]
 8019032:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8019036:	eb04 1403 	add.w	r4, r4, r3, lsl #4
            if((all || setting->type == Setting_IsLegacy || setting->type == Setting_IsLegacyFn) &&
 801903a:	2e00      	cmp	r6, #0
 801903c:	d1e8      	bne.n	8019010 <report_grbl_settings+0x34>
 801903e:	7f23      	ldrb	r3, [r4, #28]
 8019040:	2b04      	cmp	r3, #4
 8019042:	d0e5      	beq.n	8019010 <report_grbl_settings+0x34>
 8019044:	2b05      	cmp	r3, #5
 8019046:	d1ed      	bne.n	8019024 <report_grbl_settings+0x48>
 8019048:	e7e2      	b.n	8019010 <report_grbl_settings+0x34>
        if(all && (details = details->next)) do {
 801904a:	b116      	cbz	r6, 8019052 <report_grbl_settings+0x76>
 801904c:	f8db 6018 	ldr.w	r6, [fp, #24]
 8019050:	bb06      	cbnz	r6, 8019094 <report_grbl_settings+0xb8>
        qsort(all_settings, n_settings, sizeof(setting_detail_t *), cmp_settings);
 8019052:	4b22      	ldr	r3, [pc, #136]	@ (80190dc <report_grbl_settings+0x100>)
 8019054:	2204      	movs	r2, #4
 8019056:	4639      	mov	r1, r7
 8019058:	4640      	mov	r0, r8
 801905a:	f00a f8fc 	bl	8023256 <qsort>
        for(idx = 0; idx < n_settings; idx++)
 801905e:	2400      	movs	r4, #0
 8019060:	e021      	b.n	80190a6 <report_grbl_settings+0xca>
                    *psetting++ = (setting_detail_t *)setting;
 8019062:	4653      	mov	r3, sl
 8019064:	f843 4b04 	str.w	r4, [r3], #4
                    n_settings++;
 8019068:	3701      	adds	r7, #1
                    *psetting++ = (setting_detail_t *)setting;
 801906a:	469a      	mov	sl, r3
            for(idx = 0; idx < details->n_settings; idx++) {
 801906c:	3501      	adds	r5, #1
 801906e:	8933      	ldrh	r3, [r6, #8]
 8019070:	42ab      	cmp	r3, r5
 8019072:	d90c      	bls.n	801908e <report_grbl_settings+0xb2>
                setting = &details->settings[idx];
 8019074:	68f4      	ldr	r4, [r6, #12]
 8019076:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801907a:	eb04 1403 	add.w	r4, r4, r3, lsl #4
                if(setting->is_available == NULL ||setting->is_available(setting)) {
 801907e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8019080:	2b00      	cmp	r3, #0
 8019082:	d0ee      	beq.n	8019062 <report_grbl_settings+0x86>
 8019084:	4620      	mov	r0, r4
 8019086:	4798      	blx	r3
 8019088:	2800      	cmp	r0, #0
 801908a:	d0ef      	beq.n	801906c <report_grbl_settings+0x90>
 801908c:	e7e9      	b.n	8019062 <report_grbl_settings+0x86>
        } while((details = details->next));
 801908e:	69b6      	ldr	r6, [r6, #24]
 8019090:	2e00      	cmp	r6, #0
 8019092:	d0de      	beq.n	8019052 <report_grbl_settings+0x76>
            for(idx = 0; idx < details->n_settings; idx++) {
 8019094:	2500      	movs	r5, #0
 8019096:	e7ea      	b.n	801906e <report_grbl_settings+0x92>
            settings_iterator(all_settings[idx], print_setting, data);
 8019098:	464a      	mov	r2, r9
 801909a:	4911      	ldr	r1, [pc, #68]	@ (80190e0 <report_grbl_settings+0x104>)
 801909c:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 80190a0:	f004 f848 	bl	801d134 <settings_iterator>
        for(idx = 0; idx < n_settings; idx++)
 80190a4:	3401      	adds	r4, #1
 80190a6:	42bc      	cmp	r4, r7
 80190a8:	d3f6      	bcc.n	8019098 <report_grbl_settings+0xbc>
        free(all_settings);
 80190aa:	4640      	mov	r0, r8
 80190ac:	f009 f926 	bl	80222fc <free>
}
 80190b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            settings_iterator(&details->settings[idx], print_setting, data);
 80190b4:	f8db 300c 	ldr.w	r3, [fp, #12]
 80190b8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80190bc:	464a      	mov	r2, r9
 80190be:	4908      	ldr	r1, [pc, #32]	@ (80190e0 <report_grbl_settings+0x104>)
 80190c0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80190c4:	f004 f836 	bl	801d134 <settings_iterator>
        for(idx = 0; idx < n_settings; idx++)
 80190c8:	3501      	adds	r5, #1
 80190ca:	42a5      	cmp	r5, r4
 80190cc:	d3f2      	bcc.n	80190b4 <report_grbl_settings+0xd8>
    } while((details = details->next));
 80190ce:	f8db b018 	ldr.w	fp, [fp, #24]
 80190d2:	f1bb 0f00 	cmp.w	fp, #0
 80190d6:	d0eb      	beq.n	80190b0 <report_grbl_settings+0xd4>
        for(idx = 0; idx < n_settings; idx++)
 80190d8:	2500      	movs	r5, #0
 80190da:	e7f6      	b.n	80190ca <report_grbl_settings+0xee>
 80190dc:	08017c39 	.word	0x08017c39
 80190e0:	08017dcd 	.word	0x08017dcd

080190e4 <report_probe_parameters>:
{
 80190e4:	b570      	push	{r4, r5, r6, lr}
 80190e6:	b084      	sub	sp, #16
    system_convert_array_steps_to_mpos(print_position, sys.probe_position);
 80190e8:	4d11      	ldr	r5, [pc, #68]	@ (8019130 <report_probe_parameters+0x4c>)
 80190ea:	4629      	mov	r1, r5
 80190ec:	a801      	add	r0, sp, #4
 80190ee:	f008 fa23 	bl	8021538 <system_convert_array_steps_to_mpos>
    hal.stream.write("[PRB:");
 80190f2:	4c10      	ldr	r4, [pc, #64]	@ (8019134 <report_probe_parameters+0x50>)
 80190f4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80190f8:	480f      	ldr	r0, [pc, #60]	@ (8019138 <report_probe_parameters+0x54>)
 80190fa:	4798      	blx	r3
    hal.stream.write(get_axis_values(print_position));
 80190fc:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8019100:	4b0e      	ldr	r3, [pc, #56]	@ (801913c <report_probe_parameters+0x58>)
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	a801      	add	r0, sp, #4
 8019106:	4798      	blx	r3
 8019108:	47b0      	blx	r6
    hal.stream.write(sys.flags.probe_succeeded ? ":1" : ":0");
 801910a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801910e:	f815 2c22 	ldrb.w	r2, [r5, #-34]
 8019112:	f012 0f02 	tst.w	r2, #2
 8019116:	d008      	beq.n	801912a <report_probe_parameters+0x46>
 8019118:	4809      	ldr	r0, [pc, #36]	@ (8019140 <report_probe_parameters+0x5c>)
 801911a:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 801911c:	4b05      	ldr	r3, [pc, #20]	@ (8019134 <report_probe_parameters+0x50>)
 801911e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019122:	4808      	ldr	r0, [pc, #32]	@ (8019144 <report_probe_parameters+0x60>)
 8019124:	4798      	blx	r3
}
 8019126:	b004      	add	sp, #16
 8019128:	bd70      	pop	{r4, r5, r6, pc}
    hal.stream.write(sys.flags.probe_succeeded ? ":1" : ":0");
 801912a:	4807      	ldr	r0, [pc, #28]	@ (8019148 <report_probe_parameters+0x64>)
 801912c:	e7f5      	b.n	801911a <report_probe_parameters+0x36>
 801912e:	bf00      	nop
 8019130:	200014c4 	.word	0x200014c4
 8019134:	200011ac 	.word	0x200011ac
 8019138:	0802b650 	.word	0x0802b650
 801913c:	20001a90 	.word	0x20001a90
 8019140:	0802b90c 	.word	0x0802b90c
 8019144:	0802b3b0 	.word	0x0802b3b0
 8019148:	0802b914 	.word	0x0802b914

0801914c <report_home_position>:
{
 801914c:	b570      	push	{r4, r5, r6, lr}
    hal.stream.write("[HOME:");
 801914e:	4c0e      	ldr	r4, [pc, #56]	@ (8019188 <report_home_position+0x3c>)
 8019150:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019154:	480d      	ldr	r0, [pc, #52]	@ (801918c <report_home_position+0x40>)
 8019156:	4798      	blx	r3
    hal.stream.write(get_axis_values(sys.home_position));
 8019158:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 801915c:	4b0c      	ldr	r3, [pc, #48]	@ (8019190 <report_home_position+0x44>)
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	4d0c      	ldr	r5, [pc, #48]	@ (8019194 <report_home_position+0x48>)
 8019162:	4628      	mov	r0, r5
 8019164:	4798      	blx	r3
 8019166:	47b0      	blx	r6
    hal.stream.write(":");
 8019168:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801916c:	480a      	ldr	r0, [pc, #40]	@ (8019198 <report_home_position+0x4c>)
 801916e:	4798      	blx	r3
    hal.stream.write(uitoa(sys.homed.mask));
 8019170:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8019174:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 8019178:	f7fc f800 	bl	801517c <uitoa>
 801917c:	47b0      	blx	r6
    hal.stream.write("]" ASCII_EOL);
 801917e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019182:	4806      	ldr	r0, [pc, #24]	@ (801919c <report_home_position+0x50>)
 8019184:	4798      	blx	r3
}
 8019186:	bd70      	pop	{r4, r5, r6, pc}
 8019188:	200011ac 	.word	0x200011ac
 801918c:	0802b658 	.word	0x0802b658
 8019190:	20001a90 	.word	0x20001a90
 8019194:	200014e4 	.word	0x200014e4
 8019198:	0802b718 	.word	0x0802b718
 801919c:	0802b3b0 	.word	0x0802b3b0

080191a0 <report_tool_offsets>:
{
 80191a0:	b538      	push	{r3, r4, r5, lr}
    hal.stream.write("[TLO:");
 80191a2:	4c08      	ldr	r4, [pc, #32]	@ (80191c4 <report_tool_offsets+0x24>)
 80191a4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80191a8:	4807      	ldr	r0, [pc, #28]	@ (80191c8 <report_tool_offsets+0x28>)
 80191aa:	4798      	blx	r3
    hal.stream.write(get_axis_values(gc_state.tool_length_offset));
 80191ac:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 80191b0:	4b06      	ldr	r3, [pc, #24]	@ (80191cc <report_tool_offsets+0x2c>)
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	4806      	ldr	r0, [pc, #24]	@ (80191d0 <report_tool_offsets+0x30>)
 80191b6:	4798      	blx	r3
 80191b8:	47a8      	blx	r5
    hal.stream.write("]" ASCII_EOL);
 80191ba:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80191be:	4805      	ldr	r0, [pc, #20]	@ (80191d4 <report_tool_offsets+0x34>)
 80191c0:	4798      	blx	r3
}
 80191c2:	bd38      	pop	{r3, r4, r5, pc}
 80191c4:	200011ac 	.word	0x200011ac
 80191c8:	0802b660 	.word	0x0802b660
 80191cc:	20001a90 	.word	0x20001a90
 80191d0:	20000fa8 	.word	0x20000fa8
 80191d4:	0802b3b0 	.word	0x0802b3b0

080191d8 <report_ngc_parameter>:
{
 80191d8:	b530      	push	{r4, r5, lr}
 80191da:	ed2d 8b02 	vpush	{d8}
 80191de:	b083      	sub	sp, #12
 80191e0:	4604      	mov	r4, r0
    hal.stream.write("[PARAM:");
 80191e2:	4d19      	ldr	r5, [pc, #100]	@ (8019248 <report_ngc_parameter+0x70>)
 80191e4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80191e8:	4818      	ldr	r0, [pc, #96]	@ (801924c <report_ngc_parameter+0x74>)
 80191ea:	4798      	blx	r3
    hal.stream.write(uitoa(id));
 80191ec:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 80191f0:	4620      	mov	r0, r4
 80191f2:	f7fb ffc3 	bl	801517c <uitoa>
 80191f6:	47a8      	blx	r5
    if(ngc_param_get(id, &value)) {
 80191f8:	a901      	add	r1, sp, #4
 80191fa:	4620      	mov	r0, r4
 80191fc:	f7fb fc94 	bl	8014b28 <ngc_param_get>
 8019200:	b1d8      	cbz	r0, 801923a <report_ngc_parameter+0x62>
        hal.stream.write("=");
 8019202:	4c11      	ldr	r4, [pc, #68]	@ (8019248 <report_ngc_parameter+0x70>)
 8019204:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019208:	4811      	ldr	r0, [pc, #68]	@ (8019250 <report_ngc_parameter+0x78>)
 801920a:	4798      	blx	r3
        hal.stream.write(trim_float(ftoa(value, ngc_float_decimals())));
 801920c:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 8019210:	ed9d 8a01 	vldr	s16, [sp, #4]
 8019214:	f7fb ffa6 	bl	8015164 <ngc_float_decimals>
 8019218:	eeb0 0a48 	vmov.f32	s0, s16
 801921c:	f7fb ffd0 	bl	80151c0 <ftoa>
 8019220:	f7fc f84a 	bl	80152b8 <trim_float>
 8019224:	47a0      	blx	r4
    hal.stream.write("]" ASCII_EOL);
 8019226:	4b08      	ldr	r3, [pc, #32]	@ (8019248 <report_ngc_parameter+0x70>)
 8019228:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801922c:	4809      	ldr	r0, [pc, #36]	@ (8019254 <report_ngc_parameter+0x7c>)
 801922e:	4798      	blx	r3
}
 8019230:	2000      	movs	r0, #0
 8019232:	b003      	add	sp, #12
 8019234:	ecbd 8b02 	vpop	{d8}
 8019238:	bd30      	pop	{r4, r5, pc}
        hal.stream.write("=N/A");
 801923a:	4b03      	ldr	r3, [pc, #12]	@ (8019248 <report_ngc_parameter+0x70>)
 801923c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019240:	4805      	ldr	r0, [pc, #20]	@ (8019258 <report_ngc_parameter+0x80>)
 8019242:	4798      	blx	r3
 8019244:	e7ef      	b.n	8019226 <report_ngc_parameter+0x4e>
 8019246:	bf00      	nop
 8019248:	200011ac 	.word	0x200011ac
 801924c:	0802b668 	.word	0x0802b668
 8019250:	0802b628 	.word	0x0802b628
 8019254:	0802b3b0 	.word	0x0802b3b0
 8019258:	0802b670 	.word	0x0802b670

0801925c <report_named_ngc_parameter>:
{
 801925c:	b530      	push	{r4, r5, lr}
 801925e:	ed2d 8b02 	vpush	{d8}
 8019262:	b083      	sub	sp, #12
 8019264:	4604      	mov	r4, r0
    hal.stream.write("[PARAM:");
 8019266:	4d17      	ldr	r5, [pc, #92]	@ (80192c4 <report_named_ngc_parameter+0x68>)
 8019268:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801926c:	4816      	ldr	r0, [pc, #88]	@ (80192c8 <report_named_ngc_parameter+0x6c>)
 801926e:	4798      	blx	r3
    hal.stream.write(arg);
 8019270:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019274:	4620      	mov	r0, r4
 8019276:	4798      	blx	r3
    if(ngc_named_param_get(arg, &value)) {
 8019278:	a901      	add	r1, sp, #4
 801927a:	4620      	mov	r0, r4
 801927c:	f7fb ff20 	bl	80150c0 <ngc_named_param_get>
 8019280:	b1d0      	cbz	r0, 80192b8 <report_named_ngc_parameter+0x5c>
        hal.stream.write("=");
 8019282:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019286:	4811      	ldr	r0, [pc, #68]	@ (80192cc <report_named_ngc_parameter+0x70>)
 8019288:	4798      	blx	r3
        hal.stream.write(trim_float(ftoa(value, ngc_float_decimals())));
 801928a:	f8d5 40b4 	ldr.w	r4, [r5, #180]	@ 0xb4
 801928e:	ed9d 8a01 	vldr	s16, [sp, #4]
 8019292:	f7fb ff67 	bl	8015164 <ngc_float_decimals>
 8019296:	eeb0 0a48 	vmov.f32	s0, s16
 801929a:	f7fb ff91 	bl	80151c0 <ftoa>
 801929e:	f7fc f80b 	bl	80152b8 <trim_float>
 80192a2:	47a0      	blx	r4
    hal.stream.write("]" ASCII_EOL);
 80192a4:	4b07      	ldr	r3, [pc, #28]	@ (80192c4 <report_named_ngc_parameter+0x68>)
 80192a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80192aa:	4809      	ldr	r0, [pc, #36]	@ (80192d0 <report_named_ngc_parameter+0x74>)
 80192ac:	4798      	blx	r3
}
 80192ae:	2000      	movs	r0, #0
 80192b0:	b003      	add	sp, #12
 80192b2:	ecbd 8b02 	vpop	{d8}
 80192b6:	bd30      	pop	{r4, r5, pc}
        hal.stream.write("=N/A");
 80192b8:	4b02      	ldr	r3, [pc, #8]	@ (80192c4 <report_named_ngc_parameter+0x68>)
 80192ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80192be:	4805      	ldr	r0, [pc, #20]	@ (80192d4 <report_named_ngc_parameter+0x78>)
 80192c0:	4798      	blx	r3
 80192c2:	e7ef      	b.n	80192a4 <report_named_ngc_parameter+0x48>
 80192c4:	200011ac 	.word	0x200011ac
 80192c8:	0802b668 	.word	0x0802b668
 80192cc:	0802b628 	.word	0x0802b628
 80192d0:	0802b3b0 	.word	0x0802b3b0
 80192d4:	0802b670 	.word	0x0802b670

080192d8 <report_ngc_parameters>:
{
 80192d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192dc:	b085      	sub	sp, #20
    if(gc_state.modal.scaling_active) {
 80192de:	4b6d      	ldr	r3, [pc, #436]	@ (8019494 <report_ngc_parameters+0x1bc>)
 80192e0:	7f9b      	ldrb	r3, [r3, #30]
 80192e2:	b183      	cbz	r3, 8019306 <report_ngc_parameters+0x2e>
        hal.stream.write("[G51:");
 80192e4:	4c6c      	ldr	r4, [pc, #432]	@ (8019498 <report_ngc_parameters+0x1c0>)
 80192e6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80192ea:	486c      	ldr	r0, [pc, #432]	@ (801949c <report_ngc_parameters+0x1c4>)
 80192ec:	4798      	blx	r3
        hal.stream.write(get_axis_values(gc_get_scaling()));
 80192ee:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 80192f2:	4b6b      	ldr	r3, [pc, #428]	@ (80194a0 <report_ngc_parameters+0x1c8>)
 80192f4:	681e      	ldr	r6, [r3, #0]
 80192f6:	f7f3 fbaf 	bl	800ca58 <gc_get_scaling>
 80192fa:	47b0      	blx	r6
 80192fc:	47a8      	blx	r5
        hal.stream.write("]" ASCII_EOL);
 80192fe:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019302:	4868      	ldr	r0, [pc, #416]	@ (80194a4 <report_ngc_parameters+0x1cc>)
 8019304:	4798      	blx	r3
{
 8019306:	2400      	movs	r4, #0
 8019308:	e01c      	b.n	8019344 <report_ngc_parameters+0x6c>
            grbl.report.status_message(Status_SettingReadFail);
 801930a:	4b67      	ldr	r3, [pc, #412]	@ (80194a8 <report_ngc_parameters+0x1d0>)
 801930c:	689b      	ldr	r3, [r3, #8]
 801930e:	2007      	movs	r0, #7
 8019310:	4798      	blx	r3
            return;
 8019312:	e091      	b.n	8019438 <report_ngc_parameters+0x160>
                hal.stream.write("28");
 8019314:	4b60      	ldr	r3, [pc, #384]	@ (8019498 <report_ngc_parameters+0x1c0>)
 8019316:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801931a:	4864      	ldr	r0, [pc, #400]	@ (80194ac <report_ngc_parameters+0x1d4>)
 801931c:	4798      	blx	r3
        if(idx != CoordinateSystem_G92) {
 801931e:	2c0b      	cmp	r4, #11
 8019320:	d00f      	beq.n	8019342 <report_ngc_parameters+0x6a>
            hal.stream.write(":");
 8019322:	4d5d      	ldr	r5, [pc, #372]	@ (8019498 <report_ngc_parameters+0x1c0>)
 8019324:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019328:	4861      	ldr	r0, [pc, #388]	@ (80194b0 <report_ngc_parameters+0x1d8>)
 801932a:	4798      	blx	r3
            hal.stream.write(get_axis_values(coord_data));
 801932c:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8019330:	4b5b      	ldr	r3, [pc, #364]	@ (80194a0 <report_ngc_parameters+0x1c8>)
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	a801      	add	r0, sp, #4
 8019336:	4798      	blx	r3
 8019338:	47b0      	blx	r6
            hal.stream.write("]" ASCII_EOL);
 801933a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801933e:	4859      	ldr	r0, [pc, #356]	@ (80194a4 <report_ngc_parameters+0x1cc>)
 8019340:	4798      	blx	r3
    for (idx = 0; idx < N_CoordinateSystems; idx++) {
 8019342:	3401      	adds	r4, #1
 8019344:	2c0b      	cmp	r4, #11
 8019346:	d81f      	bhi.n	8019388 <report_ngc_parameters+0xb0>
        if (!(settings_read_coord_data((coord_system_id_t)idx, &coord_data))) {
 8019348:	b2e5      	uxtb	r5, r4
 801934a:	a901      	add	r1, sp, #4
 801934c:	4628      	mov	r0, r5
 801934e:	f003 fd7f 	bl	801ce50 <settings_read_coord_data>
 8019352:	2800      	cmp	r0, #0
 8019354:	d0d9      	beq.n	801930a <report_ngc_parameters+0x32>
        hal.stream.write("[G");
 8019356:	4b50      	ldr	r3, [pc, #320]	@ (8019498 <report_ngc_parameters+0x1c0>)
 8019358:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801935c:	4855      	ldr	r0, [pc, #340]	@ (80194b4 <report_ngc_parameters+0x1dc>)
 801935e:	4798      	blx	r3
        switch (idx) {
 8019360:	2c0a      	cmp	r4, #10
 8019362:	d00b      	beq.n	801937c <report_ngc_parameters+0xa4>
 8019364:	2c0b      	cmp	r4, #11
 8019366:	d0ec      	beq.n	8019342 <report_ngc_parameters+0x6a>
 8019368:	2c09      	cmp	r4, #9
 801936a:	d0d3      	beq.n	8019314 <report_ngc_parameters+0x3c>
                hal.stream.write(map_coord_system((coord_system_id_t)idx));
 801936c:	4b4a      	ldr	r3, [pc, #296]	@ (8019498 <report_ngc_parameters+0x1c0>)
 801936e:	f8d3 60b4 	ldr.w	r6, [r3, #180]	@ 0xb4
 8019372:	4628      	mov	r0, r5
 8019374:	f7fe ff80 	bl	8018278 <map_coord_system>
 8019378:	47b0      	blx	r6
                break;
 801937a:	e7d0      	b.n	801931e <report_ngc_parameters+0x46>
                hal.stream.write("30");
 801937c:	4b46      	ldr	r3, [pc, #280]	@ (8019498 <report_ngc_parameters+0x1c0>)
 801937e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019382:	484d      	ldr	r0, [pc, #308]	@ (80194b8 <report_ngc_parameters+0x1e0>)
 8019384:	4798      	blx	r3
                break;
 8019386:	e7ca      	b.n	801931e <report_ngc_parameters+0x46>
    hal.stream.write("92:");
 8019388:	4c43      	ldr	r4, [pc, #268]	@ (8019498 <report_ngc_parameters+0x1c0>)
 801938a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801938e:	484b      	ldr	r0, [pc, #300]	@ (80194bc <report_ngc_parameters+0x1e4>)
 8019390:	4798      	blx	r3
    hal.stream.write(get_axis_values(gc_state.g92_coord_offset));
 8019392:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8019396:	4b42      	ldr	r3, [pc, #264]	@ (80194a0 <report_ngc_parameters+0x1c8>)
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	4849      	ldr	r0, [pc, #292]	@ (80194c0 <report_ngc_parameters+0x1e8>)
 801939c:	4798      	blx	r3
 801939e:	47a8      	blx	r5
    hal.stream.write("]" ASCII_EOL);
 80193a0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80193a4:	483f      	ldr	r0, [pc, #252]	@ (80194a4 <report_ngc_parameters+0x1cc>)
 80193a6:	4798      	blx	r3
    for (idx = 1; idx <= grbl.tool_table.n_tools; idx++) {
 80193a8:	2501      	movs	r5, #1
 80193aa:	e030      	b.n	801940e <report_ngc_parameters+0x136>
        hal.stream.write("[T:");
 80193ac:	4c3a      	ldr	r4, [pc, #232]	@ (8019498 <report_ngc_parameters+0x1c0>)
 80193ae:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80193b2:	4844      	ldr	r0, [pc, #272]	@ (80194c4 <report_ngc_parameters+0x1ec>)
 80193b4:	4798      	blx	r3
        hal.stream.write(uitoa((uint32_t)idx));
 80193b6:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 80193ba:	4628      	mov	r0, r5
 80193bc:	f7fb fede 	bl	801517c <uitoa>
 80193c0:	47b0      	blx	r6
        hal.stream.write("|");
 80193c2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80193c6:	4f40      	ldr	r7, [pc, #256]	@ (80194c8 <report_ngc_parameters+0x1f0>)
 80193c8:	4638      	mov	r0, r7
 80193ca:	4798      	blx	r3
        hal.stream.write(get_axis_values(grbl.tool_table.tool[idx].offset));
 80193cc:	f8d4 90b4 	ldr.w	r9, [r4, #180]	@ 0xb4
 80193d0:	4b33      	ldr	r3, [pc, #204]	@ (80194a0 <report_ngc_parameters+0x1c8>)
 80193d2:	681a      	ldr	r2, [r3, #0]
 80193d4:	4e34      	ldr	r6, [pc, #208]	@ (80194a8 <report_ngc_parameters+0x1d0>)
 80193d6:	69f0      	ldr	r0, [r6, #28]
 80193d8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80193dc:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80193e0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80193e4:	4790      	blx	r2
 80193e6:	47c8      	blx	r9
        hal.stream.write("|");
 80193e8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80193ec:	4638      	mov	r0, r7
 80193ee:	4798      	blx	r3
        hal.stream.write(get_axis_value(grbl.tool_table.tool[idx].radius));
 80193f0:	f8d4 70b4 	ldr.w	r7, [r4, #180]	@ 0xb4
 80193f4:	4b35      	ldr	r3, [pc, #212]	@ (80194cc <report_ngc_parameters+0x1f4>)
 80193f6:	681a      	ldr	r2, [r3, #0]
 80193f8:	69f3      	ldr	r3, [r6, #28]
 80193fa:	4443      	add	r3, r8
 80193fc:	ed93 0a03 	vldr	s0, [r3, #12]
 8019400:	4790      	blx	r2
 8019402:	47b8      	blx	r7
        hal.stream.write("]" ASCII_EOL);
 8019404:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019408:	4826      	ldr	r0, [pc, #152]	@ (80194a4 <report_ngc_parameters+0x1cc>)
 801940a:	4798      	blx	r3
    for (idx = 1; idx <= grbl.tool_table.n_tools; idx++) {
 801940c:	3501      	adds	r5, #1
 801940e:	4b26      	ldr	r3, [pc, #152]	@ (80194a8 <report_ngc_parameters+0x1d0>)
 8019410:	699b      	ldr	r3, [r3, #24]
 8019412:	42ab      	cmp	r3, r5
 8019414:	d2ca      	bcs.n	80193ac <report_ngc_parameters+0xd4>
    if(settings.homing.flags.enabled)
 8019416:	4b2e      	ldr	r3, [pc, #184]	@ (80194d0 <report_ngc_parameters+0x1f8>)
 8019418:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 801941c:	f013 0f01 	tst.w	r3, #1
 8019420:	d10d      	bne.n	801943e <report_ngc_parameters+0x166>
    report_tool_offsets();      // Print tool length offset value.
 8019422:	f7ff febd 	bl	80191a0 <report_tool_offsets>
    report_probe_parameters();  // Print probe parameters. Not persistent in memory.
 8019426:	f7ff fe5d 	bl	80190e4 <report_probe_parameters>
    if(sys.tlo_reference_set.mask) { // Print tool length reference offset. Not persistent in memory.
 801942a:	4b2a      	ldr	r3, [pc, #168]	@ (80194d4 <report_ngc_parameters+0x1fc>)
 801942c:	79db      	ldrb	r3, [r3, #7]
 801942e:	b94b      	cbnz	r3, 8019444 <report_ngc_parameters+0x16c>
    if(grbl.on_report_ngc_parameters)
 8019430:	4b1d      	ldr	r3, [pc, #116]	@ (80194a8 <report_ngc_parameters+0x1d0>)
 8019432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019434:	b103      	cbz	r3, 8019438 <report_ngc_parameters+0x160>
        grbl.on_report_ngc_parameters();
 8019436:	4798      	blx	r3
}
 8019438:	b005      	add	sp, #20
 801943a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        report_home_position();
 801943e:	f7ff fe85 	bl	801914c <report_home_position>
 8019442:	e7ee      	b.n	8019422 <report_ngc_parameters+0x14a>
        gc_get_plane_data(&plane, gc_state.modal.plane_select);
 8019444:	4b13      	ldr	r3, [pc, #76]	@ (8019494 <report_ngc_parameters+0x1bc>)
 8019446:	7999      	ldrb	r1, [r3, #6]
 8019448:	4668      	mov	r0, sp
 801944a:	f7f3 fbff 	bl	800cc4c <gc_get_plane_data>
        hal.stream.write("[TLR:");
 801944e:	4c12      	ldr	r4, [pc, #72]	@ (8019498 <report_ngc_parameters+0x1c0>)
 8019450:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019454:	4820      	ldr	r0, [pc, #128]	@ (80194d8 <report_ngc_parameters+0x200>)
 8019456:	4798      	blx	r3
        hal.stream.write(get_axis_value(sys.tlo_reference[plane.axis_linear] / settings.axis[plane.axis_linear].steps_per_mm));
 8019458:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 801945c:	4b1b      	ldr	r3, [pc, #108]	@ (80194cc <report_ngc_parameters+0x1f4>)
 801945e:	6819      	ldr	r1, [r3, #0]
 8019460:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8019464:	1c98      	adds	r0, r3, #2
 8019466:	4a1b      	ldr	r2, [pc, #108]	@ (80194d4 <report_ngc_parameters+0x1fc>)
 8019468:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801946c:	edd2 7a00 	vldr	s15, [r2]
 8019470:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019474:	4a16      	ldr	r2, [pc, #88]	@ (80194d0 <report_ngc_parameters+0x1f8>)
 8019476:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801947a:	ed93 0a0c 	vldr	s0, [r3, #48]	@ 0x30
 801947e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019482:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8019486:	4788      	blx	r1
 8019488:	47a8      	blx	r5
        hal.stream.write("]" ASCII_EOL);
 801948a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801948e:	4805      	ldr	r0, [pc, #20]	@ (80194a4 <report_ngc_parameters+0x1cc>)
 8019490:	4798      	blx	r3
 8019492:	e7cd      	b.n	8019430 <report_ngc_parameters+0x158>
 8019494:	20000ee4 	.word	0x20000ee4
 8019498:	200011ac 	.word	0x200011ac
 801949c:	0802b678 	.word	0x0802b678
 80194a0:	20001a90 	.word	0x20001a90
 80194a4:	0802b3b0 	.word	0x0802b3b0
 80194a8:	20001394 	.word	0x20001394
 80194ac:	0802b684 	.word	0x0802b684
 80194b0:	0802b718 	.word	0x0802b718
 80194b4:	0802b680 	.word	0x0802b680
 80194b8:	0802b688 	.word	0x0802b688
 80194bc:	0802b68c 	.word	0x0802b68c
 80194c0:	20000f9c 	.word	0x20000f9c
 80194c4:	0802b690 	.word	0x0802b690
 80194c8:	0802b3cc 	.word	0x0802b3cc
 80194cc:	20001a8c 	.word	0x20001a8c
 80194d0:	20001bc4 	.word	0x20001bc4
 80194d4:	2000148c 	.word	0x2000148c
 80194d8:	0802b694 	.word	0x0802b694

080194dc <report_gcode_modes>:
{
 80194dc:	b570      	push	{r4, r5, r6, lr}
    hal.stream.write("[GC:G");
 80194de:	4b8c      	ldr	r3, [pc, #560]	@ (8019710 <report_gcode_modes+0x234>)
 80194e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80194e4:	488b      	ldr	r0, [pc, #556]	@ (8019714 <report_gcode_modes+0x238>)
 80194e6:	4798      	blx	r3
    if (gc_state.modal.motion >= MotionMode_ProbeToward) {
 80194e8:	4b8b      	ldr	r3, [pc, #556]	@ (8019718 <report_gcode_modes+0x23c>)
 80194ea:	8818      	ldrh	r0, [r3, #0]
 80194ec:	288b      	cmp	r0, #139	@ 0x8b
 80194ee:	f240 80ab 	bls.w	8019648 <report_gcode_modes+0x16c>
        hal.stream.write("38.");
 80194f2:	4c87      	ldr	r4, [pc, #540]	@ (8019710 <report_gcode_modes+0x234>)
 80194f4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80194f8:	4888      	ldr	r0, [pc, #544]	@ (801971c <report_gcode_modes+0x240>)
 80194fa:	4798      	blx	r3
        hal.stream.write(uitoa((uint32_t)(gc_state.modal.motion - (MotionMode_ProbeToward - 2))));
 80194fc:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 8019500:	4b85      	ldr	r3, [pc, #532]	@ (8019718 <report_gcode_modes+0x23c>)
 8019502:	8818      	ldrh	r0, [r3, #0]
 8019504:	388a      	subs	r0, #138	@ 0x8a
 8019506:	f7fb fe39 	bl	801517c <uitoa>
 801950a:	47a0      	blx	r4
    hal.stream.write(" G");
 801950c:	4c80      	ldr	r4, [pc, #512]	@ (8019710 <report_gcode_modes+0x234>)
 801950e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019512:	4883      	ldr	r0, [pc, #524]	@ (8019720 <report_gcode_modes+0x244>)
 8019514:	4798      	blx	r3
    hal.stream.write(map_coord_system(gc_state.modal.coord_system.id));
 8019516:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 801951a:	4b7f      	ldr	r3, [pc, #508]	@ (8019718 <report_gcode_modes+0x23c>)
 801951c:	7d18      	ldrb	r0, [r3, #20]
 801951e:	f7fe feab 	bl	8018278 <map_coord_system>
 8019522:	47a0      	blx	r4
    uint_fast32_t idx = N_AXIS;
 8019524:	2303      	movs	r3, #3
        idx--;
 8019526:	3b01      	subs	r3, #1
        active = !(gc_state.g92_coord_offset[idx] == 0.0f || gc_state.g92_coord_offset[idx] == -0.0f);
 8019528:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 801952c:	4a7a      	ldr	r2, [pc, #488]	@ (8019718 <report_gcode_modes+0x23c>)
 801952e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8019532:	edd2 7a00 	vldr	s15, [r2]
    } while(idx && !active);
 8019536:	b123      	cbz	r3, 8019542 <report_gcode_modes+0x66>
 8019538:	eef5 7a40 	vcmp.f32	s15, #0.0
 801953c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019540:	d0f1      	beq.n	8019526 <report_gcode_modes+0x4a>
    if(is_g92_active())
 8019542:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801954a:	d004      	beq.n	8019556 <report_gcode_modes+0x7a>
        hal.stream.write(" G92");
 801954c:	4b70      	ldr	r3, [pc, #448]	@ (8019710 <report_gcode_modes+0x234>)
 801954e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019552:	4874      	ldr	r0, [pc, #464]	@ (8019724 <report_gcode_modes+0x248>)
 8019554:	4798      	blx	r3
    if(settings.mode == Mode_Lathe)
 8019556:	4b74      	ldr	r3, [pc, #464]	@ (8019728 <report_gcode_modes+0x24c>)
 8019558:	7e1b      	ldrb	r3, [r3, #24]
 801955a:	2b02      	cmp	r3, #2
 801955c:	d07b      	beq.n	8019656 <report_gcode_modes+0x17a>
    hal.stream.write(" G");
 801955e:	4c6c      	ldr	r4, [pc, #432]	@ (8019710 <report_gcode_modes+0x234>)
 8019560:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019564:	486e      	ldr	r0, [pc, #440]	@ (8019720 <report_gcode_modes+0x244>)
 8019566:	4798      	blx	r3
    hal.stream.write(uitoa((uint32_t)(gc_state.modal.plane_select + 17)));
 8019568:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 801956c:	4d6a      	ldr	r5, [pc, #424]	@ (8019718 <report_gcode_modes+0x23c>)
 801956e:	79a8      	ldrb	r0, [r5, #6]
 8019570:	3011      	adds	r0, #17
 8019572:	f7fb fe03 	bl	801517c <uitoa>
 8019576:	47b0      	blx	r6
    hal.stream.write(gc_state.modal.units_imperial ? " G20" : " G21");
 8019578:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801957c:	78ea      	ldrb	r2, [r5, #3]
 801957e:	2a00      	cmp	r2, #0
 8019580:	d074      	beq.n	801966c <report_gcode_modes+0x190>
 8019582:	486a      	ldr	r0, [pc, #424]	@ (801972c <report_gcode_modes+0x250>)
 8019584:	4798      	blx	r3
    hal.stream.write(gc_state.modal.distance_incremental ? " G91" : " G90");
 8019586:	4b62      	ldr	r3, [pc, #392]	@ (8019710 <report_gcode_modes+0x234>)
 8019588:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801958c:	4a62      	ldr	r2, [pc, #392]	@ (8019718 <report_gcode_modes+0x23c>)
 801958e:	7912      	ldrb	r2, [r2, #4]
 8019590:	2a00      	cmp	r2, #0
 8019592:	d06d      	beq.n	8019670 <report_gcode_modes+0x194>
 8019594:	4866      	ldr	r0, [pc, #408]	@ (8019730 <report_gcode_modes+0x254>)
 8019596:	4798      	blx	r3
    hal.stream.write(" G");
 8019598:	4c5d      	ldr	r4, [pc, #372]	@ (8019710 <report_gcode_modes+0x234>)
 801959a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801959e:	4860      	ldr	r0, [pc, #384]	@ (8019720 <report_gcode_modes+0x244>)
 80195a0:	4798      	blx	r3
    hal.stream.write(uitoa((uint32_t)(93 + (gc_state.modal.feed_mode == FeedMode_UnitsPerRev ? 2 : gc_state.modal.feed_mode ^ 1))));
 80195a2:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 80195a6:	4b5c      	ldr	r3, [pc, #368]	@ (8019718 <report_gcode_modes+0x23c>)
 80195a8:	7898      	ldrb	r0, [r3, #2]
 80195aa:	2802      	cmp	r0, #2
 80195ac:	d062      	beq.n	8019674 <report_gcode_modes+0x198>
 80195ae:	f080 0001 	eor.w	r0, r0, #1
 80195b2:	305d      	adds	r0, #93	@ 0x5d
 80195b4:	f7fb fde2 	bl	801517c <uitoa>
 80195b8:	47a0      	blx	r4
    if(settings.mode == Mode_Lathe && gc_spindle_get()->cap.variable)
 80195ba:	4b5b      	ldr	r3, [pc, #364]	@ (8019728 <report_gcode_modes+0x24c>)
 80195bc:	7e1b      	ldrb	r3, [r3, #24]
 80195be:	2b02      	cmp	r3, #2
 80195c0:	d05a      	beq.n	8019678 <report_gcode_modes+0x19c>
    if(gc_state.modal.tool_offset_mode == ToolLengthOffset_Cancel)
 80195c2:	4b55      	ldr	r3, [pc, #340]	@ (8019718 <report_gcode_modes+0x23c>)
 80195c4:	79db      	ldrb	r3, [r3, #7]
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d167      	bne.n	801969a <report_gcode_modes+0x1be>
        hal.stream.write(" G49");
 80195ca:	4b51      	ldr	r3, [pc, #324]	@ (8019710 <report_gcode_modes+0x234>)
 80195cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80195d0:	4858      	ldr	r0, [pc, #352]	@ (8019734 <report_gcode_modes+0x258>)
 80195d2:	4798      	blx	r3
    hal.stream.write(gc_state.modal.retract_mode == CCRetractMode_RPos ? " G99" : " G98");
 80195d4:	4b4e      	ldr	r3, [pc, #312]	@ (8019710 <report_gcode_modes+0x234>)
 80195d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80195da:	4a4f      	ldr	r2, [pc, #316]	@ (8019718 <report_gcode_modes+0x23c>)
 80195dc:	7f52      	ldrb	r2, [r2, #29]
 80195de:	2a01      	cmp	r2, #1
 80195e0:	d06e      	beq.n	80196c0 <report_gcode_modes+0x1e4>
 80195e2:	4855      	ldr	r0, [pc, #340]	@ (8019738 <report_gcode_modes+0x25c>)
 80195e4:	4798      	blx	r3
    if(gc_state.modal.scaling_active) {
 80195e6:	4b4c      	ldr	r3, [pc, #304]	@ (8019718 <report_gcode_modes+0x23c>)
 80195e8:	7f9b      	ldrb	r3, [r3, #30]
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d06a      	beq.n	80196c4 <report_gcode_modes+0x1e8>
        hal.stream.write(" G51:");
 80195ee:	4d48      	ldr	r5, [pc, #288]	@ (8019710 <report_gcode_modes+0x234>)
 80195f0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80195f4:	4851      	ldr	r0, [pc, #324]	@ (801973c <report_gcode_modes+0x260>)
 80195f6:	4798      	blx	r3
        axis_signals_tostring(buf, gc_get_g51_state());
 80195f8:	f7f3 fa32 	bl	800ca60 <gc_get_g51_state>
 80195fc:	4601      	mov	r1, r0
 80195fe:	4c50      	ldr	r4, [pc, #320]	@ (8019740 <report_gcode_modes+0x264>)
 8019600:	4620      	mov	r0, r4
 8019602:	f7fe faa5 	bl	8017b50 <axis_signals_tostring>
        hal.stream.write(buf);
 8019606:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801960a:	4620      	mov	r0, r4
 801960c:	4798      	blx	r3
    if (gc_state.modal.program_flow) {
 801960e:	4b42      	ldr	r3, [pc, #264]	@ (8019718 <report_gcode_modes+0x23c>)
 8019610:	7e1b      	ldrb	r3, [r3, #24]
 8019612:	2b00      	cmp	r3, #0
 8019614:	d069      	beq.n	80196ea <report_gcode_modes+0x20e>
        switch (gc_state.modal.program_flow) {
 8019616:	2b1e      	cmp	r3, #30
 8019618:	d85a      	bhi.n	80196d0 <report_gcode_modes+0x1f4>
 801961a:	b25a      	sxtb	r2, r3
 801961c:	2a00      	cmp	r2, #0
 801961e:	d064      	beq.n	80196ea <report_gcode_modes+0x20e>
 8019620:	3b01      	subs	r3, #1
 8019622:	2b1d      	cmp	r3, #29
 8019624:	d861      	bhi.n	80196ea <report_gcode_modes+0x20e>
 8019626:	e8df f003 	tbb	[pc, r3]
 801962a:	ab6d      	.short	0xab6d
 801962c:	6060605b 	.word	0x6060605b
 8019630:	60606060 	.word	0x60606060
 8019634:	60606060 	.word	0x60606060
 8019638:	60606060 	.word	0x60606060
 801963c:	60606060 	.word	0x60606060
 8019640:	60606060 	.word	0x60606060
 8019644:	b1606060 	.word	0xb1606060
        hal.stream.write(uitoa((uint32_t)gc_state.modal.motion));
 8019648:	4b31      	ldr	r3, [pc, #196]	@ (8019710 <report_gcode_modes+0x234>)
 801964a:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 801964e:	f7fb fd95 	bl	801517c <uitoa>
 8019652:	47a0      	blx	r4
 8019654:	e75a      	b.n	801950c <report_gcode_modes+0x30>
        hal.stream.write(gc_state.modal.diameter_mode ? " G7" : " G8");
 8019656:	4b2e      	ldr	r3, [pc, #184]	@ (8019710 <report_gcode_modes+0x234>)
 8019658:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801965c:	4a2e      	ldr	r2, [pc, #184]	@ (8019718 <report_gcode_modes+0x23c>)
 801965e:	7952      	ldrb	r2, [r2, #5]
 8019660:	b112      	cbz	r2, 8019668 <report_gcode_modes+0x18c>
 8019662:	4838      	ldr	r0, [pc, #224]	@ (8019744 <report_gcode_modes+0x268>)
 8019664:	4798      	blx	r3
 8019666:	e77a      	b.n	801955e <report_gcode_modes+0x82>
 8019668:	4837      	ldr	r0, [pc, #220]	@ (8019748 <report_gcode_modes+0x26c>)
 801966a:	e7fb      	b.n	8019664 <report_gcode_modes+0x188>
    hal.stream.write(gc_state.modal.units_imperial ? " G20" : " G21");
 801966c:	4837      	ldr	r0, [pc, #220]	@ (801974c <report_gcode_modes+0x270>)
 801966e:	e789      	b.n	8019584 <report_gcode_modes+0xa8>
    hal.stream.write(gc_state.modal.distance_incremental ? " G91" : " G90");
 8019670:	4837      	ldr	r0, [pc, #220]	@ (8019750 <report_gcode_modes+0x274>)
 8019672:	e790      	b.n	8019596 <report_gcode_modes+0xba>
    hal.stream.write(uitoa((uint32_t)(93 + (gc_state.modal.feed_mode == FeedMode_UnitsPerRev ? 2 : gc_state.modal.feed_mode ^ 1))));
 8019674:	205f      	movs	r0, #95	@ 0x5f
 8019676:	e79d      	b.n	80195b4 <report_gcode_modes+0xd8>
    if(settings.mode == Mode_Lathe && gc_spindle_get()->cap.variable)
 8019678:	f7f3 fbbe 	bl	800cdf8 <gc_spindle_get>
 801967c:	7a83      	ldrb	r3, [r0, #10]
 801967e:	f013 0f01 	tst.w	r3, #1
 8019682:	d09e      	beq.n	80195c2 <report_gcode_modes+0xe6>
        hal.stream.write(gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? " G97" : " G96");
 8019684:	4b22      	ldr	r3, [pc, #136]	@ (8019710 <report_gcode_modes+0x234>)
 8019686:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801968a:	4a23      	ldr	r2, [pc, #140]	@ (8019718 <report_gcode_modes+0x23c>)
 801968c:	7ed2      	ldrb	r2, [r2, #27]
 801968e:	b912      	cbnz	r2, 8019696 <report_gcode_modes+0x1ba>
 8019690:	4830      	ldr	r0, [pc, #192]	@ (8019754 <report_gcode_modes+0x278>)
 8019692:	4798      	blx	r3
 8019694:	e795      	b.n	80195c2 <report_gcode_modes+0xe6>
 8019696:	4830      	ldr	r0, [pc, #192]	@ (8019758 <report_gcode_modes+0x27c>)
 8019698:	e7fb      	b.n	8019692 <report_gcode_modes+0x1b6>
        hal.stream.write(" G43");
 801969a:	4b1d      	ldr	r3, [pc, #116]	@ (8019710 <report_gcode_modes+0x234>)
 801969c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80196a0:	482e      	ldr	r0, [pc, #184]	@ (801975c <report_gcode_modes+0x280>)
 80196a2:	4798      	blx	r3
        if(gc_state.modal.tool_offset_mode != ToolLengthOffset_Enable)
 80196a4:	4b1c      	ldr	r3, [pc, #112]	@ (8019718 <report_gcode_modes+0x23c>)
 80196a6:	79db      	ldrb	r3, [r3, #7]
 80196a8:	2b01      	cmp	r3, #1
 80196aa:	d093      	beq.n	80195d4 <report_gcode_modes+0xf8>
            hal.stream.write(gc_state.modal.tool_offset_mode == ToolLengthOffset_EnableDynamic ? ".1" : ".2");
 80196ac:	4a18      	ldr	r2, [pc, #96]	@ (8019710 <report_gcode_modes+0x234>)
 80196ae:	f8d2 20b4 	ldr.w	r2, [r2, #180]	@ 0xb4
 80196b2:	2b02      	cmp	r3, #2
 80196b4:	d002      	beq.n	80196bc <report_gcode_modes+0x1e0>
 80196b6:	482a      	ldr	r0, [pc, #168]	@ (8019760 <report_gcode_modes+0x284>)
 80196b8:	4790      	blx	r2
 80196ba:	e78b      	b.n	80195d4 <report_gcode_modes+0xf8>
 80196bc:	4829      	ldr	r0, [pc, #164]	@ (8019764 <report_gcode_modes+0x288>)
 80196be:	e7fb      	b.n	80196b8 <report_gcode_modes+0x1dc>
    hal.stream.write(gc_state.modal.retract_mode == CCRetractMode_RPos ? " G99" : " G98");
 80196c0:	4829      	ldr	r0, [pc, #164]	@ (8019768 <report_gcode_modes+0x28c>)
 80196c2:	e78f      	b.n	80195e4 <report_gcode_modes+0x108>
        hal.stream.write(" G50");
 80196c4:	4b12      	ldr	r3, [pc, #72]	@ (8019710 <report_gcode_modes+0x234>)
 80196c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80196ca:	4828      	ldr	r0, [pc, #160]	@ (801976c <report_gcode_modes+0x290>)
 80196cc:	4798      	blx	r3
 80196ce:	e79e      	b.n	801960e <report_gcode_modes+0x132>
        switch (gc_state.modal.program_flow) {
 80196d0:	2b3c      	cmp	r3, #60	@ 0x3c
 80196d2:	d10a      	bne.n	80196ea <report_gcode_modes+0x20e>
                hal.stream.write(" M60");
 80196d4:	4b0e      	ldr	r3, [pc, #56]	@ (8019710 <report_gcode_modes+0x234>)
 80196d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80196da:	4825      	ldr	r0, [pc, #148]	@ (8019770 <report_gcode_modes+0x294>)
 80196dc:	4798      	blx	r3
                break;
 80196de:	e004      	b.n	80196ea <report_gcode_modes+0x20e>
                hal.stream.write(" M0");
 80196e0:	4b0b      	ldr	r3, [pc, #44]	@ (8019710 <report_gcode_modes+0x234>)
 80196e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80196e6:	4823      	ldr	r0, [pc, #140]	@ (8019774 <report_gcode_modes+0x298>)
 80196e8:	4798      	blx	r3
    hal.stream.write(gc_state.modal.spindle.state.on ? (gc_state.modal.spindle.state.ccw ? " M4" : " M3") : " M5");
 80196ea:	4b09      	ldr	r3, [pc, #36]	@ (8019710 <report_gcode_modes+0x234>)
 80196ec:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80196f0:	4b09      	ldr	r3, [pc, #36]	@ (8019718 <report_gcode_modes+0x23c>)
 80196f2:	7e9b      	ldrb	r3, [r3, #26]
 80196f4:	f013 0f01 	tst.w	r3, #1
 80196f8:	d04e      	beq.n	8019798 <report_gcode_modes+0x2bc>
 80196fa:	f013 0f02 	tst.w	r3, #2
 80196fe:	d06c      	beq.n	80197da <report_gcode_modes+0x2fe>
 8019700:	481d      	ldr	r0, [pc, #116]	@ (8019778 <report_gcode_modes+0x29c>)
 8019702:	e04a      	b.n	801979a <report_gcode_modes+0x2be>
                hal.stream.write(" M1");
 8019704:	4b02      	ldr	r3, [pc, #8]	@ (8019710 <report_gcode_modes+0x234>)
 8019706:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801970a:	481c      	ldr	r0, [pc, #112]	@ (801977c <report_gcode_modes+0x2a0>)
 801970c:	4798      	blx	r3
                break;
 801970e:	e7ec      	b.n	80196ea <report_gcode_modes+0x20e>
 8019710:	200011ac 	.word	0x200011ac
 8019714:	0802b6ec 	.word	0x0802b6ec
 8019718:	20000ee4 	.word	0x20000ee4
 801971c:	0802b6f4 	.word	0x0802b6f4
 8019720:	0802b6f8 	.word	0x0802b6f8
 8019724:	0802b6fc 	.word	0x0802b6fc
 8019728:	20001bc4 	.word	0x20001bc4
 801972c:	0802b6a4 	.word	0x0802b6a4
 8019730:	0802b6b4 	.word	0x0802b6b4
 8019734:	0802b704 	.word	0x0802b704
 8019738:	0802b6e4 	.word	0x0802b6e4
 801973c:	0802b714 	.word	0x0802b714
 8019740:	20001a94 	.word	0x20001a94
 8019744:	0802b69c 	.word	0x0802b69c
 8019748:	0802b6a0 	.word	0x0802b6a0
 801974c:	0802b6ac 	.word	0x0802b6ac
 8019750:	0802b6bc 	.word	0x0802b6bc
 8019754:	0802b6c4 	.word	0x0802b6c4
 8019758:	0802b6cc 	.word	0x0802b6cc
 801975c:	0802b70c 	.word	0x0802b70c
 8019760:	0802b6d8 	.word	0x0802b6d8
 8019764:	0802b6d4 	.word	0x0802b6d4
 8019768:	0802b6dc 	.word	0x0802b6dc
 801976c:	0802b71c 	.word	0x0802b71c
 8019770:	0802b738 	.word	0x0802b738
 8019774:	0802b724 	.word	0x0802b724
 8019778:	080296cc 	.word	0x080296cc
 801977c:	0802b728 	.word	0x0802b728
                hal.stream.write(" M2");
 8019780:	4b4e      	ldr	r3, [pc, #312]	@ (80198bc <report_gcode_modes+0x3e0>)
 8019782:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019786:	484e      	ldr	r0, [pc, #312]	@ (80198c0 <report_gcode_modes+0x3e4>)
 8019788:	4798      	blx	r3
                break;
 801978a:	e7ae      	b.n	80196ea <report_gcode_modes+0x20e>
                hal.stream.write(" M30");
 801978c:	4b4b      	ldr	r3, [pc, #300]	@ (80198bc <report_gcode_modes+0x3e0>)
 801978e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019792:	484c      	ldr	r0, [pc, #304]	@ (80198c4 <report_gcode_modes+0x3e8>)
 8019794:	4798      	blx	r3
                break;
 8019796:	e7a8      	b.n	80196ea <report_gcode_modes+0x20e>
    hal.stream.write(gc_state.modal.spindle.state.on ? (gc_state.modal.spindle.state.ccw ? " M4" : " M3") : " M5");
 8019798:	484b      	ldr	r0, [pc, #300]	@ (80198c8 <report_gcode_modes+0x3ec>)
 801979a:	4790      	blx	r2
    if(gc_state.tool_change)
 801979c:	4b4b      	ldr	r3, [pc, #300]	@ (80198cc <report_gcode_modes+0x3f0>)
 801979e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80197a2:	b123      	cbz	r3, 80197ae <report_gcode_modes+0x2d2>
        hal.stream.write(" M6");
 80197a4:	4b45      	ldr	r3, [pc, #276]	@ (80198bc <report_gcode_modes+0x3e0>)
 80197a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80197aa:	4849      	ldr	r0, [pc, #292]	@ (80198d0 <report_gcode_modes+0x3f4>)
 80197ac:	4798      	blx	r3
    if (gc_state.modal.coolant.value) {
 80197ae:	4b47      	ldr	r3, [pc, #284]	@ (80198cc <report_gcode_modes+0x3f0>)
 80197b0:	7e5b      	ldrb	r3, [r3, #25]
 80197b2:	b1a3      	cbz	r3, 80197de <report_gcode_modes+0x302>
        if (gc_state.modal.coolant.mist)
 80197b4:	f013 0f02 	tst.w	r3, #2
 80197b8:	d004      	beq.n	80197c4 <report_gcode_modes+0x2e8>
             hal.stream.write(" M7");
 80197ba:	4b40      	ldr	r3, [pc, #256]	@ (80198bc <report_gcode_modes+0x3e0>)
 80197bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80197c0:	4844      	ldr	r0, [pc, #272]	@ (80198d4 <report_gcode_modes+0x3f8>)
 80197c2:	4798      	blx	r3
        if (gc_state.modal.coolant.flood)
 80197c4:	4b41      	ldr	r3, [pc, #260]	@ (80198cc <report_gcode_modes+0x3f0>)
 80197c6:	7e5b      	ldrb	r3, [r3, #25]
 80197c8:	f013 0f01 	tst.w	r3, #1
 80197cc:	d00c      	beq.n	80197e8 <report_gcode_modes+0x30c>
            hal.stream.write(" M8");
 80197ce:	4b3b      	ldr	r3, [pc, #236]	@ (80198bc <report_gcode_modes+0x3e0>)
 80197d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80197d4:	4840      	ldr	r0, [pc, #256]	@ (80198d8 <report_gcode_modes+0x3fc>)
 80197d6:	4798      	blx	r3
 80197d8:	e006      	b.n	80197e8 <report_gcode_modes+0x30c>
    hal.stream.write(gc_state.modal.spindle.state.on ? (gc_state.modal.spindle.state.ccw ? " M4" : " M3") : " M5");
 80197da:	4840      	ldr	r0, [pc, #256]	@ (80198dc <report_gcode_modes+0x400>)
 80197dc:	e7dd      	b.n	801979a <report_gcode_modes+0x2be>
        hal.stream.write(" M9");
 80197de:	4b37      	ldr	r3, [pc, #220]	@ (80198bc <report_gcode_modes+0x3e0>)
 80197e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80197e4:	483e      	ldr	r0, [pc, #248]	@ (80198e0 <report_gcode_modes+0x404>)
 80197e6:	4798      	blx	r3
    if (sys.override.control.feed_rate_disable)
 80197e8:	4b3e      	ldr	r3, [pc, #248]	@ (80198e4 <report_gcode_modes+0x408>)
 80197ea:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80197ee:	f013 0f01 	tst.w	r3, #1
 80197f2:	d004      	beq.n	80197fe <report_gcode_modes+0x322>
        hal.stream.write(" M50");
 80197f4:	4b31      	ldr	r3, [pc, #196]	@ (80198bc <report_gcode_modes+0x3e0>)
 80197f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80197fa:	483b      	ldr	r0, [pc, #236]	@ (80198e8 <report_gcode_modes+0x40c>)
 80197fc:	4798      	blx	r3
    if (sys.override.control.spindle_rpm_disable)
 80197fe:	4b39      	ldr	r3, [pc, #228]	@ (80198e4 <report_gcode_modes+0x408>)
 8019800:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8019804:	f013 0f04 	tst.w	r3, #4
 8019808:	d004      	beq.n	8019814 <report_gcode_modes+0x338>
        hal.stream.write(" M51");
 801980a:	4b2c      	ldr	r3, [pc, #176]	@ (80198bc <report_gcode_modes+0x3e0>)
 801980c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019810:	4836      	ldr	r0, [pc, #216]	@ (80198ec <report_gcode_modes+0x410>)
 8019812:	4798      	blx	r3
    if (sys.override.control.feed_hold_disable)
 8019814:	4b33      	ldr	r3, [pc, #204]	@ (80198e4 <report_gcode_modes+0x408>)
 8019816:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801981a:	f013 0f02 	tst.w	r3, #2
 801981e:	d004      	beq.n	801982a <report_gcode_modes+0x34e>
        hal.stream.write(" M53");
 8019820:	4b26      	ldr	r3, [pc, #152]	@ (80198bc <report_gcode_modes+0x3e0>)
 8019822:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019826:	4832      	ldr	r0, [pc, #200]	@ (80198f0 <report_gcode_modes+0x414>)
 8019828:	4798      	blx	r3
    if (settings.parking.flags.enable_override_control && sys.override.control.parking_disable)
 801982a:	4b32      	ldr	r3, [pc, #200]	@ (80198f4 <report_gcode_modes+0x418>)
 801982c:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 8019830:	f013 0f04 	tst.w	r3, #4
 8019834:	d00a      	beq.n	801984c <report_gcode_modes+0x370>
 8019836:	4b2b      	ldr	r3, [pc, #172]	@ (80198e4 <report_gcode_modes+0x408>)
 8019838:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801983c:	f013 0f08 	tst.w	r3, #8
 8019840:	d004      	beq.n	801984c <report_gcode_modes+0x370>
        hal.stream.write(" M56");
 8019842:	4b1e      	ldr	r3, [pc, #120]	@ (80198bc <report_gcode_modes+0x3e0>)
 8019844:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019848:	482b      	ldr	r0, [pc, #172]	@ (80198f8 <report_gcode_modes+0x41c>)
 801984a:	4798      	blx	r3
    hal.stream.write(appendbuf(2, " T", uitoa((uint32_t)gc_state.tool->tool_id)));
 801984c:	4d1b      	ldr	r5, [pc, #108]	@ (80198bc <report_gcode_modes+0x3e0>)
 801984e:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8019852:	4c1e      	ldr	r4, [pc, #120]	@ (80198cc <report_gcode_modes+0x3f0>)
 8019854:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 8019858:	6918      	ldr	r0, [r3, #16]
 801985a:	f7fb fc8f 	bl	801517c <uitoa>
 801985e:	4602      	mov	r2, r0
 8019860:	4926      	ldr	r1, [pc, #152]	@ (80198fc <report_gcode_modes+0x420>)
 8019862:	2002      	movs	r0, #2
 8019864:	f7fe fd5a 	bl	801831c <appendbuf>
 8019868:	47b0      	blx	r6
    hal.stream.write(appendbuf(2, " F", get_rate_value(gc_state.feed_rate)));
 801986a:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 801986e:	4b24      	ldr	r3, [pc, #144]	@ (8019900 <report_gcode_modes+0x424>)
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	ed94 0a18 	vldr	s0, [r4, #96]	@ 0x60
 8019876:	4798      	blx	r3
 8019878:	4602      	mov	r2, r0
 801987a:	4922      	ldr	r1, [pc, #136]	@ (8019904 <report_gcode_modes+0x428>)
 801987c:	2002      	movs	r0, #2
 801987e:	f7fe fd4d 	bl	801831c <appendbuf>
 8019882:	47a8      	blx	r5
    if(gc_spindle_get()->cap.variable)
 8019884:	f7f3 fab8 	bl	800cdf8 <gc_spindle_get>
 8019888:	7a83      	ldrb	r3, [r0, #10]
 801988a:	f013 0f01 	tst.w	r3, #1
 801988e:	d105      	bne.n	801989c <report_gcode_modes+0x3c0>
    hal.stream.write("]" ASCII_EOL);
 8019890:	4b0a      	ldr	r3, [pc, #40]	@ (80198bc <report_gcode_modes+0x3e0>)
 8019892:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019896:	481c      	ldr	r0, [pc, #112]	@ (8019908 <report_gcode_modes+0x42c>)
 8019898:	4798      	blx	r3
}
 801989a:	bd70      	pop	{r4, r5, r6, pc}
        hal.stream.write(appendbuf(2, " S", ftoa(gc_state.spindle.rpm, N_DECIMAL_RPMVALUE)));
 801989c:	4b07      	ldr	r3, [pc, #28]	@ (80198bc <report_gcode_modes+0x3e0>)
 801989e:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 80198a2:	2000      	movs	r0, #0
 80198a4:	4b09      	ldr	r3, [pc, #36]	@ (80198cc <report_gcode_modes+0x3f0>)
 80198a6:	ed93 0a14 	vldr	s0, [r3, #80]	@ 0x50
 80198aa:	f7fb fc89 	bl	80151c0 <ftoa>
 80198ae:	4602      	mov	r2, r0
 80198b0:	4916      	ldr	r1, [pc, #88]	@ (801990c <report_gcode_modes+0x430>)
 80198b2:	2002      	movs	r0, #2
 80198b4:	f7fe fd32 	bl	801831c <appendbuf>
 80198b8:	47a0      	blx	r4
 80198ba:	e7e9      	b.n	8019890 <report_gcode_modes+0x3b4>
 80198bc:	200011ac 	.word	0x200011ac
 80198c0:	0802b72c 	.word	0x0802b72c
 80198c4:	0802b730 	.word	0x0802b730
 80198c8:	080296d4 	.word	0x080296d4
 80198cc:	20000ee4 	.word	0x20000ee4
 80198d0:	080296dc 	.word	0x080296dc
 80198d4:	080296e4 	.word	0x080296e4
 80198d8:	0802b740 	.word	0x0802b740
 80198dc:	080296c4 	.word	0x080296c4
 80198e0:	0802b744 	.word	0x0802b744
 80198e4:	2000148c 	.word	0x2000148c
 80198e8:	0802b748 	.word	0x0802b748
 80198ec:	0802b750 	.word	0x0802b750
 80198f0:	0802b758 	.word	0x0802b758
 80198f4:	20001bc4 	.word	0x20001bc4
 80198f8:	0802b760 	.word	0x0802b760
 80198fc:	0802b768 	.word	0x0802b768
 8019900:	20001a88 	.word	0x20001a88
 8019904:	0802b76c 	.word	0x0802b76c
 8019908:	0802b3b0 	.word	0x0802b3b0
 801990c:	0802b770 	.word	0x0802b770

08019910 <report_startup_line>:
{
 8019910:	b570      	push	{r4, r5, r6, lr}
 8019912:	460d      	mov	r5, r1
    hal.stream.write(appendbuf(3, "$N", uitoa((uint32_t)n), "="));
 8019914:	4c0a      	ldr	r4, [pc, #40]	@ (8019940 <report_startup_line+0x30>)
 8019916:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 801991a:	f7fb fc2f 	bl	801517c <uitoa>
 801991e:	4602      	mov	r2, r0
 8019920:	4b08      	ldr	r3, [pc, #32]	@ (8019944 <report_startup_line+0x34>)
 8019922:	4909      	ldr	r1, [pc, #36]	@ (8019948 <report_startup_line+0x38>)
 8019924:	2003      	movs	r0, #3
 8019926:	f7fe fcf9 	bl	801831c <appendbuf>
 801992a:	47b0      	blx	r6
    hal.stream.write(line);
 801992c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019930:	4628      	mov	r0, r5
 8019932:	4798      	blx	r3
    hal.stream.write(ASCII_EOL);
 8019934:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019938:	4804      	ldr	r0, [pc, #16]	@ (801994c <report_startup_line+0x3c>)
 801993a:	4798      	blx	r3
}
 801993c:	bd70      	pop	{r4, r5, r6, pc}
 801993e:	bf00      	nop
 8019940:	200011ac 	.word	0x200011ac
 8019944:	0802b628 	.word	0x0802b628
 8019948:	0802b774 	.word	0x0802b774
 801994c:	0802ba5c 	.word	0x0802ba5c

08019950 <report_execute_startup_message>:
{
 8019950:	b570      	push	{r4, r5, r6, lr}
 8019952:	4606      	mov	r6, r0
 8019954:	460c      	mov	r4, r1
    hal.stream.write(">");
 8019956:	4d09      	ldr	r5, [pc, #36]	@ (801997c <report_execute_startup_message+0x2c>)
 8019958:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801995c:	4808      	ldr	r0, [pc, #32]	@ (8019980 <report_execute_startup_message+0x30>)
 801995e:	4798      	blx	r3
    hal.stream.write(line);
 8019960:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019964:	4630      	mov	r0, r6
 8019966:	4798      	blx	r3
    hal.stream.write(":");
 8019968:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801996c:	4805      	ldr	r0, [pc, #20]	@ (8019984 <report_execute_startup_message+0x34>)
 801996e:	4798      	blx	r3
    grbl.report.status_message(status_code);
 8019970:	4b05      	ldr	r3, [pc, #20]	@ (8019988 <report_execute_startup_message+0x38>)
 8019972:	689b      	ldr	r3, [r3, #8]
 8019974:	4620      	mov	r0, r4
 8019976:	4798      	blx	r3
}
 8019978:	bd70      	pop	{r4, r5, r6, pc}
 801997a:	bf00      	nop
 801997c:	200011ac 	.word	0x200011ac
 8019980:	0802b778 	.word	0x0802b778
 8019984:	0802b718 	.word	0x0802b718
 8019988:	20001394 	.word	0x20001394

0801998c <report_build_info>:
{
 801998c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801998e:	b09b      	sub	sp, #108	@ 0x6c
 8019990:	4605      	mov	r5, r0
    hal.stream.write("[VER:" GRBL_VERSION ".");
 8019992:	4c7f      	ldr	r4, [pc, #508]	@ (8019b90 <report_build_info+0x204>)
 8019994:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019998:	487e      	ldr	r0, [pc, #504]	@ (8019b94 <report_build_info+0x208>)
 801999a:	4798      	blx	r3
    hal.stream.write(uitoa(GRBL_BUILD));
 801999c:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 80199a0:	487d      	ldr	r0, [pc, #500]	@ (8019b98 <report_build_info+0x20c>)
 80199a2:	f7fb fbeb 	bl	801517c <uitoa>
 80199a6:	47b0      	blx	r6
    hal.stream.write(":");
 80199a8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80199ac:	487b      	ldr	r0, [pc, #492]	@ (8019b9c <report_build_info+0x210>)
 80199ae:	4798      	blx	r3
    hal.stream.write(line);
 80199b0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80199b4:	4628      	mov	r0, r5
 80199b6:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 80199b8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80199bc:	4878      	ldr	r0, [pc, #480]	@ (8019ba0 <report_build_info+0x214>)
 80199be:	4798      	blx	r3
    spindle_ptrs_t *spindle = spindle_get(0);
 80199c0:	2000      	movs	r0, #0
 80199c2:	f004 fa0f 	bl	801dde4 <spindle_get>
 80199c6:	4603      	mov	r3, r0
    strcpy(buf, "[OPT:");
 80199c8:	4a76      	ldr	r2, [pc, #472]	@ (8019ba4 <report_build_info+0x218>)
 80199ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80199ce:	9001      	str	r0, [sp, #4]
 80199d0:	f8ad 1008 	strh.w	r1, [sp, #8]
    if(spindle && spindle->cap.variable)
 80199d4:	461a      	mov	r2, r3
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	f000 80d4 	beq.w	8019b84 <report_build_info+0x1f8>
 80199dc:	7a9b      	ldrb	r3, [r3, #10]
 80199de:	f013 0f01 	tst.w	r3, #1
 80199e2:	f000 80d2 	beq.w	8019b8a <report_build_info+0x1fe>
        *append++ = 'V';
 80199e6:	2356      	movs	r3, #86	@ 0x56
 80199e8:	f88d 3009 	strb.w	r3, [sp, #9]
 80199ec:	f10d 010a 	add.w	r1, sp, #10
    *append++ = 'N';
 80199f0:	460b      	mov	r3, r1
 80199f2:	204e      	movs	r0, #78	@ 0x4e
 80199f4:	f803 0b01 	strb.w	r0, [r3], #1
    if(hal.coolant_cap.mist)
 80199f8:	4865      	ldr	r0, [pc, #404]	@ (8019b90 <report_build_info+0x204>)
 80199fa:	f890 01e4 	ldrb.w	r0, [r0, #484]	@ 0x1e4
 80199fe:	f010 0f02 	tst.w	r0, #2
 8019a02:	d002      	beq.n	8019a0a <report_build_info+0x7e>
        *append++ = 'M';
 8019a04:	1c8b      	adds	r3, r1, #2
 8019a06:	204d      	movs	r0, #77	@ 0x4d
 8019a08:	7048      	strb	r0, [r1, #1]
    if(settings.parking.flags.enabled)
 8019a0a:	4967      	ldr	r1, [pc, #412]	@ (8019ba8 <report_build_info+0x21c>)
 8019a0c:	f891 1128 	ldrb.w	r1, [r1, #296]	@ 0x128
 8019a10:	f011 0f01 	tst.w	r1, #1
 8019a14:	d002      	beq.n	8019a1c <report_build_info+0x90>
        *append++ = 'P';
 8019a16:	2150      	movs	r1, #80	@ 0x50
 8019a18:	f803 1b01 	strb.w	r1, [r3], #1
    if(settings.homing.flags.force_set_origin)
 8019a1c:	4962      	ldr	r1, [pc, #392]	@ (8019ba8 <report_build_info+0x21c>)
 8019a1e:	f891 1114 	ldrb.w	r1, [r1, #276]	@ 0x114
 8019a22:	f011 0f08 	tst.w	r1, #8
 8019a26:	d002      	beq.n	8019a2e <report_build_info+0xa2>
        *append++ = 'Z';
 8019a28:	215a      	movs	r1, #90	@ 0x5a
 8019a2a:	f803 1b01 	strb.w	r1, [r3], #1
    if(settings.homing.flags.single_axis_commands)
 8019a2e:	495e      	ldr	r1, [pc, #376]	@ (8019ba8 <report_build_info+0x21c>)
 8019a30:	f891 1114 	ldrb.w	r1, [r1, #276]	@ 0x114
 8019a34:	f011 0f02 	tst.w	r1, #2
 8019a38:	d002      	beq.n	8019a40 <report_build_info+0xb4>
        *append++ = 'H';
 8019a3a:	2148      	movs	r1, #72	@ 0x48
 8019a3c:	f803 1b01 	strb.w	r1, [r3], #1
    if(settings.limits.flags.two_switches)
 8019a40:	4959      	ldr	r1, [pc, #356]	@ (8019ba8 <report_build_info+0x21c>)
 8019a42:	f891 1124 	ldrb.w	r1, [r1, #292]	@ 0x124
 8019a46:	f011 0f10 	tst.w	r1, #16
 8019a4a:	d002      	beq.n	8019a52 <report_build_info+0xc6>
        *append++ = 'T';
 8019a4c:	2154      	movs	r1, #84	@ 0x54
 8019a4e:	f803 1b01 	strb.w	r1, [r3], #1
    if(settings.probe.allow_feed_override)
 8019a52:	4955      	ldr	r1, [pc, #340]	@ (8019ba8 <report_build_info+0x21c>)
 8019a54:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
 8019a58:	f011 0f10 	tst.w	r1, #16
 8019a5c:	d002      	beq.n	8019a64 <report_build_info+0xd8>
        *append++ = 'A';
 8019a5e:	2141      	movs	r1, #65	@ 0x41
 8019a60:	f803 1b01 	strb.w	r1, [r3], #1
    if(spindle && !spindle->cap.direction) // NOTE: Shown when disabled.
 8019a64:	b132      	cbz	r2, 8019a74 <report_build_info+0xe8>
 8019a66:	7a92      	ldrb	r2, [r2, #10]
 8019a68:	f012 0f02 	tst.w	r2, #2
 8019a6c:	d102      	bne.n	8019a74 <report_build_info+0xe8>
        *append++ = 'D';
 8019a6e:	2244      	movs	r2, #68	@ 0x44
 8019a70:	f803 2b01 	strb.w	r2, [r3], #1
    if(settings.spindle.flags.enable_rpm_controlled)
 8019a74:	4a4c      	ldr	r2, [pc, #304]	@ (8019ba8 <report_build_info+0x21c>)
 8019a76:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 8019a7a:	f012 0f01 	tst.w	r2, #1
 8019a7e:	d002      	beq.n	8019a86 <report_build_info+0xfa>
        *append++ = '0';
 8019a80:	2230      	movs	r2, #48	@ 0x30
 8019a82:	f803 2b01 	strb.w	r2, [r3], #1
    if(hal.driver_cap.software_debounce)
 8019a86:	4a42      	ldr	r2, [pc, #264]	@ (8019b90 <report_build_info+0x204>)
 8019a88:	f892 21d8 	ldrb.w	r2, [r2, #472]	@ 0x1d8
 8019a8c:	f012 0f01 	tst.w	r2, #1
 8019a90:	d002      	beq.n	8019a98 <report_build_info+0x10c>
        *append++ = 'S';
 8019a92:	2253      	movs	r2, #83	@ 0x53
 8019a94:	f803 2b01 	strb.w	r2, [r3], #1
    if(settings.parking.flags.enable_override_control)
 8019a98:	4a43      	ldr	r2, [pc, #268]	@ (8019ba8 <report_build_info+0x21c>)
 8019a9a:	f892 2128 	ldrb.w	r2, [r2, #296]	@ 0x128
 8019a9e:	f012 0f04 	tst.w	r2, #4
 8019aa2:	d002      	beq.n	8019aaa <report_build_info+0x11e>
        *append++ = 'R';
 8019aa4:	2252      	movs	r2, #82	@ 0x52
 8019aa6:	f803 2b01 	strb.w	r2, [r3], #1
    if(!settings.homing.flags.init_lock)
 8019aaa:	4a3f      	ldr	r2, [pc, #252]	@ (8019ba8 <report_build_info+0x21c>)
 8019aac:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 8019ab0:	f012 0f04 	tst.w	r2, #4
 8019ab4:	d102      	bne.n	8019abc <report_build_info+0x130>
        *append++ = 'L';
 8019ab6:	224c      	movs	r2, #76	@ 0x4c
 8019ab8:	f803 2b01 	strb.w	r2, [r3], #1
    if(hal.signals_cap.safety_door_ajar)
 8019abc:	4a34      	ldr	r2, [pc, #208]	@ (8019b90 <report_build_info+0x204>)
 8019abe:	f892 21dc 	ldrb.w	r2, [r2, #476]	@ 0x1dc
 8019ac2:	f012 0f08 	tst.w	r2, #8
 8019ac6:	d002      	beq.n	8019ace <report_build_info+0x142>
        *append++ = '+';
 8019ac8:	222b      	movs	r2, #43	@ 0x2b
 8019aca:	f803 2b01 	strb.w	r2, [r3], #1
    if(!settings.status_report.sync_on_wco_change) // NOTE: Shown when disabled.
 8019ace:	4a36      	ldr	r2, [pc, #216]	@ (8019ba8 <report_build_info+0x21c>)
 8019ad0:	f892 20fd 	ldrb.w	r2, [r2, #253]	@ 0xfd
 8019ad4:	f012 0f01 	tst.w	r2, #1
 8019ad8:	d102      	bne.n	8019ae0 <report_build_info+0x154>
        *append++ = 'W';
 8019ada:	2257      	movs	r2, #87	@ 0x57
 8019adc:	f803 2b01 	strb.w	r2, [r3], #1
    if(hal.stepper.get_ganged)
 8019ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8019b90 <report_build_info+0x204>)
 8019ae2:	f8d2 209c 	ldr.w	r2, [r2, #156]	@ 0x9c
 8019ae6:	b112      	cbz	r2, 8019aee <report_build_info+0x162>
        *append++ = '2';
 8019ae8:	2232      	movs	r2, #50	@ 0x32
 8019aea:	f803 2b01 	strb.w	r2, [r3], #1
    *append++ = ',';
 8019aee:	222c      	movs	r2, #44	@ 0x2c
 8019af0:	701a      	strb	r2, [r3, #0]
    *append = '\0';
 8019af2:	2400      	movs	r4, #0
 8019af4:	705c      	strb	r4, [r3, #1]
    hal.stream.write(buf);
 8019af6:	4d26      	ldr	r5, [pc, #152]	@ (8019b90 <report_build_info+0x204>)
 8019af8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019afc:	a801      	add	r0, sp, #4
 8019afe:	4798      	blx	r3
    hal.stream.write(uitoa((uint32_t)plan_get_buffer_size()));
 8019b00:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8019b04:	f7fc fa20 	bl	8015f48 <plan_get_buffer_size>
 8019b08:	f7fb fb38 	bl	801517c <uitoa>
 8019b0c:	47b0      	blx	r6
    hal.stream.write(",");
 8019b0e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019b12:	4e26      	ldr	r6, [pc, #152]	@ (8019bac <report_build_info+0x220>)
 8019b14:	4630      	mov	r0, r6
 8019b16:	4798      	blx	r3
    hal.stream.write(uitoa(hal.rx_buffer_size));
 8019b18:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 8019b1c:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8019b1e:	f7fb fb2d 	bl	801517c <uitoa>
 8019b22:	47b8      	blx	r7
        hal.stream.write(",");
 8019b24:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019b28:	4630      	mov	r0, r6
 8019b2a:	4798      	blx	r3
        hal.stream.write(uitoa((uint32_t)N_AXIS));
 8019b2c:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 8019b30:	2003      	movs	r0, #3
 8019b32:	f7fb fb23 	bl	801517c <uitoa>
 8019b36:	47b8      	blx	r7
        hal.stream.write(",");
 8019b38:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019b3c:	4630      	mov	r0, r6
 8019b3e:	4798      	blx	r3
        hal.stream.write(uitoa(grbl.tool_table.n_tools));
 8019b40:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8019b44:	4b1a      	ldr	r3, [pc, #104]	@ (8019bb0 <report_build_info+0x224>)
 8019b46:	6998      	ldr	r0, [r3, #24]
 8019b48:	f7fb fb18 	bl	801517c <uitoa>
 8019b4c:	47b0      	blx	r6
    hal.stream.write("]" ASCII_EOL);
 8019b4e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019b52:	4813      	ldr	r0, [pc, #76]	@ (8019ba0 <report_build_info+0x214>)
 8019b54:	4798      	blx	r3
        nvs_io_t *nvs = nvs_buffer_get_physical();
 8019b56:	f7fc f859 	bl	8015c0c <nvs_buffer_get_physical>
 8019b5a:	4605      	mov	r5, r0
        strcat(strcpy(buf, "[AXS:"), uitoa(N_AXIS));
 8019b5c:	4b15      	ldr	r3, [pc, #84]	@ (8019bb4 <report_build_info+0x228>)
 8019b5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019b62:	9001      	str	r0, [sp, #4]
 8019b64:	f8ad 1008 	strh.w	r1, [sp, #8]
 8019b68:	2003      	movs	r0, #3
 8019b6a:	f7fb fb07 	bl	801517c <uitoa>
 8019b6e:	4601      	mov	r1, r0
 8019b70:	a801      	add	r0, sp, #4
 8019b72:	f00a fc8c 	bl	802448e <strcat>
        *append++ = ':';
 8019b76:	233a      	movs	r3, #58	@ 0x3a
 8019b78:	f88d 300a 	strb.w	r3, [sp, #10]
        for(idx = 0; idx < N_AXIS; idx++)
 8019b7c:	4622      	mov	r2, r4
        *append++ = ':';
 8019b7e:	f10d 030b 	add.w	r3, sp, #11
        for(idx = 0; idx < N_AXIS; idx++)
 8019b82:	e020      	b.n	8019bc6 <report_build_info+0x23a>
    char *append = &buf[5];
 8019b84:	f10d 0109 	add.w	r1, sp, #9
 8019b88:	e732      	b.n	80199f0 <report_build_info+0x64>
 8019b8a:	f10d 0109 	add.w	r1, sp, #9
 8019b8e:	e72f      	b.n	80199f0 <report_build_info+0x64>
 8019b90:	200011ac 	.word	0x200011ac
 8019b94:	0802b7a8 	.word	0x0802b7a8
 8019b98:	0134d945 	.word	0x0134d945
 8019b9c:	0802b718 	.word	0x0802b718
 8019ba0:	0802b3b0 	.word	0x0802b3b0
 8019ba4:	0802b7b4 	.word	0x0802b7b4
 8019ba8:	20001bc4 	.word	0x20001bc4
 8019bac:	0802b7dc 	.word	0x0802b7dc
 8019bb0:	20001394 	.word	0x20001394
 8019bb4:	0802b7bc 	.word	0x0802b7bc
            *append++ = *axis_letter[idx];
 8019bb8:	49ab      	ldr	r1, [pc, #684]	@ (8019e68 <report_build_info+0x4dc>)
 8019bba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019bbe:	7809      	ldrb	r1, [r1, #0]
 8019bc0:	f803 1b01 	strb.w	r1, [r3], #1
        for(idx = 0; idx < N_AXIS; idx++)
 8019bc4:	3201      	adds	r2, #1
 8019bc6:	2a02      	cmp	r2, #2
 8019bc8:	d9f6      	bls.n	8019bb8 <report_build_info+0x22c>
        *append = '\0';
 8019bca:	2200      	movs	r2, #0
 8019bcc:	701a      	strb	r2, [r3, #0]
        hal.stream.write(strcat(buf, "]" ASCII_EOL));
 8019bce:	4ba7      	ldr	r3, [pc, #668]	@ (8019e6c <report_build_info+0x4e0>)
 8019bd0:	f8d3 60b4 	ldr.w	r6, [r3, #180]	@ 0xb4
 8019bd4:	ac01      	add	r4, sp, #4
 8019bd6:	4620      	mov	r0, r4
 8019bd8:	f7ee fa92 	bl	8008100 <strlen>
 8019bdc:	4603      	mov	r3, r0
 8019bde:	4aa4      	ldr	r2, [pc, #656]	@ (8019e70 <report_build_info+0x4e4>)
 8019be0:	6810      	ldr	r0, [r2, #0]
 8019be2:	50e0      	str	r0, [r4, r3]
 8019be4:	4620      	mov	r0, r4
 8019be6:	47b0      	blx	r6
        strcpy(buf, "[NEWOPT:ENUMS,RT");
 8019be8:	4ea2      	ldr	r6, [pc, #648]	@ (8019e74 <report_build_info+0x4e8>)
 8019bea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8019bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019bee:	6833      	ldr	r3, [r6, #0]
 8019bf0:	7023      	strb	r3, [r4, #0]
        strcat(buf, settings.flags.legacy_rt_commands ? "+," : "-,");
 8019bf2:	4ba1      	ldr	r3, [pc, #644]	@ (8019e78 <report_build_info+0x4ec>)
 8019bf4:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8019bf8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8019bfc:	f000 81b7 	beq.w	8019f6e <report_build_info+0x5e2>
 8019c00:	4e9e      	ldr	r6, [pc, #632]	@ (8019e7c <report_build_info+0x4f0>)
 8019c02:	ac01      	add	r4, sp, #4
 8019c04:	4620      	mov	r0, r4
 8019c06:	f7ee fa7b 	bl	8008100 <strlen>
 8019c0a:	1823      	adds	r3, r4, r0
 8019c0c:	8831      	ldrh	r1, [r6, #0]
 8019c0e:	78b2      	ldrb	r2, [r6, #2]
 8019c10:	5221      	strh	r1, [r4, r0]
 8019c12:	709a      	strb	r2, [r3, #2]
        if(settings.homing.flags.enabled)
 8019c14:	4b98      	ldr	r3, [pc, #608]	@ (8019e78 <report_build_info+0x4ec>)
 8019c16:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8019c1a:	f013 0f01 	tst.w	r3, #1
 8019c1e:	f040 81a8 	bne.w	8019f72 <report_build_info+0x5e6>
        if(!hal.probe.get_state)
 8019c22:	4b92      	ldr	r3, [pc, #584]	@ (8019e6c <report_build_info+0x4e0>)
 8019c24:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	f000 81ad 	beq.w	8019f88 <report_build_info+0x5fc>
        else if(hal.signals_cap.probe_disconnected)
 8019c2e:	4b8f      	ldr	r3, [pc, #572]	@ (8019e6c <report_build_info+0x4e0>)
 8019c30:	f993 31dc 	ldrsb.w	r3, [r3, #476]	@ 0x1dc
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	f2c0 81b4 	blt.w	8019fa2 <report_build_info+0x616>
        if(hal.signals_cap.stop_disable)
 8019c3a:	4b8c      	ldr	r3, [pc, #560]	@ (8019e6c <report_build_info+0x4e0>)
 8019c3c:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8019c40:	f013 0f20 	tst.w	r3, #32
 8019c44:	f040 81b6 	bne.w	8019fb4 <report_build_info+0x628>
        if(hal.signals_cap.block_delete)
 8019c48:	4b88      	ldr	r3, [pc, #544]	@ (8019e6c <report_build_info+0x4e0>)
 8019c4a:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8019c4e:	f013 0f10 	tst.w	r3, #16
 8019c52:	f040 81b8 	bne.w	8019fc6 <report_build_info+0x63a>
        if(hal.signals_cap.e_stop)
 8019c56:	4b85      	ldr	r3, [pc, #532]	@ (8019e6c <report_build_info+0x4e0>)
 8019c58:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8019c5c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8019c60:	f040 81ba 	bne.w	8019fd8 <report_build_info+0x64c>
        if(hal.driver_cap.mpg_mode)
 8019c64:	4b81      	ldr	r3, [pc, #516]	@ (8019e6c <report_build_info+0x4e0>)
 8019c66:	f993 31d9 	ldrsb.w	r3, [r3, #473]	@ 0x1d9
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	f2c0 81bd 	blt.w	8019fea <report_build_info+0x65e>
        if(settings.mode == Mode_Lathe)
 8019c70:	4b81      	ldr	r3, [pc, #516]	@ (8019e78 <report_build_info+0x4ec>)
 8019c72:	7e1b      	ldrb	r3, [r3, #24]
 8019c74:	2b02      	cmp	r3, #2
 8019c76:	f000 81c4 	beq.w	801a002 <report_build_info+0x676>
        if(hal.driver_cap.laser_ppi_mode)
 8019c7a:	4b7c      	ldr	r3, [pc, #496]	@ (8019e6c <report_build_info+0x4e0>)
 8019c7c:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 8019c80:	f013 0f01 	tst.w	r3, #1
 8019c84:	f040 81cb 	bne.w	801a01e <report_build_info+0x692>
        if(hal.reboot)
 8019c88:	4b78      	ldr	r3, [pc, #480]	@ (8019e6c <report_build_info+0x4e0>)
 8019c8a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8019c8e:	b14b      	cbz	r3, 8019ca4 <report_build_info+0x318>
            strcat(buf, "REBOOT,");
 8019c90:	ac01      	add	r4, sp, #4
 8019c92:	4620      	mov	r0, r4
 8019c94:	f7ee fa34 	bl	8008100 <strlen>
 8019c98:	4603      	mov	r3, r0
 8019c9a:	1826      	adds	r6, r4, r0
 8019c9c:	4a78      	ldr	r2, [pc, #480]	@ (8019e80 <report_build_info+0x4f4>)
 8019c9e:	ca03      	ldmia	r2!, {r0, r1}
 8019ca0:	50e0      	str	r0, [r4, r3]
 8019ca2:	6071      	str	r1, [r6, #4]
        if(hal.tool.change)
 8019ca4:	4b71      	ldr	r3, [pc, #452]	@ (8019e6c <report_build_info+0x4e0>)
 8019ca6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8019caa:	b153      	cbz	r3, 8019cc2 <report_build_info+0x336>
            strcat(buf, hal.driver_cap.atc ? "ATC," : "TC,"); // Tool change supported (M6)
 8019cac:	4b6f      	ldr	r3, [pc, #444]	@ (8019e6c <report_build_info+0x4e0>)
 8019cae:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 8019cb2:	f013 0f02 	tst.w	r3, #2
 8019cb6:	f000 81be 	beq.w	801a036 <report_build_info+0x6aa>
 8019cba:	4972      	ldr	r1, [pc, #456]	@ (8019e84 <report_build_info+0x4f8>)
 8019cbc:	a801      	add	r0, sp, #4
 8019cbe:	f00a fbe6 	bl	802448e <strcat>
        if(hal.driver_cap.spindle_sync)
 8019cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8019e6c <report_build_info+0x4e0>)
 8019cc4:	f893 31d9 	ldrb.w	r3, [r3, #473]	@ 0x1d9
 8019cc8:	f013 0f01 	tst.w	r3, #1
 8019ccc:	f040 81b5 	bne.w	801a03a <report_build_info+0x6ae>
        strcat(buf, "SED,");
 8019cd0:	ac01      	add	r4, sp, #4
 8019cd2:	4620      	mov	r0, r4
 8019cd4:	f7ee fa14 	bl	8008100 <strlen>
 8019cd8:	4603      	mov	r3, r0
 8019cda:	1821      	adds	r1, r4, r0
 8019cdc:	4a6a      	ldr	r2, [pc, #424]	@ (8019e88 <report_build_info+0x4fc>)
 8019cde:	6810      	ldr	r0, [r2, #0]
 8019ce0:	50e0      	str	r0, [r4, r3]
 8019ce2:	7913      	ldrb	r3, [r2, #4]
 8019ce4:	710b      	strb	r3, [r1, #4]
        if(hal.rtc.get_datetime)
 8019ce6:	4b61      	ldr	r3, [pc, #388]	@ (8019e6c <report_build_info+0x4e0>)
 8019ce8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8019cec:	b14b      	cbz	r3, 8019d02 <report_build_info+0x376>
            strcat(buf, "RTC,");
 8019cee:	4620      	mov	r0, r4
 8019cf0:	f7ee fa06 	bl	8008100 <strlen>
 8019cf4:	4603      	mov	r3, r0
 8019cf6:	1821      	adds	r1, r4, r0
 8019cf8:	4a64      	ldr	r2, [pc, #400]	@ (8019e8c <report_build_info+0x500>)
 8019cfa:	6810      	ldr	r0, [r2, #0]
 8019cfc:	50e0      	str	r0, [r4, r3]
 8019cfe:	7913      	ldrb	r3, [r2, #4]
 8019d00:	710b      	strb	r3, [r1, #4]
        if(canbus_enabled())
 8019d02:	f7f2 fcfb 	bl	800c6fc <canbus_enabled>
 8019d06:	2800      	cmp	r0, #0
 8019d08:	f040 81a0 	bne.w	801a04c <report_build_info+0x6c0>
        append = &buf[strlen(buf) - 1];
 8019d0c:	a801      	add	r0, sp, #4
 8019d0e:	f7ee f9f7 	bl	8008100 <strlen>
        if(*append == ',')
 8019d12:	f100 0367 	add.w	r3, r0, #103	@ 0x67
        append = &buf[strlen(buf) - 1];
 8019d16:	3801      	subs	r0, #1
        if(*append == ',')
 8019d18:	446b      	add	r3, sp
 8019d1a:	f813 3c64 	ldrb.w	r3, [r3, #-100]
 8019d1e:	2b2c      	cmp	r3, #44	@ 0x2c
 8019d20:	f000 81a0 	beq.w	801a064 <report_build_info+0x6d8>
        hal.stream.write(buf);
 8019d24:	4c51      	ldr	r4, [pc, #324]	@ (8019e6c <report_build_info+0x4e0>)
 8019d26:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019d2a:	a801      	add	r0, sp, #4
 8019d2c:	4798      	blx	r3
        grbl.on_report_options(true);
 8019d2e:	4b58      	ldr	r3, [pc, #352]	@ (8019e90 <report_build_info+0x504>)
 8019d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019d32:	2001      	movs	r0, #1
 8019d34:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 8019d36:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019d3a:	4e4d      	ldr	r6, [pc, #308]	@ (8019e70 <report_build_info+0x4e4>)
 8019d3c:	4630      	mov	r0, r6
 8019d3e:	4798      	blx	r3
        hal.stream.write("[FIRMWARE:grblHAL]" ASCII_EOL);
 8019d40:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019d44:	4853      	ldr	r0, [pc, #332]	@ (8019e94 <report_build_info+0x508>)
 8019d46:	4798      	blx	r3
        hal.stream.write("[SIGNALS:");
 8019d48:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019d4c:	4852      	ldr	r0, [pc, #328]	@ (8019e98 <report_build_info+0x50c>)
 8019d4e:	4798      	blx	r3
        control_signals_tostring(buf, hal.signals_cap);
 8019d50:	f8b4 11dc 	ldrh.w	r1, [r4, #476]	@ 0x1dc
 8019d54:	a801      	add	r0, sp, #4
 8019d56:	f7fd ff13 	bl	8017b80 <control_signals_tostring>
        hal.stream.write(buf);
 8019d5a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019d5e:	a801      	add	r0, sp, #4
 8019d60:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 8019d62:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019d66:	4630      	mov	r0, r6
 8019d68:	4798      	blx	r3
        if(!(nvs->type == NVS_None || nvs->type == NVS_Emulated)) {
 8019d6a:	782b      	ldrb	r3, [r5, #0]
 8019d6c:	b33b      	cbz	r3, 8019dbe <report_build_info+0x432>
 8019d6e:	2b04      	cmp	r3, #4
 8019d70:	d025      	beq.n	8019dbe <report_build_info+0x432>
            hal.stream.write("[NVS STORAGE:");
 8019d72:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019d76:	4849      	ldr	r0, [pc, #292]	@ (8019e9c <report_build_info+0x510>)
 8019d78:	4798      	blx	r3
            *buf = '\0';
 8019d7a:	2300      	movs	r3, #0
 8019d7c:	f88d 3004 	strb.w	r3, [sp, #4]
            if(hal.nvs.type == NVS_Emulated)
 8019d80:	f894 3174 	ldrb.w	r3, [r4, #372]	@ 0x174
 8019d84:	2b04      	cmp	r3, #4
 8019d86:	f000 8175 	beq.w	801a074 <report_build_info+0x6e8>
            strcat(buf, nvs->type == NVS_Flash ? "FLASH" : (nvs->type == NVS_FRAM ? "FRAM" : "EEPROM"));
 8019d8a:	782b      	ldrb	r3, [r5, #0]
 8019d8c:	2b03      	cmp	r3, #3
 8019d8e:	f000 817b 	beq.w	801a088 <report_build_info+0x6fc>
 8019d92:	2b02      	cmp	r3, #2
 8019d94:	f000 8176 	beq.w	801a084 <report_build_info+0x6f8>
 8019d98:	4941      	ldr	r1, [pc, #260]	@ (8019ea0 <report_build_info+0x514>)
 8019d9a:	a801      	add	r0, sp, #4
 8019d9c:	f00a fb77 	bl	802448e <strcat>
            if(hal.nvs.size_max) {
 8019da0:	4b32      	ldr	r3, [pc, #200]	@ (8019e6c <report_build_info+0x4e0>)
 8019da2:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	f040 8170 	bne.w	801a08c <report_build_info+0x700>
            hal.stream.write(buf);
 8019dac:	4c2f      	ldr	r4, [pc, #188]	@ (8019e6c <report_build_info+0x4e0>)
 8019dae:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019db2:	a801      	add	r0, sp, #4
 8019db4:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 8019db6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019dba:	482d      	ldr	r0, [pc, #180]	@ (8019e70 <report_build_info+0x4e4>)
 8019dbc:	4798      	blx	r3
        if(hal.get_free_mem) {
 8019dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8019e6c <report_build_info+0x4e0>)
 8019dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019dc2:	b183      	cbz	r3, 8019de6 <report_build_info+0x45a>
            hal.stream.write("[FREE MEMORY:");
 8019dc4:	4c29      	ldr	r4, [pc, #164]	@ (8019e6c <report_build_info+0x4e0>)
 8019dc6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019dca:	4836      	ldr	r0, [pc, #216]	@ (8019ea4 <report_build_info+0x518>)
 8019dcc:	4798      	blx	r3
            hal.stream.write(uitoa(hal.get_free_mem() / 1024));
 8019dce:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8019dd2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019dd4:	4798      	blx	r3
 8019dd6:	0a80      	lsrs	r0, r0, #10
 8019dd8:	f7fb f9d0 	bl	801517c <uitoa>
 8019ddc:	47a8      	blx	r5
            hal.stream.write("K]" ASCII_EOL);
 8019dde:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019de2:	4831      	ldr	r0, [pc, #196]	@ (8019ea8 <report_build_info+0x51c>)
 8019de4:	4798      	blx	r3
        if(hal.info) {
 8019de6:	4b21      	ldr	r3, [pc, #132]	@ (8019e6c <report_build_info+0x4e0>)
 8019de8:	685b      	ldr	r3, [r3, #4]
 8019dea:	b163      	cbz	r3, 8019e06 <report_build_info+0x47a>
            hal.stream.write("[DRIVER:");
 8019dec:	4c1f      	ldr	r4, [pc, #124]	@ (8019e6c <report_build_info+0x4e0>)
 8019dee:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019df2:	482e      	ldr	r0, [pc, #184]	@ (8019eac <report_build_info+0x520>)
 8019df4:	4798      	blx	r3
            hal.stream.write(hal.info);
 8019df6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019dfa:	6860      	ldr	r0, [r4, #4]
 8019dfc:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 8019dfe:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019e02:	481b      	ldr	r0, [pc, #108]	@ (8019e70 <report_build_info+0x4e4>)
 8019e04:	4798      	blx	r3
        if(hal.driver_version) {
 8019e06:	4b19      	ldr	r3, [pc, #100]	@ (8019e6c <report_build_info+0x4e0>)
 8019e08:	689b      	ldr	r3, [r3, #8]
 8019e0a:	b163      	cbz	r3, 8019e26 <report_build_info+0x49a>
            hal.stream.write("[DRIVER VERSION:");
 8019e0c:	4c17      	ldr	r4, [pc, #92]	@ (8019e6c <report_build_info+0x4e0>)
 8019e0e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019e12:	4827      	ldr	r0, [pc, #156]	@ (8019eb0 <report_build_info+0x524>)
 8019e14:	4798      	blx	r3
            hal.stream.write(hal.driver_version);
 8019e16:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019e1a:	68a0      	ldr	r0, [r4, #8]
 8019e1c:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 8019e1e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019e22:	4813      	ldr	r0, [pc, #76]	@ (8019e70 <report_build_info+0x4e4>)
 8019e24:	4798      	blx	r3
        if(hal.driver_options) {
 8019e26:	4b11      	ldr	r3, [pc, #68]	@ (8019e6c <report_build_info+0x4e0>)
 8019e28:	68db      	ldr	r3, [r3, #12]
 8019e2a:	b163      	cbz	r3, 8019e46 <report_build_info+0x4ba>
            hal.stream.write("[DRIVER OPTIONS:");
 8019e2c:	4c0f      	ldr	r4, [pc, #60]	@ (8019e6c <report_build_info+0x4e0>)
 8019e2e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019e32:	4820      	ldr	r0, [pc, #128]	@ (8019eb4 <report_build_info+0x528>)
 8019e34:	4798      	blx	r3
            hal.stream.write(hal.driver_options);
 8019e36:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019e3a:	68e0      	ldr	r0, [r4, #12]
 8019e3c:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 8019e3e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019e42:	480b      	ldr	r0, [pc, #44]	@ (8019e70 <report_build_info+0x4e4>)
 8019e44:	4798      	blx	r3
        if(hal.board) {
 8019e46:	4b09      	ldr	r3, [pc, #36]	@ (8019e6c <report_build_info+0x4e0>)
 8019e48:	695b      	ldr	r3, [r3, #20]
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d038      	beq.n	8019ec0 <report_build_info+0x534>
            hal.stream.write("[BOARD:");
 8019e4e:	4c07      	ldr	r4, [pc, #28]	@ (8019e6c <report_build_info+0x4e0>)
 8019e50:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019e54:	4818      	ldr	r0, [pc, #96]	@ (8019eb8 <report_build_info+0x52c>)
 8019e56:	4798      	blx	r3
            hal.stream.write(hal.board);
 8019e58:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019e5c:	6960      	ldr	r0, [r4, #20]
 8019e5e:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 8019e60:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019e64:	e02a      	b.n	8019ebc <report_build_info+0x530>
 8019e66:	bf00      	nop
 8019e68:	0802b218 	.word	0x0802b218
 8019e6c:	200011ac 	.word	0x200011ac
 8019e70:	0802b3b0 	.word	0x0802b3b0
 8019e74:	0802b7c4 	.word	0x0802b7c4
 8019e78:	20001bc4 	.word	0x20001bc4
 8019e7c:	0802b77c 	.word	0x0802b77c
 8019e80:	0802b814 	.word	0x0802b814
 8019e84:	0802b784 	.word	0x0802b784
 8019e88:	0802b820 	.word	0x0802b820
 8019e8c:	0802b828 	.word	0x0802b828
 8019e90:	20001394 	.word	0x20001394
 8019e94:	0802b838 	.word	0x0802b838
 8019e98:	0802b850 	.word	0x0802b850
 8019e9c:	0802b85c 	.word	0x0802b85c
 8019ea0:	0802b790 	.word	0x0802b790
 8019ea4:	0802b874 	.word	0x0802b874
 8019ea8:	0802b884 	.word	0x0802b884
 8019eac:	0802b88c 	.word	0x0802b88c
 8019eb0:	0802b898 	.word	0x0802b898
 8019eb4:	0802b8ac 	.word	0x0802b8ac
 8019eb8:	0802b8c0 	.word	0x0802b8c0
 8019ebc:	4880      	ldr	r0, [pc, #512]	@ (801a0c0 <report_build_info+0x734>)
 8019ebe:	4798      	blx	r3
        if(hal.max_step_rate) {
 8019ec0:	4b80      	ldr	r3, [pc, #512]	@ (801a0c4 <report_build_info+0x738>)
 8019ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019ec4:	b173      	cbz	r3, 8019ee4 <report_build_info+0x558>
            hal.stream.write("[MAX STEP RATE:");
 8019ec6:	4c7f      	ldr	r4, [pc, #508]	@ (801a0c4 <report_build_info+0x738>)
 8019ec8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019ecc:	487e      	ldr	r0, [pc, #504]	@ (801a0c8 <report_build_info+0x73c>)
 8019ece:	4798      	blx	r3
            hal.stream.write(uitoa(hal.max_step_rate));
 8019ed0:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8019ed4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8019ed6:	f7fb f951 	bl	801517c <uitoa>
 8019eda:	47a8      	blx	r5
            hal.stream.write(" Hz]" ASCII_EOL);
 8019edc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019ee0:	487a      	ldr	r0, [pc, #488]	@ (801a0cc <report_build_info+0x740>)
 8019ee2:	4798      	blx	r3
        if(hal.port.num_digital_in + hal.port.num_digital_out + hal.port.num_analog_in + hal.port.num_analog_out > 0) {
 8019ee4:	4a77      	ldr	r2, [pc, #476]	@ (801a0c4 <report_build_info+0x738>)
 8019ee6:	f892 3114 	ldrb.w	r3, [r2, #276]	@ 0x114
 8019eea:	f892 1115 	ldrb.w	r1, [r2, #277]	@ 0x115
 8019eee:	440b      	add	r3, r1
 8019ef0:	f892 1116 	ldrb.w	r1, [r2, #278]	@ 0x116
 8019ef4:	440b      	add	r3, r1
 8019ef6:	f892 2117 	ldrb.w	r2, [r2, #279]	@ 0x117
 8019efa:	42d3      	cmn	r3, r2
 8019efc:	d031      	beq.n	8019f62 <report_build_info+0x5d6>
            hal.stream.write("[AUX IO:");
 8019efe:	4c71      	ldr	r4, [pc, #452]	@ (801a0c4 <report_build_info+0x738>)
 8019f00:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f04:	4872      	ldr	r0, [pc, #456]	@ (801a0d0 <report_build_info+0x744>)
 8019f06:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_digital_in));
 8019f08:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8019f0c:	f894 0114 	ldrb.w	r0, [r4, #276]	@ 0x114
 8019f10:	f7fb f934 	bl	801517c <uitoa>
 8019f14:	47a8      	blx	r5
            hal.stream.write(",");
 8019f16:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f1a:	4d6e      	ldr	r5, [pc, #440]	@ (801a0d4 <report_build_info+0x748>)
 8019f1c:	4628      	mov	r0, r5
 8019f1e:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_digital_out));
 8019f20:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8019f24:	f894 0115 	ldrb.w	r0, [r4, #277]	@ 0x115
 8019f28:	f7fb f928 	bl	801517c <uitoa>
 8019f2c:	47b0      	blx	r6
            hal.stream.write(",");
 8019f2e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f32:	4628      	mov	r0, r5
 8019f34:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_analog_in));
 8019f36:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8019f3a:	f894 0116 	ldrb.w	r0, [r4, #278]	@ 0x116
 8019f3e:	f7fb f91d 	bl	801517c <uitoa>
 8019f42:	47b0      	blx	r6
            hal.stream.write(",");
 8019f44:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f48:	4628      	mov	r0, r5
 8019f4a:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_analog_out));
 8019f4c:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8019f50:	f894 0117 	ldrb.w	r0, [r4, #279]	@ 0x117
 8019f54:	f7fb f912 	bl	801517c <uitoa>
 8019f58:	47a8      	blx	r5
            hal.stream.write("]" ASCII_EOL);
 8019f5a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f5e:	4858      	ldr	r0, [pc, #352]	@ (801a0c0 <report_build_info+0x734>)
 8019f60:	4798      	blx	r3
        grbl.on_report_options(false);
 8019f62:	4b5d      	ldr	r3, [pc, #372]	@ (801a0d8 <report_build_info+0x74c>)
 8019f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019f66:	2000      	movs	r0, #0
 8019f68:	4798      	blx	r3
}
 8019f6a:	b01b      	add	sp, #108	@ 0x6c
 8019f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        strcat(buf, settings.flags.legacy_rt_commands ? "+," : "-,");
 8019f6e:	4e5b      	ldr	r6, [pc, #364]	@ (801a0dc <report_build_info+0x750>)
 8019f70:	e647      	b.n	8019c02 <report_build_info+0x276>
            strcat(buf, "HOME,");
 8019f72:	4620      	mov	r0, r4
 8019f74:	f7ee f8c4 	bl	8008100 <strlen>
 8019f78:	4603      	mov	r3, r0
 8019f7a:	1821      	adds	r1, r4, r0
 8019f7c:	4a58      	ldr	r2, [pc, #352]	@ (801a0e0 <report_build_info+0x754>)
 8019f7e:	6810      	ldr	r0, [r2, #0]
 8019f80:	50e0      	str	r0, [r4, r3]
 8019f82:	8893      	ldrh	r3, [r2, #4]
 8019f84:	808b      	strh	r3, [r1, #4]
 8019f86:	e64c      	b.n	8019c22 <report_build_info+0x296>
            strcat(buf, "NOPROBE,");
 8019f88:	ac01      	add	r4, sp, #4
 8019f8a:	4620      	mov	r0, r4
 8019f8c:	f7ee f8b8 	bl	8008100 <strlen>
 8019f90:	4602      	mov	r2, r0
 8019f92:	1826      	adds	r6, r4, r0
 8019f94:	4b53      	ldr	r3, [pc, #332]	@ (801a0e4 <report_build_info+0x758>)
 8019f96:	cb03      	ldmia	r3!, {r0, r1}
 8019f98:	50a0      	str	r0, [r4, r2]
 8019f9a:	6071      	str	r1, [r6, #4]
 8019f9c:	781b      	ldrb	r3, [r3, #0]
 8019f9e:	7233      	strb	r3, [r6, #8]
 8019fa0:	e64b      	b.n	8019c3a <report_build_info+0x2ae>
            strcat(buf, "PC,");
 8019fa2:	ac01      	add	r4, sp, #4
 8019fa4:	4620      	mov	r0, r4
 8019fa6:	f7ee f8ab 	bl	8008100 <strlen>
 8019faa:	4603      	mov	r3, r0
 8019fac:	4a4e      	ldr	r2, [pc, #312]	@ (801a0e8 <report_build_info+0x75c>)
 8019fae:	6810      	ldr	r0, [r2, #0]
 8019fb0:	50e0      	str	r0, [r4, r3]
 8019fb2:	e642      	b.n	8019c3a <report_build_info+0x2ae>
            strcat(buf, "OS,");
 8019fb4:	ac01      	add	r4, sp, #4
 8019fb6:	4620      	mov	r0, r4
 8019fb8:	f7ee f8a2 	bl	8008100 <strlen>
 8019fbc:	4603      	mov	r3, r0
 8019fbe:	4a4b      	ldr	r2, [pc, #300]	@ (801a0ec <report_build_info+0x760>)
 8019fc0:	6810      	ldr	r0, [r2, #0]
 8019fc2:	50e0      	str	r0, [r4, r3]
 8019fc4:	e640      	b.n	8019c48 <report_build_info+0x2bc>
            strcat(buf, "BD,");
 8019fc6:	ac01      	add	r4, sp, #4
 8019fc8:	4620      	mov	r0, r4
 8019fca:	f7ee f899 	bl	8008100 <strlen>
 8019fce:	4603      	mov	r3, r0
 8019fd0:	4a47      	ldr	r2, [pc, #284]	@ (801a0f0 <report_build_info+0x764>)
 8019fd2:	6810      	ldr	r0, [r2, #0]
 8019fd4:	50e0      	str	r0, [r4, r3]
 8019fd6:	e63e      	b.n	8019c56 <report_build_info+0x2ca>
            strcat(buf, "ES,");
 8019fd8:	ac01      	add	r4, sp, #4
 8019fda:	4620      	mov	r0, r4
 8019fdc:	f7ee f890 	bl	8008100 <strlen>
 8019fe0:	4603      	mov	r3, r0
 8019fe2:	4a44      	ldr	r2, [pc, #272]	@ (801a0f4 <report_build_info+0x768>)
 8019fe4:	6810      	ldr	r0, [r2, #0]
 8019fe6:	50e0      	str	r0, [r4, r3]
 8019fe8:	e63c      	b.n	8019c64 <report_build_info+0x2d8>
            strcat(buf, "MPG,");
 8019fea:	ac01      	add	r4, sp, #4
 8019fec:	4620      	mov	r0, r4
 8019fee:	f7ee f887 	bl	8008100 <strlen>
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	1821      	adds	r1, r4, r0
 8019ff6:	4a40      	ldr	r2, [pc, #256]	@ (801a0f8 <report_build_info+0x76c>)
 8019ff8:	6810      	ldr	r0, [r2, #0]
 8019ffa:	50e0      	str	r0, [r4, r3]
 8019ffc:	7913      	ldrb	r3, [r2, #4]
 8019ffe:	710b      	strb	r3, [r1, #4]
 801a000:	e636      	b.n	8019c70 <report_build_info+0x2e4>
            strcat(buf, "LATHE,");
 801a002:	ac01      	add	r4, sp, #4
 801a004:	4620      	mov	r0, r4
 801a006:	f7ee f87b 	bl	8008100 <strlen>
 801a00a:	4603      	mov	r3, r0
 801a00c:	1821      	adds	r1, r4, r0
 801a00e:	4a3b      	ldr	r2, [pc, #236]	@ (801a0fc <report_build_info+0x770>)
 801a010:	6810      	ldr	r0, [r2, #0]
 801a012:	50e0      	str	r0, [r4, r3]
 801a014:	8890      	ldrh	r0, [r2, #4]
 801a016:	7993      	ldrb	r3, [r2, #6]
 801a018:	8088      	strh	r0, [r1, #4]
 801a01a:	718b      	strb	r3, [r1, #6]
 801a01c:	e62d      	b.n	8019c7a <report_build_info+0x2ee>
            strcat(buf, "PPI,");
 801a01e:	ac01      	add	r4, sp, #4
 801a020:	4620      	mov	r0, r4
 801a022:	f7ee f86d 	bl	8008100 <strlen>
 801a026:	4603      	mov	r3, r0
 801a028:	1821      	adds	r1, r4, r0
 801a02a:	4a35      	ldr	r2, [pc, #212]	@ (801a100 <report_build_info+0x774>)
 801a02c:	6810      	ldr	r0, [r2, #0]
 801a02e:	50e0      	str	r0, [r4, r3]
 801a030:	7913      	ldrb	r3, [r2, #4]
 801a032:	710b      	strb	r3, [r1, #4]
 801a034:	e628      	b.n	8019c88 <report_build_info+0x2fc>
            strcat(buf, hal.driver_cap.atc ? "ATC," : "TC,"); // Tool change supported (M6)
 801a036:	4933      	ldr	r1, [pc, #204]	@ (801a104 <report_build_info+0x778>)
 801a038:	e640      	b.n	8019cbc <report_build_info+0x330>
            strcat(buf, "SS,");
 801a03a:	ac01      	add	r4, sp, #4
 801a03c:	4620      	mov	r0, r4
 801a03e:	f7ee f85f 	bl	8008100 <strlen>
 801a042:	4603      	mov	r3, r0
 801a044:	4a30      	ldr	r2, [pc, #192]	@ (801a108 <report_build_info+0x77c>)
 801a046:	6810      	ldr	r0, [r2, #0]
 801a048:	50e0      	str	r0, [r4, r3]
 801a04a:	e641      	b.n	8019cd0 <report_build_info+0x344>
            strcat(buf, "CAN,");
 801a04c:	ac01      	add	r4, sp, #4
 801a04e:	4620      	mov	r0, r4
 801a050:	f7ee f856 	bl	8008100 <strlen>
 801a054:	4603      	mov	r3, r0
 801a056:	1821      	adds	r1, r4, r0
 801a058:	4a2c      	ldr	r2, [pc, #176]	@ (801a10c <report_build_info+0x780>)
 801a05a:	6810      	ldr	r0, [r2, #0]
 801a05c:	50e0      	str	r0, [r4, r3]
 801a05e:	7913      	ldrb	r3, [r2, #4]
 801a060:	710b      	strb	r3, [r1, #4]
 801a062:	e653      	b.n	8019d0c <report_build_info+0x380>
            *append = '\0';
 801a064:	f100 0368 	add.w	r3, r0, #104	@ 0x68
 801a068:	eb0d 0003 	add.w	r0, sp, r3
 801a06c:	2300      	movs	r3, #0
 801a06e:	f800 3c64 	strb.w	r3, [r0, #-100]
 801a072:	e657      	b.n	8019d24 <report_build_info+0x398>
                strcat(buf, "*");
 801a074:	ac01      	add	r4, sp, #4
 801a076:	4620      	mov	r0, r4
 801a078:	f7ee f842 	bl	8008100 <strlen>
 801a07c:	4b24      	ldr	r3, [pc, #144]	@ (801a110 <report_build_info+0x784>)
 801a07e:	881b      	ldrh	r3, [r3, #0]
 801a080:	5223      	strh	r3, [r4, r0]
 801a082:	e682      	b.n	8019d8a <report_build_info+0x3fe>
            strcat(buf, nvs->type == NVS_Flash ? "FLASH" : (nvs->type == NVS_FRAM ? "FRAM" : "EEPROM"));
 801a084:	4923      	ldr	r1, [pc, #140]	@ (801a114 <report_build_info+0x788>)
 801a086:	e688      	b.n	8019d9a <report_build_info+0x40e>
 801a088:	4923      	ldr	r1, [pc, #140]	@ (801a118 <report_build_info+0x78c>)
 801a08a:	e686      	b.n	8019d9a <report_build_info+0x40e>
                strcat(buf, " ");
 801a08c:	a801      	add	r0, sp, #4
 801a08e:	f7ee f837 	bl	8008100 <strlen>
 801a092:	4b22      	ldr	r3, [pc, #136]	@ (801a11c <report_build_info+0x790>)
 801a094:	881b      	ldrh	r3, [r3, #0]
 801a096:	aa01      	add	r2, sp, #4
 801a098:	5213      	strh	r3, [r2, r0]
                strcat(buf, uitoa(hal.nvs.size_max / 1024));
 801a09a:	4b0a      	ldr	r3, [pc, #40]	@ (801a0c4 <report_build_info+0x738>)
 801a09c:	f8d3 017c 	ldr.w	r0, [r3, #380]	@ 0x17c
 801a0a0:	0a80      	lsrs	r0, r0, #10
 801a0a2:	f7fb f86b 	bl	801517c <uitoa>
 801a0a6:	4601      	mov	r1, r0
 801a0a8:	a801      	add	r0, sp, #4
 801a0aa:	f00a f9f0 	bl	802448e <strcat>
                strcat(buf, "K");
 801a0ae:	a801      	add	r0, sp, #4
 801a0b0:	f7ee f826 	bl	8008100 <strlen>
 801a0b4:	4b1a      	ldr	r3, [pc, #104]	@ (801a120 <report_build_info+0x794>)
 801a0b6:	881b      	ldrh	r3, [r3, #0]
 801a0b8:	aa01      	add	r2, sp, #4
 801a0ba:	5213      	strh	r3, [r2, r0]
 801a0bc:	e676      	b.n	8019dac <report_build_info+0x420>
 801a0be:	bf00      	nop
 801a0c0:	0802b3b0 	.word	0x0802b3b0
 801a0c4:	200011ac 	.word	0x200011ac
 801a0c8:	0802b8c8 	.word	0x0802b8c8
 801a0cc:	0802b8d8 	.word	0x0802b8d8
 801a0d0:	0802b8e0 	.word	0x0802b8e0
 801a0d4:	0802b7dc 	.word	0x0802b7dc
 801a0d8:	20001394 	.word	0x20001394
 801a0dc:	0802b780 	.word	0x0802b780
 801a0e0:	0802b7d8 	.word	0x0802b7d8
 801a0e4:	0802b7e0 	.word	0x0802b7e0
 801a0e8:	0802b7ec 	.word	0x0802b7ec
 801a0ec:	0802b7f0 	.word	0x0802b7f0
 801a0f0:	0802b7f4 	.word	0x0802b7f4
 801a0f4:	0802b7f8 	.word	0x0802b7f8
 801a0f8:	0802b7fc 	.word	0x0802b7fc
 801a0fc:	0802b804 	.word	0x0802b804
 801a100:	0802b80c 	.word	0x0802b80c
 801a104:	0802b78c 	.word	0x0802b78c
 801a108:	0802b81c 	.word	0x0802b81c
 801a10c:	0802b830 	.word	0x0802b830
 801a110:	0802b86c 	.word	0x0802b86c
 801a114:	0802b7a0 	.word	0x0802b7a0
 801a118:	0802b798 	.word	0x0802b798
 801a11c:	0802b4fc 	.word	0x0802b4fc
 801a120:	0802b870 	.word	0x0802b870

0801a124 <report_realtime_status>:
{
 801a124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a128:	b08b      	sub	sp, #44	@ 0x2c
    report_tracking_flags_t report = system_get_rt_report_flags();
 801a12a:	f007 faa3 	bl	8021674 <system_get_rt_report_flags>
 801a12e:	4604      	mov	r4, r0
    probe_state_t probe_state = {
 801a130:	f04f 0902 	mov.w	r9, #2
    system_convert_array_steps_to_mpos(print_position, sys.position);
 801a134:	49a2      	ldr	r1, [pc, #648]	@ (801a3c0 <report_realtime_status+0x29c>)
 801a136:	a806      	add	r0, sp, #24
 801a138:	f007 f9fe 	bl	8021538 <system_convert_array_steps_to_mpos>
    if(hal.probe.get_state)
 801a13c:	4ba1      	ldr	r3, [pc, #644]	@ (801a3c4 <report_realtime_status+0x2a0>)
 801a13e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 801a142:	b10b      	cbz	r3, 801a148 <report_realtime_status+0x24>
        probe_state = hal.probe.get_state();
 801a144:	4798      	blx	r3
 801a146:	4681      	mov	r9, r0
    hal.stream.write_all("<");
 801a148:	4b9e      	ldr	r3, [pc, #632]	@ (801a3c4 <report_realtime_status+0x2a0>)
 801a14a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a14e:	489e      	ldr	r0, [pc, #632]	@ (801a3c8 <report_realtime_status+0x2a4>)
 801a150:	4798      	blx	r3
    sys_state_t state = state_get();
 801a152:	f004 fad7 	bl	801e704 <state_get>
 801a156:	4680      	mov	r8, r0
    switch (gc_state.tool_change && state == STATE_CYCLE ? STATE_TOOL_CHANGE : state) {
 801a158:	4b9c      	ldr	r3, [pc, #624]	@ (801a3cc <report_realtime_status+0x2a8>)
 801a15a:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801a15e:	b10b      	cbz	r3, 801a164 <report_realtime_status+0x40>
 801a160:	2808      	cmp	r0, #8
 801a162:	d035      	beq.n	801a1d0 <report_realtime_status+0xac>
 801a164:	f1b8 0f20 	cmp.w	r8, #32
 801a168:	d825      	bhi.n	801a1b6 <report_realtime_status+0x92>
 801a16a:	f1b8 0f20 	cmp.w	r8, #32
 801a16e:	d834      	bhi.n	801a1da <report_realtime_status+0xb6>
 801a170:	e8df f018 	tbh	[pc, r8, lsl #1]
 801a174:	015200d1 	.word	0x015200d1
 801a178:	00330170 	.word	0x00330170
 801a17c:	0033011f 	.word	0x0033011f
 801a180:	00330033 	.word	0x00330033
 801a184:	003300d7 	.word	0x003300d7
 801a188:	00330033 	.word	0x00330033
 801a18c:	00330033 	.word	0x00330033
 801a190:	00330033 	.word	0x00330033
 801a194:	00330109 	.word	0x00330109
 801a198:	00330033 	.word	0x00330033
 801a19c:	00330033 	.word	0x00330033
 801a1a0:	00330033 	.word	0x00330033
 801a1a4:	00330033 	.word	0x00330033
 801a1a8:	00330033 	.word	0x00330033
 801a1ac:	00330033 	.word	0x00330033
 801a1b0:	00330033 	.word	0x00330033
 801a1b4:	0119      	.short	0x0119
 801a1b6:	f1b8 0f80 	cmp.w	r8, #128	@ 0x80
 801a1ba:	f000 8151 	beq.w	801a460 <report_realtime_status+0x33c>
 801a1be:	f240 8097 	bls.w	801a2f0 <report_realtime_status+0x1cc>
 801a1c2:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 801a1c6:	f000 8127 	beq.w	801a418 <report_realtime_status+0x2f4>
 801a1ca:	f5b8 7f00 	cmp.w	r8, #512	@ 0x200
 801a1ce:	d104      	bne.n	801a1da <report_realtime_status+0xb6>
            hal.stream.write_all("Tool");
 801a1d0:	4b7c      	ldr	r3, [pc, #496]	@ (801a3c4 <report_realtime_status+0x2a0>)
 801a1d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a1d6:	487e      	ldr	r0, [pc, #504]	@ (801a3d0 <report_realtime_status+0x2ac>)
 801a1d8:	4798      	blx	r3
    if(!settings.status_report.machine_position || report.wco) {
 801a1da:	4b7e      	ldr	r3, [pc, #504]	@ (801a3d4 <report_realtime_status+0x2b0>)
 801a1dc:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801a1e0:	f013 0f01 	tst.w	r3, #1
 801a1e4:	f000 815f 	beq.w	801a4a6 <report_realtime_status+0x382>
 801a1e8:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801a1ec:	f040 815d 	bne.w	801a4aa <report_realtime_status+0x386>
    hal.stream.write_all(settings.status_report.machine_position ? "|MPos:" : "|WPos:");
 801a1f0:	4b74      	ldr	r3, [pc, #464]	@ (801a3c4 <report_realtime_status+0x2a0>)
 801a1f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a1f6:	4a77      	ldr	r2, [pc, #476]	@ (801a3d4 <report_realtime_status+0x2b0>)
 801a1f8:	f892 20fc 	ldrb.w	r2, [r2, #252]	@ 0xfc
 801a1fc:	f012 0f01 	tst.w	r2, #1
 801a200:	f000 8155 	beq.w	801a4ae <report_realtime_status+0x38a>
 801a204:	4874      	ldr	r0, [pc, #464]	@ (801a3d8 <report_realtime_status+0x2b4>)
 801a206:	4798      	blx	r3
    hal.stream.write_all(get_axis_values(print_position));
 801a208:	4b6e      	ldr	r3, [pc, #440]	@ (801a3c4 <report_realtime_status+0x2a0>)
 801a20a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801a20e:	4b73      	ldr	r3, [pc, #460]	@ (801a3dc <report_realtime_status+0x2b8>)
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	a806      	add	r0, sp, #24
 801a214:	4798      	blx	r3
 801a216:	47a8      	blx	r5
    if (settings.status_report.buffer_state) {
 801a218:	4b6e      	ldr	r3, [pc, #440]	@ (801a3d4 <report_realtime_status+0x2b0>)
 801a21a:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801a21e:	f013 0f02 	tst.w	r3, #2
 801a222:	d017      	beq.n	801a254 <report_realtime_status+0x130>
        hal.stream.write_all("|Bf:");
 801a224:	4d67      	ldr	r5, [pc, #412]	@ (801a3c4 <report_realtime_status+0x2a0>)
 801a226:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 801a22a:	486d      	ldr	r0, [pc, #436]	@ (801a3e0 <report_realtime_status+0x2bc>)
 801a22c:	4798      	blx	r3
        hal.stream.write_all(uitoa((uint32_t)plan_get_block_buffer_available()));
 801a22e:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 801a232:	f7fc f9c7 	bl	80165c4 <plan_get_block_buffer_available>
 801a236:	f7fa ffa1 	bl	801517c <uitoa>
 801a23a:	47b0      	blx	r6
        hal.stream.write_all(",");
 801a23c:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 801a240:	4868      	ldr	r0, [pc, #416]	@ (801a3e4 <report_realtime_status+0x2c0>)
 801a242:	4798      	blx	r3
        hal.stream.write_all(uitoa(hal.stream.get_rx_buffer_free()));
 801a244:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 801a248:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 801a24c:	4798      	blx	r3
 801a24e:	f7fa ff95 	bl	801517c <uitoa>
 801a252:	47b0      	blx	r6
    if(settings.status_report.line_numbers) {
 801a254:	4b5f      	ldr	r3, [pc, #380]	@ (801a3d4 <report_realtime_status+0x2b0>)
 801a256:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801a25a:	f013 0f04 	tst.w	r3, #4
 801a25e:	f040 8128 	bne.w	801a4b2 <report_realtime_status+0x38e>
    spindle_0 = spindle_get(0);
 801a262:	2000      	movs	r0, #0
 801a264:	f003 fdbe 	bl	801dde4 <spindle_get>
 801a268:	4606      	mov	r6, r0
    spindle_0_state = spindle_0->get_state(spindle_0);
 801a26a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801a26c:	4798      	blx	r3
 801a26e:	4607      	mov	r7, r0
    if(settings.status_report.feed_speed) {
 801a270:	4b58      	ldr	r3, [pc, #352]	@ (801a3d4 <report_realtime_status+0x2b0>)
 801a272:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801a276:	f013 0f08 	tst.w	r3, #8
 801a27a:	f000 8144 	beq.w	801a506 <report_realtime_status+0x3e2>
        if(spindle_0->cap.variable) {
 801a27e:	7ab3      	ldrb	r3, [r6, #10]
 801a280:	f013 0f01 	tst.w	r3, #1
 801a284:	f000 8130 	beq.w	801a4e8 <report_realtime_status+0x3c4>
            hal.stream.write_all(appendbuf(2, "|FS:", get_rate_value(st_get_realtime_rate())));
 801a288:	4d4e      	ldr	r5, [pc, #312]	@ (801a3c4 <report_realtime_status+0x2a0>)
 801a28a:	f8d5 a0b8 	ldr.w	sl, [r5, #184]	@ 0xb8
 801a28e:	4b56      	ldr	r3, [pc, #344]	@ (801a3e8 <report_realtime_status+0x2c4>)
 801a290:	f8d3 b000 	ldr.w	fp, [r3]
 801a294:	f005 fe8a 	bl	801ffac <st_get_realtime_rate>
 801a298:	47d8      	blx	fp
 801a29a:	4602      	mov	r2, r0
 801a29c:	4953      	ldr	r1, [pc, #332]	@ (801a3ec <report_realtime_status+0x2c8>)
 801a29e:	2002      	movs	r0, #2
 801a2a0:	f7fe f83c 	bl	801831c <appendbuf>
 801a2a4:	47d0      	blx	sl
            hal.stream.write_all(appendbuf(2, ",", uitoa(spindle_0_state.on ? lroundf(spindle_0->param->rpm_overridden) : 0)));
 801a2a6:	f8d5 50b8 	ldr.w	r5, [r5, #184]	@ 0xb8
 801a2aa:	f017 0f01 	tst.w	r7, #1
 801a2ae:	f040 8115 	bne.w	801a4dc <report_realtime_status+0x3b8>
 801a2b2:	2000      	movs	r0, #0
 801a2b4:	f7fa ff62 	bl	801517c <uitoa>
 801a2b8:	4602      	mov	r2, r0
 801a2ba:	494a      	ldr	r1, [pc, #296]	@ (801a3e4 <report_realtime_status+0x2c0>)
 801a2bc:	2002      	movs	r0, #2
 801a2be:	f7fe f82d 	bl	801831c <appendbuf>
 801a2c2:	47a8      	blx	r5
            if(spindle_0->get_data /* && sys.mpg_mode */)
 801a2c4:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	f000 811d 	beq.w	801a506 <report_realtime_status+0x3e2>
                hal.stream.write_all(appendbuf(2, ",", uitoa(lroundf(spindle_0->get_data(SpindleData_RPM)->rpm))));
 801a2cc:	4a3d      	ldr	r2, [pc, #244]	@ (801a3c4 <report_realtime_status+0x2a0>)
 801a2ce:	f8d2 50b8 	ldr.w	r5, [r2, #184]	@ 0xb8
 801a2d2:	2001      	movs	r0, #1
 801a2d4:	4798      	blx	r3
 801a2d6:	ed90 0a00 	vldr	s0, [r0]
 801a2da:	f00c ff0f 	bl	80270fc <lroundf>
 801a2de:	f7fa ff4d 	bl	801517c <uitoa>
 801a2e2:	4602      	mov	r2, r0
 801a2e4:	493f      	ldr	r1, [pc, #252]	@ (801a3e4 <report_realtime_status+0x2c0>)
 801a2e6:	2002      	movs	r0, #2
 801a2e8:	f7fe f818 	bl	801831c <appendbuf>
 801a2ec:	47a8      	blx	r5
 801a2ee:	e10a      	b.n	801a506 <report_realtime_status+0x3e2>
    switch (gc_state.tool_change && state == STATE_CYCLE ? STATE_TOOL_CHANGE : state) {
 801a2f0:	f1b8 0f40 	cmp.w	r8, #64	@ 0x40
 801a2f4:	f47f af71 	bne.w	801a1da <report_realtime_status+0xb6>
            hal.stream.write_all(appendbuf(2, "Door:", uitoa((uint32_t)sys.parking_state)));
 801a2f8:	4b32      	ldr	r3, [pc, #200]	@ (801a3c4 <report_realtime_status+0x2a0>)
 801a2fa:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801a2fe:	4b3c      	ldr	r3, [pc, #240]	@ (801a3f0 <report_realtime_status+0x2cc>)
 801a300:	f893 0034 	ldrb.w	r0, [r3, #52]	@ 0x34
 801a304:	f7fa ff3a 	bl	801517c <uitoa>
 801a308:	4602      	mov	r2, r0
 801a30a:	493a      	ldr	r1, [pc, #232]	@ (801a3f4 <report_realtime_status+0x2d0>)
 801a30c:	2002      	movs	r0, #2
 801a30e:	f7fe f805 	bl	801831c <appendbuf>
 801a312:	47a8      	blx	r5
            break;
 801a314:	e761      	b.n	801a1da <report_realtime_status+0xb6>
            hal.stream.write_all("Idle");
 801a316:	4b2b      	ldr	r3, [pc, #172]	@ (801a3c4 <report_realtime_status+0x2a0>)
 801a318:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a31c:	4836      	ldr	r0, [pc, #216]	@ (801a3f8 <report_realtime_status+0x2d4>)
 801a31e:	4798      	blx	r3
            break;
 801a320:	e75b      	b.n	801a1da <report_realtime_status+0xb6>
            hal.stream.write_all("Run");
 801a322:	4b28      	ldr	r3, [pc, #160]	@ (801a3c4 <report_realtime_status+0x2a0>)
 801a324:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a328:	4834      	ldr	r0, [pc, #208]	@ (801a3fc <report_realtime_status+0x2d8>)
 801a32a:	4798      	blx	r3
            if(sys.probing_state == Probing_Active && settings.status_report.run_substate)
 801a32c:	4b30      	ldr	r3, [pc, #192]	@ (801a3f0 <report_realtime_status+0x2cc>)
 801a32e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a332:	b2db      	uxtb	r3, r3
 801a334:	2b01      	cmp	r3, #1
 801a336:	d011      	beq.n	801a35c <report_realtime_status+0x238>
            else if (probing)
 801a338:	4b31      	ldr	r3, [pc, #196]	@ (801a400 <report_realtime_status+0x2dc>)
 801a33a:	781b      	ldrb	r3, [r3, #0]
 801a33c:	b11b      	cbz	r3, 801a346 <report_realtime_status+0x222>
                probing = probe_state.triggered;
 801a33e:	f3c9 0200 	ubfx	r2, r9, #0, #1
 801a342:	4b2f      	ldr	r3, [pc, #188]	@ (801a400 <report_realtime_status+0x2dc>)
 801a344:	701a      	strb	r2, [r3, #0]
            if(sys.flags.feed_hold_pending)
 801a346:	4b2a      	ldr	r3, [pc, #168]	@ (801a3f0 <report_realtime_status+0x2cc>)
 801a348:	7d9b      	ldrb	r3, [r3, #22]
 801a34a:	f013 0f20 	tst.w	r3, #32
 801a34e:	d00f      	beq.n	801a370 <report_realtime_status+0x24c>
                hal.stream.write_all(":1");
 801a350:	4b1c      	ldr	r3, [pc, #112]	@ (801a3c4 <report_realtime_status+0x2a0>)
 801a352:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a356:	482b      	ldr	r0, [pc, #172]	@ (801a404 <report_realtime_status+0x2e0>)
 801a358:	4798      	blx	r3
 801a35a:	e73e      	b.n	801a1da <report_realtime_status+0xb6>
            if(sys.probing_state == Probing_Active && settings.status_report.run_substate)
 801a35c:	4b1d      	ldr	r3, [pc, #116]	@ (801a3d4 <report_realtime_status+0x2b0>)
 801a35e:	f893 30fd 	ldrb.w	r3, [r3, #253]	@ 0xfd
 801a362:	f013 0f08 	tst.w	r3, #8
 801a366:	d0e7      	beq.n	801a338 <report_realtime_status+0x214>
                probing = true;
 801a368:	4b25      	ldr	r3, [pc, #148]	@ (801a400 <report_realtime_status+0x2dc>)
 801a36a:	2201      	movs	r2, #1
 801a36c:	701a      	strb	r2, [r3, #0]
 801a36e:	e7ea      	b.n	801a346 <report_realtime_status+0x222>
            else if(probing)
 801a370:	4b23      	ldr	r3, [pc, #140]	@ (801a400 <report_realtime_status+0x2dc>)
 801a372:	781b      	ldrb	r3, [r3, #0]
 801a374:	2b00      	cmp	r3, #0
 801a376:	f43f af30 	beq.w	801a1da <report_realtime_status+0xb6>
                hal.stream.write_all(":2");
 801a37a:	4b12      	ldr	r3, [pc, #72]	@ (801a3c4 <report_realtime_status+0x2a0>)
 801a37c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a380:	4821      	ldr	r0, [pc, #132]	@ (801a408 <report_realtime_status+0x2e4>)
 801a382:	4798      	blx	r3
 801a384:	e729      	b.n	801a1da <report_realtime_status+0xb6>
            hal.stream.write_all(appendbuf(2, "Hold:", uitoa((uint32_t)(sys.holding_state - 1))));
 801a386:	4b0f      	ldr	r3, [pc, #60]	@ (801a3c4 <report_realtime_status+0x2a0>)
 801a388:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801a38c:	4b18      	ldr	r3, [pc, #96]	@ (801a3f0 <report_realtime_status+0x2cc>)
 801a38e:	f893 0035 	ldrb.w	r0, [r3, #53]	@ 0x35
 801a392:	3801      	subs	r0, #1
 801a394:	f7fa fef2 	bl	801517c <uitoa>
 801a398:	4602      	mov	r2, r0
 801a39a:	491c      	ldr	r1, [pc, #112]	@ (801a40c <report_realtime_status+0x2e8>)
 801a39c:	2002      	movs	r0, #2
 801a39e:	f7fd ffbd 	bl	801831c <appendbuf>
 801a3a2:	47a8      	blx	r5
            break;
 801a3a4:	e719      	b.n	801a1da <report_realtime_status+0xb6>
            hal.stream.write_all("Jog");
 801a3a6:	4b07      	ldr	r3, [pc, #28]	@ (801a3c4 <report_realtime_status+0x2a0>)
 801a3a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a3ac:	4818      	ldr	r0, [pc, #96]	@ (801a410 <report_realtime_status+0x2ec>)
 801a3ae:	4798      	blx	r3
            break;
 801a3b0:	e713      	b.n	801a1da <report_realtime_status+0xb6>
            hal.stream.write_all("Home");
 801a3b2:	4b04      	ldr	r3, [pc, #16]	@ (801a3c4 <report_realtime_status+0x2a0>)
 801a3b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a3b8:	4816      	ldr	r0, [pc, #88]	@ (801a414 <report_realtime_status+0x2f0>)
 801a3ba:	4798      	blx	r3
            break;
 801a3bc:	e70d      	b.n	801a1da <report_realtime_status+0xb6>
 801a3be:	bf00      	nop
 801a3c0:	20001514 	.word	0x20001514
 801a3c4:	200011ac 	.word	0x200011ac
 801a3c8:	0802b928 	.word	0x0802b928
 801a3cc:	20000ee4 	.word	0x20000ee4
 801a3d0:	0802b978 	.word	0x0802b978
 801a3d4:	20001bc4 	.word	0x20001bc4
 801a3d8:	0802b8ec 	.word	0x0802b8ec
 801a3dc:	20001a90 	.word	0x20001a90
 801a3e0:	0802b980 	.word	0x0802b980
 801a3e4:	0802b7dc 	.word	0x0802b7dc
 801a3e8:	20001a88 	.word	0x20001a88
 801a3ec:	0802b990 	.word	0x0802b990
 801a3f0:	2000148c 	.word	0x2000148c
 801a3f4:	0802b968 	.word	0x0802b968
 801a3f8:	0802b92c 	.word	0x0802b92c
 801a3fc:	0802b934 	.word	0x0802b934
 801a400:	20001a84 	.word	0x20001a84
 801a404:	0802b90c 	.word	0x0802b90c
 801a408:	0802b938 	.word	0x0802b938
 801a40c:	0802b93c 	.word	0x0802b93c
 801a410:	0802b944 	.word	0x0802b944
 801a414:	0802b948 	.word	0x0802b948
            if((report.all || settings.status_report.alarm_substate) && sys.alarm)
 801a418:	2c00      	cmp	r4, #0
 801a41a:	db05      	blt.n	801a428 <report_realtime_status+0x304>
 801a41c:	4ba0      	ldr	r3, [pc, #640]	@ (801a6a0 <report_realtime_status+0x57c>)
 801a41e:	f893 30fd 	ldrb.w	r3, [r3, #253]	@ 0xfd
 801a422:	f013 0f04 	tst.w	r3, #4
 801a426:	d003      	beq.n	801a430 <report_realtime_status+0x30c>
 801a428:	4b9e      	ldr	r3, [pc, #632]	@ (801a6a4 <report_realtime_status+0x580>)
 801a42a:	f893 007c 	ldrb.w	r0, [r3, #124]	@ 0x7c
 801a42e:	b928      	cbnz	r0, 801a43c <report_realtime_status+0x318>
                hal.stream.write_all("Alarm");
 801a430:	4b9d      	ldr	r3, [pc, #628]	@ (801a6a8 <report_realtime_status+0x584>)
 801a432:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a436:	489d      	ldr	r0, [pc, #628]	@ (801a6ac <report_realtime_status+0x588>)
 801a438:	4798      	blx	r3
 801a43a:	e6ce      	b.n	801a1da <report_realtime_status+0xb6>
                hal.stream.write_all(appendbuf(2, "Alarm:", uitoa((uint32_t)sys.alarm)));
 801a43c:	4b9a      	ldr	r3, [pc, #616]	@ (801a6a8 <report_realtime_status+0x584>)
 801a43e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801a442:	f7fa fe9b 	bl	801517c <uitoa>
 801a446:	4602      	mov	r2, r0
 801a448:	4999      	ldr	r1, [pc, #612]	@ (801a6b0 <report_realtime_status+0x58c>)
 801a44a:	2002      	movs	r0, #2
 801a44c:	f7fd ff66 	bl	801831c <appendbuf>
 801a450:	47a8      	blx	r5
 801a452:	e6c2      	b.n	801a1da <report_realtime_status+0xb6>
            hal.stream.write_all("Check");
 801a454:	4b94      	ldr	r3, [pc, #592]	@ (801a6a8 <report_realtime_status+0x584>)
 801a456:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a45a:	4896      	ldr	r0, [pc, #600]	@ (801a6b4 <report_realtime_status+0x590>)
 801a45c:	4798      	blx	r3
            break;
 801a45e:	e6bc      	b.n	801a1da <report_realtime_status+0xb6>
            hal.stream.write_all("Sleep");
 801a460:	4b91      	ldr	r3, [pc, #580]	@ (801a6a8 <report_realtime_status+0x584>)
 801a462:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a466:	4894      	ldr	r0, [pc, #592]	@ (801a6b8 <report_realtime_status+0x594>)
 801a468:	4798      	blx	r3
            break;
 801a46a:	e6b6      	b.n	801a1da <report_realtime_status+0xb6>
        for(idx = 0; idx < N_AXIS; idx++) {
 801a46c:	3501      	adds	r5, #1
 801a46e:	2d02      	cmp	r5, #2
 801a470:	f63f aebe 	bhi.w	801a1f0 <report_realtime_status+0xcc>
            wco[idx] = gc_get_offset(idx, true);
 801a474:	2101      	movs	r1, #1
 801a476:	4628      	mov	r0, r5
 801a478:	f7f2 fb42 	bl	800cb00 <gc_get_offset>
 801a47c:	ab0a      	add	r3, sp, #40	@ 0x28
 801a47e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801a482:	ed03 0a07 	vstr	s0, [r3, #-28]	@ 0xffffffe4
            if(!settings.status_report.machine_position)
 801a486:	4b86      	ldr	r3, [pc, #536]	@ (801a6a0 <report_realtime_status+0x57c>)
 801a488:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801a48c:	f013 0f01 	tst.w	r3, #1
 801a490:	d1ec      	bne.n	801a46c <report_realtime_status+0x348>
                print_position[idx] -= wco[idx];
 801a492:	ab0a      	add	r3, sp, #40	@ 0x28
 801a494:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801a498:	ed53 7a04 	vldr	s15, [r3, #-16]
 801a49c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a4a0:	ed43 7a04 	vstr	s15, [r3, #-16]
 801a4a4:	e7e2      	b.n	801a46c <report_realtime_status+0x348>
 801a4a6:	2500      	movs	r5, #0
 801a4a8:	e7e1      	b.n	801a46e <report_realtime_status+0x34a>
 801a4aa:	2500      	movs	r5, #0
 801a4ac:	e7df      	b.n	801a46e <report_realtime_status+0x34a>
    hal.stream.write_all(settings.status_report.machine_position ? "|MPos:" : "|WPos:");
 801a4ae:	4883      	ldr	r0, [pc, #524]	@ (801a6bc <report_realtime_status+0x598>)
 801a4b0:	e6a9      	b.n	801a206 <report_realtime_status+0xe2>
        plan_block_t *cur_block = plan_get_current_block();
 801a4b2:	f7fb fdf3 	bl	801609c <plan_get_current_block>
        if (cur_block != NULL && cur_block->line_number > 0)
 801a4b6:	2800      	cmp	r0, #0
 801a4b8:	f43f aed3 	beq.w	801a262 <report_realtime_status+0x13e>
 801a4bc:	6980      	ldr	r0, [r0, #24]
 801a4be:	2800      	cmp	r0, #0
 801a4c0:	f77f aecf 	ble.w	801a262 <report_realtime_status+0x13e>
            hal.stream.write_all(appendbuf(2, "|Ln:", uitoa((uint32_t)cur_block->line_number)));
 801a4c4:	4b78      	ldr	r3, [pc, #480]	@ (801a6a8 <report_realtime_status+0x584>)
 801a4c6:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801a4ca:	f7fa fe57 	bl	801517c <uitoa>
 801a4ce:	4602      	mov	r2, r0
 801a4d0:	497b      	ldr	r1, [pc, #492]	@ (801a6c0 <report_realtime_status+0x59c>)
 801a4d2:	2002      	movs	r0, #2
 801a4d4:	f7fd ff22 	bl	801831c <appendbuf>
 801a4d8:	47a8      	blx	r5
 801a4da:	e6c2      	b.n	801a262 <report_realtime_status+0x13e>
            hal.stream.write_all(appendbuf(2, ",", uitoa(spindle_0_state.on ? lroundf(spindle_0->param->rpm_overridden) : 0)));
 801a4dc:	6873      	ldr	r3, [r6, #4]
 801a4de:	ed93 0a01 	vldr	s0, [r3, #4]
 801a4e2:	f00c fe0b 	bl	80270fc <lroundf>
 801a4e6:	e6e5      	b.n	801a2b4 <report_realtime_status+0x190>
            hal.stream.write_all(appendbuf(2, "|F:", get_rate_value(st_get_realtime_rate())));
 801a4e8:	4b6f      	ldr	r3, [pc, #444]	@ (801a6a8 <report_realtime_status+0x584>)
 801a4ea:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801a4ee:	4b75      	ldr	r3, [pc, #468]	@ (801a6c4 <report_realtime_status+0x5a0>)
 801a4f0:	f8d3 a000 	ldr.w	sl, [r3]
 801a4f4:	f005 fd5a 	bl	801ffac <st_get_realtime_rate>
 801a4f8:	47d0      	blx	sl
 801a4fa:	4602      	mov	r2, r0
 801a4fc:	4972      	ldr	r1, [pc, #456]	@ (801a6c8 <report_realtime_status+0x5a4>)
 801a4fe:	2002      	movs	r0, #2
 801a500:	f7fd ff0c 	bl	801831c <appendbuf>
 801a504:	47a8      	blx	r5
    if(settings.status_report.pin_state) {
 801a506:	4b66      	ldr	r3, [pc, #408]	@ (801a6a0 <report_realtime_status+0x57c>)
 801a508:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801a50c:	f013 0f10 	tst.w	r3, #16
 801a510:	d045      	beq.n	801a59e <report_realtime_status+0x47a>
        axes_signals_t lim_pin_state = limit_signals_merge(hal.limits.get_state());
 801a512:	4d65      	ldr	r5, [pc, #404]	@ (801a6a8 <report_realtime_status+0x584>)
 801a514:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 801a516:	4798      	blx	r3
 801a518:	9009      	str	r0, [sp, #36]	@ 0x24
 801a51a:	f7f8 fa8d 	bl	8012a38 <limit_signals_merge>
 801a51e:	4682      	mov	sl, r0
        control_signals_t ctrl_pin_state = hal.control.get_state();
 801a520:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801a522:	4798      	blx	r3
 801a524:	4605      	mov	r5, r0
        ctrl_pin_state.probe_triggered = probe_state.triggered;
 801a526:	f369 358e 	bfi	r5, r9, #14, #1
        ctrl_pin_state.probe_disconnected = !probe_state.connected;
 801a52a:	f3c9 0946 	ubfx	r9, r9, #1, #7
 801a52e:	f089 0901 	eor.w	r9, r9, #1
 801a532:	f369 15c7 	bfi	r5, r9, #7, #1
        ctrl_pin_state.cycle_start |= sys.report.cycle_start;
 801a536:	f3c5 0380 	ubfx	r3, r5, #2, #1
 801a53a:	495a      	ldr	r1, [pc, #360]	@ (801a6a4 <report_realtime_status+0x580>)
 801a53c:	f891 2033 	ldrb.w	r2, [r1, #51]	@ 0x33
 801a540:	f3c2 1280 	ubfx	r2, r2, #6, #1
 801a544:	4313      	orrs	r3, r2
 801a546:	f363 0582 	bfi	r5, r3, #2, #1
        if(sys.flags.value & sys_switches.value) {
 801a54a:	8acb      	ldrh	r3, [r1, #22]
 801a54c:	f013 0fd0 	tst.w	r3, #208	@ 0xd0
 801a550:	d01e      	beq.n	801a590 <report_realtime_status+0x46c>
            if(!hal.signals_cap.stop_disable)
 801a552:	4b55      	ldr	r3, [pc, #340]	@ (801a6a8 <report_realtime_status+0x584>)
 801a554:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801a558:	f013 0f20 	tst.w	r3, #32
 801a55c:	d104      	bne.n	801a568 <report_realtime_status+0x444>
                ctrl_pin_state.stop_disable = sys.flags.optional_stop_disable;
 801a55e:	7d8a      	ldrb	r2, [r1, #22]
 801a560:	f3c2 1280 	ubfx	r2, r2, #6, #1
 801a564:	f362 1545 	bfi	r5, r2, #5, #1
            if(!hal.signals_cap.block_delete)
 801a568:	f013 0f10 	tst.w	r3, #16
 801a56c:	d105      	bne.n	801a57a <report_realtime_status+0x456>
                ctrl_pin_state.block_delete = sys.flags.block_delete_enabled;
 801a56e:	4b4d      	ldr	r3, [pc, #308]	@ (801a6a4 <report_realtime_status+0x580>)
 801a570:	7d9b      	ldrb	r3, [r3, #22]
 801a572:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801a576:	f363 1504 	bfi	r5, r3, #4, #1
            if(!hal.signals_cap.single_block)
 801a57a:	4b4b      	ldr	r3, [pc, #300]	@ (801a6a8 <report_realtime_status+0x584>)
 801a57c:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
 801a580:	f013 0f08 	tst.w	r3, #8
 801a584:	d104      	bne.n	801a590 <report_realtime_status+0x46c>
                ctrl_pin_state.single_block = sys.flags.single_block;
 801a586:	4b47      	ldr	r3, [pc, #284]	@ (801a6a4 <report_realtime_status+0x580>)
 801a588:	7d9b      	ldrb	r3, [r3, #22]
 801a58a:	09db      	lsrs	r3, r3, #7
 801a58c:	f363 25cb 	bfi	r5, r3, #11, #1
        if(lim_pin_state.value | ctrl_pin_state.value) {
 801a590:	fa5f f38a 	uxtb.w	r3, sl
 801a594:	fa1f f985 	uxth.w	r9, r5
 801a598:	ea53 0209 	orrs.w	r2, r3, r9
 801a59c:	d118      	bne.n	801a5d0 <report_realtime_status+0x4ac>
    if(settings.status_report.work_coord_offset) {
 801a59e:	4b40      	ldr	r3, [pc, #256]	@ (801a6a0 <report_realtime_status+0x57c>)
 801a5a0:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801a5a4:	f013 0f20 	tst.w	r3, #32
 801a5a8:	d03b      	beq.n	801a622 <report_realtime_status+0x4fe>
        if(wco_counter > 0 && !report.wco) {
 801a5aa:	4a48      	ldr	r2, [pc, #288]	@ (801a6cc <report_realtime_status+0x5a8>)
 801a5ac:	7812      	ldrb	r2, [r2, #0]
 801a5ae:	b37a      	cbz	r2, 801a610 <report_realtime_status+0x4ec>
 801a5b0:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801a5b4:	d12c      	bne.n	801a610 <report_realtime_status+0x4ec>
            if(wco_counter > (REPORT_WCO_REFRESH_IDLE_COUNT - 1) && state == STATE_IDLE)
 801a5b6:	2a09      	cmp	r2, #9
 801a5b8:	d905      	bls.n	801a5c6 <report_realtime_status+0x4a2>
 801a5ba:	f1b8 0f00 	cmp.w	r8, #0
 801a5be:	d102      	bne.n	801a5c6 <report_realtime_status+0x4a2>
                wco_counter = REPORT_WCO_REFRESH_IDLE_COUNT - 1;
 801a5c0:	4a42      	ldr	r2, [pc, #264]	@ (801a6cc <report_realtime_status+0x5a8>)
 801a5c2:	2109      	movs	r1, #9
 801a5c4:	7011      	strb	r1, [r2, #0]
            wco_counter--;
 801a5c6:	4941      	ldr	r1, [pc, #260]	@ (801a6cc <report_realtime_status+0x5a8>)
 801a5c8:	780a      	ldrb	r2, [r1, #0]
 801a5ca:	3a01      	subs	r2, #1
 801a5cc:	700a      	strb	r2, [r1, #0]
 801a5ce:	e02a      	b.n	801a626 <report_realtime_status+0x502>
            strcpy(buf, "|Pn:");
 801a5d0:	4a3f      	ldr	r2, [pc, #252]	@ (801a6d0 <report_realtime_status+0x5ac>)
 801a5d2:	4940      	ldr	r1, [pc, #256]	@ (801a6d4 <report_realtime_status+0x5b0>)
 801a5d4:	c903      	ldmia	r1, {r0, r1}
 801a5d6:	6010      	str	r0, [r2, #0]
 801a5d8:	7111      	strb	r1, [r2, #4]
            if(lim_pin_state.value && !ctrl_pin_state.limits_override)
 801a5da:	b14b      	cbz	r3, 801a5f0 <report_realtime_status+0x4cc>
 801a5dc:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 801a5e0:	d001      	beq.n	801a5e6 <report_realtime_status+0x4c2>
            char *append = &buf[4];
 801a5e2:	483d      	ldr	r0, [pc, #244]	@ (801a6d8 <report_realtime_status+0x5b4>)
 801a5e4:	e005      	b.n	801a5f2 <report_realtime_status+0x4ce>
                append = axis_signals_tostring(append, lim_pin_state);
 801a5e6:	4651      	mov	r1, sl
 801a5e8:	1d10      	adds	r0, r2, #4
 801a5ea:	f7fd fab1 	bl	8017b50 <axis_signals_tostring>
 801a5ee:	e000      	b.n	801a5f2 <report_realtime_status+0x4ce>
            char *append = &buf[4];
 801a5f0:	4839      	ldr	r0, [pc, #228]	@ (801a6d8 <report_realtime_status+0x5b4>)
            if(ctrl_pin_state.value)
 801a5f2:	f1b9 0f00 	cmp.w	r9, #0
 801a5f6:	d107      	bne.n	801a608 <report_realtime_status+0x4e4>
            *append = '\0';
 801a5f8:	2300      	movs	r3, #0
 801a5fa:	7003      	strb	r3, [r0, #0]
            hal.stream.write_all(buf);
 801a5fc:	4b2a      	ldr	r3, [pc, #168]	@ (801a6a8 <report_realtime_status+0x584>)
 801a5fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a602:	4833      	ldr	r0, [pc, #204]	@ (801a6d0 <report_realtime_status+0x5ac>)
 801a604:	4798      	blx	r3
 801a606:	e7ca      	b.n	801a59e <report_realtime_status+0x47a>
                append = control_signals_tostring(append, ctrl_pin_state);
 801a608:	4629      	mov	r1, r5
 801a60a:	f7fd fab9 	bl	8017b80 <control_signals_tostring>
 801a60e:	e7f3      	b.n	801a5f8 <report_realtime_status+0x4d4>
            wco_counter = state & (STATE_HOMING|STATE_CYCLE|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 801a610:	f018 0f7c 	tst.w	r8, #124	@ 0x7c
 801a614:	d003      	beq.n	801a61e <report_realtime_status+0x4fa>
 801a616:	211d      	movs	r1, #29
 801a618:	4a2c      	ldr	r2, [pc, #176]	@ (801a6cc <report_realtime_status+0x5a8>)
 801a61a:	7011      	strb	r1, [r2, #0]
 801a61c:	e003      	b.n	801a626 <report_realtime_status+0x502>
 801a61e:	2109      	movs	r1, #9
 801a620:	e7fa      	b.n	801a618 <report_realtime_status+0x4f4>
        report.wco = Off;
 801a622:	f36f 2408 	bfc	r4, #8, #1
    if(settings.status_report.overrides) {
 801a626:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801a62a:	d059      	beq.n	801a6e0 <report_realtime_status+0x5bc>
        if (override_counter > 0 && !report.overrides)
 801a62c:	4b2b      	ldr	r3, [pc, #172]	@ (801a6dc <report_realtime_status+0x5b8>)
 801a62e:	781b      	ldrb	r3, [r3, #0]
 801a630:	b133      	cbz	r3, 801a640 <report_realtime_status+0x51c>
 801a632:	f014 0f40 	tst.w	r4, #64	@ 0x40
 801a636:	d103      	bne.n	801a640 <report_realtime_status+0x51c>
            override_counter--;
 801a638:	3b01      	subs	r3, #1
 801a63a:	4a28      	ldr	r2, [pc, #160]	@ (801a6dc <report_realtime_status+0x5b8>)
 801a63c:	7013      	strb	r3, [r2, #0]
 801a63e:	e051      	b.n	801a6e4 <report_realtime_status+0x5c0>
        else if((report.overrides = !report.wco)) {
 801a640:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801a644:	f083 0301 	eor.w	r3, r3, #1
 801a648:	f003 0301 	and.w	r3, r3, #1
 801a64c:	f363 1486 	bfi	r4, r3, #6, #1
 801a650:	2b00      	cmp	r3, #0
 801a652:	d047      	beq.n	801a6e4 <report_realtime_status+0x5c0>
            report.spindle = report.spindle || spindle_0_state.on;
 801a654:	f014 0f10 	tst.w	r4, #16
 801a658:	d104      	bne.n	801a664 <report_realtime_status+0x540>
 801a65a:	f017 0f01 	tst.w	r7, #1
 801a65e:	d00e      	beq.n	801a67e <report_realtime_status+0x55a>
 801a660:	2301      	movs	r3, #1
 801a662:	e000      	b.n	801a666 <report_realtime_status+0x542>
 801a664:	2301      	movs	r3, #1
 801a666:	f363 1404 	bfi	r4, r3, #4, #1
            report.coolant = report.coolant || hal.coolant.get_state().value != 0;
 801a66a:	f014 0f20 	tst.w	r4, #32
 801a66e:	d108      	bne.n	801a682 <report_realtime_status+0x55e>
 801a670:	4b0d      	ldr	r3, [pc, #52]	@ (801a6a8 <report_realtime_status+0x584>)
 801a672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a674:	4798      	blx	r3
 801a676:	b2c0      	uxtb	r0, r0
 801a678:	b968      	cbnz	r0, 801a696 <report_realtime_status+0x572>
 801a67a:	2300      	movs	r3, #0
 801a67c:	e002      	b.n	801a684 <report_realtime_status+0x560>
            report.spindle = report.spindle || spindle_0_state.on;
 801a67e:	2300      	movs	r3, #0
 801a680:	e7f1      	b.n	801a666 <report_realtime_status+0x542>
            report.coolant = report.coolant || hal.coolant.get_state().value != 0;
 801a682:	2301      	movs	r3, #1
 801a684:	f363 1445 	bfi	r4, r3, #5, #1
            override_counter = state & (STATE_HOMING|STATE_CYCLE|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 801a688:	f018 0f7c 	tst.w	r8, #124	@ 0x7c
 801a68c:	d005      	beq.n	801a69a <report_realtime_status+0x576>
 801a68e:	2213      	movs	r2, #19
 801a690:	4b12      	ldr	r3, [pc, #72]	@ (801a6dc <report_realtime_status+0x5b8>)
 801a692:	701a      	strb	r2, [r3, #0]
 801a694:	e026      	b.n	801a6e4 <report_realtime_status+0x5c0>
            report.coolant = report.coolant || hal.coolant.get_state().value != 0;
 801a696:	2301      	movs	r3, #1
 801a698:	e7f4      	b.n	801a684 <report_realtime_status+0x560>
            override_counter = state & (STATE_HOMING|STATE_CYCLE|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 801a69a:	2209      	movs	r2, #9
 801a69c:	e7f8      	b.n	801a690 <report_realtime_status+0x56c>
 801a69e:	bf00      	nop
 801a6a0:	20001bc4 	.word	0x20001bc4
 801a6a4:	2000148c 	.word	0x2000148c
 801a6a8:	200011ac 	.word	0x200011ac
 801a6ac:	0802b958 	.word	0x0802b958
 801a6b0:	0802b950 	.word	0x0802b950
 801a6b4:	0802b960 	.word	0x0802b960
 801a6b8:	0802b970 	.word	0x0802b970
 801a6bc:	0802b8f4 	.word	0x0802b8f4
 801a6c0:	0802b988 	.word	0x0802b988
 801a6c4:	20001a88 	.word	0x20001a88
 801a6c8:	0802b998 	.word	0x0802b998
 801a6cc:	20001a85 	.word	0x20001a85
 801a6d0:	20001a94 	.word	0x20001a94
 801a6d4:	0802b99c 	.word	0x0802b99c
 801a6d8:	20001a98 	.word	0x20001a98
 801a6dc:	20001a86 	.word	0x20001a86
        report.overrides = Off;
 801a6e0:	f36f 1486 	bfc	r4, #6, #1
    if(report.value || gc_state.tool_change) {
 801a6e4:	9400      	str	r4, [sp, #0]
 801a6e6:	b92c      	cbnz	r4, 801a6f4 <report_realtime_status+0x5d0>
 801a6e8:	4b9e      	ldr	r3, [pc, #632]	@ (801a964 <report_realtime_status+0x840>)
 801a6ea:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	f000 80e2 	beq.w	801a8b8 <report_realtime_status+0x794>
        if(report.wco) {
 801a6f4:	f3c4 2907 	ubfx	r9, r4, #8, #8
 801a6f8:	46c8      	mov	r8, r9
 801a6fa:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801a6fe:	d014      	beq.n	801a72a <report_realtime_status+0x606>
            if(report.force_wco || !sys.flags.synchronizing) {
 801a700:	f014 5f00 	tst.w	r4, #536870912	@ 0x20000000
 801a704:	d105      	bne.n	801a712 <report_realtime_status+0x5ee>
 801a706:	4b98      	ldr	r3, [pc, #608]	@ (801a968 <report_realtime_status+0x844>)
 801a708:	7ddb      	ldrb	r3, [r3, #23]
 801a70a:	f013 0f04 	tst.w	r3, #4
 801a70e:	f040 8124 	bne.w	801a95a <report_realtime_status+0x836>
                hal.stream.write_all("|WCO:");
 801a712:	4d96      	ldr	r5, [pc, #600]	@ (801a96c <report_realtime_status+0x848>)
 801a714:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 801a718:	4895      	ldr	r0, [pc, #596]	@ (801a970 <report_realtime_status+0x84c>)
 801a71a:	4798      	blx	r3
                hal.stream.write_all(get_axis_values(wco));
 801a71c:	f8d5 50b8 	ldr.w	r5, [r5, #184]	@ 0xb8
 801a720:	4b94      	ldr	r3, [pc, #592]	@ (801a974 <report_realtime_status+0x850>)
 801a722:	681b      	ldr	r3, [r3, #0]
 801a724:	a803      	add	r0, sp, #12
 801a726:	4798      	blx	r3
 801a728:	47a8      	blx	r5
        if(report.gwco) {
 801a72a:	f018 0f02 	tst.w	r8, #2
 801a72e:	d00b      	beq.n	801a748 <report_realtime_status+0x624>
            hal.stream.write_all("|WCS:G");
 801a730:	4d8e      	ldr	r5, [pc, #568]	@ (801a96c <report_realtime_status+0x848>)
 801a732:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 801a736:	4890      	ldr	r0, [pc, #576]	@ (801a978 <report_realtime_status+0x854>)
 801a738:	4798      	blx	r3
            hal.stream.write_all(map_coord_system(gc_state.modal.coord_system.id));
 801a73a:	f8d5 50b8 	ldr.w	r5, [r5, #184]	@ 0xb8
 801a73e:	4b89      	ldr	r3, [pc, #548]	@ (801a964 <report_realtime_status+0x840>)
 801a740:	7d18      	ldrb	r0, [r3, #20]
 801a742:	f7fd fd99 	bl	8018278 <map_coord_system>
 801a746:	47a8      	blx	r5
        if(report.overrides) {
 801a748:	b2e5      	uxtb	r5, r4
 801a74a:	f014 0f40 	tst.w	r4, #64	@ 0x40
 801a74e:	f040 8133 	bne.w	801a9b8 <report_realtime_status+0x894>
        if(report.spindle || report.coolant || report.tool || gc_state.tool_change) {
 801a752:	f015 0fb0 	tst.w	r5, #176	@ 0xb0
 801a756:	d104      	bne.n	801a762 <report_realtime_status+0x63e>
 801a758:	4b82      	ldr	r3, [pc, #520]	@ (801a964 <report_realtime_status+0x840>)
 801a75a:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d03c      	beq.n	801a7dc <report_realtime_status+0x6b8>
            coolant_state_t cl_state = hal.coolant.get_state();
 801a762:	4b82      	ldr	r3, [pc, #520]	@ (801a96c <report_realtime_status+0x848>)
 801a764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a766:	4798      	blx	r3
            strcpy(buf, "|A:");
 801a768:	4b84      	ldr	r3, [pc, #528]	@ (801a97c <report_realtime_status+0x858>)
 801a76a:	4a85      	ldr	r2, [pc, #532]	@ (801a980 <report_realtime_status+0x85c>)
 801a76c:	601a      	str	r2, [r3, #0]
            if (spindle_0_state.on)
 801a76e:	b2fa      	uxtb	r2, r7
 801a770:	f017 0f01 	tst.w	r7, #1
 801a774:	f000 8151 	beq.w	801aa1a <report_realtime_status+0x8f6>
                *append++ = spindle_0_state.ccw ? 'C' : 'S';
 801a778:	f012 0f02 	tst.w	r2, #2
 801a77c:	f000 814b 	beq.w	801aa16 <report_realtime_status+0x8f2>
 801a780:	2143      	movs	r1, #67	@ 0x43
 801a782:	4b7e      	ldr	r3, [pc, #504]	@ (801a97c <report_realtime_status+0x858>)
 801a784:	70d9      	strb	r1, [r3, #3]
 801a786:	3304      	adds	r3, #4
            if(spindle_0_state.encoder_error && hal.driver_cap.spindle_sync)
 801a788:	f012 0f20 	tst.w	r2, #32
 801a78c:	d008      	beq.n	801a7a0 <report_realtime_status+0x67c>
 801a78e:	4a77      	ldr	r2, [pc, #476]	@ (801a96c <report_realtime_status+0x848>)
 801a790:	f892 21d9 	ldrb.w	r2, [r2, #473]	@ 0x1d9
 801a794:	f012 0f01 	tst.w	r2, #1
 801a798:	d002      	beq.n	801a7a0 <report_realtime_status+0x67c>
                *append++ = 'E';
 801a79a:	2245      	movs	r2, #69	@ 0x45
 801a79c:	f803 2b01 	strb.w	r2, [r3], #1
            if (cl_state.flood)
 801a7a0:	b2c2      	uxtb	r2, r0
 801a7a2:	f010 0f01 	tst.w	r0, #1
 801a7a6:	d002      	beq.n	801a7ae <report_realtime_status+0x68a>
                *append++ = 'F';
 801a7a8:	2146      	movs	r1, #70	@ 0x46
 801a7aa:	f803 1b01 	strb.w	r1, [r3], #1
            if (cl_state.mist)
 801a7ae:	f012 0f02 	tst.w	r2, #2
 801a7b2:	d002      	beq.n	801a7ba <report_realtime_status+0x696>
                *append++ = 'M';
 801a7b4:	224d      	movs	r2, #77	@ 0x4d
 801a7b6:	f803 2b01 	strb.w	r2, [r3], #1
            if(gc_state.tool_change && !report.tool)
 801a7ba:	4a6a      	ldr	r2, [pc, #424]	@ (801a964 <report_realtime_status+0x840>)
 801a7bc:	f892 207f 	ldrb.w	r2, [r2, #127]	@ 0x7f
 801a7c0:	b12a      	cbz	r2, 801a7ce <report_realtime_status+0x6aa>
 801a7c2:	f015 0f80 	tst.w	r5, #128	@ 0x80
 801a7c6:	d102      	bne.n	801a7ce <report_realtime_status+0x6aa>
                *append++ = 'T';
 801a7c8:	2254      	movs	r2, #84	@ 0x54
 801a7ca:	f803 2b01 	strb.w	r2, [r3], #1
            *append = '\0';
 801a7ce:	2200      	movs	r2, #0
 801a7d0:	701a      	strb	r2, [r3, #0]
            hal.stream.write_all(buf);
 801a7d2:	4b66      	ldr	r3, [pc, #408]	@ (801a96c <report_realtime_status+0x848>)
 801a7d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a7d8:	4868      	ldr	r0, [pc, #416]	@ (801a97c <report_realtime_status+0x858>)
 801a7da:	4798      	blx	r3
        if(report.scaling) {
 801a7dc:	f015 0f02 	tst.w	r5, #2
 801a7e0:	f040 811d 	bne.w	801aa1e <report_realtime_status+0x8fa>
        if((report.all || report.mpg_mode) && settings.report_interval) {
 801a7e4:	4b67      	ldr	r3, [pc, #412]	@ (801a984 <report_realtime_status+0x860>)
 801a7e6:	9a00      	ldr	r2, [sp, #0]
 801a7e8:	421a      	tst	r2, r3
 801a7ea:	d013      	beq.n	801a814 <report_realtime_status+0x6f0>
 801a7ec:	4b66      	ldr	r3, [pc, #408]	@ (801a988 <report_realtime_status+0x864>)
 801a7ee:	8a9b      	ldrh	r3, [r3, #20]
 801a7f0:	b183      	cbz	r3, 801a814 <report_realtime_status+0x6f0>
            hal.stream.write_all(sys.flags.auto_reporting ? "|AR:" : "|AR");
 801a7f2:	4b5e      	ldr	r3, [pc, #376]	@ (801a96c <report_realtime_status+0x848>)
 801a7f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a7f8:	4a5b      	ldr	r2, [pc, #364]	@ (801a968 <report_realtime_status+0x844>)
 801a7fa:	7dd2      	ldrb	r2, [r2, #23]
 801a7fc:	f012 0f02 	tst.w	r2, #2
 801a800:	f000 811e 	beq.w	801aa40 <report_realtime_status+0x91c>
 801a804:	4861      	ldr	r0, [pc, #388]	@ (801a98c <report_realtime_status+0x868>)
 801a806:	4798      	blx	r3
            if(sys.flags.auto_reporting)
 801a808:	4b57      	ldr	r3, [pc, #348]	@ (801a968 <report_realtime_status+0x844>)
 801a80a:	7ddb      	ldrb	r3, [r3, #23]
 801a80c:	f013 0f02 	tst.w	r3, #2
 801a810:	f040 8118 	bne.w	801aa44 <report_realtime_status+0x920>
        if(report.mpg_mode)
 801a814:	f015 0f01 	tst.w	r5, #1
 801a818:	d00a      	beq.n	801a830 <report_realtime_status+0x70c>
            hal.stream.write_all(sys.mpg_mode ? "|MPG:1" : "|MPG:0");
 801a81a:	4b54      	ldr	r3, [pc, #336]	@ (801a96c <report_realtime_status+0x848>)
 801a81c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a820:	4a51      	ldr	r2, [pc, #324]	@ (801a968 <report_realtime_status+0x844>)
 801a822:	f892 207f 	ldrb.w	r2, [r2, #127]	@ 0x7f
 801a826:	2a00      	cmp	r2, #0
 801a828:	f000 8115 	beq.w	801aa56 <report_realtime_status+0x932>
 801a82c:	4858      	ldr	r0, [pc, #352]	@ (801a990 <report_realtime_status+0x86c>)
 801a82e:	4798      	blx	r3
        if(report.homed && (sys.homing.mask || settings.homing.flags.single_axis_commands || settings.homing.flags.manual)) {
 801a830:	f015 0f04 	tst.w	r5, #4
 801a834:	d020      	beq.n	801a878 <report_realtime_status+0x754>
 801a836:	4b4c      	ldr	r3, [pc, #304]	@ (801a968 <report_realtime_status+0x844>)
 801a838:	7e9b      	ldrb	r3, [r3, #26]
 801a83a:	b92b      	cbnz	r3, 801a848 <report_realtime_status+0x724>
 801a83c:	4a52      	ldr	r2, [pc, #328]	@ (801a988 <report_realtime_status+0x864>)
 801a83e:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 801a842:	f012 0f12 	tst.w	r2, #18
 801a846:	d017      	beq.n	801a878 <report_realtime_status+0x754>
            axes_signals_t homing = {sys.homing.mask ? sys.homing.mask : AXES_BITMASK};
 801a848:	b903      	cbnz	r3, 801a84c <report_realtime_status+0x728>
 801a84a:	2307      	movs	r3, #7
            hal.stream.write_all(appendbuf(2, "|H:", (homing.mask & sys.homed.mask) == homing.mask ? "1" : "0"));
 801a84c:	4a47      	ldr	r2, [pc, #284]	@ (801a96c <report_realtime_status+0x848>)
 801a84e:	f8d2 60b8 	ldr.w	r6, [r2, #184]	@ 0xb8
 801a852:	4a45      	ldr	r2, [pc, #276]	@ (801a968 <report_realtime_status+0x844>)
 801a854:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 801a858:	4393      	bics	r3, r2
 801a85a:	f000 80fe 	beq.w	801aa5a <report_realtime_status+0x936>
 801a85e:	4a4d      	ldr	r2, [pc, #308]	@ (801a994 <report_realtime_status+0x870>)
 801a860:	494d      	ldr	r1, [pc, #308]	@ (801a998 <report_realtime_status+0x874>)
 801a862:	2002      	movs	r0, #2
 801a864:	f7fd fd5a 	bl	801831c <appendbuf>
 801a868:	47b0      	blx	r6
            if(settings.homing.flags.single_axis_commands)
 801a86a:	4b47      	ldr	r3, [pc, #284]	@ (801a988 <report_realtime_status+0x864>)
 801a86c:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 801a870:	f013 0f02 	tst.w	r3, #2
 801a874:	f040 80f3 	bne.w	801aa5e <report_realtime_status+0x93a>
        if(report.xmode && settings.mode == Mode_Lathe)
 801a878:	f015 0f08 	tst.w	r5, #8
 801a87c:	d004      	beq.n	801a888 <report_realtime_status+0x764>
 801a87e:	4b42      	ldr	r3, [pc, #264]	@ (801a988 <report_realtime_status+0x864>)
 801a880:	7e1b      	ldrb	r3, [r3, #24]
 801a882:	2b02      	cmp	r3, #2
 801a884:	f000 80fa 	beq.w	801aa7c <report_realtime_status+0x958>
        if(report.tool)
 801a888:	f015 0f80 	tst.w	r5, #128	@ 0x80
 801a88c:	f040 8101 	bne.w	801aa92 <report_realtime_status+0x96e>
        if(report.tlo_reference)
 801a890:	f019 0f80 	tst.w	r9, #128	@ 0x80
 801a894:	f040 810d 	bne.w	801aab2 <report_realtime_status+0x98e>
        if(report.m66result && sys.var5399 > -2) { // M66 result
 801a898:	f018 0f08 	tst.w	r8, #8
 801a89c:	d00c      	beq.n	801a8b8 <report_realtime_status+0x794>
 801a89e:	4b32      	ldr	r3, [pc, #200]	@ (801a968 <report_realtime_status+0x844>)
 801a8a0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801a8a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a8a6:	db07      	blt.n	801a8b8 <report_realtime_status+0x794>
            if(sys.var5399 >= 0)
 801a8a8:	2800      	cmp	r0, #0
 801a8aa:	f280 8113 	bge.w	801aad4 <report_realtime_status+0x9b0>
                hal.stream.write_all("|In:-1");
 801a8ae:	4b2f      	ldr	r3, [pc, #188]	@ (801a96c <report_realtime_status+0x848>)
 801a8b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a8b4:	4839      	ldr	r0, [pc, #228]	@ (801a99c <report_realtime_status+0x878>)
 801a8b6:	4798      	blx	r3
    if(grbl.on_realtime_report)
 801a8b8:	4b39      	ldr	r3, [pc, #228]	@ (801a9a0 <report_realtime_status+0x87c>)
 801a8ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a8bc:	b12b      	cbz	r3, 801a8ca <report_realtime_status+0x7a6>
        grbl.on_realtime_report(hal.stream.write_all, sys.report);
 801a8be:	4a2a      	ldr	r2, [pc, #168]	@ (801a968 <report_realtime_status+0x844>)
 801a8c0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 801a8c2:	4a2a      	ldr	r2, [pc, #168]	@ (801a96c <report_realtime_status+0x848>)
 801a8c4:	f8d2 00b8 	ldr.w	r0, [r2, #184]	@ 0xb8
 801a8c8:	4798      	blx	r3
    if(report.all) {
 801a8ca:	2c00      	cmp	r4, #0
 801a8cc:	f2c0 810e 	blt.w	801aaec <report_realtime_status+0x9c8>
    if(settings.status_report.parser_state) {
 801a8d0:	4b2d      	ldr	r3, [pc, #180]	@ (801a988 <report_realtime_status+0x864>)
 801a8d2:	f893 30fd 	ldrb.w	r3, [r3, #253]	@ 0xfd
 801a8d6:	f013 0f02 	tst.w	r3, #2
 801a8da:	f000 8114 	beq.w	801ab06 <report_realtime_status+0x9e2>
        bool is_changed = feed_rate != gc_state.feed_rate || spindle_rpm != gc_state.spindle.rpm || tool_id != gc_state.tool->tool_id;
 801a8de:	4b21      	ldr	r3, [pc, #132]	@ (801a964 <report_realtime_status+0x840>)
 801a8e0:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 801a8e4:	4b2f      	ldr	r3, [pc, #188]	@ (801a9a4 <report_realtime_status+0x880>)
 801a8e6:	ed93 7a00 	vldr	s14, [r3]
 801a8ea:	eef4 7a47 	vcmp.f32	s15, s14
 801a8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8f2:	d113      	bne.n	801a91c <report_realtime_status+0x7f8>
 801a8f4:	4b1b      	ldr	r3, [pc, #108]	@ (801a964 <report_realtime_status+0x840>)
 801a8f6:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 801a8fa:	4b2b      	ldr	r3, [pc, #172]	@ (801a9a8 <report_realtime_status+0x884>)
 801a8fc:	ed93 7a00 	vldr	s14, [r3]
 801a900:	eef4 6a47 	vcmp.f32	s13, s14
 801a904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a908:	d108      	bne.n	801a91c <report_realtime_status+0x7f8>
 801a90a:	4b16      	ldr	r3, [pc, #88]	@ (801a964 <report_realtime_status+0x840>)
 801a90c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801a910:	691a      	ldr	r2, [r3, #16]
 801a912:	4b26      	ldr	r3, [pc, #152]	@ (801a9ac <report_realtime_status+0x888>)
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	429a      	cmp	r2, r3
 801a918:	f000 810a 	beq.w	801ab30 <report_realtime_status+0xa0c>
            feed_rate = gc_state.feed_rate;
 801a91c:	4b21      	ldr	r3, [pc, #132]	@ (801a9a4 <report_realtime_status+0x880>)
 801a91e:	edc3 7a00 	vstr	s15, [r3]
            tool_id = gc_state.tool->tool_id;
 801a922:	4b10      	ldr	r3, [pc, #64]	@ (801a964 <report_realtime_status+0x840>)
 801a924:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 801a928:	6911      	ldr	r1, [r2, #16]
 801a92a:	4a20      	ldr	r2, [pc, #128]	@ (801a9ac <report_realtime_status+0x888>)
 801a92c:	6011      	str	r1, [r2, #0]
            spindle_rpm = gc_state.spindle.rpm;
 801a92e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a930:	4b1d      	ldr	r3, [pc, #116]	@ (801a9a8 <report_realtime_status+0x884>)
 801a932:	601a      	str	r2, [r3, #0]
 801a934:	2501      	movs	r5, #1
        if (is_changed)
 801a936:	b12d      	cbz	r5, 801a944 <report_realtime_status+0x820>
            system_set_exec_state_flag(EXEC_GCODE_REPORT);
 801a938:	4b0c      	ldr	r3, [pc, #48]	@ (801a96c <report_realtime_status+0x848>)
 801a93a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a93c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801a940:	481b      	ldr	r0, [pc, #108]	@ (801a9b0 <report_realtime_status+0x88c>)
 801a942:	4798      	blx	r3
        if(report.tool_offset)
 801a944:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 801a948:	f000 80dd 	beq.w	801ab06 <report_realtime_status+0x9e2>
            system_set_exec_state_flag(EXEC_TLO_REPORT);
 801a94c:	4b07      	ldr	r3, [pc, #28]	@ (801a96c <report_realtime_status+0x848>)
 801a94e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a950:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801a954:	4816      	ldr	r0, [pc, #88]	@ (801a9b0 <report_realtime_status+0x88c>)
 801a956:	4798      	blx	r3
 801a958:	e0d5      	b.n	801ab06 <report_realtime_status+0x9e2>
                wco_counter = 0;
 801a95a:	4b16      	ldr	r3, [pc, #88]	@ (801a9b4 <report_realtime_status+0x890>)
 801a95c:	2200      	movs	r2, #0
 801a95e:	701a      	strb	r2, [r3, #0]
 801a960:	e6e3      	b.n	801a72a <report_realtime_status+0x606>
 801a962:	bf00      	nop
 801a964:	20000ee4 	.word	0x20000ee4
 801a968:	2000148c 	.word	0x2000148c
 801a96c:	200011ac 	.word	0x200011ac
 801a970:	0802b9a4 	.word	0x0802b9a4
 801a974:	20001a90 	.word	0x20001a90
 801a978:	0802b9ac 	.word	0x0802b9ac
 801a97c:	20001a94 	.word	0x20001a94
 801a980:	003a417c 	.word	0x003a417c
 801a984:	80000001 	.word	0x80000001
 801a988:	20001bc4 	.word	0x20001bc4
 801a98c:	0802b8fc 	.word	0x0802b8fc
 801a990:	0802b908 	.word	0x0802b908
 801a994:	08029488 	.word	0x08029488
 801a998:	0802b9c4 	.word	0x0802b9c4
 801a99c:	0802b9dc 	.word	0x0802b9dc
 801a9a0:	20001394 	.word	0x20001394
 801a9a4:	20001a80 	.word	0x20001a80
 801a9a8:	20001a7c 	.word	0x20001a7c
 801a9ac:	20001a78 	.word	0x20001a78
 801a9b0:	200014d4 	.word	0x200014d4
 801a9b4:	20001a85 	.word	0x20001a85
            hal.stream.write_all(appendbuf(2, "|Ov:", uitoa((uint32_t)sys.override.feed_rate)));
 801a9b8:	f8df a1f4 	ldr.w	sl, [pc, #500]	@ 801abb0 <report_realtime_status+0xa8c>
 801a9bc:	f8da 30b8 	ldr.w	r3, [sl, #184]	@ 0xb8
 801a9c0:	9301      	str	r3, [sp, #4]
 801a9c2:	f8df b204 	ldr.w	fp, [pc, #516]	@ 801abc8 <report_realtime_status+0xaa4>
 801a9c6:	f8db 001c 	ldr.w	r0, [fp, #28]
 801a9ca:	f7fa fbd7 	bl	801517c <uitoa>
 801a9ce:	4602      	mov	r2, r0
 801a9d0:	4974      	ldr	r1, [pc, #464]	@ (801aba4 <report_realtime_status+0xa80>)
 801a9d2:	2002      	movs	r0, #2
 801a9d4:	f7fd fca2 	bl	801831c <appendbuf>
 801a9d8:	9b01      	ldr	r3, [sp, #4]
 801a9da:	4798      	blx	r3
            hal.stream.write_all(appendbuf(2, ",", uitoa((uint32_t)sys.override.rapid_rate)));
 801a9dc:	f8da 30b8 	ldr.w	r3, [sl, #184]	@ 0xb8
 801a9e0:	9301      	str	r3, [sp, #4]
 801a9e2:	f8db 0020 	ldr.w	r0, [fp, #32]
 801a9e6:	f7fa fbc9 	bl	801517c <uitoa>
 801a9ea:	4602      	mov	r2, r0
 801a9ec:	f8df b1dc 	ldr.w	fp, [pc, #476]	@ 801abcc <report_realtime_status+0xaa8>
 801a9f0:	4659      	mov	r1, fp
 801a9f2:	2002      	movs	r0, #2
 801a9f4:	f7fd fc92 	bl	801831c <appendbuf>
 801a9f8:	9b01      	ldr	r3, [sp, #4]
 801a9fa:	4798      	blx	r3
            hal.stream.write_all(appendbuf(2, ",", uitoa((uint32_t)spindle_0->param->override_pct)));
 801a9fc:	f8da a0b8 	ldr.w	sl, [sl, #184]	@ 0xb8
 801aa00:	6873      	ldr	r3, [r6, #4]
 801aa02:	68d8      	ldr	r0, [r3, #12]
 801aa04:	f7fa fbba 	bl	801517c <uitoa>
 801aa08:	4602      	mov	r2, r0
 801aa0a:	4659      	mov	r1, fp
 801aa0c:	2002      	movs	r0, #2
 801aa0e:	f7fd fc85 	bl	801831c <appendbuf>
 801aa12:	47d0      	blx	sl
 801aa14:	e69d      	b.n	801a752 <report_realtime_status+0x62e>
                *append++ = spindle_0_state.ccw ? 'C' : 'S';
 801aa16:	2153      	movs	r1, #83	@ 0x53
 801aa18:	e6b3      	b.n	801a782 <report_realtime_status+0x65e>
            char *append = &buf[3];
 801aa1a:	4b63      	ldr	r3, [pc, #396]	@ (801aba8 <report_realtime_status+0xa84>)
 801aa1c:	e6b4      	b.n	801a788 <report_realtime_status+0x664>
            axis_signals_tostring(buf, gc_get_g51_state());
 801aa1e:	f7f2 f81f 	bl	800ca60 <gc_get_g51_state>
 801aa22:	4601      	mov	r1, r0
 801aa24:	4e61      	ldr	r6, [pc, #388]	@ (801abac <report_realtime_status+0xa88>)
 801aa26:	4630      	mov	r0, r6
 801aa28:	f7fd f892 	bl	8017b50 <axis_signals_tostring>
            hal.stream.write_all("|Sc:");
 801aa2c:	4f60      	ldr	r7, [pc, #384]	@ (801abb0 <report_realtime_status+0xa8c>)
 801aa2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801aa32:	4860      	ldr	r0, [pc, #384]	@ (801abb4 <report_realtime_status+0xa90>)
 801aa34:	4798      	blx	r3
            hal.stream.write_all(buf);
 801aa36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801aa3a:	4630      	mov	r0, r6
 801aa3c:	4798      	blx	r3
 801aa3e:	e6d1      	b.n	801a7e4 <report_realtime_status+0x6c0>
            hal.stream.write_all(sys.flags.auto_reporting ? "|AR:" : "|AR");
 801aa40:	485d      	ldr	r0, [pc, #372]	@ (801abb8 <report_realtime_status+0xa94>)
 801aa42:	e6e0      	b.n	801a806 <report_realtime_status+0x6e2>
                hal.stream.write_all(uitoa(settings.report_interval));
 801aa44:	4b5a      	ldr	r3, [pc, #360]	@ (801abb0 <report_realtime_status+0xa8c>)
 801aa46:	f8d3 60b8 	ldr.w	r6, [r3, #184]	@ 0xb8
 801aa4a:	4b5c      	ldr	r3, [pc, #368]	@ (801abbc <report_realtime_status+0xa98>)
 801aa4c:	8a98      	ldrh	r0, [r3, #20]
 801aa4e:	f7fa fb95 	bl	801517c <uitoa>
 801aa52:	47b0      	blx	r6
 801aa54:	e6de      	b.n	801a814 <report_realtime_status+0x6f0>
            hal.stream.write_all(sys.mpg_mode ? "|MPG:1" : "|MPG:0");
 801aa56:	485a      	ldr	r0, [pc, #360]	@ (801abc0 <report_realtime_status+0xa9c>)
 801aa58:	e6e9      	b.n	801a82e <report_realtime_status+0x70a>
            hal.stream.write_all(appendbuf(2, "|H:", (homing.mask & sys.homed.mask) == homing.mask ? "1" : "0"));
 801aa5a:	4a5a      	ldr	r2, [pc, #360]	@ (801abc4 <report_realtime_status+0xaa0>)
 801aa5c:	e700      	b.n	801a860 <report_realtime_status+0x73c>
                hal.stream.write_all(appendbuf(2, ",", uitoa(sys.homed.mask)));
 801aa5e:	4b54      	ldr	r3, [pc, #336]	@ (801abb0 <report_realtime_status+0xa8c>)
 801aa60:	f8d3 60b8 	ldr.w	r6, [r3, #184]	@ 0xb8
 801aa64:	4b58      	ldr	r3, [pc, #352]	@ (801abc8 <report_realtime_status+0xaa4>)
 801aa66:	f893 0054 	ldrb.w	r0, [r3, #84]	@ 0x54
 801aa6a:	f7fa fb87 	bl	801517c <uitoa>
 801aa6e:	4602      	mov	r2, r0
 801aa70:	4956      	ldr	r1, [pc, #344]	@ (801abcc <report_realtime_status+0xaa8>)
 801aa72:	2002      	movs	r0, #2
 801aa74:	f7fd fc52 	bl	801831c <appendbuf>
 801aa78:	47b0      	blx	r6
 801aa7a:	e6fd      	b.n	801a878 <report_realtime_status+0x754>
            hal.stream.write_all(gc_state.modal.diameter_mode ? "|D:1" : "|D:0");
 801aa7c:	4b4c      	ldr	r3, [pc, #304]	@ (801abb0 <report_realtime_status+0xa8c>)
 801aa7e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801aa82:	4a53      	ldr	r2, [pc, #332]	@ (801abd0 <report_realtime_status+0xaac>)
 801aa84:	7952      	ldrb	r2, [r2, #5]
 801aa86:	b112      	cbz	r2, 801aa8e <report_realtime_status+0x96a>
 801aa88:	4852      	ldr	r0, [pc, #328]	@ (801abd4 <report_realtime_status+0xab0>)
 801aa8a:	4798      	blx	r3
 801aa8c:	e6fc      	b.n	801a888 <report_realtime_status+0x764>
 801aa8e:	4852      	ldr	r0, [pc, #328]	@ (801abd8 <report_realtime_status+0xab4>)
 801aa90:	e7fb      	b.n	801aa8a <report_realtime_status+0x966>
            hal.stream.write_all(appendbuf(2, "|T:", uitoa((uint32_t)gc_state.tool->tool_id)));
 801aa92:	4b47      	ldr	r3, [pc, #284]	@ (801abb0 <report_realtime_status+0xa8c>)
 801aa94:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801aa98:	4b4d      	ldr	r3, [pc, #308]	@ (801abd0 <report_realtime_status+0xaac>)
 801aa9a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801aa9e:	6918      	ldr	r0, [r3, #16]
 801aaa0:	f7fa fb6c 	bl	801517c <uitoa>
 801aaa4:	4602      	mov	r2, r0
 801aaa6:	494d      	ldr	r1, [pc, #308]	@ (801abdc <report_realtime_status+0xab8>)
 801aaa8:	2002      	movs	r0, #2
 801aaaa:	f7fd fc37 	bl	801831c <appendbuf>
 801aaae:	47a8      	blx	r5
 801aab0:	e6ee      	b.n	801a890 <report_realtime_status+0x76c>
            hal.stream.write_all(appendbuf(2, "|TLR:", uitoa(sys.tlo_reference_set.mask != 0)));
 801aab2:	4b3f      	ldr	r3, [pc, #252]	@ (801abb0 <report_realtime_status+0xa8c>)
 801aab4:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801aab8:	4b43      	ldr	r3, [pc, #268]	@ (801abc8 <report_realtime_status+0xaa4>)
 801aaba:	79d8      	ldrb	r0, [r3, #7]
 801aabc:	3800      	subs	r0, #0
 801aabe:	bf18      	it	ne
 801aac0:	2001      	movne	r0, #1
 801aac2:	f7fa fb5b 	bl	801517c <uitoa>
 801aac6:	4602      	mov	r2, r0
 801aac8:	4945      	ldr	r1, [pc, #276]	@ (801abe0 <report_realtime_status+0xabc>)
 801aaca:	2002      	movs	r0, #2
 801aacc:	f7fd fc26 	bl	801831c <appendbuf>
 801aad0:	47a8      	blx	r5
 801aad2:	e6e1      	b.n	801a898 <report_realtime_status+0x774>
                hal.stream.write_all(appendbuf(2, "|In:", uitoa(sys.var5399)));
 801aad4:	4b36      	ldr	r3, [pc, #216]	@ (801abb0 <report_realtime_status+0xa8c>)
 801aad6:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801aada:	f7fa fb4f 	bl	801517c <uitoa>
 801aade:	4602      	mov	r2, r0
 801aae0:	4940      	ldr	r1, [pc, #256]	@ (801abe4 <report_realtime_status+0xac0>)
 801aae2:	2002      	movs	r0, #2
 801aae4:	f7fd fc1a 	bl	801831c <appendbuf>
 801aae8:	47a8      	blx	r5
 801aaea:	e6e5      	b.n	801a8b8 <report_realtime_status+0x794>
        hal.stream.write_all("|FW:grblHAL");
 801aaec:	4b30      	ldr	r3, [pc, #192]	@ (801abb0 <report_realtime_status+0xa8c>)
 801aaee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801aaf2:	483d      	ldr	r0, [pc, #244]	@ (801abe8 <report_realtime_status+0xac4>)
 801aaf4:	4798      	blx	r3
        if(sys.blocking_event)
 801aaf6:	4b34      	ldr	r3, [pc, #208]	@ (801abc8 <report_realtime_status+0xaa4>)
 801aaf8:	795b      	ldrb	r3, [r3, #5]
 801aafa:	b123      	cbz	r3, 801ab06 <report_realtime_status+0x9e2>
            hal.stream.write_all("|$C:1");
 801aafc:	4b2c      	ldr	r3, [pc, #176]	@ (801abb0 <report_realtime_status+0xa8c>)
 801aafe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ab02:	483a      	ldr	r0, [pc, #232]	@ (801abec <report_realtime_status+0xac8>)
 801ab04:	4798      	blx	r3
    hal.stream.write_all(">" ASCII_EOL);
 801ab06:	4b2a      	ldr	r3, [pc, #168]	@ (801abb0 <report_realtime_status+0xa8c>)
 801ab08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ab0c:	4838      	ldr	r0, [pc, #224]	@ (801abf0 <report_realtime_status+0xacc>)
 801ab0e:	4798      	blx	r3
    system_add_rt_report(Report_ClearAll);
 801ab10:	2000      	movs	r0, #0
 801ab12:	f006 fdb5 	bl	8021680 <system_add_rt_report>
    if(settings.status_report.work_coord_offset && wco_counter == 0)
 801ab16:	4b29      	ldr	r3, [pc, #164]	@ (801abbc <report_realtime_status+0xa98>)
 801ab18:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801ab1c:	f013 0f20 	tst.w	r3, #32
 801ab20:	d003      	beq.n	801ab2a <report_realtime_status+0xa06>
 801ab22:	4b34      	ldr	r3, [pc, #208]	@ (801abf4 <report_realtime_status+0xad0>)
 801ab24:	781b      	ldrb	r3, [r3, #0]
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d037      	beq.n	801ab9a <report_realtime_status+0xa76>
}
 801ab2a:	b00b      	add	sp, #44	@ 0x2c
 801ab2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint_fast32_t idx = N_AXIS;
 801ab30:	2303      	movs	r3, #3
        idx--;
 801ab32:	3b01      	subs	r3, #1
        active = !(gc_state.g92_coord_offset[idx] == 0.0f || gc_state.g92_coord_offset[idx] == -0.0f);
 801ab34:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 801ab38:	4a25      	ldr	r2, [pc, #148]	@ (801abd0 <report_realtime_status+0xaac>)
 801ab3a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801ab3e:	edd2 7a00 	vldr	s15, [r2]
 801ab42:	eef5 7a40 	vcmp.f32	s15, #0.0
 801ab46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab4a:	bf14      	ite	ne
 801ab4c:	2201      	movne	r2, #1
 801ab4e:	2200      	moveq	r2, #0
    } while(idx && !active);
 801ab50:	b123      	cbz	r3, 801ab5c <report_realtime_status+0xa38>
 801ab52:	eef5 7a40 	vcmp.f32	s15, #0.0
 801ab56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab5a:	d0ea      	beq.n	801ab32 <report_realtime_status+0xa0e>
        } else if ((is_changed = g92_active != is_g92_active()))
 801ab5c:	4b26      	ldr	r3, [pc, #152]	@ (801abf8 <report_realtime_status+0xad4>)
 801ab5e:	781b      	ldrb	r3, [r3, #0]
 801ab60:	4293      	cmp	r3, r2
 801ab62:	bf14      	ite	ne
 801ab64:	2501      	movne	r5, #1
 801ab66:	2500      	moveq	r5, #0
 801ab68:	d004      	beq.n	801ab74 <report_realtime_status+0xa50>
            g92_active = !g92_active;
 801ab6a:	f083 0301 	eor.w	r3, r3, #1
 801ab6e:	4a22      	ldr	r2, [pc, #136]	@ (801abf8 <report_realtime_status+0xad4>)
 801ab70:	7013      	strb	r3, [r2, #0]
 801ab72:	e6e0      	b.n	801a936 <report_realtime_status+0x812>
        else if(memcmp(&last_state, &gc_state.modal, sizeof(gc_modal_t))) {
 801ab74:	2234      	movs	r2, #52	@ 0x34
 801ab76:	4916      	ldr	r1, [pc, #88]	@ (801abd0 <report_realtime_status+0xaac>)
 801ab78:	4820      	ldr	r0, [pc, #128]	@ (801abfc <report_realtime_status+0xad8>)
 801ab7a:	f009 fc56 	bl	802442a <memcmp>
 801ab7e:	2800      	cmp	r0, #0
 801ab80:	f43f aed9 	beq.w	801a936 <report_realtime_status+0x812>
            last_state = gc_state.modal;
 801ab84:	4d1d      	ldr	r5, [pc, #116]	@ (801abfc <report_realtime_status+0xad8>)
 801ab86:	4e12      	ldr	r6, [pc, #72]	@ (801abd0 <report_realtime_status+0xaac>)
 801ab88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801ab8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ab8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801ab8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ab90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801ab92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ab94:	6833      	ldr	r3, [r6, #0]
 801ab96:	602b      	str	r3, [r5, #0]
        if (is_changed)
 801ab98:	e6ce      	b.n	801a938 <report_realtime_status+0x814>
        system_add_rt_report(Report_WCO); // Set to report on next request
 801ab9a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801ab9e:	f006 fd6f 	bl	8021680 <system_add_rt_report>
}
 801aba2:	e7c2      	b.n	801ab2a <report_realtime_status+0xa06>
 801aba4:	0802b9b4 	.word	0x0802b9b4
 801aba8:	20001a97 	.word	0x20001a97
 801abac:	20001a94 	.word	0x20001a94
 801abb0:	200011ac 	.word	0x200011ac
 801abb4:	0802b9bc 	.word	0x0802b9bc
 801abb8:	0802b904 	.word	0x0802b904
 801abbc:	20001bc4 	.word	0x20001bc4
 801abc0:	0802b910 	.word	0x0802b910
 801abc4:	08029494 	.word	0x08029494
 801abc8:	2000148c 	.word	0x2000148c
 801abcc:	0802b7dc 	.word	0x0802b7dc
 801abd0:	20000ee4 	.word	0x20000ee4
 801abd4:	0802b918 	.word	0x0802b918
 801abd8:	0802b920 	.word	0x0802b920
 801abdc:	0802b9c8 	.word	0x0802b9c8
 801abe0:	0802b9cc 	.word	0x0802b9cc
 801abe4:	0802b9d4 	.word	0x0802b9d4
 801abe8:	0802b9e4 	.word	0x0802b9e4
 801abec:	0802b9f0 	.word	0x0802b9f0
 801abf0:	0802b9f8 	.word	0x0802b9f8
 801abf4:	20001a85 	.word	0x20001a85
 801abf8:	20001a74 	.word	0x20001a74
 801abfc:	20001a40 	.word	0x20001a40

0801ac00 <report_settings_details>:
{
 801ac00:	b538      	push	{r3, r4, r5, lr}
 801ac02:	4605      	mov	r5, r0
    if(id != Setting_SettingsAll) {
 801ac04:	f240 23e5 	movw	r3, #741	@ 0x2e5
 801ac08:	4299      	cmp	r1, r3
 801ac0a:	d00f      	beq.n	801ac2c <report_settings_details+0x2c>
 801ac0c:	460c      	mov	r4, r1
        const setting_detail_t *setting = setting_get_details(id, NULL);
 801ac0e:	2100      	movs	r1, #0
 801ac10:	4620      	mov	r0, r4
 801ac12:	f002 fa35 	bl	801d080 <setting_get_details>
        if(setting)
 801ac16:	4601      	mov	r1, r0
 801ac18:	b130      	cbz	r0, 801ac28 <report_settings_details+0x28>
            report_settings_detail(format, setting, id - setting->id);
 801ac1a:	8802      	ldrh	r2, [r0, #0]
 801ac1c:	1aa2      	subs	r2, r4, r2
 801ac1e:	4628      	mov	r0, r5
 801ac20:	f7fd fc6e 	bl	8018500 <report_settings_detail>
        status_code_t status = Status_OK;
 801ac24:	2000      	movs	r0, #0
 801ac26:	e004      	b.n	801ac32 <report_settings_details+0x32>
            status = Status_SettingDisabled;
 801ac28:	2035      	movs	r0, #53	@ 0x35
        return status;
 801ac2a:	e002      	b.n	801ac32 <report_settings_details+0x32>
    return print_settings_details(format, group);
 801ac2c:	4611      	mov	r1, r2
 801ac2e:	f7fd ffdd 	bl	8018bec <print_settings_details>
}
 801ac32:	bd38      	pop	{r3, r4, r5, pc}

0801ac34 <report_group_settings>:
{
 801ac34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ac38:	b089      	sub	sp, #36	@ 0x24
 801ac3a:	4680      	mov	r8, r0
 801ac3c:	460e      	mov	r6, r1
 801ac3e:	4617      	mov	r7, r2
    for(idx = 0; idx < n_groups; idx++) {
 801ac40:	2400      	movs	r4, #0
    bool found = false;
 801ac42:	46a1      	mov	r9, r4
    for(idx = 0; idx < n_groups; idx++) {
 801ac44:	e017      	b.n	801ac76 <report_group_settings+0x42>
            *s++ = CAPS(c);
 801ac46:	f803 2b01 	strb.w	r2, [r3], #1
        while((c = *s))
 801ac4a:	781a      	ldrb	r2, [r3, #0]
 801ac4c:	b13a      	cbz	r2, 801ac5e <report_group_settings+0x2a>
            *s++ = CAPS(c);
 801ac4e:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 801ac52:	b2c9      	uxtb	r1, r1
 801ac54:	2919      	cmp	r1, #25
 801ac56:	d8f6      	bhi.n	801ac46 <report_group_settings+0x12>
 801ac58:	f002 025f 	and.w	r2, r2, #95	@ 0x5f
 801ac5c:	e7f3      	b.n	801ac46 <report_group_settings+0x12>
        if((found = matchhere(args, group))) {
 801ac5e:	a901      	add	r1, sp, #4
 801ac60:	4638      	mov	r0, r7
 801ac62:	f7fc ff4e 	bl	8017b02 <matchhere>
 801ac66:	2800      	cmp	r0, #0
 801ac68:	bf14      	ite	ne
 801ac6a:	f04f 0901 	movne.w	r9, #1
 801ac6e:	f04f 0900 	moveq.w	r9, #0
 801ac72:	d10d      	bne.n	801ac90 <report_group_settings+0x5c>
    for(idx = 0; idx < n_groups; idx++) {
 801ac74:	3401      	adds	r4, #1
 801ac76:	42b4      	cmp	r4, r6
 801ac78:	d21d      	bcs.n	801acb6 <report_group_settings+0x82>
        strncpy(group, groups[idx].name, sizeof(group) - 1);
 801ac7a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801ac7e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801ac82:	2219      	movs	r2, #25
 801ac84:	6869      	ldr	r1, [r5, #4]
 801ac86:	a801      	add	r0, sp, #4
 801ac88:	f009 fc2f 	bl	80244ea <strncpy>
        s = group;
 801ac8c:	ab01      	add	r3, sp, #4
        while((c = *s))
 801ac8e:	e7dc      	b.n	801ac4a <report_group_settings+0x16>
            hal.stream.write(ASCII_EOL "---- ");
 801ac90:	4c0b      	ldr	r4, [pc, #44]	@ (801acc0 <report_group_settings+0x8c>)
 801ac92:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801ac96:	480b      	ldr	r0, [pc, #44]	@ (801acc4 <report_group_settings+0x90>)
 801ac98:	4798      	blx	r3
            hal.stream.write(groups[idx].name);
 801ac9a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801ac9e:	6868      	ldr	r0, [r5, #4]
 801aca0:	4798      	blx	r3
            hal.stream.write(":" ASCII_EOL);
 801aca2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801aca6:	4808      	ldr	r0, [pc, #32]	@ (801acc8 <report_group_settings+0x94>)
 801aca8:	4798      	blx	r3
            report_settings_details(SettingsFormat_HumanReadable, Setting_SettingsAll, groups[idx].id);
 801acaa:	786a      	ldrb	r2, [r5, #1]
 801acac:	f240 21e5 	movw	r1, #741	@ 0x2e5
 801acb0:	2001      	movs	r0, #1
 801acb2:	f7ff ffa5 	bl	801ac00 <report_settings_details>
}
 801acb6:	4648      	mov	r0, r9
 801acb8:	b009      	add	sp, #36	@ 0x24
 801acba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801acbe:	bf00      	nop
 801acc0:	200011ac 	.word	0x200011ac
 801acc4:	0802b9fc 	.word	0x0802b9fc
 801acc8:	0802ba04 	.word	0x0802ba04

0801accc <report_setting_description>:
{
 801accc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801acd0:	4606      	mov	r6, r0
 801acd2:	460c      	mov	r4, r1
    const setting_detail_t *setting = setting_get_details(id, NULL);
 801acd4:	2100      	movs	r1, #0
 801acd6:	4620      	mov	r0, r4
 801acd8:	f002 f9d2 	bl	801d080 <setting_get_details>
 801acdc:	4607      	mov	r7, r0
    const char *description = setting_get_description(id);
 801acde:	4620      	mov	r0, r4
 801ace0:	f002 fa64 	bl	801d1ac <setting_get_description>
 801ace4:	4680      	mov	r8, r0
    if(format == SettingsFormat_MachineReadable) {
 801ace6:	b976      	cbnz	r6, 801ad06 <report_setting_description+0x3a>
        hal.stream.write("[SETTINGDESCR:");
 801ace8:	4d1c      	ldr	r5, [pc, #112]	@ (801ad5c <report_setting_description+0x90>)
 801acea:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801acee:	481c      	ldr	r0, [pc, #112]	@ (801ad60 <report_setting_description+0x94>)
 801acf0:	4798      	blx	r3
        hal.stream.write(uitoa(id));
 801acf2:	f8d5 90b4 	ldr.w	r9, [r5, #180]	@ 0xb4
 801acf6:	4620      	mov	r0, r4
 801acf8:	f7fa fa40 	bl	801517c <uitoa>
 801acfc:	47c8      	blx	r9
        hal.stream.write(vbar);
 801acfe:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801ad02:	4818      	ldr	r0, [pc, #96]	@ (801ad64 <report_setting_description+0x98>)
 801ad04:	4798      	blx	r3
    hal.stream.write(description ? description : (setting ? "" : "N/A"));
 801ad06:	4b15      	ldr	r3, [pc, #84]	@ (801ad5c <report_setting_description+0x90>)
 801ad08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ad0c:	f1b8 0f00 	cmp.w	r8, #0
 801ad10:	d01b      	beq.n	801ad4a <report_setting_description+0x7e>
 801ad12:	4640      	mov	r0, r8
 801ad14:	4798      	blx	r3
    if(setting && setting->flags.reboot_required)
 801ad16:	b17f      	cbz	r7, 801ad38 <report_setting_description+0x6c>
 801ad18:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801ad1c:	f013 0f01 	tst.w	r3, #1
 801ad20:	d00a      	beq.n	801ad38 <report_setting_description+0x6c>
        hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + (description && *description != '\0' ? 0 : 4));
 801ad22:	4b0e      	ldr	r3, [pc, #56]	@ (801ad5c <report_setting_description+0x90>)
 801ad24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ad28:	f1b8 0f00 	cmp.w	r8, #0
 801ad2c:	d012      	beq.n	801ad54 <report_setting_description+0x88>
 801ad2e:	f898 2000 	ldrb.w	r2, [r8]
 801ad32:	b98a      	cbnz	r2, 801ad58 <report_setting_description+0x8c>
 801ad34:	480c      	ldr	r0, [pc, #48]	@ (801ad68 <report_setting_description+0x9c>)
 801ad36:	4798      	blx	r3
    if(format == SettingsFormat_MachineReadable)
 801ad38:	b926      	cbnz	r6, 801ad44 <report_setting_description+0x78>
        hal.stream.write("]" ASCII_EOL);
 801ad3a:	4b08      	ldr	r3, [pc, #32]	@ (801ad5c <report_setting_description+0x90>)
 801ad3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ad40:	480a      	ldr	r0, [pc, #40]	@ (801ad6c <report_setting_description+0xa0>)
 801ad42:	4798      	blx	r3
}
 801ad44:	2000      	movs	r0, #0
 801ad46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hal.stream.write(description ? description : (setting ? "" : "N/A"));
 801ad4a:	b10f      	cbz	r7, 801ad50 <report_setting_description+0x84>
 801ad4c:	4808      	ldr	r0, [pc, #32]	@ (801ad70 <report_setting_description+0xa4>)
 801ad4e:	e7e1      	b.n	801ad14 <report_setting_description+0x48>
 801ad50:	4808      	ldr	r0, [pc, #32]	@ (801ad74 <report_setting_description+0xa8>)
 801ad52:	e7df      	b.n	801ad14 <report_setting_description+0x48>
        hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + (description && *description != '\0' ? 0 : 4));
 801ad54:	4804      	ldr	r0, [pc, #16]	@ (801ad68 <report_setting_description+0x9c>)
 801ad56:	e7ee      	b.n	801ad36 <report_setting_description+0x6a>
 801ad58:	4807      	ldr	r0, [pc, #28]	@ (801ad78 <report_setting_description+0xac>)
 801ad5a:	e7ec      	b.n	801ad36 <report_setting_description+0x6a>
 801ad5c:	200011ac 	.word	0x200011ac
 801ad60:	0802ba08 	.word	0x0802ba08
 801ad64:	0802bbd8 	.word	0x0802bbd8
 801ad68:	0802b428 	.word	0x0802b428
 801ad6c:	0802b3b0 	.word	0x0802b3b0
 801ad70:	0802b518 	.word	0x0802b518
 801ad74:	08029034 	.word	0x08029034
 801ad78:	0802b424 	.word	0x0802b424

0801ad7c <report_alarm_details>:
{
 801ad7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad7e:	4606      	mov	r6, r0
    alarm_details_t *details = grbl.on_get_alarms();
 801ad80:	4b25      	ldr	r3, [pc, #148]	@ (801ae18 <report_alarm_details+0x9c>)
 801ad82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ad84:	4798      	blx	r3
 801ad86:	4604      	mov	r4, r0
    if(grbl_format)
 801ad88:	b126      	cbz	r6, 801ad94 <report_alarm_details+0x18>
        hal.stream.write("\"Alarm Code in v1.1+\",\" Alarm Message in v1.0-\",\" Alarm Description\"" ASCII_EOL);
 801ad8a:	4b24      	ldr	r3, [pc, #144]	@ (801ae1c <report_alarm_details+0xa0>)
 801ad8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ad90:	4823      	ldr	r0, [pc, #140]	@ (801ae20 <report_alarm_details+0xa4>)
 801ad92:	4798      	blx	r3
{
 801ad94:	2500      	movs	r5, #0
        n_alarms += details->n_alarms;
 801ad96:	8823      	ldrh	r3, [r4, #0]
 801ad98:	441d      	add	r5, r3
    } while((details = details->next));
 801ad9a:	68a4      	ldr	r4, [r4, #8]
 801ad9c:	2c00      	cmp	r4, #0
 801ad9e:	d1fa      	bne.n	801ad96 <report_alarm_details+0x1a>
    details = grbl.on_get_alarms();
 801ada0:	4b1d      	ldr	r3, [pc, #116]	@ (801ae18 <report_alarm_details+0x9c>)
 801ada2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ada4:	4798      	blx	r3
 801ada6:	4604      	mov	r4, r0
    if((all_alarms = palarm = calloc(n_alarms, sizeof(alarm_detail_t *)))) {
 801ada8:	2104      	movs	r1, #4
 801adaa:	4628      	mov	r0, r5
 801adac:	f007 fa82 	bl	80222b4 <calloc>
 801adb0:	4607      	mov	r7, r0
 801adb2:	b328      	cbz	r0, 801ae00 <report_alarm_details+0x84>
 801adb4:	4603      	mov	r3, r0
 801adb6:	e00a      	b.n	801adce <report_alarm_details+0x52>
                *palarm++ = (alarm_detail_t *)&(details->alarms[idx]);
 801adb8:	6861      	ldr	r1, [r4, #4]
 801adba:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801adbe:	f843 1b04 	str.w	r1, [r3], #4
            for(idx = 0; idx < details->n_alarms; idx++)
 801adc2:	3201      	adds	r2, #1
 801adc4:	8821      	ldrh	r1, [r4, #0]
 801adc6:	4291      	cmp	r1, r2
 801adc8:	d8f6      	bhi.n	801adb8 <report_alarm_details+0x3c>
        } while((details = details->next));
 801adca:	68a4      	ldr	r4, [r4, #8]
 801adcc:	b10c      	cbz	r4, 801add2 <report_alarm_details+0x56>
            for(idx = 0; idx < details->n_alarms; idx++)
 801adce:	2200      	movs	r2, #0
 801add0:	e7f8      	b.n	801adc4 <report_alarm_details+0x48>
        qsort(all_alarms, n_alarms, sizeof(alarm_detail_t *), cmp_alarms);
 801add2:	4b14      	ldr	r3, [pc, #80]	@ (801ae24 <report_alarm_details+0xa8>)
 801add4:	2204      	movs	r2, #4
 801add6:	4629      	mov	r1, r5
 801add8:	4638      	mov	r0, r7
 801adda:	f008 fa3c 	bl	8023256 <qsort>
        for(idx = 0; idx < n_alarms; idx++)
 801adde:	e005      	b.n	801adec <report_alarm_details+0x70>
            print_alarm(all_alarms[idx], grbl_format);
 801ade0:	4631      	mov	r1, r6
 801ade2:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 801ade6:	f7fd f813 	bl	8017e10 <print_alarm>
        for(idx = 0; idx < n_alarms; idx++)
 801adea:	3401      	adds	r4, #1
 801adec:	42ac      	cmp	r4, r5
 801adee:	d3f7      	bcc.n	801ade0 <report_alarm_details+0x64>
        free(all_alarms);
 801adf0:	4638      	mov	r0, r7
 801adf2:	f007 fa83 	bl	80222fc <free>
}
 801adf6:	2000      	movs	r0, #0
 801adf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while((details = details->next));
 801adfa:	68a4      	ldr	r4, [r4, #8]
 801adfc:	2c00      	cmp	r4, #0
 801adfe:	d0fa      	beq.n	801adf6 <report_alarm_details+0x7a>
        for(idx = 0; idx < details->n_alarms; idx++)
 801ae00:	2500      	movs	r5, #0
 801ae02:	8823      	ldrh	r3, [r4, #0]
 801ae04:	42ab      	cmp	r3, r5
 801ae06:	d9f8      	bls.n	801adfa <report_alarm_details+0x7e>
            print_alarm(&details->alarms[idx], grbl_format);
 801ae08:	6860      	ldr	r0, [r4, #4]
 801ae0a:	4631      	mov	r1, r6
 801ae0c:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 801ae10:	f7fc fffe 	bl	8017e10 <print_alarm>
        for(idx = 0; idx < details->n_alarms; idx++)
 801ae14:	3501      	adds	r5, #1
 801ae16:	e7f4      	b.n	801ae02 <report_alarm_details+0x86>
 801ae18:	20001394 	.word	0x20001394
 801ae1c:	200011ac 	.word	0x200011ac
 801ae20:	0802ba18 	.word	0x0802ba18
 801ae24:	08017c7d 	.word	0x08017c7d

0801ae28 <report_error_details>:
{
 801ae28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae2a:	4606      	mov	r6, r0
    error_details_t *details = grbl.on_get_errors();
 801ae2c:	4b25      	ldr	r3, [pc, #148]	@ (801aec4 <report_error_details+0x9c>)
 801ae2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ae30:	4798      	blx	r3
 801ae32:	4604      	mov	r4, r0
    if(grbl_format)
 801ae34:	b126      	cbz	r6, 801ae40 <report_error_details+0x18>
        hal.stream.write("\"Error Code in v1.1+\",\"Error Message in v1.0-\",\"Error Description\"" ASCII_EOL);
 801ae36:	4b24      	ldr	r3, [pc, #144]	@ (801aec8 <report_error_details+0xa0>)
 801ae38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ae3c:	4823      	ldr	r0, [pc, #140]	@ (801aecc <report_error_details+0xa4>)
 801ae3e:	4798      	blx	r3
{
 801ae40:	2500      	movs	r5, #0
        n_errors += details->n_errors;
 801ae42:	8823      	ldrh	r3, [r4, #0]
 801ae44:	441d      	add	r5, r3
    } while((details = details->next));
 801ae46:	68a4      	ldr	r4, [r4, #8]
 801ae48:	2c00      	cmp	r4, #0
 801ae4a:	d1fa      	bne.n	801ae42 <report_error_details+0x1a>
    details = grbl.on_get_errors();
 801ae4c:	4b1d      	ldr	r3, [pc, #116]	@ (801aec4 <report_error_details+0x9c>)
 801ae4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ae50:	4798      	blx	r3
 801ae52:	4604      	mov	r4, r0
    if((all_errors = perror = calloc(n_errors, sizeof(status_detail_t *)))) {
 801ae54:	2104      	movs	r1, #4
 801ae56:	4628      	mov	r0, r5
 801ae58:	f007 fa2c 	bl	80222b4 <calloc>
 801ae5c:	4607      	mov	r7, r0
 801ae5e:	b328      	cbz	r0, 801aeac <report_error_details+0x84>
 801ae60:	4603      	mov	r3, r0
 801ae62:	e00a      	b.n	801ae7a <report_error_details+0x52>
                *perror++ = (status_detail_t *)&(details->errors[idx]);
 801ae64:	6861      	ldr	r1, [r4, #4]
 801ae66:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801ae6a:	f843 1b04 	str.w	r1, [r3], #4
            for(idx = 0; idx < details->n_errors; idx++)
 801ae6e:	3201      	adds	r2, #1
 801ae70:	8821      	ldrh	r1, [r4, #0]
 801ae72:	4291      	cmp	r1, r2
 801ae74:	d8f6      	bhi.n	801ae64 <report_error_details+0x3c>
        } while((details = details->next));
 801ae76:	68a4      	ldr	r4, [r4, #8]
 801ae78:	b10c      	cbz	r4, 801ae7e <report_error_details+0x56>
            for(idx = 0; idx < details->n_errors; idx++)
 801ae7a:	2200      	movs	r2, #0
 801ae7c:	e7f8      	b.n	801ae70 <report_error_details+0x48>
        qsort(all_errors, n_errors, sizeof(status_detail_t *), cmp_errors);
 801ae7e:	4b14      	ldr	r3, [pc, #80]	@ (801aed0 <report_error_details+0xa8>)
 801ae80:	2204      	movs	r2, #4
 801ae82:	4629      	mov	r1, r5
 801ae84:	4638      	mov	r0, r7
 801ae86:	f008 f9e6 	bl	8023256 <qsort>
        for(idx = 0; idx < n_errors; idx++)
 801ae8a:	e005      	b.n	801ae98 <report_error_details+0x70>
            print_error(all_errors[idx], grbl_format);
 801ae8c:	4631      	mov	r1, r6
 801ae8e:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 801ae92:	f7fd f807 	bl	8017ea4 <print_error>
        for(idx = 0; idx < n_errors; idx++)
 801ae96:	3401      	adds	r4, #1
 801ae98:	42ac      	cmp	r4, r5
 801ae9a:	d3f7      	bcc.n	801ae8c <report_error_details+0x64>
        free(all_errors);
 801ae9c:	4638      	mov	r0, r7
 801ae9e:	f007 fa2d 	bl	80222fc <free>
}
 801aea2:	2000      	movs	r0, #0
 801aea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while((details = details->next));
 801aea6:	68a4      	ldr	r4, [r4, #8]
 801aea8:	2c00      	cmp	r4, #0
 801aeaa:	d0fa      	beq.n	801aea2 <report_error_details+0x7a>
        for(idx = 0; idx < details->n_errors; idx++)
 801aeac:	2500      	movs	r5, #0
 801aeae:	8823      	ldrh	r3, [r4, #0]
 801aeb0:	42ab      	cmp	r3, r5
 801aeb2:	d9f8      	bls.n	801aea6 <report_error_details+0x7e>
            print_error(&details->errors[idx], grbl_format);
 801aeb4:	6860      	ldr	r0, [r4, #4]
 801aeb6:	4631      	mov	r1, r6
 801aeb8:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 801aebc:	f7fc fff2 	bl	8017ea4 <print_error>
        for(idx = 0; idx < details->n_errors; idx++)
 801aec0:	3501      	adds	r5, #1
 801aec2:	e7f4      	b.n	801aeae <report_error_details+0x86>
 801aec4:	20001394 	.word	0x20001394
 801aec8:	200011ac 	.word	0x200011ac
 801aecc:	0802ba60 	.word	0x0802ba60
 801aed0:	08017c89 	.word	0x08017c89

0801aed4 <report_setting_group_details>:
{
 801aed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aed8:	4683      	mov	fp, r0
 801aeda:	468a      	mov	sl, r1
    setting_details_t *details = settings_get_details();
 801aedc:	f001 fc7c 	bl	801c7d8 <settings_get_details>
    uint_fast16_t idx, n_groups = 0;
 801aee0:	f04f 0800 	mov.w	r8, #0
        n_groups += details->n_groups;
 801aee4:	7803      	ldrb	r3, [r0, #0]
 801aee6:	4498      	add	r8, r3
    } while((details = details->next));
 801aee8:	6980      	ldr	r0, [r0, #24]
 801aeea:	2800      	cmp	r0, #0
 801aeec:	d1fa      	bne.n	801aee4 <report_setting_group_details+0x10>
    details = settings_get_details();
 801aeee:	f001 fc73 	bl	801c7d8 <settings_get_details>
 801aef2:	4607      	mov	r7, r0
    if((all_groups = group = calloc(n_groups, sizeof(setting_group_detail_t *)))) {
 801aef4:	2104      	movs	r1, #4
 801aef6:	4640      	mov	r0, r8
 801aef8:	f007 f9dc 	bl	80222b4 <calloc>
 801aefc:	4681      	mov	r9, r0
 801aefe:	2800      	cmp	r0, #0
 801af00:	d037      	beq.n	801af72 <report_setting_group_details+0x9e>
 801af02:	4606      	mov	r6, r0
 801af04:	e015      	b.n	801af32 <report_setting_group_details+0x5e>
                    *group++ = (setting_group_detail_t *)&details->groups[idx];
 801af06:	f846 5b04 	str.w	r5, [r6], #4
            for(idx = 0; idx < details->n_groups; idx++) {
 801af0a:	3401      	adds	r4, #1
 801af0c:	783b      	ldrb	r3, [r7, #0]
 801af0e:	42a3      	cmp	r3, r4
 801af10:	d90d      	bls.n	801af2e <report_setting_group_details+0x5a>
                if(group_is_dup(all_groups, details->groups[idx].id))
 801af12:	687d      	ldr	r5, [r7, #4]
 801af14:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801af18:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801af1c:	7869      	ldrb	r1, [r5, #1]
 801af1e:	4648      	mov	r0, r9
 801af20:	f7fc febe 	bl	8017ca0 <group_is_dup>
 801af24:	2800      	cmp	r0, #0
 801af26:	d0ee      	beq.n	801af06 <report_setting_group_details+0x32>
                    n_groups--;
 801af28:	f108 38ff 	add.w	r8, r8, #4294967295
 801af2c:	e7ed      	b.n	801af0a <report_setting_group_details+0x36>
        } while((details = details->next));
 801af2e:	69bf      	ldr	r7, [r7, #24]
 801af30:	b10f      	cbz	r7, 801af36 <report_setting_group_details+0x62>
            for(idx = 0; idx < details->n_groups; idx++) {
 801af32:	2400      	movs	r4, #0
 801af34:	e7ea      	b.n	801af0c <report_setting_group_details+0x38>
        qsort(all_groups, n_groups, sizeof(setting_group_detail_t *), by_id ? cmp_setting_group_id : cmp_setting_group_name);
 801af36:	f1bb 0f00 	cmp.w	fp, #0
 801af3a:	d007      	beq.n	801af4c <report_setting_group_details+0x78>
 801af3c:	4b14      	ldr	r3, [pc, #80]	@ (801af90 <report_setting_group_details+0xbc>)
 801af3e:	2204      	movs	r2, #4
 801af40:	4641      	mov	r1, r8
 801af42:	4648      	mov	r0, r9
 801af44:	f008 f987 	bl	8023256 <qsort>
        for(idx = 0; idx < n_groups; idx++)
 801af48:	2400      	movs	r4, #0
 801af4a:	e007      	b.n	801af5c <report_setting_group_details+0x88>
        qsort(all_groups, n_groups, sizeof(setting_group_detail_t *), by_id ? cmp_setting_group_id : cmp_setting_group_name);
 801af4c:	4b11      	ldr	r3, [pc, #68]	@ (801af94 <report_setting_group_details+0xc0>)
 801af4e:	e7f6      	b.n	801af3e <report_setting_group_details+0x6a>
            print_setting_group(all_groups[idx], prefix);
 801af50:	4651      	mov	r1, sl
 801af52:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
 801af56:	f7fd feed 	bl	8018d34 <print_setting_group>
        for(idx = 0; idx < n_groups; idx++)
 801af5a:	3401      	adds	r4, #1
 801af5c:	45a0      	cmp	r8, r4
 801af5e:	d8f7      	bhi.n	801af50 <report_setting_group_details+0x7c>
        free(all_groups);
 801af60:	4648      	mov	r0, r9
 801af62:	f007 f9cb 	bl	80222fc <free>
}
 801af66:	2000      	movs	r0, #0
 801af68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } while((details = details->next));
 801af6c:	69bf      	ldr	r7, [r7, #24]
 801af6e:	2f00      	cmp	r7, #0
 801af70:	d0f9      	beq.n	801af66 <report_setting_group_details+0x92>
        for(idx = 0; idx < details->n_groups; idx++)
 801af72:	2400      	movs	r4, #0
 801af74:	783b      	ldrb	r3, [r7, #0]
 801af76:	42a3      	cmp	r3, r4
 801af78:	d9f8      	bls.n	801af6c <report_setting_group_details+0x98>
            print_setting_group(&details->groups[idx], prefix);
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 801af80:	4651      	mov	r1, sl
 801af82:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801af86:	f7fd fed5 	bl	8018d34 <print_setting_group>
        for(idx = 0; idx < details->n_groups; idx++)
 801af8a:	3401      	adds	r4, #1
 801af8c:	e7f2      	b.n	801af74 <report_setting_group_details+0xa0>
 801af8e:	bf00      	nop
 801af90:	08017c95 	.word	0x08017c95
 801af94:	080184a5 	.word	0x080184a5

0801af98 <report_help>:
{
 801af98:	b538      	push	{r3, r4, r5, lr}
 801af9a:	4604      	mov	r4, r0
    while(*args == ' ')
 801af9c:	e000      	b.n	801afa0 <report_help+0x8>
        args++;
 801af9e:	3401      	adds	r4, #1
    while(*args == ' ')
 801afa0:	7823      	ldrb	r3, [r4, #0]
 801afa2:	2b20      	cmp	r3, #32
 801afa4:	d0fb      	beq.n	801af9e <report_help+0x6>
    if(*args == '\0') {
 801afa6:	b9f3      	cbnz	r3, 801afe6 <report_help+0x4e>
        hal.stream.write("Help topics:" ASCII_EOL);
 801afa8:	4c2d      	ldr	r4, [pc, #180]	@ (801b060 <report_help+0xc8>)
 801afaa:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801afae:	482d      	ldr	r0, [pc, #180]	@ (801b064 <report_help+0xcc>)
 801afb0:	4798      	blx	r3
        hal.stream.write(" Commands" ASCII_EOL);
 801afb2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801afb6:	482c      	ldr	r0, [pc, #176]	@ (801b068 <report_help+0xd0>)
 801afb8:	4798      	blx	r3
        hal.stream.write(" Settings" ASCII_EOL);
 801afba:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801afbe:	482b      	ldr	r0, [pc, #172]	@ (801b06c <report_help+0xd4>)
 801afc0:	4798      	blx	r3
        report_setting_group_details(false, " ");
 801afc2:	492b      	ldr	r1, [pc, #172]	@ (801b070 <report_help+0xd8>)
 801afc4:	2000      	movs	r0, #0
 801afc6:	f7ff ff85 	bl	801aed4 <report_setting_group_details>
}
 801afca:	2000      	movs	r0, #0
 801afcc:	bd38      	pop	{r3, r4, r5, pc}
            *s++ = CAPS(c);
 801afce:	f803 2b01 	strb.w	r2, [r3], #1
        while((c = *s))
 801afd2:	781a      	ldrb	r2, [r3, #0]
 801afd4:	b14a      	cbz	r2, 801afea <report_help+0x52>
            *s++ = CAPS(c);
 801afd6:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 801afda:	b2c9      	uxtb	r1, r1
 801afdc:	2919      	cmp	r1, #25
 801afde:	d8f6      	bhi.n	801afce <report_help+0x36>
 801afe0:	f002 025f 	and.w	r2, r2, #95	@ 0x5f
 801afe4:	e7f3      	b.n	801afce <report_help+0x36>
        char c, *s = args;
 801afe6:	4623      	mov	r3, r4
 801afe8:	e7f3      	b.n	801afd2 <report_help+0x3a>
        if(matchhere(args, "COMMANDS")) {
 801afea:	4922      	ldr	r1, [pc, #136]	@ (801b074 <report_help+0xdc>)
 801afec:	4620      	mov	r0, r4
 801afee:	f7fc fd88 	bl	8017b02 <matchhere>
 801aff2:	b128      	cbz	r0, 801b000 <report_help+0x68>
            if(grbl.on_report_command_help)
 801aff4:	4b20      	ldr	r3, [pc, #128]	@ (801b078 <report_help+0xe0>)
 801aff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d0e6      	beq.n	801afca <report_help+0x32>
                grbl.on_report_command_help();
 801affc:	4798      	blx	r3
 801affe:	e7e4      	b.n	801afca <report_help+0x32>
        } else if(matchhere(args, "SETTINGS"))
 801b000:	491e      	ldr	r1, [pc, #120]	@ (801b07c <report_help+0xe4>)
 801b002:	4620      	mov	r0, r4
 801b004:	f7fc fd7d 	bl	8017b02 <matchhere>
 801b008:	b130      	cbz	r0, 801b018 <report_help+0x80>
            report_settings_details(SettingsFormat_HumanReadable, Setting_SettingsAll, Group_All);
 801b00a:	2200      	movs	r2, #0
 801b00c:	f240 21e5 	movw	r1, #741	@ 0x2e5
 801b010:	2001      	movs	r0, #1
 801b012:	f7ff fdf5 	bl	801ac00 <report_settings_details>
 801b016:	e7d8      	b.n	801afca <report_help+0x32>
            setting_details_t *settings_info = settings_get_details();
 801b018:	f001 fbde 	bl	801c7d8 <settings_get_details>
 801b01c:	4605      	mov	r5, r0
            found = report_group_settings(settings_info->groups, settings_info->n_groups, args);
 801b01e:	4622      	mov	r2, r4
 801b020:	7801      	ldrb	r1, [r0, #0]
 801b022:	6840      	ldr	r0, [r0, #4]
 801b024:	f7ff fe06 	bl	801ac34 <report_group_settings>
            if(!found && (settings_info = settings_info->next)) do {
 801b028:	4603      	mov	r3, r0
 801b02a:	2800      	cmp	r0, #0
 801b02c:	d1cd      	bne.n	801afca <report_help+0x32>
 801b02e:	69ad      	ldr	r5, [r5, #24]
 801b030:	b955      	cbnz	r5, 801b048 <report_help+0xb0>
            if(!found)
 801b032:	2b00      	cmp	r3, #0
 801b034:	d1c9      	bne.n	801afca <report_help+0x32>
                hal.stream.write( ASCII_EOL "N/A" ASCII_EOL);
 801b036:	4b0a      	ldr	r3, [pc, #40]	@ (801b060 <report_help+0xc8>)
 801b038:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b03c:	4810      	ldr	r0, [pc, #64]	@ (801b080 <report_help+0xe8>)
 801b03e:	4798      	blx	r3
 801b040:	e7c3      	b.n	801afca <report_help+0x32>
            } while((settings_info = settings_info->next));
 801b042:	69ad      	ldr	r5, [r5, #24]
 801b044:	2d00      	cmp	r5, #0
 801b046:	d0f4      	beq.n	801b032 <report_help+0x9a>
                if(settings_info->groups && (found = report_group_settings(settings_info->groups, settings_info->n_groups, args)))
 801b048:	6868      	ldr	r0, [r5, #4]
 801b04a:	2800      	cmp	r0, #0
 801b04c:	d0f9      	beq.n	801b042 <report_help+0xaa>
 801b04e:	4622      	mov	r2, r4
 801b050:	7829      	ldrb	r1, [r5, #0]
 801b052:	f7ff fdef 	bl	801ac34 <report_group_settings>
 801b056:	4603      	mov	r3, r0
 801b058:	2800      	cmp	r0, #0
 801b05a:	d0f2      	beq.n	801b042 <report_help+0xaa>
 801b05c:	e7e9      	b.n	801b032 <report_help+0x9a>
 801b05e:	bf00      	nop
 801b060:	200011ac 	.word	0x200011ac
 801b064:	0802baa8 	.word	0x0802baa8
 801b068:	0802bab8 	.word	0x0802bab8
 801b06c:	0802bac4 	.word	0x0802bac4
 801b070:	0802b4fc 	.word	0x0802b4fc
 801b074:	0802bad0 	.word	0x0802bad0
 801b078:	20001394 	.word	0x20001394
 801b07c:	0802badc 	.word	0x0802badc
 801b080:	0802bae8 	.word	0x0802bae8

0801b084 <report_last_signals_event>:
{
 801b084:	b538      	push	{r3, r4, r5, lr}
    strcpy(buf, "[LASTEVENTS:");
 801b086:	4d10      	ldr	r5, [pc, #64]	@ (801b0c8 <report_last_signals_event+0x44>)
 801b088:	4b10      	ldr	r3, [pc, #64]	@ (801b0cc <report_last_signals_event+0x48>)
 801b08a:	46ac      	mov	ip, r5
 801b08c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b08e:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 801b092:	f88c 3000 	strb.w	r3, [ip]
    append = control_signals_tostring(append, sys.last_event.control);
 801b096:	4c0e      	ldr	r4, [pc, #56]	@ (801b0d0 <report_last_signals_event+0x4c>)
 801b098:	f8b4 1080 	ldrh.w	r1, [r4, #128]	@ 0x80
 801b09c:	4660      	mov	r0, ip
 801b09e:	f7fc fd6f 	bl	8017b80 <control_signals_tostring>
    *append++ = ',';
 801b0a2:	232c      	movs	r3, #44	@ 0x2c
 801b0a4:	f800 3b01 	strb.w	r3, [r0], #1
    append = add_limits(append, sys.last_event.limits);
 801b0a8:	f8d4 1082 	ldr.w	r1, [r4, #130]	@ 0x82
 801b0ac:	f7fc fe03 	bl	8017cb6 <add_limits>
    hal.stream.write(buf);
 801b0b0:	4c08      	ldr	r4, [pc, #32]	@ (801b0d4 <report_last_signals_event+0x50>)
 801b0b2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b0b6:	4628      	mov	r0, r5
 801b0b8:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 801b0ba:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b0be:	4806      	ldr	r0, [pc, #24]	@ (801b0d8 <report_last_signals_event+0x54>)
 801b0c0:	4798      	blx	r3
}
 801b0c2:	2000      	movs	r0, #0
 801b0c4:	bd38      	pop	{r3, r4, r5, pc}
 801b0c6:	bf00      	nop
 801b0c8:	20001a94 	.word	0x20001a94
 801b0cc:	0802baf0 	.word	0x0802baf0
 801b0d0:	2000148c 	.word	0x2000148c
 801b0d4:	200011ac 	.word	0x200011ac
 801b0d8:	0802b3b0 	.word	0x0802b3b0

0801b0dc <report_current_limit_state>:
{
 801b0dc:	b570      	push	{r4, r5, r6, lr}
 801b0de:	b082      	sub	sp, #8
    strcpy(buf, "[LIMITS:");
 801b0e0:	4e0c      	ldr	r6, [pc, #48]	@ (801b114 <report_current_limit_state+0x38>)
 801b0e2:	4b0d      	ldr	r3, [pc, #52]	@ (801b118 <report_current_limit_state+0x3c>)
 801b0e4:	4634      	mov	r4, r6
 801b0e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b0ea:	c403      	stmia	r4!, {r0, r1}
 801b0ec:	7022      	strb	r2, [r4, #0]
    append = add_limits(append, hal.limits.get_state());
 801b0ee:	4d0b      	ldr	r5, [pc, #44]	@ (801b11c <report_current_limit_state+0x40>)
 801b0f0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 801b0f2:	4798      	blx	r3
 801b0f4:	4601      	mov	r1, r0
 801b0f6:	9001      	str	r0, [sp, #4]
 801b0f8:	4620      	mov	r0, r4
 801b0fa:	f7fc fddc 	bl	8017cb6 <add_limits>
    hal.stream.write(buf);
 801b0fe:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801b102:	4630      	mov	r0, r6
 801b104:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 801b106:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801b10a:	4805      	ldr	r0, [pc, #20]	@ (801b120 <report_current_limit_state+0x44>)
 801b10c:	4798      	blx	r3
}
 801b10e:	2000      	movs	r0, #0
 801b110:	b002      	add	sp, #8
 801b112:	bd70      	pop	{r4, r5, r6, pc}
 801b114:	20001a94 	.word	0x20001a94
 801b118:	0802bb00 	.word	0x0802bb00
 801b11c:	200011ac 	.word	0x200011ac
 801b120:	0802b3b0 	.word	0x0802b3b0

0801b124 <report_current_home_signal_state>:
{
 801b124:	b530      	push	{r4, r5, lr}
 801b126:	b083      	sub	sp, #12
    home_signals_t home = hal.homing.get_state();
 801b128:	4d18      	ldr	r5, [pc, #96]	@ (801b18c <report_current_home_signal_state+0x68>)
 801b12a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 801b12c:	4798      	blx	r3
 801b12e:	f8ad 0004 	strh.w	r0, [sp, #4]
    strcpy(buf, "[HOMES:");
 801b132:	4b17      	ldr	r3, [pc, #92]	@ (801b190 <report_current_home_signal_state+0x6c>)
 801b134:	4a17      	ldr	r2, [pc, #92]	@ (801b194 <report_current_home_signal_state+0x70>)
 801b136:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b13a:	e883 0003 	stmia.w	r3, {r0, r1}
    append = axis_signals_tostring(append, home.a);
 801b13e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801b142:	1dd8      	adds	r0, r3, #7
 801b144:	f7fc fd04 	bl	8017b50 <axis_signals_tostring>
    *append++ = ',';
 801b148:	232c      	movs	r3, #44	@ 0x2c
 801b14a:	f800 3b01 	strb.w	r3, [r0], #1
    append = axis_signals_tostring(append, home.b);
 801b14e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801b152:	f7fc fcfd 	bl	8017b50 <axis_signals_tostring>
 801b156:	4604      	mov	r4, r0
    strcat(append, hal.home_cap.a.mask ? ":H" : ":L");
 801b158:	f895 31e2 	ldrb.w	r3, [r5, #482]	@ 0x1e2
 801b15c:	b1a3      	cbz	r3, 801b188 <report_current_home_signal_state+0x64>
 801b15e:	4d0e      	ldr	r5, [pc, #56]	@ (801b198 <report_current_home_signal_state+0x74>)
 801b160:	4620      	mov	r0, r4
 801b162:	f7ec ffcd 	bl	8008100 <strlen>
 801b166:	1823      	adds	r3, r4, r0
 801b168:	8829      	ldrh	r1, [r5, #0]
 801b16a:	78aa      	ldrb	r2, [r5, #2]
 801b16c:	5221      	strh	r1, [r4, r0]
 801b16e:	709a      	strb	r2, [r3, #2]
    hal.stream.write(buf);
 801b170:	4c06      	ldr	r4, [pc, #24]	@ (801b18c <report_current_home_signal_state+0x68>)
 801b172:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b176:	4806      	ldr	r0, [pc, #24]	@ (801b190 <report_current_home_signal_state+0x6c>)
 801b178:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 801b17a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b17e:	4807      	ldr	r0, [pc, #28]	@ (801b19c <report_current_home_signal_state+0x78>)
 801b180:	4798      	blx	r3
}
 801b182:	2000      	movs	r0, #0
 801b184:	b003      	add	sp, #12
 801b186:	bd30      	pop	{r4, r5, pc}
    strcat(append, hal.home_cap.a.mask ? ":H" : ":L");
 801b188:	4d05      	ldr	r5, [pc, #20]	@ (801b1a0 <report_current_home_signal_state+0x7c>)
 801b18a:	e7e9      	b.n	801b160 <report_current_home_signal_state+0x3c>
 801b18c:	200011ac 	.word	0x200011ac
 801b190:	20001a94 	.word	0x20001a94
 801b194:	0802bb14 	.word	0x0802bb14
 801b198:	0802bb0c 	.word	0x0802bb0c
 801b19c:	0802b3b0 	.word	0x0802b3b0
 801b1a0:	0802bb10 	.word	0x0802bb10

0801b1a4 <report_spindle_data>:
{
 801b1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1a8:	ed2d 8b02 	vpush	{d8}
    spindle_ptrs_t *spindle = gc_spindle_get();
 801b1ac:	f7f1 fe24 	bl	800cdf8 <gc_spindle_get>
 801b1b0:	4605      	mov	r5, r0
    if(spindle->get_data) {
 801b1b2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	d037      	beq.n	801b228 <report_spindle_data+0x84>
        float apos = spindle->get_data(SpindleData_AngularPosition)->angular_position;
 801b1b8:	2002      	movs	r0, #2
 801b1ba:	4798      	blx	r3
 801b1bc:	ed90 8a03 	vldr	s16, [r0, #12]
        spindle_data_t *data = spindle->get_data(SpindleData_Counters);
 801b1c0:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 801b1c2:	2000      	movs	r0, #0
 801b1c4:	4798      	blx	r3
 801b1c6:	4606      	mov	r6, r0
        hal.stream.write("[SPINDLEENCODER:");
 801b1c8:	4c1c      	ldr	r4, [pc, #112]	@ (801b23c <report_spindle_data+0x98>)
 801b1ca:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b1ce:	481c      	ldr	r0, [pc, #112]	@ (801b240 <report_spindle_data+0x9c>)
 801b1d0:	4798      	blx	r3
        hal.stream.write(uitoa(data->index_count));
 801b1d2:	f8d4 70b4 	ldr.w	r7, [r4, #180]	@ 0xb4
 801b1d6:	6970      	ldr	r0, [r6, #20]
 801b1d8:	f7f9 ffd0 	bl	801517c <uitoa>
 801b1dc:	47b8      	blx	r7
        hal.stream.write(",");
 801b1de:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b1e2:	4f18      	ldr	r7, [pc, #96]	@ (801b244 <report_spindle_data+0xa0>)
 801b1e4:	4638      	mov	r0, r7
 801b1e6:	4798      	blx	r3
        hal.stream.write(uitoa(data->pulse_count));
 801b1e8:	f8d4 80b4 	ldr.w	r8, [r4, #180]	@ 0xb4
 801b1ec:	69b0      	ldr	r0, [r6, #24]
 801b1ee:	f7f9 ffc5 	bl	801517c <uitoa>
 801b1f2:	47c0      	blx	r8
        hal.stream.write(",");
 801b1f4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b1f8:	4638      	mov	r0, r7
 801b1fa:	4798      	blx	r3
        hal.stream.write(uitoa(data->error_count));
 801b1fc:	f8d4 80b4 	ldr.w	r8, [r4, #180]	@ 0xb4
 801b200:	69f0      	ldr	r0, [r6, #28]
 801b202:	f7f9 ffbb 	bl	801517c <uitoa>
 801b206:	47c0      	blx	r8
        hal.stream.write(",");
 801b208:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b20c:	4638      	mov	r0, r7
 801b20e:	4798      	blx	r3
        hal.stream.write(ftoa(apos, 3));
 801b210:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 801b214:	2003      	movs	r0, #3
 801b216:	eeb0 0a48 	vmov.f32	s0, s16
 801b21a:	f7f9 ffd1 	bl	80151c0 <ftoa>
 801b21e:	47b0      	blx	r6
        hal.stream.write("]" ASCII_EOL);
 801b220:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b224:	4808      	ldr	r0, [pc, #32]	@ (801b248 <report_spindle_data+0xa4>)
 801b226:	4798      	blx	r3
    return spindle->get_data ? Status_OK : Status_InvalidStatement;
 801b228:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 801b22a:	b123      	cbz	r3, 801b236 <report_spindle_data+0x92>
 801b22c:	2000      	movs	r0, #0
}
 801b22e:	ecbd 8b02 	vpop	{d8}
 801b232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return spindle->get_data ? Status_OK : Status_InvalidStatement;
 801b236:	2003      	movs	r0, #3
 801b238:	e7f9      	b.n	801b22e <report_spindle_data+0x8a>
 801b23a:	bf00      	nop
 801b23c:	200011ac 	.word	0x200011ac
 801b240:	0802bb1c 	.word	0x0802bb1c
 801b244:	0802b7dc 	.word	0x0802b7dc
 801b248:	0802b3b0 	.word	0x0802b3b0

0801b24c <report_pins>:
{
 801b24c:	b500      	push	{lr}
 801b24e:	b085      	sub	sp, #20
    pin_data_t pin_data = {0};
 801b250:	2300      	movs	r3, #0
 801b252:	9301      	str	r3, [sp, #4]
 801b254:	9302      	str	r3, [sp, #8]
 801b256:	9303      	str	r3, [sp, #12]
    if(hal.enumerate_pins) {
 801b258:	4b1e      	ldr	r3, [pc, #120]	@ (801b2d4 <report_pins+0x88>)
 801b25a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 801b25e:	b363      	cbz	r3, 801b2ba <report_pins+0x6e>
        hal.enumerate_pins(false, count_pins, (void *)&pin_data);
 801b260:	aa01      	add	r2, sp, #4
 801b262:	491d      	ldr	r1, [pc, #116]	@ (801b2d8 <report_pins+0x8c>)
 801b264:	2000      	movs	r0, #0
 801b266:	4798      	blx	r3
        if((pin_data.pins = malloc(pin_data.n_pins * sizeof(pin_info_t)))) {
 801b268:	9802      	ldr	r0, [sp, #8]
 801b26a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b26e:	00c0      	lsls	r0, r0, #3
 801b270:	f007 f83c 	bl	80222ec <malloc>
 801b274:	9003      	str	r0, [sp, #12]
 801b276:	b320      	cbz	r0, 801b2c2 <report_pins+0x76>
            hal.enumerate_pins(false, get_pins, (void *)&pin_data);
 801b278:	4b16      	ldr	r3, [pc, #88]	@ (801b2d4 <report_pins+0x88>)
 801b27a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 801b27e:	aa01      	add	r2, sp, #4
 801b280:	4916      	ldr	r1, [pc, #88]	@ (801b2dc <report_pins+0x90>)
 801b282:	2000      	movs	r0, #0
 801b284:	4798      	blx	r3
            qsort(pin_data.pins, pin_data.n_pins, sizeof(pin_info_t), cmp_pins);
 801b286:	4b16      	ldr	r3, [pc, #88]	@ (801b2e0 <report_pins+0x94>)
 801b288:	2218      	movs	r2, #24
 801b28a:	9902      	ldr	r1, [sp, #8]
 801b28c:	9803      	ldr	r0, [sp, #12]
 801b28e:	f007 ffe2 	bl	8023256 <qsort>
            for(pin_data.idx = 0; pin_data.idx < pin_data.n_pins; pin_data.idx++)
 801b292:	2300      	movs	r3, #0
 801b294:	9301      	str	r3, [sp, #4]
 801b296:	e009      	b.n	801b2ac <report_pins+0x60>
                report_pin_info(&pin_data.pins[pin_data.idx]);
 801b298:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b29c:	9b03      	ldr	r3, [sp, #12]
 801b29e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801b2a2:	f7fd fd8d 	bl	8018dc0 <report_pin_info>
            for(pin_data.idx = 0; pin_data.idx < pin_data.n_pins; pin_data.idx++)
 801b2a6:	9b01      	ldr	r3, [sp, #4]
 801b2a8:	3301      	adds	r3, #1
 801b2aa:	9301      	str	r3, [sp, #4]
 801b2ac:	9801      	ldr	r0, [sp, #4]
 801b2ae:	9b02      	ldr	r3, [sp, #8]
 801b2b0:	4298      	cmp	r0, r3
 801b2b2:	d3f1      	bcc.n	801b298 <report_pins+0x4c>
            free(pin_data.pins);
 801b2b4:	9803      	ldr	r0, [sp, #12]
 801b2b6:	f007 f821 	bl	80222fc <free>
}
 801b2ba:	2000      	movs	r0, #0
 801b2bc:	b005      	add	sp, #20
 801b2be:	f85d fb04 	ldr.w	pc, [sp], #4
            hal.enumerate_pins(false, report_pin, NULL);
 801b2c2:	4b04      	ldr	r3, [pc, #16]	@ (801b2d4 <report_pins+0x88>)
 801b2c4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 801b2c8:	2200      	movs	r2, #0
 801b2ca:	4906      	ldr	r1, [pc, #24]	@ (801b2e4 <report_pins+0x98>)
 801b2cc:	4610      	mov	r0, r2
 801b2ce:	4798      	blx	r3
 801b2d0:	e7f3      	b.n	801b2ba <report_pins+0x6e>
 801b2d2:	bf00      	nop
 801b2d4:	200011ac 	.word	0x200011ac
 801b2d8:	08017cef 	.word	0x08017cef
 801b2dc:	08018305 	.word	0x08018305
 801b2e0:	08017cf7 	.word	0x08017cf7
 801b2e4:	08018e31 	.word	0x08018e31

0801b2e8 <report_pin_states>:
{
 801b2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if((ports = ioports_available(Port_Digital, Port_Input))) {
 801b2ec:	2100      	movs	r1, #0
 801b2ee:	2001      	movs	r0, #1
 801b2f0:	f7f6 fa28 	bl	8011744 <ioports_available>
 801b2f4:	2800      	cmp	r0, #0
 801b2f6:	f040 80b3 	bne.w	801b460 <report_pin_states+0x178>
    if((ports = ioports_available(Port_Digital, Port_Output))) {
 801b2fa:	2101      	movs	r1, #1
 801b2fc:	4608      	mov	r0, r1
 801b2fe:	f7f6 fa21 	bl	8011744 <ioports_available>
 801b302:	4607      	mov	r7, r0
 801b304:	2800      	cmp	r0, #0
 801b306:	f040 8110 	bne.w	801b52a <report_pin_states+0x242>
    if((ports = ioports_available(Port_Analog, Port_Input))) {
 801b30a:	2100      	movs	r1, #0
 801b30c:	4608      	mov	r0, r1
 801b30e:	f7f6 fa19 	bl	8011744 <ioports_available>
 801b312:	4607      	mov	r7, r0
 801b314:	2800      	cmp	r0, #0
 801b316:	f040 8146 	bne.w	801b5a6 <report_pin_states+0x2be>
    if((ports = ioports_available(Port_Analog, Port_Output))) {
 801b31a:	2101      	movs	r1, #1
 801b31c:	2000      	movs	r0, #0
 801b31e:	f7f6 fa11 	bl	8011744 <ioports_available>
 801b322:	4607      	mov	r7, r0
 801b324:	2800      	cmp	r0, #0
 801b326:	f040 81c3 	bne.w	801b6b0 <report_pin_states+0x3c8>
}
 801b32a:	2000      	movs	r0, #0
 801b32c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                hal.stream.write(port->description ? port->description : xbar_fn_to_pinname(port->function));
 801b330:	7860      	ldrb	r0, [r4, #1]
 801b332:	f7f1 faa9 	bl	800c888 <xbar_fn_to_pinname>
 801b336:	e04e      	b.n	801b3d6 <report_pin_states+0xee>
                hal.stream.write(port->mode.inverted ? "I" : "N");
 801b338:	48a6      	ldr	r0, [pc, #664]	@ (801b5d4 <report_pin_states+0x2ec>)
 801b33a:	e065      	b.n	801b408 <report_pin_states+0x120>
                hal.stream.write(port->mode.debounce ? "D" : "-");
 801b33c:	48a6      	ldr	r0, [pc, #664]	@ (801b5d8 <report_pin_states+0x2f0>)
 801b33e:	e07c      	b.n	801b43a <report_pin_states+0x152>
                hal.stream.write(port->cap.invert ? "I" : "-");
 801b340:	48a6      	ldr	r0, [pc, #664]	@ (801b5dc <report_pin_states+0x2f4>)
 801b342:	4798      	blx	r3
                hal.stream.write(pull_mode((pull_mode_t)port->cap.pull_mode));
 801b344:	4ea6      	ldr	r6, [pc, #664]	@ (801b5e0 <report_pin_states+0x2f8>)
 801b346:	f8d6 80b4 	ldr.w	r8, [r6, #180]	@ 0xb4
 801b34a:	7d20      	ldrb	r0, [r4, #20]
 801b34c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 801b350:	f7fc fd10 	bl	8017d74 <pull_mode>
 801b354:	47c0      	blx	r8
                hal.stream.write(irq_mode((pin_irq_mode_t)port->cap.irq_mode));
 801b356:	f8d6 80b4 	ldr.w	r8, [r6, #180]	@ 0xb4
 801b35a:	8aa0      	ldrh	r0, [r4, #20]
 801b35c:	f3c0 1044 	ubfx	r0, r0, #5, #5
 801b360:	f7fc fcce 	bl	8017d00 <irq_mode>
 801b364:	47c0      	blx	r8
                hal.stream.write(port->cap.debounce ? "D" : "-");
 801b366:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b36a:	f994 2015 	ldrsb.w	r2, [r4, #21]
 801b36e:	2a00      	cmp	r2, #0
 801b370:	db72      	blt.n	801b458 <report_pin_states+0x170>
 801b372:	489a      	ldr	r0, [pc, #616]	@ (801b5dc <report_pin_states+0x2f4>)
 801b374:	4798      	blx	r3
                hal.stream.write("|");
 801b376:	4e9a      	ldr	r6, [pc, #616]	@ (801b5e0 <report_pin_states+0x2f8>)
 801b378:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b37c:	4899      	ldr	r0, [pc, #612]	@ (801b5e4 <report_pin_states+0x2fc>)
 801b37e:	4798      	blx	r3
                hal.stream.write(port->get_value ? uitoa((uint32_t)port->get_value(port)) : "?");
 801b380:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801b384:	69e3      	ldr	r3, [r4, #28]
 801b386:	2b00      	cmp	r3, #0
 801b388:	d068      	beq.n	801b45c <report_pin_states+0x174>
 801b38a:	4620      	mov	r0, r4
 801b38c:	4798      	blx	r3
 801b38e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801b392:	ee17 0a90 	vmov	r0, s15
 801b396:	f7f9 fef1 	bl	801517c <uitoa>
 801b39a:	47b0      	blx	r6
                hal.stream.write("]" ASCII_EOL);
 801b39c:	4b90      	ldr	r3, [pc, #576]	@ (801b5e0 <report_pin_states+0x2f8>)
 801b39e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b3a2:	4891      	ldr	r0, [pc, #580]	@ (801b5e8 <report_pin_states+0x300>)
 801b3a4:	4798      	blx	r3
        for(idx = 0; idx < ports; idx++) {
 801b3a6:	3501      	adds	r5, #1
 801b3a8:	b2ed      	uxtb	r5, r5
 801b3aa:	42bd      	cmp	r5, r7
 801b3ac:	d2a5      	bcs.n	801b2fa <report_pin_states+0x12>
            if((port = hal.port.get_pin_info(Port_Digital, Port_Input, idx))) {
 801b3ae:	4b8c      	ldr	r3, [pc, #560]	@ (801b5e0 <report_pin_states+0x2f8>)
 801b3b0:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801b3b4:	462a      	mov	r2, r5
 801b3b6:	2100      	movs	r1, #0
 801b3b8:	2001      	movs	r0, #1
 801b3ba:	4798      	blx	r3
 801b3bc:	4604      	mov	r4, r0
 801b3be:	2800      	cmp	r0, #0
 801b3c0:	d0f1      	beq.n	801b3a6 <report_pin_states+0xbe>
                hal.stream.write("[PINSTATE:DIN|");
 801b3c2:	4e87      	ldr	r6, [pc, #540]	@ (801b5e0 <report_pin_states+0x2f8>)
 801b3c4:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b3c8:	4888      	ldr	r0, [pc, #544]	@ (801b5ec <report_pin_states+0x304>)
 801b3ca:	4798      	blx	r3
                hal.stream.write(port->description ? port->description : xbar_fn_to_pinname(port->function));
 801b3cc:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801b3d0:	68e0      	ldr	r0, [r4, #12]
 801b3d2:	2800      	cmp	r0, #0
 801b3d4:	d0ac      	beq.n	801b330 <report_pin_states+0x48>
 801b3d6:	47b0      	blx	r6
                hal.stream.write("|");
 801b3d8:	4e81      	ldr	r6, [pc, #516]	@ (801b5e0 <report_pin_states+0x2f8>)
 801b3da:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b3de:	f8df 8204 	ldr.w	r8, [pc, #516]	@ 801b5e4 <report_pin_states+0x2fc>
 801b3e2:	4640      	mov	r0, r8
 801b3e4:	4798      	blx	r3
                hal.stream.write(uitoa(port->id));
 801b3e6:	f8d6 90b4 	ldr.w	r9, [r6, #180]	@ 0xb4
 801b3ea:	7820      	ldrb	r0, [r4, #0]
 801b3ec:	f7f9 fec6 	bl	801517c <uitoa>
 801b3f0:	47c8      	blx	r9
                hal.stream.write("|");
 801b3f2:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b3f6:	4640      	mov	r0, r8
 801b3f8:	4798      	blx	r3
                hal.stream.write(port->mode.inverted ? "I" : "N");
 801b3fa:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b3fe:	7de2      	ldrb	r2, [r4, #23]
 801b400:	f012 0f04 	tst.w	r2, #4
 801b404:	d098      	beq.n	801b338 <report_pin_states+0x50>
 801b406:	487a      	ldr	r0, [pc, #488]	@ (801b5f0 <report_pin_states+0x308>)
 801b408:	4798      	blx	r3
                hal.stream.write(pull_mode((pull_mode_t)port->mode.pull_mode));
 801b40a:	4e75      	ldr	r6, [pc, #468]	@ (801b5e0 <report_pin_states+0x2f8>)
 801b40c:	f8d6 80b4 	ldr.w	r8, [r6, #180]	@ 0xb4
 801b410:	7da0      	ldrb	r0, [r4, #22]
 801b412:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 801b416:	f7fc fcad 	bl	8017d74 <pull_mode>
 801b41a:	47c0      	blx	r8
                hal.stream.write(irq_mode((pin_irq_mode_t)port->mode.irq_mode));
 801b41c:	f8d6 80b4 	ldr.w	r8, [r6, #180]	@ 0xb4
 801b420:	8ae0      	ldrh	r0, [r4, #22]
 801b422:	f3c0 1044 	ubfx	r0, r0, #5, #5
 801b426:	f7fc fc6b 	bl	8017d00 <irq_mode>
 801b42a:	47c0      	blx	r8
                hal.stream.write(port->mode.debounce ? "D" : "-");
 801b42c:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b430:	f994 2017 	ldrsb.w	r2, [r4, #23]
 801b434:	2a00      	cmp	r2, #0
 801b436:	db81      	blt.n	801b33c <report_pin_states+0x54>
 801b438:	4868      	ldr	r0, [pc, #416]	@ (801b5dc <report_pin_states+0x2f4>)
 801b43a:	4798      	blx	r3
                hal.stream.write("|");
 801b43c:	4e68      	ldr	r6, [pc, #416]	@ (801b5e0 <report_pin_states+0x2f8>)
 801b43e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b442:	4868      	ldr	r0, [pc, #416]	@ (801b5e4 <report_pin_states+0x2fc>)
 801b444:	4798      	blx	r3
                hal.stream.write(port->cap.invert ? "I" : "-");
 801b446:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b44a:	7d62      	ldrb	r2, [r4, #21]
 801b44c:	f012 0f04 	tst.w	r2, #4
 801b450:	f43f af76 	beq.w	801b340 <report_pin_states+0x58>
 801b454:	4866      	ldr	r0, [pc, #408]	@ (801b5f0 <report_pin_states+0x308>)
 801b456:	e774      	b.n	801b342 <report_pin_states+0x5a>
                hal.stream.write(port->cap.debounce ? "D" : "-");
 801b458:	485f      	ldr	r0, [pc, #380]	@ (801b5d8 <report_pin_states+0x2f0>)
 801b45a:	e78b      	b.n	801b374 <report_pin_states+0x8c>
                hal.stream.write(port->get_value ? uitoa((uint32_t)port->get_value(port)) : "?");
 801b45c:	4865      	ldr	r0, [pc, #404]	@ (801b5f4 <report_pin_states+0x30c>)
 801b45e:	e79c      	b.n	801b39a <report_pin_states+0xb2>
 801b460:	4607      	mov	r7, r0
        for(idx = 0; idx < ports; idx++) {
 801b462:	2500      	movs	r5, #0
 801b464:	e7a1      	b.n	801b3aa <report_pin_states+0xc2>
                hal.stream.write(port->description ? port->description : xbar_fn_to_pinname(port->function));
 801b466:	7868      	ldrb	r0, [r5, #1]
 801b468:	f7f1 fa0e 	bl	800c888 <xbar_fn_to_pinname>
 801b46c:	e034      	b.n	801b4d8 <report_pin_states+0x1f0>
                hal.stream.write(port->mode.inverted ? "I" : "N");
 801b46e:	4859      	ldr	r0, [pc, #356]	@ (801b5d4 <report_pin_states+0x2ec>)
 801b470:	e04b      	b.n	801b50a <report_pin_states+0x222>
                hal.stream.write(port->cap.invert ? "I" : "-");
 801b472:	485a      	ldr	r0, [pc, #360]	@ (801b5dc <report_pin_states+0x2f4>)
 801b474:	4798      	blx	r3
                hal.stream.write("|");
 801b476:	4e5a      	ldr	r6, [pc, #360]	@ (801b5e0 <report_pin_states+0x2f8>)
 801b478:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b47c:	4859      	ldr	r0, [pc, #356]	@ (801b5e4 <report_pin_states+0x2fc>)
 801b47e:	4798      	blx	r3
                hal.stream.write(port->get_value ? uitoa((uint32_t)port->get_value(port)) : "?");
 801b480:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801b484:	69eb      	ldr	r3, [r5, #28]
 801b486:	2b00      	cmp	r3, #0
 801b488:	d04d      	beq.n	801b526 <report_pin_states+0x23e>
 801b48a:	4628      	mov	r0, r5
 801b48c:	4798      	blx	r3
 801b48e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801b492:	ee17 0a90 	vmov	r0, s15
 801b496:	f7f9 fe71 	bl	801517c <uitoa>
 801b49a:	47b0      	blx	r6
                hal.stream.write("]" ASCII_EOL);
 801b49c:	4b50      	ldr	r3, [pc, #320]	@ (801b5e0 <report_pin_states+0x2f8>)
 801b49e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b4a2:	4851      	ldr	r0, [pc, #324]	@ (801b5e8 <report_pin_states+0x300>)
 801b4a4:	4798      	blx	r3
        for(idx = 0; idx < ports; idx++) {
 801b4a6:	3401      	adds	r4, #1
 801b4a8:	b2e4      	uxtb	r4, r4
 801b4aa:	42bc      	cmp	r4, r7
 801b4ac:	f4bf af2d 	bcs.w	801b30a <report_pin_states+0x22>
            if((port = hal.port.get_pin_info(Port_Digital, Port_Output, idx))) {
 801b4b0:	4b4b      	ldr	r3, [pc, #300]	@ (801b5e0 <report_pin_states+0x2f8>)
 801b4b2:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801b4b6:	4622      	mov	r2, r4
 801b4b8:	2101      	movs	r1, #1
 801b4ba:	4608      	mov	r0, r1
 801b4bc:	4798      	blx	r3
 801b4be:	4605      	mov	r5, r0
 801b4c0:	2800      	cmp	r0, #0
 801b4c2:	d0f0      	beq.n	801b4a6 <report_pin_states+0x1be>
                hal.stream.write("[PINSTATE:DOUT|");
 801b4c4:	4e46      	ldr	r6, [pc, #280]	@ (801b5e0 <report_pin_states+0x2f8>)
 801b4c6:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b4ca:	484b      	ldr	r0, [pc, #300]	@ (801b5f8 <report_pin_states+0x310>)
 801b4cc:	4798      	blx	r3
                hal.stream.write(port->description ? port->description : xbar_fn_to_pinname(port->function));
 801b4ce:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801b4d2:	68e8      	ldr	r0, [r5, #12]
 801b4d4:	2800      	cmp	r0, #0
 801b4d6:	d0c6      	beq.n	801b466 <report_pin_states+0x17e>
 801b4d8:	47b0      	blx	r6
                hal.stream.write("|");
 801b4da:	4e41      	ldr	r6, [pc, #260]	@ (801b5e0 <report_pin_states+0x2f8>)
 801b4dc:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b4e0:	f8df 8100 	ldr.w	r8, [pc, #256]	@ 801b5e4 <report_pin_states+0x2fc>
 801b4e4:	4640      	mov	r0, r8
 801b4e6:	4798      	blx	r3
                hal.stream.write(uitoa(port->id));
 801b4e8:	f8d6 90b4 	ldr.w	r9, [r6, #180]	@ 0xb4
 801b4ec:	7828      	ldrb	r0, [r5, #0]
 801b4ee:	f7f9 fe45 	bl	801517c <uitoa>
 801b4f2:	47c8      	blx	r9
                hal.stream.write("|");
 801b4f4:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b4f8:	4640      	mov	r0, r8
 801b4fa:	4798      	blx	r3
                hal.stream.write(port->mode.inverted ? "I" : "N");
 801b4fc:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b500:	7dea      	ldrb	r2, [r5, #23]
 801b502:	f012 0f04 	tst.w	r2, #4
 801b506:	d0b2      	beq.n	801b46e <report_pin_states+0x186>
 801b508:	4839      	ldr	r0, [pc, #228]	@ (801b5f0 <report_pin_states+0x308>)
 801b50a:	4798      	blx	r3
                hal.stream.write("|");
 801b50c:	4e34      	ldr	r6, [pc, #208]	@ (801b5e0 <report_pin_states+0x2f8>)
 801b50e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b512:	4834      	ldr	r0, [pc, #208]	@ (801b5e4 <report_pin_states+0x2fc>)
 801b514:	4798      	blx	r3
                hal.stream.write(port->cap.invert ? "I" : "-");
 801b516:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b51a:	7d6a      	ldrb	r2, [r5, #21]
 801b51c:	f012 0f04 	tst.w	r2, #4
 801b520:	d0a7      	beq.n	801b472 <report_pin_states+0x18a>
 801b522:	4833      	ldr	r0, [pc, #204]	@ (801b5f0 <report_pin_states+0x308>)
 801b524:	e7a6      	b.n	801b474 <report_pin_states+0x18c>
                hal.stream.write(port->get_value ? uitoa((uint32_t)port->get_value(port)) : "?");
 801b526:	4833      	ldr	r0, [pc, #204]	@ (801b5f4 <report_pin_states+0x30c>)
 801b528:	e7b7      	b.n	801b49a <report_pin_states+0x1b2>
        for(idx = 0; idx < ports; idx++) {
 801b52a:	2400      	movs	r4, #0
 801b52c:	e7bd      	b.n	801b4aa <report_pin_states+0x1c2>
                hal.stream.write(port->get_value ? ftoa((uint32_t)port->get_value(port), 2) : "?");
 801b52e:	4831      	ldr	r0, [pc, #196]	@ (801b5f4 <report_pin_states+0x30c>)
 801b530:	47a8      	blx	r5
                hal.stream.write("]" ASCII_EOL);
 801b532:	4b2b      	ldr	r3, [pc, #172]	@ (801b5e0 <report_pin_states+0x2f8>)
 801b534:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b538:	482b      	ldr	r0, [pc, #172]	@ (801b5e8 <report_pin_states+0x300>)
 801b53a:	4798      	blx	r3
        for(idx = 0; idx < ports; idx++) {
 801b53c:	3401      	adds	r4, #1
 801b53e:	b2e4      	uxtb	r4, r4
 801b540:	42bc      	cmp	r4, r7
 801b542:	f4bf aeea 	bcs.w	801b31a <report_pin_states+0x32>
            if((port = hal.port.get_pin_info(Port_Analog, Port_Input, idx))) {
 801b546:	4b26      	ldr	r3, [pc, #152]	@ (801b5e0 <report_pin_states+0x2f8>)
 801b548:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801b54c:	4622      	mov	r2, r4
 801b54e:	2100      	movs	r1, #0
 801b550:	4608      	mov	r0, r1
 801b552:	4798      	blx	r3
 801b554:	4606      	mov	r6, r0
 801b556:	2800      	cmp	r0, #0
 801b558:	d0f0      	beq.n	801b53c <report_pin_states+0x254>
                hal.stream.write("[PINSTATE:AIN|");
 801b55a:	4d21      	ldr	r5, [pc, #132]	@ (801b5e0 <report_pin_states+0x2f8>)
 801b55c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801b560:	4826      	ldr	r0, [pc, #152]	@ (801b5fc <report_pin_states+0x314>)
 801b562:	4798      	blx	r3
                hal.stream.write(port->description);
 801b564:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801b568:	68f0      	ldr	r0, [r6, #12]
 801b56a:	4798      	blx	r3
                hal.stream.write("|");
 801b56c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801b570:	481c      	ldr	r0, [pc, #112]	@ (801b5e4 <report_pin_states+0x2fc>)
 801b572:	4798      	blx	r3
                hal.stream.write(uitoa(port->id));
 801b574:	f8d5 80b4 	ldr.w	r8, [r5, #180]	@ 0xb4
 801b578:	7830      	ldrb	r0, [r6, #0]
 801b57a:	f7f9 fdff 	bl	801517c <uitoa>
 801b57e:	47c0      	blx	r8
                hal.stream.write("|||");
 801b580:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801b584:	481e      	ldr	r0, [pc, #120]	@ (801b600 <report_pin_states+0x318>)
 801b586:	4798      	blx	r3
                hal.stream.write(port->get_value ? ftoa((uint32_t)port->get_value(port), 2) : "?");
 801b588:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 801b58c:	69f3      	ldr	r3, [r6, #28]
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d0cd      	beq.n	801b52e <report_pin_states+0x246>
 801b592:	4630      	mov	r0, r6
 801b594:	4798      	blx	r3
 801b596:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801b59a:	2002      	movs	r0, #2
 801b59c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801b5a0:	f7f9 fe0e 	bl	80151c0 <ftoa>
 801b5a4:	e7c4      	b.n	801b530 <report_pin_states+0x248>
        for(idx = 0; idx < ports; idx++) {
 801b5a6:	2400      	movs	r4, #0
 801b5a8:	e7ca      	b.n	801b540 <report_pin_states+0x258>
                hal.stream.write(port->mode.pwm ? "P" : (port->mode.servo_pwm ? "S" : "N"));
 801b5aa:	4816      	ldr	r0, [pc, #88]	@ (801b604 <report_pin_states+0x31c>)
 801b5ac:	4790      	blx	r2
                hal.stream.write("|");
 801b5ae:	4e0c      	ldr	r6, [pc, #48]	@ (801b5e0 <report_pin_states+0x2f8>)
 801b5b0:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b5b4:	480b      	ldr	r0, [pc, #44]	@ (801b5e4 <report_pin_states+0x2fc>)
 801b5b6:	4798      	blx	r3
                hal.stream.write(port->cap.pwm ? "P" : (port->cap.servo_pwm ? "S" : "N"));
 801b5b8:	f8d6 20b4 	ldr.w	r2, [r6, #180]	@ 0xb4
 801b5bc:	7d6b      	ldrb	r3, [r5, #21]
 801b5be:	f013 0f10 	tst.w	r3, #16
 801b5c2:	d123      	bne.n	801b60c <report_pin_states+0x324>
 801b5c4:	f013 0f20 	tst.w	r3, #32
 801b5c8:	d06e      	beq.n	801b6a8 <report_pin_states+0x3c0>
 801b5ca:	480f      	ldr	r0, [pc, #60]	@ (801b608 <report_pin_states+0x320>)
 801b5cc:	e01f      	b.n	801b60e <report_pin_states+0x326>
                hal.stream.write(port->mode.pwm ? "P" : (port->mode.servo_pwm ? "S" : "N"));
 801b5ce:	4801      	ldr	r0, [pc, #4]	@ (801b5d4 <report_pin_states+0x2ec>)
 801b5d0:	e7ec      	b.n	801b5ac <report_pin_states+0x2c4>
 801b5d2:	bf00      	nop
 801b5d4:	0802bb34 	.word	0x0802bb34
 801b5d8:	0802b394 	.word	0x0802b394
 801b5dc:	0802b38c 	.word	0x0802b38c
 801b5e0:	200011ac 	.word	0x200011ac
 801b5e4:	0802b3cc 	.word	0x0802b3cc
 801b5e8:	0802b3b0 	.word	0x0802b3b0
 801b5ec:	0802bb44 	.word	0x0802bb44
 801b5f0:	0802bb30 	.word	0x0802bb30
 801b5f4:	0802bb38 	.word	0x0802bb38
 801b5f8:	0802bb54 	.word	0x0802bb54
 801b5fc:	0802bb64 	.word	0x0802bb64
 801b600:	0802bb74 	.word	0x0802bb74
 801b604:	0802bb3c 	.word	0x0802bb3c
 801b608:	0802bb40 	.word	0x0802bb40
                hal.stream.write(port->cap.pwm ? "P" : (port->cap.servo_pwm ? "S" : "N"));
 801b60c:	4829      	ldr	r0, [pc, #164]	@ (801b6b4 <report_pin_states+0x3cc>)
 801b60e:	4790      	blx	r2
                hal.stream.write("|");
 801b610:	4e29      	ldr	r6, [pc, #164]	@ (801b6b8 <report_pin_states+0x3d0>)
 801b612:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b616:	4829      	ldr	r0, [pc, #164]	@ (801b6bc <report_pin_states+0x3d4>)
 801b618:	4798      	blx	r3
                hal.stream.write(port->get_value ? ftoa((uint32_t)port->get_value(port), 2) : "?");
 801b61a:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801b61e:	69eb      	ldr	r3, [r5, #28]
 801b620:	2b00      	cmp	r3, #0
 801b622:	d043      	beq.n	801b6ac <report_pin_states+0x3c4>
 801b624:	4628      	mov	r0, r5
 801b626:	4798      	blx	r3
 801b628:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801b62c:	2002      	movs	r0, #2
 801b62e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801b632:	f7f9 fdc5 	bl	80151c0 <ftoa>
 801b636:	47b0      	blx	r6
                hal.stream.write("]" ASCII_EOL);
 801b638:	4b1f      	ldr	r3, [pc, #124]	@ (801b6b8 <report_pin_states+0x3d0>)
 801b63a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b63e:	4820      	ldr	r0, [pc, #128]	@ (801b6c0 <report_pin_states+0x3d8>)
 801b640:	4798      	blx	r3
        for(idx = 0; idx < ports; idx++) {
 801b642:	3401      	adds	r4, #1
 801b644:	b2e4      	uxtb	r4, r4
 801b646:	42bc      	cmp	r4, r7
 801b648:	f4bf ae6f 	bcs.w	801b32a <report_pin_states+0x42>
            if((port = hal.port.get_pin_info(Port_Analog, Port_Output, idx))) {
 801b64c:	4b1a      	ldr	r3, [pc, #104]	@ (801b6b8 <report_pin_states+0x3d0>)
 801b64e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801b652:	4622      	mov	r2, r4
 801b654:	2101      	movs	r1, #1
 801b656:	2000      	movs	r0, #0
 801b658:	4798      	blx	r3
 801b65a:	4605      	mov	r5, r0
 801b65c:	2800      	cmp	r0, #0
 801b65e:	d0f0      	beq.n	801b642 <report_pin_states+0x35a>
                hal.stream.write("[PINSTATE:AOUT|");
 801b660:	4e15      	ldr	r6, [pc, #84]	@ (801b6b8 <report_pin_states+0x3d0>)
 801b662:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b666:	4817      	ldr	r0, [pc, #92]	@ (801b6c4 <report_pin_states+0x3dc>)
 801b668:	4798      	blx	r3
                hal.stream.write(port->description);
 801b66a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b66e:	68e8      	ldr	r0, [r5, #12]
 801b670:	4798      	blx	r3
                hal.stream.write("|");
 801b672:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b676:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 801b6bc <report_pin_states+0x3d4>
 801b67a:	4640      	mov	r0, r8
 801b67c:	4798      	blx	r3
                hal.stream.write(uitoa(port->id));
 801b67e:	f8d6 90b4 	ldr.w	r9, [r6, #180]	@ 0xb4
 801b682:	7828      	ldrb	r0, [r5, #0]
 801b684:	f7f9 fd7a 	bl	801517c <uitoa>
 801b688:	47c8      	blx	r9
                hal.stream.write("|");
 801b68a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b68e:	4640      	mov	r0, r8
 801b690:	4798      	blx	r3
                hal.stream.write(port->mode.pwm ? "P" : (port->mode.servo_pwm ? "S" : "N"));
 801b692:	f8d6 20b4 	ldr.w	r2, [r6, #180]	@ 0xb4
 801b696:	7deb      	ldrb	r3, [r5, #23]
 801b698:	f013 0f10 	tst.w	r3, #16
 801b69c:	d185      	bne.n	801b5aa <report_pin_states+0x2c2>
 801b69e:	f013 0f20 	tst.w	r3, #32
 801b6a2:	d094      	beq.n	801b5ce <report_pin_states+0x2e6>
 801b6a4:	4808      	ldr	r0, [pc, #32]	@ (801b6c8 <report_pin_states+0x3e0>)
 801b6a6:	e781      	b.n	801b5ac <report_pin_states+0x2c4>
                hal.stream.write(port->cap.pwm ? "P" : (port->cap.servo_pwm ? "S" : "N"));
 801b6a8:	4808      	ldr	r0, [pc, #32]	@ (801b6cc <report_pin_states+0x3e4>)
 801b6aa:	e7b0      	b.n	801b60e <report_pin_states+0x326>
                hal.stream.write(port->get_value ? ftoa((uint32_t)port->get_value(port), 2) : "?");
 801b6ac:	4808      	ldr	r0, [pc, #32]	@ (801b6d0 <report_pin_states+0x3e8>)
 801b6ae:	e7c2      	b.n	801b636 <report_pin_states+0x34e>
        for(idx = 0; idx < ports; idx++) {
 801b6b0:	2400      	movs	r4, #0
 801b6b2:	e7c8      	b.n	801b646 <report_pin_states+0x35e>
 801b6b4:	0802bb3c 	.word	0x0802bb3c
 801b6b8:	200011ac 	.word	0x200011ac
 801b6bc:	0802b3cc 	.word	0x0802b3cc
 801b6c0:	0802b3b0 	.word	0x0802b3b0
 801b6c4:	0802bb78 	.word	0x0802bb78
 801b6c8:	0802bb40 	.word	0x0802bb40
 801b6cc:	0802bb34 	.word	0x0802bb34
 801b6d0:	0802bb38 	.word	0x0802bb38

0801b6d4 <report_time>:
    if(hal.rtc.get_datetime) {
 801b6d4:	4b1c      	ldr	r3, [pc, #112]	@ (801b748 <report_time+0x74>)
 801b6d6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	d031      	beq.n	801b742 <report_time+0x6e>
{
 801b6de:	b530      	push	{r4, r5, lr}
 801b6e0:	b08b      	sub	sp, #44	@ 0x2c
        if((ok = !!hal.rtc.get_datetime(&time))) {
 801b6e2:	a801      	add	r0, sp, #4
 801b6e4:	4798      	blx	r3
 801b6e6:	b350      	cbz	r0, 801b73e <report_time+0x6a>
            hal.stream.write("[RTC:");
 801b6e8:	4c17      	ldr	r4, [pc, #92]	@ (801b748 <report_time+0x74>)
 801b6ea:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b6ee:	4817      	ldr	r0, [pc, #92]	@ (801b74c <report_time+0x78>)
 801b6f0:	4798      	blx	r3
            hal.stream.write(uitoa(time.tm_year + 1900));
 801b6f2:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 801b6f6:	9806      	ldr	r0, [sp, #24]
 801b6f8:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 801b6fc:	f7f9 fd3e 	bl	801517c <uitoa>
 801b700:	47a8      	blx	r5
            print_uito2a("-", time.tm_mon + 1);
 801b702:	4d13      	ldr	r5, [pc, #76]	@ (801b750 <report_time+0x7c>)
 801b704:	9905      	ldr	r1, [sp, #20]
 801b706:	3101      	adds	r1, #1
 801b708:	4628      	mov	r0, r5
 801b70a:	f7fc fc15 	bl	8017f38 <print_uito2a>
            print_uito2a("-", time.tm_mday);
 801b70e:	9904      	ldr	r1, [sp, #16]
 801b710:	4628      	mov	r0, r5
 801b712:	f7fc fc11 	bl	8017f38 <print_uito2a>
            print_uito2a("T", time.tm_hour);
 801b716:	9903      	ldr	r1, [sp, #12]
 801b718:	480e      	ldr	r0, [pc, #56]	@ (801b754 <report_time+0x80>)
 801b71a:	f7fc fc0d 	bl	8017f38 <print_uito2a>
            print_uito2a(":", time.tm_min);
 801b71e:	4d0e      	ldr	r5, [pc, #56]	@ (801b758 <report_time+0x84>)
 801b720:	9902      	ldr	r1, [sp, #8]
 801b722:	4628      	mov	r0, r5
 801b724:	f7fc fc08 	bl	8017f38 <print_uito2a>
            print_uito2a(":", time.tm_sec);
 801b728:	9901      	ldr	r1, [sp, #4]
 801b72a:	4628      	mov	r0, r5
 801b72c:	f7fc fc04 	bl	8017f38 <print_uito2a>
            hal.stream.write("]" ASCII_EOL);
 801b730:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b734:	4809      	ldr	r0, [pc, #36]	@ (801b75c <report_time+0x88>)
 801b736:	4798      	blx	r3
    return ok ? Status_OK : Status_InvalidStatement;
 801b738:	2000      	movs	r0, #0
}
 801b73a:	b00b      	add	sp, #44	@ 0x2c
 801b73c:	bd30      	pop	{r4, r5, pc}
    return ok ? Status_OK : Status_InvalidStatement;
 801b73e:	2003      	movs	r0, #3
 801b740:	e7fb      	b.n	801b73a <report_time+0x66>
 801b742:	2003      	movs	r0, #3
}
 801b744:	4770      	bx	lr
 801b746:	bf00      	nop
 801b748:	200011ac 	.word	0x200011ac
 801b74c:	0802bb88 	.word	0x0802bb88
 801b750:	0802b38c 	.word	0x0802b38c
 801b754:	0802b37c 	.word	0x0802b37c
 801b758:	0802b718 	.word	0x0802b718
 801b75c:	0802b3b0 	.word	0x0802b3b0

0801b760 <report_spindles>:

status_code_t report_spindles (bool machine_readable)
{
 801b760:	b510      	push	{r4, lr}
 801b762:	4604      	mov	r4, r0
    if(!spindle_enumerate_spindles(report_spindle, (void *)machine_readable) && !machine_readable)
 801b764:	4601      	mov	r1, r0
 801b766:	4806      	ldr	r0, [pc, #24]	@ (801b780 <report_spindles+0x20>)
 801b768:	f002 facc 	bl	801dd04 <spindle_enumerate_spindles>
 801b76c:	b928      	cbnz	r0, 801b77a <report_spindles+0x1a>
 801b76e:	b924      	cbnz	r4, 801b77a <report_spindles+0x1a>
        hal.stream.write("No spindles registered." ASCII_EOL);
 801b770:	4b04      	ldr	r3, [pc, #16]	@ (801b784 <report_spindles+0x24>)
 801b772:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b776:	4804      	ldr	r0, [pc, #16]	@ (801b788 <report_spindles+0x28>)
 801b778:	4798      	blx	r3

    return Status_OK;
}
 801b77a:	2000      	movs	r0, #0
 801b77c:	bd10      	pop	{r4, pc}
 801b77e:	bf00      	nop
 801b780:	08017f6d 	.word	0x08017f6d
 801b784:	200011ac 	.word	0x200011ac
 801b788:	0802bb90 	.word	0x0802bb90

0801b78c <report_pid_log>:

void report_pid_log (void)
{
 801b78c:	b508      	push	{r3, lr}
    } while(idx != sys.pid_log.idx);

    hal.stream.write("]" ASCII_EOL);
    grbl.report.status_message(Status_OK);
#else
    grbl.report.status_message(Status_GcodeUnsupportedCommand);
 801b78e:	4b02      	ldr	r3, [pc, #8]	@ (801b798 <report_pid_log+0xc>)
 801b790:	689b      	ldr	r3, [r3, #8]
 801b792:	2014      	movs	r0, #20
 801b794:	4798      	blx	r3
#endif
}
 801b796:	bd08      	pop	{r3, pc}
 801b798:	20001394 	.word	0x20001394

0801b79c <report_init_fns>:
    .alarm_message = report_alarm_message,
    .setting = report_setting
};

void report_init_fns (void)
{
 801b79c:	b538      	push	{r3, r4, r5, lr}
    memcpy(&grbl.report, &report_fns, sizeof(report_t));
 801b79e:	4d07      	ldr	r5, [pc, #28]	@ (801b7bc <report_init_fns+0x20>)
 801b7a0:	46ac      	mov	ip, r5
 801b7a2:	4c07      	ldr	r4, [pc, #28]	@ (801b7c0 <report_init_fns+0x24>)
 801b7a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b7a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b7aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b7ae:	e88c 0003 	stmia.w	ip, {r0, r1}

    if(grbl.on_report_handlers_init)
 801b7b2:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 801b7b4:	b103      	cbz	r3, 801b7b8 <report_init_fns+0x1c>
        grbl.on_report_handlers_init();
 801b7b6:	4798      	blx	r3
}
 801b7b8:	bd38      	pop	{r3, r4, r5, pc}
 801b7ba:	bf00      	nop
 801b7bc:	20001394 	.word	0x20001394
 801b7c0:	0802bbc0 	.word	0x0802bbc0

0801b7c4 <group_is_available>:
};

static bool group_is_available (const setting_group_detail_t *group)
{
    return true;
}
 801b7c4:	2001      	movs	r0, #1
 801b7c6:	4770      	bx	lr

0801b7c8 <restore_override_backup>:

static void restore_override_backup (void)
{
    uint_fast8_t idx = N_AXIS;

    if(override_backup.valid) do {
 801b7c8:	4b08      	ldr	r3, [pc, #32]	@ (801b7ec <restore_override_backup+0x24>)
 801b7ca:	781b      	ldrb	r3, [r3, #0]
 801b7cc:	b16b      	cbz	r3, 801b7ea <restore_override_backup+0x22>
    uint_fast8_t idx = N_AXIS;
 801b7ce:	2303      	movs	r3, #3
        idx--;
 801b7d0:	3b01      	subs	r3, #1
        settings.axis[idx].acceleration = override_backup.acceleration[idx];
 801b7d2:	4a06      	ldr	r2, [pc, #24]	@ (801b7ec <restore_override_backup+0x24>)
 801b7d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b7d8:	6850      	ldr	r0, [r2, #4]
 801b7da:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801b7de:	0091      	lsls	r1, r2, #2
 801b7e0:	4a03      	ldr	r2, [pc, #12]	@ (801b7f0 <restore_override_backup+0x28>)
 801b7e2:	440a      	add	r2, r1
 801b7e4:	6390      	str	r0, [r2, #56]	@ 0x38
    } while(idx);
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d1f2      	bne.n	801b7d0 <restore_override_backup+0x8>
}
 801b7ea:	4770      	bx	lr
 801b7ec:	20001b4c 	.word	0x20001b4c
 801b7f0:	20001bc4 	.word	0x20001bc4

0801b7f4 <set_ganged_dir_invert>:
    return Status_OK;
}

static status_code_t set_ganged_dir_invert (setting_id_t id, uint_fast16_t int_value)
{
    if(!hal.stepper.get_ganged)
 801b7f4:	4b08      	ldr	r3, [pc, #32]	@ (801b818 <set_ganged_dir_invert+0x24>)
 801b7f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801b7fa:	b15b      	cbz	r3, 801b814 <set_ganged_dir_invert+0x20>
{
 801b7fc:	b510      	push	{r4, lr}
 801b7fe:	460c      	mov	r4, r1
        return Status_SettingDisabled;

    settings.steppers.ganged_dir_invert.mask = int_value & hal.stepper.get_ganged(false).mask;
 801b800:	2000      	movs	r0, #0
 801b802:	4798      	blx	r3
 801b804:	b2c0      	uxtb	r0, r0
 801b806:	ea00 0104 	and.w	r1, r0, r4
 801b80a:	4b04      	ldr	r3, [pc, #16]	@ (801b81c <set_ganged_dir_invert+0x28>)
 801b80c:	f883 10ea 	strb.w	r1, [r3, #234]	@ 0xea

    return Status_OK;
 801b810:	2000      	movs	r0, #0
}
 801b812:	bd10      	pop	{r4, pc}
        return Status_SettingDisabled;
 801b814:	2035      	movs	r0, #53	@ 0x35
}
 801b816:	4770      	bx	lr
 801b818:	200011ac 	.word	0x200011ac
 801b81c:	20001bc4 	.word	0x20001bc4

0801b820 <set_stepper_deenergize_mask>:

static status_code_t set_stepper_deenergize_mask (setting_id_t id, uint_fast16_t int_value)
{
 801b820:	b508      	push	{r3, lr}
    settings.steppers.deenergize.mask = int_value;
 801b822:	4b05      	ldr	r3, [pc, #20]	@ (801b838 <set_stepper_deenergize_mask+0x18>)
 801b824:	f883 10ec 	strb.w	r1, [r3, #236]	@ 0xec

    hal.stepper.enable(settings.steppers.deenergize);
 801b828:	4a04      	ldr	r2, [pc, #16]	@ (801b83c <set_stepper_deenergize_mask+0x1c>)
 801b82a:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801b82e:	b2c8      	uxtb	r0, r1
 801b830:	4790      	blx	r2

    return Status_OK;
}
 801b832:	2000      	movs	r0, #0
 801b834:	bd08      	pop	{r3, pc}
 801b836:	bf00      	nop
 801b838:	20001bc4 	.word	0x20001bc4
 801b83c:	200011ac 	.word	0x200011ac

0801b840 <set_report_interval>:

static status_code_t set_report_interval (setting_id_t setting, uint_fast16_t int_value)
{
    if((settings.report_interval = int_value) == 0)
 801b840:	b289      	uxth	r1, r1
 801b842:	4b05      	ldr	r3, [pc, #20]	@ (801b858 <set_report_interval+0x18>)
 801b844:	8299      	strh	r1, [r3, #20]
 801b846:	b921      	cbnz	r1, 801b852 <set_report_interval+0x12>
        sys.flags.auto_reporting = Off;
 801b848:	4b04      	ldr	r3, [pc, #16]	@ (801b85c <set_report_interval+0x1c>)
 801b84a:	7dda      	ldrb	r2, [r3, #23]
 801b84c:	f36f 0241 	bfc	r2, #1, #1
 801b850:	75da      	strb	r2, [r3, #23]

    return Status_OK;
}
 801b852:	2000      	movs	r0, #0
 801b854:	4770      	bx	lr
 801b856:	bf00      	nop
 801b858:	20001bc4 	.word	0x20001bc4
 801b85c:	2000148c 	.word	0x2000148c

0801b860 <set_report_mask>:

static status_code_t set_report_mask (setting_id_t id, uint_fast16_t int_value)
{
#if COMPATIBILITY_LEVEL <= 1
    settings.status_report.mask = int_value;
 801b860:	4b02      	ldr	r3, [pc, #8]	@ (801b86c <set_report_mask+0xc>)
 801b862:	f8a3 10fc 	strh.w	r1, [r3, #252]	@ 0xfc
    int_value &= 0b11;
    settings.status_report.mask = (settings.status_report.mask & ~0b11) | int_value;
#endif

    return Status_OK;
}
 801b866:	2000      	movs	r0, #0
 801b868:	4770      	bx	lr
 801b86a:	bf00      	nop
 801b86c:	20001bc4 	.word	0x20001bc4

0801b870 <set_pwm_mode>:
    return Status_OK;
}

static status_code_t set_pwm_mode (setting_id_t id, uint_fast16_t int_value)
{
    settings.spindle.flags.enable_rpm_controlled = int_value != 0;
 801b870:	3900      	subs	r1, #0
 801b872:	bf18      	it	ne
 801b874:	2101      	movne	r1, #1
 801b876:	4b04      	ldr	r3, [pc, #16]	@ (801b888 <set_pwm_mode+0x18>)
 801b878:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801b87c:	f361 0200 	bfi	r2, r1, #0, #1
 801b880:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7

    return Status_OK;
}
 801b884:	2000      	movs	r0, #0
 801b886:	4770      	bx	lr
 801b888:	20001bc4 	.word	0x20001bc4

0801b88c <set_pwm_options>:

static status_code_t set_pwm_options (setting_id_t id, uint_fast16_t int_value)
{
    if(int_value & 0x001) {
 801b88c:	f011 0f01 	tst.w	r1, #1
 801b890:	d018      	beq.n	801b8c4 <set_pwm_options+0x38>
        if(int_value > 0b111)
 801b892:	2907      	cmp	r1, #7
 801b894:	d829      	bhi.n	801b8ea <set_pwm_options+0x5e>
            return Status_SettingValueOutOfRange;
        settings.spindle.flags.pwm_disable = Off;
 801b896:	4b16      	ldr	r3, [pc, #88]	@ (801b8f0 <set_pwm_options+0x64>)
 801b898:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801b89c:	f36f 12c7 	bfc	r2, #7, #1
 801b8a0:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        settings.spindle.flags.enable_rpm_controlled = !!(int_value & 0b010);
 801b8a4:	f3c1 0040 	ubfx	r0, r1, #1, #1
 801b8a8:	b2d2      	uxtb	r2, r2
 801b8aa:	f360 0200 	bfi	r2, r0, #0, #1
 801b8ae:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        settings.spindle.flags.laser_mode_disable = !!(int_value & 0b100);
 801b8b2:	f3c1 0180 	ubfx	r1, r1, #2, #1
 801b8b6:	b2d2      	uxtb	r2, r2
 801b8b8:	f361 0241 	bfi	r2, r1, #1, #1
 801b8bc:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    } else {
        settings.spindle.flags.pwm_disable = On;
        settings.spindle.flags.enable_rpm_controlled = settings.spindle.flags.laser_mode_disable = Off;
    }

    return Status_OK;
 801b8c0:	2000      	movs	r0, #0
 801b8c2:	4770      	bx	lr
        settings.spindle.flags.pwm_disable = On;
 801b8c4:	4b0a      	ldr	r3, [pc, #40]	@ (801b8f0 <set_pwm_options+0x64>)
 801b8c6:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801b8ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801b8ce:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        settings.spindle.flags.enable_rpm_controlled = settings.spindle.flags.laser_mode_disable = Off;
 801b8d2:	b2d2      	uxtb	r2, r2
 801b8d4:	f36f 0241 	bfc	r2, #1, #1
 801b8d8:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
 801b8dc:	b2d2      	uxtb	r2, r2
 801b8de:	f36f 0200 	bfc	r2, #0, #1
 801b8e2:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    return Status_OK;
 801b8e6:	2000      	movs	r0, #0
 801b8e8:	4770      	bx	lr
            return Status_SettingValueOutOfRange;
 801b8ea:	2034      	movs	r0, #52	@ 0x34
}
 801b8ec:	4770      	bx	lr
 801b8ee:	bf00      	nop
 801b8f0:	20001bc4 	.word	0x20001bc4

0801b8f4 <tmp_set_soft_limits>:
    return Status_OK;
}

static void tmp_set_soft_limits (void)
{
    sys.soft_limits.mask = 0;
 801b8f4:	4b11      	ldr	r3, [pc, #68]	@ (801b93c <tmp_set_soft_limits+0x48>)
 801b8f6:	2200      	movs	r2, #0
 801b8f8:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95

    if(settings.limits.flags.soft_enabled) {
 801b8fc:	4b10      	ldr	r3, [pc, #64]	@ (801b940 <tmp_set_soft_limits+0x4c>)
 801b8fe:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 801b902:	f013 0f02 	tst.w	r3, #2
 801b906:	d018      	beq.n	801b93a <tmp_set_soft_limits+0x46>
        uint_fast8_t idx = N_AXIS;
 801b908:	2303      	movs	r3, #3
 801b90a:	e000      	b.n	801b90e <tmp_set_soft_limits+0x1a>
        do {
            if(settings.axis[--idx].max_travel < -0.0f)
                bit_true(sys.soft_limits.mask, bit(idx));
        } while(idx);
 801b90c:	b1ab      	cbz	r3, 801b93a <tmp_set_soft_limits+0x46>
            if(settings.axis[--idx].max_travel < -0.0f)
 801b90e:	3b01      	subs	r3, #1
 801b910:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801b914:	0091      	lsls	r1, r2, #2
 801b916:	4a0a      	ldr	r2, [pc, #40]	@ (801b940 <tmp_set_soft_limits+0x4c>)
 801b918:	440a      	add	r2, r1
 801b91a:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 801b91e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b926:	d5f1      	bpl.n	801b90c <tmp_set_soft_limits+0x18>
                bit_true(sys.soft_limits.mask, bit(idx));
 801b928:	4804      	ldr	r0, [pc, #16]	@ (801b93c <tmp_set_soft_limits+0x48>)
 801b92a:	f890 2095 	ldrb.w	r2, [r0, #149]	@ 0x95
 801b92e:	2101      	movs	r1, #1
 801b930:	4099      	lsls	r1, r3
 801b932:	430a      	orrs	r2, r1
 801b934:	f880 2095 	strb.w	r2, [r0, #149]	@ 0x95
 801b938:	e7e8      	b.n	801b90c <tmp_set_soft_limits+0x18>
    }
}
 801b93a:	4770      	bx	lr
 801b93c:	2000148c 	.word	0x2000148c
 801b940:	20001bc4 	.word	0x20001bc4

0801b944 <set_soft_limits_enable>:

static status_code_t set_soft_limits_enable (setting_id_t id, uint_fast16_t int_value)
{
 801b944:	b508      	push	{r3, lr}
    if(int_value && !settings.homing.flags.enabled)
 801b946:	460b      	mov	r3, r1
 801b948:	b129      	cbz	r1, 801b956 <set_soft_limits_enable+0x12>
 801b94a:	4a0b      	ldr	r2, [pc, #44]	@ (801b978 <set_soft_limits_enable+0x34>)
 801b94c:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 801b950:	f012 0f01 	tst.w	r2, #1
 801b954:	d00d      	beq.n	801b972 <set_soft_limits_enable+0x2e>
        return Status_SoftLimitError;

    settings.limits.flags.soft_enabled = int_value != 0;
 801b956:	3b00      	subs	r3, #0
 801b958:	bf18      	it	ne
 801b95a:	2301      	movne	r3, #1
 801b95c:	4a06      	ldr	r2, [pc, #24]	@ (801b978 <set_soft_limits_enable+0x34>)
 801b95e:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 801b962:	f363 0141 	bfi	r1, r3, #1, #1
 801b966:	f882 1124 	strb.w	r1, [r2, #292]	@ 0x124

    tmp_set_soft_limits();
 801b96a:	f7ff ffc3 	bl	801b8f4 <tmp_set_soft_limits>

    return Status_OK;
 801b96e:	2000      	movs	r0, #0
}
 801b970:	bd08      	pop	{r3, pc}
        return Status_SoftLimitError;
 801b972:	200a      	movs	r0, #10
 801b974:	e7fc      	b.n	801b970 <set_soft_limits_enable+0x2c>
 801b976:	bf00      	nop
 801b978:	20001bc4 	.word	0x20001bc4

0801b97c <set_estop_unlock>:

static status_code_t set_estop_unlock (setting_id_t id, uint_fast16_t int_value)
{
    if(!hal.signals_cap.e_stop)
 801b97c:	4b09      	ldr	r3, [pc, #36]	@ (801b9a4 <set_estop_unlock+0x28>)
 801b97e:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801b982:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801b986:	d00b      	beq.n	801b9a0 <set_estop_unlock+0x24>
        return Status_SettingDisabled;

    settings.flags.no_unlock_after_estop = int_value == 0;
 801b988:	fab1 f181 	clz	r1, r1
 801b98c:	0949      	lsrs	r1, r1, #5
 801b98e:	4b06      	ldr	r3, [pc, #24]	@ (801b9a8 <set_estop_unlock+0x2c>)
 801b990:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 801b994:	f361 12c7 	bfi	r2, r1, #7, #1
 801b998:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    return Status_OK;
 801b99c:	2000      	movs	r0, #0
 801b99e:	4770      	bx	lr
        return Status_SettingDisabled;
 801b9a0:	2035      	movs	r0, #53	@ 0x35
}
 801b9a2:	4770      	bx	lr
 801b9a4:	200011ac 	.word	0x200011ac
 801b9a8:	20001bc4 	.word	0x20001bc4

0801b9ac <set_offset_lock>:

#if COMPATIBILITY_LEVEL <= 1

static status_code_t set_offset_lock (setting_id_t id, uint_fast16_t int_value)
{
    settings.parking.flags.offset_lock = int_value & 0b111; // TODO: remove
 801b9ac:	f001 0107 	and.w	r1, r1, #7
 801b9b0:	4a08      	ldr	r2, [pc, #32]	@ (801b9d4 <set_offset_lock+0x28>)
 801b9b2:	f892 3128 	ldrb.w	r3, [r2, #296]	@ 0x128
 801b9b6:	f361 1347 	bfi	r3, r1, #5, #3
 801b9ba:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
    settings.offset_lock.mask &= ~0b111; // TODO: remove
 801b9be:	f892 3102 	ldrb.w	r3, [r2, #258]	@ 0x102
 801b9c2:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801b9c6:	f882 3102 	strb.w	r3, [r2, #258]	@ 0x102
    settings.offset_lock.mask |= settings.parking.flags.offset_lock;
 801b9ca:	430b      	orrs	r3, r1
 801b9cc:	f882 3102 	strb.w	r3, [r2, #258]	@ 0x102

    return Status_OK;
}
 801b9d0:	2000      	movs	r0, #0
 801b9d2:	4770      	bx	lr
 801b9d4:	20001bc4 	.word	0x20001bc4

0801b9d8 <set_hard_limits_enable>:
        sys.hard_limits.mask &= ~settings.steppers.is_rotational.mask;
  #endif
}

static status_code_t set_hard_limits_enable (setting_id_t id, uint_fast16_t int_value)
{
 801b9d8:	b510      	push	{r4, lr}
    if((settings.limits.flags.hard_enabled = bit_istrue(int_value, bit(0)))) {
 801b9da:	f001 0001 	and.w	r0, r1, #1
 801b9de:	4b16      	ldr	r3, [pc, #88]	@ (801ba38 <set_hard_limits_enable+0x60>)
 801b9e0:	f893 2124 	ldrb.w	r2, [r3, #292]	@ 0x124
 801b9e4:	f360 0200 	bfi	r2, r0, #0, #1
 801b9e8:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
 801b9ec:	b1b8      	cbz	r0, 801ba1e <set_hard_limits_enable+0x46>
#if COMPATIBILITY_LEVEL <= 1
        settings.limits.flags.check_at_init = bit_istrue(int_value, bit(1));
 801b9ee:	f3c1 0140 	ubfx	r1, r1, #1, #1
 801b9f2:	b2d2      	uxtb	r2, r2
 801b9f4:	f361 0282 	bfi	r2, r1, #2, #1
 801b9f8:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
    sys.hard_limits.mask = settings.limits.flags.hard_enabled ? AXES_BITMASK : 0;
 801b9fc:	4b0e      	ldr	r3, [pc, #56]	@ (801ba38 <set_hard_limits_enable+0x60>)
 801b9fe:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 801ba02:	f013 0301 	ands.w	r3, r3, #1
 801ba06:	d000      	beq.n	801ba0a <set_hard_limits_enable+0x32>
 801ba08:	2307      	movs	r3, #7
 801ba0a:	4a0c      	ldr	r2, [pc, #48]	@ (801ba3c <set_hard_limits_enable+0x64>)
 801ba0c:	f882 3094 	strb.w	r3, [r2, #148]	@ 0x94
#endif
    } else
        settings.limits.flags.check_at_init = settings.limits.flags.hard_disabled_rotary = Off;

    tmp_set_hard_limits();
    hal.limits.enable(settings.limits.flags.hard_enabled, (axes_signals_t){0}); // Change immediately. NOTE: Nice to have but could be problematic later.
 801ba10:	4b0b      	ldr	r3, [pc, #44]	@ (801ba40 <set_hard_limits_enable+0x68>)
 801ba12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ba14:	2400      	movs	r4, #0
 801ba16:	4621      	mov	r1, r4
 801ba18:	4798      	blx	r3

    return Status_OK;
}
 801ba1a:	4620      	mov	r0, r4
 801ba1c:	bd10      	pop	{r4, pc}
        settings.limits.flags.check_at_init = settings.limits.flags.hard_disabled_rotary = Off;
 801ba1e:	4b06      	ldr	r3, [pc, #24]	@ (801ba38 <set_hard_limits_enable+0x60>)
 801ba20:	f893 2124 	ldrb.w	r2, [r3, #292]	@ 0x124
 801ba24:	f36f 1245 	bfc	r2, #5, #1
 801ba28:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
 801ba2c:	b2d2      	uxtb	r2, r2
 801ba2e:	f36f 0282 	bfc	r2, #2, #1
 801ba32:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
 801ba36:	e7e1      	b.n	801b9fc <set_hard_limits_enable+0x24>
 801ba38:	20001bc4 	.word	0x20001bc4
 801ba3c:	2000148c 	.word	0x2000148c
 801ba40:	200011ac 	.word	0x200011ac

0801ba44 <set_jog_soft_limited>:

static status_code_t set_jog_soft_limited (setting_id_t id, uint_fast16_t int_value)
{
    if (int_value && !settings.homing.flags.enabled)
 801ba44:	460b      	mov	r3, r1
 801ba46:	b129      	cbz	r1, 801ba54 <set_jog_soft_limited+0x10>
 801ba48:	4a09      	ldr	r2, [pc, #36]	@ (801ba70 <set_jog_soft_limited+0x2c>)
 801ba4a:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 801ba4e:	f012 0f01 	tst.w	r2, #1
 801ba52:	d00b      	beq.n	801ba6c <set_jog_soft_limited+0x28>
        return Status_SoftLimitError;

    settings.limits.flags.jog_soft_limited = int_value != 0;
 801ba54:	3b00      	subs	r3, #0
 801ba56:	bf18      	it	ne
 801ba58:	2301      	movne	r3, #1
 801ba5a:	4a05      	ldr	r2, [pc, #20]	@ (801ba70 <set_jog_soft_limited+0x2c>)
 801ba5c:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 801ba60:	f363 01c3 	bfi	r1, r3, #3, #1
 801ba64:	f882 1124 	strb.w	r1, [r2, #292]	@ 0x124

    return Status_OK;
 801ba68:	2000      	movs	r0, #0
 801ba6a:	4770      	bx	lr
        return Status_SoftLimitError;
 801ba6c:	200a      	movs	r0, #10
}
 801ba6e:	4770      	bx	lr
 801ba70:	20001bc4 	.word	0x20001bc4

0801ba74 <set_homing_enable>:

static status_code_t set_homing_enable (setting_id_t id, uint_fast16_t int_value)
{
    homing_flags_t homing;

    homing.value = int_value;
 801ba74:	b28a      	uxth	r2, r1

    if(homing.enabled) {
 801ba76:	f011 0f01 	tst.w	r1, #1
 801ba7a:	d02b      	beq.n	801bad4 <set_homing_enable+0x60>
        settings.homing.flags.override_locks = DEFAULT_HOMING_OVERRIDE_LOCKS;
        settings.homing.flags.keep_on_reset = DEFAULT_HOMING_KEEP_STATUS_ON_RESET;
        settings.homing.flags.use_limit_switches = DEFAULT_HOMING_USE_LIMIT_SWITCHES;
        settings.limits.flags.two_switches = DEFAULT_LIMITS_TWO_SWITCHES_ON_AXES;
#else
        settings.homing.flags.value = int_value & 0b1111;
 801ba7c:	f001 010f 	and.w	r1, r1, #15
 801ba80:	4b1c      	ldr	r3, [pc, #112]	@ (801baf4 <set_homing_enable+0x80>)
 801ba82:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.limits.flags.two_switches = homing.two_switches;
 801ba86:	f3c2 1000 	ubfx	r0, r2, #4, #1
 801ba8a:	f893 1124 	ldrb.w	r1, [r3, #292]	@ 0x124
 801ba8e:	f360 1104 	bfi	r1, r0, #4, #1
 801ba92:	f883 1124 	strb.w	r1, [r3, #292]	@ 0x124
        settings.homing.flags.manual = homing.manual;
 801ba96:	f3c2 1040 	ubfx	r0, r2, #5, #1
 801ba9a:	f893 1114 	ldrb.w	r1, [r3, #276]	@ 0x114
 801ba9e:	f360 1104 	bfi	r1, r0, #4, #1
 801baa2:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.homing.flags.override_locks = homing.override_locks;
 801baa6:	f3c2 1080 	ubfx	r0, r2, #6, #1
 801baaa:	b2c9      	uxtb	r1, r1
 801baac:	f360 1145 	bfi	r1, r0, #5, #1
 801bab0:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.homing.flags.keep_on_reset = homing.keep_on_reset;
 801bab4:	f3c2 10c0 	ubfx	r0, r2, #7, #1
 801bab8:	b2c9      	uxtb	r1, r1
 801baba:	f360 1186 	bfi	r1, r0, #6, #1
 801babe:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.homing.flags.use_limit_switches = homing.use_limit_switches;
 801bac2:	f3c2 2200 	ubfx	r2, r2, #8, #1
 801bac6:	b2c9      	uxtb	r1, r1
 801bac8:	f362 11c7 	bfi	r1, r2, #7, #1
 801bacc:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.limits.flags.soft_enabled = Off; // Force disable soft-limits.
        settings.limits.flags.jog_soft_limited = Off;
    }

    return Status_OK;
}
 801bad0:	2000      	movs	r0, #0
 801bad2:	4770      	bx	lr
        settings.homing.flags.value = 0;
 801bad4:	4b07      	ldr	r3, [pc, #28]	@ (801baf4 <set_homing_enable+0x80>)
 801bad6:	2200      	movs	r2, #0
 801bad8:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
        settings.limits.flags.soft_enabled = Off; // Force disable soft-limits.
 801badc:	f893 1124 	ldrb.w	r1, [r3, #292]	@ 0x124
 801bae0:	f362 0141 	bfi	r1, r2, #1, #1
 801bae4:	f883 1124 	strb.w	r1, [r3, #292]	@ 0x124
        settings.limits.flags.jog_soft_limited = Off;
 801bae8:	b2c9      	uxtb	r1, r1
 801baea:	f362 01c3 	bfi	r1, r2, #3, #1
 801baee:	f883 1124 	strb.w	r1, [r3, #292]	@ 0x124
 801baf2:	e7ed      	b.n	801bad0 <set_homing_enable+0x5c>
 801baf4:	20001bc4 	.word	0x20001bc4

0801baf8 <set_enable_legacy_rt_commands>:

static status_code_t set_enable_legacy_rt_commands (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.legacy_rt_commands = int_value != 0;
 801baf8:	3900      	subs	r1, #0
 801bafa:	bf18      	it	ne
 801bafc:	2101      	movne	r1, #1
 801bafe:	4b04      	ldr	r3, [pc, #16]	@ (801bb10 <set_enable_legacy_rt_commands+0x18>)
 801bb00:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801bb04:	f361 1286 	bfi	r2, r1, #6, #1
 801bb08:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801bb0c:	2000      	movs	r0, #0
 801bb0e:	4770      	bx	lr
 801bb10:	20001bc4 	.word	0x20001bc4

0801bb14 <set_parking_enable>:

#ifndef NO_SAFETY_DOOR_SUPPORT

static status_code_t set_parking_enable (setting_id_t id, uint_fast16_t int_value)
{
    settings.parking.flags.value = bit_istrue(int_value, bit(0)) ? (int_value & 0x07) : 0;
 801bb14:	f011 0f01 	tst.w	r1, #1
 801bb18:	d006      	beq.n	801bb28 <set_parking_enable+0x14>
 801bb1a:	f001 0107 	and.w	r1, r1, #7
 801bb1e:	4b03      	ldr	r3, [pc, #12]	@ (801bb2c <set_parking_enable+0x18>)
 801bb20:	f883 1128 	strb.w	r1, [r3, #296]	@ 0x128

    return Status_OK;
}
 801bb24:	2000      	movs	r0, #0
 801bb26:	4770      	bx	lr
    settings.parking.flags.value = bit_istrue(int_value, bit(0)) ? (int_value & 0x07) : 0;
 801bb28:	2100      	movs	r1, #0
 801bb2a:	e7f8      	b.n	801bb1e <set_parking_enable+0xa>
 801bb2c:	20001bc4 	.word	0x20001bc4

0801bb30 <set_restore_overrides>:

static status_code_t set_restore_overrides (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.restore_overrides = int_value != 0;
 801bb30:	3900      	subs	r1, #0
 801bb32:	bf18      	it	ne
 801bb34:	2101      	movne	r1, #1
 801bb36:	4b04      	ldr	r3, [pc, #16]	@ (801bb48 <set_restore_overrides+0x18>)
 801bb38:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801bb3c:	f361 0241 	bfi	r2, r1, #1, #1
 801bb40:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801bb44:	2000      	movs	r0, #0
 801bb46:	4770      	bx	lr
 801bb48:	20001bc4 	.word	0x20001bc4

0801bb4c <set_sleep_enable>:

#endif // NO_SAFETY_DOOR_SUPPORT

static status_code_t set_sleep_enable (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.sleep_enable = int_value != 0;
 801bb4c:	3900      	subs	r1, #0
 801bb4e:	bf18      	it	ne
 801bb50:	2101      	movne	r1, #1
 801bb52:	4b04      	ldr	r3, [pc, #16]	@ (801bb64 <set_sleep_enable+0x18>)
 801bb54:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801bb58:	f361 02c3 	bfi	r2, r1, #3, #1
 801bb5c:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801bb60:	2000      	movs	r0, #0
 801bb62:	4770      	bx	lr
 801bb64:	20001bc4 	.word	0x20001bc4

0801bb68 <set_hold_actions>:

static status_code_t set_hold_actions (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.disable_laser_during_hold = bit_istrue(int_value, bit(0));
 801bb68:	4b07      	ldr	r3, [pc, #28]	@ (801bb88 <set_hold_actions+0x20>)
 801bb6a:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801bb6e:	f361 1204 	bfi	r2, r1, #4, #1
 801bb72:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
    settings.flags.restore_after_feed_hold = bit_istrue(int_value, bit(1));
 801bb76:	f3c1 0140 	ubfx	r1, r1, #1, #1
 801bb7a:	b2d2      	uxtb	r2, r2
 801bb7c:	f361 12c7 	bfi	r2, r1, #7, #1
 801bb80:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801bb84:	2000      	movs	r0, #0
 801bb86:	4770      	bx	lr
 801bb88:	20001bc4 	.word	0x20001bc4

0801bb8c <set_g92_disable_persistence>:

#if COMPATIBILITY_LEVEL <= 1
static status_code_t set_g92_disable_persistence (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.g92_is_volatile = int_value != 0;
 801bb8c:	3900      	subs	r1, #0
 801bb8e:	bf18      	it	ne
 801bb90:	2101      	movne	r1, #1
 801bb92:	4b04      	ldr	r3, [pc, #16]	@ (801bba4 <set_g92_disable_persistence+0x18>)
 801bb94:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 801bb98:	f361 0241 	bfi	r2, r1, #1, #1
 801bb9c:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    return Status_OK;
}
 801bba0:	2000      	movs	r0, #0
 801bba2:	4770      	bx	lr
 801bba4:	20001bc4 	.word	0x20001bc4

0801bba8 <set_force_initialization_alarm>:
#endif

static status_code_t set_force_initialization_alarm (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.force_initialization_alarm = int_value != 0;
 801bba8:	3900      	subs	r1, #0
 801bbaa:	bf18      	it	ne
 801bbac:	2101      	movne	r1, #1
 801bbae:	4b04      	ldr	r3, [pc, #16]	@ (801bbc0 <set_force_initialization_alarm+0x18>)
 801bbb0:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801bbb4:	f361 1245 	bfi	r2, r1, #5, #1
 801bbb8:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801bbbc:	2000      	movs	r0, #0
 801bbbe:	4770      	bx	lr
 801bbc0:	20001bc4 	.word	0x20001bc4

0801bbc4 <set_probe_allow_feed_override>:

static status_code_t set_probe_allow_feed_override (setting_id_t id, uint_fast16_t int_value)
{
    settings.probe.allow_feed_override = int_value != 0;
 801bbc4:	3900      	subs	r1, #0
 801bbc6:	bf18      	it	ne
 801bbc8:	2101      	movne	r1, #1
 801bbca:	4b04      	ldr	r3, [pc, #16]	@ (801bbdc <set_probe_allow_feed_override+0x18>)
 801bbcc:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
 801bbd0:	f361 1204 	bfi	r2, r1, #4, #1
 801bbd4:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

    return Status_OK;
}
 801bbd8:	2000      	movs	r0, #0
 801bbda:	4770      	bx	lr
 801bbdc:	20001bc4 	.word	0x20001bc4

0801bbe0 <set_tool_change_probing_distance>:
    return Status_OK;
}

static status_code_t set_tool_change_probing_distance (setting_id_t id, float value)
{
    if(hal.driver_cap.atc)
 801bbe0:	4b05      	ldr	r3, [pc, #20]	@ (801bbf8 <set_tool_change_probing_distance+0x18>)
 801bbe2:	f893 01da 	ldrb.w	r0, [r3, #474]	@ 0x1da
 801bbe6:	f010 0002 	ands.w	r0, r0, #2
 801bbea:	d103      	bne.n	801bbf4 <set_tool_change_probing_distance+0x14>
        return Status_InvalidStatement;

    settings.tool_change.probing_distance = value;
 801bbec:	4b03      	ldr	r3, [pc, #12]	@ (801bbfc <set_tool_change_probing_distance+0x1c>)
 801bbee:	ed83 0a0a 	vstr	s0, [r3, #40]	@ 0x28

    return Status_OK;
 801bbf2:	4770      	bx	lr
        return Status_InvalidStatement;
 801bbf4:	2003      	movs	r0, #3
}
 801bbf6:	4770      	bx	lr
 801bbf8:	200011ac 	.word	0x200011ac
 801bbfc:	20001bc4 	.word	0x20001bc4

0801bc00 <set_tool_restore_pos>:

static status_code_t set_tool_restore_pos (setting_id_t id, uint_fast16_t int_value)
{
    if(hal.driver_cap.atc)
 801bc00:	4b09      	ldr	r3, [pc, #36]	@ (801bc28 <set_tool_restore_pos+0x28>)
 801bc02:	f893 01da 	ldrb.w	r0, [r3, #474]	@ 0x1da
 801bc06:	f010 0002 	ands.w	r0, r0, #2
 801bc0a:	d10a      	bne.n	801bc22 <set_tool_restore_pos+0x22>
        return Status_InvalidStatement;

    settings.flags.no_restore_position_after_M6 = int_value == 0;
 801bc0c:	fab1 f181 	clz	r1, r1
 801bc10:	0949      	lsrs	r1, r1, #5
 801bc12:	4b06      	ldr	r3, [pc, #24]	@ (801bc2c <set_tool_restore_pos+0x2c>)
 801bc14:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 801bc18:	f361 1286 	bfi	r2, r1, #6, #1
 801bc1c:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    return Status_OK;
 801bc20:	4770      	bx	lr
        return Status_InvalidStatement;
 801bc22:	2003      	movs	r0, #3
}
 801bc24:	4770      	bx	lr
 801bc26:	bf00      	nop
 801bc28:	200011ac 	.word	0x200011ac
 801bc2c:	20001bc4 	.word	0x20001bc4

0801bc30 <normalize_id>:

#endif

inline static setting_id_t normalize_id (setting_id_t id)
{
    if((id > Setting_AxisSettingsBase && id <= Setting_AxisSettingsMax) ||
 801bc30:	f1a0 0365 	sub.w	r3, r0, #101	@ 0x65
 801bc34:	b29b      	uxth	r3, r3
 801bc36:	2b5c      	cmp	r3, #92	@ 0x5c
 801bc38:	d904      	bls.n	801bc44 <normalize_id+0x14>
       (id > Setting_AxisSettingsBase2 && id <= Setting_AxisSettingsMax2))
 801bc3a:	f1a0 03c9 	sub.w	r3, r0, #201	@ 0xc9
 801bc3e:	b29b      	uxth	r3, r3
    if((id > Setting_AxisSettingsBase && id <= Setting_AxisSettingsMax) ||
 801bc40:	2b5c      	cmp	r3, #92	@ 0x5c
 801bc42:	d80b      	bhi.n	801bc5c <normalize_id+0x2c>
        id -= id % AXIS_SETTINGS_INCREMENT;
 801bc44:	4b24      	ldr	r3, [pc, #144]	@ (801bcd8 <normalize_id+0xa8>)
 801bc46:	fba3 2300 	umull	r2, r3, r3, r0
 801bc4a:	08db      	lsrs	r3, r3, #3
 801bc4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801bc50:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 801bc54:	b29b      	uxth	r3, r3
 801bc56:	1ac0      	subs	r0, r0, r3
 801bc58:	b280      	uxth	r0, r0
 801bc5a:	4770      	bx	lr
    else if(id > Setting_EncoderSettingsBase && id <= Setting_EncoderSettingsMax)
 801bc5c:	f2a0 1391 	subw	r3, r0, #401	@ 0x191
 801bc60:	b29b      	uxth	r3, r3
 801bc62:	2b30      	cmp	r3, #48	@ 0x30
 801bc64:	d80c      	bhi.n	801bc80 <normalize_id+0x50>
        id = (setting_id_t)(Setting_EncoderSettingsBase + (id % ENCODER_SETTINGS_INCREMENT));
 801bc66:	4b1c      	ldr	r3, [pc, #112]	@ (801bcd8 <normalize_id+0xa8>)
 801bc68:	fba3 2300 	umull	r2, r3, r3, r0
 801bc6c:	08db      	lsrs	r3, r3, #3
 801bc6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801bc72:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 801bc76:	b280      	uxth	r0, r0
 801bc78:	f500 70c8 	add.w	r0, r0, #400	@ 0x190
 801bc7c:	b280      	uxth	r0, r0
 801bc7e:	4770      	bx	lr
    else if(id > Setting_ModbusTCPBase && id <= Setting_ModbusTCPMax)
 801bc80:	f2a0 2359 	subw	r3, r0, #601	@ 0x259
 801bc84:	b29b      	uxth	r3, r3
 801bc86:	2b26      	cmp	r3, #38	@ 0x26
 801bc88:	d80b      	bhi.n	801bca2 <normalize_id+0x72>
        id = (setting_id_t)(Setting_ModbusTCPBase + (id % MODBUS_TCP_SETTINGS_INCREMENT));
 801bc8a:	4b13      	ldr	r3, [pc, #76]	@ (801bcd8 <normalize_id+0xa8>)
 801bc8c:	fba3 2300 	umull	r2, r3, r3, r0
 801bc90:	089b      	lsrs	r3, r3, #2
 801bc92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801bc96:	1ac0      	subs	r0, r0, r3
 801bc98:	b280      	uxth	r0, r0
 801bc9a:	f500 7016 	add.w	r0, r0, #600	@ 0x258
 801bc9e:	b280      	uxth	r0, r0
 801bca0:	4770      	bx	lr
    else if((id > Setting_Macro0 && id <= Setting_Macro9) || (id > Setting_MacroPort0 && id <= Setting_MacroPort9) || (id > Setting_ButtonAction0 && id <= Setting_ButtonAction9))
 801bca2:	f2a0 13eb 	subw	r3, r0, #491	@ 0x1eb
 801bca6:	b29b      	uxth	r3, r3
 801bca8:	2b08      	cmp	r3, #8
 801bcaa:	d909      	bls.n	801bcc0 <normalize_id+0x90>
 801bcac:	f2a0 13f5 	subw	r3, r0, #501	@ 0x1f5
 801bcb0:	b29b      	uxth	r3, r3
 801bcb2:	2b08      	cmp	r3, #8
 801bcb4:	d904      	bls.n	801bcc0 <normalize_id+0x90>
 801bcb6:	f2a0 234f 	subw	r3, r0, #591	@ 0x24f
 801bcba:	b29b      	uxth	r3, r3
 801bcbc:	2b08      	cmp	r3, #8
 801bcbe:	d80a      	bhi.n	801bcd6 <normalize_id+0xa6>
        id = (setting_id_t)(id - (id % 10));
 801bcc0:	4b05      	ldr	r3, [pc, #20]	@ (801bcd8 <normalize_id+0xa8>)
 801bcc2:	fba3 2300 	umull	r2, r3, r3, r0
 801bcc6:	08db      	lsrs	r3, r3, #3
 801bcc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801bccc:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 801bcd0:	b29b      	uxth	r3, r3
 801bcd2:	1ac0      	subs	r0, r0, r3
 801bcd4:	b280      	uxth	r0, r0

    return id;
}
 801bcd6:	4770      	bx	lr
 801bcd8:	cccccccd 	.word	0xcccccccd

0801bcdc <get_int>:

static uint32_t get_int (setting_id_t id)
{
    uint32_t value = 0;

    switch(id) {
 801bcdc:	2841      	cmp	r0, #65	@ 0x41
 801bcde:	d844      	bhi.n	801bd6a <get_int+0x8e>
 801bce0:	2806      	cmp	r0, #6
 801bce2:	f0c0 8148 	bcc.w	801bf76 <get_int+0x29a>
 801bce6:	1f83      	subs	r3, r0, #6
 801bce8:	2b3b      	cmp	r3, #59	@ 0x3b
 801bcea:	f200 8146 	bhi.w	801bf7a <get_int+0x29e>
 801bcee:	e8df f013 	tbh	[pc, r3, lsl #1]
 801bcf2:	0095      	.short	0x0095
 801bcf4:	009b0144 	.word	0x009b0144
 801bcf8:	009f0081 	.word	0x009f0081
 801bcfc:	01440144 	.word	0x01440144
 801bd00:	00a900a3 	.word	0x00a900a3
 801bd04:	00b30144 	.word	0x00b30144
 801bd08:	014400b7 	.word	0x014400b7
 801bd0c:	00c100bb 	.word	0x00c100bb
 801bd10:	00dd00c7 	.word	0x00dd00c7
 801bd14:	01440144 	.word	0x01440144
 801bd18:	01440144 	.word	0x01440144
 801bd1c:	01440144 	.word	0x01440144
 801bd20:	01440144 	.word	0x01440144
 801bd24:	00920144 	.word	0x00920144
 801bd28:	01440144 	.word	0x01440144
 801bd2c:	01440144 	.word	0x01440144
 801bd30:	014400f9 	.word	0x014400f9
 801bd34:	00d700fd 	.word	0x00d700fd
 801bd38:	01440103 	.word	0x01440103
 801bd3c:	01070144 	.word	0x01070144
 801bd40:	01070107 	.word	0x01070107
 801bd44:	01070107 	.word	0x01070107
 801bd48:	01440107 	.word	0x01440107
 801bd4c:	01440144 	.word	0x01440144
 801bd50:	01440144 	.word	0x01440144
 801bd54:	01440144 	.word	0x01440144
 801bd58:	01440144 	.word	0x01440144
 801bd5c:	010d0144 	.word	0x010d0144
 801bd60:	01130144 	.word	0x01130144
 801bd64:	01230119 	.word	0x01230119
 801bd68:	0129      	.short	0x0129
 801bd6a:	f240 13e1 	movw	r3, #481	@ 0x1e1
 801bd6e:	4298      	cmp	r0, r3
 801bd70:	f000 80f8 	beq.w	801bf64 <get_int+0x288>
 801bd74:	f5b0 7ff1 	cmp.w	r0, #482	@ 0x1e2
 801bd78:	d30c      	bcc.n	801bd94 <get_int+0xb8>
 801bd7a:	f5b0 7ff3 	cmp.w	r0, #486	@ 0x1e6
 801bd7e:	f000 80f4 	beq.w	801bf6a <get_int+0x28e>
 801bd82:	f240 2307 	movw	r3, #519	@ 0x207
 801bd86:	4298      	cmp	r0, r3
 801bd88:	d128      	bne.n	801bddc <get_int+0x100>
        case Setting_OffsetLock:
            value = settings.offset_lock.mask & 0b111;
            break;

        case Setting_EncoderSpindle:
            value = settings.offset_lock.encoder_spindle;
 801bd8a:	4b7f      	ldr	r3, [pc, #508]	@ (801bf88 <get_int+0x2ac>)
 801bd8c:	f893 0102 	ldrb.w	r0, [r3, #258]	@ 0x102
 801bd90:	08c0      	lsrs	r0, r0, #3
            break;
 801bd92:	4770      	bx	lr
    switch(id) {
 801bd94:	f5b0 7fc0 	cmp.w	r0, #384	@ 0x180
 801bd98:	f000 80de 	beq.w	801bf58 <get_int+0x27c>
 801bd9c:	d909      	bls.n	801bdb2 <get_int+0xd6>
 801bd9e:	f240 138b 	movw	r3, #395	@ 0x18b
 801bda2:	4298      	cmp	r0, r3
 801bda4:	d118      	bne.n	801bdd8 <get_int+0xfc>
            value = settings.spindle.flags.type;
 801bda6:	4b78      	ldr	r3, [pc, #480]	@ (801bf88 <get_int+0x2ac>)
 801bda8:	f893 00e7 	ldrb.w	r0, [r3, #231]	@ 0xe7
 801bdac:	f3c0 0084 	ubfx	r0, r0, #2, #5
            break;
 801bdb0:	4770      	bx	lr
    switch(id) {
 801bdb2:	f240 1355 	movw	r3, #341	@ 0x155
 801bdb6:	4298      	cmp	r0, r3
 801bdb8:	f000 80ca 	beq.w	801bf50 <get_int+0x274>
 801bdbc:	f5b0 7fad 	cmp.w	r0, #346	@ 0x15a
 801bdc0:	d108      	bne.n	801bdd4 <get_int+0xf8>
            value = settings.flags.no_restore_position_after_M6 ? 0 : 1;
 801bdc2:	4b71      	ldr	r3, [pc, #452]	@ (801bf88 <get_int+0x2ac>)
 801bdc4:	f893 00ff 	ldrb.w	r0, [r3, #255]	@ 0xff
 801bdc8:	0980      	lsrs	r0, r0, #6
 801bdca:	f080 0001 	eor.w	r0, r0, #1
 801bdce:	f000 0001 	and.w	r0, r0, #1
            break;
 801bdd2:	4770      	bx	lr
    switch(id) {
 801bdd4:	2000      	movs	r0, #0
 801bdd6:	4770      	bx	lr
 801bdd8:	2000      	movs	r0, #0
 801bdda:	4770      	bx	lr
 801bddc:	f5b0 7ff2 	cmp.w	r0, #484	@ 0x1e4
 801bde0:	d106      	bne.n	801bdf0 <get_int+0x114>
            value = settings.flags.no_unlock_after_estop ? 0 : 1;
 801bde2:	4b69      	ldr	r3, [pc, #420]	@ (801bf88 <get_int+0x2ac>)
 801bde4:	f893 00ff 	ldrb.w	r0, [r3, #255]	@ 0xff
 801bde8:	43c0      	mvns	r0, r0
 801bdea:	f3c0 10c0 	ubfx	r0, r0, #7, #1
            break;
 801bdee:	4770      	bx	lr
    switch(id) {
 801bdf0:	2000      	movs	r0, #0
 801bdf2:	4770      	bx	lr
            value = settings.spindle.flags.pwm_disable ? 0 : (0b001 |
 801bdf4:	4a64      	ldr	r2, [pc, #400]	@ (801bf88 <get_int+0x2ac>)
 801bdf6:	f892 30e7 	ldrb.w	r3, [r2, #231]	@ 0xe7
 801bdfa:	f992 20e7 	ldrsb.w	r2, [r2, #231]	@ 0xe7
 801bdfe:	2a00      	cmp	r2, #0
 801be00:	f2c0 80bd 	blt.w	801bf7e <get_int+0x2a2>
                                                              (settings.spindle.flags.enable_rpm_controlled ? 0b010 : 0) |
 801be04:	005b      	lsls	r3, r3, #1
 801be06:	f003 0002 	and.w	r0, r3, #2
            value = settings.spindle.flags.pwm_disable ? 0 : (0b001 |
 801be0a:	f040 0001 	orr.w	r0, r0, #1
                                                               (settings.spindle.flags.laser_mode_disable ? 0b100 : 0));
 801be0e:	f003 0304 	and.w	r3, r3, #4
                                                              (settings.spindle.flags.enable_rpm_controlled ? 0b010 : 0) |
 801be12:	4318      	orrs	r0, r3
 801be14:	4770      	bx	lr
            value = settings.mode;
 801be16:	4b5c      	ldr	r3, [pc, #368]	@ (801bf88 <get_int+0x2ac>)
 801be18:	7e18      	ldrb	r0, [r3, #24]
            break;
 801be1a:	4770      	bx	lr
            value = settings.probe.invert_probe_pin;
 801be1c:	4b5a      	ldr	r3, [pc, #360]	@ (801bf88 <get_int+0x2ac>)
 801be1e:	f893 0100 	ldrb.w	r0, [r3, #256]	@ 0x100
 801be22:	f000 0001 	and.w	r0, r0, #1
            break;
 801be26:	4770      	bx	lr
            value = settings.steppers.ganged_dir_invert.mask;
 801be28:	4b57      	ldr	r3, [pc, #348]	@ (801bf88 <get_int+0x2ac>)
 801be2a:	f893 00ea 	ldrb.w	r0, [r3, #234]	@ 0xea
            break;
 801be2e:	4770      	bx	lr
            value = settings.status_report.mask;
 801be30:	4b55      	ldr	r3, [pc, #340]	@ (801bf88 <get_int+0x2ac>)
 801be32:	f8b3 00fc 	ldrh.w	r0, [r3, #252]	@ 0xfc
            break;
 801be36:	4770      	bx	lr
            value = settings.flags.report_inches;
 801be38:	4b53      	ldr	r3, [pc, #332]	@ (801bf88 <get_int+0x2ac>)
 801be3a:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801be3e:	f000 0001 	and.w	r0, r0, #1
            break;
 801be42:	4770      	bx	lr
            value = settings.control_invert.mask & (hal.signals_cap.mask & ~limits_override.mask);
 801be44:	4b50      	ldr	r3, [pc, #320]	@ (801bf88 <get_int+0x2ac>)
 801be46:	f8b3 006c 	ldrh.w	r0, [r3, #108]	@ 0x6c
 801be4a:	4b50      	ldr	r3, [pc, #320]	@ (801bf8c <get_int+0x2b0>)
 801be4c:	f8b3 31dc 	ldrh.w	r3, [r3, #476]	@ 0x1dc
 801be50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801be54:	4018      	ands	r0, r3
            break;
 801be56:	4770      	bx	lr
            value = settings.spindle.invert.mask;
 801be58:	4b4b      	ldr	r3, [pc, #300]	@ (801bf88 <get_int+0x2ac>)
 801be5a:	f893 00e6 	ldrb.w	r0, [r3, #230]	@ 0xe6
            break;
 801be5e:	4770      	bx	lr
            value = settings.control_disable_pullup.mask;
 801be60:	4b49      	ldr	r3, [pc, #292]	@ (801bf88 <get_int+0x2ac>)
 801be62:	f8b3 006e 	ldrh.w	r0, [r3, #110]	@ 0x6e
            break;
 801be66:	4770      	bx	lr
            value = settings.probe.disable_probe_pullup;
 801be68:	4b47      	ldr	r3, [pc, #284]	@ (801bf88 <get_int+0x2ac>)
 801be6a:	f893 0100 	ldrb.w	r0, [r3, #256]	@ 0x100
 801be6e:	f3c0 0040 	ubfx	r0, r0, #1, #1
            break;
 801be72:	4770      	bx	lr
            value = settings.limits.flags.soft_enabled;
 801be74:	4b44      	ldr	r3, [pc, #272]	@ (801bf88 <get_int+0x2ac>)
 801be76:	f893 0124 	ldrb.w	r0, [r3, #292]	@ 0x124
 801be7a:	f3c0 0040 	ubfx	r0, r0, #1, #1
            break;
 801be7e:	4770      	bx	lr
            value = ((settings.limits.flags.hard_enabled & bit(0)) ? bit(0) |
 801be80:	4b41      	ldr	r3, [pc, #260]	@ (801bf88 <get_int+0x2ac>)
 801be82:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
                      (settings.limits.flags.hard_disabled_rotary ? bit(2) : 0) : 0);
 801be86:	f013 0f01 	tst.w	r3, #1
 801be8a:	d07a      	beq.n	801bf82 <get_int+0x2a6>
                     (settings.limits.flags.check_at_init ? bit(1) : 0) |
 801be8c:	0858      	lsrs	r0, r3, #1
                      (settings.limits.flags.hard_disabled_rotary ? bit(2) : 0) : 0);
 801be8e:	08db      	lsrs	r3, r3, #3
 801be90:	f000 0002 	and.w	r0, r0, #2
 801be94:	f003 0304 	and.w	r3, r3, #4
 801be98:	4318      	orrs	r0, r3
 801be9a:	f040 0001 	orr.w	r0, r0, #1
 801be9e:	4770      	bx	lr
            value = settings.limits.flags.jog_soft_limited;
 801bea0:	4b39      	ldr	r3, [pc, #228]	@ (801bf88 <get_int+0x2ac>)
 801bea2:	f893 0124 	ldrb.w	r0, [r3, #292]	@ 0x124
 801bea6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
            break;
 801beaa:	4770      	bx	lr
            homing.value = settings.homing.flags.value & 0b1111;
 801beac:	4a36      	ldr	r2, [pc, #216]	@ (801bf88 <get_int+0x2ac>)
 801beae:	f892 3114 	ldrb.w	r3, [r2, #276]	@ 0x114
 801beb2:	f003 000f 	and.w	r0, r3, #15
            homing.two_switches = settings.limits.flags.two_switches;
 801beb6:	f892 2124 	ldrb.w	r2, [r2, #292]	@ 0x124
 801beba:	f3c2 1200 	ubfx	r2, r2, #4, #1
 801bebe:	f362 1004 	bfi	r0, r2, #4, #1
            homing.manual = settings.homing.flags.manual;
 801bec2:	f3c3 1200 	ubfx	r2, r3, #4, #1
 801bec6:	f362 1045 	bfi	r0, r2, #5, #1
            homing.override_locks = settings.homing.flags.override_locks;
 801beca:	f3c3 1240 	ubfx	r2, r3, #5, #1
 801bece:	f362 1086 	bfi	r0, r2, #6, #1
            homing.keep_on_reset = settings.homing.flags.keep_on_reset;
 801bed2:	f3c3 1280 	ubfx	r2, r3, #6, #1
 801bed6:	f362 10c7 	bfi	r0, r2, #7, #1
            homing.use_limit_switches = settings.homing.flags.use_limit_switches;
 801beda:	09db      	lsrs	r3, r3, #7
 801bedc:	f363 2008 	bfi	r0, r3, #8, #1
            value = homing.value;
 801bee0:	b280      	uxth	r0, r0
            break;
 801bee2:	4770      	bx	lr
            value = settings.steppers.deenergize.mask;
 801bee4:	4b28      	ldr	r3, [pc, #160]	@ (801bf88 <get_int+0x2ac>)
 801bee6:	f893 00ec 	ldrb.w	r0, [r3, #236]	@ 0xec
            break;
 801beea:	4770      	bx	lr
            value = settings.flags.legacy_rt_commands;
 801beec:	4b26      	ldr	r3, [pc, #152]	@ (801bf88 <get_int+0x2ac>)
 801beee:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801bef2:	f3c0 1080 	ubfx	r0, r0, #6, #1
            break;
 801bef6:	4770      	bx	lr
            value = settings.parking.flags.value;
 801bef8:	4b23      	ldr	r3, [pc, #140]	@ (801bf88 <get_int+0x2ac>)
 801befa:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
            break;
 801befe:	4770      	bx	lr
            value = settings.homing.cycle[id - Setting_HomingCycle_1].mask;
 801bf00:	382c      	subs	r0, #44	@ 0x2c
 801bf02:	4b21      	ldr	r3, [pc, #132]	@ (801bf88 <get_int+0x2ac>)
 801bf04:	4403      	add	r3, r0
 801bf06:	f893 0115 	ldrb.w	r0, [r3, #277]	@ 0x115
            break;
 801bf0a:	4770      	bx	lr
            value = settings.flags.restore_overrides;
 801bf0c:	4b1e      	ldr	r3, [pc, #120]	@ (801bf88 <get_int+0x2ac>)
 801bf0e:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801bf12:	f3c0 0040 	ubfx	r0, r0, #1, #1
            break;
 801bf16:	4770      	bx	lr
            value = settings.flags.sleep_enable;
 801bf18:	4b1b      	ldr	r3, [pc, #108]	@ (801bf88 <get_int+0x2ac>)
 801bf1a:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801bf1e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
            break;
 801bf22:	4770      	bx	lr
            value = (settings.flags.disable_laser_during_hold ? bit(0) : 0) | (settings.flags.restore_after_feed_hold ? bit(1) : 0);
 801bf24:	4b18      	ldr	r3, [pc, #96]	@ (801bf88 <get_int+0x2ac>)
 801bf26:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801bf2a:	0983      	lsrs	r3, r0, #6
 801bf2c:	f3c0 1000 	ubfx	r0, r0, #4, #1
 801bf30:	f003 0302 	and.w	r3, r3, #2
 801bf34:	4318      	orrs	r0, r3
            break;
 801bf36:	4770      	bx	lr
            value = settings.flags.force_initialization_alarm;
 801bf38:	4b13      	ldr	r3, [pc, #76]	@ (801bf88 <get_int+0x2ac>)
 801bf3a:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801bf3e:	f3c0 1040 	ubfx	r0, r0, #5, #1
            break;
 801bf42:	4770      	bx	lr
            value = settings.probe.allow_feed_override;
 801bf44:	4b10      	ldr	r3, [pc, #64]	@ (801bf88 <get_int+0x2ac>)
 801bf46:	f893 0100 	ldrb.w	r0, [r3, #256]	@ 0x100
 801bf4a:	f3c0 1000 	ubfx	r0, r0, #4, #1
            break;
 801bf4e:	4770      	bx	lr
            value = settings.tool_change.mode;
 801bf50:	4b0d      	ldr	r3, [pc, #52]	@ (801bf88 <get_int+0x2ac>)
 801bf52:	f893 002c 	ldrb.w	r0, [r3, #44]	@ 0x2c
            break;
 801bf56:	4770      	bx	lr
            value = settings.flags.g92_is_volatile;
 801bf58:	4b0b      	ldr	r3, [pc, #44]	@ (801bf88 <get_int+0x2ac>)
 801bf5a:	f893 00ff 	ldrb.w	r0, [r3, #255]	@ 0xff
 801bf5e:	f3c0 0040 	ubfx	r0, r0, #1, #1
            break;
 801bf62:	4770      	bx	lr
            value = settings.report_interval;
 801bf64:	4b08      	ldr	r3, [pc, #32]	@ (801bf88 <get_int+0x2ac>)
 801bf66:	8a98      	ldrh	r0, [r3, #20]
            break;
 801bf68:	4770      	bx	lr
            value = settings.offset_lock.mask & 0b111;
 801bf6a:	4b07      	ldr	r3, [pc, #28]	@ (801bf88 <get_int+0x2ac>)
 801bf6c:	f893 0102 	ldrb.w	r0, [r3, #258]	@ 0x102
 801bf70:	f000 0007 	and.w	r0, r0, #7
            break;
 801bf74:	4770      	bx	lr
    switch(id) {
 801bf76:	2000      	movs	r0, #0
 801bf78:	4770      	bx	lr
 801bf7a:	2000      	movs	r0, #0
 801bf7c:	4770      	bx	lr
            value = settings.spindle.flags.pwm_disable ? 0 : (0b001 |
 801bf7e:	2000      	movs	r0, #0
 801bf80:	4770      	bx	lr
                      (settings.limits.flags.hard_disabled_rotary ? bit(2) : 0) : 0);
 801bf82:	2000      	movs	r0, #0
        default:
            break;
    }

    return value;
}
 801bf84:	4770      	bx	lr
 801bf86:	bf00      	nop
 801bf88:	20001bc4 	.word	0x20001bc4
 801bf8c:	200011ac 	.word	0x200011ac

0801bf90 <settings_write_global>:
}


// Write global settings to persistent storage
void settings_write_global (void)
{
 801bf90:	b510      	push	{r4, lr}
    if(override_backup.valid)
 801bf92:	4b0d      	ldr	r3, [pc, #52]	@ (801bfc8 <settings_write_global+0x38>)
 801bf94:	781b      	ldrb	r3, [r3, #0]
 801bf96:	b9a3      	cbnz	r3, 801bfc2 <settings_write_global+0x32>
        restore_override_backup();

    settings.flags.compatibility_level = COMPATIBILITY_LEVEL;
 801bf98:	4b0c      	ldr	r3, [pc, #48]	@ (801bfcc <settings_write_global+0x3c>)
 801bf9a:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 801bf9e:	f36f 0285 	bfc	r2, #2, #4
 801bfa2:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    if(hal.nvs.type != NVS_None)
 801bfa6:	4b0a      	ldr	r3, [pc, #40]	@ (801bfd0 <settings_write_global+0x40>)
 801bfa8:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801bfac:	b143      	cbz	r3, 801bfc0 <settings_write_global+0x30>
        hal.nvs.memcpy_to_nvs(NVS_ADDR_GLOBAL, (uint8_t *)&settings, sizeof(settings_t), true);
 801bfae:	4b08      	ldr	r3, [pc, #32]	@ (801bfd0 <settings_write_global+0x40>)
 801bfb0:	f8d3 4190 	ldr.w	r4, [r3, #400]	@ 0x190
 801bfb4:	2301      	movs	r3, #1
 801bfb6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801bfba:	4904      	ldr	r1, [pc, #16]	@ (801bfcc <settings_write_global+0x3c>)
 801bfbc:	4618      	mov	r0, r3
 801bfbe:	47a0      	blx	r4
}
 801bfc0:	bd10      	pop	{r4, pc}
        restore_override_backup();
 801bfc2:	f7ff fc01 	bl	801b7c8 <restore_override_backup>
 801bfc6:	e7e7      	b.n	801bf98 <settings_write_global+0x8>
 801bfc8:	20001b4c 	.word	0x20001b4c
 801bfcc:	20001bc4 	.word	0x20001bc4
 801bfd0:	200011ac 	.word	0x200011ac

0801bfd4 <is_available>:

    nvs_buffer_sync_physical();
}

inline static bool is_available (const setting_detail_t *setting)
{
 801bfd4:	b508      	push	{r3, lr}
    return setting->is_available == NULL || setting->is_available(setting);
 801bfd6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801bfd8:	b113      	cbz	r3, 801bfe0 <is_available+0xc>
 801bfda:	4798      	blx	r3
 801bfdc:	b910      	cbnz	r0, 801bfe4 <is_available+0x10>
}
 801bfde:	bd08      	pop	{r3, pc}
    return setting->is_available == NULL || setting->is_available(setting);
 801bfe0:	2001      	movs	r0, #1
 801bfe2:	e7fc      	b.n	801bfde <is_available+0xa>
 801bfe4:	2001      	movs	r0, #1
 801bfe6:	e7fa      	b.n	801bfde <is_available+0xa>

0801bfe8 <remove_element>:
    return setting->datatype == Format_Integer || setting->datatype == Format_Int8 || setting->datatype == Format_Int16;
}

static char *remove_element (char *s, uint_fast8_t entry)
{
    while(entry && *s) {
 801bfe8:	e000      	b.n	801bfec <remove_element+0x4>
        if(*s == ',')
            entry--;
        s++;
 801bfea:	3001      	adds	r0, #1
    while(entry && *s) {
 801bfec:	b129      	cbz	r1, 801bffa <remove_element+0x12>
 801bfee:	7803      	ldrb	r3, [r0, #0]
 801bff0:	b11b      	cbz	r3, 801bffa <remove_element+0x12>
        if(*s == ',')
 801bff2:	2b2c      	cmp	r3, #44	@ 0x2c
 801bff4:	d1f9      	bne.n	801bfea <remove_element+0x2>
            entry--;
 801bff6:	3901      	subs	r1, #1
 801bff8:	e7f7      	b.n	801bfea <remove_element+0x2>
    }

    if(entry == 0) {
 801bffa:	b9b9      	cbnz	r1, 801c02c <remove_element+0x44>
        *s++ = 'N';
 801bffc:	234e      	movs	r3, #78	@ 0x4e
 801bffe:	7003      	strb	r3, [r0, #0]
        *s++ = '/';
 801c000:	232f      	movs	r3, #47	@ 0x2f
 801c002:	7043      	strb	r3, [r0, #1]
        *s++ = 'A';
 801c004:	1cc3      	adds	r3, r0, #3
 801c006:	2241      	movs	r2, #65	@ 0x41
 801c008:	7082      	strb	r2, [r0, #2]
        char *s2 = s;
 801c00a:	461a      	mov	r2, r3
        while(*s2 && *s2 != ',')
 801c00c:	e000      	b.n	801c010 <remove_element+0x28>
            s2++;
 801c00e:	3201      	adds	r2, #1
        while(*s2 && *s2 != ',')
 801c010:	7811      	ldrb	r1, [r2, #0]
 801c012:	b129      	cbz	r1, 801c020 <remove_element+0x38>
 801c014:	292c      	cmp	r1, #44	@ 0x2c
 801c016:	d1fa      	bne.n	801c00e <remove_element+0x26>
 801c018:	e002      	b.n	801c020 <remove_element+0x38>
        while(*s2)
            *s++ = *s2++;
 801c01a:	3201      	adds	r2, #1
 801c01c:	f803 1b01 	strb.w	r1, [r3], #1
        while(*s2)
 801c020:	7811      	ldrb	r1, [r2, #0]
 801c022:	2900      	cmp	r1, #0
 801c024:	d1f9      	bne.n	801c01a <remove_element+0x32>
        *s = '\0';
 801c026:	2200      	movs	r2, #0
 801c028:	701a      	strb	r2, [r3, #0]
 801c02a:	4618      	mov	r0, r3
    }

    return s;
}
 801c02c:	4770      	bx	lr
	...

0801c030 <set_encoder_spindle>:
{
 801c030:	b510      	push	{r4, lr}
 801c032:	460c      	mov	r4, r1
    if(spindle_get_count() < 2)
 801c034:	f001 ff30 	bl	801de98 <spindle_get_count>
 801c038:	2801      	cmp	r0, #1
 801c03a:	d90c      	bls.n	801c056 <set_encoder_spindle+0x26>
    else if(int_value >= spindle_get_count())
 801c03c:	f001 ff2c 	bl	801de98 <spindle_get_count>
 801c040:	42a0      	cmp	r0, r4
 801c042:	d90a      	bls.n	801c05a <set_encoder_spindle+0x2a>
    settings.offset_lock.encoder_spindle = int_value;
 801c044:	4b06      	ldr	r3, [pc, #24]	@ (801c060 <set_encoder_spindle+0x30>)
 801c046:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 801c04a:	f364 02c7 	bfi	r2, r4, #3, #5
 801c04e:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
    return Status_OK;
 801c052:	2000      	movs	r0, #0
}
 801c054:	bd10      	pop	{r4, pc}
        return Status_SettingDisabled;
 801c056:	2035      	movs	r0, #53	@ 0x35
 801c058:	e7fc      	b.n	801c054 <set_encoder_spindle+0x24>
        return Status_SettingValueOutOfRange;
 801c05a:	2034      	movs	r0, #52	@ 0x34
 801c05c:	e7fa      	b.n	801c054 <set_encoder_spindle+0x24>
 801c05e:	bf00      	nop
 801c060:	20001bc4 	.word	0x20001bc4

0801c064 <set_spindle_type>:
{
 801c064:	b510      	push	{r4, lr}
 801c066:	460c      	mov	r4, r1
    if(spindle_get_count() < 2)
 801c068:	f001 ff16 	bl	801de98 <spindle_get_count>
 801c06c:	2801      	cmp	r0, #1
 801c06e:	d910      	bls.n	801c092 <set_spindle_type+0x2e>
    else if(int_value >= spindle_get_count())
 801c070:	f001 ff12 	bl	801de98 <spindle_get_count>
 801c074:	42a0      	cmp	r0, r4
 801c076:	d90e      	bls.n	801c096 <set_spindle_type+0x32>
    settings.spindle.flags.type = int_value;
 801c078:	f004 001f 	and.w	r0, r4, #31
 801c07c:	4b07      	ldr	r3, [pc, #28]	@ (801c09c <set_spindle_type+0x38>)
 801c07e:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801c082:	f360 0286 	bfi	r2, r0, #2, #5
 801c086:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    spindle_select(settings.spindle.flags.type);
 801c08a:	f001 fee5 	bl	801de58 <spindle_select>
    return Status_OK;
 801c08e:	2000      	movs	r0, #0
}
 801c090:	bd10      	pop	{r4, pc}
        return Status_SettingDisabled;
 801c092:	2035      	movs	r0, #53	@ 0x35
 801c094:	e7fc      	b.n	801c090 <set_spindle_type+0x2c>
        return Status_SettingValueOutOfRange;
 801c096:	2034      	movs	r0, #52	@ 0x34
 801c098:	e7fa      	b.n	801c090 <set_spindle_type+0x2c>
 801c09a:	bf00      	nop
 801c09c:	20001bc4 	.word	0x20001bc4

0801c0a0 <set_tool_change_mode>:
{
 801c0a0:	b510      	push	{r4, lr}
    if(!hal.driver_cap.atc && hal.stream.suspend_read && int_value <= ToolChange_Ignore) {
 801c0a2:	4b0c      	ldr	r3, [pc, #48]	@ (801c0d4 <set_tool_change_mode+0x34>)
 801c0a4:	f893 01da 	ldrb.w	r0, [r3, #474]	@ 0x1da
 801c0a8:	f010 0402 	ands.w	r4, r0, #2
 801c0ac:	d10b      	bne.n	801c0c6 <set_tool_change_mode+0x26>
 801c0ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801c0b2:	b153      	cbz	r3, 801c0ca <set_tool_change_mode+0x2a>
 801c0b4:	2904      	cmp	r1, #4
 801c0b6:	d80a      	bhi.n	801c0ce <set_tool_change_mode+0x2e>
        settings.tool_change.mode = (toolchange_mode_t)int_value;
 801c0b8:	4b07      	ldr	r3, [pc, #28]	@ (801c0d8 <set_tool_change_mode+0x38>)
 801c0ba:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
        tc_init();
 801c0be:	f005 ff95 	bl	8021fec <tc_init>
}
 801c0c2:	4620      	mov	r0, r4
 801c0c4:	bd10      	pop	{r4, pc}
        return Status_InvalidStatement;
 801c0c6:	2403      	movs	r4, #3
 801c0c8:	e7fb      	b.n	801c0c2 <set_tool_change_mode+0x22>
 801c0ca:	2403      	movs	r4, #3
 801c0cc:	e7f9      	b.n	801c0c2 <set_tool_change_mode+0x22>
 801c0ce:	2403      	movs	r4, #3
 801c0d0:	e7f7      	b.n	801c0c2 <set_tool_change_mode+0x22>
 801c0d2:	bf00      	nop
 801c0d4:	200011ac 	.word	0x200011ac
 801c0d8:	20001bc4 	.word	0x20001bc4

0801c0dc <set_homing_cycle>:
{
 801c0dc:	b508      	push	{r3, lr}
    settings.homing.cycle[id - Setting_HomingCycle_1].mask = int_value;
 801c0de:	382c      	subs	r0, #44	@ 0x2c
 801c0e0:	4b03      	ldr	r3, [pc, #12]	@ (801c0f0 <set_homing_cycle+0x14>)
 801c0e2:	4403      	add	r3, r0
 801c0e4:	f883 1115 	strb.w	r1, [r3, #277]	@ 0x115
    limits_set_homing_axes();
 801c0e8:	f7f7 f8d8 	bl	801329c <limits_set_homing_axes>
}
 801c0ec:	2000      	movs	r0, #0
 801c0ee:	bd08      	pop	{r3, pc}
 801c0f0:	20001bc4 	.word	0x20001bc4

0801c0f4 <set_mode>:
{
 801c0f4:	b510      	push	{r4, lr}
    switch((machine_mode_t)int_value) {
 801c0f6:	b2cc      	uxtb	r4, r1
 801c0f8:	2c01      	cmp	r4, #1
 801c0fa:	d00e      	beq.n	801c11a <set_mode+0x26>
 801c0fc:	2c02      	cmp	r4, #2
 801c0fe:	d005      	beq.n	801c10c <set_mode+0x18>
 801c100:	b10c      	cbz	r4, 801c106 <set_mode+0x12>
 801c102:	2003      	movs	r0, #3
 801c104:	e008      	b.n	801c118 <set_mode+0x24>
           gc_state.modal.diameter_mode = false;
 801c106:	4b0b      	ldr	r3, [pc, #44]	@ (801c134 <set_mode+0x40>)
 801c108:	2200      	movs	r2, #0
 801c10a:	715a      	strb	r2, [r3, #5]
    machine_mode_changed = true;
 801c10c:	4b0a      	ldr	r3, [pc, #40]	@ (801c138 <set_mode+0x44>)
 801c10e:	2201      	movs	r2, #1
 801c110:	701a      	strb	r2, [r3, #0]
    settings.mode = (machine_mode_t)int_value;
 801c112:	4b0a      	ldr	r3, [pc, #40]	@ (801c13c <set_mode+0x48>)
 801c114:	761c      	strb	r4, [r3, #24]
    return Status_OK;
 801c116:	2000      	movs	r0, #0
}
 801c118:	bd10      	pop	{r4, pc}
            if(!spindle_get_caps(false).laser)
 801c11a:	2000      	movs	r0, #0
 801c11c:	f001 fdce 	bl	801dcbc <spindle_get_caps>
 801c120:	f010 0f08 	tst.w	r0, #8
 801c124:	d003      	beq.n	801c12e <set_mode+0x3a>
            gc_state.modal.diameter_mode = false;
 801c126:	4b03      	ldr	r3, [pc, #12]	@ (801c134 <set_mode+0x40>)
 801c128:	2200      	movs	r2, #0
 801c12a:	715a      	strb	r2, [r3, #5]
            break;
 801c12c:	e7ee      	b.n	801c10c <set_mode+0x18>
                return Status_SettingDisabledLaser;
 801c12e:	2011      	movs	r0, #17
 801c130:	e7f2      	b.n	801c118 <set_mode+0x24>
 801c132:	bf00      	nop
 801c134:	20000ee4 	.word	0x20000ee4
 801c138:	20001bc0 	.word	0x20001bc0
 801c13c:	20001bc4 	.word	0x20001bc4

0801c140 <set_spindle_invert>:
{
 801c140:	b508      	push	{r3, lr}
    settings.spindle.invert.mask = int_value;
 801c142:	b2c9      	uxtb	r1, r1
 801c144:	4b0b      	ldr	r3, [pc, #44]	@ (801c174 <set_spindle_invert+0x34>)
 801c146:	f883 10e6 	strb.w	r1, [r3, #230]	@ 0xe6
    if(settings.spindle.invert.pwm && !spindle_get_caps(false).pwm_invert) {
 801c14a:	f011 0004 	ands.w	r0, r1, #4
 801c14e:	d100      	bne.n	801c152 <set_spindle_invert+0x12>
}
 801c150:	bd08      	pop	{r3, pc}
    if(settings.spindle.invert.pwm && !spindle_get_caps(false).pwm_invert) {
 801c152:	2000      	movs	r0, #0
 801c154:	f001 fdb2 	bl	801dcbc <spindle_get_caps>
 801c158:	f010 0f10 	tst.w	r0, #16
 801c15c:	d001      	beq.n	801c162 <set_spindle_invert+0x22>
    return Status_OK;
 801c15e:	2000      	movs	r0, #0
 801c160:	e7f6      	b.n	801c150 <set_spindle_invert+0x10>
        settings.spindle.invert.pwm = Off;
 801c162:	4b04      	ldr	r3, [pc, #16]	@ (801c174 <set_spindle_invert+0x34>)
 801c164:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 801c168:	f36f 0282 	bfc	r2, #2, #1
 801c16c:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        return Status_SettingDisabled;
 801c170:	2035      	movs	r0, #53	@ 0x35
 801c172:	e7ed      	b.n	801c150 <set_spindle_invert+0x10>
 801c174:	20001bc4 	.word	0x20001bc4

0801c178 <is_setting_available>:
    if(setting) switch(normalize_id(setting->id)) {
 801c178:	2800      	cmp	r0, #0
 801c17a:	f000 81b4 	beq.w	801c4e6 <is_setting_available+0x36e>
{
 801c17e:	b508      	push	{r3, lr}
    if(setting) switch(normalize_id(setting->id)) {
 801c180:	8800      	ldrh	r0, [r0, #0]
 801c182:	f7ff fd55 	bl	801bc30 <normalize_id>
 801c186:	f5b0 7fc6 	cmp.w	r0, #396	@ 0x18c
 801c18a:	f080 809e 	bcs.w	801c2ca <is_setting_available+0x152>
 801c18e:	f5b0 7faa 	cmp.w	r0, #340	@ 0x154
 801c192:	d247      	bcs.n	801c224 <is_setting_available+0xac>
 801c194:	2841      	cmp	r0, #65	@ 0x41
 801c196:	f200 8086 	bhi.w	801c2a6 <is_setting_available+0x12e>
 801c19a:	2806      	cmp	r0, #6
 801c19c:	d340      	bcc.n	801c220 <is_setting_available+0xa8>
 801c19e:	3806      	subs	r0, #6
 801c1a0:	283b      	cmp	r0, #59	@ 0x3b
 801c1a2:	d87e      	bhi.n	801c2a2 <is_setting_available+0x12a>
 801c1a4:	e8df f010 	tbh	[pc, r0, lsl #1]
 801c1a8:	007d00e8 	.word	0x007d00e8
 801c1ac:	00ef00da 	.word	0x00ef00da
 801c1b0:	007d007d 	.word	0x007d007d
 801c1b4:	007d007d 	.word	0x007d007d
 801c1b8:	007d007d 	.word	0x007d007d
 801c1bc:	007d0101 	.word	0x007d0101
 801c1c0:	00e8007d 	.word	0x00e8007d
 801c1c4:	007d007d 	.word	0x007d007d
 801c1c8:	007d007d 	.word	0x007d007d
 801c1cc:	007d007d 	.word	0x007d007d
 801c1d0:	007d007d 	.word	0x007d007d
 801c1d4:	007d007d 	.word	0x007d007d
 801c1d8:	01190119 	.word	0x01190119
 801c1dc:	0107007d 	.word	0x0107007d
 801c1e0:	01070107 	.word	0x01070107
 801c1e4:	007d0107 	.word	0x007d0107
 801c1e8:	007d0114 	.word	0x007d0114
 801c1ec:	0123007d 	.word	0x0123007d
 801c1f0:	007d0123 	.word	0x007d0123
 801c1f4:	007d007d 	.word	0x007d007d
 801c1f8:	007d007d 	.word	0x007d007d
 801c1fc:	007d007d 	.word	0x007d007d
 801c200:	007d007d 	.word	0x007d007d
 801c204:	007d007d 	.word	0x007d007d
 801c208:	007d007d 	.word	0x007d007d
 801c20c:	01230123 	.word	0x01230123
 801c210:	01230123 	.word	0x01230123
 801c214:	01230123 	.word	0x01230123
 801c218:	007d01a3 	.word	0x007d01a3
 801c21c:	00e8007d 	.word	0x00e8007d
 801c220:	2000      	movs	r0, #0
 801c222:	e163      	b.n	801c4ec <is_setting_available+0x374>
 801c224:	f5a0 70aa 	sub.w	r0, r0, #340	@ 0x154
 801c228:	2837      	cmp	r0, #55	@ 0x37
 801c22a:	f200 815e 	bhi.w	801c4ea <is_setting_available+0x372>
 801c22e:	e8df f010 	tbh	[pc, r0, lsl #1]
 801c232:	010b      	.short	0x010b
 801c234:	015c015c 	.word	0x015c015c
 801c238:	015c015c 	.word	0x015c015c
 801c23c:	015c015c 	.word	0x015c015c
 801c240:	003c003c 	.word	0x003c003c
 801c244:	015c003c 	.word	0x015c003c
 801c248:	015c015c 	.word	0x015c015c
 801c24c:	015c015c 	.word	0x015c015c
 801c250:	015c015c 	.word	0x015c015c
 801c254:	015c015c 	.word	0x015c015c
 801c258:	015c015c 	.word	0x015c015c
 801c25c:	015c015c 	.word	0x015c015c
 801c260:	015c015c 	.word	0x015c015c
 801c264:	015c015c 	.word	0x015c015c
 801c268:	015c015c 	.word	0x015c015c
 801c26c:	015c015c 	.word	0x015c015c
 801c270:	015c015c 	.word	0x015c015c
 801c274:	015c015c 	.word	0x015c015c
 801c278:	015c015c 	.word	0x015c015c
 801c27c:	015c015c 	.word	0x015c015c
 801c280:	015c015c 	.word	0x015c015c
 801c284:	015c015c 	.word	0x015c015c
 801c288:	015c015c 	.word	0x015c015c
 801c28c:	015c015c 	.word	0x015c015c
 801c290:	015c015c 	.word	0x015c015c
 801c294:	015c015c 	.word	0x015c015c
 801c298:	00e4015c 	.word	0x00e4015c
 801c29c:	011c00fb 	.word	0x011c00fb
 801c2a0:	00c8      	.short	0x00c8
 801c2a2:	2000      	movs	r0, #0
 801c2a4:	e122      	b.n	801c4ec <is_setting_available+0x374>
 801c2a6:	28aa      	cmp	r0, #170	@ 0xaa
 801c2a8:	d10d      	bne.n	801c2c6 <is_setting_available+0x14e>
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(true).mask != 0;
 801c2aa:	4b92      	ldr	r3, [pc, #584]	@ (801c4f4 <is_setting_available+0x37c>)
 801c2ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801c2b0:	2b00      	cmp	r3, #0
 801c2b2:	f000 8098 	beq.w	801c3e6 <is_setting_available+0x26e>
 801c2b6:	2001      	movs	r0, #1
 801c2b8:	4798      	blx	r3
 801c2ba:	b2c0      	uxtb	r0, r0
 801c2bc:	2800      	cmp	r0, #0
 801c2be:	f000 8094 	beq.w	801c3ea <is_setting_available+0x272>
 801c2c2:	2001      	movs	r0, #1
 801c2c4:	e112      	b.n	801c4ec <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801c2c6:	2000      	movs	r0, #0
 801c2c8:	e110      	b.n	801c4ec <is_setting_available+0x374>
 801c2ca:	f240 2307 	movw	r3, #519	@ 0x207
 801c2ce:	4298      	cmp	r0, r3
 801c2d0:	f000 80e9 	beq.w	801c4a6 <is_setting_available+0x32e>
 801c2d4:	f5b0 7f02 	cmp.w	r0, #520	@ 0x208
 801c2d8:	d317      	bcc.n	801c30a <is_setting_available+0x192>
 801c2da:	f240 239f 	movw	r3, #671	@ 0x29f
 801c2de:	4298      	cmp	r0, r3
 801c2e0:	f000 80f0 	beq.w	801c4c4 <is_setting_available+0x34c>
 801c2e4:	f240 23a1 	movw	r3, #673	@ 0x2a1
 801c2e8:	4298      	cmp	r0, r3
 801c2ea:	d128      	bne.n	801c33e <is_setting_available+0x1c6>
            available = !hal.signals_cap.safety_door_ajar && hal.coolant_cap.mask;
 801c2ec:	4b81      	ldr	r3, [pc, #516]	@ (801c4f4 <is_setting_available+0x37c>)
 801c2ee:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801c2f2:	f013 0f08 	tst.w	r3, #8
 801c2f6:	f040 80f2 	bne.w	801c4de <is_setting_available+0x366>
 801c2fa:	4b7e      	ldr	r3, [pc, #504]	@ (801c4f4 <is_setting_available+0x37c>)
 801c2fc:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 801c300:	2b00      	cmp	r3, #0
 801c302:	f040 80ee 	bne.w	801c4e2 <is_setting_available+0x36a>
 801c306:	2000      	movs	r0, #0
 801c308:	e0f0      	b.n	801c4ec <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801c30a:	f5b0 7ff1 	cmp.w	r0, #482	@ 0x1e2
 801c30e:	f000 80c3 	beq.w	801c498 <is_setting_available+0x320>
 801c312:	f5b0 7ff2 	cmp.w	r0, #484	@ 0x1e4
 801c316:	d105      	bne.n	801c324 <is_setting_available+0x1ac>
            available = hal.signals_cap.e_stop;
 801c318:	4b76      	ldr	r3, [pc, #472]	@ (801c4f4 <is_setting_available+0x37c>)
 801c31a:	f893 01dc 	ldrb.w	r0, [r3, #476]	@ 0x1dc
 801c31e:	f3c0 1080 	ubfx	r0, r0, #6, #1
            break;
 801c322:	e0e3      	b.n	801c4ec <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801c324:	f240 13e1 	movw	r3, #481	@ 0x1e1
 801c328:	4298      	cmp	r0, r3
 801c32a:	d106      	bne.n	801c33a <is_setting_available+0x1c2>
            available = hal.get_elapsed_ticks != NULL;
 801c32c:	4b71      	ldr	r3, [pc, #452]	@ (801c4f4 <is_setting_available+0x37c>)
 801c32e:	f8d3 01a8 	ldr.w	r0, [r3, #424]	@ 0x1a8
 801c332:	3800      	subs	r0, #0
 801c334:	bf18      	it	ne
 801c336:	2001      	movne	r0, #1
            break;
 801c338:	e0d8      	b.n	801c4ec <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801c33a:	2000      	movs	r0, #0
 801c33c:	e0d6      	b.n	801c4ec <is_setting_available+0x374>
 801c33e:	f240 238a 	movw	r3, #650	@ 0x28a
 801c342:	4298      	cmp	r0, r3
 801c344:	d108      	bne.n	801c358 <is_setting_available+0x1e0>
            available = hal.driver_cap.sd_card || hal.driver_cap.littlefs;
 801c346:	4b6b      	ldr	r3, [pc, #428]	@ (801c4f4 <is_setting_available+0x37c>)
 801c348:	f893 31d9 	ldrb.w	r3, [r3, #473]	@ 0x1d9
 801c34c:	f013 0f06 	tst.w	r3, #6
 801c350:	bf14      	ite	ne
 801c352:	2001      	movne	r0, #1
 801c354:	2000      	moveq	r0, #0
            break;
 801c356:	e0c9      	b.n	801c4ec <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801c358:	2000      	movs	r0, #0
 801c35a:	e0c7      	b.n	801c4ec <is_setting_available+0x374>
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(false).mask != 0;
 801c35c:	4b65      	ldr	r3, [pc, #404]	@ (801c4f4 <is_setting_available+0x37c>)
 801c35e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801c362:	b12b      	cbz	r3, 801c370 <is_setting_available+0x1f8>
 801c364:	2000      	movs	r0, #0
 801c366:	4798      	blx	r3
 801c368:	b2c0      	uxtb	r0, r0
 801c36a:	b118      	cbz	r0, 801c374 <is_setting_available+0x1fc>
 801c36c:	2001      	movs	r0, #1
 801c36e:	e0bd      	b.n	801c4ec <is_setting_available+0x374>
 801c370:	2000      	movs	r0, #0
 801c372:	e0bb      	b.n	801c4ec <is_setting_available+0x374>
 801c374:	2000      	movs	r0, #0
            break;
 801c376:	e0b9      	b.n	801c4ec <is_setting_available+0x374>
            available = hal.probe.get_state != NULL;
 801c378:	4b5e      	ldr	r3, [pc, #376]	@ (801c4f4 <is_setting_available+0x37c>)
 801c37a:	f8d3 00fc 	ldr.w	r0, [r3, #252]	@ 0xfc
 801c37e:	3800      	subs	r0, #0
 801c380:	bf18      	it	ne
 801c382:	2001      	movne	r0, #1
            break;
 801c384:	e0b2      	b.n	801c4ec <is_setting_available+0x374>
            available = hal.driver_cap.pwm_spindle && spindle_get_caps(false).laser;
 801c386:	4b5b      	ldr	r3, [pc, #364]	@ (801c4f4 <is_setting_available+0x37c>)
 801c388:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 801c38c:	f013 0f10 	tst.w	r3, #16
 801c390:	d101      	bne.n	801c396 <is_setting_available+0x21e>
 801c392:	2000      	movs	r0, #0
 801c394:	e0aa      	b.n	801c4ec <is_setting_available+0x374>
 801c396:	2000      	movs	r0, #0
 801c398:	f001 fc90 	bl	801dcbc <spindle_get_caps>
 801c39c:	f010 0f08 	tst.w	r0, #8
 801c3a0:	d001      	beq.n	801c3a6 <is_setting_available+0x22e>
 801c3a2:	2001      	movs	r0, #1
 801c3a4:	e0a2      	b.n	801c4ec <is_setting_available+0x374>
 801c3a6:	2000      	movs	r0, #0
            break;
 801c3a8:	e0a0      	b.n	801c4ec <is_setting_available+0x374>
            available = spindle_get_caps(false).gpio_controlled;
 801c3aa:	2000      	movs	r0, #0
 801c3ac:	f001 fc86 	bl	801dcbc <spindle_get_caps>
 801c3b0:	f3c0 2000 	ubfx	r0, r0, #8, #1
            break;
 801c3b4:	e09a      	b.n	801c4ec <is_setting_available+0x374>
            available = hal.driver_cap.pwm_spindle;
 801c3b6:	4b4f      	ldr	r3, [pc, #316]	@ (801c4f4 <is_setting_available+0x37c>)
 801c3b8:	f893 01da 	ldrb.w	r0, [r3, #474]	@ 0x1da
 801c3bc:	f3c0 1000 	ubfx	r0, r0, #4, #1
            break;
 801c3c0:	e094      	b.n	801c4ec <is_setting_available+0x374>
            available = spindle_get_count() > 1;
 801c3c2:	f001 fd69 	bl	801de98 <spindle_get_count>
 801c3c6:	2801      	cmp	r0, #1
 801c3c8:	bf94      	ite	ls
 801c3ca:	2000      	movls	r0, #0
 801c3cc:	2001      	movhi	r0, #1
            break;
 801c3ce:	e08d      	b.n	801c4ec <is_setting_available+0x374>
            available = hal.driver_cap.spindle_encoder;
 801c3d0:	4b48      	ldr	r3, [pc, #288]	@ (801c4f4 <is_setting_available+0x37c>)
 801c3d2:	f893 01d8 	ldrb.w	r0, [r3, #472]	@ 0x1d8
 801c3d6:	09c0      	lsrs	r0, r0, #7
            break;
 801c3d8:	e088      	b.n	801c4ec <is_setting_available+0x374>
            available = spindle_get_caps(false).variable;
 801c3da:	2000      	movs	r0, #0
 801c3dc:	f001 fc6e 	bl	801dcbc <spindle_get_caps>
 801c3e0:	f000 0001 	and.w	r0, r0, #1
            break;
 801c3e4:	e082      	b.n	801c4ec <is_setting_available+0x374>
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(true).mask != 0;
 801c3e6:	2000      	movs	r0, #0
 801c3e8:	e080      	b.n	801c4ec <is_setting_available+0x374>
 801c3ea:	2000      	movs	r0, #0
            break;
 801c3ec:	e07e      	b.n	801c4ec <is_setting_available+0x374>
            available = hal.signals_cap.safety_door_ajar;
 801c3ee:	4b41      	ldr	r3, [pc, #260]	@ (801c4f4 <is_setting_available+0x37c>)
 801c3f0:	f893 01dc 	ldrb.w	r0, [r3, #476]	@ 0x1dc
 801c3f4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
            break;
 801c3f8:	e078      	b.n	801c4ec <is_setting_available+0x374>
            available = hal.signals_cap.safety_door_ajar && spindle_get_count() && !spindle_get_caps(true).at_speed;
 801c3fa:	4b3e      	ldr	r3, [pc, #248]	@ (801c4f4 <is_setting_available+0x37c>)
 801c3fc:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801c400:	f013 0f08 	tst.w	r3, #8
 801c404:	d101      	bne.n	801c40a <is_setting_available+0x292>
 801c406:	2000      	movs	r0, #0
 801c408:	e070      	b.n	801c4ec <is_setting_available+0x374>
 801c40a:	f001 fd45 	bl	801de98 <spindle_get_count>
 801c40e:	b908      	cbnz	r0, 801c414 <is_setting_available+0x29c>
 801c410:	2000      	movs	r0, #0
 801c412:	e06b      	b.n	801c4ec <is_setting_available+0x374>
 801c414:	2001      	movs	r0, #1
 801c416:	f001 fc51 	bl	801dcbc <spindle_get_caps>
 801c41a:	f010 0f04 	tst.w	r0, #4
 801c41e:	d101      	bne.n	801c424 <is_setting_available+0x2ac>
 801c420:	2001      	movs	r0, #1
 801c422:	e063      	b.n	801c4ec <is_setting_available+0x374>
 801c424:	2000      	movs	r0, #0
            break;
 801c426:	e061      	b.n	801c4ec <is_setting_available+0x374>
            available = hal.signals_cap.safety_door_ajar && hal.coolant_cap.mask;
 801c428:	4b32      	ldr	r3, [pc, #200]	@ (801c4f4 <is_setting_available+0x37c>)
 801c42a:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801c42e:	f013 0f08 	tst.w	r3, #8
 801c432:	d005      	beq.n	801c440 <is_setting_available+0x2c8>
 801c434:	4b2f      	ldr	r3, [pc, #188]	@ (801c4f4 <is_setting_available+0x37c>)
 801c436:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 801c43a:	b91b      	cbnz	r3, 801c444 <is_setting_available+0x2cc>
 801c43c:	2000      	movs	r0, #0
 801c43e:	e055      	b.n	801c4ec <is_setting_available+0x374>
 801c440:	2000      	movs	r0, #0
 801c442:	e053      	b.n	801c4ec <is_setting_available+0x374>
 801c444:	2001      	movs	r0, #1
            break;
 801c446:	e051      	b.n	801c4ec <is_setting_available+0x374>
            available = spindle_get_caps(true).at_speed || hal.driver_cap.spindle_encoder;
 801c448:	2001      	movs	r0, #1
 801c44a:	f001 fc37 	bl	801dcbc <spindle_get_caps>
 801c44e:	f010 0f04 	tst.w	r0, #4
 801c452:	d108      	bne.n	801c466 <is_setting_available+0x2ee>
 801c454:	4b27      	ldr	r3, [pc, #156]	@ (801c4f4 <is_setting_available+0x37c>)
 801c456:	f993 31d8 	ldrsb.w	r3, [r3, #472]	@ 0x1d8
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	db01      	blt.n	801c462 <is_setting_available+0x2ea>
 801c45e:	2000      	movs	r0, #0
            break;
 801c460:	e044      	b.n	801c4ec <is_setting_available+0x374>
            available = spindle_get_caps(true).at_speed || hal.driver_cap.spindle_encoder;
 801c462:	2001      	movs	r0, #1
 801c464:	e042      	b.n	801c4ec <is_setting_available+0x374>
 801c466:	2001      	movs	r0, #1
 801c468:	e040      	b.n	801c4ec <is_setting_available+0x374>
            available = !hal.signals_cap.safety_door_ajar && spindle_get_count() && !spindle_get_caps(true).at_speed;
 801c46a:	4b22      	ldr	r3, [pc, #136]	@ (801c4f4 <is_setting_available+0x37c>)
 801c46c:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801c470:	f013 0f08 	tst.w	r3, #8
 801c474:	d001      	beq.n	801c47a <is_setting_available+0x302>
 801c476:	2000      	movs	r0, #0
 801c478:	e038      	b.n	801c4ec <is_setting_available+0x374>
 801c47a:	f001 fd0d 	bl	801de98 <spindle_get_count>
 801c47e:	b908      	cbnz	r0, 801c484 <is_setting_available+0x30c>
 801c480:	2000      	movs	r0, #0
 801c482:	e033      	b.n	801c4ec <is_setting_available+0x374>
 801c484:	2001      	movs	r0, #1
 801c486:	f001 fc19 	bl	801dcbc <spindle_get_caps>
 801c48a:	f010 0f04 	tst.w	r0, #4
 801c48e:	d101      	bne.n	801c494 <is_setting_available+0x31c>
 801c490:	2001      	movs	r0, #1
 801c492:	e02b      	b.n	801c4ec <is_setting_available+0x374>
 801c494:	2000      	movs	r0, #0
            break;
 801c496:	e029      	b.n	801c4ec <is_setting_available+0x374>
            available = hal.rtc.set_datetime != NULL;
 801c498:	4b16      	ldr	r3, [pc, #88]	@ (801c4f4 <is_setting_available+0x37c>)
 801c49a:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
 801c49e:	3800      	subs	r0, #0
 801c4a0:	bf18      	it	ne
 801c4a2:	2001      	movne	r0, #1
            break;
 801c4a4:	e022      	b.n	801c4ec <is_setting_available+0x374>
            available = hal.driver_cap.spindle_encoder && spindle_get_count() > 1;
 801c4a6:	4b13      	ldr	r3, [pc, #76]	@ (801c4f4 <is_setting_available+0x37c>)
 801c4a8:	f993 31d8 	ldrsb.w	r3, [r3, #472]	@ 0x1d8
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	db01      	blt.n	801c4b4 <is_setting_available+0x33c>
 801c4b0:	2000      	movs	r0, #0
 801c4b2:	e01b      	b.n	801c4ec <is_setting_available+0x374>
 801c4b4:	f001 fcf0 	bl	801de98 <spindle_get_count>
 801c4b8:	2801      	cmp	r0, #1
 801c4ba:	d901      	bls.n	801c4c0 <is_setting_available+0x348>
 801c4bc:	2001      	movs	r0, #1
 801c4be:	e015      	b.n	801c4ec <is_setting_available+0x374>
 801c4c0:	2000      	movs	r0, #0
            break;
 801c4c2:	e013      	b.n	801c4ec <is_setting_available+0x374>
            available = hal.homing.get_state != NULL && hal.home_cap.a.mask != 0;
 801c4c4:	4b0b      	ldr	r3, [pc, #44]	@ (801c4f4 <is_setting_available+0x37c>)
 801c4c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c4c8:	b12b      	cbz	r3, 801c4d6 <is_setting_available+0x35e>
 801c4ca:	4b0a      	ldr	r3, [pc, #40]	@ (801c4f4 <is_setting_available+0x37c>)
 801c4cc:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 801c4d0:	b91b      	cbnz	r3, 801c4da <is_setting_available+0x362>
 801c4d2:	2000      	movs	r0, #0
 801c4d4:	e00a      	b.n	801c4ec <is_setting_available+0x374>
 801c4d6:	2000      	movs	r0, #0
 801c4d8:	e008      	b.n	801c4ec <is_setting_available+0x374>
 801c4da:	2001      	movs	r0, #1
            break;
 801c4dc:	e006      	b.n	801c4ec <is_setting_available+0x374>
            available = !hal.signals_cap.safety_door_ajar && hal.coolant_cap.mask;
 801c4de:	2000      	movs	r0, #0
 801c4e0:	e004      	b.n	801c4ec <is_setting_available+0x374>
 801c4e2:	2001      	movs	r0, #1
            break;
 801c4e4:	e002      	b.n	801c4ec <is_setting_available+0x374>
    bool available = false;
 801c4e6:	2000      	movs	r0, #0
}
 801c4e8:	4770      	bx	lr
    if(setting) switch(normalize_id(setting->id)) {
 801c4ea:	2000      	movs	r0, #0
}
 801c4ec:	bd08      	pop	{r3, pc}
            available = SLEEP_DURATION > 0.0f;
 801c4ee:	2001      	movs	r0, #1
 801c4f0:	e7fc      	b.n	801c4ec <is_setting_available+0x374>
 801c4f2:	bf00      	nop
 801c4f4:	200011ac 	.word	0x200011ac

0801c4f8 <set_probe_disable_pullup>:
{
 801c4f8:	b508      	push	{r3, lr}
    if(!hal.probe.configure)
 801c4fa:	4b0a      	ldr	r3, [pc, #40]	@ (801c524 <set_probe_disable_pullup+0x2c>)
 801c4fc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801c500:	b16b      	cbz	r3, 801c51e <set_probe_disable_pullup+0x26>
    settings.probe.disable_probe_pullup = int_value != 0;
 801c502:	3900      	subs	r1, #0
 801c504:	bf18      	it	ne
 801c506:	2101      	movne	r1, #1
 801c508:	4b07      	ldr	r3, [pc, #28]	@ (801c528 <set_probe_disable_pullup+0x30>)
 801c50a:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
 801c50e:	f361 0241 	bfi	r2, r1, #1, #1
 801c512:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
    ioport_setting_changed(id);
 801c516:	f7f5 fd27 	bl	8011f68 <ioport_setting_changed>
    return Status_OK;
 801c51a:	2000      	movs	r0, #0
}
 801c51c:	bd08      	pop	{r3, pc}
        return Status_SettingDisabled;
 801c51e:	2035      	movs	r0, #53	@ 0x35
 801c520:	e7fc      	b.n	801c51c <set_probe_disable_pullup+0x24>
 801c522:	bf00      	nop
 801c524:	200011ac 	.word	0x200011ac
 801c528:	20001bc4 	.word	0x20001bc4

0801c52c <set_control_disable_pullup>:
{
 801c52c:	b508      	push	{r3, lr}
    settings.control_disable_pullup.mask = int_value & (hal.signals_cap.mask & ~limits_override.mask);
 801c52e:	4b06      	ldr	r3, [pc, #24]	@ (801c548 <set_control_disable_pullup+0x1c>)
 801c530:	f8b3 31dc 	ldrh.w	r3, [r3, #476]	@ 0x1dc
 801c534:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801c538:	400b      	ands	r3, r1
 801c53a:	4a04      	ldr	r2, [pc, #16]	@ (801c54c <set_control_disable_pullup+0x20>)
 801c53c:	f8a2 306e 	strh.w	r3, [r2, #110]	@ 0x6e
    ioport_setting_changed(id);
 801c540:	f7f5 fd12 	bl	8011f68 <ioport_setting_changed>
}
 801c544:	2000      	movs	r0, #0
 801c546:	bd08      	pop	{r3, pc}
 801c548:	200011ac 	.word	0x200011ac
 801c54c:	20001bc4 	.word	0x20001bc4

0801c550 <set_probe_invert>:
{
 801c550:	b508      	push	{r3, lr}
    if(!hal.probe.configure)
 801c552:	4b0d      	ldr	r3, [pc, #52]	@ (801c588 <set_probe_invert+0x38>)
 801c554:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801c558:	b19b      	cbz	r3, 801c582 <set_probe_invert+0x32>
    settings.probe.invert_probe_pin = int_value != 0;
 801c55a:	3900      	subs	r1, #0
 801c55c:	bf18      	it	ne
 801c55e:	2101      	movne	r1, #1
 801c560:	4b0a      	ldr	r3, [pc, #40]	@ (801c58c <set_probe_invert+0x3c>)
 801c562:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
 801c566:	f361 0200 	bfi	r2, r1, #0, #1
 801c56a:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
    ioport_setting_changed(id);
 801c56e:	f7f5 fcfb 	bl	8011f68 <ioport_setting_changed>
    hal.probe.configure(false, false);
 801c572:	4b05      	ldr	r3, [pc, #20]	@ (801c588 <set_probe_invert+0x38>)
 801c574:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801c578:	2100      	movs	r1, #0
 801c57a:	4608      	mov	r0, r1
 801c57c:	4798      	blx	r3
    return Status_OK;
 801c57e:	2000      	movs	r0, #0
}
 801c580:	bd08      	pop	{r3, pc}
        return Status_SettingDisabled;
 801c582:	2035      	movs	r0, #53	@ 0x35
 801c584:	e7fc      	b.n	801c580 <set_probe_invert+0x30>
 801c586:	bf00      	nop
 801c588:	200011ac 	.word	0x200011ac
 801c58c:	20001bc4 	.word	0x20001bc4

0801c590 <set_control_invert>:
{
 801c590:	b508      	push	{r3, lr}
    settings.control_invert.mask = (int_value & hal.signals_cap.mask) | limits_override.mask;
 801c592:	4b07      	ldr	r3, [pc, #28]	@ (801c5b0 <set_control_invert+0x20>)
 801c594:	f8b3 31dc 	ldrh.w	r3, [r3, #476]	@ 0x1dc
 801c598:	400b      	ands	r3, r1
 801c59a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801c59e:	4a05      	ldr	r2, [pc, #20]	@ (801c5b4 <set_control_invert+0x24>)
 801c5a0:	f8a2 306c 	strh.w	r3, [r2, #108]	@ 0x6c
    ioport_setting_changed(id);
 801c5a4:	f7f5 fce0 	bl	8011f68 <ioport_setting_changed>
    system_init_switches();
 801c5a8:	f004 fc98 	bl	8020edc <system_init_switches>
}
 801c5ac:	2000      	movs	r0, #0
 801c5ae:	bd08      	pop	{r3, pc}
 801c5b0:	200011ac 	.word	0x200011ac
 801c5b4:	20001bc4 	.word	0x20001bc4

0801c5b8 <set_report_inches>:
{
 801c5b8:	b508      	push	{r3, lr}
    settings.flags.report_inches = int_value != 0;
 801c5ba:	3900      	subs	r1, #0
 801c5bc:	bf18      	it	ne
 801c5be:	2101      	movne	r1, #1
 801c5c0:	4b06      	ldr	r3, [pc, #24]	@ (801c5dc <set_report_inches+0x24>)
 801c5c2:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801c5c6:	f361 0200 	bfi	r2, r1, #0, #1
 801c5ca:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
    report_init();
 801c5ce:	f7fc fc65 	bl	8018e9c <report_init>
    system_flag_wco_change(); // Make sure WCO is immediately updated.
 801c5d2:	f005 f8e1 	bl	8021798 <system_flag_wco_change>
}
 801c5d6:	2000      	movs	r0, #0
 801c5d8:	bd08      	pop	{r3, pc}
 801c5da:	bf00      	nop
 801c5dc:	20001bc4 	.word	0x20001bc4

0801c5e0 <strnumentries>:
{
 801c5e0:	b538      	push	{r3, r4, r5, lr}
    if(s == NULL || *s == '\0')
 801c5e2:	b170      	cbz	r0, 801c602 <strnumentries+0x22>
 801c5e4:	460d      	mov	r5, r1
 801c5e6:	7803      	ldrb	r3, [r0, #0]
 801c5e8:	b16b      	cbz	r3, 801c606 <strnumentries+0x26>
    uint32_t entries = 1;
 801c5ea:	2401      	movs	r4, #1
 801c5ec:	e001      	b.n	801c5f2 <strnumentries+0x12>
        p++;
 801c5ee:	1c58      	adds	r0, r3, #1
        entries++;
 801c5f0:	3401      	adds	r4, #1
    while((p = strchr(p, delimiter))) {
 801c5f2:	4629      	mov	r1, r5
 801c5f4:	f007 ff5a 	bl	80244ac <strchr>
 801c5f8:	4603      	mov	r3, r0
 801c5fa:	2800      	cmp	r0, #0
 801c5fc:	d1f7      	bne.n	801c5ee <strnumentries+0xe>
}
 801c5fe:	4620      	mov	r0, r4
 801c600:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
 801c602:	2400      	movs	r4, #0
 801c604:	e7fb      	b.n	801c5fe <strnumentries+0x1e>
 801c606:	2400      	movs	r4, #0
 801c608:	e7f9      	b.n	801c5fe <strnumentries+0x1e>

0801c60a <get_decimal_places>:
    char *dp = format == NULL ? NULL : strchr(format, '.');
 801c60a:	b178      	cbz	r0, 801c62c <get_decimal_places+0x22>
{
 801c60c:	b538      	push	{r3, r4, r5, lr}
 801c60e:	4604      	mov	r4, r0
    char *dp = format == NULL ? NULL : strchr(format, '.');
 801c610:	212e      	movs	r1, #46	@ 0x2e
 801c612:	f007 ff4b 	bl	80244ac <strchr>
    return dp ? strchr(format, '\0') - dp - 1 : 1;
 801c616:	4605      	mov	r5, r0
 801c618:	b150      	cbz	r0, 801c630 <get_decimal_places+0x26>
 801c61a:	4620      	mov	r0, r4
 801c61c:	f7eb fd70 	bl	8008100 <strlen>
 801c620:	4420      	add	r0, r4
 801c622:	1b40      	subs	r0, r0, r5
 801c624:	b2c0      	uxtb	r0, r0
 801c626:	3801      	subs	r0, #1
 801c628:	b2c0      	uxtb	r0, r0
}
 801c62a:	bd38      	pop	{r3, r4, r5, pc}
    return dp ? strchr(format, '\0') - dp - 1 : 1;
 801c62c:	2001      	movs	r0, #1
}
 801c62e:	4770      	bx	lr
    return dp ? strchr(format, '\0') - dp - 1 : 1;
 801c630:	2001      	movs	r0, #1
 801c632:	e7fa      	b.n	801c62a <get_decimal_places+0x20>

0801c634 <validate_uint_value>:
{
 801c634:	b530      	push	{r4, r5, lr}
 801c636:	b083      	sub	sp, #12
 801c638:	4604      	mov	r4, r0
 801c63a:	460d      	mov	r5, r1
    uint_fast8_t set_idx = 0;
 801c63c:	2300      	movs	r3, #0
 801c63e:	9300      	str	r3, [sp, #0]
    if(setting->min_value) {
 801c640:	6940      	ldr	r0, [r0, #20]
 801c642:	b168      	cbz	r0, 801c660 <validate_uint_value+0x2c>
        if((status = read_uint((char *)setting->min_value, &set_idx, &val)) != Status_OK)
 801c644:	aa01      	add	r2, sp, #4
 801c646:	4669      	mov	r1, sp
 801c648:	f7f8 fe50 	bl	80152ec <read_uint>
 801c64c:	b9d8      	cbnz	r0, 801c686 <validate_uint_value+0x52>
        if(!(value >= val || (setting->flags.allow_null && value == 0)))
 801c64e:	9b01      	ldr	r3, [sp, #4]
 801c650:	42ab      	cmp	r3, r5
 801c652:	d905      	bls.n	801c660 <validate_uint_value+0x2c>
 801c654:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801c658:	f013 0f02 	tst.w	r3, #2
 801c65c:	d00e      	beq.n	801c67c <validate_uint_value+0x48>
 801c65e:	b97d      	cbnz	r5, 801c680 <validate_uint_value+0x4c>
    if(setting->max_value) {
 801c660:	69a0      	ldr	r0, [r4, #24]
 801c662:	b178      	cbz	r0, 801c684 <validate_uint_value+0x50>
        set_idx = 0;
 801c664:	2300      	movs	r3, #0
 801c666:	9300      	str	r3, [sp, #0]
        if((status = read_uint((char *)setting->max_value, &set_idx, &val)) != Status_OK)
 801c668:	aa01      	add	r2, sp, #4
 801c66a:	4669      	mov	r1, sp
 801c66c:	f7f8 fe3e 	bl	80152ec <read_uint>
 801c670:	b958      	cbnz	r0, 801c68a <validate_uint_value+0x56>
        if(value > val)
 801c672:	9b01      	ldr	r3, [sp, #4]
 801c674:	42ab      	cmp	r3, r5
 801c676:	d206      	bcs.n	801c686 <validate_uint_value+0x52>
            return Status_SettingValueOutOfRange;
 801c678:	2034      	movs	r0, #52	@ 0x34
 801c67a:	e004      	b.n	801c686 <validate_uint_value+0x52>
            return Status_SettingValueOutOfRange;
 801c67c:	2034      	movs	r0, #52	@ 0x34
 801c67e:	e002      	b.n	801c686 <validate_uint_value+0x52>
 801c680:	2034      	movs	r0, #52	@ 0x34
 801c682:	e000      	b.n	801c686 <validate_uint_value+0x52>
    return Status_OK;
 801c684:	2000      	movs	r0, #0
}
 801c686:	b003      	add	sp, #12
 801c688:	bd30      	pop	{r4, r5, pc}
            return Status_BadNumberFormat;
 801c68a:	2002      	movs	r0, #2
 801c68c:	e7fb      	b.n	801c686 <validate_uint_value+0x52>

0801c68e <setting_validate_me_uint>:
{
    return !(type == Setting_NonCore || type == Setting_NonCoreFn);
}

static status_code_t setting_validate_me_uint (const setting_detail_t *setting, char *svalue)
{
 801c68e:	b530      	push	{r4, r5, lr}
 801c690:	b083      	sub	sp, #12
 801c692:	4604      	mov	r4, r0
 801c694:	4608      	mov	r0, r1
    uint_fast8_t idx = 0;
 801c696:	2300      	movs	r3, #0
 801c698:	9301      	str	r3, [sp, #4]
    uint32_t value;
    status_code_t status;

    if((status = read_uint(svalue, &idx, &value)) != Status_OK)
 801c69a:	466a      	mov	r2, sp
 801c69c:	a901      	add	r1, sp, #4
 801c69e:	f7f8 fe25 	bl	80152ec <read_uint>
 801c6a2:	4605      	mov	r5, r0
 801c6a4:	bb68      	cbnz	r0, 801c702 <setting_validate_me_uint+0x74>
        return status;

    switch(setting->datatype) {
 801c6a6:	7b23      	ldrb	r3, [r4, #12]
 801c6a8:	2b0b      	cmp	r3, #11
 801c6aa:	d82a      	bhi.n	801c702 <setting_validate_me_uint+0x74>
 801c6ac:	e8df f003 	tbb	[pc, r3]
 801c6b0:	160b0b06 	.word	0x160b0b06
 801c6b4:	2929241f 	.word	0x2929241f
 801c6b8:	24242929 	.word	0x24242929

        case Format_Bool:
            if(!(value == 0 || value == 1))
 801c6bc:	9b00      	ldr	r3, [sp, #0]
 801c6be:	2b01      	cmp	r3, #1
 801c6c0:	d91f      	bls.n	801c702 <setting_validate_me_uint+0x74>
                status = Status_SettingValueOutOfRange;
 801c6c2:	2534      	movs	r5, #52	@ 0x34
 801c6c4:	e01d      	b.n	801c702 <setting_validate_me_uint+0x74>
            break;

        case Format_Bitfield:
        case Format_XBitfield:;
            if(value >= (1UL << strnumentries(setting->format, ',')))
 801c6c6:	212c      	movs	r1, #44	@ 0x2c
 801c6c8:	6920      	ldr	r0, [r4, #16]
 801c6ca:	f7ff ff89 	bl	801c5e0 <strnumentries>
 801c6ce:	2301      	movs	r3, #1
 801c6d0:	4083      	lsls	r3, r0
 801c6d2:	9a00      	ldr	r2, [sp, #0]
 801c6d4:	4293      	cmp	r3, r2
 801c6d6:	d814      	bhi.n	801c702 <setting_validate_me_uint+0x74>
                status = Status_SettingValueOutOfRange;
 801c6d8:	2534      	movs	r5, #52	@ 0x34
 801c6da:	e012      	b.n	801c702 <setting_validate_me_uint+0x74>
            break;

        case Format_RadioButtons:
            if(value >= strnumentries(setting->format, ','))
 801c6dc:	212c      	movs	r1, #44	@ 0x2c
 801c6de:	6920      	ldr	r0, [r4, #16]
 801c6e0:	f7ff ff7e 	bl	801c5e0 <strnumentries>
 801c6e4:	9b00      	ldr	r3, [sp, #0]
 801c6e6:	4298      	cmp	r0, r3
 801c6e8:	d80b      	bhi.n	801c702 <setting_validate_me_uint+0x74>
                status = Status_SettingValueOutOfRange;
 801c6ea:	2534      	movs	r5, #52	@ 0x34
 801c6ec:	e009      	b.n	801c702 <setting_validate_me_uint+0x74>
            break;

        case Format_AxisMask:
            if(value >= (1 << N_AXIS))
 801c6ee:	9b00      	ldr	r3, [sp, #0]
 801c6f0:	2b07      	cmp	r3, #7
 801c6f2:	d906      	bls.n	801c702 <setting_validate_me_uint+0x74>
                status = Status_SettingValueOutOfRange;
 801c6f4:	2534      	movs	r5, #52	@ 0x34
 801c6f6:	e004      	b.n	801c702 <setting_validate_me_uint+0x74>
            break;

        case Format_Int8:
        case Format_Int16:
        case Format_Integer:
            status = validate_uint_value(setting, value);
 801c6f8:	9900      	ldr	r1, [sp, #0]
 801c6fa:	4620      	mov	r0, r4
 801c6fc:	f7ff ff9a 	bl	801c634 <validate_uint_value>
 801c700:	4605      	mov	r5, r0
        default:
            break;
    }

    return status;
}
 801c702:	4628      	mov	r0, r5
 801c704:	b003      	add	sp, #12
 801c706:	bd30      	pop	{r4, r5, pc}

0801c708 <validate_value>:
{
 801c708:	b510      	push	{r4, lr}
 801c70a:	ed2d 8b02 	vpush	{d8}
 801c70e:	b082      	sub	sp, #8
 801c710:	4604      	mov	r4, r0
 801c712:	eeb0 8a40 	vmov.f32	s16, s0
    uint_fast8_t set_idx = 0;
 801c716:	2300      	movs	r3, #0
 801c718:	9300      	str	r3, [sp, #0]
    if(setting->min_value) {
 801c71a:	6940      	ldr	r0, [r0, #20]
 801c71c:	b1b8      	cbz	r0, 801c74e <validate_value+0x46>
        if(!read_float((char *)setting->min_value, &set_idx, &val))
 801c71e:	aa01      	add	r2, sp, #4
 801c720:	4669      	mov	r1, sp
 801c722:	f7f8 fe2d 	bl	8015380 <read_float>
 801c726:	b348      	cbz	r0, 801c77c <validate_value+0x74>
        if(!(value >= val || (setting->flags.allow_null && value == 0.0f)))
 801c728:	eddd 7a01 	vldr	s15, [sp, #4]
 801c72c:	eef4 7ac8 	vcmpe.f32	s15, s16
 801c730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c734:	d910      	bls.n	801c758 <validate_value+0x50>
 801c736:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801c73a:	f013 0f02 	tst.w	r3, #2
 801c73e:	d01f      	beq.n	801c780 <validate_value+0x78>
 801c740:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801c744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c748:	d006      	beq.n	801c758 <validate_value+0x50>
            return Status_SettingValueOutOfRange;
 801c74a:	2034      	movs	r0, #52	@ 0x34
 801c74c:	e01d      	b.n	801c78a <validate_value+0x82>
    } else if(value < 0.0f)
 801c74e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c756:	d415      	bmi.n	801c784 <validate_value+0x7c>
    if(setting->max_value) {
 801c758:	69a0      	ldr	r0, [r4, #24]
 801c75a:	b1a8      	cbz	r0, 801c788 <validate_value+0x80>
        set_idx = 0;
 801c75c:	2300      	movs	r3, #0
 801c75e:	9300      	str	r3, [sp, #0]
        if(!read_float((char *)setting->max_value, &set_idx, &val))
 801c760:	aa01      	add	r2, sp, #4
 801c762:	4669      	mov	r1, sp
 801c764:	f7f8 fe0c 	bl	8015380 <read_float>
 801c768:	b198      	cbz	r0, 801c792 <validate_value+0x8a>
        if(value > val)
 801c76a:	eddd 7a01 	vldr	s15, [sp, #4]
 801c76e:	eef4 7ac8 	vcmpe.f32	s15, s16
 801c772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c776:	d40e      	bmi.n	801c796 <validate_value+0x8e>
    return Status_OK;
 801c778:	2000      	movs	r0, #0
 801c77a:	e006      	b.n	801c78a <validate_value+0x82>
            return Status_BadNumberFormat;
 801c77c:	2002      	movs	r0, #2
 801c77e:	e004      	b.n	801c78a <validate_value+0x82>
            return Status_SettingValueOutOfRange;
 801c780:	2034      	movs	r0, #52	@ 0x34
 801c782:	e002      	b.n	801c78a <validate_value+0x82>
        return Status_NegativeValue;
 801c784:	2004      	movs	r0, #4
 801c786:	e000      	b.n	801c78a <validate_value+0x82>
    return Status_OK;
 801c788:	2000      	movs	r0, #0
}
 801c78a:	b002      	add	sp, #8
 801c78c:	ecbd 8b02 	vpop	{d8}
 801c790:	bd10      	pop	{r4, pc}
            return Status_BadNumberFormat;
 801c792:	2002      	movs	r0, #2
 801c794:	e7f9      	b.n	801c78a <validate_value+0x82>
            return Status_SettingValueOutOfRange;
 801c796:	2034      	movs	r0, #52	@ 0x34
 801c798:	e7f7      	b.n	801c78a <validate_value+0x82>
	...

0801c79c <settings_changed_spindle>:
    // If no details available setting could nevertheless be a valid setting id.
    return setting == NULL ? Status_OK : setting_validate_me(setting, value, svalue);
}

static bool settings_changed_spindle (void)
{
 801c79c:	b510      	push	{r4, lr}
    static spindle_settings_t spindle_settings = {0};

    bool changed;

    if((changed = memcmp(&spindle_settings, &settings.spindle, sizeof(spindle_settings_t))) != 0)
 801c79e:	2274      	movs	r2, #116	@ 0x74
 801c7a0:	4907      	ldr	r1, [pc, #28]	@ (801c7c0 <settings_changed_spindle+0x24>)
 801c7a2:	4808      	ldr	r0, [pc, #32]	@ (801c7c4 <settings_changed_spindle+0x28>)
 801c7a4:	f007 fe41 	bl	802442a <memcmp>
 801c7a8:	2800      	cmp	r0, #0
 801c7aa:	bf14      	ite	ne
 801c7ac:	2401      	movne	r4, #1
 801c7ae:	2400      	moveq	r4, #0
 801c7b0:	d004      	beq.n	801c7bc <settings_changed_spindle+0x20>
        memcpy(&spindle_settings, &settings.spindle, sizeof(spindle_settings_t));
 801c7b2:	2274      	movs	r2, #116	@ 0x74
 801c7b4:	4902      	ldr	r1, [pc, #8]	@ (801c7c0 <settings_changed_spindle+0x24>)
 801c7b6:	4803      	ldr	r0, [pc, #12]	@ (801c7c4 <settings_changed_spindle+0x28>)
 801c7b8:	f007 ffc1 	bl	802473e <memcpy>

    return changed;
}
 801c7bc:	4620      	mov	r0, r4
 801c7be:	bd10      	pop	{r4, pc}
 801c7c0:	20001c38 	.word	0x20001c38
 801c7c4:	20001ad8 	.word	0x20001ad8

0801c7c8 <settings_register>:
    settingsd->next = details;
 801c7c8:	4b02      	ldr	r3, [pc, #8]	@ (801c7d4 <settings_register+0xc>)
 801c7ca:	681a      	ldr	r2, [r3, #0]
 801c7cc:	6190      	str	r0, [r2, #24]
    settingsd = details;
 801c7ce:	6018      	str	r0, [r3, #0]
}
 801c7d0:	4770      	bx	lr
 801c7d2:	bf00      	nop
 801c7d4:	20000200 	.word	0x20000200

0801c7d8 <settings_get_details>:
}
 801c7d8:	4800      	ldr	r0, [pc, #0]	@ (801c7dc <settings_get_details+0x4>)
 801c7da:	4770      	bx	lr
 801c7dc:	20000204 	.word	0x20000204

0801c7e0 <settings_get_axis_base>:
{
 801c7e0:	b538      	push	{r3, r4, r5, lr}
 801c7e2:	4604      	mov	r4, r0
 801c7e4:	460d      	mov	r5, r1
    setting_id_t base = normalize_id(id);
 801c7e6:	f7ff fa23 	bl	801bc30 <normalize_id>
    *idx = id - base;
 801c7ea:	1a24      	subs	r4, r4, r0
 801c7ec:	602c      	str	r4, [r5, #0]
    return *idx < N_AXIS ? base : Setting_SettingsMax;
 801c7ee:	2c02      	cmp	r4, #2
 801c7f0:	d800      	bhi.n	801c7f4 <settings_get_axis_base+0x14>
}
 801c7f2:	bd38      	pop	{r3, r4, r5, pc}
    return *idx < N_AXIS ? base : Setting_SettingsMax;
 801c7f4:	f240 20e5 	movw	r0, #741	@ 0x2e5
 801c7f8:	e7fb      	b.n	801c7f2 <settings_get_axis_base+0x12>
	...

0801c7fc <get_float>:
    if (setting >= Setting_AxisSettingsBase && setting <= Setting_AxisSettingsMax) {
 801c7fc:	f1a0 0364 	sub.w	r3, r0, #100	@ 0x64
 801c800:	b29b      	uxth	r3, r3
 801c802:	2b5d      	cmp	r3, #93	@ 0x5d
 801c804:	d905      	bls.n	801c812 <get_float+0x16>
    } else switch(setting) {
 801c806:	f5b0 7fab 	cmp.w	r0, #342	@ 0x156
 801c80a:	d060      	beq.n	801c8ce <get_float+0xd2>
    float value = 0.0f;
 801c80c:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 801c8d8 <get_float+0xdc>
}
 801c810:	4770      	bx	lr
{
 801c812:	b500      	push	{lr}
 801c814:	b083      	sub	sp, #12
        switch(settings_get_axis_base(setting, &idx)) {
 801c816:	a901      	add	r1, sp, #4
 801c818:	f7ff ffe2 	bl	801c7e0 <settings_get_axis_base>
 801c81c:	2882      	cmp	r0, #130	@ 0x82
 801c81e:	d816      	bhi.n	801c84e <get_float+0x52>
 801c820:	2864      	cmp	r0, #100	@ 0x64
 801c822:	d34c      	bcc.n	801c8be <get_float+0xc2>
 801c824:	3864      	subs	r0, #100	@ 0x64
 801c826:	281e      	cmp	r0, #30
 801c828:	d84c      	bhi.n	801c8c4 <get_float+0xc8>
 801c82a:	e8df f000 	tbb	[pc, r0]
 801c82e:	4b1e      	.short	0x4b1e
 801c830:	4b4b4b4b 	.word	0x4b4b4b4b
 801c834:	4b4b4b4b 	.word	0x4b4b4b4b
 801c838:	4b4b4b27 	.word	0x4b4b4b27
 801c83c:	4b4b4b4b 	.word	0x4b4b4b4b
 801c840:	4b304b4b 	.word	0x4b304b4b
 801c844:	4b4b4b4b 	.word	0x4b4b4b4b
 801c848:	4b4b4b4b 	.word	0x4b4b4b4b
 801c84c:	3d          	.byte	0x3d
 801c84d:	00          	.byte	0x00
 801c84e:	28aa      	cmp	r0, #170	@ 0xaa
 801c850:	d108      	bne.n	801c864 <get_float+0x68>
                value = settings.axis[idx].dual_axis_offset;
 801c852:	9b01      	ldr	r3, [sp, #4]
 801c854:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c858:	4a20      	ldr	r2, [pc, #128]	@ (801c8dc <get_float+0xe0>)
 801c85a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c85e:	ed93 0a10 	vldr	s0, [r3, #64]	@ 0x40
                break;
 801c862:	e031      	b.n	801c8c8 <get_float+0xcc>
        switch(settings_get_axis_base(setting, &idx)) {
 801c864:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 801c8d8 <get_float+0xdc>
 801c868:	e02e      	b.n	801c8c8 <get_float+0xcc>
                value = settings.axis[idx].steps_per_mm;
 801c86a:	9b01      	ldr	r3, [sp, #4]
 801c86c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c870:	4a1a      	ldr	r2, [pc, #104]	@ (801c8dc <get_float+0xe0>)
 801c872:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c876:	ed93 0a0c 	vldr	s0, [r3, #48]	@ 0x30
                break;
 801c87a:	e025      	b.n	801c8c8 <get_float+0xcc>
                value = settings.axis[idx].max_rate;
 801c87c:	9b01      	ldr	r3, [sp, #4]
 801c87e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c882:	4a16      	ldr	r2, [pc, #88]	@ (801c8dc <get_float+0xe0>)
 801c884:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c888:	ed93 0a0d 	vldr	s0, [r3, #52]	@ 0x34
                break;
 801c88c:	e01c      	b.n	801c8c8 <get_float+0xcc>
                value = settings.axis[idx].acceleration / (60.0f * 60.0f); // Convert from mm/min^2 to mm/sec^2.
 801c88e:	9b01      	ldr	r3, [sp, #4]
 801c890:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c894:	4a11      	ldr	r2, [pc, #68]	@ (801c8dc <get_float+0xe0>)
 801c896:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c89a:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 801c89e:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801c8e0 <get_float+0xe4>
 801c8a2:	ee87 0a27 	vdiv.f32	s0, s14, s15
                break;
 801c8a6:	e00f      	b.n	801c8c8 <get_float+0xcc>
                value = -settings.axis[idx].max_travel; // Store as negative for grbl internal use.
 801c8a8:	9b01      	ldr	r3, [sp, #4]
 801c8aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c8ae:	4a0b      	ldr	r2, [pc, #44]	@ (801c8dc <get_float+0xe0>)
 801c8b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c8b4:	ed93 0a0f 	vldr	s0, [r3, #60]	@ 0x3c
 801c8b8:	eeb1 0a40 	vneg.f32	s0, s0
                break;
 801c8bc:	e004      	b.n	801c8c8 <get_float+0xcc>
        switch(settings_get_axis_base(setting, &idx)) {
 801c8be:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 801c8d8 <get_float+0xdc>
 801c8c2:	e001      	b.n	801c8c8 <get_float+0xcc>
 801c8c4:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 801c8d8 <get_float+0xdc>
}
 801c8c8:	b003      	add	sp, #12
 801c8ca:	f85d fb04 	ldr.w	pc, [sp], #4
            value = settings.tool_change.probing_distance;
 801c8ce:	4b03      	ldr	r3, [pc, #12]	@ (801c8dc <get_float+0xe0>)
 801c8d0:	ed93 0a0a 	vldr	s0, [r3, #40]	@ 0x28
            break;
 801c8d4:	4770      	bx	lr
 801c8d6:	bf00      	nop
 801c8d8:	00000000 	.word	0x00000000
 801c8dc:	20001bc4 	.word	0x20001bc4
 801c8e0:	45610000 	.word	0x45610000

0801c8e4 <set_axis_setting>:
{
 801c8e4:	b510      	push	{r4, lr}
 801c8e6:	ed2d 8b02 	vpush	{d8}
 801c8ea:	b082      	sub	sp, #8
 801c8ec:	eeb0 8a40 	vmov.f32	s16, s0
    switch(settings_get_axis_base(setting, &idx)) {
 801c8f0:	a901      	add	r1, sp, #4
 801c8f2:	f7ff ff75 	bl	801c7e0 <settings_get_axis_base>
 801c8f6:	2882      	cmp	r0, #130	@ 0x82
 801c8f8:	d827      	bhi.n	801c94a <set_axis_setting+0x66>
 801c8fa:	2864      	cmp	r0, #100	@ 0x64
 801c8fc:	f0c0 8131 	bcc.w	801cb62 <set_axis_setting+0x27e>
 801c900:	3864      	subs	r0, #100	@ 0x64
 801c902:	281e      	cmp	r0, #30
 801c904:	f200 812f 	bhi.w	801cb66 <set_axis_setting+0x282>
 801c908:	e8df f010 	tbh	[pc, r0, lsl #1]
 801c90c:	012d003b 	.word	0x012d003b
 801c910:	012d012d 	.word	0x012d012d
 801c914:	012d012d 	.word	0x012d012d
 801c918:	012d012d 	.word	0x012d012d
 801c91c:	012d012d 	.word	0x012d012d
 801c920:	012d00b6 	.word	0x012d00b6
 801c924:	012d012d 	.word	0x012d012d
 801c928:	012d012d 	.word	0x012d012d
 801c92c:	012d012d 	.word	0x012d012d
 801c930:	012d012d 	.word	0x012d012d
 801c934:	012d00da 	.word	0x012d00da
 801c938:	012d012d 	.word	0x012d012d
 801c93c:	012d012d 	.word	0x012d012d
 801c940:	012d012d 	.word	0x012d012d
 801c944:	012d012d 	.word	0x012d012d
 801c948:	00ef      	.short	0x00ef
 801c94a:	28aa      	cmp	r0, #170	@ 0xaa
 801c94c:	d117      	bne.n	801c97e <set_axis_setting+0x9a>
            if(hal.stepper.get_ganged && bit_istrue(hal.stepper.get_ganged(true).mask, bit(idx)))
 801c94e:	4b8c      	ldr	r3, [pc, #560]	@ (801cb80 <set_axis_setting+0x29c>)
 801c950:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801c954:	2b00      	cmp	r3, #0
 801c956:	f000 810f 	beq.w	801cb78 <set_axis_setting+0x294>
 801c95a:	2001      	movs	r0, #1
 801c95c:	4798      	blx	r3
 801c95e:	b2c0      	uxtb	r0, r0
 801c960:	9b01      	ldr	r3, [sp, #4]
 801c962:	40d8      	lsrs	r0, r3
 801c964:	f010 0f01 	tst.w	r0, #1
 801c968:	f000 8108 	beq.w	801cb7c <set_axis_setting+0x298>
                settings.axis[idx].dual_axis_offset = value;
 801c96c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c970:	4a84      	ldr	r2, [pc, #528]	@ (801cb84 <set_axis_setting+0x2a0>)
 801c972:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c976:	ed83 8a10 	vstr	s16, [r3, #64]	@ 0x40
    status_code_t status = Status_OK;
 801c97a:	2000      	movs	r0, #0
                settings.axis[idx].dual_axis_offset = value;
 801c97c:	e0f4      	b.n	801cb68 <set_axis_setting+0x284>
    switch(settings_get_axis_base(setting, &idx)) {
 801c97e:	2035      	movs	r0, #53	@ 0x35
 801c980:	e0f2      	b.n	801cb68 <set_axis_setting+0x284>
            if (hal.max_step_rate && value * settings.axis[idx].max_rate > (float)hal.max_step_rate * 60.0f)
 801c982:	4b7f      	ldr	r3, [pc, #508]	@ (801cb80 <set_axis_setting+0x29c>)
 801c984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c986:	b1bb      	cbz	r3, 801c9b8 <set_axis_setting+0xd4>
 801c988:	9a01      	ldr	r2, [sp, #4]
 801c98a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801c98e:	497d      	ldr	r1, [pc, #500]	@ (801cb84 <set_axis_setting+0x2a0>)
 801c990:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801c994:	ed92 7a0d 	vldr	s14, [r2, #52]	@ 0x34
 801c998:	ee27 7a08 	vmul.f32	s14, s14, s16
 801c99c:	ee07 3a90 	vmov	s15, r3
 801c9a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c9a4:	eddf 6a78 	vldr	s13, [pc, #480]	@ 801cb88 <set_axis_setting+0x2a4>
 801c9a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c9ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9b4:	f300 80dc 	bgt.w	801cb70 <set_axis_setting+0x28c>
                if(settings.axis[idx].steps_per_mm > 0.0f && settings.axis[idx].steps_per_mm != value) {
 801c9b8:	9b01      	ldr	r3, [sp, #4]
 801c9ba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801c9be:	4a71      	ldr	r2, [pc, #452]	@ (801cb84 <set_axis_setting+0x2a0>)
 801c9c0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801c9c4:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 801c9c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9d0:	dd04      	ble.n	801c9dc <set_axis_setting+0xf8>
 801c9d2:	eef4 7a48 	vcmp.f32	s15, s16
 801c9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9da:	d109      	bne.n	801c9f0 <set_axis_setting+0x10c>
                settings.axis[idx].steps_per_mm = value;
 801c9dc:	9b01      	ldr	r3, [sp, #4]
 801c9de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c9e2:	4a68      	ldr	r2, [pc, #416]	@ (801cb84 <set_axis_setting+0x2a0>)
 801c9e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c9e8:	ed83 8a0c 	vstr	s16, [r3, #48]	@ 0x30
    status_code_t status = Status_OK;
 801c9ec:	2000      	movs	r0, #0
 801c9ee:	e0bb      	b.n	801cb68 <set_axis_setting+0x284>
                    float comp = value / settings.axis[idx].steps_per_mm;
 801c9f0:	ee88 7a27 	vdiv.f32	s14, s16, s15
                    sys.position[idx] *= comp;
 801c9f4:	4c65      	ldr	r4, [pc, #404]	@ (801cb8c <set_axis_setting+0x2a8>)
 801c9f6:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 801c9fa:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 801c9fe:	ee07 1a90 	vmov	s15, r1
 801ca02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ca06:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ca0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ca0e:	ee17 1a90 	vmov	r1, s15
 801ca12:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
                    sys.home_position[idx] *= comp;
 801ca16:	f103 0216 	add.w	r2, r3, #22
 801ca1a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ca1e:	edd2 7a00 	vldr	s15, [r2]
 801ca22:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ca26:	edc2 7a00 	vstr	s15, [r2]
                    sys.probe_position[idx] *= comp;
 801ca2a:	f103 020e 	add.w	r2, r3, #14
 801ca2e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 801ca32:	ee07 1a90 	vmov	s15, r1
 801ca36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ca3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ca3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ca42:	ee17 1a90 	vmov	r1, s15
 801ca46:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
                    sys.tlo_reference[idx] *= comp;
 801ca4a:	3302      	adds	r3, #2
 801ca4c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 801ca50:	ee07 2a90 	vmov	s15, r2
 801ca54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ca58:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ca5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ca60:	ee17 2a90 	vmov	r2, s15
 801ca64:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                    sync_position();
 801ca68:	f7f9 fda2 	bl	80165b0 <plan_sync_position>
 801ca6c:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 801ca70:	4847      	ldr	r0, [pc, #284]	@ (801cb90 <set_axis_setting+0x2ac>)
 801ca72:	f004 fd61 	bl	8021538 <system_convert_array_steps_to_mpos>
 801ca76:	e7b1      	b.n	801c9dc <set_axis_setting+0xf8>
            if (hal.max_step_rate && value * settings.axis[idx].steps_per_mm > (float)hal.max_step_rate * 60.0f)
 801ca78:	4b41      	ldr	r3, [pc, #260]	@ (801cb80 <set_axis_setting+0x29c>)
 801ca7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ca7c:	b1b3      	cbz	r3, 801caac <set_axis_setting+0x1c8>
 801ca7e:	9a01      	ldr	r2, [sp, #4]
 801ca80:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ca84:	493f      	ldr	r1, [pc, #252]	@ (801cb84 <set_axis_setting+0x2a0>)
 801ca86:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801ca8a:	ed92 7a0c 	vldr	s14, [r2, #48]	@ 0x30
 801ca8e:	ee27 7a08 	vmul.f32	s14, s14, s16
 801ca92:	ee07 3a90 	vmov	s15, r3
 801ca96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ca9a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801cb88 <set_axis_setting+0x2a4>
 801ca9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801caa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801caa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801caaa:	dc63      	bgt.n	801cb74 <set_axis_setting+0x290>
                settings.axis[idx].max_rate = value;
 801caac:	9b01      	ldr	r3, [sp, #4]
 801caae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801cab2:	4a34      	ldr	r2, [pc, #208]	@ (801cb84 <set_axis_setting+0x2a0>)
 801cab4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cab8:	ed83 8a0d 	vstr	s16, [r3, #52]	@ 0x34
    status_code_t status = Status_OK;
 801cabc:	2000      	movs	r0, #0
 801cabe:	e053      	b.n	801cb68 <set_axis_setting+0x284>
            settings.axis[idx].acceleration = override_backup.acceleration[idx] = value * 60.0f * 60.0f; // Convert to mm/min^2 for grbl internal use.
 801cac0:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801cb88 <set_axis_setting+0x2a4>
 801cac4:	ee28 0a27 	vmul.f32	s0, s16, s15
 801cac8:	9b01      	ldr	r3, [sp, #4]
 801caca:	ee20 0a27 	vmul.f32	s0, s0, s15
 801cace:	4a31      	ldr	r2, [pc, #196]	@ (801cb94 <set_axis_setting+0x2b0>)
 801cad0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801cad4:	ed82 0a01 	vstr	s0, [r2, #4]
 801cad8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801cadc:	4a29      	ldr	r2, [pc, #164]	@ (801cb84 <set_axis_setting+0x2a0>)
 801cade:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cae2:	ed83 0a0e 	vstr	s0, [r3, #56]	@ 0x38
    status_code_t status = Status_OK;
 801cae6:	2000      	movs	r0, #0
            break;
 801cae8:	e03e      	b.n	801cb68 <set_axis_setting+0x284>
            if(settings.axis[idx].max_travel != -value) {
 801caea:	9a01      	ldr	r2, [sp, #4]
 801caec:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 801caf0:	4b24      	ldr	r3, [pc, #144]	@ (801cb84 <set_axis_setting+0x2a0>)
 801caf2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801caf6:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 801cafa:	eeb1 8a48 	vneg.f32	s16, s16
 801cafe:	eef4 7a48 	vcmp.f32	s15, s16
 801cb02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb06:	d116      	bne.n	801cb36 <set_axis_setting+0x252>
            settings.axis[idx].max_travel = -value; // Store as negative for grbl internal use.
 801cb08:	9b01      	ldr	r3, [sp, #4]
 801cb0a:	4a1e      	ldr	r2, [pc, #120]	@ (801cb84 <set_axis_setting+0x2a0>)
 801cb0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801cb10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cb14:	ed83 8a0f 	vstr	s16, [r3, #60]	@ 0x3c
            if(settings.homing.flags.init_lock && (sys.homing.mask & sys.homed.mask) != sys.homing.mask) {
 801cb18:	f892 3114 	ldrb.w	r3, [r2, #276]	@ 0x114
 801cb1c:	f013 0f04 	tst.w	r3, #4
 801cb20:	d005      	beq.n	801cb2e <set_axis_setting+0x24a>
 801cb22:	4a1a      	ldr	r2, [pc, #104]	@ (801cb8c <set_axis_setting+0x2a8>)
 801cb24:	7e93      	ldrb	r3, [r2, #26]
 801cb26:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 801cb2a:	4393      	bics	r3, r2
 801cb2c:	d111      	bne.n	801cb52 <set_axis_setting+0x26e>
            tmp_set_soft_limits();
 801cb2e:	f7fe fee1 	bl	801b8f4 <tmp_set_soft_limits>
    status_code_t status = Status_OK;
 801cb32:	2000      	movs	r0, #0
            break;
 801cb34:	e018      	b.n	801cb68 <set_axis_setting+0x284>
                bit_false(sys.homed.mask, bit(idx));
 801cb36:	4815      	ldr	r0, [pc, #84]	@ (801cb8c <set_axis_setting+0x2a8>)
 801cb38:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 801cb3c:	2101      	movs	r1, #1
 801cb3e:	fa01 f202 	lsl.w	r2, r1, r2
 801cb42:	ea23 0302 	bic.w	r3, r3, r2
 801cb46:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
                system_add_rt_report(Report_Homed);
 801cb4a:	2004      	movs	r0, #4
 801cb4c:	f004 fd98 	bl	8021680 <system_add_rt_report>
 801cb50:	e7da      	b.n	801cb08 <set_axis_setting+0x224>
                system_raise_alarm(Alarm_HomingRequired);
 801cb52:	200b      	movs	r0, #11
 801cb54:	f004 fd46 	bl	80215e4 <system_raise_alarm>
                grbl.report.feedback_message(Message_HomingCycleRequired);
 801cb58:	4b0f      	ldr	r3, [pc, #60]	@ (801cb98 <set_axis_setting+0x2b4>)
 801cb5a:	68db      	ldr	r3, [r3, #12]
 801cb5c:	200d      	movs	r0, #13
 801cb5e:	4798      	blx	r3
 801cb60:	e7e5      	b.n	801cb2e <set_axis_setting+0x24a>
    switch(settings_get_axis_base(setting, &idx)) {
 801cb62:	2035      	movs	r0, #53	@ 0x35
 801cb64:	e000      	b.n	801cb68 <set_axis_setting+0x284>
 801cb66:	2035      	movs	r0, #53	@ 0x35
}
 801cb68:	b002      	add	sp, #8
 801cb6a:	ecbd 8b02 	vpop	{d8}
 801cb6e:	bd10      	pop	{r4, pc}
                status = Status_MaxStepRateExceeded;
 801cb70:	200c      	movs	r0, #12
 801cb72:	e7f9      	b.n	801cb68 <set_axis_setting+0x284>
                status = Status_MaxStepRateExceeded;
 801cb74:	200c      	movs	r0, #12
 801cb76:	e7f7      	b.n	801cb68 <set_axis_setting+0x284>
                status = Status_SettingDisabled;
 801cb78:	2035      	movs	r0, #53	@ 0x35
 801cb7a:	e7f5      	b.n	801cb68 <set_axis_setting+0x284>
 801cb7c:	2035      	movs	r0, #53	@ 0x35
 801cb7e:	e7f3      	b.n	801cb68 <set_axis_setting+0x284>
 801cb80:	200011ac 	.word	0x200011ac
 801cb84:	20001bc4 	.word	0x20001bc4
 801cb88:	42700000 	.word	0x42700000
 801cb8c:	2000148c 	.word	0x2000148c
 801cb90:	20000f4c 	.word	0x20000f4c
 801cb94:	20001b4c 	.word	0x20001b4c
 801cb98:	20001394 	.word	0x20001394

0801cb9c <setting_get_value>:
{
 801cb9c:	b510      	push	{r4, lr}
 801cb9e:	ed2d 8b02 	vpush	{d8}
    if(setting == NULL)
 801cba2:	4604      	mov	r4, r0
 801cba4:	2800      	cmp	r0, #0
 801cba6:	d063      	beq.n	801cc70 <setting_get_value+0xd4>
    switch(setting->type) {
 801cba8:	7f02      	ldrb	r2, [r0, #28]
 801cbaa:	2a07      	cmp	r2, #7
 801cbac:	d85f      	bhi.n	801cc6e <setting_get_value+0xd2>
 801cbae:	2301      	movs	r3, #1
 801cbb0:	4093      	lsls	r3, r2
 801cbb2:	f013 0faa 	tst.w	r3, #170	@ 0xaa
 801cbb6:	d131      	bne.n	801cc1c <setting_get_value+0x80>
 801cbb8:	f013 0f55 	tst.w	r3, #85	@ 0x55
 801cbbc:	d05b      	beq.n	801cc76 <setting_get_value+0xda>
            switch(setting->datatype) {
 801cbbe:	7b03      	ldrb	r3, [r0, #12]
 801cbc0:	2b0b      	cmp	r3, #11
 801cbc2:	d85a      	bhi.n	801cc7a <setting_get_value+0xde>
 801cbc4:	e8df f003 	tbb	[pc, r3]
 801cbc8:	11111111 	.word	0x11111111
 801cbcc:	28061b11 	.word	0x28061b11
 801cbd0:	16112820 	.word	0x16112820
                    value = ftoa(*((float *)(setting->value)), get_decimal_places(setting->format));
 801cbd4:	6a03      	ldr	r3, [r0, #32]
 801cbd6:	ed93 8a00 	vldr	s16, [r3]
 801cbda:	6900      	ldr	r0, [r0, #16]
 801cbdc:	f7ff fd15 	bl	801c60a <get_decimal_places>
 801cbe0:	eeb0 0a48 	vmov.f32	s0, s16
 801cbe4:	f7f8 faec 	bl	80151c0 <ftoa>
                    break;
 801cbe8:	e042      	b.n	801cc70 <setting_get_value+0xd4>
                    value = uitoa(*((uint8_t *)(setting->value)));
 801cbea:	6a03      	ldr	r3, [r0, #32]
 801cbec:	7818      	ldrb	r0, [r3, #0]
 801cbee:	f7f8 fac5 	bl	801517c <uitoa>
                    break;
 801cbf2:	e03d      	b.n	801cc70 <setting_get_value+0xd4>
                    value = uitoa(*((uint16_t *)(setting->value)));
 801cbf4:	6a03      	ldr	r3, [r0, #32]
 801cbf6:	8818      	ldrh	r0, [r3, #0]
 801cbf8:	f7f8 fac0 	bl	801517c <uitoa>
                    break;
 801cbfc:	e038      	b.n	801cc70 <setting_get_value+0xd4>
                    value = uitoa(*((uint32_t *)(setting->value)));
 801cbfe:	6a03      	ldr	r3, [r0, #32]
 801cc00:	6818      	ldr	r0, [r3, #0]
 801cc02:	f7f8 fabb 	bl	801517c <uitoa>
                    break;
 801cc06:	e033      	b.n	801cc70 <setting_get_value+0xd4>
                    value = hal.stream.state.webui_connected ? PASSWORD_MASK : ((char *)(setting->value));
 801cc08:	4b1f      	ldr	r3, [pc, #124]	@ (801cc88 <setting_get_value+0xec>)
 801cc0a:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 801cc0e:	f013 0f02 	tst.w	r3, #2
 801cc12:	d134      	bne.n	801cc7e <setting_get_value+0xe2>
 801cc14:	6a00      	ldr	r0, [r0, #32]
 801cc16:	e02b      	b.n	801cc70 <setting_get_value+0xd4>
                    value = ((char *)(setting->value));
 801cc18:	6a00      	ldr	r0, [r0, #32]
                    break;
 801cc1a:	e029      	b.n	801cc70 <setting_get_value+0xd4>
            setting_id_t id = (setting_id_t)(setting->id + offset);
 801cc1c:	8803      	ldrh	r3, [r0, #0]
 801cc1e:	fa13 f181 	uxtah	r1, r3, r1
 801cc22:	b288      	uxth	r0, r1
            switch(setting->datatype) {
 801cc24:	7b23      	ldrb	r3, [r4, #12]
 801cc26:	3b06      	subs	r3, #6
 801cc28:	2b03      	cmp	r3, #3
 801cc2a:	d81b      	bhi.n	801cc64 <setting_get_value+0xc8>
 801cc2c:	e8df f003 	tbb	[pc, r3]
 801cc30:	170e1702 	.word	0x170e1702
                    value = ftoa(((setting_get_float_ptr)(setting->get_value))(id), get_decimal_places(setting->format));
 801cc34:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801cc36:	4798      	blx	r3
 801cc38:	eeb0 8a40 	vmov.f32	s16, s0
 801cc3c:	6920      	ldr	r0, [r4, #16]
 801cc3e:	f7ff fce4 	bl	801c60a <get_decimal_places>
 801cc42:	eeb0 0a48 	vmov.f32	s0, s16
 801cc46:	f7f8 fabb 	bl	80151c0 <ftoa>
                    break;
 801cc4a:	e011      	b.n	801cc70 <setting_get_value+0xd4>
                    value = hal.stream.state.webui_connected ? "********" : ((setting_get_string_ptr)(setting->get_value))(id);
 801cc4c:	4b0e      	ldr	r3, [pc, #56]	@ (801cc88 <setting_get_value+0xec>)
 801cc4e:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 801cc52:	f013 0f02 	tst.w	r3, #2
 801cc56:	d114      	bne.n	801cc82 <setting_get_value+0xe6>
 801cc58:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801cc5a:	4798      	blx	r3
 801cc5c:	e008      	b.n	801cc70 <setting_get_value+0xd4>
                    value = ((setting_get_string_ptr)(setting->get_value))(id);
 801cc5e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801cc60:	4798      	blx	r3
                    break;
 801cc62:	e005      	b.n	801cc70 <setting_get_value+0xd4>
                    value = uitoa(((setting_get_int_ptr)(setting->get_value))(id));
 801cc64:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801cc66:	4798      	blx	r3
 801cc68:	f7f8 fa88 	bl	801517c <uitoa>
                    break;
 801cc6c:	e000      	b.n	801cc70 <setting_get_value+0xd4>
    switch(setting->type) {
 801cc6e:	2000      	movs	r0, #0
}
 801cc70:	ecbd 8b02 	vpop	{d8}
 801cc74:	bd10      	pop	{r4, pc}
    switch(setting->type) {
 801cc76:	2000      	movs	r0, #0
 801cc78:	e7fa      	b.n	801cc70 <setting_get_value+0xd4>
 801cc7a:	2000      	movs	r0, #0
 801cc7c:	e7f8      	b.n	801cc70 <setting_get_value+0xd4>
                    value = hal.stream.state.webui_connected ? PASSWORD_MASK : ((char *)(setting->value));
 801cc7e:	4803      	ldr	r0, [pc, #12]	@ (801cc8c <setting_get_value+0xf0>)
 801cc80:	e7f6      	b.n	801cc70 <setting_get_value+0xd4>
                    value = hal.stream.state.webui_connected ? "********" : ((setting_get_string_ptr)(setting->get_value))(id);
 801cc82:	4802      	ldr	r0, [pc, #8]	@ (801cc8c <setting_get_value+0xf0>)
 801cc84:	e7f4      	b.n	801cc70 <setting_get_value+0xd4>
 801cc86:	bf00      	nop
 801cc88:	200011ac 	.word	0x200011ac
 801cc8c:	0802bbdc 	.word	0x0802bbdc

0801cc90 <setting_get_int_value>:
    if(setting) switch(setting->type) {
 801cc90:	b358      	cbz	r0, 801ccea <setting_get_int_value+0x5a>
{
 801cc92:	b508      	push	{r3, lr}
 801cc94:	4603      	mov	r3, r0
    if(setting) switch(setting->type) {
 801cc96:	7f00      	ldrb	r0, [r0, #28]
 801cc98:	2807      	cmp	r0, #7
 801cc9a:	d828      	bhi.n	801ccee <setting_get_int_value+0x5e>
 801cc9c:	2201      	movs	r2, #1
 801cc9e:	4082      	lsls	r2, r0
 801cca0:	f012 0faa 	tst.w	r2, #170	@ 0xaa
 801cca4:	d116      	bne.n	801ccd4 <setting_get_int_value+0x44>
 801cca6:	f012 0f55 	tst.w	r2, #85	@ 0x55
 801ccaa:	d022      	beq.n	801ccf2 <setting_get_int_value+0x62>
            switch(setting->datatype) {
 801ccac:	7b1a      	ldrb	r2, [r3, #12]
 801ccae:	2a0b      	cmp	r2, #11
 801ccb0:	d821      	bhi.n	801ccf6 <setting_get_int_value+0x66>
 801ccb2:	e8df f002 	tbb	[pc, r2]
 801ccb6:	0606      	.short	0x0606
 801ccb8:	0c060606 	.word	0x0c060606
 801ccbc:	20202020 	.word	0x20202020
 801ccc0:	0906      	.short	0x0906
                    value = *((uint8_t *)(setting->value));
 801ccc2:	6a1b      	ldr	r3, [r3, #32]
 801ccc4:	7818      	ldrb	r0, [r3, #0]
                    break;
 801ccc6:	e013      	b.n	801ccf0 <setting_get_int_value+0x60>
                    value = *((uint16_t *)(setting->value));
 801ccc8:	6a1b      	ldr	r3, [r3, #32]
 801ccca:	8818      	ldrh	r0, [r3, #0]
                    break;
 801cccc:	e010      	b.n	801ccf0 <setting_get_int_value+0x60>
                    value = *((uint32_t *)(setting->value));
 801ccce:	6a1b      	ldr	r3, [r3, #32]
 801ccd0:	6818      	ldr	r0, [r3, #0]
                    break;
 801ccd2:	e00d      	b.n	801ccf0 <setting_get_int_value+0x60>
            switch(setting->datatype) {
 801ccd4:	7b1a      	ldrb	r2, [r3, #12]
 801ccd6:	3a06      	subs	r2, #6
 801ccd8:	2a03      	cmp	r2, #3
 801ccda:	d90e      	bls.n	801ccfa <setting_get_int_value+0x6a>
                    value = ((setting_get_int_ptr)(setting->get_value))((setting_id_t)(setting->id + offset));
 801ccdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801ccde:	881b      	ldrh	r3, [r3, #0]
 801cce0:	fa13 f181 	uxtah	r1, r3, r1
 801cce4:	b288      	uxth	r0, r1
 801cce6:	4790      	blx	r2
                    break;
 801cce8:	e002      	b.n	801ccf0 <setting_get_int_value+0x60>
    uint32_t value = 0;
 801ccea:	2000      	movs	r0, #0
}
 801ccec:	4770      	bx	lr
    if(setting) switch(setting->type) {
 801ccee:	2000      	movs	r0, #0
}
 801ccf0:	bd08      	pop	{r3, pc}
    if(setting) switch(setting->type) {
 801ccf2:	2000      	movs	r0, #0
 801ccf4:	e7fc      	b.n	801ccf0 <setting_get_int_value+0x60>
 801ccf6:	2000      	movs	r0, #0
 801ccf8:	e7fa      	b.n	801ccf0 <setting_get_int_value+0x60>
    uint32_t value = 0;
 801ccfa:	2000      	movs	r0, #0
    return value;
 801ccfc:	e7f8      	b.n	801ccf0 <setting_get_int_value+0x60>
	...

0801cd00 <settings_write_build_info>:
    if(hal.nvs.type != NVS_None)
 801cd00:	4b07      	ldr	r3, [pc, #28]	@ (801cd20 <settings_write_build_info+0x20>)
 801cd02:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801cd06:	b153      	cbz	r3, 801cd1e <settings_write_build_info+0x1e>
{
 801cd08:	b510      	push	{r4, lr}
 801cd0a:	4601      	mov	r1, r0
        hal.nvs.memcpy_to_nvs(NVS_ADDR_BUILD_INFO, (uint8_t *)line, sizeof(stored_line_t), true);
 801cd0c:	4b04      	ldr	r3, [pc, #16]	@ (801cd20 <settings_write_build_info+0x20>)
 801cd0e:	f8d3 4190 	ldr.w	r4, [r3, #400]	@ 0x190
 801cd12:	2301      	movs	r3, #1
 801cd14:	2246      	movs	r2, #70	@ 0x46
 801cd16:	f240 30ae 	movw	r0, #942	@ 0x3ae
 801cd1a:	47a0      	blx	r4
}
 801cd1c:	bd10      	pop	{r4, pc}
 801cd1e:	4770      	bx	lr
 801cd20:	200011ac 	.word	0x200011ac

0801cd24 <settings_read_build_info>:
{
 801cd24:	b538      	push	{r3, r4, r5, lr}
 801cd26:	4604      	mov	r4, r0
    if (!(hal.nvs.type != NVS_None && hal.nvs.memcpy_from_nvs((uint8_t *)line, NVS_ADDR_BUILD_INFO, sizeof(stored_line_t), true) == NVS_TransferResult_OK)) {
 801cd28:	4b0b      	ldr	r3, [pc, #44]	@ (801cd58 <settings_read_build_info+0x34>)
 801cd2a:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801cd2e:	b14b      	cbz	r3, 801cd44 <settings_read_build_info+0x20>
 801cd30:	4b09      	ldr	r3, [pc, #36]	@ (801cd58 <settings_read_build_info+0x34>)
 801cd32:	f8d3 5194 	ldr.w	r5, [r3, #404]	@ 0x194
 801cd36:	2301      	movs	r3, #1
 801cd38:	2246      	movs	r2, #70	@ 0x46
 801cd3a:	f240 31ae 	movw	r1, #942	@ 0x3ae
 801cd3e:	47a8      	blx	r5
 801cd40:	2802      	cmp	r0, #2
 801cd42:	d006      	beq.n	801cd52 <settings_read_build_info+0x2e>
        line[0] = 0; // Empty line
 801cd44:	2500      	movs	r5, #0
 801cd46:	7025      	strb	r5, [r4, #0]
        settings_write_build_info(line);
 801cd48:	4620      	mov	r0, r4
 801cd4a:	f7ff ffd9 	bl	801cd00 <settings_write_build_info>
        return false;
 801cd4e:	4628      	mov	r0, r5
}
 801cd50:	bd38      	pop	{r3, r4, r5, pc}
    return true;
 801cd52:	2001      	movs	r0, #1
 801cd54:	e7fc      	b.n	801cd50 <settings_read_build_info+0x2c>
 801cd56:	bf00      	nop
 801cd58:	200011ac 	.word	0x200011ac

0801cd5c <settings_write_startup_line>:
{
 801cd5c:	b510      	push	{r4, lr}
    assert(idx < N_STARTUP_LINE);
 801cd5e:	2801      	cmp	r0, #1
 801cd60:	d810      	bhi.n	801cd84 <settings_write_startup_line+0x28>
    if(hal.nvs.type != NVS_None)
 801cd62:	4b0c      	ldr	r3, [pc, #48]	@ (801cd94 <settings_write_startup_line+0x38>)
 801cd64:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801cd68:	b15b      	cbz	r3, 801cd82 <settings_write_startup_line+0x26>
        hal.nvs.memcpy_to_nvs(NVS_ADDR_STARTUP_BLOCK + idx * (sizeof(stored_line_t) + NVS_CRC_BYTES), (uint8_t *)line, sizeof(stored_line_t), true);
 801cd6a:	4b0a      	ldr	r3, [pc, #40]	@ (801cd94 <settings_write_startup_line+0x38>)
 801cd6c:	f8d3 4190 	ldr.w	r4, [r3, #400]	@ 0x190
 801cd70:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 801cd74:	ebc0 00c3 	rsb	r0, r0, r3, lsl #3
 801cd78:	2301      	movs	r3, #1
 801cd7a:	2246      	movs	r2, #70	@ 0x46
 801cd7c:	f200 301f 	addw	r0, r0, #799	@ 0x31f
 801cd80:	47a0      	blx	r4
}
 801cd82:	bd10      	pop	{r4, pc}
    assert(idx < N_STARTUP_LINE);
 801cd84:	4b04      	ldr	r3, [pc, #16]	@ (801cd98 <settings_write_startup_line+0x3c>)
 801cd86:	4a05      	ldr	r2, [pc, #20]	@ (801cd9c <settings_write_startup_line+0x40>)
 801cd88:	f640 0125 	movw	r1, #2085	@ 0x825
 801cd8c:	4804      	ldr	r0, [pc, #16]	@ (801cda0 <settings_write_startup_line+0x44>)
 801cd8e:	f005 fa73 	bl	8022278 <__assert_func>
 801cd92:	bf00      	nop
 801cd94:	200011ac 	.word	0x200011ac
 801cd98:	0802bbe8 	.word	0x0802bbe8
 801cd9c:	0802bc8c 	.word	0x0802bc8c
 801cda0:	0802bc00 	.word	0x0802bc00

0801cda4 <settings_read_startup_line>:
{
 801cda4:	b570      	push	{r4, r5, r6, lr}
    assert(idx < N_STARTUP_LINE);
 801cda6:	2801      	cmp	r0, #1
 801cda8:	d81c      	bhi.n	801cde4 <settings_read_startup_line+0x40>
 801cdaa:	4604      	mov	r4, r0
 801cdac:	460d      	mov	r5, r1
    if (!(hal.nvs.type != NVS_None && hal.nvs.memcpy_from_nvs((uint8_t *)line, NVS_ADDR_STARTUP_BLOCK + idx * (sizeof(stored_line_t) + NVS_CRC_BYTES), sizeof(stored_line_t), true) == NVS_TransferResult_OK)) {
 801cdae:	4b12      	ldr	r3, [pc, #72]	@ (801cdf8 <settings_read_startup_line+0x54>)
 801cdb0:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801cdb4:	b173      	cbz	r3, 801cdd4 <settings_read_startup_line+0x30>
 801cdb6:	4b10      	ldr	r3, [pc, #64]	@ (801cdf8 <settings_read_startup_line+0x54>)
 801cdb8:	f8d3 6194 	ldr.w	r6, [r3, #404]	@ 0x194
 801cdbc:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 801cdc0:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
 801cdc4:	2301      	movs	r3, #1
 801cdc6:	2246      	movs	r2, #70	@ 0x46
 801cdc8:	f201 311f 	addw	r1, r1, #799	@ 0x31f
 801cdcc:	4628      	mov	r0, r5
 801cdce:	47b0      	blx	r6
 801cdd0:	2802      	cmp	r0, #2
 801cdd2:	d00e      	beq.n	801cdf2 <settings_read_startup_line+0x4e>
        *line = '\0'; // Empty line
 801cdd4:	2600      	movs	r6, #0
 801cdd6:	702e      	strb	r6, [r5, #0]
        settings_write_startup_line(idx, line);
 801cdd8:	4629      	mov	r1, r5
 801cdda:	4620      	mov	r0, r4
 801cddc:	f7ff ffbe 	bl	801cd5c <settings_write_startup_line>
        return false;
 801cde0:	4630      	mov	r0, r6
}
 801cde2:	bd70      	pop	{r4, r5, r6, pc}
    assert(idx < N_STARTUP_LINE);
 801cde4:	4b05      	ldr	r3, [pc, #20]	@ (801cdfc <settings_read_startup_line+0x58>)
 801cde6:	4a06      	ldr	r2, [pc, #24]	@ (801ce00 <settings_read_startup_line+0x5c>)
 801cde8:	f640 0132 	movw	r1, #2098	@ 0x832
 801cdec:	4805      	ldr	r0, [pc, #20]	@ (801ce04 <settings_read_startup_line+0x60>)
 801cdee:	f005 fa43 	bl	8022278 <__assert_func>
    return true;
 801cdf2:	2001      	movs	r0, #1
 801cdf4:	e7f5      	b.n	801cde2 <settings_read_startup_line+0x3e>
 801cdf6:	bf00      	nop
 801cdf8:	200011ac 	.word	0x200011ac
 801cdfc:	0802bbe8 	.word	0x0802bbe8
 801ce00:	0802bc70 	.word	0x0802bc70
 801ce04:	0802bc00 	.word	0x0802bc00

0801ce08 <settings_write_coord_data>:
{
 801ce08:	b510      	push	{r4, lr}
    assert(id <= N_CoordinateSystems);
 801ce0a:	280c      	cmp	r0, #12
 801ce0c:	d810      	bhi.n	801ce30 <settings_write_coord_data+0x28>
    if(hal.nvs.type != NVS_None)
 801ce0e:	4b0c      	ldr	r3, [pc, #48]	@ (801ce40 <settings_write_coord_data+0x38>)
 801ce10:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801ce14:	b15b      	cbz	r3, 801ce2e <settings_write_coord_data+0x26>
        hal.nvs.memcpy_to_nvs(NVS_ADDR_PARAMETERS + id * (sizeof(coord_data_t) + NVS_CRC_BYTES), (uint8_t *)coord_data, sizeof(coord_data_t), true);
 801ce16:	4b0a      	ldr	r3, [pc, #40]	@ (801ce40 <settings_write_coord_data+0x38>)
 801ce18:	f8d3 4190 	ldr.w	r4, [r3, #400]	@ 0x190
 801ce1c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801ce20:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801ce24:	2301      	movs	r3, #1
 801ce26:	220c      	movs	r2, #12
 801ce28:	f500 7000 	add.w	r0, r0, #512	@ 0x200
 801ce2c:	47a0      	blx	r4
}
 801ce2e:	bd10      	pop	{r4, pc}
    assert(id <= N_CoordinateSystems);
 801ce30:	4b04      	ldr	r3, [pc, #16]	@ (801ce44 <settings_write_coord_data+0x3c>)
 801ce32:	4a05      	ldr	r2, [pc, #20]	@ (801ce48 <settings_write_coord_data+0x40>)
 801ce34:	f44f 6104 	mov.w	r1, #2112	@ 0x840
 801ce38:	4804      	ldr	r0, [pc, #16]	@ (801ce4c <settings_write_coord_data+0x44>)
 801ce3a:	f005 fa1d 	bl	8022278 <__assert_func>
 801ce3e:	bf00      	nop
 801ce40:	200011ac 	.word	0x200011ac
 801ce44:	0802bc14 	.word	0x0802bc14
 801ce48:	0802bc54 	.word	0x0802bc54
 801ce4c:	0802bc00 	.word	0x0802bc00

0801ce50 <settings_read_coord_data>:
{
 801ce50:	b570      	push	{r4, r5, r6, lr}
    assert(id <= N_CoordinateSystems);
 801ce52:	280c      	cmp	r0, #12
 801ce54:	d81e      	bhi.n	801ce94 <settings_read_coord_data+0x44>
 801ce56:	4604      	mov	r4, r0
 801ce58:	460d      	mov	r5, r1
    if (!(hal.nvs.type != NVS_None && hal.nvs.memcpy_from_nvs((uint8_t *)coord_data, NVS_ADDR_PARAMETERS + id * (sizeof(coord_data_t) + NVS_CRC_BYTES), sizeof(coord_data_t), true) == NVS_TransferResult_OK)) {
 801ce5a:	4b13      	ldr	r3, [pc, #76]	@ (801cea8 <settings_read_coord_data+0x58>)
 801ce5c:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801ce60:	b173      	cbz	r3, 801ce80 <settings_read_coord_data+0x30>
 801ce62:	4b11      	ldr	r3, [pc, #68]	@ (801cea8 <settings_read_coord_data+0x58>)
 801ce64:	f8d3 6194 	ldr.w	r6, [r3, #404]	@ 0x194
 801ce68:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 801ce6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ce70:	2301      	movs	r3, #1
 801ce72:	220c      	movs	r2, #12
 801ce74:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 801ce78:	4628      	mov	r0, r5
 801ce7a:	47b0      	blx	r6
 801ce7c:	2802      	cmp	r0, #2
 801ce7e:	d010      	beq.n	801cea2 <settings_read_coord_data+0x52>
        memset(coord_data, 0, sizeof(coord_data_t));
 801ce80:	2600      	movs	r6, #0
 801ce82:	602e      	str	r6, [r5, #0]
 801ce84:	606e      	str	r6, [r5, #4]
 801ce86:	60ae      	str	r6, [r5, #8]
        settings_write_coord_data(id, coord_data);
 801ce88:	4629      	mov	r1, r5
 801ce8a:	4620      	mov	r0, r4
 801ce8c:	f7ff ffbc 	bl	801ce08 <settings_write_coord_data>
        return false;
 801ce90:	4630      	mov	r0, r6
}
 801ce92:	bd70      	pop	{r4, r5, r6, pc}
    assert(id <= N_CoordinateSystems);
 801ce94:	4b05      	ldr	r3, [pc, #20]	@ (801ceac <settings_read_coord_data+0x5c>)
 801ce96:	4a06      	ldr	r2, [pc, #24]	@ (801ceb0 <settings_read_coord_data+0x60>)
 801ce98:	f640 014d 	movw	r1, #2125	@ 0x84d
 801ce9c:	4805      	ldr	r0, [pc, #20]	@ (801ceb4 <settings_read_coord_data+0x64>)
 801ce9e:	f005 f9eb 	bl	8022278 <__assert_func>
    return true;
 801cea2:	2001      	movs	r0, #1
 801cea4:	e7f5      	b.n	801ce92 <settings_read_coord_data+0x42>
 801cea6:	bf00      	nop
 801cea8:	200011ac 	.word	0x200011ac
 801ceac:	0802bc14 	.word	0x0802bc14
 801ceb0:	0802bc38 	.word	0x0802bc38
 801ceb4:	0802bc00 	.word	0x0802bc00

0801ceb8 <read_global_settings>:
{
 801ceb8:	b510      	push	{r4, lr}
    bool ok = hal.nvs.type != NVS_None && SETTINGS_VERSION == hal.nvs.get_byte(0) && hal.nvs.memcpy_from_nvs((uint8_t *)&settings, NVS_ADDR_GLOBAL, sizeof(settings_t), true) == NVS_TransferResult_OK;
 801ceba:	4b2b      	ldr	r3, [pc, #172]	@ (801cf68 <read_global_settings+0xb0>)
 801cebc:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801cec0:	b1bb      	cbz	r3, 801cef2 <read_global_settings+0x3a>
 801cec2:	4b29      	ldr	r3, [pc, #164]	@ (801cf68 <read_global_settings+0xb0>)
 801cec4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 801cec8:	2000      	movs	r0, #0
 801ceca:	4798      	blx	r3
 801cecc:	2816      	cmp	r0, #22
 801cece:	d001      	beq.n	801ced4 <read_global_settings+0x1c>
 801ced0:	2400      	movs	r4, #0
 801ced2:	e00f      	b.n	801cef4 <read_global_settings+0x3c>
 801ced4:	4b24      	ldr	r3, [pc, #144]	@ (801cf68 <read_global_settings+0xb0>)
 801ced6:	f8d3 4194 	ldr.w	r4, [r3, #404]	@ 0x194
 801ceda:	2301      	movs	r3, #1
 801cedc:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801cee0:	4619      	mov	r1, r3
 801cee2:	4822      	ldr	r0, [pc, #136]	@ (801cf6c <read_global_settings+0xb4>)
 801cee4:	47a0      	blx	r4
 801cee6:	2802      	cmp	r0, #2
 801cee8:	d001      	beq.n	801ceee <read_global_settings+0x36>
 801ceea:	2400      	movs	r4, #0
 801ceec:	e002      	b.n	801cef4 <read_global_settings+0x3c>
 801ceee:	2401      	movs	r4, #1
 801cef0:	e000      	b.n	801cef4 <read_global_settings+0x3c>
 801cef2:	2400      	movs	r4, #0
    if(settings.mode == Mode_Laser && !spindle_get_caps(false).laser)
 801cef4:	4b1d      	ldr	r3, [pc, #116]	@ (801cf6c <read_global_settings+0xb4>)
 801cef6:	7e1b      	ldrb	r3, [r3, #24]
 801cef8:	2b01      	cmp	r3, #1
 801cefa:	d026      	beq.n	801cf4a <read_global_settings+0x92>
    if(settings.planner_buffer_blocks < 30 || settings.planner_buffer_blocks > 1000)
 801cefc:	4b1b      	ldr	r3, [pc, #108]	@ (801cf6c <read_global_settings+0xb4>)
 801cefe:	8adb      	ldrh	r3, [r3, #22]
 801cf00:	3b1e      	subs	r3, #30
 801cf02:	b29b      	uxth	r3, r3
 801cf04:	f240 32ca 	movw	r2, #970	@ 0x3ca
 801cf08:	4293      	cmp	r3, r2
 801cf0a:	d902      	bls.n	801cf12 <read_global_settings+0x5a>
        settings.planner_buffer_blocks = 35;
 801cf0c:	4b17      	ldr	r3, [pc, #92]	@ (801cf6c <read_global_settings+0xb4>)
 801cf0e:	2223      	movs	r2, #35	@ 0x23
 801cf10:	82da      	strh	r2, [r3, #22]
    if(!hal.driver_cap.spindle_encoder)
 801cf12:	4b15      	ldr	r3, [pc, #84]	@ (801cf68 <read_global_settings+0xb0>)
 801cf14:	f993 31d8 	ldrsb.w	r3, [r3, #472]	@ 0x1d8
 801cf18:	2b00      	cmp	r3, #0
 801cf1a:	db03      	blt.n	801cf24 <read_global_settings+0x6c>
        settings.spindle.ppr = 0;
 801cf1c:	4b13      	ldr	r3, [pc, #76]	@ (801cf6c <read_global_settings+0xb4>)
 801cf1e:	2200      	movs	r2, #0
 801cf20:	f8a3 20e4 	strh.w	r2, [r3, #228]	@ 0xe4
    settings.control_invert.mask |= limits_override.mask;
 801cf24:	4b11      	ldr	r3, [pc, #68]	@ (801cf6c <read_global_settings+0xb4>)
 801cf26:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
 801cf2a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801cf2e:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
    settings.control_disable_pullup.mask &= ~limits_override.mask;
 801cf32:	f8b3 206e 	ldrh.w	r2, [r3, #110]	@ 0x6e
 801cf36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801cf3a:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
    return ok && settings.version == SETTINGS_VERSION;
 801cf3e:	b174      	cbz	r4, 801cf5e <read_global_settings+0xa6>
 801cf40:	681b      	ldr	r3, [r3, #0]
 801cf42:	2b16      	cmp	r3, #22
 801cf44:	d00d      	beq.n	801cf62 <read_global_settings+0xaa>
 801cf46:	2000      	movs	r0, #0
 801cf48:	e00a      	b.n	801cf60 <read_global_settings+0xa8>
    if(settings.mode == Mode_Laser && !spindle_get_caps(false).laser)
 801cf4a:	2000      	movs	r0, #0
 801cf4c:	f000 feb6 	bl	801dcbc <spindle_get_caps>
 801cf50:	f010 0f08 	tst.w	r0, #8
 801cf54:	d1d2      	bne.n	801cefc <read_global_settings+0x44>
        settings.mode = Mode_Standard;
 801cf56:	4b05      	ldr	r3, [pc, #20]	@ (801cf6c <read_global_settings+0xb4>)
 801cf58:	2200      	movs	r2, #0
 801cf5a:	761a      	strb	r2, [r3, #24]
 801cf5c:	e7ce      	b.n	801cefc <read_global_settings+0x44>
    return ok && settings.version == SETTINGS_VERSION;
 801cf5e:	2000      	movs	r0, #0
}
 801cf60:	bd10      	pop	{r4, pc}
    return ok && settings.version == SETTINGS_VERSION;
 801cf62:	2001      	movs	r0, #1
 801cf64:	e7fc      	b.n	801cf60 <read_global_settings+0xa8>
 801cf66:	bf00      	nop
 801cf68:	200011ac 	.word	0x200011ac
 801cf6c:	20001bc4 	.word	0x20001bc4

0801cf70 <settings_restore>:
{
 801cf70:	b530      	push	{r4, r5, lr}
 801cf72:	b097      	sub	sp, #92	@ 0x5c
 801cf74:	4604      	mov	r4, r0
    memset(empty_line, 0xFF, sizeof(stored_line_t));
 801cf76:	2246      	movs	r2, #70	@ 0x46
 801cf78:	21ff      	movs	r1, #255	@ 0xff
 801cf7a:	a804      	add	r0, sp, #16
 801cf7c:	f007 fa7f 	bl	802447e <memset>
    *empty_line = '\0';
 801cf80:	2000      	movs	r0, #0
 801cf82:	f88d 0010 	strb.w	r0, [sp, #16]
    hal.nvs.put_byte(0, SETTINGS_VERSION); // Forces write to physical storage
 801cf86:	4b35      	ldr	r3, [pc, #212]	@ (801d05c <settings_restore+0xec>)
 801cf88:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 801cf8c:	2116      	movs	r1, #22
 801cf8e:	4798      	blx	r3
    if (restore.defaults) {
 801cf90:	b2e5      	uxtb	r5, r4
 801cf92:	f014 0f01 	tst.w	r4, #1
 801cf96:	d110      	bne.n	801cfba <settings_restore+0x4a>
    if (restore.parameters) {
 801cf98:	f015 0f02 	tst.w	r5, #2
 801cf9c:	d135      	bne.n	801d00a <settings_restore+0x9a>
    if (restore.startup_lines) {
 801cf9e:	f015 0f04 	tst.w	r5, #4
 801cfa2:	d143      	bne.n	801d02c <settings_restore+0xbc>
    if (restore.build_info) {
 801cfa4:	f015 0f08 	tst.w	r5, #8
 801cfa8:	d149      	bne.n	801d03e <settings_restore+0xce>
    setting_details_t *details = setting_details.next;
 801cfaa:	4b2d      	ldr	r3, [pc, #180]	@ (801d060 <settings_restore+0xf0>)
 801cfac:	699c      	ldr	r4, [r3, #24]
    if(details) do {
 801cfae:	2c00      	cmp	r4, #0
 801cfb0:	d150      	bne.n	801d054 <settings_restore+0xe4>
    nvs_buffer_sync_physical();
 801cfb2:	f7f8 fd37 	bl	8015a24 <nvs_buffer_sync_physical>
}
 801cfb6:	b017      	add	sp, #92	@ 0x5c
 801cfb8:	bd30      	pop	{r4, r5, pc}
        memcpy(&settings, &defaults, sizeof(settings_t));
 801cfba:	4c2a      	ldr	r4, [pc, #168]	@ (801d064 <settings_restore+0xf4>)
 801cfbc:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801cfc0:	4929      	ldr	r1, [pc, #164]	@ (801d068 <settings_restore+0xf8>)
 801cfc2:	4620      	mov	r0, r4
 801cfc4:	f007 fbbb 	bl	802473e <memcpy>
        settings.control_invert.mask = (settings.control_invert.mask & hal.signals_cap.mask) | limits_override.mask;
 801cfc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801cfcc:	f8a4 306c 	strh.w	r3, [r4, #108]	@ 0x6c
        settings.spindle.invert.ccw &= spindle_get_caps(false).direction;
 801cfd0:	2000      	movs	r0, #0
 801cfd2:	f000 fe73 	bl	801dcbc <spindle_get_caps>
 801cfd6:	f894 30e6 	ldrb.w	r3, [r4, #230]	@ 0xe6
 801cfda:	f3c3 0240 	ubfx	r2, r3, #1, #1
 801cfde:	ea02 0250 	and.w	r2, r2, r0, lsr #1
 801cfe2:	f362 0341 	bfi	r3, r2, #1, #1
 801cfe6:	f884 30e6 	strb.w	r3, [r4, #230]	@ 0xe6
        settings.spindle.invert.pwm &= spindle_get_caps(false).pwm_invert;
 801cfea:	2000      	movs	r0, #0
 801cfec:	f000 fe66 	bl	801dcbc <spindle_get_caps>
 801cff0:	f894 30e6 	ldrb.w	r3, [r4, #230]	@ 0xe6
 801cff4:	f3c3 0280 	ubfx	r2, r3, #2, #1
 801cff8:	ea02 1210 	and.w	r2, r2, r0, lsr #4
 801cffc:	f362 0382 	bfi	r3, r2, #2, #1
 801d000:	f884 30e6 	strb.w	r3, [r4, #230]	@ 0xe6
        settings_write_global();
 801d004:	f7fe ffc4 	bl	801bf90 <settings_write_global>
 801d008:	e7c6      	b.n	801cf98 <settings_restore+0x28>
        memset(coord_data, 0, sizeof(coord_data));
 801d00a:	2400      	movs	r4, #0
 801d00c:	9401      	str	r4, [sp, #4]
 801d00e:	9402      	str	r4, [sp, #8]
 801d010:	9403      	str	r4, [sp, #12]
        for (idx = 0; idx <= N_WorkCoordinateSystems; idx++)
 801d012:	e004      	b.n	801d01e <settings_restore+0xae>
            settings_write_coord_data((coord_system_id_t)idx, &coord_data);
 801d014:	a901      	add	r1, sp, #4
 801d016:	b2e0      	uxtb	r0, r4
 801d018:	f7ff fef6 	bl	801ce08 <settings_write_coord_data>
        for (idx = 0; idx <= N_WorkCoordinateSystems; idx++)
 801d01c:	3401      	adds	r4, #1
 801d01e:	2c09      	cmp	r4, #9
 801d020:	d9f8      	bls.n	801d014 <settings_restore+0xa4>
        settings_write_coord_data(CoordinateSystem_G92, &coord_data); // Clear G92 offsets
 801d022:	a901      	add	r1, sp, #4
 801d024:	200b      	movs	r0, #11
 801d026:	f7ff feef 	bl	801ce08 <settings_write_coord_data>
 801d02a:	e7b8      	b.n	801cf9e <settings_restore+0x2e>
        for (idx = 0; idx < N_STARTUP_LINE; idx++)
 801d02c:	2400      	movs	r4, #0
 801d02e:	2c01      	cmp	r4, #1
 801d030:	d8b8      	bhi.n	801cfa4 <settings_restore+0x34>
            settings_write_startup_line(idx, empty_line);
 801d032:	a904      	add	r1, sp, #16
 801d034:	b2e0      	uxtb	r0, r4
 801d036:	f7ff fe91 	bl	801cd5c <settings_write_startup_line>
        for (idx = 0; idx < N_STARTUP_LINE; idx++)
 801d03a:	3401      	adds	r4, #1
 801d03c:	e7f7      	b.n	801d02e <settings_restore+0xbe>
        settings_write_build_info(empty_line);
 801d03e:	a804      	add	r0, sp, #16
 801d040:	f7ff fe5e 	bl	801cd00 <settings_write_build_info>
        settings_write_build_info(BUILD_INFO);
 801d044:	4809      	ldr	r0, [pc, #36]	@ (801d06c <settings_restore+0xfc>)
 801d046:	f7ff fe5b 	bl	801cd00 <settings_write_build_info>
 801d04a:	e7ae      	b.n	801cfaa <settings_restore+0x3a>
            details->restore();
 801d04c:	4798      	blx	r3
    } while((details = details->next));
 801d04e:	69a4      	ldr	r4, [r4, #24]
 801d050:	2c00      	cmp	r4, #0
 801d052:	d0ae      	beq.n	801cfb2 <settings_restore+0x42>
        if(details->restore)
 801d054:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801d056:	2b00      	cmp	r3, #0
 801d058:	d1f8      	bne.n	801d04c <settings_restore+0xdc>
 801d05a:	e7f8      	b.n	801d04e <settings_restore+0xde>
 801d05c:	200011ac 	.word	0x200011ac
 801d060:	20000204 	.word	0x20000204
 801d064:	20001bc4 	.word	0x20001bc4
 801d068:	0802fd20 	.word	0x0802fd20
 801d06c:	0802b518 	.word	0x0802b518

0801d070 <settings_normalize_group>:
    return (group > Group_Axis0 && group < Group_Axis0 + N_AXIS) ? Group_Axis0 : group;
 801d070:	f1a0 032c 	sub.w	r3, r0, #44	@ 0x2c
 801d074:	b2db      	uxtb	r3, r3
 801d076:	2b01      	cmp	r3, #1
 801d078:	d900      	bls.n	801d07c <settings_normalize_group+0xc>
}
 801d07a:	4770      	bx	lr
    return (group > Group_Axis0 && group < Group_Axis0 + N_AXIS) ? Group_Axis0 : group;
 801d07c:	202b      	movs	r0, #43	@ 0x2b
 801d07e:	e7fc      	b.n	801d07a <settings_normalize_group+0xa>

0801d080 <setting_get_details>:
{
 801d080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d084:	4680      	mov	r8, r0
 801d086:	4689      	mov	r9, r1
    uint_fast16_t idx, offset = id - normalize_id(id);
 801d088:	f7fe fdd2 	bl	801bc30 <normalize_id>
 801d08c:	4607      	mov	r7, r0
 801d08e:	eba8 0800 	sub.w	r8, r8, r0
    setting_details_t *details = settings_get_details();
 801d092:	f7ff fba1 	bl	801c7d8 <settings_get_details>
 801d096:	4605      	mov	r5, r0
    id -= offset;
 801d098:	e045      	b.n	801d126 <setting_get_details+0xa6>
                if(details->settings[idx].group == Group_Axis0 && grbl.on_set_axis_setting_unit)
 801d09a:	4a24      	ldr	r2, [pc, #144]	@ (801d12c <setting_get_details+0xac>)
 801d09c:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 801d0a0:	b372      	cbz	r2, 801d100 <setting_get_details+0x80>
                    set_axis_unit(&details->settings[idx], grbl.on_set_axis_setting_unit(details->settings[idx].id, offset));
 801d0a2:	4641      	mov	r1, r8
 801d0a4:	5b98      	ldrh	r0, [r3, r6]
 801d0a6:	4790      	blx	r2
    if(unit)
 801d0a8:	4601      	mov	r1, r0
 801d0aa:	b348      	cbz	r0, 801d100 <setting_get_details+0x80>
        strcpy((char *)setting->unit, unit);
 801d0ac:	68a0      	ldr	r0, [r4, #8]
 801d0ae:	f007 fb3e 	bl	802472e <strcpy>
 801d0b2:	e025      	b.n	801d100 <setting_get_details+0x80>
                if(offset && details->iterator == NULL && offset >= (details->settings[idx].group == Group_Encoder0 ? hal.encoder.get_n_encoders() : N_AXIS))
 801d0b4:	68eb      	ldr	r3, [r5, #12]
 801d0b6:	4433      	add	r3, r6
 801d0b8:	789b      	ldrb	r3, [r3, #2]
 801d0ba:	2b1d      	cmp	r3, #29
 801d0bc:	d004      	beq.n	801d0c8 <setting_get_details+0x48>
 801d0be:	2303      	movs	r3, #3
 801d0c0:	4543      	cmp	r3, r8
 801d0c2:	d823      	bhi.n	801d10c <setting_get_details+0x8c>
                    return NULL;
 801d0c4:	2500      	movs	r5, #0
 801d0c6:	e028      	b.n	801d11a <setting_get_details+0x9a>
                if(offset && details->iterator == NULL && offset >= (details->settings[idx].group == Group_Encoder0 ? hal.encoder.get_n_encoders() : N_AXIS))
 801d0c8:	4b19      	ldr	r3, [pc, #100]	@ (801d130 <setting_get_details+0xb0>)
 801d0ca:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801d0ce:	4798      	blx	r3
 801d0d0:	4603      	mov	r3, r0
 801d0d2:	e7f5      	b.n	801d0c0 <setting_get_details+0x40>
        for(idx = 0; idx < details->n_settings; idx++) {
 801d0d4:	3401      	adds	r4, #1
 801d0d6:	892b      	ldrh	r3, [r5, #8]
 801d0d8:	42a3      	cmp	r3, r4
 801d0da:	d921      	bls.n	801d120 <setting_get_details+0xa0>
            if(details->settings[idx].id == id && is_available(&details->settings[idx])) {
 801d0dc:	68eb      	ldr	r3, [r5, #12]
 801d0de:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 801d0e2:	0106      	lsls	r6, r0, #4
 801d0e4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 801d0e8:	5b9b      	ldrh	r3, [r3, r6]
 801d0ea:	429f      	cmp	r7, r3
 801d0ec:	d1f2      	bne.n	801d0d4 <setting_get_details+0x54>
 801d0ee:	f7fe ff71 	bl	801bfd4 <is_available>
 801d0f2:	2800      	cmp	r0, #0
 801d0f4:	d0ee      	beq.n	801d0d4 <setting_get_details+0x54>
                if(details->settings[idx].group == Group_Axis0 && grbl.on_set_axis_setting_unit)
 801d0f6:	68eb      	ldr	r3, [r5, #12]
 801d0f8:	199c      	adds	r4, r3, r6
 801d0fa:	78a2      	ldrb	r2, [r4, #2]
 801d0fc:	2a2b      	cmp	r2, #43	@ 0x2b
 801d0fe:	d0cc      	beq.n	801d09a <setting_get_details+0x1a>
                if(offset && details->iterator == NULL && offset >= (details->settings[idx].group == Group_Encoder0 ? hal.encoder.get_n_encoders() : N_AXIS))
 801d100:	f1b8 0f00 	cmp.w	r8, #0
 801d104:	d002      	beq.n	801d10c <setting_get_details+0x8c>
 801d106:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801d108:	2b00      	cmp	r3, #0
 801d10a:	d0d3      	beq.n	801d0b4 <setting_get_details+0x34>
                if(set)
 801d10c:	f1b9 0f00 	cmp.w	r9, #0
 801d110:	d001      	beq.n	801d116 <setting_get_details+0x96>
                    *set = details;
 801d112:	f8c9 5000 	str.w	r5, [r9]
                return &details->settings[idx];
 801d116:	68ed      	ldr	r5, [r5, #12]
 801d118:	4435      	add	r5, r6
}
 801d11a:	4628      	mov	r0, r5
 801d11c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    } while((details = details->next));
 801d120:	69ad      	ldr	r5, [r5, #24]
 801d122:	2d00      	cmp	r5, #0
 801d124:	d0f9      	beq.n	801d11a <setting_get_details+0x9a>
        for(idx = 0; idx < details->n_settings; idx++) {
 801d126:	2400      	movs	r4, #0
 801d128:	e7d5      	b.n	801d0d6 <setting_get_details+0x56>
 801d12a:	bf00      	nop
 801d12c:	20001394 	.word	0x20001394
 801d130:	200011ac 	.word	0x200011ac

0801d134 <settings_iterator>:
{
 801d134:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d136:	b083      	sub	sp, #12
 801d138:	4604      	mov	r4, r0
 801d13a:	460e      	mov	r6, r1
 801d13c:	4617      	mov	r7, r2
    if(setting->group == Group_Axis0) {
 801d13e:	7883      	ldrb	r3, [r0, #2]
 801d140:	2b2b      	cmp	r3, #43	@ 0x2b
 801d142:	d020      	beq.n	801d186 <settings_iterator+0x52>
    } else if(setting->flags.increment) {
 801d144:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801d148:	f013 0f78 	tst.w	r3, #120	@ 0x78
 801d14c:	d11e      	bne.n	801d18c <settings_iterator+0x58>
        ok = callback(setting, 0, data);
 801d14e:	2100      	movs	r1, #0
 801d150:	47b0      	blx	r6
}
 801d152:	b003      	add	sp, #12
 801d154:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(!(ok = callback(setting, axis_idx, data)))
 801d156:	463a      	mov	r2, r7
 801d158:	4629      	mov	r1, r5
 801d15a:	4620      	mov	r0, r4
 801d15c:	47b0      	blx	r6
 801d15e:	2800      	cmp	r0, #0
 801d160:	d0f7      	beq.n	801d152 <settings_iterator+0x1e>
        for(axis_idx = 0; axis_idx < N_AXIS; axis_idx++) {
 801d162:	3501      	adds	r5, #1
 801d164:	2d02      	cmp	r5, #2
 801d166:	d8f4      	bhi.n	801d152 <settings_iterator+0x1e>
            if(grbl.on_set_axis_setting_unit)
 801d168:	4b0f      	ldr	r3, [pc, #60]	@ (801d1a8 <settings_iterator+0x74>)
 801d16a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d0f1      	beq.n	801d156 <settings_iterator+0x22>
                set_axis_unit(setting, grbl.on_set_axis_setting_unit(setting->id, axis_idx));
 801d172:	4629      	mov	r1, r5
 801d174:	8820      	ldrh	r0, [r4, #0]
 801d176:	4798      	blx	r3
    if(unit)
 801d178:	4601      	mov	r1, r0
 801d17a:	2800      	cmp	r0, #0
 801d17c:	d0eb      	beq.n	801d156 <settings_iterator+0x22>
        strcpy((char *)setting->unit, unit);
 801d17e:	68a0      	ldr	r0, [r4, #8]
 801d180:	f007 fad5 	bl	802472e <strcpy>
 801d184:	e7e7      	b.n	801d156 <settings_iterator+0x22>
        for(axis_idx = 0; axis_idx < N_AXIS; axis_idx++) {
 801d186:	2500      	movs	r5, #0
    bool ok = false;
 801d188:	4628      	mov	r0, r5
 801d18a:	e7eb      	b.n	801d164 <settings_iterator+0x30>
        setting = setting_get_details(setting->id, &set);
 801d18c:	a901      	add	r1, sp, #4
 801d18e:	8800      	ldrh	r0, [r0, #0]
 801d190:	f7ff ff76 	bl	801d080 <setting_get_details>
        if(set->iterator)
 801d194:	9b01      	ldr	r3, [sp, #4]
 801d196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d198:	b11b      	cbz	r3, 801d1a2 <settings_iterator+0x6e>
            ok = set->iterator(setting, callback, data);
 801d19a:	463a      	mov	r2, r7
 801d19c:	4631      	mov	r1, r6
 801d19e:	4798      	blx	r3
 801d1a0:	e7d7      	b.n	801d152 <settings_iterator+0x1e>
    bool ok = false;
 801d1a2:	2000      	movs	r0, #0
 801d1a4:	e7d5      	b.n	801d152 <settings_iterator+0x1e>
 801d1a6:	bf00      	nop
 801d1a8:	20001394 	.word	0x20001394

0801d1ac <setting_get_description>:
{
 801d1ac:	b570      	push	{r4, r5, r6, lr}
 801d1ae:	4606      	mov	r6, r0
    if(grbl.on_setting_get_description == NULL || (description = grbl.on_setting_get_description(id)) == NULL) {
 801d1b0:	4b14      	ldr	r3, [pc, #80]	@ (801d204 <setting_get_description+0x58>)
 801d1b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d1b4:	b123      	cbz	r3, 801d1c0 <setting_get_description+0x14>
 801d1b6:	4798      	blx	r3
 801d1b8:	4604      	mov	r4, r0
 801d1ba:	b110      	cbz	r0, 801d1c2 <setting_get_description+0x16>
}
 801d1bc:	4620      	mov	r0, r4
 801d1be:	bd70      	pop	{r4, r5, r6, pc}
    const char *description = NULL;
 801d1c0:	2400      	movs	r4, #0
        setting_details_t *settings = settings_get_details();
 801d1c2:	f7ff fb09 	bl	801c7d8 <settings_get_details>
 801d1c6:	4605      	mov	r5, r0
        const setting_detail_t *setting = setting_get_details(id, NULL);
 801d1c8:	2100      	movs	r1, #0
 801d1ca:	4630      	mov	r0, r6
 801d1cc:	f7ff ff58 	bl	801d080 <setting_get_details>
        if(setting) do {
 801d1d0:	4606      	mov	r6, r0
 801d1d2:	b990      	cbnz	r0, 801d1fa <setting_get_description+0x4e>
 801d1d4:	e7f2      	b.n	801d1bc <setting_get_description+0x10>
                        description = settings->descriptions[idx].description;
 801d1d6:	f8de 4004 	ldr.w	r4, [lr, #4]
                } while(idx && description == NULL);
 801d1da:	b14b      	cbz	r3, 801d1f0 <setting_get_description+0x44>
 801d1dc:	b944      	cbnz	r4, 801d1f0 <setting_get_description+0x44>
                    if(settings->descriptions[--idx].id == setting->id) {
 801d1de:	3b01      	subs	r3, #1
 801d1e0:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801d1e4:	f832 c033 	ldrh.w	ip, [r2, r3, lsl #3]
 801d1e8:	8831      	ldrh	r1, [r6, #0]
 801d1ea:	458c      	cmp	ip, r1
 801d1ec:	d1f5      	bne.n	801d1da <setting_get_description+0x2e>
 801d1ee:	e7f2      	b.n	801d1d6 <setting_get_description+0x2a>
        } while(description == NULL && (settings = settings->next));
 801d1f0:	2c00      	cmp	r4, #0
 801d1f2:	d1e3      	bne.n	801d1bc <setting_get_description+0x10>
 801d1f4:	69ad      	ldr	r5, [r5, #24]
 801d1f6:	2d00      	cmp	r5, #0
 801d1f8:	d0e0      	beq.n	801d1bc <setting_get_description+0x10>
            if(settings->descriptions) {
 801d1fa:	696a      	ldr	r2, [r5, #20]
 801d1fc:	2a00      	cmp	r2, #0
 801d1fe:	d0f7      	beq.n	801d1f0 <setting_get_description+0x44>
                idx = settings->n_descriptions;
 801d200:	8a2b      	ldrh	r3, [r5, #16]
 801d202:	e7ec      	b.n	801d1de <setting_get_description+0x32>
 801d204:	20001394 	.word	0x20001394

0801d208 <setting_get_group_details>:
{
 801d208:	b510      	push	{r4, lr}
 801d20a:	4604      	mov	r4, r0
    setting_details_t *details = settings_get_details();
 801d20c:	f7ff fae4 	bl	801c7d8 <settings_get_details>
 801d210:	4601      	mov	r1, r0
    const setting_group_detail_t *detail = NULL;
 801d212:	2000      	movs	r0, #0
 801d214:	e011      	b.n	801d23a <setting_get_group_details+0x32>
        for(idx = 0; idx < details->n_groups; idx++) {
 801d216:	3301      	adds	r3, #1
 801d218:	780a      	ldrb	r2, [r1, #0]
 801d21a:	429a      	cmp	r2, r3
 801d21c:	d90a      	bls.n	801d234 <setting_get_group_details+0x2c>
            if(details->groups[idx].id == id)
 801d21e:	684a      	ldr	r2, [r1, #4]
 801d220:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 801d224:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 801d228:	f892 c001 	ldrb.w	ip, [r2, #1]
 801d22c:	45a4      	cmp	ip, r4
 801d22e:	d1f2      	bne.n	801d216 <setting_get_group_details+0xe>
                detail = &details->groups[idx];
 801d230:	4610      	mov	r0, r2
 801d232:	e7f0      	b.n	801d216 <setting_get_group_details+0xe>
    } while(detail == NULL && (details = details->next));
 801d234:	b918      	cbnz	r0, 801d23e <setting_get_group_details+0x36>
 801d236:	6989      	ldr	r1, [r1, #24]
 801d238:	b109      	cbz	r1, 801d23e <setting_get_group_details+0x36>
        for(idx = 0; idx < details->n_groups; idx++) {
 801d23a:	2300      	movs	r3, #0
 801d23c:	e7ec      	b.n	801d218 <setting_get_group_details+0x10>
}
 801d23e:	bd10      	pop	{r4, pc}

0801d240 <settings_is_group_available>:
{
 801d240:	b570      	push	{r4, r5, r6, lr}
 801d242:	4606      	mov	r6, r0
    const setting_group_detail_t *group = setting_get_group_details(id);
 801d244:	f7ff ffe0 	bl	801d208 <setting_get_group_details>
    if(!group)
 801d248:	2800      	cmp	r0, #0
 801d24a:	d050      	beq.n	801d2ee <settings_is_group_available+0xae>
 801d24c:	4604      	mov	r4, r0
    bool available = group->is_available ? group->is_available(group) : false;
 801d24e:	6883      	ldr	r3, [r0, #8]
 801d250:	b11b      	cbz	r3, 801d25a <settings_is_group_available+0x1a>
 801d252:	4798      	blx	r3
 801d254:	4601      	mov	r1, r0
 801d256:	2800      	cmp	r0, #0
 801d258:	d14c      	bne.n	801d2f4 <settings_is_group_available+0xb4>
    if(!available) switch(group->id) {
 801d25a:	7863      	ldrb	r3, [r4, #1]
 801d25c:	3b02      	subs	r3, #2
 801d25e:	2b0c      	cmp	r3, #12
 801d260:	d829      	bhi.n	801d2b6 <settings_is_group_available+0x76>
 801d262:	e8df f003 	tbb	[pc, r3]
 801d266:	4646      	.short	0x4646
 801d268:	0e46281a 	.word	0x0e46281a
 801d26c:	46282814 	.word	0x46282814
 801d270:	2807      	.short	0x2807
 801d272:	46          	.byte	0x46
 801d273:	00          	.byte	0x00
            available = hal.probe.get_state != NULL;
 801d274:	4b20      	ldr	r3, [pc, #128]	@ (801d2f8 <settings_is_group_available+0xb8>)
 801d276:	f8d3 10fc 	ldr.w	r1, [r3, #252]	@ 0xfc
 801d27a:	3900      	subs	r1, #0
 801d27c:	bf18      	it	ne
 801d27e:	2101      	movne	r1, #1
            break;
 801d280:	e038      	b.n	801d2f4 <settings_is_group_available+0xb4>
            available = hal.driver_cap.spindle_sync;
 801d282:	4b1d      	ldr	r3, [pc, #116]	@ (801d2f8 <settings_is_group_available+0xb8>)
 801d284:	f893 11d9 	ldrb.w	r1, [r3, #473]	@ 0x1d9
 801d288:	f001 0101 	and.w	r1, r1, #1
            break;
 801d28c:	e032      	b.n	801d2f4 <settings_is_group_available+0xb4>
            available = hal.driver_cap.spindle_pid;
 801d28e:	4b1a      	ldr	r3, [pc, #104]	@ (801d2f8 <settings_is_group_available+0xb8>)
 801d290:	f893 11d9 	ldrb.w	r1, [r3, #473]	@ 0x1d9
 801d294:	f3c1 1180 	ubfx	r1, r1, #6, #1
            break;
 801d298:	e02c      	b.n	801d2f4 <settings_is_group_available+0xb4>
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(true).mask != 0;
 801d29a:	4b17      	ldr	r3, [pc, #92]	@ (801d2f8 <settings_is_group_available+0xb8>)
 801d29c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801d2a0:	b12b      	cbz	r3, 801d2ae <settings_is_group_available+0x6e>
 801d2a2:	2001      	movs	r0, #1
 801d2a4:	4798      	blx	r3
 801d2a6:	b2c0      	uxtb	r0, r0
 801d2a8:	b118      	cbz	r0, 801d2b2 <settings_is_group_available+0x72>
 801d2aa:	2101      	movs	r1, #1
 801d2ac:	e022      	b.n	801d2f4 <settings_is_group_available+0xb4>
 801d2ae:	2100      	movs	r1, #0
 801d2b0:	e020      	b.n	801d2f4 <settings_is_group_available+0xb4>
 801d2b2:	2100      	movs	r1, #0
            break;
 801d2b4:	e01e      	b.n	801d2f4 <settings_is_group_available+0xb4>
    if(!available) switch(group->id) {
 801d2b6:	4d11      	ldr	r5, [pc, #68]	@ (801d2fc <settings_is_group_available+0xbc>)
 801d2b8:	2100      	movs	r1, #0
 801d2ba:	e013      	b.n	801d2e4 <settings_is_group_available+0xa4>
                        for(idx = 0; idx < details->n_settings; idx++) {
 801d2bc:	3401      	adds	r4, #1
 801d2be:	892b      	ldrh	r3, [r5, #8]
 801d2c0:	42a3      	cmp	r3, r4
 801d2c2:	d90c      	bls.n	801d2de <settings_is_group_available+0x9e>
                            if(details->settings[idx].group == id && (available = is_available(&details->settings[idx])))
 801d2c4:	68eb      	ldr	r3, [r5, #12]
 801d2c6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801d2ca:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801d2ce:	7883      	ldrb	r3, [r0, #2]
 801d2d0:	42b3      	cmp	r3, r6
 801d2d2:	d1f3      	bne.n	801d2bc <settings_is_group_available+0x7c>
 801d2d4:	f7fe fe7e 	bl	801bfd4 <is_available>
 801d2d8:	4601      	mov	r1, r0
 801d2da:	2800      	cmp	r0, #0
 801d2dc:	d0ee      	beq.n	801d2bc <settings_is_group_available+0x7c>
                } while(!available && (details = details->next));
 801d2de:	b949      	cbnz	r1, 801d2f4 <settings_is_group_available+0xb4>
 801d2e0:	69ad      	ldr	r5, [r5, #24]
 801d2e2:	b13d      	cbz	r5, 801d2f4 <settings_is_group_available+0xb4>
                    if(details->settings) {
 801d2e4:	68eb      	ldr	r3, [r5, #12]
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	d0f9      	beq.n	801d2de <settings_is_group_available+0x9e>
                        for(idx = 0; idx < details->n_settings; idx++) {
 801d2ea:	2400      	movs	r4, #0
 801d2ec:	e7e7      	b.n	801d2be <settings_is_group_available+0x7e>
        return false;
 801d2ee:	2100      	movs	r1, #0
 801d2f0:	e000      	b.n	801d2f4 <settings_is_group_available+0xb4>
    if(!available) switch(group->id) {
 801d2f2:	2101      	movs	r1, #1
}
 801d2f4:	4608      	mov	r0, r1
 801d2f6:	bd70      	pop	{r4, r5, r6, pc}
 801d2f8:	200011ac 	.word	0x200011ac
 801d2fc:	20000204 	.word	0x20000204

0801d300 <is_group_available>:
{
 801d300:	b508      	push	{r3, lr}
    return settings_is_group_available(setting->group);
 801d302:	7880      	ldrb	r0, [r0, #2]
 801d304:	f7ff ff9c 	bl	801d240 <settings_is_group_available>
}
 801d308:	bd08      	pop	{r3, pc}

0801d30a <setting_datatype_to_external>:
    switch(datatype) {
 801d30a:	f1a0 030a 	sub.w	r3, r0, #10
 801d30e:	2b01      	cmp	r3, #1
 801d310:	d900      	bls.n	801d314 <setting_datatype_to_external+0xa>
}
 801d312:	4770      	bx	lr
            datatype = Format_Integer;
 801d314:	2005      	movs	r0, #5
 801d316:	e7fc      	b.n	801d312 <setting_datatype_to_external+0x8>

0801d318 <setting_is_list>:
    return setting->datatype == Format_Bitfield || setting->datatype == Format_XBitfield || setting->datatype == Format_RadioButtons;
 801d318:	7b00      	ldrb	r0, [r0, #12]
 801d31a:	3801      	subs	r0, #1
 801d31c:	b2c0      	uxtb	r0, r0
}
 801d31e:	2802      	cmp	r0, #2
 801d320:	bf8c      	ite	hi
 801d322:	2000      	movhi	r0, #0
 801d324:	2001      	movls	r0, #1
 801d326:	4770      	bx	lr

0801d328 <setting_remove_element>:
{
 801d328:	b538      	push	{r3, r4, r5, lr}
 801d32a:	460c      	mov	r4, r1
    const setting_detail_t *setting = setting_get_details(id, NULL);
 801d32c:	2100      	movs	r1, #0
 801d32e:	f7ff fea7 	bl	801d080 <setting_get_details>
    if(setting && setting_is_list(setting))
 801d332:	b118      	cbz	r0, 801d33c <setting_remove_element+0x14>
 801d334:	4605      	mov	r5, r0
 801d336:	f7ff ffef 	bl	801d318 <setting_is_list>
 801d33a:	b900      	cbnz	r0, 801d33e <setting_remove_element+0x16>
}
 801d33c:	bd38      	pop	{r3, r4, r5, pc}
        remove_element((char *)setting->format, pos);
 801d33e:	4621      	mov	r1, r4
 801d340:	6928      	ldr	r0, [r5, #16]
 801d342:	f7fe fe51 	bl	801bfe8 <remove_element>
}
 801d346:	e7f9      	b.n	801d33c <setting_remove_element+0x14>

0801d348 <setting_remove_elements>:
{
 801d348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d34c:	4680      	mov	r8, r0
 801d34e:	460c      	mov	r4, r1
    if((setting = setting_get_details(id, NULL))) {
 801d350:	2100      	movs	r1, #0
 801d352:	f7ff fe95 	bl	801d080 <setting_get_details>
 801d356:	b310      	cbz	r0, 801d39e <setting_remove_elements+0x56>
        char *format = (char *)setting->format, *s;
 801d358:	6907      	ldr	r7, [r0, #16]
        uint_fast8_t idx, entries = strnumentries(format, ',');
 801d35a:	212c      	movs	r1, #44	@ 0x2c
 801d35c:	4638      	mov	r0, r7
 801d35e:	f7ff f93f 	bl	801c5e0 <strnumentries>
 801d362:	4606      	mov	r6, r0
        for(idx = 0; idx < entries; idx++ ) {
 801d364:	2500      	movs	r5, #0
 801d366:	e001      	b.n	801d36c <setting_remove_elements+0x24>
            mask >>= 1;
 801d368:	0864      	lsrs	r4, r4, #1
        for(idx = 0; idx < entries; idx++ ) {
 801d36a:	3501      	adds	r5, #1
 801d36c:	42b5      	cmp	r5, r6
 801d36e:	d209      	bcs.n	801d384 <setting_remove_elements+0x3c>
            if(!(mask & 0x1))
 801d370:	f014 0f01 	tst.w	r4, #1
 801d374:	d1f8      	bne.n	801d368 <setting_remove_elements+0x20>
                setting_remove_element(id, idx);
 801d376:	4629      	mov	r1, r5
 801d378:	4640      	mov	r0, r8
 801d37a:	f7ff ffd5 	bl	801d328 <setting_remove_element>
 801d37e:	e7f3      	b.n	801d368 <setting_remove_elements+0x20>
            *s = '\0';
 801d380:	2300      	movs	r3, #0
 801d382:	7023      	strb	r3, [r4, #0]
        while((s = strrchr(format, ','))) {
 801d384:	212c      	movs	r1, #44	@ 0x2c
 801d386:	4638      	mov	r0, r7
 801d388:	f007 f8c2 	bl	8024510 <strrchr>
 801d38c:	4604      	mov	r4, r0
 801d38e:	b130      	cbz	r0, 801d39e <setting_remove_elements+0x56>
            if(strncmp(s, ",N/A", 4))
 801d390:	2204      	movs	r2, #4
 801d392:	4904      	ldr	r1, [pc, #16]	@ (801d3a4 <setting_remove_elements+0x5c>)
 801d394:	4620      	mov	r0, r4
 801d396:	f007 f896 	bl	80244c6 <strncmp>
 801d39a:	2800      	cmp	r0, #0
 801d39c:	d0f0      	beq.n	801d380 <setting_remove_elements+0x38>
}
 801d39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3a2:	bf00      	nop
 801d3a4:	0802bc30 	.word	0x0802bc30

0801d3a8 <setting_validate_me>:
{
 801d3a8:	b570      	push	{r4, r5, r6, lr}
 801d3aa:	4604      	mov	r4, r0
 801d3ac:	460d      	mov	r5, r1
    switch(setting->datatype) {
 801d3ae:	7b03      	ldrb	r3, [r0, #12]
 801d3b0:	2b0b      	cmp	r3, #11
 801d3b2:	d834      	bhi.n	801d41e <setting_validate_me+0x76>
 801d3b4:	e8df f003 	tbb	[pc, r3]
 801d3b8:	06060606 	.word	0x06060606
 801d3bc:	28090606 	.word	0x28090606
 801d3c0:	0606330c 	.word	0x0606330c
            status = setting_validate_me_uint(setting, svalue);
 801d3c4:	f7ff f963 	bl	801c68e <setting_validate_me_uint>
}
 801d3c8:	bd70      	pop	{r4, r5, r6, pc}
            status = validate_value(setting, value);
 801d3ca:	f7ff f99d 	bl	801c708 <validate_value>
            break;
 801d3ce:	e7fb      	b.n	801d3c8 <setting_validate_me+0x20>
                uint_fast16_t len = strlen(svalue);
 801d3d0:	4608      	mov	r0, r1
 801d3d2:	f7ea fe95 	bl	8008100 <strlen>
 801d3d6:	4606      	mov	r6, r0
                if(hal.stream.state.webui_connected && len == strlen(PASSWORD_MASK) && !strcmp(PASSWORD_MASK, svalue))
 801d3d8:	4b12      	ldr	r3, [pc, #72]	@ (801d424 <setting_validate_me+0x7c>)
 801d3da:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 801d3de:	f013 0f02 	tst.w	r3, #2
 801d3e2:	d001      	beq.n	801d3e8 <setting_validate_me+0x40>
 801d3e4:	2808      	cmp	r0, #8
 801d3e6:	d007      	beq.n	801d3f8 <setting_validate_me+0x50>
                    status = validate_value(setting, (float)len);
 801d3e8:	ee07 6a90 	vmov	s15, r6
 801d3ec:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801d3f0:	4620      	mov	r0, r4
 801d3f2:	f7ff f989 	bl	801c708 <validate_value>
 801d3f6:	e7e7      	b.n	801d3c8 <setting_validate_me+0x20>
                if(hal.stream.state.webui_connected && len == strlen(PASSWORD_MASK) && !strcmp(PASSWORD_MASK, svalue))
 801d3f8:	4629      	mov	r1, r5
 801d3fa:	480b      	ldr	r0, [pc, #44]	@ (801d428 <setting_validate_me+0x80>)
 801d3fc:	f7ea fe20 	bl	8008040 <strcmp>
 801d400:	2800      	cmp	r0, #0
 801d402:	d1f1      	bne.n	801d3e8 <setting_validate_me+0x40>
                    status = Status_InvalidStatement;
 801d404:	2003      	movs	r0, #3
 801d406:	e7df      	b.n	801d3c8 <setting_validate_me+0x20>
                uint_fast16_t len = strlen(svalue);
 801d408:	4608      	mov	r0, r1
 801d40a:	f7ea fe79 	bl	8008100 <strlen>
 801d40e:	ee00 0a10 	vmov	s0, r0
                status = validate_value(setting, (float)len);
 801d412:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801d416:	4620      	mov	r0, r4
 801d418:	f7ff f976 	bl	801c708 <validate_value>
            break;
 801d41c:	e7d4      	b.n	801d3c8 <setting_validate_me+0x20>
    switch(setting->datatype) {
 801d41e:	2000      	movs	r0, #0
 801d420:	e7d2      	b.n	801d3c8 <setting_validate_me+0x20>
 801d422:	bf00      	nop
 801d424:	200011ac 	.word	0x200011ac
 801d428:	0802bbdc 	.word	0x0802bbdc

0801d42c <settings_store_setting>:

// A helper method to set settings from command line
status_code_t settings_store_setting (setting_id_t id, char *svalue)
{
 801d42c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d42e:	b085      	sub	sp, #20
 801d430:	4606      	mov	r6, r0
 801d432:	460c      	mov	r4, r1
    uint_fast8_t set_idx = 0;
 801d434:	2300      	movs	r3, #0
 801d436:	9303      	str	r3, [sp, #12]
    uint32_t int_value = 0;
 801d438:	9302      	str	r3, [sp, #8]
    float value = NAN;
 801d43a:	4b5c      	ldr	r3, [pc, #368]	@ (801d5ac <settings_store_setting+0x180>)
 801d43c:	9301      	str	r3, [sp, #4]
    status_code_t status = Status_OK;
    setting_details_t *set;
    const setting_detail_t *setting = setting_get_details(id, &set);
 801d43e:	4669      	mov	r1, sp
 801d440:	f7ff fe1e 	bl	801d080 <setting_get_details>

    if(setting == NULL) {
 801d444:	4605      	mov	r5, r0
 801d446:	b938      	cbnz	r0, 801d458 <settings_store_setting+0x2c>
        if(id == Setting_SpindlePWMBehaviour) {
 801d448:	2e07      	cmp	r6, #7
 801d44a:	f040 80aa 	bne.w	801d5a2 <settings_store_setting+0x176>
            set = &setting_details;
 801d44e:	4b58      	ldr	r3, [pc, #352]	@ (801d5b0 <settings_store_setting+0x184>)
 801d450:	9300      	str	r3, [sp, #0]
            setting = &setting_detail[Setting_SpindlePWMBehaviour];
 801d452:	4d58      	ldr	r5, [pc, #352]	@ (801d5b4 <settings_store_setting+0x188>)
 801d454:	e000      	b.n	801d458 <settings_store_setting+0x2c>
            return Status_SettingDisabled;
    }

    // Trim leading spaces
    while(*svalue == ' ')
        svalue++;
 801d456:	3401      	adds	r4, #1
    while(*svalue == ' ')
 801d458:	7823      	ldrb	r3, [r4, #0]
 801d45a:	2b20      	cmp	r3, #32
 801d45c:	d0fb      	beq.n	801d456 <settings_store_setting+0x2a>

    if(setting->datatype == Format_Decimal)  {
 801d45e:	7b2b      	ldrb	r3, [r5, #12]
 801d460:	2b06      	cmp	r3, #6
 801d462:	d022      	beq.n	801d4aa <settings_store_setting+0x7e>
    return datatype == Format_String || datatype == Format_Password || datatype == Format_IPv4;
 801d464:	3b07      	subs	r3, #7
 801d466:	b2db      	uxtb	r3, r3
        if(!read_float(svalue, &set_idx, &value) && setting_is_core(setting->type))
            return Status_BadNumberFormat;
    } else if(!setting_is_string(setting->datatype) && read_uint(svalue, &set_idx, &int_value) != Status_OK && setting_is_core(setting->type))
 801d468:	2b02      	cmp	r3, #2
 801d46a:	d82a      	bhi.n	801d4c2 <settings_store_setting+0x96>
        return Status_BadNumberFormat;

    if((status = setting_validate_me(setting, value, svalue)) != Status_OK) {
 801d46c:	4621      	mov	r1, r4
 801d46e:	ed9d 0a01 	vldr	s0, [sp, #4]
 801d472:	4628      	mov	r0, r5
 801d474:	f7ff ff98 	bl	801d3a8 <setting_validate_me>
 801d478:	4607      	mov	r7, r0
 801d47a:	bb70      	cbnz	r0, 801d4da <settings_store_setting+0xae>
            status =  Status_SettingStepPulseMin;

        return status;
    }

    switch(setting->type) {
 801d47c:	7f2a      	ldrb	r2, [r5, #28]
 801d47e:	2a07      	cmp	r2, #7
 801d480:	d863      	bhi.n	801d54a <settings_store_setting+0x11e>
 801d482:	2301      	movs	r3, #1
 801d484:	4093      	lsls	r3, r2
 801d486:	f013 0faa 	tst.w	r3, #170	@ 0xaa
 801d48a:	d14a      	bne.n	801d522 <settings_store_setting+0xf6>
 801d48c:	f013 0f55 	tst.w	r3, #85	@ 0x55
 801d490:	d05b      	beq.n	801d54a <settings_store_setting+0x11e>

        case Setting_NonCore:
        case Setting_IsExtended:
        case Setting_IsLegacy:
        case Setting_IsExpanded:
            switch(setting->datatype) {
 801d492:	7b2b      	ldrb	r3, [r5, #12]
 801d494:	2b0b      	cmp	r3, #11
 801d496:	f200 8086 	bhi.w	801d5a6 <settings_store_setting+0x17a>
 801d49a:	e8df f003 	tbb	[pc, r3]
 801d49e:	3434      	.short	0x3434
 801d4a0:	3e2d3434 	.word	0x3e2d3434
 801d4a4:	84282824 	.word	0x84282824
 801d4a8:	3934      	.short	0x3934
        if(!read_float(svalue, &set_idx, &value) && setting_is_core(setting->type))
 801d4aa:	aa01      	add	r2, sp, #4
 801d4ac:	a903      	add	r1, sp, #12
 801d4ae:	4620      	mov	r0, r4
 801d4b0:	f7f7 ff66 	bl	8015380 <read_float>
 801d4b4:	2800      	cmp	r0, #0
 801d4b6:	d1d9      	bne.n	801d46c <settings_store_setting+0x40>
 801d4b8:	7f2b      	ldrb	r3, [r5, #28]
 801d4ba:	2b01      	cmp	r3, #1
 801d4bc:	d9d6      	bls.n	801d46c <settings_store_setting+0x40>
            return Status_BadNumberFormat;
 801d4be:	2702      	movs	r7, #2
 801d4c0:	e044      	b.n	801d54c <settings_store_setting+0x120>
    } else if(!setting_is_string(setting->datatype) && read_uint(svalue, &set_idx, &int_value) != Status_OK && setting_is_core(setting->type))
 801d4c2:	aa02      	add	r2, sp, #8
 801d4c4:	a903      	add	r1, sp, #12
 801d4c6:	4620      	mov	r0, r4
 801d4c8:	f7f7 ff10 	bl	80152ec <read_uint>
 801d4cc:	2800      	cmp	r0, #0
 801d4ce:	d0cd      	beq.n	801d46c <settings_store_setting+0x40>
 801d4d0:	7f2b      	ldrb	r3, [r5, #28]
 801d4d2:	2b01      	cmp	r3, #1
 801d4d4:	d9ca      	bls.n	801d46c <settings_store_setting+0x40>
        return Status_BadNumberFormat;
 801d4d6:	2702      	movs	r7, #2
 801d4d8:	e038      	b.n	801d54c <settings_store_setting+0x120>
        if(setting == Setting_PulseMicroseconds && status == Status_SettingValueOutOfRange)
 801d4da:	2d00      	cmp	r5, #0
 801d4dc:	d136      	bne.n	801d54c <settings_store_setting+0x120>
 801d4de:	2834      	cmp	r0, #52	@ 0x34
 801d4e0:	d134      	bne.n	801d54c <settings_store_setting+0x120>
            status =  Status_SettingStepPulseMin;
 801d4e2:	2706      	movs	r7, #6
        return status;
 801d4e4:	e032      	b.n	801d54c <settings_store_setting+0x120>

                case Format_Decimal:
                    *((float *)(setting->value)) = value;
 801d4e6:	6a2b      	ldr	r3, [r5, #32]
 801d4e8:	9a01      	ldr	r2, [sp, #4]
 801d4ea:	601a      	str	r2, [r3, #0]
                    break;
 801d4ec:	e02d      	b.n	801d54a <settings_store_setting+0x11e>

                case Format_String:
                case Format_Password:
                    strcpy(((char *)(setting->value)), svalue);
 801d4ee:	4621      	mov	r1, r4
 801d4f0:	6a28      	ldr	r0, [r5, #32]
 801d4f2:	f007 f91c 	bl	802472e <strcpy>
                    break;
 801d4f6:	e028      	b.n	801d54a <settings_store_setting+0x11e>

                case Format_AxisMask:
                    *((uint8_t *)(setting->value)) = (uint8_t)int_value & AXES_BITMASK;
 801d4f8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801d4fc:	6a2a      	ldr	r2, [r5, #32]
 801d4fe:	f003 0307 	and.w	r3, r3, #7
 801d502:	7013      	strb	r3, [r2, #0]
                    break;
 801d504:	e021      	b.n	801d54a <settings_store_setting+0x11e>
                case Format_Bool:
                case Format_Bitfield:
                case Format_XBitfield:
                case Format_RadioButtons:
                case Format_Int8:
                    *((uint8_t *)(setting->value)) = (uint8_t)int_value;
 801d506:	6a2b      	ldr	r3, [r5, #32]
 801d508:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801d50c:	701a      	strb	r2, [r3, #0]
                    break;
 801d50e:	e01c      	b.n	801d54a <settings_store_setting+0x11e>

                case Format_Int16:
                    *((uint16_t *)(setting->value)) = (uint16_t)int_value;
 801d510:	6a2b      	ldr	r3, [r5, #32]
 801d512:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d516:	801a      	strh	r2, [r3, #0]
                    break;
 801d518:	e017      	b.n	801d54a <settings_store_setting+0x11e>

                case Format_Integer:
                    *((uint32_t *)(setting->value)) = (uint32_t)int_value;
 801d51a:	6a2b      	ldr	r3, [r5, #32]
 801d51c:	9a02      	ldr	r2, [sp, #8]
 801d51e:	601a      	str	r2, [r3, #0]
                    break;
 801d520:	e013      	b.n	801d54a <settings_store_setting+0x11e>

        case Setting_NonCoreFn:
        case Setting_IsExtendedFn:
        case Setting_IsLegacyFn:
        case Setting_IsExpandedFn:
            switch(setting->datatype) {
 801d522:	7b2b      	ldrb	r3, [r5, #12]
 801d524:	2b06      	cmp	r3, #6
 801d526:	d00a      	beq.n	801d53e <settings_store_setting+0x112>
 801d528:	d313      	bcc.n	801d552 <settings_store_setting+0x126>
 801d52a:	3b07      	subs	r3, #7
 801d52c:	b2db      	uxtb	r3, r3
 801d52e:	2b02      	cmp	r3, #2
 801d530:	d80f      	bhi.n	801d552 <settings_store_setting+0x126>
                    break;

                case Format_String:
                case Format_Password:
                case Format_IPv4:
                    status = ((setting_set_string_ptr)(setting->value))(id, svalue);
 801d532:	6a2b      	ldr	r3, [r5, #32]
 801d534:	4621      	mov	r1, r4
 801d536:	4630      	mov	r0, r6
 801d538:	4798      	blx	r3
 801d53a:	4607      	mov	r7, r0
                    break;
 801d53c:	e005      	b.n	801d54a <settings_store_setting+0x11e>
                    status = ((setting_set_float_ptr)(setting->value))(id, value);
 801d53e:	6a2b      	ldr	r3, [r5, #32]
 801d540:	ed9d 0a01 	vldr	s0, [sp, #4]
 801d544:	4630      	mov	r0, r6
 801d546:	4798      	blx	r3
 801d548:	4607      	mov	r7, r0
                    break;
            }
            break;
    }

    if(status == Status_OK) {
 801d54a:	b147      	cbz	r7, 801d55e <settings_store_setting+0x132>
            set->on_changed(&settings, changed);
        }
    }

    return status;
}
 801d54c:	4638      	mov	r0, r7
 801d54e:	b005      	add	sp, #20
 801d550:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    status = ((setting_set_int_ptr)(setting->value))(id, (uint_fast16_t)int_value);
 801d552:	6a2b      	ldr	r3, [r5, #32]
 801d554:	9902      	ldr	r1, [sp, #8]
 801d556:	4630      	mov	r0, r6
 801d558:	4798      	blx	r3
 801d55a:	4607      	mov	r7, r0
                    break;
 801d55c:	e7f5      	b.n	801d54a <settings_store_setting+0x11e>
        xbar_set_homing_source();
 801d55e:	f7ef f911 	bl	800c784 <xbar_set_homing_source>
        if(set->save)
 801d562:	9b00      	ldr	r3, [sp, #0]
 801d564:	6a1b      	ldr	r3, [r3, #32]
 801d566:	b103      	cbz	r3, 801d56a <settings_store_setting+0x13e>
            set->save();
 801d568:	4798      	blx	r3
        if(set->on_changed) {
 801d56a:	9b00      	ldr	r3, [sp, #0]
 801d56c:	69db      	ldr	r3, [r3, #28]
 801d56e:	2b00      	cmp	r3, #0
 801d570:	d0ec      	beq.n	801d54c <settings_store_setting+0x120>
            settings_changed_flags_t changed = {0};
 801d572:	f04f 0400 	mov.w	r4, #0
            changed.spindle = settings_changed_spindle() || machine_mode_changed;
 801d576:	f7ff f911 	bl	801c79c <settings_changed_spindle>
 801d57a:	b920      	cbnz	r0, 801d586 <settings_store_setting+0x15a>
 801d57c:	4b0e      	ldr	r3, [pc, #56]	@ (801d5b8 <settings_store_setting+0x18c>)
 801d57e:	781b      	ldrb	r3, [r3, #0]
 801d580:	b16b      	cbz	r3, 801d59e <settings_store_setting+0x172>
 801d582:	2301      	movs	r3, #1
 801d584:	e000      	b.n	801d588 <settings_store_setting+0x15c>
 801d586:	2301      	movs	r3, #1
 801d588:	f363 0400 	bfi	r4, r3, #0, #1
            machine_mode_changed = false;
 801d58c:	4b0a      	ldr	r3, [pc, #40]	@ (801d5b8 <settings_store_setting+0x18c>)
 801d58e:	2200      	movs	r2, #0
 801d590:	701a      	strb	r2, [r3, #0]
            set->on_changed(&settings, changed);
 801d592:	9b00      	ldr	r3, [sp, #0]
 801d594:	69db      	ldr	r3, [r3, #28]
 801d596:	4621      	mov	r1, r4
 801d598:	4808      	ldr	r0, [pc, #32]	@ (801d5bc <settings_store_setting+0x190>)
 801d59a:	4798      	blx	r3
 801d59c:	e7d6      	b.n	801d54c <settings_store_setting+0x120>
            changed.spindle = settings_changed_spindle() || machine_mode_changed;
 801d59e:	2300      	movs	r3, #0
 801d5a0:	e7f2      	b.n	801d588 <settings_store_setting+0x15c>
            return Status_SettingDisabled;
 801d5a2:	2735      	movs	r7, #53	@ 0x35
 801d5a4:	e7d2      	b.n	801d54c <settings_store_setting+0x120>
 801d5a6:	2702      	movs	r7, #2
 801d5a8:	e7d0      	b.n	801d54c <settings_store_setting+0x120>
 801d5aa:	bf00      	nop
 801d5ac:	7fc00000 	.word	0x7fc00000
 801d5b0:	20000204 	.word	0x20000204
 801d5b4:	0802ebec 	.word	0x0802ebec
 801d5b8:	20001bc0 	.word	0x20001bc0
 801d5bc:	20001bc4 	.word	0x20001bc4

0801d5c0 <settings_add_spindle_type>:

bool settings_add_spindle_type (const char *type)
{
 801d5c0:	b570      	push	{r4, r5, r6, lr}
 801d5c2:	4604      	mov	r4, r0
    bool ok;

    if((ok = strlen(spindle_types) + strlen(type) + 1 < sizeof(spindle_types))) {
 801d5c4:	480d      	ldr	r0, [pc, #52]	@ (801d5fc <settings_add_spindle_type+0x3c>)
 801d5c6:	f7ea fd9b 	bl	8008100 <strlen>
 801d5ca:	4605      	mov	r5, r0
 801d5cc:	4620      	mov	r0, r4
 801d5ce:	f7ea fd97 	bl	8008100 <strlen>
 801d5d2:	182b      	adds	r3, r5, r0
 801d5d4:	3301      	adds	r3, #1
 801d5d6:	2b63      	cmp	r3, #99	@ 0x63
 801d5d8:	bf94      	ite	ls
 801d5da:	2601      	movls	r6, #1
 801d5dc:	2600      	movhi	r6, #0
 801d5de:	d806      	bhi.n	801d5ee <settings_add_spindle_type+0x2e>
        if(*spindle_types != '\0')
 801d5e0:	4b06      	ldr	r3, [pc, #24]	@ (801d5fc <settings_add_spindle_type+0x3c>)
 801d5e2:	781b      	ldrb	r3, [r3, #0]
 801d5e4:	b92b      	cbnz	r3, 801d5f2 <settings_add_spindle_type+0x32>
            strcat(spindle_types, ",");
        strcat(spindle_types, type);
 801d5e6:	4621      	mov	r1, r4
 801d5e8:	4804      	ldr	r0, [pc, #16]	@ (801d5fc <settings_add_spindle_type+0x3c>)
 801d5ea:	f006 ff50 	bl	802448e <strcat>
    }

    return ok;
}
 801d5ee:	4630      	mov	r0, r6
 801d5f0:	bd70      	pop	{r4, r5, r6, pc}
            strcat(spindle_types, ",");
 801d5f2:	4b03      	ldr	r3, [pc, #12]	@ (801d600 <settings_add_spindle_type+0x40>)
 801d5f4:	881a      	ldrh	r2, [r3, #0]
 801d5f6:	4b01      	ldr	r3, [pc, #4]	@ (801d5fc <settings_add_spindle_type+0x3c>)
 801d5f8:	535a      	strh	r2, [r3, r5]
 801d5fa:	e7f4      	b.n	801d5e6 <settings_add_spindle_type+0x26>
 801d5fc:	20001b5c 	.word	0x20001b5c
 801d600:	0802b7dc 	.word	0x0802b7dc

0801d604 <settings_clear>:

// Clear settings chain
void settings_clear (void)
{
    setting_details.next = NULL;
 801d604:	4b02      	ldr	r3, [pc, #8]	@ (801d610 <settings_clear+0xc>)
 801d606:	2200      	movs	r2, #0
 801d608:	619a      	str	r2, [r3, #24]
    settingsd = &setting_details;
 801d60a:	4a02      	ldr	r2, [pc, #8]	@ (801d614 <settings_clear+0x10>)
 801d60c:	6013      	str	r3, [r2, #0]
}
 801d60e:	4770      	bx	lr
 801d610:	20000204 	.word	0x20000204
 801d614:	20000200 	.word	0x20000200

0801d618 <settings_init>:

// Initialize the config subsystem
void settings_init (void)
{
 801d618:	b538      	push	{r3, r4, r5, lr}
    settings_changed_flags_t changed = {0};
 801d61a:	f04f 0500 	mov.w	r5, #0
    grbl.tool_table.read = settings_read_tool_data;
    grbl.tool_table.write = settings_write_tool_data;
    grbl.tool_table.clear = settings_clear_tool_data;
#else
    static tool_data_t tools;
    if(grbl.tool_table.tool == NULL) {
 801d61e:	4b71      	ldr	r3, [pc, #452]	@ (801d7e4 <settings_init+0x1cc>)
 801d620:	69db      	ldr	r3, [r3, #28]
 801d622:	2b00      	cmp	r3, #0
 801d624:	f000 8082 	beq.w	801d72c <settings_init+0x114>
        grbl.tool_table.n_tools = 0;
        grbl.tool_table.tool = &tools;
    }
#endif

    if(!read_global_settings()) {
 801d628:	f7ff fc46 	bl	801ceb8 <read_global_settings>
 801d62c:	2800      	cmp	r0, #0
 801d62e:	f040 8083 	bne.w	801d738 <settings_init+0x120>

        settings_restore_t settings = settings_all;
        settings.defaults = 1; // Ensure global settings get restored

        if(hal.nvs.type != NVS_None)
 801d632:	4b6d      	ldr	r3, [pc, #436]	@ (801d7e8 <settings_init+0x1d0>)
 801d634:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801d638:	b11b      	cbz	r3, 801d642 <settings_init+0x2a>
            grbl.report.status_message(Status_SettingReadFail);
 801d63a:	4b6a      	ldr	r3, [pc, #424]	@ (801d7e4 <settings_init+0x1cc>)
 801d63c:	689b      	ldr	r3, [r3, #8]
 801d63e:	2007      	movs	r0, #7
 801d640:	4798      	blx	r3

        settings_restore(settings); // Force restore all non-volatile storage data.
 801d642:	f04f 001f 	mov.w	r0, #31
 801d646:	f7ff fc93 	bl	801cf70 <settings_restore>
        report_init();
 801d64a:	f7fb fc27 	bl	8018e9c <report_init>
#if COMPATIBILITY_LEVEL <= 1
        report_grbl_settings(true, NULL);
 801d64e:	2100      	movs	r1, #0
 801d650:	2001      	movs	r0, #1
 801d652:	f7fb fcc3 	bl	8018fdc <report_grbl_settings>
#else
        report_grbl_settings(false, NULL);
#endif
        changed.spindle = settings_changed_spindle();
 801d656:	f7ff f8a1 	bl	801c79c <settings_changed_spindle>
 801d65a:	f360 0500 	bfi	r5, r0, #0, #1

        if(hal.probe.configure) // Initialize probe invert mask.
            hal.probe.configure(false, false);
    }

    settings.offset_lock.mask &= ~0b111; // TODO: remove
 801d65e:	4c63      	ldr	r4, [pc, #396]	@ (801d7ec <settings_init+0x1d4>)
 801d660:	f894 3102 	ldrb.w	r3, [r4, #258]	@ 0x102
 801d664:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801d668:	f884 3102 	strb.w	r3, [r4, #258]	@ 0x102
    settings.offset_lock.mask |= settings.parking.flags.offset_lock; // TODO: remove
 801d66c:	f894 2128 	ldrb.w	r2, [r4, #296]	@ 0x128
 801d670:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 801d674:	f884 3102 	strb.w	r3, [r4, #258]	@ 0x102

    xbar_set_homing_source();
 801d678:	f7ef f884 	bl	800c784 <xbar_set_homing_source>

    tmp_set_soft_limits();
 801d67c:	f7fe f93a 	bl	801b8f4 <tmp_set_soft_limits>
    sys.hard_limits.mask = settings.limits.flags.hard_enabled ? AXES_BITMASK : 0;
 801d680:	f894 3124 	ldrb.w	r3, [r4, #292]	@ 0x124
 801d684:	f013 0301 	ands.w	r3, r3, #1
 801d688:	d000      	beq.n	801d68c <settings_init+0x74>
 801d68a:	2307      	movs	r3, #7
 801d68c:	4a58      	ldr	r2, [pc, #352]	@ (801d7f0 <settings_init+0x1d8>)
 801d68e:	f882 3094 	strb.w	r3, [r2, #148]	@ 0x94
    tmp_set_hard_limits();

    if(spindle_get_count() == 0)
 801d692:	f000 fc01 	bl	801de98 <spindle_get_count>
 801d696:	2800      	cmp	r0, #0
 801d698:	d07e      	beq.n	801d798 <settings_init+0x180>
        spindle_add_null();

    spindle_cap_t spindle_cap = spindle_get_caps(false);
 801d69a:	2000      	movs	r0, #0
 801d69c:	f000 fb0e 	bl	801dcbc <spindle_get_caps>
    if(spindle_cap.gpio_controlled) {
 801d6a0:	f410 7f80 	tst.w	r0, #256	@ 0x100
 801d6a4:	d17b      	bne.n	801d79e <settings_init+0x186>
        spindle_state.pwm = spindle_cap.pwm_invert;

        setting_remove_elements(Setting_SpindleInvertMask, spindle_state.mask);
    }

    setting_remove_elements(Setting_ControlInvertMask, hal.signals_cap.mask & ~limits_override.mask);
 801d6a6:	4c50      	ldr	r4, [pc, #320]	@ (801d7e8 <settings_init+0x1d0>)
 801d6a8:	f8b4 11dc 	ldrh.w	r1, [r4, #476]	@ 0x1dc
 801d6ac:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 801d6b0:	200e      	movs	r0, #14
 801d6b2:	f7ff fe49 	bl	801d348 <setting_remove_elements>

    if(hal.stepper.get_ganged)
 801d6b6:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 801d6ba:	b12b      	cbz	r3, 801d6c8 <settings_init+0xb0>
        setting_remove_elements(Setting_GangedDirInvertMask, hal.stepper.get_ganged(false).mask);
 801d6bc:	2000      	movs	r0, #0
 801d6be:	4798      	blx	r3
 801d6c0:	b2c1      	uxtb	r1, r0
 801d6c2:	2008      	movs	r0, #8
 801d6c4:	f7ff fe40 	bl	801d348 <setting_remove_elements>

    setting_remove_elements(Setting_CoolantInvertMask, hal.coolant_cap.mask);
 801d6c8:	4c47      	ldr	r4, [pc, #284]	@ (801d7e8 <settings_init+0x1d0>)
 801d6ca:	f894 11e4 	ldrb.w	r1, [r4, #484]	@ 0x1e4
 801d6ce:	200f      	movs	r0, #15
 801d6d0:	f7ff fe3a 	bl	801d348 <setting_remove_elements>

#if COMPATIBILITY_LEVEL <= 1
    if(hal.homing.get_state == NULL) {
 801d6d4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801d6d6:	2b00      	cmp	r3, #0
 801d6d8:	d070      	beq.n	801d7bc <settings_init+0x1a4>
        homing.use_limit_switches = Off;
        setting_remove_elements(Setting_HomingEnable, homing.value);
    }
#endif

    setting_details_t *details = setting_details.next;
 801d6da:	4b46      	ldr	r3, [pc, #280]	@ (801d7f4 <settings_init+0x1dc>)
 801d6dc:	699c      	ldr	r4, [r3, #24]

    if(details) do {
 801d6de:	2c00      	cmp	r4, #0
 801d6e0:	d178      	bne.n	801d7d4 <settings_init+0x1bc>
            details->load();
        if(details->on_changed)
            details->on_changed(&settings, changed);
    } while((details = details->next));

    setting_details.on_changed = hal.settings_changed;
 801d6e2:	4b41      	ldr	r3, [pc, #260]	@ (801d7e8 <settings_init+0x1d0>)
 801d6e4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 801d6e8:	4b42      	ldr	r3, [pc, #264]	@ (801d7f4 <settings_init+0x1dc>)
 801d6ea:	61da      	str	r2, [r3, #28]

    // Sanity checks for spindle configuration
    if(settings.spindle.flags.type >= spindle_get_count())
 801d6ec:	4b3f      	ldr	r3, [pc, #252]	@ (801d7ec <settings_init+0x1d4>)
 801d6ee:	f893 40e7 	ldrb.w	r4, [r3, #231]	@ 0xe7
 801d6f2:	f3c4 0484 	ubfx	r4, r4, #2, #5
 801d6f6:	f000 fbcf 	bl	801de98 <spindle_get_count>
 801d6fa:	4284      	cmp	r4, r0
 801d6fc:	db06      	blt.n	801d70c <settings_init+0xf4>
        settings.spindle.flags.type = 0;
 801d6fe:	4b3b      	ldr	r3, [pc, #236]	@ (801d7ec <settings_init+0x1d4>)
 801d700:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801d704:	f36f 0286 	bfc	r2, #2, #5
 801d708:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    if(settings.offset_lock.encoder_spindle >= spindle_get_count())
 801d70c:	4b37      	ldr	r3, [pc, #220]	@ (801d7ec <settings_init+0x1d4>)
 801d70e:	f893 4102 	ldrb.w	r4, [r3, #258]	@ 0x102
 801d712:	08e4      	lsrs	r4, r4, #3
 801d714:	f000 fbc0 	bl	801de98 <spindle_get_count>
 801d718:	4284      	cmp	r4, r0
 801d71a:	db06      	blt.n	801d72a <settings_init+0x112>
        settings.offset_lock.encoder_spindle = 0;
 801d71c:	4b33      	ldr	r3, [pc, #204]	@ (801d7ec <settings_init+0x1d4>)
 801d71e:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 801d722:	f36f 02c7 	bfc	r2, #3, #5
 801d726:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
}
 801d72a:	bd38      	pop	{r3, r4, r5, pc}
        grbl.tool_table.n_tools = 0;
 801d72c:	4b2d      	ldr	r3, [pc, #180]	@ (801d7e4 <settings_init+0x1cc>)
 801d72e:	2200      	movs	r2, #0
 801d730:	619a      	str	r2, [r3, #24]
        grbl.tool_table.tool = &tools;
 801d732:	4a31      	ldr	r2, [pc, #196]	@ (801d7f8 <settings_init+0x1e0>)
 801d734:	61da      	str	r2, [r3, #28]
 801d736:	e777      	b.n	801d628 <settings_init+0x10>
        memset(grbl.tool_table.tool, 0, sizeof(tool_data_t)); // First entry is for tools not in tool table
 801d738:	492a      	ldr	r1, [pc, #168]	@ (801d7e4 <settings_init+0x1cc>)
 801d73a:	69cb      	ldr	r3, [r1, #28]
 801d73c:	2200      	movs	r2, #0
 801d73e:	601a      	str	r2, [r3, #0]
 801d740:	605a      	str	r2, [r3, #4]
 801d742:	609a      	str	r2, [r3, #8]
 801d744:	60da      	str	r2, [r3, #12]
 801d746:	611a      	str	r2, [r3, #16]
        if(grbl.tool_table.n_tools) {
 801d748:	698b      	ldr	r3, [r1, #24]
 801d74a:	bb1b      	cbnz	r3, 801d794 <settings_init+0x17c>
        report_init();
 801d74c:	f7fb fba6 	bl	8018e9c <report_init>
        changed.spindle = settings_changed_spindle();
 801d750:	f7ff f824 	bl	801c79c <settings_changed_spindle>
 801d754:	f360 0500 	bfi	r5, r0, #0, #1
        hal.settings_changed(&settings, changed);
 801d758:	4c23      	ldr	r4, [pc, #140]	@ (801d7e8 <settings_init+0x1d0>)
 801d75a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 801d75e:	4629      	mov	r1, r5
 801d760:	4822      	ldr	r0, [pc, #136]	@ (801d7ec <settings_init+0x1d4>)
 801d762:	4798      	blx	r3
        if(hal.probe.configure) // Initialize probe invert mask.
 801d764:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 801d768:	2b00      	cmp	r3, #0
 801d76a:	f43f af78 	beq.w	801d65e <settings_init+0x46>
            hal.probe.configure(false, false);
 801d76e:	2100      	movs	r1, #0
 801d770:	4608      	mov	r0, r1
 801d772:	4798      	blx	r3
 801d774:	e773      	b.n	801d65e <settings_init+0x46>
                grbl.tool_table.read(idx, &grbl.tool_table.tool[idx]);
 801d776:	4b1b      	ldr	r3, [pc, #108]	@ (801d7e4 <settings_init+0x1cc>)
 801d778:	6a1a      	ldr	r2, [r3, #32]
 801d77a:	69db      	ldr	r3, [r3, #28]
 801d77c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 801d780:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801d784:	4620      	mov	r0, r4
 801d786:	4790      	blx	r2
            for(idx = 1; idx <= grbl.tool_table.n_tools; idx++)
 801d788:	3401      	adds	r4, #1
 801d78a:	4b16      	ldr	r3, [pc, #88]	@ (801d7e4 <settings_init+0x1cc>)
 801d78c:	699b      	ldr	r3, [r3, #24]
 801d78e:	42a3      	cmp	r3, r4
 801d790:	d2f1      	bcs.n	801d776 <settings_init+0x15e>
 801d792:	e7db      	b.n	801d74c <settings_init+0x134>
 801d794:	2401      	movs	r4, #1
 801d796:	e7f8      	b.n	801d78a <settings_init+0x172>
        spindle_add_null();
 801d798:	f000 fb3a 	bl	801de10 <spindle_add_null>
 801d79c:	e77d      	b.n	801d69a <settings_init+0x82>
        spindle_state_t spindle_state = { .on = On };
 801d79e:	f04f 0101 	mov.w	r1, #1
        spindle_state.ccw = spindle_cap.direction;
 801d7a2:	f3c0 0340 	ubfx	r3, r0, #1, #1
 801d7a6:	f363 0141 	bfi	r1, r3, #1, #1
        spindle_state.pwm = spindle_cap.pwm_invert;
 801d7aa:	f3c0 1000 	ubfx	r0, r0, #4, #1
 801d7ae:	f360 0182 	bfi	r1, r0, #2, #1
        setting_remove_elements(Setting_SpindleInvertMask, spindle_state.mask);
 801d7b2:	b2c9      	uxtb	r1, r1
 801d7b4:	2010      	movs	r0, #16
 801d7b6:	f7ff fdc7 	bl	801d348 <setting_remove_elements>
 801d7ba:	e774      	b.n	801d6a6 <settings_init+0x8e>
        setting_remove_elements(Setting_HomingEnable, homing.value);
 801d7bc:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
 801d7c0:	2016      	movs	r0, #22
 801d7c2:	f7ff fdc1 	bl	801d348 <setting_remove_elements>
 801d7c6:	e788      	b.n	801d6da <settings_init+0xc2>
            details->on_changed(&settings, changed);
 801d7c8:	4629      	mov	r1, r5
 801d7ca:	4808      	ldr	r0, [pc, #32]	@ (801d7ec <settings_init+0x1d4>)
 801d7cc:	4798      	blx	r3
    } while((details = details->next));
 801d7ce:	69a4      	ldr	r4, [r4, #24]
 801d7d0:	2c00      	cmp	r4, #0
 801d7d2:	d086      	beq.n	801d6e2 <settings_init+0xca>
        if(details->load)
 801d7d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801d7d6:	b103      	cbz	r3, 801d7da <settings_init+0x1c2>
            details->load();
 801d7d8:	4798      	blx	r3
        if(details->on_changed)
 801d7da:	69e3      	ldr	r3, [r4, #28]
 801d7dc:	2b00      	cmp	r3, #0
 801d7de:	d1f3      	bne.n	801d7c8 <settings_init+0x1b0>
 801d7e0:	e7f5      	b.n	801d7ce <settings_init+0x1b6>
 801d7e2:	bf00      	nop
 801d7e4:	20001394 	.word	0x20001394
 801d7e8:	200011ac 	.word	0x200011ac
 801d7ec:	20001bc4 	.word	0x20001bc4
 801d7f0:	2000148c 	.word	0x2000148c
 801d7f4:	20000204 	.word	0x20000204
 801d7f8:	20001ac4 	.word	0x20001ac4

0801d7fc <fall_asleep>:

static volatile bool slumber;

static void fall_asleep (void *data)
{
    slumber = false;
 801d7fc:	4b01      	ldr	r3, [pc, #4]	@ (801d804 <fall_asleep+0x8>)
 801d7fe:	2200      	movs	r2, #0
 801d800:	701a      	strb	r2, [r3, #0]
}
 801d802:	4770      	bx	lr
 801d804:	20001d34 	.word	0x20001d34

0801d808 <sleep_execute>:

// Starts sleep timer if running conditions are satisfied. When elapsed, sleep mode is executed.
static void sleep_execute (void)
{
 801d808:	b538      	push	{r3, r4, r5, lr}
    // Enable sleep timeout
    if(!(slumber = task_add_delayed(fall_asleep, NULL, (uint32_t)(SLEEP_DURATION * 1000.0f * 60.0f))))
 801d80a:	4a18      	ldr	r2, [pc, #96]	@ (801d86c <sleep_execute+0x64>)
 801d80c:	2100      	movs	r1, #0
 801d80e:	4818      	ldr	r0, [pc, #96]	@ (801d870 <sleep_execute+0x68>)
 801d810:	f7f3 fc7c 	bl	801110c <task_add_delayed>
 801d814:	4b17      	ldr	r3, [pc, #92]	@ (801d874 <sleep_execute+0x6c>)
 801d816:	7018      	strb	r0, [r3, #0]
 801d818:	b330      	cbz	r0, 801d868 <sleep_execute+0x60>
        return;

    // Fetch current number of buffered characters in input stream buffer.
    uint16_t rx_initial = hal.stream.get_rx_buffer_free();
 801d81a:	4b17      	ldr	r3, [pc, #92]	@ (801d878 <sleep_execute+0x70>)
 801d81c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801d820:	4798      	blx	r3
 801d822:	4605      	mov	r5, r0

    do {
        grbl.on_execute_realtime(state_get());
 801d824:	4b15      	ldr	r3, [pc, #84]	@ (801d87c <sleep_execute+0x74>)
 801d826:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 801d828:	f000 ff6c 	bl	801e704 <state_get>
 801d82c:	47a0      	blx	r4
        // Monitor for any new input stream data or external events (queries, buttons, alarms) to exit.
        if((hal.stream.get_rx_buffer_free() != rx_initial) || sys.rt_exec_state || sys.rt_exec_alarm ) {
 801d82e:	4b12      	ldr	r3, [pc, #72]	@ (801d878 <sleep_execute+0x70>)
 801d830:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801d834:	4798      	blx	r3
 801d836:	42a8      	cmp	r0, r5
 801d838:	d110      	bne.n	801d85c <sleep_execute+0x54>
 801d83a:	4b11      	ldr	r3, [pc, #68]	@ (801d880 <sleep_execute+0x78>)
 801d83c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d83e:	b96b      	cbnz	r3, 801d85c <sleep_execute+0x54>
 801d840:	4b0f      	ldr	r3, [pc, #60]	@ (801d880 <sleep_execute+0x78>)
 801d842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d844:	b953      	cbnz	r3, 801d85c <sleep_execute+0x54>
            // Disable sleep timeout and return to normal operation.
            slumber = false;
            task_delete(fall_asleep, NULL);
            return;
        }
    } while(slumber);
 801d846:	4b0b      	ldr	r3, [pc, #44]	@ (801d874 <sleep_execute+0x6c>)
 801d848:	781b      	ldrb	r3, [r3, #0]
 801d84a:	2b00      	cmp	r3, #0
 801d84c:	d1ea      	bne.n	801d824 <sleep_execute+0x1c>

    // If reached, sleep counter has expired. Execute sleep procedures.
    // Notify user that Grbl has timed out and will be parking.
    // To exit sleep, resume or reset. Either way, the job will not be recoverable.
    system_set_exec_state_flag(EXEC_SLEEP);
 801d84e:	4b0a      	ldr	r3, [pc, #40]	@ (801d878 <sleep_execute+0x70>)
 801d850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d852:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801d856:	480b      	ldr	r0, [pc, #44]	@ (801d884 <sleep_execute+0x7c>)
 801d858:	4798      	blx	r3
 801d85a:	e005      	b.n	801d868 <sleep_execute+0x60>
            slumber = false;
 801d85c:	2100      	movs	r1, #0
 801d85e:	4b05      	ldr	r3, [pc, #20]	@ (801d874 <sleep_execute+0x6c>)
 801d860:	7019      	strb	r1, [r3, #0]
            task_delete(fall_asleep, NULL);
 801d862:	4803      	ldr	r0, [pc, #12]	@ (801d870 <sleep_execute+0x68>)
 801d864:	f7f3 fed8 	bl	8011618 <task_delete>
}
 801d868:	bd38      	pop	{r3, r4, r5, pc}
 801d86a:	bf00      	nop
 801d86c:	000493e0 	.word	0x000493e0
 801d870:	0801d7fd 	.word	0x0801d7fd
 801d874:	20001d34 	.word	0x20001d34
 801d878:	200011ac 	.word	0x200011ac
 801d87c:	20001394 	.word	0x20001394
 801d880:	2000148c 	.word	0x2000148c
 801d884:	200014d4 	.word	0x200014d4

0801d888 <sleep_check>:
// Checks running conditions for sleep. If satisfied, enables sleep timeout and executes
// sleep mode upon elapse.
// NOTE: Sleep procedures can be blocking, since grblHAL isn't receiving any commands, nor moving.
// Hence, make sure any valid running state that executes the sleep timer is not one that is moving.
void sleep_check (void)
{
 801d888:	b508      	push	{r3, lr}
    static uint32_t last_check = 0;

    if(hal.get_elapsed_ticks() - last_check < 50)
 801d88a:	4b1e      	ldr	r3, [pc, #120]	@ (801d904 <sleep_check+0x7c>)
 801d88c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 801d890:	4798      	blx	r3
 801d892:	4b1d      	ldr	r3, [pc, #116]	@ (801d908 <sleep_check+0x80>)
 801d894:	681b      	ldr	r3, [r3, #0]
 801d896:	1ac0      	subs	r0, r0, r3
 801d898:	2831      	cmp	r0, #49	@ 0x31
 801d89a:	d917      	bls.n	801d8cc <sleep_check+0x44>
        return;

    last_check = hal.get_elapsed_ticks();
 801d89c:	4b19      	ldr	r3, [pc, #100]	@ (801d904 <sleep_check+0x7c>)
 801d89e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 801d8a2:	4798      	blx	r3
 801d8a4:	4b18      	ldr	r3, [pc, #96]	@ (801d908 <sleep_check+0x80>)
 801d8a6:	6018      	str	r0, [r3, #0]

    // The sleep execution feature will continue only if the machine is in an IDLE or HOLD state and
    // has any powered components enabled.
    // NOTE: With overrides or in laser mode, modal spindle and coolant state are not guaranteed. Need
    // to directly monitor and record running state during parking to ensure proper function.
    if (!(slumber || sys.steppers_deenergize || sys.flags.auto_reporting) && (gc_state.modal.spindle.state.value || gc_state.modal.coolant.value)) {
 801d8a8:	4b18      	ldr	r3, [pc, #96]	@ (801d90c <sleep_check+0x84>)
 801d8aa:	781b      	ldrb	r3, [r3, #0]
 801d8ac:	b973      	cbnz	r3, 801d8cc <sleep_check+0x44>
 801d8ae:	4b18      	ldr	r3, [pc, #96]	@ (801d910 <sleep_check+0x88>)
 801d8b0:	799b      	ldrb	r3, [r3, #6]
 801d8b2:	b95b      	cbnz	r3, 801d8cc <sleep_check+0x44>
 801d8b4:	4b16      	ldr	r3, [pc, #88]	@ (801d910 <sleep_check+0x88>)
 801d8b6:	7ddb      	ldrb	r3, [r3, #23]
 801d8b8:	f013 0f02 	tst.w	r3, #2
 801d8bc:	d106      	bne.n	801d8cc <sleep_check+0x44>
 801d8be:	4b15      	ldr	r3, [pc, #84]	@ (801d914 <sleep_check+0x8c>)
 801d8c0:	699b      	ldr	r3, [r3, #24]
 801d8c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801d8c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801d8ca:	b903      	cbnz	r3, 801d8ce <sleep_check+0x46>
                if(sys.parking_state == Parking_DoorAjar)
                    sleep_execute();
                break;
        }
    }
}
 801d8cc:	bd08      	pop	{r3, pc}
        switch(state_get()) {
 801d8ce:	f000 ff19 	bl	801e704 <state_get>
 801d8d2:	2810      	cmp	r0, #16
 801d8d4:	d006      	beq.n	801d8e4 <sleep_check+0x5c>
 801d8d6:	2840      	cmp	r0, #64	@ 0x40
 801d8d8:	d00c      	beq.n	801d8f4 <sleep_check+0x6c>
 801d8da:	2800      	cmp	r0, #0
 801d8dc:	d1f6      	bne.n	801d8cc <sleep_check+0x44>
                sleep_execute();
 801d8de:	f7ff ff93 	bl	801d808 <sleep_execute>
                break;
 801d8e2:	e7f3      	b.n	801d8cc <sleep_check+0x44>
                if(sys.holding_state == Hold_Complete)
 801d8e4:	4b0a      	ldr	r3, [pc, #40]	@ (801d910 <sleep_check+0x88>)
 801d8e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801d8ea:	2b01      	cmp	r3, #1
 801d8ec:	d1ee      	bne.n	801d8cc <sleep_check+0x44>
                    sleep_execute();
 801d8ee:	f7ff ff8b 	bl	801d808 <sleep_execute>
 801d8f2:	e7eb      	b.n	801d8cc <sleep_check+0x44>
                if(sys.parking_state == Parking_DoorAjar)
 801d8f4:	4b06      	ldr	r3, [pc, #24]	@ (801d910 <sleep_check+0x88>)
 801d8f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801d8fa:	2b01      	cmp	r3, #1
 801d8fc:	d1e6      	bne.n	801d8cc <sleep_check+0x44>
                    sleep_execute();
 801d8fe:	f7ff ff83 	bl	801d808 <sleep_execute>
 801d902:	e7e3      	b.n	801d8cc <sleep_check+0x44>
 801d904:	200011ac 	.word	0x200011ac
 801d908:	20001d30 	.word	0x20001d30
 801d90c:	20001d34 	.word	0x20001d34
 801d910:	2000148c 	.word	0x2000148c
 801d914:	20000ee4 	.word	0x20000ee4

0801d918 <null_set_state>:
static void null_set_state (spindle_ptrs_t *spindle, spindle_state_t state, float rpm)
{
    UNUSED(spindle);
    UNUSED(state);
    UNUSED(rpm);
}
 801d918:	4770      	bx	lr

0801d91a <null_get_state>:
static spindle_state_t null_get_state (spindle_ptrs_t *spindle)
{
    UNUSED(spindle);

    return (spindle_state_t){0};
}
 801d91a:	f04f 0000 	mov.w	r0, #0
 801d91e:	4770      	bx	lr

0801d920 <null_update_pwm>:
// Sets spindle speed
static void null_update_pwm (spindle_ptrs_t *spindle, uint_fast16_t pwm_value)
{
    UNUSED(spindle);
    UNUSED(pwm_value);
}
 801d920:	4770      	bx	lr

0801d922 <null_get_pwm>:
{
    UNUSED(spindle);
    UNUSED(rpm);

    return 0;
}
 801d922:	2000      	movs	r0, #0
 801d924:	4770      	bx	lr

0801d926 <null_update_rpm>:

static void null_update_rpm (spindle_ptrs_t *spindle, float rpm)
{
    UNUSED(spindle);
    UNUSED(rpm);
}
 801d926:	4770      	bx	lr

0801d928 <spindle_activate>:
{
 801d928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d92c:	b090      	sub	sp, #64	@ 0x40
 801d92e:	4604      	mov	r4, r0
 801d930:	460e      	mov	r6, r1
    if(pwm_spindle && pwm_spindle->cfg->config && pwm_spindle != &spindles[spindle_id]) {
 801d932:	4b95      	ldr	r3, [pc, #596]	@ (801db88 <spindle_activate+0x260>)
 801d934:	6818      	ldr	r0, [r3, #0]
 801d936:	b338      	cbz	r0, 801d988 <spindle_activate+0x60>
 801d938:	6803      	ldr	r3, [r0, #0]
 801d93a:	69db      	ldr	r3, [r3, #28]
 801d93c:	b323      	cbz	r3, 801d988 <spindle_activate+0x60>
 801d93e:	224c      	movs	r2, #76	@ 0x4c
 801d940:	4b92      	ldr	r3, [pc, #584]	@ (801db8c <spindle_activate+0x264>)
 801d942:	fb02 3304 	mla	r3, r2, r4, r3
 801d946:	4298      	cmp	r0, r3
 801d948:	d01e      	beq.n	801d988 <spindle_activate+0x60>
        if(!pwm_spindle->hal.cap.rpm_range_locked) {
 801d94a:	f990 300e 	ldrsb.w	r3, [r0, #14]
 801d94e:	2b00      	cmp	r3, #0
 801d950:	db04      	blt.n	801d95c <spindle_activate+0x34>
            pwm_spindle->hal.rpm_min = settings.spindle.rpm_min;
 801d952:	4b8f      	ldr	r3, [pc, #572]	@ (801db90 <spindle_activate+0x268>)
 801d954:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801d956:	6182      	str	r2, [r0, #24]
            pwm_spindle->hal.rpm_max = settings.spindle.rpm_max;
 801d958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d95a:	61c3      	str	r3, [r0, #28]
        if((pwm_spindle->init_ok = pwm_spindle->hal.config == NULL || pwm_spindle->hal.config(&pwm_spindle->hal)))
 801d95c:	6a03      	ldr	r3, [r0, #32]
 801d95e:	2b00      	cmp	r3, #0
 801d960:	f000 80da 	beq.w	801db18 <spindle_activate+0x1f0>
 801d964:	3004      	adds	r0, #4
 801d966:	4798      	blx	r3
 801d968:	2800      	cmp	r0, #0
 801d96a:	f040 80d7 	bne.w	801db1c <spindle_activate+0x1f4>
 801d96e:	2300      	movs	r3, #0
 801d970:	4a85      	ldr	r2, [pc, #532]	@ (801db88 <spindle_activate+0x260>)
 801d972:	6810      	ldr	r0, [r2, #0]
 801d974:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
 801d978:	b133      	cbz	r3, 801d988 <spindle_activate+0x60>
            pwm_spindle->hal.set_state(&pwm_spindle->hal, (spindle_state_t){0}, 0.0f);
 801d97a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801d97c:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 801db94 <spindle_activate+0x26c>
 801d980:	f04f 0100 	mov.w	r1, #0
 801d984:	3004      	adds	r0, #4
 801d986:	4798      	blx	r3
    pwm_spindle = NULL;
 801d988:	4b7f      	ldr	r3, [pc, #508]	@ (801db88 <spindle_activate+0x260>)
 801d98a:	2200      	movs	r2, #0
 801d98c:	601a      	str	r2, [r3, #0]
    if((ok = spindle_id >= 0 && spindle_id < n_spindle && !!spindles[spindle_id].cfg)) {
 801d98e:	4294      	cmp	r4, r2
 801d990:	f2c0 80f1 	blt.w	801db76 <spindle_activate+0x24e>
 801d994:	4b80      	ldr	r3, [pc, #512]	@ (801db98 <spindle_activate+0x270>)
 801d996:	781b      	ldrb	r3, [r3, #0]
 801d998:	429c      	cmp	r4, r3
 801d99a:	f280 80f1 	bge.w	801db80 <spindle_activate+0x258>
 801d99e:	234c      	movs	r3, #76	@ 0x4c
 801d9a0:	fb04 f303 	mul.w	r3, r4, r3
 801d9a4:	4a79      	ldr	r2, [pc, #484]	@ (801db8c <spindle_activate+0x264>)
 801d9a6:	58d3      	ldr	r3, [r2, r3]
 801d9a8:	2b00      	cmp	r3, #0
 801d9aa:	f000 80eb 	beq.w	801db84 <spindle_activate+0x25c>
        if(sys_spindle[spindle_num].enabled && sys_spindle[spindle_num].hal.id != spindle_id && sys_spindle[spindle_num].hal.set_state)
 801d9ae:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
 801d9b2:	4b7a      	ldr	r3, [pc, #488]	@ (801db9c <spindle_activate+0x274>)
 801d9b4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801d9b8:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 801d9bc:	b16b      	cbz	r3, 801d9da <spindle_activate+0xb2>
 801d9be:	4b77      	ldr	r3, [pc, #476]	@ (801db9c <spindle_activate+0x274>)
 801d9c0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801d9c4:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 801d9c8:	42a3      	cmp	r3, r4
 801d9ca:	d006      	beq.n	801d9da <spindle_activate+0xb2>
 801d9cc:	4b73      	ldr	r3, [pc, #460]	@ (801db9c <spindle_activate+0x274>)
 801d9ce:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801d9d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d9d4:	b10b      	cbz	r3, 801d9da <spindle_activate+0xb2>
            gc_spindle_off(); // TODO: switch off only the default spindle?
 801d9d6:	f7ef f9f1 	bl	800cdbc <gc_spindle_off>
        if(!spindle->hal.cap.rpm_range_locked) {
 801d9da:	4b6c      	ldr	r3, [pc, #432]	@ (801db8c <spindle_activate+0x264>)
 801d9dc:	224c      	movs	r2, #76	@ 0x4c
 801d9de:	fb02 3304 	mla	r3, r2, r4, r3
 801d9e2:	f993 300e 	ldrsb.w	r3, [r3, #14]
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	db08      	blt.n	801d9fc <spindle_activate+0xd4>
            spindle->hal.rpm_min = settings.spindle.rpm_min;
 801d9ea:	4a69      	ldr	r2, [pc, #420]	@ (801db90 <spindle_activate+0x268>)
 801d9ec:	6f91      	ldr	r1, [r2, #120]	@ 0x78
 801d9ee:	4b67      	ldr	r3, [pc, #412]	@ (801db8c <spindle_activate+0x264>)
 801d9f0:	204c      	movs	r0, #76	@ 0x4c
 801d9f2:	fb00 3304 	mla	r3, r0, r4, r3
 801d9f6:	6199      	str	r1, [r3, #24]
            spindle->hal.rpm_max = settings.spindle.rpm_max;
 801d9f8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801d9fa:	61da      	str	r2, [r3, #28]
        if(!spindle->init_ok)
 801d9fc:	4b63      	ldr	r3, [pc, #396]	@ (801db8c <spindle_activate+0x264>)
 801d9fe:	224c      	movs	r2, #76	@ 0x4c
 801da00:	fb02 3304 	mla	r3, r2, r4, r3
 801da04:	f893 5048 	ldrb.w	r5, [r3, #72]	@ 0x48
 801da08:	b99d      	cbnz	r5, 801da32 <spindle_activate+0x10a>
            ok = spindle->init_ok = spindle->hal.config == NULL || spindle->hal.config(&spindle->hal);
 801da0a:	4b60      	ldr	r3, [pc, #384]	@ (801db8c <spindle_activate+0x264>)
 801da0c:	fb02 3304 	mla	r3, r2, r4, r3
 801da10:	6a1b      	ldr	r3, [r3, #32]
 801da12:	2b00      	cmp	r3, #0
 801da14:	f000 8084 	beq.w	801db20 <spindle_activate+0x1f8>
 801da18:	485c      	ldr	r0, [pc, #368]	@ (801db8c <spindle_activate+0x264>)
 801da1a:	fb02 0004 	mla	r0, r2, r4, r0
 801da1e:	3004      	adds	r0, #4
 801da20:	4798      	blx	r3
 801da22:	2800      	cmp	r0, #0
 801da24:	d17e      	bne.n	801db24 <spindle_activate+0x1fc>
 801da26:	4b59      	ldr	r3, [pc, #356]	@ (801db8c <spindle_activate+0x264>)
 801da28:	224c      	movs	r2, #76	@ 0x4c
 801da2a:	fb02 3304 	mla	r3, r2, r4, r3
 801da2e:	f883 5048 	strb.w	r5, [r3, #72]	@ 0x48
        if(ok) {
 801da32:	2d00      	cmp	r5, #0
 801da34:	f000 80a0 	beq.w	801db78 <spindle_activate+0x250>
            memcpy(&spindle_hal, &spindle->hal, sizeof(spindle_ptrs_t));
 801da38:	224c      	movs	r2, #76	@ 0x4c
 801da3a:	4b54      	ldr	r3, [pc, #336]	@ (801db8c <spindle_activate+0x264>)
 801da3c:	fb02 3804 	mla	r8, r2, r4, r3
 801da40:	f108 0c04 	add.w	ip, r8, #4
 801da44:	466f      	mov	r7, sp
 801da46:	f108 0844 	add.w	r8, r8, #68	@ 0x44
 801da4a:	46be      	mov	lr, r7
 801da4c:	f8dc 0000 	ldr.w	r0, [ip]
 801da50:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801da54:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801da58:	f8dc 300c 	ldr.w	r3, [ip, #12]
 801da5c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801da60:	f10c 0c10 	add.w	ip, ip, #16
 801da64:	4677      	mov	r7, lr
 801da66:	45c4      	cmp	ip, r8
 801da68:	d1ef      	bne.n	801da4a <spindle_activate+0x122>
            if(spindle->cfg->get_data == NULL) {
 801da6a:	234c      	movs	r3, #76	@ 0x4c
 801da6c:	fb04 f303 	mul.w	r3, r4, r3
 801da70:	4a46      	ldr	r2, [pc, #280]	@ (801db8c <spindle_activate+0x264>)
 801da72:	58d3      	ldr	r3, [r2, r3]
 801da74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801da76:	2a00      	cmp	r2, #0
 801da78:	d056      	beq.n	801db28 <spindle_activate+0x200>
            spindle_hal.cap.laser &= settings.mode == Mode_Laser;
 801da7a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 801da7e:	4a44      	ldr	r2, [pc, #272]	@ (801db90 <spindle_activate+0x268>)
 801da80:	7e12      	ldrb	r2, [r2, #24]
 801da82:	2a01      	cmp	r2, #1
 801da84:	bf14      	ite	ne
 801da86:	2200      	movne	r2, #0
 801da88:	2201      	moveq	r2, #1
 801da8a:	ea02 02d3 	and.w	r2, r2, r3, lsr #3
 801da8e:	f362 03c3 	bfi	r3, r2, #3, #1
 801da92:	f88d 300a 	strb.w	r3, [sp, #10]
            if(grbl.on_spindle_select)
 801da96:	4b42      	ldr	r3, [pc, #264]	@ (801dba0 <spindle_activate+0x278>)
 801da98:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801da9c:	b113      	cbz	r3, 801daa4 <spindle_activate+0x17c>
                ok = grbl.on_spindle_select(&spindle_hal);
 801da9e:	4668      	mov	r0, sp
 801daa0:	4798      	blx	r3
 801daa2:	4605      	mov	r5, r0
            if(ok) {
 801daa4:	2d00      	cmp	r5, #0
 801daa6:	d067      	beq.n	801db78 <spindle_activate+0x250>
                sys_spindle[spindle_num].enabled = true;
 801daa8:	4a3c      	ldr	r2, [pc, #240]	@ (801db9c <spindle_activate+0x274>)
 801daaa:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 801daae:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801dab2:	2101      	movs	r1, #1
 801dab4:	f883 106c 	strb.w	r1, [r3, #108]	@ 0x6c
                sys_spindle[spindle_num].param.hal = &sys_spindle[spindle_num].hal;
 801dab8:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 801dabc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801dac0:	f10c 0c28 	add.w	ip, ip, #40	@ 0x28
 801dac4:	4494      	add	ip, r2
 801dac6:	f10c 0c04 	add.w	ip, ip, #4
 801daca:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
                if(sys_spindle[spindle_num].param.override_pct == 0)
 801dace:	68db      	ldr	r3, [r3, #12]
 801dad0:	b933      	cbnz	r3, 801dae0 <spindle_activate+0x1b8>
                    sys_spindle[spindle_num].param.override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE;
 801dad2:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
 801dad6:	4b31      	ldr	r3, [pc, #196]	@ (801db9c <spindle_activate+0x274>)
 801dad8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801dadc:	2264      	movs	r2, #100	@ 0x64
 801dade:	60da      	str	r2, [r3, #12]
                spindle_hal.param = &sys_spindle[spindle_num].param;
 801dae0:	ebc6 01c6 	rsb	r1, r6, r6, lsl #3
 801dae4:	4b2d      	ldr	r3, [pc, #180]	@ (801db9c <spindle_activate+0x274>)
 801dae6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 801daea:	9301      	str	r3, [sp, #4]
                memcpy(&sys_spindle[spindle_num].hal, &spindle_hal, sizeof(spindle_ptrs_t));
 801daec:	466f      	mov	r7, sp
 801daee:	4666      	mov	r6, ip
 801daf0:	f10d 0e40 	add.w	lr, sp, #64	@ 0x40
 801daf4:	463c      	mov	r4, r7
 801daf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801daf8:	6030      	str	r0, [r6, #0]
 801dafa:	6071      	str	r1, [r6, #4]
 801dafc:	60b2      	str	r2, [r6, #8]
 801dafe:	60f3      	str	r3, [r6, #12]
 801db00:	4627      	mov	r7, r4
 801db02:	3610      	adds	r6, #16
 801db04:	4574      	cmp	r4, lr
 801db06:	d1f5      	bne.n	801daf4 <spindle_activate+0x1cc>
                if(grbl.on_spindle_selected)
 801db08:	4b25      	ldr	r3, [pc, #148]	@ (801dba0 <spindle_activate+0x278>)
 801db0a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 801db0e:	2b00      	cmp	r3, #0
 801db10:	d032      	beq.n	801db78 <spindle_activate+0x250>
                    grbl.on_spindle_selected(&sys_spindle[spindle_num].hal);
 801db12:	4660      	mov	r0, ip
 801db14:	4798      	blx	r3
 801db16:	e02f      	b.n	801db78 <spindle_activate+0x250>
        if((pwm_spindle->init_ok = pwm_spindle->hal.config == NULL || pwm_spindle->hal.config(&pwm_spindle->hal)))
 801db18:	2301      	movs	r3, #1
 801db1a:	e729      	b.n	801d970 <spindle_activate+0x48>
 801db1c:	2301      	movs	r3, #1
 801db1e:	e727      	b.n	801d970 <spindle_activate+0x48>
            ok = spindle->init_ok = spindle->hal.config == NULL || spindle->hal.config(&spindle->hal);
 801db20:	2501      	movs	r5, #1
 801db22:	e780      	b.n	801da26 <spindle_activate+0xfe>
 801db24:	2501      	movs	r5, #1
 801db26:	e77e      	b.n	801da26 <spindle_activate+0xfe>
                if(settings.offset_lock.encoder_spindle == spindle_id) {
 801db28:	4a19      	ldr	r2, [pc, #100]	@ (801db90 <spindle_activate+0x268>)
 801db2a:	f892 2102 	ldrb.w	r2, [r2, #258]	@ 0x102
 801db2e:	ebb4 0fd2 	cmp.w	r4, r2, lsr #3
 801db32:	d00d      	beq.n	801db50 <spindle_activate+0x228>
                    spindle_hal.get_data = NULL;
 801db34:	2200      	movs	r2, #0
 801db36:	920e      	str	r2, [sp, #56]	@ 0x38
                    spindle_hal.reset_data = NULL;
 801db38:	920f      	str	r2, [sp, #60]	@ 0x3c
                    if(!spindle->cfg->cap.at_speed)
 801db3a:	7a9b      	ldrb	r3, [r3, #10]
 801db3c:	f013 0f04 	tst.w	r3, #4
 801db40:	d19b      	bne.n	801da7a <spindle_activate+0x152>
                        spindle_hal.cap.at_speed = Off;
 801db42:	f89d 300a 	ldrb.w	r3, [sp, #10]
 801db46:	f36f 0382 	bfc	r3, #2, #1
 801db4a:	f88d 300a 	strb.w	r3, [sp, #10]
 801db4e:	e794      	b.n	801da7a <spindle_activate+0x152>
                    spindle_hal.get_data = hal.spindle_data.get;
 801db50:	4914      	ldr	r1, [pc, #80]	@ (801dba4 <spindle_activate+0x27c>)
 801db52:	6f8a      	ldr	r2, [r1, #120]	@ 0x78
 801db54:	920e      	str	r2, [sp, #56]	@ 0x38
                    spindle_hal.reset_data = hal.spindle_data.reset;
 801db56:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 801db58:	910f      	str	r1, [sp, #60]	@ 0x3c
                    if(!spindle->cfg->cap.at_speed)
 801db5a:	7a9b      	ldrb	r3, [r3, #10]
 801db5c:	f013 0f04 	tst.w	r3, #4
 801db60:	d18b      	bne.n	801da7a <spindle_activate+0x152>
                        spindle_hal.cap.at_speed = !!spindle_hal.get_data;
 801db62:	3a00      	subs	r2, #0
 801db64:	bf18      	it	ne
 801db66:	2201      	movne	r2, #1
 801db68:	f89d 300a 	ldrb.w	r3, [sp, #10]
 801db6c:	f362 0382 	bfi	r3, r2, #2, #1
 801db70:	f88d 300a 	strb.w	r3, [sp, #10]
 801db74:	e781      	b.n	801da7a <spindle_activate+0x152>
    if((ok = spindle_id >= 0 && spindle_id < n_spindle && !!spindles[spindle_id].cfg)) {
 801db76:	2500      	movs	r5, #0
}
 801db78:	4628      	mov	r0, r5
 801db7a:	b010      	add	sp, #64	@ 0x40
 801db7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((ok = spindle_id >= 0 && spindle_id < n_spindle && !!spindles[spindle_id].cfg)) {
 801db80:	2500      	movs	r5, #0
 801db82:	e7f9      	b.n	801db78 <spindle_activate+0x250>
 801db84:	2500      	movs	r5, #0
 801db86:	e7f7      	b.n	801db78 <spindle_activate+0x250>
 801db88:	20001d38 	.word	0x20001d38
 801db8c:	20001d3c 	.word	0x20001d3c
 801db90:	20001bc4 	.word	0x20001bc4
 801db94:	00000000 	.word	0x00000000
 801db98:	20001df8 	.word	0x20001df8
 801db9c:	20001d88 	.word	0x20001d88
 801dba0:	20001394 	.word	0x20001394
 801dba4:	200011ac 	.word	0x200011ac

0801dba8 <spindle_get_num>:
{
 801dba8:	b510      	push	{r4, lr}
 801dbaa:	4604      	mov	r4, r0
        if((setting = setting_get_details(idx == 0 ? Setting_SpindleType : (setting_id_t)(Setting_SpindleEnable0 + idx), NULL))) {
 801dbac:	2100      	movs	r1, #0
 801dbae:	f240 108b 	movw	r0, #395	@ 0x18b
 801dbb2:	f7ff fa65 	bl	801d080 <setting_get_details>
 801dbb6:	b148      	cbz	r0, 801dbcc <spindle_get_num+0x24>
            if(setting_get_int_value(setting, 0) == spindle_id)
 801dbb8:	2100      	movs	r1, #0
 801dbba:	f7ff f869 	bl	801cc90 <setting_get_int_value>
 801dbbe:	42a0      	cmp	r0, r4
 801dbc0:	d101      	bne.n	801dbc6 <spindle_get_num+0x1e>
                spindle_num = idx;
 801dbc2:	2000      	movs	r0, #0
}
 801dbc4:	bd10      	pop	{r4, pc}
            if(setting_get_int_value(setting, 0) == spindle_id)
 801dbc6:	f04f 30ff 	mov.w	r0, #4294967295
 801dbca:	e7fb      	b.n	801dbc4 <spindle_get_num+0x1c>
 801dbcc:	f04f 30ff 	mov.w	r0, #4294967295
 801dbd0:	e7f8      	b.n	801dbc4 <spindle_get_num+0x1c>
	...

0801dbd4 <spindle_register>:
{
 801dbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dbd6:	4604      	mov	r4, r0
 801dbd8:	460e      	mov	r6, r1
    if(n_spindle == 1 && spindles[0].cfg->type == SpindleType_Null)
 801dbda:	4b33      	ldr	r3, [pc, #204]	@ (801dca8 <spindle_register+0xd4>)
 801dbdc:	781b      	ldrb	r3, [r3, #0]
 801dbde:	2b01      	cmp	r3, #1
 801dbe0:	d032      	beq.n	801dc48 <spindle_register+0x74>
    if(n_spindle < N_SPINDLE && settings_add_spindle_type(name)) {
 801dbe2:	4b31      	ldr	r3, [pc, #196]	@ (801dca8 <spindle_register+0xd4>)
 801dbe4:	781b      	ldrb	r3, [r3, #0]
 801dbe6:	2b00      	cmp	r3, #0
 801dbe8:	d158      	bne.n	801dc9c <spindle_register+0xc8>
 801dbea:	4630      	mov	r0, r6
 801dbec:	f7ff fce8 	bl	801d5c0 <settings_add_spindle_type>
 801dbf0:	2800      	cmp	r0, #0
 801dbf2:	d056      	beq.n	801dca2 <spindle_register+0xce>
        spindles[n_spindle].cfg = spindle;
 801dbf4:	4b2c      	ldr	r3, [pc, #176]	@ (801dca8 <spindle_register+0xd4>)
 801dbf6:	781d      	ldrb	r5, [r3, #0]
 801dbf8:	492c      	ldr	r1, [pc, #176]	@ (801dcac <spindle_register+0xd8>)
 801dbfa:	224c      	movs	r2, #76	@ 0x4c
 801dbfc:	fb05 f202 	mul.w	r2, r5, r2
 801dc00:	188b      	adds	r3, r1, r2
 801dc02:	508c      	str	r4, [r1, r2]
        spindles[n_spindle].name = name;
 801dc04:	645e      	str	r6, [r3, #68]	@ 0x44
        memcpy(&spindles[n_spindle].hal, spindles[n_spindle].cfg, sizeof(spindle_ptrs_t));
 801dc06:	4622      	mov	r2, r4
 801dc08:	3304      	adds	r3, #4
 801dc0a:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 801dc0e:	6817      	ldr	r7, [r2, #0]
 801dc10:	6856      	ldr	r6, [r2, #4]
 801dc12:	6890      	ldr	r0, [r2, #8]
 801dc14:	68d1      	ldr	r1, [r2, #12]
 801dc16:	601f      	str	r7, [r3, #0]
 801dc18:	605e      	str	r6, [r3, #4]
 801dc1a:	6098      	str	r0, [r3, #8]
 801dc1c:	60d9      	str	r1, [r3, #12]
 801dc1e:	3210      	adds	r2, #16
 801dc20:	3310      	adds	r3, #16
 801dc22:	4562      	cmp	r2, ip
 801dc24:	d1f3      	bne.n	801dc0e <spindle_register+0x3a>
        spindles[n_spindle].hal.id = n_spindle;
 801dc26:	b26f      	sxtb	r7, r5
 801dc28:	4b20      	ldr	r3, [pc, #128]	@ (801dcac <spindle_register+0xd8>)
 801dc2a:	224c      	movs	r2, #76	@ 0x4c
 801dc2c:	fb02 3305 	mla	r3, r2, r5, r3
 801dc30:	711f      	strb	r7, [r3, #4]
        if(spindle->type == SpindleType_PWM && pwm_spindle == NULL) {
 801dc32:	7a23      	ldrb	r3, [r4, #8]
 801dc34:	b913      	cbnz	r3, 801dc3c <spindle_register+0x68>
 801dc36:	4b1e      	ldr	r3, [pc, #120]	@ (801dcb0 <spindle_register+0xdc>)
 801dc38:	681b      	ldr	r3, [r3, #0]
 801dc3a:	b173      	cbz	r3, 801dc5a <spindle_register+0x86>
        if(n_spindle == 0)
 801dc3c:	b1d5      	cbz	r5, 801dc74 <spindle_register+0xa0>
        return n_spindle++;
 801dc3e:	3501      	adds	r5, #1
 801dc40:	4b19      	ldr	r3, [pc, #100]	@ (801dca8 <spindle_register+0xd4>)
 801dc42:	701d      	strb	r5, [r3, #0]
}
 801dc44:	4638      	mov	r0, r7
 801dc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(n_spindle == 1 && spindles[0].cfg->type == SpindleType_Null)
 801dc48:	4b18      	ldr	r3, [pc, #96]	@ (801dcac <spindle_register+0xd8>)
 801dc4a:	681b      	ldr	r3, [r3, #0]
 801dc4c:	7a1b      	ldrb	r3, [r3, #8]
 801dc4e:	2b05      	cmp	r3, #5
 801dc50:	d1c7      	bne.n	801dbe2 <spindle_register+0xe>
        n_spindle = 0;
 801dc52:	4b15      	ldr	r3, [pc, #84]	@ (801dca8 <spindle_register+0xd4>)
 801dc54:	2200      	movs	r2, #0
 801dc56:	701a      	strb	r2, [r3, #0]
 801dc58:	e7c3      	b.n	801dbe2 <spindle_register+0xe>
            pwm_spindle = &spindles[n_spindle];
 801dc5a:	4b14      	ldr	r3, [pc, #80]	@ (801dcac <spindle_register+0xd8>)
 801dc5c:	fb02 3305 	mla	r3, r2, r5, r3
 801dc60:	4a13      	ldr	r2, [pc, #76]	@ (801dcb0 <spindle_register+0xdc>)
 801dc62:	6013      	str	r3, [r2, #0]
            hal.driver_cap.pwm_spindle = On;
 801dc64:	4a13      	ldr	r2, [pc, #76]	@ (801dcb4 <spindle_register+0xe0>)
 801dc66:	f892 31da 	ldrb.w	r3, [r2, #474]	@ 0x1da
 801dc6a:	f043 0310 	orr.w	r3, r3, #16
 801dc6e:	f882 31da 	strb.w	r3, [r2, #474]	@ 0x1da
 801dc72:	e7e3      	b.n	801dc3c <spindle_register+0x68>
            memcpy(&sys_spindle[0].hal, spindle, sizeof(spindle_ptrs_t));
 801dc74:	46a4      	mov	ip, r4
 801dc76:	4e10      	ldr	r6, [pc, #64]	@ (801dcb8 <spindle_register+0xe4>)
 801dc78:	3440      	adds	r4, #64	@ 0x40
 801dc7a:	46b6      	mov	lr, r6
 801dc7c:	f8dc 0000 	ldr.w	r0, [ip]
 801dc80:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801dc84:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801dc88:	f8dc 300c 	ldr.w	r3, [ip, #12]
 801dc8c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801dc90:	f10c 0c10 	add.w	ip, ip, #16
 801dc94:	4676      	mov	r6, lr
 801dc96:	45a4      	cmp	ip, r4
 801dc98:	d1ef      	bne.n	801dc7a <spindle_register+0xa6>
 801dc9a:	e7d0      	b.n	801dc3e <spindle_register+0x6a>
    return -1;
 801dc9c:	f04f 37ff 	mov.w	r7, #4294967295
 801dca0:	e7d0      	b.n	801dc44 <spindle_register+0x70>
 801dca2:	f04f 37ff 	mov.w	r7, #4294967295
 801dca6:	e7cd      	b.n	801dc44 <spindle_register+0x70>
 801dca8:	20001df8 	.word	0x20001df8
 801dcac:	20001d3c 	.word	0x20001d3c
 801dcb0:	20001d38 	.word	0x20001d38
 801dcb4:	200011ac 	.word	0x200011ac
 801dcb8:	20001db4 	.word	0x20001db4

0801dcbc <spindle_get_caps>:
{
 801dcbc:	4601      	mov	r1, r0
    spindle_cap_t caps = {0};
 801dcbe:	f04f 0000 	mov.w	r0, #0
    uint_fast8_t idx = n_spindle;
 801dcc2:	4b0e      	ldr	r3, [pc, #56]	@ (801dcfc <spindle_get_caps+0x40>)
 801dcc4:	781b      	ldrb	r3, [r3, #0]
    if(n_spindle) do {
 801dcc6:	b1c3      	cbz	r3, 801dcfa <spindle_get_caps+0x3e>
{
 801dcc8:	b410      	push	{r4}
 801dcca:	e007      	b.n	801dcdc <spindle_get_caps+0x20>
        caps.value |= (active ? spindles[idx].hal.cap.value : spindles[idx].cfg->cap.value);
 801dccc:	4a0c      	ldr	r2, [pc, #48]	@ (801dd00 <spindle_get_caps+0x44>)
 801dcce:	244c      	movs	r4, #76	@ 0x4c
 801dcd0:	fb04 2203 	mla	r2, r4, r3, r2
 801dcd4:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 801dcd8:	4310      	orrs	r0, r2
    } while(idx);
 801dcda:	b15b      	cbz	r3, 801dcf4 <spindle_get_caps+0x38>
        --idx;
 801dcdc:	3b01      	subs	r3, #1
        caps.value |= (active ? spindles[idx].hal.cap.value : spindles[idx].cfg->cap.value);
 801dcde:	b280      	uxth	r0, r0
 801dce0:	2900      	cmp	r1, #0
 801dce2:	d1f3      	bne.n	801dccc <spindle_get_caps+0x10>
 801dce4:	224c      	movs	r2, #76	@ 0x4c
 801dce6:	fb03 f202 	mul.w	r2, r3, r2
 801dcea:	4c05      	ldr	r4, [pc, #20]	@ (801dd00 <spindle_get_caps+0x44>)
 801dcec:	58a2      	ldr	r2, [r4, r2]
 801dcee:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801dcf2:	e7f1      	b.n	801dcd8 <spindle_get_caps+0x1c>
}
 801dcf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dcf8:	4770      	bx	lr
 801dcfa:	4770      	bx	lr
 801dcfc:	20001df8 	.word	0x20001df8
 801dd00:	20001d3c 	.word	0x20001d3c

0801dd04 <spindle_enumerate_spindles>:
    if(callback == NULL || n_spindle == 0)
 801dd04:	2800      	cmp	r0, #0
 801dd06:	d04d      	beq.n	801dda4 <spindle_enumerate_spindles+0xa0>
{
 801dd08:	b570      	push	{r4, r5, r6, lr}
 801dd0a:	b084      	sub	sp, #16
 801dd0c:	460d      	mov	r5, r1
 801dd0e:	4606      	mov	r6, r0
    if(callback == NULL || n_spindle == 0)
 801dd10:	4b26      	ldr	r3, [pc, #152]	@ (801ddac <spindle_enumerate_spindles+0xa8>)
 801dd12:	781b      	ldrb	r3, [r3, #0]
 801dd14:	2b00      	cmp	r3, #0
 801dd16:	d047      	beq.n	801dda8 <spindle_enumerate_spindles+0xa4>
    for(idx = 0; idx < n_spindle; idx++) {
 801dd18:	2400      	movs	r4, #0
 801dd1a:	e03a      	b.n	801dd92 <spindle_enumerate_spindles+0x8e>
        spindle.id = idx;
 801dd1c:	b260      	sxtb	r0, r4
 801dd1e:	f88d 0000 	strb.w	r0, [sp]
        spindle.name = spindles[idx].name;
 801dd22:	4b23      	ldr	r3, [pc, #140]	@ (801ddb0 <spindle_enumerate_spindles+0xac>)
 801dd24:	224c      	movs	r2, #76	@ 0x4c
 801dd26:	fb02 3304 	mla	r3, r2, r4, r3
 801dd2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801dd2c:	9301      	str	r3, [sp, #4]
        spindle.num = spindle_get_num(idx);
 801dd2e:	f7ff ff3b 	bl	801dba8 <spindle_get_num>
 801dd32:	f88d 0001 	strb.w	r0, [sp, #1]
        spindle.enabled = spindle.num != -1;
 801dd36:	1c42      	adds	r2, r0, #1
 801dd38:	bf18      	it	ne
 801dd3a:	2201      	movne	r2, #1
 801dd3c:	f88d 2008 	strb.w	r2, [sp, #8]
        spindle.hal = spindle.enabled && sys_spindle[spindle.num].hal.id == spindle.id ? &sys_spindle[spindle.num].hal : &spindles[idx].hal;
 801dd40:	b152      	cbz	r2, 801dd58 <spindle_enumerate_spindles+0x54>
 801dd42:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 801dd46:	4b1b      	ldr	r3, [pc, #108]	@ (801ddb4 <spindle_enumerate_spindles+0xb0>)
 801dd48:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 801dd4c:	f993 102c 	ldrsb.w	r1, [r3, #44]	@ 0x2c
 801dd50:	f99d 3000 	ldrsb.w	r3, [sp]
 801dd54:	4299      	cmp	r1, r3
 801dd56:	d00d      	beq.n	801dd74 <spindle_enumerate_spindles+0x70>
 801dd58:	214c      	movs	r1, #76	@ 0x4c
 801dd5a:	4b15      	ldr	r3, [pc, #84]	@ (801ddb0 <spindle_enumerate_spindles+0xac>)
 801dd5c:	fb01 3304 	mla	r3, r1, r4, r3
 801dd60:	3304      	adds	r3, #4
 801dd62:	9303      	str	r3, [sp, #12]
        spindle.is_current = spindle.enabled && sys_spindle[0].hal.id == idx;
 801dd64:	b172      	cbz	r2, 801dd84 <spindle_enumerate_spindles+0x80>
 801dd66:	4b13      	ldr	r3, [pc, #76]	@ (801ddb4 <spindle_enumerate_spindles+0xb0>)
 801dd68:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 801dd6c:	42a3      	cmp	r3, r4
 801dd6e:	d017      	beq.n	801dda0 <spindle_enumerate_spindles+0x9c>
 801dd70:	2300      	movs	r3, #0
 801dd72:	e008      	b.n	801dd86 <spindle_enumerate_spindles+0x82>
        spindle.hal = spindle.enabled && sys_spindle[spindle.num].hal.id == spindle.id ? &sys_spindle[spindle.num].hal : &spindles[idx].hal;
 801dd74:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 801dd78:	011b      	lsls	r3, r3, #4
 801dd7a:	3328      	adds	r3, #40	@ 0x28
 801dd7c:	490d      	ldr	r1, [pc, #52]	@ (801ddb4 <spindle_enumerate_spindles+0xb0>)
 801dd7e:	440b      	add	r3, r1
 801dd80:	3304      	adds	r3, #4
 801dd82:	e7ee      	b.n	801dd62 <spindle_enumerate_spindles+0x5e>
        spindle.is_current = spindle.enabled && sys_spindle[0].hal.id == idx;
 801dd84:	2300      	movs	r3, #0
 801dd86:	f88d 3009 	strb.w	r3, [sp, #9]
        callback(&spindle, data);
 801dd8a:	4629      	mov	r1, r5
 801dd8c:	4668      	mov	r0, sp
 801dd8e:	47b0      	blx	r6
    for(idx = 0; idx < n_spindle; idx++) {
 801dd90:	3401      	adds	r4, #1
 801dd92:	4b06      	ldr	r3, [pc, #24]	@ (801ddac <spindle_enumerate_spindles+0xa8>)
 801dd94:	781b      	ldrb	r3, [r3, #0]
 801dd96:	42a3      	cmp	r3, r4
 801dd98:	d8c0      	bhi.n	801dd1c <spindle_enumerate_spindles+0x18>
    return true;
 801dd9a:	2001      	movs	r0, #1
}
 801dd9c:	b004      	add	sp, #16
 801dd9e:	bd70      	pop	{r4, r5, r6, pc}
        spindle.is_current = spindle.enabled && sys_spindle[0].hal.id == idx;
 801dda0:	2301      	movs	r3, #1
 801dda2:	e7f0      	b.n	801dd86 <spindle_enumerate_spindles+0x82>
        return false;
 801dda4:	2000      	movs	r0, #0
}
 801dda6:	4770      	bx	lr
        return false;
 801dda8:	2000      	movs	r0, #0
 801ddaa:	e7f7      	b.n	801dd9c <spindle_enumerate_spindles+0x98>
 801ddac:	20001df8 	.word	0x20001df8
 801ddb0:	20001d3c 	.word	0x20001d3c
 801ddb4:	20001d88 	.word	0x20001d88

0801ddb8 <spindle_is_enabled>:
    if(spindle_num == -1)
 801ddb8:	f1b0 3fff 	cmp.w	r0, #4294967295
 801ddbc:	d002      	beq.n	801ddc4 <spindle_is_enabled+0xc>
    return spindle_num >= 0 && spindle_num < N_SYS_SPINDLE && sys_spindle[spindle_num].enabled;
 801ddbe:	b110      	cbz	r0, 801ddc6 <spindle_is_enabled+0xe>
 801ddc0:	2000      	movs	r0, #0
 801ddc2:	4770      	bx	lr
        spindle_num = 0;
 801ddc4:	2000      	movs	r0, #0
    return spindle_num >= 0 && spindle_num < N_SYS_SPINDLE && sys_spindle[spindle_num].enabled;
 801ddc6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801ddca:	4b05      	ldr	r3, [pc, #20]	@ (801dde0 <spindle_is_enabled+0x28>)
 801ddcc:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801ddd0:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 801ddd4:	b90b      	cbnz	r3, 801ddda <spindle_is_enabled+0x22>
 801ddd6:	2000      	movs	r0, #0
 801ddd8:	4770      	bx	lr
 801ddda:	2001      	movs	r0, #1
}
 801dddc:	4770      	bx	lr
 801ddde:	bf00      	nop
 801dde0:	20001d88 	.word	0x20001d88

0801dde4 <spindle_get>:
    return spindle_num >= 0 && spindle_num < N_SYS_SPINDLE && sys_spindle[spindle_num].enabled ? &sys_spindle[spindle_num].hal : NULL;
 801dde4:	b968      	cbnz	r0, 801de02 <spindle_get+0x1e>
 801dde6:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 801ddea:	4a08      	ldr	r2, [pc, #32]	@ (801de0c <spindle_get+0x28>)
 801ddec:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801ddf0:	f892 206c 	ldrb.w	r2, [r2, #108]	@ 0x6c
 801ddf4:	b13a      	cbz	r2, 801de06 <spindle_get+0x22>
 801ddf6:	0108      	lsls	r0, r1, #4
 801ddf8:	3028      	adds	r0, #40	@ 0x28
 801ddfa:	4b04      	ldr	r3, [pc, #16]	@ (801de0c <spindle_get+0x28>)
 801ddfc:	4418      	add	r0, r3
 801ddfe:	3004      	adds	r0, #4
 801de00:	4770      	bx	lr
 801de02:	2000      	movs	r0, #0
 801de04:	4770      	bx	lr
 801de06:	2000      	movs	r0, #0
}
 801de08:	4770      	bx	lr
 801de0a:	bf00      	nop
 801de0c:	20001d88 	.word	0x20001d88

0801de10 <spindle_add_null>:
/*! \brief Register a null spindle that has no connection to the outside world.
This is done automatically on startup if no spindle can be succesfully enabled.
\returns assigned spindle id as a \ref spindle_id_t if successful, \a -1 if not.
*/
spindle_id_t spindle_add_null (void)
{
 801de10:	b508      	push	{r3, lr}
        .update_pwm = null_update_pwm,
        .update_rpm = null_update_rpm
    };

    bool registered = false;
    uint_fast8_t idx = n_spindle;
 801de12:	4b0d      	ldr	r3, [pc, #52]	@ (801de48 <spindle_add_null+0x38>)
 801de14:	7818      	ldrb	r0, [r3, #0]

    if(idx) do {
 801de16:	b168      	cbz	r0, 801de34 <spindle_add_null+0x24>
        if((registered = spindles[--idx].hal.type == SpindleType_Null))
 801de18:	3801      	subs	r0, #1
 801de1a:	4b0c      	ldr	r3, [pc, #48]	@ (801de4c <spindle_add_null+0x3c>)
 801de1c:	224c      	movs	r2, #76	@ 0x4c
 801de1e:	fb02 3300 	mla	r3, r2, r0, r3
 801de22:	7b1b      	ldrb	r3, [r3, #12]
 801de24:	2b05      	cmp	r3, #5
 801de26:	bf0c      	ite	eq
 801de28:	2301      	moveq	r3, #1
 801de2a:	2300      	movne	r3, #0
 801de2c:	d003      	beq.n	801de36 <spindle_add_null+0x26>
            break;
    } while(idx);
 801de2e:	2800      	cmp	r0, #0
 801de30:	d1f2      	bne.n	801de18 <spindle_add_null+0x8>
 801de32:	e000      	b.n	801de36 <spindle_add_null+0x26>
    bool registered = false;
 801de34:	2300      	movs	r3, #0

    if(!registered)
 801de36:	b10b      	cbz	r3, 801de3c <spindle_add_null+0x2c>
        return spindle_register(&spindle, "NULL");

    return idx;
 801de38:	b240      	sxtb	r0, r0
}
 801de3a:	bd08      	pop	{r3, pc}
        return spindle_register(&spindle, "NULL");
 801de3c:	4904      	ldr	r1, [pc, #16]	@ (801de50 <spindle_add_null+0x40>)
 801de3e:	4805      	ldr	r0, [pc, #20]	@ (801de54 <spindle_add_null+0x44>)
 801de40:	f7ff fec8 	bl	801dbd4 <spindle_register>
 801de44:	e7f9      	b.n	801de3a <spindle_add_null+0x2a>
 801de46:	bf00      	nop
 801de48:	20001df8 	.word	0x20001df8
 801de4c:	20001d3c 	.word	0x20001d3c
 801de50:	0802fe90 	.word	0x0802fe90
 801de54:	0802fe98 	.word	0x0802fe98

0801de58 <spindle_select>:
{
 801de58:	b508      	push	{r3, lr}
    if(n_spindle == 0 && spindle_id >= 0) {
 801de5a:	4b0d      	ldr	r3, [pc, #52]	@ (801de90 <spindle_select+0x38>)
 801de5c:	781b      	ldrb	r3, [r3, #0]
 801de5e:	b90b      	cbnz	r3, 801de64 <spindle_select+0xc>
 801de60:	2800      	cmp	r0, #0
 801de62:	da0d      	bge.n	801de80 <spindle_select+0x28>
    return (sys_spindle[0].enabled && sys_spindle[0].hal.id == spindle_id) || spindle_activate(spindle_id, 0);
 801de64:	4b0b      	ldr	r3, [pc, #44]	@ (801de94 <spindle_select+0x3c>)
 801de66:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 801de6a:	b123      	cbz	r3, 801de76 <spindle_select+0x1e>
 801de6c:	4b09      	ldr	r3, [pc, #36]	@ (801de94 <spindle_select+0x3c>)
 801de6e:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 801de72:	4283      	cmp	r3, r0
 801de74:	d008      	beq.n	801de88 <spindle_select+0x30>
 801de76:	2100      	movs	r1, #0
 801de78:	f7ff fd56 	bl	801d928 <spindle_activate>
 801de7c:	b930      	cbnz	r0, 801de8c <spindle_select+0x34>
}
 801de7e:	bd08      	pop	{r3, pc}
        spindle_add_null();
 801de80:	f7ff ffc6 	bl	801de10 <spindle_add_null>
        spindle_id = 0;
 801de84:	2000      	movs	r0, #0
 801de86:	e7ed      	b.n	801de64 <spindle_select+0xc>
    return (sys_spindle[0].enabled && sys_spindle[0].hal.id == spindle_id) || spindle_activate(spindle_id, 0);
 801de88:	2001      	movs	r0, #1
 801de8a:	e7f8      	b.n	801de7e <spindle_select+0x26>
 801de8c:	2001      	movs	r0, #1
 801de8e:	e7f6      	b.n	801de7e <spindle_select+0x26>
 801de90:	20001df8 	.word	0x20001df8
 801de94:	20001d88 	.word	0x20001d88

0801de98 <spindle_get_count>:
{
 801de98:	b508      	push	{r3, lr}
    if(n_spindle == 0)
 801de9a:	4b09      	ldr	r3, [pc, #36]	@ (801dec0 <spindle_get_count+0x28>)
 801de9c:	781b      	ldrb	r3, [r3, #0]
 801de9e:	b123      	cbz	r3, 801deaa <spindle_get_count+0x12>
    return n_spindle == 1 && spindles[0].cfg->type == SpindleType_Null ? 0 : n_spindle;
 801dea0:	4b07      	ldr	r3, [pc, #28]	@ (801dec0 <spindle_get_count+0x28>)
 801dea2:	7818      	ldrb	r0, [r3, #0]
 801dea4:	2801      	cmp	r0, #1
 801dea6:	d004      	beq.n	801deb2 <spindle_get_count+0x1a>
}
 801dea8:	bd08      	pop	{r3, pc}
        spindle_select(0);
 801deaa:	2000      	movs	r0, #0
 801deac:	f7ff ffd4 	bl	801de58 <spindle_select>
 801deb0:	e7f6      	b.n	801dea0 <spindle_get_count+0x8>
    return n_spindle == 1 && spindles[0].cfg->type == SpindleType_Null ? 0 : n_spindle;
 801deb2:	4b04      	ldr	r3, [pc, #16]	@ (801dec4 <spindle_get_count+0x2c>)
 801deb4:	681b      	ldr	r3, [r3, #0]
 801deb6:	7a1b      	ldrb	r3, [r3, #8]
 801deb8:	2b05      	cmp	r3, #5
 801deba:	d1f5      	bne.n	801dea8 <spindle_get_count+0x10>
 801debc:	2000      	movs	r0, #0
 801debe:	e7f3      	b.n	801dea8 <spindle_get_count+0x10>
 801dec0:	20001df8 	.word	0x20001df8
 801dec4:	20001d3c 	.word	0x20001d3c

0801dec8 <spindle_set_rpm>:
\param rpm the programmed RPM.
\param override_pct override value in percent.
\returns the calulated RPM.
*/
float spindle_set_rpm (spindle_ptrs_t *spindle, float rpm, override_t override_pct)
{
 801dec8:	eef0 7a40 	vmov.f32	s15, s0
    if(override_pct != 100)
 801decc:	2964      	cmp	r1, #100	@ 0x64
 801dece:	d009      	beq.n	801dee4 <spindle_set_rpm+0x1c>
        rpm *= 0.01f * (float)override_pct; // Scale RPM by override value.
 801ded0:	ee07 1a10 	vmov	s14, r1
 801ded4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801ded8:	eddf 6a11 	vldr	s13, [pc, #68]	@ 801df20 <spindle_set_rpm+0x58>
 801dedc:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dee0:	ee60 7a07 	vmul.f32	s15, s0, s14

    // Apply RPM limits
    if (rpm <= 0.0f) // TODO: remove this test?
 801dee4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801dee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801deec:	d910      	bls.n	801df10 <spindle_set_rpm+0x48>
        rpm = 0.0f;
    else if (rpm > spindle->rpm_max)
 801deee:	ed90 0a06 	vldr	s0, [r0, #24]
 801def2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801def6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801defa:	d40b      	bmi.n	801df14 <spindle_set_rpm+0x4c>
        rpm = spindle->rpm_max;
    else if (rpm < spindle->rpm_min)
 801defc:	ed90 0a05 	vldr	s0, [r0, #20]
 801df00:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801df04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df08:	dc04      	bgt.n	801df14 <spindle_set_rpm+0x4c>
 801df0a:	eeb0 0a67 	vmov.f32	s0, s15
 801df0e:	e001      	b.n	801df14 <spindle_set_rpm+0x4c>
        rpm = 0.0f;
 801df10:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 801df24 <spindle_set_rpm+0x5c>
        rpm = spindle->rpm_min;

    spindle->param->rpm_overridden = rpm;
 801df14:	6843      	ldr	r3, [r0, #4]
 801df16:	ed83 0a01 	vstr	s0, [r3, #4]
    spindle->param->override_pct = override_pct;
 801df1a:	6843      	ldr	r3, [r0, #4]
 801df1c:	60d9      	str	r1, [r3, #12]

    return rpm;
}
 801df1e:	4770      	bx	lr
 801df20:	3c23d70a 	.word	0x3c23d70a
 801df24:	00000000 	.word	0x00000000

0801df28 <set_state>:
    if (!ABORTED) { // Block during abort.
 801df28:	4b29      	ldr	r3, [pc, #164]	@ (801dfd0 <set_state+0xa8>)
 801df2a:	781b      	ldrb	r3, [r3, #0]
 801df2c:	2b00      	cmp	r3, #0
 801df2e:	d142      	bne.n	801dfb6 <set_state+0x8e>
{
 801df30:	b570      	push	{r4, r5, r6, lr}
 801df32:	ed2d 8b02 	vpush	{d8}
 801df36:	4604      	mov	r4, r0
 801df38:	460d      	mov	r5, r1
 801df3a:	eeb0 8a40 	vmov.f32	s16, s0
    if (!ABORTED) { // Block during abort.
 801df3e:	4b24      	ldr	r3, [pc, #144]	@ (801dfd0 <set_state+0xa8>)
 801df40:	785b      	ldrb	r3, [r3, #1]
 801df42:	b9ab      	cbnz	r3, 801df70 <set_state+0x48>
        if (!state.on) { // Halt or set spindle direction and rpm.
 801df44:	b2cb      	uxtb	r3, r1
 801df46:	f015 0f01 	tst.w	r5, #1
 801df4a:	d119      	bne.n	801df80 <set_state+0x58>
            spindle->param->rpm = rpm = 0.0f;
 801df4c:	6843      	ldr	r3, [r0, #4]
 801df4e:	ed9f 8a21 	vldr	s16, [pc, #132]	@ 801dfd4 <set_state+0xac>
 801df52:	ed83 8a00 	vstr	s16, [r3]
            spindle->set_state(spindle, (spindle_state_t){0}, 0.0f);
 801df56:	6a03      	ldr	r3, [r0, #32]
 801df58:	eeb0 0a48 	vmov.f32	s0, s16
 801df5c:	f04f 0100 	mov.w	r1, #0
 801df60:	4798      	blx	r3
        system_add_rt_report(Report_Spindle); // Set to report change immediately
 801df62:	2010      	movs	r0, #16
 801df64:	f003 fb8c 	bl	8021680 <system_add_rt_report>
        st_rpm_changed(rpm);
 801df68:	eeb0 0a48 	vmov.f32	s0, s16
 801df6c:	f001 fb36 	bl	801f5dc <st_rpm_changed>
    return !ABORTED;
 801df70:	4b17      	ldr	r3, [pc, #92]	@ (801dfd0 <set_state+0xa8>)
 801df72:	781b      	ldrb	r3, [r3, #0]
 801df74:	b9cb      	cbnz	r3, 801dfaa <set_state+0x82>
 801df76:	4b16      	ldr	r3, [pc, #88]	@ (801dfd0 <set_state+0xa8>)
 801df78:	785b      	ldrb	r3, [r3, #1]
 801df7a:	b1d3      	cbz	r3, 801dfb2 <set_state+0x8a>
 801df7c:	2000      	movs	r0, #0
 801df7e:	e015      	b.n	801dfac <set_state+0x84>
            if (spindle->cap.laser && state.ccw)
 801df80:	7a82      	ldrb	r2, [r0, #10]
 801df82:	f012 0f08 	tst.w	r2, #8
 801df86:	d004      	beq.n	801df92 <set_state+0x6a>
 801df88:	f013 0f02 	tst.w	r3, #2
 801df8c:	d001      	beq.n	801df92 <set_state+0x6a>
                rpm = 0.0f; // TODO: May need to be rpm_min*(100/MAX_SPINDLE_RPM_OVERRIDE);
 801df8e:	ed9f 8a11 	vldr	s16, [pc, #68]	@ 801dfd4 <set_state+0xac>
            spindle->set_state(spindle, state, spindle_set_rpm(spindle, rpm, spindle->param->override_pct));
 801df92:	6a26      	ldr	r6, [r4, #32]
 801df94:	6863      	ldr	r3, [r4, #4]
 801df96:	68d9      	ldr	r1, [r3, #12]
 801df98:	eeb0 0a48 	vmov.f32	s0, s16
 801df9c:	4620      	mov	r0, r4
 801df9e:	f7ff ff93 	bl	801dec8 <spindle_set_rpm>
 801dfa2:	4629      	mov	r1, r5
 801dfa4:	4620      	mov	r0, r4
 801dfa6:	47b0      	blx	r6
 801dfa8:	e7db      	b.n	801df62 <set_state+0x3a>
    return !ABORTED;
 801dfaa:	2000      	movs	r0, #0
}
 801dfac:	ecbd 8b02 	vpop	{d8}
 801dfb0:	bd70      	pop	{r4, r5, r6, pc}
    return !ABORTED;
 801dfb2:	2001      	movs	r0, #1
 801dfb4:	e7fa      	b.n	801dfac <set_state+0x84>
 801dfb6:	4b06      	ldr	r3, [pc, #24]	@ (801dfd0 <set_state+0xa8>)
 801dfb8:	781b      	ldrb	r3, [r3, #0]
 801dfba:	b923      	cbnz	r3, 801dfc6 <set_state+0x9e>
 801dfbc:	4b04      	ldr	r3, [pc, #16]	@ (801dfd0 <set_state+0xa8>)
 801dfbe:	785b      	ldrb	r3, [r3, #1]
 801dfc0:	b11b      	cbz	r3, 801dfca <set_state+0xa2>
 801dfc2:	2000      	movs	r0, #0
 801dfc4:	4770      	bx	lr
 801dfc6:	2000      	movs	r0, #0
 801dfc8:	4770      	bx	lr
 801dfca:	2001      	movs	r0, #1
}
 801dfcc:	4770      	bx	lr
 801dfce:	bf00      	nop
 801dfd0:	2000148c 	.word	0x2000148c
 801dfd4:	00000000 	.word	0x00000000

0801dfd8 <spindle_set_state>:
{
 801dfd8:	b508      	push	{r3, lr}
    return set_state(spindle, state, rpm);
 801dfda:	f7ff ffa5 	bl	801df28 <set_state>
}
 801dfde:	bd08      	pop	{r3, pc}

0801dfe0 <spindle_restore>:
{
 801dfe0:	b538      	push	{r3, r4, r5, lr}
 801dfe2:	ed2d 8b02 	vpush	{d8}
    if(spindle->cap.laser) // When in laser mode, ignore spindle spin-up delay. Set to turn on laser when cycle starts.
 801dfe6:	7a83      	ldrb	r3, [r0, #10]
 801dfe8:	f013 0f08 	tst.w	r3, #8
 801dfec:	d009      	beq.n	801e002 <spindle_restore+0x22>
        sys.step_control.update_spindle_rpm = On;
 801dfee:	4a2a      	ldr	r2, [pc, #168]	@ (801e098 <spindle_restore+0xb8>)
 801dff0:	7e13      	ldrb	r3, [r2, #24]
 801dff2:	f043 0308 	orr.w	r3, r3, #8
 801dff6:	7613      	strb	r3, [r2, #24]
    bool ok = true;
 801dff8:	2501      	movs	r5, #1
}
 801dffa:	4628      	mov	r0, r5
 801dffc:	ecbd 8b02 	vpop	{d8}
 801e000:	bd38      	pop	{r3, r4, r5, pc}
 801e002:	4604      	mov	r4, r0
 801e004:	460d      	mov	r5, r1
        spindle_set_state(spindle, state, rpm);
 801e006:	f7ff ffe7 	bl	801dfd8 <spindle_set_state>
        if(state.on) {
 801e00a:	f015 0f01 	tst.w	r5, #1
 801e00e:	d040      	beq.n	801e092 <spindle_restore+0xb2>
            if((ok = !spindle->cap.at_speed))
 801e010:	7aa3      	ldrb	r3, [r4, #10]
 801e012:	f003 0304 	and.w	r3, r3, #4
 801e016:	2b00      	cmp	r3, #0
 801e018:	bf0c      	ite	eq
 801e01a:	2501      	moveq	r5, #1
 801e01c:	2500      	movne	r5, #0
 801e01e:	d030      	beq.n	801e082 <spindle_restore+0xa2>
            else if((ok == (settings.spindle.at_speed_tolerance <= 0.0f))) {
 801e020:	4b1e      	ldr	r3, [pc, #120]	@ (801e09c <spindle_restore+0xbc>)
 801e022:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 801e026:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e02e:	bf94      	ite	ls
 801e030:	2301      	movls	r3, #1
 801e032:	2300      	movhi	r3, #0
 801e034:	42ab      	cmp	r3, r5
 801e036:	d1e0      	bne.n	801dffa <spindle_restore+0x1a>
                float delay = 0.0f;
 801e038:	ed9f 8a19 	vldr	s16, [pc, #100]	@ 801e0a0 <spindle_restore+0xc0>
                while(!(ok = spindle->get_state(spindle).at_speed)) {
 801e03c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801e03e:	4620      	mov	r0, r4
 801e040:	4798      	blx	r3
 801e042:	f3c0 1580 	ubfx	r5, r0, #6, #1
 801e046:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801e04a:	d1d6      	bne.n	801dffa <spindle_restore+0x1a>
                    if(!(ok = delay_sec(0.1f, DelayMode_SysSuspend)))
 801e04c:	2001      	movs	r0, #1
 801e04e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 801e0a4 <spindle_restore+0xc4>
 801e052:	f7f7 fa25 	bl	80154a0 <delay_sec>
 801e056:	4605      	mov	r5, r0
 801e058:	2800      	cmp	r0, #0
 801e05a:	d0ce      	beq.n	801dffa <spindle_restore+0x1a>
                    delay += 0.1f;
 801e05c:	eddf 7a11 	vldr	s15, [pc, #68]	@ 801e0a4 <spindle_restore+0xc4>
 801e060:	ee38 8a27 	vadd.f32	s16, s16, s15
                    if(!(ok = delay < settings.safety_door.spindle_on_delay)) {
 801e064:	4b0d      	ldr	r3, [pc, #52]	@ (801e09c <spindle_restore+0xbc>)
 801e066:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 801e06a:	eef4 7ac8 	vcmpe.f32	s15, s16
 801e06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e072:	bfcc      	ite	gt
 801e074:	2501      	movgt	r5, #1
 801e076:	2500      	movle	r5, #0
 801e078:	dce0      	bgt.n	801e03c <spindle_restore+0x5c>
                        system_raise_alarm(Alarm_Spindle);
 801e07a:	200e      	movs	r0, #14
 801e07c:	f003 fab2 	bl	80215e4 <system_raise_alarm>
                        break;
 801e080:	e7bb      	b.n	801dffa <spindle_restore+0x1a>
                ok = delay_sec(settings.safety_door.spindle_on_delay, DelayMode_SysSuspend);
 801e082:	2001      	movs	r0, #1
 801e084:	4b05      	ldr	r3, [pc, #20]	@ (801e09c <spindle_restore+0xbc>)
 801e086:	ed93 0a50 	vldr	s0, [r3, #320]	@ 0x140
 801e08a:	f7f7 fa09 	bl	80154a0 <delay_sec>
 801e08e:	4605      	mov	r5, r0
 801e090:	e7b3      	b.n	801dffa <spindle_restore+0x1a>
    bool ok = true;
 801e092:	2501      	movs	r5, #1
 801e094:	e7b1      	b.n	801dffa <spindle_restore+0x1a>
 801e096:	bf00      	nop
 801e098:	2000148c 	.word	0x2000148c
 801e09c:	20001bc4 	.word	0x20001bc4
 801e0a0:	00000000 	.word	0x00000000
 801e0a4:	3dcccccd 	.word	0x3dcccccd

0801e0a8 <spindle_sync>:
{
 801e0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0aa:	ed2d 8b02 	vpush	{d8}
 801e0ae:	4605      	mov	r5, r0
 801e0b0:	460f      	mov	r7, r1
 801e0b2:	eeb0 8a40 	vmov.f32	s16, s0
    if (!(ok = state_get() == STATE_CHECK_MODE)) {
 801e0b6:	f000 fb25 	bl	801e704 <state_get>
 801e0ba:	2802      	cmp	r0, #2
 801e0bc:	bf0c      	ite	eq
 801e0be:	2001      	moveq	r0, #1
 801e0c0:	2000      	movne	r0, #0
 801e0c2:	d019      	beq.n	801e0f8 <spindle_sync+0x50>
        bool at_speed = !state.on || !spindle->cap.at_speed || settings.spindle.at_speed_tolerance <= 0.0f;
 801e0c4:	f017 0f01 	tst.w	r7, #1
 801e0c8:	d00f      	beq.n	801e0ea <spindle_sync+0x42>
 801e0ca:	7aab      	ldrb	r3, [r5, #10]
 801e0cc:	f013 0f04 	tst.w	r3, #4
 801e0d0:	d015      	beq.n	801e0fe <spindle_sync+0x56>
 801e0d2:	4b24      	ldr	r3, [pc, #144]	@ (801e164 <spindle_sync+0xbc>)
 801e0d4:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 801e0d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0e0:	d901      	bls.n	801e0e6 <spindle_sync+0x3e>
 801e0e2:	2600      	movs	r6, #0
 801e0e4:	e002      	b.n	801e0ec <spindle_sync+0x44>
 801e0e6:	2601      	movs	r6, #1
 801e0e8:	e000      	b.n	801e0ec <spindle_sync+0x44>
 801e0ea:	2601      	movs	r6, #1
        if((ok = protocol_buffer_synchronize()) && set_state(spindle, state, rpm) && !at_speed) {
 801e0ec:	f7f9 fa70 	bl	80175d0 <protocol_buffer_synchronize>
 801e0f0:	4604      	mov	r4, r0
 801e0f2:	b930      	cbnz	r0, 801e102 <spindle_sync+0x5a>
        ok &= at_speed;
 801e0f4:	ea04 0006 	and.w	r0, r4, r6
}
 801e0f8:	ecbd 8b02 	vpop	{d8}
 801e0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        bool at_speed = !state.on || !spindle->cap.at_speed || settings.spindle.at_speed_tolerance <= 0.0f;
 801e0fe:	2601      	movs	r6, #1
 801e100:	e7f4      	b.n	801e0ec <spindle_sync+0x44>
        if((ok = protocol_buffer_synchronize()) && set_state(spindle, state, rpm) && !at_speed) {
 801e102:	eeb0 0a48 	vmov.f32	s0, s16
 801e106:	4639      	mov	r1, r7
 801e108:	4628      	mov	r0, r5
 801e10a:	f7ff ff0d 	bl	801df28 <set_state>
 801e10e:	2800      	cmp	r0, #0
 801e110:	d0f0      	beq.n	801e0f4 <spindle_sync+0x4c>
 801e112:	2e00      	cmp	r6, #0
 801e114:	d1ee      	bne.n	801e0f4 <spindle_sync+0x4c>
            float on_delay = 0.0f;
 801e116:	ed9f 8a14 	vldr	s16, [pc, #80]	@ 801e168 <spindle_sync+0xc0>
            while(!(at_speed = spindle->get_state(spindle).at_speed)) {
 801e11a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801e11c:	4628      	mov	r0, r5
 801e11e:	4798      	blx	r3
 801e120:	f3c0 1680 	ubfx	r6, r0, #6, #1
 801e124:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801e128:	d1e4      	bne.n	801e0f4 <spindle_sync+0x4c>
                if(!(ok = delay_sec(0.2f, DelayMode_Dwell)))
 801e12a:	2000      	movs	r0, #0
 801e12c:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 801e16c <spindle_sync+0xc4>
 801e130:	f7f7 f9b6 	bl	80154a0 <delay_sec>
 801e134:	4604      	mov	r4, r0
 801e136:	2800      	cmp	r0, #0
 801e138:	d0dc      	beq.n	801e0f4 <spindle_sync+0x4c>
                on_delay += 0.2f;
 801e13a:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801e16c <spindle_sync+0xc4>
 801e13e:	ee38 8a27 	vadd.f32	s16, s16, s15
                if(!(ok = on_delay < settings.safety_door.spindle_on_delay)) {
 801e142:	4b08      	ldr	r3, [pc, #32]	@ (801e164 <spindle_sync+0xbc>)
 801e144:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 801e148:	eef4 7ac8 	vcmpe.f32	s15, s16
 801e14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e150:	bfcc      	ite	gt
 801e152:	2401      	movgt	r4, #1
 801e154:	2400      	movle	r4, #0
 801e156:	dce0      	bgt.n	801e11a <spindle_sync+0x72>
                    gc_spindle_off();
 801e158:	f7ee fe30 	bl	800cdbc <gc_spindle_off>
                    system_raise_alarm(Alarm_Spindle);
 801e15c:	200e      	movs	r0, #14
 801e15e:	f003 fa41 	bl	80215e4 <system_raise_alarm>
                    break;
 801e162:	e7c7      	b.n	801e0f4 <spindle_sync+0x4c>
 801e164:	20001bc4 	.word	0x20001bc4
 801e168:	00000000 	.word	0x00000000
 801e16c:	3e4ccccd 	.word	0x3e4ccccd

0801e170 <spindle_set_override>:
{
 801e170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e172:	4605      	mov	r5, r0
    if(speed_override != 100 && spindle->param->state.override_disable)
 801e174:	2964      	cmp	r1, #100	@ 0x64
 801e176:	d006      	beq.n	801e186 <spindle_set_override+0x16>
 801e178:	6843      	ldr	r3, [r0, #4]
 801e17a:	7a1b      	ldrb	r3, [r3, #8]
 801e17c:	f013 0f10 	tst.w	r3, #16
 801e180:	d10a      	bne.n	801e198 <spindle_set_override+0x28>
    speed_override = constrain(speed_override, MIN_SPINDLE_RPM_OVERRIDE, MAX_SPINDLE_RPM_OVERRIDE);
 801e182:	2909      	cmp	r1, #9
 801e184:	d909      	bls.n	801e19a <spindle_set_override+0x2a>
 801e186:	29c8      	cmp	r1, #200	@ 0xc8
 801e188:	bf28      	it	cs
 801e18a:	21c8      	movcs	r1, #200	@ 0xc8
 801e18c:	460c      	mov	r4, r1
    if ((uint8_t)speed_override != spindle->param->override_pct) {
 801e18e:	686b      	ldr	r3, [r5, #4]
 801e190:	68d9      	ldr	r1, [r3, #12]
 801e192:	b2e2      	uxtb	r2, r4
 801e194:	4291      	cmp	r1, r2
 801e196:	d102      	bne.n	801e19e <spindle_set_override+0x2e>
}
 801e198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    speed_override = constrain(speed_override, MIN_SPINDLE_RPM_OVERRIDE, MAX_SPINDLE_RPM_OVERRIDE);
 801e19a:	240a      	movs	r4, #10
 801e19c:	e7f7      	b.n	801e18e <spindle_set_override+0x1e>
        spindle->param->override_pct = speed_override;
 801e19e:	60dc      	str	r4, [r3, #12]
        if(state_get() == STATE_IDLE)
 801e1a0:	f000 fab0 	bl	801e704 <state_get>
 801e1a4:	b1e0      	cbz	r0, 801e1e0 <spindle_set_override+0x70>
            sys.step_control.update_spindle_rpm = On;
 801e1a6:	4a12      	ldr	r2, [pc, #72]	@ (801e1f0 <spindle_set_override+0x80>)
 801e1a8:	7e13      	ldrb	r3, [r2, #24]
 801e1aa:	f043 0308 	orr.w	r3, r3, #8
 801e1ae:	7613      	strb	r3, [r2, #24]
        system_add_rt_report(Report_Overrides); // Set to report change immediately
 801e1b0:	2040      	movs	r0, #64	@ 0x40
 801e1b2:	f003 fa65 	bl	8021680 <system_add_rt_report>
       if(grbl.on_spindle_programmed)
 801e1b6:	4b0f      	ldr	r3, [pc, #60]	@ (801e1f4 <spindle_set_override+0x84>)
 801e1b8:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801e1ba:	b156      	cbz	r6, 801e1d2 <spindle_set_override+0x62>
           grbl.on_spindle_programmed(spindle, gc_state.modal.spindle.state, spindle_set_rpm(spindle, gc_state.spindle.rpm, speed_override), gc_state.modal.spindle.rpm_mode);
 801e1bc:	4f0e      	ldr	r7, [pc, #56]	@ (801e1f8 <spindle_set_override+0x88>)
 801e1be:	4621      	mov	r1, r4
 801e1c0:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 801e1c4:	4628      	mov	r0, r5
 801e1c6:	f7ff fe7f 	bl	801dec8 <spindle_set_rpm>
 801e1ca:	7efa      	ldrb	r2, [r7, #27]
 801e1cc:	7eb9      	ldrb	r1, [r7, #26]
 801e1ce:	4628      	mov	r0, r5
 801e1d0:	47b0      	blx	r6
       if(grbl.on_override_changed)
 801e1d2:	4b08      	ldr	r3, [pc, #32]	@ (801e1f4 <spindle_set_override+0x84>)
 801e1d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	d0de      	beq.n	801e198 <spindle_set_override+0x28>
           grbl.on_override_changed(OverrideChanged_SpindleRPM);
 801e1da:	2000      	movs	r0, #0
 801e1dc:	4798      	blx	r3
 801e1de:	e7db      	b.n	801e198 <spindle_set_override+0x28>
            spindle_set_state(spindle, gc_state.modal.spindle.state, gc_state.spindle.rpm);
 801e1e0:	4b05      	ldr	r3, [pc, #20]	@ (801e1f8 <spindle_set_override+0x88>)
 801e1e2:	ed93 0a14 	vldr	s0, [r3, #80]	@ 0x50
 801e1e6:	7e99      	ldrb	r1, [r3, #26]
 801e1e8:	4628      	mov	r0, r5
 801e1ea:	f7ff fef5 	bl	801dfd8 <spindle_set_state>
 801e1ee:	e7df      	b.n	801e1b0 <spindle_set_override+0x40>
 801e1f0:	2000148c 	.word	0x2000148c
 801e1f4:	20001394 	.word	0x20001394
 801e1f8:	20000ee4 	.word	0x20000ee4

0801e1fc <spindle_all_off>:

/*! \brief Turn off all enabled spindles.
*/
void spindle_all_off (void)
{
 801e1fc:	b508      	push	{r3, lr}
    spindle_ptrs_t *spindle;
    uint_fast8_t spindle_num = N_SYS_SPINDLE;

    do {
        if((spindle = spindle_get(--spindle_num))) {
 801e1fe:	2000      	movs	r0, #0
 801e200:	f7ff fdf0 	bl	801dde4 <spindle_get>
 801e204:	b160      	cbz	r0, 801e220 <spindle_all_off+0x24>
            spindle->param->rpm = spindle->param->rpm_overridden = 0.0f;
 801e206:	6842      	ldr	r2, [r0, #4]
 801e208:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 801e228 <spindle_all_off+0x2c>
 801e20c:	ed82 0a01 	vstr	s0, [r2, #4]
 801e210:	6842      	ldr	r2, [r0, #4]
 801e212:	ed82 0a00 	vstr	s0, [r2]
            spindle->param->state.value = 0;
 801e216:	6842      	ldr	r2, [r0, #4]
 801e218:	2100      	movs	r1, #0
 801e21a:	7211      	strb	r1, [r2, #8]
#ifdef GRBL_ESP32
            spindle->esp32_off(spindle);
#else
            spindle->set_state(spindle, (spindle_state_t){0}, 0.0f);
 801e21c:	6a02      	ldr	r2, [r0, #32]
 801e21e:	4790      	blx	r2
#endif
        }
    } while(spindle_num);

    system_add_rt_report(Report_Spindle);
 801e220:	2010      	movs	r0, #16
 801e222:	f003 fa2d 	bl	8021680 <system_add_rt_report>
}
 801e226:	bd08      	pop	{r3, pc}
 801e228:	00000000 	.word	0x00000000

0801e22c <spindle_is_on>:

/*! \brief Check if any of the enabled spindles is running.
\returns \a true if a spindle is running, \a false otherwise.
*/
bool spindle_is_on (void)
{
 801e22c:	b508      	push	{r3, lr}
    bool on = false;

    spindle_ptrs_t *spindle;
    uint_fast8_t spindle_num = N_SYS_SPINDLE;
    do {
        if((spindle = spindle_get(--spindle_num)))
 801e22e:	2000      	movs	r0, #0
 801e230:	f7ff fdd8 	bl	801dde4 <spindle_get>
 801e234:	b120      	cbz	r0, 801e240 <spindle_is_on+0x14>
            on = spindle->get_state(spindle).on;
 801e236:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 801e238:	4790      	blx	r2
 801e23a:	f000 0001 	and.w	r0, r0, #1
    } while(spindle_num && !on);

    return on;
}
 801e23e:	bd08      	pop	{r3, pc}
 801e240:	2000      	movs	r0, #0
 801e242:	e7fc      	b.n	801e23e <spindle_is_on+0x12>

0801e244 <state_noop>:
/*! /brief No operation handler.
 */
static void state_noop (uint_fast16_t rt_exec)
{
    // Do nothing - state change requests are handled elsewhere or ignored.
}
 801e244:	4770      	bx	lr
	...

0801e248 <state_await_restart_retract>:
/*! /brief Waits until plunge motion abort is completed then calls state_await_hold() to restart retraction.
state_await_hold() is set to handle the cycle complete event.
 */
static void state_await_restart_retract (uint_fast16_t rt_exec)
{
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801e248:	f010 0f04 	tst.w	r0, #4
 801e24c:	d014      	beq.n	801e278 <state_await_restart_retract+0x30>
{
 801e24e:	b508      	push	{r3, lr}

        if (sys.step_control.execute_sys_motion) {
 801e250:	4b0a      	ldr	r3, [pc, #40]	@ (801e27c <state_await_restart_retract+0x34>)
 801e252:	7e1b      	ldrb	r3, [r3, #24]
 801e254:	f013 0f04 	tst.w	r3, #4
 801e258:	d106      	bne.n	801e268 <state_await_restart_retract+0x20>
            sys.step_control.execute_sys_motion = Off;
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
        }

        stateHandler = state_await_hold;
 801e25a:	4b09      	ldr	r3, [pc, #36]	@ (801e280 <state_await_restart_retract+0x38>)
 801e25c:	4a09      	ldr	r2, [pc, #36]	@ (801e284 <state_await_restart_retract+0x3c>)
 801e25e:	601a      	str	r2, [r3, #0]
        stateHandler(EXEC_CYCLE_COMPLETE);
 801e260:	681b      	ldr	r3, [r3, #0]
 801e262:	2004      	movs	r0, #4
 801e264:	4798      	blx	r3
    }
}
 801e266:	bd08      	pop	{r3, pc}
            sys.step_control.execute_sys_motion = Off;
 801e268:	4b04      	ldr	r3, [pc, #16]	@ (801e27c <state_await_restart_retract+0x34>)
 801e26a:	7e1a      	ldrb	r2, [r3, #24]
 801e26c:	f36f 0282 	bfc	r2, #2, #1
 801e270:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801e272:	f001 fa0f 	bl	801f694 <st_parking_restore_buffer>
 801e276:	e7f0      	b.n	801e25a <state_await_restart_retract+0x12>
 801e278:	4770      	bx	lr
 801e27a:	bf00      	nop
 801e27c:	2000148c 	.word	0x2000148c
 801e280:	20000424 	.word	0x20000424
 801e284:	0801edc1 	.word	0x0801edc1

0801e288 <state_await_waypoint_retract>:
/*! /brief Waits until slow plunge motion is completed then deenergize spindle and coolant and execute fast retract motion.
state_await_resume() is set to handle the cycle complete event.
 */
static void state_await_waypoint_retract (uint_fast16_t rt_exec)
{
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801e288:	f010 0f04 	tst.w	r0, #4
 801e28c:	d05c      	beq.n	801e348 <state_await_waypoint_retract+0xc0>
{
 801e28e:	b500      	push	{lr}
 801e290:	b085      	sub	sp, #20

        bool await_motion = false;

        if (sys.step_control.execute_sys_motion) {
 801e292:	4b2e      	ldr	r3, [pc, #184]	@ (801e34c <state_await_waypoint_retract+0xc4>)
 801e294:	7e1b      	ldrb	r3, [r3, #24]
 801e296:	f013 0f04 	tst.w	r3, #4
 801e29a:	d135      	bne.n	801e308 <state_await_waypoint_retract+0x80>
            sys.step_control.execute_sys_motion = Off;
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
        }

        // NOTE: Clear accessory state after retract and after an aborted restore motion.
        park.plan_data.spindle.state.value = 0;
 801e29c:	4b2c      	ldr	r3, [pc, #176]	@ (801e350 <state_await_waypoint_retract+0xc8>)
 801e29e:	2100      	movs	r1, #0
 801e2a0:	f883 1028 	strb.w	r1, [r3, #40]	@ 0x28
        park.plan_data.spindle.rpm = 0.0f;
 801e2a4:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 801e354 <state_await_waypoint_retract+0xcc>
 801e2a8:	ed83 0a09 	vstr	s0, [r3, #36]	@ 0x24
        park.plan_data.spindle.hal->set_state(park.plan_data.spindle.hal, park.plan_data.spindle.state, 0.0f); // De-energize
 801e2ac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801e2ae:	6a03      	ldr	r3, [r0, #32]
 801e2b0:	4798      	blx	r3

        if (!settings.safety_door.flags.keep_coolant_on) {
 801e2b2:	4b29      	ldr	r3, [pc, #164]	@ (801e358 <state_await_waypoint_retract+0xd0>)
 801e2b4:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 801e2b8:	f013 0f02 	tst.w	r3, #2
 801e2bc:	d106      	bne.n	801e2cc <state_await_waypoint_retract+0x44>
            park.plan_data.condition.coolant.value = 0;
 801e2be:	2000      	movs	r0, #0
 801e2c0:	4b23      	ldr	r3, [pc, #140]	@ (801e350 <state_await_waypoint_retract+0xc8>)
 801e2c2:	f883 0036 	strb.w	r0, [r3, #54]	@ 0x36
            hal.coolant.set_state(park.plan_data.condition.coolant); // De-energize
 801e2c6:	4b25      	ldr	r3, [pc, #148]	@ (801e35c <state_await_waypoint_retract+0xd4>)
 801e2c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e2ca:	4798      	blx	r3
        }

        stateHandler = state_await_resume;
 801e2cc:	4b24      	ldr	r3, [pc, #144]	@ (801e360 <state_await_waypoint_retract+0xd8>)
 801e2ce:	4a25      	ldr	r2, [pc, #148]	@ (801e364 <state_await_waypoint_retract+0xdc>)
 801e2d0:	601a      	str	r2, [r3, #0]

        // Execute fast parking retract motion to parking target location.
        if (park.flags.motion && park.target[settings.parking.axis] < settings.parking.target) {
 801e2d2:	4b1f      	ldr	r3, [pc, #124]	@ (801e350 <state_await_waypoint_retract+0xc8>)
 801e2d4:	7f1b      	ldrb	r3, [r3, #28]
 801e2d6:	f013 0f02 	tst.w	r3, #2
 801e2da:	d00e      	beq.n	801e2fa <state_await_waypoint_retract+0x72>
 801e2dc:	4a1e      	ldr	r2, [pc, #120]	@ (801e358 <state_await_waypoint_retract+0xd0>)
 801e2de:	f892 c129 	ldrb.w	ip, [r2, #297]	@ 0x129
 801e2e2:	4b1b      	ldr	r3, [pc, #108]	@ (801e350 <state_await_waypoint_retract+0xc8>)
 801e2e4:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801e2e8:	ed93 7a00 	vldr	s14, [r3]
 801e2ec:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 801e2f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2f8:	d40e      	bmi.n	801e318 <state_await_waypoint_retract+0x90>
            park.plan_data.feed_rate = settings.parking.rate;
            await_motion = mc_parking_motion(target, &park.plan_data);
        }

        if (!await_motion)
            stateHandler(EXEC_CYCLE_COMPLETE);
 801e2fa:	4b19      	ldr	r3, [pc, #100]	@ (801e360 <state_await_waypoint_retract+0xd8>)
 801e2fc:	681b      	ldr	r3, [r3, #0]
 801e2fe:	2004      	movs	r0, #4
 801e300:	4798      	blx	r3
    }
}
 801e302:	b005      	add	sp, #20
 801e304:	f85d fb04 	ldr.w	pc, [sp], #4
            sys.step_control.execute_sys_motion = Off;
 801e308:	4b10      	ldr	r3, [pc, #64]	@ (801e34c <state_await_waypoint_retract+0xc4>)
 801e30a:	7e1a      	ldrb	r2, [r3, #24]
 801e30c:	f36f 0282 	bfc	r2, #2, #1
 801e310:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801e312:	f001 f9bf 	bl	801f694 <st_parking_restore_buffer>
 801e316:	e7c1      	b.n	801e29c <state_await_waypoint_retract+0x14>
            memcpy(target, park.target, sizeof(target));
 801e318:	4b0d      	ldr	r3, [pc, #52]	@ (801e350 <state_await_waypoint_retract+0xc8>)
 801e31a:	f10d 0e04 	add.w	lr, sp, #4
 801e31e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e322:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
            target[settings.parking.axis] = settings.parking.target;
 801e326:	aa04      	add	r2, sp, #16
 801e328:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 801e32c:	ed4c 7a03 	vstr	s15, [ip, #-12]
            park.plan_data.feed_rate = settings.parking.rate;
 801e330:	4a09      	ldr	r2, [pc, #36]	@ (801e358 <state_await_waypoint_retract+0xd0>)
 801e332:	f8d2 2130 	ldr.w	r2, [r2, #304]	@ 0x130
 801e336:	4619      	mov	r1, r3
 801e338:	f841 2f20 	str.w	r2, [r1, #32]!
            await_motion = mc_parking_motion(target, &park.plan_data);
 801e33c:	4670      	mov	r0, lr
 801e33e:	f7f6 f87f 	bl	8014440 <mc_parking_motion>
        if (!await_motion)
 801e342:	2800      	cmp	r0, #0
 801e344:	d1dd      	bne.n	801e302 <state_await_waypoint_retract+0x7a>
 801e346:	e7d8      	b.n	801e2fa <state_await_waypoint_retract+0x72>
 801e348:	4770      	bx	lr
 801e34a:	bf00      	nop
 801e34c:	2000148c 	.word	0x2000148c
 801e350:	20001dfc 	.word	0x20001dfc
 801e354:	00000000 	.word	0x00000000
 801e358:	20001bc4 	.word	0x20001bc4
 801e35c:	200011ac 	.word	0x200011ac
 801e360:	20000424 	.word	0x20000424
 801e364:	0801e9ed 	.word	0x0801e9ed

0801e368 <restart_retract>:
{
 801e368:	b508      	push	{r3, lr}
    grbl.report.feedback_message(Message_SafetyDoorAjar);
 801e36a:	4b12      	ldr	r3, [pc, #72]	@ (801e3b4 <restart_retract+0x4c>)
 801e36c:	68db      	ldr	r3, [r3, #12]
 801e36e:	2006      	movs	r0, #6
 801e370:	4798      	blx	r3
    stateHandler = state_await_restart_retract;
 801e372:	4b11      	ldr	r3, [pc, #68]	@ (801e3b8 <restart_retract+0x50>)
 801e374:	4a11      	ldr	r2, [pc, #68]	@ (801e3bc <restart_retract+0x54>)
 801e376:	601a      	str	r2, [r3, #0]
    park.flags.restart = On;
 801e378:	4a11      	ldr	r2, [pc, #68]	@ (801e3c0 <restart_retract+0x58>)
 801e37a:	7f13      	ldrb	r3, [r2, #28]
 801e37c:	f043 0304 	orr.w	r3, r3, #4
 801e380:	7713      	strb	r3, [r2, #28]
    sys.parking_state = Parking_Retracting;
 801e382:	4b10      	ldr	r3, [pc, #64]	@ (801e3c4 <restart_retract+0x5c>)
 801e384:	2202      	movs	r2, #2
 801e386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    if (sys.step_control.execute_sys_motion) {
 801e38a:	7e1b      	ldrb	r3, [r3, #24]
 801e38c:	f013 0f04 	tst.w	r3, #4
 801e390:	d104      	bne.n	801e39c <restart_retract+0x34>
        stateHandler(EXEC_CYCLE_COMPLETE);
 801e392:	4b09      	ldr	r3, [pc, #36]	@ (801e3b8 <restart_retract+0x50>)
 801e394:	681b      	ldr	r3, [r3, #0]
 801e396:	2004      	movs	r0, #4
 801e398:	4798      	blx	r3
}
 801e39a:	bd08      	pop	{r3, pc}
        st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 801e39c:	f001 f924 	bl	801f5e8 <st_update_plan_block_parameters>
        sys.step_control.execute_hold = On;
 801e3a0:	4b08      	ldr	r3, [pc, #32]	@ (801e3c4 <restart_retract+0x5c>)
 801e3a2:	7e1a      	ldrb	r2, [r3, #24]
 801e3a4:	f042 0202 	orr.w	r2, r2, #2
 801e3a8:	761a      	strb	r2, [r3, #24]
        sys.step_control.execute_sys_motion = On;
 801e3aa:	b2d2      	uxtb	r2, r2
 801e3ac:	f042 0204 	orr.w	r2, r2, #4
 801e3b0:	761a      	strb	r2, [r3, #24]
 801e3b2:	e7f2      	b.n	801e39a <restart_retract+0x32>
 801e3b4:	20001394 	.word	0x20001394
 801e3b8:	20000424 	.word	0x20000424
 801e3bc:	0801e249 	.word	0x0801e249
 801e3c0:	20001dfc 	.word	0x20001dfc
 801e3c4:	2000148c 	.word	0x2000148c

0801e3c8 <state_spindle_restore>:
{
 801e3c8:	b508      	push	{r3, lr}
 801e3ca:	4603      	mov	r3, r0
    if(spindle->hal)
 801e3cc:	68c0      	ldr	r0, [r0, #12]
 801e3ce:	b120      	cbz	r0, 801e3da <state_spindle_restore+0x12>
        spindle_restore(spindle->hal, spindle->state, spindle->rpm);
 801e3d0:	ed93 0a00 	vldr	s0, [r3]
 801e3d4:	7919      	ldrb	r1, [r3, #4]
 801e3d6:	f7ff fe03 	bl	801dfe0 <spindle_restore>
}
 801e3da:	bd08      	pop	{r3, pc}

0801e3dc <state_restore_conditions>:
{
 801e3dc:	b538      	push	{r3, r4, r5, lr}
 801e3de:	4604      	mov	r4, r0
    if (!settings.parking.flags.enabled || !park.flags.restart) {
 801e3e0:	4b17      	ldr	r3, [pc, #92]	@ (801e440 <state_restore_conditions+0x64>)
 801e3e2:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801e3e6:	f013 0f01 	tst.w	r3, #1
 801e3ea:	d004      	beq.n	801e3f6 <state_restore_conditions+0x1a>
 801e3ec:	4b15      	ldr	r3, [pc, #84]	@ (801e444 <state_restore_conditions+0x68>)
 801e3ee:	7f1b      	ldrb	r3, [r3, #28]
 801e3f0:	f013 0f04 	tst.w	r3, #4
 801e3f4:	d118      	bne.n	801e428 <state_restore_conditions+0x4c>
        park.flags.restoring = On; //
 801e3f6:	4a13      	ldr	r2, [pc, #76]	@ (801e444 <state_restore_conditions+0x68>)
 801e3f8:	7f13      	ldrb	r3, [r2, #28]
 801e3fa:	f043 0308 	orr.w	r3, r3, #8
 801e3fe:	7713      	strb	r3, [r2, #28]
            state_spindle_restore(&condition->spindle[--spindle_num]);
 801e400:	1d20      	adds	r0, r4, #4
 801e402:	f7ff ffe1 	bl	801e3c8 <state_spindle_restore>
        if (gc_state.modal.coolant.value != hal.coolant.get_state().value) {
 801e406:	4b10      	ldr	r3, [pc, #64]	@ (801e448 <state_restore_conditions+0x6c>)
 801e408:	7e5d      	ldrb	r5, [r3, #25]
 801e40a:	4b10      	ldr	r3, [pc, #64]	@ (801e44c <state_restore_conditions+0x70>)
 801e40c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e40e:	4798      	blx	r3
 801e410:	b2c3      	uxtb	r3, r0
 801e412:	429d      	cmp	r5, r3
 801e414:	d109      	bne.n	801e42a <state_restore_conditions+0x4e>
        park.flags.restoring = Off;
 801e416:	4a0b      	ldr	r2, [pc, #44]	@ (801e444 <state_restore_conditions+0x68>)
 801e418:	7f13      	ldrb	r3, [r2, #28]
 801e41a:	f36f 03c3 	bfc	r3, #3, #1
 801e41e:	7713      	strb	r3, [r2, #28]
        sys.override.spindle_stop.value = 0; // Clear spindle stop override states
 801e420:	4b0b      	ldr	r3, [pc, #44]	@ (801e450 <state_restore_conditions+0x74>)
 801e422:	2200      	movs	r2, #0
 801e424:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 801e428:	bd38      	pop	{r3, r4, r5, pc}
            gc_coolant(condition->coolant);;
 801e42a:	7820      	ldrb	r0, [r4, #0]
 801e42c:	f7ee fcd4 	bl	800cdd8 <gc_coolant>
            delay_sec(settings.safety_door.coolant_on_delay, DelayMode_SysSuspend);
 801e430:	2001      	movs	r0, #1
 801e432:	4b03      	ldr	r3, [pc, #12]	@ (801e440 <state_restore_conditions+0x64>)
 801e434:	ed93 0a51 	vldr	s0, [r3, #324]	@ 0x144
 801e438:	f7f7 f832 	bl	80154a0 <delay_sec>
 801e43c:	e7eb      	b.n	801e416 <state_restore_conditions+0x3a>
 801e43e:	bf00      	nop
 801e440:	20001bc4 	.word	0x20001bc4
 801e444:	20001dfc 	.word	0x20001dfc
 801e448:	20000ee4 	.word	0x20000ee4
 801e44c:	200011ac 	.word	0x200011ac
 801e450:	2000148c 	.word	0x2000148c

0801e454 <state_restore>:
/*! /brief Waits until fast plunge motion is completed then restore spindle and coolant and execute slow plunge motion.
state_await_resumed() is set to handle the cycle complete event.
Note: A safety door event during restoration or motion will halt it and restart the retract sequence.
 */
static void state_restore (uint_fast16_t rt_exec)
{
 801e454:	b510      	push	{r4, lr}
    if (rt_exec & EXEC_SAFETY_DOOR) {
 801e456:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801e45a:	d00d      	beq.n	801e478 <state_restore+0x24>
        if(park.flags.restoring)
 801e45c:	4b2b      	ldr	r3, [pc, #172]	@ (801e50c <state_restore+0xb8>)
 801e45e:	7f1b      	ldrb	r3, [r3, #28]
 801e460:	f013 0f08 	tst.w	r3, #8
 801e464:	d005      	beq.n	801e472 <state_restore+0x1e>
            park.flags.restart = On;
 801e466:	4a29      	ldr	r2, [pc, #164]	@ (801e50c <state_restore+0xb8>)
 801e468:	7f13      	ldrb	r3, [r2, #28]
 801e46a:	f043 0304 	orr.w	r3, r3, #4
 801e46e:	7713      	strb	r3, [r2, #28]
        }

        if (!await_motion)
            stateHandler(EXEC_CYCLE_COMPLETE); // No motion, proceed to next step immediately.
    }
}
 801e470:	bd10      	pop	{r4, pc}
            restart_retract();
 801e472:	f7ff ff79 	bl	801e368 <restart_retract>
 801e476:	e7fb      	b.n	801e470 <state_restore+0x1c>
    else if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801e478:	f010 0f04 	tst.w	r0, #4
 801e47c:	d0f8      	beq.n	801e470 <state_restore+0x1c>
        if (sys.step_control.execute_sys_motion) {
 801e47e:	4b24      	ldr	r3, [pc, #144]	@ (801e510 <state_restore+0xbc>)
 801e480:	7e1b      	ldrb	r3, [r3, #24]
 801e482:	f013 0f04 	tst.w	r3, #4
 801e486:	d118      	bne.n	801e4ba <state_restore+0x66>
        park.flags.restart = Off;
 801e488:	4c20      	ldr	r4, [pc, #128]	@ (801e50c <state_restore+0xb8>)
 801e48a:	7f23      	ldrb	r3, [r4, #28]
 801e48c:	f36f 0382 	bfc	r3, #2, #1
 801e490:	7723      	strb	r3, [r4, #28]
        stateHandler = state_await_resumed;
 801e492:	4b20      	ldr	r3, [pc, #128]	@ (801e514 <state_restore+0xc0>)
 801e494:	4a20      	ldr	r2, [pc, #128]	@ (801e518 <state_restore+0xc4>)
 801e496:	601a      	str	r2, [r3, #0]
        state_restore_conditions(&restore_condition);
 801e498:	4820      	ldr	r0, [pc, #128]	@ (801e51c <state_restore+0xc8>)
 801e49a:	f7ff ff9f 	bl	801e3dc <state_restore_conditions>
        if(park.flags.restart) {
 801e49e:	7f23      	ldrb	r3, [r4, #28]
 801e4a0:	f013 0f04 	tst.w	r3, #4
 801e4a4:	d111      	bne.n	801e4ca <state_restore+0x76>
        if (park.flags.motion) {
 801e4a6:	4b19      	ldr	r3, [pc, #100]	@ (801e50c <state_restore+0xb8>)
 801e4a8:	7f1b      	ldrb	r3, [r3, #28]
 801e4aa:	f013 0f02 	tst.w	r3, #2
 801e4ae:	d10f      	bne.n	801e4d0 <state_restore+0x7c>
            stateHandler(EXEC_CYCLE_COMPLETE); // No motion, proceed to next step immediately.
 801e4b0:	4b18      	ldr	r3, [pc, #96]	@ (801e514 <state_restore+0xc0>)
 801e4b2:	681b      	ldr	r3, [r3, #0]
 801e4b4:	2004      	movs	r0, #4
 801e4b6:	4798      	blx	r3
 801e4b8:	e7da      	b.n	801e470 <state_restore+0x1c>
            sys.step_control.execute_sys_motion = Off;
 801e4ba:	4b15      	ldr	r3, [pc, #84]	@ (801e510 <state_restore+0xbc>)
 801e4bc:	7e1a      	ldrb	r2, [r3, #24]
 801e4be:	f36f 0282 	bfc	r2, #2, #1
 801e4c2:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801e4c4:	f001 f8e6 	bl	801f694 <st_parking_restore_buffer>
 801e4c8:	e7de      	b.n	801e488 <state_restore+0x34>
            restart_retract();
 801e4ca:	f7ff ff4d 	bl	801e368 <restart_retract>
            return;
 801e4ce:	e7cf      	b.n	801e470 <state_restore+0x1c>
            sys.parking_state = Parking_Resuming;
 801e4d0:	4b0f      	ldr	r3, [pc, #60]	@ (801e510 <state_restore+0xbc>)
 801e4d2:	2204      	movs	r2, #4
 801e4d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            park.plan_data.feed_rate = settings.parking.pullout_rate;
 801e4d8:	4b11      	ldr	r3, [pc, #68]	@ (801e520 <state_restore+0xcc>)
 801e4da:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801e4de:	480b      	ldr	r0, [pc, #44]	@ (801e50c <state_restore+0xb8>)
 801e4e0:	6203      	str	r3, [r0, #32]
            park.plan_data.condition.coolant = restore_condition.coolant;
 801e4e2:	4b0e      	ldr	r3, [pc, #56]	@ (801e51c <state_restore+0xc8>)
 801e4e4:	781a      	ldrb	r2, [r3, #0]
 801e4e6:	f880 2036 	strb.w	r2, [r0, #54]	@ 0x36
            park.plan_data.spindle.state = restore_condition.spindle[restore_condition.spindle_num].state;
 801e4ea:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801e4ee:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801e4f2:	7a1a      	ldrb	r2, [r3, #8]
 801e4f4:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
            park.plan_data.spindle.rpm = restore_condition.spindle[restore_condition.spindle_num].rpm;
 801e4f8:	685b      	ldr	r3, [r3, #4]
 801e4fa:	6243      	str	r3, [r0, #36]	@ 0x24
            await_motion = mc_parking_motion(park.restore_target, &park.plan_data);
 801e4fc:	f100 0120 	add.w	r1, r0, #32
 801e500:	300c      	adds	r0, #12
 801e502:	f7f5 ff9d 	bl	8014440 <mc_parking_motion>
        if (!await_motion)
 801e506:	2800      	cmp	r0, #0
 801e508:	d1b2      	bne.n	801e470 <state_restore+0x1c>
 801e50a:	e7d1      	b.n	801e4b0 <state_restore+0x5c>
 801e50c:	20001dfc 	.word	0x20001dfc
 801e510:	2000148c 	.word	0x2000148c
 801e514:	20000424 	.word	0x20000424
 801e518:	0801ec29 	.word	0x0801ec29
 801e51c:	20001e4c 	.word	0x20001e4c
 801e520:	20001bc4 	.word	0x20001bc4

0801e524 <initiate_hold>:
{
 801e524:	b538      	push	{r3, r4, r5, lr}
 801e526:	4605      	mov	r5, r0
    if (settings.parking.flags.enabled) {
 801e528:	4b4e      	ldr	r3, [pc, #312]	@ (801e664 <initiate_hold+0x140>)
 801e52a:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801e52e:	f013 0f01 	tst.w	r3, #1
 801e532:	d151      	bne.n	801e5d8 <initiate_hold+0xb4>
    plan_block_t *block = plan_get_current_block();
 801e534:	f7f7 fdb2 	bl	801609c <plan_get_current_block>
 801e538:	4604      	mov	r4, r0
    restore_condition.spindle_num = 0;
 801e53a:	2000      	movs	r0, #0
 801e53c:	4b4a      	ldr	r3, [pc, #296]	@ (801e668 <initiate_hold+0x144>)
 801e53e:	7058      	strb	r0, [r3, #1]
        if((spindle = spindle_get(--spindle_num))) {
 801e540:	f7ff fc50 	bl	801dde4 <spindle_get>
 801e544:	4603      	mov	r3, r0
 801e546:	2800      	cmp	r0, #0
 801e548:	d069      	beq.n	801e61e <initiate_hold+0xfa>
            if(block && block->spindle.hal == spindle) {
 801e54a:	b114      	cbz	r4, 801e552 <initiate_hold+0x2e>
 801e54c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801e54e:	4282      	cmp	r2, r0
 801e550:	d051      	beq.n	801e5f6 <initiate_hold+0xd2>
            } else if(gc_state.spindle.hal == spindle) {
 801e552:	4a46      	ldr	r2, [pc, #280]	@ (801e66c <initiate_hold+0x148>)
 801e554:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 801e556:	429a      	cmp	r2, r3
 801e558:	d057      	beq.n	801e60a <initiate_hold+0xe6>
                restore_condition.spindle[spindle_num].hal = spindle;
 801e55a:	4a43      	ldr	r2, [pc, #268]	@ (801e668 <initiate_hold+0x144>)
 801e55c:	6113      	str	r3, [r2, #16]
                restore_condition.spindle[spindle_num].rpm = spindle->param->rpm;
 801e55e:	6859      	ldr	r1, [r3, #4]
 801e560:	6809      	ldr	r1, [r1, #0]
 801e562:	6051      	str	r1, [r2, #4]
                restore_condition.spindle[spindle_num].state = spindle->param->state;
 801e564:	685b      	ldr	r3, [r3, #4]
 801e566:	7a1b      	ldrb	r3, [r3, #8]
 801e568:	7213      	strb	r3, [r2, #8]
    if (block)
 801e56a:	2c00      	cmp	r4, #0
 801e56c:	d05b      	beq.n	801e626 <initiate_hold+0x102>
        restore_condition.coolant.mask = block->condition.coolant.mask;
 801e56e:	7da2      	ldrb	r2, [r4, #22]
 801e570:	4b3d      	ldr	r3, [pc, #244]	@ (801e668 <initiate_hold+0x144>)
 801e572:	701a      	strb	r2, [r3, #0]
    if (restore_condition.spindle[restore_condition.spindle_num].hal->cap.laser && settings.flags.disable_laser_during_hold)
 801e574:	4b3c      	ldr	r3, [pc, #240]	@ (801e668 <initiate_hold+0x144>)
 801e576:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801e57a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801e57e:	691b      	ldr	r3, [r3, #16]
 801e580:	7a9b      	ldrb	r3, [r3, #10]
 801e582:	f013 0f08 	tst.w	r3, #8
 801e586:	d005      	beq.n	801e594 <initiate_hold+0x70>
 801e588:	4b36      	ldr	r3, [pc, #216]	@ (801e664 <initiate_hold+0x140>)
 801e58a:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 801e58e:	f013 0f10 	tst.w	r3, #16
 801e592:	d152      	bne.n	801e63a <initiate_hold+0x116>
    if (sys_state & (STATE_CYCLE|STATE_JOG)) {
 801e594:	4b36      	ldr	r3, [pc, #216]	@ (801e670 <initiate_hold+0x14c>)
 801e596:	681b      	ldr	r3, [r3, #0]
 801e598:	f013 0f28 	tst.w	r3, #40	@ 0x28
 801e59c:	d151      	bne.n	801e642 <initiate_hold+0x11e>
    if (new_state == STATE_HOLD)
 801e59e:	2d10      	cmp	r5, #16
 801e5a0:	d05a      	beq.n	801e658 <initiate_hold+0x134>
        sys.parking_state = Parking_Retracting;
 801e5a2:	4b34      	ldr	r3, [pc, #208]	@ (801e674 <initiate_hold+0x150>)
 801e5a4:	2202      	movs	r2, #2
 801e5a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        park.flags.value = 0;
 801e5aa:	4b33      	ldr	r3, [pc, #204]	@ (801e678 <initiate_hold+0x154>)
 801e5ac:	2200      	movs	r2, #0
 801e5ae:	771a      	strb	r2, [r3, #28]
    sys.suspend = !sys.flags.soft_limit;
 801e5b0:	4a30      	ldr	r2, [pc, #192]	@ (801e674 <initiate_hold+0x150>)
 801e5b2:	7d93      	ldrb	r3, [r2, #22]
 801e5b4:	089b      	lsrs	r3, r3, #2
 801e5b6:	f083 0301 	eor.w	r3, r3, #1
 801e5ba:	f003 0301 	and.w	r3, r3, #1
 801e5be:	7093      	strb	r3, [r2, #2]
    pending_state = sys_state == STATE_JOG ? new_state : STATE_IDLE;
 801e5c0:	4b2b      	ldr	r3, [pc, #172]	@ (801e670 <initiate_hold+0x14c>)
 801e5c2:	6818      	ldr	r0, [r3, #0]
 801e5c4:	2820      	cmp	r0, #32
 801e5c6:	d000      	beq.n	801e5ca <initiate_hold+0xa6>
 801e5c8:	2500      	movs	r5, #0
 801e5ca:	4b2c      	ldr	r3, [pc, #176]	@ (801e67c <initiate_hold+0x158>)
 801e5cc:	601d      	str	r5, [r3, #0]
}
 801e5ce:	2808      	cmp	r0, #8
 801e5d0:	bf14      	ite	ne
 801e5d2:	2000      	movne	r0, #0
 801e5d4:	2001      	moveq	r0, #1
 801e5d6:	bd38      	pop	{r3, r4, r5, pc}
        plan_data_init(&park.plan_data);
 801e5d8:	4c29      	ldr	r4, [pc, #164]	@ (801e680 <initiate_hold+0x15c>)
 801e5da:	4620      	mov	r0, r4
 801e5dc:	f7f8 f85e 	bl	801669c <plan_data_init>
        park.plan_data.condition.system_motion = On;
 801e5e0:	7d22      	ldrb	r2, [r4, #20]
 801e5e2:	f042 0202 	orr.w	r2, r2, #2
 801e5e6:	7522      	strb	r2, [r4, #20]
        park.plan_data.condition.no_feed_override = On;
 801e5e8:	b2d2      	uxtb	r2, r2
 801e5ea:	f042 0210 	orr.w	r2, r2, #16
 801e5ee:	7522      	strb	r2, [r4, #20]
        park.plan_data.line_number = PARKING_MOTION_LINE_NUMBER;
 801e5f0:	2200      	movs	r2, #0
 801e5f2:	61e2      	str	r2, [r4, #28]
 801e5f4:	e79e      	b.n	801e534 <initiate_hold+0x10>
                restore_condition.spindle_num = spindle_num;
 801e5f6:	4b1c      	ldr	r3, [pc, #112]	@ (801e668 <initiate_hold+0x144>)
 801e5f8:	2100      	movs	r1, #0
 801e5fa:	7059      	strb	r1, [r3, #1]
                restore_condition.spindle[spindle_num].hal = block->spindle.hal;
 801e5fc:	611a      	str	r2, [r3, #16]
                restore_condition.spindle[spindle_num].rpm = block->spindle.rpm;
 801e5fe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801e600:	605a      	str	r2, [r3, #4]
                restore_condition.spindle[spindle_num].state = block->spindle.state;
 801e602:	f894 203c 	ldrb.w	r2, [r4, #60]	@ 0x3c
 801e606:	721a      	strb	r2, [r3, #8]
    if (block)
 801e608:	e7b1      	b.n	801e56e <initiate_hold+0x4a>
                restore_condition.spindle_num = spindle_num;
 801e60a:	4b17      	ldr	r3, [pc, #92]	@ (801e668 <initiate_hold+0x144>)
 801e60c:	2100      	movs	r1, #0
 801e60e:	7059      	strb	r1, [r3, #1]
                restore_condition.spindle[spindle_num].hal = gc_state.spindle.hal;
 801e610:	611a      	str	r2, [r3, #16]
                restore_condition.spindle[spindle_num].rpm = gc_state.spindle.rpm;
 801e612:	4a16      	ldr	r2, [pc, #88]	@ (801e66c <initiate_hold+0x148>)
 801e614:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 801e616:	6059      	str	r1, [r3, #4]
                restore_condition.spindle[spindle_num].state = gc_state.modal.spindle.state;
 801e618:	7e92      	ldrb	r2, [r2, #26]
 801e61a:	721a      	strb	r2, [r3, #8]
 801e61c:	e7a5      	b.n	801e56a <initiate_hold+0x46>
            restore_condition.spindle[spindle_num].hal = NULL;
 801e61e:	4b12      	ldr	r3, [pc, #72]	@ (801e668 <initiate_hold+0x144>)
 801e620:	2200      	movs	r2, #0
 801e622:	611a      	str	r2, [r3, #16]
 801e624:	e7a1      	b.n	801e56a <initiate_hold+0x46>
        restore_condition.coolant.mask = gc_state.modal.coolant.mask | hal.coolant.get_state().mask;
 801e626:	4b11      	ldr	r3, [pc, #68]	@ (801e66c <initiate_hold+0x148>)
 801e628:	7e5c      	ldrb	r4, [r3, #25]
 801e62a:	4b16      	ldr	r3, [pc, #88]	@ (801e684 <initiate_hold+0x160>)
 801e62c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e62e:	4798      	blx	r3
 801e630:	b2c0      	uxtb	r0, r0
 801e632:	4304      	orrs	r4, r0
 801e634:	4b0c      	ldr	r3, [pc, #48]	@ (801e668 <initiate_hold+0x144>)
 801e636:	701c      	strb	r4, [r3, #0]
 801e638:	e79c      	b.n	801e574 <initiate_hold+0x50>
        enqueue_spindle_override(CMD_OVERRIDE_SPINDLE_STOP);
 801e63a:	209e      	movs	r0, #158	@ 0x9e
 801e63c:	f7f7 fb18 	bl	8015c70 <enqueue_spindle_override>
 801e640:	e7a8      	b.n	801e594 <initiate_hold+0x70>
        st_update_plan_block_parameters();  // Notify stepper module to recompute for hold deceleration.
 801e642:	f000 ffd1 	bl	801f5e8 <st_update_plan_block_parameters>
        sys.step_control.execute_hold = On; // Initiate suspend state with active flag.
 801e646:	4a0b      	ldr	r2, [pc, #44]	@ (801e674 <initiate_hold+0x150>)
 801e648:	7e13      	ldrb	r3, [r2, #24]
 801e64a:	f043 0302 	orr.w	r3, r3, #2
 801e64e:	7613      	strb	r3, [r2, #24]
        stateHandler = state_await_hold;
 801e650:	4b0d      	ldr	r3, [pc, #52]	@ (801e688 <initiate_hold+0x164>)
 801e652:	4a0e      	ldr	r2, [pc, #56]	@ (801e68c <initiate_hold+0x168>)
 801e654:	601a      	str	r2, [r3, #0]
 801e656:	e7a2      	b.n	801e59e <initiate_hold+0x7a>
        sys.holding_state = Hold_Pending;
 801e658:	4b06      	ldr	r3, [pc, #24]	@ (801e674 <initiate_hold+0x150>)
 801e65a:	2202      	movs	r2, #2
 801e65c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801e660:	e7a6      	b.n	801e5b0 <initiate_hold+0x8c>
 801e662:	bf00      	nop
 801e664:	20001bc4 	.word	0x20001bc4
 801e668:	20001e4c 	.word	0x20001e4c
 801e66c:	20000ee4 	.word	0x20000ee4
 801e670:	20001e44 	.word	0x20001e44
 801e674:	2000148c 	.word	0x2000148c
 801e678:	20001dfc 	.word	0x20001dfc
 801e67c:	20001e48 	.word	0x20001e48
 801e680:	20001e1c 	.word	0x20001e1c
 801e684:	200011ac 	.word	0x200011ac
 801e688:	20000424 	.word	0x20000424
 801e68c:	0801edc1 	.word	0x0801edc1

0801e690 <enter_sleep>:
{
 801e690:	b508      	push	{r3, lr}
    st_go_idle();
 801e692:	f000 fd61 	bl	801f158 <st_go_idle>
    spindle_all_off();
 801e696:	f7ff fdb1 	bl	801e1fc <spindle_all_off>
    hal.coolant.set_state((coolant_state_t){0});
 801e69a:	4b06      	ldr	r3, [pc, #24]	@ (801e6b4 <enter_sleep+0x24>)
 801e69c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e69e:	f04f 0000 	mov.w	r0, #0
 801e6a2:	4798      	blx	r3
    grbl.report.feedback_message(Message_SleepMode);
 801e6a4:	4b04      	ldr	r3, [pc, #16]	@ (801e6b8 <enter_sleep+0x28>)
 801e6a6:	68db      	ldr	r3, [r3, #12]
 801e6a8:	200b      	movs	r0, #11
 801e6aa:	4798      	blx	r3
    stateHandler = state_noop;
 801e6ac:	4b03      	ldr	r3, [pc, #12]	@ (801e6bc <enter_sleep+0x2c>)
 801e6ae:	4a04      	ldr	r2, [pc, #16]	@ (801e6c0 <enter_sleep+0x30>)
 801e6b0:	601a      	str	r2, [r3, #0]
}
 801e6b2:	bd08      	pop	{r3, pc}
 801e6b4:	200011ac 	.word	0x200011ac
 801e6b8:	20001394 	.word	0x20001394
 801e6bc:	20000424 	.word	0x20000424
 801e6c0:	0801e245 	.word	0x0801e245

0801e6c4 <state_spindle_set_state>:
{
 801e6c4:	b508      	push	{r3, lr}
 801e6c6:	4603      	mov	r3, r0
    if(spindle->hal)
 801e6c8:	68c0      	ldr	r0, [r0, #12]
 801e6ca:	b120      	cbz	r0, 801e6d6 <state_spindle_set_state+0x12>
        spindle_set_state(spindle->hal, spindle->state, spindle->rpm);
 801e6cc:	ed93 0a00 	vldr	s0, [r3]
 801e6d0:	7919      	ldrb	r1, [r3, #4]
 801e6d2:	f7ff fc81 	bl	801dfd8 <spindle_set_state>
}
 801e6d6:	bd08      	pop	{r3, pc}

0801e6d8 <state_door_reopened>:
    return settings.parking.flags.enabled && park.flags.restart;
 801e6d8:	4b08      	ldr	r3, [pc, #32]	@ (801e6fc <state_door_reopened+0x24>)
 801e6da:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801e6de:	f013 0f01 	tst.w	r3, #1
 801e6e2:	d006      	beq.n	801e6f2 <state_door_reopened+0x1a>
 801e6e4:	4b06      	ldr	r3, [pc, #24]	@ (801e700 <state_door_reopened+0x28>)
 801e6e6:	7f1b      	ldrb	r3, [r3, #28]
 801e6e8:	f013 0f04 	tst.w	r3, #4
 801e6ec:	d103      	bne.n	801e6f6 <state_door_reopened+0x1e>
 801e6ee:	2000      	movs	r0, #0
 801e6f0:	4770      	bx	lr
 801e6f2:	2000      	movs	r0, #0
 801e6f4:	4770      	bx	lr
 801e6f6:	2001      	movs	r0, #1
}
 801e6f8:	4770      	bx	lr
 801e6fa:	bf00      	nop
 801e6fc:	20001bc4 	.word	0x20001bc4
 801e700:	20001dfc 	.word	0x20001dfc

0801e704 <state_get>:
}
 801e704:	4b01      	ldr	r3, [pc, #4]	@ (801e70c <state_get+0x8>)
 801e706:	6818      	ldr	r0, [r3, #0]
 801e708:	4770      	bx	lr
 801e70a:	bf00      	nop
 801e70c:	20001e44 	.word	0x20001e44

0801e710 <state_set>:
{
 801e710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(new_state != sys_state) {
 801e712:	4b8a      	ldr	r3, [pc, #552]	@ (801e93c <state_set+0x22c>)
 801e714:	681d      	ldr	r5, [r3, #0]
 801e716:	4285      	cmp	r5, r0
 801e718:	f000 80fd 	beq.w	801e916 <state_set+0x206>
 801e71c:	4604      	mov	r4, r0
        switch(new_state) {    // Set up new state and handler
 801e71e:	2820      	cmp	r0, #32
 801e720:	d825      	bhi.n	801e76e <state_set+0x5e>
 801e722:	2820      	cmp	r0, #32
 801e724:	f200 80e7 	bhi.w	801e8f6 <state_set+0x1e6>
 801e728:	e8df f010 	tbh	[pc, r0, lsl #1]
 801e72c:	00fe0053 	.word	0x00fe0053
 801e730:	00e500fe 	.word	0x00e500fe
 801e734:	00e500fe 	.word	0x00e500fe
 801e738:	00e500e5 	.word	0x00e500e5
 801e73c:	00e50065 	.word	0x00e50065
 801e740:	00e500e5 	.word	0x00e500e5
 801e744:	00e500e5 	.word	0x00e500e5
 801e748:	00e500e5 	.word	0x00e500e5
 801e74c:	00e500b9 	.word	0x00e500b9
 801e750:	00e500e5 	.word	0x00e500e5
 801e754:	00e500e5 	.word	0x00e500e5
 801e758:	00e500e5 	.word	0x00e500e5
 801e75c:	00e500e5 	.word	0x00e500e5
 801e760:	00e500e5 	.word	0x00e500e5
 801e764:	00e500e5 	.word	0x00e500e5
 801e768:	00e500e5 	.word	0x00e500e5
 801e76c:	00ab      	.short	0x00ab
 801e76e:	2880      	cmp	r0, #128	@ 0x80
 801e770:	d01a      	beq.n	801e7a8 <state_set+0x98>
 801e772:	d90d      	bls.n	801e790 <state_set+0x80>
 801e774:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 801e778:	f000 80d6 	beq.w	801e928 <state_set+0x218>
 801e77c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 801e780:	f040 80b9 	bne.w	801e8f6 <state_set+0x1e6>
                sys_state = new_state;
 801e784:	4b6d      	ldr	r3, [pc, #436]	@ (801e93c <state_set+0x22c>)
 801e786:	6018      	str	r0, [r3, #0]
                stateHandler = state_await_toolchanged;
 801e788:	4b6d      	ldr	r3, [pc, #436]	@ (801e940 <state_set+0x230>)
 801e78a:	4a6e      	ldr	r2, [pc, #440]	@ (801e944 <state_set+0x234>)
 801e78c:	601a      	str	r2, [r3, #0]
                break;
 801e78e:	e0b2      	b.n	801e8f6 <state_set+0x1e6>
        switch(new_state) {    // Set up new state and handler
 801e790:	2840      	cmp	r0, #64	@ 0x40
 801e792:	f040 80b0 	bne.w	801e8f6 <state_set+0x1e6>
                if ((sys_state & (STATE_ALARM|STATE_ESTOP|STATE_SLEEP|STATE_CHECK_MODE)))
 801e796:	f240 1383 	movw	r3, #387	@ 0x183
 801e79a:	421d      	tst	r5, r3
 801e79c:	f040 80bb 	bne.w	801e916 <state_set+0x206>
                grbl.report.feedback_message(Message_SafetyDoorAjar);
 801e7a0:	4b69      	ldr	r3, [pc, #420]	@ (801e948 <state_set+0x238>)
 801e7a2:	68db      	ldr	r3, [r3, #12]
 801e7a4:	2006      	movs	r0, #6
 801e7a6:	4798      	blx	r3
                sys.parking_state = Parking_Retracting;
 801e7a8:	4b68      	ldr	r3, [pc, #416]	@ (801e94c <state_set+0x23c>)
 801e7aa:	2202      	movs	r2, #2
 801e7ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                if (!initiate_hold(new_state)) {
 801e7b0:	4620      	mov	r0, r4
 801e7b2:	f7ff feb7 	bl	801e524 <initiate_hold>
 801e7b6:	2800      	cmp	r0, #0
 801e7b8:	f040 8097 	bne.w	801e8ea <state_set+0x1da>
                    if (pending_state != new_state) {
 801e7bc:	4b64      	ldr	r3, [pc, #400]	@ (801e950 <state_set+0x240>)
 801e7be:	681b      	ldr	r3, [r3, #0]
 801e7c0:	42a3      	cmp	r3, r4
 801e7c2:	f000 8094 	beq.w	801e8ee <state_set+0x1de>
                        sys_state = new_state;
 801e7c6:	4b5d      	ldr	r3, [pc, #372]	@ (801e93c <state_set+0x22c>)
 801e7c8:	601c      	str	r4, [r3, #0]
                        state_await_hold(EXEC_CYCLE_COMPLETE); // "Simulate" a cycle stop
 801e7ca:	2004      	movs	r0, #4
 801e7cc:	f000 faf8 	bl	801edc0 <state_await_hold>
 801e7d0:	e08d      	b.n	801e8ee <state_set+0x1de>
                sys.suspend = false;        // Break suspend state.
 801e7d2:	4a5e      	ldr	r2, [pc, #376]	@ (801e94c <state_set+0x23c>)
 801e7d4:	2300      	movs	r3, #0
 801e7d6:	7093      	strb	r3, [r2, #2]
                sys.step_control.flags = 0; // Restore step control to normal operation.
 801e7d8:	7613      	strb	r3, [r2, #24]
                sys.parking_state = Parking_DoorClosed;
 801e7da:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                sys.holding_state = Hold_NotHolding;
 801e7de:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
                sys_state = pending_state = new_state;
 801e7e2:	4a5b      	ldr	r2, [pc, #364]	@ (801e950 <state_set+0x240>)
 801e7e4:	6010      	str	r0, [r2, #0]
 801e7e6:	4a55      	ldr	r2, [pc, #340]	@ (801e93c <state_set+0x22c>)
 801e7e8:	6010      	str	r0, [r2, #0]
                park.flags.value = 0;
 801e7ea:	4a5a      	ldr	r2, [pc, #360]	@ (801e954 <state_set+0x244>)
 801e7ec:	7713      	strb	r3, [r2, #28]
                stateHandler = state_idle;
 801e7ee:	4b54      	ldr	r3, [pc, #336]	@ (801e940 <state_set+0x230>)
 801e7f0:	4a59      	ldr	r2, [pc, #356]	@ (801e958 <state_set+0x248>)
 801e7f2:	601a      	str	r2, [r3, #0]
                break;
 801e7f4:	e07f      	b.n	801e8f6 <state_set+0x1e6>
                if (sys_state == STATE_IDLE) {
 801e7f6:	2d00      	cmp	r5, #0
 801e7f8:	d17d      	bne.n	801e8f6 <state_set+0x1e6>
                    if ((block = plan_get_current_block())) {
 801e7fa:	f7f7 fc4f 	bl	801609c <plan_get_current_block>
 801e7fe:	4606      	mov	r6, r0
 801e800:	2800      	cmp	r0, #0
 801e802:	d078      	beq.n	801e8f6 <state_set+0x1e6>
                        sys_state = new_state;
 801e804:	4b4d      	ldr	r3, [pc, #308]	@ (801e93c <state_set+0x22c>)
 801e806:	601c      	str	r4, [r3, #0]
                        sys.steppers_deenergize = false;    // Cancel stepper deenergize if pending.
 801e808:	4b50      	ldr	r3, [pc, #320]	@ (801e94c <state_set+0x23c>)
 801e80a:	2200      	movs	r2, #0
 801e80c:	719a      	strb	r2, [r3, #6]
                        st_prep_buffer();                   // Initialize step segment buffer before beginning cycle.
 801e80e:	f000 ff87 	bl	801f720 <st_prep_buffer>
                        if (block->spindle.state.synchronized) {
 801e812:	f996 303c 	ldrsb.w	r3, [r6, #60]	@ 0x3c
 801e816:	2b00      	cmp	r3, #0
 801e818:	da2d      	bge.n	801e876 <state_set+0x166>
                            uint32_t ms = hal.get_elapsed_ticks();
 801e81a:	4b50      	ldr	r3, [pc, #320]	@ (801e95c <state_set+0x24c>)
 801e81c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 801e820:	4798      	blx	r3
 801e822:	4607      	mov	r7, r0
                            if (block->spindle.hal->reset_data)
 801e824:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 801e826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e828:	b103      	cbz	r3, 801e82c <state_set+0x11c>
                                block->spindle.hal->reset_data();
 801e82a:	4798      	blx	r3
                            uint32_t index = block->spindle.hal->get_data(SpindleData_Counters)->index_count + 2;
 801e82c:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 801e82e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e830:	2000      	movs	r0, #0
 801e832:	4798      	blx	r3
 801e834:	6944      	ldr	r4, [r0, #20]
 801e836:	3402      	adds	r4, #2
                            while(index != block->spindle.hal->get_data(SpindleData_Counters)->index_count) {
 801e838:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 801e83a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e83c:	2000      	movs	r0, #0
 801e83e:	4798      	blx	r3
 801e840:	6943      	ldr	r3, [r0, #20]
 801e842:	42a3      	cmp	r3, r4
 801e844:	d017      	beq.n	801e876 <state_set+0x166>
                                if(hal.get_elapsed_ticks() - ms > 5000) {
 801e846:	4b45      	ldr	r3, [pc, #276]	@ (801e95c <state_set+0x24c>)
 801e848:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 801e84c:	4798      	blx	r3
 801e84e:	1bc0      	subs	r0, r0, r7
 801e850:	f241 3388 	movw	r3, #5000	@ 0x1388
 801e854:	4298      	cmp	r0, r3
 801e856:	d80a      	bhi.n	801e86e <state_set+0x15e>
                                if(sys.rt_exec_state & (EXEC_RESET|EXEC_STOP)) {
 801e858:	4b3c      	ldr	r3, [pc, #240]	@ (801e94c <state_set+0x23c>)
 801e85a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e85c:	f013 0f30 	tst.w	r3, #48	@ 0x30
 801e860:	d0ea      	beq.n	801e838 <state_set+0x128>
                                    system_set_exec_state_flag(EXEC_RESET);
 801e862:	4b3e      	ldr	r3, [pc, #248]	@ (801e95c <state_set+0x24c>)
 801e864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e866:	2120      	movs	r1, #32
 801e868:	483d      	ldr	r0, [pc, #244]	@ (801e960 <state_set+0x250>)
 801e86a:	4798      	blx	r3
                                    return;
 801e86c:	e053      	b.n	801e916 <state_set+0x206>
                                    system_raise_alarm(Alarm_Spindle);
 801e86e:	200e      	movs	r0, #14
 801e870:	f002 feb8 	bl	80215e4 <system_raise_alarm>
                                    return;
 801e874:	e04f      	b.n	801e916 <state_set+0x206>
                        st_wake_up();
 801e876:	f000 fc61 	bl	801f13c <st_wake_up>
                        stateHandler = state_cycle;
 801e87a:	4b31      	ldr	r3, [pc, #196]	@ (801e940 <state_set+0x230>)
 801e87c:	4a39      	ldr	r2, [pc, #228]	@ (801e964 <state_set+0x254>)
 801e87e:	601a      	str	r2, [r3, #0]
 801e880:	e039      	b.n	801e8f6 <state_set+0x1e6>
                if (sys_state == STATE_TOOL_CHANGE)
 801e882:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 801e886:	d005      	beq.n	801e894 <state_set+0x184>
                sys_state = new_state;
 801e888:	4b2c      	ldr	r3, [pc, #176]	@ (801e93c <state_set+0x22c>)
 801e88a:	601c      	str	r4, [r3, #0]
                stateHandler = state_cycle;
 801e88c:	4b2c      	ldr	r3, [pc, #176]	@ (801e940 <state_set+0x230>)
 801e88e:	4a35      	ldr	r2, [pc, #212]	@ (801e964 <state_set+0x254>)
 801e890:	601a      	str	r2, [r3, #0]
                break;
 801e892:	e030      	b.n	801e8f6 <state_set+0x1e6>
                    pending_state = STATE_TOOL_CHANGE;
 801e894:	4b2e      	ldr	r3, [pc, #184]	@ (801e950 <state_set+0x240>)
 801e896:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e89a:	601a      	str	r2, [r3, #0]
 801e89c:	e7f4      	b.n	801e888 <state_set+0x178>
                if (sys.override.control.sync && sys.override.control.feed_hold_disable)
 801e89e:	4b2b      	ldr	r3, [pc, #172]	@ (801e94c <state_set+0x23c>)
 801e8a0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801e8a4:	f003 0282 	and.w	r2, r3, #130	@ 0x82
 801e8a8:	2a82      	cmp	r2, #130	@ 0x82
 801e8aa:	d018      	beq.n	801e8de <state_set+0x1ce>
                if (!((sys_state & STATE_JOG) || sys.override.control.feed_hold_disable)) {
 801e8ac:	f015 0f20 	tst.w	r5, #32
 801e8b0:	d121      	bne.n	801e8f6 <state_set+0x1e6>
 801e8b2:	f013 0f02 	tst.w	r3, #2
 801e8b6:	d11e      	bne.n	801e8f6 <state_set+0x1e6>
                    if (!initiate_hold(new_state)) {
 801e8b8:	4620      	mov	r0, r4
 801e8ba:	f7ff fe33 	bl	801e524 <initiate_hold>
 801e8be:	b930      	cbnz	r0, 801e8ce <state_set+0x1be>
                        sys.holding_state = Hold_Complete;
 801e8c0:	4b22      	ldr	r3, [pc, #136]	@ (801e94c <state_set+0x23c>)
 801e8c2:	2201      	movs	r2, #1
 801e8c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                        stateHandler = state_await_resume;
 801e8c8:	4b1d      	ldr	r3, [pc, #116]	@ (801e940 <state_set+0x230>)
 801e8ca:	4a27      	ldr	r2, [pc, #156]	@ (801e968 <state_set+0x258>)
 801e8cc:	601a      	str	r2, [r3, #0]
                    sys_state = new_state;
 801e8ce:	4b1b      	ldr	r3, [pc, #108]	@ (801e93c <state_set+0x22c>)
 801e8d0:	601c      	str	r4, [r3, #0]
                    sys.flags.feed_hold_pending = Off;
 801e8d2:	4b1e      	ldr	r3, [pc, #120]	@ (801e94c <state_set+0x23c>)
 801e8d4:	7d9a      	ldrb	r2, [r3, #22]
 801e8d6:	f36f 1245 	bfc	r2, #5, #1
 801e8da:	759a      	strb	r2, [r3, #22]
 801e8dc:	e00b      	b.n	801e8f6 <state_set+0x1e6>
                    sys.flags.feed_hold_pending = On;
 801e8de:	491b      	ldr	r1, [pc, #108]	@ (801e94c <state_set+0x23c>)
 801e8e0:	7d8a      	ldrb	r2, [r1, #22]
 801e8e2:	f042 0220 	orr.w	r2, r2, #32
 801e8e6:	758a      	strb	r2, [r1, #22]
 801e8e8:	e7e0      	b.n	801e8ac <state_set+0x19c>
                    sys_state = new_state;
 801e8ea:	4b14      	ldr	r3, [pc, #80]	@ (801e93c <state_set+0x22c>)
 801e8ec:	601c      	str	r4, [r3, #0]
                if(sys_state == STATE_SLEEP && stateHandler != state_await_waypoint_retract)
 801e8ee:	4b13      	ldr	r3, [pc, #76]	@ (801e93c <state_set+0x22c>)
 801e8f0:	681b      	ldr	r3, [r3, #0]
 801e8f2:	2b80      	cmp	r3, #128	@ 0x80
 801e8f4:	d010      	beq.n	801e918 <state_set+0x208>
        if(!(sys_state & (STATE_ALARM|STATE_ESTOP)))
 801e8f6:	4b11      	ldr	r3, [pc, #68]	@ (801e93c <state_set+0x22c>)
 801e8f8:	6818      	ldr	r0, [r3, #0]
 801e8fa:	f240 1301 	movw	r3, #257	@ 0x101
 801e8fe:	4218      	tst	r0, r3
 801e900:	d103      	bne.n	801e90a <state_set+0x1fa>
            sys.alarm = Alarm_None;
 801e902:	4b12      	ldr	r3, [pc, #72]	@ (801e94c <state_set+0x23c>)
 801e904:	2200      	movs	r2, #0
 801e906:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        if(sys_state != org_state && grbl.on_state_change)
 801e90a:	4285      	cmp	r5, r0
 801e90c:	d003      	beq.n	801e916 <state_set+0x206>
 801e90e:	4b0e      	ldr	r3, [pc, #56]	@ (801e948 <state_set+0x238>)
 801e910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e912:	b103      	cbz	r3, 801e916 <state_set+0x206>
            grbl.on_state_change(sys_state);
 801e914:	4798      	blx	r3
}
 801e916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(sys_state == STATE_SLEEP && stateHandler != state_await_waypoint_retract)
 801e918:	4b09      	ldr	r3, [pc, #36]	@ (801e940 <state_set+0x230>)
 801e91a:	681a      	ldr	r2, [r3, #0]
 801e91c:	4b13      	ldr	r3, [pc, #76]	@ (801e96c <state_set+0x25c>)
 801e91e:	429a      	cmp	r2, r3
 801e920:	d0e9      	beq.n	801e8f6 <state_set+0x1e6>
                    enter_sleep();
 801e922:	f7ff feb5 	bl	801e690 <enter_sleep>
 801e926:	e7e6      	b.n	801e8f6 <state_set+0x1e6>
                sys_state = new_state;
 801e928:	4b04      	ldr	r3, [pc, #16]	@ (801e93c <state_set+0x22c>)
 801e92a:	601c      	str	r4, [r3, #0]
                sys.suspend = false;
 801e92c:	4b07      	ldr	r3, [pc, #28]	@ (801e94c <state_set+0x23c>)
 801e92e:	2200      	movs	r2, #0
 801e930:	709a      	strb	r2, [r3, #2]
                stateHandler = state_noop;
 801e932:	4b03      	ldr	r3, [pc, #12]	@ (801e940 <state_set+0x230>)
 801e934:	4a0e      	ldr	r2, [pc, #56]	@ (801e970 <state_set+0x260>)
 801e936:	601a      	str	r2, [r3, #0]
                break;
 801e938:	e7dd      	b.n	801e8f6 <state_set+0x1e6>
 801e93a:	bf00      	nop
 801e93c:	20001e44 	.word	0x20001e44
 801e940:	20000424 	.word	0x20000424
 801e944:	0801ec71 	.word	0x0801ec71
 801e948:	20001394 	.word	0x20001394
 801e94c:	2000148c 	.word	0x2000148c
 801e950:	20001e48 	.word	0x20001e48
 801e954:	20001dfc 	.word	0x20001dfc
 801e958:	0801e975 	.word	0x0801e975
 801e95c:	200011ac 	.word	0x200011ac
 801e960:	200014d4 	.word	0x200014d4
 801e964:	0801ece5 	.word	0x0801ece5
 801e968:	0801e9ed 	.word	0x0801e9ed
 801e96c:	0801e289 	.word	0x0801e289
 801e970:	0801e245 	.word	0x0801e245

0801e974 <state_idle>:
{
 801e974:	b510      	push	{r4, lr}
 801e976:	4604      	mov	r4, r0
    if ((rt_exec & EXEC_CYCLE_START))
 801e978:	f010 0f02 	tst.w	r0, #2
 801e97c:	d112      	bne.n	801e9a4 <state_idle+0x30>
    if (rt_exec & EXEC_FEED_HOLD)
 801e97e:	f014 0f08 	tst.w	r4, #8
 801e982:	d113      	bne.n	801e9ac <state_idle+0x38>
    if ((rt_exec & EXEC_TOOL_CHANGE)) {
 801e984:	f414 7f00 	tst.w	r4, #512	@ 0x200
 801e988:	d008      	beq.n	801e99c <state_idle+0x28>
        hal.stream.suspend_read(true); // Block reading from input stream until tool change state is acknowledged
 801e98a:	4b0c      	ldr	r3, [pc, #48]	@ (801e9bc <state_idle+0x48>)
 801e98c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801e990:	2001      	movs	r0, #1
 801e992:	4798      	blx	r3
        state_set(STATE_TOOL_CHANGE);
 801e994:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801e998:	f7ff feba 	bl	801e710 <state_set>
    if (rt_exec & EXEC_SLEEP)
 801e99c:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801e9a0:	d108      	bne.n	801e9b4 <state_idle+0x40>
}
 801e9a2:	bd10      	pop	{r4, pc}
        state_set(STATE_CYCLE);
 801e9a4:	2008      	movs	r0, #8
 801e9a6:	f7ff feb3 	bl	801e710 <state_set>
 801e9aa:	e7e8      	b.n	801e97e <state_idle+0xa>
        state_set(STATE_HOLD);
 801e9ac:	2010      	movs	r0, #16
 801e9ae:	f7ff feaf 	bl	801e710 <state_set>
 801e9b2:	e7e7      	b.n	801e984 <state_idle+0x10>
        state_set(STATE_SLEEP);
 801e9b4:	2080      	movs	r0, #128	@ 0x80
 801e9b6:	f7ff feab 	bl	801e710 <state_set>
}
 801e9ba:	e7f2      	b.n	801e9a2 <state_idle+0x2e>
 801e9bc:	200011ac 	.word	0x200011ac

0801e9c0 <state_update>:
{
 801e9c0:	b510      	push	{r4, lr}
 801e9c2:	4604      	mov	r4, r0
    if((rt_exec & EXEC_SAFETY_DOOR) && sys_state != STATE_SAFETY_DOOR)
 801e9c4:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801e9c8:	d003      	beq.n	801e9d2 <state_update+0x12>
 801e9ca:	4b06      	ldr	r3, [pc, #24]	@ (801e9e4 <state_update+0x24>)
 801e9cc:	681b      	ldr	r3, [r3, #0]
 801e9ce:	2b40      	cmp	r3, #64	@ 0x40
 801e9d0:	d104      	bne.n	801e9dc <state_update+0x1c>
    stateHandler(rt_exec);
 801e9d2:	4b05      	ldr	r3, [pc, #20]	@ (801e9e8 <state_update+0x28>)
 801e9d4:	681b      	ldr	r3, [r3, #0]
 801e9d6:	4620      	mov	r0, r4
 801e9d8:	4798      	blx	r3
}
 801e9da:	bd10      	pop	{r4, pc}
        state_set(STATE_SAFETY_DOOR);
 801e9dc:	2040      	movs	r0, #64	@ 0x40
 801e9de:	f7ff fe97 	bl	801e710 <state_set>
 801e9e2:	e7f6      	b.n	801e9d2 <state_update+0x12>
 801e9e4:	20001e44 	.word	0x20001e44
 801e9e8:	20000424 	.word	0x20000424

0801e9ec <state_await_resume>:
{
 801e9ec:	b530      	push	{r4, r5, lr}
 801e9ee:	b085      	sub	sp, #20
 801e9f0:	4604      	mov	r4, r0
    if ((rt_exec & EXEC_CYCLE_COMPLETE) && settings.parking.flags.enabled) {
 801e9f2:	f010 0f04 	tst.w	r0, #4
 801e9f6:	d016      	beq.n	801ea26 <state_await_resume+0x3a>
 801e9f8:	4b82      	ldr	r3, [pc, #520]	@ (801ec04 <state_await_resume+0x218>)
 801e9fa:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801e9fe:	f013 0f01 	tst.w	r3, #1
 801ea02:	d010      	beq.n	801ea26 <state_await_resume+0x3a>
        if (sys.step_control.execute_sys_motion) {
 801ea04:	4b80      	ldr	r3, [pc, #512]	@ (801ec08 <state_await_resume+0x21c>)
 801ea06:	7e1b      	ldrb	r3, [r3, #24]
 801ea08:	f013 0f04 	tst.w	r3, #4
 801ea0c:	d11b      	bne.n	801ea46 <state_await_resume+0x5a>
        sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801ea0e:	4b7f      	ldr	r3, [pc, #508]	@ (801ec0c <state_await_resume+0x220>)
 801ea10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ea12:	4798      	blx	r3
 801ea14:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801ea18:	4b7b      	ldr	r3, [pc, #492]	@ (801ec08 <state_await_resume+0x21c>)
 801ea1a:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
        if(sys_state == STATE_SLEEP) {
 801ea1e:	4b7c      	ldr	r3, [pc, #496]	@ (801ec10 <state_await_resume+0x224>)
 801ea20:	681b      	ldr	r3, [r3, #0]
 801ea22:	2b80      	cmp	r3, #128	@ 0x80
 801ea24:	d017      	beq.n	801ea56 <state_await_resume+0x6a>
    if (rt_exec & EXEC_SLEEP)
 801ea26:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801ea2a:	d117      	bne.n	801ea5c <state_await_resume+0x70>
    if (rt_exec & EXEC_SAFETY_DOOR)
 801ea2c:	f014 0f40 	tst.w	r4, #64	@ 0x40
 801ea30:	d018      	beq.n	801ea64 <state_await_resume+0x78>
        sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801ea32:	4b76      	ldr	r3, [pc, #472]	@ (801ec0c <state_await_resume+0x220>)
 801ea34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ea36:	4798      	blx	r3
 801ea38:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801ea3c:	4b72      	ldr	r3, [pc, #456]	@ (801ec08 <state_await_resume+0x21c>)
 801ea3e:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
}
 801ea42:	b005      	add	sp, #20
 801ea44:	bd30      	pop	{r4, r5, pc}
            sys.step_control.execute_sys_motion = Off;
 801ea46:	4b70      	ldr	r3, [pc, #448]	@ (801ec08 <state_await_resume+0x21c>)
 801ea48:	7e1a      	ldrb	r2, [r3, #24]
 801ea4a:	f36f 0282 	bfc	r2, #2, #1
 801ea4e:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801ea50:	f000 fe20 	bl	801f694 <st_parking_restore_buffer>
 801ea54:	e7db      	b.n	801ea0e <state_await_resume+0x22>
            enter_sleep();
 801ea56:	f7ff fe1b 	bl	801e690 <enter_sleep>
            return;
 801ea5a:	e7f2      	b.n	801ea42 <state_await_resume+0x56>
        state_set(STATE_SLEEP);
 801ea5c:	2080      	movs	r0, #128	@ 0x80
 801ea5e:	f7ff fe57 	bl	801e710 <state_set>
 801ea62:	e7e3      	b.n	801ea2c <state_await_resume+0x40>
    else if (rt_exec & EXEC_CYCLE_START) {
 801ea64:	f014 0f02 	tst.w	r4, #2
 801ea68:	f000 80bb 	beq.w	801ebe2 <state_await_resume+0x1f6>
        if (sys_state == STATE_HOLD && !sys.override.spindle_stop.value)
 801ea6c:	4b68      	ldr	r3, [pc, #416]	@ (801ec10 <state_await_resume+0x224>)
 801ea6e:	681b      	ldr	r3, [r3, #0]
 801ea70:	2b10      	cmp	r3, #16
 801ea72:	d01b      	beq.n	801eaac <state_await_resume+0xc0>
        switch (sys_state) {
 801ea74:	2b80      	cmp	r3, #128	@ 0x80
 801ea76:	d053      	beq.n	801eb20 <state_await_resume+0x134>
 801ea78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ea7c:	d050      	beq.n	801eb20 <state_await_resume+0x134>
 801ea7e:	2b40      	cmp	r3, #64	@ 0x40
 801ea80:	d01f      	beq.n	801eac2 <state_await_resume+0xd6>
                if (!settings.flags.restore_after_feed_hold) {
 801ea82:	4b60      	ldr	r3, [pc, #384]	@ (801ec04 <state_await_resume+0x218>)
 801ea84:	f993 30fe 	ldrsb.w	r3, [r3, #254]	@ 0xfe
 801ea88:	2b00      	cmp	r3, #0
 801ea8a:	db74      	blt.n	801eb76 <state_await_resume+0x18a>
                    if (!restore_condition.spindle[restore_condition.spindle_num].hal->get_state(restore_condition.spindle[restore_condition.spindle_num].hal).on)
 801ea8c:	4b61      	ldr	r3, [pc, #388]	@ (801ec14 <state_await_resume+0x228>)
 801ea8e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801ea92:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801ea96:	6918      	ldr	r0, [r3, #16]
 801ea98:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801ea9a:	4798      	blx	r3
 801ea9c:	f010 0f01 	tst.w	r0, #1
 801eaa0:	d066      	beq.n	801eb70 <state_await_resume+0x184>
                    sys.override.spindle_stop.value = 0; // Clear spindle stop override states
 801eaa2:	4b59      	ldr	r3, [pc, #356]	@ (801ec08 <state_await_resume+0x21c>)
 801eaa4:	2200      	movs	r2, #0
 801eaa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 801eaaa:	e039      	b.n	801eb20 <state_await_resume+0x134>
        if (sys_state == STATE_HOLD && !sys.override.spindle_stop.value)
 801eaac:	4a56      	ldr	r2, [pc, #344]	@ (801ec08 <state_await_resume+0x21c>)
 801eaae:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 801eab2:	2a00      	cmp	r2, #0
 801eab4:	d1de      	bne.n	801ea74 <state_await_resume+0x88>
            sys.override.spindle_stop.restore_cycle = On;
 801eab6:	4954      	ldr	r1, [pc, #336]	@ (801ec08 <state_await_resume+0x21c>)
 801eab8:	f042 0208 	orr.w	r2, r2, #8
 801eabc:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
 801eac0:	e7d8      	b.n	801ea74 <state_await_resume+0x88>
                if (park.flags.restart || !hal.control.get_state().safety_door_ajar) {
 801eac2:	4b55      	ldr	r3, [pc, #340]	@ (801ec18 <state_await_resume+0x22c>)
 801eac4:	7f1b      	ldrb	r3, [r3, #28]
 801eac6:	f013 0f04 	tst.w	r3, #4
 801eaca:	d105      	bne.n	801ead8 <state_await_resume+0xec>
 801eacc:	4b4f      	ldr	r3, [pc, #316]	@ (801ec0c <state_await_resume+0x220>)
 801eace:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ead0:	4798      	blx	r3
 801ead2:	f010 0f08 	tst.w	r0, #8
 801ead6:	d123      	bne.n	801eb20 <state_await_resume+0x134>
                    stateHandler = state_restore;
 801ead8:	4b50      	ldr	r3, [pc, #320]	@ (801ec1c <state_await_resume+0x230>)
 801eada:	4a51      	ldr	r2, [pc, #324]	@ (801ec20 <state_await_resume+0x234>)
 801eadc:	601a      	str	r2, [r3, #0]
                    sys.parking_state = Parking_Resuming;
 801eade:	4b4a      	ldr	r3, [pc, #296]	@ (801ec08 <state_await_resume+0x21c>)
 801eae0:	2204      	movs	r2, #4
 801eae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                    if (park.flags.motion) {
 801eae6:	4b4c      	ldr	r3, [pc, #304]	@ (801ec18 <state_await_resume+0x22c>)
 801eae8:	7f1b      	ldrb	r3, [r3, #28]
 801eaea:	f013 0f02 	tst.w	r3, #2
 801eaee:	d013      	beq.n	801eb18 <state_await_resume+0x12c>
                        park.flags.restart = Off;
 801eaf0:	4b49      	ldr	r3, [pc, #292]	@ (801ec18 <state_await_resume+0x22c>)
 801eaf2:	7f1a      	ldrb	r2, [r3, #28]
 801eaf4:	f36f 0282 	bfc	r2, #2, #1
 801eaf8:	771a      	strb	r2, [r3, #28]
                        if (park.restore_target[settings.parking.axis] <= settings.parking.target) {
 801eafa:	4a42      	ldr	r2, [pc, #264]	@ (801ec04 <state_await_resume+0x218>)
 801eafc:	f892 4129 	ldrb.w	r4, [r2, #297]	@ 0x129
 801eb00:	1ca1      	adds	r1, r4, #2
 801eb02:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801eb06:	ed93 7a01 	vldr	s14, [r3, #4]
 801eb0a:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 801eb0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801eb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb16:	d912      	bls.n	801eb3e <state_await_resume+0x152>
                        stateHandler(EXEC_CYCLE_COMPLETE);
 801eb18:	4b40      	ldr	r3, [pc, #256]	@ (801ec1c <state_await_resume+0x230>)
 801eb1a:	681b      	ldr	r3, [r3, #0]
 801eb1c:	2004      	movs	r0, #4
 801eb1e:	4798      	blx	r3
        if (!(sys_state & (STATE_SLEEP|STATE_SAFETY_DOOR))) {
 801eb20:	4b3b      	ldr	r3, [pc, #236]	@ (801ec10 <state_await_resume+0x224>)
 801eb22:	681b      	ldr	r3, [r3, #0]
 801eb24:	f013 0fc0 	tst.w	r3, #192	@ 0xc0
 801eb28:	d18b      	bne.n	801ea42 <state_await_resume+0x56>
            step_control_t step_control = sys.step_control;
 801eb2a:	4c37      	ldr	r4, [pc, #220]	@ (801ec08 <state_await_resume+0x21c>)
 801eb2c:	7e25      	ldrb	r5, [r4, #24]
            state_set(STATE_IDLE);
 801eb2e:	2000      	movs	r0, #0
 801eb30:	f7ff fdee 	bl	801e710 <state_set>
            sys.step_control = step_control;
 801eb34:	7625      	strb	r5, [r4, #24]
            state_set(STATE_CYCLE);
 801eb36:	2008      	movs	r0, #8
 801eb38:	f7ff fdea 	bl	801e710 <state_set>
 801eb3c:	e781      	b.n	801ea42 <state_await_resume+0x56>
                            memcpy(target, park.restore_target, sizeof(target));
 801eb3e:	4b36      	ldr	r3, [pc, #216]	@ (801ec18 <state_await_resume+0x22c>)
 801eb40:	ad01      	add	r5, sp, #4
 801eb42:	f103 020c 	add.w	r2, r3, #12
 801eb46:	ca07      	ldmia	r2, {r0, r1, r2}
 801eb48:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                            target[settings.parking.axis] = park.retract_waypoint;
 801eb4c:	699a      	ldr	r2, [r3, #24]
 801eb4e:	a904      	add	r1, sp, #16
 801eb50:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801eb54:	f844 2c0c 	str.w	r2, [r4, #-12]
                            park.plan_data.feed_rate = settings.parking.rate;
 801eb58:	4a2a      	ldr	r2, [pc, #168]	@ (801ec04 <state_await_resume+0x218>)
 801eb5a:	f8d2 2130 	ldr.w	r2, [r2, #304]	@ 0x130
 801eb5e:	4619      	mov	r1, r3
 801eb60:	f841 2f20 	str.w	r2, [r1, #32]!
                            await_motion = mc_parking_motion(target, &park.plan_data);
 801eb64:	4628      	mov	r0, r5
 801eb66:	f7f5 fc6b 	bl	8014440 <mc_parking_motion>
                    if (!await_motion) // No motion, proceed to next step immediately.
 801eb6a:	2800      	cmp	r0, #0
 801eb6c:	d1d8      	bne.n	801eb20 <state_await_resume+0x134>
 801eb6e:	e7d3      	b.n	801eb18 <state_await_resume+0x12c>
                        gc_spindle_off();
 801eb70:	f7ee f924 	bl	800cdbc <gc_spindle_off>
 801eb74:	e795      	b.n	801eaa2 <state_await_resume+0xb6>
                    if (restore_condition.spindle[restore_condition.spindle_num].state.on != restore_condition.spindle[restore_condition.spindle_num].hal->get_state(restore_condition.spindle[restore_condition.spindle_num].hal).on) {
 801eb76:	4b27      	ldr	r3, [pc, #156]	@ (801ec14 <state_await_resume+0x228>)
 801eb78:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801eb7c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801eb80:	7a1c      	ldrb	r4, [r3, #8]
 801eb82:	f004 0401 	and.w	r4, r4, #1
 801eb86:	6918      	ldr	r0, [r3, #16]
 801eb88:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801eb8a:	4798      	blx	r3
 801eb8c:	f000 0001 	and.w	r0, r0, #1
 801eb90:	4284      	cmp	r4, r0
 801eb92:	d00b      	beq.n	801ebac <state_await_resume+0x1c0>
                        grbl.report.feedback_message(Message_SpindleRestore);
 801eb94:	4b23      	ldr	r3, [pc, #140]	@ (801ec24 <state_await_resume+0x238>)
 801eb96:	68db      	ldr	r3, [r3, #12]
 801eb98:	200a      	movs	r0, #10
 801eb9a:	4798      	blx	r3
                        state_spindle_restore(&restore_condition.spindle[restore_condition.spindle_num]);
 801eb9c:	481d      	ldr	r0, [pc, #116]	@ (801ec14 <state_await_resume+0x228>)
 801eb9e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801eba2:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 801eba6:	3004      	adds	r0, #4
 801eba8:	f7ff fc0e 	bl	801e3c8 <state_spindle_restore>
                    if (restore_condition.coolant.value != hal.coolant.get_state().value) {
 801ebac:	4b19      	ldr	r3, [pc, #100]	@ (801ec14 <state_await_resume+0x228>)
 801ebae:	781c      	ldrb	r4, [r3, #0]
 801ebb0:	4b16      	ldr	r3, [pc, #88]	@ (801ec0c <state_await_resume+0x220>)
 801ebb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ebb4:	4798      	blx	r3
 801ebb6:	b2c0      	uxtb	r0, r0
 801ebb8:	4284      	cmp	r4, r0
 801ebba:	d107      	bne.n	801ebcc <state_await_resume+0x1e0>
                    sys.override.spindle_stop.value = 0; // Clear spindle stop override states
 801ebbc:	2000      	movs	r0, #0
 801ebbe:	4b12      	ldr	r3, [pc, #72]	@ (801ec08 <state_await_resume+0x21c>)
 801ebc0:	f883 0028 	strb.w	r0, [r3, #40]	@ 0x28
                    grbl.report.feedback_message(Message_None);
 801ebc4:	4b17      	ldr	r3, [pc, #92]	@ (801ec24 <state_await_resume+0x238>)
 801ebc6:	68db      	ldr	r3, [r3, #12]
 801ebc8:	4798      	blx	r3
 801ebca:	e7a9      	b.n	801eb20 <state_await_resume+0x134>
                        gc_coolant(restore_condition.coolant);
 801ebcc:	4b11      	ldr	r3, [pc, #68]	@ (801ec14 <state_await_resume+0x228>)
 801ebce:	7818      	ldrb	r0, [r3, #0]
 801ebd0:	f7ee f902 	bl	800cdd8 <gc_coolant>
                        delay_sec(settings.safety_door.coolant_on_delay, DelayMode_SysSuspend);
 801ebd4:	2001      	movs	r0, #1
 801ebd6:	4b0b      	ldr	r3, [pc, #44]	@ (801ec04 <state_await_resume+0x218>)
 801ebd8:	ed93 0a51 	vldr	s0, [r3, #324]	@ 0x144
 801ebdc:	f7f6 fc60 	bl	80154a0 <delay_sec>
 801ebe0:	e7ec      	b.n	801ebbc <state_await_resume+0x1d0>
    } else if ((rt_exec & EXEC_DOOR_CLOSED) && !hal.control.get_state().safety_door_ajar)
 801ebe2:	f414 4f80 	tst.w	r4, #16384	@ 0x4000
 801ebe6:	f43f af2c 	beq.w	801ea42 <state_await_resume+0x56>
 801ebea:	4b08      	ldr	r3, [pc, #32]	@ (801ec0c <state_await_resume+0x220>)
 801ebec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ebee:	4798      	blx	r3
 801ebf0:	f010 0f08 	tst.w	r0, #8
 801ebf4:	f47f af25 	bne.w	801ea42 <state_await_resume+0x56>
        sys.parking_state = Parking_DoorClosed;
 801ebf8:	4b03      	ldr	r3, [pc, #12]	@ (801ec08 <state_await_resume+0x21c>)
 801ebfa:	2200      	movs	r2, #0
 801ebfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 801ec00:	e71f      	b.n	801ea42 <state_await_resume+0x56>
 801ec02:	bf00      	nop
 801ec04:	20001bc4 	.word	0x20001bc4
 801ec08:	2000148c 	.word	0x2000148c
 801ec0c:	200011ac 	.word	0x200011ac
 801ec10:	20001e44 	.word	0x20001e44
 801ec14:	20001e4c 	.word	0x20001e4c
 801ec18:	20001dfc 	.word	0x20001dfc
 801ec1c:	20000424 	.word	0x20000424
 801ec20:	0801e455 	.word	0x0801e455
 801ec24:	20001394 	.word	0x20001394

0801ec28 <state_await_resumed>:

/*! /brief Waits until slow plunge motion is complete then restart the cycle.
Note: A safety door event during the motion will halt it and restart the retract sequence.
 */
static void state_await_resumed (uint_fast16_t rt_exec)
{
 801ec28:	b508      	push	{r3, lr}
    if (rt_exec & EXEC_SAFETY_DOOR)
 801ec2a:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801ec2e:	d113      	bne.n	801ec58 <state_await_resumed+0x30>
        restart_retract();

    else if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801ec30:	f010 0f04 	tst.w	r0, #4
 801ec34:	d00f      	beq.n	801ec56 <state_await_resumed+0x2e>
        sys.parking_state = Parking_DoorClosed;
 801ec36:	4b0c      	ldr	r3, [pc, #48]	@ (801ec68 <state_await_resumed+0x40>)
 801ec38:	2200      	movs	r2, #0
 801ec3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        park.flags.value = 0;
 801ec3e:	490b      	ldr	r1, [pc, #44]	@ (801ec6c <state_await_resumed+0x44>)
 801ec40:	770a      	strb	r2, [r1, #28]
        if (sys.step_control.execute_sys_motion) {
 801ec42:	7e1b      	ldrb	r3, [r3, #24]
 801ec44:	f013 0f04 	tst.w	r3, #4
 801ec48:	d109      	bne.n	801ec5e <state_await_resumed+0x36>
            sys.step_control.flags = 0;
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
        }
        state_set(STATE_IDLE);
 801ec4a:	2000      	movs	r0, #0
 801ec4c:	f7ff fd60 	bl	801e710 <state_set>
        state_set(STATE_CYCLE);
 801ec50:	2008      	movs	r0, #8
 801ec52:	f7ff fd5d 	bl	801e710 <state_set>
    }
}
 801ec56:	bd08      	pop	{r3, pc}
        restart_retract();
 801ec58:	f7ff fb86 	bl	801e368 <restart_retract>
 801ec5c:	e7fb      	b.n	801ec56 <state_await_resumed+0x2e>
            sys.step_control.flags = 0;
 801ec5e:	4b02      	ldr	r3, [pc, #8]	@ (801ec68 <state_await_resumed+0x40>)
 801ec60:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801ec62:	f000 fd17 	bl	801f694 <st_parking_restore_buffer>
 801ec66:	e7f0      	b.n	801ec4a <state_await_resumed+0x22>
 801ec68:	2000148c 	.word	0x2000148c
 801ec6c:	20001dfc 	.word	0x20001dfc

0801ec70 <state_await_toolchanged>:
    if (rt_exec & EXEC_CYCLE_START) {
 801ec70:	f010 0f02 	tst.w	r0, #2
 801ec74:	d02b      	beq.n	801ecce <state_await_toolchanged+0x5e>
{
 801ec76:	b508      	push	{r3, lr}
        if (!gc_state.tool_change) {
 801ec78:	4b15      	ldr	r3, [pc, #84]	@ (801ecd0 <state_await_toolchanged+0x60>)
 801ec7a:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801ec7e:	b983      	cbnz	r3, 801eca2 <state_await_toolchanged+0x32>
            if (hal.stream.suspend_read)
 801ec80:	4b14      	ldr	r3, [pc, #80]	@ (801ecd4 <state_await_toolchanged+0x64>)
 801ec82:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801ec86:	b10b      	cbz	r3, 801ec8c <state_await_toolchanged+0x1c>
                hal.stream.suspend_read(false); // Tool change complete, restore "normal" stream input.
 801ec88:	2000      	movs	r0, #0
 801ec8a:	4798      	blx	r3
            if(grbl.on_tool_changed)
 801ec8c:	4b12      	ldr	r3, [pc, #72]	@ (801ecd8 <state_await_toolchanged+0x68>)
 801ec8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ec92:	b11b      	cbz	r3, 801ec9c <state_await_toolchanged+0x2c>
                grbl.on_tool_changed(gc_state.tool);
 801ec94:	4a0e      	ldr	r2, [pc, #56]	@ (801ecd0 <state_await_toolchanged+0x60>)
 801ec96:	f8d2 00d0 	ldr.w	r0, [r2, #208]	@ 0xd0
 801ec9a:	4798      	blx	r3
            system_add_rt_report(Report_Tool);
 801ec9c:	2080      	movs	r0, #128	@ 0x80
 801ec9e:	f002 fcef 	bl	8021680 <system_add_rt_report>
        pending_state = gc_state.tool_change ? STATE_TOOL_CHANGE : STATE_IDLE;
 801eca2:	4b0b      	ldr	r3, [pc, #44]	@ (801ecd0 <state_await_toolchanged+0x60>)
 801eca4:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801eca8:	b17b      	cbz	r3, 801ecca <state_await_toolchanged+0x5a>
 801ecaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801ecae:	4b0b      	ldr	r3, [pc, #44]	@ (801ecdc <state_await_toolchanged+0x6c>)
 801ecb0:	601a      	str	r2, [r3, #0]
        state_set(STATE_IDLE);
 801ecb2:	2000      	movs	r0, #0
 801ecb4:	f7ff fd2c 	bl	801e710 <state_set>
        state_set(STATE_CYCLE);
 801ecb8:	2008      	movs	r0, #8
 801ecba:	f7ff fd29 	bl	801e710 <state_set>
        system_set_exec_state_flag(EXEC_STATUS_REPORT);
 801ecbe:	4b05      	ldr	r3, [pc, #20]	@ (801ecd4 <state_await_toolchanged+0x64>)
 801ecc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ecc2:	2101      	movs	r1, #1
 801ecc4:	4806      	ldr	r0, [pc, #24]	@ (801ece0 <state_await_toolchanged+0x70>)
 801ecc6:	4798      	blx	r3
}
 801ecc8:	bd08      	pop	{r3, pc}
        pending_state = gc_state.tool_change ? STATE_TOOL_CHANGE : STATE_IDLE;
 801ecca:	2200      	movs	r2, #0
 801eccc:	e7ef      	b.n	801ecae <state_await_toolchanged+0x3e>
 801ecce:	4770      	bx	lr
 801ecd0:	20000ee4 	.word	0x20000ee4
 801ecd4:	200011ac 	.word	0x200011ac
 801ecd8:	20001394 	.word	0x20001394
 801ecdc:	20001e48 	.word	0x20001e48
 801ece0:	200014d4 	.word	0x200014d4

0801ece4 <state_cycle>:
    if (rt_exec == EXEC_CYCLE_START)
 801ece4:	2802      	cmp	r0, #2
 801ece6:	d02e      	beq.n	801ed46 <state_cycle+0x62>
{
 801ece8:	b510      	push	{r4, lr}
 801ecea:	4604      	mov	r4, r0
    if ((rt_exec & EXEC_TOOL_CHANGE))
 801ecec:	f410 7f00 	tst.w	r0, #512	@ 0x200
 801ecf0:	d004      	beq.n	801ecfc <state_cycle+0x18>
        hal.stream.suspend_read(true); // Block reading from input stream until tool change state is acknowledged
 801ecf2:	4b15      	ldr	r3, [pc, #84]	@ (801ed48 <state_cycle+0x64>)
 801ecf4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801ecf8:	2001      	movs	r0, #1
 801ecfa:	4798      	blx	r3
    if (rt_exec & EXEC_CYCLE_COMPLETE)
 801ecfc:	f014 0f04 	tst.w	r4, #4
 801ed00:	d007      	beq.n	801ed12 <state_cycle+0x2e>
        state_set(gc_state.tool_change ? STATE_TOOL_CHANGE : STATE_IDLE);
 801ed02:	4b12      	ldr	r3, [pc, #72]	@ (801ed4c <state_cycle+0x68>)
 801ed04:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801ed08:	b153      	cbz	r3, 801ed20 <state_cycle+0x3c>
 801ed0a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801ed0e:	f7ff fcff 	bl	801e710 <state_set>
    if (rt_exec & EXEC_MOTION_CANCEL) {
 801ed12:	f014 0f80 	tst.w	r4, #128	@ 0x80
 801ed16:	d105      	bne.n	801ed24 <state_cycle+0x40>
    if ((rt_exec & EXEC_FEED_HOLD))
 801ed18:	f014 0f08 	tst.w	r4, #8
 801ed1c:	d10f      	bne.n	801ed3e <state_cycle+0x5a>
}
 801ed1e:	bd10      	pop	{r4, pc}
        state_set(gc_state.tool_change ? STATE_TOOL_CHANGE : STATE_IDLE);
 801ed20:	2000      	movs	r0, #0
 801ed22:	e7f4      	b.n	801ed0e <state_cycle+0x2a>
        st_update_plan_block_parameters();  // Notify stepper module to recompute for hold deceleration.
 801ed24:	f000 fc60 	bl	801f5e8 <st_update_plan_block_parameters>
        sys.suspend = true;
 801ed28:	4b09      	ldr	r3, [pc, #36]	@ (801ed50 <state_cycle+0x6c>)
 801ed2a:	2201      	movs	r2, #1
 801ed2c:	709a      	strb	r2, [r3, #2]
        sys.step_control.execute_hold = On; // Initiate suspend state with active flag.
 801ed2e:	7e1a      	ldrb	r2, [r3, #24]
 801ed30:	f042 0202 	orr.w	r2, r2, #2
 801ed34:	761a      	strb	r2, [r3, #24]
        stateHandler = state_await_motion_cancel;
 801ed36:	4b07      	ldr	r3, [pc, #28]	@ (801ed54 <state_cycle+0x70>)
 801ed38:	4a07      	ldr	r2, [pc, #28]	@ (801ed58 <state_cycle+0x74>)
 801ed3a:	601a      	str	r2, [r3, #0]
 801ed3c:	e7ec      	b.n	801ed18 <state_cycle+0x34>
        state_set(STATE_HOLD);
 801ed3e:	2010      	movs	r0, #16
 801ed40:	f7ff fce6 	bl	801e710 <state_set>
 801ed44:	e7eb      	b.n	801ed1e <state_cycle+0x3a>
 801ed46:	4770      	bx	lr
 801ed48:	200011ac 	.word	0x200011ac
 801ed4c:	20000ee4 	.word	0x20000ee4
 801ed50:	2000148c 	.word	0x2000148c
 801ed54:	20000424 	.word	0x20000424
 801ed58:	0801ed5d 	.word	0x0801ed5d

0801ed5c <state_await_motion_cancel>:
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801ed5c:	f010 0f04 	tst.w	r0, #4
 801ed60:	d022      	beq.n	801eda8 <state_await_motion_cancel+0x4c>
{
 801ed62:	b538      	push	{r3, r4, r5, lr}
        if (sys_state == STATE_JOG) {
 801ed64:	4b11      	ldr	r3, [pc, #68]	@ (801edac <state_await_motion_cancel+0x50>)
 801ed66:	681b      	ldr	r3, [r3, #0]
 801ed68:	2b20      	cmp	r3, #32
 801ed6a:	d008      	beq.n	801ed7e <state_await_motion_cancel+0x22>
        state_set(pending_state);
 801ed6c:	4b10      	ldr	r3, [pc, #64]	@ (801edb0 <state_await_motion_cancel+0x54>)
 801ed6e:	6818      	ldr	r0, [r3, #0]
 801ed70:	f7ff fcce 	bl	801e710 <state_set>
        if (gc_state.tool_change)
 801ed74:	4b0f      	ldr	r3, [pc, #60]	@ (801edb4 <state_await_motion_cancel+0x58>)
 801ed76:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801ed7a:	b983      	cbnz	r3, 801ed9e <state_await_motion_cancel+0x42>
}
 801ed7c:	bd38      	pop	{r3, r4, r5, pc}
            sys.step_control.flags = 0;
 801ed7e:	4c0e      	ldr	r4, [pc, #56]	@ (801edb8 <state_await_motion_cancel+0x5c>)
 801ed80:	2500      	movs	r5, #0
 801ed82:	7625      	strb	r5, [r4, #24]
            plan_reset();
 801ed84:	f7f7 f8e6 	bl	8015f54 <plan_reset>
            st_reset();
 801ed88:	f000 fba0 	bl	801f4cc <st_reset>
            sync_position();
 801ed8c:	f7f7 fc10 	bl	80165b0 <plan_sync_position>
 801ed90:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 801ed94:	4809      	ldr	r0, [pc, #36]	@ (801edbc <state_await_motion_cancel+0x60>)
 801ed96:	f002 fbcf 	bl	8021538 <system_convert_array_steps_to_mpos>
            sys.suspend = false;
 801ed9a:	70a5      	strb	r5, [r4, #2]
 801ed9c:	e7e6      	b.n	801ed6c <state_await_motion_cancel+0x10>
            state_set(STATE_TOOL_CHANGE);
 801ed9e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801eda2:	f7ff fcb5 	bl	801e710 <state_set>
}
 801eda6:	e7e9      	b.n	801ed7c <state_await_motion_cancel+0x20>
 801eda8:	4770      	bx	lr
 801edaa:	bf00      	nop
 801edac:	20001e44 	.word	0x20001e44
 801edb0:	20001e48 	.word	0x20001e48
 801edb4:	20000ee4 	.word	0x20000ee4
 801edb8:	2000148c 	.word	0x2000148c
 801edbc:	20000f4c 	.word	0x20000f4c

0801edc0 <state_await_hold>:
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801edc0:	f010 0f04 	tst.w	r0, #4
 801edc4:	d100      	bne.n	801edc8 <state_await_hold+0x8>
 801edc6:	4770      	bx	lr
{
 801edc8:	b510      	push	{r4, lr}
        plan_cycle_reinitialize();
 801edca:	f7f7 fc19 	bl	8016600 <plan_cycle_reinitialize>
        sys.step_control.flags = 0;
 801edce:	4b84      	ldr	r3, [pc, #528]	@ (801efe0 <state_await_hold+0x220>)
 801edd0:	2200      	movs	r2, #0
 801edd2:	761a      	strb	r2, [r3, #24]
        if (sys.alarm_pending) {
 801edd4:	7d19      	ldrb	r1, [r3, #20]
 801edd6:	b139      	cbz	r1, 801ede8 <state_await_hold+0x28>
            system_set_exec_alarm(sys.alarm_pending);
 801edd8:	4b82      	ldr	r3, [pc, #520]	@ (801efe4 <state_await_hold+0x224>)
 801edda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801eddc:	4c82      	ldr	r4, [pc, #520]	@ (801efe8 <state_await_hold+0x228>)
 801edde:	4620      	mov	r0, r4
 801ede0:	4798      	blx	r3
            sys.alarm_pending = Alarm_None;
 801ede2:	2300      	movs	r3, #0
 801ede4:	f804 3c38 	strb.w	r3, [r4, #-56]
        switch (sys_state) {
 801ede8:	4b80      	ldr	r3, [pc, #512]	@ (801efec <state_await_hold+0x22c>)
 801edea:	681b      	ldr	r3, [r3, #0]
 801edec:	2b80      	cmp	r3, #128	@ 0x80
 801edee:	d01a      	beq.n	801ee26 <state_await_hold+0x66>
 801edf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801edf4:	d00f      	beq.n	801ee16 <state_await_hold+0x56>
 801edf6:	2b40      	cmp	r3, #64	@ 0x40
 801edf8:	d015      	beq.n	801ee26 <state_await_hold+0x66>
            if(sys.flags.soft_limit)
 801edfa:	4b79      	ldr	r3, [pc, #484]	@ (801efe0 <state_await_hold+0x220>)
 801edfc:	7d9b      	ldrb	r3, [r3, #22]
 801edfe:	f013 0f04 	tst.w	r3, #4
 801ee02:	f040 80e8 	bne.w	801efd6 <state_await_hold+0x216>
                sys.holding_state = Hold_Complete;
 801ee06:	4b76      	ldr	r3, [pc, #472]	@ (801efe0 <state_await_hold+0x220>)
 801ee08:	2201      	movs	r2, #1
 801ee0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                stateHandler = state_await_resume;
 801ee0e:	4b78      	ldr	r3, [pc, #480]	@ (801eff0 <state_await_hold+0x230>)
 801ee10:	4a78      	ldr	r2, [pc, #480]	@ (801eff4 <state_await_hold+0x234>)
 801ee12:	601a      	str	r2, [r3, #0]
}
 801ee14:	bd10      	pop	{r4, pc}
                spindle_all_off(); // De-energize
 801ee16:	f7ff f9f1 	bl	801e1fc <spindle_all_off>
                hal.coolant.set_state((coolant_state_t){0}); // De-energize
 801ee1a:	4b72      	ldr	r3, [pc, #456]	@ (801efe4 <state_await_hold+0x224>)
 801ee1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ee1e:	f04f 0000 	mov.w	r0, #0
 801ee22:	4798      	blx	r3
        if (!handler_changed) {
 801ee24:	e7e9      	b.n	801edfa <state_await_hold+0x3a>
                sys.override.spindle_stop.value = 0;
 801ee26:	4b6e      	ldr	r3, [pc, #440]	@ (801efe0 <state_await_hold+0x220>)
 801ee28:	2200      	movs	r2, #0
 801ee2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                if (settings.parking.flags.enabled && !sys.override.control.parking_disable && settings.mode != Mode_Laser) {
 801ee2e:	4b72      	ldr	r3, [pc, #456]	@ (801eff8 <state_await_hold+0x238>)
 801ee30:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801ee34:	f013 0f01 	tst.w	r3, #1
 801ee38:	f000 80b3 	beq.w	801efa2 <state_await_hold+0x1e2>
 801ee3c:	4b68      	ldr	r3, [pc, #416]	@ (801efe0 <state_await_hold+0x220>)
 801ee3e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801ee42:	f013 0f08 	tst.w	r3, #8
 801ee46:	f040 80ac 	bne.w	801efa2 <state_await_hold+0x1e2>
 801ee4a:	4b6b      	ldr	r3, [pc, #428]	@ (801eff8 <state_await_hold+0x238>)
 801ee4c:	7e1b      	ldrb	r3, [r3, #24]
 801ee4e:	2b01      	cmp	r3, #1
 801ee50:	f000 80a7 	beq.w	801efa2 <state_await_hold+0x1e2>
                    if (!park.flags.active) {
 801ee54:	4b69      	ldr	r3, [pc, #420]	@ (801effc <state_await_hold+0x23c>)
 801ee56:	7f1b      	ldrb	r3, [r3, #28]
 801ee58:	f013 0f01 	tst.w	r3, #1
 801ee5c:	d05d      	beq.n	801ef1a <state_await_hold+0x15a>
                    if (bit_istrue(sys.homed.mask, bit(settings.parking.axis)) && (park.restore_target[settings.parking.axis] < settings.parking.target)) {
 801ee5e:	4b60      	ldr	r3, [pc, #384]	@ (801efe0 <state_await_hold+0x220>)
 801ee60:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 801ee64:	4a64      	ldr	r2, [pc, #400]	@ (801eff8 <state_await_hold+0x238>)
 801ee66:	f892 4129 	ldrb.w	r4, [r2, #297]	@ 0x129
 801ee6a:	40e3      	lsrs	r3, r4
 801ee6c:	f013 0f01 	tst.w	r3, #1
 801ee70:	d07d      	beq.n	801ef6e <state_await_hold+0x1ae>
 801ee72:	1ca2      	adds	r2, r4, #2
 801ee74:	4b61      	ldr	r3, [pc, #388]	@ (801effc <state_await_hold+0x23c>)
 801ee76:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801ee7a:	ed93 7a01 	vldr	s14, [r3, #4]
 801ee7e:	4b5e      	ldr	r3, [pc, #376]	@ (801eff8 <state_await_hold+0x238>)
 801ee80:	edd3 7a4b 	vldr	s15, [r3, #300]	@ 0x12c
 801ee84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ee88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee8c:	d56f      	bpl.n	801ef6e <state_await_hold+0x1ae>
                        stateHandler = state_await_waypoint_retract;
 801ee8e:	4b58      	ldr	r3, [pc, #352]	@ (801eff0 <state_await_hold+0x230>)
 801ee90:	4a5b      	ldr	r2, [pc, #364]	@ (801f000 <state_await_hold+0x240>)
 801ee92:	601a      	str	r2, [r3, #0]
                        if(park.flags.restart)
 801ee94:	4b59      	ldr	r3, [pc, #356]	@ (801effc <state_await_hold+0x23c>)
 801ee96:	7f1b      	ldrb	r3, [r3, #28]
 801ee98:	f013 0f04 	tst.w	r3, #4
 801ee9c:	d147      	bne.n	801ef2e <state_await_hold+0x16e>
                            memcpy(park.target, park.restore_target, sizeof(park.target));
 801ee9e:	4b57      	ldr	r3, [pc, #348]	@ (801effc <state_await_hold+0x23c>)
 801eea0:	f103 020c 	add.w	r2, r3, #12
 801eea4:	ca07      	ldmia	r2, {r0, r1, r2}
 801eea6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                            park.retract_waypoint = settings.parking.pullout_increment + park.target[settings.parking.axis];
 801eeaa:	4a53      	ldr	r2, [pc, #332]	@ (801eff8 <state_await_hold+0x238>)
 801eeac:	ed92 7a4e 	vldr	s14, [r2, #312]	@ 0x138
 801eeb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801eeb4:	edd4 6a00 	vldr	s13, [r4]
 801eeb8:	ee37 7a26 	vadd.f32	s14, s14, s13
 801eebc:	ed83 7a06 	vstr	s14, [r3, #24]
                            park.retract_waypoint = min(park.retract_waypoint, settings.parking.target);
 801eec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 801eec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eec8:	dd01      	ble.n	801eece <state_await_hold+0x10e>
 801eeca:	eef0 7a47 	vmov.f32	s15, s14
 801eece:	4b4b      	ldr	r3, [pc, #300]	@ (801effc <state_await_hold+0x23c>)
 801eed0:	edc3 7a06 	vstr	s15, [r3, #24]
                        if ((await_motion = park.target[settings.parking.axis] < park.retract_waypoint)) {
 801eed4:	4b48      	ldr	r3, [pc, #288]	@ (801eff8 <state_await_hold+0x238>)
 801eed6:	f893 2129 	ldrb.w	r2, [r3, #297]	@ 0x129
 801eeda:	4b48      	ldr	r3, [pc, #288]	@ (801effc <state_await_hold+0x23c>)
 801eedc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801eee0:	ed91 7a00 	vldr	s14, [r1]
 801eee4:	edd3 7a06 	vldr	s15, [r3, #24]
 801eee8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801eeec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eef0:	bf4c      	ite	mi
 801eef2:	2001      	movmi	r0, #1
 801eef4:	2000      	movpl	r0, #0
 801eef6:	d41f      	bmi.n	801ef38 <state_await_hold+0x178>
                        if(!park.flags.restart)
 801eef8:	4b40      	ldr	r3, [pc, #256]	@ (801effc <state_await_hold+0x23c>)
 801eefa:	7f1b      	ldrb	r3, [r3, #28]
 801eefc:	f013 0f04 	tst.w	r3, #4
 801ef00:	d104      	bne.n	801ef0c <state_await_hold+0x14c>
                            park.flags.motion = await_motion;
 801ef02:	4a3e      	ldr	r2, [pc, #248]	@ (801effc <state_await_hold+0x23c>)
 801ef04:	7f13      	ldrb	r3, [r2, #28]
 801ef06:	f360 0341 	bfi	r3, r0, #1, #1
 801ef0a:	7713      	strb	r3, [r2, #28]
                        if (!await_motion)
 801ef0c:	2800      	cmp	r0, #0
 801ef0e:	d181      	bne.n	801ee14 <state_await_hold+0x54>
                            stateHandler(EXEC_CYCLE_COMPLETE); // No motion, proceed to next step immediately.
 801ef10:	4b37      	ldr	r3, [pc, #220]	@ (801eff0 <state_await_hold+0x230>)
 801ef12:	681b      	ldr	r3, [r3, #0]
 801ef14:	2004      	movs	r0, #4
 801ef16:	4798      	blx	r3
        if (!handler_changed) {
 801ef18:	e77c      	b.n	801ee14 <state_await_hold+0x54>
                        park.flags.active = On;
 801ef1a:	4838      	ldr	r0, [pc, #224]	@ (801effc <state_await_hold+0x23c>)
 801ef1c:	7f03      	ldrb	r3, [r0, #28]
 801ef1e:	f043 0301 	orr.w	r3, r3, #1
 801ef22:	7703      	strb	r3, [r0, #28]
                        system_convert_array_steps_to_mpos(park.restore_target, sys.position);
 801ef24:	4937      	ldr	r1, [pc, #220]	@ (801f004 <state_await_hold+0x244>)
 801ef26:	300c      	adds	r0, #12
 801ef28:	f002 fb06 	bl	8021538 <system_convert_array_steps_to_mpos>
 801ef2c:	e797      	b.n	801ee5e <state_await_hold+0x9e>
                            system_convert_array_steps_to_mpos(park.target, sys.position);
 801ef2e:	4935      	ldr	r1, [pc, #212]	@ (801f004 <state_await_hold+0x244>)
 801ef30:	4832      	ldr	r0, [pc, #200]	@ (801effc <state_await_hold+0x23c>)
 801ef32:	f002 fb01 	bl	8021538 <system_convert_array_steps_to_mpos>
 801ef36:	e7cd      	b.n	801eed4 <state_await_hold+0x114>
                            park.target[settings.parking.axis] = park.retract_waypoint;
 801ef38:	4618      	mov	r0, r3
 801ef3a:	edc1 7a00 	vstr	s15, [r1]
                            park.plan_data.feed_rate = settings.parking.pullout_rate;
 801ef3e:	4b2e      	ldr	r3, [pc, #184]	@ (801eff8 <state_await_hold+0x238>)
 801ef40:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801ef44:	6203      	str	r3, [r0, #32]
                            park.plan_data.condition.coolant = restore_condition.coolant; // Retain coolant state
 801ef46:	4b30      	ldr	r3, [pc, #192]	@ (801f008 <state_await_hold+0x248>)
 801ef48:	781a      	ldrb	r2, [r3, #0]
 801ef4a:	f880 2036 	strb.w	r2, [r0, #54]	@ 0x36
                            park.plan_data.spindle.state = restore_condition.spindle[restore_condition.spindle_num].state; // Retain spindle state
 801ef4e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801ef52:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801ef56:	7a1a      	ldrb	r2, [r3, #8]
 801ef58:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
                            park.plan_data.spindle.hal = restore_condition.spindle[restore_condition.spindle_num].hal;
 801ef5c:	691a      	ldr	r2, [r3, #16]
 801ef5e:	6302      	str	r2, [r0, #48]	@ 0x30
                            park.plan_data.spindle.rpm = restore_condition.spindle[restore_condition.spindle_num].rpm;
 801ef60:	685b      	ldr	r3, [r3, #4]
 801ef62:	6243      	str	r3, [r0, #36]	@ 0x24
                            await_motion = mc_parking_motion(park.target, &park.plan_data);
 801ef64:	f100 0120 	add.w	r1, r0, #32
 801ef68:	f7f5 fa6a 	bl	8014440 <mc_parking_motion>
 801ef6c:	e7c4      	b.n	801eef8 <state_await_hold+0x138>
                        spindle_all_off(); // De-energize
 801ef6e:	f7ff f945 	bl	801e1fc <spindle_all_off>
                        if (!settings.safety_door.flags.keep_coolant_on || sys_state == STATE_SLEEP)
 801ef72:	4b21      	ldr	r3, [pc, #132]	@ (801eff8 <state_await_hold+0x238>)
 801ef74:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 801ef78:	f013 0f02 	tst.w	r3, #2
 801ef7c:	d003      	beq.n	801ef86 <state_await_hold+0x1c6>
 801ef7e:	4b1b      	ldr	r3, [pc, #108]	@ (801efec <state_await_hold+0x22c>)
 801ef80:	681b      	ldr	r3, [r3, #0]
 801ef82:	2b80      	cmp	r3, #128	@ 0x80
 801ef84:	d104      	bne.n	801ef90 <state_await_hold+0x1d0>
                            hal.coolant.set_state((coolant_state_t){0}); // De-energize
 801ef86:	4b17      	ldr	r3, [pc, #92]	@ (801efe4 <state_await_hold+0x224>)
 801ef88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ef8a:	f04f 0000 	mov.w	r0, #0
 801ef8e:	4798      	blx	r3
                        sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801ef90:	4b14      	ldr	r3, [pc, #80]	@ (801efe4 <state_await_hold+0x224>)
 801ef92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ef94:	4798      	blx	r3
 801ef96:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801ef9a:	4b11      	ldr	r3, [pc, #68]	@ (801efe0 <state_await_hold+0x220>)
 801ef9c:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
        if (!handler_changed) {
 801efa0:	e72b      	b.n	801edfa <state_await_hold+0x3a>
                    spindle_all_off(); // De-energize
 801efa2:	f7ff f92b 	bl	801e1fc <spindle_all_off>
                    if (!settings.safety_door.flags.keep_coolant_on || sys_state == STATE_SLEEP)
 801efa6:	4b14      	ldr	r3, [pc, #80]	@ (801eff8 <state_await_hold+0x238>)
 801efa8:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 801efac:	f013 0f02 	tst.w	r3, #2
 801efb0:	d003      	beq.n	801efba <state_await_hold+0x1fa>
 801efb2:	4b0e      	ldr	r3, [pc, #56]	@ (801efec <state_await_hold+0x22c>)
 801efb4:	681b      	ldr	r3, [r3, #0]
 801efb6:	2b80      	cmp	r3, #128	@ 0x80
 801efb8:	d104      	bne.n	801efc4 <state_await_hold+0x204>
                        hal.coolant.set_state((coolant_state_t){0}); // De-energize
 801efba:	4b0a      	ldr	r3, [pc, #40]	@ (801efe4 <state_await_hold+0x224>)
 801efbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801efbe:	f04f 0000 	mov.w	r0, #0
 801efc2:	4798      	blx	r3
                    sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801efc4:	4b07      	ldr	r3, [pc, #28]	@ (801efe4 <state_await_hold+0x224>)
 801efc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801efc8:	4798      	blx	r3
 801efca:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801efce:	4b04      	ldr	r3, [pc, #16]	@ (801efe0 <state_await_hold+0x220>)
 801efd0:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
        if (!handler_changed) {
 801efd4:	e711      	b.n	801edfa <state_await_hold+0x3a>
                state_set(STATE_IDLE);
 801efd6:	2000      	movs	r0, #0
 801efd8:	f7ff fb9a 	bl	801e710 <state_set>
 801efdc:	e71a      	b.n	801ee14 <state_await_hold+0x54>
 801efde:	bf00      	nop
 801efe0:	2000148c 	.word	0x2000148c
 801efe4:	200011ac 	.word	0x200011ac
 801efe8:	200014d8 	.word	0x200014d8
 801efec:	20001e44 	.word	0x20001e44
 801eff0:	20000424 	.word	0x20000424
 801eff4:	0801e9ed 	.word	0x0801e9ed
 801eff8:	20001bc4 	.word	0x20001bc4
 801effc:	20001dfc 	.word	0x20001dfc
 801f000:	0801e289 	.word	0x0801e289
 801f004:	20001514 	.word	0x20001514
 801f008:	20001e4c 	.word	0x20001e4c

0801f00c <state_suspend_manager>:
    if (stateHandler != state_await_resume || !gc_state.modal.spindle.state.on)
 801f00c:	4b39      	ldr	r3, [pc, #228]	@ (801f0f4 <state_suspend_manager+0xe8>)
 801f00e:	681a      	ldr	r2, [r3, #0]
 801f010:	4b39      	ldr	r3, [pc, #228]	@ (801f0f8 <state_suspend_manager+0xec>)
 801f012:	429a      	cmp	r2, r3
 801f014:	d000      	beq.n	801f018 <state_suspend_manager+0xc>
 801f016:	4770      	bx	lr
 801f018:	4b38      	ldr	r3, [pc, #224]	@ (801f0fc <state_suspend_manager+0xf0>)
 801f01a:	7e9b      	ldrb	r3, [r3, #26]
 801f01c:	f013 0f01 	tst.w	r3, #1
 801f020:	d0f9      	beq.n	801f016 <state_suspend_manager+0xa>
{
 801f022:	b510      	push	{r4, lr}
    if (sys.override.spindle_stop.value) {
 801f024:	4b36      	ldr	r3, [pc, #216]	@ (801f100 <state_suspend_manager+0xf4>)
 801f026:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801f02a:	2b00      	cmp	r3, #0
 801f02c:	d047      	beq.n	801f0be <state_suspend_manager+0xb2>
        if (sys.override.spindle_stop.initiate) {
 801f02e:	f013 0f02 	tst.w	r3, #2
 801f032:	d122      	bne.n	801f07a <state_suspend_manager+0x6e>
        if (sys.override.spindle_stop.restore) {
 801f034:	4b32      	ldr	r3, [pc, #200]	@ (801f100 <state_suspend_manager+0xf4>)
 801f036:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801f03a:	f013 0f04 	tst.w	r3, #4
 801f03e:	d01b      	beq.n	801f078 <state_suspend_manager+0x6c>
            grbl.report.feedback_message(Message_SpindleRestore);
 801f040:	4b30      	ldr	r3, [pc, #192]	@ (801f104 <state_suspend_manager+0xf8>)
 801f042:	68db      	ldr	r3, [r3, #12]
 801f044:	200a      	movs	r0, #10
 801f046:	4798      	blx	r3
            if (restore_condition.spindle[restore_condition.spindle_num].hal->cap.laser) // When in laser mode, ignore spindle spin-up delay. Set to turn on laser when cycle starts.
 801f048:	4b2f      	ldr	r3, [pc, #188]	@ (801f108 <state_suspend_manager+0xfc>)
 801f04a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801f04e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801f052:	691b      	ldr	r3, [r3, #16]
 801f054:	7a9b      	ldrb	r3, [r3, #10]
 801f056:	f013 0f08 	tst.w	r3, #8
 801f05a:	d029      	beq.n	801f0b0 <state_suspend_manager+0xa4>
                sys.step_control.update_spindle_rpm = On;
 801f05c:	4a28      	ldr	r2, [pc, #160]	@ (801f100 <state_suspend_manager+0xf4>)
 801f05e:	7e13      	ldrb	r3, [r2, #24]
 801f060:	f043 0308 	orr.w	r3, r3, #8
 801f064:	7613      	strb	r3, [r2, #24]
            sys.override.spindle_stop.value = 0; // Clear stop override state
 801f066:	4b26      	ldr	r3, [pc, #152]	@ (801f100 <state_suspend_manager+0xf4>)
 801f068:	2200      	movs	r2, #0
 801f06a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            if(grbl.on_override_changed)
 801f06e:	4b25      	ldr	r3, [pc, #148]	@ (801f104 <state_suspend_manager+0xf8>)
 801f070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f072:	b10b      	cbz	r3, 801f078 <state_suspend_manager+0x6c>
                grbl.on_override_changed(OverrideChanged_SpindleState);
 801f074:	4610      	mov	r0, r2
 801f076:	4798      	blx	r3
}
 801f078:	bd10      	pop	{r4, pc}
            sys.override.spindle_stop.value = 0; // Clear stop override state
 801f07a:	4c21      	ldr	r4, [pc, #132]	@ (801f100 <state_suspend_manager+0xf4>)
 801f07c:	2100      	movs	r1, #0
 801f07e:	f884 1028 	strb.w	r1, [r4, #40]	@ 0x28
            spindle_set_state(restore_condition.spindle[restore_condition.spindle_num].hal, (spindle_state_t){0}, 0.0f); // De-energize
 801f082:	4b21      	ldr	r3, [pc, #132]	@ (801f108 <state_suspend_manager+0xfc>)
 801f084:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801f088:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801f08c:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 801f10c <state_suspend_manager+0x100>
 801f090:	6918      	ldr	r0, [r3, #16]
 801f092:	f7fe ffa1 	bl	801dfd8 <spindle_set_state>
            sys.override.spindle_stop.enabled = On; // Set stop override state to enabled, if de-energized.
 801f096:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801f09a:	f043 0301 	orr.w	r3, r3, #1
 801f09e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
            if(grbl.on_override_changed)
 801f0a2:	4b18      	ldr	r3, [pc, #96]	@ (801f104 <state_suspend_manager+0xf8>)
 801f0a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f0a6:	2b00      	cmp	r3, #0
 801f0a8:	d0c4      	beq.n	801f034 <state_suspend_manager+0x28>
                grbl.on_override_changed(OverrideChanged_SpindleState);
 801f0aa:	2000      	movs	r0, #0
 801f0ac:	4798      	blx	r3
 801f0ae:	e7c1      	b.n	801f034 <state_suspend_manager+0x28>
                state_spindle_set_state(&restore_condition.spindle[restore_condition.spindle_num]);
 801f0b0:	4815      	ldr	r0, [pc, #84]	@ (801f108 <state_suspend_manager+0xfc>)
 801f0b2:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801f0b6:	3004      	adds	r0, #4
 801f0b8:	f7ff fb04 	bl	801e6c4 <state_spindle_set_state>
 801f0bc:	e7d3      	b.n	801f066 <state_suspend_manager+0x5a>
    } else if (sys.step_control.update_spindle_rpm && restore_condition.spindle[0].hal->get_state(restore_condition.spindle[0].hal).on) {
 801f0be:	4b10      	ldr	r3, [pc, #64]	@ (801f100 <state_suspend_manager+0xf4>)
 801f0c0:	7e1b      	ldrb	r3, [r3, #24]
 801f0c2:	f013 0f08 	tst.w	r3, #8
 801f0c6:	d0d7      	beq.n	801f078 <state_suspend_manager+0x6c>
 801f0c8:	4b0f      	ldr	r3, [pc, #60]	@ (801f108 <state_suspend_manager+0xfc>)
 801f0ca:	6918      	ldr	r0, [r3, #16]
 801f0cc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801f0ce:	4798      	blx	r3
 801f0d0:	f010 0f01 	tst.w	r0, #1
 801f0d4:	d0d0      	beq.n	801f078 <state_suspend_manager+0x6c>
        state_spindle_set_state(&restore_condition.spindle[restore_condition.spindle_num]);
 801f0d6:	480c      	ldr	r0, [pc, #48]	@ (801f108 <state_suspend_manager+0xfc>)
 801f0d8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801f0dc:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 801f0e0:	3004      	adds	r0, #4
 801f0e2:	f7ff faef 	bl	801e6c4 <state_spindle_set_state>
        sys.step_control.update_spindle_rpm = Off;
 801f0e6:	4b06      	ldr	r3, [pc, #24]	@ (801f100 <state_suspend_manager+0xf4>)
 801f0e8:	7e1a      	ldrb	r2, [r3, #24]
 801f0ea:	f36f 02c3 	bfc	r2, #3, #1
 801f0ee:	761a      	strb	r2, [r3, #24]
 801f0f0:	e7c2      	b.n	801f078 <state_suspend_manager+0x6c>
 801f0f2:	bf00      	nop
 801f0f4:	20000424 	.word	0x20000424
 801f0f8:	0801e9ed 	.word	0x0801e9ed
 801f0fc:	20000ee4 	.word	0x20000ee4
 801f100:	2000148c 	.word	0x2000148c
 801f104:	20001394 	.word	0x20001394
 801f108:	20001e4c 	.word	0x20001e4c
 801f10c:	00000000 	.word	0x00000000

0801f110 <st_deenergize>:

//

// Callback from delay to deenergize steppers after movement, might been cancelled
void st_deenergize (void *data)
{
 801f110:	b508      	push	{r3, lr}
    if(sys.steppers_deenergize) {
 801f112:	4b07      	ldr	r3, [pc, #28]	@ (801f130 <st_deenergize+0x20>)
 801f114:	799b      	ldrb	r3, [r3, #6]
 801f116:	b14b      	cbz	r3, 801f12c <st_deenergize+0x1c>
        hal.stepper.enable(settings.steppers.deenergize);
 801f118:	4b06      	ldr	r3, [pc, #24]	@ (801f134 <st_deenergize+0x24>)
 801f11a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f11e:	4a06      	ldr	r2, [pc, #24]	@ (801f138 <st_deenergize+0x28>)
 801f120:	f892 00ec 	ldrb.w	r0, [r2, #236]	@ 0xec
 801f124:	4798      	blx	r3
        sys.steppers_deenergize = false;
 801f126:	4b02      	ldr	r3, [pc, #8]	@ (801f130 <st_deenergize+0x20>)
 801f128:	2200      	movs	r2, #0
 801f12a:	719a      	strb	r2, [r3, #6]
    }
}
 801f12c:	bd08      	pop	{r3, pc}
 801f12e:	bf00      	nop
 801f130:	2000148c 	.word	0x2000148c
 801f134:	200011ac 	.word	0x200011ac
 801f138:	20001bc4 	.word	0x20001bc4

0801f13c <st_wake_up>:

// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up (void)
{
 801f13c:	b508      	push	{r3, lr}
    // Initialize stepper data to ensure first ISR call does not step and
    // cancel any pending steppers deenergize
    //st.exec_block = NULL;
    sys.steppers_deenergize = false;
 801f13e:	4b04      	ldr	r3, [pc, #16]	@ (801f150 <st_wake_up+0x14>)
 801f140:	2200      	movs	r2, #0
 801f142:	719a      	strb	r2, [r3, #6]
    hal.stepper.wake_up();
 801f144:	4b03      	ldr	r3, [pc, #12]	@ (801f154 <st_wake_up+0x18>)
 801f146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801f14a:	4798      	blx	r3
}
 801f14c:	bd08      	pop	{r3, pc}
 801f14e:	bf00      	nop
 801f150:	2000148c 	.word	0x2000148c
 801f154:	200011ac 	.word	0x200011ac

0801f158 <st_go_idle>:

// Stepper shutdown
ISR_CODE void ISR_FUNC(st_go_idle)(void)
{
 801f158:	b510      	push	{r4, lr}
    // Disable Stepper Driver Interrupt. Allow Stepper Port Reset Interrupt to finish, if active.

    sys_state_t state = state_get();
 801f15a:	f7ff fad3 	bl	801e704 <state_get>
 801f15e:	4604      	mov	r4, r0

    hal.stepper.go_idle(false);
 801f160:	4b1b      	ldr	r3, [pc, #108]	@ (801f1d0 <st_go_idle+0x78>)
 801f162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f166:	2000      	movs	r0, #0
 801f168:	4798      	blx	r3

    // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
    if(((settings.steppers.idle_lock_time != 255) || sys.rt_exec_alarm || state == STATE_SLEEP) && state != STATE_HOMING) {
 801f16a:	4b1a      	ldr	r3, [pc, #104]	@ (801f1d4 <st_go_idle+0x7c>)
 801f16c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801f170:	2bff      	cmp	r3, #255	@ 0xff
 801f172:	d00b      	beq.n	801f18c <st_go_idle+0x34>
 801f174:	2c04      	cmp	r4, #4
 801f176:	d00f      	beq.n	801f198 <st_go_idle+0x40>
        if(settings.steppers.idle_lock_time == 0 || state == STATE_SLEEP)
 801f178:	b10b      	cbz	r3, 801f17e <st_go_idle+0x26>
 801f17a:	2c80      	cmp	r4, #128	@ 0x80
 801f17c:	d116      	bne.n	801f1ac <st_go_idle+0x54>
            hal.stepper.enable((axes_signals_t){0});
 801f17e:	4b14      	ldr	r3, [pc, #80]	@ (801f1d0 <st_go_idle+0x78>)
 801f180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f184:	f04f 0000 	mov.w	r0, #0
 801f188:	4798      	blx	r3
            task_delete(st_deenergize, NULL); // Cancel any pending steppers deenergize task
            sys.steppers_deenergize = task_add_delayed(st_deenergize, NULL, settings.steppers.idle_lock_time);
        }
    } else
        hal.stepper.enable(settings.steppers.idle_lock_time == 255 ? (axes_signals_t){AXES_BITMASK} : settings.steppers.deenergize);
}
 801f18a:	bd10      	pop	{r4, pc}
    if(((settings.steppers.idle_lock_time != 255) || sys.rt_exec_alarm || state == STATE_SLEEP) && state != STATE_HOMING) {
 801f18c:	4a12      	ldr	r2, [pc, #72]	@ (801f1d8 <st_go_idle+0x80>)
 801f18e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 801f190:	2a00      	cmp	r2, #0
 801f192:	d1ef      	bne.n	801f174 <st_go_idle+0x1c>
 801f194:	2c80      	cmp	r4, #128	@ 0x80
 801f196:	d0ef      	beq.n	801f178 <st_go_idle+0x20>
        hal.stepper.enable(settings.steppers.idle_lock_time == 255 ? (axes_signals_t){AXES_BITMASK} : settings.steppers.deenergize);
 801f198:	4a0d      	ldr	r2, [pc, #52]	@ (801f1d0 <st_go_idle+0x78>)
 801f19a:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801f19e:	2bff      	cmp	r3, #255	@ 0xff
 801f1a0:	d013      	beq.n	801f1ca <st_go_idle+0x72>
 801f1a2:	4b0c      	ldr	r3, [pc, #48]	@ (801f1d4 <st_go_idle+0x7c>)
 801f1a4:	f893 00ec 	ldrb.w	r0, [r3, #236]	@ 0xec
 801f1a8:	4790      	blx	r2
}
 801f1aa:	e7ee      	b.n	801f18a <st_go_idle+0x32>
            task_delete(st_deenergize, NULL); // Cancel any pending steppers deenergize task
 801f1ac:	4c0b      	ldr	r4, [pc, #44]	@ (801f1dc <st_go_idle+0x84>)
 801f1ae:	2100      	movs	r1, #0
 801f1b0:	4620      	mov	r0, r4
 801f1b2:	f7f2 fa31 	bl	8011618 <task_delete>
            sys.steppers_deenergize = task_add_delayed(st_deenergize, NULL, settings.steppers.idle_lock_time);
 801f1b6:	4b07      	ldr	r3, [pc, #28]	@ (801f1d4 <st_go_idle+0x7c>)
 801f1b8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	@ 0xf8
 801f1bc:	2100      	movs	r1, #0
 801f1be:	4620      	mov	r0, r4
 801f1c0:	f7f1 ffa4 	bl	801110c <task_add_delayed>
 801f1c4:	4b04      	ldr	r3, [pc, #16]	@ (801f1d8 <st_go_idle+0x80>)
 801f1c6:	7198      	strb	r0, [r3, #6]
 801f1c8:	e7df      	b.n	801f18a <st_go_idle+0x32>
        hal.stepper.enable(settings.steppers.idle_lock_time == 255 ? (axes_signals_t){AXES_BITMASK} : settings.steppers.deenergize);
 801f1ca:	f04f 0007 	mov.w	r0, #7
 801f1ce:	e7eb      	b.n	801f1a8 <st_go_idle+0x50>
 801f1d0:	200011ac 	.word	0x200011ac
 801f1d4:	20001bc4 	.word	0x20001bc4
 801f1d8:	2000148c 	.word	0x2000148c
 801f1dc:	0801f111 	.word	0x0801f111

0801f1e0 <stepper_driver_interrupt_handler>:
*/

//! \cond

ISR_CODE void ISR_FUNC(stepper_driver_interrupt_handler)(void)
{
 801f1e0:	b510      	push	{r4, lr}
#if ENABLE_BACKLASH_COMPENSATION
    static bool backlash_motion;
#endif

    // Start a step pulse when there is a block to execute.
    if(st.exec_block) {
 801f1e2:	4b91      	ldr	r3, [pc, #580]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f1e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f1e6:	b163      	cbz	r3, 801f202 <stepper_driver_interrupt_handler+0x22>

        hal.stepper.pulse_start(&st);
 801f1e8:	4b90      	ldr	r3, [pc, #576]	@ (801f42c <stepper_driver_interrupt_handler+0x24c>)
 801f1ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801f1ee:	4c8e      	ldr	r4, [pc, #568]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f1f0:	4620      	mov	r0, r4
 801f1f2:	4798      	blx	r3

        st.new_block = st.dir_change = false;
 801f1f4:	2300      	movs	r3, #0
 801f1f6:	7363      	strb	r3, [r4, #13]
 801f1f8:	7323      	strb	r3, [r4, #12]

        if (st.step_count == 0) // Segment is complete. Discard current segment.
 801f1fa:	6a23      	ldr	r3, [r4, #32]
 801f1fc:	b90b      	cbnz	r3, 801f202 <stepper_driver_interrupt_handler+0x22>
            st.exec_segment = NULL;
 801f1fe:	2200      	movs	r2, #0
 801f200:	62e2      	str	r2, [r4, #44]	@ 0x2c
    }

    // If there is no step segment, attempt to pop one from the stepper buffer
    if (st.exec_segment == NULL) {
 801f202:	4b89      	ldr	r3, [pc, #548]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f206:	2b00      	cmp	r3, #0
 801f208:	d068      	beq.n	801f2dc <stepper_driver_interrupt_handler+0xfc>
    }

    // Check probing state.
    // Monitors probe pin state and records the system position when detected.
    // NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
    if (sys.probing_state == Probing_Active && hal.probe.get_state().triggered) {
 801f20a:	4b89      	ldr	r3, [pc, #548]	@ (801f430 <stepper_driver_interrupt_handler+0x250>)
 801f20c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801f210:	b2db      	uxtb	r3, r3
 801f212:	2b01      	cmp	r3, #1
 801f214:	f000 812c 	beq.w	801f470 <stepper_driver_interrupt_handler+0x290>
            segment_next_head = segment_next_head->next;
        }
#endif
    }

    register axes_signals_t step_outbits = (axes_signals_t){0};
 801f218:	f04f 0100 	mov.w	r1, #0

    // Execute step displacement profile by Bresenham line algorithm

    st.counter_x += st.steps[X_AXIS];
 801f21c:	4a82      	ldr	r2, [pc, #520]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f21e:	6813      	ldr	r3, [r2, #0]
 801f220:	6910      	ldr	r0, [r2, #16]
 801f222:	4403      	add	r3, r0
 801f224:	6013      	str	r3, [r2, #0]
    if (st.counter_x > st.step_event_count) {
 801f226:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801f228:	4293      	cmp	r3, r2
 801f22a:	d912      	bls.n	801f252 <stepper_driver_interrupt_handler+0x72>
        step_outbits.x = On;
 801f22c:	f04f 0101 	mov.w	r1, #1
        st.counter_x -= st.step_event_count;
 801f230:	487d      	ldr	r0, [pc, #500]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f232:	1a9b      	subs	r3, r3, r2
 801f234:	6003      	str	r3, [r0, #0]
#if ENABLE_BACKLASH_COMPENSATION
        if(!backlash_motion)
#endif
            sys.position[X_AXIS] = sys.position[X_AXIS] + (st.dir_outbits.x ? -1 : 1);
 801f236:	4b7e      	ldr	r3, [pc, #504]	@ (801f430 <stepper_driver_interrupt_handler+0x250>)
 801f238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f23c:	7bc0      	ldrb	r0, [r0, #15]
 801f23e:	f010 0f01 	tst.w	r0, #1
 801f242:	f000 812d 	beq.w	801f4a0 <stepper_driver_interrupt_handler+0x2c0>
 801f246:	f04f 30ff 	mov.w	r0, #4294967295
 801f24a:	4403      	add	r3, r0
 801f24c:	4878      	ldr	r0, [pc, #480]	@ (801f430 <stepper_driver_interrupt_handler+0x250>)
 801f24e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    }

    st.counter_y += st.steps[Y_AXIS];
 801f252:	4875      	ldr	r0, [pc, #468]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f254:	6843      	ldr	r3, [r0, #4]
 801f256:	6944      	ldr	r4, [r0, #20]
 801f258:	4423      	add	r3, r4
 801f25a:	6043      	str	r3, [r0, #4]
    if (st.counter_y > st.step_event_count) {
 801f25c:	429a      	cmp	r2, r3
 801f25e:	d211      	bcs.n	801f284 <stepper_driver_interrupt_handler+0xa4>
        step_outbits.y = On;
 801f260:	f041 0102 	orr.w	r1, r1, #2
        st.counter_y -= st.step_event_count;
 801f264:	1a9b      	subs	r3, r3, r2
 801f266:	6043      	str	r3, [r0, #4]
#if ENABLE_BACKLASH_COMPENSATION
        if(!backlash_motion)
#endif
            sys.position[Y_AXIS] = sys.position[Y_AXIS] + (st.dir_outbits.y ? -1 : 1);
 801f268:	4b71      	ldr	r3, [pc, #452]	@ (801f430 <stepper_driver_interrupt_handler+0x250>)
 801f26a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801f26e:	7bc0      	ldrb	r0, [r0, #15]
 801f270:	f010 0f02 	tst.w	r0, #2
 801f274:	f000 8116 	beq.w	801f4a4 <stepper_driver_interrupt_handler+0x2c4>
 801f278:	f04f 30ff 	mov.w	r0, #4294967295
 801f27c:	4403      	add	r3, r0
 801f27e:	486c      	ldr	r0, [pc, #432]	@ (801f430 <stepper_driver_interrupt_handler+0x250>)
 801f280:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
    }

    st.counter_z += st.steps[Z_AXIS];
 801f284:	4868      	ldr	r0, [pc, #416]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f286:	6883      	ldr	r3, [r0, #8]
 801f288:	6984      	ldr	r4, [r0, #24]
 801f28a:	4423      	add	r3, r4
 801f28c:	6083      	str	r3, [r0, #8]
    if (st.counter_z > st.step_event_count) {
 801f28e:	429a      	cmp	r2, r3
 801f290:	d211      	bcs.n	801f2b6 <stepper_driver_interrupt_handler+0xd6>
        step_outbits.z = On;
 801f292:	f041 0104 	orr.w	r1, r1, #4
        st.counter_z -= st.step_event_count;
 801f296:	1a9b      	subs	r3, r3, r2
 801f298:	6083      	str	r3, [r0, #8]
#if ENABLE_BACKLASH_COMPENSATION
        if(!backlash_motion)
#endif
            sys.position[Z_AXIS] = sys.position[Z_AXIS] + (st.dir_outbits.z ? -1 : 1);
 801f29a:	4b65      	ldr	r3, [pc, #404]	@ (801f430 <stepper_driver_interrupt_handler+0x250>)
 801f29c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801f2a0:	7bc2      	ldrb	r2, [r0, #15]
 801f2a2:	f012 0f04 	tst.w	r2, #4
 801f2a6:	f000 80ff 	beq.w	801f4a8 <stepper_driver_interrupt_handler+0x2c8>
 801f2aa:	f04f 32ff 	mov.w	r2, #4294967295
 801f2ae:	4413      	add	r3, r2
 801f2b0:	4a5f      	ldr	r2, [pc, #380]	@ (801f430 <stepper_driver_interrupt_handler+0x250>)
 801f2b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif
            sys.position[V_AXIS] = sys.position[V_AXIS] + (st.dir_outbits.v ? -1 : 1);
    }
  #endif

    st.step_outbits.value = step_outbits.value;
 801f2b6:	4b5c      	ldr	r3, [pc, #368]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f2b8:	7399      	strb	r1, [r3, #14]

    // During a homing cycle, lock out and prevent desired axes from moving.
    if (state_get() == STATE_HOMING)
 801f2ba:	f7ff fa23 	bl	801e704 <state_get>
 801f2be:	2804      	cmp	r0, #4
 801f2c0:	f000 80f4 	beq.w	801f4ac <stepper_driver_interrupt_handler+0x2cc>
        st.step_outbits.value &= sys.homing_axis_lock.mask;

    if (st.step_count == 0 || --st.step_count == 0) {
 801f2c4:	4b58      	ldr	r3, [pc, #352]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f2c6:	6a1b      	ldr	r3, [r3, #32]
 801f2c8:	b11b      	cbz	r3, 801f2d2 <stepper_driver_interrupt_handler+0xf2>
 801f2ca:	3b01      	subs	r3, #1
 801f2cc:	4a56      	ldr	r2, [pc, #344]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f2ce:	6213      	str	r3, [r2, #32]
 801f2d0:	b91b      	cbnz	r3, 801f2da <stepper_driver_interrupt_handler+0xfa>
        // Segment is complete. Advance segment tail pointer.
        segment_buffer_tail = segment_buffer_tail->next;
 801f2d2:	4b58      	ldr	r3, [pc, #352]	@ (801f434 <stepper_driver_interrupt_handler+0x254>)
 801f2d4:	681a      	ldr	r2, [r3, #0]
 801f2d6:	6852      	ldr	r2, [r2, #4]
 801f2d8:	601a      	str	r2, [r3, #0]
    }
}
 801f2da:	bd10      	pop	{r4, pc}
        if (segment_buffer_tail != segment_buffer_head) {
 801f2dc:	4b55      	ldr	r3, [pc, #340]	@ (801f434 <stepper_driver_interrupt_handler+0x254>)
 801f2de:	681b      	ldr	r3, [r3, #0]
 801f2e0:	4a55      	ldr	r2, [pc, #340]	@ (801f438 <stepper_driver_interrupt_handler+0x258>)
 801f2e2:	6812      	ldr	r2, [r2, #0]
 801f2e4:	4293      	cmp	r3, r2
 801f2e6:	f000 80ab 	beq.w	801f440 <stepper_driver_interrupt_handler+0x260>
            st.exec_segment = (segment_t *)segment_buffer_tail;
 801f2ea:	4c4f      	ldr	r4, [pc, #316]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f2ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
            hal.stepper.cycles_per_tick(st.exec_segment->cycles_per_tick);
 801f2ee:	4a4f      	ldr	r2, [pc, #316]	@ (801f42c <stepper_driver_interrupt_handler+0x24c>)
 801f2f0:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 801f2f4:	68d8      	ldr	r0, [r3, #12]
 801f2f6:	4790      	blx	r2
            st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 801f2f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801f2fa:	699a      	ldr	r2, [r3, #24]
 801f2fc:	6222      	str	r2, [r4, #32]
            if (st.exec_block != st.exec_segment->exec_block) {
 801f2fe:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801f300:	6899      	ldr	r1, [r3, #8]
 801f302:	428a      	cmp	r2, r1
 801f304:	d06c      	beq.n	801f3e0 <stepper_driver_interrupt_handler+0x200>
                if((st.dir_change = st.exec_block == NULL || st.dir_outbits.value != st.exec_segment->exec_block->direction_bits.value))
 801f306:	b382      	cbz	r2, 801f36a <stepper_driver_interrupt_handler+0x18a>
 801f308:	7be0      	ldrb	r0, [r4, #15]
 801f30a:	7e09      	ldrb	r1, [r1, #24]
 801f30c:	4288      	cmp	r0, r1
 801f30e:	d02e      	beq.n	801f36e <stepper_driver_interrupt_handler+0x18e>
 801f310:	2101      	movs	r1, #1
 801f312:	4845      	ldr	r0, [pc, #276]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f314:	7341      	strb	r1, [r0, #13]
 801f316:	b119      	cbz	r1, 801f320 <stepper_driver_interrupt_handler+0x140>
                    st.dir_outbits = st.exec_segment->exec_block->direction_bits;
 801f318:	6899      	ldr	r1, [r3, #8]
 801f31a:	7e08      	ldrb	r0, [r1, #24]
 801f31c:	4942      	ldr	r1, [pc, #264]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f31e:	73c8      	strb	r0, [r1, #15]
                if(st.exec_block != NULL && st.exec_block->offset_id != st.exec_segment->exec_block->offset_id)
 801f320:	b19a      	cbz	r2, 801f34a <stepper_driver_interrupt_handler+0x16a>
 801f322:	f992 1032 	ldrsb.w	r1, [r2, #50]	@ 0x32
 801f326:	689a      	ldr	r2, [r3, #8]
 801f328:	f992 2032 	ldrsb.w	r2, [r2, #50]	@ 0x32
 801f32c:	4291      	cmp	r1, r2
 801f32e:	d00c      	beq.n	801f34a <stepper_driver_interrupt_handler+0x16a>
                    sys.report.wco = sys.report.force_wco = On; // Do not generate grbl.on_rt_reports_added event!
 801f330:	4a3f      	ldr	r2, [pc, #252]	@ (801f430 <stepper_driver_interrupt_handler+0x250>)
 801f332:	f892 1033 	ldrb.w	r1, [r2, #51]	@ 0x33
 801f336:	f041 0120 	orr.w	r1, r1, #32
 801f33a:	f882 1033 	strb.w	r1, [r2, #51]	@ 0x33
 801f33e:	f892 1031 	ldrb.w	r1, [r2, #49]	@ 0x31
 801f342:	f041 0101 	orr.w	r1, r1, #1
 801f346:	f882 1031 	strb.w	r1, [r2, #49]	@ 0x31
                st.exec_block = st.exec_segment->exec_block;
 801f34a:	689b      	ldr	r3, [r3, #8]
 801f34c:	4a36      	ldr	r2, [pc, #216]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f34e:	6293      	str	r3, [r2, #40]	@ 0x28
                st.step_event_count = st.exec_block->step_event_count;
 801f350:	6959      	ldr	r1, [r3, #20]
 801f352:	6251      	str	r1, [r2, #36]	@ 0x24
                st.new_block = true;
 801f354:	2101      	movs	r1, #1
 801f356:	7311      	strb	r1, [r2, #12]
                if(st.exec_block->overrides.sync)
 801f358:	f993 2019 	ldrsb.w	r2, [r3, #25]
 801f35c:	2a00      	cmp	r2, #0
 801f35e:	da15      	bge.n	801f38c <stepper_driver_interrupt_handler+0x1ac>
                    sys.override.control = st.exec_block->overrides;
 801f360:	7e5a      	ldrb	r2, [r3, #25]
 801f362:	4b33      	ldr	r3, [pc, #204]	@ (801f430 <stepper_driver_interrupt_handler+0x250>)
 801f364:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 801f368:	e010      	b.n	801f38c <stepper_driver_interrupt_handler+0x1ac>
                if((st.dir_change = st.exec_block == NULL || st.dir_outbits.value != st.exec_segment->exec_block->direction_bits.value))
 801f36a:	2101      	movs	r1, #1
 801f36c:	e7d1      	b.n	801f312 <stepper_driver_interrupt_handler+0x132>
 801f36e:	2100      	movs	r1, #0
 801f370:	e7cf      	b.n	801f312 <stepper_driver_interrupt_handler+0x132>
                        hal.port.analog_out(cmd->port, cmd->value);
 801f372:	4b2e      	ldr	r3, [pc, #184]	@ (801f42c <stepper_driver_interrupt_handler+0x24c>)
 801f374:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801f378:	edd4 7a01 	vldr	s15, [r4, #4]
 801f37c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801f380:	78a0      	ldrb	r0, [r4, #2]
 801f382:	4798      	blx	r3
                    st.exec_block->output_commands = cmd->next;
 801f384:	4b28      	ldr	r3, [pc, #160]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f388:	68a2      	ldr	r2, [r4, #8]
 801f38a:	62da      	str	r2, [r3, #44]	@ 0x2c
                while(st.exec_block->output_commands) {
 801f38c:	4b26      	ldr	r3, [pc, #152]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f38e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f390:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801f392:	b1ac      	cbz	r4, 801f3c0 <stepper_driver_interrupt_handler+0x1e0>
                    cmd->is_executed = true;
 801f394:	2301      	movs	r3, #1
 801f396:	7063      	strb	r3, [r4, #1]
                    if(cmd->is_digital)
 801f398:	7823      	ldrb	r3, [r4, #0]
 801f39a:	2b00      	cmp	r3, #0
 801f39c:	d0e9      	beq.n	801f372 <stepper_driver_interrupt_handler+0x192>
                        hal.port.digital_out(cmd->port, cmd->value != 0.0f);
 801f39e:	4b23      	ldr	r3, [pc, #140]	@ (801f42c <stepper_driver_interrupt_handler+0x24c>)
 801f3a0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801f3a4:	edd4 7a01 	vldr	s15, [r4, #4]
 801f3a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f3ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3b4:	bf14      	ite	ne
 801f3b6:	2101      	movne	r1, #1
 801f3b8:	2100      	moveq	r1, #0
 801f3ba:	78a0      	ldrb	r0, [r4, #2]
 801f3bc:	4798      	blx	r3
 801f3be:	e7e1      	b.n	801f384 <stepper_driver_interrupt_handler+0x1a4>
                if(st.exec_block->message) {
 801f3c0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 801f3c2:	b139      	cbz	r1, 801f3d4 <stepper_driver_interrupt_handler+0x1f4>
                    if(!protocol_enqueue_foreground_task((foreground_task_ptr)gc_output_message, st.exec_block->message))
 801f3c4:	481d      	ldr	r0, [pc, #116]	@ (801f43c <stepper_driver_interrupt_handler+0x25c>)
 801f3c6:	f7f8 f921 	bl	801760c <protocol_enqueue_foreground_task>
 801f3ca:	b1e8      	cbz	r0, 801f408 <stepper_driver_interrupt_handler+0x228>
                    st.exec_block->message = NULL;
 801f3cc:	4b16      	ldr	r3, [pc, #88]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f3ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f3d0:	2200      	movs	r2, #0
 801f3d2:	629a      	str	r2, [r3, #40]	@ 0x28
                  = st.step_event_count >> 1;
 801f3d4:	4a14      	ldr	r2, [pc, #80]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f3d6:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801f3d8:	085b      	lsrs	r3, r3, #1
 801f3da:	6093      	str	r3, [r2, #8]
                st.counter_x = st.counter_y = st.counter_z
 801f3dc:	6053      	str	r3, [r2, #4]
 801f3de:	6013      	str	r3, [r2, #0]
            st.amass_level = st.exec_segment->amass_level;
 801f3e0:	4b11      	ldr	r3, [pc, #68]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f3e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801f3e4:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 801f3e6:	61da      	str	r2, [r3, #28]
            st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.amass_level;
 801f3e8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801f3ea:	6884      	ldr	r4, [r0, #8]
 801f3ec:	40d4      	lsrs	r4, r2
 801f3ee:	611c      	str	r4, [r3, #16]
            st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.amass_level;
 801f3f0:	68c4      	ldr	r4, [r0, #12]
 801f3f2:	40d4      	lsrs	r4, r2
 801f3f4:	615c      	str	r4, [r3, #20]
            st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.amass_level;
 801f3f6:	6904      	ldr	r4, [r0, #16]
 801f3f8:	40d4      	lsrs	r4, r2
 801f3fa:	619c      	str	r4, [r3, #24]
            if(st.exec_segment->update_pwm)
 801f3fc:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801f3fe:	b14b      	cbz	r3, 801f414 <stepper_driver_interrupt_handler+0x234>
                st.exec_segment->update_pwm(st.exec_block->spindle, st.exec_segment->spindle_pwm);
 801f400:	69c9      	ldr	r1, [r1, #28]
 801f402:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801f404:	4798      	blx	r3
 801f406:	e700      	b.n	801f20a <stepper_driver_interrupt_handler+0x2a>
                        free(st.exec_block->message);
 801f408:	4b07      	ldr	r3, [pc, #28]	@ (801f428 <stepper_driver_interrupt_handler+0x248>)
 801f40a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f40c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801f40e:	f002 ff75 	bl	80222fc <free>
 801f412:	e7db      	b.n	801f3cc <stepper_driver_interrupt_handler+0x1ec>
            else if(st.exec_segment->update_rpm)
 801f414:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801f416:	2b00      	cmp	r3, #0
 801f418:	f43f aef7 	beq.w	801f20a <stepper_driver_interrupt_handler+0x2a>
                st.exec_segment->update_rpm(st.exec_block->spindle, st.exec_segment->spindle_rpm);
 801f41c:	ed91 0a08 	vldr	s0, [r1, #32]
 801f420:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801f422:	4798      	blx	r3
 801f424:	e6f1      	b.n	801f20a <stepper_driver_interrupt_handler+0x2a>
 801f426:	bf00      	nop
 801f428:	20001f10 	.word	0x20001f10
 801f42c:	200011ac 	.word	0x200011ac
 801f430:	2000148c 	.word	0x2000148c
 801f434:	20001ef8 	.word	0x20001ef8
 801f438:	20001ef4 	.word	0x20001ef4
 801f43c:	0800ce05 	.word	0x0800ce05
            st_go_idle();
 801f440:	f7ff fe8a 	bl	801f158 <st_go_idle>
            if (st.exec_block->dynamic_rpm && st.exec_block->spindle->cap.laser)
 801f444:	4b1d      	ldr	r3, [pc, #116]	@ (801f4bc <stepper_driver_interrupt_handler+0x2dc>)
 801f446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f448:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 801f44c:	b13a      	cbz	r2, 801f45e <stepper_driver_interrupt_handler+0x27e>
 801f44e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801f450:	7a83      	ldrb	r3, [r0, #10]
 801f452:	f013 0f08 	tst.w	r3, #8
 801f456:	d002      	beq.n	801f45e <stepper_driver_interrupt_handler+0x27e>
                st.exec_block->spindle->update_pwm(st.exec_block->spindle, st.exec_block->spindle->pwm_off_value);
 801f458:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801f45a:	6901      	ldr	r1, [r0, #16]
 801f45c:	4798      	blx	r3
            st.exec_block = NULL;
 801f45e:	4b17      	ldr	r3, [pc, #92]	@ (801f4bc <stepper_driver_interrupt_handler+0x2dc>)
 801f460:	2200      	movs	r2, #0
 801f462:	629a      	str	r2, [r3, #40]	@ 0x28
            system_set_exec_state_flag(EXEC_CYCLE_COMPLETE); // Flag main program for cycle complete
 801f464:	4b16      	ldr	r3, [pc, #88]	@ (801f4c0 <stepper_driver_interrupt_handler+0x2e0>)
 801f466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f468:	2104      	movs	r1, #4
 801f46a:	4816      	ldr	r0, [pc, #88]	@ (801f4c4 <stepper_driver_interrupt_handler+0x2e4>)
 801f46c:	4798      	blx	r3
            return; // Nothing to do but exit.
 801f46e:	e734      	b.n	801f2da <stepper_driver_interrupt_handler+0xfa>
    if (sys.probing_state == Probing_Active && hal.probe.get_state().triggered) {
 801f470:	4b13      	ldr	r3, [pc, #76]	@ (801f4c0 <stepper_driver_interrupt_handler+0x2e0>)
 801f472:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 801f476:	4798      	blx	r3
 801f478:	f010 0f01 	tst.w	r0, #1
 801f47c:	f43f aecc 	beq.w	801f218 <stepper_driver_interrupt_handler+0x38>
        sys.probing_state = Probing_Off;
 801f480:	4b11      	ldr	r3, [pc, #68]	@ (801f4c8 <stepper_driver_interrupt_handler+0x2e8>)
 801f482:	2200      	movs	r2, #0
 801f484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        memcpy(sys.probe_position, sys.position, sizeof(sys.position));
 801f488:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 801f48c:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 801f490:	ca07      	ldmia	r2, {r0, r1, r2}
 801f492:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        bit_true(sys.rt_exec_state, EXEC_MOTION_CANCEL);
 801f496:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801f498:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801f49c:	649a      	str	r2, [r3, #72]	@ 0x48
 801f49e:	e6bb      	b.n	801f218 <stepper_driver_interrupt_handler+0x38>
            sys.position[X_AXIS] = sys.position[X_AXIS] + (st.dir_outbits.x ? -1 : 1);
 801f4a0:	2001      	movs	r0, #1
 801f4a2:	e6d2      	b.n	801f24a <stepper_driver_interrupt_handler+0x6a>
            sys.position[Y_AXIS] = sys.position[Y_AXIS] + (st.dir_outbits.y ? -1 : 1);
 801f4a4:	2001      	movs	r0, #1
 801f4a6:	e6e9      	b.n	801f27c <stepper_driver_interrupt_handler+0x9c>
            sys.position[Z_AXIS] = sys.position[Z_AXIS] + (st.dir_outbits.z ? -1 : 1);
 801f4a8:	2201      	movs	r2, #1
 801f4aa:	e700      	b.n	801f2ae <stepper_driver_interrupt_handler+0xce>
        st.step_outbits.value &= sys.homing_axis_lock.mask;
 801f4ac:	4a03      	ldr	r2, [pc, #12]	@ (801f4bc <stepper_driver_interrupt_handler+0x2dc>)
 801f4ae:	7b93      	ldrb	r3, [r2, #14]
 801f4b0:	4905      	ldr	r1, [pc, #20]	@ (801f4c8 <stepper_driver_interrupt_handler+0x2e8>)
 801f4b2:	7e49      	ldrb	r1, [r1, #25]
 801f4b4:	400b      	ands	r3, r1
 801f4b6:	7393      	strb	r3, [r2, #14]
 801f4b8:	e704      	b.n	801f2c4 <stepper_driver_interrupt_handler+0xe4>
 801f4ba:	bf00      	nop
 801f4bc:	20001f10 	.word	0x20001f10
 801f4c0:	200011ac 	.word	0x200011ac
 801f4c4:	200014d4 	.word	0x200014d4
 801f4c8:	2000148c 	.word	0x2000148c

0801f4cc <st_reset>:

//! \endcond

// Reset and clear stepper subsystem variables
void st_reset (void)
{
 801f4cc:	b510      	push	{r4, lr}
    if(hal.probe.configure)
 801f4ce:	4b35      	ldr	r3, [pc, #212]	@ (801f5a4 <st_reset+0xd8>)
 801f4d0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801f4d4:	b113      	cbz	r3, 801f4dc <st_reset+0x10>
        hal.probe.configure(false, false);
 801f4d6:	2100      	movs	r1, #0
 801f4d8:	4608      	mov	r0, r1
 801f4da:	4798      	blx	r3

    // Initialize stepper driver idle state, clear step and direction port pins.
    st_go_idle();
 801f4dc:	f7ff fe3c 	bl	801f158 <st_go_idle>

    // NOTE: buffer indices starts from 1 for simpler driver coding!

    // Set up stepper block ringbuffer as circular linked list and add id
    uint_fast8_t idx, idx_max = (sizeof(st_block_buffer) / sizeof(st_block_t)) - 1;
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801f4e0:	2300      	movs	r3, #0
 801f4e2:	e010      	b.n	801f506 <st_reset+0x3a>
        st_block_buffer[idx].next = &st_block_buffer[idx == idx_max ? 0 : idx + 1];
 801f4e4:	2200      	movs	r2, #0
 801f4e6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801f4ea:	00d1      	lsls	r1, r2, #3
 801f4ec:	482e      	ldr	r0, [pc, #184]	@ (801f5a8 <st_reset+0xdc>)
 801f4ee:	4401      	add	r1, r0
 801f4f0:	ebc3 0cc3 	rsb	ip, r3, r3, lsl #3
 801f4f4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801f4f8:	4402      	add	r2, r0
 801f4fa:	6051      	str	r1, [r2, #4]
        st_block_buffer[idx].id = idx + 1;
 801f4fc:	1c5a      	adds	r2, r3, #1
 801f4fe:	4663      	mov	r3, ip
 801f500:	00d9      	lsls	r1, r3, #3
 801f502:	5042      	str	r2, [r0, r1]
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801f504:	4613      	mov	r3, r2
 801f506:	2b08      	cmp	r3, #8
 801f508:	d803      	bhi.n	801f512 <st_reset+0x46>
        st_block_buffer[idx].next = &st_block_buffer[idx == idx_max ? 0 : idx + 1];
 801f50a:	2b08      	cmp	r3, #8
 801f50c:	d0ea      	beq.n	801f4e4 <st_reset+0x18>
 801f50e:	1c5a      	adds	r2, r3, #1
 801f510:	e7e9      	b.n	801f4e6 <st_reset+0x1a>
    }

    // Set up segments ringbuffer as circular linked list, add id and clear AMASS level
    idx_max = (sizeof(segment_buffer) / sizeof(segment_t)) - 1;
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801f512:	2300      	movs	r3, #0
 801f514:	e00f      	b.n	801f536 <st_reset+0x6a>
        segment_buffer[idx].next = &segment_buffer[idx == idx_max ? 0 : idx + 1];
 801f516:	2000      	movs	r0, #0
 801f518:	2234      	movs	r2, #52	@ 0x34
 801f51a:	4924      	ldr	r1, [pc, #144]	@ (801f5ac <st_reset+0xe0>)
 801f51c:	fb02 1000 	mla	r0, r2, r0, r1
 801f520:	fb03 f202 	mul.w	r2, r3, r2
 801f524:	eb01 0c02 	add.w	ip, r1, r2
 801f528:	f8cc 0004 	str.w	r0, [ip, #4]
        segment_buffer[idx].id = idx + 1;
 801f52c:	3301      	adds	r3, #1
 801f52e:	508b      	str	r3, [r1, r2]
        segment_buffer[idx].amass_level = 0;
 801f530:	2200      	movs	r2, #0
 801f532:	f8cc 2028 	str.w	r2, [ip, #40]	@ 0x28
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801f536:	2b09      	cmp	r3, #9
 801f538:	d803      	bhi.n	801f542 <st_reset+0x76>
        segment_buffer[idx].next = &segment_buffer[idx == idx_max ? 0 : idx + 1];
 801f53a:	2b09      	cmp	r3, #9
 801f53c:	d0eb      	beq.n	801f516 <st_reset+0x4a>
 801f53e:	1c58      	adds	r0, r3, #1
 801f540:	e7ea      	b.n	801f518 <st_reset+0x4c>
    }

    st_prep_block = &st_block_buffer[0];
 801f542:	4b1b      	ldr	r3, [pc, #108]	@ (801f5b0 <st_reset+0xe4>)
 801f544:	4a18      	ldr	r2, [pc, #96]	@ (801f5a8 <st_reset+0xdc>)
 801f546:	601a      	str	r2, [r3, #0]

    // Initialize stepper algorithm variables.
    pl_block = NULL;  // Planner block pointer used by segment buffer
 801f548:	2400      	movs	r4, #0
 801f54a:	4b1a      	ldr	r3, [pc, #104]	@ (801f5b4 <st_reset+0xe8>)
 801f54c:	601c      	str	r4, [r3, #0]
    segment_buffer_tail = segment_buffer_head = &segment_buffer[0]; // empty = tail
 801f54e:	4b17      	ldr	r3, [pc, #92]	@ (801f5ac <st_reset+0xe0>)
 801f550:	4a19      	ldr	r2, [pc, #100]	@ (801f5b8 <st_reset+0xec>)
 801f552:	6013      	str	r3, [r2, #0]
 801f554:	4a19      	ldr	r2, [pc, #100]	@ (801f5bc <st_reset+0xf0>)
 801f556:	6013      	str	r3, [r2, #0]
    segment_next_head = segment_buffer_head->next;
 801f558:	685a      	ldr	r2, [r3, #4]
 801f55a:	4b19      	ldr	r3, [pc, #100]	@ (801f5c0 <st_reset+0xf4>)
 801f55c:	601a      	str	r2, [r3, #0]

    memset(&prep, 0, sizeof(st_prep_t));
 801f55e:	2250      	movs	r2, #80	@ 0x50
 801f560:	4621      	mov	r1, r4
 801f562:	4818      	ldr	r0, [pc, #96]	@ (801f5c4 <st_reset+0xf8>)
 801f564:	f004 ff8b 	bl	802447e <memset>
    memset(&st, 0, sizeof(stepper_t));
 801f568:	2230      	movs	r2, #48	@ 0x30
 801f56a:	4621      	mov	r1, r4
 801f56c:	4816      	ldr	r0, [pc, #88]	@ (801f5c8 <st_reset+0xfc>)
 801f56e:	f004 ff86 	bl	802447e <memset>

#ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    // TODO: move to driver?
    // AMASS_LEVEL0: Normal operation. No AMASS. No upper cutoff frequency. Starts at LEVEL1 cutoff frequency.
    // Defined as step timer frequency / Cutoff frequency in Hz
    amass.level_1 = hal.f_step_timer / 8000;
 801f572:	4b0c      	ldr	r3, [pc, #48]	@ (801f5a4 <st_reset+0xd8>)
 801f574:	69da      	ldr	r2, [r3, #28]
 801f576:	4b15      	ldr	r3, [pc, #84]	@ (801f5cc <st_reset+0x100>)
 801f578:	fba3 1302 	umull	r1, r3, r3, r2
 801f57c:	0a58      	lsrs	r0, r3, #9
 801f57e:	4914      	ldr	r1, [pc, #80]	@ (801f5d0 <st_reset+0x104>)
 801f580:	6008      	str	r0, [r1, #0]
    amass.level_2 = hal.f_step_timer / 4000;
 801f582:	0a18      	lsrs	r0, r3, #8
 801f584:	6048      	str	r0, [r1, #4]
    amass.level_3 = hal.f_step_timer / 2000;
 801f586:	09db      	lsrs	r3, r3, #7
 801f588:	608b      	str	r3, [r1, #8]
#endif

    cycles_per_min = (float)hal.f_step_timer * 60.0f;
 801f58a:	ee07 2a90 	vmov	s15, r2
 801f58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f592:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 801f5d4 <st_reset+0x108>
 801f596:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f59a:	4b0f      	ldr	r3, [pc, #60]	@ (801f5d8 <st_reset+0x10c>)
 801f59c:	edc3 7a00 	vstr	s15, [r3]
}
 801f5a0:	bd10      	pop	{r4, pc}
 801f5a2:	bf00      	nop
 801f5a4:	200011ac 	.word	0x200011ac
 801f5a8:	20002148 	.word	0x20002148
 801f5ac:	20001f40 	.word	0x20001f40
 801f5b0:	20001ee8 	.word	0x20001ee8
 801f5b4:	20001eec 	.word	0x20001eec
 801f5b8:	20001ef4 	.word	0x20001ef4
 801f5bc:	20001ef8 	.word	0x20001ef8
 801f5c0:	20001ef0 	.word	0x20001ef0
 801f5c4:	20001e60 	.word	0x20001e60
 801f5c8:	20001f10 	.word	0x20001f10
 801f5cc:	10624dd3 	.word	0x10624dd3
 801f5d0:	20001f04 	.word	0x20001f04
 801f5d4:	42700000 	.word	0x42700000
 801f5d8:	20001efc 	.word	0x20001efc

0801f5dc <st_rpm_changed>:

// Called by spindle_set_state() to inform about RPM changes.
// Used by st_prep_buffer() to determine if spindle needs update when dynamic RPM is called for.
void st_rpm_changed (float rpm)
{
    prep.current_spindle_rpm = rpm;
 801f5dc:	4b01      	ldr	r3, [pc, #4]	@ (801f5e4 <st_rpm_changed+0x8>)
 801f5de:	ed83 0a13 	vstr	s0, [r3, #76]	@ 0x4c
}
 801f5e2:	4770      	bx	lr
 801f5e4:	20001e60 	.word	0x20001e60

0801f5e8 <st_update_plan_block_parameters>:

// Called by planner_recalculate() when the executing block is updated by the new plan.
void st_update_plan_block_parameters (void)
{
    if (pl_block != NULL) { // Ignore if at start of a new block.
 801f5e8:	4b08      	ldr	r3, [pc, #32]	@ (801f60c <st_update_plan_block_parameters+0x24>)
 801f5ea:	6819      	ldr	r1, [r3, #0]
 801f5ec:	b169      	cbz	r1, 801f60a <st_update_plan_block_parameters+0x22>
        prep.recalculate.velocity_profile = On;
 801f5ee:	4b08      	ldr	r3, [pc, #32]	@ (801f610 <st_update_plan_block_parameters+0x28>)
 801f5f0:	781a      	ldrb	r2, [r3, #0]
 801f5f2:	f042 0201 	orr.w	r2, r2, #1
 801f5f6:	701a      	strb	r2, [r3, #0]
        pl_block->entry_speed_sqr = prep.current_speed * prep.current_speed; // Update entry speed.
 801f5f8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801f5fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f600:	edc1 7a07 	vstr	s15, [r1, #28]
        pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 801f604:	4b01      	ldr	r3, [pc, #4]	@ (801f60c <st_update_plan_block_parameters+0x24>)
 801f606:	2200      	movs	r2, #0
 801f608:	601a      	str	r2, [r3, #0]
    }
}
 801f60a:	4770      	bx	lr
 801f60c:	20001eec 	.word	0x20001eec
 801f610:	20001e60 	.word	0x20001e60

0801f614 <st_parking_setup_buffer>:

// Changes the run state of the step segment buffer to execute the special parking motion.
void st_parking_setup_buffer (void)
{
 801f614:	b530      	push	{r4, r5, lr}
    // Store step execution data of partially completed block, if necessary.
    if (prep.recalculate.hold_partial_block && !prep.recalculate.parking) {
 801f616:	4b1b      	ldr	r3, [pc, #108]	@ (801f684 <st_parking_setup_buffer+0x70>)
 801f618:	781b      	ldrb	r3, [r3, #0]
 801f61a:	f003 0306 	and.w	r3, r3, #6
 801f61e:	2b02      	cmp	r3, #2
 801f620:	d00c      	beq.n	801f63c <st_parking_setup_buffer+0x28>
        prep.last_steps_remaining = prep.steps_remaining;
        prep.last_dt_remainder = prep.dt_remainder;
        prep.last_steps_per_mm = prep.steps_per_mm;
    }
    // Set flags to execute a parking motion
    prep.recalculate.parking = On;
 801f622:	4b18      	ldr	r3, [pc, #96]	@ (801f684 <st_parking_setup_buffer+0x70>)
 801f624:	781a      	ldrb	r2, [r3, #0]
 801f626:	f042 0204 	orr.w	r2, r2, #4
 801f62a:	701a      	strb	r2, [r3, #0]
    prep.recalculate.velocity_profile = Off;
 801f62c:	b2d2      	uxtb	r2, r2
 801f62e:	f36f 0200 	bfc	r2, #0, #1
 801f632:	701a      	strb	r2, [r3, #0]
    pl_block = NULL; // Always reset parking motion to reload new block.
 801f634:	4b14      	ldr	r3, [pc, #80]	@ (801f688 <st_parking_setup_buffer+0x74>)
 801f636:	2200      	movs	r2, #0
 801f638:	601a      	str	r2, [r3, #0]
}
 801f63a:	bd30      	pop	{r4, r5, pc}
        prep.last_st_block = st_prep_block;
 801f63c:	4b13      	ldr	r3, [pc, #76]	@ (801f68c <st_parking_setup_buffer+0x78>)
 801f63e:	681d      	ldr	r5, [r3, #0]
 801f640:	4b10      	ldr	r3, [pc, #64]	@ (801f684 <st_parking_setup_buffer+0x70>)
 801f642:	615d      	str	r5, [r3, #20]
        memcpy(&st_hold_block, st_prep_block, sizeof(st_block_t));
 801f644:	46ac      	mov	ip, r5
 801f646:	4c12      	ldr	r4, [pc, #72]	@ (801f690 <st_parking_setup_buffer+0x7c>)
 801f648:	3530      	adds	r5, #48	@ 0x30
 801f64a:	46a6      	mov	lr, r4
 801f64c:	f8dc 0000 	ldr.w	r0, [ip]
 801f650:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801f654:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801f658:	f8dc 300c 	ldr.w	r3, [ip, #12]
 801f65c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801f660:	f10c 0c10 	add.w	ip, ip, #16
 801f664:	4674      	mov	r4, lr
 801f666:	45ac      	cmp	ip, r5
 801f668:	d1ef      	bne.n	801f64a <st_parking_setup_buffer+0x36>
 801f66a:	f8dc 0000 	ldr.w	r0, [ip]
 801f66e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801f672:	c403      	stmia	r4!, {r0, r1}
        prep.last_steps_remaining = prep.steps_remaining;
 801f674:	4b03      	ldr	r3, [pc, #12]	@ (801f684 <st_parking_setup_buffer+0x70>)
 801f676:	689a      	ldr	r2, [r3, #8]
 801f678:	619a      	str	r2, [r3, #24]
        prep.last_dt_remainder = prep.dt_remainder;
 801f67a:	685a      	ldr	r2, [r3, #4]
 801f67c:	621a      	str	r2, [r3, #32]
        prep.last_steps_per_mm = prep.steps_per_mm;
 801f67e:	68da      	ldr	r2, [r3, #12]
 801f680:	61da      	str	r2, [r3, #28]
 801f682:	e7ce      	b.n	801f622 <st_parking_setup_buffer+0xe>
 801f684:	20001e60 	.word	0x20001e60
 801f688:	20001eec 	.word	0x20001eec
 801f68c:	20001ee8 	.word	0x20001ee8
 801f690:	20001eb0 	.word	0x20001eb0

0801f694 <st_parking_restore_buffer>:

// Restores the step segment buffer to the normal run state after a parking motion.
void st_parking_restore_buffer (void)
{
    // Restore step execution data and flags of partially completed block, if necessary.
    if (prep.recalculate.hold_partial_block) {
 801f694:	4b1e      	ldr	r3, [pc, #120]	@ (801f710 <st_parking_restore_buffer+0x7c>)
 801f696:	781b      	ldrb	r3, [r3, #0]
 801f698:	f013 0f02 	tst.w	r3, #2
 801f69c:	d106      	bne.n	801f6ac <st_parking_restore_buffer+0x18>
        prep.steps_per_mm = prep.last_steps_per_mm;
        prep.recalculate.flags = 0;
        prep.recalculate.hold_partial_block = prep.recalculate.velocity_profile = On;
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR / prep.steps_per_mm; // Recompute this value.
    } else
        prep.recalculate.flags = 0;
 801f69e:	4b1c      	ldr	r3, [pc, #112]	@ (801f710 <st_parking_restore_buffer+0x7c>)
 801f6a0:	2200      	movs	r2, #0
 801f6a2:	701a      	strb	r2, [r3, #0]

    pl_block = NULL; // Set to reload next block.
 801f6a4:	4b1b      	ldr	r3, [pc, #108]	@ (801f714 <st_parking_restore_buffer+0x80>)
 801f6a6:	2200      	movs	r2, #0
 801f6a8:	601a      	str	r2, [r3, #0]
 801f6aa:	4770      	bx	lr
{
 801f6ac:	b530      	push	{r4, r5, lr}
        memcpy(prep.last_st_block, &st_hold_block, sizeof(st_block_t));
 801f6ae:	4d1a      	ldr	r5, [pc, #104]	@ (801f718 <st_parking_restore_buffer+0x84>)
 801f6b0:	4b17      	ldr	r3, [pc, #92]	@ (801f710 <st_parking_restore_buffer+0x7c>)
 801f6b2:	695c      	ldr	r4, [r3, #20]
 801f6b4:	f105 0e30 	add.w	lr, r5, #48	@ 0x30
 801f6b8:	46ac      	mov	ip, r5
 801f6ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801f6be:	6020      	str	r0, [r4, #0]
 801f6c0:	6061      	str	r1, [r4, #4]
 801f6c2:	60a2      	str	r2, [r4, #8]
 801f6c4:	60e3      	str	r3, [r4, #12]
 801f6c6:	4665      	mov	r5, ip
 801f6c8:	3410      	adds	r4, #16
 801f6ca:	45f4      	cmp	ip, lr
 801f6cc:	d1f4      	bne.n	801f6b8 <st_parking_restore_buffer+0x24>
 801f6ce:	cd03      	ldmia	r5!, {r0, r1}
 801f6d0:	6020      	str	r0, [r4, #0]
 801f6d2:	6061      	str	r1, [r4, #4]
        st_prep_block = prep.last_st_block;
 801f6d4:	4b0e      	ldr	r3, [pc, #56]	@ (801f710 <st_parking_restore_buffer+0x7c>)
 801f6d6:	6959      	ldr	r1, [r3, #20]
 801f6d8:	4a10      	ldr	r2, [pc, #64]	@ (801f71c <st_parking_restore_buffer+0x88>)
 801f6da:	6011      	str	r1, [r2, #0]
        prep.steps_remaining = prep.last_steps_remaining;
 801f6dc:	699a      	ldr	r2, [r3, #24]
 801f6de:	609a      	str	r2, [r3, #8]
        prep.dt_remainder = prep.last_dt_remainder;
 801f6e0:	6a1a      	ldr	r2, [r3, #32]
 801f6e2:	605a      	str	r2, [r3, #4]
        prep.steps_per_mm = prep.last_steps_per_mm;
 801f6e4:	edd3 7a07 	vldr	s15, [r3, #28]
 801f6e8:	edc3 7a03 	vstr	s15, [r3, #12]
        prep.recalculate.flags = 0;
 801f6ec:	2200      	movs	r2, #0
 801f6ee:	701a      	strb	r2, [r3, #0]
        prep.recalculate.hold_partial_block = prep.recalculate.velocity_profile = On;
 801f6f0:	2201      	movs	r2, #1
 801f6f2:	701a      	strb	r2, [r3, #0]
 801f6f4:	b2d2      	uxtb	r2, r2
 801f6f6:	f042 0202 	orr.w	r2, r2, #2
 801f6fa:	701a      	strb	r2, [r3, #0]
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR / prep.steps_per_mm; // Recompute this value.
 801f6fc:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 801f700:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f704:	ed83 7a04 	vstr	s14, [r3, #16]
    pl_block = NULL; // Set to reload next block.
 801f708:	4b02      	ldr	r3, [pc, #8]	@ (801f714 <st_parking_restore_buffer+0x80>)
 801f70a:	2200      	movs	r2, #0
 801f70c:	601a      	str	r2, [r3, #0]
}
 801f70e:	bd30      	pop	{r4, r5, pc}
 801f710:	20001e60 	.word	0x20001e60
 801f714:	20001eec 	.word	0x20001eec
 801f718:	20001eb0 	.word	0x20001eb0
 801f71c:	20001ee8 	.word	0x20001ee8

0801f720 <st_prep_buffer>:
   NOTE: Computation units are in steps, millimeters, and minutes.
*/
void st_prep_buffer (void)
{
    // Block step prep buffer, while in a suspend state and there is no suspend motion to execute.
    if (sys.step_control.end_motion)
 801f720:	4bba      	ldr	r3, [pc, #744]	@ (801fa0c <st_prep_buffer+0x2ec>)
 801f722:	7e1b      	ldrb	r3, [r3, #24]
 801f724:	f013 0f01 	tst.w	r3, #1
 801f728:	d103      	bne.n	801f732 <st_prep_buffer+0x12>
{
 801f72a:	b570      	push	{r4, r5, r6, lr}
 801f72c:	ed2d 8b04 	vpush	{d8-d9}
 801f730:	e39a      	b.n	801fe68 <st_prep_buffer+0x748>
 801f732:	4770      	bx	lr
        // Determine if we need to load a new planner block or if the block needs to be recomputed.
        if (pl_block == NULL) {

            // Query planner for a queued block

            pl_block = sys.step_control.execute_sys_motion ? plan_get_system_motion_block() : plan_get_current_block();
 801f734:	4bb5      	ldr	r3, [pc, #724]	@ (801fa0c <st_prep_buffer+0x2ec>)
 801f736:	7e1b      	ldrb	r3, [r3, #24]
 801f738:	f013 0f04 	tst.w	r3, #4
 801f73c:	d01b      	beq.n	801f776 <st_prep_buffer+0x56>
 801f73e:	f7f6 fca7 	bl	8016090 <plan_get_system_motion_block>
 801f742:	4604      	mov	r4, r0
 801f744:	4bb2      	ldr	r3, [pc, #712]	@ (801fa10 <st_prep_buffer+0x2f0>)
 801f746:	601c      	str	r4, [r3, #0]

            if (pl_block == NULL)
 801f748:	2c00      	cmp	r4, #0
 801f74a:	f000 83d4 	beq.w	801fef6 <st_prep_buffer+0x7d6>
                return; // No planner blocks. Exit.

            // Check if we need to only recompute the velocity profile or load a new block.
            if (prep.recalculate.velocity_profile) {
 801f74e:	4bb1      	ldr	r3, [pc, #708]	@ (801fa14 <st_prep_buffer+0x2f4>)
 801f750:	7819      	ldrb	r1, [r3, #0]
 801f752:	f011 0f01 	tst.w	r1, #1
 801f756:	d060      	beq.n	801f81a <st_prep_buffer+0xfa>
                if(settings.parking.flags.enabled) {
 801f758:	4baf      	ldr	r3, [pc, #700]	@ (801fa18 <st_prep_buffer+0x2f8>)
 801f75a:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801f75e:	f013 0f01 	tst.w	r3, #1
 801f762:	d010      	beq.n	801f786 <st_prep_buffer+0x66>
                    if (prep.recalculate.parking)
 801f764:	f011 0f04 	tst.w	r1, #4
 801f768:	d009      	beq.n	801f77e <st_prep_buffer+0x5e>
                        prep.recalculate.velocity_profile = Off;
 801f76a:	4baa      	ldr	r3, [pc, #680]	@ (801fa14 <st_prep_buffer+0x2f4>)
 801f76c:	781a      	ldrb	r2, [r3, #0]
 801f76e:	f36f 0200 	bfc	r2, #0, #1
 801f772:	701a      	strb	r2, [r3, #0]
 801f774:	e00a      	b.n	801f78c <st_prep_buffer+0x6c>
            pl_block = sys.step_control.execute_sys_motion ? plan_get_system_motion_block() : plan_get_current_block();
 801f776:	f7f6 fc91 	bl	801609c <plan_get_current_block>
 801f77a:	4604      	mov	r4, r0
 801f77c:	e7e2      	b.n	801f744 <st_prep_buffer+0x24>
                    else
                        prep.recalculate.flags = 0;
 801f77e:	4ba5      	ldr	r3, [pc, #660]	@ (801fa14 <st_prep_buffer+0x2f4>)
 801f780:	2200      	movs	r2, #0
 801f782:	701a      	strb	r2, [r3, #0]
 801f784:	e002      	b.n	801f78c <st_prep_buffer+0x6c>
                } else
                    prep.recalculate.flags = 0;
 801f786:	4ba3      	ldr	r3, [pc, #652]	@ (801fa14 <st_prep_buffer+0x2f4>)
 801f788:	2200      	movs	r2, #0
 801f78a:	701a      	strb	r2, [r3, #0]
             Compute the velocity profile of a new planner block based on its entry and exit
             speeds, or recompute the profile of a partially-completed planner block if the
             planner has updated it. For a commanded forced-deceleration, such as from a feed
             hold, override the planner velocities and decelerate to the target exit speed.
            */
            prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 801f78c:	4ba1      	ldr	r3, [pc, #644]	@ (801fa14 <st_prep_buffer+0x2f4>)
 801f78e:	2200      	movs	r2, #0
 801f790:	629a      	str	r2, [r3, #40]	@ 0x28
            float inv_2_accel = 0.5f / pl_block->acceleration;
 801f792:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 801f796:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801f79a:	ee87 8a27 	vdiv.f32	s16, s14, s15

            if (sys.step_control.execute_hold) { // [Forced Deceleration to Zero Velocity]
 801f79e:	4b9b      	ldr	r3, [pc, #620]	@ (801fa0c <st_prep_buffer+0x2ec>)
 801f7a0:	7e1b      	ldrb	r3, [r3, #24]
 801f7a2:	f013 0f02 	tst.w	r3, #2
 801f7a6:	f000 80c6 	beq.w	801f936 <st_prep_buffer+0x216>
                // Compute velocity profile parameters for a feed hold in-progress. This profile overrides
                // the planner block profile, enforcing a deceleration to zero speed.
                prep.ramp_type = Ramp_Decel;
 801f7aa:	4b9a      	ldr	r3, [pc, #616]	@ (801fa14 <st_prep_buffer+0x2f4>)
 801f7ac:	2202      	movs	r2, #2
 801f7ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                // Compute decelerate distance relative to end of block.
                float decel_dist = pl_block->millimeters - inv_2_accel * pl_block->entry_speed_sqr;
 801f7b2:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801f7b6:	ed94 0a07 	vldr	s0, [r4, #28]
 801f7ba:	ee60 7a08 	vmul.f32	s15, s0, s16
 801f7be:	ee77 7a67 	vsub.f32	s15, s14, s15
                if(decel_dist < -0.0001f) {
 801f7c2:	eddf 6a96 	vldr	s13, [pc, #600]	@ 801fa1c <st_prep_buffer+0x2fc>
 801f7c6:	eef4 7ae6 	vcmpe.f32	s15, s13
 801f7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7ce:	f100 80a4 	bmi.w	801f91a <st_prep_buffer+0x1fa>
                    // Deceleration through entire planner block. End of feed hold is not in this block.
                    prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2.0f * pl_block->acceleration * pl_block->millimeters);
                } else {
                    prep.mm_complete = decel_dist < 0.0001f ? 0.0f : decel_dist; // End of feed hold.
 801f7d2:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 801fa20 <st_prep_buffer+0x300>
 801f7d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7de:	d501      	bpl.n	801f7e4 <st_prep_buffer+0xc4>
 801f7e0:	eddf 7a90 	vldr	s15, [pc, #576]	@ 801fa24 <st_prep_buffer+0x304>
 801f7e4:	4b8b      	ldr	r3, [pc, #556]	@ (801fa14 <st_prep_buffer+0x2f4>)
 801f7e6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
                    prep.exit_speed = 0.0f;
 801f7ea:	2200      	movs	r2, #0
 801f7ec:	635a      	str	r2, [r3, #52]	@ 0x34
                    // prep.decelerate_after = 0.0f;
                    prep.maximum_speed = prep.exit_speed;
                }
            }

            if(state_get() != STATE_HOMING)
 801f7ee:	f7fe ff89 	bl	801e704 <state_get>
 801f7f2:	2804      	cmp	r0, #4
 801f7f4:	d00d      	beq.n	801f812 <st_prep_buffer+0xf2>
                sys.step_control.update_spindle_rpm |= pl_block->spindle.hal->cap.laser; // Force update whenever updating block in laser mode.
 801f7f6:	4885      	ldr	r0, [pc, #532]	@ (801fa0c <st_prep_buffer+0x2ec>)
 801f7f8:	7e03      	ldrb	r3, [r0, #24]
 801f7fa:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 801f7fe:	4984      	ldr	r1, [pc, #528]	@ (801fa10 <st_prep_buffer+0x2f0>)
 801f800:	6809      	ldr	r1, [r1, #0]
 801f802:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 801f804:	7a89      	ldrb	r1, [r1, #10]
 801f806:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 801f80a:	430a      	orrs	r2, r1
 801f80c:	f362 03c3 	bfi	r3, r2, #3, #1
 801f810:	7603      	strb	r3, [r0, #24]

            probe_asserted = false;
 801f812:	4b85      	ldr	r3, [pc, #532]	@ (801fa28 <st_prep_buffer+0x308>)
 801f814:	2200      	movs	r2, #0
 801f816:	701a      	strb	r2, [r3, #0]
 801f818:	e331      	b.n	801fe7e <st_prep_buffer+0x75e>
                st_prep_block = st_prep_block->next;
 801f81a:	4b84      	ldr	r3, [pc, #528]	@ (801fa2c <st_prep_buffer+0x30c>)
 801f81c:	681a      	ldr	r2, [r3, #0]
 801f81e:	6855      	ldr	r5, [r2, #4]
 801f820:	601d      	str	r5, [r3, #0]
                uint_fast8_t idx = N_AXIS;
 801f822:	2303      	movs	r3, #3
                    idx--;
 801f824:	3b01      	subs	r3, #1
                    st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL;
 801f826:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 801f82a:	00d2      	lsls	r2, r2, #3
 801f82c:	1c98      	adds	r0, r3, #2
 801f82e:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
                } while(idx);
 801f832:	2b00      	cmp	r3, #0
 801f834:	d1f6      	bne.n	801f824 <st_prep_buffer+0x104>
                st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 801f836:	68e3      	ldr	r3, [r4, #12]
 801f838:	00db      	lsls	r3, r3, #3
 801f83a:	616b      	str	r3, [r5, #20]
                st_prep_block->direction_bits = pl_block->direction_bits;
 801f83c:	7c23      	ldrb	r3, [r4, #16]
 801f83e:	762b      	strb	r3, [r5, #24]
                st_prep_block->programmed_rate = pl_block->programmed_rate;
 801f840:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f842:	626b      	str	r3, [r5, #36]	@ 0x24
                st_prep_block->millimeters = pl_block->millimeters;
 801f844:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801f848:	ed85 7a08 	vstr	s14, [r5, #32]
                st_prep_block->steps_per_mm = (float)pl_block->step_event_count / pl_block->millimeters;
 801f84c:	edd4 7a03 	vldr	s15, [r4, #12]
 801f850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f854:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801f858:	edc5 6a07 	vstr	s13, [r5, #28]
                st_prep_block->spindle = pl_block->spindle.hal;
 801f85c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801f85e:	636b      	str	r3, [r5, #52]	@ 0x34
                st_prep_block->output_commands = pl_block->output_commands;
 801f860:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801f862:	62eb      	str	r3, [r5, #44]	@ 0x2c
                st_prep_block->overrides = pl_block->overrides;
 801f864:	7ca3      	ldrb	r3, [r4, #18]
 801f866:	766b      	strb	r3, [r5, #25]
                st_prep_block->offset_id = pl_block->offset_id;
 801f868:	f994 3011 	ldrsb.w	r3, [r4, #17]
 801f86c:	f885 3032 	strb.w	r3, [r5, #50]	@ 0x32
                st_prep_block->backlash_motion = pl_block->condition.backlash_motion;
 801f870:	7d23      	ldrb	r3, [r4, #20]
 801f872:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801f876:	f885 3030 	strb.w	r3, [r5, #48]	@ 0x30
                st_prep_block->message = pl_block->message;
 801f87a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 801f87c:	62ab      	str	r3, [r5, #40]	@ 0x28
                pl_block->message = NULL;
 801f87e:	2300      	movs	r3, #0
 801f880:	64a3      	str	r3, [r4, #72]	@ 0x48
                prep.steps_per_mm = st_prep_block->steps_per_mm;
 801f882:	edd5 7a07 	vldr	s15, [r5, #28]
 801f886:	4b63      	ldr	r3, [pc, #396]	@ (801fa14 <st_prep_buffer+0x2f4>)
 801f888:	edc3 7a03 	vstr	s15, [r3, #12]
                prep.steps_remaining = pl_block->step_event_count;
 801f88c:	68e2      	ldr	r2, [r4, #12]
 801f88e:	609a      	str	r2, [r3, #8]
                prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR / prep.steps_per_mm;
 801f890:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 801f894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f898:	ed83 7a04 	vstr	s14, [r3, #16]
                prep.dt_remainder = prep.target_position = 0.0f; // Reset for new segment block
 801f89c:	2200      	movs	r2, #0
 801f89e:	641a      	str	r2, [r3, #64]	@ 0x40
 801f8a0:	605a      	str	r2, [r3, #4]
                if (sys.step_control.execute_hold || prep.recalculate.decel_override) {
 801f8a2:	4b5a      	ldr	r3, [pc, #360]	@ (801fa0c <st_prep_buffer+0x2ec>)
 801f8a4:	7e1b      	ldrb	r3, [r3, #24]
 801f8a6:	f013 0f02 	tst.w	r3, #2
 801f8aa:	d102      	bne.n	801f8b2 <st_prep_buffer+0x192>
 801f8ac:	f011 0f08 	tst.w	r1, #8
 801f8b0:	d021      	beq.n	801f8f6 <st_prep_buffer+0x1d6>
                    prep.current_speed = prep.exit_speed;
 801f8b2:	4b58      	ldr	r3, [pc, #352]	@ (801fa14 <st_prep_buffer+0x2f4>)
 801f8b4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801f8b8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
                    pl_block->entry_speed_sqr = prep.exit_speed * prep.exit_speed;
 801f8bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f8c0:	edc4 7a07 	vstr	s15, [r4, #28]
                    prep.recalculate.decel_override = Off;
 801f8c4:	781a      	ldrb	r2, [r3, #0]
 801f8c6:	f36f 02c3 	bfc	r2, #3, #1
 801f8ca:	701a      	strb	r2, [r3, #0]
                if ((st_prep_block->dynamic_rpm = pl_block->condition.is_rpm_rate_adjusted)) {
 801f8cc:	7d23      	ldrb	r3, [r4, #20]
 801f8ce:	f3c3 12c0 	ubfx	r2, r3, #7, #1
 801f8d2:	f885 2031 	strb.w	r2, [r5, #49]	@ 0x31
 801f8d6:	09db      	lsrs	r3, r3, #7
 801f8d8:	d018      	beq.n	801f90c <st_prep_buffer+0x1ec>
                    prep.inv_feedrate = pl_block->condition.is_laser_ppi_mode ? 1.0f : 1.0f / pl_block->programmed_rate;
 801f8da:	7d63      	ldrb	r3, [r4, #21]
 801f8dc:	f013 0f01 	tst.w	r3, #1
 801f8e0:	d111      	bne.n	801f906 <st_prep_buffer+0x1e6>
 801f8e2:	ed94 7a0d 	vldr	s14, [r4, #52]	@ 0x34
 801f8e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f8ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f8ee:	4b49      	ldr	r3, [pc, #292]	@ (801fa14 <st_prep_buffer+0x2f4>)
 801f8f0:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
 801f8f4:	e74a      	b.n	801f78c <st_prep_buffer+0x6c>
                    prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 801f8f6:	ed94 0a07 	vldr	s0, [r4, #28]
 801f8fa:	f007 fb21 	bl	8026f40 <sqrtf>
 801f8fe:	4b45      	ldr	r3, [pc, #276]	@ (801fa14 <st_prep_buffer+0x2f4>)
 801f900:	ed83 0a0b 	vstr	s0, [r3, #44]	@ 0x2c
 801f904:	e7e2      	b.n	801f8cc <st_prep_buffer+0x1ac>
                    prep.inv_feedrate = pl_block->condition.is_laser_ppi_mode ? 1.0f : 1.0f / pl_block->programmed_rate;
 801f906:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801f90a:	e7f0      	b.n	801f8ee <st_prep_buffer+0x1ce>
                    st_prep_block->dynamic_rpm = !!pl_block->spindle.css;
 801f90c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801f90e:	3b00      	subs	r3, #0
 801f910:	bf18      	it	ne
 801f912:	2301      	movne	r3, #1
 801f914:	f885 3031 	strb.w	r3, [r5, #49]	@ 0x31
 801f918:	e738      	b.n	801f78c <st_prep_buffer+0x6c>
                    prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2.0f * pl_block->acceleration * pl_block->millimeters);
 801f91a:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 801f91e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f922:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f926:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f92a:	f007 fb09 	bl	8026f40 <sqrtf>
 801f92e:	4b39      	ldr	r3, [pc, #228]	@ (801fa14 <st_prep_buffer+0x2f4>)
 801f930:	ed83 0a0d 	vstr	s0, [r3, #52]	@ 0x34
 801f934:	e75b      	b.n	801f7ee <st_prep_buffer+0xce>
                prep.ramp_type = Ramp_Accel; // Initialize as acceleration ramp.
 801f936:	4a37      	ldr	r2, [pc, #220]	@ (801fa14 <st_prep_buffer+0x2f4>)
 801f938:	2100      	movs	r1, #0
 801f93a:	f882 1024 	strb.w	r1, [r2, #36]	@ 0x24
                prep.accelerate_until = pl_block->millimeters;
 801f93e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801f940:	6391      	str	r1, [r2, #56]	@ 0x38
                if (sys.step_control.execute_sys_motion)
 801f942:	f013 0f04 	tst.w	r3, #4
 801f946:	d03e      	beq.n	801f9c6 <st_prep_buffer+0x2a6>
                    prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 801f948:	eddf 8a36 	vldr	s17, [pc, #216]	@ 801fa24 <st_prep_buffer+0x304>
 801f94c:	edc2 8a0d 	vstr	s17, [r2, #52]	@ 0x34
                float nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 801f950:	4c2f      	ldr	r4, [pc, #188]	@ (801fa10 <st_prep_buffer+0x2f0>)
 801f952:	6820      	ldr	r0, [r4, #0]
 801f954:	f7f6 fbd2 	bl	80160fc <plan_compute_profile_nominal_speed>
                float nominal_speed_sqr = nominal_speed * nominal_speed;
 801f958:	ee60 6a00 	vmul.f32	s13, s0, s0
                float intersect_distance = 0.5f * (pl_block->millimeters + inv_2_accel * (pl_block->entry_speed_sqr - exit_speed_sqr));
 801f95c:	6823      	ldr	r3, [r4, #0]
 801f95e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801f962:	ed93 7a07 	vldr	s14, [r3, #28]
 801f966:	ee37 7a68 	vsub.f32	s14, s14, s17
 801f96a:	ee27 7a08 	vmul.f32	s14, s14, s16
 801f96e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f972:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801f976:	ee67 7a87 	vmul.f32	s15, s15, s14
                prep.target_feed = nominal_speed;
 801f97a:	4a26      	ldr	r2, [pc, #152]	@ (801fa14 <st_prep_buffer+0x2f4>)
 801f97c:	ed82 0a11 	vstr	s0, [r2, #68]	@ 0x44
                if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 801f980:	ed93 7a07 	vldr	s14, [r3, #28]
 801f984:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801f988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f98c:	dd50      	ble.n	801fa30 <st_prep_buffer+0x310>
                    prep.accelerate_until = pl_block->millimeters - inv_2_accel * (pl_block->entry_speed_sqr - nominal_speed_sqr);
 801f98e:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 801f992:	ee77 7a66 	vsub.f32	s15, s14, s13
 801f996:	ee67 7a88 	vmul.f32	s15, s15, s16
 801f99a:	ee76 7a67 	vsub.f32	s15, s12, s15
 801f99e:	edc2 7a0e 	vstr	s15, [r2, #56]	@ 0x38
                    if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 801f9a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f9aa:	d916      	bls.n	801f9da <st_prep_buffer+0x2ba>
                        prep.decelerate_after = inv_2_accel * (nominal_speed_sqr - exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 801f9ac:	ee76 7ae8 	vsub.f32	s15, s13, s17
 801f9b0:	ee67 7a88 	vmul.f32	s15, s15, s16
 801f9b4:	4b17      	ldr	r3, [pc, #92]	@ (801fa14 <st_prep_buffer+0x2f4>)
 801f9b6:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                        prep.maximum_speed = nominal_speed;
 801f9ba:	ed83 0a0c 	vstr	s0, [r3, #48]	@ 0x30
                        prep.ramp_type = Ramp_DecelOverride;
 801f9be:	2203      	movs	r2, #3
 801f9c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 801f9c4:	e713      	b.n	801f7ee <st_prep_buffer+0xce>
                    exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 801f9c6:	f7f6 fb77 	bl	80160b8 <plan_get_exec_block_exit_speed_sqr>
 801f9ca:	eef0 8a40 	vmov.f32	s17, s0
                    prep.exit_speed = sqrtf(exit_speed_sqr);
 801f9ce:	f007 fab7 	bl	8026f40 <sqrtf>
 801f9d2:	4b10      	ldr	r3, [pc, #64]	@ (801fa14 <st_prep_buffer+0x2f4>)
 801f9d4:	ed83 0a0d 	vstr	s0, [r3, #52]	@ 0x34
 801f9d8:	e7ba      	b.n	801f950 <st_prep_buffer+0x230>
                        prep.ramp_type = Ramp_Decel;
 801f9da:	4614      	mov	r4, r2
 801f9dc:	2202      	movs	r2, #2
 801f9de:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
                        prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2.0f * pl_block->acceleration * pl_block->millimeters);
 801f9e2:	ed93 0a07 	vldr	s0, [r3, #28]
 801f9e6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801f9ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f9ee:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 801f9f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f9f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f9fa:	f007 faa1 	bl	8026f40 <sqrtf>
 801f9fe:	ed84 0a0d 	vstr	s0, [r4, #52]	@ 0x34
                        prep.recalculate.decel_override = On; // Flag to load next block as deceleration override.
 801fa02:	7823      	ldrb	r3, [r4, #0]
 801fa04:	f043 0308 	orr.w	r3, r3, #8
 801fa08:	7023      	strb	r3, [r4, #0]
 801fa0a:	e6f0      	b.n	801f7ee <st_prep_buffer+0xce>
 801fa0c:	2000148c 	.word	0x2000148c
 801fa10:	20001eec 	.word	0x20001eec
 801fa14:	20001e60 	.word	0x20001e60
 801fa18:	20001bc4 	.word	0x20001bc4
 801fa1c:	b8d1b717 	.word	0xb8d1b717
 801fa20:	38d1b717 	.word	0x38d1b717
 801fa24:	00000000 	.word	0x00000000
 801fa28:	20001f00 	.word	0x20001f00
 801fa2c:	20001ee8 	.word	0x20001ee8
                } else if (intersect_distance > 0.0f) {
 801fa30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fa34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa38:	dd43      	ble.n	801fac2 <st_prep_buffer+0x3a2>
                    if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 801fa3a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 801fa3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fa42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa46:	dd37      	ble.n	801fab8 <st_prep_buffer+0x398>
                        prep.decelerate_after = inv_2_accel * (nominal_speed_sqr - exit_speed_sqr);
 801fa48:	ee36 7ae8 	vsub.f32	s14, s13, s17
 801fa4c:	ee27 7a08 	vmul.f32	s14, s14, s16
 801fa50:	4ab6      	ldr	r2, [pc, #728]	@ (801fd2c <st_prep_buffer+0x60c>)
 801fa52:	ed82 7a0f 	vstr	s14, [r2, #60]	@ 0x3c
                        if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 801fa56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fa5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa5e:	d519      	bpl.n	801fa94 <st_prep_buffer+0x374>
                            prep.maximum_speed = nominal_speed;
 801fa60:	ed82 0a0c 	vstr	s0, [r2, #48]	@ 0x30
                            if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 801fa64:	edd3 7a07 	vldr	s15, [r3, #28]
 801fa68:	eef4 7a66 	vcmp.f32	s15, s13
 801fa6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa70:	d104      	bne.n	801fa7c <st_prep_buffer+0x35c>
                                prep.ramp_type = Ramp_Cruise;
 801fa72:	4613      	mov	r3, r2
 801fa74:	2201      	movs	r2, #1
 801fa76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 801fa7a:	e6b8      	b.n	801f7ee <st_prep_buffer+0xce>
                                prep.accelerate_until -= inv_2_accel * (nominal_speed_sqr - pl_block->entry_speed_sqr);
 801fa7c:	4bab      	ldr	r3, [pc, #684]	@ (801fd2c <st_prep_buffer+0x60c>)
 801fa7e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 801fa82:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801fa86:	ee67 7a88 	vmul.f32	s15, s15, s16
 801fa8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801fa8e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
 801fa92:	e6ac      	b.n	801f7ee <st_prep_buffer+0xce>
                            prep.accelerate_until = prep.decelerate_after = intersect_distance;
 801fa94:	4ca5      	ldr	r4, [pc, #660]	@ (801fd2c <st_prep_buffer+0x60c>)
 801fa96:	edc4 7a0f 	vstr	s15, [r4, #60]	@ 0x3c
 801fa9a:	edc4 7a0e 	vstr	s15, [r4, #56]	@ 0x38
                            prep.maximum_speed = sqrtf(2.0f * pl_block->acceleration * intersect_distance + exit_speed_sqr);
 801fa9e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 801faa2:	ee37 7a07 	vadd.f32	s14, s14, s14
 801faa6:	ee27 0a27 	vmul.f32	s0, s14, s15
 801faaa:	ee30 0a28 	vadd.f32	s0, s0, s17
 801faae:	f007 fa47 	bl	8026f40 <sqrtf>
 801fab2:	ed84 0a0c 	vstr	s0, [r4, #48]	@ 0x30
 801fab6:	e69a      	b.n	801f7ee <st_prep_buffer+0xce>
                        prep.ramp_type = Ramp_Decel;
 801fab8:	4b9c      	ldr	r3, [pc, #624]	@ (801fd2c <st_prep_buffer+0x60c>)
 801faba:	2202      	movs	r2, #2
 801fabc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 801fac0:	e695      	b.n	801f7ee <st_prep_buffer+0xce>
                    prep.accelerate_until = 0.0f;
 801fac2:	4b9a      	ldr	r3, [pc, #616]	@ (801fd2c <st_prep_buffer+0x60c>)
 801fac4:	2200      	movs	r2, #0
 801fac6:	639a      	str	r2, [r3, #56]	@ 0x38
                    prep.maximum_speed = prep.exit_speed;
 801fac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801faca:	631a      	str	r2, [r3, #48]	@ 0x30
 801facc:	e68f      	b.n	801f7ee <st_prep_buffer+0xce>
        float speed_var; // Speed worker variable
        float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
        float minimum_mm = mm_remaining - prep.req_mm_increment; // Guarantee at least one step.

        if (minimum_mm < 0.0f)
            minimum_mm = 0.0f;
 801face:	ed9f 5a9a 	vldr	s10, [pc, #616]	@ 801fd38 <st_prep_buffer+0x618>
 801fad2:	e1ef      	b.n	801feb4 <st_prep_buffer+0x794>
        do {

            switch (prep.ramp_type) {

                case Ramp_DecelOverride:
                    speed_var = pl_block->acceleration * time_var;
 801fad4:	ed92 6a09 	vldr	s12, [r2, #36]	@ 0x24
 801fad8:	ee26 6a27 	vmul.f32	s12, s12, s15
                    if ((prep.current_speed - prep.maximum_speed) <= speed_var) {
 801fadc:	4b93      	ldr	r3, [pc, #588]	@ (801fd2c <st_prep_buffer+0x60c>)
 801fade:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 801fae2:	edd3 5a0c 	vldr	s11, [r3, #48]	@ 0x30
 801fae6:	ee76 4ae5 	vsub.f32	s9, s13, s11
 801faea:	eef4 4ac6 	vcmpe.f32	s9, s12
 801faee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801faf2:	d811      	bhi.n	801fb18 <st_prep_buffer+0x3f8>
                        // Cruise or cruise-deceleration types only for deceleration override.
                        mm_remaining = prep.accelerate_until;
 801faf4:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
                        time_var = 2.0f * (pl_block->millimeters - mm_remaining) / (prep.current_speed + prep.maximum_speed);
 801faf8:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 801fafc:	ee77 7ac8 	vsub.f32	s15, s15, s16
 801fb00:	ee37 6aa7 	vadd.f32	s12, s15, s15
 801fb04:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801fb08:	eec6 7a26 	vdiv.f32	s15, s12, s13
                        prep.ramp_type = Ramp_Cruise;
 801fb0c:	2001      	movs	r0, #1
 801fb0e:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
                        prep.current_speed = prep.maximum_speed;
 801fb12:	edc3 5a0b 	vstr	s11, [r3, #44]	@ 0x2c
 801fb16:	e074      	b.n	801fc02 <st_prep_buffer+0x4e2>
                    } else {// Mid-deceleration override ramp.
                        mm_remaining -= time_var * (prep.current_speed - 0.5f * speed_var);
 801fb18:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801fb1c:	ee66 5a25 	vmul.f32	s11, s12, s11
 801fb20:	ee76 5ae5 	vsub.f32	s11, s13, s11
 801fb24:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801fb28:	ee38 8a65 	vsub.f32	s16, s16, s11
                        prep.current_speed -= speed_var;
 801fb2c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801fb30:	4b7e      	ldr	r3, [pc, #504]	@ (801fd2c <st_prep_buffer+0x60c>)
 801fb32:	edc3 6a0b 	vstr	s13, [r3, #44]	@ 0x2c
 801fb36:	e064      	b.n	801fc02 <st_prep_buffer+0x4e2>
                    }
                    break;

                case Ramp_Accel:
                    // NOTE: Acceleration ramp only computes during first do-while loop.
                    speed_var = pl_block->acceleration * time_var;
 801fb38:	edd2 5a09 	vldr	s11, [r2, #36]	@ 0x24
 801fb3c:	ee65 5aa7 	vmul.f32	s11, s11, s15
                    mm_remaining -= time_var * (prep.current_speed + 0.5f * speed_var);
 801fb40:	4b7a      	ldr	r3, [pc, #488]	@ (801fd2c <st_prep_buffer+0x60c>)
 801fb42:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 801fb46:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 801fb4a:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801fb4e:	ee76 6a26 	vadd.f32	s13, s12, s13
 801fb52:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801fb56:	ee38 8a66 	vsub.f32	s16, s16, s13
                    if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 801fb5a:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 801fb5e:	eef4 6ac8 	vcmpe.f32	s13, s16
 801fb62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb66:	dd1d      	ble.n	801fba4 <st_prep_buffer+0x484>
                        // Acceleration-cruise, acceleration-deceleration ramp junction, or end of block.
                        mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
                        time_var = 2.0f * (pl_block->millimeters - mm_remaining) / (prep.current_speed + prep.maximum_speed);
 801fb68:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 801fb6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801fb70:	ee77 5aa7 	vadd.f32	s11, s15, s15
 801fb74:	edd3 4a0c 	vldr	s9, [r3, #48]	@ 0x30
 801fb78:	ee36 6a24 	vadd.f32	s12, s12, s9
 801fb7c:	eec5 7a86 	vdiv.f32	s15, s11, s12
                        prep.ramp_type = mm_remaining == prep.decelerate_after ? Ramp_Decel : Ramp_Cruise;
 801fb80:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 801fb84:	eef4 6a46 	vcmp.f32	s13, s12
 801fb88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb8c:	d108      	bne.n	801fba0 <st_prep_buffer+0x480>
 801fb8e:	2002      	movs	r0, #2
 801fb90:	4b66      	ldr	r3, [pc, #408]	@ (801fd2c <st_prep_buffer+0x60c>)
 801fb92:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
                        prep.current_speed = prep.maximum_speed;
 801fb96:	edc3 4a0b 	vstr	s9, [r3, #44]	@ 0x2c
                        mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 801fb9a:	eeb0 8a66 	vmov.f32	s16, s13
 801fb9e:	e030      	b.n	801fc02 <st_prep_buffer+0x4e2>
                        prep.ramp_type = mm_remaining == prep.decelerate_after ? Ramp_Decel : Ramp_Cruise;
 801fba0:	2001      	movs	r0, #1
 801fba2:	e7f5      	b.n	801fb90 <st_prep_buffer+0x470>
                    } else // Acceleration only.
                        prep.current_speed += speed_var;
 801fba4:	ee36 6a25 	vadd.f32	s12, s12, s11
 801fba8:	4b60      	ldr	r3, [pc, #384]	@ (801fd2c <st_prep_buffer+0x60c>)
 801fbaa:	ed83 6a0b 	vstr	s12, [r3, #44]	@ 0x2c
 801fbae:	e028      	b.n	801fc02 <st_prep_buffer+0x4e2>

                case Ramp_Cruise:
                    // NOTE: mm_var used to retain the last mm_remaining for incomplete segment time_var calculations.
                    // NOTE: If maximum_speed*time_var value is too low, round-off can cause mm_var to not change. To
                    //   prevent this, simply enforce a minimum speed threshold in the planner.
                    mm_var = mm_remaining - prep.maximum_speed * time_var;
 801fbb0:	4b5e      	ldr	r3, [pc, #376]	@ (801fd2c <st_prep_buffer+0x60c>)
 801fbb2:	edd3 5a0c 	vldr	s11, [r3, #48]	@ 0x30
 801fbb6:	ee65 6aa7 	vmul.f32	s13, s11, s15
 801fbba:	ee78 6a66 	vsub.f32	s13, s16, s13
                    if (mm_var < prep.decelerate_after) { // End of cruise.
 801fbbe:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 801fbc2:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801fbc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbca:	dd5a      	ble.n	801fc82 <st_prep_buffer+0x562>
                        // Cruise-deceleration junction or end of block.
                        time_var = (mm_remaining - prep.decelerate_after) / prep.maximum_speed;
 801fbcc:	ee38 8a46 	vsub.f32	s16, s16, s12
 801fbd0:	eec8 7a25 	vdiv.f32	s15, s16, s11
                        mm_remaining = prep.decelerate_after; // NOTE: 0.0 at EOB
                        prep.ramp_type = Ramp_Decel;
 801fbd4:	2002      	movs	r0, #2
 801fbd6:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
                        mm_remaining = prep.decelerate_after; // NOTE: 0.0 at EOB
 801fbda:	eeb0 8a46 	vmov.f32	s16, s12
 801fbde:	e010      	b.n	801fc02 <st_prep_buffer+0x4e2>
                            prep.current_speed -= speed_var;
                            break; // Segment complete. Exit switch-case statement. Continue do-while loop.
                        }
                    }
                    // Otherwise, at end of block or end of forced-deceleration.
                    time_var = 2.0f * (mm_remaining - prep.mm_complete) / (prep.current_speed + prep.exit_speed);
 801fbe0:	4b52      	ldr	r3, [pc, #328]	@ (801fd2c <st_prep_buffer+0x60c>)
 801fbe2:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 801fbe6:	ee38 8a46 	vsub.f32	s16, s16, s12
 801fbea:	ee38 8a08 	vadd.f32	s16, s16, s16
 801fbee:	edd3 5a0d 	vldr	s11, [r3, #52]	@ 0x34
 801fbf2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801fbf6:	eec8 7a26 	vdiv.f32	s15, s16, s13
                    mm_remaining = prep.mm_complete;
                    prep.current_speed = prep.exit_speed;
 801fbfa:	edc3 5a0b 	vstr	s11, [r3, #44]	@ 0x2c
                    mm_remaining = prep.mm_complete;
 801fbfe:	eeb0 8a46 	vmov.f32	s16, s12
            }

            dt += time_var; // Add computed ramp time to total segment time.
 801fc02:	ee78 8aa7 	vadd.f32	s17, s17, s15

            if (dt < dt_max)
 801fc06:	eeb4 7ae8 	vcmpe.f32	s14, s17
 801fc0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc0e:	dd3b      	ble.n	801fc88 <st_prep_buffer+0x568>
                time_var = dt_max - dt;// **Incomplete** At ramp junction.
 801fc10:	ee77 7a68 	vsub.f32	s15, s14, s17
                    time_var = dt_max - dt;
                } else
                    break; // **Complete** Exit loop. Segment execution time maxed.
            }

        } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 801fc14:	4b45      	ldr	r3, [pc, #276]	@ (801fd2c <st_prep_buffer+0x60c>)
 801fc16:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 801fc1a:	eef4 6ac8 	vcmpe.f32	s13, s16
 801fc1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc22:	d53d      	bpl.n	801fca0 <st_prep_buffer+0x580>
            switch (prep.ramp_type) {
 801fc24:	4b41      	ldr	r3, [pc, #260]	@ (801fd2c <st_prep_buffer+0x60c>)
 801fc26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801fc2a:	2b01      	cmp	r3, #1
 801fc2c:	d0c0      	beq.n	801fbb0 <st_prep_buffer+0x490>
 801fc2e:	2b03      	cmp	r3, #3
 801fc30:	f43f af50 	beq.w	801fad4 <st_prep_buffer+0x3b4>
 801fc34:	2b00      	cmp	r3, #0
 801fc36:	f43f af7f 	beq.w	801fb38 <st_prep_buffer+0x418>
                    speed_var = pl_block->acceleration * time_var; // Used as delta speed (mm/min)
 801fc3a:	edd2 5a09 	vldr	s11, [r2, #36]	@ 0x24
 801fc3e:	ee65 5aa7 	vmul.f32	s11, s11, s15
                    if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 801fc42:	4b3a      	ldr	r3, [pc, #232]	@ (801fd2c <st_prep_buffer+0x60c>)
 801fc44:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 801fc48:	eef4 6ae5 	vcmpe.f32	s13, s11
 801fc4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc50:	ddc6      	ble.n	801fbe0 <st_prep_buffer+0x4c0>
                        mm_var = mm_remaining - time_var * (prep.current_speed - 0.5f * speed_var); // (mm)
 801fc52:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801fc56:	ee25 6a86 	vmul.f32	s12, s11, s12
 801fc5a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801fc5e:	ee26 6a27 	vmul.f32	s12, s12, s15
 801fc62:	ee38 6a46 	vsub.f32	s12, s16, s12
                        if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 801fc66:	edd3 4a0a 	vldr	s9, [r3, #40]	@ 0x28
 801fc6a:	eef4 4ac6 	vcmpe.f32	s9, s12
 801fc6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc72:	d5b5      	bpl.n	801fbe0 <st_prep_buffer+0x4c0>
                            prep.current_speed -= speed_var;
 801fc74:	ee76 6ae5 	vsub.f32	s13, s13, s11
 801fc78:	edc3 6a0b 	vstr	s13, [r3, #44]	@ 0x2c
                            mm_remaining = mm_var;
 801fc7c:	eeb0 8a46 	vmov.f32	s16, s12
                            break; // Segment complete. Exit switch-case statement. Continue do-while loop.
 801fc80:	e7bf      	b.n	801fc02 <st_prep_buffer+0x4e2>
                        mm_remaining = mm_var;
 801fc82:	eeb0 8a66 	vmov.f32	s16, s13
 801fc86:	e7bc      	b.n	801fc02 <st_prep_buffer+0x4e2>
                if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 801fc88:	eeb4 8ac5 	vcmpe.f32	s16, s10
 801fc8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc90:	dd06      	ble.n	801fca0 <st_prep_buffer+0x580>
                    dt_max += DT_SEGMENT;
 801fc92:	eddf 7a27 	vldr	s15, [pc, #156]	@ 801fd30 <st_prep_buffer+0x610>
 801fc96:	ee37 7a27 	vadd.f32	s14, s14, s15
                    time_var = dt_max - dt;
 801fc9a:	ee77 7a68 	vsub.f32	s15, s14, s17
 801fc9e:	e7b9      	b.n	801fc14 <st_prep_buffer+0x4f4>

        /* -----------------------------------------------------------------------------------
           Compute spindle spindle speed for step segment
        */

        if (sys.step_control.update_spindle_rpm || st_prep_block->dynamic_rpm) {
 801fca0:	4b24      	ldr	r3, [pc, #144]	@ (801fd34 <st_prep_buffer+0x614>)
 801fca2:	7e1b      	ldrb	r3, [r3, #24]
 801fca4:	f013 0f08 	tst.w	r3, #8
 801fca8:	d103      	bne.n	801fcb2 <st_prep_buffer+0x592>
 801fcaa:	f891 3031 	ldrb.w	r3, [r1, #49]	@ 0x31
 801fcae:	2b00      	cmp	r3, #0
 801fcb0:	d068      	beq.n	801fd84 <st_prep_buffer+0x664>

            float rpm;

            if (pl_block->spindle.state.on) {
 801fcb2:	f892 303c 	ldrb.w	r3, [r2, #60]	@ 0x3c
 801fcb6:	f013 0f01 	tst.w	r3, #1
 801fcba:	d03f      	beq.n	801fd3c <st_prep_buffer+0x61c>
                if(pl_block->spindle.css) {
 801fcbc:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 801fcbe:	b1d9      	cbz	r1, 801fcf8 <st_prep_buffer+0x5d8>
                    float npos = (float)(pl_block->step_event_count - prep.steps_remaining) / (float)pl_block->step_event_count;
 801fcc0:	4b1a      	ldr	r3, [pc, #104]	@ (801fd2c <st_prep_buffer+0x60c>)
 801fcc2:	689b      	ldr	r3, [r3, #8]
 801fcc4:	68d0      	ldr	r0, [r2, #12]
 801fcc6:	1ac3      	subs	r3, r0, r3
 801fcc8:	ee07 3a90 	vmov	s15, r3
 801fccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801fcd0:	ee07 0a10 	vmov	s14, r0
 801fcd4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801fcd8:	eec7 6a87 	vdiv.f32	s13, s15, s14
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801fcdc:	6c50      	ldr	r0, [r2, #68]	@ 0x44
                                           pl_block->spindle.rpm + pl_block->spindle.css->delta_rpm * npos,
 801fcde:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
 801fce2:	edd1 7a02 	vldr	s15, [r1, #8]
 801fce6:	ee67 7aa6 	vmul.f32	s15, s15, s13
                                            pl_block->spindle.hal->param->override_pct);
 801fcea:	6843      	ldr	r3, [r0, #4]
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801fcec:	68d9      	ldr	r1, [r3, #12]
 801fcee:	ee30 0a27 	vadd.f32	s0, s0, s15
 801fcf2:	f7fe f8e9 	bl	801dec8 <spindle_set_rpm>
 801fcf6:	e027      	b.n	801fd48 <st_prep_buffer+0x628>
                } else {
                    // NOTE: Feed and rapid overrides are independent of PWM value and do not alter laser power/rate.
                    // If current_speed is zero, then may need to be rpm_min*(100/MAX_SPINDLE_RPM_OVERRIDE)
                    // but this would be instantaneous only and during a motion. May not matter at all.
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801fcf8:	6c50      	ldr	r0, [r2, #68]	@ 0x44
                                           pl_block->condition.is_rpm_rate_adjusted && !pl_block->condition.is_laser_ppi_mode
 801fcfa:	8a93      	ldrh	r3, [r2, #20]
 801fcfc:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801fd00:	2b80      	cmp	r3, #128	@ 0x80
 801fd02:	d006      	beq.n	801fd12 <st_prep_buffer+0x5f2>
 801fd04:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
                                            ? pl_block->spindle.rpm * prep.current_speed * prep.inv_feedrate
                                            : pl_block->spindle.rpm, pl_block->spindle.hal->param->override_pct);
 801fd08:	6843      	ldr	r3, [r0, #4]
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801fd0a:	68d9      	ldr	r1, [r3, #12]
 801fd0c:	f7fe f8dc 	bl	801dec8 <spindle_set_rpm>
 801fd10:	e01a      	b.n	801fd48 <st_prep_buffer+0x628>
                                            ? pl_block->spindle.rpm * prep.current_speed * prep.inv_feedrate
 801fd12:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
 801fd16:	4b05      	ldr	r3, [pc, #20]	@ (801fd2c <st_prep_buffer+0x60c>)
 801fd18:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801fd1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801fd20:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801fd24:	ee20 0a27 	vmul.f32	s0, s0, s15
 801fd28:	e7ee      	b.n	801fd08 <st_prep_buffer+0x5e8>
 801fd2a:	bf00      	nop
 801fd2c:	20001e60 	.word	0x20001e60
 801fd30:	392ec33e 	.word	0x392ec33e
 801fd34:	2000148c 	.word	0x2000148c
 801fd38:	00000000 	.word	0x00000000
                }
            } else
                pl_block->spindle.hal->param->rpm = rpm = 0.0f;
 801fd3c:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 801fd3e:	685b      	ldr	r3, [r3, #4]
 801fd40:	ed1f 0a03 	vldr	s0, [pc, #-12]	@ 801fd38 <st_prep_buffer+0x618>
 801fd44:	ed83 0a00 	vstr	s0, [r3]

            if(rpm != prep.current_spindle_rpm) {
 801fd48:	4b8b      	ldr	r3, [pc, #556]	@ (801ff78 <st_prep_buffer+0x858>)
 801fd4a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 801fd4e:	eef4 7a40 	vcmp.f32	s15, s0
 801fd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd56:	d015      	beq.n	801fd84 <st_prep_buffer+0x664>
                if(pl_block->spindle.hal->get_pwm != NULL) {
 801fd58:	4b88      	ldr	r3, [pc, #544]	@ (801ff7c <st_prep_buffer+0x85c>)
 801fd5a:	681b      	ldr	r3, [r3, #0]
 801fd5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801fd5e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801fd60:	2900      	cmp	r1, #0
 801fd62:	f000 80ae 	beq.w	801fec2 <st_prep_buffer+0x7a2>
                    prep.current_spindle_rpm = rpm;
 801fd66:	4a84      	ldr	r2, [pc, #528]	@ (801ff78 <st_prep_buffer+0x858>)
 801fd68:	ed82 0a13 	vstr	s0, [r2, #76]	@ 0x4c
                    prep_segment->update_pwm = pl_block->spindle.hal->update_pwm;
 801fd6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801fd6e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801fd70:	62ea      	str	r2, [r5, #44]	@ 0x2c
                    prep_segment->spindle_pwm = pl_block->spindle.hal->get_pwm(pl_block->spindle.hal, rpm);
 801fd72:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801fd74:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801fd76:	4798      	blx	r3
 801fd78:	61e8      	str	r0, [r5, #28]
                } else {
                    prep_segment->update_rpm = pl_block->spindle.hal->update_rpm;
                    prep.current_spindle_rpm = prep_segment->spindle_rpm = rpm;
                }
                sys.step_control.update_spindle_rpm = Off;
 801fd7a:	4b81      	ldr	r3, [pc, #516]	@ (801ff80 <st_prep_buffer+0x860>)
 801fd7c:	7e1a      	ldrb	r2, [r3, #24]
 801fd7e:	f36f 02c3 	bfc	r2, #3, #1
 801fd82:	761a      	strb	r2, [r3, #24]
           However, since floats have only 7.2 significant digits, long moves with extremely
           high step counts can exceed the precision of floats, which can lead to lost steps.
           Fortunately, this scenario is highly unlikely and unrealistic in CNC machines
           supported by Grbl (i.e. exceeding 10 meters axis travel at 200 step/mm).
        */
        float step_dist_remaining = prep.steps_per_mm * mm_remaining; // Convert mm_remaining to steps
 801fd84:	4e7c      	ldr	r6, [pc, #496]	@ (801ff78 <st_prep_buffer+0x858>)
 801fd86:	edd6 9a03 	vldr	s19, [r6, #12]
 801fd8a:	ee69 9a88 	vmul.f32	s19, s19, s16
        uint32_t n_steps_remaining = (uint32_t)ceilf(step_dist_remaining); // Round-up current steps remaining
 801fd8e:	eeb0 0a69 	vmov.f32	s0, s19
 801fd92:	f007 f9e3 	bl	802715c <ceilf>
 801fd96:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801fd9a:	ee17 4a90 	vmov	r4, s15

        prep_segment->n_step = (uint_fast16_t)(prep.steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 801fd9e:	68b3      	ldr	r3, [r6, #8]
 801fda0:	1b1a      	subs	r2, r3, r4
 801fda2:	61aa      	str	r2, [r5, #24]

        // Bail if we are at the end of a feed hold and don't have a step to execute.
        if (prep_segment->n_step == 0 && sys.step_control.execute_hold) {
 801fda4:	b92a      	cbnz	r2, 801fdb2 <st_prep_buffer+0x692>
 801fda6:	4a76      	ldr	r2, [pc, #472]	@ (801ff80 <st_prep_buffer+0x860>)
 801fda8:	7e12      	ldrb	r2, [r2, #24]
 801fdaa:	f012 0f02 	tst.w	r2, #2
 801fdae:	f040 8090 	bne.w	801fed2 <st_prep_buffer+0x7b2>
        // compensate, we track the time to execute the previous segment's partial step and simply
        // apply it with the partial step distance to the current segment, so that it minutely
        // adjusts the whole segment rate to keep step output exact. These rate adjustments are
        // typically very small and do not adversely effect performance, but ensures that Grbl
        // outputs the exact acceleration and velocity profiles as computed by the planner.
        dt += prep.dt_remainder; // Apply previous segment partial step execute time
 801fdb2:	4a71      	ldr	r2, [pc, #452]	@ (801ff78 <st_prep_buffer+0x858>)
 801fdb4:	edd2 7a01 	vldr	s15, [r2, #4]
 801fdb8:	ee77 8aa8 	vadd.f32	s17, s15, s17
        float inv_rate = dt / ((float)prep.steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 801fdbc:	ee07 3a90 	vmov	s15, r3
 801fdc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801fdc4:	ee77 7ae9 	vsub.f32	s15, s15, s19
 801fdc8:	ee88 9aa7 	vdiv.f32	s18, s17, s15

        // Compute timer ticks per step for the prepped segment.
        uint32_t cycles = (uint32_t)ceilf(cycles_per_min * inv_rate); // (cycles/step)
 801fdcc:	4b6d      	ldr	r3, [pc, #436]	@ (801ff84 <st_prep_buffer+0x864>)
 801fdce:	ed93 0a00 	vldr	s0, [r3]
 801fdd2:	ee29 0a00 	vmul.f32	s0, s18, s0
 801fdd6:	f007 f9c1 	bl	802715c <ceilf>
 801fdda:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801fdde:	ee17 2a90 	vmov	r2, s15

        // Record end position of segment relative to block if spindle synchronized motion
        if((prep_segment->spindle_sync = pl_block->spindle.state.synchronized)) {
 801fde2:	4b66      	ldr	r3, [pc, #408]	@ (801ff7c <st_prep_buffer+0x85c>)
 801fde4:	6818      	ldr	r0, [r3, #0]
 801fde6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 801fdea:	f3c3 11c0 	ubfx	r1, r3, #7, #1
 801fdee:	f885 1024 	strb.w	r1, [r5, #36]	@ 0x24
 801fdf2:	09db      	lsrs	r3, r3, #7
 801fdf4:	d014      	beq.n	801fe20 <st_prep_buffer+0x700>
            prep.target_position += dt * prep.target_feed;
 801fdf6:	4b60      	ldr	r3, [pc, #384]	@ (801ff78 <st_prep_buffer+0x858>)
 801fdf8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 801fdfc:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 801fe00:	ee27 7a28 	vmul.f32	s14, s14, s17
 801fe04:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fe08:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
            prep_segment->cruising = prep.ramp_type == Ramp_Cruise;
 801fe0c:	f893 1024 	ldrb.w	r1, [r3, #36]	@ 0x24
 801fe10:	2901      	cmp	r1, #1
 801fe12:	bf14      	ite	ne
 801fe14:	2100      	movne	r1, #0
 801fe16:	2101      	moveq	r1, #1
 801fe18:	f885 1025 	strb.w	r1, [r5, #37]	@ 0x25
            prep_segment->target_position = prep.target_position; //st_prep_block->millimeters - pl_block->millimeters;
 801fe1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801fe1e:	616b      	str	r3, [r5, #20]
        }

      #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
        // Compute step timing and multi-axis smoothing level.
        // NOTE: AMASS overdrives the timer with each level, so only one prescalar is required.
        if (cycles < amass.level_1)
 801fe20:	4b59      	ldr	r3, [pc, #356]	@ (801ff88 <st_prep_buffer+0x868>)
 801fe22:	681b      	ldr	r3, [r3, #0]
 801fe24:	4293      	cmp	r3, r2
 801fe26:	d969      	bls.n	801fefc <st_prep_buffer+0x7dc>
            prep_segment->amass_level = 0;
 801fe28:	2300      	movs	r3, #0
 801fe2a:	62ab      	str	r3, [r5, #40]	@ 0x28
            cycles >>= prep_segment->amass_level;
            prep_segment->n_step <<= prep_segment->amass_level;
        }
      #endif

        prep_segment->cycles_per_tick = cycles;
 801fe2c:	60ea      	str	r2, [r5, #12]
        prep_segment->current_rate = prep.current_speed;
 801fe2e:	4b52      	ldr	r3, [pc, #328]	@ (801ff78 <st_prep_buffer+0x858>)
 801fe30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801fe32:	612a      	str	r2, [r5, #16]

        // Segment complete! Increment segment pointers, so stepper ISR can immediately execute it.
        segment_buffer_head = segment_next_head;
 801fe34:	4a55      	ldr	r2, [pc, #340]	@ (801ff8c <st_prep_buffer+0x86c>)
 801fe36:	6811      	ldr	r1, [r2, #0]
 801fe38:	4d55      	ldr	r5, [pc, #340]	@ (801ff90 <st_prep_buffer+0x870>)
 801fe3a:	6029      	str	r1, [r5, #0]
        segment_next_head = segment_next_head->next;
 801fe3c:	6849      	ldr	r1, [r1, #4]
 801fe3e:	6011      	str	r1, [r2, #0]

        // Update the appropriate planner and segment data.
        pl_block->millimeters = mm_remaining;
 801fe40:	ed80 8a0a 	vstr	s16, [r0, #40]	@ 0x28
        prep.steps_remaining = n_steps_remaining;
 801fe44:	609c      	str	r4, [r3, #8]
        prep.dt_remainder = ((float)n_steps_remaining - step_dist_remaining) * inv_rate;
 801fe46:	ee07 4a90 	vmov	s15, r4
 801fe4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801fe4e:	ee77 7ae9 	vsub.f32	s15, s15, s19
 801fe52:	ee67 7a89 	vmul.f32	s15, s15, s18
 801fe56:	edc3 7a01 	vstr	s15, [r3, #4]

        // Check for exit conditions and flag to load next planner block.
        if (mm_remaining <= prep.mm_complete) {
 801fe5a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801fe5e:	eef4 7ac8 	vcmpe.f32	s15, s16
 801fe62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe66:	da5c      	bge.n	801ff22 <st_prep_buffer+0x802>
    while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 801fe68:	4b4a      	ldr	r3, [pc, #296]	@ (801ff94 <st_prep_buffer+0x874>)
 801fe6a:	681a      	ldr	r2, [r3, #0]
 801fe6c:	4b47      	ldr	r3, [pc, #284]	@ (801ff8c <st_prep_buffer+0x86c>)
 801fe6e:	681b      	ldr	r3, [r3, #0]
 801fe70:	429a      	cmp	r2, r3
 801fe72:	d040      	beq.n	801fef6 <st_prep_buffer+0x7d6>
        if (pl_block == NULL) {
 801fe74:	4b41      	ldr	r3, [pc, #260]	@ (801ff7c <st_prep_buffer+0x85c>)
 801fe76:	681b      	ldr	r3, [r3, #0]
 801fe78:	2b00      	cmp	r3, #0
 801fe7a:	f43f ac5b 	beq.w	801f734 <st_prep_buffer+0x14>
        if(probe_asserted)
 801fe7e:	4b46      	ldr	r3, [pc, #280]	@ (801ff98 <st_prep_buffer+0x878>)
 801fe80:	781b      	ldrb	r3, [r3, #0]
 801fe82:	2b00      	cmp	r3, #0
 801fe84:	d137      	bne.n	801fef6 <st_prep_buffer+0x7d6>
        segment_t *prep_segment = segment_buffer_head;
 801fe86:	4b42      	ldr	r3, [pc, #264]	@ (801ff90 <st_prep_buffer+0x870>)
 801fe88:	681d      	ldr	r5, [r3, #0]
        prep_segment->exec_block = st_prep_block;
 801fe8a:	4b44      	ldr	r3, [pc, #272]	@ (801ff9c <st_prep_buffer+0x87c>)
 801fe8c:	6819      	ldr	r1, [r3, #0]
 801fe8e:	60a9      	str	r1, [r5, #8]
        prep_segment->update_rpm = NULL;
 801fe90:	2300      	movs	r3, #0
 801fe92:	632b      	str	r3, [r5, #48]	@ 0x30
        prep_segment->update_pwm = NULL;
 801fe94:	62eb      	str	r3, [r5, #44]	@ 0x2c
        float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
 801fe96:	4b39      	ldr	r3, [pc, #228]	@ (801ff7c <st_prep_buffer+0x85c>)
 801fe98:	681a      	ldr	r2, [r3, #0]
 801fe9a:	ed92 8a0a 	vldr	s16, [r2, #40]	@ 0x28
        float minimum_mm = mm_remaining - prep.req_mm_increment; // Guarantee at least one step.
 801fe9e:	4b36      	ldr	r3, [pc, #216]	@ (801ff78 <st_prep_buffer+0x858>)
 801fea0:	ed93 5a04 	vldr	s10, [r3, #16]
 801fea4:	ee38 5a45 	vsub.f32	s10, s16, s10
        if (minimum_mm < 0.0f)
 801fea8:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801feac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801feb0:	f53f ae0d 	bmi.w	801face <st_prep_buffer+0x3ae>
            minimum_mm = 0.0f;
 801feb4:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 801ffa0 <st_prep_buffer+0x880>
 801feb8:	eddf 8a3a 	vldr	s17, [pc, #232]	@ 801ffa4 <st_prep_buffer+0x884>
 801febc:	eeb0 7a67 	vmov.f32	s14, s15
 801fec0:	e6b0      	b.n	801fc24 <st_prep_buffer+0x504>
                    prep_segment->update_rpm = pl_block->spindle.hal->update_rpm;
 801fec2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 801fec4:	632b      	str	r3, [r5, #48]	@ 0x30
                    prep.current_spindle_rpm = prep_segment->spindle_rpm = rpm;
 801fec6:	ed85 0a08 	vstr	s0, [r5, #32]
 801feca:	4b2b      	ldr	r3, [pc, #172]	@ (801ff78 <st_prep_buffer+0x858>)
 801fecc:	ed83 0a13 	vstr	s0, [r3, #76]	@ 0x4c
 801fed0:	e753      	b.n	801fd7a <st_prep_buffer+0x65a>
            sys.step_control.end_motion = On;
 801fed2:	4a2b      	ldr	r2, [pc, #172]	@ (801ff80 <st_prep_buffer+0x860>)
 801fed4:	7e13      	ldrb	r3, [r2, #24]
 801fed6:	f043 0301 	orr.w	r3, r3, #1
 801feda:	7613      	strb	r3, [r2, #24]
            if (settings.parking.flags.enabled && !prep.recalculate.parking)
 801fedc:	4b32      	ldr	r3, [pc, #200]	@ (801ffa8 <st_prep_buffer+0x888>)
 801fede:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801fee2:	f013 0f01 	tst.w	r3, #1
 801fee6:	d006      	beq.n	801fef6 <st_prep_buffer+0x7d6>
 801fee8:	7833      	ldrb	r3, [r6, #0]
 801feea:	f013 0f04 	tst.w	r3, #4
 801feee:	d102      	bne.n	801fef6 <st_prep_buffer+0x7d6>
                prep.recalculate.hold_partial_block = On;
 801fef0:	f043 0302 	orr.w	r3, r3, #2
 801fef4:	7033      	strb	r3, [r6, #0]
                pl_block = NULL; // Set pointer to indicate check and load next planner block.
                plan_discard_current_block();
            }
        }
    }
}
 801fef6:	ecbd 8b04 	vpop	{d8-d9}
 801fefa:	bd70      	pop	{r4, r5, r6, pc}
            prep_segment->amass_level = cycles < amass.level_2 ? 1 : (cycles < amass.level_3 ? 2 : 3);
 801fefc:	4b22      	ldr	r3, [pc, #136]	@ (801ff88 <st_prep_buffer+0x868>)
 801fefe:	685b      	ldr	r3, [r3, #4]
 801ff00:	4293      	cmp	r3, r2
 801ff02:	d805      	bhi.n	801ff10 <st_prep_buffer+0x7f0>
 801ff04:	4b20      	ldr	r3, [pc, #128]	@ (801ff88 <st_prep_buffer+0x868>)
 801ff06:	689b      	ldr	r3, [r3, #8]
 801ff08:	4293      	cmp	r3, r2
 801ff0a:	d908      	bls.n	801ff1e <st_prep_buffer+0x7fe>
 801ff0c:	2102      	movs	r1, #2
 801ff0e:	e000      	b.n	801ff12 <st_prep_buffer+0x7f2>
 801ff10:	2101      	movs	r1, #1
 801ff12:	62a9      	str	r1, [r5, #40]	@ 0x28
            cycles >>= prep_segment->amass_level;
 801ff14:	40ca      	lsrs	r2, r1
            prep_segment->n_step <<= prep_segment->amass_level;
 801ff16:	69ab      	ldr	r3, [r5, #24]
 801ff18:	408b      	lsls	r3, r1
 801ff1a:	61ab      	str	r3, [r5, #24]
 801ff1c:	e786      	b.n	801fe2c <st_prep_buffer+0x70c>
            prep_segment->amass_level = cycles < amass.level_2 ? 1 : (cycles < amass.level_3 ? 2 : 3);
 801ff1e:	2103      	movs	r1, #3
 801ff20:	e7f7      	b.n	801ff12 <st_prep_buffer+0x7f2>
            if (mm_remaining > 0.0f) { // At end of forced-termination.
 801ff22:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801ff26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff2a:	dc0a      	bgt.n	801ff42 <st_prep_buffer+0x822>
                if (sys.step_control.execute_sys_motion) {
 801ff2c:	4b14      	ldr	r3, [pc, #80]	@ (801ff80 <st_prep_buffer+0x860>)
 801ff2e:	7e1b      	ldrb	r3, [r3, #24]
 801ff30:	f013 0f04 	tst.w	r3, #4
 801ff34:	d11a      	bne.n	801ff6c <st_prep_buffer+0x84c>
                pl_block = NULL; // Set pointer to indicate check and load next planner block.
 801ff36:	4b11      	ldr	r3, [pc, #68]	@ (801ff7c <st_prep_buffer+0x85c>)
 801ff38:	2200      	movs	r2, #0
 801ff3a:	601a      	str	r2, [r3, #0]
                plan_discard_current_block();
 801ff3c:	f7f6 f88a 	bl	8016054 <plan_discard_current_block>
 801ff40:	e792      	b.n	801fe68 <st_prep_buffer+0x748>
                sys.step_control.end_motion = On;
 801ff42:	4a0f      	ldr	r2, [pc, #60]	@ (801ff80 <st_prep_buffer+0x860>)
 801ff44:	7e13      	ldrb	r3, [r2, #24]
 801ff46:	f043 0301 	orr.w	r3, r3, #1
 801ff4a:	7613      	strb	r3, [r2, #24]
                if (settings.parking.flags.enabled && !prep.recalculate.parking)
 801ff4c:	4b16      	ldr	r3, [pc, #88]	@ (801ffa8 <st_prep_buffer+0x888>)
 801ff4e:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801ff52:	f013 0f01 	tst.w	r3, #1
 801ff56:	d0ce      	beq.n	801fef6 <st_prep_buffer+0x7d6>
 801ff58:	4b07      	ldr	r3, [pc, #28]	@ (801ff78 <st_prep_buffer+0x858>)
 801ff5a:	781b      	ldrb	r3, [r3, #0]
 801ff5c:	f013 0f04 	tst.w	r3, #4
 801ff60:	d1c9      	bne.n	801fef6 <st_prep_buffer+0x7d6>
                    prep.recalculate.hold_partial_block = On;
 801ff62:	4a05      	ldr	r2, [pc, #20]	@ (801ff78 <st_prep_buffer+0x858>)
 801ff64:	f043 0302 	orr.w	r3, r3, #2
 801ff68:	7013      	strb	r3, [r2, #0]
                return; // Bail!
 801ff6a:	e7c4      	b.n	801fef6 <st_prep_buffer+0x7d6>
                    sys.step_control.end_motion = On;
 801ff6c:	4a04      	ldr	r2, [pc, #16]	@ (801ff80 <st_prep_buffer+0x860>)
 801ff6e:	f043 0301 	orr.w	r3, r3, #1
 801ff72:	7613      	strb	r3, [r2, #24]
                    return;
 801ff74:	e7bf      	b.n	801fef6 <st_prep_buffer+0x7d6>
 801ff76:	bf00      	nop
 801ff78:	20001e60 	.word	0x20001e60
 801ff7c:	20001eec 	.word	0x20001eec
 801ff80:	2000148c 	.word	0x2000148c
 801ff84:	20001efc 	.word	0x20001efc
 801ff88:	20001f04 	.word	0x20001f04
 801ff8c:	20001ef0 	.word	0x20001ef0
 801ff90:	20001ef4 	.word	0x20001ef4
 801ff94:	20001ef8 	.word	0x20001ef8
 801ff98:	20001f00 	.word	0x20001f00
 801ff9c:	20001ee8 	.word	0x20001ee8
 801ffa0:	392ec33e 	.word	0x392ec33e
 801ffa4:	00000000 	.word	0x00000000
 801ffa8:	20001bc4 	.word	0x20001bc4

0801ffac <st_get_realtime_rate>:
// Called by realtime status reporting to fetch the current speed being executed. This value
// however is not exactly the current speed, but the speed computed in the last step segment
// in the segment buffer. It will always be behind by up to the number of segment blocks (-1)
// divided by the ACCELERATION TICKS PER SECOND in seconds.
float st_get_realtime_rate (void)
{
 801ffac:	b508      	push	{r3, lr}
    return state_get() & (STATE_CYCLE|STATE_HOMING|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 801ffae:	f7fe fba9 	bl	801e704 <state_get>
#ifdef KINEMATICS_API
            ? prep.current_speed * prep.rate_multiplier
#else
            ? prep.current_speed
#endif
            : 0.0f;
 801ffb2:	f010 0f7c 	tst.w	r0, #124	@ 0x7c
 801ffb6:	d003      	beq.n	801ffc0 <st_get_realtime_rate+0x14>
 801ffb8:	4b03      	ldr	r3, [pc, #12]	@ (801ffc8 <st_get_realtime_rate+0x1c>)
 801ffba:	ed93 0a0b 	vldr	s0, [r3, #44]	@ 0x2c
}
 801ffbe:	bd08      	pop	{r3, pc}
            : 0.0f;
 801ffc0:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 801ffcc <st_get_realtime_rate+0x20>
 801ffc4:	e7fb      	b.n	801ffbe <st_get_realtime_rate+0x12>
 801ffc6:	bf00      	nop
 801ffc8:	20001e60 	.word	0x20001e60
 801ffcc:	00000000 	.word	0x00000000

0801ffd0 <st_get_offset_id>:

offset_id_t st_get_offset_id (void)
{
 801ffd0:	b508      	push	{r3, lr}
    plan_block_t *pl_block;

    return st.exec_block
 801ffd2:	4b0b      	ldr	r3, [pc, #44]	@ (8020000 <st_get_offset_id+0x30>)
 801ffd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            ? st.exec_block->offset_id
            : (sys.holding_state == Hold_Complete && (pl_block = plan_get_current_block())
 801ffd6:	b113      	cbz	r3, 801ffde <st_get_offset_id+0xe>
 801ffd8:	f993 0032 	ldrsb.w	r0, [r3, #50]	@ 0x32
                ? pl_block->offset_id
                : -1);
}
 801ffdc:	bd08      	pop	{r3, pc}
            : (sys.holding_state == Hold_Complete && (pl_block = plan_get_current_block())
 801ffde:	4b09      	ldr	r3, [pc, #36]	@ (8020004 <st_get_offset_id+0x34>)
 801ffe0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801ffe4:	2b01      	cmp	r3, #1
 801ffe6:	d105      	bne.n	801fff4 <st_get_offset_id+0x24>
 801ffe8:	f7f6 f858 	bl	801609c <plan_get_current_block>
 801ffec:	b128      	cbz	r0, 801fffa <st_get_offset_id+0x2a>
 801ffee:	f990 0011 	ldrsb.w	r0, [r0, #17]
 801fff2:	e7f3      	b.n	801ffdc <st_get_offset_id+0xc>
 801fff4:	f04f 30ff 	mov.w	r0, #4294967295
 801fff8:	e7f0      	b.n	801ffdc <st_get_offset_id+0xc>
 801fffa:	f04f 30ff 	mov.w	r0, #4294967295
 801fffe:	e7ed      	b.n	801ffdc <st_get_offset_id+0xc>
 8020000:	20001f10 	.word	0x20001f10
 8020004:	2000148c 	.word	0x2000148c

08020008 <stream_get_null>:

// "dummy" version of serialGetC
int16_t stream_get_null (void)
{
    return SERIAL_NO_DATA;
}
 8020008:	f04f 30ff 	mov.w	r0, #4294967295
 802000c:	4770      	bx	lr

0802000e <stream_connected>:
// helper function for (UART) stream implementations.

bool stream_connected (void)
{
    return true;
}
 802000e:	2001      	movs	r0, #1
 8020010:	4770      	bx	lr

08020012 <is_not_connected>:

static bool is_not_connected (void)
{
    return false;
}
 8020012:	2000      	movs	r0, #0
 8020014:	4770      	bx	lr
	...

08020018 <connection_is_up>:

static bool connection_is_up (io_stream_t *stream)
{
 8020018:	b508      	push	{r3, lr}
    if(stream->is_connected)
 802001a:	6843      	ldr	r3, [r0, #4]
 802001c:	b1bb      	cbz	r3, 802004e <connection_is_up+0x36>
        return stream->is_connected();
 802001e:	4798      	blx	r3
        }
        connection = connection->next;
    }

    return false;
}
 8020020:	bd08      	pop	{r3, pc}
        connection = connection->next;
 8020022:	68db      	ldr	r3, [r3, #12]
    while(connection) {
 8020024:	b1ab      	cbz	r3, 8020052 <connection_is_up+0x3a>
        if(connection->stream->type == stream->type &&
 8020026:	681a      	ldr	r2, [r3, #0]
 8020028:	f8b2 c000 	ldrh.w	ip, [r2]
 802002c:	8801      	ldrh	r1, [r0, #0]
 802002e:	458c      	cmp	ip, r1
 8020030:	d1f7      	bne.n	8020022 <connection_is_up+0xa>
             connection->stream->state.is_usb == stream->state.is_usb) {
 8020032:	7891      	ldrb	r1, [r2, #2]
 8020034:	7882      	ldrb	r2, [r0, #2]
 8020036:	404a      	eors	r2, r1
            connection->stream->instance == stream->instance &&
 8020038:	f012 0f04 	tst.w	r2, #4
 802003c:	d1f1      	bne.n	8020022 <connection_is_up+0xa>
            if(connection->stream->state.is_usb)
 802003e:	f011 0f04 	tst.w	r1, #4
 8020042:	d001      	beq.n	8020048 <connection_is_up+0x30>
                connection->is_up = is_not_connected;
 8020044:	4a04      	ldr	r2, [pc, #16]	@ (8020058 <connection_is_up+0x40>)
 8020046:	605a      	str	r2, [r3, #4]
            return connection->is_up();
 8020048:	685b      	ldr	r3, [r3, #4]
 802004a:	4798      	blx	r3
 802004c:	e7e8      	b.n	8020020 <connection_is_up+0x8>
    stream_connection_t *connection = connections;
 802004e:	4b03      	ldr	r3, [pc, #12]	@ (802005c <connection_is_up+0x44>)
 8020050:	e7e8      	b.n	8020024 <connection_is_up+0xc>
    return false;
 8020052:	2000      	movs	r0, #0
 8020054:	e7e4      	b.n	8020020 <connection_is_up+0x8>
 8020056:	bf00      	nop
 8020058:	08020013 	.word	0x08020013
 802005c:	20002368 	.word	0x20002368

08020060 <stream_write_all>:

static void stream_write_all (const char *s)
{
 8020060:	b538      	push	{r3, r4, r5, lr}
 8020062:	4605      	mov	r5, r0
    stream_connection_t *connection = connections;
 8020064:	4c06      	ldr	r4, [pc, #24]	@ (8020080 <stream_write_all+0x20>)

    while(connection) {
 8020066:	e000      	b.n	802006a <stream_write_all+0xa>
        if(connection->is_up())
            connection->stream->write(s);
        connection = connection->next;
 8020068:	68e4      	ldr	r4, [r4, #12]
    while(connection) {
 802006a:	b144      	cbz	r4, 802007e <stream_write_all+0x1e>
        if(connection->is_up())
 802006c:	6863      	ldr	r3, [r4, #4]
 802006e:	4798      	blx	r3
 8020070:	2800      	cmp	r0, #0
 8020072:	d0f9      	beq.n	8020068 <stream_write_all+0x8>
            connection->stream->write(s);
 8020074:	6823      	ldr	r3, [r4, #0]
 8020076:	68db      	ldr	r3, [r3, #12]
 8020078:	4628      	mov	r0, r5
 802007a:	4798      	blx	r3
 802007c:	e7f4      	b.n	8020068 <stream_write_all+0x8>
    }
}
 802007e:	bd38      	pop	{r3, r4, r5, pc}
 8020080:	20002368 	.word	0x20002368

08020084 <_open_instance>:
    uint32_t baud_rate;
    io_stream_t const *stream;
} connection;

static bool _open_instance (io_stream_properties_t const *stream)
{
 8020084:	b510      	push	{r4, lr}
    if(stream->type == StreamType_Serial && (connection.instance == 255 || stream->instance == connection.instance) && stream->flags.claimable && !stream->flags.claimed)
 8020086:	7803      	ldrb	r3, [r0, #0]
 8020088:	b933      	cbnz	r3, 8020098 <_open_instance+0x14>
 802008a:	4b0c      	ldr	r3, [pc, #48]	@ (80200bc <_open_instance+0x38>)
 802008c:	781b      	ldrb	r3, [r3, #0]
 802008e:	2bff      	cmp	r3, #255	@ 0xff
 8020090:	d008      	beq.n	80200a4 <_open_instance+0x20>
 8020092:	7842      	ldrb	r2, [r0, #1]
 8020094:	4293      	cmp	r3, r2
 8020096:	d005      	beq.n	80200a4 <_open_instance+0x20>
        connection.stream = stream->claim(connection.baud_rate);

    return connection.stream != NULL;
 8020098:	4b08      	ldr	r3, [pc, #32]	@ (80200bc <_open_instance+0x38>)
 802009a:	6898      	ldr	r0, [r3, #8]
}
 802009c:	3800      	subs	r0, #0
 802009e:	bf18      	it	ne
 80200a0:	2001      	movne	r0, #1
 80200a2:	bd10      	pop	{r4, pc}
    if(stream->type == StreamType_Serial && (connection.instance == 255 || stream->instance == connection.instance) && stream->flags.claimable && !stream->flags.claimed)
 80200a4:	7883      	ldrb	r3, [r0, #2]
 80200a6:	f003 0306 	and.w	r3, r3, #6
 80200aa:	2b02      	cmp	r3, #2
 80200ac:	d1f4      	bne.n	8020098 <_open_instance+0x14>
        connection.stream = stream->claim(connection.baud_rate);
 80200ae:	6843      	ldr	r3, [r0, #4]
 80200b0:	4c02      	ldr	r4, [pc, #8]	@ (80200bc <_open_instance+0x38>)
 80200b2:	6860      	ldr	r0, [r4, #4]
 80200b4:	4798      	blx	r3
 80200b6:	60a0      	str	r0, [r4, #8]
 80200b8:	e7ee      	b.n	8020098 <_open_instance+0x14>
 80200ba:	bf00      	nop
 80200bc:	20002344 	.word	0x20002344

080200c0 <null_rx_free>:
static enqueue_realtime_command_ptr enqueue_realtime_command = protocol_enqueue_realtime_command;

static uint16_t null_rx_free (void)
{
    return RX_BUFFER_SIZE;
}
 80200c0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80200c4:	4770      	bx	lr

080200c6 <null_count>:

static uint16_t null_count (void)
{
    return 0;
}
 80200c6:	2000      	movs	r0, #0
 80200c8:	4770      	bx	lr

080200ca <null_put_c>:

static bool null_put_c (const char c)
{
    return true;
}
 80200ca:	2001      	movs	r0, #1
 80200cc:	4770      	bx	lr

080200ce <null_write_string>:

static void null_write_string (const char *s)
{
}
 80200ce:	4770      	bx	lr

080200d0 <null_write>:

static void null_write(const char *s, uint16_t length)
{
}
 80200d0:	4770      	bx	lr

080200d2 <null_suspend_disable>:

static bool null_suspend_disable (bool suspend)
{
    return true;
}
 80200d2:	2001      	movs	r0, #1
 80200d4:	4770      	bx	lr

080200d6 <null_set_baudrate>:

static bool null_set_baudrate (uint32_t baud_rate)
{
    return true;
}
 80200d6:	2001      	movs	r0, #1
 80200d8:	4770      	bx	lr
	...

080200dc <null_enqueue_rt_command>:

static bool null_enqueue_rt_command (char c)
{
 80200dc:	b508      	push	{r3, lr}
    return enqueue_realtime_command(c);
 80200de:	4b02      	ldr	r3, [pc, #8]	@ (80200e8 <null_enqueue_rt_command+0xc>)
 80200e0:	681b      	ldr	r3, [r3, #0]
 80200e2:	4798      	blx	r3
}
 80200e4:	bd08      	pop	{r3, pc}
 80200e6:	bf00      	nop
 80200e8:	20000474 	.word	0x20000474

080200ec <null_set_rt_handler>:

static enqueue_realtime_command_ptr null_set_rt_handler (enqueue_realtime_command_ptr handler)
{
 80200ec:	4603      	mov	r3, r0
    enqueue_realtime_command_ptr prev = enqueue_realtime_command;
 80200ee:	4a03      	ldr	r2, [pc, #12]	@ (80200fc <null_set_rt_handler+0x10>)
 80200f0:	6810      	ldr	r0, [r2, #0]

    if(handler)
 80200f2:	461a      	mov	r2, r3
 80200f4:	b10b      	cbz	r3, 80200fa <null_set_rt_handler+0xe>
        enqueue_realtime_command = handler;
 80200f6:	4b01      	ldr	r3, [pc, #4]	@ (80200fc <null_set_rt_handler+0x10>)
 80200f8:	601a      	str	r2, [r3, #0]

    return prev;
}
 80200fa:	4770      	bx	lr
 80200fc:	20000474 	.word	0x20000474

08020100 <stream_null_init>:
        .set_baud_rate = null_set_baudrate,
        .set_enqueue_rt_handler = null_set_rt_handler
    };

    return &stream;
}
 8020100:	4800      	ldr	r0, [pc, #0]	@ (8020104 <stream_null_init+0x4>)
 8020102:	4770      	bx	lr
 8020104:	0802ff48 	.word	0x0802ff48

08020108 <await_toolchange_ack>:
{
 8020108:	b510      	push	{r4, lr}
    if(c == CMD_TOOL_ACK && !stream.rxbuffer->backup) {
 802010a:	28a3      	cmp	r0, #163	@ 0xa3
 802010c:	d103      	bne.n	8020116 <await_toolchange_ack+0xe>
 802010e:	4b13      	ldr	r3, [pc, #76]	@ (802015c <await_toolchange_ack+0x54>)
 8020110:	689c      	ldr	r4, [r3, #8]
 8020112:	7aa3      	ldrb	r3, [r4, #10]
 8020114:	b11b      	cbz	r3, 802011e <await_toolchange_ack+0x16>
        return stream.enqueue_realtime_command(c);
 8020116:	4b11      	ldr	r3, [pc, #68]	@ (802015c <await_toolchange_ack+0x54>)
 8020118:	681b      	ldr	r3, [r3, #0]
 802011a:	4798      	blx	r3
}
 802011c:	bd10      	pop	{r4, pc}
        memcpy(&rxbackup, stream.rxbuffer, sizeof(stream_rx_buffer_t));
 802011e:	f240 420c 	movw	r2, #1036	@ 0x40c
 8020122:	4621      	mov	r1, r4
 8020124:	480e      	ldr	r0, [pc, #56]	@ (8020160 <await_toolchange_ack+0x58>)
 8020126:	f004 fb0a 	bl	802473e <memcpy>
        stream.rxbuffer->backup = true;
 802012a:	2301      	movs	r3, #1
 802012c:	72a3      	strb	r3, [r4, #10]
        stream.rxbuffer->tail = stream.rxbuffer->head;
 802012e:	6823      	ldr	r3, [r4, #0]
 8020130:	6063      	str	r3, [r4, #4]
        hal.stream.read = stream.read; // restore normal input
 8020132:	4c0a      	ldr	r4, [pc, #40]	@ (802015c <await_toolchange_ack+0x54>)
 8020134:	6862      	ldr	r2, [r4, #4]
 8020136:	4b0b      	ldr	r3, [pc, #44]	@ (8020164 <await_toolchange_ack+0x5c>)
 8020138:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        hal.stream.set_enqueue_rt_handler(stream.enqueue_realtime_command);
 802013c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8020140:	6820      	ldr	r0, [r4, #0]
 8020142:	4798      	blx	r3
        stream.enqueue_realtime_command = NULL;
 8020144:	2300      	movs	r3, #0
 8020146:	6023      	str	r3, [r4, #0]
        if(grbl.on_toolchange_ack)
 8020148:	4b07      	ldr	r3, [pc, #28]	@ (8020168 <await_toolchange_ack+0x60>)
 802014a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 802014e:	b113      	cbz	r3, 8020156 <await_toolchange_ack+0x4e>
            grbl.on_toolchange_ack();
 8020150:	4798      	blx	r3
    return true;
 8020152:	2001      	movs	r0, #1
 8020154:	e7e2      	b.n	802011c <await_toolchange_ack+0x14>
 8020156:	2001      	movs	r0, #1
 8020158:	e7e0      	b.n	802011c <await_toolchange_ack+0x14>
 802015a:	bf00      	nop
 802015c:	2000237c 	.word	0x2000237c
 8020160:	20002388 	.word	0x20002388
 8020164:	200011ac 	.word	0x200011ac
 8020168:	20001394 	.word	0x20001394

0802016c <add_connection>:
{
 802016c:	b510      	push	{r4, lr}
 802016e:	4604      	mov	r4, r0
    if(base.stream == NULL) {
 8020170:	4b15      	ldr	r3, [pc, #84]	@ (80201c8 <add_connection+0x5c>)
 8020172:	681b      	ldr	r3, [r3, #0]
 8020174:	b18b      	cbz	r3, 802019a <add_connection+0x2e>
    } else if((connection = malloc(sizeof(stream_connection_t)))) {
 8020176:	2014      	movs	r0, #20
 8020178:	f002 f8b8 	bl	80222ec <malloc>
 802017c:	b178      	cbz	r0, 802019e <add_connection+0x32>
        connection->stream = stream;
 802017e:	6004      	str	r4, [r0, #0]
        connection->next = NULL;
 8020180:	2300      	movs	r3, #0
 8020182:	60c3      	str	r3, [r0, #12]
    stream_connection_t *connection, *last = connections;
 8020184:	4b10      	ldr	r3, [pc, #64]	@ (80201c8 <add_connection+0x5c>)
        while(last->next) {
 8020186:	461a      	mov	r2, r3
 8020188:	68db      	ldr	r3, [r3, #12]
 802018a:	b163      	cbz	r3, 80201a6 <add_connection+0x3a>
            if(last->stream == stream) {
 802018c:	681a      	ldr	r2, [r3, #0]
 802018e:	42a2      	cmp	r2, r4
 8020190:	d1f9      	bne.n	8020186 <add_connection+0x1a>
                free(connection);
 8020192:	f002 f8b3 	bl	80222fc <free>
                return NULL;
 8020196:	2000      	movs	r0, #0
 8020198:	e004      	b.n	80201a4 <add_connection+0x38>
        base.stream = stream;
 802019a:	480b      	ldr	r0, [pc, #44]	@ (80201c8 <add_connection+0x5c>)
 802019c:	6004      	str	r4, [r0, #0]
    connection->is_up = stream->is_connected ?
 802019e:	6863      	ldr	r3, [r4, #4]
                         stream->is_connected :
 80201a0:	b123      	cbz	r3, 80201ac <add_connection+0x40>
    connection->is_up = stream->is_connected ?
 80201a2:	6043      	str	r3, [r0, #4]
}
 80201a4:	bd10      	pop	{r4, pc}
        connection->prev = last;
 80201a6:	6102      	str	r2, [r0, #16]
        last->next = connection;
 80201a8:	60d0      	str	r0, [r2, #12]
 80201aa:	e7f8      	b.n	802019e <add_connection+0x32>
                          (stream->state.is_usb && base.stream != stream ? is_not_connected : stream_connected);
 80201ac:	78a3      	ldrb	r3, [r4, #2]
 80201ae:	f013 0f04 	tst.w	r3, #4
 80201b2:	d007      	beq.n	80201c4 <add_connection+0x58>
 80201b4:	4b04      	ldr	r3, [pc, #16]	@ (80201c8 <add_connection+0x5c>)
 80201b6:	681b      	ldr	r3, [r3, #0]
 80201b8:	42a3      	cmp	r3, r4
 80201ba:	d001      	beq.n	80201c0 <add_connection+0x54>
 80201bc:	4b03      	ldr	r3, [pc, #12]	@ (80201cc <add_connection+0x60>)
 80201be:	e7f0      	b.n	80201a2 <add_connection+0x36>
 80201c0:	4b03      	ldr	r3, [pc, #12]	@ (80201d0 <add_connection+0x64>)
 80201c2:	e7ee      	b.n	80201a2 <add_connection+0x36>
 80201c4:	4b02      	ldr	r3, [pc, #8]	@ (80201d0 <add_connection+0x64>)
 80201c6:	e7ec      	b.n	80201a2 <add_connection+0x36>
 80201c8:	20002368 	.word	0x20002368
 80201cc:	08020013 	.word	0x08020013
 80201d0:	0802000f 	.word	0x0802000f

080201d4 <stream_register_streams>:
    if(details->n_streams) {
 80201d4:	7803      	ldrb	r3, [r0, #0]
 80201d6:	b11b      	cbz	r3, 80201e0 <stream_register_streams+0xc>
        details->next = streams;
 80201d8:	4b02      	ldr	r3, [pc, #8]	@ (80201e4 <stream_register_streams+0x10>)
 80201da:	681a      	ldr	r2, [r3, #0]
 80201dc:	6082      	str	r2, [r0, #8]
        streams = details;
 80201de:	6018      	str	r0, [r3, #0]
}
 80201e0:	4770      	bx	lr
 80201e2:	bf00      	nop
 80201e4:	20000478 	.word	0x20000478

080201e8 <stream_enumerate_streams>:
    if(callback == NULL)
 80201e8:	b1a8      	cbz	r0, 8020216 <stream_enumerate_streams+0x2e>
{
 80201ea:	b570      	push	{r4, r5, r6, lr}
 80201ec:	4606      	mov	r6, r0
    io_stream_details_t *details = streams;
 80201ee:	4b0c      	ldr	r3, [pc, #48]	@ (8020220 <stream_enumerate_streams+0x38>)
 80201f0:	681d      	ldr	r5, [r3, #0]
    bool claimed = false;
 80201f2:	2200      	movs	r2, #0
    while(details && !claimed) {
 80201f4:	e000      	b.n	80201f8 <stream_enumerate_streams+0x10>
        details = details->next;
 80201f6:	68ad      	ldr	r5, [r5, #8]
    while(details && !claimed) {
 80201f8:	b185      	cbz	r5, 802021c <stream_enumerate_streams+0x34>
 80201fa:	b97a      	cbnz	r2, 802021c <stream_enumerate_streams+0x34>
        for(idx = 0; idx < details->n_streams; idx++) {
 80201fc:	2400      	movs	r4, #0
 80201fe:	782b      	ldrb	r3, [r5, #0]
 8020200:	42a3      	cmp	r3, r4
 8020202:	d9f8      	bls.n	80201f6 <stream_enumerate_streams+0xe>
            if((claimed = callback(&details->streams[idx])))
 8020204:	6868      	ldr	r0, [r5, #4]
 8020206:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 802020a:	47b0      	blx	r6
 802020c:	4602      	mov	r2, r0
 802020e:	2800      	cmp	r0, #0
 8020210:	d1f1      	bne.n	80201f6 <stream_enumerate_streams+0xe>
        for(idx = 0; idx < details->n_streams; idx++) {
 8020212:	3401      	adds	r4, #1
 8020214:	e7f3      	b.n	80201fe <stream_enumerate_streams+0x16>
        return false;
 8020216:	2200      	movs	r2, #0
}
 8020218:	4610      	mov	r0, r2
 802021a:	4770      	bx	lr
 802021c:	4610      	mov	r0, r2
 802021e:	bd70      	pop	{r4, r5, r6, pc}
 8020220:	20000478 	.word	0x20000478

08020224 <stream_tx_blocking>:
{
 8020224:	b510      	push	{r4, lr}
    grbl.on_execute_realtime(state_get());
 8020226:	4b06      	ldr	r3, [pc, #24]	@ (8020240 <stream_tx_blocking+0x1c>)
 8020228:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 802022a:	f7fe fa6b 	bl	801e704 <state_get>
 802022e:	47a0      	blx	r4
    return !(sys.rt_exec_state & EXEC_RESET);
 8020230:	4b04      	ldr	r3, [pc, #16]	@ (8020244 <stream_tx_blocking+0x20>)
 8020232:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8020234:	f013 0f20 	tst.w	r3, #32
}
 8020238:	bf0c      	ite	eq
 802023a:	2001      	moveq	r0, #1
 802023c:	2000      	movne	r0, #0
 802023e:	bd10      	pop	{r4, pc}
 8020240:	20001394 	.word	0x20001394
 8020244:	2000148c 	.word	0x2000148c

08020248 <stream_rx_suspend>:
{
 8020248:	b570      	push	{r4, r5, r6, lr}
 802024a:	4604      	mov	r4, r0
    if(suspend) {
 802024c:	b1b9      	cbz	r1, 802027e <stream_rx_suspend+0x36>
        if(stream.rxbuffer == NULL) {
 802024e:	4b1a      	ldr	r3, [pc, #104]	@ (80202b8 <stream_rx_suspend+0x70>)
 8020250:	689b      	ldr	r3, [r3, #8]
 8020252:	b12b      	cbz	r3, 8020260 <stream_rx_suspend+0x18>
    return rxbuffer->tail != rxbuffer->head;
 8020254:	6860      	ldr	r0, [r4, #4]
 8020256:	6823      	ldr	r3, [r4, #0]
}
 8020258:	1ac0      	subs	r0, r0, r3
 802025a:	bf18      	it	ne
 802025c:	2001      	movne	r0, #1
 802025e:	bd70      	pop	{r4, r5, r6, pc}
            stream.rxbuffer = rxbuffer;
 8020260:	4e15      	ldr	r6, [pc, #84]	@ (80202b8 <stream_rx_suspend+0x70>)
 8020262:	60b0      	str	r0, [r6, #8]
            stream.read = hal.stream.read;
 8020264:	4d15      	ldr	r5, [pc, #84]	@ (80202bc <stream_rx_suspend+0x74>)
 8020266:	f8d5 30c4 	ldr.w	r3, [r5, #196]	@ 0xc4
 802026a:	6073      	str	r3, [r6, #4]
            stream.enqueue_realtime_command = hal.stream.set_enqueue_rt_handler(await_toolchange_ack);
 802026c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 8020270:	4813      	ldr	r0, [pc, #76]	@ (80202c0 <stream_rx_suspend+0x78>)
 8020272:	4798      	blx	r3
 8020274:	6030      	str	r0, [r6, #0]
            hal.stream.read = stream_get_null;
 8020276:	4b13      	ldr	r3, [pc, #76]	@ (80202c4 <stream_rx_suspend+0x7c>)
 8020278:	f8c5 30c4 	str.w	r3, [r5, #196]	@ 0xc4
 802027c:	e7ea      	b.n	8020254 <stream_rx_suspend+0xc>
    } else if(stream.rxbuffer) {
 802027e:	4b0e      	ldr	r3, [pc, #56]	@ (80202b8 <stream_rx_suspend+0x70>)
 8020280:	689b      	ldr	r3, [r3, #8]
 8020282:	2b00      	cmp	r3, #0
 8020284:	d0e6      	beq.n	8020254 <stream_rx_suspend+0xc>
        if(rxbuffer->backup)
 8020286:	7a83      	ldrb	r3, [r0, #10]
 8020288:	b983      	cbnz	r3, 80202ac <stream_rx_suspend+0x64>
        if(stream.enqueue_realtime_command) {
 802028a:	4b0b      	ldr	r3, [pc, #44]	@ (80202b8 <stream_rx_suspend+0x70>)
 802028c:	6818      	ldr	r0, [r3, #0]
 802028e:	b148      	cbz	r0, 80202a4 <stream_rx_suspend+0x5c>
            hal.stream.read = stream.read; // restore normal input
 8020290:	461d      	mov	r5, r3
 8020292:	685a      	ldr	r2, [r3, #4]
 8020294:	4b09      	ldr	r3, [pc, #36]	@ (80202bc <stream_rx_suspend+0x74>)
 8020296:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
            hal.stream.set_enqueue_rt_handler(stream.enqueue_realtime_command);
 802029a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 802029e:	4798      	blx	r3
            stream.enqueue_realtime_command = NULL;
 80202a0:	2300      	movs	r3, #0
 80202a2:	602b      	str	r3, [r5, #0]
        stream.rxbuffer = NULL;
 80202a4:	4b04      	ldr	r3, [pc, #16]	@ (80202b8 <stream_rx_suspend+0x70>)
 80202a6:	2200      	movs	r2, #0
 80202a8:	609a      	str	r2, [r3, #8]
 80202aa:	e7d3      	b.n	8020254 <stream_rx_suspend+0xc>
            memcpy(rxbuffer, &rxbackup, sizeof(stream_rx_buffer_t));
 80202ac:	f240 420c 	movw	r2, #1036	@ 0x40c
 80202b0:	4905      	ldr	r1, [pc, #20]	@ (80202c8 <stream_rx_suspend+0x80>)
 80202b2:	f004 fa44 	bl	802473e <memcpy>
 80202b6:	e7e8      	b.n	802028a <stream_rx_suspend+0x42>
 80202b8:	2000237c 	.word	0x2000237c
 80202bc:	200011ac 	.word	0x200011ac
 80202c0:	08020109 	.word	0x08020109
 80202c4:	08020009 	.word	0x08020009
 80202c8:	20002388 	.word	0x20002388

080202cc <stream_enqueue_realtime_command>:
{
 80202cc:	b510      	push	{r4, lr}
 80202ce:	4604      	mov	r4, r0
	bool drop = hal.stream.enqueue_rt_command ? hal.stream.enqueue_rt_command(c) : protocol_enqueue_realtime_command(c);
 80202d0:	4b0c      	ldr	r3, [pc, #48]	@ (8020304 <stream_enqueue_realtime_command+0x38>)
 80202d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80202d6:	b193      	cbz	r3, 80202fe <stream_enqueue_realtime_command+0x32>
 80202d8:	4798      	blx	r3
    if(drop && (c == CMD_CYCLE_START || c == CMD_CYCLE_START_LEGACY))
 80202da:	b178      	cbz	r0, 80202fc <stream_enqueue_realtime_command+0x30>
 80202dc:	2c81      	cmp	r4, #129	@ 0x81
 80202de:	d001      	beq.n	80202e4 <stream_enqueue_realtime_command+0x18>
 80202e0:	2c7e      	cmp	r4, #126	@ 0x7e
 80202e2:	d10b      	bne.n	80202fc <stream_enqueue_realtime_command+0x30>
        sys.report.cycle_start = settings.status_report.pin_state;
 80202e4:	4b08      	ldr	r3, [pc, #32]	@ (8020308 <stream_enqueue_realtime_command+0x3c>)
 80202e6:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 80202ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80202ee:	4a07      	ldr	r2, [pc, #28]	@ (802030c <stream_enqueue_realtime_command+0x40>)
 80202f0:	f892 1033 	ldrb.w	r1, [r2, #51]	@ 0x33
 80202f4:	f363 1186 	bfi	r1, r3, #6, #1
 80202f8:	f882 1033 	strb.w	r1, [r2, #51]	@ 0x33
}
 80202fc:	bd10      	pop	{r4, pc}
	bool drop = hal.stream.enqueue_rt_command ? hal.stream.enqueue_rt_command(c) : protocol_enqueue_realtime_command(c);
 80202fe:	f7f7 f9ab 	bl	8017658 <protocol_enqueue_realtime_command>
 8020302:	e7ea      	b.n	80202da <stream_enqueue_realtime_command+0xe>
 8020304:	200011ac 	.word	0x200011ac
 8020308:	20001bc4 	.word	0x20001bc4
 802030c:	2000148c 	.word	0x2000148c

08020310 <stream_set_description>:
{
 8020310:	b538      	push	{r3, r4, r5, lr}
    if((ok = stream->type == StreamType_Serial && !stream->state.is_usb && hal.periph_port.set_pin_description)) {
 8020312:	6803      	ldr	r3, [r0, #0]
 8020314:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020318:	f423 037b 	bic.w	r3, r3, #16449536	@ 0xfb0000
 802031c:	b9a3      	cbnz	r3, 8020348 <stream_set_description+0x38>
 802031e:	4604      	mov	r4, r0
 8020320:	460d      	mov	r5, r1
 8020322:	4b0b      	ldr	r3, [pc, #44]	@ (8020350 <stream_set_description+0x40>)
 8020324:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8020328:	b183      	cbz	r3, 802034c <stream_set_description+0x3c>
        hal.periph_port.set_pin_description(Output_TX, (pin_group_t)(PinGroup_UART + stream->instance), description);
 802032a:	7841      	ldrb	r1, [r0, #1]
 802032c:	462a      	mov	r2, r5
 802032e:	3111      	adds	r1, #17
 8020330:	209f      	movs	r0, #159	@ 0x9f
 8020332:	4798      	blx	r3
        hal.periph_port.set_pin_description(Input_RX, (pin_group_t)(PinGroup_UART + stream->instance), description);
 8020334:	4b06      	ldr	r3, [pc, #24]	@ (8020350 <stream_set_description+0x40>)
 8020336:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 802033a:	7861      	ldrb	r1, [r4, #1]
 802033c:	462a      	mov	r2, r5
 802033e:	3111      	adds	r1, #17
 8020340:	209e      	movs	r0, #158	@ 0x9e
 8020342:	4798      	blx	r3
    if((ok = stream->type == StreamType_Serial && !stream->state.is_usb && hal.periph_port.set_pin_description)) {
 8020344:	2001      	movs	r0, #1
 8020346:	e000      	b.n	802034a <stream_set_description+0x3a>
 8020348:	2000      	movs	r0, #0
}
 802034a:	bd38      	pop	{r3, r4, r5, pc}
    if((ok = stream->type == StreamType_Serial && !stream->state.is_usb && hal.periph_port.set_pin_description)) {
 802034c:	2000      	movs	r0, #0
 802034e:	e7fc      	b.n	802034a <stream_set_description+0x3a>
 8020350:	200011ac 	.word	0x200011ac

08020354 <stream_mpg_enable>:
    if(mpg.stream == NULL)
 8020354:	4b47      	ldr	r3, [pc, #284]	@ (8020474 <stream_mpg_enable+0x120>)
 8020356:	681b      	ldr	r3, [r3, #0]
 8020358:	2b00      	cmp	r3, #0
 802035a:	f000 8088 	beq.w	802046e <stream_mpg_enable+0x11a>
{
 802035e:	b570      	push	{r4, r5, r6, lr}
 8020360:	4604      	mov	r4, r0
    sys_state_t state = state_get();
 8020362:	f7fe f9cf 	bl	801e704 <state_get>
    if(on == sys.mpg_mode || (on && (gc_state.file_run || !(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP)))))) {
 8020366:	4b44      	ldr	r3, [pc, #272]	@ (8020478 <stream_mpg_enable+0x124>)
 8020368:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 802036c:	42a3      	cmp	r3, r4
 802036e:	d042      	beq.n	80203f6 <stream_mpg_enable+0xa2>
 8020370:	2c00      	cmp	r4, #0
 8020372:	d045      	beq.n	8020400 <stream_mpg_enable+0xac>
 8020374:	4b41      	ldr	r3, [pc, #260]	@ (802047c <stream_mpg_enable+0x128>)
 8020376:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802037a:	2b00      	cmp	r3, #0
 802037c:	d13b      	bne.n	80203f6 <stream_mpg_enable+0xa2>
 802037e:	b118      	cbz	r0, 8020388 <stream_mpg_enable+0x34>
 8020380:	f240 1301 	movw	r3, #257	@ 0x101
 8020384:	4218      	tst	r0, r3
 8020386:	d036      	beq.n	80203f6 <stream_mpg_enable+0xa2>
        if(org_stream.type == StreamType_Redirected) {
 8020388:	4b3d      	ldr	r3, [pc, #244]	@ (8020480 <stream_mpg_enable+0x12c>)
 802038a:	781b      	ldrb	r3, [r3, #0]
 802038c:	2b06      	cmp	r3, #6
 802038e:	d151      	bne.n	8020434 <stream_mpg_enable+0xe0>
            memcpy(&org_stream, &hal.stream, sizeof(io_stream_t));
 8020390:	4d3c      	ldr	r5, [pc, #240]	@ (8020484 <stream_mpg_enable+0x130>)
 8020392:	224c      	movs	r2, #76	@ 0x4c
 8020394:	f105 01a8 	add.w	r1, r5, #168	@ 0xa8
 8020398:	4839      	ldr	r0, [pc, #228]	@ (8020480 <stream_mpg_enable+0x12c>)
 802039a:	f004 f9d0 	bl	802473e <memcpy>
            if(hal.stream.disable_rx)
 802039e:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
 80203a2:	b10b      	cbz	r3, 80203a8 <stream_mpg_enable+0x54>
                hal.stream.disable_rx(true);
 80203a4:	2001      	movs	r0, #1
 80203a6:	4798      	blx	r3
            mpg.stream->disable_rx(false);
 80203a8:	4d32      	ldr	r5, [pc, #200]	@ (8020474 <stream_mpg_enable+0x120>)
 80203aa:	682b      	ldr	r3, [r5, #0]
 80203ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80203ae:	2000      	movs	r0, #0
 80203b0:	4798      	blx	r3
            mpg.stream->set_enqueue_rt_handler(org_stream.set_enqueue_rt_handler(NULL));
 80203b2:	682b      	ldr	r3, [r5, #0]
 80203b4:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 80203b6:	4b32      	ldr	r3, [pc, #200]	@ (8020480 <stream_mpg_enable+0x12c>)
 80203b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80203ba:	2000      	movs	r0, #0
 80203bc:	4798      	blx	r3
 80203be:	47b0      	blx	r6
            hal.stream.type = StreamType_MPG;
 80203c0:	4a30      	ldr	r2, [pc, #192]	@ (8020484 <stream_mpg_enable+0x130>)
 80203c2:	2301      	movs	r3, #1
 80203c4:	f882 30a8 	strb.w	r3, [r2, #168]	@ 0xa8
            hal.stream.read = mpg.stream->read;
 80203c8:	682b      	ldr	r3, [r5, #0]
 80203ca:	69d9      	ldr	r1, [r3, #28]
 80203cc:	f8c2 10c4 	str.w	r1, [r2, #196]	@ 0xc4
            if(mpg.flags.is_mpg_tx)
 80203d0:	7a2a      	ldrb	r2, [r5, #8]
 80203d2:	f012 0f02 	tst.w	r2, #2
 80203d6:	d003      	beq.n	80203e0 <stream_mpg_enable+0x8c>
                hal.stream.write = mpg.stream->write;
 80203d8:	68d9      	ldr	r1, [r3, #12]
 80203da:	4a2a      	ldr	r2, [pc, #168]	@ (8020484 <stream_mpg_enable+0x130>)
 80203dc:	f8c2 10b4 	str.w	r1, [r2, #180]	@ 0xb4
            hal.stream.get_rx_buffer_free = mpg.stream->get_rx_buffer_free;
 80203e0:	6899      	ldr	r1, [r3, #8]
 80203e2:	4a28      	ldr	r2, [pc, #160]	@ (8020484 <stream_mpg_enable+0x130>)
 80203e4:	f8c2 10b0 	str.w	r1, [r2, #176]	@ 0xb0
            hal.stream.cancel_read_buffer = mpg.stream->cancel_read_buffer;
 80203e8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80203ea:	f8c2 10cc 	str.w	r1, [r2, #204]	@ 0xcc
            hal.stream.reset_read_buffer = mpg.stream->reset_read_buffer;
 80203ee:	6a1b      	ldr	r3, [r3, #32]
 80203f0:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
 80203f4:	e01e      	b.n	8020434 <stream_mpg_enable+0xe0>
        protocol_enqueue_realtime_command(CMD_STATUS_REPORT_ALL);
 80203f6:	2087      	movs	r0, #135	@ 0x87
 80203f8:	f7f7 f92e 	bl	8017658 <protocol_enqueue_realtime_command>
        return false;
 80203fc:	2000      	movs	r0, #0
 80203fe:	e02d      	b.n	802045c <stream_mpg_enable+0x108>
    } else if(org_stream.type != StreamType_Redirected) {
 8020400:	4b1f      	ldr	r3, [pc, #124]	@ (8020480 <stream_mpg_enable+0x12c>)
 8020402:	781b      	ldrb	r3, [r3, #0]
 8020404:	2b06      	cmp	r3, #6
 8020406:	d015      	beq.n	8020434 <stream_mpg_enable+0xe0>
        if(mpg_write_char)
 8020408:	4b1f      	ldr	r3, [pc, #124]	@ (8020488 <stream_mpg_enable+0x134>)
 802040a:	6818      	ldr	r0, [r3, #0]
 802040c:	b338      	cbz	r0, 802045e <stream_mpg_enable+0x10a>
            mpg.stream->set_enqueue_rt_handler(mpg_write_char);
 802040e:	4b19      	ldr	r3, [pc, #100]	@ (8020474 <stream_mpg_enable+0x120>)
 8020410:	681b      	ldr	r3, [r3, #0]
 8020412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020414:	4798      	blx	r3
        memcpy(&hal.stream, &org_stream, sizeof(io_stream_t));
 8020416:	4d1b      	ldr	r5, [pc, #108]	@ (8020484 <stream_mpg_enable+0x130>)
 8020418:	4e19      	ldr	r6, [pc, #100]	@ (8020480 <stream_mpg_enable+0x12c>)
 802041a:	224c      	movs	r2, #76	@ 0x4c
 802041c:	4631      	mov	r1, r6
 802041e:	f105 00a8 	add.w	r0, r5, #168	@ 0xa8
 8020422:	f004 f98c 	bl	802473e <memcpy>
        org_stream.type = StreamType_Redirected;
 8020426:	2306      	movs	r3, #6
 8020428:	7033      	strb	r3, [r6, #0]
        if(hal.stream.disable_rx)
 802042a:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
 802042e:	b10b      	cbz	r3, 8020434 <stream_mpg_enable+0xe0>
            hal.stream.disable_rx(false);
 8020430:	2000      	movs	r0, #0
 8020432:	4798      	blx	r3
    hal.stream.reset_read_buffer();
 8020434:	4b13      	ldr	r3, [pc, #76]	@ (8020484 <stream_mpg_enable+0x130>)
 8020436:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 802043a:	4798      	blx	r3
    sys.mpg_mode = on;
 802043c:	4b0e      	ldr	r3, [pc, #56]	@ (8020478 <stream_mpg_enable+0x124>)
 802043e:	f883 407f 	strb.w	r4, [r3, #127]	@ 0x7f
    mpg.flags.mpg_control = Off;
 8020442:	4b0c      	ldr	r3, [pc, #48]	@ (8020474 <stream_mpg_enable+0x120>)
 8020444:	7a1a      	ldrb	r2, [r3, #8]
 8020446:	f36f 0200 	bfc	r2, #0, #1
 802044a:	721a      	strb	r2, [r3, #8]
    system_add_rt_report(Report_MPGMode);
 802044c:	2001      	movs	r0, #1
 802044e:	f001 f917 	bl	8021680 <system_add_rt_report>
    protocol_enqueue_realtime_command(on ? CMD_STATUS_REPORT_ALL : CMD_STATUS_REPORT);
 8020452:	b154      	cbz	r4, 802046a <stream_mpg_enable+0x116>
 8020454:	2087      	movs	r0, #135	@ 0x87
 8020456:	f7f7 f8ff 	bl	8017658 <protocol_enqueue_realtime_command>
    return true;
 802045a:	2001      	movs	r0, #1
}
 802045c:	bd70      	pop	{r4, r5, r6, pc}
            mpg.stream->disable_rx(true);
 802045e:	4b05      	ldr	r3, [pc, #20]	@ (8020474 <stream_mpg_enable+0x120>)
 8020460:	681b      	ldr	r3, [r3, #0]
 8020462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020464:	2001      	movs	r0, #1
 8020466:	4798      	blx	r3
 8020468:	e7d5      	b.n	8020416 <stream_mpg_enable+0xc2>
    protocol_enqueue_realtime_command(on ? CMD_STATUS_REPORT_ALL : CMD_STATUS_REPORT);
 802046a:	2080      	movs	r0, #128	@ 0x80
 802046c:	e7f3      	b.n	8020456 <stream_mpg_enable+0x102>
        return false;
 802046e:	2000      	movs	r0, #0
}
 8020470:	4770      	bx	lr
 8020472:	bf00      	nop
 8020474:	20002354 	.word	0x20002354
 8020478:	2000148c 	.word	0x2000148c
 802047c:	20000ee4 	.word	0x20000ee4
 8020480:	20000428 	.word	0x20000428
 8020484:	200011ac 	.word	0x200011ac
 8020488:	20002350 	.word	0x20002350

0802048c <stream_select>:
{
 802048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802048e:	4604      	mov	r4, r0
 8020490:	460d      	mov	r5, r1
    if(stream == base.stream) {
 8020492:	4b8e      	ldr	r3, [pc, #568]	@ (80206cc <stream_select+0x240>)
 8020494:	681b      	ldr	r3, [r3, #0]
 8020496:	4283      	cmp	r3, r0
 8020498:	d00b      	beq.n	80204b2 <stream_select+0x26>
    if(!add) { // disconnect
 802049a:	2900      	cmp	r1, #0
 802049c:	d144      	bne.n	8020528 <stream_select+0x9c>
        if(stream == base.stream || stream == mpg.stream)
 802049e:	4b8c      	ldr	r3, [pc, #560]	@ (80206d0 <stream_select+0x244>)
 80204a0:	681b      	ldr	r3, [r3, #0]
 80204a2:	4283      	cmp	r3, r0
 80204a4:	f000 813a 	beq.w	802071c <stream_select+0x290>
        stream_connection_t *connection = connections->next;
 80204a8:	4b88      	ldr	r3, [pc, #544]	@ (80206cc <stream_select+0x240>)
 80204aa:	68db      	ldr	r3, [r3, #12]
        bool disconnected = false;
 80204ac:	4608      	mov	r0, r1
    bool send_init_message = false, mpg_enable = false;
 80204ae:	460e      	mov	r6, r1
        while(connection) {
 80204b0:	e014      	b.n	80204dc <stream_select+0x50>
        base.is_up = add ? (stream->is_connected ? stream->is_connected : stream_connected) : is_not_connected;
 80204b2:	b119      	cbz	r1, 80204bc <stream_select+0x30>
 80204b4:	6843      	ldr	r3, [r0, #4]
 80204b6:	b913      	cbnz	r3, 80204be <stream_select+0x32>
 80204b8:	4b86      	ldr	r3, [pc, #536]	@ (80206d4 <stream_select+0x248>)
 80204ba:	e000      	b.n	80204be <stream_select+0x32>
 80204bc:	4b86      	ldr	r3, [pc, #536]	@ (80206d8 <stream_select+0x24c>)
 80204be:	4a83      	ldr	r2, [pc, #524]	@ (80206cc <stream_select+0x240>)
 80204c0:	6053      	str	r3, [r2, #4]
        return true;
 80204c2:	2001      	movs	r0, #1
 80204c4:	e0de      	b.n	8020684 <stream_select+0x1f8>
                	mpg_enable = mpg.flags.mpg_control;
 80204c6:	4982      	ldr	r1, [pc, #520]	@ (80206d0 <stream_select+0x244>)
 80204c8:	7a0e      	ldrb	r6, [r1, #8]
 80204ca:	f006 0601 	and.w	r6, r6, #1
                	if((stream = connection->prev->prev->stream) == NULL)
 80204ce:	6912      	ldr	r2, [r2, #16]
 80204d0:	6814      	ldr	r4, [r2, #0]
 80204d2:	b99c      	cbnz	r4, 80204fc <stream_select+0x70>
                		stream = base.stream;
 80204d4:	4a7d      	ldr	r2, [pc, #500]	@ (80206cc <stream_select+0x240>)
 80204d6:	6814      	ldr	r4, [r2, #0]
 80204d8:	e010      	b.n	80204fc <stream_select+0x70>
        		connection = connection->next;
 80204da:	68db      	ldr	r3, [r3, #12]
        while(connection) {
 80204dc:	b1a3      	cbz	r3, 8020508 <stream_select+0x7c>
        	if(stream == connection->stream) {
 80204de:	681a      	ldr	r2, [r3, #0]
 80204e0:	42a2      	cmp	r2, r4
 80204e2:	d1fa      	bne.n	80204da <stream_select+0x4e>
        		if((connection->prev->next = connection->next))
 80204e4:	6919      	ldr	r1, [r3, #16]
 80204e6:	68da      	ldr	r2, [r3, #12]
 80204e8:	60ca      	str	r2, [r1, #12]
 80204ea:	b10a      	cbz	r2, 80204f0 <stream_select+0x64>
        			connection->next->prev = connection->prev;
 80204ec:	6919      	ldr	r1, [r3, #16]
 80204ee:	6111      	str	r1, [r2, #16]
                if((stream = connection->prev->stream) == mpg.stream) {
 80204f0:	691a      	ldr	r2, [r3, #16]
 80204f2:	6814      	ldr	r4, [r2, #0]
 80204f4:	4976      	ldr	r1, [pc, #472]	@ (80206d0 <stream_select+0x244>)
 80204f6:	6809      	ldr	r1, [r1, #0]
 80204f8:	42a1      	cmp	r1, r4
 80204fa:	d0e4      	beq.n	80204c6 <stream_select+0x3a>
                free(connection);
 80204fc:	4618      	mov	r0, r3
 80204fe:	f001 fefd 	bl	80222fc <free>
        		connection = NULL;
 8020502:	2300      	movs	r3, #0
        		disconnected = true;
 8020504:	2001      	movs	r0, #1
 8020506:	e7e9      	b.n	80204dc <stream_select+0x50>
        if(!disconnected)
 8020508:	2800      	cmp	r0, #0
 802050a:	f000 80bb 	beq.w	8020684 <stream_select+0x1f8>
    bool webui_connected = hal.stream.state.webui_connected;
 802050e:	4b73      	ldr	r3, [pc, #460]	@ (80206dc <stream_select+0x250>)
 8020510:	f893 70aa 	ldrb.w	r7, [r3, #170]	@ 0xaa
 8020514:	f3c7 0740 	ubfx	r7, r7, #1, #1
    switch(stream->type) {
 8020518:	7823      	ldrb	r3, [r4, #0]
 802051a:	2b04      	cmp	r3, #4
 802051c:	d875      	bhi.n	802060a <stream_select+0x17e>
 802051e:	e8df f003 	tbb	[pc, r3]
 8020522:	740a      	.short	0x740a
 8020524:	3060      	.short	0x3060
 8020526:	44          	.byte	0x44
 8020527:	00          	.byte	0x00
	} else if(add_connection(stream) == NULL)
 8020528:	f7ff fe20 	bl	802016c <add_connection>
 802052c:	2800      	cmp	r0, #0
 802052e:	f000 80f7 	beq.w	8020720 <stream_select+0x294>
    bool send_init_message = false, mpg_enable = false;
 8020532:	2600      	movs	r6, #0
 8020534:	e7eb      	b.n	802050e <stream_select+0x82>
            if(active_stream && active_stream->type != StreamType_Serial && connection_is_up((io_stream_t *)stream)) {
 8020536:	4b6a      	ldr	r3, [pc, #424]	@ (80206e0 <stream_select+0x254>)
 8020538:	681b      	ldr	r3, [r3, #0]
 802053a:	2b00      	cmp	r3, #0
 802053c:	f000 80a3 	beq.w	8020686 <stream_select+0x1fa>
 8020540:	781b      	ldrb	r3, [r3, #0]
 8020542:	b90b      	cbnz	r3, 8020548 <stream_select+0xbc>
    bool send_init_message = false, mpg_enable = false;
 8020544:	2500      	movs	r5, #0
 8020546:	e061      	b.n	802060c <stream_select+0x180>
            if(active_stream && active_stream->type != StreamType_Serial && connection_is_up((io_stream_t *)stream)) {
 8020548:	4620      	mov	r0, r4
 802054a:	f7ff fd65 	bl	8020018 <connection_is_up>
 802054e:	4605      	mov	r5, r0
 8020550:	2800      	cmp	r0, #0
 8020552:	d05b      	beq.n	802060c <stream_select+0x180>
                hal.stream.write = stream->write;
 8020554:	68e2      	ldr	r2, [r4, #12]
 8020556:	4b61      	ldr	r3, [pc, #388]	@ (80206dc <stream_select+0x250>)
 8020558:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
                report_message("SERIAL STREAM ACTIVE", Message_Plain);
 802055c:	2100      	movs	r1, #0
 802055e:	4861      	ldr	r0, [pc, #388]	@ (80206e4 <stream_select+0x258>)
 8020560:	f7f8 fcc8 	bl	8018ef4 <report_message>
                if(stream->get_tx_buffer_count)
 8020564:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8020566:	b12b      	cbz	r3, 8020574 <stream_select+0xe8>
                    while(stream->get_tx_buffer_count());
 8020568:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802056a:	4798      	blx	r3
 802056c:	2800      	cmp	r0, #0
 802056e:	d1fb      	bne.n	8020568 <stream_select+0xdc>
    bool send_init_message = false, mpg_enable = false;
 8020570:	2500      	movs	r5, #0
 8020572:	e04b      	b.n	802060c <stream_select+0x180>
                    hal.delay_ms(100, NULL);
 8020574:	4b59      	ldr	r3, [pc, #356]	@ (80206dc <stream_select+0x250>)
 8020576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020578:	2100      	movs	r1, #0
 802057a:	2064      	movs	r0, #100	@ 0x64
 802057c:	4798      	blx	r3
    bool send_init_message = false, mpg_enable = false;
 802057e:	2500      	movs	r5, #0
 8020580:	e044      	b.n	802060c <stream_select+0x180>
            if(connection_is_up(&hal.stream))
 8020582:	4859      	ldr	r0, [pc, #356]	@ (80206e8 <stream_select+0x25c>)
 8020584:	f7ff fd48 	bl	8020018 <connection_is_up>
 8020588:	b930      	cbnz	r0, 8020598 <stream_select+0x10c>
            send_init_message = add && sys.driver_started;
 802058a:	b155      	cbz	r5, 80205a2 <stream_select+0x116>
 802058c:	4b57      	ldr	r3, [pc, #348]	@ (80206ec <stream_select+0x260>)
 802058e:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8020592:	b943      	cbnz	r3, 80205a6 <stream_select+0x11a>
 8020594:	2500      	movs	r5, #0
 8020596:	e039      	b.n	802060c <stream_select+0x180>
                report_message("TELNET STREAM ACTIVE", Message_Plain);
 8020598:	2100      	movs	r1, #0
 802059a:	4855      	ldr	r0, [pc, #340]	@ (80206f0 <stream_select+0x264>)
 802059c:	f7f8 fcaa 	bl	8018ef4 <report_message>
 80205a0:	e7f3      	b.n	802058a <stream_select+0xfe>
            send_init_message = add && sys.driver_started;
 80205a2:	2500      	movs	r5, #0
 80205a4:	e032      	b.n	802060c <stream_select+0x180>
 80205a6:	2501      	movs	r5, #1
            break;
 80205a8:	e030      	b.n	802060c <stream_select+0x180>
            if(connection_is_up(&hal.stream))
 80205aa:	484f      	ldr	r0, [pc, #316]	@ (80206e8 <stream_select+0x25c>)
 80205ac:	f7ff fd34 	bl	8020018 <connection_is_up>
 80205b0:	b960      	cbnz	r0, 80205cc <stream_select+0x140>
            send_init_message = add && sys.driver_started && !hal.stream.state.webui_connected;
 80205b2:	b185      	cbz	r5, 80205d6 <stream_select+0x14a>
 80205b4:	4b4d      	ldr	r3, [pc, #308]	@ (80206ec <stream_select+0x260>)
 80205b6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80205ba:	b173      	cbz	r3, 80205da <stream_select+0x14e>
 80205bc:	4b47      	ldr	r3, [pc, #284]	@ (80206dc <stream_select+0x250>)
 80205be:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 80205c2:	f013 0f02 	tst.w	r3, #2
 80205c6:	d00a      	beq.n	80205de <stream_select+0x152>
 80205c8:	2500      	movs	r5, #0
 80205ca:	e01f      	b.n	802060c <stream_select+0x180>
                report_message("WEBSOCKET STREAM ACTIVE", Message_Plain);
 80205cc:	2100      	movs	r1, #0
 80205ce:	4849      	ldr	r0, [pc, #292]	@ (80206f4 <stream_select+0x268>)
 80205d0:	f7f8 fc90 	bl	8018ef4 <report_message>
 80205d4:	e7ed      	b.n	80205b2 <stream_select+0x126>
            send_init_message = add && sys.driver_started && !hal.stream.state.webui_connected;
 80205d6:	2500      	movs	r5, #0
 80205d8:	e018      	b.n	802060c <stream_select+0x180>
 80205da:	2500      	movs	r5, #0
 80205dc:	e016      	b.n	802060c <stream_select+0x180>
 80205de:	2501      	movs	r5, #1
            break;
 80205e0:	e014      	b.n	802060c <stream_select+0x180>
            if(connection_is_up(&hal.stream))
 80205e2:	4841      	ldr	r0, [pc, #260]	@ (80206e8 <stream_select+0x25c>)
 80205e4:	f7ff fd18 	bl	8020018 <connection_is_up>
 80205e8:	b930      	cbnz	r0, 80205f8 <stream_select+0x16c>
            send_init_message = add && sys.driver_started;
 80205ea:	b155      	cbz	r5, 8020602 <stream_select+0x176>
 80205ec:	4b3f      	ldr	r3, [pc, #252]	@ (80206ec <stream_select+0x260>)
 80205ee:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80205f2:	b943      	cbnz	r3, 8020606 <stream_select+0x17a>
 80205f4:	2500      	movs	r5, #0
 80205f6:	e009      	b.n	802060c <stream_select+0x180>
                report_message("BLUETOOTH STREAM ACTIVE", Message_Plain);
 80205f8:	2100      	movs	r1, #0
 80205fa:	483f      	ldr	r0, [pc, #252]	@ (80206f8 <stream_select+0x26c>)
 80205fc:	f7f8 fc7a 	bl	8018ef4 <report_message>
 8020600:	e7f3      	b.n	80205ea <stream_select+0x15e>
            send_init_message = add && sys.driver_started;
 8020602:	2500      	movs	r5, #0
 8020604:	e002      	b.n	802060c <stream_select+0x180>
 8020606:	2501      	movs	r5, #1
            break;
 8020608:	e000      	b.n	802060c <stream_select+0x180>
    switch(stream->type) {
 802060a:	2500      	movs	r5, #0
    if(hal.stream.type == StreamType_MPG) {
 802060c:	4b33      	ldr	r3, [pc, #204]	@ (80206dc <stream_select+0x250>)
 802060e:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8020612:	2b01      	cmp	r3, #1
 8020614:	d039      	beq.n	802068a <stream_select+0x1fe>
    } else if(mpg_enable)
 8020616:	2e00      	cmp	r6, #0
 8020618:	d140      	bne.n	802069c <stream_select+0x210>
    memcpy(&hal.stream, stream, sizeof(io_stream_t));
 802061a:	224c      	movs	r2, #76	@ 0x4c
 802061c:	4621      	mov	r1, r4
 802061e:	4832      	ldr	r0, [pc, #200]	@ (80206e8 <stream_select+0x25c>)
 8020620:	f004 f88d 	bl	802473e <memcpy>
    if(stream == base.stream && base.is_up == is_not_connected)
 8020624:	4b29      	ldr	r3, [pc, #164]	@ (80206cc <stream_select+0x240>)
 8020626:	681b      	ldr	r3, [r3, #0]
 8020628:	42a3      	cmp	r3, r4
 802062a:	d03c      	beq.n	80206a6 <stream_select+0x21a>
    if(hal.stream.is_connected == NULL)
 802062c:	4a2b      	ldr	r2, [pc, #172]	@ (80206dc <stream_select+0x250>)
 802062e:	f8d2 20ac 	ldr.w	r2, [r2, #172]	@ 0xac
 8020632:	2a00      	cmp	r2, #0
 8020634:	d040      	beq.n	80206b8 <stream_select+0x22c>
    if(stream->type == StreamType_WebSocket && !stream->state.webui_connected)
 8020636:	6823      	ldr	r3, [r4, #0]
 8020638:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802063c:	f423 037d 	bic.w	r3, r3, #16580608	@ 0xfd0000
 8020640:	2b04      	cmp	r3, #4
 8020642:	d063      	beq.n	802070c <stream_select+0x280>
    if(send_init_message) {
 8020644:	b135      	cbz	r5, 8020654 <stream_select+0x1c8>
        hal.stream.write_all = stream->write;
 8020646:	68e2      	ldr	r2, [r4, #12]
 8020648:	4b24      	ldr	r3, [pc, #144]	@ (80206dc <stream_select+0x250>)
 802064a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        grbl.report.init_message();
 802064e:	4b2b      	ldr	r3, [pc, #172]	@ (80206fc <stream_select+0x270>)
 8020650:	681b      	ldr	r3, [r3, #0]
 8020652:	4798      	blx	r3
    hal.stream.write_all = stream_write_all;
 8020654:	4d21      	ldr	r5, [pc, #132]	@ (80206dc <stream_select+0x250>)
 8020656:	4b2a      	ldr	r3, [pc, #168]	@ (8020700 <stream_select+0x274>)
 8020658:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
    hal.stream.set_enqueue_rt_handler(protocol_enqueue_realtime_command);
 802065c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 8020660:	4828      	ldr	r0, [pc, #160]	@ (8020704 <stream_select+0x278>)
 8020662:	4798      	blx	r3
    if(hal.stream.disable_rx)
 8020664:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
 8020668:	b10b      	cbz	r3, 802066e <stream_select+0x1e2>
        hal.stream.disable_rx(false);
 802066a:	2000      	movs	r0, #0
 802066c:	4798      	blx	r3
    if(grbl.on_stream_changed)
 802066e:	4b23      	ldr	r3, [pc, #140]	@ (80206fc <stream_select+0x270>)
 8020670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020674:	b11b      	cbz	r3, 802067e <stream_select+0x1f2>
        grbl.on_stream_changed(hal.stream.type);
 8020676:	4a19      	ldr	r2, [pc, #100]	@ (80206dc <stream_select+0x250>)
 8020678:	f892 00a8 	ldrb.w	r0, [r2, #168]	@ 0xa8
 802067c:	4798      	blx	r3
    active_stream = stream;
 802067e:	4b18      	ldr	r3, [pc, #96]	@ (80206e0 <stream_select+0x254>)
 8020680:	601c      	str	r4, [r3, #0]
    return true;
 8020682:	2001      	movs	r0, #1
}
 8020684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool send_init_message = false, mpg_enable = false;
 8020686:	2500      	movs	r5, #0
 8020688:	e7c0      	b.n	802060c <stream_select+0x180>
        stream_mpg_enable(false);
 802068a:	2000      	movs	r0, #0
 802068c:	f7ff fe62 	bl	8020354 <stream_mpg_enable>
        mpg.flags.mpg_control = On;
 8020690:	4a0f      	ldr	r2, [pc, #60]	@ (80206d0 <stream_select+0x244>)
 8020692:	7a13      	ldrb	r3, [r2, #8]
 8020694:	f043 0301 	orr.w	r3, r3, #1
 8020698:	7213      	strb	r3, [r2, #8]
 802069a:	e7be      	b.n	802061a <stream_select+0x18e>
		protocol_enqueue_foreground_task(stream_mpg_set_mode, (void *)1);
 802069c:	2101      	movs	r1, #1
 802069e:	481a      	ldr	r0, [pc, #104]	@ (8020708 <stream_select+0x27c>)
 80206a0:	f7f6 ffb4 	bl	801760c <protocol_enqueue_foreground_task>
 80206a4:	e7b9      	b.n	802061a <stream_select+0x18e>
    if(stream == base.stream && base.is_up == is_not_connected)
 80206a6:	4a09      	ldr	r2, [pc, #36]	@ (80206cc <stream_select+0x240>)
 80206a8:	6851      	ldr	r1, [r2, #4]
 80206aa:	4a0b      	ldr	r2, [pc, #44]	@ (80206d8 <stream_select+0x24c>)
 80206ac:	4291      	cmp	r1, r2
 80206ae:	d1bd      	bne.n	802062c <stream_select+0x1a0>
        base.is_up = stream_connected;
 80206b0:	4a06      	ldr	r2, [pc, #24]	@ (80206cc <stream_select+0x240>)
 80206b2:	4908      	ldr	r1, [pc, #32]	@ (80206d4 <stream_select+0x248>)
 80206b4:	6051      	str	r1, [r2, #4]
 80206b6:	e7b9      	b.n	802062c <stream_select+0x1a0>
        hal.stream.is_connected = stream == base.stream ? base.is_up : stream_connected;
 80206b8:	42a3      	cmp	r3, r4
 80206ba:	d004      	beq.n	80206c6 <stream_select+0x23a>
 80206bc:	4a05      	ldr	r2, [pc, #20]	@ (80206d4 <stream_select+0x248>)
 80206be:	4b07      	ldr	r3, [pc, #28]	@ (80206dc <stream_select+0x250>)
 80206c0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 80206c4:	e7b7      	b.n	8020636 <stream_select+0x1aa>
 80206c6:	4b01      	ldr	r3, [pc, #4]	@ (80206cc <stream_select+0x240>)
 80206c8:	685a      	ldr	r2, [r3, #4]
 80206ca:	e7f8      	b.n	80206be <stream_select+0x232>
 80206cc:	20002368 	.word	0x20002368
 80206d0:	20002354 	.word	0x20002354
 80206d4:	0802000f 	.word	0x0802000f
 80206d8:	08020013 	.word	0x08020013
 80206dc:	200011ac 	.word	0x200011ac
 80206e0:	20002340 	.word	0x20002340
 80206e4:	0802fed8 	.word	0x0802fed8
 80206e8:	20001254 	.word	0x20001254
 80206ec:	2000148c 	.word	0x2000148c
 80206f0:	0802fef0 	.word	0x0802fef0
 80206f4:	0802ff08 	.word	0x0802ff08
 80206f8:	0802ff20 	.word	0x0802ff20
 80206fc:	20001394 	.word	0x20001394
 8020700:	08020061 	.word	0x08020061
 8020704:	08017659 	.word	0x08017659
 8020708:	0802077d 	.word	0x0802077d
        hal.stream.state.webui_connected = webui_connected;
 802070c:	4b05      	ldr	r3, [pc, #20]	@ (8020724 <stream_select+0x298>)
 802070e:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8020712:	f367 0241 	bfi	r2, r7, #1, #1
 8020716:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
 802071a:	e793      	b.n	8020644 <stream_select+0x1b8>
        	return false;
 802071c:	4608      	mov	r0, r1
 802071e:	e7b1      	b.n	8020684 <stream_select+0x1f8>
        return false;
 8020720:	2000      	movs	r0, #0
 8020722:	e7af      	b.n	8020684 <stream_select+0x1f8>
 8020724:	200011ac 	.word	0x200011ac

08020728 <stream_connect>:
{
 8020728:	b538      	push	{r3, r4, r5, lr}
 802072a:	4604      	mov	r4, r0
    if((ok = stream_select(stream, true)))
 802072c:	2101      	movs	r1, #1
 802072e:	f7ff fead 	bl	802048c <stream_select>
 8020732:	4605      	mov	r5, r0
 8020734:	b908      	cbnz	r0, 802073a <stream_connect+0x12>
}
 8020736:	4628      	mov	r0, r5
 8020738:	bd38      	pop	{r3, r4, r5, pc}
        stream_set_description(stream, "Primary UART");
 802073a:	4902      	ldr	r1, [pc, #8]	@ (8020744 <stream_connect+0x1c>)
 802073c:	4620      	mov	r0, r4
 802073e:	f7ff fde7 	bl	8020310 <stream_set_description>
 8020742:	e7f8      	b.n	8020736 <stream_connect+0xe>
 8020744:	0802ff38 	.word	0x0802ff38

08020748 <stream_connect_instance>:
{
 8020748:	b508      	push	{r3, lr}
    connection.instance = instance;
 802074a:	4b0a      	ldr	r3, [pc, #40]	@ (8020774 <stream_connect_instance+0x2c>)
 802074c:	7018      	strb	r0, [r3, #0]
    connection.baud_rate = baud_rate;
 802074e:	6059      	str	r1, [r3, #4]
    connection.stream = NULL;
 8020750:	2200      	movs	r2, #0
 8020752:	609a      	str	r2, [r3, #8]
    return stream_enumerate_streams(_open_instance) && stream_connect(connection.stream);
 8020754:	4808      	ldr	r0, [pc, #32]	@ (8020778 <stream_connect_instance+0x30>)
 8020756:	f7ff fd47 	bl	80201e8 <stream_enumerate_streams>
 802075a:	b908      	cbnz	r0, 8020760 <stream_connect_instance+0x18>
 802075c:	2000      	movs	r0, #0
}
 802075e:	bd08      	pop	{r3, pc}
    return stream_enumerate_streams(_open_instance) && stream_connect(connection.stream);
 8020760:	4b04      	ldr	r3, [pc, #16]	@ (8020774 <stream_connect_instance+0x2c>)
 8020762:	6898      	ldr	r0, [r3, #8]
 8020764:	f7ff ffe0 	bl	8020728 <stream_connect>
 8020768:	b108      	cbz	r0, 802076e <stream_connect_instance+0x26>
 802076a:	2001      	movs	r0, #1
 802076c:	e7f7      	b.n	802075e <stream_connect_instance+0x16>
 802076e:	2000      	movs	r0, #0
 8020770:	e7f5      	b.n	802075e <stream_connect_instance+0x16>
 8020772:	bf00      	nop
 8020774:	20002344 	.word	0x20002344
 8020778:	08020085 	.word	0x08020085

0802077c <stream_mpg_set_mode>:
{
 802077c:	b508      	push	{r3, lr}
    stream_mpg_enable(data != NULL);
 802077e:	3800      	subs	r0, #0
 8020780:	bf18      	it	ne
 8020782:	2001      	movne	r0, #1
 8020784:	f7ff fde6 	bl	8020354 <stream_mpg_enable>
}
 8020788:	bd08      	pop	{r3, pc}
	...

0802078c <toggle_single_block>:

    return Status_OK;
}

static status_code_t toggle_single_block (sys_state_t state, char *args)
{
 802078c:	b508      	push	{r3, lr}
    if(!hal.signals_cap.single_block) {
 802078e:	4b10      	ldr	r3, [pc, #64]	@ (80207d0 <toggle_single_block+0x44>)
 8020790:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
 8020794:	f013 0f08 	tst.w	r3, #8
 8020798:	d10f      	bne.n	80207ba <toggle_single_block+0x2e>
        sys.flags.single_block = !sys.flags.single_block;
 802079a:	4a0e      	ldr	r2, [pc, #56]	@ (80207d4 <toggle_single_block+0x48>)
 802079c:	7d93      	ldrb	r3, [r2, #22]
 802079e:	43d9      	mvns	r1, r3
 80207a0:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 80207a4:	f361 13c7 	bfi	r3, r1, #7, #1
 80207a8:	7593      	strb	r3, [r2, #22]
        grbl.report.feedback_message(sys.flags.single_block ? Message_Enabled : Message_Disabled);
 80207aa:	4b0b      	ldr	r3, [pc, #44]	@ (80207d8 <toggle_single_block+0x4c>)
 80207ac:	68db      	ldr	r3, [r3, #12]
 80207ae:	f992 2016 	ldrsb.w	r2, [r2, #22]
 80207b2:	2a00      	cmp	r2, #0
 80207b4:	db08      	blt.n	80207c8 <toggle_single_block+0x3c>
 80207b6:	2005      	movs	r0, #5
 80207b8:	4798      	blx	r3
    }

    return hal.signals_cap.single_block ? Status_InvalidStatement : Status_OK;
 80207ba:	4b05      	ldr	r3, [pc, #20]	@ (80207d0 <toggle_single_block+0x44>)
 80207bc:	f893 01dd 	ldrb.w	r0, [r3, #477]	@ 0x1dd
 80207c0:	f010 0008 	ands.w	r0, r0, #8
 80207c4:	d102      	bne.n	80207cc <toggle_single_block+0x40>
}
 80207c6:	bd08      	pop	{r3, pc}
        grbl.report.feedback_message(sys.flags.single_block ? Message_Enabled : Message_Disabled);
 80207c8:	2004      	movs	r0, #4
 80207ca:	e7f5      	b.n	80207b8 <toggle_single_block+0x2c>
    return hal.signals_cap.single_block ? Status_InvalidStatement : Status_OK;
 80207cc:	2003      	movs	r0, #3
 80207ce:	e7fa      	b.n	80207c6 <toggle_single_block+0x3a>
 80207d0:	200011ac 	.word	0x200011ac
 80207d4:	2000148c 	.word	0x2000148c
 80207d8:	20001394 	.word	0x20001394

080207dc <toggle_block_delete>:

static status_code_t toggle_block_delete (sys_state_t state, char *args)
{
 80207dc:	b508      	push	{r3, lr}
    if(!hal.signals_cap.block_delete) {
 80207de:	4b10      	ldr	r3, [pc, #64]	@ (8020820 <toggle_block_delete+0x44>)
 80207e0:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 80207e4:	f013 0f10 	tst.w	r3, #16
 80207e8:	d10f      	bne.n	802080a <toggle_block_delete+0x2e>
        sys.flags.block_delete_enabled = !sys.flags.block_delete_enabled;
 80207ea:	4a0e      	ldr	r2, [pc, #56]	@ (8020824 <toggle_block_delete+0x48>)
 80207ec:	7d93      	ldrb	r3, [r2, #22]
 80207ee:	0919      	lsrs	r1, r3, #4
 80207f0:	f081 0101 	eor.w	r1, r1, #1
 80207f4:	f361 1304 	bfi	r3, r1, #4, #1
 80207f8:	7593      	strb	r3, [r2, #22]
        grbl.report.feedback_message(sys.flags.block_delete_enabled ? Message_Enabled : Message_Disabled);
 80207fa:	4b0b      	ldr	r3, [pc, #44]	@ (8020828 <toggle_block_delete+0x4c>)
 80207fc:	68db      	ldr	r3, [r3, #12]
 80207fe:	7d92      	ldrb	r2, [r2, #22]
 8020800:	f012 0f10 	tst.w	r2, #16
 8020804:	d008      	beq.n	8020818 <toggle_block_delete+0x3c>
 8020806:	2004      	movs	r0, #4
 8020808:	4798      	blx	r3
    }

    return hal.signals_cap.block_delete ? Status_InvalidStatement : Status_OK;
 802080a:	4b05      	ldr	r3, [pc, #20]	@ (8020820 <toggle_block_delete+0x44>)
 802080c:	f893 01dc 	ldrb.w	r0, [r3, #476]	@ 0x1dc
 8020810:	f010 0010 	ands.w	r0, r0, #16
 8020814:	d102      	bne.n	802081c <toggle_block_delete+0x40>
}
 8020816:	bd08      	pop	{r3, pc}
        grbl.report.feedback_message(sys.flags.block_delete_enabled ? Message_Enabled : Message_Disabled);
 8020818:	2005      	movs	r0, #5
 802081a:	e7f5      	b.n	8020808 <toggle_block_delete+0x2c>
    return hal.signals_cap.block_delete ? Status_InvalidStatement : Status_OK;
 802081c:	2003      	movs	r0, #3
 802081e:	e7fa      	b.n	8020816 <toggle_block_delete+0x3a>
 8020820:	200011ac 	.word	0x200011ac
 8020824:	2000148c 	.word	0x2000148c
 8020828:	20001394 	.word	0x20001394

0802082c <toggle_optional_stop>:

static status_code_t toggle_optional_stop (sys_state_t state, char *args)
{
 802082c:	b508      	push	{r3, lr}
    if(!hal.signals_cap.stop_disable) {
 802082e:	4b10      	ldr	r3, [pc, #64]	@ (8020870 <toggle_optional_stop+0x44>)
 8020830:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8020834:	f013 0f20 	tst.w	r3, #32
 8020838:	d10f      	bne.n	802085a <toggle_optional_stop+0x2e>
        sys.flags.optional_stop_disable = !sys.flags.optional_stop_disable;
 802083a:	4a0e      	ldr	r2, [pc, #56]	@ (8020874 <toggle_optional_stop+0x48>)
 802083c:	7d93      	ldrb	r3, [r2, #22]
 802083e:	0999      	lsrs	r1, r3, #6
 8020840:	f081 0101 	eor.w	r1, r1, #1
 8020844:	f361 1386 	bfi	r3, r1, #6, #1
 8020848:	7593      	strb	r3, [r2, #22]
        grbl.report.feedback_message(sys.flags.block_delete_enabled ? Message_Enabled : Message_Disabled);
 802084a:	4b0b      	ldr	r3, [pc, #44]	@ (8020878 <toggle_optional_stop+0x4c>)
 802084c:	68db      	ldr	r3, [r3, #12]
 802084e:	7d92      	ldrb	r2, [r2, #22]
 8020850:	f012 0f10 	tst.w	r2, #16
 8020854:	d008      	beq.n	8020868 <toggle_optional_stop+0x3c>
 8020856:	2004      	movs	r0, #4
 8020858:	4798      	blx	r3
    }

    return hal.signals_cap.stop_disable ? Status_InvalidStatement : Status_OK;
 802085a:	4b05      	ldr	r3, [pc, #20]	@ (8020870 <toggle_optional_stop+0x44>)
 802085c:	f893 01dc 	ldrb.w	r0, [r3, #476]	@ 0x1dc
 8020860:	f010 0020 	ands.w	r0, r0, #32
 8020864:	d102      	bne.n	802086c <toggle_optional_stop+0x40>
}
 8020866:	bd08      	pop	{r3, pc}
        grbl.report.feedback_message(sys.flags.block_delete_enabled ? Message_Enabled : Message_Disabled);
 8020868:	2005      	movs	r0, #5
 802086a:	e7f5      	b.n	8020858 <toggle_optional_stop+0x2c>
    return hal.signals_cap.stop_disable ? Status_InvalidStatement : Status_OK;
 802086c:	2003      	movs	r0, #3
 802086e:	e7fa      	b.n	8020866 <toggle_optional_stop+0x3a>
 8020870:	200011ac 	.word	0x200011ac
 8020874:	2000148c 	.word	0x2000148c
 8020878:	20001394 	.word	0x20001394

0802087c <enter_sleep>:
    return go_home(state, (axes_signals_t){V_AXIS_BIT});
}
#endif

static status_code_t enter_sleep (sys_state_t state, char *args)
{
 802087c:	b508      	push	{r3, lr}
    if(!settings.flags.sleep_enable)
 802087e:	4b0a      	ldr	r3, [pc, #40]	@ (80208a8 <enter_sleep+0x2c>)
 8020880:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8020884:	f013 0f08 	tst.w	r3, #8
 8020888:	d009      	beq.n	802089e <enter_sleep+0x22>
        return Status_InvalidStatement;
    else if(!(state == STATE_IDLE || state == STATE_ALARM))
 802088a:	2801      	cmp	r0, #1
 802088c:	d809      	bhi.n	80208a2 <enter_sleep+0x26>
        return Status_IdleError;
    else
        system_set_exec_state_flag(EXEC_SLEEP); // Set to execute enter_sleep mode immediately
 802088e:	4b07      	ldr	r3, [pc, #28]	@ (80208ac <enter_sleep+0x30>)
 8020890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020892:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8020896:	4806      	ldr	r0, [pc, #24]	@ (80208b0 <enter_sleep+0x34>)
 8020898:	4798      	blx	r3

    return Status_OK;
 802089a:	2000      	movs	r0, #0
}
 802089c:	bd08      	pop	{r3, pc}
        return Status_InvalidStatement;
 802089e:	2003      	movs	r0, #3
 80208a0:	e7fc      	b.n	802089c <enter_sleep+0x20>
        return Status_IdleError;
 80208a2:	2008      	movs	r0, #8
 80208a4:	e7fa      	b.n	802089c <enter_sleep+0x20>
 80208a6:	bf00      	nop
 80208a8:	20001bc4 	.word	0x20001bc4
 80208ac:	200011ac 	.word	0x200011ac
 80208b0:	200014d4 	.word	0x200014d4

080208b4 <help_rtc>:
    return NULL;
}

const char *help_rtc (const char *cmd)
{
    if(hal.rtc.get_datetime) {
 80208b4:	4b08      	ldr	r3, [pc, #32]	@ (80208d8 <help_rtc+0x24>)
 80208b6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80208ba:	b15b      	cbz	r3, 80208d4 <help_rtc+0x20>
{
 80208bc:	b510      	push	{r4, lr}
        hal.stream.write("$RTC - output current time." ASCII_EOL);
 80208be:	4c06      	ldr	r4, [pc, #24]	@ (80208d8 <help_rtc+0x24>)
 80208c0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80208c4:	4805      	ldr	r0, [pc, #20]	@ (80208dc <help_rtc+0x28>)
 80208c6:	4798      	blx	r3
        hal.stream.write("$RTC=<ISO8601 datetime> - set current time." ASCII_EOL);
 80208c8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80208cc:	4804      	ldr	r0, [pc, #16]	@ (80208e0 <help_rtc+0x2c>)
 80208ce:	4798      	blx	r3
    }

    return NULL;
}
 80208d0:	2000      	movs	r0, #0
 80208d2:	bd10      	pop	{r4, pc}
 80208d4:	2000      	movs	r0, #0
 80208d6:	4770      	bx	lr
 80208d8:	200011ac 	.word	0x200011ac
 80208dc:	0802ff9c 	.word	0x0802ff9c
 80208e0:	0802ffbc 	.word	0x0802ffbc

080208e4 <help_pins>:
    return NULL;
}

const char *help_pins (const char *cmd)
{
    return hal.enumerate_pins ? "enumerate pin bindings" : NULL;
 80208e4:	4b03      	ldr	r3, [pc, #12]	@ (80208f4 <help_pins+0x10>)
 80208e6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80208ea:	b10b      	cbz	r3, 80208f0 <help_pins+0xc>
 80208ec:	4802      	ldr	r0, [pc, #8]	@ (80208f8 <help_pins+0x14>)
 80208ee:	4770      	bx	lr
 80208f0:	2000      	movs	r0, #0
}
 80208f2:	4770      	bx	lr
 80208f4:	200011ac 	.word	0x200011ac
 80208f8:	0802ffec 	.word	0x0802ffec

080208fc <help_pin_state>:

#ifndef NO_SETTINGS_DESCRIPTIONS

const char *help_pin_state (const char *cmd)
{
    return hal.port.get_pin_info ? "output auxillary pin states" : NULL;
 80208fc:	4b03      	ldr	r3, [pc, #12]	@ (802090c <help_pin_state+0x10>)
 80208fe:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8020902:	b10b      	cbz	r3, 8020908 <help_pin_state+0xc>
 8020904:	4802      	ldr	r0, [pc, #8]	@ (8020910 <help_pin_state+0x14>)
 8020906:	4770      	bx	lr
 8020908:	2000      	movs	r0, #0
}
 802090a:	4770      	bx	lr
 802090c:	200011ac 	.word	0x200011ac
 8020910:	08030004 	.word	0x08030004

08020914 <help_switches>:

const char *help_switches (const char *cmd)
{
    const char *help = NULL;

    switch(*cmd) {
 8020914:	7803      	ldrb	r3, [r0, #0]
 8020916:	2b4f      	cmp	r3, #79	@ 0x4f
 8020918:	d00f      	beq.n	802093a <help_switches+0x26>
 802091a:	2b53      	cmp	r3, #83	@ 0x53
 802091c:	d017      	beq.n	802094e <help_switches+0x3a>
 802091e:	2b42      	cmp	r3, #66	@ 0x42
 8020920:	d001      	beq.n	8020926 <help_switches+0x12>
 8020922:	2000      	movs	r0, #0
 8020924:	4770      	bx	lr

        case 'B':
            if(!hal.signals_cap.block_delete)
 8020926:	4b0f      	ldr	r3, [pc, #60]	@ (8020964 <help_switches+0x50>)
 8020928:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 802092c:	f013 0f10 	tst.w	r3, #16
 8020930:	d101      	bne.n	8020936 <help_switches+0x22>
                help = "toggle block delete switch";
 8020932:	480d      	ldr	r0, [pc, #52]	@ (8020968 <help_switches+0x54>)
 8020934:	4770      	bx	lr
    const char *help = NULL;
 8020936:	2000      	movs	r0, #0
 8020938:	4770      	bx	lr
            break;

        case 'O':
            if(!hal.signals_cap.stop_disable)
 802093a:	4b0a      	ldr	r3, [pc, #40]	@ (8020964 <help_switches+0x50>)
 802093c:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8020940:	f013 0f20 	tst.w	r3, #32
 8020944:	d101      	bne.n	802094a <help_switches+0x36>
                help = "toggle optional stop switch (M1)";
 8020946:	4809      	ldr	r0, [pc, #36]	@ (802096c <help_switches+0x58>)
 8020948:	4770      	bx	lr
    const char *help = NULL;
 802094a:	2000      	movs	r0, #0
 802094c:	4770      	bx	lr
            break;

        case 'S':
            if(!hal.signals_cap.single_block)
 802094e:	4b05      	ldr	r3, [pc, #20]	@ (8020964 <help_switches+0x50>)
 8020950:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
 8020954:	f013 0f08 	tst.w	r3, #8
 8020958:	d101      	bne.n	802095e <help_switches+0x4a>
                help = "toggle single stepping switch";
 802095a:	4805      	ldr	r0, [pc, #20]	@ (8020970 <help_switches+0x5c>)
            break;
    }

    return help;
}
 802095c:	4770      	bx	lr
    const char *help = NULL;
 802095e:	2000      	movs	r0, #0
 8020960:	4770      	bx	lr
 8020962:	bf00      	nop
 8020964:	200011ac 	.word	0x200011ac
 8020968:	08030020 	.word	0x08030020
 802096c:	0803003c 	.word	0x0803003c
 8020970:	08030060 	.word	0x08030060

08020974 <help_homing>:

const char *help_homing (const char *cmd)
{
 8020974:	b508      	push	{r3, lr}
    if(settings.homing.flags.enabled)
 8020976:	4b0c      	ldr	r3, [pc, #48]	@ (80209a8 <help_homing+0x34>)
 8020978:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 802097c:	f013 0f01 	tst.w	r3, #1
 8020980:	d004      	beq.n	802098c <help_homing+0x18>
        hal.stream.write("$H - home configured axes." ASCII_EOL);
 8020982:	4b0a      	ldr	r3, [pc, #40]	@ (80209ac <help_homing+0x38>)
 8020984:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020988:	4809      	ldr	r0, [pc, #36]	@ (80209b0 <help_homing+0x3c>)
 802098a:	4798      	blx	r3

    if(settings.homing.flags.single_axis_commands)
 802098c:	4b06      	ldr	r3, [pc, #24]	@ (80209a8 <help_homing+0x34>)
 802098e:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8020992:	f013 0f02 	tst.w	r3, #2
 8020996:	d004      	beq.n	80209a2 <help_homing+0x2e>
        hal.stream.write("$H<axisletter> - home single axis." ASCII_EOL);
 8020998:	4b04      	ldr	r3, [pc, #16]	@ (80209ac <help_homing+0x38>)
 802099a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 802099e:	4805      	ldr	r0, [pc, #20]	@ (80209b4 <help_homing+0x40>)
 80209a0:	4798      	blx	r3

    return NULL;
}
 80209a2:	2000      	movs	r0, #0
 80209a4:	bd08      	pop	{r3, pc}
 80209a6:	bf00      	nop
 80209a8:	20001bc4 	.word	0x20001bc4
 80209ac:	200011ac 	.word	0x200011ac
 80209b0:	08030080 	.word	0x08030080
 80209b4:	080300a0 	.word	0x080300a0

080209b8 <jog>:
{
 80209b8:	b508      	push	{r3, lr}
    if(!(state == STATE_IDLE || (state & (STATE_JOG|STATE_TOOL_CHANGE))))
 80209ba:	b110      	cbz	r0, 80209c2 <jog+0xa>
 80209bc:	f410 7f08 	tst.w	r0, #544	@ 0x220
 80209c0:	d007      	beq.n	80209d2 <jog+0x1a>
    if(args != NULL) {
 80209c2:	b141      	cbz	r1, 80209d6 <jog+0x1e>
        *(--args) = '=';
 80209c4:	233d      	movs	r3, #61	@ 0x3d
 80209c6:	f801 3c01 	strb.w	r3, [r1, #-1]
    return args == NULL ? Status_InvalidStatement : gc_execute_block(args); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 80209ca:	1ec8      	subs	r0, r1, #3
 80209cc:	f7ec fb30 	bl	800d030 <gc_execute_block>
}
 80209d0:	bd08      	pop	{r3, pc}
         return Status_IdleError;
 80209d2:	2008      	movs	r0, #8
 80209d4:	e7fc      	b.n	80209d0 <jog+0x18>
    return args == NULL ? Status_InvalidStatement : gc_execute_block(args); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 80209d6:	2003      	movs	r0, #3
 80209d8:	e7fa      	b.n	80209d0 <jog+0x18>
	...

080209dc <help_rst>:
{
 80209dc:	b510      	push	{r4, lr}
    hal.stream.write("$RST=* - restore/reset all settings." ASCII_EOL);
 80209de:	4c10      	ldr	r4, [pc, #64]	@ (8020a20 <help_rst+0x44>)
 80209e0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80209e4:	480f      	ldr	r0, [pc, #60]	@ (8020a24 <help_rst+0x48>)
 80209e6:	4798      	blx	r3
    hal.stream.write("$RST=$ - restore default settings." ASCII_EOL);
 80209e8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80209ec:	480e      	ldr	r0, [pc, #56]	@ (8020a28 <help_rst+0x4c>)
 80209ee:	4798      	blx	r3
    if(settings_get_details()->next)
 80209f0:	f7fb fef2 	bl	801c7d8 <settings_get_details>
 80209f4:	6983      	ldr	r3, [r0, #24]
 80209f6:	b11b      	cbz	r3, 8020a00 <help_rst+0x24>
        hal.stream.write("$RST=& - restore driver and plugin default settings." ASCII_EOL);
 80209f8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80209fc:	480b      	ldr	r0, [pc, #44]	@ (8020a2c <help_rst+0x50>)
 80209fe:	4798      	blx	r3
    if(grbl.tool_table.n_tools)
 8020a00:	4b0b      	ldr	r3, [pc, #44]	@ (8020a30 <help_rst+0x54>)
 8020a02:	699b      	ldr	r3, [r3, #24]
 8020a04:	b133      	cbz	r3, 8020a14 <help_rst+0x38>
        hal.stream.write("$RST=# - reset offsets and tool data." ASCII_EOL);
 8020a06:	4b06      	ldr	r3, [pc, #24]	@ (8020a20 <help_rst+0x44>)
 8020a08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020a0c:	4809      	ldr	r0, [pc, #36]	@ (8020a34 <help_rst+0x58>)
 8020a0e:	4798      	blx	r3
}
 8020a10:	2000      	movs	r0, #0
 8020a12:	bd10      	pop	{r4, pc}
        hal.stream.write("$RST=# - reset offsets." ASCII_EOL);
 8020a14:	4b02      	ldr	r3, [pc, #8]	@ (8020a20 <help_rst+0x44>)
 8020a16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020a1a:	4807      	ldr	r0, [pc, #28]	@ (8020a38 <help_rst+0x5c>)
 8020a1c:	4798      	blx	r3
 8020a1e:	e7f7      	b.n	8020a10 <help_rst+0x34>
 8020a20:	200011ac 	.word	0x200011ac
 8020a24:	080300c8 	.word	0x080300c8
 8020a28:	080300f0 	.word	0x080300f0
 8020a2c:	08030118 	.word	0x08030118
 8020a30:	20001394 	.word	0x20001394
 8020a34:	08030150 	.word	0x08030150
 8020a38:	08030178 	.word	0x08030178

08020a3c <help_spindle>:
{
 8020a3c:	b538      	push	{r3, r4, r5, lr}
 8020a3e:	4604      	mov	r4, r0
    spindle_ptrs_t *spindle = gc_spindle_get();
 8020a40:	f7ec f9da 	bl	800cdf8 <gc_spindle_get>
 8020a44:	4605      	mov	r5, r0
    if(cmd[1] == 'R' && spindle->reset_data)
 8020a46:	7863      	ldrb	r3, [r4, #1]
 8020a48:	2b52      	cmp	r3, #82	@ 0x52
 8020a4a:	d004      	beq.n	8020a56 <help_spindle+0x1a>
    if(cmd[1] == 'D' && spindle->get_data)
 8020a4c:	7863      	ldrb	r3, [r4, #1]
 8020a4e:	2b44      	cmp	r3, #68	@ 0x44
 8020a50:	d00a      	beq.n	8020a68 <help_spindle+0x2c>
}
 8020a52:	2000      	movs	r0, #0
 8020a54:	bd38      	pop	{r3, r4, r5, pc}
    if(cmd[1] == 'R' && spindle->reset_data)
 8020a56:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8020a58:	2b00      	cmp	r3, #0
 8020a5a:	d0f7      	beq.n	8020a4c <help_spindle+0x10>
        hal.stream.write("$SR - reset spindle encoder data." ASCII_EOL);
 8020a5c:	4b07      	ldr	r3, [pc, #28]	@ (8020a7c <help_spindle+0x40>)
 8020a5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020a62:	4807      	ldr	r0, [pc, #28]	@ (8020a80 <help_spindle+0x44>)
 8020a64:	4798      	blx	r3
 8020a66:	e7f1      	b.n	8020a4c <help_spindle+0x10>
    if(cmd[1] == 'D' && spindle->get_data)
 8020a68:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8020a6a:	2b00      	cmp	r3, #0
 8020a6c:	d0f1      	beq.n	8020a52 <help_spindle+0x16>
        hal.stream.write("$SD - output spindle encoder data." ASCII_EOL);
 8020a6e:	4b03      	ldr	r3, [pc, #12]	@ (8020a7c <help_spindle+0x40>)
 8020a70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020a74:	4803      	ldr	r0, [pc, #12]	@ (8020a84 <help_spindle+0x48>)
 8020a76:	4798      	blx	r3
 8020a78:	e7eb      	b.n	8020a52 <help_spindle+0x16>
 8020a7a:	bf00      	nop
 8020a7c:	200011ac 	.word	0x200011ac
 8020a80:	08030194 	.word	0x08030194
 8020a84:	080301b8 	.word	0x080301b8

08020a88 <spindle_reset_data>:
{
 8020a88:	b510      	push	{r4, lr}
    spindle_ptrs_t *spindle = gc_spindle_get();
 8020a8a:	f7ec f9b5 	bl	800cdf8 <gc_spindle_get>
 8020a8e:	4604      	mov	r4, r0
    if(spindle->reset_data)
 8020a90:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8020a92:	b103      	cbz	r3, 8020a96 <spindle_reset_data+0xe>
        spindle->reset_data();
 8020a94:	4798      	blx	r3
    return spindle->reset_data ? Status_OK : Status_InvalidStatement;
 8020a96:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8020a98:	b10b      	cbz	r3, 8020a9e <spindle_reset_data+0x16>
 8020a9a:	2000      	movs	r0, #0
}
 8020a9c:	bd10      	pop	{r4, pc}
    return spindle->reset_data ? Status_OK : Status_InvalidStatement;
 8020a9e:	2003      	movs	r0, #3
 8020aa0:	e7fc      	b.n	8020a9c <spindle_reset_data+0x14>
	...

08020aa4 <rtc_action>:
{
 8020aa4:	b508      	push	{r3, lr}
    if(args) {
 8020aa6:	b149      	cbz	r1, 8020abc <rtc_action+0x18>
 8020aa8:	4608      	mov	r0, r1
        struct tm *time = get_datetime(args);
 8020aaa:	f7f4 fd51 	bl	8015550 <get_datetime>
        if(time)
 8020aae:	b140      	cbz	r0, 8020ac2 <rtc_action+0x1e>
            hal.rtc.set_datetime(time);
 8020ab0:	4a05      	ldr	r2, [pc, #20]	@ (8020ac8 <rtc_action+0x24>)
 8020ab2:	f8d2 2110 	ldr.w	r2, [r2, #272]	@ 0x110
 8020ab6:	4790      	blx	r2
    status_code_t retval = Status_OK;
 8020ab8:	2000      	movs	r0, #0
}
 8020aba:	bd08      	pop	{r3, pc}
        retval = report_time();
 8020abc:	f7fa fe0a 	bl	801b6d4 <report_time>
 8020ac0:	e7fb      	b.n	8020aba <rtc_action+0x16>
            retval = Status_BadNumberFormat;
 8020ac2:	2002      	movs	r0, #2
 8020ac4:	e7f9      	b.n	8020aba <rtc_action+0x16>
 8020ac6:	bf00      	nop
 8020ac8:	200011ac 	.word	0x200011ac

08020acc <pin_state>:
{
 8020acc:	b508      	push	{r3, lr}
    return report_pin_states(state, args);
 8020ace:	f7fa fc0b 	bl	801b2e8 <report_pin_states>
}
 8020ad2:	bd08      	pop	{r3, pc}

08020ad4 <enumerate_pins>:
{
 8020ad4:	b508      	push	{r3, lr}
    return report_pins(state, args);
 8020ad6:	f7fa fbb9 	bl	801b24c <report_pins>
}
 8020ada:	bd08      	pop	{r3, pc}

08020adc <enumerate_alarms_grblformatted>:
{
 8020adc:	b508      	push	{r3, lr}
    return report_alarm_details(true);
 8020ade:	2001      	movs	r0, #1
 8020ae0:	f7fa f94c 	bl	801ad7c <report_alarm_details>
}
 8020ae4:	bd08      	pop	{r3, pc}

08020ae6 <enumerate_alarms>:
{
 8020ae6:	b508      	push	{r3, lr}
    return report_alarm_details(false);
 8020ae8:	2000      	movs	r0, #0
 8020aea:	f7fa f947 	bl	801ad7c <report_alarm_details>
}
 8020aee:	bd08      	pop	{r3, pc}

08020af0 <enumerate_errors_grblformatted>:
{
 8020af0:	b508      	push	{r3, lr}
    return report_error_details(true);
 8020af2:	2001      	movs	r0, #1
 8020af4:	f7fa f998 	bl	801ae28 <report_error_details>
}
 8020af8:	bd08      	pop	{r3, pc}

08020afa <enumerate_errors>:
{
 8020afa:	b508      	push	{r3, lr}
    return report_error_details(false);
 8020afc:	2000      	movs	r0, #0
 8020afe:	f7fa f993 	bl	801ae28 <report_error_details>
}
 8020b02:	bd08      	pop	{r3, pc}

08020b04 <enumerate_groups>:
{
 8020b04:	b508      	push	{r3, lr}
    return report_setting_group_details(true, NULL);
 8020b06:	2100      	movs	r1, #0
 8020b08:	2001      	movs	r0, #1
 8020b0a:	f7fa f9e3 	bl	801aed4 <report_setting_group_details>
}
 8020b0e:	bd08      	pop	{r3, pc}

08020b10 <enumerate_all>:
{
 8020b10:	b508      	push	{r3, lr}
    report_alarm_details(false);
 8020b12:	2000      	movs	r0, #0
 8020b14:	f7fa f932 	bl	801ad7c <report_alarm_details>
    report_error_details(false);
 8020b18:	2000      	movs	r0, #0
 8020b1a:	f7fa f985 	bl	801ae28 <report_error_details>
    report_setting_group_details(true, NULL);
 8020b1e:	2100      	movs	r1, #0
 8020b20:	2001      	movs	r0, #1
 8020b22:	f7fa f9d7 	bl	801aed4 <report_setting_group_details>
    return report_settings_details(SettingsFormat_MachineReadable, Setting_SettingsAll, Group_All);
 8020b26:	2200      	movs	r2, #0
 8020b28:	f240 21e5 	movw	r1, #741	@ 0x2e5
 8020b2c:	4610      	mov	r0, r2
 8020b2e:	f7fa f867 	bl	801ac00 <report_settings_details>
}
 8020b32:	bd08      	pop	{r3, pc}

08020b34 <enumerate_settings_halformatted>:
{
 8020b34:	b508      	push	{r3, lr}
    return report_settings_details(SettingsFormat_grblHAL, Setting_SettingsAll, Group_All);
 8020b36:	2200      	movs	r2, #0
 8020b38:	f240 21e5 	movw	r1, #741	@ 0x2e5
 8020b3c:	2003      	movs	r0, #3
 8020b3e:	f7fa f85f 	bl	801ac00 <report_settings_details>
}
 8020b42:	bd08      	pop	{r3, pc}

08020b44 <enumerate_settings_grblformatted>:
{
 8020b44:	b508      	push	{r3, lr}
    return report_settings_details(SettingsFormat_Grbl, Setting_SettingsAll, Group_All);
 8020b46:	2200      	movs	r2, #0
 8020b48:	f240 21e5 	movw	r1, #741	@ 0x2e5
 8020b4c:	2002      	movs	r0, #2
 8020b4e:	f7fa f857 	bl	801ac00 <report_settings_details>
}
 8020b52:	bd08      	pop	{r3, pc}

08020b54 <enumerate_settings>:
{
 8020b54:	b508      	push	{r3, lr}
    return report_settings_details(SettingsFormat_MachineReadable, Setting_SettingsAll, Group_All);
 8020b56:	2200      	movs	r2, #0
 8020b58:	f240 21e5 	movw	r1, #741	@ 0x2e5
 8020b5c:	4610      	mov	r0, r2
 8020b5e:	f7fa f84f 	bl	801ac00 <report_settings_details>
}
 8020b62:	bd08      	pop	{r3, pc}

08020b64 <set_startup_line>:
{
 8020b64:	b570      	push	{r4, r5, r6, lr}
 8020b66:	460b      	mov	r3, r1
 8020b68:	4615      	mov	r5, r2
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))))
 8020b6a:	b118      	cbz	r0, 8020b74 <set_startup_line+0x10>
 8020b6c:	f240 1103 	movw	r1, #259	@ 0x103
 8020b70:	4208      	tst	r0, r1
 8020b72:	d017      	beq.n	8020ba4 <set_startup_line+0x40>
    if(args == NULL)
 8020b74:	b1c3      	cbz	r3, 8020ba8 <set_startup_line+0x44>
    args = gc_normalize_block(args, NULL);
 8020b76:	2100      	movs	r1, #0
 8020b78:	4618      	mov	r0, r3
 8020b7a:	f7ec f9b7 	bl	800ceec <gc_normalize_block>
 8020b7e:	4604      	mov	r4, r0
    if(strlen(args) >= (sizeof(stored_line_t) - 1))
 8020b80:	f7e7 fabe 	bl	8008100 <strlen>
 8020b84:	2844      	cmp	r0, #68	@ 0x44
 8020b86:	d902      	bls.n	8020b8e <set_startup_line+0x2a>
        retval = Status_Overflow;
 8020b88:	260b      	movs	r6, #11
}
 8020b8a:	4630      	mov	r0, r6
 8020b8c:	bd70      	pop	{r4, r5, r6, pc}
    else if ((retval = gc_execute_block(args)) == Status_OK) // Execute gcode block to ensure block is valid.
 8020b8e:	4620      	mov	r0, r4
 8020b90:	f7ec fa4e 	bl	800d030 <gc_execute_block>
 8020b94:	4606      	mov	r6, r0
 8020b96:	2800      	cmp	r0, #0
 8020b98:	d1f7      	bne.n	8020b8a <set_startup_line+0x26>
        settings_write_startup_line(lnr, args);
 8020b9a:	4621      	mov	r1, r4
 8020b9c:	b2e8      	uxtb	r0, r5
 8020b9e:	f7fc f8dd 	bl	801cd5c <settings_write_startup_line>
 8020ba2:	e7f2      	b.n	8020b8a <set_startup_line+0x26>
        return Status_IdleError;
 8020ba4:	2608      	movs	r6, #8
 8020ba6:	e7f0      	b.n	8020b8a <set_startup_line+0x26>
        return Status_InvalidStatement;
 8020ba8:	2603      	movs	r6, #3
 8020baa:	e7ee      	b.n	8020b8a <set_startup_line+0x26>

08020bac <set_startup_line1>:
{
 8020bac:	b508      	push	{r3, lr}
    return set_startup_line(state, args, 1);
 8020bae:	2201      	movs	r2, #1
 8020bb0:	f7ff ffd8 	bl	8020b64 <set_startup_line>
}
 8020bb4:	bd08      	pop	{r3, pc}

08020bb6 <set_startup_line0>:
{
 8020bb6:	b508      	push	{r3, lr}
    return set_startup_line(state, args, 0);
 8020bb8:	2200      	movs	r2, #0
 8020bba:	f7ff ffd3 	bl	8020b64 <set_startup_line>
}
 8020bbe:	bd08      	pop	{r3, pc}

08020bc0 <output_startup_lines>:
{
 8020bc0:	b530      	push	{r4, r5, lr}
 8020bc2:	b093      	sub	sp, #76	@ 0x4c
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))))
 8020bc4:	4604      	mov	r4, r0
 8020bc6:	b150      	cbz	r0, 8020bde <output_startup_lines+0x1e>
 8020bc8:	f240 1303 	movw	r3, #259	@ 0x103
 8020bcc:	4218      	tst	r0, r3
 8020bce:	d017      	beq.n	8020c00 <output_startup_lines+0x40>
 8020bd0:	2400      	movs	r4, #0
 8020bd2:	e004      	b.n	8020bde <output_startup_lines+0x1e>
            report_startup_line(counter, line);
 8020bd4:	4669      	mov	r1, sp
 8020bd6:	4628      	mov	r0, r5
 8020bd8:	f7f8 fe9a 	bl	8019910 <report_startup_line>
    for (counter = 0; counter < N_STARTUP_LINE; counter++) {
 8020bdc:	3401      	adds	r4, #1
 8020bde:	2c01      	cmp	r4, #1
 8020be0:	d80b      	bhi.n	8020bfa <output_startup_lines+0x3a>
        if (!(settings_read_startup_line(counter, line)))
 8020be2:	b2e5      	uxtb	r5, r4
 8020be4:	4669      	mov	r1, sp
 8020be6:	4628      	mov	r0, r5
 8020be8:	f7fc f8dc 	bl	801cda4 <settings_read_startup_line>
 8020bec:	2800      	cmp	r0, #0
 8020bee:	d1f1      	bne.n	8020bd4 <output_startup_lines+0x14>
            grbl.report.status_message(Status_SettingReadFail);
 8020bf0:	4b04      	ldr	r3, [pc, #16]	@ (8020c04 <output_startup_lines+0x44>)
 8020bf2:	689b      	ldr	r3, [r3, #8]
 8020bf4:	2007      	movs	r0, #7
 8020bf6:	4798      	blx	r3
 8020bf8:	e7f0      	b.n	8020bdc <output_startup_lines+0x1c>
    return Status_OK;
 8020bfa:	2000      	movs	r0, #0
}
 8020bfc:	b013      	add	sp, #76	@ 0x4c
 8020bfe:	bd30      	pop	{r4, r5, pc}
        return Status_IdleError;
 8020c00:	2008      	movs	r0, #8
 8020c02:	e7fb      	b.n	8020bfc <output_startup_lines+0x3c>
 8020c04:	20001394 	.word	0x20001394

08020c08 <settings_reset>:
{
 8020c08:	b508      	push	{r3, lr}
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP))))
 8020c0a:	b118      	cbz	r0, 8020c14 <settings_reset+0xc>
 8020c0c:	f240 1201 	movw	r2, #257	@ 0x101
 8020c10:	4210      	tst	r0, r2
 8020c12:	d022      	beq.n	8020c5a <settings_reset+0x52>
    else switch (*args) {
 8020c14:	780b      	ldrb	r3, [r1, #0]
 8020c16:	3b23      	subs	r3, #35	@ 0x23
 8020c18:	2b07      	cmp	r3, #7
 8020c1a:	d820      	bhi.n	8020c5e <settings_reset+0x56>
 8020c1c:	e8df f003 	tbb	[pc, r3]
 8020c20:	0f1f0409 	.word	0x0f1f0409
 8020c24:	0c1f1f1f 	.word	0x0c1f1f1f
            restore.defaults = On;
 8020c28:	f04f 0301 	mov.w	r3, #1
    if(retval == Status_OK && restore.mask) {
 8020c2c:	b2d8      	uxtb	r0, r3
 8020c2e:	b948      	cbnz	r0, 8020c44 <settings_reset+0x3c>
}
 8020c30:	bd08      	pop	{r3, pc}
            restore.parameters = On;
 8020c32:	f04f 0302 	mov.w	r3, #2
    if(retval == Status_OK && restore.mask) {
 8020c36:	e7f9      	b.n	8020c2c <settings_reset+0x24>
            restore.mask = settings_all.mask;
 8020c38:	4b0a      	ldr	r3, [pc, #40]	@ (8020c64 <settings_reset+0x5c>)
 8020c3a:	781b      	ldrb	r3, [r3, #0]
    if(retval == Status_OK && restore.mask) {
 8020c3c:	e7f6      	b.n	8020c2c <settings_reset+0x24>
            restore.driver_parameters = On;
 8020c3e:	f04f 0310 	mov.w	r3, #16
    if(retval == Status_OK && restore.mask) {
 8020c42:	e7f3      	b.n	8020c2c <settings_reset+0x24>
        settings_restore(restore);
 8020c44:	4618      	mov	r0, r3
 8020c46:	f7fc f993 	bl	801cf70 <settings_restore>
        grbl.report.feedback_message(Message_RestoreDefaults);
 8020c4a:	4b07      	ldr	r3, [pc, #28]	@ (8020c68 <settings_reset+0x60>)
 8020c4c:	68db      	ldr	r3, [r3, #12]
 8020c4e:	2009      	movs	r0, #9
 8020c50:	4798      	blx	r3
        mc_reset(); // Force reset to ensure settings are initialized correctly.
 8020c52:	f7f3 fc21 	bl	8014498 <mc_reset>
 8020c56:	2000      	movs	r0, #0
 8020c58:	e7ea      	b.n	8020c30 <settings_reset+0x28>
        retval = Status_IdleError;
 8020c5a:	2008      	movs	r0, #8
 8020c5c:	e7e8      	b.n	8020c30 <settings_reset+0x28>
    else switch (*args) {
 8020c5e:	2003      	movs	r0, #3
 8020c60:	e7e6      	b.n	8020c30 <settings_reset+0x28>
 8020c62:	bf00      	nop
 8020c64:	0802fe8c 	.word	0x0802fe8c
 8020c68:	20001394 	.word	0x20001394

08020c6c <output_all_build_info>:
{
 8020c6c:	b500      	push	{lr}
 8020c6e:	b093      	sub	sp, #76	@ 0x4c
    settings_read_build_info(info);
 8020c70:	4668      	mov	r0, sp
 8020c72:	f7fc f857 	bl	801cd24 <settings_read_build_info>
    report_build_info(info, true);
 8020c76:	2101      	movs	r1, #1
 8020c78:	4668      	mov	r0, sp
 8020c7a:	f7f8 fe87 	bl	801998c <report_build_info>
}
 8020c7e:	2000      	movs	r0, #0
 8020c80:	b013      	add	sp, #76	@ 0x4c
 8020c82:	f85d fb04 	ldr.w	pc, [sp], #4

08020c86 <build_info>:
{
 8020c86:	b510      	push	{r4, lr}
 8020c88:	b092      	sub	sp, #72	@ 0x48
 8020c8a:	460c      	mov	r4, r1
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP|STATE_SLEEP|STATE_CHECK_MODE))))
 8020c8c:	b118      	cbz	r0, 8020c96 <build_info+0x10>
 8020c8e:	f240 1283 	movw	r2, #387	@ 0x183
 8020c92:	4210      	tst	r0, r2
 8020c94:	d014      	beq.n	8020cc0 <build_info+0x3a>
    if (args == NULL) {
 8020c96:	b154      	cbz	r4, 8020cae <build_info+0x28>
    else if (strlen(args) < (sizeof(stored_line_t) - 1))
 8020c98:	4620      	mov	r0, r4
 8020c9a:	f7e7 fa31 	bl	8008100 <strlen>
 8020c9e:	2844      	cmp	r0, #68	@ 0x44
 8020ca0:	d810      	bhi.n	8020cc4 <build_info+0x3e>
        settings_write_build_info(args);
 8020ca2:	4620      	mov	r0, r4
 8020ca4:	f7fc f82c 	bl	801cd00 <settings_write_build_info>
    return Status_OK;
 8020ca8:	2000      	movs	r0, #0
}
 8020caa:	b012      	add	sp, #72	@ 0x48
 8020cac:	bd10      	pop	{r4, pc}
        settings_read_build_info(info);
 8020cae:	4668      	mov	r0, sp
 8020cb0:	f7fc f838 	bl	801cd24 <settings_read_build_info>
        report_build_info(info, false);
 8020cb4:	2100      	movs	r1, #0
 8020cb6:	4668      	mov	r0, sp
 8020cb8:	f7f8 fe68 	bl	801998c <report_build_info>
    return Status_OK;
 8020cbc:	2000      	movs	r0, #0
 8020cbe:	e7f4      	b.n	8020caa <build_info+0x24>
        return Status_IdleError;
 8020cc0:	2008      	movs	r0, #8
 8020cc2:	e7f2      	b.n	8020caa <build_info+0x24>
        return Status_InvalidStatement;
 8020cc4:	2003      	movs	r0, #3
 8020cc6:	e7f0      	b.n	8020caa <build_info+0x24>

08020cc8 <tool_probe_workpiece>:
{
 8020cc8:	b508      	push	{r3, lr}
    return tc_probe_workpiece();
 8020cca:	f001 f9fb 	bl	80220c4 <tc_probe_workpiece>
}
 8020cce:	bd08      	pop	{r3, pc}

08020cd0 <enumerate_spindles_mr>:
{
 8020cd0:	b508      	push	{r3, lr}
    return report_spindles(true);
 8020cd2:	2001      	movs	r0, #1
 8020cd4:	f7fa fd44 	bl	801b760 <report_spindles>
}
 8020cd8:	bd08      	pop	{r3, pc}

08020cda <enumerate_spindles>:
{
 8020cda:	b508      	push	{r3, lr}
    return report_spindles(false);
 8020cdc:	2000      	movs	r0, #0
 8020cde:	f7fa fd3f 	bl	801b760 <report_spindles>
}
 8020ce2:	bd08      	pop	{r3, pc}

08020ce4 <output_help>:
{
 8020ce4:	b508      	push	{r3, lr}
    return report_help(args);
 8020ce6:	4608      	mov	r0, r1
 8020ce8:	f7fa f956 	bl	801af98 <report_help>
}
 8020cec:	bd08      	pop	{r3, pc}
	...

08020cf0 <check_mode>:
{
 8020cf0:	b508      	push	{r3, lr}
    if (state == STATE_CHECK_MODE) {
 8020cf2:	2802      	cmp	r0, #2
 8020cf4:	d009      	beq.n	8020d0a <check_mode+0x1a>
    } else if (state == STATE_IDLE) { // Requires idle mode.
 8020cf6:	b980      	cbnz	r0, 8020d1a <check_mode+0x2a>
        state_set(STATE_CHECK_MODE);
 8020cf8:	2002      	movs	r0, #2
 8020cfa:	f7fd fd09 	bl	801e710 <state_set>
        grbl.report.feedback_message(Message_Enabled);
 8020cfe:	4b08      	ldr	r3, [pc, #32]	@ (8020d20 <check_mode+0x30>)
 8020d00:	68db      	ldr	r3, [r3, #12]
 8020d02:	2004      	movs	r0, #4
 8020d04:	4798      	blx	r3
    return Status_OK;
 8020d06:	2000      	movs	r0, #0
}
 8020d08:	bd08      	pop	{r3, pc}
        mc_reset();
 8020d0a:	f7f3 fbc5 	bl	8014498 <mc_reset>
        grbl.report.feedback_message(Message_Disabled);
 8020d0e:	4b04      	ldr	r3, [pc, #16]	@ (8020d20 <check_mode+0x30>)
 8020d10:	68db      	ldr	r3, [r3, #12]
 8020d12:	2005      	movs	r0, #5
 8020d14:	4798      	blx	r3
    return Status_OK;
 8020d16:	2000      	movs	r0, #0
 8020d18:	e7f6      	b.n	8020d08 <check_mode+0x18>
        return Status_IdleError;
 8020d1a:	2008      	movs	r0, #8
 8020d1c:	e7f4      	b.n	8020d08 <check_mode+0x18>
 8020d1e:	bf00      	nop
 8020d20:	20001394 	.word	0x20001394

08020d24 <disable_lock>:
{
 8020d24:	b510      	push	{r4, lr}
 8020d26:	b082      	sub	sp, #8
    if(state & (STATE_ALARM|STATE_ESTOP)) {
 8020d28:	f240 1301 	movw	r3, #257	@ 0x101
 8020d2c:	4218      	tst	r0, r3
 8020d2e:	d037      	beq.n	8020da0 <disable_lock+0x7c>
        control_signals_t control_signals = hal.control.get_state();
 8020d30:	4b1d      	ldr	r3, [pc, #116]	@ (8020da8 <disable_lock+0x84>)
 8020d32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020d34:	4798      	blx	r3
        if(sys.alarm == Alarm_SelftestFailed)
 8020d36:	4b1d      	ldr	r3, [pc, #116]	@ (8020dac <disable_lock+0x88>)
 8020d38:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8020d3c:	2b10      	cmp	r3, #16
 8020d3e:	d023      	beq.n	8020d88 <disable_lock+0x64>
        else if (control_signals.e_stop)
 8020d40:	b2c4      	uxtb	r4, r0
 8020d42:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8020d46:	d121      	bne.n	8020d8c <disable_lock+0x68>
        else if (control_signals.safety_door_ajar)
 8020d48:	f014 0f08 	tst.w	r4, #8
 8020d4c:	d120      	bne.n	8020d90 <disable_lock+0x6c>
        else if(control_signals.reset)
 8020d4e:	f014 0401 	ands.w	r4, r4, #1
 8020d52:	d11f      	bne.n	8020d94 <disable_lock+0x70>
        else if(settings.limits.flags.hard_enabled && settings.limits.flags.check_at_init && limit_signals_merge(hal.limits.get_state()).value)
 8020d54:	4b16      	ldr	r3, [pc, #88]	@ (8020db0 <disable_lock+0x8c>)
 8020d56:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 8020d5a:	f003 0305 	and.w	r3, r3, #5
 8020d5e:	2b05      	cmp	r3, #5
 8020d60:	d107      	bne.n	8020d72 <disable_lock+0x4e>
 8020d62:	4b11      	ldr	r3, [pc, #68]	@ (8020da8 <disable_lock+0x84>)
 8020d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020d66:	4798      	blx	r3
 8020d68:	9001      	str	r0, [sp, #4]
 8020d6a:	f7f1 fe65 	bl	8012a38 <limit_signals_merge>
 8020d6e:	b2c0      	uxtb	r0, r0
 8020d70:	b990      	cbnz	r0, 8020d98 <disable_lock+0x74>
        else if(limits_homing_required())
 8020d72:	f7f2 faad 	bl	80132d0 <limits_homing_required>
 8020d76:	b988      	cbnz	r0, 8020d9c <disable_lock+0x78>
            grbl.report.feedback_message(Message_AlarmUnlock);
 8020d78:	4b0e      	ldr	r3, [pc, #56]	@ (8020db4 <disable_lock+0x90>)
 8020d7a:	68db      	ldr	r3, [r3, #12]
 8020d7c:	2003      	movs	r0, #3
 8020d7e:	4798      	blx	r3
            state_set(STATE_IDLE);
 8020d80:	2000      	movs	r0, #0
 8020d82:	f7fd fcc5 	bl	801e710 <state_set>
 8020d86:	e00c      	b.n	8020da2 <disable_lock+0x7e>
            retval = Status_SelfTestFailed;
 8020d88:	2431      	movs	r4, #49	@ 0x31
 8020d8a:	e00a      	b.n	8020da2 <disable_lock+0x7e>
            retval = Status_EStop;
 8020d8c:	2432      	movs	r4, #50	@ 0x32
 8020d8e:	e008      	b.n	8020da2 <disable_lock+0x7e>
            retval = Status_CheckDoor;
 8020d90:	240d      	movs	r4, #13
 8020d92:	e006      	b.n	8020da2 <disable_lock+0x7e>
            retval = Status_Reset;
 8020d94:	2412      	movs	r4, #18
 8020d96:	e004      	b.n	8020da2 <disable_lock+0x7e>
            retval = Status_LimitsEngaged;
 8020d98:	242d      	movs	r4, #45	@ 0x2d
 8020d9a:	e002      	b.n	8020da2 <disable_lock+0x7e>
            retval = Status_HomingRequired;
 8020d9c:	242e      	movs	r4, #46	@ 0x2e
 8020d9e:	e000      	b.n	8020da2 <disable_lock+0x7e>
    status_code_t retval = Status_OK;
 8020da0:	2400      	movs	r4, #0
}
 8020da2:	4620      	mov	r0, r4
 8020da4:	b002      	add	sp, #8
 8020da6:	bd10      	pop	{r4, pc}
 8020da8:	200011ac 	.word	0x200011ac
 8020dac:	2000148c 	.word	0x2000148c
 8020db0:	20001bc4 	.word	0x20001bc4
 8020db4:	20001394 	.word	0x20001394

08020db8 <read_int>:
{
 8020db8:	b510      	push	{r4, lr}
 8020dba:	ed2d 8b02 	vpush	{d8}
 8020dbe:	b082      	sub	sp, #8
 8020dc0:	460c      	mov	r4, r1
    uint_fast8_t counter = 0;
 8020dc2:	2300      	movs	r3, #0
 8020dc4:	9301      	str	r3, [sp, #4]
    if(!read_float(s, &counter, &parameter))
 8020dc6:	466a      	mov	r2, sp
 8020dc8:	a901      	add	r1, sp, #4
 8020dca:	f7f4 fad9 	bl	8015380 <read_float>
 8020dce:	b1a8      	cbz	r0, 8020dfc <read_int+0x44>
    if(parameter - truncf(parameter) != 0.0f)
 8020dd0:	ed9d 8a00 	vldr	s16, [sp]
 8020dd4:	eeb0 0a48 	vmov.f32	s0, s16
 8020dd8:	f006 fa6a 	bl	80272b0 <truncf>
 8020ddc:	ee38 0a40 	vsub.f32	s0, s16, s0
 8020de0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8020de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020de8:	d10a      	bne.n	8020e00 <read_int+0x48>
    *value = (int32_t)parameter;
 8020dea:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8020dee:	ed84 8a00 	vstr	s16, [r4]
    return Status_OK;
 8020df2:	2000      	movs	r0, #0
}
 8020df4:	b002      	add	sp, #8
 8020df6:	ecbd 8b02 	vpop	{d8}
 8020dfa:	bd10      	pop	{r4, pc}
        return Status_BadNumberFormat;
 8020dfc:	2002      	movs	r0, #2
 8020dfe:	e7f9      	b.n	8020df4 <read_int+0x3c>
        return Status_InvalidStatement;
 8020e00:	2003      	movs	r0, #3
 8020e02:	e7f7      	b.n	8020df4 <read_int+0x3c>

08020e04 <output_setting_description>:
    if(args) {
 8020e04:	b189      	cbz	r1, 8020e2a <output_setting_description+0x26>
{
 8020e06:	b500      	push	{lr}
 8020e08:	b083      	sub	sp, #12
 8020e0a:	4608      	mov	r0, r1
        retval = read_int(args, &id);
 8020e0c:	a901      	add	r1, sp, #4
 8020e0e:	f7ff ffd3 	bl	8020db8 <read_int>
        if(retval == Status_OK && id >= 0)
 8020e12:	b910      	cbnz	r0, 8020e1a <output_setting_description+0x16>
 8020e14:	9901      	ldr	r1, [sp, #4]
 8020e16:	2900      	cmp	r1, #0
 8020e18:	da02      	bge.n	8020e20 <output_setting_description+0x1c>
}
 8020e1a:	b003      	add	sp, #12
 8020e1c:	f85d fb04 	ldr.w	pc, [sp], #4
            retval = report_setting_description(SettingsFormat_MachineReadable, (setting_id_t)id);
 8020e20:	b289      	uxth	r1, r1
 8020e22:	2000      	movs	r0, #0
 8020e24:	f7f9 ff52 	bl	801accc <report_setting_description>
 8020e28:	e7f7      	b.n	8020e1a <output_setting_description+0x16>
    status_code_t retval = Status_BadNumberFormat;
 8020e2a:	2002      	movs	r0, #2
}
 8020e2c:	4770      	bx	lr

08020e2e <output_all_settings>:
{
 8020e2e:	b500      	push	{lr}
 8020e30:	b083      	sub	sp, #12
    if(args) {
 8020e32:	b171      	cbz	r1, 8020e52 <output_all_settings+0x24>
 8020e34:	460b      	mov	r3, r1
        retval = read_int(args, &id);
 8020e36:	a901      	add	r1, sp, #4
 8020e38:	4618      	mov	r0, r3
 8020e3a:	f7ff ffbd 	bl	8020db8 <read_int>
        if(retval == Status_OK && id >= 0)
 8020e3e:	b960      	cbnz	r0, 8020e5a <output_all_settings+0x2c>
 8020e40:	9901      	ldr	r1, [sp, #4]
 8020e42:	2900      	cmp	r1, #0
 8020e44:	db09      	blt.n	8020e5a <output_all_settings+0x2c>
            retval = report_settings_details(SettingsFormat_HumanReadable, (setting_id_t)id, Group_All);
 8020e46:	2200      	movs	r2, #0
 8020e48:	b289      	uxth	r1, r1
 8020e4a:	2001      	movs	r0, #1
 8020e4c:	f7f9 fed8 	bl	801ac00 <report_settings_details>
 8020e50:	e003      	b.n	8020e5a <output_all_settings+0x2c>
    } else if (state & (STATE_CYCLE|STATE_HOLD))
 8020e52:	f010 0f18 	tst.w	r0, #24
 8020e56:	d003      	beq.n	8020e60 <output_all_settings+0x32>
        retval = Status_IdleError; // Block during cycle. Takes too long to print.
 8020e58:	2008      	movs	r0, #8
}
 8020e5a:	b003      	add	sp, #12
 8020e5c:	f85d fb04 	ldr.w	pc, [sp], #4
        report_grbl_settings(true, NULL);
 8020e60:	2100      	movs	r1, #0
 8020e62:	2001      	movs	r0, #1
 8020e64:	f7f8 f8ba 	bl	8018fdc <report_grbl_settings>
    status_code_t retval = Status_OK;
 8020e68:	2000      	movs	r0, #0
 8020e6a:	e7f6      	b.n	8020e5a <output_all_settings+0x2c>

08020e6c <output_settings>:
{
 8020e6c:	b500      	push	{lr}
 8020e6e:	b083      	sub	sp, #12
    if(args) {
 8020e70:	b171      	cbz	r1, 8020e90 <output_settings+0x24>
 8020e72:	460b      	mov	r3, r1
        retval = read_int(args, &id);
 8020e74:	a901      	add	r1, sp, #4
 8020e76:	4618      	mov	r0, r3
 8020e78:	f7ff ff9e 	bl	8020db8 <read_int>
        if(retval == Status_OK && id >= 0)
 8020e7c:	b960      	cbnz	r0, 8020e98 <output_settings+0x2c>
 8020e7e:	9901      	ldr	r1, [sp, #4]
 8020e80:	2900      	cmp	r1, #0
 8020e82:	db09      	blt.n	8020e98 <output_settings+0x2c>
            retval = report_settings_details(SettingsFormat_HumanReadable, (setting_id_t)id, Group_All);
 8020e84:	2200      	movs	r2, #0
 8020e86:	b289      	uxth	r1, r1
 8020e88:	2001      	movs	r0, #1
 8020e8a:	f7f9 feb9 	bl	801ac00 <report_settings_details>
 8020e8e:	e003      	b.n	8020e98 <output_settings+0x2c>
    } else if (state & (STATE_CYCLE|STATE_HOLD))
 8020e90:	f010 0f18 	tst.w	r0, #24
 8020e94:	d003      	beq.n	8020e9e <output_settings+0x32>
        retval = Status_IdleError; // Block during cycle. Takes too long to print.
 8020e96:	2008      	movs	r0, #8
}
 8020e98:	b003      	add	sp, #12
 8020e9a:	f85d fb04 	ldr.w	pc, [sp], #4
    report_grbl_settings(true, NULL);
 8020e9e:	2100      	movs	r1, #0
 8020ea0:	2001      	movs	r0, #1
 8020ea2:	f7f8 f89b 	bl	8018fdc <report_grbl_settings>
    status_code_t retval = Status_OK;
 8020ea6:	2000      	movs	r0, #0
 8020ea8:	e7f6      	b.n	8020e98 <output_settings+0x2c>

08020eaa <output_ngc_parameters>:
{
 8020eaa:	b510      	push	{r4, lr}
 8020eac:	b082      	sub	sp, #8
    if(args) {
 8020eae:	b189      	cbz	r1, 8020ed4 <output_ngc_parameters+0x2a>
 8020eb0:	460c      	mov	r4, r1
        retval = read_int(args, &id);
 8020eb2:	a901      	add	r1, sp, #4
 8020eb4:	4620      	mov	r0, r4
 8020eb6:	f7ff ff7f 	bl	8020db8 <read_int>
        if(retval == Status_OK && id >= 0)
 8020eba:	b910      	cbnz	r0, 8020ec2 <output_ngc_parameters+0x18>
 8020ebc:	9801      	ldr	r0, [sp, #4]
 8020ebe:	2800      	cmp	r0, #0
 8020ec0:	da04      	bge.n	8020ecc <output_ngc_parameters+0x22>
            retval = report_named_ngc_parameter(args);
 8020ec2:	4620      	mov	r0, r4
 8020ec4:	f7f8 f9ca 	bl	801925c <report_named_ngc_parameter>
}
 8020ec8:	b002      	add	sp, #8
 8020eca:	bd10      	pop	{r4, pc}
            retval = report_ngc_parameter((ngc_param_id_t)id);
 8020ecc:	b280      	uxth	r0, r0
 8020ece:	f7f8 f983 	bl	80191d8 <report_ngc_parameter>
 8020ed2:	e7f9      	b.n	8020ec8 <output_ngc_parameters+0x1e>
        report_ngc_parameters();
 8020ed4:	f7f8 fa00 	bl	80192d8 <report_ngc_parameters>
    status_code_t retval = Status_OK;
 8020ed8:	2000      	movs	r0, #0
 8020eda:	e7f5      	b.n	8020ec8 <output_ngc_parameters+0x1e>

08020edc <system_init_switches>:
{
 8020edc:	b508      	push	{r3, lr}
    control_signals_t signals = hal.control.get_state();
 8020ede:	4b0b      	ldr	r3, [pc, #44]	@ (8020f0c <system_init_switches+0x30>)
 8020ee0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020ee2:	4798      	blx	r3
    sys.flags.block_delete_enabled = signals.block_delete;
 8020ee4:	f3c0 1100 	ubfx	r1, r0, #4, #1
 8020ee8:	4b09      	ldr	r3, [pc, #36]	@ (8020f10 <system_init_switches+0x34>)
 8020eea:	7d9a      	ldrb	r2, [r3, #22]
 8020eec:	f361 1204 	bfi	r2, r1, #4, #1
 8020ef0:	759a      	strb	r2, [r3, #22]
    sys.flags.single_block = signals.single_block;
 8020ef2:	f3c0 21c0 	ubfx	r1, r0, #11, #1
 8020ef6:	b2d2      	uxtb	r2, r2
 8020ef8:	f361 12c7 	bfi	r2, r1, #7, #1
 8020efc:	759a      	strb	r2, [r3, #22]
    sys.flags.optional_stop_disable = signals.stop_disable;
 8020efe:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8020f02:	b2d2      	uxtb	r2, r2
 8020f04:	f360 1286 	bfi	r2, r0, #6, #1
 8020f08:	759a      	strb	r2, [r3, #22]
}
 8020f0a:	bd08      	pop	{r3, pc}
 8020f0c:	200011ac 	.word	0x200011ac
 8020f10:	2000148c 	.word	0x2000148c

08020f14 <control_interrupt_handler>:
{
 8020f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020f16:	b083      	sub	sp, #12
 8020f18:	4604      	mov	r4, r0
    if(signals.deasserted)
 8020f1a:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8020f1e:	d153      	bne.n	8020fc8 <control_interrupt_handler+0xb4>
    if(signals.value) {
 8020f20:	b2a3      	uxth	r3, r4
 8020f22:	2b00      	cmp	r3, #0
 8020f24:	d04e      	beq.n	8020fc4 <control_interrupt_handler+0xb0>
        sys.last_event.control.value = signals.value;
 8020f26:	4a66      	ldr	r2, [pc, #408]	@ (80210c0 <control_interrupt_handler+0x1ac>)
 8020f28:	f8a2 4080 	strh.w	r4, [r2, #128]	@ 0x80
        if((signals.reset || signals.e_stop || signals.motor_fault) && state_get() != STATE_ESTOP)
 8020f2c:	f240 1241 	movw	r2, #321	@ 0x141
 8020f30:	4213      	tst	r3, r2
 8020f32:	d151      	bne.n	8020fd8 <control_interrupt_handler+0xc4>
            if(signals.safety_door_ajar && hal.signals_cap.safety_door_ajar) {
 8020f34:	b2e6      	uxtb	r6, r4
 8020f36:	f014 0f08 	tst.w	r4, #8
 8020f3a:	d010      	beq.n	8020f5e <control_interrupt_handler+0x4a>
 8020f3c:	4b61      	ldr	r3, [pc, #388]	@ (80210c4 <control_interrupt_handler+0x1b0>)
 8020f3e:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8020f42:	f013 0f08 	tst.w	r3, #8
 8020f46:	d00a      	beq.n	8020f5e <control_interrupt_handler+0x4a>
                if(settings.safety_door.flags.ignore_when_idle) {
 8020f48:	4b5f      	ldr	r3, [pc, #380]	@ (80210c8 <control_interrupt_handler+0x1b4>)
 8020f4a:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 8020f4e:	f013 0f01 	tst.w	r3, #1
 8020f52:	d149      	bne.n	8020fe8 <control_interrupt_handler+0xd4>
                    system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 8020f54:	4b5b      	ldr	r3, [pc, #364]	@ (80210c4 <control_interrupt_handler+0x1b0>)
 8020f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020f58:	2140      	movs	r1, #64	@ 0x40
 8020f5a:	485c      	ldr	r0, [pc, #368]	@ (80210cc <control_interrupt_handler+0x1b8>)
 8020f5c:	4798      	blx	r3
            if(signals.probe_overtravel) {
 8020f5e:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8020f62:	462f      	mov	r7, r5
 8020f64:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 8020f68:	d052      	beq.n	8021010 <control_interrupt_handler+0xfc>
                limit_signals_t overtravel = { .min.z = On};
 8020f6a:	2300      	movs	r3, #0
 8020f6c:	9301      	str	r3, [sp, #4]
 8020f6e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8020f72:	f043 0304 	orr.w	r3, r3, #4
 8020f76:	f88d 3004 	strb.w	r3, [sp, #4]
                hal.limits.interrupt_callback(overtravel);
 8020f7a:	4b52      	ldr	r3, [pc, #328]	@ (80210c4 <control_interrupt_handler+0x1b0>)
 8020f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020f7e:	9801      	ldr	r0, [sp, #4]
 8020f80:	4798      	blx	r3
            if(signals.block_delete)
 8020f82:	f016 0f10 	tst.w	r6, #16
 8020f86:	d007      	beq.n	8020f98 <control_interrupt_handler+0x84>
                sys.flags.block_delete_enabled = !signals.deasserted;
 8020f88:	43eb      	mvns	r3, r5
 8020f8a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8020f8e:	4a4c      	ldr	r2, [pc, #304]	@ (80210c0 <control_interrupt_handler+0x1ac>)
 8020f90:	7d91      	ldrb	r1, [r2, #22]
 8020f92:	f363 1104 	bfi	r1, r3, #4, #1
 8020f96:	7591      	strb	r1, [r2, #22]
            if(signals.single_block)
 8020f98:	f017 0f08 	tst.w	r7, #8
 8020f9c:	d007      	beq.n	8020fae <control_interrupt_handler+0x9a>
                sys.flags.single_block = !signals.deasserted;
 8020f9e:	43eb      	mvns	r3, r5
 8020fa0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8020fa4:	4a46      	ldr	r2, [pc, #280]	@ (80210c0 <control_interrupt_handler+0x1ac>)
 8020fa6:	7d91      	ldrb	r1, [r2, #22]
 8020fa8:	f363 11c7 	bfi	r1, r3, #7, #1
 8020fac:	7591      	strb	r1, [r2, #22]
            if(signals.stop_disable)
 8020fae:	f016 0f20 	tst.w	r6, #32
 8020fb2:	d007      	beq.n	8020fc4 <control_interrupt_handler+0xb0>
                sys.flags.optional_stop_disable = !signals.deasserted;
 8020fb4:	43eb      	mvns	r3, r5
 8020fb6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8020fba:	4a41      	ldr	r2, [pc, #260]	@ (80210c0 <control_interrupt_handler+0x1ac>)
 8020fbc:	7d91      	ldrb	r1, [r2, #22]
 8020fbe:	f363 1186 	bfi	r1, r3, #6, #1
 8020fc2:	7591      	strb	r1, [r2, #22]
}
 8020fc4:	b003      	add	sp, #12
 8020fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        signals.value &= onoff_signals.mask;
 8020fc8:	b284      	uxth	r4, r0
 8020fca:	f424 44ef 	bic.w	r4, r4, #30592	@ 0x7780
 8020fce:	f424 44ef 	bic.w	r4, r4, #30592	@ 0x7780
 8020fd2:	f024 044f 	bic.w	r4, r4, #79	@ 0x4f
 8020fd6:	e7a3      	b.n	8020f20 <control_interrupt_handler+0xc>
        if((signals.reset || signals.e_stop || signals.motor_fault) && state_get() != STATE_ESTOP)
 8020fd8:	f7fd fb94 	bl	801e704 <state_get>
 8020fdc:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8020fe0:	d0a8      	beq.n	8020f34 <control_interrupt_handler+0x20>
            mc_reset();
 8020fe2:	f7f3 fa59 	bl	8014498 <mc_reset>
 8020fe6:	e7ed      	b.n	8020fc4 <control_interrupt_handler+0xb0>
                    if(state_get() != STATE_IDLE && state_get() != STATE_JOG)
 8020fe8:	f7fd fb8c 	bl	801e704 <state_get>
 8020fec:	b930      	cbnz	r0, 8020ffc <control_interrupt_handler+0xe8>
                    if(settings.mode == Mode_Laser) // Turn off spindle immediately (laser) when in laser mode
 8020fee:	4b36      	ldr	r3, [pc, #216]	@ (80210c8 <control_interrupt_handler+0x1b4>)
 8020ff0:	7e1b      	ldrb	r3, [r3, #24]
 8020ff2:	2b01      	cmp	r3, #1
 8020ff4:	d1b3      	bne.n	8020f5e <control_interrupt_handler+0x4a>
                        spindle_all_off();
 8020ff6:	f7fd f901 	bl	801e1fc <spindle_all_off>
 8020ffa:	e7b0      	b.n	8020f5e <control_interrupt_handler+0x4a>
                    if(state_get() != STATE_IDLE && state_get() != STATE_JOG)
 8020ffc:	f7fd fb82 	bl	801e704 <state_get>
 8021000:	2820      	cmp	r0, #32
 8021002:	d0f4      	beq.n	8020fee <control_interrupt_handler+0xda>
                        system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 8021004:	4b2f      	ldr	r3, [pc, #188]	@ (80210c4 <control_interrupt_handler+0x1b0>)
 8021006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021008:	2140      	movs	r1, #64	@ 0x40
 802100a:	4830      	ldr	r0, [pc, #192]	@ (80210cc <control_interrupt_handler+0x1b8>)
 802100c:	4798      	blx	r3
 802100e:	e7ee      	b.n	8020fee <control_interrupt_handler+0xda>
            } else if(signals.probe_triggered) {
 8021010:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8021014:	d019      	beq.n	802104a <control_interrupt_handler+0x136>
                if(sys.probing_state == Probing_Off && (state_get() & (STATE_CYCLE|STATE_JOG))) {
 8021016:	4b2a      	ldr	r3, [pc, #168]	@ (80210c0 <control_interrupt_handler+0x1ac>)
 8021018:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 802101c:	b133      	cbz	r3, 802102c <control_interrupt_handler+0x118>
                    hal.probe.configure(false, false);
 802101e:	4b29      	ldr	r3, [pc, #164]	@ (80210c4 <control_interrupt_handler+0x1b0>)
 8021020:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8021024:	2100      	movs	r1, #0
 8021026:	4608      	mov	r0, r1
 8021028:	4798      	blx	r3
 802102a:	e7aa      	b.n	8020f82 <control_interrupt_handler+0x6e>
                if(sys.probing_state == Probing_Off && (state_get() & (STATE_CYCLE|STATE_JOG))) {
 802102c:	f7fd fb6a 	bl	801e704 <state_get>
 8021030:	f010 0f28 	tst.w	r0, #40	@ 0x28
 8021034:	d0f3      	beq.n	802101e <control_interrupt_handler+0x10a>
                    system_set_exec_state_flag(EXEC_STOP);
 8021036:	4b23      	ldr	r3, [pc, #140]	@ (80210c4 <control_interrupt_handler+0x1b0>)
 8021038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802103a:	4c24      	ldr	r4, [pc, #144]	@ (80210cc <control_interrupt_handler+0x1b8>)
 802103c:	2110      	movs	r1, #16
 802103e:	4620      	mov	r0, r4
 8021040:	4798      	blx	r3
                    sys.alarm_pending = Alarm_ProbeProtect;
 8021042:	230d      	movs	r3, #13
 8021044:	f804 3c34 	strb.w	r3, [r4, #-52]
 8021048:	e79b      	b.n	8020f82 <control_interrupt_handler+0x6e>
            } else if(signals.probe_disconnected) {
 802104a:	f016 0f80 	tst.w	r6, #128	@ 0x80
 802104e:	d108      	bne.n	8021062 <control_interrupt_handler+0x14e>
            } else if(signals.feed_hold)
 8021050:	f016 0f02 	tst.w	r6, #2
 8021054:	d019      	beq.n	802108a <control_interrupt_handler+0x176>
                system_set_exec_state_flag(EXEC_FEED_HOLD);
 8021056:	4b1b      	ldr	r3, [pc, #108]	@ (80210c4 <control_interrupt_handler+0x1b0>)
 8021058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802105a:	2108      	movs	r1, #8
 802105c:	481b      	ldr	r0, [pc, #108]	@ (80210cc <control_interrupt_handler+0x1b8>)
 802105e:	4798      	blx	r3
 8021060:	e78f      	b.n	8020f82 <control_interrupt_handler+0x6e>
                if(sys.probing_state == Probing_Active && state_get() == STATE_CYCLE) {
 8021062:	4b17      	ldr	r3, [pc, #92]	@ (80210c0 <control_interrupt_handler+0x1ac>)
 8021064:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8021068:	b2db      	uxtb	r3, r3
 802106a:	2b01      	cmp	r3, #1
 802106c:	d189      	bne.n	8020f82 <control_interrupt_handler+0x6e>
 802106e:	f7fd fb49 	bl	801e704 <state_get>
 8021072:	2808      	cmp	r0, #8
 8021074:	d185      	bne.n	8020f82 <control_interrupt_handler+0x6e>
                    system_set_exec_state_flag(EXEC_FEED_HOLD);
 8021076:	4b13      	ldr	r3, [pc, #76]	@ (80210c4 <control_interrupt_handler+0x1b0>)
 8021078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802107a:	4c14      	ldr	r4, [pc, #80]	@ (80210cc <control_interrupt_handler+0x1b8>)
 802107c:	2108      	movs	r1, #8
 802107e:	4620      	mov	r0, r4
 8021080:	4798      	blx	r3
                    sys.alarm_pending = Alarm_ProbeProtect;
 8021082:	230d      	movs	r3, #13
 8021084:	f804 3c34 	strb.w	r3, [r4, #-52]
 8021088:	e77b      	b.n	8020f82 <control_interrupt_handler+0x6e>
            else if(signals.cycle_start) {
 802108a:	f016 0f04 	tst.w	r6, #4
 802108e:	f43f af78 	beq.w	8020f82 <control_interrupt_handler+0x6e>
                system_set_exec_state_flag(EXEC_CYCLE_START);
 8021092:	4b0c      	ldr	r3, [pc, #48]	@ (80210c4 <control_interrupt_handler+0x1b0>)
 8021094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021096:	4c0d      	ldr	r4, [pc, #52]	@ (80210cc <control_interrupt_handler+0x1b8>)
 8021098:	2102      	movs	r1, #2
 802109a:	4620      	mov	r0, r4
 802109c:	4798      	blx	r3
                sys.report.cycle_start = settings.status_report.pin_state;
 802109e:	4b0a      	ldr	r3, [pc, #40]	@ (80210c8 <control_interrupt_handler+0x1b4>)
 80210a0:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 80210a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80210a8:	f814 2c15 	ldrb.w	r2, [r4, #-21]
 80210ac:	f363 1286 	bfi	r2, r3, #6, #1
 80210b0:	f804 2c15 	strb.w	r2, [r4, #-21]
                gc_state.tool_change = false;
 80210b4:	4b06      	ldr	r3, [pc, #24]	@ (80210d0 <control_interrupt_handler+0x1bc>)
 80210b6:	2200      	movs	r2, #0
 80210b8:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 80210bc:	e761      	b.n	8020f82 <control_interrupt_handler+0x6e>
 80210be:	bf00      	nop
 80210c0:	2000148c 	.word	0x2000148c
 80210c4:	200011ac 	.word	0x200011ac
 80210c8:	20001bc4 	.word	0x20001bc4
 80210cc:	200014d4 	.word	0x200014d4
 80210d0:	20000ee4 	.word	0x20000ee4

080210d4 <system_execute_startup>:
    if(hal.nvs.type != NVS_None) {
 80210d4:	4b11      	ldr	r3, [pc, #68]	@ (802111c <system_execute_startup+0x48>)
 80210d6:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 80210da:	b9cb      	cbnz	r3, 8021110 <system_execute_startup+0x3c>
 80210dc:	4770      	bx	lr
                report_execute_startup_message(line, Status_SettingReadFail);
 80210de:	2107      	movs	r1, #7
 80210e0:	4668      	mov	r0, sp
 80210e2:	f7f8 fc35 	bl	8019950 <report_execute_startup_message>
        for (n = 0; n < N_STARTUP_LINE; n++) {
 80210e6:	3401      	adds	r4, #1
 80210e8:	2c01      	cmp	r4, #1
 80210ea:	d815      	bhi.n	8021118 <system_execute_startup+0x44>
            if (!settings_read_startup_line(n, line))
 80210ec:	4669      	mov	r1, sp
 80210ee:	b2e0      	uxtb	r0, r4
 80210f0:	f7fb fe58 	bl	801cda4 <settings_read_startup_line>
 80210f4:	2800      	cmp	r0, #0
 80210f6:	d0f2      	beq.n	80210de <system_execute_startup+0xa>
            else if (*line != '\0')
 80210f8:	f89d 3000 	ldrb.w	r3, [sp]
 80210fc:	2b00      	cmp	r3, #0
 80210fe:	d0f2      	beq.n	80210e6 <system_execute_startup+0x12>
                report_execute_startup_message(line, gc_execute_block(line));
 8021100:	4668      	mov	r0, sp
 8021102:	f7eb ff95 	bl	800d030 <gc_execute_block>
 8021106:	4601      	mov	r1, r0
 8021108:	4668      	mov	r0, sp
 802110a:	f7f8 fc21 	bl	8019950 <report_execute_startup_message>
 802110e:	e7ea      	b.n	80210e6 <system_execute_startup+0x12>
{
 8021110:	b510      	push	{r4, lr}
 8021112:	b092      	sub	sp, #72	@ 0x48
        for (n = 0; n < N_STARTUP_LINE; n++) {
 8021114:	2400      	movs	r4, #0
 8021116:	e7e7      	b.n	80210e8 <system_execute_startup+0x14>
}
 8021118:	b012      	add	sp, #72	@ 0x48
 802111a:	bd10      	pop	{r4, pc}
 802111c:	200011ac 	.word	0x200011ac

08021120 <go_home>:
{
 8021120:	b510      	push	{r4, lr}
 8021122:	460c      	mov	r4, r1
    if(axes.mask && !settings.homing.flags.single_axis_commands)
 8021124:	b2cb      	uxtb	r3, r1
 8021126:	b12b      	cbz	r3, 8021134 <go_home+0x14>
 8021128:	4b39      	ldr	r3, [pc, #228]	@ (8021210 <go_home+0xf0>)
 802112a:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 802112e:	f013 0f02 	tst.w	r3, #2
 8021132:	d069      	beq.n	8021208 <go_home+0xe8>
    if(!(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP))))
 8021134:	f7fd fae6 	bl	801e704 <state_get>
 8021138:	bb40      	cbnz	r0, 802118c <go_home+0x6c>
    control_signals_t control_signals = hal.control.get_state();
 802113a:	4b36      	ldr	r3, [pc, #216]	@ (8021214 <go_home+0xf4>)
 802113c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802113e:	4798      	blx	r3
    if(sys.alarm == Alarm_SelftestFailed)
 8021140:	4b35      	ldr	r3, [pc, #212]	@ (8021218 <go_home+0xf8>)
 8021142:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8021146:	2b10      	cmp	r3, #16
 8021148:	d02d      	beq.n	80211a6 <go_home+0x86>
    else if (control_signals.e_stop)
 802114a:	b2c3      	uxtb	r3, r0
 802114c:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8021150:	d14d      	bne.n	80211ee <go_home+0xce>
    else if(control_signals.motor_fault)
 8021152:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8021156:	d14f      	bne.n	80211f8 <go_home+0xd8>
    else if (!(settings.homing.flags.enabled && (sys.homing.mask || settings.homing.flags.single_axis_commands || settings.homing.flags.manual)))
 8021158:	4a2d      	ldr	r2, [pc, #180]	@ (8021210 <go_home+0xf0>)
 802115a:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 802115e:	f012 0f01 	tst.w	r2, #1
 8021162:	d04b      	beq.n	80211fc <go_home+0xdc>
 8021164:	492c      	ldr	r1, [pc, #176]	@ (8021218 <go_home+0xf8>)
 8021166:	7e89      	ldrb	r1, [r1, #26]
 8021168:	b911      	cbnz	r1, 8021170 <go_home+0x50>
 802116a:	f012 0f12 	tst.w	r2, #18
 802116e:	d047      	beq.n	8021200 <go_home+0xe0>
    else if (control_signals.safety_door_ajar && !settings.safety_door.flags.ignore_when_idle)
 8021170:	f013 0f08 	tst.w	r3, #8
 8021174:	d005      	beq.n	8021182 <go_home+0x62>
 8021176:	4a26      	ldr	r2, [pc, #152]	@ (8021210 <go_home+0xf0>)
 8021178:	f892 213c 	ldrb.w	r2, [r2, #316]	@ 0x13c
 802117c:	f012 0f01 	tst.w	r2, #1
 8021180:	d040      	beq.n	8021204 <go_home+0xe4>
    else if(control_signals.reset)
 8021182:	f013 0f01 	tst.w	r3, #1
 8021186:	d009      	beq.n	802119c <go_home+0x7c>
        retval = Status_Reset;
 8021188:	2412      	movs	r4, #18
 802118a:	e031      	b.n	80211f0 <go_home+0xd0>
    if(!(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP))))
 802118c:	f7fd faba 	bl	801e704 <state_get>
 8021190:	f240 1301 	movw	r3, #257	@ 0x101
 8021194:	4218      	tst	r0, r3
 8021196:	d1d0      	bne.n	802113a <go_home+0x1a>
        return Status_IdleError;
 8021198:	2408      	movs	r4, #8
 802119a:	e02b      	b.n	80211f4 <go_home+0xd4>
        retval = mc_homing_cycle(axes); // Home axes according to configuration
 802119c:	4620      	mov	r0, r4
 802119e:	f7f3 f9d3 	bl	8014548 <mc_homing_cycle>
 80211a2:	4604      	mov	r4, r0
 80211a4:	e000      	b.n	80211a8 <go_home+0x88>
        retval = Status_SelfTestFailed;
 80211a6:	2431      	movs	r4, #49	@ 0x31
    if (retval == Status_OK && !sys.abort) {
 80211a8:	bb14      	cbnz	r4, 80211f0 <go_home+0xd0>
 80211aa:	4b1b      	ldr	r3, [pc, #108]	@ (8021218 <go_home+0xf8>)
 80211ac:	781b      	ldrb	r3, [r3, #0]
 80211ae:	b9fb      	cbnz	r3, 80211f0 <go_home+0xd0>
        state_set(STATE_IDLE);  // Set to IDLE when complete.
 80211b0:	2000      	movs	r0, #0
 80211b2:	f7fd faad 	bl	801e710 <state_set>
        st_go_idle();           // Set steppers to the settings idle state before returning.
 80211b6:	f7fd ffcf 	bl	801f158 <st_go_idle>
        grbl.report.feedback_message(Message_None);
 80211ba:	4b18      	ldr	r3, [pc, #96]	@ (802121c <go_home+0xfc>)
 80211bc:	68db      	ldr	r3, [r3, #12]
 80211be:	2000      	movs	r0, #0
 80211c0:	4798      	blx	r3
        if (sys.homing.mask && (sys.homing.mask & sys.homed.mask) == sys.homing.mask)
 80211c2:	4b15      	ldr	r3, [pc, #84]	@ (8021218 <go_home+0xf8>)
 80211c4:	7e9b      	ldrb	r3, [r3, #26]
 80211c6:	b123      	cbz	r3, 80211d2 <go_home+0xb2>
 80211c8:	4a13      	ldr	r2, [pc, #76]	@ (8021218 <go_home+0xf8>)
 80211ca:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80211ce:	4393      	bics	r3, r2
 80211d0:	d00a      	beq.n	80211e8 <go_home+0xc8>
        else if(limits_homing_required()) { // Keep alarm state active if homing is required and not all axes homed.
 80211d2:	f7f2 f87d 	bl	80132d0 <limits_homing_required>
 80211d6:	b158      	cbz	r0, 80211f0 <go_home+0xd0>
            sys.alarm = Alarm_HomingRequired;
 80211d8:	4b0f      	ldr	r3, [pc, #60]	@ (8021218 <go_home+0xf8>)
 80211da:	220b      	movs	r2, #11
 80211dc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            state_set(STATE_ALARM);
 80211e0:	2001      	movs	r0, #1
 80211e2:	f7fd fa95 	bl	801e710 <state_set>
 80211e6:	e003      	b.n	80211f0 <go_home+0xd0>
            system_execute_startup();
 80211e8:	f7ff ff74 	bl	80210d4 <system_execute_startup>
 80211ec:	e000      	b.n	80211f0 <go_home+0xd0>
        retval = Status_EStop;
 80211ee:	2432      	movs	r4, #50	@ 0x32
    return retval == Status_Unhandled ? Status_OK : retval;
 80211f0:	2c54      	cmp	r4, #84	@ 0x54
 80211f2:	d00b      	beq.n	802120c <go_home+0xec>
}
 80211f4:	4620      	mov	r0, r4
 80211f6:	bd10      	pop	{r4, pc}
        retval = Status_MotorFault;
 80211f8:	2433      	movs	r4, #51	@ 0x33
 80211fa:	e7f9      	b.n	80211f0 <go_home+0xd0>
        retval = Status_HomingDisabled;
 80211fc:	2405      	movs	r4, #5
 80211fe:	e7f7      	b.n	80211f0 <go_home+0xd0>
 8021200:	2405      	movs	r4, #5
 8021202:	e7f5      	b.n	80211f0 <go_home+0xd0>
        retval = Status_CheckDoor;
 8021204:	240d      	movs	r4, #13
 8021206:	e7f3      	b.n	80211f0 <go_home+0xd0>
        return Status_HomingDisabled;
 8021208:	2405      	movs	r4, #5
 802120a:	e7f3      	b.n	80211f4 <go_home+0xd4>
    return retval == Status_Unhandled ? Status_OK : retval;
 802120c:	2400      	movs	r4, #0
 802120e:	e7f1      	b.n	80211f4 <go_home+0xd4>
 8021210:	20001bc4 	.word	0x20001bc4
 8021214:	200011ac 	.word	0x200011ac
 8021218:	2000148c 	.word	0x2000148c
 802121c:	20001394 	.word	0x20001394

08021220 <home_z>:
{
 8021220:	b508      	push	{r3, lr}
    return go_home(state, (axes_signals_t){Z_AXIS_BIT});
 8021222:	f04f 0104 	mov.w	r1, #4
 8021226:	f7ff ff7b 	bl	8021120 <go_home>
}
 802122a:	bd08      	pop	{r3, pc}

0802122c <home_y>:
{
 802122c:	b508      	push	{r3, lr}
    return go_home(state, (axes_signals_t){Y_AXIS_BIT});
 802122e:	f04f 0102 	mov.w	r1, #2
 8021232:	f7ff ff75 	bl	8021120 <go_home>
}
 8021236:	bd08      	pop	{r3, pc}

08021238 <home_x>:
{
 8021238:	b508      	push	{r3, lr}
    return go_home(state, (axes_signals_t){X_AXIS_BIT});
 802123a:	f04f 0101 	mov.w	r1, #1
 802123e:	f7ff ff6f 	bl	8021120 <go_home>
}
 8021242:	bd08      	pop	{r3, pc}

08021244 <home>:
{
 8021244:	b508      	push	{r3, lr}
    return go_home(state, (axes_signals_t){0});
 8021246:	f04f 0100 	mov.w	r1, #0
 802124a:	f7ff ff69 	bl	8021120 <go_home>
}
 802124e:	bd08      	pop	{r3, pc}

08021250 <_system_output_help>:
    commands->next = commands_root;
    commands_root = commands;
}

void _system_output_help (sys_commands_t *commands, bool traverse)
{
 8021250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021254:	4606      	mov	r6, r0
 8021256:	4688      	mov	r8, r1
    const char *help;
    uint_fast8_t idx;

    while(commands) {
 8021258:	e039      	b.n	80212ce <_system_output_help+0x7e>
                    if(*help != '$') {
                        hal.stream.write_char('$');
                        hal.stream.write(commands->commands[idx].command);
                        hal.stream.write(" - ");
                    }
                    hal.stream.write(help);
 802125a:	4f1f      	ldr	r7, [pc, #124]	@ (80212d8 <_system_output_help+0x88>)
 802125c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8021260:	4628      	mov	r0, r5
 8021262:	4798      	blx	r3
                    hal.stream.write("." ASCII_EOL);
 8021264:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8021268:	481c      	ldr	r0, [pc, #112]	@ (80212dc <_system_output_help+0x8c>)
 802126a:	4798      	blx	r3
        for(idx = 0; idx < commands->n_commands; idx++) {
 802126c:	3401      	adds	r4, #1
 802126e:	7833      	ldrb	r3, [r6, #0]
 8021270:	42a3      	cmp	r3, r4
 8021272:	d922      	bls.n	80212ba <_system_output_help+0x6a>
            if(commands->commands[idx].help.str) {
 8021274:	6872      	ldr	r2, [r6, #4]
 8021276:	0127      	lsls	r7, r4, #4
 8021278:	eb02 1304 	add.w	r3, r2, r4, lsl #4
 802127c:	68dd      	ldr	r5, [r3, #12]
 802127e:	2d00      	cmp	r5, #0
 8021280:	d0f4      	beq.n	802126c <_system_output_help+0x1c>
                if(commands->commands[idx].flags.help_fn)
 8021282:	7a1b      	ldrb	r3, [r3, #8]
 8021284:	f013 0f04 	tst.w	r3, #4
 8021288:	d002      	beq.n	8021290 <_system_output_help+0x40>
                    help = commands->commands[idx].help.fn(commands->commands[idx].command);
 802128a:	59d0      	ldr	r0, [r2, r7]
 802128c:	47a8      	blx	r5
 802128e:	4605      	mov	r5, r0
                if(help) {
 8021290:	2d00      	cmp	r5, #0
 8021292:	d0eb      	beq.n	802126c <_system_output_help+0x1c>
                    if(*help != '$') {
 8021294:	782b      	ldrb	r3, [r5, #0]
 8021296:	2b24      	cmp	r3, #36	@ 0x24
 8021298:	d0df      	beq.n	802125a <_system_output_help+0xa>
                        hal.stream.write_char('$');
 802129a:	f8df 903c 	ldr.w	r9, [pc, #60]	@ 80212d8 <_system_output_help+0x88>
 802129e:	f8d9 30bc 	ldr.w	r3, [r9, #188]	@ 0xbc
 80212a2:	2024      	movs	r0, #36	@ 0x24
 80212a4:	4798      	blx	r3
                        hal.stream.write(commands->commands[idx].command);
 80212a6:	f8d9 30b4 	ldr.w	r3, [r9, #180]	@ 0xb4
 80212aa:	6872      	ldr	r2, [r6, #4]
 80212ac:	59d0      	ldr	r0, [r2, r7]
 80212ae:	4798      	blx	r3
                        hal.stream.write(" - ");
 80212b0:	f8d9 30b4 	ldr.w	r3, [r9, #180]	@ 0xb4
 80212b4:	480a      	ldr	r0, [pc, #40]	@ (80212e0 <_system_output_help+0x90>)
 80212b6:	4798      	blx	r3
 80212b8:	e7cf      	b.n	802125a <_system_output_help+0xa>
                }
            }
        }
        commands = traverse && commands->next != &core_commands ? commands->next : NULL;
 80212ba:	f1b8 0f00 	cmp.w	r8, #0
 80212be:	d005      	beq.n	80212cc <_system_output_help+0x7c>
 80212c0:	68b6      	ldr	r6, [r6, #8]
 80212c2:	4b08      	ldr	r3, [pc, #32]	@ (80212e4 <_system_output_help+0x94>)
 80212c4:	429e      	cmp	r6, r3
 80212c6:	d102      	bne.n	80212ce <_system_output_help+0x7e>
 80212c8:	2600      	movs	r6, #0
 80212ca:	e000      	b.n	80212ce <_system_output_help+0x7e>
 80212cc:	2600      	movs	r6, #0
    while(commands) {
 80212ce:	b10e      	cbz	r6, 80212d4 <_system_output_help+0x84>
        for(idx = 0; idx < commands->n_commands; idx++) {
 80212d0:	2400      	movs	r4, #0
 80212d2:	e7cc      	b.n	802126e <_system_output_help+0x1e>
    }
}
 80212d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80212d8:	200011ac 	.word	0x200011ac
 80212dc:	08030174 	.word	0x08030174
 80212e0:	0802b3d0 	.word	0x0802b3d0
 80212e4:	2000048c 	.word	0x2000048c

080212e8 <system_command_help>:

    _system_output_help(&cmd, false);
}

void system_command_help (void)
{
 80212e8:	b510      	push	{r4, lr}
    _system_output_help(&core_commands, false);
 80212ea:	4c06      	ldr	r4, [pc, #24]	@ (8021304 <system_command_help+0x1c>)
 80212ec:	2100      	movs	r1, #0
 80212ee:	4620      	mov	r0, r4
 80212f0:	f7ff ffae 	bl	8021250 <_system_output_help>
    if(commands_root != &core_commands)
 80212f4:	4b04      	ldr	r3, [pc, #16]	@ (8021308 <system_command_help+0x20>)
 80212f6:	6818      	ldr	r0, [r3, #0]
 80212f8:	42a0      	cmp	r0, r4
 80212fa:	d002      	beq.n	8021302 <system_command_help+0x1a>
        _system_output_help(commands_root, true);
 80212fc:	2101      	movs	r1, #1
 80212fe:	f7ff ffa7 	bl	8021250 <_system_output_help>
}
 8021302:	bd10      	pop	{r4, pc}
 8021304:	2000048c 	.word	0x2000048c
 8021308:	20000488 	.word	0x20000488

0802130c <system_execute_line>:

\param line pointer to the command string.
\returns \a status_code_t enum value; #Status_OK if successfully handled, another relevant status code if not.
*/
status_code_t system_execute_line (char *line)
{
 802130c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021310:	b082      	sub	sp, #8
    if(line[1] == '\0') {
 8021312:	7847      	ldrb	r7, [r0, #1]
 8021314:	b12f      	cbz	r7, 8021322 <system_execute_line+0x16>
 8021316:	4604      	mov	r4, r0

    status_code_t retval = Status_Unhandled;

    char c, *s1, *s2;

    s1 = s2 = ++line;
 8021318:	f100 0801 	add.w	r8, r0, #1
 802131c:	4643      	mov	r3, r8
 802131e:	4642      	mov	r2, r8

    c = *s1;
    while(c && c != '=') {
 8021320:	e007      	b.n	8021332 <system_execute_line+0x26>
        grbl.report.help_message();
 8021322:	4b81      	ldr	r3, [pc, #516]	@ (8021528 <system_execute_line+0x21c>)
 8021324:	685b      	ldr	r3, [r3, #4]
 8021326:	4798      	blx	r3
        return Status_OK;
 8021328:	e060      	b.n	80213ec <system_execute_line+0xe0>
        if(c != ' ')
            *s2++ = CAPS(c);
 802132a:	f803 7b01 	strb.w	r7, [r3], #1
        c = *++s1;
 802132e:	f812 7f01 	ldrb.w	r7, [r2, #1]!
    while(c && c != '=') {
 8021332:	b16f      	cbz	r7, 8021350 <system_execute_line+0x44>
 8021334:	2f3d      	cmp	r7, #61	@ 0x3d
 8021336:	d00b      	beq.n	8021350 <system_execute_line+0x44>
        if(c != ' ')
 8021338:	2f20      	cmp	r7, #32
 802133a:	d0f8      	beq.n	802132e <system_execute_line+0x22>
            *s2++ = CAPS(c);
 802133c:	f1a7 0161 	sub.w	r1, r7, #97	@ 0x61
 8021340:	b2c9      	uxtb	r1, r1
 8021342:	2919      	cmp	r1, #25
 8021344:	d8f1      	bhi.n	802132a <system_execute_line+0x1e>
 8021346:	f007 075f 	and.w	r7, r7, #95	@ 0x5f
 802134a:	e7ee      	b.n	802132a <system_execute_line+0x1e>
    }

    while((c = *s1++))
        *s2++ = c;
 802134c:	f803 1b01 	strb.w	r1, [r3], #1
    while((c = *s1++))
 8021350:	f812 1b01 	ldrb.w	r1, [r2], #1
 8021354:	2900      	cmp	r1, #0
 8021356:	d1f9      	bne.n	802134c <system_execute_line+0x40>

    *s2 = '\0';
 8021358:	2200      	movs	r2, #0
 802135a:	701a      	strb	r2, [r3, #0]

    if(!strncmp(line, "HELP", 4))
 802135c:	2204      	movs	r2, #4
 802135e:	4973      	ldr	r1, [pc, #460]	@ (802152c <system_execute_line+0x220>)
 8021360:	4640      	mov	r0, r8
 8021362:	f003 f8b0 	bl	80244c6 <strncmp>
 8021366:	b160      	cbz	r0, 8021382 <system_execute_line+0x76>
        return report_help(&line[4]);

    char *args = strchr(line, '=');
 8021368:	213d      	movs	r1, #61	@ 0x3d
 802136a:	4640      	mov	r0, r8
 802136c:	f003 f89e 	bl	80244ac <strchr>

    if(args)
 8021370:	4681      	mov	r9, r0
 8021372:	b110      	cbz	r0, 802137a <system_execute_line+0x6e>
        *args++ = '\0';
 8021374:	2300      	movs	r3, #0
 8021376:	f809 3b01 	strb.w	r3, [r9], #1

    uint_fast8_t idx;
    sys_commands_t *cmd = commands_root;
 802137a:	4b6d      	ldr	r3, [pc, #436]	@ (8021530 <system_execute_line+0x224>)
 802137c:	681d      	ldr	r5, [r3, #0]
    status_code_t retval = Status_Unhandled;
 802137e:	2754      	movs	r7, #84	@ 0x54
 8021380:	e02e      	b.n	80213e0 <system_execute_line+0xd4>
        return report_help(&line[4]);
 8021382:	1d60      	adds	r0, r4, #5
 8021384:	f7f9 fe08 	bl	801af98 <report_help>
 8021388:	4607      	mov	r7, r0
 802138a:	e02f      	b.n	80213ec <system_execute_line+0xe0>
            if(!strcmp(line, cmd->commands[idx].command)) {
                if(sys.blocking_event && !cmd->commands[idx].flags.allow_blocking) {
                    retval = Status_NotAllowedCriticalEvent;
                    break;
                } else if(!cmd->commands[idx].flags.noargs || args == NULL) {
                    if((retval = cmd->commands[idx].execute(state_get(), args)) != Status_Unhandled)
 802138c:	6876      	ldr	r6, [r6, #4]
 802138e:	f7fd f9b9 	bl	801e704 <state_get>
 8021392:	4649      	mov	r1, r9
 8021394:	47b0      	blx	r6
 8021396:	4607      	mov	r7, r0
 8021398:	2854      	cmp	r0, #84	@ 0x54
 802139a:	d11d      	bne.n	80213d8 <system_execute_line+0xcc>
        for(idx = 0; idx < cmd->n_commands; idx++) {
 802139c:	3401      	adds	r4, #1
 802139e:	782b      	ldrb	r3, [r5, #0]
 80213a0:	42a3      	cmp	r3, r4
 80213a2:	d919      	bls.n	80213d8 <system_execute_line+0xcc>
            if(!strcmp(line, cmd->commands[idx].command)) {
 80213a4:	686a      	ldr	r2, [r5, #4]
 80213a6:	0123      	lsls	r3, r4, #4
 80213a8:	eb02 1604 	add.w	r6, r2, r4, lsl #4
 80213ac:	58d1      	ldr	r1, [r2, r3]
 80213ae:	4640      	mov	r0, r8
 80213b0:	f7e6 fe46 	bl	8008040 <strcmp>
 80213b4:	2800      	cmp	r0, #0
 80213b6:	d1f1      	bne.n	802139c <system_execute_line+0x90>
                if(sys.blocking_event && !cmd->commands[idx].flags.allow_blocking) {
 80213b8:	4b5e      	ldr	r3, [pc, #376]	@ (8021534 <system_execute_line+0x228>)
 80213ba:	795b      	ldrb	r3, [r3, #5]
 80213bc:	b11b      	cbz	r3, 80213c6 <system_execute_line+0xba>
 80213be:	7a33      	ldrb	r3, [r6, #8]
 80213c0:	f013 0f02 	tst.w	r3, #2
 80213c4:	d007      	beq.n	80213d6 <system_execute_line+0xca>
                } else if(!cmd->commands[idx].flags.noargs || args == NULL) {
 80213c6:	7a33      	ldrb	r3, [r6, #8]
 80213c8:	f013 0f01 	tst.w	r3, #1
 80213cc:	d0de      	beq.n	802138c <system_execute_line+0x80>
 80213ce:	f1b9 0f00 	cmp.w	r9, #0
 80213d2:	d1e3      	bne.n	802139c <system_execute_line+0x90>
 80213d4:	e7da      	b.n	802138c <system_execute_line+0x80>
                    retval = Status_NotAllowedCriticalEvent;
 80213d6:	274f      	movs	r7, #79	@ 0x4f
                        break;
                }
            }
        }
        cmd = retval == Status_Unhandled ? cmd->next : NULL;
 80213d8:	2f54      	cmp	r7, #84	@ 0x54
 80213da:	d103      	bne.n	80213e4 <system_execute_line+0xd8>
 80213dc:	68ad      	ldr	r5, [r5, #8]
    } while(cmd);
 80213de:	b11d      	cbz	r5, 80213e8 <system_execute_line+0xdc>
        for(idx = 0; idx < cmd->n_commands; idx++) {
 80213e0:	2400      	movs	r4, #0
 80213e2:	e7dc      	b.n	802139e <system_execute_line+0x92>
        cmd = retval == Status_Unhandled ? cmd->next : NULL;
 80213e4:	2500      	movs	r5, #0
 80213e6:	e7fa      	b.n	80213de <system_execute_line+0xd2>

    // deprecated, to be removed
    if(retval == Status_Unhandled && (cmd = grbl.on_get_commands ? grbl.on_get_commands() : NULL)) {
 80213e8:	2f54      	cmp	r7, #84	@ 0x54
 80213ea:	d003      	beq.n	80213f4 <system_execute_line+0xe8>
        } else
            retval = Status_IdleError;
    }

    return retval;
}
 80213ec:	4638      	mov	r0, r7
 80213ee:	b002      	add	sp, #8
 80213f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(retval == Status_Unhandled && (cmd = grbl.on_get_commands ? grbl.on_get_commands() : NULL)) {
 80213f4:	4b4c      	ldr	r3, [pc, #304]	@ (8021528 <system_execute_line+0x21c>)
 80213f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80213fa:	b11b      	cbz	r3, 8021404 <system_execute_line+0xf8>
 80213fc:	4798      	blx	r3
 80213fe:	4606      	mov	r6, r0
 8021400:	2800      	cmp	r0, #0
 8021402:	d162      	bne.n	80214ca <system_execute_line+0x1be>
    if(retval == Status_Unhandled && grbl.on_unknown_sys_command) {
 8021404:	2f54      	cmp	r7, #84	@ 0x54
 8021406:	d1f1      	bne.n	80213ec <system_execute_line+0xe0>
 8021408:	4b47      	ldr	r3, [pc, #284]	@ (8021528 <system_execute_line+0x21c>)
 802140a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802140e:	b1ab      	cbz	r3, 802143c <system_execute_line+0x130>
        if(args)
 8021410:	f1b9 0f00 	cmp.w	r9, #0
 8021414:	d05f      	beq.n	80214d6 <system_execute_line+0x1ca>
            *(--args) = '=';
 8021416:	f109 34ff 	add.w	r4, r9, #4294967295
 802141a:	233d      	movs	r3, #61	@ 0x3d
 802141c:	f809 3c01 	strb.w	r3, [r9, #-1]
        retval = grbl.on_unknown_sys_command(state_get(), line);
 8021420:	4b41      	ldr	r3, [pc, #260]	@ (8021528 <system_execute_line+0x21c>)
 8021422:	f8d3 5084 	ldr.w	r5, [r3, #132]	@ 0x84
 8021426:	f7fd f96d 	bl	801e704 <state_get>
 802142a:	4641      	mov	r1, r8
 802142c:	47a8      	blx	r5
 802142e:	4607      	mov	r7, r0
        if(args)
 8021430:	2c00      	cmp	r4, #0
 8021432:	d052      	beq.n	80214da <system_execute_line+0x1ce>
            *args++ = '\0';
 8021434:	46a1      	mov	r9, r4
 8021436:	2300      	movs	r3, #0
 8021438:	f809 3b01 	strb.w	r3, [r9], #1
    if (retval == Status_Unhandled) {
 802143c:	2f54      	cmp	r7, #84	@ 0x54
 802143e:	d1d5      	bne.n	80213ec <system_execute_line+0xe0>
        if(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))) {
 8021440:	f7fd f960 	bl	801e704 <state_get>
 8021444:	b128      	cbz	r0, 8021452 <system_execute_line+0x146>
 8021446:	f7fd f95d 	bl	801e704 <state_get>
 802144a:	f240 1303 	movw	r3, #259	@ 0x103
 802144e:	4218      	tst	r0, r3
 8021450:	d067      	beq.n	8021522 <system_execute_line+0x216>
            uint_fast8_t counter = 0;
 8021452:	2300      	movs	r3, #0
 8021454:	9300      	str	r3, [sp, #0]
            if(!read_float(line, &counter, &parameter))
 8021456:	aa01      	add	r2, sp, #4
 8021458:	4669      	mov	r1, sp
 802145a:	4640      	mov	r0, r8
 802145c:	f7f3 ff90 	bl	8015380 <read_float>
 8021460:	2800      	cmp	r0, #0
 8021462:	d13c      	bne.n	80214de <system_execute_line+0x1d2>
                retval = Status_BadNumberFormat;
 8021464:	2702      	movs	r7, #2
 8021466:	e7c1      	b.n	80213ec <system_execute_line+0xe0>
                        if((retval = cmd->commands[idx].execute(state_get(), args)) != Status_Unhandled)
 8021468:	f8da 7004 	ldr.w	r7, [sl, #4]
 802146c:	f7fd f94a 	bl	801e704 <state_get>
 8021470:	4649      	mov	r1, r9
 8021472:	47b8      	blx	r7
 8021474:	4607      	mov	r7, r0
 8021476:	2854      	cmp	r0, #84	@ 0x54
 8021478:	d11f      	bne.n	80214ba <system_execute_line+0x1ae>
            for(idx = 0; idx < cmd->n_commands; idx++) {
 802147a:	3401      	adds	r4, #1
 802147c:	7833      	ldrb	r3, [r6, #0]
 802147e:	42a3      	cmp	r3, r4
 8021480:	d91b      	bls.n	80214ba <system_execute_line+0x1ae>
                if(!strcmp(line, cmd->commands[idx].command)) {
 8021482:	6872      	ldr	r2, [r6, #4]
 8021484:	0123      	lsls	r3, r4, #4
 8021486:	eb02 1a04 	add.w	sl, r2, r4, lsl #4
 802148a:	58d1      	ldr	r1, [r2, r3]
 802148c:	4640      	mov	r0, r8
 802148e:	f7e6 fdd7 	bl	8008040 <strcmp>
 8021492:	2800      	cmp	r0, #0
 8021494:	d1f1      	bne.n	802147a <system_execute_line+0x16e>
                    if(sys.blocking_event && !cmd->commands[idx].flags.allow_blocking) {
 8021496:	4b27      	ldr	r3, [pc, #156]	@ (8021534 <system_execute_line+0x228>)
 8021498:	795b      	ldrb	r3, [r3, #5]
 802149a:	b123      	cbz	r3, 80214a6 <system_execute_line+0x19a>
 802149c:	f89a 3008 	ldrb.w	r3, [sl, #8]
 80214a0:	f013 0f02 	tst.w	r3, #2
 80214a4:	d008      	beq.n	80214b8 <system_execute_line+0x1ac>
                    } else if(!cmd->commands[idx].flags.noargs || args == NULL) {
 80214a6:	f89a 3008 	ldrb.w	r3, [sl, #8]
 80214aa:	f013 0f01 	tst.w	r3, #1
 80214ae:	d0db      	beq.n	8021468 <system_execute_line+0x15c>
 80214b0:	f1b9 0f00 	cmp.w	r9, #0
 80214b4:	d1e1      	bne.n	802147a <system_execute_line+0x16e>
 80214b6:	e7d7      	b.n	8021468 <system_execute_line+0x15c>
                        retval = Status_NotAllowedCriticalEvent;
 80214b8:	274f      	movs	r7, #79	@ 0x4f
            cmd = retval == Status_Unhandled && cmd->on_get_commands ? cmd->on_get_commands() : NULL;
 80214ba:	2f54      	cmp	r7, #84	@ 0x54
 80214bc:	d107      	bne.n	80214ce <system_execute_line+0x1c2>
 80214be:	68f3      	ldr	r3, [r6, #12]
 80214c0:	b13b      	cbz	r3, 80214d2 <system_execute_line+0x1c6>
 80214c2:	4798      	blx	r3
 80214c4:	4606      	mov	r6, r0
        } while(cmd);
 80214c6:	2e00      	cmp	r6, #0
 80214c8:	d09c      	beq.n	8021404 <system_execute_line+0xf8>
            for(idx = 0; idx < cmd->n_commands; idx++) {
 80214ca:	2400      	movs	r4, #0
 80214cc:	e7d6      	b.n	802147c <system_execute_line+0x170>
            cmd = retval == Status_Unhandled && cmd->on_get_commands ? cmd->on_get_commands() : NULL;
 80214ce:	462e      	mov	r6, r5
 80214d0:	e7f9      	b.n	80214c6 <system_execute_line+0x1ba>
 80214d2:	462e      	mov	r6, r5
 80214d4:	e7f7      	b.n	80214c6 <system_execute_line+0x1ba>
 80214d6:	464c      	mov	r4, r9
 80214d8:	e7a2      	b.n	8021420 <system_execute_line+0x114>
 80214da:	46a1      	mov	r9, r4
 80214dc:	e7ae      	b.n	802143c <system_execute_line+0x130>
            else if(!isintf(parameter))
 80214de:	ed9d 0a01 	vldr	s0, [sp, #4]
 80214e2:	f7f3 ffc3 	bl	801546c <isintf>
 80214e6:	b1d0      	cbz	r0, 802151e <system_execute_line+0x212>
            else if(args)
 80214e8:	f1b9 0f00 	cmp.w	r9, #0
 80214ec:	d00b      	beq.n	8021506 <system_execute_line+0x1fa>
                retval = settings_store_setting((setting_id_t)parameter, args);
 80214ee:	eddd 7a01 	vldr	s15, [sp, #4]
 80214f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80214f6:	4649      	mov	r1, r9
 80214f8:	ee17 3a90 	vmov	r3, s15
 80214fc:	b298      	uxth	r0, r3
 80214fe:	f7fb ff95 	bl	801d42c <settings_store_setting>
 8021502:	4607      	mov	r7, r0
 8021504:	e772      	b.n	80213ec <system_execute_line+0xe0>
                retval = report_grbl_setting((setting_id_t)parameter, NULL);
 8021506:	eddd 7a01 	vldr	s15, [sp, #4]
 802150a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802150e:	2100      	movs	r1, #0
 8021510:	ee17 3a90 	vmov	r3, s15
 8021514:	b298      	uxth	r0, r3
 8021516:	f7f7 fd4d 	bl	8018fb4 <report_grbl_setting>
 802151a:	4607      	mov	r7, r0
 802151c:	e766      	b.n	80213ec <system_execute_line+0xe0>
                retval = Status_InvalidStatement;
 802151e:	2703      	movs	r7, #3
        if(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))) {
 8021520:	e764      	b.n	80213ec <system_execute_line+0xe0>
            retval = Status_IdleError;
 8021522:	2708      	movs	r7, #8
 8021524:	e762      	b.n	80213ec <system_execute_line+0xe0>
 8021526:	bf00      	nop
 8021528:	20001394 	.word	0x20001394
 802152c:	080301e0 	.word	0x080301e0
 8021530:	20000488 	.word	0x20000488
 8021534:	2000148c 	.word	0x2000148c

08021538 <system_convert_array_steps_to_mpos>:
          this function serves as a central place to compute the transformation.
\param position pointer to the target float array for the machine position.
\param steps pointer to the source step count array to transform.
 */
void system_convert_array_steps_to_mpos (float *position, int32_t *steps)
{
 8021538:	b410      	push	{r4}
#ifdef KINEMATICS_API
    kinematics.transform_steps_to_cartesian(position, steps);
#else
    uint_fast8_t idx = N_AXIS;
 802153a:	2303      	movs	r3, #3
    do {
        idx--;
 802153c:	3b01      	subs	r3, #1
        position[idx] = steps[idx] / settings.axis[idx].steps_per_mm;
 802153e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8021542:	4a0b      	ldr	r2, [pc, #44]	@ (8021570 <system_convert_array_steps_to_mpos+0x38>)
 8021544:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8021548:	edd2 6a0c 	vldr	s13, [r2, #48]	@ 0x30
 802154c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8021550:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8021554:	ee07 4a90 	vmov	s15, r4
 8021558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802155c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8021560:	ed82 7a00 	vstr	s14, [r2]
    } while(idx);
 8021564:	2b00      	cmp	r3, #0
 8021566:	d1e9      	bne.n	802153c <system_convert_array_steps_to_mpos+0x4>
#endif
}
 8021568:	f85d 4b04 	ldr.w	r4, [sp], #4
 802156c:	4770      	bx	lr
 802156e:	bf00      	nop
 8021570:	20001bc4 	.word	0x20001bc4

08021574 <system_xy_at_fixture>:
{
    bool ok = false;

    coord_data_t target, position;

    if(tolerance > 0.0f && settings_read_coord_data(id, &target.values)) {
 8021574:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802157c:	dc01      	bgt.n	8021582 <system_xy_at_fixture+0xe>
    bool ok = false;
 802157e:	2000      	movs	r0, #0
        system_convert_array_steps_to_mpos(position.values, sys.position);
        ok = hypot_f(position.x - target.x, position.y - target.y) <= tolerance;
    }

    return ok;
}
 8021580:	4770      	bx	lr
{
 8021582:	b500      	push	{lr}
 8021584:	ed2d 8b02 	vpush	{d8}
 8021588:	b087      	sub	sp, #28
 802158a:	eeb0 8a40 	vmov.f32	s16, s0
    if(tolerance > 0.0f && settings_read_coord_data(id, &target.values)) {
 802158e:	a903      	add	r1, sp, #12
 8021590:	f7fb fc5e 	bl	801ce50 <settings_read_coord_data>
 8021594:	b920      	cbnz	r0, 80215a0 <system_xy_at_fixture+0x2c>
}
 8021596:	b007      	add	sp, #28
 8021598:	ecbd 8b02 	vpop	{d8}
 802159c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_convert_array_steps_to_mpos(position.values, sys.position);
 80215a0:	490f      	ldr	r1, [pc, #60]	@ (80215e0 <system_xy_at_fixture+0x6c>)
 80215a2:	4668      	mov	r0, sp
 80215a4:	f7ff ffc8 	bl	8021538 <system_convert_array_steps_to_mpos>
        ok = hypot_f(position.x - target.x, position.y - target.y) <= tolerance;
 80215a8:	ed9d 0a00 	vldr	s0, [sp]
 80215ac:	eddd 7a03 	vldr	s15, [sp, #12]
 80215b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80215b4:	eddd 7a01 	vldr	s15, [sp, #4]
 80215b8:	ed9d 7a04 	vldr	s14, [sp, #16]
 80215bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return sqrtf(x * x + y * y);
 80215c0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80215c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80215c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80215cc:	f005 fcb8 	bl	8026f40 <sqrtf>
        ok = hypot_f(position.x - target.x, position.y - target.y) <= tolerance;
 80215d0:	eeb4 8ac0 	vcmpe.f32	s16, s0
 80215d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215d8:	bfac      	ite	ge
 80215da:	2001      	movge	r0, #1
 80215dc:	2000      	movlt	r0, #0
 80215de:	e7da      	b.n	8021596 <system_xy_at_fixture+0x22>
 80215e0:	20001514 	.word	0x20001514

080215e4 <system_raise_alarm>:

/*! \brief Raise and report a system alarm.
\param a #alarm_code_t enum representing the alarm code.
 */
void system_raise_alarm (alarm_code_t alarm)
{
 80215e4:	b510      	push	{r4, lr}
 80215e6:	4604      	mov	r4, r0
    if(state_get() == STATE_HOMING && !(sys.rt_exec_state & EXEC_RESET))
 80215e8:	f7fd f88c 	bl	801e704 <state_get>
 80215ec:	2804      	cmp	r0, #4
 80215ee:	d011      	beq.n	8021614 <system_raise_alarm+0x30>
        system_set_exec_alarm(alarm);
    else if(sys.alarm != alarm) {
 80215f0:	4b1c      	ldr	r3, [pc, #112]	@ (8021664 <system_raise_alarm+0x80>)
 80215f2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80215f6:	42a3      	cmp	r3, r4
 80215f8:	d02e      	beq.n	8021658 <system_raise_alarm+0x74>
        sys.alarm = alarm;
 80215fa:	4b1a      	ldr	r3, [pc, #104]	@ (8021664 <system_raise_alarm+0x80>)
 80215fc:	f883 407c 	strb.w	r4, [r3, #124]	@ 0x7c
        sys.blocking_event = sys.alarm == Alarm_HardLimit ||
 8021600:	1e63      	subs	r3, r4, #1
 8021602:	b2db      	uxtb	r3, r3
                              sys.alarm == Alarm_SoftLimit ||
                               sys.alarm == Alarm_EStop ||
 8021604:	2b01      	cmp	r3, #1
 8021606:	d912      	bls.n	802162e <system_raise_alarm+0x4a>
                              sys.alarm == Alarm_SoftLimit ||
 8021608:	2c0a      	cmp	r4, #10
 802160a:	d026      	beq.n	802165a <system_raise_alarm+0x76>
                               sys.alarm == Alarm_EStop ||
 802160c:	2c11      	cmp	r4, #17
 802160e:	d00c      	beq.n	802162a <system_raise_alarm+0x46>
 8021610:	2200      	movs	r2, #0
 8021612:	e00d      	b.n	8021630 <system_raise_alarm+0x4c>
    if(state_get() == STATE_HOMING && !(sys.rt_exec_state & EXEC_RESET))
 8021614:	4b13      	ldr	r3, [pc, #76]	@ (8021664 <system_raise_alarm+0x80>)
 8021616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8021618:	f013 0f20 	tst.w	r3, #32
 802161c:	d1e8      	bne.n	80215f0 <system_raise_alarm+0xc>
        system_set_exec_alarm(alarm);
 802161e:	4b12      	ldr	r3, [pc, #72]	@ (8021668 <system_raise_alarm+0x84>)
 8021620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021622:	4621      	mov	r1, r4
 8021624:	4811      	ldr	r0, [pc, #68]	@ (802166c <system_raise_alarm+0x88>)
 8021626:	4798      	blx	r3
 8021628:	e016      	b.n	8021658 <system_raise_alarm+0x74>
                               sys.alarm == Alarm_EStop ||
 802162a:	2201      	movs	r2, #1
 802162c:	e000      	b.n	8021630 <system_raise_alarm+0x4c>
 802162e:	2201      	movs	r2, #1
        sys.blocking_event = sys.alarm == Alarm_HardLimit ||
 8021630:	4b0c      	ldr	r3, [pc, #48]	@ (8021664 <system_raise_alarm+0x80>)
 8021632:	715a      	strb	r2, [r3, #5]
                                sys.alarm == Alarm_MotorFault;
        state_set(alarm == Alarm_EStop ? STATE_ESTOP : STATE_ALARM);
 8021634:	2c0a      	cmp	r4, #10
 8021636:	d012      	beq.n	802165e <system_raise_alarm+0x7a>
 8021638:	2001      	movs	r0, #1
 802163a:	f7fd f869 	bl	801e710 <state_set>
        if(sys.driver_started || sys.alarm == Alarm_SelftestFailed)
 802163e:	4b09      	ldr	r3, [pc, #36]	@ (8021664 <system_raise_alarm+0x80>)
 8021640:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8021644:	b923      	cbnz	r3, 8021650 <system_raise_alarm+0x6c>
 8021646:	4b07      	ldr	r3, [pc, #28]	@ (8021664 <system_raise_alarm+0x80>)
 8021648:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802164c:	2b10      	cmp	r3, #16
 802164e:	d103      	bne.n	8021658 <system_raise_alarm+0x74>
            grbl.report.alarm_message(alarm);
 8021650:	4b07      	ldr	r3, [pc, #28]	@ (8021670 <system_raise_alarm+0x8c>)
 8021652:	691b      	ldr	r3, [r3, #16]
 8021654:	4620      	mov	r0, r4
 8021656:	4798      	blx	r3
    }
}
 8021658:	bd10      	pop	{r4, pc}
                               sys.alarm == Alarm_EStop ||
 802165a:	2201      	movs	r2, #1
 802165c:	e7e8      	b.n	8021630 <system_raise_alarm+0x4c>
        state_set(alarm == Alarm_EStop ? STATE_ESTOP : STATE_ALARM);
 802165e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8021662:	e7ea      	b.n	802163a <system_raise_alarm+0x56>
 8021664:	2000148c 	.word	0x2000148c
 8021668:	200011ac 	.word	0x200011ac
 802166c:	200014d8 	.word	0x200014d8
 8021670:	20001394 	.word	0x20001394

08021674 <system_get_rt_report_flags>:
\return a #report_tracking_flags_t union containing the flags.
 */
report_tracking_flags_t system_get_rt_report_flags (void)
{
    return sys.report;
}
 8021674:	4b01      	ldr	r3, [pc, #4]	@ (802167c <system_get_rt_report_flags+0x8>)
 8021676:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8021678:	4770      	bx	lr
 802167a:	bf00      	nop
 802167c:	2000148c 	.word	0x2000148c

08021680 <system_add_rt_report>:

Fires the \ref grbl.on_rt_reports_added event.
\param report a #report_tracking_t enum containing the flag(s) to set or clear.
 */
void system_add_rt_report (report_tracking_t report)
{
 8021680:	b508      	push	{r3, lr}
    switch(report) {
 8021682:	2801      	cmp	r0, #1
 8021684:	d010      	beq.n	80216a8 <system_add_rt_report+0x28>
 8021686:	2808      	cmp	r0, #8
 8021688:	d014      	beq.n	80216b4 <system_add_rt_report+0x34>
 802168a:	b148      	cbz	r0, 80216a0 <system_add_rt_report+0x20>

        default:
            break;
    }

    sys.report.value |= (uint32_t)report;
 802168c:	4a10      	ldr	r2, [pc, #64]	@ (80216d0 <system_add_rt_report+0x50>)
 802168e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8021690:	4303      	orrs	r3, r0
 8021692:	6313      	str	r3, [r2, #48]	@ 0x30

    if(sys.report.value && grbl.on_rt_reports_added)
 8021694:	b13b      	cbz	r3, 80216a6 <system_add_rt_report+0x26>
 8021696:	4b0f      	ldr	r3, [pc, #60]	@ (80216d4 <system_add_rt_report+0x54>)
 8021698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 802169a:	b123      	cbz	r3, 80216a6 <system_add_rt_report+0x26>
        grbl.on_rt_reports_added((report_tracking_flags_t)((uint32_t)report));
 802169c:	4798      	blx	r3
 802169e:	e002      	b.n	80216a6 <system_add_rt_report+0x26>
            sys.report.value = 0;
 80216a0:	4b0b      	ldr	r3, [pc, #44]	@ (80216d0 <system_add_rt_report+0x50>)
 80216a2:	2200      	movs	r2, #0
 80216a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80216a6:	bd08      	pop	{r3, pc}
            if(!hal.driver_cap.mpg_mode)
 80216a8:	4b0b      	ldr	r3, [pc, #44]	@ (80216d8 <system_add_rt_report+0x58>)
 80216aa:	f993 31d9 	ldrsb.w	r3, [r3, #473]	@ 0x1d9
 80216ae:	2b00      	cmp	r3, #0
 80216b0:	dbec      	blt.n	802168c <system_add_rt_report+0xc>
 80216b2:	e7f8      	b.n	80216a6 <system_add_rt_report+0x26>
            sys.report.wco = settings.status_report.work_coord_offset;
 80216b4:	4b09      	ldr	r3, [pc, #36]	@ (80216dc <system_add_rt_report+0x5c>)
 80216b6:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 80216ba:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80216be:	4a04      	ldr	r2, [pc, #16]	@ (80216d0 <system_add_rt_report+0x50>)
 80216c0:	f892 1031 	ldrb.w	r1, [r2, #49]	@ 0x31
 80216c4:	f363 0100 	bfi	r1, r3, #0, #1
 80216c8:	f882 1031 	strb.w	r1, [r2, #49]	@ 0x31
            break;
 80216cc:	e7de      	b.n	802168c <system_add_rt_report+0xc>
 80216ce:	bf00      	nop
 80216d0:	2000148c 	.word	0x2000148c
 80216d4:	20001394 	.word	0x20001394
 80216d8:	200011ac 	.word	0x200011ac
 80216dc:	20001bc4 	.word	0x20001bc4

080216e0 <set_tool_reference>:
{
 80216e0:	b500      	push	{lr}
 80216e2:	b083      	sub	sp, #12
    gc_get_plane_data(&plane, gc_state.modal.plane_select);
 80216e4:	4b12      	ldr	r3, [pc, #72]	@ (8021730 <set_tool_reference+0x50>)
 80216e6:	7999      	ldrb	r1, [r3, #6]
 80216e8:	a801      	add	r0, sp, #4
 80216ea:	f7eb faaf 	bl	800cc4c <gc_get_plane_data>
    if(sys.flags.probe_succeeded) {
 80216ee:	4b11      	ldr	r3, [pc, #68]	@ (8021734 <set_tool_reference+0x54>)
 80216f0:	7d9b      	ldrb	r3, [r3, #22]
 80216f2:	f013 0f02 	tst.w	r3, #2
 80216f6:	d016      	beq.n	8021726 <set_tool_reference+0x46>
        sys.tlo_reference_set.mask |= bit(plane.axis_linear);
 80216f8:	4a0e      	ldr	r2, [pc, #56]	@ (8021734 <set_tool_reference+0x54>)
 80216fa:	79d1      	ldrb	r1, [r2, #7]
 80216fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8021700:	2001      	movs	r0, #1
 8021702:	4098      	lsls	r0, r3
 8021704:	4301      	orrs	r1, r0
 8021706:	71d1      	strb	r1, [r2, #7]
        sys.tlo_reference[plane.axis_linear] = sys.probe_position[plane.axis_linear];
 8021708:	f103 010e 	add.w	r1, r3, #14
 802170c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8021710:	3302      	adds	r3, #2
 8021712:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    system_add_rt_report(Report_TLOReference);
 8021716:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 802171a:	f7ff ffb1 	bl	8021680 <system_add_rt_report>
}
 802171e:	2000      	movs	r0, #0
 8021720:	b003      	add	sp, #12
 8021722:	f85d fb04 	ldr.w	pc, [sp], #4
        sys.tlo_reference_set.mask = 0;
 8021726:	4b03      	ldr	r3, [pc, #12]	@ (8021734 <set_tool_reference+0x54>)
 8021728:	2200      	movs	r2, #0
 802172a:	71da      	strb	r2, [r3, #7]
 802172c:	e7f3      	b.n	8021716 <set_tool_reference+0x36>
 802172e:	bf00      	nop
 8021730:	20000ee4 	.word	0x20000ee4
 8021734:	2000148c 	.word	0x2000148c

08021738 <output_parser_state>:
{
 8021738:	b508      	push	{r3, lr}
    report_gcode_modes();
 802173a:	f7f7 fecf 	bl	80194dc <report_gcode_modes>
    system_add_rt_report(Report_Homed); // Report homed state on next realtime report
 802173e:	2004      	movs	r0, #4
 8021740:	f7ff ff9e 	bl	8021680 <system_add_rt_report>
}
 8021744:	2000      	movs	r0, #0
 8021746:	bd08      	pop	{r3, pc}

08021748 <system_clear_tlo_reference>:
{
 8021748:	b510      	push	{r4, lr}
 802174a:	b082      	sub	sp, #8
 802174c:	4604      	mov	r4, r0
    gc_get_plane_data(&plane, gc_state.modal.plane_select);
 802174e:	4b0f      	ldr	r3, [pc, #60]	@ (802178c <system_clear_tlo_reference+0x44>)
 8021750:	7999      	ldrb	r1, [r3, #6]
 8021752:	a801      	add	r0, sp, #4
 8021754:	f7eb fa7a 	bl	800cc4c <gc_get_plane_data>
    if(homing_cycle.mask & (settings.mode == Mode_Lathe ? (X_AXIS_BIT|Z_AXIS_BIT) : bit(plane.axis_linear))) {
 8021758:	b2e4      	uxtb	r4, r4
 802175a:	4b0d      	ldr	r3, [pc, #52]	@ (8021790 <system_clear_tlo_reference+0x48>)
 802175c:	7e1b      	ldrb	r3, [r3, #24]
 802175e:	2b02      	cmp	r3, #2
 8021760:	d00a      	beq.n	8021778 <system_clear_tlo_reference+0x30>
 8021762:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8021766:	2301      	movs	r3, #1
 8021768:	4093      	lsls	r3, r2
 802176a:	421c      	tst	r4, r3
 802176c:	d002      	beq.n	8021774 <system_clear_tlo_reference+0x2c>
        if(sys.tlo_reference_set.mask != 0) {
 802176e:	4b09      	ldr	r3, [pc, #36]	@ (8021794 <system_clear_tlo_reference+0x4c>)
 8021770:	79db      	ldrb	r3, [r3, #7]
 8021772:	b91b      	cbnz	r3, 802177c <system_clear_tlo_reference+0x34>
}
 8021774:	b002      	add	sp, #8
 8021776:	bd10      	pop	{r4, pc}
    if(homing_cycle.mask & (settings.mode == Mode_Lathe ? (X_AXIS_BIT|Z_AXIS_BIT) : bit(plane.axis_linear))) {
 8021778:	2305      	movs	r3, #5
 802177a:	e7f6      	b.n	802176a <system_clear_tlo_reference+0x22>
            sys.tlo_reference_set.mask = 0;  // Invalidate tool length offset reference
 802177c:	4b05      	ldr	r3, [pc, #20]	@ (8021794 <system_clear_tlo_reference+0x4c>)
 802177e:	2200      	movs	r2, #0
 8021780:	71da      	strb	r2, [r3, #7]
            system_add_rt_report(Report_TLOReference);
 8021782:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8021786:	f7ff ff7b 	bl	8021680 <system_add_rt_report>
}
 802178a:	e7f3      	b.n	8021774 <system_clear_tlo_reference+0x2c>
 802178c:	20000ee4 	.word	0x20000ee4
 8021790:	20001bc4 	.word	0x20001bc4
 8021794:	2000148c 	.word	0x2000148c

08021798 <system_flag_wco_change>:
{
 8021798:	b508      	push	{r3, lr}
    if(settings.status_report.sync_on_wco_change)
 802179a:	4b09      	ldr	r3, [pc, #36]	@ (80217c0 <system_flag_wco_change+0x28>)
 802179c:	f893 30fd 	ldrb.w	r3, [r3, #253]	@ 0xfd
 80217a0:	f013 0f01 	tst.w	r3, #1
 80217a4:	d108      	bne.n	80217b8 <system_flag_wco_change+0x20>
    if(grbl.on_wco_changed)
 80217a6:	4b07      	ldr	r3, [pc, #28]	@ (80217c4 <system_flag_wco_change+0x2c>)
 80217a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80217aa:	b103      	cbz	r3, 80217ae <system_flag_wco_change+0x16>
        grbl.on_wco_changed();
 80217ac:	4798      	blx	r3
    system_add_rt_report(Report_WCO);
 80217ae:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80217b2:	f7ff ff65 	bl	8021680 <system_add_rt_report>
}
 80217b6:	bd08      	pop	{r3, pc}
        protocol_buffer_synchronize();
 80217b8:	f7f5 ff0a 	bl	80175d0 <protocol_buffer_synchronize>
 80217bc:	e7f3      	b.n	80217a6 <system_flag_wco_change+0xe>
 80217be:	bf00      	nop
 80217c0:	20001bc4 	.word	0x20001bc4
 80217c4:	20001394 	.word	0x20001394

080217c8 <change_completed>:
//    else error?
}

// Restore HAL pointers on completion or reset.
static void change_completed (void)
{
 80217c8:	b538      	push	{r3, r4, r5, lr}
    if(enqueue_realtime_command) {
 80217ca:	4b1c      	ldr	r3, [pc, #112]	@ (802183c <change_completed+0x74>)
 80217cc:	681b      	ldr	r3, [r3, #0]
 80217ce:	b17b      	cbz	r3, 80217f0 <change_completed+0x28>
        while(spin_lock);
 80217d0:	4b1b      	ldr	r3, [pc, #108]	@ (8021840 <change_completed+0x78>)
 80217d2:	681b      	ldr	r3, [r3, #0]
 80217d4:	2b00      	cmp	r3, #0
 80217d6:	d1fb      	bne.n	80217d0 <change_completed+0x8>
        hal.irq_disable();
 80217d8:	4c1a      	ldr	r4, [pc, #104]	@ (8021844 <change_completed+0x7c>)
 80217da:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80217dc:	4798      	blx	r3
        hal.stream.set_enqueue_rt_handler(enqueue_realtime_command);
 80217de:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 80217e2:	4d16      	ldr	r5, [pc, #88]	@ (802183c <change_completed+0x74>)
 80217e4:	6828      	ldr	r0, [r5, #0]
 80217e6:	4798      	blx	r3
        enqueue_realtime_command = NULL;
 80217e8:	2300      	movs	r3, #0
 80217ea:	602b      	str	r3, [r5, #0]
        hal.irq_enable();
 80217ec:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80217ee:	4798      	blx	r3
    }

    if(control_interrupt_callback) {
 80217f0:	4b15      	ldr	r3, [pc, #84]	@ (8021848 <change_completed+0x80>)
 80217f2:	681b      	ldr	r3, [r3, #0]
 80217f4:	b16b      	cbz	r3, 8021812 <change_completed+0x4a>
        while(spin_lock);
 80217f6:	4b12      	ldr	r3, [pc, #72]	@ (8021840 <change_completed+0x78>)
 80217f8:	681b      	ldr	r3, [r3, #0]
 80217fa:	2b00      	cmp	r3, #0
 80217fc:	d1fb      	bne.n	80217f6 <change_completed+0x2e>
        hal.irq_disable();
 80217fe:	4c11      	ldr	r4, [pc, #68]	@ (8021844 <change_completed+0x7c>)
 8021800:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8021802:	4798      	blx	r3
        hal.control.interrupt_callback = control_interrupt_callback;
 8021804:	4b10      	ldr	r3, [pc, #64]	@ (8021848 <change_completed+0x80>)
 8021806:	681a      	ldr	r2, [r3, #0]
 8021808:	66e2      	str	r2, [r4, #108]	@ 0x6c
        control_interrupt_callback = NULL;
 802180a:	2200      	movs	r2, #0
 802180c:	601a      	str	r2, [r3, #0]
        hal.irq_enable();
 802180e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8021810:	4798      	blx	r3
    }

    if(probe_toolsetter)
 8021812:	4b0e      	ldr	r3, [pc, #56]	@ (802184c <change_completed+0x84>)
 8021814:	781b      	ldrb	r3, [r3, #0]
 8021816:	b13b      	cbz	r3, 8021828 <change_completed+0x60>
        grbl.on_probe_toolsetter(&current_tool, NULL, true, false);
 8021818:	4b0d      	ldr	r3, [pc, #52]	@ (8021850 <change_completed+0x88>)
 802181a:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 802181e:	2300      	movs	r3, #0
 8021820:	2201      	movs	r2, #1
 8021822:	4619      	mov	r1, r3
 8021824:	480b      	ldr	r0, [pc, #44]	@ (8021854 <change_completed+0x8c>)
 8021826:	47a0      	blx	r4

    grbl.on_probe_completed = NULL;
 8021828:	2300      	movs	r3, #0
 802182a:	4a09      	ldr	r2, [pc, #36]	@ (8021850 <change_completed+0x88>)
 802182c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    gc_state.tool_change = probe_toolsetter = false;
 8021830:	4a06      	ldr	r2, [pc, #24]	@ (802184c <change_completed+0x84>)
 8021832:	7013      	strb	r3, [r2, #0]
 8021834:	4a08      	ldr	r2, [pc, #32]	@ (8021858 <change_completed+0x90>)
 8021836:	f882 307f 	strb.w	r3, [r2, #127]	@ 0x7f
}
 802183a:	bd38      	pop	{r3, r4, r5, pc}
 802183c:	200027a0 	.word	0x200027a0
 8021840:	200027e0 	.word	0x200027e0
 8021844:	200011ac 	.word	0x200011ac
 8021848:	2000279c 	.word	0x2000279c
 802184c:	200027e5 	.word	0x200027e5
 8021850:	20001394 	.word	0x20001394
 8021854:	200027c8 	.word	0x200027c8
 8021858:	20000ee4 	.word	0x20000ee4

0802185c <execute_warning>:
}

// Issue warning on cycle start event if touch off by $TPW is pending.
// Used in Manual and Manual_G59_3 modes ($341=1 or $341=2). Called from the foreground process.
static void execute_warning (void *data)
{
 802185c:	b508      	push	{r3, lr}
    grbl.report.feedback_message(Message_ExecuteTPW);
 802185e:	4b02      	ldr	r3, [pc, #8]	@ (8021868 <execute_warning+0xc>)
 8021860:	68db      	ldr	r3, [r3, #12]
 8021862:	2014      	movs	r0, #20
 8021864:	4798      	blx	r3
}
 8021866:	bd08      	pop	{r3, pc}
 8021868:	20001394 	.word	0x20001394

0802186c <on_toolchange_ack>:
    return drop;
}

// Trap cycle start command and control signal when tool change is acknowledged by sender.
ISR_CODE static void ISR_FUNC(on_toolchange_ack)(void)
{
 802186c:	b508      	push	{r3, lr}
    control_interrupt_callback = hal.control.interrupt_callback;
 802186e:	4b06      	ldr	r3, [pc, #24]	@ (8021888 <on_toolchange_ack+0x1c>)
 8021870:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8021872:	4a06      	ldr	r2, [pc, #24]	@ (802188c <on_toolchange_ack+0x20>)
 8021874:	6011      	str	r1, [r2, #0]
    hal.control.interrupt_callback = trap_control_cycle_start;
 8021876:	4a06      	ldr	r2, [pc, #24]	@ (8021890 <on_toolchange_ack+0x24>)
 8021878:	66da      	str	r2, [r3, #108]	@ 0x6c
    enqueue_realtime_command = hal.stream.set_enqueue_rt_handler(trap_stream_cycle_start);
 802187a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 802187e:	4805      	ldr	r0, [pc, #20]	@ (8021894 <on_toolchange_ack+0x28>)
 8021880:	4798      	blx	r3
 8021882:	4b05      	ldr	r3, [pc, #20]	@ (8021898 <on_toolchange_ack+0x2c>)
 8021884:	6018      	str	r0, [r3, #0]

}
 8021886:	bd08      	pop	{r3, pc}
 8021888:	200011ac 	.word	0x200011ac
 802188c:	2000279c 	.word	0x2000279c
 8021890:	08021a31 	.word	0x08021a31
 8021894:	080219b1 	.word	0x080219b1
 8021898:	200027a0 	.word	0x200027a0

0802189c <on_probe_completed>:
{
 802189c:	b508      	push	{r3, lr}
    if(!sys.flags.probe_succeeded)
 802189e:	4b0f      	ldr	r3, [pc, #60]	@ (80218dc <on_probe_completed+0x40>)
 80218a0:	7d9b      	ldrb	r3, [r3, #22]
 80218a2:	f013 0f02 	tst.w	r3, #2
 80218a6:	d104      	bne.n	80218b2 <on_probe_completed+0x16>
        grbl.report.feedback_message(Message_ProbeFailedRetry);
 80218a8:	4b0d      	ldr	r3, [pc, #52]	@ (80218e0 <on_probe_completed+0x44>)
 80218aa:	68db      	ldr	r3, [r3, #12]
 80218ac:	2013      	movs	r0, #19
 80218ae:	4798      	blx	r3
}
 80218b0:	bd08      	pop	{r3, pc}
    else if(sys.tlo_reference_set.mask & bit(plane.axis_linear))
 80218b2:	4b0a      	ldr	r3, [pc, #40]	@ (80218dc <on_probe_completed+0x40>)
 80218b4:	79db      	ldrb	r3, [r3, #7]
 80218b6:	4a0b      	ldr	r2, [pc, #44]	@ (80218e4 <on_probe_completed+0x48>)
 80218b8:	7891      	ldrb	r1, [r2, #2]
 80218ba:	40cb      	lsrs	r3, r1
 80218bc:	f013 0f01 	tst.w	r3, #1
 80218c0:	d0f6      	beq.n	80218b0 <on_probe_completed+0x14>
        gc_set_tool_offset(ToolLengthOffset_EnableDynamic, plane.axis_linear, sys.probe_position[plane.axis_linear] - sys.tlo_reference[plane.axis_linear]);
 80218c2:	4b06      	ldr	r3, [pc, #24]	@ (80218dc <on_probe_completed+0x40>)
 80218c4:	f101 020e 	add.w	r2, r1, #14
 80218c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80218cc:	1c88      	adds	r0, r1, #2
 80218ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80218d2:	1ad2      	subs	r2, r2, r3
 80218d4:	2002      	movs	r0, #2
 80218d6:	f7eb f953 	bl	800cb80 <gc_set_tool_offset>
}
 80218da:	e7e9      	b.n	80218b0 <on_probe_completed+0x14>
 80218dc:	2000148c 	.word	0x2000148c
 80218e0:	20001394 	.word	0x20001394
 80218e4:	200027c0 	.word	0x200027c0

080218e8 <reset>:
{
 80218e8:	b538      	push	{r3, r4, r5, lr}
    if(next_tool) { //TODO: move to gc_xxx() function?
 80218ea:	4b18      	ldr	r3, [pc, #96]	@ (802194c <reset+0x64>)
 80218ec:	681c      	ldr	r4, [r3, #0]
 80218ee:	b1ec      	cbz	r4, 802192c <reset+0x44>
        if(current_tool.tool_id != next_tool->tool_id) {
 80218f0:	4b17      	ldr	r3, [pc, #92]	@ (8021950 <reset+0x68>)
 80218f2:	691a      	ldr	r2, [r3, #16]
 80218f4:	6923      	ldr	r3, [r4, #16]
 80218f6:	429a      	cmp	r2, r3
 80218f8:	d010      	beq.n	802191c <reset+0x34>
            if(grbl.tool_table.n_tools)
 80218fa:	4b16      	ldr	r3, [pc, #88]	@ (8021954 <reset+0x6c>)
 80218fc:	699b      	ldr	r3, [r3, #24]
 80218fe:	b1db      	cbz	r3, 8021938 <reset+0x50>
                memcpy(gc_state.tool, &current_tool, sizeof(tool_data_t));
 8021900:	4b15      	ldr	r3, [pc, #84]	@ (8021958 <reset+0x70>)
 8021902:	f8d3 50d0 	ldr.w	r5, [r3, #208]	@ 0xd0
 8021906:	4c12      	ldr	r4, [pc, #72]	@ (8021950 <reset+0x68>)
 8021908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802190a:	6028      	str	r0, [r5, #0]
 802190c:	6069      	str	r1, [r5, #4]
 802190e:	60aa      	str	r2, [r5, #8]
 8021910:	60eb      	str	r3, [r5, #12]
 8021912:	6820      	ldr	r0, [r4, #0]
 8021914:	6128      	str	r0, [r5, #16]
            system_add_rt_report(Report_Tool);
 8021916:	2080      	movs	r0, #128	@ 0x80
 8021918:	f7ff feb2 	bl	8021680 <system_add_rt_report>
        gc_state.tool_pending = gc_state.tool->tool_id;
 802191c:	4b0e      	ldr	r3, [pc, #56]	@ (8021958 <reset+0x70>)
 802191e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8021922:	6912      	ldr	r2, [r2, #16]
 8021924:	679a      	str	r2, [r3, #120]	@ 0x78
        next_tool = NULL;
 8021926:	4b09      	ldr	r3, [pc, #36]	@ (802194c <reset+0x64>)
 8021928:	2200      	movs	r2, #0
 802192a:	601a      	str	r2, [r3, #0]
    change_completed();
 802192c:	f7ff ff4c 	bl	80217c8 <change_completed>
    driver_reset();
 8021930:	4b0a      	ldr	r3, [pc, #40]	@ (802195c <reset+0x74>)
 8021932:	681b      	ldr	r3, [r3, #0]
 8021934:	4798      	blx	r3
}
 8021936:	bd38      	pop	{r3, r4, r5, pc}
                memcpy(next_tool, &current_tool, sizeof(tool_data_t));
 8021938:	4d05      	ldr	r5, [pc, #20]	@ (8021950 <reset+0x68>)
 802193a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802193c:	6020      	str	r0, [r4, #0]
 802193e:	6061      	str	r1, [r4, #4]
 8021940:	60a2      	str	r2, [r4, #8]
 8021942:	60e3      	str	r3, [r4, #12]
 8021944:	6828      	ldr	r0, [r5, #0]
 8021946:	6120      	str	r0, [r4, #16]
 8021948:	e7e5      	b.n	8021916 <reset+0x2e>
 802194a:	bf00      	nop
 802194c:	200027c4 	.word	0x200027c4
 8021950:	200027c8 	.word	0x200027c8
 8021954:	20001394 	.word	0x20001394
 8021958:	20000ee4 	.word	0x20000ee4
 802195c:	200027a4 	.word	0x200027a4

08021960 <tool_select>:

// Set next and/or current tool. Called by gcode.c on on a Tn or M61 command (via HAL).
static void tool_select (tool_data_t *tool, bool next)
{
    next_tool = tool;
 8021960:	4b07      	ldr	r3, [pc, #28]	@ (8021980 <tool_select+0x20>)
 8021962:	6018      	str	r0, [r3, #0]
    if(!next)
 8021964:	b101      	cbz	r1, 8021968 <tool_select+0x8>
 8021966:	4770      	bx	lr
{
 8021968:	b430      	push	{r4, r5}
 802196a:	4604      	mov	r4, r0
        memcpy(&current_tool, tool, sizeof(tool_data_t));
 802196c:	4d05      	ldr	r5, [pc, #20]	@ (8021984 <tool_select+0x24>)
 802196e:	6800      	ldr	r0, [r0, #0]
 8021970:	6861      	ldr	r1, [r4, #4]
 8021972:	68a2      	ldr	r2, [r4, #8]
 8021974:	68e3      	ldr	r3, [r4, #12]
 8021976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021978:	6920      	ldr	r0, [r4, #16]
 802197a:	6028      	str	r0, [r5, #0]
}
 802197c:	bc30      	pop	{r4, r5}
 802197e:	4770      	bx	lr
 8021980:	200027c4 	.word	0x200027c4
 8021984:	200027c8 	.word	0x200027c8

08021988 <tc_on_homing_complete>:
{
 8021988:	b510      	push	{r4, lr}
 802198a:	4604      	mov	r4, r0
    if(on_homing_completed)
 802198c:	4b06      	ldr	r3, [pc, #24]	@ (80219a8 <tc_on_homing_complete+0x20>)
 802198e:	681b      	ldr	r3, [r3, #0]
 8021990:	b103      	cbz	r3, 8021994 <tc_on_homing_complete+0xc>
        on_homing_completed(homing_cycle, success);
 8021992:	4798      	blx	r3
    if(settings.tool_change.mode != ToolChange_Disabled)
 8021994:	4b05      	ldr	r3, [pc, #20]	@ (80219ac <tc_on_homing_complete+0x24>)
 8021996:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 802199a:	b903      	cbnz	r3, 802199e <tc_on_homing_complete+0x16>
}
 802199c:	bd10      	pop	{r4, pc}
        system_clear_tlo_reference(homing_cycle);
 802199e:	4620      	mov	r0, r4
 80219a0:	f7ff fed2 	bl	8021748 <system_clear_tlo_reference>
}
 80219a4:	e7fa      	b.n	802199c <tc_on_homing_complete+0x14>
 80219a6:	bf00      	nop
 80219a8:	20002798 	.word	0x20002798
 80219ac:	20001bc4 	.word	0x20001bc4

080219b0 <trap_stream_cycle_start>:
{
 80219b0:	b510      	push	{r4, lr}
    spin_lock++;
 80219b2:	4a17      	ldr	r2, [pc, #92]	@ (8021a10 <trap_stream_cycle_start+0x60>)
 80219b4:	6813      	ldr	r3, [r2, #0]
 80219b6:	3301      	adds	r3, #1
 80219b8:	6013      	str	r3, [r2, #0]
    if((drop = (c == CMD_CYCLE_START || c == CMD_CYCLE_START_LEGACY))) {
 80219ba:	2881      	cmp	r0, #129	@ 0x81
 80219bc:	d00b      	beq.n	80219d6 <trap_stream_cycle_start+0x26>
 80219be:	287e      	cmp	r0, #126	@ 0x7e
 80219c0:	d009      	beq.n	80219d6 <trap_stream_cycle_start+0x26>
        drop = enqueue_realtime_command(c);
 80219c2:	4b14      	ldr	r3, [pc, #80]	@ (8021a14 <trap_stream_cycle_start+0x64>)
 80219c4:	681b      	ldr	r3, [r3, #0]
 80219c6:	4798      	blx	r3
 80219c8:	4604      	mov	r4, r0
    spin_lock--;
 80219ca:	4a11      	ldr	r2, [pc, #68]	@ (8021a10 <trap_stream_cycle_start+0x60>)
 80219cc:	6813      	ldr	r3, [r2, #0]
 80219ce:	3b01      	subs	r3, #1
 80219d0:	6013      	str	r3, [r2, #0]
}
 80219d2:	4620      	mov	r0, r4
 80219d4:	bd10      	pop	{r4, pc}
        if(!execute_posted) {
 80219d6:	4b10      	ldr	r3, [pc, #64]	@ (8021a18 <trap_stream_cycle_start+0x68>)
 80219d8:	781b      	ldrb	r3, [r3, #0]
 80219da:	f003 04ff 	and.w	r4, r3, #255	@ 0xff
 80219de:	2b00      	cmp	r3, #0
 80219e0:	d1f3      	bne.n	80219ca <trap_stream_cycle_start+0x1a>
            if(!block_cycle_start)
 80219e2:	4b0e      	ldr	r3, [pc, #56]	@ (8021a1c <trap_stream_cycle_start+0x6c>)
 80219e4:	781c      	ldrb	r4, [r3, #0]
 80219e6:	b974      	cbnz	r4, 8021a06 <trap_stream_cycle_start+0x56>
                execute_posted = protocol_enqueue_foreground_task(settings.tool_change.mode == ToolChange_SemiAutomatic ? execute_probe : execute_restore, NULL);
 80219e8:	4b0d      	ldr	r3, [pc, #52]	@ (8021a20 <trap_stream_cycle_start+0x70>)
 80219ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80219ee:	2b03      	cmp	r3, #3
 80219f0:	d007      	beq.n	8021a02 <trap_stream_cycle_start+0x52>
 80219f2:	480c      	ldr	r0, [pc, #48]	@ (8021a24 <trap_stream_cycle_start+0x74>)
 80219f4:	2100      	movs	r1, #0
 80219f6:	f7f5 fe09 	bl	801760c <protocol_enqueue_foreground_task>
 80219fa:	4b07      	ldr	r3, [pc, #28]	@ (8021a18 <trap_stream_cycle_start+0x68>)
 80219fc:	7018      	strb	r0, [r3, #0]
 80219fe:	2401      	movs	r4, #1
 8021a00:	e7e3      	b.n	80219ca <trap_stream_cycle_start+0x1a>
 8021a02:	4809      	ldr	r0, [pc, #36]	@ (8021a28 <trap_stream_cycle_start+0x78>)
 8021a04:	e7f6      	b.n	80219f4 <trap_stream_cycle_start+0x44>
                protocol_enqueue_foreground_task(execute_warning, NULL);
 8021a06:	2100      	movs	r1, #0
 8021a08:	4808      	ldr	r0, [pc, #32]	@ (8021a2c <trap_stream_cycle_start+0x7c>)
 8021a0a:	f7f5 fdff 	bl	801760c <protocol_enqueue_foreground_task>
 8021a0e:	e7dc      	b.n	80219ca <trap_stream_cycle_start+0x1a>
 8021a10:	200027e0 	.word	0x200027e0
 8021a14:	200027a0 	.word	0x200027a0
 8021a18:	200027e4 	.word	0x200027e4
 8021a1c:	200027e6 	.word	0x200027e6
 8021a20:	20001bc4 	.word	0x20001bc4
 8021a24:	08021bcd 	.word	0x08021bcd
 8021a28:	08021c0d 	.word	0x08021c0d
 8021a2c:	0802185d 	.word	0x0802185d

08021a30 <trap_control_cycle_start>:
{
 8021a30:	b508      	push	{r3, lr}
    spin_lock++;
 8021a32:	4a14      	ldr	r2, [pc, #80]	@ (8021a84 <trap_control_cycle_start+0x54>)
 8021a34:	6813      	ldr	r3, [r2, #0]
 8021a36:	3301      	adds	r3, #1
 8021a38:	6013      	str	r3, [r2, #0]
    if(signals.cycle_start) {
 8021a3a:	f010 0f04 	tst.w	r0, #4
 8021a3e:	d018      	beq.n	8021a72 <trap_control_cycle_start+0x42>
        if(!execute_posted) {
 8021a40:	4b11      	ldr	r3, [pc, #68]	@ (8021a88 <trap_control_cycle_start+0x58>)
 8021a42:	781b      	ldrb	r3, [r3, #0]
 8021a44:	b9c3      	cbnz	r3, 8021a78 <trap_control_cycle_start+0x48>
            if(!block_cycle_start)
 8021a46:	4b11      	ldr	r3, [pc, #68]	@ (8021a8c <trap_control_cycle_start+0x5c>)
 8021a48:	781b      	ldrb	r3, [r3, #0]
 8021a4a:	b96b      	cbnz	r3, 8021a68 <trap_control_cycle_start+0x38>
                execute_posted = protocol_enqueue_foreground_task(settings.tool_change.mode == ToolChange_SemiAutomatic ? execute_probe : execute_restore, NULL);
 8021a4c:	4b10      	ldr	r3, [pc, #64]	@ (8021a90 <trap_control_cycle_start+0x60>)
 8021a4e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021a52:	2b03      	cmp	r3, #3
 8021a54:	d006      	beq.n	8021a64 <trap_control_cycle_start+0x34>
 8021a56:	480f      	ldr	r0, [pc, #60]	@ (8021a94 <trap_control_cycle_start+0x64>)
 8021a58:	2100      	movs	r1, #0
 8021a5a:	f7f5 fdd7 	bl	801760c <protocol_enqueue_foreground_task>
 8021a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8021a88 <trap_control_cycle_start+0x58>)
 8021a60:	7018      	strb	r0, [r3, #0]
 8021a62:	e009      	b.n	8021a78 <trap_control_cycle_start+0x48>
 8021a64:	480c      	ldr	r0, [pc, #48]	@ (8021a98 <trap_control_cycle_start+0x68>)
 8021a66:	e7f7      	b.n	8021a58 <trap_control_cycle_start+0x28>
                protocol_enqueue_foreground_task(execute_warning, NULL);
 8021a68:	2100      	movs	r1, #0
 8021a6a:	480c      	ldr	r0, [pc, #48]	@ (8021a9c <trap_control_cycle_start+0x6c>)
 8021a6c:	f7f5 fdce 	bl	801760c <protocol_enqueue_foreground_task>
        signals.cycle_start = Off;
 8021a70:	e002      	b.n	8021a78 <trap_control_cycle_start+0x48>
        control_interrupt_callback(signals);
 8021a72:	4b0b      	ldr	r3, [pc, #44]	@ (8021aa0 <trap_control_cycle_start+0x70>)
 8021a74:	681b      	ldr	r3, [r3, #0]
 8021a76:	4798      	blx	r3
    spin_lock--;
 8021a78:	4a02      	ldr	r2, [pc, #8]	@ (8021a84 <trap_control_cycle_start+0x54>)
 8021a7a:	6813      	ldr	r3, [r2, #0]
 8021a7c:	3b01      	subs	r3, #1
 8021a7e:	6013      	str	r3, [r2, #0]
}
 8021a80:	bd08      	pop	{r3, pc}
 8021a82:	bf00      	nop
 8021a84:	200027e0 	.word	0x200027e0
 8021a88:	200027e4 	.word	0x200027e4
 8021a8c:	200027e6 	.word	0x200027e6
 8021a90:	20001bc4 	.word	0x20001bc4
 8021a94:	08021bcd 	.word	0x08021bcd
 8021a98:	08021c0d 	.word	0x08021c0d
 8021a9c:	0802185d 	.word	0x0802185d
 8021aa0:	2000279c 	.word	0x2000279c

08021aa4 <restore>:
{
 8021aa4:	b530      	push	{r4, r5, lr}
 8021aa6:	b08b      	sub	sp, #44	@ 0x2c
    plan_data_init(&plan_data);
 8021aa8:	4668      	mov	r0, sp
 8021aaa:	f7f4 fdf7 	bl	801669c <plan_data_init>
    plan_data.condition.rapid_motion = On;
 8021aae:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8021ab2:	f043 0301 	orr.w	r3, r3, #1
 8021ab6:	f88d 3014 	strb.w	r3, [sp, #20]
    target.values[plane.axis_linear] = tool_change_position;
 8021aba:	4b3a      	ldr	r3, [pc, #232]	@ (8021ba4 <restore+0x100>)
 8021abc:	789b      	ldrb	r3, [r3, #2]
 8021abe:	483a      	ldr	r0, [pc, #232]	@ (8021ba8 <restore+0x104>)
 8021ac0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021ac4:	4a39      	ldr	r2, [pc, #228]	@ (8021bac <restore+0x108>)
 8021ac6:	6812      	ldr	r2, [r2, #0]
 8021ac8:	601a      	str	r2, [r3, #0]
    mc_line(target.values, &plan_data);
 8021aca:	4669      	mov	r1, sp
 8021acc:	f7f1 fc80 	bl	80133d0 <mc_line>
    if(!settings.flags.no_restore_position_after_M6) {
 8021ad0:	4b37      	ldr	r3, [pc, #220]	@ (8021bb0 <restore+0x10c>)
 8021ad2:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 8021ad6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8021ada:	d010      	beq.n	8021afe <restore+0x5a>
    if(protocol_buffer_synchronize()) {
 8021adc:	f7f5 fd78 	bl	80175d0 <protocol_buffer_synchronize>
 8021ae0:	b9f0      	cbnz	r0, 8021b20 <restore+0x7c>
    if(protocol_buffer_synchronize()) {
 8021ae2:	f7f5 fd75 	bl	80175d0 <protocol_buffer_synchronize>
 8021ae6:	2800      	cmp	r0, #0
 8021ae8:	d145      	bne.n	8021b76 <restore+0xd2>
    return !ABORTED;
 8021aea:	4b32      	ldr	r3, [pc, #200]	@ (8021bb4 <restore+0x110>)
 8021aec:	781b      	ldrb	r3, [r3, #0]
 8021aee:	2b00      	cmp	r3, #0
 8021af0:	d152      	bne.n	8021b98 <restore+0xf4>
 8021af2:	4b30      	ldr	r3, [pc, #192]	@ (8021bb4 <restore+0x110>)
 8021af4:	785b      	ldrb	r3, [r3, #1]
 8021af6:	2b00      	cmp	r3, #0
 8021af8:	d051      	beq.n	8021b9e <restore+0xfa>
 8021afa:	2000      	movs	r0, #0
 8021afc:	e04d      	b.n	8021b9a <restore+0xf6>
        memcpy(&target, &previous, sizeof(coord_data_t));
 8021afe:	4b2a      	ldr	r3, [pc, #168]	@ (8021ba8 <restore+0x104>)
 8021b00:	4a2d      	ldr	r2, [pc, #180]	@ (8021bb8 <restore+0x114>)
 8021b02:	ca07      	ldmia	r2, {r0, r1, r2}
 8021b04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        target.values[plane.axis_linear] = tool_change_position;
 8021b08:	4a26      	ldr	r2, [pc, #152]	@ (8021ba4 <restore+0x100>)
 8021b0a:	7892      	ldrb	r2, [r2, #2]
 8021b0c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8021b10:	4926      	ldr	r1, [pc, #152]	@ (8021bac <restore+0x108>)
 8021b12:	6809      	ldr	r1, [r1, #0]
 8021b14:	6011      	str	r1, [r2, #0]
        mc_line(target.values, &plan_data);
 8021b16:	4669      	mov	r1, sp
 8021b18:	4618      	mov	r0, r3
 8021b1a:	f7f1 fc59 	bl	80133d0 <mc_line>
 8021b1e:	e7dd      	b.n	8021adc <restore+0x38>
        sync_position();
 8021b20:	f7f4 fd46 	bl	80165b0 <plan_sync_position>
 8021b24:	4c25      	ldr	r4, [pc, #148]	@ (8021bbc <restore+0x118>)
 8021b26:	4926      	ldr	r1, [pc, #152]	@ (8021bc0 <restore+0x11c>)
 8021b28:	4620      	mov	r0, r4
 8021b2a:	f7ff fd05 	bl	8021538 <system_convert_array_steps_to_mpos>
        coolant_sync(gc_state.modal.coolant);
 8021b2e:	f814 0c4f 	ldrb.w	r0, [r4, #-79]
 8021b32:	f7ea fdfb 	bl	800c72c <coolant_sync>
        spindle_restore(plan_data.spindle.hal, gc_state.modal.spindle.state, gc_state.spindle.rpm);
 8021b36:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8021b3a:	f814 1c4e 	ldrb.w	r1, [r4, #-78]
 8021b3e:	9804      	ldr	r0, [sp, #16]
 8021b40:	f7fc fa4e 	bl	801dfe0 <spindle_restore>
        if(!settings.flags.no_restore_position_after_M6) {
 8021b44:	4b1a      	ldr	r3, [pc, #104]	@ (8021bb0 <restore+0x10c>)
 8021b46:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 8021b4a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8021b4e:	d1c8      	bne.n	8021ae2 <restore+0x3e>
            previous.values[plane.axis_linear] += gc_get_offset(plane.axis_linear, false);
 8021b50:	4c14      	ldr	r4, [pc, #80]	@ (8021ba4 <restore+0x100>)
 8021b52:	2100      	movs	r1, #0
 8021b54:	78a0      	ldrb	r0, [r4, #2]
 8021b56:	f7ea ffd3 	bl	800cb00 <gc_get_offset>
 8021b5a:	78a3      	ldrb	r3, [r4, #2]
 8021b5c:	4816      	ldr	r0, [pc, #88]	@ (8021bb8 <restore+0x114>)
 8021b5e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021b62:	edd3 7a00 	vldr	s15, [r3]
 8021b66:	ee77 7a80 	vadd.f32	s15, s15, s0
 8021b6a:	edc3 7a00 	vstr	s15, [r3]
            mc_line(previous.values, &plan_data);
 8021b6e:	4669      	mov	r1, sp
 8021b70:	f7f1 fc2e 	bl	80133d0 <mc_line>
 8021b74:	e7b5      	b.n	8021ae2 <restore+0x3e>
        sync_position();
 8021b76:	f7f4 fd1b 	bl	80165b0 <plan_sync_position>
 8021b7a:	4911      	ldr	r1, [pc, #68]	@ (8021bc0 <restore+0x11c>)
 8021b7c:	480f      	ldr	r0, [pc, #60]	@ (8021bbc <restore+0x118>)
 8021b7e:	f7ff fcdb 	bl	8021538 <system_convert_array_steps_to_mpos>
        memcpy(&current_tool, next_tool, sizeof(tool_data_t));
 8021b82:	4b10      	ldr	r3, [pc, #64]	@ (8021bc4 <restore+0x120>)
 8021b84:	681d      	ldr	r5, [r3, #0]
 8021b86:	4c10      	ldr	r4, [pc, #64]	@ (8021bc8 <restore+0x124>)
 8021b88:	6828      	ldr	r0, [r5, #0]
 8021b8a:	6869      	ldr	r1, [r5, #4]
 8021b8c:	68aa      	ldr	r2, [r5, #8]
 8021b8e:	68eb      	ldr	r3, [r5, #12]
 8021b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021b92:	6928      	ldr	r0, [r5, #16]
 8021b94:	6020      	str	r0, [r4, #0]
 8021b96:	e7a8      	b.n	8021aea <restore+0x46>
    return !ABORTED;
 8021b98:	2000      	movs	r0, #0
}
 8021b9a:	b00b      	add	sp, #44	@ 0x2c
 8021b9c:	bd30      	pop	{r4, r5, pc}
    return !ABORTED;
 8021b9e:	2001      	movs	r0, #1
 8021ba0:	e7fb      	b.n	8021b9a <restore+0xf6>
 8021ba2:	bf00      	nop
 8021ba4:	200027c0 	.word	0x200027c0
 8021ba8:	200027b4 	.word	0x200027b4
 8021bac:	200027dc 	.word	0x200027dc
 8021bb0:	20001bc4 	.word	0x20001bc4
 8021bb4:	2000148c 	.word	0x2000148c
 8021bb8:	200027a8 	.word	0x200027a8
 8021bbc:	20000f4c 	.word	0x20000f4c
 8021bc0:	20001514 	.word	0x20001514
 8021bc4:	200027c4 	.word	0x200027c4
 8021bc8:	200027c8 	.word	0x200027c8

08021bcc <execute_restore>:
{
 8021bcc:	b510      	push	{r4, lr}
    system_convert_array_steps_to_mpos(target.values, sys.position);
 8021bce:	490a      	ldr	r1, [pc, #40]	@ (8021bf8 <execute_restore+0x2c>)
 8021bd0:	480a      	ldr	r0, [pc, #40]	@ (8021bfc <execute_restore+0x30>)
 8021bd2:	f7ff fcb1 	bl	8021538 <system_convert_array_steps_to_mpos>
    bool ok = restore();
 8021bd6:	f7ff ff65 	bl	8021aa4 <restore>
 8021bda:	4604      	mov	r4, r0
    change_completed();
 8021bdc:	f7ff fdf4 	bl	80217c8 <change_completed>
    grbl.report.feedback_message(Message_None);
 8021be0:	4b07      	ldr	r3, [pc, #28]	@ (8021c00 <execute_restore+0x34>)
 8021be2:	68db      	ldr	r3, [r3, #12]
 8021be4:	2000      	movs	r0, #0
 8021be6:	4798      	blx	r3
    if(ok)
 8021be8:	b124      	cbz	r4, 8021bf4 <execute_restore+0x28>
        system_set_exec_state_flag(EXEC_CYCLE_START);
 8021bea:	4b06      	ldr	r3, [pc, #24]	@ (8021c04 <execute_restore+0x38>)
 8021bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021bee:	2102      	movs	r1, #2
 8021bf0:	4805      	ldr	r0, [pc, #20]	@ (8021c08 <execute_restore+0x3c>)
 8021bf2:	4798      	blx	r3
}
 8021bf4:	bd10      	pop	{r4, pc}
 8021bf6:	bf00      	nop
 8021bf8:	20001514 	.word	0x20001514
 8021bfc:	200027b4 	.word	0x200027b4
 8021c00:	20001394 	.word	0x20001394
 8021c04:	200011ac 	.word	0x200011ac
 8021c08:	200014d4 	.word	0x200014d4

08021c0c <execute_probe>:
{
 8021c0c:	b570      	push	{r4, r5, r6, lr}
 8021c0e:	b08e      	sub	sp, #56	@ 0x38
    gc_parser_flags_t flags = {0};
 8021c10:	2400      	movs	r4, #0
    settings_read_coord_data(CoordinateSystem_G59_3, &offset.values);
 8021c12:	a90b      	add	r1, sp, #44	@ 0x2c
 8021c14:	2008      	movs	r0, #8
 8021c16:	f7fb f91b 	bl	801ce50 <settings_read_coord_data>
    plan_data_init(&plan_data);
 8021c1a:	a801      	add	r0, sp, #4
 8021c1c:	f7f4 fd3e 	bl	801669c <plan_data_init>
    plan_data.condition.rapid_motion = On;
 8021c20:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8021c24:	f043 0301 	orr.w	r3, r3, #1
 8021c28:	f88d 3018 	strb.w	r3, [sp, #24]
    target.values[plane.axis_0] = offset.values[plane.axis_0];
 8021c2c:	4965      	ldr	r1, [pc, #404]	@ (8021dc4 <execute_probe+0x1b8>)
 8021c2e:	780a      	ldrb	r2, [r1, #0]
 8021c30:	ab0e      	add	r3, sp, #56	@ 0x38
 8021c32:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8021c36:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 8021c3a:	4b63      	ldr	r3, [pc, #396]	@ (8021dc8 <execute_probe+0x1bc>)
 8021c3c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8021c40:	6010      	str	r0, [r2, #0]
    target.values[plane.axis_1] = offset.values[plane.axis_1];
 8021c42:	784a      	ldrb	r2, [r1, #1]
 8021c44:	a90e      	add	r1, sp, #56	@ 0x38
 8021c46:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8021c4a:	f851 1c0c 	ldr.w	r1, [r1, #-12]
 8021c4e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8021c52:	6019      	str	r1, [r3, #0]
    if(probe_toolsetter)
 8021c54:	4b5d      	ldr	r3, [pc, #372]	@ (8021dcc <execute_probe+0x1c0>)
 8021c56:	781b      	ldrb	r3, [r3, #0]
 8021c58:	b143      	cbz	r3, 8021c6c <execute_probe+0x60>
        grbl.on_probe_toolsetter(next_tool, &target, false, true);
 8021c5a:	4b5d      	ldr	r3, [pc, #372]	@ (8021dd0 <execute_probe+0x1c4>)
 8021c5c:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 8021c60:	2301      	movs	r3, #1
 8021c62:	4622      	mov	r2, r4
 8021c64:	4958      	ldr	r1, [pc, #352]	@ (8021dc8 <execute_probe+0x1bc>)
 8021c66:	485b      	ldr	r0, [pc, #364]	@ (8021dd4 <execute_probe+0x1c8>)
 8021c68:	6800      	ldr	r0, [r0, #0]
 8021c6a:	47a8      	blx	r5
    if((ok = mc_line(target.values, &plan_data))) {
 8021c6c:	a901      	add	r1, sp, #4
 8021c6e:	4856      	ldr	r0, [pc, #344]	@ (8021dc8 <execute_probe+0x1bc>)
 8021c70:	f7f1 fbae 	bl	80133d0 <mc_line>
 8021c74:	b918      	cbnz	r0, 8021c7e <execute_probe+0x72>
    change_completed();
 8021c76:	f7ff fda7 	bl	80217c8 <change_completed>
}
 8021c7a:	b00e      	add	sp, #56	@ 0x38
 8021c7c:	bd70      	pop	{r4, r5, r6, pc}
        target.values[plane.axis_linear] = offset.values[plane.axis_linear];
 8021c7e:	4b51      	ldr	r3, [pc, #324]	@ (8021dc4 <execute_probe+0x1b8>)
 8021c80:	789b      	ldrb	r3, [r3, #2]
 8021c82:	aa0e      	add	r2, sp, #56	@ 0x38
 8021c84:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8021c88:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 8021c8c:	484e      	ldr	r0, [pc, #312]	@ (8021dc8 <execute_probe+0x1bc>)
 8021c8e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021c92:	601a      	str	r2, [r3, #0]
        ok = mc_line(target.values, &plan_data);
 8021c94:	a901      	add	r1, sp, #4
 8021c96:	f7f1 fb9b 	bl	80133d0 <mc_line>
        if(ok && probe_toolsetter)
 8021c9a:	4605      	mov	r5, r0
 8021c9c:	b158      	cbz	r0, 8021cb6 <execute_probe+0xaa>
 8021c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8021dcc <execute_probe+0x1c0>)
 8021ca0:	781b      	ldrb	r3, [r3, #0]
 8021ca2:	b143      	cbz	r3, 8021cb6 <execute_probe+0xaa>
            grbl.on_probe_toolsetter(next_tool, NULL, true, true);
 8021ca4:	4b4a      	ldr	r3, [pc, #296]	@ (8021dd0 <execute_probe+0x1c4>)
 8021ca6:	f8d3 609c 	ldr.w	r6, [r3, #156]	@ 0x9c
 8021caa:	2301      	movs	r3, #1
 8021cac:	461a      	mov	r2, r3
 8021cae:	2100      	movs	r1, #0
 8021cb0:	4848      	ldr	r0, [pc, #288]	@ (8021dd4 <execute_probe+0x1c8>)
 8021cb2:	6800      	ldr	r0, [r0, #0]
 8021cb4:	47b0      	blx	r6
        plan_data.feed_rate = settings.tool_change.seek_rate;
 8021cb6:	4a48      	ldr	r2, [pc, #288]	@ (8021dd8 <execute_probe+0x1cc>)
 8021cb8:	6a13      	ldr	r3, [r2, #32]
 8021cba:	9301      	str	r3, [sp, #4]
        plan_data.condition.value = 0;
 8021cbc:	2300      	movs	r3, #0
 8021cbe:	9306      	str	r3, [sp, #24]
        plan_data.spindle.state.value = 0;
 8021cc0:	f88d 300c 	strb.w	r3, [sp, #12]
        target.values[plane.axis_linear] -= settings.tool_change.probing_distance;
 8021cc4:	4b3f      	ldr	r3, [pc, #252]	@ (8021dc4 <execute_probe+0x1b8>)
 8021cc6:	7899      	ldrb	r1, [r3, #2]
 8021cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8021dc8 <execute_probe+0x1bc>)
 8021cca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8021cce:	edd3 7a00 	vldr	s15, [r3]
 8021cd2:	ed92 7a0a 	vldr	s14, [r2, #40]	@ 0x28
 8021cd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021cda:	edc3 7a00 	vstr	s15, [r3]
        if((ok = ok && mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found))
 8021cde:	b135      	cbz	r5, 8021cee <execute_probe+0xe2>
 8021ce0:	4622      	mov	r2, r4
 8021ce2:	a901      	add	r1, sp, #4
 8021ce4:	4838      	ldr	r0, [pc, #224]	@ (8021dc8 <execute_probe+0x1bc>)
 8021ce6:	f7f2 fa83 	bl	80141f0 <mc_probe_cycle>
 8021cea:	2801      	cmp	r0, #1
 8021cec:	d002      	beq.n	8021cf4 <execute_probe+0xe8>
    change_completed();
 8021cee:	f7ff fd6b 	bl	80217c8 <change_completed>
    if(ok)
 8021cf2:	e7c2      	b.n	8021c7a <execute_probe+0x6e>
            system_convert_array_steps_to_mpos(target.values, sys.probe_position);
 8021cf4:	4d34      	ldr	r5, [pc, #208]	@ (8021dc8 <execute_probe+0x1bc>)
 8021cf6:	4939      	ldr	r1, [pc, #228]	@ (8021ddc <execute_probe+0x1d0>)
 8021cf8:	4628      	mov	r0, r5
 8021cfa:	f7ff fc1d 	bl	8021538 <system_convert_array_steps_to_mpos>
            plan_data.feed_rate = settings.tool_change.pulloff_rate;
 8021cfe:	4b36      	ldr	r3, [pc, #216]	@ (8021dd8 <execute_probe+0x1cc>)
 8021d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021d02:	9301      	str	r3, [sp, #4]
            target.values[plane.axis_linear] += TOOL_CHANGE_PROBE_RETRACT_DISTANCE;
 8021d04:	4b2f      	ldr	r3, [pc, #188]	@ (8021dc4 <execute_probe+0x1b8>)
 8021d06:	789b      	ldrb	r3, [r3, #2]
 8021d08:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8021d0c:	edd3 7a00 	vldr	s15, [r3]
 8021d10:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8021d14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021d18:	edc3 7a00 	vstr	s15, [r3]
            if((ok = mc_line(target.values, &plan_data))) {
 8021d1c:	a901      	add	r1, sp, #4
 8021d1e:	4628      	mov	r0, r5
 8021d20:	f7f1 fb56 	bl	80133d0 <mc_line>
 8021d24:	2800      	cmp	r0, #0
 8021d26:	d0e2      	beq.n	8021cee <execute_probe+0xe2>
                plan_data.feed_rate = settings.tool_change.feed_rate;
 8021d28:	4b2b      	ldr	r3, [pc, #172]	@ (8021dd8 <execute_probe+0x1cc>)
 8021d2a:	69db      	ldr	r3, [r3, #28]
 8021d2c:	9301      	str	r3, [sp, #4]
                target.values[plane.axis_linear] -= (TOOL_CHANGE_PROBE_RETRACT_DISTANCE + 2.0f);
 8021d2e:	4b25      	ldr	r3, [pc, #148]	@ (8021dc4 <execute_probe+0x1b8>)
 8021d30:	789b      	ldrb	r3, [r3, #2]
 8021d32:	4628      	mov	r0, r5
 8021d34:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8021d38:	edd3 7a00 	vldr	s15, [r3]
 8021d3c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8021d40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021d44:	edc3 7a00 	vstr	s15, [r3]
                ok = mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found;
 8021d48:	4622      	mov	r2, r4
 8021d4a:	a901      	add	r1, sp, #4
 8021d4c:	f7f2 fa50 	bl	80141f0 <mc_probe_cycle>
        if(ok) {
 8021d50:	2801      	cmp	r0, #1
 8021d52:	d1cc      	bne.n	8021cee <execute_probe+0xe2>
            if(!(sys.tlo_reference_set.mask & bit(plane.axis_linear))) {
 8021d54:	4b22      	ldr	r3, [pc, #136]	@ (8021de0 <execute_probe+0x1d4>)
 8021d56:	79db      	ldrb	r3, [r3, #7]
 8021d58:	4a1a      	ldr	r2, [pc, #104]	@ (8021dc4 <execute_probe+0x1b8>)
 8021d5a:	7891      	ldrb	r1, [r2, #2]
 8021d5c:	fa23 f201 	lsr.w	r2, r3, r1
 8021d60:	f012 0f01 	tst.w	r2, #1
 8021d64:	d121      	bne.n	8021daa <execute_probe+0x19e>
                sys.tlo_reference[plane.axis_linear] = sys.probe_position[plane.axis_linear];
 8021d66:	4a1e      	ldr	r2, [pc, #120]	@ (8021de0 <execute_probe+0x1d4>)
 8021d68:	f101 000e 	add.w	r0, r1, #14
 8021d6c:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8021d70:	1c88      	adds	r0, r1, #2
 8021d72:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
                sys.tlo_reference_set.mask |= bit(plane.axis_linear);
 8021d76:	2001      	movs	r0, #1
 8021d78:	4088      	lsls	r0, r1
 8021d7a:	4303      	orrs	r3, r0
 8021d7c:	71d3      	strb	r3, [r2, #7]
                system_add_rt_report(Report_TLOReference);
 8021d7e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8021d82:	f7ff fc7d 	bl	8021680 <system_add_rt_report>
                grbl.report.feedback_message(Message_ReferenceTLOEstablished);
 8021d86:	4b12      	ldr	r3, [pc, #72]	@ (8021dd0 <execute_probe+0x1c4>)
 8021d88:	68db      	ldr	r3, [r3, #12]
 8021d8a:	200f      	movs	r0, #15
 8021d8c:	4798      	blx	r3
            ok = restore();
 8021d8e:	f7ff fe89 	bl	8021aa4 <restore>
 8021d92:	4604      	mov	r4, r0
    change_completed();
 8021d94:	f7ff fd18 	bl	80217c8 <change_completed>
    if(ok)
 8021d98:	2c00      	cmp	r4, #0
 8021d9a:	f43f af6e 	beq.w	8021c7a <execute_probe+0x6e>
        system_set_exec_state_flag(EXEC_CYCLE_START);
 8021d9e:	4b11      	ldr	r3, [pc, #68]	@ (8021de4 <execute_probe+0x1d8>)
 8021da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021da2:	2102      	movs	r1, #2
 8021da4:	4810      	ldr	r0, [pc, #64]	@ (8021de8 <execute_probe+0x1dc>)
 8021da6:	4798      	blx	r3
}
 8021da8:	e767      	b.n	8021c7a <execute_probe+0x6e>
                                    sys.probe_position[plane.axis_linear] - sys.tlo_reference[plane.axis_linear]);
 8021daa:	4b0d      	ldr	r3, [pc, #52]	@ (8021de0 <execute_probe+0x1d4>)
 8021dac:	f101 020e 	add.w	r2, r1, #14
 8021db0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8021db4:	1c88      	adds	r0, r1, #2
 8021db6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
                gc_set_tool_offset(ToolLengthOffset_EnableDynamic, plane.axis_linear,
 8021dba:	1ad2      	subs	r2, r2, r3
 8021dbc:	2002      	movs	r0, #2
 8021dbe:	f7ea fedf 	bl	800cb80 <gc_set_tool_offset>
 8021dc2:	e7e4      	b.n	8021d8e <execute_probe+0x182>
 8021dc4:	200027c0 	.word	0x200027c0
 8021dc8:	200027b4 	.word	0x200027b4
 8021dcc:	200027e5 	.word	0x200027e5
 8021dd0:	20001394 	.word	0x20001394
 8021dd4:	200027c4 	.word	0x200027c4
 8021dd8:	20001bc4 	.word	0x20001bc4
 8021ddc:	200014c4 	.word	0x200014c4
 8021de0:	2000148c 	.word	0x2000148c
 8021de4:	200011ac 	.word	0x200011ac
 8021de8:	200014d4 	.word	0x200014d4

08021dec <tool_change>:

// Start a tool change sequence. Called by gcode.c on a M6 command (via HAL).
static status_code_t tool_change (parser_state_t *parser_state)
{
    if(next_tool == NULL)
 8021dec:	4b6f      	ldr	r3, [pc, #444]	@ (8021fac <tool_change+0x1c0>)
 8021dee:	681b      	ldr	r3, [r3, #0]
 8021df0:	2b00      	cmp	r3, #0
 8021df2:	f000 80cd 	beq.w	8021f90 <tool_change+0x1a4>
{
 8021df6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021df8:	b08b      	sub	sp, #44	@ 0x2c
 8021dfa:	4604      	mov	r4, r0
        return Status_GCodeToolError;

    if(current_tool.tool_id == next_tool->tool_id)
 8021dfc:	4a6c      	ldr	r2, [pc, #432]	@ (8021fb0 <tool_change+0x1c4>)
 8021dfe:	6912      	ldr	r2, [r2, #16]
 8021e00:	691b      	ldr	r3, [r3, #16]
 8021e02:	429a      	cmp	r2, r3
 8021e04:	f000 80c6 	beq.w	8021f94 <tool_change+0x1a8>
  #else
    plane.axis_0 = X_AXIS;
    plane.axis_1 = Y_AXIS;
  #endif
#else
    gc_get_plane_data(&plane, parser_state->modal.plane_select);
 8021e08:	7981      	ldrb	r1, [r0, #6]
 8021e0a:	486a      	ldr	r0, [pc, #424]	@ (8021fb4 <tool_change+0x1c8>)
 8021e0c:	f7ea ff1e 	bl	800cc4c <gc_get_plane_data>
#endif

    uint8_t homed_req = settings.tool_change.mode == ToolChange_Manual ? bit(plane.axis_linear) : (X_AXIS_BIT|Y_AXIS_BIT|Z_AXIS_BIT);
 8021e10:	4b69      	ldr	r3, [pc, #420]	@ (8021fb8 <tool_change+0x1cc>)
 8021e12:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021e16:	2b01      	cmp	r3, #1
 8021e18:	d07b      	beq.n	8021f12 <tool_change+0x126>
 8021e1a:	2207      	movs	r2, #7

    if((sys.homed.mask & homed_req) != homed_req)
 8021e1c:	4967      	ldr	r1, [pc, #412]	@ (8021fbc <tool_change+0x1d0>)
 8021e1e:	f891 1054 	ldrb.w	r1, [r1, #84]	@ 0x54
 8021e22:	438a      	bics	r2, r1
 8021e24:	f040 80b9 	bne.w	8021f9a <tool_change+0x1ae>
        return Status_HomingRequired;

    if(settings.tool_change.mode != ToolChange_SemiAutomatic)
 8021e28:	2b03      	cmp	r3, #3
 8021e2a:	d003      	beq.n	8021e34 <tool_change+0x48>
        grbl.on_probe_completed = on_probe_completed;
 8021e2c:	4a64      	ldr	r2, [pc, #400]	@ (8021fc0 <tool_change+0x1d4>)
 8021e2e:	4965      	ldr	r1, [pc, #404]	@ (8021fc4 <tool_change+0x1d8>)
 8021e30:	f8c2 10a4 	str.w	r1, [r2, #164]	@ 0xa4

    block_cycle_start = settings.tool_change.mode != ToolChange_SemiAutomatic;
 8021e34:	3b03      	subs	r3, #3
 8021e36:	bf18      	it	ne
 8021e38:	2301      	movne	r3, #1
 8021e3a:	4a63      	ldr	r2, [pc, #396]	@ (8021fc8 <tool_change+0x1dc>)
 8021e3c:	7013      	strb	r3, [r2, #0]

    // Stop spindle and coolant.
    spindle_all_off();
 8021e3e:	f7fc f9dd 	bl	801e1fc <spindle_all_off>
    hal.coolant.set_state((coolant_state_t){0});
 8021e42:	4b62      	ldr	r3, [pc, #392]	@ (8021fcc <tool_change+0x1e0>)
 8021e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8021e46:	2500      	movs	r5, #0
 8021e48:	4628      	mov	r0, r5
 8021e4a:	4798      	blx	r3

    execute_posted = false;
 8021e4c:	4b60      	ldr	r3, [pc, #384]	@ (8021fd0 <tool_change+0x1e4>)
 8021e4e:	701d      	strb	r5, [r3, #0]
    probe_toolsetter = grbl.on_probe_toolsetter != NULL &&
 8021e50:	4b5b      	ldr	r3, [pc, #364]	@ (8021fc0 <tool_change+0x1d4>)
 8021e52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8021e56:	2b00      	cmp	r3, #0
 8021e58:	d061      	beq.n	8021f1e <tool_change+0x132>
                       (settings.tool_change.mode == ToolChange_Manual ||
 8021e5a:	4b57      	ldr	r3, [pc, #348]	@ (8021fb8 <tool_change+0x1cc>)
 8021e5c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
                         settings.tool_change.mode == ToolChange_Manual_G59_3 ||
 8021e60:	3b01      	subs	r3, #1
 8021e62:	b2db      	uxtb	r3, r3
    probe_toolsetter = grbl.on_probe_toolsetter != NULL &&
 8021e64:	2b02      	cmp	r3, #2
 8021e66:	d95c      	bls.n	8021f22 <tool_change+0x136>
 8021e68:	462a      	mov	r2, r5
 8021e6a:	4b5a      	ldr	r3, [pc, #360]	@ (8021fd4 <tool_change+0x1e8>)
 8021e6c:	701a      	strb	r2, [r3, #0]
                          settings.tool_change.mode == ToolChange_SemiAutomatic);

    // Save current position.
    system_convert_array_steps_to_mpos(previous.values, sys.position);
 8021e6e:	4d5a      	ldr	r5, [pc, #360]	@ (8021fd8 <tool_change+0x1ec>)
 8021e70:	4e5a      	ldr	r6, [pc, #360]	@ (8021fdc <tool_change+0x1f0>)
 8021e72:	4629      	mov	r1, r5
 8021e74:	4630      	mov	r0, r6
 8021e76:	f7ff fb5f 	bl	8021538 <system_convert_array_steps_to_mpos>

    // Establish axis assignments.

    previous.values[plane.axis_linear] -= gc_get_offset(plane.axis_linear, false);
 8021e7a:	4f4e      	ldr	r7, [pc, #312]	@ (8021fb4 <tool_change+0x1c8>)
 8021e7c:	2100      	movs	r1, #0
 8021e7e:	78b8      	ldrb	r0, [r7, #2]
 8021e80:	f7ea fe3e 	bl	800cb00 <gc_get_offset>
 8021e84:	78bb      	ldrb	r3, [r7, #2]
 8021e86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8021e8a:	edd3 7a00 	vldr	s15, [r3]
 8021e8e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8021e92:	edc3 7a00 	vstr	s15, [r3]

    plan_line_data_t plan_data;

    plan_data_init(&plan_data);
 8021e96:	4668      	mov	r0, sp
 8021e98:	f7f4 fc00 	bl	801669c <plan_data_init>
    plan_data.condition.rapid_motion = On;
 8021e9c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8021ea0:	f043 0301 	orr.w	r3, r3, #1
 8021ea4:	f88d 3014 	strb.w	r3, [sp, #20]
    // TODO: add?
    //if(!settings.homing.flags.force_set_origin && bit_istrue(settings.homing.dir_mask.value, bit(plane.axis_linear)))
    //    tool_change_position = ?
    //else

    tool_change_position = sys.home_position[plane.axis_linear]; // - settings.homing.flags.force_set_origin ? LINEAR_AXIS_HOME_OFFSET : 0.0f;
 8021ea8:	f897 c002 	ldrb.w	ip, [r7, #2]
 8021eac:	3d88      	subs	r5, #136	@ 0x88
 8021eae:	f10c 0316 	add.w	r3, ip, #22
 8021eb2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8021eb6:	682d      	ldr	r5, [r5, #0]
 8021eb8:	4b49      	ldr	r3, [pc, #292]	@ (8021fe0 <tool_change+0x1f4>)
 8021eba:	601d      	str	r5, [r3, #0]

    // Rapid to home position of linear axis.
    memcpy(&target, &previous, sizeof(coord_data_t));
 8021ebc:	4b49      	ldr	r3, [pc, #292]	@ (8021fe4 <tool_change+0x1f8>)
 8021ebe:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8021ec2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    target.values[plane.axis_linear] = tool_change_position;
 8021ec6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8021eca:	f8cc 5000 	str.w	r5, [ip]
    if(!mc_line(target.values, &plan_data))
 8021ece:	4669      	mov	r1, sp
 8021ed0:	4618      	mov	r0, r3
 8021ed2:	f7f1 fa7d 	bl	80133d0 <mc_line>
 8021ed6:	2800      	cmp	r0, #0
 8021ed8:	d061      	beq.n	8021f9e <tool_change+0x1b2>
        return Status_Reset;

#if COMPATIBILITY_LEVEL <= 1
    if(settings.tool_change.mode == ToolChange_Manual_G59_3) {
 8021eda:	4b37      	ldr	r3, [pc, #220]	@ (8021fb8 <tool_change+0x1cc>)
 8021edc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021ee0:	2b02      	cmp	r3, #2
 8021ee2:	d020      	beq.n	8021f26 <tool_change+0x13a>
        if(probe_toolsetter)
            grbl.on_probe_toolsetter(next_tool, NULL, true, true);
    }
#endif

    protocol_buffer_synchronize();
 8021ee4:	f7f5 fb74 	bl	80175d0 <protocol_buffer_synchronize>
    sync_position();
 8021ee8:	f7f4 fb62 	bl	80165b0 <plan_sync_position>
 8021eec:	4d3a      	ldr	r5, [pc, #232]	@ (8021fd8 <tool_change+0x1ec>)
 8021eee:	4629      	mov	r1, r5
 8021ef0:	483d      	ldr	r0, [pc, #244]	@ (8021fe8 <tool_change+0x1fc>)
 8021ef2:	f7ff fb21 	bl	8021538 <system_convert_array_steps_to_mpos>

    // Enter tool change mode, waits for cycle start to continue.
    parser_state->tool_change = true;
 8021ef6:	2301      	movs	r3, #1
 8021ef8:	f884 307f 	strb.w	r3, [r4, #127]	@ 0x7f
    system_set_exec_state_flag(EXEC_TOOL_CHANGE);   // Set up program pause for manual tool change
 8021efc:	4b33      	ldr	r3, [pc, #204]	@ (8021fcc <tool_change+0x1e0>)
 8021efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021f00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8021f04:	f1a5 0040 	sub.w	r0, r5, #64	@ 0x40
 8021f08:	4798      	blx	r3
    protocol_execute_realtime();                    // Execute...
 8021f0a:	f7f5 f893 	bl	8017034 <protocol_execute_realtime>

    return Status_OK;
 8021f0e:	2000      	movs	r0, #0
 8021f10:	e041      	b.n	8021f96 <tool_change+0x1aa>
    uint8_t homed_req = settings.tool_change.mode == ToolChange_Manual ? bit(plane.axis_linear) : (X_AXIS_BIT|Y_AXIS_BIT|Z_AXIS_BIT);
 8021f12:	4a28      	ldr	r2, [pc, #160]	@ (8021fb4 <tool_change+0x1c8>)
 8021f14:	7891      	ldrb	r1, [r2, #2]
 8021f16:	2201      	movs	r2, #1
 8021f18:	408a      	lsls	r2, r1
 8021f1a:	b2d2      	uxtb	r2, r2
 8021f1c:	e77e      	b.n	8021e1c <tool_change+0x30>
    probe_toolsetter = grbl.on_probe_toolsetter != NULL &&
 8021f1e:	2200      	movs	r2, #0
 8021f20:	e7a3      	b.n	8021e6a <tool_change+0x7e>
 8021f22:	2201      	movs	r2, #1
 8021f24:	e7a1      	b.n	8021e6a <tool_change+0x7e>
        settings_read_coord_data(CoordinateSystem_G59_3, &target.values);
 8021f26:	4d2f      	ldr	r5, [pc, #188]	@ (8021fe4 <tool_change+0x1f8>)
 8021f28:	4629      	mov	r1, r5
 8021f2a:	2008      	movs	r0, #8
 8021f2c:	f7fa ff90 	bl	801ce50 <settings_read_coord_data>
        float tmp_pos = target.values[plane.axis_linear];
 8021f30:	78bb      	ldrb	r3, [r7, #2]
 8021f32:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8021f36:	682e      	ldr	r6, [r5, #0]
        target.values[plane.axis_linear] = tool_change_position;
 8021f38:	4b29      	ldr	r3, [pc, #164]	@ (8021fe0 <tool_change+0x1f4>)
 8021f3a:	681b      	ldr	r3, [r3, #0]
 8021f3c:	602b      	str	r3, [r5, #0]
        if(probe_toolsetter)
 8021f3e:	4b25      	ldr	r3, [pc, #148]	@ (8021fd4 <tool_change+0x1e8>)
 8021f40:	781b      	ldrb	r3, [r3, #0]
 8021f42:	b143      	cbz	r3, 8021f56 <tool_change+0x16a>
            grbl.on_probe_toolsetter(next_tool, &target, false, true);
 8021f44:	4b1e      	ldr	r3, [pc, #120]	@ (8021fc0 <tool_change+0x1d4>)
 8021f46:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 8021f4a:	2301      	movs	r3, #1
 8021f4c:	2200      	movs	r2, #0
 8021f4e:	4925      	ldr	r1, [pc, #148]	@ (8021fe4 <tool_change+0x1f8>)
 8021f50:	4816      	ldr	r0, [pc, #88]	@ (8021fac <tool_change+0x1c0>)
 8021f52:	6800      	ldr	r0, [r0, #0]
 8021f54:	47a8      	blx	r5
        if(!mc_line(target.values, &plan_data))
 8021f56:	4669      	mov	r1, sp
 8021f58:	4822      	ldr	r0, [pc, #136]	@ (8021fe4 <tool_change+0x1f8>)
 8021f5a:	f7f1 fa39 	bl	80133d0 <mc_line>
 8021f5e:	b300      	cbz	r0, 8021fa2 <tool_change+0x1b6>
        target.values[plane.axis_linear] = tmp_pos;
 8021f60:	4b14      	ldr	r3, [pc, #80]	@ (8021fb4 <tool_change+0x1c8>)
 8021f62:	789b      	ldrb	r3, [r3, #2]
 8021f64:	481f      	ldr	r0, [pc, #124]	@ (8021fe4 <tool_change+0x1f8>)
 8021f66:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021f6a:	601e      	str	r6, [r3, #0]
        if(!mc_line(target.values, &plan_data))
 8021f6c:	4669      	mov	r1, sp
 8021f6e:	f7f1 fa2f 	bl	80133d0 <mc_line>
 8021f72:	b1c0      	cbz	r0, 8021fa6 <tool_change+0x1ba>
        if(probe_toolsetter)
 8021f74:	4b17      	ldr	r3, [pc, #92]	@ (8021fd4 <tool_change+0x1e8>)
 8021f76:	781b      	ldrb	r3, [r3, #0]
 8021f78:	2b00      	cmp	r3, #0
 8021f7a:	d0b3      	beq.n	8021ee4 <tool_change+0xf8>
            grbl.on_probe_toolsetter(next_tool, NULL, true, true);
 8021f7c:	4b10      	ldr	r3, [pc, #64]	@ (8021fc0 <tool_change+0x1d4>)
 8021f7e:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 8021f82:	2301      	movs	r3, #1
 8021f84:	461a      	mov	r2, r3
 8021f86:	2100      	movs	r1, #0
 8021f88:	4808      	ldr	r0, [pc, #32]	@ (8021fac <tool_change+0x1c0>)
 8021f8a:	6800      	ldr	r0, [r0, #0]
 8021f8c:	47a8      	blx	r5
 8021f8e:	e7a9      	b.n	8021ee4 <tool_change+0xf8>
        return Status_GCodeToolError;
 8021f90:	202f      	movs	r0, #47	@ 0x2f
}
 8021f92:	4770      	bx	lr
        return Status_OK;
 8021f94:	2000      	movs	r0, #0
}
 8021f96:	b00b      	add	sp, #44	@ 0x2c
 8021f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return Status_HomingRequired;
 8021f9a:	202e      	movs	r0, #46	@ 0x2e
 8021f9c:	e7fb      	b.n	8021f96 <tool_change+0x1aa>
        return Status_Reset;
 8021f9e:	2012      	movs	r0, #18
 8021fa0:	e7f9      	b.n	8021f96 <tool_change+0x1aa>
            return Status_Reset;
 8021fa2:	2012      	movs	r0, #18
 8021fa4:	e7f7      	b.n	8021f96 <tool_change+0x1aa>
            return Status_Reset;
 8021fa6:	2012      	movs	r0, #18
 8021fa8:	e7f5      	b.n	8021f96 <tool_change+0x1aa>
 8021faa:	bf00      	nop
 8021fac:	200027c4 	.word	0x200027c4
 8021fb0:	200027c8 	.word	0x200027c8
 8021fb4:	200027c0 	.word	0x200027c0
 8021fb8:	20001bc4 	.word	0x20001bc4
 8021fbc:	2000148c 	.word	0x2000148c
 8021fc0:	20001394 	.word	0x20001394
 8021fc4:	0802189d 	.word	0x0802189d
 8021fc8:	200027e6 	.word	0x200027e6
 8021fcc:	200011ac 	.word	0x200011ac
 8021fd0:	200027e4 	.word	0x200027e4
 8021fd4:	200027e5 	.word	0x200027e5
 8021fd8:	20001514 	.word	0x20001514
 8021fdc:	200027a8 	.word	0x200027a8
 8021fe0:	200027dc 	.word	0x200027dc
 8021fe4:	200027b4 	.word	0x200027b4
 8021fe8:	20000f4c 	.word	0x20000f4c

08021fec <tc_init>:

// Claim HAL tool change entry points and clear current tool offsets.
// TODO: change to survive a warm reset?
void tc_init (void)
{
 8021fec:	b508      	push	{r3, lr}
    static bool on_homing_subscribed = false;

    if(hal.driver_cap.atc) // Do not override driver tool change implementation!
 8021fee:	4b29      	ldr	r3, [pc, #164]	@ (8022094 <tc_init+0xa8>)
 8021ff0:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 8021ff4:	f013 0f02 	tst.w	r3, #2
 8021ff8:	d14a      	bne.n	8022090 <tc_init+0xa4>
        return;

    if(!hal.stream.suspend_read) // Tool change requires support for suspending input stream.
 8021ffa:	4b26      	ldr	r3, [pc, #152]	@ (8022094 <tc_init+0xa8>)
 8021ffc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8022000:	2b00      	cmp	r3, #0
 8022002:	d045      	beq.n	8022090 <tc_init+0xa4>
        return;

    if(sys.tlo_reference_set.mask != 0) {
 8022004:	4b24      	ldr	r3, [pc, #144]	@ (8022098 <tc_init+0xac>)
 8022006:	79db      	ldrb	r3, [r3, #7]
 8022008:	2b00      	cmp	r3, #0
 802200a:	d130      	bne.n	802206e <tc_init+0x82>
        sys.tlo_reference_set.mask = 0;
        system_add_rt_report(Report_TLOReference);
    }

    gc_set_tool_offset(ToolLengthOffset_Cancel, 0, 0.0f);
 802200c:	2200      	movs	r2, #0
 802200e:	4611      	mov	r1, r2
 8022010:	4610      	mov	r0, r2
 8022012:	f7ea fdb5 	bl	800cb80 <gc_set_tool_offset>

    if(settings.tool_change.mode == ToolChange_Disabled || settings.tool_change.mode == ToolChange_Ignore) {
 8022016:	4b21      	ldr	r3, [pc, #132]	@ (802209c <tc_init+0xb0>)
 8022018:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 802201c:	2b00      	cmp	r3, #0
 802201e:	d02e      	beq.n	802207e <tc_init+0x92>
 8022020:	2b04      	cmp	r3, #4
 8022022:	d02c      	beq.n	802207e <tc_init+0x92>
        hal.tool.select = NULL;
        hal.tool.change = NULL;
        grbl.on_toolchange_ack = NULL;
    } else {
        hal.tool.select = tool_select;
 8022024:	4b1b      	ldr	r3, [pc, #108]	@ (8022094 <tc_init+0xa8>)
 8022026:	4a1e      	ldr	r2, [pc, #120]	@ (80220a0 <tc_init+0xb4>)
 8022028:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
        hal.tool.change = tool_change;
 802202c:	4a1d      	ldr	r2, [pc, #116]	@ (80220a4 <tc_init+0xb8>)
 802202e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        grbl.on_toolchange_ack = on_toolchange_ack;
 8022032:	4b1d      	ldr	r3, [pc, #116]	@ (80220a8 <tc_init+0xbc>)
 8022034:	4a1d      	ldr	r2, [pc, #116]	@ (80220ac <tc_init+0xc0>)
 8022036:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        if(!on_homing_subscribed) {
 802203a:	4b1d      	ldr	r3, [pc, #116]	@ (80220b0 <tc_init+0xc4>)
 802203c:	781b      	ldrb	r3, [r3, #0]
 802203e:	b953      	cbnz	r3, 8022056 <tc_init+0x6a>
            on_homing_subscribed = true;
 8022040:	4b1b      	ldr	r3, [pc, #108]	@ (80220b0 <tc_init+0xc4>)
 8022042:	2201      	movs	r2, #1
 8022044:	701a      	strb	r2, [r3, #0]
            on_homing_completed = grbl.on_homing_completed;
 8022046:	4b18      	ldr	r3, [pc, #96]	@ (80220a8 <tc_init+0xbc>)
 8022048:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 802204c:	4a19      	ldr	r2, [pc, #100]	@ (80220b4 <tc_init+0xc8>)
 802204e:	6011      	str	r1, [r2, #0]
            grbl.on_homing_completed = tc_on_homing_complete;
 8022050:	4a19      	ldr	r2, [pc, #100]	@ (80220b8 <tc_init+0xcc>)
 8022052:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        }
        if(driver_reset == NULL) {
 8022056:	4b19      	ldr	r3, [pc, #100]	@ (80220bc <tc_init+0xd0>)
 8022058:	681b      	ldr	r3, [r3, #0]
 802205a:	b9cb      	cbnz	r3, 8022090 <tc_init+0xa4>
            driver_reset = hal.driver_reset;
 802205c:	4b0d      	ldr	r3, [pc, #52]	@ (8022094 <tc_init+0xa8>)
 802205e:	f8d3 1170 	ldr.w	r1, [r3, #368]	@ 0x170
 8022062:	4a16      	ldr	r2, [pc, #88]	@ (80220bc <tc_init+0xd0>)
 8022064:	6011      	str	r1, [r2, #0]
            hal.driver_reset = reset;
 8022066:	4a16      	ldr	r2, [pc, #88]	@ (80220c0 <tc_init+0xd4>)
 8022068:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
 802206c:	e010      	b.n	8022090 <tc_init+0xa4>
        sys.tlo_reference_set.mask = 0;
 802206e:	4b0a      	ldr	r3, [pc, #40]	@ (8022098 <tc_init+0xac>)
 8022070:	2200      	movs	r2, #0
 8022072:	71da      	strb	r2, [r3, #7]
        system_add_rt_report(Report_TLOReference);
 8022074:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8022078:	f7ff fb02 	bl	8021680 <system_add_rt_report>
 802207c:	e7c6      	b.n	802200c <tc_init+0x20>
        hal.tool.select = NULL;
 802207e:	4a05      	ldr	r2, [pc, #20]	@ (8022094 <tc_init+0xa8>)
 8022080:	2300      	movs	r3, #0
 8022082:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
        hal.tool.change = NULL;
 8022086:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
        grbl.on_toolchange_ack = NULL;
 802208a:	4a07      	ldr	r2, [pc, #28]	@ (80220a8 <tc_init+0xbc>)
 802208c:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
        }
    }
}
 8022090:	bd08      	pop	{r3, pc}
 8022092:	bf00      	nop
 8022094:	200011ac 	.word	0x200011ac
 8022098:	2000148c 	.word	0x2000148c
 802209c:	20001bc4 	.word	0x20001bc4
 80220a0:	08021961 	.word	0x08021961
 80220a4:	08021ded 	.word	0x08021ded
 80220a8:	20001394 	.word	0x20001394
 80220ac:	0802186d 	.word	0x0802186d
 80220b0:	20002794 	.word	0x20002794
 80220b4:	20002798 	.word	0x20002798
 80220b8:	08021989 	.word	0x08021989
 80220bc:	200027a4 	.word	0x200027a4
 80220c0:	080218e9 	.word	0x080218e9

080220c4 <tc_probe_workpiece>:
// Perform a probe cycle: set tool length offset and restart job if successful.
// Note: tool length offset is set by the on_probe_completed event handler.
// Called by the $TPW system command.
status_code_t tc_probe_workpiece (void)
{
    if(!(settings.tool_change.mode == ToolChange_Manual || settings.tool_change.mode == ToolChange_Manual_G59_3) || enqueue_realtime_command == NULL)
 80220c4:	4b60      	ldr	r3, [pc, #384]	@ (8022248 <tc_probe_workpiece+0x184>)
 80220c6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80220ca:	3b01      	subs	r3, #1
 80220cc:	b2db      	uxtb	r3, r3
 80220ce:	2b01      	cmp	r3, #1
 80220d0:	f200 80b4 	bhi.w	802223c <tc_probe_workpiece+0x178>
 80220d4:	4b5d      	ldr	r3, [pc, #372]	@ (802224c <tc_probe_workpiece+0x188>)
 80220d6:	681b      	ldr	r3, [r3, #0]
 80220d8:	2b00      	cmp	r3, #0
 80220da:	f000 80b1 	beq.w	8022240 <tc_probe_workpiece+0x17c>
{
 80220de:	b530      	push	{r4, r5, lr}
 80220e0:	b08b      	sub	sp, #44	@ 0x2c
    bool ok;
    gc_parser_flags_t flags = {0};
    plan_line_data_t plan_data;

#if COMPATIBILITY_LEVEL <= 1
    if(probe_toolsetter)
 80220e2:	4b5b      	ldr	r3, [pc, #364]	@ (8022250 <tc_probe_workpiece+0x18c>)
 80220e4:	781b      	ldrb	r3, [r3, #0]
 80220e6:	bb33      	cbnz	r3, 8022136 <tc_probe_workpiece+0x72>
        grbl.on_probe_toolsetter(next_tool, NULL, system_xy_at_fixture(CoordinateSystem_G59_3, TOOLSETTER_RADIUS), true);
#endif

    // Get current position.
    system_convert_array_steps_to_mpos(target.values, sys.position);
 80220e8:	4c5a      	ldr	r4, [pc, #360]	@ (8022254 <tc_probe_workpiece+0x190>)
 80220ea:	495b      	ldr	r1, [pc, #364]	@ (8022258 <tc_probe_workpiece+0x194>)
 80220ec:	4620      	mov	r0, r4
 80220ee:	f7ff fa23 	bl	8021538 <system_convert_array_steps_to_mpos>

    flags.probe_is_no_error = On;
 80220f2:	2510      	movs	r5, #16

    plan_data_init(&plan_data);
 80220f4:	4668      	mov	r0, sp
 80220f6:	f7f4 fad1 	bl	801669c <plan_data_init>
    plan_data.feed_rate = settings.tool_change.seek_rate;
 80220fa:	4a53      	ldr	r2, [pc, #332]	@ (8022248 <tc_probe_workpiece+0x184>)
 80220fc:	6a13      	ldr	r3, [r2, #32]
 80220fe:	9300      	str	r3, [sp, #0]

    target.values[plane.axis_linear] -= settings.tool_change.probing_distance;
 8022100:	4b56      	ldr	r3, [pc, #344]	@ (802225c <tc_probe_workpiece+0x198>)
 8022102:	789b      	ldrb	r3, [r3, #2]
 8022104:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8022108:	edd3 7a00 	vldr	s15, [r3]
 802210c:	ed92 7a0a 	vldr	s14, [r2, #40]	@ 0x28
 8022110:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022114:	edc3 7a00 	vstr	s15, [r3]

    if((ok = mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found))
 8022118:	462a      	mov	r2, r5
 802211a:	4669      	mov	r1, sp
 802211c:	4620      	mov	r0, r4
 802211e:	f7f2 f867 	bl	80141f0 <mc_probe_cycle>
 8022122:	2801      	cmp	r0, #1
 8022124:	bf0c      	ite	eq
 8022126:	2401      	moveq	r4, #1
 8022128:	2400      	movne	r4, #0
 802212a:	d014      	beq.n	8022156 <tc_probe_workpiece+0x92>
                ok = mc_line(target.values, &plan_data);
            }
        }
    }

    if(ok && protocol_buffer_synchronize()) {
 802212c:	2c00      	cmp	r4, #0
 802212e:	d16a      	bne.n	8022206 <tc_probe_workpiece+0x142>
        grbl.report.feedback_message(settings.tool_change.mode == ToolChange_Manual_G59_3
                                      ? Message_CycleStart2Continue
                                      : Message_TPCycleStart2Continue);
    }

    return ok ? Status_OK : Status_GCodeToolError;
 8022130:	202f      	movs	r0, #47	@ 0x2f
}
 8022132:	b00b      	add	sp, #44	@ 0x2c
 8022134:	bd30      	pop	{r4, r5, pc}
        grbl.on_probe_toolsetter(next_tool, NULL, system_xy_at_fixture(CoordinateSystem_G59_3, TOOLSETTER_RADIUS), true);
 8022136:	4b4a      	ldr	r3, [pc, #296]	@ (8022260 <tc_probe_workpiece+0x19c>)
 8022138:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 802213c:	4b49      	ldr	r3, [pc, #292]	@ (8022264 <tc_probe_workpiece+0x1a0>)
 802213e:	681d      	ldr	r5, [r3, #0]
 8022140:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8022144:	2008      	movs	r0, #8
 8022146:	f7ff fa15 	bl	8021574 <system_xy_at_fixture>
 802214a:	4602      	mov	r2, r0
 802214c:	2301      	movs	r3, #1
 802214e:	2100      	movs	r1, #0
 8022150:	4628      	mov	r0, r5
 8022152:	47a0      	blx	r4
 8022154:	e7c8      	b.n	80220e8 <tc_probe_workpiece+0x24>
        system_convert_array_steps_to_mpos(target.values, sys.probe_position);
 8022156:	4c3f      	ldr	r4, [pc, #252]	@ (8022254 <tc_probe_workpiece+0x190>)
 8022158:	4943      	ldr	r1, [pc, #268]	@ (8022268 <tc_probe_workpiece+0x1a4>)
 802215a:	4620      	mov	r0, r4
 802215c:	f7ff f9ec 	bl	8021538 <system_convert_array_steps_to_mpos>
        plan_data.feed_rate = settings.tool_change.pulloff_rate;
 8022160:	4b39      	ldr	r3, [pc, #228]	@ (8022248 <tc_probe_workpiece+0x184>)
 8022162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022164:	9300      	str	r3, [sp, #0]
        target.values[plane.axis_linear] += TOOL_CHANGE_PROBE_RETRACT_DISTANCE;
 8022166:	4b3d      	ldr	r3, [pc, #244]	@ (802225c <tc_probe_workpiece+0x198>)
 8022168:	789b      	ldrb	r3, [r3, #2]
 802216a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802216e:	edd3 7a00 	vldr	s15, [r3]
 8022172:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8022176:	ee77 7a87 	vadd.f32	s15, s15, s14
 802217a:	edc3 7a00 	vstr	s15, [r3]
        if((ok = mc_line(target.values, &plan_data))) {
 802217e:	4669      	mov	r1, sp
 8022180:	4620      	mov	r0, r4
 8022182:	f7f1 f925 	bl	80133d0 <mc_line>
 8022186:	4604      	mov	r4, r0
 8022188:	2800      	cmp	r0, #0
 802218a:	d03f      	beq.n	802220c <tc_probe_workpiece+0x148>
            plan_data.feed_rate = settings.tool_change.feed_rate;
 802218c:	4b2e      	ldr	r3, [pc, #184]	@ (8022248 <tc_probe_workpiece+0x184>)
 802218e:	69db      	ldr	r3, [r3, #28]
 8022190:	9300      	str	r3, [sp, #0]
            target.values[plane.axis_linear] -= (TOOL_CHANGE_PROBE_RETRACT_DISTANCE + 2.0f);
 8022192:	4b32      	ldr	r3, [pc, #200]	@ (802225c <tc_probe_workpiece+0x198>)
 8022194:	789b      	ldrb	r3, [r3, #2]
 8022196:	482f      	ldr	r0, [pc, #188]	@ (8022254 <tc_probe_workpiece+0x190>)
 8022198:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802219c:	edd3 7a00 	vldr	s15, [r3]
 80221a0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80221a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80221a8:	edc3 7a00 	vstr	s15, [r3]
            if((ok = mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found)) {
 80221ac:	462a      	mov	r2, r5
 80221ae:	4669      	mov	r1, sp
 80221b0:	f7f2 f81e 	bl	80141f0 <mc_probe_cycle>
 80221b4:	2801      	cmp	r0, #1
 80221b6:	bf0c      	ite	eq
 80221b8:	2401      	moveq	r4, #1
 80221ba:	2400      	movne	r4, #0
 80221bc:	d1b6      	bne.n	802212c <tc_probe_workpiece+0x68>
                system_convert_array_steps_to_mpos(target.values, sys.probe_position);
 80221be:	4c25      	ldr	r4, [pc, #148]	@ (8022254 <tc_probe_workpiece+0x190>)
 80221c0:	4929      	ldr	r1, [pc, #164]	@ (8022268 <tc_probe_workpiece+0x1a4>)
 80221c2:	4620      	mov	r0, r4
 80221c4:	f7ff f9b8 	bl	8021538 <system_convert_array_steps_to_mpos>
                plan_data.feed_rate = settings.tool_change.seek_rate;
 80221c8:	4b1f      	ldr	r3, [pc, #124]	@ (8022248 <tc_probe_workpiece+0x184>)
 80221ca:	6a1b      	ldr	r3, [r3, #32]
 80221cc:	9300      	str	r3, [sp, #0]
                target.values[plane.axis_linear] += TOOL_CHANGE_PROBE_RETRACT_DISTANCE * 2.0f;
 80221ce:	4b23      	ldr	r3, [pc, #140]	@ (802225c <tc_probe_workpiece+0x198>)
 80221d0:	789b      	ldrb	r3, [r3, #2]
 80221d2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80221d6:	edd4 7a00 	vldr	s15, [r4]
 80221da:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80221de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80221e2:	edc4 7a00 	vstr	s15, [r4]
                if(target.values[plane.axis_linear] > tool_change_position)
 80221e6:	4a21      	ldr	r2, [pc, #132]	@ (802226c <tc_probe_workpiece+0x1a8>)
 80221e8:	ed92 7a00 	vldr	s14, [r2]
 80221ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80221f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221f4:	dd01      	ble.n	80221fa <tc_probe_workpiece+0x136>
                    target.values[plane.axis_linear] = tool_change_position;
 80221f6:	ed84 7a00 	vstr	s14, [r4]
                ok = mc_line(target.values, &plan_data);
 80221fa:	4669      	mov	r1, sp
 80221fc:	4815      	ldr	r0, [pc, #84]	@ (8022254 <tc_probe_workpiece+0x190>)
 80221fe:	f7f1 f8e7 	bl	80133d0 <mc_line>
 8022202:	4604      	mov	r4, r0
 8022204:	e792      	b.n	802212c <tc_probe_workpiece+0x68>
    if(ok && protocol_buffer_synchronize()) {
 8022206:	f7f5 f9e3 	bl	80175d0 <protocol_buffer_synchronize>
 802220a:	b910      	cbnz	r0, 8022212 <tc_probe_workpiece+0x14e>
    return ok ? Status_OK : Status_GCodeToolError;
 802220c:	b1d4      	cbz	r4, 8022244 <tc_probe_workpiece+0x180>
 802220e:	2000      	movs	r0, #0
 8022210:	e78f      	b.n	8022132 <tc_probe_workpiece+0x6e>
        sync_position();
 8022212:	f7f4 f9cd 	bl	80165b0 <plan_sync_position>
 8022216:	4910      	ldr	r1, [pc, #64]	@ (8022258 <tc_probe_workpiece+0x194>)
 8022218:	4815      	ldr	r0, [pc, #84]	@ (8022270 <tc_probe_workpiece+0x1ac>)
 802221a:	f7ff f98d 	bl	8021538 <system_convert_array_steps_to_mpos>
        block_cycle_start = false;
 802221e:	4b15      	ldr	r3, [pc, #84]	@ (8022274 <tc_probe_workpiece+0x1b0>)
 8022220:	2200      	movs	r2, #0
 8022222:	701a      	strb	r2, [r3, #0]
        grbl.report.feedback_message(settings.tool_change.mode == ToolChange_Manual_G59_3
 8022224:	4b0e      	ldr	r3, [pc, #56]	@ (8022260 <tc_probe_workpiece+0x19c>)
 8022226:	68db      	ldr	r3, [r3, #12]
 8022228:	4a07      	ldr	r2, [pc, #28]	@ (8022248 <tc_probe_workpiece+0x184>)
 802222a:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 802222e:	2a02      	cmp	r2, #2
 8022230:	d002      	beq.n	8022238 <tc_probe_workpiece+0x174>
 8022232:	2012      	movs	r0, #18
 8022234:	4798      	blx	r3
 8022236:	e7e9      	b.n	802220c <tc_probe_workpiece+0x148>
 8022238:	2011      	movs	r0, #17
 802223a:	e7fb      	b.n	8022234 <tc_probe_workpiece+0x170>
        return Status_InvalidStatement;
 802223c:	2003      	movs	r0, #3
 802223e:	4770      	bx	lr
 8022240:	2003      	movs	r0, #3
}
 8022242:	4770      	bx	lr
    return ok ? Status_OK : Status_GCodeToolError;
 8022244:	202f      	movs	r0, #47	@ 0x2f
 8022246:	e774      	b.n	8022132 <tc_probe_workpiece+0x6e>
 8022248:	20001bc4 	.word	0x20001bc4
 802224c:	200027a0 	.word	0x200027a0
 8022250:	200027e5 	.word	0x200027e5
 8022254:	200027b4 	.word	0x200027b4
 8022258:	20001514 	.word	0x20001514
 802225c:	200027c0 	.word	0x200027c0
 8022260:	20001394 	.word	0x20001394
 8022264:	200027c4 	.word	0x200027c4
 8022268:	200014c4 	.word	0x200014c4
 802226c:	200027dc 	.word	0x200027dc
 8022270:	20000f4c 	.word	0x20000f4c
 8022274:	200027e6 	.word	0x200027e6

08022278 <__assert_func>:
 8022278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802227a:	4614      	mov	r4, r2
 802227c:	461a      	mov	r2, r3
 802227e:	4b09      	ldr	r3, [pc, #36]	@ (80222a4 <__assert_func+0x2c>)
 8022280:	681b      	ldr	r3, [r3, #0]
 8022282:	4605      	mov	r5, r0
 8022284:	68d8      	ldr	r0, [r3, #12]
 8022286:	b954      	cbnz	r4, 802229e <__assert_func+0x26>
 8022288:	4b07      	ldr	r3, [pc, #28]	@ (80222a8 <__assert_func+0x30>)
 802228a:	461c      	mov	r4, r3
 802228c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022290:	9100      	str	r1, [sp, #0]
 8022292:	462b      	mov	r3, r5
 8022294:	4905      	ldr	r1, [pc, #20]	@ (80222ac <__assert_func+0x34>)
 8022296:	f002 f835 	bl	8024304 <fiprintf>
 802229a:	f002 fa6f 	bl	802477c <abort>
 802229e:	4b04      	ldr	r3, [pc, #16]	@ (80222b0 <__assert_func+0x38>)
 80222a0:	e7f4      	b.n	802228c <__assert_func+0x14>
 80222a2:	bf00      	nop
 80222a4:	20000614 	.word	0x20000614
 80222a8:	08030a4f 	.word	0x08030a4f
 80222ac:	08030a21 	.word	0x08030a21
 80222b0:	08030a14 	.word	0x08030a14

080222b4 <calloc>:
 80222b4:	4b02      	ldr	r3, [pc, #8]	@ (80222c0 <calloc+0xc>)
 80222b6:	460a      	mov	r2, r1
 80222b8:	4601      	mov	r1, r0
 80222ba:	6818      	ldr	r0, [r3, #0]
 80222bc:	f000 b802 	b.w	80222c4 <_calloc_r>
 80222c0:	20000614 	.word	0x20000614

080222c4 <_calloc_r>:
 80222c4:	b570      	push	{r4, r5, r6, lr}
 80222c6:	fba1 5402 	umull	r5, r4, r1, r2
 80222ca:	b93c      	cbnz	r4, 80222dc <_calloc_r+0x18>
 80222cc:	4629      	mov	r1, r5
 80222ce:	f000 f83f 	bl	8022350 <_malloc_r>
 80222d2:	4606      	mov	r6, r0
 80222d4:	b928      	cbnz	r0, 80222e2 <_calloc_r+0x1e>
 80222d6:	2600      	movs	r6, #0
 80222d8:	4630      	mov	r0, r6
 80222da:	bd70      	pop	{r4, r5, r6, pc}
 80222dc:	220c      	movs	r2, #12
 80222de:	6002      	str	r2, [r0, #0]
 80222e0:	e7f9      	b.n	80222d6 <_calloc_r+0x12>
 80222e2:	462a      	mov	r2, r5
 80222e4:	4621      	mov	r1, r4
 80222e6:	f002 f8ca 	bl	802447e <memset>
 80222ea:	e7f5      	b.n	80222d8 <_calloc_r+0x14>

080222ec <malloc>:
 80222ec:	4b02      	ldr	r3, [pc, #8]	@ (80222f8 <malloc+0xc>)
 80222ee:	4601      	mov	r1, r0
 80222f0:	6818      	ldr	r0, [r3, #0]
 80222f2:	f000 b82d 	b.w	8022350 <_malloc_r>
 80222f6:	bf00      	nop
 80222f8:	20000614 	.word	0x20000614

080222fc <free>:
 80222fc:	4b02      	ldr	r3, [pc, #8]	@ (8022308 <free+0xc>)
 80222fe:	4601      	mov	r1, r0
 8022300:	6818      	ldr	r0, [r3, #0]
 8022302:	f003 b891 	b.w	8025428 <_free_r>
 8022306:	bf00      	nop
 8022308:	20000614 	.word	0x20000614

0802230c <sbrk_aligned>:
 802230c:	b570      	push	{r4, r5, r6, lr}
 802230e:	4e0f      	ldr	r6, [pc, #60]	@ (802234c <sbrk_aligned+0x40>)
 8022310:	460c      	mov	r4, r1
 8022312:	6831      	ldr	r1, [r6, #0]
 8022314:	4605      	mov	r5, r0
 8022316:	b911      	cbnz	r1, 802231e <sbrk_aligned+0x12>
 8022318:	f002 f9ba 	bl	8024690 <_sbrk_r>
 802231c:	6030      	str	r0, [r6, #0]
 802231e:	4621      	mov	r1, r4
 8022320:	4628      	mov	r0, r5
 8022322:	f002 f9b5 	bl	8024690 <_sbrk_r>
 8022326:	1c43      	adds	r3, r0, #1
 8022328:	d103      	bne.n	8022332 <sbrk_aligned+0x26>
 802232a:	f04f 34ff 	mov.w	r4, #4294967295
 802232e:	4620      	mov	r0, r4
 8022330:	bd70      	pop	{r4, r5, r6, pc}
 8022332:	1cc4      	adds	r4, r0, #3
 8022334:	f024 0403 	bic.w	r4, r4, #3
 8022338:	42a0      	cmp	r0, r4
 802233a:	d0f8      	beq.n	802232e <sbrk_aligned+0x22>
 802233c:	1a21      	subs	r1, r4, r0
 802233e:	4628      	mov	r0, r5
 8022340:	f002 f9a6 	bl	8024690 <_sbrk_r>
 8022344:	3001      	adds	r0, #1
 8022346:	d1f2      	bne.n	802232e <sbrk_aligned+0x22>
 8022348:	e7ef      	b.n	802232a <sbrk_aligned+0x1e>
 802234a:	bf00      	nop
 802234c:	200027e8 	.word	0x200027e8

08022350 <_malloc_r>:
 8022350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022354:	1ccd      	adds	r5, r1, #3
 8022356:	f025 0503 	bic.w	r5, r5, #3
 802235a:	3508      	adds	r5, #8
 802235c:	2d0c      	cmp	r5, #12
 802235e:	bf38      	it	cc
 8022360:	250c      	movcc	r5, #12
 8022362:	2d00      	cmp	r5, #0
 8022364:	4606      	mov	r6, r0
 8022366:	db01      	blt.n	802236c <_malloc_r+0x1c>
 8022368:	42a9      	cmp	r1, r5
 802236a:	d904      	bls.n	8022376 <_malloc_r+0x26>
 802236c:	230c      	movs	r3, #12
 802236e:	6033      	str	r3, [r6, #0]
 8022370:	2000      	movs	r0, #0
 8022372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022376:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802244c <_malloc_r+0xfc>
 802237a:	f000 f869 	bl	8022450 <__malloc_lock>
 802237e:	f8d8 3000 	ldr.w	r3, [r8]
 8022382:	461c      	mov	r4, r3
 8022384:	bb44      	cbnz	r4, 80223d8 <_malloc_r+0x88>
 8022386:	4629      	mov	r1, r5
 8022388:	4630      	mov	r0, r6
 802238a:	f7ff ffbf 	bl	802230c <sbrk_aligned>
 802238e:	1c43      	adds	r3, r0, #1
 8022390:	4604      	mov	r4, r0
 8022392:	d158      	bne.n	8022446 <_malloc_r+0xf6>
 8022394:	f8d8 4000 	ldr.w	r4, [r8]
 8022398:	4627      	mov	r7, r4
 802239a:	2f00      	cmp	r7, #0
 802239c:	d143      	bne.n	8022426 <_malloc_r+0xd6>
 802239e:	2c00      	cmp	r4, #0
 80223a0:	d04b      	beq.n	802243a <_malloc_r+0xea>
 80223a2:	6823      	ldr	r3, [r4, #0]
 80223a4:	4639      	mov	r1, r7
 80223a6:	4630      	mov	r0, r6
 80223a8:	eb04 0903 	add.w	r9, r4, r3
 80223ac:	f002 f970 	bl	8024690 <_sbrk_r>
 80223b0:	4581      	cmp	r9, r0
 80223b2:	d142      	bne.n	802243a <_malloc_r+0xea>
 80223b4:	6821      	ldr	r1, [r4, #0]
 80223b6:	1a6d      	subs	r5, r5, r1
 80223b8:	4629      	mov	r1, r5
 80223ba:	4630      	mov	r0, r6
 80223bc:	f7ff ffa6 	bl	802230c <sbrk_aligned>
 80223c0:	3001      	adds	r0, #1
 80223c2:	d03a      	beq.n	802243a <_malloc_r+0xea>
 80223c4:	6823      	ldr	r3, [r4, #0]
 80223c6:	442b      	add	r3, r5
 80223c8:	6023      	str	r3, [r4, #0]
 80223ca:	f8d8 3000 	ldr.w	r3, [r8]
 80223ce:	685a      	ldr	r2, [r3, #4]
 80223d0:	bb62      	cbnz	r2, 802242c <_malloc_r+0xdc>
 80223d2:	f8c8 7000 	str.w	r7, [r8]
 80223d6:	e00f      	b.n	80223f8 <_malloc_r+0xa8>
 80223d8:	6822      	ldr	r2, [r4, #0]
 80223da:	1b52      	subs	r2, r2, r5
 80223dc:	d420      	bmi.n	8022420 <_malloc_r+0xd0>
 80223de:	2a0b      	cmp	r2, #11
 80223e0:	d917      	bls.n	8022412 <_malloc_r+0xc2>
 80223e2:	1961      	adds	r1, r4, r5
 80223e4:	42a3      	cmp	r3, r4
 80223e6:	6025      	str	r5, [r4, #0]
 80223e8:	bf18      	it	ne
 80223ea:	6059      	strne	r1, [r3, #4]
 80223ec:	6863      	ldr	r3, [r4, #4]
 80223ee:	bf08      	it	eq
 80223f0:	f8c8 1000 	streq.w	r1, [r8]
 80223f4:	5162      	str	r2, [r4, r5]
 80223f6:	604b      	str	r3, [r1, #4]
 80223f8:	4630      	mov	r0, r6
 80223fa:	f000 f82f 	bl	802245c <__malloc_unlock>
 80223fe:	f104 000b 	add.w	r0, r4, #11
 8022402:	1d23      	adds	r3, r4, #4
 8022404:	f020 0007 	bic.w	r0, r0, #7
 8022408:	1ac2      	subs	r2, r0, r3
 802240a:	bf1c      	itt	ne
 802240c:	1a1b      	subne	r3, r3, r0
 802240e:	50a3      	strne	r3, [r4, r2]
 8022410:	e7af      	b.n	8022372 <_malloc_r+0x22>
 8022412:	6862      	ldr	r2, [r4, #4]
 8022414:	42a3      	cmp	r3, r4
 8022416:	bf0c      	ite	eq
 8022418:	f8c8 2000 	streq.w	r2, [r8]
 802241c:	605a      	strne	r2, [r3, #4]
 802241e:	e7eb      	b.n	80223f8 <_malloc_r+0xa8>
 8022420:	4623      	mov	r3, r4
 8022422:	6864      	ldr	r4, [r4, #4]
 8022424:	e7ae      	b.n	8022384 <_malloc_r+0x34>
 8022426:	463c      	mov	r4, r7
 8022428:	687f      	ldr	r7, [r7, #4]
 802242a:	e7b6      	b.n	802239a <_malloc_r+0x4a>
 802242c:	461a      	mov	r2, r3
 802242e:	685b      	ldr	r3, [r3, #4]
 8022430:	42a3      	cmp	r3, r4
 8022432:	d1fb      	bne.n	802242c <_malloc_r+0xdc>
 8022434:	2300      	movs	r3, #0
 8022436:	6053      	str	r3, [r2, #4]
 8022438:	e7de      	b.n	80223f8 <_malloc_r+0xa8>
 802243a:	230c      	movs	r3, #12
 802243c:	6033      	str	r3, [r6, #0]
 802243e:	4630      	mov	r0, r6
 8022440:	f000 f80c 	bl	802245c <__malloc_unlock>
 8022444:	e794      	b.n	8022370 <_malloc_r+0x20>
 8022446:	6005      	str	r5, [r0, #0]
 8022448:	e7d6      	b.n	80223f8 <_malloc_r+0xa8>
 802244a:	bf00      	nop
 802244c:	200027ec 	.word	0x200027ec

08022450 <__malloc_lock>:
 8022450:	4801      	ldr	r0, [pc, #4]	@ (8022458 <__malloc_lock+0x8>)
 8022452:	f002 b96a 	b.w	802472a <__retarget_lock_acquire_recursive>
 8022456:	bf00      	nop
 8022458:	20002930 	.word	0x20002930

0802245c <__malloc_unlock>:
 802245c:	4801      	ldr	r0, [pc, #4]	@ (8022464 <__malloc_unlock+0x8>)
 802245e:	f002 b965 	b.w	802472c <__retarget_lock_release_recursive>
 8022462:	bf00      	nop
 8022464:	20002930 	.word	0x20002930

08022468 <mallinfo>:
 8022468:	b510      	push	{r4, lr}
 802246a:	4b03      	ldr	r3, [pc, #12]	@ (8022478 <mallinfo+0x10>)
 802246c:	4604      	mov	r4, r0
 802246e:	6819      	ldr	r1, [r3, #0]
 8022470:	f003 fb5e 	bl	8025b30 <_mallinfo_r>
 8022474:	4620      	mov	r0, r4
 8022476:	bd10      	pop	{r4, pc}
 8022478:	20000614 	.word	0x20000614

0802247c <_realloc_r>:
 802247c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022480:	4680      	mov	r8, r0
 8022482:	4615      	mov	r5, r2
 8022484:	460c      	mov	r4, r1
 8022486:	b921      	cbnz	r1, 8022492 <_realloc_r+0x16>
 8022488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802248c:	4611      	mov	r1, r2
 802248e:	f7ff bf5f 	b.w	8022350 <_malloc_r>
 8022492:	b92a      	cbnz	r2, 80224a0 <_realloc_r+0x24>
 8022494:	f002 ffc8 	bl	8025428 <_free_r>
 8022498:	2400      	movs	r4, #0
 802249a:	4620      	mov	r0, r4
 802249c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80224a0:	f004 f83e 	bl	8026520 <_malloc_usable_size_r>
 80224a4:	4285      	cmp	r5, r0
 80224a6:	4606      	mov	r6, r0
 80224a8:	d802      	bhi.n	80224b0 <_realloc_r+0x34>
 80224aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80224ae:	d8f4      	bhi.n	802249a <_realloc_r+0x1e>
 80224b0:	4629      	mov	r1, r5
 80224b2:	4640      	mov	r0, r8
 80224b4:	f7ff ff4c 	bl	8022350 <_malloc_r>
 80224b8:	4607      	mov	r7, r0
 80224ba:	2800      	cmp	r0, #0
 80224bc:	d0ec      	beq.n	8022498 <_realloc_r+0x1c>
 80224be:	42b5      	cmp	r5, r6
 80224c0:	462a      	mov	r2, r5
 80224c2:	4621      	mov	r1, r4
 80224c4:	bf28      	it	cs
 80224c6:	4632      	movcs	r2, r6
 80224c8:	f002 f939 	bl	802473e <memcpy>
 80224cc:	4621      	mov	r1, r4
 80224ce:	4640      	mov	r0, r8
 80224d0:	f002 ffaa 	bl	8025428 <_free_r>
 80224d4:	463c      	mov	r4, r7
 80224d6:	e7e0      	b.n	802249a <_realloc_r+0x1e>

080224d8 <sulp>:
 80224d8:	b570      	push	{r4, r5, r6, lr}
 80224da:	4604      	mov	r4, r0
 80224dc:	460d      	mov	r5, r1
 80224de:	ec45 4b10 	vmov	d0, r4, r5
 80224e2:	4616      	mov	r6, r2
 80224e4:	f003 fede 	bl	80262a4 <__ulp>
 80224e8:	ec51 0b10 	vmov	r0, r1, d0
 80224ec:	b17e      	cbz	r6, 802250e <sulp+0x36>
 80224ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80224f2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80224f6:	2b00      	cmp	r3, #0
 80224f8:	dd09      	ble.n	802250e <sulp+0x36>
 80224fa:	051b      	lsls	r3, r3, #20
 80224fc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8022500:	2400      	movs	r4, #0
 8022502:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8022506:	4622      	mov	r2, r4
 8022508:	462b      	mov	r3, r5
 802250a:	f7e5 ffbd 	bl	8008488 <__aeabi_dmul>
 802250e:	ec41 0b10 	vmov	d0, r0, r1
 8022512:	bd70      	pop	{r4, r5, r6, pc}
 8022514:	0000      	movs	r0, r0
	...

08022518 <_strtod_l>:
 8022518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802251c:	b09f      	sub	sp, #124	@ 0x7c
 802251e:	460c      	mov	r4, r1
 8022520:	9217      	str	r2, [sp, #92]	@ 0x5c
 8022522:	2200      	movs	r2, #0
 8022524:	921a      	str	r2, [sp, #104]	@ 0x68
 8022526:	9005      	str	r0, [sp, #20]
 8022528:	f04f 0a00 	mov.w	sl, #0
 802252c:	f04f 0b00 	mov.w	fp, #0
 8022530:	460a      	mov	r2, r1
 8022532:	9219      	str	r2, [sp, #100]	@ 0x64
 8022534:	7811      	ldrb	r1, [r2, #0]
 8022536:	292b      	cmp	r1, #43	@ 0x2b
 8022538:	d04a      	beq.n	80225d0 <_strtod_l+0xb8>
 802253a:	d838      	bhi.n	80225ae <_strtod_l+0x96>
 802253c:	290d      	cmp	r1, #13
 802253e:	d832      	bhi.n	80225a6 <_strtod_l+0x8e>
 8022540:	2908      	cmp	r1, #8
 8022542:	d832      	bhi.n	80225aa <_strtod_l+0x92>
 8022544:	2900      	cmp	r1, #0
 8022546:	d03b      	beq.n	80225c0 <_strtod_l+0xa8>
 8022548:	2200      	movs	r2, #0
 802254a:	920b      	str	r2, [sp, #44]	@ 0x2c
 802254c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 802254e:	782a      	ldrb	r2, [r5, #0]
 8022550:	2a30      	cmp	r2, #48	@ 0x30
 8022552:	f040 80b3 	bne.w	80226bc <_strtod_l+0x1a4>
 8022556:	786a      	ldrb	r2, [r5, #1]
 8022558:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802255c:	2a58      	cmp	r2, #88	@ 0x58
 802255e:	d16e      	bne.n	802263e <_strtod_l+0x126>
 8022560:	9302      	str	r3, [sp, #8]
 8022562:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022564:	9301      	str	r3, [sp, #4]
 8022566:	ab1a      	add	r3, sp, #104	@ 0x68
 8022568:	9300      	str	r3, [sp, #0]
 802256a:	4a8e      	ldr	r2, [pc, #568]	@ (80227a4 <_strtod_l+0x28c>)
 802256c:	9805      	ldr	r0, [sp, #20]
 802256e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8022570:	a919      	add	r1, sp, #100	@ 0x64
 8022572:	f003 f80b 	bl	802558c <__gethex>
 8022576:	f010 060f 	ands.w	r6, r0, #15
 802257a:	4604      	mov	r4, r0
 802257c:	d005      	beq.n	802258a <_strtod_l+0x72>
 802257e:	2e06      	cmp	r6, #6
 8022580:	d128      	bne.n	80225d4 <_strtod_l+0xbc>
 8022582:	3501      	adds	r5, #1
 8022584:	2300      	movs	r3, #0
 8022586:	9519      	str	r5, [sp, #100]	@ 0x64
 8022588:	930b      	str	r3, [sp, #44]	@ 0x2c
 802258a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802258c:	2b00      	cmp	r3, #0
 802258e:	f040 858e 	bne.w	80230ae <_strtod_l+0xb96>
 8022592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022594:	b1cb      	cbz	r3, 80225ca <_strtod_l+0xb2>
 8022596:	4652      	mov	r2, sl
 8022598:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 802259c:	ec43 2b10 	vmov	d0, r2, r3
 80225a0:	b01f      	add	sp, #124	@ 0x7c
 80225a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225a6:	2920      	cmp	r1, #32
 80225a8:	d1ce      	bne.n	8022548 <_strtod_l+0x30>
 80225aa:	3201      	adds	r2, #1
 80225ac:	e7c1      	b.n	8022532 <_strtod_l+0x1a>
 80225ae:	292d      	cmp	r1, #45	@ 0x2d
 80225b0:	d1ca      	bne.n	8022548 <_strtod_l+0x30>
 80225b2:	2101      	movs	r1, #1
 80225b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80225b6:	1c51      	adds	r1, r2, #1
 80225b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80225ba:	7852      	ldrb	r2, [r2, #1]
 80225bc:	2a00      	cmp	r2, #0
 80225be:	d1c5      	bne.n	802254c <_strtod_l+0x34>
 80225c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80225c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80225c4:	2b00      	cmp	r3, #0
 80225c6:	f040 8570 	bne.w	80230aa <_strtod_l+0xb92>
 80225ca:	4652      	mov	r2, sl
 80225cc:	465b      	mov	r3, fp
 80225ce:	e7e5      	b.n	802259c <_strtod_l+0x84>
 80225d0:	2100      	movs	r1, #0
 80225d2:	e7ef      	b.n	80225b4 <_strtod_l+0x9c>
 80225d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80225d6:	b13a      	cbz	r2, 80225e8 <_strtod_l+0xd0>
 80225d8:	2135      	movs	r1, #53	@ 0x35
 80225da:	a81c      	add	r0, sp, #112	@ 0x70
 80225dc:	f003 ff5c 	bl	8026498 <__copybits>
 80225e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80225e2:	9805      	ldr	r0, [sp, #20]
 80225e4:	f003 fb2a 	bl	8025c3c <_Bfree>
 80225e8:	3e01      	subs	r6, #1
 80225ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80225ec:	2e04      	cmp	r6, #4
 80225ee:	d806      	bhi.n	80225fe <_strtod_l+0xe6>
 80225f0:	e8df f006 	tbb	[pc, r6]
 80225f4:	201d0314 	.word	0x201d0314
 80225f8:	14          	.byte	0x14
 80225f9:	00          	.byte	0x00
 80225fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80225fe:	05e1      	lsls	r1, r4, #23
 8022600:	bf48      	it	mi
 8022602:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8022606:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802260a:	0d1b      	lsrs	r3, r3, #20
 802260c:	051b      	lsls	r3, r3, #20
 802260e:	2b00      	cmp	r3, #0
 8022610:	d1bb      	bne.n	802258a <_strtod_l+0x72>
 8022612:	f002 f85f 	bl	80246d4 <__errno>
 8022616:	2322      	movs	r3, #34	@ 0x22
 8022618:	6003      	str	r3, [r0, #0]
 802261a:	e7b6      	b.n	802258a <_strtod_l+0x72>
 802261c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8022620:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8022624:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8022628:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802262c:	e7e7      	b.n	80225fe <_strtod_l+0xe6>
 802262e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80227ac <_strtod_l+0x294>
 8022632:	e7e4      	b.n	80225fe <_strtod_l+0xe6>
 8022634:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8022638:	f04f 3aff 	mov.w	sl, #4294967295
 802263c:	e7df      	b.n	80225fe <_strtod_l+0xe6>
 802263e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022640:	1c5a      	adds	r2, r3, #1
 8022642:	9219      	str	r2, [sp, #100]	@ 0x64
 8022644:	785b      	ldrb	r3, [r3, #1]
 8022646:	2b30      	cmp	r3, #48	@ 0x30
 8022648:	d0f9      	beq.n	802263e <_strtod_l+0x126>
 802264a:	2b00      	cmp	r3, #0
 802264c:	d09d      	beq.n	802258a <_strtod_l+0x72>
 802264e:	2301      	movs	r3, #1
 8022650:	9309      	str	r3, [sp, #36]	@ 0x24
 8022652:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022654:	930c      	str	r3, [sp, #48]	@ 0x30
 8022656:	2300      	movs	r3, #0
 8022658:	9308      	str	r3, [sp, #32]
 802265a:	930a      	str	r3, [sp, #40]	@ 0x28
 802265c:	461f      	mov	r7, r3
 802265e:	220a      	movs	r2, #10
 8022660:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8022662:	7805      	ldrb	r5, [r0, #0]
 8022664:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8022668:	b2d9      	uxtb	r1, r3
 802266a:	2909      	cmp	r1, #9
 802266c:	d928      	bls.n	80226c0 <_strtod_l+0x1a8>
 802266e:	494e      	ldr	r1, [pc, #312]	@ (80227a8 <_strtod_l+0x290>)
 8022670:	2201      	movs	r2, #1
 8022672:	f001 ff28 	bl	80244c6 <strncmp>
 8022676:	2800      	cmp	r0, #0
 8022678:	d032      	beq.n	80226e0 <_strtod_l+0x1c8>
 802267a:	2000      	movs	r0, #0
 802267c:	462a      	mov	r2, r5
 802267e:	4681      	mov	r9, r0
 8022680:	463d      	mov	r5, r7
 8022682:	4603      	mov	r3, r0
 8022684:	2a65      	cmp	r2, #101	@ 0x65
 8022686:	d001      	beq.n	802268c <_strtod_l+0x174>
 8022688:	2a45      	cmp	r2, #69	@ 0x45
 802268a:	d114      	bne.n	80226b6 <_strtod_l+0x19e>
 802268c:	b91d      	cbnz	r5, 8022696 <_strtod_l+0x17e>
 802268e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022690:	4302      	orrs	r2, r0
 8022692:	d095      	beq.n	80225c0 <_strtod_l+0xa8>
 8022694:	2500      	movs	r5, #0
 8022696:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8022698:	1c62      	adds	r2, r4, #1
 802269a:	9219      	str	r2, [sp, #100]	@ 0x64
 802269c:	7862      	ldrb	r2, [r4, #1]
 802269e:	2a2b      	cmp	r2, #43	@ 0x2b
 80226a0:	d077      	beq.n	8022792 <_strtod_l+0x27a>
 80226a2:	2a2d      	cmp	r2, #45	@ 0x2d
 80226a4:	d07b      	beq.n	802279e <_strtod_l+0x286>
 80226a6:	f04f 0c00 	mov.w	ip, #0
 80226aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80226ae:	2909      	cmp	r1, #9
 80226b0:	f240 8082 	bls.w	80227b8 <_strtod_l+0x2a0>
 80226b4:	9419      	str	r4, [sp, #100]	@ 0x64
 80226b6:	f04f 0800 	mov.w	r8, #0
 80226ba:	e0a2      	b.n	8022802 <_strtod_l+0x2ea>
 80226bc:	2300      	movs	r3, #0
 80226be:	e7c7      	b.n	8022650 <_strtod_l+0x138>
 80226c0:	2f08      	cmp	r7, #8
 80226c2:	bfd5      	itete	le
 80226c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80226c6:	9908      	ldrgt	r1, [sp, #32]
 80226c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80226cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80226d0:	f100 0001 	add.w	r0, r0, #1
 80226d4:	bfd4      	ite	le
 80226d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80226d8:	9308      	strgt	r3, [sp, #32]
 80226da:	3701      	adds	r7, #1
 80226dc:	9019      	str	r0, [sp, #100]	@ 0x64
 80226de:	e7bf      	b.n	8022660 <_strtod_l+0x148>
 80226e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80226e2:	1c5a      	adds	r2, r3, #1
 80226e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80226e6:	785a      	ldrb	r2, [r3, #1]
 80226e8:	b37f      	cbz	r7, 802274a <_strtod_l+0x232>
 80226ea:	4681      	mov	r9, r0
 80226ec:	463d      	mov	r5, r7
 80226ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80226f2:	2b09      	cmp	r3, #9
 80226f4:	d912      	bls.n	802271c <_strtod_l+0x204>
 80226f6:	2301      	movs	r3, #1
 80226f8:	e7c4      	b.n	8022684 <_strtod_l+0x16c>
 80226fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80226fc:	1c5a      	adds	r2, r3, #1
 80226fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8022700:	785a      	ldrb	r2, [r3, #1]
 8022702:	3001      	adds	r0, #1
 8022704:	2a30      	cmp	r2, #48	@ 0x30
 8022706:	d0f8      	beq.n	80226fa <_strtod_l+0x1e2>
 8022708:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 802270c:	2b08      	cmp	r3, #8
 802270e:	f200 84d3 	bhi.w	80230b8 <_strtod_l+0xba0>
 8022712:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022714:	930c      	str	r3, [sp, #48]	@ 0x30
 8022716:	4681      	mov	r9, r0
 8022718:	2000      	movs	r0, #0
 802271a:	4605      	mov	r5, r0
 802271c:	3a30      	subs	r2, #48	@ 0x30
 802271e:	f100 0301 	add.w	r3, r0, #1
 8022722:	d02a      	beq.n	802277a <_strtod_l+0x262>
 8022724:	4499      	add	r9, r3
 8022726:	eb00 0c05 	add.w	ip, r0, r5
 802272a:	462b      	mov	r3, r5
 802272c:	210a      	movs	r1, #10
 802272e:	4563      	cmp	r3, ip
 8022730:	d10d      	bne.n	802274e <_strtod_l+0x236>
 8022732:	1c69      	adds	r1, r5, #1
 8022734:	4401      	add	r1, r0
 8022736:	4428      	add	r0, r5
 8022738:	2808      	cmp	r0, #8
 802273a:	dc16      	bgt.n	802276a <_strtod_l+0x252>
 802273c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802273e:	230a      	movs	r3, #10
 8022740:	fb03 2300 	mla	r3, r3, r0, r2
 8022744:	930a      	str	r3, [sp, #40]	@ 0x28
 8022746:	2300      	movs	r3, #0
 8022748:	e018      	b.n	802277c <_strtod_l+0x264>
 802274a:	4638      	mov	r0, r7
 802274c:	e7da      	b.n	8022704 <_strtod_l+0x1ec>
 802274e:	2b08      	cmp	r3, #8
 8022750:	f103 0301 	add.w	r3, r3, #1
 8022754:	dc03      	bgt.n	802275e <_strtod_l+0x246>
 8022756:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8022758:	434e      	muls	r6, r1
 802275a:	960a      	str	r6, [sp, #40]	@ 0x28
 802275c:	e7e7      	b.n	802272e <_strtod_l+0x216>
 802275e:	2b10      	cmp	r3, #16
 8022760:	bfde      	ittt	le
 8022762:	9e08      	ldrle	r6, [sp, #32]
 8022764:	434e      	mulle	r6, r1
 8022766:	9608      	strle	r6, [sp, #32]
 8022768:	e7e1      	b.n	802272e <_strtod_l+0x216>
 802276a:	280f      	cmp	r0, #15
 802276c:	dceb      	bgt.n	8022746 <_strtod_l+0x22e>
 802276e:	9808      	ldr	r0, [sp, #32]
 8022770:	230a      	movs	r3, #10
 8022772:	fb03 2300 	mla	r3, r3, r0, r2
 8022776:	9308      	str	r3, [sp, #32]
 8022778:	e7e5      	b.n	8022746 <_strtod_l+0x22e>
 802277a:	4629      	mov	r1, r5
 802277c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802277e:	1c50      	adds	r0, r2, #1
 8022780:	9019      	str	r0, [sp, #100]	@ 0x64
 8022782:	7852      	ldrb	r2, [r2, #1]
 8022784:	4618      	mov	r0, r3
 8022786:	460d      	mov	r5, r1
 8022788:	e7b1      	b.n	80226ee <_strtod_l+0x1d6>
 802278a:	f04f 0900 	mov.w	r9, #0
 802278e:	2301      	movs	r3, #1
 8022790:	e77d      	b.n	802268e <_strtod_l+0x176>
 8022792:	f04f 0c00 	mov.w	ip, #0
 8022796:	1ca2      	adds	r2, r4, #2
 8022798:	9219      	str	r2, [sp, #100]	@ 0x64
 802279a:	78a2      	ldrb	r2, [r4, #2]
 802279c:	e785      	b.n	80226aa <_strtod_l+0x192>
 802279e:	f04f 0c01 	mov.w	ip, #1
 80227a2:	e7f8      	b.n	8022796 <_strtod_l+0x27e>
 80227a4:	08030a68 	.word	0x08030a68
 80227a8:	08030a50 	.word	0x08030a50
 80227ac:	7ff00000 	.word	0x7ff00000
 80227b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80227b2:	1c51      	adds	r1, r2, #1
 80227b4:	9119      	str	r1, [sp, #100]	@ 0x64
 80227b6:	7852      	ldrb	r2, [r2, #1]
 80227b8:	2a30      	cmp	r2, #48	@ 0x30
 80227ba:	d0f9      	beq.n	80227b0 <_strtod_l+0x298>
 80227bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80227c0:	2908      	cmp	r1, #8
 80227c2:	f63f af78 	bhi.w	80226b6 <_strtod_l+0x19e>
 80227c6:	3a30      	subs	r2, #48	@ 0x30
 80227c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80227ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80227cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80227ce:	f04f 080a 	mov.w	r8, #10
 80227d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80227d4:	1c56      	adds	r6, r2, #1
 80227d6:	9619      	str	r6, [sp, #100]	@ 0x64
 80227d8:	7852      	ldrb	r2, [r2, #1]
 80227da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80227de:	f1be 0f09 	cmp.w	lr, #9
 80227e2:	d939      	bls.n	8022858 <_strtod_l+0x340>
 80227e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80227e6:	1a76      	subs	r6, r6, r1
 80227e8:	2e08      	cmp	r6, #8
 80227ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80227ee:	dc03      	bgt.n	80227f8 <_strtod_l+0x2e0>
 80227f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80227f2:	4588      	cmp	r8, r1
 80227f4:	bfa8      	it	ge
 80227f6:	4688      	movge	r8, r1
 80227f8:	f1bc 0f00 	cmp.w	ip, #0
 80227fc:	d001      	beq.n	8022802 <_strtod_l+0x2ea>
 80227fe:	f1c8 0800 	rsb	r8, r8, #0
 8022802:	2d00      	cmp	r5, #0
 8022804:	d14e      	bne.n	80228a4 <_strtod_l+0x38c>
 8022806:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022808:	4308      	orrs	r0, r1
 802280a:	f47f aebe 	bne.w	802258a <_strtod_l+0x72>
 802280e:	2b00      	cmp	r3, #0
 8022810:	f47f aed6 	bne.w	80225c0 <_strtod_l+0xa8>
 8022814:	2a69      	cmp	r2, #105	@ 0x69
 8022816:	d028      	beq.n	802286a <_strtod_l+0x352>
 8022818:	dc25      	bgt.n	8022866 <_strtod_l+0x34e>
 802281a:	2a49      	cmp	r2, #73	@ 0x49
 802281c:	d025      	beq.n	802286a <_strtod_l+0x352>
 802281e:	2a4e      	cmp	r2, #78	@ 0x4e
 8022820:	f47f aece 	bne.w	80225c0 <_strtod_l+0xa8>
 8022824:	499b      	ldr	r1, [pc, #620]	@ (8022a94 <_strtod_l+0x57c>)
 8022826:	a819      	add	r0, sp, #100	@ 0x64
 8022828:	f003 f8d2 	bl	80259d0 <__match>
 802282c:	2800      	cmp	r0, #0
 802282e:	f43f aec7 	beq.w	80225c0 <_strtod_l+0xa8>
 8022832:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022834:	781b      	ldrb	r3, [r3, #0]
 8022836:	2b28      	cmp	r3, #40	@ 0x28
 8022838:	d12e      	bne.n	8022898 <_strtod_l+0x380>
 802283a:	4997      	ldr	r1, [pc, #604]	@ (8022a98 <_strtod_l+0x580>)
 802283c:	aa1c      	add	r2, sp, #112	@ 0x70
 802283e:	a819      	add	r0, sp, #100	@ 0x64
 8022840:	f003 f8da 	bl	80259f8 <__hexnan>
 8022844:	2805      	cmp	r0, #5
 8022846:	d127      	bne.n	8022898 <_strtod_l+0x380>
 8022848:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802284a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 802284e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8022852:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8022856:	e698      	b.n	802258a <_strtod_l+0x72>
 8022858:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802285a:	fb08 2101 	mla	r1, r8, r1, r2
 802285e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8022862:	920e      	str	r2, [sp, #56]	@ 0x38
 8022864:	e7b5      	b.n	80227d2 <_strtod_l+0x2ba>
 8022866:	2a6e      	cmp	r2, #110	@ 0x6e
 8022868:	e7da      	b.n	8022820 <_strtod_l+0x308>
 802286a:	498c      	ldr	r1, [pc, #560]	@ (8022a9c <_strtod_l+0x584>)
 802286c:	a819      	add	r0, sp, #100	@ 0x64
 802286e:	f003 f8af 	bl	80259d0 <__match>
 8022872:	2800      	cmp	r0, #0
 8022874:	f43f aea4 	beq.w	80225c0 <_strtod_l+0xa8>
 8022878:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802287a:	4989      	ldr	r1, [pc, #548]	@ (8022aa0 <_strtod_l+0x588>)
 802287c:	3b01      	subs	r3, #1
 802287e:	a819      	add	r0, sp, #100	@ 0x64
 8022880:	9319      	str	r3, [sp, #100]	@ 0x64
 8022882:	f003 f8a5 	bl	80259d0 <__match>
 8022886:	b910      	cbnz	r0, 802288e <_strtod_l+0x376>
 8022888:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802288a:	3301      	adds	r3, #1
 802288c:	9319      	str	r3, [sp, #100]	@ 0x64
 802288e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8022ab0 <_strtod_l+0x598>
 8022892:	f04f 0a00 	mov.w	sl, #0
 8022896:	e678      	b.n	802258a <_strtod_l+0x72>
 8022898:	4882      	ldr	r0, [pc, #520]	@ (8022aa4 <_strtod_l+0x58c>)
 802289a:	f001 ff61 	bl	8024760 <nan>
 802289e:	ec5b ab10 	vmov	sl, fp, d0
 80228a2:	e672      	b.n	802258a <_strtod_l+0x72>
 80228a4:	eba8 0309 	sub.w	r3, r8, r9
 80228a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80228aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80228ac:	2f00      	cmp	r7, #0
 80228ae:	bf08      	it	eq
 80228b0:	462f      	moveq	r7, r5
 80228b2:	2d10      	cmp	r5, #16
 80228b4:	462c      	mov	r4, r5
 80228b6:	bfa8      	it	ge
 80228b8:	2410      	movge	r4, #16
 80228ba:	f7e5 fd6b 	bl	8008394 <__aeabi_ui2d>
 80228be:	2d09      	cmp	r5, #9
 80228c0:	4682      	mov	sl, r0
 80228c2:	468b      	mov	fp, r1
 80228c4:	dc13      	bgt.n	80228ee <_strtod_l+0x3d6>
 80228c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80228c8:	2b00      	cmp	r3, #0
 80228ca:	f43f ae5e 	beq.w	802258a <_strtod_l+0x72>
 80228ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80228d0:	dd78      	ble.n	80229c4 <_strtod_l+0x4ac>
 80228d2:	2b16      	cmp	r3, #22
 80228d4:	dc5f      	bgt.n	8022996 <_strtod_l+0x47e>
 80228d6:	4974      	ldr	r1, [pc, #464]	@ (8022aa8 <_strtod_l+0x590>)
 80228d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80228dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80228e0:	4652      	mov	r2, sl
 80228e2:	465b      	mov	r3, fp
 80228e4:	f7e5 fdd0 	bl	8008488 <__aeabi_dmul>
 80228e8:	4682      	mov	sl, r0
 80228ea:	468b      	mov	fp, r1
 80228ec:	e64d      	b.n	802258a <_strtod_l+0x72>
 80228ee:	4b6e      	ldr	r3, [pc, #440]	@ (8022aa8 <_strtod_l+0x590>)
 80228f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80228f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80228f8:	f7e5 fdc6 	bl	8008488 <__aeabi_dmul>
 80228fc:	4682      	mov	sl, r0
 80228fe:	9808      	ldr	r0, [sp, #32]
 8022900:	468b      	mov	fp, r1
 8022902:	f7e5 fd47 	bl	8008394 <__aeabi_ui2d>
 8022906:	4602      	mov	r2, r0
 8022908:	460b      	mov	r3, r1
 802290a:	4650      	mov	r0, sl
 802290c:	4659      	mov	r1, fp
 802290e:	f7e5 fc05 	bl	800811c <__adddf3>
 8022912:	2d0f      	cmp	r5, #15
 8022914:	4682      	mov	sl, r0
 8022916:	468b      	mov	fp, r1
 8022918:	ddd5      	ble.n	80228c6 <_strtod_l+0x3ae>
 802291a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802291c:	1b2c      	subs	r4, r5, r4
 802291e:	441c      	add	r4, r3
 8022920:	2c00      	cmp	r4, #0
 8022922:	f340 8096 	ble.w	8022a52 <_strtod_l+0x53a>
 8022926:	f014 030f 	ands.w	r3, r4, #15
 802292a:	d00a      	beq.n	8022942 <_strtod_l+0x42a>
 802292c:	495e      	ldr	r1, [pc, #376]	@ (8022aa8 <_strtod_l+0x590>)
 802292e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8022932:	4652      	mov	r2, sl
 8022934:	465b      	mov	r3, fp
 8022936:	e9d1 0100 	ldrd	r0, r1, [r1]
 802293a:	f7e5 fda5 	bl	8008488 <__aeabi_dmul>
 802293e:	4682      	mov	sl, r0
 8022940:	468b      	mov	fp, r1
 8022942:	f034 040f 	bics.w	r4, r4, #15
 8022946:	d073      	beq.n	8022a30 <_strtod_l+0x518>
 8022948:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 802294c:	dd48      	ble.n	80229e0 <_strtod_l+0x4c8>
 802294e:	2400      	movs	r4, #0
 8022950:	46a0      	mov	r8, r4
 8022952:	940a      	str	r4, [sp, #40]	@ 0x28
 8022954:	46a1      	mov	r9, r4
 8022956:	9a05      	ldr	r2, [sp, #20]
 8022958:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8022ab0 <_strtod_l+0x598>
 802295c:	2322      	movs	r3, #34	@ 0x22
 802295e:	6013      	str	r3, [r2, #0]
 8022960:	f04f 0a00 	mov.w	sl, #0
 8022964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022966:	2b00      	cmp	r3, #0
 8022968:	f43f ae0f 	beq.w	802258a <_strtod_l+0x72>
 802296c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802296e:	9805      	ldr	r0, [sp, #20]
 8022970:	f003 f964 	bl	8025c3c <_Bfree>
 8022974:	9805      	ldr	r0, [sp, #20]
 8022976:	4649      	mov	r1, r9
 8022978:	f003 f960 	bl	8025c3c <_Bfree>
 802297c:	9805      	ldr	r0, [sp, #20]
 802297e:	4641      	mov	r1, r8
 8022980:	f003 f95c 	bl	8025c3c <_Bfree>
 8022984:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022986:	9805      	ldr	r0, [sp, #20]
 8022988:	f003 f958 	bl	8025c3c <_Bfree>
 802298c:	9805      	ldr	r0, [sp, #20]
 802298e:	4621      	mov	r1, r4
 8022990:	f003 f954 	bl	8025c3c <_Bfree>
 8022994:	e5f9      	b.n	802258a <_strtod_l+0x72>
 8022996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022998:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 802299c:	4293      	cmp	r3, r2
 802299e:	dbbc      	blt.n	802291a <_strtod_l+0x402>
 80229a0:	4c41      	ldr	r4, [pc, #260]	@ (8022aa8 <_strtod_l+0x590>)
 80229a2:	f1c5 050f 	rsb	r5, r5, #15
 80229a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80229aa:	4652      	mov	r2, sl
 80229ac:	465b      	mov	r3, fp
 80229ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80229b2:	f7e5 fd69 	bl	8008488 <__aeabi_dmul>
 80229b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80229b8:	1b5d      	subs	r5, r3, r5
 80229ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80229be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80229c2:	e78f      	b.n	80228e4 <_strtod_l+0x3cc>
 80229c4:	3316      	adds	r3, #22
 80229c6:	dba8      	blt.n	802291a <_strtod_l+0x402>
 80229c8:	4b37      	ldr	r3, [pc, #220]	@ (8022aa8 <_strtod_l+0x590>)
 80229ca:	eba9 0808 	sub.w	r8, r9, r8
 80229ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80229d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80229d6:	4650      	mov	r0, sl
 80229d8:	4659      	mov	r1, fp
 80229da:	f7e5 fe7f 	bl	80086dc <__aeabi_ddiv>
 80229de:	e783      	b.n	80228e8 <_strtod_l+0x3d0>
 80229e0:	4b32      	ldr	r3, [pc, #200]	@ (8022aac <_strtod_l+0x594>)
 80229e2:	9308      	str	r3, [sp, #32]
 80229e4:	2300      	movs	r3, #0
 80229e6:	1124      	asrs	r4, r4, #4
 80229e8:	4650      	mov	r0, sl
 80229ea:	4659      	mov	r1, fp
 80229ec:	461e      	mov	r6, r3
 80229ee:	2c01      	cmp	r4, #1
 80229f0:	dc21      	bgt.n	8022a36 <_strtod_l+0x51e>
 80229f2:	b10b      	cbz	r3, 80229f8 <_strtod_l+0x4e0>
 80229f4:	4682      	mov	sl, r0
 80229f6:	468b      	mov	fp, r1
 80229f8:	492c      	ldr	r1, [pc, #176]	@ (8022aac <_strtod_l+0x594>)
 80229fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80229fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8022a02:	4652      	mov	r2, sl
 8022a04:	465b      	mov	r3, fp
 8022a06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022a0a:	f7e5 fd3d 	bl	8008488 <__aeabi_dmul>
 8022a0e:	4b28      	ldr	r3, [pc, #160]	@ (8022ab0 <_strtod_l+0x598>)
 8022a10:	460a      	mov	r2, r1
 8022a12:	400b      	ands	r3, r1
 8022a14:	4927      	ldr	r1, [pc, #156]	@ (8022ab4 <_strtod_l+0x59c>)
 8022a16:	428b      	cmp	r3, r1
 8022a18:	4682      	mov	sl, r0
 8022a1a:	d898      	bhi.n	802294e <_strtod_l+0x436>
 8022a1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8022a20:	428b      	cmp	r3, r1
 8022a22:	bf86      	itte	hi
 8022a24:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8022ab8 <_strtod_l+0x5a0>
 8022a28:	f04f 3aff 	movhi.w	sl, #4294967295
 8022a2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8022a30:	2300      	movs	r3, #0
 8022a32:	9308      	str	r3, [sp, #32]
 8022a34:	e07a      	b.n	8022b2c <_strtod_l+0x614>
 8022a36:	07e2      	lsls	r2, r4, #31
 8022a38:	d505      	bpl.n	8022a46 <_strtod_l+0x52e>
 8022a3a:	9b08      	ldr	r3, [sp, #32]
 8022a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a40:	f7e5 fd22 	bl	8008488 <__aeabi_dmul>
 8022a44:	2301      	movs	r3, #1
 8022a46:	9a08      	ldr	r2, [sp, #32]
 8022a48:	3208      	adds	r2, #8
 8022a4a:	3601      	adds	r6, #1
 8022a4c:	1064      	asrs	r4, r4, #1
 8022a4e:	9208      	str	r2, [sp, #32]
 8022a50:	e7cd      	b.n	80229ee <_strtod_l+0x4d6>
 8022a52:	d0ed      	beq.n	8022a30 <_strtod_l+0x518>
 8022a54:	4264      	negs	r4, r4
 8022a56:	f014 020f 	ands.w	r2, r4, #15
 8022a5a:	d00a      	beq.n	8022a72 <_strtod_l+0x55a>
 8022a5c:	4b12      	ldr	r3, [pc, #72]	@ (8022aa8 <_strtod_l+0x590>)
 8022a5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022a62:	4650      	mov	r0, sl
 8022a64:	4659      	mov	r1, fp
 8022a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a6a:	f7e5 fe37 	bl	80086dc <__aeabi_ddiv>
 8022a6e:	4682      	mov	sl, r0
 8022a70:	468b      	mov	fp, r1
 8022a72:	1124      	asrs	r4, r4, #4
 8022a74:	d0dc      	beq.n	8022a30 <_strtod_l+0x518>
 8022a76:	2c1f      	cmp	r4, #31
 8022a78:	dd20      	ble.n	8022abc <_strtod_l+0x5a4>
 8022a7a:	2400      	movs	r4, #0
 8022a7c:	46a0      	mov	r8, r4
 8022a7e:	940a      	str	r4, [sp, #40]	@ 0x28
 8022a80:	46a1      	mov	r9, r4
 8022a82:	9a05      	ldr	r2, [sp, #20]
 8022a84:	2322      	movs	r3, #34	@ 0x22
 8022a86:	f04f 0a00 	mov.w	sl, #0
 8022a8a:	f04f 0b00 	mov.w	fp, #0
 8022a8e:	6013      	str	r3, [r2, #0]
 8022a90:	e768      	b.n	8022964 <_strtod_l+0x44c>
 8022a92:	bf00      	nop
 8022a94:	08030bb6 	.word	0x08030bb6
 8022a98:	08030a54 	.word	0x08030a54
 8022a9c:	08030bae 	.word	0x08030bae
 8022aa0:	08030c5e 	.word	0x08030c5e
 8022aa4:	08030a4f 	.word	0x08030a4f
 8022aa8:	08030dc0 	.word	0x08030dc0
 8022aac:	08030d98 	.word	0x08030d98
 8022ab0:	7ff00000 	.word	0x7ff00000
 8022ab4:	7ca00000 	.word	0x7ca00000
 8022ab8:	7fefffff 	.word	0x7fefffff
 8022abc:	f014 0310 	ands.w	r3, r4, #16
 8022ac0:	bf18      	it	ne
 8022ac2:	236a      	movne	r3, #106	@ 0x6a
 8022ac4:	4ea9      	ldr	r6, [pc, #676]	@ (8022d6c <_strtod_l+0x854>)
 8022ac6:	9308      	str	r3, [sp, #32]
 8022ac8:	4650      	mov	r0, sl
 8022aca:	4659      	mov	r1, fp
 8022acc:	2300      	movs	r3, #0
 8022ace:	07e2      	lsls	r2, r4, #31
 8022ad0:	d504      	bpl.n	8022adc <_strtod_l+0x5c4>
 8022ad2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8022ad6:	f7e5 fcd7 	bl	8008488 <__aeabi_dmul>
 8022ada:	2301      	movs	r3, #1
 8022adc:	1064      	asrs	r4, r4, #1
 8022ade:	f106 0608 	add.w	r6, r6, #8
 8022ae2:	d1f4      	bne.n	8022ace <_strtod_l+0x5b6>
 8022ae4:	b10b      	cbz	r3, 8022aea <_strtod_l+0x5d2>
 8022ae6:	4682      	mov	sl, r0
 8022ae8:	468b      	mov	fp, r1
 8022aea:	9b08      	ldr	r3, [sp, #32]
 8022aec:	b1b3      	cbz	r3, 8022b1c <_strtod_l+0x604>
 8022aee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8022af2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8022af6:	2b00      	cmp	r3, #0
 8022af8:	4659      	mov	r1, fp
 8022afa:	dd0f      	ble.n	8022b1c <_strtod_l+0x604>
 8022afc:	2b1f      	cmp	r3, #31
 8022afe:	dd55      	ble.n	8022bac <_strtod_l+0x694>
 8022b00:	2b34      	cmp	r3, #52	@ 0x34
 8022b02:	bfde      	ittt	le
 8022b04:	f04f 33ff 	movle.w	r3, #4294967295
 8022b08:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8022b0c:	4093      	lslle	r3, r2
 8022b0e:	f04f 0a00 	mov.w	sl, #0
 8022b12:	bfcc      	ite	gt
 8022b14:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8022b18:	ea03 0b01 	andle.w	fp, r3, r1
 8022b1c:	2200      	movs	r2, #0
 8022b1e:	2300      	movs	r3, #0
 8022b20:	4650      	mov	r0, sl
 8022b22:	4659      	mov	r1, fp
 8022b24:	f7e5 ff18 	bl	8008958 <__aeabi_dcmpeq>
 8022b28:	2800      	cmp	r0, #0
 8022b2a:	d1a6      	bne.n	8022a7a <_strtod_l+0x562>
 8022b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022b2e:	9300      	str	r3, [sp, #0]
 8022b30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8022b32:	9805      	ldr	r0, [sp, #20]
 8022b34:	462b      	mov	r3, r5
 8022b36:	463a      	mov	r2, r7
 8022b38:	f003 f8e8 	bl	8025d0c <__s2b>
 8022b3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8022b3e:	2800      	cmp	r0, #0
 8022b40:	f43f af05 	beq.w	802294e <_strtod_l+0x436>
 8022b44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022b46:	2a00      	cmp	r2, #0
 8022b48:	eba9 0308 	sub.w	r3, r9, r8
 8022b4c:	bfa8      	it	ge
 8022b4e:	2300      	movge	r3, #0
 8022b50:	9312      	str	r3, [sp, #72]	@ 0x48
 8022b52:	2400      	movs	r4, #0
 8022b54:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8022b58:	9316      	str	r3, [sp, #88]	@ 0x58
 8022b5a:	46a0      	mov	r8, r4
 8022b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022b5e:	9805      	ldr	r0, [sp, #20]
 8022b60:	6859      	ldr	r1, [r3, #4]
 8022b62:	f003 f82b 	bl	8025bbc <_Balloc>
 8022b66:	4681      	mov	r9, r0
 8022b68:	2800      	cmp	r0, #0
 8022b6a:	f43f aef4 	beq.w	8022956 <_strtod_l+0x43e>
 8022b6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022b70:	691a      	ldr	r2, [r3, #16]
 8022b72:	3202      	adds	r2, #2
 8022b74:	f103 010c 	add.w	r1, r3, #12
 8022b78:	0092      	lsls	r2, r2, #2
 8022b7a:	300c      	adds	r0, #12
 8022b7c:	f001 fddf 	bl	802473e <memcpy>
 8022b80:	ec4b ab10 	vmov	d0, sl, fp
 8022b84:	9805      	ldr	r0, [sp, #20]
 8022b86:	aa1c      	add	r2, sp, #112	@ 0x70
 8022b88:	a91b      	add	r1, sp, #108	@ 0x6c
 8022b8a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8022b8e:	f003 fbf9 	bl	8026384 <__d2b>
 8022b92:	901a      	str	r0, [sp, #104]	@ 0x68
 8022b94:	2800      	cmp	r0, #0
 8022b96:	f43f aede 	beq.w	8022956 <_strtod_l+0x43e>
 8022b9a:	9805      	ldr	r0, [sp, #20]
 8022b9c:	2101      	movs	r1, #1
 8022b9e:	f003 f94b 	bl	8025e38 <__i2b>
 8022ba2:	4680      	mov	r8, r0
 8022ba4:	b948      	cbnz	r0, 8022bba <_strtod_l+0x6a2>
 8022ba6:	f04f 0800 	mov.w	r8, #0
 8022baa:	e6d4      	b.n	8022956 <_strtod_l+0x43e>
 8022bac:	f04f 32ff 	mov.w	r2, #4294967295
 8022bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8022bb4:	ea03 0a0a 	and.w	sl, r3, sl
 8022bb8:	e7b0      	b.n	8022b1c <_strtod_l+0x604>
 8022bba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8022bbc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8022bbe:	2d00      	cmp	r5, #0
 8022bc0:	bfab      	itete	ge
 8022bc2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8022bc4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8022bc6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8022bc8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8022bca:	bfac      	ite	ge
 8022bcc:	18ef      	addge	r7, r5, r3
 8022bce:	1b5e      	sublt	r6, r3, r5
 8022bd0:	9b08      	ldr	r3, [sp, #32]
 8022bd2:	1aed      	subs	r5, r5, r3
 8022bd4:	4415      	add	r5, r2
 8022bd6:	4b66      	ldr	r3, [pc, #408]	@ (8022d70 <_strtod_l+0x858>)
 8022bd8:	3d01      	subs	r5, #1
 8022bda:	429d      	cmp	r5, r3
 8022bdc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8022be0:	da50      	bge.n	8022c84 <_strtod_l+0x76c>
 8022be2:	1b5b      	subs	r3, r3, r5
 8022be4:	2b1f      	cmp	r3, #31
 8022be6:	eba2 0203 	sub.w	r2, r2, r3
 8022bea:	f04f 0101 	mov.w	r1, #1
 8022bee:	dc3d      	bgt.n	8022c6c <_strtod_l+0x754>
 8022bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8022bf4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022bf6:	2300      	movs	r3, #0
 8022bf8:	9310      	str	r3, [sp, #64]	@ 0x40
 8022bfa:	18bd      	adds	r5, r7, r2
 8022bfc:	9b08      	ldr	r3, [sp, #32]
 8022bfe:	42af      	cmp	r7, r5
 8022c00:	4416      	add	r6, r2
 8022c02:	441e      	add	r6, r3
 8022c04:	463b      	mov	r3, r7
 8022c06:	bfa8      	it	ge
 8022c08:	462b      	movge	r3, r5
 8022c0a:	42b3      	cmp	r3, r6
 8022c0c:	bfa8      	it	ge
 8022c0e:	4633      	movge	r3, r6
 8022c10:	2b00      	cmp	r3, #0
 8022c12:	bfc2      	ittt	gt
 8022c14:	1aed      	subgt	r5, r5, r3
 8022c16:	1af6      	subgt	r6, r6, r3
 8022c18:	1aff      	subgt	r7, r7, r3
 8022c1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8022c1c:	2b00      	cmp	r3, #0
 8022c1e:	dd16      	ble.n	8022c4e <_strtod_l+0x736>
 8022c20:	4641      	mov	r1, r8
 8022c22:	9805      	ldr	r0, [sp, #20]
 8022c24:	461a      	mov	r2, r3
 8022c26:	f003 f9c7 	bl	8025fb8 <__pow5mult>
 8022c2a:	4680      	mov	r8, r0
 8022c2c:	2800      	cmp	r0, #0
 8022c2e:	d0ba      	beq.n	8022ba6 <_strtod_l+0x68e>
 8022c30:	4601      	mov	r1, r0
 8022c32:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8022c34:	9805      	ldr	r0, [sp, #20]
 8022c36:	f003 f915 	bl	8025e64 <__multiply>
 8022c3a:	900e      	str	r0, [sp, #56]	@ 0x38
 8022c3c:	2800      	cmp	r0, #0
 8022c3e:	f43f ae8a 	beq.w	8022956 <_strtod_l+0x43e>
 8022c42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8022c44:	9805      	ldr	r0, [sp, #20]
 8022c46:	f002 fff9 	bl	8025c3c <_Bfree>
 8022c4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022c4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8022c4e:	2d00      	cmp	r5, #0
 8022c50:	dc1d      	bgt.n	8022c8e <_strtod_l+0x776>
 8022c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022c54:	2b00      	cmp	r3, #0
 8022c56:	dd23      	ble.n	8022ca0 <_strtod_l+0x788>
 8022c58:	4649      	mov	r1, r9
 8022c5a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022c5c:	9805      	ldr	r0, [sp, #20]
 8022c5e:	f003 f9ab 	bl	8025fb8 <__pow5mult>
 8022c62:	4681      	mov	r9, r0
 8022c64:	b9e0      	cbnz	r0, 8022ca0 <_strtod_l+0x788>
 8022c66:	f04f 0900 	mov.w	r9, #0
 8022c6a:	e674      	b.n	8022956 <_strtod_l+0x43e>
 8022c6c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8022c70:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8022c74:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8022c78:	35e2      	adds	r5, #226	@ 0xe2
 8022c7a:	fa01 f305 	lsl.w	r3, r1, r5
 8022c7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8022c80:	9113      	str	r1, [sp, #76]	@ 0x4c
 8022c82:	e7ba      	b.n	8022bfa <_strtod_l+0x6e2>
 8022c84:	2300      	movs	r3, #0
 8022c86:	9310      	str	r3, [sp, #64]	@ 0x40
 8022c88:	2301      	movs	r3, #1
 8022c8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022c8c:	e7b5      	b.n	8022bfa <_strtod_l+0x6e2>
 8022c8e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8022c90:	9805      	ldr	r0, [sp, #20]
 8022c92:	462a      	mov	r2, r5
 8022c94:	f003 f9ea 	bl	802606c <__lshift>
 8022c98:	901a      	str	r0, [sp, #104]	@ 0x68
 8022c9a:	2800      	cmp	r0, #0
 8022c9c:	d1d9      	bne.n	8022c52 <_strtod_l+0x73a>
 8022c9e:	e65a      	b.n	8022956 <_strtod_l+0x43e>
 8022ca0:	2e00      	cmp	r6, #0
 8022ca2:	dd07      	ble.n	8022cb4 <_strtod_l+0x79c>
 8022ca4:	4649      	mov	r1, r9
 8022ca6:	9805      	ldr	r0, [sp, #20]
 8022ca8:	4632      	mov	r2, r6
 8022caa:	f003 f9df 	bl	802606c <__lshift>
 8022cae:	4681      	mov	r9, r0
 8022cb0:	2800      	cmp	r0, #0
 8022cb2:	d0d8      	beq.n	8022c66 <_strtod_l+0x74e>
 8022cb4:	2f00      	cmp	r7, #0
 8022cb6:	dd08      	ble.n	8022cca <_strtod_l+0x7b2>
 8022cb8:	4641      	mov	r1, r8
 8022cba:	9805      	ldr	r0, [sp, #20]
 8022cbc:	463a      	mov	r2, r7
 8022cbe:	f003 f9d5 	bl	802606c <__lshift>
 8022cc2:	4680      	mov	r8, r0
 8022cc4:	2800      	cmp	r0, #0
 8022cc6:	f43f ae46 	beq.w	8022956 <_strtod_l+0x43e>
 8022cca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8022ccc:	9805      	ldr	r0, [sp, #20]
 8022cce:	464a      	mov	r2, r9
 8022cd0:	f003 fa54 	bl	802617c <__mdiff>
 8022cd4:	4604      	mov	r4, r0
 8022cd6:	2800      	cmp	r0, #0
 8022cd8:	f43f ae3d 	beq.w	8022956 <_strtod_l+0x43e>
 8022cdc:	68c3      	ldr	r3, [r0, #12]
 8022cde:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022ce0:	2300      	movs	r3, #0
 8022ce2:	60c3      	str	r3, [r0, #12]
 8022ce4:	4641      	mov	r1, r8
 8022ce6:	f003 fa2d 	bl	8026144 <__mcmp>
 8022cea:	2800      	cmp	r0, #0
 8022cec:	da46      	bge.n	8022d7c <_strtod_l+0x864>
 8022cee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022cf0:	ea53 030a 	orrs.w	r3, r3, sl
 8022cf4:	d16c      	bne.n	8022dd0 <_strtod_l+0x8b8>
 8022cf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8022cfa:	2b00      	cmp	r3, #0
 8022cfc:	d168      	bne.n	8022dd0 <_strtod_l+0x8b8>
 8022cfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8022d02:	0d1b      	lsrs	r3, r3, #20
 8022d04:	051b      	lsls	r3, r3, #20
 8022d06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8022d0a:	d961      	bls.n	8022dd0 <_strtod_l+0x8b8>
 8022d0c:	6963      	ldr	r3, [r4, #20]
 8022d0e:	b913      	cbnz	r3, 8022d16 <_strtod_l+0x7fe>
 8022d10:	6923      	ldr	r3, [r4, #16]
 8022d12:	2b01      	cmp	r3, #1
 8022d14:	dd5c      	ble.n	8022dd0 <_strtod_l+0x8b8>
 8022d16:	4621      	mov	r1, r4
 8022d18:	2201      	movs	r2, #1
 8022d1a:	9805      	ldr	r0, [sp, #20]
 8022d1c:	f003 f9a6 	bl	802606c <__lshift>
 8022d20:	4641      	mov	r1, r8
 8022d22:	4604      	mov	r4, r0
 8022d24:	f003 fa0e 	bl	8026144 <__mcmp>
 8022d28:	2800      	cmp	r0, #0
 8022d2a:	dd51      	ble.n	8022dd0 <_strtod_l+0x8b8>
 8022d2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8022d30:	9a08      	ldr	r2, [sp, #32]
 8022d32:	0d1b      	lsrs	r3, r3, #20
 8022d34:	051b      	lsls	r3, r3, #20
 8022d36:	2a00      	cmp	r2, #0
 8022d38:	d06b      	beq.n	8022e12 <_strtod_l+0x8fa>
 8022d3a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8022d3e:	d868      	bhi.n	8022e12 <_strtod_l+0x8fa>
 8022d40:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8022d44:	f67f ae9d 	bls.w	8022a82 <_strtod_l+0x56a>
 8022d48:	4b0a      	ldr	r3, [pc, #40]	@ (8022d74 <_strtod_l+0x85c>)
 8022d4a:	4650      	mov	r0, sl
 8022d4c:	4659      	mov	r1, fp
 8022d4e:	2200      	movs	r2, #0
 8022d50:	f7e5 fb9a 	bl	8008488 <__aeabi_dmul>
 8022d54:	4b08      	ldr	r3, [pc, #32]	@ (8022d78 <_strtod_l+0x860>)
 8022d56:	400b      	ands	r3, r1
 8022d58:	4682      	mov	sl, r0
 8022d5a:	468b      	mov	fp, r1
 8022d5c:	2b00      	cmp	r3, #0
 8022d5e:	f47f ae05 	bne.w	802296c <_strtod_l+0x454>
 8022d62:	9a05      	ldr	r2, [sp, #20]
 8022d64:	2322      	movs	r3, #34	@ 0x22
 8022d66:	6013      	str	r3, [r2, #0]
 8022d68:	e600      	b.n	802296c <_strtod_l+0x454>
 8022d6a:	bf00      	nop
 8022d6c:	08030a80 	.word	0x08030a80
 8022d70:	fffffc02 	.word	0xfffffc02
 8022d74:	39500000 	.word	0x39500000
 8022d78:	7ff00000 	.word	0x7ff00000
 8022d7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8022d80:	d165      	bne.n	8022e4e <_strtod_l+0x936>
 8022d82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8022d84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8022d88:	b35a      	cbz	r2, 8022de2 <_strtod_l+0x8ca>
 8022d8a:	4a9f      	ldr	r2, [pc, #636]	@ (8023008 <_strtod_l+0xaf0>)
 8022d8c:	4293      	cmp	r3, r2
 8022d8e:	d12b      	bne.n	8022de8 <_strtod_l+0x8d0>
 8022d90:	9b08      	ldr	r3, [sp, #32]
 8022d92:	4651      	mov	r1, sl
 8022d94:	b303      	cbz	r3, 8022dd8 <_strtod_l+0x8c0>
 8022d96:	4b9d      	ldr	r3, [pc, #628]	@ (802300c <_strtod_l+0xaf4>)
 8022d98:	465a      	mov	r2, fp
 8022d9a:	4013      	ands	r3, r2
 8022d9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8022da0:	f04f 32ff 	mov.w	r2, #4294967295
 8022da4:	d81b      	bhi.n	8022dde <_strtod_l+0x8c6>
 8022da6:	0d1b      	lsrs	r3, r3, #20
 8022da8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8022dac:	fa02 f303 	lsl.w	r3, r2, r3
 8022db0:	4299      	cmp	r1, r3
 8022db2:	d119      	bne.n	8022de8 <_strtod_l+0x8d0>
 8022db4:	4b96      	ldr	r3, [pc, #600]	@ (8023010 <_strtod_l+0xaf8>)
 8022db6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022db8:	429a      	cmp	r2, r3
 8022dba:	d102      	bne.n	8022dc2 <_strtod_l+0x8aa>
 8022dbc:	3101      	adds	r1, #1
 8022dbe:	f43f adca 	beq.w	8022956 <_strtod_l+0x43e>
 8022dc2:	4b92      	ldr	r3, [pc, #584]	@ (802300c <_strtod_l+0xaf4>)
 8022dc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022dc6:	401a      	ands	r2, r3
 8022dc8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8022dcc:	f04f 0a00 	mov.w	sl, #0
 8022dd0:	9b08      	ldr	r3, [sp, #32]
 8022dd2:	2b00      	cmp	r3, #0
 8022dd4:	d1b8      	bne.n	8022d48 <_strtod_l+0x830>
 8022dd6:	e5c9      	b.n	802296c <_strtod_l+0x454>
 8022dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8022ddc:	e7e8      	b.n	8022db0 <_strtod_l+0x898>
 8022dde:	4613      	mov	r3, r2
 8022de0:	e7e6      	b.n	8022db0 <_strtod_l+0x898>
 8022de2:	ea53 030a 	orrs.w	r3, r3, sl
 8022de6:	d0a1      	beq.n	8022d2c <_strtod_l+0x814>
 8022de8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022dea:	b1db      	cbz	r3, 8022e24 <_strtod_l+0x90c>
 8022dec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022dee:	4213      	tst	r3, r2
 8022df0:	d0ee      	beq.n	8022dd0 <_strtod_l+0x8b8>
 8022df2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022df4:	9a08      	ldr	r2, [sp, #32]
 8022df6:	4650      	mov	r0, sl
 8022df8:	4659      	mov	r1, fp
 8022dfa:	b1bb      	cbz	r3, 8022e2c <_strtod_l+0x914>
 8022dfc:	f7ff fb6c 	bl	80224d8 <sulp>
 8022e00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8022e04:	ec53 2b10 	vmov	r2, r3, d0
 8022e08:	f7e5 f988 	bl	800811c <__adddf3>
 8022e0c:	4682      	mov	sl, r0
 8022e0e:	468b      	mov	fp, r1
 8022e10:	e7de      	b.n	8022dd0 <_strtod_l+0x8b8>
 8022e12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8022e16:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8022e1a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8022e1e:	f04f 3aff 	mov.w	sl, #4294967295
 8022e22:	e7d5      	b.n	8022dd0 <_strtod_l+0x8b8>
 8022e24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022e26:	ea13 0f0a 	tst.w	r3, sl
 8022e2a:	e7e1      	b.n	8022df0 <_strtod_l+0x8d8>
 8022e2c:	f7ff fb54 	bl	80224d8 <sulp>
 8022e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8022e34:	ec53 2b10 	vmov	r2, r3, d0
 8022e38:	f7e5 f96e 	bl	8008118 <__aeabi_dsub>
 8022e3c:	2200      	movs	r2, #0
 8022e3e:	2300      	movs	r3, #0
 8022e40:	4682      	mov	sl, r0
 8022e42:	468b      	mov	fp, r1
 8022e44:	f7e5 fd88 	bl	8008958 <__aeabi_dcmpeq>
 8022e48:	2800      	cmp	r0, #0
 8022e4a:	d0c1      	beq.n	8022dd0 <_strtod_l+0x8b8>
 8022e4c:	e619      	b.n	8022a82 <_strtod_l+0x56a>
 8022e4e:	4641      	mov	r1, r8
 8022e50:	4620      	mov	r0, r4
 8022e52:	f003 faef 	bl	8026434 <__ratio>
 8022e56:	ec57 6b10 	vmov	r6, r7, d0
 8022e5a:	2200      	movs	r2, #0
 8022e5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8022e60:	4630      	mov	r0, r6
 8022e62:	4639      	mov	r1, r7
 8022e64:	f7e5 fd8c 	bl	8008980 <__aeabi_dcmple>
 8022e68:	2800      	cmp	r0, #0
 8022e6a:	d06f      	beq.n	8022f4c <_strtod_l+0xa34>
 8022e6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022e6e:	2b00      	cmp	r3, #0
 8022e70:	d17a      	bne.n	8022f68 <_strtod_l+0xa50>
 8022e72:	f1ba 0f00 	cmp.w	sl, #0
 8022e76:	d158      	bne.n	8022f2a <_strtod_l+0xa12>
 8022e78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022e7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022e7e:	2b00      	cmp	r3, #0
 8022e80:	d15a      	bne.n	8022f38 <_strtod_l+0xa20>
 8022e82:	4b64      	ldr	r3, [pc, #400]	@ (8023014 <_strtod_l+0xafc>)
 8022e84:	2200      	movs	r2, #0
 8022e86:	4630      	mov	r0, r6
 8022e88:	4639      	mov	r1, r7
 8022e8a:	f7e5 fd6f 	bl	800896c <__aeabi_dcmplt>
 8022e8e:	2800      	cmp	r0, #0
 8022e90:	d159      	bne.n	8022f46 <_strtod_l+0xa2e>
 8022e92:	4630      	mov	r0, r6
 8022e94:	4639      	mov	r1, r7
 8022e96:	4b60      	ldr	r3, [pc, #384]	@ (8023018 <_strtod_l+0xb00>)
 8022e98:	2200      	movs	r2, #0
 8022e9a:	f7e5 faf5 	bl	8008488 <__aeabi_dmul>
 8022e9e:	4606      	mov	r6, r0
 8022ea0:	460f      	mov	r7, r1
 8022ea2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8022ea6:	9606      	str	r6, [sp, #24]
 8022ea8:	9307      	str	r3, [sp, #28]
 8022eaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022eae:	4d57      	ldr	r5, [pc, #348]	@ (802300c <_strtod_l+0xaf4>)
 8022eb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8022eb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022eb6:	401d      	ands	r5, r3
 8022eb8:	4b58      	ldr	r3, [pc, #352]	@ (802301c <_strtod_l+0xb04>)
 8022eba:	429d      	cmp	r5, r3
 8022ebc:	f040 80b2 	bne.w	8023024 <_strtod_l+0xb0c>
 8022ec0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022ec2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8022ec6:	ec4b ab10 	vmov	d0, sl, fp
 8022eca:	f003 f9eb 	bl	80262a4 <__ulp>
 8022ece:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022ed2:	ec51 0b10 	vmov	r0, r1, d0
 8022ed6:	f7e5 fad7 	bl	8008488 <__aeabi_dmul>
 8022eda:	4652      	mov	r2, sl
 8022edc:	465b      	mov	r3, fp
 8022ede:	f7e5 f91d 	bl	800811c <__adddf3>
 8022ee2:	460b      	mov	r3, r1
 8022ee4:	4949      	ldr	r1, [pc, #292]	@ (802300c <_strtod_l+0xaf4>)
 8022ee6:	4a4e      	ldr	r2, [pc, #312]	@ (8023020 <_strtod_l+0xb08>)
 8022ee8:	4019      	ands	r1, r3
 8022eea:	4291      	cmp	r1, r2
 8022eec:	4682      	mov	sl, r0
 8022eee:	d942      	bls.n	8022f76 <_strtod_l+0xa5e>
 8022ef0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022ef2:	4b47      	ldr	r3, [pc, #284]	@ (8023010 <_strtod_l+0xaf8>)
 8022ef4:	429a      	cmp	r2, r3
 8022ef6:	d103      	bne.n	8022f00 <_strtod_l+0x9e8>
 8022ef8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022efa:	3301      	adds	r3, #1
 8022efc:	f43f ad2b 	beq.w	8022956 <_strtod_l+0x43e>
 8022f00:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8023010 <_strtod_l+0xaf8>
 8022f04:	f04f 3aff 	mov.w	sl, #4294967295
 8022f08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8022f0a:	9805      	ldr	r0, [sp, #20]
 8022f0c:	f002 fe96 	bl	8025c3c <_Bfree>
 8022f10:	9805      	ldr	r0, [sp, #20]
 8022f12:	4649      	mov	r1, r9
 8022f14:	f002 fe92 	bl	8025c3c <_Bfree>
 8022f18:	9805      	ldr	r0, [sp, #20]
 8022f1a:	4641      	mov	r1, r8
 8022f1c:	f002 fe8e 	bl	8025c3c <_Bfree>
 8022f20:	9805      	ldr	r0, [sp, #20]
 8022f22:	4621      	mov	r1, r4
 8022f24:	f002 fe8a 	bl	8025c3c <_Bfree>
 8022f28:	e618      	b.n	8022b5c <_strtod_l+0x644>
 8022f2a:	f1ba 0f01 	cmp.w	sl, #1
 8022f2e:	d103      	bne.n	8022f38 <_strtod_l+0xa20>
 8022f30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022f32:	2b00      	cmp	r3, #0
 8022f34:	f43f ada5 	beq.w	8022a82 <_strtod_l+0x56a>
 8022f38:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8022fe8 <_strtod_l+0xad0>
 8022f3c:	4f35      	ldr	r7, [pc, #212]	@ (8023014 <_strtod_l+0xafc>)
 8022f3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8022f42:	2600      	movs	r6, #0
 8022f44:	e7b1      	b.n	8022eaa <_strtod_l+0x992>
 8022f46:	4f34      	ldr	r7, [pc, #208]	@ (8023018 <_strtod_l+0xb00>)
 8022f48:	2600      	movs	r6, #0
 8022f4a:	e7aa      	b.n	8022ea2 <_strtod_l+0x98a>
 8022f4c:	4b32      	ldr	r3, [pc, #200]	@ (8023018 <_strtod_l+0xb00>)
 8022f4e:	4630      	mov	r0, r6
 8022f50:	4639      	mov	r1, r7
 8022f52:	2200      	movs	r2, #0
 8022f54:	f7e5 fa98 	bl	8008488 <__aeabi_dmul>
 8022f58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022f5a:	4606      	mov	r6, r0
 8022f5c:	460f      	mov	r7, r1
 8022f5e:	2b00      	cmp	r3, #0
 8022f60:	d09f      	beq.n	8022ea2 <_strtod_l+0x98a>
 8022f62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8022f66:	e7a0      	b.n	8022eaa <_strtod_l+0x992>
 8022f68:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8022ff0 <_strtod_l+0xad8>
 8022f6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8022f70:	ec57 6b17 	vmov	r6, r7, d7
 8022f74:	e799      	b.n	8022eaa <_strtod_l+0x992>
 8022f76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8022f7a:	9b08      	ldr	r3, [sp, #32]
 8022f7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8022f80:	2b00      	cmp	r3, #0
 8022f82:	d1c1      	bne.n	8022f08 <_strtod_l+0x9f0>
 8022f84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8022f88:	0d1b      	lsrs	r3, r3, #20
 8022f8a:	051b      	lsls	r3, r3, #20
 8022f8c:	429d      	cmp	r5, r3
 8022f8e:	d1bb      	bne.n	8022f08 <_strtod_l+0x9f0>
 8022f90:	4630      	mov	r0, r6
 8022f92:	4639      	mov	r1, r7
 8022f94:	f7e5 fdd8 	bl	8008b48 <__aeabi_d2lz>
 8022f98:	f7e5 fa48 	bl	800842c <__aeabi_l2d>
 8022f9c:	4602      	mov	r2, r0
 8022f9e:	460b      	mov	r3, r1
 8022fa0:	4630      	mov	r0, r6
 8022fa2:	4639      	mov	r1, r7
 8022fa4:	f7e5 f8b8 	bl	8008118 <__aeabi_dsub>
 8022fa8:	460b      	mov	r3, r1
 8022faa:	4602      	mov	r2, r0
 8022fac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8022fb0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8022fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022fb6:	ea46 060a 	orr.w	r6, r6, sl
 8022fba:	431e      	orrs	r6, r3
 8022fbc:	d06f      	beq.n	802309e <_strtod_l+0xb86>
 8022fbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8022ff8 <_strtod_l+0xae0>)
 8022fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fc4:	f7e5 fcd2 	bl	800896c <__aeabi_dcmplt>
 8022fc8:	2800      	cmp	r0, #0
 8022fca:	f47f accf 	bne.w	802296c <_strtod_l+0x454>
 8022fce:	a30c      	add	r3, pc, #48	@ (adr r3, 8023000 <_strtod_l+0xae8>)
 8022fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8022fd8:	f7e5 fce6 	bl	80089a8 <__aeabi_dcmpgt>
 8022fdc:	2800      	cmp	r0, #0
 8022fde:	d093      	beq.n	8022f08 <_strtod_l+0x9f0>
 8022fe0:	e4c4      	b.n	802296c <_strtod_l+0x454>
 8022fe2:	bf00      	nop
 8022fe4:	f3af 8000 	nop.w
 8022fe8:	00000000 	.word	0x00000000
 8022fec:	bff00000 	.word	0xbff00000
 8022ff0:	00000000 	.word	0x00000000
 8022ff4:	3ff00000 	.word	0x3ff00000
 8022ff8:	94a03595 	.word	0x94a03595
 8022ffc:	3fdfffff 	.word	0x3fdfffff
 8023000:	35afe535 	.word	0x35afe535
 8023004:	3fe00000 	.word	0x3fe00000
 8023008:	000fffff 	.word	0x000fffff
 802300c:	7ff00000 	.word	0x7ff00000
 8023010:	7fefffff 	.word	0x7fefffff
 8023014:	3ff00000 	.word	0x3ff00000
 8023018:	3fe00000 	.word	0x3fe00000
 802301c:	7fe00000 	.word	0x7fe00000
 8023020:	7c9fffff 	.word	0x7c9fffff
 8023024:	9b08      	ldr	r3, [sp, #32]
 8023026:	b323      	cbz	r3, 8023072 <_strtod_l+0xb5a>
 8023028:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 802302c:	d821      	bhi.n	8023072 <_strtod_l+0xb5a>
 802302e:	a328      	add	r3, pc, #160	@ (adr r3, 80230d0 <_strtod_l+0xbb8>)
 8023030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023034:	4630      	mov	r0, r6
 8023036:	4639      	mov	r1, r7
 8023038:	f7e5 fca2 	bl	8008980 <__aeabi_dcmple>
 802303c:	b1a0      	cbz	r0, 8023068 <_strtod_l+0xb50>
 802303e:	4639      	mov	r1, r7
 8023040:	4630      	mov	r0, r6
 8023042:	f7e5 fcf9 	bl	8008a38 <__aeabi_d2uiz>
 8023046:	2801      	cmp	r0, #1
 8023048:	bf38      	it	cc
 802304a:	2001      	movcc	r0, #1
 802304c:	f7e5 f9a2 	bl	8008394 <__aeabi_ui2d>
 8023050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023052:	4606      	mov	r6, r0
 8023054:	460f      	mov	r7, r1
 8023056:	b9fb      	cbnz	r3, 8023098 <_strtod_l+0xb80>
 8023058:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802305c:	9014      	str	r0, [sp, #80]	@ 0x50
 802305e:	9315      	str	r3, [sp, #84]	@ 0x54
 8023060:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8023064:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8023068:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802306a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 802306e:	1b5b      	subs	r3, r3, r5
 8023070:	9311      	str	r3, [sp, #68]	@ 0x44
 8023072:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8023076:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 802307a:	f003 f913 	bl	80262a4 <__ulp>
 802307e:	4650      	mov	r0, sl
 8023080:	ec53 2b10 	vmov	r2, r3, d0
 8023084:	4659      	mov	r1, fp
 8023086:	f7e5 f9ff 	bl	8008488 <__aeabi_dmul>
 802308a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 802308e:	f7e5 f845 	bl	800811c <__adddf3>
 8023092:	4682      	mov	sl, r0
 8023094:	468b      	mov	fp, r1
 8023096:	e770      	b.n	8022f7a <_strtod_l+0xa62>
 8023098:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 802309c:	e7e0      	b.n	8023060 <_strtod_l+0xb48>
 802309e:	a30e      	add	r3, pc, #56	@ (adr r3, 80230d8 <_strtod_l+0xbc0>)
 80230a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230a4:	f7e5 fc62 	bl	800896c <__aeabi_dcmplt>
 80230a8:	e798      	b.n	8022fdc <_strtod_l+0xac4>
 80230aa:	2300      	movs	r3, #0
 80230ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80230ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80230b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80230b2:	6013      	str	r3, [r2, #0]
 80230b4:	f7ff ba6d 	b.w	8022592 <_strtod_l+0x7a>
 80230b8:	2a65      	cmp	r2, #101	@ 0x65
 80230ba:	f43f ab66 	beq.w	802278a <_strtod_l+0x272>
 80230be:	2a45      	cmp	r2, #69	@ 0x45
 80230c0:	f43f ab63 	beq.w	802278a <_strtod_l+0x272>
 80230c4:	2301      	movs	r3, #1
 80230c6:	f7ff bb9e 	b.w	8022806 <_strtod_l+0x2ee>
 80230ca:	bf00      	nop
 80230cc:	f3af 8000 	nop.w
 80230d0:	ffc00000 	.word	0xffc00000
 80230d4:	41dfffff 	.word	0x41dfffff
 80230d8:	94a03595 	.word	0x94a03595
 80230dc:	3fcfffff 	.word	0x3fcfffff

080230e0 <_strtod_r>:
 80230e0:	4b01      	ldr	r3, [pc, #4]	@ (80230e8 <_strtod_r+0x8>)
 80230e2:	f7ff ba19 	b.w	8022518 <_strtod_l>
 80230e6:	bf00      	nop
 80230e8:	200004a8 	.word	0x200004a8

080230ec <_strtol_l.constprop.0>:
 80230ec:	2b24      	cmp	r3, #36	@ 0x24
 80230ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80230f2:	4686      	mov	lr, r0
 80230f4:	4690      	mov	r8, r2
 80230f6:	d801      	bhi.n	80230fc <_strtol_l.constprop.0+0x10>
 80230f8:	2b01      	cmp	r3, #1
 80230fa:	d106      	bne.n	802310a <_strtol_l.constprop.0+0x1e>
 80230fc:	f001 faea 	bl	80246d4 <__errno>
 8023100:	2316      	movs	r3, #22
 8023102:	6003      	str	r3, [r0, #0]
 8023104:	2000      	movs	r0, #0
 8023106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802310a:	4834      	ldr	r0, [pc, #208]	@ (80231dc <_strtol_l.constprop.0+0xf0>)
 802310c:	460d      	mov	r5, r1
 802310e:	462a      	mov	r2, r5
 8023110:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023114:	5d06      	ldrb	r6, [r0, r4]
 8023116:	f016 0608 	ands.w	r6, r6, #8
 802311a:	d1f8      	bne.n	802310e <_strtol_l.constprop.0+0x22>
 802311c:	2c2d      	cmp	r4, #45	@ 0x2d
 802311e:	d12d      	bne.n	802317c <_strtol_l.constprop.0+0x90>
 8023120:	782c      	ldrb	r4, [r5, #0]
 8023122:	2601      	movs	r6, #1
 8023124:	1c95      	adds	r5, r2, #2
 8023126:	f033 0210 	bics.w	r2, r3, #16
 802312a:	d109      	bne.n	8023140 <_strtol_l.constprop.0+0x54>
 802312c:	2c30      	cmp	r4, #48	@ 0x30
 802312e:	d12a      	bne.n	8023186 <_strtol_l.constprop.0+0x9a>
 8023130:	782a      	ldrb	r2, [r5, #0]
 8023132:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8023136:	2a58      	cmp	r2, #88	@ 0x58
 8023138:	d125      	bne.n	8023186 <_strtol_l.constprop.0+0x9a>
 802313a:	786c      	ldrb	r4, [r5, #1]
 802313c:	2310      	movs	r3, #16
 802313e:	3502      	adds	r5, #2
 8023140:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8023144:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023148:	2200      	movs	r2, #0
 802314a:	fbbc f9f3 	udiv	r9, ip, r3
 802314e:	4610      	mov	r0, r2
 8023150:	fb03 ca19 	mls	sl, r3, r9, ip
 8023154:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8023158:	2f09      	cmp	r7, #9
 802315a:	d81b      	bhi.n	8023194 <_strtol_l.constprop.0+0xa8>
 802315c:	463c      	mov	r4, r7
 802315e:	42a3      	cmp	r3, r4
 8023160:	dd27      	ble.n	80231b2 <_strtol_l.constprop.0+0xc6>
 8023162:	1c57      	adds	r7, r2, #1
 8023164:	d007      	beq.n	8023176 <_strtol_l.constprop.0+0x8a>
 8023166:	4581      	cmp	r9, r0
 8023168:	d320      	bcc.n	80231ac <_strtol_l.constprop.0+0xc0>
 802316a:	d101      	bne.n	8023170 <_strtol_l.constprop.0+0x84>
 802316c:	45a2      	cmp	sl, r4
 802316e:	db1d      	blt.n	80231ac <_strtol_l.constprop.0+0xc0>
 8023170:	fb00 4003 	mla	r0, r0, r3, r4
 8023174:	2201      	movs	r2, #1
 8023176:	f815 4b01 	ldrb.w	r4, [r5], #1
 802317a:	e7eb      	b.n	8023154 <_strtol_l.constprop.0+0x68>
 802317c:	2c2b      	cmp	r4, #43	@ 0x2b
 802317e:	bf04      	itt	eq
 8023180:	782c      	ldrbeq	r4, [r5, #0]
 8023182:	1c95      	addeq	r5, r2, #2
 8023184:	e7cf      	b.n	8023126 <_strtol_l.constprop.0+0x3a>
 8023186:	2b00      	cmp	r3, #0
 8023188:	d1da      	bne.n	8023140 <_strtol_l.constprop.0+0x54>
 802318a:	2c30      	cmp	r4, #48	@ 0x30
 802318c:	bf0c      	ite	eq
 802318e:	2308      	moveq	r3, #8
 8023190:	230a      	movne	r3, #10
 8023192:	e7d5      	b.n	8023140 <_strtol_l.constprop.0+0x54>
 8023194:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8023198:	2f19      	cmp	r7, #25
 802319a:	d801      	bhi.n	80231a0 <_strtol_l.constprop.0+0xb4>
 802319c:	3c37      	subs	r4, #55	@ 0x37
 802319e:	e7de      	b.n	802315e <_strtol_l.constprop.0+0x72>
 80231a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80231a4:	2f19      	cmp	r7, #25
 80231a6:	d804      	bhi.n	80231b2 <_strtol_l.constprop.0+0xc6>
 80231a8:	3c57      	subs	r4, #87	@ 0x57
 80231aa:	e7d8      	b.n	802315e <_strtol_l.constprop.0+0x72>
 80231ac:	f04f 32ff 	mov.w	r2, #4294967295
 80231b0:	e7e1      	b.n	8023176 <_strtol_l.constprop.0+0x8a>
 80231b2:	1c53      	adds	r3, r2, #1
 80231b4:	d108      	bne.n	80231c8 <_strtol_l.constprop.0+0xdc>
 80231b6:	2322      	movs	r3, #34	@ 0x22
 80231b8:	f8ce 3000 	str.w	r3, [lr]
 80231bc:	4660      	mov	r0, ip
 80231be:	f1b8 0f00 	cmp.w	r8, #0
 80231c2:	d0a0      	beq.n	8023106 <_strtol_l.constprop.0+0x1a>
 80231c4:	1e69      	subs	r1, r5, #1
 80231c6:	e006      	b.n	80231d6 <_strtol_l.constprop.0+0xea>
 80231c8:	b106      	cbz	r6, 80231cc <_strtol_l.constprop.0+0xe0>
 80231ca:	4240      	negs	r0, r0
 80231cc:	f1b8 0f00 	cmp.w	r8, #0
 80231d0:	d099      	beq.n	8023106 <_strtol_l.constprop.0+0x1a>
 80231d2:	2a00      	cmp	r2, #0
 80231d4:	d1f6      	bne.n	80231c4 <_strtol_l.constprop.0+0xd8>
 80231d6:	f8c8 1000 	str.w	r1, [r8]
 80231da:	e794      	b.n	8023106 <_strtol_l.constprop.0+0x1a>
 80231dc:	08030aa9 	.word	0x08030aa9

080231e0 <_strtol_r>:
 80231e0:	f7ff bf84 	b.w	80230ec <_strtol_l.constprop.0>

080231e4 <swapfunc>:
 80231e4:	2b02      	cmp	r3, #2
 80231e6:	b510      	push	{r4, lr}
 80231e8:	d00a      	beq.n	8023200 <swapfunc+0x1c>
 80231ea:	0892      	lsrs	r2, r2, #2
 80231ec:	3a01      	subs	r2, #1
 80231ee:	6803      	ldr	r3, [r0, #0]
 80231f0:	680c      	ldr	r4, [r1, #0]
 80231f2:	f840 4b04 	str.w	r4, [r0], #4
 80231f6:	2a00      	cmp	r2, #0
 80231f8:	f841 3b04 	str.w	r3, [r1], #4
 80231fc:	dcf6      	bgt.n	80231ec <swapfunc+0x8>
 80231fe:	bd10      	pop	{r4, pc}
 8023200:	4402      	add	r2, r0
 8023202:	780c      	ldrb	r4, [r1, #0]
 8023204:	7803      	ldrb	r3, [r0, #0]
 8023206:	f800 4b01 	strb.w	r4, [r0], #1
 802320a:	f801 3b01 	strb.w	r3, [r1], #1
 802320e:	1a13      	subs	r3, r2, r0
 8023210:	2b00      	cmp	r3, #0
 8023212:	dcf6      	bgt.n	8023202 <swapfunc+0x1e>
 8023214:	e7f3      	b.n	80231fe <swapfunc+0x1a>

08023216 <med3.constprop.0>:
 8023216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023218:	460f      	mov	r7, r1
 802321a:	4616      	mov	r6, r2
 802321c:	4604      	mov	r4, r0
 802321e:	461d      	mov	r5, r3
 8023220:	4798      	blx	r3
 8023222:	2800      	cmp	r0, #0
 8023224:	4631      	mov	r1, r6
 8023226:	4638      	mov	r0, r7
 8023228:	da0c      	bge.n	8023244 <med3.constprop.0+0x2e>
 802322a:	47a8      	blx	r5
 802322c:	2800      	cmp	r0, #0
 802322e:	da02      	bge.n	8023236 <med3.constprop.0+0x20>
 8023230:	463c      	mov	r4, r7
 8023232:	4620      	mov	r0, r4
 8023234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023236:	4631      	mov	r1, r6
 8023238:	4620      	mov	r0, r4
 802323a:	47a8      	blx	r5
 802323c:	2800      	cmp	r0, #0
 802323e:	daf8      	bge.n	8023232 <med3.constprop.0+0x1c>
 8023240:	4634      	mov	r4, r6
 8023242:	e7f6      	b.n	8023232 <med3.constprop.0+0x1c>
 8023244:	47a8      	blx	r5
 8023246:	2800      	cmp	r0, #0
 8023248:	dcf2      	bgt.n	8023230 <med3.constprop.0+0x1a>
 802324a:	4631      	mov	r1, r6
 802324c:	4620      	mov	r0, r4
 802324e:	47a8      	blx	r5
 8023250:	2800      	cmp	r0, #0
 8023252:	daf5      	bge.n	8023240 <med3.constprop.0+0x2a>
 8023254:	e7ed      	b.n	8023232 <med3.constprop.0+0x1c>

08023256 <qsort>:
 8023256:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802325a:	b095      	sub	sp, #84	@ 0x54
 802325c:	4606      	mov	r6, r0
 802325e:	9300      	str	r3, [sp, #0]
 8023260:	ea40 0302 	orr.w	r3, r0, r2
 8023264:	079b      	lsls	r3, r3, #30
 8023266:	4614      	mov	r4, r2
 8023268:	d118      	bne.n	802329c <qsort+0x46>
 802326a:	f1b2 0804 	subs.w	r8, r2, #4
 802326e:	bf18      	it	ne
 8023270:	f04f 0801 	movne.w	r8, #1
 8023274:	2300      	movs	r3, #0
 8023276:	9301      	str	r3, [sp, #4]
 8023278:	fb04 f701 	mul.w	r7, r4, r1
 802327c:	19f3      	adds	r3, r6, r7
 802327e:	2906      	cmp	r1, #6
 8023280:	eb06 0b04 	add.w	fp, r6, r4
 8023284:	9302      	str	r3, [sp, #8]
 8023286:	d828      	bhi.n	80232da <qsort+0x84>
 8023288:	9b02      	ldr	r3, [sp, #8]
 802328a:	459b      	cmp	fp, r3
 802328c:	d310      	bcc.n	80232b0 <qsort+0x5a>
 802328e:	9b01      	ldr	r3, [sp, #4]
 8023290:	2b00      	cmp	r3, #0
 8023292:	f040 8117 	bne.w	80234c4 <qsort+0x26e>
 8023296:	b015      	add	sp, #84	@ 0x54
 8023298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802329c:	f04f 0802 	mov.w	r8, #2
 80232a0:	e7e8      	b.n	8023274 <qsort+0x1e>
 80232a2:	4643      	mov	r3, r8
 80232a4:	4622      	mov	r2, r4
 80232a6:	4639      	mov	r1, r7
 80232a8:	4628      	mov	r0, r5
 80232aa:	f7ff ff9b 	bl	80231e4 <swapfunc>
 80232ae:	e00f      	b.n	80232d0 <qsort+0x7a>
 80232b0:	465d      	mov	r5, fp
 80232b2:	e00e      	b.n	80232d2 <qsort+0x7c>
 80232b4:	1b2f      	subs	r7, r5, r4
 80232b6:	9b00      	ldr	r3, [sp, #0]
 80232b8:	4629      	mov	r1, r5
 80232ba:	4638      	mov	r0, r7
 80232bc:	4798      	blx	r3
 80232be:	2800      	cmp	r0, #0
 80232c0:	dd09      	ble.n	80232d6 <qsort+0x80>
 80232c2:	f1b8 0f00 	cmp.w	r8, #0
 80232c6:	d1ec      	bne.n	80232a2 <qsort+0x4c>
 80232c8:	682b      	ldr	r3, [r5, #0]
 80232ca:	683a      	ldr	r2, [r7, #0]
 80232cc:	602a      	str	r2, [r5, #0]
 80232ce:	603b      	str	r3, [r7, #0]
 80232d0:	463d      	mov	r5, r7
 80232d2:	42ae      	cmp	r6, r5
 80232d4:	d3ee      	bcc.n	80232b4 <qsort+0x5e>
 80232d6:	44a3      	add	fp, r4
 80232d8:	e7d6      	b.n	8023288 <qsort+0x32>
 80232da:	ea4f 0951 	mov.w	r9, r1, lsr #1
 80232de:	1b3f      	subs	r7, r7, r4
 80232e0:	2907      	cmp	r1, #7
 80232e2:	fb04 6909 	mla	r9, r4, r9, r6
 80232e6:	4437      	add	r7, r6
 80232e8:	d021      	beq.n	802332e <qsort+0xd8>
 80232ea:	2928      	cmp	r1, #40	@ 0x28
 80232ec:	d944      	bls.n	8023378 <qsort+0x122>
 80232ee:	08cd      	lsrs	r5, r1, #3
 80232f0:	4365      	muls	r5, r4
 80232f2:	9b00      	ldr	r3, [sp, #0]
 80232f4:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 80232f8:	1971      	adds	r1, r6, r5
 80232fa:	4630      	mov	r0, r6
 80232fc:	f7ff ff8b 	bl	8023216 <med3.constprop.0>
 8023300:	4649      	mov	r1, r9
 8023302:	eb09 0205 	add.w	r2, r9, r5
 8023306:	9b00      	ldr	r3, [sp, #0]
 8023308:	4682      	mov	sl, r0
 802330a:	1b48      	subs	r0, r1, r5
 802330c:	f7ff ff83 	bl	8023216 <med3.constprop.0>
 8023310:	463a      	mov	r2, r7
 8023312:	9b00      	ldr	r3, [sp, #0]
 8023314:	4681      	mov	r9, r0
 8023316:	1b79      	subs	r1, r7, r5
 8023318:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 802331c:	f7ff ff7b 	bl	8023216 <med3.constprop.0>
 8023320:	4602      	mov	r2, r0
 8023322:	4649      	mov	r1, r9
 8023324:	9b00      	ldr	r3, [sp, #0]
 8023326:	4650      	mov	r0, sl
 8023328:	f7ff ff75 	bl	8023216 <med3.constprop.0>
 802332c:	4681      	mov	r9, r0
 802332e:	f1b8 0f00 	cmp.w	r8, #0
 8023332:	d124      	bne.n	802337e <qsort+0x128>
 8023334:	6833      	ldr	r3, [r6, #0]
 8023336:	f8d9 2000 	ldr.w	r2, [r9]
 802333a:	6032      	str	r2, [r6, #0]
 802333c:	f8c9 3000 	str.w	r3, [r9]
 8023340:	46d9      	mov	r9, fp
 8023342:	46ba      	mov	sl, r7
 8023344:	465d      	mov	r5, fp
 8023346:	2300      	movs	r3, #0
 8023348:	45b9      	cmp	r9, r7
 802334a:	d857      	bhi.n	80233fc <qsort+0x1a6>
 802334c:	9303      	str	r3, [sp, #12]
 802334e:	4631      	mov	r1, r6
 8023350:	9b00      	ldr	r3, [sp, #0]
 8023352:	4648      	mov	r0, r9
 8023354:	4798      	blx	r3
 8023356:	2800      	cmp	r0, #0
 8023358:	9b03      	ldr	r3, [sp, #12]
 802335a:	dc2c      	bgt.n	80233b6 <qsort+0x160>
 802335c:	d10a      	bne.n	8023374 <qsort+0x11e>
 802335e:	f1b8 0f00 	cmp.w	r8, #0
 8023362:	d113      	bne.n	802338c <qsort+0x136>
 8023364:	682b      	ldr	r3, [r5, #0]
 8023366:	f8d9 2000 	ldr.w	r2, [r9]
 802336a:	602a      	str	r2, [r5, #0]
 802336c:	f8c9 3000 	str.w	r3, [r9]
 8023370:	4425      	add	r5, r4
 8023372:	2301      	movs	r3, #1
 8023374:	44a1      	add	r9, r4
 8023376:	e7e7      	b.n	8023348 <qsort+0xf2>
 8023378:	463a      	mov	r2, r7
 802337a:	46b2      	mov	sl, r6
 802337c:	e7d1      	b.n	8023322 <qsort+0xcc>
 802337e:	4643      	mov	r3, r8
 8023380:	4622      	mov	r2, r4
 8023382:	4649      	mov	r1, r9
 8023384:	4630      	mov	r0, r6
 8023386:	f7ff ff2d 	bl	80231e4 <swapfunc>
 802338a:	e7d9      	b.n	8023340 <qsort+0xea>
 802338c:	4643      	mov	r3, r8
 802338e:	4622      	mov	r2, r4
 8023390:	4649      	mov	r1, r9
 8023392:	4628      	mov	r0, r5
 8023394:	f7ff ff26 	bl	80231e4 <swapfunc>
 8023398:	e7ea      	b.n	8023370 <qsort+0x11a>
 802339a:	d10b      	bne.n	80233b4 <qsort+0x15e>
 802339c:	f1b8 0f00 	cmp.w	r8, #0
 80233a0:	d11e      	bne.n	80233e0 <qsort+0x18a>
 80233a2:	683b      	ldr	r3, [r7, #0]
 80233a4:	f8da 2000 	ldr.w	r2, [sl]
 80233a8:	603a      	str	r2, [r7, #0]
 80233aa:	f8ca 3000 	str.w	r3, [sl]
 80233ae:	ebaa 0a04 	sub.w	sl, sl, r4
 80233b2:	2301      	movs	r3, #1
 80233b4:	1b3f      	subs	r7, r7, r4
 80233b6:	45b9      	cmp	r9, r7
 80233b8:	d820      	bhi.n	80233fc <qsort+0x1a6>
 80233ba:	9303      	str	r3, [sp, #12]
 80233bc:	4631      	mov	r1, r6
 80233be:	9b00      	ldr	r3, [sp, #0]
 80233c0:	4638      	mov	r0, r7
 80233c2:	4798      	blx	r3
 80233c4:	2800      	cmp	r0, #0
 80233c6:	9b03      	ldr	r3, [sp, #12]
 80233c8:	dae7      	bge.n	802339a <qsort+0x144>
 80233ca:	f1b8 0f00 	cmp.w	r8, #0
 80233ce:	d10e      	bne.n	80233ee <qsort+0x198>
 80233d0:	f8d9 3000 	ldr.w	r3, [r9]
 80233d4:	683a      	ldr	r2, [r7, #0]
 80233d6:	f8c9 2000 	str.w	r2, [r9]
 80233da:	603b      	str	r3, [r7, #0]
 80233dc:	1b3f      	subs	r7, r7, r4
 80233de:	e7c8      	b.n	8023372 <qsort+0x11c>
 80233e0:	4643      	mov	r3, r8
 80233e2:	4622      	mov	r2, r4
 80233e4:	4651      	mov	r1, sl
 80233e6:	4638      	mov	r0, r7
 80233e8:	f7ff fefc 	bl	80231e4 <swapfunc>
 80233ec:	e7df      	b.n	80233ae <qsort+0x158>
 80233ee:	4643      	mov	r3, r8
 80233f0:	4622      	mov	r2, r4
 80233f2:	4639      	mov	r1, r7
 80233f4:	4648      	mov	r0, r9
 80233f6:	f7ff fef5 	bl	80231e4 <swapfunc>
 80233fa:	e7ef      	b.n	80233dc <qsort+0x186>
 80233fc:	b9fb      	cbnz	r3, 802343e <qsort+0x1e8>
 80233fe:	9b02      	ldr	r3, [sp, #8]
 8023400:	459b      	cmp	fp, r3
 8023402:	f4bf af44 	bcs.w	802328e <qsort+0x38>
 8023406:	465d      	mov	r5, fp
 8023408:	e015      	b.n	8023436 <qsort+0x1e0>
 802340a:	4643      	mov	r3, r8
 802340c:	4622      	mov	r2, r4
 802340e:	4639      	mov	r1, r7
 8023410:	4628      	mov	r0, r5
 8023412:	f7ff fee7 	bl	80231e4 <swapfunc>
 8023416:	e00d      	b.n	8023434 <qsort+0x1de>
 8023418:	1b2f      	subs	r7, r5, r4
 802341a:	9b00      	ldr	r3, [sp, #0]
 802341c:	4629      	mov	r1, r5
 802341e:	4638      	mov	r0, r7
 8023420:	4798      	blx	r3
 8023422:	2800      	cmp	r0, #0
 8023424:	dd09      	ble.n	802343a <qsort+0x1e4>
 8023426:	f1b8 0f00 	cmp.w	r8, #0
 802342a:	d1ee      	bne.n	802340a <qsort+0x1b4>
 802342c:	682b      	ldr	r3, [r5, #0]
 802342e:	683a      	ldr	r2, [r7, #0]
 8023430:	602a      	str	r2, [r5, #0]
 8023432:	603b      	str	r3, [r7, #0]
 8023434:	463d      	mov	r5, r7
 8023436:	42ae      	cmp	r6, r5
 8023438:	d3ee      	bcc.n	8023418 <qsort+0x1c2>
 802343a:	44a3      	add	fp, r4
 802343c:	e7df      	b.n	80233fe <qsort+0x1a8>
 802343e:	eba9 0b05 	sub.w	fp, r9, r5
 8023442:	1baa      	subs	r2, r5, r6
 8023444:	455a      	cmp	r2, fp
 8023446:	bfa8      	it	ge
 8023448:	465a      	movge	r2, fp
 802344a:	b12a      	cbz	r2, 8023458 <qsort+0x202>
 802344c:	4643      	mov	r3, r8
 802344e:	eba9 0102 	sub.w	r1, r9, r2
 8023452:	4630      	mov	r0, r6
 8023454:	f7ff fec6 	bl	80231e4 <swapfunc>
 8023458:	9b02      	ldr	r3, [sp, #8]
 802345a:	eba3 020a 	sub.w	r2, r3, sl
 802345e:	ebaa 0507 	sub.w	r5, sl, r7
 8023462:	1b12      	subs	r2, r2, r4
 8023464:	42aa      	cmp	r2, r5
 8023466:	bf28      	it	cs
 8023468:	462a      	movcs	r2, r5
 802346a:	b12a      	cbz	r2, 8023478 <qsort+0x222>
 802346c:	9902      	ldr	r1, [sp, #8]
 802346e:	4643      	mov	r3, r8
 8023470:	1a89      	subs	r1, r1, r2
 8023472:	4648      	mov	r0, r9
 8023474:	f7ff feb6 	bl	80231e4 <swapfunc>
 8023478:	9b02      	ldr	r3, [sp, #8]
 802347a:	455d      	cmp	r5, fp
 802347c:	465f      	mov	r7, fp
 802347e:	eba3 0005 	sub.w	r0, r3, r5
 8023482:	d904      	bls.n	802348e <qsort+0x238>
 8023484:	4633      	mov	r3, r6
 8023486:	462f      	mov	r7, r5
 8023488:	4606      	mov	r6, r0
 802348a:	465d      	mov	r5, fp
 802348c:	4618      	mov	r0, r3
 802348e:	42a5      	cmp	r5, r4
 8023490:	d921      	bls.n	80234d6 <qsort+0x280>
 8023492:	fbb5 f1f4 	udiv	r1, r5, r4
 8023496:	9b01      	ldr	r3, [sp, #4]
 8023498:	2b07      	cmp	r3, #7
 802349a:	d80d      	bhi.n	80234b8 <qsort+0x262>
 802349c:	fbb7 f7f4 	udiv	r7, r7, r4
 80234a0:	aa14      	add	r2, sp, #80	@ 0x50
 80234a2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80234a6:	f843 6c40 	str.w	r6, [r3, #-64]
 80234aa:	f843 7c3c 	str.w	r7, [r3, #-60]
 80234ae:	9b01      	ldr	r3, [sp, #4]
 80234b0:	3301      	adds	r3, #1
 80234b2:	9301      	str	r3, [sp, #4]
 80234b4:	4606      	mov	r6, r0
 80234b6:	e6df      	b.n	8023278 <qsort+0x22>
 80234b8:	9b00      	ldr	r3, [sp, #0]
 80234ba:	4622      	mov	r2, r4
 80234bc:	f7ff fecb 	bl	8023256 <qsort>
 80234c0:	42a7      	cmp	r7, r4
 80234c2:	d80b      	bhi.n	80234dc <qsort+0x286>
 80234c4:	9b01      	ldr	r3, [sp, #4]
 80234c6:	aa14      	add	r2, sp, #80	@ 0x50
 80234c8:	3b01      	subs	r3, #1
 80234ca:	9301      	str	r3, [sp, #4]
 80234cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80234d0:	e953 0110 	ldrd	r0, r1, [r3, #-64]	@ 0x40
 80234d4:	e7ee      	b.n	80234b4 <qsort+0x25e>
 80234d6:	42a7      	cmp	r7, r4
 80234d8:	f67f aed9 	bls.w	802328e <qsort+0x38>
 80234dc:	fbb7 f1f4 	udiv	r1, r7, r4
 80234e0:	4630      	mov	r0, r6
 80234e2:	e7e7      	b.n	80234b4 <qsort+0x25e>

080234e4 <__cvt>:
 80234e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80234e8:	ec57 6b10 	vmov	r6, r7, d0
 80234ec:	2f00      	cmp	r7, #0
 80234ee:	460c      	mov	r4, r1
 80234f0:	4619      	mov	r1, r3
 80234f2:	463b      	mov	r3, r7
 80234f4:	bfbb      	ittet	lt
 80234f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80234fa:	461f      	movlt	r7, r3
 80234fc:	2300      	movge	r3, #0
 80234fe:	232d      	movlt	r3, #45	@ 0x2d
 8023500:	700b      	strb	r3, [r1, #0]
 8023502:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023504:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8023508:	4691      	mov	r9, r2
 802350a:	f023 0820 	bic.w	r8, r3, #32
 802350e:	bfbc      	itt	lt
 8023510:	4632      	movlt	r2, r6
 8023512:	4616      	movlt	r6, r2
 8023514:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8023518:	d005      	beq.n	8023526 <__cvt+0x42>
 802351a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 802351e:	d100      	bne.n	8023522 <__cvt+0x3e>
 8023520:	3401      	adds	r4, #1
 8023522:	2102      	movs	r1, #2
 8023524:	e000      	b.n	8023528 <__cvt+0x44>
 8023526:	2103      	movs	r1, #3
 8023528:	ab03      	add	r3, sp, #12
 802352a:	9301      	str	r3, [sp, #4]
 802352c:	ab02      	add	r3, sp, #8
 802352e:	9300      	str	r3, [sp, #0]
 8023530:	ec47 6b10 	vmov	d0, r6, r7
 8023534:	4653      	mov	r3, sl
 8023536:	4622      	mov	r2, r4
 8023538:	f001 f9b2 	bl	80248a0 <_dtoa_r>
 802353c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8023540:	4605      	mov	r5, r0
 8023542:	d119      	bne.n	8023578 <__cvt+0x94>
 8023544:	f019 0f01 	tst.w	r9, #1
 8023548:	d00e      	beq.n	8023568 <__cvt+0x84>
 802354a:	eb00 0904 	add.w	r9, r0, r4
 802354e:	2200      	movs	r2, #0
 8023550:	2300      	movs	r3, #0
 8023552:	4630      	mov	r0, r6
 8023554:	4639      	mov	r1, r7
 8023556:	f7e5 f9ff 	bl	8008958 <__aeabi_dcmpeq>
 802355a:	b108      	cbz	r0, 8023560 <__cvt+0x7c>
 802355c:	f8cd 900c 	str.w	r9, [sp, #12]
 8023560:	2230      	movs	r2, #48	@ 0x30
 8023562:	9b03      	ldr	r3, [sp, #12]
 8023564:	454b      	cmp	r3, r9
 8023566:	d31e      	bcc.n	80235a6 <__cvt+0xc2>
 8023568:	9b03      	ldr	r3, [sp, #12]
 802356a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802356c:	1b5b      	subs	r3, r3, r5
 802356e:	4628      	mov	r0, r5
 8023570:	6013      	str	r3, [r2, #0]
 8023572:	b004      	add	sp, #16
 8023574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023578:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 802357c:	eb00 0904 	add.w	r9, r0, r4
 8023580:	d1e5      	bne.n	802354e <__cvt+0x6a>
 8023582:	7803      	ldrb	r3, [r0, #0]
 8023584:	2b30      	cmp	r3, #48	@ 0x30
 8023586:	d10a      	bne.n	802359e <__cvt+0xba>
 8023588:	2200      	movs	r2, #0
 802358a:	2300      	movs	r3, #0
 802358c:	4630      	mov	r0, r6
 802358e:	4639      	mov	r1, r7
 8023590:	f7e5 f9e2 	bl	8008958 <__aeabi_dcmpeq>
 8023594:	b918      	cbnz	r0, 802359e <__cvt+0xba>
 8023596:	f1c4 0401 	rsb	r4, r4, #1
 802359a:	f8ca 4000 	str.w	r4, [sl]
 802359e:	f8da 3000 	ldr.w	r3, [sl]
 80235a2:	4499      	add	r9, r3
 80235a4:	e7d3      	b.n	802354e <__cvt+0x6a>
 80235a6:	1c59      	adds	r1, r3, #1
 80235a8:	9103      	str	r1, [sp, #12]
 80235aa:	701a      	strb	r2, [r3, #0]
 80235ac:	e7d9      	b.n	8023562 <__cvt+0x7e>

080235ae <__exponent>:
 80235ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80235b0:	2900      	cmp	r1, #0
 80235b2:	bfba      	itte	lt
 80235b4:	4249      	neglt	r1, r1
 80235b6:	232d      	movlt	r3, #45	@ 0x2d
 80235b8:	232b      	movge	r3, #43	@ 0x2b
 80235ba:	2909      	cmp	r1, #9
 80235bc:	7002      	strb	r2, [r0, #0]
 80235be:	7043      	strb	r3, [r0, #1]
 80235c0:	dd29      	ble.n	8023616 <__exponent+0x68>
 80235c2:	f10d 0307 	add.w	r3, sp, #7
 80235c6:	461d      	mov	r5, r3
 80235c8:	270a      	movs	r7, #10
 80235ca:	461a      	mov	r2, r3
 80235cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80235d0:	fb07 1416 	mls	r4, r7, r6, r1
 80235d4:	3430      	adds	r4, #48	@ 0x30
 80235d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80235da:	460c      	mov	r4, r1
 80235dc:	2c63      	cmp	r4, #99	@ 0x63
 80235de:	f103 33ff 	add.w	r3, r3, #4294967295
 80235e2:	4631      	mov	r1, r6
 80235e4:	dcf1      	bgt.n	80235ca <__exponent+0x1c>
 80235e6:	3130      	adds	r1, #48	@ 0x30
 80235e8:	1e94      	subs	r4, r2, #2
 80235ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80235ee:	1c41      	adds	r1, r0, #1
 80235f0:	4623      	mov	r3, r4
 80235f2:	42ab      	cmp	r3, r5
 80235f4:	d30a      	bcc.n	802360c <__exponent+0x5e>
 80235f6:	f10d 0309 	add.w	r3, sp, #9
 80235fa:	1a9b      	subs	r3, r3, r2
 80235fc:	42ac      	cmp	r4, r5
 80235fe:	bf88      	it	hi
 8023600:	2300      	movhi	r3, #0
 8023602:	3302      	adds	r3, #2
 8023604:	4403      	add	r3, r0
 8023606:	1a18      	subs	r0, r3, r0
 8023608:	b003      	add	sp, #12
 802360a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802360c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8023610:	f801 6f01 	strb.w	r6, [r1, #1]!
 8023614:	e7ed      	b.n	80235f2 <__exponent+0x44>
 8023616:	2330      	movs	r3, #48	@ 0x30
 8023618:	3130      	adds	r1, #48	@ 0x30
 802361a:	7083      	strb	r3, [r0, #2]
 802361c:	70c1      	strb	r1, [r0, #3]
 802361e:	1d03      	adds	r3, r0, #4
 8023620:	e7f1      	b.n	8023606 <__exponent+0x58>
	...

08023624 <_printf_float>:
 8023624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023628:	b08d      	sub	sp, #52	@ 0x34
 802362a:	460c      	mov	r4, r1
 802362c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8023630:	4616      	mov	r6, r2
 8023632:	461f      	mov	r7, r3
 8023634:	4605      	mov	r5, r0
 8023636:	f000 fff3 	bl	8024620 <_localeconv_r>
 802363a:	6803      	ldr	r3, [r0, #0]
 802363c:	9304      	str	r3, [sp, #16]
 802363e:	4618      	mov	r0, r3
 8023640:	f7e4 fd5e 	bl	8008100 <strlen>
 8023644:	2300      	movs	r3, #0
 8023646:	930a      	str	r3, [sp, #40]	@ 0x28
 8023648:	f8d8 3000 	ldr.w	r3, [r8]
 802364c:	9005      	str	r0, [sp, #20]
 802364e:	3307      	adds	r3, #7
 8023650:	f023 0307 	bic.w	r3, r3, #7
 8023654:	f103 0208 	add.w	r2, r3, #8
 8023658:	f894 a018 	ldrb.w	sl, [r4, #24]
 802365c:	f8d4 b000 	ldr.w	fp, [r4]
 8023660:	f8c8 2000 	str.w	r2, [r8]
 8023664:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023668:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 802366c:	9307      	str	r3, [sp, #28]
 802366e:	f8cd 8018 	str.w	r8, [sp, #24]
 8023672:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8023676:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802367a:	4b9c      	ldr	r3, [pc, #624]	@ (80238ec <_printf_float+0x2c8>)
 802367c:	f04f 32ff 	mov.w	r2, #4294967295
 8023680:	f7e5 f99c 	bl	80089bc <__aeabi_dcmpun>
 8023684:	bb70      	cbnz	r0, 80236e4 <_printf_float+0xc0>
 8023686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802368a:	4b98      	ldr	r3, [pc, #608]	@ (80238ec <_printf_float+0x2c8>)
 802368c:	f04f 32ff 	mov.w	r2, #4294967295
 8023690:	f7e5 f976 	bl	8008980 <__aeabi_dcmple>
 8023694:	bb30      	cbnz	r0, 80236e4 <_printf_float+0xc0>
 8023696:	2200      	movs	r2, #0
 8023698:	2300      	movs	r3, #0
 802369a:	4640      	mov	r0, r8
 802369c:	4649      	mov	r1, r9
 802369e:	f7e5 f965 	bl	800896c <__aeabi_dcmplt>
 80236a2:	b110      	cbz	r0, 80236aa <_printf_float+0x86>
 80236a4:	232d      	movs	r3, #45	@ 0x2d
 80236a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80236aa:	4a91      	ldr	r2, [pc, #580]	@ (80238f0 <_printf_float+0x2cc>)
 80236ac:	4b91      	ldr	r3, [pc, #580]	@ (80238f4 <_printf_float+0x2d0>)
 80236ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80236b2:	bf94      	ite	ls
 80236b4:	4690      	movls	r8, r2
 80236b6:	4698      	movhi	r8, r3
 80236b8:	2303      	movs	r3, #3
 80236ba:	6123      	str	r3, [r4, #16]
 80236bc:	f02b 0304 	bic.w	r3, fp, #4
 80236c0:	6023      	str	r3, [r4, #0]
 80236c2:	f04f 0900 	mov.w	r9, #0
 80236c6:	9700      	str	r7, [sp, #0]
 80236c8:	4633      	mov	r3, r6
 80236ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80236cc:	4621      	mov	r1, r4
 80236ce:	4628      	mov	r0, r5
 80236d0:	f000 f9d2 	bl	8023a78 <_printf_common>
 80236d4:	3001      	adds	r0, #1
 80236d6:	f040 808d 	bne.w	80237f4 <_printf_float+0x1d0>
 80236da:	f04f 30ff 	mov.w	r0, #4294967295
 80236de:	b00d      	add	sp, #52	@ 0x34
 80236e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236e4:	4642      	mov	r2, r8
 80236e6:	464b      	mov	r3, r9
 80236e8:	4640      	mov	r0, r8
 80236ea:	4649      	mov	r1, r9
 80236ec:	f7e5 f966 	bl	80089bc <__aeabi_dcmpun>
 80236f0:	b140      	cbz	r0, 8023704 <_printf_float+0xe0>
 80236f2:	464b      	mov	r3, r9
 80236f4:	2b00      	cmp	r3, #0
 80236f6:	bfbc      	itt	lt
 80236f8:	232d      	movlt	r3, #45	@ 0x2d
 80236fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80236fe:	4a7e      	ldr	r2, [pc, #504]	@ (80238f8 <_printf_float+0x2d4>)
 8023700:	4b7e      	ldr	r3, [pc, #504]	@ (80238fc <_printf_float+0x2d8>)
 8023702:	e7d4      	b.n	80236ae <_printf_float+0x8a>
 8023704:	6863      	ldr	r3, [r4, #4]
 8023706:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 802370a:	9206      	str	r2, [sp, #24]
 802370c:	1c5a      	adds	r2, r3, #1
 802370e:	d13b      	bne.n	8023788 <_printf_float+0x164>
 8023710:	2306      	movs	r3, #6
 8023712:	6063      	str	r3, [r4, #4]
 8023714:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8023718:	2300      	movs	r3, #0
 802371a:	6022      	str	r2, [r4, #0]
 802371c:	9303      	str	r3, [sp, #12]
 802371e:	ab0a      	add	r3, sp, #40	@ 0x28
 8023720:	e9cd a301 	strd	sl, r3, [sp, #4]
 8023724:	ab09      	add	r3, sp, #36	@ 0x24
 8023726:	9300      	str	r3, [sp, #0]
 8023728:	6861      	ldr	r1, [r4, #4]
 802372a:	ec49 8b10 	vmov	d0, r8, r9
 802372e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8023732:	4628      	mov	r0, r5
 8023734:	f7ff fed6 	bl	80234e4 <__cvt>
 8023738:	9b06      	ldr	r3, [sp, #24]
 802373a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802373c:	2b47      	cmp	r3, #71	@ 0x47
 802373e:	4680      	mov	r8, r0
 8023740:	d129      	bne.n	8023796 <_printf_float+0x172>
 8023742:	1cc8      	adds	r0, r1, #3
 8023744:	db02      	blt.n	802374c <_printf_float+0x128>
 8023746:	6863      	ldr	r3, [r4, #4]
 8023748:	4299      	cmp	r1, r3
 802374a:	dd41      	ble.n	80237d0 <_printf_float+0x1ac>
 802374c:	f1aa 0a02 	sub.w	sl, sl, #2
 8023750:	fa5f fa8a 	uxtb.w	sl, sl
 8023754:	3901      	subs	r1, #1
 8023756:	4652      	mov	r2, sl
 8023758:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 802375c:	9109      	str	r1, [sp, #36]	@ 0x24
 802375e:	f7ff ff26 	bl	80235ae <__exponent>
 8023762:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023764:	1813      	adds	r3, r2, r0
 8023766:	2a01      	cmp	r2, #1
 8023768:	4681      	mov	r9, r0
 802376a:	6123      	str	r3, [r4, #16]
 802376c:	dc02      	bgt.n	8023774 <_printf_float+0x150>
 802376e:	6822      	ldr	r2, [r4, #0]
 8023770:	07d2      	lsls	r2, r2, #31
 8023772:	d501      	bpl.n	8023778 <_printf_float+0x154>
 8023774:	3301      	adds	r3, #1
 8023776:	6123      	str	r3, [r4, #16]
 8023778:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 802377c:	2b00      	cmp	r3, #0
 802377e:	d0a2      	beq.n	80236c6 <_printf_float+0xa2>
 8023780:	232d      	movs	r3, #45	@ 0x2d
 8023782:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023786:	e79e      	b.n	80236c6 <_printf_float+0xa2>
 8023788:	9a06      	ldr	r2, [sp, #24]
 802378a:	2a47      	cmp	r2, #71	@ 0x47
 802378c:	d1c2      	bne.n	8023714 <_printf_float+0xf0>
 802378e:	2b00      	cmp	r3, #0
 8023790:	d1c0      	bne.n	8023714 <_printf_float+0xf0>
 8023792:	2301      	movs	r3, #1
 8023794:	e7bd      	b.n	8023712 <_printf_float+0xee>
 8023796:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 802379a:	d9db      	bls.n	8023754 <_printf_float+0x130>
 802379c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80237a0:	d118      	bne.n	80237d4 <_printf_float+0x1b0>
 80237a2:	2900      	cmp	r1, #0
 80237a4:	6863      	ldr	r3, [r4, #4]
 80237a6:	dd0b      	ble.n	80237c0 <_printf_float+0x19c>
 80237a8:	6121      	str	r1, [r4, #16]
 80237aa:	b913      	cbnz	r3, 80237b2 <_printf_float+0x18e>
 80237ac:	6822      	ldr	r2, [r4, #0]
 80237ae:	07d0      	lsls	r0, r2, #31
 80237b0:	d502      	bpl.n	80237b8 <_printf_float+0x194>
 80237b2:	3301      	adds	r3, #1
 80237b4:	440b      	add	r3, r1
 80237b6:	6123      	str	r3, [r4, #16]
 80237b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80237ba:	f04f 0900 	mov.w	r9, #0
 80237be:	e7db      	b.n	8023778 <_printf_float+0x154>
 80237c0:	b913      	cbnz	r3, 80237c8 <_printf_float+0x1a4>
 80237c2:	6822      	ldr	r2, [r4, #0]
 80237c4:	07d2      	lsls	r2, r2, #31
 80237c6:	d501      	bpl.n	80237cc <_printf_float+0x1a8>
 80237c8:	3302      	adds	r3, #2
 80237ca:	e7f4      	b.n	80237b6 <_printf_float+0x192>
 80237cc:	2301      	movs	r3, #1
 80237ce:	e7f2      	b.n	80237b6 <_printf_float+0x192>
 80237d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80237d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80237d6:	4299      	cmp	r1, r3
 80237d8:	db05      	blt.n	80237e6 <_printf_float+0x1c2>
 80237da:	6823      	ldr	r3, [r4, #0]
 80237dc:	6121      	str	r1, [r4, #16]
 80237de:	07d8      	lsls	r0, r3, #31
 80237e0:	d5ea      	bpl.n	80237b8 <_printf_float+0x194>
 80237e2:	1c4b      	adds	r3, r1, #1
 80237e4:	e7e7      	b.n	80237b6 <_printf_float+0x192>
 80237e6:	2900      	cmp	r1, #0
 80237e8:	bfd4      	ite	le
 80237ea:	f1c1 0202 	rsble	r2, r1, #2
 80237ee:	2201      	movgt	r2, #1
 80237f0:	4413      	add	r3, r2
 80237f2:	e7e0      	b.n	80237b6 <_printf_float+0x192>
 80237f4:	6823      	ldr	r3, [r4, #0]
 80237f6:	055a      	lsls	r2, r3, #21
 80237f8:	d407      	bmi.n	802380a <_printf_float+0x1e6>
 80237fa:	6923      	ldr	r3, [r4, #16]
 80237fc:	4642      	mov	r2, r8
 80237fe:	4631      	mov	r1, r6
 8023800:	4628      	mov	r0, r5
 8023802:	47b8      	blx	r7
 8023804:	3001      	adds	r0, #1
 8023806:	d12b      	bne.n	8023860 <_printf_float+0x23c>
 8023808:	e767      	b.n	80236da <_printf_float+0xb6>
 802380a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 802380e:	f240 80dd 	bls.w	80239cc <_printf_float+0x3a8>
 8023812:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8023816:	2200      	movs	r2, #0
 8023818:	2300      	movs	r3, #0
 802381a:	f7e5 f89d 	bl	8008958 <__aeabi_dcmpeq>
 802381e:	2800      	cmp	r0, #0
 8023820:	d033      	beq.n	802388a <_printf_float+0x266>
 8023822:	4a37      	ldr	r2, [pc, #220]	@ (8023900 <_printf_float+0x2dc>)
 8023824:	2301      	movs	r3, #1
 8023826:	4631      	mov	r1, r6
 8023828:	4628      	mov	r0, r5
 802382a:	47b8      	blx	r7
 802382c:	3001      	adds	r0, #1
 802382e:	f43f af54 	beq.w	80236da <_printf_float+0xb6>
 8023832:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8023836:	4543      	cmp	r3, r8
 8023838:	db02      	blt.n	8023840 <_printf_float+0x21c>
 802383a:	6823      	ldr	r3, [r4, #0]
 802383c:	07d8      	lsls	r0, r3, #31
 802383e:	d50f      	bpl.n	8023860 <_printf_float+0x23c>
 8023840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023844:	4631      	mov	r1, r6
 8023846:	4628      	mov	r0, r5
 8023848:	47b8      	blx	r7
 802384a:	3001      	adds	r0, #1
 802384c:	f43f af45 	beq.w	80236da <_printf_float+0xb6>
 8023850:	f04f 0900 	mov.w	r9, #0
 8023854:	f108 38ff 	add.w	r8, r8, #4294967295
 8023858:	f104 0a1a 	add.w	sl, r4, #26
 802385c:	45c8      	cmp	r8, r9
 802385e:	dc09      	bgt.n	8023874 <_printf_float+0x250>
 8023860:	6823      	ldr	r3, [r4, #0]
 8023862:	079b      	lsls	r3, r3, #30
 8023864:	f100 8103 	bmi.w	8023a6e <_printf_float+0x44a>
 8023868:	68e0      	ldr	r0, [r4, #12]
 802386a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802386c:	4298      	cmp	r0, r3
 802386e:	bfb8      	it	lt
 8023870:	4618      	movlt	r0, r3
 8023872:	e734      	b.n	80236de <_printf_float+0xba>
 8023874:	2301      	movs	r3, #1
 8023876:	4652      	mov	r2, sl
 8023878:	4631      	mov	r1, r6
 802387a:	4628      	mov	r0, r5
 802387c:	47b8      	blx	r7
 802387e:	3001      	adds	r0, #1
 8023880:	f43f af2b 	beq.w	80236da <_printf_float+0xb6>
 8023884:	f109 0901 	add.w	r9, r9, #1
 8023888:	e7e8      	b.n	802385c <_printf_float+0x238>
 802388a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802388c:	2b00      	cmp	r3, #0
 802388e:	dc39      	bgt.n	8023904 <_printf_float+0x2e0>
 8023890:	4a1b      	ldr	r2, [pc, #108]	@ (8023900 <_printf_float+0x2dc>)
 8023892:	2301      	movs	r3, #1
 8023894:	4631      	mov	r1, r6
 8023896:	4628      	mov	r0, r5
 8023898:	47b8      	blx	r7
 802389a:	3001      	adds	r0, #1
 802389c:	f43f af1d 	beq.w	80236da <_printf_float+0xb6>
 80238a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80238a4:	ea59 0303 	orrs.w	r3, r9, r3
 80238a8:	d102      	bne.n	80238b0 <_printf_float+0x28c>
 80238aa:	6823      	ldr	r3, [r4, #0]
 80238ac:	07d9      	lsls	r1, r3, #31
 80238ae:	d5d7      	bpl.n	8023860 <_printf_float+0x23c>
 80238b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80238b4:	4631      	mov	r1, r6
 80238b6:	4628      	mov	r0, r5
 80238b8:	47b8      	blx	r7
 80238ba:	3001      	adds	r0, #1
 80238bc:	f43f af0d 	beq.w	80236da <_printf_float+0xb6>
 80238c0:	f04f 0a00 	mov.w	sl, #0
 80238c4:	f104 0b1a 	add.w	fp, r4, #26
 80238c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80238ca:	425b      	negs	r3, r3
 80238cc:	4553      	cmp	r3, sl
 80238ce:	dc01      	bgt.n	80238d4 <_printf_float+0x2b0>
 80238d0:	464b      	mov	r3, r9
 80238d2:	e793      	b.n	80237fc <_printf_float+0x1d8>
 80238d4:	2301      	movs	r3, #1
 80238d6:	465a      	mov	r2, fp
 80238d8:	4631      	mov	r1, r6
 80238da:	4628      	mov	r0, r5
 80238dc:	47b8      	blx	r7
 80238de:	3001      	adds	r0, #1
 80238e0:	f43f aefb 	beq.w	80236da <_printf_float+0xb6>
 80238e4:	f10a 0a01 	add.w	sl, sl, #1
 80238e8:	e7ee      	b.n	80238c8 <_printf_float+0x2a4>
 80238ea:	bf00      	nop
 80238ec:	7fefffff 	.word	0x7fefffff
 80238f0:	08030ba9 	.word	0x08030ba9
 80238f4:	08030bad 	.word	0x08030bad
 80238f8:	08030bb1 	.word	0x08030bb1
 80238fc:	08030bb5 	.word	0x08030bb5
 8023900:	08030bb9 	.word	0x08030bb9
 8023904:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8023906:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 802390a:	4553      	cmp	r3, sl
 802390c:	bfa8      	it	ge
 802390e:	4653      	movge	r3, sl
 8023910:	2b00      	cmp	r3, #0
 8023912:	4699      	mov	r9, r3
 8023914:	dc36      	bgt.n	8023984 <_printf_float+0x360>
 8023916:	f04f 0b00 	mov.w	fp, #0
 802391a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802391e:	f104 021a 	add.w	r2, r4, #26
 8023922:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8023924:	9306      	str	r3, [sp, #24]
 8023926:	eba3 0309 	sub.w	r3, r3, r9
 802392a:	455b      	cmp	r3, fp
 802392c:	dc31      	bgt.n	8023992 <_printf_float+0x36e>
 802392e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023930:	459a      	cmp	sl, r3
 8023932:	dc3a      	bgt.n	80239aa <_printf_float+0x386>
 8023934:	6823      	ldr	r3, [r4, #0]
 8023936:	07da      	lsls	r2, r3, #31
 8023938:	d437      	bmi.n	80239aa <_printf_float+0x386>
 802393a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802393c:	ebaa 0903 	sub.w	r9, sl, r3
 8023940:	9b06      	ldr	r3, [sp, #24]
 8023942:	ebaa 0303 	sub.w	r3, sl, r3
 8023946:	4599      	cmp	r9, r3
 8023948:	bfa8      	it	ge
 802394a:	4699      	movge	r9, r3
 802394c:	f1b9 0f00 	cmp.w	r9, #0
 8023950:	dc33      	bgt.n	80239ba <_printf_float+0x396>
 8023952:	f04f 0800 	mov.w	r8, #0
 8023956:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802395a:	f104 0b1a 	add.w	fp, r4, #26
 802395e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023960:	ebaa 0303 	sub.w	r3, sl, r3
 8023964:	eba3 0309 	sub.w	r3, r3, r9
 8023968:	4543      	cmp	r3, r8
 802396a:	f77f af79 	ble.w	8023860 <_printf_float+0x23c>
 802396e:	2301      	movs	r3, #1
 8023970:	465a      	mov	r2, fp
 8023972:	4631      	mov	r1, r6
 8023974:	4628      	mov	r0, r5
 8023976:	47b8      	blx	r7
 8023978:	3001      	adds	r0, #1
 802397a:	f43f aeae 	beq.w	80236da <_printf_float+0xb6>
 802397e:	f108 0801 	add.w	r8, r8, #1
 8023982:	e7ec      	b.n	802395e <_printf_float+0x33a>
 8023984:	4642      	mov	r2, r8
 8023986:	4631      	mov	r1, r6
 8023988:	4628      	mov	r0, r5
 802398a:	47b8      	blx	r7
 802398c:	3001      	adds	r0, #1
 802398e:	d1c2      	bne.n	8023916 <_printf_float+0x2f2>
 8023990:	e6a3      	b.n	80236da <_printf_float+0xb6>
 8023992:	2301      	movs	r3, #1
 8023994:	4631      	mov	r1, r6
 8023996:	4628      	mov	r0, r5
 8023998:	9206      	str	r2, [sp, #24]
 802399a:	47b8      	blx	r7
 802399c:	3001      	adds	r0, #1
 802399e:	f43f ae9c 	beq.w	80236da <_printf_float+0xb6>
 80239a2:	9a06      	ldr	r2, [sp, #24]
 80239a4:	f10b 0b01 	add.w	fp, fp, #1
 80239a8:	e7bb      	b.n	8023922 <_printf_float+0x2fe>
 80239aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80239ae:	4631      	mov	r1, r6
 80239b0:	4628      	mov	r0, r5
 80239b2:	47b8      	blx	r7
 80239b4:	3001      	adds	r0, #1
 80239b6:	d1c0      	bne.n	802393a <_printf_float+0x316>
 80239b8:	e68f      	b.n	80236da <_printf_float+0xb6>
 80239ba:	9a06      	ldr	r2, [sp, #24]
 80239bc:	464b      	mov	r3, r9
 80239be:	4442      	add	r2, r8
 80239c0:	4631      	mov	r1, r6
 80239c2:	4628      	mov	r0, r5
 80239c4:	47b8      	blx	r7
 80239c6:	3001      	adds	r0, #1
 80239c8:	d1c3      	bne.n	8023952 <_printf_float+0x32e>
 80239ca:	e686      	b.n	80236da <_printf_float+0xb6>
 80239cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80239d0:	f1ba 0f01 	cmp.w	sl, #1
 80239d4:	dc01      	bgt.n	80239da <_printf_float+0x3b6>
 80239d6:	07db      	lsls	r3, r3, #31
 80239d8:	d536      	bpl.n	8023a48 <_printf_float+0x424>
 80239da:	2301      	movs	r3, #1
 80239dc:	4642      	mov	r2, r8
 80239de:	4631      	mov	r1, r6
 80239e0:	4628      	mov	r0, r5
 80239e2:	47b8      	blx	r7
 80239e4:	3001      	adds	r0, #1
 80239e6:	f43f ae78 	beq.w	80236da <_printf_float+0xb6>
 80239ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80239ee:	4631      	mov	r1, r6
 80239f0:	4628      	mov	r0, r5
 80239f2:	47b8      	blx	r7
 80239f4:	3001      	adds	r0, #1
 80239f6:	f43f ae70 	beq.w	80236da <_printf_float+0xb6>
 80239fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80239fe:	2200      	movs	r2, #0
 8023a00:	2300      	movs	r3, #0
 8023a02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023a06:	f7e4 ffa7 	bl	8008958 <__aeabi_dcmpeq>
 8023a0a:	b9c0      	cbnz	r0, 8023a3e <_printf_float+0x41a>
 8023a0c:	4653      	mov	r3, sl
 8023a0e:	f108 0201 	add.w	r2, r8, #1
 8023a12:	4631      	mov	r1, r6
 8023a14:	4628      	mov	r0, r5
 8023a16:	47b8      	blx	r7
 8023a18:	3001      	adds	r0, #1
 8023a1a:	d10c      	bne.n	8023a36 <_printf_float+0x412>
 8023a1c:	e65d      	b.n	80236da <_printf_float+0xb6>
 8023a1e:	2301      	movs	r3, #1
 8023a20:	465a      	mov	r2, fp
 8023a22:	4631      	mov	r1, r6
 8023a24:	4628      	mov	r0, r5
 8023a26:	47b8      	blx	r7
 8023a28:	3001      	adds	r0, #1
 8023a2a:	f43f ae56 	beq.w	80236da <_printf_float+0xb6>
 8023a2e:	f108 0801 	add.w	r8, r8, #1
 8023a32:	45d0      	cmp	r8, sl
 8023a34:	dbf3      	blt.n	8023a1e <_printf_float+0x3fa>
 8023a36:	464b      	mov	r3, r9
 8023a38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8023a3c:	e6df      	b.n	80237fe <_printf_float+0x1da>
 8023a3e:	f04f 0800 	mov.w	r8, #0
 8023a42:	f104 0b1a 	add.w	fp, r4, #26
 8023a46:	e7f4      	b.n	8023a32 <_printf_float+0x40e>
 8023a48:	2301      	movs	r3, #1
 8023a4a:	4642      	mov	r2, r8
 8023a4c:	e7e1      	b.n	8023a12 <_printf_float+0x3ee>
 8023a4e:	2301      	movs	r3, #1
 8023a50:	464a      	mov	r2, r9
 8023a52:	4631      	mov	r1, r6
 8023a54:	4628      	mov	r0, r5
 8023a56:	47b8      	blx	r7
 8023a58:	3001      	adds	r0, #1
 8023a5a:	f43f ae3e 	beq.w	80236da <_printf_float+0xb6>
 8023a5e:	f108 0801 	add.w	r8, r8, #1
 8023a62:	68e3      	ldr	r3, [r4, #12]
 8023a64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023a66:	1a5b      	subs	r3, r3, r1
 8023a68:	4543      	cmp	r3, r8
 8023a6a:	dcf0      	bgt.n	8023a4e <_printf_float+0x42a>
 8023a6c:	e6fc      	b.n	8023868 <_printf_float+0x244>
 8023a6e:	f04f 0800 	mov.w	r8, #0
 8023a72:	f104 0919 	add.w	r9, r4, #25
 8023a76:	e7f4      	b.n	8023a62 <_printf_float+0x43e>

08023a78 <_printf_common>:
 8023a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023a7c:	4616      	mov	r6, r2
 8023a7e:	4698      	mov	r8, r3
 8023a80:	688a      	ldr	r2, [r1, #8]
 8023a82:	690b      	ldr	r3, [r1, #16]
 8023a84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023a88:	4293      	cmp	r3, r2
 8023a8a:	bfb8      	it	lt
 8023a8c:	4613      	movlt	r3, r2
 8023a8e:	6033      	str	r3, [r6, #0]
 8023a90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023a94:	4607      	mov	r7, r0
 8023a96:	460c      	mov	r4, r1
 8023a98:	b10a      	cbz	r2, 8023a9e <_printf_common+0x26>
 8023a9a:	3301      	adds	r3, #1
 8023a9c:	6033      	str	r3, [r6, #0]
 8023a9e:	6823      	ldr	r3, [r4, #0]
 8023aa0:	0699      	lsls	r1, r3, #26
 8023aa2:	bf42      	ittt	mi
 8023aa4:	6833      	ldrmi	r3, [r6, #0]
 8023aa6:	3302      	addmi	r3, #2
 8023aa8:	6033      	strmi	r3, [r6, #0]
 8023aaa:	6825      	ldr	r5, [r4, #0]
 8023aac:	f015 0506 	ands.w	r5, r5, #6
 8023ab0:	d106      	bne.n	8023ac0 <_printf_common+0x48>
 8023ab2:	f104 0a19 	add.w	sl, r4, #25
 8023ab6:	68e3      	ldr	r3, [r4, #12]
 8023ab8:	6832      	ldr	r2, [r6, #0]
 8023aba:	1a9b      	subs	r3, r3, r2
 8023abc:	42ab      	cmp	r3, r5
 8023abe:	dc26      	bgt.n	8023b0e <_printf_common+0x96>
 8023ac0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023ac4:	6822      	ldr	r2, [r4, #0]
 8023ac6:	3b00      	subs	r3, #0
 8023ac8:	bf18      	it	ne
 8023aca:	2301      	movne	r3, #1
 8023acc:	0692      	lsls	r2, r2, #26
 8023ace:	d42b      	bmi.n	8023b28 <_printf_common+0xb0>
 8023ad0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023ad4:	4641      	mov	r1, r8
 8023ad6:	4638      	mov	r0, r7
 8023ad8:	47c8      	blx	r9
 8023ada:	3001      	adds	r0, #1
 8023adc:	d01e      	beq.n	8023b1c <_printf_common+0xa4>
 8023ade:	6823      	ldr	r3, [r4, #0]
 8023ae0:	6922      	ldr	r2, [r4, #16]
 8023ae2:	f003 0306 	and.w	r3, r3, #6
 8023ae6:	2b04      	cmp	r3, #4
 8023ae8:	bf02      	ittt	eq
 8023aea:	68e5      	ldreq	r5, [r4, #12]
 8023aec:	6833      	ldreq	r3, [r6, #0]
 8023aee:	1aed      	subeq	r5, r5, r3
 8023af0:	68a3      	ldr	r3, [r4, #8]
 8023af2:	bf0c      	ite	eq
 8023af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023af8:	2500      	movne	r5, #0
 8023afa:	4293      	cmp	r3, r2
 8023afc:	bfc4      	itt	gt
 8023afe:	1a9b      	subgt	r3, r3, r2
 8023b00:	18ed      	addgt	r5, r5, r3
 8023b02:	2600      	movs	r6, #0
 8023b04:	341a      	adds	r4, #26
 8023b06:	42b5      	cmp	r5, r6
 8023b08:	d11a      	bne.n	8023b40 <_printf_common+0xc8>
 8023b0a:	2000      	movs	r0, #0
 8023b0c:	e008      	b.n	8023b20 <_printf_common+0xa8>
 8023b0e:	2301      	movs	r3, #1
 8023b10:	4652      	mov	r2, sl
 8023b12:	4641      	mov	r1, r8
 8023b14:	4638      	mov	r0, r7
 8023b16:	47c8      	blx	r9
 8023b18:	3001      	adds	r0, #1
 8023b1a:	d103      	bne.n	8023b24 <_printf_common+0xac>
 8023b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8023b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b24:	3501      	adds	r5, #1
 8023b26:	e7c6      	b.n	8023ab6 <_printf_common+0x3e>
 8023b28:	18e1      	adds	r1, r4, r3
 8023b2a:	1c5a      	adds	r2, r3, #1
 8023b2c:	2030      	movs	r0, #48	@ 0x30
 8023b2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8023b32:	4422      	add	r2, r4
 8023b34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8023b38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8023b3c:	3302      	adds	r3, #2
 8023b3e:	e7c7      	b.n	8023ad0 <_printf_common+0x58>
 8023b40:	2301      	movs	r3, #1
 8023b42:	4622      	mov	r2, r4
 8023b44:	4641      	mov	r1, r8
 8023b46:	4638      	mov	r0, r7
 8023b48:	47c8      	blx	r9
 8023b4a:	3001      	adds	r0, #1
 8023b4c:	d0e6      	beq.n	8023b1c <_printf_common+0xa4>
 8023b4e:	3601      	adds	r6, #1
 8023b50:	e7d9      	b.n	8023b06 <_printf_common+0x8e>
	...

08023b54 <_printf_i>:
 8023b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023b58:	7e0f      	ldrb	r7, [r1, #24]
 8023b5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023b5c:	2f78      	cmp	r7, #120	@ 0x78
 8023b5e:	4691      	mov	r9, r2
 8023b60:	4680      	mov	r8, r0
 8023b62:	460c      	mov	r4, r1
 8023b64:	469a      	mov	sl, r3
 8023b66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8023b6a:	d807      	bhi.n	8023b7c <_printf_i+0x28>
 8023b6c:	2f62      	cmp	r7, #98	@ 0x62
 8023b6e:	d80a      	bhi.n	8023b86 <_printf_i+0x32>
 8023b70:	2f00      	cmp	r7, #0
 8023b72:	f000 80d2 	beq.w	8023d1a <_printf_i+0x1c6>
 8023b76:	2f58      	cmp	r7, #88	@ 0x58
 8023b78:	f000 80b9 	beq.w	8023cee <_printf_i+0x19a>
 8023b7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023b80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023b84:	e03a      	b.n	8023bfc <_printf_i+0xa8>
 8023b86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8023b8a:	2b15      	cmp	r3, #21
 8023b8c:	d8f6      	bhi.n	8023b7c <_printf_i+0x28>
 8023b8e:	a101      	add	r1, pc, #4	@ (adr r1, 8023b94 <_printf_i+0x40>)
 8023b90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023b94:	08023bed 	.word	0x08023bed
 8023b98:	08023c01 	.word	0x08023c01
 8023b9c:	08023b7d 	.word	0x08023b7d
 8023ba0:	08023b7d 	.word	0x08023b7d
 8023ba4:	08023b7d 	.word	0x08023b7d
 8023ba8:	08023b7d 	.word	0x08023b7d
 8023bac:	08023c01 	.word	0x08023c01
 8023bb0:	08023b7d 	.word	0x08023b7d
 8023bb4:	08023b7d 	.word	0x08023b7d
 8023bb8:	08023b7d 	.word	0x08023b7d
 8023bbc:	08023b7d 	.word	0x08023b7d
 8023bc0:	08023d01 	.word	0x08023d01
 8023bc4:	08023c2b 	.word	0x08023c2b
 8023bc8:	08023cbb 	.word	0x08023cbb
 8023bcc:	08023b7d 	.word	0x08023b7d
 8023bd0:	08023b7d 	.word	0x08023b7d
 8023bd4:	08023d23 	.word	0x08023d23
 8023bd8:	08023b7d 	.word	0x08023b7d
 8023bdc:	08023c2b 	.word	0x08023c2b
 8023be0:	08023b7d 	.word	0x08023b7d
 8023be4:	08023b7d 	.word	0x08023b7d
 8023be8:	08023cc3 	.word	0x08023cc3
 8023bec:	6833      	ldr	r3, [r6, #0]
 8023bee:	1d1a      	adds	r2, r3, #4
 8023bf0:	681b      	ldr	r3, [r3, #0]
 8023bf2:	6032      	str	r2, [r6, #0]
 8023bf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023bf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023bfc:	2301      	movs	r3, #1
 8023bfe:	e09d      	b.n	8023d3c <_printf_i+0x1e8>
 8023c00:	6833      	ldr	r3, [r6, #0]
 8023c02:	6820      	ldr	r0, [r4, #0]
 8023c04:	1d19      	adds	r1, r3, #4
 8023c06:	6031      	str	r1, [r6, #0]
 8023c08:	0606      	lsls	r6, r0, #24
 8023c0a:	d501      	bpl.n	8023c10 <_printf_i+0xbc>
 8023c0c:	681d      	ldr	r5, [r3, #0]
 8023c0e:	e003      	b.n	8023c18 <_printf_i+0xc4>
 8023c10:	0645      	lsls	r5, r0, #25
 8023c12:	d5fb      	bpl.n	8023c0c <_printf_i+0xb8>
 8023c14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8023c18:	2d00      	cmp	r5, #0
 8023c1a:	da03      	bge.n	8023c24 <_printf_i+0xd0>
 8023c1c:	232d      	movs	r3, #45	@ 0x2d
 8023c1e:	426d      	negs	r5, r5
 8023c20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023c24:	4859      	ldr	r0, [pc, #356]	@ (8023d8c <_printf_i+0x238>)
 8023c26:	230a      	movs	r3, #10
 8023c28:	e011      	b.n	8023c4e <_printf_i+0xfa>
 8023c2a:	6821      	ldr	r1, [r4, #0]
 8023c2c:	6833      	ldr	r3, [r6, #0]
 8023c2e:	0608      	lsls	r0, r1, #24
 8023c30:	f853 5b04 	ldr.w	r5, [r3], #4
 8023c34:	d402      	bmi.n	8023c3c <_printf_i+0xe8>
 8023c36:	0649      	lsls	r1, r1, #25
 8023c38:	bf48      	it	mi
 8023c3a:	b2ad      	uxthmi	r5, r5
 8023c3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8023c3e:	4853      	ldr	r0, [pc, #332]	@ (8023d8c <_printf_i+0x238>)
 8023c40:	6033      	str	r3, [r6, #0]
 8023c42:	bf14      	ite	ne
 8023c44:	230a      	movne	r3, #10
 8023c46:	2308      	moveq	r3, #8
 8023c48:	2100      	movs	r1, #0
 8023c4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8023c4e:	6866      	ldr	r6, [r4, #4]
 8023c50:	60a6      	str	r6, [r4, #8]
 8023c52:	2e00      	cmp	r6, #0
 8023c54:	bfa2      	ittt	ge
 8023c56:	6821      	ldrge	r1, [r4, #0]
 8023c58:	f021 0104 	bicge.w	r1, r1, #4
 8023c5c:	6021      	strge	r1, [r4, #0]
 8023c5e:	b90d      	cbnz	r5, 8023c64 <_printf_i+0x110>
 8023c60:	2e00      	cmp	r6, #0
 8023c62:	d04b      	beq.n	8023cfc <_printf_i+0x1a8>
 8023c64:	4616      	mov	r6, r2
 8023c66:	fbb5 f1f3 	udiv	r1, r5, r3
 8023c6a:	fb03 5711 	mls	r7, r3, r1, r5
 8023c6e:	5dc7      	ldrb	r7, [r0, r7]
 8023c70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023c74:	462f      	mov	r7, r5
 8023c76:	42bb      	cmp	r3, r7
 8023c78:	460d      	mov	r5, r1
 8023c7a:	d9f4      	bls.n	8023c66 <_printf_i+0x112>
 8023c7c:	2b08      	cmp	r3, #8
 8023c7e:	d10b      	bne.n	8023c98 <_printf_i+0x144>
 8023c80:	6823      	ldr	r3, [r4, #0]
 8023c82:	07df      	lsls	r7, r3, #31
 8023c84:	d508      	bpl.n	8023c98 <_printf_i+0x144>
 8023c86:	6923      	ldr	r3, [r4, #16]
 8023c88:	6861      	ldr	r1, [r4, #4]
 8023c8a:	4299      	cmp	r1, r3
 8023c8c:	bfde      	ittt	le
 8023c8e:	2330      	movle	r3, #48	@ 0x30
 8023c90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023c94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023c98:	1b92      	subs	r2, r2, r6
 8023c9a:	6122      	str	r2, [r4, #16]
 8023c9c:	f8cd a000 	str.w	sl, [sp]
 8023ca0:	464b      	mov	r3, r9
 8023ca2:	aa03      	add	r2, sp, #12
 8023ca4:	4621      	mov	r1, r4
 8023ca6:	4640      	mov	r0, r8
 8023ca8:	f7ff fee6 	bl	8023a78 <_printf_common>
 8023cac:	3001      	adds	r0, #1
 8023cae:	d14a      	bne.n	8023d46 <_printf_i+0x1f2>
 8023cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8023cb4:	b004      	add	sp, #16
 8023cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023cba:	6823      	ldr	r3, [r4, #0]
 8023cbc:	f043 0320 	orr.w	r3, r3, #32
 8023cc0:	6023      	str	r3, [r4, #0]
 8023cc2:	4833      	ldr	r0, [pc, #204]	@ (8023d90 <_printf_i+0x23c>)
 8023cc4:	2778      	movs	r7, #120	@ 0x78
 8023cc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8023cca:	6823      	ldr	r3, [r4, #0]
 8023ccc:	6831      	ldr	r1, [r6, #0]
 8023cce:	061f      	lsls	r7, r3, #24
 8023cd0:	f851 5b04 	ldr.w	r5, [r1], #4
 8023cd4:	d402      	bmi.n	8023cdc <_printf_i+0x188>
 8023cd6:	065f      	lsls	r7, r3, #25
 8023cd8:	bf48      	it	mi
 8023cda:	b2ad      	uxthmi	r5, r5
 8023cdc:	6031      	str	r1, [r6, #0]
 8023cde:	07d9      	lsls	r1, r3, #31
 8023ce0:	bf44      	itt	mi
 8023ce2:	f043 0320 	orrmi.w	r3, r3, #32
 8023ce6:	6023      	strmi	r3, [r4, #0]
 8023ce8:	b11d      	cbz	r5, 8023cf2 <_printf_i+0x19e>
 8023cea:	2310      	movs	r3, #16
 8023cec:	e7ac      	b.n	8023c48 <_printf_i+0xf4>
 8023cee:	4827      	ldr	r0, [pc, #156]	@ (8023d8c <_printf_i+0x238>)
 8023cf0:	e7e9      	b.n	8023cc6 <_printf_i+0x172>
 8023cf2:	6823      	ldr	r3, [r4, #0]
 8023cf4:	f023 0320 	bic.w	r3, r3, #32
 8023cf8:	6023      	str	r3, [r4, #0]
 8023cfa:	e7f6      	b.n	8023cea <_printf_i+0x196>
 8023cfc:	4616      	mov	r6, r2
 8023cfe:	e7bd      	b.n	8023c7c <_printf_i+0x128>
 8023d00:	6833      	ldr	r3, [r6, #0]
 8023d02:	6825      	ldr	r5, [r4, #0]
 8023d04:	6961      	ldr	r1, [r4, #20]
 8023d06:	1d18      	adds	r0, r3, #4
 8023d08:	6030      	str	r0, [r6, #0]
 8023d0a:	062e      	lsls	r6, r5, #24
 8023d0c:	681b      	ldr	r3, [r3, #0]
 8023d0e:	d501      	bpl.n	8023d14 <_printf_i+0x1c0>
 8023d10:	6019      	str	r1, [r3, #0]
 8023d12:	e002      	b.n	8023d1a <_printf_i+0x1c6>
 8023d14:	0668      	lsls	r0, r5, #25
 8023d16:	d5fb      	bpl.n	8023d10 <_printf_i+0x1bc>
 8023d18:	8019      	strh	r1, [r3, #0]
 8023d1a:	2300      	movs	r3, #0
 8023d1c:	6123      	str	r3, [r4, #16]
 8023d1e:	4616      	mov	r6, r2
 8023d20:	e7bc      	b.n	8023c9c <_printf_i+0x148>
 8023d22:	6833      	ldr	r3, [r6, #0]
 8023d24:	1d1a      	adds	r2, r3, #4
 8023d26:	6032      	str	r2, [r6, #0]
 8023d28:	681e      	ldr	r6, [r3, #0]
 8023d2a:	6862      	ldr	r2, [r4, #4]
 8023d2c:	2100      	movs	r1, #0
 8023d2e:	4630      	mov	r0, r6
 8023d30:	f7e4 f996 	bl	8008060 <memchr>
 8023d34:	b108      	cbz	r0, 8023d3a <_printf_i+0x1e6>
 8023d36:	1b80      	subs	r0, r0, r6
 8023d38:	6060      	str	r0, [r4, #4]
 8023d3a:	6863      	ldr	r3, [r4, #4]
 8023d3c:	6123      	str	r3, [r4, #16]
 8023d3e:	2300      	movs	r3, #0
 8023d40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023d44:	e7aa      	b.n	8023c9c <_printf_i+0x148>
 8023d46:	6923      	ldr	r3, [r4, #16]
 8023d48:	4632      	mov	r2, r6
 8023d4a:	4649      	mov	r1, r9
 8023d4c:	4640      	mov	r0, r8
 8023d4e:	47d0      	blx	sl
 8023d50:	3001      	adds	r0, #1
 8023d52:	d0ad      	beq.n	8023cb0 <_printf_i+0x15c>
 8023d54:	6823      	ldr	r3, [r4, #0]
 8023d56:	079b      	lsls	r3, r3, #30
 8023d58:	d413      	bmi.n	8023d82 <_printf_i+0x22e>
 8023d5a:	68e0      	ldr	r0, [r4, #12]
 8023d5c:	9b03      	ldr	r3, [sp, #12]
 8023d5e:	4298      	cmp	r0, r3
 8023d60:	bfb8      	it	lt
 8023d62:	4618      	movlt	r0, r3
 8023d64:	e7a6      	b.n	8023cb4 <_printf_i+0x160>
 8023d66:	2301      	movs	r3, #1
 8023d68:	4632      	mov	r2, r6
 8023d6a:	4649      	mov	r1, r9
 8023d6c:	4640      	mov	r0, r8
 8023d6e:	47d0      	blx	sl
 8023d70:	3001      	adds	r0, #1
 8023d72:	d09d      	beq.n	8023cb0 <_printf_i+0x15c>
 8023d74:	3501      	adds	r5, #1
 8023d76:	68e3      	ldr	r3, [r4, #12]
 8023d78:	9903      	ldr	r1, [sp, #12]
 8023d7a:	1a5b      	subs	r3, r3, r1
 8023d7c:	42ab      	cmp	r3, r5
 8023d7e:	dcf2      	bgt.n	8023d66 <_printf_i+0x212>
 8023d80:	e7eb      	b.n	8023d5a <_printf_i+0x206>
 8023d82:	2500      	movs	r5, #0
 8023d84:	f104 0619 	add.w	r6, r4, #25
 8023d88:	e7f5      	b.n	8023d76 <_printf_i+0x222>
 8023d8a:	bf00      	nop
 8023d8c:	08030bbb 	.word	0x08030bbb
 8023d90:	08030bcc 	.word	0x08030bcc

08023d94 <_scanf_float>:
 8023d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d98:	b087      	sub	sp, #28
 8023d9a:	4617      	mov	r7, r2
 8023d9c:	9303      	str	r3, [sp, #12]
 8023d9e:	688b      	ldr	r3, [r1, #8]
 8023da0:	1e5a      	subs	r2, r3, #1
 8023da2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8023da6:	bf81      	itttt	hi
 8023da8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8023dac:	eb03 0b05 	addhi.w	fp, r3, r5
 8023db0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8023db4:	608b      	strhi	r3, [r1, #8]
 8023db6:	680b      	ldr	r3, [r1, #0]
 8023db8:	460a      	mov	r2, r1
 8023dba:	f04f 0500 	mov.w	r5, #0
 8023dbe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8023dc2:	f842 3b1c 	str.w	r3, [r2], #28
 8023dc6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8023dca:	4680      	mov	r8, r0
 8023dcc:	460c      	mov	r4, r1
 8023dce:	bf98      	it	ls
 8023dd0:	f04f 0b00 	movls.w	fp, #0
 8023dd4:	9201      	str	r2, [sp, #4]
 8023dd6:	4616      	mov	r6, r2
 8023dd8:	46aa      	mov	sl, r5
 8023dda:	46a9      	mov	r9, r5
 8023ddc:	9502      	str	r5, [sp, #8]
 8023dde:	68a2      	ldr	r2, [r4, #8]
 8023de0:	b152      	cbz	r2, 8023df8 <_scanf_float+0x64>
 8023de2:	683b      	ldr	r3, [r7, #0]
 8023de4:	781b      	ldrb	r3, [r3, #0]
 8023de6:	2b4e      	cmp	r3, #78	@ 0x4e
 8023de8:	d864      	bhi.n	8023eb4 <_scanf_float+0x120>
 8023dea:	2b40      	cmp	r3, #64	@ 0x40
 8023dec:	d83c      	bhi.n	8023e68 <_scanf_float+0xd4>
 8023dee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8023df2:	b2c8      	uxtb	r0, r1
 8023df4:	280e      	cmp	r0, #14
 8023df6:	d93a      	bls.n	8023e6e <_scanf_float+0xda>
 8023df8:	f1b9 0f00 	cmp.w	r9, #0
 8023dfc:	d003      	beq.n	8023e06 <_scanf_float+0x72>
 8023dfe:	6823      	ldr	r3, [r4, #0]
 8023e00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8023e04:	6023      	str	r3, [r4, #0]
 8023e06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023e0a:	f1ba 0f01 	cmp.w	sl, #1
 8023e0e:	f200 8117 	bhi.w	8024040 <_scanf_float+0x2ac>
 8023e12:	9b01      	ldr	r3, [sp, #4]
 8023e14:	429e      	cmp	r6, r3
 8023e16:	f200 8108 	bhi.w	802402a <_scanf_float+0x296>
 8023e1a:	2001      	movs	r0, #1
 8023e1c:	b007      	add	sp, #28
 8023e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e22:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8023e26:	2a0d      	cmp	r2, #13
 8023e28:	d8e6      	bhi.n	8023df8 <_scanf_float+0x64>
 8023e2a:	a101      	add	r1, pc, #4	@ (adr r1, 8023e30 <_scanf_float+0x9c>)
 8023e2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8023e30:	08023f77 	.word	0x08023f77
 8023e34:	08023df9 	.word	0x08023df9
 8023e38:	08023df9 	.word	0x08023df9
 8023e3c:	08023df9 	.word	0x08023df9
 8023e40:	08023fd7 	.word	0x08023fd7
 8023e44:	08023faf 	.word	0x08023faf
 8023e48:	08023df9 	.word	0x08023df9
 8023e4c:	08023df9 	.word	0x08023df9
 8023e50:	08023f85 	.word	0x08023f85
 8023e54:	08023df9 	.word	0x08023df9
 8023e58:	08023df9 	.word	0x08023df9
 8023e5c:	08023df9 	.word	0x08023df9
 8023e60:	08023df9 	.word	0x08023df9
 8023e64:	08023f3d 	.word	0x08023f3d
 8023e68:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8023e6c:	e7db      	b.n	8023e26 <_scanf_float+0x92>
 8023e6e:	290e      	cmp	r1, #14
 8023e70:	d8c2      	bhi.n	8023df8 <_scanf_float+0x64>
 8023e72:	a001      	add	r0, pc, #4	@ (adr r0, 8023e78 <_scanf_float+0xe4>)
 8023e74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8023e78:	08023f2d 	.word	0x08023f2d
 8023e7c:	08023df9 	.word	0x08023df9
 8023e80:	08023f2d 	.word	0x08023f2d
 8023e84:	08023fc3 	.word	0x08023fc3
 8023e88:	08023df9 	.word	0x08023df9
 8023e8c:	08023ed5 	.word	0x08023ed5
 8023e90:	08023f13 	.word	0x08023f13
 8023e94:	08023f13 	.word	0x08023f13
 8023e98:	08023f13 	.word	0x08023f13
 8023e9c:	08023f13 	.word	0x08023f13
 8023ea0:	08023f13 	.word	0x08023f13
 8023ea4:	08023f13 	.word	0x08023f13
 8023ea8:	08023f13 	.word	0x08023f13
 8023eac:	08023f13 	.word	0x08023f13
 8023eb0:	08023f13 	.word	0x08023f13
 8023eb4:	2b6e      	cmp	r3, #110	@ 0x6e
 8023eb6:	d809      	bhi.n	8023ecc <_scanf_float+0x138>
 8023eb8:	2b60      	cmp	r3, #96	@ 0x60
 8023eba:	d8b2      	bhi.n	8023e22 <_scanf_float+0x8e>
 8023ebc:	2b54      	cmp	r3, #84	@ 0x54
 8023ebe:	d07b      	beq.n	8023fb8 <_scanf_float+0x224>
 8023ec0:	2b59      	cmp	r3, #89	@ 0x59
 8023ec2:	d199      	bne.n	8023df8 <_scanf_float+0x64>
 8023ec4:	2d07      	cmp	r5, #7
 8023ec6:	d197      	bne.n	8023df8 <_scanf_float+0x64>
 8023ec8:	2508      	movs	r5, #8
 8023eca:	e02c      	b.n	8023f26 <_scanf_float+0x192>
 8023ecc:	2b74      	cmp	r3, #116	@ 0x74
 8023ece:	d073      	beq.n	8023fb8 <_scanf_float+0x224>
 8023ed0:	2b79      	cmp	r3, #121	@ 0x79
 8023ed2:	e7f6      	b.n	8023ec2 <_scanf_float+0x12e>
 8023ed4:	6821      	ldr	r1, [r4, #0]
 8023ed6:	05c8      	lsls	r0, r1, #23
 8023ed8:	d51b      	bpl.n	8023f12 <_scanf_float+0x17e>
 8023eda:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8023ede:	6021      	str	r1, [r4, #0]
 8023ee0:	f109 0901 	add.w	r9, r9, #1
 8023ee4:	f1bb 0f00 	cmp.w	fp, #0
 8023ee8:	d003      	beq.n	8023ef2 <_scanf_float+0x15e>
 8023eea:	3201      	adds	r2, #1
 8023eec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023ef0:	60a2      	str	r2, [r4, #8]
 8023ef2:	68a3      	ldr	r3, [r4, #8]
 8023ef4:	3b01      	subs	r3, #1
 8023ef6:	60a3      	str	r3, [r4, #8]
 8023ef8:	6923      	ldr	r3, [r4, #16]
 8023efa:	3301      	adds	r3, #1
 8023efc:	6123      	str	r3, [r4, #16]
 8023efe:	687b      	ldr	r3, [r7, #4]
 8023f00:	3b01      	subs	r3, #1
 8023f02:	2b00      	cmp	r3, #0
 8023f04:	607b      	str	r3, [r7, #4]
 8023f06:	f340 8087 	ble.w	8024018 <_scanf_float+0x284>
 8023f0a:	683b      	ldr	r3, [r7, #0]
 8023f0c:	3301      	adds	r3, #1
 8023f0e:	603b      	str	r3, [r7, #0]
 8023f10:	e765      	b.n	8023dde <_scanf_float+0x4a>
 8023f12:	eb1a 0105 	adds.w	r1, sl, r5
 8023f16:	f47f af6f 	bne.w	8023df8 <_scanf_float+0x64>
 8023f1a:	6822      	ldr	r2, [r4, #0]
 8023f1c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8023f20:	6022      	str	r2, [r4, #0]
 8023f22:	460d      	mov	r5, r1
 8023f24:	468a      	mov	sl, r1
 8023f26:	f806 3b01 	strb.w	r3, [r6], #1
 8023f2a:	e7e2      	b.n	8023ef2 <_scanf_float+0x15e>
 8023f2c:	6822      	ldr	r2, [r4, #0]
 8023f2e:	0610      	lsls	r0, r2, #24
 8023f30:	f57f af62 	bpl.w	8023df8 <_scanf_float+0x64>
 8023f34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8023f38:	6022      	str	r2, [r4, #0]
 8023f3a:	e7f4      	b.n	8023f26 <_scanf_float+0x192>
 8023f3c:	f1ba 0f00 	cmp.w	sl, #0
 8023f40:	d10e      	bne.n	8023f60 <_scanf_float+0x1cc>
 8023f42:	f1b9 0f00 	cmp.w	r9, #0
 8023f46:	d10e      	bne.n	8023f66 <_scanf_float+0x1d2>
 8023f48:	6822      	ldr	r2, [r4, #0]
 8023f4a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8023f4e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8023f52:	d108      	bne.n	8023f66 <_scanf_float+0x1d2>
 8023f54:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8023f58:	6022      	str	r2, [r4, #0]
 8023f5a:	f04f 0a01 	mov.w	sl, #1
 8023f5e:	e7e2      	b.n	8023f26 <_scanf_float+0x192>
 8023f60:	f1ba 0f02 	cmp.w	sl, #2
 8023f64:	d055      	beq.n	8024012 <_scanf_float+0x27e>
 8023f66:	2d01      	cmp	r5, #1
 8023f68:	d002      	beq.n	8023f70 <_scanf_float+0x1dc>
 8023f6a:	2d04      	cmp	r5, #4
 8023f6c:	f47f af44 	bne.w	8023df8 <_scanf_float+0x64>
 8023f70:	3501      	adds	r5, #1
 8023f72:	b2ed      	uxtb	r5, r5
 8023f74:	e7d7      	b.n	8023f26 <_scanf_float+0x192>
 8023f76:	f1ba 0f01 	cmp.w	sl, #1
 8023f7a:	f47f af3d 	bne.w	8023df8 <_scanf_float+0x64>
 8023f7e:	f04f 0a02 	mov.w	sl, #2
 8023f82:	e7d0      	b.n	8023f26 <_scanf_float+0x192>
 8023f84:	b97d      	cbnz	r5, 8023fa6 <_scanf_float+0x212>
 8023f86:	f1b9 0f00 	cmp.w	r9, #0
 8023f8a:	f47f af38 	bne.w	8023dfe <_scanf_float+0x6a>
 8023f8e:	6822      	ldr	r2, [r4, #0]
 8023f90:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8023f94:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8023f98:	f040 8108 	bne.w	80241ac <_scanf_float+0x418>
 8023f9c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8023fa0:	6022      	str	r2, [r4, #0]
 8023fa2:	2501      	movs	r5, #1
 8023fa4:	e7bf      	b.n	8023f26 <_scanf_float+0x192>
 8023fa6:	2d03      	cmp	r5, #3
 8023fa8:	d0e2      	beq.n	8023f70 <_scanf_float+0x1dc>
 8023faa:	2d05      	cmp	r5, #5
 8023fac:	e7de      	b.n	8023f6c <_scanf_float+0x1d8>
 8023fae:	2d02      	cmp	r5, #2
 8023fb0:	f47f af22 	bne.w	8023df8 <_scanf_float+0x64>
 8023fb4:	2503      	movs	r5, #3
 8023fb6:	e7b6      	b.n	8023f26 <_scanf_float+0x192>
 8023fb8:	2d06      	cmp	r5, #6
 8023fba:	f47f af1d 	bne.w	8023df8 <_scanf_float+0x64>
 8023fbe:	2507      	movs	r5, #7
 8023fc0:	e7b1      	b.n	8023f26 <_scanf_float+0x192>
 8023fc2:	6822      	ldr	r2, [r4, #0]
 8023fc4:	0591      	lsls	r1, r2, #22
 8023fc6:	f57f af17 	bpl.w	8023df8 <_scanf_float+0x64>
 8023fca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8023fce:	6022      	str	r2, [r4, #0]
 8023fd0:	f8cd 9008 	str.w	r9, [sp, #8]
 8023fd4:	e7a7      	b.n	8023f26 <_scanf_float+0x192>
 8023fd6:	6822      	ldr	r2, [r4, #0]
 8023fd8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8023fdc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8023fe0:	d006      	beq.n	8023ff0 <_scanf_float+0x25c>
 8023fe2:	0550      	lsls	r0, r2, #21
 8023fe4:	f57f af08 	bpl.w	8023df8 <_scanf_float+0x64>
 8023fe8:	f1b9 0f00 	cmp.w	r9, #0
 8023fec:	f000 80de 	beq.w	80241ac <_scanf_float+0x418>
 8023ff0:	0591      	lsls	r1, r2, #22
 8023ff2:	bf58      	it	pl
 8023ff4:	9902      	ldrpl	r1, [sp, #8]
 8023ff6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8023ffa:	bf58      	it	pl
 8023ffc:	eba9 0101 	subpl.w	r1, r9, r1
 8024000:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8024004:	bf58      	it	pl
 8024006:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 802400a:	6022      	str	r2, [r4, #0]
 802400c:	f04f 0900 	mov.w	r9, #0
 8024010:	e789      	b.n	8023f26 <_scanf_float+0x192>
 8024012:	f04f 0a03 	mov.w	sl, #3
 8024016:	e786      	b.n	8023f26 <_scanf_float+0x192>
 8024018:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 802401c:	4639      	mov	r1, r7
 802401e:	4640      	mov	r0, r8
 8024020:	4798      	blx	r3
 8024022:	2800      	cmp	r0, #0
 8024024:	f43f aedb 	beq.w	8023dde <_scanf_float+0x4a>
 8024028:	e6e6      	b.n	8023df8 <_scanf_float+0x64>
 802402a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802402e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8024032:	463a      	mov	r2, r7
 8024034:	4640      	mov	r0, r8
 8024036:	4798      	blx	r3
 8024038:	6923      	ldr	r3, [r4, #16]
 802403a:	3b01      	subs	r3, #1
 802403c:	6123      	str	r3, [r4, #16]
 802403e:	e6e8      	b.n	8023e12 <_scanf_float+0x7e>
 8024040:	1e6b      	subs	r3, r5, #1
 8024042:	2b06      	cmp	r3, #6
 8024044:	d824      	bhi.n	8024090 <_scanf_float+0x2fc>
 8024046:	2d02      	cmp	r5, #2
 8024048:	d836      	bhi.n	80240b8 <_scanf_float+0x324>
 802404a:	9b01      	ldr	r3, [sp, #4]
 802404c:	429e      	cmp	r6, r3
 802404e:	f67f aee4 	bls.w	8023e1a <_scanf_float+0x86>
 8024052:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024056:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802405a:	463a      	mov	r2, r7
 802405c:	4640      	mov	r0, r8
 802405e:	4798      	blx	r3
 8024060:	6923      	ldr	r3, [r4, #16]
 8024062:	3b01      	subs	r3, #1
 8024064:	6123      	str	r3, [r4, #16]
 8024066:	e7f0      	b.n	802404a <_scanf_float+0x2b6>
 8024068:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802406c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8024070:	463a      	mov	r2, r7
 8024072:	4640      	mov	r0, r8
 8024074:	4798      	blx	r3
 8024076:	6923      	ldr	r3, [r4, #16]
 8024078:	3b01      	subs	r3, #1
 802407a:	6123      	str	r3, [r4, #16]
 802407c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024080:	fa5f fa8a 	uxtb.w	sl, sl
 8024084:	f1ba 0f02 	cmp.w	sl, #2
 8024088:	d1ee      	bne.n	8024068 <_scanf_float+0x2d4>
 802408a:	3d03      	subs	r5, #3
 802408c:	b2ed      	uxtb	r5, r5
 802408e:	1b76      	subs	r6, r6, r5
 8024090:	6823      	ldr	r3, [r4, #0]
 8024092:	05da      	lsls	r2, r3, #23
 8024094:	d530      	bpl.n	80240f8 <_scanf_float+0x364>
 8024096:	055b      	lsls	r3, r3, #21
 8024098:	d511      	bpl.n	80240be <_scanf_float+0x32a>
 802409a:	9b01      	ldr	r3, [sp, #4]
 802409c:	429e      	cmp	r6, r3
 802409e:	f67f aebc 	bls.w	8023e1a <_scanf_float+0x86>
 80240a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80240a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80240aa:	463a      	mov	r2, r7
 80240ac:	4640      	mov	r0, r8
 80240ae:	4798      	blx	r3
 80240b0:	6923      	ldr	r3, [r4, #16]
 80240b2:	3b01      	subs	r3, #1
 80240b4:	6123      	str	r3, [r4, #16]
 80240b6:	e7f0      	b.n	802409a <_scanf_float+0x306>
 80240b8:	46aa      	mov	sl, r5
 80240ba:	46b3      	mov	fp, r6
 80240bc:	e7de      	b.n	802407c <_scanf_float+0x2e8>
 80240be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80240c2:	6923      	ldr	r3, [r4, #16]
 80240c4:	2965      	cmp	r1, #101	@ 0x65
 80240c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80240ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80240ce:	6123      	str	r3, [r4, #16]
 80240d0:	d00c      	beq.n	80240ec <_scanf_float+0x358>
 80240d2:	2945      	cmp	r1, #69	@ 0x45
 80240d4:	d00a      	beq.n	80240ec <_scanf_float+0x358>
 80240d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80240da:	463a      	mov	r2, r7
 80240dc:	4640      	mov	r0, r8
 80240de:	4798      	blx	r3
 80240e0:	6923      	ldr	r3, [r4, #16]
 80240e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80240e6:	3b01      	subs	r3, #1
 80240e8:	1eb5      	subs	r5, r6, #2
 80240ea:	6123      	str	r3, [r4, #16]
 80240ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80240f0:	463a      	mov	r2, r7
 80240f2:	4640      	mov	r0, r8
 80240f4:	4798      	blx	r3
 80240f6:	462e      	mov	r6, r5
 80240f8:	6822      	ldr	r2, [r4, #0]
 80240fa:	f012 0210 	ands.w	r2, r2, #16
 80240fe:	d001      	beq.n	8024104 <_scanf_float+0x370>
 8024100:	2000      	movs	r0, #0
 8024102:	e68b      	b.n	8023e1c <_scanf_float+0x88>
 8024104:	7032      	strb	r2, [r6, #0]
 8024106:	6823      	ldr	r3, [r4, #0]
 8024108:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 802410c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8024110:	d11c      	bne.n	802414c <_scanf_float+0x3b8>
 8024112:	9b02      	ldr	r3, [sp, #8]
 8024114:	454b      	cmp	r3, r9
 8024116:	eba3 0209 	sub.w	r2, r3, r9
 802411a:	d123      	bne.n	8024164 <_scanf_float+0x3d0>
 802411c:	9901      	ldr	r1, [sp, #4]
 802411e:	2200      	movs	r2, #0
 8024120:	4640      	mov	r0, r8
 8024122:	f7fe ffdd 	bl	80230e0 <_strtod_r>
 8024126:	9b03      	ldr	r3, [sp, #12]
 8024128:	6821      	ldr	r1, [r4, #0]
 802412a:	681b      	ldr	r3, [r3, #0]
 802412c:	f011 0f02 	tst.w	r1, #2
 8024130:	ec57 6b10 	vmov	r6, r7, d0
 8024134:	f103 0204 	add.w	r2, r3, #4
 8024138:	d01f      	beq.n	802417a <_scanf_float+0x3e6>
 802413a:	9903      	ldr	r1, [sp, #12]
 802413c:	600a      	str	r2, [r1, #0]
 802413e:	681b      	ldr	r3, [r3, #0]
 8024140:	e9c3 6700 	strd	r6, r7, [r3]
 8024144:	68e3      	ldr	r3, [r4, #12]
 8024146:	3301      	adds	r3, #1
 8024148:	60e3      	str	r3, [r4, #12]
 802414a:	e7d9      	b.n	8024100 <_scanf_float+0x36c>
 802414c:	9b04      	ldr	r3, [sp, #16]
 802414e:	2b00      	cmp	r3, #0
 8024150:	d0e4      	beq.n	802411c <_scanf_float+0x388>
 8024152:	9905      	ldr	r1, [sp, #20]
 8024154:	230a      	movs	r3, #10
 8024156:	3101      	adds	r1, #1
 8024158:	4640      	mov	r0, r8
 802415a:	f7ff f841 	bl	80231e0 <_strtol_r>
 802415e:	9b04      	ldr	r3, [sp, #16]
 8024160:	9e05      	ldr	r6, [sp, #20]
 8024162:	1ac2      	subs	r2, r0, r3
 8024164:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8024168:	429e      	cmp	r6, r3
 802416a:	bf28      	it	cs
 802416c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8024170:	4910      	ldr	r1, [pc, #64]	@ (80241b4 <_scanf_float+0x420>)
 8024172:	4630      	mov	r0, r6
 8024174:	f000 f8f6 	bl	8024364 <siprintf>
 8024178:	e7d0      	b.n	802411c <_scanf_float+0x388>
 802417a:	f011 0f04 	tst.w	r1, #4
 802417e:	9903      	ldr	r1, [sp, #12]
 8024180:	600a      	str	r2, [r1, #0]
 8024182:	d1dc      	bne.n	802413e <_scanf_float+0x3aa>
 8024184:	681d      	ldr	r5, [r3, #0]
 8024186:	4632      	mov	r2, r6
 8024188:	463b      	mov	r3, r7
 802418a:	4630      	mov	r0, r6
 802418c:	4639      	mov	r1, r7
 802418e:	f7e4 fc15 	bl	80089bc <__aeabi_dcmpun>
 8024192:	b128      	cbz	r0, 80241a0 <_scanf_float+0x40c>
 8024194:	4808      	ldr	r0, [pc, #32]	@ (80241b8 <_scanf_float+0x424>)
 8024196:	f000 faeb 	bl	8024770 <nanf>
 802419a:	ed85 0a00 	vstr	s0, [r5]
 802419e:	e7d1      	b.n	8024144 <_scanf_float+0x3b0>
 80241a0:	4630      	mov	r0, r6
 80241a2:	4639      	mov	r1, r7
 80241a4:	f7e4 fc68 	bl	8008a78 <__aeabi_d2f>
 80241a8:	6028      	str	r0, [r5, #0]
 80241aa:	e7cb      	b.n	8024144 <_scanf_float+0x3b0>
 80241ac:	f04f 0900 	mov.w	r9, #0
 80241b0:	e629      	b.n	8023e06 <_scanf_float+0x72>
 80241b2:	bf00      	nop
 80241b4:	08030bdd 	.word	0x08030bdd
 80241b8:	08030a4f 	.word	0x08030a4f

080241bc <std>:
 80241bc:	2300      	movs	r3, #0
 80241be:	b510      	push	{r4, lr}
 80241c0:	4604      	mov	r4, r0
 80241c2:	e9c0 3300 	strd	r3, r3, [r0]
 80241c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80241ca:	6083      	str	r3, [r0, #8]
 80241cc:	8181      	strh	r1, [r0, #12]
 80241ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80241d0:	81c2      	strh	r2, [r0, #14]
 80241d2:	6183      	str	r3, [r0, #24]
 80241d4:	4619      	mov	r1, r3
 80241d6:	2208      	movs	r2, #8
 80241d8:	305c      	adds	r0, #92	@ 0x5c
 80241da:	f000 f950 	bl	802447e <memset>
 80241de:	4b0d      	ldr	r3, [pc, #52]	@ (8024214 <std+0x58>)
 80241e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80241e2:	4b0d      	ldr	r3, [pc, #52]	@ (8024218 <std+0x5c>)
 80241e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80241e6:	4b0d      	ldr	r3, [pc, #52]	@ (802421c <std+0x60>)
 80241e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80241ea:	4b0d      	ldr	r3, [pc, #52]	@ (8024220 <std+0x64>)
 80241ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80241ee:	4b0d      	ldr	r3, [pc, #52]	@ (8024224 <std+0x68>)
 80241f0:	6224      	str	r4, [r4, #32]
 80241f2:	429c      	cmp	r4, r3
 80241f4:	d006      	beq.n	8024204 <std+0x48>
 80241f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80241fa:	4294      	cmp	r4, r2
 80241fc:	d002      	beq.n	8024204 <std+0x48>
 80241fe:	33d0      	adds	r3, #208	@ 0xd0
 8024200:	429c      	cmp	r4, r3
 8024202:	d105      	bne.n	8024210 <std+0x54>
 8024204:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8024208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802420c:	f000 ba8c 	b.w	8024728 <__retarget_lock_init_recursive>
 8024210:	bd10      	pop	{r4, pc}
 8024212:	bf00      	nop
 8024214:	080243a5 	.word	0x080243a5
 8024218:	080243c7 	.word	0x080243c7
 802421c:	080243ff 	.word	0x080243ff
 8024220:	08024423 	.word	0x08024423
 8024224:	200027f0 	.word	0x200027f0

08024228 <stdio_exit_handler>:
 8024228:	4a02      	ldr	r2, [pc, #8]	@ (8024234 <stdio_exit_handler+0xc>)
 802422a:	4903      	ldr	r1, [pc, #12]	@ (8024238 <stdio_exit_handler+0x10>)
 802422c:	4803      	ldr	r0, [pc, #12]	@ (802423c <stdio_exit_handler+0x14>)
 802422e:	f000 b87b 	b.w	8024328 <_fwalk_sglue>
 8024232:	bf00      	nop
 8024234:	2000049c 	.word	0x2000049c
 8024238:	08026b85 	.word	0x08026b85
 802423c:	20000618 	.word	0x20000618

08024240 <cleanup_stdio>:
 8024240:	6841      	ldr	r1, [r0, #4]
 8024242:	4b0c      	ldr	r3, [pc, #48]	@ (8024274 <cleanup_stdio+0x34>)
 8024244:	4299      	cmp	r1, r3
 8024246:	b510      	push	{r4, lr}
 8024248:	4604      	mov	r4, r0
 802424a:	d001      	beq.n	8024250 <cleanup_stdio+0x10>
 802424c:	f002 fc9a 	bl	8026b84 <_fflush_r>
 8024250:	68a1      	ldr	r1, [r4, #8]
 8024252:	4b09      	ldr	r3, [pc, #36]	@ (8024278 <cleanup_stdio+0x38>)
 8024254:	4299      	cmp	r1, r3
 8024256:	d002      	beq.n	802425e <cleanup_stdio+0x1e>
 8024258:	4620      	mov	r0, r4
 802425a:	f002 fc93 	bl	8026b84 <_fflush_r>
 802425e:	68e1      	ldr	r1, [r4, #12]
 8024260:	4b06      	ldr	r3, [pc, #24]	@ (802427c <cleanup_stdio+0x3c>)
 8024262:	4299      	cmp	r1, r3
 8024264:	d004      	beq.n	8024270 <cleanup_stdio+0x30>
 8024266:	4620      	mov	r0, r4
 8024268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802426c:	f002 bc8a 	b.w	8026b84 <_fflush_r>
 8024270:	bd10      	pop	{r4, pc}
 8024272:	bf00      	nop
 8024274:	200027f0 	.word	0x200027f0
 8024278:	20002858 	.word	0x20002858
 802427c:	200028c0 	.word	0x200028c0

08024280 <global_stdio_init.part.0>:
 8024280:	b510      	push	{r4, lr}
 8024282:	4b0b      	ldr	r3, [pc, #44]	@ (80242b0 <global_stdio_init.part.0+0x30>)
 8024284:	4c0b      	ldr	r4, [pc, #44]	@ (80242b4 <global_stdio_init.part.0+0x34>)
 8024286:	4a0c      	ldr	r2, [pc, #48]	@ (80242b8 <global_stdio_init.part.0+0x38>)
 8024288:	601a      	str	r2, [r3, #0]
 802428a:	4620      	mov	r0, r4
 802428c:	2200      	movs	r2, #0
 802428e:	2104      	movs	r1, #4
 8024290:	f7ff ff94 	bl	80241bc <std>
 8024294:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8024298:	2201      	movs	r2, #1
 802429a:	2109      	movs	r1, #9
 802429c:	f7ff ff8e 	bl	80241bc <std>
 80242a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80242a4:	2202      	movs	r2, #2
 80242a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80242aa:	2112      	movs	r1, #18
 80242ac:	f7ff bf86 	b.w	80241bc <std>
 80242b0:	20002928 	.word	0x20002928
 80242b4:	200027f0 	.word	0x200027f0
 80242b8:	08024229 	.word	0x08024229

080242bc <__sfp_lock_acquire>:
 80242bc:	4801      	ldr	r0, [pc, #4]	@ (80242c4 <__sfp_lock_acquire+0x8>)
 80242be:	f000 ba34 	b.w	802472a <__retarget_lock_acquire_recursive>
 80242c2:	bf00      	nop
 80242c4:	20002931 	.word	0x20002931

080242c8 <__sfp_lock_release>:
 80242c8:	4801      	ldr	r0, [pc, #4]	@ (80242d0 <__sfp_lock_release+0x8>)
 80242ca:	f000 ba2f 	b.w	802472c <__retarget_lock_release_recursive>
 80242ce:	bf00      	nop
 80242d0:	20002931 	.word	0x20002931

080242d4 <__sinit>:
 80242d4:	b510      	push	{r4, lr}
 80242d6:	4604      	mov	r4, r0
 80242d8:	f7ff fff0 	bl	80242bc <__sfp_lock_acquire>
 80242dc:	6a23      	ldr	r3, [r4, #32]
 80242de:	b11b      	cbz	r3, 80242e8 <__sinit+0x14>
 80242e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80242e4:	f7ff bff0 	b.w	80242c8 <__sfp_lock_release>
 80242e8:	4b04      	ldr	r3, [pc, #16]	@ (80242fc <__sinit+0x28>)
 80242ea:	6223      	str	r3, [r4, #32]
 80242ec:	4b04      	ldr	r3, [pc, #16]	@ (8024300 <__sinit+0x2c>)
 80242ee:	681b      	ldr	r3, [r3, #0]
 80242f0:	2b00      	cmp	r3, #0
 80242f2:	d1f5      	bne.n	80242e0 <__sinit+0xc>
 80242f4:	f7ff ffc4 	bl	8024280 <global_stdio_init.part.0>
 80242f8:	e7f2      	b.n	80242e0 <__sinit+0xc>
 80242fa:	bf00      	nop
 80242fc:	08024241 	.word	0x08024241
 8024300:	20002928 	.word	0x20002928

08024304 <fiprintf>:
 8024304:	b40e      	push	{r1, r2, r3}
 8024306:	b503      	push	{r0, r1, lr}
 8024308:	4601      	mov	r1, r0
 802430a:	ab03      	add	r3, sp, #12
 802430c:	4805      	ldr	r0, [pc, #20]	@ (8024324 <fiprintf+0x20>)
 802430e:	f853 2b04 	ldr.w	r2, [r3], #4
 8024312:	6800      	ldr	r0, [r0, #0]
 8024314:	9301      	str	r3, [sp, #4]
 8024316:	f002 fa99 	bl	802684c <_vfiprintf_r>
 802431a:	b002      	add	sp, #8
 802431c:	f85d eb04 	ldr.w	lr, [sp], #4
 8024320:	b003      	add	sp, #12
 8024322:	4770      	bx	lr
 8024324:	20000614 	.word	0x20000614

08024328 <_fwalk_sglue>:
 8024328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802432c:	4607      	mov	r7, r0
 802432e:	4688      	mov	r8, r1
 8024330:	4614      	mov	r4, r2
 8024332:	2600      	movs	r6, #0
 8024334:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024338:	f1b9 0901 	subs.w	r9, r9, #1
 802433c:	d505      	bpl.n	802434a <_fwalk_sglue+0x22>
 802433e:	6824      	ldr	r4, [r4, #0]
 8024340:	2c00      	cmp	r4, #0
 8024342:	d1f7      	bne.n	8024334 <_fwalk_sglue+0xc>
 8024344:	4630      	mov	r0, r6
 8024346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802434a:	89ab      	ldrh	r3, [r5, #12]
 802434c:	2b01      	cmp	r3, #1
 802434e:	d907      	bls.n	8024360 <_fwalk_sglue+0x38>
 8024350:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024354:	3301      	adds	r3, #1
 8024356:	d003      	beq.n	8024360 <_fwalk_sglue+0x38>
 8024358:	4629      	mov	r1, r5
 802435a:	4638      	mov	r0, r7
 802435c:	47c0      	blx	r8
 802435e:	4306      	orrs	r6, r0
 8024360:	3568      	adds	r5, #104	@ 0x68
 8024362:	e7e9      	b.n	8024338 <_fwalk_sglue+0x10>

08024364 <siprintf>:
 8024364:	b40e      	push	{r1, r2, r3}
 8024366:	b500      	push	{lr}
 8024368:	b09c      	sub	sp, #112	@ 0x70
 802436a:	ab1d      	add	r3, sp, #116	@ 0x74
 802436c:	9002      	str	r0, [sp, #8]
 802436e:	9006      	str	r0, [sp, #24]
 8024370:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8024374:	4809      	ldr	r0, [pc, #36]	@ (802439c <siprintf+0x38>)
 8024376:	9107      	str	r1, [sp, #28]
 8024378:	9104      	str	r1, [sp, #16]
 802437a:	4909      	ldr	r1, [pc, #36]	@ (80243a0 <siprintf+0x3c>)
 802437c:	f853 2b04 	ldr.w	r2, [r3], #4
 8024380:	9105      	str	r1, [sp, #20]
 8024382:	6800      	ldr	r0, [r0, #0]
 8024384:	9301      	str	r3, [sp, #4]
 8024386:	a902      	add	r1, sp, #8
 8024388:	f002 f93a 	bl	8026600 <_svfiprintf_r>
 802438c:	9b02      	ldr	r3, [sp, #8]
 802438e:	2200      	movs	r2, #0
 8024390:	701a      	strb	r2, [r3, #0]
 8024392:	b01c      	add	sp, #112	@ 0x70
 8024394:	f85d eb04 	ldr.w	lr, [sp], #4
 8024398:	b003      	add	sp, #12
 802439a:	4770      	bx	lr
 802439c:	20000614 	.word	0x20000614
 80243a0:	ffff0208 	.word	0xffff0208

080243a4 <__sread>:
 80243a4:	b510      	push	{r4, lr}
 80243a6:	460c      	mov	r4, r1
 80243a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80243ac:	f000 f95e 	bl	802466c <_read_r>
 80243b0:	2800      	cmp	r0, #0
 80243b2:	bfab      	itete	ge
 80243b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80243b6:	89a3      	ldrhlt	r3, [r4, #12]
 80243b8:	181b      	addge	r3, r3, r0
 80243ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80243be:	bfac      	ite	ge
 80243c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80243c2:	81a3      	strhlt	r3, [r4, #12]
 80243c4:	bd10      	pop	{r4, pc}

080243c6 <__swrite>:
 80243c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80243ca:	461f      	mov	r7, r3
 80243cc:	898b      	ldrh	r3, [r1, #12]
 80243ce:	05db      	lsls	r3, r3, #23
 80243d0:	4605      	mov	r5, r0
 80243d2:	460c      	mov	r4, r1
 80243d4:	4616      	mov	r6, r2
 80243d6:	d505      	bpl.n	80243e4 <__swrite+0x1e>
 80243d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80243dc:	2302      	movs	r3, #2
 80243de:	2200      	movs	r2, #0
 80243e0:	f000 f932 	bl	8024648 <_lseek_r>
 80243e4:	89a3      	ldrh	r3, [r4, #12]
 80243e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80243ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80243ee:	81a3      	strh	r3, [r4, #12]
 80243f0:	4632      	mov	r2, r6
 80243f2:	463b      	mov	r3, r7
 80243f4:	4628      	mov	r0, r5
 80243f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80243fa:	f000 b959 	b.w	80246b0 <_write_r>

080243fe <__sseek>:
 80243fe:	b510      	push	{r4, lr}
 8024400:	460c      	mov	r4, r1
 8024402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024406:	f000 f91f 	bl	8024648 <_lseek_r>
 802440a:	1c43      	adds	r3, r0, #1
 802440c:	89a3      	ldrh	r3, [r4, #12]
 802440e:	bf15      	itete	ne
 8024410:	6560      	strne	r0, [r4, #84]	@ 0x54
 8024412:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8024416:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802441a:	81a3      	strheq	r3, [r4, #12]
 802441c:	bf18      	it	ne
 802441e:	81a3      	strhne	r3, [r4, #12]
 8024420:	bd10      	pop	{r4, pc}

08024422 <__sclose>:
 8024422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024426:	f000 b8ff 	b.w	8024628 <_close_r>

0802442a <memcmp>:
 802442a:	b510      	push	{r4, lr}
 802442c:	3901      	subs	r1, #1
 802442e:	4402      	add	r2, r0
 8024430:	4290      	cmp	r0, r2
 8024432:	d101      	bne.n	8024438 <memcmp+0xe>
 8024434:	2000      	movs	r0, #0
 8024436:	e005      	b.n	8024444 <memcmp+0x1a>
 8024438:	7803      	ldrb	r3, [r0, #0]
 802443a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802443e:	42a3      	cmp	r3, r4
 8024440:	d001      	beq.n	8024446 <memcmp+0x1c>
 8024442:	1b18      	subs	r0, r3, r4
 8024444:	bd10      	pop	{r4, pc}
 8024446:	3001      	adds	r0, #1
 8024448:	e7f2      	b.n	8024430 <memcmp+0x6>

0802444a <memmove>:
 802444a:	4288      	cmp	r0, r1
 802444c:	b510      	push	{r4, lr}
 802444e:	eb01 0402 	add.w	r4, r1, r2
 8024452:	d902      	bls.n	802445a <memmove+0x10>
 8024454:	4284      	cmp	r4, r0
 8024456:	4623      	mov	r3, r4
 8024458:	d807      	bhi.n	802446a <memmove+0x20>
 802445a:	1e43      	subs	r3, r0, #1
 802445c:	42a1      	cmp	r1, r4
 802445e:	d008      	beq.n	8024472 <memmove+0x28>
 8024460:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024464:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024468:	e7f8      	b.n	802445c <memmove+0x12>
 802446a:	4402      	add	r2, r0
 802446c:	4601      	mov	r1, r0
 802446e:	428a      	cmp	r2, r1
 8024470:	d100      	bne.n	8024474 <memmove+0x2a>
 8024472:	bd10      	pop	{r4, pc}
 8024474:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024478:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802447c:	e7f7      	b.n	802446e <memmove+0x24>

0802447e <memset>:
 802447e:	4402      	add	r2, r0
 8024480:	4603      	mov	r3, r0
 8024482:	4293      	cmp	r3, r2
 8024484:	d100      	bne.n	8024488 <memset+0xa>
 8024486:	4770      	bx	lr
 8024488:	f803 1b01 	strb.w	r1, [r3], #1
 802448c:	e7f9      	b.n	8024482 <memset+0x4>

0802448e <strcat>:
 802448e:	b510      	push	{r4, lr}
 8024490:	4602      	mov	r2, r0
 8024492:	7814      	ldrb	r4, [r2, #0]
 8024494:	4613      	mov	r3, r2
 8024496:	3201      	adds	r2, #1
 8024498:	2c00      	cmp	r4, #0
 802449a:	d1fa      	bne.n	8024492 <strcat+0x4>
 802449c:	3b01      	subs	r3, #1
 802449e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80244a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80244a6:	2a00      	cmp	r2, #0
 80244a8:	d1f9      	bne.n	802449e <strcat+0x10>
 80244aa:	bd10      	pop	{r4, pc}

080244ac <strchr>:
 80244ac:	b2c9      	uxtb	r1, r1
 80244ae:	4603      	mov	r3, r0
 80244b0:	4618      	mov	r0, r3
 80244b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80244b6:	b112      	cbz	r2, 80244be <strchr+0x12>
 80244b8:	428a      	cmp	r2, r1
 80244ba:	d1f9      	bne.n	80244b0 <strchr+0x4>
 80244bc:	4770      	bx	lr
 80244be:	2900      	cmp	r1, #0
 80244c0:	bf18      	it	ne
 80244c2:	2000      	movne	r0, #0
 80244c4:	4770      	bx	lr

080244c6 <strncmp>:
 80244c6:	b510      	push	{r4, lr}
 80244c8:	b16a      	cbz	r2, 80244e6 <strncmp+0x20>
 80244ca:	3901      	subs	r1, #1
 80244cc:	1884      	adds	r4, r0, r2
 80244ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80244d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80244d6:	429a      	cmp	r2, r3
 80244d8:	d103      	bne.n	80244e2 <strncmp+0x1c>
 80244da:	42a0      	cmp	r0, r4
 80244dc:	d001      	beq.n	80244e2 <strncmp+0x1c>
 80244de:	2a00      	cmp	r2, #0
 80244e0:	d1f5      	bne.n	80244ce <strncmp+0x8>
 80244e2:	1ad0      	subs	r0, r2, r3
 80244e4:	bd10      	pop	{r4, pc}
 80244e6:	4610      	mov	r0, r2
 80244e8:	e7fc      	b.n	80244e4 <strncmp+0x1e>

080244ea <strncpy>:
 80244ea:	b510      	push	{r4, lr}
 80244ec:	3901      	subs	r1, #1
 80244ee:	4603      	mov	r3, r0
 80244f0:	b132      	cbz	r2, 8024500 <strncpy+0x16>
 80244f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80244f6:	f803 4b01 	strb.w	r4, [r3], #1
 80244fa:	3a01      	subs	r2, #1
 80244fc:	2c00      	cmp	r4, #0
 80244fe:	d1f7      	bne.n	80244f0 <strncpy+0x6>
 8024500:	441a      	add	r2, r3
 8024502:	2100      	movs	r1, #0
 8024504:	4293      	cmp	r3, r2
 8024506:	d100      	bne.n	802450a <strncpy+0x20>
 8024508:	bd10      	pop	{r4, pc}
 802450a:	f803 1b01 	strb.w	r1, [r3], #1
 802450e:	e7f9      	b.n	8024504 <strncpy+0x1a>

08024510 <strrchr>:
 8024510:	b538      	push	{r3, r4, r5, lr}
 8024512:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8024516:	4603      	mov	r3, r0
 8024518:	d10e      	bne.n	8024538 <strrchr+0x28>
 802451a:	4621      	mov	r1, r4
 802451c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024520:	f7ff bfc4 	b.w	80244ac <strchr>
 8024524:	1c43      	adds	r3, r0, #1
 8024526:	4605      	mov	r5, r0
 8024528:	4621      	mov	r1, r4
 802452a:	4618      	mov	r0, r3
 802452c:	f7ff ffbe 	bl	80244ac <strchr>
 8024530:	2800      	cmp	r0, #0
 8024532:	d1f7      	bne.n	8024524 <strrchr+0x14>
 8024534:	4628      	mov	r0, r5
 8024536:	bd38      	pop	{r3, r4, r5, pc}
 8024538:	2500      	movs	r5, #0
 802453a:	e7f5      	b.n	8024528 <strrchr+0x18>

0802453c <strtok>:
 802453c:	4b16      	ldr	r3, [pc, #88]	@ (8024598 <strtok+0x5c>)
 802453e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024542:	681f      	ldr	r7, [r3, #0]
 8024544:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8024546:	4605      	mov	r5, r0
 8024548:	460e      	mov	r6, r1
 802454a:	b9ec      	cbnz	r4, 8024588 <strtok+0x4c>
 802454c:	2050      	movs	r0, #80	@ 0x50
 802454e:	f7fd fecd 	bl	80222ec <malloc>
 8024552:	4602      	mov	r2, r0
 8024554:	6478      	str	r0, [r7, #68]	@ 0x44
 8024556:	b920      	cbnz	r0, 8024562 <strtok+0x26>
 8024558:	4b10      	ldr	r3, [pc, #64]	@ (802459c <strtok+0x60>)
 802455a:	4811      	ldr	r0, [pc, #68]	@ (80245a0 <strtok+0x64>)
 802455c:	215b      	movs	r1, #91	@ 0x5b
 802455e:	f7fd fe8b 	bl	8022278 <__assert_func>
 8024562:	e9c0 4400 	strd	r4, r4, [r0]
 8024566:	e9c0 4402 	strd	r4, r4, [r0, #8]
 802456a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 802456e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8024572:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8024576:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 802457a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 802457e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8024582:	6184      	str	r4, [r0, #24]
 8024584:	7704      	strb	r4, [r0, #28]
 8024586:	6244      	str	r4, [r0, #36]	@ 0x24
 8024588:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802458a:	4631      	mov	r1, r6
 802458c:	4628      	mov	r0, r5
 802458e:	2301      	movs	r3, #1
 8024590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024594:	f000 b806 	b.w	80245a4 <__strtok_r>
 8024598:	20000614 	.word	0x20000614
 802459c:	08030be2 	.word	0x08030be2
 80245a0:	08030bf9 	.word	0x08030bf9

080245a4 <__strtok_r>:
 80245a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80245a6:	4604      	mov	r4, r0
 80245a8:	b908      	cbnz	r0, 80245ae <__strtok_r+0xa>
 80245aa:	6814      	ldr	r4, [r2, #0]
 80245ac:	b144      	cbz	r4, 80245c0 <__strtok_r+0x1c>
 80245ae:	4620      	mov	r0, r4
 80245b0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80245b4:	460f      	mov	r7, r1
 80245b6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80245ba:	b91e      	cbnz	r6, 80245c4 <__strtok_r+0x20>
 80245bc:	b965      	cbnz	r5, 80245d8 <__strtok_r+0x34>
 80245be:	6015      	str	r5, [r2, #0]
 80245c0:	2000      	movs	r0, #0
 80245c2:	e005      	b.n	80245d0 <__strtok_r+0x2c>
 80245c4:	42b5      	cmp	r5, r6
 80245c6:	d1f6      	bne.n	80245b6 <__strtok_r+0x12>
 80245c8:	2b00      	cmp	r3, #0
 80245ca:	d1f0      	bne.n	80245ae <__strtok_r+0xa>
 80245cc:	6014      	str	r4, [r2, #0]
 80245ce:	7003      	strb	r3, [r0, #0]
 80245d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80245d2:	461c      	mov	r4, r3
 80245d4:	e00c      	b.n	80245f0 <__strtok_r+0x4c>
 80245d6:	b915      	cbnz	r5, 80245de <__strtok_r+0x3a>
 80245d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80245dc:	460e      	mov	r6, r1
 80245de:	f816 5b01 	ldrb.w	r5, [r6], #1
 80245e2:	42ab      	cmp	r3, r5
 80245e4:	d1f7      	bne.n	80245d6 <__strtok_r+0x32>
 80245e6:	2b00      	cmp	r3, #0
 80245e8:	d0f3      	beq.n	80245d2 <__strtok_r+0x2e>
 80245ea:	2300      	movs	r3, #0
 80245ec:	f804 3c01 	strb.w	r3, [r4, #-1]
 80245f0:	6014      	str	r4, [r2, #0]
 80245f2:	e7ed      	b.n	80245d0 <__strtok_r+0x2c>

080245f4 <strstr>:
 80245f4:	780a      	ldrb	r2, [r1, #0]
 80245f6:	b570      	push	{r4, r5, r6, lr}
 80245f8:	b96a      	cbnz	r2, 8024616 <strstr+0x22>
 80245fa:	bd70      	pop	{r4, r5, r6, pc}
 80245fc:	429a      	cmp	r2, r3
 80245fe:	d109      	bne.n	8024614 <strstr+0x20>
 8024600:	460c      	mov	r4, r1
 8024602:	4605      	mov	r5, r0
 8024604:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8024608:	2b00      	cmp	r3, #0
 802460a:	d0f6      	beq.n	80245fa <strstr+0x6>
 802460c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8024610:	429e      	cmp	r6, r3
 8024612:	d0f7      	beq.n	8024604 <strstr+0x10>
 8024614:	3001      	adds	r0, #1
 8024616:	7803      	ldrb	r3, [r0, #0]
 8024618:	2b00      	cmp	r3, #0
 802461a:	d1ef      	bne.n	80245fc <strstr+0x8>
 802461c:	4618      	mov	r0, r3
 802461e:	e7ec      	b.n	80245fa <strstr+0x6>

08024620 <_localeconv_r>:
 8024620:	4800      	ldr	r0, [pc, #0]	@ (8024624 <_localeconv_r+0x4>)
 8024622:	4770      	bx	lr
 8024624:	20000598 	.word	0x20000598

08024628 <_close_r>:
 8024628:	b538      	push	{r3, r4, r5, lr}
 802462a:	4d06      	ldr	r5, [pc, #24]	@ (8024644 <_close_r+0x1c>)
 802462c:	2300      	movs	r3, #0
 802462e:	4604      	mov	r4, r0
 8024630:	4608      	mov	r0, r1
 8024632:	602b      	str	r3, [r5, #0]
 8024634:	f7e7 ffba 	bl	800c5ac <_close>
 8024638:	1c43      	adds	r3, r0, #1
 802463a:	d102      	bne.n	8024642 <_close_r+0x1a>
 802463c:	682b      	ldr	r3, [r5, #0]
 802463e:	b103      	cbz	r3, 8024642 <_close_r+0x1a>
 8024640:	6023      	str	r3, [r4, #0]
 8024642:	bd38      	pop	{r3, r4, r5, pc}
 8024644:	2000292c 	.word	0x2000292c

08024648 <_lseek_r>:
 8024648:	b538      	push	{r3, r4, r5, lr}
 802464a:	4d07      	ldr	r5, [pc, #28]	@ (8024668 <_lseek_r+0x20>)
 802464c:	4604      	mov	r4, r0
 802464e:	4608      	mov	r0, r1
 8024650:	4611      	mov	r1, r2
 8024652:	2200      	movs	r2, #0
 8024654:	602a      	str	r2, [r5, #0]
 8024656:	461a      	mov	r2, r3
 8024658:	f7e7 ffb2 	bl	800c5c0 <_lseek>
 802465c:	1c43      	adds	r3, r0, #1
 802465e:	d102      	bne.n	8024666 <_lseek_r+0x1e>
 8024660:	682b      	ldr	r3, [r5, #0]
 8024662:	b103      	cbz	r3, 8024666 <_lseek_r+0x1e>
 8024664:	6023      	str	r3, [r4, #0]
 8024666:	bd38      	pop	{r3, r4, r5, pc}
 8024668:	2000292c 	.word	0x2000292c

0802466c <_read_r>:
 802466c:	b538      	push	{r3, r4, r5, lr}
 802466e:	4d07      	ldr	r5, [pc, #28]	@ (802468c <_read_r+0x20>)
 8024670:	4604      	mov	r4, r0
 8024672:	4608      	mov	r0, r1
 8024674:	4611      	mov	r1, r2
 8024676:	2200      	movs	r2, #0
 8024678:	602a      	str	r2, [r5, #0]
 802467a:	461a      	mov	r2, r3
 802467c:	f7e7 ff78 	bl	800c570 <_read>
 8024680:	1c43      	adds	r3, r0, #1
 8024682:	d102      	bne.n	802468a <_read_r+0x1e>
 8024684:	682b      	ldr	r3, [r5, #0]
 8024686:	b103      	cbz	r3, 802468a <_read_r+0x1e>
 8024688:	6023      	str	r3, [r4, #0]
 802468a:	bd38      	pop	{r3, r4, r5, pc}
 802468c:	2000292c 	.word	0x2000292c

08024690 <_sbrk_r>:
 8024690:	b538      	push	{r3, r4, r5, lr}
 8024692:	4d06      	ldr	r5, [pc, #24]	@ (80246ac <_sbrk_r+0x1c>)
 8024694:	2300      	movs	r3, #0
 8024696:	4604      	mov	r4, r0
 8024698:	4608      	mov	r0, r1
 802469a:	602b      	str	r3, [r5, #0]
 802469c:	f7e7 ff92 	bl	800c5c4 <_sbrk>
 80246a0:	1c43      	adds	r3, r0, #1
 80246a2:	d102      	bne.n	80246aa <_sbrk_r+0x1a>
 80246a4:	682b      	ldr	r3, [r5, #0]
 80246a6:	b103      	cbz	r3, 80246aa <_sbrk_r+0x1a>
 80246a8:	6023      	str	r3, [r4, #0]
 80246aa:	bd38      	pop	{r3, r4, r5, pc}
 80246ac:	2000292c 	.word	0x2000292c

080246b0 <_write_r>:
 80246b0:	b538      	push	{r3, r4, r5, lr}
 80246b2:	4d07      	ldr	r5, [pc, #28]	@ (80246d0 <_write_r+0x20>)
 80246b4:	4604      	mov	r4, r0
 80246b6:	4608      	mov	r0, r1
 80246b8:	4611      	mov	r1, r2
 80246ba:	2200      	movs	r2, #0
 80246bc:	602a      	str	r2, [r5, #0]
 80246be:	461a      	mov	r2, r3
 80246c0:	f7e7 ff66 	bl	800c590 <_write>
 80246c4:	1c43      	adds	r3, r0, #1
 80246c6:	d102      	bne.n	80246ce <_write_r+0x1e>
 80246c8:	682b      	ldr	r3, [r5, #0]
 80246ca:	b103      	cbz	r3, 80246ce <_write_r+0x1e>
 80246cc:	6023      	str	r3, [r4, #0]
 80246ce:	bd38      	pop	{r3, r4, r5, pc}
 80246d0:	2000292c 	.word	0x2000292c

080246d4 <__errno>:
 80246d4:	4b01      	ldr	r3, [pc, #4]	@ (80246dc <__errno+0x8>)
 80246d6:	6818      	ldr	r0, [r3, #0]
 80246d8:	4770      	bx	lr
 80246da:	bf00      	nop
 80246dc:	20000614 	.word	0x20000614

080246e0 <__libc_init_array>:
 80246e0:	b570      	push	{r4, r5, r6, lr}
 80246e2:	4d0d      	ldr	r5, [pc, #52]	@ (8024718 <__libc_init_array+0x38>)
 80246e4:	4c0d      	ldr	r4, [pc, #52]	@ (802471c <__libc_init_array+0x3c>)
 80246e6:	1b64      	subs	r4, r4, r5
 80246e8:	10a4      	asrs	r4, r4, #2
 80246ea:	2600      	movs	r6, #0
 80246ec:	42a6      	cmp	r6, r4
 80246ee:	d109      	bne.n	8024704 <__libc_init_array+0x24>
 80246f0:	4d0b      	ldr	r5, [pc, #44]	@ (8024720 <__libc_init_array+0x40>)
 80246f2:	4c0c      	ldr	r4, [pc, #48]	@ (8024724 <__libc_init_array+0x44>)
 80246f4:	f004 f8ea 	bl	80288cc <_init>
 80246f8:	1b64      	subs	r4, r4, r5
 80246fa:	10a4      	asrs	r4, r4, #2
 80246fc:	2600      	movs	r6, #0
 80246fe:	42a6      	cmp	r6, r4
 8024700:	d105      	bne.n	802470e <__libc_init_array+0x2e>
 8024702:	bd70      	pop	{r4, r5, r6, pc}
 8024704:	f855 3b04 	ldr.w	r3, [r5], #4
 8024708:	4798      	blx	r3
 802470a:	3601      	adds	r6, #1
 802470c:	e7ee      	b.n	80246ec <__libc_init_array+0xc>
 802470e:	f855 3b04 	ldr.w	r3, [r5], #4
 8024712:	4798      	blx	r3
 8024714:	3601      	adds	r6, #1
 8024716:	e7f2      	b.n	80246fe <__libc_init_array+0x1e>
 8024718:	08031300 	.word	0x08031300
 802471c:	08031300 	.word	0x08031300
 8024720:	08031300 	.word	0x08031300
 8024724:	08031304 	.word	0x08031304

08024728 <__retarget_lock_init_recursive>:
 8024728:	4770      	bx	lr

0802472a <__retarget_lock_acquire_recursive>:
 802472a:	4770      	bx	lr

0802472c <__retarget_lock_release_recursive>:
 802472c:	4770      	bx	lr

0802472e <strcpy>:
 802472e:	4603      	mov	r3, r0
 8024730:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024734:	f803 2b01 	strb.w	r2, [r3], #1
 8024738:	2a00      	cmp	r2, #0
 802473a:	d1f9      	bne.n	8024730 <strcpy+0x2>
 802473c:	4770      	bx	lr

0802473e <memcpy>:
 802473e:	440a      	add	r2, r1
 8024740:	4291      	cmp	r1, r2
 8024742:	f100 33ff 	add.w	r3, r0, #4294967295
 8024746:	d100      	bne.n	802474a <memcpy+0xc>
 8024748:	4770      	bx	lr
 802474a:	b510      	push	{r4, lr}
 802474c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024750:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024754:	4291      	cmp	r1, r2
 8024756:	d1f9      	bne.n	802474c <memcpy+0xe>
 8024758:	bd10      	pop	{r4, pc}
 802475a:	0000      	movs	r0, r0
 802475c:	0000      	movs	r0, r0
	...

08024760 <nan>:
 8024760:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8024768 <nan+0x8>
 8024764:	4770      	bx	lr
 8024766:	bf00      	nop
 8024768:	00000000 	.word	0x00000000
 802476c:	7ff80000 	.word	0x7ff80000

08024770 <nanf>:
 8024770:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8024778 <nanf+0x8>
 8024774:	4770      	bx	lr
 8024776:	bf00      	nop
 8024778:	7fc00000 	.word	0x7fc00000

0802477c <abort>:
 802477c:	b508      	push	{r3, lr}
 802477e:	2006      	movs	r0, #6
 8024780:	f002 fae4 	bl	8026d4c <raise>
 8024784:	2001      	movs	r0, #1
 8024786:	f7e7 feed 	bl	800c564 <_exit>

0802478a <quorem>:
 802478a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802478e:	6903      	ldr	r3, [r0, #16]
 8024790:	690c      	ldr	r4, [r1, #16]
 8024792:	42a3      	cmp	r3, r4
 8024794:	4607      	mov	r7, r0
 8024796:	db7e      	blt.n	8024896 <quorem+0x10c>
 8024798:	3c01      	subs	r4, #1
 802479a:	f101 0814 	add.w	r8, r1, #20
 802479e:	00a3      	lsls	r3, r4, #2
 80247a0:	f100 0514 	add.w	r5, r0, #20
 80247a4:	9300      	str	r3, [sp, #0]
 80247a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80247aa:	9301      	str	r3, [sp, #4]
 80247ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80247b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80247b4:	3301      	adds	r3, #1
 80247b6:	429a      	cmp	r2, r3
 80247b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80247bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80247c0:	d32e      	bcc.n	8024820 <quorem+0x96>
 80247c2:	f04f 0a00 	mov.w	sl, #0
 80247c6:	46c4      	mov	ip, r8
 80247c8:	46ae      	mov	lr, r5
 80247ca:	46d3      	mov	fp, sl
 80247cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80247d0:	b298      	uxth	r0, r3
 80247d2:	fb06 a000 	mla	r0, r6, r0, sl
 80247d6:	0c02      	lsrs	r2, r0, #16
 80247d8:	0c1b      	lsrs	r3, r3, #16
 80247da:	fb06 2303 	mla	r3, r6, r3, r2
 80247de:	f8de 2000 	ldr.w	r2, [lr]
 80247e2:	b280      	uxth	r0, r0
 80247e4:	b292      	uxth	r2, r2
 80247e6:	1a12      	subs	r2, r2, r0
 80247e8:	445a      	add	r2, fp
 80247ea:	f8de 0000 	ldr.w	r0, [lr]
 80247ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80247f2:	b29b      	uxth	r3, r3
 80247f4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80247f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80247fc:	b292      	uxth	r2, r2
 80247fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8024802:	45e1      	cmp	r9, ip
 8024804:	f84e 2b04 	str.w	r2, [lr], #4
 8024808:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802480c:	d2de      	bcs.n	80247cc <quorem+0x42>
 802480e:	9b00      	ldr	r3, [sp, #0]
 8024810:	58eb      	ldr	r3, [r5, r3]
 8024812:	b92b      	cbnz	r3, 8024820 <quorem+0x96>
 8024814:	9b01      	ldr	r3, [sp, #4]
 8024816:	3b04      	subs	r3, #4
 8024818:	429d      	cmp	r5, r3
 802481a:	461a      	mov	r2, r3
 802481c:	d32f      	bcc.n	802487e <quorem+0xf4>
 802481e:	613c      	str	r4, [r7, #16]
 8024820:	4638      	mov	r0, r7
 8024822:	f001 fc8f 	bl	8026144 <__mcmp>
 8024826:	2800      	cmp	r0, #0
 8024828:	db25      	blt.n	8024876 <quorem+0xec>
 802482a:	4629      	mov	r1, r5
 802482c:	2000      	movs	r0, #0
 802482e:	f858 2b04 	ldr.w	r2, [r8], #4
 8024832:	f8d1 c000 	ldr.w	ip, [r1]
 8024836:	fa1f fe82 	uxth.w	lr, r2
 802483a:	fa1f f38c 	uxth.w	r3, ip
 802483e:	eba3 030e 	sub.w	r3, r3, lr
 8024842:	4403      	add	r3, r0
 8024844:	0c12      	lsrs	r2, r2, #16
 8024846:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802484a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802484e:	b29b      	uxth	r3, r3
 8024850:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024854:	45c1      	cmp	r9, r8
 8024856:	f841 3b04 	str.w	r3, [r1], #4
 802485a:	ea4f 4022 	mov.w	r0, r2, asr #16
 802485e:	d2e6      	bcs.n	802482e <quorem+0xa4>
 8024860:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8024864:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8024868:	b922      	cbnz	r2, 8024874 <quorem+0xea>
 802486a:	3b04      	subs	r3, #4
 802486c:	429d      	cmp	r5, r3
 802486e:	461a      	mov	r2, r3
 8024870:	d30b      	bcc.n	802488a <quorem+0x100>
 8024872:	613c      	str	r4, [r7, #16]
 8024874:	3601      	adds	r6, #1
 8024876:	4630      	mov	r0, r6
 8024878:	b003      	add	sp, #12
 802487a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802487e:	6812      	ldr	r2, [r2, #0]
 8024880:	3b04      	subs	r3, #4
 8024882:	2a00      	cmp	r2, #0
 8024884:	d1cb      	bne.n	802481e <quorem+0x94>
 8024886:	3c01      	subs	r4, #1
 8024888:	e7c6      	b.n	8024818 <quorem+0x8e>
 802488a:	6812      	ldr	r2, [r2, #0]
 802488c:	3b04      	subs	r3, #4
 802488e:	2a00      	cmp	r2, #0
 8024890:	d1ef      	bne.n	8024872 <quorem+0xe8>
 8024892:	3c01      	subs	r4, #1
 8024894:	e7ea      	b.n	802486c <quorem+0xe2>
 8024896:	2000      	movs	r0, #0
 8024898:	e7ee      	b.n	8024878 <quorem+0xee>
 802489a:	0000      	movs	r0, r0
 802489c:	0000      	movs	r0, r0
	...

080248a0 <_dtoa_r>:
 80248a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248a4:	69c7      	ldr	r7, [r0, #28]
 80248a6:	b099      	sub	sp, #100	@ 0x64
 80248a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80248ac:	ec55 4b10 	vmov	r4, r5, d0
 80248b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80248b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80248b4:	4683      	mov	fp, r0
 80248b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80248b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80248ba:	b97f      	cbnz	r7, 80248dc <_dtoa_r+0x3c>
 80248bc:	2010      	movs	r0, #16
 80248be:	f7fd fd15 	bl	80222ec <malloc>
 80248c2:	4602      	mov	r2, r0
 80248c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80248c8:	b920      	cbnz	r0, 80248d4 <_dtoa_r+0x34>
 80248ca:	4ba7      	ldr	r3, [pc, #668]	@ (8024b68 <_dtoa_r+0x2c8>)
 80248cc:	21ef      	movs	r1, #239	@ 0xef
 80248ce:	48a7      	ldr	r0, [pc, #668]	@ (8024b6c <_dtoa_r+0x2cc>)
 80248d0:	f7fd fcd2 	bl	8022278 <__assert_func>
 80248d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80248d8:	6007      	str	r7, [r0, #0]
 80248da:	60c7      	str	r7, [r0, #12]
 80248dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80248e0:	6819      	ldr	r1, [r3, #0]
 80248e2:	b159      	cbz	r1, 80248fc <_dtoa_r+0x5c>
 80248e4:	685a      	ldr	r2, [r3, #4]
 80248e6:	604a      	str	r2, [r1, #4]
 80248e8:	2301      	movs	r3, #1
 80248ea:	4093      	lsls	r3, r2
 80248ec:	608b      	str	r3, [r1, #8]
 80248ee:	4658      	mov	r0, fp
 80248f0:	f001 f9a4 	bl	8025c3c <_Bfree>
 80248f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80248f8:	2200      	movs	r2, #0
 80248fa:	601a      	str	r2, [r3, #0]
 80248fc:	1e2b      	subs	r3, r5, #0
 80248fe:	bfb9      	ittee	lt
 8024900:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8024904:	9303      	strlt	r3, [sp, #12]
 8024906:	2300      	movge	r3, #0
 8024908:	6033      	strge	r3, [r6, #0]
 802490a:	9f03      	ldr	r7, [sp, #12]
 802490c:	4b98      	ldr	r3, [pc, #608]	@ (8024b70 <_dtoa_r+0x2d0>)
 802490e:	bfbc      	itt	lt
 8024910:	2201      	movlt	r2, #1
 8024912:	6032      	strlt	r2, [r6, #0]
 8024914:	43bb      	bics	r3, r7
 8024916:	d112      	bne.n	802493e <_dtoa_r+0x9e>
 8024918:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802491a:	f242 730f 	movw	r3, #9999	@ 0x270f
 802491e:	6013      	str	r3, [r2, #0]
 8024920:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8024924:	4323      	orrs	r3, r4
 8024926:	f000 854d 	beq.w	80253c4 <_dtoa_r+0xb24>
 802492a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802492c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8024b84 <_dtoa_r+0x2e4>
 8024930:	2b00      	cmp	r3, #0
 8024932:	f000 854f 	beq.w	80253d4 <_dtoa_r+0xb34>
 8024936:	f10a 0303 	add.w	r3, sl, #3
 802493a:	f000 bd49 	b.w	80253d0 <_dtoa_r+0xb30>
 802493e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024942:	2200      	movs	r2, #0
 8024944:	ec51 0b17 	vmov	r0, r1, d7
 8024948:	2300      	movs	r3, #0
 802494a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802494e:	f7e4 f803 	bl	8008958 <__aeabi_dcmpeq>
 8024952:	4680      	mov	r8, r0
 8024954:	b158      	cbz	r0, 802496e <_dtoa_r+0xce>
 8024956:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024958:	2301      	movs	r3, #1
 802495a:	6013      	str	r3, [r2, #0]
 802495c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802495e:	b113      	cbz	r3, 8024966 <_dtoa_r+0xc6>
 8024960:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8024962:	4b84      	ldr	r3, [pc, #528]	@ (8024b74 <_dtoa_r+0x2d4>)
 8024964:	6013      	str	r3, [r2, #0]
 8024966:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8024b88 <_dtoa_r+0x2e8>
 802496a:	f000 bd33 	b.w	80253d4 <_dtoa_r+0xb34>
 802496e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8024972:	aa16      	add	r2, sp, #88	@ 0x58
 8024974:	a917      	add	r1, sp, #92	@ 0x5c
 8024976:	4658      	mov	r0, fp
 8024978:	f001 fd04 	bl	8026384 <__d2b>
 802497c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8024980:	4681      	mov	r9, r0
 8024982:	2e00      	cmp	r6, #0
 8024984:	d077      	beq.n	8024a76 <_dtoa_r+0x1d6>
 8024986:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024988:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802498c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8024990:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8024994:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8024998:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802499c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80249a0:	4619      	mov	r1, r3
 80249a2:	2200      	movs	r2, #0
 80249a4:	4b74      	ldr	r3, [pc, #464]	@ (8024b78 <_dtoa_r+0x2d8>)
 80249a6:	f7e3 fbb7 	bl	8008118 <__aeabi_dsub>
 80249aa:	a369      	add	r3, pc, #420	@ (adr r3, 8024b50 <_dtoa_r+0x2b0>)
 80249ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249b0:	f7e3 fd6a 	bl	8008488 <__aeabi_dmul>
 80249b4:	a368      	add	r3, pc, #416	@ (adr r3, 8024b58 <_dtoa_r+0x2b8>)
 80249b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249ba:	f7e3 fbaf 	bl	800811c <__adddf3>
 80249be:	4604      	mov	r4, r0
 80249c0:	4630      	mov	r0, r6
 80249c2:	460d      	mov	r5, r1
 80249c4:	f7e3 fcf6 	bl	80083b4 <__aeabi_i2d>
 80249c8:	a365      	add	r3, pc, #404	@ (adr r3, 8024b60 <_dtoa_r+0x2c0>)
 80249ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249ce:	f7e3 fd5b 	bl	8008488 <__aeabi_dmul>
 80249d2:	4602      	mov	r2, r0
 80249d4:	460b      	mov	r3, r1
 80249d6:	4620      	mov	r0, r4
 80249d8:	4629      	mov	r1, r5
 80249da:	f7e3 fb9f 	bl	800811c <__adddf3>
 80249de:	4604      	mov	r4, r0
 80249e0:	460d      	mov	r5, r1
 80249e2:	f7e4 f801 	bl	80089e8 <__aeabi_d2iz>
 80249e6:	2200      	movs	r2, #0
 80249e8:	4607      	mov	r7, r0
 80249ea:	2300      	movs	r3, #0
 80249ec:	4620      	mov	r0, r4
 80249ee:	4629      	mov	r1, r5
 80249f0:	f7e3 ffbc 	bl	800896c <__aeabi_dcmplt>
 80249f4:	b140      	cbz	r0, 8024a08 <_dtoa_r+0x168>
 80249f6:	4638      	mov	r0, r7
 80249f8:	f7e3 fcdc 	bl	80083b4 <__aeabi_i2d>
 80249fc:	4622      	mov	r2, r4
 80249fe:	462b      	mov	r3, r5
 8024a00:	f7e3 ffaa 	bl	8008958 <__aeabi_dcmpeq>
 8024a04:	b900      	cbnz	r0, 8024a08 <_dtoa_r+0x168>
 8024a06:	3f01      	subs	r7, #1
 8024a08:	2f16      	cmp	r7, #22
 8024a0a:	d851      	bhi.n	8024ab0 <_dtoa_r+0x210>
 8024a0c:	4b5b      	ldr	r3, [pc, #364]	@ (8024b7c <_dtoa_r+0x2dc>)
 8024a0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8024a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8024a1a:	f7e3 ffa7 	bl	800896c <__aeabi_dcmplt>
 8024a1e:	2800      	cmp	r0, #0
 8024a20:	d048      	beq.n	8024ab4 <_dtoa_r+0x214>
 8024a22:	3f01      	subs	r7, #1
 8024a24:	2300      	movs	r3, #0
 8024a26:	9312      	str	r3, [sp, #72]	@ 0x48
 8024a28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024a2a:	1b9b      	subs	r3, r3, r6
 8024a2c:	1e5a      	subs	r2, r3, #1
 8024a2e:	bf44      	itt	mi
 8024a30:	f1c3 0801 	rsbmi	r8, r3, #1
 8024a34:	2300      	movmi	r3, #0
 8024a36:	9208      	str	r2, [sp, #32]
 8024a38:	bf54      	ite	pl
 8024a3a:	f04f 0800 	movpl.w	r8, #0
 8024a3e:	9308      	strmi	r3, [sp, #32]
 8024a40:	2f00      	cmp	r7, #0
 8024a42:	db39      	blt.n	8024ab8 <_dtoa_r+0x218>
 8024a44:	9b08      	ldr	r3, [sp, #32]
 8024a46:	970f      	str	r7, [sp, #60]	@ 0x3c
 8024a48:	443b      	add	r3, r7
 8024a4a:	9308      	str	r3, [sp, #32]
 8024a4c:	2300      	movs	r3, #0
 8024a4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8024a50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a52:	2b09      	cmp	r3, #9
 8024a54:	d864      	bhi.n	8024b20 <_dtoa_r+0x280>
 8024a56:	2b05      	cmp	r3, #5
 8024a58:	bfc4      	itt	gt
 8024a5a:	3b04      	subgt	r3, #4
 8024a5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8024a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a60:	f1a3 0302 	sub.w	r3, r3, #2
 8024a64:	bfcc      	ite	gt
 8024a66:	2400      	movgt	r4, #0
 8024a68:	2401      	movle	r4, #1
 8024a6a:	2b03      	cmp	r3, #3
 8024a6c:	d863      	bhi.n	8024b36 <_dtoa_r+0x296>
 8024a6e:	e8df f003 	tbb	[pc, r3]
 8024a72:	372a      	.short	0x372a
 8024a74:	5535      	.short	0x5535
 8024a76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8024a7a:	441e      	add	r6, r3
 8024a7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8024a80:	2b20      	cmp	r3, #32
 8024a82:	bfc1      	itttt	gt
 8024a84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8024a88:	409f      	lslgt	r7, r3
 8024a8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8024a8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8024a92:	bfd6      	itet	le
 8024a94:	f1c3 0320 	rsble	r3, r3, #32
 8024a98:	ea47 0003 	orrgt.w	r0, r7, r3
 8024a9c:	fa04 f003 	lslle.w	r0, r4, r3
 8024aa0:	f7e3 fc78 	bl	8008394 <__aeabi_ui2d>
 8024aa4:	2201      	movs	r2, #1
 8024aa6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8024aaa:	3e01      	subs	r6, #1
 8024aac:	9214      	str	r2, [sp, #80]	@ 0x50
 8024aae:	e777      	b.n	80249a0 <_dtoa_r+0x100>
 8024ab0:	2301      	movs	r3, #1
 8024ab2:	e7b8      	b.n	8024a26 <_dtoa_r+0x186>
 8024ab4:	9012      	str	r0, [sp, #72]	@ 0x48
 8024ab6:	e7b7      	b.n	8024a28 <_dtoa_r+0x188>
 8024ab8:	427b      	negs	r3, r7
 8024aba:	930a      	str	r3, [sp, #40]	@ 0x28
 8024abc:	2300      	movs	r3, #0
 8024abe:	eba8 0807 	sub.w	r8, r8, r7
 8024ac2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024ac4:	e7c4      	b.n	8024a50 <_dtoa_r+0x1b0>
 8024ac6:	2300      	movs	r3, #0
 8024ac8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024aca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024acc:	2b00      	cmp	r3, #0
 8024ace:	dc35      	bgt.n	8024b3c <_dtoa_r+0x29c>
 8024ad0:	2301      	movs	r3, #1
 8024ad2:	9300      	str	r3, [sp, #0]
 8024ad4:	9307      	str	r3, [sp, #28]
 8024ad6:	461a      	mov	r2, r3
 8024ad8:	920e      	str	r2, [sp, #56]	@ 0x38
 8024ada:	e00b      	b.n	8024af4 <_dtoa_r+0x254>
 8024adc:	2301      	movs	r3, #1
 8024ade:	e7f3      	b.n	8024ac8 <_dtoa_r+0x228>
 8024ae0:	2300      	movs	r3, #0
 8024ae2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024ae4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024ae6:	18fb      	adds	r3, r7, r3
 8024ae8:	9300      	str	r3, [sp, #0]
 8024aea:	3301      	adds	r3, #1
 8024aec:	2b01      	cmp	r3, #1
 8024aee:	9307      	str	r3, [sp, #28]
 8024af0:	bfb8      	it	lt
 8024af2:	2301      	movlt	r3, #1
 8024af4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8024af8:	2100      	movs	r1, #0
 8024afa:	2204      	movs	r2, #4
 8024afc:	f102 0514 	add.w	r5, r2, #20
 8024b00:	429d      	cmp	r5, r3
 8024b02:	d91f      	bls.n	8024b44 <_dtoa_r+0x2a4>
 8024b04:	6041      	str	r1, [r0, #4]
 8024b06:	4658      	mov	r0, fp
 8024b08:	f001 f858 	bl	8025bbc <_Balloc>
 8024b0c:	4682      	mov	sl, r0
 8024b0e:	2800      	cmp	r0, #0
 8024b10:	d13c      	bne.n	8024b8c <_dtoa_r+0x2ec>
 8024b12:	4b1b      	ldr	r3, [pc, #108]	@ (8024b80 <_dtoa_r+0x2e0>)
 8024b14:	4602      	mov	r2, r0
 8024b16:	f240 11af 	movw	r1, #431	@ 0x1af
 8024b1a:	e6d8      	b.n	80248ce <_dtoa_r+0x2e>
 8024b1c:	2301      	movs	r3, #1
 8024b1e:	e7e0      	b.n	8024ae2 <_dtoa_r+0x242>
 8024b20:	2401      	movs	r4, #1
 8024b22:	2300      	movs	r3, #0
 8024b24:	9309      	str	r3, [sp, #36]	@ 0x24
 8024b26:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024b28:	f04f 33ff 	mov.w	r3, #4294967295
 8024b2c:	9300      	str	r3, [sp, #0]
 8024b2e:	9307      	str	r3, [sp, #28]
 8024b30:	2200      	movs	r2, #0
 8024b32:	2312      	movs	r3, #18
 8024b34:	e7d0      	b.n	8024ad8 <_dtoa_r+0x238>
 8024b36:	2301      	movs	r3, #1
 8024b38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024b3a:	e7f5      	b.n	8024b28 <_dtoa_r+0x288>
 8024b3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024b3e:	9300      	str	r3, [sp, #0]
 8024b40:	9307      	str	r3, [sp, #28]
 8024b42:	e7d7      	b.n	8024af4 <_dtoa_r+0x254>
 8024b44:	3101      	adds	r1, #1
 8024b46:	0052      	lsls	r2, r2, #1
 8024b48:	e7d8      	b.n	8024afc <_dtoa_r+0x25c>
 8024b4a:	bf00      	nop
 8024b4c:	f3af 8000 	nop.w
 8024b50:	636f4361 	.word	0x636f4361
 8024b54:	3fd287a7 	.word	0x3fd287a7
 8024b58:	8b60c8b3 	.word	0x8b60c8b3
 8024b5c:	3fc68a28 	.word	0x3fc68a28
 8024b60:	509f79fb 	.word	0x509f79fb
 8024b64:	3fd34413 	.word	0x3fd34413
 8024b68:	08030be2 	.word	0x08030be2
 8024b6c:	08030c68 	.word	0x08030c68
 8024b70:	7ff00000 	.word	0x7ff00000
 8024b74:	08030bba 	.word	0x08030bba
 8024b78:	3ff80000 	.word	0x3ff80000
 8024b7c:	08030dc0 	.word	0x08030dc0
 8024b80:	08030cc0 	.word	0x08030cc0
 8024b84:	08030c64 	.word	0x08030c64
 8024b88:	08030bb9 	.word	0x08030bb9
 8024b8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8024b90:	6018      	str	r0, [r3, #0]
 8024b92:	9b07      	ldr	r3, [sp, #28]
 8024b94:	2b0e      	cmp	r3, #14
 8024b96:	f200 80a4 	bhi.w	8024ce2 <_dtoa_r+0x442>
 8024b9a:	2c00      	cmp	r4, #0
 8024b9c:	f000 80a1 	beq.w	8024ce2 <_dtoa_r+0x442>
 8024ba0:	2f00      	cmp	r7, #0
 8024ba2:	dd33      	ble.n	8024c0c <_dtoa_r+0x36c>
 8024ba4:	4bad      	ldr	r3, [pc, #692]	@ (8024e5c <_dtoa_r+0x5bc>)
 8024ba6:	f007 020f 	and.w	r2, r7, #15
 8024baa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8024bae:	ed93 7b00 	vldr	d7, [r3]
 8024bb2:	05f8      	lsls	r0, r7, #23
 8024bb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8024bb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8024bbc:	d516      	bpl.n	8024bec <_dtoa_r+0x34c>
 8024bbe:	4ba8      	ldr	r3, [pc, #672]	@ (8024e60 <_dtoa_r+0x5c0>)
 8024bc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8024bc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8024bc8:	f7e3 fd88 	bl	80086dc <__aeabi_ddiv>
 8024bcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024bd0:	f004 040f 	and.w	r4, r4, #15
 8024bd4:	2603      	movs	r6, #3
 8024bd6:	4da2      	ldr	r5, [pc, #648]	@ (8024e60 <_dtoa_r+0x5c0>)
 8024bd8:	b954      	cbnz	r4, 8024bf0 <_dtoa_r+0x350>
 8024bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024be2:	f7e3 fd7b 	bl	80086dc <__aeabi_ddiv>
 8024be6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024bea:	e028      	b.n	8024c3e <_dtoa_r+0x39e>
 8024bec:	2602      	movs	r6, #2
 8024bee:	e7f2      	b.n	8024bd6 <_dtoa_r+0x336>
 8024bf0:	07e1      	lsls	r1, r4, #31
 8024bf2:	d508      	bpl.n	8024c06 <_dtoa_r+0x366>
 8024bf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024bf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8024bfc:	f7e3 fc44 	bl	8008488 <__aeabi_dmul>
 8024c00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024c04:	3601      	adds	r6, #1
 8024c06:	1064      	asrs	r4, r4, #1
 8024c08:	3508      	adds	r5, #8
 8024c0a:	e7e5      	b.n	8024bd8 <_dtoa_r+0x338>
 8024c0c:	f000 80d2 	beq.w	8024db4 <_dtoa_r+0x514>
 8024c10:	427c      	negs	r4, r7
 8024c12:	4b92      	ldr	r3, [pc, #584]	@ (8024e5c <_dtoa_r+0x5bc>)
 8024c14:	4d92      	ldr	r5, [pc, #584]	@ (8024e60 <_dtoa_r+0x5c0>)
 8024c16:	f004 020f 	and.w	r2, r4, #15
 8024c1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8024c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8024c26:	f7e3 fc2f 	bl	8008488 <__aeabi_dmul>
 8024c2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024c2e:	1124      	asrs	r4, r4, #4
 8024c30:	2300      	movs	r3, #0
 8024c32:	2602      	movs	r6, #2
 8024c34:	2c00      	cmp	r4, #0
 8024c36:	f040 80b2 	bne.w	8024d9e <_dtoa_r+0x4fe>
 8024c3a:	2b00      	cmp	r3, #0
 8024c3c:	d1d3      	bne.n	8024be6 <_dtoa_r+0x346>
 8024c3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024c40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8024c44:	2b00      	cmp	r3, #0
 8024c46:	f000 80b7 	beq.w	8024db8 <_dtoa_r+0x518>
 8024c4a:	4b86      	ldr	r3, [pc, #536]	@ (8024e64 <_dtoa_r+0x5c4>)
 8024c4c:	2200      	movs	r2, #0
 8024c4e:	4620      	mov	r0, r4
 8024c50:	4629      	mov	r1, r5
 8024c52:	f7e3 fe8b 	bl	800896c <__aeabi_dcmplt>
 8024c56:	2800      	cmp	r0, #0
 8024c58:	f000 80ae 	beq.w	8024db8 <_dtoa_r+0x518>
 8024c5c:	9b07      	ldr	r3, [sp, #28]
 8024c5e:	2b00      	cmp	r3, #0
 8024c60:	f000 80aa 	beq.w	8024db8 <_dtoa_r+0x518>
 8024c64:	9b00      	ldr	r3, [sp, #0]
 8024c66:	2b00      	cmp	r3, #0
 8024c68:	dd37      	ble.n	8024cda <_dtoa_r+0x43a>
 8024c6a:	1e7b      	subs	r3, r7, #1
 8024c6c:	9304      	str	r3, [sp, #16]
 8024c6e:	4620      	mov	r0, r4
 8024c70:	4b7d      	ldr	r3, [pc, #500]	@ (8024e68 <_dtoa_r+0x5c8>)
 8024c72:	2200      	movs	r2, #0
 8024c74:	4629      	mov	r1, r5
 8024c76:	f7e3 fc07 	bl	8008488 <__aeabi_dmul>
 8024c7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024c7e:	9c00      	ldr	r4, [sp, #0]
 8024c80:	3601      	adds	r6, #1
 8024c82:	4630      	mov	r0, r6
 8024c84:	f7e3 fb96 	bl	80083b4 <__aeabi_i2d>
 8024c88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024c8c:	f7e3 fbfc 	bl	8008488 <__aeabi_dmul>
 8024c90:	4b76      	ldr	r3, [pc, #472]	@ (8024e6c <_dtoa_r+0x5cc>)
 8024c92:	2200      	movs	r2, #0
 8024c94:	f7e3 fa42 	bl	800811c <__adddf3>
 8024c98:	4605      	mov	r5, r0
 8024c9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8024c9e:	2c00      	cmp	r4, #0
 8024ca0:	f040 808d 	bne.w	8024dbe <_dtoa_r+0x51e>
 8024ca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024ca8:	4b71      	ldr	r3, [pc, #452]	@ (8024e70 <_dtoa_r+0x5d0>)
 8024caa:	2200      	movs	r2, #0
 8024cac:	f7e3 fa34 	bl	8008118 <__aeabi_dsub>
 8024cb0:	4602      	mov	r2, r0
 8024cb2:	460b      	mov	r3, r1
 8024cb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8024cb8:	462a      	mov	r2, r5
 8024cba:	4633      	mov	r3, r6
 8024cbc:	f7e3 fe74 	bl	80089a8 <__aeabi_dcmpgt>
 8024cc0:	2800      	cmp	r0, #0
 8024cc2:	f040 828b 	bne.w	80251dc <_dtoa_r+0x93c>
 8024cc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024cca:	462a      	mov	r2, r5
 8024ccc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8024cd0:	f7e3 fe4c 	bl	800896c <__aeabi_dcmplt>
 8024cd4:	2800      	cmp	r0, #0
 8024cd6:	f040 8128 	bne.w	8024f2a <_dtoa_r+0x68a>
 8024cda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8024cde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8024ce2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024ce4:	2b00      	cmp	r3, #0
 8024ce6:	f2c0 815a 	blt.w	8024f9e <_dtoa_r+0x6fe>
 8024cea:	2f0e      	cmp	r7, #14
 8024cec:	f300 8157 	bgt.w	8024f9e <_dtoa_r+0x6fe>
 8024cf0:	4b5a      	ldr	r3, [pc, #360]	@ (8024e5c <_dtoa_r+0x5bc>)
 8024cf2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8024cf6:	ed93 7b00 	vldr	d7, [r3]
 8024cfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024cfc:	2b00      	cmp	r3, #0
 8024cfe:	ed8d 7b00 	vstr	d7, [sp]
 8024d02:	da03      	bge.n	8024d0c <_dtoa_r+0x46c>
 8024d04:	9b07      	ldr	r3, [sp, #28]
 8024d06:	2b00      	cmp	r3, #0
 8024d08:	f340 8101 	ble.w	8024f0e <_dtoa_r+0x66e>
 8024d0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8024d10:	4656      	mov	r6, sl
 8024d12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024d16:	4620      	mov	r0, r4
 8024d18:	4629      	mov	r1, r5
 8024d1a:	f7e3 fcdf 	bl	80086dc <__aeabi_ddiv>
 8024d1e:	f7e3 fe63 	bl	80089e8 <__aeabi_d2iz>
 8024d22:	4680      	mov	r8, r0
 8024d24:	f7e3 fb46 	bl	80083b4 <__aeabi_i2d>
 8024d28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024d2c:	f7e3 fbac 	bl	8008488 <__aeabi_dmul>
 8024d30:	4602      	mov	r2, r0
 8024d32:	460b      	mov	r3, r1
 8024d34:	4620      	mov	r0, r4
 8024d36:	4629      	mov	r1, r5
 8024d38:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8024d3c:	f7e3 f9ec 	bl	8008118 <__aeabi_dsub>
 8024d40:	f806 4b01 	strb.w	r4, [r6], #1
 8024d44:	9d07      	ldr	r5, [sp, #28]
 8024d46:	eba6 040a 	sub.w	r4, r6, sl
 8024d4a:	42a5      	cmp	r5, r4
 8024d4c:	4602      	mov	r2, r0
 8024d4e:	460b      	mov	r3, r1
 8024d50:	f040 8117 	bne.w	8024f82 <_dtoa_r+0x6e2>
 8024d54:	f7e3 f9e2 	bl	800811c <__adddf3>
 8024d58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024d5c:	4604      	mov	r4, r0
 8024d5e:	460d      	mov	r5, r1
 8024d60:	f7e3 fe22 	bl	80089a8 <__aeabi_dcmpgt>
 8024d64:	2800      	cmp	r0, #0
 8024d66:	f040 80f9 	bne.w	8024f5c <_dtoa_r+0x6bc>
 8024d6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024d6e:	4620      	mov	r0, r4
 8024d70:	4629      	mov	r1, r5
 8024d72:	f7e3 fdf1 	bl	8008958 <__aeabi_dcmpeq>
 8024d76:	b118      	cbz	r0, 8024d80 <_dtoa_r+0x4e0>
 8024d78:	f018 0f01 	tst.w	r8, #1
 8024d7c:	f040 80ee 	bne.w	8024f5c <_dtoa_r+0x6bc>
 8024d80:	4649      	mov	r1, r9
 8024d82:	4658      	mov	r0, fp
 8024d84:	f000 ff5a 	bl	8025c3c <_Bfree>
 8024d88:	2300      	movs	r3, #0
 8024d8a:	7033      	strb	r3, [r6, #0]
 8024d8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024d8e:	3701      	adds	r7, #1
 8024d90:	601f      	str	r7, [r3, #0]
 8024d92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024d94:	2b00      	cmp	r3, #0
 8024d96:	f000 831d 	beq.w	80253d4 <_dtoa_r+0xb34>
 8024d9a:	601e      	str	r6, [r3, #0]
 8024d9c:	e31a      	b.n	80253d4 <_dtoa_r+0xb34>
 8024d9e:	07e2      	lsls	r2, r4, #31
 8024da0:	d505      	bpl.n	8024dae <_dtoa_r+0x50e>
 8024da2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8024da6:	f7e3 fb6f 	bl	8008488 <__aeabi_dmul>
 8024daa:	3601      	adds	r6, #1
 8024dac:	2301      	movs	r3, #1
 8024dae:	1064      	asrs	r4, r4, #1
 8024db0:	3508      	adds	r5, #8
 8024db2:	e73f      	b.n	8024c34 <_dtoa_r+0x394>
 8024db4:	2602      	movs	r6, #2
 8024db6:	e742      	b.n	8024c3e <_dtoa_r+0x39e>
 8024db8:	9c07      	ldr	r4, [sp, #28]
 8024dba:	9704      	str	r7, [sp, #16]
 8024dbc:	e761      	b.n	8024c82 <_dtoa_r+0x3e2>
 8024dbe:	4b27      	ldr	r3, [pc, #156]	@ (8024e5c <_dtoa_r+0x5bc>)
 8024dc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024dc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8024dc6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8024dca:	4454      	add	r4, sl
 8024dcc:	2900      	cmp	r1, #0
 8024dce:	d053      	beq.n	8024e78 <_dtoa_r+0x5d8>
 8024dd0:	4928      	ldr	r1, [pc, #160]	@ (8024e74 <_dtoa_r+0x5d4>)
 8024dd2:	2000      	movs	r0, #0
 8024dd4:	f7e3 fc82 	bl	80086dc <__aeabi_ddiv>
 8024dd8:	4633      	mov	r3, r6
 8024dda:	462a      	mov	r2, r5
 8024ddc:	f7e3 f99c 	bl	8008118 <__aeabi_dsub>
 8024de0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8024de4:	4656      	mov	r6, sl
 8024de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024dea:	f7e3 fdfd 	bl	80089e8 <__aeabi_d2iz>
 8024dee:	4605      	mov	r5, r0
 8024df0:	f7e3 fae0 	bl	80083b4 <__aeabi_i2d>
 8024df4:	4602      	mov	r2, r0
 8024df6:	460b      	mov	r3, r1
 8024df8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024dfc:	f7e3 f98c 	bl	8008118 <__aeabi_dsub>
 8024e00:	3530      	adds	r5, #48	@ 0x30
 8024e02:	4602      	mov	r2, r0
 8024e04:	460b      	mov	r3, r1
 8024e06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8024e0a:	f806 5b01 	strb.w	r5, [r6], #1
 8024e0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8024e12:	f7e3 fdab 	bl	800896c <__aeabi_dcmplt>
 8024e16:	2800      	cmp	r0, #0
 8024e18:	d171      	bne.n	8024efe <_dtoa_r+0x65e>
 8024e1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024e1e:	4911      	ldr	r1, [pc, #68]	@ (8024e64 <_dtoa_r+0x5c4>)
 8024e20:	2000      	movs	r0, #0
 8024e22:	f7e3 f979 	bl	8008118 <__aeabi_dsub>
 8024e26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8024e2a:	f7e3 fd9f 	bl	800896c <__aeabi_dcmplt>
 8024e2e:	2800      	cmp	r0, #0
 8024e30:	f040 8095 	bne.w	8024f5e <_dtoa_r+0x6be>
 8024e34:	42a6      	cmp	r6, r4
 8024e36:	f43f af50 	beq.w	8024cda <_dtoa_r+0x43a>
 8024e3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8024e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8024e68 <_dtoa_r+0x5c8>)
 8024e40:	2200      	movs	r2, #0
 8024e42:	f7e3 fb21 	bl	8008488 <__aeabi_dmul>
 8024e46:	4b08      	ldr	r3, [pc, #32]	@ (8024e68 <_dtoa_r+0x5c8>)
 8024e48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8024e4c:	2200      	movs	r2, #0
 8024e4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024e52:	f7e3 fb19 	bl	8008488 <__aeabi_dmul>
 8024e56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024e5a:	e7c4      	b.n	8024de6 <_dtoa_r+0x546>
 8024e5c:	08030dc0 	.word	0x08030dc0
 8024e60:	08030d98 	.word	0x08030d98
 8024e64:	3ff00000 	.word	0x3ff00000
 8024e68:	40240000 	.word	0x40240000
 8024e6c:	401c0000 	.word	0x401c0000
 8024e70:	40140000 	.word	0x40140000
 8024e74:	3fe00000 	.word	0x3fe00000
 8024e78:	4631      	mov	r1, r6
 8024e7a:	4628      	mov	r0, r5
 8024e7c:	f7e3 fb04 	bl	8008488 <__aeabi_dmul>
 8024e80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8024e84:	9415      	str	r4, [sp, #84]	@ 0x54
 8024e86:	4656      	mov	r6, sl
 8024e88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024e8c:	f7e3 fdac 	bl	80089e8 <__aeabi_d2iz>
 8024e90:	4605      	mov	r5, r0
 8024e92:	f7e3 fa8f 	bl	80083b4 <__aeabi_i2d>
 8024e96:	4602      	mov	r2, r0
 8024e98:	460b      	mov	r3, r1
 8024e9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024e9e:	f7e3 f93b 	bl	8008118 <__aeabi_dsub>
 8024ea2:	3530      	adds	r5, #48	@ 0x30
 8024ea4:	f806 5b01 	strb.w	r5, [r6], #1
 8024ea8:	4602      	mov	r2, r0
 8024eaa:	460b      	mov	r3, r1
 8024eac:	42a6      	cmp	r6, r4
 8024eae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8024eb2:	f04f 0200 	mov.w	r2, #0
 8024eb6:	d124      	bne.n	8024f02 <_dtoa_r+0x662>
 8024eb8:	4bac      	ldr	r3, [pc, #688]	@ (802516c <_dtoa_r+0x8cc>)
 8024eba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8024ebe:	f7e3 f92d 	bl	800811c <__adddf3>
 8024ec2:	4602      	mov	r2, r0
 8024ec4:	460b      	mov	r3, r1
 8024ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024eca:	f7e3 fd6d 	bl	80089a8 <__aeabi_dcmpgt>
 8024ece:	2800      	cmp	r0, #0
 8024ed0:	d145      	bne.n	8024f5e <_dtoa_r+0x6be>
 8024ed2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8024ed6:	49a5      	ldr	r1, [pc, #660]	@ (802516c <_dtoa_r+0x8cc>)
 8024ed8:	2000      	movs	r0, #0
 8024eda:	f7e3 f91d 	bl	8008118 <__aeabi_dsub>
 8024ede:	4602      	mov	r2, r0
 8024ee0:	460b      	mov	r3, r1
 8024ee2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024ee6:	f7e3 fd41 	bl	800896c <__aeabi_dcmplt>
 8024eea:	2800      	cmp	r0, #0
 8024eec:	f43f aef5 	beq.w	8024cda <_dtoa_r+0x43a>
 8024ef0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8024ef2:	1e73      	subs	r3, r6, #1
 8024ef4:	9315      	str	r3, [sp, #84]	@ 0x54
 8024ef6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8024efa:	2b30      	cmp	r3, #48	@ 0x30
 8024efc:	d0f8      	beq.n	8024ef0 <_dtoa_r+0x650>
 8024efe:	9f04      	ldr	r7, [sp, #16]
 8024f00:	e73e      	b.n	8024d80 <_dtoa_r+0x4e0>
 8024f02:	4b9b      	ldr	r3, [pc, #620]	@ (8025170 <_dtoa_r+0x8d0>)
 8024f04:	f7e3 fac0 	bl	8008488 <__aeabi_dmul>
 8024f08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024f0c:	e7bc      	b.n	8024e88 <_dtoa_r+0x5e8>
 8024f0e:	d10c      	bne.n	8024f2a <_dtoa_r+0x68a>
 8024f10:	4b98      	ldr	r3, [pc, #608]	@ (8025174 <_dtoa_r+0x8d4>)
 8024f12:	2200      	movs	r2, #0
 8024f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024f18:	f7e3 fab6 	bl	8008488 <__aeabi_dmul>
 8024f1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024f20:	f7e3 fd38 	bl	8008994 <__aeabi_dcmpge>
 8024f24:	2800      	cmp	r0, #0
 8024f26:	f000 8157 	beq.w	80251d8 <_dtoa_r+0x938>
 8024f2a:	2400      	movs	r4, #0
 8024f2c:	4625      	mov	r5, r4
 8024f2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024f30:	43db      	mvns	r3, r3
 8024f32:	9304      	str	r3, [sp, #16]
 8024f34:	4656      	mov	r6, sl
 8024f36:	2700      	movs	r7, #0
 8024f38:	4621      	mov	r1, r4
 8024f3a:	4658      	mov	r0, fp
 8024f3c:	f000 fe7e 	bl	8025c3c <_Bfree>
 8024f40:	2d00      	cmp	r5, #0
 8024f42:	d0dc      	beq.n	8024efe <_dtoa_r+0x65e>
 8024f44:	b12f      	cbz	r7, 8024f52 <_dtoa_r+0x6b2>
 8024f46:	42af      	cmp	r7, r5
 8024f48:	d003      	beq.n	8024f52 <_dtoa_r+0x6b2>
 8024f4a:	4639      	mov	r1, r7
 8024f4c:	4658      	mov	r0, fp
 8024f4e:	f000 fe75 	bl	8025c3c <_Bfree>
 8024f52:	4629      	mov	r1, r5
 8024f54:	4658      	mov	r0, fp
 8024f56:	f000 fe71 	bl	8025c3c <_Bfree>
 8024f5a:	e7d0      	b.n	8024efe <_dtoa_r+0x65e>
 8024f5c:	9704      	str	r7, [sp, #16]
 8024f5e:	4633      	mov	r3, r6
 8024f60:	461e      	mov	r6, r3
 8024f62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8024f66:	2a39      	cmp	r2, #57	@ 0x39
 8024f68:	d107      	bne.n	8024f7a <_dtoa_r+0x6da>
 8024f6a:	459a      	cmp	sl, r3
 8024f6c:	d1f8      	bne.n	8024f60 <_dtoa_r+0x6c0>
 8024f6e:	9a04      	ldr	r2, [sp, #16]
 8024f70:	3201      	adds	r2, #1
 8024f72:	9204      	str	r2, [sp, #16]
 8024f74:	2230      	movs	r2, #48	@ 0x30
 8024f76:	f88a 2000 	strb.w	r2, [sl]
 8024f7a:	781a      	ldrb	r2, [r3, #0]
 8024f7c:	3201      	adds	r2, #1
 8024f7e:	701a      	strb	r2, [r3, #0]
 8024f80:	e7bd      	b.n	8024efe <_dtoa_r+0x65e>
 8024f82:	4b7b      	ldr	r3, [pc, #492]	@ (8025170 <_dtoa_r+0x8d0>)
 8024f84:	2200      	movs	r2, #0
 8024f86:	f7e3 fa7f 	bl	8008488 <__aeabi_dmul>
 8024f8a:	2200      	movs	r2, #0
 8024f8c:	2300      	movs	r3, #0
 8024f8e:	4604      	mov	r4, r0
 8024f90:	460d      	mov	r5, r1
 8024f92:	f7e3 fce1 	bl	8008958 <__aeabi_dcmpeq>
 8024f96:	2800      	cmp	r0, #0
 8024f98:	f43f aebb 	beq.w	8024d12 <_dtoa_r+0x472>
 8024f9c:	e6f0      	b.n	8024d80 <_dtoa_r+0x4e0>
 8024f9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024fa0:	2a00      	cmp	r2, #0
 8024fa2:	f000 80db 	beq.w	802515c <_dtoa_r+0x8bc>
 8024fa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024fa8:	2a01      	cmp	r2, #1
 8024faa:	f300 80bf 	bgt.w	802512c <_dtoa_r+0x88c>
 8024fae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024fb0:	2a00      	cmp	r2, #0
 8024fb2:	f000 80b7 	beq.w	8025124 <_dtoa_r+0x884>
 8024fb6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8024fba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024fbc:	4646      	mov	r6, r8
 8024fbe:	9a08      	ldr	r2, [sp, #32]
 8024fc0:	2101      	movs	r1, #1
 8024fc2:	441a      	add	r2, r3
 8024fc4:	4658      	mov	r0, fp
 8024fc6:	4498      	add	r8, r3
 8024fc8:	9208      	str	r2, [sp, #32]
 8024fca:	f000 ff35 	bl	8025e38 <__i2b>
 8024fce:	4605      	mov	r5, r0
 8024fd0:	b15e      	cbz	r6, 8024fea <_dtoa_r+0x74a>
 8024fd2:	9b08      	ldr	r3, [sp, #32]
 8024fd4:	2b00      	cmp	r3, #0
 8024fd6:	dd08      	ble.n	8024fea <_dtoa_r+0x74a>
 8024fd8:	42b3      	cmp	r3, r6
 8024fda:	9a08      	ldr	r2, [sp, #32]
 8024fdc:	bfa8      	it	ge
 8024fde:	4633      	movge	r3, r6
 8024fe0:	eba8 0803 	sub.w	r8, r8, r3
 8024fe4:	1af6      	subs	r6, r6, r3
 8024fe6:	1ad3      	subs	r3, r2, r3
 8024fe8:	9308      	str	r3, [sp, #32]
 8024fea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024fec:	b1f3      	cbz	r3, 802502c <_dtoa_r+0x78c>
 8024fee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024ff0:	2b00      	cmp	r3, #0
 8024ff2:	f000 80b7 	beq.w	8025164 <_dtoa_r+0x8c4>
 8024ff6:	b18c      	cbz	r4, 802501c <_dtoa_r+0x77c>
 8024ff8:	4629      	mov	r1, r5
 8024ffa:	4622      	mov	r2, r4
 8024ffc:	4658      	mov	r0, fp
 8024ffe:	f000 ffdb 	bl	8025fb8 <__pow5mult>
 8025002:	464a      	mov	r2, r9
 8025004:	4601      	mov	r1, r0
 8025006:	4605      	mov	r5, r0
 8025008:	4658      	mov	r0, fp
 802500a:	f000 ff2b 	bl	8025e64 <__multiply>
 802500e:	4649      	mov	r1, r9
 8025010:	9004      	str	r0, [sp, #16]
 8025012:	4658      	mov	r0, fp
 8025014:	f000 fe12 	bl	8025c3c <_Bfree>
 8025018:	9b04      	ldr	r3, [sp, #16]
 802501a:	4699      	mov	r9, r3
 802501c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802501e:	1b1a      	subs	r2, r3, r4
 8025020:	d004      	beq.n	802502c <_dtoa_r+0x78c>
 8025022:	4649      	mov	r1, r9
 8025024:	4658      	mov	r0, fp
 8025026:	f000 ffc7 	bl	8025fb8 <__pow5mult>
 802502a:	4681      	mov	r9, r0
 802502c:	2101      	movs	r1, #1
 802502e:	4658      	mov	r0, fp
 8025030:	f000 ff02 	bl	8025e38 <__i2b>
 8025034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025036:	4604      	mov	r4, r0
 8025038:	2b00      	cmp	r3, #0
 802503a:	f000 81cf 	beq.w	80253dc <_dtoa_r+0xb3c>
 802503e:	461a      	mov	r2, r3
 8025040:	4601      	mov	r1, r0
 8025042:	4658      	mov	r0, fp
 8025044:	f000 ffb8 	bl	8025fb8 <__pow5mult>
 8025048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802504a:	2b01      	cmp	r3, #1
 802504c:	4604      	mov	r4, r0
 802504e:	f300 8095 	bgt.w	802517c <_dtoa_r+0x8dc>
 8025052:	9b02      	ldr	r3, [sp, #8]
 8025054:	2b00      	cmp	r3, #0
 8025056:	f040 8087 	bne.w	8025168 <_dtoa_r+0x8c8>
 802505a:	9b03      	ldr	r3, [sp, #12]
 802505c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025060:	2b00      	cmp	r3, #0
 8025062:	f040 8089 	bne.w	8025178 <_dtoa_r+0x8d8>
 8025066:	9b03      	ldr	r3, [sp, #12]
 8025068:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802506c:	0d1b      	lsrs	r3, r3, #20
 802506e:	051b      	lsls	r3, r3, #20
 8025070:	b12b      	cbz	r3, 802507e <_dtoa_r+0x7de>
 8025072:	9b08      	ldr	r3, [sp, #32]
 8025074:	3301      	adds	r3, #1
 8025076:	9308      	str	r3, [sp, #32]
 8025078:	f108 0801 	add.w	r8, r8, #1
 802507c:	2301      	movs	r3, #1
 802507e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025082:	2b00      	cmp	r3, #0
 8025084:	f000 81b0 	beq.w	80253e8 <_dtoa_r+0xb48>
 8025088:	6923      	ldr	r3, [r4, #16]
 802508a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802508e:	6918      	ldr	r0, [r3, #16]
 8025090:	f000 fe86 	bl	8025da0 <__hi0bits>
 8025094:	f1c0 0020 	rsb	r0, r0, #32
 8025098:	9b08      	ldr	r3, [sp, #32]
 802509a:	4418      	add	r0, r3
 802509c:	f010 001f 	ands.w	r0, r0, #31
 80250a0:	d077      	beq.n	8025192 <_dtoa_r+0x8f2>
 80250a2:	f1c0 0320 	rsb	r3, r0, #32
 80250a6:	2b04      	cmp	r3, #4
 80250a8:	dd6b      	ble.n	8025182 <_dtoa_r+0x8e2>
 80250aa:	9b08      	ldr	r3, [sp, #32]
 80250ac:	f1c0 001c 	rsb	r0, r0, #28
 80250b0:	4403      	add	r3, r0
 80250b2:	4480      	add	r8, r0
 80250b4:	4406      	add	r6, r0
 80250b6:	9308      	str	r3, [sp, #32]
 80250b8:	f1b8 0f00 	cmp.w	r8, #0
 80250bc:	dd05      	ble.n	80250ca <_dtoa_r+0x82a>
 80250be:	4649      	mov	r1, r9
 80250c0:	4642      	mov	r2, r8
 80250c2:	4658      	mov	r0, fp
 80250c4:	f000 ffd2 	bl	802606c <__lshift>
 80250c8:	4681      	mov	r9, r0
 80250ca:	9b08      	ldr	r3, [sp, #32]
 80250cc:	2b00      	cmp	r3, #0
 80250ce:	dd05      	ble.n	80250dc <_dtoa_r+0x83c>
 80250d0:	4621      	mov	r1, r4
 80250d2:	461a      	mov	r2, r3
 80250d4:	4658      	mov	r0, fp
 80250d6:	f000 ffc9 	bl	802606c <__lshift>
 80250da:	4604      	mov	r4, r0
 80250dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80250de:	2b00      	cmp	r3, #0
 80250e0:	d059      	beq.n	8025196 <_dtoa_r+0x8f6>
 80250e2:	4621      	mov	r1, r4
 80250e4:	4648      	mov	r0, r9
 80250e6:	f001 f82d 	bl	8026144 <__mcmp>
 80250ea:	2800      	cmp	r0, #0
 80250ec:	da53      	bge.n	8025196 <_dtoa_r+0x8f6>
 80250ee:	1e7b      	subs	r3, r7, #1
 80250f0:	9304      	str	r3, [sp, #16]
 80250f2:	4649      	mov	r1, r9
 80250f4:	2300      	movs	r3, #0
 80250f6:	220a      	movs	r2, #10
 80250f8:	4658      	mov	r0, fp
 80250fa:	f000 fdc1 	bl	8025c80 <__multadd>
 80250fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025100:	4681      	mov	r9, r0
 8025102:	2b00      	cmp	r3, #0
 8025104:	f000 8172 	beq.w	80253ec <_dtoa_r+0xb4c>
 8025108:	2300      	movs	r3, #0
 802510a:	4629      	mov	r1, r5
 802510c:	220a      	movs	r2, #10
 802510e:	4658      	mov	r0, fp
 8025110:	f000 fdb6 	bl	8025c80 <__multadd>
 8025114:	9b00      	ldr	r3, [sp, #0]
 8025116:	2b00      	cmp	r3, #0
 8025118:	4605      	mov	r5, r0
 802511a:	dc67      	bgt.n	80251ec <_dtoa_r+0x94c>
 802511c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802511e:	2b02      	cmp	r3, #2
 8025120:	dc41      	bgt.n	80251a6 <_dtoa_r+0x906>
 8025122:	e063      	b.n	80251ec <_dtoa_r+0x94c>
 8025124:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025126:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802512a:	e746      	b.n	8024fba <_dtoa_r+0x71a>
 802512c:	9b07      	ldr	r3, [sp, #28]
 802512e:	1e5c      	subs	r4, r3, #1
 8025130:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025132:	42a3      	cmp	r3, r4
 8025134:	bfbf      	itttt	lt
 8025136:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8025138:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802513a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 802513c:	1ae3      	sublt	r3, r4, r3
 802513e:	bfb4      	ite	lt
 8025140:	18d2      	addlt	r2, r2, r3
 8025142:	1b1c      	subge	r4, r3, r4
 8025144:	9b07      	ldr	r3, [sp, #28]
 8025146:	bfbc      	itt	lt
 8025148:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 802514a:	2400      	movlt	r4, #0
 802514c:	2b00      	cmp	r3, #0
 802514e:	bfb5      	itete	lt
 8025150:	eba8 0603 	sublt.w	r6, r8, r3
 8025154:	9b07      	ldrge	r3, [sp, #28]
 8025156:	2300      	movlt	r3, #0
 8025158:	4646      	movge	r6, r8
 802515a:	e730      	b.n	8024fbe <_dtoa_r+0x71e>
 802515c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802515e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8025160:	4646      	mov	r6, r8
 8025162:	e735      	b.n	8024fd0 <_dtoa_r+0x730>
 8025164:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025166:	e75c      	b.n	8025022 <_dtoa_r+0x782>
 8025168:	2300      	movs	r3, #0
 802516a:	e788      	b.n	802507e <_dtoa_r+0x7de>
 802516c:	3fe00000 	.word	0x3fe00000
 8025170:	40240000 	.word	0x40240000
 8025174:	40140000 	.word	0x40140000
 8025178:	9b02      	ldr	r3, [sp, #8]
 802517a:	e780      	b.n	802507e <_dtoa_r+0x7de>
 802517c:	2300      	movs	r3, #0
 802517e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025180:	e782      	b.n	8025088 <_dtoa_r+0x7e8>
 8025182:	d099      	beq.n	80250b8 <_dtoa_r+0x818>
 8025184:	9a08      	ldr	r2, [sp, #32]
 8025186:	331c      	adds	r3, #28
 8025188:	441a      	add	r2, r3
 802518a:	4498      	add	r8, r3
 802518c:	441e      	add	r6, r3
 802518e:	9208      	str	r2, [sp, #32]
 8025190:	e792      	b.n	80250b8 <_dtoa_r+0x818>
 8025192:	4603      	mov	r3, r0
 8025194:	e7f6      	b.n	8025184 <_dtoa_r+0x8e4>
 8025196:	9b07      	ldr	r3, [sp, #28]
 8025198:	9704      	str	r7, [sp, #16]
 802519a:	2b00      	cmp	r3, #0
 802519c:	dc20      	bgt.n	80251e0 <_dtoa_r+0x940>
 802519e:	9300      	str	r3, [sp, #0]
 80251a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80251a2:	2b02      	cmp	r3, #2
 80251a4:	dd1e      	ble.n	80251e4 <_dtoa_r+0x944>
 80251a6:	9b00      	ldr	r3, [sp, #0]
 80251a8:	2b00      	cmp	r3, #0
 80251aa:	f47f aec0 	bne.w	8024f2e <_dtoa_r+0x68e>
 80251ae:	4621      	mov	r1, r4
 80251b0:	2205      	movs	r2, #5
 80251b2:	4658      	mov	r0, fp
 80251b4:	f000 fd64 	bl	8025c80 <__multadd>
 80251b8:	4601      	mov	r1, r0
 80251ba:	4604      	mov	r4, r0
 80251bc:	4648      	mov	r0, r9
 80251be:	f000 ffc1 	bl	8026144 <__mcmp>
 80251c2:	2800      	cmp	r0, #0
 80251c4:	f77f aeb3 	ble.w	8024f2e <_dtoa_r+0x68e>
 80251c8:	4656      	mov	r6, sl
 80251ca:	2331      	movs	r3, #49	@ 0x31
 80251cc:	f806 3b01 	strb.w	r3, [r6], #1
 80251d0:	9b04      	ldr	r3, [sp, #16]
 80251d2:	3301      	adds	r3, #1
 80251d4:	9304      	str	r3, [sp, #16]
 80251d6:	e6ae      	b.n	8024f36 <_dtoa_r+0x696>
 80251d8:	9c07      	ldr	r4, [sp, #28]
 80251da:	9704      	str	r7, [sp, #16]
 80251dc:	4625      	mov	r5, r4
 80251de:	e7f3      	b.n	80251c8 <_dtoa_r+0x928>
 80251e0:	9b07      	ldr	r3, [sp, #28]
 80251e2:	9300      	str	r3, [sp, #0]
 80251e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80251e6:	2b00      	cmp	r3, #0
 80251e8:	f000 8104 	beq.w	80253f4 <_dtoa_r+0xb54>
 80251ec:	2e00      	cmp	r6, #0
 80251ee:	dd05      	ble.n	80251fc <_dtoa_r+0x95c>
 80251f0:	4629      	mov	r1, r5
 80251f2:	4632      	mov	r2, r6
 80251f4:	4658      	mov	r0, fp
 80251f6:	f000 ff39 	bl	802606c <__lshift>
 80251fa:	4605      	mov	r5, r0
 80251fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80251fe:	2b00      	cmp	r3, #0
 8025200:	d05a      	beq.n	80252b8 <_dtoa_r+0xa18>
 8025202:	6869      	ldr	r1, [r5, #4]
 8025204:	4658      	mov	r0, fp
 8025206:	f000 fcd9 	bl	8025bbc <_Balloc>
 802520a:	4606      	mov	r6, r0
 802520c:	b928      	cbnz	r0, 802521a <_dtoa_r+0x97a>
 802520e:	4b84      	ldr	r3, [pc, #528]	@ (8025420 <_dtoa_r+0xb80>)
 8025210:	4602      	mov	r2, r0
 8025212:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8025216:	f7ff bb5a 	b.w	80248ce <_dtoa_r+0x2e>
 802521a:	692a      	ldr	r2, [r5, #16]
 802521c:	3202      	adds	r2, #2
 802521e:	0092      	lsls	r2, r2, #2
 8025220:	f105 010c 	add.w	r1, r5, #12
 8025224:	300c      	adds	r0, #12
 8025226:	f7ff fa8a 	bl	802473e <memcpy>
 802522a:	2201      	movs	r2, #1
 802522c:	4631      	mov	r1, r6
 802522e:	4658      	mov	r0, fp
 8025230:	f000 ff1c 	bl	802606c <__lshift>
 8025234:	f10a 0301 	add.w	r3, sl, #1
 8025238:	9307      	str	r3, [sp, #28]
 802523a:	9b00      	ldr	r3, [sp, #0]
 802523c:	4453      	add	r3, sl
 802523e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025240:	9b02      	ldr	r3, [sp, #8]
 8025242:	f003 0301 	and.w	r3, r3, #1
 8025246:	462f      	mov	r7, r5
 8025248:	930a      	str	r3, [sp, #40]	@ 0x28
 802524a:	4605      	mov	r5, r0
 802524c:	9b07      	ldr	r3, [sp, #28]
 802524e:	4621      	mov	r1, r4
 8025250:	3b01      	subs	r3, #1
 8025252:	4648      	mov	r0, r9
 8025254:	9300      	str	r3, [sp, #0]
 8025256:	f7ff fa98 	bl	802478a <quorem>
 802525a:	4639      	mov	r1, r7
 802525c:	9002      	str	r0, [sp, #8]
 802525e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8025262:	4648      	mov	r0, r9
 8025264:	f000 ff6e 	bl	8026144 <__mcmp>
 8025268:	462a      	mov	r2, r5
 802526a:	9008      	str	r0, [sp, #32]
 802526c:	4621      	mov	r1, r4
 802526e:	4658      	mov	r0, fp
 8025270:	f000 ff84 	bl	802617c <__mdiff>
 8025274:	68c2      	ldr	r2, [r0, #12]
 8025276:	4606      	mov	r6, r0
 8025278:	bb02      	cbnz	r2, 80252bc <_dtoa_r+0xa1c>
 802527a:	4601      	mov	r1, r0
 802527c:	4648      	mov	r0, r9
 802527e:	f000 ff61 	bl	8026144 <__mcmp>
 8025282:	4602      	mov	r2, r0
 8025284:	4631      	mov	r1, r6
 8025286:	4658      	mov	r0, fp
 8025288:	920e      	str	r2, [sp, #56]	@ 0x38
 802528a:	f000 fcd7 	bl	8025c3c <_Bfree>
 802528e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025290:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025292:	9e07      	ldr	r6, [sp, #28]
 8025294:	ea43 0102 	orr.w	r1, r3, r2
 8025298:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802529a:	4319      	orrs	r1, r3
 802529c:	d110      	bne.n	80252c0 <_dtoa_r+0xa20>
 802529e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80252a2:	d029      	beq.n	80252f8 <_dtoa_r+0xa58>
 80252a4:	9b08      	ldr	r3, [sp, #32]
 80252a6:	2b00      	cmp	r3, #0
 80252a8:	dd02      	ble.n	80252b0 <_dtoa_r+0xa10>
 80252aa:	9b02      	ldr	r3, [sp, #8]
 80252ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80252b0:	9b00      	ldr	r3, [sp, #0]
 80252b2:	f883 8000 	strb.w	r8, [r3]
 80252b6:	e63f      	b.n	8024f38 <_dtoa_r+0x698>
 80252b8:	4628      	mov	r0, r5
 80252ba:	e7bb      	b.n	8025234 <_dtoa_r+0x994>
 80252bc:	2201      	movs	r2, #1
 80252be:	e7e1      	b.n	8025284 <_dtoa_r+0x9e4>
 80252c0:	9b08      	ldr	r3, [sp, #32]
 80252c2:	2b00      	cmp	r3, #0
 80252c4:	db04      	blt.n	80252d0 <_dtoa_r+0xa30>
 80252c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80252c8:	430b      	orrs	r3, r1
 80252ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80252cc:	430b      	orrs	r3, r1
 80252ce:	d120      	bne.n	8025312 <_dtoa_r+0xa72>
 80252d0:	2a00      	cmp	r2, #0
 80252d2:	dded      	ble.n	80252b0 <_dtoa_r+0xa10>
 80252d4:	4649      	mov	r1, r9
 80252d6:	2201      	movs	r2, #1
 80252d8:	4658      	mov	r0, fp
 80252da:	f000 fec7 	bl	802606c <__lshift>
 80252de:	4621      	mov	r1, r4
 80252e0:	4681      	mov	r9, r0
 80252e2:	f000 ff2f 	bl	8026144 <__mcmp>
 80252e6:	2800      	cmp	r0, #0
 80252e8:	dc03      	bgt.n	80252f2 <_dtoa_r+0xa52>
 80252ea:	d1e1      	bne.n	80252b0 <_dtoa_r+0xa10>
 80252ec:	f018 0f01 	tst.w	r8, #1
 80252f0:	d0de      	beq.n	80252b0 <_dtoa_r+0xa10>
 80252f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80252f6:	d1d8      	bne.n	80252aa <_dtoa_r+0xa0a>
 80252f8:	9a00      	ldr	r2, [sp, #0]
 80252fa:	2339      	movs	r3, #57	@ 0x39
 80252fc:	7013      	strb	r3, [r2, #0]
 80252fe:	4633      	mov	r3, r6
 8025300:	461e      	mov	r6, r3
 8025302:	3b01      	subs	r3, #1
 8025304:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8025308:	2a39      	cmp	r2, #57	@ 0x39
 802530a:	d052      	beq.n	80253b2 <_dtoa_r+0xb12>
 802530c:	3201      	adds	r2, #1
 802530e:	701a      	strb	r2, [r3, #0]
 8025310:	e612      	b.n	8024f38 <_dtoa_r+0x698>
 8025312:	2a00      	cmp	r2, #0
 8025314:	dd07      	ble.n	8025326 <_dtoa_r+0xa86>
 8025316:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802531a:	d0ed      	beq.n	80252f8 <_dtoa_r+0xa58>
 802531c:	9a00      	ldr	r2, [sp, #0]
 802531e:	f108 0301 	add.w	r3, r8, #1
 8025322:	7013      	strb	r3, [r2, #0]
 8025324:	e608      	b.n	8024f38 <_dtoa_r+0x698>
 8025326:	9b07      	ldr	r3, [sp, #28]
 8025328:	9a07      	ldr	r2, [sp, #28]
 802532a:	f803 8c01 	strb.w	r8, [r3, #-1]
 802532e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025330:	4293      	cmp	r3, r2
 8025332:	d028      	beq.n	8025386 <_dtoa_r+0xae6>
 8025334:	4649      	mov	r1, r9
 8025336:	2300      	movs	r3, #0
 8025338:	220a      	movs	r2, #10
 802533a:	4658      	mov	r0, fp
 802533c:	f000 fca0 	bl	8025c80 <__multadd>
 8025340:	42af      	cmp	r7, r5
 8025342:	4681      	mov	r9, r0
 8025344:	f04f 0300 	mov.w	r3, #0
 8025348:	f04f 020a 	mov.w	r2, #10
 802534c:	4639      	mov	r1, r7
 802534e:	4658      	mov	r0, fp
 8025350:	d107      	bne.n	8025362 <_dtoa_r+0xac2>
 8025352:	f000 fc95 	bl	8025c80 <__multadd>
 8025356:	4607      	mov	r7, r0
 8025358:	4605      	mov	r5, r0
 802535a:	9b07      	ldr	r3, [sp, #28]
 802535c:	3301      	adds	r3, #1
 802535e:	9307      	str	r3, [sp, #28]
 8025360:	e774      	b.n	802524c <_dtoa_r+0x9ac>
 8025362:	f000 fc8d 	bl	8025c80 <__multadd>
 8025366:	4629      	mov	r1, r5
 8025368:	4607      	mov	r7, r0
 802536a:	2300      	movs	r3, #0
 802536c:	220a      	movs	r2, #10
 802536e:	4658      	mov	r0, fp
 8025370:	f000 fc86 	bl	8025c80 <__multadd>
 8025374:	4605      	mov	r5, r0
 8025376:	e7f0      	b.n	802535a <_dtoa_r+0xaba>
 8025378:	9b00      	ldr	r3, [sp, #0]
 802537a:	2b00      	cmp	r3, #0
 802537c:	bfcc      	ite	gt
 802537e:	461e      	movgt	r6, r3
 8025380:	2601      	movle	r6, #1
 8025382:	4456      	add	r6, sl
 8025384:	2700      	movs	r7, #0
 8025386:	4649      	mov	r1, r9
 8025388:	2201      	movs	r2, #1
 802538a:	4658      	mov	r0, fp
 802538c:	f000 fe6e 	bl	802606c <__lshift>
 8025390:	4621      	mov	r1, r4
 8025392:	4681      	mov	r9, r0
 8025394:	f000 fed6 	bl	8026144 <__mcmp>
 8025398:	2800      	cmp	r0, #0
 802539a:	dcb0      	bgt.n	80252fe <_dtoa_r+0xa5e>
 802539c:	d102      	bne.n	80253a4 <_dtoa_r+0xb04>
 802539e:	f018 0f01 	tst.w	r8, #1
 80253a2:	d1ac      	bne.n	80252fe <_dtoa_r+0xa5e>
 80253a4:	4633      	mov	r3, r6
 80253a6:	461e      	mov	r6, r3
 80253a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80253ac:	2a30      	cmp	r2, #48	@ 0x30
 80253ae:	d0fa      	beq.n	80253a6 <_dtoa_r+0xb06>
 80253b0:	e5c2      	b.n	8024f38 <_dtoa_r+0x698>
 80253b2:	459a      	cmp	sl, r3
 80253b4:	d1a4      	bne.n	8025300 <_dtoa_r+0xa60>
 80253b6:	9b04      	ldr	r3, [sp, #16]
 80253b8:	3301      	adds	r3, #1
 80253ba:	9304      	str	r3, [sp, #16]
 80253bc:	2331      	movs	r3, #49	@ 0x31
 80253be:	f88a 3000 	strb.w	r3, [sl]
 80253c2:	e5b9      	b.n	8024f38 <_dtoa_r+0x698>
 80253c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80253c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8025424 <_dtoa_r+0xb84>
 80253ca:	b11b      	cbz	r3, 80253d4 <_dtoa_r+0xb34>
 80253cc:	f10a 0308 	add.w	r3, sl, #8
 80253d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80253d2:	6013      	str	r3, [r2, #0]
 80253d4:	4650      	mov	r0, sl
 80253d6:	b019      	add	sp, #100	@ 0x64
 80253d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80253dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80253de:	2b01      	cmp	r3, #1
 80253e0:	f77f ae37 	ble.w	8025052 <_dtoa_r+0x7b2>
 80253e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80253e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80253e8:	2001      	movs	r0, #1
 80253ea:	e655      	b.n	8025098 <_dtoa_r+0x7f8>
 80253ec:	9b00      	ldr	r3, [sp, #0]
 80253ee:	2b00      	cmp	r3, #0
 80253f0:	f77f aed6 	ble.w	80251a0 <_dtoa_r+0x900>
 80253f4:	4656      	mov	r6, sl
 80253f6:	4621      	mov	r1, r4
 80253f8:	4648      	mov	r0, r9
 80253fa:	f7ff f9c6 	bl	802478a <quorem>
 80253fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8025402:	f806 8b01 	strb.w	r8, [r6], #1
 8025406:	9b00      	ldr	r3, [sp, #0]
 8025408:	eba6 020a 	sub.w	r2, r6, sl
 802540c:	4293      	cmp	r3, r2
 802540e:	ddb3      	ble.n	8025378 <_dtoa_r+0xad8>
 8025410:	4649      	mov	r1, r9
 8025412:	2300      	movs	r3, #0
 8025414:	220a      	movs	r2, #10
 8025416:	4658      	mov	r0, fp
 8025418:	f000 fc32 	bl	8025c80 <__multadd>
 802541c:	4681      	mov	r9, r0
 802541e:	e7ea      	b.n	80253f6 <_dtoa_r+0xb56>
 8025420:	08030cc0 	.word	0x08030cc0
 8025424:	08030c5b 	.word	0x08030c5b

08025428 <_free_r>:
 8025428:	b538      	push	{r3, r4, r5, lr}
 802542a:	4605      	mov	r5, r0
 802542c:	2900      	cmp	r1, #0
 802542e:	d041      	beq.n	80254b4 <_free_r+0x8c>
 8025430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025434:	1f0c      	subs	r4, r1, #4
 8025436:	2b00      	cmp	r3, #0
 8025438:	bfb8      	it	lt
 802543a:	18e4      	addlt	r4, r4, r3
 802543c:	f7fd f808 	bl	8022450 <__malloc_lock>
 8025440:	4a1d      	ldr	r2, [pc, #116]	@ (80254b8 <_free_r+0x90>)
 8025442:	6813      	ldr	r3, [r2, #0]
 8025444:	b933      	cbnz	r3, 8025454 <_free_r+0x2c>
 8025446:	6063      	str	r3, [r4, #4]
 8025448:	6014      	str	r4, [r2, #0]
 802544a:	4628      	mov	r0, r5
 802544c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025450:	f7fd b804 	b.w	802245c <__malloc_unlock>
 8025454:	42a3      	cmp	r3, r4
 8025456:	d908      	bls.n	802546a <_free_r+0x42>
 8025458:	6820      	ldr	r0, [r4, #0]
 802545a:	1821      	adds	r1, r4, r0
 802545c:	428b      	cmp	r3, r1
 802545e:	bf01      	itttt	eq
 8025460:	6819      	ldreq	r1, [r3, #0]
 8025462:	685b      	ldreq	r3, [r3, #4]
 8025464:	1809      	addeq	r1, r1, r0
 8025466:	6021      	streq	r1, [r4, #0]
 8025468:	e7ed      	b.n	8025446 <_free_r+0x1e>
 802546a:	461a      	mov	r2, r3
 802546c:	685b      	ldr	r3, [r3, #4]
 802546e:	b10b      	cbz	r3, 8025474 <_free_r+0x4c>
 8025470:	42a3      	cmp	r3, r4
 8025472:	d9fa      	bls.n	802546a <_free_r+0x42>
 8025474:	6811      	ldr	r1, [r2, #0]
 8025476:	1850      	adds	r0, r2, r1
 8025478:	42a0      	cmp	r0, r4
 802547a:	d10b      	bne.n	8025494 <_free_r+0x6c>
 802547c:	6820      	ldr	r0, [r4, #0]
 802547e:	4401      	add	r1, r0
 8025480:	1850      	adds	r0, r2, r1
 8025482:	4283      	cmp	r3, r0
 8025484:	6011      	str	r1, [r2, #0]
 8025486:	d1e0      	bne.n	802544a <_free_r+0x22>
 8025488:	6818      	ldr	r0, [r3, #0]
 802548a:	685b      	ldr	r3, [r3, #4]
 802548c:	6053      	str	r3, [r2, #4]
 802548e:	4408      	add	r0, r1
 8025490:	6010      	str	r0, [r2, #0]
 8025492:	e7da      	b.n	802544a <_free_r+0x22>
 8025494:	d902      	bls.n	802549c <_free_r+0x74>
 8025496:	230c      	movs	r3, #12
 8025498:	602b      	str	r3, [r5, #0]
 802549a:	e7d6      	b.n	802544a <_free_r+0x22>
 802549c:	6820      	ldr	r0, [r4, #0]
 802549e:	1821      	adds	r1, r4, r0
 80254a0:	428b      	cmp	r3, r1
 80254a2:	bf04      	itt	eq
 80254a4:	6819      	ldreq	r1, [r3, #0]
 80254a6:	685b      	ldreq	r3, [r3, #4]
 80254a8:	6063      	str	r3, [r4, #4]
 80254aa:	bf04      	itt	eq
 80254ac:	1809      	addeq	r1, r1, r0
 80254ae:	6021      	streq	r1, [r4, #0]
 80254b0:	6054      	str	r4, [r2, #4]
 80254b2:	e7ca      	b.n	802544a <_free_r+0x22>
 80254b4:	bd38      	pop	{r3, r4, r5, pc}
 80254b6:	bf00      	nop
 80254b8:	200027ec 	.word	0x200027ec

080254bc <rshift>:
 80254bc:	6903      	ldr	r3, [r0, #16]
 80254be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80254c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80254c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80254ca:	f100 0414 	add.w	r4, r0, #20
 80254ce:	dd45      	ble.n	802555c <rshift+0xa0>
 80254d0:	f011 011f 	ands.w	r1, r1, #31
 80254d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80254d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80254dc:	d10c      	bne.n	80254f8 <rshift+0x3c>
 80254de:	f100 0710 	add.w	r7, r0, #16
 80254e2:	4629      	mov	r1, r5
 80254e4:	42b1      	cmp	r1, r6
 80254e6:	d334      	bcc.n	8025552 <rshift+0x96>
 80254e8:	1a9b      	subs	r3, r3, r2
 80254ea:	009b      	lsls	r3, r3, #2
 80254ec:	1eea      	subs	r2, r5, #3
 80254ee:	4296      	cmp	r6, r2
 80254f0:	bf38      	it	cc
 80254f2:	2300      	movcc	r3, #0
 80254f4:	4423      	add	r3, r4
 80254f6:	e015      	b.n	8025524 <rshift+0x68>
 80254f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80254fc:	f1c1 0820 	rsb	r8, r1, #32
 8025500:	40cf      	lsrs	r7, r1
 8025502:	f105 0e04 	add.w	lr, r5, #4
 8025506:	46a1      	mov	r9, r4
 8025508:	4576      	cmp	r6, lr
 802550a:	46f4      	mov	ip, lr
 802550c:	d815      	bhi.n	802553a <rshift+0x7e>
 802550e:	1a9a      	subs	r2, r3, r2
 8025510:	0092      	lsls	r2, r2, #2
 8025512:	3a04      	subs	r2, #4
 8025514:	3501      	adds	r5, #1
 8025516:	42ae      	cmp	r6, r5
 8025518:	bf38      	it	cc
 802551a:	2200      	movcc	r2, #0
 802551c:	18a3      	adds	r3, r4, r2
 802551e:	50a7      	str	r7, [r4, r2]
 8025520:	b107      	cbz	r7, 8025524 <rshift+0x68>
 8025522:	3304      	adds	r3, #4
 8025524:	1b1a      	subs	r2, r3, r4
 8025526:	42a3      	cmp	r3, r4
 8025528:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802552c:	bf08      	it	eq
 802552e:	2300      	moveq	r3, #0
 8025530:	6102      	str	r2, [r0, #16]
 8025532:	bf08      	it	eq
 8025534:	6143      	streq	r3, [r0, #20]
 8025536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802553a:	f8dc c000 	ldr.w	ip, [ip]
 802553e:	fa0c fc08 	lsl.w	ip, ip, r8
 8025542:	ea4c 0707 	orr.w	r7, ip, r7
 8025546:	f849 7b04 	str.w	r7, [r9], #4
 802554a:	f85e 7b04 	ldr.w	r7, [lr], #4
 802554e:	40cf      	lsrs	r7, r1
 8025550:	e7da      	b.n	8025508 <rshift+0x4c>
 8025552:	f851 cb04 	ldr.w	ip, [r1], #4
 8025556:	f847 cf04 	str.w	ip, [r7, #4]!
 802555a:	e7c3      	b.n	80254e4 <rshift+0x28>
 802555c:	4623      	mov	r3, r4
 802555e:	e7e1      	b.n	8025524 <rshift+0x68>

08025560 <__hexdig_fun>:
 8025560:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8025564:	2b09      	cmp	r3, #9
 8025566:	d802      	bhi.n	802556e <__hexdig_fun+0xe>
 8025568:	3820      	subs	r0, #32
 802556a:	b2c0      	uxtb	r0, r0
 802556c:	4770      	bx	lr
 802556e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8025572:	2b05      	cmp	r3, #5
 8025574:	d801      	bhi.n	802557a <__hexdig_fun+0x1a>
 8025576:	3847      	subs	r0, #71	@ 0x47
 8025578:	e7f7      	b.n	802556a <__hexdig_fun+0xa>
 802557a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 802557e:	2b05      	cmp	r3, #5
 8025580:	d801      	bhi.n	8025586 <__hexdig_fun+0x26>
 8025582:	3827      	subs	r0, #39	@ 0x27
 8025584:	e7f1      	b.n	802556a <__hexdig_fun+0xa>
 8025586:	2000      	movs	r0, #0
 8025588:	4770      	bx	lr
	...

0802558c <__gethex>:
 802558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025590:	b085      	sub	sp, #20
 8025592:	468a      	mov	sl, r1
 8025594:	9302      	str	r3, [sp, #8]
 8025596:	680b      	ldr	r3, [r1, #0]
 8025598:	9001      	str	r0, [sp, #4]
 802559a:	4690      	mov	r8, r2
 802559c:	1c9c      	adds	r4, r3, #2
 802559e:	46a1      	mov	r9, r4
 80255a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80255a4:	2830      	cmp	r0, #48	@ 0x30
 80255a6:	d0fa      	beq.n	802559e <__gethex+0x12>
 80255a8:	eba9 0303 	sub.w	r3, r9, r3
 80255ac:	f1a3 0b02 	sub.w	fp, r3, #2
 80255b0:	f7ff ffd6 	bl	8025560 <__hexdig_fun>
 80255b4:	4605      	mov	r5, r0
 80255b6:	2800      	cmp	r0, #0
 80255b8:	d168      	bne.n	802568c <__gethex+0x100>
 80255ba:	49a0      	ldr	r1, [pc, #640]	@ (802583c <__gethex+0x2b0>)
 80255bc:	2201      	movs	r2, #1
 80255be:	4648      	mov	r0, r9
 80255c0:	f7fe ff81 	bl	80244c6 <strncmp>
 80255c4:	4607      	mov	r7, r0
 80255c6:	2800      	cmp	r0, #0
 80255c8:	d167      	bne.n	802569a <__gethex+0x10e>
 80255ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 80255ce:	4626      	mov	r6, r4
 80255d0:	f7ff ffc6 	bl	8025560 <__hexdig_fun>
 80255d4:	2800      	cmp	r0, #0
 80255d6:	d062      	beq.n	802569e <__gethex+0x112>
 80255d8:	4623      	mov	r3, r4
 80255da:	7818      	ldrb	r0, [r3, #0]
 80255dc:	2830      	cmp	r0, #48	@ 0x30
 80255de:	4699      	mov	r9, r3
 80255e0:	f103 0301 	add.w	r3, r3, #1
 80255e4:	d0f9      	beq.n	80255da <__gethex+0x4e>
 80255e6:	f7ff ffbb 	bl	8025560 <__hexdig_fun>
 80255ea:	fab0 f580 	clz	r5, r0
 80255ee:	096d      	lsrs	r5, r5, #5
 80255f0:	f04f 0b01 	mov.w	fp, #1
 80255f4:	464a      	mov	r2, r9
 80255f6:	4616      	mov	r6, r2
 80255f8:	3201      	adds	r2, #1
 80255fa:	7830      	ldrb	r0, [r6, #0]
 80255fc:	f7ff ffb0 	bl	8025560 <__hexdig_fun>
 8025600:	2800      	cmp	r0, #0
 8025602:	d1f8      	bne.n	80255f6 <__gethex+0x6a>
 8025604:	498d      	ldr	r1, [pc, #564]	@ (802583c <__gethex+0x2b0>)
 8025606:	2201      	movs	r2, #1
 8025608:	4630      	mov	r0, r6
 802560a:	f7fe ff5c 	bl	80244c6 <strncmp>
 802560e:	2800      	cmp	r0, #0
 8025610:	d13f      	bne.n	8025692 <__gethex+0x106>
 8025612:	b944      	cbnz	r4, 8025626 <__gethex+0x9a>
 8025614:	1c74      	adds	r4, r6, #1
 8025616:	4622      	mov	r2, r4
 8025618:	4616      	mov	r6, r2
 802561a:	3201      	adds	r2, #1
 802561c:	7830      	ldrb	r0, [r6, #0]
 802561e:	f7ff ff9f 	bl	8025560 <__hexdig_fun>
 8025622:	2800      	cmp	r0, #0
 8025624:	d1f8      	bne.n	8025618 <__gethex+0x8c>
 8025626:	1ba4      	subs	r4, r4, r6
 8025628:	00a7      	lsls	r7, r4, #2
 802562a:	7833      	ldrb	r3, [r6, #0]
 802562c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8025630:	2b50      	cmp	r3, #80	@ 0x50
 8025632:	d13e      	bne.n	80256b2 <__gethex+0x126>
 8025634:	7873      	ldrb	r3, [r6, #1]
 8025636:	2b2b      	cmp	r3, #43	@ 0x2b
 8025638:	d033      	beq.n	80256a2 <__gethex+0x116>
 802563a:	2b2d      	cmp	r3, #45	@ 0x2d
 802563c:	d034      	beq.n	80256a8 <__gethex+0x11c>
 802563e:	1c71      	adds	r1, r6, #1
 8025640:	2400      	movs	r4, #0
 8025642:	7808      	ldrb	r0, [r1, #0]
 8025644:	f7ff ff8c 	bl	8025560 <__hexdig_fun>
 8025648:	1e43      	subs	r3, r0, #1
 802564a:	b2db      	uxtb	r3, r3
 802564c:	2b18      	cmp	r3, #24
 802564e:	d830      	bhi.n	80256b2 <__gethex+0x126>
 8025650:	f1a0 0210 	sub.w	r2, r0, #16
 8025654:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8025658:	f7ff ff82 	bl	8025560 <__hexdig_fun>
 802565c:	f100 3cff 	add.w	ip, r0, #4294967295
 8025660:	fa5f fc8c 	uxtb.w	ip, ip
 8025664:	f1bc 0f18 	cmp.w	ip, #24
 8025668:	f04f 030a 	mov.w	r3, #10
 802566c:	d91e      	bls.n	80256ac <__gethex+0x120>
 802566e:	b104      	cbz	r4, 8025672 <__gethex+0xe6>
 8025670:	4252      	negs	r2, r2
 8025672:	4417      	add	r7, r2
 8025674:	f8ca 1000 	str.w	r1, [sl]
 8025678:	b1ed      	cbz	r5, 80256b6 <__gethex+0x12a>
 802567a:	f1bb 0f00 	cmp.w	fp, #0
 802567e:	bf0c      	ite	eq
 8025680:	2506      	moveq	r5, #6
 8025682:	2500      	movne	r5, #0
 8025684:	4628      	mov	r0, r5
 8025686:	b005      	add	sp, #20
 8025688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802568c:	2500      	movs	r5, #0
 802568e:	462c      	mov	r4, r5
 8025690:	e7b0      	b.n	80255f4 <__gethex+0x68>
 8025692:	2c00      	cmp	r4, #0
 8025694:	d1c7      	bne.n	8025626 <__gethex+0x9a>
 8025696:	4627      	mov	r7, r4
 8025698:	e7c7      	b.n	802562a <__gethex+0x9e>
 802569a:	464e      	mov	r6, r9
 802569c:	462f      	mov	r7, r5
 802569e:	2501      	movs	r5, #1
 80256a0:	e7c3      	b.n	802562a <__gethex+0x9e>
 80256a2:	2400      	movs	r4, #0
 80256a4:	1cb1      	adds	r1, r6, #2
 80256a6:	e7cc      	b.n	8025642 <__gethex+0xb6>
 80256a8:	2401      	movs	r4, #1
 80256aa:	e7fb      	b.n	80256a4 <__gethex+0x118>
 80256ac:	fb03 0002 	mla	r0, r3, r2, r0
 80256b0:	e7ce      	b.n	8025650 <__gethex+0xc4>
 80256b2:	4631      	mov	r1, r6
 80256b4:	e7de      	b.n	8025674 <__gethex+0xe8>
 80256b6:	eba6 0309 	sub.w	r3, r6, r9
 80256ba:	3b01      	subs	r3, #1
 80256bc:	4629      	mov	r1, r5
 80256be:	2b07      	cmp	r3, #7
 80256c0:	dc0a      	bgt.n	80256d8 <__gethex+0x14c>
 80256c2:	9801      	ldr	r0, [sp, #4]
 80256c4:	f000 fa7a 	bl	8025bbc <_Balloc>
 80256c8:	4604      	mov	r4, r0
 80256ca:	b940      	cbnz	r0, 80256de <__gethex+0x152>
 80256cc:	4b5c      	ldr	r3, [pc, #368]	@ (8025840 <__gethex+0x2b4>)
 80256ce:	4602      	mov	r2, r0
 80256d0:	21e4      	movs	r1, #228	@ 0xe4
 80256d2:	485c      	ldr	r0, [pc, #368]	@ (8025844 <__gethex+0x2b8>)
 80256d4:	f7fc fdd0 	bl	8022278 <__assert_func>
 80256d8:	3101      	adds	r1, #1
 80256da:	105b      	asrs	r3, r3, #1
 80256dc:	e7ef      	b.n	80256be <__gethex+0x132>
 80256de:	f100 0a14 	add.w	sl, r0, #20
 80256e2:	2300      	movs	r3, #0
 80256e4:	4655      	mov	r5, sl
 80256e6:	469b      	mov	fp, r3
 80256e8:	45b1      	cmp	r9, r6
 80256ea:	d337      	bcc.n	802575c <__gethex+0x1d0>
 80256ec:	f845 bb04 	str.w	fp, [r5], #4
 80256f0:	eba5 050a 	sub.w	r5, r5, sl
 80256f4:	10ad      	asrs	r5, r5, #2
 80256f6:	6125      	str	r5, [r4, #16]
 80256f8:	4658      	mov	r0, fp
 80256fa:	f000 fb51 	bl	8025da0 <__hi0bits>
 80256fe:	016d      	lsls	r5, r5, #5
 8025700:	f8d8 6000 	ldr.w	r6, [r8]
 8025704:	1a2d      	subs	r5, r5, r0
 8025706:	42b5      	cmp	r5, r6
 8025708:	dd54      	ble.n	80257b4 <__gethex+0x228>
 802570a:	1bad      	subs	r5, r5, r6
 802570c:	4629      	mov	r1, r5
 802570e:	4620      	mov	r0, r4
 8025710:	f000 fee5 	bl	80264de <__any_on>
 8025714:	4681      	mov	r9, r0
 8025716:	b178      	cbz	r0, 8025738 <__gethex+0x1ac>
 8025718:	1e6b      	subs	r3, r5, #1
 802571a:	1159      	asrs	r1, r3, #5
 802571c:	f003 021f 	and.w	r2, r3, #31
 8025720:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8025724:	f04f 0901 	mov.w	r9, #1
 8025728:	fa09 f202 	lsl.w	r2, r9, r2
 802572c:	420a      	tst	r2, r1
 802572e:	d003      	beq.n	8025738 <__gethex+0x1ac>
 8025730:	454b      	cmp	r3, r9
 8025732:	dc36      	bgt.n	80257a2 <__gethex+0x216>
 8025734:	f04f 0902 	mov.w	r9, #2
 8025738:	4629      	mov	r1, r5
 802573a:	4620      	mov	r0, r4
 802573c:	f7ff febe 	bl	80254bc <rshift>
 8025740:	442f      	add	r7, r5
 8025742:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8025746:	42bb      	cmp	r3, r7
 8025748:	da42      	bge.n	80257d0 <__gethex+0x244>
 802574a:	9801      	ldr	r0, [sp, #4]
 802574c:	4621      	mov	r1, r4
 802574e:	f000 fa75 	bl	8025c3c <_Bfree>
 8025752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025754:	2300      	movs	r3, #0
 8025756:	6013      	str	r3, [r2, #0]
 8025758:	25a3      	movs	r5, #163	@ 0xa3
 802575a:	e793      	b.n	8025684 <__gethex+0xf8>
 802575c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8025760:	2a2e      	cmp	r2, #46	@ 0x2e
 8025762:	d012      	beq.n	802578a <__gethex+0x1fe>
 8025764:	2b20      	cmp	r3, #32
 8025766:	d104      	bne.n	8025772 <__gethex+0x1e6>
 8025768:	f845 bb04 	str.w	fp, [r5], #4
 802576c:	f04f 0b00 	mov.w	fp, #0
 8025770:	465b      	mov	r3, fp
 8025772:	7830      	ldrb	r0, [r6, #0]
 8025774:	9303      	str	r3, [sp, #12]
 8025776:	f7ff fef3 	bl	8025560 <__hexdig_fun>
 802577a:	9b03      	ldr	r3, [sp, #12]
 802577c:	f000 000f 	and.w	r0, r0, #15
 8025780:	4098      	lsls	r0, r3
 8025782:	ea4b 0b00 	orr.w	fp, fp, r0
 8025786:	3304      	adds	r3, #4
 8025788:	e7ae      	b.n	80256e8 <__gethex+0x15c>
 802578a:	45b1      	cmp	r9, r6
 802578c:	d8ea      	bhi.n	8025764 <__gethex+0x1d8>
 802578e:	492b      	ldr	r1, [pc, #172]	@ (802583c <__gethex+0x2b0>)
 8025790:	9303      	str	r3, [sp, #12]
 8025792:	2201      	movs	r2, #1
 8025794:	4630      	mov	r0, r6
 8025796:	f7fe fe96 	bl	80244c6 <strncmp>
 802579a:	9b03      	ldr	r3, [sp, #12]
 802579c:	2800      	cmp	r0, #0
 802579e:	d1e1      	bne.n	8025764 <__gethex+0x1d8>
 80257a0:	e7a2      	b.n	80256e8 <__gethex+0x15c>
 80257a2:	1ea9      	subs	r1, r5, #2
 80257a4:	4620      	mov	r0, r4
 80257a6:	f000 fe9a 	bl	80264de <__any_on>
 80257aa:	2800      	cmp	r0, #0
 80257ac:	d0c2      	beq.n	8025734 <__gethex+0x1a8>
 80257ae:	f04f 0903 	mov.w	r9, #3
 80257b2:	e7c1      	b.n	8025738 <__gethex+0x1ac>
 80257b4:	da09      	bge.n	80257ca <__gethex+0x23e>
 80257b6:	1b75      	subs	r5, r6, r5
 80257b8:	4621      	mov	r1, r4
 80257ba:	9801      	ldr	r0, [sp, #4]
 80257bc:	462a      	mov	r2, r5
 80257be:	f000 fc55 	bl	802606c <__lshift>
 80257c2:	1b7f      	subs	r7, r7, r5
 80257c4:	4604      	mov	r4, r0
 80257c6:	f100 0a14 	add.w	sl, r0, #20
 80257ca:	f04f 0900 	mov.w	r9, #0
 80257ce:	e7b8      	b.n	8025742 <__gethex+0x1b6>
 80257d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80257d4:	42bd      	cmp	r5, r7
 80257d6:	dd6f      	ble.n	80258b8 <__gethex+0x32c>
 80257d8:	1bed      	subs	r5, r5, r7
 80257da:	42ae      	cmp	r6, r5
 80257dc:	dc34      	bgt.n	8025848 <__gethex+0x2bc>
 80257de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80257e2:	2b02      	cmp	r3, #2
 80257e4:	d022      	beq.n	802582c <__gethex+0x2a0>
 80257e6:	2b03      	cmp	r3, #3
 80257e8:	d024      	beq.n	8025834 <__gethex+0x2a8>
 80257ea:	2b01      	cmp	r3, #1
 80257ec:	d115      	bne.n	802581a <__gethex+0x28e>
 80257ee:	42ae      	cmp	r6, r5
 80257f0:	d113      	bne.n	802581a <__gethex+0x28e>
 80257f2:	2e01      	cmp	r6, #1
 80257f4:	d10b      	bne.n	802580e <__gethex+0x282>
 80257f6:	9a02      	ldr	r2, [sp, #8]
 80257f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80257fc:	6013      	str	r3, [r2, #0]
 80257fe:	2301      	movs	r3, #1
 8025800:	6123      	str	r3, [r4, #16]
 8025802:	f8ca 3000 	str.w	r3, [sl]
 8025806:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025808:	2562      	movs	r5, #98	@ 0x62
 802580a:	601c      	str	r4, [r3, #0]
 802580c:	e73a      	b.n	8025684 <__gethex+0xf8>
 802580e:	1e71      	subs	r1, r6, #1
 8025810:	4620      	mov	r0, r4
 8025812:	f000 fe64 	bl	80264de <__any_on>
 8025816:	2800      	cmp	r0, #0
 8025818:	d1ed      	bne.n	80257f6 <__gethex+0x26a>
 802581a:	9801      	ldr	r0, [sp, #4]
 802581c:	4621      	mov	r1, r4
 802581e:	f000 fa0d 	bl	8025c3c <_Bfree>
 8025822:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025824:	2300      	movs	r3, #0
 8025826:	6013      	str	r3, [r2, #0]
 8025828:	2550      	movs	r5, #80	@ 0x50
 802582a:	e72b      	b.n	8025684 <__gethex+0xf8>
 802582c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802582e:	2b00      	cmp	r3, #0
 8025830:	d1f3      	bne.n	802581a <__gethex+0x28e>
 8025832:	e7e0      	b.n	80257f6 <__gethex+0x26a>
 8025834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025836:	2b00      	cmp	r3, #0
 8025838:	d1dd      	bne.n	80257f6 <__gethex+0x26a>
 802583a:	e7ee      	b.n	802581a <__gethex+0x28e>
 802583c:	08030a50 	.word	0x08030a50
 8025840:	08030cc0 	.word	0x08030cc0
 8025844:	08030cd1 	.word	0x08030cd1
 8025848:	1e6f      	subs	r7, r5, #1
 802584a:	f1b9 0f00 	cmp.w	r9, #0
 802584e:	d130      	bne.n	80258b2 <__gethex+0x326>
 8025850:	b127      	cbz	r7, 802585c <__gethex+0x2d0>
 8025852:	4639      	mov	r1, r7
 8025854:	4620      	mov	r0, r4
 8025856:	f000 fe42 	bl	80264de <__any_on>
 802585a:	4681      	mov	r9, r0
 802585c:	117a      	asrs	r2, r7, #5
 802585e:	2301      	movs	r3, #1
 8025860:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8025864:	f007 071f 	and.w	r7, r7, #31
 8025868:	40bb      	lsls	r3, r7
 802586a:	4213      	tst	r3, r2
 802586c:	4629      	mov	r1, r5
 802586e:	4620      	mov	r0, r4
 8025870:	bf18      	it	ne
 8025872:	f049 0902 	orrne.w	r9, r9, #2
 8025876:	f7ff fe21 	bl	80254bc <rshift>
 802587a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 802587e:	1b76      	subs	r6, r6, r5
 8025880:	2502      	movs	r5, #2
 8025882:	f1b9 0f00 	cmp.w	r9, #0
 8025886:	d047      	beq.n	8025918 <__gethex+0x38c>
 8025888:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802588c:	2b02      	cmp	r3, #2
 802588e:	d015      	beq.n	80258bc <__gethex+0x330>
 8025890:	2b03      	cmp	r3, #3
 8025892:	d017      	beq.n	80258c4 <__gethex+0x338>
 8025894:	2b01      	cmp	r3, #1
 8025896:	d109      	bne.n	80258ac <__gethex+0x320>
 8025898:	f019 0f02 	tst.w	r9, #2
 802589c:	d006      	beq.n	80258ac <__gethex+0x320>
 802589e:	f8da 3000 	ldr.w	r3, [sl]
 80258a2:	ea49 0903 	orr.w	r9, r9, r3
 80258a6:	f019 0f01 	tst.w	r9, #1
 80258aa:	d10e      	bne.n	80258ca <__gethex+0x33e>
 80258ac:	f045 0510 	orr.w	r5, r5, #16
 80258b0:	e032      	b.n	8025918 <__gethex+0x38c>
 80258b2:	f04f 0901 	mov.w	r9, #1
 80258b6:	e7d1      	b.n	802585c <__gethex+0x2d0>
 80258b8:	2501      	movs	r5, #1
 80258ba:	e7e2      	b.n	8025882 <__gethex+0x2f6>
 80258bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80258be:	f1c3 0301 	rsb	r3, r3, #1
 80258c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80258c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80258c6:	2b00      	cmp	r3, #0
 80258c8:	d0f0      	beq.n	80258ac <__gethex+0x320>
 80258ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80258ce:	f104 0314 	add.w	r3, r4, #20
 80258d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80258d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80258da:	f04f 0c00 	mov.w	ip, #0
 80258de:	4618      	mov	r0, r3
 80258e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80258e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80258e8:	d01b      	beq.n	8025922 <__gethex+0x396>
 80258ea:	3201      	adds	r2, #1
 80258ec:	6002      	str	r2, [r0, #0]
 80258ee:	2d02      	cmp	r5, #2
 80258f0:	f104 0314 	add.w	r3, r4, #20
 80258f4:	d13c      	bne.n	8025970 <__gethex+0x3e4>
 80258f6:	f8d8 2000 	ldr.w	r2, [r8]
 80258fa:	3a01      	subs	r2, #1
 80258fc:	42b2      	cmp	r2, r6
 80258fe:	d109      	bne.n	8025914 <__gethex+0x388>
 8025900:	1171      	asrs	r1, r6, #5
 8025902:	2201      	movs	r2, #1
 8025904:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8025908:	f006 061f 	and.w	r6, r6, #31
 802590c:	fa02 f606 	lsl.w	r6, r2, r6
 8025910:	421e      	tst	r6, r3
 8025912:	d13a      	bne.n	802598a <__gethex+0x3fe>
 8025914:	f045 0520 	orr.w	r5, r5, #32
 8025918:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802591a:	601c      	str	r4, [r3, #0]
 802591c:	9b02      	ldr	r3, [sp, #8]
 802591e:	601f      	str	r7, [r3, #0]
 8025920:	e6b0      	b.n	8025684 <__gethex+0xf8>
 8025922:	4299      	cmp	r1, r3
 8025924:	f843 cc04 	str.w	ip, [r3, #-4]
 8025928:	d8d9      	bhi.n	80258de <__gethex+0x352>
 802592a:	68a3      	ldr	r3, [r4, #8]
 802592c:	459b      	cmp	fp, r3
 802592e:	db17      	blt.n	8025960 <__gethex+0x3d4>
 8025930:	6861      	ldr	r1, [r4, #4]
 8025932:	9801      	ldr	r0, [sp, #4]
 8025934:	3101      	adds	r1, #1
 8025936:	f000 f941 	bl	8025bbc <_Balloc>
 802593a:	4681      	mov	r9, r0
 802593c:	b918      	cbnz	r0, 8025946 <__gethex+0x3ba>
 802593e:	4b1a      	ldr	r3, [pc, #104]	@ (80259a8 <__gethex+0x41c>)
 8025940:	4602      	mov	r2, r0
 8025942:	2184      	movs	r1, #132	@ 0x84
 8025944:	e6c5      	b.n	80256d2 <__gethex+0x146>
 8025946:	6922      	ldr	r2, [r4, #16]
 8025948:	3202      	adds	r2, #2
 802594a:	f104 010c 	add.w	r1, r4, #12
 802594e:	0092      	lsls	r2, r2, #2
 8025950:	300c      	adds	r0, #12
 8025952:	f7fe fef4 	bl	802473e <memcpy>
 8025956:	4621      	mov	r1, r4
 8025958:	9801      	ldr	r0, [sp, #4]
 802595a:	f000 f96f 	bl	8025c3c <_Bfree>
 802595e:	464c      	mov	r4, r9
 8025960:	6923      	ldr	r3, [r4, #16]
 8025962:	1c5a      	adds	r2, r3, #1
 8025964:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8025968:	6122      	str	r2, [r4, #16]
 802596a:	2201      	movs	r2, #1
 802596c:	615a      	str	r2, [r3, #20]
 802596e:	e7be      	b.n	80258ee <__gethex+0x362>
 8025970:	6922      	ldr	r2, [r4, #16]
 8025972:	455a      	cmp	r2, fp
 8025974:	dd0b      	ble.n	802598e <__gethex+0x402>
 8025976:	2101      	movs	r1, #1
 8025978:	4620      	mov	r0, r4
 802597a:	f7ff fd9f 	bl	80254bc <rshift>
 802597e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8025982:	3701      	adds	r7, #1
 8025984:	42bb      	cmp	r3, r7
 8025986:	f6ff aee0 	blt.w	802574a <__gethex+0x1be>
 802598a:	2501      	movs	r5, #1
 802598c:	e7c2      	b.n	8025914 <__gethex+0x388>
 802598e:	f016 061f 	ands.w	r6, r6, #31
 8025992:	d0fa      	beq.n	802598a <__gethex+0x3fe>
 8025994:	4453      	add	r3, sl
 8025996:	f1c6 0620 	rsb	r6, r6, #32
 802599a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802599e:	f000 f9ff 	bl	8025da0 <__hi0bits>
 80259a2:	42b0      	cmp	r0, r6
 80259a4:	dbe7      	blt.n	8025976 <__gethex+0x3ea>
 80259a6:	e7f0      	b.n	802598a <__gethex+0x3fe>
 80259a8:	08030cc0 	.word	0x08030cc0

080259ac <L_shift>:
 80259ac:	f1c2 0208 	rsb	r2, r2, #8
 80259b0:	0092      	lsls	r2, r2, #2
 80259b2:	b570      	push	{r4, r5, r6, lr}
 80259b4:	f1c2 0620 	rsb	r6, r2, #32
 80259b8:	6843      	ldr	r3, [r0, #4]
 80259ba:	6804      	ldr	r4, [r0, #0]
 80259bc:	fa03 f506 	lsl.w	r5, r3, r6
 80259c0:	432c      	orrs	r4, r5
 80259c2:	40d3      	lsrs	r3, r2
 80259c4:	6004      	str	r4, [r0, #0]
 80259c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80259ca:	4288      	cmp	r0, r1
 80259cc:	d3f4      	bcc.n	80259b8 <L_shift+0xc>
 80259ce:	bd70      	pop	{r4, r5, r6, pc}

080259d0 <__match>:
 80259d0:	b530      	push	{r4, r5, lr}
 80259d2:	6803      	ldr	r3, [r0, #0]
 80259d4:	3301      	adds	r3, #1
 80259d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80259da:	b914      	cbnz	r4, 80259e2 <__match+0x12>
 80259dc:	6003      	str	r3, [r0, #0]
 80259de:	2001      	movs	r0, #1
 80259e0:	bd30      	pop	{r4, r5, pc}
 80259e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80259e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80259ea:	2d19      	cmp	r5, #25
 80259ec:	bf98      	it	ls
 80259ee:	3220      	addls	r2, #32
 80259f0:	42a2      	cmp	r2, r4
 80259f2:	d0f0      	beq.n	80259d6 <__match+0x6>
 80259f4:	2000      	movs	r0, #0
 80259f6:	e7f3      	b.n	80259e0 <__match+0x10>

080259f8 <__hexnan>:
 80259f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259fc:	680b      	ldr	r3, [r1, #0]
 80259fe:	6801      	ldr	r1, [r0, #0]
 8025a00:	115e      	asrs	r6, r3, #5
 8025a02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8025a06:	f013 031f 	ands.w	r3, r3, #31
 8025a0a:	b087      	sub	sp, #28
 8025a0c:	bf18      	it	ne
 8025a0e:	3604      	addne	r6, #4
 8025a10:	2500      	movs	r5, #0
 8025a12:	1f37      	subs	r7, r6, #4
 8025a14:	4682      	mov	sl, r0
 8025a16:	4690      	mov	r8, r2
 8025a18:	9301      	str	r3, [sp, #4]
 8025a1a:	f846 5c04 	str.w	r5, [r6, #-4]
 8025a1e:	46b9      	mov	r9, r7
 8025a20:	463c      	mov	r4, r7
 8025a22:	9502      	str	r5, [sp, #8]
 8025a24:	46ab      	mov	fp, r5
 8025a26:	784a      	ldrb	r2, [r1, #1]
 8025a28:	1c4b      	adds	r3, r1, #1
 8025a2a:	9303      	str	r3, [sp, #12]
 8025a2c:	b342      	cbz	r2, 8025a80 <__hexnan+0x88>
 8025a2e:	4610      	mov	r0, r2
 8025a30:	9105      	str	r1, [sp, #20]
 8025a32:	9204      	str	r2, [sp, #16]
 8025a34:	f7ff fd94 	bl	8025560 <__hexdig_fun>
 8025a38:	2800      	cmp	r0, #0
 8025a3a:	d151      	bne.n	8025ae0 <__hexnan+0xe8>
 8025a3c:	9a04      	ldr	r2, [sp, #16]
 8025a3e:	9905      	ldr	r1, [sp, #20]
 8025a40:	2a20      	cmp	r2, #32
 8025a42:	d818      	bhi.n	8025a76 <__hexnan+0x7e>
 8025a44:	9b02      	ldr	r3, [sp, #8]
 8025a46:	459b      	cmp	fp, r3
 8025a48:	dd13      	ble.n	8025a72 <__hexnan+0x7a>
 8025a4a:	454c      	cmp	r4, r9
 8025a4c:	d206      	bcs.n	8025a5c <__hexnan+0x64>
 8025a4e:	2d07      	cmp	r5, #7
 8025a50:	dc04      	bgt.n	8025a5c <__hexnan+0x64>
 8025a52:	462a      	mov	r2, r5
 8025a54:	4649      	mov	r1, r9
 8025a56:	4620      	mov	r0, r4
 8025a58:	f7ff ffa8 	bl	80259ac <L_shift>
 8025a5c:	4544      	cmp	r4, r8
 8025a5e:	d952      	bls.n	8025b06 <__hexnan+0x10e>
 8025a60:	2300      	movs	r3, #0
 8025a62:	f1a4 0904 	sub.w	r9, r4, #4
 8025a66:	f844 3c04 	str.w	r3, [r4, #-4]
 8025a6a:	f8cd b008 	str.w	fp, [sp, #8]
 8025a6e:	464c      	mov	r4, r9
 8025a70:	461d      	mov	r5, r3
 8025a72:	9903      	ldr	r1, [sp, #12]
 8025a74:	e7d7      	b.n	8025a26 <__hexnan+0x2e>
 8025a76:	2a29      	cmp	r2, #41	@ 0x29
 8025a78:	d157      	bne.n	8025b2a <__hexnan+0x132>
 8025a7a:	3102      	adds	r1, #2
 8025a7c:	f8ca 1000 	str.w	r1, [sl]
 8025a80:	f1bb 0f00 	cmp.w	fp, #0
 8025a84:	d051      	beq.n	8025b2a <__hexnan+0x132>
 8025a86:	454c      	cmp	r4, r9
 8025a88:	d206      	bcs.n	8025a98 <__hexnan+0xa0>
 8025a8a:	2d07      	cmp	r5, #7
 8025a8c:	dc04      	bgt.n	8025a98 <__hexnan+0xa0>
 8025a8e:	462a      	mov	r2, r5
 8025a90:	4649      	mov	r1, r9
 8025a92:	4620      	mov	r0, r4
 8025a94:	f7ff ff8a 	bl	80259ac <L_shift>
 8025a98:	4544      	cmp	r4, r8
 8025a9a:	d936      	bls.n	8025b0a <__hexnan+0x112>
 8025a9c:	f1a8 0204 	sub.w	r2, r8, #4
 8025aa0:	4623      	mov	r3, r4
 8025aa2:	f853 1b04 	ldr.w	r1, [r3], #4
 8025aa6:	f842 1f04 	str.w	r1, [r2, #4]!
 8025aaa:	429f      	cmp	r7, r3
 8025aac:	d2f9      	bcs.n	8025aa2 <__hexnan+0xaa>
 8025aae:	1b3b      	subs	r3, r7, r4
 8025ab0:	f023 0303 	bic.w	r3, r3, #3
 8025ab4:	3304      	adds	r3, #4
 8025ab6:	3401      	adds	r4, #1
 8025ab8:	3e03      	subs	r6, #3
 8025aba:	42b4      	cmp	r4, r6
 8025abc:	bf88      	it	hi
 8025abe:	2304      	movhi	r3, #4
 8025ac0:	4443      	add	r3, r8
 8025ac2:	2200      	movs	r2, #0
 8025ac4:	f843 2b04 	str.w	r2, [r3], #4
 8025ac8:	429f      	cmp	r7, r3
 8025aca:	d2fb      	bcs.n	8025ac4 <__hexnan+0xcc>
 8025acc:	683b      	ldr	r3, [r7, #0]
 8025ace:	b91b      	cbnz	r3, 8025ad8 <__hexnan+0xe0>
 8025ad0:	4547      	cmp	r7, r8
 8025ad2:	d128      	bne.n	8025b26 <__hexnan+0x12e>
 8025ad4:	2301      	movs	r3, #1
 8025ad6:	603b      	str	r3, [r7, #0]
 8025ad8:	2005      	movs	r0, #5
 8025ada:	b007      	add	sp, #28
 8025adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ae0:	3501      	adds	r5, #1
 8025ae2:	2d08      	cmp	r5, #8
 8025ae4:	f10b 0b01 	add.w	fp, fp, #1
 8025ae8:	dd06      	ble.n	8025af8 <__hexnan+0x100>
 8025aea:	4544      	cmp	r4, r8
 8025aec:	d9c1      	bls.n	8025a72 <__hexnan+0x7a>
 8025aee:	2300      	movs	r3, #0
 8025af0:	f844 3c04 	str.w	r3, [r4, #-4]
 8025af4:	2501      	movs	r5, #1
 8025af6:	3c04      	subs	r4, #4
 8025af8:	6822      	ldr	r2, [r4, #0]
 8025afa:	f000 000f 	and.w	r0, r0, #15
 8025afe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8025b02:	6020      	str	r0, [r4, #0]
 8025b04:	e7b5      	b.n	8025a72 <__hexnan+0x7a>
 8025b06:	2508      	movs	r5, #8
 8025b08:	e7b3      	b.n	8025a72 <__hexnan+0x7a>
 8025b0a:	9b01      	ldr	r3, [sp, #4]
 8025b0c:	2b00      	cmp	r3, #0
 8025b0e:	d0dd      	beq.n	8025acc <__hexnan+0xd4>
 8025b10:	f1c3 0320 	rsb	r3, r3, #32
 8025b14:	f04f 32ff 	mov.w	r2, #4294967295
 8025b18:	40da      	lsrs	r2, r3
 8025b1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8025b1e:	4013      	ands	r3, r2
 8025b20:	f846 3c04 	str.w	r3, [r6, #-4]
 8025b24:	e7d2      	b.n	8025acc <__hexnan+0xd4>
 8025b26:	3f04      	subs	r7, #4
 8025b28:	e7d0      	b.n	8025acc <__hexnan+0xd4>
 8025b2a:	2004      	movs	r0, #4
 8025b2c:	e7d5      	b.n	8025ada <__hexnan+0xe2>
	...

08025b30 <_mallinfo_r>:
 8025b30:	b570      	push	{r4, r5, r6, lr}
 8025b32:	4c16      	ldr	r4, [pc, #88]	@ (8025b8c <_mallinfo_r+0x5c>)
 8025b34:	4605      	mov	r5, r0
 8025b36:	4608      	mov	r0, r1
 8025b38:	460e      	mov	r6, r1
 8025b3a:	f7fc fc89 	bl	8022450 <__malloc_lock>
 8025b3e:	6823      	ldr	r3, [r4, #0]
 8025b40:	b14b      	cbz	r3, 8025b56 <_mallinfo_r+0x26>
 8025b42:	2100      	movs	r1, #0
 8025b44:	4630      	mov	r0, r6
 8025b46:	f7fe fda3 	bl	8024690 <_sbrk_r>
 8025b4a:	1c42      	adds	r2, r0, #1
 8025b4c:	bf18      	it	ne
 8025b4e:	6822      	ldrne	r2, [r4, #0]
 8025b50:	4603      	mov	r3, r0
 8025b52:	bf18      	it	ne
 8025b54:	1a83      	subne	r3, r0, r2
 8025b56:	4a0e      	ldr	r2, [pc, #56]	@ (8025b90 <_mallinfo_r+0x60>)
 8025b58:	6811      	ldr	r1, [r2, #0]
 8025b5a:	2200      	movs	r2, #0
 8025b5c:	b991      	cbnz	r1, 8025b84 <_mallinfo_r+0x54>
 8025b5e:	4c0d      	ldr	r4, [pc, #52]	@ (8025b94 <_mallinfo_r+0x64>)
 8025b60:	4630      	mov	r0, r6
 8025b62:	6023      	str	r3, [r4, #0]
 8025b64:	1a9b      	subs	r3, r3, r2
 8025b66:	6222      	str	r2, [r4, #32]
 8025b68:	61e3      	str	r3, [r4, #28]
 8025b6a:	f7fc fc77 	bl	802245c <__malloc_unlock>
 8025b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025b70:	462e      	mov	r6, r5
 8025b72:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8025b74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025b76:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8025b78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025b7c:	e886 0003 	stmia.w	r6, {r0, r1}
 8025b80:	4628      	mov	r0, r5
 8025b82:	bd70      	pop	{r4, r5, r6, pc}
 8025b84:	6808      	ldr	r0, [r1, #0]
 8025b86:	6849      	ldr	r1, [r1, #4]
 8025b88:	4402      	add	r2, r0
 8025b8a:	e7e7      	b.n	8025b5c <_mallinfo_r+0x2c>
 8025b8c:	200027e8 	.word	0x200027e8
 8025b90:	200027ec 	.word	0x200027ec
 8025b94:	20002934 	.word	0x20002934

08025b98 <__ascii_mbtowc>:
 8025b98:	b082      	sub	sp, #8
 8025b9a:	b901      	cbnz	r1, 8025b9e <__ascii_mbtowc+0x6>
 8025b9c:	a901      	add	r1, sp, #4
 8025b9e:	b142      	cbz	r2, 8025bb2 <__ascii_mbtowc+0x1a>
 8025ba0:	b14b      	cbz	r3, 8025bb6 <__ascii_mbtowc+0x1e>
 8025ba2:	7813      	ldrb	r3, [r2, #0]
 8025ba4:	600b      	str	r3, [r1, #0]
 8025ba6:	7812      	ldrb	r2, [r2, #0]
 8025ba8:	1e10      	subs	r0, r2, #0
 8025baa:	bf18      	it	ne
 8025bac:	2001      	movne	r0, #1
 8025bae:	b002      	add	sp, #8
 8025bb0:	4770      	bx	lr
 8025bb2:	4610      	mov	r0, r2
 8025bb4:	e7fb      	b.n	8025bae <__ascii_mbtowc+0x16>
 8025bb6:	f06f 0001 	mvn.w	r0, #1
 8025bba:	e7f8      	b.n	8025bae <__ascii_mbtowc+0x16>

08025bbc <_Balloc>:
 8025bbc:	b570      	push	{r4, r5, r6, lr}
 8025bbe:	69c6      	ldr	r6, [r0, #28]
 8025bc0:	4604      	mov	r4, r0
 8025bc2:	460d      	mov	r5, r1
 8025bc4:	b976      	cbnz	r6, 8025be4 <_Balloc+0x28>
 8025bc6:	2010      	movs	r0, #16
 8025bc8:	f7fc fb90 	bl	80222ec <malloc>
 8025bcc:	4602      	mov	r2, r0
 8025bce:	61e0      	str	r0, [r4, #28]
 8025bd0:	b920      	cbnz	r0, 8025bdc <_Balloc+0x20>
 8025bd2:	4b18      	ldr	r3, [pc, #96]	@ (8025c34 <_Balloc+0x78>)
 8025bd4:	4818      	ldr	r0, [pc, #96]	@ (8025c38 <_Balloc+0x7c>)
 8025bd6:	216b      	movs	r1, #107	@ 0x6b
 8025bd8:	f7fc fb4e 	bl	8022278 <__assert_func>
 8025bdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025be0:	6006      	str	r6, [r0, #0]
 8025be2:	60c6      	str	r6, [r0, #12]
 8025be4:	69e6      	ldr	r6, [r4, #28]
 8025be6:	68f3      	ldr	r3, [r6, #12]
 8025be8:	b183      	cbz	r3, 8025c0c <_Balloc+0x50>
 8025bea:	69e3      	ldr	r3, [r4, #28]
 8025bec:	68db      	ldr	r3, [r3, #12]
 8025bee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8025bf2:	b9b8      	cbnz	r0, 8025c24 <_Balloc+0x68>
 8025bf4:	2101      	movs	r1, #1
 8025bf6:	fa01 f605 	lsl.w	r6, r1, r5
 8025bfa:	1d72      	adds	r2, r6, #5
 8025bfc:	0092      	lsls	r2, r2, #2
 8025bfe:	4620      	mov	r0, r4
 8025c00:	f7fc fb60 	bl	80222c4 <_calloc_r>
 8025c04:	b160      	cbz	r0, 8025c20 <_Balloc+0x64>
 8025c06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8025c0a:	e00e      	b.n	8025c2a <_Balloc+0x6e>
 8025c0c:	2221      	movs	r2, #33	@ 0x21
 8025c0e:	2104      	movs	r1, #4
 8025c10:	4620      	mov	r0, r4
 8025c12:	f7fc fb57 	bl	80222c4 <_calloc_r>
 8025c16:	69e3      	ldr	r3, [r4, #28]
 8025c18:	60f0      	str	r0, [r6, #12]
 8025c1a:	68db      	ldr	r3, [r3, #12]
 8025c1c:	2b00      	cmp	r3, #0
 8025c1e:	d1e4      	bne.n	8025bea <_Balloc+0x2e>
 8025c20:	2000      	movs	r0, #0
 8025c22:	bd70      	pop	{r4, r5, r6, pc}
 8025c24:	6802      	ldr	r2, [r0, #0]
 8025c26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8025c2a:	2300      	movs	r3, #0
 8025c2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8025c30:	e7f7      	b.n	8025c22 <_Balloc+0x66>
 8025c32:	bf00      	nop
 8025c34:	08030be2 	.word	0x08030be2
 8025c38:	08030d31 	.word	0x08030d31

08025c3c <_Bfree>:
 8025c3c:	b570      	push	{r4, r5, r6, lr}
 8025c3e:	69c6      	ldr	r6, [r0, #28]
 8025c40:	4605      	mov	r5, r0
 8025c42:	460c      	mov	r4, r1
 8025c44:	b976      	cbnz	r6, 8025c64 <_Bfree+0x28>
 8025c46:	2010      	movs	r0, #16
 8025c48:	f7fc fb50 	bl	80222ec <malloc>
 8025c4c:	4602      	mov	r2, r0
 8025c4e:	61e8      	str	r0, [r5, #28]
 8025c50:	b920      	cbnz	r0, 8025c5c <_Bfree+0x20>
 8025c52:	4b09      	ldr	r3, [pc, #36]	@ (8025c78 <_Bfree+0x3c>)
 8025c54:	4809      	ldr	r0, [pc, #36]	@ (8025c7c <_Bfree+0x40>)
 8025c56:	218f      	movs	r1, #143	@ 0x8f
 8025c58:	f7fc fb0e 	bl	8022278 <__assert_func>
 8025c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025c60:	6006      	str	r6, [r0, #0]
 8025c62:	60c6      	str	r6, [r0, #12]
 8025c64:	b13c      	cbz	r4, 8025c76 <_Bfree+0x3a>
 8025c66:	69eb      	ldr	r3, [r5, #28]
 8025c68:	6862      	ldr	r2, [r4, #4]
 8025c6a:	68db      	ldr	r3, [r3, #12]
 8025c6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025c70:	6021      	str	r1, [r4, #0]
 8025c72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8025c76:	bd70      	pop	{r4, r5, r6, pc}
 8025c78:	08030be2 	.word	0x08030be2
 8025c7c:	08030d31 	.word	0x08030d31

08025c80 <__multadd>:
 8025c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025c84:	690d      	ldr	r5, [r1, #16]
 8025c86:	4607      	mov	r7, r0
 8025c88:	460c      	mov	r4, r1
 8025c8a:	461e      	mov	r6, r3
 8025c8c:	f101 0c14 	add.w	ip, r1, #20
 8025c90:	2000      	movs	r0, #0
 8025c92:	f8dc 3000 	ldr.w	r3, [ip]
 8025c96:	b299      	uxth	r1, r3
 8025c98:	fb02 6101 	mla	r1, r2, r1, r6
 8025c9c:	0c1e      	lsrs	r6, r3, #16
 8025c9e:	0c0b      	lsrs	r3, r1, #16
 8025ca0:	fb02 3306 	mla	r3, r2, r6, r3
 8025ca4:	b289      	uxth	r1, r1
 8025ca6:	3001      	adds	r0, #1
 8025ca8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025cac:	4285      	cmp	r5, r0
 8025cae:	f84c 1b04 	str.w	r1, [ip], #4
 8025cb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8025cb6:	dcec      	bgt.n	8025c92 <__multadd+0x12>
 8025cb8:	b30e      	cbz	r6, 8025cfe <__multadd+0x7e>
 8025cba:	68a3      	ldr	r3, [r4, #8]
 8025cbc:	42ab      	cmp	r3, r5
 8025cbe:	dc19      	bgt.n	8025cf4 <__multadd+0x74>
 8025cc0:	6861      	ldr	r1, [r4, #4]
 8025cc2:	4638      	mov	r0, r7
 8025cc4:	3101      	adds	r1, #1
 8025cc6:	f7ff ff79 	bl	8025bbc <_Balloc>
 8025cca:	4680      	mov	r8, r0
 8025ccc:	b928      	cbnz	r0, 8025cda <__multadd+0x5a>
 8025cce:	4602      	mov	r2, r0
 8025cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8025d04 <__multadd+0x84>)
 8025cd2:	480d      	ldr	r0, [pc, #52]	@ (8025d08 <__multadd+0x88>)
 8025cd4:	21ba      	movs	r1, #186	@ 0xba
 8025cd6:	f7fc facf 	bl	8022278 <__assert_func>
 8025cda:	6922      	ldr	r2, [r4, #16]
 8025cdc:	3202      	adds	r2, #2
 8025cde:	f104 010c 	add.w	r1, r4, #12
 8025ce2:	0092      	lsls	r2, r2, #2
 8025ce4:	300c      	adds	r0, #12
 8025ce6:	f7fe fd2a 	bl	802473e <memcpy>
 8025cea:	4621      	mov	r1, r4
 8025cec:	4638      	mov	r0, r7
 8025cee:	f7ff ffa5 	bl	8025c3c <_Bfree>
 8025cf2:	4644      	mov	r4, r8
 8025cf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8025cf8:	3501      	adds	r5, #1
 8025cfa:	615e      	str	r6, [r3, #20]
 8025cfc:	6125      	str	r5, [r4, #16]
 8025cfe:	4620      	mov	r0, r4
 8025d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025d04:	08030cc0 	.word	0x08030cc0
 8025d08:	08030d31 	.word	0x08030d31

08025d0c <__s2b>:
 8025d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025d10:	460c      	mov	r4, r1
 8025d12:	4615      	mov	r5, r2
 8025d14:	461f      	mov	r7, r3
 8025d16:	2209      	movs	r2, #9
 8025d18:	3308      	adds	r3, #8
 8025d1a:	4606      	mov	r6, r0
 8025d1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8025d20:	2100      	movs	r1, #0
 8025d22:	2201      	movs	r2, #1
 8025d24:	429a      	cmp	r2, r3
 8025d26:	db09      	blt.n	8025d3c <__s2b+0x30>
 8025d28:	4630      	mov	r0, r6
 8025d2a:	f7ff ff47 	bl	8025bbc <_Balloc>
 8025d2e:	b940      	cbnz	r0, 8025d42 <__s2b+0x36>
 8025d30:	4602      	mov	r2, r0
 8025d32:	4b19      	ldr	r3, [pc, #100]	@ (8025d98 <__s2b+0x8c>)
 8025d34:	4819      	ldr	r0, [pc, #100]	@ (8025d9c <__s2b+0x90>)
 8025d36:	21d3      	movs	r1, #211	@ 0xd3
 8025d38:	f7fc fa9e 	bl	8022278 <__assert_func>
 8025d3c:	0052      	lsls	r2, r2, #1
 8025d3e:	3101      	adds	r1, #1
 8025d40:	e7f0      	b.n	8025d24 <__s2b+0x18>
 8025d42:	9b08      	ldr	r3, [sp, #32]
 8025d44:	6143      	str	r3, [r0, #20]
 8025d46:	2d09      	cmp	r5, #9
 8025d48:	f04f 0301 	mov.w	r3, #1
 8025d4c:	6103      	str	r3, [r0, #16]
 8025d4e:	dd16      	ble.n	8025d7e <__s2b+0x72>
 8025d50:	f104 0909 	add.w	r9, r4, #9
 8025d54:	46c8      	mov	r8, r9
 8025d56:	442c      	add	r4, r5
 8025d58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8025d5c:	4601      	mov	r1, r0
 8025d5e:	3b30      	subs	r3, #48	@ 0x30
 8025d60:	220a      	movs	r2, #10
 8025d62:	4630      	mov	r0, r6
 8025d64:	f7ff ff8c 	bl	8025c80 <__multadd>
 8025d68:	45a0      	cmp	r8, r4
 8025d6a:	d1f5      	bne.n	8025d58 <__s2b+0x4c>
 8025d6c:	f1a5 0408 	sub.w	r4, r5, #8
 8025d70:	444c      	add	r4, r9
 8025d72:	1b2d      	subs	r5, r5, r4
 8025d74:	1963      	adds	r3, r4, r5
 8025d76:	42bb      	cmp	r3, r7
 8025d78:	db04      	blt.n	8025d84 <__s2b+0x78>
 8025d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025d7e:	340a      	adds	r4, #10
 8025d80:	2509      	movs	r5, #9
 8025d82:	e7f6      	b.n	8025d72 <__s2b+0x66>
 8025d84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8025d88:	4601      	mov	r1, r0
 8025d8a:	3b30      	subs	r3, #48	@ 0x30
 8025d8c:	220a      	movs	r2, #10
 8025d8e:	4630      	mov	r0, r6
 8025d90:	f7ff ff76 	bl	8025c80 <__multadd>
 8025d94:	e7ee      	b.n	8025d74 <__s2b+0x68>
 8025d96:	bf00      	nop
 8025d98:	08030cc0 	.word	0x08030cc0
 8025d9c:	08030d31 	.word	0x08030d31

08025da0 <__hi0bits>:
 8025da0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8025da4:	4603      	mov	r3, r0
 8025da6:	bf36      	itet	cc
 8025da8:	0403      	lslcc	r3, r0, #16
 8025daa:	2000      	movcs	r0, #0
 8025dac:	2010      	movcc	r0, #16
 8025dae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8025db2:	bf3c      	itt	cc
 8025db4:	021b      	lslcc	r3, r3, #8
 8025db6:	3008      	addcc	r0, #8
 8025db8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8025dbc:	bf3c      	itt	cc
 8025dbe:	011b      	lslcc	r3, r3, #4
 8025dc0:	3004      	addcc	r0, #4
 8025dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8025dc6:	bf3c      	itt	cc
 8025dc8:	009b      	lslcc	r3, r3, #2
 8025dca:	3002      	addcc	r0, #2
 8025dcc:	2b00      	cmp	r3, #0
 8025dce:	db05      	blt.n	8025ddc <__hi0bits+0x3c>
 8025dd0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8025dd4:	f100 0001 	add.w	r0, r0, #1
 8025dd8:	bf08      	it	eq
 8025dda:	2020      	moveq	r0, #32
 8025ddc:	4770      	bx	lr

08025dde <__lo0bits>:
 8025dde:	6803      	ldr	r3, [r0, #0]
 8025de0:	4602      	mov	r2, r0
 8025de2:	f013 0007 	ands.w	r0, r3, #7
 8025de6:	d00b      	beq.n	8025e00 <__lo0bits+0x22>
 8025de8:	07d9      	lsls	r1, r3, #31
 8025dea:	d421      	bmi.n	8025e30 <__lo0bits+0x52>
 8025dec:	0798      	lsls	r0, r3, #30
 8025dee:	bf49      	itett	mi
 8025df0:	085b      	lsrmi	r3, r3, #1
 8025df2:	089b      	lsrpl	r3, r3, #2
 8025df4:	2001      	movmi	r0, #1
 8025df6:	6013      	strmi	r3, [r2, #0]
 8025df8:	bf5c      	itt	pl
 8025dfa:	6013      	strpl	r3, [r2, #0]
 8025dfc:	2002      	movpl	r0, #2
 8025dfe:	4770      	bx	lr
 8025e00:	b299      	uxth	r1, r3
 8025e02:	b909      	cbnz	r1, 8025e08 <__lo0bits+0x2a>
 8025e04:	0c1b      	lsrs	r3, r3, #16
 8025e06:	2010      	movs	r0, #16
 8025e08:	b2d9      	uxtb	r1, r3
 8025e0a:	b909      	cbnz	r1, 8025e10 <__lo0bits+0x32>
 8025e0c:	3008      	adds	r0, #8
 8025e0e:	0a1b      	lsrs	r3, r3, #8
 8025e10:	0719      	lsls	r1, r3, #28
 8025e12:	bf04      	itt	eq
 8025e14:	091b      	lsreq	r3, r3, #4
 8025e16:	3004      	addeq	r0, #4
 8025e18:	0799      	lsls	r1, r3, #30
 8025e1a:	bf04      	itt	eq
 8025e1c:	089b      	lsreq	r3, r3, #2
 8025e1e:	3002      	addeq	r0, #2
 8025e20:	07d9      	lsls	r1, r3, #31
 8025e22:	d403      	bmi.n	8025e2c <__lo0bits+0x4e>
 8025e24:	085b      	lsrs	r3, r3, #1
 8025e26:	f100 0001 	add.w	r0, r0, #1
 8025e2a:	d003      	beq.n	8025e34 <__lo0bits+0x56>
 8025e2c:	6013      	str	r3, [r2, #0]
 8025e2e:	4770      	bx	lr
 8025e30:	2000      	movs	r0, #0
 8025e32:	4770      	bx	lr
 8025e34:	2020      	movs	r0, #32
 8025e36:	4770      	bx	lr

08025e38 <__i2b>:
 8025e38:	b510      	push	{r4, lr}
 8025e3a:	460c      	mov	r4, r1
 8025e3c:	2101      	movs	r1, #1
 8025e3e:	f7ff febd 	bl	8025bbc <_Balloc>
 8025e42:	4602      	mov	r2, r0
 8025e44:	b928      	cbnz	r0, 8025e52 <__i2b+0x1a>
 8025e46:	4b05      	ldr	r3, [pc, #20]	@ (8025e5c <__i2b+0x24>)
 8025e48:	4805      	ldr	r0, [pc, #20]	@ (8025e60 <__i2b+0x28>)
 8025e4a:	f240 1145 	movw	r1, #325	@ 0x145
 8025e4e:	f7fc fa13 	bl	8022278 <__assert_func>
 8025e52:	2301      	movs	r3, #1
 8025e54:	6144      	str	r4, [r0, #20]
 8025e56:	6103      	str	r3, [r0, #16]
 8025e58:	bd10      	pop	{r4, pc}
 8025e5a:	bf00      	nop
 8025e5c:	08030cc0 	.word	0x08030cc0
 8025e60:	08030d31 	.word	0x08030d31

08025e64 <__multiply>:
 8025e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e68:	4614      	mov	r4, r2
 8025e6a:	690a      	ldr	r2, [r1, #16]
 8025e6c:	6923      	ldr	r3, [r4, #16]
 8025e6e:	429a      	cmp	r2, r3
 8025e70:	bfa8      	it	ge
 8025e72:	4623      	movge	r3, r4
 8025e74:	460f      	mov	r7, r1
 8025e76:	bfa4      	itt	ge
 8025e78:	460c      	movge	r4, r1
 8025e7a:	461f      	movge	r7, r3
 8025e7c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8025e80:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8025e84:	68a3      	ldr	r3, [r4, #8]
 8025e86:	6861      	ldr	r1, [r4, #4]
 8025e88:	eb0a 0609 	add.w	r6, sl, r9
 8025e8c:	42b3      	cmp	r3, r6
 8025e8e:	b085      	sub	sp, #20
 8025e90:	bfb8      	it	lt
 8025e92:	3101      	addlt	r1, #1
 8025e94:	f7ff fe92 	bl	8025bbc <_Balloc>
 8025e98:	b930      	cbnz	r0, 8025ea8 <__multiply+0x44>
 8025e9a:	4602      	mov	r2, r0
 8025e9c:	4b44      	ldr	r3, [pc, #272]	@ (8025fb0 <__multiply+0x14c>)
 8025e9e:	4845      	ldr	r0, [pc, #276]	@ (8025fb4 <__multiply+0x150>)
 8025ea0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8025ea4:	f7fc f9e8 	bl	8022278 <__assert_func>
 8025ea8:	f100 0514 	add.w	r5, r0, #20
 8025eac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8025eb0:	462b      	mov	r3, r5
 8025eb2:	2200      	movs	r2, #0
 8025eb4:	4543      	cmp	r3, r8
 8025eb6:	d321      	bcc.n	8025efc <__multiply+0x98>
 8025eb8:	f107 0114 	add.w	r1, r7, #20
 8025ebc:	f104 0214 	add.w	r2, r4, #20
 8025ec0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8025ec4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8025ec8:	9302      	str	r3, [sp, #8]
 8025eca:	1b13      	subs	r3, r2, r4
 8025ecc:	3b15      	subs	r3, #21
 8025ece:	f023 0303 	bic.w	r3, r3, #3
 8025ed2:	3304      	adds	r3, #4
 8025ed4:	f104 0715 	add.w	r7, r4, #21
 8025ed8:	42ba      	cmp	r2, r7
 8025eda:	bf38      	it	cc
 8025edc:	2304      	movcc	r3, #4
 8025ede:	9301      	str	r3, [sp, #4]
 8025ee0:	9b02      	ldr	r3, [sp, #8]
 8025ee2:	9103      	str	r1, [sp, #12]
 8025ee4:	428b      	cmp	r3, r1
 8025ee6:	d80c      	bhi.n	8025f02 <__multiply+0x9e>
 8025ee8:	2e00      	cmp	r6, #0
 8025eea:	dd03      	ble.n	8025ef4 <__multiply+0x90>
 8025eec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8025ef0:	2b00      	cmp	r3, #0
 8025ef2:	d05b      	beq.n	8025fac <__multiply+0x148>
 8025ef4:	6106      	str	r6, [r0, #16]
 8025ef6:	b005      	add	sp, #20
 8025ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025efc:	f843 2b04 	str.w	r2, [r3], #4
 8025f00:	e7d8      	b.n	8025eb4 <__multiply+0x50>
 8025f02:	f8b1 a000 	ldrh.w	sl, [r1]
 8025f06:	f1ba 0f00 	cmp.w	sl, #0
 8025f0a:	d024      	beq.n	8025f56 <__multiply+0xf2>
 8025f0c:	f104 0e14 	add.w	lr, r4, #20
 8025f10:	46a9      	mov	r9, r5
 8025f12:	f04f 0c00 	mov.w	ip, #0
 8025f16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8025f1a:	f8d9 3000 	ldr.w	r3, [r9]
 8025f1e:	fa1f fb87 	uxth.w	fp, r7
 8025f22:	b29b      	uxth	r3, r3
 8025f24:	fb0a 330b 	mla	r3, sl, fp, r3
 8025f28:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8025f2c:	f8d9 7000 	ldr.w	r7, [r9]
 8025f30:	4463      	add	r3, ip
 8025f32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8025f36:	fb0a c70b 	mla	r7, sl, fp, ip
 8025f3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8025f3e:	b29b      	uxth	r3, r3
 8025f40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8025f44:	4572      	cmp	r2, lr
 8025f46:	f849 3b04 	str.w	r3, [r9], #4
 8025f4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8025f4e:	d8e2      	bhi.n	8025f16 <__multiply+0xb2>
 8025f50:	9b01      	ldr	r3, [sp, #4]
 8025f52:	f845 c003 	str.w	ip, [r5, r3]
 8025f56:	9b03      	ldr	r3, [sp, #12]
 8025f58:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8025f5c:	3104      	adds	r1, #4
 8025f5e:	f1b9 0f00 	cmp.w	r9, #0
 8025f62:	d021      	beq.n	8025fa8 <__multiply+0x144>
 8025f64:	682b      	ldr	r3, [r5, #0]
 8025f66:	f104 0c14 	add.w	ip, r4, #20
 8025f6a:	46ae      	mov	lr, r5
 8025f6c:	f04f 0a00 	mov.w	sl, #0
 8025f70:	f8bc b000 	ldrh.w	fp, [ip]
 8025f74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8025f78:	fb09 770b 	mla	r7, r9, fp, r7
 8025f7c:	4457      	add	r7, sl
 8025f7e:	b29b      	uxth	r3, r3
 8025f80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8025f84:	f84e 3b04 	str.w	r3, [lr], #4
 8025f88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8025f8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8025f90:	f8be 3000 	ldrh.w	r3, [lr]
 8025f94:	fb09 330a 	mla	r3, r9, sl, r3
 8025f98:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8025f9c:	4562      	cmp	r2, ip
 8025f9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8025fa2:	d8e5      	bhi.n	8025f70 <__multiply+0x10c>
 8025fa4:	9f01      	ldr	r7, [sp, #4]
 8025fa6:	51eb      	str	r3, [r5, r7]
 8025fa8:	3504      	adds	r5, #4
 8025faa:	e799      	b.n	8025ee0 <__multiply+0x7c>
 8025fac:	3e01      	subs	r6, #1
 8025fae:	e79b      	b.n	8025ee8 <__multiply+0x84>
 8025fb0:	08030cc0 	.word	0x08030cc0
 8025fb4:	08030d31 	.word	0x08030d31

08025fb8 <__pow5mult>:
 8025fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025fbc:	4615      	mov	r5, r2
 8025fbe:	f012 0203 	ands.w	r2, r2, #3
 8025fc2:	4607      	mov	r7, r0
 8025fc4:	460e      	mov	r6, r1
 8025fc6:	d007      	beq.n	8025fd8 <__pow5mult+0x20>
 8025fc8:	4c25      	ldr	r4, [pc, #148]	@ (8026060 <__pow5mult+0xa8>)
 8025fca:	3a01      	subs	r2, #1
 8025fcc:	2300      	movs	r3, #0
 8025fce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8025fd2:	f7ff fe55 	bl	8025c80 <__multadd>
 8025fd6:	4606      	mov	r6, r0
 8025fd8:	10ad      	asrs	r5, r5, #2
 8025fda:	d03d      	beq.n	8026058 <__pow5mult+0xa0>
 8025fdc:	69fc      	ldr	r4, [r7, #28]
 8025fde:	b97c      	cbnz	r4, 8026000 <__pow5mult+0x48>
 8025fe0:	2010      	movs	r0, #16
 8025fe2:	f7fc f983 	bl	80222ec <malloc>
 8025fe6:	4602      	mov	r2, r0
 8025fe8:	61f8      	str	r0, [r7, #28]
 8025fea:	b928      	cbnz	r0, 8025ff8 <__pow5mult+0x40>
 8025fec:	4b1d      	ldr	r3, [pc, #116]	@ (8026064 <__pow5mult+0xac>)
 8025fee:	481e      	ldr	r0, [pc, #120]	@ (8026068 <__pow5mult+0xb0>)
 8025ff0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8025ff4:	f7fc f940 	bl	8022278 <__assert_func>
 8025ff8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8025ffc:	6004      	str	r4, [r0, #0]
 8025ffe:	60c4      	str	r4, [r0, #12]
 8026000:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8026004:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026008:	b94c      	cbnz	r4, 802601e <__pow5mult+0x66>
 802600a:	f240 2171 	movw	r1, #625	@ 0x271
 802600e:	4638      	mov	r0, r7
 8026010:	f7ff ff12 	bl	8025e38 <__i2b>
 8026014:	2300      	movs	r3, #0
 8026016:	f8c8 0008 	str.w	r0, [r8, #8]
 802601a:	4604      	mov	r4, r0
 802601c:	6003      	str	r3, [r0, #0]
 802601e:	f04f 0900 	mov.w	r9, #0
 8026022:	07eb      	lsls	r3, r5, #31
 8026024:	d50a      	bpl.n	802603c <__pow5mult+0x84>
 8026026:	4631      	mov	r1, r6
 8026028:	4622      	mov	r2, r4
 802602a:	4638      	mov	r0, r7
 802602c:	f7ff ff1a 	bl	8025e64 <__multiply>
 8026030:	4631      	mov	r1, r6
 8026032:	4680      	mov	r8, r0
 8026034:	4638      	mov	r0, r7
 8026036:	f7ff fe01 	bl	8025c3c <_Bfree>
 802603a:	4646      	mov	r6, r8
 802603c:	106d      	asrs	r5, r5, #1
 802603e:	d00b      	beq.n	8026058 <__pow5mult+0xa0>
 8026040:	6820      	ldr	r0, [r4, #0]
 8026042:	b938      	cbnz	r0, 8026054 <__pow5mult+0x9c>
 8026044:	4622      	mov	r2, r4
 8026046:	4621      	mov	r1, r4
 8026048:	4638      	mov	r0, r7
 802604a:	f7ff ff0b 	bl	8025e64 <__multiply>
 802604e:	6020      	str	r0, [r4, #0]
 8026050:	f8c0 9000 	str.w	r9, [r0]
 8026054:	4604      	mov	r4, r0
 8026056:	e7e4      	b.n	8026022 <__pow5mult+0x6a>
 8026058:	4630      	mov	r0, r6
 802605a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802605e:	bf00      	nop
 8026060:	08030d8c 	.word	0x08030d8c
 8026064:	08030be2 	.word	0x08030be2
 8026068:	08030d31 	.word	0x08030d31

0802606c <__lshift>:
 802606c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026070:	460c      	mov	r4, r1
 8026072:	6849      	ldr	r1, [r1, #4]
 8026074:	6923      	ldr	r3, [r4, #16]
 8026076:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802607a:	68a3      	ldr	r3, [r4, #8]
 802607c:	4607      	mov	r7, r0
 802607e:	4691      	mov	r9, r2
 8026080:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026084:	f108 0601 	add.w	r6, r8, #1
 8026088:	42b3      	cmp	r3, r6
 802608a:	db0b      	blt.n	80260a4 <__lshift+0x38>
 802608c:	4638      	mov	r0, r7
 802608e:	f7ff fd95 	bl	8025bbc <_Balloc>
 8026092:	4605      	mov	r5, r0
 8026094:	b948      	cbnz	r0, 80260aa <__lshift+0x3e>
 8026096:	4602      	mov	r2, r0
 8026098:	4b28      	ldr	r3, [pc, #160]	@ (802613c <__lshift+0xd0>)
 802609a:	4829      	ldr	r0, [pc, #164]	@ (8026140 <__lshift+0xd4>)
 802609c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80260a0:	f7fc f8ea 	bl	8022278 <__assert_func>
 80260a4:	3101      	adds	r1, #1
 80260a6:	005b      	lsls	r3, r3, #1
 80260a8:	e7ee      	b.n	8026088 <__lshift+0x1c>
 80260aa:	2300      	movs	r3, #0
 80260ac:	f100 0114 	add.w	r1, r0, #20
 80260b0:	f100 0210 	add.w	r2, r0, #16
 80260b4:	4618      	mov	r0, r3
 80260b6:	4553      	cmp	r3, sl
 80260b8:	db33      	blt.n	8026122 <__lshift+0xb6>
 80260ba:	6920      	ldr	r0, [r4, #16]
 80260bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80260c0:	f104 0314 	add.w	r3, r4, #20
 80260c4:	f019 091f 	ands.w	r9, r9, #31
 80260c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80260cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80260d0:	d02b      	beq.n	802612a <__lshift+0xbe>
 80260d2:	f1c9 0e20 	rsb	lr, r9, #32
 80260d6:	468a      	mov	sl, r1
 80260d8:	2200      	movs	r2, #0
 80260da:	6818      	ldr	r0, [r3, #0]
 80260dc:	fa00 f009 	lsl.w	r0, r0, r9
 80260e0:	4310      	orrs	r0, r2
 80260e2:	f84a 0b04 	str.w	r0, [sl], #4
 80260e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80260ea:	459c      	cmp	ip, r3
 80260ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80260f0:	d8f3      	bhi.n	80260da <__lshift+0x6e>
 80260f2:	ebac 0304 	sub.w	r3, ip, r4
 80260f6:	3b15      	subs	r3, #21
 80260f8:	f023 0303 	bic.w	r3, r3, #3
 80260fc:	3304      	adds	r3, #4
 80260fe:	f104 0015 	add.w	r0, r4, #21
 8026102:	4584      	cmp	ip, r0
 8026104:	bf38      	it	cc
 8026106:	2304      	movcc	r3, #4
 8026108:	50ca      	str	r2, [r1, r3]
 802610a:	b10a      	cbz	r2, 8026110 <__lshift+0xa4>
 802610c:	f108 0602 	add.w	r6, r8, #2
 8026110:	3e01      	subs	r6, #1
 8026112:	4638      	mov	r0, r7
 8026114:	612e      	str	r6, [r5, #16]
 8026116:	4621      	mov	r1, r4
 8026118:	f7ff fd90 	bl	8025c3c <_Bfree>
 802611c:	4628      	mov	r0, r5
 802611e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026122:	f842 0f04 	str.w	r0, [r2, #4]!
 8026126:	3301      	adds	r3, #1
 8026128:	e7c5      	b.n	80260b6 <__lshift+0x4a>
 802612a:	3904      	subs	r1, #4
 802612c:	f853 2b04 	ldr.w	r2, [r3], #4
 8026130:	f841 2f04 	str.w	r2, [r1, #4]!
 8026134:	459c      	cmp	ip, r3
 8026136:	d8f9      	bhi.n	802612c <__lshift+0xc0>
 8026138:	e7ea      	b.n	8026110 <__lshift+0xa4>
 802613a:	bf00      	nop
 802613c:	08030cc0 	.word	0x08030cc0
 8026140:	08030d31 	.word	0x08030d31

08026144 <__mcmp>:
 8026144:	690a      	ldr	r2, [r1, #16]
 8026146:	4603      	mov	r3, r0
 8026148:	6900      	ldr	r0, [r0, #16]
 802614a:	1a80      	subs	r0, r0, r2
 802614c:	b530      	push	{r4, r5, lr}
 802614e:	d10e      	bne.n	802616e <__mcmp+0x2a>
 8026150:	3314      	adds	r3, #20
 8026152:	3114      	adds	r1, #20
 8026154:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8026158:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802615c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8026160:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8026164:	4295      	cmp	r5, r2
 8026166:	d003      	beq.n	8026170 <__mcmp+0x2c>
 8026168:	d205      	bcs.n	8026176 <__mcmp+0x32>
 802616a:	f04f 30ff 	mov.w	r0, #4294967295
 802616e:	bd30      	pop	{r4, r5, pc}
 8026170:	42a3      	cmp	r3, r4
 8026172:	d3f3      	bcc.n	802615c <__mcmp+0x18>
 8026174:	e7fb      	b.n	802616e <__mcmp+0x2a>
 8026176:	2001      	movs	r0, #1
 8026178:	e7f9      	b.n	802616e <__mcmp+0x2a>
	...

0802617c <__mdiff>:
 802617c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026180:	4689      	mov	r9, r1
 8026182:	4606      	mov	r6, r0
 8026184:	4611      	mov	r1, r2
 8026186:	4648      	mov	r0, r9
 8026188:	4614      	mov	r4, r2
 802618a:	f7ff ffdb 	bl	8026144 <__mcmp>
 802618e:	1e05      	subs	r5, r0, #0
 8026190:	d112      	bne.n	80261b8 <__mdiff+0x3c>
 8026192:	4629      	mov	r1, r5
 8026194:	4630      	mov	r0, r6
 8026196:	f7ff fd11 	bl	8025bbc <_Balloc>
 802619a:	4602      	mov	r2, r0
 802619c:	b928      	cbnz	r0, 80261aa <__mdiff+0x2e>
 802619e:	4b3f      	ldr	r3, [pc, #252]	@ (802629c <__mdiff+0x120>)
 80261a0:	f240 2137 	movw	r1, #567	@ 0x237
 80261a4:	483e      	ldr	r0, [pc, #248]	@ (80262a0 <__mdiff+0x124>)
 80261a6:	f7fc f867 	bl	8022278 <__assert_func>
 80261aa:	2301      	movs	r3, #1
 80261ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80261b0:	4610      	mov	r0, r2
 80261b2:	b003      	add	sp, #12
 80261b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80261b8:	bfbc      	itt	lt
 80261ba:	464b      	movlt	r3, r9
 80261bc:	46a1      	movlt	r9, r4
 80261be:	4630      	mov	r0, r6
 80261c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80261c4:	bfba      	itte	lt
 80261c6:	461c      	movlt	r4, r3
 80261c8:	2501      	movlt	r5, #1
 80261ca:	2500      	movge	r5, #0
 80261cc:	f7ff fcf6 	bl	8025bbc <_Balloc>
 80261d0:	4602      	mov	r2, r0
 80261d2:	b918      	cbnz	r0, 80261dc <__mdiff+0x60>
 80261d4:	4b31      	ldr	r3, [pc, #196]	@ (802629c <__mdiff+0x120>)
 80261d6:	f240 2145 	movw	r1, #581	@ 0x245
 80261da:	e7e3      	b.n	80261a4 <__mdiff+0x28>
 80261dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80261e0:	6926      	ldr	r6, [r4, #16]
 80261e2:	60c5      	str	r5, [r0, #12]
 80261e4:	f109 0310 	add.w	r3, r9, #16
 80261e8:	f109 0514 	add.w	r5, r9, #20
 80261ec:	f104 0e14 	add.w	lr, r4, #20
 80261f0:	f100 0b14 	add.w	fp, r0, #20
 80261f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80261f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80261fc:	9301      	str	r3, [sp, #4]
 80261fe:	46d9      	mov	r9, fp
 8026200:	f04f 0c00 	mov.w	ip, #0
 8026204:	9b01      	ldr	r3, [sp, #4]
 8026206:	f85e 0b04 	ldr.w	r0, [lr], #4
 802620a:	f853 af04 	ldr.w	sl, [r3, #4]!
 802620e:	9301      	str	r3, [sp, #4]
 8026210:	fa1f f38a 	uxth.w	r3, sl
 8026214:	4619      	mov	r1, r3
 8026216:	b283      	uxth	r3, r0
 8026218:	1acb      	subs	r3, r1, r3
 802621a:	0c00      	lsrs	r0, r0, #16
 802621c:	4463      	add	r3, ip
 802621e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8026222:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8026226:	b29b      	uxth	r3, r3
 8026228:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802622c:	4576      	cmp	r6, lr
 802622e:	f849 3b04 	str.w	r3, [r9], #4
 8026232:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026236:	d8e5      	bhi.n	8026204 <__mdiff+0x88>
 8026238:	1b33      	subs	r3, r6, r4
 802623a:	3b15      	subs	r3, #21
 802623c:	f023 0303 	bic.w	r3, r3, #3
 8026240:	3415      	adds	r4, #21
 8026242:	3304      	adds	r3, #4
 8026244:	42a6      	cmp	r6, r4
 8026246:	bf38      	it	cc
 8026248:	2304      	movcc	r3, #4
 802624a:	441d      	add	r5, r3
 802624c:	445b      	add	r3, fp
 802624e:	461e      	mov	r6, r3
 8026250:	462c      	mov	r4, r5
 8026252:	4544      	cmp	r4, r8
 8026254:	d30e      	bcc.n	8026274 <__mdiff+0xf8>
 8026256:	f108 0103 	add.w	r1, r8, #3
 802625a:	1b49      	subs	r1, r1, r5
 802625c:	f021 0103 	bic.w	r1, r1, #3
 8026260:	3d03      	subs	r5, #3
 8026262:	45a8      	cmp	r8, r5
 8026264:	bf38      	it	cc
 8026266:	2100      	movcc	r1, #0
 8026268:	440b      	add	r3, r1
 802626a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802626e:	b191      	cbz	r1, 8026296 <__mdiff+0x11a>
 8026270:	6117      	str	r7, [r2, #16]
 8026272:	e79d      	b.n	80261b0 <__mdiff+0x34>
 8026274:	f854 1b04 	ldr.w	r1, [r4], #4
 8026278:	46e6      	mov	lr, ip
 802627a:	0c08      	lsrs	r0, r1, #16
 802627c:	fa1c fc81 	uxtah	ip, ip, r1
 8026280:	4471      	add	r1, lr
 8026282:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8026286:	b289      	uxth	r1, r1
 8026288:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802628c:	f846 1b04 	str.w	r1, [r6], #4
 8026290:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026294:	e7dd      	b.n	8026252 <__mdiff+0xd6>
 8026296:	3f01      	subs	r7, #1
 8026298:	e7e7      	b.n	802626a <__mdiff+0xee>
 802629a:	bf00      	nop
 802629c:	08030cc0 	.word	0x08030cc0
 80262a0:	08030d31 	.word	0x08030d31

080262a4 <__ulp>:
 80262a4:	b082      	sub	sp, #8
 80262a6:	ed8d 0b00 	vstr	d0, [sp]
 80262aa:	9a01      	ldr	r2, [sp, #4]
 80262ac:	4b0f      	ldr	r3, [pc, #60]	@ (80262ec <__ulp+0x48>)
 80262ae:	4013      	ands	r3, r2
 80262b0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80262b4:	2b00      	cmp	r3, #0
 80262b6:	dc08      	bgt.n	80262ca <__ulp+0x26>
 80262b8:	425b      	negs	r3, r3
 80262ba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80262be:	ea4f 5223 	mov.w	r2, r3, asr #20
 80262c2:	da04      	bge.n	80262ce <__ulp+0x2a>
 80262c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80262c8:	4113      	asrs	r3, r2
 80262ca:	2200      	movs	r2, #0
 80262cc:	e008      	b.n	80262e0 <__ulp+0x3c>
 80262ce:	f1a2 0314 	sub.w	r3, r2, #20
 80262d2:	2b1e      	cmp	r3, #30
 80262d4:	bfda      	itte	le
 80262d6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80262da:	40da      	lsrle	r2, r3
 80262dc:	2201      	movgt	r2, #1
 80262de:	2300      	movs	r3, #0
 80262e0:	4619      	mov	r1, r3
 80262e2:	4610      	mov	r0, r2
 80262e4:	ec41 0b10 	vmov	d0, r0, r1
 80262e8:	b002      	add	sp, #8
 80262ea:	4770      	bx	lr
 80262ec:	7ff00000 	.word	0x7ff00000

080262f0 <__b2d>:
 80262f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80262f4:	6906      	ldr	r6, [r0, #16]
 80262f6:	f100 0814 	add.w	r8, r0, #20
 80262fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80262fe:	1f37      	subs	r7, r6, #4
 8026300:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8026304:	4610      	mov	r0, r2
 8026306:	f7ff fd4b 	bl	8025da0 <__hi0bits>
 802630a:	f1c0 0320 	rsb	r3, r0, #32
 802630e:	280a      	cmp	r0, #10
 8026310:	600b      	str	r3, [r1, #0]
 8026312:	491b      	ldr	r1, [pc, #108]	@ (8026380 <__b2d+0x90>)
 8026314:	dc15      	bgt.n	8026342 <__b2d+0x52>
 8026316:	f1c0 0c0b 	rsb	ip, r0, #11
 802631a:	fa22 f30c 	lsr.w	r3, r2, ip
 802631e:	45b8      	cmp	r8, r7
 8026320:	ea43 0501 	orr.w	r5, r3, r1
 8026324:	bf34      	ite	cc
 8026326:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802632a:	2300      	movcs	r3, #0
 802632c:	3015      	adds	r0, #21
 802632e:	fa02 f000 	lsl.w	r0, r2, r0
 8026332:	fa23 f30c 	lsr.w	r3, r3, ip
 8026336:	4303      	orrs	r3, r0
 8026338:	461c      	mov	r4, r3
 802633a:	ec45 4b10 	vmov	d0, r4, r5
 802633e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026342:	45b8      	cmp	r8, r7
 8026344:	bf3a      	itte	cc
 8026346:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802634a:	f1a6 0708 	subcc.w	r7, r6, #8
 802634e:	2300      	movcs	r3, #0
 8026350:	380b      	subs	r0, #11
 8026352:	d012      	beq.n	802637a <__b2d+0x8a>
 8026354:	f1c0 0120 	rsb	r1, r0, #32
 8026358:	fa23 f401 	lsr.w	r4, r3, r1
 802635c:	4082      	lsls	r2, r0
 802635e:	4322      	orrs	r2, r4
 8026360:	4547      	cmp	r7, r8
 8026362:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8026366:	bf8c      	ite	hi
 8026368:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802636c:	2200      	movls	r2, #0
 802636e:	4083      	lsls	r3, r0
 8026370:	40ca      	lsrs	r2, r1
 8026372:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8026376:	4313      	orrs	r3, r2
 8026378:	e7de      	b.n	8026338 <__b2d+0x48>
 802637a:	ea42 0501 	orr.w	r5, r2, r1
 802637e:	e7db      	b.n	8026338 <__b2d+0x48>
 8026380:	3ff00000 	.word	0x3ff00000

08026384 <__d2b>:
 8026384:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026388:	460f      	mov	r7, r1
 802638a:	2101      	movs	r1, #1
 802638c:	ec59 8b10 	vmov	r8, r9, d0
 8026390:	4616      	mov	r6, r2
 8026392:	f7ff fc13 	bl	8025bbc <_Balloc>
 8026396:	4604      	mov	r4, r0
 8026398:	b930      	cbnz	r0, 80263a8 <__d2b+0x24>
 802639a:	4602      	mov	r2, r0
 802639c:	4b23      	ldr	r3, [pc, #140]	@ (802642c <__d2b+0xa8>)
 802639e:	4824      	ldr	r0, [pc, #144]	@ (8026430 <__d2b+0xac>)
 80263a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80263a4:	f7fb ff68 	bl	8022278 <__assert_func>
 80263a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80263ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80263b0:	b10d      	cbz	r5, 80263b6 <__d2b+0x32>
 80263b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80263b6:	9301      	str	r3, [sp, #4]
 80263b8:	f1b8 0300 	subs.w	r3, r8, #0
 80263bc:	d023      	beq.n	8026406 <__d2b+0x82>
 80263be:	4668      	mov	r0, sp
 80263c0:	9300      	str	r3, [sp, #0]
 80263c2:	f7ff fd0c 	bl	8025dde <__lo0bits>
 80263c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80263ca:	b1d0      	cbz	r0, 8026402 <__d2b+0x7e>
 80263cc:	f1c0 0320 	rsb	r3, r0, #32
 80263d0:	fa02 f303 	lsl.w	r3, r2, r3
 80263d4:	430b      	orrs	r3, r1
 80263d6:	40c2      	lsrs	r2, r0
 80263d8:	6163      	str	r3, [r4, #20]
 80263da:	9201      	str	r2, [sp, #4]
 80263dc:	9b01      	ldr	r3, [sp, #4]
 80263de:	61a3      	str	r3, [r4, #24]
 80263e0:	2b00      	cmp	r3, #0
 80263e2:	bf0c      	ite	eq
 80263e4:	2201      	moveq	r2, #1
 80263e6:	2202      	movne	r2, #2
 80263e8:	6122      	str	r2, [r4, #16]
 80263ea:	b1a5      	cbz	r5, 8026416 <__d2b+0x92>
 80263ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80263f0:	4405      	add	r5, r0
 80263f2:	603d      	str	r5, [r7, #0]
 80263f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80263f8:	6030      	str	r0, [r6, #0]
 80263fa:	4620      	mov	r0, r4
 80263fc:	b003      	add	sp, #12
 80263fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026402:	6161      	str	r1, [r4, #20]
 8026404:	e7ea      	b.n	80263dc <__d2b+0x58>
 8026406:	a801      	add	r0, sp, #4
 8026408:	f7ff fce9 	bl	8025dde <__lo0bits>
 802640c:	9b01      	ldr	r3, [sp, #4]
 802640e:	6163      	str	r3, [r4, #20]
 8026410:	3020      	adds	r0, #32
 8026412:	2201      	movs	r2, #1
 8026414:	e7e8      	b.n	80263e8 <__d2b+0x64>
 8026416:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802641a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802641e:	6038      	str	r0, [r7, #0]
 8026420:	6918      	ldr	r0, [r3, #16]
 8026422:	f7ff fcbd 	bl	8025da0 <__hi0bits>
 8026426:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802642a:	e7e5      	b.n	80263f8 <__d2b+0x74>
 802642c:	08030cc0 	.word	0x08030cc0
 8026430:	08030d31 	.word	0x08030d31

08026434 <__ratio>:
 8026434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026438:	b085      	sub	sp, #20
 802643a:	e9cd 1000 	strd	r1, r0, [sp]
 802643e:	a902      	add	r1, sp, #8
 8026440:	f7ff ff56 	bl	80262f0 <__b2d>
 8026444:	9800      	ldr	r0, [sp, #0]
 8026446:	a903      	add	r1, sp, #12
 8026448:	ec55 4b10 	vmov	r4, r5, d0
 802644c:	f7ff ff50 	bl	80262f0 <__b2d>
 8026450:	9b01      	ldr	r3, [sp, #4]
 8026452:	6919      	ldr	r1, [r3, #16]
 8026454:	9b00      	ldr	r3, [sp, #0]
 8026456:	691b      	ldr	r3, [r3, #16]
 8026458:	1ac9      	subs	r1, r1, r3
 802645a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 802645e:	1a9b      	subs	r3, r3, r2
 8026460:	ec5b ab10 	vmov	sl, fp, d0
 8026464:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8026468:	2b00      	cmp	r3, #0
 802646a:	bfce      	itee	gt
 802646c:	462a      	movgt	r2, r5
 802646e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8026472:	465a      	movle	r2, fp
 8026474:	462f      	mov	r7, r5
 8026476:	46d9      	mov	r9, fp
 8026478:	bfcc      	ite	gt
 802647a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802647e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8026482:	464b      	mov	r3, r9
 8026484:	4652      	mov	r2, sl
 8026486:	4620      	mov	r0, r4
 8026488:	4639      	mov	r1, r7
 802648a:	f7e2 f927 	bl	80086dc <__aeabi_ddiv>
 802648e:	ec41 0b10 	vmov	d0, r0, r1
 8026492:	b005      	add	sp, #20
 8026494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026498 <__copybits>:
 8026498:	3901      	subs	r1, #1
 802649a:	b570      	push	{r4, r5, r6, lr}
 802649c:	1149      	asrs	r1, r1, #5
 802649e:	6914      	ldr	r4, [r2, #16]
 80264a0:	3101      	adds	r1, #1
 80264a2:	f102 0314 	add.w	r3, r2, #20
 80264a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80264aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80264ae:	1f05      	subs	r5, r0, #4
 80264b0:	42a3      	cmp	r3, r4
 80264b2:	d30c      	bcc.n	80264ce <__copybits+0x36>
 80264b4:	1aa3      	subs	r3, r4, r2
 80264b6:	3b11      	subs	r3, #17
 80264b8:	f023 0303 	bic.w	r3, r3, #3
 80264bc:	3211      	adds	r2, #17
 80264be:	42a2      	cmp	r2, r4
 80264c0:	bf88      	it	hi
 80264c2:	2300      	movhi	r3, #0
 80264c4:	4418      	add	r0, r3
 80264c6:	2300      	movs	r3, #0
 80264c8:	4288      	cmp	r0, r1
 80264ca:	d305      	bcc.n	80264d8 <__copybits+0x40>
 80264cc:	bd70      	pop	{r4, r5, r6, pc}
 80264ce:	f853 6b04 	ldr.w	r6, [r3], #4
 80264d2:	f845 6f04 	str.w	r6, [r5, #4]!
 80264d6:	e7eb      	b.n	80264b0 <__copybits+0x18>
 80264d8:	f840 3b04 	str.w	r3, [r0], #4
 80264dc:	e7f4      	b.n	80264c8 <__copybits+0x30>

080264de <__any_on>:
 80264de:	f100 0214 	add.w	r2, r0, #20
 80264e2:	6900      	ldr	r0, [r0, #16]
 80264e4:	114b      	asrs	r3, r1, #5
 80264e6:	4298      	cmp	r0, r3
 80264e8:	b510      	push	{r4, lr}
 80264ea:	db11      	blt.n	8026510 <__any_on+0x32>
 80264ec:	dd0a      	ble.n	8026504 <__any_on+0x26>
 80264ee:	f011 011f 	ands.w	r1, r1, #31
 80264f2:	d007      	beq.n	8026504 <__any_on+0x26>
 80264f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80264f8:	fa24 f001 	lsr.w	r0, r4, r1
 80264fc:	fa00 f101 	lsl.w	r1, r0, r1
 8026500:	428c      	cmp	r4, r1
 8026502:	d10b      	bne.n	802651c <__any_on+0x3e>
 8026504:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026508:	4293      	cmp	r3, r2
 802650a:	d803      	bhi.n	8026514 <__any_on+0x36>
 802650c:	2000      	movs	r0, #0
 802650e:	bd10      	pop	{r4, pc}
 8026510:	4603      	mov	r3, r0
 8026512:	e7f7      	b.n	8026504 <__any_on+0x26>
 8026514:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8026518:	2900      	cmp	r1, #0
 802651a:	d0f5      	beq.n	8026508 <__any_on+0x2a>
 802651c:	2001      	movs	r0, #1
 802651e:	e7f6      	b.n	802650e <__any_on+0x30>

08026520 <_malloc_usable_size_r>:
 8026520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026524:	1f18      	subs	r0, r3, #4
 8026526:	2b00      	cmp	r3, #0
 8026528:	bfbc      	itt	lt
 802652a:	580b      	ldrlt	r3, [r1, r0]
 802652c:	18c0      	addlt	r0, r0, r3
 802652e:	4770      	bx	lr

08026530 <__ascii_wctomb>:
 8026530:	4603      	mov	r3, r0
 8026532:	4608      	mov	r0, r1
 8026534:	b141      	cbz	r1, 8026548 <__ascii_wctomb+0x18>
 8026536:	2aff      	cmp	r2, #255	@ 0xff
 8026538:	d904      	bls.n	8026544 <__ascii_wctomb+0x14>
 802653a:	228a      	movs	r2, #138	@ 0x8a
 802653c:	601a      	str	r2, [r3, #0]
 802653e:	f04f 30ff 	mov.w	r0, #4294967295
 8026542:	4770      	bx	lr
 8026544:	700a      	strb	r2, [r1, #0]
 8026546:	2001      	movs	r0, #1
 8026548:	4770      	bx	lr

0802654a <__ssputs_r>:
 802654a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802654e:	688e      	ldr	r6, [r1, #8]
 8026550:	461f      	mov	r7, r3
 8026552:	42be      	cmp	r6, r7
 8026554:	680b      	ldr	r3, [r1, #0]
 8026556:	4682      	mov	sl, r0
 8026558:	460c      	mov	r4, r1
 802655a:	4690      	mov	r8, r2
 802655c:	d82d      	bhi.n	80265ba <__ssputs_r+0x70>
 802655e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8026562:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8026566:	d026      	beq.n	80265b6 <__ssputs_r+0x6c>
 8026568:	6965      	ldr	r5, [r4, #20]
 802656a:	6909      	ldr	r1, [r1, #16]
 802656c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026570:	eba3 0901 	sub.w	r9, r3, r1
 8026574:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8026578:	1c7b      	adds	r3, r7, #1
 802657a:	444b      	add	r3, r9
 802657c:	106d      	asrs	r5, r5, #1
 802657e:	429d      	cmp	r5, r3
 8026580:	bf38      	it	cc
 8026582:	461d      	movcc	r5, r3
 8026584:	0553      	lsls	r3, r2, #21
 8026586:	d527      	bpl.n	80265d8 <__ssputs_r+0x8e>
 8026588:	4629      	mov	r1, r5
 802658a:	f7fb fee1 	bl	8022350 <_malloc_r>
 802658e:	4606      	mov	r6, r0
 8026590:	b360      	cbz	r0, 80265ec <__ssputs_r+0xa2>
 8026592:	6921      	ldr	r1, [r4, #16]
 8026594:	464a      	mov	r2, r9
 8026596:	f7fe f8d2 	bl	802473e <memcpy>
 802659a:	89a3      	ldrh	r3, [r4, #12]
 802659c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80265a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80265a4:	81a3      	strh	r3, [r4, #12]
 80265a6:	6126      	str	r6, [r4, #16]
 80265a8:	6165      	str	r5, [r4, #20]
 80265aa:	444e      	add	r6, r9
 80265ac:	eba5 0509 	sub.w	r5, r5, r9
 80265b0:	6026      	str	r6, [r4, #0]
 80265b2:	60a5      	str	r5, [r4, #8]
 80265b4:	463e      	mov	r6, r7
 80265b6:	42be      	cmp	r6, r7
 80265b8:	d900      	bls.n	80265bc <__ssputs_r+0x72>
 80265ba:	463e      	mov	r6, r7
 80265bc:	6820      	ldr	r0, [r4, #0]
 80265be:	4632      	mov	r2, r6
 80265c0:	4641      	mov	r1, r8
 80265c2:	f7fd ff42 	bl	802444a <memmove>
 80265c6:	68a3      	ldr	r3, [r4, #8]
 80265c8:	1b9b      	subs	r3, r3, r6
 80265ca:	60a3      	str	r3, [r4, #8]
 80265cc:	6823      	ldr	r3, [r4, #0]
 80265ce:	4433      	add	r3, r6
 80265d0:	6023      	str	r3, [r4, #0]
 80265d2:	2000      	movs	r0, #0
 80265d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80265d8:	462a      	mov	r2, r5
 80265da:	f7fb ff4f 	bl	802247c <_realloc_r>
 80265de:	4606      	mov	r6, r0
 80265e0:	2800      	cmp	r0, #0
 80265e2:	d1e0      	bne.n	80265a6 <__ssputs_r+0x5c>
 80265e4:	6921      	ldr	r1, [r4, #16]
 80265e6:	4650      	mov	r0, sl
 80265e8:	f7fe ff1e 	bl	8025428 <_free_r>
 80265ec:	230c      	movs	r3, #12
 80265ee:	f8ca 3000 	str.w	r3, [sl]
 80265f2:	89a3      	ldrh	r3, [r4, #12]
 80265f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80265f8:	81a3      	strh	r3, [r4, #12]
 80265fa:	f04f 30ff 	mov.w	r0, #4294967295
 80265fe:	e7e9      	b.n	80265d4 <__ssputs_r+0x8a>

08026600 <_svfiprintf_r>:
 8026600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026604:	4698      	mov	r8, r3
 8026606:	898b      	ldrh	r3, [r1, #12]
 8026608:	061b      	lsls	r3, r3, #24
 802660a:	b09d      	sub	sp, #116	@ 0x74
 802660c:	4607      	mov	r7, r0
 802660e:	460d      	mov	r5, r1
 8026610:	4614      	mov	r4, r2
 8026612:	d510      	bpl.n	8026636 <_svfiprintf_r+0x36>
 8026614:	690b      	ldr	r3, [r1, #16]
 8026616:	b973      	cbnz	r3, 8026636 <_svfiprintf_r+0x36>
 8026618:	2140      	movs	r1, #64	@ 0x40
 802661a:	f7fb fe99 	bl	8022350 <_malloc_r>
 802661e:	6028      	str	r0, [r5, #0]
 8026620:	6128      	str	r0, [r5, #16]
 8026622:	b930      	cbnz	r0, 8026632 <_svfiprintf_r+0x32>
 8026624:	230c      	movs	r3, #12
 8026626:	603b      	str	r3, [r7, #0]
 8026628:	f04f 30ff 	mov.w	r0, #4294967295
 802662c:	b01d      	add	sp, #116	@ 0x74
 802662e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026632:	2340      	movs	r3, #64	@ 0x40
 8026634:	616b      	str	r3, [r5, #20]
 8026636:	2300      	movs	r3, #0
 8026638:	9309      	str	r3, [sp, #36]	@ 0x24
 802663a:	2320      	movs	r3, #32
 802663c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8026640:	f8cd 800c 	str.w	r8, [sp, #12]
 8026644:	2330      	movs	r3, #48	@ 0x30
 8026646:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80267e4 <_svfiprintf_r+0x1e4>
 802664a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802664e:	f04f 0901 	mov.w	r9, #1
 8026652:	4623      	mov	r3, r4
 8026654:	469a      	mov	sl, r3
 8026656:	f813 2b01 	ldrb.w	r2, [r3], #1
 802665a:	b10a      	cbz	r2, 8026660 <_svfiprintf_r+0x60>
 802665c:	2a25      	cmp	r2, #37	@ 0x25
 802665e:	d1f9      	bne.n	8026654 <_svfiprintf_r+0x54>
 8026660:	ebba 0b04 	subs.w	fp, sl, r4
 8026664:	d00b      	beq.n	802667e <_svfiprintf_r+0x7e>
 8026666:	465b      	mov	r3, fp
 8026668:	4622      	mov	r2, r4
 802666a:	4629      	mov	r1, r5
 802666c:	4638      	mov	r0, r7
 802666e:	f7ff ff6c 	bl	802654a <__ssputs_r>
 8026672:	3001      	adds	r0, #1
 8026674:	f000 80a7 	beq.w	80267c6 <_svfiprintf_r+0x1c6>
 8026678:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802667a:	445a      	add	r2, fp
 802667c:	9209      	str	r2, [sp, #36]	@ 0x24
 802667e:	f89a 3000 	ldrb.w	r3, [sl]
 8026682:	2b00      	cmp	r3, #0
 8026684:	f000 809f 	beq.w	80267c6 <_svfiprintf_r+0x1c6>
 8026688:	2300      	movs	r3, #0
 802668a:	f04f 32ff 	mov.w	r2, #4294967295
 802668e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026692:	f10a 0a01 	add.w	sl, sl, #1
 8026696:	9304      	str	r3, [sp, #16]
 8026698:	9307      	str	r3, [sp, #28]
 802669a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802669e:	931a      	str	r3, [sp, #104]	@ 0x68
 80266a0:	4654      	mov	r4, sl
 80266a2:	2205      	movs	r2, #5
 80266a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80266a8:	484e      	ldr	r0, [pc, #312]	@ (80267e4 <_svfiprintf_r+0x1e4>)
 80266aa:	f7e1 fcd9 	bl	8008060 <memchr>
 80266ae:	9a04      	ldr	r2, [sp, #16]
 80266b0:	b9d8      	cbnz	r0, 80266ea <_svfiprintf_r+0xea>
 80266b2:	06d0      	lsls	r0, r2, #27
 80266b4:	bf44      	itt	mi
 80266b6:	2320      	movmi	r3, #32
 80266b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80266bc:	0711      	lsls	r1, r2, #28
 80266be:	bf44      	itt	mi
 80266c0:	232b      	movmi	r3, #43	@ 0x2b
 80266c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80266c6:	f89a 3000 	ldrb.w	r3, [sl]
 80266ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80266cc:	d015      	beq.n	80266fa <_svfiprintf_r+0xfa>
 80266ce:	9a07      	ldr	r2, [sp, #28]
 80266d0:	4654      	mov	r4, sl
 80266d2:	2000      	movs	r0, #0
 80266d4:	f04f 0c0a 	mov.w	ip, #10
 80266d8:	4621      	mov	r1, r4
 80266da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80266de:	3b30      	subs	r3, #48	@ 0x30
 80266e0:	2b09      	cmp	r3, #9
 80266e2:	d94b      	bls.n	802677c <_svfiprintf_r+0x17c>
 80266e4:	b1b0      	cbz	r0, 8026714 <_svfiprintf_r+0x114>
 80266e6:	9207      	str	r2, [sp, #28]
 80266e8:	e014      	b.n	8026714 <_svfiprintf_r+0x114>
 80266ea:	eba0 0308 	sub.w	r3, r0, r8
 80266ee:	fa09 f303 	lsl.w	r3, r9, r3
 80266f2:	4313      	orrs	r3, r2
 80266f4:	9304      	str	r3, [sp, #16]
 80266f6:	46a2      	mov	sl, r4
 80266f8:	e7d2      	b.n	80266a0 <_svfiprintf_r+0xa0>
 80266fa:	9b03      	ldr	r3, [sp, #12]
 80266fc:	1d19      	adds	r1, r3, #4
 80266fe:	681b      	ldr	r3, [r3, #0]
 8026700:	9103      	str	r1, [sp, #12]
 8026702:	2b00      	cmp	r3, #0
 8026704:	bfbb      	ittet	lt
 8026706:	425b      	neglt	r3, r3
 8026708:	f042 0202 	orrlt.w	r2, r2, #2
 802670c:	9307      	strge	r3, [sp, #28]
 802670e:	9307      	strlt	r3, [sp, #28]
 8026710:	bfb8      	it	lt
 8026712:	9204      	strlt	r2, [sp, #16]
 8026714:	7823      	ldrb	r3, [r4, #0]
 8026716:	2b2e      	cmp	r3, #46	@ 0x2e
 8026718:	d10a      	bne.n	8026730 <_svfiprintf_r+0x130>
 802671a:	7863      	ldrb	r3, [r4, #1]
 802671c:	2b2a      	cmp	r3, #42	@ 0x2a
 802671e:	d132      	bne.n	8026786 <_svfiprintf_r+0x186>
 8026720:	9b03      	ldr	r3, [sp, #12]
 8026722:	1d1a      	adds	r2, r3, #4
 8026724:	681b      	ldr	r3, [r3, #0]
 8026726:	9203      	str	r2, [sp, #12]
 8026728:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802672c:	3402      	adds	r4, #2
 802672e:	9305      	str	r3, [sp, #20]
 8026730:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80267f4 <_svfiprintf_r+0x1f4>
 8026734:	7821      	ldrb	r1, [r4, #0]
 8026736:	2203      	movs	r2, #3
 8026738:	4650      	mov	r0, sl
 802673a:	f7e1 fc91 	bl	8008060 <memchr>
 802673e:	b138      	cbz	r0, 8026750 <_svfiprintf_r+0x150>
 8026740:	9b04      	ldr	r3, [sp, #16]
 8026742:	eba0 000a 	sub.w	r0, r0, sl
 8026746:	2240      	movs	r2, #64	@ 0x40
 8026748:	4082      	lsls	r2, r0
 802674a:	4313      	orrs	r3, r2
 802674c:	3401      	adds	r4, #1
 802674e:	9304      	str	r3, [sp, #16]
 8026750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026754:	4824      	ldr	r0, [pc, #144]	@ (80267e8 <_svfiprintf_r+0x1e8>)
 8026756:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802675a:	2206      	movs	r2, #6
 802675c:	f7e1 fc80 	bl	8008060 <memchr>
 8026760:	2800      	cmp	r0, #0
 8026762:	d036      	beq.n	80267d2 <_svfiprintf_r+0x1d2>
 8026764:	4b21      	ldr	r3, [pc, #132]	@ (80267ec <_svfiprintf_r+0x1ec>)
 8026766:	bb1b      	cbnz	r3, 80267b0 <_svfiprintf_r+0x1b0>
 8026768:	9b03      	ldr	r3, [sp, #12]
 802676a:	3307      	adds	r3, #7
 802676c:	f023 0307 	bic.w	r3, r3, #7
 8026770:	3308      	adds	r3, #8
 8026772:	9303      	str	r3, [sp, #12]
 8026774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026776:	4433      	add	r3, r6
 8026778:	9309      	str	r3, [sp, #36]	@ 0x24
 802677a:	e76a      	b.n	8026652 <_svfiprintf_r+0x52>
 802677c:	fb0c 3202 	mla	r2, ip, r2, r3
 8026780:	460c      	mov	r4, r1
 8026782:	2001      	movs	r0, #1
 8026784:	e7a8      	b.n	80266d8 <_svfiprintf_r+0xd8>
 8026786:	2300      	movs	r3, #0
 8026788:	3401      	adds	r4, #1
 802678a:	9305      	str	r3, [sp, #20]
 802678c:	4619      	mov	r1, r3
 802678e:	f04f 0c0a 	mov.w	ip, #10
 8026792:	4620      	mov	r0, r4
 8026794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026798:	3a30      	subs	r2, #48	@ 0x30
 802679a:	2a09      	cmp	r2, #9
 802679c:	d903      	bls.n	80267a6 <_svfiprintf_r+0x1a6>
 802679e:	2b00      	cmp	r3, #0
 80267a0:	d0c6      	beq.n	8026730 <_svfiprintf_r+0x130>
 80267a2:	9105      	str	r1, [sp, #20]
 80267a4:	e7c4      	b.n	8026730 <_svfiprintf_r+0x130>
 80267a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80267aa:	4604      	mov	r4, r0
 80267ac:	2301      	movs	r3, #1
 80267ae:	e7f0      	b.n	8026792 <_svfiprintf_r+0x192>
 80267b0:	ab03      	add	r3, sp, #12
 80267b2:	9300      	str	r3, [sp, #0]
 80267b4:	462a      	mov	r2, r5
 80267b6:	4b0e      	ldr	r3, [pc, #56]	@ (80267f0 <_svfiprintf_r+0x1f0>)
 80267b8:	a904      	add	r1, sp, #16
 80267ba:	4638      	mov	r0, r7
 80267bc:	f7fc ff32 	bl	8023624 <_printf_float>
 80267c0:	1c42      	adds	r2, r0, #1
 80267c2:	4606      	mov	r6, r0
 80267c4:	d1d6      	bne.n	8026774 <_svfiprintf_r+0x174>
 80267c6:	89ab      	ldrh	r3, [r5, #12]
 80267c8:	065b      	lsls	r3, r3, #25
 80267ca:	f53f af2d 	bmi.w	8026628 <_svfiprintf_r+0x28>
 80267ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80267d0:	e72c      	b.n	802662c <_svfiprintf_r+0x2c>
 80267d2:	ab03      	add	r3, sp, #12
 80267d4:	9300      	str	r3, [sp, #0]
 80267d6:	462a      	mov	r2, r5
 80267d8:	4b05      	ldr	r3, [pc, #20]	@ (80267f0 <_svfiprintf_r+0x1f0>)
 80267da:	a904      	add	r1, sp, #16
 80267dc:	4638      	mov	r0, r7
 80267de:	f7fd f9b9 	bl	8023b54 <_printf_i>
 80267e2:	e7ed      	b.n	80267c0 <_svfiprintf_r+0x1c0>
 80267e4:	08030e88 	.word	0x08030e88
 80267e8:	08030e92 	.word	0x08030e92
 80267ec:	08023625 	.word	0x08023625
 80267f0:	0802654b 	.word	0x0802654b
 80267f4:	08030e8e 	.word	0x08030e8e

080267f8 <__sfputc_r>:
 80267f8:	6893      	ldr	r3, [r2, #8]
 80267fa:	3b01      	subs	r3, #1
 80267fc:	2b00      	cmp	r3, #0
 80267fe:	b410      	push	{r4}
 8026800:	6093      	str	r3, [r2, #8]
 8026802:	da08      	bge.n	8026816 <__sfputc_r+0x1e>
 8026804:	6994      	ldr	r4, [r2, #24]
 8026806:	42a3      	cmp	r3, r4
 8026808:	db01      	blt.n	802680e <__sfputc_r+0x16>
 802680a:	290a      	cmp	r1, #10
 802680c:	d103      	bne.n	8026816 <__sfputc_r+0x1e>
 802680e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026812:	f000 b9df 	b.w	8026bd4 <__swbuf_r>
 8026816:	6813      	ldr	r3, [r2, #0]
 8026818:	1c58      	adds	r0, r3, #1
 802681a:	6010      	str	r0, [r2, #0]
 802681c:	7019      	strb	r1, [r3, #0]
 802681e:	4608      	mov	r0, r1
 8026820:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026824:	4770      	bx	lr

08026826 <__sfputs_r>:
 8026826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026828:	4606      	mov	r6, r0
 802682a:	460f      	mov	r7, r1
 802682c:	4614      	mov	r4, r2
 802682e:	18d5      	adds	r5, r2, r3
 8026830:	42ac      	cmp	r4, r5
 8026832:	d101      	bne.n	8026838 <__sfputs_r+0x12>
 8026834:	2000      	movs	r0, #0
 8026836:	e007      	b.n	8026848 <__sfputs_r+0x22>
 8026838:	f814 1b01 	ldrb.w	r1, [r4], #1
 802683c:	463a      	mov	r2, r7
 802683e:	4630      	mov	r0, r6
 8026840:	f7ff ffda 	bl	80267f8 <__sfputc_r>
 8026844:	1c43      	adds	r3, r0, #1
 8026846:	d1f3      	bne.n	8026830 <__sfputs_r+0xa>
 8026848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802684c <_vfiprintf_r>:
 802684c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026850:	460d      	mov	r5, r1
 8026852:	b09d      	sub	sp, #116	@ 0x74
 8026854:	4614      	mov	r4, r2
 8026856:	4698      	mov	r8, r3
 8026858:	4606      	mov	r6, r0
 802685a:	b118      	cbz	r0, 8026864 <_vfiprintf_r+0x18>
 802685c:	6a03      	ldr	r3, [r0, #32]
 802685e:	b90b      	cbnz	r3, 8026864 <_vfiprintf_r+0x18>
 8026860:	f7fd fd38 	bl	80242d4 <__sinit>
 8026864:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8026866:	07d9      	lsls	r1, r3, #31
 8026868:	d405      	bmi.n	8026876 <_vfiprintf_r+0x2a>
 802686a:	89ab      	ldrh	r3, [r5, #12]
 802686c:	059a      	lsls	r2, r3, #22
 802686e:	d402      	bmi.n	8026876 <_vfiprintf_r+0x2a>
 8026870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8026872:	f7fd ff5a 	bl	802472a <__retarget_lock_acquire_recursive>
 8026876:	89ab      	ldrh	r3, [r5, #12]
 8026878:	071b      	lsls	r3, r3, #28
 802687a:	d501      	bpl.n	8026880 <_vfiprintf_r+0x34>
 802687c:	692b      	ldr	r3, [r5, #16]
 802687e:	b99b      	cbnz	r3, 80268a8 <_vfiprintf_r+0x5c>
 8026880:	4629      	mov	r1, r5
 8026882:	4630      	mov	r0, r6
 8026884:	f000 f9e4 	bl	8026c50 <__swsetup_r>
 8026888:	b170      	cbz	r0, 80268a8 <_vfiprintf_r+0x5c>
 802688a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802688c:	07dc      	lsls	r4, r3, #31
 802688e:	d504      	bpl.n	802689a <_vfiprintf_r+0x4e>
 8026890:	f04f 30ff 	mov.w	r0, #4294967295
 8026894:	b01d      	add	sp, #116	@ 0x74
 8026896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802689a:	89ab      	ldrh	r3, [r5, #12]
 802689c:	0598      	lsls	r0, r3, #22
 802689e:	d4f7      	bmi.n	8026890 <_vfiprintf_r+0x44>
 80268a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80268a2:	f7fd ff43 	bl	802472c <__retarget_lock_release_recursive>
 80268a6:	e7f3      	b.n	8026890 <_vfiprintf_r+0x44>
 80268a8:	2300      	movs	r3, #0
 80268aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80268ac:	2320      	movs	r3, #32
 80268ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80268b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80268b6:	2330      	movs	r3, #48	@ 0x30
 80268b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8026a68 <_vfiprintf_r+0x21c>
 80268bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80268c0:	f04f 0901 	mov.w	r9, #1
 80268c4:	4623      	mov	r3, r4
 80268c6:	469a      	mov	sl, r3
 80268c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80268cc:	b10a      	cbz	r2, 80268d2 <_vfiprintf_r+0x86>
 80268ce:	2a25      	cmp	r2, #37	@ 0x25
 80268d0:	d1f9      	bne.n	80268c6 <_vfiprintf_r+0x7a>
 80268d2:	ebba 0b04 	subs.w	fp, sl, r4
 80268d6:	d00b      	beq.n	80268f0 <_vfiprintf_r+0xa4>
 80268d8:	465b      	mov	r3, fp
 80268da:	4622      	mov	r2, r4
 80268dc:	4629      	mov	r1, r5
 80268de:	4630      	mov	r0, r6
 80268e0:	f7ff ffa1 	bl	8026826 <__sfputs_r>
 80268e4:	3001      	adds	r0, #1
 80268e6:	f000 80a7 	beq.w	8026a38 <_vfiprintf_r+0x1ec>
 80268ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80268ec:	445a      	add	r2, fp
 80268ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80268f0:	f89a 3000 	ldrb.w	r3, [sl]
 80268f4:	2b00      	cmp	r3, #0
 80268f6:	f000 809f 	beq.w	8026a38 <_vfiprintf_r+0x1ec>
 80268fa:	2300      	movs	r3, #0
 80268fc:	f04f 32ff 	mov.w	r2, #4294967295
 8026900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026904:	f10a 0a01 	add.w	sl, sl, #1
 8026908:	9304      	str	r3, [sp, #16]
 802690a:	9307      	str	r3, [sp, #28]
 802690c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8026910:	931a      	str	r3, [sp, #104]	@ 0x68
 8026912:	4654      	mov	r4, sl
 8026914:	2205      	movs	r2, #5
 8026916:	f814 1b01 	ldrb.w	r1, [r4], #1
 802691a:	4853      	ldr	r0, [pc, #332]	@ (8026a68 <_vfiprintf_r+0x21c>)
 802691c:	f7e1 fba0 	bl	8008060 <memchr>
 8026920:	9a04      	ldr	r2, [sp, #16]
 8026922:	b9d8      	cbnz	r0, 802695c <_vfiprintf_r+0x110>
 8026924:	06d1      	lsls	r1, r2, #27
 8026926:	bf44      	itt	mi
 8026928:	2320      	movmi	r3, #32
 802692a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802692e:	0713      	lsls	r3, r2, #28
 8026930:	bf44      	itt	mi
 8026932:	232b      	movmi	r3, #43	@ 0x2b
 8026934:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8026938:	f89a 3000 	ldrb.w	r3, [sl]
 802693c:	2b2a      	cmp	r3, #42	@ 0x2a
 802693e:	d015      	beq.n	802696c <_vfiprintf_r+0x120>
 8026940:	9a07      	ldr	r2, [sp, #28]
 8026942:	4654      	mov	r4, sl
 8026944:	2000      	movs	r0, #0
 8026946:	f04f 0c0a 	mov.w	ip, #10
 802694a:	4621      	mov	r1, r4
 802694c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026950:	3b30      	subs	r3, #48	@ 0x30
 8026952:	2b09      	cmp	r3, #9
 8026954:	d94b      	bls.n	80269ee <_vfiprintf_r+0x1a2>
 8026956:	b1b0      	cbz	r0, 8026986 <_vfiprintf_r+0x13a>
 8026958:	9207      	str	r2, [sp, #28]
 802695a:	e014      	b.n	8026986 <_vfiprintf_r+0x13a>
 802695c:	eba0 0308 	sub.w	r3, r0, r8
 8026960:	fa09 f303 	lsl.w	r3, r9, r3
 8026964:	4313      	orrs	r3, r2
 8026966:	9304      	str	r3, [sp, #16]
 8026968:	46a2      	mov	sl, r4
 802696a:	e7d2      	b.n	8026912 <_vfiprintf_r+0xc6>
 802696c:	9b03      	ldr	r3, [sp, #12]
 802696e:	1d19      	adds	r1, r3, #4
 8026970:	681b      	ldr	r3, [r3, #0]
 8026972:	9103      	str	r1, [sp, #12]
 8026974:	2b00      	cmp	r3, #0
 8026976:	bfbb      	ittet	lt
 8026978:	425b      	neglt	r3, r3
 802697a:	f042 0202 	orrlt.w	r2, r2, #2
 802697e:	9307      	strge	r3, [sp, #28]
 8026980:	9307      	strlt	r3, [sp, #28]
 8026982:	bfb8      	it	lt
 8026984:	9204      	strlt	r2, [sp, #16]
 8026986:	7823      	ldrb	r3, [r4, #0]
 8026988:	2b2e      	cmp	r3, #46	@ 0x2e
 802698a:	d10a      	bne.n	80269a2 <_vfiprintf_r+0x156>
 802698c:	7863      	ldrb	r3, [r4, #1]
 802698e:	2b2a      	cmp	r3, #42	@ 0x2a
 8026990:	d132      	bne.n	80269f8 <_vfiprintf_r+0x1ac>
 8026992:	9b03      	ldr	r3, [sp, #12]
 8026994:	1d1a      	adds	r2, r3, #4
 8026996:	681b      	ldr	r3, [r3, #0]
 8026998:	9203      	str	r2, [sp, #12]
 802699a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802699e:	3402      	adds	r4, #2
 80269a0:	9305      	str	r3, [sp, #20]
 80269a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8026a78 <_vfiprintf_r+0x22c>
 80269a6:	7821      	ldrb	r1, [r4, #0]
 80269a8:	2203      	movs	r2, #3
 80269aa:	4650      	mov	r0, sl
 80269ac:	f7e1 fb58 	bl	8008060 <memchr>
 80269b0:	b138      	cbz	r0, 80269c2 <_vfiprintf_r+0x176>
 80269b2:	9b04      	ldr	r3, [sp, #16]
 80269b4:	eba0 000a 	sub.w	r0, r0, sl
 80269b8:	2240      	movs	r2, #64	@ 0x40
 80269ba:	4082      	lsls	r2, r0
 80269bc:	4313      	orrs	r3, r2
 80269be:	3401      	adds	r4, #1
 80269c0:	9304      	str	r3, [sp, #16]
 80269c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80269c6:	4829      	ldr	r0, [pc, #164]	@ (8026a6c <_vfiprintf_r+0x220>)
 80269c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80269cc:	2206      	movs	r2, #6
 80269ce:	f7e1 fb47 	bl	8008060 <memchr>
 80269d2:	2800      	cmp	r0, #0
 80269d4:	d03f      	beq.n	8026a56 <_vfiprintf_r+0x20a>
 80269d6:	4b26      	ldr	r3, [pc, #152]	@ (8026a70 <_vfiprintf_r+0x224>)
 80269d8:	bb1b      	cbnz	r3, 8026a22 <_vfiprintf_r+0x1d6>
 80269da:	9b03      	ldr	r3, [sp, #12]
 80269dc:	3307      	adds	r3, #7
 80269de:	f023 0307 	bic.w	r3, r3, #7
 80269e2:	3308      	adds	r3, #8
 80269e4:	9303      	str	r3, [sp, #12]
 80269e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80269e8:	443b      	add	r3, r7
 80269ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80269ec:	e76a      	b.n	80268c4 <_vfiprintf_r+0x78>
 80269ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80269f2:	460c      	mov	r4, r1
 80269f4:	2001      	movs	r0, #1
 80269f6:	e7a8      	b.n	802694a <_vfiprintf_r+0xfe>
 80269f8:	2300      	movs	r3, #0
 80269fa:	3401      	adds	r4, #1
 80269fc:	9305      	str	r3, [sp, #20]
 80269fe:	4619      	mov	r1, r3
 8026a00:	f04f 0c0a 	mov.w	ip, #10
 8026a04:	4620      	mov	r0, r4
 8026a06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026a0a:	3a30      	subs	r2, #48	@ 0x30
 8026a0c:	2a09      	cmp	r2, #9
 8026a0e:	d903      	bls.n	8026a18 <_vfiprintf_r+0x1cc>
 8026a10:	2b00      	cmp	r3, #0
 8026a12:	d0c6      	beq.n	80269a2 <_vfiprintf_r+0x156>
 8026a14:	9105      	str	r1, [sp, #20]
 8026a16:	e7c4      	b.n	80269a2 <_vfiprintf_r+0x156>
 8026a18:	fb0c 2101 	mla	r1, ip, r1, r2
 8026a1c:	4604      	mov	r4, r0
 8026a1e:	2301      	movs	r3, #1
 8026a20:	e7f0      	b.n	8026a04 <_vfiprintf_r+0x1b8>
 8026a22:	ab03      	add	r3, sp, #12
 8026a24:	9300      	str	r3, [sp, #0]
 8026a26:	462a      	mov	r2, r5
 8026a28:	4b12      	ldr	r3, [pc, #72]	@ (8026a74 <_vfiprintf_r+0x228>)
 8026a2a:	a904      	add	r1, sp, #16
 8026a2c:	4630      	mov	r0, r6
 8026a2e:	f7fc fdf9 	bl	8023624 <_printf_float>
 8026a32:	4607      	mov	r7, r0
 8026a34:	1c78      	adds	r0, r7, #1
 8026a36:	d1d6      	bne.n	80269e6 <_vfiprintf_r+0x19a>
 8026a38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8026a3a:	07d9      	lsls	r1, r3, #31
 8026a3c:	d405      	bmi.n	8026a4a <_vfiprintf_r+0x1fe>
 8026a3e:	89ab      	ldrh	r3, [r5, #12]
 8026a40:	059a      	lsls	r2, r3, #22
 8026a42:	d402      	bmi.n	8026a4a <_vfiprintf_r+0x1fe>
 8026a44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8026a46:	f7fd fe71 	bl	802472c <__retarget_lock_release_recursive>
 8026a4a:	89ab      	ldrh	r3, [r5, #12]
 8026a4c:	065b      	lsls	r3, r3, #25
 8026a4e:	f53f af1f 	bmi.w	8026890 <_vfiprintf_r+0x44>
 8026a52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026a54:	e71e      	b.n	8026894 <_vfiprintf_r+0x48>
 8026a56:	ab03      	add	r3, sp, #12
 8026a58:	9300      	str	r3, [sp, #0]
 8026a5a:	462a      	mov	r2, r5
 8026a5c:	4b05      	ldr	r3, [pc, #20]	@ (8026a74 <_vfiprintf_r+0x228>)
 8026a5e:	a904      	add	r1, sp, #16
 8026a60:	4630      	mov	r0, r6
 8026a62:	f7fd f877 	bl	8023b54 <_printf_i>
 8026a66:	e7e4      	b.n	8026a32 <_vfiprintf_r+0x1e6>
 8026a68:	08030e88 	.word	0x08030e88
 8026a6c:	08030e92 	.word	0x08030e92
 8026a70:	08023625 	.word	0x08023625
 8026a74:	08026827 	.word	0x08026827
 8026a78:	08030e8e 	.word	0x08030e8e

08026a7c <__sflush_r>:
 8026a7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8026a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026a84:	0716      	lsls	r6, r2, #28
 8026a86:	4605      	mov	r5, r0
 8026a88:	460c      	mov	r4, r1
 8026a8a:	d454      	bmi.n	8026b36 <__sflush_r+0xba>
 8026a8c:	684b      	ldr	r3, [r1, #4]
 8026a8e:	2b00      	cmp	r3, #0
 8026a90:	dc02      	bgt.n	8026a98 <__sflush_r+0x1c>
 8026a92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8026a94:	2b00      	cmp	r3, #0
 8026a96:	dd48      	ble.n	8026b2a <__sflush_r+0xae>
 8026a98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8026a9a:	2e00      	cmp	r6, #0
 8026a9c:	d045      	beq.n	8026b2a <__sflush_r+0xae>
 8026a9e:	2300      	movs	r3, #0
 8026aa0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8026aa4:	682f      	ldr	r7, [r5, #0]
 8026aa6:	6a21      	ldr	r1, [r4, #32]
 8026aa8:	602b      	str	r3, [r5, #0]
 8026aaa:	d030      	beq.n	8026b0e <__sflush_r+0x92>
 8026aac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8026aae:	89a3      	ldrh	r3, [r4, #12]
 8026ab0:	0759      	lsls	r1, r3, #29
 8026ab2:	d505      	bpl.n	8026ac0 <__sflush_r+0x44>
 8026ab4:	6863      	ldr	r3, [r4, #4]
 8026ab6:	1ad2      	subs	r2, r2, r3
 8026ab8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8026aba:	b10b      	cbz	r3, 8026ac0 <__sflush_r+0x44>
 8026abc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8026abe:	1ad2      	subs	r2, r2, r3
 8026ac0:	2300      	movs	r3, #0
 8026ac2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8026ac4:	6a21      	ldr	r1, [r4, #32]
 8026ac6:	4628      	mov	r0, r5
 8026ac8:	47b0      	blx	r6
 8026aca:	1c43      	adds	r3, r0, #1
 8026acc:	89a3      	ldrh	r3, [r4, #12]
 8026ace:	d106      	bne.n	8026ade <__sflush_r+0x62>
 8026ad0:	6829      	ldr	r1, [r5, #0]
 8026ad2:	291d      	cmp	r1, #29
 8026ad4:	d82b      	bhi.n	8026b2e <__sflush_r+0xb2>
 8026ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8026b80 <__sflush_r+0x104>)
 8026ad8:	410a      	asrs	r2, r1
 8026ada:	07d6      	lsls	r6, r2, #31
 8026adc:	d427      	bmi.n	8026b2e <__sflush_r+0xb2>
 8026ade:	2200      	movs	r2, #0
 8026ae0:	6062      	str	r2, [r4, #4]
 8026ae2:	04d9      	lsls	r1, r3, #19
 8026ae4:	6922      	ldr	r2, [r4, #16]
 8026ae6:	6022      	str	r2, [r4, #0]
 8026ae8:	d504      	bpl.n	8026af4 <__sflush_r+0x78>
 8026aea:	1c42      	adds	r2, r0, #1
 8026aec:	d101      	bne.n	8026af2 <__sflush_r+0x76>
 8026aee:	682b      	ldr	r3, [r5, #0]
 8026af0:	b903      	cbnz	r3, 8026af4 <__sflush_r+0x78>
 8026af2:	6560      	str	r0, [r4, #84]	@ 0x54
 8026af4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026af6:	602f      	str	r7, [r5, #0]
 8026af8:	b1b9      	cbz	r1, 8026b2a <__sflush_r+0xae>
 8026afa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8026afe:	4299      	cmp	r1, r3
 8026b00:	d002      	beq.n	8026b08 <__sflush_r+0x8c>
 8026b02:	4628      	mov	r0, r5
 8026b04:	f7fe fc90 	bl	8025428 <_free_r>
 8026b08:	2300      	movs	r3, #0
 8026b0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8026b0c:	e00d      	b.n	8026b2a <__sflush_r+0xae>
 8026b0e:	2301      	movs	r3, #1
 8026b10:	4628      	mov	r0, r5
 8026b12:	47b0      	blx	r6
 8026b14:	4602      	mov	r2, r0
 8026b16:	1c50      	adds	r0, r2, #1
 8026b18:	d1c9      	bne.n	8026aae <__sflush_r+0x32>
 8026b1a:	682b      	ldr	r3, [r5, #0]
 8026b1c:	2b00      	cmp	r3, #0
 8026b1e:	d0c6      	beq.n	8026aae <__sflush_r+0x32>
 8026b20:	2b1d      	cmp	r3, #29
 8026b22:	d001      	beq.n	8026b28 <__sflush_r+0xac>
 8026b24:	2b16      	cmp	r3, #22
 8026b26:	d11e      	bne.n	8026b66 <__sflush_r+0xea>
 8026b28:	602f      	str	r7, [r5, #0]
 8026b2a:	2000      	movs	r0, #0
 8026b2c:	e022      	b.n	8026b74 <__sflush_r+0xf8>
 8026b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026b32:	b21b      	sxth	r3, r3
 8026b34:	e01b      	b.n	8026b6e <__sflush_r+0xf2>
 8026b36:	690f      	ldr	r7, [r1, #16]
 8026b38:	2f00      	cmp	r7, #0
 8026b3a:	d0f6      	beq.n	8026b2a <__sflush_r+0xae>
 8026b3c:	0793      	lsls	r3, r2, #30
 8026b3e:	680e      	ldr	r6, [r1, #0]
 8026b40:	bf08      	it	eq
 8026b42:	694b      	ldreq	r3, [r1, #20]
 8026b44:	600f      	str	r7, [r1, #0]
 8026b46:	bf18      	it	ne
 8026b48:	2300      	movne	r3, #0
 8026b4a:	eba6 0807 	sub.w	r8, r6, r7
 8026b4e:	608b      	str	r3, [r1, #8]
 8026b50:	f1b8 0f00 	cmp.w	r8, #0
 8026b54:	dde9      	ble.n	8026b2a <__sflush_r+0xae>
 8026b56:	6a21      	ldr	r1, [r4, #32]
 8026b58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8026b5a:	4643      	mov	r3, r8
 8026b5c:	463a      	mov	r2, r7
 8026b5e:	4628      	mov	r0, r5
 8026b60:	47b0      	blx	r6
 8026b62:	2800      	cmp	r0, #0
 8026b64:	dc08      	bgt.n	8026b78 <__sflush_r+0xfc>
 8026b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026b6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026b6e:	81a3      	strh	r3, [r4, #12]
 8026b70:	f04f 30ff 	mov.w	r0, #4294967295
 8026b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026b78:	4407      	add	r7, r0
 8026b7a:	eba8 0800 	sub.w	r8, r8, r0
 8026b7e:	e7e7      	b.n	8026b50 <__sflush_r+0xd4>
 8026b80:	dfbffffe 	.word	0xdfbffffe

08026b84 <_fflush_r>:
 8026b84:	b538      	push	{r3, r4, r5, lr}
 8026b86:	690b      	ldr	r3, [r1, #16]
 8026b88:	4605      	mov	r5, r0
 8026b8a:	460c      	mov	r4, r1
 8026b8c:	b913      	cbnz	r3, 8026b94 <_fflush_r+0x10>
 8026b8e:	2500      	movs	r5, #0
 8026b90:	4628      	mov	r0, r5
 8026b92:	bd38      	pop	{r3, r4, r5, pc}
 8026b94:	b118      	cbz	r0, 8026b9e <_fflush_r+0x1a>
 8026b96:	6a03      	ldr	r3, [r0, #32]
 8026b98:	b90b      	cbnz	r3, 8026b9e <_fflush_r+0x1a>
 8026b9a:	f7fd fb9b 	bl	80242d4 <__sinit>
 8026b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026ba2:	2b00      	cmp	r3, #0
 8026ba4:	d0f3      	beq.n	8026b8e <_fflush_r+0xa>
 8026ba6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8026ba8:	07d0      	lsls	r0, r2, #31
 8026baa:	d404      	bmi.n	8026bb6 <_fflush_r+0x32>
 8026bac:	0599      	lsls	r1, r3, #22
 8026bae:	d402      	bmi.n	8026bb6 <_fflush_r+0x32>
 8026bb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026bb2:	f7fd fdba 	bl	802472a <__retarget_lock_acquire_recursive>
 8026bb6:	4628      	mov	r0, r5
 8026bb8:	4621      	mov	r1, r4
 8026bba:	f7ff ff5f 	bl	8026a7c <__sflush_r>
 8026bbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026bc0:	07da      	lsls	r2, r3, #31
 8026bc2:	4605      	mov	r5, r0
 8026bc4:	d4e4      	bmi.n	8026b90 <_fflush_r+0xc>
 8026bc6:	89a3      	ldrh	r3, [r4, #12]
 8026bc8:	059b      	lsls	r3, r3, #22
 8026bca:	d4e1      	bmi.n	8026b90 <_fflush_r+0xc>
 8026bcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026bce:	f7fd fdad 	bl	802472c <__retarget_lock_release_recursive>
 8026bd2:	e7dd      	b.n	8026b90 <_fflush_r+0xc>

08026bd4 <__swbuf_r>:
 8026bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026bd6:	460e      	mov	r6, r1
 8026bd8:	4614      	mov	r4, r2
 8026bda:	4605      	mov	r5, r0
 8026bdc:	b118      	cbz	r0, 8026be6 <__swbuf_r+0x12>
 8026bde:	6a03      	ldr	r3, [r0, #32]
 8026be0:	b90b      	cbnz	r3, 8026be6 <__swbuf_r+0x12>
 8026be2:	f7fd fb77 	bl	80242d4 <__sinit>
 8026be6:	69a3      	ldr	r3, [r4, #24]
 8026be8:	60a3      	str	r3, [r4, #8]
 8026bea:	89a3      	ldrh	r3, [r4, #12]
 8026bec:	071a      	lsls	r2, r3, #28
 8026bee:	d501      	bpl.n	8026bf4 <__swbuf_r+0x20>
 8026bf0:	6923      	ldr	r3, [r4, #16]
 8026bf2:	b943      	cbnz	r3, 8026c06 <__swbuf_r+0x32>
 8026bf4:	4621      	mov	r1, r4
 8026bf6:	4628      	mov	r0, r5
 8026bf8:	f000 f82a 	bl	8026c50 <__swsetup_r>
 8026bfc:	b118      	cbz	r0, 8026c06 <__swbuf_r+0x32>
 8026bfe:	f04f 37ff 	mov.w	r7, #4294967295
 8026c02:	4638      	mov	r0, r7
 8026c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026c06:	6823      	ldr	r3, [r4, #0]
 8026c08:	6922      	ldr	r2, [r4, #16]
 8026c0a:	1a98      	subs	r0, r3, r2
 8026c0c:	6963      	ldr	r3, [r4, #20]
 8026c0e:	b2f6      	uxtb	r6, r6
 8026c10:	4283      	cmp	r3, r0
 8026c12:	4637      	mov	r7, r6
 8026c14:	dc05      	bgt.n	8026c22 <__swbuf_r+0x4e>
 8026c16:	4621      	mov	r1, r4
 8026c18:	4628      	mov	r0, r5
 8026c1a:	f7ff ffb3 	bl	8026b84 <_fflush_r>
 8026c1e:	2800      	cmp	r0, #0
 8026c20:	d1ed      	bne.n	8026bfe <__swbuf_r+0x2a>
 8026c22:	68a3      	ldr	r3, [r4, #8]
 8026c24:	3b01      	subs	r3, #1
 8026c26:	60a3      	str	r3, [r4, #8]
 8026c28:	6823      	ldr	r3, [r4, #0]
 8026c2a:	1c5a      	adds	r2, r3, #1
 8026c2c:	6022      	str	r2, [r4, #0]
 8026c2e:	701e      	strb	r6, [r3, #0]
 8026c30:	6962      	ldr	r2, [r4, #20]
 8026c32:	1c43      	adds	r3, r0, #1
 8026c34:	429a      	cmp	r2, r3
 8026c36:	d004      	beq.n	8026c42 <__swbuf_r+0x6e>
 8026c38:	89a3      	ldrh	r3, [r4, #12]
 8026c3a:	07db      	lsls	r3, r3, #31
 8026c3c:	d5e1      	bpl.n	8026c02 <__swbuf_r+0x2e>
 8026c3e:	2e0a      	cmp	r6, #10
 8026c40:	d1df      	bne.n	8026c02 <__swbuf_r+0x2e>
 8026c42:	4621      	mov	r1, r4
 8026c44:	4628      	mov	r0, r5
 8026c46:	f7ff ff9d 	bl	8026b84 <_fflush_r>
 8026c4a:	2800      	cmp	r0, #0
 8026c4c:	d0d9      	beq.n	8026c02 <__swbuf_r+0x2e>
 8026c4e:	e7d6      	b.n	8026bfe <__swbuf_r+0x2a>

08026c50 <__swsetup_r>:
 8026c50:	b538      	push	{r3, r4, r5, lr}
 8026c52:	4b29      	ldr	r3, [pc, #164]	@ (8026cf8 <__swsetup_r+0xa8>)
 8026c54:	4605      	mov	r5, r0
 8026c56:	6818      	ldr	r0, [r3, #0]
 8026c58:	460c      	mov	r4, r1
 8026c5a:	b118      	cbz	r0, 8026c64 <__swsetup_r+0x14>
 8026c5c:	6a03      	ldr	r3, [r0, #32]
 8026c5e:	b90b      	cbnz	r3, 8026c64 <__swsetup_r+0x14>
 8026c60:	f7fd fb38 	bl	80242d4 <__sinit>
 8026c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026c68:	0719      	lsls	r1, r3, #28
 8026c6a:	d422      	bmi.n	8026cb2 <__swsetup_r+0x62>
 8026c6c:	06da      	lsls	r2, r3, #27
 8026c6e:	d407      	bmi.n	8026c80 <__swsetup_r+0x30>
 8026c70:	2209      	movs	r2, #9
 8026c72:	602a      	str	r2, [r5, #0]
 8026c74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026c78:	81a3      	strh	r3, [r4, #12]
 8026c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8026c7e:	e033      	b.n	8026ce8 <__swsetup_r+0x98>
 8026c80:	0758      	lsls	r0, r3, #29
 8026c82:	d512      	bpl.n	8026caa <__swsetup_r+0x5a>
 8026c84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026c86:	b141      	cbz	r1, 8026c9a <__swsetup_r+0x4a>
 8026c88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8026c8c:	4299      	cmp	r1, r3
 8026c8e:	d002      	beq.n	8026c96 <__swsetup_r+0x46>
 8026c90:	4628      	mov	r0, r5
 8026c92:	f7fe fbc9 	bl	8025428 <_free_r>
 8026c96:	2300      	movs	r3, #0
 8026c98:	6363      	str	r3, [r4, #52]	@ 0x34
 8026c9a:	89a3      	ldrh	r3, [r4, #12]
 8026c9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8026ca0:	81a3      	strh	r3, [r4, #12]
 8026ca2:	2300      	movs	r3, #0
 8026ca4:	6063      	str	r3, [r4, #4]
 8026ca6:	6923      	ldr	r3, [r4, #16]
 8026ca8:	6023      	str	r3, [r4, #0]
 8026caa:	89a3      	ldrh	r3, [r4, #12]
 8026cac:	f043 0308 	orr.w	r3, r3, #8
 8026cb0:	81a3      	strh	r3, [r4, #12]
 8026cb2:	6923      	ldr	r3, [r4, #16]
 8026cb4:	b94b      	cbnz	r3, 8026cca <__swsetup_r+0x7a>
 8026cb6:	89a3      	ldrh	r3, [r4, #12]
 8026cb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8026cbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8026cc0:	d003      	beq.n	8026cca <__swsetup_r+0x7a>
 8026cc2:	4621      	mov	r1, r4
 8026cc4:	4628      	mov	r0, r5
 8026cc6:	f000 f883 	bl	8026dd0 <__smakebuf_r>
 8026cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026cce:	f013 0201 	ands.w	r2, r3, #1
 8026cd2:	d00a      	beq.n	8026cea <__swsetup_r+0x9a>
 8026cd4:	2200      	movs	r2, #0
 8026cd6:	60a2      	str	r2, [r4, #8]
 8026cd8:	6962      	ldr	r2, [r4, #20]
 8026cda:	4252      	negs	r2, r2
 8026cdc:	61a2      	str	r2, [r4, #24]
 8026cde:	6922      	ldr	r2, [r4, #16]
 8026ce0:	b942      	cbnz	r2, 8026cf4 <__swsetup_r+0xa4>
 8026ce2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8026ce6:	d1c5      	bne.n	8026c74 <__swsetup_r+0x24>
 8026ce8:	bd38      	pop	{r3, r4, r5, pc}
 8026cea:	0799      	lsls	r1, r3, #30
 8026cec:	bf58      	it	pl
 8026cee:	6962      	ldrpl	r2, [r4, #20]
 8026cf0:	60a2      	str	r2, [r4, #8]
 8026cf2:	e7f4      	b.n	8026cde <__swsetup_r+0x8e>
 8026cf4:	2000      	movs	r0, #0
 8026cf6:	e7f7      	b.n	8026ce8 <__swsetup_r+0x98>
 8026cf8:	20000614 	.word	0x20000614

08026cfc <_raise_r>:
 8026cfc:	291f      	cmp	r1, #31
 8026cfe:	b538      	push	{r3, r4, r5, lr}
 8026d00:	4605      	mov	r5, r0
 8026d02:	460c      	mov	r4, r1
 8026d04:	d904      	bls.n	8026d10 <_raise_r+0x14>
 8026d06:	2316      	movs	r3, #22
 8026d08:	6003      	str	r3, [r0, #0]
 8026d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8026d0e:	bd38      	pop	{r3, r4, r5, pc}
 8026d10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8026d12:	b112      	cbz	r2, 8026d1a <_raise_r+0x1e>
 8026d14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026d18:	b94b      	cbnz	r3, 8026d2e <_raise_r+0x32>
 8026d1a:	4628      	mov	r0, r5
 8026d1c:	f000 f830 	bl	8026d80 <_getpid_r>
 8026d20:	4622      	mov	r2, r4
 8026d22:	4601      	mov	r1, r0
 8026d24:	4628      	mov	r0, r5
 8026d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026d2a:	f000 b817 	b.w	8026d5c <_kill_r>
 8026d2e:	2b01      	cmp	r3, #1
 8026d30:	d00a      	beq.n	8026d48 <_raise_r+0x4c>
 8026d32:	1c59      	adds	r1, r3, #1
 8026d34:	d103      	bne.n	8026d3e <_raise_r+0x42>
 8026d36:	2316      	movs	r3, #22
 8026d38:	6003      	str	r3, [r0, #0]
 8026d3a:	2001      	movs	r0, #1
 8026d3c:	e7e7      	b.n	8026d0e <_raise_r+0x12>
 8026d3e:	2100      	movs	r1, #0
 8026d40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8026d44:	4620      	mov	r0, r4
 8026d46:	4798      	blx	r3
 8026d48:	2000      	movs	r0, #0
 8026d4a:	e7e0      	b.n	8026d0e <_raise_r+0x12>

08026d4c <raise>:
 8026d4c:	4b02      	ldr	r3, [pc, #8]	@ (8026d58 <raise+0xc>)
 8026d4e:	4601      	mov	r1, r0
 8026d50:	6818      	ldr	r0, [r3, #0]
 8026d52:	f7ff bfd3 	b.w	8026cfc <_raise_r>
 8026d56:	bf00      	nop
 8026d58:	20000614 	.word	0x20000614

08026d5c <_kill_r>:
 8026d5c:	b538      	push	{r3, r4, r5, lr}
 8026d5e:	4d07      	ldr	r5, [pc, #28]	@ (8026d7c <_kill_r+0x20>)
 8026d60:	2300      	movs	r3, #0
 8026d62:	4604      	mov	r4, r0
 8026d64:	4608      	mov	r0, r1
 8026d66:	4611      	mov	r1, r2
 8026d68:	602b      	str	r3, [r5, #0]
 8026d6a:	f7e5 fbf3 	bl	800c554 <_kill>
 8026d6e:	1c43      	adds	r3, r0, #1
 8026d70:	d102      	bne.n	8026d78 <_kill_r+0x1c>
 8026d72:	682b      	ldr	r3, [r5, #0]
 8026d74:	b103      	cbz	r3, 8026d78 <_kill_r+0x1c>
 8026d76:	6023      	str	r3, [r4, #0]
 8026d78:	bd38      	pop	{r3, r4, r5, pc}
 8026d7a:	bf00      	nop
 8026d7c:	2000292c 	.word	0x2000292c

08026d80 <_getpid_r>:
 8026d80:	f7e5 bbe6 	b.w	800c550 <_getpid>

08026d84 <__swhatbuf_r>:
 8026d84:	b570      	push	{r4, r5, r6, lr}
 8026d86:	460c      	mov	r4, r1
 8026d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026d8c:	2900      	cmp	r1, #0
 8026d8e:	b096      	sub	sp, #88	@ 0x58
 8026d90:	4615      	mov	r5, r2
 8026d92:	461e      	mov	r6, r3
 8026d94:	da0d      	bge.n	8026db2 <__swhatbuf_r+0x2e>
 8026d96:	89a3      	ldrh	r3, [r4, #12]
 8026d98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8026d9c:	f04f 0100 	mov.w	r1, #0
 8026da0:	bf14      	ite	ne
 8026da2:	2340      	movne	r3, #64	@ 0x40
 8026da4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8026da8:	2000      	movs	r0, #0
 8026daa:	6031      	str	r1, [r6, #0]
 8026dac:	602b      	str	r3, [r5, #0]
 8026dae:	b016      	add	sp, #88	@ 0x58
 8026db0:	bd70      	pop	{r4, r5, r6, pc}
 8026db2:	466a      	mov	r2, sp
 8026db4:	f000 f848 	bl	8026e48 <_fstat_r>
 8026db8:	2800      	cmp	r0, #0
 8026dba:	dbec      	blt.n	8026d96 <__swhatbuf_r+0x12>
 8026dbc:	9901      	ldr	r1, [sp, #4]
 8026dbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8026dc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8026dc6:	4259      	negs	r1, r3
 8026dc8:	4159      	adcs	r1, r3
 8026dca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8026dce:	e7eb      	b.n	8026da8 <__swhatbuf_r+0x24>

08026dd0 <__smakebuf_r>:
 8026dd0:	898b      	ldrh	r3, [r1, #12]
 8026dd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026dd4:	079d      	lsls	r5, r3, #30
 8026dd6:	4606      	mov	r6, r0
 8026dd8:	460c      	mov	r4, r1
 8026dda:	d507      	bpl.n	8026dec <__smakebuf_r+0x1c>
 8026ddc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8026de0:	6023      	str	r3, [r4, #0]
 8026de2:	6123      	str	r3, [r4, #16]
 8026de4:	2301      	movs	r3, #1
 8026de6:	6163      	str	r3, [r4, #20]
 8026de8:	b003      	add	sp, #12
 8026dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026dec:	ab01      	add	r3, sp, #4
 8026dee:	466a      	mov	r2, sp
 8026df0:	f7ff ffc8 	bl	8026d84 <__swhatbuf_r>
 8026df4:	9f00      	ldr	r7, [sp, #0]
 8026df6:	4605      	mov	r5, r0
 8026df8:	4639      	mov	r1, r7
 8026dfa:	4630      	mov	r0, r6
 8026dfc:	f7fb faa8 	bl	8022350 <_malloc_r>
 8026e00:	b948      	cbnz	r0, 8026e16 <__smakebuf_r+0x46>
 8026e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026e06:	059a      	lsls	r2, r3, #22
 8026e08:	d4ee      	bmi.n	8026de8 <__smakebuf_r+0x18>
 8026e0a:	f023 0303 	bic.w	r3, r3, #3
 8026e0e:	f043 0302 	orr.w	r3, r3, #2
 8026e12:	81a3      	strh	r3, [r4, #12]
 8026e14:	e7e2      	b.n	8026ddc <__smakebuf_r+0xc>
 8026e16:	89a3      	ldrh	r3, [r4, #12]
 8026e18:	6020      	str	r0, [r4, #0]
 8026e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8026e1e:	81a3      	strh	r3, [r4, #12]
 8026e20:	9b01      	ldr	r3, [sp, #4]
 8026e22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8026e26:	b15b      	cbz	r3, 8026e40 <__smakebuf_r+0x70>
 8026e28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026e2c:	4630      	mov	r0, r6
 8026e2e:	f000 f81d 	bl	8026e6c <_isatty_r>
 8026e32:	b128      	cbz	r0, 8026e40 <__smakebuf_r+0x70>
 8026e34:	89a3      	ldrh	r3, [r4, #12]
 8026e36:	f023 0303 	bic.w	r3, r3, #3
 8026e3a:	f043 0301 	orr.w	r3, r3, #1
 8026e3e:	81a3      	strh	r3, [r4, #12]
 8026e40:	89a3      	ldrh	r3, [r4, #12]
 8026e42:	431d      	orrs	r5, r3
 8026e44:	81a5      	strh	r5, [r4, #12]
 8026e46:	e7cf      	b.n	8026de8 <__smakebuf_r+0x18>

08026e48 <_fstat_r>:
 8026e48:	b538      	push	{r3, r4, r5, lr}
 8026e4a:	4d07      	ldr	r5, [pc, #28]	@ (8026e68 <_fstat_r+0x20>)
 8026e4c:	2300      	movs	r3, #0
 8026e4e:	4604      	mov	r4, r0
 8026e50:	4608      	mov	r0, r1
 8026e52:	4611      	mov	r1, r2
 8026e54:	602b      	str	r3, [r5, #0]
 8026e56:	f7e5 fbac 	bl	800c5b2 <_fstat>
 8026e5a:	1c43      	adds	r3, r0, #1
 8026e5c:	d102      	bne.n	8026e64 <_fstat_r+0x1c>
 8026e5e:	682b      	ldr	r3, [r5, #0]
 8026e60:	b103      	cbz	r3, 8026e64 <_fstat_r+0x1c>
 8026e62:	6023      	str	r3, [r4, #0]
 8026e64:	bd38      	pop	{r3, r4, r5, pc}
 8026e66:	bf00      	nop
 8026e68:	2000292c 	.word	0x2000292c

08026e6c <_isatty_r>:
 8026e6c:	b538      	push	{r3, r4, r5, lr}
 8026e6e:	4d06      	ldr	r5, [pc, #24]	@ (8026e88 <_isatty_r+0x1c>)
 8026e70:	2300      	movs	r3, #0
 8026e72:	4604      	mov	r4, r0
 8026e74:	4608      	mov	r0, r1
 8026e76:	602b      	str	r3, [r5, #0]
 8026e78:	f7e5 fba0 	bl	800c5bc <_isatty>
 8026e7c:	1c43      	adds	r3, r0, #1
 8026e7e:	d102      	bne.n	8026e86 <_isatty_r+0x1a>
 8026e80:	682b      	ldr	r3, [r5, #0]
 8026e82:	b103      	cbz	r3, 8026e86 <_isatty_r+0x1a>
 8026e84:	6023      	str	r3, [r4, #0]
 8026e86:	bd38      	pop	{r3, r4, r5, pc}
 8026e88:	2000292c 	.word	0x2000292c

08026e8c <atan2>:
 8026e8c:	f000 ba30 	b.w	80272f0 <__ieee754_atan2>

08026e90 <powf>:
 8026e90:	b508      	push	{r3, lr}
 8026e92:	ed2d 8b04 	vpush	{d8-d9}
 8026e96:	eeb0 8a60 	vmov.f32	s16, s1
 8026e9a:	eeb0 9a40 	vmov.f32	s18, s0
 8026e9e:	f000 fe0f 	bl	8027ac0 <__ieee754_powf>
 8026ea2:	eeb4 8a48 	vcmp.f32	s16, s16
 8026ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026eaa:	eef0 8a40 	vmov.f32	s17, s0
 8026eae:	d63e      	bvs.n	8026f2e <powf+0x9e>
 8026eb0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8026eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026eb8:	d112      	bne.n	8026ee0 <powf+0x50>
 8026eba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8026ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026ec2:	d039      	beq.n	8026f38 <powf+0xa8>
 8026ec4:	eeb0 0a48 	vmov.f32	s0, s16
 8026ec8:	f000 f90e 	bl	80270e8 <finitef>
 8026ecc:	b378      	cbz	r0, 8026f2e <powf+0x9e>
 8026ece:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8026ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026ed6:	d52a      	bpl.n	8026f2e <powf+0x9e>
 8026ed8:	f7fd fbfc 	bl	80246d4 <__errno>
 8026edc:	2322      	movs	r3, #34	@ 0x22
 8026ede:	e014      	b.n	8026f0a <powf+0x7a>
 8026ee0:	f000 f902 	bl	80270e8 <finitef>
 8026ee4:	b998      	cbnz	r0, 8026f0e <powf+0x7e>
 8026ee6:	eeb0 0a49 	vmov.f32	s0, s18
 8026eea:	f000 f8fd 	bl	80270e8 <finitef>
 8026eee:	b170      	cbz	r0, 8026f0e <powf+0x7e>
 8026ef0:	eeb0 0a48 	vmov.f32	s0, s16
 8026ef4:	f000 f8f8 	bl	80270e8 <finitef>
 8026ef8:	b148      	cbz	r0, 8026f0e <powf+0x7e>
 8026efa:	eef4 8a68 	vcmp.f32	s17, s17
 8026efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f02:	d7e9      	bvc.n	8026ed8 <powf+0x48>
 8026f04:	f7fd fbe6 	bl	80246d4 <__errno>
 8026f08:	2321      	movs	r3, #33	@ 0x21
 8026f0a:	6003      	str	r3, [r0, #0]
 8026f0c:	e00f      	b.n	8026f2e <powf+0x9e>
 8026f0e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8026f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f16:	d10a      	bne.n	8026f2e <powf+0x9e>
 8026f18:	eeb0 0a49 	vmov.f32	s0, s18
 8026f1c:	f000 f8e4 	bl	80270e8 <finitef>
 8026f20:	b128      	cbz	r0, 8026f2e <powf+0x9e>
 8026f22:	eeb0 0a48 	vmov.f32	s0, s16
 8026f26:	f000 f8df 	bl	80270e8 <finitef>
 8026f2a:	2800      	cmp	r0, #0
 8026f2c:	d1d4      	bne.n	8026ed8 <powf+0x48>
 8026f2e:	eeb0 0a68 	vmov.f32	s0, s17
 8026f32:	ecbd 8b04 	vpop	{d8-d9}
 8026f36:	bd08      	pop	{r3, pc}
 8026f38:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8026f3c:	e7f7      	b.n	8026f2e <powf+0x9e>
	...

08026f40 <sqrtf>:
 8026f40:	b508      	push	{r3, lr}
 8026f42:	ed2d 8b02 	vpush	{d8}
 8026f46:	eeb0 8a40 	vmov.f32	s16, s0
 8026f4a:	f000 f904 	bl	8027156 <__ieee754_sqrtf>
 8026f4e:	eeb4 8a48 	vcmp.f32	s16, s16
 8026f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f56:	d60c      	bvs.n	8026f72 <sqrtf+0x32>
 8026f58:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8026f78 <sqrtf+0x38>
 8026f5c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8026f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f64:	d505      	bpl.n	8026f72 <sqrtf+0x32>
 8026f66:	f7fd fbb5 	bl	80246d4 <__errno>
 8026f6a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8026f6e:	2321      	movs	r3, #33	@ 0x21
 8026f70:	6003      	str	r3, [r0, #0]
 8026f72:	ecbd 8b02 	vpop	{d8}
 8026f76:	bd08      	pop	{r3, pc}
 8026f78:	00000000 	.word	0x00000000

08026f7c <cosf>:
 8026f7c:	ee10 3a10 	vmov	r3, s0
 8026f80:	b507      	push	{r0, r1, r2, lr}
 8026f82:	4a1e      	ldr	r2, [pc, #120]	@ (8026ffc <cosf+0x80>)
 8026f84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8026f88:	4293      	cmp	r3, r2
 8026f8a:	d806      	bhi.n	8026f9a <cosf+0x1e>
 8026f8c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8027000 <cosf+0x84>
 8026f90:	b003      	add	sp, #12
 8026f92:	f85d eb04 	ldr.w	lr, [sp], #4
 8026f96:	f000 bc13 	b.w	80277c0 <__kernel_cosf>
 8026f9a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8026f9e:	d304      	bcc.n	8026faa <cosf+0x2e>
 8026fa0:	ee30 0a40 	vsub.f32	s0, s0, s0
 8026fa4:	b003      	add	sp, #12
 8026fa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8026faa:	4668      	mov	r0, sp
 8026fac:	f001 f858 	bl	8028060 <__ieee754_rem_pio2f>
 8026fb0:	f000 0003 	and.w	r0, r0, #3
 8026fb4:	2801      	cmp	r0, #1
 8026fb6:	d009      	beq.n	8026fcc <cosf+0x50>
 8026fb8:	2802      	cmp	r0, #2
 8026fba:	d010      	beq.n	8026fde <cosf+0x62>
 8026fbc:	b9b0      	cbnz	r0, 8026fec <cosf+0x70>
 8026fbe:	eddd 0a01 	vldr	s1, [sp, #4]
 8026fc2:	ed9d 0a00 	vldr	s0, [sp]
 8026fc6:	f000 fbfb 	bl	80277c0 <__kernel_cosf>
 8026fca:	e7eb      	b.n	8026fa4 <cosf+0x28>
 8026fcc:	eddd 0a01 	vldr	s1, [sp, #4]
 8026fd0:	ed9d 0a00 	vldr	s0, [sp]
 8026fd4:	f000 fc4c 	bl	8027870 <__kernel_sinf>
 8026fd8:	eeb1 0a40 	vneg.f32	s0, s0
 8026fdc:	e7e2      	b.n	8026fa4 <cosf+0x28>
 8026fde:	eddd 0a01 	vldr	s1, [sp, #4]
 8026fe2:	ed9d 0a00 	vldr	s0, [sp]
 8026fe6:	f000 fbeb 	bl	80277c0 <__kernel_cosf>
 8026fea:	e7f5      	b.n	8026fd8 <cosf+0x5c>
 8026fec:	eddd 0a01 	vldr	s1, [sp, #4]
 8026ff0:	ed9d 0a00 	vldr	s0, [sp]
 8026ff4:	2001      	movs	r0, #1
 8026ff6:	f000 fc3b 	bl	8027870 <__kernel_sinf>
 8026ffa:	e7d3      	b.n	8026fa4 <cosf+0x28>
 8026ffc:	3f490fd8 	.word	0x3f490fd8
 8027000:	00000000 	.word	0x00000000

08027004 <sinf>:
 8027004:	ee10 3a10 	vmov	r3, s0
 8027008:	b507      	push	{r0, r1, r2, lr}
 802700a:	4a1f      	ldr	r2, [pc, #124]	@ (8027088 <sinf+0x84>)
 802700c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8027010:	4293      	cmp	r3, r2
 8027012:	d807      	bhi.n	8027024 <sinf+0x20>
 8027014:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 802708c <sinf+0x88>
 8027018:	2000      	movs	r0, #0
 802701a:	b003      	add	sp, #12
 802701c:	f85d eb04 	ldr.w	lr, [sp], #4
 8027020:	f000 bc26 	b.w	8027870 <__kernel_sinf>
 8027024:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8027028:	d304      	bcc.n	8027034 <sinf+0x30>
 802702a:	ee30 0a40 	vsub.f32	s0, s0, s0
 802702e:	b003      	add	sp, #12
 8027030:	f85d fb04 	ldr.w	pc, [sp], #4
 8027034:	4668      	mov	r0, sp
 8027036:	f001 f813 	bl	8028060 <__ieee754_rem_pio2f>
 802703a:	f000 0003 	and.w	r0, r0, #3
 802703e:	2801      	cmp	r0, #1
 8027040:	d00a      	beq.n	8027058 <sinf+0x54>
 8027042:	2802      	cmp	r0, #2
 8027044:	d00f      	beq.n	8027066 <sinf+0x62>
 8027046:	b9c0      	cbnz	r0, 802707a <sinf+0x76>
 8027048:	eddd 0a01 	vldr	s1, [sp, #4]
 802704c:	ed9d 0a00 	vldr	s0, [sp]
 8027050:	2001      	movs	r0, #1
 8027052:	f000 fc0d 	bl	8027870 <__kernel_sinf>
 8027056:	e7ea      	b.n	802702e <sinf+0x2a>
 8027058:	eddd 0a01 	vldr	s1, [sp, #4]
 802705c:	ed9d 0a00 	vldr	s0, [sp]
 8027060:	f000 fbae 	bl	80277c0 <__kernel_cosf>
 8027064:	e7e3      	b.n	802702e <sinf+0x2a>
 8027066:	eddd 0a01 	vldr	s1, [sp, #4]
 802706a:	ed9d 0a00 	vldr	s0, [sp]
 802706e:	2001      	movs	r0, #1
 8027070:	f000 fbfe 	bl	8027870 <__kernel_sinf>
 8027074:	eeb1 0a40 	vneg.f32	s0, s0
 8027078:	e7d9      	b.n	802702e <sinf+0x2a>
 802707a:	eddd 0a01 	vldr	s1, [sp, #4]
 802707e:	ed9d 0a00 	vldr	s0, [sp]
 8027082:	f000 fb9d 	bl	80277c0 <__kernel_cosf>
 8027086:	e7f5      	b.n	8027074 <sinf+0x70>
 8027088:	3f490fd8 	.word	0x3f490fd8
 802708c:	00000000 	.word	0x00000000

08027090 <tanf>:
 8027090:	ee10 3a10 	vmov	r3, s0
 8027094:	b507      	push	{r0, r1, r2, lr}
 8027096:	4a12      	ldr	r2, [pc, #72]	@ (80270e0 <tanf+0x50>)
 8027098:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802709c:	4293      	cmp	r3, r2
 802709e:	d807      	bhi.n	80270b0 <tanf+0x20>
 80270a0:	eddf 0a10 	vldr	s1, [pc, #64]	@ 80270e4 <tanf+0x54>
 80270a4:	2001      	movs	r0, #1
 80270a6:	b003      	add	sp, #12
 80270a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80270ac:	f000 bc28 	b.w	8027900 <__kernel_tanf>
 80270b0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80270b4:	d304      	bcc.n	80270c0 <tanf+0x30>
 80270b6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80270ba:	b003      	add	sp, #12
 80270bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80270c0:	4668      	mov	r0, sp
 80270c2:	f000 ffcd 	bl	8028060 <__ieee754_rem_pio2f>
 80270c6:	0040      	lsls	r0, r0, #1
 80270c8:	f000 0002 	and.w	r0, r0, #2
 80270cc:	eddd 0a01 	vldr	s1, [sp, #4]
 80270d0:	ed9d 0a00 	vldr	s0, [sp]
 80270d4:	f1c0 0001 	rsb	r0, r0, #1
 80270d8:	f000 fc12 	bl	8027900 <__kernel_tanf>
 80270dc:	e7ed      	b.n	80270ba <tanf+0x2a>
 80270de:	bf00      	nop
 80270e0:	3f490fda 	.word	0x3f490fda
 80270e4:	00000000 	.word	0x00000000

080270e8 <finitef>:
 80270e8:	ee10 3a10 	vmov	r3, s0
 80270ec:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80270f0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80270f4:	bfac      	ite	ge
 80270f6:	2000      	movge	r0, #0
 80270f8:	2001      	movlt	r0, #1
 80270fa:	4770      	bx	lr

080270fc <lroundf>:
 80270fc:	ee10 1a10 	vmov	r1, s0
 8027100:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 8027104:	2900      	cmp	r1, #0
 8027106:	f1a3 027f 	sub.w	r2, r3, #127	@ 0x7f
 802710a:	bfb4      	ite	lt
 802710c:	f04f 30ff 	movlt.w	r0, #4294967295
 8027110:	2001      	movge	r0, #1
 8027112:	2a1e      	cmp	r2, #30
 8027114:	dc1a      	bgt.n	802714c <lroundf+0x50>
 8027116:	2a00      	cmp	r2, #0
 8027118:	da03      	bge.n	8027122 <lroundf+0x26>
 802711a:	3201      	adds	r2, #1
 802711c:	bf18      	it	ne
 802711e:	2000      	movne	r0, #0
 8027120:	4770      	bx	lr
 8027122:	2a16      	cmp	r2, #22
 8027124:	bfd8      	it	le
 8027126:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 802712a:	f3c1 0116 	ubfx	r1, r1, #0, #23
 802712e:	bfd8      	it	le
 8027130:	4113      	asrle	r3, r2
 8027132:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8027136:	bfcd      	iteet	gt
 8027138:	3b96      	subgt	r3, #150	@ 0x96
 802713a:	185b      	addle	r3, r3, r1
 802713c:	f1c2 0217 	rsble	r2, r2, #23
 8027140:	fa01 f303 	lslgt.w	r3, r1, r3
 8027144:	bfd8      	it	le
 8027146:	40d3      	lsrle	r3, r2
 8027148:	4358      	muls	r0, r3
 802714a:	4770      	bx	lr
 802714c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8027150:	ee17 0a90 	vmov	r0, s15
 8027154:	4770      	bx	lr

08027156 <__ieee754_sqrtf>:
 8027156:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802715a:	4770      	bx	lr

0802715c <ceilf>:
 802715c:	ee10 3a10 	vmov	r3, s0
 8027160:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8027164:	3a7f      	subs	r2, #127	@ 0x7f
 8027166:	2a16      	cmp	r2, #22
 8027168:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 802716c:	dc2a      	bgt.n	80271c4 <ceilf+0x68>
 802716e:	2a00      	cmp	r2, #0
 8027170:	da11      	bge.n	8027196 <ceilf+0x3a>
 8027172:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80271d8 <ceilf+0x7c>
 8027176:	ee30 0a27 	vadd.f32	s0, s0, s15
 802717a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802717e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027182:	dd05      	ble.n	8027190 <ceilf+0x34>
 8027184:	2b00      	cmp	r3, #0
 8027186:	db23      	blt.n	80271d0 <ceilf+0x74>
 8027188:	2900      	cmp	r1, #0
 802718a:	bf18      	it	ne
 802718c:	f04f 537e 	movne.w	r3, #1065353216	@ 0x3f800000
 8027190:	ee00 3a10 	vmov	s0, r3
 8027194:	4770      	bx	lr
 8027196:	4911      	ldr	r1, [pc, #68]	@ (80271dc <ceilf+0x80>)
 8027198:	4111      	asrs	r1, r2
 802719a:	420b      	tst	r3, r1
 802719c:	d0fa      	beq.n	8027194 <ceilf+0x38>
 802719e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80271d8 <ceilf+0x7c>
 80271a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80271a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80271aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80271ae:	ddef      	ble.n	8027190 <ceilf+0x34>
 80271b0:	2b00      	cmp	r3, #0
 80271b2:	bfc2      	ittt	gt
 80271b4:	f44f 0000 	movgt.w	r0, #8388608	@ 0x800000
 80271b8:	fa40 f202 	asrgt.w	r2, r0, r2
 80271bc:	189b      	addgt	r3, r3, r2
 80271be:	ea23 0301 	bic.w	r3, r3, r1
 80271c2:	e7e5      	b.n	8027190 <ceilf+0x34>
 80271c4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80271c8:	d3e4      	bcc.n	8027194 <ceilf+0x38>
 80271ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 80271ce:	4770      	bx	lr
 80271d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80271d4:	e7dc      	b.n	8027190 <ceilf+0x34>
 80271d6:	bf00      	nop
 80271d8:	7149f2ca 	.word	0x7149f2ca
 80271dc:	007fffff 	.word	0x007fffff

080271e0 <floorf>:
 80271e0:	ee10 3a10 	vmov	r3, s0
 80271e4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80271e8:	3a7f      	subs	r2, #127	@ 0x7f
 80271ea:	2a16      	cmp	r2, #22
 80271ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80271f0:	dc2b      	bgt.n	802724a <floorf+0x6a>
 80271f2:	2a00      	cmp	r2, #0
 80271f4:	da12      	bge.n	802721c <floorf+0x3c>
 80271f6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802725c <floorf+0x7c>
 80271fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80271fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8027202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027206:	dd06      	ble.n	8027216 <floorf+0x36>
 8027208:	2b00      	cmp	r3, #0
 802720a:	da24      	bge.n	8027256 <floorf+0x76>
 802720c:	2900      	cmp	r1, #0
 802720e:	4b14      	ldr	r3, [pc, #80]	@ (8027260 <floorf+0x80>)
 8027210:	bf08      	it	eq
 8027212:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8027216:	ee00 3a10 	vmov	s0, r3
 802721a:	4770      	bx	lr
 802721c:	4911      	ldr	r1, [pc, #68]	@ (8027264 <floorf+0x84>)
 802721e:	4111      	asrs	r1, r2
 8027220:	420b      	tst	r3, r1
 8027222:	d0fa      	beq.n	802721a <floorf+0x3a>
 8027224:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 802725c <floorf+0x7c>
 8027228:	ee30 0a27 	vadd.f32	s0, s0, s15
 802722c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8027230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027234:	ddef      	ble.n	8027216 <floorf+0x36>
 8027236:	2b00      	cmp	r3, #0
 8027238:	bfbe      	ittt	lt
 802723a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 802723e:	fa40 f202 	asrlt.w	r2, r0, r2
 8027242:	189b      	addlt	r3, r3, r2
 8027244:	ea23 0301 	bic.w	r3, r3, r1
 8027248:	e7e5      	b.n	8027216 <floorf+0x36>
 802724a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802724e:	d3e4      	bcc.n	802721a <floorf+0x3a>
 8027250:	ee30 0a00 	vadd.f32	s0, s0, s0
 8027254:	4770      	bx	lr
 8027256:	2300      	movs	r3, #0
 8027258:	e7dd      	b.n	8027216 <floorf+0x36>
 802725a:	bf00      	nop
 802725c:	7149f2ca 	.word	0x7149f2ca
 8027260:	bf800000 	.word	0xbf800000
 8027264:	007fffff 	.word	0x007fffff

08027268 <roundf>:
 8027268:	ee10 0a10 	vmov	r0, s0
 802726c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8027270:	3a7f      	subs	r2, #127	@ 0x7f
 8027272:	2a16      	cmp	r2, #22
 8027274:	dc15      	bgt.n	80272a2 <roundf+0x3a>
 8027276:	2a00      	cmp	r2, #0
 8027278:	da08      	bge.n	802728c <roundf+0x24>
 802727a:	3201      	adds	r2, #1
 802727c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8027280:	d101      	bne.n	8027286 <roundf+0x1e>
 8027282:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8027286:	ee00 3a10 	vmov	s0, r3
 802728a:	4770      	bx	lr
 802728c:	4907      	ldr	r1, [pc, #28]	@ (80272ac <roundf+0x44>)
 802728e:	4111      	asrs	r1, r2
 8027290:	4201      	tst	r1, r0
 8027292:	d0fa      	beq.n	802728a <roundf+0x22>
 8027294:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8027298:	4113      	asrs	r3, r2
 802729a:	4403      	add	r3, r0
 802729c:	ea23 0301 	bic.w	r3, r3, r1
 80272a0:	e7f1      	b.n	8027286 <roundf+0x1e>
 80272a2:	2a80      	cmp	r2, #128	@ 0x80
 80272a4:	d1f1      	bne.n	802728a <roundf+0x22>
 80272a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80272aa:	4770      	bx	lr
 80272ac:	007fffff 	.word	0x007fffff

080272b0 <truncf>:
 80272b0:	ee10 0a10 	vmov	r0, s0
 80272b4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80272b8:	3a7f      	subs	r2, #127	@ 0x7f
 80272ba:	2a16      	cmp	r2, #22
 80272bc:	dc0e      	bgt.n	80272dc <truncf+0x2c>
 80272be:	2a00      	cmp	r2, #0
 80272c0:	bfa4      	itt	ge
 80272c2:	4909      	ldrge	r1, [pc, #36]	@ (80272e8 <truncf+0x38>)
 80272c4:	fa41 f202 	asrge.w	r2, r1, r2
 80272c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80272cc:	bfa5      	ittet	ge
 80272ce:	4002      	andge	r2, r0
 80272d0:	4313      	orrge	r3, r2
 80272d2:	ee00 3a10 	vmovlt	s0, r3
 80272d6:	ee00 3a10 	vmovge	s0, r3
 80272da:	4770      	bx	lr
 80272dc:	2a80      	cmp	r2, #128	@ 0x80
 80272de:	bf08      	it	eq
 80272e0:	ee30 0a00 	vaddeq.f32	s0, s0, s0
 80272e4:	4770      	bx	lr
 80272e6:	bf00      	nop
 80272e8:	ff800000 	.word	0xff800000
 80272ec:	00000000 	.word	0x00000000

080272f0 <__ieee754_atan2>:
 80272f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80272f4:	ec57 6b11 	vmov	r6, r7, d1
 80272f8:	4273      	negs	r3, r6
 80272fa:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8027478 <__ieee754_atan2+0x188>
 80272fe:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8027302:	4333      	orrs	r3, r6
 8027304:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8027308:	4543      	cmp	r3, r8
 802730a:	ec51 0b10 	vmov	r0, r1, d0
 802730e:	4635      	mov	r5, r6
 8027310:	d809      	bhi.n	8027326 <__ieee754_atan2+0x36>
 8027312:	4244      	negs	r4, r0
 8027314:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8027318:	4304      	orrs	r4, r0
 802731a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 802731e:	4544      	cmp	r4, r8
 8027320:	468e      	mov	lr, r1
 8027322:	4681      	mov	r9, r0
 8027324:	d907      	bls.n	8027336 <__ieee754_atan2+0x46>
 8027326:	4632      	mov	r2, r6
 8027328:	463b      	mov	r3, r7
 802732a:	f7e0 fef7 	bl	800811c <__adddf3>
 802732e:	ec41 0b10 	vmov	d0, r0, r1
 8027332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027336:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 802733a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 802733e:	4334      	orrs	r4, r6
 8027340:	d103      	bne.n	802734a <__ieee754_atan2+0x5a>
 8027342:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027346:	f000 b89b 	b.w	8027480 <atan>
 802734a:	17bc      	asrs	r4, r7, #30
 802734c:	f004 0402 	and.w	r4, r4, #2
 8027350:	ea53 0909 	orrs.w	r9, r3, r9
 8027354:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8027358:	d107      	bne.n	802736a <__ieee754_atan2+0x7a>
 802735a:	2c02      	cmp	r4, #2
 802735c:	d05f      	beq.n	802741e <__ieee754_atan2+0x12e>
 802735e:	2c03      	cmp	r4, #3
 8027360:	d1e5      	bne.n	802732e <__ieee754_atan2+0x3e>
 8027362:	a141      	add	r1, pc, #260	@ (adr r1, 8027468 <__ieee754_atan2+0x178>)
 8027364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027368:	e7e1      	b.n	802732e <__ieee754_atan2+0x3e>
 802736a:	4315      	orrs	r5, r2
 802736c:	d106      	bne.n	802737c <__ieee754_atan2+0x8c>
 802736e:	f1be 0f00 	cmp.w	lr, #0
 8027372:	da5f      	bge.n	8027434 <__ieee754_atan2+0x144>
 8027374:	a13e      	add	r1, pc, #248	@ (adr r1, 8027470 <__ieee754_atan2+0x180>)
 8027376:	e9d1 0100 	ldrd	r0, r1, [r1]
 802737a:	e7d8      	b.n	802732e <__ieee754_atan2+0x3e>
 802737c:	4542      	cmp	r2, r8
 802737e:	d10f      	bne.n	80273a0 <__ieee754_atan2+0xb0>
 8027380:	4293      	cmp	r3, r2
 8027382:	f104 34ff 	add.w	r4, r4, #4294967295
 8027386:	d107      	bne.n	8027398 <__ieee754_atan2+0xa8>
 8027388:	2c02      	cmp	r4, #2
 802738a:	d84c      	bhi.n	8027426 <__ieee754_atan2+0x136>
 802738c:	4b34      	ldr	r3, [pc, #208]	@ (8027460 <__ieee754_atan2+0x170>)
 802738e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8027392:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027396:	e7ca      	b.n	802732e <__ieee754_atan2+0x3e>
 8027398:	2c02      	cmp	r4, #2
 802739a:	d848      	bhi.n	802742e <__ieee754_atan2+0x13e>
 802739c:	4b31      	ldr	r3, [pc, #196]	@ (8027464 <__ieee754_atan2+0x174>)
 802739e:	e7f6      	b.n	802738e <__ieee754_atan2+0x9e>
 80273a0:	4543      	cmp	r3, r8
 80273a2:	d0e4      	beq.n	802736e <__ieee754_atan2+0x7e>
 80273a4:	1a9b      	subs	r3, r3, r2
 80273a6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80273aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80273ae:	da1e      	bge.n	80273ee <__ieee754_atan2+0xfe>
 80273b0:	2f00      	cmp	r7, #0
 80273b2:	da01      	bge.n	80273b8 <__ieee754_atan2+0xc8>
 80273b4:	323c      	adds	r2, #60	@ 0x3c
 80273b6:	db1e      	blt.n	80273f6 <__ieee754_atan2+0x106>
 80273b8:	4632      	mov	r2, r6
 80273ba:	463b      	mov	r3, r7
 80273bc:	f7e1 f98e 	bl	80086dc <__aeabi_ddiv>
 80273c0:	ec41 0b10 	vmov	d0, r0, r1
 80273c4:	f000 f9f4 	bl	80277b0 <fabs>
 80273c8:	f000 f85a 	bl	8027480 <atan>
 80273cc:	ec51 0b10 	vmov	r0, r1, d0
 80273d0:	2c01      	cmp	r4, #1
 80273d2:	d013      	beq.n	80273fc <__ieee754_atan2+0x10c>
 80273d4:	2c02      	cmp	r4, #2
 80273d6:	d015      	beq.n	8027404 <__ieee754_atan2+0x114>
 80273d8:	2c00      	cmp	r4, #0
 80273da:	d0a8      	beq.n	802732e <__ieee754_atan2+0x3e>
 80273dc:	a318      	add	r3, pc, #96	@ (adr r3, 8027440 <__ieee754_atan2+0x150>)
 80273de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80273e2:	f7e0 fe99 	bl	8008118 <__aeabi_dsub>
 80273e6:	a318      	add	r3, pc, #96	@ (adr r3, 8027448 <__ieee754_atan2+0x158>)
 80273e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80273ec:	e014      	b.n	8027418 <__ieee754_atan2+0x128>
 80273ee:	a118      	add	r1, pc, #96	@ (adr r1, 8027450 <__ieee754_atan2+0x160>)
 80273f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80273f4:	e7ec      	b.n	80273d0 <__ieee754_atan2+0xe0>
 80273f6:	2000      	movs	r0, #0
 80273f8:	2100      	movs	r1, #0
 80273fa:	e7e9      	b.n	80273d0 <__ieee754_atan2+0xe0>
 80273fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8027400:	4619      	mov	r1, r3
 8027402:	e794      	b.n	802732e <__ieee754_atan2+0x3e>
 8027404:	a30e      	add	r3, pc, #56	@ (adr r3, 8027440 <__ieee754_atan2+0x150>)
 8027406:	e9d3 2300 	ldrd	r2, r3, [r3]
 802740a:	f7e0 fe85 	bl	8008118 <__aeabi_dsub>
 802740e:	4602      	mov	r2, r0
 8027410:	460b      	mov	r3, r1
 8027412:	a10d      	add	r1, pc, #52	@ (adr r1, 8027448 <__ieee754_atan2+0x158>)
 8027414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027418:	f7e0 fe7e 	bl	8008118 <__aeabi_dsub>
 802741c:	e787      	b.n	802732e <__ieee754_atan2+0x3e>
 802741e:	a10a      	add	r1, pc, #40	@ (adr r1, 8027448 <__ieee754_atan2+0x158>)
 8027420:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027424:	e783      	b.n	802732e <__ieee754_atan2+0x3e>
 8027426:	a10c      	add	r1, pc, #48	@ (adr r1, 8027458 <__ieee754_atan2+0x168>)
 8027428:	e9d1 0100 	ldrd	r0, r1, [r1]
 802742c:	e77f      	b.n	802732e <__ieee754_atan2+0x3e>
 802742e:	2000      	movs	r0, #0
 8027430:	2100      	movs	r1, #0
 8027432:	e77c      	b.n	802732e <__ieee754_atan2+0x3e>
 8027434:	a106      	add	r1, pc, #24	@ (adr r1, 8027450 <__ieee754_atan2+0x160>)
 8027436:	e9d1 0100 	ldrd	r0, r1, [r1]
 802743a:	e778      	b.n	802732e <__ieee754_atan2+0x3e>
 802743c:	f3af 8000 	nop.w
 8027440:	33145c07 	.word	0x33145c07
 8027444:	3ca1a626 	.word	0x3ca1a626
 8027448:	54442d18 	.word	0x54442d18
 802744c:	400921fb 	.word	0x400921fb
 8027450:	54442d18 	.word	0x54442d18
 8027454:	3ff921fb 	.word	0x3ff921fb
 8027458:	54442d18 	.word	0x54442d18
 802745c:	3fe921fb 	.word	0x3fe921fb
 8027460:	08030eb8 	.word	0x08030eb8
 8027464:	08030ea0 	.word	0x08030ea0
 8027468:	54442d18 	.word	0x54442d18
 802746c:	c00921fb 	.word	0xc00921fb
 8027470:	54442d18 	.word	0x54442d18
 8027474:	bff921fb 	.word	0xbff921fb
 8027478:	7ff00000 	.word	0x7ff00000
 802747c:	00000000 	.word	0x00000000

08027480 <atan>:
 8027480:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027484:	ec55 4b10 	vmov	r4, r5, d0
 8027488:	4bbf      	ldr	r3, [pc, #764]	@ (8027788 <atan+0x308>)
 802748a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 802748e:	429e      	cmp	r6, r3
 8027490:	46ab      	mov	fp, r5
 8027492:	d918      	bls.n	80274c6 <atan+0x46>
 8027494:	4bbd      	ldr	r3, [pc, #756]	@ (802778c <atan+0x30c>)
 8027496:	429e      	cmp	r6, r3
 8027498:	d801      	bhi.n	802749e <atan+0x1e>
 802749a:	d109      	bne.n	80274b0 <atan+0x30>
 802749c:	b144      	cbz	r4, 80274b0 <atan+0x30>
 802749e:	4622      	mov	r2, r4
 80274a0:	462b      	mov	r3, r5
 80274a2:	4620      	mov	r0, r4
 80274a4:	4629      	mov	r1, r5
 80274a6:	f7e0 fe39 	bl	800811c <__adddf3>
 80274aa:	4604      	mov	r4, r0
 80274ac:	460d      	mov	r5, r1
 80274ae:	e006      	b.n	80274be <atan+0x3e>
 80274b0:	f1bb 0f00 	cmp.w	fp, #0
 80274b4:	f340 812b 	ble.w	802770e <atan+0x28e>
 80274b8:	a597      	add	r5, pc, #604	@ (adr r5, 8027718 <atan+0x298>)
 80274ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80274be:	ec45 4b10 	vmov	d0, r4, r5
 80274c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80274c6:	4bb2      	ldr	r3, [pc, #712]	@ (8027790 <atan+0x310>)
 80274c8:	429e      	cmp	r6, r3
 80274ca:	d813      	bhi.n	80274f4 <atan+0x74>
 80274cc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80274d0:	429e      	cmp	r6, r3
 80274d2:	d80c      	bhi.n	80274ee <atan+0x6e>
 80274d4:	a392      	add	r3, pc, #584	@ (adr r3, 8027720 <atan+0x2a0>)
 80274d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80274da:	4620      	mov	r0, r4
 80274dc:	4629      	mov	r1, r5
 80274de:	f7e0 fe1d 	bl	800811c <__adddf3>
 80274e2:	4bac      	ldr	r3, [pc, #688]	@ (8027794 <atan+0x314>)
 80274e4:	2200      	movs	r2, #0
 80274e6:	f7e1 fa5f 	bl	80089a8 <__aeabi_dcmpgt>
 80274ea:	2800      	cmp	r0, #0
 80274ec:	d1e7      	bne.n	80274be <atan+0x3e>
 80274ee:	f04f 3aff 	mov.w	sl, #4294967295
 80274f2:	e029      	b.n	8027548 <atan+0xc8>
 80274f4:	f000 f95c 	bl	80277b0 <fabs>
 80274f8:	4ba7      	ldr	r3, [pc, #668]	@ (8027798 <atan+0x318>)
 80274fa:	429e      	cmp	r6, r3
 80274fc:	ec55 4b10 	vmov	r4, r5, d0
 8027500:	f200 80bc 	bhi.w	802767c <atan+0x1fc>
 8027504:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8027508:	429e      	cmp	r6, r3
 802750a:	f200 809e 	bhi.w	802764a <atan+0x1ca>
 802750e:	4622      	mov	r2, r4
 8027510:	462b      	mov	r3, r5
 8027512:	4620      	mov	r0, r4
 8027514:	4629      	mov	r1, r5
 8027516:	f7e0 fe01 	bl	800811c <__adddf3>
 802751a:	4b9e      	ldr	r3, [pc, #632]	@ (8027794 <atan+0x314>)
 802751c:	2200      	movs	r2, #0
 802751e:	f7e0 fdfb 	bl	8008118 <__aeabi_dsub>
 8027522:	2200      	movs	r2, #0
 8027524:	4606      	mov	r6, r0
 8027526:	460f      	mov	r7, r1
 8027528:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 802752c:	4620      	mov	r0, r4
 802752e:	4629      	mov	r1, r5
 8027530:	f7e0 fdf4 	bl	800811c <__adddf3>
 8027534:	4602      	mov	r2, r0
 8027536:	460b      	mov	r3, r1
 8027538:	4630      	mov	r0, r6
 802753a:	4639      	mov	r1, r7
 802753c:	f7e1 f8ce 	bl	80086dc <__aeabi_ddiv>
 8027540:	f04f 0a00 	mov.w	sl, #0
 8027544:	4604      	mov	r4, r0
 8027546:	460d      	mov	r5, r1
 8027548:	4622      	mov	r2, r4
 802754a:	462b      	mov	r3, r5
 802754c:	4620      	mov	r0, r4
 802754e:	4629      	mov	r1, r5
 8027550:	f7e0 ff9a 	bl	8008488 <__aeabi_dmul>
 8027554:	4602      	mov	r2, r0
 8027556:	460b      	mov	r3, r1
 8027558:	4680      	mov	r8, r0
 802755a:	4689      	mov	r9, r1
 802755c:	f7e0 ff94 	bl	8008488 <__aeabi_dmul>
 8027560:	a371      	add	r3, pc, #452	@ (adr r3, 8027728 <atan+0x2a8>)
 8027562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027566:	4606      	mov	r6, r0
 8027568:	460f      	mov	r7, r1
 802756a:	f7e0 ff8d 	bl	8008488 <__aeabi_dmul>
 802756e:	a370      	add	r3, pc, #448	@ (adr r3, 8027730 <atan+0x2b0>)
 8027570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027574:	f7e0 fdd2 	bl	800811c <__adddf3>
 8027578:	4632      	mov	r2, r6
 802757a:	463b      	mov	r3, r7
 802757c:	f7e0 ff84 	bl	8008488 <__aeabi_dmul>
 8027580:	a36d      	add	r3, pc, #436	@ (adr r3, 8027738 <atan+0x2b8>)
 8027582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027586:	f7e0 fdc9 	bl	800811c <__adddf3>
 802758a:	4632      	mov	r2, r6
 802758c:	463b      	mov	r3, r7
 802758e:	f7e0 ff7b 	bl	8008488 <__aeabi_dmul>
 8027592:	a36b      	add	r3, pc, #428	@ (adr r3, 8027740 <atan+0x2c0>)
 8027594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027598:	f7e0 fdc0 	bl	800811c <__adddf3>
 802759c:	4632      	mov	r2, r6
 802759e:	463b      	mov	r3, r7
 80275a0:	f7e0 ff72 	bl	8008488 <__aeabi_dmul>
 80275a4:	a368      	add	r3, pc, #416	@ (adr r3, 8027748 <atan+0x2c8>)
 80275a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80275aa:	f7e0 fdb7 	bl	800811c <__adddf3>
 80275ae:	4632      	mov	r2, r6
 80275b0:	463b      	mov	r3, r7
 80275b2:	f7e0 ff69 	bl	8008488 <__aeabi_dmul>
 80275b6:	a366      	add	r3, pc, #408	@ (adr r3, 8027750 <atan+0x2d0>)
 80275b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80275bc:	f7e0 fdae 	bl	800811c <__adddf3>
 80275c0:	4642      	mov	r2, r8
 80275c2:	464b      	mov	r3, r9
 80275c4:	f7e0 ff60 	bl	8008488 <__aeabi_dmul>
 80275c8:	a363      	add	r3, pc, #396	@ (adr r3, 8027758 <atan+0x2d8>)
 80275ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80275ce:	4680      	mov	r8, r0
 80275d0:	4689      	mov	r9, r1
 80275d2:	4630      	mov	r0, r6
 80275d4:	4639      	mov	r1, r7
 80275d6:	f7e0 ff57 	bl	8008488 <__aeabi_dmul>
 80275da:	a361      	add	r3, pc, #388	@ (adr r3, 8027760 <atan+0x2e0>)
 80275dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80275e0:	f7e0 fd9a 	bl	8008118 <__aeabi_dsub>
 80275e4:	4632      	mov	r2, r6
 80275e6:	463b      	mov	r3, r7
 80275e8:	f7e0 ff4e 	bl	8008488 <__aeabi_dmul>
 80275ec:	a35e      	add	r3, pc, #376	@ (adr r3, 8027768 <atan+0x2e8>)
 80275ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80275f2:	f7e0 fd91 	bl	8008118 <__aeabi_dsub>
 80275f6:	4632      	mov	r2, r6
 80275f8:	463b      	mov	r3, r7
 80275fa:	f7e0 ff45 	bl	8008488 <__aeabi_dmul>
 80275fe:	a35c      	add	r3, pc, #368	@ (adr r3, 8027770 <atan+0x2f0>)
 8027600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027604:	f7e0 fd88 	bl	8008118 <__aeabi_dsub>
 8027608:	4632      	mov	r2, r6
 802760a:	463b      	mov	r3, r7
 802760c:	f7e0 ff3c 	bl	8008488 <__aeabi_dmul>
 8027610:	a359      	add	r3, pc, #356	@ (adr r3, 8027778 <atan+0x2f8>)
 8027612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027616:	f7e0 fd7f 	bl	8008118 <__aeabi_dsub>
 802761a:	4632      	mov	r2, r6
 802761c:	463b      	mov	r3, r7
 802761e:	f7e0 ff33 	bl	8008488 <__aeabi_dmul>
 8027622:	4602      	mov	r2, r0
 8027624:	460b      	mov	r3, r1
 8027626:	4640      	mov	r0, r8
 8027628:	4649      	mov	r1, r9
 802762a:	f7e0 fd77 	bl	800811c <__adddf3>
 802762e:	4622      	mov	r2, r4
 8027630:	462b      	mov	r3, r5
 8027632:	f7e0 ff29 	bl	8008488 <__aeabi_dmul>
 8027636:	f1ba 3fff 	cmp.w	sl, #4294967295
 802763a:	4602      	mov	r2, r0
 802763c:	460b      	mov	r3, r1
 802763e:	d148      	bne.n	80276d2 <atan+0x252>
 8027640:	4620      	mov	r0, r4
 8027642:	4629      	mov	r1, r5
 8027644:	f7e0 fd68 	bl	8008118 <__aeabi_dsub>
 8027648:	e72f      	b.n	80274aa <atan+0x2a>
 802764a:	4b52      	ldr	r3, [pc, #328]	@ (8027794 <atan+0x314>)
 802764c:	2200      	movs	r2, #0
 802764e:	4620      	mov	r0, r4
 8027650:	4629      	mov	r1, r5
 8027652:	f7e0 fd61 	bl	8008118 <__aeabi_dsub>
 8027656:	4b4f      	ldr	r3, [pc, #316]	@ (8027794 <atan+0x314>)
 8027658:	4606      	mov	r6, r0
 802765a:	460f      	mov	r7, r1
 802765c:	2200      	movs	r2, #0
 802765e:	4620      	mov	r0, r4
 8027660:	4629      	mov	r1, r5
 8027662:	f7e0 fd5b 	bl	800811c <__adddf3>
 8027666:	4602      	mov	r2, r0
 8027668:	460b      	mov	r3, r1
 802766a:	4630      	mov	r0, r6
 802766c:	4639      	mov	r1, r7
 802766e:	f7e1 f835 	bl	80086dc <__aeabi_ddiv>
 8027672:	f04f 0a01 	mov.w	sl, #1
 8027676:	4604      	mov	r4, r0
 8027678:	460d      	mov	r5, r1
 802767a:	e765      	b.n	8027548 <atan+0xc8>
 802767c:	4b47      	ldr	r3, [pc, #284]	@ (802779c <atan+0x31c>)
 802767e:	429e      	cmp	r6, r3
 8027680:	d21c      	bcs.n	80276bc <atan+0x23c>
 8027682:	4b47      	ldr	r3, [pc, #284]	@ (80277a0 <atan+0x320>)
 8027684:	2200      	movs	r2, #0
 8027686:	4620      	mov	r0, r4
 8027688:	4629      	mov	r1, r5
 802768a:	f7e0 fd45 	bl	8008118 <__aeabi_dsub>
 802768e:	4b44      	ldr	r3, [pc, #272]	@ (80277a0 <atan+0x320>)
 8027690:	4606      	mov	r6, r0
 8027692:	460f      	mov	r7, r1
 8027694:	2200      	movs	r2, #0
 8027696:	4620      	mov	r0, r4
 8027698:	4629      	mov	r1, r5
 802769a:	f7e0 fef5 	bl	8008488 <__aeabi_dmul>
 802769e:	4b3d      	ldr	r3, [pc, #244]	@ (8027794 <atan+0x314>)
 80276a0:	2200      	movs	r2, #0
 80276a2:	f7e0 fd3b 	bl	800811c <__adddf3>
 80276a6:	4602      	mov	r2, r0
 80276a8:	460b      	mov	r3, r1
 80276aa:	4630      	mov	r0, r6
 80276ac:	4639      	mov	r1, r7
 80276ae:	f7e1 f815 	bl	80086dc <__aeabi_ddiv>
 80276b2:	f04f 0a02 	mov.w	sl, #2
 80276b6:	4604      	mov	r4, r0
 80276b8:	460d      	mov	r5, r1
 80276ba:	e745      	b.n	8027548 <atan+0xc8>
 80276bc:	4622      	mov	r2, r4
 80276be:	462b      	mov	r3, r5
 80276c0:	4938      	ldr	r1, [pc, #224]	@ (80277a4 <atan+0x324>)
 80276c2:	2000      	movs	r0, #0
 80276c4:	f7e1 f80a 	bl	80086dc <__aeabi_ddiv>
 80276c8:	f04f 0a03 	mov.w	sl, #3
 80276cc:	4604      	mov	r4, r0
 80276ce:	460d      	mov	r5, r1
 80276d0:	e73a      	b.n	8027548 <atan+0xc8>
 80276d2:	4b35      	ldr	r3, [pc, #212]	@ (80277a8 <atan+0x328>)
 80276d4:	4e35      	ldr	r6, [pc, #212]	@ (80277ac <atan+0x32c>)
 80276d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80276da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80276de:	f7e0 fd1b 	bl	8008118 <__aeabi_dsub>
 80276e2:	4622      	mov	r2, r4
 80276e4:	462b      	mov	r3, r5
 80276e6:	f7e0 fd17 	bl	8008118 <__aeabi_dsub>
 80276ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80276ee:	4602      	mov	r2, r0
 80276f0:	460b      	mov	r3, r1
 80276f2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80276f6:	f7e0 fd0f 	bl	8008118 <__aeabi_dsub>
 80276fa:	f1bb 0f00 	cmp.w	fp, #0
 80276fe:	4604      	mov	r4, r0
 8027700:	460d      	mov	r5, r1
 8027702:	f6bf aedc 	bge.w	80274be <atan+0x3e>
 8027706:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802770a:	461d      	mov	r5, r3
 802770c:	e6d7      	b.n	80274be <atan+0x3e>
 802770e:	a51c      	add	r5, pc, #112	@ (adr r5, 8027780 <atan+0x300>)
 8027710:	e9d5 4500 	ldrd	r4, r5, [r5]
 8027714:	e6d3      	b.n	80274be <atan+0x3e>
 8027716:	bf00      	nop
 8027718:	54442d18 	.word	0x54442d18
 802771c:	3ff921fb 	.word	0x3ff921fb
 8027720:	8800759c 	.word	0x8800759c
 8027724:	7e37e43c 	.word	0x7e37e43c
 8027728:	e322da11 	.word	0xe322da11
 802772c:	3f90ad3a 	.word	0x3f90ad3a
 8027730:	24760deb 	.word	0x24760deb
 8027734:	3fa97b4b 	.word	0x3fa97b4b
 8027738:	a0d03d51 	.word	0xa0d03d51
 802773c:	3fb10d66 	.word	0x3fb10d66
 8027740:	c54c206e 	.word	0xc54c206e
 8027744:	3fb745cd 	.word	0x3fb745cd
 8027748:	920083ff 	.word	0x920083ff
 802774c:	3fc24924 	.word	0x3fc24924
 8027750:	5555550d 	.word	0x5555550d
 8027754:	3fd55555 	.word	0x3fd55555
 8027758:	2c6a6c2f 	.word	0x2c6a6c2f
 802775c:	bfa2b444 	.word	0xbfa2b444
 8027760:	52defd9a 	.word	0x52defd9a
 8027764:	3fadde2d 	.word	0x3fadde2d
 8027768:	af749a6d 	.word	0xaf749a6d
 802776c:	3fb3b0f2 	.word	0x3fb3b0f2
 8027770:	fe231671 	.word	0xfe231671
 8027774:	3fbc71c6 	.word	0x3fbc71c6
 8027778:	9998ebc4 	.word	0x9998ebc4
 802777c:	3fc99999 	.word	0x3fc99999
 8027780:	54442d18 	.word	0x54442d18
 8027784:	bff921fb 	.word	0xbff921fb
 8027788:	440fffff 	.word	0x440fffff
 802778c:	7ff00000 	.word	0x7ff00000
 8027790:	3fdbffff 	.word	0x3fdbffff
 8027794:	3ff00000 	.word	0x3ff00000
 8027798:	3ff2ffff 	.word	0x3ff2ffff
 802779c:	40038000 	.word	0x40038000
 80277a0:	3ff80000 	.word	0x3ff80000
 80277a4:	bff00000 	.word	0xbff00000
 80277a8:	08030ed0 	.word	0x08030ed0
 80277ac:	08030ef0 	.word	0x08030ef0

080277b0 <fabs>:
 80277b0:	ec51 0b10 	vmov	r0, r1, d0
 80277b4:	4602      	mov	r2, r0
 80277b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80277ba:	ec43 2b10 	vmov	d0, r2, r3
 80277be:	4770      	bx	lr

080277c0 <__kernel_cosf>:
 80277c0:	ee10 3a10 	vmov	r3, s0
 80277c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80277c8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80277cc:	eef0 6a40 	vmov.f32	s13, s0
 80277d0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80277d4:	d204      	bcs.n	80277e0 <__kernel_cosf+0x20>
 80277d6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80277da:	ee17 2a90 	vmov	r2, s15
 80277de:	b342      	cbz	r2, 8027832 <__kernel_cosf+0x72>
 80277e0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80277e4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8027850 <__kernel_cosf+0x90>
 80277e8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8027854 <__kernel_cosf+0x94>
 80277ec:	4a1a      	ldr	r2, [pc, #104]	@ (8027858 <__kernel_cosf+0x98>)
 80277ee:	eea7 6a27 	vfma.f32	s12, s14, s15
 80277f2:	4293      	cmp	r3, r2
 80277f4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802785c <__kernel_cosf+0x9c>
 80277f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80277fc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8027860 <__kernel_cosf+0xa0>
 8027800:	eea7 6a87 	vfma.f32	s12, s15, s14
 8027804:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8027864 <__kernel_cosf+0xa4>
 8027808:	eee6 7a07 	vfma.f32	s15, s12, s14
 802780c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8027868 <__kernel_cosf+0xa8>
 8027810:	eea7 6a87 	vfma.f32	s12, s15, s14
 8027814:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8027818:	ee26 6a07 	vmul.f32	s12, s12, s14
 802781c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8027820:	eee7 0a06 	vfma.f32	s1, s14, s12
 8027824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8027828:	d804      	bhi.n	8027834 <__kernel_cosf+0x74>
 802782a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802782e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8027832:	4770      	bx	lr
 8027834:	4a0d      	ldr	r2, [pc, #52]	@ (802786c <__kernel_cosf+0xac>)
 8027836:	4293      	cmp	r3, r2
 8027838:	bf9a      	itte	ls
 802783a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 802783e:	ee07 3a10 	vmovls	s14, r3
 8027842:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8027846:	ee30 0a47 	vsub.f32	s0, s0, s14
 802784a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802784e:	e7ec      	b.n	802782a <__kernel_cosf+0x6a>
 8027850:	ad47d74e 	.word	0xad47d74e
 8027854:	310f74f6 	.word	0x310f74f6
 8027858:	3e999999 	.word	0x3e999999
 802785c:	b493f27c 	.word	0xb493f27c
 8027860:	37d00d01 	.word	0x37d00d01
 8027864:	bab60b61 	.word	0xbab60b61
 8027868:	3d2aaaab 	.word	0x3d2aaaab
 802786c:	3f480000 	.word	0x3f480000

08027870 <__kernel_sinf>:
 8027870:	ee10 3a10 	vmov	r3, s0
 8027874:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8027878:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802787c:	d204      	bcs.n	8027888 <__kernel_sinf+0x18>
 802787e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8027882:	ee17 3a90 	vmov	r3, s15
 8027886:	b35b      	cbz	r3, 80278e0 <__kernel_sinf+0x70>
 8027888:	ee20 7a00 	vmul.f32	s14, s0, s0
 802788c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80278e4 <__kernel_sinf+0x74>
 8027890:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80278e8 <__kernel_sinf+0x78>
 8027894:	eea7 6a27 	vfma.f32	s12, s14, s15
 8027898:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80278ec <__kernel_sinf+0x7c>
 802789c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80278a0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80278f0 <__kernel_sinf+0x80>
 80278a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80278a8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80278f4 <__kernel_sinf+0x84>
 80278ac:	ee60 6a07 	vmul.f32	s13, s0, s14
 80278b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80278b4:	b930      	cbnz	r0, 80278c4 <__kernel_sinf+0x54>
 80278b6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80278f8 <__kernel_sinf+0x88>
 80278ba:	eea7 6a27 	vfma.f32	s12, s14, s15
 80278be:	eea6 0a26 	vfma.f32	s0, s12, s13
 80278c2:	4770      	bx	lr
 80278c4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80278c8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80278cc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80278d0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80278d4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80278fc <__kernel_sinf+0x8c>
 80278d8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80278dc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80278e0:	4770      	bx	lr
 80278e2:	bf00      	nop
 80278e4:	2f2ec9d3 	.word	0x2f2ec9d3
 80278e8:	b2d72f34 	.word	0xb2d72f34
 80278ec:	3638ef1b 	.word	0x3638ef1b
 80278f0:	b9500d01 	.word	0xb9500d01
 80278f4:	3c088889 	.word	0x3c088889
 80278f8:	be2aaaab 	.word	0xbe2aaaab
 80278fc:	3e2aaaab 	.word	0x3e2aaaab

08027900 <__kernel_tanf>:
 8027900:	b508      	push	{r3, lr}
 8027902:	ee10 3a10 	vmov	r3, s0
 8027906:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 802790a:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 802790e:	eef0 7a40 	vmov.f32	s15, s0
 8027912:	d217      	bcs.n	8027944 <__kernel_tanf+0x44>
 8027914:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8027918:	ee17 1a10 	vmov	r1, s14
 802791c:	bb41      	cbnz	r1, 8027970 <__kernel_tanf+0x70>
 802791e:	1c43      	adds	r3, r0, #1
 8027920:	4313      	orrs	r3, r2
 8027922:	d108      	bne.n	8027936 <__kernel_tanf+0x36>
 8027924:	f000 fccc 	bl	80282c0 <fabsf>
 8027928:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802792c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027930:	eeb0 0a67 	vmov.f32	s0, s15
 8027934:	bd08      	pop	{r3, pc}
 8027936:	2801      	cmp	r0, #1
 8027938:	d0fa      	beq.n	8027930 <__kernel_tanf+0x30>
 802793a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802793e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027942:	e7f5      	b.n	8027930 <__kernel_tanf+0x30>
 8027944:	494c      	ldr	r1, [pc, #304]	@ (8027a78 <__kernel_tanf+0x178>)
 8027946:	428a      	cmp	r2, r1
 8027948:	d312      	bcc.n	8027970 <__kernel_tanf+0x70>
 802794a:	2b00      	cmp	r3, #0
 802794c:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8027a7c <__kernel_tanf+0x17c>
 8027950:	bfb8      	it	lt
 8027952:	eef1 7a40 	vneglt.f32	s15, s0
 8027956:	ee37 7a67 	vsub.f32	s14, s14, s15
 802795a:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8027a80 <__kernel_tanf+0x180>
 802795e:	bfb8      	it	lt
 8027960:	eef1 0a60 	vneglt.f32	s1, s1
 8027964:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8027968:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8027a84 <__kernel_tanf+0x184>
 802796c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027970:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8027974:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8027a88 <__kernel_tanf+0x188>
 8027978:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8027a8c <__kernel_tanf+0x18c>
 802797c:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8027a90 <__kernel_tanf+0x190>
 8027980:	493d      	ldr	r1, [pc, #244]	@ (8027a78 <__kernel_tanf+0x178>)
 8027982:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8027986:	428a      	cmp	r2, r1
 8027988:	eea7 6a25 	vfma.f32	s12, s14, s11
 802798c:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8027a94 <__kernel_tanf+0x194>
 8027990:	eee6 5a07 	vfma.f32	s11, s12, s14
 8027994:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8027a98 <__kernel_tanf+0x198>
 8027998:	eea5 6a87 	vfma.f32	s12, s11, s14
 802799c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8027a9c <__kernel_tanf+0x19c>
 80279a0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80279a4:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8027aa0 <__kernel_tanf+0x1a0>
 80279a8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80279ac:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8027aa4 <__kernel_tanf+0x1a4>
 80279b0:	eee7 5a05 	vfma.f32	s11, s14, s10
 80279b4:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8027aa8 <__kernel_tanf+0x1a8>
 80279b8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80279bc:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8027aac <__kernel_tanf+0x1ac>
 80279c0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80279c4:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8027ab0 <__kernel_tanf+0x1b0>
 80279c8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80279cc:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8027ab4 <__kernel_tanf+0x1b4>
 80279d0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80279d4:	eeb0 7a46 	vmov.f32	s14, s12
 80279d8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80279dc:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80279e0:	eeb0 6a60 	vmov.f32	s12, s1
 80279e4:	eea7 6a05 	vfma.f32	s12, s14, s10
 80279e8:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8027ab8 <__kernel_tanf+0x1b8>
 80279ec:	eee6 0a26 	vfma.f32	s1, s12, s13
 80279f0:	eee5 0a07 	vfma.f32	s1, s10, s14
 80279f4:	ee37 6aa0 	vadd.f32	s12, s15, s1
 80279f8:	d31d      	bcc.n	8027a36 <__kernel_tanf+0x136>
 80279fa:	ee07 0a10 	vmov	s14, r0
 80279fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8027a02:	ee26 5a06 	vmul.f32	s10, s12, s12
 8027a06:	ee36 6a07 	vadd.f32	s12, s12, s14
 8027a0a:	179b      	asrs	r3, r3, #30
 8027a0c:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8027a10:	f003 0302 	and.w	r3, r3, #2
 8027a14:	f1c3 0301 	rsb	r3, r3, #1
 8027a18:	ee06 3a90 	vmov	s13, r3
 8027a1c:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8027a20:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8027a24:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8027a28:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8027a2c:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8027a30:	ee66 7a87 	vmul.f32	s15, s13, s14
 8027a34:	e77c      	b.n	8027930 <__kernel_tanf+0x30>
 8027a36:	2801      	cmp	r0, #1
 8027a38:	d01b      	beq.n	8027a72 <__kernel_tanf+0x172>
 8027a3a:	4b20      	ldr	r3, [pc, #128]	@ (8027abc <__kernel_tanf+0x1bc>)
 8027a3c:	ee16 2a10 	vmov	r2, s12
 8027a40:	401a      	ands	r2, r3
 8027a42:	ee05 2a90 	vmov	s11, r2
 8027a46:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8027a4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027a4e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8027a52:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8027a56:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8027a5a:	ee16 2a90 	vmov	r2, s13
 8027a5e:	4013      	ands	r3, r2
 8027a60:	ee07 3a90 	vmov	s15, r3
 8027a64:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8027a68:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8027a6c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8027a70:	e75e      	b.n	8027930 <__kernel_tanf+0x30>
 8027a72:	eef0 7a46 	vmov.f32	s15, s12
 8027a76:	e75b      	b.n	8027930 <__kernel_tanf+0x30>
 8027a78:	3f2ca140 	.word	0x3f2ca140
 8027a7c:	3f490fda 	.word	0x3f490fda
 8027a80:	33222168 	.word	0x33222168
 8027a84:	00000000 	.word	0x00000000
 8027a88:	b79bae5f 	.word	0xb79bae5f
 8027a8c:	38a3f445 	.word	0x38a3f445
 8027a90:	37d95384 	.word	0x37d95384
 8027a94:	3a1a26c8 	.word	0x3a1a26c8
 8027a98:	3b6b6916 	.word	0x3b6b6916
 8027a9c:	3cb327a4 	.word	0x3cb327a4
 8027aa0:	3e088889 	.word	0x3e088889
 8027aa4:	3895c07a 	.word	0x3895c07a
 8027aa8:	398137b9 	.word	0x398137b9
 8027aac:	3abede48 	.word	0x3abede48
 8027ab0:	3c11371f 	.word	0x3c11371f
 8027ab4:	3d5d0dd1 	.word	0x3d5d0dd1
 8027ab8:	3eaaaaab 	.word	0x3eaaaaab
 8027abc:	fffff000 	.word	0xfffff000

08027ac0 <__ieee754_powf>:
 8027ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027ac4:	ee10 4a90 	vmov	r4, s1
 8027ac8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8027acc:	ed2d 8b02 	vpush	{d8}
 8027ad0:	ee10 6a10 	vmov	r6, s0
 8027ad4:	eeb0 8a40 	vmov.f32	s16, s0
 8027ad8:	eef0 8a60 	vmov.f32	s17, s1
 8027adc:	d10c      	bne.n	8027af8 <__ieee754_powf+0x38>
 8027ade:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8027ae2:	0076      	lsls	r6, r6, #1
 8027ae4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8027ae8:	f240 829c 	bls.w	8028024 <__ieee754_powf+0x564>
 8027aec:	ee38 0a28 	vadd.f32	s0, s16, s17
 8027af0:	ecbd 8b02 	vpop	{d8}
 8027af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027af8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8027afc:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8027b00:	d802      	bhi.n	8027b08 <__ieee754_powf+0x48>
 8027b02:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8027b06:	d908      	bls.n	8027b1a <__ieee754_powf+0x5a>
 8027b08:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8027b0c:	d1ee      	bne.n	8027aec <__ieee754_powf+0x2c>
 8027b0e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8027b12:	0064      	lsls	r4, r4, #1
 8027b14:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8027b18:	e7e6      	b.n	8027ae8 <__ieee754_powf+0x28>
 8027b1a:	2e00      	cmp	r6, #0
 8027b1c:	da1e      	bge.n	8027b5c <__ieee754_powf+0x9c>
 8027b1e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8027b22:	d22b      	bcs.n	8027b7c <__ieee754_powf+0xbc>
 8027b24:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8027b28:	d332      	bcc.n	8027b90 <__ieee754_powf+0xd0>
 8027b2a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8027b2e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8027b32:	fa49 f503 	asr.w	r5, r9, r3
 8027b36:	fa05 f303 	lsl.w	r3, r5, r3
 8027b3a:	454b      	cmp	r3, r9
 8027b3c:	d126      	bne.n	8027b8c <__ieee754_powf+0xcc>
 8027b3e:	f005 0501 	and.w	r5, r5, #1
 8027b42:	f1c5 0502 	rsb	r5, r5, #2
 8027b46:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8027b4a:	d122      	bne.n	8027b92 <__ieee754_powf+0xd2>
 8027b4c:	2c00      	cmp	r4, #0
 8027b4e:	f280 826f 	bge.w	8028030 <__ieee754_powf+0x570>
 8027b52:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8027b56:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8027b5a:	e7c9      	b.n	8027af0 <__ieee754_powf+0x30>
 8027b5c:	2500      	movs	r5, #0
 8027b5e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8027b62:	d1f0      	bne.n	8027b46 <__ieee754_powf+0x86>
 8027b64:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8027b68:	f000 825c 	beq.w	8028024 <__ieee754_powf+0x564>
 8027b6c:	d908      	bls.n	8027b80 <__ieee754_powf+0xc0>
 8027b6e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8027ed0 <__ieee754_powf+0x410>
 8027b72:	2c00      	cmp	r4, #0
 8027b74:	bfa8      	it	ge
 8027b76:	eeb0 0a68 	vmovge.f32	s0, s17
 8027b7a:	e7b9      	b.n	8027af0 <__ieee754_powf+0x30>
 8027b7c:	2502      	movs	r5, #2
 8027b7e:	e7ee      	b.n	8027b5e <__ieee754_powf+0x9e>
 8027b80:	2c00      	cmp	r4, #0
 8027b82:	f280 8252 	bge.w	802802a <__ieee754_powf+0x56a>
 8027b86:	eeb1 0a68 	vneg.f32	s0, s17
 8027b8a:	e7b1      	b.n	8027af0 <__ieee754_powf+0x30>
 8027b8c:	2500      	movs	r5, #0
 8027b8e:	e7da      	b.n	8027b46 <__ieee754_powf+0x86>
 8027b90:	2500      	movs	r5, #0
 8027b92:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8027b96:	d102      	bne.n	8027b9e <__ieee754_powf+0xde>
 8027b98:	ee28 0a08 	vmul.f32	s0, s16, s16
 8027b9c:	e7a8      	b.n	8027af0 <__ieee754_powf+0x30>
 8027b9e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8027ba2:	d109      	bne.n	8027bb8 <__ieee754_powf+0xf8>
 8027ba4:	2e00      	cmp	r6, #0
 8027ba6:	db07      	blt.n	8027bb8 <__ieee754_powf+0xf8>
 8027ba8:	eeb0 0a48 	vmov.f32	s0, s16
 8027bac:	ecbd 8b02 	vpop	{d8}
 8027bb0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027bb4:	f7ff bacf 	b.w	8027156 <__ieee754_sqrtf>
 8027bb8:	eeb0 0a48 	vmov.f32	s0, s16
 8027bbc:	f000 fb80 	bl	80282c0 <fabsf>
 8027bc0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8027bc4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8027bc8:	4647      	mov	r7, r8
 8027bca:	d002      	beq.n	8027bd2 <__ieee754_powf+0x112>
 8027bcc:	f1b8 0f00 	cmp.w	r8, #0
 8027bd0:	d117      	bne.n	8027c02 <__ieee754_powf+0x142>
 8027bd2:	2c00      	cmp	r4, #0
 8027bd4:	bfbc      	itt	lt
 8027bd6:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8027bda:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8027bde:	2e00      	cmp	r6, #0
 8027be0:	da86      	bge.n	8027af0 <__ieee754_powf+0x30>
 8027be2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8027be6:	ea58 0805 	orrs.w	r8, r8, r5
 8027bea:	d104      	bne.n	8027bf6 <__ieee754_powf+0x136>
 8027bec:	ee70 7a40 	vsub.f32	s15, s0, s0
 8027bf0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8027bf4:	e77c      	b.n	8027af0 <__ieee754_powf+0x30>
 8027bf6:	2d01      	cmp	r5, #1
 8027bf8:	f47f af7a 	bne.w	8027af0 <__ieee754_powf+0x30>
 8027bfc:	eeb1 0a40 	vneg.f32	s0, s0
 8027c00:	e776      	b.n	8027af0 <__ieee754_powf+0x30>
 8027c02:	0ff0      	lsrs	r0, r6, #31
 8027c04:	3801      	subs	r0, #1
 8027c06:	ea55 0300 	orrs.w	r3, r5, r0
 8027c0a:	d104      	bne.n	8027c16 <__ieee754_powf+0x156>
 8027c0c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8027c10:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8027c14:	e76c      	b.n	8027af0 <__ieee754_powf+0x30>
 8027c16:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8027c1a:	d973      	bls.n	8027d04 <__ieee754_powf+0x244>
 8027c1c:	4bad      	ldr	r3, [pc, #692]	@ (8027ed4 <__ieee754_powf+0x414>)
 8027c1e:	4598      	cmp	r8, r3
 8027c20:	d808      	bhi.n	8027c34 <__ieee754_powf+0x174>
 8027c22:	2c00      	cmp	r4, #0
 8027c24:	da0b      	bge.n	8027c3e <__ieee754_powf+0x17e>
 8027c26:	2000      	movs	r0, #0
 8027c28:	ecbd 8b02 	vpop	{d8}
 8027c2c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027c30:	f000 bbd4 	b.w	80283dc <__math_oflowf>
 8027c34:	4ba8      	ldr	r3, [pc, #672]	@ (8027ed8 <__ieee754_powf+0x418>)
 8027c36:	4598      	cmp	r8, r3
 8027c38:	d908      	bls.n	8027c4c <__ieee754_powf+0x18c>
 8027c3a:	2c00      	cmp	r4, #0
 8027c3c:	dcf3      	bgt.n	8027c26 <__ieee754_powf+0x166>
 8027c3e:	2000      	movs	r0, #0
 8027c40:	ecbd 8b02 	vpop	{d8}
 8027c44:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027c48:	f000 bbc2 	b.w	80283d0 <__math_uflowf>
 8027c4c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8027c50:	ee30 0a67 	vsub.f32	s0, s0, s15
 8027c54:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8027edc <__ieee754_powf+0x41c>
 8027c58:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8027c5c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8027c60:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8027c64:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8027c68:	ee20 7a00 	vmul.f32	s14, s0, s0
 8027c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8027c70:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8027ee0 <__ieee754_powf+0x420>
 8027c74:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8027c78:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8027ee4 <__ieee754_powf+0x424>
 8027c7c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8027c80:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8027ee8 <__ieee754_powf+0x428>
 8027c84:	eef0 6a67 	vmov.f32	s13, s15
 8027c88:	eee0 6a07 	vfma.f32	s13, s0, s14
 8027c8c:	ee16 3a90 	vmov	r3, s13
 8027c90:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8027c94:	f023 030f 	bic.w	r3, r3, #15
 8027c98:	ee06 3a90 	vmov	s13, r3
 8027c9c:	eee0 6a47 	vfms.f32	s13, s0, s14
 8027ca0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8027ca4:	3d01      	subs	r5, #1
 8027ca6:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8027caa:	4305      	orrs	r5, r0
 8027cac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027cb0:	f024 040f 	bic.w	r4, r4, #15
 8027cb4:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8027cb8:	bf18      	it	ne
 8027cba:	eeb0 8a47 	vmovne.f32	s16, s14
 8027cbe:	ee07 4a10 	vmov	s14, r4
 8027cc2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8027cc6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8027cca:	ee07 3a90 	vmov	s15, r3
 8027cce:	eee7 0a27 	vfma.f32	s1, s14, s15
 8027cd2:	ee07 4a10 	vmov	s14, r4
 8027cd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8027cda:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8027cde:	ee17 1a10 	vmov	r1, s14
 8027ce2:	2900      	cmp	r1, #0
 8027ce4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8027ce8:	f340 80dd 	ble.w	8027ea6 <__ieee754_powf+0x3e6>
 8027cec:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8027cf0:	f240 80ca 	bls.w	8027e88 <__ieee754_powf+0x3c8>
 8027cf4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8027cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027cfc:	bf4c      	ite	mi
 8027cfe:	2001      	movmi	r0, #1
 8027d00:	2000      	movpl	r0, #0
 8027d02:	e791      	b.n	8027c28 <__ieee754_powf+0x168>
 8027d04:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8027d08:	bf01      	itttt	eq
 8027d0a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8027eec <__ieee754_powf+0x42c>
 8027d0e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8027d12:	f06f 0317 	mvneq.w	r3, #23
 8027d16:	ee17 7a90 	vmoveq	r7, s15
 8027d1a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8027d1e:	bf18      	it	ne
 8027d20:	2300      	movne	r3, #0
 8027d22:	3a7f      	subs	r2, #127	@ 0x7f
 8027d24:	441a      	add	r2, r3
 8027d26:	4b72      	ldr	r3, [pc, #456]	@ (8027ef0 <__ieee754_powf+0x430>)
 8027d28:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8027d2c:	429f      	cmp	r7, r3
 8027d2e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8027d32:	dd06      	ble.n	8027d42 <__ieee754_powf+0x282>
 8027d34:	4b6f      	ldr	r3, [pc, #444]	@ (8027ef4 <__ieee754_powf+0x434>)
 8027d36:	429f      	cmp	r7, r3
 8027d38:	f340 80a4 	ble.w	8027e84 <__ieee754_powf+0x3c4>
 8027d3c:	3201      	adds	r2, #1
 8027d3e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8027d42:	2600      	movs	r6, #0
 8027d44:	4b6c      	ldr	r3, [pc, #432]	@ (8027ef8 <__ieee754_powf+0x438>)
 8027d46:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8027d4a:	ee07 1a10 	vmov	s14, r1
 8027d4e:	edd3 5a00 	vldr	s11, [r3]
 8027d52:	4b6a      	ldr	r3, [pc, #424]	@ (8027efc <__ieee754_powf+0x43c>)
 8027d54:	ee75 7a87 	vadd.f32	s15, s11, s14
 8027d58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8027d5c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8027d60:	1049      	asrs	r1, r1, #1
 8027d62:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8027d66:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8027d6a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8027d6e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8027d72:	ee07 1a90 	vmov	s15, r1
 8027d76:	ee26 5a24 	vmul.f32	s10, s12, s9
 8027d7a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8027d7e:	ee15 7a10 	vmov	r7, s10
 8027d82:	401f      	ands	r7, r3
 8027d84:	ee06 7a90 	vmov	s13, r7
 8027d88:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8027d8c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8027d90:	ee65 7a05 	vmul.f32	s15, s10, s10
 8027d94:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8027d98:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8027f00 <__ieee754_powf+0x440>
 8027d9c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8027f04 <__ieee754_powf+0x444>
 8027da0:	eee7 5a87 	vfma.f32	s11, s15, s14
 8027da4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8027f08 <__ieee754_powf+0x448>
 8027da8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8027dac:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8027edc <__ieee754_powf+0x41c>
 8027db0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8027db4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8027f0c <__ieee754_powf+0x44c>
 8027db8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8027dbc:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8027f10 <__ieee754_powf+0x450>
 8027dc0:	ee26 6a24 	vmul.f32	s12, s12, s9
 8027dc4:	eee7 5a27 	vfma.f32	s11, s14, s15
 8027dc8:	ee35 7a26 	vadd.f32	s14, s10, s13
 8027dcc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8027dd0:	ee27 7a06 	vmul.f32	s14, s14, s12
 8027dd4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8027dd8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8027ddc:	eef0 5a67 	vmov.f32	s11, s15
 8027de0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8027de4:	ee75 5a87 	vadd.f32	s11, s11, s14
 8027de8:	ee15 1a90 	vmov	r1, s11
 8027dec:	4019      	ands	r1, r3
 8027dee:	ee05 1a90 	vmov	s11, r1
 8027df2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8027df6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8027dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8027dfe:	ee67 7a85 	vmul.f32	s15, s15, s10
 8027e02:	eee6 7a25 	vfma.f32	s15, s12, s11
 8027e06:	eeb0 6a67 	vmov.f32	s12, s15
 8027e0a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8027e0e:	ee16 1a10 	vmov	r1, s12
 8027e12:	4019      	ands	r1, r3
 8027e14:	ee06 1a10 	vmov	s12, r1
 8027e18:	eeb0 7a46 	vmov.f32	s14, s12
 8027e1c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8027e20:	493c      	ldr	r1, [pc, #240]	@ (8027f14 <__ieee754_powf+0x454>)
 8027e22:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8027e26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027e2a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8027f18 <__ieee754_powf+0x458>
 8027e2e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8027f1c <__ieee754_powf+0x45c>
 8027e32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8027e36:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8027f20 <__ieee754_powf+0x460>
 8027e3a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8027e3e:	ed91 7a00 	vldr	s14, [r1]
 8027e42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027e46:	ee07 2a10 	vmov	s14, r2
 8027e4a:	eef0 6a67 	vmov.f32	s13, s15
 8027e4e:	4a35      	ldr	r2, [pc, #212]	@ (8027f24 <__ieee754_powf+0x464>)
 8027e50:	eee6 6a25 	vfma.f32	s13, s12, s11
 8027e54:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8027e58:	ed92 5a00 	vldr	s10, [r2]
 8027e5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8027e60:	ee76 6a85 	vadd.f32	s13, s13, s10
 8027e64:	ee76 6a87 	vadd.f32	s13, s13, s14
 8027e68:	ee16 2a90 	vmov	r2, s13
 8027e6c:	4013      	ands	r3, r2
 8027e6e:	ee06 3a90 	vmov	s13, r3
 8027e72:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8027e76:	ee37 7a45 	vsub.f32	s14, s14, s10
 8027e7a:	eea6 7a65 	vfms.f32	s14, s12, s11
 8027e7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027e82:	e70f      	b.n	8027ca4 <__ieee754_powf+0x1e4>
 8027e84:	2601      	movs	r6, #1
 8027e86:	e75d      	b.n	8027d44 <__ieee754_powf+0x284>
 8027e88:	d152      	bne.n	8027f30 <__ieee754_powf+0x470>
 8027e8a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8027f28 <__ieee754_powf+0x468>
 8027e8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8027e92:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8027e96:	eef4 6ac7 	vcmpe.f32	s13, s14
 8027e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e9e:	f73f af29 	bgt.w	8027cf4 <__ieee754_powf+0x234>
 8027ea2:	2386      	movs	r3, #134	@ 0x86
 8027ea4:	e048      	b.n	8027f38 <__ieee754_powf+0x478>
 8027ea6:	4a21      	ldr	r2, [pc, #132]	@ (8027f2c <__ieee754_powf+0x46c>)
 8027ea8:	4293      	cmp	r3, r2
 8027eaa:	d907      	bls.n	8027ebc <__ieee754_powf+0x3fc>
 8027eac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8027eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027eb4:	bf4c      	ite	mi
 8027eb6:	2001      	movmi	r0, #1
 8027eb8:	2000      	movpl	r0, #0
 8027eba:	e6c1      	b.n	8027c40 <__ieee754_powf+0x180>
 8027ebc:	d138      	bne.n	8027f30 <__ieee754_powf+0x470>
 8027ebe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8027ec2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8027ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027eca:	dbea      	blt.n	8027ea2 <__ieee754_powf+0x3e2>
 8027ecc:	e7ee      	b.n	8027eac <__ieee754_powf+0x3ec>
 8027ece:	bf00      	nop
 8027ed0:	00000000 	.word	0x00000000
 8027ed4:	3f7ffff3 	.word	0x3f7ffff3
 8027ed8:	3f800007 	.word	0x3f800007
 8027edc:	3eaaaaab 	.word	0x3eaaaaab
 8027ee0:	3fb8aa3b 	.word	0x3fb8aa3b
 8027ee4:	36eca570 	.word	0x36eca570
 8027ee8:	3fb8aa00 	.word	0x3fb8aa00
 8027eec:	4b800000 	.word	0x4b800000
 8027ef0:	001cc471 	.word	0x001cc471
 8027ef4:	005db3d6 	.word	0x005db3d6
 8027ef8:	08030f20 	.word	0x08030f20
 8027efc:	fffff000 	.word	0xfffff000
 8027f00:	3e6c3255 	.word	0x3e6c3255
 8027f04:	3e53f142 	.word	0x3e53f142
 8027f08:	3e8ba305 	.word	0x3e8ba305
 8027f0c:	3edb6db7 	.word	0x3edb6db7
 8027f10:	3f19999a 	.word	0x3f19999a
 8027f14:	08030f10 	.word	0x08030f10
 8027f18:	3f76384f 	.word	0x3f76384f
 8027f1c:	3f763800 	.word	0x3f763800
 8027f20:	369dc3a0 	.word	0x369dc3a0
 8027f24:	08030f18 	.word	0x08030f18
 8027f28:	3338aa3c 	.word	0x3338aa3c
 8027f2c:	43160000 	.word	0x43160000
 8027f30:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8027f34:	d971      	bls.n	802801a <__ieee754_powf+0x55a>
 8027f36:	15db      	asrs	r3, r3, #23
 8027f38:	3b7e      	subs	r3, #126	@ 0x7e
 8027f3a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8027f3e:	4118      	asrs	r0, r3
 8027f40:	4408      	add	r0, r1
 8027f42:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8027f46:	4a3c      	ldr	r2, [pc, #240]	@ (8028038 <__ieee754_powf+0x578>)
 8027f48:	3b7f      	subs	r3, #127	@ 0x7f
 8027f4a:	411a      	asrs	r2, r3
 8027f4c:	4002      	ands	r2, r0
 8027f4e:	ee07 2a10 	vmov	s14, r2
 8027f52:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8027f56:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8027f5a:	f1c3 0317 	rsb	r3, r3, #23
 8027f5e:	4118      	asrs	r0, r3
 8027f60:	2900      	cmp	r1, #0
 8027f62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027f66:	bfb8      	it	lt
 8027f68:	4240      	neglt	r0, r0
 8027f6a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8027f6e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 802803c <__ieee754_powf+0x57c>
 8027f72:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8028040 <__ieee754_powf+0x580>
 8027f76:	ee17 3a10 	vmov	r3, s14
 8027f7a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8027f7e:	f023 030f 	bic.w	r3, r3, #15
 8027f82:	ee07 3a10 	vmov	s14, r3
 8027f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8027f8a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8027f8e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8027f92:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8028044 <__ieee754_powf+0x584>
 8027f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8027f9a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8027f9e:	eef0 6a67 	vmov.f32	s13, s15
 8027fa2:	eee7 6a06 	vfma.f32	s13, s14, s12
 8027fa6:	eef0 5a66 	vmov.f32	s11, s13
 8027faa:	eee7 5a46 	vfms.f32	s11, s14, s12
 8027fae:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8027fb2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8027fb6:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8028048 <__ieee754_powf+0x588>
 8027fba:	eddf 5a24 	vldr	s11, [pc, #144]	@ 802804c <__ieee754_powf+0x58c>
 8027fbe:	eea7 6a25 	vfma.f32	s12, s14, s11
 8027fc2:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8028050 <__ieee754_powf+0x590>
 8027fc6:	eee6 5a07 	vfma.f32	s11, s12, s14
 8027fca:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8028054 <__ieee754_powf+0x594>
 8027fce:	eea5 6a87 	vfma.f32	s12, s11, s14
 8027fd2:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8028058 <__ieee754_powf+0x598>
 8027fd6:	eee6 5a07 	vfma.f32	s11, s12, s14
 8027fda:	eeb0 6a66 	vmov.f32	s12, s13
 8027fde:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8027fe2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8027fe6:	ee66 5a86 	vmul.f32	s11, s13, s12
 8027fea:	ee36 6a47 	vsub.f32	s12, s12, s14
 8027fee:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8027ff2:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8027ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8027ffa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8027ffe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8028002:	ee10 3a10 	vmov	r3, s0
 8028006:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 802800a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 802800e:	da06      	bge.n	802801e <__ieee754_powf+0x55e>
 8028010:	f000 f95e 	bl	80282d0 <scalbnf>
 8028014:	ee20 0a08 	vmul.f32	s0, s0, s16
 8028018:	e56a      	b.n	8027af0 <__ieee754_powf+0x30>
 802801a:	2000      	movs	r0, #0
 802801c:	e7a5      	b.n	8027f6a <__ieee754_powf+0x4aa>
 802801e:	ee00 3a10 	vmov	s0, r3
 8028022:	e7f7      	b.n	8028014 <__ieee754_powf+0x554>
 8028024:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8028028:	e562      	b.n	8027af0 <__ieee754_powf+0x30>
 802802a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 802805c <__ieee754_powf+0x59c>
 802802e:	e55f      	b.n	8027af0 <__ieee754_powf+0x30>
 8028030:	eeb0 0a48 	vmov.f32	s0, s16
 8028034:	e55c      	b.n	8027af0 <__ieee754_powf+0x30>
 8028036:	bf00      	nop
 8028038:	ff800000 	.word	0xff800000
 802803c:	3f317218 	.word	0x3f317218
 8028040:	3f317200 	.word	0x3f317200
 8028044:	35bfbe8c 	.word	0x35bfbe8c
 8028048:	b5ddea0e 	.word	0xb5ddea0e
 802804c:	3331bb4c 	.word	0x3331bb4c
 8028050:	388ab355 	.word	0x388ab355
 8028054:	bb360b61 	.word	0xbb360b61
 8028058:	3e2aaaab 	.word	0x3e2aaaab
 802805c:	00000000 	.word	0x00000000

08028060 <__ieee754_rem_pio2f>:
 8028060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028062:	ee10 6a10 	vmov	r6, s0
 8028066:	4b88      	ldr	r3, [pc, #544]	@ (8028288 <__ieee754_rem_pio2f+0x228>)
 8028068:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 802806c:	429d      	cmp	r5, r3
 802806e:	b087      	sub	sp, #28
 8028070:	4604      	mov	r4, r0
 8028072:	d805      	bhi.n	8028080 <__ieee754_rem_pio2f+0x20>
 8028074:	2300      	movs	r3, #0
 8028076:	ed80 0a00 	vstr	s0, [r0]
 802807a:	6043      	str	r3, [r0, #4]
 802807c:	2000      	movs	r0, #0
 802807e:	e022      	b.n	80280c6 <__ieee754_rem_pio2f+0x66>
 8028080:	4b82      	ldr	r3, [pc, #520]	@ (802828c <__ieee754_rem_pio2f+0x22c>)
 8028082:	429d      	cmp	r5, r3
 8028084:	d83a      	bhi.n	80280fc <__ieee754_rem_pio2f+0x9c>
 8028086:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802808a:	2e00      	cmp	r6, #0
 802808c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8028290 <__ieee754_rem_pio2f+0x230>
 8028090:	4a80      	ldr	r2, [pc, #512]	@ (8028294 <__ieee754_rem_pio2f+0x234>)
 8028092:	f023 030f 	bic.w	r3, r3, #15
 8028096:	dd18      	ble.n	80280ca <__ieee754_rem_pio2f+0x6a>
 8028098:	4293      	cmp	r3, r2
 802809a:	ee70 7a47 	vsub.f32	s15, s0, s14
 802809e:	bf09      	itett	eq
 80280a0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8028298 <__ieee754_rem_pio2f+0x238>
 80280a4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 802829c <__ieee754_rem_pio2f+0x23c>
 80280a8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80282a0 <__ieee754_rem_pio2f+0x240>
 80280ac:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80280b0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80280b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80280b8:	ed80 7a00 	vstr	s14, [r0]
 80280bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80280c0:	edc0 7a01 	vstr	s15, [r0, #4]
 80280c4:	2001      	movs	r0, #1
 80280c6:	b007      	add	sp, #28
 80280c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80280ca:	4293      	cmp	r3, r2
 80280cc:	ee70 7a07 	vadd.f32	s15, s0, s14
 80280d0:	bf09      	itett	eq
 80280d2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8028298 <__ieee754_rem_pio2f+0x238>
 80280d6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 802829c <__ieee754_rem_pio2f+0x23c>
 80280da:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80282a0 <__ieee754_rem_pio2f+0x240>
 80280de:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80280e2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80280e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80280ea:	ed80 7a00 	vstr	s14, [r0]
 80280ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80280f2:	edc0 7a01 	vstr	s15, [r0, #4]
 80280f6:	f04f 30ff 	mov.w	r0, #4294967295
 80280fa:	e7e4      	b.n	80280c6 <__ieee754_rem_pio2f+0x66>
 80280fc:	4b69      	ldr	r3, [pc, #420]	@ (80282a4 <__ieee754_rem_pio2f+0x244>)
 80280fe:	429d      	cmp	r5, r3
 8028100:	d873      	bhi.n	80281ea <__ieee754_rem_pio2f+0x18a>
 8028102:	f000 f8dd 	bl	80282c0 <fabsf>
 8028106:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80282a8 <__ieee754_rem_pio2f+0x248>
 802810a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802810e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8028112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802811a:	ee17 0a90 	vmov	r0, s15
 802811e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8028290 <__ieee754_rem_pio2f+0x230>
 8028122:	eea7 0a67 	vfms.f32	s0, s14, s15
 8028126:	281f      	cmp	r0, #31
 8028128:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 802829c <__ieee754_rem_pio2f+0x23c>
 802812c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028130:	eeb1 6a47 	vneg.f32	s12, s14
 8028134:	ee70 6a67 	vsub.f32	s13, s0, s15
 8028138:	ee16 1a90 	vmov	r1, s13
 802813c:	dc09      	bgt.n	8028152 <__ieee754_rem_pio2f+0xf2>
 802813e:	4a5b      	ldr	r2, [pc, #364]	@ (80282ac <__ieee754_rem_pio2f+0x24c>)
 8028140:	1e47      	subs	r7, r0, #1
 8028142:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8028146:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 802814a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802814e:	4293      	cmp	r3, r2
 8028150:	d107      	bne.n	8028162 <__ieee754_rem_pio2f+0x102>
 8028152:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8028156:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 802815a:	2a08      	cmp	r2, #8
 802815c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8028160:	dc14      	bgt.n	802818c <__ieee754_rem_pio2f+0x12c>
 8028162:	6021      	str	r1, [r4, #0]
 8028164:	ed94 7a00 	vldr	s14, [r4]
 8028168:	ee30 0a47 	vsub.f32	s0, s0, s14
 802816c:	2e00      	cmp	r6, #0
 802816e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8028172:	ed84 0a01 	vstr	s0, [r4, #4]
 8028176:	daa6      	bge.n	80280c6 <__ieee754_rem_pio2f+0x66>
 8028178:	eeb1 7a47 	vneg.f32	s14, s14
 802817c:	eeb1 0a40 	vneg.f32	s0, s0
 8028180:	ed84 7a00 	vstr	s14, [r4]
 8028184:	ed84 0a01 	vstr	s0, [r4, #4]
 8028188:	4240      	negs	r0, r0
 802818a:	e79c      	b.n	80280c6 <__ieee754_rem_pio2f+0x66>
 802818c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8028298 <__ieee754_rem_pio2f+0x238>
 8028190:	eef0 6a40 	vmov.f32	s13, s0
 8028194:	eee6 6a25 	vfma.f32	s13, s12, s11
 8028198:	ee70 7a66 	vsub.f32	s15, s0, s13
 802819c:	eee6 7a25 	vfma.f32	s15, s12, s11
 80281a0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80282a0 <__ieee754_rem_pio2f+0x240>
 80281a4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80281a8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80281ac:	ee15 2a90 	vmov	r2, s11
 80281b0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80281b4:	1a5b      	subs	r3, r3, r1
 80281b6:	2b19      	cmp	r3, #25
 80281b8:	dc04      	bgt.n	80281c4 <__ieee754_rem_pio2f+0x164>
 80281ba:	edc4 5a00 	vstr	s11, [r4]
 80281be:	eeb0 0a66 	vmov.f32	s0, s13
 80281c2:	e7cf      	b.n	8028164 <__ieee754_rem_pio2f+0x104>
 80281c4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80282b0 <__ieee754_rem_pio2f+0x250>
 80281c8:	eeb0 0a66 	vmov.f32	s0, s13
 80281cc:	eea6 0a25 	vfma.f32	s0, s12, s11
 80281d0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80281d4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80282b4 <__ieee754_rem_pio2f+0x254>
 80281d8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80281dc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80281e0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80281e4:	ed84 7a00 	vstr	s14, [r4]
 80281e8:	e7bc      	b.n	8028164 <__ieee754_rem_pio2f+0x104>
 80281ea:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80281ee:	d306      	bcc.n	80281fe <__ieee754_rem_pio2f+0x19e>
 80281f0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80281f4:	edc0 7a01 	vstr	s15, [r0, #4]
 80281f8:	edc0 7a00 	vstr	s15, [r0]
 80281fc:	e73e      	b.n	802807c <__ieee754_rem_pio2f+0x1c>
 80281fe:	15ea      	asrs	r2, r5, #23
 8028200:	3a86      	subs	r2, #134	@ 0x86
 8028202:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8028206:	ee07 3a90 	vmov	s15, r3
 802820a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802820e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80282b8 <__ieee754_rem_pio2f+0x258>
 8028212:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8028216:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802821a:	ed8d 7a03 	vstr	s14, [sp, #12]
 802821e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8028222:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8028226:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802822a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802822e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8028232:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8028236:	eef5 7a40 	vcmp.f32	s15, #0.0
 802823a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802823e:	edcd 7a05 	vstr	s15, [sp, #20]
 8028242:	d11e      	bne.n	8028282 <__ieee754_rem_pio2f+0x222>
 8028244:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8028248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802824c:	bf0c      	ite	eq
 802824e:	2301      	moveq	r3, #1
 8028250:	2302      	movne	r3, #2
 8028252:	491a      	ldr	r1, [pc, #104]	@ (80282bc <__ieee754_rem_pio2f+0x25c>)
 8028254:	9101      	str	r1, [sp, #4]
 8028256:	2102      	movs	r1, #2
 8028258:	9100      	str	r1, [sp, #0]
 802825a:	a803      	add	r0, sp, #12
 802825c:	4621      	mov	r1, r4
 802825e:	f000 f8c3 	bl	80283e8 <__kernel_rem_pio2f>
 8028262:	2e00      	cmp	r6, #0
 8028264:	f6bf af2f 	bge.w	80280c6 <__ieee754_rem_pio2f+0x66>
 8028268:	edd4 7a00 	vldr	s15, [r4]
 802826c:	eef1 7a67 	vneg.f32	s15, s15
 8028270:	edc4 7a00 	vstr	s15, [r4]
 8028274:	edd4 7a01 	vldr	s15, [r4, #4]
 8028278:	eef1 7a67 	vneg.f32	s15, s15
 802827c:	edc4 7a01 	vstr	s15, [r4, #4]
 8028280:	e782      	b.n	8028188 <__ieee754_rem_pio2f+0x128>
 8028282:	2303      	movs	r3, #3
 8028284:	e7e5      	b.n	8028252 <__ieee754_rem_pio2f+0x1f2>
 8028286:	bf00      	nop
 8028288:	3f490fd8 	.word	0x3f490fd8
 802828c:	4016cbe3 	.word	0x4016cbe3
 8028290:	3fc90f80 	.word	0x3fc90f80
 8028294:	3fc90fd0 	.word	0x3fc90fd0
 8028298:	37354400 	.word	0x37354400
 802829c:	37354443 	.word	0x37354443
 80282a0:	2e85a308 	.word	0x2e85a308
 80282a4:	43490f80 	.word	0x43490f80
 80282a8:	3f22f984 	.word	0x3f22f984
 80282ac:	08030f28 	.word	0x08030f28
 80282b0:	2e85a300 	.word	0x2e85a300
 80282b4:	248d3132 	.word	0x248d3132
 80282b8:	43800000 	.word	0x43800000
 80282bc:	08030fa8 	.word	0x08030fa8

080282c0 <fabsf>:
 80282c0:	ee10 3a10 	vmov	r3, s0
 80282c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80282c8:	ee00 3a10 	vmov	s0, r3
 80282cc:	4770      	bx	lr
	...

080282d0 <scalbnf>:
 80282d0:	ee10 3a10 	vmov	r3, s0
 80282d4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80282d8:	d02b      	beq.n	8028332 <scalbnf+0x62>
 80282da:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80282de:	d302      	bcc.n	80282e6 <scalbnf+0x16>
 80282e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80282e4:	4770      	bx	lr
 80282e6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80282ea:	d123      	bne.n	8028334 <scalbnf+0x64>
 80282ec:	4b24      	ldr	r3, [pc, #144]	@ (8028380 <scalbnf+0xb0>)
 80282ee:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8028384 <scalbnf+0xb4>
 80282f2:	4298      	cmp	r0, r3
 80282f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80282f8:	db17      	blt.n	802832a <scalbnf+0x5a>
 80282fa:	ee10 3a10 	vmov	r3, s0
 80282fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8028302:	3a19      	subs	r2, #25
 8028304:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8028308:	4288      	cmp	r0, r1
 802830a:	dd15      	ble.n	8028338 <scalbnf+0x68>
 802830c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8028388 <scalbnf+0xb8>
 8028310:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 802838c <scalbnf+0xbc>
 8028314:	ee10 3a10 	vmov	r3, s0
 8028318:	eeb0 7a67 	vmov.f32	s14, s15
 802831c:	2b00      	cmp	r3, #0
 802831e:	bfb8      	it	lt
 8028320:	eef0 7a66 	vmovlt.f32	s15, s13
 8028324:	ee27 0a87 	vmul.f32	s0, s15, s14
 8028328:	4770      	bx	lr
 802832a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8028390 <scalbnf+0xc0>
 802832e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8028332:	4770      	bx	lr
 8028334:	0dd2      	lsrs	r2, r2, #23
 8028336:	e7e5      	b.n	8028304 <scalbnf+0x34>
 8028338:	4410      	add	r0, r2
 802833a:	28fe      	cmp	r0, #254	@ 0xfe
 802833c:	dce6      	bgt.n	802830c <scalbnf+0x3c>
 802833e:	2800      	cmp	r0, #0
 8028340:	dd06      	ble.n	8028350 <scalbnf+0x80>
 8028342:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8028346:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802834a:	ee00 3a10 	vmov	s0, r3
 802834e:	4770      	bx	lr
 8028350:	f110 0f16 	cmn.w	r0, #22
 8028354:	da09      	bge.n	802836a <scalbnf+0x9a>
 8028356:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8028390 <scalbnf+0xc0>
 802835a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8028394 <scalbnf+0xc4>
 802835e:	ee10 3a10 	vmov	r3, s0
 8028362:	eeb0 7a67 	vmov.f32	s14, s15
 8028366:	2b00      	cmp	r3, #0
 8028368:	e7d9      	b.n	802831e <scalbnf+0x4e>
 802836a:	3019      	adds	r0, #25
 802836c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8028370:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8028374:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8028398 <scalbnf+0xc8>
 8028378:	ee07 3a90 	vmov	s15, r3
 802837c:	e7d7      	b.n	802832e <scalbnf+0x5e>
 802837e:	bf00      	nop
 8028380:	ffff3cb0 	.word	0xffff3cb0
 8028384:	4c000000 	.word	0x4c000000
 8028388:	7149f2ca 	.word	0x7149f2ca
 802838c:	f149f2ca 	.word	0xf149f2ca
 8028390:	0da24260 	.word	0x0da24260
 8028394:	8da24260 	.word	0x8da24260
 8028398:	33000000 	.word	0x33000000

0802839c <with_errnof>:
 802839c:	b510      	push	{r4, lr}
 802839e:	ed2d 8b02 	vpush	{d8}
 80283a2:	eeb0 8a40 	vmov.f32	s16, s0
 80283a6:	4604      	mov	r4, r0
 80283a8:	f7fc f994 	bl	80246d4 <__errno>
 80283ac:	eeb0 0a48 	vmov.f32	s0, s16
 80283b0:	ecbd 8b02 	vpop	{d8}
 80283b4:	6004      	str	r4, [r0, #0]
 80283b6:	bd10      	pop	{r4, pc}

080283b8 <xflowf>:
 80283b8:	b130      	cbz	r0, 80283c8 <xflowf+0x10>
 80283ba:	eef1 7a40 	vneg.f32	s15, s0
 80283be:	ee27 0a80 	vmul.f32	s0, s15, s0
 80283c2:	2022      	movs	r0, #34	@ 0x22
 80283c4:	f7ff bfea 	b.w	802839c <with_errnof>
 80283c8:	eef0 7a40 	vmov.f32	s15, s0
 80283cc:	e7f7      	b.n	80283be <xflowf+0x6>
	...

080283d0 <__math_uflowf>:
 80283d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80283d8 <__math_uflowf+0x8>
 80283d4:	f7ff bff0 	b.w	80283b8 <xflowf>
 80283d8:	10000000 	.word	0x10000000

080283dc <__math_oflowf>:
 80283dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80283e4 <__math_oflowf+0x8>
 80283e0:	f7ff bfea 	b.w	80283b8 <xflowf>
 80283e4:	70000000 	.word	0x70000000

080283e8 <__kernel_rem_pio2f>:
 80283e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80283ec:	ed2d 8b04 	vpush	{d8-d9}
 80283f0:	b0d9      	sub	sp, #356	@ 0x164
 80283f2:	4690      	mov	r8, r2
 80283f4:	9001      	str	r0, [sp, #4]
 80283f6:	4ab9      	ldr	r2, [pc, #740]	@ (80286dc <__kernel_rem_pio2f+0x2f4>)
 80283f8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80283fa:	f118 0f04 	cmn.w	r8, #4
 80283fe:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8028402:	460f      	mov	r7, r1
 8028404:	f103 3bff 	add.w	fp, r3, #4294967295
 8028408:	db27      	blt.n	802845a <__kernel_rem_pio2f+0x72>
 802840a:	f1b8 0203 	subs.w	r2, r8, #3
 802840e:	bf48      	it	mi
 8028410:	f108 0204 	addmi.w	r2, r8, #4
 8028414:	10d2      	asrs	r2, r2, #3
 8028416:	1c55      	adds	r5, r2, #1
 8028418:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 802841a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80286ec <__kernel_rem_pio2f+0x304>
 802841e:	00e8      	lsls	r0, r5, #3
 8028420:	eba2 060b 	sub.w	r6, r2, fp
 8028424:	9002      	str	r0, [sp, #8]
 8028426:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 802842a:	eb0a 0c0b 	add.w	ip, sl, fp
 802842e:	ac1c      	add	r4, sp, #112	@ 0x70
 8028430:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8028434:	2000      	movs	r0, #0
 8028436:	4560      	cmp	r0, ip
 8028438:	dd11      	ble.n	802845e <__kernel_rem_pio2f+0x76>
 802843a:	a91c      	add	r1, sp, #112	@ 0x70
 802843c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8028440:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8028444:	f04f 0c00 	mov.w	ip, #0
 8028448:	45d4      	cmp	ip, sl
 802844a:	dc27      	bgt.n	802849c <__kernel_rem_pio2f+0xb4>
 802844c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8028450:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80286ec <__kernel_rem_pio2f+0x304>
 8028454:	4606      	mov	r6, r0
 8028456:	2400      	movs	r4, #0
 8028458:	e016      	b.n	8028488 <__kernel_rem_pio2f+0xa0>
 802845a:	2200      	movs	r2, #0
 802845c:	e7db      	b.n	8028416 <__kernel_rem_pio2f+0x2e>
 802845e:	42c6      	cmn	r6, r0
 8028460:	bf5d      	ittte	pl
 8028462:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8028466:	ee07 1a90 	vmovpl	s15, r1
 802846a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802846e:	eef0 7a47 	vmovmi.f32	s15, s14
 8028472:	ece4 7a01 	vstmia	r4!, {s15}
 8028476:	3001      	adds	r0, #1
 8028478:	e7dd      	b.n	8028436 <__kernel_rem_pio2f+0x4e>
 802847a:	ecfe 6a01 	vldmia	lr!, {s13}
 802847e:	ed96 7a00 	vldr	s14, [r6]
 8028482:	eee6 7a87 	vfma.f32	s15, s13, s14
 8028486:	3401      	adds	r4, #1
 8028488:	455c      	cmp	r4, fp
 802848a:	f1a6 0604 	sub.w	r6, r6, #4
 802848e:	ddf4      	ble.n	802847a <__kernel_rem_pio2f+0x92>
 8028490:	ece9 7a01 	vstmia	r9!, {s15}
 8028494:	f10c 0c01 	add.w	ip, ip, #1
 8028498:	3004      	adds	r0, #4
 802849a:	e7d5      	b.n	8028448 <__kernel_rem_pio2f+0x60>
 802849c:	a908      	add	r1, sp, #32
 802849e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80284a2:	9104      	str	r1, [sp, #16]
 80284a4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80284a6:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80286e8 <__kernel_rem_pio2f+0x300>
 80284aa:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80286e4 <__kernel_rem_pio2f+0x2fc>
 80284ae:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80284b2:	9203      	str	r2, [sp, #12]
 80284b4:	4654      	mov	r4, sl
 80284b6:	00a2      	lsls	r2, r4, #2
 80284b8:	9205      	str	r2, [sp, #20]
 80284ba:	aa58      	add	r2, sp, #352	@ 0x160
 80284bc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80284c0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80284c4:	a944      	add	r1, sp, #272	@ 0x110
 80284c6:	aa08      	add	r2, sp, #32
 80284c8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80284cc:	4694      	mov	ip, r2
 80284ce:	4626      	mov	r6, r4
 80284d0:	2e00      	cmp	r6, #0
 80284d2:	f1a0 0004 	sub.w	r0, r0, #4
 80284d6:	dc4c      	bgt.n	8028572 <__kernel_rem_pio2f+0x18a>
 80284d8:	4628      	mov	r0, r5
 80284da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80284de:	f7ff fef7 	bl	80282d0 <scalbnf>
 80284e2:	eeb0 8a40 	vmov.f32	s16, s0
 80284e6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80284ea:	ee28 0a00 	vmul.f32	s0, s16, s0
 80284ee:	f7fe fe77 	bl	80271e0 <floorf>
 80284f2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80284f6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80284fa:	2d00      	cmp	r5, #0
 80284fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8028500:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8028504:	ee17 9a90 	vmov	r9, s15
 8028508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802850c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8028510:	dd41      	ble.n	8028596 <__kernel_rem_pio2f+0x1ae>
 8028512:	f104 3cff 	add.w	ip, r4, #4294967295
 8028516:	a908      	add	r1, sp, #32
 8028518:	f1c5 0e08 	rsb	lr, r5, #8
 802851c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8028520:	fa46 f00e 	asr.w	r0, r6, lr
 8028524:	4481      	add	r9, r0
 8028526:	fa00 f00e 	lsl.w	r0, r0, lr
 802852a:	1a36      	subs	r6, r6, r0
 802852c:	f1c5 0007 	rsb	r0, r5, #7
 8028530:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8028534:	4106      	asrs	r6, r0
 8028536:	2e00      	cmp	r6, #0
 8028538:	dd3c      	ble.n	80285b4 <__kernel_rem_pio2f+0x1cc>
 802853a:	f04f 0e00 	mov.w	lr, #0
 802853e:	f109 0901 	add.w	r9, r9, #1
 8028542:	4670      	mov	r0, lr
 8028544:	4574      	cmp	r4, lr
 8028546:	dc68      	bgt.n	802861a <__kernel_rem_pio2f+0x232>
 8028548:	2d00      	cmp	r5, #0
 802854a:	dd03      	ble.n	8028554 <__kernel_rem_pio2f+0x16c>
 802854c:	2d01      	cmp	r5, #1
 802854e:	d074      	beq.n	802863a <__kernel_rem_pio2f+0x252>
 8028550:	2d02      	cmp	r5, #2
 8028552:	d07d      	beq.n	8028650 <__kernel_rem_pio2f+0x268>
 8028554:	2e02      	cmp	r6, #2
 8028556:	d12d      	bne.n	80285b4 <__kernel_rem_pio2f+0x1cc>
 8028558:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802855c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8028560:	b340      	cbz	r0, 80285b4 <__kernel_rem_pio2f+0x1cc>
 8028562:	4628      	mov	r0, r5
 8028564:	9306      	str	r3, [sp, #24]
 8028566:	f7ff feb3 	bl	80282d0 <scalbnf>
 802856a:	9b06      	ldr	r3, [sp, #24]
 802856c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8028570:	e020      	b.n	80285b4 <__kernel_rem_pio2f+0x1cc>
 8028572:	ee60 7a28 	vmul.f32	s15, s0, s17
 8028576:	3e01      	subs	r6, #1
 8028578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802857c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028580:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8028584:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8028588:	ecac 0a01 	vstmia	ip!, {s0}
 802858c:	ed90 0a00 	vldr	s0, [r0]
 8028590:	ee37 0a80 	vadd.f32	s0, s15, s0
 8028594:	e79c      	b.n	80284d0 <__kernel_rem_pio2f+0xe8>
 8028596:	d105      	bne.n	80285a4 <__kernel_rem_pio2f+0x1bc>
 8028598:	1e60      	subs	r0, r4, #1
 802859a:	a908      	add	r1, sp, #32
 802859c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80285a0:	11f6      	asrs	r6, r6, #7
 80285a2:	e7c8      	b.n	8028536 <__kernel_rem_pio2f+0x14e>
 80285a4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80285a8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80285ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80285b0:	da31      	bge.n	8028616 <__kernel_rem_pio2f+0x22e>
 80285b2:	2600      	movs	r6, #0
 80285b4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80285b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80285bc:	f040 8098 	bne.w	80286f0 <__kernel_rem_pio2f+0x308>
 80285c0:	1e60      	subs	r0, r4, #1
 80285c2:	2200      	movs	r2, #0
 80285c4:	4550      	cmp	r0, sl
 80285c6:	da4b      	bge.n	8028660 <__kernel_rem_pio2f+0x278>
 80285c8:	2a00      	cmp	r2, #0
 80285ca:	d065      	beq.n	8028698 <__kernel_rem_pio2f+0x2b0>
 80285cc:	3c01      	subs	r4, #1
 80285ce:	ab08      	add	r3, sp, #32
 80285d0:	3d08      	subs	r5, #8
 80285d2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80285d6:	2b00      	cmp	r3, #0
 80285d8:	d0f8      	beq.n	80285cc <__kernel_rem_pio2f+0x1e4>
 80285da:	4628      	mov	r0, r5
 80285dc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80285e0:	f7ff fe76 	bl	80282d0 <scalbnf>
 80285e4:	1c63      	adds	r3, r4, #1
 80285e6:	aa44      	add	r2, sp, #272	@ 0x110
 80285e8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80286e8 <__kernel_rem_pio2f+0x300>
 80285ec:	0099      	lsls	r1, r3, #2
 80285ee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80285f2:	4623      	mov	r3, r4
 80285f4:	2b00      	cmp	r3, #0
 80285f6:	f280 80a9 	bge.w	802874c <__kernel_rem_pio2f+0x364>
 80285fa:	4623      	mov	r3, r4
 80285fc:	2b00      	cmp	r3, #0
 80285fe:	f2c0 80c7 	blt.w	8028790 <__kernel_rem_pio2f+0x3a8>
 8028602:	aa44      	add	r2, sp, #272	@ 0x110
 8028604:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8028608:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80286e0 <__kernel_rem_pio2f+0x2f8>
 802860c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80286ec <__kernel_rem_pio2f+0x304>
 8028610:	2000      	movs	r0, #0
 8028612:	1ae2      	subs	r2, r4, r3
 8028614:	e0b1      	b.n	802877a <__kernel_rem_pio2f+0x392>
 8028616:	2602      	movs	r6, #2
 8028618:	e78f      	b.n	802853a <__kernel_rem_pio2f+0x152>
 802861a:	f852 1b04 	ldr.w	r1, [r2], #4
 802861e:	b948      	cbnz	r0, 8028634 <__kernel_rem_pio2f+0x24c>
 8028620:	b121      	cbz	r1, 802862c <__kernel_rem_pio2f+0x244>
 8028622:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8028626:	f842 1c04 	str.w	r1, [r2, #-4]
 802862a:	2101      	movs	r1, #1
 802862c:	f10e 0e01 	add.w	lr, lr, #1
 8028630:	4608      	mov	r0, r1
 8028632:	e787      	b.n	8028544 <__kernel_rem_pio2f+0x15c>
 8028634:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8028638:	e7f5      	b.n	8028626 <__kernel_rem_pio2f+0x23e>
 802863a:	f104 3cff 	add.w	ip, r4, #4294967295
 802863e:	aa08      	add	r2, sp, #32
 8028640:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8028644:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8028648:	a908      	add	r1, sp, #32
 802864a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 802864e:	e781      	b.n	8028554 <__kernel_rem_pio2f+0x16c>
 8028650:	f104 3cff 	add.w	ip, r4, #4294967295
 8028654:	aa08      	add	r2, sp, #32
 8028656:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802865a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802865e:	e7f3      	b.n	8028648 <__kernel_rem_pio2f+0x260>
 8028660:	a908      	add	r1, sp, #32
 8028662:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8028666:	3801      	subs	r0, #1
 8028668:	430a      	orrs	r2, r1
 802866a:	e7ab      	b.n	80285c4 <__kernel_rem_pio2f+0x1dc>
 802866c:	3201      	adds	r2, #1
 802866e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8028672:	2e00      	cmp	r6, #0
 8028674:	d0fa      	beq.n	802866c <__kernel_rem_pio2f+0x284>
 8028676:	9905      	ldr	r1, [sp, #20]
 8028678:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 802867c:	eb0d 0001 	add.w	r0, sp, r1
 8028680:	18e6      	adds	r6, r4, r3
 8028682:	a91c      	add	r1, sp, #112	@ 0x70
 8028684:	f104 0c01 	add.w	ip, r4, #1
 8028688:	384c      	subs	r0, #76	@ 0x4c
 802868a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 802868e:	4422      	add	r2, r4
 8028690:	4562      	cmp	r2, ip
 8028692:	da04      	bge.n	802869e <__kernel_rem_pio2f+0x2b6>
 8028694:	4614      	mov	r4, r2
 8028696:	e70e      	b.n	80284b6 <__kernel_rem_pio2f+0xce>
 8028698:	9804      	ldr	r0, [sp, #16]
 802869a:	2201      	movs	r2, #1
 802869c:	e7e7      	b.n	802866e <__kernel_rem_pio2f+0x286>
 802869e:	9903      	ldr	r1, [sp, #12]
 80286a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80286a4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80286a8:	9105      	str	r1, [sp, #20]
 80286aa:	ee07 1a90 	vmov	s15, r1
 80286ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80286b2:	2400      	movs	r4, #0
 80286b4:	ece6 7a01 	vstmia	r6!, {s15}
 80286b8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80286ec <__kernel_rem_pio2f+0x304>
 80286bc:	46b1      	mov	r9, r6
 80286be:	455c      	cmp	r4, fp
 80286c0:	dd04      	ble.n	80286cc <__kernel_rem_pio2f+0x2e4>
 80286c2:	ece0 7a01 	vstmia	r0!, {s15}
 80286c6:	f10c 0c01 	add.w	ip, ip, #1
 80286ca:	e7e1      	b.n	8028690 <__kernel_rem_pio2f+0x2a8>
 80286cc:	ecfe 6a01 	vldmia	lr!, {s13}
 80286d0:	ed39 7a01 	vldmdb	r9!, {s14}
 80286d4:	3401      	adds	r4, #1
 80286d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80286da:	e7f0      	b.n	80286be <__kernel_rem_pio2f+0x2d6>
 80286dc:	080312ec 	.word	0x080312ec
 80286e0:	080312c0 	.word	0x080312c0
 80286e4:	43800000 	.word	0x43800000
 80286e8:	3b800000 	.word	0x3b800000
 80286ec:	00000000 	.word	0x00000000
 80286f0:	9b02      	ldr	r3, [sp, #8]
 80286f2:	eeb0 0a48 	vmov.f32	s0, s16
 80286f6:	eba3 0008 	sub.w	r0, r3, r8
 80286fa:	f7ff fde9 	bl	80282d0 <scalbnf>
 80286fe:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80286e4 <__kernel_rem_pio2f+0x2fc>
 8028702:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8028706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802870a:	db19      	blt.n	8028740 <__kernel_rem_pio2f+0x358>
 802870c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80286e8 <__kernel_rem_pio2f+0x300>
 8028710:	ee60 7a27 	vmul.f32	s15, s0, s15
 8028714:	aa08      	add	r2, sp, #32
 8028716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802871a:	3508      	adds	r5, #8
 802871c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028720:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8028724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028728:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802872c:	ee10 3a10 	vmov	r3, s0
 8028730:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8028734:	ee17 3a90 	vmov	r3, s15
 8028738:	3401      	adds	r4, #1
 802873a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802873e:	e74c      	b.n	80285da <__kernel_rem_pio2f+0x1f2>
 8028740:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8028744:	aa08      	add	r2, sp, #32
 8028746:	ee10 3a10 	vmov	r3, s0
 802874a:	e7f6      	b.n	802873a <__kernel_rem_pio2f+0x352>
 802874c:	a808      	add	r0, sp, #32
 802874e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8028752:	9001      	str	r0, [sp, #4]
 8028754:	ee07 0a90 	vmov	s15, r0
 8028758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802875c:	3b01      	subs	r3, #1
 802875e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8028762:	ee20 0a07 	vmul.f32	s0, s0, s14
 8028766:	ed62 7a01 	vstmdb	r2!, {s15}
 802876a:	e743      	b.n	80285f4 <__kernel_rem_pio2f+0x20c>
 802876c:	ecfc 6a01 	vldmia	ip!, {s13}
 8028770:	ecb5 7a01 	vldmia	r5!, {s14}
 8028774:	eee6 7a87 	vfma.f32	s15, s13, s14
 8028778:	3001      	adds	r0, #1
 802877a:	4550      	cmp	r0, sl
 802877c:	dc01      	bgt.n	8028782 <__kernel_rem_pio2f+0x39a>
 802877e:	4282      	cmp	r2, r0
 8028780:	daf4      	bge.n	802876c <__kernel_rem_pio2f+0x384>
 8028782:	a858      	add	r0, sp, #352	@ 0x160
 8028784:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8028788:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 802878c:	3b01      	subs	r3, #1
 802878e:	e735      	b.n	80285fc <__kernel_rem_pio2f+0x214>
 8028790:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8028792:	2b02      	cmp	r3, #2
 8028794:	dc09      	bgt.n	80287aa <__kernel_rem_pio2f+0x3c2>
 8028796:	2b00      	cmp	r3, #0
 8028798:	dc2b      	bgt.n	80287f2 <__kernel_rem_pio2f+0x40a>
 802879a:	d044      	beq.n	8028826 <__kernel_rem_pio2f+0x43e>
 802879c:	f009 0007 	and.w	r0, r9, #7
 80287a0:	b059      	add	sp, #356	@ 0x164
 80287a2:	ecbd 8b04 	vpop	{d8-d9}
 80287a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80287aa:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80287ac:	2b03      	cmp	r3, #3
 80287ae:	d1f5      	bne.n	802879c <__kernel_rem_pio2f+0x3b4>
 80287b0:	aa30      	add	r2, sp, #192	@ 0xc0
 80287b2:	1f0b      	subs	r3, r1, #4
 80287b4:	4413      	add	r3, r2
 80287b6:	461a      	mov	r2, r3
 80287b8:	4620      	mov	r0, r4
 80287ba:	2800      	cmp	r0, #0
 80287bc:	f1a2 0204 	sub.w	r2, r2, #4
 80287c0:	dc52      	bgt.n	8028868 <__kernel_rem_pio2f+0x480>
 80287c2:	4622      	mov	r2, r4
 80287c4:	2a01      	cmp	r2, #1
 80287c6:	f1a3 0304 	sub.w	r3, r3, #4
 80287ca:	dc5d      	bgt.n	8028888 <__kernel_rem_pio2f+0x4a0>
 80287cc:	ab30      	add	r3, sp, #192	@ 0xc0
 80287ce:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80286ec <__kernel_rem_pio2f+0x304>
 80287d2:	440b      	add	r3, r1
 80287d4:	2c01      	cmp	r4, #1
 80287d6:	dc67      	bgt.n	80288a8 <__kernel_rem_pio2f+0x4c0>
 80287d8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80287dc:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80287e0:	2e00      	cmp	r6, #0
 80287e2:	d167      	bne.n	80288b4 <__kernel_rem_pio2f+0x4cc>
 80287e4:	edc7 6a00 	vstr	s13, [r7]
 80287e8:	ed87 7a01 	vstr	s14, [r7, #4]
 80287ec:	edc7 7a02 	vstr	s15, [r7, #8]
 80287f0:	e7d4      	b.n	802879c <__kernel_rem_pio2f+0x3b4>
 80287f2:	ab30      	add	r3, sp, #192	@ 0xc0
 80287f4:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80286ec <__kernel_rem_pio2f+0x304>
 80287f8:	440b      	add	r3, r1
 80287fa:	4622      	mov	r2, r4
 80287fc:	2a00      	cmp	r2, #0
 80287fe:	da24      	bge.n	802884a <__kernel_rem_pio2f+0x462>
 8028800:	b34e      	cbz	r6, 8028856 <__kernel_rem_pio2f+0x46e>
 8028802:	eef1 7a47 	vneg.f32	s15, s14
 8028806:	edc7 7a00 	vstr	s15, [r7]
 802880a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 802880e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028812:	aa31      	add	r2, sp, #196	@ 0xc4
 8028814:	2301      	movs	r3, #1
 8028816:	429c      	cmp	r4, r3
 8028818:	da20      	bge.n	802885c <__kernel_rem_pio2f+0x474>
 802881a:	b10e      	cbz	r6, 8028820 <__kernel_rem_pio2f+0x438>
 802881c:	eef1 7a67 	vneg.f32	s15, s15
 8028820:	edc7 7a01 	vstr	s15, [r7, #4]
 8028824:	e7ba      	b.n	802879c <__kernel_rem_pio2f+0x3b4>
 8028826:	ab30      	add	r3, sp, #192	@ 0xc0
 8028828:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80286ec <__kernel_rem_pio2f+0x304>
 802882c:	440b      	add	r3, r1
 802882e:	2c00      	cmp	r4, #0
 8028830:	da05      	bge.n	802883e <__kernel_rem_pio2f+0x456>
 8028832:	b10e      	cbz	r6, 8028838 <__kernel_rem_pio2f+0x450>
 8028834:	eef1 7a67 	vneg.f32	s15, s15
 8028838:	edc7 7a00 	vstr	s15, [r7]
 802883c:	e7ae      	b.n	802879c <__kernel_rem_pio2f+0x3b4>
 802883e:	ed33 7a01 	vldmdb	r3!, {s14}
 8028842:	3c01      	subs	r4, #1
 8028844:	ee77 7a87 	vadd.f32	s15, s15, s14
 8028848:	e7f1      	b.n	802882e <__kernel_rem_pio2f+0x446>
 802884a:	ed73 7a01 	vldmdb	r3!, {s15}
 802884e:	3a01      	subs	r2, #1
 8028850:	ee37 7a27 	vadd.f32	s14, s14, s15
 8028854:	e7d2      	b.n	80287fc <__kernel_rem_pio2f+0x414>
 8028856:	eef0 7a47 	vmov.f32	s15, s14
 802885a:	e7d4      	b.n	8028806 <__kernel_rem_pio2f+0x41e>
 802885c:	ecb2 7a01 	vldmia	r2!, {s14}
 8028860:	3301      	adds	r3, #1
 8028862:	ee77 7a87 	vadd.f32	s15, s15, s14
 8028866:	e7d6      	b.n	8028816 <__kernel_rem_pio2f+0x42e>
 8028868:	edd2 7a00 	vldr	s15, [r2]
 802886c:	edd2 6a01 	vldr	s13, [r2, #4]
 8028870:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8028874:	3801      	subs	r0, #1
 8028876:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802887a:	ed82 7a00 	vstr	s14, [r2]
 802887e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028882:	edc2 7a01 	vstr	s15, [r2, #4]
 8028886:	e798      	b.n	80287ba <__kernel_rem_pio2f+0x3d2>
 8028888:	edd3 7a00 	vldr	s15, [r3]
 802888c:	edd3 6a01 	vldr	s13, [r3, #4]
 8028890:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8028894:	3a01      	subs	r2, #1
 8028896:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802889a:	ed83 7a00 	vstr	s14, [r3]
 802889e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80288a2:	edc3 7a01 	vstr	s15, [r3, #4]
 80288a6:	e78d      	b.n	80287c4 <__kernel_rem_pio2f+0x3dc>
 80288a8:	ed33 7a01 	vldmdb	r3!, {s14}
 80288ac:	3c01      	subs	r4, #1
 80288ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80288b2:	e78f      	b.n	80287d4 <__kernel_rem_pio2f+0x3ec>
 80288b4:	eef1 6a66 	vneg.f32	s13, s13
 80288b8:	eeb1 7a47 	vneg.f32	s14, s14
 80288bc:	edc7 6a00 	vstr	s13, [r7]
 80288c0:	ed87 7a01 	vstr	s14, [r7, #4]
 80288c4:	eef1 7a67 	vneg.f32	s15, s15
 80288c8:	e790      	b.n	80287ec <__kernel_rem_pio2f+0x404>
 80288ca:	bf00      	nop

080288cc <_init>:
 80288cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80288ce:	bf00      	nop
 80288d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80288d2:	bc08      	pop	{r3}
 80288d4:	469e      	mov	lr, r3
 80288d6:	4770      	bx	lr

080288d8 <_fini>:
 80288d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80288da:	bf00      	nop
 80288dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80288de:	bc08      	pop	{r3}
 80288e0:	469e      	mov	lr, r3
 80288e2:	4770      	bx	lr
