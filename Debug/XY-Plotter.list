
XY-Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021194  08008000  08008000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008d78  08029198  08029198  00023198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08031f10  08031f10  0002c67c  2**0
                  CONTENTS
  4 .ARM          00000008  08031f10  08031f10  0002bf10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08031f18  08031f18  0002c67c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08031f18  08031f18  0002bf18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08031f1c  08031f1c  0002bf1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000067c  20000000  08031f20  0002c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bc4  2000067c  0803259c  0002c67c  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  20003240  0803259c  0002d240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002c67c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000dde94  00000000  00000000  0002c6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bbae  00000000  00000000  0010a540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00013be5  00000000  00000000  001160ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002050  00000000  00000000  00129cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001da3  00000000  00000000  0012bd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030710  00000000  00000000  0012dacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00010572  00000000  00000000  0015e1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e74d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078a0  00000000  00000000  0016e790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00176030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	@ (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	@ (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	@ (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	2000067c 	.word	0x2000067c
 800801c:	00000000 	.word	0x00000000
 8008020:	0802917c 	.word	0x0802917c

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	@ (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	@ (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	@ (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000680 	.word	0x20000680
 800803c:	0802917c 	.word	0x0802917c

08008040 <strcmp>:
 8008040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008048:	2a01      	cmp	r2, #1
 800804a:	bf28      	it	cs
 800804c:	429a      	cmpcs	r2, r3
 800804e:	d0f7      	beq.n	8008040 <strcmp>
 8008050:	1ad0      	subs	r0, r2, r3
 8008052:	4770      	bx	lr
	...

08008060 <memchr>:
 8008060:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008064:	2a10      	cmp	r2, #16
 8008066:	db2b      	blt.n	80080c0 <memchr+0x60>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	d008      	beq.n	8008080 <memchr+0x20>
 800806e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008072:	3a01      	subs	r2, #1
 8008074:	428b      	cmp	r3, r1
 8008076:	d02d      	beq.n	80080d4 <memchr+0x74>
 8008078:	f010 0f07 	tst.w	r0, #7
 800807c:	b342      	cbz	r2, 80080d0 <memchr+0x70>
 800807e:	d1f6      	bne.n	800806e <memchr+0xe>
 8008080:	b4f0      	push	{r4, r5, r6, r7}
 8008082:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008086:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800808a:	f022 0407 	bic.w	r4, r2, #7
 800808e:	f07f 0700 	mvns.w	r7, #0
 8008092:	2300      	movs	r3, #0
 8008094:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008098:	3c08      	subs	r4, #8
 800809a:	ea85 0501 	eor.w	r5, r5, r1
 800809e:	ea86 0601 	eor.w	r6, r6, r1
 80080a2:	fa85 f547 	uadd8	r5, r5, r7
 80080a6:	faa3 f587 	sel	r5, r3, r7
 80080aa:	fa86 f647 	uadd8	r6, r6, r7
 80080ae:	faa5 f687 	sel	r6, r5, r7
 80080b2:	b98e      	cbnz	r6, 80080d8 <memchr+0x78>
 80080b4:	d1ee      	bne.n	8008094 <memchr+0x34>
 80080b6:	bcf0      	pop	{r4, r5, r6, r7}
 80080b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80080bc:	f002 0207 	and.w	r2, r2, #7
 80080c0:	b132      	cbz	r2, 80080d0 <memchr+0x70>
 80080c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080c6:	3a01      	subs	r2, #1
 80080c8:	ea83 0301 	eor.w	r3, r3, r1
 80080cc:	b113      	cbz	r3, 80080d4 <memchr+0x74>
 80080ce:	d1f8      	bne.n	80080c2 <memchr+0x62>
 80080d0:	2000      	movs	r0, #0
 80080d2:	4770      	bx	lr
 80080d4:	3801      	subs	r0, #1
 80080d6:	4770      	bx	lr
 80080d8:	2d00      	cmp	r5, #0
 80080da:	bf06      	itte	eq
 80080dc:	4635      	moveq	r5, r6
 80080de:	3803      	subeq	r0, #3
 80080e0:	3807      	subne	r0, #7
 80080e2:	f015 0f01 	tst.w	r5, #1
 80080e6:	d107      	bne.n	80080f8 <memchr+0x98>
 80080e8:	3001      	adds	r0, #1
 80080ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80080ee:	bf02      	ittt	eq
 80080f0:	3001      	addeq	r0, #1
 80080f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80080f6:	3001      	addeq	r0, #1
 80080f8:	bcf0      	pop	{r4, r5, r6, r7}
 80080fa:	3801      	subs	r0, #1
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop

08008100 <strlen>:
 8008100:	4603      	mov	r3, r0
 8008102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008106:	2a00      	cmp	r2, #0
 8008108:	d1fb      	bne.n	8008102 <strlen+0x2>
 800810a:	1a18      	subs	r0, r3, r0
 800810c:	3801      	subs	r0, #1
 800810e:	4770      	bx	lr

08008110 <__aeabi_drsub>:
 8008110:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8008114:	e002      	b.n	800811c <__adddf3>
 8008116:	bf00      	nop

08008118 <__aeabi_dsub>:
 8008118:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800811c <__adddf3>:
 800811c:	b530      	push	{r4, r5, lr}
 800811e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008122:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008126:	ea94 0f05 	teq	r4, r5
 800812a:	bf08      	it	eq
 800812c:	ea90 0f02 	teqeq	r0, r2
 8008130:	bf1f      	itttt	ne
 8008132:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008136:	ea55 0c02 	orrsne.w	ip, r5, r2
 800813a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800813e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008142:	f000 80e2 	beq.w	800830a <__adddf3+0x1ee>
 8008146:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800814a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800814e:	bfb8      	it	lt
 8008150:	426d      	neglt	r5, r5
 8008152:	dd0c      	ble.n	800816e <__adddf3+0x52>
 8008154:	442c      	add	r4, r5
 8008156:	ea80 0202 	eor.w	r2, r0, r2
 800815a:	ea81 0303 	eor.w	r3, r1, r3
 800815e:	ea82 0000 	eor.w	r0, r2, r0
 8008162:	ea83 0101 	eor.w	r1, r3, r1
 8008166:	ea80 0202 	eor.w	r2, r0, r2
 800816a:	ea81 0303 	eor.w	r3, r1, r3
 800816e:	2d36      	cmp	r5, #54	@ 0x36
 8008170:	bf88      	it	hi
 8008172:	bd30      	pophi	{r4, r5, pc}
 8008174:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008178:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800817c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008180:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008184:	d002      	beq.n	800818c <__adddf3+0x70>
 8008186:	4240      	negs	r0, r0
 8008188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800818c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008190:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008194:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008198:	d002      	beq.n	80081a0 <__adddf3+0x84>
 800819a:	4252      	negs	r2, r2
 800819c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80081a0:	ea94 0f05 	teq	r4, r5
 80081a4:	f000 80a7 	beq.w	80082f6 <__adddf3+0x1da>
 80081a8:	f1a4 0401 	sub.w	r4, r4, #1
 80081ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80081b0:	db0d      	blt.n	80081ce <__adddf3+0xb2>
 80081b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80081b6:	fa22 f205 	lsr.w	r2, r2, r5
 80081ba:	1880      	adds	r0, r0, r2
 80081bc:	f141 0100 	adc.w	r1, r1, #0
 80081c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081c4:	1880      	adds	r0, r0, r2
 80081c6:	fa43 f305 	asr.w	r3, r3, r5
 80081ca:	4159      	adcs	r1, r3
 80081cc:	e00e      	b.n	80081ec <__adddf3+0xd0>
 80081ce:	f1a5 0520 	sub.w	r5, r5, #32
 80081d2:	f10e 0e20 	add.w	lr, lr, #32
 80081d6:	2a01      	cmp	r2, #1
 80081d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081dc:	bf28      	it	cs
 80081de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081e2:	fa43 f305 	asr.w	r3, r3, r5
 80081e6:	18c0      	adds	r0, r0, r3
 80081e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80081f0:	d507      	bpl.n	8008202 <__adddf3+0xe6>
 80081f2:	f04f 0e00 	mov.w	lr, #0
 80081f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8008202:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8008206:	d31b      	bcc.n	8008240 <__adddf3+0x124>
 8008208:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800820c:	d30c      	bcc.n	8008228 <__adddf3+0x10c>
 800820e:	0849      	lsrs	r1, r1, #1
 8008210:	ea5f 0030 	movs.w	r0, r0, rrx
 8008214:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008218:	f104 0401 	add.w	r4, r4, #1
 800821c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008220:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8008224:	f080 809a 	bcs.w	800835c <__adddf3+0x240>
 8008228:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800822c:	bf08      	it	eq
 800822e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008232:	f150 0000 	adcs.w	r0, r0, #0
 8008236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800823a:	ea41 0105 	orr.w	r1, r1, r5
 800823e:	bd30      	pop	{r4, r5, pc}
 8008240:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008244:	4140      	adcs	r0, r0
 8008246:	eb41 0101 	adc.w	r1, r1, r1
 800824a:	3c01      	subs	r4, #1
 800824c:	bf28      	it	cs
 800824e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8008252:	d2e9      	bcs.n	8008228 <__adddf3+0x10c>
 8008254:	f091 0f00 	teq	r1, #0
 8008258:	bf04      	itt	eq
 800825a:	4601      	moveq	r1, r0
 800825c:	2000      	moveq	r0, #0
 800825e:	fab1 f381 	clz	r3, r1
 8008262:	bf08      	it	eq
 8008264:	3320      	addeq	r3, #32
 8008266:	f1a3 030b 	sub.w	r3, r3, #11
 800826a:	f1b3 0220 	subs.w	r2, r3, #32
 800826e:	da0c      	bge.n	800828a <__adddf3+0x16e>
 8008270:	320c      	adds	r2, #12
 8008272:	dd08      	ble.n	8008286 <__adddf3+0x16a>
 8008274:	f102 0c14 	add.w	ip, r2, #20
 8008278:	f1c2 020c 	rsb	r2, r2, #12
 800827c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008280:	fa21 f102 	lsr.w	r1, r1, r2
 8008284:	e00c      	b.n	80082a0 <__adddf3+0x184>
 8008286:	f102 0214 	add.w	r2, r2, #20
 800828a:	bfd8      	it	le
 800828c:	f1c2 0c20 	rsble	ip, r2, #32
 8008290:	fa01 f102 	lsl.w	r1, r1, r2
 8008294:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008298:	bfdc      	itt	le
 800829a:	ea41 010c 	orrle.w	r1, r1, ip
 800829e:	4090      	lslle	r0, r2
 80082a0:	1ae4      	subs	r4, r4, r3
 80082a2:	bfa2      	ittt	ge
 80082a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80082a8:	4329      	orrge	r1, r5
 80082aa:	bd30      	popge	{r4, r5, pc}
 80082ac:	ea6f 0404 	mvn.w	r4, r4
 80082b0:	3c1f      	subs	r4, #31
 80082b2:	da1c      	bge.n	80082ee <__adddf3+0x1d2>
 80082b4:	340c      	adds	r4, #12
 80082b6:	dc0e      	bgt.n	80082d6 <__adddf3+0x1ba>
 80082b8:	f104 0414 	add.w	r4, r4, #20
 80082bc:	f1c4 0220 	rsb	r2, r4, #32
 80082c0:	fa20 f004 	lsr.w	r0, r0, r4
 80082c4:	fa01 f302 	lsl.w	r3, r1, r2
 80082c8:	ea40 0003 	orr.w	r0, r0, r3
 80082cc:	fa21 f304 	lsr.w	r3, r1, r4
 80082d0:	ea45 0103 	orr.w	r1, r5, r3
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f1c4 040c 	rsb	r4, r4, #12
 80082da:	f1c4 0220 	rsb	r2, r4, #32
 80082de:	fa20 f002 	lsr.w	r0, r0, r2
 80082e2:	fa01 f304 	lsl.w	r3, r1, r4
 80082e6:	ea40 0003 	orr.w	r0, r0, r3
 80082ea:	4629      	mov	r1, r5
 80082ec:	bd30      	pop	{r4, r5, pc}
 80082ee:	fa21 f004 	lsr.w	r0, r1, r4
 80082f2:	4629      	mov	r1, r5
 80082f4:	bd30      	pop	{r4, r5, pc}
 80082f6:	f094 0f00 	teq	r4, #0
 80082fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80082fe:	bf06      	itte	eq
 8008300:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8008304:	3401      	addeq	r4, #1
 8008306:	3d01      	subne	r5, #1
 8008308:	e74e      	b.n	80081a8 <__adddf3+0x8c>
 800830a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800830e:	bf18      	it	ne
 8008310:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008314:	d029      	beq.n	800836a <__adddf3+0x24e>
 8008316:	ea94 0f05 	teq	r4, r5
 800831a:	bf08      	it	eq
 800831c:	ea90 0f02 	teqeq	r0, r2
 8008320:	d005      	beq.n	800832e <__adddf3+0x212>
 8008322:	ea54 0c00 	orrs.w	ip, r4, r0
 8008326:	bf04      	itt	eq
 8008328:	4619      	moveq	r1, r3
 800832a:	4610      	moveq	r0, r2
 800832c:	bd30      	pop	{r4, r5, pc}
 800832e:	ea91 0f03 	teq	r1, r3
 8008332:	bf1e      	ittt	ne
 8008334:	2100      	movne	r1, #0
 8008336:	2000      	movne	r0, #0
 8008338:	bd30      	popne	{r4, r5, pc}
 800833a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800833e:	d105      	bne.n	800834c <__adddf3+0x230>
 8008340:	0040      	lsls	r0, r0, #1
 8008342:	4149      	adcs	r1, r1
 8008344:	bf28      	it	cs
 8008346:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800834a:	bd30      	pop	{r4, r5, pc}
 800834c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8008350:	bf3c      	itt	cc
 8008352:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8008356:	bd30      	popcc	{r4, r5, pc}
 8008358:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800835c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8008360:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008364:	f04f 0000 	mov.w	r0, #0
 8008368:	bd30      	pop	{r4, r5, pc}
 800836a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800836e:	bf1a      	itte	ne
 8008370:	4619      	movne	r1, r3
 8008372:	4610      	movne	r0, r2
 8008374:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008378:	bf1c      	itt	ne
 800837a:	460b      	movne	r3, r1
 800837c:	4602      	movne	r2, r0
 800837e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008382:	bf06      	itte	eq
 8008384:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008388:	ea91 0f03 	teqeq	r1, r3
 800838c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008390:	bd30      	pop	{r4, r5, pc}
 8008392:	bf00      	nop

08008394 <__aeabi_ui2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80083a8:	f04f 0500 	mov.w	r5, #0
 80083ac:	f04f 0100 	mov.w	r1, #0
 80083b0:	e750      	b.n	8008254 <__adddf3+0x138>
 80083b2:	bf00      	nop

080083b4 <__aeabi_i2d>:
 80083b4:	f090 0f00 	teq	r0, #0
 80083b8:	bf04      	itt	eq
 80083ba:	2100      	moveq	r1, #0
 80083bc:	4770      	bxeq	lr
 80083be:	b530      	push	{r4, r5, lr}
 80083c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80083c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80083c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80083cc:	bf48      	it	mi
 80083ce:	4240      	negmi	r0, r0
 80083d0:	f04f 0100 	mov.w	r1, #0
 80083d4:	e73e      	b.n	8008254 <__adddf3+0x138>
 80083d6:	bf00      	nop

080083d8 <__aeabi_f2d>:
 80083d8:	0042      	lsls	r2, r0, #1
 80083da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083de:	ea4f 0131 	mov.w	r1, r1, rrx
 80083e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083e6:	bf1f      	itttt	ne
 80083e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80083ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80083f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80083f4:	4770      	bxne	lr
 80083f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80083fa:	bf08      	it	eq
 80083fc:	4770      	bxeq	lr
 80083fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8008402:	bf04      	itt	eq
 8008404:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8008408:	4770      	bxeq	lr
 800840a:	b530      	push	{r4, r5, lr}
 800840c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8008410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8008414:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008418:	e71c      	b.n	8008254 <__adddf3+0x138>
 800841a:	bf00      	nop

0800841c <__aeabi_ul2d>:
 800841c:	ea50 0201 	orrs.w	r2, r0, r1
 8008420:	bf08      	it	eq
 8008422:	4770      	bxeq	lr
 8008424:	b530      	push	{r4, r5, lr}
 8008426:	f04f 0500 	mov.w	r5, #0
 800842a:	e00a      	b.n	8008442 <__aeabi_l2d+0x16>

0800842c <__aeabi_l2d>:
 800842c:	ea50 0201 	orrs.w	r2, r0, r1
 8008430:	bf08      	it	eq
 8008432:	4770      	bxeq	lr
 8008434:	b530      	push	{r4, r5, lr}
 8008436:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800843a:	d502      	bpl.n	8008442 <__aeabi_l2d+0x16>
 800843c:	4240      	negs	r0, r0
 800843e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008442:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008446:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800844a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800844e:	f43f aed8 	beq.w	8008202 <__adddf3+0xe6>
 8008452:	f04f 0203 	mov.w	r2, #3
 8008456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800845a:	bf18      	it	ne
 800845c:	3203      	addne	r2, #3
 800845e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008462:	bf18      	it	ne
 8008464:	3203      	addne	r2, #3
 8008466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800846a:	f1c2 0320 	rsb	r3, r2, #32
 800846e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008472:	fa20 f002 	lsr.w	r0, r0, r2
 8008476:	fa01 fe03 	lsl.w	lr, r1, r3
 800847a:	ea40 000e 	orr.w	r0, r0, lr
 800847e:	fa21 f102 	lsr.w	r1, r1, r2
 8008482:	4414      	add	r4, r2
 8008484:	e6bd      	b.n	8008202 <__adddf3+0xe6>
 8008486:	bf00      	nop

08008488 <__aeabi_dmul>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800848e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008496:	bf1d      	ittte	ne
 8008498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800849c:	ea94 0f0c 	teqne	r4, ip
 80084a0:	ea95 0f0c 	teqne	r5, ip
 80084a4:	f000 f8de 	bleq	8008664 <__aeabi_dmul+0x1dc>
 80084a8:	442c      	add	r4, r5
 80084aa:	ea81 0603 	eor.w	r6, r1, r3
 80084ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80084b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80084b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80084ba:	bf18      	it	ne
 80084bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80084c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084c8:	d038      	beq.n	800853c <__aeabi_dmul+0xb4>
 80084ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ce:	f04f 0500 	mov.w	r5, #0
 80084d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80084da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084de:	f04f 0600 	mov.w	r6, #0
 80084e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084e6:	f09c 0f00 	teq	ip, #0
 80084ea:	bf18      	it	ne
 80084ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80084f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80084f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80084f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80084fc:	d204      	bcs.n	8008508 <__aeabi_dmul+0x80>
 80084fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008502:	416d      	adcs	r5, r5
 8008504:	eb46 0606 	adc.w	r6, r6, r6
 8008508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800850c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800851c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8008520:	bf88      	it	hi
 8008522:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8008526:	d81e      	bhi.n	8008566 <__aeabi_dmul+0xde>
 8008528:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800852c:	bf08      	it	eq
 800852e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008532:	f150 0000 	adcs.w	r0, r0, #0
 8008536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800853a:	bd70      	pop	{r4, r5, r6, pc}
 800853c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8008540:	ea46 0101 	orr.w	r1, r6, r1
 8008544:	ea40 0002 	orr.w	r0, r0, r2
 8008548:	ea81 0103 	eor.w	r1, r1, r3
 800854c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008550:	bfc2      	ittt	gt
 8008552:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800855a:	bd70      	popgt	{r4, r5, r6, pc}
 800855c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008560:	f04f 0e00 	mov.w	lr, #0
 8008564:	3c01      	subs	r4, #1
 8008566:	f300 80ab 	bgt.w	80086c0 <__aeabi_dmul+0x238>
 800856a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800856e:	bfde      	ittt	le
 8008570:	2000      	movle	r0, #0
 8008572:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8008576:	bd70      	pople	{r4, r5, r6, pc}
 8008578:	f1c4 0400 	rsb	r4, r4, #0
 800857c:	3c20      	subs	r4, #32
 800857e:	da35      	bge.n	80085ec <__aeabi_dmul+0x164>
 8008580:	340c      	adds	r4, #12
 8008582:	dc1b      	bgt.n	80085bc <__aeabi_dmul+0x134>
 8008584:	f104 0414 	add.w	r4, r4, #20
 8008588:	f1c4 0520 	rsb	r5, r4, #32
 800858c:	fa00 f305 	lsl.w	r3, r0, r5
 8008590:	fa20 f004 	lsr.w	r0, r0, r4
 8008594:	fa01 f205 	lsl.w	r2, r1, r5
 8008598:	ea40 0002 	orr.w	r0, r0, r2
 800859c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80085a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80085a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085a8:	fa21 f604 	lsr.w	r6, r1, r4
 80085ac:	eb42 0106 	adc.w	r1, r2, r6
 80085b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085b4:	bf08      	it	eq
 80085b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	f1c4 040c 	rsb	r4, r4, #12
 80085c0:	f1c4 0520 	rsb	r5, r4, #32
 80085c4:	fa00 f304 	lsl.w	r3, r0, r4
 80085c8:	fa20 f005 	lsr.w	r0, r0, r5
 80085cc:	fa01 f204 	lsl.w	r2, r1, r4
 80085d0:	ea40 0002 	orr.w	r0, r0, r2
 80085d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80085d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085dc:	f141 0100 	adc.w	r1, r1, #0
 80085e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085e4:	bf08      	it	eq
 80085e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	f1c4 0520 	rsb	r5, r4, #32
 80085f0:	fa00 f205 	lsl.w	r2, r0, r5
 80085f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085f8:	fa20 f304 	lsr.w	r3, r0, r4
 80085fc:	fa01 f205 	lsl.w	r2, r1, r5
 8008600:	ea43 0302 	orr.w	r3, r3, r2
 8008604:	fa21 f004 	lsr.w	r0, r1, r4
 8008608:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800860c:	fa21 f204 	lsr.w	r2, r1, r4
 8008610:	ea20 0002 	bic.w	r0, r0, r2
 8008614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800861c:	bf08      	it	eq
 800861e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008622:	bd70      	pop	{r4, r5, r6, pc}
 8008624:	f094 0f00 	teq	r4, #0
 8008628:	d10f      	bne.n	800864a <__aeabi_dmul+0x1c2>
 800862a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800862e:	0040      	lsls	r0, r0, #1
 8008630:	eb41 0101 	adc.w	r1, r1, r1
 8008634:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008638:	bf08      	it	eq
 800863a:	3c01      	subeq	r4, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1a6>
 800863e:	ea41 0106 	orr.w	r1, r1, r6
 8008642:	f095 0f00 	teq	r5, #0
 8008646:	bf18      	it	ne
 8008648:	4770      	bxne	lr
 800864a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800864e:	0052      	lsls	r2, r2, #1
 8008650:	eb43 0303 	adc.w	r3, r3, r3
 8008654:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008658:	bf08      	it	eq
 800865a:	3d01      	subeq	r5, #1
 800865c:	d0f7      	beq.n	800864e <__aeabi_dmul+0x1c6>
 800865e:	ea43 0306 	orr.w	r3, r3, r6
 8008662:	4770      	bx	lr
 8008664:	ea94 0f0c 	teq	r4, ip
 8008668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800866c:	bf18      	it	ne
 800866e:	ea95 0f0c 	teqne	r5, ip
 8008672:	d00c      	beq.n	800868e <__aeabi_dmul+0x206>
 8008674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008678:	bf18      	it	ne
 800867a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867e:	d1d1      	bne.n	8008624 <__aeabi_dmul+0x19c>
 8008680:	ea81 0103 	eor.w	r1, r1, r3
 8008684:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008688:	f04f 0000 	mov.w	r0, #0
 800868c:	bd70      	pop	{r4, r5, r6, pc}
 800868e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008692:	bf06      	itte	eq
 8008694:	4610      	moveq	r0, r2
 8008696:	4619      	moveq	r1, r3
 8008698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800869c:	d019      	beq.n	80086d2 <__aeabi_dmul+0x24a>
 800869e:	ea94 0f0c 	teq	r4, ip
 80086a2:	d102      	bne.n	80086aa <__aeabi_dmul+0x222>
 80086a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80086a8:	d113      	bne.n	80086d2 <__aeabi_dmul+0x24a>
 80086aa:	ea95 0f0c 	teq	r5, ip
 80086ae:	d105      	bne.n	80086bc <__aeabi_dmul+0x234>
 80086b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80086b4:	bf1c      	itt	ne
 80086b6:	4610      	movne	r0, r2
 80086b8:	4619      	movne	r1, r3
 80086ba:	d10a      	bne.n	80086d2 <__aeabi_dmul+0x24a>
 80086bc:	ea81 0103 	eor.w	r1, r1, r3
 80086c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80086c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80086c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80086cc:	f04f 0000 	mov.w	r0, #0
 80086d0:	bd70      	pop	{r4, r5, r6, pc}
 80086d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80086d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80086da:	bd70      	pop	{r4, r5, r6, pc}

080086dc <__aeabi_ddiv>:
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80086e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80086e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ea:	bf1d      	ittte	ne
 80086ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086f0:	ea94 0f0c 	teqne	r4, ip
 80086f4:	ea95 0f0c 	teqne	r5, ip
 80086f8:	f000 f8a7 	bleq	800884a <__aeabi_ddiv+0x16e>
 80086fc:	eba4 0405 	sub.w	r4, r4, r5
 8008700:	ea81 0e03 	eor.w	lr, r1, r3
 8008704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008708:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800870c:	f000 8088 	beq.w	8008820 <__aeabi_ddiv+0x144>
 8008710:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008714:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8008718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800871c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008720:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800872c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008730:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8008734:	429d      	cmp	r5, r3
 8008736:	bf08      	it	eq
 8008738:	4296      	cmpeq	r6, r2
 800873a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800873e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8008742:	d202      	bcs.n	800874a <__aeabi_ddiv+0x6e>
 8008744:	085b      	lsrs	r3, r3, #1
 8008746:	ea4f 0232 	mov.w	r2, r2, rrx
 800874a:	1ab6      	subs	r6, r6, r2
 800874c:	eb65 0503 	sbc.w	r5, r5, r3
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800875a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800875e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008766:	bf22      	ittt	cs
 8008768:	1ab6      	subcs	r6, r6, r2
 800876a:	4675      	movcs	r5, lr
 800876c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008770:	085b      	lsrs	r3, r3, #1
 8008772:	ea4f 0232 	mov.w	r2, r2, rrx
 8008776:	ebb6 0e02 	subs.w	lr, r6, r2
 800877a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800877e:	bf22      	ittt	cs
 8008780:	1ab6      	subcs	r6, r6, r2
 8008782:	4675      	movcs	r5, lr
 8008784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008788:	085b      	lsrs	r3, r3, #1
 800878a:	ea4f 0232 	mov.w	r2, r2, rrx
 800878e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008792:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008796:	bf22      	ittt	cs
 8008798:	1ab6      	subcs	r6, r6, r2
 800879a:	4675      	movcs	r5, lr
 800879c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80087a0:	085b      	lsrs	r3, r3, #1
 80087a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80087a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80087aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80087ae:	bf22      	ittt	cs
 80087b0:	1ab6      	subcs	r6, r6, r2
 80087b2:	4675      	movcs	r5, lr
 80087b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80087b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80087bc:	d018      	beq.n	80087f0 <__aeabi_ddiv+0x114>
 80087be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087da:	d1c0      	bne.n	800875e <__aeabi_ddiv+0x82>
 80087dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80087e0:	d10b      	bne.n	80087fa <__aeabi_ddiv+0x11e>
 80087e2:	ea41 0100 	orr.w	r1, r1, r0
 80087e6:	f04f 0000 	mov.w	r0, #0
 80087ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80087ee:	e7b6      	b.n	800875e <__aeabi_ddiv+0x82>
 80087f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80087f4:	bf04      	itt	eq
 80087f6:	4301      	orreq	r1, r0
 80087f8:	2000      	moveq	r0, #0
 80087fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80087fe:	bf88      	it	hi
 8008800:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8008804:	f63f aeaf 	bhi.w	8008566 <__aeabi_dmul+0xde>
 8008808:	ebb5 0c03 	subs.w	ip, r5, r3
 800880c:	bf04      	itt	eq
 800880e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008816:	f150 0000 	adcs.w	r0, r0, #0
 800881a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800881e:	bd70      	pop	{r4, r5, r6, pc}
 8008820:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8008824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800882c:	bfc2      	ittt	gt
 800882e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008836:	bd70      	popgt	{r4, r5, r6, pc}
 8008838:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800883c:	f04f 0e00 	mov.w	lr, #0
 8008840:	3c01      	subs	r4, #1
 8008842:	e690      	b.n	8008566 <__aeabi_dmul+0xde>
 8008844:	ea45 0e06 	orr.w	lr, r5, r6
 8008848:	e68d      	b.n	8008566 <__aeabi_dmul+0xde>
 800884a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800884e:	ea94 0f0c 	teq	r4, ip
 8008852:	bf08      	it	eq
 8008854:	ea95 0f0c 	teqeq	r5, ip
 8008858:	f43f af3b 	beq.w	80086d2 <__aeabi_dmul+0x24a>
 800885c:	ea94 0f0c 	teq	r4, ip
 8008860:	d10a      	bne.n	8008878 <__aeabi_ddiv+0x19c>
 8008862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008866:	f47f af34 	bne.w	80086d2 <__aeabi_dmul+0x24a>
 800886a:	ea95 0f0c 	teq	r5, ip
 800886e:	f47f af25 	bne.w	80086bc <__aeabi_dmul+0x234>
 8008872:	4610      	mov	r0, r2
 8008874:	4619      	mov	r1, r3
 8008876:	e72c      	b.n	80086d2 <__aeabi_dmul+0x24a>
 8008878:	ea95 0f0c 	teq	r5, ip
 800887c:	d106      	bne.n	800888c <__aeabi_ddiv+0x1b0>
 800887e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008882:	f43f aefd 	beq.w	8008680 <__aeabi_dmul+0x1f8>
 8008886:	4610      	mov	r0, r2
 8008888:	4619      	mov	r1, r3
 800888a:	e722      	b.n	80086d2 <__aeabi_dmul+0x24a>
 800888c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008890:	bf18      	it	ne
 8008892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008896:	f47f aec5 	bne.w	8008624 <__aeabi_dmul+0x19c>
 800889a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800889e:	f47f af0d 	bne.w	80086bc <__aeabi_dmul+0x234>
 80088a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80088a6:	f47f aeeb 	bne.w	8008680 <__aeabi_dmul+0x1f8>
 80088aa:	e712      	b.n	80086d2 <__aeabi_dmul+0x24a>

080088ac <__gedf2>:
 80088ac:	f04f 3cff 	mov.w	ip, #4294967295
 80088b0:	e006      	b.n	80088c0 <__cmpdf2+0x4>
 80088b2:	bf00      	nop

080088b4 <__ledf2>:
 80088b4:	f04f 0c01 	mov.w	ip, #1
 80088b8:	e002      	b.n	80088c0 <__cmpdf2+0x4>
 80088ba:	bf00      	nop

080088bc <__cmpdf2>:
 80088bc:	f04f 0c01 	mov.w	ip, #1
 80088c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088d0:	bf18      	it	ne
 80088d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088d6:	d01b      	beq.n	8008910 <__cmpdf2+0x54>
 80088d8:	b001      	add	sp, #4
 80088da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088de:	bf0c      	ite	eq
 80088e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088e4:	ea91 0f03 	teqne	r1, r3
 80088e8:	bf02      	ittt	eq
 80088ea:	ea90 0f02 	teqeq	r0, r2
 80088ee:	2000      	moveq	r0, #0
 80088f0:	4770      	bxeq	lr
 80088f2:	f110 0f00 	cmn.w	r0, #0
 80088f6:	ea91 0f03 	teq	r1, r3
 80088fa:	bf58      	it	pl
 80088fc:	4299      	cmppl	r1, r3
 80088fe:	bf08      	it	eq
 8008900:	4290      	cmpeq	r0, r2
 8008902:	bf2c      	ite	cs
 8008904:	17d8      	asrcs	r0, r3, #31
 8008906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800890a:	f040 0001 	orr.w	r0, r0, #1
 800890e:	4770      	bx	lr
 8008910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008918:	d102      	bne.n	8008920 <__cmpdf2+0x64>
 800891a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800891e:	d107      	bne.n	8008930 <__cmpdf2+0x74>
 8008920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008928:	d1d6      	bne.n	80088d8 <__cmpdf2+0x1c>
 800892a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800892e:	d0d3      	beq.n	80088d8 <__cmpdf2+0x1c>
 8008930:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop

08008938 <__aeabi_cdrcmple>:
 8008938:	4684      	mov	ip, r0
 800893a:	4610      	mov	r0, r2
 800893c:	4662      	mov	r2, ip
 800893e:	468c      	mov	ip, r1
 8008940:	4619      	mov	r1, r3
 8008942:	4663      	mov	r3, ip
 8008944:	e000      	b.n	8008948 <__aeabi_cdcmpeq>
 8008946:	bf00      	nop

08008948 <__aeabi_cdcmpeq>:
 8008948:	b501      	push	{r0, lr}
 800894a:	f7ff ffb7 	bl	80088bc <__cmpdf2>
 800894e:	2800      	cmp	r0, #0
 8008950:	bf48      	it	mi
 8008952:	f110 0f00 	cmnmi.w	r0, #0
 8008956:	bd01      	pop	{r0, pc}

08008958 <__aeabi_dcmpeq>:
 8008958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800895c:	f7ff fff4 	bl	8008948 <__aeabi_cdcmpeq>
 8008960:	bf0c      	ite	eq
 8008962:	2001      	moveq	r0, #1
 8008964:	2000      	movne	r0, #0
 8008966:	f85d fb08 	ldr.w	pc, [sp], #8
 800896a:	bf00      	nop

0800896c <__aeabi_dcmplt>:
 800896c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008970:	f7ff ffea 	bl	8008948 <__aeabi_cdcmpeq>
 8008974:	bf34      	ite	cc
 8008976:	2001      	movcc	r0, #1
 8008978:	2000      	movcs	r0, #0
 800897a:	f85d fb08 	ldr.w	pc, [sp], #8
 800897e:	bf00      	nop

08008980 <__aeabi_dcmple>:
 8008980:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008984:	f7ff ffe0 	bl	8008948 <__aeabi_cdcmpeq>
 8008988:	bf94      	ite	ls
 800898a:	2001      	movls	r0, #1
 800898c:	2000      	movhi	r0, #0
 800898e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008992:	bf00      	nop

08008994 <__aeabi_dcmpge>:
 8008994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008998:	f7ff ffce 	bl	8008938 <__aeabi_cdrcmple>
 800899c:	bf94      	ite	ls
 800899e:	2001      	movls	r0, #1
 80089a0:	2000      	movhi	r0, #0
 80089a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80089a6:	bf00      	nop

080089a8 <__aeabi_dcmpgt>:
 80089a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089ac:	f7ff ffc4 	bl	8008938 <__aeabi_cdrcmple>
 80089b0:	bf34      	ite	cc
 80089b2:	2001      	movcc	r0, #1
 80089b4:	2000      	movcs	r0, #0
 80089b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80089ba:	bf00      	nop

080089bc <__aeabi_dcmpun>:
 80089bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089c4:	d102      	bne.n	80089cc <__aeabi_dcmpun+0x10>
 80089c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089ca:	d10a      	bne.n	80089e2 <__aeabi_dcmpun+0x26>
 80089cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089d4:	d102      	bne.n	80089dc <__aeabi_dcmpun+0x20>
 80089d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089da:	d102      	bne.n	80089e2 <__aeabi_dcmpun+0x26>
 80089dc:	f04f 0000 	mov.w	r0, #0
 80089e0:	4770      	bx	lr
 80089e2:	f04f 0001 	mov.w	r0, #1
 80089e6:	4770      	bx	lr

080089e8 <__aeabi_d2iz>:
 80089e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80089f0:	d215      	bcs.n	8008a1e <__aeabi_d2iz+0x36>
 80089f2:	d511      	bpl.n	8008a18 <__aeabi_d2iz+0x30>
 80089f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80089f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089fc:	d912      	bls.n	8008a24 <__aeabi_d2iz+0x3c>
 80089fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a0a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008a0e:	fa23 f002 	lsr.w	r0, r3, r2
 8008a12:	bf18      	it	ne
 8008a14:	4240      	negne	r0, r0
 8008a16:	4770      	bx	lr
 8008a18:	f04f 0000 	mov.w	r0, #0
 8008a1c:	4770      	bx	lr
 8008a1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a22:	d105      	bne.n	8008a30 <__aeabi_d2iz+0x48>
 8008a24:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008a28:	bf08      	it	eq
 8008a2a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008a2e:	4770      	bx	lr
 8008a30:	f04f 0000 	mov.w	r0, #0
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop

08008a38 <__aeabi_d2uiz>:
 8008a38:	004a      	lsls	r2, r1, #1
 8008a3a:	d211      	bcs.n	8008a60 <__aeabi_d2uiz+0x28>
 8008a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008a40:	d211      	bcs.n	8008a66 <__aeabi_d2uiz+0x2e>
 8008a42:	d50d      	bpl.n	8008a60 <__aeabi_d2uiz+0x28>
 8008a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a4c:	d40e      	bmi.n	8008a6c <__aeabi_d2uiz+0x34>
 8008a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a5e:	4770      	bx	lr
 8008a60:	f04f 0000 	mov.w	r0, #0
 8008a64:	4770      	bx	lr
 8008a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a6a:	d102      	bne.n	8008a72 <__aeabi_d2uiz+0x3a>
 8008a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a70:	4770      	bx	lr
 8008a72:	f04f 0000 	mov.w	r0, #0
 8008a76:	4770      	bx	lr

08008a78 <__aeabi_d2f>:
 8008a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8008a80:	bf24      	itt	cs
 8008a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8008a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8008a8a:	d90d      	bls.n	8008aa8 <__aeabi_d2f+0x30>
 8008a8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8008a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8008a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008aa0:	bf08      	it	eq
 8008aa2:	f020 0001 	biceq.w	r0, r0, #1
 8008aa6:	4770      	bx	lr
 8008aa8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8008aac:	d121      	bne.n	8008af2 <__aeabi_d2f+0x7a>
 8008aae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8008ab2:	bfbc      	itt	lt
 8008ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8008ab8:	4770      	bxlt	lr
 8008aba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008ac2:	f1c2 0218 	rsb	r2, r2, #24
 8008ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8008ace:	fa20 f002 	lsr.w	r0, r0, r2
 8008ad2:	bf18      	it	ne
 8008ad4:	f040 0001 	orrne.w	r0, r0, #1
 8008ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ae4:	ea40 000c 	orr.w	r0, r0, ip
 8008ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8008aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008af0:	e7cc      	b.n	8008a8c <__aeabi_d2f+0x14>
 8008af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008af6:	d107      	bne.n	8008b08 <__aeabi_d2f+0x90>
 8008af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008afc:	bf1e      	ittt	ne
 8008afe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8008b02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8008b06:	4770      	bxne	lr
 8008b08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8008b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8008b10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop

08008b18 <__aeabi_uldivmod>:
 8008b18:	b953      	cbnz	r3, 8008b30 <__aeabi_uldivmod+0x18>
 8008b1a:	b94a      	cbnz	r2, 8008b30 <__aeabi_uldivmod+0x18>
 8008b1c:	2900      	cmp	r1, #0
 8008b1e:	bf08      	it	eq
 8008b20:	2800      	cmpeq	r0, #0
 8008b22:	bf1c      	itt	ne
 8008b24:	f04f 31ff 	movne.w	r1, #4294967295
 8008b28:	f04f 30ff 	movne.w	r0, #4294967295
 8008b2c:	f000 b9a0 	b.w	8008e70 <__aeabi_idiv0>
 8008b30:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b38:	f000 f83c 	bl	8008bb4 <__udivmoddi4>
 8008b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b44:	b004      	add	sp, #16
 8008b46:	4770      	bx	lr

08008b48 <__aeabi_d2lz>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	4604      	mov	r4, r0
 8008b50:	460d      	mov	r5, r1
 8008b52:	f7ff ff0b 	bl	800896c <__aeabi_dcmplt>
 8008b56:	b928      	cbnz	r0, 8008b64 <__aeabi_d2lz+0x1c>
 8008b58:	4620      	mov	r0, r4
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b60:	f000 b80a 	b.w	8008b78 <__aeabi_d2ulz>
 8008b64:	4620      	mov	r0, r4
 8008b66:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8008b6a:	f000 f805 	bl	8008b78 <__aeabi_d2ulz>
 8008b6e:	4240      	negs	r0, r0
 8008b70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008b74:	bd38      	pop	{r3, r4, r5, pc}
 8008b76:	bf00      	nop

08008b78 <__aeabi_d2ulz>:
 8008b78:	b5d0      	push	{r4, r6, r7, lr}
 8008b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8008bac <__aeabi_d2ulz+0x34>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	4606      	mov	r6, r0
 8008b80:	460f      	mov	r7, r1
 8008b82:	f7ff fc81 	bl	8008488 <__aeabi_dmul>
 8008b86:	f7ff ff57 	bl	8008a38 <__aeabi_d2uiz>
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	f7ff fc02 	bl	8008394 <__aeabi_ui2d>
 8008b90:	4b07      	ldr	r3, [pc, #28]	@ (8008bb0 <__aeabi_d2ulz+0x38>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	f7ff fc78 	bl	8008488 <__aeabi_dmul>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	f7ff faba 	bl	8008118 <__aeabi_dsub>
 8008ba4:	f7ff ff48 	bl	8008a38 <__aeabi_d2uiz>
 8008ba8:	4621      	mov	r1, r4
 8008baa:	bdd0      	pop	{r4, r6, r7, pc}
 8008bac:	3df00000 	.word	0x3df00000
 8008bb0:	41f00000 	.word	0x41f00000

08008bb4 <__udivmoddi4>:
 8008bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb8:	9d08      	ldr	r5, [sp, #32]
 8008bba:	460c      	mov	r4, r1
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d14e      	bne.n	8008c5e <__udivmoddi4+0xaa>
 8008bc0:	4694      	mov	ip, r2
 8008bc2:	458c      	cmp	ip, r1
 8008bc4:	4686      	mov	lr, r0
 8008bc6:	fab2 f282 	clz	r2, r2
 8008bca:	d962      	bls.n	8008c92 <__udivmoddi4+0xde>
 8008bcc:	b14a      	cbz	r2, 8008be2 <__udivmoddi4+0x2e>
 8008bce:	f1c2 0320 	rsb	r3, r2, #32
 8008bd2:	4091      	lsls	r1, r2
 8008bd4:	fa20 f303 	lsr.w	r3, r0, r3
 8008bd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8008bdc:	4319      	orrs	r1, r3
 8008bde:	fa00 fe02 	lsl.w	lr, r0, r2
 8008be2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008be6:	fa1f f68c 	uxth.w	r6, ip
 8008bea:	fbb1 f4f7 	udiv	r4, r1, r7
 8008bee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8008bf2:	fb07 1114 	mls	r1, r7, r4, r1
 8008bf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bfa:	fb04 f106 	mul.w	r1, r4, r6
 8008bfe:	4299      	cmp	r1, r3
 8008c00:	d90a      	bls.n	8008c18 <__udivmoddi4+0x64>
 8008c02:	eb1c 0303 	adds.w	r3, ip, r3
 8008c06:	f104 30ff 	add.w	r0, r4, #4294967295
 8008c0a:	f080 8112 	bcs.w	8008e32 <__udivmoddi4+0x27e>
 8008c0e:	4299      	cmp	r1, r3
 8008c10:	f240 810f 	bls.w	8008e32 <__udivmoddi4+0x27e>
 8008c14:	3c02      	subs	r4, #2
 8008c16:	4463      	add	r3, ip
 8008c18:	1a59      	subs	r1, r3, r1
 8008c1a:	fa1f f38e 	uxth.w	r3, lr
 8008c1e:	fbb1 f0f7 	udiv	r0, r1, r7
 8008c22:	fb07 1110 	mls	r1, r7, r0, r1
 8008c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c2a:	fb00 f606 	mul.w	r6, r0, r6
 8008c2e:	429e      	cmp	r6, r3
 8008c30:	d90a      	bls.n	8008c48 <__udivmoddi4+0x94>
 8008c32:	eb1c 0303 	adds.w	r3, ip, r3
 8008c36:	f100 31ff 	add.w	r1, r0, #4294967295
 8008c3a:	f080 80fc 	bcs.w	8008e36 <__udivmoddi4+0x282>
 8008c3e:	429e      	cmp	r6, r3
 8008c40:	f240 80f9 	bls.w	8008e36 <__udivmoddi4+0x282>
 8008c44:	4463      	add	r3, ip
 8008c46:	3802      	subs	r0, #2
 8008c48:	1b9b      	subs	r3, r3, r6
 8008c4a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8008c4e:	2100      	movs	r1, #0
 8008c50:	b11d      	cbz	r5, 8008c5a <__udivmoddi4+0xa6>
 8008c52:	40d3      	lsrs	r3, r2
 8008c54:	2200      	movs	r2, #0
 8008c56:	e9c5 3200 	strd	r3, r2, [r5]
 8008c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c5e:	428b      	cmp	r3, r1
 8008c60:	d905      	bls.n	8008c6e <__udivmoddi4+0xba>
 8008c62:	b10d      	cbz	r5, 8008c68 <__udivmoddi4+0xb4>
 8008c64:	e9c5 0100 	strd	r0, r1, [r5]
 8008c68:	2100      	movs	r1, #0
 8008c6a:	4608      	mov	r0, r1
 8008c6c:	e7f5      	b.n	8008c5a <__udivmoddi4+0xa6>
 8008c6e:	fab3 f183 	clz	r1, r3
 8008c72:	2900      	cmp	r1, #0
 8008c74:	d146      	bne.n	8008d04 <__udivmoddi4+0x150>
 8008c76:	42a3      	cmp	r3, r4
 8008c78:	d302      	bcc.n	8008c80 <__udivmoddi4+0xcc>
 8008c7a:	4290      	cmp	r0, r2
 8008c7c:	f0c0 80f0 	bcc.w	8008e60 <__udivmoddi4+0x2ac>
 8008c80:	1a86      	subs	r6, r0, r2
 8008c82:	eb64 0303 	sbc.w	r3, r4, r3
 8008c86:	2001      	movs	r0, #1
 8008c88:	2d00      	cmp	r5, #0
 8008c8a:	d0e6      	beq.n	8008c5a <__udivmoddi4+0xa6>
 8008c8c:	e9c5 6300 	strd	r6, r3, [r5]
 8008c90:	e7e3      	b.n	8008c5a <__udivmoddi4+0xa6>
 8008c92:	2a00      	cmp	r2, #0
 8008c94:	f040 8090 	bne.w	8008db8 <__udivmoddi4+0x204>
 8008c98:	eba1 040c 	sub.w	r4, r1, ip
 8008c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008ca0:	fa1f f78c 	uxth.w	r7, ip
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	fbb4 f6f8 	udiv	r6, r4, r8
 8008caa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8008cae:	fb08 4416 	mls	r4, r8, r6, r4
 8008cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008cb6:	fb07 f006 	mul.w	r0, r7, r6
 8008cba:	4298      	cmp	r0, r3
 8008cbc:	d908      	bls.n	8008cd0 <__udivmoddi4+0x11c>
 8008cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8008cc2:	f106 34ff 	add.w	r4, r6, #4294967295
 8008cc6:	d202      	bcs.n	8008cce <__udivmoddi4+0x11a>
 8008cc8:	4298      	cmp	r0, r3
 8008cca:	f200 80cd 	bhi.w	8008e68 <__udivmoddi4+0x2b4>
 8008cce:	4626      	mov	r6, r4
 8008cd0:	1a1c      	subs	r4, r3, r0
 8008cd2:	fa1f f38e 	uxth.w	r3, lr
 8008cd6:	fbb4 f0f8 	udiv	r0, r4, r8
 8008cda:	fb08 4410 	mls	r4, r8, r0, r4
 8008cde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008ce2:	fb00 f707 	mul.w	r7, r0, r7
 8008ce6:	429f      	cmp	r7, r3
 8008ce8:	d908      	bls.n	8008cfc <__udivmoddi4+0x148>
 8008cea:	eb1c 0303 	adds.w	r3, ip, r3
 8008cee:	f100 34ff 	add.w	r4, r0, #4294967295
 8008cf2:	d202      	bcs.n	8008cfa <__udivmoddi4+0x146>
 8008cf4:	429f      	cmp	r7, r3
 8008cf6:	f200 80b0 	bhi.w	8008e5a <__udivmoddi4+0x2a6>
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	1bdb      	subs	r3, r3, r7
 8008cfe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008d02:	e7a5      	b.n	8008c50 <__udivmoddi4+0x9c>
 8008d04:	f1c1 0620 	rsb	r6, r1, #32
 8008d08:	408b      	lsls	r3, r1
 8008d0a:	fa22 f706 	lsr.w	r7, r2, r6
 8008d0e:	431f      	orrs	r7, r3
 8008d10:	fa20 fc06 	lsr.w	ip, r0, r6
 8008d14:	fa04 f301 	lsl.w	r3, r4, r1
 8008d18:	ea43 030c 	orr.w	r3, r3, ip
 8008d1c:	40f4      	lsrs	r4, r6
 8008d1e:	fa00 f801 	lsl.w	r8, r0, r1
 8008d22:	0c38      	lsrs	r0, r7, #16
 8008d24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8008d28:	fbb4 fef0 	udiv	lr, r4, r0
 8008d2c:	fa1f fc87 	uxth.w	ip, r7
 8008d30:	fb00 441e 	mls	r4, r0, lr, r4
 8008d34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008d38:	fb0e f90c 	mul.w	r9, lr, ip
 8008d3c:	45a1      	cmp	r9, r4
 8008d3e:	fa02 f201 	lsl.w	r2, r2, r1
 8008d42:	d90a      	bls.n	8008d5a <__udivmoddi4+0x1a6>
 8008d44:	193c      	adds	r4, r7, r4
 8008d46:	f10e 3aff 	add.w	sl, lr, #4294967295
 8008d4a:	f080 8084 	bcs.w	8008e56 <__udivmoddi4+0x2a2>
 8008d4e:	45a1      	cmp	r9, r4
 8008d50:	f240 8081 	bls.w	8008e56 <__udivmoddi4+0x2a2>
 8008d54:	f1ae 0e02 	sub.w	lr, lr, #2
 8008d58:	443c      	add	r4, r7
 8008d5a:	eba4 0409 	sub.w	r4, r4, r9
 8008d5e:	fa1f f983 	uxth.w	r9, r3
 8008d62:	fbb4 f3f0 	udiv	r3, r4, r0
 8008d66:	fb00 4413 	mls	r4, r0, r3, r4
 8008d6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008d6e:	fb03 fc0c 	mul.w	ip, r3, ip
 8008d72:	45a4      	cmp	ip, r4
 8008d74:	d907      	bls.n	8008d86 <__udivmoddi4+0x1d2>
 8008d76:	193c      	adds	r4, r7, r4
 8008d78:	f103 30ff 	add.w	r0, r3, #4294967295
 8008d7c:	d267      	bcs.n	8008e4e <__udivmoddi4+0x29a>
 8008d7e:	45a4      	cmp	ip, r4
 8008d80:	d965      	bls.n	8008e4e <__udivmoddi4+0x29a>
 8008d82:	3b02      	subs	r3, #2
 8008d84:	443c      	add	r4, r7
 8008d86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8008d8a:	fba0 9302 	umull	r9, r3, r0, r2
 8008d8e:	eba4 040c 	sub.w	r4, r4, ip
 8008d92:	429c      	cmp	r4, r3
 8008d94:	46ce      	mov	lr, r9
 8008d96:	469c      	mov	ip, r3
 8008d98:	d351      	bcc.n	8008e3e <__udivmoddi4+0x28a>
 8008d9a:	d04e      	beq.n	8008e3a <__udivmoddi4+0x286>
 8008d9c:	b155      	cbz	r5, 8008db4 <__udivmoddi4+0x200>
 8008d9e:	ebb8 030e 	subs.w	r3, r8, lr
 8008da2:	eb64 040c 	sbc.w	r4, r4, ip
 8008da6:	fa04 f606 	lsl.w	r6, r4, r6
 8008daa:	40cb      	lsrs	r3, r1
 8008dac:	431e      	orrs	r6, r3
 8008dae:	40cc      	lsrs	r4, r1
 8008db0:	e9c5 6400 	strd	r6, r4, [r5]
 8008db4:	2100      	movs	r1, #0
 8008db6:	e750      	b.n	8008c5a <__udivmoddi4+0xa6>
 8008db8:	f1c2 0320 	rsb	r3, r2, #32
 8008dbc:	fa20 f103 	lsr.w	r1, r0, r3
 8008dc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8008dc4:	fa24 f303 	lsr.w	r3, r4, r3
 8008dc8:	4094      	lsls	r4, r2
 8008dca:	430c      	orrs	r4, r1
 8008dcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008dd0:	fa00 fe02 	lsl.w	lr, r0, r2
 8008dd4:	fa1f f78c 	uxth.w	r7, ip
 8008dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ddc:	fb08 3110 	mls	r1, r8, r0, r3
 8008de0:	0c23      	lsrs	r3, r4, #16
 8008de2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008de6:	fb00 f107 	mul.w	r1, r0, r7
 8008dea:	4299      	cmp	r1, r3
 8008dec:	d908      	bls.n	8008e00 <__udivmoddi4+0x24c>
 8008dee:	eb1c 0303 	adds.w	r3, ip, r3
 8008df2:	f100 36ff 	add.w	r6, r0, #4294967295
 8008df6:	d22c      	bcs.n	8008e52 <__udivmoddi4+0x29e>
 8008df8:	4299      	cmp	r1, r3
 8008dfa:	d92a      	bls.n	8008e52 <__udivmoddi4+0x29e>
 8008dfc:	3802      	subs	r0, #2
 8008dfe:	4463      	add	r3, ip
 8008e00:	1a5b      	subs	r3, r3, r1
 8008e02:	b2a4      	uxth	r4, r4
 8008e04:	fbb3 f1f8 	udiv	r1, r3, r8
 8008e08:	fb08 3311 	mls	r3, r8, r1, r3
 8008e0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008e10:	fb01 f307 	mul.w	r3, r1, r7
 8008e14:	42a3      	cmp	r3, r4
 8008e16:	d908      	bls.n	8008e2a <__udivmoddi4+0x276>
 8008e18:	eb1c 0404 	adds.w	r4, ip, r4
 8008e1c:	f101 36ff 	add.w	r6, r1, #4294967295
 8008e20:	d213      	bcs.n	8008e4a <__udivmoddi4+0x296>
 8008e22:	42a3      	cmp	r3, r4
 8008e24:	d911      	bls.n	8008e4a <__udivmoddi4+0x296>
 8008e26:	3902      	subs	r1, #2
 8008e28:	4464      	add	r4, ip
 8008e2a:	1ae4      	subs	r4, r4, r3
 8008e2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e30:	e739      	b.n	8008ca6 <__udivmoddi4+0xf2>
 8008e32:	4604      	mov	r4, r0
 8008e34:	e6f0      	b.n	8008c18 <__udivmoddi4+0x64>
 8008e36:	4608      	mov	r0, r1
 8008e38:	e706      	b.n	8008c48 <__udivmoddi4+0x94>
 8008e3a:	45c8      	cmp	r8, r9
 8008e3c:	d2ae      	bcs.n	8008d9c <__udivmoddi4+0x1e8>
 8008e3e:	ebb9 0e02 	subs.w	lr, r9, r2
 8008e42:	eb63 0c07 	sbc.w	ip, r3, r7
 8008e46:	3801      	subs	r0, #1
 8008e48:	e7a8      	b.n	8008d9c <__udivmoddi4+0x1e8>
 8008e4a:	4631      	mov	r1, r6
 8008e4c:	e7ed      	b.n	8008e2a <__udivmoddi4+0x276>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	e799      	b.n	8008d86 <__udivmoddi4+0x1d2>
 8008e52:	4630      	mov	r0, r6
 8008e54:	e7d4      	b.n	8008e00 <__udivmoddi4+0x24c>
 8008e56:	46d6      	mov	lr, sl
 8008e58:	e77f      	b.n	8008d5a <__udivmoddi4+0x1a6>
 8008e5a:	4463      	add	r3, ip
 8008e5c:	3802      	subs	r0, #2
 8008e5e:	e74d      	b.n	8008cfc <__udivmoddi4+0x148>
 8008e60:	4606      	mov	r6, r0
 8008e62:	4623      	mov	r3, r4
 8008e64:	4608      	mov	r0, r1
 8008e66:	e70f      	b.n	8008c88 <__udivmoddi4+0xd4>
 8008e68:	3e02      	subs	r6, #2
 8008e6a:	4463      	add	r3, ip
 8008e6c:	e730      	b.n	8008cd0 <__udivmoddi4+0x11c>
 8008e6e:	bf00      	nop

08008e70 <__aeabi_idiv0>:
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop

08008e74 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8008e74:	4770      	bx	lr
	...

08008e78 <HAL_DeInit>:
{
 8008e78:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 8008e7a:	4b09      	ldr	r3, [pc, #36]	@ (8008ea0 <HAL_DeInit+0x28>)
 8008e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e80:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8008e82:	2400      	movs	r4, #0
 8008e84:	621c      	str	r4, [r3, #32]
  __HAL_RCC_APB2_FORCE_RESET();
 8008e86:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8008e88:	625c      	str	r4, [r3, #36]	@ 0x24
  __HAL_RCC_AHB1_FORCE_RESET();
 8008e8a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8008e8c:	611c      	str	r4, [r3, #16]
  __HAL_RCC_AHB2_FORCE_RESET();
 8008e8e:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8008e90:	615c      	str	r4, [r3, #20]
  __HAL_RCC_AHB3_FORCE_RESET();
 8008e92:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8008e94:	619c      	str	r4, [r3, #24]
  HAL_MspDeInit();
 8008e96:	f7ff ffed 	bl	8008e74 <HAL_MspDeInit>
}
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	bd10      	pop	{r4, pc}
 8008e9e:	bf00      	nop
 8008ea0:	40023800 	.word	0x40023800

08008ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ea4:	b510      	push	{r4, lr}
 8008ea6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8008ee4 <HAL_InitTick+0x40>)
 8008eaa:	781a      	ldrb	r2, [r3, #0]
 8008eac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8008ee8 <HAL_InitTick+0x44>)
 8008eb6:	6810      	ldr	r0, [r2, #0]
 8008eb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8008ebc:	f000 f8be 	bl	800903c <HAL_SYSTICK_Config>
 8008ec0:	b968      	cbnz	r0, 8008ede <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ec2:	2c0f      	cmp	r4, #15
 8008ec4:	d901      	bls.n	8008eca <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8008ec6:	2001      	movs	r0, #1
 8008ec8:	e00a      	b.n	8008ee0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008eca:	2200      	movs	r2, #0
 8008ecc:	4621      	mov	r1, r4
 8008ece:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed2:	f000 f891 	bl	8008ff8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008ed6:	4b05      	ldr	r3, [pc, #20]	@ (8008eec <HAL_InitTick+0x48>)
 8008ed8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008eda:	2000      	movs	r0, #0
 8008edc:	e000      	b.n	8008ee0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8008ede:	2001      	movs	r0, #1
}
 8008ee0:	bd10      	pop	{r4, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20000000 	.word	0x20000000
 8008ee8:	200001a4 	.word	0x200001a4
 8008eec:	20000004 	.word	0x20000004

08008ef0 <HAL_Init>:
{
 8008ef0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8008f20 <HAL_Init+0x30>)
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008efa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008f02:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f0a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008f0c:	2003      	movs	r0, #3
 8008f0e:	f000 f861 	bl	8008fd4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8008f12:	2000      	movs	r0, #0
 8008f14:	f7ff ffc6 	bl	8008ea4 <HAL_InitTick>
  HAL_MspInit();
 8008f18:	f003 ff0a 	bl	800cd30 <HAL_MspInit>
}
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	bd08      	pop	{r3, pc}
 8008f20:	40023c00 	.word	0x40023c00

08008f24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008f24:	4a03      	ldr	r2, [pc, #12]	@ (8008f34 <HAL_IncTick+0x10>)
 8008f26:	6811      	ldr	r1, [r2, #0]
 8008f28:	4b03      	ldr	r3, [pc, #12]	@ (8008f38 <HAL_IncTick+0x14>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	440b      	add	r3, r1
 8008f2e:	6013      	str	r3, [r2, #0]
}
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	20000698 	.word	0x20000698
 8008f38:	20000000 	.word	0x20000000

08008f3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008f3c:	4b01      	ldr	r3, [pc, #4]	@ (8008f44 <HAL_GetTick+0x8>)
 8008f3e:	6818      	ldr	r0, [r3, #0]
}
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	20000698 	.word	0x20000698

08008f48 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	db0c      	blt.n	8008f66 <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f4c:	f000 021f 	and.w	r2, r0, #31
 8008f50:	0940      	lsrs	r0, r0, #5
 8008f52:	2301      	movs	r3, #1
 8008f54:	4093      	lsls	r3, r2
 8008f56:	3020      	adds	r0, #32
 8008f58:	4a03      	ldr	r2, [pc, #12]	@ (8008f68 <__NVIC_DisableIRQ+0x20>)
 8008f5a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008f5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008f62:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8008f66:	4770      	bx	lr
 8008f68:	e000e100 	.word	0xe000e100

08008f6c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	db08      	blt.n	8008f82 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f70:	0109      	lsls	r1, r1, #4
 8008f72:	b2c9      	uxtb	r1, r1
 8008f74:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8008f78:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8008f7c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8008f80:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f82:	f000 000f 	and.w	r0, r0, #15
 8008f86:	0109      	lsls	r1, r1, #4
 8008f88:	b2c9      	uxtb	r1, r1
 8008f8a:	4b01      	ldr	r3, [pc, #4]	@ (8008f90 <__NVIC_SetPriority+0x24>)
 8008f8c:	5419      	strb	r1, [r3, r0]
  }
}
 8008f8e:	4770      	bx	lr
 8008f90:	e000ed14 	.word	0xe000ed14

08008f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008f94:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008f96:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008f9a:	f1c0 0c07 	rsb	ip, r0, #7
 8008f9e:	f1bc 0f04 	cmp.w	ip, #4
 8008fa2:	bf28      	it	cs
 8008fa4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008fa8:	1d03      	adds	r3, r0, #4
 8008faa:	2b06      	cmp	r3, #6
 8008fac:	d90f      	bls.n	8008fce <NVIC_EncodePriority+0x3a>
 8008fae:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008fb0:	f04f 3eff 	mov.w	lr, #4294967295
 8008fb4:	fa0e f00c 	lsl.w	r0, lr, ip
 8008fb8:	ea21 0100 	bic.w	r1, r1, r0
 8008fbc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008fbe:	fa0e fe03 	lsl.w	lr, lr, r3
 8008fc2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8008fc6:	ea41 0002 	orr.w	r0, r1, r2
 8008fca:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008fce:	2300      	movs	r3, #0
 8008fd0:	e7ee      	b.n	8008fb0 <NVIC_EncodePriority+0x1c>
	...

08008fd4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008fd4:	4a07      	ldr	r2, [pc, #28]	@ (8008ff4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008fd6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008fd8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008fdc:	041b      	lsls	r3, r3, #16
 8008fde:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008fe0:	0200      	lsls	r0, r0, #8
 8008fe2:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008fe6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8008fe8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8008ff0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008ff2:	4770      	bx	lr
 8008ff4:	e000ed00 	.word	0xe000ed00

08008ff8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ffc:	4b05      	ldr	r3, [pc, #20]	@ (8009014 <HAL_NVIC_SetPriority+0x1c>)
 8008ffe:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009000:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8009004:	f7ff ffc6 	bl	8008f94 <NVIC_EncodePriority>
 8009008:	4601      	mov	r1, r0
 800900a:	4620      	mov	r0, r4
 800900c:	f7ff ffae 	bl	8008f6c <__NVIC_SetPriority>
}
 8009010:	bd10      	pop	{r4, pc}
 8009012:	bf00      	nop
 8009014:	e000ed00 	.word	0xe000ed00

08009018 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8009018:	2800      	cmp	r0, #0
 800901a:	db07      	blt.n	800902c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800901c:	f000 021f 	and.w	r2, r0, #31
 8009020:	0940      	lsrs	r0, r0, #5
 8009022:	2301      	movs	r3, #1
 8009024:	4093      	lsls	r3, r2
 8009026:	4a02      	ldr	r2, [pc, #8]	@ (8009030 <HAL_NVIC_EnableIRQ+0x18>)
 8009028:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	e000e100 	.word	0xe000e100

08009034 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009034:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009036:	f7ff ff87 	bl	8008f48 <__NVIC_DisableIRQ>
}
 800903a:	bd08      	pop	{r3, pc}

0800903c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800903c:	3801      	subs	r0, #1
 800903e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8009042:	d20b      	bcs.n	800905c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009044:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009048:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800904a:	4a05      	ldr	r2, [pc, #20]	@ (8009060 <HAL_SYSTICK_Config+0x24>)
 800904c:	21f0      	movs	r1, #240	@ 0xf0
 800904e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009052:	2000      	movs	r0, #0
 8009054:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009056:	2207      	movs	r2, #7
 8009058:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800905a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800905c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800905e:	4770      	bx	lr
 8009060:	e000ed00 	.word	0xe000ed00

08009064 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009064:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009066:	490a      	ldr	r1, [pc, #40]	@ (8009090 <FLASH_Program_DoubleWord+0x2c>)
 8009068:	690c      	ldr	r4, [r1, #16]
 800906a:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
 800906e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8009070:	690c      	ldr	r4, [r1, #16]
 8009072:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
 8009076:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009078:	690c      	ldr	r4, [r1, #16]
 800907a:	f044 0401 	orr.w	r4, r4, #1
 800907e:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8009080:	6002      	str	r2, [r0, #0]
 8009082:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8009086:	6043      	str	r3, [r0, #4]
}
 8009088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	40023c00 	.word	0x40023c00

08009094 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009094:	4b07      	ldr	r3, [pc, #28]	@ (80090b4 <FLASH_Program_Word+0x20>)
 8009096:	691a      	ldr	r2, [r3, #16]
 8009098:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800909c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800909e:	691a      	ldr	r2, [r3, #16]
 80090a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090a4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80090a6:	691a      	ldr	r2, [r3, #16]
 80090a8:	f042 0201 	orr.w	r2, r2, #1
 80090ac:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80090ae:	6001      	str	r1, [r0, #0]
}
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	40023c00 	.word	0x40023c00

080090b8 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80090b8:	4b07      	ldr	r3, [pc, #28]	@ (80090d8 <FLASH_Program_HalfWord+0x20>)
 80090ba:	691a      	ldr	r2, [r3, #16]
 80090bc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80090c0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80090c2:	691a      	ldr	r2, [r3, #16]
 80090c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090c8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80090ca:	691a      	ldr	r2, [r3, #16]
 80090cc:	f042 0201 	orr.w	r2, r2, #1
 80090d0:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80090d2:	8001      	strh	r1, [r0, #0]
}
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	40023c00 	.word	0x40023c00

080090dc <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80090dc:	4b06      	ldr	r3, [pc, #24]	@ (80090f8 <FLASH_Program_Byte+0x1c>)
 80090de:	691a      	ldr	r2, [r3, #16]
 80090e0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80090e4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80090e6:	691a      	ldr	r2, [r3, #16]
 80090e8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80090ea:	691a      	ldr	r2, [r3, #16]
 80090ec:	f042 0201 	orr.w	r2, r2, #1
 80090f0:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 80090f2:	7001      	strb	r1, [r0, #0]
}
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	40023c00 	.word	0x40023c00

080090fc <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80090fc:	4b20      	ldr	r3, [pc, #128]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f013 0f10 	tst.w	r3, #16
 8009104:	d007      	beq.n	8009116 <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009106:	4a1f      	ldr	r2, [pc, #124]	@ (8009184 <FLASH_SetErrorCode+0x88>)
 8009108:	69d3      	ldr	r3, [r2, #28]
 800910a:	f043 0310 	orr.w	r3, r3, #16
 800910e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8009110:	4b1b      	ldr	r3, [pc, #108]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 8009112:	2210      	movs	r2, #16
 8009114:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8009116:	4b1a      	ldr	r3, [pc, #104]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	f013 0f20 	tst.w	r3, #32
 800911e:	d007      	beq.n	8009130 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8009120:	4a18      	ldr	r2, [pc, #96]	@ (8009184 <FLASH_SetErrorCode+0x88>)
 8009122:	69d3      	ldr	r3, [r2, #28]
 8009124:	f043 0308 	orr.w	r3, r3, #8
 8009128:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800912a:	4b15      	ldr	r3, [pc, #84]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 800912c:	2220      	movs	r2, #32
 800912e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009130:	4b13      	ldr	r3, [pc, #76]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009138:	d007      	beq.n	800914a <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800913a:	4a12      	ldr	r2, [pc, #72]	@ (8009184 <FLASH_SetErrorCode+0x88>)
 800913c:	69d3      	ldr	r3, [r2, #28]
 800913e:	f043 0304 	orr.w	r3, r3, #4
 8009142:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8009144:	4b0e      	ldr	r3, [pc, #56]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 8009146:	2240      	movs	r2, #64	@ 0x40
 8009148:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800914a:	4b0d      	ldr	r3, [pc, #52]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009152:	d007      	beq.n	8009164 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8009154:	4a0b      	ldr	r2, [pc, #44]	@ (8009184 <FLASH_SetErrorCode+0x88>)
 8009156:	69d3      	ldr	r3, [r2, #28]
 8009158:	f043 0302 	orr.w	r3, r3, #2
 800915c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800915e:	4b08      	ldr	r3, [pc, #32]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 8009160:	2280      	movs	r2, #128	@ 0x80
 8009162:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8009164:	4b06      	ldr	r3, [pc, #24]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	f013 0f02 	tst.w	r3, #2
 800916c:	d007      	beq.n	800917e <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800916e:	4a05      	ldr	r2, [pc, #20]	@ (8009184 <FLASH_SetErrorCode+0x88>)
 8009170:	69d3      	ldr	r3, [r2, #28]
 8009172:	f043 0320 	orr.w	r3, r3, #32
 8009176:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009178:	4b01      	ldr	r3, [pc, #4]	@ (8009180 <FLASH_SetErrorCode+0x84>)
 800917a:	2202      	movs	r2, #2
 800917c:	60da      	str	r2, [r3, #12]
  }
}
 800917e:	4770      	bx	lr
 8009180:	40023c00 	.word	0x40023c00
 8009184:	2000069c 	.word	0x2000069c

08009188 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009188:	4b09      	ldr	r3, [pc, #36]	@ (80091b0 <HAL_FLASH_Unlock+0x28>)
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	2b00      	cmp	r3, #0
 800918e:	db01      	blt.n	8009194 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8009190:	2000      	movs	r0, #0
 8009192:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009194:	4b06      	ldr	r3, [pc, #24]	@ (80091b0 <HAL_FLASH_Unlock+0x28>)
 8009196:	4a07      	ldr	r2, [pc, #28]	@ (80091b4 <HAL_FLASH_Unlock+0x2c>)
 8009198:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800919a:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 800919e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	db01      	blt.n	80091aa <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80091a6:	2000      	movs	r0, #0
 80091a8:	4770      	bx	lr
      status = HAL_ERROR;
 80091aa:	2001      	movs	r0, #1
}
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	40023c00 	.word	0x40023c00
 80091b4:	45670123 	.word	0x45670123

080091b8 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 80091b8:	4a03      	ldr	r2, [pc, #12]	@ (80091c8 <HAL_FLASH_Lock+0x10>)
 80091ba:	6913      	ldr	r3, [r2, #16]
 80091bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091c0:	6113      	str	r3, [r2, #16]
}
 80091c2:	2000      	movs	r0, #0
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	40023c00 	.word	0x40023c00

080091cc <FLASH_WaitForLastOperation>:
{ 
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80091d0:	4b14      	ldr	r3, [pc, #80]	@ (8009224 <FLASH_WaitForLastOperation+0x58>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 80091d6:	f7ff feb1 	bl	8008f3c <HAL_GetTick>
 80091da:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80091dc:	4b12      	ldr	r3, [pc, #72]	@ (8009228 <FLASH_WaitForLastOperation+0x5c>)
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80091e4:	d00a      	beq.n	80091fc <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 80091e6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80091ea:	d0f7      	beq.n	80091dc <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80091ec:	b124      	cbz	r4, 80091f8 <FLASH_WaitForLastOperation+0x2c>
 80091ee:	f7ff fea5 	bl	8008f3c <HAL_GetTick>
 80091f2:	1b40      	subs	r0, r0, r5
 80091f4:	42a0      	cmp	r0, r4
 80091f6:	d9f1      	bls.n	80091dc <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 80091f8:	2003      	movs	r0, #3
 80091fa:	e00d      	b.n	8009218 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80091fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009228 <FLASH_WaitForLastOperation+0x5c>)
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	f013 0f01 	tst.w	r3, #1
 8009204:	d002      	beq.n	800920c <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009206:	4b08      	ldr	r3, [pc, #32]	@ (8009228 <FLASH_WaitForLastOperation+0x5c>)
 8009208:	2201      	movs	r2, #1
 800920a:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800920c:	4b06      	ldr	r3, [pc, #24]	@ (8009228 <FLASH_WaitForLastOperation+0x5c>)
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	f013 0ff2 	tst.w	r3, #242	@ 0xf2
 8009214:	d101      	bne.n	800921a <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 8009216:	2000      	movs	r0, #0
}  
 8009218:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 800921a:	f7ff ff6f 	bl	80090fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 800921e:	2001      	movs	r0, #1
 8009220:	e7fa      	b.n	8009218 <FLASH_WaitForLastOperation+0x4c>
 8009222:	bf00      	nop
 8009224:	2000069c 	.word	0x2000069c
 8009228:	40023c00 	.word	0x40023c00

0800922c <HAL_FLASH_Program>:
{
 800922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922e:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8009230:	4a1b      	ldr	r2, [pc, #108]	@ (80092a0 <HAL_FLASH_Program+0x74>)
 8009232:	7e12      	ldrb	r2, [r2, #24]
 8009234:	2a01      	cmp	r2, #1
 8009236:	d030      	beq.n	800929a <HAL_FLASH_Program+0x6e>
 8009238:	4604      	mov	r4, r0
 800923a:	460d      	mov	r5, r1
 800923c:	461f      	mov	r7, r3
 800923e:	4b18      	ldr	r3, [pc, #96]	@ (80092a0 <HAL_FLASH_Program+0x74>)
 8009240:	2201      	movs	r2, #1
 8009242:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009244:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009248:	f7ff ffc0 	bl	80091cc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800924c:	b990      	cbnz	r0, 8009274 <HAL_FLASH_Program+0x48>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800924e:	b1ac      	cbz	r4, 800927c <HAL_FLASH_Program+0x50>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009250:	2c01      	cmp	r4, #1
 8009252:	d018      	beq.n	8009286 <HAL_FLASH_Program+0x5a>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8009254:	2c02      	cmp	r4, #2
 8009256:	d01b      	beq.n	8009290 <HAL_FLASH_Program+0x64>
      FLASH_Program_DoubleWord(Address, Data);
 8009258:	4632      	mov	r2, r6
 800925a:	463b      	mov	r3, r7
 800925c:	4628      	mov	r0, r5
 800925e:	f7ff ff01 	bl	8009064 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009262:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009266:	f7ff ffb1 	bl	80091cc <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 800926a:	4a0e      	ldr	r2, [pc, #56]	@ (80092a4 <HAL_FLASH_Program+0x78>)
 800926c:	6913      	ldr	r3, [r2, #16]
 800926e:	f023 0301 	bic.w	r3, r3, #1
 8009272:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8009274:	4b0a      	ldr	r3, [pc, #40]	@ (80092a0 <HAL_FLASH_Program+0x74>)
 8009276:	2200      	movs	r2, #0
 8009278:	761a      	strb	r2, [r3, #24]
}
 800927a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800927c:	b2f1      	uxtb	r1, r6
 800927e:	4628      	mov	r0, r5
 8009280:	f7ff ff2c 	bl	80090dc <FLASH_Program_Byte>
 8009284:	e7ed      	b.n	8009262 <HAL_FLASH_Program+0x36>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8009286:	b2b1      	uxth	r1, r6
 8009288:	4628      	mov	r0, r5
 800928a:	f7ff ff15 	bl	80090b8 <FLASH_Program_HalfWord>
 800928e:	e7e8      	b.n	8009262 <HAL_FLASH_Program+0x36>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8009290:	4631      	mov	r1, r6
 8009292:	4628      	mov	r0, r5
 8009294:	f7ff fefe 	bl	8009094 <FLASH_Program_Word>
 8009298:	e7e3      	b.n	8009262 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 800929a:	2002      	movs	r0, #2
 800929c:	e7ed      	b.n	800927a <HAL_FLASH_Program+0x4e>
 800929e:	bf00      	nop
 80092a0:	2000069c 	.word	0x2000069c
 80092a4:	40023c00 	.word	0x40023c00

080092a8 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80092a8:	4b07      	ldr	r3, [pc, #28]	@ (80092c8 <FLASH_MassErase+0x20>)
 80092aa:	691a      	ldr	r2, [r3, #16]
 80092ac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80092b0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 80092b2:	691a      	ldr	r2, [r3, #16]
 80092b4:	f042 0204 	orr.w	r2, r2, #4
 80092b8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80092ba:	691a      	ldr	r2, [r3, #16]
 80092bc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80092c0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80092c4:	611a      	str	r2, [r3, #16]
}
 80092c6:	4770      	bx	lr
 80092c8:	40023c00 	.word	0x40023c00

080092cc <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80092cc:	2901      	cmp	r1, #1
 80092ce:	d01b      	beq.n	8009308 <FLASH_Erase_Sector+0x3c>
 80092d0:	2902      	cmp	r1, #2
 80092d2:	d01c      	beq.n	800930e <FLASH_Erase_Sector+0x42>
 80092d4:	b109      	cbz	r1, 80092da <FLASH_Erase_Sector+0xe>
{
 80092d6:	f44f 7140 	mov.w	r1, #768	@ 0x300
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80092da:	4b0e      	ldr	r3, [pc, #56]	@ (8009314 <FLASH_Erase_Sector+0x48>)
 80092dc:	691a      	ldr	r2, [r3, #16]
 80092de:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80092e2:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 80092e4:	691a      	ldr	r2, [r3, #16]
 80092e6:	430a      	orrs	r2, r1
 80092e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80092ea:	691a      	ldr	r2, [r3, #16]
 80092ec:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 80092f0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80092f2:	691a      	ldr	r2, [r3, #16]
 80092f4:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 80092f8:	f040 0002 	orr.w	r0, r0, #2
 80092fc:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80092fe:	691a      	ldr	r2, [r3, #16]
 8009300:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009304:	611a      	str	r2, [r3, #16]
}
 8009306:	4770      	bx	lr
{
 8009308:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800930c:	e7e5      	b.n	80092da <FLASH_Erase_Sector+0xe>
 800930e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009312:	e7e2      	b.n	80092da <FLASH_Erase_Sector+0xe>
 8009314:	40023c00 	.word	0x40023c00

08009318 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8009318:	4b16      	ldr	r3, [pc, #88]	@ (8009374 <FLASH_FlushCaches+0x5c>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8009320:	d010      	beq.n	8009344 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009322:	4b14      	ldr	r3, [pc, #80]	@ (8009374 <FLASH_FlushCaches+0x5c>)
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800932a:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800933a:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009342:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8009344:	4b0b      	ldr	r3, [pc, #44]	@ (8009374 <FLASH_FlushCaches+0x5c>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800934c:	d010      	beq.n	8009370 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800934e:	4b09      	ldr	r3, [pc, #36]	@ (8009374 <FLASH_FlushCaches+0x5c>)
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009356:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800935e:	601a      	str	r2, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009366:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800936e:	601a      	str	r2, [r3, #0]
  }
}
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	40023c00 	.word	0x40023c00

08009378 <HAL_FLASHEx_Erase>:
{
 8009378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800937a:	4b22      	ldr	r3, [pc, #136]	@ (8009404 <HAL_FLASHEx_Erase+0x8c>)
 800937c:	7e1b      	ldrb	r3, [r3, #24]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d03e      	beq.n	8009400 <HAL_FLASHEx_Erase+0x88>
 8009382:	4604      	mov	r4, r0
 8009384:	460e      	mov	r6, r1
 8009386:	4b1f      	ldr	r3, [pc, #124]	@ (8009404 <HAL_FLASHEx_Erase+0x8c>)
 8009388:	2201      	movs	r2, #1
 800938a:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800938c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009390:	f7ff ff1c 	bl	80091cc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8009394:	4607      	mov	r7, r0
 8009396:	bb70      	cbnz	r0, 80093f6 <HAL_FLASHEx_Erase+0x7e>
    *SectorError = 0xFFFFFFFFU;
 8009398:	f04f 33ff 	mov.w	r3, #4294967295
 800939c:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d016      	beq.n	80093d2 <HAL_FLASHEx_Erase+0x5a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80093a4:	68a5      	ldr	r5, [r4, #8]
 80093a6:	68e3      	ldr	r3, [r4, #12]
 80093a8:	68a2      	ldr	r2, [r4, #8]
 80093aa:	4413      	add	r3, r2
 80093ac:	42ab      	cmp	r3, r5
 80093ae:	d920      	bls.n	80093f2 <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80093b0:	7c21      	ldrb	r1, [r4, #16]
 80093b2:	4628      	mov	r0, r5
 80093b4:	f7ff ff8a 	bl	80092cc <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80093b8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80093bc:	f7ff ff06 	bl	80091cc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80093c0:	4a11      	ldr	r2, [pc, #68]	@ (8009408 <HAL_FLASHEx_Erase+0x90>)
 80093c2:	6913      	ldr	r3, [r2, #16]
 80093c4:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80093c8:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 80093ca:	4607      	mov	r7, r0
 80093cc:	b980      	cbnz	r0, 80093f0 <HAL_FLASHEx_Erase+0x78>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80093ce:	3501      	adds	r5, #1
 80093d0:	e7e9      	b.n	80093a6 <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80093d2:	6861      	ldr	r1, [r4, #4]
 80093d4:	7c20      	ldrb	r0, [r4, #16]
 80093d6:	f7ff ff67 	bl	80092a8 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80093da:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80093de:	f7ff fef5 	bl	80091cc <FLASH_WaitForLastOperation>
 80093e2:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 80093e4:	4a08      	ldr	r2, [pc, #32]	@ (8009408 <HAL_FLASHEx_Erase+0x90>)
 80093e6:	6913      	ldr	r3, [r2, #16]
 80093e8:	f023 0304 	bic.w	r3, r3, #4
 80093ec:	6113      	str	r3, [r2, #16]
 80093ee:	e000      	b.n	80093f2 <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 80093f0:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();    
 80093f2:	f7ff ff91 	bl	8009318 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80093f6:	4b03      	ldr	r3, [pc, #12]	@ (8009404 <HAL_FLASHEx_Erase+0x8c>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	761a      	strb	r2, [r3, #24]
}
 80093fc:	4638      	mov	r0, r7
 80093fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8009400:	2702      	movs	r7, #2
 8009402:	e7fb      	b.n	80093fc <HAL_FLASHEx_Erase+0x84>
 8009404:	2000069c 	.word	0x2000069c
 8009408:	40023c00 	.word	0x40023c00

0800940c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800940c:	2300      	movs	r3, #0
 800940e:	2b0f      	cmp	r3, #15
 8009410:	f200 80da 	bhi.w	80095c8 <HAL_GPIO_Init+0x1bc>
{
 8009414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009416:	b083      	sub	sp, #12
 8009418:	e03a      	b.n	8009490 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800941a:	2207      	movs	r2, #7
 800941c:	e000      	b.n	8009420 <HAL_GPIO_Init+0x14>
 800941e:	2200      	movs	r2, #0
 8009420:	40aa      	lsls	r2, r5
 8009422:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009424:	3402      	adds	r4, #2
 8009426:	4d69      	ldr	r5, [pc, #420]	@ (80095cc <HAL_GPIO_Init+0x1c0>)
 8009428:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800942c:	4a68      	ldr	r2, [pc, #416]	@ (80095d0 <HAL_GPIO_Init+0x1c4>)
 800942e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8009430:	ea6f 020c 	mvn.w	r2, ip
 8009434:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009438:	684e      	ldr	r6, [r1, #4]
 800943a:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 800943e:	d001      	beq.n	8009444 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8009440:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8009444:	4c62      	ldr	r4, [pc, #392]	@ (80095d0 <HAL_GPIO_Init+0x1c4>)
 8009446:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8009448:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800944a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800944e:	684e      	ldr	r6, [r1, #4]
 8009450:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8009454:	d001      	beq.n	800945a <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 8009456:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800945a:	4c5d      	ldr	r4, [pc, #372]	@ (80095d0 <HAL_GPIO_Init+0x1c4>)
 800945c:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800945e:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8009460:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009464:	684e      	ldr	r6, [r1, #4]
 8009466:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800946a:	d001      	beq.n	8009470 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 800946c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8009470:	4c57      	ldr	r4, [pc, #348]	@ (80095d0 <HAL_GPIO_Init+0x1c4>)
 8009472:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8009474:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8009476:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009478:	684d      	ldr	r5, [r1, #4]
 800947a:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
 800947e:	d001      	beq.n	8009484 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8009480:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8009484:	4c52      	ldr	r4, [pc, #328]	@ (80095d0 <HAL_GPIO_Init+0x1c4>)
 8009486:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009488:	3301      	adds	r3, #1
 800948a:	2b0f      	cmp	r3, #15
 800948c:	f200 809a 	bhi.w	80095c4 <HAL_GPIO_Init+0x1b8>
    ioposition = 0x01U << position;
 8009490:	2201      	movs	r2, #1
 8009492:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009494:	680c      	ldr	r4, [r1, #0]
 8009496:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 800949a:	ea32 0404 	bics.w	r4, r2, r4
 800949e:	d1f3      	bne.n	8009488 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80094a0:	684c      	ldr	r4, [r1, #4]
 80094a2:	1e65      	subs	r5, r4, #1
 80094a4:	2d01      	cmp	r5, #1
 80094a6:	d903      	bls.n	80094b0 <HAL_GPIO_Init+0xa4>
 80094a8:	2c11      	cmp	r4, #17
 80094aa:	d001      	beq.n	80094b0 <HAL_GPIO_Init+0xa4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80094ac:	2c12      	cmp	r4, #18
 80094ae:	d112      	bne.n	80094d6 <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR; 
 80094b0:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80094b2:	005e      	lsls	r6, r3, #1
 80094b4:	2403      	movs	r4, #3
 80094b6:	40b4      	lsls	r4, r6
 80094b8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80094bc:	68cc      	ldr	r4, [r1, #12]
 80094be:	40b4      	lsls	r4, r6
 80094c0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80094c2:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80094c4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80094c6:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80094ca:	684a      	ldr	r2, [r1, #4]
 80094cc:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80094d0:	409a      	lsls	r2, r3
 80094d2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80094d4:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80094d6:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80094d8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80094dc:	2203      	movs	r2, #3
 80094de:	fa02 f20e 	lsl.w	r2, r2, lr
 80094e2:	43d4      	mvns	r4, r2
 80094e4:	ea25 0502 	bic.w	r5, r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80094e8:	688a      	ldr	r2, [r1, #8]
 80094ea:	fa02 f20e 	lsl.w	r2, r2, lr
 80094ee:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 80094f0:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80094f2:	684a      	ldr	r2, [r1, #4]
 80094f4:	2a02      	cmp	r2, #2
 80094f6:	d001      	beq.n	80094fc <HAL_GPIO_Init+0xf0>
 80094f8:	2a12      	cmp	r2, #18
 80094fa:	d10f      	bne.n	800951c <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3U];
 80094fc:	08dd      	lsrs	r5, r3, #3
 80094fe:	3508      	adds	r5, #8
 8009500:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009504:	f003 0607 	and.w	r6, r3, #7
 8009508:	00b6      	lsls	r6, r6, #2
 800950a:	220f      	movs	r2, #15
 800950c:	40b2      	lsls	r2, r6
 800950e:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009512:	690a      	ldr	r2, [r1, #16]
 8009514:	40b2      	lsls	r2, r6
 8009516:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8009518:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 800951c:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800951e:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009520:	684a      	ldr	r2, [r1, #4]
 8009522:	f002 0203 	and.w	r2, r2, #3
 8009526:	fa02 f20e 	lsl.w	r2, r2, lr
 800952a:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800952c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800952e:	684a      	ldr	r2, [r1, #4]
 8009530:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 8009534:	d0a8      	beq.n	8009488 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009536:	2200      	movs	r2, #0
 8009538:	9201      	str	r2, [sp, #4]
 800953a:	4a26      	ldr	r2, [pc, #152]	@ (80095d4 <HAL_GPIO_Init+0x1c8>)
 800953c:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 800953e:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8009542:	6454      	str	r4, [r2, #68]	@ 0x44
 8009544:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009546:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800954a:	9201      	str	r2, [sp, #4]
 800954c:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800954e:	089c      	lsrs	r4, r3, #2
 8009550:	1ca5      	adds	r5, r4, #2
 8009552:	4a1e      	ldr	r2, [pc, #120]	@ (80095cc <HAL_GPIO_Init+0x1c0>)
 8009554:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009558:	f003 0503 	and.w	r5, r3, #3
 800955c:	00ad      	lsls	r5, r5, #2
 800955e:	220f      	movs	r2, #15
 8009560:	40aa      	lsls	r2, r5
 8009562:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009566:	4a1c      	ldr	r2, [pc, #112]	@ (80095d8 <HAL_GPIO_Init+0x1cc>)
 8009568:	4290      	cmp	r0, r2
 800956a:	f43f af58 	beq.w	800941e <HAL_GPIO_Init+0x12>
 800956e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009572:	4290      	cmp	r0, r2
 8009574:	d01a      	beq.n	80095ac <HAL_GPIO_Init+0x1a0>
 8009576:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800957a:	4290      	cmp	r0, r2
 800957c:	d018      	beq.n	80095b0 <HAL_GPIO_Init+0x1a4>
 800957e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009582:	4290      	cmp	r0, r2
 8009584:	d016      	beq.n	80095b4 <HAL_GPIO_Init+0x1a8>
 8009586:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800958a:	4290      	cmp	r0, r2
 800958c:	d014      	beq.n	80095b8 <HAL_GPIO_Init+0x1ac>
 800958e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009592:	4290      	cmp	r0, r2
 8009594:	d012      	beq.n	80095bc <HAL_GPIO_Init+0x1b0>
 8009596:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800959a:	4290      	cmp	r0, r2
 800959c:	d010      	beq.n	80095c0 <HAL_GPIO_Init+0x1b4>
 800959e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095a2:	4290      	cmp	r0, r2
 80095a4:	f43f af39 	beq.w	800941a <HAL_GPIO_Init+0xe>
 80095a8:	2208      	movs	r2, #8
 80095aa:	e739      	b.n	8009420 <HAL_GPIO_Init+0x14>
 80095ac:	2201      	movs	r2, #1
 80095ae:	e737      	b.n	8009420 <HAL_GPIO_Init+0x14>
 80095b0:	2202      	movs	r2, #2
 80095b2:	e735      	b.n	8009420 <HAL_GPIO_Init+0x14>
 80095b4:	2203      	movs	r2, #3
 80095b6:	e733      	b.n	8009420 <HAL_GPIO_Init+0x14>
 80095b8:	2204      	movs	r2, #4
 80095ba:	e731      	b.n	8009420 <HAL_GPIO_Init+0x14>
 80095bc:	2205      	movs	r2, #5
 80095be:	e72f      	b.n	8009420 <HAL_GPIO_Init+0x14>
 80095c0:	2206      	movs	r2, #6
 80095c2:	e72d      	b.n	8009420 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80095c4:	b003      	add	sp, #12
 80095c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	40013800 	.word	0x40013800
 80095d0:	40013c00 	.word	0x40013c00
 80095d4:	40023800 	.word	0x40023800
 80095d8:	40020000 	.word	0x40020000

080095dc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80095dc:	2800      	cmp	r0, #0
 80095de:	f000 81da 	beq.w	8009996 <HAL_RCC_OscConfig+0x3ba>
{
 80095e2:	b570      	push	{r4, r5, r6, lr}
 80095e4:	b082      	sub	sp, #8
 80095e6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095e8:	6803      	ldr	r3, [r0, #0]
 80095ea:	f013 0f01 	tst.w	r3, #1
 80095ee:	d03b      	beq.n	8009668 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80095f0:	4b9f      	ldr	r3, [pc, #636]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f003 030c 	and.w	r3, r3, #12
 80095f8:	2b04      	cmp	r3, #4
 80095fa:	d02c      	beq.n	8009656 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80095fc:	4b9c      	ldr	r3, [pc, #624]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009604:	2b08      	cmp	r3, #8
 8009606:	d021      	beq.n	800964c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009608:	6863      	ldr	r3, [r4, #4]
 800960a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800960e:	d04f      	beq.n	80096b0 <HAL_RCC_OscConfig+0xd4>
 8009610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009614:	d052      	beq.n	80096bc <HAL_RCC_OscConfig+0xe0>
 8009616:	4b96      	ldr	r3, [pc, #600]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009626:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009628:	6863      	ldr	r3, [r4, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d050      	beq.n	80096d0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800962e:	f7ff fc85 	bl	8008f3c <HAL_GetTick>
 8009632:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009634:	4b8e      	ldr	r3, [pc, #568]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800963c:	d114      	bne.n	8009668 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800963e:	f7ff fc7d 	bl	8008f3c <HAL_GetTick>
 8009642:	1b40      	subs	r0, r0, r5
 8009644:	2864      	cmp	r0, #100	@ 0x64
 8009646:	d9f5      	bls.n	8009634 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8009648:	2003      	movs	r0, #3
 800964a:	e1ab      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800964c:	4b88      	ldr	r3, [pc, #544]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8009654:	d0d8      	beq.n	8009608 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009656:	4b86      	ldr	r3, [pc, #536]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800965e:	d003      	beq.n	8009668 <HAL_RCC_OscConfig+0x8c>
 8009660:	6863      	ldr	r3, [r4, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 8199 	beq.w	800999a <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	f013 0f02 	tst.w	r3, #2
 800966e:	d054      	beq.n	800971a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009670:	4b7f      	ldr	r3, [pc, #508]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f013 0f0c 	tst.w	r3, #12
 8009678:	d03e      	beq.n	80096f8 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800967a:	4b7d      	ldr	r3, [pc, #500]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009682:	2b08      	cmp	r3, #8
 8009684:	d033      	beq.n	80096ee <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009686:	68e3      	ldr	r3, [r4, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d068      	beq.n	800975e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800968c:	4b79      	ldr	r3, [pc, #484]	@ (8009874 <HAL_RCC_OscConfig+0x298>)
 800968e:	2201      	movs	r2, #1
 8009690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009692:	f7ff fc53 	bl	8008f3c <HAL_GetTick>
 8009696:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009698:	4b75      	ldr	r3, [pc, #468]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f013 0f02 	tst.w	r3, #2
 80096a0:	d154      	bne.n	800974c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096a2:	f7ff fc4b 	bl	8008f3c <HAL_GetTick>
 80096a6:	1b40      	subs	r0, r0, r5
 80096a8:	2802      	cmp	r0, #2
 80096aa:	d9f5      	bls.n	8009698 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80096ac:	2003      	movs	r0, #3
 80096ae:	e179      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096b0:	4a6f      	ldr	r2, [pc, #444]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80096b2:	6813      	ldr	r3, [r2, #0]
 80096b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096b8:	6013      	str	r3, [r2, #0]
 80096ba:	e7b5      	b.n	8009628 <HAL_RCC_OscConfig+0x4c>
 80096bc:	4b6c      	ldr	r3, [pc, #432]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80096c4:	601a      	str	r2, [r3, #0]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80096cc:	601a      	str	r2, [r3, #0]
 80096ce:	e7ab      	b.n	8009628 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80096d0:	f7ff fc34 	bl	8008f3c <HAL_GetTick>
 80096d4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096d6:	4b66      	ldr	r3, [pc, #408]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80096de:	d0c3      	beq.n	8009668 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80096e0:	f7ff fc2c 	bl	8008f3c <HAL_GetTick>
 80096e4:	1b40      	subs	r0, r0, r5
 80096e6:	2864      	cmp	r0, #100	@ 0x64
 80096e8:	d9f5      	bls.n	80096d6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80096ea:	2003      	movs	r0, #3
 80096ec:	e15a      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80096ee:	4b60      	ldr	r3, [pc, #384]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80096f6:	d1c6      	bne.n	8009686 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80096f8:	4b5d      	ldr	r3, [pc, #372]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f013 0f02 	tst.w	r3, #2
 8009700:	d003      	beq.n	800970a <HAL_RCC_OscConfig+0x12e>
 8009702:	68e3      	ldr	r3, [r4, #12]
 8009704:	2b01      	cmp	r3, #1
 8009706:	f040 814a 	bne.w	800999e <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800970a:	4a59      	ldr	r2, [pc, #356]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 800970c:	6813      	ldr	r3, [r2, #0]
 800970e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009712:	6921      	ldr	r1, [r4, #16]
 8009714:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009718:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	f013 0f08 	tst.w	r3, #8
 8009720:	d042      	beq.n	80097a8 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009722:	6963      	ldr	r3, [r4, #20]
 8009724:	b36b      	cbz	r3, 8009782 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009726:	4b53      	ldr	r3, [pc, #332]	@ (8009874 <HAL_RCC_OscConfig+0x298>)
 8009728:	2201      	movs	r2, #1
 800972a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800972e:	f7ff fc05 	bl	8008f3c <HAL_GetTick>
 8009732:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009734:	4b4e      	ldr	r3, [pc, #312]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 8009736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009738:	f013 0f02 	tst.w	r3, #2
 800973c:	d134      	bne.n	80097a8 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800973e:	f7ff fbfd 	bl	8008f3c <HAL_GetTick>
 8009742:	1b40      	subs	r0, r0, r5
 8009744:	2802      	cmp	r0, #2
 8009746:	d9f5      	bls.n	8009734 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8009748:	2003      	movs	r0, #3
 800974a:	e12b      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800974c:	4a48      	ldr	r2, [pc, #288]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 800974e:	6813      	ldr	r3, [r2, #0]
 8009750:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009754:	6921      	ldr	r1, [r4, #16]
 8009756:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800975a:	6013      	str	r3, [r2, #0]
 800975c:	e7dd      	b.n	800971a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800975e:	4b45      	ldr	r3, [pc, #276]	@ (8009874 <HAL_RCC_OscConfig+0x298>)
 8009760:	2200      	movs	r2, #0
 8009762:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009764:	f7ff fbea 	bl	8008f3c <HAL_GetTick>
 8009768:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800976a:	4b41      	ldr	r3, [pc, #260]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f013 0f02 	tst.w	r3, #2
 8009772:	d0d2      	beq.n	800971a <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009774:	f7ff fbe2 	bl	8008f3c <HAL_GetTick>
 8009778:	1b40      	subs	r0, r0, r5
 800977a:	2802      	cmp	r0, #2
 800977c:	d9f5      	bls.n	800976a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800977e:	2003      	movs	r0, #3
 8009780:	e110      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009782:	4b3c      	ldr	r3, [pc, #240]	@ (8009874 <HAL_RCC_OscConfig+0x298>)
 8009784:	2200      	movs	r2, #0
 8009786:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800978a:	f7ff fbd7 	bl	8008f3c <HAL_GetTick>
 800978e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009790:	4b37      	ldr	r3, [pc, #220]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 8009792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009794:	f013 0f02 	tst.w	r3, #2
 8009798:	d006      	beq.n	80097a8 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800979a:	f7ff fbcf 	bl	8008f3c <HAL_GetTick>
 800979e:	1b40      	subs	r0, r0, r5
 80097a0:	2802      	cmp	r0, #2
 80097a2:	d9f5      	bls.n	8009790 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80097a4:	2003      	movs	r0, #3
 80097a6:	e0fd      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	f013 0f04 	tst.w	r3, #4
 80097ae:	d077      	beq.n	80098a0 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097b0:	4b2f      	ldr	r3, [pc, #188]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80097b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80097b8:	d133      	bne.n	8009822 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097ba:	2300      	movs	r3, #0
 80097bc:	9301      	str	r3, [sp, #4]
 80097be:	4b2c      	ldr	r3, [pc, #176]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80097c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097c2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80097c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80097c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80097d2:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097d4:	4b28      	ldr	r3, [pc, #160]	@ (8009878 <HAL_RCC_OscConfig+0x29c>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80097dc:	d023      	beq.n	8009826 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097de:	68a3      	ldr	r3, [r4, #8]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d034      	beq.n	800984e <HAL_RCC_OscConfig+0x272>
 80097e4:	2b05      	cmp	r3, #5
 80097e6:	d038      	beq.n	800985a <HAL_RCC_OscConfig+0x27e>
 80097e8:	4b21      	ldr	r3, [pc, #132]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 80097ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80097ec:	f022 0201 	bic.w	r2, r2, #1
 80097f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80097f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80097f4:	f022 0204 	bic.w	r2, r2, #4
 80097f8:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80097fa:	68a3      	ldr	r3, [r4, #8]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d03d      	beq.n	800987c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009800:	f7ff fb9c 	bl	8008f3c <HAL_GetTick>
 8009804:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009806:	4b1a      	ldr	r3, [pc, #104]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 8009808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800980a:	f013 0f02 	tst.w	r3, #2
 800980e:	d146      	bne.n	800989e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009810:	f7ff fb94 	bl	8008f3c <HAL_GetTick>
 8009814:	1b80      	subs	r0, r0, r6
 8009816:	f241 3388 	movw	r3, #5000	@ 0x1388
 800981a:	4298      	cmp	r0, r3
 800981c:	d9f3      	bls.n	8009806 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800981e:	2003      	movs	r0, #3
 8009820:	e0c0      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
    FlagStatus       pwrclkchanged = RESET;
 8009822:	2500      	movs	r5, #0
 8009824:	e7d6      	b.n	80097d4 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009826:	4a14      	ldr	r2, [pc, #80]	@ (8009878 <HAL_RCC_OscConfig+0x29c>)
 8009828:	6813      	ldr	r3, [r2, #0]
 800982a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800982e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8009830:	f7ff fb84 	bl	8008f3c <HAL_GetTick>
 8009834:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009836:	4b10      	ldr	r3, [pc, #64]	@ (8009878 <HAL_RCC_OscConfig+0x29c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800983e:	d1ce      	bne.n	80097de <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009840:	f7ff fb7c 	bl	8008f3c <HAL_GetTick>
 8009844:	1b80      	subs	r0, r0, r6
 8009846:	2802      	cmp	r0, #2
 8009848:	d9f5      	bls.n	8009836 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800984a:	2003      	movs	r0, #3
 800984c:	e0aa      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800984e:	4a08      	ldr	r2, [pc, #32]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 8009850:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8009852:	f043 0301 	orr.w	r3, r3, #1
 8009856:	6713      	str	r3, [r2, #112]	@ 0x70
 8009858:	e7cf      	b.n	80097fa <HAL_RCC_OscConfig+0x21e>
 800985a:	4b05      	ldr	r3, [pc, #20]	@ (8009870 <HAL_RCC_OscConfig+0x294>)
 800985c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800985e:	f042 0204 	orr.w	r2, r2, #4
 8009862:	671a      	str	r2, [r3, #112]	@ 0x70
 8009864:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009866:	f042 0201 	orr.w	r2, r2, #1
 800986a:	671a      	str	r2, [r3, #112]	@ 0x70
 800986c:	e7c5      	b.n	80097fa <HAL_RCC_OscConfig+0x21e>
 800986e:	bf00      	nop
 8009870:	40023800 	.word	0x40023800
 8009874:	42470000 	.word	0x42470000
 8009878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800987c:	f7ff fb5e 	bl	8008f3c <HAL_GetTick>
 8009880:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009882:	4b4f      	ldr	r3, [pc, #316]	@ (80099c0 <HAL_RCC_OscConfig+0x3e4>)
 8009884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009886:	f013 0f02 	tst.w	r3, #2
 800988a:	d008      	beq.n	800989e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800988c:	f7ff fb56 	bl	8008f3c <HAL_GetTick>
 8009890:	1b80      	subs	r0, r0, r6
 8009892:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009896:	4298      	cmp	r0, r3
 8009898:	d9f3      	bls.n	8009882 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800989a:	2003      	movs	r0, #3
 800989c:	e082      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800989e:	b9e5      	cbnz	r5, 80098da <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80098a0:	69a3      	ldr	r3, [r4, #24]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d07d      	beq.n	80099a2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80098a6:	4a46      	ldr	r2, [pc, #280]	@ (80099c0 <HAL_RCC_OscConfig+0x3e4>)
 80098a8:	6892      	ldr	r2, [r2, #8]
 80098aa:	f002 020c 	and.w	r2, r2, #12
 80098ae:	2a08      	cmp	r2, #8
 80098b0:	d051      	beq.n	8009956 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	d017      	beq.n	80098e6 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098b6:	4b43      	ldr	r3, [pc, #268]	@ (80099c4 <HAL_RCC_OscConfig+0x3e8>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098bc:	f7ff fb3e 	bl	8008f3c <HAL_GetTick>
 80098c0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098c2:	4b3f      	ldr	r3, [pc, #252]	@ (80099c0 <HAL_RCC_OscConfig+0x3e4>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80098ca:	d042      	beq.n	8009952 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098cc:	f7ff fb36 	bl	8008f3c <HAL_GetTick>
 80098d0:	1b00      	subs	r0, r0, r4
 80098d2:	2802      	cmp	r0, #2
 80098d4:	d9f5      	bls.n	80098c2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80098d6:	2003      	movs	r0, #3
 80098d8:	e064      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 80098da:	4a39      	ldr	r2, [pc, #228]	@ (80099c0 <HAL_RCC_OscConfig+0x3e4>)
 80098dc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80098de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80098e4:	e7dc      	b.n	80098a0 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80098e6:	4b37      	ldr	r3, [pc, #220]	@ (80099c4 <HAL_RCC_OscConfig+0x3e8>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80098ec:	f7ff fb26 	bl	8008f3c <HAL_GetTick>
 80098f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098f2:	4b33      	ldr	r3, [pc, #204]	@ (80099c0 <HAL_RCC_OscConfig+0x3e4>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80098fa:	d006      	beq.n	800990a <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098fc:	f7ff fb1e 	bl	8008f3c <HAL_GetTick>
 8009900:	1b40      	subs	r0, r0, r5
 8009902:	2802      	cmp	r0, #2
 8009904:	d9f5      	bls.n	80098f2 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8009906:	2003      	movs	r0, #3
 8009908:	e04c      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800990a:	69e3      	ldr	r3, [r4, #28]
 800990c:	6a22      	ldr	r2, [r4, #32]
 800990e:	4313      	orrs	r3, r2
 8009910:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009912:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8009916:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009918:	0852      	lsrs	r2, r2, #1
 800991a:	3a01      	subs	r2, #1
 800991c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009920:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009922:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009926:	4a26      	ldr	r2, [pc, #152]	@ (80099c0 <HAL_RCC_OscConfig+0x3e4>)
 8009928:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800992a:	4b26      	ldr	r3, [pc, #152]	@ (80099c4 <HAL_RCC_OscConfig+0x3e8>)
 800992c:	2201      	movs	r2, #1
 800992e:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8009930:	f7ff fb04 	bl	8008f3c <HAL_GetTick>
 8009934:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009936:	4b22      	ldr	r3, [pc, #136]	@ (80099c0 <HAL_RCC_OscConfig+0x3e4>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800993e:	d106      	bne.n	800994e <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009940:	f7ff fafc 	bl	8008f3c <HAL_GetTick>
 8009944:	1b00      	subs	r0, r0, r4
 8009946:	2802      	cmp	r0, #2
 8009948:	d9f5      	bls.n	8009936 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800994a:	2003      	movs	r0, #3
 800994c:	e02a      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800994e:	2000      	movs	r0, #0
 8009950:	e028      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
 8009952:	2000      	movs	r0, #0
 8009954:	e026      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009956:	2b01      	cmp	r3, #1
 8009958:	d026      	beq.n	80099a8 <HAL_RCC_OscConfig+0x3cc>
        pll_config = RCC->PLLCFGR;
 800995a:	4b19      	ldr	r3, [pc, #100]	@ (80099c0 <HAL_RCC_OscConfig+0x3e4>)
 800995c:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800995e:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8009962:	69e2      	ldr	r2, [r4, #28]
 8009964:	4291      	cmp	r1, r2
 8009966:	d121      	bne.n	80099ac <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009968:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800996c:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800996e:	428a      	cmp	r2, r1
 8009970:	d11e      	bne.n	80099b0 <HAL_RCC_OscConfig+0x3d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009972:	6a61      	ldr	r1, [r4, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009974:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8009978:	401a      	ands	r2, r3
 800997a:	428a      	cmp	r2, r1
 800997c:	d11a      	bne.n	80099b4 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800997e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009982:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009984:	428a      	cmp	r2, r1
 8009986:	d117      	bne.n	80099b8 <HAL_RCC_OscConfig+0x3dc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009988:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800998c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800998e:	4293      	cmp	r3, r2
 8009990:	d114      	bne.n	80099bc <HAL_RCC_OscConfig+0x3e0>
  return HAL_OK;
 8009992:	2000      	movs	r0, #0
 8009994:	e006      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 8009996:	2001      	movs	r0, #1
}
 8009998:	4770      	bx	lr
        return HAL_ERROR;
 800999a:	2001      	movs	r0, #1
 800999c:	e002      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
        return HAL_ERROR;
 800999e:	2001      	movs	r0, #1
 80099a0:	e000      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 80099a2:	2000      	movs	r0, #0
}
 80099a4:	b002      	add	sp, #8
 80099a6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80099a8:	2001      	movs	r0, #1
 80099aa:	e7fb      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
          return HAL_ERROR;
 80099ac:	2001      	movs	r0, #1
 80099ae:	e7f9      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
 80099b0:	2001      	movs	r0, #1
 80099b2:	e7f7      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
 80099b4:	2001      	movs	r0, #1
 80099b6:	e7f5      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
 80099b8:	2001      	movs	r0, #1
 80099ba:	e7f3      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
 80099bc:	2001      	movs	r0, #1
 80099be:	e7f1      	b.n	80099a4 <HAL_RCC_OscConfig+0x3c8>
 80099c0:	40023800 	.word	0x40023800
 80099c4:	42470000 	.word	0x42470000

080099c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099c8:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099ca:	4b33      	ldr	r3, [pc, #204]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0xd0>)
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f003 030c 	and.w	r3, r3, #12
 80099d2:	2b04      	cmp	r3, #4
 80099d4:	d05b      	beq.n	8009a8e <HAL_RCC_GetSysClockFreq+0xc6>
 80099d6:	2b08      	cmp	r3, #8
 80099d8:	d15b      	bne.n	8009a92 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80099da:	4b2f      	ldr	r3, [pc, #188]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0xd0>)
 80099dc:	685a      	ldr	r2, [r3, #4]
 80099de:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80099e8:	d02c      	beq.n	8009a44 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80099ea:	4b2b      	ldr	r3, [pc, #172]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0xd0>)
 80099ec:	6858      	ldr	r0, [r3, #4]
 80099ee:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80099f2:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80099f6:	ebbc 0c00 	subs.w	ip, ip, r0
 80099fa:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80099fe:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8009a02:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8009a06:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8009a0a:	ebb1 010c 	subs.w	r1, r1, ip
 8009a0e:	eb63 030e 	sbc.w	r3, r3, lr
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a18:	00c9      	lsls	r1, r1, #3
 8009a1a:	eb11 0c00 	adds.w	ip, r1, r0
 8009a1e:	f143 0300 	adc.w	r3, r3, #0
 8009a22:	0259      	lsls	r1, r3, #9
 8009a24:	2300      	movs	r3, #0
 8009a26:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8009a2a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8009a2e:	f7ff f873 	bl	8008b18 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009a32:	4b19      	ldr	r3, [pc, #100]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8009a3e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8009a42:	e027      	b.n	8009a94 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a44:	4b14      	ldr	r3, [pc, #80]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009a46:	6858      	ldr	r0, [r3, #4]
 8009a48:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8009a4c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8009a50:	ebbc 0c00 	subs.w	ip, ip, r0
 8009a54:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8009a58:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8009a5c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8009a60:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8009a64:	ebb1 010c 	subs.w	r1, r1, ip
 8009a68:	eb63 030e 	sbc.w	r3, r3, lr
 8009a6c:	00db      	lsls	r3, r3, #3
 8009a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a72:	00c9      	lsls	r1, r1, #3
 8009a74:	eb11 0c00 	adds.w	ip, r1, r0
 8009a78:	f143 0300 	adc.w	r3, r3, #0
 8009a7c:	0299      	lsls	r1, r3, #10
 8009a7e:	2300      	movs	r3, #0
 8009a80:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8009a84:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8009a88:	f7ff f846 	bl	8008b18 <__aeabi_uldivmod>
 8009a8c:	e7d1      	b.n	8009a32 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8009a8e:	4803      	ldr	r0, [pc, #12]	@ (8009a9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8009a90:	e000      	b.n	8009a94 <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a92:	4803      	ldr	r0, [pc, #12]	@ (8009aa0 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8009a94:	bd08      	pop	{r3, pc}
 8009a96:	bf00      	nop
 8009a98:	40023800 	.word	0x40023800
 8009a9c:	007a1200 	.word	0x007a1200
 8009aa0:	00f42400 	.word	0x00f42400

08009aa4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	f000 809b 	beq.w	8009be0 <HAL_RCC_ClockConfig+0x13c>
{
 8009aaa:	b570      	push	{r4, r5, r6, lr}
 8009aac:	460d      	mov	r5, r1
 8009aae:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009ab0:	4b4f      	ldr	r3, [pc, #316]	@ (8009bf0 <HAL_RCC_ClockConfig+0x14c>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 030f 	and.w	r3, r3, #15
 8009ab8:	428b      	cmp	r3, r1
 8009aba:	d208      	bcs.n	8009ace <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009abc:	b2cb      	uxtb	r3, r1
 8009abe:	4a4c      	ldr	r2, [pc, #304]	@ (8009bf0 <HAL_RCC_ClockConfig+0x14c>)
 8009ac0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ac2:	6813      	ldr	r3, [r2, #0]
 8009ac4:	f003 030f 	and.w	r3, r3, #15
 8009ac8:	428b      	cmp	r3, r1
 8009aca:	f040 808b 	bne.w	8009be4 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ace:	6823      	ldr	r3, [r4, #0]
 8009ad0:	f013 0f02 	tst.w	r3, #2
 8009ad4:	d017      	beq.n	8009b06 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ad6:	f013 0f04 	tst.w	r3, #4
 8009ada:	d004      	beq.n	8009ae6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009adc:	4a45      	ldr	r2, [pc, #276]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009ade:	6893      	ldr	r3, [r2, #8]
 8009ae0:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009ae4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	f013 0f08 	tst.w	r3, #8
 8009aec:	d004      	beq.n	8009af8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009aee:	4a41      	ldr	r2, [pc, #260]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009af0:	6893      	ldr	r3, [r2, #8]
 8009af2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009af6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009af8:	4a3e      	ldr	r2, [pc, #248]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009afa:	6893      	ldr	r3, [r2, #8]
 8009afc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b00:	68a1      	ldr	r1, [r4, #8]
 8009b02:	430b      	orrs	r3, r1
 8009b04:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	f013 0f01 	tst.w	r3, #1
 8009b0c:	d032      	beq.n	8009b74 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b0e:	6863      	ldr	r3, [r4, #4]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d021      	beq.n	8009b58 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b14:	1e9a      	subs	r2, r3, #2
 8009b16:	2a01      	cmp	r2, #1
 8009b18:	d925      	bls.n	8009b66 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b1a:	4a36      	ldr	r2, [pc, #216]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009b1c:	6812      	ldr	r2, [r2, #0]
 8009b1e:	f012 0f02 	tst.w	r2, #2
 8009b22:	d061      	beq.n	8009be8 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009b24:	4933      	ldr	r1, [pc, #204]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009b26:	688a      	ldr	r2, [r1, #8]
 8009b28:	f022 0203 	bic.w	r2, r2, #3
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8009b30:	f7ff fa04 	bl	8008f3c <HAL_GetTick>
 8009b34:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b36:	4b2f      	ldr	r3, [pc, #188]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	f003 030c 	and.w	r3, r3, #12
 8009b3e:	6862      	ldr	r2, [r4, #4]
 8009b40:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009b44:	d016      	beq.n	8009b74 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b46:	f7ff f9f9 	bl	8008f3c <HAL_GetTick>
 8009b4a:	1b80      	subs	r0, r0, r6
 8009b4c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009b50:	4298      	cmp	r0, r3
 8009b52:	d9f0      	bls.n	8009b36 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8009b54:	2003      	movs	r0, #3
 8009b56:	e042      	b.n	8009bde <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b58:	4a26      	ldr	r2, [pc, #152]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009b5a:	6812      	ldr	r2, [r2, #0]
 8009b5c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8009b60:	d1e0      	bne.n	8009b24 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8009b62:	2001      	movs	r0, #1
 8009b64:	e03b      	b.n	8009bde <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b66:	4a23      	ldr	r2, [pc, #140]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009b68:	6812      	ldr	r2, [r2, #0]
 8009b6a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8009b6e:	d1d9      	bne.n	8009b24 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8009b70:	2001      	movs	r0, #1
 8009b72:	e034      	b.n	8009bde <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009b74:	4b1e      	ldr	r3, [pc, #120]	@ (8009bf0 <HAL_RCC_ClockConfig+0x14c>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 030f 	and.w	r3, r3, #15
 8009b7c:	42ab      	cmp	r3, r5
 8009b7e:	d907      	bls.n	8009b90 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b80:	b2ea      	uxtb	r2, r5
 8009b82:	4b1b      	ldr	r3, [pc, #108]	@ (8009bf0 <HAL_RCC_ClockConfig+0x14c>)
 8009b84:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 030f 	and.w	r3, r3, #15
 8009b8c:	42ab      	cmp	r3, r5
 8009b8e:	d12d      	bne.n	8009bec <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	f013 0f04 	tst.w	r3, #4
 8009b96:	d006      	beq.n	8009ba6 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b98:	4a16      	ldr	r2, [pc, #88]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009b9a:	6893      	ldr	r3, [r2, #8]
 8009b9c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8009ba0:	68e1      	ldr	r1, [r4, #12]
 8009ba2:	430b      	orrs	r3, r1
 8009ba4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	f013 0f08 	tst.w	r3, #8
 8009bac:	d007      	beq.n	8009bbe <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009bae:	4a11      	ldr	r2, [pc, #68]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009bb0:	6893      	ldr	r3, [r2, #8]
 8009bb2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8009bb6:	6921      	ldr	r1, [r4, #16]
 8009bb8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009bbc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009bbe:	f7ff ff03 	bl	80099c8 <HAL_RCC_GetSysClockFreq>
 8009bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8009bf4 <HAL_RCC_ClockConfig+0x150>)
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009bca:	4a0b      	ldr	r2, [pc, #44]	@ (8009bf8 <HAL_RCC_ClockConfig+0x154>)
 8009bcc:	5cd3      	ldrb	r3, [r2, r3]
 8009bce:	40d8      	lsrs	r0, r3
 8009bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8009bfc <HAL_RCC_ClockConfig+0x158>)
 8009bd2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8009bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8009c00 <HAL_RCC_ClockConfig+0x15c>)
 8009bd6:	6818      	ldr	r0, [r3, #0]
 8009bd8:	f7ff f964 	bl	8008ea4 <HAL_InitTick>
  return HAL_OK;
 8009bdc:	2000      	movs	r0, #0
}
 8009bde:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8009be0:	2001      	movs	r0, #1
}
 8009be2:	4770      	bx	lr
      return HAL_ERROR;
 8009be4:	2001      	movs	r0, #1
 8009be6:	e7fa      	b.n	8009bde <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8009be8:	2001      	movs	r0, #1
 8009bea:	e7f8      	b.n	8009bde <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8009bec:	2001      	movs	r0, #1
 8009bee:	e7f6      	b.n	8009bde <HAL_RCC_ClockConfig+0x13a>
 8009bf0:	40023c00 	.word	0x40023c00
 8009bf4:	40023800 	.word	0x40023800
 8009bf8:	08029608 	.word	0x08029608
 8009bfc:	200001a4 	.word	0x200001a4
 8009c00:	20000004 	.word	0x20000004

08009c04 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8009c04:	4b01      	ldr	r3, [pc, #4]	@ (8009c0c <HAL_RCC_GetHCLKFreq+0x8>)
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	200001a4 	.word	0x200001a4

08009c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c10:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009c12:	f7ff fff7 	bl	8009c04 <HAL_RCC_GetHCLKFreq>
 8009c16:	4b04      	ldr	r3, [pc, #16]	@ (8009c28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8009c1e:	4a03      	ldr	r2, [pc, #12]	@ (8009c2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009c20:	5cd3      	ldrb	r3, [r2, r3]
}
 8009c22:	40d8      	lsrs	r0, r3
 8009c24:	bd08      	pop	{r3, pc}
 8009c26:	bf00      	nop
 8009c28:	40023800 	.word	0x40023800
 8009c2c:	08029600 	.word	0x08029600

08009c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c30:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009c32:	f7ff ffe7 	bl	8009c04 <HAL_RCC_GetHCLKFreq>
 8009c36:	4b04      	ldr	r3, [pc, #16]	@ (8009c48 <HAL_RCC_GetPCLK2Freq+0x18>)
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8009c3e:	4a03      	ldr	r2, [pc, #12]	@ (8009c4c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009c40:	5cd3      	ldrb	r3, [r2, r3]
}
 8009c42:	40d8      	lsrs	r0, r3
 8009c44:	bd08      	pop	{r3, pc}
 8009c46:	bf00      	nop
 8009c48:	40023800 	.word	0x40023800
 8009c4c:	08029600 	.word	0x08029600

08009c50 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009c50:	230f      	movs	r3, #15
 8009c52:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009c54:	4b0b      	ldr	r3, [pc, #44]	@ (8009c84 <HAL_RCC_GetClockConfig+0x34>)
 8009c56:	689a      	ldr	r2, [r3, #8]
 8009c58:	f002 0203 	and.w	r2, r2, #3
 8009c5c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009c5e:	689a      	ldr	r2, [r3, #8]
 8009c60:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8009c64:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009c66:	689a      	ldr	r2, [r3, #8]
 8009c68:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8009c6c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	08db      	lsrs	r3, r3, #3
 8009c72:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8009c76:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009c78:	4b03      	ldr	r3, [pc, #12]	@ (8009c88 <HAL_RCC_GetClockConfig+0x38>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 030f 	and.w	r3, r3, #15
 8009c80:	600b      	str	r3, [r1, #0]
}
 8009c82:	4770      	bx	lr
 8009c84:	40023800 	.word	0x40023800
 8009c88:	40023c00 	.word	0x40023c00

08009c8c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8009c8c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009c8e:	f7ff f955 	bl	8008f3c <HAL_GetTick>
 8009c92:	4604      	mov	r4, r0

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009c94:	4a46      	ldr	r2, [pc, #280]	@ (8009db0 <HAL_RCC_DeInit+0x124>)
 8009c96:	6813      	ldr	r3, [r2, #0]
 8009c98:	f043 0301 	orr.w	r3, r3, #1
 8009c9c:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8009c9e:	4b44      	ldr	r3, [pc, #272]	@ (8009db0 <HAL_RCC_DeInit+0x124>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f013 0f02 	tst.w	r3, #2
 8009ca6:	d106      	bne.n	8009cb6 <HAL_RCC_DeInit+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ca8:	f7ff f948 	bl	8008f3c <HAL_GetTick>
 8009cac:	1b00      	subs	r0, r0, r4
 8009cae:	2802      	cmp	r0, #2
 8009cb0:	d9f5      	bls.n	8009c9e <HAL_RCC_DeInit+0x12>
    {
      return HAL_TIMEOUT;
 8009cb2:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_OK;
  }
}
 8009cb4:	bd38      	pop	{r3, r4, r5, pc}
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8009cb6:	4d3e      	ldr	r5, [pc, #248]	@ (8009db0 <HAL_RCC_DeInit+0x124>)
 8009cb8:	682b      	ldr	r3, [r5, #0]
 8009cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cbe:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8009cc0:	f7ff f93c 	bl	8008f3c <HAL_GetTick>
 8009cc4:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	60ab      	str	r3, [r5, #8]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8009cca:	4b39      	ldr	r3, [pc, #228]	@ (8009db0 <HAL_RCC_DeInit+0x124>)
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f013 0f0c 	tst.w	r3, #12
 8009cd2:	d008      	beq.n	8009ce6 <HAL_RCC_DeInit+0x5a>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cd4:	f7ff f932 	bl	8008f3c <HAL_GetTick>
 8009cd8:	1b00      	subs	r0, r0, r4
 8009cda:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009cde:	4298      	cmp	r0, r3
 8009ce0:	d9f3      	bls.n	8009cca <HAL_RCC_DeInit+0x3e>
      return HAL_TIMEOUT;
 8009ce2:	2003      	movs	r0, #3
 8009ce4:	e7e6      	b.n	8009cb4 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8009ce6:	f7ff f929 	bl	8008f3c <HAL_GetTick>
 8009cea:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8009cec:	4a30      	ldr	r2, [pc, #192]	@ (8009db0 <HAL_RCC_DeInit+0x124>)
 8009cee:	6813      	ldr	r3, [r2, #0]
 8009cf0:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8009cf4:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8009cf6:	4b2e      	ldr	r3, [pc, #184]	@ (8009db0 <HAL_RCC_DeInit+0x124>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009cfe:	d006      	beq.n	8009d0e <HAL_RCC_DeInit+0x82>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d00:	f7ff f91c 	bl	8008f3c <HAL_GetTick>
 8009d04:	1b00      	subs	r0, r0, r4
 8009d06:	2864      	cmp	r0, #100	@ 0x64
 8009d08:	d9f5      	bls.n	8009cf6 <HAL_RCC_DeInit+0x6a>
      return HAL_TIMEOUT;
 8009d0a:	2003      	movs	r0, #3
 8009d0c:	e7d2      	b.n	8009cb4 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8009d0e:	f7ff f915 	bl	8008f3c <HAL_GetTick>
 8009d12:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8009d14:	4a26      	ldr	r2, [pc, #152]	@ (8009db0 <HAL_RCC_DeInit+0x124>)
 8009d16:	6813      	ldr	r3, [r2, #0]
 8009d18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009d1c:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8009d1e:	4b24      	ldr	r3, [pc, #144]	@ (8009db0 <HAL_RCC_DeInit+0x124>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8009d26:	d006      	beq.n	8009d36 <HAL_RCC_DeInit+0xaa>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d28:	f7ff f908 	bl	8008f3c <HAL_GetTick>
 8009d2c:	1b00      	subs	r0, r0, r4
 8009d2e:	2802      	cmp	r0, #2
 8009d30:	d9f5      	bls.n	8009d1e <HAL_RCC_DeInit+0x92>
      return HAL_TIMEOUT;
 8009d32:	2003      	movs	r0, #3
 8009d34:	e7be      	b.n	8009cb4 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8009d36:	f7ff f901 	bl	8008f3c <HAL_GetTick>
 8009d3a:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8009d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8009db0 <HAL_RCC_DeInit+0x124>)
 8009d3e:	6813      	ldr	r3, [r2, #0]
 8009d40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d44:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8009d46:	4b1a      	ldr	r3, [pc, #104]	@ (8009db0 <HAL_RCC_DeInit+0x124>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8009d4e:	d006      	beq.n	8009d5e <HAL_RCC_DeInit+0xd2>
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009d50:	f7ff f8f4 	bl	8008f3c <HAL_GetTick>
 8009d54:	1b00      	subs	r0, r0, r4
 8009d56:	2802      	cmp	r0, #2
 8009d58:	d9f5      	bls.n	8009d46 <HAL_RCC_DeInit+0xba>
      return HAL_TIMEOUT;
 8009d5a:	2003      	movs	r0, #3
 8009d5c:	e7aa      	b.n	8009cb4 <HAL_RCC_DeInit+0x28>
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8009d5e:	4b14      	ldr	r3, [pc, #80]	@ (8009db0 <HAL_RCC_DeInit+0x124>)
 8009d60:	4a14      	ldr	r2, [pc, #80]	@ (8009db4 <HAL_RCC_DeInit+0x128>)
 8009d62:	605a      	str	r2, [r3, #4]
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8009d64:	4a14      	ldr	r2, [pc, #80]	@ (8009db8 <HAL_RCC_DeInit+0x12c>)
 8009d66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8009d6a:	68da      	ldr	r2, [r3, #12]
 8009d6c:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8009d70:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8009d72:	68da      	ldr	r2, [r3, #12]
 8009d74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009d78:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8009d7a:	68da      	ldr	r2, [r3, #12]
 8009d7c:	f442 021f 	orr.w	r2, r2, #10420224	@ 0x9f0000
 8009d80:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8009d82:	68da      	ldr	r2, [r3, #12]
 8009d84:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8009d88:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8009d8a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009d8c:	f022 0201 	bic.w	r2, r2, #1
 8009d90:	675a      	str	r2, [r3, #116]	@ 0x74
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8009d92:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009d94:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8009d98:	675a      	str	r2, [r3, #116]	@ 0x74
  SystemCoreClock = HSI_VALUE;
 8009d9a:	4b08      	ldr	r3, [pc, #32]	@ (8009dbc <HAL_RCC_DeInit+0x130>)
 8009d9c:	4a08      	ldr	r2, [pc, #32]	@ (8009dc0 <HAL_RCC_DeInit+0x134>)
 8009d9e:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8009da0:	4b08      	ldr	r3, [pc, #32]	@ (8009dc4 <HAL_RCC_DeInit+0x138>)
 8009da2:	6818      	ldr	r0, [r3, #0]
 8009da4:	f7ff f87e 	bl	8008ea4 <HAL_InitTick>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d083      	beq.n	8009cb4 <HAL_RCC_DeInit+0x28>
    return HAL_ERROR;
 8009dac:	2001      	movs	r0, #1
 8009dae:	e781      	b.n	8009cb4 <HAL_RCC_DeInit+0x28>
 8009db0:	40023800 	.word	0x40023800
 8009db4:	04003010 	.word	0x04003010
 8009db8:	20003000 	.word	0x20003000
 8009dbc:	200001a4 	.word	0x200001a4
 8009dc0:	00f42400 	.word	0x00f42400
 8009dc4:	20000004 	.word	0x20000004

08009dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009dc8:	b510      	push	{r4, lr}
 8009dca:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009dcc:	6802      	ldr	r2, [r0, #0]
 8009dce:	6913      	ldr	r3, [r2, #16]
 8009dd0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8009dd4:	68c1      	ldr	r1, [r0, #12]
 8009dd6:	430b      	orrs	r3, r1
 8009dd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009dda:	6883      	ldr	r3, [r0, #8]
 8009ddc:	6902      	ldr	r2, [r0, #16]
 8009dde:	431a      	orrs	r2, r3
 8009de0:	6943      	ldr	r3, [r0, #20]
 8009de2:	431a      	orrs	r2, r3
 8009de4:	69c3      	ldr	r3, [r0, #28]
 8009de6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8009de8:	6801      	ldr	r1, [r0, #0]
 8009dea:	68cb      	ldr	r3, [r1, #12]
 8009dec:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8009df0:	f023 030c 	bic.w	r3, r3, #12
 8009df4:	4313      	orrs	r3, r2
 8009df6:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009df8:	6802      	ldr	r2, [r0, #0]
 8009dfa:	6953      	ldr	r3, [r2, #20]
 8009dfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e00:	6981      	ldr	r1, [r0, #24]
 8009e02:	430b      	orrs	r3, r1
 8009e04:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e06:	69c3      	ldr	r3, [r0, #28]
 8009e08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e0c:	d033      	beq.n	8009e76 <UART_SetConfig+0xae>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e0e:	6803      	ldr	r3, [r0, #0]
 8009e10:	4a49      	ldr	r2, [pc, #292]	@ (8009f38 <UART_SetConfig+0x170>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d063      	beq.n	8009ede <UART_SetConfig+0x116>
 8009e16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d05f      	beq.n	8009ede <UART_SetConfig+0x116>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e1e:	f7ff fef7 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e22:	2100      	movs	r1, #0
 8009e24:	1803      	adds	r3, r0, r0
 8009e26:	4149      	adcs	r1, r1
 8009e28:	181b      	adds	r3, r3, r0
 8009e2a:	f141 0100 	adc.w	r1, r1, #0
 8009e2e:	00c9      	lsls	r1, r1, #3
 8009e30:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8009e34:	00db      	lsls	r3, r3, #3
 8009e36:	1818      	adds	r0, r3, r0
 8009e38:	6863      	ldr	r3, [r4, #4]
 8009e3a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8009e3e:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8009e42:	f141 0100 	adc.w	r1, r1, #0
 8009e46:	f7fe fe67 	bl	8008b18 <__aeabi_uldivmod>
 8009e4a:	4a3c      	ldr	r2, [pc, #240]	@ (8009f3c <UART_SetConfig+0x174>)
 8009e4c:	fba2 3100 	umull	r3, r1, r2, r0
 8009e50:	0949      	lsrs	r1, r1, #5
 8009e52:	2364      	movs	r3, #100	@ 0x64
 8009e54:	fb03 0311 	mls	r3, r3, r1, r0
 8009e58:	011b      	lsls	r3, r3, #4
 8009e5a:	3332      	adds	r3, #50	@ 0x32
 8009e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e60:	095b      	lsrs	r3, r3, #5
 8009e62:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009e66:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8009e6a:	f003 030f 	and.w	r3, r3, #15
 8009e6e:	6821      	ldr	r1, [r4, #0]
 8009e70:	4413      	add	r3, r2
 8009e72:	608b      	str	r3, [r1, #8]
    }
  }
}
 8009e74:	e05e      	b.n	8009f34 <UART_SetConfig+0x16c>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e76:	6803      	ldr	r3, [r0, #0]
 8009e78:	4a2f      	ldr	r2, [pc, #188]	@ (8009f38 <UART_SetConfig+0x170>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d003      	beq.n	8009e86 <UART_SetConfig+0xbe>
 8009e7e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d156      	bne.n	8009f34 <UART_SetConfig+0x16c>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e86:	f7ff fed3 	bl	8009c30 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	1802      	adds	r2, r0, r0
 8009e8e:	eb43 0103 	adc.w	r1, r3, r3
 8009e92:	1812      	adds	r2, r2, r0
 8009e94:	f141 0100 	adc.w	r1, r1, #0
 8009e98:	00c9      	lsls	r1, r1, #3
 8009e9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009e9e:	00d2      	lsls	r2, r2, #3
 8009ea0:	1810      	adds	r0, r2, r0
 8009ea2:	f141 0100 	adc.w	r1, r1, #0
 8009ea6:	6862      	ldr	r2, [r4, #4]
 8009ea8:	1892      	adds	r2, r2, r2
 8009eaa:	415b      	adcs	r3, r3
 8009eac:	f7fe fe34 	bl	8008b18 <__aeabi_uldivmod>
 8009eb0:	4a22      	ldr	r2, [pc, #136]	@ (8009f3c <UART_SetConfig+0x174>)
 8009eb2:	fba2 3100 	umull	r3, r1, r2, r0
 8009eb6:	0949      	lsrs	r1, r1, #5
 8009eb8:	2364      	movs	r3, #100	@ 0x64
 8009eba:	fb03 0311 	mls	r3, r3, r1, r0
 8009ebe:	00db      	lsls	r3, r3, #3
 8009ec0:	3332      	adds	r3, #50	@ 0x32
 8009ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ec6:	095b      	lsrs	r3, r3, #5
 8009ec8:	005a      	lsls	r2, r3, #1
 8009eca:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8009ece:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8009ed2:	f003 0307 	and.w	r3, r3, #7
 8009ed6:	6821      	ldr	r1, [r4, #0]
 8009ed8:	4413      	add	r3, r2
 8009eda:	608b      	str	r3, [r1, #8]
 8009edc:	e02a      	b.n	8009f34 <UART_SetConfig+0x16c>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ede:	f7ff fea7 	bl	8009c30 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	1803      	adds	r3, r0, r0
 8009ee6:	4149      	adcs	r1, r1
 8009ee8:	181b      	adds	r3, r3, r0
 8009eea:	f141 0100 	adc.w	r1, r1, #0
 8009eee:	00c9      	lsls	r1, r1, #3
 8009ef0:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8009ef4:	00db      	lsls	r3, r3, #3
 8009ef6:	1818      	adds	r0, r3, r0
 8009ef8:	6863      	ldr	r3, [r4, #4]
 8009efa:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8009efe:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8009f02:	f141 0100 	adc.w	r1, r1, #0
 8009f06:	f7fe fe07 	bl	8008b18 <__aeabi_uldivmod>
 8009f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8009f3c <UART_SetConfig+0x174>)
 8009f0c:	fba2 3100 	umull	r3, r1, r2, r0
 8009f10:	0949      	lsrs	r1, r1, #5
 8009f12:	2364      	movs	r3, #100	@ 0x64
 8009f14:	fb03 0311 	mls	r3, r3, r1, r0
 8009f18:	011b      	lsls	r3, r3, #4
 8009f1a:	3332      	adds	r3, #50	@ 0x32
 8009f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f20:	095b      	lsrs	r3, r3, #5
 8009f22:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009f26:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8009f2a:	f003 030f 	and.w	r3, r3, #15
 8009f2e:	6821      	ldr	r1, [r4, #0]
 8009f30:	4413      	add	r3, r2
 8009f32:	608b      	str	r3, [r1, #8]
}
 8009f34:	bd10      	pop	{r4, pc}
 8009f36:	bf00      	nop
 8009f38:	40011000 	.word	0x40011000
 8009f3c:	51eb851f 	.word	0x51eb851f

08009f40 <HAL_UART_MspInit>:
}
 8009f40:	4770      	bx	lr

08009f42 <HAL_UART_Init>:
  if (huart == NULL)
 8009f42:	b360      	cbz	r0, 8009f9e <HAL_UART_Init+0x5c>
{
 8009f44:	b510      	push	{r4, lr}
 8009f46:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009f48:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8009f4c:	b313      	cbz	r3, 8009f94 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8009f4e:	2324      	movs	r3, #36	@ 0x24
 8009f50:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8009f54:	6822      	ldr	r2, [r4, #0]
 8009f56:	68d3      	ldr	r3, [r2, #12]
 8009f58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009f5c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f7ff ff32 	bl	8009dc8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f64:	6822      	ldr	r2, [r4, #0]
 8009f66:	6913      	ldr	r3, [r2, #16]
 8009f68:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8009f6c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f6e:	6822      	ldr	r2, [r4, #0]
 8009f70:	6953      	ldr	r3, [r2, #20]
 8009f72:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8009f76:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8009f78:	6822      	ldr	r2, [r4, #0]
 8009f7a:	68d3      	ldr	r3, [r2, #12]
 8009f7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009f80:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f82:	2000      	movs	r0, #0
 8009f84:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009f86:	2320      	movs	r3, #32
 8009f88:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009f8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f90:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8009f92:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8009f94:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8009f98:	f7ff ffd2 	bl	8009f40 <HAL_UART_MspInit>
 8009f9c:	e7d7      	b.n	8009f4e <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8009f9e:	2001      	movs	r0, #1
}
 8009fa0:	4770      	bx	lr

08009fa2 <HAL_UART_Receive_IT>:
    if (huart->RxState == HAL_UART_STATE_READY)
 8009fa2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	2b20      	cmp	r3, #32
 8009faa:	d125      	bne.n	8009ff8 <HAL_UART_Receive_IT+0x56>
        if ((pData == NULL) || (Size == 0U))
 8009fac:	b331      	cbz	r1, 8009ffc <HAL_UART_Receive_IT+0x5a>
 8009fae:	b33a      	cbz	r2, 800a000 <HAL_UART_Receive_IT+0x5e>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	6303      	str	r3, [r0, #48]	@ 0x30
        __HAL_LOCK(huart);
 8009fb4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d023      	beq.n	800a004 <HAL_UART_Receive_IT+0x62>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
        huart->pRxBuffPtr = pData;
 8009fc2:	6281      	str	r1, [r0, #40]	@ 0x28
        huart->RxXferSize = Size;
 8009fc4:	8582      	strh	r2, [r0, #44]	@ 0x2c
        huart->RxXferCount = Size;
 8009fc6:	85c2      	strh	r2, [r0, #46]	@ 0x2e
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	6443      	str	r3, [r0, #68]	@ 0x44
        huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009fcc:	2222      	movs	r2, #34	@ 0x22
 8009fce:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
        __HAL_UART_ENABLE_IT(huart, UART_IT_PE);     // Parity Error Interrupt
 8009fd2:	6801      	ldr	r1, [r0, #0]
 8009fd4:	68ca      	ldr	r2, [r1, #12]
 8009fd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009fda:	60ca      	str	r2, [r1, #12]
        __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);    // Error Interrupt (Frame error, noise error, overrun error)
 8009fdc:	6801      	ldr	r1, [r0, #0]
 8009fde:	694a      	ldr	r2, [r1, #20]
 8009fe0:	f042 0201 	orr.w	r2, r2, #1
 8009fe4:	614a      	str	r2, [r1, #20]
        __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);   // Data Register Not Empty Interrupt
 8009fe6:	6801      	ldr	r1, [r0, #0]
 8009fe8:	68ca      	ldr	r2, [r1, #12]
 8009fea:	f042 0220 	orr.w	r2, r2, #32
 8009fee:	60ca      	str	r2, [r1, #12]
        __HAL_UNLOCK(huart);
 8009ff0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
        return HAL_OK;
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	4770      	bx	lr
        return HAL_BUSY;
 8009ff8:	2002      	movs	r0, #2
 8009ffa:	4770      	bx	lr
            return HAL_ERROR;
 8009ffc:	2001      	movs	r0, #1
 8009ffe:	4770      	bx	lr
 800a000:	2001      	movs	r0, #1
 800a002:	4770      	bx	lr
        __HAL_LOCK(huart);
 800a004:	2002      	movs	r0, #2
}
 800a006:	4770      	bx	lr

0800a008 <__enable_irq>:
  __ASM volatile ("cpsie i" : : : "memory");
 800a008:	b662      	cpsie	i
}
 800a00a:	4770      	bx	lr

0800a00c <__disable_irq>:
  __ASM volatile ("cpsid i" : : : "memory");
 800a00c:	b672      	cpsid	i
}
 800a00e:	4770      	bx	lr

0800a010 <motor_iterator>:

static void motor_iterator (motor_iterator_callback_ptr callback)
{
    motor_map_t motor;

    if(callback) for(motor.id = 0; motor.id < N_AXIS + N_GANGED; motor.id++)
 800a010:	b180      	cbz	r0, 800a034 <motor_iterator+0x24>
{
 800a012:	b570      	push	{r4, r5, r6, lr}
 800a014:	4606      	mov	r6, r0
    if(callback) for(motor.id = 0; motor.id < N_AXIS + N_GANGED; motor.id++)
 800a016:	2500      	movs	r5, #0
 800a018:	f36f 0507 	bfc	r5, #0, #8
 800a01c:	e006      	b.n	800a02c <motor_iterator+0x1c>
    {
        if(motor.id < N_AXIS)
            motor.axis = motor.id;
 800a01e:	f364 250f 	bfi	r5, r4, #8, #8
            case Z2_MOTOR:
                motor.axis = Z_AXIS;
                break;
#endif
        }
        callback(motor);
 800a022:	4628      	mov	r0, r5
 800a024:	47b0      	blx	r6
    if(callback) for(motor.id = 0; motor.id < N_AXIS + N_GANGED; motor.id++)
 800a026:	3401      	adds	r4, #1
 800a028:	f364 0507 	bfi	r5, r4, #0, #8
 800a02c:	b2ec      	uxtb	r4, r5
 800a02e:	2c02      	cmp	r4, #2
 800a030:	d9f5      	bls.n	800a01e <motor_iterator+0xe>
    }
}
 800a032:	bd70      	pop	{r4, r5, r6, pc}
 800a034:	4770      	bx	lr
	...

0800a038 <aux_ctrl_remap_explicit>:
    { .function = Input_ProbeDisconnect, .aux_port = 0xFF, .irq_mode = (pin_irq_mode_t)(IRQ_Mode_Rising|IRQ_Mode_Falling), .cap = { .probe_disconnected = On }, .pin = 0xFF, .port = NULL },
#endif
};

static inline aux_ctrl_t *aux_ctrl_remap_explicit (void *port, uint8_t pin, uint8_t aux_port, void *input)
{
 800a038:	b530      	push	{r4, r5, lr}
 800a03a:	4686      	mov	lr, r0
    aux_ctrl_t *ctrl_pin = NULL;

    uint_fast8_t idx = sizeof(aux_ctrl) / sizeof(aux_ctrl_t);
 800a03c:	2400      	movs	r4, #0
    aux_ctrl_t *ctrl_pin = NULL;
 800a03e:	4620      	mov	r0, r4
 800a040:	e001      	b.n	800a046 <aux_ctrl_remap_explicit+0xe>
        if(aux_ctrl[idx].port == port && aux_ctrl[idx].pin == pin) {
            ctrl_pin = &aux_ctrl[idx];
            ctrl_pin->aux_port = aux_port;
            ctrl_pin->input = input;
        }
    } while(idx && ctrl_pin == NULL);
 800a042:	b194      	cbz	r4, 800a06a <aux_ctrl_remap_explicit+0x32>
 800a044:	b988      	cbnz	r0, 800a06a <aux_ctrl_remap_explicit+0x32>
        idx--;
 800a046:	3c01      	subs	r4, #1
        if(aux_ctrl[idx].port == port && aux_ctrl[idx].pin == pin) {
 800a048:	4d08      	ldr	r5, [pc, #32]	@ (800a06c <aux_ctrl_remap_explicit+0x34>)
 800a04a:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 800a04e:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800a052:	4575      	cmp	r5, lr
 800a054:	d1f5      	bne.n	800a042 <aux_ctrl_remap_explicit+0xa>
 800a056:	f89c 5006 	ldrb.w	r5, [ip, #6]
 800a05a:	428d      	cmp	r5, r1
 800a05c:	d1f1      	bne.n	800a042 <aux_ctrl_remap_explicit+0xa>
            ctrl_pin = &aux_ctrl[idx];
 800a05e:	4660      	mov	r0, ip
            ctrl_pin->aux_port = aux_port;
 800a060:	f88c 2001 	strb.w	r2, [ip, #1]
            ctrl_pin->input = input;
 800a064:	f8cc 300c 	str.w	r3, [ip, #12]
 800a068:	e7eb      	b.n	800a042 <aux_ctrl_remap_explicit+0xa>

    return ctrl_pin;
}
 800a06a:	bd30      	pop	{r4, r5, pc}
 800a06c:	200007d0 	.word	0x200007d0

0800a070 <stepperEnable>:
   #ifdef C_ENABLE_PORT
    DIGITAL_OUT(C_ENABLE_PORT, C_ENABLE_PIN, enable.c);
   #endif
  #endif
#endif
}
 800a070:	4770      	bx	lr
	...

0800a074 <stepperWakeUp>:

// Starts stepper driver ISR timer and forces a stepper driver interrupt callback
static void stepperWakeUp (void)
{
 800a074:	b510      	push	{r4, lr}
    hal.stepper.enable((axes_signals_t){AXES_BITMASK});
 800a076:	4c0b      	ldr	r4, [pc, #44]	@ (800a0a4 <stepperWakeUp+0x30>)
 800a078:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 800a07c:	f04f 0007 	mov.w	r0, #7
 800a080:	4798      	blx	r3

    STEPPER_TIMER->ARR = hal.f_step_timer / 500; // ~2ms delay to allow drivers time to wake up.
 800a082:	69e2      	ldr	r2, [r4, #28]
 800a084:	4b08      	ldr	r3, [pc, #32]	@ (800a0a8 <stepperWakeUp+0x34>)
 800a086:	fba3 3202 	umull	r3, r2, r3, r2
 800a08a:	0952      	lsrs	r2, r2, #5
 800a08c:	4b07      	ldr	r3, [pc, #28]	@ (800a0ac <stepperWakeUp+0x38>)
 800a08e:	62da      	str	r2, [r3, #44]	@ 0x2c
    STEPPER_TIMER->EGR = TIM_EGR_UG;
 800a090:	2201      	movs	r2, #1
 800a092:	615a      	str	r2, [r3, #20]
    STEPPER_TIMER->SR = ~TIM_SR_UIF;
 800a094:	f06f 0201 	mvn.w	r2, #1
 800a098:	611a      	str	r2, [r3, #16]
    STEPPER_TIMER->CR1 |= TIM_CR1_CEN;
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	f042 0201 	orr.w	r2, r2, #1
 800a0a0:	601a      	str	r2, [r3, #0]
}
 800a0a2:	bd10      	pop	{r4, pc}
 800a0a4:	20001a90 	.word	0x20001a90
 800a0a8:	10624dd3 	.word	0x10624dd3
 800a0ac:	40000c00 	.word	0x40000c00

0800a0b0 <stepperGoIdle>:

// Disables stepper driver interrupts
static void stepperGoIdle (bool clear_signals)
{
    STEPPER_TIMER->CR1 &= ~TIM_CR1_CEN;
 800a0b0:	4b03      	ldr	r3, [pc, #12]	@ (800a0c0 <stepperGoIdle+0x10>)
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	f022 0201 	bic.w	r2, r2, #1
 800a0b8:	601a      	str	r2, [r3, #0]
    STEPPER_TIMER->CNT = 0;
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800a0be:	4770      	bx	lr
 800a0c0:	40000c00 	.word	0x40000c00

0800a0c4 <stepperCyclesPerTick>:

// Sets up stepper driver interrupt timeout, "Normal" version
static void stepperCyclesPerTick (uint32_t cycles_per_tick)
{
    STEPPER_TIMER->ARR = cycles_per_tick < (1UL << 20) ? cycles_per_tick : 0x000FFFFFUL;
 800a0c4:	4b03      	ldr	r3, [pc, #12]	@ (800a0d4 <stepperCyclesPerTick+0x10>)
 800a0c6:	4298      	cmp	r0, r3
 800a0c8:	bf28      	it	cs
 800a0ca:	4618      	movcs	r0, r3
 800a0cc:	4b02      	ldr	r3, [pc, #8]	@ (800a0d8 <stepperCyclesPerTick+0x14>)
 800a0ce:	62d8      	str	r0, [r3, #44]	@ 0x2c
}
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	000fffff 	.word	0x000fffff
 800a0d8:	40000c00 	.word	0x40000c00

0800a0dc <stepperPulseStart>:
        hal.stepper.pulse_start(stepper);
        return;
    }
#endif

    if(stepper->dir_change)
 800a0dc:	7b43      	ldrb	r3, [r0, #13]
 800a0de:	b1ab      	cbz	r3, 800a10c <stepperPulseStart+0x30>
    dir_outbits.mask ^= settings.steppers.dir_invert.mask;
 800a0e0:	7bc3      	ldrb	r3, [r0, #15]
 800a0e2:	4a19      	ldr	r2, [pc, #100]	@ (800a148 <stepperPulseStart+0x6c>)
 800a0e4:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
 800a0e8:	4053      	eors	r3, r2
    DIGITAL_OUT(X_DIRECTION_PORT, X_DIRECTION_PIN, dir_outbits.x);
 800a0ea:	f3c3 0100 	ubfx	r1, r3, #0, #1
 800a0ee:	4a17      	ldr	r2, [pc, #92]	@ (800a14c <stepperPulseStart+0x70>)
 800a0f0:	f882 10b0 	strb.w	r1, [r2, #176]	@ 0xb0
    DIGITAL_OUT(Y_DIRECTION_PORT, Y_DIRECTION_PIN, dir_outbits.y);
 800a0f4:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800a0f8:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 800a0fc:	f882 10bc 	strb.w	r1, [r2, #188]	@ 0xbc
    DIGITAL_OUT(Z_DIRECTION_PORT, Z_DIRECTION_PIN, dir_outbits.z);
 800a100:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a104:	f502 32c0 	add.w	r2, r2, #98304	@ 0x18000
 800a108:	f882 308c 	strb.w	r3, [r2, #140]	@ 0x8c
        stepperSetDirOutputs(stepper->dir_outbits);

    if(stepper->step_outbits.value) {
 800a10c:	7b83      	ldrb	r3, [r0, #14]
 800a10e:	b1cb      	cbz	r3, 800a144 <stepperPulseStart+0x68>
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 800a110:	4a0d      	ldr	r2, [pc, #52]	@ (800a148 <stepperPulseStart+0x6c>)
 800a112:	f892 20e8 	ldrb.w	r2, [r2, #232]	@ 0xe8
 800a116:	4053      	eors	r3, r2
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 800a118:	f3c3 0100 	ubfx	r1, r3, #0, #1
 800a11c:	4a0b      	ldr	r2, [pc, #44]	@ (800a14c <stepperPulseStart+0x70>)
 800a11e:	f882 10b4 	strb.w	r1, [r2, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 800a122:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800a126:	f882 10ac 	strb.w	r1, [r2, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 800a12a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a12e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800a132:	f882 3088 	strb.w	r3, [r2, #136]	@ 0x88
        stepperSetStepOutputs(stepper->step_outbits);
        PULSE_TIMER->EGR = TIM_EGR_UG;
 800a136:	4b06      	ldr	r3, [pc, #24]	@ (800a150 <stepperPulseStart+0x74>)
 800a138:	2201      	movs	r2, #1
 800a13a:	615a      	str	r2, [r3, #20]
        PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	f042 0201 	orr.w	r2, r2, #1
 800a142:	601a      	str	r2, [r3, #0]
    }
}
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	200024a8 	.word	0x200024a8
 800a14c:	42418200 	.word	0x42418200
 800a150:	40000800 	.word	0x40000800

0800a154 <stepperPulseStartDelayed>:
        hal.stepper.pulse_start(stepper);
        return;
    }
#endif

    if(stepper->dir_change) {
 800a154:	7b43      	ldrb	r3, [r0, #13]
 800a156:	b9e3      	cbnz	r3, 800a192 <stepperPulseStartDelayed+0x3e>
        }

        return;
    }

    if(stepper->step_outbits.value) {
 800a158:	7b83      	ldrb	r3, [r0, #14]
 800a15a:	b1cb      	cbz	r3, 800a190 <stepperPulseStartDelayed+0x3c>
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 800a15c:	4a20      	ldr	r2, [pc, #128]	@ (800a1e0 <stepperPulseStartDelayed+0x8c>)
 800a15e:	f892 20e8 	ldrb.w	r2, [r2, #232]	@ 0xe8
 800a162:	4053      	eors	r3, r2
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 800a164:	f3c3 0100 	ubfx	r1, r3, #0, #1
 800a168:	4a1e      	ldr	r2, [pc, #120]	@ (800a1e4 <stepperPulseStartDelayed+0x90>)
 800a16a:	f882 10b4 	strb.w	r1, [r2, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 800a16e:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800a172:	f882 10ac 	strb.w	r1, [r2, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 800a176:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a17a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800a17e:	f882 3088 	strb.w	r3, [r2, #136]	@ 0x88
        stepperSetStepOutputs(stepper->step_outbits);
        PULSE_TIMER->EGR = TIM_EGR_UG;
 800a182:	4b19      	ldr	r3, [pc, #100]	@ (800a1e8 <stepperPulseStartDelayed+0x94>)
 800a184:	2201      	movs	r2, #1
 800a186:	615a      	str	r2, [r3, #20]
        PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	f042 0201 	orr.w	r2, r2, #1
 800a18e:	601a      	str	r2, [r3, #0]
    }
}
 800a190:	4770      	bx	lr
    dir_outbits.mask ^= settings.steppers.dir_invert.mask;
 800a192:	7bc3      	ldrb	r3, [r0, #15]
 800a194:	4a12      	ldr	r2, [pc, #72]	@ (800a1e0 <stepperPulseStartDelayed+0x8c>)
 800a196:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
 800a19a:	4053      	eors	r3, r2
    DIGITAL_OUT(X_DIRECTION_PORT, X_DIRECTION_PIN, dir_outbits.x);
 800a19c:	f3c3 0100 	ubfx	r1, r3, #0, #1
 800a1a0:	4a10      	ldr	r2, [pc, #64]	@ (800a1e4 <stepperPulseStartDelayed+0x90>)
 800a1a2:	f882 10b0 	strb.w	r1, [r2, #176]	@ 0xb0
    DIGITAL_OUT(Y_DIRECTION_PORT, Y_DIRECTION_PIN, dir_outbits.y);
 800a1a6:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800a1aa:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 800a1ae:	f882 10bc 	strb.w	r1, [r2, #188]	@ 0xbc
    DIGITAL_OUT(Z_DIRECTION_PORT, Z_DIRECTION_PIN, dir_outbits.z);
 800a1b2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a1b6:	f502 32c0 	add.w	r2, r2, #98304	@ 0x18000
 800a1ba:	f882 308c 	strb.w	r3, [r2, #140]	@ 0x8c
        if(stepper->step_outbits.value) {
 800a1be:	7b83      	ldrb	r3, [r0, #14]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d0e5      	beq.n	800a190 <stepperPulseStartDelayed+0x3c>
            next_step_outbits = stepper->step_outbits; // Store out_bits
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	4b09      	ldr	r3, [pc, #36]	@ (800a1ec <stepperPulseStartDelayed+0x98>)
 800a1c8:	701a      	strb	r2, [r3, #0]
            PULSE_TIMER->ARR = pulse_delay;
 800a1ca:	4b09      	ldr	r3, [pc, #36]	@ (800a1f0 <stepperPulseStartDelayed+0x9c>)
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	4b06      	ldr	r3, [pc, #24]	@ (800a1e8 <stepperPulseStartDelayed+0x94>)
 800a1d0:	62da      	str	r2, [r3, #44]	@ 0x2c
            PULSE_TIMER->EGR = TIM_EGR_UG;
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	615a      	str	r2, [r3, #20]
            PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	f042 0201 	orr.w	r2, r2, #1
 800a1dc:	601a      	str	r2, [r3, #0]
        return;
 800a1de:	4770      	bx	lr
 800a1e0:	200024a8 	.word	0x200024a8
 800a1e4:	42418200 	.word	0x42418200
 800a1e8:	40000800 	.word	0x40000800
 800a1ec:	200007a8 	.word	0x200007a8
 800a1f0:	200007bc 	.word	0x200007bc

0800a1f4 <limitsGetState>:
}

// Returns limit state as an limit_signals_t variable.
// Each bitfield bit indicates an axis limit, where triggered is 1 and not triggered is 0.
inline static limit_signals_t limitsGetState (void)
{
 800a1f4:	b082      	sub	sp, #8
    limit_signals_t signals = {0};
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	9300      	str	r3, [sp, #0]

    signals.min.mask = settings.limits.invert.mask;
 800a1fa:	4b1c      	ldr	r3, [pc, #112]	@ (800a26c <limitsGetState+0x78>)
 800a1fc:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 800a200:	f88d 3000 	strb.w	r3, [sp]
#ifdef MAX_LIMIT_SWITCHES
    signals.max.mask = settings.limits.invert.mask;
#endif

#if LIMIT_INMODE == GPIO_BITBAND
    signals.min.x = DIGITAL_IN(X_LIMIT_PORT, X_LIMIT_PIN);
 800a204:	4a1a      	ldr	r2, [pc, #104]	@ (800a270 <limitsGetState+0x7c>)
 800a206:	f892 002c 	ldrb.w	r0, [r2, #44]	@ 0x2c
 800a20a:	b2d9      	uxtb	r1, r3
 800a20c:	f360 0100 	bfi	r1, r0, #0, #1
 800a210:	f88d 1000 	strb.w	r1, [sp]
    signals.min.y = DIGITAL_IN(Y_LIMIT_PORT, Y_LIMIT_PIN);
 800a214:	f892 1030 	ldrb.w	r1, [r2, #48]	@ 0x30
 800a218:	f89d 2000 	ldrb.w	r2, [sp]
 800a21c:	f361 0241 	bfi	r2, r1, #1, #1
 800a220:	f88d 2000 	strb.w	r2, [sp]
    signals.min.z = DIGITAL_IN(Z_LIMIT_PORT, Z_LIMIT_PIN);
 800a224:	4a13      	ldr	r2, [pc, #76]	@ (800a274 <limitsGetState+0x80>)
 800a226:	f892 1030 	ldrb.w	r1, [r2, #48]	@ 0x30
 800a22a:	f89d 2000 	ldrb.w	r2, [sp]
 800a22e:	f361 0282 	bfi	r2, r1, #2, #1
 800a232:	f88d 2000 	strb.w	r2, [sp]
#endif
#ifdef Z_LIMIT_PIN_MAX
    signals.max.z = DIGITAL_IN(Z_LIMIT_PORT_MAX, Z_LIMIT_PIN_MAX);
#endif

    if (settings.limits.invert.mask) {
 800a236:	b11b      	cbz	r3, 800a240 <limitsGetState+0x4c>
        signals.min.value ^= settings.limits.invert.mask;
 800a238:	b2d2      	uxtb	r2, r2
 800a23a:	4053      	eors	r3, r2
 800a23c:	f88d 3000 	strb.w	r3, [sp]
#ifdef MAX_LIMIT_SWITCHES
        signals.max.value ^= settings.limits.invert.mask;
#endif
    }

    return signals;
 800a240:	9b00      	ldr	r3, [sp, #0]
 800a242:	9301      	str	r3, [sp, #4]
 800a244:	2000      	movs	r0, #0
 800a246:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a24a:	f363 0007 	bfi	r0, r3, #0, #8
 800a24e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a252:	f363 200f 	bfi	r0, r3, #8, #8
 800a256:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a25a:	f363 4017 	bfi	r0, r3, #16, #8
 800a25e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a262:	f363 601f 	bfi	r0, r3, #24, #8
}
 800a266:	b002      	add	sp, #8
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	200024a8 	.word	0x200024a8
 800a270:	42400200 	.word	0x42400200
 800a274:	42408200 	.word	0x42408200

0800a278 <systemGetState>:
// Each bitfield bit indicates a control signal, where triggered is 1 and not triggered is 0.
static control_signals_t systemGetState (void)
{
    control_signals_t signals;

    signals.mask = settings.control_invert.mask;
 800a278:	4a06      	ldr	r2, [pc, #24]	@ (800a294 <systemGetState+0x1c>)
 800a27a:	f8b2 306c 	ldrh.w	r3, [r2, #108]	@ 0x6c
 800a27e:	4618      	mov	r0, r3
  #endif
#else
//    signals.value &= ~(CONTROL_MASK >> CONTROL_INMODE);
//    signals.value |= (uint16_t)((CONTROL_PORT->IDR & CONTROL_MASK) >> CONTROL_INMODE);
  #if ESTOP_ENABLE
    signals.e_stop = signals.reset;
 800a280:	f363 1086 	bfi	r0, r3, #6, #1
    signals.reset = settings.control_invert.reset;
 800a284:	f892 206c 	ldrb.w	r2, [r2, #108]	@ 0x6c
 800a288:	f362 0000 	bfi	r0, r2, #0, #1
  #endif
  #ifdef MOTOR_WARNING_PIN
    signals.motor_warning = DIGITAL_IN(MOTOR_WARNING_PORT, MOTOR_WARNING_PIN);
  #endif

    if(settings.control_invert.mask)
 800a28c:	b10b      	cbz	r3, 800a292 <systemGetState+0x1a>
        signals.value ^= settings.control_invert.mask;
 800a28e:	b280      	uxth	r0, r0
 800a290:	4058      	eors	r0, r3

#endif // AUX_CONTROLS_ENABLED


    return signals;
}
 800a292:	4770      	bx	lr
 800a294:	200024a8 	.word	0x200024a8

0800a298 <coolantSetState>:
#endif // SPINDLE_ENCODER_ENABLE

// Start/stop coolant (and mist if enabled)
static void coolantSetState (coolant_state_t mode)
{
    mode.value ^= settings.coolant_invert.mask;
 800a298:	b2c0      	uxtb	r0, r0
 800a29a:	4b08      	ldr	r3, [pc, #32]	@ (800a2bc <coolantSetState+0x24>)
 800a29c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a2a0:	4058      	eors	r0, r3
    DIGITAL_OUT(COOLANT_FLOOD_PORT, COOLANT_FLOOD_PIN, mode.flood);
 800a2a2:	f3c0 0200 	ubfx	r2, r0, #0, #1
 800a2a6:	4b06      	ldr	r3, [pc, #24]	@ (800a2c0 <coolantSetState+0x28>)
 800a2a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
#ifdef COOLANT_MIST_PIN
    DIGITAL_OUT(COOLANT_MIST_PORT, COOLANT_MIST_PIN, mode.mist);
 800a2ac:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800a2b0:	f5a3 33c0 	sub.w	r3, r3, #98304	@ 0x18000
 800a2b4:	f883 0094 	strb.w	r0, [r3, #148]	@ 0x94
#endif
}
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	200024a8 	.word	0x200024a8
 800a2c0:	42420200 	.word	0x42420200

0800a2c4 <coolantGetState>:

// Returns coolant state in a coolant_state_t variable
static coolant_state_t coolantGetState (void)
{
    coolant_state_t state = (coolant_state_t){settings.coolant_invert.mask};
 800a2c4:	4b07      	ldr	r3, [pc, #28]	@ (800a2e4 <coolantGetState+0x20>)
 800a2c6:	f893 0070 	ldrb.w	r0, [r3, #112]	@ 0x70
 800a2ca:	4603      	mov	r3, r0

    state.flood = DIGITAL_IN(COOLANT_FLOOD_PORT, COOLANT_FLOOD_PIN);
 800a2cc:	4a06      	ldr	r2, [pc, #24]	@ (800a2e8 <coolantGetState+0x24>)
 800a2ce:	7812      	ldrb	r2, [r2, #0]
 800a2d0:	f362 0300 	bfi	r3, r2, #0, #1
#ifdef COOLANT_MIST_PIN
    state.mist  = DIGITAL_IN(COOLANT_MIST_PORT, COOLANT_MIST_PIN);
 800a2d4:	4a05      	ldr	r2, [pc, #20]	@ (800a2ec <coolantGetState+0x28>)
 800a2d6:	7d12      	ldrb	r2, [r2, #20]
 800a2d8:	f362 0341 	bfi	r3, r2, #1, #1
#endif
    state.value ^= settings.coolant_invert.mask;
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	4058      	eors	r0, r3

    return state;
}
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	200024a8 	.word	0x200024a8
 800a2e8:	42420200 	.word	0x42420200
 800a2ec:	42408200 	.word	0x42408200

0800a2f0 <bitsSetAtomic>:
  __ASM volatile ("cpsid i" : : : "memory");
 800a2f0:	b672      	cpsid	i

// Helper functions for setting/clearing/inverting individual bits atomically (uninterruptable)
static void bitsSetAtomic (volatile uint_fast16_t *ptr, uint_fast16_t bits)
{
    __disable_irq();
    *ptr |= bits;
 800a2f2:	6803      	ldr	r3, [r0, #0]
 800a2f4:	4319      	orrs	r1, r3
 800a2f6:	6001      	str	r1, [r0, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a2f8:	b662      	cpsie	i
    __enable_irq();
}
 800a2fa:	4770      	bx	lr

0800a2fc <bitsClearAtomic>:

static uint_fast16_t bitsClearAtomic (volatile uint_fast16_t *ptr, uint_fast16_t bits)
{
 800a2fc:	4603      	mov	r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
 800a2fe:	b672      	cpsid	i
    __disable_irq();
    uint_fast16_t prev = *ptr;
 800a300:	6800      	ldr	r0, [r0, #0]
    *ptr &= ~bits;
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	ea22 0101 	bic.w	r1, r2, r1
 800a308:	6019      	str	r1, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a30a:	b662      	cpsie	i
    __enable_irq();

    return prev;
}
 800a30c:	4770      	bx	lr

0800a30e <valueSetAtomic>:

static uint_fast16_t valueSetAtomic (volatile uint_fast16_t *ptr, uint_fast16_t value)
{
 800a30e:	4603      	mov	r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
 800a310:	b672      	cpsid	i
    __disable_irq();
    uint_fast16_t prev = *ptr;
 800a312:	6800      	ldr	r0, [r0, #0]
    *ptr = value;
 800a314:	6019      	str	r1, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a316:	b662      	cpsie	i
    __enable_irq();

    return prev;
}
 800a318:	4770      	bx	lr
	...

0800a31c <getElapsedMicros>:

static uint64_t getElapsedMicros (void)
{
 800a31c:	b410      	push	{r4}
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31e:	4a0f      	ldr	r2, [pc, #60]	@ (800a35c <getElapsedMicros+0x40>)
 800a320:	e852 3f00 	ldrex	r3, [r2]
    uint32_t ms, cycles;
    do {
        __LDREXW(&systick_safe_read);
        ms = uwTick;
 800a324:	4b0e      	ldr	r3, [pc, #56]	@ (800a360 <getElapsedMicros+0x44>)
 800a326:	681c      	ldr	r4, [r3, #0]
        cycles = cycle_count;
 800a328:	4b0e      	ldr	r3, [pc, #56]	@ (800a364 <getElapsedMicros+0x48>)
 800a32a:	6818      	ldr	r0, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32c:	2301      	movs	r3, #1
 800a32e:	e842 3100 	strex	r1, r3, [r2]
    } while(__STREXW(1, &systick_safe_read));
 800a332:	2900      	cmp	r1, #0
 800a334:	d1f3      	bne.n	800a31e <getElapsedMicros+0x2>

    uint32_t cyccnt = DWT->CYCCNT;
 800a336:	4b0c      	ldr	r3, [pc, #48]	@ (800a368 <getElapsedMicros+0x4c>)
 800a338:	685b      	ldr	r3, [r3, #4]
    asm volatile("" : : : "memory");
    uint32_t ccdelta = cyccnt - cycles;
 800a33a:	1a18      	subs	r0, r3, r0
    uint32_t frac = ((uint64_t)ccdelta * cycles2us_factor) >> 32;
 800a33c:	4b0b      	ldr	r3, [pc, #44]	@ (800a36c <getElapsedMicros+0x50>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	fba3 3000 	umull	r3, r0, r3, r0

    return ms * 1000 + (frac > 1000 ? 1000 : frac);
 800a344:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a348:	bf28      	it	cs
 800a34a:	f44f 707a 	movcs.w	r0, #1000	@ 0x3e8
}
 800a34e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a352:	fb03 0004 	mla	r0, r3, r4, r0
 800a356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a35a:	4770      	bx	lr
 800a35c:	200007c8 	.word	0x200007c8
 800a360:	20000698 	.word	0x20000698
 800a364:	20001698 	.word	0x20001698
 800a368:	e0001000 	.word	0xe0001000
 800a36c:	200007c4 	.word	0x200007c4

0800a370 <getElapsedTicks>:

static uint32_t getElapsedTicks (void)
{
    return uwTick;
 800a370:	4b01      	ldr	r3, [pc, #4]	@ (800a378 <getElapsedTicks+0x8>)
 800a372:	6818      	ldr	r0, [r3, #0]
}
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	20000698 	.word	0x20000698

0800a37c <port2char>:

static char *port2char (GPIO_TypeDef *port)
{
    static char name[3] = "P?";

    name[1] = 'A' + GPIO_GET_INDEX(port);
 800a37c:	4b19      	ldr	r3, [pc, #100]	@ (800a3e4 <port2char+0x68>)
 800a37e:	4298      	cmp	r0, r3
 800a380:	d01f      	beq.n	800a3c2 <port2char+0x46>
 800a382:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a386:	4298      	cmp	r0, r3
 800a388:	d01f      	beq.n	800a3ca <port2char+0x4e>
 800a38a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a38e:	4298      	cmp	r0, r3
 800a390:	d01d      	beq.n	800a3ce <port2char+0x52>
 800a392:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a396:	4298      	cmp	r0, r3
 800a398:	d01b      	beq.n	800a3d2 <port2char+0x56>
 800a39a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a39e:	4298      	cmp	r0, r3
 800a3a0:	d019      	beq.n	800a3d6 <port2char+0x5a>
 800a3a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a3a6:	4298      	cmp	r0, r3
 800a3a8:	d017      	beq.n	800a3da <port2char+0x5e>
 800a3aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a3ae:	4298      	cmp	r0, r3
 800a3b0:	d015      	beq.n	800a3de <port2char+0x62>
 800a3b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a3b6:	4298      	cmp	r0, r3
 800a3b8:	d001      	beq.n	800a3be <port2char+0x42>
 800a3ba:	2349      	movs	r3, #73	@ 0x49
 800a3bc:	e002      	b.n	800a3c4 <port2char+0x48>
 800a3be:	2348      	movs	r3, #72	@ 0x48
 800a3c0:	e000      	b.n	800a3c4 <port2char+0x48>
 800a3c2:	2341      	movs	r3, #65	@ 0x41
 800a3c4:	4808      	ldr	r0, [pc, #32]	@ (800a3e8 <port2char+0x6c>)
 800a3c6:	7043      	strb	r3, [r0, #1]

    return name;
}
 800a3c8:	4770      	bx	lr
    name[1] = 'A' + GPIO_GET_INDEX(port);
 800a3ca:	2342      	movs	r3, #66	@ 0x42
 800a3cc:	e7fa      	b.n	800a3c4 <port2char+0x48>
 800a3ce:	2343      	movs	r3, #67	@ 0x43
 800a3d0:	e7f8      	b.n	800a3c4 <port2char+0x48>
 800a3d2:	2344      	movs	r3, #68	@ 0x44
 800a3d4:	e7f6      	b.n	800a3c4 <port2char+0x48>
 800a3d6:	2345      	movs	r3, #69	@ 0x45
 800a3d8:	e7f4      	b.n	800a3c4 <port2char+0x48>
 800a3da:	2346      	movs	r3, #70	@ 0x46
 800a3dc:	e7f2      	b.n	800a3c4 <port2char+0x48>
 800a3de:	2347      	movs	r3, #71	@ 0x47
 800a3e0:	e7f0      	b.n	800a3c4 <port2char+0x48>
 800a3e2:	bf00      	nop
 800a3e4:	40020000 	.word	0x40020000
 800a3e8:	20000008 	.word	0x20000008

0800a3ec <enumeratePins>:

static void enumeratePins (bool low_level, pin_info_ptr pin_info, void *data)
{
 800a3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3f0:	4606      	mov	r6, r0
 800a3f2:	460f      	mov	r7, r1
 800a3f4:	4690      	mov	r8, r2
    static xbar_t pin = {0};

    uint8_t i, id = 0;

    pin.mode.input = On;
 800a3f6:	4a53      	ldr	r2, [pc, #332]	@ (800a544 <enumeratePins+0x158>)
 800a3f8:	7d93      	ldrb	r3, [r2, #22]
 800a3fa:	f043 0301 	orr.w	r3, r3, #1
 800a3fe:	7593      	strb	r3, [r2, #22]
    uint8_t i, id = 0;
 800a400:	2500      	movs	r5, #0

    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800a402:	462c      	mov	r4, r5
 800a404:	e01f      	b.n	800a446 <enumeratePins+0x5a>
        pin.id = id++;
        pin.pin = inputpin[i].pin;
        pin.function = inputpin[i].id;
        pin.group = inputpin[i].group;
        pin.port = low_level ? (void *)inputpin[i].port : (void *)port2char(inputpin[i].port);
 800a406:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a40a:	4b4f      	ldr	r3, [pc, #316]	@ (800a548 <enumeratePins+0x15c>)
 800a40c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a410:	68d8      	ldr	r0, [r3, #12]
 800a412:	f7ff ffb3 	bl	800a37c <port2char>
 800a416:	4603      	mov	r3, r0
 800a418:	484a      	ldr	r0, [pc, #296]	@ (800a544 <enumeratePins+0x158>)
 800a41a:	6083      	str	r3, [r0, #8]
        pin.description = inputpin[i].description;
 800a41c:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800a420:	4b49      	ldr	r3, [pc, #292]	@ (800a548 <enumeratePins+0x15c>)
 800a422:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a426:	6a1b      	ldr	r3, [r3, #32]
 800a428:	60c3      	str	r3, [r0, #12]
        pin.mode.pwm = pin.group == PinGroup_SpindlePWM;
 800a42a:	6843      	ldr	r3, [r0, #4]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	bf14      	ite	ne
 800a430:	2300      	movne	r3, #0
 800a432:	2301      	moveq	r3, #1
 800a434:	7dc2      	ldrb	r2, [r0, #23]
 800a436:	f363 1204 	bfi	r2, r3, #4, #1
 800a43a:	75c2      	strb	r2, [r0, #23]

        pin_info(&pin, data);
 800a43c:	4641      	mov	r1, r8
 800a43e:	47b8      	blx	r7
    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800a440:	3401      	adds	r4, #1
 800a442:	b2e4      	uxtb	r4, r4
        pin.id = id++;
 800a444:	464d      	mov	r5, r9
    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800a446:	2c02      	cmp	r4, #2
 800a448:	d81b      	bhi.n	800a482 <enumeratePins+0x96>
        pin.id = id++;
 800a44a:	f105 0901 	add.w	r9, r5, #1
 800a44e:	fa5f f989 	uxtb.w	r9, r9
 800a452:	4b3c      	ldr	r3, [pc, #240]	@ (800a544 <enumeratePins+0x158>)
 800a454:	701d      	strb	r5, [r3, #0]
        pin.pin = inputpin[i].pin;
 800a456:	4625      	mov	r5, r4
 800a458:	493b      	ldr	r1, [pc, #236]	@ (800a548 <enumeratePins+0x15c>)
 800a45a:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a45e:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800a462:	f892 c006 	ldrb.w	ip, [r2, #6]
 800a466:	f8c3 c010 	str.w	ip, [r3, #16]
        pin.function = inputpin[i].id;
 800a46a:	f811 1020 	ldrb.w	r1, [r1, r0, lsl #2]
 800a46e:	7059      	strb	r1, [r3, #1]
        pin.group = inputpin[i].group;
 800a470:	6912      	ldr	r2, [r2, #16]
 800a472:	605a      	str	r2, [r3, #4]
        pin.port = low_level ? (void *)inputpin[i].port : (void *)port2char(inputpin[i].port);
 800a474:	2e00      	cmp	r6, #0
 800a476:	d0c6      	beq.n	800a406 <enumeratePins+0x1a>
 800a478:	4b33      	ldr	r3, [pc, #204]	@ (800a548 <enumeratePins+0x15c>)
 800a47a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	e7ca      	b.n	800a418 <enumeratePins+0x2c>
    };

    pin.mode.mask = 0;
 800a482:	4b30      	ldr	r3, [pc, #192]	@ (800a544 <enumeratePins+0x158>)
 800a484:	2400      	movs	r4, #0
 800a486:	82dc      	strh	r4, [r3, #22]
    pin.mode.output = On;
 800a488:	7d9a      	ldrb	r2, [r3, #22]
 800a48a:	f042 0202 	orr.w	r2, r2, #2
 800a48e:	759a      	strb	r2, [r3, #22]

    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800a490:	e011      	b.n	800a4b6 <enumeratePins+0xca>
        pin.id = id++;
        pin.pin = outputpin[i].pin;
        pin.function = outputpin[i].id;
        pin.group = outputpin[i].group;
        pin.port = low_level ? (void *)outputpin[i].port : (void *)port2char(outputpin[i].port);
 800a492:	4b2e      	ldr	r3, [pc, #184]	@ (800a54c <enumeratePins+0x160>)
 800a494:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	482a      	ldr	r0, [pc, #168]	@ (800a544 <enumeratePins+0x158>)
 800a49c:	6083      	str	r3, [r0, #8]
        pin.description = outputpin[i].description;
 800a49e:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 800a4a2:	4b2a      	ldr	r3, [pc, #168]	@ (800a54c <enumeratePins+0x160>)
 800a4a4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a4a8:	695b      	ldr	r3, [r3, #20]
 800a4aa:	60c3      	str	r3, [r0, #12]

        pin_info(&pin, data);
 800a4ac:	4641      	mov	r1, r8
 800a4ae:	47b8      	blx	r7
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800a4b0:	3401      	adds	r4, #1
 800a4b2:	b2e4      	uxtb	r4, r4
        pin.id = id++;
 800a4b4:	464d      	mov	r5, r9
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800a4b6:	2c07      	cmp	r4, #7
 800a4b8:	d820      	bhi.n	800a4fc <enumeratePins+0x110>
        pin.id = id++;
 800a4ba:	f105 0901 	add.w	r9, r5, #1
 800a4be:	fa5f f989 	uxtb.w	r9, r9
 800a4c2:	4b20      	ldr	r3, [pc, #128]	@ (800a544 <enumeratePins+0x158>)
 800a4c4:	701d      	strb	r5, [r3, #0]
        pin.pin = outputpin[i].pin;
 800a4c6:	4625      	mov	r5, r4
 800a4c8:	4920      	ldr	r1, [pc, #128]	@ (800a54c <enumeratePins+0x160>)
 800a4ca:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800a4ce:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800a4d2:	f892 c008 	ldrb.w	ip, [r2, #8]
 800a4d6:	f8c3 c010 	str.w	ip, [r3, #16]
        pin.function = outputpin[i].id;
 800a4da:	f811 1020 	ldrb.w	r1, [r1, r0, lsl #2]
 800a4de:	7059      	strb	r1, [r3, #1]
        pin.group = outputpin[i].group;
 800a4e0:	68d2      	ldr	r2, [r2, #12]
 800a4e2:	605a      	str	r2, [r3, #4]
        pin.port = low_level ? (void *)outputpin[i].port : (void *)port2char(outputpin[i].port);
 800a4e4:	2e00      	cmp	r6, #0
 800a4e6:	d1d4      	bne.n	800a492 <enumeratePins+0xa6>
 800a4e8:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800a4ec:	4b17      	ldr	r3, [pc, #92]	@ (800a54c <enumeratePins+0x160>)
 800a4ee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a4f2:	6858      	ldr	r0, [r3, #4]
 800a4f4:	f7ff ff42 	bl	800a37c <port2char>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	e7ce      	b.n	800a49a <enumeratePins+0xae>
    };

    periph_signal_t *ppin = periph_pins;
 800a4fc:	4b14      	ldr	r3, [pc, #80]	@ (800a550 <enumeratePins+0x164>)
 800a4fe:	681c      	ldr	r4, [r3, #0]

    if(ppin) do {
 800a500:	b984      	cbnz	r4, 800a524 <enumeratePins+0x138>
        pin.mode = ppin->pin.mode;
        pin.description = ppin->pin.description;

        pin_info(&pin, data);
    } while((ppin = ppin->next));
}
 800a502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        pin.port = low_level ? ppin->pin.port : (void *)port2char(ppin->pin.port);
 800a506:	68a0      	ldr	r0, [r4, #8]
 800a508:	f7ff ff38 	bl	800a37c <port2char>
 800a50c:	4603      	mov	r3, r0
 800a50e:	480d      	ldr	r0, [pc, #52]	@ (800a544 <enumeratePins+0x158>)
 800a510:	6083      	str	r3, [r0, #8]
        pin.mode = ppin->pin.mode;
 800a512:	8a23      	ldrh	r3, [r4, #16]
 800a514:	82c3      	strh	r3, [r0, #22]
        pin.description = ppin->pin.description;
 800a516:	6963      	ldr	r3, [r4, #20]
 800a518:	60c3      	str	r3, [r0, #12]
        pin_info(&pin, data);
 800a51a:	4641      	mov	r1, r8
 800a51c:	47b8      	blx	r7
    } while((ppin = ppin->next));
 800a51e:	69a4      	ldr	r4, [r4, #24]
 800a520:	2c00      	cmp	r4, #0
 800a522:	d0ee      	beq.n	800a502 <enumeratePins+0x116>
        pin.id = id++;
 800a524:	462a      	mov	r2, r5
 800a526:	3501      	adds	r5, #1
 800a528:	b2ed      	uxtb	r5, r5
 800a52a:	4b06      	ldr	r3, [pc, #24]	@ (800a544 <enumeratePins+0x158>)
 800a52c:	701a      	strb	r2, [r3, #0]
        pin.pin = ppin->pin.pin;
 800a52e:	68e2      	ldr	r2, [r4, #12]
 800a530:	611a      	str	r2, [r3, #16]
        pin.function = ppin->pin.function;
 800a532:	7822      	ldrb	r2, [r4, #0]
 800a534:	705a      	strb	r2, [r3, #1]
        pin.group = ppin->pin.group;
 800a536:	6862      	ldr	r2, [r4, #4]
 800a538:	605a      	str	r2, [r3, #4]
        pin.port = low_level ? ppin->pin.port : (void *)port2char(ppin->pin.port);
 800a53a:	2e00      	cmp	r6, #0
 800a53c:	d0e3      	beq.n	800a506 <enumeratePins+0x11a>
 800a53e:	68a3      	ldr	r3, [r4, #8]
 800a540:	e7e5      	b.n	800a50e <enumeratePins+0x122>
 800a542:	bf00      	nop
 800a544:	20000720 	.word	0x20000720
 800a548:	200000f4 	.word	0x200000f4
 800a54c:	20000014 	.word	0x20000014
 800a550:	200007cc 	.word	0x200007cc

0800a554 <setPeriphPinDescription>:
    }
}

void setPeriphPinDescription (const pin_function_t function, const pin_group_t group, const char *description)
{
    periph_signal_t *ppin = periph_pins;
 800a554:	4b0e      	ldr	r3, [pc, #56]	@ (800a590 <setPeriphPinDescription+0x3c>)
 800a556:	681b      	ldr	r3, [r3, #0]

    if(ppin) do {
 800a558:	b943      	cbnz	r3, 800a56c <setPeriphPinDescription+0x18>
 800a55a:	4770      	bx	lr
        if(ppin->pin.function == function && ppin->pin.group == group) {
            ppin->pin.description = description;
 800a55c:	615a      	str	r2, [r3, #20]
            ppin = NULL;
 800a55e:	2300      	movs	r3, #0
 800a560:	e00d      	b.n	800a57e <setPeriphPinDescription+0x2a>
        } else
            ppin = ppin->next;
    } while(ppin);
}
 800a562:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a566:	4770      	bx	lr
            ppin = ppin->next;
 800a568:	699b      	ldr	r3, [r3, #24]
    } while(ppin);
 800a56a:	b17b      	cbz	r3, 800a58c <setPeriphPinDescription+0x38>
        if(ppin->pin.function == function && ppin->pin.group == group) {
 800a56c:	f893 c000 	ldrb.w	ip, [r3]
 800a570:	4584      	cmp	ip, r0
 800a572:	d1f9      	bne.n	800a568 <setPeriphPinDescription+0x14>
{
 800a574:	b410      	push	{r4}
        if(ppin->pin.function == function && ppin->pin.group == group) {
 800a576:	685c      	ldr	r4, [r3, #4]
 800a578:	428c      	cmp	r4, r1
 800a57a:	d0ef      	beq.n	800a55c <setPeriphPinDescription+0x8>
            ppin = ppin->next;
 800a57c:	699b      	ldr	r3, [r3, #24]
    } while(ppin);
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d0ef      	beq.n	800a562 <setPeriphPinDescription+0xe>
        if(ppin->pin.function == function && ppin->pin.group == group) {
 800a582:	f893 c000 	ldrb.w	ip, [r3]
 800a586:	4584      	cmp	ip, r0
 800a588:	d1f8      	bne.n	800a57c <setPeriphPinDescription+0x28>
 800a58a:	e7f4      	b.n	800a576 <setPeriphPinDescription+0x22>
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	200007cc 	.word	0x200007cc

0800a594 <settings_changed>:
    if(IOInitDone) {
 800a594:	4bbe      	ldr	r3, [pc, #760]	@ (800a890 <settings_changed+0x2fc>)
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f000 8398 	beq.w	800acce <settings_changed+0x73a>
{
 800a59e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5a0:	b087      	sub	sp, #28
 800a5a2:	4605      	mov	r5, r0
        GPIO_InitTypeDef GPIO_Init = {
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	9301      	str	r3, [sp, #4]
 800a5a8:	9302      	str	r3, [sp, #8]
 800a5aa:	9303      	str	r3, [sp, #12]
 800a5ac:	9304      	str	r3, [sp, #16]
 800a5ae:	9305      	str	r3, [sp, #20]
 800a5b0:	2302      	movs	r3, #2
 800a5b2:	9304      	str	r3, [sp, #16]
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 800a5b4:	48b7      	ldr	r0, [pc, #732]	@ (800a894 <settings_changed+0x300>)
 800a5b6:	f890 30e8 	ldrb.w	r3, [r0, #232]	@ 0xe8
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 800a5ba:	f3c3 0100 	ubfx	r1, r3, #0, #1
 800a5be:	4ab6      	ldr	r2, [pc, #728]	@ (800a898 <settings_changed+0x304>)
 800a5c0:	f882 10b4 	strb.w	r1, [r2, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 800a5c4:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800a5c8:	f882 10ac 	strb.w	r1, [r2, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 800a5cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a5d0:	49b2      	ldr	r1, [pc, #712]	@ (800a89c <settings_changed+0x308>)
 800a5d2:	f881 3088 	strb.w	r3, [r1, #136]	@ 0x88
    dir_outbits.mask ^= settings.steppers.dir_invert.mask;
 800a5d6:	f890 30e9 	ldrb.w	r3, [r0, #233]	@ 0xe9
    DIGITAL_OUT(X_DIRECTION_PORT, X_DIRECTION_PIN, dir_outbits.x);
 800a5da:	f3c3 0000 	ubfx	r0, r3, #0, #1
 800a5de:	f882 00b0 	strb.w	r0, [r2, #176]	@ 0xb0
    DIGITAL_OUT(Y_DIRECTION_PORT, Y_DIRECTION_PIN, dir_outbits.y);
 800a5e2:	f3c3 0040 	ubfx	r0, r3, #1, #1
 800a5e6:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 800a5ea:	f882 00bc 	strb.w	r0, [r2, #188]	@ 0xbc
    DIGITAL_OUT(Z_DIRECTION_PORT, Z_DIRECTION_PIN, dir_outbits.z);
 800a5ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a5f2:	f881 308c 	strb.w	r3, [r1, #140]	@ 0x8c
        pulse_length = (uint32_t)(10.0f * (settings->steppers.pulse_microseconds - STEP_PULSE_LATENCY)) - 1;
 800a5f6:	edd5 7a3c 	vldr	s15, [r5, #240]	@ 0xf0
 800a5fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a5fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a602:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800a606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a60a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a60e:	ee17 3a90 	vmov	r3, s15
 800a612:	3b01      	subs	r3, #1
 800a614:	4aa2      	ldr	r2, [pc, #648]	@ (800a8a0 <settings_changed+0x30c>)
 800a616:	6013      	str	r3, [r2, #0]
        if(hal.driver_cap.step_pulse_delay && settings->steppers.pulse_delay_microseconds > 0.0f) {
 800a618:	4aa2      	ldr	r2, [pc, #648]	@ (800a8a4 <settings_changed+0x310>)
 800a61a:	f892 21d8 	ldrb.w	r2, [r2, #472]	@ 0x1d8
 800a61e:	f012 0f02 	tst.w	r2, #2
 800a622:	d025      	beq.n	800a670 <settings_changed+0xdc>
 800a624:	edd5 7a3d 	vldr	s15, [r5, #244]	@ 0xf4
 800a628:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a630:	dd1e      	ble.n	800a670 <settings_changed+0xdc>
            pulse_delay = (uint32_t)(10.0f * (settings->steppers.pulse_delay_microseconds - 1.0f));
 800a632:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a636:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a63a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800a63e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a646:	ee17 2a90 	vmov	r2, s15
 800a64a:	4997      	ldr	r1, [pc, #604]	@ (800a8a8 <settings_changed+0x314>)
 800a64c:	edc1 7a00 	vstr	s15, [r1]
            if(pulse_delay < 2)
 800a650:	2a01      	cmp	r2, #1
 800a652:	d905      	bls.n	800a660 <settings_changed+0xcc>
            else if(pulse_delay == pulse_length)
 800a654:	4293      	cmp	r3, r2
 800a656:	d106      	bne.n	800a666 <settings_changed+0xd2>
                pulse_delay++;
 800a658:	3201      	adds	r2, #1
 800a65a:	4993      	ldr	r1, [pc, #588]	@ (800a8a8 <settings_changed+0x314>)
 800a65c:	600a      	str	r2, [r1, #0]
 800a65e:	e002      	b.n	800a666 <settings_changed+0xd2>
                pulse_delay = 2;
 800a660:	460a      	mov	r2, r1
 800a662:	2102      	movs	r1, #2
 800a664:	6011      	str	r1, [r2, #0]
            hal.stepper.pulse_start = &stepperPulseStartDelayed;
 800a666:	4a8f      	ldr	r2, [pc, #572]	@ (800a8a4 <settings_changed+0x310>)
 800a668:	4990      	ldr	r1, [pc, #576]	@ (800a8ac <settings_changed+0x318>)
 800a66a:	f8c2 1094 	str.w	r1, [r2, #148]	@ 0x94
 800a66e:	e006      	b.n	800a67e <settings_changed+0xea>
            pulse_delay = 0;
 800a670:	4a8d      	ldr	r2, [pc, #564]	@ (800a8a8 <settings_changed+0x314>)
 800a672:	2100      	movs	r1, #0
 800a674:	6011      	str	r1, [r2, #0]
            hal.stepper.pulse_start = &stepperPulseStart;
 800a676:	4a8b      	ldr	r2, [pc, #556]	@ (800a8a4 <settings_changed+0x310>)
 800a678:	498d      	ldr	r1, [pc, #564]	@ (800a8b0 <settings_changed+0x31c>)
 800a67a:	f8c2 1094 	str.w	r1, [r2, #148]	@ 0x94
        PULSE_TIMER->ARR = pulse_length;
 800a67e:	4a8d      	ldr	r2, [pc, #564]	@ (800a8b4 <settings_changed+0x320>)
 800a680:	62d3      	str	r3, [r2, #44]	@ 0x2c
        PULSE_TIMER->EGR = TIM_EGR_UG;
 800a682:	2301      	movs	r3, #1
 800a684:	6153      	str	r3, [r2, #20]
        HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800a686:	2028      	movs	r0, #40	@ 0x28
 800a688:	f7fe fcd4 	bl	8009034 <HAL_NVIC_DisableIRQ>
        control_fei.mask = settings->control_disable_pullup.mask ^ settings->control_invert.mask;
 800a68c:	f8b5 706e 	ldrh.w	r7, [r5, #110]	@ 0x6e
 800a690:	f8b5 306c 	ldrh.w	r3, [r5, #108]	@ 0x6c
 800a694:	405f      	eors	r7, r3
        limit_fei.mask = settings->limits.disable_pullup.mask ^ settings->limits.invert.mask;
 800a696:	f895 6126 	ldrb.w	r6, [r5, #294]	@ 0x126
 800a69a:	f895 3125 	ldrb.w	r3, [r5, #293]	@ 0x125
 800a69e:	405e      	eors	r6, r3
        uint32_t i = sizeof(inputpin) / sizeof(input_signal_t);
 800a6a0:	2403      	movs	r4, #3
 800a6a2:	e224      	b.n	800aaee <settings_changed+0x55a>
            switch(input->id) {
 800a6a4:	2b99      	cmp	r3, #153	@ 0x99
 800a6a6:	d12b      	bne.n	800a700 <settings_changed+0x16c>
                    input->mode.pull_mode = true;
 800a6a8:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a6ac:	4b82      	ldr	r3, [pc, #520]	@ (800a8b8 <settings_changed+0x324>)
 800a6ae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a6b2:	7919      	ldrb	r1, [r3, #4]
 800a6b4:	2001      	movs	r0, #1
 800a6b6:	f360 01c4 	bfi	r1, r0, #3, #2
 800a6ba:	7119      	strb	r1, [r3, #4]
                    input->mode.irq_mode = IRQ_Mode_Falling;
 800a6bc:	8899      	ldrh	r1, [r3, #4]
 800a6be:	2002      	movs	r0, #2
 800a6c0:	f360 1149 	bfi	r1, r0, #5, #5
 800a6c4:	8099      	strh	r1, [r3, #4]
                    break;
 800a6c6:	e01b      	b.n	800a700 <settings_changed+0x16c>
                    input->mode.pull_mode = settings->control_disable_pullup.reset ? PullMode_None : PullMode_Up;
 800a6c8:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a6cc:	f083 0301 	eor.w	r3, r3, #1
 800a6d0:	f003 0301 	and.w	r3, r3, #1
 800a6d4:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a6d8:	4977      	ldr	r1, [pc, #476]	@ (800a8b8 <settings_changed+0x324>)
 800a6da:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a6de:	7908      	ldrb	r0, [r1, #4]
 800a6e0:	f363 00c4 	bfi	r0, r3, #3, #2
 800a6e4:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.reset ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a6e6:	f017 0f01 	tst.w	r7, #1
 800a6ea:	d030      	beq.n	800a74e <settings_changed+0x1ba>
 800a6ec:	2002      	movs	r0, #2
 800a6ee:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a6f2:	4b71      	ldr	r3, [pc, #452]	@ (800a8b8 <settings_changed+0x324>)
 800a6f4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a6f8:	8899      	ldrh	r1, [r3, #4]
 800a6fa:	f360 1149 	bfi	r1, r0, #5, #5
 800a6fe:	8099      	strh	r1, [r3, #4]
            if(input->group == PinGroup_AuxInput) {
 800a700:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800a704:	f000 818a 	beq.w	800aa1c <settings_changed+0x488>
            GPIO_Init.Pin = input->bit;
 800a708:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a70c:	4b6a      	ldr	r3, [pc, #424]	@ (800a8b8 <settings_changed+0x324>)
 800a70e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a712:	689a      	ldr	r2, [r3, #8]
 800a714:	9201      	str	r2, [sp, #4]
            GPIO_Init.Pull = input->mode.pull_mode == PullMode_Up ? GPIO_PULLUP : GPIO_NOPULL;
 800a716:	791b      	ldrb	r3, [r3, #4]
 800a718:	f003 0318 	and.w	r3, r3, #24
 800a71c:	2b08      	cmp	r3, #8
 800a71e:	f000 81d6 	beq.w	800aace <settings_changed+0x53a>
 800a722:	2300      	movs	r3, #0
 800a724:	9303      	str	r3, [sp, #12]
            switch(input->mode.irq_mode) {
 800a726:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a72a:	4b63      	ldr	r3, [pc, #396]	@ (800a8b8 <settings_changed+0x324>)
 800a72c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a730:	889b      	ldrh	r3, [r3, #4]
 800a732:	f3c3 1344 	ubfx	r3, r3, #5, #5
 800a736:	2b02      	cmp	r3, #2
 800a738:	f000 8262 	beq.w	800ac00 <settings_changed+0x66c>
 800a73c:	2b04      	cmp	r3, #4
 800a73e:	f000 8262 	beq.w	800ac06 <settings_changed+0x672>
 800a742:	2b01      	cmp	r3, #1
 800a744:	f000 81c5 	beq.w	800aad2 <settings_changed+0x53e>
                    GPIO_Init.Mode = GPIO_MODE_INPUT;
 800a748:	2300      	movs	r3, #0
 800a74a:	9302      	str	r3, [sp, #8]
                    break;
 800a74c:	e1c3      	b.n	800aad6 <settings_changed+0x542>
                    input->mode.irq_mode = control_fei.reset ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a74e:	2001      	movs	r0, #1
 800a750:	e7cd      	b.n	800a6ee <settings_changed+0x15a>
                    input->mode.pull_mode = settings->control_disable_pullup.e_stop ? PullMode_None : PullMode_Up;
 800a752:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a756:	099b      	lsrs	r3, r3, #6
 800a758:	f083 0301 	eor.w	r3, r3, #1
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a764:	4954      	ldr	r1, [pc, #336]	@ (800a8b8 <settings_changed+0x324>)
 800a766:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a76a:	7908      	ldrb	r0, [r1, #4]
 800a76c:	f363 00c4 	bfi	r0, r3, #3, #2
 800a770:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.e_stop ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a772:	f017 0f40 	tst.w	r7, #64	@ 0x40
 800a776:	d00a      	beq.n	800a78e <settings_changed+0x1fa>
 800a778:	2002      	movs	r0, #2
 800a77a:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a77e:	4b4e      	ldr	r3, [pc, #312]	@ (800a8b8 <settings_changed+0x324>)
 800a780:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a784:	8899      	ldrh	r1, [r3, #4]
 800a786:	f360 1149 	bfi	r1, r0, #5, #5
 800a78a:	8099      	strh	r1, [r3, #4]
                    break;
 800a78c:	e7b8      	b.n	800a700 <settings_changed+0x16c>
                    input->mode.irq_mode = control_fei.e_stop ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a78e:	2001      	movs	r0, #1
 800a790:	e7f3      	b.n	800a77a <settings_changed+0x1e6>
                    input->mode.pull_mode = settings->control_disable_pullup.feed_hold ? PullMode_None : PullMode_Up;
 800a792:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a796:	085b      	lsrs	r3, r3, #1
 800a798:	f083 0301 	eor.w	r3, r3, #1
 800a79c:	f003 0301 	and.w	r3, r3, #1
 800a7a0:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a7a4:	4944      	ldr	r1, [pc, #272]	@ (800a8b8 <settings_changed+0x324>)
 800a7a6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a7aa:	7908      	ldrb	r0, [r1, #4]
 800a7ac:	f363 00c4 	bfi	r0, r3, #3, #2
 800a7b0:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.feed_hold ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a7b2:	f017 0f02 	tst.w	r7, #2
 800a7b6:	d00a      	beq.n	800a7ce <settings_changed+0x23a>
 800a7b8:	2002      	movs	r0, #2
 800a7ba:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a7be:	4b3e      	ldr	r3, [pc, #248]	@ (800a8b8 <settings_changed+0x324>)
 800a7c0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a7c4:	8899      	ldrh	r1, [r3, #4]
 800a7c6:	f360 1149 	bfi	r1, r0, #5, #5
 800a7ca:	8099      	strh	r1, [r3, #4]
                    break;
 800a7cc:	e798      	b.n	800a700 <settings_changed+0x16c>
                    input->mode.irq_mode = control_fei.feed_hold ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	e7f3      	b.n	800a7ba <settings_changed+0x226>
                    input->mode.pull_mode = settings->control_disable_pullup.cycle_start ? PullMode_None : PullMode_Up;
 800a7d2:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a7d6:	089b      	lsrs	r3, r3, #2
 800a7d8:	f083 0301 	eor.w	r3, r3, #1
 800a7dc:	f003 0301 	and.w	r3, r3, #1
 800a7e0:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a7e4:	4934      	ldr	r1, [pc, #208]	@ (800a8b8 <settings_changed+0x324>)
 800a7e6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a7ea:	7908      	ldrb	r0, [r1, #4]
 800a7ec:	f363 00c4 	bfi	r0, r3, #3, #2
 800a7f0:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.cycle_start ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a7f2:	f017 0f04 	tst.w	r7, #4
 800a7f6:	d00a      	beq.n	800a80e <settings_changed+0x27a>
 800a7f8:	2002      	movs	r0, #2
 800a7fa:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a7fe:	4b2e      	ldr	r3, [pc, #184]	@ (800a8b8 <settings_changed+0x324>)
 800a800:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a804:	8899      	ldrh	r1, [r3, #4]
 800a806:	f360 1149 	bfi	r1, r0, #5, #5
 800a80a:	8099      	strh	r1, [r3, #4]
                    break;
 800a80c:	e778      	b.n	800a700 <settings_changed+0x16c>
                    input->mode.irq_mode = control_fei.cycle_start ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a80e:	2001      	movs	r0, #1
 800a810:	e7f3      	b.n	800a7fa <settings_changed+0x266>
                    input->mode.pull_mode = settings->control_disable_pullup.safety_door_ajar ? PullMode_None : PullMode_Up;
 800a812:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a816:	08db      	lsrs	r3, r3, #3
 800a818:	f083 0301 	eor.w	r3, r3, #1
 800a81c:	f003 0301 	and.w	r3, r3, #1
 800a820:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a824:	4924      	ldr	r1, [pc, #144]	@ (800a8b8 <settings_changed+0x324>)
 800a826:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a82a:	7908      	ldrb	r0, [r1, #4]
 800a82c:	f363 00c4 	bfi	r0, r3, #3, #2
 800a830:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.safety_door_ajar ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a832:	f017 0f08 	tst.w	r7, #8
 800a836:	d00a      	beq.n	800a84e <settings_changed+0x2ba>
 800a838:	2002      	movs	r0, #2
 800a83a:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a83e:	4b1e      	ldr	r3, [pc, #120]	@ (800a8b8 <settings_changed+0x324>)
 800a840:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a844:	8899      	ldrh	r1, [r3, #4]
 800a846:	f360 1149 	bfi	r1, r0, #5, #5
 800a84a:	8099      	strh	r1, [r3, #4]
                    break;
 800a84c:	e758      	b.n	800a700 <settings_changed+0x16c>
                    input->mode.irq_mode = control_fei.safety_door_ajar ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a84e:	2001      	movs	r0, #1
 800a850:	e7f3      	b.n	800a83a <settings_changed+0x2a6>
                    input->mode.pull_mode = settings->limits.disable_pullup.x ? PullMode_None : PullMode_Up;
 800a852:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a856:	f083 0301 	eor.w	r3, r3, #1
 800a85a:	f003 0301 	and.w	r3, r3, #1
 800a85e:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a862:	4915      	ldr	r1, [pc, #84]	@ (800a8b8 <settings_changed+0x324>)
 800a864:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a868:	7908      	ldrb	r0, [r1, #4]
 800a86a:	f363 00c4 	bfi	r0, r3, #3, #2
 800a86e:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.x ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a870:	f016 0f01 	tst.w	r6, #1
 800a874:	d00a      	beq.n	800a88c <settings_changed+0x2f8>
 800a876:	2002      	movs	r0, #2
 800a878:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a87c:	4b0e      	ldr	r3, [pc, #56]	@ (800a8b8 <settings_changed+0x324>)
 800a87e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a882:	8899      	ldrh	r1, [r3, #4]
 800a884:	f360 1149 	bfi	r1, r0, #5, #5
 800a888:	8099      	strh	r1, [r3, #4]
                    break;
 800a88a:	e739      	b.n	800a700 <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.x ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a88c:	2001      	movs	r0, #1
 800a88e:	e7f3      	b.n	800a878 <settings_changed+0x2e4>
 800a890:	200007b4 	.word	0x200007b4
 800a894:	200024a8 	.word	0x200024a8
 800a898:	42418200 	.word	0x42418200
 800a89c:	42420200 	.word	0x42420200
 800a8a0:	200007c0 	.word	0x200007c0
 800a8a4:	20001a90 	.word	0x20001a90
 800a8a8:	200007bc 	.word	0x200007bc
 800a8ac:	0800a155 	.word	0x0800a155
 800a8b0:	0800a0dd 	.word	0x0800a0dd
 800a8b4:	40000800 	.word	0x40000800
 800a8b8:	200000f4 	.word	0x200000f4
                    input->mode.pull_mode = settings->limits.disable_pullup.y ? PullMode_None : PullMode_Up;
 800a8bc:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a8c0:	085b      	lsrs	r3, r3, #1
 800a8c2:	f083 0301 	eor.w	r3, r3, #1
 800a8c6:	f003 0301 	and.w	r3, r3, #1
 800a8ca:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a8ce:	49c8      	ldr	r1, [pc, #800]	@ (800abf0 <settings_changed+0x65c>)
 800a8d0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a8d4:	7908      	ldrb	r0, [r1, #4]
 800a8d6:	f363 00c4 	bfi	r0, r3, #3, #2
 800a8da:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.y ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a8dc:	f016 0f02 	tst.w	r6, #2
 800a8e0:	d00a      	beq.n	800a8f8 <settings_changed+0x364>
 800a8e2:	2002      	movs	r0, #2
 800a8e4:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a8e8:	4bc1      	ldr	r3, [pc, #772]	@ (800abf0 <settings_changed+0x65c>)
 800a8ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a8ee:	8899      	ldrh	r1, [r3, #4]
 800a8f0:	f360 1149 	bfi	r1, r0, #5, #5
 800a8f4:	8099      	strh	r1, [r3, #4]
                    break;
 800a8f6:	e703      	b.n	800a700 <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.y ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a8f8:	2001      	movs	r0, #1
 800a8fa:	e7f3      	b.n	800a8e4 <settings_changed+0x350>
                    input->mode.pull_mode = settings->limits.disable_pullup.z ? PullMode_None : PullMode_Up;
 800a8fc:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a900:	089b      	lsrs	r3, r3, #2
 800a902:	f083 0301 	eor.w	r3, r3, #1
 800a906:	f003 0301 	and.w	r3, r3, #1
 800a90a:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a90e:	49b8      	ldr	r1, [pc, #736]	@ (800abf0 <settings_changed+0x65c>)
 800a910:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a914:	7908      	ldrb	r0, [r1, #4]
 800a916:	f363 00c4 	bfi	r0, r3, #3, #2
 800a91a:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.z ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a91c:	f016 0f04 	tst.w	r6, #4
 800a920:	d00a      	beq.n	800a938 <settings_changed+0x3a4>
 800a922:	2002      	movs	r0, #2
 800a924:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a928:	4bb1      	ldr	r3, [pc, #708]	@ (800abf0 <settings_changed+0x65c>)
 800a92a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a92e:	8899      	ldrh	r1, [r3, #4]
 800a930:	f360 1149 	bfi	r1, r0, #5, #5
 800a934:	8099      	strh	r1, [r3, #4]
                    break;
 800a936:	e6e3      	b.n	800a700 <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.z ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a938:	2001      	movs	r0, #1
 800a93a:	e7f3      	b.n	800a924 <settings_changed+0x390>
                    input->mode.pull_mode = settings->limits.disable_pullup.a ? PullMode_None : PullMode_Up;
 800a93c:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a940:	08db      	lsrs	r3, r3, #3
 800a942:	f083 0301 	eor.w	r3, r3, #1
 800a946:	f003 0301 	and.w	r3, r3, #1
 800a94a:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a94e:	49a8      	ldr	r1, [pc, #672]	@ (800abf0 <settings_changed+0x65c>)
 800a950:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a954:	7908      	ldrb	r0, [r1, #4]
 800a956:	f363 00c4 	bfi	r0, r3, #3, #2
 800a95a:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.a ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a95c:	f016 0f08 	tst.w	r6, #8
 800a960:	d00a      	beq.n	800a978 <settings_changed+0x3e4>
 800a962:	2002      	movs	r0, #2
 800a964:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a968:	4ba1      	ldr	r3, [pc, #644]	@ (800abf0 <settings_changed+0x65c>)
 800a96a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a96e:	8899      	ldrh	r1, [r3, #4]
 800a970:	f360 1149 	bfi	r1, r0, #5, #5
 800a974:	8099      	strh	r1, [r3, #4]
                    break;
 800a976:	e6c3      	b.n	800a700 <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.a ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a978:	2001      	movs	r0, #1
 800a97a:	e7f3      	b.n	800a964 <settings_changed+0x3d0>
                    input->mode.pull_mode = settings->limits.disable_pullup.b ? PullMode_None : PullMode_Up;
 800a97c:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a980:	091b      	lsrs	r3, r3, #4
 800a982:	f083 0301 	eor.w	r3, r3, #1
 800a986:	f003 0301 	and.w	r3, r3, #1
 800a98a:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a98e:	4998      	ldr	r1, [pc, #608]	@ (800abf0 <settings_changed+0x65c>)
 800a990:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a994:	7908      	ldrb	r0, [r1, #4]
 800a996:	f363 00c4 	bfi	r0, r3, #3, #2
 800a99a:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.b ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a99c:	f016 0f10 	tst.w	r6, #16
 800a9a0:	d00a      	beq.n	800a9b8 <settings_changed+0x424>
 800a9a2:	2002      	movs	r0, #2
 800a9a4:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a9a8:	4b91      	ldr	r3, [pc, #580]	@ (800abf0 <settings_changed+0x65c>)
 800a9aa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a9ae:	8899      	ldrh	r1, [r3, #4]
 800a9b0:	f360 1149 	bfi	r1, r0, #5, #5
 800a9b4:	8099      	strh	r1, [r3, #4]
                    break;
 800a9b6:	e6a3      	b.n	800a700 <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.b ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a9b8:	2001      	movs	r0, #1
 800a9ba:	e7f3      	b.n	800a9a4 <settings_changed+0x410>
                    input->mode.pull_mode = settings->limits.disable_pullup.c ? PullMode_None : PullMode_Up;
 800a9bc:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a9c0:	095b      	lsrs	r3, r3, #5
 800a9c2:	f083 0301 	eor.w	r3, r3, #1
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a9ce:	4988      	ldr	r1, [pc, #544]	@ (800abf0 <settings_changed+0x65c>)
 800a9d0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a9d4:	7908      	ldrb	r0, [r1, #4]
 800a9d6:	f363 00c4 	bfi	r0, r3, #3, #2
 800a9da:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.c ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a9dc:	f016 0f20 	tst.w	r6, #32
 800a9e0:	d00a      	beq.n	800a9f8 <settings_changed+0x464>
 800a9e2:	2002      	movs	r0, #2
 800a9e4:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a9e8:	4b81      	ldr	r3, [pc, #516]	@ (800abf0 <settings_changed+0x65c>)
 800a9ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a9ee:	8899      	ldrh	r1, [r3, #4]
 800a9f0:	f360 1149 	bfi	r1, r0, #5, #5
 800a9f4:	8099      	strh	r1, [r3, #4]
                    break;
 800a9f6:	e683      	b.n	800a700 <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.c ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a9f8:	2001      	movs	r0, #1
 800a9fa:	e7f3      	b.n	800a9e4 <settings_changed+0x450>
                    input->mode.pull_mode = true;
 800a9fc:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800aa00:	4b7b      	ldr	r3, [pc, #492]	@ (800abf0 <settings_changed+0x65c>)
 800aa02:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800aa06:	7919      	ldrb	r1, [r3, #4]
 800aa08:	2001      	movs	r0, #1
 800aa0a:	f360 01c4 	bfi	r1, r0, #3, #2
 800aa0e:	7119      	strb	r1, [r3, #4]
                    input->mode.irq_mode = IRQ_Mode_Falling;
 800aa10:	8899      	ldrh	r1, [r3, #4]
 800aa12:	2002      	movs	r0, #2
 800aa14:	f360 1149 	bfi	r1, r0, #5, #5
 800aa18:	8099      	strh	r1, [r3, #4]
                    break;
 800aa1a:	e671      	b.n	800a700 <settings_changed+0x16c>
                if(input->cap.irq_mode != IRQ_Mode_None) {
 800aa1c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800aa20:	4b73      	ldr	r3, [pc, #460]	@ (800abf0 <settings_changed+0x65c>)
 800aa22:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800aa26:	885b      	ldrh	r3, [r3, #2]
 800aa28:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f43f ae6b 	beq.w	800a708 <settings_changed+0x174>
                    uint32_t extireg = SYSCFG->EXTICR[input->pin >> 2] & ~(0b1111 << ((input->pin & 0b11) << 2));
 800aa32:	4613      	mov	r3, r2
 800aa34:	4a6e      	ldr	r2, [pc, #440]	@ (800abf0 <settings_changed+0x65c>)
 800aa36:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800aa3a:	7993      	ldrb	r3, [r2, #6]
 800aa3c:	0899      	lsrs	r1, r3, #2
 800aa3e:	f101 0c02 	add.w	ip, r1, #2
 800aa42:	486c      	ldr	r0, [pc, #432]	@ (800abf4 <settings_changed+0x660>)
 800aa44:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	f003 030c 	and.w	r3, r3, #12
 800aa4e:	f04f 0c0f 	mov.w	ip, #15
 800aa52:	fa0c fc03 	lsl.w	ip, ip, r3
 800aa56:	ea20 000c 	bic.w	r0, r0, ip
                    extireg |= ((uint32_t)(GPIO_GET_INDEX(input->port)) << ((input->pin & 0b11) << 2));
 800aa5a:	68d2      	ldr	r2, [r2, #12]
 800aa5c:	f8df c19c 	ldr.w	ip, [pc, #412]	@ 800abfc <settings_changed+0x668>
 800aa60:	4562      	cmp	r2, ip
 800aa62:	d01f      	beq.n	800aaa4 <settings_changed+0x510>
 800aa64:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800aa68:	4562      	cmp	r2, ip
 800aa6a:	d024      	beq.n	800aab6 <settings_changed+0x522>
 800aa6c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800aa70:	4562      	cmp	r2, ip
 800aa72:	d022      	beq.n	800aaba <settings_changed+0x526>
 800aa74:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800aa78:	4562      	cmp	r2, ip
 800aa7a:	d020      	beq.n	800aabe <settings_changed+0x52a>
 800aa7c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800aa80:	4562      	cmp	r2, ip
 800aa82:	d01e      	beq.n	800aac2 <settings_changed+0x52e>
 800aa84:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800aa88:	4562      	cmp	r2, ip
 800aa8a:	d01c      	beq.n	800aac6 <settings_changed+0x532>
 800aa8c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800aa90:	4562      	cmp	r2, ip
 800aa92:	d01a      	beq.n	800aaca <settings_changed+0x536>
 800aa94:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800aa98:	4562      	cmp	r2, ip
 800aa9a:	d001      	beq.n	800aaa0 <settings_changed+0x50c>
 800aa9c:	2208      	movs	r2, #8
 800aa9e:	e002      	b.n	800aaa6 <settings_changed+0x512>
 800aaa0:	2207      	movs	r2, #7
 800aaa2:	e000      	b.n	800aaa6 <settings_changed+0x512>
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	fa02 f303 	lsl.w	r3, r2, r3
 800aaaa:	4303      	orrs	r3, r0
                    SYSCFG->EXTICR[input->pin >> 2] = extireg;
 800aaac:	1c8a      	adds	r2, r1, #2
 800aaae:	4951      	ldr	r1, [pc, #324]	@ (800abf4 <settings_changed+0x660>)
 800aab0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aab4:	e628      	b.n	800a708 <settings_changed+0x174>
                    extireg |= ((uint32_t)(GPIO_GET_INDEX(input->port)) << ((input->pin & 0b11) << 2));
 800aab6:	2201      	movs	r2, #1
 800aab8:	e7f5      	b.n	800aaa6 <settings_changed+0x512>
 800aaba:	2202      	movs	r2, #2
 800aabc:	e7f3      	b.n	800aaa6 <settings_changed+0x512>
 800aabe:	2203      	movs	r2, #3
 800aac0:	e7f1      	b.n	800aaa6 <settings_changed+0x512>
 800aac2:	2204      	movs	r2, #4
 800aac4:	e7ef      	b.n	800aaa6 <settings_changed+0x512>
 800aac6:	2205      	movs	r2, #5
 800aac8:	e7ed      	b.n	800aaa6 <settings_changed+0x512>
 800aaca:	2206      	movs	r2, #6
 800aacc:	e7eb      	b.n	800aaa6 <settings_changed+0x512>
            GPIO_Init.Pull = input->mode.pull_mode == PullMode_Up ? GPIO_PULLUP : GPIO_NOPULL;
 800aace:	2301      	movs	r3, #1
 800aad0:	e628      	b.n	800a724 <settings_changed+0x190>
                    GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 800aad2:	4b49      	ldr	r3, [pc, #292]	@ (800abf8 <settings_changed+0x664>)
 800aad4:	9302      	str	r3, [sp, #8]
            HAL_GPIO_Init(input->port, &GPIO_Init);
 800aad6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800aada:	4b45      	ldr	r3, [pc, #276]	@ (800abf0 <settings_changed+0x65c>)
 800aadc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800aae0:	a901      	add	r1, sp, #4
 800aae2:	68d8      	ldr	r0, [r3, #12]
 800aae4:	f7fe fc92 	bl	800940c <HAL_GPIO_Init>
        } while(i);
 800aae8:	2c00      	cmp	r4, #0
 800aaea:	f000 808f 	beq.w	800ac0c <settings_changed+0x678>
            input = &inputpin[--i];
 800aaee:	3c01      	subs	r4, #1
            if(input->group == PinGroup_AuxInputAnalog)
 800aaf0:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800aaf4:	4b3e      	ldr	r3, [pc, #248]	@ (800abf0 <settings_changed+0x65c>)
 800aaf6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800aafa:	691a      	ldr	r2, [r3, #16]
 800aafc:	2a0a      	cmp	r2, #10
 800aafe:	d0f3      	beq.n	800aae8 <settings_changed+0x554>
            if(input->group != PinGroup_AuxInput)
 800ab00:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800ab04:	d008      	beq.n	800ab18 <settings_changed+0x584>
                input->mode.irq_mode = IRQ_Mode_None;
 800ab06:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800ab0a:	4b39      	ldr	r3, [pc, #228]	@ (800abf0 <settings_changed+0x65c>)
 800ab0c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800ab10:	8899      	ldrh	r1, [r3, #4]
 800ab12:	f36f 1149 	bfc	r1, #5, #5
 800ab16:	8099      	strh	r1, [r3, #4]
            switch(input->id) {
 800ab18:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800ab1c:	4934      	ldr	r1, [pc, #208]	@ (800abf0 <settings_changed+0x65c>)
 800ab1e:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 800ab22:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab24:	f63f adbe 	bhi.w	800a6a4 <settings_changed+0x110>
 800ab28:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab2a:	f63f ade9 	bhi.w	800a700 <settings_changed+0x16c>
 800ab2e:	a101      	add	r1, pc, #4	@ (adr r1, 800ab34 <settings_changed+0x5a0>)
 800ab30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab34:	0800a6c9 	.word	0x0800a6c9
 800ab38:	0800a793 	.word	0x0800a793
 800ab3c:	0800a7d3 	.word	0x0800a7d3
 800ab40:	0800a813 	.word	0x0800a813
 800ab44:	0800a701 	.word	0x0800a701
 800ab48:	0800a701 	.word	0x0800a701
 800ab4c:	0800a753 	.word	0x0800a753
 800ab50:	0800a701 	.word	0x0800a701
 800ab54:	0800a701 	.word	0x0800a701
 800ab58:	0800a701 	.word	0x0800a701
 800ab5c:	0800a701 	.word	0x0800a701
 800ab60:	0800a701 	.word	0x0800a701
 800ab64:	0800a701 	.word	0x0800a701
 800ab68:	0800a701 	.word	0x0800a701
 800ab6c:	0800a701 	.word	0x0800a701
 800ab70:	0800a701 	.word	0x0800a701
 800ab74:	0800a853 	.word	0x0800a853
 800ab78:	0800a853 	.word	0x0800a853
 800ab7c:	0800a853 	.word	0x0800a853
 800ab80:	0800a701 	.word	0x0800a701
 800ab84:	0800a701 	.word	0x0800a701
 800ab88:	0800a8bd 	.word	0x0800a8bd
 800ab8c:	0800a8bd 	.word	0x0800a8bd
 800ab90:	0800a8bd 	.word	0x0800a8bd
 800ab94:	0800a701 	.word	0x0800a701
 800ab98:	0800a701 	.word	0x0800a701
 800ab9c:	0800a8fd 	.word	0x0800a8fd
 800aba0:	0800a8fd 	.word	0x0800a8fd
 800aba4:	0800a8fd 	.word	0x0800a8fd
 800aba8:	0800a701 	.word	0x0800a701
 800abac:	0800a701 	.word	0x0800a701
 800abb0:	0800a93d 	.word	0x0800a93d
 800abb4:	0800a93d 	.word	0x0800a93d
 800abb8:	0800a701 	.word	0x0800a701
 800abbc:	0800a97d 	.word	0x0800a97d
 800abc0:	0800a97d 	.word	0x0800a97d
 800abc4:	0800a701 	.word	0x0800a701
 800abc8:	0800a9bd 	.word	0x0800a9bd
 800abcc:	0800a9bd 	.word	0x0800a9bd
 800abd0:	0800a701 	.word	0x0800a701
 800abd4:	0800a701 	.word	0x0800a701
 800abd8:	0800a701 	.word	0x0800a701
 800abdc:	0800a701 	.word	0x0800a701
 800abe0:	0800a701 	.word	0x0800a701
 800abe4:	0800a701 	.word	0x0800a701
 800abe8:	0800a701 	.word	0x0800a701
 800abec:	0800a9fd 	.word	0x0800a9fd
 800abf0:	200000f4 	.word	0x200000f4
 800abf4:	40013800 	.word	0x40013800
 800abf8:	10110000 	.word	0x10110000
 800abfc:	40020000 	.word	0x40020000
                    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
 800ac00:	4b33      	ldr	r3, [pc, #204]	@ (800acd0 <settings_changed+0x73c>)
 800ac02:	9302      	str	r3, [sp, #8]
                    break;
 800ac04:	e767      	b.n	800aad6 <settings_changed+0x542>
                    GPIO_Init.Mode = GPIO_MODE_IT_RISING_FALLING;
 800ac06:	4b33      	ldr	r3, [pc, #204]	@ (800acd4 <settings_changed+0x740>)
 800ac08:	9302      	str	r3, [sp, #8]
                    break;
 800ac0a:	e764      	b.n	800aad6 <settings_changed+0x542>
        uint32_t irq_mask = DRIVER_IRQMASK|aux_irq;
 800ac0c:	4b32      	ldr	r3, [pc, #200]	@ (800acd8 <settings_changed+0x744>)
 800ac0e:	681c      	ldr	r4, [r3, #0]
 800ac10:	f444 52c0 	orr.w	r2, r4, #6144	@ 0x1800
        __HAL_GPIO_EXTI_CLEAR_IT(irq_mask);
 800ac14:	4b31      	ldr	r3, [pc, #196]	@ (800acdc <settings_changed+0x748>)
 800ac16:	615a      	str	r2, [r3, #20]
        if(irq_mask & (1<<0)) {
 800ac18:	f014 0f01 	tst.w	r4, #1
 800ac1c:	d121      	bne.n	800ac62 <settings_changed+0x6ce>
        if(irq_mask & (1<<1)) {
 800ac1e:	f014 0f02 	tst.w	r4, #2
 800ac22:	d127      	bne.n	800ac74 <settings_changed+0x6e0>
        if(irq_mask & (1<<2)) {
 800ac24:	f014 0f04 	tst.w	r4, #4
 800ac28:	d12d      	bne.n	800ac86 <settings_changed+0x6f2>
        if(irq_mask & (1<<3)) {
 800ac2a:	f014 0f08 	tst.w	r4, #8
 800ac2e:	d133      	bne.n	800ac98 <settings_changed+0x704>
        if(irq_mask & (1<<4)) {
 800ac30:	f014 0f10 	tst.w	r4, #16
 800ac34:	d139      	bne.n	800acaa <settings_changed+0x716>
        if(irq_mask & 0x03E0) {
 800ac36:	f414 7f78 	tst.w	r4, #992	@ 0x3e0
 800ac3a:	d13f      	bne.n	800acbc <settings_changed+0x728>
            HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	2102      	movs	r1, #2
 800ac40:	2028      	movs	r0, #40	@ 0x28
 800ac42:	f7fe f9d9 	bl	8008ff8 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800ac46:	2028      	movs	r0, #40	@ 0x28
 800ac48:	f7fe f9e6 	bl	8009018 <HAL_NVIC_EnableIRQ>
        hal.limits.enable(settings->limits.flags.hard_enabled, (axes_signals_t){0});
 800ac4c:	4b24      	ldr	r3, [pc, #144]	@ (800ace0 <settings_changed+0x74c>)
 800ac4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac50:	f895 0124 	ldrb.w	r0, [r5, #292]	@ 0x124
 800ac54:	f04f 0100 	mov.w	r1, #0
 800ac58:	f000 0001 	and.w	r0, r0, #1
 800ac5c:	4798      	blx	r3
}
 800ac5e:	b007      	add	sp, #28
 800ac60:	bdf0      	pop	{r4, r5, r6, r7, pc}
            HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800ac62:	2200      	movs	r2, #0
 800ac64:	2102      	movs	r1, #2
 800ac66:	2006      	movs	r0, #6
 800ac68:	f7fe f9c6 	bl	8008ff8 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800ac6c:	2006      	movs	r0, #6
 800ac6e:	f7fe f9d3 	bl	8009018 <HAL_NVIC_EnableIRQ>
 800ac72:	e7d4      	b.n	800ac1e <settings_changed+0x68a>
            HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 800ac74:	2200      	movs	r2, #0
 800ac76:	2102      	movs	r1, #2
 800ac78:	2007      	movs	r0, #7
 800ac7a:	f7fe f9bd 	bl	8008ff8 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800ac7e:	2007      	movs	r0, #7
 800ac80:	f7fe f9ca 	bl	8009018 <HAL_NVIC_EnableIRQ>
 800ac84:	e7ce      	b.n	800ac24 <settings_changed+0x690>
            HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 800ac86:	2200      	movs	r2, #0
 800ac88:	2102      	movs	r1, #2
 800ac8a:	2008      	movs	r0, #8
 800ac8c:	f7fe f9b4 	bl	8008ff8 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800ac90:	2008      	movs	r0, #8
 800ac92:	f7fe f9c1 	bl	8009018 <HAL_NVIC_EnableIRQ>
 800ac96:	e7c8      	b.n	800ac2a <settings_changed+0x696>
            HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 800ac98:	2200      	movs	r2, #0
 800ac9a:	2102      	movs	r1, #2
 800ac9c:	2009      	movs	r0, #9
 800ac9e:	f7fe f9ab 	bl	8008ff8 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800aca2:	2009      	movs	r0, #9
 800aca4:	f7fe f9b8 	bl	8009018 <HAL_NVIC_EnableIRQ>
 800aca8:	e7c2      	b.n	800ac30 <settings_changed+0x69c>
            HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 800acaa:	2200      	movs	r2, #0
 800acac:	2102      	movs	r1, #2
 800acae:	200a      	movs	r0, #10
 800acb0:	f7fe f9a2 	bl	8008ff8 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800acb4:	200a      	movs	r0, #10
 800acb6:	f7fe f9af 	bl	8009018 <HAL_NVIC_EnableIRQ>
 800acba:	e7bc      	b.n	800ac36 <settings_changed+0x6a2>
            HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800acbc:	2200      	movs	r2, #0
 800acbe:	2102      	movs	r1, #2
 800acc0:	2017      	movs	r0, #23
 800acc2:	f7fe f999 	bl	8008ff8 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800acc6:	2017      	movs	r0, #23
 800acc8:	f7fe f9a6 	bl	8009018 <HAL_NVIC_EnableIRQ>
 800accc:	e7b6      	b.n	800ac3c <settings_changed+0x6a8>
 800acce:	4770      	bx	lr
 800acd0:	10210000 	.word	0x10210000
 800acd4:	10310000 	.word	0x10310000
 800acd8:	200007b8 	.word	0x200007b8
 800acdc:	40013c00 	.word	0x40013c00
 800ace0:	20001a90 	.word	0x20001a90

0800ace4 <registerPeriphPin>:
{
 800ace4:	b510      	push	{r4, lr}
 800ace6:	4604      	mov	r4, r0
    periph_signal_t *add_pin = malloc(sizeof(periph_signal_t));
 800ace8:	201c      	movs	r0, #28
 800acea:	f017 ff57 	bl	8022b9c <malloc>
    if(!add_pin)
 800acee:	b1c0      	cbz	r0, 800ad22 <registerPeriphPin+0x3e>
 800acf0:	4602      	mov	r2, r0
    memcpy(&add_pin->pin, pin, sizeof(periph_pin_t));
 800acf2:	6821      	ldr	r1, [r4, #0]
 800acf4:	6863      	ldr	r3, [r4, #4]
 800acf6:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800acfa:	68e0      	ldr	r0, [r4, #12]
 800acfc:	6011      	str	r1, [r2, #0]
 800acfe:	6053      	str	r3, [r2, #4]
 800ad00:	f8c2 c008 	str.w	ip, [r2, #8]
 800ad04:	60d0      	str	r0, [r2, #12]
 800ad06:	6921      	ldr	r1, [r4, #16]
 800ad08:	6963      	ldr	r3, [r4, #20]
 800ad0a:	6111      	str	r1, [r2, #16]
 800ad0c:	6153      	str	r3, [r2, #20]
    add_pin->next = NULL;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	6193      	str	r3, [r2, #24]
    if(periph_pins == NULL) {
 800ad12:	4b06      	ldr	r3, [pc, #24]	@ (800ad2c <registerPeriphPin+0x48>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	b12b      	cbz	r3, 800ad24 <registerPeriphPin+0x40>
        while(last->next)
 800ad18:	4619      	mov	r1, r3
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1fb      	bne.n	800ad18 <registerPeriphPin+0x34>
        last->next = add_pin;
 800ad20:	618a      	str	r2, [r1, #24]
}
 800ad22:	bd10      	pop	{r4, pc}
        periph_pins = add_pin;
 800ad24:	4b01      	ldr	r3, [pc, #4]	@ (800ad2c <registerPeriphPin+0x48>)
 800ad26:	601a      	str	r2, [r3, #0]
 800ad28:	e7fb      	b.n	800ad22 <registerPeriphPin+0x3e>
 800ad2a:	bf00      	nop
 800ad2c:	200007cc 	.word	0x200007cc

0800ad30 <driver_setup>:
#endif // ETHERNET_ENABLE

// Initializes MCU peripherals for grblHAL use

static bool driver_setup (settings_t *settings)
{
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	b08e      	sub	sp, #56	@ 0x38
 800ad34:	4605      	mov	r5, r0
    uint32_t latency;
    RCC_ClkInitTypeDef clock_cfg;

    HAL_RCC_GetClockConfig(&clock_cfg, &latency);
 800ad36:	a90d      	add	r1, sp, #52	@ 0x34
 800ad38:	a808      	add	r0, sp, #32
 800ad3a:	f7fe ff89 	bl	8009c50 <HAL_RCC_GetClockConfig>

    GPIO_InitTypeDef GPIO_Init = {
 800ad3e:	2400      	movs	r4, #0
 800ad40:	9403      	str	r4, [sp, #12]
 800ad42:	9404      	str	r4, [sp, #16]
 800ad44:	9405      	str	r4, [sp, #20]
 800ad46:	9406      	str	r4, [sp, #24]
 800ad48:	9407      	str	r4, [sp, #28]
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	9304      	str	r3, [sp, #16]
 800ad4e:	2302      	movs	r3, #2
 800ad50:	9306      	str	r3, [sp, #24]
     *************************/

    uint32_t i;

    // Switch on stepper driver power before enabling other output pins
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800ad52:	e013      	b.n	800ad7c <driver_setup+0x4c>
        if(outputpin[i].group == PinGroup_StepperPower) {
            GPIO_Init.Pin = 1 << outputpin[i].pin;
            GPIO_Init.Mode = outputpin[i].mode.open_drain ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800ad54:	2301      	movs	r3, #1
 800ad56:	9304      	str	r3, [sp, #16]
            HAL_GPIO_Init(outputpin[i].port, &GPIO_Init);
 800ad58:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800ad5c:	4e6d      	ldr	r6, [pc, #436]	@ (800af14 <driver_setup+0x1e4>)
 800ad5e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800ad62:	a903      	add	r1, sp, #12
 800ad64:	6870      	ldr	r0, [r6, #4]
 800ad66:	f7fe fb51 	bl	800940c <HAL_GPIO_Init>
            DIGITAL_OUT(outputpin[i].port, outputpin[i].pin, 1);
 800ad6a:	6872      	ldr	r2, [r6, #4]
 800ad6c:	4b6a      	ldr	r3, [pc, #424]	@ (800af18 <driver_setup+0x1e8>)
 800ad6e:	4413      	add	r3, r2
 800ad70:	015b      	lsls	r3, r3, #5
 800ad72:	7a32      	ldrb	r2, [r6, #8]
 800ad74:	2101      	movs	r1, #1
 800ad76:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800ad7a:	3401      	adds	r4, #1
 800ad7c:	2c07      	cmp	r4, #7
 800ad7e:	d814      	bhi.n	800adaa <driver_setup+0x7a>
        if(outputpin[i].group == PinGroup_StepperPower) {
 800ad80:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800ad84:	4b63      	ldr	r3, [pc, #396]	@ (800af14 <driver_setup+0x1e4>)
 800ad86:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	2b05      	cmp	r3, #5
 800ad8e:	d1f4      	bne.n	800ad7a <driver_setup+0x4a>
            GPIO_Init.Pin = 1 << outputpin[i].pin;
 800ad90:	4b60      	ldr	r3, [pc, #384]	@ (800af14 <driver_setup+0x1e4>)
 800ad92:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ad96:	7a19      	ldrb	r1, [r3, #8]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	408a      	lsls	r2, r1
 800ad9c:	9203      	str	r2, [sp, #12]
            GPIO_Init.Mode = outputpin[i].mode.open_drain ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800ad9e:	7c1b      	ldrb	r3, [r3, #16]
 800ada0:	f013 0f04 	tst.w	r3, #4
 800ada4:	d0d6      	beq.n	800ad54 <driver_setup+0x24>
 800ada6:	2311      	movs	r3, #17
 800ada8:	e7d5      	b.n	800ad56 <driver_setup+0x26>
        }
    }

    hal.delay_ms(100, NULL);
 800adaa:	4b5c      	ldr	r3, [pc, #368]	@ (800af1c <driver_setup+0x1ec>)
 800adac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adae:	2100      	movs	r1, #0
 800adb0:	2064      	movs	r0, #100	@ 0x64
 800adb2:	4798      	blx	r3

    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800adb4:	2400      	movs	r4, #0
 800adb6:	e014      	b.n	800ade2 <driver_setup+0xb2>
              outputpin[i].group == PinGroup_AuxOutputAnalog ||
               outputpin[i].id == Output_SpindlePWM ||
                outputpin[i].id == Output_Spindle1PWM)) {

            GPIO_Init.Pin = 1 << outputpin[i].pin;
            GPIO_Init.Mode = outputpin[i].mode.open_drain ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800adb8:	2001      	movs	r0, #1
 800adba:	e033      	b.n	800ae24 <driver_setup+0xf4>

            if(outputpin[i].group == PinGroup_MotorChipSelect ||
                outputpin[i].group == PinGroup_MotorUART ||
                 outputpin[i].id == Output_SPICS ||
                  outputpin[i].group == PinGroup_StepperEnable)
                outputpin[i].port->ODR |= GPIO_Init.Pin;
 800adbc:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800adc0:	4b54      	ldr	r3, [pc, #336]	@ (800af14 <driver_setup+0x1e4>)
 800adc2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	695a      	ldr	r2, [r3, #20]
 800adca:	4311      	orrs	r1, r2
 800adcc:	6159      	str	r1, [r3, #20]

            HAL_GPIO_Init(outputpin[i].port, &GPIO_Init);
 800adce:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800add2:	4b50      	ldr	r3, [pc, #320]	@ (800af14 <driver_setup+0x1e4>)
 800add4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800add8:	a903      	add	r1, sp, #12
 800adda:	6858      	ldr	r0, [r3, #4]
 800addc:	f7fe fb16 	bl	800940c <HAL_GPIO_Init>
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800ade0:	3401      	adds	r4, #1
 800ade2:	2c07      	cmp	r4, #7
 800ade4:	d828      	bhi.n	800ae38 <driver_setup+0x108>
        if(!(outputpin[i].group == PinGroup_StepperPower ||
 800ade6:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800adea:	4b4a      	ldr	r3, [pc, #296]	@ (800af14 <driver_setup+0x1e4>)
 800adec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	2b05      	cmp	r3, #5
 800adf4:	d0f4      	beq.n	800ade0 <driver_setup+0xb0>
 800adf6:	2b0b      	cmp	r3, #11
 800adf8:	d0f2      	beq.n	800ade0 <driver_setup+0xb0>
               outputpin[i].id == Output_SpindlePWM ||
 800adfa:	4946      	ldr	r1, [pc, #280]	@ (800af14 <driver_setup+0x1e4>)
 800adfc:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
              outputpin[i].group == PinGroup_AuxOutputAnalog ||
 800ae00:	2a71      	cmp	r2, #113	@ 0x71
 800ae02:	d0ed      	beq.n	800ade0 <driver_setup+0xb0>
        if(!(outputpin[i].group == PinGroup_StepperPower ||
 800ae04:	2a74      	cmp	r2, #116	@ 0x74
 800ae06:	d0eb      	beq.n	800ade0 <driver_setup+0xb0>
            GPIO_Init.Pin = 1 << outputpin[i].pin;
 800ae08:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 800ae0c:	4841      	ldr	r0, [pc, #260]	@ (800af14 <driver_setup+0x1e4>)
 800ae0e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ae12:	7a06      	ldrb	r6, [r0, #8]
 800ae14:	2101      	movs	r1, #1
 800ae16:	40b1      	lsls	r1, r6
 800ae18:	9103      	str	r1, [sp, #12]
            GPIO_Init.Mode = outputpin[i].mode.open_drain ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800ae1a:	7c00      	ldrb	r0, [r0, #16]
 800ae1c:	f010 0f04 	tst.w	r0, #4
 800ae20:	d0ca      	beq.n	800adb8 <driver_setup+0x88>
 800ae22:	2011      	movs	r0, #17
 800ae24:	9004      	str	r0, [sp, #16]
            if(outputpin[i].group == PinGroup_MotorChipSelect ||
 800ae26:	f1a3 000d 	sub.w	r0, r3, #13
 800ae2a:	2801      	cmp	r0, #1
 800ae2c:	d9c6      	bls.n	800adbc <driver_setup+0x8c>
                outputpin[i].group == PinGroup_MotorUART ||
 800ae2e:	2a95      	cmp	r2, #149	@ 0x95
 800ae30:	d0c4      	beq.n	800adbc <driver_setup+0x8c>
                 outputpin[i].id == Output_SPICS ||
 800ae32:	2b06      	cmp	r3, #6
 800ae34:	d1cb      	bne.n	800adce <driver_setup+0x9e>
 800ae36:	e7c1      	b.n	800adbc <driver_setup+0x8c>
        }
    }

    GPIO_Init.Mode = GPIO_MODE_OUTPUT_PP;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	9304      	str	r3, [sp, #16]

 // Stepper init

    STEPPER_TIMER_CLKEN();
 800ae3c:	2600      	movs	r6, #0
 800ae3e:	9601      	str	r6, [sp, #4]
 800ae40:	4c37      	ldr	r4, [pc, #220]	@ (800af20 <driver_setup+0x1f0>)
 800ae42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae44:	f043 0308 	orr.w	r3, r3, #8
 800ae48:	6423      	str	r3, [r4, #64]	@ 0x40
 800ae4a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae4c:	f003 0308 	and.w	r3, r3, #8
 800ae50:	9301      	str	r3, [sp, #4]
 800ae52:	9b01      	ldr	r3, [sp, #4]
    STEPPER_TIMER->CR1 &= ~TIM_CR1_CEN;
 800ae54:	4b33      	ldr	r3, [pc, #204]	@ (800af24 <driver_setup+0x1f4>)
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	f022 0201 	bic.w	r2, r2, #1
 800ae5c:	601a      	str	r2, [r3, #0]
    STEPPER_TIMER->SR &= ~TIM_SR_UIF;
 800ae5e:	691a      	ldr	r2, [r3, #16]
 800ae60:	f022 0201 	bic.w	r2, r2, #1
 800ae64:	611a      	str	r2, [r3, #16]
    STEPPER_TIMER->PSC = STEPPER_TIMER_DIV - 1;
 800ae66:	2203      	movs	r2, #3
 800ae68:	629a      	str	r2, [r3, #40]	@ 0x28
    STEPPER_TIMER->CNT = 0;
 800ae6a:	625e      	str	r6, [r3, #36]	@ 0x24
    STEPPER_TIMER->CR1 |= TIM_CR1_DIR;
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	f042 0210 	orr.w	r2, r2, #16
 800ae72:	601a      	str	r2, [r3, #0]
    STEPPER_TIMER->DIER |= TIM_DIER_UIE;
 800ae74:	68da      	ldr	r2, [r3, #12]
 800ae76:	f042 0201 	orr.w	r2, r2, #1
 800ae7a:	60da      	str	r2, [r3, #12]

    HAL_NVIC_SetPriority(STEPPER_TIMER_IRQn, 0, 2);
 800ae7c:	2202      	movs	r2, #2
 800ae7e:	4631      	mov	r1, r6
 800ae80:	2032      	movs	r0, #50	@ 0x32
 800ae82:	f7fe f8b9 	bl	8008ff8 <HAL_NVIC_SetPriority>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ae86:	4b28      	ldr	r3, [pc, #160]	@ (800af28 <driver_setup+0x1f8>)
 800ae88:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ae8c:	605a      	str	r2, [r3, #4]
    NVIC_EnableIRQ(STEPPER_TIMER_IRQn);

 // Single-shot 100 ns per tick

    PULSE_TIMER_CLKEN();
 800ae8e:	9602      	str	r6, [sp, #8]
 800ae90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae92:	f043 0304 	orr.w	r3, r3, #4
 800ae96:	6423      	str	r3, [r4, #64]	@ 0x40
 800ae98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae9a:	f003 0304 	and.w	r3, r3, #4
 800ae9e:	9302      	str	r3, [sp, #8]
 800aea0:	9b02      	ldr	r3, [sp, #8]
    PULSE_TIMER->CR1 |= TIM_CR1_OPM|TIM_CR1_DIR|TIM_CR1_CKD_1|TIM_CR1_ARPE|TIM_CR1_URS;
 800aea2:	4a22      	ldr	r2, [pc, #136]	@ (800af2c <driver_setup+0x1fc>)
 800aea4:	6813      	ldr	r3, [r2, #0]
 800aea6:	f443 7327 	orr.w	r3, r3, #668	@ 0x29c
 800aeaa:	6013      	str	r3, [r2, #0]
    PULSE_TIMER->PSC = (HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock_cfg.APB1CLKDivider) / 10000000UL) - 1;
 800aeac:	f7fe feb0 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 800aeb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aeb2:	bb63      	cbnz	r3, 800af0e <driver_setup+0x1de>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	fb00 f303 	mul.w	r3, r0, r3
 800aeba:	4a1d      	ldr	r2, [pc, #116]	@ (800af30 <driver_setup+0x200>)
 800aebc:	fba2 2303 	umull	r2, r3, r2, r3
 800aec0:	0d9b      	lsrs	r3, r3, #22
 800aec2:	3b01      	subs	r3, #1
 800aec4:	4a19      	ldr	r2, [pc, #100]	@ (800af2c <driver_setup+0x1fc>)
 800aec6:	6293      	str	r3, [r2, #40]	@ 0x28
    PULSE_TIMER->SR &= ~(TIM_SR_UIF|TIM_SR_CC1IF);
 800aec8:	6913      	ldr	r3, [r2, #16]
 800aeca:	f023 0303 	bic.w	r3, r3, #3
 800aece:	6113      	str	r3, [r2, #16]
    PULSE_TIMER->CNT = 0;
 800aed0:	2400      	movs	r4, #0
 800aed2:	6254      	str	r4, [r2, #36]	@ 0x24
    PULSE_TIMER->DIER |= TIM_DIER_UIE;
 800aed4:	68d3      	ldr	r3, [r2, #12]
 800aed6:	f043 0301 	orr.w	r3, r3, #1
 800aeda:	60d3      	str	r3, [r2, #12]

    HAL_NVIC_SetPriority(PULSE_TIMER_IRQn, 0, 1);
 800aedc:	2201      	movs	r2, #1
 800aede:	4621      	mov	r1, r4
 800aee0:	201e      	movs	r0, #30
 800aee2:	f7fe f889 	bl	8008ff8 <HAL_NVIC_SetPriority>
 800aee6:	4b10      	ldr	r3, [pc, #64]	@ (800af28 <driver_setup+0x1f8>)
 800aee8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800aeec:	601a      	str	r2, [r3, #0]

    hal.periph_port.register_pin(&ssp);

#endif // SPINDLE_ENCODER_ENABLE

    IOInitDone = settings->version == 22;
 800aeee:	682b      	ldr	r3, [r5, #0]
 800aef0:	2b16      	cmp	r3, #22
 800aef2:	bf14      	ite	ne
 800aef4:	2300      	movne	r3, #0
 800aef6:	2301      	moveq	r3, #1
 800aef8:	4e0e      	ldr	r6, [pc, #56]	@ (800af34 <driver_setup+0x204>)
 800aefa:	7033      	strb	r3, [r6, #0]

    hal.settings_changed(settings, (settings_changed_flags_t){0});
 800aefc:	4b07      	ldr	r3, [pc, #28]	@ (800af1c <driver_setup+0x1ec>)
 800aefe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800af02:	4621      	mov	r1, r4
 800af04:	4628      	mov	r0, r5
 800af06:	4798      	blx	r3
    if(qei_enable)
        encoder_start(&qei.encoder);
#endif

    return IOInitDone;
}
 800af08:	7830      	ldrb	r0, [r6, #0]
 800af0a:	b00e      	add	sp, #56	@ 0x38
 800af0c:	bd70      	pop	{r4, r5, r6, pc}
    PULSE_TIMER->PSC = (HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock_cfg.APB1CLKDivider) / 10000000UL) - 1;
 800af0e:	2302      	movs	r3, #2
 800af10:	e7d1      	b.n	800aeb6 <driver_setup+0x186>
 800af12:	bf00      	nop
 800af14:	20000014 	.word	0x20000014
 800af18:	c2100014 	.word	0xc2100014
 800af1c:	20001a90 	.word	0x20001a90
 800af20:	40023800 	.word	0x40023800
 800af24:	40000c00 	.word	0x40000c00
 800af28:	e000e100 	.word	0xe000e100
 800af2c:	40000800 	.word	0x40000800
 800af30:	6b5fca6b 	.word	0x6b5fca6b
 800af34:	200007b4 	.word	0x200007b4

0800af38 <driver_delay>:
{
 800af38:	b510      	push	{r4, lr}
    if((delay.ms = ms) > 0) {
 800af3a:	4b0b      	ldr	r3, [pc, #44]	@ (800af68 <driver_delay+0x30>)
 800af3c:	6018      	str	r0, [r3, #0]
 800af3e:	b160      	cbz	r0, 800af5a <driver_delay+0x22>
        if(!(delay.callback = callback)) {
 800af40:	6059      	str	r1, [r3, #4]
 800af42:	b129      	cbz	r1, 800af50 <driver_delay+0x18>
}
 800af44:	bd10      	pop	{r4, pc}
                grbl.on_execute_delay(state_get());
 800af46:	4b09      	ldr	r3, [pc, #36]	@ (800af6c <driver_delay+0x34>)
 800af48:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800af4a:	f013 fffd 	bl	801ef48 <state_get>
 800af4e:	47a0      	blx	r4
            while(delay.ms)
 800af50:	4b05      	ldr	r3, [pc, #20]	@ (800af68 <driver_delay+0x30>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d1f6      	bne.n	800af46 <driver_delay+0xe>
 800af58:	e7f4      	b.n	800af44 <driver_delay+0xc>
        delay.callback = NULL;
 800af5a:	4b03      	ldr	r3, [pc, #12]	@ (800af68 <driver_delay+0x30>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	605a      	str	r2, [r3, #4]
        if(callback)
 800af60:	2900      	cmp	r1, #0
 800af62:	d0ef      	beq.n	800af44 <driver_delay+0xc>
            callback();
 800af64:	4788      	blx	r1
}
 800af66:	e7ed      	b.n	800af44 <driver_delay+0xc>
 800af68:	2000000c 	.word	0x2000000c
 800af6c:	20001c78 	.word	0x20001c78

0800af70 <get_free_mem>:
}

#endif

static uint32_t get_free_mem (void)
{
 800af70:	b510      	push	{r4, lr}
 800af72:	b08a      	sub	sp, #40	@ 0x28
    extern uint8_t _end; /* Symbol defined in the linker script */
    extern uint8_t _estack; /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;

    return stack_limit - (uint32_t)&_end - mallinfo().uordblks;
 800af74:	4c05      	ldr	r4, [pc, #20]	@ (800af8c <get_free_mem+0x1c>)
 800af76:	4668      	mov	r0, sp
 800af78:	f017 fece 	bl	8022d18 <mallinfo>
 800af7c:	4b04      	ldr	r3, [pc, #16]	@ (800af90 <get_free_mem+0x20>)
 800af7e:	9a07      	ldr	r2, [sp, #28]
 800af80:	4413      	add	r3, r2
}
 800af82:	4804      	ldr	r0, [pc, #16]	@ (800af94 <get_free_mem+0x24>)
 800af84:	1a20      	subs	r0, r4, r0
 800af86:	1ac0      	subs	r0, r0, r3
 800af88:	b00a      	add	sp, #40	@ 0x28
 800af8a:	bd10      	pop	{r4, pc}
 800af8c:	20010000 	.word	0x20010000
 800af90:	00000400 	.word	0x00000400
 800af94:	20003240 	.word	0x20003240

0800af98 <core_pin_debounce>:
#endif

#endif // SPINDLE_ENCODER_ENABLE

void core_pin_debounce (void *pin)
{
 800af98:	b530      	push	{r4, r5, lr}
 800af9a:	b083      	sub	sp, #12
 800af9c:	4604      	mov	r4, r0
    input_signal_t *input = (input_signal_t *)pin;

    if(input->mode.irq_mode == IRQ_Mode_Change ||
 800af9e:	8883      	ldrh	r3, [r0, #4]
 800afa0:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 800afa4:	2b80      	cmp	r3, #128	@ 0x80
 800afa6:	d015      	beq.n	800afd4 <core_pin_debounce+0x3c>
         DIGITAL_IN(input->port, input->pin) == (input->mode.irq_mode == IRQ_Mode_Falling ? 0 : 1)) {
 800afa8:	68c2      	ldr	r2, [r0, #12]
 800afaa:	f102 4242 	add.w	r2, r2, #3254779904	@ 0xc2000000
 800afae:	f102 1210 	add.w	r2, r2, #1048592	@ 0x100010
 800afb2:	0152      	lsls	r2, r2, #5
 800afb4:	7981      	ldrb	r1, [r0, #6]
 800afb6:	f812 2021 	ldrb.w	r2, [r2, r1, lsl #2]
 800afba:	b2d2      	uxtb	r2, r2
 800afbc:	3b40      	subs	r3, #64	@ 0x40
 800afbe:	bf18      	it	ne
 800afc0:	2301      	movne	r3, #1
    if(input->mode.irq_mode == IRQ_Mode_Change ||
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d006      	beq.n	800afd4 <core_pin_debounce+0x3c>
    }

#ifdef Z_LIMIT_POLL
    if(input != z_limit_pin)
#endif
    EXTI->IMR |= input->bit; // Reenable pin interrupt
 800afc6:	4a10      	ldr	r2, [pc, #64]	@ (800b008 <core_pin_debounce+0x70>)
 800afc8:	6813      	ldr	r3, [r2, #0]
 800afca:	68a1      	ldr	r1, [r4, #8]
 800afcc:	430b      	orrs	r3, r1
 800afce:	6013      	str	r3, [r2, #0]
}
 800afd0:	b003      	add	sp, #12
 800afd2:	bd30      	pop	{r4, r5, pc}
        if(input->group & (PinGroup_Control)) {
 800afd4:	6923      	ldr	r3, [r4, #16]
 800afd6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800afda:	d004      	beq.n	800afe6 <core_pin_debounce+0x4e>
            hal.control.interrupt_callback(systemGetState());
 800afdc:	4b0b      	ldr	r3, [pc, #44]	@ (800b00c <core_pin_debounce+0x74>)
 800afde:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 800afe0:	f7ff f94a 	bl	800a278 <systemGetState>
 800afe4:	47a8      	blx	r5
        if(input->group & (PinGroup_Limit|PinGroup_LimitMax)) {
 800afe6:	6923      	ldr	r3, [r4, #16]
 800afe8:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800afec:	d0eb      	beq.n	800afc6 <core_pin_debounce+0x2e>
            limit_signals_t state = limitsGetState();
 800afee:	f7ff f901 	bl	800a1f4 <limitsGetState>
 800aff2:	9001      	str	r0, [sp, #4]
            if(limit_signals_merge(state).value) //TODO: add check for limit switches having same state as when limit_isr were invoked?
 800aff4:	f008 f946 	bl	8013284 <limit_signals_merge>
 800aff8:	b2c0      	uxtb	r0, r0
 800affa:	2800      	cmp	r0, #0
 800affc:	d0e3      	beq.n	800afc6 <core_pin_debounce+0x2e>
                hal.limits.interrupt_callback(state);
 800affe:	4b03      	ldr	r3, [pc, #12]	@ (800b00c <core_pin_debounce+0x74>)
 800b000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b002:	9801      	ldr	r0, [sp, #4]
 800b004:	4798      	blx	r3
 800b006:	e7de      	b.n	800afc6 <core_pin_debounce+0x2e>
 800b008:	40013c00 	.word	0x40013c00
 800b00c:	20001a90 	.word	0x20001a90

0800b010 <core_pin_irq>:

static inline void core_pin_irq (uint32_t bit)
{
 800b010:	b510      	push	{r4, lr}
    input_signal_t *input;

    if((input = pin_irq[__builtin_ffs(bit) - 1])) {
 800b012:	fa90 f3a0 	rbit	r3, r0
 800b016:	fab3 f383 	clz	r3, r3
 800b01a:	b908      	cbnz	r0, 800b020 <core_pin_irq+0x10>
 800b01c:	f04f 33ff 	mov.w	r3, #4294967295
 800b020:	4a0c      	ldr	r2, [pc, #48]	@ (800b054 <core_pin_irq+0x44>)
 800b022:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b026:	b134      	cbz	r4, 800b036 <core_pin_irq+0x26>
        if(input->mode.debounce && task_add_delayed(core_pin_debounce, input, 40)) {
 800b028:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	db03      	blt.n	800b038 <core_pin_irq+0x28>
            EXTI->IMR &= ~input->bit; // Disable pin interrupt
        } else
            core_pin_debounce(input);
 800b030:	4620      	mov	r0, r4
 800b032:	f7ff ffb1 	bl	800af98 <core_pin_debounce>
    }
}
 800b036:	bd10      	pop	{r4, pc}
        if(input->mode.debounce && task_add_delayed(core_pin_debounce, input, 40)) {
 800b038:	2228      	movs	r2, #40	@ 0x28
 800b03a:	4621      	mov	r1, r4
 800b03c:	4806      	ldr	r0, [pc, #24]	@ (800b058 <core_pin_irq+0x48>)
 800b03e:	f006 fc8b 	bl	8011958 <task_add_delayed>
 800b042:	2800      	cmp	r0, #0
 800b044:	d0f4      	beq.n	800b030 <core_pin_irq+0x20>
            EXTI->IMR &= ~input->bit; // Disable pin interrupt
 800b046:	4a05      	ldr	r2, [pc, #20]	@ (800b05c <core_pin_irq+0x4c>)
 800b048:	6813      	ldr	r3, [r2, #0]
 800b04a:	68a1      	ldr	r1, [r4, #8]
 800b04c:	ea23 0301 	bic.w	r3, r3, r1
 800b050:	6013      	str	r3, [r2, #0]
 800b052:	e7f0      	b.n	800b036 <core_pin_irq+0x26>
 800b054:	20000768 	.word	0x20000768
 800b058:	0800af99 	.word	0x0800af99
 800b05c:	40013c00 	.word	0x40013c00

0800b060 <gpio_irq_enable>:
{
 800b060:	b410      	push	{r4}
    if(irq_mode == IRQ_Mode_Rising) {
 800b062:	2901      	cmp	r1, #1
 800b064:	d00a      	beq.n	800b07c <gpio_irq_enable+0x1c>
    } else if(irq_mode == IRQ_Mode_Falling) {
 800b066:	2902      	cmp	r1, #2
 800b068:	d01b      	beq.n	800b0a2 <gpio_irq_enable+0x42>
    } else if(irq_mode == IRQ_Mode_Change) {
 800b06a:	2904      	cmp	r1, #4
 800b06c:	d024      	beq.n	800b0b8 <gpio_irq_enable+0x58>
        EXTI->IMR &= ~input->bit;   // Disable pin interrupt
 800b06e:	4a17      	ldr	r2, [pc, #92]	@ (800b0cc <gpio_irq_enable+0x6c>)
 800b070:	6813      	ldr	r3, [r2, #0]
 800b072:	6884      	ldr	r4, [r0, #8]
 800b074:	ea23 0304 	bic.w	r3, r3, r4
 800b078:	6013      	str	r3, [r2, #0]
 800b07a:	e009      	b.n	800b090 <gpio_irq_enable+0x30>
        EXTI->RTSR |= input->bit;
 800b07c:	4b13      	ldr	r3, [pc, #76]	@ (800b0cc <gpio_irq_enable+0x6c>)
 800b07e:	689a      	ldr	r2, [r3, #8]
 800b080:	6884      	ldr	r4, [r0, #8]
 800b082:	4322      	orrs	r2, r4
 800b084:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~input->bit;
 800b086:	68da      	ldr	r2, [r3, #12]
 800b088:	6884      	ldr	r4, [r0, #8]
 800b08a:	ea22 0204 	bic.w	r2, r2, r4
 800b08e:	60da      	str	r2, [r3, #12]
    if(irq_mode != IRQ_Mode_None)
 800b090:	b121      	cbz	r1, 800b09c <gpio_irq_enable+0x3c>
        EXTI->IMR |= input->bit;    // Enable pin interrupt
 800b092:	4a0e      	ldr	r2, [pc, #56]	@ (800b0cc <gpio_irq_enable+0x6c>)
 800b094:	6813      	ldr	r3, [r2, #0]
 800b096:	6881      	ldr	r1, [r0, #8]
 800b098:	430b      	orrs	r3, r1
 800b09a:	6013      	str	r3, [r2, #0]
}
 800b09c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0a0:	4770      	bx	lr
        EXTI->RTSR &= ~input->bit;
 800b0a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b0cc <gpio_irq_enable+0x6c>)
 800b0a4:	689a      	ldr	r2, [r3, #8]
 800b0a6:	6884      	ldr	r4, [r0, #8]
 800b0a8:	ea22 0204 	bic.w	r2, r2, r4
 800b0ac:	609a      	str	r2, [r3, #8]
        EXTI->FTSR |= input->bit;
 800b0ae:	68da      	ldr	r2, [r3, #12]
 800b0b0:	6884      	ldr	r4, [r0, #8]
 800b0b2:	4322      	orrs	r2, r4
 800b0b4:	60da      	str	r2, [r3, #12]
 800b0b6:	e7eb      	b.n	800b090 <gpio_irq_enable+0x30>
        EXTI->RTSR |= input->bit;
 800b0b8:	4b04      	ldr	r3, [pc, #16]	@ (800b0cc <gpio_irq_enable+0x6c>)
 800b0ba:	689a      	ldr	r2, [r3, #8]
 800b0bc:	6884      	ldr	r4, [r0, #8]
 800b0be:	4322      	orrs	r2, r4
 800b0c0:	609a      	str	r2, [r3, #8]
        EXTI->FTSR |= input->bit;
 800b0c2:	68da      	ldr	r2, [r3, #12]
 800b0c4:	6884      	ldr	r4, [r0, #8]
 800b0c6:	4322      	orrs	r2, r4
 800b0c8:	60da      	str	r2, [r3, #12]
 800b0ca:	e7e1      	b.n	800b090 <gpio_irq_enable+0x30>
 800b0cc:	40013c00 	.word	0x40013c00

0800b0d0 <limitsEnable>:
{
 800b0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d4:	b082      	sub	sp, #8
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	4688      	mov	r8, r1
    bool disable = !on;
 800b0da:	f080 0701 	eor.w	r7, r0, #1
    uint_fast8_t idx = limit_inputs.n_pins;
 800b0de:	4b1c      	ldr	r3, [pc, #112]	@ (800b150 <limitsEnable+0x80>)
 800b0e0:	781c      	ldrb	r4, [r3, #0]
    limit_signals_t homing_source = xbar_get_homing_source_from_cycle(homing_cycle);
 800b0e2:	4608      	mov	r0, r1
 800b0e4:	f001 ffb4 	bl	800d050 <xbar_get_homing_source_from_cycle>
 800b0e8:	9001      	str	r0, [sp, #4]
    while(idx--) {
 800b0ea:	e019      	b.n	800b120 <limitsEnable+0x50>
            pin = xbar_fn_to_axismask(limit->id);
 800b0ec:	5c50      	ldrb	r0, [r2, r1]
 800b0ee:	f001 ff55 	bl	800cf9c <xbar_fn_to_axismask>
            disable = limit->group == PinGroup_Limit ? (pin.mask & homing_source.min.mask) : (pin.mask & homing_source.max.mask);
 800b0f2:	6923      	ldr	r3, [r4, #16]
 800b0f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0f8:	d006      	beq.n	800b108 <limitsEnable+0x38>
 800b0fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b0fe:	4203      	tst	r3, r0
 800b100:	bf14      	ite	ne
 800b102:	2701      	movne	r7, #1
 800b104:	2700      	moveq	r7, #0
 800b106:	e019      	b.n	800b13c <limitsEnable+0x6c>
 800b108:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b10c:	4203      	tst	r3, r0
 800b10e:	bf14      	ite	ne
 800b110:	2701      	movne	r7, #1
 800b112:	2700      	moveq	r7, #0
 800b114:	e012      	b.n	800b13c <limitsEnable+0x6c>
        gpio_irq_enable(limit, disable ? IRQ_Mode_None : limit->mode.irq_mode);
 800b116:	2100      	movs	r1, #0
 800b118:	4620      	mov	r0, r4
 800b11a:	f7ff ffa1 	bl	800b060 <gpio_irq_enable>
    while(idx--) {
 800b11e:	462c      	mov	r4, r5
 800b120:	1e65      	subs	r5, r4, #1
 800b122:	b18c      	cbz	r4, 800b148 <limitsEnable+0x78>
        limit = &limit_inputs.pins.inputs[idx];
 800b124:	4b0a      	ldr	r3, [pc, #40]	@ (800b150 <limitsEnable+0x80>)
 800b126:	685a      	ldr	r2, [r3, #4]
 800b128:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800b12c:	0099      	lsls	r1, r3, #2
 800b12e:	eb02 0483 	add.w	r4, r2, r3, lsl #2
        if(on && homing_cycle.mask) {
 800b132:	b11e      	cbz	r6, 800b13c <limitsEnable+0x6c>
 800b134:	fa5f f388 	uxtb.w	r3, r8
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1d7      	bne.n	800b0ec <limitsEnable+0x1c>
        gpio_irq_enable(limit, disable ? IRQ_Mode_None : limit->mode.irq_mode);
 800b13c:	2f00      	cmp	r7, #0
 800b13e:	d1ea      	bne.n	800b116 <limitsEnable+0x46>
 800b140:	88a1      	ldrh	r1, [r4, #4]
 800b142:	f3c1 1144 	ubfx	r1, r1, #5, #5
 800b146:	e7e7      	b.n	800b118 <limitsEnable+0x48>
}
 800b148:	b002      	add	sp, #8
 800b14a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b14e:	bf00      	nop
 800b150:	200007ac 	.word	0x200007ac

0800b154 <driver_init>:
{
 800b154:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b156:	b08d      	sub	sp, #52	@ 0x34
    HAL_RCC_GetClockConfig(&clock_cfg, &latency);
 800b158:	a907      	add	r1, sp, #28
 800b15a:	a802      	add	r0, sp, #8
 800b15c:	f7fe fd78 	bl	8009c50 <HAL_RCC_GetClockConfig>
    hal.info = "STM32F407";
 800b160:	4c9c      	ldr	r4, [pc, #624]	@ (800b3d4 <driver_init+0x280>)
 800b162:	4b9d      	ldr	r3, [pc, #628]	@ (800b3d8 <driver_init+0x284>)
 800b164:	6063      	str	r3, [r4, #4]
    hal.driver_version = "240624";
 800b166:	4b9d      	ldr	r3, [pc, #628]	@ (800b3dc <driver_init+0x288>)
 800b168:	60a3      	str	r3, [r4, #8]
    hal.driver_url = GRBL_URL "/STM32F4xx";
 800b16a:	4b9d      	ldr	r3, [pc, #628]	@ (800b3e0 <driver_init+0x28c>)
 800b16c:	6123      	str	r3, [r4, #16]
    hal.board = BOARD_NAME;
 800b16e:	4b9d      	ldr	r3, [pc, #628]	@ (800b3e4 <driver_init+0x290>)
 800b170:	6163      	str	r3, [r4, #20]
    hal.driver_setup = driver_setup;
 800b172:	4b9d      	ldr	r3, [pc, #628]	@ (800b3e8 <driver_init+0x294>)
 800b174:	6363      	str	r3, [r4, #52]	@ 0x34
    hal.f_mcu = HAL_RCC_GetHCLKFreq() / 1000000UL;
 800b176:	f7fe fd45 	bl	8009c04 <HAL_RCC_GetHCLKFreq>
 800b17a:	4b9c      	ldr	r3, [pc, #624]	@ (800b3ec <driver_init+0x298>)
 800b17c:	fba3 2300 	umull	r2, r3, r3, r0
 800b180:	0c9b      	lsrs	r3, r3, #18
 800b182:	6223      	str	r3, [r4, #32]
    hal.f_step_timer = HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock_cfg.APB1CLKDivider) / STEPPER_TIMER_DIV;
 800b184:	f7fe fd44 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 800b188:	9b05      	ldr	r3, [sp, #20]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d154      	bne.n	800b238 <driver_init+0xe4>
 800b18e:	2301      	movs	r3, #1
 800b190:	fb03 f200 	mul.w	r2, r3, r0
 800b194:	0892      	lsrs	r2, r2, #2
 800b196:	4b8f      	ldr	r3, [pc, #572]	@ (800b3d4 <driver_init+0x280>)
 800b198:	61da      	str	r2, [r3, #28]
    hal.rx_buffer_size = RX_BUFFER_SIZE;
 800b19a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b19e:	625a      	str	r2, [r3, #36]	@ 0x24
    hal.get_free_mem = get_free_mem;
 800b1a0:	4a93      	ldr	r2, [pc, #588]	@ (800b3f0 <driver_init+0x29c>)
 800b1a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hal.delay_ms = &driver_delay;
 800b1a4:	4a93      	ldr	r2, [pc, #588]	@ (800b3f4 <driver_init+0x2a0>)
 800b1a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hal.settings_changed = settings_changed;
 800b1a8:	4a93      	ldr	r2, [pc, #588]	@ (800b3f8 <driver_init+0x2a4>)
 800b1aa:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    cycles2us_factor = 0xFFFFFFFFU / hal.f_mcu;
 800b1ae:	6a19      	ldr	r1, [r3, #32]
 800b1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b4:	fbb2 f2f1 	udiv	r2, r2, r1
 800b1b8:	4990      	ldr	r1, [pc, #576]	@ (800b3fc <driver_init+0x2a8>)
 800b1ba:	600a      	str	r2, [r1, #0]
    hal.stepper.wake_up = stepperWakeUp;
 800b1bc:	4a90      	ldr	r2, [pc, #576]	@ (800b400 <driver_init+0x2ac>)
 800b1be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hal.stepper.go_idle = stepperGoIdle;
 800b1c2:	4a90      	ldr	r2, [pc, #576]	@ (800b404 <driver_init+0x2b0>)
 800b1c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hal.stepper.enable = stepperEnable;
 800b1c8:	4a8f      	ldr	r2, [pc, #572]	@ (800b408 <driver_init+0x2b4>)
 800b1ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    hal.stepper.cycles_per_tick = stepperCyclesPerTick;
 800b1ce:	4a8f      	ldr	r2, [pc, #572]	@ (800b40c <driver_init+0x2b8>)
 800b1d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    hal.stepper.pulse_start = stepperPulseStart;
 800b1d4:	4a8e      	ldr	r2, [pc, #568]	@ (800b410 <driver_init+0x2bc>)
 800b1d6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hal.stepper.motor_iterator = motor_iterator;
 800b1da:	4a8e      	ldr	r2, [pc, #568]	@ (800b414 <driver_init+0x2c0>)
 800b1dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    hal.limits.enable = limitsEnable;
 800b1e0:	4a8d      	ldr	r2, [pc, #564]	@ (800b418 <driver_init+0x2c4>)
 800b1e2:	655a      	str	r2, [r3, #84]	@ 0x54
    hal.limits.get_state = limitsGetState;
 800b1e4:	4a8d      	ldr	r2, [pc, #564]	@ (800b41c <driver_init+0x2c8>)
 800b1e6:	659a      	str	r2, [r3, #88]	@ 0x58
    hal.coolant.set_state = coolantSetState;
 800b1e8:	4a8d      	ldr	r2, [pc, #564]	@ (800b420 <driver_init+0x2cc>)
 800b1ea:	671a      	str	r2, [r3, #112]	@ 0x70
    hal.coolant.get_state = coolantGetState;
 800b1ec:	4a8d      	ldr	r2, [pc, #564]	@ (800b424 <driver_init+0x2d0>)
 800b1ee:	675a      	str	r2, [r3, #116]	@ 0x74
    hal.control.get_state = systemGetState;
 800b1f0:	4a8d      	ldr	r2, [pc, #564]	@ (800b428 <driver_init+0x2d4>)
 800b1f2:	669a      	str	r2, [r3, #104]	@ 0x68
    hal.irq_enable = __enable_irq;
 800b1f4:	4a8d      	ldr	r2, [pc, #564]	@ (800b42c <driver_init+0x2d8>)
 800b1f6:	649a      	str	r2, [r3, #72]	@ 0x48
    hal.irq_disable = __disable_irq;
 800b1f8:	4a8d      	ldr	r2, [pc, #564]	@ (800b430 <driver_init+0x2dc>)
 800b1fa:	64da      	str	r2, [r3, #76]	@ 0x4c
    hal.set_bits_atomic = bitsSetAtomic;
 800b1fc:	4a8d      	ldr	r2, [pc, #564]	@ (800b434 <driver_init+0x2e0>)
 800b1fe:	63da      	str	r2, [r3, #60]	@ 0x3c
    hal.clear_bits_atomic = bitsClearAtomic;
 800b200:	4a8d      	ldr	r2, [pc, #564]	@ (800b438 <driver_init+0x2e4>)
 800b202:	641a      	str	r2, [r3, #64]	@ 0x40
    hal.set_value_atomic = valueSetAtomic;
 800b204:	4a8d      	ldr	r2, [pc, #564]	@ (800b43c <driver_init+0x2e8>)
 800b206:	645a      	str	r2, [r3, #68]	@ 0x44
    hal.get_micros = getElapsedMicros;
 800b208:	4a8d      	ldr	r2, [pc, #564]	@ (800b440 <driver_init+0x2ec>)
 800b20a:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
    hal.get_elapsed_ticks = getElapsedTicks;
 800b20e:	4a8d      	ldr	r2, [pc, #564]	@ (800b444 <driver_init+0x2f0>)
 800b210:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
    hal.enumerate_pins = enumeratePins;
 800b214:	4a8c      	ldr	r2, [pc, #560]	@ (800b448 <driver_init+0x2f4>)
 800b216:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
    hal.periph_port.register_pin = registerPeriphPin;
 800b21a:	4a8c      	ldr	r2, [pc, #560]	@ (800b44c <driver_init+0x2f8>)
 800b21c:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
    hal.periph_port.set_pin_description = setPeriphPinDescription;
 800b220:	4a8b      	ldr	r2, [pc, #556]	@ (800b450 <driver_init+0x2fc>)
 800b222:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    serialRegisterStreams();
 800b226:	f001 fcd9 	bl	800cbdc <serialRegisterStreams>
    if(!stream_connect_instance(SERIAL_STREAM, BAUD_RATE))
 800b22a:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800b22e:	2000      	movs	r0, #0
 800b230:	f015 feac 	bl	8020f8c <stream_connect_instance>
 800b234:	b910      	cbnz	r0, 800b23c <driver_init+0xe8>
        while(true); // Cannot boot if no communication channel is available!
 800b236:	e7fe      	b.n	800b236 <driver_init+0xe2>
    hal.f_step_timer = HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock_cfg.APB1CLKDivider) / STEPPER_TIMER_DIV;
 800b238:	2302      	movs	r3, #2
 800b23a:	e7a9      	b.n	800b190 <driver_init+0x3c>
    hal.nvs.type = NVS_Flash;
 800b23c:	4b65      	ldr	r3, [pc, #404]	@ (800b3d4 <driver_init+0x280>)
 800b23e:	2203      	movs	r2, #3
 800b240:	f883 2174 	strb.w	r2, [r3, #372]	@ 0x174
    hal.nvs.memcpy_from_flash = memcpy_from_flash;
 800b244:	4a83      	ldr	r2, [pc, #524]	@ (800b454 <driver_init+0x300>)
 800b246:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
    hal.nvs.memcpy_to_flash = memcpy_to_flash;
 800b24a:	4a83      	ldr	r2, [pc, #524]	@ (800b458 <driver_init+0x304>)
 800b24c:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
    hal.signals_cap.reset = Off;
 800b250:	f893 21dc 	ldrb.w	r2, [r3, #476]	@ 0x1dc
 800b254:	f36f 0200 	bfc	r2, #0, #1
 800b258:	f883 21dc 	strb.w	r2, [r3, #476]	@ 0x1dc
    hal.signals_cap.feed_hold = Off;
 800b25c:	b2d2      	uxtb	r2, r2
 800b25e:	f36f 0241 	bfc	r2, #1, #1
 800b262:	f883 21dc 	strb.w	r2, [r3, #476]	@ 0x1dc
    hal.signals_cap.cycle_start = Off;
 800b266:	b2d2      	uxtb	r2, r2
 800b268:	f36f 0282 	bfc	r2, #2, #1
 800b26c:	f883 21dc 	strb.w	r2, [r3, #476]	@ 0x1dc

static inline limit_signals_t get_limits_cap (void)
{
    limit_signals_t limits = {0};
 800b270:	2400      	movs	r4, #0
 800b272:	9401      	str	r4, [sp, #4]

#if X_LIMIT_BIT
    limits.min.x = On;
 800b274:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b278:	f042 0201 	orr.w	r2, r2, #1
 800b27c:	f88d 2004 	strb.w	r2, [sp, #4]
#endif
#if Y_LIMIT_BIT
    limits.min.y = On;
 800b280:	b2d2      	uxtb	r2, r2
 800b282:	f042 0202 	orr.w	r2, r2, #2
 800b286:	f88d 2004 	strb.w	r2, [sp, #4]
#endif
#if Z_LIMIT_BIT
    limits.min.z = On;
 800b28a:	b2d2      	uxtb	r2, r2
 800b28c:	f042 0204 	orr.w	r2, r2, #4
 800b290:	f88d 2004 	strb.w	r2, [sp, #4]
#endif
#if V_LIMIT_BIT_MAX
    limits.max.v = On;
#endif

    return limits;
 800b294:	9a01      	ldr	r2, [sp, #4]
 800b296:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b298:	920a      	str	r2, [sp, #40]	@ 0x28
    hal.limits_cap = get_limits_cap();
 800b29a:	f8c3 21de 	str.w	r2, [r3, #478]	@ 0x1de
}

static inline home_signals_t get_home_cap (void)
{
    home_signals_t home = {0};
 800b29e:	f8ad 4004 	strh.w	r4, [sp, #4]
    home.b.z = On;
#endif

#endif // HOME_MASK

    return home;
 800b2a2:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
 800b2a6:	f8ad 4020 	strh.w	r4, [sp, #32]
    hal.home_cap = get_home_cap();
 800b2aa:	f8a3 41e2 	strh.w	r4, [r3, #482]	@ 0x1e2
    hal.coolant_cap.flood = On;
 800b2ae:	f893 21e4 	ldrb.w	r2, [r3, #484]	@ 0x1e4
 800b2b2:	f042 0201 	orr.w	r2, r2, #1
 800b2b6:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
    hal.coolant_cap.mist = On;
 800b2ba:	b2d2      	uxtb	r2, r2
 800b2bc:	f042 0202 	orr.w	r2, r2, #2
 800b2c0:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
    hal.driver_cap.software_debounce = On;
 800b2c4:	f893 21d8 	ldrb.w	r2, [r3, #472]	@ 0x1d8
 800b2c8:	f042 0201 	orr.w	r2, r2, #1
 800b2cc:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    hal.driver_cap.step_pulse_delay = On;
 800b2d0:	b2d2      	uxtb	r2, r2
 800b2d2:	f042 0202 	orr.w	r2, r2, #2
 800b2d6:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    hal.driver_cap.amass_level = 3;
 800b2da:	b2d2      	uxtb	r2, r2
 800b2dc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b2e0:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    hal.driver_cap.control_pull_up = On;
 800b2e4:	b2d2      	uxtb	r2, r2
 800b2e6:	f042 0208 	orr.w	r2, r2, #8
 800b2ea:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    hal.driver_cap.limits_pull_up = On;
 800b2ee:	b2d2      	uxtb	r2, r2
 800b2f0:	f042 0204 	orr.w	r2, r2, #4
 800b2f4:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800b2f8:	e0d2      	b.n	800b4a0 <driver_init+0x34c>
            if(aux_digital_in.pins.inputs == NULL)
 800b2fa:	4a58      	ldr	r2, [pc, #352]	@ (800b45c <driver_init+0x308>)
 800b2fc:	6852      	ldr	r2, [r2, #4]
 800b2fe:	2a00      	cmp	r2, #0
 800b300:	d062      	beq.n	800b3c8 <driver_init+0x274>
            input->user_port = aux_digital_in.n_pins++;
 800b302:	4d56      	ldr	r5, [pc, #344]	@ (800b45c <driver_init+0x308>)
 800b304:	782a      	ldrb	r2, [r5, #0]
 800b306:	1c56      	adds	r6, r2, #1
 800b308:	702e      	strb	r6, [r5, #0]
 800b30a:	4d55      	ldr	r5, [pc, #340]	@ (800b460 <driver_init+0x30c>)
 800b30c:	eb04 06c4 	add.w	r6, r4, r4, lsl #3
 800b310:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800b314:	f88c 2014 	strb.w	r2, [ip, #20]
            input->id = (pin_function_t)(Input_Aux0 + input->user_port);
 800b318:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
 800b31c:	f805 e026 	strb.w	lr, [r5, r6, lsl #2]
            input->mode.pull_mode = PullMode_Up;
 800b320:	f89c 5004 	ldrb.w	r5, [ip, #4]
 800b324:	2601      	movs	r6, #1
 800b326:	f366 05c4 	bfi	r5, r6, #3, #2
 800b32a:	f88c 5004 	strb.w	r5, [ip, #4]
            input->cap.pull_mode = PullMode_UpDown;
 800b32e:	f89c e002 	ldrb.w	lr, [ip, #2]
 800b332:	f04e 0e18 	orr.w	lr, lr, #24
 800b336:	f88c e002 	strb.w	lr, [ip, #2]
            if((input->cap.irq_mode = ((DRIVER_IRQMASK|aux_irq) & input->bit) ? IRQ_Mode_None : IRQ_Mode_Edges) != IRQ_Mode_None) {
 800b33a:	4d4a      	ldr	r5, [pc, #296]	@ (800b464 <driver_init+0x310>)
 800b33c:	682d      	ldr	r5, [r5, #0]
 800b33e:	f445 56c0 	orr.w	r6, r5, #6144	@ 0x1800
 800b342:	4230      	tst	r0, r6
 800b344:	d043      	beq.n	800b3ce <driver_init+0x27a>
 800b346:	2600      	movs	r6, #0
 800b348:	eb04 0ec4 	add.w	lr, r4, r4, lsl #3
 800b34c:	4f44      	ldr	r7, [pc, #272]	@ (800b460 <driver_init+0x30c>)
 800b34e:	eb07 0c8e 	add.w	ip, r7, lr, lsl #2
 800b352:	f8bc e002 	ldrh.w	lr, [ip, #2]
 800b356:	f366 1e49 	bfi	lr, r6, #5, #5
 800b35a:	f8ac e002 	strh.w	lr, [ip, #2]
 800b35e:	b166      	cbz	r6, 800b37a <driver_init+0x226>
                aux_irq |= input->bit;
 800b360:	4305      	orrs	r5, r0
 800b362:	4e40      	ldr	r6, [pc, #256]	@ (800b464 <driver_init+0x310>)
 800b364:	6035      	str	r5, [r6, #0]
                pin_irq[__builtin_ffs(input->bit) - 1] = input;
 800b366:	fa90 f5a0 	rbit	r5, r0
 800b36a:	fab5 f585 	clz	r5, r5
 800b36e:	b908      	cbnz	r0, 800b374 <driver_init+0x220>
 800b370:	f04f 35ff 	mov.w	r5, #4294967295
 800b374:	483c      	ldr	r0, [pc, #240]	@ (800b468 <driver_init+0x314>)
 800b376:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
            input->cap.debounce = !!input->cap.irq_mode;
 800b37a:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 800b37e:	4838      	ldr	r0, [pc, #224]	@ (800b460 <driver_init+0x30c>)
 800b380:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800b384:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 800b388:	f40c 7c78 	and.w	ip, ip, #992	@ 0x3e0
 800b38c:	f1bc 0c00 	subs.w	ip, ip, #0
 800b390:	bf18      	it	ne
 800b392:	f04f 0c01 	movne.w	ip, #1
 800b396:	78c5      	ldrb	r5, [r0, #3]
 800b398:	f36c 15c7 	bfi	r5, ip, #7, #1
 800b39c:	70c5      	strb	r5, [r0, #3]
            if((aux_remap = aux_ctrl_remap_explicit(input->port, input->pin, input->user_port, input))) {
 800b39e:	68c0      	ldr	r0, [r0, #12]
 800b3a0:	f7fe fe4a 	bl	800a038 <aux_ctrl_remap_explicit>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d07a      	beq.n	800b49e <driver_init+0x34a>
                if(aux_remap->function == Input_Probe && input->cap.irq_mode == IRQ_Mode_Edges)
 800b3a8:	7802      	ldrb	r2, [r0, #0]
 800b3aa:	2a0e      	cmp	r2, #14
 800b3ac:	d177      	bne.n	800b49e <driver_init+0x34a>
 800b3ae:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800b3b2:	4a2b      	ldr	r2, [pc, #172]	@ (800b460 <driver_init+0x30c>)
 800b3b4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b3b8:	8852      	ldrh	r2, [r2, #2]
 800b3ba:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
 800b3be:	2ae0      	cmp	r2, #224	@ 0xe0
 800b3c0:	d16d      	bne.n	800b49e <driver_init+0x34a>
                    aux_remap->irq_mode = IRQ_Mode_Change;
 800b3c2:	2204      	movs	r2, #4
 800b3c4:	7082      	strb	r2, [r0, #2]
 800b3c6:	e06a      	b.n	800b49e <driver_init+0x34a>
                aux_digital_in.pins.inputs = input;
 800b3c8:	4a24      	ldr	r2, [pc, #144]	@ (800b45c <driver_init+0x308>)
 800b3ca:	6053      	str	r3, [r2, #4]
 800b3cc:	e799      	b.n	800b302 <driver_init+0x1ae>
            if((input->cap.irq_mode = ((DRIVER_IRQMASK|aux_irq) & input->bit) ? IRQ_Mode_None : IRQ_Mode_Edges) != IRQ_Mode_None) {
 800b3ce:	2607      	movs	r6, #7
 800b3d0:	e7ba      	b.n	800b348 <driver_init+0x1f4>
 800b3d2:	bf00      	nop
 800b3d4:	20001a90 	.word	0x20001a90
 800b3d8:	080291d4 	.word	0x080291d4
 800b3dc:	080291e0 	.word	0x080291e0
 800b3e0:	080291e8 	.word	0x080291e8
 800b3e4:	08029210 	.word	0x08029210
 800b3e8:	0800ad31 	.word	0x0800ad31
 800b3ec:	431bde83 	.word	0x431bde83
 800b3f0:	0800af71 	.word	0x0800af71
 800b3f4:	0800af39 	.word	0x0800af39
 800b3f8:	0800a595 	.word	0x0800a595
 800b3fc:	200007c4 	.word	0x200007c4
 800b400:	0800a075 	.word	0x0800a075
 800b404:	0800a0b1 	.word	0x0800a0b1
 800b408:	0800a071 	.word	0x0800a071
 800b40c:	0800a0c5 	.word	0x0800a0c5
 800b410:	0800a0dd 	.word	0x0800a0dd
 800b414:	0800a011 	.word	0x0800a011
 800b418:	0800b0d1 	.word	0x0800b0d1
 800b41c:	0800a1f5 	.word	0x0800a1f5
 800b420:	0800a299 	.word	0x0800a299
 800b424:	0800a2c5 	.word	0x0800a2c5
 800b428:	0800a279 	.word	0x0800a279
 800b42c:	0800a009 	.word	0x0800a009
 800b430:	0800a00d 	.word	0x0800a00d
 800b434:	0800a2f1 	.word	0x0800a2f1
 800b438:	0800a2fd 	.word	0x0800a2fd
 800b43c:	0800a30f 	.word	0x0800a30f
 800b440:	0800a31d 	.word	0x0800a31d
 800b444:	0800a371 	.word	0x0800a371
 800b448:	0800a3ed 	.word	0x0800a3ed
 800b44c:	0800ace5 	.word	0x0800ace5
 800b450:	0800a555 	.word	0x0800a555
 800b454:	0800b6d9 	.word	0x0800b6d9
 800b458:	0800b6f5 	.word	0x0800b6f5
 800b45c:	20000760 	.word	0x20000760
 800b460:	200000f4 	.word	0x200000f4
 800b464:	200007b8 	.word	0x200007b8
 800b468:	20000768 	.word	0x20000768
            if(aux_analog_in.pins.inputs == NULL)
 800b46c:	4a50      	ldr	r2, [pc, #320]	@ (800b5b0 <driver_init+0x45c>)
 800b46e:	6852      	ldr	r2, [r2, #4]
 800b470:	2a00      	cmp	r2, #0
 800b472:	d047      	beq.n	800b504 <driver_init+0x3b0>
            input->id = (pin_function_t)(Input_Analog_Aux0 + aux_analog_in.n_pins++);
 800b474:	4a4e      	ldr	r2, [pc, #312]	@ (800b5b0 <driver_init+0x45c>)
 800b476:	7813      	ldrb	r3, [r2, #0]
 800b478:	1c59      	adds	r1, r3, #1
 800b47a:	7011      	strb	r1, [r2, #0]
 800b47c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800b480:	494c      	ldr	r1, [pc, #304]	@ (800b5b4 <driver_init+0x460>)
 800b482:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800b486:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 800b48a:	f801 2020 	strb.w	r2, [r1, r0, lsl #2]
            input->mode.analog = input->cap.analog = On;
 800b48e:	78da      	ldrb	r2, [r3, #3]
 800b490:	f042 0208 	orr.w	r2, r2, #8
 800b494:	70da      	strb	r2, [r3, #3]
 800b496:	795a      	ldrb	r2, [r3, #5]
 800b498:	f042 0208 	orr.w	r2, r2, #8
 800b49c:	715a      	strb	r2, [r3, #5]
    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800b49e:	3401      	adds	r4, #1
 800b4a0:	2c02      	cmp	r4, #2
 800b4a2:	d835      	bhi.n	800b510 <driver_init+0x3bc>
        input = &inputpin[i];
 800b4a4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800b4a8:	4b42      	ldr	r3, [pc, #264]	@ (800b5b4 <driver_init+0x460>)
 800b4aa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
        input->mode.input = input->cap.input = On;
 800b4ae:	789a      	ldrb	r2, [r3, #2]
 800b4b0:	f042 0201 	orr.w	r2, r2, #1
 800b4b4:	709a      	strb	r2, [r3, #2]
 800b4b6:	791a      	ldrb	r2, [r3, #4]
 800b4b8:	f042 0201 	orr.w	r2, r2, #1
 800b4bc:	711a      	strb	r2, [r3, #4]
        input->bit = 1 << input->pin;
 800b4be:	7999      	ldrb	r1, [r3, #6]
 800b4c0:	2001      	movs	r0, #1
 800b4c2:	4088      	lsls	r0, r1
 800b4c4:	6098      	str	r0, [r3, #8]
        if(input->group == PinGroup_AuxInput) {
 800b4c6:	691a      	ldr	r2, [r3, #16]
 800b4c8:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800b4cc:	f43f af15 	beq.w	800b2fa <driver_init+0x1a6>
        } else if(input->group == PinGroup_AuxInputAnalog) {
 800b4d0:	2a0a      	cmp	r2, #10
 800b4d2:	d0cb      	beq.n	800b46c <driver_init+0x318>
        }  else if(input->group & (PinGroup_Limit|PinGroup_LimitMax)) {
 800b4d4:	f412 6fc0 	tst.w	r2, #1536	@ 0x600
 800b4d8:	d0e1      	beq.n	800b49e <driver_init+0x34a>
            if(limit_inputs.pins.inputs == NULL)
 800b4da:	4a37      	ldr	r2, [pc, #220]	@ (800b5b8 <driver_init+0x464>)
 800b4dc:	6852      	ldr	r2, [r2, #4]
 800b4de:	b1a2      	cbz	r2, 800b50a <driver_init+0x3b6>
            if(LIMIT_MASK & input->bit)
 800b4e0:	f410 5fc0 	tst.w	r0, #6144	@ 0x1800
 800b4e4:	d009      	beq.n	800b4fa <driver_init+0x3a6>
                pin_irq[__builtin_ffs(input->bit) - 1] = input;
 800b4e6:	fa90 f2a0 	rbit	r2, r0
 800b4ea:	fab2 f282 	clz	r2, r2
 800b4ee:	b908      	cbnz	r0, 800b4f4 <driver_init+0x3a0>
 800b4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f4:	4931      	ldr	r1, [pc, #196]	@ (800b5bc <driver_init+0x468>)
 800b4f6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
            limit_inputs.n_pins++;
 800b4fa:	4a2f      	ldr	r2, [pc, #188]	@ (800b5b8 <driver_init+0x464>)
 800b4fc:	7813      	ldrb	r3, [r2, #0]
 800b4fe:	3301      	adds	r3, #1
 800b500:	7013      	strb	r3, [r2, #0]
 800b502:	e7cc      	b.n	800b49e <driver_init+0x34a>
                aux_analog_in.pins.inputs = input;
 800b504:	4a2a      	ldr	r2, [pc, #168]	@ (800b5b0 <driver_init+0x45c>)
 800b506:	6053      	str	r3, [r2, #4]
 800b508:	e7b4      	b.n	800b474 <driver_init+0x320>
                limit_inputs.pins.inputs = input;
 800b50a:	4a2b      	ldr	r2, [pc, #172]	@ (800b5b8 <driver_init+0x464>)
 800b50c:	6053      	str	r3, [r2, #4]
 800b50e:	e7e7      	b.n	800b4e0 <driver_init+0x38c>
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800b510:	2300      	movs	r3, #0
 800b512:	e00e      	b.n	800b532 <driver_init+0x3de>
            if(aux_digital_out.pins.outputs == NULL)
 800b514:	492a      	ldr	r1, [pc, #168]	@ (800b5c0 <driver_init+0x46c>)
 800b516:	6849      	ldr	r1, [r1, #4]
 800b518:	b379      	cbz	r1, 800b57a <driver_init+0x426>
            output->id = (pin_function_t)(Output_Aux0 + aux_digital_out.n_pins);
 800b51a:	4829      	ldr	r0, [pc, #164]	@ (800b5c0 <driver_init+0x46c>)
 800b51c:	7802      	ldrb	r2, [r0, #0]
 800b51e:	f102 0c77 	add.w	ip, r2, #119	@ 0x77
 800b522:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800b526:	4c27      	ldr	r4, [pc, #156]	@ (800b5c4 <driver_init+0x470>)
 800b528:	f804 c021 	strb.w	ip, [r4, r1, lsl #2]
            aux_digital_out.n_pins++;
 800b52c:	3201      	adds	r2, #1
 800b52e:	7002      	strb	r2, [r0, #0]
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800b530:	3301      	adds	r3, #1
 800b532:	2b07      	cmp	r3, #7
 800b534:	d827      	bhi.n	800b586 <driver_init+0x432>
        output = &outputpin[i];
 800b536:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800b53a:	4a22      	ldr	r2, [pc, #136]	@ (800b5c4 <driver_init+0x470>)
 800b53c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
        output->mode.output = On;
 800b540:	7c11      	ldrb	r1, [r2, #16]
 800b542:	f041 0102 	orr.w	r1, r1, #2
 800b546:	7411      	strb	r1, [r2, #16]
        if(output->group == PinGroup_AuxOutput) {
 800b548:	68d1      	ldr	r1, [r2, #12]
 800b54a:	2909      	cmp	r1, #9
 800b54c:	d0e2      	beq.n	800b514 <driver_init+0x3c0>
        } else if(output->group == PinGroup_AuxOutputAnalog) {
 800b54e:	290b      	cmp	r1, #11
 800b550:	d1ee      	bne.n	800b530 <driver_init+0x3dc>
            if(aux_analog_out.pins.outputs == NULL)
 800b552:	491d      	ldr	r1, [pc, #116]	@ (800b5c8 <driver_init+0x474>)
 800b554:	6849      	ldr	r1, [r1, #4]
 800b556:	b199      	cbz	r1, 800b580 <driver_init+0x42c>
            output->mode.analog = On;
 800b558:	491a      	ldr	r1, [pc, #104]	@ (800b5c4 <driver_init+0x470>)
 800b55a:	ebc3 00c3 	rsb	r0, r3, r3, lsl #3
 800b55e:	eb01 0480 	add.w	r4, r1, r0, lsl #2
 800b562:	7c62      	ldrb	r2, [r4, #17]
 800b564:	f042 0208 	orr.w	r2, r2, #8
 800b568:	7462      	strb	r2, [r4, #17]
            output->id = (pin_function_t)(Output_Analog_Aux0 + aux_analog_out.n_pins++);
 800b56a:	4c17      	ldr	r4, [pc, #92]	@ (800b5c8 <driver_init+0x474>)
 800b56c:	7822      	ldrb	r2, [r4, #0]
 800b56e:	1c55      	adds	r5, r2, #1
 800b570:	7025      	strb	r5, [r4, #0]
 800b572:	3a7d      	subs	r2, #125	@ 0x7d
 800b574:	f801 2020 	strb.w	r2, [r1, r0, lsl #2]
 800b578:	e7da      	b.n	800b530 <driver_init+0x3dc>
                aux_digital_out.pins.outputs = output;
 800b57a:	4911      	ldr	r1, [pc, #68]	@ (800b5c0 <driver_init+0x46c>)
 800b57c:	604a      	str	r2, [r1, #4]
 800b57e:	e7cc      	b.n	800b51a <driver_init+0x3c6>
                aux_analog_out.pins.outputs = output;
 800b580:	4911      	ldr	r1, [pc, #68]	@ (800b5c8 <driver_init+0x474>)
 800b582:	604a      	str	r2, [r1, #4]
 800b584:	e7e8      	b.n	800b558 <driver_init+0x404>
    if(aux_digital_in.n_pins || aux_digital_out.n_pins)
 800b586:	4b11      	ldr	r3, [pc, #68]	@ (800b5cc <driver_init+0x478>)
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	b913      	cbnz	r3, 800b592 <driver_init+0x43e>
 800b58c:	4b0c      	ldr	r3, [pc, #48]	@ (800b5c0 <driver_init+0x46c>)
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	b11b      	cbz	r3, 800b59a <driver_init+0x446>
        ioports_init(&aux_digital_in, &aux_digital_out);
 800b592:	490b      	ldr	r1, [pc, #44]	@ (800b5c0 <driver_init+0x46c>)
 800b594:	480d      	ldr	r0, [pc, #52]	@ (800b5cc <driver_init+0x478>)
 800b596:	f000 fd93 	bl	800c0c0 <ioports_init>
    extern void embroidery_init (void);
    embroidery_init();
#endif

    extern void my_plugin_init (void);
    my_plugin_init();
 800b59a:	f000 ff5b 	bl	800c454 <my_plugin_init>
    return hal.version == 10;
 800b59e:	4b0c      	ldr	r3, [pc, #48]	@ (800b5d0 <driver_init+0x47c>)
 800b5a0:	6818      	ldr	r0, [r3, #0]
}
 800b5a2:	280a      	cmp	r0, #10
 800b5a4:	bf14      	ite	ne
 800b5a6:	2000      	movne	r0, #0
 800b5a8:	2001      	moveq	r0, #1
 800b5aa:	b00d      	add	sp, #52	@ 0x34
 800b5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	20000758 	.word	0x20000758
 800b5b4:	200000f4 	.word	0x200000f4
 800b5b8:	200007ac 	.word	0x200007ac
 800b5bc:	20000768 	.word	0x20000768
 800b5c0:	20000750 	.word	0x20000750
 800b5c4:	20000014 	.word	0x20000014
 800b5c8:	20000748 	.word	0x20000748
 800b5cc:	20000760 	.word	0x20000760
 800b5d0:	20001a90 	.word	0x20001a90

0800b5d4 <TIM5_IRQHandler>:
{
 800b5d4:	b508      	push	{r3, lr}
    if((STEPPER_TIMER->SR & TIM_SR_UIF) != 0) {    // check interrupt source
 800b5d6:	4b07      	ldr	r3, [pc, #28]	@ (800b5f4 <TIM5_IRQHandler+0x20>)
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	f013 0f01 	tst.w	r3, #1
 800b5de:	d007      	beq.n	800b5f0 <TIM5_IRQHandler+0x1c>
        STEPPER_TIMER->SR = ~TIM_SR_UIF;            // clear UIF flag
 800b5e0:	4b04      	ldr	r3, [pc, #16]	@ (800b5f4 <TIM5_IRQHandler+0x20>)
 800b5e2:	f06f 0201 	mvn.w	r2, #1
 800b5e6:	611a      	str	r2, [r3, #16]
        hal.stepper.interrupt_callback();
 800b5e8:	4b03      	ldr	r3, [pc, #12]	@ (800b5f8 <TIM5_IRQHandler+0x24>)
 800b5ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b5ee:	4798      	blx	r3
}
 800b5f0:	bd08      	pop	{r3, pc}
 800b5f2:	bf00      	nop
 800b5f4:	40000c00 	.word	0x40000c00
 800b5f8:	20001a90 	.word	0x20001a90

0800b5fc <TIM4_IRQHandler>:
    PULSE_TIMER->SR &= ~TIM_SR_UIF;                 // Clear UIF flag
 800b5fc:	4b1e      	ldr	r3, [pc, #120]	@ (800b678 <TIM4_IRQHandler+0x7c>)
 800b5fe:	691a      	ldr	r2, [r3, #16]
 800b600:	f022 0201 	bic.w	r2, r2, #1
 800b604:	611a      	str	r2, [r3, #16]
    if(PULSE_TIMER->ARR == pulse_delay) {          // Delayed step pulse?
 800b606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b608:	4b1c      	ldr	r3, [pc, #112]	@ (800b67c <TIM4_IRQHandler+0x80>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d012      	beq.n	800b636 <TIM4_IRQHandler+0x3a>
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 800b610:	4b1b      	ldr	r3, [pc, #108]	@ (800b680 <TIM4_IRQHandler+0x84>)
 800b612:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 800b616:	f3c3 0100 	ubfx	r1, r3, #0, #1
 800b61a:	4a1a      	ldr	r2, [pc, #104]	@ (800b684 <TIM4_IRQHandler+0x88>)
 800b61c:	f882 10b4 	strb.w	r1, [r2, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 800b620:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800b624:	f882 10ac 	strb.w	r1, [r2, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 800b628:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b62c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800b630:	f882 3088 	strb.w	r3, [r2, #136]	@ 0x88
}
 800b634:	4770      	bx	lr
        PULSE_TIMER->ARR = pulse_length;
 800b636:	4b14      	ldr	r3, [pc, #80]	@ (800b688 <TIM4_IRQHandler+0x8c>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a0f      	ldr	r2, [pc, #60]	@ (800b678 <TIM4_IRQHandler+0x7c>)
 800b63c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 800b63e:	4b13      	ldr	r3, [pc, #76]	@ (800b68c <TIM4_IRQHandler+0x90>)
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	490f      	ldr	r1, [pc, #60]	@ (800b680 <TIM4_IRQHandler+0x84>)
 800b644:	f891 10e8 	ldrb.w	r1, [r1, #232]	@ 0xe8
 800b648:	404b      	eors	r3, r1
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 800b64a:	f3c3 0000 	ubfx	r0, r3, #0, #1
 800b64e:	490d      	ldr	r1, [pc, #52]	@ (800b684 <TIM4_IRQHandler+0x88>)
 800b650:	f881 00b4 	strb.w	r0, [r1, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 800b654:	f3c3 0040 	ubfx	r0, r3, #1, #1
 800b658:	f881 00ac 	strb.w	r0, [r1, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 800b65c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b660:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 800b664:	f881 3088 	strb.w	r3, [r1, #136]	@ 0x88
        PULSE_TIMER->EGR = TIM_EGR_UG;
 800b668:	2301      	movs	r3, #1
 800b66a:	6153      	str	r3, [r2, #20]
        PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 800b66c:	6813      	ldr	r3, [r2, #0]
 800b66e:	f043 0301 	orr.w	r3, r3, #1
 800b672:	6013      	str	r3, [r2, #0]
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	40000800 	.word	0x40000800
 800b67c:	200007bc 	.word	0x200007bc
 800b680:	200024a8 	.word	0x200024a8
 800b684:	42418200 	.word	0x42418200
 800b688:	200007c0 	.word	0x200007c0
 800b68c:	200007a8 	.word	0x200007a8

0800b690 <EXTI15_10_IRQHandler>:
#endif

#if (DRIVER_IRQMASK|AUXINPUT_MASK) & (0xFC00)

void EXTI15_10_IRQHandler(void)
{
 800b690:	b508      	push	{r3, lr}
    uint32_t ifg = __HAL_GPIO_EXTI_GET_IT(0xFC00);
 800b692:	4b07      	ldr	r3, [pc, #28]	@ (800b6b0 <EXTI15_10_IRQHandler+0x20>)
 800b694:	695b      	ldr	r3, [r3, #20]

    if(ifg) {
 800b696:	f413 407c 	ands.w	r0, r3, #64512	@ 0xfc00
 800b69a:	d004      	beq.n	800b6a6 <EXTI15_10_IRQHandler+0x16>
        __HAL_GPIO_EXTI_CLEAR_IT(ifg);
 800b69c:	4a04      	ldr	r2, [pc, #16]	@ (800b6b0 <EXTI15_10_IRQHandler+0x20>)
 800b69e:	6150      	str	r0, [r2, #20]
#if CONTROL_MASK & 0xFC00
        if(ifg & CONTROL_MASK)
            hal.control.interrupt_callback(systemGetState());
#endif
#if LIMIT_MASK & 0xFC00
        if(ifg & LIMIT_MASK)
 800b6a0:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 800b6a4:	d100      	bne.n	800b6a8 <EXTI15_10_IRQHandler+0x18>
#if AUXINPUT_MASK & 0xFC00
        if(ifg & aux_irq)
            aux_pin_irq(ifg & aux_irq);
#endif
    }
}
 800b6a6:	bd08      	pop	{r3, pc}
            core_pin_irq(ifg);
 800b6a8:	f7ff fcb2 	bl	800b010 <core_pin_irq>
}
 800b6ac:	e7fb      	b.n	800b6a6 <EXTI15_10_IRQHandler+0x16>
 800b6ae:	bf00      	nop
 800b6b0:	40013c00 	.word	0x40013c00

0800b6b4 <Driver_IncTick>:

#endif

// Interrupt handler for 1 ms interval timer
void Driver_IncTick (void)
{
 800b6b4:	b508      	push	{r3, lr}
            }
        }
    }
#endif

    if(delay.ms && !(--delay.ms)) {
 800b6b6:	4b07      	ldr	r3, [pc, #28]	@ (800b6d4 <Driver_IncTick+0x20>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	b153      	cbz	r3, 800b6d2 <Driver_IncTick+0x1e>
 800b6bc:	4a05      	ldr	r2, [pc, #20]	@ (800b6d4 <Driver_IncTick+0x20>)
 800b6be:	6813      	ldr	r3, [r2, #0]
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	6013      	str	r3, [r2, #0]
 800b6c4:	b92b      	cbnz	r3, 800b6d2 <Driver_IncTick+0x1e>
        if(delay.callback) {
 800b6c6:	6853      	ldr	r3, [r2, #4]
 800b6c8:	b11b      	cbz	r3, 800b6d2 <Driver_IncTick+0x1e>
            delay.callback();
 800b6ca:	4798      	blx	r3
            delay.callback = NULL;
 800b6cc:	4b01      	ldr	r3, [pc, #4]	@ (800b6d4 <Driver_IncTick+0x20>)
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	605a      	str	r2, [r3, #4]
        }
    }
}
 800b6d2:	bd08      	pop	{r3, pc}
 800b6d4:	2000000c 	.word	0x2000000c

0800b6d8 <memcpy_from_flash>:

extern void *_EEPROM_Emul_Start;
extern uint8_t _EEPROM_Emul_Sector;

bool memcpy_from_flash (uint8_t *dest)
{
 800b6d8:	b508      	push	{r3, lr}
    memcpy(dest, &_EEPROM_Emul_Start, hal.nvs.size);
 800b6da:	4b04      	ldr	r3, [pc, #16]	@ (800b6ec <memcpy_from_flash+0x14>)
 800b6dc:	f8d3 2178 	ldr.w	r2, [r3, #376]	@ 0x178
 800b6e0:	4903      	ldr	r1, [pc, #12]	@ (800b6f0 <memcpy_from_flash+0x18>)
 800b6e2:	f019 fc84 	bl	8024fee <memcpy>

    return true;
}
 800b6e6:	2001      	movs	r0, #1
 800b6e8:	bd08      	pop	{r3, pc}
 800b6ea:	bf00      	nop
 800b6ec:	20001a90 	.word	0x20001a90
 800b6f0:	08004000 	.word	0x08004000

0800b6f4 <memcpy_to_flash>:

bool memcpy_to_flash (uint8_t *source)
{
 800b6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f8:	b082      	sub	sp, #8
 800b6fa:	4605      	mov	r5, r0
    if (!memcmp(source, &_EEPROM_Emul_Start, hal.nvs.size))
 800b6fc:	4b21      	ldr	r3, [pc, #132]	@ (800b784 <memcpy_to_flash+0x90>)
 800b6fe:	f8d3 2178 	ldr.w	r2, [r3, #376]	@ 0x178
 800b702:	4921      	ldr	r1, [pc, #132]	@ (800b788 <memcpy_to_flash+0x94>)
 800b704:	f019 fae9 	bl	8024cda <memcmp>
 800b708:	b918      	cbnz	r0, 800b712 <memcpy_to_flash+0x1e>
        return true;
 800b70a:	2001      	movs	r0, #1

        HAL_FLASH_Lock();
    }

    return status == HAL_OK;
}
 800b70c:	b002      	add	sp, #8
 800b70e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((status = HAL_FLASH_Unlock()) == HAL_OK) {
 800b712:	f7fd fd39 	bl	8009188 <HAL_FLASH_Unlock>
 800b716:	4604      	mov	r4, r0
 800b718:	b118      	cbz	r0, 800b722 <memcpy_to_flash+0x2e>
    return status == HAL_OK;
 800b71a:	fab4 f084 	clz	r0, r4
 800b71e:	0940      	lsrs	r0, r0, #5
 800b720:	e7f4      	b.n	800b70c <memcpy_to_flash+0x18>
        if((status = HAL_FLASHEx_Erase(&erase, &error)) != HAL_OK)
 800b722:	a901      	add	r1, sp, #4
 800b724:	4819      	ldr	r0, [pc, #100]	@ (800b78c <memcpy_to_flash+0x98>)
 800b726:	f7fd fe27 	bl	8009378 <HAL_FLASHEx_Erase>
 800b72a:	4604      	mov	r4, r0
 800b72c:	b920      	cbnz	r0, 800b738 <memcpy_to_flash+0x44>
        uint32_t address = (uint32_t)&_EEPROM_Emul_Start, remaining = (uint32_t)hal.nvs.size;
 800b72e:	4f16      	ldr	r7, [pc, #88]	@ (800b788 <memcpy_to_flash+0x94>)
 800b730:	4b14      	ldr	r3, [pc, #80]	@ (800b784 <memcpy_to_flash+0x90>)
 800b732:	f8d3 8178 	ldr.w	r8, [r3, #376]	@ 0x178
        while(remaining && status == HAL_OK) {
 800b736:	e009      	b.n	800b74c <memcpy_to_flash+0x58>
            status = HAL_FLASHEx_Erase(&erase, &error);
 800b738:	a901      	add	r1, sp, #4
 800b73a:	4814      	ldr	r0, [pc, #80]	@ (800b78c <memcpy_to_flash+0x98>)
 800b73c:	f7fd fe1c 	bl	8009378 <HAL_FLASHEx_Erase>
 800b740:	4604      	mov	r4, r0
 800b742:	e7f4      	b.n	800b72e <memcpy_to_flash+0x3a>
            address += 4;
 800b744:	3704      	adds	r7, #4
            remaining -= 4;
 800b746:	f1a8 0804 	sub.w	r8, r8, #4
 800b74a:	4635      	mov	r5, r6
        while(remaining && status == HAL_OK) {
 800b74c:	f1b8 0f00 	cmp.w	r8, #0
 800b750:	d014      	beq.n	800b77c <memcpy_to_flash+0x88>
 800b752:	b99c      	cbnz	r4, 800b77c <memcpy_to_flash+0x88>
            if((status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data++)) == HAL_OK)
 800b754:	462e      	mov	r6, r5
 800b756:	f836 2b02 	ldrh.w	r2, [r6], #2
 800b75a:	2300      	movs	r3, #0
 800b75c:	4639      	mov	r1, r7
 800b75e:	2001      	movs	r0, #1
 800b760:	f7fd fd64 	bl	800922c <HAL_FLASH_Program>
 800b764:	4604      	mov	r4, r0
 800b766:	2800      	cmp	r0, #0
 800b768:	d1ec      	bne.n	800b744 <memcpy_to_flash+0x50>
                status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, *data++);
 800b76a:	1d2e      	adds	r6, r5, #4
 800b76c:	886a      	ldrh	r2, [r5, #2]
 800b76e:	2300      	movs	r3, #0
 800b770:	1cb9      	adds	r1, r7, #2
 800b772:	2001      	movs	r0, #1
 800b774:	f7fd fd5a 	bl	800922c <HAL_FLASH_Program>
 800b778:	4604      	mov	r4, r0
 800b77a:	e7e3      	b.n	800b744 <memcpy_to_flash+0x50>
        HAL_FLASH_Lock();
 800b77c:	f7fd fd1c 	bl	80091b8 <HAL_FLASH_Lock>
 800b780:	e7cb      	b.n	800b71a <memcpy_to_flash+0x26>
 800b782:	bf00      	nop
 800b784:	20001a90 	.word	0x20001a90
 800b788:	08004000 	.word	0x08004000
 800b78c:	20000160 	.word	0x20000160

0800b790 <digital_out>:
    return output->id < digital.out.n_ports;
}

static void digital_out (uint8_t port, bool on)
{
    if(port < digital.out.n_ports) {
 800b790:	4b0d      	ldr	r3, [pc, #52]	@ (800b7c8 <digital_out+0x38>)
 800b792:	7b1b      	ldrb	r3, [r3, #12]
 800b794:	4283      	cmp	r3, r0
 800b796:	d916      	bls.n	800b7c6 <digital_out+0x36>
        port = ioports_map(digital.out, port);
 800b798:	4b0b      	ldr	r3, [pc, #44]	@ (800b7c8 <digital_out+0x38>)
 800b79a:	691b      	ldr	r3, [r3, #16]
 800b79c:	b103      	cbz	r3, 800b7a0 <digital_out+0x10>
 800b79e:	5c18      	ldrb	r0, [r3, r0]
        DIGITAL_OUT(aux_out[port].port, aux_out[port].pin, aux_out[port].mode.inverted ? !on : on);
 800b7a0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800b7a4:	4b09      	ldr	r3, [pc, #36]	@ (800b7cc <digital_out+0x3c>)
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800b7ac:	7c53      	ldrb	r3, [r2, #17]
 800b7ae:	f013 0f04 	tst.w	r3, #4
 800b7b2:	d001      	beq.n	800b7b8 <digital_out+0x28>
 800b7b4:	f081 0101 	eor.w	r1, r1, #1
 800b7b8:	6850      	ldr	r0, [r2, #4]
 800b7ba:	4b05      	ldr	r3, [pc, #20]	@ (800b7d0 <digital_out+0x40>)
 800b7bc:	4403      	add	r3, r0
 800b7be:	015b      	lsls	r3, r3, #5
 800b7c0:	7a12      	ldrb	r2, [r2, #8]
 800b7c2:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    }
}
 800b7c6:	4770      	bx	lr
 800b7c8:	20000804 	.word	0x20000804
 800b7cc:	200007fc 	.word	0x200007fc
 800b7d0:	c2100014 	.word	0xc2100014

0800b7d4 <digital_out_state>:

static float digital_out_state (xbar_t *output)
{
    float value = -1.0f;

    if(output->id < digital.out.n_ports)
 800b7d4:	7803      	ldrb	r3, [r0, #0]
 800b7d6:	4a0f      	ldr	r2, [pc, #60]	@ (800b814 <digital_out_state+0x40>)
 800b7d8:	7b12      	ldrb	r2, [r2, #12]
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d217      	bcs.n	800b80e <digital_out_state+0x3a>
        value = (float)(DIGITAL_IN(aux_out[output->id].port, aux_out[output->id].pin) ^ aux_out[output->id].mode.inverted);
 800b7de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b7e2:	4a0d      	ldr	r2, [pc, #52]	@ (800b818 <digital_out_state+0x44>)
 800b7e4:	6812      	ldr	r2, [r2, #0]
 800b7e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b7ea:	6853      	ldr	r3, [r2, #4]
 800b7ec:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800b7f0:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800b7f4:	015b      	lsls	r3, r3, #5
 800b7f6:	7a11      	ldrb	r1, [r2, #8]
 800b7f8:	f813 3021 	ldrb.w	r3, [r3, r1, lsl #2]
 800b7fc:	7c52      	ldrb	r2, [r2, #17]
 800b7fe:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800b802:	4053      	eors	r3, r2
 800b804:	ee00 3a10 	vmov	s0, r3
 800b808:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b80c:	4770      	bx	lr
    float value = -1.0f;
 800b80e:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0

    return value;
}
 800b812:	4770      	bx	lr
 800b814:	20000804 	.word	0x20000804
 800b818:	200007fc 	.word	0x200007fc

0800b81c <digital_in_state>:

static float digital_in_state (xbar_t *input)
{
    float value = -1.0f;

    if(input->id < digital.in.n_ports)
 800b81c:	7803      	ldrb	r3, [r0, #0]
 800b81e:	4a0f      	ldr	r2, [pc, #60]	@ (800b85c <digital_in_state+0x40>)
 800b820:	7912      	ldrb	r2, [r2, #4]
 800b822:	4293      	cmp	r3, r2
 800b824:	d217      	bcs.n	800b856 <digital_in_state+0x3a>
        value = (float)(DIGITAL_IN(aux_in[input->id].port, aux_in[input->id].pin) ^ aux_in[input->id].mode.inverted);
 800b826:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800b82a:	4a0d      	ldr	r2, [pc, #52]	@ (800b860 <digital_in_state+0x44>)
 800b82c:	6812      	ldr	r2, [r2, #0]
 800b82e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b832:	68d3      	ldr	r3, [r2, #12]
 800b834:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800b838:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800b83c:	015b      	lsls	r3, r3, #5
 800b83e:	7991      	ldrb	r1, [r2, #6]
 800b840:	f813 3021 	ldrb.w	r3, [r3, r1, lsl #2]
 800b844:	7952      	ldrb	r2, [r2, #5]
 800b846:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800b84a:	4053      	eors	r3, r2
 800b84c:	ee00 3a10 	vmov	s0, r3
 800b850:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b854:	4770      	bx	lr
    float value = -1.0f;
 800b856:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0

    return value;
}
 800b85a:	4770      	bx	lr
 800b85c:	20000804 	.word	0x20000804
 800b860:	20000800 	.word	0x20000800

0800b864 <get_pin_info>:
{
    static xbar_t pin;

    xbar_t *info = NULL;

    if(type == Port_Digital) {
 800b864:	2801      	cmp	r0, #1
 800b866:	d16f      	bne.n	800b948 <get_pin_info+0xe4>
{
 800b868:	b530      	push	{r4, r5, lr}

        if(dir == Port_Input && port < digital.in.n_ports) {
 800b86a:	2900      	cmp	r1, #0
 800b86c:	d136      	bne.n	800b8dc <get_pin_info+0x78>
 800b86e:	4b37      	ldr	r3, [pc, #220]	@ (800b94c <get_pin_info+0xe8>)
 800b870:	791b      	ldrb	r3, [r3, #4]
 800b872:	4293      	cmp	r3, r2
 800b874:	d936      	bls.n	800b8e4 <get_pin_info+0x80>
            XBAR_SET_DIN_INFO(pin, ioports_map(digital.in, port), aux_in[pin.id], digital_in_cfg, digital_in_state);
 800b876:	4b35      	ldr	r3, [pc, #212]	@ (800b94c <get_pin_info+0xe8>)
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d02c      	beq.n	800b8d8 <get_pin_info+0x74>
 800b87e:	5c9b      	ldrb	r3, [r3, r2]
 800b880:	4833      	ldr	r0, [pc, #204]	@ (800b950 <get_pin_info+0xec>)
 800b882:	7003      	strb	r3, [r0, #0]
 800b884:	eb03 0ec3 	add.w	lr, r3, r3, lsl #3
 800b888:	4b32      	ldr	r3, [pc, #200]	@ (800b954 <get_pin_info+0xf0>)
 800b88a:	681c      	ldr	r4, [r3, #0]
 800b88c:	eb04 038e 	add.w	r3, r4, lr, lsl #2
 800b890:	889d      	ldrh	r5, [r3, #4]
 800b892:	82c5      	strh	r5, [r0, #22]
 800b894:	885d      	ldrh	r5, [r3, #2]
 800b896:	8285      	strh	r5, [r0, #20]
 800b898:	f890 c015 	ldrb.w	ip, [r0, #21]
 800b89c:	f04c 0c04 	orr.w	ip, ip, #4
 800b8a0:	f880 c015 	strb.w	ip, [r0, #21]
 800b8a4:	f893 c005 	ldrb.w	ip, [r3, #5]
 800b8a8:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 800b8ac:	f08c 0c01 	eor.w	ip, ip, #1
 800b8b0:	7d45      	ldrb	r5, [r0, #21]
 800b8b2:	f36c 1586 	bfi	r5, ip, #6, #1
 800b8b6:	7545      	strb	r5, [r0, #21]
 800b8b8:	f814 402e 	ldrb.w	r4, [r4, lr, lsl #2]
 800b8bc:	7044      	strb	r4, [r0, #1]
 800b8be:	691c      	ldr	r4, [r3, #16]
 800b8c0:	6044      	str	r4, [r0, #4]
 800b8c2:	799c      	ldrb	r4, [r3, #6]
 800b8c4:	6104      	str	r4, [r0, #16]
 800b8c6:	68dc      	ldr	r4, [r3, #12]
 800b8c8:	6084      	str	r4, [r0, #8]
 800b8ca:	6a1b      	ldr	r3, [r3, #32]
 800b8cc:	60c3      	str	r3, [r0, #12]
 800b8ce:	4b22      	ldr	r3, [pc, #136]	@ (800b958 <get_pin_info+0xf4>)
 800b8d0:	6183      	str	r3, [r0, #24]
 800b8d2:	4b22      	ldr	r3, [pc, #136]	@ (800b95c <get_pin_info+0xf8>)
 800b8d4:	61c3      	str	r3, [r0, #28]
            info = &pin;
 800b8d6:	e002      	b.n	800b8de <get_pin_info+0x7a>
            XBAR_SET_DIN_INFO(pin, ioports_map(digital.in, port), aux_in[pin.id], digital_in_cfg, digital_in_state);
 800b8d8:	4613      	mov	r3, r2
 800b8da:	e7d1      	b.n	800b880 <get_pin_info+0x1c>
    xbar_t *info = NULL;
 800b8dc:	2000      	movs	r0, #0
        }

        if(dir == Port_Output && port < digital.out.n_ports) {
 800b8de:	2901      	cmp	r1, #1
 800b8e0:	d002      	beq.n	800b8e8 <get_pin_info+0x84>
            info = &pin;
        }
    }

    return info;
}
 800b8e2:	bd30      	pop	{r4, r5, pc}
    xbar_t *info = NULL;
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	e7fa      	b.n	800b8de <get_pin_info+0x7a>
        if(dir == Port_Output && port < digital.out.n_ports) {
 800b8e8:	4b18      	ldr	r3, [pc, #96]	@ (800b94c <get_pin_info+0xe8>)
 800b8ea:	7b1b      	ldrb	r3, [r3, #12]
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d9f8      	bls.n	800b8e2 <get_pin_info+0x7e>
            XBAR_SET_DOUT_INFO(pin, ioports_map(digital.out, port), aux_out[pin.id], digital_out_cfg, digital_out_state);
 800b8f0:	4b16      	ldr	r3, [pc, #88]	@ (800b94c <get_pin_info+0xe8>)
 800b8f2:	691b      	ldr	r3, [r3, #16]
 800b8f4:	b103      	cbz	r3, 800b8f8 <get_pin_info+0x94>
 800b8f6:	5c9a      	ldrb	r2, [r3, r2]
 800b8f8:	4815      	ldr	r0, [pc, #84]	@ (800b950 <get_pin_info+0xec>)
 800b8fa:	7002      	strb	r2, [r0, #0]
 800b8fc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b900:	4b17      	ldr	r3, [pc, #92]	@ (800b960 <get_pin_info+0xfc>)
 800b902:	681c      	ldr	r4, [r3, #0]
 800b904:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b908:	8a19      	ldrh	r1, [r3, #16]
 800b90a:	82c1      	strh	r1, [r0, #22]
 800b90c:	8a19      	ldrh	r1, [r3, #16]
 800b90e:	8281      	strh	r1, [r0, #20]
 800b910:	7d41      	ldrb	r1, [r0, #21]
 800b912:	f041 0104 	orr.w	r1, r1, #4
 800b916:	7541      	strb	r1, [r0, #21]
 800b918:	7c59      	ldrb	r1, [r3, #17]
 800b91a:	0989      	lsrs	r1, r1, #6
 800b91c:	f081 0101 	eor.w	r1, r1, #1
 800b920:	7d45      	ldrb	r5, [r0, #21]
 800b922:	f361 1586 	bfi	r5, r1, #6, #1
 800b926:	7545      	strb	r5, [r0, #21]
 800b928:	f814 2022 	ldrb.w	r2, [r4, r2, lsl #2]
 800b92c:	7042      	strb	r2, [r0, #1]
 800b92e:	68da      	ldr	r2, [r3, #12]
 800b930:	6042      	str	r2, [r0, #4]
 800b932:	7a1a      	ldrb	r2, [r3, #8]
 800b934:	6102      	str	r2, [r0, #16]
 800b936:	685a      	ldr	r2, [r3, #4]
 800b938:	6082      	str	r2, [r0, #8]
 800b93a:	695b      	ldr	r3, [r3, #20]
 800b93c:	60c3      	str	r3, [r0, #12]
 800b93e:	4b09      	ldr	r3, [pc, #36]	@ (800b964 <get_pin_info+0x100>)
 800b940:	6183      	str	r3, [r0, #24]
 800b942:	4b09      	ldr	r3, [pc, #36]	@ (800b968 <get_pin_info+0x104>)
 800b944:	61c3      	str	r3, [r0, #28]
            info = &pin;
 800b946:	e7cc      	b.n	800b8e2 <get_pin_info+0x7e>
    xbar_t *info = NULL;
 800b948:	2000      	movs	r0, #0
}
 800b94a:	4770      	bx	lr
 800b94c:	20000804 	.word	0x20000804
 800b950:	200007d0 	.word	0x200007d0
 800b954:	20000800 	.word	0x20000800
 800b958:	0800babd 	.word	0x0800babd
 800b95c:	0800b81d 	.word	0x0800b81d
 800b960:	200007fc 	.word	0x200007fc
 800b964:	0800b9dd 	.word	0x0800b9dd
 800b968:	0800b7d5 	.word	0x0800b7d5

0800b96c <set_pin_description>:

static void set_pin_description (io_port_type_t type, io_port_direction_t dir, uint8_t port, const char *s)
{
    if(type == Port_Digital) {
 800b96c:	2801      	cmp	r0, #1
 800b96e:	d000      	beq.n	800b972 <set_pin_description+0x6>
 800b970:	4770      	bx	lr
{
 800b972:	b410      	push	{r4}
        if(dir == Port_Input && port < digital.in.n_ports)
 800b974:	b971      	cbnz	r1, 800b994 <set_pin_description+0x28>
 800b976:	4816      	ldr	r0, [pc, #88]	@ (800b9d0 <set_pin_description+0x64>)
 800b978:	7900      	ldrb	r0, [r0, #4]
 800b97a:	4290      	cmp	r0, r2
 800b97c:	d90a      	bls.n	800b994 <set_pin_description+0x28>
            aux_in[ioports_map(digital.in, port)].description = s;
 800b97e:	4815      	ldr	r0, [pc, #84]	@ (800b9d4 <set_pin_description+0x68>)
 800b980:	6804      	ldr	r4, [r0, #0]
 800b982:	4813      	ldr	r0, [pc, #76]	@ (800b9d0 <set_pin_description+0x64>)
 800b984:	6880      	ldr	r0, [r0, #8]
 800b986:	b150      	cbz	r0, 800b99e <set_pin_description+0x32>
 800b988:	5c80      	ldrb	r0, [r0, r2]
 800b98a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800b98e:	0080      	lsls	r0, r0, #2
 800b990:	4420      	add	r0, r4
 800b992:	6203      	str	r3, [r0, #32]
        if(dir == Port_Output && port < digital.out.n_ports)
 800b994:	2901      	cmp	r1, #1
 800b996:	d006      	beq.n	800b9a6 <set_pin_description+0x3a>
            aux_out[ioports_map(digital.out, port)].description = s;
    }
}
 800b998:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b99c:	4770      	bx	lr
            aux_in[ioports_map(digital.in, port)].description = s;
 800b99e:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
 800b9a2:	0080      	lsls	r0, r0, #2
 800b9a4:	e7f4      	b.n	800b990 <set_pin_description+0x24>
        if(dir == Port_Output && port < digital.out.n_ports)
 800b9a6:	490a      	ldr	r1, [pc, #40]	@ (800b9d0 <set_pin_description+0x64>)
 800b9a8:	7b09      	ldrb	r1, [r1, #12]
 800b9aa:	4291      	cmp	r1, r2
 800b9ac:	d9f4      	bls.n	800b998 <set_pin_description+0x2c>
            aux_out[ioports_map(digital.out, port)].description = s;
 800b9ae:	490a      	ldr	r1, [pc, #40]	@ (800b9d8 <set_pin_description+0x6c>)
 800b9b0:	6809      	ldr	r1, [r1, #0]
 800b9b2:	4807      	ldr	r0, [pc, #28]	@ (800b9d0 <set_pin_description+0x64>)
 800b9b4:	6900      	ldr	r0, [r0, #16]
 800b9b6:	b130      	cbz	r0, 800b9c6 <set_pin_description+0x5a>
 800b9b8:	5c82      	ldrb	r2, [r0, r2]
 800b9ba:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b9be:	0092      	lsls	r2, r2, #2
 800b9c0:	440a      	add	r2, r1
 800b9c2:	6153      	str	r3, [r2, #20]
}
 800b9c4:	e7e8      	b.n	800b998 <set_pin_description+0x2c>
            aux_out[ioports_map(digital.out, port)].description = s;
 800b9c6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b9ca:	0092      	lsls	r2, r2, #2
 800b9cc:	e7f8      	b.n	800b9c0 <set_pin_description+0x54>
 800b9ce:	bf00      	nop
 800b9d0:	20000804 	.word	0x20000804
 800b9d4:	20000800 	.word	0x20000800
 800b9d8:	200007fc 	.word	0x200007fc

0800b9dc <digital_out_cfg>:
{
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	4604      	mov	r4, r0
    if(output->id < digital.out.n_ports) {
 800b9e0:	7803      	ldrb	r3, [r0, #0]
 800b9e2:	4833      	ldr	r0, [pc, #204]	@ (800bab0 <digital_out_cfg+0xd4>)
 800b9e4:	7b00      	ldrb	r0, [r0, #12]
 800b9e6:	4283      	cmp	r3, r0
 800b9e8:	d248      	bcs.n	800ba7c <digital_out_cfg+0xa0>
        if(config->inverted != aux_out[output->id].mode.inverted) {
 800b9ea:	780d      	ldrb	r5, [r1, #0]
 800b9ec:	4831      	ldr	r0, [pc, #196]	@ (800bab4 <digital_out_cfg+0xd8>)
 800b9ee:	6800      	ldr	r0, [r0, #0]
 800b9f0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b9f4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b9f8:	f893 c011 	ldrb.w	ip, [r3, #17]
 800b9fc:	f3cc 0c80 	ubfx	ip, ip, #2, #1
 800ba00:	4565      	cmp	r5, ip
 800ba02:	d01b      	beq.n	800ba3c <digital_out_cfg+0x60>
            aux_out[output->id].mode.inverted = config->inverted;
 800ba04:	7c5e      	ldrb	r6, [r3, #17]
 800ba06:	f365 0682 	bfi	r6, r5, #2, #1
 800ba0a:	745e      	strb	r6, [r3, #17]
            DIGITAL_OUT(aux_out[output->id].port, aux_out[output->id].pin, !DIGITAL_IN(aux_out[output->id].port, aux_out[output->id].pin));
 800ba0c:	7823      	ldrb	r3, [r4, #0]
 800ba0e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ba12:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ba16:	685e      	ldr	r6, [r3, #4]
 800ba18:	f106 4c42 	add.w	ip, r6, #3254779904	@ 0xc2000000
 800ba1c:	f10c 1c10 	add.w	ip, ip, #1048592	@ 0x100010
 800ba20:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 800ba24:	7a1d      	ldrb	r5, [r3, #8]
 800ba26:	f81c c025 	ldrb.w	ip, [ip, r5, lsl #2]
 800ba2a:	4b23      	ldr	r3, [pc, #140]	@ (800bab8 <digital_out_cfg+0xdc>)
 800ba2c:	4433      	add	r3, r6
 800ba2e:	015b      	lsls	r3, r3, #5
 800ba30:	fabc fc8c 	clz	ip, ip
 800ba34:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ba38:	f803 c025 	strb.w	ip, [r3, r5, lsl #2]
        if(config->open_drain != aux_out[output->id].mode.open_drain) {
 800ba3c:	784d      	ldrb	r5, [r1, #1]
 800ba3e:	7823      	ldrb	r3, [r4, #0]
 800ba40:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ba44:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ba48:	f893 c010 	ldrb.w	ip, [r3, #16]
 800ba4c:	f3cc 0c80 	ubfx	ip, ip, #2, #1
 800ba50:	4565      	cmp	r5, ip
 800ba52:	d012      	beq.n	800ba7a <digital_out_cfg+0x9e>
            if((aux_out[output->id].mode.open_drain = config->open_drain))
 800ba54:	f893 c010 	ldrb.w	ip, [r3, #16]
 800ba58:	f365 0c82 	bfi	ip, r5, #2, #1
 800ba5c:	f883 c010 	strb.w	ip, [r3, #16]
 800ba60:	b1a5      	cbz	r5, 800ba8c <digital_out_cfg+0xb0>
                aux_out[output->id].port->OTYPER |= (GPIO_OTYPER_OT_0 << aux_out[output->id].pin);
 800ba62:	7823      	ldrb	r3, [r4, #0]
 800ba64:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ba68:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ba6c:	685d      	ldr	r5, [r3, #4]
 800ba6e:	6868      	ldr	r0, [r5, #4]
 800ba70:	7a1e      	ldrb	r6, [r3, #8]
 800ba72:	2301      	movs	r3, #1
 800ba74:	40b3      	lsls	r3, r6
 800ba76:	4303      	orrs	r3, r0
 800ba78:	606b      	str	r3, [r5, #4]
        if(persistent)
 800ba7a:	b9aa      	cbnz	r2, 800baa8 <digital_out_cfg+0xcc>
    return output->id < digital.out.n_ports;
 800ba7c:	7820      	ldrb	r0, [r4, #0]
 800ba7e:	4b0c      	ldr	r3, [pc, #48]	@ (800bab0 <digital_out_cfg+0xd4>)
 800ba80:	7b1b      	ldrb	r3, [r3, #12]
}
 800ba82:	4298      	cmp	r0, r3
 800ba84:	bf2c      	ite	cs
 800ba86:	2000      	movcs	r0, #0
 800ba88:	2001      	movcc	r0, #1
 800ba8a:	bd70      	pop	{r4, r5, r6, pc}
                aux_out[output->id].port->OTYPER &= ~(GPIO_OTYPER_OT_0 << aux_out[output->id].pin);
 800ba8c:	7823      	ldrb	r3, [r4, #0]
 800ba8e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ba92:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ba96:	6845      	ldr	r5, [r0, #4]
 800ba98:	686b      	ldr	r3, [r5, #4]
 800ba9a:	7a06      	ldrb	r6, [r0, #8]
 800ba9c:	2001      	movs	r0, #1
 800ba9e:	40b0      	lsls	r0, r6
 800baa0:	ea23 0300 	bic.w	r3, r3, r0
 800baa4:	606b      	str	r3, [r5, #4]
 800baa6:	e7e8      	b.n	800ba7a <digital_out_cfg+0x9e>
            ioport_save_output_settings(output, config);
 800baa8:	4620      	mov	r0, r4
 800baaa:	f006 fe5d 	bl	8012768 <ioport_save_output_settings>
 800baae:	e7e5      	b.n	800ba7c <digital_out_cfg+0xa0>
 800bab0:	20000804 	.word	0x20000804
 800bab4:	200007fc 	.word	0x200007fc
 800bab8:	c2100014 	.word	0xc2100014

0800babc <digital_in_cfg>:
{
 800babc:	b570      	push	{r4, r5, r6, lr}
 800babe:	4604      	mov	r4, r0
    if(input->id < digital.in.n_ports && config->pull_mode != PullMode_UpDown) {
 800bac0:	7803      	ldrb	r3, [r0, #0]
 800bac2:	482b      	ldr	r0, [pc, #172]	@ (800bb70 <digital_in_cfg+0xb4>)
 800bac4:	7900      	ldrb	r0, [r0, #4]
 800bac6:	4283      	cmp	r3, r0
 800bac8:	d245      	bcs.n	800bb56 <digital_in_cfg+0x9a>
 800baca:	7888      	ldrb	r0, [r1, #2]
 800bacc:	2803      	cmp	r0, #3
 800bace:	d042      	beq.n	800bb56 <digital_in_cfg+0x9a>
        aux_in[input->id].mode.inverted = config->inverted;
 800bad0:	4828      	ldr	r0, [pc, #160]	@ (800bb74 <digital_in_cfg+0xb8>)
 800bad2:	6800      	ldr	r0, [r0, #0]
 800bad4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bad8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800badc:	f891 c000 	ldrb.w	ip, [r1]
 800bae0:	795d      	ldrb	r5, [r3, #5]
 800bae2:	f36c 0582 	bfi	r5, ip, #2, #1
 800bae6:	715d      	strb	r5, [r3, #5]
        aux_in[input->id].mode.debounce = config->debounce;
 800bae8:	7823      	ldrb	r3, [r4, #0]
 800baea:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800baee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800baf2:	f891 c001 	ldrb.w	ip, [r1, #1]
 800baf6:	795d      	ldrb	r5, [r3, #5]
 800baf8:	f36c 15c7 	bfi	r5, ip, #7, #1
 800bafc:	715d      	strb	r5, [r3, #5]
        aux_in[input->id].mode.pull_mode = config->pull_mode;
 800bafe:	7823      	ldrb	r3, [r4, #0]
 800bb00:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bb04:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800bb08:	f891 c002 	ldrb.w	ip, [r1, #2]
 800bb0c:	791d      	ldrb	r5, [r3, #4]
 800bb0e:	f36c 05c4 	bfi	r5, ip, #3, #2
 800bb12:	711d      	strb	r5, [r3, #4]
        aux_in[input->id].port->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (input->pin << 1));
 800bb14:	7823      	ldrb	r3, [r4, #0]
 800bb16:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bb1a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800bb1e:	68dd      	ldr	r5, [r3, #12]
 800bb20:	68eb      	ldr	r3, [r5, #12]
 800bb22:	6926      	ldr	r6, [r4, #16]
 800bb24:	ea4f 0e46 	mov.w	lr, r6, lsl #1
 800bb28:	f04f 0c03 	mov.w	ip, #3
 800bb2c:	fa0c fc0e 	lsl.w	ip, ip, lr
 800bb30:	ea23 030c 	bic.w	r3, r3, ip
 800bb34:	60eb      	str	r3, [r5, #12]
        aux_in[input->id].port->PUPDR |= (config->pull_mode << (input->pin << 1));
 800bb36:	7823      	ldrb	r3, [r4, #0]
 800bb38:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bb3c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800bb40:	68c5      	ldr	r5, [r0, #12]
 800bb42:	68eb      	ldr	r3, [r5, #12]
 800bb44:	7888      	ldrb	r0, [r1, #2]
 800bb46:	6926      	ldr	r6, [r4, #16]
 800bb48:	ea4f 0c46 	mov.w	ip, r6, lsl #1
 800bb4c:	fa00 f00c 	lsl.w	r0, r0, ip
 800bb50:	4303      	orrs	r3, r0
 800bb52:	60eb      	str	r3, [r5, #12]
        if(persistent)
 800bb54:	b93a      	cbnz	r2, 800bb66 <digital_in_cfg+0xaa>
    return input->id < digital.in.n_ports;
 800bb56:	7820      	ldrb	r0, [r4, #0]
 800bb58:	4b05      	ldr	r3, [pc, #20]	@ (800bb70 <digital_in_cfg+0xb4>)
 800bb5a:	791b      	ldrb	r3, [r3, #4]
}
 800bb5c:	4298      	cmp	r0, r3
 800bb5e:	bf2c      	ite	cs
 800bb60:	2000      	movcs	r0, #0
 800bb62:	2001      	movcc	r0, #1
 800bb64:	bd70      	pop	{r4, r5, r6, pc}
            ioport_save_input_settings(input, config);
 800bb66:	4620      	mov	r0, r4
 800bb68:	f006 fdb2 	bl	80126d0 <ioport_save_input_settings>
 800bb6c:	e7f3      	b.n	800bb56 <digital_in_cfg+0x9a>
 800bb6e:	bf00      	nop
 800bb70:	20000804 	.word	0x20000804
 800bb74:	20000800 	.word	0x20000800

0800bb78 <swap_pins>:

    return ok;
}

static bool swap_pins (io_port_type_t type, io_port_direction_t dir, uint8_t port_a, uint8_t port_b)
{
 800bb78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb7c:	b08a      	sub	sp, #40	@ 0x28
 800bb7e:	4686      	mov	lr, r0
    bool ok = port_a == port_b;
 800bb80:	429a      	cmp	r2, r3
 800bb82:	bf0c      	ite	eq
 800bb84:	2001      	moveq	r0, #1
 800bb86:	2000      	movne	r0, #0

    if(!ok && type == Port_Digital) {
 800bb88:	d005      	beq.n	800bb96 <swap_pins+0x1e>
 800bb8a:	460d      	mov	r5, r1
 800bb8c:	4694      	mov	ip, r2
 800bb8e:	461c      	mov	r4, r3
 800bb90:	f1be 0f01 	cmp.w	lr, #1
 800bb94:	d002      	beq.n	800bb9c <swap_pins+0x24>
            memcpy(&aux_out[port_b], &tmp, sizeof(output_signal_t));
        }
    }

    return ok;
}
 800bb96:	b00a      	add	sp, #40	@ 0x28
 800bb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                  aux_in[port_a].interrupt_callback == NULL &&
 800bb9c:	b971      	cbnz	r1, 800bbbc <swap_pins+0x44>
        if((ok = dir == Port_Input && port_a < digital.in.n_ports && port_b < digital.in.n_ports &&
 800bb9e:	4b56      	ldr	r3, [pc, #344]	@ (800bcf8 <swap_pins+0x180>)
 800bba0:	791b      	ldrb	r3, [r3, #4]
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d90a      	bls.n	800bbbc <swap_pins+0x44>
 800bba6:	42a3      	cmp	r3, r4
 800bba8:	d908      	bls.n	800bbbc <swap_pins+0x44>
                  aux_in[port_a].interrupt_callback == NULL &&
 800bbaa:	4b54      	ldr	r3, [pc, #336]	@ (800bcfc <swap_pins+0x184>)
 800bbac:	681e      	ldr	r6, [r3, #0]
 800bbae:	eb02 0ec2 	add.w	lr, r2, r2, lsl #3
 800bbb2:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
 800bbb6:	f8de 2018 	ldr.w	r2, [lr, #24]
        if((ok = dir == Port_Input && port_a < digital.in.n_ports && port_b < digital.in.n_ports &&
 800bbba:	b11a      	cbz	r2, 800bbc4 <swap_pins+0x4c>
        if((ok = dir == Port_Output && port_a < digital.out.n_ports && port_b < digital.out.n_ports)) {
 800bbbc:	2d01      	cmp	r5, #1
 800bbbe:	d04b      	beq.n	800bc58 <swap_pins+0xe0>
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	e7e8      	b.n	800bb96 <swap_pins+0x1e>
                   aux_in[port_b].interrupt_callback == NULL)) {
 800bbc4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800bbc8:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800bbcc:	69b3      	ldr	r3, [r6, #24]
                  aux_in[port_a].interrupt_callback == NULL &&
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1f4      	bne.n	800bbbc <swap_pins+0x44>
            memcpy(&tmp, &aux_in[port_a], sizeof(input_signal_t));
 800bbd2:	4677      	mov	r7, lr
 800bbd4:	f10d 0904 	add.w	r9, sp, #4
 800bbd8:	f10e 0a20 	add.w	sl, lr, #32
 800bbdc:	46c8      	mov	r8, r9
 800bbde:	6838      	ldr	r0, [r7, #0]
 800bbe0:	6879      	ldr	r1, [r7, #4]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800bbea:	3710      	adds	r7, #16
 800bbec:	46c1      	mov	r9, r8
 800bbee:	4557      	cmp	r7, sl
 800bbf0:	d1f4      	bne.n	800bbdc <swap_pins+0x64>
 800bbf2:	6838      	ldr	r0, [r7, #0]
 800bbf4:	f8c8 0000 	str.w	r0, [r8]
            memcpy(&aux_in[port_a], &aux_in[port_b], sizeof(input_signal_t));
 800bbf8:	4633      	mov	r3, r6
 800bbfa:	4672      	mov	r2, lr
 800bbfc:	f106 0920 	add.w	r9, r6, #32
 800bc00:	f8d3 8000 	ldr.w	r8, [r3]
 800bc04:	685f      	ldr	r7, [r3, #4]
 800bc06:	6898      	ldr	r0, [r3, #8]
 800bc08:	68d9      	ldr	r1, [r3, #12]
 800bc0a:	f8c2 8000 	str.w	r8, [r2]
 800bc0e:	6057      	str	r7, [r2, #4]
 800bc10:	6090      	str	r0, [r2, #8]
 800bc12:	60d1      	str	r1, [r2, #12]
 800bc14:	3310      	adds	r3, #16
 800bc16:	3210      	adds	r2, #16
 800bc18:	454b      	cmp	r3, r9
 800bc1a:	d1f1      	bne.n	800bc00 <swap_pins+0x88>
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	6013      	str	r3, [r2, #0]
            aux_in[port_a].description = tmp.description;
 800bc20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc22:	f8ce 3020 	str.w	r3, [lr, #32]
            tmp.description = aux_in[port_b].description;
 800bc26:	6a33      	ldr	r3, [r6, #32]
 800bc28:	9309      	str	r3, [sp, #36]	@ 0x24
            memcpy(&aux_in[port_b], &tmp, sizeof(input_signal_t));
 800bc2a:	af01      	add	r7, sp, #4
 800bc2c:	46b6      	mov	lr, r6
 800bc2e:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 800bc32:	463e      	mov	r6, r7
 800bc34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bc36:	f8ce 0000 	str.w	r0, [lr]
 800bc3a:	f8ce 1004 	str.w	r1, [lr, #4]
 800bc3e:	f8ce 2008 	str.w	r2, [lr, #8]
 800bc42:	f8ce 300c 	str.w	r3, [lr, #12]
 800bc46:	4637      	mov	r7, r6
 800bc48:	f10e 0e10 	add.w	lr, lr, #16
 800bc4c:	4546      	cmp	r6, r8
 800bc4e:	d1f0      	bne.n	800bc32 <swap_pins+0xba>
 800bc50:	6830      	ldr	r0, [r6, #0]
 800bc52:	f8ce 0000 	str.w	r0, [lr]
 800bc56:	e7b1      	b.n	800bbbc <swap_pins+0x44>
        if((ok = dir == Port_Output && port_a < digital.out.n_ports && port_b < digital.out.n_ports)) {
 800bc58:	4b27      	ldr	r3, [pc, #156]	@ (800bcf8 <swap_pins+0x180>)
 800bc5a:	7b1b      	ldrb	r3, [r3, #12]
 800bc5c:	4563      	cmp	r3, ip
 800bc5e:	d949      	bls.n	800bcf4 <swap_pins+0x17c>
 800bc60:	42a3      	cmp	r3, r4
 800bc62:	d801      	bhi.n	800bc68 <swap_pins+0xf0>
 800bc64:	2000      	movs	r0, #0
 800bc66:	e796      	b.n	800bb96 <swap_pins+0x1e>
            memcpy(&tmp, &aux_out[port_a], sizeof(output_signal_t));
 800bc68:	4b25      	ldr	r3, [pc, #148]	@ (800bd00 <swap_pins+0x188>)
 800bc6a:	681e      	ldr	r6, [r3, #0]
 800bc6c:	ebcc 0ccc 	rsb	ip, ip, ip, lsl #3
 800bc70:	eb06 058c 	add.w	r5, r6, ip, lsl #2
 800bc74:	f10d 0e04 	add.w	lr, sp, #4
 800bc78:	f856 002c 	ldr.w	r0, [r6, ip, lsl #2]
 800bc7c:	6869      	ldr	r1, [r5, #4]
 800bc7e:	68aa      	ldr	r2, [r5, #8]
 800bc80:	68eb      	ldr	r3, [r5, #12]
 800bc82:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bc86:	6928      	ldr	r0, [r5, #16]
 800bc88:	6969      	ldr	r1, [r5, #20]
 800bc8a:	69aa      	ldr	r2, [r5, #24]
 800bc8c:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
            memcpy(&aux_out[port_a], &aux_out[port_b], sizeof(output_signal_t));
 800bc90:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800bc94:	eb06 0e84 	add.w	lr, r6, r4, lsl #2
 800bc98:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800bc9c:	f8de 2004 	ldr.w	r2, [lr, #4]
 800bca0:	f8de 3008 	ldr.w	r3, [lr, #8]
 800bca4:	f8de 000c 	ldr.w	r0, [lr, #12]
 800bca8:	f846 102c 	str.w	r1, [r6, ip, lsl #2]
 800bcac:	606a      	str	r2, [r5, #4]
 800bcae:	60ab      	str	r3, [r5, #8]
 800bcb0:	60e8      	str	r0, [r5, #12]
 800bcb2:	f8de 1010 	ldr.w	r1, [lr, #16]
 800bcb6:	f8de 2014 	ldr.w	r2, [lr, #20]
 800bcba:	f8de 3018 	ldr.w	r3, [lr, #24]
 800bcbe:	6129      	str	r1, [r5, #16]
 800bcc0:	616a      	str	r2, [r5, #20]
 800bcc2:	61ab      	str	r3, [r5, #24]
            aux_out[port_a].description = tmp.description;
 800bcc4:	9b06      	ldr	r3, [sp, #24]
 800bcc6:	616b      	str	r3, [r5, #20]
            tmp.description = aux_out[port_b].description;
 800bcc8:	f8de 3014 	ldr.w	r3, [lr, #20]
 800bccc:	9306      	str	r3, [sp, #24]
            memcpy(&aux_out[port_b], &tmp, sizeof(output_signal_t));
 800bcce:	ad01      	add	r5, sp, #4
 800bcd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcd2:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 800bcd6:	f8ce 1004 	str.w	r1, [lr, #4]
 800bcda:	f8ce 2008 	str.w	r2, [lr, #8]
 800bcde:	f8ce 300c 	str.w	r3, [lr, #12]
 800bce2:	cd07      	ldmia	r5!, {r0, r1, r2}
 800bce4:	f8ce 0010 	str.w	r0, [lr, #16]
 800bce8:	f8ce 1014 	str.w	r1, [lr, #20]
 800bcec:	f8ce 2018 	str.w	r2, [lr, #24]
        if((ok = dir == Port_Output && port_a < digital.out.n_ports && port_b < digital.out.n_ports)) {
 800bcf0:	2001      	movs	r0, #1
 800bcf2:	e750      	b.n	800bb96 <swap_pins+0x1e>
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	e74e      	b.n	800bb96 <swap_pins+0x1e>
 800bcf8:	20000804 	.word	0x20000804
 800bcfc:	20000800 	.word	0x20000800
 800bd00:	200007fc 	.word	0x200007fc

0800bd04 <claim>:
    if(type == Port_Digital) {
 800bd04:	2801      	cmp	r0, #1
 800bd06:	d001      	beq.n	800bd0c <claim+0x8>
    bool ok = false;
 800bd08:	2000      	movs	r0, #0
}
 800bd0a:	4770      	bx	lr
{
 800bd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd10:	4615      	mov	r5, r2
 800bd12:	461c      	mov	r4, r3
        if(dir == Port_Input) {
 800bd14:	2900      	cmp	r1, #0
 800bd16:	d166      	bne.n	800bde6 <claim+0xe2>
            if((ok = digital.in.map && *port < digital.in.n_ports && !aux_in[*port].mode.claimed)) {
 800bd18:	4b62      	ldr	r3, [pc, #392]	@ (800bea4 <claim+0x1a0>)
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f000 80b8 	beq.w	800be92 <claim+0x18e>
 800bd22:	7813      	ldrb	r3, [r2, #0]
 800bd24:	4a5f      	ldr	r2, [pc, #380]	@ (800bea4 <claim+0x1a0>)
 800bd26:	7912      	ldrb	r2, [r2, #4]
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	f080 80b4 	bcs.w	800be96 <claim+0x192>
 800bd2e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bd32:	4a5d      	ldr	r2, [pc, #372]	@ (800bea8 <claim+0x1a4>)
 800bd34:	6812      	ldr	r2, [r2, #0]
 800bd36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bd3a:	795b      	ldrb	r3, [r3, #5]
 800bd3c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800bd40:	d001      	beq.n	800bd46 <claim+0x42>
 800bd42:	2000      	movs	r0, #0
 800bd44:	e0a8      	b.n	800be98 <claim+0x194>
                hal.port.num_digital_in--;
 800bd46:	4a59      	ldr	r2, [pc, #356]	@ (800beac <claim+0x1a8>)
 800bd48:	f892 3114 	ldrb.w	r3, [r2, #276]	@ 0x114
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	f882 3114 	strb.w	r3, [r2, #276]	@ 0x114
                for(i = ioports_map_reverse(&digital.in, *port); i < hal.port.num_digital_in ; i++) {
 800bd52:	7829      	ldrb	r1, [r5, #0]
 800bd54:	4856      	ldr	r0, [pc, #344]	@ (800beb0 <claim+0x1ac>)
 800bd56:	f006 fa93 	bl	8012280 <ioports_map_reverse>
 800bd5a:	4606      	mov	r6, r0
 800bd5c:	e019      	b.n	800bd92 <claim+0x8e>
                    digital.in.map[i] = digital.in.map[i + 1];
 800bd5e:	4851      	ldr	r0, [pc, #324]	@ (800bea4 <claim+0x1a0>)
 800bd60:	6883      	ldr	r3, [r0, #8]
 800bd62:	199a      	adds	r2, r3, r6
 800bd64:	7852      	ldrb	r2, [r2, #1]
 800bd66:	559a      	strb	r2, [r3, r6]
                    aux_in[digital.in.map[i]].user_port = i;
 800bd68:	4b4f      	ldr	r3, [pc, #316]	@ (800bea8 <claim+0x1a4>)
 800bd6a:	681f      	ldr	r7, [r3, #0]
 800bd6c:	6881      	ldr	r1, [r0, #8]
 800bd6e:	5d8b      	ldrb	r3, [r1, r6]
 800bd70:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bd74:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800bd78:	751e      	strb	r6, [r3, #20]
                    aux_in[digital.in.map[i]].description = iports_get_pnum(digital, i);
 800bd7a:	f8d0 8014 	ldr.w	r8, [r0, #20]
 800bd7e:	5d8b      	ldrb	r3, [r1, r6]
 800bd80:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bd84:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800bd88:	4631      	mov	r1, r6
 800bd8a:	47c0      	blx	r8
 800bd8c:	6238      	str	r0, [r7, #32]
                for(i = ioports_map_reverse(&digital.in, *port); i < hal.port.num_digital_in ; i++) {
 800bd8e:	3601      	adds	r6, #1
 800bd90:	b2f6      	uxtb	r6, r6
 800bd92:	4b46      	ldr	r3, [pc, #280]	@ (800beac <claim+0x1a8>)
 800bd94:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800bd98:	42b3      	cmp	r3, r6
 800bd9a:	d8e0      	bhi.n	800bd5e <claim+0x5a>
                aux_in[*port].mode.claimed = On;
 800bd9c:	4b42      	ldr	r3, [pc, #264]	@ (800bea8 <claim+0x1a4>)
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	782b      	ldrb	r3, [r5, #0]
 800bda2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bda6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bdaa:	7959      	ldrb	r1, [r3, #5]
 800bdac:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800bdb0:	7159      	strb	r1, [r3, #5]
                aux_in[*port].user_port = hal.port.num_digital_in;
 800bdb2:	782b      	ldrb	r3, [r5, #0]
 800bdb4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bdb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bdbc:	493b      	ldr	r1, [pc, #236]	@ (800beac <claim+0x1a8>)
 800bdbe:	f891 0114 	ldrb.w	r0, [r1, #276]	@ 0x114
 800bdc2:	7518      	strb	r0, [r3, #20]
                aux_in[*port].description = description;
 800bdc4:	782b      	ldrb	r3, [r5, #0]
 800bdc6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bdca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bdce:	6214      	str	r4, [r2, #32]
                digital.in.map[hal.port.num_digital_in] = *port;
 800bdd0:	4b34      	ldr	r3, [pc, #208]	@ (800bea4 <claim+0x1a0>)
 800bdd2:	689a      	ldr	r2, [r3, #8]
 800bdd4:	f891 3114 	ldrb.w	r3, [r1, #276]	@ 0x114
 800bdd8:	7828      	ldrb	r0, [r5, #0]
 800bdda:	54d0      	strb	r0, [r2, r3]
                *port = hal.port.num_digital_in;
 800bddc:	f891 3114 	ldrb.w	r3, [r1, #276]	@ 0x114
 800bde0:	702b      	strb	r3, [r5, #0]
            if((ok = digital.in.map && *port < digital.in.n_ports && !aux_in[*port].mode.claimed)) {
 800bde2:	2001      	movs	r0, #1
 800bde4:	e058      	b.n	800be98 <claim+0x194>
        } else if((ok = digital.out.map && *port < digital.out.n_ports && !aux_out[*port].mode.claimed)) {
 800bde6:	4b2f      	ldr	r3, [pc, #188]	@ (800bea4 <claim+0x1a0>)
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d056      	beq.n	800be9c <claim+0x198>
 800bdee:	7813      	ldrb	r3, [r2, #0]
 800bdf0:	4a2c      	ldr	r2, [pc, #176]	@ (800bea4 <claim+0x1a0>)
 800bdf2:	7b12      	ldrb	r2, [r2, #12]
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d253      	bcs.n	800bea0 <claim+0x19c>
 800bdf8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bdfc:	4a2d      	ldr	r2, [pc, #180]	@ (800beb4 <claim+0x1b0>)
 800bdfe:	6812      	ldr	r2, [r2, #0]
 800be00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be04:	7c5b      	ldrb	r3, [r3, #17]
 800be06:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800be0a:	d001      	beq.n	800be10 <claim+0x10c>
 800be0c:	2000      	movs	r0, #0
 800be0e:	e043      	b.n	800be98 <claim+0x194>
            hal.port.num_digital_out--;
 800be10:	4a26      	ldr	r2, [pc, #152]	@ (800beac <claim+0x1a8>)
 800be12:	f892 3115 	ldrb.w	r3, [r2, #277]	@ 0x115
 800be16:	3b01      	subs	r3, #1
 800be18:	f882 3115 	strb.w	r3, [r2, #277]	@ 0x115
            for(i = ioports_map_reverse(&digital.out, *port); i < hal.port.num_digital_out; i++) {
 800be1c:	7829      	ldrb	r1, [r5, #0]
 800be1e:	4826      	ldr	r0, [pc, #152]	@ (800beb8 <claim+0x1b4>)
 800be20:	f006 fa2e 	bl	8012280 <ioports_map_reverse>
 800be24:	4606      	mov	r6, r0
 800be26:	e012      	b.n	800be4e <claim+0x14a>
                digital.out.map[i] = digital.out.map[i + 1];
 800be28:	481e      	ldr	r0, [pc, #120]	@ (800bea4 <claim+0x1a0>)
 800be2a:	6903      	ldr	r3, [r0, #16]
 800be2c:	199a      	adds	r2, r3, r6
 800be2e:	7852      	ldrb	r2, [r2, #1]
 800be30:	559a      	strb	r2, [r3, r6]
                aux_out[digital.out.map[i]].description = iports_get_pnum(digital, i);
 800be32:	6942      	ldr	r2, [r0, #20]
 800be34:	6903      	ldr	r3, [r0, #16]
 800be36:	5d9b      	ldrb	r3, [r3, r6]
 800be38:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800be3c:	491d      	ldr	r1, [pc, #116]	@ (800beb4 <claim+0x1b0>)
 800be3e:	680f      	ldr	r7, [r1, #0]
 800be40:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800be44:	4631      	mov	r1, r6
 800be46:	4790      	blx	r2
 800be48:	6178      	str	r0, [r7, #20]
            for(i = ioports_map_reverse(&digital.out, *port); i < hal.port.num_digital_out; i++) {
 800be4a:	3601      	adds	r6, #1
 800be4c:	b2f6      	uxtb	r6, r6
 800be4e:	4b17      	ldr	r3, [pc, #92]	@ (800beac <claim+0x1a8>)
 800be50:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800be54:	42b3      	cmp	r3, r6
 800be56:	d8e7      	bhi.n	800be28 <claim+0x124>
            aux_out[*port].mode.claimed = On;
 800be58:	4b16      	ldr	r3, [pc, #88]	@ (800beb4 <claim+0x1b0>)
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	782b      	ldrb	r3, [r5, #0]
 800be5e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800be62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be66:	7c59      	ldrb	r1, [r3, #17]
 800be68:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800be6c:	7459      	strb	r1, [r3, #17]
            aux_out[*port].description = description;
 800be6e:	782b      	ldrb	r3, [r5, #0]
 800be70:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800be74:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800be78:	6154      	str	r4, [r2, #20]
            digital.out.map[hal.port.num_digital_out] = *port;
 800be7a:	4b0a      	ldr	r3, [pc, #40]	@ (800bea4 <claim+0x1a0>)
 800be7c:	6919      	ldr	r1, [r3, #16]
 800be7e:	4b0b      	ldr	r3, [pc, #44]	@ (800beac <claim+0x1a8>)
 800be80:	f893 2115 	ldrb.w	r2, [r3, #277]	@ 0x115
 800be84:	7828      	ldrb	r0, [r5, #0]
 800be86:	5488      	strb	r0, [r1, r2]
            *port = hal.port.num_digital_out;
 800be88:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800be8c:	702b      	strb	r3, [r5, #0]
        } else if((ok = digital.out.map && *port < digital.out.n_ports && !aux_out[*port].mode.claimed)) {
 800be8e:	2001      	movs	r0, #1
 800be90:	e002      	b.n	800be98 <claim+0x194>
            if((ok = digital.in.map && *port < digital.in.n_ports && !aux_in[*port].mode.claimed)) {
 800be92:	2000      	movs	r0, #0
 800be94:	e000      	b.n	800be98 <claim+0x194>
 800be96:	2000      	movs	r0, #0
}
 800be98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else if((ok = digital.out.map && *port < digital.out.n_ports && !aux_out[*port].mode.claimed)) {
 800be9c:	2000      	movs	r0, #0
 800be9e:	e7fb      	b.n	800be98 <claim+0x194>
 800bea0:	2000      	movs	r0, #0
 800bea2:	e7f9      	b.n	800be98 <claim+0x194>
 800bea4:	20000804 	.word	0x20000804
 800bea8:	20000800 	.word	0x20000800
 800beac:	20001a90 	.word	0x20001a90
 800beb0:	20000808 	.word	0x20000808
 800beb4:	200007fc 	.word	0x200007fc
 800beb8:	20000810 	.word	0x20000810

0800bebc <register_interrupt_handler>:
{
 800bebc:	b570      	push	{r4, r5, r6, lr}
 800bebe:	460c      	mov	r4, r1
    port = ioports_map(digital.in, port);
 800bec0:	4b1f      	ldr	r3, [pc, #124]	@ (800bf40 <register_interrupt_handler+0x84>)
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	b103      	cbz	r3, 800bec8 <register_interrupt_handler+0xc>
 800bec6:	5c18      	ldrb	r0, [r3, r0]
    if((ok = port < digital.in.n_ports && aux_in[port].cap.irq_mode != IRQ_Mode_None)) {
 800bec8:	4b1d      	ldr	r3, [pc, #116]	@ (800bf40 <register_interrupt_handler+0x84>)
 800beca:	791b      	ldrb	r3, [r3, #4]
 800becc:	4283      	cmp	r3, r0
 800bece:	d932      	bls.n	800bf36 <register_interrupt_handler+0x7a>
 800bed0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800bed4:	4b1b      	ldr	r3, [pc, #108]	@ (800bf44 <register_interrupt_handler+0x88>)
 800bed6:	681d      	ldr	r5, [r3, #0]
 800bed8:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 800bedc:	886b      	ldrh	r3, [r5, #2]
 800bede:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 800bee2:	b35b      	cbz	r3, 800bf3c <register_interrupt_handler+0x80>
        if((ok = (irq_mode & input->cap.irq_mode) == irq_mode && interrupt_callback != NULL)) {
 800bee4:	886b      	ldrh	r3, [r5, #2]
 800bee6:	f3c3 1344 	ubfx	r3, r3, #5, #5
 800beea:	ea34 0303 	bics.w	r3, r4, r3
 800beee:	d014      	beq.n	800bf1a <register_interrupt_handler+0x5e>
 800bef0:	2600      	movs	r6, #0
        if(irq_mode == IRQ_Mode_None || !ok) {
 800bef2:	b104      	cbz	r4, 800bef6 <register_interrupt_handler+0x3a>
 800bef4:	bb06      	cbnz	r6, 800bf38 <register_interrupt_handler+0x7c>
            hal.irq_disable();
 800bef6:	4c14      	ldr	r4, [pc, #80]	@ (800bf48 <register_interrupt_handler+0x8c>)
 800bef8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800befa:	4798      	blx	r3
            EXTI->IMR &= ~input->bit;     // Disable pin interrupt
 800befc:	4a13      	ldr	r2, [pc, #76]	@ (800bf4c <register_interrupt_handler+0x90>)
 800befe:	6813      	ldr	r3, [r2, #0]
 800bf00:	68a9      	ldr	r1, [r5, #8]
 800bf02:	ea23 0301 	bic.w	r3, r3, r1
 800bf06:	6013      	str	r3, [r2, #0]
            input->mode.irq_mode = IRQ_Mode_None;
 800bf08:	88ab      	ldrh	r3, [r5, #4]
 800bf0a:	f36f 1349 	bfc	r3, #5, #5
 800bf0e:	80ab      	strh	r3, [r5, #4]
            input->interrupt_callback = NULL;
 800bf10:	2300      	movs	r3, #0
 800bf12:	61ab      	str	r3, [r5, #24]
            hal.irq_enable();
 800bf14:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800bf16:	4798      	blx	r3
 800bf18:	e00e      	b.n	800bf38 <register_interrupt_handler+0x7c>
        if((ok = (irq_mode & input->cap.irq_mode) == irq_mode && interrupt_callback != NULL)) {
 800bf1a:	b152      	cbz	r2, 800bf32 <register_interrupt_handler+0x76>
            input->mode.irq_mode = irq_mode;
 800bf1c:	88ab      	ldrh	r3, [r5, #4]
 800bf1e:	f364 1349 	bfi	r3, r4, #5, #5
 800bf22:	80ab      	strh	r3, [r5, #4]
            input->interrupt_callback = interrupt_callback;
 800bf24:	61aa      	str	r2, [r5, #24]
            gpio_irq_enable(input, irq_mode);
 800bf26:	4621      	mov	r1, r4
 800bf28:	4628      	mov	r0, r5
 800bf2a:	f7ff f899 	bl	800b060 <gpio_irq_enable>
        if((ok = (irq_mode & input->cap.irq_mode) == irq_mode && interrupt_callback != NULL)) {
 800bf2e:	2601      	movs	r6, #1
 800bf30:	e7df      	b.n	800bef2 <register_interrupt_handler+0x36>
 800bf32:	2600      	movs	r6, #0
 800bf34:	e7dd      	b.n	800bef2 <register_interrupt_handler+0x36>
    if((ok = port < digital.in.n_ports && aux_in[port].cap.irq_mode != IRQ_Mode_None)) {
 800bf36:	2600      	movs	r6, #0
}
 800bf38:	4630      	mov	r0, r6
 800bf3a:	bd70      	pop	{r4, r5, r6, pc}
    if((ok = port < digital.in.n_ports && aux_in[port].cap.irq_mode != IRQ_Mode_None)) {
 800bf3c:	2600      	movs	r6, #0
 800bf3e:	e7fb      	b.n	800bf38 <register_interrupt_handler+0x7c>
 800bf40:	20000804 	.word	0x20000804
 800bf44:	20000800 	.word	0x20000800
 800bf48:	20001a90 	.word	0x20001a90
 800bf4c:	40013c00 	.word	0x40013c00

0800bf50 <wait_on_input>:
{
 800bf50:	b570      	push	{r4, r5, r6, lr}
    if(type == Port_Digital && port < digital.in.n_ports) {
 800bf52:	2801      	cmp	r0, #1
 800bf54:	f040 809a 	bne.w	800c08c <wait_on_input+0x13c>
 800bf58:	4616      	mov	r6, r2
 800bf5a:	4b54      	ldr	r3, [pc, #336]	@ (800c0ac <wait_on_input+0x15c>)
 800bf5c:	791b      	ldrb	r3, [r3, #4]
 800bf5e:	428b      	cmp	r3, r1
 800bf60:	f240 8097 	bls.w	800c092 <wait_on_input+0x142>
        port = ioports_map(digital.in, port);
 800bf64:	4b51      	ldr	r3, [pc, #324]	@ (800c0ac <wait_on_input+0x15c>)
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	b103      	cbz	r3, 800bf6c <wait_on_input+0x1c>
 800bf6a:	5c59      	ldrb	r1, [r3, r1]
        value = get_input(&aux_in[port], wait_mode, timeout);
 800bf6c:	4b50      	ldr	r3, [pc, #320]	@ (800c0b0 <wait_on_input+0x160>)
 800bf6e:	681d      	ldr	r5, [r3, #0]
 800bf70:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800bf74:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    if(wait_mode == WaitMode_Immediate)
 800bf78:	2e00      	cmp	r6, #0
 800bf7a:	d032      	beq.n	800bfe2 <wait_on_input+0x92>
    uint_fast16_t delay = (uint_fast16_t)ceilf((1000.0f / 50.0f) * timeout) + 1;
 800bf7c:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 800bf80:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bf84:	f01b fd42 	bl	8027a0c <ceilf>
 800bf88:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800bf8c:	ee10 4a10 	vmov	r4, s0
 800bf90:	3401      	adds	r4, #1
    if(wait_mode == WaitMode_Rise || wait_mode == WaitMode_Fall) {
 800bf92:	1e73      	subs	r3, r6, #1
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d932      	bls.n	800c000 <wait_on_input+0xb0>
        bool wait_for = wait_mode != WaitMode_Low;
 800bf9a:	3e04      	subs	r6, #4
 800bf9c:	bf18      	it	ne
 800bf9e:	2601      	movne	r6, #1
            if((DIGITAL_IN(input->port, input->pin) ^ input->mode.inverted) == wait_for) {
 800bfa0:	68eb      	ldr	r3, [r5, #12]
 800bfa2:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800bfa6:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800bfaa:	015b      	lsls	r3, r3, #5
 800bfac:	79a8      	ldrb	r0, [r5, #6]
 800bfae:	f813 1020 	ldrb.w	r1, [r3, r0, lsl #2]
 800bfb2:	796a      	ldrb	r2, [r5, #5]
 800bfb4:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800bfb8:	4051      	eors	r1, r2
 800bfba:	42b1      	cmp	r1, r6
 800bfbc:	d062      	beq.n	800c084 <wait_on_input+0x134>
            if(delay) {
 800bfbe:	2c00      	cmp	r4, #0
 800bfc0:	d06d      	beq.n	800c09e <wait_on_input+0x14e>
                protocol_execute_realtime();
 800bfc2:	f00b fc59 	bl	8017878 <protocol_execute_realtime>
                hal.delay_ms(50, NULL);
 800bfc6:	4b3b      	ldr	r3, [pc, #236]	@ (800c0b4 <wait_on_input+0x164>)
 800bfc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfca:	2100      	movs	r1, #0
 800bfcc:	2032      	movs	r0, #50	@ 0x32
 800bfce:	4798      	blx	r3
        } while(--delay && !sys.abort);
 800bfd0:	3c01      	subs	r4, #1
 800bfd2:	d067      	beq.n	800c0a4 <wait_on_input+0x154>
 800bfd4:	4b38      	ldr	r3, [pc, #224]	@ (800c0b8 <wait_on_input+0x168>)
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d0e1      	beq.n	800bfa0 <wait_on_input+0x50>
    int32_t value = -1;
 800bfdc:	f04f 34ff 	mov.w	r4, #4294967295
 800bfe0:	e00c      	b.n	800bffc <wait_on_input+0xac>
        return DIGITAL_IN(input->port, input->pin) ^ input->mode.inverted;
 800bfe2:	68eb      	ldr	r3, [r5, #12]
 800bfe4:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800bfe8:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800bfec:	015b      	lsls	r3, r3, #5
 800bfee:	79aa      	ldrb	r2, [r5, #6]
 800bff0:	f813 4022 	ldrb.w	r4, [r3, r2, lsl #2]
 800bff4:	796b      	ldrb	r3, [r5, #5]
 800bff6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bffa:	405c      	eors	r4, r3
}
 800bffc:	4620      	mov	r0, r4
 800bffe:	bd70      	pop	{r4, r5, r6, pc}
        pin_irq_mode_t irq_mode = wait_mode == WaitMode_Rise ? IRQ_Mode_Rising : IRQ_Mode_Falling;
 800c000:	2e01      	cmp	r6, #1
 800c002:	d000      	beq.n	800c006 <wait_on_input+0xb6>
 800c004:	2602      	movs	r6, #2
        if(input->cap.irq_mode & irq_mode) {
 800c006:	886b      	ldrh	r3, [r5, #2]
 800c008:	f3c3 1344 	ubfx	r3, r3, #5, #5
 800c00c:	421e      	tst	r6, r3
 800c00e:	d043      	beq.n	800c098 <wait_on_input+0x148>
            event_bits &= ~input->bit;
 800c010:	68a9      	ldr	r1, [r5, #8]
 800c012:	4a2a      	ldr	r2, [pc, #168]	@ (800c0bc <wait_on_input+0x16c>)
 800c014:	6813      	ldr	r3, [r2, #0]
 800c016:	ea23 0301 	bic.w	r3, r3, r1
 800c01a:	6013      	str	r3, [r2, #0]
            gpio_irq_enable(input, irq_mode);
 800c01c:	4631      	mov	r1, r6
 800c01e:	4628      	mov	r0, r5
 800c020:	f7ff f81e 	bl	800b060 <gpio_irq_enable>
                if(event_bits & input->bit) {
 800c024:	68aa      	ldr	r2, [r5, #8]
 800c026:	4b25      	ldr	r3, [pc, #148]	@ (800c0bc <wait_on_input+0x16c>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	421a      	tst	r2, r3
 800c02c:	d110      	bne.n	800c050 <wait_on_input+0x100>
                if(delay) {
 800c02e:	b31c      	cbz	r4, 800c078 <wait_on_input+0x128>
                    protocol_execute_realtime();
 800c030:	f00b fc22 	bl	8017878 <protocol_execute_realtime>
                    hal.delay_ms(50, NULL);
 800c034:	4b1f      	ldr	r3, [pc, #124]	@ (800c0b4 <wait_on_input+0x164>)
 800c036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c038:	2100      	movs	r1, #0
 800c03a:	2032      	movs	r0, #50	@ 0x32
 800c03c:	4798      	blx	r3
            } while(--delay && !sys.abort);
 800c03e:	3c01      	subs	r4, #1
 800c040:	d01d      	beq.n	800c07e <wait_on_input+0x12e>
 800c042:	4b1d      	ldr	r3, [pc, #116]	@ (800c0b8 <wait_on_input+0x168>)
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d0ec      	beq.n	800c024 <wait_on_input+0xd4>
    int32_t value = -1;
 800c04a:	f04f 34ff 	mov.w	r4, #4294967295
 800c04e:	e00c      	b.n	800c06a <wait_on_input+0x11a>
                    value = DIGITAL_IN(input->port, input->pin) ^ input->mode.inverted;
 800c050:	68eb      	ldr	r3, [r5, #12]
 800c052:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800c056:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800c05a:	015b      	lsls	r3, r3, #5
 800c05c:	79aa      	ldrb	r2, [r5, #6]
 800c05e:	f813 4022 	ldrb.w	r4, [r3, r2, lsl #2]
 800c062:	796b      	ldrb	r3, [r5, #5]
 800c064:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c068:	405c      	eors	r4, r3
            gpio_irq_enable(input, input->mode.irq_mode);    // Restore pin interrupt status
 800c06a:	88a9      	ldrh	r1, [r5, #4]
 800c06c:	f3c1 1144 	ubfx	r1, r1, #5, #5
 800c070:	4628      	mov	r0, r5
 800c072:	f7fe fff5 	bl	800b060 <gpio_irq_enable>
 800c076:	e7c1      	b.n	800bffc <wait_on_input+0xac>
    int32_t value = -1;
 800c078:	f04f 34ff 	mov.w	r4, #4294967295
 800c07c:	e7f5      	b.n	800c06a <wait_on_input+0x11a>
 800c07e:	f04f 34ff 	mov.w	r4, #4294967295
 800c082:	e7f2      	b.n	800c06a <wait_on_input+0x11a>
                value = DIGITAL_IN(input->port, input->pin) ^ input->mode.inverted;
 800c084:	f813 4020 	ldrb.w	r4, [r3, r0, lsl #2]
 800c088:	4054      	eors	r4, r2
                break;
 800c08a:	e7b7      	b.n	800bffc <wait_on_input+0xac>
    int32_t value = -1;
 800c08c:	f04f 34ff 	mov.w	r4, #4294967295
 800c090:	e7b4      	b.n	800bffc <wait_on_input+0xac>
 800c092:	f04f 34ff 	mov.w	r4, #4294967295
 800c096:	e7b1      	b.n	800bffc <wait_on_input+0xac>
    int32_t value = -1;
 800c098:	f04f 34ff 	mov.w	r4, #4294967295
 800c09c:	e7ae      	b.n	800bffc <wait_on_input+0xac>
 800c09e:	f04f 34ff 	mov.w	r4, #4294967295
 800c0a2:	e7ab      	b.n	800bffc <wait_on_input+0xac>
 800c0a4:	f04f 34ff 	mov.w	r4, #4294967295
    return value;
 800c0a8:	e7a8      	b.n	800bffc <wait_on_input+0xac>
 800c0aa:	bf00      	nop
 800c0ac:	20000804 	.word	0x20000804
 800c0b0:	20000800 	.word	0x20000800
 800c0b4:	20001a90 	.word	0x20001a90
 800c0b8:	20001d70 	.word	0x20001d70
 800c0bc:	200007f8 	.word	0x200007f8

0800c0c0 <ioports_init>:

void ioports_init (pin_group_pins_t *aux_inputs, pin_group_pins_t *aux_outputs)
{
 800c0c0:	b508      	push	{r3, lr}
    aux_in = aux_inputs->pins.inputs;
 800c0c2:	6842      	ldr	r2, [r0, #4]
 800c0c4:	4b1a      	ldr	r3, [pc, #104]	@ (800c130 <ioports_init+0x70>)
 800c0c6:	601a      	str	r2, [r3, #0]
    aux_out = aux_outputs->pins.outputs;
 800c0c8:	684a      	ldr	r2, [r1, #4]
 800c0ca:	4b1a      	ldr	r3, [pc, #104]	@ (800c134 <ioports_init+0x74>)
 800c0cc:	601a      	str	r2, [r3, #0]

    hal.port.set_pin_description = set_pin_description;
 800c0ce:	4b1a      	ldr	r3, [pc, #104]	@ (800c138 <ioports_init+0x78>)
 800c0d0:	4a1a      	ldr	r2, [pc, #104]	@ (800c13c <ioports_init+0x7c>)
 800c0d2:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    if(ioports_add(&digital, Port_Digital, aux_inputs->n_pins, aux_outputs->n_pins))  {
 800c0d6:	780b      	ldrb	r3, [r1, #0]
 800c0d8:	7802      	ldrb	r2, [r0, #0]
 800c0da:	2101      	movs	r1, #1
 800c0dc:	4818      	ldr	r0, [pc, #96]	@ (800c140 <ioports_init+0x80>)
 800c0de:	f005 ffb3 	bl	8012048 <ioports_add>
 800c0e2:	b1f8      	cbz	r0, 800c124 <ioports_init+0x64>

        if(digital.in.n_ports) {
 800c0e4:	4b16      	ldr	r3, [pc, #88]	@ (800c140 <ioports_init+0x80>)
 800c0e6:	791b      	ldrb	r3, [r3, #4]
 800c0e8:	b133      	cbz	r3, 800c0f8 <ioports_init+0x38>
            hal.port.wait_on_input = wait_on_input;
 800c0ea:	4b13      	ldr	r3, [pc, #76]	@ (800c138 <ioports_init+0x78>)
 800c0ec:	4a15      	ldr	r2, [pc, #84]	@ (800c144 <ioports_init+0x84>)
 800c0ee:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
            hal.port.register_interrupt_handler = register_interrupt_handler;
 800c0f2:	4a15      	ldr	r2, [pc, #84]	@ (800c148 <ioports_init+0x88>)
 800c0f4:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
        }

        if(digital.out.n_ports)
 800c0f8:	4b11      	ldr	r3, [pc, #68]	@ (800c140 <ioports_init+0x80>)
 800c0fa:	7b1b      	ldrb	r3, [r3, #12]
 800c0fc:	b11b      	cbz	r3, 800c106 <ioports_init+0x46>
            hal.port.digital_out = digital_out;
 800c0fe:	4b0e      	ldr	r3, [pc, #56]	@ (800c138 <ioports_init+0x78>)
 800c100:	4a12      	ldr	r2, [pc, #72]	@ (800c14c <ioports_init+0x8c>)
 800c102:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

        hal.port.claim = claim;
 800c106:	4b0c      	ldr	r3, [pc, #48]	@ (800c138 <ioports_init+0x78>)
 800c108:	4a11      	ldr	r2, [pc, #68]	@ (800c150 <ioports_init+0x90>)
 800c10a:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
        hal.port.swap_pins = swap_pins;
 800c10e:	4a11      	ldr	r2, [pc, #68]	@ (800c154 <ioports_init+0x94>)
 800c110:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        hal.port.get_pin_info = get_pin_info;
 800c114:	4a10      	ldr	r2, [pc, #64]	@ (800c158 <ioports_init+0x98>)
 800c116:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

        ioports_add_settings(NULL, NULL);
 800c11a:	2100      	movs	r1, #0
 800c11c:	4608      	mov	r0, r1
 800c11e:	f006 fc35 	bl	801298c <ioports_add_settings>

    } else
        hal.port.set_pin_description = NULL;
}
 800c122:	bd08      	pop	{r3, pc}
        hal.port.set_pin_description = NULL;
 800c124:	4b04      	ldr	r3, [pc, #16]	@ (800c138 <ioports_init+0x78>)
 800c126:	2200      	movs	r2, #0
 800c128:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
}
 800c12c:	e7f9      	b.n	800c122 <ioports_init+0x62>
 800c12e:	bf00      	nop
 800c130:	20000800 	.word	0x20000800
 800c134:	200007fc 	.word	0x200007fc
 800c138:	20001a90 	.word	0x20001a90
 800c13c:	0800b96d 	.word	0x0800b96d
 800c140:	20000804 	.word	0x20000804
 800c144:	0800bf51 	.word	0x0800bf51
 800c148:	0800bebd 	.word	0x0800bebd
 800c14c:	0800b791 	.word	0x0800b791
 800c150:	0800bd05 	.word	0x0800bd05
 800c154:	0800bb79 	.word	0x0800bb79
 800c158:	0800b865 	.word	0x0800b865

0800c15c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c15c:	b088      	sub	sp, #32
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c15e:	2200      	movs	r2, #0
 800c160:	9200      	str	r2, [sp, #0]
 800c162:	4b29      	ldr	r3, [pc, #164]	@ (800c208 <MX_GPIO_Init+0xac>)
 800c164:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c166:	f041 0101 	orr.w	r1, r1, #1
 800c16a:	6319      	str	r1, [r3, #48]	@ 0x30
 800c16c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c16e:	f001 0101 	and.w	r1, r1, #1
 800c172:	9100      	str	r1, [sp, #0]
 800c174:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c176:	9201      	str	r2, [sp, #4]
 800c178:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c17a:	f041 0102 	orr.w	r1, r1, #2
 800c17e:	6319      	str	r1, [r3, #48]	@ 0x30
 800c180:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c182:	f001 0102 	and.w	r1, r1, #2
 800c186:	9101      	str	r1, [sp, #4]
 800c188:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c18a:	9202      	str	r2, [sp, #8]
 800c18c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c18e:	f041 0104 	orr.w	r1, r1, #4
 800c192:	6319      	str	r1, [r3, #48]	@ 0x30
 800c194:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c196:	f001 0104 	and.w	r1, r1, #4
 800c19a:	9102      	str	r1, [sp, #8]
 800c19c:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c19e:	9203      	str	r2, [sp, #12]
 800c1a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c1a2:	f041 0108 	orr.w	r1, r1, #8
 800c1a6:	6319      	str	r1, [r3, #48]	@ 0x30
 800c1a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c1aa:	f001 0108 	and.w	r1, r1, #8
 800c1ae:	9103      	str	r1, [sp, #12]
 800c1b0:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c1b2:	9204      	str	r2, [sp, #16]
 800c1b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c1b6:	f041 0110 	orr.w	r1, r1, #16
 800c1ba:	6319      	str	r1, [r3, #48]	@ 0x30
 800c1bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c1be:	f001 0110 	and.w	r1, r1, #16
 800c1c2:	9104      	str	r1, [sp, #16]
 800c1c4:	9904      	ldr	r1, [sp, #16]
#ifdef GPIOF
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800c1c6:	9205      	str	r2, [sp, #20]
 800c1c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c1ca:	f041 0120 	orr.w	r1, r1, #32
 800c1ce:	6319      	str	r1, [r3, #48]	@ 0x30
 800c1d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c1d2:	f001 0120 	and.w	r1, r1, #32
 800c1d6:	9105      	str	r1, [sp, #20]
 800c1d8:	9905      	ldr	r1, [sp, #20]
#endif
#ifdef GPIOG
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c1da:	9206      	str	r2, [sp, #24]
 800c1dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c1de:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800c1e2:	6319      	str	r1, [r3, #48]	@ 0x30
 800c1e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c1e6:	f001 0140 	and.w	r1, r1, #64	@ 0x40
 800c1ea:	9106      	str	r1, [sp, #24]
 800c1ec:	9906      	ldr	r1, [sp, #24]
#endif
#ifdef GPIOH
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c1ee:	9207      	str	r2, [sp, #28]
 800c1f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c1f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c1f6:	631a      	str	r2, [r3, #48]	@ 0x30
 800c1f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1fe:	9307      	str	r3, [sp, #28]
 800c200:	9b07      	ldr	r3, [sp, #28]
#endif
}
 800c202:	b008      	add	sp, #32
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	40023800 	.word	0x40023800

0800c20c <SystemClock_Config>:
{
 800c20c:	b510      	push	{r4, lr}
 800c20e:	b094      	sub	sp, #80	@ 0x50
  __HAL_RCC_PWR_CLK_ENABLE();
 800c210:	2100      	movs	r1, #0
 800c212:	9101      	str	r1, [sp, #4]
 800c214:	4b1e      	ldr	r3, [pc, #120]	@ (800c290 <SystemClock_Config+0x84>)
 800c216:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c218:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800c21c:	641a      	str	r2, [r3, #64]	@ 0x40
 800c21e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c224:	9301      	str	r3, [sp, #4]
 800c226:	9b01      	ldr	r3, [sp, #4]
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c228:	9102      	str	r1, [sp, #8]
 800c22a:	4b1a      	ldr	r3, [pc, #104]	@ (800c294 <SystemClock_Config+0x88>)
 800c22c:	681a      	ldr	r2, [r3, #0]
 800c22e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c232:	601a      	str	r2, [r3, #0]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c23a:	9302      	str	r3, [sp, #8]
 800c23c:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitTypeDef RCC_OscInitStruct = {
 800c23e:	2230      	movs	r2, #48	@ 0x30
 800c240:	a808      	add	r0, sp, #32
 800c242:	f018 fd74 	bl	8024d2e <memset>
 800c246:	2301      	movs	r3, #1
 800c248:	9308      	str	r3, [sp, #32]
 800c24a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c24e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c250:	2302      	movs	r3, #2
 800c252:	930e      	str	r3, [sp, #56]	@ 0x38
 800c254:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800c258:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c25a:	2208      	movs	r2, #8
 800c25c:	9210      	str	r2, [sp, #64]	@ 0x40
 800c25e:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 800c262:	9211      	str	r2, [sp, #68]	@ 0x44
 800c264:	9312      	str	r3, [sp, #72]	@ 0x48
 800c266:	2307      	movs	r3, #7
 800c268:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800c26a:	a808      	add	r0, sp, #32
 800c26c:	f7fd f9b6 	bl	80095dc <HAL_RCC_OscConfig>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 800c270:	f10d 0c0c 	add.w	ip, sp, #12
 800c274:	4c08      	ldr	r4, [pc, #32]	@ (800c298 <SystemClock_Config+0x8c>)
 800c276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c278:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c27c:	6823      	ldr	r3, [r4, #0]
 800c27e:	f8cc 3000 	str.w	r3, [ip]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY) != HAL_OK) {
 800c282:	2105      	movs	r1, #5
 800c284:	a803      	add	r0, sp, #12
 800c286:	f7fd fc0d 	bl	8009aa4 <HAL_RCC_ClockConfig>
}
 800c28a:	b014      	add	sp, #80	@ 0x50
 800c28c:	bd10      	pop	{r4, pc}
 800c28e:	bf00      	nop
 800c290:	40023800 	.word	0x40023800
 800c294:	40007000 	.word	0x40007000
 800c298:	08029198 	.word	0x08029198

0800c29c <main>:
{
 800c29c:	b508      	push	{r3, lr}
    HAL_Init();
 800c29e:	f7fc fe27 	bl	8008ef0 <HAL_Init>
    SystemClock_Config();
 800c2a2:	f7ff ffb3 	bl	800c20c <SystemClock_Config>
    MX_GPIO_Init();
 800c2a6:	f7ff ff59 	bl	800c15c <MX_GPIO_Init>
    if(!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 800c2aa:	4b0c      	ldr	r3, [pc, #48]	@ (800c2dc <main+0x40>)
 800c2ac:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800c2b0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800c2b4:	d10d      	bne.n	800c2d2 <main+0x36>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800c2b6:	4a09      	ldr	r2, [pc, #36]	@ (800c2dc <main+0x40>)
 800c2b8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
 800c2bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c2c0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
        DWT->CYCCNT = 0;
 800c2c4:	4b06      	ldr	r3, [pc, #24]	@ (800c2e0 <main+0x44>)
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	f042 0201 	orr.w	r2, r2, #1
 800c2d0:	601a      	str	r2, [r3, #0]
    grbl_enter();
 800c2d2:	f005 fb7d 	bl	80119d0 <grbl_enter>
}
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	bd08      	pop	{r3, pc}
 800c2da:	bf00      	nop
 800c2dc:	e000ed00 	.word	0xe000ed00
 800c2e0:	e0001000 	.word	0xe0001000

0800c2e4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c2e4:	4770      	bx	lr
	...

0800c2e8 <get_macro_char>:
    hal.stream.file = NULL;  // Input stream is not file based
}

// Function to read a character from the G-code buffer
static int16_t get_macro_char(void) {
    if (gcode_buffer_index < gcode_buffer_length) {
 800c2e8:	4b06      	ldr	r3, [pc, #24]	@ (800c304 <get_macro_char+0x1c>)
 800c2ea:	881b      	ldrh	r3, [r3, #0]
 800c2ec:	4a06      	ldr	r2, [pc, #24]	@ (800c308 <get_macro_char+0x20>)
 800c2ee:	8812      	ldrh	r2, [r2, #0]
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d205      	bcs.n	800c300 <get_macro_char+0x18>
        return gcode_buffer[gcode_buffer_index++];
 800c2f4:	1c59      	adds	r1, r3, #1
 800c2f6:	4a03      	ldr	r2, [pc, #12]	@ (800c304 <get_macro_char+0x1c>)
 800c2f8:	8011      	strh	r1, [r2, #0]
 800c2fa:	4a04      	ldr	r2, [pc, #16]	@ (800c30c <get_macro_char+0x24>)
 800c2fc:	5cd0      	ldrb	r0, [r2, r3]
 800c2fe:	4770      	bx	lr
    } else {
        return 0;  // No more data
 800c300:	2000      	movs	r0, #0
    }
}
 800c302:	4770      	bx	lr
 800c304:	2000081e 	.word	0x2000081e
 800c308:	2000081c 	.word	0x2000081c
 800c30c:	20000820 	.word	0x20000820

0800c310 <on_report_my_options>:
    // Continue with any other real-time execution tasks
    on_execute_realtime(state);
}

// Add info about our plugin to the $I report
static void on_report_my_options(bool newopt) {
 800c310:	b510      	push	{r4, lr}
 800c312:	4604      	mov	r4, r0
    if (on_report_options) {
 800c314:	4b05      	ldr	r3, [pc, #20]	@ (800c32c <on_report_my_options+0x1c>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	b103      	cbz	r3, 800c31c <on_report_my_options+0xc>
        on_report_options(newopt);
 800c31a:	4798      	blx	r3
    }

    if (!newopt) {
 800c31c:	b924      	cbnz	r4, 800c328 <on_report_my_options+0x18>
        hal.stream.write("[PLUGIN:Register Monitor v1.00]" ASCII_EOL);
 800c31e:	4b04      	ldr	r3, [pc, #16]	@ (800c330 <on_report_my_options+0x20>)
 800c320:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c324:	4803      	ldr	r0, [pc, #12]	@ (800c334 <on_report_my_options+0x24>)
 800c326:	4798      	blx	r3
    }
}
 800c328:	bd10      	pop	{r4, pc}
 800c32a:	bf00      	nop
 800c32c:	20000a6c 	.word	0x20000a6c
 800c330:	20001a90 	.word	0x20001a90
 800c334:	0802921c 	.word	0x0802921c

0800c338 <send_gcode_sequence>:
static void send_gcode_sequence(int selected_index) {
 800c338:	b538      	push	{r3, r4, r5, lr}
    switch (selected_index) {
 800c33a:	2801      	cmp	r0, #1
 800c33c:	d01a      	beq.n	800c374 <send_gcode_sequence+0x3c>
 800c33e:	2802      	cmp	r0, #2
 800c340:	d01b      	beq.n	800c37a <send_gcode_sequence+0x42>
 800c342:	b9b0      	cbnz	r0, 800c372 <send_gcode_sequence+0x3a>
            selected_gcode = gcode_file_1;
 800c344:	4b0e      	ldr	r3, [pc, #56]	@ (800c380 <send_gcode_sequence+0x48>)
 800c346:	6819      	ldr	r1, [r3, #0]
    strncpy(gcode_buffer, selected_gcode, GCODE_BUFFER_SIZE - 1);
 800c348:	4d0e      	ldr	r5, [pc, #56]	@ (800c384 <send_gcode_sequence+0x4c>)
 800c34a:	22ff      	movs	r2, #255	@ 0xff
 800c34c:	4628      	mov	r0, r5
 800c34e:	f018 fd24 	bl	8024d9a <strncpy>
    gcode_buffer[GCODE_BUFFER_SIZE - 1] = '\0';  // Ensure null-termination
 800c352:	2400      	movs	r4, #0
 800c354:	f885 40ff 	strb.w	r4, [r5, #255]	@ 0xff
    gcode_buffer_length = strlen(gcode_buffer);
 800c358:	4628      	mov	r0, r5
 800c35a:	f7fb fed1 	bl	8008100 <strlen>
 800c35e:	4b0a      	ldr	r3, [pc, #40]	@ (800c388 <send_gcode_sequence+0x50>)
 800c360:	8018      	strh	r0, [r3, #0]
    gcode_buffer_index = 0;
 800c362:	4b0a      	ldr	r3, [pc, #40]	@ (800c38c <send_gcode_sequence+0x54>)
 800c364:	801c      	strh	r4, [r3, #0]
    hal.stream.read = get_macro_char;
 800c366:	4b0a      	ldr	r3, [pc, #40]	@ (800c390 <send_gcode_sequence+0x58>)
 800c368:	4a0a      	ldr	r2, [pc, #40]	@ (800c394 <send_gcode_sequence+0x5c>)
 800c36a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    hal.stream.file = NULL;  // Input stream is not file based
 800c36e:	f8c3 40f0 	str.w	r4, [r3, #240]	@ 0xf0
}
 800c372:	bd38      	pop	{r3, r4, r5, pc}
            selected_gcode = gcode_file_2;
 800c374:	4b08      	ldr	r3, [pc, #32]	@ (800c398 <send_gcode_sequence+0x60>)
 800c376:	6819      	ldr	r1, [r3, #0]
            break;
 800c378:	e7e6      	b.n	800c348 <send_gcode_sequence+0x10>
            selected_gcode = gcode_file_3;
 800c37a:	4b08      	ldr	r3, [pc, #32]	@ (800c39c <send_gcode_sequence+0x64>)
 800c37c:	6819      	ldr	r1, [r3, #0]
            break;
 800c37e:	e7e3      	b.n	800c348 <send_gcode_sequence+0x10>
 800c380:	2000017c 	.word	0x2000017c
 800c384:	20000820 	.word	0x20000820
 800c388:	2000081c 	.word	0x2000081c
 800c38c:	2000081e 	.word	0x2000081e
 800c390:	20001a90 	.word	0x20001a90
 800c394:	0800c2e9 	.word	0x0800c2e9
 800c398:	20000178 	.word	0x20000178
 800c39c:	20000174 	.word	0x20000174

0800c3a0 <check_register_and_execute_gcode>:
    uint16_t number_to_write = Holding_Registers_Database[10];
 800c3a0:	4b09      	ldr	r3, [pc, #36]	@ (800c3c8 <check_register_and_execute_gcode+0x28>)
 800c3a2:	8a9a      	ldrh	r2, [r3, #20]
    uint16_t text_size = Holding_Registers_Database[12];
 800c3a4:	8b1b      	ldrh	r3, [r3, #24]
    if (number_to_write < 0 || number_to_write > 9 || text_size < 1 || text_size > 10) {
 800c3a6:	2a09      	cmp	r2, #9
 800c3a8:	d80d      	bhi.n	800c3c6 <check_register_and_execute_gcode+0x26>
static void check_register_and_execute_gcode(sys_state_t state) {
 800c3aa:	b510      	push	{r4, lr}
 800c3ac:	4604      	mov	r4, r0
    if (number_to_write < 0 || number_to_write > 9 || text_size < 1 || text_size > 10) {
 800c3ae:	b10b      	cbz	r3, 800c3b4 <check_register_and_execute_gcode+0x14>
 800c3b0:	2b0a      	cmp	r3, #10
 800c3b2:	d900      	bls.n	800c3b6 <check_register_and_execute_gcode+0x16>
}
 800c3b4:	bd10      	pop	{r4, pc}
    send_gcode_sequence(selected_index);
 800c3b6:	2000      	movs	r0, #0
 800c3b8:	f7ff ffbe 	bl	800c338 <send_gcode_sequence>
    on_execute_realtime(state);
 800c3bc:	4b03      	ldr	r3, [pc, #12]	@ (800c3cc <check_register_and_execute_gcode+0x2c>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	4798      	blx	r3
 800c3c4:	e7f6      	b.n	800c3b4 <check_register_and_execute_gcode+0x14>
 800c3c6:	4770      	bx	lr
 800c3c8:	200006bc 	.word	0x200006bc
 800c3cc:	20000a68 	.word	0x20000a68

0800c3d0 <MX_GPIO_Init>:
    // Configure GPIOs for USART2
    MX_GPIO_Init();
}

void MX_GPIO_Init(void)
{
 800c3d0:	b500      	push	{lr}
 800c3d2:	b087      	sub	sp, #28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	4a0e      	ldr	r2, [pc, #56]	@ (800c414 <MX_GPIO_Init+0x44>)
 800c3da:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800c3dc:	f041 0101 	orr.w	r1, r1, #1
 800c3e0:	6311      	str	r1, [r2, #48]	@ 0x30
 800c3e2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c3e4:	f002 0201 	and.w	r2, r2, #1
 800c3e8:	9200      	str	r2, [sp, #0]
 800c3ea:	9a00      	ldr	r2, [sp, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3ec:	9301      	str	r3, [sp, #4]
 800c3ee:	9302      	str	r3, [sp, #8]
 800c3f0:	9303      	str	r3, [sp, #12]
 800c3f2:	9304      	str	r3, [sp, #16]
 800c3f4:	9305      	str	r3, [sp, #20]

    // Configure GPIO pins for USART2 TX and RX
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800c3f6:	230c      	movs	r3, #12
 800c3f8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3fa:	2302      	movs	r3, #2
 800c3fc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c3fe:	2303      	movs	r3, #3
 800c400:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c402:	2307      	movs	r3, #7
 800c404:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c406:	a901      	add	r1, sp, #4
 800c408:	4803      	ldr	r0, [pc, #12]	@ (800c418 <MX_GPIO_Init+0x48>)
 800c40a:	f7fc ffff 	bl	800940c <HAL_GPIO_Init>
}
 800c40e:	b007      	add	sp, #28
 800c410:	f85d fb04 	ldr.w	pc, [sp], #4
 800c414:	40023800 	.word	0x40023800
 800c418:	40020000 	.word	0x40020000

0800c41c <MX_USART2_UART_Init>:
{
 800c41c:	b508      	push	{r3, lr}
    huart2.Instance = USART2;
 800c41e:	480b      	ldr	r0, [pc, #44]	@ (800c44c <MX_USART2_UART_Init+0x30>)
 800c420:	4b0b      	ldr	r3, [pc, #44]	@ (800c450 <MX_USART2_UART_Init+0x34>)
 800c422:	6003      	str	r3, [r0, #0]
    huart2.Init.BaudRate = 115200;
 800c424:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800c428:	6043      	str	r3, [r0, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c42a:	2300      	movs	r3, #0
 800c42c:	6083      	str	r3, [r0, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800c42e:	60c3      	str	r3, [r0, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800c430:	6103      	str	r3, [r0, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 800c432:	220c      	movs	r2, #12
 800c434:	6142      	str	r2, [r0, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c436:	6183      	str	r3, [r0, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c438:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 800c43a:	f7fd fd82 	bl	8009f42 <HAL_UART_Init>
 800c43e:	b910      	cbnz	r0, 800c446 <MX_USART2_UART_Init+0x2a>
    MX_GPIO_Init();
 800c440:	f7ff ffc6 	bl	800c3d0 <MX_GPIO_Init>
}
 800c444:	bd08      	pop	{r3, pc}
        Error_Handler();
 800c446:	f7ff ff4d 	bl	800c2e4 <Error_Handler>
 800c44a:	e7f9      	b.n	800c440 <MX_USART2_UART_Init+0x24>
 800c44c:	20000a20 	.word	0x20000a20
 800c450:	40004400 	.word	0x40004400

0800c454 <my_plugin_init>:
void my_plugin_init(void) {
 800c454:	b510      	push	{r4, lr}
    on_report_options = grbl.on_report_options;
 800c456:	4c0a      	ldr	r4, [pc, #40]	@ (800c480 <my_plugin_init+0x2c>)
 800c458:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c45a:	4b0a      	ldr	r3, [pc, #40]	@ (800c484 <my_plugin_init+0x30>)
 800c45c:	601a      	str	r2, [r3, #0]
    grbl.on_report_options = on_report_my_options;
 800c45e:	4b0a      	ldr	r3, [pc, #40]	@ (800c488 <my_plugin_init+0x34>)
 800c460:	6563      	str	r3, [r4, #84]	@ 0x54
    MX_USART2_UART_Init();
 800c462:	f7ff ffdb 	bl	800c41c <MX_USART2_UART_Init>
    HAL_UART_Receive_IT(&huart2, RxData, 256);
 800c466:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c46a:	4908      	ldr	r1, [pc, #32]	@ (800c48c <my_plugin_init+0x38>)
 800c46c:	4808      	ldr	r0, [pc, #32]	@ (800c490 <my_plugin_init+0x3c>)
 800c46e:	f7fd fd98 	bl	8009fa2 <HAL_UART_Receive_IT>
    on_execute_realtime = grbl.on_execute_realtime;
 800c472:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800c474:	4b07      	ldr	r3, [pc, #28]	@ (800c494 <my_plugin_init+0x40>)
 800c476:	601a      	str	r2, [r3, #0]
    grbl.on_execute_realtime = check_register_and_execute_gcode;
 800c478:	4b07      	ldr	r3, [pc, #28]	@ (800c498 <my_plugin_init+0x44>)
 800c47a:	64a3      	str	r3, [r4, #72]	@ 0x48
}
 800c47c:	bd10      	pop	{r4, pc}
 800c47e:	bf00      	nop
 800c480:	20001c78 	.word	0x20001c78
 800c484:	20000a6c 	.word	0x20000a6c
 800c488:	0800c311 	.word	0x0800c311
 800c48c:	20000920 	.word	0x20000920
 800c490:	20000a20 	.word	0x20000a20
 800c494:	20000a68 	.word	0x20000a68
 800c498:	0800c3a1 	.word	0x0800c3a1

0800c49c <serialClaimPort>:
#if SERIAL_PORT || SERIAL1_PORT || SERIAL2_PORT

static bool serialClaimPort (uint8_t instance)
{
    bool ok = false;
    uint_fast8_t idx = sizeof(serial) / sizeof(io_stream_properties_t);
 800c49c:	2302      	movs	r3, #2

    do {
        if(serial[--idx].instance == instance) {
 800c49e:	3b01      	subs	r3, #1
 800c4a0:	4a11      	ldr	r2, [pc, #68]	@ (800c4e8 <serialClaimPort+0x4c>)
 800c4a2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c4a6:	7852      	ldrb	r2, [r2, #1]
 800c4a8:	4282      	cmp	r2, r0
 800c4aa:	d003      	beq.n	800c4b4 <serialClaimPort+0x18>
            if((ok = serial[idx].flags.claimable && !serial[idx].flags.claimed))
                serial[idx].flags.claimed = On;
            break;
        }

    } while(idx);
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d1f6      	bne.n	800c49e <serialClaimPort+0x2>
    bool ok = false;
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	4770      	bx	lr
            if((ok = serial[idx].flags.claimable && !serial[idx].flags.claimed))
 800c4b4:	4a0c      	ldr	r2, [pc, #48]	@ (800c4e8 <serialClaimPort+0x4c>)
 800c4b6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c4ba:	7892      	ldrb	r2, [r2, #2]
 800c4bc:	f3c2 0040 	ubfx	r0, r2, #1, #1
 800c4c0:	f012 0f02 	tst.w	r2, #2
 800c4c4:	d00f      	beq.n	800c4e6 <serialClaimPort+0x4a>
 800c4c6:	4a08      	ldr	r2, [pc, #32]	@ (800c4e8 <serialClaimPort+0x4c>)
 800c4c8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c4cc:	7892      	ldrb	r2, [r2, #2]
 800c4ce:	f012 0f04 	tst.w	r2, #4
 800c4d2:	d107      	bne.n	800c4e4 <serialClaimPort+0x48>
                serial[idx].flags.claimed = On;
 800c4d4:	4a04      	ldr	r2, [pc, #16]	@ (800c4e8 <serialClaimPort+0x4c>)
 800c4d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c4da:	789a      	ldrb	r2, [r3, #2]
 800c4dc:	f042 0204 	orr.w	r2, r2, #4
 800c4e0:	709a      	strb	r2, [r3, #2]
 800c4e2:	4770      	bx	lr
            if((ok = serial[idx].flags.claimable && !serial[idx].flags.claimed))
 800c4e4:	2000      	movs	r0, #0

    return ok;
}
 800c4e6:	4770      	bx	lr
 800c4e8:	2000018c 	.word	0x2000018c

0800c4ec <serialRxFree>:
//
// Returns number of free characters in serial input buffer
//
static uint16_t serialRxFree (void)
{
    uint16_t tail = rxbuf.tail, head = rxbuf.head;
 800c4ec:	4b08      	ldr	r3, [pc, #32]	@ (800c510 <serialRxFree+0x24>)
 800c4ee:	6858      	ldr	r0, [r3, #4]
 800c4f0:	b280      	uxth	r0, r0
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	b29b      	uxth	r3, r3

    return (RX_BUFFER_SIZE - 1) - BUFCOUNT(head, tail, RX_BUFFER_SIZE);
 800c4f6:	4298      	cmp	r0, r3
 800c4f8:	d804      	bhi.n	800c504 <serialRxFree+0x18>
 800c4fa:	1ac0      	subs	r0, r0, r3
 800c4fc:	f200 30ff 	addw	r0, r0, #1023	@ 0x3ff
 800c500:	b280      	uxth	r0, r0
 800c502:	4770      	bx	lr
 800c504:	1ac0      	subs	r0, r0, r3
 800c506:	b280      	uxth	r0, r0
 800c508:	3801      	subs	r0, #1
 800c50a:	b280      	uxth	r0, r0
}
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	2000128c 	.word	0x2000128c

0800c514 <serialRxCount>:
//
// Returns number of characters in serial input buffer
//
static uint16_t serialRxCount (void)
{
    uint32_t tail = rxbuf.tail, head = rxbuf.head;
 800c514:	4a07      	ldr	r2, [pc, #28]	@ (800c534 <serialRxCount+0x20>)
 800c516:	6853      	ldr	r3, [r2, #4]
 800c518:	6810      	ldr	r0, [r2, #0]

    return BUFCOUNT(head, tail, RX_BUFFER_SIZE);
 800c51a:	4283      	cmp	r3, r0
 800c51c:	d804      	bhi.n	800c528 <serialRxCount+0x14>
 800c51e:	b280      	uxth	r0, r0
 800c520:	b29b      	uxth	r3, r3
 800c522:	1ac0      	subs	r0, r0, r3
 800c524:	b280      	uxth	r0, r0
 800c526:	4770      	bx	lr
 800c528:	1ac0      	subs	r0, r0, r3
 800c52a:	b280      	uxth	r0, r0
 800c52c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800c530:	b280      	uxth	r0, r0
}
 800c532:	4770      	bx	lr
 800c534:	2000128c 	.word	0x2000128c

0800c538 <serialRxFlush>:
//
// Flushes the serial input buffer
//
static void serialRxFlush (void)
{
    rxbuf.tail = rxbuf.head;
 800c538:	4b01      	ldr	r3, [pc, #4]	@ (800c540 <serialRxFlush+0x8>)
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	605a      	str	r2, [r3, #4]
}
 800c53e:	4770      	bx	lr
 800c540:	2000128c 	.word	0x2000128c

0800c544 <serialRxCancel>:
//
// Flushes and adds a CAN character to the serial input buffer
//
static void serialRxCancel (void)
{
    rxbuf.data[rxbuf.head] = ASCII_CAN;
 800c544:	4b06      	ldr	r3, [pc, #24]	@ (800c560 <serialRxCancel+0x1c>)
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	441a      	add	r2, r3
 800c54a:	2118      	movs	r1, #24
 800c54c:	72d1      	strb	r1, [r2, #11]
    rxbuf.tail = rxbuf.head;
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	605a      	str	r2, [r3, #4]
    rxbuf.head = BUFNEXT(rxbuf.head, rxbuf);
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	3201      	adds	r2, #1
 800c556:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c55a:	601a      	str	r2, [r3, #0]
}
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	2000128c 	.word	0x2000128c

0800c564 <serialPutC>:

//
// Writes a character to the serial output stream
//
static bool serialPutC (const char c)
{
 800c564:	b538      	push	{r3, r4, r5, lr}
 800c566:	4605      	mov	r5, r0
    uint16_t next_head = BUFNEXT(txbuf.head, txbuf);    // Get pointer to next free slot in buffer
 800c568:	4b0e      	ldr	r3, [pc, #56]	@ (800c5a4 <serialPutC+0x40>)
 800c56a:	681c      	ldr	r4, [r3, #0]
 800c56c:	3401      	adds	r4, #1
 800c56e:	f3c4 0408 	ubfx	r4, r4, #0, #9

    while(txbuf.tail == next_head) {                    // While TX buffer full
 800c572:	4b0c      	ldr	r3, [pc, #48]	@ (800c5a4 <serialPutC+0x40>)
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	42a3      	cmp	r3, r4
 800c578:	d107      	bne.n	800c58a <serialPutC+0x26>
        if(!hal.stream_blocking_callback())             // check if blocking for space,
 800c57a:	4b0b      	ldr	r3, [pc, #44]	@ (800c5a8 <serialPutC+0x44>)
 800c57c:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800c580:	4798      	blx	r3
 800c582:	4603      	mov	r3, r0
 800c584:	2800      	cmp	r0, #0
 800c586:	d1f4      	bne.n	800c572 <serialPutC+0xe>
 800c588:	e00a      	b.n	800c5a0 <serialPutC+0x3c>
            return false;                               // exit if not (leaves TX buffer in an inconsistent state)
    }
    txbuf.data[txbuf.head] = c;                         // Add data to buffer,
 800c58a:	4b06      	ldr	r3, [pc, #24]	@ (800c5a4 <serialPutC+0x40>)
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	441a      	add	r2, r3
 800c590:	7215      	strb	r5, [r2, #8]
    txbuf.head = next_head;                             // update head pointer and
 800c592:	601c      	str	r4, [r3, #0]
    UART0->CR1 |= USART_CR1_TXEIE;                      // enable TX interrupts
 800c594:	4a05      	ldr	r2, [pc, #20]	@ (800c5ac <serialPutC+0x48>)
 800c596:	68d3      	ldr	r3, [r2, #12]
 800c598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c59c:	60d3      	str	r3, [r2, #12]

    return true;
 800c59e:	2301      	movs	r3, #1
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	bd38      	pop	{r3, r4, r5, pc}
 800c5a4:	20001084 	.word	0x20001084
 800c5a8:	20001a90 	.word	0x20001a90
 800c5ac:	40011000 	.word	0x40011000

0800c5b0 <serialWriteS>:

//
// Writes a null terminated string to the serial output stream, blocks if buffer full
//
static void serialWriteS (const char *s)
{
 800c5b0:	b510      	push	{r4, lr}
 800c5b2:	4604      	mov	r4, r0
    char c, *ptr = (char *)s;

    while((c = *ptr++) != '\0')
 800c5b4:	e001      	b.n	800c5ba <serialWriteS+0xa>
        serialPutC(c);
 800c5b6:	f7ff ffd5 	bl	800c564 <serialPutC>
    while((c = *ptr++) != '\0')
 800c5ba:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d1f9      	bne.n	800c5b6 <serialWriteS+0x6>
}
 800c5c2:	bd10      	pop	{r4, pc}

0800c5c4 <serialWrite>:

//
// Writes a number of characters from string to the serial output stream followed by EOL, blocks if buffer full
//
static void serialWrite (const char *s, uint16_t length)
{
 800c5c4:	b538      	push	{r3, r4, r5, lr}
 800c5c6:	4604      	mov	r4, r0
    char *ptr = (char *)s;

    while(length--)
 800c5c8:	e004      	b.n	800c5d4 <serialWrite+0x10>
        serialPutC(*ptr++);
 800c5ca:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c5ce:	f7ff ffc9 	bl	800c564 <serialPutC>
    while(length--)
 800c5d2:	4629      	mov	r1, r5
 800c5d4:	1e4b      	subs	r3, r1, #1
 800c5d6:	b29d      	uxth	r5, r3
 800c5d8:	2900      	cmp	r1, #0
 800c5da:	d1f6      	bne.n	800c5ca <serialWrite+0x6>
}
 800c5dc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c5e0 <serialTxFlush>:
//
// Flushes the serial output buffer
//
static void serialTxFlush (void)
{
    UART0->CR1 &= ~USART_CR1_TXEIE;     // Disable TX interrupts
 800c5e0:	4a04      	ldr	r2, [pc, #16]	@ (800c5f4 <serialTxFlush+0x14>)
 800c5e2:	68d3      	ldr	r3, [r2, #12]
 800c5e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c5e8:	60d3      	str	r3, [r2, #12]
    txbuf.tail = txbuf.head;
 800c5ea:	4b03      	ldr	r3, [pc, #12]	@ (800c5f8 <serialTxFlush+0x18>)
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	605a      	str	r2, [r3, #4]
}
 800c5f0:	4770      	bx	lr
 800c5f2:	bf00      	nop
 800c5f4:	40011000 	.word	0x40011000
 800c5f8:	20001084 	.word	0x20001084

0800c5fc <serialTxCount>:
//
// Returns number of characters pending transmission
//
static uint16_t serialTxCount (void)
{
    uint32_t tail = txbuf.tail, head = txbuf.head;
 800c5fc:	4b0c      	ldr	r3, [pc, #48]	@ (800c630 <serialTxCount+0x34>)
 800c5fe:	685a      	ldr	r2, [r3, #4]
 800c600:	681b      	ldr	r3, [r3, #0]

    return BUFCOUNT(head, tail, TX_BUFFER_SIZE) + (UART0->SR & USART_SR_TC ? 0 : 1);
 800c602:	429a      	cmp	r2, r3
 800c604:	d80d      	bhi.n	800c622 <serialTxCount+0x26>
 800c606:	b29b      	uxth	r3, r3
 800c608:	b292      	uxth	r2, r2
 800c60a:	1a9b      	subs	r3, r3, r2
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	4a09      	ldr	r2, [pc, #36]	@ (800c634 <serialTxCount+0x38>)
 800c610:	6812      	ldr	r2, [r2, #0]
 800c612:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800c616:	bf0c      	ite	eq
 800c618:	2001      	moveq	r0, #1
 800c61a:	2000      	movne	r0, #0
 800c61c:	4418      	add	r0, r3
}
 800c61e:	b280      	uxth	r0, r0
 800c620:	4770      	bx	lr
    return BUFCOUNT(head, tail, TX_BUFFER_SIZE) + (UART0->SR & USART_SR_TC ? 0 : 1);
 800c622:	1a9b      	subs	r3, r3, r2
 800c624:	b29b      	uxth	r3, r3
 800c626:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	e7ef      	b.n	800c60e <serialTxCount+0x12>
 800c62e:	bf00      	nop
 800c630:	20001084 	.word	0x20001084
 800c634:	40011000 	.word	0x40011000

0800c638 <serialGetC>:
//
// serialGetC - returns -1 if no data available
//
static int16_t serialGetC (void)
{
    uint_fast16_t tail = rxbuf.tail;    // Get buffer pointer
 800c638:	4a07      	ldr	r2, [pc, #28]	@ (800c658 <serialGetC+0x20>)
 800c63a:	6853      	ldr	r3, [r2, #4]

    if(tail == rxbuf.head)
 800c63c:	6812      	ldr	r2, [r2, #0]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d007      	beq.n	800c652 <serialGetC+0x1a>
        return -1; // no data available

    char data = rxbuf.data[tail];       // Get next character
 800c642:	4a05      	ldr	r2, [pc, #20]	@ (800c658 <serialGetC+0x20>)
 800c644:	18d1      	adds	r1, r2, r3
    rxbuf.tail = BUFNEXT(tail, rxbuf);  // and update pointer
 800c646:	3301      	adds	r3, #1
 800c648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c64c:	6053      	str	r3, [r2, #4]

    return (int16_t)data;
 800c64e:	7ac8      	ldrb	r0, [r1, #11]
 800c650:	4770      	bx	lr
        return -1; // no data available
 800c652:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c656:	4770      	bx	lr
 800c658:	2000128c 	.word	0x2000128c

0800c65c <serialDisable>:
    return true;
}

static bool serialDisable (bool disable)
{
    if(disable)
 800c65c:	b130      	cbz	r0, 800c66c <serialDisable+0x10>
        UART0->CR1 &= ~USART_CR1_RXNEIE;
 800c65e:	4a06      	ldr	r2, [pc, #24]	@ (800c678 <serialDisable+0x1c>)
 800c660:	68d3      	ldr	r3, [r2, #12]
 800c662:	f023 0320 	bic.w	r3, r3, #32
 800c666:	60d3      	str	r3, [r2, #12]
    else
        UART0->CR1 |= USART_CR1_RXNEIE;

    return true;
}
 800c668:	2001      	movs	r0, #1
 800c66a:	4770      	bx	lr
        UART0->CR1 |= USART_CR1_RXNEIE;
 800c66c:	4a02      	ldr	r2, [pc, #8]	@ (800c678 <serialDisable+0x1c>)
 800c66e:	68d3      	ldr	r3, [r2, #12]
 800c670:	f043 0320 	orr.w	r3, r3, #32
 800c674:	60d3      	str	r3, [r2, #12]
 800c676:	e7f7      	b.n	800c668 <serialDisable+0xc>
 800c678:	40011000 	.word	0x40011000

0800c67c <serialEnqueueRtCommand>:

static bool serialEnqueueRtCommand (char c)
{
 800c67c:	b508      	push	{r3, lr}
    return enqueue_realtime_command(c);
 800c67e:	4b02      	ldr	r3, [pc, #8]	@ (800c688 <serialEnqueueRtCommand+0xc>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4798      	blx	r3
}
 800c684:	bd08      	pop	{r3, pc}
 800c686:	bf00      	nop
 800c688:	200001a0 	.word	0x200001a0

0800c68c <serialSetRtHandler>:

static enqueue_realtime_command_ptr serialSetRtHandler (enqueue_realtime_command_ptr handler)
{
 800c68c:	4603      	mov	r3, r0
    enqueue_realtime_command_ptr prev = enqueue_realtime_command;
 800c68e:	4a03      	ldr	r2, [pc, #12]	@ (800c69c <serialSetRtHandler+0x10>)
 800c690:	6810      	ldr	r0, [r2, #0]

    if(handler)
 800c692:	461a      	mov	r2, r3
 800c694:	b10b      	cbz	r3, 800c69a <serialSetRtHandler+0xe>
        enqueue_realtime_command = handler;
 800c696:	4b01      	ldr	r3, [pc, #4]	@ (800c69c <serialSetRtHandler+0x10>)
 800c698:	601a      	str	r2, [r3, #0]

    return prev;
}
 800c69a:	4770      	bx	lr
 800c69c:	200001a0 	.word	0x200001a0

0800c6a0 <serial1RxFree>:
//
// Returns number of free characters in serial input buffer
//
static uint16_t serial1RxFree (void)
{
    uint32_t tail = rxbuf1.tail, head = rxbuf1.head;
 800c6a0:	4a07      	ldr	r2, [pc, #28]	@ (800c6c0 <serial1RxFree+0x20>)
 800c6a2:	6853      	ldr	r3, [r2, #4]
 800c6a4:	6810      	ldr	r0, [r2, #0]

    return (RX_BUFFER_SIZE - 1) - BUFCOUNT(head, tail, RX_BUFFER_SIZE);
 800c6a6:	4283      	cmp	r3, r0
 800c6a8:	d805      	bhi.n	800c6b6 <serial1RxFree+0x16>
 800c6aa:	1a18      	subs	r0, r3, r0
 800c6ac:	b280      	uxth	r0, r0
 800c6ae:	f200 30ff 	addw	r0, r0, #1023	@ 0x3ff
 800c6b2:	b280      	uxth	r0, r0
 800c6b4:	4770      	bx	lr
 800c6b6:	1a18      	subs	r0, r3, r0
 800c6b8:	b280      	uxth	r0, r0
 800c6ba:	3801      	subs	r0, #1
 800c6bc:	b280      	uxth	r0, r0
}
 800c6be:	4770      	bx	lr
 800c6c0:	20000c78 	.word	0x20000c78

0800c6c4 <serial1RxCount>:
//
// Returns number of characters in serial input buffer
//
static uint16_t serial1RxCount (void)
{
    uint32_t tail = rxbuf1.tail, head = rxbuf1.head;
 800c6c4:	4a07      	ldr	r2, [pc, #28]	@ (800c6e4 <serial1RxCount+0x20>)
 800c6c6:	6853      	ldr	r3, [r2, #4]
 800c6c8:	6810      	ldr	r0, [r2, #0]

    return BUFCOUNT(head, tail, RX_BUFFER_SIZE);
 800c6ca:	4283      	cmp	r3, r0
 800c6cc:	d804      	bhi.n	800c6d8 <serial1RxCount+0x14>
 800c6ce:	b280      	uxth	r0, r0
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	1ac0      	subs	r0, r0, r3
 800c6d4:	b280      	uxth	r0, r0
 800c6d6:	4770      	bx	lr
 800c6d8:	1ac0      	subs	r0, r0, r3
 800c6da:	b280      	uxth	r0, r0
 800c6dc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800c6e0:	b280      	uxth	r0, r0
}
 800c6e2:	4770      	bx	lr
 800c6e4:	20000c78 	.word	0x20000c78

0800c6e8 <serial1RxFlush>:
//
// Flushes the serial input buffer
//
static void serial1RxFlush (void)
{
    rxbuf1.tail = rxbuf1.head;
 800c6e8:	4b01      	ldr	r3, [pc, #4]	@ (800c6f0 <serial1RxFlush+0x8>)
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	605a      	str	r2, [r3, #4]
}
 800c6ee:	4770      	bx	lr
 800c6f0:	20000c78 	.word	0x20000c78

0800c6f4 <serial1RxCancel>:
//
// Flushes and adds a CAN character to the serial input buffer
//
static void serial1RxCancel (void)
{
    rxbuf1.data[rxbuf1.head] = ASCII_CAN;
 800c6f4:	4b06      	ldr	r3, [pc, #24]	@ (800c710 <serial1RxCancel+0x1c>)
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	441a      	add	r2, r3
 800c6fa:	2118      	movs	r1, #24
 800c6fc:	72d1      	strb	r1, [r2, #11]
    rxbuf1.tail = rxbuf1.head;
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	605a      	str	r2, [r3, #4]
    rxbuf1.head = BUFNEXT(rxbuf1.head, rxbuf1);
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	3201      	adds	r2, #1
 800c706:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c70a:	601a      	str	r2, [r3, #0]
}
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	20000c78 	.word	0x20000c78

0800c714 <serial1PutC>:

//
// Writes a character to the serial output stream
//
static bool serial1PutC (const char c)
{
 800c714:	b538      	push	{r3, r4, r5, lr}
 800c716:	4605      	mov	r5, r0
    uint32_t next_head = BUFNEXT(txbuf1.head, txbuf1);   // Set and update head pointer
 800c718:	4b11      	ldr	r3, [pc, #68]	@ (800c760 <serial1PutC+0x4c>)
 800c71a:	681c      	ldr	r4, [r3, #0]
 800c71c:	3401      	adds	r4, #1
 800c71e:	f3c4 0408 	ubfx	r4, r4, #0, #9

    while(txbuf1.tail == next_head) {           // While TX buffer full
 800c722:	e004      	b.n	800c72e <serial1PutC+0x1a>
        if(!hal.stream_blocking_callback())     // check if blocking for space,
            return false;                       // exit if not (leaves TX buffer in an inconsistent state)
        UART1->CR1 |= USART_CR1_TXEIE;          // Enable TX interrupts???
 800c724:	4a0f      	ldr	r2, [pc, #60]	@ (800c764 <serial1PutC+0x50>)
 800c726:	68d3      	ldr	r3, [r2, #12]
 800c728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c72c:	60d3      	str	r3, [r2, #12]
    while(txbuf1.tail == next_head) {           // While TX buffer full
 800c72e:	4b0c      	ldr	r3, [pc, #48]	@ (800c760 <serial1PutC+0x4c>)
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	42a3      	cmp	r3, r4
 800c734:	d107      	bne.n	800c746 <serial1PutC+0x32>
        if(!hal.stream_blocking_callback())     // check if blocking for space,
 800c736:	4b0c      	ldr	r3, [pc, #48]	@ (800c768 <serial1PutC+0x54>)
 800c738:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800c73c:	4798      	blx	r3
 800c73e:	4603      	mov	r3, r0
 800c740:	2800      	cmp	r0, #0
 800c742:	d1ef      	bne.n	800c724 <serial1PutC+0x10>
 800c744:	e00a      	b.n	800c75c <serial1PutC+0x48>
    }

    txbuf1.data[txbuf1.head] = c;               // Add data to buffer
 800c746:	4b06      	ldr	r3, [pc, #24]	@ (800c760 <serial1PutC+0x4c>)
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	441a      	add	r2, r3
 800c74c:	7215      	strb	r5, [r2, #8]
    txbuf1.head = next_head;                    // and update head pointer
 800c74e:	601c      	str	r4, [r3, #0]

    UART1->CR1 |= USART_CR1_TXEIE;              // Enable TX interrupts
 800c750:	4a04      	ldr	r2, [pc, #16]	@ (800c764 <serial1PutC+0x50>)
 800c752:	68d3      	ldr	r3, [r2, #12]
 800c754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c758:	60d3      	str	r3, [r2, #12]

    return true;
 800c75a:	2301      	movs	r3, #1
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	20000a70 	.word	0x20000a70
 800c764:	40004400 	.word	0x40004400
 800c768:	20001a90 	.word	0x20001a90

0800c76c <serial1WriteS>:

//
// Writes a null terminated string to the serial output stream, blocks if buffer full
//
static void serial1WriteS (const char *s)
{
 800c76c:	b510      	push	{r4, lr}
 800c76e:	4604      	mov	r4, r0
    char c, *ptr = (char *)s;

    while((c = *ptr++) != '\0')
 800c770:	e001      	b.n	800c776 <serial1WriteS+0xa>
        serial1PutC(c);
 800c772:	f7ff ffcf 	bl	800c714 <serial1PutC>
    while((c = *ptr++) != '\0')
 800c776:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d1f9      	bne.n	800c772 <serial1WriteS+0x6>
}
 800c77e:	bd10      	pop	{r4, pc}

0800c780 <serial1Write>:

// Writes a number of characters from a buffer to the serial output stream, blocks if buffer full
//
static void serial1Write (const char *s, uint16_t length)
{
 800c780:	b538      	push	{r3, r4, r5, lr}
 800c782:	4604      	mov	r4, r0
    char *ptr = (char *)s;

    while(length--)
 800c784:	e004      	b.n	800c790 <serial1Write+0x10>
        serial1PutC(*ptr++);
 800c786:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c78a:	f7ff ffc3 	bl	800c714 <serial1PutC>
    while(length--)
 800c78e:	4629      	mov	r1, r5
 800c790:	1e4b      	subs	r3, r1, #1
 800c792:	b29d      	uxth	r5, r3
 800c794:	2900      	cmp	r1, #0
 800c796:	d1f6      	bne.n	800c786 <serial1Write+0x6>
}
 800c798:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c79c <serial1TxFlush>:
//
// Flushes the serial output buffer
//
static void serial1TxFlush (void)
{
    UART1->CR1 &= ~USART_CR1_TXEIE;     // Disable TX interrupts
 800c79c:	4a04      	ldr	r2, [pc, #16]	@ (800c7b0 <serial1TxFlush+0x14>)
 800c79e:	68d3      	ldr	r3, [r2, #12]
 800c7a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c7a4:	60d3      	str	r3, [r2, #12]
    txbuf1.tail = txbuf1.head;
 800c7a6:	4b03      	ldr	r3, [pc, #12]	@ (800c7b4 <serial1TxFlush+0x18>)
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	605a      	str	r2, [r3, #4]
}
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	40004400 	.word	0x40004400
 800c7b4:	20000a70 	.word	0x20000a70

0800c7b8 <serial1TxCount>:
//
// Returns number of characters pending transmission
//
static uint16_t serial1TxCount (void)
{
    uint32_t tail = txbuf1.tail, head = txbuf1.head;
 800c7b8:	4b0c      	ldr	r3, [pc, #48]	@ (800c7ec <serial1TxCount+0x34>)
 800c7ba:	685a      	ldr	r2, [r3, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]

    return BUFCOUNT(head, tail, TX_BUFFER_SIZE) + (UART1->SR & USART_SR_TC ? 0 : 1);
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d80d      	bhi.n	800c7de <serial1TxCount+0x26>
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	b292      	uxth	r2, r2
 800c7c6:	1a9b      	subs	r3, r3, r2
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	4a09      	ldr	r2, [pc, #36]	@ (800c7f0 <serial1TxCount+0x38>)
 800c7cc:	6812      	ldr	r2, [r2, #0]
 800c7ce:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800c7d2:	bf0c      	ite	eq
 800c7d4:	2001      	moveq	r0, #1
 800c7d6:	2000      	movne	r0, #0
 800c7d8:	4418      	add	r0, r3
}
 800c7da:	b280      	uxth	r0, r0
 800c7dc:	4770      	bx	lr
    return BUFCOUNT(head, tail, TX_BUFFER_SIZE) + (UART1->SR & USART_SR_TC ? 0 : 1);
 800c7de:	1a9b      	subs	r3, r3, r2
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	e7ef      	b.n	800c7ca <serial1TxCount+0x12>
 800c7ea:	bf00      	nop
 800c7ec:	20000a70 	.word	0x20000a70
 800c7f0:	40004400 	.word	0x40004400

0800c7f4 <serial1GetC>:
//
// serialGetC - returns -1 if no data available
//
static int16_t serial1GetC (void)
{
    uint_fast16_t tail = rxbuf1.tail;       // Get buffer pointer
 800c7f4:	4a07      	ldr	r2, [pc, #28]	@ (800c814 <serial1GetC+0x20>)
 800c7f6:	6853      	ldr	r3, [r2, #4]

    if(tail == rxbuf1.head)
 800c7f8:	6812      	ldr	r2, [r2, #0]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d007      	beq.n	800c80e <serial1GetC+0x1a>
        return -1; // no data available

    char data = rxbuf1.data[tail];          // Get next character
 800c7fe:	4a05      	ldr	r2, [pc, #20]	@ (800c814 <serial1GetC+0x20>)
 800c800:	18d1      	adds	r1, r2, r3
    rxbuf1.tail = BUFNEXT(tail, rxbuf1);    // and update pointer
 800c802:	3301      	adds	r3, #1
 800c804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c808:	6053      	str	r3, [r2, #4]

    return (int16_t)data;
 800c80a:	7ac8      	ldrb	r0, [r1, #11]
 800c80c:	4770      	bx	lr
        return -1; // no data available
 800c80e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c812:	4770      	bx	lr
 800c814:	20000c78 	.word	0x20000c78

0800c818 <serial1Disable>:
    return true;
}

static bool serial1Disable (bool disable)
{
    if(disable)
 800c818:	b130      	cbz	r0, 800c828 <serial1Disable+0x10>
        UART1->CR1 &= ~USART_CR1_RXNEIE;
 800c81a:	4a06      	ldr	r2, [pc, #24]	@ (800c834 <serial1Disable+0x1c>)
 800c81c:	68d3      	ldr	r3, [r2, #12]
 800c81e:	f023 0320 	bic.w	r3, r3, #32
 800c822:	60d3      	str	r3, [r2, #12]
    else
        UART1->CR1 |= USART_CR1_RXNEIE;

    return true;
}
 800c824:	2001      	movs	r0, #1
 800c826:	4770      	bx	lr
        UART1->CR1 |= USART_CR1_RXNEIE;
 800c828:	4a02      	ldr	r2, [pc, #8]	@ (800c834 <serial1Disable+0x1c>)
 800c82a:	68d3      	ldr	r3, [r2, #12]
 800c82c:	f043 0320 	orr.w	r3, r3, #32
 800c830:	60d3      	str	r3, [r2, #12]
 800c832:	e7f7      	b.n	800c824 <serial1Disable+0xc>
 800c834:	40004400 	.word	0x40004400

0800c838 <serial1EnqueueRtCommand>:

static bool serial1EnqueueRtCommand (char c)
{
 800c838:	b508      	push	{r3, lr}
    return enqueue_realtime_command1(c);
 800c83a:	4b02      	ldr	r3, [pc, #8]	@ (800c844 <serial1EnqueueRtCommand+0xc>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4798      	blx	r3
}
 800c840:	bd08      	pop	{r3, pc}
 800c842:	bf00      	nop
 800c844:	2000019c 	.word	0x2000019c

0800c848 <serial1SetRtHandler>:

static enqueue_realtime_command_ptr serial1SetRtHandler (enqueue_realtime_command_ptr handler)
{
 800c848:	4603      	mov	r3, r0
    enqueue_realtime_command_ptr prev = enqueue_realtime_command1;
 800c84a:	4a03      	ldr	r2, [pc, #12]	@ (800c858 <serial1SetRtHandler+0x10>)
 800c84c:	6810      	ldr	r0, [r2, #0]

    if(handler)
 800c84e:	461a      	mov	r2, r3
 800c850:	b10b      	cbz	r3, 800c856 <serial1SetRtHandler+0xe>
        enqueue_realtime_command1 = handler;
 800c852:	4b01      	ldr	r3, [pc, #4]	@ (800c858 <serial1SetRtHandler+0x10>)
 800c854:	601a      	str	r2, [r3, #0]

    return prev;
}
 800c856:	4770      	bx	lr
 800c858:	2000019c 	.word	0x2000019c

0800c85c <serial1SetBaudRate>:
{
 800c85c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c860:	4607      	mov	r7, r0
    UART1->CR1 = USART_CR1_RE|USART_CR1_TE;
 800c862:	f8df a130 	ldr.w	sl, [pc, #304]	@ 800c994 <serial1SetBaudRate+0x138>
 800c866:	230c      	movs	r3, #12
 800c868:	f8ca 300c 	str.w	r3, [sl, #12]
    UART1->BRR = UART_BRR_SAMPLING16(UART1_CLK, baud_rate);
 800c86c:	f7fd f9d0 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 800c870:	2400      	movs	r4, #0
 800c872:	1803      	adds	r3, r0, r0
 800c874:	eb44 0104 	adc.w	r1, r4, r4
 800c878:	181b      	adds	r3, r3, r0
 800c87a:	f141 0100 	adc.w	r1, r1, #0
 800c87e:	00c9      	lsls	r1, r1, #3
 800c880:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800c884:	00db      	lsls	r3, r3, #3
 800c886:	1818      	adds	r0, r3, r0
 800c888:	ea4f 7997 	mov.w	r9, r7, lsr #30
 800c88c:	ea4f 0787 	mov.w	r7, r7, lsl #2
 800c890:	463a      	mov	r2, r7
 800c892:	464b      	mov	r3, r9
 800c894:	f141 0100 	adc.w	r1, r1, #0
 800c898:	f7fc f93e 	bl	8008b18 <__aeabi_uldivmod>
 800c89c:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 800c998 <serial1SetBaudRate+0x13c>
 800c8a0:	fba8 3500 	umull	r3, r5, r8, r0
 800c8a4:	096d      	lsrs	r5, r5, #5
 800c8a6:	012d      	lsls	r5, r5, #4
 800c8a8:	f7fd f9b2 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 800c8ac:	1803      	adds	r3, r0, r0
 800c8ae:	eb44 0104 	adc.w	r1, r4, r4
 800c8b2:	181b      	adds	r3, r3, r0
 800c8b4:	f141 0100 	adc.w	r1, r1, #0
 800c8b8:	00c9      	lsls	r1, r1, #3
 800c8ba:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800c8be:	00db      	lsls	r3, r3, #3
 800c8c0:	1818      	adds	r0, r3, r0
 800c8c2:	463a      	mov	r2, r7
 800c8c4:	464b      	mov	r3, r9
 800c8c6:	f141 0100 	adc.w	r1, r1, #0
 800c8ca:	f7fc f925 	bl	8008b18 <__aeabi_uldivmod>
 800c8ce:	4606      	mov	r6, r0
 800c8d0:	f7fd f99e 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 800c8d4:	1803      	adds	r3, r0, r0
 800c8d6:	eb44 0104 	adc.w	r1, r4, r4
 800c8da:	181b      	adds	r3, r3, r0
 800c8dc:	f141 0100 	adc.w	r1, r1, #0
 800c8e0:	00c9      	lsls	r1, r1, #3
 800c8e2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800c8e6:	00db      	lsls	r3, r3, #3
 800c8e8:	1818      	adds	r0, r3, r0
 800c8ea:	463a      	mov	r2, r7
 800c8ec:	464b      	mov	r3, r9
 800c8ee:	f141 0100 	adc.w	r1, r1, #0
 800c8f2:	f7fc f911 	bl	8008b18 <__aeabi_uldivmod>
 800c8f6:	fba8 3000 	umull	r3, r0, r8, r0
 800c8fa:	0940      	lsrs	r0, r0, #5
 800c8fc:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 800c900:	fb0b 6310 	mls	r3, fp, r0, r6
 800c904:	011b      	lsls	r3, r3, #4
 800c906:	3332      	adds	r3, #50	@ 0x32
 800c908:	fba8 2303 	umull	r2, r3, r8, r3
 800c90c:	095b      	lsrs	r3, r3, #5
 800c90e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c912:	441d      	add	r5, r3
 800c914:	f7fd f97c 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 800c918:	1803      	adds	r3, r0, r0
 800c91a:	eb44 0104 	adc.w	r1, r4, r4
 800c91e:	181b      	adds	r3, r3, r0
 800c920:	f141 0100 	adc.w	r1, r1, #0
 800c924:	00c9      	lsls	r1, r1, #3
 800c926:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800c92a:	00db      	lsls	r3, r3, #3
 800c92c:	1818      	adds	r0, r3, r0
 800c92e:	463a      	mov	r2, r7
 800c930:	464b      	mov	r3, r9
 800c932:	f141 0100 	adc.w	r1, r1, #0
 800c936:	f7fc f8ef 	bl	8008b18 <__aeabi_uldivmod>
 800c93a:	4606      	mov	r6, r0
 800c93c:	f7fd f968 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 800c940:	1803      	adds	r3, r0, r0
 800c942:	4164      	adcs	r4, r4
 800c944:	181b      	adds	r3, r3, r0
 800c946:	f144 0100 	adc.w	r1, r4, #0
 800c94a:	00c9      	lsls	r1, r1, #3
 800c94c:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800c950:	00db      	lsls	r3, r3, #3
 800c952:	1818      	adds	r0, r3, r0
 800c954:	463a      	mov	r2, r7
 800c956:	464b      	mov	r3, r9
 800c958:	f141 0100 	adc.w	r1, r1, #0
 800c95c:	f7fc f8dc 	bl	8008b18 <__aeabi_uldivmod>
 800c960:	fba8 3000 	umull	r3, r0, r8, r0
 800c964:	0940      	lsrs	r0, r0, #5
 800c966:	fb0b 6310 	mls	r3, fp, r0, r6
 800c96a:	011b      	lsls	r3, r3, #4
 800c96c:	3332      	adds	r3, #50	@ 0x32
 800c96e:	fba8 8303 	umull	r8, r3, r8, r3
 800c972:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800c976:	441d      	add	r5, r3
 800c978:	f8ca 5008 	str.w	r5, [sl, #8]
    UART1->CR1 |= (USART_CR1_UE|USART_CR1_RXNEIE);
 800c97c:	f8da 300c 	ldr.w	r3, [sl, #12]
 800c980:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c984:	f043 0320 	orr.w	r3, r3, #32
 800c988:	f8ca 300c 	str.w	r3, [sl, #12]
}
 800c98c:	2001      	movs	r0, #1
 800c98e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c992:	bf00      	nop
 800c994:	40004400 	.word	0x40004400
 800c998:	51eb851f 	.word	0x51eb851f

0800c99c <serial1Init>:

static const io_stream_t *serial1Init (uint32_t baud_rate)
{
 800c99c:	b570      	push	{r4, r5, r6, lr}
 800c99e:	b086      	sub	sp, #24
 800c9a0:	4605      	mov	r5, r0
        .disable_rx = serial1Disable,
        .set_baud_rate = serial1SetBaudRate,
        .set_enqueue_rt_handler = serial1SetRtHandler
    };

    if(!serialClaimPort(stream.instance))
 800c9a2:	2001      	movs	r0, #1
 800c9a4:	f7ff fd7a 	bl	800c49c <serialClaimPort>
 800c9a8:	b330      	cbz	r0, 800c9f8 <serial1Init+0x5c>
        return NULL;

    UART1_CLK_En();
 800c9aa:	2600      	movs	r6, #0
 800c9ac:	9600      	str	r6, [sp, #0]
 800c9ae:	4b13      	ldr	r3, [pc, #76]	@ (800c9fc <serial1Init+0x60>)
 800c9b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c9b2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c9b6:	641a      	str	r2, [r3, #64]	@ 0x40
 800c9b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	9b00      	ldr	r3, [sp, #0]

    GPIO_InitTypeDef GPIO_InitStructure = {
 800c9c2:	f10d 0c04 	add.w	ip, sp, #4
 800c9c6:	4c0e      	ldr	r4, [pc, #56]	@ (800ca00 <serial1Init+0x64>)
 800c9c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c9ce:	6823      	ldr	r3, [r4, #0]
 800c9d0:	f8cc 3000 	str.w	r3, [ip]
        .Pull      = GPIO_NOPULL,
        .Speed     = GPIO_SPEED_FREQ_VERY_HIGH,
        .Pin       = (1 << UART1_RX_PIN)|(1 << UART1_TX_PIN),
        .Alternate = UART1_AF
    };
    HAL_GPIO_Init(UART1_PORT, &GPIO_InitStructure);
 800c9d4:	a901      	add	r1, sp, #4
 800c9d6:	480b      	ldr	r0, [pc, #44]	@ (800ca04 <serial1Init+0x68>)
 800c9d8:	f7fc fd18 	bl	800940c <HAL_GPIO_Init>

    serial1SetBaudRate(baud_rate);
 800c9dc:	4628      	mov	r0, r5
 800c9de:	f7ff ff3d 	bl	800c85c <serial1SetBaudRate>

    HAL_NVIC_SetPriority(UART1_IRQ, 0, 0);
 800c9e2:	4632      	mov	r2, r6
 800c9e4:	4631      	mov	r1, r6
 800c9e6:	2026      	movs	r0, #38	@ 0x26
 800c9e8:	f7fc fb06 	bl	8008ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART1_IRQ);
 800c9ec:	2026      	movs	r0, #38	@ 0x26
 800c9ee:	f7fc fb13 	bl	8009018 <HAL_NVIC_EnableIRQ>


    return &stream;
 800c9f2:	4805      	ldr	r0, [pc, #20]	@ (800ca08 <serial1Init+0x6c>)
}
 800c9f4:	b006      	add	sp, #24
 800c9f6:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	e7fb      	b.n	800c9f4 <serial1Init+0x58>
 800c9fc:	40023800 	.word	0x40023800
 800ca00:	080291ac 	.word	0x080291ac
 800ca04:	40020000 	.word	0x40020000
 800ca08:	08029544 	.word	0x08029544

0800ca0c <serial1SuspendInput>:
{
 800ca0c:	b508      	push	{r3, lr}
 800ca0e:	4601      	mov	r1, r0
    return stream_rx_suspend(&rxbuf1, suspend);
 800ca10:	4801      	ldr	r0, [pc, #4]	@ (800ca18 <serial1SuspendInput+0xc>)
 800ca12:	f014 f83b 	bl	8020a8c <stream_rx_suspend>
}
 800ca16:	bd08      	pop	{r3, pc}
 800ca18:	20000c78 	.word	0x20000c78

0800ca1c <serialSuspendInput>:
{
 800ca1c:	b508      	push	{r3, lr}
 800ca1e:	4601      	mov	r1, r0
    return stream_rx_suspend(&rxbuf, suspend);
 800ca20:	4801      	ldr	r0, [pc, #4]	@ (800ca28 <serialSuspendInput+0xc>)
 800ca22:	f014 f833 	bl	8020a8c <stream_rx_suspend>
}
 800ca26:	bd08      	pop	{r3, pc}
 800ca28:	2000128c 	.word	0x2000128c

0800ca2c <serialSetBaudRate>:
{
 800ca2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca30:	4607      	mov	r7, r0
    UART0->CR1 = USART_CR1_RE|USART_CR1_TE;
 800ca32:	f8df a130 	ldr.w	sl, [pc, #304]	@ 800cb64 <serialSetBaudRate+0x138>
 800ca36:	230c      	movs	r3, #12
 800ca38:	f8ca 300c 	str.w	r3, [sl, #12]
    UART0->BRR = UART_BRR_SAMPLING16(UART0_CLK, baud_rate);
 800ca3c:	f7fd f8f8 	bl	8009c30 <HAL_RCC_GetPCLK2Freq>
 800ca40:	2400      	movs	r4, #0
 800ca42:	1803      	adds	r3, r0, r0
 800ca44:	eb44 0104 	adc.w	r1, r4, r4
 800ca48:	181b      	adds	r3, r3, r0
 800ca4a:	f141 0100 	adc.w	r1, r1, #0
 800ca4e:	00c9      	lsls	r1, r1, #3
 800ca50:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800ca54:	00db      	lsls	r3, r3, #3
 800ca56:	1818      	adds	r0, r3, r0
 800ca58:	ea4f 7997 	mov.w	r9, r7, lsr #30
 800ca5c:	ea4f 0787 	mov.w	r7, r7, lsl #2
 800ca60:	463a      	mov	r2, r7
 800ca62:	464b      	mov	r3, r9
 800ca64:	f141 0100 	adc.w	r1, r1, #0
 800ca68:	f7fc f856 	bl	8008b18 <__aeabi_uldivmod>
 800ca6c:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 800cb68 <serialSetBaudRate+0x13c>
 800ca70:	fba8 3500 	umull	r3, r5, r8, r0
 800ca74:	096d      	lsrs	r5, r5, #5
 800ca76:	012d      	lsls	r5, r5, #4
 800ca78:	f7fd f8da 	bl	8009c30 <HAL_RCC_GetPCLK2Freq>
 800ca7c:	1803      	adds	r3, r0, r0
 800ca7e:	eb44 0104 	adc.w	r1, r4, r4
 800ca82:	181b      	adds	r3, r3, r0
 800ca84:	f141 0100 	adc.w	r1, r1, #0
 800ca88:	00c9      	lsls	r1, r1, #3
 800ca8a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800ca8e:	00db      	lsls	r3, r3, #3
 800ca90:	1818      	adds	r0, r3, r0
 800ca92:	463a      	mov	r2, r7
 800ca94:	464b      	mov	r3, r9
 800ca96:	f141 0100 	adc.w	r1, r1, #0
 800ca9a:	f7fc f83d 	bl	8008b18 <__aeabi_uldivmod>
 800ca9e:	4606      	mov	r6, r0
 800caa0:	f7fd f8c6 	bl	8009c30 <HAL_RCC_GetPCLK2Freq>
 800caa4:	1803      	adds	r3, r0, r0
 800caa6:	eb44 0104 	adc.w	r1, r4, r4
 800caaa:	181b      	adds	r3, r3, r0
 800caac:	f141 0100 	adc.w	r1, r1, #0
 800cab0:	00c9      	lsls	r1, r1, #3
 800cab2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800cab6:	00db      	lsls	r3, r3, #3
 800cab8:	1818      	adds	r0, r3, r0
 800caba:	463a      	mov	r2, r7
 800cabc:	464b      	mov	r3, r9
 800cabe:	f141 0100 	adc.w	r1, r1, #0
 800cac2:	f7fc f829 	bl	8008b18 <__aeabi_uldivmod>
 800cac6:	fba8 3000 	umull	r3, r0, r8, r0
 800caca:	0940      	lsrs	r0, r0, #5
 800cacc:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 800cad0:	fb0b 6310 	mls	r3, fp, r0, r6
 800cad4:	011b      	lsls	r3, r3, #4
 800cad6:	3332      	adds	r3, #50	@ 0x32
 800cad8:	fba8 2303 	umull	r2, r3, r8, r3
 800cadc:	095b      	lsrs	r3, r3, #5
 800cade:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cae2:	441d      	add	r5, r3
 800cae4:	f7fd f8a4 	bl	8009c30 <HAL_RCC_GetPCLK2Freq>
 800cae8:	1803      	adds	r3, r0, r0
 800caea:	eb44 0104 	adc.w	r1, r4, r4
 800caee:	181b      	adds	r3, r3, r0
 800caf0:	f141 0100 	adc.w	r1, r1, #0
 800caf4:	00c9      	lsls	r1, r1, #3
 800caf6:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800cafa:	00db      	lsls	r3, r3, #3
 800cafc:	1818      	adds	r0, r3, r0
 800cafe:	463a      	mov	r2, r7
 800cb00:	464b      	mov	r3, r9
 800cb02:	f141 0100 	adc.w	r1, r1, #0
 800cb06:	f7fc f807 	bl	8008b18 <__aeabi_uldivmod>
 800cb0a:	4606      	mov	r6, r0
 800cb0c:	f7fd f890 	bl	8009c30 <HAL_RCC_GetPCLK2Freq>
 800cb10:	1803      	adds	r3, r0, r0
 800cb12:	4164      	adcs	r4, r4
 800cb14:	181b      	adds	r3, r3, r0
 800cb16:	f144 0100 	adc.w	r1, r4, #0
 800cb1a:	00c9      	lsls	r1, r1, #3
 800cb1c:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800cb20:	00db      	lsls	r3, r3, #3
 800cb22:	1818      	adds	r0, r3, r0
 800cb24:	463a      	mov	r2, r7
 800cb26:	464b      	mov	r3, r9
 800cb28:	f141 0100 	adc.w	r1, r1, #0
 800cb2c:	f7fb fff4 	bl	8008b18 <__aeabi_uldivmod>
 800cb30:	fba8 3000 	umull	r3, r0, r8, r0
 800cb34:	0940      	lsrs	r0, r0, #5
 800cb36:	fb0b 6310 	mls	r3, fp, r0, r6
 800cb3a:	011b      	lsls	r3, r3, #4
 800cb3c:	3332      	adds	r3, #50	@ 0x32
 800cb3e:	fba8 8303 	umull	r8, r3, r8, r3
 800cb42:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800cb46:	441d      	add	r5, r3
 800cb48:	f8ca 5008 	str.w	r5, [sl, #8]
    UART0->CR1 |= (USART_CR1_UE|USART_CR1_RXNEIE);
 800cb4c:	f8da 300c 	ldr.w	r3, [sl, #12]
 800cb50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800cb54:	f043 0320 	orr.w	r3, r3, #32
 800cb58:	f8ca 300c 	str.w	r3, [sl, #12]
}
 800cb5c:	2001      	movs	r0, #1
 800cb5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb62:	bf00      	nop
 800cb64:	40011000 	.word	0x40011000
 800cb68:	51eb851f 	.word	0x51eb851f

0800cb6c <serialInit>:
{
 800cb6c:	b570      	push	{r4, r5, r6, lr}
 800cb6e:	b086      	sub	sp, #24
 800cb70:	4605      	mov	r5, r0
    if(!serialClaimPort(stream.instance))
 800cb72:	2000      	movs	r0, #0
 800cb74:	f7ff fc92 	bl	800c49c <serialClaimPort>
 800cb78:	b330      	cbz	r0, 800cbc8 <serialInit+0x5c>
    UART0_CLK_En();
 800cb7a:	2600      	movs	r6, #0
 800cb7c:	9600      	str	r6, [sp, #0]
 800cb7e:	4b13      	ldr	r3, [pc, #76]	@ (800cbcc <serialInit+0x60>)
 800cb80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb82:	f042 0210 	orr.w	r2, r2, #16
 800cb86:	645a      	str	r2, [r3, #68]	@ 0x44
 800cb88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb8a:	f003 0310 	and.w	r3, r3, #16
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitTypeDef GPIO_InitStructure = {
 800cb92:	f10d 0c04 	add.w	ip, sp, #4
 800cb96:	4c0e      	ldr	r4, [pc, #56]	@ (800cbd0 <serialInit+0x64>)
 800cb98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb9e:	6823      	ldr	r3, [r4, #0]
 800cba0:	f8cc 3000 	str.w	r3, [ip]
    HAL_GPIO_Init(UART0_PORT, &GPIO_InitStructure);
 800cba4:	a901      	add	r1, sp, #4
 800cba6:	480b      	ldr	r0, [pc, #44]	@ (800cbd4 <serialInit+0x68>)
 800cba8:	f7fc fc30 	bl	800940c <HAL_GPIO_Init>
    serialSetBaudRate(baud_rate);
 800cbac:	4628      	mov	r0, r5
 800cbae:	f7ff ff3d 	bl	800ca2c <serialSetBaudRate>
    HAL_NVIC_SetPriority(UART0_IRQ, 0, 0);
 800cbb2:	4632      	mov	r2, r6
 800cbb4:	4631      	mov	r1, r6
 800cbb6:	2025      	movs	r0, #37	@ 0x25
 800cbb8:	f7fc fa1e 	bl	8008ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART0_IRQ);
 800cbbc:	2025      	movs	r0, #37	@ 0x25
 800cbbe:	f7fc fa2b 	bl	8009018 <HAL_NVIC_EnableIRQ>
    return &stream;
 800cbc2:	4805      	ldr	r0, [pc, #20]	@ (800cbd8 <serialInit+0x6c>)
}
 800cbc4:	b006      	add	sp, #24
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
 800cbc8:	2000      	movs	r0, #0
 800cbca:	e7fb      	b.n	800cbc4 <serialInit+0x58>
 800cbcc:	40023800 	.word	0x40023800
 800cbd0:	080291c0 	.word	0x080291c0
 800cbd4:	40020000 	.word	0x40020000
 800cbd8:	080294f8 	.word	0x080294f8

0800cbdc <serialRegisterStreams>:
{
 800cbdc:	b510      	push	{r4, lr}
    hal.periph_port.register_pin(&rx0);
 800cbde:	4c0a      	ldr	r4, [pc, #40]	@ (800cc08 <serialRegisterStreams+0x2c>)
 800cbe0:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
 800cbe4:	4809      	ldr	r0, [pc, #36]	@ (800cc0c <serialRegisterStreams+0x30>)
 800cbe6:	4798      	blx	r3
    hal.periph_port.register_pin(&tx0);
 800cbe8:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
 800cbec:	4808      	ldr	r0, [pc, #32]	@ (800cc10 <serialRegisterStreams+0x34>)
 800cbee:	4798      	blx	r3
    hal.periph_port.register_pin(&rx1);
 800cbf0:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
 800cbf4:	4807      	ldr	r0, [pc, #28]	@ (800cc14 <serialRegisterStreams+0x38>)
 800cbf6:	4798      	blx	r3
    hal.periph_port.register_pin(&tx1);
 800cbf8:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
 800cbfc:	4806      	ldr	r0, [pc, #24]	@ (800cc18 <serialRegisterStreams+0x3c>)
 800cbfe:	4798      	blx	r3
    stream_register_streams(&streams);
 800cc00:	4806      	ldr	r0, [pc, #24]	@ (800cc1c <serialRegisterStreams+0x40>)
 800cc02:	f013 ff09 	bl	8020a18 <stream_register_streams>
}
 800cc06:	bd10      	pop	{r4, pc}
 800cc08:	20001a90 	.word	0x20001a90
 800cc0c:	080295e8 	.word	0x080295e8
 800cc10:	080295d0 	.word	0x080295d0
 800cc14:	080295b8 	.word	0x080295b8
 800cc18:	080295a0 	.word	0x080295a0
 800cc1c:	20000180 	.word	0x20000180

0800cc20 <USART1_IRQHandler>:
{
 800cc20:	b510      	push	{r4, lr}
    if(UART0->SR & USART_SR_RXNE) {
 800cc22:	4b1d      	ldr	r3, [pc, #116]	@ (800cc98 <USART1_IRQHandler+0x78>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f013 0f20 	tst.w	r3, #32
 800cc2a:	d014      	beq.n	800cc56 <USART1_IRQHandler+0x36>
        uint32_t data = UART0->DR;
 800cc2c:	4b1a      	ldr	r3, [pc, #104]	@ (800cc98 <USART1_IRQHandler+0x78>)
 800cc2e:	685c      	ldr	r4, [r3, #4]
        if(!enqueue_realtime_command((char)data)) {             // Check and strip realtime commands...
 800cc30:	b2e4      	uxtb	r4, r4
 800cc32:	4b1a      	ldr	r3, [pc, #104]	@ (800cc9c <USART1_IRQHandler+0x7c>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4620      	mov	r0, r4
 800cc38:	4798      	blx	r3
 800cc3a:	b960      	cbnz	r0, 800cc56 <USART1_IRQHandler+0x36>
            uint16_t next_head = BUFNEXT(rxbuf.head, rxbuf);    // Get and increment buffer pointer
 800cc3c:	4a18      	ldr	r2, [pc, #96]	@ (800cca0 <USART1_IRQHandler+0x80>)
 800cc3e:	6813      	ldr	r3, [r2, #0]
 800cc40:	3301      	adds	r3, #1
 800cc42:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if(next_head == rxbuf.tail)                         // If buffer full
 800cc46:	6852      	ldr	r2, [r2, #4]
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d01c      	beq.n	800cc86 <USART1_IRQHandler+0x66>
                rxbuf.data[rxbuf.head] = (char)data;            // if not add data to buffer
 800cc4c:	4a14      	ldr	r2, [pc, #80]	@ (800cca0 <USART1_IRQHandler+0x80>)
 800cc4e:	6811      	ldr	r1, [r2, #0]
 800cc50:	4411      	add	r1, r2
 800cc52:	72cc      	strb	r4, [r1, #11]
                rxbuf.head = next_head;                         // and update pointer
 800cc54:	6013      	str	r3, [r2, #0]
    if((UART0->SR & USART_SR_TXE) && (UART0->CR1 & USART_CR1_TXEIE)) {
 800cc56:	4b10      	ldr	r3, [pc, #64]	@ (800cc98 <USART1_IRQHandler+0x78>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cc5e:	d011      	beq.n	800cc84 <USART1_IRQHandler+0x64>
 800cc60:	4b0d      	ldr	r3, [pc, #52]	@ (800cc98 <USART1_IRQHandler+0x78>)
 800cc62:	68db      	ldr	r3, [r3, #12]
 800cc64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cc68:	d00c      	beq.n	800cc84 <USART1_IRQHandler+0x64>
        uint_fast16_t tail = txbuf.tail;            // Get buffer pointer
 800cc6a:	4a0e      	ldr	r2, [pc, #56]	@ (800cca4 <USART1_IRQHandler+0x84>)
 800cc6c:	6853      	ldr	r3, [r2, #4]
        UART0->DR = txbuf.data[tail];               // Send next character
 800cc6e:	18d1      	adds	r1, r2, r3
 800cc70:	7a08      	ldrb	r0, [r1, #8]
 800cc72:	4909      	ldr	r1, [pc, #36]	@ (800cc98 <USART1_IRQHandler+0x78>)
 800cc74:	6048      	str	r0, [r1, #4]
        txbuf.tail = tail = BUFNEXT(tail, txbuf);   // and increment pointer
 800cc76:	3301      	adds	r3, #1
 800cc78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc7c:	6053      	str	r3, [r2, #4]
        if(tail == txbuf.head)                      // If buffer empty then
 800cc7e:	6812      	ldr	r2, [r2, #0]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d004      	beq.n	800cc8e <USART1_IRQHandler+0x6e>
}
 800cc84:	bd10      	pop	{r4, pc}
                rxbuf.overflow = 1;                             // flag overflow
 800cc86:	4b06      	ldr	r3, [pc, #24]	@ (800cca0 <USART1_IRQHandler+0x80>)
 800cc88:	2201      	movs	r2, #1
 800cc8a:	725a      	strb	r2, [r3, #9]
 800cc8c:	e7e3      	b.n	800cc56 <USART1_IRQHandler+0x36>
            UART0->CR1 &= ~USART_CR1_TXEIE;         // disable UART TX interrupt
 800cc8e:	68cb      	ldr	r3, [r1, #12]
 800cc90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc94:	60cb      	str	r3, [r1, #12]
}
 800cc96:	e7f5      	b.n	800cc84 <USART1_IRQHandler+0x64>
 800cc98:	40011000 	.word	0x40011000
 800cc9c:	200001a0 	.word	0x200001a0
 800cca0:	2000128c 	.word	0x2000128c
 800cca4:	20001084 	.word	0x20001084

0800cca8 <USART2_IRQHandler>:

void UART1_IRQHandler (void)
{
 800cca8:	b510      	push	{r4, lr}
    if(UART1->SR & USART_SR_RXNE) {
 800ccaa:	4b1d      	ldr	r3, [pc, #116]	@ (800cd20 <USART2_IRQHandler+0x78>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f013 0f20 	tst.w	r3, #32
 800ccb2:	d014      	beq.n	800ccde <USART2_IRQHandler+0x36>
        uint32_t data = UART1->DR;
 800ccb4:	4b1a      	ldr	r3, [pc, #104]	@ (800cd20 <USART2_IRQHandler+0x78>)
 800ccb6:	685c      	ldr	r4, [r3, #4]
        if(!enqueue_realtime_command1((char)data)) {            // Check and strip realtime commands...
 800ccb8:	b2e4      	uxtb	r4, r4
 800ccba:	4b1a      	ldr	r3, [pc, #104]	@ (800cd24 <USART2_IRQHandler+0x7c>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	4798      	blx	r3
 800ccc2:	b960      	cbnz	r0, 800ccde <USART2_IRQHandler+0x36>
            uint16_t next_head = BUFNEXT(rxbuf1.head, rxbuf1);  // Get and increment buffer pointer
 800ccc4:	4a18      	ldr	r2, [pc, #96]	@ (800cd28 <USART2_IRQHandler+0x80>)
 800ccc6:	6813      	ldr	r3, [r2, #0]
 800ccc8:	3301      	adds	r3, #1
 800ccca:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if(next_head == rxbuf1.tail)                        // If buffer full
 800ccce:	6852      	ldr	r2, [r2, #4]
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d01c      	beq.n	800cd0e <USART2_IRQHandler+0x66>
                rxbuf1.overflow = 1;                            // flag overflow
            else {
                rxbuf1.data[rxbuf1.head] = (char)data;          // if not add data to buffer
 800ccd4:	4a14      	ldr	r2, [pc, #80]	@ (800cd28 <USART2_IRQHandler+0x80>)
 800ccd6:	6811      	ldr	r1, [r2, #0]
 800ccd8:	4411      	add	r1, r2
 800ccda:	72cc      	strb	r4, [r1, #11]
                rxbuf1.head = next_head;                        // and update pointer
 800ccdc:	6013      	str	r3, [r2, #0]
            }
        }
    }

    if((UART1->SR & USART_SR_TXE) && (UART1->CR1 & USART_CR1_TXEIE)) {
 800ccde:	4b10      	ldr	r3, [pc, #64]	@ (800cd20 <USART2_IRQHandler+0x78>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cce6:	d011      	beq.n	800cd0c <USART2_IRQHandler+0x64>
 800cce8:	4b0d      	ldr	r3, [pc, #52]	@ (800cd20 <USART2_IRQHandler+0x78>)
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ccf0:	d00c      	beq.n	800cd0c <USART2_IRQHandler+0x64>
        uint_fast16_t tail = txbuf1.tail;           // Get buffer pointer
 800ccf2:	4a0e      	ldr	r2, [pc, #56]	@ (800cd2c <USART2_IRQHandler+0x84>)
 800ccf4:	6853      	ldr	r3, [r2, #4]
        UART1->DR = txbuf1.data[tail];              // Send next character
 800ccf6:	18d1      	adds	r1, r2, r3
 800ccf8:	7a08      	ldrb	r0, [r1, #8]
 800ccfa:	4909      	ldr	r1, [pc, #36]	@ (800cd20 <USART2_IRQHandler+0x78>)
 800ccfc:	6048      	str	r0, [r1, #4]
        txbuf1.tail = tail = BUFNEXT(tail, txbuf1); // and increment pointer
 800ccfe:	3301      	adds	r3, #1
 800cd00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd04:	6053      	str	r3, [r2, #4]
        if(tail == txbuf1.head)                     // If buffer empty then
 800cd06:	6812      	ldr	r2, [r2, #0]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d004      	beq.n	800cd16 <USART2_IRQHandler+0x6e>
            UART1->CR1 &= ~USART_CR1_TXEIE;         // disable UART TX interrupt
   }
}
 800cd0c:	bd10      	pop	{r4, pc}
                rxbuf1.overflow = 1;                            // flag overflow
 800cd0e:	4b06      	ldr	r3, [pc, #24]	@ (800cd28 <USART2_IRQHandler+0x80>)
 800cd10:	2201      	movs	r2, #1
 800cd12:	725a      	strb	r2, [r3, #9]
 800cd14:	e7e3      	b.n	800ccde <USART2_IRQHandler+0x36>
            UART1->CR1 &= ~USART_CR1_TXEIE;         // disable UART TX interrupt
 800cd16:	68cb      	ldr	r3, [r1, #12]
 800cd18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd1c:	60cb      	str	r3, [r1, #12]
}
 800cd1e:	e7f5      	b.n	800cd0c <USART2_IRQHandler+0x64>
 800cd20:	40004400 	.word	0x40004400
 800cd24:	2000019c 	.word	0x2000019c
 800cd28:	20000c78 	.word	0x20000c78
 800cd2c:	20000a70 	.word	0x20000a70

0800cd30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cd30:	b500      	push	{lr}
 800cd32:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cd34:	2100      	movs	r1, #0
 800cd36:	9100      	str	r1, [sp, #0]
 800cd38:	4b0c      	ldr	r3, [pc, #48]	@ (800cd6c <HAL_MspInit+0x3c>)
 800cd3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cd40:	645a      	str	r2, [r3, #68]	@ 0x44
 800cd42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd44:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800cd48:	9200      	str	r2, [sp, #0]
 800cd4a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800cd4c:	9101      	str	r1, [sp, #4]
 800cd4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cd50:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800cd54:	641a      	str	r2, [r3, #64]	@ 0x40
 800cd56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd5c:	9301      	str	r3, [sp, #4]
 800cd5e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800cd60:	2005      	movs	r0, #5
 800cd62:	f7fc f937 	bl	8008fd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cd66:	b003      	add	sp, #12
 800cd68:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd6c:	40023800 	.word	0x40023800

0800cd70 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800cd70:	4770      	bx	lr

0800cd72 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cd72:	e7fe      	b.n	800cd72 <HardFault_Handler>

0800cd74 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cd74:	e7fe      	b.n	800cd74 <MemManage_Handler>

0800cd76 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800cd76:	e7fe      	b.n	800cd76 <BusFault_Handler>

0800cd78 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800cd78:	e7fe      	b.n	800cd78 <UsageFault_Handler>

0800cd7a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800cd7a:	4770      	bx	lr

0800cd7c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cd7c:	4770      	bx	lr

0800cd7e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800cd7e:	4770      	bx	lr

0800cd80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800cd80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  cycle_count = DWT->CYCCNT;
 800cd82:	4b04      	ldr	r3, [pc, #16]	@ (800cd94 <SysTick_Handler+0x14>)
 800cd84:	685a      	ldr	r2, [r3, #4]
 800cd86:	4b04      	ldr	r3, [pc, #16]	@ (800cd98 <SysTick_Handler+0x18>)
 800cd88:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cd8a:	f7fc f8cb 	bl	8008f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Driver_IncTick();
 800cd8e:	f7fe fc91 	bl	800b6b4 <Driver_IncTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 800cd92:	bd08      	pop	{r3, pc}
 800cd94:	e0001000 	.word	0xe0001000
 800cd98:	20001698 	.word	0x20001698

0800cd9c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800cd9c:	2001      	movs	r0, #1
 800cd9e:	4770      	bx	lr

0800cda0 <_kill>:

int _kill(int pid, int sig)
{
 800cda0:	b508      	push	{r3, lr}
	errno = EINVAL;
 800cda2:	f018 f8ef 	bl	8024f84 <__errno>
 800cda6:	2316      	movs	r3, #22
 800cda8:	6003      	str	r3, [r0, #0]
	return -1;
}
 800cdaa:	f04f 30ff 	mov.w	r0, #4294967295
 800cdae:	bd08      	pop	{r3, pc}

0800cdb0 <_exit>:

void _exit (int status)
{
 800cdb0:	b508      	push	{r3, lr}
	_kill(status, -1);
 800cdb2:	f04f 31ff 	mov.w	r1, #4294967295
 800cdb6:	f7ff fff3 	bl	800cda0 <_kill>
	while (1) {}		/* Make sure we hang here */
 800cdba:	e7fe      	b.n	800cdba <_exit+0xa>

0800cdbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cdbc:	b570      	push	{r4, r5, r6, lr}
 800cdbe:	460c      	mov	r4, r1
 800cdc0:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cdc2:	2500      	movs	r5, #0
 800cdc4:	e006      	b.n	800cdd4 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800cdc6:	f3af 8000 	nop.w
 800cdca:	4621      	mov	r1, r4
 800cdcc:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cdd0:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800cdd2:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cdd4:	42b5      	cmp	r5, r6
 800cdd6:	dbf6      	blt.n	800cdc6 <_read+0xa>
	}

return len;
}
 800cdd8:	4630      	mov	r0, r6
 800cdda:	bd70      	pop	{r4, r5, r6, pc}

0800cddc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800cddc:	b570      	push	{r4, r5, r6, lr}
 800cdde:	460c      	mov	r4, r1
 800cde0:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cde2:	2500      	movs	r5, #0
 800cde4:	e004      	b.n	800cdf0 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800cde6:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cdea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cdee:	3501      	adds	r5, #1
 800cdf0:	42b5      	cmp	r5, r6
 800cdf2:	dbf8      	blt.n	800cde6 <_write+0xa>
	}
	return len;
}
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	bd70      	pop	{r4, r5, r6, pc}

0800cdf8 <_close>:

int _close(int file)
{
	return -1;
}
 800cdf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdfc:	4770      	bx	lr

0800cdfe <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800cdfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ce02:	604b      	str	r3, [r1, #4]
	return 0;
}
 800ce04:	2000      	movs	r0, #0
 800ce06:	4770      	bx	lr

0800ce08 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800ce08:	2001      	movs	r0, #1
 800ce0a:	4770      	bx	lr

0800ce0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800ce0c:	2000      	movs	r0, #0
 800ce0e:	4770      	bx	lr

0800ce10 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void *_sbrk(int incr)
{
 800ce10:	b508      	push	{r3, lr}
 800ce12:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ce14:	4a0b      	ldr	r2, [pc, #44]	@ (800ce44 <_sbrk+0x34>)
 800ce16:	6812      	ldr	r2, [r2, #0]
 800ce18:	b142      	cbz	r2, 800ce2c <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800ce1a:	4a0a      	ldr	r2, [pc, #40]	@ (800ce44 <_sbrk+0x34>)
 800ce1c:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800ce1e:	4403      	add	r3, r0
 800ce20:	466a      	mov	r2, sp
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d806      	bhi.n	800ce34 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (void *)-1;
	}

	heap_end += incr;
 800ce26:	4a07      	ldr	r2, [pc, #28]	@ (800ce44 <_sbrk+0x34>)
 800ce28:	6013      	str	r3, [r2, #0]

	return (void *)prev_heap_end;
}
 800ce2a:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800ce2c:	4a05      	ldr	r2, [pc, #20]	@ (800ce44 <_sbrk+0x34>)
 800ce2e:	4906      	ldr	r1, [pc, #24]	@ (800ce48 <_sbrk+0x38>)
 800ce30:	6011      	str	r1, [r2, #0]
 800ce32:	e7f2      	b.n	800ce1a <_sbrk+0xa>
		errno = ENOMEM;
 800ce34:	f018 f8a6 	bl	8024f84 <__errno>
 800ce38:	230c      	movs	r3, #12
 800ce3a:	6003      	str	r3, [r0, #0]
		return (void *)-1;
 800ce3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce40:	e7f3      	b.n	800ce2a <_sbrk+0x1a>
 800ce42:	bf00      	nop
 800ce44:	2000169c 	.word	0x2000169c
 800ce48:	20003240 	.word	0x20003240

0800ce4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ce4c:	b508      	push	{r3, lr}
    extern uint8_t _estack; /* Symbol defined in the linker script */

    uint32_t *addr;

    addr = (uint32_t *)(((uint32_t)&_estack - 1) & 0xFFFFFFE0);
 800ce4e:	4b20      	ldr	r3, [pc, #128]	@ (800ced0 <SystemInit+0x84>)
 800ce50:	f023 031f 	bic.w	r3, r3, #31

    if(*addr == 0xDEADBEEF) {
 800ce54:	6819      	ldr	r1, [r3, #0]
 800ce56:	4a1f      	ldr	r2, [pc, #124]	@ (800ced4 <SystemInit+0x88>)
 800ce58:	4291      	cmp	r1, r2
 800ce5a:	d00a      	beq.n	800ce72 <SystemInit+0x26>
        while(1) {};
    }

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ce5c:	4b1e      	ldr	r3, [pc, #120]	@ (800ced8 <SystemInit+0x8c>)
 800ce5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ce62:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800ce66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ce6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800ce6e:	609a      	str	r2, [r3, #8]
#endif
}
 800ce70:	bd08      	pop	{r3, pc}
        *addr = 0xCAFEFEED; // Reset our trigger
 800ce72:	4a1a      	ldr	r2, [pc, #104]	@ (800cedc <SystemInit+0x90>)
 800ce74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce76:	b672      	cpsid	i
        HAL_RCC_DeInit();
 800ce78:	f7fc ff08 	bl	8009c8c <HAL_RCC_DeInit>
        HAL_DeInit();
 800ce7c:	f7fb fffc 	bl	8008e78 <HAL_DeInit>
        for(i = 0; i < 5; i++) {
 800ce80:	2300      	movs	r3, #0
 800ce82:	e00b      	b.n	800ce9c <SystemInit+0x50>
            NVIC->ICER[i] = 0xFFFFFFFF;
 800ce84:	4a16      	ldr	r2, [pc, #88]	@ (800cee0 <SystemInit+0x94>)
 800ce86:	f103 0020 	add.w	r0, r3, #32
 800ce8a:	f04f 31ff 	mov.w	r1, #4294967295
 800ce8e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
            NVIC->ICPR[i] = 0xFFFFFFFF;
 800ce92:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 800ce96:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
        for(i = 0; i < 5; i++) {
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	2b04      	cmp	r3, #4
 800ce9e:	d9f1      	bls.n	800ce84 <SystemInit+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
 800cea0:	b662      	cpsie	i
        SysTick->CTRL = SysTick->LOAD = SysTick->VAL = 0;
 800cea2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cea6:	2200      	movs	r2, #0
 800cea8:	619a      	str	r2, [r3, #24]
 800ceaa:	615a      	str	r2, [r3, #20]
 800ceac:	611a      	str	r2, [r3, #16]
        __HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 800ceae:	4b0d      	ldr	r3, [pc, #52]	@ (800cee4 <SystemInit+0x98>)
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	f022 0203 	bic.w	r2, r2, #3
 800ceb6:	601a      	str	r2, [r3, #0]
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	f042 0201 	orr.w	r2, r2, #1
 800cebe:	601a      	str	r2, [r3, #0]
        __set_MSP(*(uint32_t *)0x1FFF0000);
 800cec0:	4b09      	ldr	r3, [pc, #36]	@ (800cee8 <SystemInit+0x9c>)
 800cec2:	681a      	ldr	r2, [r3, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800cec4:	f382 8808 	msr	MSP, r2
        SysMemBootJump = (void(*)(void))(*((uint32_t *)0x1FFF0004));
 800cec8:	685b      	ldr	r3, [r3, #4]
        SysMemBootJump();
 800ceca:	4798      	blx	r3
        while(1) {};
 800cecc:	e7fe      	b.n	800cecc <SystemInit+0x80>
 800cece:	bf00      	nop
 800ced0:	2000ffff 	.word	0x2000ffff
 800ced4:	deadbeef 	.word	0xdeadbeef
 800ced8:	e000ed00 	.word	0xe000ed00
 800cedc:	cafefeed 	.word	0xcafefeed
 800cee0:	e000e100 	.word	0xe000e100
 800cee4:	40013800 	.word	0x40013800
 800cee8:	1fff0000 	.word	0x1fff0000

0800ceec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ceec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800cf24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800cef0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800cef2:	e003      	b.n	800cefc <LoopCopyDataInit>

0800cef4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800cef4:	4b0c      	ldr	r3, [pc, #48]	@ (800cf28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800cef6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800cef8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800cefa:	3104      	adds	r1, #4

0800cefc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800cefc:	480b      	ldr	r0, [pc, #44]	@ (800cf2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800cefe:	4b0c      	ldr	r3, [pc, #48]	@ (800cf30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800cf00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800cf02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800cf04:	d3f6      	bcc.n	800cef4 <CopyDataInit>
  ldr  r2, =_sbss
 800cf06:	4a0b      	ldr	r2, [pc, #44]	@ (800cf34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800cf08:	e002      	b.n	800cf10 <LoopFillZerobss>

0800cf0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800cf0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800cf0c:	f842 3b04 	str.w	r3, [r2], #4

0800cf10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800cf10:	4b09      	ldr	r3, [pc, #36]	@ (800cf38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800cf12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800cf14:	d3f9      	bcc.n	800cf0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800cf16:	f7ff ff99 	bl	800ce4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800cf1a:	f018 f839 	bl	8024f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800cf1e:	f7ff f9bd 	bl	800c29c <main>
  bx  lr    
 800cf22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800cf24:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800cf28:	08031f20 	.word	0x08031f20
  ldr  r0, =_sdata
 800cf2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800cf30:	2000067c 	.word	0x2000067c
  ldr  r2, =_sbss
 800cf34:	2000067c 	.word	0x2000067c
  ldr  r3, = _ebss
 800cf38:	20003240 	.word	0x20003240

0800cf3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800cf3c:	e7fe      	b.n	800cf3c <ADC_IRQHandler>
	...

0800cf40 <alarms_get_details>:
}

alarm_details_t *alarms_get_details (void)
{
    return &details;
}
 800cf40:	4800      	ldr	r0, [pc, #0]	@ (800cf44 <alarms_get_details+0x4>)
 800cf42:	4770      	bx	lr
 800cf44:	200001a8 	.word	0x200001a8

0800cf48 <canbus_enabled>:
// Public API

bool canbus_enabled (void)
{
    return isEnabled;
}
 800cf48:	4b01      	ldr	r3, [pc, #4]	@ (800cf50 <canbus_enabled+0x8>)
 800cf4a:	7818      	ldrb	r0, [r3, #0]
 800cf4c:	4770      	bx	lr
 800cf4e:	bf00      	nop
 800cf50:	200016a0 	.word	0x200016a0

0800cf54 <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant,
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state (coolant_state_t mode)
{
 800cf54:	b508      	push	{r3, lr}
    if (!ABORTED) { // Block during abort.
 800cf56:	4b06      	ldr	r3, [pc, #24]	@ (800cf70 <coolant_set_state+0x1c>)
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	b943      	cbnz	r3, 800cf6e <coolant_set_state+0x1a>
 800cf5c:	4b04      	ldr	r3, [pc, #16]	@ (800cf70 <coolant_set_state+0x1c>)
 800cf5e:	785b      	ldrb	r3, [r3, #1]
 800cf60:	b92b      	cbnz	r3, 800cf6e <coolant_set_state+0x1a>
        hal.coolant.set_state(mode);
 800cf62:	4b04      	ldr	r3, [pc, #16]	@ (800cf74 <coolant_set_state+0x20>)
 800cf64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf66:	4798      	blx	r3
        system_add_rt_report(Report_Coolant); // Set to report change immediately
 800cf68:	2020      	movs	r0, #32
 800cf6a:	f014 ffab 	bl	8021ec4 <system_add_rt_report>
    }
}
 800cf6e:	bd08      	pop	{r3, pc}
 800cf70:	20001d70 	.word	0x20001d70
 800cf74:	20001a90 	.word	0x20001a90

0800cf78 <coolant_sync>:

// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails
// if an abort or check-mode is active.
bool coolant_sync (coolant_state_t mode)
{
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4604      	mov	r4, r0
    bool ok = true;
    if (state_get() != STATE_CHECK_MODE) {
 800cf7c:	f011 ffe4 	bl	801ef48 <state_get>
 800cf80:	2802      	cmp	r0, #2
 800cf82:	d102      	bne.n	800cf8a <coolant_sync+0x12>
    bool ok = true;
 800cf84:	2501      	movs	r5, #1
        if((ok = protocol_buffer_synchronize())) // Ensure coolant changes state when specified in program.
            coolant_set_state(mode);
    }

    return ok;
}
 800cf86:	4628      	mov	r0, r5
 800cf88:	bd38      	pop	{r3, r4, r5, pc}
        if((ok = protocol_buffer_synchronize())) // Ensure coolant changes state when specified in program.
 800cf8a:	f00a ff43 	bl	8017e14 <protocol_buffer_synchronize>
 800cf8e:	4605      	mov	r5, r0
 800cf90:	2800      	cmp	r0, #0
 800cf92:	d0f8      	beq.n	800cf86 <coolant_sync+0xe>
            coolant_set_state(mode);
 800cf94:	4620      	mov	r0, r4
 800cf96:	f7ff ffdd 	bl	800cf54 <coolant_set_state>
 800cf9a:	e7f4      	b.n	800cf86 <coolant_sync+0xe>

0800cf9c <xbar_fn_to_axismask>:
#include "hal.h"

static limit_signals_t home_source = {0};

axes_signals_t xbar_fn_to_axismask (pin_function_t fn)
{
 800cf9c:	4603      	mov	r3, r0
    axes_signals_t mask = {0};
 800cf9e:	f04f 0000 	mov.w	r0, #0

    switch(fn) {
 800cfa2:	2b18      	cmp	r3, #24
 800cfa4:	d809      	bhi.n	800cfba <xbar_fn_to_axismask+0x1e>
 800cfa6:	2b15      	cmp	r3, #21
 800cfa8:	d20f      	bcs.n	800cfca <xbar_fn_to_axismask+0x2e>
 800cfaa:	3b10      	subs	r3, #16
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	2b03      	cmp	r3, #3
 800cfb0:	d802      	bhi.n	800cfb8 <xbar_fn_to_axismask+0x1c>

        case Input_LimitX:
        case Input_LimitX_Max:
        case Input_LimitX_2:
        case Input_HomeX:
            mask.x = On;
 800cfb2:	f04f 0001 	mov.w	r0, #1
            break;
 800cfb6:	4770      	bx	lr
 800cfb8:	4770      	bx	lr
    switch(fn) {
 800cfba:	3b1a      	subs	r3, #26
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	2b03      	cmp	r3, #3
 800cfc0:	d802      	bhi.n	800cfc8 <xbar_fn_to_axismask+0x2c>

        case Input_LimitZ:
        case Input_LimitZ_Max:
        case Input_LimitZ_2:
        case Input_HomeZ:
            mask.z = On;
 800cfc2:	f04f 0004 	mov.w	r0, #4
        default:
            break;
    }

    return mask;
}
 800cfc6:	4770      	bx	lr
 800cfc8:	4770      	bx	lr
            mask.y = On;
 800cfca:	f04f 0002 	mov.w	r0, #2
            break;
 800cfce:	4770      	bx	lr

0800cfd0 <xbar_set_homing_source>:

// Sets limit signals used by homing when home signals are not available.
// For internal use, called by settings.c when homing direction mask is changed.
void xbar_set_homing_source (void)
{
    if(hal.home_cap.a.mask == 0) {
 800cfd0:	4b0f      	ldr	r3, [pc, #60]	@ (800d010 <xbar_set_homing_source+0x40>)
 800cfd2:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 800cfd6:	b9d3      	cbnz	r3, 800d00e <xbar_set_homing_source+0x3e>
        home_source.max.mask = hal.limits_cap.max.mask & ((~settings.homing.dir_mask.mask) & AXES_BITMASK);
 800cfd8:	480d      	ldr	r0, [pc, #52]	@ (800d010 <xbar_set_homing_source+0x40>)
 800cfda:	f890 31df 	ldrb.w	r3, [r0, #479]	@ 0x1df
 800cfde:	4a0d      	ldr	r2, [pc, #52]	@ (800d014 <xbar_set_homing_source+0x44>)
 800cfe0:	f892 1110 	ldrb.w	r1, [r2, #272]	@ 0x110
 800cfe4:	ea23 0301 	bic.w	r3, r3, r1
 800cfe8:	f003 0307 	and.w	r3, r3, #7
 800cfec:	4a0a      	ldr	r2, [pc, #40]	@ (800d018 <xbar_set_homing_source+0x48>)
 800cfee:	7053      	strb	r3, [r2, #1]
        home_source.min.mask = (~home_source.max.mask) & AXES_BITMASK;
 800cff0:	43db      	mvns	r3, r3
 800cff2:	f003 0307 	and.w	r3, r3, #7
 800cff6:	7013      	strb	r3, [r2, #0]
        home_source.max2.mask = hal.limits_cap.max2.mask & ((~settings.homing.dir_mask.mask) & AXES_BITMASK);
 800cff8:	f890 31e1 	ldrb.w	r3, [r0, #481]	@ 0x1e1
 800cffc:	ea23 0301 	bic.w	r3, r3, r1
 800d000:	f003 0307 	and.w	r3, r3, #7
 800d004:	70d3      	strb	r3, [r2, #3]
        home_source.min2.mask = (~home_source.max2.mask) & AXES_BITMASK;
 800d006:	43db      	mvns	r3, r3
 800d008:	f003 0307 	and.w	r3, r3, #7
 800d00c:	7093      	strb	r3, [r2, #2]
    }
}
 800d00e:	4770      	bx	lr
 800d010:	20001a90 	.word	0x20001a90
 800d014:	200024a8 	.word	0x200024a8
 800d018:	200016a4 	.word	0x200016a4

0800d01c <xbar_get_homing_source>:

// Returns limit signals used by homing when home signals are not available.
limit_signals_t xbar_get_homing_source (void)
{
 800d01c:	b082      	sub	sp, #8
    return home_source;
 800d01e:	4b0b      	ldr	r3, [pc, #44]	@ (800d04c <xbar_get_homing_source+0x30>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	9301      	str	r3, [sp, #4]
 800d024:	2000      	movs	r0, #0
 800d026:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d02a:	f363 0007 	bfi	r0, r3, #0, #8
 800d02e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d032:	f363 200f 	bfi	r0, r3, #8, #8
 800d036:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d03a:	f363 4017 	bfi	r0, r3, #16, #8
 800d03e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d042:	f363 601f 	bfi	r0, r3, #24, #8
}
 800d046:	b002      	add	sp, #8
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	200016a4 	.word	0x200016a4

0800d050 <xbar_get_homing_source_from_cycle>:

// Returns limit signals used by homing cycle when home signals are not available.
limit_signals_t xbar_get_homing_source_from_cycle (axes_signals_t homing_cycle)
{
 800d050:	b082      	sub	sp, #8
    limit_signals_t source = home_source;
 800d052:	4b1e      	ldr	r3, [pc, #120]	@ (800d0cc <xbar_get_homing_source_from_cycle+0x7c>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	9300      	str	r3, [sp, #0]

    if(hal.home_cap.a.mask == 0) {
 800d058:	4b1d      	ldr	r3, [pc, #116]	@ (800d0d0 <xbar_get_homing_source_from_cycle+0x80>)
 800d05a:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 800d05e:	b9fb      	cbnz	r3, 800d0a0 <xbar_get_homing_source_from_cycle+0x50>
        source.min.mask &= homing_cycle.mask;
 800d060:	f89d 3000 	ldrb.w	r3, [sp]
 800d064:	b2c2      	uxtb	r2, r0
 800d066:	ea03 0100 	and.w	r1, r3, r0
 800d06a:	f88d 1000 	strb.w	r1, [sp]
        source.min2.mask &= homing_cycle.mask;
 800d06e:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800d072:	ea01 0c00 	and.w	ip, r1, r0
 800d076:	f88d c002 	strb.w	ip, [sp, #2]
        source.min.mask |= source.min2.mask;
 800d07a:	430b      	orrs	r3, r1
 800d07c:	4003      	ands	r3, r0
 800d07e:	f88d 3000 	strb.w	r3, [sp]
        source.max.mask &= homing_cycle.mask;
 800d082:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d086:	ea03 0100 	and.w	r1, r3, r0
 800d08a:	f88d 1001 	strb.w	r1, [sp, #1]
        source.max2.mask &= homing_cycle.mask;
 800d08e:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800d092:	4008      	ands	r0, r1
 800d094:	f88d 0003 	strb.w	r0, [sp, #3]
        source.max.mask |= source.max2.mask;
 800d098:	430b      	orrs	r3, r1
 800d09a:	4013      	ands	r3, r2
 800d09c:	f88d 3001 	strb.w	r3, [sp, #1]
    }

    return source;
 800d0a0:	9b00      	ldr	r3, [sp, #0]
 800d0a2:	9301      	str	r3, [sp, #4]
 800d0a4:	2000      	movs	r0, #0
 800d0a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d0aa:	f363 0007 	bfi	r0, r3, #0, #8
 800d0ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d0b2:	f363 200f 	bfi	r0, r3, #8, #8
 800d0b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d0ba:	f363 4017 	bfi	r0, r3, #16, #8
 800d0be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d0c2:	f363 601f 	bfi	r0, r3, #24, #8
}
 800d0c6:	b002      	add	sp, #8
 800d0c8:	4770      	bx	lr
 800d0ca:	bf00      	nop
 800d0cc:	200016a4 	.word	0x200016a4
 800d0d0:	20001a90 	.word	0x20001a90

0800d0d4 <xbar_fn_to_pinname>:

const char *xbar_fn_to_pinname (pin_function_t fn)
{
 800d0d4:	4601      	mov	r1, r0
    const char *name = NULL;
    uint_fast8_t idx = sizeof(pin_names) / sizeof(pin_name_t);
 800d0d6:	238d      	movs	r3, #141	@ 0x8d
    const char *name = NULL;
 800d0d8:	2000      	movs	r0, #0
 800d0da:	e001      	b.n	800d0e0 <xbar_fn_to_pinname+0xc>

    do {
        if(pin_names[--idx].function == fn)
            name = pin_names[idx].name;
    } while(idx && !name);
 800d0dc:	b15b      	cbz	r3, 800d0f6 <xbar_fn_to_pinname+0x22>
 800d0de:	b950      	cbnz	r0, 800d0f6 <xbar_fn_to_pinname+0x22>
        if(pin_names[--idx].function == fn)
 800d0e0:	3b01      	subs	r3, #1
 800d0e2:	4a07      	ldr	r2, [pc, #28]	@ (800d100 <xbar_fn_to_pinname+0x2c>)
 800d0e4:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800d0e8:	428a      	cmp	r2, r1
 800d0ea:	d1f7      	bne.n	800d0dc <xbar_fn_to_pinname+0x8>
            name = pin_names[idx].name;
 800d0ec:	4a04      	ldr	r2, [pc, #16]	@ (800d100 <xbar_fn_to_pinname+0x2c>)
 800d0ee:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d0f2:	6850      	ldr	r0, [r2, #4]
 800d0f4:	e7f2      	b.n	800d0dc <xbar_fn_to_pinname+0x8>

    return name ? name : "N/A";
 800d0f6:	b100      	cbz	r0, 800d0fa <xbar_fn_to_pinname+0x26>
}
 800d0f8:	4770      	bx	lr
    return name ? name : "N/A";
 800d0fa:	4802      	ldr	r0, [pc, #8]	@ (800d104 <xbar_fn_to_pinname+0x30>)
 800d0fc:	e7fc      	b.n	800d0f8 <xbar_fn_to_pinname+0x24>
 800d0fe:	bf00      	nop
 800d100:	0802a30c 	.word	0x0802a30c
 800d104:	08029c58 	.word	0x08029c58

0800d108 <xbar_fn_to_signals_mask>:

control_signals_t xbar_fn_to_signals_mask (pin_function_t fn)
{
    control_signals_t signals;

    signals.mask = fn >= Input_Probe ? 0 : 1 << (uint32_t)fn;
 800d108:	280d      	cmp	r0, #13
 800d10a:	d804      	bhi.n	800d116 <xbar_fn_to_signals_mask+0xe>
 800d10c:	2301      	movs	r3, #1
 800d10e:	fa03 f000 	lsl.w	r0, r3, r0
 800d112:	b280      	uxth	r0, r0
 800d114:	4770      	bx	lr
 800d116:	2000      	movs	r0, #0

    return signals;
}
 800d118:	4770      	bx	lr
	...

0800d11c <errors_get_details>:
}

error_details_t *errors_get_details (void)
{
    return &details;
}
 800d11c:	4800      	ldr	r0, [pc, #0]	@ (800d120 <errors_get_details+0x4>)
 800d11e:	4770      	bx	lr
 800d120:	200001b4 	.word	0x200001b4

0800d124 <init_sync_motion>:

    return add_cmd != NULL;
}

static status_code_t init_sync_motion (plan_line_data_t *pl_data, float pitch)
{
 800d124:	b508      	push	{r3, lr}
 800d126:	ed2d 8b02 	vpush	{d8}
    if(pl_data->spindle.hal->get_data == NULL)
 800d12a:	6903      	ldr	r3, [r0, #16]
 800d12c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d049      	beq.n	800d1c6 <init_sync_motion+0xa2>
        FAIL(Status_GcodeUnsupportedCommand); // [Spindle not sync capable]

    pl_data->condition.inverse_time = Off;
 800d132:	7d03      	ldrb	r3, [r0, #20]
 800d134:	f36f 1345 	bfc	r3, #5, #1
 800d138:	7503      	strb	r3, [r0, #20]
    pl_data->feed_rate = gc_state.distance_per_rev = pitch;
 800d13a:	4b26      	ldr	r3, [pc, #152]	@ (800d1d4 <init_sync_motion+0xb0>)
 800d13c:	ed83 0a19 	vstr	s0, [r3, #100]	@ 0x64
 800d140:	ed80 0a00 	vstr	s0, [r0]
    pl_data->spindle.css = NULL;                    // Switch off CSS.
 800d144:	2300      	movs	r3, #0
 800d146:	60c3      	str	r3, [r0, #12]
    pl_data->overrides = sys.override.control;      // Use current override flags and
 800d148:	4b23      	ldr	r3, [pc, #140]	@ (800d1d8 <init_sync_motion+0xb4>)
 800d14a:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800d14e:	7602      	strb	r2, [r0, #24]
    pl_data->overrides.sync = On;                   // set to sync overrides on execution of motion.
 800d150:	b2d2      	uxtb	r2, r2
 800d152:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d156:	7602      	strb	r2, [r0, #24]

    // Disable feed rate and spindle overrides for the duration of the cycle.
    pl_data->overrides.spindle_rpm_disable = sys.override.control.spindle_rpm_disable = On;
 800d158:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800d15c:	f042 0204 	orr.w	r2, r2, #4
 800d160:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 800d164:	7e02      	ldrb	r2, [r0, #24]
 800d166:	f042 0204 	orr.w	r2, r2, #4
 800d16a:	7602      	strb	r2, [r0, #24]
    pl_data->overrides.feed_rate_disable = sys.override.control.feed_rate_disable = On;
 800d16c:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800d170:	f042 0201 	orr.w	r2, r2, #1
 800d174:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 800d178:	7e03      	ldrb	r3, [r0, #24]
 800d17a:	f043 0301 	orr.w	r3, r3, #1
 800d17e:	7603      	strb	r3, [r0, #24]
    pl_data->spindle.hal->param->override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE;
 800d180:	6903      	ldr	r3, [r0, #16]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	2264      	movs	r2, #100	@ 0x64
 800d186:	60da      	str	r2, [r3, #12]
    // TODO: need for gc_state.distance_per_rev to be reset on modal change?
    float feed_rate = pl_data->feed_rate * pl_data->spindle.hal->get_data(SpindleData_RPM)->rpm;
 800d188:	ed90 8a00 	vldr	s16, [r0]
 800d18c:	6903      	ldr	r3, [r0, #16]
 800d18e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d190:	2001      	movs	r0, #1
 800d192:	4798      	blx	r3
 800d194:	edd0 7a00 	vldr	s15, [r0]
 800d198:	ee68 7a27 	vmul.f32	s15, s16, s15

    if(feed_rate == 0.0f)
 800d19c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1a4:	d011      	beq.n	800d1ca <init_sync_motion+0xa6>
        FAIL(Status_GcodeSpindleNotRunning); // [Spindle not running]

    if(feed_rate > settings.axis[Z_AXIS].max_rate * 0.9f)
 800d1a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d1dc <init_sync_motion+0xb8>)
 800d1a8:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800d1ac:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800d1e0 <init_sync_motion+0xbc>
 800d1b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d1b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1bc:	d407      	bmi.n	800d1ce <init_sync_motion+0xaa>
        FAIL(Status_GcodeMaxFeedRateExceeded); // [Feed rate too high]

    return Status_OK;
 800d1be:	2000      	movs	r0, #0
}
 800d1c0:	ecbd 8b02 	vpop	{d8}
 800d1c4:	bd08      	pop	{r3, pc}
        FAIL(Status_GcodeUnsupportedCommand); // [Spindle not sync capable]
 800d1c6:	2014      	movs	r0, #20
 800d1c8:	e7fa      	b.n	800d1c0 <init_sync_motion+0x9c>
        FAIL(Status_GcodeSpindleNotRunning); // [Spindle not running]
 800d1ca:	2029      	movs	r0, #41	@ 0x29
 800d1cc:	e7f8      	b.n	800d1c0 <init_sync_motion+0x9c>
        FAIL(Status_GcodeMaxFeedRateExceeded); // [Feed rate too high]
 800d1ce:	202b      	movs	r0, #43	@ 0x2b
 800d1d0:	e7f6      	b.n	800d1c0 <init_sync_motion+0x9c>
 800d1d2:	bf00      	nop
 800d1d4:	200017c8 	.word	0x200017c8
 800d1d8:	20001d70 	.word	0x20001d70
 800d1dc:	200024a8 	.word	0x200024a8
 800d1e0:	3f666666 	.word	0x3f666666

0800d1e4 <tool_get_pending>:
{
 800d1e4:	b470      	push	{r4, r5, r6}
 800d1e6:	4604      	mov	r4, r0
    if(grbl.tool_table.n_tools)
 800d1e8:	4b0d      	ldr	r3, [pc, #52]	@ (800d220 <tool_get_pending+0x3c>)
 800d1ea:	699b      	ldr	r3, [r3, #24]
 800d1ec:	b13b      	cbz	r3, 800d1fe <tool_get_pending+0x1a>
        return &grbl.tool_table.tool[tool_id];
 800d1ee:	4b0c      	ldr	r3, [pc, #48]	@ (800d220 <tool_get_pending+0x3c>)
 800d1f0:	69d8      	ldr	r0, [r3, #28]
 800d1f2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800d1f6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 800d1fa:	bc70      	pop	{r4, r5, r6}
 800d1fc:	4770      	bx	lr
    memcpy(&tool_data, gc_state.tool, sizeof(tool_data_t));
 800d1fe:	4b09      	ldr	r3, [pc, #36]	@ (800d224 <tool_get_pending+0x40>)
 800d200:	f8d3 60d0 	ldr.w	r6, [r3, #208]	@ 0xd0
 800d204:	4d08      	ldr	r5, [pc, #32]	@ (800d228 <tool_get_pending+0x44>)
 800d206:	46ac      	mov	ip, r5
 800d208:	6830      	ldr	r0, [r6, #0]
 800d20a:	6871      	ldr	r1, [r6, #4]
 800d20c:	68b2      	ldr	r2, [r6, #8]
 800d20e:	68f3      	ldr	r3, [r6, #12]
 800d210:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d214:	6930      	ldr	r0, [r6, #16]
 800d216:	f8cc 0000 	str.w	r0, [ip]
    tool_data.tool_id = tool_id;
 800d21a:	612c      	str	r4, [r5, #16]
    return &tool_data;
 800d21c:	4628      	mov	r0, r5
 800d21e:	e7ec      	b.n	800d1fa <tool_get_pending+0x16>
 800d220:	20001c78 	.word	0x20001c78
 800d224:	200017c8 	.word	0x200017c8
 800d228:	200016a8 	.word	0x200016a8

0800d22c <add_offset>:
{
 800d22c:	b508      	push	{r3, lr}
    gc_state.offset_id = (gc_state.offset_id + 1) & (MAX_OFFSET_ENTRIES - 1);
 800d22e:	4b0d      	ldr	r3, [pc, #52]	@ (800d264 <add_offset+0x38>)
 800d230:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 800d234:	3201      	adds	r2, #1
 800d236:	f002 0203 	and.w	r2, r2, #3
 800d23a:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    memcpy(&gc_state.offset_queue[gc_state.offset_id], &gc_state.g92_coord_offset, sizeof(coord_data_t));
 800d23e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d242:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 800d246:	f10c 0c80 	add.w	ip, ip, #128	@ 0x80
 800d24a:	449c      	add	ip, r3
 800d24c:	33b8      	adds	r3, #184	@ 0xb8
 800d24e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d250:	f8cc 0004 	str.w	r0, [ip, #4]
 800d254:	f8cc 1008 	str.w	r1, [ip, #8]
 800d258:	f8cc 200c 	str.w	r2, [ip, #12]
    system_flag_wco_change();
 800d25c:	f014 febe 	bl	8021fdc <system_flag_wco_change>
}
 800d260:	bd08      	pop	{r3, pc}
 800d262:	bf00      	nop
 800d264:	200017c8 	.word	0x200017c8

0800d268 <add_output_command>:
{
 800d268:	b510      	push	{r4, lr}
 800d26a:	4604      	mov	r4, r0
    if((add_cmd = malloc(sizeof(output_command_t)))) {
 800d26c:	200c      	movs	r0, #12
 800d26e:	f015 fc95 	bl	8022b9c <malloc>
 800d272:	4601      	mov	r1, r0
 800d274:	b168      	cbz	r0, 800d292 <add_output_command+0x2a>
        memcpy(add_cmd, command, sizeof(output_command_t));
 800d276:	6820      	ldr	r0, [r4, #0]
 800d278:	6862      	ldr	r2, [r4, #4]
 800d27a:	68a3      	ldr	r3, [r4, #8]
 800d27c:	6008      	str	r0, [r1, #0]
 800d27e:	604a      	str	r2, [r1, #4]
 800d280:	608b      	str	r3, [r1, #8]
        if(output_commands == NULL)
 800d282:	4b07      	ldr	r3, [pc, #28]	@ (800d2a0 <add_output_command+0x38>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	b143      	cbz	r3, 800d29a <add_output_command+0x32>
            while(cmd->next)
 800d288:	461a      	mov	r2, r3
 800d28a:	689b      	ldr	r3, [r3, #8]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1fb      	bne.n	800d288 <add_output_command+0x20>
            cmd->next = add_cmd;
 800d290:	6091      	str	r1, [r2, #8]
}
 800d292:	1e08      	subs	r0, r1, #0
 800d294:	bf18      	it	ne
 800d296:	2001      	movne	r0, #1
 800d298:	bd10      	pop	{r4, pc}
            output_commands = add_cmd;
 800d29a:	4b01      	ldr	r3, [pc, #4]	@ (800d2a0 <add_output_command+0x38>)
 800d29c:	6019      	str	r1, [r3, #0]
 800d29e:	e7f8      	b.n	800d292 <add_output_command+0x2a>
 800d2a0:	20001794 	.word	0x20001794

0800d2a4 <gc_get_scaling>:
}
 800d2a4:	4800      	ldr	r0, [pc, #0]	@ (800d2a8 <gc_get_scaling+0x4>)
 800d2a6:	4770      	bx	lr
 800d2a8:	200001cc 	.word	0x200001cc

0800d2ac <gc_get_g51_state>:
    axes_signals_t scaled = {0};
 800d2ac:	f04f 0000 	mov.w	r0, #0
    uint_fast8_t idx = N_AXIS;
 800d2b0:	2303      	movs	r3, #3
 800d2b2:	e002      	b.n	800d2ba <gc_get_g51_state+0xe>
            scaled.value |= 0x01;
 800d2b4:	f041 0001 	orr.w	r0, r1, #1
    } while(idx);
 800d2b8:	b19b      	cbz	r3, 800d2e2 <gc_get_g51_state+0x36>
        scaled.value <<= 1;
 800d2ba:	b2c0      	uxtb	r0, r0
 800d2bc:	0040      	lsls	r0, r0, #1
 800d2be:	b2c1      	uxtb	r1, r0
 800d2c0:	4608      	mov	r0, r1
        if(scale_factor.ijk[--idx] != 1.0f)
 800d2c2:	3b01      	subs	r3, #1
 800d2c4:	f103 0c02 	add.w	ip, r3, #2
 800d2c8:	4a06      	ldr	r2, [pc, #24]	@ (800d2e4 <gc_get_g51_state+0x38>)
 800d2ca:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d2ce:	ed92 7a01 	vldr	s14, [r2, #4]
 800d2d2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d2d6:	eeb4 7a67 	vcmp.f32	s14, s15
 800d2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2de:	d0eb      	beq.n	800d2b8 <gc_get_g51_state+0xc>
 800d2e0:	e7e8      	b.n	800d2b4 <gc_get_g51_state+0x8>
}
 800d2e2:	4770      	bx	lr
 800d2e4:	200001c0 	.word	0x200001c0

0800d2e8 <set_scaling>:
{
 800d2e8:	b510      	push	{r4, lr}
 800d2ea:	ed2d 8b02 	vpush	{d8}
 800d2ee:	eeb0 8a40 	vmov.f32	s16, s0
    axes_signals_t state = gc_get_g51_state();
 800d2f2:	f7ff ffdb 	bl	800d2ac <gc_get_g51_state>
    uint_fast8_t idx = N_AXIS;
 800d2f6:	2303      	movs	r3, #3
        scale_factor.ijk[--idx] = factor;
 800d2f8:	3b01      	subs	r3, #1
 800d2fa:	4a12      	ldr	r2, [pc, #72]	@ (800d344 <set_scaling+0x5c>)
 800d2fc:	1c99      	adds	r1, r3, #2
 800d2fe:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d302:	ed81 8a01 	vstr	s16, [r1, #4]
        scale_factor.xyz[idx] = 0.0f;
 800d306:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d30a:	2100      	movs	r1, #0
 800d30c:	6011      	str	r1, [r2, #0]
    } while(idx);
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1f2      	bne.n	800d2f8 <set_scaling+0x10>
    gc_state.modal.scaling_active = factor != 1.0f;
 800d312:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d316:	eeb4 8a67 	vcmp.f32	s16, s15
 800d31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d31e:	bf14      	ite	ne
 800d320:	2201      	movne	r2, #1
 800d322:	2200      	moveq	r2, #0
 800d324:	4b08      	ldr	r3, [pc, #32]	@ (800d348 <set_scaling+0x60>)
 800d326:	779a      	strb	r2, [r3, #30]
    if(state.value != gc_get_g51_state().value)
 800d328:	b2c4      	uxtb	r4, r0
 800d32a:	f7ff ffbf 	bl	800d2ac <gc_get_g51_state>
 800d32e:	b2c0      	uxtb	r0, r0
 800d330:	4284      	cmp	r4, r0
 800d332:	d102      	bne.n	800d33a <set_scaling+0x52>
}
 800d334:	ecbd 8b02 	vpop	{d8}
 800d338:	bd10      	pop	{r4, pc}
        system_add_rt_report(Report_Scaling);
 800d33a:	2002      	movs	r0, #2
 800d33c:	f014 fdc2 	bl	8021ec4 <system_add_rt_report>
}
 800d340:	e7f8      	b.n	800d334 <set_scaling+0x4c>
 800d342:	bf00      	nop
 800d344:	200001c0 	.word	0x200001c0
 800d348:	200017c8 	.word	0x200017c8

0800d34c <gc_get_offset>:
{
 800d34c:	b510      	push	{r4, lr}
 800d34e:	4604      	mov	r4, r0
    if(real_time &&
 800d350:	b311      	cbz	r1, 800d398 <gc_get_offset+0x4c>
        !(settings.status_report.machine_position && settings.status_report.sync_on_wco_change) &&
 800d352:	4b1c      	ldr	r3, [pc, #112]	@ (800d3c4 <gc_get_offset+0x78>)
 800d354:	f8b3 20fc 	ldrh.w	r2, [r3, #252]	@ 0xfc
    if(real_time &&
 800d358:	f240 1301 	movw	r3, #257	@ 0x101
 800d35c:	4393      	bics	r3, r2
 800d35e:	d01b      	beq.n	800d398 <gc_get_offset+0x4c>
          (offset_id = st_get_offset_id()) >= 0)
 800d360:	f013 fa58 	bl	8020814 <st_get_offset_id>
        !(settings.status_report.machine_position && settings.status_report.sync_on_wco_change) &&
 800d364:	2800      	cmp	r0, #0
 800d366:	db17      	blt.n	800d398 <gc_get_offset+0x4c>
        return gc_state.modal.coord_system.xyz[idx] + gc_state.offset_queue[offset_id].values[idx] + gc_state.tool_length_offset[idx];
 800d368:	4a17      	ldr	r2, [pc, #92]	@ (800d3c8 <gc_get_offset+0x7c>)
 800d36a:	1ca3      	adds	r3, r4, #2
 800d36c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d370:	ed93 0a00 	vldr	s0, [r3]
 800d374:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d378:	1903      	adds	r3, r0, r4
 800d37a:	3320      	adds	r3, #32
 800d37c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d380:	edd3 7a01 	vldr	s15, [r3, #4]
 800d384:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d388:	3430      	adds	r4, #48	@ 0x30
 800d38a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d38e:	edd2 7a01 	vldr	s15, [r2, #4]
 800d392:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d396:	e014      	b.n	800d3c2 <gc_get_offset+0x76>
        return gc_state.modal.coord_system.xyz[idx] + gc_state.g92_coord_offset[idx] + gc_state.tool_length_offset[idx];
 800d398:	4b0b      	ldr	r3, [pc, #44]	@ (800d3c8 <gc_get_offset+0x7c>)
 800d39a:	1ca2      	adds	r2, r4, #2
 800d39c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d3a0:	ed92 0a00 	vldr	s0, [r2]
 800d3a4:	f104 022e 	add.w	r2, r4, #46	@ 0x2e
 800d3a8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d3ac:	edd2 7a00 	vldr	s15, [r2]
 800d3b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d3b4:	3430      	adds	r4, #48	@ 0x30
 800d3b6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d3ba:	edd3 7a01 	vldr	s15, [r3, #4]
 800d3be:	ee30 0a27 	vadd.f32	s0, s0, s15
}
 800d3c2:	bd10      	pop	{r4, pc}
 800d3c4:	200024a8 	.word	0x200024a8
 800d3c8:	200017c8 	.word	0x200017c8

0800d3cc <gc_set_tool_offset>:
{
 800d3cc:	b500      	push	{lr}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	9201      	str	r2, [sp, #4]
    switch(mode) {
 800d3d2:	4684      	mov	ip, r0
 800d3d4:	b120      	cbz	r0, 800d3e0 <gc_set_tool_offset+0x14>
 800d3d6:	2802      	cmp	r0, #2
 800d3d8:	d023      	beq.n	800d422 <gc_set_tool_offset+0x56>
    gc_state.modal.tool_offset_mode = mode;
 800d3da:	4b2c      	ldr	r3, [pc, #176]	@ (800d48c <gc_set_tool_offset+0xc0>)
 800d3dc:	71d8      	strb	r0, [r3, #7]
    if(tlo_changed) {
 800d3de:	e04b      	b.n	800d478 <gc_set_tool_offset+0xac>
    switch(mode) {
 800d3e0:	2000      	movs	r0, #0
 800d3e2:	2203      	movs	r2, #3
 800d3e4:	e007      	b.n	800d3f6 <gc_set_tool_offset+0x2a>
                    gc_state.tool->offset[idx] = 0.0f;
 800d3e6:	4b29      	ldr	r3, [pc, #164]	@ (800d48c <gc_set_tool_offset+0xc0>)
 800d3e8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800d3ec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d3f0:	6019      	str	r1, [r3, #0]
            } while(idx);
 800d3f2:	2a00      	cmp	r2, #0
 800d3f4:	d03c      	beq.n	800d470 <gc_set_tool_offset+0xa4>
                idx--;
 800d3f6:	3a01      	subs	r2, #1
                tlo_changed |= gc_state.tool_length_offset[idx] != 0.0f;
 800d3f8:	f102 0130 	add.w	r1, r2, #48	@ 0x30
 800d3fc:	4b23      	ldr	r3, [pc, #140]	@ (800d48c <gc_set_tool_offset+0xc0>)
 800d3fe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d402:	edd3 7a01 	vldr	s15, [r3, #4]
 800d406:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d40e:	bf18      	it	ne
 800d410:	f040 0001 	orrne.w	r0, r0, #1
                gc_state.tool_length_offset[idx] = 0.0f;
 800d414:	2100      	movs	r1, #0
 800d416:	6059      	str	r1, [r3, #4]
                if(grbl.tool_table.n_tools == 0)
 800d418:	4b1d      	ldr	r3, [pc, #116]	@ (800d490 <gc_set_tool_offset+0xc4>)
 800d41a:	699b      	ldr	r3, [r3, #24]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d1e8      	bne.n	800d3f2 <gc_set_tool_offset+0x26>
 800d420:	e7e1      	b.n	800d3e6 <gc_set_tool_offset+0x1a>
                float new_offset = offset / settings.axis[idx].steps_per_mm;
 800d422:	eddd 7a01 	vldr	s15, [sp, #4]
 800d426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d42a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800d42e:	4b19      	ldr	r3, [pc, #100]	@ (800d494 <gc_set_tool_offset+0xc8>)
 800d430:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d434:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800d438:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                tlo_changed |= gc_state.tool_length_offset[idx] != new_offset;
 800d43c:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 800d440:	4b12      	ldr	r3, [pc, #72]	@ (800d48c <gc_set_tool_offset+0xc0>)
 800d442:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d446:	edd3 7a01 	vldr	s15, [r3, #4]
 800d44a:	eef4 7a47 	vcmp.f32	s15, s14
 800d44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d452:	bf14      	ite	ne
 800d454:	2001      	movne	r0, #1
 800d456:	2000      	moveq	r0, #0
                gc_state.tool_length_offset[idx] = new_offset;
 800d458:	ed83 7a01 	vstr	s14, [r3, #4]
                if(grbl.tool_table.n_tools == 0)
 800d45c:	4b0c      	ldr	r3, [pc, #48]	@ (800d490 <gc_set_tool_offset+0xc4>)
 800d45e:	699b      	ldr	r3, [r3, #24]
 800d460:	b933      	cbnz	r3, 800d470 <gc_set_tool_offset+0xa4>
                    gc_state.tool->offset[idx] = new_offset;
 800d462:	4b0a      	ldr	r3, [pc, #40]	@ (800d48c <gc_set_tool_offset+0xc0>)
 800d464:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800d468:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d46c:	ed83 7a00 	vstr	s14, [r3]
    gc_state.modal.tool_offset_mode = mode;
 800d470:	4b06      	ldr	r3, [pc, #24]	@ (800d48c <gc_set_tool_offset+0xc0>)
 800d472:	f883 c007 	strb.w	ip, [r3, #7]
    if(tlo_changed) {
 800d476:	b910      	cbnz	r0, 800d47e <gc_set_tool_offset+0xb2>
}
 800d478:	b003      	add	sp, #12
 800d47a:	f85d fb04 	ldr.w	pc, [sp], #4
        system_add_rt_report(Report_ToolOffset);
 800d47e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d482:	f014 fd1f 	bl	8021ec4 <system_add_rt_report>
        system_flag_wco_change();
 800d486:	f014 fda9 	bl	8021fdc <system_flag_wco_change>
}
 800d48a:	e7f5      	b.n	800d478 <gc_set_tool_offset+0xac>
 800d48c:	200017c8 	.word	0x200017c8
 800d490:	20001c78 	.word	0x20001c78
 800d494:	200024a8 	.word	0x200024a8

0800d498 <gc_get_plane_data>:
    switch (select) {
 800d498:	b141      	cbz	r1, 800d4ac <gc_get_plane_data+0x14>
 800d49a:	2901      	cmp	r1, #1
 800d49c:	d00d      	beq.n	800d4ba <gc_get_plane_data+0x22>
            plane->axis_0 = Y_AXIS;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	7003      	strb	r3, [r0, #0]
            plane->axis_1 = Z_AXIS;
 800d4a2:	2302      	movs	r3, #2
 800d4a4:	7043      	strb	r3, [r0, #1]
            plane->axis_linear = X_AXIS;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	7083      	strb	r3, [r0, #2]
}
 800d4aa:	4770      	bx	lr
            plane->axis_0 = X_AXIS;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	7003      	strb	r3, [r0, #0]
            plane->axis_1 = Y_AXIS;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	7043      	strb	r3, [r0, #1]
            plane->axis_linear = Z_AXIS;
 800d4b4:	2302      	movs	r3, #2
 800d4b6:	7083      	strb	r3, [r0, #2]
            break;
 800d4b8:	4770      	bx	lr
            plane->axis_0 = Z_AXIS;
 800d4ba:	2302      	movs	r3, #2
 800d4bc:	7003      	strb	r3, [r0, #0]
            plane->axis_1 = X_AXIS;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	7043      	strb	r3, [r0, #1]
            plane->axis_linear = Y_AXIS;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	7083      	strb	r3, [r0, #2]
            break;
 800d4c6:	4770      	bx	lr

0800d4c8 <gc_init>:
{
 800d4c8:	b510      	push	{r4, lr}
 800d4ca:	b086      	sub	sp, #24
    if(sys.cold_start) {
 800d4cc:	4b46      	ldr	r3, [pc, #280]	@ (800d5e8 <gc_init+0x120>)
 800d4ce:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d4d2:	b18b      	cbz	r3, 800d4f8 <gc_init+0x30>
        memset(&gc_state, 0, sizeof(parser_state_t));
 800d4d4:	4c45      	ldr	r4, [pc, #276]	@ (800d5ec <gc_init+0x124>)
 800d4d6:	22d4      	movs	r2, #212	@ 0xd4
 800d4d8:	2100      	movs	r1, #0
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f017 fc27 	bl	8024d2e <memset>
        gc_state.tool = &grbl.tool_table.tool[0];
 800d4e0:	4a43      	ldr	r2, [pc, #268]	@ (800d5f0 <gc_init+0x128>)
 800d4e2:	69d3      	ldr	r3, [r2, #28]
 800d4e4:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
        if(grbl.tool_table.n_tools == 0)
 800d4e8:	6992      	ldr	r2, [r2, #24]
 800d4ea:	b9da      	cbnz	r2, 800d524 <gc_init+0x5c>
            memset(grbl.tool_table.tool, 0, sizeof(tool_data_t));
 800d4ec:	601a      	str	r2, [r3, #0]
 800d4ee:	605a      	str	r2, [r3, #4]
 800d4f0:	609a      	str	r2, [r3, #8]
 800d4f2:	60da      	str	r2, [r3, #12]
 800d4f4:	611a      	str	r2, [r3, #16]
 800d4f6:	e015      	b.n	800d524 <gc_init+0x5c>
        memset(&gc_state, 0, offsetof(parser_state_t, g92_coord_offset));
 800d4f8:	4c3c      	ldr	r4, [pc, #240]	@ (800d5ec <gc_init+0x124>)
 800d4fa:	22b8      	movs	r2, #184	@ 0xb8
 800d4fc:	2100      	movs	r1, #0
 800d4fe:	4620      	mov	r0, r4
 800d500:	f017 fc15 	bl	8024d2e <memset>
        gc_state.tool_pending = gc_state.tool->tool_id;
 800d504:	f8d4 00d0 	ldr.w	r0, [r4, #208]	@ 0xd0
 800d508:	6903      	ldr	r3, [r0, #16]
 800d50a:	67a3      	str	r3, [r4, #120]	@ 0x78
        if(hal.tool.select)
 800d50c:	4b39      	ldr	r3, [pc, #228]	@ (800d5f4 <gc_init+0x12c>)
 800d50e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800d512:	b13b      	cbz	r3, 800d524 <gc_init+0x5c>
            hal.tool.select(gc_state.tool, false);
 800d514:	2100      	movs	r1, #0
 800d516:	4798      	blx	r3
 800d518:	e004      	b.n	800d524 <gc_init+0x5c>
        output_command_t *next = output_commands->next;
 800d51a:	6884      	ldr	r4, [r0, #8]
        free(output_commands);
 800d51c:	f015 fb46 	bl	8022bac <free>
        output_commands = next;
 800d520:	4b35      	ldr	r3, [pc, #212]	@ (800d5f8 <gc_init+0x130>)
 800d522:	601c      	str	r4, [r3, #0]
    while(output_commands) {
 800d524:	4b34      	ldr	r3, [pc, #208]	@ (800d5f8 <gc_init+0x130>)
 800d526:	6818      	ldr	r0, [r3, #0]
 800d528:	2800      	cmp	r0, #0
 800d52a:	d1f6      	bne.n	800d51a <gc_init+0x52>
    gc_state.modal.override_ctrl = sys.override.control;
 800d52c:	4c2f      	ldr	r4, [pc, #188]	@ (800d5ec <gc_init+0x124>)
 800d52e:	4b2e      	ldr	r3, [pc, #184]	@ (800d5e8 <gc_init+0x120>)
 800d530:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800d534:	7723      	strb	r3, [r4, #28]
    gc_state.spindle.hal = spindle_get(0);
 800d536:	f011 f877 	bl	801e628 <spindle_get>
 800d53a:	65e0      	str	r0, [r4, #92]	@ 0x5c
    set_scaling(1.0f);
 800d53c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d540:	f7ff fed2 	bl	800d2e8 <set_scaling>
    if (!settings_read_coord_data(gc_state.modal.coord_system.id, &gc_state.modal.coord_system.xyz))
 800d544:	f104 0108 	add.w	r1, r4, #8
 800d548:	7d20      	ldrb	r0, [r4, #20]
 800d54a:	f010 f8a3 	bl	801d694 <settings_read_coord_data>
 800d54e:	b918      	cbnz	r0, 800d558 <gc_init+0x90>
        grbl.report.status_message(Status_SettingReadFail);
 800d550:	4b27      	ldr	r3, [pc, #156]	@ (800d5f0 <gc_init+0x128>)
 800d552:	689b      	ldr	r3, [r3, #8]
 800d554:	2007      	movs	r0, #7
 800d556:	4798      	blx	r3
    if(sys.cold_start && !settings.flags.g92_is_volatile) {
 800d558:	4b23      	ldr	r3, [pc, #140]	@ (800d5e8 <gc_init+0x120>)
 800d55a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d55e:	b12b      	cbz	r3, 800d56c <gc_init+0xa4>
 800d560:	4b26      	ldr	r3, [pc, #152]	@ (800d5fc <gc_init+0x134>)
 800d562:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 800d566:	f013 0f02 	tst.w	r3, #2
 800d56a:	d025      	beq.n	800d5b8 <gc_init+0xf0>
    if(grbl.on_wco_changed && (!sys.cold_start ||
 800d56c:	4b20      	ldr	r3, [pc, #128]	@ (800d5f0 <gc_init+0x128>)
 800d56e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800d570:	b1cc      	cbz	r4, 800d5a6 <gc_init+0xde>
 800d572:	4b1d      	ldr	r3, [pc, #116]	@ (800d5e8 <gc_init+0x120>)
 800d574:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d578:	b1a3      	cbz	r3, 800d5a4 <gc_init+0xdc>
                                !is0_position_vector(gc_state.modal.coord_system.xyz) ||
 800d57a:	2300      	movs	r3, #0
 800d57c:	9300      	str	r3, [sp, #0]
 800d57e:	9301      	str	r3, [sp, #4]
 800d580:	9302      	str	r3, [sp, #8]
 800d582:	220c      	movs	r2, #12
 800d584:	4669      	mov	r1, sp
 800d586:	481e      	ldr	r0, [pc, #120]	@ (800d600 <gc_init+0x138>)
 800d588:	f017 fba7 	bl	8024cda <memcmp>
    if(grbl.on_wco_changed && (!sys.cold_start ||
 800d58c:	b950      	cbnz	r0, 800d5a4 <gc_init+0xdc>
                                 !is0_position_vector(gc_state.g92_coord_offset)))
 800d58e:	2300      	movs	r3, #0
 800d590:	9303      	str	r3, [sp, #12]
 800d592:	9304      	str	r3, [sp, #16]
 800d594:	9305      	str	r3, [sp, #20]
 800d596:	220c      	movs	r2, #12
 800d598:	eb0d 0102 	add.w	r1, sp, r2
 800d59c:	4819      	ldr	r0, [pc, #100]	@ (800d604 <gc_init+0x13c>)
 800d59e:	f017 fb9c 	bl	8024cda <memcmp>
                                !is0_position_vector(gc_state.modal.coord_system.xyz) ||
 800d5a2:	b100      	cbz	r0, 800d5a6 <gc_init+0xde>
        grbl.on_wco_changed();
 800d5a4:	47a0      	blx	r4
    ngc_modal_state_invalidate();
 800d5a6:	f007 ffd5 	bl	8015554 <ngc_modal_state_invalidate>
    if(grbl.on_parser_init)
 800d5aa:	4b11      	ldr	r3, [pc, #68]	@ (800d5f0 <gc_init+0x128>)
 800d5ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5ae:	b10b      	cbz	r3, 800d5b4 <gc_init+0xec>
        grbl.on_parser_init(&gc_state);
 800d5b0:	480e      	ldr	r0, [pc, #56]	@ (800d5ec <gc_init+0x124>)
 800d5b2:	4798      	blx	r3
}
 800d5b4:	b006      	add	sp, #24
 800d5b6:	bd10      	pop	{r4, pc}
        if(!settings_read_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset))
 800d5b8:	4912      	ldr	r1, [pc, #72]	@ (800d604 <gc_init+0x13c>)
 800d5ba:	200b      	movs	r0, #11
 800d5bc:	f010 f86a 	bl	801d694 <settings_read_coord_data>
 800d5c0:	b920      	cbnz	r0, 800d5cc <gc_init+0x104>
            grbl.report.status_message(Status_SettingReadFail);
 800d5c2:	4b0b      	ldr	r3, [pc, #44]	@ (800d5f0 <gc_init+0x128>)
 800d5c4:	689b      	ldr	r3, [r3, #8]
 800d5c6:	2007      	movs	r0, #7
 800d5c8:	4798      	blx	r3
 800d5ca:	e7cf      	b.n	800d56c <gc_init+0xa4>
            memcpy(&gc_state.offset_queue[gc_state.offset_id], &gc_state.g92_coord_offset, sizeof(coord_data_t));
 800d5cc:	4c07      	ldr	r4, [pc, #28]	@ (800d5ec <gc_init+0x124>)
 800d5ce:	f994 3082 	ldrsb.w	r3, [r4, #130]	@ 0x82
 800d5d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	3380      	adds	r3, #128	@ 0x80
 800d5da:	4423      	add	r3, r4
 800d5dc:	34b8      	adds	r4, #184	@ 0xb8
 800d5de:	cc07      	ldmia	r4!, {r0, r1, r2}
 800d5e0:	6058      	str	r0, [r3, #4]
 800d5e2:	6099      	str	r1, [r3, #8]
 800d5e4:	60da      	str	r2, [r3, #12]
 800d5e6:	e7c1      	b.n	800d56c <gc_init+0xa4>
 800d5e8:	20001d70 	.word	0x20001d70
 800d5ec:	200017c8 	.word	0x200017c8
 800d5f0:	20001c78 	.word	0x20001c78
 800d5f4:	20001a90 	.word	0x20001a90
 800d5f8:	20001794 	.word	0x20001794
 800d5fc:	200024a8 	.word	0x200024a8
 800d600:	200017d0 	.word	0x200017d0
 800d604:	20001880 	.word	0x20001880

0800d608 <gc_spindle_off>:
{
 800d608:	b508      	push	{r3, lr}
    gc_state.spindle.rpm = 0.0f;
 800d60a:	4b05      	ldr	r3, [pc, #20]	@ (800d620 <gc_spindle_off+0x18>)
 800d60c:	2200      	movs	r2, #0
 800d60e:	651a      	str	r2, [r3, #80]	@ 0x50
    gc_state.modal.spindle.state.value = 0;
 800d610:	2200      	movs	r2, #0
 800d612:	769a      	strb	r2, [r3, #26]
    spindle_all_off();
 800d614:	f011 fa14 	bl	801ea40 <spindle_all_off>
    system_add_rt_report(Report_Spindle);
 800d618:	2010      	movs	r0, #16
 800d61a:	f014 fc53 	bl	8021ec4 <system_add_rt_report>
}
 800d61e:	bd08      	pop	{r3, pc}
 800d620:	200017c8 	.word	0x200017c8

0800d624 <gc_coolant>:
{
 800d624:	b508      	push	{r3, lr}
    gc_state.modal.coolant = state;
 800d626:	4b05      	ldr	r3, [pc, #20]	@ (800d63c <gc_coolant+0x18>)
 800d628:	7658      	strb	r0, [r3, #25]
    hal.coolant.set_state(gc_state.modal.coolant);
 800d62a:	4a05      	ldr	r2, [pc, #20]	@ (800d640 <gc_coolant+0x1c>)
 800d62c:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 800d62e:	b2c0      	uxtb	r0, r0
 800d630:	4790      	blx	r2
    system_add_rt_report(Report_Coolant);
 800d632:	2020      	movs	r0, #32
 800d634:	f014 fc46 	bl	8021ec4 <system_add_rt_report>
}
 800d638:	bd08      	pop	{r3, pc}
 800d63a:	bf00      	nop
 800d63c:	200017c8 	.word	0x200017c8
 800d640:	20001a90 	.word	0x20001a90

0800d644 <gc_spindle_get>:
}
 800d644:	4b01      	ldr	r3, [pc, #4]	@ (800d64c <gc_spindle_get+0x8>)
 800d646:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800d648:	4770      	bx	lr
 800d64a:	bf00      	nop
 800d64c:	200017c8 	.word	0x200017c8

0800d650 <gc_output_message>:

// Output and free previously allocated message
void gc_output_message (char *message)
{
    if(message) {
 800d650:	b188      	cbz	r0, 800d676 <gc_output_message+0x26>
{
 800d652:	b510      	push	{r4, lr}
 800d654:	4604      	mov	r4, r0

        if(grbl.on_gcode_message)
 800d656:	4b08      	ldr	r3, [pc, #32]	@ (800d678 <gc_output_message+0x28>)
 800d658:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d65c:	b103      	cbz	r3, 800d660 <gc_output_message+0x10>
            grbl.on_gcode_message(message);
 800d65e:	4798      	blx	r3

        if(*message)
 800d660:	7823      	ldrb	r3, [r4, #0]
 800d662:	b91b      	cbnz	r3, 800d66c <gc_output_message+0x1c>
            report_message(message, Message_Plain);

        free(message);
 800d664:	4620      	mov	r0, r4
 800d666:	f015 faa1 	bl	8022bac <free>
    }
}
 800d66a:	bd10      	pop	{r4, pc}
            report_message(message, Message_Plain);
 800d66c:	2100      	movs	r1, #0
 800d66e:	4620      	mov	r0, r4
 800d670:	f00c f862 	bl	8019738 <report_message>
 800d674:	e7f6      	b.n	800d664 <gc_output_message+0x14>
 800d676:	4770      	bx	lr
 800d678:	20001c78 	.word	0x20001c78

0800d67c <gc_modal_state_restore>:

bool gc_modal_state_restore (gc_modal_t *copy)
{
    bool ok = false;

    if((ok = !!copy && !ABORTED)) {
 800d67c:	2800      	cmp	r0, #0
 800d67e:	d04f      	beq.n	800d720 <gc_modal_state_restore+0xa4>
{
 800d680:	b538      	push	{r3, r4, r5, lr}
 800d682:	4604      	mov	r4, r0
    if((ok = !!copy && !ABORTED)) {
 800d684:	4b28      	ldr	r3, [pc, #160]	@ (800d728 <gc_modal_state_restore+0xac>)
 800d686:	7818      	ldrb	r0, [r3, #0]
 800d688:	2800      	cmp	r0, #0
 800d68a:	d14b      	bne.n	800d724 <gc_modal_state_restore+0xa8>
 800d68c:	785b      	ldrb	r3, [r3, #1]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d149      	bne.n	800d726 <gc_modal_state_restore+0xaa>

        copy->auto_restore = false;
 800d692:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        copy->motion = gc_state.modal.motion;
 800d696:	4b25      	ldr	r3, [pc, #148]	@ (800d72c <gc_modal_state_restore+0xb0>)
 800d698:	881a      	ldrh	r2, [r3, #0]
 800d69a:	8022      	strh	r2, [r4, #0]

        if(copy->coolant.value != gc_state.modal.coolant.value) {
 800d69c:	7e62      	ldrb	r2, [r4, #25]
 800d69e:	7e5b      	ldrb	r3, [r3, #25]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d009      	beq.n	800d6b8 <gc_modal_state_restore+0x3c>
            hal.coolant.set_state(copy->coolant);
 800d6a4:	4b22      	ldr	r3, [pc, #136]	@ (800d730 <gc_modal_state_restore+0xb4>)
 800d6a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6a8:	7e60      	ldrb	r0, [r4, #25]
 800d6aa:	4798      	blx	r3
            delay_sec(settings.safety_door.coolant_on_delay, DelayMode_SysSuspend);
 800d6ac:	2001      	movs	r0, #1
 800d6ae:	4b21      	ldr	r3, [pc, #132]	@ (800d734 <gc_modal_state_restore+0xb8>)
 800d6b0:	ed93 0a51 	vldr	s0, [r3, #324]	@ 0x144
 800d6b4:	f008 fb16 	bl	8015ce4 <delay_sec>
        }

        if(copy->spindle.state.value != gc_state.modal.spindle.state.value || copy->rpm != gc_state.modal.rpm)
 800d6b8:	7ea2      	ldrb	r2, [r4, #26]
 800d6ba:	4b1c      	ldr	r3, [pc, #112]	@ (800d72c <gc_modal_state_restore+0xb0>)
 800d6bc:	7e9b      	ldrb	r3, [r3, #26]
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d109      	bne.n	800d6d6 <gc_modal_state_restore+0x5a>
 800d6c2:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 800d6c6:	4b19      	ldr	r3, [pc, #100]	@ (800d72c <gc_modal_state_restore+0xb0>)
 800d6c8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800d6cc:	eeb4 7a67 	vcmp.f32	s14, s15
 800d6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d4:	d006      	beq.n	800d6e4 <gc_modal_state_restore+0x68>
            spindle_restore(gc_state.spindle.hal, copy->spindle.state, copy->rpm);
 800d6d6:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 800d6da:	7ea1      	ldrb	r1, [r4, #26]
 800d6dc:	4b13      	ldr	r3, [pc, #76]	@ (800d72c <gc_modal_state_restore+0xb0>)
 800d6de:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800d6e0:	f011 f8a0 	bl	801e824 <spindle_restore>

        memcpy(&gc_state.modal, copy, sizeof(gc_modal_t));
 800d6e4:	46a4      	mov	ip, r4
 800d6e6:	4d11      	ldr	r5, [pc, #68]	@ (800d72c <gc_modal_state_restore+0xb0>)
 800d6e8:	3430      	adds	r4, #48	@ 0x30
 800d6ea:	46ae      	mov	lr, r5
 800d6ec:	f8dc 0000 	ldr.w	r0, [ip]
 800d6f0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d6f4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800d6f8:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800d6fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d700:	f10c 0c10 	add.w	ip, ip, #16
 800d704:	4675      	mov	r5, lr
 800d706:	45a4      	cmp	ip, r4
 800d708:	d1ef      	bne.n	800d6ea <gc_modal_state_restore+0x6e>
 800d70a:	f8dc 0000 	ldr.w	r0, [ip]
 800d70e:	f8ce 0000 	str.w	r0, [lr]

        gc_state.spindle.rpm = gc_state.modal.rpm;
 800d712:	4b06      	ldr	r3, [pc, #24]	@ (800d72c <gc_modal_state_restore+0xb0>)
 800d714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d716:	651a      	str	r2, [r3, #80]	@ 0x50
        gc_state.feed_rate = gc_state.modal.feed_rate;
 800d718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d71a:	661a      	str	r2, [r3, #96]	@ 0x60
    if((ok = !!copy && !ABORTED)) {
 800d71c:	2001      	movs	r0, #1
 800d71e:	e002      	b.n	800d726 <gc_modal_state_restore+0xaa>
 800d720:	2000      	movs	r0, #0
    }

    return ok;
}
 800d722:	4770      	bx	lr
    if((ok = !!copy && !ABORTED)) {
 800d724:	2000      	movs	r0, #0
}
 800d726:	bd38      	pop	{r3, r4, r5, pc}
 800d728:	20001d70 	.word	0x20001d70
 800d72c:	200017c8 	.word	0x200017c8
 800d730:	20001a90 	.word	0x20001a90
 800d734:	200024a8 	.word	0x200024a8

0800d738 <gc_normalize_block>:
// else the block delete character. Remaining characters are converted to upper case.
// If the driver handles message comments then the first is extracted and returned in a dynamically
// allocated memory block, the caller must free this after the message has been processed.

char *gc_normalize_block (char *block, char **message)
{
 800d738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d73c:	4604      	mov	r4, r0
 800d73e:	460f      	mov	r7, r1
    char c, *s1, *s2, *comment = NULL;

    // Remove leading whitespace & control characters
    while(*block && *block <= ' ')
 800d740:	e000      	b.n	800d744 <gc_normalize_block+0xc>
        block++;
 800d742:	3401      	adds	r4, #1
    while(*block && *block <= ' ')
 800d744:	7822      	ldrb	r2, [r4, #0]
 800d746:	1e53      	subs	r3, r2, #1
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	2b1f      	cmp	r3, #31
 800d74c:	d9f9      	bls.n	800d742 <gc_normalize_block+0xa>

    if(*block == ';' || (*block == '/' && sys.flags.block_delete_enabled)) {
 800d74e:	2a3b      	cmp	r2, #59	@ 0x3b
 800d750:	d00c      	beq.n	800d76c <gc_normalize_block+0x34>
 800d752:	2a2f      	cmp	r2, #47	@ 0x2f
 800d754:	d005      	beq.n	800d762 <gc_normalize_block+0x2a>
        *block = '\0';
        return block;
    }

    if(*block == '/')
 800d756:	2a2f      	cmp	r2, #47	@ 0x2f
 800d758:	d00c      	beq.n	800d774 <gc_normalize_block+0x3c>
        block++;

    s1 = s2 = block;
 800d75a:	46a0      	mov	r8, r4
 800d75c:	4625      	mov	r5, r4
    char c, *s1, *s2, *comment = NULL;
 800d75e:	2600      	movs	r6, #0

    while((c = *s1) != '\0') {
 800d760:	e060      	b.n	800d824 <gc_normalize_block+0xec>
    if(*block == ';' || (*block == '/' && sys.flags.block_delete_enabled)) {
 800d762:	4b41      	ldr	r3, [pc, #260]	@ (800d868 <gc_normalize_block+0x130>)
 800d764:	7d9b      	ldrb	r3, [r3, #22]
 800d766:	f013 0f10 	tst.w	r3, #16
 800d76a:	d0f4      	beq.n	800d756 <gc_normalize_block+0x1e>
        *block = '\0';
 800d76c:	2300      	movs	r3, #0
 800d76e:	7023      	strb	r3, [r4, #0]
        return block;
 800d770:	4620      	mov	r0, r4
 800d772:	e076      	b.n	800d862 <gc_normalize_block+0x12a>
        block++;
 800d774:	3401      	adds	r4, #1
 800d776:	e7f0      	b.n	800d75a <gc_normalize_block+0x22>

        if(c > ' ') switch(c) {

            case ';':
                if(!comment) {
 800d778:	2e00      	cmp	r6, #0
 800d77a:	d147      	bne.n	800d80c <gc_normalize_block+0xd4>
                    *s1 = '\0';
 800d77c:	2300      	movs	r3, #0
 800d77e:	702b      	strb	r3, [r5, #0]
                    continue;
 800d780:	e050      	b.n	800d824 <gc_normalize_block+0xec>
                // TODO: generate error if a left parenthesis is found inside a comment...
                comment = s1;
                break;

            case ')':
                if(comment && !gc_state.skip_blocks) {
 800d782:	2e00      	cmp	r6, #0
 800d784:	d04d      	beq.n	800d822 <gc_normalize_block+0xea>
 800d786:	4b39      	ldr	r3, [pc, #228]	@ (800d86c <gc_normalize_block+0x134>)
 800d788:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d15f      	bne.n	800d850 <gc_normalize_block+0x118>
                    *s1 = '\0';
 800d790:	702b      	strb	r3, [r5, #0]
                    if(!hal.driver_cap.no_gcode_message_handling) {
 800d792:	4b37      	ldr	r3, [pc, #220]	@ (800d870 <gc_normalize_block+0x138>)
 800d794:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 800d798:	f013 0f04 	tst.w	r3, #4
 800d79c:	d106      	bne.n	800d7ac <gc_normalize_block+0x74>

                        size_t len = s1 - comment - 4;
 800d79e:	eba5 0906 	sub.w	r9, r5, r6
 800d7a2:	f1a9 0904 	sub.w	r9, r9, #4

                        if(message && *message == NULL && !strncmp(comment, "(MSG,", 5) && (*message = malloc(len))) {
 800d7a6:	b10f      	cbz	r7, 800d7ac <gc_normalize_block+0x74>
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	b14b      	cbz	r3, 800d7c0 <gc_normalize_block+0x88>
                            *comment = '\0'; // Do not generate grbl.on_gcode_comment event!
                        }
#endif // NGC_EXPRESSIONS_ENABLE
                    }

                    if(*comment && *message == NULL && grbl.on_gcode_comment)
 800d7ac:	7833      	ldrb	r3, [r6, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d050      	beq.n	800d854 <gc_normalize_block+0x11c>
 800d7b2:	f8d7 9000 	ldr.w	r9, [r7]
 800d7b6:	f1b9 0f00 	cmp.w	r9, #0
 800d7ba:	d01b      	beq.n	800d7f4 <gc_normalize_block+0xbc>
                        grbl.on_gcode_comment(comment);
                }
                comment = NULL;
 800d7bc:	2600      	movs	r6, #0
 800d7be:	e030      	b.n	800d822 <gc_normalize_block+0xea>
                        if(message && *message == NULL && !strncmp(comment, "(MSG,", 5) && (*message = malloc(len))) {
 800d7c0:	2205      	movs	r2, #5
 800d7c2:	492c      	ldr	r1, [pc, #176]	@ (800d874 <gc_normalize_block+0x13c>)
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	f017 fad6 	bl	8024d76 <strncmp>
 800d7ca:	2800      	cmp	r0, #0
 800d7cc:	d1ee      	bne.n	800d7ac <gc_normalize_block+0x74>
 800d7ce:	4648      	mov	r0, r9
 800d7d0:	f015 f9e4 	bl	8022b9c <malloc>
 800d7d4:	6038      	str	r0, [r7, #0]
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	d0e8      	beq.n	800d7ac <gc_normalize_block+0x74>
                            comment += 5;
 800d7da:	3605      	adds	r6, #5
                            while(*comment == ' ') {
 800d7dc:	e002      	b.n	800d7e4 <gc_normalize_block+0xac>
                                comment++;
 800d7de:	3601      	adds	r6, #1
                                len--;
 800d7e0:	f109 39ff 	add.w	r9, r9, #4294967295
                            while(*comment == ' ') {
 800d7e4:	7833      	ldrb	r3, [r6, #0]
 800d7e6:	2b20      	cmp	r3, #32
 800d7e8:	d0f9      	beq.n	800d7de <gc_normalize_block+0xa6>
                            memcpy(*message, comment, len);
 800d7ea:	464a      	mov	r2, r9
 800d7ec:	4631      	mov	r1, r6
 800d7ee:	f017 fbfe 	bl	8024fee <memcpy>
 800d7f2:	e7db      	b.n	800d7ac <gc_normalize_block+0x74>
                    if(*comment && *message == NULL && grbl.on_gcode_comment)
 800d7f4:	4b20      	ldr	r3, [pc, #128]	@ (800d878 <gc_normalize_block+0x140>)
 800d7f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d7fa:	b36b      	cbz	r3, 800d858 <gc_normalize_block+0x120>
                        grbl.on_gcode_comment(comment);
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	4798      	blx	r3
                comment = NULL;
 800d800:	464e      	mov	r6, r9
 800d802:	e00e      	b.n	800d822 <gc_normalize_block+0xea>
                break;

            default:
                if(comment == NULL)
                    *s2++ = CAPS(c);
 800d804:	461a      	mov	r2, r3
 800d806:	e020      	b.n	800d84a <gc_normalize_block+0x112>
        if(c > ' ') switch(c) {
 800d808:	462e      	mov	r6, r5

#if NGC_EXPRESSIONS_ENABLE
        if(comment && s1 - comment < (strncmp(comment, "(DEBU,", 5) ? 5 : 7))
            *s1 = CAPS(c);
#else
        if(comment && s1 - comment < 5)
 800d80a:	b156      	cbz	r6, 800d822 <gc_normalize_block+0xea>
 800d80c:	1baa      	subs	r2, r5, r6
 800d80e:	2a04      	cmp	r2, #4
 800d810:	dc07      	bgt.n	800d822 <gc_normalize_block+0xea>
            *s1 = CAPS(c);
 800d812:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d816:	b2d2      	uxtb	r2, r2
 800d818:	2a19      	cmp	r2, #25
 800d81a:	d801      	bhi.n	800d820 <gc_normalize_block+0xe8>
 800d81c:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 800d820:	702b      	strb	r3, [r5, #0]
#endif
        s1++;
 800d822:	3501      	adds	r5, #1
    while((c = *s1) != '\0') {
 800d824:	782b      	ldrb	r3, [r5, #0]
 800d826:	b1cb      	cbz	r3, 800d85c <gc_normalize_block+0x124>
        if(c > ' ') switch(c) {
 800d828:	2b20      	cmp	r3, #32
 800d82a:	d9ee      	bls.n	800d80a <gc_normalize_block+0xd2>
 800d82c:	2b29      	cmp	r3, #41	@ 0x29
 800d82e:	d0a8      	beq.n	800d782 <gc_normalize_block+0x4a>
 800d830:	2b3b      	cmp	r3, #59	@ 0x3b
 800d832:	d0a1      	beq.n	800d778 <gc_normalize_block+0x40>
 800d834:	2b28      	cmp	r3, #40	@ 0x28
 800d836:	d0e7      	beq.n	800d808 <gc_normalize_block+0xd0>
                if(comment == NULL)
 800d838:	2e00      	cmp	r6, #0
 800d83a:	d1e7      	bne.n	800d80c <gc_normalize_block+0xd4>
                    *s2++ = CAPS(c);
 800d83c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d840:	b2d2      	uxtb	r2, r2
 800d842:	2a19      	cmp	r2, #25
 800d844:	d8de      	bhi.n	800d804 <gc_normalize_block+0xcc>
 800d846:	f003 025f 	and.w	r2, r3, #95	@ 0x5f
 800d84a:	f808 2b01 	strb.w	r2, [r8], #1
 800d84e:	e7dc      	b.n	800d80a <gc_normalize_block+0xd2>
                comment = NULL;
 800d850:	2600      	movs	r6, #0
 800d852:	e7e6      	b.n	800d822 <gc_normalize_block+0xea>
 800d854:	2600      	movs	r6, #0
 800d856:	e7e4      	b.n	800d822 <gc_normalize_block+0xea>
 800d858:	464e      	mov	r6, r9
 800d85a:	e7e2      	b.n	800d822 <gc_normalize_block+0xea>
    }

    *s2 = '\0';
 800d85c:	f888 3000 	strb.w	r3, [r8]

    return block;
 800d860:	4620      	mov	r0, r4
}
 800d862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d866:	bf00      	nop
 800d868:	20001d70 	.word	0x20001d70
 800d86c:	200017c8 	.word	0x200017c8
 800d870:	20001a90 	.word	0x20001a90
 800d874:	0802b518 	.word	0x0802b518
 800d878:	20001c78 	.word	0x20001c78

0800d87c <gc_execute_block>:
// Parses and executes one block (line) of 0-terminated G-Code.
// In this function, all units and positions are converted and exported to internal functions
// in terms of (mm, mm/min) and absolute machine coordinates, respectively.

status_code_t gc_execute_block (char *block)
{
 800d87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d880:	ed2d 8b06 	vpush	{d8-d10}
 800d884:	b0a5      	sub	sp, #148	@ 0x94
       { &gc_block.values.xyz[Z_AXIS], ValueType_Float }
    };

#endif

    char *message = NULL;
 800d886:	2300      	movs	r3, #0
 800d888:	9323      	str	r3, [sp, #140]	@ 0x8c

    block = gc_normalize_block(block, &message);
 800d88a:	a923      	add	r1, sp, #140	@ 0x8c
 800d88c:	f7ff ff54 	bl	800d738 <gc_normalize_block>

    if(block[0] == '\0') {
 800d890:	7804      	ldrb	r4, [r0, #0]
 800d892:	2c00      	cmp	r4, #0
 800d894:	d02d      	beq.n	800d8f2 <gc_execute_block+0x76>
 800d896:	4606      	mov	r6, r0
    // Old comment from protocol.c:
    // NOTE: This maybe installed to tell grblHAL when a program is running vs manual input,
    // where, during a program, the system auto-cycle start will continue to execute
    // everything until the next '%' sign. This will help fix resuming issues with certain
    // functions that empty the planner buffer to execute its task on-time.
    if (block[0] == CMD_PROGRAM_DEMARCATION && block[1] == '\0') {
 800d898:	2c25      	cmp	r4, #37	@ 0x25
 800d89a:	d102      	bne.n	800d8a2 <gc_execute_block+0x26>
 800d89c:	7844      	ldrb	r4, [r0, #1]
 800d89e:	2c00      	cmp	r4, #0
 800d8a0:	d02e      	beq.n	800d900 <gc_execute_block+0x84>
     updates these modes and commands as the block line is parsed and will only be used and
     executed after successful error-checking. The parser block struct also contains a block
     values struct, word tracking variables, and a non-modal commands tracker for the new
     block. This struct contains all of the necessary information to execute the block. */

    memset(&gc_block, 0, sizeof(gc_block));                           // Initialize the parser block struct.
 800d8a2:	4c9c      	ldr	r4, [pc, #624]	@ (800db14 <gc_execute_block+0x298>)
 800d8a4:	22d4      	movs	r2, #212	@ 0xd4
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	f017 fa40 	bl	8024d2e <memset>
    memcpy(&gc_block.modal, &gc_state.modal, sizeof(gc_state.modal)); // Copy current modes
 800d8ae:	3408      	adds	r4, #8
 800d8b0:	4d99      	ldr	r5, [pc, #612]	@ (800db18 <gc_execute_block+0x29c>)
 800d8b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d8b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d8ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d8be:	682b      	ldr	r3, [r5, #0]
 800d8c0:	6023      	str	r3, [r4, #0]
    axis_command_t axis_command = AxisCommand_None;
    io_mcode_t port_command = (io_mcode_t)0;
    plane_t plane;

    // Initialize bitflag tracking variables for axis indices compatible operations.
    axes_signals_t axis_words = {0}; // XYZ tracking
 800d8c2:	f04f 0800 	mov.w	r8, #0
 800d8c6:	46c3      	mov	fp, r8
    ijk_words_t ijk_words = {0}; // IJK tracking
 800d8c8:	f8cd 8014 	str.w	r8, [sp, #20]

    // Initialize command and value words and parser flags variables.
    modal_groups_t command_words = {0};         // Bitfield for tracking G and M command words. Also used for modal group violations.
 800d8cc:	4647      	mov	r7, r8
    gc_parser_flags_t gc_parser_flags = {0};    // Parser flags for handling special cases.
    static parameter_words_t user_words = {0};  // User M-code words "taken"

    // Determine if the line is a jogging motion or a normal g-code block.
    if (block[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 800d8ce:	7833      	ldrb	r3, [r6, #0]
 800d8d0:	2b24      	cmp	r3, #36	@ 0x24
 800d8d2:	d023      	beq.n	800d91c <gc_execute_block+0xa0>
     STEP 2: Import all g-code words in the block. A g-code word is a letter followed by
     a number, which can either be a 'G'/'M' command or sets/assigns a command value. Also,
     perform initial error-checks for command word modal group violations, for any repeated
     words, and for negative values set for the value words F, N, P, T, and S. */

    uint_fast8_t char_counter = gc_parser_flags.jog_motion ? 3 /* Start parsing after `$J=` */ : 0;
 800d8d4:	f018 0f01 	tst.w	r8, #1
 800d8d8:	d12b      	bne.n	800d932 <gc_execute_block+0xb6>
 800d8da:	2300      	movs	r3, #0
 800d8dc:	9321      	str	r3, [sp, #132]	@ 0x84
    char letter;
    float value;
    uint32_t int_value = 0;
    uint_fast16_t mantissa = 0;
    bool is_user_mcode = false;
    word_bit_t word_bit = { .parameter = {0}, .modal_group = {0} }; // Bit-value for assigning tracking variables
 800d8de:	2300      	movs	r3, #0
 800d8e0:	931e      	str	r3, [sp, #120]	@ 0x78
 800d8e2:	931f      	str	r3, [sp, #124]	@ 0x7c
    bool is_user_mcode = false;
 800d8e4:	4699      	mov	r9, r3
    uint32_t int_value = 0;
 800d8e6:	461c      	mov	r4, r3
    io_mcode_t port_command = (io_mcode_t)0;
 800d8e8:	9306      	str	r3, [sp, #24]
    axis_command_t axis_command = AxisCommand_None;
 800d8ea:	469a      	mov	sl, r3
    bool set_tool = false, spindle_event = false;
 800d8ec:	9307      	str	r3, [sp, #28]

    while ((letter = block[char_counter++]) != '\0') { // Loop until no more g-code words in block.
 800d8ee:	f000 bc8b 	b.w	800e208 <gc_execute_block+0x98c>
        if(message)
 800d8f2:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	f000 809e 	beq.w	800da36 <gc_execute_block+0x1ba>
            gc_output_message(message);
 800d8fa:	f7ff fea9 	bl	800d650 <gc_output_message>
        return Status_OK;
 800d8fe:	e09a      	b.n	800da36 <gc_execute_block+0x1ba>
        gc_state.file_run = !gc_state.file_run;
 800d900:	4a85      	ldr	r2, [pc, #532]	@ (800db18 <gc_execute_block+0x29c>)
 800d902:	f892 307c 	ldrb.w	r3, [r2, #124]	@ 0x7c
 800d906:	f083 0301 	eor.w	r3, r3, #1
 800d90a:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
        if(message)
 800d90e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800d910:	2800      	cmp	r0, #0
 800d912:	f000 8090 	beq.w	800da36 <gc_execute_block+0x1ba>
            gc_output_message(message);
 800d916:	f7ff fe9b 	bl	800d650 <gc_output_message>
        return Status_OK;
 800d91a:	e08c      	b.n	800da36 <gc_execute_block+0x1ba>
        gc_parser_flags.jog_motion = On;
 800d91c:	f04f 0801 	mov.w	r8, #1
        gc_block.modal.motion = MotionMode_Linear;
 800d920:	f1a4 0338 	sub.w	r3, r4, #56	@ 0x38
 800d924:	2201      	movs	r2, #1
 800d926:	811a      	strh	r2, [r3, #8]
        gc_block.modal.feed_mode = FeedMode_UnitsPerMin;
 800d928:	f883 b00a 	strb.w	fp, [r3, #10]
        gc_block.modal.spindle.rpm_mode = SpindleSpeedMode_RPM;
 800d92c:	f883 b023 	strb.w	fp, [r3, #35]	@ 0x23
        gc_block.values.n = JOG_LINE_NUMBER; // Initialize default line number reported during jog.
 800d930:	e7d0      	b.n	800d8d4 <gc_execute_block+0x58>
    uint_fast8_t char_counter = gc_parser_flags.jog_motion ? 3 /* Start parsing after `$J=` */ : 0;
 800d932:	2303      	movs	r3, #3
 800d934:	e7d2      	b.n	800d8dc <gc_execute_block+0x60>
        if(!is_user_mcode && isnanf(value))
            FAIL(Status_BadNumberFormat);   // [Expected word value]

#else

        if((letter < 'A' && letter != '$') || letter > 'Z')
 800d936:	2d5a      	cmp	r5, #90	@ 0x5a
 800d938:	f240 8473 	bls.w	800e222 <gc_execute_block+0x9a6>
            FAIL(Status_ExpectedCommandLetter); // [Expected word letter]
 800d93c:	2401      	movs	r4, #1
 800d93e:	e07a      	b.n	800da36 <gc_execute_block+0x1ba>
        // accurate enough for value words that require integers to within 0.0001. This should be
        // a good enough compromise and catch most all non-integer errors. To make it compliant,
        // we would simply need to change the mantissa to int16, but this add compiled flash space.
        // Maybe update this later.
        if(isnan(value))
            mantissa = 0;
 800d940:	2100      	movs	r1, #0
 800d942:	f000 bc94 	b.w	800e26e <gc_execute_block+0x9f2>
             NOTE: Modal group numbers are defined in Table 4 of NIST RS274-NGC v3, pg.20 */

            case 'G': // Determine 'G' command and its modal group

                is_user_mcode = false;
                word_bit.modal_group.mask = 0;
 800d946:	2300      	movs	r3, #0
 800d948:	931f      	str	r3, [sp, #124]	@ 0x7c

                switch(int_value) {
 800d94a:	2c41      	cmp	r4, #65	@ 0x41
 800d94c:	d858      	bhi.n	800da00 <gc_execute_block+0x184>
 800d94e:	2c41      	cmp	r4, #65	@ 0x41
 800d950:	f203 8545 	bhi.w	80113de <gc_execute_block+0x3b62>
 800d954:	e8df f014 	tbh	[pc, r4, lsl #1]
 800d958:	00f200f2 	.word	0x00f200f2
 800d95c:	00f200f2 	.word	0x00f200f2
 800d960:	00f20090 	.word	0x00f20090
 800d964:	00771d43 	.word	0x00771d43
 800d968:	1d430077 	.word	0x1d430077
 800d96c:	1d430089 	.word	0x1d430089
 800d970:	1d431d43 	.word	0x1d431d43
 800d974:	1d431d43 	.word	0x1d431d43
 800d978:	01351d43 	.word	0x01351d43
 800d97c:	01350135 	.word	0x01350135
 800d980:	01720172 	.word	0x01720172
 800d984:	1d431d43 	.word	0x1d431d43
 800d988:	1d431d43 	.word	0x1d431d43
 800d98c:	1d431d43 	.word	0x1d431d43
 800d990:	1d430089 	.word	0x1d430089
 800d994:	1d430089 	.word	0x1d430089
 800d998:	00b71d43 	.word	0x00b71d43
 800d99c:	1d431d43 	.word	0x1d431d43
 800d9a0:	1d431d43 	.word	0x1d431d43
 800d9a4:	1d4300cc 	.word	0x1d4300cc
 800d9a8:	1d43017f 	.word	0x1d43017f
 800d9ac:	01861d43 	.word	0x01861d43
 800d9b0:	1d431d43 	.word	0x1d431d43
 800d9b4:	1d431d43 	.word	0x1d431d43
 800d9b8:	01861d43 	.word	0x01861d43
 800d9bc:	024d024d 	.word	0x024d024d
 800d9c0:	00901d43 	.word	0x00901d43
 800d9c4:	01b401b4 	.word	0x01b401b4
 800d9c8:	01b401b4 	.word	0x01b401b4
 800d9cc:	01b401b4 	.word	0x01b401b4
 800d9d0:	020f1d43 	.word	0x020f1d43
 800d9d4:	1d431d43 	.word	0x1d431d43
 800d9d8:	021a1d43 	.word	0x021a1d43
 800d9dc:	f1a4 0249 	sub.w	r2, r4, #73	@ 0x49
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	4093      	lsls	r3, r2
 800d9e4:	4a4d      	ldr	r2, [pc, #308]	@ (800db1c <gc_execute_block+0x2a0>)
 800d9e6:	401a      	ands	r2, r3
 800d9e8:	2a00      	cmp	r2, #0
 800d9ea:	f040 80d0 	bne.w	800db8e <gc_execute_block+0x312>
 800d9ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d9f2:	f040 80a9 	bne.w	800db48 <gc_execute_block+0x2cc>
 800d9f6:	f013 0f08 	tst.w	r3, #8
 800d9fa:	d164      	bne.n	800dac6 <gc_execute_block+0x24a>
 800d9fc:	2414      	movs	r4, #20
 800d9fe:	e01a      	b.n	800da36 <gc_execute_block+0x1ba>
 800da00:	2c59      	cmp	r4, #89	@ 0x59
 800da02:	d915      	bls.n	800da30 <gc_execute_block+0x1b4>
 800da04:	2c63      	cmp	r4, #99	@ 0x63
 800da06:	f203 84ed 	bhi.w	80113e4 <gc_execute_block+0x3b68>
 800da0a:	2c5a      	cmp	r4, #90	@ 0x5a
 800da0c:	d319      	bcc.n	800da42 <gc_execute_block+0x1c6>
 800da0e:	f1a4 035a 	sub.w	r3, r4, #90	@ 0x5a
 800da12:	2b09      	cmp	r3, #9
 800da14:	f203 84e0 	bhi.w	80113d8 <gc_execute_block+0x3b5c>
 800da18:	e8df f013 	tbh	[pc, r3, lsl #1]
 800da1c:	00de00de 	.word	0x00de00de
 800da20:	00fa0027 	.word	0x00fa0027
 800da24:	010600fa 	.word	0x010600fa
 800da28:	01cb01cb 	.word	0x01cb01cb
 800da2c:	01df01df 	.word	0x01df01df
 800da30:	2c49      	cmp	r4, #73	@ 0x49
 800da32:	d2d3      	bcs.n	800d9dc <gc_execute_block+0x160>
 800da34:	2414      	movs	r4, #20
#endif

    // TODO: % to denote start of program.

    return Status_OK;
}
 800da36:	4620      	mov	r0, r4
 800da38:	b025      	add	sp, #148	@ 0x94
 800da3a:	ecbd 8b06 	vpop	{d8-d10}
 800da3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da42:	2414      	movs	r4, #20
 800da44:	e7f7      	b.n	800da36 <gc_execute_block+0x1ba>
                        if(settings.mode == Mode_Lathe) {
 800da46:	4b36      	ldr	r3, [pc, #216]	@ (800db20 <gc_execute_block+0x2a4>)
 800da48:	7e1b      	ldrb	r3, [r3, #24]
 800da4a:	2b02      	cmp	r3, #2
 800da4c:	f043 84cd 	bne.w	80113ea <gc_execute_block+0x3b6e>
                            word_bit.modal_group.G15 = On;
 800da50:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800da54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da58:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                            gc_block.modal.diameter_mode = int_value == 7; // TODO: find specs for implementation, only affects X calculation? reporting? current position?
 800da5c:	2c07      	cmp	r4, #7
 800da5e:	bf14      	ite	ne
 800da60:	2200      	movne	r2, #0
 800da62:	2201      	moveq	r2, #1
 800da64:	4b2b      	ldr	r3, [pc, #172]	@ (800db14 <gc_execute_block+0x298>)
 800da66:	735a      	strb	r2, [r3, #13]
                        break;
 800da68:	e07c      	b.n	800db64 <gc_execute_block+0x2e8>
                        if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 800da6a:	b929      	cbnz	r1, 800da78 <gc_execute_block+0x1fc>
                            if (axis_command)
 800da6c:	f1ba 0f00 	cmp.w	sl, #0
 800da70:	f043 84be 	bne.w	80113f0 <gc_execute_block+0x3b74>
                            axis_command = AxisCommand_NonModal;
 800da74:	f04f 0a01 	mov.w	sl, #1
                        word_bit.modal_group.G0 = On;
 800da78:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800da7c:	f043 0301 	orr.w	r3, r3, #1
 800da80:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.non_modal_command = (non_modal_t)int_value;
 800da84:	b2e3      	uxtb	r3, r4
 800da86:	4a23      	ldr	r2, [pc, #140]	@ (800db14 <gc_execute_block+0x298>)
 800da88:	7013      	strb	r3, [r2, #0]
                        if ((int_value == 28) || (int_value == 30)) {
 800da8a:	2c1c      	cmp	r4, #28
 800da8c:	d00d      	beq.n	800daaa <gc_execute_block+0x22e>
 800da8e:	2c1e      	cmp	r4, #30
 800da90:	d00b      	beq.n	800daaa <gc_execute_block+0x22e>
                        } else if (int_value == 92) {
 800da92:	2c5c      	cmp	r4, #92	@ 0x5c
 800da94:	d166      	bne.n	800db64 <gc_execute_block+0x2e8>
                            if (!((mantissa == 0) || (mantissa == 10) || (mantissa == 20) || (mantissa == 30)))
 800da96:	291e      	cmp	r1, #30
 800da98:	f203 84b0 	bhi.w	80113fc <gc_execute_block+0x3b80>
 800da9c:	4a21      	ldr	r2, [pc, #132]	@ (800db24 <gc_execute_block+0x2a8>)
 800da9e:	40ca      	lsrs	r2, r1
 800daa0:	f012 0f01 	tst.w	r2, #1
 800daa4:	d10a      	bne.n	800dabc <gc_execute_block+0x240>
                        } else if (int_value == 92) {
 800daa6:	2414      	movs	r4, #20
 800daa8:	e7c5      	b.n	800da36 <gc_execute_block+0x1ba>
                            if (!((mantissa == 0) || (mantissa == 10)))
 800daaa:	b111      	cbz	r1, 800dab2 <gc_execute_block+0x236>
 800daac:	290a      	cmp	r1, #10
 800daae:	f043 84a2 	bne.w	80113f6 <gc_execute_block+0x3b7a>
                            gc_block.non_modal_command += mantissa;
 800dab2:	440b      	add	r3, r1
 800dab4:	4a17      	ldr	r2, [pc, #92]	@ (800db14 <gc_execute_block+0x298>)
 800dab6:	7013      	strb	r3, [r2, #0]
                            mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800dab8:	2100      	movs	r1, #0
 800daba:	e053      	b.n	800db64 <gc_execute_block+0x2e8>
                            gc_block.non_modal_command += mantissa;
 800dabc:	440b      	add	r3, r1
 800dabe:	4a15      	ldr	r2, [pc, #84]	@ (800db14 <gc_execute_block+0x298>)
 800dac0:	7013      	strb	r3, [r2, #0]
                            mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800dac2:	2100      	movs	r1, #0
 800dac4:	e04e      	b.n	800db64 <gc_execute_block+0x2e8>
                        if(mantissa != 0)
 800dac6:	2900      	cmp	r1, #0
 800dac8:	f043 849b 	bne.w	8011402 <gc_execute_block+0x3b86>
                        if (axis_command)
 800dacc:	f1ba 0f00 	cmp.w	sl, #0
 800dad0:	f043 849a 	bne.w	8011408 <gc_execute_block+0x3b8c>
                        word_bit.modal_group.G1 = On;
 800dad4:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800dad8:	f043 0302 	orr.w	r3, r3, #2
 800dadc:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.motion = (motion_mode_t)int_value;
 800dae0:	4b0c      	ldr	r3, [pc, #48]	@ (800db14 <gc_execute_block+0x298>)
 800dae2:	811c      	strh	r4, [r3, #8]
                        gc_block.modal.canned_cycle_active = false;
 800dae4:	2200      	movs	r2, #0
 800dae6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
                        axis_command = AxisCommand_MotionMode;
 800daea:	f04f 0a02 	mov.w	sl, #2
                        break;
 800daee:	e039      	b.n	800db64 <gc_execute_block+0x2e8>
                        if(!(hal.probe.get_state && ((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))))
 800daf0:	4b0d      	ldr	r3, [pc, #52]	@ (800db28 <gc_execute_block+0x2ac>)
 800daf2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	f003 8489 	beq.w	801140e <gc_execute_block+0x3b92>
 800dafc:	f1a1 0214 	sub.w	r2, r1, #20
 800db00:	2a1e      	cmp	r2, #30
 800db02:	f203 8487 	bhi.w	8011414 <gc_execute_block+0x3b98>
 800db06:	4b07      	ldr	r3, [pc, #28]	@ (800db24 <gc_execute_block+0x2a8>)
 800db08:	40d3      	lsrs	r3, r2
 800db0a:	f013 0f01 	tst.w	r3, #1
 800db0e:	d10d      	bne.n	800db2c <gc_execute_block+0x2b0>
 800db10:	2414      	movs	r4, #20
 800db12:	e790      	b.n	800da36 <gc_execute_block+0x1ba>
 800db14:	200016c0 	.word	0x200016c0
 800db18:	200017c8 	.word	0x200017c8
 800db1c:	00013701 	.word	0x00013701
 800db20:	200024a8 	.word	0x200024a8
 800db24:	40100401 	.word	0x40100401
 800db28:	20001a90 	.word	0x20001a90
                        int_value += (mantissa / 10) + 100;
 800db2c:	4bb9      	ldr	r3, [pc, #740]	@ (800de14 <gc_execute_block+0x598>)
 800db2e:	fba3 2301 	umull	r2, r3, r3, r1
 800db32:	eb04 03d3 	add.w	r3, r4, r3, lsr #3
 800db36:	f103 0464 	add.w	r4, r3, #100	@ 0x64
                        mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800db3a:	2100      	movs	r1, #0
                        if (axis_command)
 800db3c:	f1ba 0f00 	cmp.w	sl, #0
 800db40:	f043 846b 	bne.w	801141a <gc_execute_block+0x3b9e>
                        axis_command = AxisCommand_MotionMode;
 800db44:	f04f 0a02 	mov.w	sl, #2
                        word_bit.modal_group.G1 = On;
 800db48:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800db4c:	f043 0302 	orr.w	r3, r3, #2
 800db50:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        if(int_value == 5 && mantissa != 0) {
 800db54:	2c05      	cmp	r4, #5
 800db56:	d010      	beq.n	800db7a <gc_execute_block+0x2fe>
                            gc_block.modal.motion = (motion_mode_t)int_value;
 800db58:	4baf      	ldr	r3, [pc, #700]	@ (800de18 <gc_execute_block+0x59c>)
 800db5a:	811c      	strh	r4, [r3, #8]
                        gc_block.modal.canned_cycle_active = false;
 800db5c:	4bae      	ldr	r3, [pc, #696]	@ (800de18 <gc_execute_block+0x59c>)
 800db5e:	2200      	movs	r2, #0
 800db60:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
                if (mantissa > 0)
 800db64:	2900      	cmp	r1, #0
 800db66:	f043 8476 	bne.w	8011456 <gc_execute_block+0x3bda>
                if (command_words.mask & word_bit.modal_group.mask)
 800db6a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800db6c:	421f      	tst	r7, r3
 800db6e:	f043 8475 	bne.w	801145c <gc_execute_block+0x3be0>
                command_words.mask |= word_bit.modal_group.mask;
 800db72:	431f      	orrs	r7, r3
                is_user_mcode = false;
 800db74:	f04f 0900 	mov.w	r9, #0
                break;
 800db78:	e346      	b.n	800e208 <gc_execute_block+0x98c>
                        if(int_value == 5 && mantissa != 0) {
 800db7a:	2900      	cmp	r1, #0
 800db7c:	d0ec      	beq.n	800db58 <gc_execute_block+0x2dc>
                            if(mantissa == 10) {
 800db7e:	290a      	cmp	r1, #10
 800db80:	f043 844e 	bne.w	8011420 <gc_execute_block+0x3ba4>
                                gc_block.modal.motion = MotionMode_QuadraticSpline;
 800db84:	4ba4      	ldr	r3, [pc, #656]	@ (800de18 <gc_execute_block+0x59c>)
 800db86:	2233      	movs	r2, #51	@ 0x33
 800db88:	811a      	strh	r2, [r3, #8]
                                mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800db8a:	2100      	movs	r1, #0
                            if(mantissa == 10) {
 800db8c:	e7e6      	b.n	800db5c <gc_execute_block+0x2e0>
                        if (axis_command)
 800db8e:	f1ba 0f00 	cmp.w	sl, #0
 800db92:	f043 8448 	bne.w	8011426 <gc_execute_block+0x3baa>
                        word_bit.modal_group.G1 = On;
 800db96:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800db9a:	f043 0302 	orr.w	r3, r3, #2
 800db9e:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.canned_cycle_active = true;
 800dba2:	4a9d      	ldr	r2, [pc, #628]	@ (800de18 <gc_execute_block+0x59c>)
 800dba4:	2301      	movs	r3, #1
 800dba6:	f882 3027 	strb.w	r3, [r2, #39]	@ 0x27
                        gc_block.modal.motion = (motion_mode_t)int_value;
 800dbaa:	b2a3      	uxth	r3, r4
 800dbac:	8113      	strh	r3, [r2, #8]
                        gc_parser_flags.canned_cycle_change = gc_block.modal.motion != gc_state.modal.motion;
 800dbae:	4a9b      	ldr	r2, [pc, #620]	@ (800de1c <gc_execute_block+0x5a0>)
 800dbb0:	8812      	ldrh	r2, [r2, #0]
 800dbb2:	1a9b      	subs	r3, r3, r2
 800dbb4:	bf18      	it	ne
 800dbb6:	2301      	movne	r3, #1
 800dbb8:	f363 0841 	bfi	r8, r3, #1, #1
                        axis_command = AxisCommand_MotionMode;
 800dbbc:	f04f 0a02 	mov.w	sl, #2
                        break;
 800dbc0:	e7d0      	b.n	800db64 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G2 = On;
 800dbc2:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800dbc6:	f043 0304 	orr.w	r3, r3, #4
 800dbca:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.plane_select = (plane_select_t)(int_value - 17);
 800dbce:	b2e3      	uxtb	r3, r4
 800dbd0:	3b11      	subs	r3, #17
 800dbd2:	4a91      	ldr	r2, [pc, #580]	@ (800de18 <gc_execute_block+0x59c>)
 800dbd4:	7393      	strb	r3, [r2, #14]
                        break;
 800dbd6:	e7c5      	b.n	800db64 <gc_execute_block+0x2e8>
                        if (mantissa == 0) {
 800dbd8:	b961      	cbnz	r1, 800dbf4 <gc_execute_block+0x378>
                            word_bit.modal_group.G3 = On;
 800dbda:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800dbde:	f043 0308 	orr.w	r3, r3, #8
 800dbe2:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                            gc_block.modal.distance_incremental = int_value == 91;
 800dbe6:	2c5b      	cmp	r4, #91	@ 0x5b
 800dbe8:	bf14      	ite	ne
 800dbea:	2200      	movne	r2, #0
 800dbec:	2201      	moveq	r2, #1
 800dbee:	4b8a      	ldr	r3, [pc, #552]	@ (800de18 <gc_execute_block+0x59c>)
 800dbf0:	731a      	strb	r2, [r3, #12]
 800dbf2:	e7b7      	b.n	800db64 <gc_execute_block+0x2e8>
                            word_bit.modal_group.G4 = On;
 800dbf4:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800dbf8:	f043 0310 	orr.w	r3, r3, #16
 800dbfc:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                            if ((mantissa != 10) || (int_value == 90))
 800dc00:	290a      	cmp	r1, #10
 800dc02:	f043 8413 	bne.w	801142c <gc_execute_block+0x3bb0>
 800dc06:	2c5a      	cmp	r4, #90	@ 0x5a
 800dc08:	f003 8413 	beq.w	8011432 <gc_execute_block+0x3bb6>
                            mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800dc0c:	2100      	movs	r1, #0
 800dc0e:	e7a9      	b.n	800db64 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G5 = On;
 800dc10:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800dc14:	f043 0320 	orr.w	r3, r3, #32
 800dc18:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.feed_mode = (feed_mode_t)(94 - int_value);
 800dc1c:	b2e3      	uxtb	r3, r4
 800dc1e:	f1c3 035e 	rsb	r3, r3, #94	@ 0x5e
 800dc22:	4a7d      	ldr	r2, [pc, #500]	@ (800de18 <gc_execute_block+0x59c>)
 800dc24:	7293      	strb	r3, [r2, #10]
                        break;
 800dc26:	e79d      	b.n	800db64 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G5 = On;
 800dc28:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800dc2c:	f043 0320 	orr.w	r3, r3, #32
 800dc30:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.feed_mode = FeedMode_UnitsPerRev;
 800dc34:	4b78      	ldr	r3, [pc, #480]	@ (800de18 <gc_execute_block+0x59c>)
 800dc36:	2202      	movs	r2, #2
 800dc38:	729a      	strb	r2, [r3, #10]
                        break;
 800dc3a:	e793      	b.n	800db64 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G6 = On;
 800dc3c:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800dc40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc44:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.units_imperial = int_value == 20;
 800dc48:	2c14      	cmp	r4, #20
 800dc4a:	bf14      	ite	ne
 800dc4c:	2200      	movne	r2, #0
 800dc4e:	2201      	moveq	r2, #1
 800dc50:	4b71      	ldr	r3, [pc, #452]	@ (800de18 <gc_execute_block+0x59c>)
 800dc52:	72da      	strb	r2, [r3, #11]
                        break;
 800dc54:	e786      	b.n	800db64 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G7 = On;
 800dc56:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800dc5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc5e:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        break;
 800dc62:	e77f      	b.n	800db64 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G8 = On;
 800dc64:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800dc68:	f043 0301 	orr.w	r3, r3, #1
 800dc6c:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        if(int_value == 49) // G49
 800dc70:	2c31      	cmp	r4, #49	@ 0x31
 800dc72:	d007      	beq.n	800dc84 <gc_execute_block+0x408>
                        else if(mantissa == 0 && grbl.tool_table.n_tools) // G43
 800dc74:	b959      	cbnz	r1, 800dc8e <gc_execute_block+0x412>
 800dc76:	4b6a      	ldr	r3, [pc, #424]	@ (800de20 <gc_execute_block+0x5a4>)
 800dc78:	699b      	ldr	r3, [r3, #24]
 800dc7a:	b143      	cbz	r3, 800dc8e <gc_execute_block+0x412>
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_Enable;
 800dc7c:	4b66      	ldr	r3, [pc, #408]	@ (800de18 <gc_execute_block+0x59c>)
 800dc7e:	2201      	movs	r2, #1
 800dc80:	73da      	strb	r2, [r3, #15]
 800dc82:	e76f      	b.n	800db64 <gc_execute_block+0x2e8>
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_Cancel;
 800dc84:	2300      	movs	r3, #0
 800dc86:	4a64      	ldr	r2, [pc, #400]	@ (800de18 <gc_execute_block+0x59c>)
 800dc88:	73d3      	strb	r3, [r2, #15]
                        mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	e76a      	b.n	800db64 <gc_execute_block+0x2e8>
                        else if(mantissa == 20 && grbl.tool_table.n_tools) // G43.2
 800dc8e:	2914      	cmp	r1, #20
 800dc90:	d00d      	beq.n	800dcae <gc_execute_block+0x432>
                        else if(mantissa == 10) { // G43.1
 800dc92:	290a      	cmp	r1, #10
 800dc94:	f043 83d0 	bne.w	8011438 <gc_execute_block+0x3bbc>
                            if(axis_command)
 800dc98:	f1ba 0f00 	cmp.w	sl, #0
 800dc9c:	f043 83cf 	bne.w	801143e <gc_execute_block+0x3bc2>
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_EnableDynamic;
 800dca0:	4b5d      	ldr	r3, [pc, #372]	@ (800de18 <gc_execute_block+0x59c>)
 800dca2:	2202      	movs	r2, #2
 800dca4:	73da      	strb	r2, [r3, #15]
                        mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800dca6:	2100      	movs	r1, #0
                            axis_command = AxisCommand_ToolLengthOffset;
 800dca8:	f04f 0a03 	mov.w	sl, #3
 800dcac:	e75a      	b.n	800db64 <gc_execute_block+0x2e8>
                        else if(mantissa == 20 && grbl.tool_table.n_tools) // G43.2
 800dcae:	4b5c      	ldr	r3, [pc, #368]	@ (800de20 <gc_execute_block+0x5a4>)
 800dcb0:	699b      	ldr	r3, [r3, #24]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d0ed      	beq.n	800dc92 <gc_execute_block+0x416>
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_ApplyAdditional;
 800dcb6:	4b58      	ldr	r3, [pc, #352]	@ (800de18 <gc_execute_block+0x59c>)
 800dcb8:	2203      	movs	r2, #3
 800dcba:	73da      	strb	r2, [r3, #15]
                        mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800dcbc:	2100      	movs	r1, #0
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_ApplyAdditional;
 800dcbe:	e751      	b.n	800db64 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G12 = On;
 800dcc0:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800dcc4:	f043 0308 	orr.w	r3, r3, #8
 800dcc8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        gc_block.modal.coord_system.id = (coord_system_id_t)(int_value - 54); // Shift to array indexing.
 800dccc:	b2e2      	uxtb	r2, r4
 800dcce:	3a36      	subs	r2, #54	@ 0x36
 800dcd0:	b2d2      	uxtb	r2, r2
 800dcd2:	4b51      	ldr	r3, [pc, #324]	@ (800de18 <gc_execute_block+0x59c>)
 800dcd4:	771a      	strb	r2, [r3, #28]
                        if(int_value == 59 && mantissa > 0) {
 800dcd6:	2c3b      	cmp	r4, #59	@ 0x3b
 800dcd8:	f47f af44 	bne.w	800db64 <gc_execute_block+0x2e8>
 800dcdc:	291e      	cmp	r1, #30
 800dcde:	f203 83b1 	bhi.w	8011444 <gc_execute_block+0x3bc8>
 800dce2:	a301      	add	r3, pc, #4	@ (adr r3, 800dce8 <gc_execute_block+0x46c>)
 800dce4:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800dce8:	0800db65 	.word	0x0800db65
 800dcec:	08011445 	.word	0x08011445
 800dcf0:	08011445 	.word	0x08011445
 800dcf4:	08011445 	.word	0x08011445
 800dcf8:	08011445 	.word	0x08011445
 800dcfc:	08011445 	.word	0x08011445
 800dd00:	08011445 	.word	0x08011445
 800dd04:	08011445 	.word	0x08011445
 800dd08:	08011445 	.word	0x08011445
 800dd0c:	08011445 	.word	0x08011445
 800dd10:	0800dd65 	.word	0x0800dd65
 800dd14:	08011445 	.word	0x08011445
 800dd18:	08011445 	.word	0x08011445
 800dd1c:	08011445 	.word	0x08011445
 800dd20:	08011445 	.word	0x08011445
 800dd24:	08011445 	.word	0x08011445
 800dd28:	08011445 	.word	0x08011445
 800dd2c:	08011445 	.word	0x08011445
 800dd30:	08011445 	.word	0x08011445
 800dd34:	08011445 	.word	0x08011445
 800dd38:	0800dd65 	.word	0x0800dd65
 800dd3c:	08011445 	.word	0x08011445
 800dd40:	08011445 	.word	0x08011445
 800dd44:	08011445 	.word	0x08011445
 800dd48:	08011445 	.word	0x08011445
 800dd4c:	08011445 	.word	0x08011445
 800dd50:	08011445 	.word	0x08011445
 800dd54:	08011445 	.word	0x08011445
 800dd58:	08011445 	.word	0x08011445
 800dd5c:	08011445 	.word	0x08011445
 800dd60:	0800dd65 	.word	0x0800dd65
                                gc_block.modal.coord_system.id += mantissa / 10;
 800dd64:	4b2b      	ldr	r3, [pc, #172]	@ (800de14 <gc_execute_block+0x598>)
 800dd66:	fba3 1301 	umull	r1, r3, r3, r1
 800dd6a:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 800dd6e:	4b2a      	ldr	r3, [pc, #168]	@ (800de18 <gc_execute_block+0x59c>)
 800dd70:	771a      	strb	r2, [r3, #28]
                                mantissa = 0;
 800dd72:	2100      	movs	r1, #0
 800dd74:	e6f6      	b.n	800db64 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G13 = On;
 800dd76:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800dd7a:	f043 0310 	orr.w	r3, r3, #16
 800dd7e:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        if (mantissa != 0) // [G61.1 not supported]
 800dd82:	2900      	cmp	r1, #0
 800dd84:	f43f aeee 	beq.w	800db64 <gc_execute_block+0x2e8>
                            FAIL(Status_GcodeUnsupportedCommand);
 800dd88:	2414      	movs	r4, #20
 800dd8a:	e654      	b.n	800da36 <gc_execute_block+0x1ba>
                        word_bit.modal_group.G0 = On;
 800dd8c:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800dd90:	f043 0301 	orr.w	r3, r3, #1
 800dd94:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.non_modal_command = (non_modal_t)int_value;
 800dd98:	4b1f      	ldr	r3, [pc, #124]	@ (800de18 <gc_execute_block+0x59c>)
 800dd9a:	701c      	strb	r4, [r3, #0]
                        if(mantissa != 0 || grbl.on_macro_execute == NULL)
 800dd9c:	2900      	cmp	r1, #0
 800dd9e:	f043 8354 	bne.w	801144a <gc_execute_block+0x3bce>
 800dda2:	4b1f      	ldr	r3, [pc, #124]	@ (800de20 <gc_execute_block+0x5a4>)
 800dda4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	f47f aedb 	bne.w	800db64 <gc_execute_block+0x2e8>
                            FAIL(Status_GcodeUnsupportedCommand);
 800ddae:	2414      	movs	r4, #20
 800ddb0:	e641      	b.n	800da36 <gc_execute_block+0x1ba>
                        if(settings.mode == Mode_Lathe) {
 800ddb2:	4b1c      	ldr	r3, [pc, #112]	@ (800de24 <gc_execute_block+0x5a8>)
 800ddb4:	7e1b      	ldrb	r3, [r3, #24]
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	f043 834a 	bne.w	8011450 <gc_execute_block+0x3bd4>
                            word_bit.modal_group.G14 = On;
 800ddbc:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800ddc0:	f043 0320 	orr.w	r3, r3, #32
 800ddc4:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                            gc_block.modal.spindle.rpm_mode = (spindle_rpm_mode_t)((int_value - 96) ^ 1);
 800ddc8:	f1a4 0360 	sub.w	r3, r4, #96	@ 0x60
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	f083 0301 	eor.w	r3, r3, #1
 800ddd2:	4a11      	ldr	r2, [pc, #68]	@ (800de18 <gc_execute_block+0x59c>)
 800ddd4:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
                        break;
 800ddd8:	e6c4      	b.n	800db64 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G10 = On;
 800ddda:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800ddde:	f043 0302 	orr.w	r3, r3, #2
 800dde2:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        gc_block.modal.retract_mode = (cc_retract_mode_t)(int_value - 98);
 800dde6:	b2e3      	uxtb	r3, r4
 800dde8:	3b62      	subs	r3, #98	@ 0x62
 800ddea:	4a0b      	ldr	r2, [pc, #44]	@ (800de18 <gc_execute_block+0x59c>)
 800ddec:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
                        break;
 800ddf0:	e6b8      	b.n	800db64 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G11 = On;
 800ddf2:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800ddf6:	f043 0304 	orr.w	r3, r3, #4
 800ddfa:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        gc_block.modal.scaling_active = int_value == 51;
 800ddfe:	2c33      	cmp	r4, #51	@ 0x33
 800de00:	bf14      	ite	ne
 800de02:	2200      	movne	r2, #0
 800de04:	2201      	moveq	r2, #1
 800de06:	4b04      	ldr	r3, [pc, #16]	@ (800de18 <gc_execute_block+0x59c>)
 800de08:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                        axis_command = AxisCommand_Scaling;
 800de0c:	f04f 0a04 	mov.w	sl, #4
                        break;
 800de10:	e6a8      	b.n	800db64 <gc_execute_block+0x2e8>
 800de12:	bf00      	nop
 800de14:	cccccccd 	.word	0xcccccccd
 800de18:	200016c0 	.word	0x200016c0
 800de1c:	200017c8 	.word	0x200017c8
 800de20:	20001c78 	.word	0x20001c78
 800de24:	200024a8 	.word	0x200024a8
                if(gc_block.non_modal_command == NonModal_MacroCall) {
 800de28:	4ba4      	ldr	r3, [pc, #656]	@ (800e0bc <gc_execute_block+0x840>)
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	2b41      	cmp	r3, #65	@ 0x41
 800de2e:	d06d      	beq.n	800df0c <gc_execute_block+0x690>
                if(mantissa > 0)
 800de30:	2900      	cmp	r1, #0
 800de32:	f043 8319 	bne.w	8011468 <gc_execute_block+0x3bec>
                word_bit.modal_group.mask = 0;
 800de36:	2300      	movs	r3, #0
 800de38:	931f      	str	r3, [sp, #124]	@ 0x7c
                switch(int_value) {
 800de3a:	2c63      	cmp	r4, #99	@ 0x63
 800de3c:	f200 81b0 	bhi.w	800e1a0 <gc_execute_block+0x924>
 800de40:	e8df f014 	tbh	[pc, r4, lsl #1]
 800de44:	00750075 	.word	0x00750075
 800de48:	00af0075 	.word	0x00af0075
 800de4c:	00af00af 	.word	0x00af00af
 800de50:	00ec00d2 	.word	0x00ec00d2
 800de54:	00ec00ec 	.word	0x00ec00ec
 800de58:	01ae01ae 	.word	0x01ae01ae
 800de5c:	01ae01ae 	.word	0x01ae01ae
 800de60:	01ae01ae 	.word	0x01ae01ae
 800de64:	01ae01ae 	.word	0x01ae01ae
 800de68:	01ae01ae 	.word	0x01ae01ae
 800de6c:	01ae01ae 	.word	0x01ae01ae
 800de70:	01ae01ae 	.word	0x01ae01ae
 800de74:	01ae01ae 	.word	0x01ae01ae
 800de78:	01ae01ae 	.word	0x01ae01ae
 800de7c:	01ae01ae 	.word	0x01ae01ae
 800de80:	01ae0075 	.word	0x01ae0075
 800de84:	01ae01ae 	.word	0x01ae01ae
 800de88:	01ae01ae 	.word	0x01ae01ae
 800de8c:	01ae01ae 	.word	0x01ae01ae
 800de90:	01ae01ae 	.word	0x01ae01ae
 800de94:	01ae01ae 	.word	0x01ae01ae
 800de98:	01ae01ae 	.word	0x01ae01ae
 800de9c:	01ae01ae 	.word	0x01ae01ae
 800dea0:	01ae01ae 	.word	0x01ae01ae
 800dea4:	012c012c 	.word	0x012c012c
 800dea8:	012c012c 	.word	0x012c012c
 800deac:	012c01ae 	.word	0x012c01ae
 800deb0:	01ae01ae 	.word	0x01ae01ae
 800deb4:	01ae0125 	.word	0x01ae0125
 800deb8:	01ae01ae 	.word	0x01ae01ae
 800debc:	01440075 	.word	0x01440075
 800dec0:	014f014f 	.word	0x014f014f
 800dec4:	014f014f 	.word	0x014f014f
 800dec8:	017e0166 	.word	0x017e0166
 800decc:	01ae017e 	.word	0x01ae017e
 800ded0:	01950195 	.word	0x01950195
 800ded4:	01950195 	.word	0x01950195
 800ded8:	01ae01ae 	.word	0x01ae01ae
 800dedc:	01ae01ae 	.word	0x01ae01ae
 800dee0:	01ae01ae 	.word	0x01ae01ae
 800dee4:	01ae01ae 	.word	0x01ae01ae
 800dee8:	01ae01ae 	.word	0x01ae01ae
 800deec:	01ae01ae 	.word	0x01ae01ae
 800def0:	01ae01ae 	.word	0x01ae01ae
 800def4:	01ae01ae 	.word	0x01ae01ae
 800def8:	01ae01ae 	.word	0x01ae01ae
 800defc:	01ae01ae 	.word	0x01ae01ae
 800df00:	01ae01ae 	.word	0x01ae01ae
 800df04:	01ae01ae 	.word	0x01ae01ae
 800df08:	019b01ae 	.word	0x019b01ae
                    if(gc_block.words.m)
 800df0c:	4b6b      	ldr	r3, [pc, #428]	@ (800e0bc <gc_execute_block+0x840>)
 800df0e:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800df12:	f013 0f20 	tst.w	r3, #32
 800df16:	f043 82a4 	bne.w	8011462 <gc_execute_block+0x3be6>
                    gc_block.values.m = value;
 800df1a:	4b68      	ldr	r3, [pc, #416]	@ (800e0bc <gc_execute_block+0x840>)
 800df1c:	ed83 8a16 	vstr	s16, [r3, #88]	@ 0x58
                    gc_block.words.m = On; // Flag to indicate parameter assigned.
 800df20:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800df24:	f042 0220 	orr.w	r2, r2, #32
 800df28:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
                    continue;
 800df2c:	e16c      	b.n	800e208 <gc_execute_block+0x98c>
                        word_bit.modal_group.M4 = On;
 800df2e:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800df32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df36:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        switch(int_value) {
 800df3a:	b13c      	cbz	r4, 800df4c <gc_execute_block+0x6d0>
 800df3c:	2c01      	cmp	r4, #1
 800df3e:	d00c      	beq.n	800df5a <gc_execute_block+0x6de>
                                gc_block.modal.program_flow = (program_flow_t)int_value;
 800df40:	4b5e      	ldr	r3, [pc, #376]	@ (800e0bc <gc_execute_block+0x840>)
 800df42:	f883 4020 	strb.w	r4, [r3, #32]
                is_user_mcode = false;
 800df46:	f04f 0900 	mov.w	r9, #0
 800df4a:	e0b1      	b.n	800e0b0 <gc_execute_block+0x834>
                                gc_block.modal.program_flow = ProgramFlow_Paused;
 800df4c:	4b5b      	ldr	r3, [pc, #364]	@ (800e0bc <gc_execute_block+0x840>)
 800df4e:	2203      	movs	r2, #3
 800df50:	f883 2020 	strb.w	r2, [r3, #32]
                is_user_mcode = false;
 800df54:	f04f 0900 	mov.w	r9, #0
                                break;
 800df58:	e0aa      	b.n	800e0b0 <gc_execute_block+0x834>
                                if(hal.signals_cap.stop_disable ? !hal.control.get_state().stop_disable : !sys.flags.optional_stop_disable)
 800df5a:	4b59      	ldr	r3, [pc, #356]	@ (800e0c0 <gc_execute_block+0x844>)
 800df5c:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 800df60:	f013 0f20 	tst.w	r3, #32
 800df64:	d013      	beq.n	800df8e <gc_execute_block+0x712>
 800df66:	4b56      	ldr	r3, [pc, #344]	@ (800e0c0 <gc_execute_block+0x844>)
 800df68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df6a:	4798      	blx	r3
 800df6c:	f3c0 1942 	ubfx	r9, r0, #5, #3
 800df70:	f089 0901 	eor.w	r9, r9, #1
 800df74:	f009 0901 	and.w	r9, r9, #1
 800df78:	f1b9 0f00 	cmp.w	r9, #0
 800df7c:	f000 8098 	beq.w	800e0b0 <gc_execute_block+0x834>
                                    gc_block.modal.program_flow = ProgramFlow_OptionalStop;
 800df80:	4b4e      	ldr	r3, [pc, #312]	@ (800e0bc <gc_execute_block+0x840>)
 800df82:	2201      	movs	r2, #1
 800df84:	f883 2020 	strb.w	r2, [r3, #32]
                is_user_mcode = false;
 800df88:	f04f 0900 	mov.w	r9, #0
 800df8c:	e090      	b.n	800e0b0 <gc_execute_block+0x834>
                                if(hal.signals_cap.stop_disable ? !hal.control.get_state().stop_disable : !sys.flags.optional_stop_disable)
 800df8e:	4b4d      	ldr	r3, [pc, #308]	@ (800e0c4 <gc_execute_block+0x848>)
 800df90:	f893 9016 	ldrb.w	r9, [r3, #22]
 800df94:	ea4f 1999 	mov.w	r9, r9, lsr #6
 800df98:	f089 0901 	eor.w	r9, r9, #1
 800df9c:	f009 0901 	and.w	r9, r9, #1
 800dfa0:	e7ea      	b.n	800df78 <gc_execute_block+0x6fc>
                        word_bit.modal_group.M7 = On;
 800dfa2:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800dfa6:	f043 0302 	orr.w	r3, r3, #2
 800dfaa:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        gc_block.modal.spindle.state.on = !(int_value == 5);
 800dfae:	1f61      	subs	r1, r4, #5
 800dfb0:	bf18      	it	ne
 800dfb2:	2101      	movne	r1, #1
 800dfb4:	4b41      	ldr	r3, [pc, #260]	@ (800e0bc <gc_execute_block+0x840>)
 800dfb6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800dfba:	f361 0200 	bfi	r2, r1, #0, #1
 800dfbe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                        gc_block.modal.spindle.state.ccw = int_value == 4;
 800dfc2:	2c04      	cmp	r4, #4
 800dfc4:	bf14      	ite	ne
 800dfc6:	2100      	movne	r1, #0
 800dfc8:	2101      	moveq	r1, #1
 800dfca:	b2d2      	uxtb	r2, r2
 800dfcc:	f361 0241 	bfi	r2, r1, #1, #1
 800dfd0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                        sys.override_delay.spindle = On;
 800dfd4:	4a3b      	ldr	r2, [pc, #236]	@ (800e0c4 <gc_execute_block+0x848>)
 800dfd6:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800dfda:	f043 0304 	orr.w	r3, r3, #4
 800dfde:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
                is_user_mcode = false;
 800dfe2:	f04f 0900 	mov.w	r9, #0
                        break;
 800dfe6:	e063      	b.n	800e0b0 <gc_execute_block+0x834>
                        if(settings.tool_change.mode != ToolChange_Ignore) {
 800dfe8:	4b37      	ldr	r3, [pc, #220]	@ (800e0c8 <gc_execute_block+0x84c>)
 800dfea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dfee:	2b04      	cmp	r3, #4
 800dff0:	f000 80ea 	beq.w	800e1c8 <gc_execute_block+0x94c>
                            if(hal.stream.suspend_read || hal.tool.change)
 800dff4:	4b32      	ldr	r3, [pc, #200]	@ (800e0c0 <gc_execute_block+0x844>)
 800dff6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800dffa:	b143      	cbz	r3, 800e00e <gc_execute_block+0x792>
                                word_bit.modal_group.M6 = On;
 800dffc:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800e000:	f043 0301 	orr.w	r3, r3, #1
 800e004:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                is_user_mcode = false;
 800e008:	f04f 0900 	mov.w	r9, #0
                                word_bit.modal_group.M6 = On;
 800e00c:	e050      	b.n	800e0b0 <gc_execute_block+0x834>
                            if(hal.stream.suspend_read || hal.tool.change)
 800e00e:	4b2c      	ldr	r3, [pc, #176]	@ (800e0c0 <gc_execute_block+0x844>)
 800e010:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e014:	2b00      	cmp	r3, #0
 800e016:	d1f1      	bne.n	800dffc <gc_execute_block+0x780>
                                FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 800e018:	2414      	movs	r4, #20
 800e01a:	e50c      	b.n	800da36 <gc_execute_block+0x1ba>
                        word_bit.modal_group.M8 = On;
 800e01c:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800e020:	f043 0304 	orr.w	r3, r3, #4
 800e024:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        sys.override_delay.coolant = On;
 800e028:	4a26      	ldr	r2, [pc, #152]	@ (800e0c4 <gc_execute_block+0x848>)
 800e02a:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800e02e:	f043 0302 	orr.w	r3, r3, #2
 800e032:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
                        gc_parser_flags.set_coolant = On;
 800e036:	f448 7880 	orr.w	r8, r8, #256	@ 0x100
                        switch(int_value) {
 800e03a:	2c08      	cmp	r4, #8
 800e03c:	d017      	beq.n	800e06e <gc_execute_block+0x7f2>
 800e03e:	2c09      	cmp	r4, #9
 800e040:	d01f      	beq.n	800e082 <gc_execute_block+0x806>
 800e042:	2c07      	cmp	r4, #7
 800e044:	d002      	beq.n	800e04c <gc_execute_block+0x7d0>
 800e046:	f04f 0900 	mov.w	r9, #0
 800e04a:	e031      	b.n	800e0b0 <gc_execute_block+0x834>
                                if(!hal.coolant_cap.mist)
 800e04c:	4b1c      	ldr	r3, [pc, #112]	@ (800e0c0 <gc_execute_block+0x844>)
 800e04e:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800e052:	f013 0f02 	tst.w	r3, #2
 800e056:	f003 820a 	beq.w	801146e <gc_execute_block+0x3bf2>
                                gc_block.modal.coolant.mist = On;
 800e05a:	4a18      	ldr	r2, [pc, #96]	@ (800e0bc <gc_execute_block+0x840>)
 800e05c:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800e060:	f043 0302 	orr.w	r3, r3, #2
 800e064:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
                is_user_mcode = false;
 800e068:	f04f 0900 	mov.w	r9, #0
                                break;
 800e06c:	e020      	b.n	800e0b0 <gc_execute_block+0x834>
                                gc_block.modal.coolant.flood = On;
 800e06e:	4a13      	ldr	r2, [pc, #76]	@ (800e0bc <gc_execute_block+0x840>)
 800e070:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800e074:	f043 0301 	orr.w	r3, r3, #1
 800e078:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
                is_user_mcode = false;
 800e07c:	f04f 0900 	mov.w	r9, #0
                                break;
 800e080:	e016      	b.n	800e0b0 <gc_execute_block+0x834>
                                gc_block.modal.coolant.value = 0;
 800e082:	f04f 0900 	mov.w	r9, #0
 800e086:	4b0d      	ldr	r3, [pc, #52]	@ (800e0bc <gc_execute_block+0x840>)
 800e088:	f883 9021 	strb.w	r9, [r3, #33]	@ 0x21
                                break;
 800e08c:	e010      	b.n	800e0b0 <gc_execute_block+0x834>
                        if(!settings.parking.flags.enable_override_control) // TODO: check if enabled?
 800e08e:	4b0e      	ldr	r3, [pc, #56]	@ (800e0c8 <gc_execute_block+0x84c>)
 800e090:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800e094:	f013 0f04 	tst.w	r3, #4
 800e098:	f003 81ec 	beq.w	8011474 <gc_execute_block+0x3bf8>
                        word_bit.modal_group.M9 = On;
 800e09c:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800e0a0:	f043 0308 	orr.w	r3, r3, #8
 800e0a4:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        gc_block.override_command = (override_mode_t)int_value;
 800e0a8:	4b04      	ldr	r3, [pc, #16]	@ (800e0bc <gc_execute_block+0x840>)
 800e0aa:	705c      	strb	r4, [r3, #1]
                is_user_mcode = false;
 800e0ac:	f04f 0900 	mov.w	r9, #0
                if (command_words.mask & word_bit.modal_group.mask)
 800e0b0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e0b2:	421f      	tst	r7, r3
 800e0b4:	f043 81f6 	bne.w	80114a4 <gc_execute_block+0x3c28>
                command_words.mask |= word_bit.modal_group.mask;
 800e0b8:	431f      	orrs	r7, r3
                break;
 800e0ba:	e0a5      	b.n	800e208 <gc_execute_block+0x98c>
 800e0bc:	200016c0 	.word	0x200016c0
 800e0c0:	20001a90 	.word	0x20001a90
 800e0c4:	20001d70 	.word	0x20001d70
 800e0c8:	200024a8 	.word	0x200024a8
                        word_bit.modal_group.M6 = On; //??
 800e0cc:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800e0d0:	f043 0301 	orr.w	r3, r3, #1
 800e0d4:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                is_user_mcode = false;
 800e0d8:	f04f 0900 	mov.w	r9, #0
                        set_tool = true;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	9307      	str	r3, [sp, #28]
                        break;
 800e0e0:	e7e6      	b.n	800e0b0 <gc_execute_block+0x834>
                        if(hal.port.digital_out == NULL || hal.port.num_digital_out == 0)
 800e0e2:	4bcc      	ldr	r3, [pc, #816]	@ (800e414 <gc_execute_block+0xb98>)
 800e0e4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	f003 81c6 	beq.w	801147a <gc_execute_block+0x3bfe>
 800e0ee:	4bc9      	ldr	r3, [pc, #804]	@ (800e414 <gc_execute_block+0xb98>)
 800e0f0:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	f003 81c3 	beq.w	8011480 <gc_execute_block+0x3c04>
                        word_bit.modal_group.M10 = On;
 800e0fa:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800e0fe:	f043 0310 	orr.w	r3, r3, #16
 800e102:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        port_command = (io_mcode_t)int_value;
 800e106:	b2e3      	uxtb	r3, r4
 800e108:	9306      	str	r3, [sp, #24]
                is_user_mcode = false;
 800e10a:	f04f 0900 	mov.w	r9, #0
                        break;
 800e10e:	e7cf      	b.n	800e0b0 <gc_execute_block+0x834>
                        if(hal.port.wait_on_input == NULL || (hal.port.num_digital_in == 0 && hal.port.num_analog_in == 0))
 800e110:	4bc0      	ldr	r3, [pc, #768]	@ (800e414 <gc_execute_block+0xb98>)
 800e112:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800e116:	2b00      	cmp	r3, #0
 800e118:	f003 81b5 	beq.w	8011486 <gc_execute_block+0x3c0a>
 800e11c:	4bbd      	ldr	r3, [pc, #756]	@ (800e414 <gc_execute_block+0xb98>)
 800e11e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800e122:	f013 1fff 	tst.w	r3, #16711935	@ 0xff00ff
 800e126:	f003 81b1 	beq.w	801148c <gc_execute_block+0x3c10>
                        word_bit.modal_group.M10 = On;
 800e12a:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800e12e:	f043 0310 	orr.w	r3, r3, #16
 800e132:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        port_command = (io_mcode_t)int_value;
 800e136:	b2e3      	uxtb	r3, r4
 800e138:	9306      	str	r3, [sp, #24]
                is_user_mcode = false;
 800e13a:	f04f 0900 	mov.w	r9, #0
                        break;
 800e13e:	e7b7      	b.n	800e0b0 <gc_execute_block+0x834>
                        if(hal.port.analog_out == NULL || hal.port.num_analog_out == 0)
 800e140:	4bb4      	ldr	r3, [pc, #720]	@ (800e414 <gc_execute_block+0xb98>)
 800e142:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800e146:	2b00      	cmp	r3, #0
 800e148:	f003 81a3 	beq.w	8011492 <gc_execute_block+0x3c16>
 800e14c:	4bb1      	ldr	r3, [pc, #708]	@ (800e414 <gc_execute_block+0xb98>)
 800e14e:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 800e152:	2b00      	cmp	r3, #0
 800e154:	f003 81a0 	beq.w	8011498 <gc_execute_block+0x3c1c>
                        word_bit.modal_group.M10 = On;
 800e158:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800e15c:	f043 0310 	orr.w	r3, r3, #16
 800e160:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        port_command = (io_mcode_t)int_value;
 800e164:	b2e3      	uxtb	r3, r4
 800e166:	9306      	str	r3, [sp, #24]
                is_user_mcode = false;
 800e168:	f04f 0900 	mov.w	r9, #0
                        break;
 800e16c:	e7a0      	b.n	800e0b0 <gc_execute_block+0x834>
                        gc_block.state_action = (modal_state_action_t)int_value;
 800e16e:	4baa      	ldr	r3, [pc, #680]	@ (800e418 <gc_execute_block+0xb9c>)
 800e170:	f883 40d0 	strb.w	r4, [r3, #208]	@ 0xd0
                is_user_mcode = false;
 800e174:	f04f 0900 	mov.w	r9, #0
                        break;
 800e178:	e79a      	b.n	800e0b0 <gc_execute_block+0x834>
                        word_bit.modal_group.M4 = On;
 800e17a:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800e17e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e182:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        gc_block.modal.program_flow = ProgramFlow_Return;
 800e186:	4ba4      	ldr	r3, [pc, #656]	@ (800e418 <gc_execute_block+0xb9c>)
 800e188:	2263      	movs	r2, #99	@ 0x63
 800e18a:	f883 2020 	strb.w	r2, [r3, #32]
                        if(grbl.on_macro_return == NULL)
 800e18e:	4ba3      	ldr	r3, [pc, #652]	@ (800e41c <gc_execute_block+0xba0>)
 800e190:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e194:	2b00      	cmp	r3, #0
 800e196:	f003 8182 	beq.w	801149e <gc_execute_block+0x3c22>
                is_user_mcode = false;
 800e19a:	f04f 0900 	mov.w	r9, #0
 800e19e:	e787      	b.n	800e0b0 <gc_execute_block+0x834>
                        if(hal.user_mcode.check && (gc_block.user_mcode = hal.user_mcode.check((user_mcode_t)int_value))) {
 800e1a0:	4b9c      	ldr	r3, [pc, #624]	@ (800e414 <gc_execute_block+0xb98>)
 800e1a2:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800e1a6:	b16b      	cbz	r3, 800e1c4 <gc_execute_block+0x948>
 800e1a8:	b2a0      	uxth	r0, r4
 800e1aa:	4798      	blx	r3
 800e1ac:	4b9a      	ldr	r3, [pc, #616]	@ (800e418 <gc_execute_block+0xb9c>)
 800e1ae:	8058      	strh	r0, [r3, #2]
 800e1b0:	b140      	cbz	r0, 800e1c4 <gc_execute_block+0x948>
                            word_bit.modal_group.M10 = On;
 800e1b2:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800e1b6:	f043 0310 	orr.w	r3, r3, #16
 800e1ba:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                            is_user_mcode = true;
 800e1be:	f04f 0901 	mov.w	r9, #1
                            word_bit.modal_group.M10 = On;
 800e1c2:	e775      	b.n	800e0b0 <gc_execute_block+0x834>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 800e1c4:	2414      	movs	r4, #20
 800e1c6:	e436      	b.n	800da36 <gc_execute_block+0x1ba>
                is_user_mcode = false;
 800e1c8:	f04f 0900 	mov.w	r9, #0
 800e1cc:	e770      	b.n	800e0b0 <gc_execute_block+0x834>
                        word_bit.parameter.a = On;
 800e1ce:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800e1d2:	f043 0302 	orr.w	r3, r3, #2
 800e1d6:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.a = value;
 800e1da:	4b8f      	ldr	r3, [pc, #572]	@ (800e418 <gc_execute_block+0xb9c>)
 800e1dc:	ed83 8a1b 	vstr	s16, [r3, #108]	@ 0x6c
                if (gc_block.words.mask & word_bit.parameter.mask)
 800e1e0:	4b8d      	ldr	r3, [pc, #564]	@ (800e418 <gc_execute_block+0xb9c>)
 800e1e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e1e6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800e1e8:	4213      	tst	r3, r2
 800e1ea:	f043 8173 	bne.w	80114d4 <gc_execute_block+0x3c58>
                if ((word_bit.parameter.mask & positive_only_words.mask) && value < 0.0f)
 800e1ee:	498c      	ldr	r1, [pc, #560]	@ (800e420 <gc_execute_block+0xba4>)
 800e1f0:	420a      	tst	r2, r1
 800e1f2:	d005      	beq.n	800e200 <gc_execute_block+0x984>
 800e1f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1fc:	f103 816d 	bmi.w	80114da <gc_execute_block+0x3c5e>
                gc_block.words.mask |= word_bit.parameter.mask; // Flag to indicate parameter assigned.
 800e200:	4313      	orrs	r3, r2
 800e202:	4a85      	ldr	r2, [pc, #532]	@ (800e418 <gc_execute_block+0xb9c>)
 800e204:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
    while ((letter = block[char_counter++]) != '\0') { // Loop until no more g-code words in block.
 800e208:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e20a:	1c5a      	adds	r2, r3, #1
 800e20c:	9221      	str	r2, [sp, #132]	@ 0x84
 800e20e:	5cf5      	ldrb	r5, [r6, r3]
 800e210:	2d00      	cmp	r5, #0
 800e212:	f000 81fb 	beq.w	800e60c <gc_execute_block+0xd90>
        if((letter < 'A' && letter != '$') || letter > 'Z')
 800e216:	2d40      	cmp	r5, #64	@ 0x40
 800e218:	f63f ab8d 	bhi.w	800d936 <gc_execute_block+0xba>
 800e21c:	2d24      	cmp	r5, #36	@ 0x24
 800e21e:	f043 80d5 	bne.w	80113cc <gc_execute_block+0x3b50>
        if (!read_float(block, &char_counter, &value)) {
 800e222:	aa20      	add	r2, sp, #128	@ 0x80
 800e224:	a921      	add	r1, sp, #132	@ 0x84
 800e226:	4630      	mov	r0, r6
 800e228:	f007 fccc 	bl	8015bc4 <read_float>
 800e22c:	b928      	cbnz	r0, 800e23a <gc_execute_block+0x9be>
            if(is_user_mcode)                   // Valueless parameters allowed for user defined M-codes.
 800e22e:	f1b9 0f00 	cmp.w	r9, #0
 800e232:	f003 80ce 	beq.w	80113d2 <gc_execute_block+0x3b56>
                value = NAN;                    // Parameter validation deferred to implementation.
 800e236:	4b7b      	ldr	r3, [pc, #492]	@ (800e424 <gc_execute_block+0xba8>)
 800e238:	9320      	str	r3, [sp, #128]	@ 0x80
        if(isnan(value))
 800e23a:	ed9d 8a20 	vldr	s16, [sp, #128]	@ 0x80
 800e23e:	eeb4 8a48 	vcmp.f32	s16, s16
 800e242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e246:	f5bf ab7b 	bvs.w	800d940 <gc_execute_block+0xc4>
            int_value = (uint32_t)truncf(value);
 800e24a:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800e24e:	ee17 4a90 	vmov	r4, s15
            mantissa = (uint_fast16_t)roundf(100.0f * (value - int_value));
 800e252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e256:	ee78 7a67 	vsub.f32	s15, s16, s15
 800e25a:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 800e428 <gc_execute_block+0xbac>
 800e25e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e262:	f019 fc59 	bl	8027b18 <roundf>
 800e266:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800e26a:	ee17 1a90 	vmov	r1, s15
        switch(letter) {
 800e26e:	2d47      	cmp	r5, #71	@ 0x47
 800e270:	f43f ab69 	beq.w	800d946 <gc_execute_block+0xca>
 800e274:	2d4d      	cmp	r5, #77	@ 0x4d
 800e276:	f43f add7 	beq.w	800de28 <gc_execute_block+0x5ac>
                word_bit.parameter.mask = 0;
 800e27a:	2300      	movs	r3, #0
 800e27c:	931e      	str	r3, [sp, #120]	@ 0x78
                switch(letter) {
 800e27e:	3d24      	subs	r5, #36	@ 0x24
 800e280:	2d36      	cmp	r5, #54	@ 0x36
 800e282:	f203 8112 	bhi.w	80114aa <gc_execute_block+0x3c2e>
 800e286:	a301      	add	r3, pc, #4	@ (adr r3, 800e28c <gc_execute_block+0xa10>)
 800e288:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 800e28c:	0800e5ef 	.word	0x0800e5ef
 800e290:	080114ab 	.word	0x080114ab
 800e294:	080114ab 	.word	0x080114ab
 800e298:	080114ab 	.word	0x080114ab
 800e29c:	080114ab 	.word	0x080114ab
 800e2a0:	080114ab 	.word	0x080114ab
 800e2a4:	080114ab 	.word	0x080114ab
 800e2a8:	080114ab 	.word	0x080114ab
 800e2ac:	080114ab 	.word	0x080114ab
 800e2b0:	080114ab 	.word	0x080114ab
 800e2b4:	080114ab 	.word	0x080114ab
 800e2b8:	080114ab 	.word	0x080114ab
 800e2bc:	080114ab 	.word	0x080114ab
 800e2c0:	080114ab 	.word	0x080114ab
 800e2c4:	080114ab 	.word	0x080114ab
 800e2c8:	080114ab 	.word	0x080114ab
 800e2cc:	080114ab 	.word	0x080114ab
 800e2d0:	080114ab 	.word	0x080114ab
 800e2d4:	080114ab 	.word	0x080114ab
 800e2d8:	080114ab 	.word	0x080114ab
 800e2dc:	080114ab 	.word	0x080114ab
 800e2e0:	080114ab 	.word	0x080114ab
 800e2e4:	080114ab 	.word	0x080114ab
 800e2e8:	080114ab 	.word	0x080114ab
 800e2ec:	080114ab 	.word	0x080114ab
 800e2f0:	080114ab 	.word	0x080114ab
 800e2f4:	080114ab 	.word	0x080114ab
 800e2f8:	080114ab 	.word	0x080114ab
 800e2fc:	080114ab 	.word	0x080114ab
 800e300:	0800e1cf 	.word	0x0800e1cf
 800e304:	0800e369 	.word	0x0800e369
 800e308:	0800e37d 	.word	0x0800e37d
 800e30c:	0800e391 	.word	0x0800e391
 800e310:	0800e3a5 	.word	0x0800e3a5
 800e314:	0800e3b9 	.word	0x0800e3b9
 800e318:	080114ab 	.word	0x080114ab
 800e31c:	0800e3cd 	.word	0x0800e3cd
 800e320:	0800e3f9 	.word	0x0800e3f9
 800e324:	0800e42d 	.word	0x0800e42d
 800e328:	0800e449 	.word	0x0800e449
 800e32c:	0800e465 	.word	0x0800e465
 800e330:	080114ab 	.word	0x080114ab
 800e334:	0800e48f 	.word	0x0800e48f
 800e338:	0800e4a7 	.word	0x0800e4a7
 800e33c:	0800e4d3 	.word	0x0800e4d3
 800e340:	0800e4e7 	.word	0x0800e4e7
 800e344:	0800e4fb 	.word	0x0800e4fb
 800e348:	0800e50f 	.word	0x0800e50f
 800e34c:	0800e523 	.word	0x0800e523
 800e350:	0800e56b 	.word	0x0800e56b
 800e354:	0800e57f 	.word	0x0800e57f
 800e358:	0800e593 	.word	0x0800e593
 800e35c:	0800e5a7 	.word	0x0800e5a7
 800e360:	0800e5bf 	.word	0x0800e5bf
 800e364:	0800e5d7 	.word	0x0800e5d7
                        word_bit.parameter.b = On;
 800e368:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800e36c:	f043 0304 	orr.w	r3, r3, #4
 800e370:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.b = value;
 800e374:	4b28      	ldr	r3, [pc, #160]	@ (800e418 <gc_execute_block+0xb9c>)
 800e376:	ed83 8a1c 	vstr	s16, [r3, #112]	@ 0x70
                        break;
 800e37a:	e731      	b.n	800e1e0 <gc_execute_block+0x964>
                        word_bit.parameter.c = On;
 800e37c:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800e380:	f043 0308 	orr.w	r3, r3, #8
 800e384:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.c = value;
 800e388:	4b23      	ldr	r3, [pc, #140]	@ (800e418 <gc_execute_block+0xb9c>)
 800e38a:	ed83 8a1d 	vstr	s16, [r3, #116]	@ 0x74
                        break;
 800e38e:	e727      	b.n	800e1e0 <gc_execute_block+0x964>
                        word_bit.parameter.d = On;
 800e390:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800e394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e398:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.d = value;
 800e39c:	4b1e      	ldr	r3, [pc, #120]	@ (800e418 <gc_execute_block+0xb9c>)
 800e39e:	ed83 8a0f 	vstr	s16, [r3, #60]	@ 0x3c
                        break;
 800e3a2:	e71d      	b.n	800e1e0 <gc_execute_block+0x964>
                        word_bit.parameter.e = On;
 800e3a4:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800e3a8:	f043 0301 	orr.w	r3, r3, #1
 800e3ac:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.e = value;
 800e3b0:	4b19      	ldr	r3, [pc, #100]	@ (800e418 <gc_execute_block+0xb9c>)
 800e3b2:	ed83 8a10 	vstr	s16, [r3, #64]	@ 0x40
                        break;
 800e3b6:	e713      	b.n	800e1e0 <gc_execute_block+0x964>
                        word_bit.parameter.f = On;
 800e3b8:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800e3bc:	f043 0302 	orr.w	r3, r3, #2
 800e3c0:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.f = value;
 800e3c4:	4b14      	ldr	r3, [pc, #80]	@ (800e418 <gc_execute_block+0xb9c>)
 800e3c6:	ed83 8a11 	vstr	s16, [r3, #68]	@ 0x44
                        break;
 800e3ca:	e709      	b.n	800e1e0 <gc_execute_block+0x964>
                        if (mantissa > 0)
 800e3cc:	2900      	cmp	r1, #0
 800e3ce:	f043 806f 	bne.w	80114b0 <gc_execute_block+0x3c34>
                        word_bit.parameter.h = On;
 800e3d2:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800e3d6:	f043 0308 	orr.w	r3, r3, #8
 800e3da:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.h = isnan(value) ? 0xFFFFFFFF : int_value;
 800e3de:	eeb4 8a48 	vcmp.f32	s16, s16
 800e3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3e6:	d604      	bvs.n	800e3f2 <gc_execute_block+0xb76>
 800e3e8:	4622      	mov	r2, r4
 800e3ea:	4b0b      	ldr	r3, [pc, #44]	@ (800e418 <gc_execute_block+0xb9c>)
 800e3ec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
                        break;
 800e3f0:	e6f6      	b.n	800e1e0 <gc_execute_block+0x964>
                        gc_block.values.h = isnan(value) ? 0xFFFFFFFF : int_value;
 800e3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3f6:	e7f8      	b.n	800e3ea <gc_execute_block+0xb6e>
                        ijk_words.i = On;
 800e3f8:	9b05      	ldr	r3, [sp, #20]
 800e3fa:	f043 0301 	orr.w	r3, r3, #1
 800e3fe:	9305      	str	r3, [sp, #20]
                        word_bit.parameter.i = On;
 800e400:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800e404:	f043 0310 	orr.w	r3, r3, #16
 800e408:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.ijk[I_VALUE] = value;
 800e40c:	4b02      	ldr	r3, [pc, #8]	@ (800e418 <gc_execute_block+0xb9c>)
 800e40e:	ed83 8a12 	vstr	s16, [r3, #72]	@ 0x48
                        break;
 800e412:	e6e5      	b.n	800e1e0 <gc_execute_block+0x964>
 800e414:	20001a90 	.word	0x20001a90
 800e418:	200016c0 	.word	0x200016c0
 800e41c:	20001c78 	.word	0x20001c78
 800e420:	0018ca80 	.word	0x0018ca80
 800e424:	7fc00000 	.word	0x7fc00000
 800e428:	42c80000 	.word	0x42c80000
                        ijk_words.j = On;
 800e42c:	9b05      	ldr	r3, [sp, #20]
 800e42e:	f043 0302 	orr.w	r3, r3, #2
 800e432:	9305      	str	r3, [sp, #20]
                        word_bit.parameter.j = On;
 800e434:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800e438:	f043 0320 	orr.w	r3, r3, #32
 800e43c:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.ijk[J_VALUE] = value;
 800e440:	4bb7      	ldr	r3, [pc, #732]	@ (800e720 <gc_execute_block+0xea4>)
 800e442:	ed83 8a13 	vstr	s16, [r3, #76]	@ 0x4c
                        break;
 800e446:	e6cb      	b.n	800e1e0 <gc_execute_block+0x964>
                        ijk_words.k = On;
 800e448:	9b05      	ldr	r3, [sp, #20]
 800e44a:	f043 0304 	orr.w	r3, r3, #4
 800e44e:	9305      	str	r3, [sp, #20]
                        word_bit.parameter.k = On;
 800e450:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800e454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e458:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.ijk[K_VALUE] = value;
 800e45c:	4bb0      	ldr	r3, [pc, #704]	@ (800e720 <gc_execute_block+0xea4>)
 800e45e:	ed83 8a14 	vstr	s16, [r3, #80]	@ 0x50
                        break;
 800e462:	e6bd      	b.n	800e1e0 <gc_execute_block+0x964>
                        if (mantissa > 0)
 800e464:	2900      	cmp	r1, #0
 800e466:	f043 8026 	bne.w	80114b6 <gc_execute_block+0x3c3a>
                        word_bit.parameter.l = On;
 800e46a:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800e46e:	f043 0310 	orr.w	r3, r3, #16
 800e472:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.l = isnan(value) ? 0xFF : (uint8_t)int_value;
 800e476:	eeb4 8a48 	vcmp.f32	s16, s16
 800e47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e47e:	d604      	bvs.n	800e48a <gc_execute_block+0xc0e>
 800e480:	b2e2      	uxtb	r2, r4
 800e482:	4ba7      	ldr	r3, [pc, #668]	@ (800e720 <gc_execute_block+0xea4>)
 800e484:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                        break;
 800e488:	e6aa      	b.n	800e1e0 <gc_execute_block+0x964>
                        gc_block.values.l = isnan(value) ? 0xFF : (uint8_t)int_value;
 800e48a:	22ff      	movs	r2, #255	@ 0xff
 800e48c:	e7f9      	b.n	800e482 <gc_execute_block+0xc06>
                        word_bit.parameter.n = On;
 800e48e:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800e492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e496:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.n = (int32_t)truncf(value);
 800e49a:	4aa1      	ldr	r2, [pc, #644]	@ (800e720 <gc_execute_block+0xea4>)
 800e49c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e4a0:	edc2 7a29 	vstr	s15, [r2, #164]	@ 0xa4
                        break;
 800e4a4:	e69c      	b.n	800e1e0 <gc_execute_block+0x964>
                        if (mantissa > 0)
 800e4a6:	2900      	cmp	r1, #0
 800e4a8:	f043 8008 	bne.w	80114bc <gc_execute_block+0x3c40>
                        word_bit.parameter.o = On;
 800e4ac:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800e4b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4b4:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.o = isnan(value) ? 0xFFFFFFFF : int_value;
 800e4b8:	eeb4 8a48 	vcmp.f32	s16, s16
 800e4bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4c0:	d604      	bvs.n	800e4cc <gc_execute_block+0xc50>
 800e4c2:	4622      	mov	r2, r4
 800e4c4:	4b96      	ldr	r3, [pc, #600]	@ (800e720 <gc_execute_block+0xea4>)
 800e4c6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                        break;
 800e4ca:	e689      	b.n	800e1e0 <gc_execute_block+0x964>
                        gc_block.values.o = isnan(value) ? 0xFFFFFFFF : int_value;
 800e4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e4d0:	e7f8      	b.n	800e4c4 <gc_execute_block+0xc48>
                        word_bit.parameter.p = On;
 800e4d2:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800e4d6:	f043 0301 	orr.w	r3, r3, #1
 800e4da:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.p = value;
 800e4de:	4b90      	ldr	r3, [pc, #576]	@ (800e720 <gc_execute_block+0xea4>)
 800e4e0:	ed83 8a17 	vstr	s16, [r3, #92]	@ 0x5c
                        break;
 800e4e4:	e67c      	b.n	800e1e0 <gc_execute_block+0x964>
                        word_bit.parameter.q = On;
 800e4e6:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800e4ea:	f043 0302 	orr.w	r3, r3, #2
 800e4ee:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.q = value;
 800e4f2:	4b8b      	ldr	r3, [pc, #556]	@ (800e720 <gc_execute_block+0xea4>)
 800e4f4:	ed83 8a18 	vstr	s16, [r3, #96]	@ 0x60
                        break;
 800e4f8:	e672      	b.n	800e1e0 <gc_execute_block+0x964>
                        word_bit.parameter.r = On;
 800e4fa:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800e4fe:	f043 0304 	orr.w	r3, r3, #4
 800e502:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.r = value;
 800e506:	4b86      	ldr	r3, [pc, #536]	@ (800e720 <gc_execute_block+0xea4>)
 800e508:	ed83 8a19 	vstr	s16, [r3, #100]	@ 0x64
                        break;
 800e50c:	e668      	b.n	800e1e0 <gc_execute_block+0x964>
                        word_bit.parameter.s = On;
 800e50e:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800e512:	f043 0308 	orr.w	r3, r3, #8
 800e516:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.s = value;
 800e51a:	4b81      	ldr	r3, [pc, #516]	@ (800e720 <gc_execute_block+0xea4>)
 800e51c:	ed83 8a1a 	vstr	s16, [r3, #104]	@ 0x68
                        break;
 800e520:	e65e      	b.n	800e1e0 <gc_execute_block+0x964>
                        if(mantissa > 0)
 800e522:	2900      	cmp	r1, #0
 800e524:	f042 87cd 	bne.w	80114c2 <gc_execute_block+0x3c46>
                        if(int_value > (grbl.tool_table.n_tools ? grbl.tool_table.n_tools : MAX_TOOL_NUMBER))
 800e528:	4621      	mov	r1, r4
 800e52a:	4b7e      	ldr	r3, [pc, #504]	@ (800e724 <gc_execute_block+0xea8>)
 800e52c:	699b      	ldr	r3, [r3, #24]
 800e52e:	b1ab      	cbz	r3, 800e55c <gc_execute_block+0xce0>
 800e530:	2200      	movs	r2, #0
 800e532:	428b      	cmp	r3, r1
 800e534:	f172 0200 	sbcs.w	r2, r2, #0
 800e538:	f2c2 87c6 	blt.w	80114c8 <gc_execute_block+0x3c4c>
                        word_bit.parameter.t = On;
 800e53c:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800e540:	f043 0310 	orr.w	r3, r3, #16
 800e544:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.t = isnan(value) ? 0xFFFFFFFF : int_value;
 800e548:	eeb4 8a48 	vcmp.f32	s16, s16
 800e54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e550:	d608      	bvs.n	800e564 <gc_execute_block+0xce8>
 800e552:	4622      	mov	r2, r4
 800e554:	4b72      	ldr	r3, [pc, #456]	@ (800e720 <gc_execute_block+0xea4>)
 800e556:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
                        break;
 800e55a:	e641      	b.n	800e1e0 <gc_execute_block+0x964>
                        if(int_value > (grbl.tool_table.n_tools ? grbl.tool_table.n_tools : MAX_TOOL_NUMBER))
 800e55c:	f06f 0301 	mvn.w	r3, #1
 800e560:	2200      	movs	r2, #0
 800e562:	e7e6      	b.n	800e532 <gc_execute_block+0xcb6>
                        gc_block.values.t = isnan(value) ? 0xFFFFFFFF : int_value;
 800e564:	f04f 32ff 	mov.w	r2, #4294967295
 800e568:	e7f4      	b.n	800e554 <gc_execute_block+0xcd8>
                        word_bit.parameter.u = On;
 800e56a:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800e56e:	f043 0320 	orr.w	r3, r3, #32
 800e572:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.u = value;
 800e576:	4b6a      	ldr	r3, [pc, #424]	@ (800e720 <gc_execute_block+0xea4>)
 800e578:	ed83 8a1e 	vstr	s16, [r3, #120]	@ 0x78
                        break;
 800e57c:	e630      	b.n	800e1e0 <gc_execute_block+0x964>
                        word_bit.parameter.v = On;
 800e57e:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800e582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e586:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.v = value;
 800e58a:	4b65      	ldr	r3, [pc, #404]	@ (800e720 <gc_execute_block+0xea4>)
 800e58c:	ed83 8a1f 	vstr	s16, [r3, #124]	@ 0x7c
                        break;
 800e590:	e626      	b.n	800e1e0 <gc_execute_block+0x964>
                        word_bit.parameter.w = On;
 800e592:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800e596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e59a:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.w = value;
 800e59e:	4b60      	ldr	r3, [pc, #384]	@ (800e720 <gc_execute_block+0xea4>)
 800e5a0:	ed83 8a20 	vstr	s16, [r3, #128]	@ 0x80
                        break;
 800e5a4:	e61c      	b.n	800e1e0 <gc_execute_block+0x964>
                        axis_words.x = On;
 800e5a6:	f04b 0b01 	orr.w	fp, fp, #1
                        word_bit.parameter.x = On;
 800e5aa:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800e5ae:	f043 0301 	orr.w	r3, r3, #1
 800e5b2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
                        gc_block.values.xyz[X_AXIS] = value;
 800e5b6:	4b5a      	ldr	r3, [pc, #360]	@ (800e720 <gc_execute_block+0xea4>)
 800e5b8:	ed83 8a21 	vstr	s16, [r3, #132]	@ 0x84
                        break;
 800e5bc:	e610      	b.n	800e1e0 <gc_execute_block+0x964>
                        axis_words.y = On;
 800e5be:	f04b 0b02 	orr.w	fp, fp, #2
                        word_bit.parameter.y = On;
 800e5c2:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800e5c6:	f043 0302 	orr.w	r3, r3, #2
 800e5ca:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
                        gc_block.values.xyz[Y_AXIS] = value;
 800e5ce:	4b54      	ldr	r3, [pc, #336]	@ (800e720 <gc_execute_block+0xea4>)
 800e5d0:	ed83 8a22 	vstr	s16, [r3, #136]	@ 0x88
                        break;
 800e5d4:	e604      	b.n	800e1e0 <gc_execute_block+0x964>
                        axis_words.z = On;
 800e5d6:	f04b 0b04 	orr.w	fp, fp, #4
                        word_bit.parameter.z = On;
 800e5da:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800e5de:	f043 0304 	orr.w	r3, r3, #4
 800e5e2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
                        gc_block.values.xyz[Z_AXIS] = value;
 800e5e6:	4b4e      	ldr	r3, [pc, #312]	@ (800e720 <gc_execute_block+0xea4>)
 800e5e8:	ed83 8a23 	vstr	s16, [r3, #140]	@ 0x8c
                        break;
 800e5ec:	e5f8      	b.n	800e1e0 <gc_execute_block+0x964>
                        if(mantissa > 0)
 800e5ee:	2900      	cmp	r1, #0
 800e5f0:	f042 876d 	bne.w	80114ce <gc_execute_block+0x3c52>
                        word_bit.parameter.$ = On;
 800e5f4:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800e5f8:	f043 0301 	orr.w	r3, r3, #1
 800e5fc:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.$ = (int32_t)value;
 800e600:	4a47      	ldr	r2, [pc, #284]	@ (800e720 <gc_execute_block+0xea4>)
 800e602:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e606:	edc2 7a28 	vstr	s15, [r2, #160]	@ 0xa0
                        break;
 800e60a:	e5e9      	b.n	800e1e0 <gc_execute_block+0x964>
    if (axis_words.mask && !axis_command)
 800e60c:	fa5f f38b 	uxtb.w	r3, fp
 800e610:	b123      	cbz	r3, 800e61c <gc_execute_block+0xda0>
 800e612:	f1ba 0f00 	cmp.w	sl, #0
 800e616:	d101      	bne.n	800e61c <gc_execute_block+0xda0>
        axis_command = AxisCommand_MotionMode; // Assign implicit motion-mode
 800e618:	f04f 0a02 	mov.w	sl, #2
    if(gc_state.tool_change && axis_command == AxisCommand_MotionMode && !gc_parser_flags.jog_motion)
 800e61c:	4b42      	ldr	r3, [pc, #264]	@ (800e728 <gc_execute_block+0xeac>)
 800e61e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800e622:	b113      	cbz	r3, 800e62a <gc_execute_block+0xdae>
 800e624:	f1ba 0f02 	cmp.w	sl, #2
 800e628:	d051      	beq.n	800e6ce <gc_execute_block+0xe52>
    if (gc_block.words.n && gc_block.values.n > MAX_LINE_NUMBER)
 800e62a:	4b3d      	ldr	r3, [pc, #244]	@ (800e720 <gc_execute_block+0xea4>)
 800e62c:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800e630:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800e634:	d006      	beq.n	800e644 <gc_execute_block+0xdc8>
 800e636:	4a3a      	ldr	r2, [pc, #232]	@ (800e720 <gc_execute_block+0xea4>)
 800e638:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 800e63c:	4a3b      	ldr	r2, [pc, #236]	@ (800e72c <gc_execute_block+0xeb0>)
 800e63e:	4291      	cmp	r1, r2
 800e640:	f302 874e 	bgt.w	80114e0 <gc_execute_block+0x3c64>
    if (gc_parser_flags.jog_motion) {
 800e644:	f018 0f01 	tst.w	r8, #1
 800e648:	d047      	beq.n	800e6da <gc_execute_block+0xe5e>
        if(!gc_block.words.f)
 800e64a:	f013 0f02 	tst.w	r3, #2
 800e64e:	f002 874a 	beq.w	80114e6 <gc_execute_block+0x3c6a>
        if (gc_block.modal.units_imperial)
 800e652:	4b33      	ldr	r3, [pc, #204]	@ (800e720 <gc_execute_block+0xea4>)
 800e654:	7adb      	ldrb	r3, [r3, #11]
 800e656:	b143      	cbz	r3, 800e66a <gc_execute_block+0xdee>
            gc_block.values.f *= MM_PER_INCH;
 800e658:	4b31      	ldr	r3, [pc, #196]	@ (800e720 <gc_execute_block+0xea4>)
 800e65a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800e65e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e730 <gc_execute_block+0xeb4>
 800e662:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e666:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    if(gc_block.words.$) {
 800e66a:	4b2d      	ldr	r3, [pc, #180]	@ (800e720 <gc_execute_block+0xea4>)
 800e66c:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800e670:	f013 0f01 	tst.w	r3, #1
 800e674:	f000 80de 	beq.w	800e834 <gc_execute_block+0xfb8>
        bool single_spindle_only = (gc_block.words.s && !user_words.s) ||
 800e678:	4b29      	ldr	r3, [pc, #164]	@ (800e720 <gc_execute_block+0xea4>)
 800e67a:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
                                      command_words.G14 ||
 800e67e:	f013 0f08 	tst.w	r3, #8
 800e682:	d005      	beq.n	800e690 <gc_execute_block+0xe14>
        bool single_spindle_only = (gc_block.words.s && !user_words.s) ||
 800e684:	4b2b      	ldr	r3, [pc, #172]	@ (800e734 <gc_execute_block+0xeb8>)
 800e686:	789b      	ldrb	r3, [r3, #2]
 800e688:	f013 0f08 	tst.w	r3, #8
 800e68c:	f000 808e 	beq.w	800e7ac <gc_execute_block+0xf30>
 800e690:	f017 0f01 	tst.w	r7, #1
 800e694:	d00c      	beq.n	800e6b0 <gc_execute_block+0xe34>
                                    (command_words.G0 && (gc_block.modal.motion == MotionMode_SpindleSynchronized ||
 800e696:	4b22      	ldr	r3, [pc, #136]	@ (800e720 <gc_execute_block+0xea4>)
 800e698:	891b      	ldrh	r3, [r3, #8]
 800e69a:	2b21      	cmp	r3, #33	@ 0x21
 800e69c:	f000 8091 	beq.w	800e7c2 <gc_execute_block+0xf46>
 800e6a0:	f240 124b 	movw	r2, #331	@ 0x14b
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	f000 808e 	beq.w	800e7c6 <gc_execute_block+0xf4a>
                                                           gc_block.modal.motion == MotionMode_RigidTapping ||
 800e6aa:	2b4c      	cmp	r3, #76	@ 0x4c
 800e6ac:	f000 808d 	beq.w	800e7ca <gc_execute_block+0xf4e>
                                                            gc_block.modal.motion == MotionMode_Threading)) ||
 800e6b0:	f417 5f00 	tst.w	r7, #8192	@ 0x2000
 800e6b4:	f040 808b 	bne.w	800e7ce <gc_execute_block+0xf52>
                                      command_words.G14 ||
 800e6b8:	f417 2f00 	tst.w	r7, #524288	@ 0x80000
 800e6bc:	f000 8089 	beq.w	800e7d2 <gc_execute_block+0xf56>
                                       (command_words.M9 && gc_block.override_command == Override_SpindleSpeed);
 800e6c0:	4b17      	ldr	r3, [pc, #92]	@ (800e720 <gc_execute_block+0xea4>)
 800e6c2:	785b      	ldrb	r3, [r3, #1]
 800e6c4:	2b33      	cmp	r3, #51	@ 0x33
 800e6c6:	f000 8086 	beq.w	800e7d6 <gc_execute_block+0xf5a>
                                      command_words.G14 ||
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	e06f      	b.n	800e7ae <gc_execute_block+0xf32>
    if(gc_state.tool_change && axis_command == AxisCommand_MotionMode && !gc_parser_flags.jog_motion)
 800e6ce:	f018 0f01 	tst.w	r8, #1
 800e6d2:	d1aa      	bne.n	800e62a <gc_execute_block+0xdae>
        FAIL(Status_GcodeToolChangePending); // [Motions (except jogging) not allowed when changing tool]
 800e6d4:	2428      	movs	r4, #40	@ 0x28
 800e6d6:	f7ff b9ae 	b.w	800da36 <gc_execute_block+0x1ba>
    } else if(gc_block.modal.motion == MotionMode_SpindleSynchronized) {
 800e6da:	4a11      	ldr	r2, [pc, #68]	@ (800e720 <gc_execute_block+0xea4>)
 800e6dc:	8912      	ldrh	r2, [r2, #8]
 800e6de:	2a21      	cmp	r2, #33	@ 0x21
 800e6e0:	d012      	beq.n	800e708 <gc_execute_block+0xe8c>
    } else if (gc_block.modal.feed_mode == FeedMode_InverseTime) { // = G93
 800e6e2:	490f      	ldr	r1, [pc, #60]	@ (800e720 <gc_execute_block+0xea4>)
 800e6e4:	7a89      	ldrb	r1, [r1, #10]
 800e6e6:	2901      	cmp	r1, #1
 800e6e8:	d040      	beq.n	800e76c <gc_execute_block+0xef0>
    } else if (gc_block.modal.feed_mode == FeedMode_UnitsPerMin || gc_block.modal.feed_mode == FeedMode_UnitsPerRev) {
 800e6ea:	b109      	cbz	r1, 800e6f0 <gc_execute_block+0xe74>
 800e6ec:	2902      	cmp	r1, #2
 800e6ee:	d1bc      	bne.n	800e66a <gc_execute_block+0xdee>
        if (!gc_block.words.f) {
 800e6f0:	f013 0f02 	tst.w	r3, #2
 800e6f4:	d14b      	bne.n	800e78e <gc_execute_block+0xf12>
            if(gc_block.modal.feed_mode == gc_state.modal.feed_mode)
 800e6f6:	4b0c      	ldr	r3, [pc, #48]	@ (800e728 <gc_execute_block+0xeac>)
 800e6f8:	789b      	ldrb	r3, [r3, #2]
 800e6fa:	4299      	cmp	r1, r3
 800e6fc:	d1b5      	bne.n	800e66a <gc_execute_block+0xdee>
                gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 800e6fe:	4b0a      	ldr	r3, [pc, #40]	@ (800e728 <gc_execute_block+0xeac>)
 800e700:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e702:	4b07      	ldr	r3, [pc, #28]	@ (800e720 <gc_execute_block+0xea4>)
 800e704:	645a      	str	r2, [r3, #68]	@ 0x44
 800e706:	e7b0      	b.n	800e66a <gc_execute_block+0xdee>
        if (!gc_block.words.k) {
 800e708:	4b05      	ldr	r3, [pc, #20]	@ (800e720 <gc_execute_block+0xea4>)
 800e70a:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800e70e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800e712:	d111      	bne.n	800e738 <gc_execute_block+0xebc>
            gc_block.values.k = gc_state.distance_per_rev;
 800e714:	4b04      	ldr	r3, [pc, #16]	@ (800e728 <gc_execute_block+0xeac>)
 800e716:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800e718:	4b01      	ldr	r3, [pc, #4]	@ (800e720 <gc_execute_block+0xea4>)
 800e71a:	655a      	str	r2, [r3, #84]	@ 0x54
 800e71c:	e7a5      	b.n	800e66a <gc_execute_block+0xdee>
 800e71e:	bf00      	nop
 800e720:	200016c0 	.word	0x200016c0
 800e724:	20001c78 	.word	0x20001c78
 800e728:	200017c8 	.word	0x200017c8
 800e72c:	00989680 	.word	0x00989680
 800e730:	41cb3333 	.word	0x41cb3333
 800e734:	200016bc 	.word	0x200016bc
            gc_block.words.k = Off;
 800e738:	4ba7      	ldr	r3, [pc, #668]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e73a:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800e73e:	f36f 1286 	bfc	r2, #6, #1
 800e742:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
            gc_block.values.k = gc_block.modal.units_imperial ? gc_block.values.ijk[K_VALUE] *= MM_PER_INCH : gc_block.values.ijk[K_VALUE];
 800e746:	7adb      	ldrb	r3, [r3, #11]
 800e748:	b163      	cbz	r3, 800e764 <gc_execute_block+0xee8>
 800e74a:	4ba3      	ldr	r3, [pc, #652]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e74c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800e750:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800e9dc <gc_execute_block+0x1160>
 800e754:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e758:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
 800e75c:	4b9e      	ldr	r3, [pc, #632]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e75e:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
 800e762:	e782      	b.n	800e66a <gc_execute_block+0xdee>
 800e764:	4b9c      	ldr	r3, [pc, #624]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e766:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800e76a:	e7f7      	b.n	800e75c <gc_execute_block+0xee0>
        if (axis_command == AxisCommand_MotionMode) {
 800e76c:	f1ba 0f02 	cmp.w	sl, #2
 800e770:	f47f af7b 	bne.w	800e66a <gc_execute_block+0xdee>
            if (!(gc_block.modal.motion == MotionMode_None || gc_block.modal.motion == MotionMode_Seek)) {
 800e774:	2a50      	cmp	r2, #80	@ 0x50
 800e776:	f43f af78 	beq.w	800e66a <gc_execute_block+0xdee>
 800e77a:	2a00      	cmp	r2, #0
 800e77c:	f43f af75 	beq.w	800e66a <gc_execute_block+0xdee>
                if (!gc_block.words.f)
 800e780:	f013 0f02 	tst.w	r3, #2
 800e784:	f47f af71 	bne.w	800e66a <gc_execute_block+0xdee>
                    FAIL(Status_GcodeUndefinedFeedRate); // [F word missing]
 800e788:	2416      	movs	r4, #22
 800e78a:	f7ff b954 	b.w	800da36 <gc_execute_block+0x1ba>
        } else if (gc_block.modal.units_imperial)
 800e78e:	4b92      	ldr	r3, [pc, #584]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e790:	7adb      	ldrb	r3, [r3, #11]
 800e792:	2b00      	cmp	r3, #0
 800e794:	f43f af69 	beq.w	800e66a <gc_execute_block+0xdee>
            gc_block.values.f *= MM_PER_INCH;
 800e798:	4b8f      	ldr	r3, [pc, #572]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e79a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800e79e:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 800e9dc <gc_execute_block+0x1160>
 800e7a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e7a6:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
 800e7aa:	e75e      	b.n	800e66a <gc_execute_block+0xdee>
                                      command_words.G14 ||
 800e7ac:	2301      	movs	r3, #1
        if(command_words.M7 || single_spindle_only) {
 800e7ae:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 800e7b2:	d112      	bne.n	800e7da <gc_execute_block+0xf5e>
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d041      	beq.n	800e83c <gc_execute_block+0xfc0>
            if(gc_block.values.$ < (single_spindle_only ? 0 : -1))
 800e7b8:	4a87      	ldr	r2, [pc, #540]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e7ba:	f8d2 00a0 	ldr.w	r0, [r2, #160]	@ 0xa0
 800e7be:	2200      	movs	r2, #0
 800e7c0:	e010      	b.n	800e7e4 <gc_execute_block+0xf68>
                                      command_words.G14 ||
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	e7f3      	b.n	800e7ae <gc_execute_block+0xf32>
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	e7f1      	b.n	800e7ae <gc_execute_block+0xf32>
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	e7ef      	b.n	800e7ae <gc_execute_block+0xf32>
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	e7ed      	b.n	800e7ae <gc_execute_block+0xf32>
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	e7eb      	b.n	800e7ae <gc_execute_block+0xf32>
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	e7e9      	b.n	800e7ae <gc_execute_block+0xf32>
            if(gc_block.values.$ < (single_spindle_only ? 0 : -1))
 800e7da:	4a7f      	ldr	r2, [pc, #508]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e7dc:	f8d2 00a0 	ldr.w	r0, [r2, #160]	@ 0xa0
 800e7e0:	b133      	cbz	r3, 800e7f0 <gc_execute_block+0xf74>
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	4290      	cmp	r0, r2
 800e7e6:	da09      	bge.n	800e7fc <gc_execute_block+0xf80>
                FAIL(single_spindle_only ? Status_NegativeValue : Status_GcodeValueOutOfRange);
 800e7e8:	b12b      	cbz	r3, 800e7f6 <gc_execute_block+0xf7a>
 800e7ea:	2404      	movs	r4, #4
 800e7ec:	f7ff b923 	b.w	800da36 <gc_execute_block+0x1ba>
            if(gc_block.values.$ < (single_spindle_only ? 0 : -1))
 800e7f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e7f4:	e7f6      	b.n	800e7e4 <gc_execute_block+0xf68>
                FAIL(single_spindle_only ? Status_NegativeValue : Status_GcodeValueOutOfRange);
 800e7f6:	2427      	movs	r4, #39	@ 0x27
 800e7f8:	f7ff b91d 	b.w	800da36 <gc_execute_block+0x1ba>
            if(!spindle_is_enabled(gc_block.values.$))
 800e7fc:	b240      	sxtb	r0, r0
 800e7fe:	f00f fefd 	bl	801e5fc <spindle_is_enabled>
 800e802:	2800      	cmp	r0, #0
 800e804:	f002 8672 	beq.w	80114ec <gc_execute_block+0x3c70>
            if(gc_block.values.$ >= 0)
 800e808:	4b73      	ldr	r3, [pc, #460]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e80a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800e80e:	2800      	cmp	r0, #0
 800e810:	da07      	bge.n	800e822 <gc_execute_block+0xfa6>
            gc_block.words.$ = Off;
 800e812:	4b71      	ldr	r3, [pc, #452]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e814:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800e818:	f36f 0200 	bfc	r2, #0, #1
 800e81c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e820:	e00c      	b.n	800e83c <gc_execute_block+0xfc0>
                gc_state.spindle.hal = gc_block.spindle = spindle_get(gc_block.values.$);
 800e822:	b240      	sxtb	r0, r0
 800e824:	f00f ff00 	bl	801e628 <spindle_get>
 800e828:	4a6b      	ldr	r2, [pc, #428]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e82a:	f8c2 00cc 	str.w	r0, [r2, #204]	@ 0xcc
 800e82e:	4a6c      	ldr	r2, [pc, #432]	@ (800e9e0 <gc_execute_block+0x1164>)
 800e830:	65d0      	str	r0, [r2, #92]	@ 0x5c
 800e832:	e7ee      	b.n	800e812 <gc_execute_block+0xf96>
    } else if(gc_block.spindle == NULL)
 800e834:	4b68      	ldr	r3, [pc, #416]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e836:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800e83a:	b323      	cbz	r3, 800e886 <gc_execute_block+0x100a>
    if(gc_block.modal.feed_mode == FeedMode_UnitsPerRev && !gc_state.spindle.hal->get_data)
 800e83c:	4b66      	ldr	r3, [pc, #408]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e83e:	7a9b      	ldrb	r3, [r3, #10]
 800e840:	2b02      	cmp	r3, #2
 800e842:	d026      	beq.n	800e892 <gc_execute_block+0x1016>
    if (command_words.G14) {
 800e844:	f3c7 2507 	ubfx	r5, r7, #8, #8
 800e848:	f417 5f00 	tst.w	r7, #8192	@ 0x2000
 800e84c:	d00d      	beq.n	800e86a <gc_execute_block+0xfee>
        if(gc_block.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 800e84e:	4b62      	ldr	r3, [pc, #392]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e850:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800e854:	2b01      	cmp	r3, #1
 800e856:	d024      	beq.n	800e8a2 <gc_execute_block+0x1026>
        } else if(gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 800e858:	4b61      	ldr	r3, [pc, #388]	@ (800e9e0 <gc_execute_block+0x1164>)
 800e85a:	7edb      	ldrb	r3, [r3, #27]
 800e85c:	2b01      	cmp	r3, #1
 800e85e:	d04e      	beq.n	800e8fe <gc_execute_block+0x1082>
        gc_state.modal.spindle.rpm_mode = gc_block.modal.spindle.rpm_mode;
 800e860:	4b5d      	ldr	r3, [pc, #372]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e862:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800e866:	4b5e      	ldr	r3, [pc, #376]	@ (800e9e0 <gc_execute_block+0x1164>)
 800e868:	76da      	strb	r2, [r3, #27]
    spindle_event = gc_block.words.s && !user_words.s;
 800e86a:	4b5b      	ldr	r3, [pc, #364]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e86c:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e870:	f013 0308 	ands.w	r3, r3, #8
 800e874:	d051      	beq.n	800e91a <gc_execute_block+0x109e>
 800e876:	4a5b      	ldr	r2, [pc, #364]	@ (800e9e4 <gc_execute_block+0x1168>)
 800e878:	7892      	ldrb	r2, [r2, #2]
 800e87a:	f012 0f08 	tst.w	r2, #8
 800e87e:	f000 8089 	beq.w	800e994 <gc_execute_block+0x1118>
 800e882:	2200      	movs	r2, #0
 800e884:	e04a      	b.n	800e91c <gc_execute_block+0x10a0>
        gc_block.spindle = gc_state.spindle.hal;
 800e886:	4b56      	ldr	r3, [pc, #344]	@ (800e9e0 <gc_execute_block+0x1164>)
 800e888:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e88a:	4b53      	ldr	r3, [pc, #332]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e88c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 800e890:	e7d4      	b.n	800e83c <gc_execute_block+0xfc0>
    if(gc_block.modal.feed_mode == FeedMode_UnitsPerRev && !gc_state.spindle.hal->get_data)
 800e892:	4b53      	ldr	r3, [pc, #332]	@ (800e9e0 <gc_execute_block+0x1164>)
 800e894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d1d3      	bne.n	800e844 <gc_execute_block+0xfc8>
        FAIL(Status_GcodeUnsupportedCommand); // [G95 not supported]
 800e89c:	2414      	movs	r4, #20
 800e89e:	f7ff b8ca 	b.w	800da36 <gc_execute_block+0x1ba>
            if(!gc_state.spindle.hal->cap.variable)
 800e8a2:	4b4f      	ldr	r3, [pc, #316]	@ (800e9e0 <gc_execute_block+0x1164>)
 800e8a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e8a6:	7a9a      	ldrb	r2, [r3, #10]
 800e8a8:	f012 0f01 	tst.w	r2, #1
 800e8ac:	f002 8621 	beq.w	80114f2 <gc_execute_block+0x3c76>
            if (!gc_block.words.s) // TODO: add check for S0?
 800e8b0:	4a49      	ldr	r2, [pc, #292]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e8b2:	f892 20ba 	ldrb.w	r2, [r2, #186]	@ 0xba
 800e8b6:	f012 0f08 	tst.w	r2, #8
 800e8ba:	f002 861d 	beq.w	80114f8 <gc_execute_block+0x3c7c>
            if (gc_block.words.d) {
 800e8be:	4a46      	ldr	r2, [pc, #280]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e8c0:	f992 20b8 	ldrsb.w	r2, [r2, #184]	@ 0xb8
 800e8c4:	2a00      	cmp	r2, #0
 800e8c6:	db03      	blt.n	800e8d0 <gc_execute_block+0x1054>
                gc_state.spindle.hal->param->css.max_rpm = gc_state.spindle.hal->rpm_max;
 800e8c8:	685a      	ldr	r2, [r3, #4]
 800e8ca:	699b      	ldr	r3, [r3, #24]
 800e8cc:	61d3      	str	r3, [r2, #28]
 800e8ce:	e7c7      	b.n	800e860 <gc_execute_block+0xfe4>
                gc_state.spindle.hal->param->css.max_rpm = min(gc_block.values.d, gc_state.spindle.hal->rpm_max);
 800e8d0:	4a41      	ldr	r2, [pc, #260]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e8d2:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 800e8d6:	edd3 7a06 	vldr	s15, [r3, #24]
 800e8da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8e2:	d501      	bpl.n	800e8e8 <gc_execute_block+0x106c>
 800e8e4:	eef0 7a47 	vmov.f32	s15, s14
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	edc3 7a07 	vstr	s15, [r3, #28]
                gc_block.words.d = Off;
 800e8ee:	4b3a      	ldr	r3, [pc, #232]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e8f0:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800e8f4:	f36f 12c7 	bfc	r2, #7, #1
 800e8f8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e8fc:	e7b0      	b.n	800e860 <gc_execute_block+0xfe4>
            if(gc_state.spindle.css) {
 800e8fe:	4b38      	ldr	r3, [pc, #224]	@ (800e9e0 <gc_execute_block+0x1164>)
 800e900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e902:	b123      	cbz	r3, 800e90e <gc_execute_block+0x1092>
                gc_state.spindle.css = NULL;
 800e904:	4b36      	ldr	r3, [pc, #216]	@ (800e9e0 <gc_execute_block+0x1164>)
 800e906:	2200      	movs	r2, #0
 800e908:	659a      	str	r2, [r3, #88]	@ 0x58
                protocol_buffer_synchronize(); // Empty planner buffer to ensure we get RPM at end of last CSS motion
 800e90a:	f009 fa83 	bl	8017e14 <protocol_buffer_synchronize>
            gc_state.spindle.rpm = gc_state.spindle.hal->param->rpm; // Is it correct to restore latest spindle RPM here?
 800e90e:	4b34      	ldr	r3, [pc, #208]	@ (800e9e0 <gc_execute_block+0x1164>)
 800e910:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e912:	6852      	ldr	r2, [r2, #4]
 800e914:	6812      	ldr	r2, [r2, #0]
 800e916:	651a      	str	r2, [r3, #80]	@ 0x50
 800e918:	e7a2      	b.n	800e860 <gc_execute_block+0xfe4>
    spindle_event = gc_block.words.s && !user_words.s;
 800e91a:	2200      	movs	r2, #0
 800e91c:	9208      	str	r2, [sp, #32]
    if (!gc_block.words.s)
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d13f      	bne.n	800e9a2 <gc_execute_block+0x1126>
        gc_block.values.s = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? gc_state.spindle.rpm : gc_state.spindle.hal->param->css.max_rpm;
 800e922:	4b2f      	ldr	r3, [pc, #188]	@ (800e9e0 <gc_execute_block+0x1164>)
 800e924:	7edb      	ldrb	r3, [r3, #27]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d136      	bne.n	800e998 <gc_execute_block+0x111c>
 800e92a:	4b2d      	ldr	r3, [pc, #180]	@ (800e9e0 <gc_execute_block+0x1164>)
 800e92c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e92e:	4b2a      	ldr	r3, [pc, #168]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e930:	669a      	str	r2, [r3, #104]	@ 0x68
    if(set_tool) { // M61
 800e932:	9b07      	ldr	r3, [sp, #28]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d064      	beq.n	800ea02 <gc_execute_block+0x1186>
        if(!gc_block.words.q)
 800e938:	4b27      	ldr	r3, [pc, #156]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e93a:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e93e:	f013 0f02 	tst.w	r3, #2
 800e942:	f002 85dc 	beq.w	80114fe <gc_execute_block+0x3c82>
        if (floorf(gc_block.values.q) - gc_block.values.q != 0.0f)
 800e946:	4b24      	ldr	r3, [pc, #144]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e948:	ed93 8a18 	vldr	s16, [r3, #96]	@ 0x60
 800e94c:	eeb0 0a48 	vmov.f32	s0, s16
 800e950:	f019 f89e 	bl	8027a90 <floorf>
 800e954:	ee70 7a48 	vsub.f32	s15, s0, s16
 800e958:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e960:	f042 85d0 	bne.w	8011504 <gc_execute_block+0x3c88>
        if ((uint32_t)gc_block.values.q > (grbl.tool_table.n_tools ? grbl.tool_table.n_tools : MAX_TOOL_NUMBER))
 800e964:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800e968:	ee17 3a90 	vmov	r3, s15
 800e96c:	4a1e      	ldr	r2, [pc, #120]	@ (800e9e8 <gc_execute_block+0x116c>)
 800e96e:	6992      	ldr	r2, [r2, #24]
 800e970:	2a00      	cmp	r2, #0
 800e972:	d042      	beq.n	800e9fa <gc_execute_block+0x117e>
 800e974:	2100      	movs	r1, #0
 800e976:	429a      	cmp	r2, r3
 800e978:	f171 0100 	sbcs.w	r1, r1, #0
 800e97c:	f2c2 85c5 	blt.w	801150a <gc_execute_block+0x3c8e>
        gc_block.values.t = (uint32_t)gc_block.values.q;
 800e980:	4a15      	ldr	r2, [pc, #84]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e982:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
        gc_block.words.q = Off;
 800e986:	f892 30ba 	ldrb.w	r3, [r2, #186]	@ 0xba
 800e98a:	f36f 0341 	bfc	r3, #1, #1
 800e98e:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
 800e992:	e041      	b.n	800ea18 <gc_execute_block+0x119c>
    spindle_event = gc_block.words.s && !user_words.s;
 800e994:	2201      	movs	r2, #1
 800e996:	e7c1      	b.n	800e91c <gc_execute_block+0x10a0>
        gc_block.values.s = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? gc_state.spindle.rpm : gc_state.spindle.hal->param->css.max_rpm;
 800e998:	4b11      	ldr	r3, [pc, #68]	@ (800e9e0 <gc_execute_block+0x1164>)
 800e99a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	69da      	ldr	r2, [r3, #28]
 800e9a0:	e7c5      	b.n	800e92e <gc_execute_block+0x10b2>
    else if(!user_words.s && gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 800e9a2:	4b10      	ldr	r3, [pc, #64]	@ (800e9e4 <gc_execute_block+0x1168>)
 800e9a4:	789b      	ldrb	r3, [r3, #2]
 800e9a6:	f013 0f08 	tst.w	r3, #8
 800e9aa:	d1c2      	bne.n	800e932 <gc_execute_block+0x10b6>
 800e9ac:	4b0c      	ldr	r3, [pc, #48]	@ (800e9e0 <gc_execute_block+0x1164>)
 800e9ae:	7edb      	ldrb	r3, [r3, #27]
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	d1be      	bne.n	800e932 <gc_execute_block+0x10b6>
        gc_block.values.s *= (gc_block.modal.units_imperial ? MM_PER_INCH * 12.0f : 1000.0f); // convert surface speed to mm/min
 800e9b4:	4b08      	ldr	r3, [pc, #32]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e9b6:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800e9ba:	7adb      	ldrb	r3, [r3, #11]
 800e9bc:	b1d3      	cbz	r3, 800e9f4 <gc_execute_block+0x1178>
 800e9be:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800e9ec <gc_execute_block+0x1170>
 800e9c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e9c6:	4b04      	ldr	r3, [pc, #16]	@ (800e9d8 <gc_execute_block+0x115c>)
 800e9c8:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
        gc_state.spindle.hal->param->css.surface_speed = gc_block.values.s;
 800e9cc:	4b04      	ldr	r3, [pc, #16]	@ (800e9e0 <gc_execute_block+0x1164>)
 800e9ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	edc3 7a04 	vstr	s15, [r3, #16]
 800e9d6:	e7ac      	b.n	800e932 <gc_execute_block+0x10b6>
 800e9d8:	200016c0 	.word	0x200016c0
 800e9dc:	41cb3333 	.word	0x41cb3333
 800e9e0:	200017c8 	.word	0x200017c8
 800e9e4:	200016bc 	.word	0x200016bc
 800e9e8:	20001c78 	.word	0x20001c78
 800e9ec:	43986666 	.word	0x43986666
 800e9f0:	447a0000 	.word	0x447a0000
        gc_block.values.s *= (gc_block.modal.units_imperial ? MM_PER_INCH * 12.0f : 1000.0f); // convert surface speed to mm/min
 800e9f4:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 800e9f0 <gc_execute_block+0x1174>
 800e9f8:	e7e3      	b.n	800e9c2 <gc_execute_block+0x1146>
        if ((uint32_t)gc_block.values.q > (grbl.tool_table.n_tools ? grbl.tool_table.n_tools : MAX_TOOL_NUMBER))
 800e9fa:	f06f 0201 	mvn.w	r2, #1
 800e9fe:	2100      	movs	r1, #0
 800ea00:	e7b9      	b.n	800e976 <gc_execute_block+0x10fa>
    } else if (!gc_block.words.t)
 800ea02:	4bab      	ldr	r3, [pc, #684]	@ (800ecb0 <gc_execute_block+0x1434>)
 800ea04:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800ea08:	f013 0f10 	tst.w	r3, #16
 800ea0c:	d104      	bne.n	800ea18 <gc_execute_block+0x119c>
        gc_block.values.t = gc_state.tool_pending;
 800ea0e:	4ba9      	ldr	r3, [pc, #676]	@ (800ecb4 <gc_execute_block+0x1438>)
 800ea10:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800ea12:	4ba7      	ldr	r3, [pc, #668]	@ (800ecb0 <gc_execute_block+0x1434>)
 800ea14:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    if(command_words.M10 && port_command) {
 800ea18:	f3c7 4907 	ubfx	r9, r7, #16, #8
 800ea1c:	f019 0410 	ands.w	r4, r9, #16
 800ea20:	d071      	beq.n	800eb06 <gc_execute_block+0x128a>
 800ea22:	9b06      	ldr	r3, [sp, #24]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d06e      	beq.n	800eb06 <gc_execute_block+0x128a>
        switch(port_command) {
 800ea28:	2b42      	cmp	r3, #66	@ 0x42
 800ea2a:	f000 80a4 	beq.w	800eb76 <gc_execute_block+0x12fa>
 800ea2e:	d836      	bhi.n	800ea9e <gc_execute_block+0x1222>
 800ea30:	3b3e      	subs	r3, #62	@ 0x3e
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	2b03      	cmp	r3, #3
 800ea36:	d866      	bhi.n	800eb06 <gc_execute_block+0x128a>
                if(!gc_block.words.p)
 800ea38:	4b9d      	ldr	r3, [pc, #628]	@ (800ecb0 <gc_execute_block+0x1434>)
 800ea3a:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800ea3e:	f013 0f01 	tst.w	r3, #1
 800ea42:	f002 8565 	beq.w	8011510 <gc_execute_block+0x3c94>
                if(gc_block.values.p < 0.0f)
 800ea46:	4b9a      	ldr	r3, [pc, #616]	@ (800ecb0 <gc_execute_block+0x1434>)
 800ea48:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ea4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ea50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea54:	f102 855f 	bmi.w	8011516 <gc_execute_block+0x3c9a>
                if((uint32_t)gc_block.values.p + 1 > hal.port.num_digital_out)
 800ea58:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ea5c:	ee17 3a10 	vmov	r3, s14
 800ea60:	3301      	adds	r3, #1
 800ea62:	4a95      	ldr	r2, [pc, #596]	@ (800ecb8 <gc_execute_block+0x143c>)
 800ea64:	f892 2115 	ldrb.w	r2, [r2, #277]	@ 0x115
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	f202 8557 	bhi.w	801151c <gc_execute_block+0x3ca0>
                gc_block.output_command.is_digital = true;
 800ea6e:	4a90      	ldr	r2, [pc, #576]	@ (800ecb0 <gc_execute_block+0x1434>)
 800ea70:	2301      	movs	r3, #1
 800ea72:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
                gc_block.output_command.port = (uint8_t)gc_block.values.p;
 800ea76:	ee17 3a10 	vmov	r3, s14
 800ea7a:	f882 30be 	strb.w	r3, [r2, #190]	@ 0xbe
                gc_block.output_command.value = port_command == 62 || port_command == 64 ? 1.0f : 0.0f;
 800ea7e:	9b06      	ldr	r3, [sp, #24]
 800ea80:	2b3e      	cmp	r3, #62	@ 0x3e
 800ea82:	d076      	beq.n	800eb72 <gc_execute_block+0x12f6>
 800ea84:	2b40      	cmp	r3, #64	@ 0x40
 800ea86:	d072      	beq.n	800eb6e <gc_execute_block+0x12f2>
 800ea88:	2200      	movs	r2, #0
 800ea8a:	4b89      	ldr	r3, [pc, #548]	@ (800ecb0 <gc_execute_block+0x1434>)
 800ea8c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
                gc_block.words.p = Off;
 800ea90:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800ea94:	f36f 0200 	bfc	r2, #0, #1
 800ea98:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                break;
 800ea9c:	e033      	b.n	800eb06 <gc_execute_block+0x128a>
        switch(port_command) {
 800ea9e:	9b06      	ldr	r3, [sp, #24]
 800eaa0:	3b43      	subs	r3, #67	@ 0x43
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	d82e      	bhi.n	800eb06 <gc_execute_block+0x128a>
                if(!(gc_block.words.e || gc_block.words.q))
 800eaa8:	4b81      	ldr	r3, [pc, #516]	@ (800ecb0 <gc_execute_block+0x1434>)
 800eaaa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800eaae:	4a83      	ldr	r2, [pc, #524]	@ (800ecbc <gc_execute_block+0x1440>)
 800eab0:	421a      	tst	r2, r3
 800eab2:	f002 8569 	beq.w	8011588 <gc_execute_block+0x3d0c>
                if((uint32_t)gc_block.values.e + 1 > hal.port.num_analog_out)
 800eab6:	4b7e      	ldr	r3, [pc, #504]	@ (800ecb0 <gc_execute_block+0x1434>)
 800eab8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800eabc:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800eac0:	ee17 3a10 	vmov	r3, s14
 800eac4:	3301      	adds	r3, #1
 800eac6:	4a7c      	ldr	r2, [pc, #496]	@ (800ecb8 <gc_execute_block+0x143c>)
 800eac8:	f892 2117 	ldrb.w	r2, [r2, #279]	@ 0x117
 800eacc:	4293      	cmp	r3, r2
 800eace:	f202 855e 	bhi.w	801158e <gc_execute_block+0x3d12>
                gc_block.output_command.is_digital = false;
 800ead2:	4b77      	ldr	r3, [pc, #476]	@ (800ecb0 <gc_execute_block+0x1434>)
 800ead4:	2100      	movs	r1, #0
 800ead6:	f883 10bc 	strb.w	r1, [r3, #188]	@ 0xbc
                gc_block.output_command.port = (uint8_t)gc_block.values.e;
 800eada:	ee17 2a10 	vmov	r2, s14
 800eade:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
                gc_block.output_command.value = gc_block.values.q;
 800eae2:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800eae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eaea:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
                gc_block.words.e = gc_block.words.q = Off;
 800eaee:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800eaf2:	f361 0241 	bfi	r2, r1, #1, #1
 800eaf6:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800eafa:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800eafe:	f361 0200 	bfi	r2, r1, #0, #1
 800eb02:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
    if(command_words.M7 && gc_block.modal.spindle.state.ccw) {
 800eb06:	f019 0f02 	tst.w	r9, #2
 800eb0a:	d010      	beq.n	800eb2e <gc_execute_block+0x12b2>
 800eb0c:	4b68      	ldr	r3, [pc, #416]	@ (800ecb0 <gc_execute_block+0x1434>)
 800eb0e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800eb12:	f013 0f02 	tst.w	r3, #2
 800eb16:	d00a      	beq.n	800eb2e <gc_execute_block+0x12b2>
        if(gc_block.spindle == NULL) {
 800eb18:	4b65      	ldr	r3, [pc, #404]	@ (800ecb0 <gc_execute_block+0x1434>)
 800eb1a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	f000 809c 	beq.w	800ec5c <gc_execute_block+0x13e0>
        } else if(!(gc_block.spindle->cap.direction || gc_block.spindle->cap.laser))
 800eb24:	7a9b      	ldrb	r3, [r3, #10]
 800eb26:	f013 0f0a 	tst.w	r3, #10
 800eb2a:	f002 8533 	beq.w	8011594 <gc_execute_block+0x3d18>
    if (command_words.M9) {
 800eb2e:	f019 0f08 	tst.w	r9, #8
 800eb32:	f000 80d3 	beq.w	800ecdc <gc_execute_block+0x1460>
        if(!gc_block.words.p)
 800eb36:	4b5e      	ldr	r3, [pc, #376]	@ (800ecb0 <gc_execute_block+0x1434>)
 800eb38:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800eb3c:	f013 0f01 	tst.w	r3, #1
 800eb40:	f040 80a5 	bne.w	800ec8e <gc_execute_block+0x1412>
            gc_block.values.p = 1.0f;
 800eb44:	4b5a      	ldr	r3, [pc, #360]	@ (800ecb0 <gc_execute_block+0x1434>)
 800eb46:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800eb4a:	65da      	str	r2, [r3, #92]	@ 0x5c
        switch(gc_block.override_command) {
 800eb4c:	4b58      	ldr	r3, [pc, #352]	@ (800ecb0 <gc_execute_block+0x1434>)
 800eb4e:	785b      	ldrb	r3, [r3, #1]
 800eb50:	3b30      	subs	r3, #48	@ 0x30
 800eb52:	2b08      	cmp	r3, #8
 800eb54:	f200 80c2 	bhi.w	800ecdc <gc_execute_block+0x1460>
 800eb58:	e8df f013 	tbh	[pc, r3, lsl #1]
 800eb5c:	00ff00b4 	.word	0x00ff00b4
 800eb60:	011d010c 	.word	0x011d010c
 800eb64:	012e00c0 	.word	0x012e00c0
 800eb68:	00c000c0 	.word	0x00c000c0
 800eb6c:	013f      	.short	0x013f
                gc_block.output_command.value = port_command == 62 || port_command == 64 ? 1.0f : 0.0f;
 800eb6e:	2201      	movs	r2, #1
 800eb70:	e78b      	b.n	800ea8a <gc_execute_block+0x120e>
 800eb72:	2201      	movs	r2, #1
 800eb74:	e789      	b.n	800ea8a <gc_execute_block+0x120e>
                if(!(gc_block.words.l || gc_block.words.q))
 800eb76:	4b4e      	ldr	r3, [pc, #312]	@ (800ecb0 <gc_execute_block+0x1434>)
 800eb78:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800eb7c:	f412 3f04 	tst.w	r2, #135168	@ 0x21000
 800eb80:	f002 84cf 	beq.w	8011522 <gc_execute_block+0x3ca6>
                if(gc_block.words.p && gc_block.words.e)
 800eb84:	4b4e      	ldr	r3, [pc, #312]	@ (800ecc0 <gc_execute_block+0x1444>)
 800eb86:	4393      	bics	r3, r2
 800eb88:	f002 84ce 	beq.w	8011528 <gc_execute_block+0x3cac>
                if(gc_block.values.l >= (uint8_t)WaitMode_Max)
 800eb8c:	4b48      	ldr	r3, [pc, #288]	@ (800ecb0 <gc_execute_block+0x1434>)
 800eb8e:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 800eb92:	2a04      	cmp	r2, #4
 800eb94:	f202 84e6 	bhi.w	8011564 <gc_execute_block+0x3ce8>
                if((wait_mode_t)gc_block.values.l != WaitMode_Immediate && gc_block.values.q == 0.0f)
 800eb98:	b13a      	cbz	r2, 800ebaa <gc_execute_block+0x132e>
 800eb9a:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800eb9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800eba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba6:	f002 84e0 	beq.w	801156a <gc_execute_block+0x3cee>
                if(gc_block.words.p) {
 800ebaa:	4b41      	ldr	r3, [pc, #260]	@ (800ecb0 <gc_execute_block+0x1434>)
 800ebac:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800ebb0:	f013 0f01 	tst.w	r3, #1
 800ebb4:	d01b      	beq.n	800ebee <gc_execute_block+0x1372>
                    if(gc_block.values.p < 0.0f)
 800ebb6:	4b3e      	ldr	r3, [pc, #248]	@ (800ecb0 <gc_execute_block+0x1434>)
 800ebb8:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ebbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ebc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc4:	f102 84d4 	bmi.w	8011570 <gc_execute_block+0x3cf4>
                    if((uint32_t)gc_block.values.p + 1 > hal.port.num_digital_in)
 800ebc8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ebcc:	ee17 3a10 	vmov	r3, s14
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	4939      	ldr	r1, [pc, #228]	@ (800ecb8 <gc_execute_block+0x143c>)
 800ebd4:	f891 1114 	ldrb.w	r1, [r1, #276]	@ 0x114
 800ebd8:	428b      	cmp	r3, r1
 800ebda:	f202 84cc 	bhi.w	8011576 <gc_execute_block+0x3cfa>
                    gc_block.output_command.is_digital = true;
 800ebde:	4934      	ldr	r1, [pc, #208]	@ (800ecb0 <gc_execute_block+0x1434>)
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	f881 30bc 	strb.w	r3, [r1, #188]	@ 0xbc
                    gc_block.output_command.port = (uint8_t)gc_block.values.p;
 800ebe6:	ee17 3a10 	vmov	r3, s14
 800ebea:	f881 30be 	strb.w	r3, [r1, #190]	@ 0xbe
                if(gc_block.words.e) {
 800ebee:	4b30      	ldr	r3, [pc, #192]	@ (800ecb0 <gc_execute_block+0x1434>)
 800ebf0:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800ebf4:	f013 0f01 	tst.w	r3, #1
 800ebf8:	d018      	beq.n	800ec2c <gc_execute_block+0x13b0>
                    if((uint32_t)gc_block.values.e + 1 > hal.port.num_analog_in)
 800ebfa:	4b2d      	ldr	r3, [pc, #180]	@ (800ecb0 <gc_execute_block+0x1434>)
 800ebfc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800ec00:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ec04:	ee17 3a10 	vmov	r3, s14
 800ec08:	3301      	adds	r3, #1
 800ec0a:	492b      	ldr	r1, [pc, #172]	@ (800ecb8 <gc_execute_block+0x143c>)
 800ec0c:	f891 1116 	ldrb.w	r1, [r1, #278]	@ 0x116
 800ec10:	428b      	cmp	r3, r1
 800ec12:	f202 84b3 	bhi.w	801157c <gc_execute_block+0x3d00>
                    if((wait_mode_t)gc_block.values.l != WaitMode_Immediate)
 800ec16:	2a00      	cmp	r2, #0
 800ec18:	f042 84b3 	bne.w	8011582 <gc_execute_block+0x3d06>
                    gc_block.output_command.is_digital = false;
 800ec1c:	4a24      	ldr	r2, [pc, #144]	@ (800ecb0 <gc_execute_block+0x1434>)
 800ec1e:	2300      	movs	r3, #0
 800ec20:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
                    gc_block.output_command.port = (uint8_t)gc_block.values.e;
 800ec24:	ee17 3a10 	vmov	r3, s14
 800ec28:	f882 30be 	strb.w	r3, [r2, #190]	@ 0xbe
                gc_block.words.e = gc_block.words.l = gc_block.words.p = gc_block.words.q = Off;
 800ec2c:	4b20      	ldr	r3, [pc, #128]	@ (800ecb0 <gc_execute_block+0x1434>)
 800ec2e:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800ec32:	f36f 0241 	bfc	r2, #1, #1
 800ec36:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800ec3a:	b2d2      	uxtb	r2, r2
 800ec3c:	f36f 0200 	bfc	r2, #0, #1
 800ec40:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800ec44:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800ec48:	f36f 1204 	bfc	r2, #4, #1
 800ec4c:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800ec50:	b2d2      	uxtb	r2, r2
 800ec52:	f36f 0200 	bfc	r2, #0, #1
 800ec56:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
                break;
 800ec5a:	e754      	b.n	800eb06 <gc_execute_block+0x128a>
                if(spindle_is_enabled(idx) && !(spindle_get(idx)->cap.direction || spindle_get(idx)->cap.laser))
 800ec5c:	2000      	movs	r0, #0
 800ec5e:	f00f fccd 	bl	801e5fc <spindle_is_enabled>
 800ec62:	2800      	cmp	r0, #0
 800ec64:	f43f af63 	beq.w	800eb2e <gc_execute_block+0x12b2>
 800ec68:	2000      	movs	r0, #0
 800ec6a:	f00f fcdd 	bl	801e628 <spindle_get>
 800ec6e:	7a83      	ldrb	r3, [r0, #10]
 800ec70:	f013 0f02 	tst.w	r3, #2
 800ec74:	f47f af5b 	bne.w	800eb2e <gc_execute_block+0x12b2>
 800ec78:	2000      	movs	r0, #0
 800ec7a:	f00f fcd5 	bl	801e628 <spindle_get>
 800ec7e:	7a83      	ldrb	r3, [r0, #10]
 800ec80:	f013 0f08 	tst.w	r3, #8
 800ec84:	f47f af53 	bne.w	800eb2e <gc_execute_block+0x12b2>
                    FAIL(Status_GcodeUnsupportedCommand);
 800ec88:	2414      	movs	r4, #20
 800ec8a:	f7fe bed4 	b.w	800da36 <gc_execute_block+0x1ba>
            if(gc_block.values.p < 0.0f)
 800ec8e:	4b08      	ldr	r3, [pc, #32]	@ (800ecb0 <gc_execute_block+0x1434>)
 800ec90:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ec94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ec98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec9c:	f102 847d 	bmi.w	801159a <gc_execute_block+0x3d1e>
            gc_block.words.p = Off;
 800eca0:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800eca4:	f36f 0200 	bfc	r2, #0, #1
 800eca8:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800ecac:	e74e      	b.n	800eb4c <gc_execute_block+0x12d0>
 800ecae:	bf00      	nop
 800ecb0:	200016c0 	.word	0x200016c0
 800ecb4:	200017c8 	.word	0x200017c8
 800ecb8:	20001a90 	.word	0x20001a90
 800ecbc:	00020100 	.word	0x00020100
 800ecc0:	00010100 	.word	0x00010100
                gc_block.modal.override_ctrl.feed_rate_disable = Off;
 800ecc4:	4ba5      	ldr	r3, [pc, #660]	@ (800ef5c <gc_execute_block+0x16e0>)
 800ecc6:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800ecca:	f36f 0200 	bfc	r2, #0, #1
 800ecce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                gc_block.modal.override_ctrl.spindle_rpm_disable = Off;
 800ecd2:	b2d2      	uxtb	r2, r2
 800ecd4:	f36f 0282 	bfc	r2, #2, #1
 800ecd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (command_words.M10 && gc_block.user_mcode) {
 800ecdc:	b1d4      	cbz	r4, 800ed14 <gc_execute_block+0x1498>
 800ecde:	4b9f      	ldr	r3, [pc, #636]	@ (800ef5c <gc_execute_block+0x16e0>)
 800ece0:	885b      	ldrh	r3, [r3, #2]
 800ece2:	b1bb      	cbz	r3, 800ed14 <gc_execute_block+0x1498>
        user_words.mask = gc_block.words.mask;
 800ece4:	489d      	ldr	r0, [pc, #628]	@ (800ef5c <gc_execute_block+0x16e0>)
 800ece6:	4601      	mov	r1, r0
 800ece8:	f851 2fb8 	ldr.w	r2, [r1, #184]!
 800ecec:	4b9c      	ldr	r3, [pc, #624]	@ (800ef60 <gc_execute_block+0x16e4>)
 800ecee:	601a      	str	r2, [r3, #0]
        if((int_value = (uint_fast16_t)hal.user_mcode.validate(&gc_block, &gc_block.words)))
 800ecf0:	4b9c      	ldr	r3, [pc, #624]	@ (800ef64 <gc_execute_block+0x16e8>)
 800ecf2:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800ecf6:	4798      	blx	r3
 800ecf8:	4604      	mov	r4, r0
 800ecfa:	2800      	cmp	r0, #0
 800ecfc:	f47e ae9b 	bne.w	800da36 <gc_execute_block+0x1ba>
        user_words.mask ^= gc_block.words.mask; // Flag "taken" words for execution
 800ed00:	4a97      	ldr	r2, [pc, #604]	@ (800ef60 <gc_execute_block+0x16e4>)
 800ed02:	6813      	ldr	r3, [r2, #0]
 800ed04:	4995      	ldr	r1, [pc, #596]	@ (800ef5c <gc_execute_block+0x16e0>)
 800ed06:	f8d1 10b8 	ldr.w	r1, [r1, #184]	@ 0xb8
 800ed0a:	404b      	eors	r3, r1
 800ed0c:	6013      	str	r3, [r2, #0]
        axis_words.mask = ijk_words.mask = 0;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	9305      	str	r3, [sp, #20]
 800ed12:	469b      	mov	fp, r3
    if (gc_block.non_modal_command == NonModal_Dwell) {
 800ed14:	4b91      	ldr	r3, [pc, #580]	@ (800ef5c <gc_execute_block+0x16e0>)
 800ed16:	781c      	ldrb	r4, [r3, #0]
 800ed18:	2c04      	cmp	r4, #4
 800ed1a:	d114      	bne.n	800ed46 <gc_execute_block+0x14ca>
        if (!gc_block.words.p)
 800ed1c:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800ed20:	f013 0f01 	tst.w	r3, #1
 800ed24:	f002 843c 	beq.w	80115a0 <gc_execute_block+0x3d24>
        if(gc_block.values.p < 0.0f)
 800ed28:	4b8c      	ldr	r3, [pc, #560]	@ (800ef5c <gc_execute_block+0x16e0>)
 800ed2a:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ed2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ed32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed36:	f53e ae7e 	bmi.w	800da36 <gc_execute_block+0x1ba>
        gc_block.words.p = Off;
 800ed3a:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800ed3e:	f36f 0200 	bfc	r2, #0, #1
 800ed42:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
    gc_get_plane_data(&plane, gc_block.modal.plane_select);
 800ed46:	4c85      	ldr	r4, [pc, #532]	@ (800ef5c <gc_execute_block+0x16e0>)
 800ed48:	7ba1      	ldrb	r1, [r4, #14]
 800ed4a:	a822      	add	r0, sp, #136	@ 0x88
 800ed4c:	f7fe fba4 	bl	800d498 <gc_get_plane_data>
    if (gc_block.modal.units_imperial) do { // Axes indices are consistent, so loop may be used.
 800ed50:	7ae3      	ldrb	r3, [r4, #11]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d06f      	beq.n	800ee36 <gc_execute_block+0x15ba>
    uint_fast8_t idx = N_AXIS;
 800ed56:	2303      	movs	r3, #3
 800ed58:	e058      	b.n	800ee0c <gc_execute_block+0x1590>
                gc_block.modal.override_ctrl.feed_rate_disable = On;
 800ed5a:	4b80      	ldr	r3, [pc, #512]	@ (800ef5c <gc_execute_block+0x16e0>)
 800ed5c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800ed60:	f042 0201 	orr.w	r2, r2, #1
 800ed64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                gc_block.modal.override_ctrl.spindle_rpm_disable = On;
 800ed68:	b2d2      	uxtb	r2, r2
 800ed6a:	f042 0204 	orr.w	r2, r2, #4
 800ed6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800ed72:	e7b3      	b.n	800ecdc <gc_execute_block+0x1460>
                gc_block.modal.override_ctrl.feed_rate_disable = gc_block.values.p == 0.0f;
 800ed74:	4b79      	ldr	r3, [pc, #484]	@ (800ef5c <gc_execute_block+0x16e0>)
 800ed76:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ed7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ed7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed82:	bf0c      	ite	eq
 800ed84:	2101      	moveq	r1, #1
 800ed86:	2100      	movne	r1, #0
 800ed88:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800ed8c:	f361 0200 	bfi	r2, r1, #0, #1
 800ed90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800ed94:	e7a2      	b.n	800ecdc <gc_execute_block+0x1460>
                gc_block.modal.override_ctrl.spindle_rpm_disable = gc_block.values.p == 0.0f;
 800ed96:	4b71      	ldr	r3, [pc, #452]	@ (800ef5c <gc_execute_block+0x16e0>)
 800ed98:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ed9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800eda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eda4:	bf0c      	ite	eq
 800eda6:	2101      	moveq	r1, #1
 800eda8:	2100      	movne	r1, #0
 800edaa:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800edae:	f361 0282 	bfi	r2, r1, #2, #1
 800edb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800edb6:	e791      	b.n	800ecdc <gc_execute_block+0x1460>
                gc_block.modal.override_ctrl.feed_hold_disable = gc_block.values.p == 0.0f;
 800edb8:	4b68      	ldr	r3, [pc, #416]	@ (800ef5c <gc_execute_block+0x16e0>)
 800edba:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800edbe:	eef5 7a40 	vcmp.f32	s15, #0.0
 800edc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edc6:	bf0c      	ite	eq
 800edc8:	2101      	moveq	r1, #1
 800edca:	2100      	movne	r1, #0
 800edcc:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800edd0:	f361 0241 	bfi	r2, r1, #1, #1
 800edd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800edd8:	e780      	b.n	800ecdc <gc_execute_block+0x1460>
                if(settings.parking.flags.enable_override_control)
 800edda:	4b63      	ldr	r3, [pc, #396]	@ (800ef68 <gc_execute_block+0x16ec>)
 800eddc:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800ede0:	f013 0f04 	tst.w	r3, #4
 800ede4:	f43f af7a 	beq.w	800ecdc <gc_execute_block+0x1460>
                    gc_block.modal.override_ctrl.parking_disable = gc_block.values.p == 0.0f;
 800ede8:	4b5c      	ldr	r3, [pc, #368]	@ (800ef5c <gc_execute_block+0x16e0>)
 800edea:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800edee:	eef5 7a40 	vcmp.f32	s15, #0.0
 800edf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edf6:	bf0c      	ite	eq
 800edf8:	2101      	moveq	r1, #1
 800edfa:	2100      	movne	r1, #0
 800edfc:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800ee00:	f361 02c3 	bfi	r2, r1, #3, #1
 800ee04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800ee08:	e768      	b.n	800ecdc <gc_execute_block+0x1460>
    } while(idx);
 800ee0a:	b1a3      	cbz	r3, 800ee36 <gc_execute_block+0x15ba>
        idx--;
 800ee0c:	3b01      	subs	r3, #1
        if (bit_istrue(axis_words.mask, bit(idx))) {
 800ee0e:	fa5f f28b 	uxtb.w	r2, fp
 800ee12:	40da      	lsrs	r2, r3
 800ee14:	f012 0f01 	tst.w	r2, #1
 800ee18:	d0f7      	beq.n	800ee0a <gc_execute_block+0x158e>
            gc_block.values.xyz[idx] *= MM_PER_INCH;
 800ee1a:	f103 0120 	add.w	r1, r3, #32
 800ee1e:	4a4f      	ldr	r2, [pc, #316]	@ (800ef5c <gc_execute_block+0x16e0>)
 800ee20:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ee24:	edd2 7a01 	vldr	s15, [r2, #4]
 800ee28:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800ef6c <gc_execute_block+0x16f0>
 800ee2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee30:	edc2 7a01 	vstr	s15, [r2, #4]
 800ee34:	e7e9      	b.n	800ee0a <gc_execute_block+0x158e>
    if (command_words.G15 && gc_state.modal.diameter_mode != gc_block.modal.diameter_mode) {
 800ee36:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800ee3a:	d005      	beq.n	800ee48 <gc_execute_block+0x15cc>
 800ee3c:	4b4c      	ldr	r3, [pc, #304]	@ (800ef70 <gc_execute_block+0x16f4>)
 800ee3e:	795a      	ldrb	r2, [r3, #5]
 800ee40:	4b46      	ldr	r3, [pc, #280]	@ (800ef5c <gc_execute_block+0x16e0>)
 800ee42:	7b5b      	ldrb	r3, [r3, #13]
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d118      	bne.n	800ee7a <gc_execute_block+0x15fe>
    if(gc_state.modal.diameter_mode && bit_istrue(axis_words.mask, bit(X_AXIS)))
 800ee48:	4b49      	ldr	r3, [pc, #292]	@ (800ef70 <gc_execute_block+0x16f4>)
 800ee4a:	795b      	ldrb	r3, [r3, #5]
 800ee4c:	b15b      	cbz	r3, 800ee66 <gc_execute_block+0x15ea>
 800ee4e:	f01b 0f01 	tst.w	fp, #1
 800ee52:	d008      	beq.n	800ee66 <gc_execute_block+0x15ea>
        gc_block.values.xyz[X_AXIS] /= 2.0f;
 800ee54:	4b41      	ldr	r3, [pc, #260]	@ (800ef5c <gc_execute_block+0x16e0>)
 800ee56:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 800ee5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ee5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee62:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
    if(axis_command == AxisCommand_Scaling) {
 800ee66:	f1ba 0f04 	cmp.w	sl, #4
 800ee6a:	d00c      	beq.n	800ee86 <gc_execute_block+0x160a>
    if(gc_state.modal.scaling_active) {
 800ee6c:	4b40      	ldr	r3, [pc, #256]	@ (800ef70 <gc_execute_block+0x16f4>)
 800ee6e:	7f9b      	ldrb	r3, [r3, #30]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	f000 80b8 	beq.w	800efe6 <gc_execute_block+0x176a>
        idx = N_AXIS;
 800ee76:	2203      	movs	r2, #3
 800ee78:	e098      	b.n	800efac <gc_execute_block+0x1730>
        gc_state.modal.diameter_mode = gc_block.modal.diameter_mode;
 800ee7a:	4a3d      	ldr	r2, [pc, #244]	@ (800ef70 <gc_execute_block+0x16f4>)
 800ee7c:	7153      	strb	r3, [r2, #5]
        system_add_rt_report(Report_LatheXMode);
 800ee7e:	2008      	movs	r0, #8
 800ee80:	f013 f820 	bl	8021ec4 <system_add_rt_report>
 800ee84:	e7e0      	b.n	800ee48 <gc_execute_block+0x15cc>
        if(gc_block.modal.scaling_active) {
 800ee86:	4b35      	ldr	r3, [pc, #212]	@ (800ef5c <gc_execute_block+0x16e0>)
 800ee88:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d05f      	beq.n	800ef50 <gc_execute_block+0x16d4>
            gc_block.modal.scaling_active = false;
 800ee90:	4b32      	ldr	r3, [pc, #200]	@ (800ef5c <gc_execute_block+0x16e0>)
 800ee92:	2200      	movs	r2, #0
 800ee94:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            if (!axis_words.mask)
 800ee98:	fa5f f38b 	uxtb.w	r3, fp
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	f002 8382 	beq.w	80115a6 <gc_execute_block+0x3d2a>
            bool report_scaling = false;
 800eea2:	4616      	mov	r6, r2
            idx = N_AXIS;
 800eea4:	2403      	movs	r4, #3
 800eea6:	e024      	b.n	800eef2 <gc_execute_block+0x1676>
                    report_scaling |= scale_factor.ijk[idx] != gc_block.values.xyz[idx];
 800eea8:	1ca1      	adds	r1, r4, #2
 800eeaa:	4a32      	ldr	r2, [pc, #200]	@ (800ef74 <gc_execute_block+0x16f8>)
 800eeac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800eeb0:	ed92 7a01 	vldr	s14, [r2, #4]
 800eeb4:	f104 0020 	add.w	r0, r4, #32
 800eeb8:	4928      	ldr	r1, [pc, #160]	@ (800ef5c <gc_execute_block+0x16e0>)
 800eeba:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800eebe:	edd1 7a01 	vldr	s15, [r1, #4]
 800eec2:	eeb4 7a67 	vcmp.f32	s14, s15
 800eec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeca:	bf18      	it	ne
 800eecc:	f046 0601 	orrne.w	r6, r6, #1
                    scale_factor.ijk[idx] = gc_block.values.xyz[idx];
 800eed0:	edc2 7a01 	vstr	s15, [r2, #4]
                    bit_false(axis_words.mask, bit(idx));
 800eed4:	f04f 0b01 	mov.w	fp, #1
 800eed8:	fa0b fb04 	lsl.w	fp, fp, r4
 800eedc:	ea23 0b0b 	bic.w	fp, r3, fp
                    system_add_rt_report(Report_Scaling);
 800eee0:	2002      	movs	r0, #2
 800eee2:	f012 ffef 	bl	8021ec4 <system_add_rt_report>
 800eee6:	e00c      	b.n	800ef02 <gc_execute_block+0x1686>
                gc_block.modal.scaling_active = gc_block.modal.scaling_active || (scale_factor.xyz[idx] != 1.0f);
 800eee8:	2301      	movs	r3, #1
 800eeea:	4a1c      	ldr	r2, [pc, #112]	@ (800ef5c <gc_execute_block+0x16e0>)
 800eeec:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
            } while(idx);
 800eef0:	b1e4      	cbz	r4, 800ef2c <gc_execute_block+0x16b0>
                if(bit_istrue(axis_words.mask, bit(--idx))) {
 800eef2:	fa5f f38b 	uxtb.w	r3, fp
 800eef6:	3c01      	subs	r4, #1
 800eef8:	fa23 f204 	lsr.w	r2, r3, r4
 800eefc:	f012 0f01 	tst.w	r2, #1
 800ef00:	d1d2      	bne.n	800eea8 <gc_execute_block+0x162c>
                gc_block.modal.scaling_active = gc_block.modal.scaling_active || (scale_factor.xyz[idx] != 1.0f);
 800ef02:	4b16      	ldr	r3, [pc, #88]	@ (800ef5c <gc_execute_block+0x16e0>)
 800ef04:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d1ed      	bne.n	800eee8 <gc_execute_block+0x166c>
 800ef0c:	4b19      	ldr	r3, [pc, #100]	@ (800ef74 <gc_execute_block+0x16f8>)
 800ef0e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ef12:	ed93 7a00 	vldr	s14, [r3]
 800ef16:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ef1a:	eeb4 7a67 	vcmp.f32	s14, s15
 800ef1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef22:	d001      	beq.n	800ef28 <gc_execute_block+0x16ac>
 800ef24:	2301      	movs	r3, #1
 800ef26:	e7e0      	b.n	800eeea <gc_execute_block+0x166e>
 800ef28:	2300      	movs	r3, #0
 800ef2a:	e7de      	b.n	800eeea <gc_execute_block+0x166e>
            gc_block.words.mask &= ~axis_words_mask.mask; // Remove axis words.
 800ef2c:	4611      	mov	r1, r2
 800ef2e:	f8d2 20b8 	ldr.w	r2, [r2, #184]	@ 0xb8
 800ef32:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 800ef36:	f8c1 20b8 	str.w	r2, [r1, #184]	@ 0xb8
            report_scaling |= gc_state.modal.scaling_active != gc_block.modal.scaling_active;
 800ef3a:	4a0d      	ldr	r2, [pc, #52]	@ (800ef70 <gc_execute_block+0x16f4>)
 800ef3c:	7f91      	ldrb	r1, [r2, #30]
            gc_state.modal.scaling_active = gc_block.modal.scaling_active;
 800ef3e:	7793      	strb	r3, [r2, #30]
            if(report_scaling)
 800ef40:	428b      	cmp	r3, r1
 800ef42:	d101      	bne.n	800ef48 <gc_execute_block+0x16cc>
 800ef44:	2e00      	cmp	r6, #0
 800ef46:	d091      	beq.n	800ee6c <gc_execute_block+0x15f0>
                system_add_rt_report(Report_Scaling);
 800ef48:	2002      	movs	r0, #2
 800ef4a:	f012 ffbb 	bl	8021ec4 <system_add_rt_report>
 800ef4e:	e78d      	b.n	800ee6c <gc_execute_block+0x15f0>
            set_scaling(1.0f);
 800ef50:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ef54:	f7fe f9c8 	bl	800d2e8 <set_scaling>
 800ef58:	e788      	b.n	800ee6c <gc_execute_block+0x15f0>
 800ef5a:	bf00      	nop
 800ef5c:	200016c0 	.word	0x200016c0
 800ef60:	200016bc 	.word	0x200016bc
 800ef64:	20001a90 	.word	0x20001a90
 800ef68:	200024a8 	.word	0x200024a8
 800ef6c:	41cb3333 	.word	0x41cb3333
 800ef70:	200017c8 	.word	0x200017c8
 800ef74:	200001c0 	.word	0x200001c0
                     gc_block.values.xyz[idx] = (gc_block.values.xyz[idx] - scale_factor.xyz[idx]) * scale_factor.ijk[idx] + scale_factor.xyz[idx];
 800ef78:	f102 0120 	add.w	r1, r2, #32
 800ef7c:	4bb2      	ldr	r3, [pc, #712]	@ (800f248 <gc_execute_block+0x19cc>)
 800ef7e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800ef82:	edd3 7a01 	vldr	s15, [r3, #4]
 800ef86:	49b1      	ldr	r1, [pc, #708]	@ (800f24c <gc_execute_block+0x19d0>)
 800ef88:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800ef8c:	ed90 7a00 	vldr	s14, [r0]
 800ef90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ef94:	1c90      	adds	r0, r2, #2
 800ef96:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ef9a:	edd1 6a01 	vldr	s13, [r1, #4]
 800ef9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800efa2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800efa6:	ed83 7a01 	vstr	s14, [r3, #4]
        } while(idx);
 800efaa:	b1e2      	cbz	r2, 800efe6 <gc_execute_block+0x176a>
            if(bit_istrue(axis_words.mask, bit(--idx))) {
 800efac:	fa5f f38b 	uxtb.w	r3, fp
 800efb0:	3a01      	subs	r2, #1
 800efb2:	40d3      	lsrs	r3, r2
 800efb4:	f013 0f01 	tst.w	r3, #1
 800efb8:	d0f7      	beq.n	800efaa <gc_execute_block+0x172e>
                if(gc_block.modal.distance_incremental)
 800efba:	4ba3      	ldr	r3, [pc, #652]	@ (800f248 <gc_execute_block+0x19cc>)
 800efbc:	7b1b      	ldrb	r3, [r3, #12]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d0da      	beq.n	800ef78 <gc_execute_block+0x16fc>
                     gc_block.values.xyz[idx] *= scale_factor.ijk[idx];
 800efc2:	f102 0120 	add.w	r1, r2, #32
 800efc6:	4ba0      	ldr	r3, [pc, #640]	@ (800f248 <gc_execute_block+0x19cc>)
 800efc8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800efcc:	edd3 7a01 	vldr	s15, [r3, #4]
 800efd0:	1c90      	adds	r0, r2, #2
 800efd2:	499e      	ldr	r1, [pc, #632]	@ (800f24c <gc_execute_block+0x19d0>)
 800efd4:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800efd8:	ed91 7a01 	vldr	s14, [r1, #4]
 800efdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800efe0:	edc3 7a01 	vstr	s15, [r3, #4]
 800efe4:	e7e1      	b.n	800efaa <gc_execute_block+0x172e>
    if (command_words.G8) { // Indicates called in block.
 800efe6:	f015 0301 	ands.w	r3, r5, #1
 800efea:	9309      	str	r3, [sp, #36]	@ 0x24
 800efec:	d007      	beq.n	800effe <gc_execute_block+0x1782>
        switch(gc_block.modal.tool_offset_mode) {
 800efee:	4b96      	ldr	r3, [pc, #600]	@ (800f248 <gc_execute_block+0x19cc>)
 800eff0:	7bdb      	ldrb	r3, [r3, #15]
 800eff2:	2b02      	cmp	r3, #2
 800eff4:	d01e      	beq.n	800f034 <gc_execute_block+0x17b8>
 800eff6:	2b03      	cmp	r3, #3
 800eff8:	d049      	beq.n	800f08e <gc_execute_block+0x1812>
 800effa:	2b01      	cmp	r3, #1
 800effc:	d021      	beq.n	800f042 <gc_execute_block+0x17c6>
    if (command_words.G12) { // Check if called in block
 800effe:	f015 0f08 	tst.w	r5, #8
 800f002:	d005      	beq.n	800f010 <gc_execute_block+0x1794>
        if (gc_state.modal.coord_system.id != gc_block.modal.coord_system.id && !settings_read_coord_data(gc_block.modal.coord_system.id, &gc_block.modal.coord_system.xyz))
 800f004:	4b92      	ldr	r3, [pc, #584]	@ (800f250 <gc_execute_block+0x19d4>)
 800f006:	7d1b      	ldrb	r3, [r3, #20]
 800f008:	4a8f      	ldr	r2, [pc, #572]	@ (800f248 <gc_execute_block+0x19cc>)
 800f00a:	7f10      	ldrb	r0, [r2, #28]
 800f00c:	4283      	cmp	r3, r0
 800f00e:	d15b      	bne.n	800f0c8 <gc_execute_block+0x184c>
    switch (gc_block.non_modal_command) {
 800f010:	4b8d      	ldr	r3, [pc, #564]	@ (800f248 <gc_execute_block+0x19cc>)
 800f012:	781b      	ldrb	r3, [r3, #0]
 800f014:	2b0a      	cmp	r3, #10
 800f016:	d060      	beq.n	800f0da <gc_execute_block+0x185e>
 800f018:	2b5c      	cmp	r3, #92	@ 0x5c
 800f01a:	f000 8260 	beq.w	800f4de <gc_execute_block+0x1c62>
            if (axis_words.mask && axis_command != AxisCommand_ToolLengthOffset) { // TLO block any axis command.
 800f01e:	fa5f f48b 	uxtb.w	r4, fp
 800f022:	2c00      	cmp	r4, #0
 800f024:	f000 82ef 	beq.w	800f606 <gc_execute_block+0x1d8a>
 800f028:	f1ba 0f03 	cmp.w	sl, #3
 800f02c:	f000 82eb 	beq.w	800f606 <gc_execute_block+0x1d8a>
                idx = N_AXIS;
 800f030:	2203      	movs	r2, #3
 800f032:	e2b3      	b.n	800f59c <gc_execute_block+0x1d20>
                if(!axis_words.mask)
 800f034:	fa5f f38b 	uxtb.w	r3, fp
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d1e0      	bne.n	800effe <gc_execute_block+0x1782>
                    FAIL(Status_GcodeG43DynamicAxisError);
 800f03c:	2425      	movs	r4, #37	@ 0x25
 800f03e:	f7fe bcfa 	b.w	800da36 <gc_execute_block+0x1ba>
                if(grbl.tool_table.n_tools) {
 800f042:	4b84      	ldr	r3, [pc, #528]	@ (800f254 <gc_execute_block+0x19d8>)
 800f044:	699a      	ldr	r2, [r3, #24]
 800f046:	2a00      	cmp	r2, #0
 800f048:	f002 82b0 	beq.w	80115ac <gc_execute_block+0x3d30>
                    if(gc_block.words.h) {
 800f04c:	4b7e      	ldr	r3, [pc, #504]	@ (800f248 <gc_execute_block+0x19cc>)
 800f04e:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800f052:	f013 0f08 	tst.w	r3, #8
 800f056:	d014      	beq.n	800f082 <gc_execute_block+0x1806>
                        if(gc_block.values.h > grbl.tool_table.n_tools)
 800f058:	4b7b      	ldr	r3, [pc, #492]	@ (800f248 <gc_execute_block+0x19cc>)
 800f05a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f05e:	429a      	cmp	r2, r3
 800f060:	f0c2 82a7 	bcc.w	80115b2 <gc_execute_block+0x3d36>
                        gc_block.words.h = Off;
 800f064:	4a78      	ldr	r2, [pc, #480]	@ (800f248 <gc_execute_block+0x19cc>)
 800f066:	f892 10b9 	ldrb.w	r1, [r2, #185]	@ 0xb9
 800f06a:	f36f 01c3 	bfc	r1, #3, #1
 800f06e:	f882 10b9 	strb.w	r1, [r2, #185]	@ 0xb9
                        if(gc_block.values.h == 0)
 800f072:	2b00      	cmp	r3, #0
 800f074:	d1c3      	bne.n	800effe <gc_execute_block+0x1782>
                            gc_block.values.h = gc_block.values.t;
 800f076:	4613      	mov	r3, r2
 800f078:	f8d2 20b0 	ldr.w	r2, [r2, #176]	@ 0xb0
 800f07c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 800f080:	e7bd      	b.n	800effe <gc_execute_block+0x1782>
                        gc_block.values.h = gc_block.values.t;
 800f082:	4b71      	ldr	r3, [pc, #452]	@ (800f248 <gc_execute_block+0x19cc>)
 800f084:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800f088:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 800f08c:	e7b7      	b.n	800effe <gc_execute_block+0x1782>
                if(grbl.tool_table.n_tools) {
 800f08e:	4b71      	ldr	r3, [pc, #452]	@ (800f254 <gc_execute_block+0x19d8>)
 800f090:	699a      	ldr	r2, [r3, #24]
 800f092:	2a00      	cmp	r2, #0
 800f094:	f002 8290 	beq.w	80115b8 <gc_execute_block+0x3d3c>
                    if(gc_block.words.h) {
 800f098:	4b6b      	ldr	r3, [pc, #428]	@ (800f248 <gc_execute_block+0x19cc>)
 800f09a:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800f09e:	f013 0f08 	tst.w	r3, #8
 800f0a2:	f002 828c 	beq.w	80115be <gc_execute_block+0x3d42>
                        if(gc_block.values.h == 0 || gc_block.values.h > grbl.tool_table.n_tools)
 800f0a6:	4b68      	ldr	r3, [pc, #416]	@ (800f248 <gc_execute_block+0x19cc>)
 800f0a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	f002 8289 	beq.w	80115c4 <gc_execute_block+0x3d48>
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	f0c2 8289 	bcc.w	80115ca <gc_execute_block+0x3d4e>
                        gc_block.words.h = Off;
 800f0b8:	4b63      	ldr	r3, [pc, #396]	@ (800f248 <gc_execute_block+0x19cc>)
 800f0ba:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800f0be:	f36f 02c3 	bfc	r2, #3, #1
 800f0c2:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
                        FAIL(Status_GcodeValueWordMissing);
 800f0c6:	e79a      	b.n	800effe <gc_execute_block+0x1782>
        if (gc_state.modal.coord_system.id != gc_block.modal.coord_system.id && !settings_read_coord_data(gc_block.modal.coord_system.id, &gc_block.modal.coord_system.xyz))
 800f0c8:	f102 0110 	add.w	r1, r2, #16
 800f0cc:	f00e fae2 	bl	801d694 <settings_read_coord_data>
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	d19d      	bne.n	800f010 <gc_execute_block+0x1794>
            FAIL(Status_SettingReadFail);
 800f0d4:	2407      	movs	r4, #7
 800f0d6:	f7fe bcae 	b.w	800da36 <gc_execute_block+0x1ba>
            if (!(axis_words.mask || (gc_block.values.l != 20 && gc_block.words.r)))
 800f0da:	fa5f f68b 	uxtb.w	r6, fp
 800f0de:	b966      	cbnz	r6, 800f0fa <gc_execute_block+0x187e>
 800f0e0:	4b59      	ldr	r3, [pc, #356]	@ (800f248 <gc_execute_block+0x19cc>)
 800f0e2:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800f0e6:	2b14      	cmp	r3, #20
 800f0e8:	f002 8272 	beq.w	80115d0 <gc_execute_block+0x3d54>
 800f0ec:	4b56      	ldr	r3, [pc, #344]	@ (800f248 <gc_execute_block+0x19cc>)
 800f0ee:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f0f2:	f013 0f04 	tst.w	r3, #4
 800f0f6:	f002 826e 	beq.w	80115d6 <gc_execute_block+0x3d5a>
            if (!(gc_block.words.p || gc_block.words.l))
 800f0fa:	4b53      	ldr	r3, [pc, #332]	@ (800f248 <gc_execute_block+0x19cc>)
 800f0fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800f100:	f413 3f88 	tst.w	r3, #69632	@ 0x11000
 800f104:	f002 826a 	beq.w	80115dc <gc_execute_block+0x3d60>
            if(gc_block.values.p < 0.0f)
 800f108:	4b4f      	ldr	r3, [pc, #316]	@ (800f248 <gc_execute_block+0x19cc>)
 800f10a:	ed93 0a17 	vldr	s0, [r3, #92]	@ 0x5c
 800f10e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f116:	f102 8264 	bmi.w	80115e2 <gc_execute_block+0x3d66>
            p_value = (uint8_t)truncf(gc_block.values.p); // Convert p value to int.
 800f11a:	f018 fd21 	bl	8027b60 <truncf>
 800f11e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800f122:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
 800f126:	f89d 4028 	ldrb.w	r4, [sp, #40]	@ 0x28
            switch(gc_block.values.l) {
 800f12a:	4b47      	ldr	r3, [pc, #284]	@ (800f248 <gc_execute_block+0x19cc>)
 800f12c:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800f130:	3b01      	subs	r3, #1
 800f132:	2b13      	cmp	r3, #19
 800f134:	f202 8258 	bhi.w	80115e8 <gc_execute_block+0x3d6c>
 800f138:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f13c:	00140090 	.word	0x00140090
 800f140:	12561256 	.word	0x12561256
 800f144:	12561256 	.word	0x12561256
 800f148:	12561256 	.word	0x12561256
 800f14c:	00901256 	.word	0x00901256
 800f150:	12560090 	.word	0x12560090
 800f154:	12561256 	.word	0x12561256
 800f158:	12561256 	.word	0x12561256
 800f15c:	12561256 	.word	0x12561256
 800f160:	001b1256 	.word	0x001b1256
                    if (gc_block.words.r)
 800f164:	4b38      	ldr	r3, [pc, #224]	@ (800f248 <gc_execute_block+0x19cc>)
 800f166:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f16a:	f013 0f04 	tst.w	r3, #4
 800f16e:	f042 823e 	bne.w	80115ee <gc_execute_block+0x3d72>
                    if (p_value > N_WorkCoordinateSystems)
 800f172:	2c09      	cmp	r4, #9
 800f174:	f202 823e 	bhi.w	80115f4 <gc_execute_block+0x3d78>
                                                     : (coord_system_id_t)(p_value - 1);    // else adjust index to NVS coordinate data indexing.
 800f178:	b9ec      	cbnz	r4, 800f1b6 <gc_execute_block+0x193a>
 800f17a:	4b33      	ldr	r3, [pc, #204]	@ (800f248 <gc_execute_block+0x19cc>)
 800f17c:	7f18      	ldrb	r0, [r3, #28]
                    gc_block.values.coord_data.id = p_value == 0
 800f17e:	4932      	ldr	r1, [pc, #200]	@ (800f248 <gc_execute_block+0x19cc>)
 800f180:	f881 009c 	strb.w	r0, [r1, #156]	@ 0x9c
                    if (!settings_read_coord_data(gc_block.values.coord_data.id, &gc_block.values.coord_data.xyz))
 800f184:	3190      	adds	r1, #144	@ 0x90
 800f186:	f00e fa85 	bl	801d694 <settings_read_coord_data>
 800f18a:	2800      	cmp	r0, #0
 800f18c:	f002 8235 	beq.w	80115fa <gc_execute_block+0x3d7e>
                    if(settings.offset_lock.mask && gc_block.values.coord_data.id >= CoordinateSystem_G59_1 && gc_block.values.coord_data.id <= CoordinateSystem_G59_3) {
 800f190:	4b31      	ldr	r3, [pc, #196]	@ (800f258 <gc_execute_block+0x19dc>)
 800f192:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 800f196:	b18a      	cbz	r2, 800f1bc <gc_execute_block+0x1940>
 800f198:	4b2b      	ldr	r3, [pc, #172]	@ (800f248 <gc_execute_block+0x19cc>)
 800f19a:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800f19e:	2b05      	cmp	r3, #5
 800f1a0:	d90e      	bls.n	800f1c0 <gc_execute_block+0x1944>
 800f1a2:	2b08      	cmp	r3, #8
 800f1a4:	d80e      	bhi.n	800f1c4 <gc_execute_block+0x1948>
                        if(bit_istrue(settings.offset_lock.mask, bit(gc_block.values.coord_data.id - CoordinateSystem_G59_1)))
 800f1a6:	3b06      	subs	r3, #6
 800f1a8:	40da      	lsrs	r2, r3
 800f1aa:	f012 0f01 	tst.w	r2, #1
 800f1ae:	f042 8227 	bne.w	8011600 <gc_execute_block+0x3d84>
 800f1b2:	2303      	movs	r3, #3
 800f1b4:	e031      	b.n	800f21a <gc_execute_block+0x199e>
                                                     : (coord_system_id_t)(p_value - 1);    // else adjust index to NVS coordinate data indexing.
 800f1b6:	1e60      	subs	r0, r4, #1
 800f1b8:	b2c0      	uxtb	r0, r0
 800f1ba:	e7e0      	b.n	800f17e <gc_execute_block+0x1902>
 800f1bc:	2303      	movs	r3, #3
 800f1be:	e02c      	b.n	800f21a <gc_execute_block+0x199e>
 800f1c0:	2303      	movs	r3, #3
 800f1c2:	e02a      	b.n	800f21a <gc_execute_block+0x199e>
 800f1c4:	2303      	movs	r3, #3
 800f1c6:	e028      	b.n	800f21a <gc_execute_block+0x199e>
                                gc_block.values.coord_data.xyz[idx] = gc_state.position[idx] - gc_block.values.xyz[idx] - gc_state.g92_coord_offset[idx] - gc_state.tool_length_offset[idx];
 800f1c8:	4a21      	ldr	r2, [pc, #132]	@ (800f250 <gc_execute_block+0x19d4>)
 800f1ca:	f103 011a 	add.w	r1, r3, #26
 800f1ce:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f1d2:	edd1 7a00 	vldr	s15, [r1]
 800f1d6:	491c      	ldr	r1, [pc, #112]	@ (800f248 <gc_execute_block+0x19cc>)
 800f1d8:	f103 0020 	add.w	r0, r3, #32
 800f1dc:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800f1e0:	ed90 7a01 	vldr	s14, [r0, #4]
 800f1e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f1e8:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 800f1ec:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800f1f0:	ed90 7a00 	vldr	s14, [r0]
 800f1f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f1f8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800f1fc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f200:	ed92 7a01 	vldr	s14, [r2, #4]
 800f204:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f208:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800f20c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f210:	edc1 7a02 	vstr	s15, [r1, #8]
                    } while(idx);
 800f214:	2b00      	cmp	r3, #0
 800f216:	f000 80d5 	beq.w	800f3c4 <gc_execute_block+0x1b48>
                        if (bit_istrue(axis_words.mask, bit(--idx))) {
 800f21a:	3b01      	subs	r3, #1
 800f21c:	fa26 f203 	lsr.w	r2, r6, r3
 800f220:	f012 0f01 	tst.w	r2, #1
 800f224:	d0f6      	beq.n	800f214 <gc_execute_block+0x1998>
                            if (gc_block.values.l == 20)
 800f226:	4a08      	ldr	r2, [pc, #32]	@ (800f248 <gc_execute_block+0x19cc>)
 800f228:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 800f22c:	2a14      	cmp	r2, #20
 800f22e:	d0cb      	beq.n	800f1c8 <gc_execute_block+0x194c>
                                gc_block.values.coord_data.xyz[idx] = gc_block.values.xyz[idx];
 800f230:	4a05      	ldr	r2, [pc, #20]	@ (800f248 <gc_execute_block+0x19cc>)
 800f232:	f103 0120 	add.w	r1, r3, #32
 800f236:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f23a:	6849      	ldr	r1, [r1, #4]
 800f23c:	f103 0022 	add.w	r0, r3, #34	@ 0x22
 800f240:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f244:	6091      	str	r1, [r2, #8]
 800f246:	e7e5      	b.n	800f214 <gc_execute_block+0x1998>
 800f248:	200016c0 	.word	0x200016c0
 800f24c:	200001c0 	.word	0x200001c0
 800f250:	200017c8 	.word	0x200017c8
 800f254:	20001c78 	.word	0x20001c78
 800f258:	200024a8 	.word	0x200024a8
                    if(grbl.tool_table.n_tools) {
 800f25c:	4bbf      	ldr	r3, [pc, #764]	@ (800f55c <gc_execute_block+0x1ce0>)
 800f25e:	699b      	ldr	r3, [r3, #24]
 800f260:	2b00      	cmp	r3, #0
 800f262:	f002 81d0 	beq.w	8011606 <gc_execute_block+0x3d8a>
                        if(p_value == 0 || p_value > grbl.tool_table.n_tools)
 800f266:	2c00      	cmp	r4, #0
 800f268:	f000 8133 	beq.w	800f4d2 <gc_execute_block+0x1c56>
 800f26c:	42a3      	cmp	r3, r4
 800f26e:	f0c0 8133 	bcc.w	800f4d8 <gc_execute_block+0x1c5c>
                        grbl.tool_table.tool[p_value].tool_id = (tool_id_t)p_value;
 800f272:	4bba      	ldr	r3, [pc, #744]	@ (800f55c <gc_execute_block+0x1ce0>)
 800f274:	69db      	ldr	r3, [r3, #28]
 800f276:	2514      	movs	r5, #20
 800f278:	fb04 f505 	mul.w	r5, r4, r5
 800f27c:	442b      	add	r3, r5
 800f27e:	611c      	str	r4, [r3, #16]
                        if(gc_block.words.r) {
 800f280:	4bb7      	ldr	r3, [pc, #732]	@ (800f560 <gc_execute_block+0x1ce4>)
 800f282:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f286:	f013 0f04 	tst.w	r3, #4
 800f28a:	d00b      	beq.n	800f2a4 <gc_execute_block+0x1a28>
                            grbl.tool_table.tool[p_value].radius = gc_block.values.r;
 800f28c:	4bb3      	ldr	r3, [pc, #716]	@ (800f55c <gc_execute_block+0x1ce0>)
 800f28e:	69da      	ldr	r2, [r3, #28]
 800f290:	442a      	add	r2, r5
 800f292:	4bb3      	ldr	r3, [pc, #716]	@ (800f560 <gc_execute_block+0x1ce4>)
 800f294:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 800f296:	60d1      	str	r1, [r2, #12]
                            gc_block.words.r = Off;
 800f298:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800f29c:	f36f 0282 	bfc	r2, #2, #1
 800f2a0:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                        if(gc_block.values.l == 11 && !settings_read_coord_data(CoordinateSystem_G59_3, &g59_3_offset))
 800f2a4:	4bae      	ldr	r3, [pc, #696]	@ (800f560 <gc_execute_block+0x1ce4>)
 800f2a6:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800f2aa:	2b0b      	cmp	r3, #11
 800f2ac:	d006      	beq.n	800f2bc <gc_execute_block+0x1a40>
                        if(gc_block.values.l == 1)
 800f2ae:	4bac      	ldr	r3, [pc, #688]	@ (800f560 <gc_execute_block+0x1ce4>)
 800f2b0:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d00a      	beq.n	800f2ce <gc_execute_block+0x1a52>
 800f2b8:	2303      	movs	r3, #3
 800f2ba:	e04b      	b.n	800f354 <gc_execute_block+0x1ad8>
                        if(gc_block.values.l == 11 && !settings_read_coord_data(CoordinateSystem_G59_3, &g59_3_offset))
 800f2bc:	a911      	add	r1, sp, #68	@ 0x44
 800f2be:	2008      	movs	r0, #8
 800f2c0:	f00e f9e8 	bl	801d694 <settings_read_coord_data>
 800f2c4:	2800      	cmp	r0, #0
 800f2c6:	d1f2      	bne.n	800f2ae <gc_execute_block+0x1a32>
                            FAIL(Status_SettingReadFail);
 800f2c8:	2407      	movs	r4, #7
 800f2ca:	f7fe bbb4 	b.w	800da36 <gc_execute_block+0x1ba>
                            grbl.tool_table.read(p_value, &grbl.tool_table.tool[p_value]);
 800f2ce:	4ba3      	ldr	r3, [pc, #652]	@ (800f55c <gc_execute_block+0x1ce0>)
 800f2d0:	6a1a      	ldr	r2, [r3, #32]
 800f2d2:	69d9      	ldr	r1, [r3, #28]
 800f2d4:	4429      	add	r1, r5
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	4790      	blx	r2
 800f2da:	e7ed      	b.n	800f2b8 <gc_execute_block+0x1a3c>
                                    grbl.tool_table.tool[p_value].offset[idx] = gc_block.values.xyz[idx];
 800f2dc:	4a9f      	ldr	r2, [pc, #636]	@ (800f55c <gc_execute_block+0x1ce0>)
 800f2de:	69d2      	ldr	r2, [r2, #28]
 800f2e0:	442a      	add	r2, r5
 800f2e2:	f103 0020 	add.w	r0, r3, #32
 800f2e6:	499e      	ldr	r1, [pc, #632]	@ (800f560 <gc_execute_block+0x1ce4>)
 800f2e8:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800f2ec:	6849      	ldr	r1, [r1, #4]
 800f2ee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f2f2:	6011      	str	r1, [r2, #0]
 800f2f4:	e02d      	b.n	800f352 <gc_execute_block+0x1ad6>
                                    grbl.tool_table.tool[p_value].offset[idx] = gc_state.position[idx] - gc_state.modal.coord_system.xyz[idx] - gc_state.g92_coord_offset[idx] - gc_block.values.xyz[idx];
 800f2f6:	4a9b      	ldr	r2, [pc, #620]	@ (800f564 <gc_execute_block+0x1ce8>)
 800f2f8:	f103 011a 	add.w	r1, r3, #26
 800f2fc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f300:	edd1 7a00 	vldr	s15, [r1]
 800f304:	1c99      	adds	r1, r3, #2
 800f306:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f30a:	ed91 7a00 	vldr	s14, [r1]
 800f30e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f312:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 800f316:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f31a:	ed92 7a00 	vldr	s14, [r2]
 800f31e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f322:	f103 0120 	add.w	r1, r3, #32
 800f326:	4a8e      	ldr	r2, [pc, #568]	@ (800f560 <gc_execute_block+0x1ce4>)
 800f328:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f32c:	ed92 7a01 	vldr	s14, [r2, #4]
 800f330:	4a8a      	ldr	r2, [pc, #552]	@ (800f55c <gc_execute_block+0x1ce0>)
 800f332:	69d2      	ldr	r2, [r2, #28]
 800f334:	442a      	add	r2, r5
 800f336:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f33a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f33e:	edc2 7a00 	vstr	s15, [r2]
 800f342:	e006      	b.n	800f352 <gc_execute_block+0x1ad6>
                            } else if(gc_block.values.l == 10 || gc_block.values.l == 11)
 800f344:	4a86      	ldr	r2, [pc, #536]	@ (800f560 <gc_execute_block+0x1ce4>)
 800f346:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 800f34a:	3a0a      	subs	r2, #10
 800f34c:	b2d2      	uxtb	r2, r2
 800f34e:	2a01      	cmp	r2, #1
 800f350:	d925      	bls.n	800f39e <gc_execute_block+0x1b22>
                        } while(idx);
 800f352:	b38b      	cbz	r3, 800f3b8 <gc_execute_block+0x1b3c>
                            if(bit_istrue(axis_words.mask, bit(--idx))) {
 800f354:	3b01      	subs	r3, #1
 800f356:	fa26 f203 	lsr.w	r2, r6, r3
 800f35a:	f012 0f01 	tst.w	r2, #1
 800f35e:	d0f1      	beq.n	800f344 <gc_execute_block+0x1ac8>
                                if(gc_block.values.l == 1)
 800f360:	4a7f      	ldr	r2, [pc, #508]	@ (800f560 <gc_execute_block+0x1ce4>)
 800f362:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 800f366:	2a01      	cmp	r2, #1
 800f368:	d0b8      	beq.n	800f2dc <gc_execute_block+0x1a60>
                                else if(gc_block.values.l == 10)
 800f36a:	2a0a      	cmp	r2, #10
 800f36c:	d0c3      	beq.n	800f2f6 <gc_execute_block+0x1a7a>
                                else if(gc_block.values.l == 11)
 800f36e:	2a0b      	cmp	r2, #11
 800f370:	d1ef      	bne.n	800f352 <gc_execute_block+0x1ad6>
                                    grbl.tool_table.tool[p_value].offset[idx] = g59_3_offset[idx] - gc_block.values.xyz[idx];
 800f372:	aa24      	add	r2, sp, #144	@ 0x90
 800f374:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f378:	ed52 7a13 	vldr	s15, [r2, #-76]	@ 0xffffffb4
 800f37c:	f103 0120 	add.w	r1, r3, #32
 800f380:	4a77      	ldr	r2, [pc, #476]	@ (800f560 <gc_execute_block+0x1ce4>)
 800f382:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f386:	ed92 7a01 	vldr	s14, [r2, #4]
 800f38a:	4a74      	ldr	r2, [pc, #464]	@ (800f55c <gc_execute_block+0x1ce0>)
 800f38c:	69d2      	ldr	r2, [r2, #28]
 800f38e:	442a      	add	r2, r5
 800f390:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f394:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f398:	edc2 7a00 	vstr	s15, [r2]
 800f39c:	e7d9      	b.n	800f352 <gc_execute_block+0x1ad6>
                                grbl.tool_table.tool[p_value].offset[idx] = gc_state.tool_length_offset[idx];
 800f39e:	4a6f      	ldr	r2, [pc, #444]	@ (800f55c <gc_execute_block+0x1ce0>)
 800f3a0:	69d2      	ldr	r2, [r2, #28]
 800f3a2:	442a      	add	r2, r5
 800f3a4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800f3a8:	496e      	ldr	r1, [pc, #440]	@ (800f564 <gc_execute_block+0x1ce8>)
 800f3aa:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800f3ae:	6849      	ldr	r1, [r1, #4]
 800f3b0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f3b4:	6011      	str	r1, [r2, #0]
 800f3b6:	e7cc      	b.n	800f352 <gc_execute_block+0x1ad6>
                        if(gc_block.values.l == 1)
 800f3b8:	4b69      	ldr	r3, [pc, #420]	@ (800f560 <gc_execute_block+0x1ce4>)
 800f3ba:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800f3be:	2b01      	cmp	r3, #1
 800f3c0:	f000 8081 	beq.w	800f4c6 <gc_execute_block+0x1c4a>
            gc_block.words.l = gc_block.words.p = Off;
 800f3c4:	4b66      	ldr	r3, [pc, #408]	@ (800f560 <gc_execute_block+0x1ce4>)
 800f3c6:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800f3ca:	f36f 0200 	bfc	r2, #0, #1
 800f3ce:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800f3d2:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800f3d6:	f36f 1204 	bfc	r2, #4, #1
 800f3da:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
    if (gc_block.modal.motion == MotionMode_None) {
 800f3de:	4b60      	ldr	r3, [pc, #384]	@ (800f560 <gc_execute_block+0x1ce4>)
 800f3e0:	891d      	ldrh	r5, [r3, #8]
 800f3e2:	2d50      	cmp	r5, #80	@ 0x50
 800f3e4:	f000 816e 	beq.w	800f6c4 <gc_execute_block+0x1e48>
    } else if (axis_command == AxisCommand_MotionMode) {
 800f3e8:	f1ba 0f02 	cmp.w	sl, #2
 800f3ec:	f000 8176 	beq.w	800f6dc <gc_execute_block+0x1e60>
    if (gc_parser_flags.jog_motion) // Jogging only uses the F feed rate and XYZ value words. N is valid, but S and T are invalid.
 800f3f0:	f018 0301 	ands.w	r3, r8, #1
 800f3f4:	9305      	str	r3, [sp, #20]
 800f3f6:	f000 879c 	beq.w	8010332 <gc_execute_block+0x2ab6>
        gc_block.words.n = gc_block.words.f = Off;
 800f3fa:	4b59      	ldr	r3, [pc, #356]	@ (800f560 <gc_execute_block+0x1ce4>)
 800f3fc:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800f400:	f36f 0241 	bfc	r2, #1, #1
 800f404:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800f408:	b2d2      	uxtb	r2, r2
 800f40a:	f36f 1286 	bfc	r2, #6, #1
 800f40e:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
    if (axis_command)
 800f412:	f1ba 0f00 	cmp.w	sl, #0
 800f416:	d006      	beq.n	800f426 <gc_execute_block+0x1baa>
        gc_block.words.mask &= ~axis_words_mask.mask; // Remove axis words.
 800f418:	4a51      	ldr	r2, [pc, #324]	@ (800f560 <gc_execute_block+0x1ce4>)
 800f41a:	f8d2 30b8 	ldr.w	r3, [r2, #184]	@ 0xb8
 800f41e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800f422:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
    if (gc_block.words.mask)
 800f426:	4b4e      	ldr	r3, [pc, #312]	@ (800f560 <gc_execute_block+0x1ce4>)
 800f428:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	f042 8180 	bne.w	8011732 <gc_execute_block+0x3eb6>
    memset(&plan_data, 0, sizeof(plan_line_data_t)); // Zero plan_data struct
 800f432:	2228      	movs	r2, #40	@ 0x28
 800f434:	2100      	movs	r1, #0
 800f436:	a814      	add	r0, sp, #80	@ 0x50
 800f438:	f015 fc79 	bl	8024d2e <memset>
    plan_data.offset_id = gc_state.offset_id;
 800f43c:	4b49      	ldr	r3, [pc, #292]	@ (800f564 <gc_execute_block+0x1ce8>)
 800f43e:	f993 3082 	ldrsb.w	r3, [r3, #130]	@ 0x82
 800f442:	f88d 3069 	strb.w	r3, [sp, #105]	@ 0x69
    plan_data.condition.target_validated = plan_data.condition.target_valid = sys.soft_limits.mask == 0;
 800f446:	4b48      	ldr	r3, [pc, #288]	@ (800f568 <gc_execute_block+0x1cec>)
 800f448:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800f44c:	fab3 f383 	clz	r3, r3
 800f450:	095b      	lsrs	r3, r3, #5
 800f452:	f89d 2065 	ldrb.w	r2, [sp, #101]	@ 0x65
 800f456:	f363 0241 	bfi	r2, r3, #1, #1
 800f45a:	f88d 2065 	strb.w	r2, [sp, #101]	@ 0x65
 800f45e:	b2d2      	uxtb	r2, r2
 800f460:	f363 0282 	bfi	r2, r3, #2, #1
 800f464:	f88d 2065 	strb.w	r2, [sp, #101]	@ 0x65
    if (gc_parser_flags.jog_motion) {
 800f468:	9b05      	ldr	r3, [sp, #20]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	f000 8795 	beq.w	801039a <gc_execute_block+0x2b1e>
        if (command_words.mask & ~jog_groups.mask)
 800f470:	f037 0349 	bics.w	r3, r7, #73	@ 0x49
 800f474:	f042 8160 	bne.w	8011738 <gc_execute_block+0x3ebc>
        if (!(gc_block.non_modal_command == NonModal_AbsoluteOverride || gc_block.non_modal_command == NonModal_NoAction))
 800f478:	4b39      	ldr	r3, [pc, #228]	@ (800f560 <gc_execute_block+0x1ce4>)
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	2b35      	cmp	r3, #53	@ 0x35
 800f47e:	d002      	beq.n	800f486 <gc_execute_block+0x1c0a>
 800f480:	2b00      	cmp	r3, #0
 800f482:	f042 815c 	bne.w	801173e <gc_execute_block+0x3ec2>
        memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t));
 800f486:	4c37      	ldr	r4, [pc, #220]	@ (800f564 <gc_execute_block+0x1ce8>)
 800f488:	ad15      	add	r5, sp, #84	@ 0x54
 800f48a:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 800f48e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f490:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        plan_data.spindle.state = gc_state.modal.spindle.state;
 800f494:	7ea3      	ldrb	r3, [r4, #26]
 800f496:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
        plan_data.condition.coolant = gc_state.modal.coolant;
 800f49a:	7e63      	ldrb	r3, [r4, #25]
 800f49c:	f88d 3066 	strb.w	r3, [sp, #102]	@ 0x66
        plan_data.condition.is_rpm_rate_adjusted = gc_state.is_rpm_rate_adjusted || (gc_state.modal.spindle.state.ccw && gc_state.spindle.hal->cap.laser);
 800f4a0:	f894 307e 	ldrb.w	r3, [r4, #126]	@ 0x7e
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	f040 875d 	bne.w	8010364 <gc_execute_block+0x2ae8>
 800f4aa:	7ea3      	ldrb	r3, [r4, #26]
 800f4ac:	f013 0f02 	tst.w	r3, #2
 800f4b0:	f000 876f 	beq.w	8010392 <gc_execute_block+0x2b16>
 800f4b4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800f4b6:	7a9b      	ldrb	r3, [r3, #10]
 800f4b8:	f013 0f08 	tst.w	r3, #8
 800f4bc:	f040 876b 	bne.w	8010396 <gc_execute_block+0x2b1a>
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	f000 bf50 	b.w	8010366 <gc_execute_block+0x2aea>
                            grbl.tool_table.write(&grbl.tool_table.tool[p_value]);
 800f4c6:	4b25      	ldr	r3, [pc, #148]	@ (800f55c <gc_execute_block+0x1ce0>)
 800f4c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f4ca:	69d8      	ldr	r0, [r3, #28]
 800f4cc:	4428      	add	r0, r5
 800f4ce:	4790      	blx	r2
 800f4d0:	e778      	b.n	800f3c4 <gc_execute_block+0x1b48>
                           FAIL(Status_GcodeIllegalToolTableEntry); // [Greater than max allowed tool number]
 800f4d2:	2426      	movs	r4, #38	@ 0x26
 800f4d4:	f7fe baaf 	b.w	800da36 <gc_execute_block+0x1ba>
 800f4d8:	2426      	movs	r4, #38	@ 0x26
 800f4da:	f7fe baac 	b.w	800da36 <gc_execute_block+0x1ba>
            if (!axis_words.mask)
 800f4de:	fa5f f08b 	uxtb.w	r0, fp
 800f4e2:	2800      	cmp	r0, #0
 800f4e4:	f002 8092 	beq.w	801160c <gc_execute_block+0x3d90>
            idx = N_AXIS;
 800f4e8:	2303      	movs	r3, #3
 800f4ea:	e00e      	b.n	800f50a <gc_execute_block+0x1c8e>
                    gc_block.values.xyz[idx] = gc_state.g92_coord_offset[idx];
 800f4ec:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 800f4f0:	4a1c      	ldr	r2, [pc, #112]	@ (800f564 <gc_execute_block+0x1ce8>)
 800f4f2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f4f6:	6814      	ldr	r4, [r2, #0]
 800f4f8:	f103 0120 	add.w	r1, r3, #32
 800f4fc:	4a18      	ldr	r2, [pc, #96]	@ (800f560 <gc_execute_block+0x1ce4>)
 800f4fe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f502:	6054      	str	r4, [r2, #4]
            } while(idx);
 800f504:	2b00      	cmp	r3, #0
 800f506:	f43f af6a 	beq.w	800f3de <gc_execute_block+0x1b62>
                if (bit_istrue(axis_words.mask, bit(--idx))) {
 800f50a:	3b01      	subs	r3, #1
 800f50c:	fa20 f203 	lsr.w	r2, r0, r3
 800f510:	f012 0f01 	tst.w	r2, #1
 800f514:	d0ea      	beq.n	800f4ec <gc_execute_block+0x1c70>
                    gc_block.values.xyz[idx] = gc_state.position[idx] - gc_block.modal.coord_system.xyz[idx] - gc_block.values.xyz[idx] - gc_state.tool_length_offset[idx];
 800f516:	4913      	ldr	r1, [pc, #76]	@ (800f564 <gc_execute_block+0x1ce8>)
 800f518:	f103 021a 	add.w	r2, r3, #26
 800f51c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800f520:	edd2 7a00 	vldr	s15, [r2]
 800f524:	4a0e      	ldr	r2, [pc, #56]	@ (800f560 <gc_execute_block+0x1ce4>)
 800f526:	1d1c      	adds	r4, r3, #4
 800f528:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f52c:	ed94 7a00 	vldr	s14, [r4]
 800f530:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f534:	f103 0420 	add.w	r4, r3, #32
 800f538:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800f53c:	ed92 7a01 	vldr	s14, [r2, #4]
 800f540:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f544:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 800f548:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f54c:	ed91 7a01 	vldr	s14, [r1, #4]
 800f550:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f554:	edc2 7a01 	vstr	s15, [r2, #4]
 800f558:	e7d4      	b.n	800f504 <gc_execute_block+0x1c88>
 800f55a:	bf00      	nop
 800f55c:	20001c78 	.word	0x20001c78
 800f560:	200016c0 	.word	0x200016c0
 800f564:	200017c8 	.word	0x200017c8
 800f568:	20001d70 	.word	0x20001d70
                    else if(gc_block.non_modal_command != NonModal_AbsoluteOverride) {
 800f56c:	2b35      	cmp	r3, #53	@ 0x35
 800f56e:	d014      	beq.n	800f59a <gc_execute_block+0x1d1e>
                        if(gc_block.modal.distance_incremental)
 800f570:	49b2      	ldr	r1, [pc, #712]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f572:	7b09      	ldrb	r1, [r1, #12]
 800f574:	b329      	cbz	r1, 800f5c2 <gc_execute_block+0x1d46>
                            gc_block.values.xyz[idx] += gc_state.position[idx];
 800f576:	f102 0020 	add.w	r0, r2, #32
 800f57a:	49b0      	ldr	r1, [pc, #704]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f57c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800f580:	edd1 7a01 	vldr	s15, [r1, #4]
 800f584:	f102 051a 	add.w	r5, r2, #26
 800f588:	48ad      	ldr	r0, [pc, #692]	@ (800f840 <gc_execute_block+0x1fc4>)
 800f58a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800f58e:	ed90 7a00 	vldr	s14, [r0]
 800f592:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f596:	edc1 7a01 	vstr	s15, [r1, #4]
                } while(idx);
 800f59a:	b3a2      	cbz	r2, 800f606 <gc_execute_block+0x1d8a>
                    if(bit_isfalse(axis_words.mask, bit(--idx)))
 800f59c:	3a01      	subs	r2, #1
 800f59e:	fa24 f102 	lsr.w	r1, r4, r2
 800f5a2:	f011 0f01 	tst.w	r1, #1
 800f5a6:	d1e1      	bne.n	800f56c <gc_execute_block+0x1cf0>
                        gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 800f5a8:	f102 001a 	add.w	r0, r2, #26
 800f5ac:	49a4      	ldr	r1, [pc, #656]	@ (800f840 <gc_execute_block+0x1fc4>)
 800f5ae:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800f5b2:	680d      	ldr	r5, [r1, #0]
 800f5b4:	f102 0020 	add.w	r0, r2, #32
 800f5b8:	49a0      	ldr	r1, [pc, #640]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f5ba:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800f5be:	604d      	str	r5, [r1, #4]
 800f5c0:	e7eb      	b.n	800f59a <gc_execute_block+0x1d1e>
    return gc_block->modal.coord_system.xyz[idx] + gc_state.g92_coord_offset[idx] + gc_state.tool_length_offset[idx];
 800f5c2:	499e      	ldr	r1, [pc, #632]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f5c4:	1d10      	adds	r0, r2, #4
 800f5c6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800f5ca:	ed90 7a00 	vldr	s14, [r0]
 800f5ce:	489c      	ldr	r0, [pc, #624]	@ (800f840 <gc_execute_block+0x1fc4>)
 800f5d0:	f102 052e 	add.w	r5, r2, #46	@ 0x2e
 800f5d4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800f5d8:	edd5 7a00 	vldr	s15, [r5]
 800f5dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f5e0:	f102 0530 	add.w	r5, r2, #48	@ 0x30
 800f5e4:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800f5e8:	ed90 7a01 	vldr	s14, [r0, #4]
 800f5ec:	ee37 7a27 	vadd.f32	s14, s14, s15
                            gc_block.values.xyz[idx] += gc_get_block_offset(&gc_block, idx);
 800f5f0:	f102 0020 	add.w	r0, r2, #32
 800f5f4:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800f5f8:	edd1 7a01 	vldr	s15, [r1, #4]
 800f5fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f600:	edc1 7a01 	vstr	s15, [r1, #4]
 800f604:	e7c9      	b.n	800f59a <gc_execute_block+0x1d1e>
            switch (gc_block.non_modal_command) {
 800f606:	2b35      	cmp	r3, #53	@ 0x35
 800f608:	d052      	beq.n	800f6b0 <gc_execute_block+0x1e34>
 800f60a:	d811      	bhi.n	800f630 <gc_execute_block+0x1db4>
 800f60c:	2b1c      	cmp	r3, #28
 800f60e:	d002      	beq.n	800f616 <gc_execute_block+0x1d9a>
 800f610:	2b1e      	cmp	r3, #30
 800f612:	f47f aee4 	bne.w	800f3de <gc_execute_block+0x1b62>
                    if (!settings_read_coord_data(gc_block.non_modal_command == NonModal_GoHome_0 ? CoordinateSystem_G28 : CoordinateSystem_G30, &gc_block.values.coord_data.xyz))
 800f616:	2b1c      	cmp	r3, #28
 800f618:	d032      	beq.n	800f680 <gc_execute_block+0x1e04>
 800f61a:	200a      	movs	r0, #10
 800f61c:	4989      	ldr	r1, [pc, #548]	@ (800f844 <gc_execute_block+0x1fc8>)
 800f61e:	f00e f839 	bl	801d694 <settings_read_coord_data>
 800f622:	2800      	cmp	r0, #0
 800f624:	f001 87f5 	beq.w	8011612 <gc_execute_block+0x3d96>
                    if (axis_words.mask) {
 800f628:	2c00      	cmp	r4, #0
 800f62a:	d049      	beq.n	800f6c0 <gc_execute_block+0x1e44>
                        idx = N_AXIS;
 800f62c:	2303      	movs	r3, #3
 800f62e:	e02c      	b.n	800f68a <gc_execute_block+0x1e0e>
 800f630:	2b41      	cmp	r3, #65	@ 0x41
 800f632:	f47f aed4 	bne.w	800f3de <gc_execute_block+0x1b62>
                    if(!gc_block.words.p)
 800f636:	4b81      	ldr	r3, [pc, #516]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f638:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f63c:	f013 0f01 	tst.w	r3, #1
 800f640:	f001 87ea 	beq.w	8011618 <gc_execute_block+0x3d9c>
                    if(gc_block.values.p > 65535.0f)
 800f644:	4b7d      	ldr	r3, [pc, #500]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f646:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800f64a:	eddf 7a7f 	vldr	s15, [pc, #508]	@ 800f848 <gc_execute_block+0x1fcc>
 800f64e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f656:	f301 87e2 	bgt.w	801161e <gc_execute_block+0x3da2>
                    if(!ngc_call_push(&gc_state + ngc_call_level()))
 800f65a:	f005 ffc9 	bl	80155f0 <ngc_call_level>
 800f65e:	22d4      	movs	r2, #212	@ 0xd4
 800f660:	4b77      	ldr	r3, [pc, #476]	@ (800f840 <gc_execute_block+0x1fc4>)
 800f662:	fb02 3000 	mla	r0, r2, r0, r3
 800f666:	f005 ffa9 	bl	80155bc <ngc_call_push>
 800f66a:	2800      	cmp	r0, #0
 800f66c:	f001 87da 	beq.w	8011624 <gc_execute_block+0x3da8>
                    gc_block.words.p = Off;
 800f670:	4b72      	ldr	r3, [pc, #456]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f672:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800f676:	f36f 0200 	bfc	r2, #0, #1
 800f67a:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                    break;
 800f67e:	e6ae      	b.n	800f3de <gc_execute_block+0x1b62>
                    if (!settings_read_coord_data(gc_block.non_modal_command == NonModal_GoHome_0 ? CoordinateSystem_G28 : CoordinateSystem_G30, &gc_block.values.coord_data.xyz))
 800f680:	2009      	movs	r0, #9
 800f682:	e7cb      	b.n	800f61c <gc_execute_block+0x1da0>
                        } while(idx);
 800f684:	2b00      	cmp	r3, #0
 800f686:	f43f aeaa 	beq.w	800f3de <gc_execute_block+0x1b62>
                            if (bit_isfalse(axis_words.mask, bit(--idx)))
 800f68a:	3b01      	subs	r3, #1
 800f68c:	fa24 f203 	lsr.w	r2, r4, r3
 800f690:	f012 0f01 	tst.w	r2, #1
 800f694:	d1f6      	bne.n	800f684 <gc_execute_block+0x1e08>
                                gc_block.values.coord_data.xyz[idx] = gc_state.position[idx];
 800f696:	f103 011a 	add.w	r1, r3, #26
 800f69a:	4a69      	ldr	r2, [pc, #420]	@ (800f840 <gc_execute_block+0x1fc4>)
 800f69c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f6a0:	6810      	ldr	r0, [r2, #0]
 800f6a2:	f103 0122 	add.w	r1, r3, #34	@ 0x22
 800f6a6:	4a65      	ldr	r2, [pc, #404]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f6a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f6ac:	6090      	str	r0, [r2, #8]
 800f6ae:	e7e9      	b.n	800f684 <gc_execute_block+0x1e08>
                    if (!(gc_block.modal.motion == MotionMode_Seek || gc_block.modal.motion == MotionMode_Linear))
 800f6b0:	4b62      	ldr	r3, [pc, #392]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f6b2:	891b      	ldrh	r3, [r3, #8]
 800f6b4:	2b01      	cmp	r3, #1
 800f6b6:	f67f ae92 	bls.w	800f3de <gc_execute_block+0x1b62>
                        FAIL(Status_GcodeG53InvalidMotionMode); // [G53 G0/1 not active]
 800f6ba:	241e      	movs	r4, #30
 800f6bc:	f7fe b9bb 	b.w	800da36 <gc_execute_block+0x1ba>
                        axis_command = AxisCommand_None; // Set to none if no intermediate motion.
 800f6c0:	46a2      	mov	sl, r4
 800f6c2:	e68c      	b.n	800f3de <gc_execute_block+0x1b62>
        if (axis_words.mask && axis_command != AxisCommand_NonModal) // [No axis words allowed]
 800f6c4:	fa5f f38b 	uxtb.w	r3, fp
 800f6c8:	b11b      	cbz	r3, 800f6d2 <gc_execute_block+0x1e56>
 800f6ca:	f1ba 0f01 	cmp.w	sl, #1
 800f6ce:	f041 87ac 	bne.w	801162a <gc_execute_block+0x3dae>
        gc_block.modal.retract_mode = CCRetractMode_Previous;
 800f6d2:	4b5a      	ldr	r3, [pc, #360]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800f6da:	e689      	b.n	800f3f0 <gc_execute_block+0x1b74>
        gc_parser_flags.motion_mode_changed = gc_block.modal.motion != gc_state.modal.motion;
 800f6dc:	4b58      	ldr	r3, [pc, #352]	@ (800f840 <gc_execute_block+0x1fc4>)
 800f6de:	8819      	ldrh	r1, [r3, #0]
 800f6e0:	1a6b      	subs	r3, r5, r1
 800f6e2:	bf18      	it	ne
 800f6e4:	2301      	movne	r3, #1
 800f6e6:	f363 2849 	bfi	r8, r3, #9, #1
        if (gc_block.modal.motion == MotionMode_Seek) {
 800f6ea:	b935      	cbnz	r5, 800f6fa <gc_execute_block+0x1e7e>
            if (!axis_words.mask)
 800f6ec:	fa5f f38b 	uxtb.w	r3, fp
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	f47f ae7d 	bne.w	800f3f0 <gc_execute_block+0x1b74>
                axis_command = AxisCommand_None;
 800f6f6:	469a      	mov	sl, r3
 800f6f8:	e67a      	b.n	800f3f0 <gc_execute_block+0x1b74>
            if(!gc_block.modal.canned_cycle_active)
 800f6fa:	4b50      	ldr	r3, [pc, #320]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f6fc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800f700:	930a      	str	r3, [sp, #40]	@ 0x28
 800f702:	b91b      	cbnz	r3, 800f70c <gc_execute_block+0x1e90>
                gc_block.modal.retract_mode = CCRetractMode_Previous;
 800f704:	4b4d      	ldr	r3, [pc, #308]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f706:	2200      	movs	r2, #0
 800f708:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            if(gc_block.modal.spindle.rpm_mode == SpindleSpeedMode_CSS && (!gc_block.modal.spindle.state.on || gc_block.values.s == 0.0f))
 800f70c:	4b4b      	ldr	r3, [pc, #300]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f70e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800f712:	2b01      	cmp	r3, #1
 800f714:	d06e      	beq.n	800f7f4 <gc_execute_block+0x1f78>
            if (gc_block.modal.motion == MotionMode_SpindleSynchronized) {
 800f716:	2d21      	cmp	r5, #33	@ 0x21
 800f718:	d07e      	beq.n	800f818 <gc_execute_block+0x1f9c>
            } else if (gc_block.modal.motion == MotionMode_Threading) {
 800f71a:	2d4c      	cmp	r5, #76	@ 0x4c
 800f71c:	f000 8098 	beq.w	800f850 <gc_execute_block+0x1fd4>
            } else if (gc_block.values.f == 0.0f)
 800f720:	4b46      	ldr	r3, [pc, #280]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f722:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800f726:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f72e:	f001 87b8 	beq.w	80116a2 <gc_execute_block+0x3e26>
            if (gc_block.modal.canned_cycle_active) {
 800f732:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f734:	2b00      	cmp	r3, #0
 800f736:	f000 832c 	beq.w	800fd92 <gc_execute_block+0x2516>
                if(gc_parser_flags.canned_cycle_change) {
 800f73a:	f018 0102 	ands.w	r1, r8, #2
 800f73e:	d029      	beq.n	800f794 <gc_execute_block+0x1f18>
                    if(gc_state.modal.feed_mode == FeedMode_InverseTime)
 800f740:	4b3f      	ldr	r3, [pc, #252]	@ (800f840 <gc_execute_block+0x1fc4>)
 800f742:	789b      	ldrb	r3, [r3, #2]
 800f744:	2b01      	cmp	r3, #1
 800f746:	f001 87af 	beq.w	80116a8 <gc_execute_block+0x3e2c>
                    if(!gc_block.words.r)
 800f74a:	4b3c      	ldr	r3, [pc, #240]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f74c:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f750:	f013 0f04 	tst.w	r3, #4
 800f754:	f001 87ab 	beq.w	80116ae <gc_execute_block+0x3e32>
                    if(!(axis_words.mask & bit(plane.axis_linear)))
 800f758:	fa5f f38b 	uxtb.w	r3, fp
 800f75c:	f89d 208a 	ldrb.w	r2, [sp, #138]	@ 0x8a
 800f760:	40d3      	lsrs	r3, r2
 800f762:	f013 0f01 	tst.w	r3, #1
 800f766:	f001 87a5 	beq.w	80116b4 <gc_execute_block+0x3e38>
                    gc_state.canned.dwell = 0.0f;
 800f76a:	4b35      	ldr	r3, [pc, #212]	@ (800f840 <gc_execute_block+0x1fc4>)
 800f76c:	2000      	movs	r0, #0
 800f76e:	6458      	str	r0, [r3, #68]	@ 0x44
                    gc_state.canned.xyz[plane.axis_0] = 0.0f;
 800f770:	f89d 2088 	ldrb.w	r2, [sp, #136]	@ 0x88
 800f774:	320c      	adds	r2, #12
 800f776:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f77a:	6050      	str	r0, [r2, #4]
                    gc_state.canned.xyz[plane.axis_1] = 0.0f;
 800f77c:	f89d 2089 	ldrb.w	r2, [sp, #137]	@ 0x89
 800f780:	320c      	adds	r2, #12
 800f782:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f786:	6050      	str	r0, [r2, #4]
                    gc_state.canned.rapid_retract = On;
 800f788:	2201      	movs	r2, #1
 800f78a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                    gc_state.canned.spindle_off = Off;
 800f78e:	2200      	movs	r2, #0
 800f790:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
                if(!gc_block.words.l)
 800f794:	4b29      	ldr	r3, [pc, #164]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f796:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800f79a:	f013 0f10 	tst.w	r3, #16
 800f79e:	f040 81eb 	bne.w	800fb78 <gc_execute_block+0x22fc>
                    gc_block.values.l = 1;
 800f7a2:	4b26      	ldr	r3, [pc, #152]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                if(gc_block.words.r)
 800f7aa:	4b24      	ldr	r3, [pc, #144]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f7ac:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f7b0:	f013 0f04 	tst.w	r3, #4
 800f7b4:	d01c      	beq.n	800f7f0 <gc_execute_block+0x1f74>
                    gc_state.canned.retract_position = gc_block.values.r * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f) +
 800f7b6:	4b21      	ldr	r3, [pc, #132]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f7b8:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800f7bc:	7adb      	ldrb	r3, [r3, #11]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	f000 81e3 	beq.w	800fb8a <gc_execute_block+0x230e>
 800f7c4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800f84c <gc_execute_block+0x1fd0>
 800f7c8:	ee27 7a87 	vmul.f32	s14, s15, s14
                                                        (gc_block.modal.distance_incremental
 800f7cc:	4b1b      	ldr	r3, [pc, #108]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f7ce:	7b1b      	ldrb	r3, [r3, #12]
                                                          : gc_get_block_offset(&gc_block, plane.axis_linear));
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	f000 81dd 	beq.w	800fb90 <gc_execute_block+0x2314>
                                                          ? gc_state.position[plane.axis_linear]
 800f7d6:	f89d 208a 	ldrb.w	r2, [sp, #138]	@ 0x8a
                                                          : gc_get_block_offset(&gc_block, plane.axis_linear));
 800f7da:	321a      	adds	r2, #26
 800f7dc:	4b18      	ldr	r3, [pc, #96]	@ (800f840 <gc_execute_block+0x1fc4>)
 800f7de:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f7e2:	edd3 7a00 	vldr	s15, [r3]
                    gc_state.canned.retract_position = gc_block.values.r * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f) +
 800f7e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f7ea:	4b15      	ldr	r3, [pc, #84]	@ (800f840 <gc_execute_block+0x1fc4>)
 800f7ec:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
 800f7f0:	2303      	movs	r3, #3
 800f7f2:	e1fd      	b.n	800fbf0 <gc_execute_block+0x2374>
            if(gc_block.modal.spindle.rpm_mode == SpindleSpeedMode_CSS && (!gc_block.modal.spindle.state.on || gc_block.values.s == 0.0f))
 800f7f4:	4b11      	ldr	r3, [pc, #68]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f7f6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800f7fa:	f013 0f01 	tst.w	r3, #1
 800f7fe:	f001 8717 	beq.w	8011630 <gc_execute_block+0x3db4>
 800f802:	4b0e      	ldr	r3, [pc, #56]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f804:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800f808:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f810:	d181      	bne.n	800f716 <gc_execute_block+0x1e9a>
                 FAIL(Status_GcodeSpindleNotRunning);
 800f812:	2429      	movs	r4, #41	@ 0x29
 800f814:	f7fe b90f 	b.w	800da36 <gc_execute_block+0x1ba>
                if(!gc_state.spindle.hal->get_data)
 800f818:	4b09      	ldr	r3, [pc, #36]	@ (800f840 <gc_execute_block+0x1fc4>)
 800f81a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f81c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f81e:	2b00      	cmp	r3, #0
 800f820:	f001 8709 	beq.w	8011636 <gc_execute_block+0x3dba>
                if(gc_block.values.k == 0.0f)
 800f824:	4b05      	ldr	r3, [pc, #20]	@ (800f83c <gc_execute_block+0x1fc0>)
 800f826:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800f82a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f832:	f001 8703 	beq.w	801163c <gc_execute_block+0x3dc0>
                gc_parser_flags.spindle_force_sync = On;
 800f836:	f048 0820 	orr.w	r8, r8, #32
 800f83a:	e77a      	b.n	800f732 <gc_execute_block+0x1eb6>
 800f83c:	200016c0 	.word	0x200016c0
 800f840:	200017c8 	.word	0x200017c8
 800f844:	20001750 	.word	0x20001750
 800f848:	477fff00 	.word	0x477fff00
 800f84c:	41cb3333 	.word	0x41cb3333
                if(!gc_state.spindle.hal->get_data)
 800f850:	4baf      	ldr	r3, [pc, #700]	@ (800fb10 <gc_execute_block+0x2294>)
 800f852:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f854:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800f856:	2b00      	cmp	r3, #0
 800f858:	f001 86f3 	beq.w	8011642 <gc_execute_block+0x3dc6>
                if(gc_block.modal.plane_select != PlaneSelect_ZX)
 800f85c:	4bad      	ldr	r3, [pc, #692]	@ (800fb14 <gc_execute_block+0x2298>)
 800f85e:	7b9b      	ldrb	r3, [r3, #14]
 800f860:	2b01      	cmp	r3, #1
 800f862:	f041 86f1 	bne.w	8011648 <gc_execute_block+0x3dcc>
                if(axis_words.mask & ~(bit(X_AXIS)|bit(Z_AXIS)))
 800f866:	fa5f f48b 	uxtb.w	r4, fp
 800f86a:	f01b 0ffa 	tst.w	fp, #250	@ 0xfa
 800f86e:	f041 86ee 	bne.w	801164e <gc_execute_block+0x3dd2>
                if(gc_block.words.r && gc_block.values.r < 1.0f)
 800f872:	4ba8      	ldr	r3, [pc, #672]	@ (800fb14 <gc_execute_block+0x2298>)
 800f874:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f878:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f87a:	f013 0304 	ands.w	r3, r3, #4
 800f87e:	930c      	str	r3, [sp, #48]	@ 0x30
 800f880:	d00a      	beq.n	800f898 <gc_execute_block+0x201c>
 800f882:	4ba4      	ldr	r3, [pc, #656]	@ (800fb14 <gc_execute_block+0x2298>)
 800f884:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 800f888:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f88c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f894:	f101 86de 	bmi.w	8011654 <gc_execute_block+0x3dd8>
                if(!axis_words.z || !(gc_block.words.i || gc_block.words.j || gc_block.words.k || gc_block.words.p))
 800f898:	f014 0f04 	tst.w	r4, #4
 800f89c:	f001 86dd 	beq.w	801165a <gc_execute_block+0x3dde>
 800f8a0:	4b9c      	ldr	r3, [pc, #624]	@ (800fb14 <gc_execute_block+0x2298>)
 800f8a2:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 800f8a6:	4b9c      	ldr	r3, [pc, #624]	@ (800fb18 <gc_execute_block+0x229c>)
 800f8a8:	4003      	ands	r3, r0
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	f001 86d8 	beq.w	8011660 <gc_execute_block+0x3de4>
                if(gc_block.values.p < 0.0f || gc_block.values.ijk[J_VALUE] < 0.0f || gc_block.values.ijk[K_VALUE] < 0.0f)
 800f8b0:	4b98      	ldr	r3, [pc, #608]	@ (800fb14 <gc_execute_block+0x2298>)
 800f8b2:	ed93 aa17 	vldr	s20, [r3, #92]	@ 0x5c
 800f8b6:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 800f8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8be:	f101 86d2 	bmi.w	8011666 <gc_execute_block+0x3dea>
 800f8c2:	ed93 9a13 	vldr	s18, [r3, #76]	@ 0x4c
 800f8c6:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800f8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ce:	f101 86cd 	bmi.w	801166c <gc_execute_block+0x3df0>
 800f8d2:	edd3 9a14 	vldr	s19, [r3, #80]	@ 0x50
 800f8d6:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 800f8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8de:	f101 86c8 	bmi.w	8011672 <gc_execute_block+0x3df6>
                if(gc_block.values.ijk[I_VALUE] == 0.0f ||
 800f8e2:	edd3 8a12 	vldr	s17, [r3, #72]	@ 0x48
 800f8e6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ee:	f001 86c3 	beq.w	8011678 <gc_execute_block+0x3dfc>
 800f8f2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8fa:	f001 86c0 	beq.w	801167e <gc_execute_block+0x3e02>
                    gc_block.values.ijk[J_VALUE] == 0.0f ||
 800f8fe:	eeb4 9ae9 	vcmpe.f32	s18, s19
 800f902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f906:	f281 86bd 	bge.w	8011684 <gc_execute_block+0x3e08>
                      (gc_block.words.l && (gc_taper_type)gc_block.values.l > Taper_Both))
 800f90a:	f893 60b9 	ldrb.w	r6, [r3, #185]	@ 0xb9
                     gc_block.values.ijk[K_VALUE] <= gc_block.values.ijk[J_VALUE] ||
 800f90e:	f016 0310 	ands.w	r3, r6, #16
 800f912:	930d      	str	r3, [sp, #52]	@ 0x34
 800f914:	d005      	beq.n	800f922 <gc_execute_block+0x20a6>
                      (gc_block.words.l && (gc_taper_type)gc_block.values.l > Taper_Both))
 800f916:	4b7f      	ldr	r3, [pc, #508]	@ (800fb14 <gc_execute_block+0x2298>)
 800f918:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800f91c:	2b03      	cmp	r3, #3
 800f91e:	f201 86b4 	bhi.w	801168a <gc_execute_block+0x3e0e>
                if(gc_state.spindle.rpm < gc_state.spindle.hal->rpm_min || gc_state.spindle.rpm > gc_state.spindle.hal->rpm_max)
 800f922:	4b7b      	ldr	r3, [pc, #492]	@ (800fb10 <gc_execute_block+0x2294>)
 800f924:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800f928:	ed92 7a05 	vldr	s14, [r2, #20]
 800f92c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f934:	f101 86ac 	bmi.w	8011690 <gc_execute_block+0x3e14>
 800f938:	ed92 7a06 	vldr	s14, [r2, #24]
 800f93c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f944:	f301 86a7 	bgt.w	8011696 <gc_execute_block+0x3e1a>
                if(gc_block.modal.motion != gc_state.modal.motion) {
 800f948:	428d      	cmp	r5, r1
 800f94a:	f040 80d4 	bne.w	800faf6 <gc_execute_block+0x227a>
                thread.pitch = gc_block.values.p;
 800f94e:	4b73      	ldr	r3, [pc, #460]	@ (800fb1c <gc_execute_block+0x22a0>)
 800f950:	ed83 aa00 	vstr	s20, [r3]
                thread.z_final = gc_block.values.xyz[Z_AXIS];
 800f954:	4a6f      	ldr	r2, [pc, #444]	@ (800fb14 <gc_execute_block+0x2298>)
 800f956:	ed92 8a23 	vldr	s16, [r2, #140]	@ 0x8c
 800f95a:	ed83 8a01 	vstr	s16, [r3, #4]
                thread.cut_direction = gc_block.values.ijk[I_VALUE] < 0.0f ? -1.0f : 1.0f;
 800f95e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800f962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f966:	f100 80d0 	bmi.w	800fb0a <gc_execute_block+0x228e>
 800f96a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800f96e:	4b6b      	ldr	r3, [pc, #428]	@ (800fb1c <gc_execute_block+0x22a0>)
 800f970:	625a      	str	r2, [r3, #36]	@ 0x24
                thread.peak = fabsf(gc_block.values.ijk[I_VALUE]);
 800f972:	eef0 8ae8 	vabs.f32	s17, s17
 800f976:	edc3 8a02 	vstr	s17, [r3, #8]
                thread.initial_depth = gc_block.values.ijk[J_VALUE];
 800f97a:	ed83 9a03 	vstr	s18, [r3, #12]
                thread.depth = gc_block.values.ijk[K_VALUE];
 800f97e:	edc3 9a04 	vstr	s19, [r3, #16]
                if(gc_block.modal.units_imperial) {
 800f982:	4b64      	ldr	r3, [pc, #400]	@ (800fb14 <gc_execute_block+0x2298>)
 800f984:	7adb      	ldrb	r3, [r3, #11]
 800f986:	b173      	cbz	r3, 800f9a6 <gc_execute_block+0x212a>
                    thread.peak *= MM_PER_INCH;
 800f988:	4b64      	ldr	r3, [pc, #400]	@ (800fb1c <gc_execute_block+0x22a0>)
 800f98a:	eddf 7a65 	vldr	s15, [pc, #404]	@ 800fb20 <gc_execute_block+0x22a4>
 800f98e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f992:	edc3 8a02 	vstr	s17, [r3, #8]
                    thread.initial_depth *= MM_PER_INCH;
 800f996:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f99a:	ed83 9a03 	vstr	s18, [r3, #12]
                    thread.depth *= MM_PER_INCH;
 800f99e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800f9a2:	edc3 9a04 	vstr	s19, [r3, #16]
                if(gc_block.modal.diameter_mode) {
 800f9a6:	4b5b      	ldr	r3, [pc, #364]	@ (800fb14 <gc_execute_block+0x2298>)
 800f9a8:	7b5b      	ldrb	r3, [r3, #13]
 800f9aa:	b1a3      	cbz	r3, 800f9d6 <gc_execute_block+0x215a>
                    thread.peak /= 2.0f;
 800f9ac:	4b5b      	ldr	r3, [pc, #364]	@ (800fb1c <gc_execute_block+0x22a0>)
 800f9ae:	edd3 7a02 	vldr	s15, [r3, #8]
 800f9b2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f9b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f9ba:	edc3 7a02 	vstr	s15, [r3, #8]
                    thread.initial_depth /= 2.0f;
 800f9be:	edd3 7a03 	vldr	s15, [r3, #12]
 800f9c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f9c6:	edc3 7a03 	vstr	s15, [r3, #12]
                    thread.depth /= 2.0f;
 800f9ca:	edd3 7a04 	vldr	s15, [r3, #16]
 800f9ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f9d2:	edc3 7a04 	vstr	s15, [r3, #16]
                if(axis_words.x) {
 800f9d6:	f014 0f01 	tst.w	r4, #1
 800f9da:	f040 80a5 	bne.w	800fb28 <gc_execute_block+0x22ac>
                if(gc_block.words.h)
 800f9de:	f016 0f08 	tst.w	r6, #8
 800f9e2:	d004      	beq.n	800f9ee <gc_execute_block+0x2172>
                    thread.spring_passes = (uint_fast16_t)gc_block.values.h;
 800f9e4:	4b4b      	ldr	r3, [pc, #300]	@ (800fb14 <gc_execute_block+0x2298>)
 800f9e6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800f9ea:	4b4c      	ldr	r3, [pc, #304]	@ (800fb1c <gc_execute_block+0x22a0>)
 800f9ec:	629a      	str	r2, [r3, #40]	@ 0x28
                if(gc_block.words.l)
 800f9ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f9f0:	b12b      	cbz	r3, 800f9fe <gc_execute_block+0x2182>
                    thread.end_taper_type = (gc_taper_type)gc_block.values.l;
 800f9f2:	4b48      	ldr	r3, [pc, #288]	@ (800fb14 <gc_execute_block+0x2298>)
 800f9f4:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 800f9f8:	4b48      	ldr	r3, [pc, #288]	@ (800fb1c <gc_execute_block+0x22a0>)
 800f9fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                if(gc_block.words.e)
 800f9fe:	f016 0f01 	tst.w	r6, #1
 800fa02:	d003      	beq.n	800fa0c <gc_execute_block+0x2190>
                    thread.end_taper_length = gc_block.values.e;
 800fa04:	4b43      	ldr	r3, [pc, #268]	@ (800fb14 <gc_execute_block+0x2298>)
 800fa06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fa08:	4b44      	ldr	r3, [pc, #272]	@ (800fb1c <gc_execute_block+0x22a0>)
 800fa0a:	61da      	str	r2, [r3, #28]
                if(thread.end_taper_length <= 0.0f || thread.end_taper_type == Taper_None) {
 800fa0c:	4b43      	ldr	r3, [pc, #268]	@ (800fb1c <gc_execute_block+0x22a0>)
 800fa0e:	edd3 7a07 	vldr	s15, [r3, #28]
 800fa12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fa16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa1a:	d902      	bls.n	800fa22 <gc_execute_block+0x21a6>
 800fa1c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800fa20:	b92b      	cbnz	r3, 800fa2e <gc_execute_block+0x21b2>
                    thread.end_taper_length = 0.0f;
 800fa22:	4b3e      	ldr	r3, [pc, #248]	@ (800fb1c <gc_execute_block+0x22a0>)
 800fa24:	2200      	movs	r2, #0
 800fa26:	61da      	str	r2, [r3, #28]
                    thread.end_taper_type = Taper_None;
 800fa28:	2200      	movs	r2, #0
 800fa2a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                if(thread.end_taper_type != Taper_None && thread.end_taper_length > abs(thread.z_final - gc_state.position[Z_AXIS]) / 2.0f)
 800fa2e:	4b3b      	ldr	r3, [pc, #236]	@ (800fb1c <gc_execute_block+0x22a0>)
 800fa30:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800fa34:	b1e3      	cbz	r3, 800fa70 <gc_execute_block+0x21f4>
 800fa36:	4b39      	ldr	r3, [pc, #228]	@ (800fb1c <gc_execute_block+0x22a0>)
 800fa38:	ed93 7a07 	vldr	s14, [r3, #28]
 800fa3c:	4b34      	ldr	r3, [pc, #208]	@ (800fb10 <gc_execute_block+0x2294>)
 800fa3e:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 800fa42:	ee78 7a67 	vsub.f32	s15, s16, s15
 800fa46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa4a:	ee17 3a90 	vmov	r3, s15
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	bfb8      	it	lt
 800fa52:	425b      	neglt	r3, r3
 800fa54:	ee07 3a90 	vmov	s15, r3
 800fa58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa5c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800fa60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fa68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa6c:	f301 8616 	bgt.w	801169c <gc_execute_block+0x3e20>
                if(gc_block.words.r)
 800fa70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fa72:	b11b      	cbz	r3, 800fa7c <gc_execute_block+0x2200>
                    thread.depth_degression = gc_block.values.r;
 800fa74:	4b27      	ldr	r3, [pc, #156]	@ (800fb14 <gc_execute_block+0x2298>)
 800fa76:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800fa78:	4b28      	ldr	r3, [pc, #160]	@ (800fb1c <gc_execute_block+0x22a0>)
 800fa7a:	615a      	str	r2, [r3, #20]
                if(gc_block.words.q)
 800fa7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa7e:	f013 0f02 	tst.w	r3, #2
 800fa82:	d003      	beq.n	800fa8c <gc_execute_block+0x2210>
                    thread.infeed_angle = gc_block.values.q;
 800fa84:	4b23      	ldr	r3, [pc, #140]	@ (800fb14 <gc_execute_block+0x2298>)
 800fa86:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800fa88:	4b24      	ldr	r3, [pc, #144]	@ (800fb1c <gc_execute_block+0x22a0>)
 800fa8a:	621a      	str	r2, [r3, #32]
                gc_parser_flags.spindle_force_sync = On;
 800fa8c:	f048 0820 	orr.w	r8, r8, #32
                gc_block.words.e = gc_block.words.h = gc_block.words.i = gc_block.words.j = gc_block.words.k = gc_block.words.l = gc_block.words.p = gc_block.words.q = gc_block.words.r = Off;
 800fa90:	4b20      	ldr	r3, [pc, #128]	@ (800fb14 <gc_execute_block+0x2298>)
 800fa92:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800fa96:	f36f 0282 	bfc	r2, #2, #1
 800fa9a:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800fa9e:	b2d2      	uxtb	r2, r2
 800faa0:	f36f 0241 	bfc	r2, #1, #1
 800faa4:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800faa8:	b2d2      	uxtb	r2, r2
 800faaa:	f36f 0200 	bfc	r2, #0, #1
 800faae:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800fab2:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800fab6:	f36f 1204 	bfc	r2, #4, #1
 800faba:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800fabe:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800fac2:	f36f 1286 	bfc	r2, #6, #1
 800fac6:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800faca:	b2d2      	uxtb	r2, r2
 800facc:	f36f 1245 	bfc	r2, #5, #1
 800fad0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800fad4:	b2d2      	uxtb	r2, r2
 800fad6:	f36f 1204 	bfc	r2, #4, #1
 800fada:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800fade:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800fae2:	f36f 02c3 	bfc	r2, #3, #1
 800fae6:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800faea:	b2d2      	uxtb	r2, r2
 800faec:	f36f 0200 	bfc	r2, #0, #1
 800faf0:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800faf4:	e61d      	b.n	800f732 <gc_execute_block+0x1eb6>
                    memset(&thread, 0, sizeof(gc_thread_data));
 800faf6:	2230      	movs	r2, #48	@ 0x30
 800faf8:	2100      	movs	r1, #0
 800fafa:	4808      	ldr	r0, [pc, #32]	@ (800fb1c <gc_execute_block+0x22a0>)
 800fafc:	f015 f917 	bl	8024d2e <memset>
                    thread.depth_degression = 1.0f;
 800fb00:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800fb04:	4a05      	ldr	r2, [pc, #20]	@ (800fb1c <gc_execute_block+0x22a0>)
 800fb06:	6153      	str	r3, [r2, #20]
 800fb08:	e721      	b.n	800f94e <gc_execute_block+0x20d2>
                thread.cut_direction = gc_block.values.ijk[I_VALUE] < 0.0f ? -1.0f : 1.0f;
 800fb0a:	4a06      	ldr	r2, [pc, #24]	@ (800fb24 <gc_execute_block+0x22a8>)
 800fb0c:	e72f      	b.n	800f96e <gc_execute_block+0x20f2>
 800fb0e:	bf00      	nop
 800fb10:	200017c8 	.word	0x200017c8
 800fb14:	200016c0 	.word	0x200016c0
 800fb18:	00010070 	.word	0x00010070
 800fb1c:	20001798 	.word	0x20001798
 800fb20:	41cb3333 	.word	0x41cb3333
 800fb24:	bf800000 	.word	0xbf800000
                    thread.main_taper_height = gc_block.values.xyz[X_AXIS] - gc_get_block_offset(&gc_block, X_AXIS);
 800fb28:	4bb4      	ldr	r3, [pc, #720]	@ (800fdfc <gc_execute_block+0x2580>)
 800fb2a:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
    return gc_block->modal.coord_system.xyz[idx] + gc_state.g92_coord_offset[idx] + gc_state.tool_length_offset[idx];
 800fb2e:	ed93 7a04 	vldr	s14, [r3, #16]
 800fb32:	4ab3      	ldr	r2, [pc, #716]	@ (800fe00 <gc_execute_block+0x2584>)
 800fb34:	edd2 6a2e 	vldr	s13, [r2, #184]	@ 0xb8
 800fb38:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fb3c:	edd2 6a31 	vldr	s13, [r2, #196]	@ 0xc4
 800fb40:	ee37 7a26 	vadd.f32	s14, s14, s13
                    thread.main_taper_height = gc_block.values.xyz[X_AXIS] - gc_get_block_offset(&gc_block, X_AXIS);
 800fb44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb48:	4cae      	ldr	r4, [pc, #696]	@ (800fe04 <gc_execute_block+0x2588>)
 800fb4a:	edc4 7a06 	vstr	s15, [r4, #24]
                    gc_block.values.p = fabsf(thread.z_final - gc_state.position[Z_AXIS]);
 800fb4e:	ed92 0a1c 	vldr	s0, [r2, #112]	@ 0x70
 800fb52:	ee38 0a40 	vsub.f32	s0, s16, s0
 800fb56:	eef0 8ac0 	vabs.f32	s17, s0
 800fb5a:	edc3 8a17 	vstr	s17, [r3, #92]	@ 0x5c
    return sqrtf(x * x + y * y);
 800fb5e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fb62:	ee07 0aa7 	vmla.f32	s0, s15, s15
 800fb66:	f017 fe43 	bl	80277f0 <sqrtf>
                    thread.pitch = thread.pitch * hypot_f(thread.main_taper_height, gc_block.values.p) / gc_block.values.p;
 800fb6a:	ee2a aa00 	vmul.f32	s20, s20, s0
 800fb6e:	eeca 7a28 	vdiv.f32	s15, s20, s17
 800fb72:	edc4 7a00 	vstr	s15, [r4]
 800fb76:	e732      	b.n	800f9de <gc_execute_block+0x2162>
                else if(gc_block.values.l <= 0)
 800fb78:	4ba0      	ldr	r3, [pc, #640]	@ (800fdfc <gc_execute_block+0x2580>)
 800fb7a:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	f47f ae13 	bne.w	800f7aa <gc_execute_block+0x1f2e>
                    FAIL(Status_NonPositiveValue); // [L <= 0]
 800fb84:	2413      	movs	r4, #19
 800fb86:	f7fd bf56 	b.w	800da36 <gc_execute_block+0x1ba>
                    gc_state.canned.retract_position = gc_block.values.r * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f) +
 800fb8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fb8e:	e61b      	b.n	800f7c8 <gc_execute_block+0x1f4c>
                                                          : gc_get_block_offset(&gc_block, plane.axis_linear));
 800fb90:	f89d 308a 	ldrb.w	r3, [sp, #138]	@ 0x8a
    return gc_block->modal.coord_system.xyz[idx] + gc_state.g92_coord_offset[idx] + gc_state.tool_length_offset[idx];
 800fb94:	1d18      	adds	r0, r3, #4
 800fb96:	4a99      	ldr	r2, [pc, #612]	@ (800fdfc <gc_execute_block+0x2580>)
 800fb98:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800fb9c:	edd2 7a00 	vldr	s15, [r2]
 800fba0:	4a97      	ldr	r2, [pc, #604]	@ (800fe00 <gc_execute_block+0x2584>)
 800fba2:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 800fba6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800fbaa:	edd0 6a00 	vldr	s13, [r0]
 800fbae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbb2:	3330      	adds	r3, #48	@ 0x30
 800fbb4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fbb8:	edd2 6a01 	vldr	s13, [r2, #4]
 800fbbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbc0:	e611      	b.n	800f7e6 <gc_execute_block+0x1f6a>
                        else if(gc_block.modal.distance_incremental)
 800fbc2:	4a8e      	ldr	r2, [pc, #568]	@ (800fdfc <gc_execute_block+0x2580>)
 800fbc4:	7b12      	ldrb	r2, [r2, #12]
 800fbc6:	b192      	cbz	r2, 800fbee <gc_execute_block+0x2372>
                            gc_state.canned.xyz[idx] = gc_state.canned.retract_position + (gc_state.canned.xyz[idx] - gc_state.position[idx]);
 800fbc8:	4a8d      	ldr	r2, [pc, #564]	@ (800fe00 <gc_execute_block+0x2584>)
 800fbca:	ed92 7a12 	vldr	s14, [r2, #72]	@ 0x48
 800fbce:	f103 001a 	add.w	r0, r3, #26
 800fbd2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800fbd6:	edd0 6a00 	vldr	s13, [r0]
 800fbda:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fbde:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbe2:	f103 000c 	add.w	r0, r3, #12
 800fbe6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800fbea:	edc2 7a01 	vstr	s15, [r2, #4]
                } while(idx);
 800fbee:	b343      	cbz	r3, 800fc42 <gc_execute_block+0x23c6>
                    if(bit_istrue(axis_words.mask, bit(--idx))) {
 800fbf0:	fa5f f28b 	uxtb.w	r2, fp
 800fbf4:	3b01      	subs	r3, #1
 800fbf6:	40da      	lsrs	r2, r3
 800fbf8:	f012 0f01 	tst.w	r2, #1
 800fbfc:	d0f7      	beq.n	800fbee <gc_execute_block+0x2372>
                        gc_state.canned.xyz[idx] = gc_block.values.xyz[idx];
 800fbfe:	f103 0020 	add.w	r0, r3, #32
 800fc02:	4a7e      	ldr	r2, [pc, #504]	@ (800fdfc <gc_execute_block+0x2580>)
 800fc04:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800fc08:	edd2 7a01 	vldr	s15, [r2, #4]
 800fc0c:	f103 000c 	add.w	r0, r3, #12
 800fc10:	4a7b      	ldr	r2, [pc, #492]	@ (800fe00 <gc_execute_block+0x2584>)
 800fc12:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800fc16:	edc2 7a01 	vstr	s15, [r2, #4]
                        if(idx != plane.axis_linear)
 800fc1a:	f89d 208a 	ldrb.w	r2, [sp, #138]	@ 0x8a
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	d0cf      	beq.n	800fbc2 <gc_execute_block+0x2346>
                            gc_state.canned.xyz[idx] -= gc_state.position[idx];
 800fc22:	4a77      	ldr	r2, [pc, #476]	@ (800fe00 <gc_execute_block+0x2584>)
 800fc24:	f103 001a 	add.w	r0, r3, #26
 800fc28:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800fc2c:	ed90 7a00 	vldr	s14, [r0]
 800fc30:	f103 000c 	add.w	r0, r3, #12
 800fc34:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800fc38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc3c:	edc2 7a01 	vstr	s15, [r2, #4]
 800fc40:	e7d5      	b.n	800fbee <gc_execute_block+0x2372>
                if(gc_state.canned.retract_position < gc_state.canned.xyz[plane.axis_linear])
 800fc42:	4b6f      	ldr	r3, [pc, #444]	@ (800fe00 <gc_execute_block+0x2584>)
 800fc44:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800fc48:	f89d 208a 	ldrb.w	r2, [sp, #138]	@ 0x8a
 800fc4c:	320c      	adds	r2, #12
 800fc4e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800fc52:	ed93 7a01 	vldr	s14, [r3, #4]
 800fc56:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fc5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc5e:	f101 852c 	bmi.w	80116ba <gc_execute_block+0x3e3e>
                gc_block.words.r = gc_block.words.l = Off; // Remove single-meaning value words.
 800fc62:	4b66      	ldr	r3, [pc, #408]	@ (800fdfc <gc_execute_block+0x2580>)
 800fc64:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800fc68:	f36f 1204 	bfc	r2, #4, #1
 800fc6c:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800fc70:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800fc74:	f36f 0282 	bfc	r2, #2, #1
 800fc78:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                switch (gc_block.modal.motion) {
 800fc7c:	f1a5 0349 	sub.w	r3, r5, #73	@ 0x49
 800fc80:	2b10      	cmp	r3, #16
 800fc82:	f63f abb5 	bhi.w	800f3f0 <gc_execute_block+0x1b74>
 800fc86:	a201      	add	r2, pc, #4	@ (adr r2, 800fc8c <gc_execute_block+0x2410>)
 800fc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc8c:	0800fd39 	.word	0x0800fd39
 800fc90:	0800f3f1 	.word	0x0800f3f1
 800fc94:	0800f3f1 	.word	0x0800f3f1
 800fc98:	0800f3f1 	.word	0x0800f3f1
 800fc9c:	0800f3f1 	.word	0x0800f3f1
 800fca0:	0800f3f1 	.word	0x0800f3f1
 800fca4:	0800f3f1 	.word	0x0800f3f1
 800fca8:	0800f3f1 	.word	0x0800f3f1
 800fcac:	0800fd15 	.word	0x0800fd15
 800fcb0:	0800fce3 	.word	0x0800fce3
 800fcb4:	0800fd39 	.word	0x0800fd39
 800fcb8:	0800f3f1 	.word	0x0800f3f1
 800fcbc:	0800fd15 	.word	0x0800fd15
 800fcc0:	0800fcd1 	.word	0x0800fcd1
 800fcc4:	0800f3f1 	.word	0x0800f3f1
 800fcc8:	0800f3f1 	.word	0x0800f3f1
 800fccc:	0800fcd1 	.word	0x0800fcd1
                        gc_state.canned.spindle_off = gc_block.modal.motion == MotionMode_CannedCycle86;
 800fcd0:	2d56      	cmp	r5, #86	@ 0x56
 800fcd2:	bf14      	ite	ne
 800fcd4:	2200      	movne	r2, #0
 800fcd6:	2201      	moveq	r2, #1
 800fcd8:	4b49      	ldr	r3, [pc, #292]	@ (800fe00 <gc_execute_block+0x2584>)
 800fcda:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
                        gc_state.canned.rapid_retract = gc_block.modal.motion == MotionMode_CannedCycle86;
 800fcde:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                        if(gc_block.words.p) {
 800fce2:	4b46      	ldr	r3, [pc, #280]	@ (800fdfc <gc_execute_block+0x2580>)
 800fce4:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800fce8:	f013 0f01 	tst.w	r3, #1
 800fcec:	d01f      	beq.n	800fd2e <gc_execute_block+0x24b2>
                            if(gc_block.values.p < 0.0f)
 800fcee:	4b43      	ldr	r3, [pc, #268]	@ (800fdfc <gc_execute_block+0x2580>)
 800fcf0:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 800fcf4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800fcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcfc:	f101 84e0 	bmi.w	80116c0 <gc_execute_block+0x3e44>
                            gc_state.canned.dwell = gc_block.values.p;
 800fd00:	4b3f      	ldr	r3, [pc, #252]	@ (800fe00 <gc_execute_block+0x2584>)
 800fd02:	edc3 6a11 	vstr	s13, [r3, #68]	@ 0x44
                            gc_block.words.p = Off; // Remove single-meaning value word.
 800fd06:	4b3d      	ldr	r3, [pc, #244]	@ (800fdfc <gc_execute_block+0x2580>)
 800fd08:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800fd0c:	f36f 0200 	bfc	r2, #0, #1
 800fd10:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                        gc_state.canned.delta = - gc_state.canned.xyz[plane.axis_linear] + gc_state.canned.retract_position;
 800fd14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd18:	4b39      	ldr	r3, [pc, #228]	@ (800fe00 <gc_execute_block+0x2584>)
 800fd1a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
                        if(gc_block.modal.motion == MotionMode_CannedCycle85)
 800fd1e:	2d55      	cmp	r5, #85	@ 0x55
 800fd20:	f47f ab66 	bne.w	800f3f0 <gc_execute_block+0x1b74>
                            gc_state.canned.rapid_retract = Off;
 800fd24:	2200      	movs	r2, #0
 800fd26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 800fd2a:	f7ff bb61 	b.w	800f3f0 <gc_execute_block+0x1b74>
                        } else if(gc_parser_flags.canned_cycle_change)
 800fd2e:	2900      	cmp	r1, #0
 800fd30:	d0f0      	beq.n	800fd14 <gc_execute_block+0x2498>
                            FAIL(Status_GcodeValueWordMissing);
 800fd32:	241c      	movs	r4, #28
 800fd34:	f7fd be7f 	b.w	800da36 <gc_execute_block+0x1ba>
                        if(gc_block.words.q) {
 800fd38:	4b30      	ldr	r3, [pc, #192]	@ (800fdfc <gc_execute_block+0x2580>)
 800fd3a:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800fd3e:	f013 0f02 	tst.w	r3, #2
 800fd42:	d021      	beq.n	800fd88 <gc_execute_block+0x250c>
                            if(gc_block.values.q <= 0.0f)
 800fd44:	4b2d      	ldr	r3, [pc, #180]	@ (800fdfc <gc_execute_block+0x2580>)
 800fd46:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800fd4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd52:	f241 84b8 	bls.w	80116c6 <gc_execute_block+0x3e4a>
                            gc_state.canned.delta = gc_block.values.q * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f);
 800fd56:	7adb      	ldrb	r3, [r3, #11]
 800fd58:	b19b      	cbz	r3, 800fd82 <gc_execute_block+0x2506>
 800fd5a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800fe08 <gc_execute_block+0x258c>
 800fd5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd62:	4b27      	ldr	r3, [pc, #156]	@ (800fe00 <gc_execute_block+0x2584>)
 800fd64:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
                            gc_block.words.q = Off; // Remove single-meaning value word.
 800fd68:	4b24      	ldr	r3, [pc, #144]	@ (800fdfc <gc_execute_block+0x2580>)
 800fd6a:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800fd6e:	f36f 0241 	bfc	r2, #1, #1
 800fd72:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                        gc_state.canned.dwell = 0.25f;
 800fd76:	4b22      	ldr	r3, [pc, #136]	@ (800fe00 <gc_execute_block+0x2584>)
 800fd78:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 800fd7c:	645a      	str	r2, [r3, #68]	@ 0x44
                        break;
 800fd7e:	f7ff bb37 	b.w	800f3f0 <gc_execute_block+0x1b74>
                            gc_state.canned.delta = gc_block.values.q * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f);
 800fd82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fd86:	e7ea      	b.n	800fd5e <gc_execute_block+0x24e2>
                        } else if(gc_parser_flags.canned_cycle_change)
 800fd88:	2900      	cmp	r1, #0
 800fd8a:	d0f4      	beq.n	800fd76 <gc_execute_block+0x24fa>
                            FAIL(Status_GcodeValueWordMissing);
 800fd8c:	241c      	movs	r4, #28
 800fd8e:	f7fd be52 	b.w	800da36 <gc_execute_block+0x1ba>
            } else switch (gc_block.modal.motion) {
 800fd92:	2d05      	cmp	r5, #5
 800fd94:	d814      	bhi.n	800fdc0 <gc_execute_block+0x2544>
 800fd96:	b22b      	sxth	r3, r5
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	f43f ab29 	beq.w	800f3f0 <gc_execute_block+0x1b74>
 800fd9e:	1e6b      	subs	r3, r5, #1
 800fda0:	2b04      	cmp	r3, #4
 800fda2:	f63f ab25 	bhi.w	800f3f0 <gc_execute_block+0x1b74>
 800fda6:	a201      	add	r2, pc, #4	@ (adr r2, 800fdac <gc_execute_block+0x2530>)
 800fda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdac:	0800fded 	.word	0x0800fded
 800fdb0:	0800fe0d 	.word	0x0800fe0d
 800fdb4:	0800fe11 	.word	0x0800fe11
 800fdb8:	0800f3f1 	.word	0x0800f3f1
 800fdbc:	0801012d 	.word	0x0801012d
 800fdc0:	2d33      	cmp	r5, #51	@ 0x33
 800fdc2:	f000 824f 	beq.w	8010264 <gc_execute_block+0x29e8>
 800fdc6:	f4ff ab13 	bcc.w	800f3f0 <gc_execute_block+0x1b74>
 800fdca:	2d8f      	cmp	r5, #143	@ 0x8f
 800fdcc:	f63f ab10 	bhi.w	800f3f0 <gc_execute_block+0x1b74>
 800fdd0:	2d8c      	cmp	r5, #140	@ 0x8c
 800fdd2:	f4ff ab0d 	bcc.w	800f3f0 <gc_execute_block+0x1b74>
 800fdd6:	f1a5 038c 	sub.w	r3, r5, #140	@ 0x8c
 800fdda:	2b03      	cmp	r3, #3
 800fddc:	f63f ab08 	bhi.w	800f3f0 <gc_execute_block+0x1b74>
 800fde0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fde4:	028d028f 	.word	0x028d028f
 800fde8:	028d028f 	.word	0x028d028f
                    if (!axis_words.mask)
 800fdec:	fa5f f38b 	uxtb.w	r3, fp
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	f47f aafd 	bne.w	800f3f0 <gc_execute_block+0x1b74>
                        axis_command = AxisCommand_None;
 800fdf6:	469a      	mov	sl, r3
 800fdf8:	f7ff bafa 	b.w	800f3f0 <gc_execute_block+0x1b74>
 800fdfc:	200016c0 	.word	0x200016c0
 800fe00:	200017c8 	.word	0x200017c8
 800fe04:	20001798 	.word	0x20001798
 800fe08:	41cb3333 	.word	0x41cb3333
                    gc_parser_flags.arc_is_clockwise = On;
 800fe0c:	f048 0804 	orr.w	r8, r8, #4
                    if (!axis_words.mask)
 800fe10:	fa5f f18b 	uxtb.w	r1, fp
 800fe14:	2900      	cmp	r1, #0
 800fe16:	f001 8459 	beq.w	80116cc <gc_execute_block+0x3e50>
                    if (!(axis_words.mask & (bit(plane.axis_0)|bit(plane.axis_1))))
 800fe1a:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 800fe1e:	2201      	movs	r2, #1
 800fe20:	fa02 f303 	lsl.w	r3, r2, r3
 800fe24:	f89d 0089 	ldrb.w	r0, [sp, #137]	@ 0x89
 800fe28:	4082      	lsls	r2, r0
 800fe2a:	4313      	orrs	r3, r2
 800fe2c:	4219      	tst	r1, r3
 800fe2e:	f001 8450 	beq.w	80116d2 <gc_execute_block+0x3e56>
                    if (gc_block.words.p) { // Number of turns
 800fe32:	4bb7      	ldr	r3, [pc, #732]	@ (8010110 <gc_execute_block+0x2894>)
 800fe34:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800fe38:	f013 0f01 	tst.w	r3, #1
 800fe3c:	f040 80a8 	bne.w	800ff90 <gc_execute_block+0x2714>
                        gc_block.arc_turns = 1;
 800fe40:	4bb3      	ldr	r3, [pc, #716]	@ (8010110 <gc_execute_block+0x2894>)
 800fe42:	2201      	movs	r2, #1
 800fe44:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
                    x = gc_block.values.xyz[plane.axis_0] - gc_state.position[plane.axis_0]; // Delta x between current position and target
 800fe48:	f89d 4088 	ldrb.w	r4, [sp, #136]	@ 0x88
 800fe4c:	4ab0      	ldr	r2, [pc, #704]	@ (8010110 <gc_execute_block+0x2894>)
 800fe4e:	f104 0320 	add.w	r3, r4, #32
 800fe52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe56:	edd3 7a01 	vldr	s15, [r3, #4]
 800fe5a:	4bae      	ldr	r3, [pc, #696]	@ (8010114 <gc_execute_block+0x2898>)
 800fe5c:	f104 011a 	add.w	r1, r4, #26
 800fe60:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800fe64:	ed91 7a00 	vldr	s14, [r1]
 800fe68:	ee37 9ac7 	vsub.f32	s18, s15, s14
                    y = gc_block.values.xyz[plane.axis_1] - gc_state.position[plane.axis_1]; // Delta y between current position and target
 800fe6c:	f89d 5089 	ldrb.w	r5, [sp, #137]	@ 0x89
 800fe70:	f105 0120 	add.w	r1, r5, #32
 800fe74:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800fe78:	ed91 8a01 	vldr	s16, [r1, #4]
 800fe7c:	f105 011a 	add.w	r1, r5, #26
 800fe80:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800fe84:	edd3 7a00 	vldr	s15, [r3]
 800fe88:	ee38 8a67 	vsub.f32	s16, s16, s15
                    if (gc_block.words.r) { // Arc Radius Mode
 800fe8c:	f892 30ba 	ldrb.w	r3, [r2, #186]	@ 0xba
 800fe90:	f013 0f04 	tst.w	r3, #4
 800fe94:	f000 80a3 	beq.w	800ffde <gc_execute_block+0x2762>
                        gc_block.words.r = Off;
 800fe98:	4611      	mov	r1, r2
 800fe9a:	f892 30ba 	ldrb.w	r3, [r2, #186]	@ 0xba
 800fe9e:	f36f 0382 	bfc	r3, #2, #1
 800fea2:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
                        if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 800fea6:	220c      	movs	r2, #12
 800fea8:	3184      	adds	r1, #132	@ 0x84
 800feaa:	489b      	ldr	r0, [pc, #620]	@ (8010118 <gc_execute_block+0x289c>)
 800feac:	f014 ff15 	bl	8024cda <memcmp>
 800feb0:	2800      	cmp	r0, #0
 800feb2:	f001 8417 	beq.w	80116e4 <gc_execute_block+0x3e68>
                        if (gc_block.modal.units_imperial)
 800feb6:	4b96      	ldr	r3, [pc, #600]	@ (8010110 <gc_execute_block+0x2894>)
 800feb8:	7adb      	ldrb	r3, [r3, #11]
 800feba:	b143      	cbz	r3, 800fece <gc_execute_block+0x2652>
                            gc_block.values.r *= MM_PER_INCH;
 800febc:	4b94      	ldr	r3, [pc, #592]	@ (8010110 <gc_execute_block+0x2894>)
 800febe:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800fec2:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 801011c <gc_execute_block+0x28a0>
 800fec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800feca:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
                        if(gc_state.modal.scaling_active)
 800fece:	4b91      	ldr	r3, [pc, #580]	@ (8010114 <gc_execute_block+0x2898>)
 800fed0:	7f9b      	ldrb	r3, [r3, #30]
 800fed2:	b1cb      	cbz	r3, 800ff08 <gc_execute_block+0x268c>
                            gc_block.values.r *= (scale_factor.ijk[plane.axis_0] > scale_factor.ijk[plane.axis_1]
 800fed4:	4b8e      	ldr	r3, [pc, #568]	@ (8010110 <gc_execute_block+0x2894>)
 800fed6:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800feda:	4b91      	ldr	r3, [pc, #580]	@ (8010120 <gc_execute_block+0x28a4>)
 800fedc:	1ca2      	adds	r2, r4, #2
 800fede:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800fee2:	edd2 6a01 	vldr	s13, [r2, #4]
 800fee6:	1caa      	adds	r2, r5, #2
 800fee8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800feec:	ed93 7a01 	vldr	s14, [r3, #4]
                                                   : scale_factor.ijk[plane.axis_1]);
 800fef0:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef8:	dd01      	ble.n	800fefe <gc_execute_block+0x2682>
 800fefa:	eeb0 7a66 	vmov.f32	s14, s13
                            gc_block.values.r *= (scale_factor.ijk[plane.axis_0] > scale_factor.ijk[plane.axis_1]
 800fefe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff02:	4b83      	ldr	r3, [pc, #524]	@ (8010110 <gc_execute_block+0x2894>)
 800ff04:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
                        float h_x2_div_d = 4.0f * gc_block.values.r * gc_block.values.r - x * x - y * y;
 800ff08:	4b81      	ldr	r3, [pc, #516]	@ (8010110 <gc_execute_block+0x2894>)
 800ff0a:	edd3 8a19 	vldr	s17, [r3, #100]	@ 0x64
 800ff0e:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800ff12:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800ff16:	ee69 aa09 	vmul.f32	s21, s18, s18
 800ff1a:	eeb0 0a6a 	vmov.f32	s0, s21
 800ff1e:	ee18 0aa7 	vnmls.f32	s0, s17, s15
 800ff22:	ee28 aa08 	vmul.f32	s20, s16, s16
 800ff26:	ee30 0a4a 	vsub.f32	s0, s0, s20
                        if (h_x2_div_d < 0.0f)
 800ff2a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ff2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff32:	f101 83da 	bmi.w	80116ea <gc_execute_block+0x3e6e>
                        h_x2_div_d = -sqrtf(h_x2_div_d) / hypot_f(x, y); // == -(h * 2 / d)
 800ff36:	f017 fc5b 	bl	80277f0 <sqrtf>
 800ff3a:	eef1 9a40 	vneg.f32	s19, s0
    return sqrtf(x * x + y * y);
 800ff3e:	ee3a 0a8a 	vadd.f32	s0, s21, s20
 800ff42:	f017 fc55 	bl	80277f0 <sqrtf>
                        h_x2_div_d = -sqrtf(h_x2_div_d) / hypot_f(x, y); // == -(h * 2 / d)
 800ff46:	eec9 7a80 	vdiv.f32	s15, s19, s0
                        if (gc_block.modal.motion == MotionMode_CcwArc)
 800ff4a:	4b71      	ldr	r3, [pc, #452]	@ (8010110 <gc_execute_block+0x2894>)
 800ff4c:	891b      	ldrh	r3, [r3, #8]
 800ff4e:	2b03      	cmp	r3, #3
 800ff50:	d03a      	beq.n	800ffc8 <gc_execute_block+0x274c>
                        if (gc_block.values.r < 0.0f) {
 800ff52:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800ff56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff5a:	d438      	bmi.n	800ffce <gc_execute_block+0x2752>
                        gc_block.values.ijk[plane.axis_0] = 0.5f * (x - (y * h_x2_div_d));
 800ff5c:	eeb0 7a49 	vmov.f32	s14, s18
 800ff60:	ee07 7ac8 	vmls.f32	s14, s15, s16
 800ff64:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800ff68:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ff6c:	4b68      	ldr	r3, [pc, #416]	@ (8010110 <gc_execute_block+0x2894>)
 800ff6e:	f104 0210 	add.w	r2, r4, #16
 800ff72:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ff76:	ed82 7a02 	vstr	s14, [r2, #8]
                        gc_block.values.ijk[plane.axis_1] = 0.5f * (y + (x * h_x2_div_d));
 800ff7a:	ee07 8a89 	vmla.f32	s16, s15, s18
 800ff7e:	ee68 7a26 	vmul.f32	s15, s16, s13
 800ff82:	3510      	adds	r5, #16
 800ff84:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800ff88:	edc3 7a02 	vstr	s15, [r3, #8]
 800ff8c:	f7ff ba30 	b.w	800f3f0 <gc_execute_block+0x1b74>
                        if(!isintf(gc_block.values.p))
 800ff90:	4b5f      	ldr	r3, [pc, #380]	@ (8010110 <gc_execute_block+0x2894>)
 800ff92:	ed93 0a17 	vldr	s0, [r3, #92]	@ 0x5c
 800ff96:	f005 fe8b 	bl	8015cb0 <isintf>
 800ff9a:	2800      	cmp	r0, #0
 800ff9c:	f001 839c 	beq.w	80116d8 <gc_execute_block+0x3e5c>
                        gc_block.arc_turns = (uint32_t)truncf(gc_block.values.p);
 800ffa0:	4a5b      	ldr	r2, [pc, #364]	@ (8010110 <gc_execute_block+0x2894>)
 800ffa2:	edd2 7a17 	vldr	s15, [r2, #92]	@ 0x5c
 800ffa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ffaa:	ee17 3a90 	vmov	r3, s15
 800ffae:	edc2 7a32 	vstr	s15, [r2, #200]	@ 0xc8
                        if(gc_block.arc_turns == 0)
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	f001 8393 	beq.w	80116de <gc_execute_block+0x3e62>
                        gc_block.words.p = Off;
 800ffb8:	4613      	mov	r3, r2
 800ffba:	f892 20ba 	ldrb.w	r2, [r2, #186]	@ 0xba
 800ffbe:	f36f 0200 	bfc	r2, #0, #1
 800ffc2:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800ffc6:	e73f      	b.n	800fe48 <gc_execute_block+0x25cc>
                            h_x2_div_d = -h_x2_div_d;
 800ffc8:	eef1 7a67 	vneg.f32	s15, s15
 800ffcc:	e7c1      	b.n	800ff52 <gc_execute_block+0x26d6>
                            h_x2_div_d = -h_x2_div_d;
 800ffce:	eef1 7a67 	vneg.f32	s15, s15
                            gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 800ffd2:	eef1 8a68 	vneg.f32	s17, s17
 800ffd6:	4b4e      	ldr	r3, [pc, #312]	@ (8010110 <gc_execute_block+0x2894>)
 800ffd8:	edc3 8a19 	vstr	s17, [r3, #100]	@ 0x64
 800ffdc:	e7be      	b.n	800ff5c <gc_execute_block+0x26e0>
                        if (!(ijk_words.mask & (bit(plane.axis_0)|bit(plane.axis_1))))
 800ffde:	9805      	ldr	r0, [sp, #20]
 800ffe0:	4601      	mov	r1, r0
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	fa03 f204 	lsl.w	r2, r3, r4
 800ffe8:	40ab      	lsls	r3, r5
 800ffea:	4313      	orrs	r3, r2
 800ffec:	4218      	tst	r0, r3
 800ffee:	f001 837f 	beq.w	80116f0 <gc_execute_block+0x3e74>
                        gc_block.words.i = gc_block.words.j = gc_block.words.k = Off;
 800fff2:	4b47      	ldr	r3, [pc, #284]	@ (8010110 <gc_execute_block+0x2894>)
 800fff4:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800fff8:	f36f 1286 	bfc	r2, #6, #1
 800fffc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8010000:	b2d2      	uxtb	r2, r2
 8010002:	f36f 1245 	bfc	r2, #5, #1
 8010006:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 801000a:	b2d2      	uxtb	r2, r2
 801000c:	f36f 1204 	bfc	r2, #4, #1
 8010010:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
                        if (gc_block.modal.units_imperial) {
 8010014:	7adb      	ldrb	r3, [r3, #11]
 8010016:	b1b3      	cbz	r3, 8010046 <gc_execute_block+0x27ca>
                            idx = 3;
 8010018:	2303      	movs	r3, #3
 801001a:	e000      	b.n	801001e <gc_execute_block+0x27a2>
                            } while(idx);
 801001c:	b19b      	cbz	r3, 8010046 <gc_execute_block+0x27ca>
                                idx--;
 801001e:	3b01      	subs	r3, #1
                                if (ijk_words.mask & bit(idx))
 8010020:	fa21 f203 	lsr.w	r2, r1, r3
 8010024:	f012 0f01 	tst.w	r2, #1
 8010028:	d0f8      	beq.n	801001c <gc_execute_block+0x27a0>
                                    gc_block.values.ijk[idx] *= MM_PER_INCH;
 801002a:	f103 0010 	add.w	r0, r3, #16
 801002e:	4a38      	ldr	r2, [pc, #224]	@ (8010110 <gc_execute_block+0x2894>)
 8010030:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8010034:	edd2 7a02 	vldr	s15, [r2, #8]
 8010038:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 801011c <gc_execute_block+0x28a0>
 801003c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010040:	edc2 7a02 	vstr	s15, [r2, #8]
 8010044:	e7ea      	b.n	801001c <gc_execute_block+0x27a0>
                        if(gc_state.modal.scaling_active) {
 8010046:	4b33      	ldr	r3, [pc, #204]	@ (8010114 <gc_execute_block+0x2898>)
 8010048:	7f9b      	ldrb	r3, [r3, #30]
 801004a:	b1d3      	cbz	r3, 8010082 <gc_execute_block+0x2806>
                            idx = 3;
 801004c:	2303      	movs	r3, #3
 801004e:	e000      	b.n	8010052 <gc_execute_block+0x27d6>
                            } while(idx);
 8010050:	b1bb      	cbz	r3, 8010082 <gc_execute_block+0x2806>
                                if (ijk_words.mask & bit(--idx))
 8010052:	3b01      	subs	r3, #1
 8010054:	fa21 f203 	lsr.w	r2, r1, r3
 8010058:	f012 0f01 	tst.w	r2, #1
 801005c:	d0f8      	beq.n	8010050 <gc_execute_block+0x27d4>
                                    gc_block.values.ijk[idx] *= scale_factor.ijk[idx];
 801005e:	f103 0010 	add.w	r0, r3, #16
 8010062:	4a2b      	ldr	r2, [pc, #172]	@ (8010110 <gc_execute_block+0x2894>)
 8010064:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8010068:	edd2 7a02 	vldr	s15, [r2, #8]
 801006c:	1c9e      	adds	r6, r3, #2
 801006e:	482c      	ldr	r0, [pc, #176]	@ (8010120 <gc_execute_block+0x28a4>)
 8010070:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8010074:	ed90 7a01 	vldr	s14, [r0, #4]
 8010078:	ee67 7a87 	vmul.f32	s15, s15, s14
 801007c:	edc2 7a02 	vstr	s15, [r2, #8]
 8010080:	e7e6      	b.n	8010050 <gc_execute_block+0x27d4>
                        x -= gc_block.values.ijk[plane.axis_0]; // Delta x between circle center and target
 8010082:	4e23      	ldr	r6, [pc, #140]	@ (8010110 <gc_execute_block+0x2894>)
 8010084:	f104 0310 	add.w	r3, r4, #16
 8010088:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801008c:	edd3 9a02 	vldr	s19, [r3, #8]
 8010090:	ee79 7a69 	vsub.f32	s15, s18, s19
                        y -= gc_block.values.ijk[plane.axis_1]; // Delta y between circle center and target
 8010094:	f105 0310 	add.w	r3, r5, #16
 8010098:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801009c:	edd3 8a02 	vldr	s17, [r3, #8]
 80100a0:	ee38 8a68 	vsub.f32	s16, s16, s17
    return sqrtf(x * x + y * y);
 80100a4:	ee28 8a08 	vmul.f32	s16, s16, s16
 80100a8:	eeb0 0a48 	vmov.f32	s0, s16
 80100ac:	ee07 0aa7 	vmla.f32	s0, s15, s15
 80100b0:	f017 fb9e 	bl	80277f0 <sqrtf>
 80100b4:	eeb0 8a40 	vmov.f32	s16, s0
 80100b8:	ee68 8aa8 	vmul.f32	s17, s17, s17
 80100bc:	eeb0 0a68 	vmov.f32	s0, s17
 80100c0:	ee09 0aa9 	vmla.f32	s0, s19, s19
 80100c4:	f017 fb94 	bl	80277f0 <sqrtf>
                        gc_block.values.r = hypot_f(gc_block.values.ijk[plane.axis_0], gc_block.values.ijk[plane.axis_1]);
 80100c8:	ed86 0a19 	vstr	s0, [r6, #100]	@ 0x64
                        float delta_r = fabsf(target_r - gc_block.values.r);
 80100cc:	ee78 7a40 	vsub.f32	s15, s16, s0
 80100d0:	eef0 7ae7 	vabs.f32	s15, s15
                        if (delta_r > 0.005f) {
 80100d4:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8010124 <gc_execute_block+0x28a8>
 80100d8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80100dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100e0:	f77f a986 	ble.w	800f3f0 <gc_execute_block+0x1b74>
                            if (delta_r > 0.5f)
 80100e4:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80100e8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80100ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100f0:	f301 8301 	bgt.w	80116f6 <gc_execute_block+0x3e7a>
                            if (delta_r > (0.001f * gc_block.values.r))
 80100f4:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8010128 <gc_execute_block+0x28ac>
 80100f8:	ee20 7a26 	vmul.f32	s14, s0, s13
 80100fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010104:	f57f a974 	bpl.w	800f3f0 <gc_execute_block+0x1b74>
                                FAIL(Status_GcodeInvalidTarget); // [Arc definition error] > 0.005mm AND 0.1% radius
 8010108:	2421      	movs	r4, #33	@ 0x21
 801010a:	f7fd bc94 	b.w	800da36 <gc_execute_block+0x1ba>
 801010e:	bf00      	nop
 8010110:	200016c0 	.word	0x200016c0
 8010114:	200017c8 	.word	0x200017c8
 8010118:	20001830 	.word	0x20001830
 801011c:	41cb3333 	.word	0x41cb3333
 8010120:	200001c0 	.word	0x200001c0
 8010124:	3ba3d70a 	.word	0x3ba3d70a
 8010128:	3a83126f 	.word	0x3a83126f
                    if(gc_block.modal.plane_select != PlaneSelect_XY)
 801012c:	4bb5      	ldr	r3, [pc, #724]	@ (8010404 <gc_execute_block+0x2b88>)
 801012e:	7b9b      	ldrb	r3, [r3, #14]
 8010130:	2b00      	cmp	r3, #0
 8010132:	f041 82e3 	bne.w	80116fc <gc_execute_block+0x3e80>
                    if (axis_words.mask & ~(bit(X_AXIS)|bit(Y_AXIS)))
 8010136:	fa5f f38b 	uxtb.w	r3, fp
 801013a:	2b03      	cmp	r3, #3
 801013c:	f201 82e1 	bhi.w	8011702 <gc_execute_block+0x3e86>
                    if((gc_block.words.mask & pq_words.mask) != pq_words.mask)
 8010140:	4bb0      	ldr	r3, [pc, #704]	@ (8010404 <gc_execute_block+0x2b88>)
 8010142:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010146:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 801014a:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 801014e:	f041 82db 	bne.w	8011708 <gc_execute_block+0x3e8c>
                    if(gc_parser_flags.motion_mode_changed && (gc_block.words.mask & ij_words.mask) != ij_words.mask)
 8010152:	f418 7f00 	tst.w	r8, #512	@ 0x200
 8010156:	d004      	beq.n	8010162 <gc_execute_block+0x28e6>
 8010158:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801015c:	2b30      	cmp	r3, #48	@ 0x30
 801015e:	f041 82d6 	bne.w	801170e <gc_execute_block+0x3e92>
                    if(!(gc_block.words.i || gc_block.words.j)) {
 8010162:	4ba8      	ldr	r3, [pc, #672]	@ (8010404 <gc_execute_block+0x2b88>)
 8010164:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8010168:	f013 0f30 	tst.w	r3, #48	@ 0x30
 801016c:	d151      	bne.n	8010212 <gc_execute_block+0x2996>
                        gc_block.values.ijk[I_VALUE] = - gc_block.values.p;
 801016e:	4ba5      	ldr	r3, [pc, #660]	@ (8010404 <gc_execute_block+0x2b88>)
 8010170:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8010174:	eef1 7a67 	vneg.f32	s15, s15
 8010178:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                        gc_block.values.ijk[J_VALUE] = - gc_block.values.q;
 801017c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8010180:	eef1 7a67 	vneg.f32	s15, s15
 8010184:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                    if (gc_block.modal.units_imperial) {
 8010188:	4b9e      	ldr	r3, [pc, #632]	@ (8010404 <gc_execute_block+0x2b88>)
 801018a:	7adb      	ldrb	r3, [r3, #11]
 801018c:	b173      	cbz	r3, 80101ac <gc_execute_block+0x2930>
                        gc_block.values.p *= MM_PER_INCH;
 801018e:	4b9d      	ldr	r3, [pc, #628]	@ (8010404 <gc_execute_block+0x2b88>)
 8010190:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8010194:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8010408 <gc_execute_block+0x2b8c>
 8010198:	ee67 7a87 	vmul.f32	s15, s15, s14
 801019c:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
                        gc_block.values.q *= MM_PER_INCH;
 80101a0:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80101a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80101a8:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
                    if(gc_state.modal.scaling_active) {
 80101ac:	4b97      	ldr	r3, [pc, #604]	@ (801040c <gc_execute_block+0x2b90>)
 80101ae:	7f9b      	ldrb	r3, [r3, #30]
 80101b0:	b18b      	cbz	r3, 80101d6 <gc_execute_block+0x295a>
                        gc_block.values.p *= scale_factor.ijk[X_AXIS];
 80101b2:	4b94      	ldr	r3, [pc, #592]	@ (8010404 <gc_execute_block+0x2b88>)
 80101b4:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80101b8:	4a95      	ldr	r2, [pc, #596]	@ (8010410 <gc_execute_block+0x2b94>)
 80101ba:	ed92 7a03 	vldr	s14, [r2, #12]
 80101be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80101c2:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
                        gc_block.values.q *= scale_factor.ijk[Y_AXIS];
 80101c6:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80101ca:	ed92 7a04 	vldr	s14, [r2, #16]
 80101ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80101d2:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
                    gc_state.modal.spline_pq[X_AXIS] = gc_block.values.p;
 80101d6:	4b8b      	ldr	r3, [pc, #556]	@ (8010404 <gc_execute_block+0x2b88>)
 80101d8:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80101da:	4a8c      	ldr	r2, [pc, #560]	@ (801040c <gc_execute_block+0x2b90>)
 80101dc:	6211      	str	r1, [r2, #32]
                    gc_state.modal.spline_pq[Y_AXIS] = gc_block.values.q;
 80101de:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 80101e0:	6251      	str	r1, [r2, #36]	@ 0x24
                    gc_block.words.p = gc_block.words.q = gc_block.words.i = gc_block.words.j = Off;
 80101e2:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 80101e6:	f36f 1245 	bfc	r2, #5, #1
 80101ea:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80101ee:	b2d2      	uxtb	r2, r2
 80101f0:	f36f 1204 	bfc	r2, #4, #1
 80101f4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80101f8:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 80101fc:	f36f 0241 	bfc	r2, #1, #1
 8010200:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 8010204:	b2d2      	uxtb	r2, r2
 8010206:	f36f 0200 	bfc	r2, #0, #1
 801020a:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                    break;
 801020e:	f7ff b8ef 	b.w	800f3f0 <gc_execute_block+0x1b74>
                        if (gc_block.modal.units_imperial) {
 8010212:	4b7c      	ldr	r3, [pc, #496]	@ (8010404 <gc_execute_block+0x2b88>)
 8010214:	7adb      	ldrb	r3, [r3, #11]
 8010216:	b173      	cbz	r3, 8010236 <gc_execute_block+0x29ba>
                            gc_block.values.ijk[I_VALUE] *= MM_PER_INCH;
 8010218:	4b7a      	ldr	r3, [pc, #488]	@ (8010404 <gc_execute_block+0x2b88>)
 801021a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 801021e:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8010408 <gc_execute_block+0x2b8c>
 8010222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010226:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                            gc_block.values.ijk[J_VALUE] *= MM_PER_INCH;
 801022a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 801022e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010232:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                        if(gc_state.modal.scaling_active) {
 8010236:	4b75      	ldr	r3, [pc, #468]	@ (801040c <gc_execute_block+0x2b90>)
 8010238:	7f9b      	ldrb	r3, [r3, #30]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d0a4      	beq.n	8010188 <gc_execute_block+0x290c>
                            gc_block.values.ijk[I_VALUE] *= scale_factor.ijk[X_AXIS];
 801023e:	4b71      	ldr	r3, [pc, #452]	@ (8010404 <gc_execute_block+0x2b88>)
 8010240:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8010244:	4a72      	ldr	r2, [pc, #456]	@ (8010410 <gc_execute_block+0x2b94>)
 8010246:	ed92 7a03 	vldr	s14, [r2, #12]
 801024a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801024e:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                            gc_block.values.ijk[J_VALUE] *= scale_factor.ijk[Y_AXIS];
 8010252:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8010256:	ed92 7a04 	vldr	s14, [r2, #16]
 801025a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801025e:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
 8010262:	e791      	b.n	8010188 <gc_execute_block+0x290c>
                    if(gc_block.modal.plane_select != PlaneSelect_XY)
 8010264:	4b67      	ldr	r3, [pc, #412]	@ (8010404 <gc_execute_block+0x2b88>)
 8010266:	7b9b      	ldrb	r3, [r3, #14]
 8010268:	2b00      	cmp	r3, #0
 801026a:	f041 8253 	bne.w	8011714 <gc_execute_block+0x3e98>
                    if (axis_words.mask & ~(bit(X_AXIS)|bit(Y_AXIS)))
 801026e:	fa5f f38b 	uxtb.w	r3, fp
 8010272:	2b03      	cmp	r3, #3
 8010274:	f201 8251 	bhi.w	801171a <gc_execute_block+0x3e9e>
                    if((gc_block.words.mask & ij_words.mask) != ij_words.mask)
 8010278:	4b62      	ldr	r3, [pc, #392]	@ (8010404 <gc_execute_block+0x2b88>)
 801027a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801027e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8010282:	2b30      	cmp	r3, #48	@ 0x30
 8010284:	f041 824c 	bne.w	8011720 <gc_execute_block+0x3ea4>
                    if(gc_block.values.ijk[I_VALUE] == 0.0f && gc_block.values.ijk[I_VALUE] == 0.0f)
 8010288:	4b5e      	ldr	r3, [pc, #376]	@ (8010404 <gc_execute_block+0x2b88>)
 801028a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 801028e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010296:	f001 8246 	beq.w	8011726 <gc_execute_block+0x3eaa>
                    if (gc_block.modal.units_imperial) {
 801029a:	7adb      	ldrb	r3, [r3, #11]
 801029c:	b163      	cbz	r3, 80102b8 <gc_execute_block+0x2a3c>
                        gc_block.values.ijk[I_VALUE] *= MM_PER_INCH;
 801029e:	4b59      	ldr	r3, [pc, #356]	@ (8010404 <gc_execute_block+0x2b88>)
 80102a0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8010408 <gc_execute_block+0x2b8c>
 80102a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102a8:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                        gc_block.values.ijk[J_VALUE] *= MM_PER_INCH;
 80102ac:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80102b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102b4:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                    if(gc_state.modal.scaling_active) {
 80102b8:	4b54      	ldr	r3, [pc, #336]	@ (801040c <gc_execute_block+0x2b90>)
 80102ba:	7f9b      	ldrb	r3, [r3, #30]
 80102bc:	b18b      	cbz	r3, 80102e2 <gc_execute_block+0x2a66>
                        gc_block.values.ijk[I_VALUE] *= scale_factor.ijk[X_AXIS];
 80102be:	4b51      	ldr	r3, [pc, #324]	@ (8010404 <gc_execute_block+0x2b88>)
 80102c0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80102c4:	4a52      	ldr	r2, [pc, #328]	@ (8010410 <gc_execute_block+0x2b94>)
 80102c6:	ed92 7a03 	vldr	s14, [r2, #12]
 80102ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102ce:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                        gc_block.values.ijk[J_VALUE] *= scale_factor.ijk[Y_AXIS];
 80102d2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80102d6:	ed92 7a04 	vldr	s14, [r2, #16]
 80102da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102de:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                    gc_block.words.i = gc_block.words.j = Off;
 80102e2:	4b48      	ldr	r3, [pc, #288]	@ (8010404 <gc_execute_block+0x2b88>)
 80102e4:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 80102e8:	f36f 1245 	bfc	r2, #5, #1
 80102ec:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80102f0:	b2d2      	uxtb	r2, r2
 80102f2:	f36f 1204 	bfc	r2, #4, #1
 80102f6:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
                    break;
 80102fa:	f7ff b879 	b.w	800f3f0 <gc_execute_block+0x1b74>
                    gc_parser_flags.probe_is_no_error = On;
 80102fe:	f048 0810 	orr.w	r8, r8, #16
                    if(gc_block.modal.motion == MotionMode_ProbeAway || gc_block.modal.motion == MotionMode_ProbeAwayNoError)
 8010302:	f1a5 038e 	sub.w	r3, r5, #142	@ 0x8e
 8010306:	b29b      	uxth	r3, r3
 8010308:	2b01      	cmp	r3, #1
 801030a:	d90f      	bls.n	801032c <gc_execute_block+0x2ab0>
                    if (!axis_words.mask)
 801030c:	fa5f f38b 	uxtb.w	r3, fp
 8010310:	2b00      	cmp	r3, #0
 8010312:	f001 820b 	beq.w	801172c <gc_execute_block+0x3eb0>
                    if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 8010316:	220c      	movs	r2, #12
 8010318:	493e      	ldr	r1, [pc, #248]	@ (8010414 <gc_execute_block+0x2b98>)
 801031a:	483f      	ldr	r0, [pc, #252]	@ (8010418 <gc_execute_block+0x2b9c>)
 801031c:	f014 fcdd 	bl	8024cda <memcmp>
 8010320:	2800      	cmp	r0, #0
 8010322:	f47f a865 	bne.w	800f3f0 <gc_execute_block+0x1b74>
                        FAIL(Status_GcodeInvalidTarget); // [Invalid target]
 8010326:	2421      	movs	r4, #33	@ 0x21
 8010328:	f7fd bb85 	b.w	800da36 <gc_execute_block+0x1ba>
                        gc_parser_flags.probe_is_away = On;
 801032c:	f048 0808 	orr.w	r8, r8, #8
 8010330:	e7ec      	b.n	801030c <gc_execute_block+0x2a90>
        gc_block.words.n = gc_block.words.f = gc_block.words.s = gc_block.words.t = Off;
 8010332:	4b34      	ldr	r3, [pc, #208]	@ (8010404 <gc_execute_block+0x2b88>)
 8010334:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 8010338:	f36f 1204 	bfc	r2, #4, #1
 801033c:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 8010340:	b2d2      	uxtb	r2, r2
 8010342:	f36f 02c3 	bfc	r2, #3, #1
 8010346:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 801034a:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 801034e:	f36f 0241 	bfc	r2, #1, #1
 8010352:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 8010356:	b2d2      	uxtb	r2, r2
 8010358:	f36f 1286 	bfc	r2, #6, #1
 801035c:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 8010360:	f7ff b857 	b.w	800f412 <gc_execute_block+0x1b96>
        plan_data.condition.is_rpm_rate_adjusted = gc_state.is_rpm_rate_adjusted || (gc_state.modal.spindle.state.ccw && gc_state.spindle.hal->cap.laser);
 8010364:	2301      	movs	r3, #1
 8010366:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801036a:	f363 12c7 	bfi	r2, r3, #7, #1
 801036e:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
        if ((status_code_t)(int_value = (uint_fast16_t)mc_jog_execute(&plan_data, &gc_block, gc_state.position)) == Status_OK)
 8010372:	4a29      	ldr	r2, [pc, #164]	@ (8010418 <gc_execute_block+0x2b9c>)
 8010374:	4923      	ldr	r1, [pc, #140]	@ (8010404 <gc_execute_block+0x2b88>)
 8010376:	a814      	add	r0, sp, #80	@ 0x50
 8010378:	f004 f9ee 	bl	8014758 <mc_jog_execute>
 801037c:	4604      	mov	r4, r0
 801037e:	2800      	cmp	r0, #0
 8010380:	f47d ab59 	bne.w	800da36 <gc_execute_block+0x1ba>
            memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_state.position));
 8010384:	4b24      	ldr	r3, [pc, #144]	@ (8010418 <gc_execute_block+0x2b9c>)
 8010386:	4a23      	ldr	r2, [pc, #140]	@ (8010414 <gc_execute_block+0x2b98>)
 8010388:	ca07      	ldmia	r2, {r0, r1, r2}
 801038a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        return (status_code_t)int_value;
 801038e:	f7fd bb52 	b.w	800da36 <gc_execute_block+0x1ba>
        plan_data.condition.is_rpm_rate_adjusted = gc_state.is_rpm_rate_adjusted || (gc_state.modal.spindle.state.ccw && gc_state.spindle.hal->cap.laser);
 8010392:	2300      	movs	r3, #0
 8010394:	e7e7      	b.n	8010366 <gc_execute_block+0x2aea>
 8010396:	2301      	movs	r3, #1
 8010398:	e7e5      	b.n	8010366 <gc_execute_block+0x2aea>
    if(gc_state.spindle.hal->cap.laser) {
 801039a:	4b1c      	ldr	r3, [pc, #112]	@ (801040c <gc_execute_block+0x2b90>)
 801039c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801039e:	7a9b      	ldrb	r3, [r3, #10]
 80103a0:	f013 0f08 	tst.w	r3, #8
 80103a4:	d054      	beq.n	8010450 <gc_execute_block+0x2bd4>
        if(!motion_is_lasercut(gc_block.modal.motion))
 80103a6:	4b17      	ldr	r3, [pc, #92]	@ (8010404 <gc_execute_block+0x2b88>)
 80103a8:	891b      	ldrh	r3, [r3, #8]
    return motion == MotionMode_Linear || motion == MotionMode_CwArc || motion == MotionMode_CcwArc || motion == MotionMode_CubicSpline || motion == MotionMode_QuadraticSpline;
 80103aa:	1e5a      	subs	r2, r3, #1
 80103ac:	b292      	uxth	r2, r2
 80103ae:	2a02      	cmp	r2, #2
 80103b0:	d907      	bls.n	80103c2 <gc_execute_block+0x2b46>
 80103b2:	2b05      	cmp	r3, #5
 80103b4:	d020      	beq.n	80103f8 <gc_execute_block+0x2b7c>
 80103b6:	2b33      	cmp	r3, #51	@ 0x33
 80103b8:	d001      	beq.n	80103be <gc_execute_block+0x2b42>
 80103ba:	2300      	movs	r3, #0
 80103bc:	e002      	b.n	80103c4 <gc_execute_block+0x2b48>
 80103be:	2301      	movs	r3, #1
 80103c0:	e000      	b.n	80103c4 <gc_execute_block+0x2b48>
 80103c2:	2301      	movs	r3, #1
        if(!motion_is_lasercut(gc_block.modal.motion))
 80103c4:	b90b      	cbnz	r3, 80103ca <gc_execute_block+0x2b4e>
            gc_parser_flags.laser_disable = On;
 80103c6:	f048 0840 	orr.w	r8, r8, #64	@ 0x40
        if(axis_words.mask && (axis_command == AxisCommand_MotionMode))
 80103ca:	fa5f f38b 	uxtb.w	r3, fp
 80103ce:	b113      	cbz	r3, 80103d6 <gc_execute_block+0x2b5a>
 80103d0:	f1ba 0f02 	cmp.w	sl, #2
 80103d4:	d012      	beq.n	80103fc <gc_execute_block+0x2b80>
        else if(gc_state.modal.spindle.state.on && !gc_state.modal.spindle.state.ccw) {
 80103d6:	4b0d      	ldr	r3, [pc, #52]	@ (801040c <gc_execute_block+0x2b90>)
 80103d8:	7e9b      	ldrb	r3, [r3, #26]
 80103da:	f003 0303 	and.w	r3, r3, #3
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d01c      	beq.n	801041c <gc_execute_block+0x2ba0>
        gc_state.is_rpm_rate_adjusted = gc_state.modal.spindle.state.ccw && !gc_parser_flags.laser_disable;
 80103e2:	4b0a      	ldr	r3, [pc, #40]	@ (801040c <gc_execute_block+0x2b90>)
 80103e4:	7e9b      	ldrb	r3, [r3, #26]
 80103e6:	f013 0f02 	tst.w	r3, #2
 80103ea:	d02d      	beq.n	8010448 <gc_execute_block+0x2bcc>
 80103ec:	f018 0f40 	tst.w	r8, #64	@ 0x40
 80103f0:	f000 80a7 	beq.w	8010542 <gc_execute_block+0x2cc6>
 80103f4:	2300      	movs	r3, #0
 80103f6:	e028      	b.n	801044a <gc_execute_block+0x2bce>
    return motion == MotionMode_Linear || motion == MotionMode_CwArc || motion == MotionMode_CcwArc || motion == MotionMode_CubicSpline || motion == MotionMode_QuadraticSpline;
 80103f8:	2301      	movs	r3, #1
 80103fa:	e7e3      	b.n	80103c4 <gc_execute_block+0x2b48>
            gc_parser_flags.laser_is_motion = On;
 80103fc:	f048 0880 	orr.w	r8, r8, #128	@ 0x80
 8010400:	e7ef      	b.n	80103e2 <gc_execute_block+0x2b66>
 8010402:	bf00      	nop
 8010404:	200016c0 	.word	0x200016c0
 8010408:	41cb3333 	.word	0x41cb3333
 801040c:	200017c8 	.word	0x200017c8
 8010410:	200001c0 	.word	0x200001c0
 8010414:	20001744 	.word	0x20001744
 8010418:	20001830 	.word	0x20001830
            if(motion_is_lasercut(gc_state.modal.motion)) {
 801041c:	4b9b      	ldr	r3, [pc, #620]	@ (801068c <gc_execute_block+0x2e10>)
 801041e:	881b      	ldrh	r3, [r3, #0]
    return motion == MotionMode_Linear || motion == MotionMode_CwArc || motion == MotionMode_CcwArc || motion == MotionMode_CubicSpline || motion == MotionMode_QuadraticSpline;
 8010420:	1e5a      	subs	r2, r3, #1
 8010422:	b292      	uxth	r2, r2
 8010424:	2a02      	cmp	r2, #2
 8010426:	d909      	bls.n	801043c <gc_execute_block+0x2bc0>
 8010428:	2b05      	cmp	r3, #5
 801042a:	d007      	beq.n	801043c <gc_execute_block+0x2bc0>
 801042c:	2b33      	cmp	r3, #51	@ 0x33
 801042e:	d005      	beq.n	801043c <gc_execute_block+0x2bc0>
            } else if(!gc_parser_flags.laser_disable) // When changing to a G1 motion mode without axis words from a non-G1/2/3 motion mode.
 8010430:	f018 0f40 	tst.w	r8, #64	@ 0x40
 8010434:	d1d5      	bne.n	80103e2 <gc_execute_block+0x2b66>
                gc_parser_flags.spindle_force_sync = On;
 8010436:	f048 0820 	orr.w	r8, r8, #32
 801043a:	e7d2      	b.n	80103e2 <gc_execute_block+0x2b66>
                if(gc_parser_flags.laser_disable)
 801043c:	f018 0f40 	tst.w	r8, #64	@ 0x40
 8010440:	d0cf      	beq.n	80103e2 <gc_execute_block+0x2b66>
                    gc_parser_flags.spindle_force_sync = On; // Change from G1/2/3 motion mode.
 8010442:	f048 0820 	orr.w	r8, r8, #32
 8010446:	e7cc      	b.n	80103e2 <gc_execute_block+0x2b66>
        gc_state.is_rpm_rate_adjusted = gc_state.modal.spindle.state.ccw && !gc_parser_flags.laser_disable;
 8010448:	2300      	movs	r3, #0
 801044a:	4a90      	ldr	r2, [pc, #576]	@ (801068c <gc_execute_block+0x2e10>)
 801044c:	f882 307e 	strb.w	r3, [r2, #126]	@ 0x7e
    gc_state.line_number = gc_block.values.n;
 8010450:	4b8f      	ldr	r3, [pc, #572]	@ (8010690 <gc_execute_block+0x2e14>)
 8010452:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010456:	4a8d      	ldr	r2, [pc, #564]	@ (801068c <gc_execute_block+0x2e10>)
 8010458:	6753      	str	r3, [r2, #116]	@ 0x74
    plan_data.line_number = gc_state.line_number; // Record data for planner use.
 801045a:	931b      	str	r3, [sp, #108]	@ 0x6c
    bool check_mode = state_get() == STATE_CHECK_MODE;
 801045c:	f00e fd74 	bl	801ef48 <state_get>
 8010460:	4605      	mov	r5, r0
 8010462:	2802      	cmp	r0, #2
 8010464:	bf14      	ite	ne
 8010466:	2300      	movne	r3, #0
 8010468:	2301      	moveq	r3, #1
 801046a:	930b      	str	r3, [sp, #44]	@ 0x2c
    if(message && !check_mode && (plan_data.message = malloc(strlen(message) + 1)))
 801046c:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 801046e:	b10c      	cbz	r4, 8010474 <gc_execute_block+0x2bf8>
 8010470:	2802      	cmp	r0, #2
 8010472:	d168      	bne.n	8010546 <gc_execute_block+0x2cca>
    gc_state.modal.feed_mode = gc_block.modal.feed_mode;
 8010474:	4b86      	ldr	r3, [pc, #536]	@ (8010690 <gc_execute_block+0x2e14>)
 8010476:	7a9b      	ldrb	r3, [r3, #10]
 8010478:	4a84      	ldr	r2, [pc, #528]	@ (801068c <gc_execute_block+0x2e10>)
 801047a:	7093      	strb	r3, [r2, #2]
    if (gc_state.modal.feed_mode == FeedMode_InverseTime)
 801047c:	2b01      	cmp	r3, #1
 801047e:	d06f      	beq.n	8010560 <gc_execute_block+0x2ce4>
    gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 8010480:	4b83      	ldr	r3, [pc, #524]	@ (8010690 <gc_execute_block+0x2e14>)
 8010482:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010484:	4b81      	ldr	r3, [pc, #516]	@ (801068c <gc_execute_block+0x2e10>)
 8010486:	661a      	str	r2, [r3, #96]	@ 0x60
    plan_data.feed_rate = gc_state.feed_rate; // Record data for planner use.
 8010488:	9214      	str	r2, [sp, #80]	@ 0x50
    if(gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 801048a:	7edb      	ldrb	r3, [r3, #27]
 801048c:	2b01      	cmp	r3, #1
 801048e:	d06e      	beq.n	801056e <gc_execute_block+0x2cf2>
    if(!user_words.s && ((gc_state.spindle.rpm != gc_block.values.s) || gc_parser_flags.spindle_force_sync)) {
 8010490:	4b80      	ldr	r3, [pc, #512]	@ (8010694 <gc_execute_block+0x2e18>)
 8010492:	789b      	ldrb	r3, [r3, #2]
 8010494:	f013 0f08 	tst.w	r3, #8
 8010498:	d12e      	bne.n	80104f8 <gc_execute_block+0x2c7c>
 801049a:	4b7c      	ldr	r3, [pc, #496]	@ (801068c <gc_execute_block+0x2e10>)
 801049c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80104a0:	4b7b      	ldr	r3, [pc, #492]	@ (8010690 <gc_execute_block+0x2e14>)
 80104a2:	ed93 0a1a 	vldr	s0, [r3, #104]	@ 0x68
 80104a6:	eef4 7a40 	vcmp.f32	s15, s0
 80104aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104ae:	d102      	bne.n	80104b6 <gc_execute_block+0x2c3a>
 80104b0:	f018 0f20 	tst.w	r8, #32
 80104b4:	d020      	beq.n	80104f8 <gc_execute_block+0x2c7c>
        if(gc_state.modal.spindle.state.on && !gc_parser_flags.laser_is_motion) {
 80104b6:	4b75      	ldr	r3, [pc, #468]	@ (801068c <gc_execute_block+0x2e10>)
 80104b8:	7e9b      	ldrb	r3, [r3, #26]
 80104ba:	f013 0f01 	tst.w	r3, #1
 80104be:	d017      	beq.n	80104f0 <gc_execute_block+0x2c74>
 80104c0:	fa5f f288 	uxtb.w	r2, r8
 80104c4:	f018 0f80 	tst.w	r8, #128	@ 0x80
 80104c8:	d112      	bne.n	80104f0 <gc_execute_block+0x2c74>
            if(gc_block.spindle) {
 80104ca:	4b71      	ldr	r3, [pc, #452]	@ (8010690 <gc_execute_block+0x2e14>)
 80104cc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80104d0:	b173      	cbz	r3, 80104f0 <gc_execute_block+0x2c74>
                gc_block.spindle->param->rpm = gc_block.values.s;
 80104d2:	685b      	ldr	r3, [r3, #4]
 80104d4:	ed83 0a00 	vstr	s0, [r3]
                spindle_sync(gc_block.spindle, gc_state.modal.spindle.state, gc_parser_flags.laser_disable ? 0.0f : gc_block.values.s);
 80104d8:	4b6d      	ldr	r3, [pc, #436]	@ (8010690 <gc_execute_block+0x2e14>)
 80104da:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 80104de:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80104e2:	d001      	beq.n	80104e8 <gc_execute_block+0x2c6c>
 80104e4:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 8010698 <gc_execute_block+0x2e1c>
 80104e8:	4b68      	ldr	r3, [pc, #416]	@ (801068c <gc_execute_block+0x2e10>)
 80104ea:	7e99      	ldrb	r1, [r3, #26]
 80104ec:	f00e f9fe 	bl	801e8ec <spindle_sync>
        gc_state.spindle.rpm = gc_block.values.s; // Update spindle speed state.
 80104f0:	4b67      	ldr	r3, [pc, #412]	@ (8010690 <gc_execute_block+0x2e14>)
 80104f2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80104f4:	4b65      	ldr	r3, [pc, #404]	@ (801068c <gc_execute_block+0x2e10>)
 80104f6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (!gc_parser_flags.laser_disable)
 80104f8:	fa5f f388 	uxtb.w	r3, r8
 80104fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80104fe:	f018 0f40 	tst.w	r8, #64	@ 0x40
 8010502:	d17d      	bne.n	8010600 <gc_execute_block+0x2d84>
        memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t)); // Record data for planner use.
 8010504:	ac15      	add	r4, sp, #84	@ 0x54
 8010506:	4b65      	ldr	r3, [pc, #404]	@ (801069c <gc_execute_block+0x2e20>)
 8010508:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801050a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(gc_state.tool_pending != gc_block.values.t && !check_mode) {
 801050e:	4b5f      	ldr	r3, [pc, #380]	@ (801068c <gc_execute_block+0x2e10>)
 8010510:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010512:	4a5f      	ldr	r2, [pc, #380]	@ (8010690 <gc_execute_block+0x2e14>)
 8010514:	f8d2 00b0 	ldr.w	r0, [r2, #176]	@ 0xb0
 8010518:	4283      	cmp	r3, r0
 801051a:	d001      	beq.n	8010520 <gc_execute_block+0x2ca4>
 801051c:	2d02      	cmp	r5, #2
 801051e:	d173      	bne.n	8010608 <gc_execute_block+0x2d8c>
    if(port_command) {
 8010520:	9b06      	ldr	r3, [sp, #24]
 8010522:	2b00      	cmp	r3, #0
 8010524:	f000 80d1 	beq.w	80106ca <gc_execute_block+0x2e4e>
        switch(port_command) {
 8010528:	3b3e      	subs	r3, #62	@ 0x3e
 801052a:	2b06      	cmp	r3, #6
 801052c:	f200 80cd 	bhi.w	80106ca <gc_execute_block+0x2e4e>
 8010530:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010534:	00c800c8 	.word	0x00c800c8
 8010538:	011f011f 	.word	0x011f011f
 801053c:	01460132 	.word	0x01460132
 8010540:	014a      	.short	0x014a
        gc_state.is_rpm_rate_adjusted = gc_state.modal.spindle.state.ccw && !gc_parser_flags.laser_disable;
 8010542:	2301      	movs	r3, #1
 8010544:	e781      	b.n	801044a <gc_execute_block+0x2bce>
    if(message && !check_mode && (plan_data.message = malloc(strlen(message) + 1)))
 8010546:	4620      	mov	r0, r4
 8010548:	f7f7 fdda 	bl	8008100 <strlen>
 801054c:	3001      	adds	r0, #1
 801054e:	f012 fb25 	bl	8022b9c <malloc>
 8010552:	901c      	str	r0, [sp, #112]	@ 0x70
 8010554:	2800      	cmp	r0, #0
 8010556:	d08d      	beq.n	8010474 <gc_execute_block+0x2bf8>
        strcpy(plan_data.message, message);
 8010558:	4621      	mov	r1, r4
 801055a:	f014 fd40 	bl	8024fde <strcpy>
 801055e:	e789      	b.n	8010474 <gc_execute_block+0x2bf8>
        plan_data.condition.inverse_time = On; // Set condition flag for planner use.
 8010560:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8010564:	f043 0320 	orr.w	r3, r3, #32
 8010568:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801056c:	e788      	b.n	8010480 <gc_execute_block+0x2c04>
        if(gc_block.modal.motion != MotionMode_None && gc_block.modal.motion != MotionMode_Seek) {
 801056e:	4b48      	ldr	r3, [pc, #288]	@ (8010690 <gc_execute_block+0x2e14>)
 8010570:	891b      	ldrh	r3, [r3, #8]
 8010572:	2b50      	cmp	r3, #80	@ 0x50
 8010574:	d000      	beq.n	8010578 <gc_execute_block+0x2cfc>
 8010576:	b963      	cbnz	r3, 8010592 <gc_execute_block+0x2d16>
            if(gc_state.spindle.css) {
 8010578:	4b44      	ldr	r3, [pc, #272]	@ (801068c <gc_execute_block+0x2e10>)
 801057a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801057c:	b123      	cbz	r3, 8010588 <gc_execute_block+0x2d0c>
                gc_state.spindle.css = NULL;
 801057e:	4b43      	ldr	r3, [pc, #268]	@ (801068c <gc_execute_block+0x2e10>)
 8010580:	2200      	movs	r2, #0
 8010582:	659a      	str	r2, [r3, #88]	@ 0x58
                protocol_buffer_synchronize(); // Empty planner buffer to ensure we get RPM at end of last CSS motion
 8010584:	f007 fc46 	bl	8017e14 <protocol_buffer_synchronize>
            gc_block.values.s = gc_state.spindle.rpm; //gc_state.spindle.hal->param->rpm; // Keep current RPM
 8010588:	4b40      	ldr	r3, [pc, #256]	@ (801068c <gc_execute_block+0x2e10>)
 801058a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801058c:	4b40      	ldr	r3, [pc, #256]	@ (8010690 <gc_execute_block+0x2e14>)
 801058e:	669a      	str	r2, [r3, #104]	@ 0x68
 8010590:	e77e      	b.n	8010490 <gc_execute_block+0x2c14>
            gc_state.spindle.css = &gc_state.spindle.hal->param->css;
 8010592:	4c3e      	ldr	r4, [pc, #248]	@ (801068c <gc_execute_block+0x2e10>)
 8010594:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8010596:	685b      	ldr	r3, [r3, #4]
 8010598:	3310      	adds	r3, #16
 801059a:	65a3      	str	r3, [r4, #88]	@ 0x58
            gc_state.spindle.css->axis = plane.axis_1;
 801059c:	f89d 2089 	ldrb.w	r2, [sp, #137]	@ 0x89
 80105a0:	615a      	str	r2, [r3, #20]
            gc_state.spindle.css->tool_offset = gc_get_offset(gc_state.spindle.css->axis, false);
 80105a2:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 80105a4:	2100      	movs	r1, #0
 80105a6:	6970      	ldr	r0, [r6, #20]
 80105a8:	f7fc fed0 	bl	800d34c <gc_get_offset>
 80105ac:	ed86 0a04 	vstr	s0, [r6, #16]
            float pos = gc_state.position[gc_state.spindle.css->axis] - gc_state.spindle.css->tool_offset;
 80105b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80105b2:	695a      	ldr	r2, [r3, #20]
 80105b4:	321a      	adds	r2, #26
 80105b6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80105ba:	edd4 7a00 	vldr	s15, [r4]
 80105be:	ed93 7a04 	vldr	s14, [r3, #16]
 80105c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
            gc_block.values.s = pos <= 0.0f ? gc_state.spindle.css->max_rpm : min(gc_state.spindle.css->max_rpm, gc_state.spindle.css->surface_speed / (pos * (float)(2.0f * M_PI)));
 80105c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80105ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ce:	d911      	bls.n	80105f4 <gc_execute_block+0x2d78>
 80105d0:	edd3 6a03 	vldr	s13, [r3, #12]
 80105d4:	ed93 6a00 	vldr	s12, [r3]
 80105d8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80106a0 <gc_execute_block+0x2e24>
 80105dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80105e0:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80105e4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80105e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ec:	d504      	bpl.n	80105f8 <gc_execute_block+0x2d7c>
 80105ee:	eeb0 7a66 	vmov.f32	s14, s13
 80105f2:	e001      	b.n	80105f8 <gc_execute_block+0x2d7c>
 80105f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80105f8:	4b25      	ldr	r3, [pc, #148]	@ (8010690 <gc_execute_block+0x2e14>)
 80105fa:	ed83 7a1a 	vstr	s14, [r3, #104]	@ 0x68
        if(gc_block.modal.motion != MotionMode_None && gc_block.modal.motion != MotionMode_Seek) {
 80105fe:	e747      	b.n	8010490 <gc_execute_block+0x2c14>
        plan_data.spindle.hal = gc_state.spindle.hal;
 8010600:	4b22      	ldr	r3, [pc, #136]	@ (801068c <gc_execute_block+0x2e10>)
 8010602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010604:	9318      	str	r3, [sp, #96]	@ 0x60
 8010606:	e782      	b.n	801050e <gc_execute_block+0x2c92>
        tool_data_t *pending_tool = tool_get_pending((gc_state.tool_pending = gc_block.values.t));
 8010608:	4b20      	ldr	r3, [pc, #128]	@ (801068c <gc_execute_block+0x2e10>)
 801060a:	6798      	str	r0, [r3, #120]	@ 0x78
 801060c:	f7fc fdea 	bl	800d1e4 <tool_get_pending>
 8010610:	4604      	mov	r4, r0
        if(set_tool || settings.tool_change.mode == ToolChange_Ignore || !(hal.stream.suspend_read || hal.tool.change)) {
 8010612:	9b07      	ldr	r3, [sp, #28]
 8010614:	b963      	cbnz	r3, 8010630 <gc_execute_block+0x2db4>
 8010616:	4b23      	ldr	r3, [pc, #140]	@ (80106a4 <gc_execute_block+0x2e28>)
 8010618:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801061c:	2b04      	cmp	r3, #4
 801061e:	d007      	beq.n	8010630 <gc_execute_block+0x2db4>
 8010620:	4b21      	ldr	r3, [pc, #132]	@ (80106a8 <gc_execute_block+0x2e2c>)
 8010622:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010626:	bb33      	cbnz	r3, 8010676 <gc_execute_block+0x2dfa>
 8010628:	4b1f      	ldr	r3, [pc, #124]	@ (80106a8 <gc_execute_block+0x2e2c>)
 801062a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801062e:	bb13      	cbnz	r3, 8010676 <gc_execute_block+0x2dfa>
    if(grbl.tool_table.n_tools)
 8010630:	4b1e      	ldr	r3, [pc, #120]	@ (80106ac <gc_execute_block+0x2e30>)
 8010632:	699b      	ldr	r3, [r3, #24]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d03b      	beq.n	80106b0 <gc_execute_block+0x2e34>
        gc_state.tool = tool;
 8010638:	4b14      	ldr	r3, [pc, #80]	@ (801068c <gc_execute_block+0x2e10>)
 801063a:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
            if(grbl.on_tool_selected) {
 801063e:	4b1b      	ldr	r3, [pc, #108]	@ (80106ac <gc_execute_block+0x2e30>)
 8010640:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010644:	b163      	cbz	r3, 8010660 <gc_execute_block+0x2de4>
                spindle_state_t state = gc_state.modal.spindle.state;
 8010646:	4f11      	ldr	r7, [pc, #68]	@ (801068c <gc_execute_block+0x2e10>)
 8010648:	7ebe      	ldrb	r6, [r7, #26]
                grbl.on_tool_selected(gc_state.tool);
 801064a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 801064e:	4798      	blx	r3
                if(state.value != gc_state.modal.spindle.state.value)
 8010650:	b2f6      	uxtb	r6, r6
 8010652:	7ebb      	ldrb	r3, [r7, #26]
 8010654:	429e      	cmp	r6, r3
 8010656:	d003      	beq.n	8010660 <gc_execute_block+0x2de4>
                    gc_block.modal.spindle.state = gc_state.modal.spindle.state;
 8010658:	7eba      	ldrb	r2, [r7, #26]
 801065a:	4b0d      	ldr	r3, [pc, #52]	@ (8010690 <gc_execute_block+0x2e14>)
 801065c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            if(grbl.on_tool_changed)
 8010660:	4b12      	ldr	r3, [pc, #72]	@ (80106ac <gc_execute_block+0x2e30>)
 8010662:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010666:	b11b      	cbz	r3, 8010670 <gc_execute_block+0x2df4>
                grbl.on_tool_changed(gc_state.tool);
 8010668:	4a08      	ldr	r2, [pc, #32]	@ (801068c <gc_execute_block+0x2e10>)
 801066a:	f8d2 00d0 	ldr.w	r0, [r2, #208]	@ 0xd0
 801066e:	4798      	blx	r3
            system_add_rt_report(Report_Tool);
 8010670:	2080      	movs	r0, #128	@ 0x80
 8010672:	f011 fc27 	bl	8021ec4 <system_add_rt_report>
        if(hal.tool.select)
 8010676:	4b0c      	ldr	r3, [pc, #48]	@ (80106a8 <gc_execute_block+0x2e2c>)
 8010678:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 801067c:	b1f3      	cbz	r3, 80106bc <gc_execute_block+0x2e40>
            hal.tool.select(pending_tool, !set_tool);
 801067e:	9a07      	ldr	r2, [sp, #28]
 8010680:	f082 0101 	eor.w	r1, r2, #1
 8010684:	4620      	mov	r0, r4
 8010686:	4798      	blx	r3
 8010688:	e74a      	b.n	8010520 <gc_execute_block+0x2ca4>
 801068a:	bf00      	nop
 801068c:	200017c8 	.word	0x200017c8
 8010690:	200016c0 	.word	0x200016c0
 8010694:	200016bc 	.word	0x200016bc
 8010698:	00000000 	.word	0x00000000
 801069c:	20001818 	.word	0x20001818
 80106a0:	40c90fdb 	.word	0x40c90fdb
 80106a4:	200024a8 	.word	0x200024a8
 80106a8:	20001a90 	.word	0x20001a90
 80106ac:	20001c78 	.word	0x20001c78
        gc_state.tool->tool_id = tool->tool_id;
 80106b0:	4ba0      	ldr	r3, [pc, #640]	@ (8010934 <gc_execute_block+0x30b8>)
 80106b2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80106b6:	6922      	ldr	r2, [r4, #16]
 80106b8:	611a      	str	r2, [r3, #16]
 80106ba:	e7c0      	b.n	801063e <gc_execute_block+0x2dc2>
            system_add_rt_report(Report_Tool);
 80106bc:	2080      	movs	r0, #128	@ 0x80
 80106be:	f011 fc01 	bl	8021ec4 <system_add_rt_report>
 80106c2:	e72d      	b.n	8010520 <gc_execute_block+0x2ca4>
                add_output_command(&gc_block.output_command);
 80106c4:	489c      	ldr	r0, [pc, #624]	@ (8010938 <gc_execute_block+0x30bc>)
 80106c6:	f7fc fdcf 	bl	800d268 <add_output_command>
    if (command_words.M6 && !set_tool && !check_mode) {
 80106ca:	f019 0f01 	tst.w	r9, #1
 80106ce:	d004      	beq.n	80106da <gc_execute_block+0x2e5e>
 80106d0:	9b07      	ldr	r3, [sp, #28]
 80106d2:	b913      	cbnz	r3, 80106da <gc_execute_block+0x2e5e>
 80106d4:	2d02      	cmp	r5, #2
 80106d6:	f040 8083 	bne.w	80107e0 <gc_execute_block+0x2f64>
    if(gc_state.modal.spindle.state.value != gc_block.modal.spindle.state.value) {
 80106da:	4b96      	ldr	r3, [pc, #600]	@ (8010934 <gc_execute_block+0x30b8>)
 80106dc:	7e9a      	ldrb	r2, [r3, #26]
 80106de:	4b97      	ldr	r3, [pc, #604]	@ (801093c <gc_execute_block+0x30c0>)
 80106e0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d021      	beq.n	801072c <gc_execute_block+0x2eb0>
        if(gc_block.spindle) {
 80106e8:	4b94      	ldr	r3, [pc, #592]	@ (801093c <gc_execute_block+0x30c0>)
 80106ea:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 80106ee:	2800      	cmp	r0, #0
 80106f0:	f000 80e5 	beq.w	80108be <gc_execute_block+0x3042>
            if(grbl.on_spindle_programmed)
 80106f4:	4b92      	ldr	r3, [pc, #584]	@ (8010940 <gc_execute_block+0x30c4>)
 80106f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106f8:	b13b      	cbz	r3, 801070a <gc_execute_block+0x2e8e>
                grbl.on_spindle_programmed(gc_block.spindle, gc_block.modal.spindle.state,  plan_data.spindle.rpm, gc_block.modal.spindle.rpm_mode);
 80106fa:	4990      	ldr	r1, [pc, #576]	@ (801093c <gc_execute_block+0x30c0>)
 80106fc:	f891 2023 	ldrb.w	r2, [r1, #35]	@ 0x23
 8010700:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 8010704:	f891 1022 	ldrb.w	r1, [r1, #34]	@ 0x22
 8010708:	4798      	blx	r3
            if((spindle_ok = spindle_sync(gc_block.spindle, gc_block.modal.spindle.state, plan_data.spindle.rpm)))
 801070a:	4b8c      	ldr	r3, [pc, #560]	@ (801093c <gc_execute_block+0x30c0>)
 801070c:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 8010710:	f893 1022 	ldrb.w	r1, [r3, #34]	@ 0x22
 8010714:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 8010718:	f00e f8e8 	bl	801e8ec <spindle_sync>
 801071c:	4603      	mov	r3, r0
 801071e:	2800      	cmp	r0, #0
 8010720:	f040 80bd 	bne.w	801089e <gc_execute_block+0x3022>
        if(!(spindle_event = !spindle_ok))
 8010724:	f080 0301 	eor.w	r3, r0, #1
 8010728:	b2db      	uxtb	r3, r3
 801072a:	9308      	str	r3, [sp, #32]
    if(spindle_event && grbl.on_spindle_programmed)
 801072c:	9b08      	ldr	r3, [sp, #32]
 801072e:	b14b      	cbz	r3, 8010744 <gc_execute_block+0x2ec8>
 8010730:	4b83      	ldr	r3, [pc, #524]	@ (8010940 <gc_execute_block+0x30c4>)
 8010732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010734:	b133      	cbz	r3, 8010744 <gc_execute_block+0x2ec8>
        grbl.on_spindle_programmed(gc_state.spindle.hal, gc_state.modal.spindle.state, gc_state.spindle.rpm, gc_state.modal.spindle.rpm_mode);
 8010736:	487f      	ldr	r0, [pc, #508]	@ (8010934 <gc_execute_block+0x30b8>)
 8010738:	7ec2      	ldrb	r2, [r0, #27]
 801073a:	ed90 0a14 	vldr	s0, [r0, #80]	@ 0x50
 801073e:	7e81      	ldrb	r1, [r0, #26]
 8010740:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8010742:	4798      	blx	r3
    plan_data.spindle.state = gc_state.modal.spindle.state; // Set condition flag for planner use.
 8010744:	4b7b      	ldr	r3, [pc, #492]	@ (8010934 <gc_execute_block+0x30b8>)
 8010746:	7e9a      	ldrb	r2, [r3, #26]
 8010748:	f88d 2058 	strb.w	r2, [sp, #88]	@ 0x58
    plan_data.condition.is_rpm_rate_adjusted = gc_state.is_rpm_rate_adjusted;
 801074c:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8010750:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8010754:	f363 12c7 	bfi	r2, r3, #7, #1
 8010758:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
    plan_data.condition.is_laser_ppi_mode = gc_state.is_rpm_rate_adjusted && gc_state.is_laser_ppi_mode;
 801075c:	2b00      	cmp	r3, #0
 801075e:	f000 80d7 	beq.w	8010910 <gc_execute_block+0x3094>
 8010762:	4b74      	ldr	r3, [pc, #464]	@ (8010934 <gc_execute_block+0x30b8>)
 8010764:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8010768:	2b00      	cmp	r3, #0
 801076a:	f000 80d2 	beq.w	8010912 <gc_execute_block+0x3096>
 801076e:	2301      	movs	r3, #1
 8010770:	e0cf      	b.n	8010912 <gc_execute_block+0x3096>
                hal.port.digital_out(gc_block.output_command.port, gc_block.output_command.value != 0.0f);
 8010772:	4b74      	ldr	r3, [pc, #464]	@ (8010944 <gc_execute_block+0x30c8>)
 8010774:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8010778:	4b70      	ldr	r3, [pc, #448]	@ (801093c <gc_execute_block+0x30c0>)
 801077a:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 801077e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010782:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801078a:	bf14      	ite	ne
 801078c:	2101      	movne	r1, #1
 801078e:	2100      	moveq	r1, #0
 8010790:	f893 00be 	ldrb.w	r0, [r3, #190]	@ 0xbe
 8010794:	4790      	blx	r2
                break;
 8010796:	e798      	b.n	80106ca <gc_execute_block+0x2e4e>
                sys.var5399 = hal.port.wait_on_input((io_port_type_t)gc_block.output_command.is_digital, gc_block.output_command.port, (wait_mode_t)gc_block.values.l, gc_block.values.q);
 8010798:	4b6a      	ldr	r3, [pc, #424]	@ (8010944 <gc_execute_block+0x30c8>)
 801079a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801079e:	4867      	ldr	r0, [pc, #412]	@ (801093c <gc_execute_block+0x30c0>)
 80107a0:	ed90 0a18 	vldr	s0, [r0, #96]	@ 0x60
 80107a4:	f890 20b4 	ldrb.w	r2, [r0, #180]	@ 0xb4
 80107a8:	f890 10be 	ldrb.w	r1, [r0, #190]	@ 0xbe
 80107ac:	f890 00bc 	ldrb.w	r0, [r0, #188]	@ 0xbc
 80107b0:	4798      	blx	r3
 80107b2:	4b65      	ldr	r3, [pc, #404]	@ (8010948 <gc_execute_block+0x30cc>)
 80107b4:	6518      	str	r0, [r3, #80]	@ 0x50
                system_add_rt_report(Report_M66Result);
 80107b6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80107ba:	f011 fb83 	bl	8021ec4 <system_add_rt_report>
                break;
 80107be:	e784      	b.n	80106ca <gc_execute_block+0x2e4e>
                add_output_command(&gc_block.output_command);
 80107c0:	485d      	ldr	r0, [pc, #372]	@ (8010938 <gc_execute_block+0x30bc>)
 80107c2:	f7fc fd51 	bl	800d268 <add_output_command>
                break;
 80107c6:	e780      	b.n	80106ca <gc_execute_block+0x2e4e>
                hal.port.analog_out(gc_block.output_command.port, gc_block.output_command.value);
 80107c8:	4b5e      	ldr	r3, [pc, #376]	@ (8010944 <gc_execute_block+0x30c8>)
 80107ca:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 80107ce:	4b5b      	ldr	r3, [pc, #364]	@ (801093c <gc_execute_block+0x30c0>)
 80107d0:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 80107d4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80107d8:	f893 00be 	ldrb.w	r0, [r3, #190]	@ 0xbe
 80107dc:	4790      	blx	r2
                break;
 80107de:	e774      	b.n	80106ca <gc_execute_block+0x2e4e>
        tool_data_t *pending_tool = tool_get_pending(gc_state.tool_pending);
 80107e0:	4b54      	ldr	r3, [pc, #336]	@ (8010934 <gc_execute_block+0x30b8>)
 80107e2:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80107e4:	f7fc fcfe 	bl	800d1e4 <tool_get_pending>
 80107e8:	4606      	mov	r6, r0
        protocol_buffer_synchronize();
 80107ea:	f007 fb13 	bl	8017e14 <protocol_buffer_synchronize>
        if(plan_data.message) {
 80107ee:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80107f0:	b118      	cbz	r0, 80107fa <gc_execute_block+0x2f7e>
            gc_output_message(plan_data.message);
 80107f2:	f7fc ff2d 	bl	800d650 <gc_output_message>
            plan_data.message = NULL;
 80107f6:	2300      	movs	r3, #0
 80107f8:	931c      	str	r3, [sp, #112]	@ 0x70
        if(pending_tool->tool_id != gc_state.tool->tool_id) {
 80107fa:	6932      	ldr	r2, [r6, #16]
 80107fc:	4b4d      	ldr	r3, [pc, #308]	@ (8010934 <gc_execute_block+0x30b8>)
 80107fe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8010802:	691b      	ldr	r3, [r3, #16]
 8010804:	429a      	cmp	r2, r3
 8010806:	f43f af68 	beq.w	80106da <gc_execute_block+0x2e5e>
            if(grbl.on_tool_selected) {
 801080a:	4b4d      	ldr	r3, [pc, #308]	@ (8010940 <gc_execute_block+0x30c4>)
 801080c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010810:	b15b      	cbz	r3, 801082a <gc_execute_block+0x2fae>
                spindle_state_t state = gc_state.modal.spindle.state;
 8010812:	4f48      	ldr	r7, [pc, #288]	@ (8010934 <gc_execute_block+0x30b8>)
 8010814:	7ebc      	ldrb	r4, [r7, #26]
                grbl.on_tool_selected(pending_tool);
 8010816:	4630      	mov	r0, r6
 8010818:	4798      	blx	r3
                if(state.value != gc_state.modal.spindle.state.value)
 801081a:	b2e4      	uxtb	r4, r4
 801081c:	7ebb      	ldrb	r3, [r7, #26]
 801081e:	429c      	cmp	r4, r3
 8010820:	d003      	beq.n	801082a <gc_execute_block+0x2fae>
                    gc_block.modal.spindle.state = gc_state.modal.spindle.state;
 8010822:	7eba      	ldrb	r2, [r7, #26]
 8010824:	4b45      	ldr	r3, [pc, #276]	@ (801093c <gc_execute_block+0x30c0>)
 8010826:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            if(hal.tool.change) { // ATC
 801082a:	4b46      	ldr	r3, [pc, #280]	@ (8010944 <gc_execute_block+0x30c8>)
 801082c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010830:	b313      	cbz	r3, 8010878 <gc_execute_block+0x2ffc>
                if((int_value = (uint_fast16_t)hal.tool.change(&gc_state)) != Status_OK) {
 8010832:	4840      	ldr	r0, [pc, #256]	@ (8010934 <gc_execute_block+0x30b8>)
 8010834:	4798      	blx	r3
 8010836:	4604      	mov	r4, r0
 8010838:	2800      	cmp	r0, #0
 801083a:	f47d a8fc 	bne.w	800da36 <gc_execute_block+0x1ba>
                system_add_rt_report(Report_Tool);
 801083e:	2080      	movs	r0, #128	@ 0x80
 8010840:	f011 fb40 	bl	8021ec4 <system_add_rt_report>
    if(grbl.tool_table.n_tools)
 8010844:	4b3e      	ldr	r3, [pc, #248]	@ (8010940 <gc_execute_block+0x30c4>)
 8010846:	699b      	ldr	r3, [r3, #24]
 8010848:	b31b      	cbz	r3, 8010892 <gc_execute_block+0x3016>
        gc_state.tool = tool;
 801084a:	4b3a      	ldr	r3, [pc, #232]	@ (8010934 <gc_execute_block+0x30b8>)
 801084c:	f8c3 60d0 	str.w	r6, [r3, #208]	@ 0xd0
            if(grbl.on_tool_changed && state_get() != STATE_TOOL_CHANGE)
 8010850:	4b3b      	ldr	r3, [pc, #236]	@ (8010940 <gc_execute_block+0x30c4>)
 8010852:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010856:	2b00      	cmp	r3, #0
 8010858:	f43f af3f 	beq.w	80106da <gc_execute_block+0x2e5e>
 801085c:	f00e fb74 	bl	801ef48 <state_get>
 8010860:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8010864:	f43f af39 	beq.w	80106da <gc_execute_block+0x2e5e>
                grbl.on_tool_changed(gc_state.tool);
 8010868:	4b35      	ldr	r3, [pc, #212]	@ (8010940 <gc_execute_block+0x30c4>)
 801086a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801086e:	4a31      	ldr	r2, [pc, #196]	@ (8010934 <gc_execute_block+0x30b8>)
 8010870:	f8d2 00d0 	ldr.w	r0, [r2, #208]	@ 0xd0
 8010874:	4798      	blx	r3
 8010876:	e730      	b.n	80106da <gc_execute_block+0x2e5e>
                gc_state.tool_change = true;
 8010878:	4b2e      	ldr	r3, [pc, #184]	@ (8010934 <gc_execute_block+0x30b8>)
 801087a:	2201      	movs	r2, #1
 801087c:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
                system_set_exec_state_flag(EXEC_TOOL_CHANGE);   // Set up program pause for manual tool change
 8010880:	4b30      	ldr	r3, [pc, #192]	@ (8010944 <gc_execute_block+0x30c8>)
 8010882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010884:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010888:	4830      	ldr	r0, [pc, #192]	@ (801094c <gc_execute_block+0x30d0>)
 801088a:	4798      	blx	r3
                protocol_execute_realtime();                    // Execute...
 801088c:	f006 fff4 	bl	8017878 <protocol_execute_realtime>
 8010890:	e7d8      	b.n	8010844 <gc_execute_block+0x2fc8>
        gc_state.tool->tool_id = tool->tool_id;
 8010892:	4b28      	ldr	r3, [pc, #160]	@ (8010934 <gc_execute_block+0x30b8>)
 8010894:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8010898:	6932      	ldr	r2, [r6, #16]
 801089a:	611a      	str	r2, [r3, #16]
 801089c:	e7d8      	b.n	8010850 <gc_execute_block+0x2fd4>
                gc_block.spindle->param->state = gc_block.modal.spindle.state;
 801089e:	4a27      	ldr	r2, [pc, #156]	@ (801093c <gc_execute_block+0x30c0>)
 80108a0:	f8d2 10cc 	ldr.w	r1, [r2, #204]	@ 0xcc
 80108a4:	6849      	ldr	r1, [r1, #4]
 80108a6:	f892 0022 	ldrb.w	r0, [r2, #34]	@ 0x22
 80108aa:	7208      	strb	r0, [r1, #8]
        if(!(spindle_event = !spindle_ok))
 80108ac:	f083 0301 	eor.w	r3, r3, #1
 80108b0:	b2db      	uxtb	r3, r3
 80108b2:	9308      	str	r3, [sp, #32]
            gc_state.modal.spindle.state = gc_block.modal.spindle.state;
 80108b4:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 80108b8:	4b1e      	ldr	r3, [pc, #120]	@ (8010934 <gc_execute_block+0x30b8>)
 80108ba:	769a      	strb	r2, [r3, #26]
 80108bc:	e736      	b.n	801072c <gc_execute_block+0x2eb0>
                if(spindle_is_enabled(--idx)) {
 80108be:	2000      	movs	r0, #0
 80108c0:	f00d fe9c 	bl	801e5fc <spindle_is_enabled>
 80108c4:	9008      	str	r0, [sp, #32]
 80108c6:	b910      	cbnz	r0, 80108ce <gc_execute_block+0x3052>
        if(!(spindle_event = !spindle_ok))
 80108c8:	2301      	movs	r3, #1
 80108ca:	9308      	str	r3, [sp, #32]
 80108cc:	e72e      	b.n	801072c <gc_execute_block+0x2eb0>
                    spindle_ptrs_t *spindle = spindle_get(idx);
 80108ce:	2000      	movs	r0, #0
 80108d0:	f00d feaa 	bl	801e628 <spindle_get>
 80108d4:	4604      	mov	r4, r0
                    if(grbl.on_spindle_programmed)
 80108d6:	4b1a      	ldr	r3, [pc, #104]	@ (8010940 <gc_execute_block+0x30c4>)
 80108d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108da:	b13b      	cbz	r3, 80108ec <gc_execute_block+0x3070>
                        grbl.on_spindle_programmed(spindle, gc_block.modal.spindle.state,  plan_data.spindle.rpm, gc_block.modal.spindle.rpm_mode);
 80108dc:	4917      	ldr	r1, [pc, #92]	@ (801093c <gc_execute_block+0x30c0>)
 80108de:	f891 2023 	ldrb.w	r2, [r1, #35]	@ 0x23
 80108e2:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 80108e6:	f891 1022 	ldrb.w	r1, [r1, #34]	@ 0x22
 80108ea:	4798      	blx	r3
                    if(spindle_sync(spindle, gc_block.modal.spindle.state, plan_data.spindle.rpm))
 80108ec:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 80108f0:	4b12      	ldr	r3, [pc, #72]	@ (801093c <gc_execute_block+0x30c0>)
 80108f2:	f893 1022 	ldrb.w	r1, [r3, #34]	@ 0x22
 80108f6:	4620      	mov	r0, r4
 80108f8:	f00d fff8 	bl	801e8ec <spindle_sync>
 80108fc:	2800      	cmp	r0, #0
 80108fe:	f43f af15 	beq.w	801072c <gc_execute_block+0x2eb0>
                        spindle->param->state = gc_block.modal.spindle.state;
 8010902:	6862      	ldr	r2, [r4, #4]
 8010904:	490d      	ldr	r1, [pc, #52]	@ (801093c <gc_execute_block+0x30c0>)
 8010906:	f891 1022 	ldrb.w	r1, [r1, #34]	@ 0x22
 801090a:	7211      	strb	r1, [r2, #8]
        if(!(spindle_event = !spindle_ok))
 801090c:	9008      	str	r0, [sp, #32]
 801090e:	e70d      	b.n	801072c <gc_execute_block+0x2eb0>
    plan_data.condition.is_laser_ppi_mode = gc_state.is_rpm_rate_adjusted && gc_state.is_laser_ppi_mode;
 8010910:	2300      	movs	r3, #0
 8010912:	f89d 2065 	ldrb.w	r2, [sp, #101]	@ 0x65
 8010916:	f363 0200 	bfi	r2, r3, #0, #1
 801091a:	f88d 2065 	strb.w	r2, [sp, #101]	@ 0x65
    switch(gc_block.state_action) {
 801091e:	4b07      	ldr	r3, [pc, #28]	@ (801093c <gc_execute_block+0x30c0>)
 8010920:	f893 10d0 	ldrb.w	r1, [r3, #208]	@ 0xd0
 8010924:	f1a1 0346 	sub.w	r3, r1, #70	@ 0x46
 8010928:	2b03      	cmp	r3, #3
 801092a:	d822      	bhi.n	8010972 <gc_execute_block+0x30f6>
 801092c:	e8df f003 	tbb	[pc, r3]
 8010930:	10851f10 	.word	0x10851f10
 8010934:	200017c8 	.word	0x200017c8
 8010938:	2000177c 	.word	0x2000177c
 801093c:	200016c0 	.word	0x200016c0
 8010940:	20001c78 	.word	0x20001c78
 8010944:	20001a90 	.word	0x20001a90
 8010948:	20001d70 	.word	0x20001d70
 801094c:	20001db8 	.word	0x20001db8
            gc_state.modal.rpm = gc_state.spindle.rpm;
 8010950:	48b1      	ldr	r0, [pc, #708]	@ (8010c18 <gc_execute_block+0x339c>)
 8010952:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8010954:	6303      	str	r3, [r0, #48]	@ 0x30
            gc_state.modal.feed_rate = gc_state.feed_rate;
 8010956:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8010958:	62c3      	str	r3, [r0, #44]	@ 0x2c
            if(!ngc_modal_state_save(&gc_state.modal, gc_block.state_action == ModalState_SaveAutoRestore))
 801095a:	2949      	cmp	r1, #73	@ 0x49
 801095c:	bf14      	ite	ne
 801095e:	2100      	movne	r1, #0
 8010960:	2101      	moveq	r1, #1
 8010962:	f004 fdbf 	bl	80154e4 <ngc_modal_state_save>
 8010966:	b920      	cbnz	r0, 8010972 <gc_execute_block+0x30f6>
                FAIL(Status_FlowControlOutOfMemory); // [Out of memory] TODO: allocate memory during validation? Static allocation?
 8010968:	2453      	movs	r4, #83	@ 0x53
 801096a:	f7fd b864 	b.w	800da36 <gc_execute_block+0x1ba>
            ngc_modal_state_invalidate();
 801096e:	f004 fdf1 	bl	8015554 <ngc_modal_state_invalidate>
    if (gc_parser_flags.set_coolant && gc_state.modal.coolant.value != gc_block.modal.coolant.value) {
 8010972:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010976:	d006      	beq.n	8010986 <gc_execute_block+0x310a>
 8010978:	4ba7      	ldr	r3, [pc, #668]	@ (8010c18 <gc_execute_block+0x339c>)
 801097a:	7e5a      	ldrb	r2, [r3, #25]
 801097c:	4ba7      	ldr	r3, [pc, #668]	@ (8010c1c <gc_execute_block+0x33a0>)
 801097e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010982:	429a      	cmp	r2, r3
 8010984:	d15c      	bne.n	8010a40 <gc_execute_block+0x31c4>
    plan_data.condition.coolant = gc_state.modal.coolant; // Set condition flag for planner use.
 8010986:	4ba4      	ldr	r3, [pc, #656]	@ (8010c18 <gc_execute_block+0x339c>)
 8010988:	7e5a      	ldrb	r2, [r3, #25]
 801098a:	f88d 2066 	strb.w	r2, [sp, #102]	@ 0x66
    sys.override_delay.flags = 0;
 801098e:	4aa4      	ldr	r2, [pc, #656]	@ (8010c20 <gc_execute_block+0x33a4>)
 8010990:	2100      	movs	r1, #0
 8010992:	f882 102c 	strb.w	r1, [r2, #44]	@ 0x2c
    if (gc_state.modal.override_ctrl.value != gc_block.modal.override_ctrl.value) {
 8010996:	7f1a      	ldrb	r2, [r3, #28]
 8010998:	4ba0      	ldr	r3, [pc, #640]	@ (8010c1c <gc_execute_block+0x33a0>)
 801099a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801099e:	429a      	cmp	r2, r3
 80109a0:	d01e      	beq.n	80109e0 <gc_execute_block+0x3164>
        gc_state.modal.override_ctrl = gc_block.modal.override_ctrl;
 80109a2:	4a9d      	ldr	r2, [pc, #628]	@ (8010c18 <gc_execute_block+0x339c>)
 80109a4:	4b9d      	ldr	r3, [pc, #628]	@ (8010c1c <gc_execute_block+0x33a0>)
 80109a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80109aa:	7713      	strb	r3, [r2, #28]
        gc_state.modal.spindle.state.override_disable = gc_state.spindle.hal->param->state.override_disable = gc_state.modal.override_ctrl.spindle_rpm_disable;
 80109ac:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80109ae:	6859      	ldr	r1, [r3, #4]
 80109b0:	7f13      	ldrb	r3, [r2, #28]
 80109b2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80109b6:	7a08      	ldrb	r0, [r1, #8]
 80109b8:	f363 1004 	bfi	r0, r3, #4, #1
 80109bc:	7208      	strb	r0, [r1, #8]
 80109be:	7e91      	ldrb	r1, [r2, #26]
 80109c0:	f363 1104 	bfi	r1, r3, #4, #1
 80109c4:	7691      	strb	r1, [r2, #26]
        if(gc_state.modal.override_ctrl.feed_rate_disable)
 80109c6:	7f13      	ldrb	r3, [r2, #28]
 80109c8:	f013 0f01 	tst.w	r3, #1
 80109cc:	d145      	bne.n	8010a5a <gc_execute_block+0x31de>
        if(gc_state.modal.override_ctrl.spindle_rpm_disable)
 80109ce:	4b92      	ldr	r3, [pc, #584]	@ (8010c18 <gc_execute_block+0x339c>)
 80109d0:	7f1b      	ldrb	r3, [r3, #28]
 80109d2:	f013 0f04 	tst.w	r3, #4
 80109d6:	d145      	bne.n	8010a64 <gc_execute_block+0x31e8>
        mc_override_ctrl_update(gc_state.modal.override_ctrl); // NOTE: must be called last!
 80109d8:	4b8f      	ldr	r3, [pc, #572]	@ (8010c18 <gc_execute_block+0x339c>)
 80109da:	7f18      	ldrb	r0, [r3, #28]
 80109dc:	f004 f972 	bl	8014cc4 <mc_override_ctrl_update>
    if(gc_block.user_mcode && !check_mode) {
 80109e0:	4b8e      	ldr	r3, [pc, #568]	@ (8010c1c <gc_execute_block+0x33a0>)
 80109e2:	885b      	ldrh	r3, [r3, #2]
 80109e4:	b1a3      	cbz	r3, 8010a10 <gc_execute_block+0x3194>
 80109e6:	2d02      	cmp	r5, #2
 80109e8:	d012      	beq.n	8010a10 <gc_execute_block+0x3194>
        if(gc_block.user_mcode_sync)
 80109ea:	4b8c      	ldr	r3, [pc, #560]	@ (8010c1c <gc_execute_block+0x33a0>)
 80109ec:	791b      	ldrb	r3, [r3, #4]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d13e      	bne.n	8010a70 <gc_execute_block+0x31f4>
        gc_block.words.mask = user_words.mask;
 80109f2:	4b8c      	ldr	r3, [pc, #560]	@ (8010c24 <gc_execute_block+0x33a8>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	4c89      	ldr	r4, [pc, #548]	@ (8010c1c <gc_execute_block+0x33a0>)
 80109f8:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
        hal.user_mcode.execute(state_get(), &gc_block);
 80109fc:	4b8a      	ldr	r3, [pc, #552]	@ (8010c28 <gc_execute_block+0x33ac>)
 80109fe:	f8d3 61c0 	ldr.w	r6, [r3, #448]	@ 0x1c0
 8010a02:	f00e faa1 	bl	801ef48 <state_get>
 8010a06:	4621      	mov	r1, r4
 8010a08:	47b0      	blx	r6
        gc_block.words.mask = 0;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
    if (gc_block.non_modal_command == NonModal_Dwell)
 8010a10:	4b82      	ldr	r3, [pc, #520]	@ (8010c1c <gc_execute_block+0x33a0>)
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	2b04      	cmp	r3, #4
 8010a16:	d02e      	beq.n	8010a76 <gc_execute_block+0x31fa>
    gc_state.modal.plane_select = gc_block.modal.plane_select;
 8010a18:	4a80      	ldr	r2, [pc, #512]	@ (8010c1c <gc_execute_block+0x33a0>)
 8010a1a:	7b91      	ldrb	r1, [r2, #14]
 8010a1c:	4b7e      	ldr	r3, [pc, #504]	@ (8010c18 <gc_execute_block+0x339c>)
 8010a1e:	7199      	strb	r1, [r3, #6]
    gc_state.modal.units_imperial = gc_block.modal.units_imperial;
 8010a20:	7ad2      	ldrb	r2, [r2, #11]
 8010a22:	70da      	strb	r2, [r3, #3]
    if (command_words.G8) { // Indicates a change.
 8010a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	f000 80b0 	beq.w	8010b8c <gc_execute_block+0x3310>
        gc_state.modal.tool_offset_mode = gc_block.modal.tool_offset_mode;
 8010a2c:	4b7b      	ldr	r3, [pc, #492]	@ (8010c1c <gc_execute_block+0x33a0>)
 8010a2e:	7bd8      	ldrb	r0, [r3, #15]
 8010a30:	4b79      	ldr	r3, [pc, #484]	@ (8010c18 <gc_execute_block+0x339c>)
 8010a32:	71d8      	strb	r0, [r3, #7]
        bool tlo_changed = false;
 8010a34:	2200      	movs	r2, #0
        idx = N_AXIS;
 8010a36:	2303      	movs	r3, #3
 8010a38:	e035      	b.n	8010aa6 <gc_execute_block+0x322a>
            ngc_modal_state_restore();
 8010a3a:	f004 fda7 	bl	801558c <ngc_modal_state_restore>
            break;
 8010a3e:	e798      	b.n	8010972 <gc_execute_block+0x30f6>
        if(coolant_sync(gc_block.modal.coolant))
 8010a40:	4b76      	ldr	r3, [pc, #472]	@ (8010c1c <gc_execute_block+0x33a0>)
 8010a42:	f893 0021 	ldrb.w	r0, [r3, #33]	@ 0x21
 8010a46:	f7fc fa97 	bl	800cf78 <coolant_sync>
 8010a4a:	2800      	cmp	r0, #0
 8010a4c:	d09b      	beq.n	8010986 <gc_execute_block+0x310a>
            gc_state.modal.coolant = gc_block.modal.coolant;
 8010a4e:	4b73      	ldr	r3, [pc, #460]	@ (8010c1c <gc_execute_block+0x33a0>)
 8010a50:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8010a54:	4b70      	ldr	r3, [pc, #448]	@ (8010c18 <gc_execute_block+0x339c>)
 8010a56:	765a      	strb	r2, [r3, #25]
 8010a58:	e795      	b.n	8010986 <gc_execute_block+0x310a>
            plan_feed_override(0, 0);
 8010a5a:	2100      	movs	r1, #0
 8010a5c:	4608      	mov	r0, r1
 8010a5e:	f006 fa05 	bl	8016e6c <plan_feed_override>
 8010a62:	e7b4      	b.n	80109ce <gc_execute_block+0x3152>
            spindle_set_override(gc_state.spindle.hal, DEFAULT_SPINDLE_RPM_OVERRIDE);
 8010a64:	2164      	movs	r1, #100	@ 0x64
 8010a66:	4b6c      	ldr	r3, [pc, #432]	@ (8010c18 <gc_execute_block+0x339c>)
 8010a68:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8010a6a:	f00d ffa3 	bl	801e9b4 <spindle_set_override>
 8010a6e:	e7b3      	b.n	80109d8 <gc_execute_block+0x315c>
            protocol_buffer_synchronize(); // Ensure user defined mcode is executed when specified in program.
 8010a70:	f007 f9d0 	bl	8017e14 <protocol_buffer_synchronize>
 8010a74:	e7bd      	b.n	80109f2 <gc_execute_block+0x3176>
        mc_dwell(gc_block.values.p);
 8010a76:	4b69      	ldr	r3, [pc, #420]	@ (8010c1c <gc_execute_block+0x33a0>)
 8010a78:	ed93 0a17 	vldr	s0, [r3, #92]	@ 0x5c
 8010a7c:	f003 fec6 	bl	801480c <mc_dwell>
 8010a80:	e7ca      	b.n	8010a18 <gc_execute_block+0x319c>
                    tlo_changed |= gc_state.tool_length_offset[idx] != 0.0f;
 8010a82:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8010a86:	4964      	ldr	r1, [pc, #400]	@ (8010c18 <gc_execute_block+0x339c>)
 8010a88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010a8c:	edd1 7a01 	vldr	s15, [r1, #4]
 8010a90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a98:	bf18      	it	ne
 8010a9a:	f042 0201 	orrne.w	r2, r2, #1
                    gc_state.tool_length_offset[idx] = 0.0f;
 8010a9e:	2400      	movs	r4, #0
 8010aa0:	604c      	str	r4, [r1, #4]
        } while(idx);
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d070      	beq.n	8010b88 <gc_execute_block+0x330c>
            idx--;
 8010aa6:	3b01      	subs	r3, #1
            switch(gc_state.modal.tool_offset_mode) {
 8010aa8:	2803      	cmp	r0, #3
 8010aaa:	d8fa      	bhi.n	8010aa2 <gc_execute_block+0x3226>
 8010aac:	a101      	add	r1, pc, #4	@ (adr r1, 8010ab4 <gc_execute_block+0x3238>)
 8010aae:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8010ab2:	bf00      	nop
 8010ab4:	08010a83 	.word	0x08010a83
 8010ab8:	08010ac5 	.word	0x08010ac5
 8010abc:	08010b45 	.word	0x08010b45
 8010ac0:	08010b07 	.word	0x08010b07
                    if (gc_state.tool_length_offset[idx] != grbl.tool_table.tool[gc_block.values.h].offset[idx]) {
 8010ac4:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8010ac8:	4953      	ldr	r1, [pc, #332]	@ (8010c18 <gc_execute_block+0x339c>)
 8010aca:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010ace:	ed91 7a01 	vldr	s14, [r1, #4]
 8010ad2:	4956      	ldr	r1, [pc, #344]	@ (8010c2c <gc_execute_block+0x33b0>)
 8010ad4:	69c9      	ldr	r1, [r1, #28]
 8010ad6:	4c51      	ldr	r4, [pc, #324]	@ (8010c1c <gc_execute_block+0x33a0>)
 8010ad8:	f8d4 40ac 	ldr.w	r4, [r4, #172]	@ 0xac
 8010adc:	2614      	movs	r6, #20
 8010ade:	fb06 1104 	mla	r1, r6, r4, r1
 8010ae2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010ae6:	edd1 7a00 	vldr	s15, [r1]
 8010aea:	eeb4 7a67 	vcmp.f32	s14, s15
 8010aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af2:	d0d6      	beq.n	8010aa2 <gc_execute_block+0x3226>
                        gc_state.tool_length_offset[idx] = grbl.tool_table.tool[gc_block.values.h].offset[idx];
 8010af4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010af8:	4a47      	ldr	r2, [pc, #284]	@ (8010c18 <gc_execute_block+0x339c>)
 8010afa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010afe:	edc2 7a01 	vstr	s15, [r2, #4]
                        tlo_changed = true;
 8010b02:	2201      	movs	r2, #1
 8010b04:	e7cd      	b.n	8010aa2 <gc_execute_block+0x3226>
                    tlo_changed |= grbl.tool_table.tool[gc_block.values.h].offset[idx] != 0.0f;
 8010b06:	4949      	ldr	r1, [pc, #292]	@ (8010c2c <gc_execute_block+0x33b0>)
 8010b08:	69c9      	ldr	r1, [r1, #28]
 8010b0a:	4c44      	ldr	r4, [pc, #272]	@ (8010c1c <gc_execute_block+0x33a0>)
 8010b0c:	f8d4 40ac 	ldr.w	r4, [r4, #172]	@ 0xac
 8010b10:	2614      	movs	r6, #20
 8010b12:	fb06 1104 	mla	r1, r6, r4, r1
 8010b16:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010b1a:	edd1 7a00 	vldr	s15, [r1]
 8010b1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b26:	bf18      	it	ne
 8010b28:	f042 0201 	orrne.w	r2, r2, #1
                    gc_state.tool_length_offset[idx] += grbl.tool_table.tool[gc_block.values.h].offset[idx];
 8010b2c:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8010b30:	4939      	ldr	r1, [pc, #228]	@ (8010c18 <gc_execute_block+0x339c>)
 8010b32:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010b36:	ed91 7a01 	vldr	s14, [r1, #4]
 8010b3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010b3e:	edc1 7a01 	vstr	s15, [r1, #4]
                    break;
 8010b42:	e7ae      	b.n	8010aa2 <gc_execute_block+0x3226>
                    if (bit_istrue(axis_words.mask, bit(idx)) && gc_state.tool_length_offset[idx] != gc_block.values.xyz[idx]) {
 8010b44:	fa5f f18b 	uxtb.w	r1, fp
 8010b48:	40d9      	lsrs	r1, r3
 8010b4a:	f011 0f01 	tst.w	r1, #1
 8010b4e:	d0a8      	beq.n	8010aa2 <gc_execute_block+0x3226>
 8010b50:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8010b54:	4930      	ldr	r1, [pc, #192]	@ (8010c18 <gc_execute_block+0x339c>)
 8010b56:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010b5a:	ed91 7a01 	vldr	s14, [r1, #4]
 8010b5e:	f103 0420 	add.w	r4, r3, #32
 8010b62:	492e      	ldr	r1, [pc, #184]	@ (8010c1c <gc_execute_block+0x33a0>)
 8010b64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010b68:	edd1 7a01 	vldr	s15, [r1, #4]
 8010b6c:	eeb4 7a67 	vcmp.f32	s14, s15
 8010b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b74:	d095      	beq.n	8010aa2 <gc_execute_block+0x3226>
                        gc_state.tool_length_offset[idx] = gc_block.values.xyz[idx];
 8010b76:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010b7a:	4a27      	ldr	r2, [pc, #156]	@ (8010c18 <gc_execute_block+0x339c>)
 8010b7c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010b80:	edc2 7a01 	vstr	s15, [r2, #4]
                        tlo_changed = true;
 8010b84:	2201      	movs	r2, #1
 8010b86:	e78c      	b.n	8010aa2 <gc_execute_block+0x3226>
        if(tlo_changed) {
 8010b88:	2a00      	cmp	r2, #0
 8010b8a:	d132      	bne.n	8010bf2 <gc_execute_block+0x3376>
    if (gc_state.modal.coord_system.id != gc_block.modal.coord_system.id) {
 8010b8c:	4b22      	ldr	r3, [pc, #136]	@ (8010c18 <gc_execute_block+0x339c>)
 8010b8e:	7d1a      	ldrb	r2, [r3, #20]
 8010b90:	4b22      	ldr	r3, [pc, #136]	@ (8010c1c <gc_execute_block+0x33a0>)
 8010b92:	7f1b      	ldrb	r3, [r3, #28]
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d133      	bne.n	8010c00 <gc_execute_block+0x3384>
    gc_state.modal.distance_incremental = gc_block.modal.distance_incremental;
 8010b98:	4b20      	ldr	r3, [pc, #128]	@ (8010c1c <gc_execute_block+0x33a0>)
 8010b9a:	7b19      	ldrb	r1, [r3, #12]
 8010b9c:	4a1e      	ldr	r2, [pc, #120]	@ (8010c18 <gc_execute_block+0x339c>)
 8010b9e:	7111      	strb	r1, [r2, #4]
    gc_state.modal.retract_mode = gc_block.modal.retract_mode;
 8010ba0:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
 8010ba4:	7751      	strb	r1, [r2, #29]
    switch(gc_block.non_modal_command) {
 8010ba6:	781b      	ldrb	r3, [r3, #0]
 8010ba8:	2b41      	cmp	r3, #65	@ 0x41
 8010baa:	d872      	bhi.n	8010c92 <gc_execute_block+0x3416>
 8010bac:	2b1c      	cmp	r3, #28
 8010bae:	d245      	bcs.n	8010c3c <gc_execute_block+0x33c0>
 8010bb0:	2b0a      	cmp	r3, #10
 8010bb2:	f040 80ae 	bne.w	8010d12 <gc_execute_block+0x3496>
            if(gc_block.values.l == 2 || gc_block.values.l == 20) {
 8010bb6:	4b19      	ldr	r3, [pc, #100]	@ (8010c1c <gc_execute_block+0x33a0>)
 8010bb8:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8010bbc:	2b02      	cmp	r3, #2
 8010bbe:	d002      	beq.n	8010bc6 <gc_execute_block+0x334a>
 8010bc0:	2b14      	cmp	r3, #20
 8010bc2:	f040 80a6 	bne.w	8010d12 <gc_execute_block+0x3496>
                settings_write_coord_data(gc_block.values.coord_data.id, &gc_block.values.coord_data.xyz);
 8010bc6:	491a      	ldr	r1, [pc, #104]	@ (8010c30 <gc_execute_block+0x33b4>)
 8010bc8:	f1a1 0490 	sub.w	r4, r1, #144	@ 0x90
 8010bcc:	7b08      	ldrb	r0, [r1, #12]
 8010bce:	f00c fd3d 	bl	801d64c <settings_write_coord_data>
                if (gc_state.modal.coord_system.id == gc_block.values.coord_data.id) {
 8010bd2:	4b11      	ldr	r3, [pc, #68]	@ (8010c18 <gc_execute_block+0x339c>)
 8010bd4:	7d1a      	ldrb	r2, [r3, #20]
 8010bd6:	f894 309c 	ldrb.w	r3, [r4, #156]	@ 0x9c
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	f040 8099 	bne.w	8010d12 <gc_execute_block+0x3496>
                    memcpy(gc_state.modal.coord_system.xyz, gc_block.values.coord_data.xyz, sizeof(gc_state.modal.coord_system.xyz));
 8010be0:	4b14      	ldr	r3, [pc, #80]	@ (8010c34 <gc_execute_block+0x33b8>)
 8010be2:	f104 0290 	add.w	r2, r4, #144	@ 0x90
 8010be6:	ca07      	ldmia	r2, {r0, r1, r2}
 8010be8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                    system_flag_wco_change();
 8010bec:	f011 f9f6 	bl	8021fdc <system_flag_wco_change>
 8010bf0:	e08f      	b.n	8010d12 <gc_execute_block+0x3496>
            system_add_rt_report(Report_ToolOffset);
 8010bf2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8010bf6:	f011 f965 	bl	8021ec4 <system_add_rt_report>
            system_flag_wco_change();
 8010bfa:	f011 f9ef 	bl	8021fdc <system_flag_wco_change>
 8010bfe:	e7c5      	b.n	8010b8c <gc_execute_block+0x3310>
        memcpy(&gc_state.modal.coord_system, &gc_block.modal.coord_system, sizeof(gc_state.modal.coord_system));
 8010c00:	4c0c      	ldr	r4, [pc, #48]	@ (8010c34 <gc_execute_block+0x33b8>)
 8010c02:	4b0d      	ldr	r3, [pc, #52]	@ (8010c38 <gc_execute_block+0x33bc>)
 8010c04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010c06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        system_add_rt_report(Report_GWCO);
 8010c0a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010c0e:	f011 f959 	bl	8021ec4 <system_add_rt_report>
        system_flag_wco_change();
 8010c12:	f011 f9e3 	bl	8021fdc <system_flag_wco_change>
 8010c16:	e7bf      	b.n	8010b98 <gc_execute_block+0x331c>
 8010c18:	200017c8 	.word	0x200017c8
 8010c1c:	200016c0 	.word	0x200016c0
 8010c20:	20001d70 	.word	0x20001d70
 8010c24:	200016bc 	.word	0x200016bc
 8010c28:	20001a90 	.word	0x20001a90
 8010c2c:	20001c78 	.word	0x20001c78
 8010c30:	20001750 	.word	0x20001750
 8010c34:	200017d0 	.word	0x200017d0
 8010c38:	200016d0 	.word	0x200016d0
    switch(gc_block.non_modal_command) {
 8010c3c:	3b1c      	subs	r3, #28
 8010c3e:	2b25      	cmp	r3, #37	@ 0x25
 8010c40:	d867      	bhi.n	8010d12 <gc_execute_block+0x3496>
 8010c42:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010c46:	004e      	.short	0x004e
 8010c48:	004e0066 	.word	0x004e0066
 8010c4c:	00660066 	.word	0x00660066
 8010c50:	00660066 	.word	0x00660066
 8010c54:	00660066 	.word	0x00660066
 8010c58:	01010066 	.word	0x01010066
 8010c5c:	01060066 	.word	0x01060066
 8010c60:	00660066 	.word	0x00660066
 8010c64:	00660066 	.word	0x00660066
 8010c68:	00660066 	.word	0x00660066
 8010c6c:	00660066 	.word	0x00660066
 8010c70:	00660066 	.word	0x00660066
 8010c74:	00660066 	.word	0x00660066
 8010c78:	00660066 	.word	0x00660066
 8010c7c:	00660066 	.word	0x00660066
 8010c80:	00660066 	.word	0x00660066
 8010c84:	00660066 	.word	0x00660066
 8010c88:	00660066 	.word	0x00660066
 8010c8c:	00660066 	.word	0x00660066
 8010c90:	010b      	.short	0x010b
 8010c92:	2b7a      	cmp	r3, #122	@ 0x7a
 8010c94:	d83d      	bhi.n	8010d12 <gc_execute_block+0x3496>
 8010c96:	2b5c      	cmp	r3, #92	@ 0x5c
 8010c98:	d33b      	bcc.n	8010d12 <gc_execute_block+0x3496>
 8010c9a:	3b5c      	subs	r3, #92	@ 0x5c
 8010c9c:	2b1e      	cmp	r3, #30
 8010c9e:	d838      	bhi.n	8010d12 <gc_execute_block+0x3496>
 8010ca0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010ca4:	003700fb 	.word	0x003700fb
 8010ca8:	00370037 	.word	0x00370037
 8010cac:	00370037 	.word	0x00370037
 8010cb0:	00370037 	.word	0x00370037
 8010cb4:	00370037 	.word	0x00370037
 8010cb8:	00370112 	.word	0x00370112
 8010cbc:	00370037 	.word	0x00370037
 8010cc0:	00370037 	.word	0x00370037
 8010cc4:	00370037 	.word	0x00370037
 8010cc8:	00370037 	.word	0x00370037
 8010ccc:	0037012b 	.word	0x0037012b
 8010cd0:	00370037 	.word	0x00370037
 8010cd4:	00370037 	.word	0x00370037
 8010cd8:	00370037 	.word	0x00370037
 8010cdc:	00370037 	.word	0x00370037
 8010ce0:	0138      	.short	0x0138
            plan_data.condition.rapid_motion = On; // Set rapid motion condition flag.
 8010ce2:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8010ce6:	f043 0301 	orr.w	r3, r3, #1
 8010cea:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
            if(axis_command)
 8010cee:	f1ba 0f00 	cmp.w	sl, #0
 8010cf2:	f040 80a4 	bne.w	8010e3e <gc_execute_block+0x35c2>
            mc_line(gc_block.values.coord_data.xyz, &plan_data);
 8010cf6:	4c8d      	ldr	r4, [pc, #564]	@ (8010f2c <gc_execute_block+0x36b0>)
 8010cf8:	a914      	add	r1, sp, #80	@ 0x50
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	f002 ff8e 	bl	8013c1c <mc_line>
            memcpy(gc_state.position, gc_block.values.coord_data.xyz, sizeof(gc_state.position));
 8010d00:	4b8b      	ldr	r3, [pc, #556]	@ (8010f30 <gc_execute_block+0x36b4>)
 8010d02:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8010d06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            set_scaling(1.0f);
 8010d0a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010d0e:	f7fc faeb 	bl	800d2e8 <set_scaling>
    gc_state.modal.motion = gc_block.modal.motion;
 8010d12:	4a88      	ldr	r2, [pc, #544]	@ (8010f34 <gc_execute_block+0x36b8>)
 8010d14:	8910      	ldrh	r0, [r2, #8]
 8010d16:	4b88      	ldr	r3, [pc, #544]	@ (8010f38 <gc_execute_block+0x36bc>)
 8010d18:	8018      	strh	r0, [r3, #0]
    gc_state.modal.canned_cycle_active = gc_block.modal.canned_cycle_active;
 8010d1a:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8010d1e:	77da      	strb	r2, [r3, #31]
    if(gc_state.modal.motion != MotionMode_None && axis_command == AxisCommand_MotionMode) {
 8010d20:	2850      	cmp	r0, #80	@ 0x50
 8010d22:	d003      	beq.n	8010d2c <gc_execute_block+0x34b0>
 8010d24:	f1ba 0f02 	cmp.w	sl, #2
 8010d28:	f000 8118 	beq.w	8010f5c <gc_execute_block+0x36e0>
    if(plan_data.message)
 8010d2c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8010d2e:	b108      	cbz	r0, 8010d34 <gc_execute_block+0x34b8>
        gc_output_message(plan_data.message);
 8010d30:	f7fc fc8e 	bl	800d650 <gc_output_message>
    gc_state.modal.program_flow = gc_block.modal.program_flow;
 8010d34:	4b7f      	ldr	r3, [pc, #508]	@ (8010f34 <gc_execute_block+0x36b8>)
 8010d36:	f893 4020 	ldrb.w	r4, [r3, #32]
 8010d3a:	4b7f      	ldr	r3, [pc, #508]	@ (8010f38 <gc_execute_block+0x36bc>)
 8010d3c:	761c      	strb	r4, [r3, #24]
    if(gc_state.modal.program_flow || sys.flags.single_block) {
 8010d3e:	b92c      	cbnz	r4, 8010d4c <gc_execute_block+0x34d0>
 8010d40:	4b7e      	ldr	r3, [pc, #504]	@ (8010f3c <gc_execute_block+0x36c0>)
 8010d42:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	f6bc ae75 	bge.w	800da36 <gc_execute_block+0x1ba>
        protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 8010d4c:	f007 f862 	bl	8017e14 <protocol_buffer_synchronize>
        if(gc_state.modal.program_flow == ProgramFlow_Return) {
 8010d50:	4b79      	ldr	r3, [pc, #484]	@ (8010f38 <gc_execute_block+0x36bc>)
 8010d52:	7e1b      	ldrb	r3, [r3, #24]
 8010d54:	2b63      	cmp	r3, #99	@ 0x63
 8010d56:	f000 82d1 	beq.w	80112fc <gc_execute_block+0x3a80>
        } else if(gc_state.modal.program_flow == ProgramFlow_Paused || gc_block.modal.program_flow == ProgramFlow_OptionalStop || gc_block.modal.program_flow == ProgramFlow_CompletedM60 || sys.flags.single_block) {
 8010d5a:	2b03      	cmp	r3, #3
 8010d5c:	f000 82d4 	beq.w	8011308 <gc_execute_block+0x3a8c>
 8010d60:	4b74      	ldr	r3, [pc, #464]	@ (8010f34 <gc_execute_block+0x36b8>)
 8010d62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010d66:	2b01      	cmp	r3, #1
 8010d68:	f000 82ce 	beq.w	8011308 <gc_execute_block+0x3a8c>
 8010d6c:	2b3c      	cmp	r3, #60	@ 0x3c
 8010d6e:	f000 82cb 	beq.w	8011308 <gc_execute_block+0x3a8c>
 8010d72:	4a72      	ldr	r2, [pc, #456]	@ (8010f3c <gc_execute_block+0x36c0>)
 8010d74:	f992 2016 	ldrsb.w	r2, [r2, #22]
 8010d78:	2a00      	cmp	r2, #0
 8010d7a:	f2c0 82c5 	blt.w	8011308 <gc_execute_block+0x3a8c>
            if(!check_mode && gc_block.modal.program_flow == ProgramFlow_CompletedM30 && hal.pallet_shuttle)
 8010d7e:	2d02      	cmp	r5, #2
 8010d80:	d002      	beq.n	8010d88 <gc_execute_block+0x350c>
 8010d82:	2b1e      	cmp	r3, #30
 8010d84:	f000 82db 	beq.w	801133e <gc_execute_block+0x3ac2>
            gc_state.file_run = false;
 8010d88:	4b6b      	ldr	r3, [pc, #428]	@ (8010f38 <gc_execute_block+0x36bc>)
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            gc_state.modal.motion = MotionMode_Linear;
 8010d90:	2101      	movs	r1, #1
 8010d92:	8019      	strh	r1, [r3, #0]
            gc_block.modal.canned_cycle_active = false;
 8010d94:	4967      	ldr	r1, [pc, #412]	@ (8010f34 <gc_execute_block+0x36b8>)
 8010d96:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
            gc_state.modal.plane_select = PlaneSelect_XY;
 8010d9a:	719a      	strb	r2, [r3, #6]
            gc_state.modal.spindle.rpm_mode = SpindleSpeedMode_RPM; // NOTE: not compliant with linuxcnc (?)
 8010d9c:	76da      	strb	r2, [r3, #27]
            gc_state.modal.distance_incremental = false;
 8010d9e:	711a      	strb	r2, [r3, #4]
            gc_state.modal.feed_mode = FeedMode_UnitsPerMin;
 8010da0:	709a      	strb	r2, [r3, #2]
            if(gc_state.modal.coord_system.id != CoordinateSystem_G54) {
 8010da2:	7d1b      	ldrb	r3, [r3, #20]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	f040 82d2 	bne.w	801134e <gc_execute_block+0x3ad2>
            gc_state.modal.spindle.state = (spindle_state_t){0};
 8010daa:	4b63      	ldr	r3, [pc, #396]	@ (8010f38 <gc_execute_block+0x36bc>)
 8010dac:	2000      	movs	r0, #0
 8010dae:	7698      	strb	r0, [r3, #26]
            gc_state.modal.coolant = (coolant_state_t){0};
 8010db0:	7658      	strb	r0, [r3, #25]
            gc_state.modal.override_ctrl.feed_rate_disable = Off;
 8010db2:	7f1a      	ldrb	r2, [r3, #28]
 8010db4:	f360 0200 	bfi	r2, r0, #0, #1
 8010db8:	771a      	strb	r2, [r3, #28]
            gc_state.modal.override_ctrl.spindle_rpm_disable = Off;
 8010dba:	b2d2      	uxtb	r2, r2
 8010dbc:	f360 0282 	bfi	r2, r0, #2, #1
 8010dc0:	771a      	strb	r2, [r3, #28]
                if((spindle = spindle_get(--idx))) {
 8010dc2:	f00d fc31 	bl	801e628 <spindle_get>
 8010dc6:	b168      	cbz	r0, 8010de4 <gc_execute_block+0x3568>
                    spindle->param->state.override_disable = Off;
 8010dc8:	6842      	ldr	r2, [r0, #4]
 8010dca:	7a11      	ldrb	r1, [r2, #8]
 8010dcc:	f36f 1104 	bfc	r1, #4, #1
 8010dd0:	7211      	strb	r1, [r2, #8]
                    if(settings.flags.restore_overrides)
 8010dd2:	4a5b      	ldr	r2, [pc, #364]	@ (8010f40 <gc_execute_block+0x36c4>)
 8010dd4:	f892 20fe 	ldrb.w	r2, [r2, #254]	@ 0xfe
 8010dd8:	f012 0f02 	tst.w	r2, #2
 8010ddc:	d002      	beq.n	8010de4 <gc_execute_block+0x3568>
                        spindle->param->override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE;
 8010dde:	6843      	ldr	r3, [r0, #4]
 8010de0:	2264      	movs	r2, #100	@ 0x64
 8010de2:	60da      	str	r2, [r3, #12]
            if(settings.parking.flags.enabled)
 8010de4:	4b56      	ldr	r3, [pc, #344]	@ (8010f40 <gc_execute_block+0x36c4>)
 8010de6:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 8010dea:	f013 0f01 	tst.w	r3, #1
 8010dee:	d00a      	beq.n	8010e06 <gc_execute_block+0x358a>
                gc_state.modal.override_ctrl.parking_disable = settings.parking.flags.enable_override_control &&
 8010df0:	f003 0306 	and.w	r3, r3, #6
 8010df4:	2b06      	cmp	r3, #6
 8010df6:	bf14      	ite	ne
 8010df8:	2300      	movne	r3, #0
 8010dfa:	2301      	moveq	r3, #1
 8010dfc:	4a4e      	ldr	r2, [pc, #312]	@ (8010f38 <gc_execute_block+0x36bc>)
 8010dfe:	7f11      	ldrb	r1, [r2, #28]
 8010e00:	f363 01c3 	bfi	r1, r3, #3, #1
 8010e04:	7711      	strb	r1, [r2, #28]
            sys.override.control = gc_state.modal.override_ctrl;
 8010e06:	4b4c      	ldr	r3, [pc, #304]	@ (8010f38 <gc_execute_block+0x36bc>)
 8010e08:	7f1a      	ldrb	r2, [r3, #28]
 8010e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8010f3c <gc_execute_block+0x36c0>)
 8010e0c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            if(settings.flags.restore_overrides) {
 8010e10:	4b4b      	ldr	r3, [pc, #300]	@ (8010f40 <gc_execute_block+0x36c4>)
 8010e12:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8010e16:	f013 0f02 	tst.w	r3, #2
 8010e1a:	d003      	beq.n	8010e24 <gc_execute_block+0x35a8>
                sys.override.feed_rate = DEFAULT_FEED_OVERRIDE;
 8010e1c:	4b47      	ldr	r3, [pc, #284]	@ (8010f3c <gc_execute_block+0x36c0>)
 8010e1e:	2264      	movs	r2, #100	@ 0x64
 8010e20:	61da      	str	r2, [r3, #28]
                sys.override.rapid_rate = DEFAULT_RAPID_OVERRIDE;
 8010e22:	621a      	str	r2, [r3, #32]
            if (!check_mode) {
 8010e24:	2d02      	cmp	r5, #2
 8010e26:	f040 8299 	bne.w	801135c <gc_execute_block+0x3ae0>
            if(grbl.on_program_completed)
 8010e2a:	4b46      	ldr	r3, [pc, #280]	@ (8010f44 <gc_execute_block+0x36c8>)
 8010e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	f000 82c1 	beq.w	80113b6 <gc_execute_block+0x3b3a>
                grbl.on_program_completed(gc_state.modal.program_flow, check_mode);
 8010e34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010e36:	4a40      	ldr	r2, [pc, #256]	@ (8010f38 <gc_execute_block+0x36bc>)
 8010e38:	7e10      	ldrb	r0, [r2, #24]
 8010e3a:	4798      	blx	r3
 8010e3c:	e2bb      	b.n	80113b6 <gc_execute_block+0x3b3a>
                mc_line(gc_block.values.xyz, &plan_data);
 8010e3e:	a914      	add	r1, sp, #80	@ 0x50
 8010e40:	4841      	ldr	r0, [pc, #260]	@ (8010f48 <gc_execute_block+0x36cc>)
 8010e42:	f002 feeb 	bl	8013c1c <mc_line>
 8010e46:	e756      	b.n	8010cf6 <gc_execute_block+0x347a>
            settings_write_coord_data(CoordinateSystem_G28, &gc_state.position);
 8010e48:	4939      	ldr	r1, [pc, #228]	@ (8010f30 <gc_execute_block+0x36b4>)
 8010e4a:	2009      	movs	r0, #9
 8010e4c:	f00c fbfe 	bl	801d64c <settings_write_coord_data>
            break;
 8010e50:	e75f      	b.n	8010d12 <gc_execute_block+0x3496>
            settings_write_coord_data(CoordinateSystem_G30, &gc_state.position);
 8010e52:	4937      	ldr	r1, [pc, #220]	@ (8010f30 <gc_execute_block+0x36b4>)
 8010e54:	200a      	movs	r0, #10
 8010e56:	f00c fbf9 	bl	801d64c <settings_write_coord_data>
            break;
 8010e5a:	e75a      	b.n	8010d12 <gc_execute_block+0x3496>
                ngc_named_param_set("_value", 0.0f);
 8010e5c:	ed9f 8a3b 	vldr	s16, [pc, #236]	@ 8010f4c <gc_execute_block+0x36d0>
 8010e60:	eeb0 0a48 	vmov.f32	s0, s16
 8010e64:	483a      	ldr	r0, [pc, #232]	@ (8010f50 <gc_execute_block+0x36d4>)
 8010e66:	f004 facf 	bl	8015408 <ngc_named_param_set>
                ngc_named_param_set("_value_returned", 0.0f);
 8010e6a:	eeb0 0a48 	vmov.f32	s0, s16
 8010e6e:	4839      	ldr	r0, [pc, #228]	@ (8010f54 <gc_execute_block+0x36d8>)
 8010e70:	f004 faca 	bl	8015408 <ngc_named_param_set>
                status_code_t status = grbl.on_macro_execute((macro_id_t)gc_block.values.p);
 8010e74:	4b33      	ldr	r3, [pc, #204]	@ (8010f44 <gc_execute_block+0x36c8>)
 8010e76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010e7a:	4a2e      	ldr	r2, [pc, #184]	@ (8010f34 <gc_execute_block+0x36b8>)
 8010e7c:	edd2 7a17 	vldr	s15, [r2, #92]	@ 0x5c
 8010e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010e84:	ee17 2a90 	vmov	r2, s15
 8010e88:	b290      	uxth	r0, r2
 8010e8a:	4798      	blx	r3
 8010e8c:	4604      	mov	r4, r0
                return status == Status_Unhandled ? Status_GcodeValueOutOfRange : status;
 8010e8e:	2854      	cmp	r0, #84	@ 0x54
 8010e90:	f47c add1 	bne.w	800da36 <gc_execute_block+0x1ba>
 8010e94:	2427      	movs	r4, #39	@ 0x27
 8010e96:	f7fc bdce 	b.w	800da36 <gc_execute_block+0x1ba>
            gc_state.g92_coord_offset_applied = true; // TODO: check for all zero?
 8010e9a:	4b27      	ldr	r3, [pc, #156]	@ (8010f38 <gc_execute_block+0x36bc>)
 8010e9c:	2201      	movs	r2, #1
 8010e9e:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
            memcpy(gc_state.g92_coord_offset, gc_block.values.xyz, sizeof(gc_state.g92_coord_offset));
 8010ea2:	33b8      	adds	r3, #184	@ 0xb8
 8010ea4:	4a28      	ldr	r2, [pc, #160]	@ (8010f48 <gc_execute_block+0x36cc>)
 8010ea6:	ca07      	ldmia	r2, {r0, r1, r2}
 8010ea8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            if(!settings.flags.g92_is_volatile)
 8010eac:	4b24      	ldr	r3, [pc, #144]	@ (8010f40 <gc_execute_block+0x36c4>)
 8010eae:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 8010eb2:	f013 0f02 	tst.w	r3, #2
 8010eb6:	d002      	beq.n	8010ebe <gc_execute_block+0x3642>
            add_offset();
 8010eb8:	f7fc f9b8 	bl	800d22c <add_offset>
            break;
 8010ebc:	e729      	b.n	8010d12 <gc_execute_block+0x3496>
                settings_write_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Save G92 offsets to non-volatile storage
 8010ebe:	4926      	ldr	r1, [pc, #152]	@ (8010f58 <gc_execute_block+0x36dc>)
 8010ec0:	200b      	movs	r0, #11
 8010ec2:	f00c fbc3 	bl	801d64c <settings_write_coord_data>
 8010ec6:	e7f7      	b.n	8010eb8 <gc_execute_block+0x363c>
            gc_state.g92_coord_offset_applied = false;
 8010ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8010f38 <gc_execute_block+0x36bc>)
 8010eca:	2300      	movs	r3, #0
 8010ecc:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
            clear_vector(gc_state.g92_coord_offset); // Disable G92 offsets by zeroing offset vector.
 8010ed0:	f102 01b8 	add.w	r1, r2, #184	@ 0xb8
 8010ed4:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
 8010ed8:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
 8010edc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            if(!settings.flags.g92_is_volatile)
 8010ee0:	4b17      	ldr	r3, [pc, #92]	@ (8010f40 <gc_execute_block+0x36c4>)
 8010ee2:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 8010ee6:	f013 0f02 	tst.w	r3, #2
 8010eea:	d002      	beq.n	8010ef2 <gc_execute_block+0x3676>
            add_offset();
 8010eec:	f7fc f99e 	bl	800d22c <add_offset>
            break;
 8010ef0:	e70f      	b.n	8010d12 <gc_execute_block+0x3496>
                settings_write_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Save G92 offsets to non-volatile storage
 8010ef2:	200b      	movs	r0, #11
 8010ef4:	f00c fbaa 	bl	801d64c <settings_write_coord_data>
 8010ef8:	e7f8      	b.n	8010eec <gc_execute_block+0x3670>
            gc_state.g92_coord_offset_applied = false;
 8010efa:	4a0f      	ldr	r2, [pc, #60]	@ (8010f38 <gc_execute_block+0x36bc>)
 8010efc:	2300      	movs	r3, #0
 8010efe:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
            clear_vector(gc_state.g92_coord_offset); // Disable G92 offsets by zeroing offset vector.
 8010f02:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
 8010f06:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
 8010f0a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            add_offset();
 8010f0e:	f7fc f98d 	bl	800d22c <add_offset>
            break;
 8010f12:	e6fe      	b.n	8010d12 <gc_execute_block+0x3496>
            gc_state.g92_coord_offset_applied = true; // TODO: check for all zero?
 8010f14:	4908      	ldr	r1, [pc, #32]	@ (8010f38 <gc_execute_block+0x36bc>)
 8010f16:	2301      	movs	r3, #1
 8010f18:	f881 30b4 	strb.w	r3, [r1, #180]	@ 0xb4
            settings_read_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Restore G92 offsets from non-volatile storage
 8010f1c:	31b8      	adds	r1, #184	@ 0xb8
 8010f1e:	200b      	movs	r0, #11
 8010f20:	f00c fbb8 	bl	801d694 <settings_read_coord_data>
            add_offset();
 8010f24:	f7fc f982 	bl	800d22c <add_offset>
            break;
 8010f28:	e6f3      	b.n	8010d12 <gc_execute_block+0x3496>
 8010f2a:	bf00      	nop
 8010f2c:	20001750 	.word	0x20001750
 8010f30:	20001830 	.word	0x20001830
 8010f34:	200016c0 	.word	0x200016c0
 8010f38:	200017c8 	.word	0x200017c8
 8010f3c:	20001d70 	.word	0x20001d70
 8010f40:	200024a8 	.word	0x200024a8
 8010f44:	20001c78 	.word	0x20001c78
 8010f48:	20001744 	.word	0x20001744
 8010f4c:	00000000 	.word	0x00000000
 8010f50:	0802b520 	.word	0x0802b520
 8010f54:	0802b528 	.word	0x0802b528
 8010f58:	20001880 	.word	0x20001880
        plan_data.output_commands = output_commands;
 8010f5c:	4ba6      	ldr	r3, [pc, #664]	@ (80111f8 <gc_execute_block+0x397c>)
 8010f5e:	681a      	ldr	r2, [r3, #0]
 8010f60:	921d      	str	r2, [sp, #116]	@ 0x74
        output_commands = NULL;
 8010f62:	2200      	movs	r2, #0
 8010f64:	601a      	str	r2, [r3, #0]
        switch(gc_state.modal.motion) {
 8010f66:	2853      	cmp	r0, #83	@ 0x53
 8010f68:	d858      	bhi.n	801101c <gc_execute_block+0x37a0>
 8010f6a:	2853      	cmp	r0, #83	@ 0x53
 8010f6c:	f200 81a5 	bhi.w	80112ba <gc_execute_block+0x3a3e>
 8010f70:	e8df f010 	tbh	[pc, r0, lsl #1]
 8010f74:	006d0098 	.word	0x006d0098
 8010f78:	00a400a4 	.word	0x00a400a4
 8010f7c:	00d401a3 	.word	0x00d401a3
 8010f80:	01a301a3 	.word	0x01a301a3
 8010f84:	01a301a3 	.word	0x01a301a3
 8010f88:	01a301a3 	.word	0x01a301a3
 8010f8c:	01a301a3 	.word	0x01a301a3
 8010f90:	01a301a3 	.word	0x01a301a3
 8010f94:	01a301a3 	.word	0x01a301a3
 8010f98:	01a301a3 	.word	0x01a301a3
 8010f9c:	01a301a3 	.word	0x01a301a3
 8010fa0:	01a301a3 	.word	0x01a301a3
 8010fa4:	01a301a3 	.word	0x01a301a3
 8010fa8:	01a301a3 	.word	0x01a301a3
 8010fac:	01a301a3 	.word	0x01a301a3
 8010fb0:	01a301a3 	.word	0x01a301a3
 8010fb4:	015001a3 	.word	0x015001a3
 8010fb8:	01a301a3 	.word	0x01a301a3
 8010fbc:	01a301a3 	.word	0x01a301a3
 8010fc0:	01a301a3 	.word	0x01a301a3
 8010fc4:	01a301a3 	.word	0x01a301a3
 8010fc8:	01a301a3 	.word	0x01a301a3
 8010fcc:	01a301a3 	.word	0x01a301a3
 8010fd0:	01a301a3 	.word	0x01a301a3
 8010fd4:	01a301a3 	.word	0x01a301a3
 8010fd8:	010001a3 	.word	0x010001a3
 8010fdc:	01a301a3 	.word	0x01a301a3
 8010fe0:	01a301a3 	.word	0x01a301a3
 8010fe4:	01a301a3 	.word	0x01a301a3
 8010fe8:	01a301a3 	.word	0x01a301a3
 8010fec:	01a301a3 	.word	0x01a301a3
 8010ff0:	01a301a3 	.word	0x01a301a3
 8010ff4:	01a301a3 	.word	0x01a301a3
 8010ff8:	01a301a3 	.word	0x01a301a3
 8010ffc:	01a301a3 	.word	0x01a301a3
 8011000:	01a301a3 	.word	0x01a301a3
 8011004:	018901a3 	.word	0x018901a3
 8011008:	01a301a3 	.word	0x01a301a3
 801100c:	01a3016f 	.word	0x01a3016f
 8011010:	01a301a3 	.word	0x01a301a3
 8011014:	018901a3 	.word	0x018901a3
 8011018:	01890189 	.word	0x01890189
 801101c:	f1a0 038c 	sub.w	r3, r0, #140	@ 0x8c
 8011020:	b29b      	uxth	r3, r3
 8011022:	2b03      	cmp	r3, #3
 8011024:	f200 814f 	bhi.w	80112c6 <gc_execute_block+0x3a4a>
                plan_data.condition.no_feed_override = !settings.probe.allow_feed_override;
 8011028:	4b74      	ldr	r3, [pc, #464]	@ (80111fc <gc_execute_block+0x3980>)
 801102a:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 801102e:	091b      	lsrs	r3, r3, #4
 8011030:	f083 0301 	eor.w	r3, r3, #1
 8011034:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8011038:	f363 1204 	bfi	r2, r3, #4, #1
 801103c:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
                gc_update_pos = (pos_update_t)mc_probe_cycle(gc_block.values.xyz, &plan_data, gc_parser_flags);
 8011040:	4642      	mov	r2, r8
 8011042:	a914      	add	r1, sp, #80	@ 0x50
 8011044:	486e      	ldr	r0, [pc, #440]	@ (8011200 <gc_execute_block+0x3984>)
 8011046:	f003 fcf7 	bl	8014a38 <mc_probe_cycle>
 801104a:	4604      	mov	r4, r0
                break;
 801104c:	e136      	b.n	80112bc <gc_execute_block+0x3a40>
                if(gc_state.modal.feed_mode == FeedMode_UnitsPerRev) {
 801104e:	4b6d      	ldr	r3, [pc, #436]	@ (8011204 <gc_execute_block+0x3988>)
 8011050:	789b      	ldrb	r3, [r3, #2]
 8011052:	2b02      	cmp	r3, #2
 8011054:	d005      	beq.n	8011062 <gc_execute_block+0x37e6>
                mc_line(gc_block.values.xyz, &plan_data);
 8011056:	a914      	add	r1, sp, #80	@ 0x50
 8011058:	4869      	ldr	r0, [pc, #420]	@ (8011200 <gc_execute_block+0x3984>)
 801105a:	f002 fddf 	bl	8013c1c <mc_line>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 801105e:	9c05      	ldr	r4, [sp, #20]
                break;
 8011060:	e12c      	b.n	80112bc <gc_execute_block+0x3a40>
                    plan_data.condition.units_per_rev = On;
 8011062:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8011066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801106a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
                    plan_data.spindle.state.synchronized = settings.mode != Mode_Lathe || gc_block.values.xyz[Z_AXIS] != gc_state.position[Z_AXIS];
 801106e:	4b63      	ldr	r3, [pc, #396]	@ (80111fc <gc_execute_block+0x3980>)
 8011070:	7e1b      	ldrb	r3, [r3, #24]
 8011072:	2b02      	cmp	r3, #2
 8011074:	d007      	beq.n	8011086 <gc_execute_block+0x380a>
 8011076:	2301      	movs	r3, #1
 8011078:	f89d 2058 	ldrb.w	r2, [sp, #88]	@ 0x58
 801107c:	f363 12c7 	bfi	r2, r3, #7, #1
 8011080:	f88d 2058 	strb.w	r2, [sp, #88]	@ 0x58
 8011084:	e7e7      	b.n	8011056 <gc_execute_block+0x37da>
 8011086:	4b60      	ldr	r3, [pc, #384]	@ (8011208 <gc_execute_block+0x398c>)
 8011088:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 801108c:	4b5d      	ldr	r3, [pc, #372]	@ (8011204 <gc_execute_block+0x3988>)
 801108e:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8011092:	eeb4 7a67 	vcmp.f32	s14, s15
 8011096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801109a:	d001      	beq.n	80110a0 <gc_execute_block+0x3824>
 801109c:	2301      	movs	r3, #1
 801109e:	e7eb      	b.n	8011078 <gc_execute_block+0x37fc>
 80110a0:	2300      	movs	r3, #0
 80110a2:	e7e9      	b.n	8011078 <gc_execute_block+0x37fc>
                plan_data.condition.rapid_motion = On; // Set rapid motion condition flag.
 80110a4:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80110a8:	f043 0301 	orr.w	r3, r3, #1
 80110ac:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
                mc_line(gc_block.values.xyz, &plan_data);
 80110b0:	a914      	add	r1, sp, #80	@ 0x50
 80110b2:	4853      	ldr	r0, [pc, #332]	@ (8011200 <gc_execute_block+0x3984>)
 80110b4:	f002 fdb2 	bl	8013c1c <mc_line>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 80110b8:	9c05      	ldr	r4, [sp, #20]
                break;
 80110ba:	e0ff      	b.n	80112bc <gc_execute_block+0x3a40>
                if(gc_state.modal.feed_mode == FeedMode_UnitsPerRev)
 80110bc:	4b51      	ldr	r3, [pc, #324]	@ (8011204 <gc_execute_block+0x3988>)
 80110be:	789b      	ldrb	r3, [r3, #2]
 80110c0:	2b02      	cmp	r3, #2
 80110c2:	d01a      	beq.n	80110fa <gc_execute_block+0x387e>
                mc_arc(gc_block.values.xyz, &plan_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 80110c4:	4b50      	ldr	r3, [pc, #320]	@ (8011208 <gc_execute_block+0x398c>)
 80110c6:	ed93 0a19 	vldr	s0, [r3, #100]	@ 0x64
 80110ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110cc:	f013 0f04 	tst.w	r3, #4
 80110d0:	d020      	beq.n	8011114 <gc_execute_block+0x3898>
                        plane, gc_parser_flags.arc_is_clockwise ? -gc_block.arc_turns : gc_block.arc_turns);
 80110d2:	4b4d      	ldr	r3, [pc, #308]	@ (8011208 <gc_execute_block+0x398c>)
 80110d4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80110d8:	4252      	negs	r2, r2
                mc_arc(gc_block.values.xyz, &plan_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 80110da:	4b4c      	ldr	r3, [pc, #304]	@ (801120c <gc_execute_block+0x3990>)
 80110dc:	9201      	str	r2, [sp, #4]
 80110de:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80110e0:	f8ad 2000 	strh.w	r2, [sp]
 80110e4:	0c12      	lsrs	r2, r2, #16
 80110e6:	f88d 2002 	strb.w	r2, [sp, #2]
 80110ea:	4a49      	ldr	r2, [pc, #292]	@ (8011210 <gc_execute_block+0x3994>)
 80110ec:	a914      	add	r1, sp, #80	@ 0x50
 80110ee:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80110f2:	f002 fdd9 	bl	8013ca8 <mc_arc>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 80110f6:	9c05      	ldr	r4, [sp, #20]
                break;
 80110f8:	e0e0      	b.n	80112bc <gc_execute_block+0x3a40>
                    plan_data.condition.units_per_rev = plan_data.spindle.state.synchronized = On;
 80110fa:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80110fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011102:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8011106:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801110a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801110e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8011112:	e7d7      	b.n	80110c4 <gc_execute_block+0x3848>
                        plane, gc_parser_flags.arc_is_clockwise ? -gc_block.arc_turns : gc_block.arc_turns);
 8011114:	4b3c      	ldr	r3, [pc, #240]	@ (8011208 <gc_execute_block+0x398c>)
 8011116:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 801111a:	e7de      	b.n	80110da <gc_execute_block+0x385e>
                        .x = gc_state.position[X_AXIS] + gc_block.values.ijk[X_AXIS],
 801111c:	4a39      	ldr	r2, [pc, #228]	@ (8011204 <gc_execute_block+0x3988>)
 801111e:	edd2 7a1a 	vldr	s15, [r2, #104]	@ 0x68
 8011122:	4839      	ldr	r0, [pc, #228]	@ (8011208 <gc_execute_block+0x398c>)
 8011124:	ed90 7a12 	vldr	s14, [r0, #72]	@ 0x48
 8011128:	ee77 7a87 	vadd.f32	s15, s15, s14
                    point_2d_t cp1 = {
 801112c:	edcd 7a0f 	vstr	s15, [sp, #60]	@ 0x3c
                        .y = gc_state.position[Y_AXIS] + gc_block.values.ijk[Y_AXIS]
 8011130:	edd2 7a1b 	vldr	s15, [r2, #108]	@ 0x6c
 8011134:	ed90 7a13 	vldr	s14, [r0, #76]	@ 0x4c
 8011138:	ee77 7a87 	vadd.f32	s15, s15, s14
                    point_2d_t cp1 = {
 801113c:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
                        .x = gc_block.values.xyz[X_AXIS] + gc_state.modal.spline_pq[X_AXIS],
 8011140:	edd0 7a21 	vldr	s15, [r0, #132]	@ 0x84
 8011144:	ed92 7a08 	vldr	s14, [r2, #32]
 8011148:	ee77 7a87 	vadd.f32	s15, s15, s14
                    point_2d_t cp2 = {
 801114c:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
                        .y = gc_block.values.xyz[Y_AXIS] + gc_state.modal.spline_pq[Y_AXIS]
 8011150:	edd0 7a22 	vldr	s15, [r0, #136]	@ 0x88
 8011154:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 8011158:	ee77 7a87 	vadd.f32	s15, s15, s14
                    point_2d_t cp2 = {
 801115c:	edcd 7a12 	vstr	s15, [sp, #72]	@ 0x48
                    mc_cubic_b_spline(gc_block.values.xyz, &plan_data, gc_state.position, cp1.values, cp2.values);
 8011160:	ab11      	add	r3, sp, #68	@ 0x44
 8011162:	9300      	str	r3, [sp, #0]
 8011164:	ab0f      	add	r3, sp, #60	@ 0x3c
 8011166:	3268      	adds	r2, #104	@ 0x68
 8011168:	a914      	add	r1, sp, #80	@ 0x50
 801116a:	3084      	adds	r0, #132	@ 0x84
 801116c:	f003 f85c 	bl	8014228 <mc_cubic_b_spline>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 8011170:	9c05      	ldr	r4, [sp, #20]
                break;
 8011172:	e0a3      	b.n	80112bc <gc_execute_block+0x3a40>
                        .x = gc_state.position[X_AXIS] + (gc_block.values.ijk[X_AXIS] * 2.0f) / 3.0f,
 8011174:	4a23      	ldr	r2, [pc, #140]	@ (8011204 <gc_execute_block+0x3988>)
 8011176:	ed92 7a1a 	vldr	s14, [r2, #104]	@ 0x68
 801117a:	4823      	ldr	r0, [pc, #140]	@ (8011208 <gc_execute_block+0x398c>)
 801117c:	ed90 5a12 	vldr	s10, [r0, #72]	@ 0x48
 8011180:	ee35 6a05 	vadd.f32	s12, s10, s10
 8011184:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8011188:	eec6 7a26 	vdiv.f32	s15, s12, s13
 801118c:	ee77 7a27 	vadd.f32	s15, s14, s15
                    point_2d_t cp1 = {
 8011190:	edcd 7a0f 	vstr	s15, [sp, #60]	@ 0x3c
                        .y = gc_state.position[Y_AXIS] + (gc_block.values.ijk[Y_AXIS] * 2.0f) / 3.0f
 8011194:	edd2 7a1b 	vldr	s15, [r2, #108]	@ 0x6c
 8011198:	edd0 5a13 	vldr	s11, [r0, #76]	@ 0x4c
 801119c:	ee75 4aa5 	vadd.f32	s9, s11, s11
 80111a0:	ee84 6aa6 	vdiv.f32	s12, s9, s13
 80111a4:	ee37 6a86 	vadd.f32	s12, s15, s12
                    point_2d_t cp1 = {
 80111a8:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
                        .x = gc_block.values.xyz[X_AXIS] + ((gc_state.position[X_AXIS] + gc_block.values.ijk[X_AXIS] - gc_block.values.xyz[X_AXIS]) * 2.0f) / 3.0f,
 80111ac:	ed90 6a21 	vldr	s12, [r0, #132]	@ 0x84
 80111b0:	ee37 7a05 	vadd.f32	s14, s14, s10
 80111b4:	ee37 7a46 	vsub.f32	s14, s14, s12
 80111b8:	ee37 7a07 	vadd.f32	s14, s14, s14
 80111bc:	ee87 5a26 	vdiv.f32	s10, s14, s13
 80111c0:	ee36 6a05 	vadd.f32	s12, s12, s10
                    point_2d_t cp2 = {
 80111c4:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
                        .y = gc_block.values.xyz[Y_AXIS] + ((gc_state.position[Y_AXIS] + gc_block.values.ijk[Y_AXIS] - gc_block.values.xyz[Y_AXIS]) * 2.0f) / 3.0f
 80111c8:	ed90 7a22 	vldr	s14, [r0, #136]	@ 0x88
 80111cc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80111d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80111d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80111d8:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80111dc:	ee37 7a06 	vadd.f32	s14, s14, s12
                    point_2d_t cp2 = {
 80111e0:	ed8d 7a12 	vstr	s14, [sp, #72]	@ 0x48
                    mc_cubic_b_spline(gc_block.values.xyz, &plan_data, gc_state.position, cp1.values, cp2.values);
 80111e4:	ab11      	add	r3, sp, #68	@ 0x44
 80111e6:	9300      	str	r3, [sp, #0]
 80111e8:	ab0f      	add	r3, sp, #60	@ 0x3c
 80111ea:	3268      	adds	r2, #104	@ 0x68
 80111ec:	a914      	add	r1, sp, #80	@ 0x50
 80111ee:	3084      	adds	r0, #132	@ 0x84
 80111f0:	f003 f81a 	bl	8014228 <mc_cubic_b_spline>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 80111f4:	9c05      	ldr	r4, [sp, #20]
                break;
 80111f6:	e061      	b.n	80112bc <gc_execute_block+0x3a40>
 80111f8:	20001794 	.word	0x20001794
 80111fc:	200024a8 	.word	0x200024a8
 8011200:	20001744 	.word	0x20001744
 8011204:	200017c8 	.word	0x200017c8
 8011208:	200016c0 	.word	0x200016c0
 801120c:	20001708 	.word	0x20001708
 8011210:	20001830 	.word	0x20001830
                    protocol_buffer_synchronize(); // Wait until any previous moves are finished.
 8011214:	f006 fdfe 	bl	8017e14 <protocol_buffer_synchronize>
                    gc_override_flags_t overrides = sys.override.control; // Save current override disable status.
 8011218:	4bc5      	ldr	r3, [pc, #788]	@ (8011530 <gc_execute_block+0x3cb4>)
 801121a:	f893 6029 	ldrb.w	r6, [r3, #41]	@ 0x29
                    status_code_t status = init_sync_motion(&plan_data, gc_block.values.k);
 801121e:	4bc5      	ldr	r3, [pc, #788]	@ (8011534 <gc_execute_block+0x3cb8>)
 8011220:	ed93 0a15 	vldr	s0, [r3, #84]	@ 0x54
 8011224:	a814      	add	r0, sp, #80	@ 0x50
 8011226:	f7fb ff7d 	bl	800d124 <init_sync_motion>
                    if(status != Status_OK)
 801122a:	4604      	mov	r4, r0
 801122c:	2800      	cmp	r0, #0
 801122e:	f47c ac02 	bne.w	800da36 <gc_execute_block+0x1ba>
                    plan_data.spindle.state.synchronized = On;
 8011232:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8011236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801123a:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
                    mc_line(gc_block.values.xyz, &plan_data);
 801123e:	a914      	add	r1, sp, #80	@ 0x50
 8011240:	48bd      	ldr	r0, [pc, #756]	@ (8011538 <gc_execute_block+0x3cbc>)
 8011242:	f002 fceb 	bl	8013c1c <mc_line>
                    protocol_buffer_synchronize();    // Wait until synchronized move is finished,
 8011246:	f006 fde5 	bl	8017e14 <protocol_buffer_synchronize>
                    sys.override.control = overrides; // then restore previous override disable status.
 801124a:	4bb9      	ldr	r3, [pc, #740]	@ (8011530 <gc_execute_block+0x3cb4>)
 801124c:	f883 6029 	strb.w	r6, [r3, #41]	@ 0x29
                break;
 8011250:	e034      	b.n	80112bc <gc_execute_block+0x3a40>
                    protocol_buffer_synchronize(); // Wait until any previous moves are finished.
 8011252:	f006 fddf 	bl	8017e14 <protocol_buffer_synchronize>
                    gc_override_flags_t overrides = sys.override.control; // Save current override disable status.
 8011256:	4bb6      	ldr	r3, [pc, #728]	@ (8011530 <gc_execute_block+0x3cb4>)
 8011258:	f893 6029 	ldrb.w	r6, [r3, #41]	@ 0x29
                    status_code_t status = init_sync_motion(&plan_data, thread.pitch);
 801125c:	4bb7      	ldr	r3, [pc, #732]	@ (801153c <gc_execute_block+0x3cc0>)
 801125e:	ed93 0a00 	vldr	s0, [r3]
 8011262:	a814      	add	r0, sp, #80	@ 0x50
 8011264:	f7fb ff5e 	bl	800d124 <init_sync_motion>
                    if(status != Status_OK)
 8011268:	4604      	mov	r4, r0
 801126a:	2800      	cmp	r0, #0
 801126c:	f47c abe3 	bne.w	800da36 <gc_execute_block+0x1ba>
                    mc_thread(&plan_data, gc_state.position, &thread, overrides.feed_hold_disable);
 8011270:	f3c6 0340 	ubfx	r3, r6, #1, #1
 8011274:	4ab1      	ldr	r2, [pc, #708]	@ (801153c <gc_execute_block+0x3cc0>)
 8011276:	49b2      	ldr	r1, [pc, #712]	@ (8011540 <gc_execute_block+0x3cc4>)
 8011278:	a814      	add	r0, sp, #80	@ 0x50
 801127a:	f003 f8ed 	bl	8014458 <mc_thread>
                    sys.override.control = overrides; // then restore previous override disable status.
 801127e:	4bac      	ldr	r3, [pc, #688]	@ (8011530 <gc_execute_block+0x3cb4>)
 8011280:	f883 6029 	strb.w	r6, [r3, #41]	@ 0x29
                break;
 8011284:	e01a      	b.n	80112bc <gc_execute_block+0x3a40>
                plan_data.spindle.rpm = gc_block.values.s;
 8011286:	49ab      	ldr	r1, [pc, #684]	@ (8011534 <gc_execute_block+0x3cb8>)
 8011288:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 801128a:	9315      	str	r3, [sp, #84]	@ 0x54
                gc_state.canned.retract_mode = gc_state.modal.retract_mode;
 801128c:	4bad      	ldr	r3, [pc, #692]	@ (8011544 <gc_execute_block+0x3cc8>)
 801128e:	7f5a      	ldrb	r2, [r3, #29]
 8011290:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
                mc_canned_drill(gc_state.modal.motion, gc_block.values.xyz, &plan_data, gc_state.position, plane, gc_block.values.l, &gc_state.canned);
 8011294:	f891 20b4 	ldrb.w	r2, [r1, #180]	@ 0xb4
 8011298:	f103 0434 	add.w	r4, r3, #52	@ 0x34
 801129c:	9402      	str	r4, [sp, #8]
 801129e:	9201      	str	r2, [sp, #4]
 80112a0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80112a2:	f8ad 2000 	strh.w	r2, [sp]
 80112a6:	0c12      	lsrs	r2, r2, #16
 80112a8:	f88d 2002 	strb.w	r2, [sp, #2]
 80112ac:	3368      	adds	r3, #104	@ 0x68
 80112ae:	aa14      	add	r2, sp, #80	@ 0x50
 80112b0:	3184      	adds	r1, #132	@ 0x84
 80112b2:	f003 fabf 	bl	8014834 <mc_canned_drill>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 80112b6:	9c05      	ldr	r4, [sp, #20]
                break;
 80112b8:	e000      	b.n	80112bc <gc_execute_block+0x3a40>
        switch(gc_state.modal.motion) {
 80112ba:	9c05      	ldr	r4, [sp, #20]
        if(sys.cancel)
 80112bc:	4b9c      	ldr	r3, [pc, #624]	@ (8011530 <gc_execute_block+0x3cb4>)
 80112be:	785b      	ldrb	r3, [r3, #1]
 80112c0:	b93b      	cbnz	r3, 80112d2 <gc_execute_block+0x3a56>
 80112c2:	46a2      	mov	sl, r4
 80112c4:	e005      	b.n	80112d2 <gc_execute_block+0x3a56>
        switch(gc_state.modal.motion) {
 80112c6:	9c05      	ldr	r4, [sp, #20]
 80112c8:	e7f8      	b.n	80112bc <gc_execute_block+0x3a40>
            output_command_t *next = plan_data.output_commands->next;
 80112ca:	6884      	ldr	r4, [r0, #8]
            free(plan_data.output_commands);
 80112cc:	f011 fc6e 	bl	8022bac <free>
            plan_data.output_commands = next;
 80112d0:	941d      	str	r4, [sp, #116]	@ 0x74
        while(plan_data.output_commands) {
 80112d2:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80112d4:	2800      	cmp	r0, #0
 80112d6:	d1f8      	bne.n	80112ca <gc_execute_block+0x3a4e>
        if (gc_update_pos == GCUpdatePos_Target)
 80112d8:	f1ba 0f00 	cmp.w	sl, #0
 80112dc:	d105      	bne.n	80112ea <gc_execute_block+0x3a6e>
            memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_state.position)); // gc_state.position[] = gc_block.values.xyz[]
 80112de:	4b98      	ldr	r3, [pc, #608]	@ (8011540 <gc_execute_block+0x3cc4>)
 80112e0:	4a95      	ldr	r2, [pc, #596]	@ (8011538 <gc_execute_block+0x3cbc>)
 80112e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80112e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80112e8:	e520      	b.n	8010d2c <gc_execute_block+0x34b0>
        else if (gc_update_pos == GCUpdatePos_System)
 80112ea:	f1ba 0f01 	cmp.w	sl, #1
 80112ee:	f47f ad1d 	bne.w	8010d2c <gc_execute_block+0x34b0>
            gc_sync_position(); // gc_state.position[] = sys.position
 80112f2:	4995      	ldr	r1, [pc, #596]	@ (8011548 <gc_execute_block+0x3ccc>)
 80112f4:	4892      	ldr	r0, [pc, #584]	@ (8011540 <gc_execute_block+0x3cc4>)
 80112f6:	f010 fd41 	bl	8021d7c <system_convert_array_steps_to_mpos>
 80112fa:	e517      	b.n	8010d2c <gc_execute_block+0x34b0>
            if(grbl.on_macro_return)
 80112fc:	4b93      	ldr	r3, [pc, #588]	@ (801154c <gc_execute_block+0x3cd0>)
 80112fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011302:	b17b      	cbz	r3, 8011324 <gc_execute_block+0x3aa8>
                grbl.on_macro_return();
 8011304:	4798      	blx	r3
 8011306:	e00d      	b.n	8011324 <gc_execute_block+0x3aa8>
            if(!check_mode) {
 8011308:	2d02      	cmp	r5, #2
 801130a:	d00b      	beq.n	8011324 <gc_execute_block+0x3aa8>
                if(gc_block.modal.program_flow == ProgramFlow_CompletedM60 && hal.pallet_shuttle)
 801130c:	4b89      	ldr	r3, [pc, #548]	@ (8011534 <gc_execute_block+0x3cb8>)
 801130e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011312:	2b3c      	cmp	r3, #60	@ 0x3c
 8011314:	d00c      	beq.n	8011330 <gc_execute_block+0x3ab4>
                system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 8011316:	4b8e      	ldr	r3, [pc, #568]	@ (8011550 <gc_execute_block+0x3cd4>)
 8011318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801131a:	2108      	movs	r1, #8
 801131c:	488d      	ldr	r0, [pc, #564]	@ (8011554 <gc_execute_block+0x3cd8>)
 801131e:	4798      	blx	r3
                protocol_execute_realtime(); // Execute suspend.
 8011320:	f006 faaa 	bl	8017878 <protocol_execute_realtime>
        gc_state.modal.program_flow = ProgramFlow_Running; // Reset program flow.
 8011324:	4b87      	ldr	r3, [pc, #540]	@ (8011544 <gc_execute_block+0x3cc8>)
 8011326:	2200      	movs	r2, #0
 8011328:	761a      	strb	r2, [r3, #24]
    return Status_OK;
 801132a:	9c05      	ldr	r4, [sp, #20]
 801132c:	f7fc bb83 	b.w	800da36 <gc_execute_block+0x1ba>
                if(gc_block.modal.program_flow == ProgramFlow_CompletedM60 && hal.pallet_shuttle)
 8011330:	4b87      	ldr	r3, [pc, #540]	@ (8011550 <gc_execute_block+0x3cd4>)
 8011332:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d0ed      	beq.n	8011316 <gc_execute_block+0x3a9a>
                    hal.pallet_shuttle();
 801133a:	4798      	blx	r3
 801133c:	e7eb      	b.n	8011316 <gc_execute_block+0x3a9a>
            if(!check_mode && gc_block.modal.program_flow == ProgramFlow_CompletedM30 && hal.pallet_shuttle)
 801133e:	4b84      	ldr	r3, [pc, #528]	@ (8011550 <gc_execute_block+0x3cd4>)
 8011340:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8011344:	2b00      	cmp	r3, #0
 8011346:	f43f ad1f 	beq.w	8010d88 <gc_execute_block+0x350c>
                hal.pallet_shuttle();
 801134a:	4798      	blx	r3
 801134c:	e51c      	b.n	8010d88 <gc_execute_block+0x350c>
                gc_state.modal.coord_system.id = CoordinateSystem_G54;
 801134e:	4b7d      	ldr	r3, [pc, #500]	@ (8011544 <gc_execute_block+0x3cc8>)
 8011350:	751a      	strb	r2, [r3, #20]
                system_add_rt_report(Report_GWCO);
 8011352:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8011356:	f010 fdb5 	bl	8021ec4 <system_add_rt_report>
 801135a:	e526      	b.n	8010daa <gc_execute_block+0x352e>
                if (!(settings_read_coord_data(gc_state.modal.coord_system.id, &gc_state.modal.coord_system.xyz)))
 801135c:	497e      	ldr	r1, [pc, #504]	@ (8011558 <gc_execute_block+0x3cdc>)
 801135e:	7b08      	ldrb	r0, [r1, #12]
 8011360:	f00c f998 	bl	801d694 <settings_read_coord_data>
 8011364:	b1d0      	cbz	r0, 801139c <gc_execute_block+0x3b20>
                if(settings_read_coord_data(CoordinateSystem_G92, &g92_offset_stored) && !isequal_position_vector(g92_offset_stored, gc_state.g92_coord_offset))
 8011366:	a911      	add	r1, sp, #68	@ 0x44
 8011368:	200b      	movs	r0, #11
 801136a:	f00c f993 	bl	801d694 <settings_read_coord_data>
 801136e:	b128      	cbz	r0, 801137c <gc_execute_block+0x3b00>
 8011370:	220c      	movs	r2, #12
 8011372:	497a      	ldr	r1, [pc, #488]	@ (801155c <gc_execute_block+0x3ce0>)
 8011374:	a811      	add	r0, sp, #68	@ 0x44
 8011376:	f013 fcb0 	bl	8024cda <memcmp>
 801137a:	b990      	cbnz	r0, 80113a2 <gc_execute_block+0x3b26>
                system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 801137c:	f010 fe2e 	bl	8021fdc <system_flag_wco_change>
                spindle_all_off();
 8011380:	f00d fb5e 	bl	801ea40 <spindle_all_off>
                hal.coolant.set_state(gc_state.modal.coolant);
 8011384:	4b72      	ldr	r3, [pc, #456]	@ (8011550 <gc_execute_block+0x3cd4>)
 8011386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011388:	4a6e      	ldr	r2, [pc, #440]	@ (8011544 <gc_execute_block+0x3cc8>)
 801138a:	7e50      	ldrb	r0, [r2, #25]
 801138c:	4798      	blx	r3
                system_add_rt_report(Report_Spindle); // Set to report change
 801138e:	2010      	movs	r0, #16
 8011390:	f010 fd98 	bl	8021ec4 <system_add_rt_report>
                system_add_rt_report(Report_Coolant); // immediately.
 8011394:	2020      	movs	r0, #32
 8011396:	f010 fd95 	bl	8021ec4 <system_add_rt_report>
 801139a:	e546      	b.n	8010e2a <gc_execute_block+0x35ae>
                    FAIL(Status_SettingReadFail);
 801139c:	2407      	movs	r4, #7
 801139e:	f7fc bb4a 	b.w	800da36 <gc_execute_block+0x1ba>
                    settings_write_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Save G92 offsets to non-volatile storage
 80113a2:	496e      	ldr	r1, [pc, #440]	@ (801155c <gc_execute_block+0x3ce0>)
 80113a4:	200b      	movs	r0, #11
 80113a6:	f00c f951 	bl	801d64c <settings_write_coord_data>
 80113aa:	e7e7      	b.n	801137c <gc_execute_block+0x3b00>
                output_command_t *next = output_commands->next;
 80113ac:	6884      	ldr	r4, [r0, #8]
                free(output_commands);
 80113ae:	f011 fbfd 	bl	8022bac <free>
                output_commands = next;
 80113b2:	4b6b      	ldr	r3, [pc, #428]	@ (8011560 <gc_execute_block+0x3ce4>)
 80113b4:	601c      	str	r4, [r3, #0]
            while(output_commands) {
 80113b6:	4b6a      	ldr	r3, [pc, #424]	@ (8011560 <gc_execute_block+0x3ce4>)
 80113b8:	6818      	ldr	r0, [r3, #0]
 80113ba:	2800      	cmp	r0, #0
 80113bc:	d1f6      	bne.n	80113ac <gc_execute_block+0x3b30>
            ngc_modal_state_invalidate();
 80113be:	f004 f8c9 	bl	8015554 <ngc_modal_state_invalidate>
            grbl.report.feedback_message(Message_ProgramEnd);
 80113c2:	4b62      	ldr	r3, [pc, #392]	@ (801154c <gc_execute_block+0x3cd0>)
 80113c4:	68db      	ldr	r3, [r3, #12]
 80113c6:	2008      	movs	r0, #8
 80113c8:	4798      	blx	r3
 80113ca:	e7ab      	b.n	8011324 <gc_execute_block+0x3aa8>
            FAIL(Status_ExpectedCommandLetter); // [Expected word letter]
 80113cc:	2401      	movs	r4, #1
 80113ce:	f7fc bb32 	b.w	800da36 <gc_execute_block+0x1ba>
                FAIL(Status_BadNumberFormat);   // [Expected word value]
 80113d2:	2402      	movs	r4, #2
 80113d4:	f7fc bb2f 	b.w	800da36 <gc_execute_block+0x1ba>
 80113d8:	2414      	movs	r4, #20
 80113da:	f7fc bb2c 	b.w	800da36 <gc_execute_block+0x1ba>
 80113de:	2414      	movs	r4, #20
 80113e0:	f7fc bb29 	b.w	800da36 <gc_execute_block+0x1ba>
 80113e4:	2414      	movs	r4, #20
 80113e6:	f7fc bb26 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [G7 & G8 not supported]
 80113ea:	2414      	movs	r4, #20
 80113ec:	f7fc bb23 	b.w	800da36 <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 80113f0:	2418      	movs	r4, #24
 80113f2:	f7fc bb20 	b.w	800da36 <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeUnsupportedCommand);
 80113f6:	2414      	movs	r4, #20
 80113f8:	f7fc bb1d 	b.w	800da36 <gc_execute_block+0x1ba>
                        } else if (int_value == 92) {
 80113fc:	2414      	movs	r4, #20
 80113fe:	f7fc bb1a 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [G33.1 not yet supported]
 8011402:	2414      	movs	r4, #20
 8011404:	f7fc bb17 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 8011408:	2418      	movs	r4, #24
 801140a:	f7fc bb14 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [probing not supported by driver or unsupported G38.x command]
 801140e:	2414      	movs	r4, #20
 8011410:	f7fc bb11 	b.w	800da36 <gc_execute_block+0x1ba>
                        if(!(hal.probe.get_state && ((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))))
 8011414:	2414      	movs	r4, #20
 8011416:	f7fc bb0e 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 801141a:	2418      	movs	r4, #24
 801141c:	f7fc bb0b 	b.w	800da36 <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeUnsupportedCommand);
 8011420:	2414      	movs	r4, #20
 8011422:	f7fc bb08 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 8011426:	2418      	movs	r4, #24
 8011428:	f7fc bb05 	b.w	800da36 <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeUnsupportedCommand); // [G90.1 not supported]
 801142c:	2414      	movs	r4, #20
 801142e:	f7fc bb02 	b.w	800da36 <gc_execute_block+0x1ba>
 8011432:	2414      	movs	r4, #20
 8011434:	f7fc baff 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported G43.x command]
 8011438:	2414      	movs	r4, #20
 801143a:	f7fc bafc 	b.w	800da36 <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict] }
 801143e:	2418      	movs	r4, #24
 8011440:	f7fc baf9 	b.w	800da36 <gc_execute_block+0x1ba>
                        if(int_value == 59 && mantissa > 0) {
 8011444:	2414      	movs	r4, #20
 8011446:	f7fc baf6 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand);
 801144a:	2414      	movs	r4, #20
 801144c:	f7fc baf3 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand);
 8011450:	2414      	movs	r4, #20
 8011452:	f7fc baf0 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeCommandValueNotInteger); // [Unsupported or invalid Gxx.x command]
 8011456:	2417      	movs	r4, #23
 8011458:	f7fc baed 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeModalGroupViolation);
 801145c:	2415      	movs	r4, #21
 801145e:	f7fc baea 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeWordRepeated); // [Word repeated]
 8011462:	2419      	movs	r4, #25
 8011464:	f7fc bae7 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeCommandValueNotInteger); // [No Mxx.x commands]
 8011468:	2417      	movs	r4, #23
 801146a:	f7fc bae4 	b.w	800da36 <gc_execute_block+0x1ba>
                                    FAIL(Status_GcodeUnsupportedCommand);
 801146e:	2414      	movs	r4, #20
 8011470:	f7fc bae1 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 8011474:	2414      	movs	r4, #20
 8011476:	f7fc bade 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 801147a:	2414      	movs	r4, #20
 801147c:	f7fc badb 	b.w	800da36 <gc_execute_block+0x1ba>
 8011480:	2414      	movs	r4, #20
 8011482:	f7fc bad8 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 8011486:	2414      	movs	r4, #20
 8011488:	f7fc bad5 	b.w	800da36 <gc_execute_block+0x1ba>
 801148c:	2414      	movs	r4, #20
 801148e:	f7fc bad2 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 8011492:	2414      	movs	r4, #20
 8011494:	f7fc bacf 	b.w	800da36 <gc_execute_block+0x1ba>
 8011498:	2414      	movs	r4, #20
 801149a:	f7fc bacc 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand);
 801149e:	2414      	movs	r4, #20
 80114a0:	f7fc bac9 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeModalGroupViolation);
 80114a4:	2415      	movs	r4, #21
 80114a6:	f7fc bac6 	b.w	800da36 <gc_execute_block+0x1ba>
 80114aa:	2414      	movs	r4, #20
 80114ac:	f7fc bac3 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 80114b0:	2417      	movs	r4, #23
 80114b2:	f7fc bac0 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 80114b6:	2417      	movs	r4, #23
 80114b8:	f7fc babd 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 80114bc:	2417      	movs	r4, #23
 80114be:	f7fc baba 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 80114c2:	2417      	movs	r4, #23
 80114c4:	f7fc bab7 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeIllegalToolTableEntry);
 80114c8:	2426      	movs	r4, #38	@ 0x26
 80114ca:	f7fc bab4 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 80114ce:	2417      	movs	r4, #23
 80114d0:	f7fc bab1 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeWordRepeated); // [Word repeated]
 80114d4:	2419      	movs	r4, #25
 80114d6:	f7fc baae 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_NegativeValue); // [Word value cannot be negative]
 80114da:	2404      	movs	r4, #4
 80114dc:	f7fc baab 	b.w	800da36 <gc_execute_block+0x1ba>
        FAIL(Status_GcodeInvalidLineNumber); // [Exceeds max line number]
 80114e0:	241b      	movs	r4, #27
 80114e2:	f7fc baa8 	b.w	800da36 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeUndefinedFeedRate);
 80114e6:	2416      	movs	r4, #22
 80114e8:	f7fc baa5 	b.w	800da36 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeValueOutOfRange);
 80114ec:	2427      	movs	r4, #39	@ 0x27
 80114ee:	f7fc baa2 	b.w	800da36 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeUnsupportedCommand);
 80114f2:	2414      	movs	r4, #20
 80114f4:	f7fc ba9f 	b.w	800da36 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeValueWordMissing);
 80114f8:	241c      	movs	r4, #28
 80114fa:	f7fc ba9c 	b.w	800da36 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeValueWordMissing);
 80114fe:	241c      	movs	r4, #28
 8011500:	f7fc ba99 	b.w	800da36 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeCommandValueNotInteger);
 8011504:	2417      	movs	r4, #23
 8011506:	f7fc ba96 	b.w	800da36 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeIllegalToolTableEntry);
 801150a:	2426      	movs	r4, #38	@ 0x26
 801150c:	f7fc ba93 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueWordMissing);
 8011510:	241c      	movs	r4, #28
 8011512:	f7fc ba90 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_NegativeValue);
 8011516:	2404      	movs	r4, #4
 8011518:	f7fc ba8d 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 801151c:	2427      	movs	r4, #39	@ 0x27
 801151e:	f7fc ba8a 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueWordMissing);
 8011522:	241c      	movs	r4, #28
 8011524:	f7fc ba87 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_ValueWordConflict);
 8011528:	2430      	movs	r4, #48	@ 0x30
 801152a:	f7fc ba84 	b.w	800da36 <gc_execute_block+0x1ba>
 801152e:	bf00      	nop
 8011530:	20001d70 	.word	0x20001d70
 8011534:	200016c0 	.word	0x200016c0
 8011538:	20001744 	.word	0x20001744
 801153c:	20001798 	.word	0x20001798
 8011540:	20001830 	.word	0x20001830
 8011544:	200017c8 	.word	0x200017c8
 8011548:	20001df8 	.word	0x20001df8
 801154c:	20001c78 	.word	0x20001c78
 8011550:	20001a90 	.word	0x20001a90
 8011554:	20001db8 	.word	0x20001db8
 8011558:	200017d0 	.word	0x200017d0
 801155c:	20001880 	.word	0x20001880
 8011560:	20001794 	.word	0x20001794
                    FAIL(Status_GcodeValueOutOfRange);
 8011564:	2427      	movs	r4, #39	@ 0x27
 8011566:	f7fc ba66 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 801156a:	2427      	movs	r4, #39	@ 0x27
 801156c:	f7fc ba63 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_NegativeValue);
 8011570:	2404      	movs	r4, #4
 8011572:	f7fc ba60 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange);
 8011576:	2427      	movs	r4, #39	@ 0x27
 8011578:	f7fc ba5d 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange);
 801157c:	2427      	movs	r4, #39	@ 0x27
 801157e:	f7fc ba5a 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange);
 8011582:	2427      	movs	r4, #39	@ 0x27
 8011584:	f7fc ba57 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueWordMissing);
 8011588:	241c      	movs	r4, #28
 801158a:	f7fc ba54 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeRPMOutOfRange);
 801158e:	242c      	movs	r4, #44	@ 0x2c
 8011590:	f7fc ba51 	b.w	800da36 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeUnsupportedCommand);
 8011594:	2414      	movs	r4, #20
 8011596:	f7fc ba4e 	b.w	800da36 <gc_execute_block+0x1ba>
                FAIL(Status_NegativeValue);
 801159a:	2404      	movs	r4, #4
 801159c:	f7fc ba4b 	b.w	800da36 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeValueWordMissing); // [P word missing]
 80115a0:	241c      	movs	r4, #28
 80115a2:	f7fc ba48 	b.w	800da36 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeNoAxisWords); // [No axis words]
 80115a6:	241a      	movs	r4, #26
 80115a8:	f7fc ba45 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnsupportedCommand);
 80115ac:	2414      	movs	r4, #20
 80115ae:	f7fc ba42 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeIllegalToolTableEntry);
 80115b2:	2426      	movs	r4, #38	@ 0x26
 80115b4:	f7fc ba3f 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnsupportedCommand);
 80115b8:	2414      	movs	r4, #20
 80115ba:	f7fc ba3c 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing);
 80115be:	241c      	movs	r4, #28
 80115c0:	f7fc ba39 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeIllegalToolTableEntry);
 80115c4:	2426      	movs	r4, #38	@ 0x26
 80115c6:	f7fc ba36 	b.w	800da36 <gc_execute_block+0x1ba>
 80115ca:	2426      	movs	r4, #38	@ 0x26
 80115cc:	f7fc ba33 	b.w	800da36 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeNoAxisWords); // [No axis words (or R word for tool offsets)]
 80115d0:	241a      	movs	r4, #26
 80115d2:	f7fc ba30 	b.w	800da36 <gc_execute_block+0x1ba>
 80115d6:	241a      	movs	r4, #26
 80115d8:	f7fc ba2d 	b.w	800da36 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeValueWordMissing); // [P/L word missing]
 80115dc:	241c      	movs	r4, #28
 80115de:	f7fc ba2a 	b.w	800da36 <gc_execute_block+0x1ba>
                FAIL(Status_NegativeValue);
 80115e2:	2404      	movs	r4, #4
 80115e4:	f7fc ba27 	b.w	800da36 <gc_execute_block+0x1ba>
 80115e8:	2414      	movs	r4, #20
 80115ea:	f7fc ba24 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeUnsupportedCommand); // [G10 L2 R not supported]
 80115ee:	2414      	movs	r4, #20
 80115f0:	f7fc ba21 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeUnsupportedCoordSys); // [Greater than N sys]
 80115f4:	241d      	movs	r4, #29
 80115f6:	f7fc ba1e 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_SettingReadFail); // [non-volatile storage read fail]
 80115fa:	2407      	movs	r4, #7
 80115fc:	f7fc ba1b 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GCodeCoordSystemLocked);
 8011600:	2438      	movs	r4, #56	@ 0x38
 8011602:	f7fc ba18 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeUnsupportedCommand);
 8011606:	2414      	movs	r4, #20
 8011608:	f7fc ba15 	b.w	800da36 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeNoAxisWords); // [No axis words]
 801160c:	241a      	movs	r4, #26
 801160e:	f7fc ba12 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_SettingReadFail);
 8011612:	2407      	movs	r4, #7
 8011614:	f7fc ba0f 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing); // [P word missing]
 8011618:	241c      	movs	r4, #28
 801161a:	f7fc ba0c 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange); // [P word out of range]
 801161e:	2427      	movs	r4, #39	@ 0x27
 8011620:	f7fc ba09 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_FlowControlStackOverflow); // [Call level too deep]
 8011624:	2452      	movs	r4, #82	@ 0x52
 8011626:	f7fc ba06 	b.w	800da36 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeAxisWordsExist);
 801162a:	241f      	movs	r4, #31
 801162c:	f7fc ba03 	b.w	800da36 <gc_execute_block+0x1ba>
                 FAIL(Status_GcodeSpindleNotRunning);
 8011630:	2429      	movs	r4, #41	@ 0x29
 8011632:	f7fc ba00 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnsupportedCommand); // [G33, G33.1]
 8011636:	2414      	movs	r4, #20
 8011638:	f7fc b9fd 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange); // [No distance (pitch) given]
 801163c:	2427      	movs	r4, #39	@ 0x27
 801163e:	f7fc b9fa 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnsupportedCommand); // [G76 not supported]
 8011642:	2414      	movs	r4, #20
 8011644:	f7fc b9f7 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeIllegalPlane); // [Plane not ZX]
 8011648:	242a      	movs	r4, #42	@ 0x2a
 801164a:	f7fc b9f4 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnusedWords); // [Only X and Z axis words allowed]
 801164e:	2424      	movs	r4, #36	@ 0x24
 8011650:	f7fc b9f1 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 8011654:	2427      	movs	r4, #39	@ 0x27
 8011656:	f7fc b9ee 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueWordMissing);
 801165a:	241c      	movs	r4, #28
 801165c:	f7fc b9eb 	b.w	800da36 <gc_execute_block+0x1ba>
 8011660:	241c      	movs	r4, #28
 8011662:	f7fc b9e8 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_NegativeValue);
 8011666:	2404      	movs	r4, #4
 8011668:	f7fc b9e5 	b.w	800da36 <gc_execute_block+0x1ba>
 801166c:	2404      	movs	r4, #4
 801166e:	f7fc b9e2 	b.w	800da36 <gc_execute_block+0x1ba>
 8011672:	2404      	movs	r4, #4
 8011674:	f7fc b9df 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 8011678:	2427      	movs	r4, #39	@ 0x27
 801167a:	f7fc b9dc 	b.w	800da36 <gc_execute_block+0x1ba>
 801167e:	2427      	movs	r4, #39	@ 0x27
 8011680:	f7fc b9d9 	b.w	800da36 <gc_execute_block+0x1ba>
 8011684:	2427      	movs	r4, #39	@ 0x27
 8011686:	f7fc b9d6 	b.w	800da36 <gc_execute_block+0x1ba>
 801168a:	2427      	movs	r4, #39	@ 0x27
 801168c:	f7fc b9d3 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeRPMOutOfRange);
 8011690:	242c      	movs	r4, #44	@ 0x2c
 8011692:	f7fc b9d0 	b.w	800da36 <gc_execute_block+0x1ba>
 8011696:	242c      	movs	r4, #44	@ 0x2c
 8011698:	f7fc b9cd 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 801169c:	2427      	movs	r4, #39	@ 0x27
 801169e:	f7fc b9ca 	b.w	800da36 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeUndefinedFeedRate); // [Feed rate undefined]
 80116a2:	2416      	movs	r4, #22
 80116a4:	f7fc b9c7 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_InvalidStatement);
 80116a8:	2403      	movs	r4, #3
 80116aa:	f7fc b9c4 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing);
 80116ae:	241c      	movs	r4, #28
 80116b0:	f7fc b9c1 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing);
 80116b4:	241c      	movs	r4, #28
 80116b6:	f7fc b9be 	b.w	800da36 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeInvalidRetractPosition);
 80116ba:	2436      	movs	r4, #54	@ 0x36
 80116bc:	f7fc b9bb 	b.w	800da36 <gc_execute_block+0x1ba>
                                FAIL(Status_NegativeValue);
 80116c0:	2404      	movs	r4, #4
 80116c2:	f7fc b9b8 	b.w	800da36 <gc_execute_block+0x1ba>
                                FAIL(Status_NegativeValue); // [Q <= 0]
 80116c6:	2404      	movs	r4, #4
 80116c8:	f7fc b9b5 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeNoAxisWords); // [No axis words]
 80116cc:	241a      	movs	r4, #26
 80116ce:	f7fc b9b2 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeNoAxisWordsInPlane); // [No axis words in plane]
 80116d2:	2420      	movs	r4, #32
 80116d4:	f7fc b9af 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger); // [P word is not an integer]
 80116d8:	2417      	movs	r4, #23
 80116da:	f7fc b9ac 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeValueOutOfRange); // [P word is 0]
 80116de:	2427      	movs	r4, #39	@ 0x27
 80116e0:	f7fc b9a9 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeInvalidTarget); // [Invalid target]
 80116e4:	2421      	movs	r4, #33	@ 0x21
 80116e6:	f7fc b9a6 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeArcRadiusError); // [Arc radius error] TODO: this will fail due to limited float precision...
 80116ea:	2422      	movs	r4, #34	@ 0x22
 80116ec:	f7fc b9a3 	b.w	800da36 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeNoOffsetsInPlane);// [No offsets in plane]
 80116f0:	2423      	movs	r4, #35	@ 0x23
 80116f2:	f7fc b9a0 	b.w	800da36 <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeInvalidTarget); // [Arc definition error] > 0.5mm
 80116f6:	2421      	movs	r4, #33	@ 0x21
 80116f8:	f7fc b99d 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeIllegalPlane); // [The active plane is not G17]
 80116fc:	242a      	movs	r4, #42	@ 0x2a
 80116fe:	f7fc b99a 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeAxisCommandConflict); // [An axis other than X or Y is specified]
 8011702:	2418      	movs	r4, #24
 8011704:	f7fc b997 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing); // [P and Q are not both specified]
 8011708:	241c      	movs	r4, #28
 801170a:	f7fc b994 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing); // [I or J are unspecified in the first of a series of G5 commands]
 801170e:	241c      	movs	r4, #28
 8011710:	f7fc b991 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeIllegalPlane); // [The active plane is not G17]
 8011714:	242a      	movs	r4, #42	@ 0x2a
 8011716:	f7fc b98e 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeAxisCommandConflict); // [An axis other than X or Y is specified]
 801171a:	2418      	movs	r4, #24
 801171c:	f7fc b98b 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing); // [I or J are unspecified]
 8011720:	241c      	movs	r4, #28
 8011722:	f7fc b988 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange); // [I or J are zero]
 8011726:	2427      	movs	r4, #39	@ 0x27
 8011728:	f7fc b985 	b.w	800da36 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeNoAxisWords); // [No axis words]
 801172c:	241a      	movs	r4, #26
 801172e:	f7fc b982 	b.w	800da36 <gc_execute_block+0x1ba>
        FAIL(Status_GcodeUnusedWords); // [Unused words]
 8011732:	2424      	movs	r4, #36	@ 0x24
 8011734:	f7fc b97f 	b.w	800da36 <gc_execute_block+0x1ba>
            FAIL(Status_InvalidJogCommand);
 8011738:	2410      	movs	r4, #16
 801173a:	f7fc b97c 	b.w	800da36 <gc_execute_block+0x1ba>
            FAIL(Status_InvalidJogCommand);
 801173e:	2410      	movs	r4, #16
 8011740:	f7fc b979 	b.w	800da36 <gc_execute_block+0x1ba>

08011744 <dummy_bool_handler>:
#endif

void dummy_bool_handler (bool arg)
{
    // NOOP
}
 8011744:	4770      	bx	lr

08011746 <dummy_irq_claim>:
}

static bool dummy_irq_claim (irq_type_t irq, uint_fast8_t id, irq_callback_ptr callback)
{
    return false;
}
 8011746:	2000      	movs	r0, #0
 8011748:	4770      	bx	lr
	...

0801174c <get_homing_status>:
        task_add_delayed(realtime_report_check, NULL, settings.report_interval);
}

// "Wire" homing signals to limit signals, used when max limit inputs not available.
ISR_CODE static home_signals_t ISR_FUNC(get_homing_status)(void)
{
 801174c:	b500      	push	{lr}
 801174e:	b085      	sub	sp, #20
    home_signals_t home;
    limit_signals_t limits = hal.limits.get_state();
 8011750:	4b0d      	ldr	r3, [pc, #52]	@ (8011788 <get_homing_status+0x3c>)
 8011752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011754:	4798      	blx	r3
 8011756:	9001      	str	r0, [sp, #4]

    home.a.value = limits.min.value;
 8011758:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801175c:	f88d 3008 	strb.w	r3, [sp, #8]
    home.b.value = limits.min2.value;
 8011760:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011764:	f88d 3009 	strb.w	r3, [sp, #9]

    return home;
 8011768:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801176c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011770:	2000      	movs	r0, #0
 8011772:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011776:	f363 0007 	bfi	r0, r3, #0, #8
 801177a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801177e:	f363 200f 	bfi	r0, r3, #8, #8
}
 8011782:	b005      	add	sp, #20
 8011784:	f85d fb04 	ldr.w	pc, [sp], #4
 8011788:	20001a90 	.word	0x20001a90

0801178c <task_alloc>:
static inline core_task_t *task_alloc (void)
{
    core_task_t *task = NULL;
    uint_fast8_t idx = CORE_TASK_POOL_SIZE;

    if(last_freed) {
 801178c:	4b09      	ldr	r3, [pc, #36]	@ (80117b4 <task_alloc+0x28>)
 801178e:	6818      	ldr	r0, [r3, #0]
 8011790:	b110      	cbz	r0, 8011798 <task_alloc+0xc>
        task = last_freed;
        last_freed = NULL;
 8011792:	2200      	movs	r2, #0
 8011794:	601a      	str	r2, [r3, #0]
 8011796:	4770      	bx	lr
    uint_fast8_t idx = CORE_TASK_POOL_SIZE;
 8011798:	231e      	movs	r3, #30
    } else do {
        if(task_pool[--idx].fn == NULL)
 801179a:	3b01      	subs	r3, #1
 801179c:	4a06      	ldr	r2, [pc, #24]	@ (80117b8 <task_alloc+0x2c>)
 801179e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80117a2:	6852      	ldr	r2, [r2, #4]
 80117a4:	b112      	cbz	r2, 80117ac <task_alloc+0x20>
            task = &task_pool[idx];
    } while(task == NULL && idx);
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d1f7      	bne.n	801179a <task_alloc+0xe>

    return task;
}
 80117aa:	4770      	bx	lr
            task = &task_pool[idx];
 80117ac:	4802      	ldr	r0, [pc, #8]	@ (80117b8 <task_alloc+0x2c>)
 80117ae:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    } while(task == NULL && idx);
 80117b2:	4770      	bx	lr
 80117b4:	200018a0 	.word	0x200018a0
 80117b8:	200018b0 	.word	0x200018b0

080117bc <task_execute>:
    if(last_freed == NULL)
        last_freed = task;
}

static void task_execute (sys_state_t state)
{
 80117bc:	b538      	push	{r3, r4, r5, lr}
    static uint32_t last_ms = 0;

    core_task_t *task;

    if(immediate_task && sys.driver_started) {
 80117be:	4b27      	ldr	r3, [pc, #156]	@ (801185c <task_execute+0xa0>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	b1db      	cbz	r3, 80117fc <task_execute+0x40>
 80117c4:	4b26      	ldr	r3, [pc, #152]	@ (8011860 <task_execute+0xa4>)
 80117c6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80117ca:	b1bb      	cbz	r3, 80117fc <task_execute+0x40>

        hal.irq_disable();
 80117cc:	4d25      	ldr	r5, [pc, #148]	@ (8011864 <task_execute+0xa8>)
 80117ce:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80117d0:	4798      	blx	r3
        task = immediate_task;
 80117d2:	4b22      	ldr	r3, [pc, #136]	@ (801185c <task_execute+0xa0>)
 80117d4:	681c      	ldr	r4, [r3, #0]
        immediate_task = NULL;
 80117d6:	2200      	movs	r2, #0
 80117d8:	601a      	str	r2, [r3, #0]
        hal.irq_enable();
 80117da:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80117dc:	4798      	blx	r3
 80117de:	e002      	b.n	80117e6 <task_execute+0x2a>

        do {
            void *data = task->data;
            foreground_task_ptr fn = task->fn;
            task_free(task);
            fn(data);
 80117e0:	4798      	blx	r3
        } while((task = task->next));
 80117e2:	68e4      	ldr	r4, [r4, #12]
 80117e4:	b154      	cbz	r4, 80117fc <task_execute+0x40>
            void *data = task->data;
 80117e6:	68a0      	ldr	r0, [r4, #8]
            foreground_task_ptr fn = task->fn;
 80117e8:	6863      	ldr	r3, [r4, #4]
    task->fn = NULL;
 80117ea:	2200      	movs	r2, #0
 80117ec:	6062      	str	r2, [r4, #4]
    if(last_freed == NULL)
 80117ee:	4a1e      	ldr	r2, [pc, #120]	@ (8011868 <task_execute+0xac>)
 80117f0:	6812      	ldr	r2, [r2, #0]
 80117f2:	2a00      	cmp	r2, #0
 80117f4:	d1f4      	bne.n	80117e0 <task_execute+0x24>
        last_freed = task;
 80117f6:	4a1c      	ldr	r2, [pc, #112]	@ (8011868 <task_execute+0xac>)
 80117f8:	6014      	str	r4, [r2, #0]
 80117fa:	e7f1      	b.n	80117e0 <task_execute+0x24>
    }

    uint32_t now = hal.get_elapsed_ticks();
 80117fc:	4b19      	ldr	r3, [pc, #100]	@ (8011864 <task_execute+0xa8>)
 80117fe:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8011802:	4798      	blx	r3
 8011804:	4605      	mov	r5, r0
    if(now == last_ms || next_task == systick_task)
 8011806:	4b19      	ldr	r3, [pc, #100]	@ (801186c <task_execute+0xb0>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	4283      	cmp	r3, r0
 801180c:	d025      	beq.n	801185a <task_execute+0x9e>
 801180e:	4b18      	ldr	r3, [pc, #96]	@ (8011870 <task_execute+0xb4>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	4a18      	ldr	r2, [pc, #96]	@ (8011874 <task_execute+0xb8>)
 8011814:	6814      	ldr	r4, [r2, #0]
 8011816:	42a3      	cmp	r3, r4
 8011818:	d01f      	beq.n	801185a <task_execute+0x9e>
        return;

    last_ms = now;
 801181a:	4b14      	ldr	r3, [pc, #80]	@ (801186c <task_execute+0xb0>)
 801181c:	6018      	str	r0, [r3, #0]

    if((task = systick_task)) do {
 801181e:	b154      	cbz	r4, 8011836 <task_execute+0x7a>
        task->fn(task->data);
 8011820:	6863      	ldr	r3, [r4, #4]
 8011822:	68a0      	ldr	r0, [r4, #8]
 8011824:	4798      	blx	r3
    } while((task = task->next));
 8011826:	68e4      	ldr	r4, [r4, #12]
 8011828:	2c00      	cmp	r4, #0
 801182a:	d1f9      	bne.n	8011820 <task_execute+0x64>
 801182c:	e003      	b.n	8011836 <task_execute+0x7a>
    while(next_task && (int32_t)(next_task->time - now) <= 0) {

        void *data = next_task->data;
        foreground_task_ptr fn = next_task->fn;
        task_free(next_task);
        next_task = next_task->next;
 801182e:	68d9      	ldr	r1, [r3, #12]
 8011830:	4b0f      	ldr	r3, [pc, #60]	@ (8011870 <task_execute+0xb4>)
 8011832:	6019      	str	r1, [r3, #0]

        fn(data);
 8011834:	4790      	blx	r2
    while(next_task && (int32_t)(next_task->time - now) <= 0) {
 8011836:	4b0e      	ldr	r3, [pc, #56]	@ (8011870 <task_execute+0xb4>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	b173      	cbz	r3, 801185a <task_execute+0x9e>
 801183c:	681a      	ldr	r2, [r3, #0]
 801183e:	1b52      	subs	r2, r2, r5
 8011840:	2a00      	cmp	r2, #0
 8011842:	dc0a      	bgt.n	801185a <task_execute+0x9e>
        void *data = next_task->data;
 8011844:	6898      	ldr	r0, [r3, #8]
        foreground_task_ptr fn = next_task->fn;
 8011846:	685a      	ldr	r2, [r3, #4]
    task->fn = NULL;
 8011848:	2100      	movs	r1, #0
 801184a:	6059      	str	r1, [r3, #4]
    if(last_freed == NULL)
 801184c:	4906      	ldr	r1, [pc, #24]	@ (8011868 <task_execute+0xac>)
 801184e:	6809      	ldr	r1, [r1, #0]
 8011850:	2900      	cmp	r1, #0
 8011852:	d1ec      	bne.n	801182e <task_execute+0x72>
        last_freed = task;
 8011854:	4904      	ldr	r1, [pc, #16]	@ (8011868 <task_execute+0xac>)
 8011856:	600b      	str	r3, [r1, #0]
 8011858:	e7e9      	b.n	801182e <task_execute+0x72>
    }
}
 801185a:	bd38      	pop	{r3, r4, r5, pc}
 801185c:	200018a8 	.word	0x200018a8
 8011860:	20001d70 	.word	0x20001d70
 8011864:	20001a90 	.word	0x20001a90
 8011868:	200018a0 	.word	0x200018a0
 801186c:	2000189c 	.word	0x2000189c
 8011870:	200018ac 	.word	0x200018ac
 8011874:	200018a4 	.word	0x200018a4

08011878 <reset_handler>:
{
 8011878:	b508      	push	{r3, lr}
    report_init_fns();
 801187a:	f00a fbb1 	bl	801bfe0 <report_init_fns>
    grbl.on_macro_return = NULL;
 801187e:	4b02      	ldr	r3, [pc, #8]	@ (8011888 <reset_handler+0x10>)
 8011880:	2200      	movs	r2, #0
 8011882:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
}
 8011886:	bd08      	pop	{r3, pc}
 8011888:	20001c78 	.word	0x20001c78

0801188c <get_homing_status2>:
{
 801188c:	b500      	push	{lr}
 801188e:	b085      	sub	sp, #20
    limit_signals_t source = xbar_get_homing_source(), limits = hal.limits.get_state();
 8011890:	f7fb fbc4 	bl	800d01c <xbar_get_homing_source>
 8011894:	9001      	str	r0, [sp, #4]
 8011896:	4b17      	ldr	r3, [pc, #92]	@ (80118f4 <get_homing_status2+0x68>)
 8011898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801189a:	4798      	blx	r3
 801189c:	9000      	str	r0, [sp, #0]
    home.a.value = (limits.min.value & source.min.mask) | (limits.max.value & source.max.mask);
 801189e:	f89d 3000 	ldrb.w	r3, [sp]
 80118a2:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80118a6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80118aa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80118ae:	4003      	ands	r3, r0
 80118b0:	400a      	ands	r2, r1
 80118b2:	4313      	orrs	r3, r2
 80118b4:	f88d 3008 	strb.w	r3, [sp, #8]
    home.b.value = (limits.min2.value & source.min2.mask) | (limits.max2.value & source.max2.mask);
 80118b8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80118bc:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80118c0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80118c4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80118c8:	4003      	ands	r3, r0
 80118ca:	400a      	ands	r2, r1
 80118cc:	4313      	orrs	r3, r2
 80118ce:	f88d 3009 	strb.w	r3, [sp, #9]
    return home;
 80118d2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80118d6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80118da:	2000      	movs	r0, #0
 80118dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80118e0:	f363 0007 	bfi	r0, r3, #0, #8
 80118e4:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80118e8:	f363 200f 	bfi	r0, r3, #8, #8
}
 80118ec:	b005      	add	sp, #20
 80118ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80118f2:	bf00      	nop
 80118f4:	20001a90 	.word	0x20001a90

080118f8 <report_driver_error>:
{
 80118f8:	b510      	push	{r4, lr}
 80118fa:	b08a      	sub	sp, #40	@ 0x28
    driver.ok = ~driver.ok;
 80118fc:	4b13      	ldr	r3, [pc, #76]	@ (801194c <report_driver_error+0x54>)
 80118fe:	f893 e000 	ldrb.w	lr, [r3]
 8011902:	ea6f 0e0e 	mvn.w	lr, lr
 8011906:	fa5f fe8e 	uxtb.w	lr, lr
 801190a:	f883 e000 	strb.w	lr, [r3]
    strcpy(msg, "Fatal: Incompatible driver (");
 801190e:	46ec      	mov	ip, sp
 8011910:	4c0f      	ldr	r4, [pc, #60]	@ (8011950 <report_driver_error+0x58>)
 8011912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011914:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011918:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801191c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8011920:	f88c 3000 	strb.w	r3, [ip]
    strcat(msg, uitoa(driver.ok));
 8011924:	4670      	mov	r0, lr
 8011926:	f004 f84b 	bl	80159c0 <uitoa>
 801192a:	4601      	mov	r1, r0
 801192c:	4668      	mov	r0, sp
 801192e:	f013 fa06 	bl	8024d3e <strcat>
    strcat(msg, ")");
 8011932:	4668      	mov	r0, sp
 8011934:	f7f6 fbe4 	bl	8008100 <strlen>
 8011938:	4b06      	ldr	r3, [pc, #24]	@ (8011954 <report_driver_error+0x5c>)
 801193a:	881b      	ldrh	r3, [r3, #0]
 801193c:	f82d 3000 	strh.w	r3, [sp, r0]
    report_message(msg, Message_Plain);
 8011940:	2100      	movs	r1, #0
 8011942:	4668      	mov	r0, sp
 8011944:	f007 fef8 	bl	8019738 <report_message>
}
 8011948:	b00a      	add	sp, #40	@ 0x28
 801194a:	bd10      	pop	{r4, pc}
 801194c:	200001d8 	.word	0x200001d8
 8011950:	0802b538 	.word	0x0802b538
 8011954:	0802b558 	.word	0x0802b558

08011958 <task_add_delayed>:

ISR_CODE bool ISR_FUNC(task_add_delayed)(foreground_task_ptr fn, void *data, uint32_t delay_ms)
{
 8011958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801195a:	4604      	mov	r4, r0
 801195c:	460e      	mov	r6, r1
 801195e:	4617      	mov	r7, r2
    core_task_t *task = NULL;

    hal.irq_disable();
 8011960:	4b19      	ldr	r3, [pc, #100]	@ (80119c8 <task_add_delayed+0x70>)
 8011962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011964:	4798      	blx	r3

    if(fn && (task = task_alloc())) {
 8011966:	b334      	cbz	r4, 80119b6 <task_add_delayed+0x5e>
 8011968:	f7ff ff10 	bl	801178c <task_alloc>
 801196c:	4605      	mov	r5, r0
 801196e:	b318      	cbz	r0, 80119b8 <task_add_delayed+0x60>

        task->time = hal.get_elapsed_ticks() + delay_ms;
 8011970:	4b15      	ldr	r3, [pc, #84]	@ (80119c8 <task_add_delayed+0x70>)
 8011972:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8011976:	4798      	blx	r3
 8011978:	4438      	add	r0, r7
 801197a:	6028      	str	r0, [r5, #0]
        task->fn = fn;
 801197c:	606c      	str	r4, [r5, #4]
        task->data = data;
 801197e:	60ae      	str	r6, [r5, #8]
        task->next = NULL;
 8011980:	2300      	movs	r3, #0
 8011982:	60eb      	str	r3, [r5, #12]

        if(next_task == NULL)
 8011984:	4b11      	ldr	r3, [pc, #68]	@ (80119cc <task_add_delayed+0x74>)
 8011986:	681c      	ldr	r4, [r3, #0]
 8011988:	b164      	cbz	r4, 80119a4 <task_add_delayed+0x4c>
            next_task = task;
        else if((int32_t)(task->time - next_task->time) < 0) {
 801198a:	6823      	ldr	r3, [r4, #0]
 801198c:	1ac3      	subs	r3, r0, r3
 801198e:	2b00      	cmp	r3, #0
 8011990:	db0a      	blt.n	80119a8 <task_add_delayed+0x50>
            task->next = next_task;
            next_task = task;
        } else {
            core_task_t *t = next_task;
            while(t) {
 8011992:	b18c      	cbz	r4, 80119b8 <task_add_delayed+0x60>
                if(t->next == NULL || (int32_t)(task->time - t->next->time) < 0) {
 8011994:	68e3      	ldr	r3, [r4, #12]
 8011996:	b15b      	cbz	r3, 80119b0 <task_add_delayed+0x58>
 8011998:	6819      	ldr	r1, [r3, #0]
 801199a:	1a41      	subs	r1, r0, r1
 801199c:	2900      	cmp	r1, #0
 801199e:	db07      	blt.n	80119b0 <task_add_delayed+0x58>
                    task->next = t->next;
                    t->next = task;
                    break;
                }
                t = t->next;
 80119a0:	461c      	mov	r4, r3
 80119a2:	e7f6      	b.n	8011992 <task_add_delayed+0x3a>
            next_task = task;
 80119a4:	601d      	str	r5, [r3, #0]
 80119a6:	e007      	b.n	80119b8 <task_add_delayed+0x60>
            task->next = next_task;
 80119a8:	60ec      	str	r4, [r5, #12]
            next_task = task;
 80119aa:	4b08      	ldr	r3, [pc, #32]	@ (80119cc <task_add_delayed+0x74>)
 80119ac:	601d      	str	r5, [r3, #0]
 80119ae:	e003      	b.n	80119b8 <task_add_delayed+0x60>
                    task->next = t->next;
 80119b0:	60eb      	str	r3, [r5, #12]
                    t->next = task;
 80119b2:	60e5      	str	r5, [r4, #12]
                    break;
 80119b4:	e000      	b.n	80119b8 <task_add_delayed+0x60>
    core_task_t *task = NULL;
 80119b6:	2500      	movs	r5, #0
            }
        }
    }

    hal.irq_enable();
 80119b8:	4b03      	ldr	r3, [pc, #12]	@ (80119c8 <task_add_delayed+0x70>)
 80119ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80119bc:	4798      	blx	r3

    return task != NULL;
}
 80119be:	1e28      	subs	r0, r5, #0
 80119c0:	bf18      	it	ne
 80119c2:	2001      	movne	r0, #1
 80119c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119c6:	bf00      	nop
 80119c8:	20001a90 	.word	0x20001a90
 80119cc:	200018ac 	.word	0x200018ac

080119d0 <grbl_enter>:
{
 80119d0:	b570      	push	{r4, r5, r6, lr}
    memset(&grbl, 0, sizeof(grbl_t));
 80119d2:	4c9e      	ldr	r4, [pc, #632]	@ (8011c4c <grbl_enter+0x27c>)
 80119d4:	22f8      	movs	r2, #248	@ 0xf8
 80119d6:	2100      	movs	r1, #0
 80119d8:	4620      	mov	r0, r4
 80119da:	f013 f9a8 	bl	8024d2e <memset>
    grbl.on_execute_realtime = grbl.on_execute_delay = task_execute;
 80119de:	4b9c      	ldr	r3, [pc, #624]	@ (8011c50 <grbl_enter+0x280>)
 80119e0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80119e2:	64a3      	str	r3, [r4, #72]	@ 0x48
    grbl.enqueue_gcode = protocol_enqueue_gcode;
 80119e4:	4b9b      	ldr	r3, [pc, #620]	@ (8011c54 <grbl_enter+0x284>)
 80119e6:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
    grbl.enqueue_realtime_command = stream_enqueue_realtime_command;
 80119ea:	4b9b      	ldr	r3, [pc, #620]	@ (8011c58 <grbl_enter+0x288>)
 80119ec:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
    grbl.on_report_options = dummy_bool_handler;
 80119f0:	4b9a      	ldr	r3, [pc, #616]	@ (8011c5c <grbl_enter+0x28c>)
 80119f2:	6563      	str	r3, [r4, #84]	@ 0x54
    grbl.on_report_command_help = system_command_help;
 80119f4:	4b9a      	ldr	r3, [pc, #616]	@ (8011c60 <grbl_enter+0x290>)
 80119f6:	65e3      	str	r3, [r4, #92]	@ 0x5c
    grbl.on_get_alarms = alarms_get_details;
 80119f8:	4b9a      	ldr	r3, [pc, #616]	@ (8011c64 <grbl_enter+0x294>)
 80119fa:	66e3      	str	r3, [r4, #108]	@ 0x6c
    grbl.on_get_errors = errors_get_details;
 80119fc:	4b9a      	ldr	r3, [pc, #616]	@ (8011c68 <grbl_enter+0x298>)
 80119fe:	6723      	str	r3, [r4, #112]	@ 0x70
    grbl.on_get_settings = settings_get_details;
 8011a00:	4b9a      	ldr	r3, [pc, #616]	@ (8011c6c <grbl_enter+0x29c>)
 8011a02:	6763      	str	r3, [r4, #116]	@ 0x74
    memset(&hal, 0, sizeof(grbl_hal_t));
 8011a04:	4c9a      	ldr	r4, [pc, #616]	@ (8011c70 <grbl_enter+0x2a0>)
 8011a06:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8011a0a:	2100      	movs	r1, #0
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	f013 f98e 	bl	8024d2e <memset>
    hal.version = HAL_VERSION; // Update when signatures and/or contract is changed - driver_init() should fail
 8011a12:	230a      	movs	r3, #10
 8011a14:	6023      	str	r3, [r4, #0]
    hal.driver_reset = reset_handler;
 8011a16:	4b97      	ldr	r3, [pc, #604]	@ (8011c74 <grbl_enter+0x2a4>)
 8011a18:	f8c4 3170 	str.w	r3, [r4, #368]	@ 0x170
    hal.irq_enable = dummy_handler;
 8011a1c:	4b96      	ldr	r3, [pc, #600]	@ (8011c78 <grbl_enter+0x2a8>)
 8011a1e:	64a3      	str	r3, [r4, #72]	@ 0x48
    hal.irq_disable = dummy_handler;
 8011a20:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hal.irq_claim = dummy_irq_claim;
 8011a22:	4b96      	ldr	r3, [pc, #600]	@ (8011c7c <grbl_enter+0x2ac>)
 8011a24:	6523      	str	r3, [r4, #80]	@ 0x50
    hal.nvs.size = GRBL_NVS_SIZE;
 8011a26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011a2a:	f8c4 3178 	str.w	r3, [r4, #376]	@ 0x178
    hal.coolant_cap.flood = On;
 8011a2e:	f894 31e4 	ldrb.w	r3, [r4, #484]	@ 0x1e4
 8011a32:	f043 0301 	orr.w	r3, r3, #1
 8011a36:	f884 31e4 	strb.w	r3, [r4, #484]	@ 0x1e4
    hal.limits.interrupt_callback = limit_interrupt_handler;
 8011a3a:	4b91      	ldr	r3, [pc, #580]	@ (8011c80 <grbl_enter+0x2b0>)
 8011a3c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hal.control.interrupt_callback = control_interrupt_handler;
 8011a3e:	4b91      	ldr	r3, [pc, #580]	@ (8011c84 <grbl_enter+0x2b4>)
 8011a40:	66e3      	str	r3, [r4, #108]	@ 0x6c
    hal.stepper.interrupt_callback = stepper_driver_interrupt_handler;
 8011a42:	4b91      	ldr	r3, [pc, #580]	@ (8011c88 <grbl_enter+0x2b8>)
 8011a44:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
    hal.stream_blocking_callback = stream_tx_blocking;
 8011a48:	4b90      	ldr	r3, [pc, #576]	@ (8011c8c <grbl_enter+0x2bc>)
 8011a4a:	f8c4 31d4 	str.w	r3, [r4, #468]	@ 0x1d4
    hal.signals_cap.reset = hal.signals_cap.feed_hold = hal.signals_cap.cycle_start = On;
 8011a4e:	f894 31dc 	ldrb.w	r3, [r4, #476]	@ 0x1dc
 8011a52:	f043 0304 	orr.w	r3, r3, #4
 8011a56:	f884 31dc 	strb.w	r3, [r4, #476]	@ 0x1dc
 8011a5a:	b2db      	uxtb	r3, r3
 8011a5c:	f043 0302 	orr.w	r3, r3, #2
 8011a60:	f884 31dc 	strb.w	r3, [r4, #476]	@ 0x1dc
 8011a64:	b2db      	uxtb	r3, r3
 8011a66:	f043 0301 	orr.w	r3, r3, #1
 8011a6a:	f884 31dc 	strb.w	r3, [r4, #476]	@ 0x1dc
    sys.cold_start = true;
 8011a6e:	4e88      	ldr	r6, [pc, #544]	@ (8011c90 <grbl_enter+0x2c0>)
 8011a70:	2301      	movs	r3, #1
 8011a72:	f886 307d 	strb.w	r3, [r6, #125]	@ 0x7d
    limits_init();
 8011a76:	f002 f875 	bl	8013b64 <limits_init>
    nvs_buffer_alloc(); // Allocate memory block for NVS buffer
 8011a7a:	f004 fb4b 	bl	8016114 <nvs_buffer_alloc>
    settings_clear();
 8011a7e:	f00c f9e3 	bl	801de48 <settings_clear>
    report_init_fns();
 8011a82:	f00a faad 	bl	801bfe0 <report_init_fns>
    driver.init = driver_init();
 8011a86:	f7f9 fb65 	bl	800b154 <driver_init>
 8011a8a:	4d82      	ldr	r5, [pc, #520]	@ (8011c94 <grbl_enter+0x2c4>)
 8011a8c:	782b      	ldrb	r3, [r5, #0]
 8011a8e:	f360 0300 	bfi	r3, r0, #0, #1
 8011a92:	702b      	strb	r3, [r5, #0]
    nvs_buffer_init();
 8011a94:	f004 fb52 	bl	801613c <nvs_buffer_init>
    settings_init(); // Load settings from non-volatile storage
 8011a98:	f00c f9e0 	bl	801de5c <settings_init>
    memset(sys.position, 0, sizeof(sys.position)); // Clear machine position.
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	f8c6 3088 	str.w	r3, [r6, #136]	@ 0x88
 8011aa2:	f8c6 308c 	str.w	r3, [r6, #140]	@ 0x8c
 8011aa6:	f8c6 3090 	str.w	r3, [r6, #144]	@ 0x90
    driver.amass = hal.driver_cap.amass_level >= MAX_AMASS_LEVEL;
 8011aaa:	f894 21d8 	ldrb.w	r2, [r4, #472]	@ 0x1d8
 8011aae:	f002 0160 	and.w	r1, r2, #96	@ 0x60
 8011ab2:	2960      	cmp	r1, #96	@ 0x60
 8011ab4:	bf14      	ite	ne
 8011ab6:	2100      	movne	r1, #0
 8011ab8:	2101      	moveq	r1, #1
 8011aba:	7828      	ldrb	r0, [r5, #0]
 8011abc:	f361 00c3 	bfi	r0, r1, #3, #1
 8011ac0:	7028      	strb	r0, [r5, #0]
    hal.driver_cap.amass_level = MAX_AMASS_LEVEL;
 8011ac2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8011ac6:	f884 21d8 	strb.w	r2, [r4, #472]	@ 0x1d8
    driver.pulse_delay = hal.driver_cap.step_pulse_delay;
 8011aca:	b2d2      	uxtb	r2, r2
 8011acc:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8011ad0:	b2c1      	uxtb	r1, r0
 8011ad2:	f362 1104 	bfi	r1, r2, #4, #1
 8011ad6:	7029      	strb	r1, [r5, #0]
    sys.mpg_mode = false;
 8011ad8:	f886 307f 	strb.w	r3, [r6, #127]	@ 0x7f
    if(driver.ok == 0xFF)
 8011adc:	b2cb      	uxtb	r3, r1
 8011ade:	2bff      	cmp	r3, #255	@ 0xff
 8011ae0:	d054      	beq.n	8011b8c <grbl_enter+0x1bc>
    if((driver.spindle = spindle_select(settings.spindle.flags.type))) {
 8011ae2:	4b6d      	ldr	r3, [pc, #436]	@ (8011c98 <grbl_enter+0x2c8>)
 8011ae4:	f893 00e7 	ldrb.w	r0, [r3, #231]	@ 0xe7
 8011ae8:	f3c0 0084 	ubfx	r0, r0, #2, #5
 8011aec:	f00c fdd6 	bl	801e69c <spindle_select>
 8011af0:	4b68      	ldr	r3, [pc, #416]	@ (8011c94 <grbl_enter+0x2c4>)
 8011af2:	781a      	ldrb	r2, [r3, #0]
 8011af4:	f360 0282 	bfi	r2, r0, #2, #1
 8011af8:	701a      	strb	r2, [r3, #0]
 8011afa:	2800      	cmp	r0, #0
 8011afc:	d052      	beq.n	8011ba4 <grbl_enter+0x1d4>
        spindle_ptrs_t *spindle = spindle_get(0);
 8011afe:	2000      	movs	r0, #0
 8011b00:	f00c fd92 	bl	801e628 <spindle_get>
        driver.spindle = spindle->get_pwm == NULL || spindle->update_pwm != NULL;
 8011b04:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d048      	beq.n	8011b9c <grbl_enter+0x1cc>
 8011b0a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d047      	beq.n	8011ba0 <grbl_enter+0x1d0>
 8011b10:	2101      	movs	r1, #1
 8011b12:	4b60      	ldr	r3, [pc, #384]	@ (8011c94 <grbl_enter+0x2c4>)
 8011b14:	781a      	ldrb	r2, [r3, #0]
 8011b16:	f361 0282 	bfi	r2, r1, #2, #1
 8011b1a:	701a      	strb	r2, [r3, #0]
    if(driver.ok != 0xFF) {
 8011b1c:	4b5d      	ldr	r3, [pc, #372]	@ (8011c94 <grbl_enter+0x2c4>)
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	2bff      	cmp	r3, #255	@ 0xff
 8011b22:	d149      	bne.n	8011bb8 <grbl_enter+0x1e8>
    hal.stepper.enable(settings.steppers.deenergize);
 8011b24:	4c52      	ldr	r4, [pc, #328]	@ (8011c70 <grbl_enter+0x2a0>)
 8011b26:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8011b2a:	4a5b      	ldr	r2, [pc, #364]	@ (8011c98 <grbl_enter+0x2c8>)
 8011b2c:	f892 00ec 	ldrb.w	r0, [r2, #236]	@ 0xec
 8011b30:	4798      	blx	r3
    spindle_all_off();
 8011b32:	f00c ff85 	bl	801ea40 <spindle_all_off>
    hal.coolant.set_state((coolant_state_t){0});
 8011b36:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011b38:	f04f 0000 	mov.w	r0, #0
 8011b3c:	4798      	blx	r3
    if(hal.get_position)
 8011b3e:	f8d4 31d0 	ldr.w	r3, [r4, #464]	@ 0x1d0
 8011b42:	b10b      	cbz	r3, 8011b48 <grbl_enter+0x178>
        hal.get_position(&sys.position); // TODO: restore on abort when returns true?
 8011b44:	4855      	ldr	r0, [pc, #340]	@ (8011c9c <grbl_enter+0x2cc>)
 8011b46:	4798      	blx	r3
    sys.driver_started = sys.alarm != Alarm_SelftestFailed;
 8011b48:	4a51      	ldr	r2, [pc, #324]	@ (8011c90 <grbl_enter+0x2c0>)
 8011b4a:	f892 307c 	ldrb.w	r3, [r2, #124]	@ 0x7c
 8011b4e:	3b10      	subs	r3, #16
 8011b50:	bf18      	it	ne
 8011b52:	2301      	movne	r3, #1
 8011b54:	f882 307e 	strb.w	r3, [r2, #126]	@ 0x7e
    if(hal.homing.get_state == NULL || settings.homing.flags.use_limit_switches)
 8011b58:	4b45      	ldr	r3, [pc, #276]	@ (8011c70 <grbl_enter+0x2a0>)
 8011b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011b5c:	b123      	cbz	r3, 8011b68 <grbl_enter+0x198>
 8011b5e:	4b4e      	ldr	r3, [pc, #312]	@ (8011c98 <grbl_enter+0x2c8>)
 8011b60:	f993 3114 	ldrsb.w	r3, [r3, #276]	@ 0x114
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	da06      	bge.n	8011b76 <grbl_enter+0x1a6>
        hal.homing.get_state = hal.limits_cap.max.mask ? get_homing_status2 : get_homing_status;
 8011b68:	4b41      	ldr	r3, [pc, #260]	@ (8011c70 <grbl_enter+0x2a0>)
 8011b6a:	f893 31df 	ldrb.w	r3, [r3, #479]	@ 0x1df
 8011b6e:	b363      	cbz	r3, 8011bca <grbl_enter+0x1fa>
 8011b70:	4a4b      	ldr	r2, [pc, #300]	@ (8011ca0 <grbl_enter+0x2d0>)
 8011b72:	4b3f      	ldr	r3, [pc, #252]	@ (8011c70 <grbl_enter+0x2a0>)
 8011b74:	661a      	str	r2, [r3, #96]	@ 0x60
    if(settings.report_interval)
 8011b76:	4b48      	ldr	r3, [pc, #288]	@ (8011c98 <grbl_enter+0x2c8>)
 8011b78:	8a9a      	ldrh	r2, [r3, #20]
 8011b7a:	bb42      	cbnz	r2, 8011bce <grbl_enter+0x1fe>
    if(hal.driver_cap.sd_card || hal.driver_cap.littlefs) {
 8011b7c:	4b3c      	ldr	r3, [pc, #240]	@ (8011c70 <grbl_enter+0x2a0>)
 8011b7e:	f893 31d9 	ldrb.w	r3, [r3, #473]	@ 0x1d9
 8011b82:	f013 0f06 	tst.w	r3, #6
 8011b86:	d127      	bne.n	8011bd8 <grbl_enter+0x208>
            looping = hal.driver_release == NULL || hal.driver_release();
 8011b88:	2301      	movs	r3, #1
 8011b8a:	e096      	b.n	8011cba <grbl_enter+0x2ea>
        driver.setup = hal.driver_setup(&settings);
 8011b8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011b8e:	4842      	ldr	r0, [pc, #264]	@ (8011c98 <grbl_enter+0x2c8>)
 8011b90:	4798      	blx	r3
 8011b92:	782a      	ldrb	r2, [r5, #0]
 8011b94:	f360 0241 	bfi	r2, r0, #1, #1
 8011b98:	702a      	strb	r2, [r5, #0]
 8011b9a:	e7a2      	b.n	8011ae2 <grbl_enter+0x112>
        driver.spindle = spindle->get_pwm == NULL || spindle->update_pwm != NULL;
 8011b9c:	2101      	movs	r1, #1
 8011b9e:	e7b8      	b.n	8011b12 <grbl_enter+0x142>
 8011ba0:	2100      	movs	r1, #0
 8011ba2:	e7b6      	b.n	8011b12 <grbl_enter+0x142>
        driver.spindle = spindle_select(spindle_add_null());
 8011ba4:	f00c fd56 	bl	801e654 <spindle_add_null>
 8011ba8:	f00c fd78 	bl	801e69c <spindle_select>
 8011bac:	4b39      	ldr	r3, [pc, #228]	@ (8011c94 <grbl_enter+0x2c4>)
 8011bae:	781a      	ldrb	r2, [r3, #0]
 8011bb0:	f360 0282 	bfi	r2, r0, #2, #1
 8011bb4:	701a      	strb	r2, [r3, #0]
 8011bb6:	e7b1      	b.n	8011b1c <grbl_enter+0x14c>
        sys.alarm = Alarm_SelftestFailed;
 8011bb8:	4b35      	ldr	r3, [pc, #212]	@ (8011c90 <grbl_enter+0x2c0>)
 8011bba:	2210      	movs	r2, #16
 8011bbc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        protocol_enqueue_foreground_task(report_driver_error, NULL);
 8011bc0:	2100      	movs	r1, #0
 8011bc2:	4838      	ldr	r0, [pc, #224]	@ (8011ca4 <grbl_enter+0x2d4>)
 8011bc4:	f006 f944 	bl	8017e50 <protocol_enqueue_foreground_task>
 8011bc8:	e7ac      	b.n	8011b24 <grbl_enter+0x154>
        hal.homing.get_state = hal.limits_cap.max.mask ? get_homing_status2 : get_homing_status;
 8011bca:	4a37      	ldr	r2, [pc, #220]	@ (8011ca8 <grbl_enter+0x2d8>)
 8011bcc:	e7d1      	b.n	8011b72 <grbl_enter+0x1a2>
        task_add_delayed(auto_realtime_report, NULL, settings.report_interval);
 8011bce:	2100      	movs	r1, #0
 8011bd0:	4836      	ldr	r0, [pc, #216]	@ (8011cac <grbl_enter+0x2dc>)
 8011bd2:	f7ff fec1 	bl	8011958 <task_add_delayed>
 8011bd6:	e7d1      	b.n	8011b7c <grbl_enter+0x1ac>
        fs_options_t fs_options = {0};
 8011bd8:	f04f 0100 	mov.w	r1, #0
        fs_options.lfs_hidden = hal.driver_cap.littlefs;
 8011bdc:	4b24      	ldr	r3, [pc, #144]	@ (8011c70 <grbl_enter+0x2a0>)
 8011bde:	f893 31d9 	ldrb.w	r3, [r3, #473]	@ 0x1d9
 8011be2:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8011be6:	f362 0141 	bfi	r1, r2, #1, #1
        fs_options.sd_mount_on_boot = hal.driver_cap.sd_card;
 8011bea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8011bee:	f363 0100 	bfi	r1, r3, #0, #1
        setting_remove_elements(Setting_FSOptions, fs_options.mask);
 8011bf2:	b2c9      	uxtb	r1, r1
 8011bf4:	f240 208a 	movw	r0, #650	@ 0x28a
 8011bf8:	f00b ffc8 	bl	801db8c <setting_remove_elements>
 8011bfc:	e7c4      	b.n	8011b88 <grbl_enter+0x1b8>
            memset(&sys, 0, offsetof(system_t, alarm)); // Clear system variables except state & alarm.
 8011bfe:	227c      	movs	r2, #124	@ 0x7c
 8011c00:	2100      	movs	r1, #0
 8011c02:	4823      	ldr	r0, [pc, #140]	@ (8011c90 <grbl_enter+0x2c0>)
 8011c04:	f013 f893 	bl	8024d2e <memset>
 8011c08:	e06a      	b.n	8011ce0 <grbl_enter+0x310>
                spindle_get(spindle_num)->param->override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE; // Set to 100%
 8011c0a:	2000      	movs	r0, #0
 8011c0c:	f00c fd0c 	bl	801e628 <spindle_get>
 8011c10:	6843      	ldr	r3, [r0, #4]
 8011c12:	2264      	movs	r2, #100	@ 0x64
 8011c14:	60da      	str	r2, [r3, #12]
 8011c16:	e06f      	b.n	8011cf8 <grbl_enter+0x328>
            tc_init();
 8011c18:	f010 fe46 	bl	80228a8 <tc_init>
 8011c1c:	e0b2      	b.n	8011d84 <grbl_enter+0x3b4>
        if(!settings.flags.no_unlock_after_estop && state_get() == STATE_ESTOP)
 8011c1e:	f00d f993 	bl	801ef48 <state_get>
 8011c22:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8011c26:	f040 80b6 	bne.w	8011d96 <grbl_enter+0x3c6>
            state_set(STATE_ALARM);
 8011c2a:	2001      	movs	r0, #1
 8011c2c:	f00d f992 	bl	801ef54 <state_set>
 8011c30:	e0b1      	b.n	8011d96 <grbl_enter+0x3c6>
            protocol_enqueue_realtime_command(sys.mpg_mode ? CMD_STATUS_REPORT_ALL : CMD_STATUS_REPORT);
 8011c32:	4b17      	ldr	r3, [pc, #92]	@ (8011c90 <grbl_enter+0x2c0>)
 8011c34:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8011c38:	b11b      	cbz	r3, 8011c42 <grbl_enter+0x272>
 8011c3a:	2087      	movs	r0, #135	@ 0x87
 8011c3c:	f006 f92e 	bl	8017e9c <protocol_enqueue_realtime_command>
 8011c40:	e0af      	b.n	8011da2 <grbl_enter+0x3d2>
 8011c42:	2080      	movs	r0, #128	@ 0x80
 8011c44:	e7fa      	b.n	8011c3c <grbl_enter+0x26c>
            looping = hal.driver_release == NULL || hal.driver_release();
 8011c46:	2301      	movs	r3, #1
 8011c48:	e033      	b.n	8011cb2 <grbl_enter+0x2e2>
 8011c4a:	bf00      	nop
 8011c4c:	20001c78 	.word	0x20001c78
 8011c50:	080117bd 	.word	0x080117bd
 8011c54:	080171a1 	.word	0x080171a1
 8011c58:	08020b11 	.word	0x08020b11
 8011c5c:	08011745 	.word	0x08011745
 8011c60:	08021b2d 	.word	0x08021b2d
 8011c64:	0800cf41 	.word	0x0800cf41
 8011c68:	0800d11d 	.word	0x0800d11d
 8011c6c:	0801d01d 	.word	0x0801d01d
 8011c70:	20001a90 	.word	0x20001a90
 8011c74:	08011879 	.word	0x08011879
 8011c78:	08015eef 	.word	0x08015eef
 8011c7c:	08011747 	.word	0x08011747
 8011c80:	080132a5 	.word	0x080132a5
 8011c84:	08021759 	.word	0x08021759
 8011c88:	0801fa25 	.word	0x0801fa25
 8011c8c:	08020a69 	.word	0x08020a69
 8011c90:	20001d70 	.word	0x20001d70
 8011c94:	200001d8 	.word	0x200001d8
 8011c98:	200024a8 	.word	0x200024a8
 8011c9c:	20001df8 	.word	0x20001df8
 8011ca0:	0801188d 	.word	0x0801188d
 8011ca4:	080118f9 	.word	0x080118f9
 8011ca8:	0801174d 	.word	0x0801174d
 8011cac:	08011de5 	.word	0x08011de5
 8011cb0:	2301      	movs	r3, #1
        sys.cold_start = false;
 8011cb2:	4a46      	ldr	r2, [pc, #280]	@ (8011dcc <grbl_enter+0x3fc>)
 8011cb4:	2100      	movs	r1, #0
 8011cb6:	f882 107d 	strb.w	r1, [r2, #125]	@ 0x7d
    while(looping) {
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	f000 8082 	beq.w	8011dc4 <grbl_enter+0x3f4>
        report_init_fns();
 8011cc0:	f00a f98e 	bl	801bfe0 <report_init_fns>
        if(!sys.position_lost || settings.homing.flags.keep_on_reset)
 8011cc4:	4b41      	ldr	r3, [pc, #260]	@ (8011dcc <grbl_enter+0x3fc>)
 8011cc6:	78db      	ldrb	r3, [r3, #3]
 8011cc8:	b12b      	cbz	r3, 8011cd6 <grbl_enter+0x306>
 8011cca:	4b41      	ldr	r3, [pc, #260]	@ (8011dd0 <grbl_enter+0x400>)
 8011ccc:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8011cd0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8011cd4:	d093      	beq.n	8011bfe <grbl_enter+0x22e>
            memset(&sys, 0, offsetof(system_t, homed)); // Clear system variables except alarm & homed status.
 8011cd6:	2254      	movs	r2, #84	@ 0x54
 8011cd8:	2100      	movs	r1, #0
 8011cda:	483c      	ldr	r0, [pc, #240]	@ (8011dcc <grbl_enter+0x3fc>)
 8011cdc:	f013 f827 	bl	8024d2e <memset>
        sys.var5399 = -2;                                        // Clear last M66 result
 8011ce0:	4b3a      	ldr	r3, [pc, #232]	@ (8011dcc <grbl_enter+0x3fc>)
 8011ce2:	f06f 0201 	mvn.w	r2, #1
 8011ce6:	651a      	str	r2, [r3, #80]	@ 0x50
        sys.override.feed_rate = DEFAULT_FEED_OVERRIDE;          // Set to 100%
 8011ce8:	2264      	movs	r2, #100	@ 0x64
 8011cea:	61da      	str	r2, [r3, #28]
        sys.override.rapid_rate = DEFAULT_RAPID_OVERRIDE;        // Set to 100%
 8011cec:	621a      	str	r2, [r3, #32]
            if(spindle_is_enabled(--spindle_num))
 8011cee:	2000      	movs	r0, #0
 8011cf0:	f00c fc84 	bl	801e5fc <spindle_is_enabled>
 8011cf4:	2800      	cmp	r0, #0
 8011cf6:	d188      	bne.n	8011c0a <grbl_enter+0x23a>
        sys.flags.auto_reporting = settings.report_interval != 0;
 8011cf8:	4a35      	ldr	r2, [pc, #212]	@ (8011dd0 <grbl_enter+0x400>)
 8011cfa:	8a93      	ldrh	r3, [r2, #20]
 8011cfc:	3b00      	subs	r3, #0
 8011cfe:	bf18      	it	ne
 8011d00:	2301      	movne	r3, #1
 8011d02:	4932      	ldr	r1, [pc, #200]	@ (8011dcc <grbl_enter+0x3fc>)
 8011d04:	7dc8      	ldrb	r0, [r1, #23]
 8011d06:	f363 0041 	bfi	r0, r3, #1, #1
 8011d0a:	75c8      	strb	r0, [r1, #23]
        if(settings.parking.flags.enabled)
 8011d0c:	f892 3128 	ldrb.w	r3, [r2, #296]	@ 0x128
 8011d10:	f013 0f01 	tst.w	r3, #1
 8011d14:	d00a      	beq.n	8011d2c <grbl_enter+0x35c>
            sys.override.control.parking_disable = settings.parking.flags.deactivate_upon_init;
 8011d16:	f892 3128 	ldrb.w	r3, [r2, #296]	@ 0x128
 8011d1a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8011d1e:	460a      	mov	r2, r1
 8011d20:	f891 1029 	ldrb.w	r1, [r1, #41]	@ 0x29
 8011d24:	f363 01c3 	bfi	r1, r3, #3, #1
 8011d28:	f882 1029 	strb.w	r1, [r2, #41]	@ 0x29
        flush_override_buffers();
 8011d2c:	f004 fc06 	bl	801653c <flush_override_buffers>
        hal.stream.reset_read_buffer(); // Clear input stream buffer
 8011d30:	4c28      	ldr	r4, [pc, #160]	@ (8011dd4 <grbl_enter+0x404>)
 8011d32:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 8011d36:	4798      	blx	r3
        gc_init();                      // Set g-code parser to default state
 8011d38:	f7fb fbc6 	bl	800d4c8 <gc_init>
        hal.limits.enable(settings.limits.flags.hard_enabled, (axes_signals_t){0});
 8011d3c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8011d3e:	4a24      	ldr	r2, [pc, #144]	@ (8011dd0 <grbl_enter+0x400>)
 8011d40:	f892 0124 	ldrb.w	r0, [r2, #292]	@ 0x124
 8011d44:	f04f 0100 	mov.w	r1, #0
 8011d48:	f000 0001 	and.w	r0, r0, #1
 8011d4c:	4798      	blx	r3
        plan_reset();                   // Clear block buffer and planner variables
 8011d4e:	f004 fd23 	bl	8016798 <plan_reset>
        st_reset();                     // Clear stepper subsystem variables.
 8011d52:	f00d ffdd 	bl	801fd10 <st_reset>
        limits_set_homing_axes();       // Set axes to be homed from settings.
 8011d56:	f001 fec7 	bl	8013ae8 <limits_set_homing_axes>
        system_init_switches();         // Set switches from inputs.
 8011d5a:	f00f fce1 	bl	8021720 <system_init_switches>
        sync_position();
 8011d5e:	f005 f849 	bl	8016df4 <plan_sync_position>
 8011d62:	491d      	ldr	r1, [pc, #116]	@ (8011dd8 <grbl_enter+0x408>)
 8011d64:	481d      	ldr	r0, [pc, #116]	@ (8011ddc <grbl_enter+0x40c>)
 8011d66:	f010 f809 	bl	8021d7c <system_convert_array_steps_to_mpos>
        if(hal.stepper.disable_motors)
 8011d6a:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8011d6e:	b113      	cbz	r3, 8011d76 <grbl_enter+0x3a6>
            hal.stepper.disable_motors((axes_signals_t){0}, SquaringMode_Both);
 8011d70:	2100      	movs	r1, #0
 8011d72:	4608      	mov	r0, r1
 8011d74:	4798      	blx	r3
        if(!hal.driver_cap.atc)
 8011d76:	4b17      	ldr	r3, [pc, #92]	@ (8011dd4 <grbl_enter+0x404>)
 8011d78:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 8011d7c:	f013 0f02 	tst.w	r3, #2
 8011d80:	f43f af4a 	beq.w	8011c18 <grbl_enter+0x248>
        grbl.report.init_message();
 8011d84:	4b16      	ldr	r3, [pc, #88]	@ (8011de0 <grbl_enter+0x410>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	4798      	blx	r3
        if(!settings.flags.no_unlock_after_estop && state_get() == STATE_ESTOP)
 8011d8a:	4b11      	ldr	r3, [pc, #68]	@ (8011dd0 <grbl_enter+0x400>)
 8011d8c:	f993 30ff 	ldrsb.w	r3, [r3, #255]	@ 0xff
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	f6bf af44 	bge.w	8011c1e <grbl_enter+0x24e>
        if(hal.driver_cap.mpg_mode)
 8011d96:	4b0f      	ldr	r3, [pc, #60]	@ (8011dd4 <grbl_enter+0x404>)
 8011d98:	f993 31d9 	ldrsb.w	r3, [r3, #473]	@ 0x1d9
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	f6ff af48 	blt.w	8011c32 <grbl_enter+0x262>
        if(!(looping = protocol_main_loop()))
 8011da2:	f005 fd99 	bl	80178d8 <protocol_main_loop>
 8011da6:	4603      	mov	r3, r0
 8011da8:	2800      	cmp	r0, #0
 8011daa:	d182      	bne.n	8011cb2 <grbl_enter+0x2e2>
            looping = hal.driver_release == NULL || hal.driver_release();
 8011dac:	4b09      	ldr	r3, [pc, #36]	@ (8011dd4 <grbl_enter+0x404>)
 8011dae:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	f43f af47 	beq.w	8011c46 <grbl_enter+0x276>
 8011db8:	4798      	blx	r3
 8011dba:	2800      	cmp	r0, #0
 8011dbc:	f47f af78 	bne.w	8011cb0 <grbl_enter+0x2e0>
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	e776      	b.n	8011cb2 <grbl_enter+0x2e2>
    nvs_buffer_free();
 8011dc4:	f004 fb36 	bl	8016434 <nvs_buffer_free>
}
 8011dc8:	2000      	movs	r0, #0
 8011dca:	bd70      	pop	{r4, r5, r6, pc}
 8011dcc:	20001d70 	.word	0x20001d70
 8011dd0:	200024a8 	.word	0x200024a8
 8011dd4:	20001a90 	.word	0x20001a90
 8011dd8:	20001df8 	.word	0x20001df8
 8011ddc:	20001830 	.word	0x20001830
 8011de0:	20001c78 	.word	0x20001c78

08011de4 <auto_realtime_report>:
{
 8011de4:	b508      	push	{r3, lr}
    if(sys.flags.auto_reporting) {
 8011de6:	4b0d      	ldr	r3, [pc, #52]	@ (8011e1c <auto_realtime_report+0x38>)
 8011de8:	7ddb      	ldrb	r3, [r3, #23]
 8011dea:	f013 0f02 	tst.w	r3, #2
 8011dee:	d00b      	beq.n	8011e08 <auto_realtime_report+0x24>
        system_set_exec_state_flag(EXEC_STATUS_REPORT);
 8011df0:	4b0b      	ldr	r3, [pc, #44]	@ (8011e20 <auto_realtime_report+0x3c>)
 8011df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011df4:	2101      	movs	r1, #1
 8011df6:	480b      	ldr	r0, [pc, #44]	@ (8011e24 <auto_realtime_report+0x40>)
 8011df8:	4798      	blx	r3
        task_add_delayed(auto_realtime_report, NULL, settings.report_interval);
 8011dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8011e28 <auto_realtime_report+0x44>)
 8011dfc:	8a9a      	ldrh	r2, [r3, #20]
 8011dfe:	2100      	movs	r1, #0
 8011e00:	480a      	ldr	r0, [pc, #40]	@ (8011e2c <auto_realtime_report+0x48>)
 8011e02:	f7ff fda9 	bl	8011958 <task_add_delayed>
}
 8011e06:	bd08      	pop	{r3, pc}
    } else if(settings.report_interval)
 8011e08:	4b07      	ldr	r3, [pc, #28]	@ (8011e28 <auto_realtime_report+0x44>)
 8011e0a:	8a9a      	ldrh	r2, [r3, #20]
 8011e0c:	2a00      	cmp	r2, #0
 8011e0e:	d0fa      	beq.n	8011e06 <auto_realtime_report+0x22>
        task_add_delayed(realtime_report_check, NULL, settings.report_interval);
 8011e10:	2100      	movs	r1, #0
 8011e12:	4807      	ldr	r0, [pc, #28]	@ (8011e30 <auto_realtime_report+0x4c>)
 8011e14:	f7ff fda0 	bl	8011958 <task_add_delayed>
}
 8011e18:	e7f5      	b.n	8011e06 <auto_realtime_report+0x22>
 8011e1a:	bf00      	nop
 8011e1c:	20001d70 	.word	0x20001d70
 8011e20:	20001a90 	.word	0x20001a90
 8011e24:	20001db8 	.word	0x20001db8
 8011e28:	200024a8 	.word	0x200024a8
 8011e2c:	08011de5 	.word	0x08011de5
 8011e30:	08011e35 	.word	0x08011e35

08011e34 <realtime_report_check>:
{
 8011e34:	b508      	push	{r3, lr}
    task_add_delayed(sys.flags.auto_reporting ? auto_realtime_report : realtime_report_check, NULL, settings.report_interval);
 8011e36:	4b07      	ldr	r3, [pc, #28]	@ (8011e54 <realtime_report_check+0x20>)
 8011e38:	7ddb      	ldrb	r3, [r3, #23]
 8011e3a:	f013 0f02 	tst.w	r3, #2
 8011e3e:	d006      	beq.n	8011e4e <realtime_report_check+0x1a>
 8011e40:	4805      	ldr	r0, [pc, #20]	@ (8011e58 <realtime_report_check+0x24>)
 8011e42:	4b06      	ldr	r3, [pc, #24]	@ (8011e5c <realtime_report_check+0x28>)
 8011e44:	8a9a      	ldrh	r2, [r3, #20]
 8011e46:	2100      	movs	r1, #0
 8011e48:	f7ff fd86 	bl	8011958 <task_add_delayed>
}
 8011e4c:	bd08      	pop	{r3, pc}
    task_add_delayed(sys.flags.auto_reporting ? auto_realtime_report : realtime_report_check, NULL, settings.report_interval);
 8011e4e:	4804      	ldr	r0, [pc, #16]	@ (8011e60 <realtime_report_check+0x2c>)
 8011e50:	e7f7      	b.n	8011e42 <realtime_report_check+0xe>
 8011e52:	bf00      	nop
 8011e54:	20001d70 	.word	0x20001d70
 8011e58:	08011de5 	.word	0x08011de5
 8011e5c:	200024a8 	.word	0x200024a8
 8011e60:	08011e35 	.word	0x08011e35

08011e64 <task_delete>:

void task_delete (foreground_task_ptr fn, void *data)
{
    core_task_t *task, *prev = NULL;

    if((task = next_task)) do {
 8011e64:	4b12      	ldr	r3, [pc, #72]	@ (8011eb0 <task_delete+0x4c>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	b303      	cbz	r3, 8011eac <task_delete+0x48>
{
 8011e6a:	b410      	push	{r4}
    core_task_t *task, *prev = NULL;
 8011e6c:	2400      	movs	r4, #0
 8011e6e:	e00a      	b.n	8011e86 <task_delete+0x22>
        if(fn == task->fn && data == task->data) {
            if(prev)
                prev->next = task->next;
            else
                next_task = task->next;
 8011e70:	68d9      	ldr	r1, [r3, #12]
 8011e72:	4a0f      	ldr	r2, [pc, #60]	@ (8011eb0 <task_delete+0x4c>)
 8011e74:	6011      	str	r1, [r2, #0]
 8011e76:	e010      	b.n	8011e9a <task_delete+0x36>
        last_freed = task;
 8011e78:	4a0e      	ldr	r2, [pc, #56]	@ (8011eb4 <task_delete+0x50>)
 8011e7a:	6013      	str	r3, [r2, #0]
 8011e7c:	e013      	b.n	8011ea6 <task_delete+0x42>
            task_free(task);
            break;
        }
        prev = task;
    } while((task = task->next));
 8011e7e:	68da      	ldr	r2, [r3, #12]
        prev = task;
 8011e80:	461c      	mov	r4, r3
    } while((task = task->next));
 8011e82:	b182      	cbz	r2, 8011ea6 <task_delete+0x42>
 8011e84:	4613      	mov	r3, r2
        if(fn == task->fn && data == task->data) {
 8011e86:	685a      	ldr	r2, [r3, #4]
 8011e88:	4282      	cmp	r2, r0
 8011e8a:	d1f8      	bne.n	8011e7e <task_delete+0x1a>
 8011e8c:	689a      	ldr	r2, [r3, #8]
 8011e8e:	428a      	cmp	r2, r1
 8011e90:	d1f5      	bne.n	8011e7e <task_delete+0x1a>
            if(prev)
 8011e92:	2c00      	cmp	r4, #0
 8011e94:	d0ec      	beq.n	8011e70 <task_delete+0xc>
                prev->next = task->next;
 8011e96:	68da      	ldr	r2, [r3, #12]
 8011e98:	60e2      	str	r2, [r4, #12]
    task->fn = NULL;
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	605a      	str	r2, [r3, #4]
    if(last_freed == NULL)
 8011e9e:	4a05      	ldr	r2, [pc, #20]	@ (8011eb4 <task_delete+0x50>)
 8011ea0:	6812      	ldr	r2, [r2, #0]
 8011ea2:	2a00      	cmp	r2, #0
 8011ea4:	d0e8      	beq.n	8011e78 <task_delete+0x14>
}
 8011ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011eaa:	4770      	bx	lr
 8011eac:	4770      	bx	lr
 8011eae:	bf00      	nop
 8011eb0:	200018ac 	.word	0x200018ac
 8011eb4:	200018a0 	.word	0x200018a0

08011eb8 <ioports_count>:
static setting_changed_ptr on_setting_changed = NULL;
static io_ports_cfg_t analog, digital;
static int16_t digital_in = -1, digital_out = -1, analog_in = -1, analog_out = -1;

static uint8_t ioports_count (io_port_type_t type, io_port_direction_t dir)
{
 8011eb8:	b570      	push	{r4, r5, r6, lr}
 8011eba:	4606      	mov	r6, r0
 8011ebc:	460d      	mov	r5, r1
    xbar_t *port;
    uint8_t n_ports = 0;
 8011ebe:	2400      	movs	r4, #0
 8011ec0:	e000      	b.n	8011ec4 <ioports_count+0xc>

    // determine how many ports, including claimed ports, that are available
    do {
        if((port = hal.port.get_pin_info(type, dir, n_ports)))
            n_ports++;
    } while(port != NULL);
 8011ec2:	b163      	cbz	r3, 8011ede <ioports_count+0x26>
        if((port = hal.port.get_pin_info(type, dir, n_ports)))
 8011ec4:	4b07      	ldr	r3, [pc, #28]	@ (8011ee4 <ioports_count+0x2c>)
 8011ec6:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8011eca:	4622      	mov	r2, r4
 8011ecc:	4629      	mov	r1, r5
 8011ece:	4630      	mov	r0, r6
 8011ed0:	4798      	blx	r3
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	2800      	cmp	r0, #0
 8011ed6:	d0f4      	beq.n	8011ec2 <ioports_count+0xa>
            n_ports++;
 8011ed8:	3401      	adds	r4, #1
 8011eda:	b2e4      	uxtb	r4, r4
 8011edc:	e7f1      	b.n	8011ec2 <ioports_count+0xa>

    return n_ports;
}
 8011ede:	4620      	mov	r0, r4
 8011ee0:	bd70      	pop	{r4, r5, r6, pc}
 8011ee2:	bf00      	nop
 8011ee4:	20001a90 	.word	0x20001a90

08011ee8 <get_pnum>:

/* experimental code follows */

static char *get_pnum (io_ports_data_t *ports, uint8_t port)
{
    return ports->pnum ? (ports->pnum + (port * 3) + (port > 9 ? port - 10 : 0)) : NULL;
 8011ee8:	6800      	ldr	r0, [r0, #0]
 8011eea:	b140      	cbz	r0, 8011efe <get_pnum+0x16>
 8011eec:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8011ef0:	2909      	cmp	r1, #9
 8011ef2:	d901      	bls.n	8011ef8 <get_pnum+0x10>
 8011ef4:	390a      	subs	r1, #10
 8011ef6:	e000      	b.n	8011efa <get_pnum+0x12>
 8011ef8:	2100      	movs	r1, #0
 8011efa:	440b      	add	r3, r1
 8011efc:	4418      	add	r0, r3
}
 8011efe:	4770      	bx	lr

08011f00 <is_setting_available>:

static bool is_setting_available (const setting_detail_t *setting)
{
    bool available = false;

    switch(setting->id) {
 8011f00:	8803      	ldrh	r3, [r0, #0]
 8011f02:	f5b3 7fba 	cmp.w	r3, #372	@ 0x174
 8011f06:	d30d      	bcc.n	8011f24 <is_setting_available+0x24>
 8011f08:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8011f0c:	b29b      	uxth	r3, r3
 8011f0e:	2b01      	cmp	r3, #1
 8011f10:	d81e      	bhi.n	8011f50 <is_setting_available+0x50>
            available = digital.in.ports && digital.inx.mask;
            break;

        case Settings_IoPort_InvertOut:
        case Settings_IoPort_OD_Enable:
            available = digital.out.ports && digital.outx.mask;
 8011f12:	4b10      	ldr	r3, [pc, #64]	@ (8011f54 <is_setting_available+0x54>)
 8011f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f16:	b1bb      	cbz	r3, 8011f48 <is_setting_available+0x48>
 8011f18:	4b0e      	ldr	r3, [pc, #56]	@ (8011f54 <is_setting_available+0x54>)
 8011f1a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8011f1e:	b9ab      	cbnz	r3, 8011f4c <is_setting_available+0x4c>
 8011f20:	2000      	movs	r0, #0
 8011f22:	4770      	bx	lr
    switch(setting->id) {
 8011f24:	f5b3 7fb9 	cmp.w	r3, #370	@ 0x172
 8011f28:	d201      	bcs.n	8011f2e <is_setting_available+0x2e>
 8011f2a:	2000      	movs	r0, #0
 8011f2c:	4770      	bx	lr
            available = digital.in.ports && digital.inx.mask;
 8011f2e:	4b09      	ldr	r3, [pc, #36]	@ (8011f54 <is_setting_available+0x54>)
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	b12b      	cbz	r3, 8011f40 <is_setting_available+0x40>
 8011f34:	4b07      	ldr	r3, [pc, #28]	@ (8011f54 <is_setting_available+0x54>)
 8011f36:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8011f3a:	b91b      	cbnz	r3, 8011f44 <is_setting_available+0x44>
 8011f3c:	2000      	movs	r0, #0
 8011f3e:	4770      	bx	lr
 8011f40:	2000      	movs	r0, #0
 8011f42:	4770      	bx	lr
 8011f44:	2001      	movs	r0, #1
            break;
 8011f46:	4770      	bx	lr
            available = digital.out.ports && digital.outx.mask;
 8011f48:	2000      	movs	r0, #0
 8011f4a:	4770      	bx	lr
 8011f4c:	2001      	movs	r0, #1
            break;
 8011f4e:	4770      	bx	lr
    switch(setting->id) {
 8011f50:	2000      	movs	r0, #0
        default:
            break;
    }

    return available;
}
 8011f52:	4770      	bx	lr
 8011f54:	20001e08 	.word	0x20001e08

08011f58 <aux_get_value>:

static uint32_t aux_get_value (setting_id_t id)
{
    uint32_t value = 0;

    switch(id) {
 8011f58:	f5a0 70b9 	sub.w	r0, r0, #370	@ 0x172
 8011f5c:	2803      	cmp	r0, #3
 8011f5e:	d813      	bhi.n	8011f88 <aux_get_value+0x30>
 8011f60:	e8df f000 	tbb	[pc, r0]
 8011f64:	0e0a0602 	.word	0x0e0a0602

        case Settings_IoPort_InvertIn:
            value = settings.ioport.invert_in.mask;
 8011f68:	4b08      	ldr	r3, [pc, #32]	@ (8011f8c <aux_get_value+0x34>)
 8011f6a:	f893 0168 	ldrb.w	r0, [r3, #360]	@ 0x168
            break;
 8011f6e:	4770      	bx	lr

        case Settings_IoPort_Pullup_Disable:
            value = settings.ioport.pullup_disable_in.mask;
 8011f70:	4b06      	ldr	r3, [pc, #24]	@ (8011f8c <aux_get_value+0x34>)
 8011f72:	f893 0169 	ldrb.w	r0, [r3, #361]	@ 0x169
            break;
 8011f76:	4770      	bx	lr

        case Settings_IoPort_InvertOut:
            value = settings.ioport.invert_out.mask;
 8011f78:	4b04      	ldr	r3, [pc, #16]	@ (8011f8c <aux_get_value+0x34>)
 8011f7a:	f893 016a 	ldrb.w	r0, [r3, #362]	@ 0x16a
            break;
 8011f7e:	4770      	bx	lr

        case Settings_IoPort_OD_Enable:
            value = settings.ioport.od_enable_out.mask;
 8011f80:	4b02      	ldr	r3, [pc, #8]	@ (8011f8c <aux_get_value+0x34>)
 8011f82:	f893 016b 	ldrb.w	r0, [r3, #363]	@ 0x16b
            break;
 8011f86:	4770      	bx	lr
    switch(id) {
 8011f88:	2000      	movs	r0, #0
        default:
            break;
    }

    return value;
}
 8011f8a:	4770      	bx	lr
 8011f8c:	200024a8 	.word	0x200024a8

08011f90 <ioports_available>:
{
 8011f90:	b508      	push	{r3, lr}
    if(hal.port.get_pin_info) {
 8011f92:	4b28      	ldr	r3, [pc, #160]	@ (8012034 <ioports_available+0xa4>)
 8011f94:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d037      	beq.n	801200c <ioports_available+0x7c>
        if(type == Port_Digital) {
 8011f9c:	2801      	cmp	r0, #1
 8011f9e:	d008      	beq.n	8011fb2 <ioports_available+0x22>
            if(dir == Port_Input)
 8011fa0:	bb39      	cbnz	r1, 8011ff2 <ioports_available+0x62>
                ports = analog_in == -1 ? (analog_in = ioports_count(type, dir)) : (uint8_t)analog_in;
 8011fa2:	4b25      	ldr	r3, [pc, #148]	@ (8012038 <ioports_available+0xa8>)
 8011fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fac:	d01c      	beq.n	8011fe8 <ioports_available+0x58>
 8011fae:	b2d8      	uxtb	r0, r3
}
 8011fb0:	bd08      	pop	{r3, pc}
            if(dir == Port_Input)
 8011fb2:	b961      	cbnz	r1, 8011fce <ioports_available+0x3e>
                ports = digital_in == -1 ? (digital_in = ioports_count(type, dir)) : (uint8_t)digital_in;
 8011fb4:	4b21      	ldr	r3, [pc, #132]	@ (801203c <ioports_available+0xac>)
 8011fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fbe:	d001      	beq.n	8011fc4 <ioports_available+0x34>
 8011fc0:	b2d8      	uxtb	r0, r3
 8011fc2:	e7f5      	b.n	8011fb0 <ioports_available+0x20>
 8011fc4:	f7ff ff78 	bl	8011eb8 <ioports_count>
 8011fc8:	4b1c      	ldr	r3, [pc, #112]	@ (801203c <ioports_available+0xac>)
 8011fca:	8018      	strh	r0, [r3, #0]
 8011fcc:	e7f0      	b.n	8011fb0 <ioports_available+0x20>
                ports = digital_out == -1 ? (digital_out = ioports_count(type, dir)) : (uint8_t)digital_out;
 8011fce:	4b1c      	ldr	r3, [pc, #112]	@ (8012040 <ioports_available+0xb0>)
 8011fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fd8:	d001      	beq.n	8011fde <ioports_available+0x4e>
 8011fda:	b2d8      	uxtb	r0, r3
 8011fdc:	e7e8      	b.n	8011fb0 <ioports_available+0x20>
 8011fde:	f7ff ff6b 	bl	8011eb8 <ioports_count>
 8011fe2:	4b17      	ldr	r3, [pc, #92]	@ (8012040 <ioports_available+0xb0>)
 8011fe4:	8018      	strh	r0, [r3, #0]
 8011fe6:	e7e3      	b.n	8011fb0 <ioports_available+0x20>
                ports = analog_in == -1 ? (analog_in = ioports_count(type, dir)) : (uint8_t)analog_in;
 8011fe8:	f7ff ff66 	bl	8011eb8 <ioports_count>
 8011fec:	4b12      	ldr	r3, [pc, #72]	@ (8012038 <ioports_available+0xa8>)
 8011fee:	8018      	strh	r0, [r3, #0]
 8011ff0:	e7de      	b.n	8011fb0 <ioports_available+0x20>
                ports = analog_out == -1 ? (analog_out = ioports_count(type, dir)) : (uint8_t)analog_out;
 8011ff2:	4b14      	ldr	r3, [pc, #80]	@ (8012044 <ioports_available+0xb4>)
 8011ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ffc:	d001      	beq.n	8012002 <ioports_available+0x72>
 8011ffe:	b2d8      	uxtb	r0, r3
 8012000:	e7d6      	b.n	8011fb0 <ioports_available+0x20>
 8012002:	f7ff ff59 	bl	8011eb8 <ioports_count>
 8012006:	4b0f      	ldr	r3, [pc, #60]	@ (8012044 <ioports_available+0xb4>)
 8012008:	8018      	strh	r0, [r3, #0]
 801200a:	e7d1      	b.n	8011fb0 <ioports_available+0x20>
        if(type == Port_Digital)
 801200c:	2801      	cmp	r0, #1
 801200e:	d004      	beq.n	801201a <ioports_available+0x8a>
            ports = dir == Port_Input ? hal.port.num_analog_in : hal.port.num_analog_out;
 8012010:	b961      	cbnz	r1, 801202c <ioports_available+0x9c>
 8012012:	4b08      	ldr	r3, [pc, #32]	@ (8012034 <ioports_available+0xa4>)
 8012014:	f893 0116 	ldrb.w	r0, [r3, #278]	@ 0x116
 8012018:	e7ca      	b.n	8011fb0 <ioports_available+0x20>
            ports = dir == Port_Input ? hal.port.num_digital_in : hal.port.num_digital_out;
 801201a:	b919      	cbnz	r1, 8012024 <ioports_available+0x94>
 801201c:	4b05      	ldr	r3, [pc, #20]	@ (8012034 <ioports_available+0xa4>)
 801201e:	f893 0114 	ldrb.w	r0, [r3, #276]	@ 0x114
 8012022:	e7c5      	b.n	8011fb0 <ioports_available+0x20>
 8012024:	4b03      	ldr	r3, [pc, #12]	@ (8012034 <ioports_available+0xa4>)
 8012026:	f893 0115 	ldrb.w	r0, [r3, #277]	@ 0x115
 801202a:	e7c1      	b.n	8011fb0 <ioports_available+0x20>
            ports = dir == Port_Input ? hal.port.num_analog_in : hal.port.num_analog_out;
 801202c:	4b01      	ldr	r3, [pc, #4]	@ (8012034 <ioports_available+0xa4>)
 801202e:	f893 0117 	ldrb.w	r0, [r3, #279]	@ 0x117
 8012032:	e7bd      	b.n	8011fb0 <ioports_available+0x20>
 8012034:	20001a90 	.word	0x20001a90
 8012038:	2000020e 	.word	0x2000020e
 801203c:	20000212 	.word	0x20000212
 8012040:	20000210 	.word	0x20000210
 8012044:	2000020c 	.word	0x2000020c

08012048 <ioports_add>:
{
 8012048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801204c:	4605      	mov	r5, r0
 801204e:	4689      	mov	r9, r1
 8012050:	461c      	mov	r4, r3
    ports->get_pnum = get_pnum;
 8012052:	4b81      	ldr	r3, [pc, #516]	@ (8012258 <ioports_add+0x210>)
 8012054:	6143      	str	r3, [r0, #20]
    if(type == Port_Digital) {
 8012056:	2901      	cmp	r1, #1
 8012058:	d017      	beq.n	801208a <ioports_add+0x42>
        analog_in = analog_out = -1;
 801205a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801205e:	497f      	ldr	r1, [pc, #508]	@ (801225c <ioports_add+0x214>)
 8012060:	800b      	strh	r3, [r1, #0]
 8012062:	497f      	ldr	r1, [pc, #508]	@ (8012260 <ioports_add+0x218>)
 8012064:	800b      	strh	r3, [r1, #0]
        if(n_in) {
 8012066:	2a00      	cmp	r2, #0
 8012068:	d140      	bne.n	80120ec <ioports_add+0xa4>
        if(n_out) {
 801206a:	2c00      	cmp	r4, #0
 801206c:	d150      	bne.n	8012110 <ioports_add+0xc8>
        cfg = &analog;
 801206e:	f8df a204 	ldr.w	sl, [pc, #516]	@ 8012274 <ioports_add+0x22c>
    if((n_ports = max(ports->in.n_ports, ports->out.n_ports)) > 0)  {
 8012072:	7b2f      	ldrb	r7, [r5, #12]
 8012074:	792b      	ldrb	r3, [r5, #4]
 8012076:	429f      	cmp	r7, r3
 8012078:	bf38      	it	cc
 801207a:	461f      	movcc	r7, r3
 801207c:	2f00      	cmp	r7, #0
 801207e:	d15b      	bne.n	8012138 <ioports_add+0xf0>
}
 8012080:	1e38      	subs	r0, r7, #0
 8012082:	bf18      	it	ne
 8012084:	2001      	movne	r0, #1
 8012086:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        digital_in = digital_out = -1;
 801208a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801208e:	4975      	ldr	r1, [pc, #468]	@ (8012264 <ioports_add+0x21c>)
 8012090:	800b      	strh	r3, [r1, #0]
 8012092:	4975      	ldr	r1, [pc, #468]	@ (8012268 <ioports_add+0x220>)
 8012094:	800b      	strh	r3, [r1, #0]
        if(n_in) {
 8012096:	b91a      	cbnz	r2, 80120a0 <ioports_add+0x58>
        if(n_out) {
 8012098:	b9a4      	cbnz	r4, 80120c4 <ioports_add+0x7c>
        cfg = &digital;
 801209a:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 8012270 <ioports_add+0x228>
 801209e:	e7e8      	b.n	8012072 <ioports_add+0x2a>
            ports->in.n_start = hal.port.num_digital_in;
 80120a0:	4b72      	ldr	r3, [pc, #456]	@ (801226c <ioports_add+0x224>)
 80120a2:	f893 1114 	ldrb.w	r1, [r3, #276]	@ 0x114
 80120a6:	7141      	strb	r1, [r0, #5]
            hal.port.num_digital_in += (ports->in.n_ports = n_in);
 80120a8:	7102      	strb	r2, [r0, #4]
 80120aa:	f893 1114 	ldrb.w	r1, [r3, #276]	@ 0x114
 80120ae:	440a      	add	r2, r1
 80120b0:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            ports->in.map = malloc(ports->in.n_ports * sizeof(ports->in.n_ports));
 80120b4:	7900      	ldrb	r0, [r0, #4]
 80120b6:	f010 fd71 	bl	8022b9c <malloc>
 80120ba:	60a8      	str	r0, [r5, #8]
            digital.in.ports = &ports->in;
 80120bc:	1d2b      	adds	r3, r5, #4
 80120be:	4a6c      	ldr	r2, [pc, #432]	@ (8012270 <ioports_add+0x228>)
 80120c0:	6013      	str	r3, [r2, #0]
 80120c2:	e7e9      	b.n	8012098 <ioports_add+0x50>
            ports->out.n_start = hal.port.num_digital_out;
 80120c4:	4b69      	ldr	r3, [pc, #420]	@ (801226c <ioports_add+0x224>)
 80120c6:	f893 2115 	ldrb.w	r2, [r3, #277]	@ 0x115
 80120ca:	736a      	strb	r2, [r5, #13]
            hal.port.num_digital_out += (ports->out.n_ports = n_out);
 80120cc:	732c      	strb	r4, [r5, #12]
 80120ce:	f893 2115 	ldrb.w	r2, [r3, #277]	@ 0x115
 80120d2:	4422      	add	r2, r4
 80120d4:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
            ports->out.map = malloc(ports->out.n_ports * sizeof(ports->out.n_ports));
 80120d8:	7b28      	ldrb	r0, [r5, #12]
 80120da:	f010 fd5f 	bl	8022b9c <malloc>
 80120de:	6128      	str	r0, [r5, #16]
            digital.out.ports = &ports->out;
 80120e0:	f105 030c 	add.w	r3, r5, #12
 80120e4:	4a62      	ldr	r2, [pc, #392]	@ (8012270 <ioports_add+0x228>)
 80120e6:	6393      	str	r3, [r2, #56]	@ 0x38
        cfg = &digital;
 80120e8:	4692      	mov	sl, r2
 80120ea:	e7c2      	b.n	8012072 <ioports_add+0x2a>
            ports->in.n_start = hal.port.num_analog_in;
 80120ec:	4b5f      	ldr	r3, [pc, #380]	@ (801226c <ioports_add+0x224>)
 80120ee:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
 80120f2:	7141      	strb	r1, [r0, #5]
            hal.port.num_analog_in += (ports->in.n_ports = n_in);
 80120f4:	7102      	strb	r2, [r0, #4]
 80120f6:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
 80120fa:	440a      	add	r2, r1
 80120fc:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
            ports->in.map = malloc(ports->in.n_ports * sizeof(ports->in.n_ports));
 8012100:	7900      	ldrb	r0, [r0, #4]
 8012102:	f010 fd4b 	bl	8022b9c <malloc>
 8012106:	60a8      	str	r0, [r5, #8]
            analog.in.ports = &ports->in;
 8012108:	1d2b      	adds	r3, r5, #4
 801210a:	4a5a      	ldr	r2, [pc, #360]	@ (8012274 <ioports_add+0x22c>)
 801210c:	6013      	str	r3, [r2, #0]
 801210e:	e7ac      	b.n	801206a <ioports_add+0x22>
            ports->out.n_start = hal.port.num_analog_out;
 8012110:	4b56      	ldr	r3, [pc, #344]	@ (801226c <ioports_add+0x224>)
 8012112:	f893 2117 	ldrb.w	r2, [r3, #279]	@ 0x117
 8012116:	736a      	strb	r2, [r5, #13]
            hal.port.num_analog_out += (ports->out.n_ports = n_out);
 8012118:	732c      	strb	r4, [r5, #12]
 801211a:	f893 2117 	ldrb.w	r2, [r3, #279]	@ 0x117
 801211e:	4422      	add	r2, r4
 8012120:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
            ports->out.map = malloc(ports->out.n_ports * sizeof(ports->out.n_ports));
 8012124:	7b28      	ldrb	r0, [r5, #12]
 8012126:	f010 fd39 	bl	8022b9c <malloc>
 801212a:	6128      	str	r0, [r5, #16]
            analog.out.ports = &ports->out;
 801212c:	f105 030c 	add.w	r3, r5, #12
 8012130:	4a50      	ldr	r2, [pc, #320]	@ (8012274 <ioports_add+0x22c>)
 8012132:	6393      	str	r3, [r2, #56]	@ 0x38
        cfg = &analog;
 8012134:	4692      	mov	sl, r2
 8012136:	e79c      	b.n	8012072 <ioports_add+0x2a>
        if((ports->pnum = pn = malloc((3 * n_ports + (n_ports > 9 ? n_ports - 10 : 0)) + 1)))
 8012138:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 801213c:	2f0a      	cmp	r7, #10
 801213e:	bf2c      	ite	cs
 8012140:	19c0      	addcs	r0, r0, r7
 8012142:	300a      	addcc	r0, #10
 8012144:	3809      	subs	r0, #9
 8012146:	f010 fd29 	bl	8022b9c <malloc>
 801214a:	4606      	mov	r6, r0
 801214c:	6028      	str	r0, [r5, #0]
 801214e:	2800      	cmp	r0, #0
 8012150:	d096      	beq.n	8012080 <ioports_add+0x38>
          for(i = 0; i < n_ports; i++) {
 8012152:	2400      	movs	r4, #0
 8012154:	e02a      	b.n	80121ac <ioports_add+0x164>
                *pn = type == Port_Digital ? 'P' : 'E';
 8012156:	2350      	movs	r3, #80	@ 0x50
 8012158:	e030      	b.n	80121bc <ioports_add+0x174>
                    cfg->inx.mask = (cfg->inx.mask << 1) + 1;
 801215a:	f89a 3070 	ldrb.w	r3, [sl, #112]	@ 0x70
 801215e:	005b      	lsls	r3, r3, #1
 8012160:	b2db      	uxtb	r3, r3
 8012162:	3301      	adds	r3, #1
 8012164:	f88a 3070 	strb.w	r3, [sl, #112]	@ 0x70
                    strcat(cfg->in.port_names, i == 0 ? "Aux " : ",Aux ");
 8012168:	f10a 0804 	add.w	r8, sl, #4
 801216c:	b15c      	cbz	r4, 8012186 <ioports_add+0x13e>
 801216e:	4942      	ldr	r1, [pc, #264]	@ (8012278 <ioports_add+0x230>)
 8012170:	4640      	mov	r0, r8
 8012172:	f012 fde4 	bl	8024d3e <strcat>
                    strcat(cfg->in.port_names, uitoa(i));
 8012176:	4620      	mov	r0, r4
 8012178:	f003 fc22 	bl	80159c0 <uitoa>
 801217c:	4601      	mov	r1, r0
 801217e:	4640      	mov	r0, r8
 8012180:	f012 fddd 	bl	8024d3e <strcat>
 8012184:	e03e      	b.n	8012204 <ioports_add+0x1bc>
                    strcat(cfg->in.port_names, i == 0 ? "Aux " : ",Aux ");
 8012186:	493d      	ldr	r1, [pc, #244]	@ (801227c <ioports_add+0x234>)
 8012188:	e7f2      	b.n	8012170 <ioports_add+0x128>
                    strcat(cfg->out.port_names, i == 0 ? "Aux " : ",Aux ");
 801218a:	493c      	ldr	r1, [pc, #240]	@ (801227c <ioports_add+0x234>)
 801218c:	4640      	mov	r0, r8
 801218e:	f012 fdd6 	bl	8024d3e <strcat>
                    strcat(cfg->out.port_names, uitoa(i));
 8012192:	4620      	mov	r0, r4
 8012194:	f003 fc14 	bl	80159c0 <uitoa>
 8012198:	4601      	mov	r1, r0
 801219a:	4640      	mov	r0, r8
 801219c:	f012 fdcf 	bl	8024d3e <strcat>
            if(pn)
 80121a0:	b11e      	cbz	r6, 80121aa <ioports_add+0x162>
                pn += i > 9 ? 4 : 3;
 80121a2:	2c09      	cmp	r4, #9
 80121a4:	d956      	bls.n	8012254 <ioports_add+0x20c>
 80121a6:	2304      	movs	r3, #4
 80121a8:	441e      	add	r6, r3
          for(i = 0; i < n_ports; i++) {
 80121aa:	3401      	adds	r4, #1
 80121ac:	42bc      	cmp	r4, r7
 80121ae:	f4bf af67 	bcs.w	8012080 <ioports_add+0x38>
            if(pn) {
 80121b2:	b16e      	cbz	r6, 80121d0 <ioports_add+0x188>
                *pn = type == Port_Digital ? 'P' : 'E';
 80121b4:	f1b9 0f01 	cmp.w	r9, #1
 80121b8:	d0cd      	beq.n	8012156 <ioports_add+0x10e>
 80121ba:	2345      	movs	r3, #69	@ 0x45
 80121bc:	46b0      	mov	r8, r6
 80121be:	f808 3b01 	strb.w	r3, [r8], #1
                strcpy(pn + 1, uitoa(i));
 80121c2:	4620      	mov	r0, r4
 80121c4:	f003 fbfc 	bl	80159c0 <uitoa>
 80121c8:	4601      	mov	r1, r0
 80121ca:	4640      	mov	r0, r8
 80121cc:	f012 ff07 	bl	8024fde <strcpy>
            if(ports->in.n_ports && i < ports->in.n_ports) {
 80121d0:	792b      	ldrb	r3, [r5, #4]
 80121d2:	b1bb      	cbz	r3, 8012204 <ioports_add+0x1bc>
 80121d4:	42a3      	cmp	r3, r4
 80121d6:	d915      	bls.n	8012204 <ioports_add+0x1bc>
                if(ports->in.map)
 80121d8:	68ab      	ldr	r3, [r5, #8]
 80121da:	b103      	cbz	r3, 80121de <ioports_add+0x196>
                    ports->in.map[i] = i;
 80121dc:	551c      	strb	r4, [r3, r4]
                if(hal.port.set_pin_description)
 80121de:	4b23      	ldr	r3, [pc, #140]	@ (801226c <ioports_add+0x224>)
 80121e0:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 80121e4:	f1b8 0f00 	cmp.w	r8, #0
 80121e8:	d00a      	beq.n	8012200 <ioports_add+0x1b8>
                    hal.port.set_pin_description(type, Port_Input, i, get_pnum(ports, i));
 80121ea:	fa5f fb84 	uxtb.w	fp, r4
 80121ee:	4659      	mov	r1, fp
 80121f0:	4628      	mov	r0, r5
 80121f2:	f7ff fe79 	bl	8011ee8 <get_pnum>
 80121f6:	4603      	mov	r3, r0
 80121f8:	465a      	mov	r2, fp
 80121fa:	2100      	movs	r1, #0
 80121fc:	4648      	mov	r0, r9
 80121fe:	47c0      	blx	r8
                if(i < 8) {
 8012200:	2c07      	cmp	r4, #7
 8012202:	d9aa      	bls.n	801215a <ioports_add+0x112>
            if(ports->out.n_ports && i < ports->out.n_ports) {
 8012204:	7b2b      	ldrb	r3, [r5, #12]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d0ca      	beq.n	80121a0 <ioports_add+0x158>
 801220a:	42a3      	cmp	r3, r4
 801220c:	d9c8      	bls.n	80121a0 <ioports_add+0x158>
                if(ports->out.map)
 801220e:	692b      	ldr	r3, [r5, #16]
 8012210:	b103      	cbz	r3, 8012214 <ioports_add+0x1cc>
                    ports->out.map[i] = i;
 8012212:	551c      	strb	r4, [r3, r4]
                if(hal.port.set_pin_description)
 8012214:	4b15      	ldr	r3, [pc, #84]	@ (801226c <ioports_add+0x224>)
 8012216:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 801221a:	f1b8 0f00 	cmp.w	r8, #0
 801221e:	d00a      	beq.n	8012236 <ioports_add+0x1ee>
                    hal.port.set_pin_description(type, Port_Output, i, get_pnum(ports, i));
 8012220:	fa5f fb84 	uxtb.w	fp, r4
 8012224:	4659      	mov	r1, fp
 8012226:	4628      	mov	r0, r5
 8012228:	f7ff fe5e 	bl	8011ee8 <get_pnum>
 801222c:	4603      	mov	r3, r0
 801222e:	465a      	mov	r2, fp
 8012230:	2101      	movs	r1, #1
 8012232:	4648      	mov	r0, r9
 8012234:	47c0      	blx	r8
                if(i < 8) {
 8012236:	2c07      	cmp	r4, #7
 8012238:	d8b2      	bhi.n	80121a0 <ioports_add+0x158>
                    cfg->outx.mask = (cfg->outx.mask << 1) + 1;
 801223a:	f89a 3071 	ldrb.w	r3, [sl, #113]	@ 0x71
 801223e:	005b      	lsls	r3, r3, #1
 8012240:	b2db      	uxtb	r3, r3
 8012242:	3301      	adds	r3, #1
 8012244:	f88a 3071 	strb.w	r3, [sl, #113]	@ 0x71
                    strcat(cfg->out.port_names, i == 0 ? "Aux " : ",Aux ");
 8012248:	f10a 083c 	add.w	r8, sl, #60	@ 0x3c
 801224c:	2c00      	cmp	r4, #0
 801224e:	d09c      	beq.n	801218a <ioports_add+0x142>
 8012250:	4909      	ldr	r1, [pc, #36]	@ (8012278 <ioports_add+0x230>)
 8012252:	e79b      	b.n	801218c <ioports_add+0x144>
                pn += i > 9 ? 4 : 3;
 8012254:	2303      	movs	r3, #3
 8012256:	e7a7      	b.n	80121a8 <ioports_add+0x160>
 8012258:	08011ee9 	.word	0x08011ee9
 801225c:	2000020c 	.word	0x2000020c
 8012260:	2000020e 	.word	0x2000020e
 8012264:	20000210 	.word	0x20000210
 8012268:	20000212 	.word	0x20000212
 801226c:	20001a90 	.word	0x20001a90
 8012270:	20001e08 	.word	0x20001e08
 8012274:	20001e7c 	.word	0x20001e7c
 8012278:	0802b564 	.word	0x0802b564
 801227c:	0802b55c 	.word	0x0802b55c

08012280 <ioports_map_reverse>:
{
 8012280:	4603      	mov	r3, r0
 8012282:	4608      	mov	r0, r1
    if(type->map) {
 8012284:	6859      	ldr	r1, [r3, #4]
 8012286:	b131      	cbz	r1, 8012296 <ioports_map_reverse+0x16>
        uint_fast8_t idx = type->n_ports;
 8012288:	781b      	ldrb	r3, [r3, #0]
            if(type->map[--idx] == port) {
 801228a:	3b01      	subs	r3, #1
 801228c:	5cca      	ldrb	r2, [r1, r3]
 801228e:	4282      	cmp	r2, r0
 8012290:	d002      	beq.n	8012298 <ioports_map_reverse+0x18>
        } while(idx);
 8012292:	2b00      	cmp	r3, #0
 8012294:	d1f9      	bne.n	801228a <ioports_map_reverse+0xa>
}
 8012296:	4770      	bx	lr
                port = idx;
 8012298:	b2d8      	uxtb	r0, r3
                break;
 801229a:	4770      	bx	lr

0801229c <ioport_settings_load>:
};

#endif

static void ioport_settings_load (void)
{
 801229c:	b530      	push	{r4, r5, lr}
 801229e:	b083      	sub	sp, #12
    uint8_t port;
    xbar_t *xbar;
    gpio_in_config_t in_config = {0};
 80122a0:	2300      	movs	r3, #0
 80122a2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80122a6:	f88d 3006 	strb.w	r3, [sp, #6]
    gpio_out_config_t out_config = {0};
 80122aa:	f8ad 3000 	strh.w	r3, [sp]
 80122ae:	f88d 3002 	strb.w	r3, [sp, #2]

    settings.ioport.invert_in.mask &= digital.inx.mask;
 80122b2:	4b5e      	ldr	r3, [pc, #376]	@ (801242c <ioport_settings_load+0x190>)
 80122b4:	f893 0168 	ldrb.w	r0, [r3, #360]	@ 0x168
 80122b8:	495d      	ldr	r1, [pc, #372]	@ (8012430 <ioport_settings_load+0x194>)
 80122ba:	f891 2070 	ldrb.w	r2, [r1, #112]	@ 0x70
 80122be:	4010      	ands	r0, r2
 80122c0:	f883 0168 	strb.w	r0, [r3, #360]	@ 0x168
    settings.ioport.pullup_disable_in.mask &= digital.inx.mask;
 80122c4:	f893 0169 	ldrb.w	r0, [r3, #361]	@ 0x169
 80122c8:	4002      	ands	r2, r0
 80122ca:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
    settings.ioport.invert_out.mask &= digital.outx.mask;
 80122ce:	f893 016a 	ldrb.w	r0, [r3, #362]	@ 0x16a
 80122d2:	f891 2071 	ldrb.w	r2, [r1, #113]	@ 0x71
 80122d6:	4010      	ands	r0, r2
 80122d8:	f883 016a 	strb.w	r0, [r3, #362]	@ 0x16a
    settings.ioport.od_enable_out.mask &= digital.outx.mask;
 80122dc:	f893 016b 	ldrb.w	r0, [r3, #363]	@ 0x16b
 80122e0:	4002      	ands	r2, r0
 80122e2:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b

    if(digital.in.ports && (port = digital.in.ports->n_ports)) do {
 80122e6:	680b      	ldr	r3, [r1, #0]
 80122e8:	b10b      	cbz	r3, 80122ee <ioport_settings_load+0x52>
 80122ea:	781c      	ldrb	r4, [r3, #0]
 80122ec:	bb34      	cbnz	r4, 801233c <ioport_settings_load+0xa0>
                xbar->config(xbar, &in_config, false);
            }
        }
    } while(port);

    if(digital.out.ports && (port = digital.out.ports->n_ports)) do {
 80122ee:	4b50      	ldr	r3, [pc, #320]	@ (8012430 <ioport_settings_load+0x194>)
 80122f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122f2:	b113      	cbz	r3, 80122fa <ioport_settings_load+0x5e>
 80122f4:	781c      	ldrb	r4, [r3, #0]
 80122f6:	2c00      	cmp	r4, #0
 80122f8:	d169      	bne.n	80123ce <ioport_settings_load+0x132>
                xbar->config(xbar, &out_config, false);
            }
        }
    } while(port);

    if(on_settings_loaded)
 80122fa:	4b4e      	ldr	r3, [pc, #312]	@ (8012434 <ioport_settings_load+0x198>)
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	b103      	cbz	r3, 8012302 <ioport_settings_load+0x66>
        on_settings_loaded();
 8012300:	4798      	blx	r3
}
 8012302:	b003      	add	sp, #12
 8012304:	bd30      	pop	{r4, r5, pc}
                    in_config.inverted = settings.probe.invert_probe_pin;
 8012306:	4b49      	ldr	r3, [pc, #292]	@ (801242c <ioport_settings_load+0x190>)
 8012308:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 801230c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8012310:	f88d 3004 	strb.w	r3, [sp, #4]
                if(in_config.inverted)
 8012314:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d04a      	beq.n	80123b2 <ioport_settings_load+0x116>
                    settings.ioport.invert_in.mask |= (1 << xbar->id);
 801231c:	4943      	ldr	r1, [pc, #268]	@ (801242c <ioport_settings_load+0x190>)
 801231e:	f891 3168 	ldrb.w	r3, [r1, #360]	@ 0x168
 8012322:	7828      	ldrb	r0, [r5, #0]
 8012324:	2201      	movs	r2, #1
 8012326:	4082      	lsls	r2, r0
 8012328:	4313      	orrs	r3, r2
 801232a:	f881 3168 	strb.w	r3, [r1, #360]	@ 0x168
                xbar->config(xbar, &in_config, false);
 801232e:	69ab      	ldr	r3, [r5, #24]
 8012330:	2200      	movs	r2, #0
 8012332:	a901      	add	r1, sp, #4
 8012334:	4628      	mov	r0, r5
 8012336:	4798      	blx	r3
    } while(port);
 8012338:	2c00      	cmp	r4, #0
 801233a:	d0d8      	beq.n	80122ee <ioport_settings_load+0x52>
        if((xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, --port)))) {
 801233c:	4b3e      	ldr	r3, [pc, #248]	@ (8012438 <ioport_settings_load+0x19c>)
 801233e:	f8d3 5128 	ldr.w	r5, [r3, #296]	@ 0x128
 8012342:	3c01      	subs	r4, #1
 8012344:	b2e4      	uxtb	r4, r4
 8012346:	4621      	mov	r1, r4
 8012348:	4b39      	ldr	r3, [pc, #228]	@ (8012430 <ioport_settings_load+0x194>)
 801234a:	6818      	ldr	r0, [r3, #0]
 801234c:	f7ff ff98 	bl	8012280 <ioports_map_reverse>
 8012350:	4602      	mov	r2, r0
 8012352:	2100      	movs	r1, #0
 8012354:	2001      	movs	r0, #1
 8012356:	47a8      	blx	r5
 8012358:	4605      	mov	r5, r0
 801235a:	2800      	cmp	r0, #0
 801235c:	d0ec      	beq.n	8012338 <ioport_settings_load+0x9c>
            if(xbar->config) {
 801235e:	6983      	ldr	r3, [r0, #24]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d0e9      	beq.n	8012338 <ioport_settings_load+0x9c>
                in_config.debounce = xbar->mode.debounce;
 8012364:	7dc3      	ldrb	r3, [r0, #23]
 8012366:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801236a:	f88d 3005 	strb.w	r3, [sp, #5]
                in_config.pull_mode = (pull_mode_t)xbar->mode.pull_mode;
 801236e:	7d83      	ldrb	r3, [r0, #22]
 8012370:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8012374:	f88d 3006 	strb.w	r3, [sp, #6]
                in_config.inverted = !!(settings.ioport.invert_in.mask & (1 << xbar->id));
 8012378:	4b2c      	ldr	r3, [pc, #176]	@ (801242c <ioport_settings_load+0x190>)
 801237a:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 801237e:	7802      	ldrb	r2, [r0, #0]
 8012380:	4113      	asrs	r3, r2
 8012382:	f003 0301 	and.w	r3, r3, #1
 8012386:	f88d 3004 	strb.w	r3, [sp, #4]
                if(xbar->function == Input_Probe)
 801238a:	7840      	ldrb	r0, [r0, #1]
 801238c:	280e      	cmp	r0, #14
 801238e:	d0ba      	beq.n	8012306 <ioport_settings_load+0x6a>
                else if(xbar->function < Input_Probe) {
 8012390:	280d      	cmp	r0, #13
 8012392:	d8bf      	bhi.n	8012314 <ioport_settings_load+0x78>
                    if((ctrl = xbar_fn_to_signals_mask(xbar->function)).mask)
 8012394:	f7fa feb8 	bl	800d108 <xbar_fn_to_signals_mask>
 8012398:	b280      	uxth	r0, r0
 801239a:	2800      	cmp	r0, #0
 801239c:	d0ba      	beq.n	8012314 <ioport_settings_load+0x78>
                        in_config.inverted = !!(settings.control_invert.mask & ctrl.mask);
 801239e:	4b23      	ldr	r3, [pc, #140]	@ (801242c <ioport_settings_load+0x190>)
 80123a0:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 80123a4:	4218      	tst	r0, r3
 80123a6:	bf14      	ite	ne
 80123a8:	2301      	movne	r3, #1
 80123aa:	2300      	moveq	r3, #0
 80123ac:	f88d 3004 	strb.w	r3, [sp, #4]
 80123b0:	e7b0      	b.n	8012314 <ioport_settings_load+0x78>
                    settings.ioport.invert_in.mask &= ~(1 << xbar->id);
 80123b2:	491e      	ldr	r1, [pc, #120]	@ (801242c <ioport_settings_load+0x190>)
 80123b4:	f891 2168 	ldrb.w	r2, [r1, #360]	@ 0x168
 80123b8:	7828      	ldrb	r0, [r5, #0]
 80123ba:	2301      	movs	r3, #1
 80123bc:	4083      	lsls	r3, r0
 80123be:	43db      	mvns	r3, r3
 80123c0:	b25b      	sxtb	r3, r3
 80123c2:	4013      	ands	r3, r2
 80123c4:	f881 3168 	strb.w	r3, [r1, #360]	@ 0x168
 80123c8:	e7b1      	b.n	801232e <ioport_settings_load+0x92>
    } while(port);
 80123ca:	2c00      	cmp	r4, #0
 80123cc:	d095      	beq.n	80122fa <ioport_settings_load+0x5e>
        if((xbar = hal.port.get_pin_info(Port_Digital, Port_Output, ioports_map_reverse(digital.out.ports, --port)))) {
 80123ce:	4b1a      	ldr	r3, [pc, #104]	@ (8012438 <ioport_settings_load+0x19c>)
 80123d0:	f8d3 5128 	ldr.w	r5, [r3, #296]	@ 0x128
 80123d4:	3c01      	subs	r4, #1
 80123d6:	b2e4      	uxtb	r4, r4
 80123d8:	4621      	mov	r1, r4
 80123da:	4b15      	ldr	r3, [pc, #84]	@ (8012430 <ioport_settings_load+0x194>)
 80123dc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80123de:	f7ff ff4f 	bl	8012280 <ioports_map_reverse>
 80123e2:	4602      	mov	r2, r0
 80123e4:	2101      	movs	r1, #1
 80123e6:	4608      	mov	r0, r1
 80123e8:	47a8      	blx	r5
 80123ea:	4603      	mov	r3, r0
 80123ec:	2800      	cmp	r0, #0
 80123ee:	d0ec      	beq.n	80123ca <ioport_settings_load+0x12e>
            if(xbar->config && !(xbar->mode.pwm || xbar->mode.servo_pwm)) {
 80123f0:	6985      	ldr	r5, [r0, #24]
 80123f2:	2d00      	cmp	r5, #0
 80123f4:	d0e9      	beq.n	80123ca <ioport_settings_load+0x12e>
 80123f6:	7dc2      	ldrb	r2, [r0, #23]
 80123f8:	f012 0f30 	tst.w	r2, #48	@ 0x30
 80123fc:	d1e5      	bne.n	80123ca <ioport_settings_load+0x12e>
                out_config.inverted = !!(settings.ioport.invert_out.mask & (1 << xbar->id));
 80123fe:	490b      	ldr	r1, [pc, #44]	@ (801242c <ioport_settings_load+0x190>)
 8012400:	f891 216a 	ldrb.w	r2, [r1, #362]	@ 0x16a
 8012404:	7800      	ldrb	r0, [r0, #0]
 8012406:	4102      	asrs	r2, r0
 8012408:	f002 0201 	and.w	r2, r2, #1
 801240c:	f88d 2000 	strb.w	r2, [sp]
                out_config.open_drain = !!(settings.ioport.od_enable_out.mask & (1 << xbar->id));
 8012410:	f891 216b 	ldrb.w	r2, [r1, #363]	@ 0x16b
 8012414:	7819      	ldrb	r1, [r3, #0]
 8012416:	410a      	asrs	r2, r1
 8012418:	f002 0201 	and.w	r2, r2, #1
 801241c:	f88d 2001 	strb.w	r2, [sp, #1]
                xbar->config(xbar, &out_config, false);
 8012420:	2200      	movs	r2, #0
 8012422:	4669      	mov	r1, sp
 8012424:	4618      	mov	r0, r3
 8012426:	47a8      	blx	r5
 8012428:	e7cf      	b.n	80123ca <ioport_settings_load+0x12e>
 801242a:	bf00      	nop
 801242c:	200024a8 	.word	0x200024a8
 8012430:	20001e08 	.word	0x20001e08
 8012434:	20001ef4 	.word	0x20001ef4
 8012438:	20001a90 	.word	0x20001a90

0801243c <aux_set_value>:
{
 801243c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012440:	b082      	sub	sp, #8
 8012442:	4605      	mov	r5, r0
    switch(id) {
 8012444:	f5a0 73b9 	sub.w	r3, r0, #370	@ 0x172
 8012448:	2b03      	cmp	r3, #3
 801244a:	d84b      	bhi.n	80124e4 <aux_set_value+0xa8>
 801244c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012450:	004e0004 	.word	0x004e0004
 8012454:	00ea009d 	.word	0x00ea009d
            change.mask = (uint8_t)value & digital.inx.mask;
 8012458:	4b99      	ldr	r3, [pc, #612]	@ (80126c0 <aux_set_value+0x284>)
 801245a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 801245e:	ea01 0403 	and.w	r4, r1, r3
            if((changed.mask = settings.ioport.invert_in.mask ^ change.mask)) {
 8012462:	4b98      	ldr	r3, [pc, #608]	@ (80126c4 <aux_set_value+0x288>)
 8012464:	f893 2168 	ldrb.w	r2, [r3, #360]	@ 0x168
 8012468:	ea84 0302 	eor.w	r3, r4, r2
 801246c:	4294      	cmp	r4, r2
 801246e:	d031      	beq.n	80124d4 <aux_set_value+0x98>
                gpio_in_config_t config = {0};
 8012470:	2600      	movs	r6, #0
 8012472:	f8ad 6004 	strh.w	r6, [sp, #4]
 8012476:	f88d 6006 	strb.w	r6, [sp, #6]
 801247a:	e004      	b.n	8012486 <aux_set_value+0x4a>
                    port++;
 801247c:	3601      	adds	r6, #1
 801247e:	b2f6      	uxtb	r6, r6
                } while(changed.mask >>= 1);
 8012480:	087f      	lsrs	r7, r7, #1
 8012482:	463b      	mov	r3, r7
 8012484:	b337      	cbz	r7, 80124d4 <aux_set_value+0x98>
                    if((changed.mask & 0x01) && (xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, port)))) {
 8012486:	b2df      	uxtb	r7, r3
 8012488:	f013 0f01 	tst.w	r3, #1
 801248c:	d0f6      	beq.n	801247c <aux_set_value+0x40>
 801248e:	4b8e      	ldr	r3, [pc, #568]	@ (80126c8 <aux_set_value+0x28c>)
 8012490:	f8d3 8128 	ldr.w	r8, [r3, #296]	@ 0x128
 8012494:	4631      	mov	r1, r6
 8012496:	4b8a      	ldr	r3, [pc, #552]	@ (80126c0 <aux_set_value+0x284>)
 8012498:	6818      	ldr	r0, [r3, #0]
 801249a:	f7ff fef1 	bl	8012280 <ioports_map_reverse>
 801249e:	4602      	mov	r2, r0
 80124a0:	2100      	movs	r1, #0
 80124a2:	2001      	movs	r0, #1
 80124a4:	47c0      	blx	r8
 80124a6:	2800      	cmp	r0, #0
 80124a8:	d0e8      	beq.n	801247c <aux_set_value+0x40>
                        if(xbar->config) {
 80124aa:	f8d0 8018 	ldr.w	r8, [r0, #24]
 80124ae:	f1b8 0f00 	cmp.w	r8, #0
 80124b2:	d0e3      	beq.n	801247c <aux_set_value+0x40>
                            config.pull_mode = (pull_mode_t)xbar->mode.pull_mode;
 80124b4:	7d82      	ldrb	r2, [r0, #22]
 80124b6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80124ba:	f88d 2006 	strb.w	r2, [sp, #6]
                            config.inverted = !!(change.mask & (1 << xbar->id));
 80124be:	7802      	ldrb	r2, [r0, #0]
 80124c0:	fa44 f202 	asr.w	r2, r4, r2
 80124c4:	f002 0201 	and.w	r2, r2, #1
 80124c8:	f88d 2004 	strb.w	r2, [sp, #4]
                            xbar->config(xbar, &config, false);
 80124cc:	2200      	movs	r2, #0
 80124ce:	a901      	add	r1, sp, #4
 80124d0:	47c0      	blx	r8
 80124d2:	e7d3      	b.n	801247c <aux_set_value+0x40>
            settings.ioport.invert_in.mask = change.mask;
 80124d4:	4b7b      	ldr	r3, [pc, #492]	@ (80126c4 <aux_set_value+0x288>)
 80124d6:	f883 4168 	strb.w	r4, [r3, #360]	@ 0x168
            if(on_setting_changed)
 80124da:	4b7c      	ldr	r3, [pc, #496]	@ (80126cc <aux_set_value+0x290>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	b10b      	cbz	r3, 80124e4 <aux_set_value+0xa8>
                on_setting_changed(id);
 80124e0:	4628      	mov	r0, r5
 80124e2:	4798      	blx	r3
}
 80124e4:	2000      	movs	r0, #0
 80124e6:	b002      	add	sp, #8
 80124e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            change.mask = (uint8_t)value & digital.inx.mask;
 80124ec:	4b74      	ldr	r3, [pc, #464]	@ (80126c0 <aux_set_value+0x284>)
 80124ee:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80124f2:	ea01 0403 	and.w	r4, r1, r3
            if((changed.mask = settings.ioport.pullup_disable_in.mask ^ change.mask)) {
 80124f6:	4b73      	ldr	r3, [pc, #460]	@ (80126c4 <aux_set_value+0x288>)
 80124f8:	f893 2169 	ldrb.w	r2, [r3, #361]	@ 0x169
 80124fc:	ea84 0302 	eor.w	r3, r4, r2
 8012500:	4294      	cmp	r4, r2
 8012502:	d038      	beq.n	8012576 <aux_set_value+0x13a>
                gpio_in_config_t config = {0};
 8012504:	2600      	movs	r6, #0
 8012506:	f8ad 6004 	strh.w	r6, [sp, #4]
 801250a:	f88d 6006 	strb.w	r6, [sp, #6]
 801250e:	e012      	b.n	8012536 <aux_set_value+0xfa>
                            config.pull_mode = change.mask & (1 << xbar->id)  ? PullMode_Down : PullMode_Up;
 8012510:	2201      	movs	r2, #1
 8012512:	f88d 2006 	strb.w	r2, [sp, #6]
                            config.inverted = xbar->mode.inverted;
 8012516:	7dda      	ldrb	r2, [r3, #23]
 8012518:	f3c2 0280 	ubfx	r2, r2, #2, #1
 801251c:	f88d 2004 	strb.w	r2, [sp, #4]
                            config.debounce = xbar->mode.inverted;
 8012520:	f88d 2005 	strb.w	r2, [sp, #5]
                            xbar->config(xbar, &config, false);
 8012524:	2200      	movs	r2, #0
 8012526:	a901      	add	r1, sp, #4
 8012528:	4618      	mov	r0, r3
 801252a:	47c0      	blx	r8
                    port++;
 801252c:	3601      	adds	r6, #1
 801252e:	b2f6      	uxtb	r6, r6
                } while(changed.mask >>= 1);
 8012530:	087f      	lsrs	r7, r7, #1
 8012532:	463b      	mov	r3, r7
 8012534:	b1ff      	cbz	r7, 8012576 <aux_set_value+0x13a>
                    if((changed.mask & 0x01) && (xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, port)))) {
 8012536:	b2df      	uxtb	r7, r3
 8012538:	f013 0f01 	tst.w	r3, #1
 801253c:	d0f6      	beq.n	801252c <aux_set_value+0xf0>
 801253e:	4b62      	ldr	r3, [pc, #392]	@ (80126c8 <aux_set_value+0x28c>)
 8012540:	f8d3 8128 	ldr.w	r8, [r3, #296]	@ 0x128
 8012544:	4631      	mov	r1, r6
 8012546:	4b5e      	ldr	r3, [pc, #376]	@ (80126c0 <aux_set_value+0x284>)
 8012548:	6818      	ldr	r0, [r3, #0]
 801254a:	f7ff fe99 	bl	8012280 <ioports_map_reverse>
 801254e:	4602      	mov	r2, r0
 8012550:	2100      	movs	r1, #0
 8012552:	2001      	movs	r0, #1
 8012554:	47c0      	blx	r8
 8012556:	4603      	mov	r3, r0
 8012558:	2800      	cmp	r0, #0
 801255a:	d0e7      	beq.n	801252c <aux_set_value+0xf0>
                        if(xbar->config) {
 801255c:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8012560:	f1b8 0f00 	cmp.w	r8, #0
 8012564:	d0e2      	beq.n	801252c <aux_set_value+0xf0>
                            config.pull_mode = change.mask & (1 << xbar->id)  ? PullMode_Down : PullMode_Up;
 8012566:	7802      	ldrb	r2, [r0, #0]
 8012568:	fa44 f202 	asr.w	r2, r4, r2
 801256c:	f012 0f01 	tst.w	r2, #1
 8012570:	d0ce      	beq.n	8012510 <aux_set_value+0xd4>
 8012572:	2202      	movs	r2, #2
 8012574:	e7cd      	b.n	8012512 <aux_set_value+0xd6>
            settings.ioport.pullup_disable_in.mask = change.mask;
 8012576:	4b53      	ldr	r3, [pc, #332]	@ (80126c4 <aux_set_value+0x288>)
 8012578:	f883 4169 	strb.w	r4, [r3, #361]	@ 0x169
            if(on_setting_changed)
 801257c:	4b53      	ldr	r3, [pc, #332]	@ (80126cc <aux_set_value+0x290>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d0af      	beq.n	80124e4 <aux_set_value+0xa8>
                on_setting_changed(id);
 8012584:	4628      	mov	r0, r5
 8012586:	4798      	blx	r3
 8012588:	e7ac      	b.n	80124e4 <aux_set_value+0xa8>
            change.mask = (uint8_t)value & digital.outx.mask;
 801258a:	4b4d      	ldr	r3, [pc, #308]	@ (80126c0 <aux_set_value+0x284>)
 801258c:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8012590:	ea01 0403 	and.w	r4, r1, r3
            if((changed.mask = settings.ioport.invert_out.mask ^ change.mask)) {
 8012594:	4b4b      	ldr	r3, [pc, #300]	@ (80126c4 <aux_set_value+0x288>)
 8012596:	f893 216a 	ldrb.w	r2, [r3, #362]	@ 0x16a
 801259a:	ea84 0302 	eor.w	r3, r4, r2
 801259e:	4294      	cmp	r4, r2
 80125a0:	d0a0      	beq.n	80124e4 <aux_set_value+0xa8>
                gpio_out_config_t config = {0};
 80125a2:	2600      	movs	r6, #0
 80125a4:	f8ad 6004 	strh.w	r6, [sp, #4]
 80125a8:	f88d 6006 	strb.w	r6, [sp, #6]
 80125ac:	e004      	b.n	80125b8 <aux_set_value+0x17c>
                    port++;
 80125ae:	3601      	adds	r6, #1
 80125b0:	b2f6      	uxtb	r6, r6
                } while(changed.mask >>= 1);
 80125b2:	087f      	lsrs	r7, r7, #1
 80125b4:	463b      	mov	r3, r7
 80125b6:	b357      	cbz	r7, 801260e <aux_set_value+0x1d2>
                    if((changed.mask & 0x01) && (xbar = hal.port.get_pin_info(Port_Digital, Port_Output, ioports_map_reverse(digital.out.ports, port)))) {
 80125b8:	b2df      	uxtb	r7, r3
 80125ba:	f013 0f01 	tst.w	r3, #1
 80125be:	d0f6      	beq.n	80125ae <aux_set_value+0x172>
 80125c0:	4b41      	ldr	r3, [pc, #260]	@ (80126c8 <aux_set_value+0x28c>)
 80125c2:	f8d3 8128 	ldr.w	r8, [r3, #296]	@ 0x128
 80125c6:	4631      	mov	r1, r6
 80125c8:	4b3d      	ldr	r3, [pc, #244]	@ (80126c0 <aux_set_value+0x284>)
 80125ca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80125cc:	f7ff fe58 	bl	8012280 <ioports_map_reverse>
 80125d0:	4602      	mov	r2, r0
 80125d2:	2101      	movs	r1, #1
 80125d4:	4608      	mov	r0, r1
 80125d6:	47c0      	blx	r8
 80125d8:	2800      	cmp	r0, #0
 80125da:	d0e8      	beq.n	80125ae <aux_set_value+0x172>
                        if(xbar->config && !(xbar->mode.pwm || xbar->mode.servo_pwm)) {
 80125dc:	f8d0 8018 	ldr.w	r8, [r0, #24]
 80125e0:	f1b8 0f00 	cmp.w	r8, #0
 80125e4:	d0e3      	beq.n	80125ae <aux_set_value+0x172>
 80125e6:	7dc2      	ldrb	r2, [r0, #23]
 80125e8:	f012 0f30 	tst.w	r2, #48	@ 0x30
 80125ec:	d1df      	bne.n	80125ae <aux_set_value+0x172>
                            config.inverted = !!(change.mask & (1 << xbar->id));
 80125ee:	7802      	ldrb	r2, [r0, #0]
 80125f0:	fa44 f202 	asr.w	r2, r4, r2
 80125f4:	f002 0201 	and.w	r2, r2, #1
 80125f8:	f88d 2004 	strb.w	r2, [sp, #4]
                            config.open_drain = xbar->mode.open_drain;
 80125fc:	7d82      	ldrb	r2, [r0, #22]
 80125fe:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8012602:	f88d 2005 	strb.w	r2, [sp, #5]
                            xbar->config(xbar, &config, false);
 8012606:	2200      	movs	r2, #0
 8012608:	a901      	add	r1, sp, #4
 801260a:	47c0      	blx	r8
 801260c:	e7cf      	b.n	80125ae <aux_set_value+0x172>
                settings.ioport.invert_out.mask = change.mask;
 801260e:	4b2d      	ldr	r3, [pc, #180]	@ (80126c4 <aux_set_value+0x288>)
 8012610:	f883 416a 	strb.w	r4, [r3, #362]	@ 0x16a
                if(on_setting_changed)
 8012614:	4b2d      	ldr	r3, [pc, #180]	@ (80126cc <aux_set_value+0x290>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	2b00      	cmp	r3, #0
 801261a:	f43f af63 	beq.w	80124e4 <aux_set_value+0xa8>
                    on_setting_changed(id);
 801261e:	4628      	mov	r0, r5
 8012620:	4798      	blx	r3
 8012622:	e75f      	b.n	80124e4 <aux_set_value+0xa8>
            change.mask = (uint8_t)value & digital.outx.mask;
 8012624:	4b26      	ldr	r3, [pc, #152]	@ (80126c0 <aux_set_value+0x284>)
 8012626:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 801262a:	ea01 0403 	and.w	r4, r1, r3
            if((changed.mask = settings.ioport.od_enable_out.mask ^ change.mask)) {
 801262e:	4b25      	ldr	r3, [pc, #148]	@ (80126c4 <aux_set_value+0x288>)
 8012630:	f893 216b 	ldrb.w	r2, [r3, #363]	@ 0x16b
 8012634:	ea84 0302 	eor.w	r3, r4, r2
 8012638:	4294      	cmp	r4, r2
 801263a:	f43f af53 	beq.w	80124e4 <aux_set_value+0xa8>
                gpio_out_config_t config = {0};
 801263e:	2600      	movs	r6, #0
 8012640:	f8ad 6004 	strh.w	r6, [sp, #4]
 8012644:	f88d 6006 	strb.w	r6, [sp, #6]
 8012648:	e004      	b.n	8012654 <aux_set_value+0x218>
                    port++;
 801264a:	3601      	adds	r6, #1
 801264c:	b2f6      	uxtb	r6, r6
                } while(changed.mask >>= 1);
 801264e:	087f      	lsrs	r7, r7, #1
 8012650:	463b      	mov	r3, r7
 8012652:	b34f      	cbz	r7, 80126a8 <aux_set_value+0x26c>
                    if((changed.mask & 0x01) && (xbar = hal.port.get_pin_info(Port_Digital, Port_Output, ioports_map_reverse(digital.out.ports, port)))) {
 8012654:	b2df      	uxtb	r7, r3
 8012656:	f013 0f01 	tst.w	r3, #1
 801265a:	d0f6      	beq.n	801264a <aux_set_value+0x20e>
 801265c:	4b1a      	ldr	r3, [pc, #104]	@ (80126c8 <aux_set_value+0x28c>)
 801265e:	f8d3 8128 	ldr.w	r8, [r3, #296]	@ 0x128
 8012662:	4631      	mov	r1, r6
 8012664:	4b16      	ldr	r3, [pc, #88]	@ (80126c0 <aux_set_value+0x284>)
 8012666:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012668:	f7ff fe0a 	bl	8012280 <ioports_map_reverse>
 801266c:	4602      	mov	r2, r0
 801266e:	2101      	movs	r1, #1
 8012670:	4608      	mov	r0, r1
 8012672:	47c0      	blx	r8
 8012674:	2800      	cmp	r0, #0
 8012676:	d0e8      	beq.n	801264a <aux_set_value+0x20e>
                        if(xbar->config && !(xbar->mode.pwm || xbar->mode.servo_pwm)) {
 8012678:	f8d0 8018 	ldr.w	r8, [r0, #24]
 801267c:	f1b8 0f00 	cmp.w	r8, #0
 8012680:	d0e3      	beq.n	801264a <aux_set_value+0x20e>
 8012682:	7dc2      	ldrb	r2, [r0, #23]
 8012684:	f012 0f30 	tst.w	r2, #48	@ 0x30
 8012688:	d1df      	bne.n	801264a <aux_set_value+0x20e>
                            config.inverted = xbar->mode.inverted;
 801268a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 801268e:	f88d 2004 	strb.w	r2, [sp, #4]
                            config.open_drain = !!(change.mask & (1 << xbar->id));
 8012692:	7802      	ldrb	r2, [r0, #0]
 8012694:	fa44 f202 	asr.w	r2, r4, r2
 8012698:	f002 0201 	and.w	r2, r2, #1
 801269c:	f88d 2005 	strb.w	r2, [sp, #5]
                            xbar->config(xbar, &config, false);
 80126a0:	2200      	movs	r2, #0
 80126a2:	a901      	add	r1, sp, #4
 80126a4:	47c0      	blx	r8
 80126a6:	e7d0      	b.n	801264a <aux_set_value+0x20e>
                settings.ioport.od_enable_out.mask = change.mask;
 80126a8:	4b06      	ldr	r3, [pc, #24]	@ (80126c4 <aux_set_value+0x288>)
 80126aa:	f883 416b 	strb.w	r4, [r3, #363]	@ 0x16b
                if(on_setting_changed)
 80126ae:	4b07      	ldr	r3, [pc, #28]	@ (80126cc <aux_set_value+0x290>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	f43f af16 	beq.w	80124e4 <aux_set_value+0xa8>
                    on_setting_changed(id);
 80126b8:	4628      	mov	r0, r5
 80126ba:	4798      	blx	r3
 80126bc:	e712      	b.n	80124e4 <aux_set_value+0xa8>
 80126be:	bf00      	nop
 80126c0:	20001e08 	.word	0x20001e08
 80126c4:	200024a8 	.word	0x200024a8
 80126c8:	20001a90 	.word	0x20001a90
 80126cc:	20001ef0 	.word	0x20001ef0

080126d0 <ioport_save_input_settings>:
{
 80126d0:	b538      	push	{r3, r4, r5, lr}
 80126d2:	460c      	mov	r4, r1
    if(digital.inx.mask & (1 << xbar->id)) {
 80126d4:	4b22      	ldr	r3, [pc, #136]	@ (8012760 <ioport_save_input_settings+0x90>)
 80126d6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80126da:	7802      	ldrb	r2, [r0, #0]
 80126dc:	4113      	asrs	r3, r2
 80126de:	f013 0f01 	tst.w	r3, #1
 80126e2:	d00a      	beq.n	80126fa <ioport_save_input_settings+0x2a>
        if(config->inverted)
 80126e4:	780b      	ldrb	r3, [r1, #0]
 80126e6:	b183      	cbz	r3, 801270a <ioport_save_input_settings+0x3a>
            settings.ioport.invert_in.mask |= (1 << xbar->id);
 80126e8:	4d1e      	ldr	r5, [pc, #120]	@ (8012764 <ioport_save_input_settings+0x94>)
 80126ea:	f895 3168 	ldrb.w	r3, [r5, #360]	@ 0x168
 80126ee:	2101      	movs	r1, #1
 80126f0:	fa01 f202 	lsl.w	r2, r1, r2
 80126f4:	4313      	orrs	r3, r2
 80126f6:	f885 3168 	strb.w	r3, [r5, #360]	@ 0x168
    if(xbar->function == Input_Probe)
 80126fa:	7840      	ldrb	r0, [r0, #1]
 80126fc:	280e      	cmp	r0, #14
 80126fe:	d00f      	beq.n	8012720 <ioport_save_input_settings+0x50>
    else if(xbar->function < Input_Probe) {
 8012700:	280d      	cmp	r0, #13
 8012702:	d916      	bls.n	8012732 <ioport_save_input_settings+0x62>
    settings_write_global();
 8012704:	f00a f866 	bl	801c7d4 <settings_write_global>
}
 8012708:	bd38      	pop	{r3, r4, r5, pc}
            settings.ioport.invert_in.mask &= ~(1 << xbar->id);
 801270a:	4d16      	ldr	r5, [pc, #88]	@ (8012764 <ioport_save_input_settings+0x94>)
 801270c:	f895 1168 	ldrb.w	r1, [r5, #360]	@ 0x168
 8012710:	2301      	movs	r3, #1
 8012712:	4093      	lsls	r3, r2
 8012714:	43db      	mvns	r3, r3
 8012716:	b25b      	sxtb	r3, r3
 8012718:	400b      	ands	r3, r1
 801271a:	f885 3168 	strb.w	r3, [r5, #360]	@ 0x168
 801271e:	e7ec      	b.n	80126fa <ioport_save_input_settings+0x2a>
        settings.probe.invert_probe_pin = config->inverted;
 8012720:	7821      	ldrb	r1, [r4, #0]
 8012722:	4b10      	ldr	r3, [pc, #64]	@ (8012764 <ioport_save_input_settings+0x94>)
 8012724:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
 8012728:	f361 0200 	bfi	r2, r1, #0, #1
 801272c:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8012730:	e7e8      	b.n	8012704 <ioport_save_input_settings+0x34>
        if((ctrl = xbar_fn_to_signals_mask(xbar->function)).mask) {
 8012732:	f7fa fce9 	bl	800d108 <xbar_fn_to_signals_mask>
 8012736:	b283      	uxth	r3, r0
 8012738:	2b00      	cmp	r3, #0
 801273a:	d0e3      	beq.n	8012704 <ioport_save_input_settings+0x34>
            if(config->inverted)
 801273c:	7822      	ldrb	r2, [r4, #0]
 801273e:	b132      	cbz	r2, 801274e <ioport_save_input_settings+0x7e>
                settings.control_invert.mask |= ctrl.mask;
 8012740:	4a08      	ldr	r2, [pc, #32]	@ (8012764 <ioport_save_input_settings+0x94>)
 8012742:	f8b2 106c 	ldrh.w	r1, [r2, #108]	@ 0x6c
 8012746:	430b      	orrs	r3, r1
 8012748:	f8a2 306c 	strh.w	r3, [r2, #108]	@ 0x6c
 801274c:	e7da      	b.n	8012704 <ioport_save_input_settings+0x34>
                settings.control_invert.mask &= ~ctrl.mask;
 801274e:	4a05      	ldr	r2, [pc, #20]	@ (8012764 <ioport_save_input_settings+0x94>)
 8012750:	f8b2 306c 	ldrh.w	r3, [r2, #108]	@ 0x6c
 8012754:	43c0      	mvns	r0, r0
 8012756:	b200      	sxth	r0, r0
 8012758:	4003      	ands	r3, r0
 801275a:	f8a2 306c 	strh.w	r3, [r2, #108]	@ 0x6c
 801275e:	e7d1      	b.n	8012704 <ioport_save_input_settings+0x34>
 8012760:	20001e08 	.word	0x20001e08
 8012764:	200024a8 	.word	0x200024a8

08012768 <ioport_save_output_settings>:
{
 8012768:	b508      	push	{r3, lr}
    if(digital.outx.mask & (1 << xbar->id)) {
 801276a:	4b10      	ldr	r3, [pc, #64]	@ (80127ac <ioport_save_output_settings+0x44>)
 801276c:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8012770:	7802      	ldrb	r2, [r0, #0]
 8012772:	4113      	asrs	r3, r2
 8012774:	f013 0f01 	tst.w	r3, #1
 8012778:	d00a      	beq.n	8012790 <ioport_save_output_settings+0x28>
        if(config->inverted)
 801277a:	780b      	ldrb	r3, [r1, #0]
 801277c:	b15b      	cbz	r3, 8012796 <ioport_save_output_settings+0x2e>
            settings.ioport.invert_out.mask |= (1 << xbar->id);
 801277e:	480c      	ldr	r0, [pc, #48]	@ (80127b0 <ioport_save_output_settings+0x48>)
 8012780:	f890 316a 	ldrb.w	r3, [r0, #362]	@ 0x16a
 8012784:	2101      	movs	r1, #1
 8012786:	fa01 f202 	lsl.w	r2, r1, r2
 801278a:	4313      	orrs	r3, r2
 801278c:	f880 316a 	strb.w	r3, [r0, #362]	@ 0x16a
    settings_write_global();
 8012790:	f00a f820 	bl	801c7d4 <settings_write_global>
}
 8012794:	bd08      	pop	{r3, pc}
            settings.ioport.invert_out.mask &= ~(1 << xbar->id);
 8012796:	4806      	ldr	r0, [pc, #24]	@ (80127b0 <ioport_save_output_settings+0x48>)
 8012798:	f890 116a 	ldrb.w	r1, [r0, #362]	@ 0x16a
 801279c:	2301      	movs	r3, #1
 801279e:	4093      	lsls	r3, r2
 80127a0:	43db      	mvns	r3, r3
 80127a2:	b25b      	sxtb	r3, r3
 80127a4:	400b      	ands	r3, r1
 80127a6:	f880 316a 	strb.w	r3, [r0, #362]	@ 0x16a
 80127aa:	e7f1      	b.n	8012790 <ioport_save_output_settings+0x28>
 80127ac:	20001e08 	.word	0x20001e08
 80127b0:	200024a8 	.word	0x200024a8

080127b4 <ioport_setting_changed>:
    .load = ioport_settings_load,
    .save = settings_write_global
};

void ioport_setting_changed (setting_id_t id)
{
 80127b4:	b530      	push	{r4, r5, lr}
 80127b6:	b083      	sub	sp, #12
    if(on_setting_changed)
 80127b8:	4b70      	ldr	r3, [pc, #448]	@ (801297c <ioport_setting_changed+0x1c8>)
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	b113      	cbz	r3, 80127c4 <ioport_setting_changed+0x10>
        on_setting_changed(id);
 80127be:	4798      	blx	r3
            break;

        default:
            break;
    }
}
 80127c0:	b003      	add	sp, #12
 80127c2:	bd30      	pop	{r4, r5, pc}
    else switch(id) {
 80127c4:	3806      	subs	r0, #6
 80127c6:	280d      	cmp	r0, #13
 80127c8:	d8fa      	bhi.n	80127c0 <ioport_setting_changed+0xc>
 80127ca:	a301      	add	r3, pc, #4	@ (adr r3, 80127d0 <ioport_setting_changed+0x1c>)
 80127cc:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80127d0:	08012809 	.word	0x08012809
 80127d4:	080127c1 	.word	0x080127c1
 80127d8:	080127c1 	.word	0x080127c1
 80127dc:	080127c1 	.word	0x080127c1
 80127e0:	080127c1 	.word	0x080127c1
 80127e4:	080127c1 	.word	0x080127c1
 80127e8:	080127c1 	.word	0x080127c1
 80127ec:	080127c1 	.word	0x080127c1
 80127f0:	080128a9 	.word	0x080128a9
 80127f4:	080127c1 	.word	0x080127c1
 80127f8:	080127c1 	.word	0x080127c1
 80127fc:	080128a9 	.word	0x080128a9
 8012800:	080127c1 	.word	0x080127c1
 8012804:	08012809 	.word	0x08012809
                gpio_in_config_t in_config = {0};
 8012808:	2300      	movs	r3, #0
 801280a:	f8ad 3004 	strh.w	r3, [sp, #4]
 801280e:	f88d 3006 	strb.w	r3, [sp, #6]
                uint8_t port = digital.in.ports->n_ports;
 8012812:	4b5b      	ldr	r3, [pc, #364]	@ (8012980 <ioport_setting_changed+0x1cc>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	781c      	ldrb	r4, [r3, #0]
 8012818:	e011      	b.n	801283e <ioport_setting_changed+0x8a>
                                settings.ioport.invert_in.mask &= ~(1 << xbar->id);
 801281a:	485a      	ldr	r0, [pc, #360]	@ (8012984 <ioport_setting_changed+0x1d0>)
 801281c:	f890 1168 	ldrb.w	r1, [r0, #360]	@ 0x168
 8012820:	781d      	ldrb	r5, [r3, #0]
 8012822:	2201      	movs	r2, #1
 8012824:	40aa      	lsls	r2, r5
 8012826:	43d2      	mvns	r2, r2
 8012828:	b252      	sxtb	r2, r2
 801282a:	400a      	ands	r2, r1
 801282c:	f880 2168 	strb.w	r2, [r0, #360]	@ 0x168
                            xbar->config(xbar, &in_config, false);
 8012830:	699d      	ldr	r5, [r3, #24]
 8012832:	2200      	movs	r2, #0
 8012834:	a901      	add	r1, sp, #4
 8012836:	4618      	mov	r0, r3
 8012838:	47a8      	blx	r5
                } while(port);
 801283a:	2c00      	cmp	r4, #0
 801283c:	d0c0      	beq.n	80127c0 <ioport_setting_changed+0xc>
                    if((xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, --port)))) {
 801283e:	4b52      	ldr	r3, [pc, #328]	@ (8012988 <ioport_setting_changed+0x1d4>)
 8012840:	f8d3 5128 	ldr.w	r5, [r3, #296]	@ 0x128
 8012844:	3c01      	subs	r4, #1
 8012846:	b2e4      	uxtb	r4, r4
 8012848:	4621      	mov	r1, r4
 801284a:	4b4d      	ldr	r3, [pc, #308]	@ (8012980 <ioport_setting_changed+0x1cc>)
 801284c:	6818      	ldr	r0, [r3, #0]
 801284e:	f7ff fd17 	bl	8012280 <ioports_map_reverse>
 8012852:	4602      	mov	r2, r0
 8012854:	2100      	movs	r1, #0
 8012856:	2001      	movs	r0, #1
 8012858:	47a8      	blx	r5
 801285a:	4603      	mov	r3, r0
 801285c:	2800      	cmp	r0, #0
 801285e:	d0ec      	beq.n	801283a <ioport_setting_changed+0x86>
                        if(xbar->config && xbar->function == Input_Probe) {
 8012860:	6982      	ldr	r2, [r0, #24]
 8012862:	2a00      	cmp	r2, #0
 8012864:	d0e9      	beq.n	801283a <ioport_setting_changed+0x86>
 8012866:	7842      	ldrb	r2, [r0, #1]
 8012868:	2a0e      	cmp	r2, #14
 801286a:	d1e6      	bne.n	801283a <ioport_setting_changed+0x86>
                            in_config.debounce  = Off;
 801286c:	2200      	movs	r2, #0
 801286e:	f88d 2005 	strb.w	r2, [sp, #5]
                            in_config.inverted  = settings.probe.invert_probe_pin;
 8012872:	4a44      	ldr	r2, [pc, #272]	@ (8012984 <ioport_setting_changed+0x1d0>)
 8012874:	f892 1100 	ldrb.w	r1, [r2, #256]	@ 0x100
 8012878:	f3c1 0200 	ubfx	r2, r1, #0, #1
 801287c:	f88d 2004 	strb.w	r2, [sp, #4]
                            in_config.pull_mode = settings.probe.disable_probe_pullup ? PullMode_None : PullMode_Up;
 8012880:	084a      	lsrs	r2, r1, #1
 8012882:	f082 0201 	eor.w	r2, r2, #1
 8012886:	f002 0201 	and.w	r2, r2, #1
 801288a:	f88d 2006 	strb.w	r2, [sp, #6]
                            if(in_config.inverted)
 801288e:	f011 0f01 	tst.w	r1, #1
 8012892:	d0c2      	beq.n	801281a <ioport_setting_changed+0x66>
                                settings.ioport.invert_in.mask |= (1 << xbar->id);
 8012894:	483b      	ldr	r0, [pc, #236]	@ (8012984 <ioport_setting_changed+0x1d0>)
 8012896:	f890 2168 	ldrb.w	r2, [r0, #360]	@ 0x168
 801289a:	781d      	ldrb	r5, [r3, #0]
 801289c:	2101      	movs	r1, #1
 801289e:	40a9      	lsls	r1, r5
 80128a0:	430a      	orrs	r2, r1
 80128a2:	f880 2168 	strb.w	r2, [r0, #360]	@ 0x168
 80128a6:	e7c3      	b.n	8012830 <ioport_setting_changed+0x7c>
                gpio_in_config_t in_config = {0};
 80128a8:	2300      	movs	r3, #0
 80128aa:	f8ad 3004 	strh.w	r3, [sp, #4]
 80128ae:	f88d 3006 	strb.w	r3, [sp, #6]
                uint8_t port = digital.in.ports->n_ports;
 80128b2:	4b33      	ldr	r3, [pc, #204]	@ (8012980 <ioport_setting_changed+0x1cc>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	781c      	ldrb	r4, [r3, #0]
 80128b8:	e012      	b.n	80128e0 <ioport_setting_changed+0x12c>
                                settings.ioport.invert_in.mask &= ~(1 << xbar->id);
 80128ba:	4932      	ldr	r1, [pc, #200]	@ (8012984 <ioport_setting_changed+0x1d0>)
 80128bc:	f891 2168 	ldrb.w	r2, [r1, #360]	@ 0x168
 80128c0:	7828      	ldrb	r0, [r5, #0]
 80128c2:	2301      	movs	r3, #1
 80128c4:	4083      	lsls	r3, r0
 80128c6:	43db      	mvns	r3, r3
 80128c8:	b25b      	sxtb	r3, r3
 80128ca:	4013      	ands	r3, r2
 80128cc:	f881 3168 	strb.w	r3, [r1, #360]	@ 0x168
                            xbar->config(xbar, &in_config, false);
 80128d0:	69ab      	ldr	r3, [r5, #24]
 80128d2:	2200      	movs	r2, #0
 80128d4:	a901      	add	r1, sp, #4
 80128d6:	4628      	mov	r0, r5
 80128d8:	4798      	blx	r3
                } while(port);
 80128da:	2c00      	cmp	r4, #0
 80128dc:	f43f af70 	beq.w	80127c0 <ioport_setting_changed+0xc>
                    if((xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, --port)))) {
 80128e0:	4b29      	ldr	r3, [pc, #164]	@ (8012988 <ioport_setting_changed+0x1d4>)
 80128e2:	f8d3 5128 	ldr.w	r5, [r3, #296]	@ 0x128
 80128e6:	3c01      	subs	r4, #1
 80128e8:	b2e4      	uxtb	r4, r4
 80128ea:	4621      	mov	r1, r4
 80128ec:	4b24      	ldr	r3, [pc, #144]	@ (8012980 <ioport_setting_changed+0x1cc>)
 80128ee:	6818      	ldr	r0, [r3, #0]
 80128f0:	f7ff fcc6 	bl	8012280 <ioports_map_reverse>
 80128f4:	4602      	mov	r2, r0
 80128f6:	2100      	movs	r1, #0
 80128f8:	2001      	movs	r0, #1
 80128fa:	47a8      	blx	r5
 80128fc:	4605      	mov	r5, r0
 80128fe:	2800      	cmp	r0, #0
 8012900:	d0eb      	beq.n	80128da <ioport_setting_changed+0x126>
                        if(xbar->config && xbar->function < Input_Probe) {
 8012902:	6983      	ldr	r3, [r0, #24]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d0e8      	beq.n	80128da <ioport_setting_changed+0x126>
 8012908:	7843      	ldrb	r3, [r0, #1]
 801290a:	2b0d      	cmp	r3, #13
 801290c:	d8e5      	bhi.n	80128da <ioport_setting_changed+0x126>
                            in_config.debounce = xbar->mode.debounce;
 801290e:	7dc3      	ldrb	r3, [r0, #23]
 8012910:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012914:	f88d 3005 	strb.w	r3, [sp, #5]
                            in_config.inverted = !!(settings.ioport.invert_in.mask & (1 << xbar->id));
 8012918:	4b1a      	ldr	r3, [pc, #104]	@ (8012984 <ioport_setting_changed+0x1d0>)
 801291a:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 801291e:	7802      	ldrb	r2, [r0, #0]
 8012920:	4113      	asrs	r3, r2
 8012922:	f003 0301 	and.w	r3, r3, #1
 8012926:	f88d 3004 	strb.w	r3, [sp, #4]
                            in_config.pull_mode = (pull_mode_t)xbar->mode.pull_mode;
 801292a:	7d83      	ldrb	r3, [r0, #22]
 801292c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8012930:	f88d 3006 	strb.w	r3, [sp, #6]
                            if((ctrl = xbar_fn_to_signals_mask(xbar->function)).mask) {
 8012934:	7840      	ldrb	r0, [r0, #1]
 8012936:	f7fa fbe7 	bl	800d108 <xbar_fn_to_signals_mask>
 801293a:	b280      	uxth	r0, r0
 801293c:	b180      	cbz	r0, 8012960 <ioport_setting_changed+0x1ac>
                                in_config.inverted = !!(settings.control_invert.mask & ctrl.mask);
 801293e:	4b11      	ldr	r3, [pc, #68]	@ (8012984 <ioport_setting_changed+0x1d0>)
 8012940:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
 8012944:	4210      	tst	r0, r2
 8012946:	bf14      	ite	ne
 8012948:	2201      	movne	r2, #1
 801294a:	2200      	moveq	r2, #0
 801294c:	f88d 2004 	strb.w	r2, [sp, #4]
                                in_config.pull_mode = (settings.control_disable_pullup.mask & ctrl.mask) ? PullMode_None : PullMode_Up;
 8012950:	f8b3 306e 	ldrh.w	r3, [r3, #110]	@ 0x6e
 8012954:	4218      	tst	r0, r3
 8012956:	bf0c      	ite	eq
 8012958:	2301      	moveq	r3, #1
 801295a:	2300      	movne	r3, #0
 801295c:	f88d 3006 	strb.w	r3, [sp, #6]
                            if(in_config.inverted)
 8012960:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d0a8      	beq.n	80128ba <ioport_setting_changed+0x106>
                                settings.ioport.invert_in.mask |= (1 << xbar->id);
 8012968:	4906      	ldr	r1, [pc, #24]	@ (8012984 <ioport_setting_changed+0x1d0>)
 801296a:	f891 3168 	ldrb.w	r3, [r1, #360]	@ 0x168
 801296e:	7828      	ldrb	r0, [r5, #0]
 8012970:	2201      	movs	r2, #1
 8012972:	4082      	lsls	r2, r0
 8012974:	4313      	orrs	r3, r2
 8012976:	f881 3168 	strb.w	r3, [r1, #360]	@ 0x168
 801297a:	e7a9      	b.n	80128d0 <ioport_setting_changed+0x11c>
 801297c:	20001ef0 	.word	0x20001ef0
 8012980:	20001e08 	.word	0x20001e08
 8012984:	200024a8 	.word	0x200024a8
 8012988:	20001a90 	.word	0x20001a90

0801298c <ioports_add_settings>:

void ioports_add_settings (driver_settings_load_ptr settings_loaded, setting_changed_ptr setting_changed)
{
 801298c:	b508      	push	{r3, lr}
    if(settings_loaded)
 801298e:	b108      	cbz	r0, 8012994 <ioports_add_settings+0x8>
        on_settings_loaded = settings_loaded;
 8012990:	4a04      	ldr	r2, [pc, #16]	@ (80129a4 <ioports_add_settings+0x18>)
 8012992:	6010      	str	r0, [r2, #0]

    if(setting_changed)
 8012994:	b109      	cbz	r1, 801299a <ioports_add_settings+0xe>
        on_setting_changed = setting_changed;
 8012996:	4b04      	ldr	r3, [pc, #16]	@ (80129a8 <ioports_add_settings+0x1c>)
 8012998:	6019      	str	r1, [r3, #0]

    settings_register(&setting_details);
 801299a:	4804      	ldr	r0, [pc, #16]	@ (80129ac <ioports_add_settings+0x20>)
 801299c:	f00a fb36 	bl	801d00c <settings_register>
}
 80129a0:	bd08      	pop	{r3, pc}
 80129a2:	bf00      	nop
 80129a4:	20001ef4 	.word	0x20001ef4
 80129a8:	20001ef0 	.word	0x20001ef0
 80129ac:	200001dc 	.word	0x200001dc

080129b0 <homing_signals_select>:
    return state;
}

// Merge (bitwise or) home switch inputs (typically acquired from limits.min and limits.min2).
ISR_CODE static axes_signals_t ISR_FUNC(homing_signals_select)(home_signals_t signals, axes_signals_t auto_square, squaring_mode_t mode)
{
 80129b0:	b082      	sub	sp, #8
 80129b2:	f8ad 0004 	strh.w	r0, [sp, #4]
    axes_signals_t state;

    switch(mode) {
 80129b6:	2a01      	cmp	r2, #1
 80129b8:	d008      	beq.n	80129cc <homing_signals_select+0x1c>
 80129ba:	2a02      	cmp	r2, #2
 80129bc:	d00e      	beq.n	80129dc <homing_signals_select+0x2c>

        default:
            break;
    }

    state.mask = signals.a.mask | signals.b.mask;
 80129be:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80129c2:	f89d 3005 	ldrb.w	r3, [sp, #5]

    return state;
}
 80129c6:	4318      	orrs	r0, r3
 80129c8:	b002      	add	sp, #8
 80129ca:	4770      	bx	lr
            signals.a.mask &= ~auto_square.mask;
 80129cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80129d0:	43c9      	mvns	r1, r1
 80129d2:	b249      	sxtb	r1, r1
 80129d4:	400b      	ands	r3, r1
 80129d6:	f88d 3004 	strb.w	r3, [sp, #4]
            break;
 80129da:	e7f0      	b.n	80129be <homing_signals_select+0xe>
            signals.b.mask &= ~auto_square.mask;
 80129dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80129e0:	43c9      	mvns	r1, r1
 80129e2:	b249      	sxtb	r1, r1
 80129e4:	400b      	ands	r3, r1
 80129e6:	f88d 3005 	strb.w	r3, [sp, #5]
            break;
 80129ea:	e7e8      	b.n	80129be <homing_signals_select+0xe>

080129ec <get_homing_rate>:
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
}

static float get_homing_rate (axes_signals_t cycle, homing_mode_t mode)
{
    return mode == HomingMode_Locate ? settings.homing.feed_rate : settings.homing.seek_rate;
 80129ec:	2901      	cmp	r1, #1
 80129ee:	d003      	beq.n	80129f8 <get_homing_rate+0xc>
 80129f0:	4b03      	ldr	r3, [pc, #12]	@ (8012a00 <get_homing_rate+0x14>)
 80129f2:	ed93 0a42 	vldr	s0, [r3, #264]	@ 0x108
}
 80129f6:	4770      	bx	lr
    return mode == HomingMode_Locate ? settings.homing.feed_rate : settings.homing.seek_rate;
 80129f8:	4b01      	ldr	r3, [pc, #4]	@ (8012a00 <get_homing_rate+0x14>)
 80129fa:	ed93 0a41 	vldr	s0, [r3, #260]	@ 0x104
 80129fe:	4770      	bx	lr
 8012a00:	200024a8 	.word	0x200024a8

08012a04 <check_travel_limits>:
static bool check_travel_limits (float *target, axes_signals_t axes, bool is_cartesian)
{
    bool failed = false;
    uint_fast8_t idx = N_AXIS;

    if(is_cartesian && (sys.homed.mask & axes.mask)) do {
 8012a04:	b3ca      	cbz	r2, 8012a7a <check_travel_limits+0x76>
{
 8012a06:	b510      	push	{r4, lr}
 8012a08:	4614      	mov	r4, r2
    if(is_cartesian && (sys.homed.mask & axes.mask)) do {
 8012a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8012a84 <check_travel_limits+0x80>)
 8012a0c:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8012a10:	fa5f fc81 	uxtb.w	ip, r1
 8012a14:	420a      	tst	r2, r1
 8012a16:	d02c      	beq.n	8012a72 <check_travel_limits+0x6e>
    uint_fast8_t idx = N_AXIS;
 8012a18:	2303      	movs	r3, #3
 8012a1a:	e000      	b.n	8012a1e <check_travel_limits+0x1a>
        idx--;
        if(bit_istrue(sys.homed.mask, bit(idx)) && bit_istrue(axes.mask, bit(idx)))
            failed = target[idx] < sys.work_envelope.min.values[idx] || target[idx] > sys.work_envelope.max.values[idx];
    } while(!failed && idx);
 8012a1c:	b33b      	cbz	r3, 8012a6e <check_travel_limits+0x6a>
        idx--;
 8012a1e:	3b01      	subs	r3, #1
        if(bit_istrue(sys.homed.mask, bit(idx)) && bit_istrue(axes.mask, bit(idx)))
 8012a20:	fa22 f103 	lsr.w	r1, r2, r3
 8012a24:	f011 0f01 	tst.w	r1, #1
 8012a28:	d0f8      	beq.n	8012a1c <check_travel_limits+0x18>
 8012a2a:	fa2c f103 	lsr.w	r1, ip, r3
 8012a2e:	f011 0f01 	tst.w	r1, #1
 8012a32:	d0f3      	beq.n	8012a1c <check_travel_limits+0x18>
            failed = target[idx] < sys.work_envelope.min.values[idx] || target[idx] > sys.work_envelope.max.values[idx];
 8012a34:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8012a38:	edd1 7a00 	vldr	s15, [r1]
 8012a3c:	f103 0e18 	add.w	lr, r3, #24
 8012a40:	4910      	ldr	r1, [pc, #64]	@ (8012a84 <check_travel_limits+0x80>)
 8012a42:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8012a46:	ed91 7a01 	vldr	s14, [r1, #4]
 8012a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a52:	d40f      	bmi.n	8012a74 <check_travel_limits+0x70>
 8012a54:	f103 0e1a 	add.w	lr, r3, #26
 8012a58:	490a      	ldr	r1, [pc, #40]	@ (8012a84 <check_travel_limits+0x80>)
 8012a5a:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8012a5e:	ed91 7a02 	vldr	s14, [r1, #8]
 8012a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a6a:	ddd7      	ble.n	8012a1c <check_travel_limits+0x18>
 8012a6c:	e002      	b.n	8012a74 <check_travel_limits+0x70>
 8012a6e:	2400      	movs	r4, #0
 8012a70:	e000      	b.n	8012a74 <check_travel_limits+0x70>
    bool failed = false;
 8012a72:	2400      	movs	r4, #0

    return is_cartesian && !failed;
 8012a74:	b11c      	cbz	r4, 8012a7e <check_travel_limits+0x7a>
 8012a76:	2000      	movs	r0, #0
}
 8012a78:	bd10      	pop	{r4, pc}
    return is_cartesian && !failed;
 8012a7a:	2000      	movs	r0, #0
}
 8012a7c:	4770      	bx	lr
    return is_cartesian && !failed;
 8012a7e:	2001      	movs	r0, #1
 8012a80:	e7fa      	b.n	8012a78 <check_travel_limits+0x74>
 8012a82:	bf00      	nop
 8012a84:	20001d70 	.word	0x20001d70

08012a88 <clip_3d_target>:

// Derived from code by Dimitrios Matthes & Vasileios Drakopoulos
// https://www.mdpi.com/1999-4893/16/4/201
static void clip_3d_target (coord_data_t *position, coord_data_t *target, work_envelope_t *envelope)
{
    float a = target->x - position->x;
 8012a88:	edd1 5a00 	vldr	s11, [r1]
 8012a8c:	edd0 4a00 	vldr	s9, [r0]
 8012a90:	ee35 6ae4 	vsub.f32	s12, s11, s9
    float b = target->y - position->y;
 8012a94:	ed91 7a01 	vldr	s14, [r1, #4]
 8012a98:	edd0 6a01 	vldr	s13, [r0, #4]
 8012a9c:	ee37 7a66 	vsub.f32	s14, s14, s13
    float c = target->z - position->z;
 8012aa0:	edd1 7a02 	vldr	s15, [r1, #8]
 8012aa4:	ed90 5a02 	vldr	s10, [r0, #8]
 8012aa8:	ee77 7ac5 	vsub.f32	s15, s15, s10

    if(target->x < envelope->min.x) {
 8012aac:	ed92 5a00 	vldr	s10, [r2]
 8012ab0:	eef4 5ac5 	vcmpe.f32	s11, s10
 8012ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab8:	d56e      	bpl.n	8012b98 <clip_3d_target+0x110>
        target->y = b / a * (envelope->min.x - position->x) + position->y;
 8012aba:	eec7 5a06 	vdiv.f32	s11, s14, s12
 8012abe:	ee35 5a64 	vsub.f32	s10, s10, s9
 8012ac2:	ee65 5a85 	vmul.f32	s11, s11, s10
 8012ac6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012aca:	edc1 6a01 	vstr	s13, [r1, #4]
        target->z = c / a * (envelope->min.x - position->x) + position->z;
 8012ace:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8012ad2:	edd2 5a00 	vldr	s11, [r2]
 8012ad6:	ed90 5a00 	vldr	s10, [r0]
 8012ada:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012ade:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012ae2:	edd0 5a02 	vldr	s11, [r0, #8]
 8012ae6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012aea:	edc1 6a02 	vstr	s13, [r1, #8]
        target->x = envelope->min.x;
 8012aee:	6813      	ldr	r3, [r2, #0]
 8012af0:	600b      	str	r3, [r1, #0]
        target->y = b / a * (envelope->max.x - position->x) + position->y;
        target->z = c / a * (envelope->max.x - position->x) + position->z;
        target->x = envelope->max.x;
    }

    if(target->y < envelope->min.y) {
 8012af2:	edd1 6a01 	vldr	s13, [r1, #4]
 8012af6:	edd2 5a01 	vldr	s11, [r2, #4]
 8012afa:	eef4 6ae5 	vcmpe.f32	s13, s11
 8012afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b02:	d56d      	bpl.n	8012be0 <clip_3d_target+0x158>
        target->x = a / b * (envelope->min.y - position->y) + position->x;
 8012b04:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8012b08:	ed90 5a01 	vldr	s10, [r0, #4]
 8012b0c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012b10:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012b14:	edd0 5a00 	vldr	s11, [r0]
 8012b18:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012b1c:	edc1 6a00 	vstr	s13, [r1]
        target->z = c / b * (envelope->min.y - position->y) + position->z;
 8012b20:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8012b24:	edd2 5a01 	vldr	s11, [r2, #4]
 8012b28:	ed90 5a01 	vldr	s10, [r0, #4]
 8012b2c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012b30:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012b34:	edd0 5a02 	vldr	s11, [r0, #8]
 8012b38:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012b3c:	edc1 6a02 	vstr	s13, [r1, #8]
        target->y = envelope->min.y;
 8012b40:	6853      	ldr	r3, [r2, #4]
 8012b42:	604b      	str	r3, [r1, #4]
        target->x = a / b * (envelope->max.y - position->y) + position->x;
        target->z = c / b * (envelope->max.y - position->y) + position->z;
        target->y = envelope->max.y;
    }

    if(target->z < envelope->min.z) {
 8012b44:	edd1 5a02 	vldr	s11, [r1, #8]
 8012b48:	edd2 6a02 	vldr	s13, [r2, #8]
 8012b4c:	eef4 5ae6 	vcmpe.f32	s11, s13
 8012b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b54:	d56c      	bpl.n	8012c30 <clip_3d_target+0x1a8>
        target->x = a / c * (envelope->min.z - position->z) + position->x;
 8012b56:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8012b5a:	ed90 6a02 	vldr	s12, [r0, #8]
 8012b5e:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8012b62:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8012b66:	ed90 6a00 	vldr	s12, [r0]
 8012b6a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012b6e:	edc1 6a00 	vstr	s13, [r1]
        target->y = b / c * (envelope->min.z - position->z) + position->y;
 8012b72:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012b76:	edd2 7a02 	vldr	s15, [r2, #8]
 8012b7a:	ed90 7a02 	vldr	s14, [r0, #8]
 8012b7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b86:	ed90 7a01 	vldr	s14, [r0, #4]
 8012b8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012b8e:	edc1 7a01 	vstr	s15, [r1, #4]
        target->z = envelope->min.z;
 8012b92:	6893      	ldr	r3, [r2, #8]
 8012b94:	608b      	str	r3, [r1, #8]
 8012b96:	4770      	bx	lr
    } else if(target->x > envelope->max.x) {
 8012b98:	ed92 5a03 	vldr	s10, [r2, #12]
 8012b9c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8012ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ba4:	dda5      	ble.n	8012af2 <clip_3d_target+0x6a>
        target->y = b / a * (envelope->max.x - position->x) + position->y;
 8012ba6:	eec7 5a06 	vdiv.f32	s11, s14, s12
 8012baa:	ee35 5a64 	vsub.f32	s10, s10, s9
 8012bae:	ee65 5a85 	vmul.f32	s11, s11, s10
 8012bb2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012bb6:	edc1 6a01 	vstr	s13, [r1, #4]
        target->z = c / a * (envelope->max.x - position->x) + position->z;
 8012bba:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8012bbe:	edd2 5a03 	vldr	s11, [r2, #12]
 8012bc2:	ed90 5a00 	vldr	s10, [r0]
 8012bc6:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012bca:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012bce:	edd0 5a02 	vldr	s11, [r0, #8]
 8012bd2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012bd6:	edc1 6a02 	vstr	s13, [r1, #8]
        target->x = envelope->max.x;
 8012bda:	68d3      	ldr	r3, [r2, #12]
 8012bdc:	600b      	str	r3, [r1, #0]
 8012bde:	e788      	b.n	8012af2 <clip_3d_target+0x6a>
    } else if(target->y > envelope->max.y) {
 8012be0:	edd2 5a04 	vldr	s11, [r2, #16]
 8012be4:	eef4 6ae5 	vcmpe.f32	s13, s11
 8012be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bec:	ddaa      	ble.n	8012b44 <clip_3d_target+0xbc>
        target->x = a / b * (envelope->max.y - position->y) + position->x;
 8012bee:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8012bf2:	ed90 5a01 	vldr	s10, [r0, #4]
 8012bf6:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012bfa:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012bfe:	edd0 5a00 	vldr	s11, [r0]
 8012c02:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012c06:	edc1 6a00 	vstr	s13, [r1]
        target->z = c / b * (envelope->max.y - position->y) + position->z;
 8012c0a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8012c0e:	edd2 5a04 	vldr	s11, [r2, #16]
 8012c12:	ed90 5a01 	vldr	s10, [r0, #4]
 8012c16:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012c1a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012c1e:	edd0 5a02 	vldr	s11, [r0, #8]
 8012c22:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012c26:	edc1 6a02 	vstr	s13, [r1, #8]
        target->y = envelope->max.y;
 8012c2a:	6913      	ldr	r3, [r2, #16]
 8012c2c:	604b      	str	r3, [r1, #4]
 8012c2e:	e789      	b.n	8012b44 <clip_3d_target+0xbc>
    } else if(target->z > envelope->max.z) {
 8012c30:	edd2 6a05 	vldr	s13, [r2, #20]
 8012c34:	eef4 5ae6 	vcmpe.f32	s11, s13
 8012c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c3c:	dd1f      	ble.n	8012c7e <clip_3d_target+0x1f6>
        target->x = a / c * (envelope->max.z - position->z) + position->x;
 8012c3e:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8012c42:	ed90 6a02 	vldr	s12, [r0, #8]
 8012c46:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8012c4a:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8012c4e:	ed90 6a00 	vldr	s12, [r0]
 8012c52:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012c56:	edc1 6a00 	vstr	s13, [r1]
        target->y = b / c * (envelope->max.z - position->z) + position->y;
 8012c5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012c5e:	edd2 7a05 	vldr	s15, [r2, #20]
 8012c62:	ed90 7a02 	vldr	s14, [r0, #8]
 8012c66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c6e:	ed90 7a01 	vldr	s14, [r0, #4]
 8012c72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012c76:	edc1 7a01 	vstr	s15, [r1, #4]
        target->z = envelope->max.z;
 8012c7a:	6953      	ldr	r3, [r2, #20]
 8012c7c:	608b      	str	r3, [r1, #8]
    }
}
 8012c7e:	4770      	bx	lr

08012c80 <apply_jog_limits>:

// Limits jog commands to be within machine limits, homed axes only.
static void apply_jog_limits (float *target, float *position)
{
    if(sys.homed.mask == 0)
 8012c80:	4b35      	ldr	r3, [pc, #212]	@ (8012d58 <apply_jog_limits+0xd8>)
 8012c82:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d064      	beq.n	8012d54 <apply_jog_limits+0xd4>
{
 8012c8a:	b510      	push	{r4, lr}
 8012c8c:	4604      	mov	r4, r0
 8012c8e:	4608      	mov	r0, r1
        return;

    uint_fast8_t idx;

    if((sys.homed.mask & 0b111) == 0b111) {
 8012c90:	f003 0307 	and.w	r3, r3, #7
 8012c94:	2b07      	cmp	r3, #7
 8012c96:	d001      	beq.n	8012c9c <apply_jog_limits+0x1c>

        uint_fast8_t n_axes = 0;

        idx = Z_AXIS + 1;
 8012c98:	2303      	movs	r3, #3
 8012c9a:	e025      	b.n	8012ce8 <apply_jog_limits+0x68>
        uint_fast8_t n_axes = 0;
 8012c9c:	2200      	movs	r2, #0
        idx = Z_AXIS + 1;
 8012c9e:	2303      	movs	r3, #3
 8012ca0:	e002      	b.n	8012ca8 <apply_jog_limits+0x28>
        do {
            idx--;
            if(fabs(target[idx] - position[idx]) > 0.001f)
                n_axes++;
        } while(idx && n_axes < 2);
 8012ca2:	b1bb      	cbz	r3, 8012cd4 <apply_jog_limits+0x54>
 8012ca4:	2a01      	cmp	r2, #1
 8012ca6:	d815      	bhi.n	8012cd4 <apply_jog_limits+0x54>
            idx--;
 8012ca8:	3b01      	subs	r3, #1
            if(fabs(target[idx] - position[idx]) > 0.001f)
 8012caa:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8012cae:	edd1 7a00 	vldr	s15, [r1]
 8012cb2:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8012cb6:	ed91 7a00 	vldr	s14, [r1]
 8012cba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012cbe:	eef0 7ae7 	vabs.f32	s15, s15
 8012cc2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8012d5c <apply_jog_limits+0xdc>
 8012cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cce:	dde8      	ble.n	8012ca2 <apply_jog_limits+0x22>
                n_axes++;
 8012cd0:	3201      	adds	r2, #1
 8012cd2:	e7e6      	b.n	8012ca2 <apply_jog_limits+0x22>

        if(n_axes > 1)
 8012cd4:	2a01      	cmp	r2, #1
 8012cd6:	d9df      	bls.n	8012c98 <apply_jog_limits+0x18>
            clip_3d_target((coord_data_t *)position, (coord_data_t *)target, &sys.work_envelope);
 8012cd8:	4a21      	ldr	r2, [pc, #132]	@ (8012d60 <apply_jog_limits+0xe0>)
 8012cda:	4621      	mov	r1, r4
 8012cdc:	f7ff fed4 	bl	8012a88 <clip_3d_target>
 8012ce0:	e7da      	b.n	8012c98 <apply_jog_limits+0x18>

    idx = N_AXIS;
    do {
        idx--;
        if(bit_istrue(sys.homed.mask, bit(idx)) && settings.axis[idx].max_travel < -0.0f)
            target[idx] = max(min(target[idx], sys.work_envelope.max.values[idx]), sys.work_envelope.min.values[idx]);
 8012ce2:	edc0 7a00 	vstr	s15, [r0]
    } while(idx);
 8012ce6:	b3a3      	cbz	r3, 8012d52 <apply_jog_limits+0xd2>
        idx--;
 8012ce8:	3b01      	subs	r3, #1
        if(bit_istrue(sys.homed.mask, bit(idx)) && settings.axis[idx].max_travel < -0.0f)
 8012cea:	4a1b      	ldr	r2, [pc, #108]	@ (8012d58 <apply_jog_limits+0xd8>)
 8012cec:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8012cf0:	40da      	lsrs	r2, r3
 8012cf2:	f012 0f01 	tst.w	r2, #1
 8012cf6:	d0f6      	beq.n	8012ce6 <apply_jog_limits+0x66>
 8012cf8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8012cfc:	4a19      	ldr	r2, [pc, #100]	@ (8012d64 <apply_jog_limits+0xe4>)
 8012cfe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012d02:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 8012d06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d0e:	d5ea      	bpl.n	8012ce6 <apply_jog_limits+0x66>
            target[idx] = max(min(target[idx], sys.work_envelope.max.values[idx]), sys.work_envelope.min.values[idx]);
 8012d10:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8012d14:	ed90 7a00 	vldr	s14, [r0]
 8012d18:	f103 011a 	add.w	r1, r3, #26
 8012d1c:	4a0e      	ldr	r2, [pc, #56]	@ (8012d58 <apply_jog_limits+0xd8>)
 8012d1e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012d22:	edd2 7a02 	vldr	s15, [r2, #8]
 8012d26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d2e:	d501      	bpl.n	8012d34 <apply_jog_limits+0xb4>
 8012d30:	eef0 7a47 	vmov.f32	s15, s14
 8012d34:	f103 0118 	add.w	r1, r3, #24
 8012d38:	4a07      	ldr	r2, [pc, #28]	@ (8012d58 <apply_jog_limits+0xd8>)
 8012d3a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012d3e:	ed92 7a01 	vldr	s14, [r2, #4]
 8012d42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d4a:	d4ca      	bmi.n	8012ce2 <apply_jog_limits+0x62>
 8012d4c:	eef0 7a47 	vmov.f32	s15, s14
 8012d50:	e7c7      	b.n	8012ce2 <apply_jog_limits+0x62>
}
 8012d52:	bd10      	pop	{r4, pc}
 8012d54:	4770      	bx	lr
 8012d56:	bf00      	nop
 8012d58:	20001d70 	.word	0x20001d70
 8012d5c:	3a83126f 	.word	0x3a83126f
 8012d60:	20001dd4 	.word	0x20001dd4
 8012d64:	200024a8 	.word	0x200024a8

08012d68 <limits_pull_off>:
{
 8012d68:	b570      	push	{r4, r5, r6, lr}
 8012d6a:	ed2d 8b02 	vpush	{d8}
 8012d6e:	b08e      	sub	sp, #56	@ 0x38
 8012d70:	4606      	mov	r6, r0
 8012d72:	eeb0 8a40 	vmov.f32	s16, s0
    coord_data_t target = {0};
 8012d76:	2400      	movs	r4, #0
 8012d78:	940a      	str	r4, [sp, #40]	@ 0x28
 8012d7a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012d7c:	940c      	str	r4, [sp, #48]	@ 0x30
    plan_data_init(&plan_data);
 8012d7e:	4668      	mov	r0, sp
 8012d80:	f004 f8ae 	bl	8016ee0 <plan_data_init>
    plan_data.condition.system_motion = On;
 8012d84:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8012d88:	f043 0302 	orr.w	r3, r3, #2
 8012d8c:	f88d 3014 	strb.w	r3, [sp, #20]
    plan_data.condition.no_feed_override = On;
 8012d90:	b2db      	uxtb	r3, r3
 8012d92:	f043 0310 	orr.w	r3, r3, #16
 8012d96:	f88d 3014 	strb.w	r3, [sp, #20]
    plan_data.line_number = DEFAULT_HOMING_CYCLE_LINE_NUMBER;
 8012d9a:	9407      	str	r4, [sp, #28]
    system_convert_array_steps_to_mpos(target.values, sys.position);
 8012d9c:	494a      	ldr	r1, [pc, #296]	@ (8012ec8 <limits_pull_off+0x160>)
 8012d9e:	a80a      	add	r0, sp, #40	@ 0x28
 8012da0:	f00e ffec 	bl	8021d7c <system_convert_array_steps_to_mpos>
    uint_fast8_t n_axis = 0, idx = N_AXIS;
 8012da4:	2303      	movs	r3, #3
 8012da6:	e009      	b.n	8012dbc <limits_pull_off+0x54>
                target.values[idx] -= distance;
 8012da8:	aa0e      	add	r2, sp, #56	@ 0x38
 8012daa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012dae:	ed52 7a04 	vldr	s15, [r2, #-16]
 8012db2:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8012db6:	ed42 7a04 	vstr	s15, [r2, #-16]
    } while(idx);
 8012dba:	b1c3      	cbz	r3, 8012dee <limits_pull_off+0x86>
        idx--;
 8012dbc:	3b01      	subs	r3, #1
        if(bit_istrue(axis.mask, bit(idx))) {
 8012dbe:	b2f5      	uxtb	r5, r6
 8012dc0:	fa25 f203 	lsr.w	r2, r5, r3
 8012dc4:	f012 0f01 	tst.w	r2, #1
 8012dc8:	d0f7      	beq.n	8012dba <limits_pull_off+0x52>
            n_axis++;
 8012dca:	3401      	adds	r4, #1
            if (bit_istrue(settings.homing.dir_mask.value, bit(idx)))
 8012dcc:	4a3f      	ldr	r2, [pc, #252]	@ (8012ecc <limits_pull_off+0x164>)
 8012dce:	f892 2110 	ldrb.w	r2, [r2, #272]	@ 0x110
 8012dd2:	40da      	lsrs	r2, r3
 8012dd4:	f012 0f01 	tst.w	r2, #1
 8012dd8:	d0e6      	beq.n	8012da8 <limits_pull_off+0x40>
                target.values[idx] += distance;
 8012dda:	aa0e      	add	r2, sp, #56	@ 0x38
 8012ddc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012de0:	ed52 7a04 	vldr	s15, [r2, #-16]
 8012de4:	ee77 7a88 	vadd.f32	s15, s15, s16
 8012de8:	ed42 7a04 	vstr	s15, [r2, #-16]
 8012dec:	e7e5      	b.n	8012dba <limits_pull_off+0x52>
    plan_data.feed_rate = settings.homing.seek_rate * sqrtf(n_axis); // Adjust so individual axes all move at pull-off rate.
 8012dee:	4b37      	ldr	r3, [pc, #220]	@ (8012ecc <limits_pull_off+0x164>)
 8012df0:	ed93 8a42 	vldr	s16, [r3, #264]	@ 0x108
 8012df4:	ee07 4a90 	vmov	s15, r4
 8012df8:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8012dfc:	f014 fcf8 	bl	80277f0 <sqrtf>
 8012e00:	ee28 8a00 	vmul.f32	s16, s16, s0
 8012e04:	ed8d 8a00 	vstr	s16, [sp]
    plan_data.condition.coolant = gc_state.modal.coolant;
 8012e08:	4b31      	ldr	r3, [pc, #196]	@ (8012ed0 <limits_pull_off+0x168>)
 8012e0a:	7e5a      	ldrb	r2, [r3, #25]
 8012e0c:	f88d 2016 	strb.w	r2, [sp, #22]
    memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t));
 8012e10:	ac01      	add	r4, sp, #4
 8012e12:	3350      	adds	r3, #80	@ 0x50
 8012e14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012e16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    plan_buffer_line(target.values, &plan_data);    // Bypass mc_line(). Directly plan homing motion.
 8012e1a:	4669      	mov	r1, sp
 8012e1c:	a80a      	add	r0, sp, #40	@ 0x28
 8012e1e:	f003 fe23 	bl	8016a68 <plan_buffer_line>
    sys.step_control.flags = 0;                 // Clear existing flags and
 8012e22:	4b2c      	ldr	r3, [pc, #176]	@ (8012ed4 <limits_pull_off+0x16c>)
 8012e24:	2200      	movs	r2, #0
 8012e26:	761a      	strb	r2, [r3, #24]
    sys.step_control.execute_sys_motion = On;   // set to execute homing motion.
 8012e28:	2204      	movs	r2, #4
 8012e2a:	761a      	strb	r2, [r3, #24]
    sys.homing_axis_lock.mask = axis.mask;
 8012e2c:	765e      	strb	r6, [r3, #25]
    st_prep_buffer();   // Prep and fill segment buffer from newly planned block.
 8012e2e:	f00d f899 	bl	801ff64 <st_prep_buffer>
    st_wake_up();       // Initiate motion.
 8012e32:	f00c fda5 	bl	801f980 <st_wake_up>
 8012e36:	e009      	b.n	8012e4c <limits_pull_off+0xe4>
                mc_reset(); // Stop motors, if they are running.
 8012e38:	f001 ff52 	bl	8014ce0 <mc_reset>
                protocol_execute_realtime();
 8012e3c:	f004 fd1c 	bl	8017878 <protocol_execute_realtime>
                return false;
 8012e40:	2000      	movs	r0, #0
 8012e42:	e03d      	b.n	8012ec0 <limits_pull_off+0x158>
        grbl.on_execute_realtime(STATE_HOMING);
 8012e44:	4b24      	ldr	r3, [pc, #144]	@ (8012ed8 <limits_pull_off+0x170>)
 8012e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012e48:	2004      	movs	r0, #4
 8012e4a:	4798      	blx	r3
        st_prep_buffer(); // Check and prep segment buffer.
 8012e4c:	f00d f88a 	bl	801ff64 <st_prep_buffer>
        if (sys.rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_COMPLETE)) {
 8012e50:	4b20      	ldr	r3, [pc, #128]	@ (8012ed4 <limits_pull_off+0x16c>)
 8012e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012e54:	f013 0f64 	tst.w	r3, #100	@ 0x64
 8012e58:	d0f4      	beq.n	8012e44 <limits_pull_off+0xdc>
            uint_fast16_t rt_exec = sys.rt_exec_state;
 8012e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8012ed4 <limits_pull_off+0x16c>)
 8012e5c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
            if (rt_exec & EXEC_RESET)
 8012e5e:	f014 0f20 	tst.w	r4, #32
 8012e62:	d004      	beq.n	8012e6e <limits_pull_off+0x106>
                system_set_exec_alarm(Alarm_HomingFailReset);
 8012e64:	4b1d      	ldr	r3, [pc, #116]	@ (8012edc <limits_pull_off+0x174>)
 8012e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e68:	2106      	movs	r1, #6
 8012e6a:	481d      	ldr	r0, [pc, #116]	@ (8012ee0 <limits_pull_off+0x178>)
 8012e6c:	4798      	blx	r3
            if (rt_exec & EXEC_SAFETY_DOOR)
 8012e6e:	f014 0f40 	tst.w	r4, #64	@ 0x40
 8012e72:	d004      	beq.n	8012e7e <limits_pull_off+0x116>
                system_set_exec_alarm(Alarm_HomingFailDoor);
 8012e74:	4b19      	ldr	r3, [pc, #100]	@ (8012edc <limits_pull_off+0x174>)
 8012e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e78:	2107      	movs	r1, #7
 8012e7a:	4819      	ldr	r0, [pc, #100]	@ (8012ee0 <limits_pull_off+0x178>)
 8012e7c:	4798      	blx	r3
            if (homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask & axis.mask)
 8012e7e:	4b17      	ldr	r3, [pc, #92]	@ (8012edc <limits_pull_off+0x174>)
 8012e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012e82:	4798      	blx	r3
 8012e84:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8012e88:	2200      	movs	r2, #0
 8012e8a:	4611      	mov	r1, r2
 8012e8c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8012e8e:	f7ff fd8f 	bl	80129b0 <homing_signals_select>
 8012e92:	4205      	tst	r5, r0
 8012e94:	d004      	beq.n	8012ea0 <limits_pull_off+0x138>
                system_set_exec_alarm(Alarm_FailPulloff);
 8012e96:	4b11      	ldr	r3, [pc, #68]	@ (8012edc <limits_pull_off+0x174>)
 8012e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e9a:	2108      	movs	r1, #8
 8012e9c:	4810      	ldr	r0, [pc, #64]	@ (8012ee0 <limits_pull_off+0x178>)
 8012e9e:	4798      	blx	r3
            if (sys.rt_exec_alarm) {
 8012ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8012ed4 <limits_pull_off+0x16c>)
 8012ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d1c7      	bne.n	8012e38 <limits_pull_off+0xd0>
                system_clear_exec_state_flag(EXEC_CYCLE_COMPLETE);
 8012ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8012edc <limits_pull_off+0x174>)
 8012eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012eac:	4c0d      	ldr	r4, [pc, #52]	@ (8012ee4 <limits_pull_off+0x17c>)
 8012eae:	2104      	movs	r1, #4
 8012eb0:	4620      	mov	r0, r4
 8012eb2:	4798      	blx	r3
    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 8012eb4:	f00c ff2c 	bl	801fd10 <st_reset>
    sys.step_control.flags = 0; // Return step control to normal operation.
 8012eb8:	2300      	movs	r3, #0
 8012eba:	f804 3c30 	strb.w	r3, [r4, #-48]
    return true; // Note: failure is returned above if move fails.
 8012ebe:	2001      	movs	r0, #1
}
 8012ec0:	b00e      	add	sp, #56	@ 0x38
 8012ec2:	ecbd 8b02 	vpop	{d8}
 8012ec6:	bd70      	pop	{r4, r5, r6, pc}
 8012ec8:	20001df8 	.word	0x20001df8
 8012ecc:	200024a8 	.word	0x200024a8
 8012ed0:	200017c8 	.word	0x200017c8
 8012ed4:	20001d70 	.word	0x20001d70
 8012ed8:	20001c78 	.word	0x20001c78
 8012edc:	20001a90 	.word	0x20001a90
 8012ee0:	20001dbc 	.word	0x20001dbc
 8012ee4:	20001db8 	.word	0x20001db8

08012ee8 <check_arc_travel_limits>:
{
 8012ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012eec:	ed2d 8b02 	vpush	{d8}
 8012ef0:	b08f      	sub	sp, #60	@ 0x3c
 8012ef2:	4604      	mov	r4, r0
 8012ef4:	9201      	str	r2, [sp, #4]
 8012ef6:	461e      	mov	r6, r3
 8012ef8:	ed8d 0a02 	vstr	s0, [sp, #8]
 8012efc:	edcd 0a03 	vstr	s1, [sp, #12]
    if((sys.soft_limits.mask & xyz.mask) == 0)
 8012f00:	4bcd      	ldr	r3, [pc, #820]	@ (8013238 <check_arc_travel_limits+0x350>)
 8012f02:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8012f06:	f013 0f07 	tst.w	r3, #7
 8012f0a:	f000 8097 	beq.w	801303c <check_arc_travel_limits+0x154>
 8012f0e:	460d      	mov	r5, r1
 8012f10:	eeb0 8a41 	vmov.f32	s16, s2
    arc_x_t x = {0};
 8012f14:	2700      	movs	r7, #0
    if(turns > 0) { // CCW
 8012f16:	42be      	cmp	r6, r7
 8012f18:	f340 8099 	ble.w	801304e <check_arc_travel_limits+0x166>
        start.x = position->values[plane.axis_0] - center.x;
 8012f1c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012f20:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8012f24:	edd3 7a00 	vldr	s15, [r3]
 8012f28:	eddd 6a02 	vldr	s13, [sp, #8]
 8012f2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012f30:	edcd 7a0c 	vstr	s15, [sp, #48]	@ 0x30
        start.y = position->values[plane.axis_1] - center.y;
 8012f34:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012f38:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8012f3c:	edd1 7a00 	vldr	s15, [r1]
 8012f40:	ed9d 7a03 	vldr	s14, [sp, #12]
 8012f44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012f48:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
        end.x = target->values[plane.axis_0] - center.x;
 8012f4c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8012f50:	edd2 7a00 	vldr	s15, [r2]
 8012f54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012f58:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
        end.y = target->values[plane.axis_1] - center.y;
 8012f5c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012f60:	edd3 7a00 	vldr	s15, [r3]
 8012f64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012f68:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
    if(labs(turns > 1))
 8012f6c:	2e01      	cmp	r6, #1
 8012f6e:	f340 8097 	ble.w	80130a0 <check_arc_travel_limits+0x1b8>
        x.value = 0b1111;                   // Crosses all
 8012f72:	270f      	movs	r7, #15
    memcpy(&corner1, turns > 0 ? position : target, sizeof(coord_data_t));
 8012f74:	2e00      	cmp	r6, #0
 8012f76:	f340 8134 	ble.w	80131e2 <check_arc_travel_limits+0x2fa>
 8012f7a:	462a      	mov	r2, r5
 8012f7c:	ab07      	add	r3, sp, #28
 8012f7e:	6810      	ldr	r0, [r2, #0]
 8012f80:	6851      	ldr	r1, [r2, #4]
 8012f82:	6892      	ldr	r2, [r2, #8]
 8012f84:	c307      	stmia	r3!, {r0, r1, r2}
    corner1.values[plane.axis_0] = x.neg_x ? center.x - radius : min(position->values[plane.axis_0], target->values[plane.axis_0]);
 8012f86:	fa5f f887 	uxtb.w	r8, r7
 8012f8a:	f017 0f02 	tst.w	r7, #2
 8012f8e:	f000 812a 	beq.w	80131e6 <check_arc_travel_limits+0x2fe>
 8012f92:	eddd 7a02 	vldr	s15, [sp, #8]
 8012f96:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8012f9a:	f89d 9004 	ldrb.w	r9, [sp, #4]
 8012f9e:	ab0e      	add	r3, sp, #56	@ 0x38
 8012fa0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8012fa4:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
    corner1.values[plane.axis_1] = x.neg_y ? center.y - radius : max(position->values[plane.axis_1], target->values[plane.axis_1]);
 8012fa8:	f018 0f04 	tst.w	r8, #4
 8012fac:	f000 812e 	beq.w	801320c <check_arc_travel_limits+0x324>
 8012fb0:	eddd 7a03 	vldr	s15, [sp, #12]
 8012fb4:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8012fb8:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8012fbc:	ab0e      	add	r3, sp, #56	@ 0x38
 8012fbe:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8012fc2:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
    if(!grbl.check_travel_limits(corner1.values, sys.soft_limits, true))
 8012fc6:	4b9d      	ldr	r3, [pc, #628]	@ (801323c <check_arc_travel_limits+0x354>)
 8012fc8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012fcc:	2201      	movs	r2, #1
 8012fce:	499a      	ldr	r1, [pc, #616]	@ (8013238 <check_arc_travel_limits+0x350>)
 8012fd0:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 8012fd4:	a807      	add	r0, sp, #28
 8012fd6:	4798      	blx	r3
 8012fd8:	b358      	cbz	r0, 8013032 <check_arc_travel_limits+0x14a>
    memcpy(&corner2, turns > 0 ? target : position, sizeof(coord_data_t));
 8012fda:	2e00      	cmp	r6, #0
 8012fdc:	f340 8129 	ble.w	8013232 <check_arc_travel_limits+0x34a>
 8012fe0:	4622      	mov	r2, r4
 8012fe2:	ab04      	add	r3, sp, #16
 8012fe4:	6810      	ldr	r0, [r2, #0]
 8012fe6:	6851      	ldr	r1, [r2, #4]
 8012fe8:	6892      	ldr	r2, [r2, #8]
 8012fea:	c307      	stmia	r3!, {r0, r1, r2}
    corner2.values[plane.axis_0] = x.pos_x ? center.x + radius : max(position->values[plane.axis_0], target->values[plane.axis_0]);
 8012fec:	f018 0f08 	tst.w	r8, #8
 8012ff0:	f000 8126 	beq.w	8013240 <check_arc_travel_limits+0x358>
 8012ff4:	eddd 7a02 	vldr	s15, [sp, #8]
 8012ff8:	ee77 7a88 	vadd.f32	s15, s15, s16
 8012ffc:	ab0e      	add	r3, sp, #56	@ 0x38
 8012ffe:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8013002:	ed43 7a0a 	vstr	s15, [r3, #-40]	@ 0xffffffd8
    corner2.values[plane.axis_1] = x.pos_y ? center.y + radius : min(position->values[plane.axis_1], target->values[plane.axis_1]);
 8013006:	f018 0f01 	tst.w	r8, #1
 801300a:	f000 812a 	beq.w	8013262 <check_arc_travel_limits+0x37a>
 801300e:	eddd 7a03 	vldr	s15, [sp, #12]
 8013012:	ee77 7a88 	vadd.f32	s15, s15, s16
 8013016:	ab0e      	add	r3, sp, #56	@ 0x38
 8013018:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801301c:	ed47 7a0a 	vstr	s15, [r7, #-40]	@ 0xffffffd8
   return grbl.check_travel_limits(corner2.values, sys.soft_limits, true);
 8013020:	4b86      	ldr	r3, [pc, #536]	@ (801323c <check_arc_travel_limits+0x354>)
 8013022:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8013026:	2201      	movs	r2, #1
 8013028:	4983      	ldr	r1, [pc, #524]	@ (8013238 <check_arc_travel_limits+0x350>)
 801302a:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 801302e:	a804      	add	r0, sp, #16
 8013030:	4798      	blx	r3
}
 8013032:	b00f      	add	sp, #60	@ 0x3c
 8013034:	ecbd 8b02 	vpop	{d8}
 8013038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return grbl.check_travel_limits(target->values, sys.soft_limits, true);
 801303c:	4b7f      	ldr	r3, [pc, #508]	@ (801323c <check_arc_travel_limits+0x354>)
 801303e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8013042:	2201      	movs	r2, #1
 8013044:	497c      	ldr	r1, [pc, #496]	@ (8013238 <check_arc_travel_limits+0x350>)
 8013046:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 801304a:	4798      	blx	r3
 801304c:	e7f1      	b.n	8013032 <check_arc_travel_limits+0x14a>
        start.x = target->values[plane.axis_0] - center.x;
 801304e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013052:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8013056:	edd3 7a00 	vldr	s15, [r3]
 801305a:	eddd 6a02 	vldr	s13, [sp, #8]
 801305e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013062:	edcd 7a0c 	vstr	s15, [sp, #48]	@ 0x30
        start.y = target->values[plane.axis_1] - center.y;
 8013066:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801306a:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801306e:	edd1 7a00 	vldr	s15, [r1]
 8013072:	ed9d 7a03 	vldr	s14, [sp, #12]
 8013076:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801307a:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
        end.x = position->values[plane.axis_0] - center.x;
 801307e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8013082:	edd2 7a00 	vldr	s15, [r2]
 8013086:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801308a:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
        end.y = position->values[plane.axis_1] - center.y;
 801308e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013092:	edd3 7a00 	vldr	s15, [r3]
 8013096:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801309a:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 801309e:	e765      	b.n	8012f6c <check_arc_travel_limits+0x84>
    else if(start.y >= 0.0f) {
 80130a0:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 80130a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80130a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ac:	db4c      	blt.n	8013148 <check_arc_travel_limits+0x260>
        if(start.x > 0.0f) {                // Starts in Q1
 80130ae:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 80130b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80130b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ba:	dd22      	ble.n	8013102 <check_arc_travel_limits+0x21a>
            if(end.y >= 0.0f) {
 80130bc:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 80130c0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80130c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130c8:	db10      	blt.n	80130ec <check_arc_travel_limits+0x204>
                if(end.x <= 0.0f)
 80130ca:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 80130ce:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80130d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130d6:	d907      	bls.n	80130e8 <check_arc_travel_limits+0x200>
                else if(end.x >= start.x)
 80130d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80130dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130e0:	f63f af48 	bhi.w	8012f74 <check_arc_travel_limits+0x8c>
                    x.value = 0b1111;       // Ends in Q1, crosses all
 80130e4:	270f      	movs	r7, #15
 80130e6:	e745      	b.n	8012f74 <check_arc_travel_limits+0x8c>
                    x.value = 0b0001;       // Ends in Q2
 80130e8:	2701      	movs	r7, #1
 80130ea:	e743      	b.n	8012f74 <check_arc_travel_limits+0x8c>
            } else if(end.x <= 0.0f)
 80130ec:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 80130f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80130f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130f8:	d901      	bls.n	80130fe <check_arc_travel_limits+0x216>
                x.value = 0b0111;           // Ends in Q4
 80130fa:	2707      	movs	r7, #7
 80130fc:	e73a      	b.n	8012f74 <check_arc_travel_limits+0x8c>
                x.value = 0b0011;           // Ends in Q3
 80130fe:	2703      	movs	r7, #3
 8013100:	e738      	b.n	8012f74 <check_arc_travel_limits+0x8c>
            if(end.y >= 0.0f) {
 8013102:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 8013106:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801310a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801310e:	db10      	blt.n	8013132 <check_arc_travel_limits+0x24a>
                if(end.x > 0.0f)
 8013110:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 8013114:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801311c:	dd01      	ble.n	8013122 <check_arc_travel_limits+0x23a>
                    x.value = 0b1110;       // Ends in Q1
 801311e:	270e      	movs	r7, #14
 8013120:	e728      	b.n	8012f74 <check_arc_travel_limits+0x8c>
                else if(end.x >= start.x)
 8013122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801312a:	f63f af23 	bhi.w	8012f74 <check_arc_travel_limits+0x8c>
                    x.value = 0b1111;       // Ends in Q2, crosses all
 801312e:	270f      	movs	r7, #15
 8013130:	e720      	b.n	8012f74 <check_arc_travel_limits+0x8c>
            } else if(end.x <= 0.0f)
 8013132:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 8013136:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801313e:	d901      	bls.n	8013144 <check_arc_travel_limits+0x25c>
                x.value = 0b0110;           // Ends in Q4
 8013140:	2706      	movs	r7, #6
 8013142:	e717      	b.n	8012f74 <check_arc_travel_limits+0x8c>
                x.value = 0b0010;           // Ends in Q3
 8013144:	2702      	movs	r7, #2
 8013146:	e715      	b.n	8012f74 <check_arc_travel_limits+0x8c>
    } else if(start.x < 0.0f) {             // Starts in Q3
 8013148:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 801314c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013154:	d40f      	bmi.n	8013176 <check_arc_travel_limits+0x28e>
        if(end.y < 0.0f) {
 8013156:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 801315a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801315e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013162:	d42b      	bmi.n	80131bc <check_arc_travel_limits+0x2d4>
        } else if(end.x > 0.0f)
 8013164:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 8013168:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801316c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013170:	dd35      	ble.n	80131de <check_arc_travel_limits+0x2f6>
            x.value = 0b1000;               // Ends in Q1
 8013172:	2708      	movs	r7, #8
 8013174:	e6fe      	b.n	8012f74 <check_arc_travel_limits+0x8c>
        if(end.y < 0.0f) {
 8013176:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 801317a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801317e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013182:	d408      	bmi.n	8013196 <check_arc_travel_limits+0x2ae>
        } else if(end.x > 0.0f)
 8013184:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 8013188:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801318c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013190:	dd12      	ble.n	80131b8 <check_arc_travel_limits+0x2d0>
            x.value = 0b1100;               // Ends in Q1
 8013192:	270c      	movs	r7, #12
 8013194:	e6ee      	b.n	8012f74 <check_arc_travel_limits+0x8c>
            if(end.x > 0.0f)
 8013196:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 801319a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801319e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131a2:	dd01      	ble.n	80131a8 <check_arc_travel_limits+0x2c0>
                x.value = 0b0100;           // Ends in Q4
 80131a4:	2704      	movs	r7, #4
 80131a6:	e6e5      	b.n	8012f74 <check_arc_travel_limits+0x8c>
            else if(end.x <= start.x)
 80131a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80131ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131b0:	f6ff aee0 	blt.w	8012f74 <check_arc_travel_limits+0x8c>
                x.value = 0b1111;           // Ends in Q3, crosses all
 80131b4:	270f      	movs	r7, #15
 80131b6:	e6dd      	b.n	8012f74 <check_arc_travel_limits+0x8c>
            x.value = 0b1101;               // Ends in Q2
 80131b8:	270d      	movs	r7, #13
 80131ba:	e6db      	b.n	8012f74 <check_arc_travel_limits+0x8c>
            if(end.x < 0.0f)
 80131bc:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 80131c0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80131c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131c8:	d407      	bmi.n	80131da <check_arc_travel_limits+0x2f2>
            else if(end.x <= start.x)
 80131ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80131ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131d2:	f6ff aecf 	blt.w	8012f74 <check_arc_travel_limits+0x8c>
                x.value = 0b1111;           // Ends in Q4, crosses all
 80131d6:	270f      	movs	r7, #15
 80131d8:	e6cc      	b.n	8012f74 <check_arc_travel_limits+0x8c>
                x.value = 0b1011;           // Ends in Q3
 80131da:	270b      	movs	r7, #11
 80131dc:	e6ca      	b.n	8012f74 <check_arc_travel_limits+0x8c>
            x.value = 0b1001;               // Ends in Q2
 80131de:	2709      	movs	r7, #9
 80131e0:	e6c8      	b.n	8012f74 <check_arc_travel_limits+0x8c>
    memcpy(&corner1, turns > 0 ? position : target, sizeof(coord_data_t));
 80131e2:	4622      	mov	r2, r4
 80131e4:	e6ca      	b.n	8012f7c <check_arc_travel_limits+0x94>
    corner1.values[plane.axis_0] = x.neg_x ? center.x - radius : min(position->values[plane.axis_0], target->values[plane.axis_0]);
 80131e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80131ea:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80131ee:	ed92 7a00 	vldr	s14, [r2]
 80131f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80131f6:	edd3 7a00 	vldr	s15, [r3]
 80131fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80131fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013202:	f57f aeca 	bpl.w	8012f9a <check_arc_travel_limits+0xb2>
 8013206:	eef0 7a47 	vmov.f32	s15, s14
 801320a:	e6c6      	b.n	8012f9a <check_arc_travel_limits+0xb2>
    corner1.values[plane.axis_1] = x.neg_y ? center.y - radius : max(position->values[plane.axis_1], target->values[plane.axis_1]);
 801320c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013210:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8013214:	ed92 7a00 	vldr	s14, [r2]
 8013218:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801321c:	edd3 7a00 	vldr	s15, [r3]
 8013220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013228:	f77f aec6 	ble.w	8012fb8 <check_arc_travel_limits+0xd0>
 801322c:	eef0 7a47 	vmov.f32	s15, s14
 8013230:	e6c2      	b.n	8012fb8 <check_arc_travel_limits+0xd0>
    memcpy(&corner2, turns > 0 ? target : position, sizeof(coord_data_t));
 8013232:	462a      	mov	r2, r5
 8013234:	e6d5      	b.n	8012fe2 <check_arc_travel_limits+0xfa>
 8013236:	bf00      	nop
 8013238:	20001d70 	.word	0x20001d70
 801323c:	20001c78 	.word	0x20001c78
    corner2.values[plane.axis_0] = x.pos_x ? center.x + radius : max(position->values[plane.axis_0], target->values[plane.axis_0]);
 8013240:	eb05 0389 	add.w	r3, r5, r9, lsl #2
 8013244:	ed93 7a00 	vldr	s14, [r3]
 8013248:	eb04 0389 	add.w	r3, r4, r9, lsl #2
 801324c:	edd3 7a00 	vldr	s15, [r3]
 8013250:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013258:	f77f aed0 	ble.w	8012ffc <check_arc_travel_limits+0x114>
 801325c:	eef0 7a47 	vmov.f32	s15, s14
 8013260:	e6cc      	b.n	8012ffc <check_arc_travel_limits+0x114>
    corner2.values[plane.axis_1] = x.pos_y ? center.y + radius : min(position->values[plane.axis_1], target->values[plane.axis_1]);
 8013262:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8013266:	ed95 7a00 	vldr	s14, [r5]
 801326a:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 801326e:	edd4 7a00 	vldr	s15, [r4]
 8013272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801327a:	f57f aecc 	bpl.w	8013016 <check_arc_travel_limits+0x12e>
 801327e:	eef0 7a47 	vmov.f32	s15, s14
 8013282:	e6c8      	b.n	8013016 <check_arc_travel_limits+0x12e>

08013284 <limit_signals_merge>:
{
 8013284:	b082      	sub	sp, #8
 8013286:	9001      	str	r0, [sp, #4]
    state.mask = signals.min.mask | signals.min2.mask | signals.max.mask | signals.max2.mask;
 8013288:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801328c:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8013290:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013294:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013298:	430a      	orrs	r2, r1
 801329a:	4313      	orrs	r3, r2
}
 801329c:	4318      	orrs	r0, r3
 801329e:	b002      	add	sp, #8
 80132a0:	4770      	bx	lr
	...

080132a4 <limit_interrupt_handler>:
{
 80132a4:	b500      	push	{lr}
 80132a6:	b083      	sub	sp, #12
 80132a8:	9001      	str	r0, [sp, #4]
    memcpy(&sys.last_event.limits, &state, sizeof(limit_signals_t));
 80132aa:	4b0b      	ldr	r3, [pc, #44]	@ (80132d8 <limit_interrupt_handler+0x34>)
 80132ac:	f8c3 0082 	str.w	r0, [r3, #130]	@ 0x82
    if (!(state_get() & (STATE_ALARM|STATE_ESTOP)) && !sys.rt_exec_alarm) {
 80132b0:	f00b fe4a 	bl	801ef48 <state_get>
 80132b4:	f240 1301 	movw	r3, #257	@ 0x101
 80132b8:	4218      	tst	r0, r3
 80132ba:	d102      	bne.n	80132c2 <limit_interrupt_handler+0x1e>
 80132bc:	4b06      	ldr	r3, [pc, #24]	@ (80132d8 <limit_interrupt_handler+0x34>)
 80132be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80132c0:	b113      	cbz	r3, 80132c8 <limit_interrupt_handler+0x24>
}
 80132c2:	b003      	add	sp, #12
 80132c4:	f85d fb04 	ldr.w	pc, [sp], #4
        mc_reset(); // Initiate system kill.
 80132c8:	f001 fd0a 	bl	8014ce0 <mc_reset>
        system_set_exec_alarm(Alarm_HardLimit); // Indicate hard limit critical event
 80132cc:	4b03      	ldr	r3, [pc, #12]	@ (80132dc <limit_interrupt_handler+0x38>)
 80132ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80132d0:	2101      	movs	r1, #1
 80132d2:	4803      	ldr	r0, [pc, #12]	@ (80132e0 <limit_interrupt_handler+0x3c>)
 80132d4:	4798      	blx	r3
}
 80132d6:	e7f4      	b.n	80132c2 <limit_interrupt_handler+0x1e>
 80132d8:	20001d70 	.word	0x20001d70
 80132dc:	20001a90 	.word	0x20001a90
 80132e0:	20001dbc 	.word	0x20001dbc

080132e4 <limits_set_work_envelope>:
    uint_fast8_t idx = N_AXIS;
 80132e4:	2303      	movs	r3, #3
 80132e6:	e067      	b.n	80133b8 <limits_set_work_envelope+0xd4>
            float pulloff = settings.limits.flags.hard_enabled && bit_istrue(sys.homing.mask, bit(idx)) ? settings.homing.pulloff : 0.0f;
 80132e8:	eddf 7a40 	vldr	s15, [pc, #256]	@ 80133ec <limits_set_work_envelope+0x108>
            if(settings.homing.flags.force_set_origin) {
 80132ec:	4a40      	ldr	r2, [pc, #256]	@ (80133f0 <limits_set_work_envelope+0x10c>)
 80132ee:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 80132f2:	f012 0f08 	tst.w	r2, #8
 80132f6:	d039      	beq.n	801336c <limits_set_work_envelope+0x88>
                if(bit_isfalse(settings.homing.dir_mask.value, bit(idx))) {
 80132f8:	4a3d      	ldr	r2, [pc, #244]	@ (80133f0 <limits_set_work_envelope+0x10c>)
 80132fa:	f892 2110 	ldrb.w	r2, [r2, #272]	@ 0x110
 80132fe:	40da      	lsrs	r2, r3
 8013300:	f012 0f01 	tst.w	r2, #1
 8013304:	d119      	bne.n	801333a <limits_set_work_envelope+0x56>
                    sys.work_envelope.min.values[idx] = settings.axis[idx].max_travel + pulloff;
 8013306:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801330a:	0091      	lsls	r1, r2, #2
 801330c:	4a38      	ldr	r2, [pc, #224]	@ (80133f0 <limits_set_work_envelope+0x10c>)
 801330e:	440a      	add	r2, r1
 8013310:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 8013314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013318:	4a36      	ldr	r2, [pc, #216]	@ (80133f4 <limits_set_work_envelope+0x110>)
 801331a:	f103 0118 	add.w	r1, r3, #24
 801331e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8013322:	edc1 7a01 	vstr	s15, [r1, #4]
                    sys.work_envelope.max.values[idx] = 0.0f;
 8013326:	f103 011a 	add.w	r1, r3, #26
 801332a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801332e:	2100      	movs	r1, #0
 8013330:	6091      	str	r1, [r2, #8]
 8013332:	e040      	b.n	80133b6 <limits_set_work_envelope+0xd2>
            float pulloff = settings.limits.flags.hard_enabled && bit_istrue(sys.homing.mask, bit(idx)) ? settings.homing.pulloff : 0.0f;
 8013334:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80133ec <limits_set_work_envelope+0x108>
 8013338:	e7d8      	b.n	80132ec <limits_set_work_envelope+0x8>
                    sys.work_envelope.min.values[idx] = 0.0f;
 801333a:	4a2e      	ldr	r2, [pc, #184]	@ (80133f4 <limits_set_work_envelope+0x110>)
 801333c:	f103 0118 	add.w	r1, r3, #24
 8013340:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8013344:	2000      	movs	r0, #0
 8013346:	6048      	str	r0, [r1, #4]
                    sys.work_envelope.max.values[idx] = - (settings.axis[idx].max_travel + pulloff);
 8013348:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801334c:	0088      	lsls	r0, r1, #2
 801334e:	4928      	ldr	r1, [pc, #160]	@ (80133f0 <limits_set_work_envelope+0x10c>)
 8013350:	4401      	add	r1, r0
 8013352:	ed91 7a0f 	vldr	s14, [r1, #60]	@ 0x3c
 8013356:	ee77 7a27 	vadd.f32	s15, s14, s15
 801335a:	eef1 7a67 	vneg.f32	s15, s15
 801335e:	f103 011a 	add.w	r1, r3, #26
 8013362:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8013366:	edc2 7a02 	vstr	s15, [r2, #8]
 801336a:	e024      	b.n	80133b6 <limits_set_work_envelope+0xd2>
                sys.work_envelope.min.values[idx] = settings.axis[idx].max_travel + pulloff;
 801336c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8013370:	0091      	lsls	r1, r2, #2
 8013372:	4a1f      	ldr	r2, [pc, #124]	@ (80133f0 <limits_set_work_envelope+0x10c>)
 8013374:	440a      	add	r2, r1
 8013376:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 801337a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801337e:	4a1d      	ldr	r2, [pc, #116]	@ (80133f4 <limits_set_work_envelope+0x110>)
 8013380:	f103 0118 	add.w	r1, r3, #24
 8013384:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8013388:	ed81 7a01 	vstr	s14, [r1, #4]
                sys.work_envelope.max.values[idx] = - pulloff;
 801338c:	eef1 7a67 	vneg.f32	s15, s15
 8013390:	f103 011a 	add.w	r1, r3, #26
 8013394:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8013398:	edc2 7a02 	vstr	s15, [r2, #8]
 801339c:	e00b      	b.n	80133b6 <limits_set_work_envelope+0xd2>
            sys.work_envelope.min.values[idx] = sys.work_envelope.max.values[idx] = 0.0f;
 801339e:	4a15      	ldr	r2, [pc, #84]	@ (80133f4 <limits_set_work_envelope+0x110>)
 80133a0:	f103 011a 	add.w	r1, r3, #26
 80133a4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80133a8:	2000      	movs	r0, #0
 80133aa:	6088      	str	r0, [r1, #8]
 80133ac:	f103 0118 	add.w	r1, r3, #24
 80133b0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80133b4:	6050      	str	r0, [r2, #4]
    } while(idx);
 80133b6:	b1bb      	cbz	r3, 80133e8 <limits_set_work_envelope+0x104>
        if(sys.homed.mask & bit(--idx)) {
 80133b8:	4a0e      	ldr	r2, [pc, #56]	@ (80133f4 <limits_set_work_envelope+0x110>)
 80133ba:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80133be:	3b01      	subs	r3, #1
 80133c0:	40da      	lsrs	r2, r3
 80133c2:	f012 0f01 	tst.w	r2, #1
 80133c6:	d0ea      	beq.n	801339e <limits_set_work_envelope+0xba>
            float pulloff = settings.limits.flags.hard_enabled && bit_istrue(sys.homing.mask, bit(idx)) ? settings.homing.pulloff : 0.0f;
 80133c8:	4a09      	ldr	r2, [pc, #36]	@ (80133f0 <limits_set_work_envelope+0x10c>)
 80133ca:	f892 2124 	ldrb.w	r2, [r2, #292]	@ 0x124
 80133ce:	f012 0f01 	tst.w	r2, #1
 80133d2:	d089      	beq.n	80132e8 <limits_set_work_envelope+0x4>
 80133d4:	4a07      	ldr	r2, [pc, #28]	@ (80133f4 <limits_set_work_envelope+0x110>)
 80133d6:	7e92      	ldrb	r2, [r2, #26]
 80133d8:	40da      	lsrs	r2, r3
 80133da:	f012 0f01 	tst.w	r2, #1
 80133de:	d0a9      	beq.n	8013334 <limits_set_work_envelope+0x50>
 80133e0:	4a03      	ldr	r2, [pc, #12]	@ (80133f0 <limits_set_work_envelope+0x10c>)
 80133e2:	edd2 7a43 	vldr	s15, [r2, #268]	@ 0x10c
 80133e6:	e781      	b.n	80132ec <limits_set_work_envelope+0x8>
}
 80133e8:	4770      	bx	lr
 80133ea:	bf00      	nop
 80133ec:	00000000 	.word	0x00000000
 80133f0:	200024a8 	.word	0x200024a8
 80133f4:	20001d70 	.word	0x20001d70

080133f8 <limits_set_machine_positions>:
{
 80133f8:	b570      	push	{r4, r5, r6, lr}
 80133fa:	ed2d 8b02 	vpush	{d8}
 80133fe:	4605      	mov	r5, r0
    float pulloff = add_pulloff ? settings.homing.pulloff : -0.0f;
 8013400:	b119      	cbz	r1, 801340a <limits_set_machine_positions+0x12>
 8013402:	4b2b      	ldr	r3, [pc, #172]	@ (80134b0 <limits_set_machine_positions+0xb8>)
 8013404:	ed93 8a43 	vldr	s16, [r3, #268]	@ 0x10c
 8013408:	e001      	b.n	801340e <limits_set_machine_positions+0x16>
 801340a:	ed9f 8a2a 	vldr	s16, [pc, #168]	@ 80134b4 <limits_set_machine_positions+0xbc>
    if(settings.homing.flags.force_set_origin) {
 801340e:	4b28      	ldr	r3, [pc, #160]	@ (80134b0 <limits_set_machine_positions+0xb8>)
 8013410:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8013414:	f013 0f08 	tst.w	r3, #8
 8013418:	d015      	beq.n	8013446 <limits_set_machine_positions+0x4e>
    uint_fast8_t idx = N_AXIS;
 801341a:	2203      	movs	r2, #3
 801341c:	e00c      	b.n	8013438 <limits_set_machine_positions+0x40>
                sys.position[idx] = 0;
 801341e:	4b26      	ldr	r3, [pc, #152]	@ (80134b8 <limits_set_machine_positions+0xc0>)
 8013420:	f102 0122 	add.w	r1, r2, #34	@ 0x22
 8013424:	2000      	movs	r0, #0
 8013426:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
                sys.home_position[idx] = 0.0f;
 801342a:	f102 0116 	add.w	r1, r2, #22
 801342e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8013432:	2100      	movs	r1, #0
 8013434:	6019      	str	r1, [r3, #0]
        } while(idx);
 8013436:	b3c2      	cbz	r2, 80134aa <limits_set_machine_positions+0xb2>
            if (cycle.mask & bit(--idx)) {
 8013438:	b2eb      	uxtb	r3, r5
 801343a:	3a01      	subs	r2, #1
 801343c:	40d3      	lsrs	r3, r2
 801343e:	f013 0f01 	tst.w	r3, #1
 8013442:	d0f8      	beq.n	8013436 <limits_set_machine_positions+0x3e>
 8013444:	e7eb      	b.n	801341e <limits_set_machine_positions+0x26>
    uint_fast8_t idx = N_AXIS;
 8013446:	2403      	movs	r4, #3
 8013448:	e018      	b.n	801347c <limits_set_machine_positions+0x84>
                                      : - pulloff;
 801344a:	eef1 7a48 	vneg.f32	s15, s16
            sys.home_position[idx] = bit_istrue(settings.homing.dir_mask.value, bit(idx))
 801344e:	4e1a      	ldr	r6, [pc, #104]	@ (80134b8 <limits_set_machine_positions+0xc0>)
 8013450:	f104 0316 	add.w	r3, r4, #22
 8013454:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013458:	edc3 7a00 	vstr	s15, [r3]
            sys.position[idx] = lroundf(sys.home_position[idx] * settings.axis[idx].steps_per_mm);
 801345c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8013460:	4b13      	ldr	r3, [pc, #76]	@ (80134b0 <limits_set_machine_positions+0xb8>)
 8013462:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013466:	ed93 0a0c 	vldr	s0, [r3, #48]	@ 0x30
 801346a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801346e:	f014 fa9d 	bl	80279ac <lroundf>
 8013472:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 8013476:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
    } while(idx);
 801347a:	b1b4      	cbz	r4, 80134aa <limits_set_machine_positions+0xb2>
        if (cycle.mask & bit(--idx)) {
 801347c:	b2eb      	uxtb	r3, r5
 801347e:	3c01      	subs	r4, #1
 8013480:	40e3      	lsrs	r3, r4
 8013482:	f013 0f01 	tst.w	r3, #1
 8013486:	d0f8      	beq.n	801347a <limits_set_machine_positions+0x82>
            sys.home_position[idx] = bit_istrue(settings.homing.dir_mask.value, bit(idx))
 8013488:	4b09      	ldr	r3, [pc, #36]	@ (80134b0 <limits_set_machine_positions+0xb8>)
 801348a:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 801348e:	40e3      	lsrs	r3, r4
                                      : - pulloff;
 8013490:	f013 0f01 	tst.w	r3, #1
 8013494:	d0d9      	beq.n	801344a <limits_set_machine_positions+0x52>
                                      ? settings.axis[idx].max_travel + pulloff
 8013496:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801349a:	4b05      	ldr	r3, [pc, #20]	@ (80134b0 <limits_set_machine_positions+0xb8>)
 801349c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80134a0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
                                      : - pulloff;
 80134a4:	ee77 7a88 	vadd.f32	s15, s15, s16
 80134a8:	e7d1      	b.n	801344e <limits_set_machine_positions+0x56>
}
 80134aa:	ecbd 8b02 	vpop	{d8}
 80134ae:	bd70      	pop	{r4, r5, r6, pc}
 80134b0:	200024a8 	.word	0x200024a8
 80134b4:	80000000 	.word	0x80000000
 80134b8:	20001d70 	.word	0x20001d70

080134bc <homing_cycle>:
{
 80134bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134c0:	ed2d 8b02 	vpush	{d8}
 80134c4:	b099      	sub	sp, #100	@ 0x64
 80134c6:	f88d 000e 	strb.w	r0, [sp, #14]
 80134ca:	f88d 100f 	strb.w	r1, [sp, #15]
    if (ABORTED) // Block if system reset has been issued.
 80134ce:	4b92      	ldr	r3, [pc, #584]	@ (8013718 <homing_cycle+0x25c>)
 80134d0:	881b      	ldrh	r3, [r3, #0]
 80134d2:	b12b      	cbz	r3, 80134e0 <homing_cycle+0x24>
        return false;
 80134d4:	2000      	movs	r0, #0
}
 80134d6:	b019      	add	sp, #100	@ 0x64
 80134d8:	ecbd 8b02 	vpop	{d8}
 80134dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint_fast8_t n_cycle = (2 * settings.homing.locate_cycles + 1);
 80134e0:	4b8e      	ldr	r3, [pc, #568]	@ (801371c <homing_cycle+0x260>)
 80134e2:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 80134e6:	005b      	lsls	r3, r3, #1
 80134e8:	3301      	adds	r3, #1
 80134ea:	9302      	str	r3, [sp, #8]
    plan_data_init(&plan_data);
 80134ec:	a806      	add	r0, sp, #24
 80134ee:	f003 fcf7 	bl	8016ee0 <plan_data_init>
    plan_data.condition.system_motion = On;
 80134f2:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 80134f6:	f043 0302 	orr.w	r3, r3, #2
 80134fa:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    plan_data.condition.no_feed_override = On;
 80134fe:	b2db      	uxtb	r3, r3
 8013500:	f043 0310 	orr.w	r3, r3, #16
 8013504:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    plan_data.line_number = DEFAULT_HOMING_CYCLE_LINE_NUMBER;
 8013508:	2500      	movs	r5, #0
 801350a:	950d      	str	r5, [sp, #52]	@ 0x34
    memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t));
 801350c:	4e84      	ldr	r6, [pc, #528]	@ (8013720 <homing_cycle+0x264>)
 801350e:	ac07      	add	r4, sp, #28
 8013510:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8013514:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013516:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    plan_data.condition.coolant = gc_state.modal.coolant;
 801351a:	7e73      	ldrb	r3, [r6, #25]
 801351c:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
    uint_fast8_t idx = N_AXIS;
 8013520:	f04f 0a03 	mov.w	sl, #3
    float max_travel = 0.0f, homing_rate;
 8013524:	eddf 8a7f 	vldr	s17, [pc, #508]	@ 8013724 <homing_cycle+0x268>
    uint_fast8_t step_pin[N_AXIS], n_active_axis, dual_motor_axis = 0;
 8013528:	46a9      	mov	r9, r5
 801352a:	4653      	mov	r3, sl
 801352c:	e000      	b.n	8013530 <homing_cycle+0x74>
    } while(idx);
 801352e:	b343      	cbz	r3, 8013582 <homing_cycle+0xc6>
        idx--;
 8013530:	3b01      	subs	r3, #1
        step_pin[idx] = bit(idx);
 8013532:	2201      	movs	r2, #1
 8013534:	409a      	lsls	r2, r3
 8013536:	a918      	add	r1, sp, #96	@ 0x60
 8013538:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801353c:	f841 2c10 	str.w	r2, [r1, #-16]
        if(bit_istrue(cycle.mask, bit(idx))) {
 8013540:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8013544:	fa22 f103 	lsr.w	r1, r2, r3
 8013548:	f011 0f01 	tst.w	r1, #1
 801354c:	d0ef      	beq.n	801352e <homing_cycle+0x72>
            max_travel = max(max_travel, (-HOMING_AXIS_SEARCH_SCALAR) * settings.axis[idx].max_travel);
 801354e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8013552:	4972      	ldr	r1, [pc, #456]	@ (801371c <homing_cycle+0x260>)
 8013554:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8013558:	edd1 7a0f 	vldr	s15, [r1, #60]	@ 0x3c
 801355c:	eebf 7a08 	vmov.f32	s14, #248	@ 0xbfc00000 -1.5
 8013560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013564:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801356c:	d401      	bmi.n	8013572 <homing_cycle+0xb6>
 801356e:	eef0 8a67 	vmov.f32	s17, s15
            if(bit_istrue(auto_square.mask, bit(idx)))
 8013572:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8013576:	40d9      	lsrs	r1, r3
 8013578:	f011 0f01 	tst.w	r1, #1
 801357c:	d0d7      	beq.n	801352e <homing_cycle+0x72>
                dual_motor_axis = idx;
 801357e:	4699      	mov	r9, r3
 8013580:	e7d5      	b.n	801352e <homing_cycle+0x72>
    if(max_travel == 0.0f)
 8013582:	9204      	str	r2, [sp, #16]
 8013584:	469a      	mov	sl, r3
 8013586:	eef5 8a40 	vcmp.f32	s17, #0.0
 801358a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801358e:	f000 8200 	beq.w	8013992 <homing_cycle+0x4d6>
    if((homing_rate = hal.homing.get_feedrate(cycle, HomingMode_Seek)) == 0.0f)
 8013592:	4b65      	ldr	r3, [pc, #404]	@ (8013728 <homing_cycle+0x26c>)
 8013594:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013596:	2100      	movs	r1, #0
 8013598:	f89d 000e 	ldrb.w	r0, [sp, #14]
 801359c:	4798      	blx	r3
 801359e:	eeb0 8a40 	vmov.f32	s16, s0
 80135a2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80135a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135aa:	f000 81f4 	beq.w	8013996 <homing_cycle+0x4da>
    if(auto_square.mask) {
 80135ae:	f89d b00f 	ldrb.w	fp, [sp, #15]
 80135b2:	f1bb 0f00 	cmp.w	fp, #0
 80135b6:	d031      	beq.n	801361c <homing_cycle+0x160>
        float fail_distance = (-settings.homing.dual_axis.fail_length_percent / 100.0f) * settings.axis[dual_motor_axis].max_travel;
 80135b8:	4b58      	ldr	r3, [pc, #352]	@ (801371c <homing_cycle+0x260>)
 80135ba:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 80135be:	eeb1 7a47 	vneg.f32	s14, s14
 80135c2:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 801372c <homing_cycle+0x270>
 80135c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80135ca:	eb09 0189 	add.w	r1, r9, r9, lsl #2
 80135ce:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80135d2:	ed91 7a0f 	vldr	s14, [r1, #60]	@ 0x3c
 80135d6:	ee67 7a87 	vmul.f32	s15, s15, s14
        fail_distance = min(fail_distance, settings.homing.dual_axis.fail_distance_max);
 80135da:	ed93 7a47 	vldr	s14, [r3, #284]	@ 0x11c
 80135de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80135e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135e6:	dd01      	ble.n	80135ec <homing_cycle+0x130>
 80135e8:	eeb0 7a67 	vmov.f32	s14, s15
        fail_distance = max(fail_distance, settings.homing.dual_axis.fail_distance_min);
 80135ec:	4b4b      	ldr	r3, [pc, #300]	@ (801371c <homing_cycle+0x260>)
 80135ee:	edd3 6a48 	vldr	s13, [r3, #288]	@ 0x120
 80135f2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80135f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135fa:	d501      	bpl.n	8013600 <homing_cycle+0x144>
 80135fc:	eef0 6a47 	vmov.f32	s13, s14
        autosquare_fail_distance = truncf(fail_distance * settings.axis[dual_motor_axis].steps_per_mm);
 8013600:	eb09 0189 	add.w	r1, r9, r9, lsl #2
 8013604:	4b45      	ldr	r3, [pc, #276]	@ (801371c <homing_cycle+0x260>)
 8013606:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801360a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801360e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013616:	edcd 7a01 	vstr	s15, [sp, #4]
 801361a:	e001      	b.n	8013620 <homing_cycle+0x164>
    int32_t initial_trigger_position = 0, autosquare_fail_distance = 0;
 801361c:	2300      	movs	r3, #0
 801361e:	9301      	str	r3, [sp, #4]
 8013620:	2700      	movs	r7, #0
 8013622:	463e      	mov	r6, r7
 8013624:	46b8      	mov	r8, r7
 8013626:	9700      	str	r7, [sp, #0]
 8013628:	f8cd a014 	str.w	sl, [sp, #20]
 801362c:	f89d a00f 	ldrb.w	sl, [sp, #15]
 8013630:	e137      	b.n	80138a2 <homing_cycle+0x3e6>
                    target.values[idx] = mode == HomingMode_Pulloff ? max_travel : - max_travel;
 8013632:	eef0 7a68 	vmov.f32	s15, s17
 8013636:	aa18      	add	r2, sp, #96	@ 0x60
 8013638:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801363c:	ed42 7a08 	vstr	s15, [r2, #-32]	@ 0xffffffe0
                axislock.mask |= step_pin[idx];
 8013640:	b2e4      	uxtb	r4, r4
 8013642:	aa18      	add	r2, sp, #96	@ 0x60
 8013644:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013648:	f852 2c10 	ldr.w	r2, [r2, #-16]
 801364c:	4314      	orrs	r4, r2
        } while(idx);
 801364e:	b333      	cbz	r3, 801369e <homing_cycle+0x1e2>
            if (bit_istrue(cycle.mask, bit(--idx))) {
 8013650:	3b01      	subs	r3, #1
 8013652:	fa21 f203 	lsr.w	r2, r1, r3
 8013656:	f012 0f01 	tst.w	r2, #1
 801365a:	d0f8      	beq.n	801364e <homing_cycle+0x192>
                n_active_axis++;
 801365c:	3501      	adds	r5, #1
                sys.position[idx] = 0;
 801365e:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8013662:	482d      	ldr	r0, [pc, #180]	@ (8013718 <homing_cycle+0x25c>)
 8013664:	f04f 0c00 	mov.w	ip, #0
 8013668:	f840 c022 	str.w	ip, [r0, r2, lsl #2]
                if (bit_istrue(settings.homing.dir_mask.value, bit(idx)))
 801366c:	4a2b      	ldr	r2, [pc, #172]	@ (801371c <homing_cycle+0x260>)
 801366e:	f892 2110 	ldrb.w	r2, [r2, #272]	@ 0x110
 8013672:	40da      	lsrs	r2, r3
 8013674:	f012 0f01 	tst.w	r2, #1
 8013678:	d004      	beq.n	8013684 <homing_cycle+0x1c8>
                    target.values[idx] = mode == HomingMode_Pulloff ? max_travel : - max_travel;
 801367a:	2e02      	cmp	r6, #2
 801367c:	d0d9      	beq.n	8013632 <homing_cycle+0x176>
 801367e:	eef1 7a68 	vneg.f32	s15, s17
 8013682:	e7d8      	b.n	8013636 <homing_cycle+0x17a>
                    target.values[idx] = mode == HomingMode_Pulloff ? - max_travel : max_travel;
 8013684:	2e02      	cmp	r6, #2
 8013686:	d007      	beq.n	8013698 <homing_cycle+0x1dc>
 8013688:	eef0 7a68 	vmov.f32	s15, s17
 801368c:	aa18      	add	r2, sp, #96	@ 0x60
 801368e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013692:	ed42 7a08 	vstr	s15, [r2, #-32]	@ 0xffffffe0
 8013696:	e7d3      	b.n	8013640 <homing_cycle+0x184>
 8013698:	eef1 7a68 	vneg.f32	s15, s17
 801369c:	e7f6      	b.n	801368c <homing_cycle+0x1d0>
        if(grbl.on_homing_rate_set)
 801369e:	4b24      	ldr	r3, [pc, #144]	@ (8013730 <homing_cycle+0x274>)
 80136a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80136a4:	b12b      	cbz	r3, 80136b2 <homing_cycle+0x1f6>
            grbl.on_homing_rate_set(cycle, homing_rate, mode);
 80136a6:	4631      	mov	r1, r6
 80136a8:	eeb0 0a48 	vmov.f32	s0, s16
 80136ac:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80136b0:	4798      	blx	r3
        homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 80136b2:	ee07 5a90 	vmov	s15, r5
 80136b6:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80136ba:	f014 f899 	bl	80277f0 <sqrtf>
 80136be:	ee28 0a00 	vmul.f32	s0, s16, s0
        plan_data.feed_rate = homing_rate;      // Set current homing rate.
 80136c2:	ed8d 0a06 	vstr	s0, [sp, #24]
        sys.homing_axis_lock.mask = axislock.mask;
 80136c6:	4d14      	ldr	r5, [pc, #80]	@ (8013718 <homing_cycle+0x25c>)
 80136c8:	766c      	strb	r4, [r5, #25]
        plan_buffer_line(target.values, &plan_data);    // Bypass mc_line(). Directly plan homing motion.
 80136ca:	a906      	add	r1, sp, #24
 80136cc:	a810      	add	r0, sp, #64	@ 0x40
 80136ce:	f003 f9cb 	bl	8016a68 <plan_buffer_line>
        sys.step_control.flags = 0;
 80136d2:	2300      	movs	r3, #0
 80136d4:	762b      	strb	r3, [r5, #24]
        sys.step_control.execute_sys_motion = On; // Set to execute homing motion and clear existing flags.
 80136d6:	2304      	movs	r3, #4
 80136d8:	762b      	strb	r3, [r5, #24]
        st_prep_buffer();   // Prep and fill segment buffer from newly planned block.
 80136da:	f00c fc43 	bl	801ff64 <st_prep_buffer>
        st_wake_up();       // Initiate motion
 80136de:	f00c f94f 	bl	801f980 <st_wake_up>
 80136e2:	e045      	b.n	8013770 <homing_cycle+0x2b4>
                        squaring_mode = (signals_state.a.mask & auto_square.mask) ? SquaringMode_A : SquaringMode_B;
 80136e4:	f04f 0802 	mov.w	r8, #2
 80136e8:	e071      	b.n	80137ce <homing_cycle+0x312>
                } while(idx);
 80136ea:	b31b      	cbz	r3, 8013734 <homing_cycle+0x278>
                    idx--;
 80136ec:	3b01      	subs	r3, #1
                    if ((axislock.mask & step_pin[idx]) && (homing_state.mask & bit(idx))) {
 80136ee:	b2e2      	uxtb	r2, r4
 80136f0:	a918      	add	r1, sp, #96	@ 0x60
 80136f2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80136f6:	f851 1c10 	ldr.w	r1, [r1, #-16]
 80136fa:	420a      	tst	r2, r1
 80136fc:	d0f5      	beq.n	80136ea <homing_cycle+0x22e>
 80136fe:	b2e9      	uxtb	r1, r5
 8013700:	40d9      	lsrs	r1, r3
 8013702:	f011 0f01 	tst.w	r1, #1
 8013706:	d0f0      	beq.n	80136ea <homing_cycle+0x22e>
                        axislock.mask &= ~bit(idx);
 8013708:	2401      	movs	r4, #1
 801370a:	409c      	lsls	r4, r3
 801370c:	ea22 0404 	bic.w	r4, r2, r4
                        if(idx == dual_motor_axis)
 8013710:	4599      	cmp	r9, r3
 8013712:	d1ea      	bne.n	80136ea <homing_cycle+0x22e>
                            autosquare_check = false;
 8013714:	2700      	movs	r7, #0
 8013716:	e7e8      	b.n	80136ea <homing_cycle+0x22e>
 8013718:	20001d70 	.word	0x20001d70
 801371c:	200024a8 	.word	0x200024a8
 8013720:	200017c8 	.word	0x200017c8
 8013724:	00000000 	.word	0x00000000
 8013728:	20001a90 	.word	0x20001a90
 801372c:	42c80000 	.word	0x42c80000
 8013730:	20001c78 	.word	0x20001c78
                sys.homing_axis_lock.mask = axislock.mask;
 8013734:	4b99      	ldr	r3, [pc, #612]	@ (801399c <homing_cycle+0x4e0>)
 8013736:	765c      	strb	r4, [r3, #25]
                if (autosquare_check && abs(initial_trigger_position - sys.position[dual_motor_axis]) > autosquare_fail_distance) {
 8013738:	b167      	cbz	r7, 8013754 <homing_cycle+0x298>
 801373a:	f109 0322 	add.w	r3, r9, #34	@ 0x22
 801373e:	4a97      	ldr	r2, [pc, #604]	@ (801399c <homing_cycle+0x4e0>)
 8013740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013744:	9a00      	ldr	r2, [sp, #0]
 8013746:	1ad3      	subs	r3, r2, r3
 8013748:	2b00      	cmp	r3, #0
 801374a:	bfb8      	it	lt
 801374c:	425b      	neglt	r3, r3
 801374e:	9a01      	ldr	r2, [sp, #4]
 8013750:	4293      	cmp	r3, r2
 8013752:	dc44      	bgt.n	80137de <homing_cycle+0x322>
            st_prep_buffer(); // Check and prep segment buffer.
 8013754:	f00c fc06 	bl	801ff64 <st_prep_buffer>
            if (sys.rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_COMPLETE)) {
 8013758:	4b90      	ldr	r3, [pc, #576]	@ (801399c <homing_cycle+0x4e0>)
 801375a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801375c:	f013 0f64 	tst.w	r3, #100	@ 0x64
 8013760:	d148      	bne.n	80137f4 <homing_cycle+0x338>
            grbl.on_execute_realtime(STATE_HOMING);
 8013762:	4b8f      	ldr	r3, [pc, #572]	@ (80139a0 <homing_cycle+0x4e4>)
 8013764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013766:	2004      	movs	r0, #4
 8013768:	4798      	blx	r3
        } while (axislock.mask & AXES_BITMASK);
 801376a:	f014 0f07 	tst.w	r4, #7
 801376e:	d066      	beq.n	801383e <homing_cycle+0x382>
            if (mode != HomingMode_Pulloff) {
 8013770:	2e02      	cmp	r6, #2
 8013772:	d0ef      	beq.n	8013754 <homing_cycle+0x298>
                homing_state = homing_signals_select(signals_state = hal.homing.get_state(), auto_square, squaring_mode);
 8013774:	4b8b      	ldr	r3, [pc, #556]	@ (80139a4 <homing_cycle+0x4e8>)
 8013776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013778:	4798      	blx	r3
 801377a:	f8ad 004c 	strh.w	r0, [sp, #76]	@ 0x4c
 801377e:	4642      	mov	r2, r8
 8013780:	4651      	mov	r1, sl
 8013782:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8013784:	f7ff f914 	bl	80129b0 <homing_signals_select>
 8013788:	4605      	mov	r5, r0
                if((homing_state.mask & auto_square.mask) && squaring_mode == SquaringMode_Both) {
 801378a:	b2c2      	uxtb	r2, r0
 801378c:	ea1b 0f05 	tst.w	fp, r5
 8013790:	d023      	beq.n	80137da <homing_cycle+0x31e>
 8013792:	f1b8 0f00 	cmp.w	r8, #0
 8013796:	d120      	bne.n	80137da <homing_cycle+0x31e>
                    if((autosquare_check = (signals_state.a.mask & auto_square.mask) != (signals_state.b.mask & auto_square.mask))) {
 8013798:	f89d 104c 	ldrb.w	r1, [sp, #76]	@ 0x4c
 801379c:	f89d 304d 	ldrb.w	r3, [sp, #77]	@ 0x4d
 80137a0:	404b      	eors	r3, r1
 80137a2:	ea0b 0303 	and.w	r3, fp, r3
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	bf14      	ite	ne
 80137aa:	2701      	movne	r7, #1
 80137ac:	2700      	moveq	r7, #0
 80137ae:	d014      	beq.n	80137da <homing_cycle+0x31e>
                        initial_trigger_position = sys.position[dual_motor_axis];
 80137b0:	f109 0322 	add.w	r3, r9, #34	@ 0x22
 80137b4:	4879      	ldr	r0, [pc, #484]	@ (801399c <homing_cycle+0x4e0>)
 80137b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80137ba:	9300      	str	r3, [sp, #0]
                        homing_state.mask &= ~auto_square.mask;
 80137bc:	ea6f 050b 	mvn.w	r5, fp
 80137c0:	b26d      	sxtb	r5, r5
 80137c2:	4015      	ands	r5, r2
                        squaring_mode = (signals_state.a.mask & auto_square.mask) ? SquaringMode_A : SquaringMode_B;
 80137c4:	ea1b 0f01 	tst.w	fp, r1
 80137c8:	d08c      	beq.n	80136e4 <homing_cycle+0x228>
 80137ca:	f04f 0801 	mov.w	r8, #1
                        hal.stepper.disable_motors(auto_square, squaring_mode);
 80137ce:	4b75      	ldr	r3, [pc, #468]	@ (80139a4 <homing_cycle+0x4e8>)
 80137d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80137d4:	4641      	mov	r1, r8
 80137d6:	4650      	mov	r0, sl
 80137d8:	4798      	blx	r3
                idx = N_AXIS;
 80137da:	2303      	movs	r3, #3
 80137dc:	e786      	b.n	80136ec <homing_cycle+0x230>
                    system_set_exec_alarm(Alarm_HomingFailAutoSquaringApproach);
 80137de:	4b71      	ldr	r3, [pc, #452]	@ (80139a4 <homing_cycle+0x4e8>)
 80137e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80137e2:	210f      	movs	r1, #15
 80137e4:	4870      	ldr	r0, [pc, #448]	@ (80139a8 <homing_cycle+0x4ec>)
 80137e6:	4798      	blx	r3
                    mc_reset();
 80137e8:	f001 fa7a 	bl	8014ce0 <mc_reset>
                    protocol_execute_realtime();
 80137ec:	f004 f844 	bl	8017878 <protocol_execute_realtime>
                    return false;
 80137f0:	2000      	movs	r0, #0
 80137f2:	e670      	b.n	80134d6 <homing_cycle+0x1a>
                uint_fast16_t rt_exec = sys.rt_exec_state;
 80137f4:	4b69      	ldr	r3, [pc, #420]	@ (801399c <homing_cycle+0x4e0>)
 80137f6:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                if (rt_exec & EXEC_RESET)
 80137f8:	f014 0f20 	tst.w	r4, #32
 80137fc:	d004      	beq.n	8013808 <homing_cycle+0x34c>
                    system_set_exec_alarm(Alarm_HomingFailReset);
 80137fe:	4b69      	ldr	r3, [pc, #420]	@ (80139a4 <homing_cycle+0x4e8>)
 8013800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013802:	2106      	movs	r1, #6
 8013804:	4868      	ldr	r0, [pc, #416]	@ (80139a8 <homing_cycle+0x4ec>)
 8013806:	4798      	blx	r3
                if (rt_exec & EXEC_SAFETY_DOOR)
 8013808:	f014 0f40 	tst.w	r4, #64	@ 0x40
 801380c:	d004      	beq.n	8013818 <homing_cycle+0x35c>
                    system_set_exec_alarm(Alarm_HomingFailDoor);
 801380e:	4b65      	ldr	r3, [pc, #404]	@ (80139a4 <homing_cycle+0x4e8>)
 8013810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013812:	2107      	movs	r1, #7
 8013814:	4864      	ldr	r0, [pc, #400]	@ (80139a8 <homing_cycle+0x4ec>)
 8013816:	4798      	blx	r3
                hal.delay_ms(2, NULL);
 8013818:	4b62      	ldr	r3, [pc, #392]	@ (80139a4 <homing_cycle+0x4e8>)
 801381a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801381c:	2100      	movs	r1, #0
 801381e:	2002      	movs	r0, #2
 8013820:	4798      	blx	r3
                if (mode == HomingMode_Pulloff && (homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask & cycle.mask))
 8013822:	2e02      	cmp	r6, #2
 8013824:	d047      	beq.n	80138b6 <homing_cycle+0x3fa>
                if (mode != HomingMode_Pulloff && (rt_exec & EXEC_CYCLE_COMPLETE))
 8013826:	f014 0f04 	tst.w	r4, #4
 801382a:	d158      	bne.n	80138de <homing_cycle+0x422>
                if (sys.rt_exec_alarm) {
 801382c:	4b5b      	ldr	r3, [pc, #364]	@ (801399c <homing_cycle+0x4e0>)
 801382e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013830:	2b00      	cmp	r3, #0
 8013832:	d15a      	bne.n	80138ea <homing_cycle+0x42e>
                    system_clear_exec_state_flag(EXEC_CYCLE_COMPLETE);
 8013834:	4b5b      	ldr	r3, [pc, #364]	@ (80139a4 <homing_cycle+0x4e8>)
 8013836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013838:	2104      	movs	r1, #4
 801383a:	485c      	ldr	r0, [pc, #368]	@ (80139ac <homing_cycle+0x4f0>)
 801383c:	4798      	blx	r3
        st_reset(); // Immediately force kill steppers and reset step segment buffer.
 801383e:	f00c fa67 	bl	801fd10 <st_reset>
        hal.delay_ms(settings.homing.debounce_delay, NULL); // Delay to allow transient dynamics to dissipate.
 8013842:	4b58      	ldr	r3, [pc, #352]	@ (80139a4 <homing_cycle+0x4e8>)
 8013844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013846:	2100      	movs	r1, #0
 8013848:	4a59      	ldr	r2, [pc, #356]	@ (80139b0 <homing_cycle+0x4f4>)
 801384a:	f8b2 0112 	ldrh.w	r0, [r2, #274]	@ 0x112
 801384e:	4798      	blx	r3
        mode = mode == HomingMode_Pulloff ? HomingMode_Locate : HomingMode_Pulloff;
 8013850:	2e02      	cmp	r6, #2
 8013852:	d050      	beq.n	80138f6 <homing_cycle+0x43a>
 8013854:	2602      	movs	r6, #2
        homing_rate = hal.homing.get_feedrate(cycle, mode);
 8013856:	4b53      	ldr	r3, [pc, #332]	@ (80139a4 <homing_cycle+0x4e8>)
 8013858:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801385a:	4631      	mov	r1, r6
 801385c:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8013860:	4798      	blx	r3
 8013862:	eeb0 8a40 	vmov.f32	s16, s0
        if (mode == HomingMode_Locate) {
 8013866:	2e01      	cmp	r6, #1
 8013868:	d047      	beq.n	80138fa <homing_cycle+0x43e>
            max_travel = settings.homing.pulloff;
 801386a:	4b51      	ldr	r3, [pc, #324]	@ (80139b0 <homing_cycle+0x4f4>)
 801386c:	edd3 8a43 	vldr	s17, [r3, #268]	@ 0x10c
        if(auto_square.mask) {
 8013870:	f1bb 0f00 	cmp.w	fp, #0
 8013874:	d007      	beq.n	8013886 <homing_cycle+0x3ca>
            hal.stepper.disable_motors((axes_signals_t){0}, SquaringMode_Both);
 8013876:	4b4b      	ldr	r3, [pc, #300]	@ (80139a4 <homing_cycle+0x4e8>)
 8013878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801387c:	2700      	movs	r7, #0
 801387e:	4639      	mov	r1, r7
 8013880:	4638      	mov	r0, r7
 8013882:	4798      	blx	r3
            squaring_mode = SquaringMode_Both;
 8013884:	46b8      	mov	r8, r7
    } while (homing_rate > 0.0f && cycle.mask && n_cycle-- > 0);
 8013886:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801388a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801388e:	dd3c      	ble.n	801390a <homing_cycle+0x44e>
 8013890:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d038      	beq.n	801390a <homing_cycle+0x44e>
 8013898:	9a02      	ldr	r2, [sp, #8]
 801389a:	1e53      	subs	r3, r2, #1
 801389c:	2a00      	cmp	r2, #0
 801389e:	d034      	beq.n	801390a <homing_cycle+0x44e>
 80138a0:	9302      	str	r3, [sp, #8]
        system_convert_array_steps_to_mpos(target.values, sys.position);
 80138a2:	4944      	ldr	r1, [pc, #272]	@ (80139b4 <homing_cycle+0x4f8>)
 80138a4:	a810      	add	r0, sp, #64	@ 0x40
 80138a6:	f00e fa69 	bl	8021d7c <system_convert_array_steps_to_mpos>
        axislock = (axes_signals_t){0};
 80138aa:	f04f 0400 	mov.w	r4, #0
        n_active_axis = 0;
 80138ae:	9d05      	ldr	r5, [sp, #20]
        idx = N_AXIS;
 80138b0:	2303      	movs	r3, #3
 80138b2:	9904      	ldr	r1, [sp, #16]
 80138b4:	e6cc      	b.n	8013650 <homing_cycle+0x194>
                if (mode == HomingMode_Pulloff && (homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask & cycle.mask))
 80138b6:	4b3b      	ldr	r3, [pc, #236]	@ (80139a4 <homing_cycle+0x4e8>)
 80138b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80138ba:	4798      	blx	r3
 80138bc:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 80138c0:	2200      	movs	r2, #0
 80138c2:	4611      	mov	r1, r2
 80138c4:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80138c6:	f7ff f873 	bl	80129b0 <homing_signals_select>
 80138ca:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80138ce:	4203      	tst	r3, r0
 80138d0:	d0ac      	beq.n	801382c <homing_cycle+0x370>
                    system_set_exec_alarm(Alarm_FailPulloff);
 80138d2:	4b34      	ldr	r3, [pc, #208]	@ (80139a4 <homing_cycle+0x4e8>)
 80138d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80138d6:	2108      	movs	r1, #8
 80138d8:	4833      	ldr	r0, [pc, #204]	@ (80139a8 <homing_cycle+0x4ec>)
 80138da:	4798      	blx	r3
                if (mode != HomingMode_Pulloff && (rt_exec & EXEC_CYCLE_COMPLETE))
 80138dc:	e7a6      	b.n	801382c <homing_cycle+0x370>
                    system_set_exec_alarm(Alarm_HomingFailApproach);
 80138de:	4b31      	ldr	r3, [pc, #196]	@ (80139a4 <homing_cycle+0x4e8>)
 80138e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80138e2:	2109      	movs	r1, #9
 80138e4:	4830      	ldr	r0, [pc, #192]	@ (80139a8 <homing_cycle+0x4ec>)
 80138e6:	4798      	blx	r3
 80138e8:	e7a0      	b.n	801382c <homing_cycle+0x370>
                    mc_reset(); // Stop motors, if they are running.
 80138ea:	f001 f9f9 	bl	8014ce0 <mc_reset>
                    protocol_execute_realtime();
 80138ee:	f003 ffc3 	bl	8017878 <protocol_execute_realtime>
                    return false;
 80138f2:	2000      	movs	r0, #0
 80138f4:	e5ef      	b.n	80134d6 <homing_cycle+0x1a>
        mode = mode == HomingMode_Pulloff ? HomingMode_Locate : HomingMode_Pulloff;
 80138f6:	2601      	movs	r6, #1
 80138f8:	e7ad      	b.n	8013856 <homing_cycle+0x39a>
            max_travel = settings.homing.pulloff * HOMING_AXIS_LOCATE_SCALAR;
 80138fa:	4b2d      	ldr	r3, [pc, #180]	@ (80139b0 <homing_cycle+0x4f4>)
 80138fc:	edd3 8a43 	vldr	s17, [r3, #268]	@ 0x10c
 8013900:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8013904:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013908:	e7b2      	b.n	8013870 <homing_cycle+0x3b4>
    if(auto_square.mask && settings.axis[dual_motor_axis].dual_axis_offset != 0.0f) {
 801390a:	f1bb 0f00 	cmp.w	fp, #0
 801390e:	d02d      	beq.n	801396c <homing_cycle+0x4b0>
 8013910:	eb09 0289 	add.w	r2, r9, r9, lsl #2
 8013914:	4b26      	ldr	r3, [pc, #152]	@ (80139b0 <homing_cycle+0x4f4>)
 8013916:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801391a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 801391e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013926:	d021      	beq.n	801396c <homing_cycle+0x4b0>
        hal.stepper.disable_motors(auto_square, settings.axis[dual_motor_axis].dual_axis_offset < 0.0f ? SquaringMode_B : SquaringMode_A);
 8013928:	4b1e      	ldr	r3, [pc, #120]	@ (80139a4 <homing_cycle+0x4e8>)
 801392a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801392e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013936:	d42a      	bmi.n	801398e <homing_cycle+0x4d2>
 8013938:	2101      	movs	r1, #1
 801393a:	f89d 400f 	ldrb.w	r4, [sp, #15]
 801393e:	4620      	mov	r0, r4
 8013940:	4798      	blx	r3
        if(!limits_pull_off(auto_square, fabs(settings.axis[dual_motor_axis].dual_axis_offset)))
 8013942:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8013946:	4b1a      	ldr	r3, [pc, #104]	@ (80139b0 <homing_cycle+0x4f4>)
 8013948:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801394c:	ed93 0a10 	vldr	s0, [r3, #64]	@ 0x40
 8013950:	eeb0 0ac0 	vabs.f32	s0, s0
 8013954:	4620      	mov	r0, r4
 8013956:	f7ff fa07 	bl	8012d68 <limits_pull_off>
 801395a:	2800      	cmp	r0, #0
 801395c:	f43f adbb 	beq.w	80134d6 <homing_cycle+0x1a>
        hal.stepper.disable_motors((axes_signals_t){0}, SquaringMode_Both);
 8013960:	4b10      	ldr	r3, [pc, #64]	@ (80139a4 <homing_cycle+0x4e8>)
 8013962:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013966:	2100      	movs	r1, #0
 8013968:	4608      	mov	r0, r1
 801396a:	4798      	blx	r3
    limits_set_machine_positions(cycle, true);
 801396c:	2101      	movs	r1, #1
 801396e:	f89d 400e 	ldrb.w	r4, [sp, #14]
 8013972:	4620      	mov	r0, r4
 8013974:	f7ff fd40 	bl	80133f8 <limits_set_machine_positions>
    sys.step_control.flags = 0; // Return step control to normal operation.
 8013978:	4a08      	ldr	r2, [pc, #32]	@ (801399c <homing_cycle+0x4e0>)
 801397a:	2300      	movs	r3, #0
 801397c:	7613      	strb	r3, [r2, #24]
    sys.homed.mask |= cycle.mask;
 801397e:	f892 1054 	ldrb.w	r1, [r2, #84]	@ 0x54
 8013982:	b2e3      	uxtb	r3, r4
 8013984:	430b      	orrs	r3, r1
 8013986:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
    return true;
 801398a:	2001      	movs	r0, #1
 801398c:	e5a3      	b.n	80134d6 <homing_cycle+0x1a>
        hal.stepper.disable_motors(auto_square, settings.axis[dual_motor_axis].dual_axis_offset < 0.0f ? SquaringMode_B : SquaringMode_A);
 801398e:	2102      	movs	r1, #2
 8013990:	e7d3      	b.n	801393a <homing_cycle+0x47e>
        return true;
 8013992:	2001      	movs	r0, #1
 8013994:	e59f      	b.n	80134d6 <homing_cycle+0x1a>
        return false;
 8013996:	2000      	movs	r0, #0
 8013998:	e59d      	b.n	80134d6 <homing_cycle+0x1a>
 801399a:	bf00      	nop
 801399c:	20001d70 	.word	0x20001d70
 80139a0:	20001c78 	.word	0x20001c78
 80139a4:	20001a90 	.word	0x20001a90
 80139a8:	20001dbc 	.word	0x20001dbc
 80139ac:	20001db8 	.word	0x20001db8
 80139b0:	200024a8 	.word	0x200024a8
 80139b4:	20001df8 	.word	0x20001df8

080139b8 <limits_go_home>:
{
 80139b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139ba:	b083      	sub	sp, #12
 80139bc:	4607      	mov	r7, r0
    axes_signals_t auto_square = {0}, auto_squared = {0};
 80139be:	2600      	movs	r6, #0
 80139c0:	4634      	mov	r4, r6
    hal.limits.enable(settings.limits.flags.hard_enabled, cycle); // Disable hard limits pin change register for cycle duration
 80139c2:	4d24      	ldr	r5, [pc, #144]	@ (8013a54 <limits_go_home+0x9c>)
 80139c4:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80139c6:	4a24      	ldr	r2, [pc, #144]	@ (8013a58 <limits_go_home+0xa0>)
 80139c8:	f892 0124 	ldrb.w	r0, [r2, #292]	@ 0x124
 80139cc:	4639      	mov	r1, r7
 80139ce:	f000 0001 	and.w	r0, r0, #1
 80139d2:	4798      	blx	r3
    if(hal.stepper.get_ganged)
 80139d4:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80139d8:	b113      	cbz	r3, 80139e0 <limits_go_home+0x28>
        auto_squared = hal.stepper.get_ganged(true);
 80139da:	2001      	movs	r0, #1
 80139dc:	4798      	blx	r3
 80139de:	4606      	mov	r6, r0
    auto_squared.mask &= cycle.mask;
 80139e0:	b2fd      	uxtb	r5, r7
    if(auto_squared.mask) {
 80139e2:	4035      	ands	r5, r6
 80139e4:	d018      	beq.n	8013a18 <limits_go_home+0x60>
        if(!hal.stepper.disable_motors)
 80139e6:	4b1b      	ldr	r3, [pc, #108]	@ (8013a54 <limits_go_home+0x9c>)
 80139e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80139ec:	b363      	cbz	r3, 8013a48 <limits_go_home+0x90>
        auto_square.x = On;
 80139ee:	f04f 0401 	mov.w	r4, #1
        while(!(auto_squared.mask & auto_square.mask))
 80139f2:	e000      	b.n	80139f6 <limits_go_home+0x3e>
            auto_square.mask <<= 1;
 80139f4:	005c      	lsls	r4, r3, #1
        while(!(auto_squared.mask & auto_square.mask))
 80139f6:	b2e3      	uxtb	r3, r4
 80139f8:	4225      	tst	r5, r4
 80139fa:	d0fb      	beq.n	80139f4 <limits_go_home+0x3c>
        if(auto_squared.mask != auto_square.mask)
 80139fc:	429d      	cmp	r5, r3
 80139fe:	d125      	bne.n	8013a4c <limits_go_home+0x94>
        if((auto_squared.mask & homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask) && !limits_pull_off(auto_square, settings.homing.pulloff * HOMING_AXIS_LOCATE_SCALAR))
 8013a00:	4b14      	ldr	r3, [pc, #80]	@ (8013a54 <limits_go_home+0x9c>)
 8013a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013a04:	4798      	blx	r3
 8013a06:	f8ad 0004 	strh.w	r0, [sp, #4]
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	4611      	mov	r1, r2
 8013a0e:	9801      	ldr	r0, [sp, #4]
 8013a10:	f7fe ffce 	bl	80129b0 <homing_signals_select>
 8013a14:	4205      	tst	r5, r0
 8013a16:	d109      	bne.n	8013a2c <limits_go_home+0x74>
    return grbl.home_machine(cycle, auto_square) ? Status_OK : Status_Unhandled;
 8013a18:	4b10      	ldr	r3, [pc, #64]	@ (8013a5c <limits_go_home+0xa4>)
 8013a1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013a1e:	4621      	mov	r1, r4
 8013a20:	4638      	mov	r0, r7
 8013a22:	4798      	blx	r3
 8013a24:	b1a0      	cbz	r0, 8013a50 <limits_go_home+0x98>
 8013a26:	2000      	movs	r0, #0
}
 8013a28:	b003      	add	sp, #12
 8013a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((auto_squared.mask & homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask) && !limits_pull_off(auto_square, settings.homing.pulloff * HOMING_AXIS_LOCATE_SCALAR))
 8013a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8013a58 <limits_go_home+0xa0>)
 8013a2e:	ed93 0a43 	vldr	s0, [r3, #268]	@ 0x10c
 8013a32:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8013a36:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013a3a:	4620      	mov	r0, r4
 8013a3c:	f7ff f994 	bl	8012d68 <limits_pull_off>
 8013a40:	2800      	cmp	r0, #0
 8013a42:	d1e9      	bne.n	8013a18 <limits_go_home+0x60>
            return Status_LimitsEngaged; // Auto squaring with limit switch asserted is not allowed.
 8013a44:	202d      	movs	r0, #45	@ 0x2d
 8013a46:	e7ef      	b.n	8013a28 <limits_go_home+0x70>
            return Status_IllegalHomingConfiguration; // Bad driver! - should not happen.
 8013a48:	2037      	movs	r0, #55	@ 0x37
 8013a4a:	e7ed      	b.n	8013a28 <limits_go_home+0x70>
            return Status_IllegalHomingConfiguration; // Attempt at squaring more than one auto squared axis at the same time.
 8013a4c:	2037      	movs	r0, #55	@ 0x37
 8013a4e:	e7eb      	b.n	8013a28 <limits_go_home+0x70>
    return grbl.home_machine(cycle, auto_square) ? Status_OK : Status_Unhandled;
 8013a50:	2054      	movs	r0, #84	@ 0x54
 8013a52:	e7e9      	b.n	8013a28 <limits_go_home+0x70>
 8013a54:	20001a90 	.word	0x20001a90
 8013a58:	200024a8 	.word	0x200024a8
 8013a5c:	20001c78 	.word	0x20001c78

08013a60 <limits_soft_check>:
{
 8013a60:	b508      	push	{r3, lr}
    if(condition.target_validated ? !condition.target_valid : !grbl.check_travel_limits(target, sys.soft_limits, true)) {
 8013a62:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8013a66:	f411 6f80 	tst.w	r1, #1024	@ 0x400
 8013a6a:	d006      	beq.n	8013a7a <limits_soft_check+0x1a>
 8013a6c:	0858      	lsrs	r0, r3, #1
 8013a6e:	f080 0001 	eor.w	r0, r0, #1
 8013a72:	f000 0001 	and.w	r0, r0, #1
 8013a76:	b960      	cbnz	r0, 8013a92 <limits_soft_check+0x32>
}
 8013a78:	bd08      	pop	{r3, pc}
    if(condition.target_validated ? !condition.target_valid : !grbl.check_travel_limits(target, sys.soft_limits, true)) {
 8013a7a:	4b16      	ldr	r3, [pc, #88]	@ (8013ad4 <limits_soft_check+0x74>)
 8013a7c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8013a80:	2201      	movs	r2, #1
 8013a82:	4915      	ldr	r1, [pc, #84]	@ (8013ad8 <limits_soft_check+0x78>)
 8013a84:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 8013a88:	4798      	blx	r3
 8013a8a:	f080 0001 	eor.w	r0, r0, #1
 8013a8e:	b2c0      	uxtb	r0, r0
 8013a90:	e7f1      	b.n	8013a76 <limits_soft_check+0x16>
        sys.flags.soft_limit = On;
 8013a92:	4a11      	ldr	r2, [pc, #68]	@ (8013ad8 <limits_soft_check+0x78>)
 8013a94:	7d93      	ldrb	r3, [r2, #22]
 8013a96:	f043 0304 	orr.w	r3, r3, #4
 8013a9a:	7593      	strb	r3, [r2, #22]
        if(state_get() == STATE_CYCLE) {
 8013a9c:	f00b fa54 	bl	801ef48 <state_get>
 8013aa0:	2808      	cmp	r0, #8
 8013aa2:	d10c      	bne.n	8013abe <limits_soft_check+0x5e>
            system_set_exec_state_flag(EXEC_FEED_HOLD);
 8013aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8013adc <limits_soft_check+0x7c>)
 8013aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013aa8:	2108      	movs	r1, #8
 8013aaa:	480d      	ldr	r0, [pc, #52]	@ (8013ae0 <limits_soft_check+0x80>)
 8013aac:	4798      	blx	r3
                if(!protocol_execute_realtime())
 8013aae:	f003 fee3 	bl	8017878 <protocol_execute_realtime>
 8013ab2:	2800      	cmp	r0, #0
 8013ab4:	d0e0      	beq.n	8013a78 <limits_soft_check+0x18>
            } while(state_get() != STATE_IDLE);
 8013ab6:	f00b fa47 	bl	801ef48 <state_get>
 8013aba:	2800      	cmp	r0, #0
 8013abc:	d1f7      	bne.n	8013aae <limits_soft_check+0x4e>
        mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 8013abe:	f001 f90f 	bl	8014ce0 <mc_reset>
        system_set_exec_alarm(Alarm_SoftLimit); // Indicate soft limit critical event
 8013ac2:	4b06      	ldr	r3, [pc, #24]	@ (8013adc <limits_soft_check+0x7c>)
 8013ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013ac6:	2102      	movs	r1, #2
 8013ac8:	4806      	ldr	r0, [pc, #24]	@ (8013ae4 <limits_soft_check+0x84>)
 8013aca:	4798      	blx	r3
        protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 8013acc:	f003 fed4 	bl	8017878 <protocol_execute_realtime>
 8013ad0:	e7d2      	b.n	8013a78 <limits_soft_check+0x18>
 8013ad2:	bf00      	nop
 8013ad4:	20001c78 	.word	0x20001c78
 8013ad8:	20001d70 	.word	0x20001d70
 8013adc:	20001a90 	.word	0x20001a90
 8013ae0:	20001db8 	.word	0x20001db8
 8013ae4:	20001dbc 	.word	0x20001dbc

08013ae8 <limits_set_homing_axes>:
    sys.homing.mask = 0;
 8013ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8013b14 <limits_set_homing_axes+0x2c>)
 8013aea:	2200      	movs	r2, #0
 8013aec:	769a      	strb	r2, [r3, #26]
    uint_fast8_t idx = N_AXIS;
 8013aee:	2203      	movs	r2, #3
        sys.homing.mask |= settings.homing.cycle[--idx].mask;
 8013af0:	3a01      	subs	r2, #1
 8013af2:	4b09      	ldr	r3, [pc, #36]	@ (8013b18 <limits_set_homing_axes+0x30>)
 8013af4:	4413      	add	r3, r2
 8013af6:	f893 0115 	ldrb.w	r0, [r3, #277]	@ 0x115
 8013afa:	4906      	ldr	r1, [pc, #24]	@ (8013b14 <limits_set_homing_axes+0x2c>)
 8013afc:	7e8b      	ldrb	r3, [r1, #26]
 8013afe:	4303      	orrs	r3, r0
 8013b00:	768b      	strb	r3, [r1, #26]
    } while(idx);
 8013b02:	2a00      	cmp	r2, #0
 8013b04:	d1f4      	bne.n	8013af0 <limits_set_homing_axes+0x8>
    sys.homed.mask &= sys.homing.mask;
 8013b06:	460a      	mov	r2, r1
 8013b08:	f891 1054 	ldrb.w	r1, [r1, #84]	@ 0x54
 8013b0c:	400b      	ands	r3, r1
 8013b0e:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
}
 8013b12:	4770      	bx	lr
 8013b14:	20001d70 	.word	0x20001d70
 8013b18:	200024a8 	.word	0x200024a8

08013b1c <limits_homing_required>:
    return settings.homing.flags.enabled && settings.homing.flags.init_lock &&
 8013b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8013b5c <limits_homing_required+0x40>)
 8013b1e:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8013b22:	f003 0205 	and.w	r2, r3, #5
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 8013b26:	2a05      	cmp	r2, #5
 8013b28:	d001      	beq.n	8013b2e <limits_homing_required+0x12>
 8013b2a:	2000      	movs	r0, #0
 8013b2c:	4770      	bx	lr
            (sys.cold_start || !settings.homing.flags.override_locks) &&
 8013b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8013b60 <limits_homing_required+0x44>)
 8013b30:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
    return settings.homing.flags.enabled && settings.homing.flags.init_lock &&
 8013b34:	b912      	cbnz	r2, 8013b3c <limits_homing_required+0x20>
            (sys.cold_start || !settings.homing.flags.override_locks) &&
 8013b36:	f013 0f20 	tst.w	r3, #32
 8013b3a:	d10b      	bne.n	8013b54 <limits_homing_required+0x38>
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 8013b3c:	4b08      	ldr	r3, [pc, #32]	@ (8013b60 <limits_homing_required+0x44>)
 8013b3e:	7e9b      	ldrb	r3, [r3, #26]
            (sys.cold_start || !settings.homing.flags.override_locks) &&
 8013b40:	b153      	cbz	r3, 8013b58 <limits_homing_required+0x3c>
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 8013b42:	4a07      	ldr	r2, [pc, #28]	@ (8013b60 <limits_homing_required+0x44>)
 8013b44:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8013b48:	4393      	bics	r3, r2
 8013b4a:	d001      	beq.n	8013b50 <limits_homing_required+0x34>
 8013b4c:	2001      	movs	r0, #1
}
 8013b4e:	4770      	bx	lr
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 8013b50:	2000      	movs	r0, #0
 8013b52:	4770      	bx	lr
 8013b54:	2000      	movs	r0, #0
 8013b56:	4770      	bx	lr
 8013b58:	2000      	movs	r0, #0
 8013b5a:	4770      	bx	lr
 8013b5c:	200024a8 	.word	0x200024a8
 8013b60:	20001d70 	.word	0x20001d70

08013b64 <limits_init>:

void limits_init (void)
{
    hal.homing.get_feedrate = get_homing_rate;
 8013b64:	4b08      	ldr	r3, [pc, #32]	@ (8013b88 <limits_init+0x24>)
 8013b66:	4a09      	ldr	r2, [pc, #36]	@ (8013b8c <limits_init+0x28>)
 8013b68:	665a      	str	r2, [r3, #100]	@ 0x64
    grbl.check_travel_limits = check_travel_limits;
 8013b6a:	4b09      	ldr	r3, [pc, #36]	@ (8013b90 <limits_init+0x2c>)
 8013b6c:	4a09      	ldr	r2, [pc, #36]	@ (8013b94 <limits_init+0x30>)
 8013b6e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    grbl.check_arc_travel_limits = check_arc_travel_limits;
 8013b72:	4a09      	ldr	r2, [pc, #36]	@ (8013b98 <limits_init+0x34>)
 8013b74:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    grbl.apply_jog_limits = apply_jog_limits;
 8013b78:	4a08      	ldr	r2, [pc, #32]	@ (8013b9c <limits_init+0x38>)
 8013b7a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    grbl.home_machine = homing_cycle;
 8013b7e:	4a08      	ldr	r2, [pc, #32]	@ (8013ba0 <limits_init+0x3c>)
 8013b80:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
}
 8013b84:	4770      	bx	lr
 8013b86:	bf00      	nop
 8013b88:	20001a90 	.word	0x20001a90
 8013b8c:	080129ed 	.word	0x080129ed
 8013b90:	20001c78 	.word	0x20001c78
 8013b94:	08012a05 	.word	0x08012a05
 8013b98:	08012ee9 	.word	0x08012ee9
 8013b9c:	08012c81 	.word	0x08012c81
 8013ba0:	080134bd 	.word	0x080134bd

08013ba4 <message_get>:
    { .id = Message_Stop, .text = "Stop"}
};

const message_t *message_get (message_code_t id)
{
    uint_fast16_t idx = 0;
 8013ba4:	2300      	movs	r3, #0
    const message_t *msg = NULL;

    do {
        if(messages[idx].id == id)
 8013ba6:	4a07      	ldr	r2, [pc, #28]	@ (8013bc4 <message_get+0x20>)
 8013ba8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8013bac:	4282      	cmp	r2, r0
 8013bae:	d004      	beq.n	8013bba <message_get+0x16>
            msg = &messages[idx];
    } while(msg == NULL && ++idx < Message_NextMessage);
 8013bb0:	3301      	adds	r3, #1
 8013bb2:	2b16      	cmp	r3, #22
 8013bb4:	d9f7      	bls.n	8013ba6 <message_get+0x2>
 8013bb6:	2000      	movs	r0, #0

    return msg;
}
 8013bb8:	4770      	bx	lr
            msg = &messages[idx];
 8013bba:	4802      	ldr	r0, [pc, #8]	@ (8013bc4 <message_get+0x20>)
 8013bbc:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    } while(msg == NULL && ++idx < Message_NextMessage);
 8013bc0:	4770      	bx	lr
 8013bc2:	bf00      	nop
 8013bc4:	0802b874 	.word	0x0802b874

08013bc8 <eval_bezier>:
// By Giovanni Mascellani - https://github.com/giomasce/Marlin

// Compute the linear interpolation between two real numbers.
static inline float interp (const float a, const float b, const float t)
{
    return (1.0f - t) * a + t * b;
 8013bc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013bcc:	ee37 7a42 	vsub.f32	s14, s14, s4
 8013bd0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013bd4:	ee60 7a82 	vmul.f32	s15, s1, s4
 8013bd8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013bdc:	ee60 0a87 	vmul.f32	s1, s1, s14
 8013be0:	ee62 7a01 	vmul.f32	s15, s4, s2
 8013be4:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8013be8:	ee21 1a07 	vmul.f32	s2, s2, s14
 8013bec:	ee62 1a21 	vmul.f32	s3, s4, s3
 8013bf0:	ee31 1a21 	vadd.f32	s2, s2, s3
 8013bf4:	ee67 7a00 	vmul.f32	s15, s14, s0
 8013bf8:	ee62 6a20 	vmul.f32	s13, s4, s1
 8013bfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c00:	ee60 0a87 	vmul.f32	s1, s1, s14
 8013c04:	ee22 1a01 	vmul.f32	s2, s4, s2
 8013c08:	ee70 0a81 	vadd.f32	s1, s1, s2
 8013c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c10:	ee22 2a20 	vmul.f32	s4, s4, s1
                icd = interp(c, d, t),
                iabc = interp(iab, ibc, t),
                ibcd = interp(ibc, icd, t);

    return interp(iabc, ibcd, t);
}
 8013c14:	ee32 0a27 	vadd.f32	s0, s4, s15
 8013c18:	4770      	bx	lr
	...

08013c1c <mc_line>:
{
 8013c1c:	b538      	push	{r3, r4, r5, lr}
 8013c1e:	4605      	mov	r5, r0
 8013c20:	460c      	mov	r4, r1
    if(!(pl_data->condition.target_validated && pl_data->condition.target_valid))
 8013c22:	7d4b      	ldrb	r3, [r1, #21]
 8013c24:	f003 0306 	and.w	r3, r3, #6
 8013c28:	2b06      	cmp	r3, #6
 8013c2a:	d10b      	bne.n	8013c44 <mc_line+0x28>
    if(state_get() != STATE_CHECK_MODE && protocol_execute_realtime()) {
 8013c2c:	f00b f98c 	bl	801ef48 <state_get>
 8013c30:	2802      	cmp	r0, #2
 8013c32:	d10b      	bne.n	8013c4c <mc_line+0x30>
    return !ABORTED;
 8013c34:	4b1b      	ldr	r3, [pc, #108]	@ (8013ca4 <mc_line+0x88>)
 8013c36:	781b      	ldrb	r3, [r3, #0]
 8013c38:	bb7b      	cbnz	r3, 8013c9a <mc_line+0x7e>
 8013c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8013ca4 <mc_line+0x88>)
 8013c3c:	785b      	ldrb	r3, [r3, #1]
 8013c3e:	b37b      	cbz	r3, 8013ca0 <mc_line+0x84>
 8013c40:	2300      	movs	r3, #0
 8013c42:	e02b      	b.n	8013c9c <mc_line+0x80>
        limits_soft_check(target, pl_data->condition);
 8013c44:	6949      	ldr	r1, [r1, #20]
 8013c46:	f7ff ff0b 	bl	8013a60 <limits_soft_check>
 8013c4a:	e7ef      	b.n	8013c2c <mc_line+0x10>
    if(state_get() != STATE_CHECK_MODE && protocol_execute_realtime()) {
 8013c4c:	f003 fe14 	bl	8017878 <protocol_execute_realtime>
 8013c50:	2800      	cmp	r0, #0
 8013c52:	d0ef      	beq.n	8013c34 <mc_line+0x18>
            if(!protocol_execute_realtime())    // Check for any run-time commands
 8013c54:	f003 fe10 	bl	8017878 <protocol_execute_realtime>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	b1f8      	cbz	r0, 8013c9c <mc_line+0x80>
            if(plan_check_full_buffer())
 8013c5c:	f002 fe62 	bl	8016924 <plan_check_full_buffer>
 8013c60:	b110      	cbz	r0, 8013c68 <mc_line+0x4c>
                protocol_auto_cycle_start();    // Auto-cycle start when buffer is full.
 8013c62:	f003 fad3 	bl	801720c <protocol_auto_cycle_start>
            if(!protocol_execute_realtime())    // Check for any run-time commands
 8013c66:	e7f5      	b.n	8013c54 <mc_line+0x38>
        if(!plan_buffer_line(target, pl_data) && pl_data->spindle.hal->cap.laser && pl_data->spindle.state.on && !pl_data->spindle.state.ccw) {
 8013c68:	4621      	mov	r1, r4
 8013c6a:	4628      	mov	r0, r5
 8013c6c:	f002 fefc 	bl	8016a68 <plan_buffer_line>
 8013c70:	2800      	cmp	r0, #0
 8013c72:	d1df      	bne.n	8013c34 <mc_line+0x18>
 8013c74:	6923      	ldr	r3, [r4, #16]
 8013c76:	7a9b      	ldrb	r3, [r3, #10]
 8013c78:	f013 0f08 	tst.w	r3, #8
 8013c7c:	d0da      	beq.n	8013c34 <mc_line+0x18>
 8013c7e:	7a23      	ldrb	r3, [r4, #8]
 8013c80:	f003 0303 	and.w	r3, r3, #3
 8013c84:	2b01      	cmp	r3, #1
 8013c86:	d1d5      	bne.n	8013c34 <mc_line+0x18>
            protocol_buffer_synchronize();
 8013c88:	f004 f8c4 	bl	8017e14 <protocol_buffer_synchronize>
            pl_data->spindle.hal->set_state(pl_data->spindle.hal, pl_data->spindle.state, pl_data->spindle.rpm);
 8013c8c:	6920      	ldr	r0, [r4, #16]
 8013c8e:	6a03      	ldr	r3, [r0, #32]
 8013c90:	ed94 0a01 	vldr	s0, [r4, #4]
 8013c94:	7a21      	ldrb	r1, [r4, #8]
 8013c96:	4798      	blx	r3
 8013c98:	e7cc      	b.n	8013c34 <mc_line+0x18>
    return !ABORTED;
 8013c9a:	2300      	movs	r3, #0
}
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	bd38      	pop	{r3, r4, r5, pc}
    return !ABORTED;
 8013ca0:	2301      	movs	r3, #1
 8013ca2:	e7fb      	b.n	8013c9c <mc_line+0x80>
 8013ca4:	20001d70 	.word	0x20001d70

08013ca8 <mc_arc>:
{
 8013ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cac:	ed2d 8b06 	vpush	{d8-d10}
 8013cb0:	b0a9      	sub	sp, #164	@ 0xa4
 8013cb2:	4606      	mov	r6, r0
 8013cb4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013cb6:	9103      	str	r1, [sp, #12]
 8013cb8:	4617      	mov	r7, r2
 8013cba:	461c      	mov	r4, r3
 8013cbc:	9315      	str	r3, [sp, #84]	@ 0x54
 8013cbe:	eeb0 9a40 	vmov.f32	s18, s0
        .x = -(double)offset[plane.axis_0],
 8013cc2:	f89d 20e0 	ldrb.w	r2, [sp, #224]	@ 0xe0
 8013cc6:	9213      	str	r2, [sp, #76]	@ 0x4c
 8013cc8:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8013ccc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013cd0:	9310      	str	r3, [sp, #64]	@ 0x40
 8013cd2:	6818      	ldr	r0, [r3, #0]
 8013cd4:	f7f4 fb80 	bl	80083d8 <__aeabi_f2d>
 8013cd8:	4602      	mov	r2, r0
 8013cda:	460b      	mov	r3, r1
 8013cdc:	4682      	mov	sl, r0
 8013cde:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013ce2:	f101 4b00 	add.w	fp, r1, #2147483648	@ 0x80000000
    point_2dd_t rv = {  // Radius vector from center to current location
 8013ce6:	e9cd ab22 	strd	sl, fp, [sp, #136]	@ 0x88
        .y = -(double)offset[plane.axis_1]
 8013cea:	f89d 30e1 	ldrb.w	r3, [sp, #225]	@ 0xe1
 8013cee:	9314      	str	r3, [sp, #80]	@ 0x50
 8013cf0:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8013cf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013cf8:	9311      	str	r3, [sp, #68]	@ 0x44
 8013cfa:	6818      	ldr	r0, [r3, #0]
 8013cfc:	f7f4 fb6c 	bl	80083d8 <__aeabi_f2d>
 8013d00:	4604      	mov	r4, r0
 8013d02:	460d      	mov	r5, r1
 8013d04:	ed9f 7ba8 	vldr	d7, [pc, #672]	@ 8013fa8 <mc_arc+0x300>
 8013d08:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013d0c:	9004      	str	r0, [sp, #16]
 8013d0e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013d12:	9305      	str	r3, [sp, #20]
    point_2dd_t rv = {  // Radius vector from center to current location
 8013d14:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013d18:	ed8d 7b24 	vstr	d7, [sp, #144]	@ 0x90
        .x = (double)position[plane.axis_0] - rv.x,
 8013d1c:	eb07 0309 	add.w	r3, r7, r9
 8013d20:	930a      	str	r3, [sp, #40]	@ 0x28
 8013d22:	6818      	ldr	r0, [r3, #0]
 8013d24:	f7f4 fb58 	bl	80083d8 <__aeabi_f2d>
 8013d28:	4602      	mov	r2, r0
 8013d2a:	460b      	mov	r3, r1
 8013d2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013d30:	f7f4 f9f4 	bl	800811c <__adddf3>
 8013d34:	4602      	mov	r2, r0
 8013d36:	460b      	mov	r3, r1
 8013d38:	e9cd 2306 	strd	r2, r3, [sp, #24]
    point_2dd_t center = {
 8013d3c:	ec43 2b17 	vmov	d7, r2, r3
 8013d40:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
        .y = (double)position[plane.axis_1] - rv.y
 8013d44:	eb07 0308 	add.w	r3, r7, r8
 8013d48:	9312      	str	r3, [sp, #72]	@ 0x48
 8013d4a:	6818      	ldr	r0, [r3, #0]
 8013d4c:	f7f4 fb44 	bl	80083d8 <__aeabi_f2d>
 8013d50:	4602      	mov	r2, r0
 8013d52:	460b      	mov	r3, r1
 8013d54:	4620      	mov	r0, r4
 8013d56:	4629      	mov	r1, r5
 8013d58:	f7f4 f9e0 	bl	800811c <__adddf3>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	460c      	mov	r4, r1
 8013d60:	e9cd 3408 	strd	r3, r4, [sp, #32]
    point_2dd_t center = {
 8013d64:	ec44 3b17 	vmov	d7, r3, r4
 8013d68:	ed8d 7b20 	vstr	d7, [sp, #128]	@ 0x80
        .x = (double)target[plane.axis_0] - center.x,
 8013d6c:	44b1      	add	r9, r6
 8013d6e:	f8d9 0000 	ldr.w	r0, [r9]
 8013d72:	f7f4 fb31 	bl	80083d8 <__aeabi_f2d>
 8013d76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013d7a:	f7f4 f9cd 	bl	8008118 <__aeabi_dsub>
 8013d7e:	4604      	mov	r4, r0
 8013d80:	460d      	mov	r5, r1
    point_2dd_t rt = {
 8013d82:	e9cd 451a 	strd	r4, r5, [sp, #104]	@ 0x68
        .y = (double)target[plane.axis_1] - center.y
 8013d86:	44b0      	add	r8, r6
 8013d88:	f8d8 0000 	ldr.w	r0, [r8]
 8013d8c:	f7f4 fb24 	bl	80083d8 <__aeabi_f2d>
 8013d90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013d94:	f7f4 f9c0 	bl	8008118 <__aeabi_dsub>
 8013d98:	4680      	mov	r8, r0
 8013d9a:	4689      	mov	r9, r1
    point_2dd_t rt = {
 8013d9c:	e9cd 891c 	strd	r8, r9, [sp, #112]	@ 0x70
    float angular_travel = (float)atan2(rv.x * rt.y - rv.y * rt.x, rv.x * rt.x + rv.y * rt.y);
 8013da0:	4602      	mov	r2, r0
 8013da2:	460b      	mov	r3, r1
 8013da4:	4650      	mov	r0, sl
 8013da6:	4659      	mov	r1, fp
 8013da8:	f7f4 fb6e 	bl	8008488 <__aeabi_dmul>
 8013dac:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8013db0:	4622      	mov	r2, r4
 8013db2:	462b      	mov	r3, r5
 8013db4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013db8:	f7f4 fb66 	bl	8008488 <__aeabi_dmul>
 8013dbc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013dc0:	4622      	mov	r2, r4
 8013dc2:	462b      	mov	r3, r5
 8013dc4:	4650      	mov	r0, sl
 8013dc6:	4659      	mov	r1, fp
 8013dc8:	f7f4 fb5e 	bl	8008488 <__aeabi_dmul>
 8013dcc:	4604      	mov	r4, r0
 8013dce:	460d      	mov	r5, r1
 8013dd0:	4642      	mov	r2, r8
 8013dd2:	464b      	mov	r3, r9
 8013dd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013dd8:	f7f4 fb56 	bl	8008488 <__aeabi_dmul>
 8013ddc:	4602      	mov	r2, r0
 8013dde:	460b      	mov	r3, r1
 8013de0:	4620      	mov	r0, r4
 8013de2:	4629      	mov	r1, r5
 8013de4:	f7f4 f99a 	bl	800811c <__adddf3>
 8013de8:	ec41 0b18 	vmov	d8, r0, r1
 8013dec:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013df4:	f7f4 f990 	bl	8008118 <__aeabi_dsub>
 8013df8:	eeb0 1a48 	vmov.f32	s2, s16
 8013dfc:	eef0 1a68 	vmov.f32	s3, s17
 8013e00:	ec41 0b10 	vmov	d0, r0, r1
 8013e04:	f013 fc9a 	bl	802773c <atan2>
 8013e08:	ec51 0b10 	vmov	r0, r1, d0
 8013e0c:	f7f4 fe34 	bl	8008a78 <__aeabi_d2f>
 8013e10:	ee08 0a10 	vmov	s16, r0
    if (turns > 0) { // Correct atan2 output per direction
 8013e14:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	f340 80b1 	ble.w	8013f7e <mc_arc+0x2d6>
        if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON)
 8013e1c:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8013fb8 <mc_arc+0x310>
 8013e20:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e28:	d80a      	bhi.n	8013e40 <mc_arc+0x198>
            angular_travel += 2.0f * M_PI;
 8013e2a:	f7f4 fad5 	bl	80083d8 <__aeabi_f2d>
 8013e2e:	a360      	add	r3, pc, #384	@ (adr r3, 8013fb0 <mc_arc+0x308>)
 8013e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e34:	f7f4 f972 	bl	800811c <__adddf3>
 8013e38:	f7f4 fe1e 	bl	8008a78 <__aeabi_d2f>
 8013e3c:	ee08 0a10 	vmov	s16, r0
    if(!pl_data->condition.target_validated && grbl.check_arc_travel_limits) {
 8013e40:	9d03      	ldr	r5, [sp, #12]
 8013e42:	7d6b      	ldrb	r3, [r5, #21]
 8013e44:	f013 0f04 	tst.w	r3, #4
 8013e48:	d125      	bne.n	8013e96 <mc_arc+0x1ee>
 8013e4a:	4b5c      	ldr	r3, [pc, #368]	@ (8013fbc <mc_arc+0x314>)
 8013e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8013e50:	b30b      	cbz	r3, 8013e96 <mc_arc+0x1ee>
        pl_data->condition.target_validated = On;
 8013e52:	7d6b      	ldrb	r3, [r5, #21]
 8013e54:	f043 0304 	orr.w	r3, r3, #4
 8013e58:	756b      	strb	r3, [r5, #21]
        pl_data->condition.target_valid = grbl.check_arc_travel_limits((coord_data_t *)target, (coord_data_t *)position,
 8013e5a:	4b58      	ldr	r3, [pc, #352]	@ (8013fbc <mc_arc+0x314>)
 8013e5c:	f8d3 40e0 	ldr.w	r4, [r3, #224]	@ 0xe0
                                                                        (point_2d_t){ .x = (float)center.x, .y = (float)center.y },
 8013e60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013e64:	f7f4 fe08 	bl	8008a78 <__aeabi_d2f>
 8013e68:	ee08 0a90 	vmov	s17, r0
 8013e6c:	9026      	str	r0, [sp, #152]	@ 0x98
 8013e6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013e72:	f7f4 fe01 	bl	8008a78 <__aeabi_d2f>
 8013e76:	ee00 0a90 	vmov	s1, r0
 8013e7a:	9027      	str	r0, [sp, #156]	@ 0x9c
        pl_data->condition.target_valid = grbl.check_arc_travel_limits((coord_data_t *)target, (coord_data_t *)position,
 8013e7c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8013e7e:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8013e80:	eeb0 1a49 	vmov.f32	s2, s18
 8013e84:	eeb0 0a68 	vmov.f32	s0, s17
 8013e88:	4639      	mov	r1, r7
 8013e8a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8013e8c:	47a0      	blx	r4
 8013e8e:	7d6b      	ldrb	r3, [r5, #21]
 8013e90:	f360 0341 	bfi	r3, r0, #1, #1
 8013e94:	756b      	strb	r3, [r5, #21]
    if(labs(turns) > 1) {
 8013e96:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8013e98:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
 8013e9c:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
 8013ea0:	2e01      	cmp	r6, #1
 8013ea2:	f300 8093 	bgt.w	8013fcc <mc_arc+0x324>
    if(2.0f * radius > settings.arc_tolerance)
 8013ea6:	ee79 7a09 	vadd.f32	s15, s18, s18
 8013eaa:	4b45      	ldr	r3, [pc, #276]	@ (8013fc0 <mc_arc+0x318>)
 8013eac:	ed93 0a02 	vldr	s0, [r3, #8]
 8013eb0:	eef4 7ac0 	vcmpe.f32	s15, s0
 8013eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eb8:	f340 81a5 	ble.w	8014206 <mc_arc+0x55e>
        segments = (uint_fast16_t)floorf(fabsf(0.5f * angular_travel * radius) / sqrtf(settings.arc_tolerance * (2.0f * radius - settings.arc_tolerance)));
 8013ebc:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 8013ec0:	ee68 8a28 	vmul.f32	s17, s16, s17
 8013ec4:	ee68 8a89 	vmul.f32	s17, s17, s18
 8013ec8:	eef0 8ae8 	vabs.f32	s17, s17
 8013ecc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013ed0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013ed4:	f013 fc8c 	bl	80277f0 <sqrtf>
 8013ed8:	ee88 0a80 	vdiv.f32	s0, s17, s0
 8013edc:	f013 fdd8 	bl	8027a90 <floorf>
 8013ee0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013ee4:	ee17 9a90 	vmov	r9, s15
    if(segments) {
 8013ee8:	f1b9 0f00 	cmp.w	r9, #0
 8013eec:	f000 818b 	beq.w	8014206 <mc_arc+0x55e>
        if (pl_data->condition.inverse_time) {
 8013ef0:	9a03      	ldr	r2, [sp, #12]
 8013ef2:	7d13      	ldrb	r3, [r2, #20]
 8013ef4:	f013 0f20 	tst.w	r3, #32
 8013ef8:	d00b      	beq.n	8013f12 <mc_arc+0x26a>
            pl_data->feed_rate *= segments;
 8013efa:	ed92 7a00 	vldr	s14, [r2]
 8013efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013f06:	edc2 7a00 	vstr	s15, [r2]
            pl_data->condition.inverse_time = Off; // Force as feed absolute mode over arc segments.
 8013f0a:	7d13      	ldrb	r3, [r2, #20]
 8013f0c:	f36f 1345 	bfc	r3, #5, #1
 8013f10:	7513      	strb	r3, [r2, #20]
        float theta_per_segment = angular_travel / segments;
 8013f12:	ee07 9a90 	vmov	s15, r9
 8013f16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013f1a:	eec8 aa07 	vdiv.f32	s21, s16, s14
        float linear_per_segment = (target[plane.axis_linear] - position[plane.axis_linear]) / segments;
 8013f1e:	f89d 30e2 	ldrb.w	r3, [sp, #226]	@ 0xe2
 8013f22:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013f24:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013f28:	edd2 7a00 	vldr	s15, [r2]
 8013f2c:	eb07 0683 	add.w	r6, r7, r3, lsl #2
 8013f30:	edd6 6a00 	vldr	s13, [r6]
 8013f34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013f38:	ee87 aa87 	vdiv.f32	s20, s15, s14
        float cos_T = 2.0f - theta_per_segment * theta_per_segment;
 8013f3c:	ee2a 7aaa 	vmul.f32	s14, s21, s21
 8013f40:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8013f44:	ee77 7ac7 	vsub.f32	s15, s15, s14
        float sin_T = theta_per_segment * 0.16666667f * (cos_T + 4.0f);
 8013f48:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8013fc4 <mc_arc+0x31c>
 8013f4c:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 8013f50:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8013f54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f58:	ee26 7a87 	vmul.f32	s14, s13, s14
 8013f5c:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
        cos_T *= 0.5f;
 8013f60:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013f68:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
        uint_fast16_t i, count = 0;
 8013f6c:	f04f 0b00 	mov.w	fp, #0
        for (i = 1; i < segments; i++) { // Increment (segments-1).
 8013f70:	f04f 0a01 	mov.w	sl, #1
 8013f74:	46b8      	mov	r8, r7
 8013f76:	464f      	mov	r7, r9
 8013f78:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 8013f7c:	e0fb      	b.n	8014176 <mc_arc+0x4ce>
    } else if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON)
 8013f7e:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8013fc8 <mc_arc+0x320>
 8013f82:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f8a:	f6ff af59 	blt.w	8013e40 <mc_arc+0x198>
        angular_travel -= 2.0f * M_PI;
 8013f8e:	f7f4 fa23 	bl	80083d8 <__aeabi_f2d>
 8013f92:	a307      	add	r3, pc, #28	@ (adr r3, 8013fb0 <mc_arc+0x308>)
 8013f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f98:	f7f4 f8be 	bl	8008118 <__aeabi_dsub>
 8013f9c:	f7f4 fd6c 	bl	8008a78 <__aeabi_d2f>
 8013fa0:	ee08 0a10 	vmov	s16, r0
 8013fa4:	e74c      	b.n	8013e40 <mc_arc+0x198>
 8013fa6:	bf00      	nop
	...
 8013fb0:	54442d18 	.word	0x54442d18
 8013fb4:	401921fb 	.word	0x401921fb
 8013fb8:	350637bd 	.word	0x350637bd
 8013fbc:	20001c78 	.word	0x20001c78
 8013fc0:	200024a8 	.word	0x200024a8
 8013fc4:	3e2aaaab 	.word	0x3e2aaaab
 8013fc8:	b50637bd 	.word	0xb50637bd
        uint32_t n_turns = labs(turns) - 1;
 8013fcc:	3e01      	subs	r6, #1
        float arc_travel = 2.0f * M_PI * n_turns + angular_travel;
 8013fce:	4630      	mov	r0, r6
 8013fd0:	f7f4 f9e0 	bl	8008394 <__aeabi_ui2d>
 8013fd4:	a390      	add	r3, pc, #576	@ (adr r3, 8014218 <mc_arc+0x570>)
 8013fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fda:	f7f4 fa55 	bl	8008488 <__aeabi_dmul>
 8013fde:	4604      	mov	r4, r0
 8013fe0:	460d      	mov	r5, r1
 8013fe2:	ee18 0a10 	vmov	r0, s16
 8013fe6:	f7f4 f9f7 	bl	80083d8 <__aeabi_f2d>
 8013fea:	4622      	mov	r2, r4
 8013fec:	462b      	mov	r3, r5
 8013fee:	f7f4 f895 	bl	800811c <__adddf3>
 8013ff2:	f7f4 fd41 	bl	8008a78 <__aeabi_d2f>
 8013ff6:	ee06 0a90 	vmov	s13, r0
        float linear_per_turn = (target[plane.axis_linear] - position[plane.axis_linear]) / arc_travel * 2.0f * M_PI;
 8013ffa:	f89d 40e2 	ldrb.w	r4, [sp, #226]	@ 0xe2
 8013ffe:	00a5      	lsls	r5, r4, #2
 8014000:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014002:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014006:	edd3 7a00 	vldr	s15, [r3]
 801400a:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 801400e:	edd3 9a00 	vldr	s19, [r3]
 8014012:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8014016:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801401a:	ee77 7a07 	vadd.f32	s15, s14, s14
 801401e:	ee17 0a90 	vmov	r0, s15
 8014022:	f7f4 f9d9 	bl	80083d8 <__aeabi_f2d>
 8014026:	a37e      	add	r3, pc, #504	@ (adr r3, 8014220 <mc_arc+0x578>)
 8014028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801402c:	f7f4 fa2c 	bl	8008488 <__aeabi_dmul>
 8014030:	f7f4 fd22 	bl	8008a78 <__aeabi_d2f>
 8014034:	ee08 0a90 	vmov	s17, r0
        memcpy(&arc_target, target, sizeof(coord_data_t));
 8014038:	ab17      	add	r3, sp, #92	@ 0x5c
 801403a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801403c:	6810      	ldr	r0, [r2, #0]
 801403e:	6851      	ldr	r1, [r2, #4]
 8014040:	6892      	ldr	r2, [r2, #8]
 8014042:	c307      	stmia	r3!, {r0, r1, r2}
        arc_target.values[plane.axis_0] = position[plane.axis_0];
 8014044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014046:	681a      	ldr	r2, [r3, #0]
 8014048:	a928      	add	r1, sp, #160	@ 0xa0
 801404a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801404c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014050:	f843 2c44 	str.w	r2, [r3, #-68]
        arc_target.values[plane.axis_1] = position[plane.axis_1];
 8014054:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014056:	681a      	ldr	r2, [r3, #0]
 8014058:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801405a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801405e:	f843 2c44 	str.w	r2, [r3, #-68]
        arc_target.values[plane.axis_linear] = position[plane.axis_linear];
 8014062:	f105 03a0 	add.w	r3, r5, #160	@ 0xa0
 8014066:	eb0d 0503 	add.w	r5, sp, r3
 801406a:	ed45 9a11 	vstr	s19, [r5, #-68]	@ 0xffffffbc
        while(n_turns--) {
 801406e:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
 8014072:	f8dd 80e4 	ldr.w	r8, [sp, #228]	@ 0xe4
 8014076:	e016      	b.n	80140a6 <mc_arc+0x3fe>
            mc_arc(arc_target.values, pl_data, position, offset, radius, plane, turns > 0 ? 1 : -1);
 8014078:	f04f 33ff 	mov.w	r3, #4294967295
 801407c:	9301      	str	r3, [sp, #4]
 801407e:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8014080:	f8ad 3000 	strh.w	r3, [sp]
 8014084:	0c1b      	lsrs	r3, r3, #16
 8014086:	f88d 3002 	strb.w	r3, [sp, #2]
 801408a:	eeb0 0a49 	vmov.f32	s0, s18
 801408e:	464b      	mov	r3, r9
 8014090:	463a      	mov	r2, r7
 8014092:	9903      	ldr	r1, [sp, #12]
 8014094:	a817      	add	r0, sp, #92	@ 0x5c
 8014096:	f7ff fe07 	bl	8013ca8 <mc_arc>
            memcpy(position, arc_target.values, sizeof(coord_data_t));
 801409a:	ab17      	add	r3, sp, #92	@ 0x5c
 801409c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801409e:	6038      	str	r0, [r7, #0]
 80140a0:	6079      	str	r1, [r7, #4]
 80140a2:	60ba      	str	r2, [r7, #8]
        while(n_turns--) {
 80140a4:	462e      	mov	r6, r5
 80140a6:	1e75      	subs	r5, r6, #1
 80140a8:	2e00      	cmp	r6, #0
 80140aa:	f43f aefc 	beq.w	8013ea6 <mc_arc+0x1fe>
            arc_target.values[plane.axis_linear] += linear_per_turn;
 80140ae:	ab28      	add	r3, sp, #160	@ 0xa0
 80140b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80140b4:	ed53 7a11 	vldr	s15, [r3, #-68]	@ 0xffffffbc
 80140b8:	ee77 7aa8 	vadd.f32	s15, s15, s17
 80140bc:	ed43 7a11 	vstr	s15, [r3, #-68]	@ 0xffffffbc
            mc_arc(arc_target.values, pl_data, position, offset, radius, plane, turns > 0 ? 1 : -1);
 80140c0:	f1b8 0f00 	cmp.w	r8, #0
 80140c4:	ddd8      	ble.n	8014078 <mc_arc+0x3d0>
 80140c6:	2301      	movs	r3, #1
 80140c8:	e7d8      	b.n	801407c <mc_arc+0x3d4>
                cos_Ti = cosf(i * theta_per_segment);
 80140ca:	ee07 aa90 	vmov	s15, sl
 80140ce:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80140d2:	ee28 8a2a 	vmul.f32	s16, s16, s21
 80140d6:	eeb0 0a48 	vmov.f32	s0, s16
 80140da:	f013 fba7 	bl	802782c <cosf>
 80140de:	eef0 8a40 	vmov.f32	s17, s0
                sin_Ti = sinf(i * theta_per_segment);
 80140e2:	eeb0 0a48 	vmov.f32	s0, s16
 80140e6:	f013 fbe5 	bl	80278b4 <sinf>
 80140ea:	eeb0 9a40 	vmov.f32	s18, s0
                rv.x = -offset[plane.axis_0] * cos_Ti + offset[plane.axis_1] * sin_Ti;
 80140ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80140f0:	edd3 7a00 	vldr	s15, [r3]
 80140f4:	eef1 9a67 	vneg.f32	s19, s15
 80140f8:	ee67 7ae8 	vnmul.f32	s15, s15, s17
 80140fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80140fe:	ed93 8a00 	vldr	s16, [r3]
 8014102:	ee28 7a00 	vmul.f32	s14, s16, s0
 8014106:	ee77 7a87 	vadd.f32	s15, s15, s14
 801410a:	ee17 0a90 	vmov	r0, s15
 801410e:	f7f4 f963 	bl	80083d8 <__aeabi_f2d>
 8014112:	e9cd 0122 	strd	r0, r1, [sp, #136]	@ 0x88
                rv.y = -offset[plane.axis_0] * sin_Ti - offset[plane.axis_1] * cos_Ti;
 8014116:	ee69 9a89 	vmul.f32	s19, s19, s18
 801411a:	ee28 8a28 	vmul.f32	s16, s16, s17
 801411e:	ee79 7ac8 	vsub.f32	s15, s19, s16
 8014122:	ee17 0a90 	vmov	r0, s15
 8014126:	f7f4 f957 	bl	80083d8 <__aeabi_f2d>
 801412a:	e9cd 0124 	strd	r0, r1, [sp, #144]	@ 0x90
                count = 0;
 801412e:	f04f 0b00 	mov.w	fp, #0
            position[plane.axis_0] = center.x + rv.x;
 8014132:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	@ 0x88
 8014136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801413a:	f7f3 ffef 	bl	800811c <__adddf3>
 801413e:	f7f4 fc9b 	bl	8008a78 <__aeabi_d2f>
 8014142:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014144:	6018      	str	r0, [r3, #0]
            position[plane.axis_1] = center.y + rv.y;
 8014146:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
 801414a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801414e:	f7f3 ffe5 	bl	800811c <__adddf3>
 8014152:	f7f4 fc91 	bl	8008a78 <__aeabi_d2f>
 8014156:	f8c9 0000 	str.w	r0, [r9]
            position[plane.axis_linear] += linear_per_segment;
 801415a:	edd6 7a00 	vldr	s15, [r6]
 801415e:	ee77 7a8a 	vadd.f32	s15, s15, s20
 8014162:	edc6 7a00 	vstr	s15, [r6]
            if(!mc_line(position, pl_data))
 8014166:	9903      	ldr	r1, [sp, #12]
 8014168:	4640      	mov	r0, r8
 801416a:	f7ff fd57 	bl	8013c1c <mc_line>
 801416e:	2800      	cmp	r0, #0
 8014170:	d04d      	beq.n	801420e <mc_arc+0x566>
        for (i = 1; i < segments; i++) { // Increment (segments-1).
 8014172:	f10a 0a01 	add.w	sl, sl, #1
 8014176:	45ba      	cmp	sl, r7
 8014178:	d245      	bcs.n	8014206 <mc_arc+0x55e>
            if (count < N_ARC_CORRECTION) {
 801417a:	f1bb 0f0b 	cmp.w	fp, #11
 801417e:	d8a4      	bhi.n	80140ca <mc_arc+0x422>
                r_axisi = rv.x * sin_T + rv.y * cos_T;
 8014180:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	@ 0x88
 8014184:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8014186:	f7f4 f927 	bl	80083d8 <__aeabi_f2d>
 801418a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801418e:	4602      	mov	r2, r0
 8014190:	460b      	mov	r3, r1
 8014192:	4620      	mov	r0, r4
 8014194:	4629      	mov	r1, r5
 8014196:	f7f4 f977 	bl	8008488 <__aeabi_dmul>
 801419a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801419e:	ed9d 8b24 	vldr	d8, [sp, #144]	@ 0x90
 80141a2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80141a4:	f7f4 f918 	bl	80083d8 <__aeabi_f2d>
 80141a8:	4602      	mov	r2, r0
 80141aa:	460b      	mov	r3, r1
 80141ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80141b0:	ec51 0b18 	vmov	r0, r1, d8
 80141b4:	f7f4 f968 	bl	8008488 <__aeabi_dmul>
 80141b8:	4602      	mov	r2, r0
 80141ba:	460b      	mov	r3, r1
 80141bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80141c0:	f7f3 ffac 	bl	800811c <__adddf3>
 80141c4:	f7f4 fc58 	bl	8008a78 <__aeabi_d2f>
 80141c8:	900e      	str	r0, [sp, #56]	@ 0x38
                rv.x = rv.x * cos_T - rv.y * sin_T;
 80141ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80141ce:	4620      	mov	r0, r4
 80141d0:	4629      	mov	r1, r5
 80141d2:	f7f4 f959 	bl	8008488 <__aeabi_dmul>
 80141d6:	4604      	mov	r4, r0
 80141d8:	460d      	mov	r5, r1
 80141da:	ec53 2b18 	vmov	r2, r3, d8
 80141de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80141e2:	f7f4 f951 	bl	8008488 <__aeabi_dmul>
 80141e6:	4602      	mov	r2, r0
 80141e8:	460b      	mov	r3, r1
 80141ea:	4620      	mov	r0, r4
 80141ec:	4629      	mov	r1, r5
 80141ee:	f7f3 ff93 	bl	8008118 <__aeabi_dsub>
 80141f2:	e9cd 0122 	strd	r0, r1, [sp, #136]	@ 0x88
                rv.y = r_axisi;
 80141f6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80141f8:	f7f4 f8ee 	bl	80083d8 <__aeabi_f2d>
 80141fc:	e9cd 0124 	strd	r0, r1, [sp, #144]	@ 0x90
                count++;
 8014200:	f10b 0b01 	add.w	fp, fp, #1
 8014204:	e795      	b.n	8014132 <mc_arc+0x48a>
    mc_line(target, pl_data);
 8014206:	9903      	ldr	r1, [sp, #12]
 8014208:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801420a:	f7ff fd07 	bl	8013c1c <mc_line>
}
 801420e:	b029      	add	sp, #164	@ 0xa4
 8014210:	ecbd 8b06 	vpop	{d8-d10}
 8014214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014218:	54442d18 	.word	0x54442d18
 801421c:	401921fb 	.word	0x401921fb
 8014220:	54442d18 	.word	0x54442d18
 8014224:	400921fb 	.word	0x400921fb

08014228 <mc_cubic_b_spline>:
 * the mitigation offered by MIN_STEP and the small computational
 * power available on Arduino, I think it is not wise to implement it.
 */

void mc_cubic_b_spline (float *target, plan_line_data_t *pl_data, float *position, float *first, float *second)
{
 8014228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801422c:	ed2d 8b10 	vpush	{d8-d15}
 8014230:	b085      	sub	sp, #20
 8014232:	4607      	mov	r7, r0
 8014234:	4689      	mov	r9, r1
 8014236:	4615      	mov	r5, r2
 8014238:	461e      	mov	r6, r3
 801423a:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
    float bez_target[N_AXIS];

    memcpy(bez_target, position, sizeof(float) * N_AXIS);
 801423e:	ab01      	add	r3, sp, #4
 8014240:	6810      	ldr	r0, [r2, #0]
 8014242:	6851      	ldr	r1, [r2, #4]
 8014244:	6892      	ldr	r2, [r2, #8]
 8014246:	c307      	stmia	r3!, {r0, r1, r2}

    float t = 0.0f, step = BEZIER_MAX_STEP;
 8014248:	ed9f 8a80 	vldr	s16, [pc, #512]	@ 801444c <mc_cubic_b_spline+0x224>
 801424c:	eddf 9a80 	vldr	s19, [pc, #512]	@ 8014450 <mc_cubic_b_spline+0x228>

    while (t < 1.0f) {
 8014250:	e011      	b.n	8014276 <mc_cubic_b_spline+0x4e>
            new_pos1 = candidate_pos1;
            did_reduce = true;
        }

        // If we did not reduce the step, maybe we should enlarge it.
        if (!did_reduce) while (new_t - t <= BEZIER_MAX_STEP) {
 8014252:	2c00      	cmp	r4, #0
 8014254:	f000 809e 	beq.w	8014394 <mc_cubic_b_spline+0x16c>
            assert(new_t - t >= (MIN_STEP) / 2.0);
            assert(new_t - t <= (MAX_STEP) * 2.0);
          }
        */

        step = new_t - t;
 8014258:	ee39 8a69 	vsub.f32	s16, s18, s19
        t = new_t;

        bez_target[X_AXIS] = new_pos0;
 801425c:	edcd aa01 	vstr	s21, [sp, #4]
        bez_target[Y_AXIS] = new_pos1;
 8014260:	ed8d aa02 	vstr	s20, [sp, #8]

        // Bail mid-spline on system abort. Runtime command check already performed by mc_line.
        if(!mc_line(bez_target, pl_data))
 8014264:	4649      	mov	r1, r9
 8014266:	a801      	add	r0, sp, #4
 8014268:	f7ff fcd8 	bl	8013c1c <mc_line>
 801426c:	2800      	cmp	r0, #0
 801426e:	f000 80e8 	beq.w	8014442 <mc_cubic_b_spline+0x21a>
        t = new_t;
 8014272:	eef0 9a49 	vmov.f32	s19, s18
    while (t < 1.0f) {
 8014276:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801427a:	eef4 9ae7 	vcmpe.f32	s19, s15
 801427e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014282:	f140 80de 	bpl.w	8014442 <mc_cubic_b_spline+0x21a>
        float new_t = t + step;
 8014286:	ee39 9a88 	vadd.f32	s18, s19, s16
        if(new_t > 1.0f)
 801428a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801428e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8014292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014296:	dd01      	ble.n	801429c <mc_cubic_b_spline+0x74>
            new_t = 1.0f;
 8014298:	eeb0 9a67 	vmov.f32	s18, s15
        float new_pos0 = eval_bezier(position[X_AXIS], first[X_AXIS], second[X_AXIS], target[X_AXIS], new_t),
 801429c:	ed95 ba00 	vldr	s22, [r5]
 80142a0:	edd6 ba00 	vldr	s23, [r6]
 80142a4:	ed98 ca00 	vldr	s24, [r8]
 80142a8:	edd7 ca00 	vldr	s25, [r7]
 80142ac:	eeb0 2a49 	vmov.f32	s4, s18
 80142b0:	eef0 1a6c 	vmov.f32	s3, s25
 80142b4:	eeb0 1a4c 	vmov.f32	s2, s24
 80142b8:	eef0 0a6b 	vmov.f32	s1, s23
 80142bc:	eeb0 0a4b 	vmov.f32	s0, s22
 80142c0:	f7ff fc82 	bl	8013bc8 <eval_bezier>
 80142c4:	eef0 aa40 	vmov.f32	s21, s0
              new_pos1 = eval_bezier(position[Y_AXIS], first[Y_AXIS], second[Y_AXIS], target[Y_AXIS], new_t);
 80142c8:	ed95 da01 	vldr	s26, [r5, #4]
 80142cc:	edd6 da01 	vldr	s27, [r6, #4]
 80142d0:	ed98 ea01 	vldr	s28, [r8, #4]
 80142d4:	edd7 ea01 	vldr	s29, [r7, #4]
 80142d8:	eeb0 2a49 	vmov.f32	s4, s18
 80142dc:	eef0 1a6e 	vmov.f32	s3, s29
 80142e0:	eeb0 1a4e 	vmov.f32	s2, s28
 80142e4:	eef0 0a6d 	vmov.f32	s1, s27
 80142e8:	eeb0 0a4d 	vmov.f32	s0, s26
 80142ec:	f7ff fc6c 	bl	8013bc8 <eval_bezier>
 80142f0:	eeb0 aa40 	vmov.f32	s20, s0
        bool did_reduce = false;
 80142f4:	2400      	movs	r4, #0
        while(new_t - t >= (BEZIER_MIN_STEP)) {
 80142f6:	ee79 7a69 	vsub.f32	s15, s18, s19
 80142fa:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8014454 <mc_cubic_b_spline+0x22c>
 80142fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014306:	dba4      	blt.n	8014252 <mc_cubic_b_spline+0x2a>
            const float candidate_t = 0.5f * (t + new_t),
 8014308:	ee39 8a89 	vadd.f32	s16, s19, s18
 801430c:	eeb6 fa00 	vmov.f32	s30, #96	@ 0x3f000000  0.5
 8014310:	ee28 8a0f 	vmul.f32	s16, s16, s30
                      candidate_pos0 = eval_bezier(position[X_AXIS], first[X_AXIS], second[X_AXIS], target[X_AXIS], candidate_t),
 8014314:	eeb0 2a48 	vmov.f32	s4, s16
 8014318:	eef0 1a6c 	vmov.f32	s3, s25
 801431c:	eeb0 1a4c 	vmov.f32	s2, s24
 8014320:	eef0 0a6b 	vmov.f32	s1, s23
 8014324:	eeb0 0a4b 	vmov.f32	s0, s22
 8014328:	f7ff fc4e 	bl	8013bc8 <eval_bezier>
 801432c:	eef0 8a40 	vmov.f32	s17, s0
                      candidate_pos1 = eval_bezier(position[Y_AXIS], first[Y_AXIS], second[Y_AXIS], target[Y_AXIS], candidate_t),
 8014330:	eeb0 2a48 	vmov.f32	s4, s16
 8014334:	eef0 1a6e 	vmov.f32	s3, s29
 8014338:	eeb0 1a4e 	vmov.f32	s2, s28
 801433c:	eef0 0a6d 	vmov.f32	s1, s27
 8014340:	eeb0 0a4d 	vmov.f32	s0, s26
 8014344:	f7ff fc40 	bl	8013bc8 <eval_bezier>
                      interp_pos0 = 0.5f * (bez_target[X_AXIS] + new_pos0),
 8014348:	ed9d 7a01 	vldr	s14, [sp, #4]
 801434c:	ee37 7a2a 	vadd.f32	s14, s14, s21
 8014350:	ee27 7a0f 	vmul.f32	s14, s14, s30
                      interp_pos1 = 0.5f * (bez_target[Y_AXIS] + new_pos1);
 8014354:	eddd 7a02 	vldr	s15, [sp, #8]
 8014358:	ee77 7a8a 	vadd.f32	s15, s15, s20
 801435c:	ee67 7a8f 	vmul.f32	s15, s15, s30
    return fabsf(x1 - x2) + fabsf(y1 - y2);
 8014360:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8014364:	eeb0 7ac7 	vabs.f32	s14, s14
 8014368:	ee70 7a67 	vsub.f32	s15, s0, s15
 801436c:	eef0 7ae7 	vabs.f32	s15, s15
 8014370:	ee77 7a87 	vadd.f32	s15, s15, s14
            if (dist1(candidate_pos0, candidate_pos1, interp_pos0, interp_pos1) <= (BEZIER_SIGMA))
 8014374:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 801444c <mc_cubic_b_spline+0x224>
 8014378:	eef4 7ac7 	vcmpe.f32	s15, s14
 801437c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014380:	f67f af67 	bls.w	8014252 <mc_cubic_b_spline+0x2a>
            new_pos1 = candidate_pos1;
 8014384:	eeb0 aa40 	vmov.f32	s20, s0
            new_pos0 = candidate_pos0;
 8014388:	eef0 aa68 	vmov.f32	s21, s17
            new_t = candidate_t;
 801438c:	eeb0 9a48 	vmov.f32	s18, s16
            did_reduce = true;
 8014390:	2401      	movs	r4, #1
 8014392:	e7b0      	b.n	80142f6 <mc_cubic_b_spline+0xce>
        if (!did_reduce) while (new_t - t <= BEZIER_MAX_STEP) {
 8014394:	ee39 8a69 	vsub.f32	s16, s18, s19
 8014398:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 801444c <mc_cubic_b_spline+0x224>
 801439c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80143a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143a4:	f63f af58 	bhi.w	8014258 <mc_cubic_b_spline+0x30>
            const float candidate_t = t + 2.0f * (new_t - t);
 80143a8:	ee38 8a08 	vadd.f32	s16, s16, s16
 80143ac:	ee38 8a29 	vadd.f32	s16, s16, s19
            if (candidate_t >= 1.0f)
 80143b0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80143b4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80143b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143bc:	f6bf af4c 	bge.w	8014258 <mc_cubic_b_spline+0x30>
            const float candidate_pos0 = eval_bezier(position[X_AXIS], first[X_AXIS], second[X_AXIS], target[X_AXIS], candidate_t),
 80143c0:	eeb0 2a48 	vmov.f32	s4, s16
 80143c4:	eef0 1a6c 	vmov.f32	s3, s25
 80143c8:	eeb0 1a4c 	vmov.f32	s2, s24
 80143cc:	eef0 0a6b 	vmov.f32	s1, s23
 80143d0:	eeb0 0a4b 	vmov.f32	s0, s22
 80143d4:	f7ff fbf8 	bl	8013bc8 <eval_bezier>
 80143d8:	eef0 8a40 	vmov.f32	s17, s0
                      candidate_pos1 = eval_bezier(position[Y_AXIS], first[Y_AXIS], second[Y_AXIS], target[Y_AXIS], candidate_t),
 80143dc:	eeb0 2a48 	vmov.f32	s4, s16
 80143e0:	eef0 1a6e 	vmov.f32	s3, s29
 80143e4:	eeb0 1a4e 	vmov.f32	s2, s28
 80143e8:	eef0 0a6d 	vmov.f32	s1, s27
 80143ec:	eeb0 0a4d 	vmov.f32	s0, s26
 80143f0:	f7ff fbea 	bl	8013bc8 <eval_bezier>
                      interp_pos0 = 0.5f * (bez_target[X_AXIS] + candidate_pos0),
 80143f4:	eddd 7a01 	vldr	s15, [sp, #4]
 80143f8:	ee77 7aa8 	vadd.f32	s15, s15, s17
 80143fc:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8014400:	ee67 7aa6 	vmul.f32	s15, s15, s13
                      interp_pos1 = 0.5f * (bez_target[Y_AXIS] + candidate_pos1);
 8014404:	ed9d 7a02 	vldr	s14, [sp, #8]
 8014408:	ee37 7a00 	vadd.f32	s14, s14, s0
 801440c:	ee27 7a26 	vmul.f32	s14, s14, s13
    return fabsf(x1 - x2) + fabsf(y1 - y2);
 8014410:	ee7a 7ae7 	vsub.f32	s15, s21, s15
 8014414:	eef0 7ae7 	vabs.f32	s15, s15
 8014418:	ee3a 7a47 	vsub.f32	s14, s20, s14
 801441c:	eeb0 7ac7 	vabs.f32	s14, s14
 8014420:	ee77 7a87 	vadd.f32	s15, s15, s14
            if (dist1(new_pos0, new_pos1, interp_pos0, interp_pos1) > (BEZIER_SIGMA))
 8014424:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 801444c <mc_cubic_b_spline+0x224>
 8014428:	eef4 7ac7 	vcmpe.f32	s15, s14
 801442c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014430:	f73f af12 	bgt.w	8014258 <mc_cubic_b_spline+0x30>
            new_pos1 = candidate_pos1;
 8014434:	eeb0 aa40 	vmov.f32	s20, s0
            new_pos0 = candidate_pos0;
 8014438:	eef0 aa68 	vmov.f32	s21, s17
            new_t = candidate_t;
 801443c:	eeb0 9a48 	vmov.f32	s18, s16
 8014440:	e7a8      	b.n	8014394 <mc_cubic_b_spline+0x16c>
            return;
    }
}
 8014442:	b005      	add	sp, #20
 8014444:	ecbd 8b10 	vpop	{d8-d15}
 8014448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801444c:	3dcccccd 	.word	0x3dcccccd
 8014450:	00000000 	.word	0x00000000
 8014454:	3b03126f 	.word	0x3b03126f

08014458 <mc_thread>:
// R - depth regression, Q - compound slide angle, H - spring passes, E - taper, L - taper end

// TODO: change pitch to follow any tapers

void mc_thread (plan_line_data_t *pl_data, float *position, gc_thread_data *thread, bool feed_hold_disabled)
{
 8014458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801445c:	ed2d 8b08 	vpush	{d8-d11}
 8014460:	b085      	sub	sp, #20
 8014462:	4604      	mov	r4, r0
 8014464:	460f      	mov	r7, r1
 8014466:	4615      	mov	r5, r2
 8014468:	4699      	mov	r9, r3
    uint_fast16_t pass = 1, passes = 0;
    float doc = thread->initial_depth, inv_degression = 1.0f / thread->depth_degression, thread_length;
 801446a:	ed92 8a03 	vldr	s16, [r2, #12]
 801446e:	edd2 7a05 	vldr	s15, [r2, #20]
 8014472:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014476:	eec7 8a27 	vdiv.f32	s17, s14, s15
    float entry_taper_length = thread->end_taper_type & Taper_Entry ? thread->end_taper_length : 0.0f;
 801447a:	f892 a02c 	ldrb.w	sl, [r2, #44]	@ 0x2c
 801447e:	f01a 0b01 	ands.w	fp, sl, #1
 8014482:	d067      	beq.n	8014554 <mc_thread+0xfc>
 8014484:	ed92 aa07 	vldr	s20, [r2, #28]
    float exit_taper_length = thread->end_taper_type & Taper_Exit ? thread->end_taper_length : 0.0f;
 8014488:	f01a 0a02 	ands.w	sl, sl, #2
 801448c:	d065      	beq.n	801455a <mc_thread+0x102>
 801448e:	edd5 aa07 	vldr	s21, [r5, #28]
    float infeed_factor = tanf(thread->infeed_angle * RADDEG);
 8014492:	ed95 0a08 	vldr	s0, [r5, #32]
 8014496:	eddf 7aae 	vldr	s15, [pc, #696]	@ 8014750 <mc_thread+0x2f8>
 801449a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801449e:	f013 fa4f 	bl	8027940 <tanf>
 80144a2:	eeb0 9a40 	vmov.f32	s18, s0
    float target[N_AXIS], start_z = position[Z_AXIS] + thread->depth * infeed_factor;
 80144a6:	edd7 9a02 	vldr	s19, [r7, #8]
 80144aa:	ed95 ba04 	vldr	s22, [r5, #16]
 80144ae:	ee6b 7a00 	vmul.f32	s15, s22, s0
 80144b2:	ee79 9aa7 	vadd.f32	s19, s19, s15

    memcpy(target, position, sizeof(float) * N_AXIS);
 80144b6:	ab01      	add	r3, sp, #4
 80144b8:	6838      	ldr	r0, [r7, #0]
 80144ba:	6879      	ldr	r1, [r7, #4]
 80144bc:	68ba      	ldr	r2, [r7, #8]
 80144be:	c307      	stmia	r3!, {r0, r1, r2}
    uint_fast16_t pass = 1, passes = 0;
 80144c0:	f04f 0800 	mov.w	r8, #0

    // Calculate number of passes
    while(calc_thread_doc(++passes, doc, inv_degression) < thread->depth);
 80144c4:	f108 0801 	add.w	r8, r8, #1
    return cut_depth * powf((float)pass, inv_degression);
 80144c8:	eef0 0a68 	vmov.f32	s1, s17
 80144cc:	ee07 8a90 	vmov	s15, r8
 80144d0:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80144d4:	f013 f934 	bl	8027740 <powf>
 80144d8:	ee28 0a00 	vmul.f32	s0, s16, s0
    while(calc_thread_doc(++passes, doc, inv_degression) < thread->depth);
 80144dc:	eeb4 bac0 	vcmpe.f32	s22, s0
 80144e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e4:	dcee      	bgt.n	80144c4 <mc_thread+0x6c>

    passes += thread->spring_passes + 1;
 80144e6:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 80144e8:	4446      	add	r6, r8
 80144ea:	3601      	adds	r6, #1

    if((thread_length = thread->z_final - position[Z_AXIS]) > 0.0f) {
 80144ec:	ed95 ba01 	vldr	s22, [r5, #4]
 80144f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80144f4:	ee3b ba67 	vsub.f32	s22, s22, s15
 80144f8:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 80144fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014500:	dd09      	ble.n	8014516 <mc_thread+0xbe>
        if(thread->end_taper_type & Taper_Entry)
 8014502:	f1bb 0f00 	cmp.w	fp, #0
 8014506:	d001      	beq.n	801450c <mc_thread+0xb4>
            entry_taper_length = -entry_taper_length;
 8014508:	eeb1 aa4a 	vneg.f32	s20, s20
        if(thread->end_taper_type & Taper_Exit)
 801450c:	f1ba 0f00 	cmp.w	sl, #0
 8014510:	d001      	beq.n	8014516 <mc_thread+0xbe>
            exit_taper_length = - exit_taper_length;
 8014512:	eef1 aa6a 	vneg.f32	s21, s21
    }

    thread_length += entry_taper_length + exit_taper_length;
 8014516:	ee7a 7a2a 	vadd.f32	s15, s20, s21
 801451a:	ee37 ba8b 	vadd.f32	s22, s15, s22

    if(thread->main_taper_height != 0.0f)
 801451e:	ed95 7a06 	vldr	s14, [r5, #24]
 8014522:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801452a:	d007      	beq.n	801453c <mc_thread+0xe4>
        thread->main_taper_height = thread->main_taper_height * thread_length / (thread_length - (entry_taper_length + exit_taper_length));
 801452c:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8014530:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8014534:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014538:	edc5 6a06 	vstr	s13, [r5, #24]

    pl_data->condition.rapid_motion = On; // Set rapid motion condition flag.
 801453c:	7d23      	ldrb	r3, [r4, #20]
 801453e:	f043 0301 	orr.w	r3, r3, #1
 8014542:	7523      	strb	r3, [r4, #20]
    float acc_distance = pl_data->feed_rate * pl_data->spindle.hal->get_data(SpindleData_RPM)->rpm / settings.acceleration[Z_AXIS];
    acc_distance = acc_distance * acc_distance * settings.acceleration[Z_AXIS] * 0.5f;
     */

    // Initial Z-move for compound slide angle offset.
    if(infeed_factor != 0.0f) {
 8014544:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8014548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801454c:	d108      	bne.n	8014560 <mc_thread+0x108>

            // Restore disable feed hold status for reposition move.
            pl_data->overrides.feed_hold_disable = feed_hold_disabled;

            // 5. Back to start, add compound slide angle offset when commanded.
            target[Z_AXIS] = start_z - (infeed_factor != 0.0f ? doc * infeed_factor : 0.0f);
 801454e:	f04f 0801 	mov.w	r8, #1
 8014552:	e04f      	b.n	80145f4 <mc_thread+0x19c>
    float entry_taper_length = thread->end_taper_type & Taper_Entry ? thread->end_taper_length : 0.0f;
 8014554:	ed9f aa7f 	vldr	s20, [pc, #508]	@ 8014754 <mc_thread+0x2fc>
 8014558:	e796      	b.n	8014488 <mc_thread+0x30>
    float exit_taper_length = thread->end_taper_type & Taper_Exit ? thread->end_taper_length : 0.0f;
 801455a:	eddf aa7e 	vldr	s21, [pc, #504]	@ 8014754 <mc_thread+0x2fc>
 801455e:	e798      	b.n	8014492 <mc_thread+0x3a>
        target[Z_AXIS] = start_z - doc * infeed_factor;
 8014560:	ee68 7a09 	vmul.f32	s15, s16, s18
 8014564:	ee79 7ae7 	vsub.f32	s15, s19, s15
 8014568:	edcd 7a03 	vstr	s15, [sp, #12]
        if(!mc_line(target, pl_data))
 801456c:	4621      	mov	r1, r4
 801456e:	a801      	add	r0, sp, #4
 8014570:	f7ff fb54 	bl	8013c1c <mc_line>
 8014574:	2800      	cmp	r0, #0
 8014576:	d1ea      	bne.n	801454e <mc_thread+0xf6>
            target[X_AXIS] = position[X_AXIS];
            if(!mc_line(target, pl_data))
                return;
        }
    }
}
 8014578:	b005      	add	sp, #20
 801457a:	ecbd 8b08 	vpop	{d8-d11}
 801457e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            target[X_AXIS] = position[X_AXIS] + (thread->peak + doc) * thread->cut_direction;
 8014582:	ed97 7a00 	vldr	s14, [r7]
 8014586:	edd5 7a02 	vldr	s15, [r5, #8]
 801458a:	ee77 7a88 	vadd.f32	s15, s15, s16
 801458e:	edd5 6a09 	vldr	s13, [r5, #36]	@ 0x24
 8014592:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014596:	ee77 7a27 	vadd.f32	s15, s14, s15
 801459a:	edcd 7a01 	vstr	s15, [sp, #4]
 801459e:	e042      	b.n	8014626 <mc_thread+0x1ce>
        if(!protocol_buffer_synchronize() && state_get() != STATE_IDLE) // Wait until any previous moves are finished.
 80145a0:	f00a fcd2 	bl	801ef48 <state_get>
 80145a4:	2800      	cmp	r0, #0
 80145a6:	d048      	beq.n	801463a <mc_thread+0x1e2>
 80145a8:	e7e6      	b.n	8014578 <mc_thread+0x120>
            target[X_AXIS] -= thread->depth * thread->cut_direction;
 80145aa:	ed95 7a04 	vldr	s14, [r5, #16]
 80145ae:	edd5 7a09 	vldr	s15, [r5, #36]	@ 0x24
 80145b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80145b6:	eddd 7a01 	vldr	s15, [sp, #4]
 80145ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80145be:	edcd 7a01 	vstr	s15, [sp, #4]
            target[Z_AXIS] -= exit_taper_length;
 80145c2:	eddd 7a03 	vldr	s15, [sp, #12]
 80145c6:	ee77 7aea 	vsub.f32	s15, s15, s21
 80145ca:	edcd 7a03 	vstr	s15, [sp, #12]
            if(!mc_line(target, pl_data))
 80145ce:	4621      	mov	r1, r4
 80145d0:	a801      	add	r0, sp, #4
 80145d2:	f7ff fb23 	bl	8013c1c <mc_line>
 80145d6:	2800      	cmp	r0, #0
 80145d8:	d16c      	bne.n	80146b4 <mc_thread+0x25c>
 80145da:	e7cd      	b.n	8014578 <mc_thread+0x120>
            target[Z_AXIS] = start_z - (infeed_factor != 0.0f ? doc * infeed_factor : 0.0f);
 80145dc:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8014754 <mc_thread+0x2fc>
 80145e0:	ee79 7ae7 	vsub.f32	s15, s19, s15
 80145e4:	edcd 7a03 	vstr	s15, [sp, #12]
            if(!mc_line(target, pl_data))
 80145e8:	4621      	mov	r1, r4
 80145ea:	a801      	add	r0, sp, #4
 80145ec:	f7ff fb16 	bl	8013c1c <mc_line>
 80145f0:	2800      	cmp	r0, #0
 80145f2:	d0c1      	beq.n	8014578 <mc_thread+0x120>
    while(--passes) {
 80145f4:	3e01      	subs	r6, #1
 80145f6:	d0bf      	beq.n	8014578 <mc_thread+0x120>
        if(thread->end_taper_type & Taper_Entry)
 80145f8:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80145fc:	f013 0f01 	tst.w	r3, #1
 8014600:	d0bf      	beq.n	8014582 <mc_thread+0x12a>
            target[X_AXIS] = position[X_AXIS] + (thread->peak + doc - thread->depth) * thread->cut_direction;
 8014602:	ed97 7a00 	vldr	s14, [r7]
 8014606:	edd5 7a02 	vldr	s15, [r5, #8]
 801460a:	ee77 7a88 	vadd.f32	s15, s15, s16
 801460e:	edd5 6a04 	vldr	s13, [r5, #16]
 8014612:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014616:	edd5 6a09 	vldr	s13, [r5, #36]	@ 0x24
 801461a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801461e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014622:	edcd 7a01 	vstr	s15, [sp, #4]
        if(!mc_line(target, pl_data))
 8014626:	4621      	mov	r1, r4
 8014628:	a801      	add	r0, sp, #4
 801462a:	f7ff faf7 	bl	8013c1c <mc_line>
 801462e:	2800      	cmp	r0, #0
 8014630:	d0a2      	beq.n	8014578 <mc_thread+0x120>
        if(!protocol_buffer_synchronize() && state_get() != STATE_IDLE) // Wait until any previous moves are finished.
 8014632:	f003 fbef 	bl	8017e14 <protocol_buffer_synchronize>
 8014636:	2800      	cmp	r0, #0
 8014638:	d0b2      	beq.n	80145a0 <mc_thread+0x148>
        pl_data->condition.rapid_motion = Off;      // Clear rapid motion condition flag,
 801463a:	7d23      	ldrb	r3, [r4, #20]
 801463c:	f36f 0300 	bfc	r3, #0, #1
 8014640:	7523      	strb	r3, [r4, #20]
        pl_data->spindle.state.synchronized = On;   // enable spindle sync for cut
 8014642:	7a23      	ldrb	r3, [r4, #8]
 8014644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014648:	7223      	strb	r3, [r4, #8]
        pl_data->overrides.feed_hold_disable = On;  // and disable feed hold
 801464a:	7e22      	ldrb	r2, [r4, #24]
 801464c:	f042 0202 	orr.w	r2, r2, #2
 8014650:	7622      	strb	r2, [r4, #24]
        if(thread->end_taper_type & Taper_Entry) {
 8014652:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8014656:	f013 0f01 	tst.w	r3, #1
 801465a:	d018      	beq.n	801468e <mc_thread+0x236>
            target[X_AXIS] += thread->depth * thread->cut_direction;
 801465c:	ed95 7a04 	vldr	s14, [r5, #16]
 8014660:	edd5 7a09 	vldr	s15, [r5, #36]	@ 0x24
 8014664:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014668:	eddd 7a01 	vldr	s15, [sp, #4]
 801466c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014670:	edcd 7a01 	vstr	s15, [sp, #4]
            target[Z_AXIS] -= entry_taper_length;
 8014674:	eddd 7a03 	vldr	s15, [sp, #12]
 8014678:	ee77 7aca 	vsub.f32	s15, s15, s20
 801467c:	edcd 7a03 	vstr	s15, [sp, #12]
            if(!mc_line(target, pl_data))
 8014680:	4621      	mov	r1, r4
 8014682:	a801      	add	r0, sp, #4
 8014684:	f7ff faca 	bl	8013c1c <mc_line>
 8014688:	2800      	cmp	r0, #0
 801468a:	f43f af75 	beq.w	8014578 <mc_thread+0x120>
        target[Z_AXIS] += thread_length;
 801468e:	eddd 7a03 	vldr	s15, [sp, #12]
 8014692:	ee77 7a8b 	vadd.f32	s15, s15, s22
 8014696:	edcd 7a03 	vstr	s15, [sp, #12]
        if(!mc_line(target, pl_data))
 801469a:	4621      	mov	r1, r4
 801469c:	a801      	add	r0, sp, #4
 801469e:	f7ff fabd 	bl	8013c1c <mc_line>
 80146a2:	2800      	cmp	r0, #0
 80146a4:	f43f af68 	beq.w	8014578 <mc_thread+0x120>
        if(thread->end_taper_type & Taper_Exit) {
 80146a8:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80146ac:	f013 0f02 	tst.w	r3, #2
 80146b0:	f47f af7b 	bne.w	80145aa <mc_thread+0x152>
        pl_data->condition.rapid_motion = On;       // Set rapid motion condition flag and
 80146b4:	7d23      	ldrb	r3, [r4, #20]
 80146b6:	f043 0301 	orr.w	r3, r3, #1
 80146ba:	7523      	strb	r3, [r4, #20]
        pl_data->spindle.state.synchronized = Off;  // disable spindle sync for retract & reposition
 80146bc:	7a23      	ldrb	r3, [r4, #8]
 80146be:	f36f 13c7 	bfc	r3, #7, #1
 80146c2:	7223      	strb	r3, [r4, #8]
        if(passes > 1) {
 80146c4:	2e01      	cmp	r6, #1
 80146c6:	d936      	bls.n	8014736 <mc_thread+0x2de>
            doc = calc_thread_doc(++pass, thread->initial_depth, inv_degression);
 80146c8:	f108 0801 	add.w	r8, r8, #1
 80146cc:	ed95 8a03 	vldr	s16, [r5, #12]
    return cut_depth * powf((float)pass, inv_degression);
 80146d0:	eef0 0a68 	vmov.f32	s1, s17
 80146d4:	ee07 8a90 	vmov	s15, r8
 80146d8:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80146dc:	f013 f830 	bl	8027740 <powf>
 80146e0:	ee28 8a00 	vmul.f32	s16, s16, s0
            doc = min(doc, thread->depth);
 80146e4:	edd5 7a04 	vldr	s15, [r5, #16]
 80146e8:	eef4 7ac8 	vcmpe.f32	s15, s16
 80146ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146f0:	dc01      	bgt.n	80146f6 <mc_thread+0x29e>
 80146f2:	eeb0 8a67 	vmov.f32	s16, s15
            target[X_AXIS] = position[X_AXIS] + (doc - thread->depth) * thread->cut_direction;
 80146f6:	ed97 7a00 	vldr	s14, [r7]
 80146fa:	ee78 7a67 	vsub.f32	s15, s16, s15
 80146fe:	edd5 6a09 	vldr	s13, [r5, #36]	@ 0x24
 8014702:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014706:	ee77 7a27 	vadd.f32	s15, s14, s15
 801470a:	edcd 7a01 	vstr	s15, [sp, #4]
            if(!mc_line(target, pl_data))
 801470e:	4621      	mov	r1, r4
 8014710:	a801      	add	r0, sp, #4
 8014712:	f7ff fa83 	bl	8013c1c <mc_line>
 8014716:	2800      	cmp	r0, #0
 8014718:	f43f af2e 	beq.w	8014578 <mc_thread+0x120>
            pl_data->overrides.feed_hold_disable = feed_hold_disabled;
 801471c:	7e23      	ldrb	r3, [r4, #24]
 801471e:	f369 0341 	bfi	r3, r9, #1, #1
 8014722:	7623      	strb	r3, [r4, #24]
            target[Z_AXIS] = start_z - (infeed_factor != 0.0f ? doc * infeed_factor : 0.0f);
 8014724:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8014728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801472c:	f43f af56 	beq.w	80145dc <mc_thread+0x184>
 8014730:	ee68 7a09 	vmul.f32	s15, s16, s18
 8014734:	e754      	b.n	80145e0 <mc_thread+0x188>
            doc = thread->depth;
 8014736:	ed95 8a04 	vldr	s16, [r5, #16]
            target[X_AXIS] = position[X_AXIS];
 801473a:	683b      	ldr	r3, [r7, #0]
 801473c:	9301      	str	r3, [sp, #4]
            if(!mc_line(target, pl_data))
 801473e:	4621      	mov	r1, r4
 8014740:	a801      	add	r0, sp, #4
 8014742:	f7ff fa6b 	bl	8013c1c <mc_line>
 8014746:	2800      	cmp	r0, #0
 8014748:	f47f af54 	bne.w	80145f4 <mc_thread+0x19c>
 801474c:	e714      	b.n	8014578 <mc_thread+0x120>
 801474e:	bf00      	nop
 8014750:	3c8efa35 	.word	0x3c8efa35
 8014754:	00000000 	.word	0x00000000

08014758 <mc_jog_execute>:

// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
status_code_t mc_jog_execute (plan_line_data_t *pl_data, parser_block_t *gc_block, float *position)
{
 8014758:	b538      	push	{r3, r4, r5, lr}
 801475a:	4604      	mov	r4, r0
 801475c:	460d      	mov	r5, r1
    // Initialize planner data struct for jogging motions.
    // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
    pl_data->feed_rate = gc_block->values.f;
 801475e:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
 8014760:	6003      	str	r3, [r0, #0]
    pl_data->condition.no_feed_override =
    pl_data->condition.jog_motion =
    pl_data->condition.target_valid =
    pl_data->condition.target_validated = On;
 8014762:	7d43      	ldrb	r3, [r0, #21]
 8014764:	f043 0304 	orr.w	r3, r3, #4
 8014768:	7543      	strb	r3, [r0, #21]
    pl_data->condition.target_valid =
 801476a:	b2db      	uxtb	r3, r3
 801476c:	f043 0302 	orr.w	r3, r3, #2
 8014770:	7543      	strb	r3, [r0, #21]
    pl_data->condition.jog_motion =
 8014772:	7d03      	ldrb	r3, [r0, #20]
 8014774:	f043 0304 	orr.w	r3, r3, #4
 8014778:	7503      	strb	r3, [r0, #20]
    pl_data->condition.no_feed_override =
 801477a:	b2db      	uxtb	r3, r3
 801477c:	f043 0310 	orr.w	r3, r3, #16
 8014780:	7503      	strb	r3, [r0, #20]
    pl_data->line_number = gc_block->values.n;
 8014782:	f8d1 30a4 	ldr.w	r3, [r1, #164]	@ 0xa4
 8014786:	61c3      	str	r3, [r0, #28]

    if(settings.limits.flags.jog_soft_limited)
 8014788:	4b1d      	ldr	r3, [pc, #116]	@ (8014800 <mc_jog_execute+0xa8>)
 801478a:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 801478e:	f013 0f08 	tst.w	r3, #8
 8014792:	d013      	beq.n	80147bc <mc_jog_execute+0x64>
 8014794:	4611      	mov	r1, r2
        grbl.apply_jog_limits(gc_block->values.xyz, position);
 8014796:	4b1b      	ldr	r3, [pc, #108]	@ (8014804 <mc_jog_execute+0xac>)
 8014798:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801479c:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 80147a0:	4798      	blx	r3
    else if(sys.soft_limits.mask && !grbl.check_travel_limits(gc_block->values.xyz, sys.soft_limits, true))
        return Status_TravelExceeded;

    // Valid jog command. Plan, set state, and execute.
    mc_line(gc_block->values.xyz, pl_data);
 80147a2:	4621      	mov	r1, r4
 80147a4:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 80147a8:	f7ff fa38 	bl	8013c1c <mc_line>

#ifndef KINEMATICS_API // kinematics may segment long jog moves triggering auto start (RUN)...
    sys_state_t state = state_get();
 80147ac:	f00a fbcc 	bl	801ef48 <state_get>
    if ((state == STATE_IDLE || state == STATE_TOOL_CHANGE) && plan_get_current_block() != NULL) { // Check if there is a block to execute.
 80147b0:	b1b8      	cbz	r0, 80147e2 <mc_jog_execute+0x8a>
 80147b2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80147b6:	d014      	beq.n	80147e2 <mc_jog_execute+0x8a>
        st_prep_buffer();
        st_wake_up();  // NOTE: Manual start. No state machine required.
    }
#endif

    return Status_OK;
 80147b8:	2000      	movs	r0, #0
}
 80147ba:	bd38      	pop	{r3, r4, r5, pc}
    else if(sys.soft_limits.mask && !grbl.check_travel_limits(gc_block->values.xyz, sys.soft_limits, true))
 80147bc:	4b12      	ldr	r3, [pc, #72]	@ (8014808 <mc_jog_execute+0xb0>)
 80147be:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d0ed      	beq.n	80147a2 <mc_jog_execute+0x4a>
 80147c6:	4b0f      	ldr	r3, [pc, #60]	@ (8014804 <mc_jog_execute+0xac>)
 80147c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80147cc:	2201      	movs	r2, #1
 80147ce:	490e      	ldr	r1, [pc, #56]	@ (8014808 <mc_jog_execute+0xb0>)
 80147d0:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 80147d4:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 80147d8:	4798      	blx	r3
 80147da:	2800      	cmp	r0, #0
 80147dc:	d1e1      	bne.n	80147a2 <mc_jog_execute+0x4a>
        return Status_TravelExceeded;
 80147de:	200f      	movs	r0, #15
 80147e0:	e7eb      	b.n	80147ba <mc_jog_execute+0x62>
    if ((state == STATE_IDLE || state == STATE_TOOL_CHANGE) && plan_get_current_block() != NULL) { // Check if there is a block to execute.
 80147e2:	f002 f87d 	bl	80168e0 <plan_get_current_block>
 80147e6:	b140      	cbz	r0, 80147fa <mc_jog_execute+0xa2>
        state_set(STATE_JOG);
 80147e8:	2020      	movs	r0, #32
 80147ea:	f00a fbb3 	bl	801ef54 <state_set>
        st_prep_buffer();
 80147ee:	f00b fbb9 	bl	801ff64 <st_prep_buffer>
        st_wake_up();  // NOTE: Manual start. No state machine required.
 80147f2:	f00b f8c5 	bl	801f980 <st_wake_up>
    return Status_OK;
 80147f6:	2000      	movs	r0, #0
 80147f8:	e7df      	b.n	80147ba <mc_jog_execute+0x62>
 80147fa:	2000      	movs	r0, #0
 80147fc:	e7dd      	b.n	80147ba <mc_jog_execute+0x62>
 80147fe:	bf00      	nop
 8014800:	200024a8 	.word	0x200024a8
 8014804:	20001c78 	.word	0x20001c78
 8014808:	20001d70 	.word	0x20001d70

0801480c <mc_dwell>:

// Execute dwell in seconds.
void mc_dwell (float seconds)
{
 801480c:	b508      	push	{r3, lr}
 801480e:	ed2d 8b02 	vpush	{d8}
 8014812:	eeb0 8a40 	vmov.f32	s16, s0
    if (state_get() != STATE_CHECK_MODE) {
 8014816:	f00a fb97 	bl	801ef48 <state_get>
 801481a:	2802      	cmp	r0, #2
 801481c:	d102      	bne.n	8014824 <mc_dwell+0x18>
        protocol_buffer_synchronize();
        delay_sec(seconds, DelayMode_Dwell);
    }
}
 801481e:	ecbd 8b02 	vpop	{d8}
 8014822:	bd08      	pop	{r3, pc}
        protocol_buffer_synchronize();
 8014824:	f003 faf6 	bl	8017e14 <protocol_buffer_synchronize>
        delay_sec(seconds, DelayMode_Dwell);
 8014828:	2000      	movs	r0, #0
 801482a:	eeb0 0a48 	vmov.f32	s0, s16
 801482e:	f001 fa59 	bl	8015ce4 <delay_sec>
}
 8014832:	e7f4      	b.n	801481e <mc_dwell+0x12>

08014834 <mc_canned_drill>:
{
 8014834:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014838:	ed2d 8b02 	vpush	{d8}
 801483c:	4681      	mov	r9, r0
 801483e:	468a      	mov	sl, r1
 8014840:	4614      	mov	r4, r2
 8014842:	461f      	mov	r7, r3
 8014844:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
    pl_data->condition.rapid_motion = On; // Set rapid motion condition flag.
 8014846:	7d13      	ldrb	r3, [r2, #20]
 8014848:	f043 0301 	orr.w	r3, r3, #1
 801484c:	7513      	strb	r3, [r2, #20]
    if(position[plane.axis_linear] < canned->retract_position) {
 801484e:	f89d 8032 	ldrb.w	r8, [sp, #50]	@ 0x32
 8014852:	eb07 0688 	add.w	r6, r7, r8, lsl #2
 8014856:	ed96 7a00 	vldr	s14, [r6]
 801485a:	edd5 7a05 	vldr	s15, [r5, #20]
 801485e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014866:	d426      	bmi.n	80148b6 <mc_canned_drill+0x82>
    float position_linear = position[plane.axis_linear],
 8014868:	6833      	ldr	r3, [r6, #0]
          retract_to = canned->retract_mode == CCRetractMode_RPos ? canned->retract_position : position_linear;
 801486a:	7eaa      	ldrb	r2, [r5, #26]
 801486c:	2a01      	cmp	r2, #1
 801486e:	d02e      	beq.n	80148ce <mc_canned_drill+0x9a>
 8014870:	ee08 3a90 	vmov	s17, r3
    memcpy(position, target, sizeof(float) * N_AXIS);
 8014874:	f8da 0000 	ldr.w	r0, [sl]
 8014878:	f8da 1004 	ldr.w	r1, [sl, #4]
 801487c:	f8da 2008 	ldr.w	r2, [sl, #8]
 8014880:	6038      	str	r0, [r7, #0]
 8014882:	6079      	str	r1, [r7, #4]
 8014884:	60ba      	str	r2, [r7, #8]
    position[plane.axis_linear] = position_linear;
 8014886:	6033      	str	r3, [r6, #0]
    if(!mc_line(position, pl_data))
 8014888:	4621      	mov	r1, r4
 801488a:	4638      	mov	r0, r7
 801488c:	f7ff f9c6 	bl	8013c1c <mc_line>
 8014890:	b1c8      	cbz	r0, 80148c6 <mc_canned_drill+0x92>
    while(repeats--) {
 8014892:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014894:	f103 3bff 	add.w	fp, r3, #4294967295
 8014898:	2b00      	cmp	r3, #0
 801489a:	f000 80bc 	beq.w	8014a16 <mc_canned_drill+0x1e2>
        if(position[plane.axis_linear] > canned->retract_position) {
 801489e:	ed96 7a00 	vldr	s14, [r6]
 80148a2:	edd5 7a05 	vldr	s15, [r5, #20]
 80148a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80148aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148ae:	dc11      	bgt.n	80148d4 <mc_canned_drill+0xa0>
        position_linear = position[plane.axis_linear];
 80148b0:	edd6 7a00 	vldr	s15, [r6]
        while(position_linear > canned->xyz[plane.axis_linear]) {
 80148b4:	e02f      	b.n	8014916 <mc_canned_drill+0xe2>
        position[plane.axis_linear] = canned->retract_position;
 80148b6:	edc6 7a00 	vstr	s15, [r6]
        if(!mc_line(position, pl_data))
 80148ba:	4611      	mov	r1, r2
 80148bc:	4638      	mov	r0, r7
 80148be:	f7ff f9ad 	bl	8013c1c <mc_line>
 80148c2:	2800      	cmp	r0, #0
 80148c4:	d1d0      	bne.n	8014868 <mc_canned_drill+0x34>
}
 80148c6:	ecbd 8b02 	vpop	{d8}
 80148ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          retract_to = canned->retract_mode == CCRetractMode_RPos ? canned->retract_position : position_linear;
 80148ce:	edd5 8a05 	vldr	s17, [r5, #20]
 80148d2:	e7cf      	b.n	8014874 <mc_canned_drill+0x40>
            position[plane.axis_linear] = canned->retract_position;
 80148d4:	edc6 7a00 	vstr	s15, [r6]
            if(!mc_line(position, pl_data))
 80148d8:	4621      	mov	r1, r4
 80148da:	4638      	mov	r0, r7
 80148dc:	f7ff f99e 	bl	8013c1c <mc_line>
 80148e0:	2800      	cmp	r0, #0
 80148e2:	d1e5      	bne.n	80148b0 <mc_canned_drill+0x7c>
 80148e4:	e7ef      	b.n	80148c6 <mc_canned_drill+0x92>
                mc_dwell(canned->dwell);
 80148e6:	f7ff ff91 	bl	801480c <mc_dwell>
 80148ea:	e03b      	b.n	8014964 <mc_canned_drill+0x130>
            switch(motion) {
 80148ec:	f1b9 0f49 	cmp.w	r9, #73	@ 0x49
 80148f0:	d043      	beq.n	801497a <mc_canned_drill+0x146>
                    position[plane.axis_linear] = retract_to;
 80148f2:	edc6 8a00 	vstr	s17, [r6]
            pl_data->condition.rapid_motion = canned->rapid_retract;
 80148f6:	7e2a      	ldrb	r2, [r5, #24]
 80148f8:	7d23      	ldrb	r3, [r4, #20]
 80148fa:	f362 0300 	bfi	r3, r2, #0, #1
 80148fe:	7523      	strb	r3, [r4, #20]
            if(!mc_line(position, pl_data))
 8014900:	4621      	mov	r1, r4
 8014902:	4638      	mov	r0, r7
 8014904:	f7ff f98a 	bl	8013c1c <mc_line>
 8014908:	2800      	cmp	r0, #0
 801490a:	d0dc      	beq.n	80148c6 <mc_canned_drill+0x92>
            if(canned->spindle_off)
 801490c:	7e6b      	ldrb	r3, [r5, #25]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d149      	bne.n	80149a6 <mc_canned_drill+0x172>
                                                   : position[plane.axis_linear] + settings.g73_retract;
 8014912:	eef0 7a48 	vmov.f32	s15, s16
        while(position_linear > canned->xyz[plane.axis_linear]) {
 8014916:	eb05 0388 	add.w	r3, r5, r8, lsl #2
 801491a:	ed93 8a00 	vldr	s16, [r3]
 801491e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014926:	d546      	bpl.n	80149b6 <mc_canned_drill+0x182>
            position_linear -= canned->delta;
 8014928:	ed95 7a03 	vldr	s14, [r5, #12]
 801492c:	ee77 7ac7 	vsub.f32	s15, s15, s14
            if(position_linear < canned->xyz[plane.axis_linear])
 8014930:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014938:	dc01      	bgt.n	801493e <mc_canned_drill+0x10a>
            position_linear -= canned->delta;
 801493a:	eeb0 8a67 	vmov.f32	s16, s15
            pl_data->condition.rapid_motion = Off;
 801493e:	7d23      	ldrb	r3, [r4, #20]
 8014940:	f36f 0300 	bfc	r3, #0, #1
 8014944:	7523      	strb	r3, [r4, #20]
            position[plane.axis_linear] = position_linear;
 8014946:	ed86 8a00 	vstr	s16, [r6]
            if(!mc_line(position, pl_data)) // drill
 801494a:	4621      	mov	r1, r4
 801494c:	4638      	mov	r0, r7
 801494e:	f7ff f965 	bl	8013c1c <mc_line>
 8014952:	2800      	cmp	r0, #0
 8014954:	d0b7      	beq.n	80148c6 <mc_canned_drill+0x92>
            if(canned->dwell > 0.0f)
 8014956:	ed95 0a04 	vldr	s0, [r5, #16]
 801495a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801495e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014962:	dcc0      	bgt.n	80148e6 <mc_canned_drill+0xb2>
            if(canned->spindle_off)
 8014964:	7e6b      	ldrb	r3, [r5, #25]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d0c0      	beq.n	80148ec <mc_canned_drill+0xb8>
                pl_data->spindle.hal->set_state(pl_data->spindle.hal, (spindle_state_t){0}, 0.0f);
 801496a:	6920      	ldr	r0, [r4, #16]
 801496c:	6a03      	ldr	r3, [r0, #32]
 801496e:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8014a2c <mc_canned_drill+0x1f8>
 8014972:	f04f 0100 	mov.w	r1, #0
 8014976:	4798      	blx	r3
 8014978:	e7b8      	b.n	80148ec <mc_canned_drill+0xb8>
                    position[plane.axis_linear] = position[plane.axis_linear] == canned->xyz[plane.axis_linear]
 801497a:	edd6 7a00 	vldr	s15, [r6]
 801497e:	eb05 0388 	add.w	r3, r5, r8, lsl #2
 8014982:	ed93 7a00 	vldr	s14, [r3]
                                                   : position[plane.axis_linear] + settings.g73_retract;
 8014986:	eef4 7a47 	vcmp.f32	s15, s14
 801498a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801498e:	d005      	beq.n	801499c <mc_canned_drill+0x168>
 8014990:	4b27      	ldr	r3, [pc, #156]	@ (8014a30 <mc_canned_drill+0x1fc>)
 8014992:	ed93 7a03 	vldr	s14, [r3, #12]
 8014996:	ee77 7a87 	vadd.f32	s15, s15, s14
 801499a:	e001      	b.n	80149a0 <mc_canned_drill+0x16c>
 801499c:	eef0 7a68 	vmov.f32	s15, s17
                    position[plane.axis_linear] = position[plane.axis_linear] == canned->xyz[plane.axis_linear]
 80149a0:	edc6 7a00 	vstr	s15, [r6]
                    break;
 80149a4:	e7a7      	b.n	80148f6 <mc_canned_drill+0xc2>
                spindle_sync(pl_data->spindle.hal, gc_state.modal.spindle.state, pl_data->spindle.rpm);
 80149a6:	ed94 0a01 	vldr	s0, [r4, #4]
 80149aa:	4b22      	ldr	r3, [pc, #136]	@ (8014a34 <mc_canned_drill+0x200>)
 80149ac:	7e99      	ldrb	r1, [r3, #26]
 80149ae:	6920      	ldr	r0, [r4, #16]
 80149b0:	f009 ff9c 	bl	801e8ec <spindle_sync>
 80149b4:	e7ad      	b.n	8014912 <mc_canned_drill+0xde>
        pl_data->condition.rapid_motion = On; // Set rapid motion condition flag.
 80149b6:	7d23      	ldrb	r3, [r4, #20]
 80149b8:	f043 0301 	orr.w	r3, r3, #1
 80149bc:	7523      	strb	r3, [r4, #20]
        if(repeats && gc_state.modal.distance_incremental) {
 80149be:	f1bb 0f00 	cmp.w	fp, #0
 80149c2:	d002      	beq.n	80149ca <mc_canned_drill+0x196>
 80149c4:	4b1b      	ldr	r3, [pc, #108]	@ (8014a34 <mc_canned_drill+0x200>)
 80149c6:	791b      	ldrb	r3, [r3, #4]
 80149c8:	b913      	cbnz	r3, 80149d0 <mc_canned_drill+0x19c>
                                                   : position[plane.axis_linear] + settings.g73_retract;
 80149ca:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 80149ce:	e760      	b.n	8014892 <mc_canned_drill+0x5e>
            position[plane.axis_0] += canned->xyz[plane.axis_0];
 80149d0:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 80149d4:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 80149d8:	edd2 7a00 	vldr	s15, [r2]
 80149dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80149e0:	ed93 7a00 	vldr	s14, [r3]
 80149e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80149e8:	edc2 7a00 	vstr	s15, [r2]
            position[plane.axis_1] += canned->xyz[plane.axis_1];
 80149ec:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 80149f0:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 80149f4:	edd2 7a00 	vldr	s15, [r2]
 80149f8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80149fc:	ed93 7a00 	vldr	s14, [r3]
 8014a00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014a04:	edc2 7a00 	vstr	s15, [r2]
            if(!mc_line(position, pl_data))
 8014a08:	4621      	mov	r1, r4
 8014a0a:	4638      	mov	r0, r7
 8014a0c:	f7ff f906 	bl	8013c1c <mc_line>
 8014a10:	2800      	cmp	r0, #0
 8014a12:	d1da      	bne.n	80149ca <mc_canned_drill+0x196>
 8014a14:	e757      	b.n	80148c6 <mc_canned_drill+0x92>
    memcpy(target, position, sizeof(float) * N_AXIS);
 8014a16:	6839      	ldr	r1, [r7, #0]
 8014a18:	687a      	ldr	r2, [r7, #4]
 8014a1a:	68bb      	ldr	r3, [r7, #8]
 8014a1c:	f8ca 1000 	str.w	r1, [sl]
 8014a20:	f8ca 2004 	str.w	r2, [sl, #4]
 8014a24:	f8ca 3008 	str.w	r3, [sl, #8]
 8014a28:	e74d      	b.n	80148c6 <mc_canned_drill+0x92>
 8014a2a:	bf00      	nop
 8014a2c:	00000000 	.word	0x00000000
 8014a30:	200024a8 	.word	0x200024a8
 8014a34:	200017c8 	.word	0x200017c8

08014a38 <mc_probe_cycle>:
}

// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
gc_probe_t mc_probe_cycle (float *target, plan_line_data_t *pl_data, gc_parser_flags_t parser_flags)
{
 8014a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a3c:	b084      	sub	sp, #16
 8014a3e:	4605      	mov	r5, r0
 8014a40:	460f      	mov	r7, r1
 8014a42:	4616      	mov	r6, r2
    uint_fast8_t idx = N_AXIS;

    // TODO: Need to update this cycle so it obeys a non-auto cycle start.
    if (state_get() == STATE_CHECK_MODE)
 8014a44:	f00a fa80 	bl	801ef48 <state_get>
 8014a48:	2802      	cmp	r0, #2
 8014a4a:	f000 8108 	beq.w	8014c5e <mc_probe_cycle+0x226>
    uint_fast8_t idx = N_AXIS;
 8014a4e:	2403      	movs	r4, #3
        return GCProbe_CheckMode;

    do {
        idx--;
 8014a50:	3c01      	subs	r4, #1
        sys.probe_position[idx] = lroundf(target[idx] * settings.axis[idx].steps_per_mm);
 8014a52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014a56:	ed93 0a00 	vldr	s0, [r3]
 8014a5a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8014a5e:	4b82      	ldr	r3, [pc, #520]	@ (8014c68 <mc_probe_cycle+0x230>)
 8014a60:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014a64:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8014a68:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014a6c:	f012 ff9e 	bl	80279ac <lroundf>
 8014a70:	f104 020e 	add.w	r2, r4, #14
 8014a74:	4b7d      	ldr	r3, [pc, #500]	@ (8014c6c <mc_probe_cycle+0x234>)
 8014a76:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    } while(idx);
 8014a7a:	2c00      	cmp	r4, #0
 8014a7c:	d1e8      	bne.n	8014a50 <mc_probe_cycle+0x18>

    sys.probe_coordsys_id = gc_state.modal.coord_system.id;
 8014a7e:	4b7c      	ldr	r3, [pc, #496]	@ (8014c70 <mc_probe_cycle+0x238>)
 8014a80:	7d1a      	ldrb	r2, [r3, #20]
 8014a82:	4b7a      	ldr	r3, [pc, #488]	@ (8014c6c <mc_probe_cycle+0x234>)
 8014a84:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

    // Finish all queued commands and empty planner buffer before starting probe cycle.
    if (!protocol_buffer_synchronize())
 8014a88:	f003 f9c4 	bl	8017e14 <protocol_buffer_synchronize>
 8014a8c:	4680      	mov	r8, r0
 8014a8e:	2800      	cmp	r0, #0
 8014a90:	f000 80e7 	beq.w	8014c62 <mc_probe_cycle+0x22a>
        return GCProbe_Abort; // Return if system reset has been issued.

    // Initialize probing control variables
    sys.flags.probe_succeeded = Off; // Re-initialize probe history before beginning cycle.
 8014a94:	4b75      	ldr	r3, [pc, #468]	@ (8014c6c <mc_probe_cycle+0x234>)
 8014a96:	7d9a      	ldrb	r2, [r3, #22]
 8014a98:	f36f 0241 	bfc	r2, #1, #1
 8014a9c:	759a      	strb	r2, [r3, #22]
    hal.probe.configure(parser_flags.probe_is_away, true);
 8014a9e:	4b75      	ldr	r3, [pc, #468]	@ (8014c74 <mc_probe_cycle+0x23c>)
 8014aa0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8014aa4:	2101      	movs	r1, #1
 8014aa6:	f3c6 00c0 	ubfx	r0, r6, #3, #1
 8014aaa:	4798      	blx	r3

#if COMPATIBILITY_LEVEL <= 1
    bool at_g59_3 = false, probe_toolsetter = grbl.on_probe_toolsetter != NULL && state_get() != STATE_TOOL_CHANGE && (sys.homed.mask & (X_AXIS_BIT|Y_AXIS_BIT));
 8014aac:	4b72      	ldr	r3, [pc, #456]	@ (8014c78 <mc_probe_cycle+0x240>)
 8014aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8014ab2:	b1eb      	cbz	r3, 8014af0 <mc_probe_cycle+0xb8>
 8014ab4:	f00a fa48 	bl	801ef48 <state_get>
 8014ab8:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8014abc:	d030      	beq.n	8014b20 <mc_probe_cycle+0xe8>
 8014abe:	4b6b      	ldr	r3, [pc, #428]	@ (8014c6c <mc_probe_cycle+0x234>)
 8014ac0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8014ac4:	f013 0f03 	tst.w	r3, #3
 8014ac8:	d103      	bne.n	8014ad2 <mc_probe_cycle+0x9a>
 8014aca:	f04f 0800 	mov.w	r8, #0
 8014ace:	46c1      	mov	r9, r8
 8014ad0:	e011      	b.n	8014af6 <mc_probe_cycle+0xbe>

    if(probe_toolsetter)
        grbl.on_probe_toolsetter(NULL, NULL, at_g59_3 = system_xy_at_fixture(CoordinateSystem_G59_3, TOOLSETTER_RADIUS), true);
 8014ad2:	4b69      	ldr	r3, [pc, #420]	@ (8014c78 <mc_probe_cycle+0x240>)
 8014ad4:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 8014ad8:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8014adc:	2008      	movs	r0, #8
 8014ade:	f00d f96b 	bl	8021db8 <system_xy_at_fixture>
 8014ae2:	4681      	mov	r9, r0
 8014ae4:	2301      	movs	r3, #1
 8014ae6:	4602      	mov	r2, r0
 8014ae8:	2100      	movs	r1, #0
 8014aea:	4608      	mov	r0, r1
 8014aec:	47a0      	blx	r4
 8014aee:	e002      	b.n	8014af6 <mc_probe_cycle+0xbe>
    bool at_g59_3 = false, probe_toolsetter = grbl.on_probe_toolsetter != NULL && state_get() != STATE_TOOL_CHANGE && (sys.homed.mask & (X_AXIS_BIT|Y_AXIS_BIT));
 8014af0:	f04f 0800 	mov.w	r8, #0
 8014af4:	46c1      	mov	r9, r8
#endif

    // After syncing, check if probe is already triggered or not connected. If so, halt and issue alarm.
    // NOTE: This probe initialization error applies to all probing cycles.
    probe_state_t probe = hal.probe.get_state();
 8014af6:	4b5f      	ldr	r3, [pc, #380]	@ (8014c74 <mc_probe_cycle+0x23c>)
 8014af8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8014afc:	4798      	blx	r3
    if (probe.triggered || !probe.connected) { // Check probe state.
 8014afe:	f000 0403 	and.w	r4, r0, #3
 8014b02:	2c02      	cmp	r4, #2
 8014b04:	d110      	bne.n	8014b28 <mc_probe_cycle+0xf0>
        protocol_execute_realtime();
        hal.probe.configure(false, false); // Re-initialize invert mask before returning.
        return GCProbe_FailInit; // Nothing else to do but bail.
    }

    if(grbl.on_probe_start) {
 8014b06:	4b5c      	ldr	r3, [pc, #368]	@ (8014c78 <mc_probe_cycle+0x240>)
 8014b08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d040      	beq.n	8014b92 <mc_probe_cycle+0x15a>

        uint_fast8_t idx = N_AXIS;
        axes_signals_t axes = {0};
 8014b10:	f04f 0a00 	mov.w	sl, #0
        coord_data_t position;

        system_convert_array_steps_to_mpos(position.values, sys.position);
 8014b14:	4959      	ldr	r1, [pc, #356]	@ (8014c7c <mc_probe_cycle+0x244>)
 8014b16:	a801      	add	r0, sp, #4
 8014b18:	f00d f930 	bl	8021d7c <system_convert_array_steps_to_mpos>
        uint_fast8_t idx = N_AXIS;
 8014b1c:	2303      	movs	r3, #3
 8014b1e:	e015      	b.n	8014b4c <mc_probe_cycle+0x114>
    bool at_g59_3 = false, probe_toolsetter = grbl.on_probe_toolsetter != NULL && state_get() != STATE_TOOL_CHANGE && (sys.homed.mask & (X_AXIS_BIT|Y_AXIS_BIT));
 8014b20:	f04f 0800 	mov.w	r8, #0
 8014b24:	46c1      	mov	r9, r8
 8014b26:	e7e6      	b.n	8014af6 <mc_probe_cycle+0xbe>
        system_set_exec_alarm(Alarm_ProbeFailInitial);
 8014b28:	4c52      	ldr	r4, [pc, #328]	@ (8014c74 <mc_probe_cycle+0x23c>)
 8014b2a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8014b2c:	2104      	movs	r1, #4
 8014b2e:	4854      	ldr	r0, [pc, #336]	@ (8014c80 <mc_probe_cycle+0x248>)
 8014b30:	4798      	blx	r3
        protocol_execute_realtime();
 8014b32:	f002 fea1 	bl	8017878 <protocol_execute_realtime>
        hal.probe.configure(false, false); // Re-initialize invert mask before returning.
 8014b36:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 8014b3a:	2100      	movs	r1, #0
 8014b3c:	4608      	mov	r0, r1
 8014b3e:	4798      	blx	r3
        return GCProbe_FailInit; // Nothing else to do but bail.
 8014b40:	2402      	movs	r4, #2
    if(grbl.on_probe_completed)
        grbl.on_probe_completed();

    // Successful probe cycle or Failed to trigger probe within travel. With or without error.
    return sys.flags.probe_succeeded ? GCProbe_Found : GCProbe_FailEnd;
}
 8014b42:	4620      	mov	r0, r4
 8014b44:	b004      	add	sp, #16
 8014b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } while(idx);
 8014b4a:	b1db      	cbz	r3, 8014b84 <mc_probe_cycle+0x14c>
            idx--;
 8014b4c:	3b01      	subs	r3, #1
            if(fabsf(target[idx] - position.values[idx]) > TOLERANCE_EQUAL)
 8014b4e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8014b52:	edd2 7a00 	vldr	s15, [r2]
 8014b56:	aa04      	add	r2, sp, #16
 8014b58:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014b5c:	ed12 7a03 	vldr	s14, [r2, #-12]
 8014b60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014b64:	eef0 7ae7 	vabs.f32	s15, s15
 8014b68:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8014c84 <mc_probe_cycle+0x24c>
 8014b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b74:	dde9      	ble.n	8014b4a <mc_probe_cycle+0x112>
                bit_true(axes.mask, bit(idx));
 8014b76:	fa5f fa8a 	uxtb.w	sl, sl
 8014b7a:	2201      	movs	r2, #1
 8014b7c:	409a      	lsls	r2, r3
 8014b7e:	ea4a 0a02 	orr.w	sl, sl, r2
 8014b82:	e7e2      	b.n	8014b4a <mc_probe_cycle+0x112>
        grbl.on_probe_start(axes, target, pl_data);
 8014b84:	4b3c      	ldr	r3, [pc, #240]	@ (8014c78 <mc_probe_cycle+0x240>)
 8014b86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014b8a:	463a      	mov	r2, r7
 8014b8c:	4629      	mov	r1, r5
 8014b8e:	4650      	mov	r0, sl
 8014b90:	4798      	blx	r3
    if(!mc_line(target, pl_data))
 8014b92:	4639      	mov	r1, r7
 8014b94:	4628      	mov	r0, r5
 8014b96:	f7ff f841 	bl	8013c1c <mc_line>
 8014b9a:	2800      	cmp	r0, #0
 8014b9c:	d0d1      	beq.n	8014b42 <mc_probe_cycle+0x10a>
    sys.probing_state = Probing_Active;
 8014b9e:	4833      	ldr	r0, [pc, #204]	@ (8014c6c <mc_probe_cycle+0x234>)
 8014ba0:	2301      	movs	r3, #1
 8014ba2:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
    system_set_exec_state_flag(EXEC_CYCLE_START);
 8014ba6:	4b33      	ldr	r3, [pc, #204]	@ (8014c74 <mc_probe_cycle+0x23c>)
 8014ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014baa:	2102      	movs	r1, #2
 8014bac:	3048      	adds	r0, #72	@ 0x48
 8014bae:	4798      	blx	r3
        if(!protocol_execute_realtime()) // Check for system abort
 8014bb0:	f002 fe62 	bl	8017878 <protocol_execute_realtime>
 8014bb4:	2800      	cmp	r0, #0
 8014bb6:	d0c4      	beq.n	8014b42 <mc_probe_cycle+0x10a>
    } while (!(state_get() == STATE_IDLE || state_get() == STATE_TOOL_CHANGE));
 8014bb8:	f00a f9c6 	bl	801ef48 <state_get>
 8014bbc:	b120      	cbz	r0, 8014bc8 <mc_probe_cycle+0x190>
 8014bbe:	f00a f9c3 	bl	801ef48 <state_get>
 8014bc2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8014bc6:	d1f3      	bne.n	8014bb0 <mc_probe_cycle+0x178>
    if(sys.probing_state == Probing_Active) {
 8014bc8:	4b28      	ldr	r3, [pc, #160]	@ (8014c6c <mc_probe_cycle+0x234>)
 8014bca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014bce:	b2db      	uxtb	r3, r3
 8014bd0:	2b01      	cmp	r3, #1
 8014bd2:	d02f      	beq.n	8014c34 <mc_probe_cycle+0x1fc>
        sys.flags.probe_succeeded = On; // Indicate to system the probing cycle completed successfully.
 8014bd4:	4a25      	ldr	r2, [pc, #148]	@ (8014c6c <mc_probe_cycle+0x234>)
 8014bd6:	7d93      	ldrb	r3, [r2, #22]
 8014bd8:	f043 0302 	orr.w	r3, r3, #2
 8014bdc:	7593      	strb	r3, [r2, #22]
    sys.probing_state = Probing_Off;    // Ensure probe state monitor is disabled.
 8014bde:	2000      	movs	r0, #0
 8014be0:	4b22      	ldr	r3, [pc, #136]	@ (8014c6c <mc_probe_cycle+0x234>)
 8014be2:	f883 0044 	strb.w	r0, [r3, #68]	@ 0x44
    hal.probe.configure(false, false);  // Re-initialize invert mask.
 8014be6:	4b23      	ldr	r3, [pc, #140]	@ (8014c74 <mc_probe_cycle+0x23c>)
 8014be8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8014bec:	4601      	mov	r1, r0
 8014bee:	4798      	blx	r3
    protocol_execute_realtime();        // Check and execute run-time commands
 8014bf0:	f002 fe42 	bl	8017878 <protocol_execute_realtime>
    if(probe_toolsetter)
 8014bf4:	f1b8 0f00 	cmp.w	r8, #0
 8014bf8:	d007      	beq.n	8014c0a <mc_probe_cycle+0x1d2>
        grbl.on_probe_toolsetter(NULL, NULL, at_g59_3, false);
 8014bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8014c78 <mc_probe_cycle+0x240>)
 8014bfc:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 8014c00:	2300      	movs	r3, #0
 8014c02:	464a      	mov	r2, r9
 8014c04:	4619      	mov	r1, r3
 8014c06:	4618      	mov	r0, r3
 8014c08:	47a0      	blx	r4
    st_reset();             // Reset step segment buffer.
 8014c0a:	f00b f881 	bl	801fd10 <st_reset>
    plan_reset();           // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 8014c0e:	f001 fdc3 	bl	8016798 <plan_reset>
    plan_sync_position();   // Sync planner position to current machine position.
 8014c12:	f002 f8ef 	bl	8016df4 <plan_sync_position>
    if(settings.status_report.probe_coordinates)
 8014c16:	4b14      	ldr	r3, [pc, #80]	@ (8014c68 <mc_probe_cycle+0x230>)
 8014c18:	f993 30fc 	ldrsb.w	r3, [r3, #252]	@ 0xfc
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	db1b      	blt.n	8014c58 <mc_probe_cycle+0x220>
    if(grbl.on_probe_completed)
 8014c20:	4b15      	ldr	r3, [pc, #84]	@ (8014c78 <mc_probe_cycle+0x240>)
 8014c22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014c26:	b103      	cbz	r3, 8014c2a <mc_probe_cycle+0x1f2>
        grbl.on_probe_completed();
 8014c28:	4798      	blx	r3
    return sys.flags.probe_succeeded ? GCProbe_Found : GCProbe_FailEnd;
 8014c2a:	4b10      	ldr	r3, [pc, #64]	@ (8014c6c <mc_probe_cycle+0x234>)
 8014c2c:	7d9c      	ldrb	r4, [r3, #22]
 8014c2e:	f3c4 0440 	ubfx	r4, r4, #1, #1
 8014c32:	e786      	b.n	8014b42 <mc_probe_cycle+0x10a>
        memcpy(sys.probe_position, sys.position, sizeof(sys.position));
 8014c34:	4b0d      	ldr	r3, [pc, #52]	@ (8014c6c <mc_probe_cycle+0x234>)
 8014c36:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 8014c3a:	3388      	adds	r3, #136	@ 0x88
 8014c3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014c40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        if(!parser_flags.probe_is_no_error)
 8014c44:	f016 0f10 	tst.w	r6, #16
 8014c48:	d1c9      	bne.n	8014bde <mc_probe_cycle+0x1a6>
            system_set_exec_alarm(Alarm_ProbeFailContact);
 8014c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8014c74 <mc_probe_cycle+0x23c>)
 8014c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014c4e:	2105      	movs	r1, #5
 8014c50:	f104 0014 	add.w	r0, r4, #20
 8014c54:	4798      	blx	r3
 8014c56:	e7c2      	b.n	8014bde <mc_probe_cycle+0x1a6>
        report_probe_parameters();
 8014c58:	f004 fe66 	bl	8019928 <report_probe_parameters>
 8014c5c:	e7e0      	b.n	8014c20 <mc_probe_cycle+0x1e8>
        return GCProbe_CheckMode;
 8014c5e:	2400      	movs	r4, #0
 8014c60:	e76f      	b.n	8014b42 <mc_probe_cycle+0x10a>
        return GCProbe_Abort; // Return if system reset has been issued.
 8014c62:	2402      	movs	r4, #2
 8014c64:	e76d      	b.n	8014b42 <mc_probe_cycle+0x10a>
 8014c66:	bf00      	nop
 8014c68:	200024a8 	.word	0x200024a8
 8014c6c:	20001d70 	.word	0x20001d70
 8014c70:	200017c8 	.word	0x200017c8
 8014c74:	20001a90 	.word	0x20001a90
 8014c78:	20001c78 	.word	0x20001c78
 8014c7c:	20001df8 	.word	0x20001df8
 8014c80:	20001dbc 	.word	0x20001dbc
 8014c84:	38d1b717 	.word	0x38d1b717

08014c88 <mc_parking_motion>:


// Plans and executes the single special motion case for parking. Independent of main planner buffer.
// NOTE: Uses the always free planner ring buffer head to store motion parameters for execution.
bool mc_parking_motion (float *parking_target, plan_line_data_t *pl_data)
{
 8014c88:	b510      	push	{r4, lr}
    bool ok;

    if (sys.abort)
 8014c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8014cc0 <mc_parking_motion+0x38>)
 8014c8c:	781b      	ldrb	r3, [r3, #0]
 8014c8e:	b113      	cbz	r3, 8014c96 <mc_parking_motion+0xe>
        return false; // Block during abort.
 8014c90:	2400      	movs	r4, #0
        st_prep_buffer();
        st_wake_up();
    }

    return ok;
}
 8014c92:	4620      	mov	r0, r4
 8014c94:	bd10      	pop	{r4, pc}
    if ((ok = plan_buffer_line(parking_target, pl_data))) {
 8014c96:	f001 fee7 	bl	8016a68 <plan_buffer_line>
 8014c9a:	4604      	mov	r4, r0
 8014c9c:	2800      	cmp	r0, #0
 8014c9e:	d0f8      	beq.n	8014c92 <mc_parking_motion+0xa>
        sys.step_control.execute_sys_motion = On;
 8014ca0:	4b07      	ldr	r3, [pc, #28]	@ (8014cc0 <mc_parking_motion+0x38>)
 8014ca2:	7e1a      	ldrb	r2, [r3, #24]
 8014ca4:	f042 0204 	orr.w	r2, r2, #4
 8014ca8:	761a      	strb	r2, [r3, #24]
        sys.step_control.end_motion = Off;  // Allow parking motion to execute, if feed hold is active.
 8014caa:	b2d2      	uxtb	r2, r2
 8014cac:	f36f 0200 	bfc	r2, #0, #1
 8014cb0:	761a      	strb	r2, [r3, #24]
        st_parking_setup_buffer();          // Setup step segment buffer for special parking motion case.
 8014cb2:	f00b f8d1 	bl	801fe58 <st_parking_setup_buffer>
        st_prep_buffer();
 8014cb6:	f00b f955 	bl	801ff64 <st_prep_buffer>
        st_wake_up();
 8014cba:	f00a fe61 	bl	801f980 <st_wake_up>
 8014cbe:	e7e8      	b.n	8014c92 <mc_parking_motion+0xa>
 8014cc0:	20001d70 	.word	0x20001d70

08014cc4 <mc_override_ctrl_update>:

void mc_override_ctrl_update (gc_override_flags_t override_state)
{
 8014cc4:	b510      	push	{r4, lr}
 8014cc6:	4604      	mov	r4, r0
// Finish all queued commands before altering override control state
    protocol_buffer_synchronize();
 8014cc8:	f003 f8a4 	bl	8017e14 <protocol_buffer_synchronize>
    if (!sys.abort)
 8014ccc:	4b03      	ldr	r3, [pc, #12]	@ (8014cdc <mc_override_ctrl_update+0x18>)
 8014cce:	781b      	ldrb	r3, [r3, #0]
 8014cd0:	b913      	cbnz	r3, 8014cd8 <mc_override_ctrl_update+0x14>
        sys.override.control = override_state;
 8014cd2:	4b02      	ldr	r3, [pc, #8]	@ (8014cdc <mc_override_ctrl_update+0x18>)
 8014cd4:	f883 4029 	strb.w	r4, [r3, #41]	@ 0x29
}
 8014cd8:	bd10      	pop	{r4, pc}
 8014cda:	bf00      	nop
 8014cdc:	20001d70 	.word	0x20001d70

08014ce0 <mc_reset>:
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
ISR_CODE void ISR_FUNC(mc_reset)(void)
{
    // Only this function can set the system reset. Helps prevent multiple kill calls.
    if (bit_isfalse(sys.rt_exec_state, EXEC_RESET)) {
 8014ce0:	4b26      	ldr	r3, [pc, #152]	@ (8014d7c <mc_reset+0x9c>)
 8014ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014ce4:	f013 0f20 	tst.w	r3, #32
 8014ce8:	d146      	bne.n	8014d78 <mc_reset+0x98>
{
 8014cea:	b510      	push	{r4, lr}

        system_set_exec_state_flag(EXEC_RESET);
 8014cec:	4c24      	ldr	r4, [pc, #144]	@ (8014d80 <mc_reset+0xa0>)
 8014cee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8014cf0:	2120      	movs	r1, #32
 8014cf2:	4824      	ldr	r0, [pc, #144]	@ (8014d84 <mc_reset+0xa4>)
 8014cf4:	4798      	blx	r3

        if(hal.stream.suspend_read)
 8014cf6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8014cfa:	b10b      	cbz	r3, 8014d00 <mc_reset+0x20>
            hal.stream.suspend_read(false);
 8014cfc:	2000      	movs	r0, #0
 8014cfe:	4798      	blx	r3

        // Kill steppers only if in any motion state, i.e. cycle, actively holding, or homing.
        // NOTE: If steppers are kept enabled via the step idle delay setting, this also keeps
        // the steppers enabled by avoiding the go_idle call altogether, unless the motion state is
        // violated, by which, all bets are off.
        if ((state_get() & (STATE_CYCLE|STATE_HOMING|STATE_JOG)) || sys.step_control.execute_hold || sys.step_control.execute_sys_motion) {
 8014d00:	f00a f922 	bl	801ef48 <state_get>
 8014d04:	f010 0f2c 	tst.w	r0, #44	@ 0x2c
 8014d08:	d104      	bne.n	8014d14 <mc_reset+0x34>
 8014d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8014d7c <mc_reset+0x9c>)
 8014d0c:	7e1b      	ldrb	r3, [r3, #24]
 8014d0e:	f013 0f06 	tst.w	r3, #6
 8014d12:	d00d      	beq.n	8014d30 <mc_reset+0x50>

            sys.position_lost = true;
 8014d14:	4b19      	ldr	r3, [pc, #100]	@ (8014d7c <mc_reset+0x9c>)
 8014d16:	2201      	movs	r2, #1
 8014d18:	70da      	strb	r2, [r3, #3]

            if (state_get() != STATE_HOMING)
 8014d1a:	f00a f915 	bl	801ef48 <state_get>
 8014d1e:	2804      	cmp	r0, #4
 8014d20:	d017      	beq.n	8014d52 <mc_reset+0x72>
                system_set_exec_alarm(Alarm_AbortCycle);
 8014d22:	4b17      	ldr	r3, [pc, #92]	@ (8014d80 <mc_reset+0xa0>)
 8014d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d26:	2103      	movs	r1, #3
 8014d28:	4817      	ldr	r0, [pc, #92]	@ (8014d88 <mc_reset+0xa8>)
 8014d2a:	4798      	blx	r3
            else if (!sys.rt_exec_alarm)
                system_set_exec_alarm(Alarm_HomingFailReset);

            st_go_idle(); // Force kill steppers. Position has likely been lost.
 8014d2c:	f00a fe36 	bl	801f99c <st_go_idle>
        }

        control_signals_t signals = hal.control.get_state();
 8014d30:	4b13      	ldr	r3, [pc, #76]	@ (8014d80 <mc_reset+0xa0>)
 8014d32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014d34:	4798      	blx	r3

        if(signals.e_stop)
 8014d36:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8014d3a:	d014      	beq.n	8014d66 <mc_reset+0x86>
            system_set_exec_alarm(Alarm_EStop);
 8014d3c:	4b10      	ldr	r3, [pc, #64]	@ (8014d80 <mc_reset+0xa0>)
 8014d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d40:	210a      	movs	r1, #10
 8014d42:	4811      	ldr	r0, [pc, #68]	@ (8014d88 <mc_reset+0xa8>)
 8014d44:	4798      	blx	r3
        else if(signals.motor_fault)
            system_set_exec_alarm(Alarm_MotorFault);

        if(grbl.on_reset)
 8014d46:	4b11      	ldr	r3, [pc, #68]	@ (8014d8c <mc_reset+0xac>)
 8014d48:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8014d4c:	b103      	cbz	r3, 8014d50 <mc_reset+0x70>
            grbl.on_reset();
 8014d4e:	4798      	blx	r3
    }
}
 8014d50:	bd10      	pop	{r4, pc}
            else if (!sys.rt_exec_alarm)
 8014d52:	4b0a      	ldr	r3, [pc, #40]	@ (8014d7c <mc_reset+0x9c>)
 8014d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d1e8      	bne.n	8014d2c <mc_reset+0x4c>
                system_set_exec_alarm(Alarm_HomingFailReset);
 8014d5a:	4b09      	ldr	r3, [pc, #36]	@ (8014d80 <mc_reset+0xa0>)
 8014d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d5e:	2106      	movs	r1, #6
 8014d60:	4809      	ldr	r0, [pc, #36]	@ (8014d88 <mc_reset+0xa8>)
 8014d62:	4798      	blx	r3
 8014d64:	e7e2      	b.n	8014d2c <mc_reset+0x4c>
        else if(signals.motor_fault)
 8014d66:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8014d6a:	d0ec      	beq.n	8014d46 <mc_reset+0x66>
            system_set_exec_alarm(Alarm_MotorFault);
 8014d6c:	4b04      	ldr	r3, [pc, #16]	@ (8014d80 <mc_reset+0xa0>)
 8014d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d70:	2111      	movs	r1, #17
 8014d72:	4805      	ldr	r0, [pc, #20]	@ (8014d88 <mc_reset+0xa8>)
 8014d74:	4798      	blx	r3
 8014d76:	e7e6      	b.n	8014d46 <mc_reset+0x66>
 8014d78:	4770      	bx	lr
 8014d7a:	bf00      	nop
 8014d7c:	20001d70 	.word	0x20001d70
 8014d80:	20001a90 	.word	0x20001a90
 8014d84:	20001db8 	.word	0x20001db8
 8014d88:	20001dbc 	.word	0x20001dbc
 8014d8c:	20001c78 	.word	0x20001c78

08014d90 <mc_homing_cycle>:
{
 8014d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d92:	b083      	sub	sp, #12
 8014d94:	4604      	mov	r4, r0
    bool home_all = cycle.mask == 0;
 8014d96:	b2c7      	uxtb	r7, r0
    memset(&sys.last_event.limits, 0, sizeof(limit_signals_t));
 8014d98:	4b7c      	ldr	r3, [pc, #496]	@ (8014f8c <mc_homing_cycle+0x1fc>)
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	601a      	str	r2, [r3, #0]
    if(settings.homing.flags.manual && (home_all ? sys.homing.mask : (cycle.mask & sys.homing.mask)) == 0) {
 8014d9e:	4b7c      	ldr	r3, [pc, #496]	@ (8014f90 <mc_homing_cycle+0x200>)
 8014da0:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8014da4:	f013 0f10 	tst.w	r3, #16
 8014da8:	d007      	beq.n	8014dba <mc_homing_cycle+0x2a>
 8014daa:	2f00      	cmp	r7, #0
 8014dac:	f040 8091 	bne.w	8014ed2 <mc_homing_cycle+0x142>
 8014db0:	4b78      	ldr	r3, [pc, #480]	@ (8014f94 <mc_homing_cycle+0x204>)
 8014db2:	7e9b      	ldrb	r3, [r3, #26]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	f000 8091 	beq.w	8014edc <mc_homing_cycle+0x14c>
        if(settings.homing.seek_rate <= 0.0f)
 8014dba:	4b75      	ldr	r3, [pc, #468]	@ (8014f90 <mc_homing_cycle+0x200>)
 8014dbc:	edd3 7a42 	vldr	s15, [r3, #264]	@ 0x108
 8014dc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dc8:	f240 80b5 	bls.w	8014f36 <mc_homing_cycle+0x1a6>
        if (settings.limits.flags.two_switches && hal.home_cap.a.mask == 0 && limit_signals_merge(hal.limits.get_state()).value) {
 8014dcc:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 8014dd0:	f013 0f10 	tst.w	r3, #16
 8014dd4:	d00d      	beq.n	8014df2 <mc_homing_cycle+0x62>
 8014dd6:	4b70      	ldr	r3, [pc, #448]	@ (8014f98 <mc_homing_cycle+0x208>)
 8014dd8:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 8014ddc:	b94b      	cbnz	r3, 8014df2 <mc_homing_cycle+0x62>
 8014dde:	4b6e      	ldr	r3, [pc, #440]	@ (8014f98 <mc_homing_cycle+0x208>)
 8014de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014de2:	4798      	blx	r3
 8014de4:	9000      	str	r0, [sp, #0]
 8014de6:	f7fe fa4d 	bl	8013284 <limit_signals_merge>
 8014dea:	b2c0      	uxtb	r0, r0
 8014dec:	2800      	cmp	r0, #0
 8014dee:	f040 8085 	bne.w	8014efc <mc_homing_cycle+0x16c>
        state_set(STATE_HOMING);                        // Set homing system state.
 8014df2:	2004      	movs	r0, #4
 8014df4:	f00a f8ae 	bl	801ef54 <state_set>
        system_set_exec_state_flag(EXEC_STATUS_REPORT); // Force a status report and
 8014df8:	4b67      	ldr	r3, [pc, #412]	@ (8014f98 <mc_homing_cycle+0x208>)
 8014dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014dfc:	2101      	movs	r1, #1
 8014dfe:	4867      	ldr	r0, [pc, #412]	@ (8014f9c <mc_homing_cycle+0x20c>)
 8014e00:	4798      	blx	r3
        delay_sec(0.1f, DelayMode_Dwell);               // delay a bit to get it sent (or perhaps wait a bit for a request?)
 8014e02:	2000      	movs	r0, #0
 8014e04:	ed9f 0a66 	vldr	s0, [pc, #408]	@ 8014fa0 <mc_homing_cycle+0x210>
 8014e08:	f000 ff6c 	bl	8015ce4 <delay_sec>
        if(spindle_is_on())
 8014e0c:	f009 fe30 	bl	801ea70 <spindle_is_on>
 8014e10:	2800      	cmp	r0, #0
 8014e12:	d17c      	bne.n	8014f0e <mc_homing_cycle+0x17e>
        if(hal.coolant.get_state().mask)
 8014e14:	4b60      	ldr	r3, [pc, #384]	@ (8014f98 <mc_homing_cycle+0x208>)
 8014e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014e18:	4798      	blx	r3
 8014e1a:	b2c0      	uxtb	r0, r0
 8014e1c:	2800      	cmp	r0, #0
 8014e1e:	d179      	bne.n	8014f14 <mc_homing_cycle+0x184>
        if (!home_all) // Perform homing cycle based on mask.
 8014e20:	2f00      	cmp	r7, #0
 8014e22:	d17c      	bne.n	8014f1e <mc_homing_cycle+0x18e>
            sys.homed.mask &= ~sys.homing.mask;
 8014e24:	4a5b      	ldr	r2, [pc, #364]	@ (8014f94 <mc_homing_cycle+0x204>)
 8014e26:	f892 1054 	ldrb.w	r1, [r2, #84]	@ 0x54
 8014e2a:	7e93      	ldrb	r3, [r2, #26]
 8014e2c:	43db      	mvns	r3, r3
 8014e2e:	b25b      	sxtb	r3, r3
 8014e30:	400b      	ands	r3, r1
 8014e32:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
    status_code_t homed_status = Status_OK;
 8014e36:	463e      	mov	r6, r7
            uint_fast8_t idx = 0;
 8014e38:	2500      	movs	r5, #0
                if(settings.homing.cycle[idx].mask) {
 8014e3a:	4b55      	ldr	r3, [pc, #340]	@ (8014f90 <mc_homing_cycle+0x200>)
 8014e3c:	442b      	add	r3, r5
 8014e3e:	f893 0115 	ldrb.w	r0, [r3, #277]	@ 0x115
 8014e42:	2800      	cmp	r0, #0
 8014e44:	d170      	bne.n	8014f28 <mc_homing_cycle+0x198>
            } while(++idx < N_AXIS);
 8014e46:	3501      	adds	r5, #1
 8014e48:	2d02      	cmp	r5, #2
 8014e4a:	d9f6      	bls.n	8014e3a <mc_homing_cycle+0xaa>
        hal.limits.enable(settings.limits.flags.hard_enabled, (axes_signals_t){0});
 8014e4c:	4b52      	ldr	r3, [pc, #328]	@ (8014f98 <mc_homing_cycle+0x208>)
 8014e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e50:	4a4f      	ldr	r2, [pc, #316]	@ (8014f90 <mc_homing_cycle+0x200>)
 8014e52:	f892 0124 	ldrb.w	r0, [r2, #292]	@ 0x124
 8014e56:	f04f 0100 	mov.w	r1, #0
 8014e5a:	f000 0001 	and.w	r0, r0, #1
 8014e5e:	4798      	blx	r3
    if(cycle.mask) {
 8014e60:	b2e3      	uxtb	r3, r4
 8014e62:	b193      	cbz	r3, 8014e8a <mc_homing_cycle+0xfa>
        if(!protocol_execute_realtime()) {  // Check for reset and set system abort.
 8014e64:	f002 fd08 	bl	8017878 <protocol_execute_realtime>
 8014e68:	2800      	cmp	r0, #0
 8014e6a:	d066      	beq.n	8014f3a <mc_homing_cycle+0x1aa>
        if(homed_status != Status_OK) {
 8014e6c:	2e00      	cmp	r6, #0
 8014e6e:	d16d      	bne.n	8014f4c <mc_homing_cycle+0x1bc>
        if(home_all && settings.homing.flags.manual)
 8014e70:	b92f      	cbnz	r7, 8014e7e <mc_homing_cycle+0xee>
 8014e72:	4b47      	ldr	r3, [pc, #284]	@ (8014f90 <mc_homing_cycle+0x200>)
 8014e74:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8014e78:	f013 0f10 	tst.w	r3, #16
 8014e7c:	d177      	bne.n	8014f6e <mc_homing_cycle+0x1de>
        sync_position();
 8014e7e:	f001 ffb9 	bl	8016df4 <plan_sync_position>
 8014e82:	4948      	ldr	r1, [pc, #288]	@ (8014fa4 <mc_homing_cycle+0x214>)
 8014e84:	4848      	ldr	r0, [pc, #288]	@ (8014fa8 <mc_homing_cycle+0x218>)
 8014e86:	f00c ff79 	bl	8021d7c <system_convert_array_steps_to_mpos>
    system_add_rt_report(Report_Homed);
 8014e8a:	2004      	movs	r0, #4
 8014e8c:	f00d f81a 	bl	8021ec4 <system_add_rt_report>
    homed_status = settings.limits.flags.hard_enabled &&
 8014e90:	4b3f      	ldr	r3, [pc, #252]	@ (8014f90 <mc_homing_cycle+0x200>)
 8014e92:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 8014e96:	f003 0305 	and.w	r3, r3, #5
                    : Status_OK;
 8014e9a:	2b05      	cmp	r3, #5
 8014e9c:	d10a      	bne.n	8014eb4 <mc_homing_cycle+0x124>
                     (limit_signals_merge(hal.limits.get_state()).value & sys.hard_limits.mask)
 8014e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8014f98 <mc_homing_cycle+0x208>)
 8014ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014ea2:	4798      	blx	r3
 8014ea4:	9001      	str	r0, [sp, #4]
 8014ea6:	f7fe f9ed 	bl	8013284 <limit_signals_merge>
 8014eaa:	4b3a      	ldr	r3, [pc, #232]	@ (8014f94 <mc_homing_cycle+0x204>)
 8014eac:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
                    settings.limits.flags.check_at_init &&
 8014eb0:	4203      	tst	r3, r0
 8014eb2:	d169      	bne.n	8014f88 <mc_homing_cycle+0x1f8>
        limits_set_work_envelope();
 8014eb4:	f7fe fa16 	bl	80132e4 <limits_set_work_envelope>
                    : Status_OK;
 8014eb8:	2600      	movs	r6, #0
    if(grbl.on_homing_completed)
 8014eba:	4b3c      	ldr	r3, [pc, #240]	@ (8014fac <mc_homing_cycle+0x21c>)
 8014ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014ec0:	b123      	cbz	r3, 8014ecc <mc_homing_cycle+0x13c>
        grbl.on_homing_completed(cycle, homed_status == Status_OK);
 8014ec2:	fab6 f186 	clz	r1, r6
 8014ec6:	0949      	lsrs	r1, r1, #5
 8014ec8:	4620      	mov	r0, r4
 8014eca:	4798      	blx	r3
}
 8014ecc:	4630      	mov	r0, r6
 8014ece:	b003      	add	sp, #12
 8014ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(settings.homing.flags.manual && (home_all ? sys.homing.mask : (cycle.mask & sys.homing.mask)) == 0) {
 8014ed2:	4b30      	ldr	r3, [pc, #192]	@ (8014f94 <mc_homing_cycle+0x204>)
 8014ed4:	7e9b      	ldrb	r3, [r3, #26]
 8014ed6:	421f      	tst	r7, r3
 8014ed8:	f47f af6f 	bne.w	8014dba <mc_homing_cycle+0x2a>
        if(home_all)
 8014edc:	b90f      	cbnz	r7, 8014ee2 <mc_homing_cycle+0x152>
            cycle.mask = AXES_BITMASK;
 8014ede:	f04f 0407 	mov.w	r4, #7
        sys.homed.mask |= cycle.mask;
 8014ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8014f94 <mc_homing_cycle+0x204>)
 8014ee4:	f892 3054 	ldrb.w	r3, [r2, #84]	@ 0x54
 8014ee8:	b2e1      	uxtb	r1, r4
 8014eea:	430b      	orrs	r3, r1
 8014eec:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
        limits_set_machine_positions(cycle, false);
 8014ef0:	2100      	movs	r1, #0
 8014ef2:	4620      	mov	r0, r4
 8014ef4:	f7fe fa80 	bl	80133f8 <limits_set_machine_positions>
    status_code_t homed_status = Status_OK;
 8014ef8:	2600      	movs	r6, #0
        limits_set_machine_positions(cycle, false);
 8014efa:	e7b1      	b.n	8014e60 <mc_homing_cycle+0xd0>
            mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 8014efc:	f7ff fef0 	bl	8014ce0 <mc_reset>
            system_set_exec_alarm(Alarm_HardLimit);
 8014f00:	4b25      	ldr	r3, [pc, #148]	@ (8014f98 <mc_homing_cycle+0x208>)
 8014f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f04:	2101      	movs	r1, #1
 8014f06:	482a      	ldr	r0, [pc, #168]	@ (8014fb0 <mc_homing_cycle+0x220>)
 8014f08:	4798      	blx	r3
            return Status_Unhandled;
 8014f0a:	2654      	movs	r6, #84	@ 0x54
 8014f0c:	e7de      	b.n	8014ecc <mc_homing_cycle+0x13c>
            gc_spindle_off();
 8014f0e:	f7f8 fb7b 	bl	800d608 <gc_spindle_off>
 8014f12:	e77f      	b.n	8014e14 <mc_homing_cycle+0x84>
            gc_coolant((coolant_state_t){0});
 8014f14:	f04f 0000 	mov.w	r0, #0
 8014f18:	f7f8 fb84 	bl	800d624 <gc_coolant>
 8014f1c:	e780      	b.n	8014e20 <mc_homing_cycle+0x90>
            homed_status = limits_go_home(cycle);
 8014f1e:	4620      	mov	r0, r4
 8014f20:	f7fe fd4a 	bl	80139b8 <limits_go_home>
 8014f24:	4606      	mov	r6, r0
 8014f26:	e791      	b.n	8014e4c <mc_homing_cycle+0xbc>
                    cycle.mask = settings.homing.cycle[idx].mask;
 8014f28:	4604      	mov	r4, r0
                    if((homed_status = limits_go_home(cycle)) != Status_OK)
 8014f2a:	f7fe fd45 	bl	80139b8 <limits_go_home>
 8014f2e:	4606      	mov	r6, r0
 8014f30:	2800      	cmp	r0, #0
 8014f32:	d088      	beq.n	8014e46 <mc_homing_cycle+0xb6>
 8014f34:	e78a      	b.n	8014e4c <mc_homing_cycle+0xbc>
            return Status_HomingDisabled;
 8014f36:	2605      	movs	r6, #5
 8014f38:	e7c8      	b.n	8014ecc <mc_homing_cycle+0x13c>
            if(grbl.on_homing_completed)
 8014f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8014fac <mc_homing_cycle+0x21c>)
 8014f3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014f40:	b113      	cbz	r3, 8014f48 <mc_homing_cycle+0x1b8>
                grbl.on_homing_completed(cycle, false);
 8014f42:	2100      	movs	r1, #0
 8014f44:	4620      	mov	r0, r4
 8014f46:	4798      	blx	r3
            return Status_Unhandled;        // Did not complete. Alarm state set by mc_alarm.
 8014f48:	2654      	movs	r6, #84	@ 0x54
 8014f4a:	e7bf      	b.n	8014ecc <mc_homing_cycle+0x13c>
            if(state_get() == STATE_HOMING)
 8014f4c:	f009 fffc 	bl	801ef48 <state_get>
 8014f50:	2804      	cmp	r0, #4
 8014f52:	d008      	beq.n	8014f66 <mc_homing_cycle+0x1d6>
            if(grbl.on_homing_completed)
 8014f54:	4b15      	ldr	r3, [pc, #84]	@ (8014fac <mc_homing_cycle+0x21c>)
 8014f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d0b6      	beq.n	8014ecc <mc_homing_cycle+0x13c>
                grbl.on_homing_completed(cycle, false);
 8014f5e:	2100      	movs	r1, #0
 8014f60:	4620      	mov	r0, r4
 8014f62:	4798      	blx	r3
            return homed_status;
 8014f64:	e7b2      	b.n	8014ecc <mc_homing_cycle+0x13c>
                state_set(STATE_IDLE);
 8014f66:	2000      	movs	r0, #0
 8014f68:	f009 fff4 	bl	801ef54 <state_set>
 8014f6c:	e7f2      	b.n	8014f54 <mc_homing_cycle+0x1c4>
            cycle.mask = AXES_BITMASK & ~sys.homing.mask;
 8014f6e:	4b09      	ldr	r3, [pc, #36]	@ (8014f94 <mc_homing_cycle+0x204>)
 8014f70:	7e98      	ldrb	r0, [r3, #26]
 8014f72:	43c0      	mvns	r0, r0
 8014f74:	f000 0007 	and.w	r0, r0, #7
 8014f78:	4604      	mov	r4, r0
            sys.homed.mask = AXES_BITMASK;
 8014f7a:	2207      	movs	r2, #7
 8014f7c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            limits_set_machine_positions(cycle, false);
 8014f80:	2100      	movs	r1, #0
 8014f82:	f7fe fa39 	bl	80133f8 <limits_set_machine_positions>
 8014f86:	e77a      	b.n	8014e7e <mc_homing_cycle+0xee>
                    : Status_OK;
 8014f88:	262d      	movs	r6, #45	@ 0x2d
 8014f8a:	e796      	b.n	8014eba <mc_homing_cycle+0x12a>
 8014f8c:	20001df2 	.word	0x20001df2
 8014f90:	200024a8 	.word	0x200024a8
 8014f94:	20001d70 	.word	0x20001d70
 8014f98:	20001a90 	.word	0x20001a90
 8014f9c:	20001db8 	.word	0x20001db8
 8014fa0:	3dcccccd 	.word	0x3dcccccd
 8014fa4:	20001df8 	.word	0x20001df8
 8014fa8:	20001830 	.word	0x20001830
 8014fac:	20001c78 	.word	0x20001c78
 8014fb0:	20001dbc 	.word	0x20001dbc

08014fb4 <probe_result>:
    return axis <= N_AXIS ? factors[axis - 1] : 0.0f;
}

static float probe_result (ngc_param_id_t id)
{
    return sys.flags.probe_succeeded ? 1.0f : 0.0f;
 8014fb4:	4b05      	ldr	r3, [pc, #20]	@ (8014fcc <probe_result+0x18>)
 8014fb6:	7d9b      	ldrb	r3, [r3, #22]
 8014fb8:	f013 0f02 	tst.w	r3, #2
 8014fbc:	d002      	beq.n	8014fc4 <probe_result+0x10>
 8014fbe:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014fc2:	4770      	bx	lr
 8014fc4:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8014fd0 <probe_result+0x1c>
}
 8014fc8:	4770      	bx	lr
 8014fca:	bf00      	nop
 8014fcc:	20001d70 	.word	0x20001d70
 8014fd0:	00000000 	.word	0x00000000

08014fd4 <m66_result>:
    return axis <= N_AXIS ? sys.home_position[axis - 1] : 0.0f;
}
*/
static float m66_result (ngc_param_id_t id)
{
    return (float)sys.var5399;
 8014fd4:	4b02      	ldr	r3, [pc, #8]	@ (8014fe0 <m66_result+0xc>)
 8014fd6:	ed93 0a14 	vldr	s0, [r3, #80]	@ 0x50
}
 8014fda:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014fde:	4770      	bx	lr
 8014fe0:	20001d70 	.word	0x20001d70

08014fe4 <tool_number>:

static float tool_number (ngc_param_id_t id)
{
    return (float)gc_state.tool->tool_id;
 8014fe4:	4b03      	ldr	r3, [pc, #12]	@ (8014ff4 <tool_number+0x10>)
 8014fe6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8014fea:	ed93 0a04 	vldr	s0, [r3, #16]
}
 8014fee:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8014ff2:	4770      	bx	lr
 8014ff4:	200017c8 	.word	0x200017c8

08014ff8 <tool_offset>:

static float tool_offset (ngc_param_id_t id)
{
    uint_fast8_t axis = id % 10;
 8014ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8015024 <tool_offset+0x2c>)
 8014ffa:	fba3 2300 	umull	r2, r3, r3, r0
 8014ffe:	08db      	lsrs	r3, r3, #3
 8015000:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015004:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8015008:	b280      	uxth	r0, r0

    return axis <= N_AXIS ? gc_state.tool_length_offset[axis] : 0.0f;
 801500a:	2803      	cmp	r0, #3
 801500c:	d806      	bhi.n	801501c <tool_offset+0x24>
 801500e:	3030      	adds	r0, #48	@ 0x30
 8015010:	4b05      	ldr	r3, [pc, #20]	@ (8015028 <tool_offset+0x30>)
 8015012:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8015016:	ed93 0a01 	vldr	s0, [r3, #4]
 801501a:	4770      	bx	lr
 801501c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 801502c <tool_offset+0x34>
}
 8015020:	4770      	bx	lr
 8015022:	bf00      	nop
 8015024:	cccccccd 	.word	0xcccccccd
 8015028:	200017c8 	.word	0x200017c8
 801502c:	00000000 	.word	0x00000000

08015030 <coord_system>:
    return value;
}

static float coord_system (ngc_param_id_t id)
{
    return (float)gc_state.modal.coord_system.id + 1;
 8015030:	4b05      	ldr	r3, [pc, #20]	@ (8015048 <coord_system+0x18>)
 8015032:	7d1b      	ldrb	r3, [r3, #20]
 8015034:	ee00 3a10 	vmov	s0, r3
 8015038:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 801503c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015040:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015044:	4770      	bx	lr
 8015046:	bf00      	nop
 8015048:	200017c8 	.word	0x200017c8

0801504c <g92_offset_applied>:
    return value;
}

static float g92_offset_applied (ngc_param_id_t id)
{
    return (float)gc_state.g92_coord_offset_applied;
 801504c:	4b03      	ldr	r3, [pc, #12]	@ (801505c <g92_offset_applied+0x10>)
 801504e:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8015052:	ee00 3a10 	vmov	s0, r3
}
 8015056:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801505a:	4770      	bx	lr
 801505c:	200017c8 	.word	0x200017c8

08015060 <g92_offset>:

static float g92_offset (ngc_param_id_t id)
{
    uint_fast8_t axis = id % 10;
 8015060:	4b0a      	ldr	r3, [pc, #40]	@ (801508c <g92_offset+0x2c>)
 8015062:	fba3 2300 	umull	r2, r3, r3, r0
 8015066:	08db      	lsrs	r3, r3, #3
 8015068:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801506c:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8015070:	b280      	uxth	r0, r0

    return axis <= N_AXIS ? gc_state.g92_coord_offset [axis - 1] : 0.0f;
 8015072:	2803      	cmp	r0, #3
 8015074:	d806      	bhi.n	8015084 <g92_offset+0x24>
 8015076:	302d      	adds	r0, #45	@ 0x2d
 8015078:	4b05      	ldr	r3, [pc, #20]	@ (8015090 <g92_offset+0x30>)
 801507a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801507e:	ed93 0a00 	vldr	s0, [r3]
 8015082:	4770      	bx	lr
 8015084:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8015094 <g92_offset+0x34>
}
 8015088:	4770      	bx	lr
 801508a:	bf00      	nop
 801508c:	cccccccd 	.word	0xcccccccd
 8015090:	200017c8 	.word	0x200017c8
 8015094:	00000000 	.word	0x00000000

08015098 <debug_output>:
    return value;
}

static float debug_output (ngc_param_id_t id)
{
    return (float)settings.flags.ngc_debug_out;
 8015098:	4b04      	ldr	r3, [pc, #16]	@ (80150ac <debug_output+0x14>)
 801509a:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 801509e:	f003 0301 	and.w	r3, r3, #1
 80150a2:	ee00 3a10 	vmov	s0, r3
}
 80150a6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80150aa:	4770      	bx	lr
 80150ac:	200024a8 	.word	0x200024a8

080150b0 <ngc_name_tolower>:
static char *ngc_name_tolower (char *s)
{
    static char name[NGC_MAX_PARAM_LENGTH + 1];

    uint_fast8_t len = 0;
	char c, *s1 = s, *s2 = name;
 80150b0:	4a0d      	ldr	r2, [pc, #52]	@ (80150e8 <ngc_name_tolower+0x38>)
    uint_fast8_t len = 0;
 80150b2:	2100      	movs	r1, #0

    while((c = *s1++) && len < NGC_MAX_PARAM_LENGTH) {
 80150b4:	e002      	b.n	80150bc <ngc_name_tolower+0xc>
        if(c > ' ') {
            *s2++ = LCAPS(c);
 80150b6:	f802 3b01 	strb.w	r3, [r2], #1
            len++;
 80150ba:	3101      	adds	r1, #1
    while((c = *s1++) && len < NGC_MAX_PARAM_LENGTH) {
 80150bc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80150c0:	b16b      	cbz	r3, 80150de <ngc_name_tolower+0x2e>
 80150c2:	2913      	cmp	r1, #19
 80150c4:	d80b      	bhi.n	80150de <ngc_name_tolower+0x2e>
        if(c > ' ') {
 80150c6:	2b20      	cmp	r3, #32
 80150c8:	d9f8      	bls.n	80150bc <ngc_name_tolower+0xc>
            *s2++ = LCAPS(c);
 80150ca:	f1a3 0c41 	sub.w	ip, r3, #65	@ 0x41
 80150ce:	fa5f fc8c 	uxtb.w	ip, ip
 80150d2:	f1bc 0f19 	cmp.w	ip, #25
 80150d6:	d8ee      	bhi.n	80150b6 <ngc_name_tolower+0x6>
 80150d8:	f043 0320 	orr.w	r3, r3, #32
 80150dc:	e7eb      	b.n	80150b6 <ngc_name_tolower+0x6>
        }
    }
    *s2 = '\0';
 80150de:	2300      	movs	r3, #0
 80150e0:	7013      	strb	r3, [r2, #0]

	return name;
}
 80150e2:	4801      	ldr	r0, [pc, #4]	@ (80150e8 <ngc_name_tolower+0x38>)
 80150e4:	4770      	bx	lr
 80150e6:	bf00      	nop
 80150e8:	20001ef8 	.word	0x20001ef8

080150ec <_relative_pos>:
    if(axis < N_AXIS) {
 80150ec:	2802      	cmp	r0, #2
 80150ee:	d902      	bls.n	80150f6 <_relative_pos+0xa>
        value = 0.0f;
 80150f0:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8015144 <_relative_pos+0x58>
}
 80150f4:	4770      	bx	lr
{
 80150f6:	b510      	push	{r4, lr}
 80150f8:	ed2d 8b02 	vpush	{d8}
        value = sys.position[axis] / settings.axis[axis].steps_per_mm - gc_get_offset(axis, false);
 80150fc:	f100 0222 	add.w	r2, r0, #34	@ 0x22
 8015100:	4b11      	ldr	r3, [pc, #68]	@ (8015148 <_relative_pos+0x5c>)
 8015102:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015106:	edd3 7a00 	vldr	s15, [r3]
 801510a:	4c10      	ldr	r4, [pc, #64]	@ (801514c <_relative_pos+0x60>)
 801510c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8015110:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015114:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8015118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801511c:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8015120:	2100      	movs	r1, #0
 8015122:	f7f8 f913 	bl	800d34c <gc_get_offset>
 8015126:	ee38 0a40 	vsub.f32	s0, s16, s0
        if(settings.flags.report_inches)
 801512a:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 801512e:	f013 0f01 	tst.w	r3, #1
 8015132:	d003      	beq.n	801513c <_relative_pos+0x50>
            value *= 25.4f;
 8015134:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8015150 <_relative_pos+0x64>
 8015138:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 801513c:	ecbd 8b02 	vpop	{d8}
 8015140:	bd10      	pop	{r4, pc}
 8015142:	bf00      	nop
 8015144:	00000000 	.word	0x00000000
 8015148:	20001d70 	.word	0x20001d70
 801514c:	200024a8 	.word	0x200024a8
 8015150:	41cb3333 	.word	0x41cb3333

08015154 <work_position>:
{
 8015154:	b508      	push	{r3, lr}
    uint_fast8_t axis = id % 10;
 8015156:	4b08      	ldr	r3, [pc, #32]	@ (8015178 <work_position+0x24>)
 8015158:	fba3 2300 	umull	r2, r3, r3, r0
 801515c:	08db      	lsrs	r3, r3, #3
 801515e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015162:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8015166:	b280      	uxth	r0, r0
    if(axis < N_AXIS)
 8015168:	2802      	cmp	r0, #2
 801516a:	d902      	bls.n	8015172 <work_position+0x1e>
    float value = 0.0f;
 801516c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 801517c <work_position+0x28>
}
 8015170:	bd08      	pop	{r3, pc}
        value = _relative_pos(axis);
 8015172:	f7ff ffbb 	bl	80150ec <_relative_pos>
 8015176:	e7fb      	b.n	8015170 <work_position+0x1c>
 8015178:	cccccccd 	.word	0xcccccccd
 801517c:	00000000 	.word	0x00000000

08015180 <coord_system_offset>:
{
 8015180:	b510      	push	{r4, lr}
 8015182:	b084      	sub	sp, #16
    uint_fast8_t axis = id % 10;
 8015184:	4b15      	ldr	r3, [pc, #84]	@ (80151dc <coord_system_offset+0x5c>)
 8015186:	fba3 2300 	umull	r2, r3, r3, r0
 801518a:	08db      	lsrs	r3, r3, #3
 801518c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015190:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 8015194:	b29b      	uxth	r3, r3
    id = (id - 5220 - axis - (id == 0 ? 10 : 0)) / 20;
 8015196:	1ac2      	subs	r2, r0, r3
 8015198:	b978      	cbnz	r0, 80151ba <coord_system_offset+0x3a>
 801519a:	210a      	movs	r1, #10
 801519c:	1a50      	subs	r0, r2, r1
 801519e:	f5a0 50a3 	sub.w	r0, r0, #5216	@ 0x1460
 80151a2:	3804      	subs	r0, #4
 80151a4:	4a0d      	ldr	r2, [pc, #52]	@ (80151dc <coord_system_offset+0x5c>)
 80151a6:	fba2 2000 	umull	r2, r0, r2, r0
 80151aa:	0900      	lsrs	r0, r0, #4
    if (axis > 0 && axis <= N_AXIS && settings_read_coord_data((coord_system_id_t)id, &data.xyz))
 80151ac:	1e5c      	subs	r4, r3, #1
 80151ae:	2c02      	cmp	r4, #2
 80151b0:	d905      	bls.n	80151be <coord_system_offset+0x3e>
    float value = 0.0f;
 80151b2:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80151e0 <coord_system_offset+0x60>
}
 80151b6:	b004      	add	sp, #16
 80151b8:	bd10      	pop	{r4, pc}
    id = (id - 5220 - axis - (id == 0 ? 10 : 0)) / 20;
 80151ba:	2100      	movs	r1, #0
 80151bc:	e7ee      	b.n	801519c <coord_system_offset+0x1c>
    if (axis > 0 && axis <= N_AXIS && settings_read_coord_data((coord_system_id_t)id, &data.xyz))
 80151be:	4669      	mov	r1, sp
 80151c0:	b2c0      	uxtb	r0, r0
 80151c2:	f008 fa67 	bl	801d694 <settings_read_coord_data>
 80151c6:	b128      	cbz	r0, 80151d4 <coord_system_offset+0x54>
        value = data.xyz[axis - 1];
 80151c8:	ab04      	add	r3, sp, #16
 80151ca:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80151ce:	ed13 0a04 	vldr	s0, [r3, #-16]
 80151d2:	e7f0      	b.n	80151b6 <coord_system_offset+0x36>
    float value = 0.0f;
 80151d4:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80151e0 <coord_system_offset+0x60>
    return value;
 80151d8:	e7ed      	b.n	80151b6 <coord_system_offset+0x36>
 80151da:	bf00      	nop
 80151dc:	cccccccd 	.word	0xcccccccd
 80151e0:	00000000 	.word	0x00000000

080151e4 <g30_home>:
{
 80151e4:	b510      	push	{r4, lr}
 80151e6:	b084      	sub	sp, #16
    uint_fast8_t axis = id % 10;
 80151e8:	4b0e      	ldr	r3, [pc, #56]	@ (8015224 <g30_home+0x40>)
 80151ea:	fba3 2300 	umull	r2, r3, r3, r0
 80151ee:	08db      	lsrs	r3, r3, #3
 80151f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80151f4:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 80151f8:	b284      	uxth	r4, r0
    if (axis <= N_AXIS && settings_read_coord_data(CoordinateSystem_G30, &data.xyz))
 80151fa:	2c03      	cmp	r4, #3
 80151fc:	d903      	bls.n	8015206 <g30_home+0x22>
    float value = 0.0f;
 80151fe:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8015228 <g30_home+0x44>
}
 8015202:	b004      	add	sp, #16
 8015204:	bd10      	pop	{r4, pc}
    if (axis <= N_AXIS && settings_read_coord_data(CoordinateSystem_G30, &data.xyz))
 8015206:	4669      	mov	r1, sp
 8015208:	200a      	movs	r0, #10
 801520a:	f008 fa43 	bl	801d694 <settings_read_coord_data>
 801520e:	b130      	cbz	r0, 801521e <g30_home+0x3a>
        value = data.xyz[axis - 1];
 8015210:	3c01      	subs	r4, #1
 8015212:	ab04      	add	r3, sp, #16
 8015214:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015218:	ed14 0a04 	vldr	s0, [r4, #-16]
 801521c:	e7f1      	b.n	8015202 <g30_home+0x1e>
    float value = 0.0f;
 801521e:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8015228 <g30_home+0x44>
    return value;
 8015222:	e7ee      	b.n	8015202 <g30_home+0x1e>
 8015224:	cccccccd 	.word	0xcccccccd
 8015228:	00000000 	.word	0x00000000

0801522c <g28_home>:
{
 801522c:	b510      	push	{r4, lr}
 801522e:	b084      	sub	sp, #16
    uint_fast8_t axis = id % 10;
 8015230:	4b0e      	ldr	r3, [pc, #56]	@ (801526c <g28_home+0x40>)
 8015232:	fba3 2300 	umull	r2, r3, r3, r0
 8015236:	08db      	lsrs	r3, r3, #3
 8015238:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801523c:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8015240:	b284      	uxth	r4, r0
    if(axis <= N_AXIS && settings_read_coord_data(CoordinateSystem_G28, &data.xyz))
 8015242:	2c03      	cmp	r4, #3
 8015244:	d903      	bls.n	801524e <g28_home+0x22>
    float value = 0.0f;
 8015246:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8015270 <g28_home+0x44>
}
 801524a:	b004      	add	sp, #16
 801524c:	bd10      	pop	{r4, pc}
    if(axis <= N_AXIS && settings_read_coord_data(CoordinateSystem_G28, &data.xyz))
 801524e:	4669      	mov	r1, sp
 8015250:	2009      	movs	r0, #9
 8015252:	f008 fa1f 	bl	801d694 <settings_read_coord_data>
 8015256:	b130      	cbz	r0, 8015266 <g28_home+0x3a>
        value = data.xyz[axis - 1];
 8015258:	3c01      	subs	r4, #1
 801525a:	ab04      	add	r3, sp, #16
 801525c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015260:	ed14 0a04 	vldr	s0, [r4, #-16]
 8015264:	e7f1      	b.n	801524a <g28_home+0x1e>
    float value = 0.0f;
 8015266:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8015270 <g28_home+0x44>
    return value;
 801526a:	e7ee      	b.n	801524a <g28_home+0x1e>
 801526c:	cccccccd 	.word	0xcccccccd
 8015270:	00000000 	.word	0x00000000

08015274 <probe_coord>:
{
 8015274:	b510      	push	{r4, lr}
 8015276:	b084      	sub	sp, #16
    uint_fast8_t axis = (id % 10) - 1;
 8015278:	4b27      	ldr	r3, [pc, #156]	@ (8015318 <probe_coord+0xa4>)
 801527a:	fba3 2300 	umull	r2, r3, r3, r0
 801527e:	08db      	lsrs	r3, r3, #3
 8015280:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015284:	eba0 0443 	sub.w	r4, r0, r3, lsl #1
 8015288:	b2a4      	uxth	r4, r4
 801528a:	3c01      	subs	r4, #1
    if(axis < N_AXIS && (sys.probe_coordsys_id == gc_state.modal.coord_system.id || settings_read_coord_data(sys.probe_coordsys_id, &data.xyz))) {
 801528c:	2c02      	cmp	r4, #2
 801528e:	d83f      	bhi.n	8015310 <probe_coord+0x9c>
 8015290:	4b22      	ldr	r3, [pc, #136]	@ (801531c <probe_coord+0xa8>)
 8015292:	f893 0036 	ldrb.w	r0, [r3, #54]	@ 0x36
 8015296:	4b22      	ldr	r3, [pc, #136]	@ (8015320 <probe_coord+0xac>)
 8015298:	7d1b      	ldrb	r3, [r3, #20]
 801529a:	4298      	cmp	r0, r3
 801529c:	d129      	bne.n	80152f2 <probe_coord+0x7e>
        value = sys.probe_position[axis] / settings.axis[axis].steps_per_mm -
 801529e:	491f      	ldr	r1, [pc, #124]	@ (801531c <probe_coord+0xa8>)
 80152a0:	f104 030e 	add.w	r3, r4, #14
 80152a4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80152a8:	edd3 7a00 	vldr	s15, [r3]
 80152ac:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80152b0:	4b1c      	ldr	r3, [pc, #112]	@ (8015324 <probe_coord+0xb0>)
 80152b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80152b6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80152ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80152be:	ee87 0a87 	vdiv.f32	s0, s15, s14
                 (sys.probe_coordsys_id == gc_state.modal.coord_system.id ? gc_state.modal.coord_system.xyz[axis] : data.xyz[axis]);
 80152c2:	f891 2036 	ldrb.w	r2, [r1, #54]	@ 0x36
 80152c6:	4b16      	ldr	r3, [pc, #88]	@ (8015320 <probe_coord+0xac>)
 80152c8:	7d1b      	ldrb	r3, [r3, #20]
 80152ca:	429a      	cmp	r2, r3
 80152cc:	d019      	beq.n	8015302 <probe_coord+0x8e>
 80152ce:	ab04      	add	r3, sp, #16
 80152d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80152d4:	ed54 7a04 	vldr	s15, [r4, #-16]
        value = sys.probe_position[axis] / settings.axis[axis].steps_per_mm -
 80152d8:	ee30 0a67 	vsub.f32	s0, s0, s15
        if(settings.flags.report_inches)
 80152dc:	4b11      	ldr	r3, [pc, #68]	@ (8015324 <probe_coord+0xb0>)
 80152de:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 80152e2:	f013 0f01 	tst.w	r3, #1
 80152e6:	d015      	beq.n	8015314 <probe_coord+0xa0>
            value *= 25.4f;
 80152e8:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8015328 <probe_coord+0xb4>
 80152ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 80152f0:	e010      	b.n	8015314 <probe_coord+0xa0>
    if(axis < N_AXIS && (sys.probe_coordsys_id == gc_state.modal.coord_system.id || settings_read_coord_data(sys.probe_coordsys_id, &data.xyz))) {
 80152f2:	4669      	mov	r1, sp
 80152f4:	f008 f9ce 	bl	801d694 <settings_read_coord_data>
 80152f8:	2800      	cmp	r0, #0
 80152fa:	d1d0      	bne.n	801529e <probe_coord+0x2a>
    float value = 0.0f;
 80152fc:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 801532c <probe_coord+0xb8>
    return value;
 8015300:	e008      	b.n	8015314 <probe_coord+0xa0>
                 (sys.probe_coordsys_id == gc_state.modal.coord_system.id ? gc_state.modal.coord_system.xyz[axis] : data.xyz[axis]);
 8015302:	3402      	adds	r4, #2
 8015304:	4b06      	ldr	r3, [pc, #24]	@ (8015320 <probe_coord+0xac>)
 8015306:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801530a:	edd3 7a00 	vldr	s15, [r3]
 801530e:	e7e3      	b.n	80152d8 <probe_coord+0x64>
    float value = 0.0f;
 8015310:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 801532c <probe_coord+0xb8>
}
 8015314:	b004      	add	sp, #16
 8015316:	bd10      	pop	{r4, pc}
 8015318:	cccccccd 	.word	0xcccccccd
 801531c:	20001d70 	.word	0x20001d70
 8015320:	200017c8 	.word	0x200017c8
 8015324:	200024a8 	.word	0x200024a8
 8015328:	41cb3333 	.word	0x41cb3333
 801532c:	00000000 	.word	0x00000000

08015330 <scaling_factors>:
{
 8015330:	b510      	push	{r4, lr}
 8015332:	4604      	mov	r4, r0
    float *factors = gc_get_scaling();
 8015334:	f7f7 ffb6 	bl	800d2a4 <gc_get_scaling>
    uint_fast8_t axis = id % 10;
 8015338:	4b0a      	ldr	r3, [pc, #40]	@ (8015364 <scaling_factors+0x34>)
 801533a:	fba3 2304 	umull	r2, r3, r3, r4
 801533e:	08db      	lsrs	r3, r3, #3
 8015340:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015344:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
 8015348:	b2a4      	uxth	r4, r4
    return axis <= N_AXIS ? factors[axis - 1] : 0.0f;
 801534a:	2c03      	cmp	r4, #3
 801534c:	d807      	bhi.n	801535e <scaling_factors+0x2e>
 801534e:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8015352:	3c01      	subs	r4, #1
 8015354:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8015358:	ed90 0a00 	vldr	s0, [r0]
}
 801535c:	bd10      	pop	{r4, pc}
    return axis <= N_AXIS ? factors[axis - 1] : 0.0f;
 801535e:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8015368 <scaling_factors+0x38>
 8015362:	e7fb      	b.n	801535c <scaling_factors+0x2c>
 8015364:	cccccccd 	.word	0xcccccccd
 8015368:	00000000 	.word	0x00000000

0801536c <ngc_param_get>:
{
 801536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801536e:	460f      	mov	r7, r1
    bool found = id > 0 && id < ngc_ro_params[0].id_min;
 8015370:	4605      	mov	r5, r0
 8015372:	b128      	cbz	r0, 8015380 <ngc_param_get+0x14>
 8015374:	f241 33c4 	movw	r3, #5060	@ 0x13c4
 8015378:	4298      	cmp	r0, r3
 801537a:	d90d      	bls.n	8015398 <ngc_param_get+0x2c>
 801537c:	2300      	movs	r3, #0
 801537e:	e000      	b.n	8015382 <ngc_param_get+0x16>
 8015380:	2300      	movs	r3, #0
    *value = 0.0f;
 8015382:	2200      	movs	r2, #0
 8015384:	603a      	str	r2, [r7, #0]
    if(found) {
 8015386:	461e      	mov	r6, r3
 8015388:	b1c3      	cbz	r3, 80153bc <ngc_param_get+0x50>
        void *context = id > (ngc_param_id_t)30 ? NULL : call_context;
 801538a:	2d1e      	cmp	r5, #30
 801538c:	d806      	bhi.n	801539c <ngc_param_get+0x30>
 801538e:	4b1b      	ldr	r3, [pc, #108]	@ (80153fc <ngc_param_get+0x90>)
 8015390:	6819      	ldr	r1, [r3, #0]
        ngc_rw_param_t *rw_param = rw_params;
 8015392:	4b1b      	ldr	r3, [pc, #108]	@ (8015400 <ngc_param_get+0x94>)
 8015394:	681b      	ldr	r3, [r3, #0]
        while(rw_param) {
 8015396:	e004      	b.n	80153a2 <ngc_param_get+0x36>
    bool found = id > 0 && id < ngc_ro_params[0].id_min;
 8015398:	2301      	movs	r3, #1
 801539a:	e7f2      	b.n	8015382 <ngc_param_get+0x16>
        void *context = id > (ngc_param_id_t)30 ? NULL : call_context;
 801539c:	2100      	movs	r1, #0
 801539e:	e7f8      	b.n	8015392 <ngc_param_get+0x26>
                rw_param = rw_param->next;
 80153a0:	68db      	ldr	r3, [r3, #12]
        while(rw_param) {
 80153a2:	b14b      	cbz	r3, 80153b8 <ngc_param_get+0x4c>
            if(rw_param->context == context && rw_param->id == id) {
 80153a4:	681a      	ldr	r2, [r3, #0]
 80153a6:	428a      	cmp	r2, r1
 80153a8:	d1fa      	bne.n	80153a0 <ngc_param_get+0x34>
 80153aa:	889a      	ldrh	r2, [r3, #4]
 80153ac:	42aa      	cmp	r2, r5
 80153ae:	d1f7      	bne.n	80153a0 <ngc_param_get+0x34>
                *value = rw_param->value;
 80153b0:	689b      	ldr	r3, [r3, #8]
 80153b2:	603b      	str	r3, [r7, #0]
    bool found = id > 0 && id < ngc_ro_params[0].id_min;
 80153b4:	4630      	mov	r0, r6
 80153b6:	e000      	b.n	80153ba <ngc_param_get+0x4e>
 80153b8:	4630      	mov	r0, r6
}
 80153ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint_fast8_t idx = sizeof(ngc_ro_params) / sizeof(ngc_ro_param_t);
 80153bc:	2416      	movs	r4, #22
 80153be:	e012      	b.n	80153e6 <ngc_param_get+0x7a>
        if((found = id >= ngc_ro_params[idx].id_min && id <= ngc_ro_params[idx].id_max))
 80153c0:	4b10      	ldr	r3, [pc, #64]	@ (8015404 <ngc_param_get+0x98>)
 80153c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80153c6:	885b      	ldrh	r3, [r3, #2]
 80153c8:	42ab      	cmp	r3, r5
 80153ca:	d314      	bcc.n	80153f6 <ngc_param_get+0x8a>
            *value = ngc_ro_params[idx].get(id);
 80153cc:	4b0d      	ldr	r3, [pc, #52]	@ (8015404 <ngc_param_get+0x98>)
 80153ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80153d2:	685b      	ldr	r3, [r3, #4]
 80153d4:	4628      	mov	r0, r5
 80153d6:	4798      	blx	r3
 80153d8:	ed87 0a00 	vstr	s0, [r7]
        if((found = id >= ngc_ro_params[idx].id_min && id <= ngc_ro_params[idx].id_max))
 80153dc:	2001      	movs	r0, #1
    } while(idx && !found);
 80153de:	2c00      	cmp	r4, #0
 80153e0:	d0eb      	beq.n	80153ba <ngc_param_get+0x4e>
 80153e2:	2800      	cmp	r0, #0
 80153e4:	d1e9      	bne.n	80153ba <ngc_param_get+0x4e>
        idx--;
 80153e6:	3c01      	subs	r4, #1
        if((found = id >= ngc_ro_params[idx].id_min && id <= ngc_ro_params[idx].id_max))
 80153e8:	4b06      	ldr	r3, [pc, #24]	@ (8015404 <ngc_param_get+0x98>)
 80153ea:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
 80153ee:	42ab      	cmp	r3, r5
 80153f0:	d9e6      	bls.n	80153c0 <ngc_param_get+0x54>
 80153f2:	4630      	mov	r0, r6
 80153f4:	e7f3      	b.n	80153de <ngc_param_get+0x72>
 80153f6:	4630      	mov	r0, r6
 80153f8:	e7f1      	b.n	80153de <ngc_param_get+0x72>
 80153fa:	bf00      	nop
 80153fc:	20001f94 	.word	0x20001f94
 8015400:	20001f14 	.word	0x20001f14
 8015404:	0802bd80 	.word	0x0802bd80

08015408 <ngc_named_param_set>:

    return ok;
}

bool ngc_named_param_set (char *name, float value)
{
 8015408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801540c:	ee10 9a10 	vmov	r9, s0
    bool ok = false;
    uint_fast8_t idx = sizeof(ngc_named_ro_param) / sizeof(ngc_named_ro_param_t);

    name = ngc_name_tolower(name);
 8015410:	f7ff fe4e 	bl	80150b0 <ngc_name_tolower>
 8015414:	4605      	mov	r5, r0

    // Check if name is supplied, return false if not.
    if((*name == '_' ? *(name + 1) : *name) == '\0')
 8015416:	7807      	ldrb	r7, [r0, #0]
 8015418:	2f5f      	cmp	r7, #95	@ 0x5f
 801541a:	d018      	beq.n	801544e <ngc_named_param_set+0x46>
 801541c:	fab7 f687 	clz	r6, r7
 8015420:	0976      	lsrs	r6, r6, #5
 8015422:	2e00      	cmp	r6, #0
 8015424:	d153      	bne.n	80154ce <ngc_named_param_set+0xc6>
        return false;

    // Check if it is a (read only) predefined parameter.
    if(*name == '_') do {
 8015426:	2f5f      	cmp	r7, #95	@ 0x5f
 8015428:	d016      	beq.n	8015458 <ngc_named_param_set+0x50>
        idx--;
        ok = !strcmp(name, ngc_named_ro_param[idx].name);
    } while(idx && !ok);

    // If not predefined attempt to set it.
    if(!ok && (ok = strlen(name) < NGC_MAX_PARAM_LENGTH)) {
 801542a:	4628      	mov	r0, r5
 801542c:	f7f2 fe68 	bl	8008100 <strlen>
 8015430:	2813      	cmp	r0, #19
 8015432:	bf94      	ite	ls
 8015434:	2001      	movls	r0, #1
 8015436:	2000      	movhi	r0, #0
 8015438:	d84a      	bhi.n	80154d0 <ngc_named_param_set+0xc8>

        void *context = *name == '_' ? NULL : call_context;
 801543a:	2f5f      	cmp	r7, #95	@ 0x5f
 801543c:	d01f      	beq.n	801547e <ngc_named_param_set+0x76>
 801543e:	4b26      	ldr	r3, [pc, #152]	@ (80154d8 <ngc_named_param_set+0xd0>)
 8015440:	681f      	ldr	r7, [r3, #0]
        ngc_named_rw_param_t *rw_param = rw_global_params, *rw_param_last = rw_global_params;
 8015442:	4b26      	ldr	r3, [pc, #152]	@ (80154dc <ngc_named_param_set+0xd4>)
 8015444:	f8d3 a000 	ldr.w	sl, [r3]
 8015448:	46d0      	mov	r8, sl
 801544a:	4654      	mov	r4, sl

         while(rw_param) {
 801544c:	e01b      	b.n	8015486 <ngc_named_param_set+0x7e>
    if((*name == '_' ? *(name + 1) : *name) == '\0')
 801544e:	7846      	ldrb	r6, [r0, #1]
 8015450:	fab6 f686 	clz	r6, r6
 8015454:	0976      	lsrs	r6, r6, #5
 8015456:	e7e4      	b.n	8015422 <ngc_named_param_set+0x1a>
    uint_fast8_t idx = sizeof(ngc_named_ro_param) / sizeof(ngc_named_ro_param_t);
 8015458:	242e      	movs	r4, #46	@ 0x2e
        idx--;
 801545a:	3c01      	subs	r4, #1
        ok = !strcmp(name, ngc_named_ro_param[idx].name);
 801545c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8015460:	4b1f      	ldr	r3, [pc, #124]	@ (80154e0 <ngc_named_param_set+0xd8>)
 8015462:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015466:	4628      	mov	r0, r5
 8015468:	f7f2 fdea 	bl	8008040 <strcmp>
 801546c:	4603      	mov	r3, r0
 801546e:	fab0 f080 	clz	r0, r0
 8015472:	0940      	lsrs	r0, r0, #5
    } while(idx && !ok);
 8015474:	b10c      	cbz	r4, 801547a <ngc_named_param_set+0x72>
 8015476:	2b00      	cmp	r3, #0
 8015478:	d1ef      	bne.n	801545a <ngc_named_param_set+0x52>
    if(!ok && (ok = strlen(name) < NGC_MAX_PARAM_LENGTH)) {
 801547a:	bb48      	cbnz	r0, 80154d0 <ngc_named_param_set+0xc8>
 801547c:	e7d5      	b.n	801542a <ngc_named_param_set+0x22>
        void *context = *name == '_' ? NULL : call_context;
 801547e:	2700      	movs	r7, #0
 8015480:	e7df      	b.n	8015442 <ngc_named_param_set+0x3a>
             if(rw_param->context == context && !strcmp(rw_param->name, name)) {
                 break;
             } else {
                 rw_param_last = rw_param;
 8015482:	46a0      	mov	r8, r4
                 rw_param = rw_param->next;
 8015484:	6a24      	ldr	r4, [r4, #32]
         while(rw_param) {
 8015486:	b144      	cbz	r4, 801549a <ngc_named_param_set+0x92>
             if(rw_param->context == context && !strcmp(rw_param->name, name)) {
 8015488:	6823      	ldr	r3, [r4, #0]
 801548a:	42bb      	cmp	r3, r7
 801548c:	d1f9      	bne.n	8015482 <ngc_named_param_set+0x7a>
 801548e:	4629      	mov	r1, r5
 8015490:	1d20      	adds	r0, r4, #4
 8015492:	f7f2 fdd5 	bl	8008040 <strcmp>
 8015496:	2800      	cmp	r0, #0
 8015498:	d1f3      	bne.n	8015482 <ngc_named_param_set+0x7a>
             }
         }

         if(rw_param == NULL && (rw_param = malloc(sizeof(ngc_named_rw_param_t)))) {
 801549a:	b11c      	cbz	r4, 80154a4 <ngc_named_param_set+0x9c>
             else
                 rw_param_last->next = rw_param;
         }

         if((ok = rw_param != NULL))
             rw_param->value = value;
 801549c:	f8c4 901c 	str.w	r9, [r4, #28]
 80154a0:	2001      	movs	r0, #1
 80154a2:	e015      	b.n	80154d0 <ngc_named_param_set+0xc8>
         if(rw_param == NULL && (rw_param = malloc(sizeof(ngc_named_rw_param_t)))) {
 80154a4:	2024      	movs	r0, #36	@ 0x24
 80154a6:	f00d fb79 	bl	8022b9c <malloc>
 80154aa:	4604      	mov	r4, r0
 80154ac:	b190      	cbz	r0, 80154d4 <ngc_named_param_set+0xcc>
             strcpy(rw_param->name, name);
 80154ae:	4629      	mov	r1, r5
 80154b0:	3004      	adds	r0, #4
 80154b2:	f00f fd94 	bl	8024fde <strcpy>
             rw_param->context = context;
 80154b6:	6027      	str	r7, [r4, #0]
             rw_param->next = NULL;
 80154b8:	2300      	movs	r3, #0
 80154ba:	6223      	str	r3, [r4, #32]
             if(rw_global_params == NULL)
 80154bc:	f1ba 0f00 	cmp.w	sl, #0
 80154c0:	d002      	beq.n	80154c8 <ngc_named_param_set+0xc0>
                 rw_param_last->next = rw_param;
 80154c2:	f8c8 4020 	str.w	r4, [r8, #32]
 80154c6:	e7e9      	b.n	801549c <ngc_named_param_set+0x94>
                 rw_global_params = rw_param;
 80154c8:	4b04      	ldr	r3, [pc, #16]	@ (80154dc <ngc_named_param_set+0xd4>)
 80154ca:	601c      	str	r4, [r3, #0]
 80154cc:	e7e6      	b.n	801549c <ngc_named_param_set+0x94>
        return false;
 80154ce:	2000      	movs	r0, #0
     }

    return ok;
}
 80154d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         if((ok = rw_param != NULL))
 80154d4:	4630      	mov	r0, r6
 80154d6:	e7fb      	b.n	80154d0 <ngc_named_param_set+0xc8>
 80154d8:	20001f94 	.word	0x20001f94
 80154dc:	20001f10 	.word	0x20001f10
 80154e0:	0802bb58 	.word	0x0802bb58

080154e4 <ngc_modal_state_save>:

bool ngc_modal_state_save (gc_modal_t *state, bool auto_restore)
{
 80154e4:	b538      	push	{r3, r4, r5, lr}
 80154e6:	4605      	mov	r5, r0
    gc_modal_t **saved_state = call_level == -1 ? &modal_state : &call_levels[call_level].modal_state;
 80154e8:	4b17      	ldr	r3, [pc, #92]	@ (8015548 <ngc_modal_state_save+0x64>)
 80154ea:	681c      	ldr	r4, [r3, #0]
 80154ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 80154f0:	d022      	beq.n	8015538 <ngc_modal_state_save+0x54>
 80154f2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80154f6:	00a4      	lsls	r4, r4, #2
 80154f8:	3408      	adds	r4, #8
 80154fa:	4b14      	ldr	r3, [pc, #80]	@ (801554c <ngc_modal_state_save+0x68>)
 80154fc:	441c      	add	r4, r3

    if(*saved_state == NULL)
 80154fe:	6823      	ldr	r3, [r4, #0]
 8015500:	b1e3      	cbz	r3, 801553c <ngc_modal_state_save+0x58>
        *saved_state = malloc(sizeof(gc_modal_t));

    if(*saved_state)
 8015502:	6823      	ldr	r3, [r4, #0]
 8015504:	b19b      	cbz	r3, 801552e <ngc_modal_state_save+0x4a>
        memcpy(*saved_state, state, sizeof(gc_modal_t));
 8015506:	462a      	mov	r2, r5
 8015508:	3530      	adds	r5, #48	@ 0x30
 801550a:	f8d2 e000 	ldr.w	lr, [r2]
 801550e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8015512:	6890      	ldr	r0, [r2, #8]
 8015514:	68d1      	ldr	r1, [r2, #12]
 8015516:	f8c3 e000 	str.w	lr, [r3]
 801551a:	f8c3 c004 	str.w	ip, [r3, #4]
 801551e:	6098      	str	r0, [r3, #8]
 8015520:	60d9      	str	r1, [r3, #12]
 8015522:	3210      	adds	r2, #16
 8015524:	3310      	adds	r3, #16
 8015526:	42aa      	cmp	r2, r5
 8015528:	d1ef      	bne.n	801550a <ngc_modal_state_save+0x26>
 801552a:	6812      	ldr	r2, [r2, #0]
 801552c:	601a      	str	r2, [r3, #0]

    return *saved_state != NULL;
 801552e:	6820      	ldr	r0, [r4, #0]
}
 8015530:	3800      	subs	r0, #0
 8015532:	bf18      	it	ne
 8015534:	2001      	movne	r0, #1
 8015536:	bd38      	pop	{r3, r4, r5, pc}
    gc_modal_t **saved_state = call_level == -1 ? &modal_state : &call_levels[call_level].modal_state;
 8015538:	4c05      	ldr	r4, [pc, #20]	@ (8015550 <ngc_modal_state_save+0x6c>)
 801553a:	e7e0      	b.n	80154fe <ngc_modal_state_save+0x1a>
        *saved_state = malloc(sizeof(gc_modal_t));
 801553c:	2034      	movs	r0, #52	@ 0x34
 801553e:	f00d fb2d 	bl	8022b9c <malloc>
 8015542:	6020      	str	r0, [r4, #0]
 8015544:	e7dd      	b.n	8015502 <ngc_modal_state_save+0x1e>
 8015546:	bf00      	nop
 8015548:	20000214 	.word	0x20000214
 801554c:	20001f18 	.word	0x20001f18
 8015550:	20001f90 	.word	0x20001f90

08015554 <ngc_modal_state_invalidate>:

void ngc_modal_state_invalidate (void)
{
 8015554:	b510      	push	{r4, lr}
    gc_modal_t **saved_state = call_level == -1 ? &modal_state : &call_levels[call_level].modal_state;
 8015556:	4b0a      	ldr	r3, [pc, #40]	@ (8015580 <ngc_modal_state_invalidate+0x2c>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801555e:	d00c      	beq.n	801557a <ngc_modal_state_invalidate+0x26>
 8015560:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015564:	009c      	lsls	r4, r3, #2
 8015566:	3408      	adds	r4, #8
 8015568:	4b06      	ldr	r3, [pc, #24]	@ (8015584 <ngc_modal_state_invalidate+0x30>)
 801556a:	441c      	add	r4, r3

    if(*saved_state) {
 801556c:	6820      	ldr	r0, [r4, #0]
 801556e:	b118      	cbz	r0, 8015578 <ngc_modal_state_invalidate+0x24>
        free(*saved_state);
 8015570:	f00d fb1c 	bl	8022bac <free>
        *saved_state = NULL;
 8015574:	2300      	movs	r3, #0
 8015576:	6023      	str	r3, [r4, #0]
    }
}
 8015578:	bd10      	pop	{r4, pc}
    gc_modal_t **saved_state = call_level == -1 ? &modal_state : &call_levels[call_level].modal_state;
 801557a:	4c03      	ldr	r4, [pc, #12]	@ (8015588 <ngc_modal_state_invalidate+0x34>)
 801557c:	e7f6      	b.n	801556c <ngc_modal_state_invalidate+0x18>
 801557e:	bf00      	nop
 8015580:	20000214 	.word	0x20000214
 8015584:	20001f18 	.word	0x20001f18
 8015588:	20001f90 	.word	0x20001f90

0801558c <ngc_modal_state_restore>:

bool ngc_modal_state_restore (void)
{
 801558c:	b508      	push	{r3, lr}
    return gc_modal_state_restore(call_level == -1 ? modal_state : call_levels[call_level].modal_state);
 801558e:	4b08      	ldr	r3, [pc, #32]	@ (80155b0 <ngc_modal_state_restore+0x24>)
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015596:	d008      	beq.n	80155aa <ngc_modal_state_restore+0x1e>
 8015598:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801559c:	009a      	lsls	r2, r3, #2
 801559e:	4b05      	ldr	r3, [pc, #20]	@ (80155b4 <ngc_modal_state_restore+0x28>)
 80155a0:	4413      	add	r3, r2
 80155a2:	6898      	ldr	r0, [r3, #8]
 80155a4:	f7f8 f86a 	bl	800d67c <gc_modal_state_restore>
}
 80155a8:	bd08      	pop	{r3, pc}
    return gc_modal_state_restore(call_level == -1 ? modal_state : call_levels[call_level].modal_state);
 80155aa:	4b03      	ldr	r3, [pc, #12]	@ (80155b8 <ngc_modal_state_restore+0x2c>)
 80155ac:	6818      	ldr	r0, [r3, #0]
 80155ae:	e7f9      	b.n	80155a4 <ngc_modal_state_restore+0x18>
 80155b0:	20000214 	.word	0x20000214
 80155b4:	20001f18 	.word	0x20001f18
 80155b8:	20001f90 	.word	0x20001f90

080155bc <ngc_call_push>:

bool ngc_call_push (void *context)
{
 80155bc:	4602      	mov	r2, r0
    bool ok;

    if((ok = call_level < (NGC_MAX_CALL_LEVEL - 1)))
 80155be:	4b09      	ldr	r3, [pc, #36]	@ (80155e4 <ngc_call_push+0x28>)
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	2b08      	cmp	r3, #8
 80155c4:	bfd4      	ite	le
 80155c6:	2001      	movle	r0, #1
 80155c8:	2000      	movgt	r0, #0
 80155ca:	dc0a      	bgt.n	80155e2 <ngc_call_push+0x26>
        call_levels[++call_level].context = call_context = context;
 80155cc:	4906      	ldr	r1, [pc, #24]	@ (80155e8 <ngc_call_push+0x2c>)
 80155ce:	600a      	str	r2, [r1, #0]
 80155d0:	3301      	adds	r3, #1
 80155d2:	4904      	ldr	r1, [pc, #16]	@ (80155e4 <ngc_call_push+0x28>)
 80155d4:	600b      	str	r3, [r1, #0]
 80155d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80155da:	4904      	ldr	r1, [pc, #16]	@ (80155ec <ngc_call_push+0x30>)
 80155dc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80155e0:	605a      	str	r2, [r3, #4]

    return ok;
}
 80155e2:	4770      	bx	lr
 80155e4:	20000214 	.word	0x20000214
 80155e8:	20001f94 	.word	0x20001f94
 80155ec:	20001f18 	.word	0x20001f18

080155f0 <ngc_call_level>:
    return call_level >= 0;
}

uint_fast8_t ngc_call_level (void)
{
    return (uint_fast8_t)(call_level + 1);
 80155f0:	4b01      	ldr	r3, [pc, #4]	@ (80155f8 <ngc_call_level+0x8>)
 80155f2:	6818      	ldr	r0, [r3, #0]
}
 80155f4:	3001      	adds	r0, #1
 80155f6:	4770      	bx	lr
 80155f8:	20000214 	.word	0x20000214

080155fc <ngc_named_param_get_by_id>:
{
 80155fc:	b508      	push	{r3, lr}
    switch(id) {
 80155fe:	282d      	cmp	r0, #45	@ 0x2d
 8015600:	f200 8139 	bhi.w	8015876 <ngc_named_param_get_by_id+0x27a>
 8015604:	e8df f010 	tbh	[pc, r0, lsl #1]
 8015608:	013a002e 	.word	0x013a002e
 801560c:	00370031 	.word	0x00370031
 8015610:	004c0041 	.word	0x004c0041
 8015614:	0057004f 	.word	0x0057004f
 8015618:	0067005f 	.word	0x0067005f
 801561c:	0079006f 	.word	0x0079006f
 8015620:	008b0081 	.word	0x008b0081
 8015624:	00a4009c 	.word	0x00a4009c
 8015628:	00b600ac 	.word	0x00b600ac
 801562c:	013a00be 	.word	0x013a00be
 8015630:	00d000c8 	.word	0x00d000c8
 8015634:	00e000d8 	.word	0x00e000d8
 8015638:	00f000e8 	.word	0x00f000e8
 801563c:	010000f8 	.word	0x010000f8
 8015640:	0108013a 	.word	0x0108013a
 8015644:	01140110 	.word	0x01140110
 8015648:	01180118 	.word	0x01180118
 801564c:	01180118 	.word	0x01180118
 8015650:	01180118 	.word	0x01180118
 8015654:	01180118 	.word	0x01180118
 8015658:	011c0118 	.word	0x011c0118
 801565c:	0124013a 	.word	0x0124013a
 8015660:	0130013a 	.word	0x0130013a
 8015664:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 80158f0 <ngc_named_param_get_by_id+0x2f4>
 8015668:	e10a      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = (float)gc_state.line_number;
 801566a:	4ba2      	ldr	r3, [pc, #648]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 801566c:	ed93 0a1d 	vldr	s0, [r3, #116]	@ 0x74
 8015670:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
            break;
 8015674:	e104      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = (float)(gc_state.modal.motion * 10); // TODO: Fix G38.x
 8015676:	4b9f      	ldr	r3, [pc, #636]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 8015678:	881b      	ldrh	r3, [r3, #0]
 801567a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801567e:	005b      	lsls	r3, r3, #1
 8015680:	ee07 3a90 	vmov	s15, r3
 8015684:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
            break;
 8015688:	e0fa      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = (float)(170 + gc_state.modal.plane_select * 10);
 801568a:	4b9a      	ldr	r3, [pc, #616]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 801568c:	799b      	ldrb	r3, [r3, #6]
 801568e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015692:	005b      	lsls	r3, r3, #1
 8015694:	33aa      	adds	r3, #170	@ 0xaa
 8015696:	ee00 3a10 	vmov	s0, r3
 801569a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
            break;
 801569e:	e0ef      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = 400.0f;
 80156a0:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 80158f8 <ngc_named_param_get_by_id+0x2fc>
            break;
 80156a4:	e0ec      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.units_imperial ? 0.0f : 1.0f;
 80156a6:	4b93      	ldr	r3, [pc, #588]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 80156a8:	78db      	ldrb	r3, [r3, #3]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	f000 80e9 	beq.w	8015882 <ngc_named_param_get_by_id+0x286>
 80156b0:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 80156b4:	e0e4      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.units_imperial ? 1.0f : 0.0f;
 80156b6:	4b8f      	ldr	r3, [pc, #572]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 80156b8:	78db      	ldrb	r3, [r3, #3]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	f000 80e4 	beq.w	8015888 <ngc_named_param_get_by_id+0x28c>
 80156c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80156c4:	e0dc      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.distance_incremental ? 0.0f : 1.0f;
 80156c6:	4b8b      	ldr	r3, [pc, #556]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 80156c8:	791b      	ldrb	r3, [r3, #4]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	f000 80df 	beq.w	801588e <ngc_named_param_get_by_id+0x292>
 80156d0:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 80156d4:	e0d4      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.distance_incremental ? 1.0f : 0.0f;
 80156d6:	4b87      	ldr	r3, [pc, #540]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 80156d8:	791b      	ldrb	r3, [r3, #4]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	f000 80da 	beq.w	8015894 <ngc_named_param_get_by_id+0x298>
 80156e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80156e4:	e0cc      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.feed_mode == FeedMode_InverseTime ? 1.0f : 0.0f;
 80156e6:	4b83      	ldr	r3, [pc, #524]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 80156e8:	789b      	ldrb	r3, [r3, #2]
 80156ea:	2b01      	cmp	r3, #1
 80156ec:	d002      	beq.n	80156f4 <ngc_named_param_get_by_id+0xf8>
 80156ee:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 80156f2:	e0c5      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
 80156f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80156f8:	e0c2      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.feed_mode == FeedMode_UnitsPerMin ? 1.0f : 0.0f;
 80156fa:	4b7e      	ldr	r3, [pc, #504]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 80156fc:	789b      	ldrb	r3, [r3, #2]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	f040 80cb 	bne.w	801589a <ngc_named_param_get_by_id+0x29e>
 8015704:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015708:	e0ba      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.feed_mode == FeedMode_UnitsPerRev ? 1.0f : 0.0f;
 801570a:	4b7a      	ldr	r3, [pc, #488]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 801570c:	789b      	ldrb	r3, [r3, #2]
 801570e:	2b02      	cmp	r3, #2
 8015710:	d002      	beq.n	8015718 <ngc_named_param_get_by_id+0x11c>
 8015712:	ed9f 0a7a 	vldr	s0, [pc, #488]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 8015716:	e0b3      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
 8015718:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801571c:	e0b0      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
                uint_fast16_t id = gc_state.modal.coord_system.id * 10;
 801571e:	4b75      	ldr	r3, [pc, #468]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 8015720:	7d19      	ldrb	r1, [r3, #20]
 8015722:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8015726:	0052      	lsls	r2, r2, #1
 8015728:	4613      	mov	r3, r2
                if(id > (CoordinateSystem_G59 * 10))
 801572a:	2a32      	cmp	r2, #50	@ 0x32
 801572c:	d901      	bls.n	8015732 <ngc_named_param_get_by_id+0x136>
                    id = (CoordinateSystem_G59 * 10) + gc_state.modal.coord_system.id - CoordinateSystem_G59;
 801572e:	f101 032d 	add.w	r3, r1, #45	@ 0x2d
                value = (float)(540 + id);
 8015732:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8015736:	ee00 3a10 	vmov	s0, r3
 801573a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
            break;
 801573e:	e09f      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.tool_offset_mode >= ToolLengthOffset_Enable ? 1.0f : 0.0f;
 8015740:	4b6c      	ldr	r3, [pc, #432]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 8015742:	79db      	ldrb	r3, [r3, #7]
 8015744:	2b00      	cmp	r3, #0
 8015746:	f000 80ab 	beq.w	80158a0 <ngc_named_param_get_by_id+0x2a4>
 801574a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801574e:	e097      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.retract_mode == CCRetractMode_Previous ? 1.0f : 0.0f;
 8015750:	4b68      	ldr	r3, [pc, #416]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 8015752:	7f5b      	ldrb	r3, [r3, #29]
 8015754:	2b00      	cmp	r3, #0
 8015756:	f040 80a6 	bne.w	80158a6 <ngc_named_param_get_by_id+0x2aa>
 801575a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801575e:	e08f      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.retract_mode == CCRetractMode_RPos ? 1.0f : 0.0f;
 8015760:	4b64      	ldr	r3, [pc, #400]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 8015762:	7f5b      	ldrb	r3, [r3, #29]
 8015764:	2b01      	cmp	r3, #1
 8015766:	d002      	beq.n	801576e <ngc_named_param_get_by_id+0x172>
 8015768:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 801576c:	e088      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
 801576e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015772:	e085      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? 1.0f : 0.0f;
 8015774:	4b5f      	ldr	r3, [pc, #380]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 8015776:	7edb      	ldrb	r3, [r3, #27]
 8015778:	2b00      	cmp	r3, #0
 801577a:	f040 8097 	bne.w	80158ac <ngc_named_param_get_by_id+0x2b0>
 801577e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015782:	e07d      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS ? 1.0f : 0.0f;
 8015784:	4b5b      	ldr	r3, [pc, #364]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 8015786:	7edb      	ldrb	r3, [r3, #27]
 8015788:	2b01      	cmp	r3, #1
 801578a:	d002      	beq.n	8015792 <ngc_named_param_get_by_id+0x196>
 801578c:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 8015790:	e076      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
 8015792:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015796:	e073      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.diameter_mode ? 1.0f : 0.0f;
 8015798:	4b56      	ldr	r3, [pc, #344]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 801579a:	795b      	ldrb	r3, [r3, #5]
 801579c:	2b00      	cmp	r3, #0
 801579e:	f000 8088 	beq.w	80158b2 <ngc_named_param_get_by_id+0x2b6>
 80157a2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80157a6:	e06b      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.diameter_mode ? 0.0f : 1.0f;
 80157a8:	4b52      	ldr	r3, [pc, #328]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 80157aa:	795b      	ldrb	r3, [r3, #5]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	f000 8083 	beq.w	80158b8 <ngc_named_param_get_by_id+0x2bc>
 80157b2:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 80157b6:	e063      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.state.on ? 1.0f : 0.0f;
 80157b8:	4b4e      	ldr	r3, [pc, #312]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 80157ba:	7e9b      	ldrb	r3, [r3, #26]
 80157bc:	f013 0f01 	tst.w	r3, #1
 80157c0:	d07d      	beq.n	80158be <ngc_named_param_get_by_id+0x2c2>
 80157c2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80157c6:	e05b      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.state.ccw ? 1.0f : 0.0f;
 80157c8:	4b4a      	ldr	r3, [pc, #296]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 80157ca:	7e9b      	ldrb	r3, [r3, #26]
 80157cc:	f013 0f02 	tst.w	r3, #2
 80157d0:	d078      	beq.n	80158c4 <ngc_named_param_get_by_id+0x2c8>
 80157d2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80157d6:	e053      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.coolant.mist ? 1.0f : 0.0f;
 80157d8:	4b46      	ldr	r3, [pc, #280]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 80157da:	7e5b      	ldrb	r3, [r3, #25]
 80157dc:	f013 0f02 	tst.w	r3, #2
 80157e0:	d073      	beq.n	80158ca <ngc_named_param_get_by_id+0x2ce>
 80157e2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80157e6:	e04b      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.coolant.flood ? 1.0f : 0.0f;
 80157e8:	4b42      	ldr	r3, [pc, #264]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 80157ea:	7e5b      	ldrb	r3, [r3, #25]
 80157ec:	f013 0f01 	tst.w	r3, #1
 80157f0:	d06e      	beq.n	80158d0 <ngc_named_param_get_by_id+0x2d4>
 80157f2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80157f6:	e043      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.spindle_rpm_disable ? 0.0f : 1.0f;
 80157f8:	4b3e      	ldr	r3, [pc, #248]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 80157fa:	7f1b      	ldrb	r3, [r3, #28]
 80157fc:	f013 0f04 	tst.w	r3, #4
 8015800:	d069      	beq.n	80158d6 <ngc_named_param_get_by_id+0x2da>
 8015802:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 8015806:	e03b      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.feed_rate_disable ? 0.0f : 1.0f;
 8015808:	4b3a      	ldr	r3, [pc, #232]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 801580a:	7f1b      	ldrb	r3, [r3, #28]
 801580c:	f013 0f01 	tst.w	r3, #1
 8015810:	d064      	beq.n	80158dc <ngc_named_param_get_by_id+0x2e0>
 8015812:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 8015816:	e033      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.feed_hold_disable ? 0.0f : 1.0f;
 8015818:	4b36      	ldr	r3, [pc, #216]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 801581a:	7f1b      	ldrb	r3, [r3, #28]
 801581c:	f013 0f02 	tst.w	r3, #2
 8015820:	d05f      	beq.n	80158e2 <ngc_named_param_get_by_id+0x2e6>
 8015822:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 8015826:	e02b      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.feed_rate;
 8015828:	4b32      	ldr	r3, [pc, #200]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 801582a:	ed93 0a18 	vldr	s0, [r3, #96]	@ 0x60
            break;
 801582e:	e027      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.spindle.rpm;
 8015830:	4b30      	ldr	r3, [pc, #192]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 8015832:	ed93 0a14 	vldr	s0, [r3, #80]	@ 0x50
            break;
 8015836:	e023      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = _relative_pos(id - NGCParam_x);
 8015838:	3820      	subs	r0, #32
 801583a:	f7ff fc57 	bl	80150ec <_relative_pos>
            break;
 801583e:	e01f      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = (float)gc_state.tool->tool_id;
 8015840:	4b2c      	ldr	r3, [pc, #176]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 8015842:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8015846:	ed93 0a04 	vldr	s0, [r3, #16]
 801584a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
            break;
 801584e:	e017      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.tool_pending != gc_state.tool->tool_id ? (float)gc_state.tool_pending : -1.0f;
 8015850:	4a28      	ldr	r2, [pc, #160]	@ (80158f4 <ngc_named_param_get_by_id+0x2f8>)
 8015852:	6f93      	ldr	r3, [r2, #120]	@ 0x78
 8015854:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 8015858:	6912      	ldr	r2, [r2, #16]
 801585a:	4293      	cmp	r3, r2
 801585c:	d044      	beq.n	80158e8 <ngc_named_param_get_by_id+0x2ec>
 801585e:	ee07 3a90 	vmov	s15, r3
 8015862:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8015866:	e00b      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = (float)ngc_call_level();
 8015868:	f7ff fec2 	bl	80155f0 <ngc_call_level>
 801586c:	ee00 0a10 	vmov	s0, r0
 8015870:	eeb8 0a40 	vcvt.f32.u32	s0, s0
            break;
 8015874:	e004      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = NAN;
 8015876:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8015900 <ngc_named_param_get_by_id+0x304>
 801587a:	e001      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = 0.0f; // TODO: derive from version letter?
 801587c:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80158fc <ngc_named_param_get_by_id+0x300>
}
 8015880:	bd08      	pop	{r3, pc}
            value = gc_state.modal.units_imperial ? 0.0f : 1.0f;
 8015882:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015886:	e7fb      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.units_imperial ? 1.0f : 0.0f;
 8015888:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 801588c:	e7f8      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.distance_incremental ? 0.0f : 1.0f;
 801588e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015892:	e7f5      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.distance_incremental ? 1.0f : 0.0f;
 8015894:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 8015898:	e7f2      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.feed_mode == FeedMode_UnitsPerMin ? 1.0f : 0.0f;
 801589a:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 801589e:	e7ef      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.tool_offset_mode >= ToolLengthOffset_Enable ? 1.0f : 0.0f;
 80158a0:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 80158a4:	e7ec      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.retract_mode == CCRetractMode_Previous ? 1.0f : 0.0f;
 80158a6:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 80158aa:	e7e9      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? 1.0f : 0.0f;
 80158ac:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 80158b0:	e7e6      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.diameter_mode ? 1.0f : 0.0f;
 80158b2:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 80158b6:	e7e3      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.diameter_mode ? 0.0f : 1.0f;
 80158b8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80158bc:	e7e0      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.state.on ? 1.0f : 0.0f;
 80158be:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 80158c2:	e7dd      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.state.ccw ? 1.0f : 0.0f;
 80158c4:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 80158c8:	e7da      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.coolant.mist ? 1.0f : 0.0f;
 80158ca:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 80158ce:	e7d7      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.coolant.flood ? 1.0f : 0.0f;
 80158d0:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80158fc <ngc_named_param_get_by_id+0x300>
 80158d4:	e7d4      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.spindle_rpm_disable ? 0.0f : 1.0f;
 80158d6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80158da:	e7d1      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.feed_rate_disable ? 0.0f : 1.0f;
 80158dc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80158e0:	e7ce      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.feed_hold_disable ? 0.0f : 1.0f;
 80158e2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80158e6:	e7cb      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
            value = gc_state.tool_pending != gc_state.tool->tool_id ? (float)gc_state.tool_pending : -1.0f;
 80158e8:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
    return value;
 80158ec:	e7c8      	b.n	8015880 <ngc_named_param_get_by_id+0x284>
 80158ee:	bf00      	nop
 80158f0:	3f8ccccd 	.word	0x3f8ccccd
 80158f4:	200017c8 	.word	0x200017c8
 80158f8:	43c80000 	.word	0x43c80000
 80158fc:	00000000 	.word	0x00000000
 8015900:	7fc00000 	.word	0x7fc00000

08015904 <ngc_named_param_get>:
{
 8015904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015908:	4688      	mov	r8, r1
    name = ngc_name_tolower(name);
 801590a:	f7ff fbd1 	bl	80150b0 <ngc_name_tolower>
 801590e:	4607      	mov	r7, r0
    *value = 0.0f;
 8015910:	2300      	movs	r3, #0
 8015912:	f8c8 3000 	str.w	r3, [r8]
     if(*name == '_') do {
 8015916:	7803      	ldrb	r3, [r0, #0]
 8015918:	2b5f      	cmp	r3, #95	@ 0x5f
 801591a:	d008      	beq.n	801592e <ngc_named_param_get+0x2a>
    bool found = false;
 801591c:	2600      	movs	r6, #0
        void *context = *name == '_' ? NULL : call_context;
 801591e:	783b      	ldrb	r3, [r7, #0]
 8015920:	2b5f      	cmp	r3, #95	@ 0x5f
 8015922:	d026      	beq.n	8015972 <ngc_named_param_get+0x6e>
 8015924:	4b1d      	ldr	r3, [pc, #116]	@ (801599c <ngc_named_param_get+0x98>)
 8015926:	681d      	ldr	r5, [r3, #0]
        ngc_named_rw_param_t *rw_param = rw_global_params;
 8015928:	4b1d      	ldr	r3, [pc, #116]	@ (80159a0 <ngc_named_param_get+0x9c>)
 801592a:	681c      	ldr	r4, [r3, #0]
        while(rw_param && !found) {
 801592c:	e024      	b.n	8015978 <ngc_named_param_get+0x74>
    uint_fast8_t idx = sizeof(ngc_named_ro_param) / sizeof(ngc_named_ro_param_t);
 801592e:	242e      	movs	r4, #46	@ 0x2e
 8015930:	e001      	b.n	8015936 <ngc_named_param_get+0x32>
    } while(idx && !found);
 8015932:	b1cc      	cbz	r4, 8015968 <ngc_named_param_get+0x64>
 8015934:	b1c5      	cbz	r5, 8015968 <ngc_named_param_get+0x64>
        idx--;
 8015936:	3c01      	subs	r4, #1
        if((found = !strcmp(name, ngc_named_ro_param[idx].name)))
 8015938:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801593c:	4b19      	ldr	r3, [pc, #100]	@ (80159a4 <ngc_named_param_get+0xa0>)
 801593e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015942:	4638      	mov	r0, r7
 8015944:	f7f2 fb7c 	bl	8008040 <strcmp>
 8015948:	1e05      	subs	r5, r0, #0
 801594a:	bf0c      	ite	eq
 801594c:	2601      	moveq	r6, #1
 801594e:	2600      	movne	r6, #0
 8015950:	d1ef      	bne.n	8015932 <ngc_named_param_get+0x2e>
            *value = ngc_named_param_get_by_id(ngc_named_ro_param[idx].id);
 8015952:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8015956:	4b13      	ldr	r3, [pc, #76]	@ (80159a4 <ngc_named_param_get+0xa0>)
 8015958:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801595c:	7918      	ldrb	r0, [r3, #4]
 801595e:	f7ff fe4d 	bl	80155fc <ngc_named_param_get_by_id>
 8015962:	ed88 0a00 	vstr	s0, [r8]
 8015966:	e7e4      	b.n	8015932 <ngc_named_param_get+0x2e>
    if(!found) {
 8015968:	2e00      	cmp	r6, #0
 801596a:	d0d8      	beq.n	801591e <ngc_named_param_get+0x1a>
}
 801596c:	4630      	mov	r0, r6
 801596e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        void *context = *name == '_' ? NULL : call_context;
 8015972:	2500      	movs	r5, #0
 8015974:	e7d8      	b.n	8015928 <ngc_named_param_get+0x24>
                rw_param = rw_param->next;
 8015976:	6a24      	ldr	r4, [r4, #32]
        while(rw_param && !found) {
 8015978:	2c00      	cmp	r4, #0
 801597a:	d0f7      	beq.n	801596c <ngc_named_param_get+0x68>
 801597c:	2e00      	cmp	r6, #0
 801597e:	d1f5      	bne.n	801596c <ngc_named_param_get+0x68>
            if((found = rw_param->context == context && !strcmp(rw_param->name, name)))
 8015980:	6823      	ldr	r3, [r4, #0]
 8015982:	42ab      	cmp	r3, r5
 8015984:	d1f7      	bne.n	8015976 <ngc_named_param_get+0x72>
 8015986:	4639      	mov	r1, r7
 8015988:	1d20      	adds	r0, r4, #4
 801598a:	f7f2 fb59 	bl	8008040 <strcmp>
 801598e:	2800      	cmp	r0, #0
 8015990:	d1f1      	bne.n	8015976 <ngc_named_param_get+0x72>
                *value = rw_param->value;
 8015992:	69e3      	ldr	r3, [r4, #28]
 8015994:	f8c8 3000 	str.w	r3, [r8]
            if((found = rw_param->context == context && !strcmp(rw_param->name, name)))
 8015998:	2601      	movs	r6, #1
 801599a:	e7ed      	b.n	8015978 <ngc_named_param_get+0x74>
 801599c:	20001f94 	.word	0x20001f94
 80159a0:	20001f10 	.word	0x20001f10
 80159a4:	0802bb58 	.word	0x0802bb58

080159a8 <ngc_float_decimals>:

uint8_t ngc_float_decimals (void)
{
	return settings.flags.report_inches ? N_DECIMAL_COORDVALUE_INCH : N_DECIMAL_COORDVALUE_MM;
 80159a8:	4b04      	ldr	r3, [pc, #16]	@ (80159bc <ngc_float_decimals+0x14>)
 80159aa:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 80159ae:	f013 0f01 	tst.w	r3, #1
 80159b2:	d001      	beq.n	80159b8 <ngc_float_decimals+0x10>
 80159b4:	2004      	movs	r0, #4
 80159b6:	4770      	bx	lr
 80159b8:	2003      	movs	r0, #3
}
 80159ba:	4770      	bx	lr
 80159bc:	200024a8 	.word	0x200024a8

080159c0 <uitoa>:
// Converts an uint32 variable to string.
char *uitoa (uint32_t n)
{
    char *bptr = buf + sizeof(buf);

    *--bptr = '\0';
 80159c0:	4b0d      	ldr	r3, [pc, #52]	@ (80159f8 <uitoa+0x38>)
 80159c2:	2200      	movs	r2, #0
 80159c4:	739a      	strb	r2, [r3, #14]

    if (n == 0)
 80159c6:	4602      	mov	r2, r0
 80159c8:	b9a0      	cbnz	r0, 80159f4 <uitoa+0x34>
        *--bptr = '0';
 80159ca:	4618      	mov	r0, r3
 80159cc:	2330      	movs	r3, #48	@ 0x30
 80159ce:	f800 3f0d 	strb.w	r3, [r0, #13]!
 80159d2:	4770      	bx	lr
    else while (n) {
        *--bptr = '0' + (n % 10);
 80159d4:	4b09      	ldr	r3, [pc, #36]	@ (80159fc <uitoa+0x3c>)
 80159d6:	fba3 1302 	umull	r1, r3, r3, r2
 80159da:	08db      	lsrs	r3, r3, #3
 80159dc:	4619      	mov	r1, r3
 80159de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80159e2:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 80159e6:	3330      	adds	r3, #48	@ 0x30
 80159e8:	f800 3d01 	strb.w	r3, [r0, #-1]!
        n /= 10;
 80159ec:	460a      	mov	r2, r1
    else while (n) {
 80159ee:	2a00      	cmp	r2, #0
 80159f0:	d1f0      	bne.n	80159d4 <uitoa+0x14>
    }

    return bptr;
}
 80159f2:	4770      	bx	lr
    *--bptr = '\0';
 80159f4:	4802      	ldr	r0, [pc, #8]	@ (8015a00 <uitoa+0x40>)
 80159f6:	e7fa      	b.n	80159ee <uitoa+0x2e>
 80159f8:	20001fbc 	.word	0x20001fbc
 80159fc:	cccccccd 	.word	0xcccccccd
 8015a00:	20001fca 	.word	0x20001fca

08015a04 <ftoa>:

// Convert float to string by immediately converting to integers.
// Number of decimal places, which are tracked by a counter, must be set by the user.
// The integers is then efficiently converted to a string.
char *ftoa (float n, uint8_t decimal_places)
{
 8015a04:	b410      	push	{r4}
    bool isNegative;
    char *bptr = buf + sizeof(buf);

    *--bptr = '\0';
 8015a06:	4b38      	ldr	r3, [pc, #224]	@ (8015ae8 <ftoa+0xe4>)
 8015a08:	2200      	movs	r2, #0
 8015a0a:	739a      	strb	r2, [r3, #14]

    if ((isNegative = n < 0.0f))
 8015a0c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a14:	d413      	bmi.n	8015a3e <ftoa+0x3a>
 8015a16:	eeb0 7a40 	vmov.f32	s14, s0
        n = -n;

    n += froundvalues[decimal_places];
 8015a1a:	4b34      	ldr	r3, [pc, #208]	@ (8015aec <ftoa+0xe8>)
 8015a1c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8015a20:	edd3 7a00 	vldr	s15, [r3]
 8015a24:	ee77 7a87 	vadd.f32	s15, s15, s14

    uint32_t a = (uint32_t)n;
 8015a28:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8015a2c:	ee17 1a10 	vmov	r1, s14

    if (decimal_places) {
 8015a30:	b390      	cbz	r0, 8015a98 <ftoa+0x94>

        n -= (float)a;
 8015a32:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8015a36:	ee77 7ac7 	vsub.f32	s15, s15, s14

        uint_fast8_t decimals = decimal_places;
 8015a3a:	4603      	mov	r3, r0
        while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8015a3c:	e007      	b.n	8015a4e <ftoa+0x4a>
        n = -n;
 8015a3e:	eeb1 7a40 	vneg.f32	s14, s0
 8015a42:	e7ea      	b.n	8015a1a <ftoa+0x16>
            n *= 100.0f;
 8015a44:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8015af0 <ftoa+0xec>
 8015a48:	ee67 7a87 	vmul.f32	s15, s15, s14
            decimals -= 2;
 8015a4c:	3b02      	subs	r3, #2
        while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8015a4e:	2b01      	cmp	r3, #1
 8015a50:	d8f8      	bhi.n	8015a44 <ftoa+0x40>
        }

        if (decimals)
 8015a52:	b11b      	cbz	r3, 8015a5c <ftoa+0x58>
            n *= 10.0f;
 8015a54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8015a58:	ee67 7a87 	vmul.f32	s15, s15, s14

        uint32_t b = (uint32_t)n;
 8015a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015a60:	ee17 2a90 	vmov	r2, s15
    *--bptr = '\0';
 8015a64:	4c23      	ldr	r4, [pc, #140]	@ (8015af4 <ftoa+0xf0>)

        while(decimal_places--) {
 8015a66:	e003      	b.n	8015a70 <ftoa+0x6c>
            if(b) {
                *--bptr = (b % 10) + '0'; // Get digit
                b /= 10;
            } else
                *--bptr = '0';
 8015a68:	2330      	movs	r3, #48	@ 0x30
 8015a6a:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8015a6e:	4660      	mov	r0, ip
        while(decimal_places--) {
 8015a70:	1e43      	subs	r3, r0, #1
 8015a72:	fa5f fc83 	uxtb.w	ip, r3
 8015a76:	b180      	cbz	r0, 8015a9a <ftoa+0x96>
            if(b) {
 8015a78:	2a00      	cmp	r2, #0
 8015a7a:	d0f5      	beq.n	8015a68 <ftoa+0x64>
                *--bptr = (b % 10) + '0'; // Get digit
 8015a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8015af8 <ftoa+0xf4>)
 8015a7e:	fba3 0302 	umull	r0, r3, r3, r2
 8015a82:	08db      	lsrs	r3, r3, #3
 8015a84:	4618      	mov	r0, r3
 8015a86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015a8a:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8015a8e:	3330      	adds	r3, #48	@ 0x30
 8015a90:	f804 3d01 	strb.w	r3, [r4, #-1]!
                b /= 10;
 8015a94:	4602      	mov	r2, r0
 8015a96:	e7ea      	b.n	8015a6e <ftoa+0x6a>
    *--bptr = '\0';
 8015a98:	4c16      	ldr	r4, [pc, #88]	@ (8015af4 <ftoa+0xf0>)
        }
    }

    *--bptr = '.'; // Always add decimal point (TODO: is this really needed?)
 8015a9a:	1e60      	subs	r0, r4, #1
 8015a9c:	232e      	movs	r3, #46	@ 0x2e
 8015a9e:	f804 3c01 	strb.w	r3, [r4, #-1]

    if(a == 0)
 8015aa2:	b9c1      	cbnz	r1, 8015ad6 <ftoa+0xd2>
        *--bptr = '0';
 8015aa4:	1ea0      	subs	r0, r4, #2
 8015aa6:	2330      	movs	r3, #48	@ 0x30
 8015aa8:	f804 3c02 	strb.w	r3, [r4, #-2]
    else while(a) {
        *--bptr = (a % 10) + '0'; // Get digit
        a /= 10;
    }

    if(isNegative)
 8015aac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ab4:	d412      	bmi.n	8015adc <ftoa+0xd8>
        *--bptr = '-';

    return bptr;
}
 8015ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015aba:	4770      	bx	lr
        *--bptr = (a % 10) + '0'; // Get digit
 8015abc:	4b0e      	ldr	r3, [pc, #56]	@ (8015af8 <ftoa+0xf4>)
 8015abe:	fba3 2301 	umull	r2, r3, r3, r1
 8015ac2:	08db      	lsrs	r3, r3, #3
 8015ac4:	461a      	mov	r2, r3
 8015ac6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015aca:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 8015ace:	3330      	adds	r3, #48	@ 0x30
 8015ad0:	f800 3d01 	strb.w	r3, [r0, #-1]!
        a /= 10;
 8015ad4:	4611      	mov	r1, r2
    else while(a) {
 8015ad6:	2900      	cmp	r1, #0
 8015ad8:	d1f0      	bne.n	8015abc <ftoa+0xb8>
 8015ada:	e7e7      	b.n	8015aac <ftoa+0xa8>
        *--bptr = '-';
 8015adc:	232d      	movs	r3, #45	@ 0x2d
 8015ade:	f800 3c01 	strb.w	r3, [r0, #-1]
 8015ae2:	3801      	subs	r0, #1
    return bptr;
 8015ae4:	e7e7      	b.n	8015ab6 <ftoa+0xb2>
 8015ae6:	bf00      	nop
 8015ae8:	20001fbc 	.word	0x20001fbc
 8015aec:	0802be48 	.word	0x0802be48
 8015af0:	42c80000 	.word	0x42c80000
 8015af4:	20001fca 	.word	0x20001fca
 8015af8:	cccccccd 	.word	0xcccccccd

08015afc <trim_float>:

// Trim trailing zeros and possibly decimal point
char *trim_float (char *s)
{
 8015afc:	b510      	push	{r4, lr}
 8015afe:	4604      	mov	r4, r0
    if(strchr(s, '.')) {
 8015b00:	212e      	movs	r1, #46	@ 0x2e
 8015b02:	f00f f92b 	bl	8024d5c <strchr>
 8015b06:	b168      	cbz	r0, 8015b24 <trim_float+0x28>
        char *s2 = strchr(s, '\0') - 1;
 8015b08:	4620      	mov	r0, r4
 8015b0a:	f7f2 faf9 	bl	8008100 <strlen>
 8015b0e:	1e43      	subs	r3, r0, #1
 8015b10:	4423      	add	r3, r4
        while(*s2 == '0')
 8015b12:	e002      	b.n	8015b1a <trim_float+0x1e>
            *s2-- = '\0';
 8015b14:	2200      	movs	r2, #0
 8015b16:	f803 2901 	strb.w	r2, [r3], #-1
        while(*s2 == '0')
 8015b1a:	781a      	ldrb	r2, [r3, #0]
 8015b1c:	2a30      	cmp	r2, #48	@ 0x30
 8015b1e:	d0f9      	beq.n	8015b14 <trim_float+0x18>
        if(*s2 == '.')
 8015b20:	2a2e      	cmp	r2, #46	@ 0x2e
 8015b22:	d001      	beq.n	8015b28 <trim_float+0x2c>
            *s2 = '\0';
    }

    return s;
}
 8015b24:	4620      	mov	r0, r4
 8015b26:	bd10      	pop	{r4, pc}
            *s2 = '\0';
 8015b28:	2200      	movs	r2, #0
 8015b2a:	701a      	strb	r2, [r3, #0]
 8015b2c:	e7fa      	b.n	8015b24 <trim_float+0x28>
	...

08015b30 <read_uint>:

// Extracts an unsigned integer value from a string.
status_code_t read_uint (char *line, uint_fast8_t *char_counter, uint32_t *uint_ptr)
{
 8015b30:	b570      	push	{r4, r5, r6, lr}
    char *ptr = line + *char_counter;
 8015b32:	680b      	ldr	r3, [r1, #0]
 8015b34:	18c4      	adds	r4, r0, r3
    uint_fast8_t ndigit = 0, c;
    uint32_t intval = 0;
    bool isdecimal = false, ok = false;

    // Grab first character and increment pointer. No spaces assumed in line.
    c = *ptr++;
 8015b36:	5cc3      	ldrb	r3, [r0, r3]

    if (c == '-')
 8015b38:	2b2d      	cmp	r3, #45	@ 0x2d
 8015b3a:	d03b      	beq.n	8015bb4 <read_uint+0x84>
 8015b3c:	f104 0c01 	add.w	ip, r4, #1
        return Status_NegativeValue;

    // Skip initial sign character
    if (c == '+')
 8015b40:	2b2b      	cmp	r3, #43	@ 0x2b
 8015b42:	d004      	beq.n	8015b4e <read_uint+0x1e>

    // Extract number into fast integer. Track decimal in terms of exponent value.
    while(c) {
        c -= '0';
        if (c <= 9) {
            ok = true;
 8015b44:	2600      	movs	r6, #0
 8015b46:	4635      	mov	r5, r6
 8015b48:	4634      	mov	r4, r6
 8015b4a:	46b6      	mov	lr, r6
 8015b4c:	e019      	b.n	8015b82 <read_uint+0x52>
        c = *ptr++;
 8015b4e:	f104 0c02 	add.w	ip, r4, #2
 8015b52:	7863      	ldrb	r3, [r4, #1]
 8015b54:	e7f6      	b.n	8015b44 <read_uint+0x14>
            if(!isdecimal && (c != 0 || intval))
                ndigit++;
            if (isdecimal && c != 0)
 8015b56:	bb7b      	cbnz	r3, 8015bb8 <read_uint+0x88>
                return Status_GcodeCommandValueNotInteger;

            if ((ndigit <= 9 || c <= 4) && intval <= 429496729) {
 8015b58:	f1be 0f09 	cmp.w	lr, #9
 8015b5c:	d901      	bls.n	8015b62 <read_uint+0x32>
 8015b5e:	2b04      	cmp	r3, #4
 8015b60:	d81b      	bhi.n	8015b9a <read_uint+0x6a>
 8015b62:	4e17      	ldr	r6, [pc, #92]	@ (8015bc0 <read_uint+0x90>)
 8015b64:	42b4      	cmp	r4, r6
 8015b66:	d81a      	bhi.n	8015b9e <read_uint+0x6e>
                intval = (((intval << 2) + intval) << 1) + c; // intval * 10 + c
 8015b68:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8015b6c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
            ok = true;
 8015b70:	2601      	movs	r6, #1
                intval = (((intval << 2) + intval) << 1) + c; // intval * 10 + c
 8015b72:	e004      	b.n	8015b7e <read_uint+0x4e>
            } else if (!isdecimal)
                exp++;  // Drop overflow digits
        } else if (c == (uint_fast8_t)('.' - '0') && !isdecimal)
 8015b74:	f113 0f02 	cmn.w	r3, #2
 8015b78:	d113      	bne.n	8015ba2 <read_uint+0x72>
 8015b7a:	b995      	cbnz	r5, 8015ba2 <read_uint+0x72>
            isdecimal = true;
 8015b7c:	2501      	movs	r5, #1
         else
            break;

        c = *ptr++;
 8015b7e:	f81c 3b01 	ldrb.w	r3, [ip], #1
    while(c) {
 8015b82:	b173      	cbz	r3, 8015ba2 <read_uint+0x72>
        c -= '0';
 8015b84:	3b30      	subs	r3, #48	@ 0x30
        if (c <= 9) {
 8015b86:	2b09      	cmp	r3, #9
 8015b88:	d8f4      	bhi.n	8015b74 <read_uint+0x44>
            if(!isdecimal && (c != 0 || intval))
 8015b8a:	2d00      	cmp	r5, #0
 8015b8c:	d1e3      	bne.n	8015b56 <read_uint+0x26>
 8015b8e:	b90b      	cbnz	r3, 8015b94 <read_uint+0x64>
 8015b90:	2c00      	cmp	r4, #0
 8015b92:	d0e1      	beq.n	8015b58 <read_uint+0x28>
                ndigit++;
 8015b94:	f10e 0e01 	add.w	lr, lr, #1
 8015b98:	e7de      	b.n	8015b58 <read_uint+0x28>
            ok = true;
 8015b9a:	2601      	movs	r6, #1
 8015b9c:	e7ef      	b.n	8015b7e <read_uint+0x4e>
 8015b9e:	2601      	movs	r6, #1
 8015ba0:	e7ed      	b.n	8015b7e <read_uint+0x4e>
    }

    // Return if no digits have been read.

    if (!ok)
 8015ba2:	b15e      	cbz	r6, 8015bbc <read_uint+0x8c>
        return Status_BadNumberFormat;

    *uint_ptr = intval; // Assign value.
 8015ba4:	6014      	str	r4, [r2, #0]
    *char_counter = ptr - line - 1; // Set char_counter to next statement
 8015ba6:	ebac 0c00 	sub.w	ip, ip, r0
 8015baa:	f10c 33ff 	add.w	r3, ip, #4294967295
 8015bae:	600b      	str	r3, [r1, #0]

    return Status_OK;
 8015bb0:	2000      	movs	r0, #0
}
 8015bb2:	bd70      	pop	{r4, r5, r6, pc}
        return Status_NegativeValue;
 8015bb4:	2004      	movs	r0, #4
 8015bb6:	e7fc      	b.n	8015bb2 <read_uint+0x82>
                return Status_GcodeCommandValueNotInteger;
 8015bb8:	2017      	movs	r0, #23
 8015bba:	e7fa      	b.n	8015bb2 <read_uint+0x82>
        return Status_BadNumberFormat;
 8015bbc:	2002      	movs	r0, #2
 8015bbe:	e7f8      	b.n	8015bb2 <read_uint+0x82>
 8015bc0:	19999999 	.word	0x19999999

08015bc4 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
bool read_float (char *line, uint_fast8_t *char_counter, float *float_ptr)
{
 8015bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bc8:	4607      	mov	r7, r0
    char *ptr = line + *char_counter;
 8015bca:	6808      	ldr	r0, [r1, #0]
 8015bcc:	183b      	adds	r3, r7, r0
    uint_fast8_t ndigit = 0, c;
    uint32_t intval = 0;
    bool isnegative, isdecimal = false, ok = false;

    // Grab first character and increment pointer. No spaces assumed in line.
    c = *ptr++;
 8015bce:	f817 8000 	ldrb.w	r8, [r7, r0]

    // Capture initial sign character
    if ((isnegative = (c == '-')) || c == '+')
 8015bd2:	f1b8 0f2d 	cmp.w	r8, #45	@ 0x2d
 8015bd6:	d006      	beq.n	8015be6 <read_float+0x22>
 8015bd8:	f103 0c01 	add.w	ip, r3, #1
 8015bdc:	f1b8 0f2b 	cmp.w	r8, #43	@ 0x2b
 8015be0:	d001      	beq.n	8015be6 <read_float+0x22>
    c = *ptr++;
 8015be2:	4643      	mov	r3, r8
 8015be4:	e002      	b.n	8015bec <read_float+0x28>
        c = *ptr++;
 8015be6:	f103 0c02 	add.w	ip, r3, #2
 8015bea:	785b      	ldrb	r3, [r3, #1]
    c = *ptr++;
 8015bec:	2000      	movs	r0, #0
 8015bee:	4605      	mov	r5, r0
 8015bf0:	4604      	mov	r4, r0
 8015bf2:	4606      	mov	r6, r0
 8015bf4:	4686      	mov	lr, r0
 8015bf6:	e00b      	b.n	8015c10 <read_float+0x4c>
                ndigit++;
            if (ndigit <= MAX_INT_DIGITS) {
                if (isdecimal)
                    exp--;
                intval = (((intval << 2) + intval) << 1) + c; // intval * 10 + c
            } else if (!isdecimal)
 8015bf8:	b9e5      	cbnz	r5, 8015c34 <read_float+0x70>
                exp++;  // Drop overflow digits
 8015bfa:	f10e 0e01 	add.w	lr, lr, #1
            ok = true;
 8015bfe:	2001      	movs	r0, #1
 8015c00:	e004      	b.n	8015c0c <read_float+0x48>
        } else if (c == (uint_fast8_t)('.' - '0') && !isdecimal)
 8015c02:	f113 0f02 	cmn.w	r3, #2
 8015c06:	d117      	bne.n	8015c38 <read_float+0x74>
 8015c08:	b9b5      	cbnz	r5, 8015c38 <read_float+0x74>
            isdecimal = true;
 8015c0a:	2501      	movs	r5, #1
         else
            break;

        c = *ptr++;
 8015c0c:	f81c 3b01 	ldrb.w	r3, [ip], #1
    while(c) {
 8015c10:	b193      	cbz	r3, 8015c38 <read_float+0x74>
        c -= '0';
 8015c12:	3b30      	subs	r3, #48	@ 0x30
        if (c <= 9) {
 8015c14:	2b09      	cmp	r3, #9
 8015c16:	d8f4      	bhi.n	8015c02 <read_float+0x3e>
            if(c != 0 || intval)
 8015c18:	b903      	cbnz	r3, 8015c1c <read_float+0x58>
 8015c1a:	b104      	cbz	r4, 8015c1e <read_float+0x5a>
                ndigit++;
 8015c1c:	3601      	adds	r6, #1
            if (ndigit <= MAX_INT_DIGITS) {
 8015c1e:	2e09      	cmp	r6, #9
 8015c20:	d8ea      	bhi.n	8015bf8 <read_float+0x34>
                if (isdecimal)
 8015c22:	b10d      	cbz	r5, 8015c28 <read_float+0x64>
                    exp--;
 8015c24:	f10e 3eff 	add.w	lr, lr, #4294967295
                intval = (((intval << 2) + intval) << 1) + c; // intval * 10 + c
 8015c28:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8015c2c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
            ok = true;
 8015c30:	2001      	movs	r0, #1
 8015c32:	e7eb      	b.n	8015c0c <read_float+0x48>
 8015c34:	4628      	mov	r0, r5
 8015c36:	e7e9      	b.n	8015c0c <read_float+0x48>
    }

    // Return if no digits have been read.
    if (!ok)
 8015c38:	b190      	cbz	r0, 8015c60 <read_float+0x9c>
        return false;

    // Convert integer into floating point.
    float fval = (float)intval;
 8015c3a:	ee07 4a90 	vmov	s15, r4
 8015c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15

    // Apply decimal. Should perform no more than two floating point multiplications for the
    // expected range of E0 to E-4.
    if (fval != 0.0f) {
 8015c42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c4a:	d10b      	bne.n	8015c64 <read_float+0xa0>
            fval *= 10.0f;
        } while (--exp > 0);
    }

    // Assign floating point value with correct sign.
    *float_ptr = isnegative ? - fval : fval;
 8015c4c:	f1b8 0f2d 	cmp.w	r8, #45	@ 0x2d
 8015c50:	d027      	beq.n	8015ca2 <read_float+0xde>
 8015c52:	edc2 7a00 	vstr	s15, [r2]
    *char_counter = ptr - line - 1; // Set char_counter to next statement
 8015c56:	ebac 0c07 	sub.w	ip, ip, r7
 8015c5a:	f10c 33ff 	add.w	r3, ip, #4294967295
 8015c5e:	600b      	str	r3, [r1, #0]

    return true;
}
 8015c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (exp <= -2) {
 8015c64:	f1be 3fff 	cmp.w	lr, #4294967295
 8015c68:	da06      	bge.n	8015c78 <read_float+0xb4>
            fval *= 0.01f;
 8015c6a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8015ca8 <read_float+0xe4>
 8015c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
            exp += 2;
 8015c72:	f10e 0e02 	add.w	lr, lr, #2
 8015c76:	e7f5      	b.n	8015c64 <read_float+0xa0>
        if (exp < 0)
 8015c78:	f1be 0f00 	cmp.w	lr, #0
 8015c7c:	db0c      	blt.n	8015c98 <read_float+0xd4>
        else if (exp > 0) do {
 8015c7e:	f1be 0f00 	cmp.w	lr, #0
 8015c82:	dde3      	ble.n	8015c4c <read_float+0x88>
            fval *= 10.0f;
 8015c84:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8015c88:	ee67 7a87 	vmul.f32	s15, s15, s14
        } while (--exp > 0);
 8015c8c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015c90:	f1be 0f00 	cmp.w	lr, #0
 8015c94:	dcf6      	bgt.n	8015c84 <read_float+0xc0>
 8015c96:	e7d9      	b.n	8015c4c <read_float+0x88>
            fval *= 0.1f;
 8015c98:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8015cac <read_float+0xe8>
 8015c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015ca0:	e7d4      	b.n	8015c4c <read_float+0x88>
    *float_ptr = isnegative ? - fval : fval;
 8015ca2:	eef1 7a67 	vneg.f32	s15, s15
 8015ca6:	e7d4      	b.n	8015c52 <read_float+0x8e>
 8015ca8:	3c23d70a 	.word	0x3c23d70a
 8015cac:	3dcccccd 	.word	0x3dcccccd

08015cb0 <isintf>:

// Returns true if float value is a whole number (integer)
bool isintf (float value)
{
 8015cb0:	b508      	push	{r3, lr}
 8015cb2:	ed2d 8b02 	vpush	{d8}
 8015cb6:	eeb0 8a40 	vmov.f32	s16, s0
    return value != NAN && fabsf(value - truncf(value)) < 0.001f;
 8015cba:	f011 ff51 	bl	8027b60 <truncf>
 8015cbe:	ee38 8a40 	vsub.f32	s16, s16, s0
 8015cc2:	eeb0 8ac8 	vabs.f32	s16, s16
 8015cc6:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8015ce0 <isintf+0x30>
 8015cca:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 8015cd2:	bf4c      	ite	mi
 8015cd4:	2001      	movmi	r0, #1
 8015cd6:	2000      	movpl	r0, #0
 8015cd8:	ecbd 8b02 	vpop	{d8}
 8015cdc:	bd08      	pop	{r3, pc}
 8015cde:	bf00      	nop
 8015ce0:	3a83126f 	.word	0x3a83126f

08015ce4 <delay_sec>:

// Non-blocking delay function used for general operation and suspend features.
bool delay_sec (float seconds, delaymode_t mode)
{
 8015ce4:	b570      	push	{r4, r5, r6, lr}
 8015ce6:	4606      	mov	r6, r0
    bool ok = true;

    uint_fast16_t i = (uint_fast16_t)ceilf((1000.0f / DWELL_TIME_STEP) * seconds) + 1;
 8015ce8:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 8015cec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015cf0:	f011 fe8c 	bl	8027a0c <ceilf>
 8015cf4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8015cf8:	ee10 5a10 	vmov	r5, s0
 8015cfc:	3501      	adds	r5, #1
    bool ok = true;
 8015cfe:	2401      	movs	r4, #1

    while(--i && ok) {
 8015d00:	e00d      	b.n	8015d1e <delay_sec+0x3a>
        if(mode == DelayMode_Dwell)
            ok = protocol_execute_realtime();
        else // DelayMode_SysSuspende, xecute rt_system() only to avoid nesting suspend loops.
            ok = protocol_exec_rt_system() && !state_door_reopened(); // Bail, if safety door reopens.
 8015d02:	f001 fa91 	bl	8017228 <protocol_exec_rt_system>
 8015d06:	4604      	mov	r4, r0
 8015d08:	b188      	cbz	r0, 8015d2e <delay_sec+0x4a>
 8015d0a:	f009 f907 	bl	801ef1c <state_door_reopened>
 8015d0e:	b108      	cbz	r0, 8015d14 <delay_sec+0x30>
 8015d10:	2400      	movs	r4, #0
 8015d12:	e00c      	b.n	8015d2e <delay_sec+0x4a>
        if(ok)
            hal.delay_ms(DWELL_TIME_STEP, NULL); // Delay DWELL_TIME_STEP increment
 8015d14:	4b08      	ldr	r3, [pc, #32]	@ (8015d38 <delay_sec+0x54>)
 8015d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d18:	2100      	movs	r1, #0
 8015d1a:	2032      	movs	r0, #50	@ 0x32
 8015d1c:	4798      	blx	r3
    while(--i && ok) {
 8015d1e:	3d01      	subs	r5, #1
 8015d20:	d008      	beq.n	8015d34 <delay_sec+0x50>
 8015d22:	b13c      	cbz	r4, 8015d34 <delay_sec+0x50>
        if(mode == DelayMode_Dwell)
 8015d24:	2e00      	cmp	r6, #0
 8015d26:	d1ec      	bne.n	8015d02 <delay_sec+0x1e>
            ok = protocol_execute_realtime();
 8015d28:	f001 fda6 	bl	8017878 <protocol_execute_realtime>
 8015d2c:	4604      	mov	r4, r0
        if(ok)
 8015d2e:	2c00      	cmp	r4, #0
 8015d30:	d0f5      	beq.n	8015d1e <delay_sec+0x3a>
 8015d32:	e7ef      	b.n	8015d14 <delay_sec+0x30>
    }

    return ok;
}
 8015d34:	4620      	mov	r0, r4
 8015d36:	bd70      	pop	{r4, r5, r6, pc}
 8015d38:	20001a90 	.word	0x20001a90

08015d3c <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector (float *vector)
{
 8015d3c:	b510      	push	{r4, lr}
 8015d3e:	4604      	mov	r4, r0
    uint_fast8_t idx = N_AXIS;
    float magnitude = 0.0f, inv_magnitude;
 8015d40:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8015d90 <convert_delta_vector_to_unit_vector+0x54>
    uint_fast8_t idx = N_AXIS;
 8015d44:	2303      	movs	r3, #3
 8015d46:	e004      	b.n	8015d52 <convert_delta_vector_to_unit_vector+0x16>

    do {
        if (vector[--idx] != 0.0f)
            magnitude += vector[idx] * vector[idx];
 8015d48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015d4c:	ee30 0a27 	vadd.f32	s0, s0, s15
    } while(idx);
 8015d50:	b153      	cbz	r3, 8015d68 <convert_delta_vector_to_unit_vector+0x2c>
        if (vector[--idx] != 0.0f)
 8015d52:	3b01      	subs	r3, #1
 8015d54:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015d58:	edd2 7a00 	vldr	s15, [r2]
 8015d5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d64:	d0f4      	beq.n	8015d50 <convert_delta_vector_to_unit_vector+0x14>
 8015d66:	e7ef      	b.n	8015d48 <convert_delta_vector_to_unit_vector+0xc>

    idx = N_AXIS;
    magnitude = sqrtf(magnitude);
 8015d68:	f011 fd42 	bl	80277f0 <sqrtf>
    inv_magnitude = 1.0f / magnitude;
 8015d6c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015d70:	ee87 7a80 	vdiv.f32	s14, s15, s0
    idx = N_AXIS;
 8015d74:	2303      	movs	r3, #3

    do {
        vector[--idx] *= inv_magnitude;
 8015d76:	3b01      	subs	r3, #1
 8015d78:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015d7c:	edd2 7a00 	vldr	s15, [r2]
 8015d80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015d84:	edc2 7a00 	vstr	s15, [r2]
    } while(idx);
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d1f4      	bne.n	8015d76 <convert_delta_vector_to_unit_vector+0x3a>

    return magnitude;
}
 8015d8c:	bd10      	pop	{r4, pc}
 8015d8e:	bf00      	nop
 8015d90:	00000000 	.word	0x00000000

08015d94 <get_datetime>:

// parse ISO8601 datetime: YYYY-MM-DDTHH:MM:SSZxxx
struct tm *get_datetime (const char *s)
{
 8015d94:	b570      	push	{r4, r5, r6, lr}
 8015d96:	4604      	mov	r4, r0
    PROGMEM static const uint8_t mdays[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

    char *s1 = (char *)s, c;
    uint_fast16_t idx = 0, value = 0;

    memset(&dt, 0, sizeof(struct tm));
 8015d98:	4d49      	ldr	r5, [pc, #292]	@ (8015ec0 <get_datetime+0x12c>)
 8015d9a:	2224      	movs	r2, #36	@ 0x24
 8015d9c:	2100      	movs	r1, #0
 8015d9e:	4628      	mov	r0, r5
 8015da0:	f00e ffc5 	bl	8024d2e <memset>
    dt.tm_year = dt.tm_mon = dt.tm_mday = dt.tm_hour = dt.tm_min = dt.tm_sec = -1;
 8015da4:	f04f 33ff 	mov.w	r3, #4294967295
 8015da8:	602b      	str	r3, [r5, #0]
 8015daa:	606b      	str	r3, [r5, #4]
 8015dac:	60ab      	str	r3, [r5, #8]
 8015dae:	60eb      	str	r3, [r5, #12]
 8015db0:	612b      	str	r3, [r5, #16]
 8015db2:	616b      	str	r3, [r5, #20]
    uint_fast16_t idx = 0, value = 0;
 8015db4:	2200      	movs	r2, #0
 8015db6:	4611      	mov	r1, r2
 8015db8:	e005      	b.n	8015dc6 <get_datetime+0x32>

    do {
        c = *s1++;

        if(isdigit(c))
            value = (value * 10) + c - '0';
 8015dba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8015dbe:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8015dc2:	3a30      	subs	r2, #48	@ 0x30
                    break;
            }
            idx++;
            value = 0;
        }
    } while(c);
 8015dc4:	b1c3      	cbz	r3, 8015df8 <get_datetime+0x64>
        c = *s1++;
 8015dc6:	7823      	ldrb	r3, [r4, #0]
 8015dc8:	3401      	adds	r4, #1
        if(isdigit(c))
 8015dca:	483e      	ldr	r0, [pc, #248]	@ (8015ec4 <get_datetime+0x130>)
 8015dcc:	5cc0      	ldrb	r0, [r0, r3]
 8015dce:	f010 0f04 	tst.w	r0, #4
 8015dd2:	d1f2      	bne.n	8015dba <get_datetime+0x26>
        else if(!(c == '-' || c == ':' || c == 'T' || c == 'Z' || c == '\0'))
 8015dd4:	2b54      	cmp	r3, #84	@ 0x54
 8015dd6:	d004      	beq.n	8015de2 <get_datetime+0x4e>
 8015dd8:	d80a      	bhi.n	8015df0 <get_datetime+0x5c>
 8015dda:	2b2d      	cmp	r3, #45	@ 0x2d
 8015ddc:	d001      	beq.n	8015de2 <get_datetime+0x4e>
 8015dde:	2b3a      	cmp	r3, #58	@ 0x3a
 8015de0:	d108      	bne.n	8015df4 <get_datetime+0x60>
            switch(idx) {
 8015de2:	2905      	cmp	r1, #5
 8015de4:	d81a      	bhi.n	8015e1c <get_datetime+0x88>
 8015de6:	e8df f001 	tbb	[pc, r1]
 8015dea:	2917      	.short	0x2917
 8015dec:	5f585133 	.word	0x5f585133
 8015df0:	2b5a      	cmp	r3, #90	@ 0x5a
 8015df2:	d0f6      	beq.n	8015de2 <get_datetime+0x4e>
        else if(!(c == '-' || c == ':' || c == 'T' || c == 'Z' || c == '\0'))
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d0f4      	beq.n	8015de2 <get_datetime+0x4e>

    return (dt.tm_year | dt.tm_mon | dt.tm_mday | dt.tm_hour | dt.tm_min | dt.tm_sec) > 0 ? &dt : NULL;
 8015df8:	4a31      	ldr	r2, [pc, #196]	@ (8015ec0 <get_datetime+0x12c>)
 8015dfa:	6953      	ldr	r3, [r2, #20]
 8015dfc:	6911      	ldr	r1, [r2, #16]
 8015dfe:	430b      	orrs	r3, r1
 8015e00:	68d1      	ldr	r1, [r2, #12]
 8015e02:	430b      	orrs	r3, r1
 8015e04:	6891      	ldr	r1, [r2, #8]
 8015e06:	430b      	orrs	r3, r1
 8015e08:	6851      	ldr	r1, [r2, #4]
 8015e0a:	430b      	orrs	r3, r1
 8015e0c:	6812      	ldr	r2, [r2, #0]
 8015e0e:	4313      	orrs	r3, r2
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	dd52      	ble.n	8015eba <get_datetime+0x126>
 8015e14:	482a      	ldr	r0, [pc, #168]	@ (8015ec0 <get_datetime+0x12c>)
}
 8015e16:	bd70      	pop	{r4, r5, r6, pc}
                    if(c == '-' && value >= 1970 && value <= 2099)
 8015e18:	2b2d      	cmp	r3, #45	@ 0x2d
 8015e1a:	d002      	beq.n	8015e22 <get_datetime+0x8e>
            idx++;
 8015e1c:	3101      	adds	r1, #1
            value = 0;
 8015e1e:	2200      	movs	r2, #0
 8015e20:	e7d0      	b.n	8015dc4 <get_datetime+0x30>
                    if(c == '-' && value >= 1970 && value <= 2099)
 8015e22:	f240 70b1 	movw	r0, #1969	@ 0x7b1
 8015e26:	4282      	cmp	r2, r0
 8015e28:	d9f8      	bls.n	8015e1c <get_datetime+0x88>
 8015e2a:	f640 0033 	movw	r0, #2099	@ 0x833
 8015e2e:	4282      	cmp	r2, r0
 8015e30:	d8f4      	bhi.n	8015e1c <get_datetime+0x88>
                        dt.tm_year = value - 1900;
 8015e32:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
 8015e36:	4822      	ldr	r0, [pc, #136]	@ (8015ec0 <get_datetime+0x12c>)
 8015e38:	6142      	str	r2, [r0, #20]
 8015e3a:	e7ef      	b.n	8015e1c <get_datetime+0x88>
                    if(c == '-' && value >= 1 && value <= 12)
 8015e3c:	2b2d      	cmp	r3, #45	@ 0x2d
 8015e3e:	d1ed      	bne.n	8015e1c <get_datetime+0x88>
 8015e40:	2a00      	cmp	r2, #0
 8015e42:	d0eb      	beq.n	8015e1c <get_datetime+0x88>
 8015e44:	2a0c      	cmp	r2, #12
 8015e46:	d8e9      	bhi.n	8015e1c <get_datetime+0x88>
                        dt.tm_mon = value - 1;
 8015e48:	3a01      	subs	r2, #1
 8015e4a:	481d      	ldr	r0, [pc, #116]	@ (8015ec0 <get_datetime+0x12c>)
 8015e4c:	6102      	str	r2, [r0, #16]
 8015e4e:	e7e5      	b.n	8015e1c <get_datetime+0x88>
                    if(c == 'T' && value >= 1 && value <= (mdays[dt.tm_mon >= 0 ? dt.tm_mon : 0] + (dt.tm_mon == 1 && dt.tm_year != 100 && (dt.tm_year % 4) == 0 ? 1 : 0)))
 8015e50:	2b54      	cmp	r3, #84	@ 0x54
 8015e52:	d1e3      	bne.n	8015e1c <get_datetime+0x88>
 8015e54:	2a00      	cmp	r2, #0
 8015e56:	d0e1      	beq.n	8015e1c <get_datetime+0x88>
 8015e58:	4819      	ldr	r0, [pc, #100]	@ (8015ec0 <get_datetime+0x12c>)
 8015e5a:	6900      	ldr	r0, [r0, #16]
 8015e5c:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
 8015e60:	4e19      	ldr	r6, [pc, #100]	@ (8015ec8 <get_datetime+0x134>)
 8015e62:	5d75      	ldrb	r5, [r6, r5]
 8015e64:	2801      	cmp	r0, #1
 8015e66:	d006      	beq.n	8015e76 <get_datetime+0xe2>
 8015e68:	2000      	movs	r0, #0
 8015e6a:	4428      	add	r0, r5
 8015e6c:	4290      	cmp	r0, r2
 8015e6e:	d3d5      	bcc.n	8015e1c <get_datetime+0x88>
                        dt.tm_mday = value;
 8015e70:	4813      	ldr	r0, [pc, #76]	@ (8015ec0 <get_datetime+0x12c>)
 8015e72:	60c2      	str	r2, [r0, #12]
 8015e74:	e7d2      	b.n	8015e1c <get_datetime+0x88>
                    if(c == 'T' && value >= 1 && value <= (mdays[dt.tm_mon >= 0 ? dt.tm_mon : 0] + (dt.tm_mon == 1 && dt.tm_year != 100 && (dt.tm_year % 4) == 0 ? 1 : 0)))
 8015e76:	4e12      	ldr	r6, [pc, #72]	@ (8015ec0 <get_datetime+0x12c>)
 8015e78:	6976      	ldr	r6, [r6, #20]
 8015e7a:	2e64      	cmp	r6, #100	@ 0x64
 8015e7c:	d004      	beq.n	8015e88 <get_datetime+0xf4>
 8015e7e:	f016 0f03 	tst.w	r6, #3
 8015e82:	d0f2      	beq.n	8015e6a <get_datetime+0xd6>
 8015e84:	2000      	movs	r0, #0
 8015e86:	e7f0      	b.n	8015e6a <get_datetime+0xd6>
 8015e88:	2000      	movs	r0, #0
 8015e8a:	e7ee      	b.n	8015e6a <get_datetime+0xd6>
                    if(c == ':' && value <= 23)
 8015e8c:	2b3a      	cmp	r3, #58	@ 0x3a
 8015e8e:	d1c5      	bne.n	8015e1c <get_datetime+0x88>
 8015e90:	2a17      	cmp	r2, #23
 8015e92:	d8c3      	bhi.n	8015e1c <get_datetime+0x88>
                        dt.tm_hour = value;
 8015e94:	480a      	ldr	r0, [pc, #40]	@ (8015ec0 <get_datetime+0x12c>)
 8015e96:	6082      	str	r2, [r0, #8]
 8015e98:	e7c0      	b.n	8015e1c <get_datetime+0x88>
                    if(c == ':' && value <= 59)
 8015e9a:	2b3a      	cmp	r3, #58	@ 0x3a
 8015e9c:	d1be      	bne.n	8015e1c <get_datetime+0x88>
 8015e9e:	2a3b      	cmp	r2, #59	@ 0x3b
 8015ea0:	d8bc      	bhi.n	8015e1c <get_datetime+0x88>
                        dt.tm_min = value;
 8015ea2:	4807      	ldr	r0, [pc, #28]	@ (8015ec0 <get_datetime+0x12c>)
 8015ea4:	6042      	str	r2, [r0, #4]
 8015ea6:	e7b9      	b.n	8015e1c <get_datetime+0x88>
                    if((c == 'Z' || c == '\0') && value <= 59)
 8015ea8:	2b5a      	cmp	r3, #90	@ 0x5a
 8015eaa:	d001      	beq.n	8015eb0 <get_datetime+0x11c>
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d1b5      	bne.n	8015e1c <get_datetime+0x88>
 8015eb0:	2a3b      	cmp	r2, #59	@ 0x3b
 8015eb2:	d8b3      	bhi.n	8015e1c <get_datetime+0x88>
                        dt.tm_sec = value;
 8015eb4:	4802      	ldr	r0, [pc, #8]	@ (8015ec0 <get_datetime+0x12c>)
 8015eb6:	6002      	str	r2, [r0, #0]
 8015eb8:	e7b0      	b.n	8015e1c <get_datetime+0x88>
    return (dt.tm_year | dt.tm_mon | dt.tm_mday | dt.tm_hour | dt.tm_min | dt.tm_sec) > 0 ? &dt : NULL;
 8015eba:	2000      	movs	r0, #0
 8015ebc:	e7ab      	b.n	8015e16 <get_datetime+0x82>
 8015ebe:	bf00      	nop
 8015ec0:	20001f98 	.word	0x20001f98
 8015ec4:	080316c1 	.word	0x080316c1
 8015ec8:	0802be30 	.word	0x0802be30

08015ecc <calc_checksum>:

// calculate checksum byte for data
uint8_t calc_checksum (uint8_t *data, uint32_t size) {
 8015ecc:	4603      	mov	r3, r0

    uint8_t checksum = 0;
 8015ece:	2000      	movs	r0, #0

    while(size--) {
 8015ed0:	e008      	b.n	8015ee4 <calc_checksum+0x18>
        checksum = (checksum << 1) | (checksum >> 7);
 8015ed2:	09c2      	lsrs	r2, r0, #7
 8015ed4:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
        checksum += *(data++);
 8015ed8:	f813 1b01 	ldrb.w	r1, [r3], #1
 8015edc:	fa51 f282 	uxtab	r2, r1, r2
 8015ee0:	b2d0      	uxtb	r0, r2
    while(size--) {
 8015ee2:	4661      	mov	r1, ip
 8015ee4:	f101 3cff 	add.w	ip, r1, #4294967295
 8015ee8:	2900      	cmp	r1, #0
 8015eea:	d1f2      	bne.n	8015ed2 <calc_checksum+0x6>
    }

    return checksum;
}
 8015eec:	4770      	bx	lr

08015eee <dummy_handler>:
}

void dummy_handler (void)
{
    // NOOP
}
 8015eee:	4770      	bx	lr

08015ef0 <ram_get_byte>:
    {0, 0, 0} // list termination - do not remove
};

inline static uint8_t ram_get_byte (uint32_t addr)
{
    return nvsbuffer[addr];
 8015ef0:	4b01      	ldr	r3, [pc, #4]	@ (8015ef8 <ram_get_byte+0x8>)
 8015ef2:	681b      	ldr	r3, [r3, #0]
}
 8015ef4:	5c18      	ldrb	r0, [r3, r0]
 8015ef6:	4770      	bx	lr
 8015ef8:	20002004 	.word	0x20002004

08015efc <ram_put_byte>:

inline static void ram_put_byte (uint32_t addr, uint8_t new_value)
{
    if(addr == 0)
 8015efc:	4603      	mov	r3, r0
 8015efe:	b910      	cbnz	r0, 8015f06 <ram_put_byte+0xa>
        settings_dirty.version = true;
 8015f00:	4a0c      	ldr	r2, [pc, #48]	@ (8015f34 <ram_put_byte+0x38>)
 8015f02:	2001      	movs	r0, #1
 8015f04:	7050      	strb	r0, [r2, #1]
    dirty = dirty || nvsbuffer[addr] != new_value || addr == 0;
 8015f06:	4a0c      	ldr	r2, [pc, #48]	@ (8015f38 <ram_put_byte+0x3c>)
 8015f08:	7812      	ldrb	r2, [r2, #0]
 8015f0a:	b94a      	cbnz	r2, 8015f20 <ram_put_byte+0x24>
 8015f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8015f3c <ram_put_byte+0x40>)
 8015f0e:	6812      	ldr	r2, [r2, #0]
 8015f10:	5cd2      	ldrb	r2, [r2, r3]
 8015f12:	428a      	cmp	r2, r1
 8015f14:	d001      	beq.n	8015f1a <ram_put_byte+0x1e>
 8015f16:	2001      	movs	r0, #1
 8015f18:	e003      	b.n	8015f22 <ram_put_byte+0x26>
 8015f1a:	b943      	cbnz	r3, 8015f2e <ram_put_byte+0x32>
 8015f1c:	2001      	movs	r0, #1
 8015f1e:	e000      	b.n	8015f22 <ram_put_byte+0x26>
 8015f20:	2001      	movs	r0, #1
 8015f22:	4a05      	ldr	r2, [pc, #20]	@ (8015f38 <ram_put_byte+0x3c>)
 8015f24:	7010      	strb	r0, [r2, #0]
    nvsbuffer[addr] = new_value;
 8015f26:	4a05      	ldr	r2, [pc, #20]	@ (8015f3c <ram_put_byte+0x40>)
 8015f28:	6812      	ldr	r2, [r2, #0]
 8015f2a:	54d1      	strb	r1, [r2, r3]
}
 8015f2c:	4770      	bx	lr
    dirty = dirty || nvsbuffer[addr] != new_value || addr == 0;
 8015f2e:	2000      	movs	r0, #0
 8015f30:	e7f7      	b.n	8015f22 <ram_put_byte+0x26>
 8015f32:	bf00      	nop
 8015f34:	20001fcc 	.word	0x20001fcc
 8015f38:	20001fd4 	.word	0x20001fd4
 8015f3c:	20002004 	.word	0x20002004

08015f40 <memcpy_from_ram>:

    return NVS_TransferResult_OK;
}

static nvs_transfer_result_t memcpy_from_ram (uint8_t *destination, uint32_t source, uint32_t size, bool with_checksum)
{
 8015f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f44:	4604      	mov	r4, r0
 8015f46:	460d      	mov	r5, r1
 8015f48:	4616      	mov	r6, r2
 8015f4a:	461f      	mov	r7, r3
    if(hal.nvs.driver_area.address && source > hal.nvs.driver_area.address + hal.nvs.driver_area.size)
 8015f4c:	4b19      	ldr	r3, [pc, #100]	@ (8015fb4 <memcpy_from_ram+0x74>)
 8015f4e:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8015f52:	b12b      	cbz	r3, 8015f60 <memcpy_from_ram+0x20>
 8015f54:	4a17      	ldr	r2, [pc, #92]	@ (8015fb4 <memcpy_from_ram+0x74>)
 8015f56:	f8b2 2186 	ldrh.w	r2, [r2, #390]	@ 0x186
 8015f5a:	4413      	add	r3, r2
 8015f5c:	428b      	cmp	r3, r1
 8015f5e:	d302      	bcc.n	8015f66 <memcpy_from_ram+0x26>
        return physical_nvs.memcpy_from_nvs(destination, source, size, with_checksum);

    uint8_t checksum = with_checksum ? calc_checksum(&nvsbuffer[source], size) : 0;
 8015f60:	b947      	cbnz	r7, 8015f74 <memcpy_from_ram+0x34>
 8015f62:	2300      	movs	r3, #0

    for(; size > 0; size--)
 8015f64:	e017      	b.n	8015f96 <memcpy_from_ram+0x56>
        return physical_nvs.memcpy_from_nvs(destination, source, size, with_checksum);
 8015f66:	4b14      	ldr	r3, [pc, #80]	@ (8015fb8 <memcpy_from_ram+0x78>)
 8015f68:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8015f6c:	463b      	mov	r3, r7
 8015f6e:	4632      	mov	r2, r6
 8015f70:	47c0      	blx	r8
 8015f72:	e019      	b.n	8015fa8 <memcpy_from_ram+0x68>
    uint8_t checksum = with_checksum ? calc_checksum(&nvsbuffer[source], size) : 0;
 8015f74:	4b11      	ldr	r3, [pc, #68]	@ (8015fbc <memcpy_from_ram+0x7c>)
 8015f76:	6818      	ldr	r0, [r3, #0]
 8015f78:	4631      	mov	r1, r6
 8015f7a:	4428      	add	r0, r5
 8015f7c:	f7ff ffa6 	bl	8015ecc <calc_checksum>
 8015f80:	4603      	mov	r3, r0
 8015f82:	e008      	b.n	8015f96 <memcpy_from_ram+0x56>
        *(destination++) = ram_get_byte(source++);
 8015f84:	4620      	mov	r0, r4
    return nvsbuffer[addr];
 8015f86:	4a0d      	ldr	r2, [pc, #52]	@ (8015fbc <memcpy_from_ram+0x7c>)
 8015f88:	6812      	ldr	r2, [r2, #0]
 8015f8a:	5d52      	ldrb	r2, [r2, r5]
        *(destination++) = ram_get_byte(source++);
 8015f8c:	f800 2b01 	strb.w	r2, [r0], #1
    for(; size > 0; size--)
 8015f90:	3e01      	subs	r6, #1
        *(destination++) = ram_get_byte(source++);
 8015f92:	3501      	adds	r5, #1
 8015f94:	4604      	mov	r4, r0
    for(; size > 0; size--)
 8015f96:	2e00      	cmp	r6, #0
 8015f98:	d1f4      	bne.n	8015f84 <memcpy_from_ram+0x44>

    return with_checksum ? (checksum == ram_get_byte(source) ? NVS_TransferResult_OK : NVS_TransferResult_Failed) : NVS_TransferResult_OK;
 8015f9a:	b14f      	cbz	r7, 8015fb0 <memcpy_from_ram+0x70>
    return nvsbuffer[addr];
 8015f9c:	4a07      	ldr	r2, [pc, #28]	@ (8015fbc <memcpy_from_ram+0x7c>)
 8015f9e:	6812      	ldr	r2, [r2, #0]
 8015fa0:	5d52      	ldrb	r2, [r2, r5]
    return with_checksum ? (checksum == ram_get_byte(source) ? NVS_TransferResult_OK : NVS_TransferResult_Failed) : NVS_TransferResult_OK;
 8015fa2:	4293      	cmp	r3, r2
 8015fa4:	d002      	beq.n	8015fac <memcpy_from_ram+0x6c>
 8015fa6:	2000      	movs	r0, #0
}
 8015fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return with_checksum ? (checksum == ram_get_byte(source) ? NVS_TransferResult_OK : NVS_TransferResult_Failed) : NVS_TransferResult_OK;
 8015fac:	2002      	movs	r0, #2
 8015fae:	e7fb      	b.n	8015fa8 <memcpy_from_ram+0x68>
 8015fb0:	2002      	movs	r0, #2
 8015fb2:	e7f9      	b.n	8015fa8 <memcpy_from_ram+0x68>
 8015fb4:	20001a90 	.word	0x20001a90
 8015fb8:	20001fd8 	.word	0x20001fd8
 8015fbc:	20002004 	.word	0x20002004

08015fc0 <memcpy_to_ram>:
{
 8015fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fc4:	4607      	mov	r7, r0
 8015fc6:	460c      	mov	r4, r1
 8015fc8:	4615      	mov	r5, r2
 8015fca:	4698      	mov	r8, r3
    if(hal.nvs.driver_area.address && destination > hal.nvs.driver_area.address + hal.nvs.driver_area.size)
 8015fcc:	4b4c      	ldr	r3, [pc, #304]	@ (8016100 <memcpy_to_ram+0x140>)
 8015fce:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8015fd2:	b12b      	cbz	r3, 8015fe0 <memcpy_to_ram+0x20>
 8015fd4:	4a4a      	ldr	r2, [pc, #296]	@ (8016100 <memcpy_to_ram+0x140>)
 8015fd6:	f8b2 2186 	ldrh.w	r2, [r2, #390]	@ 0x186
 8015fda:	4413      	add	r3, r2
 8015fdc:	4283      	cmp	r3, r0
 8015fde:	d309      	bcc.n	8015ff4 <memcpy_to_ram+0x34>
    uint8_t checksum = with_checksum ? calc_checksum(source, size) : 0;
 8015fe0:	f1b8 0f00 	cmp.w	r8, #0
 8015fe4:	d10c      	bne.n	8016000 <memcpy_to_ram+0x40>
 8015fe6:	f04f 0900 	mov.w	r9, #0
    dirty = false;
 8015fea:	4b46      	ldr	r3, [pc, #280]	@ (8016104 <memcpy_to_ram+0x144>)
 8015fec:	2200      	movs	r2, #0
 8015fee:	701a      	strb	r2, [r3, #0]
    uint32_t dest = destination;
 8015ff0:	4638      	mov	r0, r7
    for(; size > 0; size--)
 8015ff2:	e012      	b.n	801601a <memcpy_to_ram+0x5a>
        return physical_nvs.memcpy_to_nvs(destination, source, size, with_checksum);
 8015ff4:	4b44      	ldr	r3, [pc, #272]	@ (8016108 <memcpy_to_ram+0x148>)
 8015ff6:	69de      	ldr	r6, [r3, #28]
 8015ff8:	4643      	mov	r3, r8
 8015ffa:	462a      	mov	r2, r5
 8015ffc:	47b0      	blx	r6
 8015ffe:	e077      	b.n	80160f0 <memcpy_to_ram+0x130>
    uint8_t checksum = with_checksum ? calc_checksum(source, size) : 0;
 8016000:	4629      	mov	r1, r5
 8016002:	4620      	mov	r0, r4
 8016004:	f7ff ff62 	bl	8015ecc <calc_checksum>
 8016008:	4681      	mov	r9, r0
 801600a:	e7ee      	b.n	8015fea <memcpy_to_ram+0x2a>
        ram_put_byte(dest++, *(source++));
 801600c:	1c46      	adds	r6, r0, #1
 801600e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016012:	f7ff ff73 	bl	8015efc <ram_put_byte>
    for(; size > 0; size--)
 8016016:	3d01      	subs	r5, #1
        ram_put_byte(dest++, *(source++));
 8016018:	4630      	mov	r0, r6
    for(; size > 0; size--)
 801601a:	2d00      	cmp	r5, #0
 801601c:	d1f6      	bne.n	801600c <memcpy_to_ram+0x4c>
    if(with_checksum)
 801601e:	f1b8 0f00 	cmp.w	r8, #0
 8016022:	d11d      	bne.n	8016060 <memcpy_to_ram+0xa0>
    if(settings_dirty.version || source == hal.nvs.driver_area.mem_address)
 8016024:	4b39      	ldr	r3, [pc, #228]	@ (801610c <memcpy_to_ram+0x14c>)
 8016026:	785b      	ldrb	r3, [r3, #1]
 8016028:	b923      	cbnz	r3, 8016034 <memcpy_to_ram+0x74>
 801602a:	4b35      	ldr	r3, [pc, #212]	@ (8016100 <memcpy_to_ram+0x140>)
 801602c:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8016030:	42a3      	cmp	r3, r4
 8016032:	d102      	bne.n	801603a <memcpy_to_ram+0x7a>
        dirty = true;
 8016034:	4b33      	ldr	r3, [pc, #204]	@ (8016104 <memcpy_to_ram+0x144>)
 8016036:	2201      	movs	r2, #1
 8016038:	701a      	strb	r2, [r3, #0]
    if(dirty && physical_nvs.type != NVS_None) {
 801603a:	4b32      	ldr	r3, [pc, #200]	@ (8016104 <memcpy_to_ram+0x144>)
 801603c:	781b      	ldrb	r3, [r3, #0]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d055      	beq.n	80160ee <memcpy_to_ram+0x12e>
 8016042:	4b31      	ldr	r3, [pc, #196]	@ (8016108 <memcpy_to_ram+0x148>)
 8016044:	781b      	ldrb	r3, [r3, #0]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d054      	beq.n	80160f4 <memcpy_to_ram+0x134>
        settings_dirty.is_dirty = true;
 801604a:	4b30      	ldr	r3, [pc, #192]	@ (801610c <memcpy_to_ram+0x14c>)
 801604c:	2201      	movs	r2, #1
 801604e:	701a      	strb	r2, [r3, #0]
        if(hal.nvs.driver_area.address && destination >= hal.nvs.driver_area.address)
 8016050:	4b2b      	ldr	r3, [pc, #172]	@ (8016100 <memcpy_to_ram+0x140>)
 8016052:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8016056:	b15b      	cbz	r3, 8016070 <memcpy_to_ram+0xb0>
 8016058:	42bb      	cmp	r3, r7
 801605a:	d905      	bls.n	8016068 <memcpy_to_ram+0xa8>
 801605c:	2300      	movs	r3, #0
 801605e:	e008      	b.n	8016072 <memcpy_to_ram+0xb2>
        ram_put_byte(dest, checksum);
 8016060:	4649      	mov	r1, r9
 8016062:	f7ff ff4b 	bl	8015efc <ram_put_byte>
 8016066:	e7dd      	b.n	8016024 <memcpy_to_ram+0x64>
            settings_dirty.driver_settings = true;
 8016068:	4b28      	ldr	r3, [pc, #160]	@ (801610c <memcpy_to_ram+0x14c>)
 801606a:	711a      	strb	r2, [r3, #4]
    return NVS_TransferResult_OK;
 801606c:	2002      	movs	r0, #2
            settings_dirty.driver_settings = true;
 801606e:	e03f      	b.n	80160f0 <memcpy_to_ram+0x130>
 8016070:	2300      	movs	r3, #0
                if(target[idx].addr == destination)
 8016072:	4a27      	ldr	r2, [pc, #156]	@ (8016110 <memcpy_to_ram+0x150>)
 8016074:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8016078:	42ba      	cmp	r2, r7
 801607a:	d006      	beq.n	801608a <memcpy_to_ram+0xca>
            } while(target[++idx].addr);
 801607c:	3301      	adds	r3, #1
 801607e:	b2db      	uxtb	r3, r3
 8016080:	4a23      	ldr	r2, [pc, #140]	@ (8016110 <memcpy_to_ram+0x150>)
 8016082:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8016086:	2a00      	cmp	r2, #0
 8016088:	d1f3      	bne.n	8016072 <memcpy_to_ram+0xb2>
            if(target[idx].addr) switch(target[idx].type) {
 801608a:	4619      	mov	r1, r3
 801608c:	4a20      	ldr	r2, [pc, #128]	@ (8016110 <memcpy_to_ram+0x150>)
 801608e:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8016092:	2a00      	cmp	r2, #0
 8016094:	d030      	beq.n	80160f8 <memcpy_to_ram+0x138>
 8016096:	4a1e      	ldr	r2, [pc, #120]	@ (8016110 <memcpy_to_ram+0x150>)
 8016098:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801609c:	7898      	ldrb	r0, [r3, #2]
 801609e:	2804      	cmp	r0, #4
 80160a0:	d82c      	bhi.n	80160fc <memcpy_to_ram+0x13c>
 80160a2:	e8df f000 	tbb	[pc, r0]
 80160a6:	2b03      	.short	0x2b03
 80160a8:	1308      	.short	0x1308
 80160aa:	1f          	.byte	0x1f
 80160ab:	00          	.byte	0x00
                    settings_dirty.global_settings = true;
 80160ac:	4b17      	ldr	r3, [pc, #92]	@ (801610c <memcpy_to_ram+0x14c>)
 80160ae:	2201      	movs	r2, #1
 80160b0:	709a      	strb	r2, [r3, #2]
    return NVS_TransferResult_OK;
 80160b2:	2002      	movs	r0, #2
                    break;
 80160b4:	e01c      	b.n	80160f0 <memcpy_to_ram+0x130>
                    settings_dirty.coord_data |= (1 << target[idx].offset);
 80160b6:	4c15      	ldr	r4, [pc, #84]	@ (801610c <memcpy_to_ram+0x14c>)
 80160b8:	88e3      	ldrh	r3, [r4, #6]
 80160ba:	4a15      	ldr	r2, [pc, #84]	@ (8016110 <memcpy_to_ram+0x150>)
 80160bc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80160c0:	78d1      	ldrb	r1, [r2, #3]
 80160c2:	2201      	movs	r2, #1
 80160c4:	408a      	lsls	r2, r1
 80160c6:	4313      	orrs	r3, r2
 80160c8:	80e3      	strh	r3, [r4, #6]
                    break;
 80160ca:	e011      	b.n	80160f0 <memcpy_to_ram+0x130>
                    settings_dirty.startup_lines |= (1 << target[idx].offset);
 80160cc:	480f      	ldr	r0, [pc, #60]	@ (801610c <memcpy_to_ram+0x14c>)
 80160ce:	7943      	ldrb	r3, [r0, #5]
 80160d0:	4a0f      	ldr	r2, [pc, #60]	@ (8016110 <memcpy_to_ram+0x150>)
 80160d2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80160d6:	78d1      	ldrb	r1, [r2, #3]
 80160d8:	2201      	movs	r2, #1
 80160da:	408a      	lsls	r2, r1
 80160dc:	4313      	orrs	r3, r2
 80160de:	7143      	strb	r3, [r0, #5]
    return NVS_TransferResult_OK;
 80160e0:	2002      	movs	r0, #2
                    break;
 80160e2:	e005      	b.n	80160f0 <memcpy_to_ram+0x130>
                    settings_dirty.build_info = true;
 80160e4:	4b09      	ldr	r3, [pc, #36]	@ (801610c <memcpy_to_ram+0x14c>)
 80160e6:	2201      	movs	r2, #1
 80160e8:	70da      	strb	r2, [r3, #3]
    return NVS_TransferResult_OK;
 80160ea:	2002      	movs	r0, #2
                    break;
 80160ec:	e000      	b.n	80160f0 <memcpy_to_ram+0x130>
    return NVS_TransferResult_OK;
 80160ee:	2002      	movs	r0, #2
}
 80160f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NVS_TransferResult_OK;
 80160f4:	2002      	movs	r0, #2
 80160f6:	e7fb      	b.n	80160f0 <memcpy_to_ram+0x130>
 80160f8:	2002      	movs	r0, #2
 80160fa:	e7f9      	b.n	80160f0 <memcpy_to_ram+0x130>
            if(target[idx].addr) switch(target[idx].type) {
 80160fc:	2002      	movs	r0, #2
 80160fe:	e7f7      	b.n	80160f0 <memcpy_to_ram+0x130>
 8016100:	20001a90 	.word	0x20001a90
 8016104:	20001fd4 	.word	0x20001fd4
 8016108:	20001fd8 	.word	0x20001fd8
 801610c:	20001fcc 	.word	0x20001fcc
 8016110:	0802beac 	.word	0x0802beac

08016114 <nvs_buffer_alloc>:

// Try to allocate RAM from heap for buffer/emulation.
bool nvs_buffer_alloc (void)
{
 8016114:	b510      	push	{r4, lr}
    assert(NVS_SIZE >= GRBL_NVS_SIZE);

    if((nvsbuffer = malloc(NVS_SIZE)))
 8016116:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801611a:	f00c fd3f 	bl	8022b9c <malloc>
 801611e:	4604      	mov	r4, r0
 8016120:	4b05      	ldr	r3, [pc, #20]	@ (8016138 <nvs_buffer_alloc+0x24>)
 8016122:	6018      	str	r0, [r3, #0]
 8016124:	b120      	cbz	r0, 8016130 <nvs_buffer_alloc+0x1c>
        memset(nvsbuffer, 0xFF, NVS_SIZE);
 8016126:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801612a:	21ff      	movs	r1, #255	@ 0xff
 801612c:	f00e fdff 	bl	8024d2e <memset>

    return nvsbuffer != NULL;
}
 8016130:	1e20      	subs	r0, r4, #0
 8016132:	bf18      	it	ne
 8016134:	2001      	movne	r0, #1
 8016136:	bd10      	pop	{r4, pc}
 8016138:	20002004 	.word	0x20002004

0801613c <nvs_buffer_init>:
}
//
// Switch over to RAM based copy.
// Changes to RAM based copy will be written to physical storage when grblHAL is in IDLE state.
bool nvs_buffer_init (void)
{
 801613c:	b570      	push	{r4, r5, r6, lr}
    hal.nvs.size = ((hal.nvs.size - 1) | 0x03) + 1; // Ensure NVS area ends on a word boundary
 801613e:	4a3e      	ldr	r2, [pc, #248]	@ (8016238 <nvs_buffer_init+0xfc>)
 8016140:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
 8016144:	3b01      	subs	r3, #1
 8016146:	f043 0303 	orr.w	r3, r3, #3
 801614a:	3301      	adds	r3, #1
 801614c:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178

    if(nvsbuffer) {
 8016150:	4b3a      	ldr	r3, [pc, #232]	@ (801623c <nvs_buffer_init+0x100>)
 8016152:	681d      	ldr	r5, [r3, #0]
 8016154:	2d00      	cmp	r5, #0
 8016156:	d069      	beq.n	801622c <nvs_buffer_init+0xf0>

        memcpy(&physical_nvs, &hal.nvs, sizeof(nvs_io_t)); // save pointers to physical storage handler functions
 8016158:	4e39      	ldr	r6, [pc, #228]	@ (8016240 <nvs_buffer_init+0x104>)
 801615a:	46b4      	mov	ip, r6
 801615c:	f502 74ba 	add.w	r4, r2, #372	@ 0x174
 8016160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016162:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016168:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801616c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8016170:	e88c 0007 	stmia.w	ip, {r0, r1, r2}

        // Copy physical storage content to RAM when available
        if(physical_nvs.type == NVS_Flash)
 8016174:	7833      	ldrb	r3, [r6, #0]
 8016176:	2b03      	cmp	r3, #3
 8016178:	d00c      	beq.n	8016194 <nvs_buffer_init+0x58>
            physical_nvs.memcpy_from_flash(nvsbuffer);
        else if(physical_nvs.type != NVS_None)
 801617a:	b173      	cbz	r3, 801619a <nvs_buffer_init+0x5e>
            physical_nvs.memcpy_from_nvs(nvsbuffer, 0, GRBL_NVS_SIZE + hal.nvs.driver_area.size, false);
 801617c:	4b30      	ldr	r3, [pc, #192]	@ (8016240 <nvs_buffer_init+0x104>)
 801617e:	6a1c      	ldr	r4, [r3, #32]
 8016180:	4b2d      	ldr	r3, [pc, #180]	@ (8016238 <nvs_buffer_init+0xfc>)
 8016182:	f8b3 2186 	ldrh.w	r2, [r3, #390]	@ 0x186
 8016186:	2300      	movs	r3, #0
 8016188:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801618c:	4619      	mov	r1, r3
 801618e:	4628      	mov	r0, r5
 8016190:	47a0      	blx	r4
 8016192:	e002      	b.n	801619a <nvs_buffer_init+0x5e>
            physical_nvs.memcpy_from_flash(nvsbuffer);
 8016194:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8016196:	4628      	mov	r0, r5
 8016198:	4798      	blx	r3

        // Switch hal to use RAM version of non-volatile storage data
        hal.nvs.type = NVS_Emulated;
 801619a:	4b27      	ldr	r3, [pc, #156]	@ (8016238 <nvs_buffer_init+0xfc>)
 801619c:	2204      	movs	r2, #4
 801619e:	f883 2174 	strb.w	r2, [r3, #372]	@ 0x174
        hal.nvs.get_byte = &ram_get_byte;
 80161a2:	4a28      	ldr	r2, [pc, #160]	@ (8016244 <nvs_buffer_init+0x108>)
 80161a4:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
        hal.nvs.put_byte = &ram_put_byte;
 80161a8:	4a27      	ldr	r2, [pc, #156]	@ (8016248 <nvs_buffer_init+0x10c>)
 80161aa:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
        hal.nvs.memcpy_to_nvs = &memcpy_to_ram;
 80161ae:	4a27      	ldr	r2, [pc, #156]	@ (801624c <nvs_buffer_init+0x110>)
 80161b0:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
        hal.nvs.memcpy_from_nvs = &memcpy_from_ram;
 80161b4:	4a26      	ldr	r2, [pc, #152]	@ (8016250 <nvs_buffer_init+0x114>)
 80161b6:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
        hal.nvs.memcpy_from_flash = NULL;
 80161ba:	2200      	movs	r2, #0
 80161bc:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
        hal.nvs.memcpy_to_flash = NULL;
 80161c0:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

        // If no physical storage available or if NVS import fails copy default settings to RAM
        // and write out to physical storage when available.
        if(physical_nvs.type == NVS_None || ram_get_byte(0) != SETTINGS_VERSION) {
 80161c4:	4b1e      	ldr	r3, [pc, #120]	@ (8016240 <nvs_buffer_init+0x104>)
 80161c6:	781b      	ldrb	r3, [r3, #0]
 80161c8:	b123      	cbz	r3, 80161d4 <nvs_buffer_init+0x98>
    return nvsbuffer[addr];
 80161ca:	4b1c      	ldr	r3, [pc, #112]	@ (801623c <nvs_buffer_init+0x100>)
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	781b      	ldrb	r3, [r3, #0]
        if(physical_nvs.type == NVS_None || ram_get_byte(0) != SETTINGS_VERSION) {
 80161d0:	2b16      	cmp	r3, #22
 80161d2:	d01b      	beq.n	801620c <nvs_buffer_init+0xd0>
            settings_restore(settings_all);
 80161d4:	4b1f      	ldr	r3, [pc, #124]	@ (8016254 <nvs_buffer_init+0x118>)
 80161d6:	7818      	ldrb	r0, [r3, #0]
 80161d8:	f007 faec 	bl	801d7b4 <settings_restore>
            if(physical_nvs.type == NVS_Flash)
 80161dc:	4b18      	ldr	r3, [pc, #96]	@ (8016240 <nvs_buffer_init+0x104>)
 80161de:	781b      	ldrb	r3, [r3, #0]
 80161e0:	2b03      	cmp	r3, #3
 80161e2:	d01d      	beq.n	8016220 <nvs_buffer_init+0xe4>
                physical_nvs.memcpy_to_flash(nvsbuffer);
            else if(physical_nvs.memcpy_to_nvs)
 80161e4:	4b16      	ldr	r3, [pc, #88]	@ (8016240 <nvs_buffer_init+0x104>)
 80161e6:	69dc      	ldr	r4, [r3, #28]
 80161e8:	b14c      	cbz	r4, 80161fe <nvs_buffer_init+0xc2>
                physical_nvs.memcpy_to_nvs(0, nvsbuffer, GRBL_NVS_SIZE + hal.nvs.driver_area.size, false);
 80161ea:	4b13      	ldr	r3, [pc, #76]	@ (8016238 <nvs_buffer_init+0xfc>)
 80161ec:	f8b3 2186 	ldrh.w	r2, [r3, #390]	@ 0x186
 80161f0:	2300      	movs	r3, #0
 80161f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80161f6:	4911      	ldr	r1, [pc, #68]	@ (801623c <nvs_buffer_init+0x100>)
 80161f8:	6809      	ldr	r1, [r1, #0]
 80161fa:	4618      	mov	r0, r3
 80161fc:	47a0      	blx	r4
            if(physical_nvs.type != NVS_None)
 80161fe:	4b10      	ldr	r3, [pc, #64]	@ (8016240 <nvs_buffer_init+0x104>)
 8016200:	781b      	ldrb	r3, [r3, #0]
 8016202:	b11b      	cbz	r3, 801620c <nvs_buffer_init+0xd0>
                grbl.report.status_message(Status_SettingReadFail);
 8016204:	4b14      	ldr	r3, [pc, #80]	@ (8016258 <nvs_buffer_init+0x11c>)
 8016206:	689b      	ldr	r3, [r3, #8]
 8016208:	2007      	movs	r0, #7
 801620a:	4798      	blx	r3
        }
    } else
        protocol_enqueue_foreground_task(report_warning, "Not enough heap for NVS buffer!");

    // Clear settings dirty flags
    memset(&settings_dirty, 0, sizeof(settings_dirty_t));
 801620c:	4b13      	ldr	r3, [pc, #76]	@ (801625c <nvs_buffer_init+0x120>)
 801620e:	2200      	movs	r2, #0
 8016210:	601a      	str	r2, [r3, #0]
 8016212:	605a      	str	r2, [r3, #4]

    return nvsbuffer != NULL;
 8016214:	4b09      	ldr	r3, [pc, #36]	@ (801623c <nvs_buffer_init+0x100>)
 8016216:	6818      	ldr	r0, [r3, #0]
}
 8016218:	1a80      	subs	r0, r0, r2
 801621a:	bf18      	it	ne
 801621c:	2001      	movne	r0, #1
 801621e:	bd70      	pop	{r4, r5, r6, pc}
                physical_nvs.memcpy_to_flash(nvsbuffer);
 8016220:	4b07      	ldr	r3, [pc, #28]	@ (8016240 <nvs_buffer_init+0x104>)
 8016222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016224:	4a05      	ldr	r2, [pc, #20]	@ (801623c <nvs_buffer_init+0x100>)
 8016226:	6810      	ldr	r0, [r2, #0]
 8016228:	4798      	blx	r3
 801622a:	e7e8      	b.n	80161fe <nvs_buffer_init+0xc2>
        protocol_enqueue_foreground_task(report_warning, "Not enough heap for NVS buffer!");
 801622c:	490c      	ldr	r1, [pc, #48]	@ (8016260 <nvs_buffer_init+0x124>)
 801622e:	480d      	ldr	r0, [pc, #52]	@ (8016264 <nvs_buffer_init+0x128>)
 8016230:	f001 fe0e 	bl	8017e50 <protocol_enqueue_foreground_task>
 8016234:	e7ea      	b.n	801620c <nvs_buffer_init+0xd0>
 8016236:	bf00      	nop
 8016238:	20001a90 	.word	0x20001a90
 801623c:	20002004 	.word	0x20002004
 8016240:	20001fd8 	.word	0x20001fd8
 8016244:	08015ef1 	.word	0x08015ef1
 8016248:	08015efd 	.word	0x08015efd
 801624c:	08015fc1 	.word	0x08015fc1
 8016250:	08015f41 	.word	0x08015f41
 8016254:	08030aa8 	.word	0x08030aa8
 8016258:	20001c78 	.word	0x20001c78
 801625c:	20001fcc 	.word	0x20001fcc
 8016260:	0802be74 	.word	0x0802be74
 8016264:	080197ef 	.word	0x080197ef

08016268 <nvs_buffer_sync_physical>:
}

// Write RAM changes to physical storage
void nvs_buffer_sync_physical (void)
{
    if(!settings_dirty.is_dirty)
 8016268:	4b6d      	ldr	r3, [pc, #436]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 801626a:	781b      	ldrb	r3, [r3, #0]
 801626c:	2b00      	cmp	r3, #0
 801626e:	f000 80d6 	beq.w	801641e <nvs_buffer_sync_physical+0x1b6>
{
 8016272:	b570      	push	{r4, r5, r6, lr}
        return;

    if(physical_nvs.memcpy_to_nvs) {
 8016274:	4b6b      	ldr	r3, [pc, #428]	@ (8016424 <nvs_buffer_sync_physical+0x1bc>)
 8016276:	69dc      	ldr	r4, [r3, #28]
 8016278:	2c00      	cmp	r4, #0
 801627a:	f000 80b5 	beq.w	80163e8 <nvs_buffer_sync_physical+0x180>

        if(settings_dirty.version)
 801627e:	4b68      	ldr	r3, [pc, #416]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 8016280:	785b      	ldrb	r3, [r3, #1]
 8016282:	b153      	cbz	r3, 801629a <nvs_buffer_sync_physical+0x32>
            settings_dirty.version = physical_nvs.memcpy_to_nvs(0, nvsbuffer, 1, false) != NVS_TransferResult_OK;
 8016284:	2300      	movs	r3, #0
 8016286:	2201      	movs	r2, #1
 8016288:	4967      	ldr	r1, [pc, #412]	@ (8016428 <nvs_buffer_sync_physical+0x1c0>)
 801628a:	6809      	ldr	r1, [r1, #0]
 801628c:	4618      	mov	r0, r3
 801628e:	47a0      	blx	r4
 8016290:	3802      	subs	r0, #2
 8016292:	bf18      	it	ne
 8016294:	2001      	movne	r0, #1
 8016296:	4b62      	ldr	r3, [pc, #392]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 8016298:	7058      	strb	r0, [r3, #1]

        if(settings_dirty.global_settings)
 801629a:	4b61      	ldr	r3, [pc, #388]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 801629c:	789b      	ldrb	r3, [r3, #2]
 801629e:	b173      	cbz	r3, 80162be <nvs_buffer_sync_physical+0x56>
            settings_dirty.global_settings = physical_nvs.memcpy_to_nvs(NVS_ADDR_GLOBAL, (uint8_t *)(nvsbuffer + NVS_ADDR_GLOBAL), sizeof(settings_t) + NVS_CRC_BYTES, false) != NVS_TransferResult_OK;
 80162a0:	4b60      	ldr	r3, [pc, #384]	@ (8016424 <nvs_buffer_sync_physical+0x1bc>)
 80162a2:	69dc      	ldr	r4, [r3, #28]
 80162a4:	4b60      	ldr	r3, [pc, #384]	@ (8016428 <nvs_buffer_sync_physical+0x1c0>)
 80162a6:	6819      	ldr	r1, [r3, #0]
 80162a8:	2300      	movs	r3, #0
 80162aa:	f240 126d 	movw	r2, #365	@ 0x16d
 80162ae:	3101      	adds	r1, #1
 80162b0:	2001      	movs	r0, #1
 80162b2:	47a0      	blx	r4
 80162b4:	3802      	subs	r0, #2
 80162b6:	bf18      	it	ne
 80162b8:	2001      	movne	r0, #1
 80162ba:	4b59      	ldr	r3, [pc, #356]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 80162bc:	7098      	strb	r0, [r3, #2]

        if(settings_dirty.build_info)
 80162be:	4b58      	ldr	r3, [pc, #352]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 80162c0:	78db      	ldrb	r3, [r3, #3]
 80162c2:	b17b      	cbz	r3, 80162e4 <nvs_buffer_sync_physical+0x7c>
            settings_dirty.build_info = physical_nvs.memcpy_to_nvs(NVS_ADDR_BUILD_INFO, (uint8_t *)(nvsbuffer + NVS_ADDR_BUILD_INFO), sizeof(stored_line_t) + NVS_CRC_BYTES, false) != NVS_TransferResult_OK;
 80162c4:	4b57      	ldr	r3, [pc, #348]	@ (8016424 <nvs_buffer_sync_physical+0x1bc>)
 80162c6:	69dc      	ldr	r4, [r3, #28]
 80162c8:	4b57      	ldr	r3, [pc, #348]	@ (8016428 <nvs_buffer_sync_physical+0x1c0>)
 80162ca:	6819      	ldr	r1, [r3, #0]
 80162cc:	2300      	movs	r3, #0
 80162ce:	2247      	movs	r2, #71	@ 0x47
 80162d0:	f201 31ae 	addw	r1, r1, #942	@ 0x3ae
 80162d4:	f240 30ae 	movw	r0, #942	@ 0x3ae
 80162d8:	47a0      	blx	r4
 80162da:	3802      	subs	r0, #2
 80162dc:	bf18      	it	ne
 80162de:	2001      	movne	r0, #1
 80162e0:	4b4f      	ldr	r3, [pc, #316]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 80162e2:	70d8      	strb	r0, [r3, #3]

        uint_fast8_t idx = N_STARTUP_LINE, offset;
        if(settings_dirty.startup_lines) do {
 80162e4:	4b4e      	ldr	r3, [pc, #312]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 80162e6:	795b      	ldrb	r3, [r3, #5]
 80162e8:	b30b      	cbz	r3, 801632e <nvs_buffer_sync_physical+0xc6>
        uint_fast8_t idx = N_STARTUP_LINE, offset;
 80162ea:	2402      	movs	r4, #2
            idx--;
 80162ec:	3c01      	subs	r4, #1
            if(bit_istrue(settings_dirty.startup_lines, bit(idx))) {
 80162ee:	4b4c      	ldr	r3, [pc, #304]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 80162f0:	795a      	ldrb	r2, [r3, #5]
 80162f2:	fa22 f304 	lsr.w	r3, r2, r4
 80162f6:	f013 0f01 	tst.w	r3, #1
 80162fa:	d016      	beq.n	801632a <nvs_buffer_sync_physical+0xc2>
                bit_false(settings_dirty.startup_lines, bit(idx));
 80162fc:	2301      	movs	r3, #1
 80162fe:	40a3      	lsls	r3, r4
 8016300:	43db      	mvns	r3, r3
 8016302:	b2dd      	uxtb	r5, r3
 8016304:	4013      	ands	r3, r2
 8016306:	4a46      	ldr	r2, [pc, #280]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 8016308:	7153      	strb	r3, [r2, #5]
                offset = NVS_ADDR_STARTUP_BLOCK + idx * (sizeof(stored_line_t) + NVS_CRC_BYTES);
 801630a:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 801630e:	ebc4 00c0 	rsb	r0, r4, r0, lsl #3
 8016312:	f200 301f 	addw	r0, r0, #799	@ 0x31f
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(stored_line_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
 8016316:	4b43      	ldr	r3, [pc, #268]	@ (8016424 <nvs_buffer_sync_physical+0x1bc>)
 8016318:	69de      	ldr	r6, [r3, #28]
 801631a:	4b43      	ldr	r3, [pc, #268]	@ (8016428 <nvs_buffer_sync_physical+0x1c0>)
 801631c:	6819      	ldr	r1, [r3, #0]
 801631e:	2300      	movs	r3, #0
 8016320:	2247      	movs	r2, #71	@ 0x47
 8016322:	4401      	add	r1, r0
 8016324:	47b0      	blx	r6
 8016326:	2802      	cmp	r0, #2
 8016328:	d006      	beq.n	8016338 <nvs_buffer_sync_physical+0xd0>
                    bit_false(settings_dirty.startup_lines, bit(idx));
            }
        } while(idx);
 801632a:	2c00      	cmp	r4, #0
 801632c:	d1de      	bne.n	80162ec <nvs_buffer_sync_physical+0x84>

        idx = N_CoordinateSystems;
        if(settings_dirty.coord_data) do {
 801632e:	4b3c      	ldr	r3, [pc, #240]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 8016330:	88db      	ldrh	r3, [r3, #6]
 8016332:	b33b      	cbz	r3, 8016384 <nvs_buffer_sync_physical+0x11c>
        idx = N_CoordinateSystems;
 8016334:	240c      	movs	r4, #12
 8016336:	e007      	b.n	8016348 <nvs_buffer_sync_physical+0xe0>
                    bit_false(settings_dirty.startup_lines, bit(idx));
 8016338:	4b39      	ldr	r3, [pc, #228]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 801633a:	795a      	ldrb	r2, [r3, #5]
 801633c:	4015      	ands	r5, r2
 801633e:	715d      	strb	r5, [r3, #5]
 8016340:	e7f3      	b.n	801632a <nvs_buffer_sync_physical+0xc2>
            if(bit_istrue(settings_dirty.coord_data, bit(idx))) {
                offset = NVS_ADDR_PARAMETERS + idx * (sizeof(coord_data_t) + NVS_CRC_BYTES);
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(coord_data_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
                    bit_false(settings_dirty.coord_data, bit(idx));
            }
        } while(idx--);
 8016342:	1e63      	subs	r3, r4, #1
 8016344:	b1f4      	cbz	r4, 8016384 <nvs_buffer_sync_physical+0x11c>
 8016346:	461c      	mov	r4, r3
            if(bit_istrue(settings_dirty.coord_data, bit(idx))) {
 8016348:	4b35      	ldr	r3, [pc, #212]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 801634a:	88db      	ldrh	r3, [r3, #6]
 801634c:	40e3      	lsrs	r3, r4
 801634e:	f013 0f01 	tst.w	r3, #1
 8016352:	d0f6      	beq.n	8016342 <nvs_buffer_sync_physical+0xda>
                offset = NVS_ADDR_PARAMETERS + idx * (sizeof(coord_data_t) + NVS_CRC_BYTES);
 8016354:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8016358:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 801635c:	f500 7000 	add.w	r0, r0, #512	@ 0x200
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(coord_data_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
 8016360:	4b30      	ldr	r3, [pc, #192]	@ (8016424 <nvs_buffer_sync_physical+0x1bc>)
 8016362:	69dd      	ldr	r5, [r3, #28]
 8016364:	4b30      	ldr	r3, [pc, #192]	@ (8016428 <nvs_buffer_sync_physical+0x1c0>)
 8016366:	6819      	ldr	r1, [r3, #0]
 8016368:	2300      	movs	r3, #0
 801636a:	220d      	movs	r2, #13
 801636c:	4401      	add	r1, r0
 801636e:	47a8      	blx	r5
 8016370:	2802      	cmp	r0, #2
 8016372:	d1e6      	bne.n	8016342 <nvs_buffer_sync_physical+0xda>
                    bit_false(settings_dirty.coord_data, bit(idx));
 8016374:	492a      	ldr	r1, [pc, #168]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 8016376:	88cb      	ldrh	r3, [r1, #6]
 8016378:	2201      	movs	r2, #1
 801637a:	40a2      	lsls	r2, r4
 801637c:	ea23 0302 	bic.w	r3, r3, r2
 8016380:	80cb      	strh	r3, [r1, #6]
 8016382:	e7de      	b.n	8016342 <nvs_buffer_sync_physical+0xda>

        if(settings_dirty.driver_settings) {
 8016384:	4b26      	ldr	r3, [pc, #152]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 8016386:	791b      	ldrb	r3, [r3, #4]
 8016388:	b193      	cbz	r3, 80163b0 <nvs_buffer_sync_physical+0x148>
            if(hal.nvs.driver_area.size > 0)
 801638a:	4b28      	ldr	r3, [pc, #160]	@ (801642c <nvs_buffer_sync_physical+0x1c4>)
 801638c:	f8b3 2186 	ldrh.w	r2, [r3, #390]	@ 0x186
 8016390:	b1e2      	cbz	r2, 80163cc <nvs_buffer_sync_physical+0x164>
                settings_dirty.driver_settings = physical_nvs.memcpy_to_nvs(hal.nvs.driver_area.address, (uint8_t *)(nvsbuffer + hal.nvs.driver_area.address), hal.nvs.driver_area.size, false) != NVS_TransferResult_OK;
 8016392:	4b24      	ldr	r3, [pc, #144]	@ (8016424 <nvs_buffer_sync_physical+0x1bc>)
 8016394:	69dc      	ldr	r4, [r3, #28]
 8016396:	4b25      	ldr	r3, [pc, #148]	@ (801642c <nvs_buffer_sync_physical+0x1c4>)
 8016398:	f8b3 0184 	ldrh.w	r0, [r3, #388]	@ 0x184
 801639c:	4b22      	ldr	r3, [pc, #136]	@ (8016428 <nvs_buffer_sync_physical+0x1c0>)
 801639e:	6819      	ldr	r1, [r3, #0]
 80163a0:	2300      	movs	r3, #0
 80163a2:	4401      	add	r1, r0
 80163a4:	47a0      	blx	r4
 80163a6:	3802      	subs	r0, #2
 80163a8:	bf18      	it	ne
 80163aa:	2001      	movne	r0, #1
 80163ac:	4b1c      	ldr	r3, [pc, #112]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 80163ae:	7118      	strb	r0, [r3, #4]
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(tool_data_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
                    bit_false(settings_dirty.tool_data, bit(idx));
            }
        } while(idx);
#endif
        settings_dirty.is_dirty = settings_dirty.coord_data ||
 80163b0:	4b1b      	ldr	r3, [pc, #108]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 80163b2:	88db      	ldrh	r3, [r3, #6]
                                   settings_dirty.global_settings ||
                                    settings_dirty.driver_settings ||
                                     settings_dirty.startup_lines ||
 80163b4:	b973      	cbnz	r3, 80163d4 <nvs_buffer_sync_physical+0x16c>
                                   settings_dirty.global_settings ||
 80163b6:	4b1a      	ldr	r3, [pc, #104]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 80163b8:	789b      	ldrb	r3, [r3, #2]
        settings_dirty.is_dirty = settings_dirty.coord_data ||
 80163ba:	b97b      	cbnz	r3, 80163dc <nvs_buffer_sync_physical+0x174>
                                    settings_dirty.driver_settings ||
 80163bc:	4b18      	ldr	r3, [pc, #96]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 80163be:	889b      	ldrh	r3, [r3, #4]
 80163c0:	b973      	cbnz	r3, 80163e0 <nvs_buffer_sync_physical+0x178>
#if N_TOOLS
                                      settings_dirty.tool_data ||
#endif
                                       settings_dirty.build_info;
 80163c2:	4b17      	ldr	r3, [pc, #92]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 80163c4:	78db      	ldrb	r3, [r3, #3]
                                     settings_dirty.startup_lines ||
 80163c6:	b16b      	cbz	r3, 80163e4 <nvs_buffer_sync_physical+0x17c>
 80163c8:	2201      	movs	r2, #1
 80163ca:	e004      	b.n	80163d6 <nvs_buffer_sync_physical+0x16e>
                settings_dirty.driver_settings = false;
 80163cc:	4b14      	ldr	r3, [pc, #80]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 80163ce:	2200      	movs	r2, #0
 80163d0:	711a      	strb	r2, [r3, #4]
 80163d2:	e7ed      	b.n	80163b0 <nvs_buffer_sync_physical+0x148>
                                     settings_dirty.startup_lines ||
 80163d4:	2201      	movs	r2, #1
        settings_dirty.is_dirty = settings_dirty.coord_data ||
 80163d6:	4b12      	ldr	r3, [pc, #72]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 80163d8:	701a      	strb	r2, [r3, #0]
            else if(--retries == 0)
                report_message("Settings write failed!", Message_Warning);
        } while(retries);
        memset(&settings_dirty, 0, sizeof(settings_dirty_t));
    }
}
 80163da:	bd70      	pop	{r4, r5, r6, pc}
                                     settings_dirty.startup_lines ||
 80163dc:	2201      	movs	r2, #1
 80163de:	e7fa      	b.n	80163d6 <nvs_buffer_sync_physical+0x16e>
 80163e0:	2201      	movs	r2, #1
 80163e2:	e7f8      	b.n	80163d6 <nvs_buffer_sync_physical+0x16e>
 80163e4:	2200      	movs	r2, #0
 80163e6:	e7f6      	b.n	80163d6 <nvs_buffer_sync_physical+0x16e>
    } else if(physical_nvs.memcpy_to_flash) {
 80163e8:	4b0e      	ldr	r3, [pc, #56]	@ (8016424 <nvs_buffer_sync_physical+0x1bc>)
 80163ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d0f4      	beq.n	80163da <nvs_buffer_sync_physical+0x172>
        uint_fast8_t retries = 4;
 80163f0:	2404      	movs	r4, #4
 80163f2:	e001      	b.n	80163f8 <nvs_buffer_sync_physical+0x190>
                retries = 0;
 80163f4:	2400      	movs	r4, #0
        } while(retries);
 80163f6:	b16c      	cbz	r4, 8016414 <nvs_buffer_sync_physical+0x1ac>
            if(physical_nvs.memcpy_to_flash(nvsbuffer))
 80163f8:	4b0a      	ldr	r3, [pc, #40]	@ (8016424 <nvs_buffer_sync_physical+0x1bc>)
 80163fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163fc:	4a0a      	ldr	r2, [pc, #40]	@ (8016428 <nvs_buffer_sync_physical+0x1c0>)
 80163fe:	6810      	ldr	r0, [r2, #0]
 8016400:	4798      	blx	r3
 8016402:	2800      	cmp	r0, #0
 8016404:	d1f6      	bne.n	80163f4 <nvs_buffer_sync_physical+0x18c>
            else if(--retries == 0)
 8016406:	3c01      	subs	r4, #1
 8016408:	d1f5      	bne.n	80163f6 <nvs_buffer_sync_physical+0x18e>
                report_message("Settings write failed!", Message_Warning);
 801640a:	2102      	movs	r1, #2
 801640c:	4808      	ldr	r0, [pc, #32]	@ (8016430 <nvs_buffer_sync_physical+0x1c8>)
 801640e:	f003 f993 	bl	8019738 <report_message>
 8016412:	e7f0      	b.n	80163f6 <nvs_buffer_sync_physical+0x18e>
        memset(&settings_dirty, 0, sizeof(settings_dirty_t));
 8016414:	4b02      	ldr	r3, [pc, #8]	@ (8016420 <nvs_buffer_sync_physical+0x1b8>)
 8016416:	2200      	movs	r2, #0
 8016418:	601a      	str	r2, [r3, #0]
 801641a:	605a      	str	r2, [r3, #4]
 801641c:	e7dd      	b.n	80163da <nvs_buffer_sync_physical+0x172>
 801641e:	4770      	bx	lr
 8016420:	20001fcc 	.word	0x20001fcc
 8016424:	20001fd8 	.word	0x20001fd8
 8016428:	20002004 	.word	0x20002004
 801642c:	20001a90 	.word	0x20001a90
 8016430:	0802be94 	.word	0x0802be94

08016434 <nvs_buffer_free>:
{
 8016434:	b508      	push	{r3, lr}
    if(nvsbuffer) {
 8016436:	4b05      	ldr	r3, [pc, #20]	@ (801644c <nvs_buffer_free+0x18>)
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	b12b      	cbz	r3, 8016448 <nvs_buffer_free+0x14>
        nvs_buffer_sync_physical();
 801643c:	f7ff ff14 	bl	8016268 <nvs_buffer_sync_physical>
        free(nvsbuffer);
 8016440:	4b02      	ldr	r3, [pc, #8]	@ (801644c <nvs_buffer_free+0x18>)
 8016442:	6818      	ldr	r0, [r3, #0]
 8016444:	f00c fbb2 	bl	8022bac <free>
}
 8016448:	bd08      	pop	{r3, pc}
 801644a:	bf00      	nop
 801644c:	20002004 	.word	0x20002004

08016450 <nvs_buffer_get_physical>:

nvs_io_t *nvs_buffer_get_physical (void)
{
    return hal.nvs.type == NVS_Emulated ? &physical_nvs : &hal.nvs;
 8016450:	4b04      	ldr	r3, [pc, #16]	@ (8016464 <nvs_buffer_get_physical+0x14>)
 8016452:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 8016456:	2b04      	cmp	r3, #4
 8016458:	d001      	beq.n	801645e <nvs_buffer_get_physical+0xe>
 801645a:	4803      	ldr	r0, [pc, #12]	@ (8016468 <nvs_buffer_get_physical+0x18>)
}
 801645c:	4770      	bx	lr
    return hal.nvs.type == NVS_Emulated ? &physical_nvs : &hal.nvs;
 801645e:	4803      	ldr	r0, [pc, #12]	@ (801646c <nvs_buffer_get_physical+0x1c>)
 8016460:	4770      	bx	lr
 8016462:	bf00      	nop
 8016464:	20001a90 	.word	0x20001a90
 8016468:	20001c04 	.word	0x20001c04
 801646c:	20001fd8 	.word	0x20001fd8

08016470 <enqueue_feed_override>:

static override_queue_t feed = {0}, spindle = {0}, coolant = {0};

ISR_CODE void ISR_FUNC(enqueue_feed_override)(uint8_t cmd)
{
    uint_fast8_t bptr = (feed.head + 1) & (OVERRIDE_BUFSIZE - 1);    // Get next head pointer
 8016470:	4a06      	ldr	r2, [pc, #24]	@ (801648c <enqueue_feed_override+0x1c>)
 8016472:	6813      	ldr	r3, [r2, #0]
 8016474:	3301      	adds	r3, #1
 8016476:	f003 030f 	and.w	r3, r3, #15

    if(bptr != feed.tail) {         // If not buffer full
 801647a:	6852      	ldr	r2, [r2, #4]
 801647c:	429a      	cmp	r2, r3
 801647e:	d004      	beq.n	801648a <enqueue_feed_override+0x1a>
        feed.buf[feed.head] = cmd;  // add data to buffer
 8016480:	4a02      	ldr	r2, [pc, #8]	@ (801648c <enqueue_feed_override+0x1c>)
 8016482:	6811      	ldr	r1, [r2, #0]
 8016484:	4411      	add	r1, r2
 8016486:	7208      	strb	r0, [r1, #8]
        feed.head = bptr;           // and update pointer
 8016488:	6013      	str	r3, [r2, #0]
    }
}
 801648a:	4770      	bx	lr
 801648c:	20002038 	.word	0x20002038

08016490 <get_feed_override>:

// Returns 0 if no commands enqueued
uint8_t get_feed_override (void)
{
    uint8_t data = 0;
    uint_fast8_t bptr = feed.tail;
 8016490:	4a07      	ldr	r2, [pc, #28]	@ (80164b0 <get_feed_override+0x20>)
 8016492:	6853      	ldr	r3, [r2, #4]

    if(bptr != feed.head) {
 8016494:	6812      	ldr	r2, [r2, #0]
 8016496:	429a      	cmp	r2, r3
 8016498:	d007      	beq.n	80164aa <get_feed_override+0x1a>
        data = feed.buf[bptr++];                    // Get next character, increment tmp pointer
 801649a:	1c5a      	adds	r2, r3, #1
 801649c:	4904      	ldr	r1, [pc, #16]	@ (80164b0 <get_feed_override+0x20>)
 801649e:	440b      	add	r3, r1
 80164a0:	7a18      	ldrb	r0, [r3, #8]
        feed.tail = bptr & (OVERRIDE_BUFSIZE - 1);  // and update pointer
 80164a2:	f002 020f 	and.w	r2, r2, #15
 80164a6:	604a      	str	r2, [r1, #4]
 80164a8:	4770      	bx	lr
    uint8_t data = 0;
 80164aa:	2000      	movs	r0, #0
    }

    return data;
}
 80164ac:	4770      	bx	lr
 80164ae:	bf00      	nop
 80164b0:	20002038 	.word	0x20002038

080164b4 <enqueue_spindle_override>:

ISR_CODE void ISR_FUNC(enqueue_spindle_override)(uint8_t cmd)
{
    uint_fast8_t bptr = (spindle.head + 1) & (OVERRIDE_BUFSIZE - 1);    // Get next head pointer
 80164b4:	4a06      	ldr	r2, [pc, #24]	@ (80164d0 <enqueue_spindle_override+0x1c>)
 80164b6:	6813      	ldr	r3, [r2, #0]
 80164b8:	3301      	adds	r3, #1
 80164ba:	f003 030f 	and.w	r3, r3, #15

    if(bptr != spindle.tail) {              // If not buffer full
 80164be:	6852      	ldr	r2, [r2, #4]
 80164c0:	429a      	cmp	r2, r3
 80164c2:	d004      	beq.n	80164ce <enqueue_spindle_override+0x1a>
        spindle.buf[spindle.head] = cmd;    // add data to buffer
 80164c4:	4a02      	ldr	r2, [pc, #8]	@ (80164d0 <enqueue_spindle_override+0x1c>)
 80164c6:	6811      	ldr	r1, [r2, #0]
 80164c8:	4411      	add	r1, r2
 80164ca:	7208      	strb	r0, [r1, #8]
        spindle.head = bptr;                // and update pointer
 80164cc:	6013      	str	r3, [r2, #0]
    }
}
 80164ce:	4770      	bx	lr
 80164d0:	20002020 	.word	0x20002020

080164d4 <get_spindle_override>:

// Returns 0 if no commands enqueued
uint8_t get_spindle_override (void)
{
    uint8_t data = 0;
    uint_fast8_t bptr = spindle.tail;
 80164d4:	4a07      	ldr	r2, [pc, #28]	@ (80164f4 <get_spindle_override+0x20>)
 80164d6:	6853      	ldr	r3, [r2, #4]

    if(bptr != spindle.head) {
 80164d8:	6812      	ldr	r2, [r2, #0]
 80164da:	429a      	cmp	r2, r3
 80164dc:	d007      	beq.n	80164ee <get_spindle_override+0x1a>
        data = spindle.buf[bptr++];                     // Get next character, increment tmp pointer
 80164de:	1c5a      	adds	r2, r3, #1
 80164e0:	4904      	ldr	r1, [pc, #16]	@ (80164f4 <get_spindle_override+0x20>)
 80164e2:	440b      	add	r3, r1
 80164e4:	7a18      	ldrb	r0, [r3, #8]
        spindle.tail = bptr & (OVERRIDE_BUFSIZE - 1);   // and update pointer
 80164e6:	f002 020f 	and.w	r2, r2, #15
 80164ea:	604a      	str	r2, [r1, #4]
 80164ec:	4770      	bx	lr
    uint8_t data = 0;
 80164ee:	2000      	movs	r0, #0
    }

    return data;
}
 80164f0:	4770      	bx	lr
 80164f2:	bf00      	nop
 80164f4:	20002020 	.word	0x20002020

080164f8 <enqueue_coolant_override>:

ISR_CODE void ISR_FUNC(enqueue_coolant_override)(uint8_t cmd)
{
    uint_fast8_t bptr = (coolant.head + 1) & (OVERRIDE_BUFSIZE - 1);    // Get next head pointer
 80164f8:	4a06      	ldr	r2, [pc, #24]	@ (8016514 <enqueue_coolant_override+0x1c>)
 80164fa:	6813      	ldr	r3, [r2, #0]
 80164fc:	3301      	adds	r3, #1
 80164fe:	f003 030f 	and.w	r3, r3, #15

    if(bptr != coolant.tail) {              // If not buffer full
 8016502:	6852      	ldr	r2, [r2, #4]
 8016504:	429a      	cmp	r2, r3
 8016506:	d004      	beq.n	8016512 <enqueue_coolant_override+0x1a>
        coolant.buf[coolant.head] = cmd;    // add data to buffer
 8016508:	4a02      	ldr	r2, [pc, #8]	@ (8016514 <enqueue_coolant_override+0x1c>)
 801650a:	6811      	ldr	r1, [r2, #0]
 801650c:	4411      	add	r1, r2
 801650e:	7208      	strb	r0, [r1, #8]
        coolant.head = bptr;                // and update pointer
 8016510:	6013      	str	r3, [r2, #0]
    }
}
 8016512:	4770      	bx	lr
 8016514:	20002008 	.word	0x20002008

08016518 <get_coolant_override>:

// Returns 0 if no commands enqueued
uint8_t get_coolant_override (void)
{
    uint8_t data = 0;
    uint_fast8_t bptr = coolant.tail;
 8016518:	4a07      	ldr	r2, [pc, #28]	@ (8016538 <get_coolant_override+0x20>)
 801651a:	6853      	ldr	r3, [r2, #4]

    if(bptr != coolant.head) {
 801651c:	6812      	ldr	r2, [r2, #0]
 801651e:	429a      	cmp	r2, r3
 8016520:	d007      	beq.n	8016532 <get_coolant_override+0x1a>
        data = coolant.buf[bptr++];                   // Get next character, increment tmp pointer
 8016522:	1c5a      	adds	r2, r3, #1
 8016524:	4904      	ldr	r1, [pc, #16]	@ (8016538 <get_coolant_override+0x20>)
 8016526:	440b      	add	r3, r1
 8016528:	7a18      	ldrb	r0, [r3, #8]
        coolant.tail = bptr & (OVERRIDE_BUFSIZE - 1); // and update pointer
 801652a:	f002 020f 	and.w	r2, r2, #15
 801652e:	604a      	str	r2, [r1, #4]
 8016530:	4770      	bx	lr
    uint8_t data = 0;
 8016532:	2000      	movs	r0, #0
    }

    return data;
}
 8016534:	4770      	bx	lr
 8016536:	bf00      	nop
 8016538:	20002008 	.word	0x20002008

0801653c <flush_override_buffers>:

void flush_override_buffers (void)
{
    feed.head = feed.tail = spindle.head = spindle.tail = coolant.head = coolant.tail = 0;
 801653c:	4a05      	ldr	r2, [pc, #20]	@ (8016554 <flush_override_buffers+0x18>)
 801653e:	2300      	movs	r3, #0
 8016540:	6053      	str	r3, [r2, #4]
 8016542:	6013      	str	r3, [r2, #0]
 8016544:	4a04      	ldr	r2, [pc, #16]	@ (8016558 <flush_override_buffers+0x1c>)
 8016546:	6053      	str	r3, [r2, #4]
 8016548:	6013      	str	r3, [r2, #0]
 801654a:	4a04      	ldr	r2, [pc, #16]	@ (801655c <flush_override_buffers+0x20>)
 801654c:	6053      	str	r3, [r2, #4]
 801654e:	6013      	str	r3, [r2, #0]
}
 8016550:	4770      	bx	lr
 8016552:	bf00      	nop
 8016554:	20002008 	.word	0x20002008
 8016558:	20002020 	.word	0x20002020
 801655c:	20002038 	.word	0x20002038

08016560 <limit_acceleration_by_axis_maximum>:
}

static inline float limit_acceleration_by_axis_maximum (float *unit_vec)
{
    uint_fast8_t idx = N_AXIS;
    float limit_value = SOME_LARGE_VALUE;
 8016560:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80165a8 <limit_acceleration_by_axis_maximum+0x48>
    uint_fast8_t idx = N_AXIS;
 8016564:	2303      	movs	r3, #3
 8016566:	e000      	b.n	801656a <limit_acceleration_by_axis_maximum+0xa>

    do {
        if (unit_vec[--idx] != 0.0f)  // Avoid divide by zero.
            limit_value = min(limit_value, fabsf(settings.axis[idx].acceleration / unit_vec[idx]));
    } while(idx);
 8016568:	b1e3      	cbz	r3, 80165a4 <limit_acceleration_by_axis_maximum+0x44>
        if (unit_vec[--idx] != 0.0f)  // Avoid divide by zero.
 801656a:	3b01      	subs	r3, #1
 801656c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8016570:	edd2 7a00 	vldr	s15, [r2]
 8016574:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801657c:	d0f4      	beq.n	8016568 <limit_acceleration_by_axis_maximum+0x8>
            limit_value = min(limit_value, fabsf(settings.axis[idx].acceleration / unit_vec[idx]));
 801657e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8016582:	4a0a      	ldr	r2, [pc, #40]	@ (80165ac <limit_acceleration_by_axis_maximum+0x4c>)
 8016584:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016588:	edd2 6a0e 	vldr	s13, [r2, #56]	@ 0x38
 801658c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016590:	eef0 7ac7 	vabs.f32	s15, s14
 8016594:	eef4 7ac0 	vcmpe.f32	s15, s0
 8016598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801659c:	dce4      	bgt.n	8016568 <limit_acceleration_by_axis_maximum+0x8>
 801659e:	eeb0 0a67 	vmov.f32	s0, s15
 80165a2:	e7e1      	b.n	8016568 <limit_acceleration_by_axis_maximum+0x8>

    return limit_value;
}
 80165a4:	4770      	bx	lr
 80165a6:	bf00      	nop
 80165a8:	7e967699 	.word	0x7e967699
 80165ac:	200024a8 	.word	0x200024a8

080165b0 <limit_max_rate_by_axis_maximum>:

static inline float limit_max_rate_by_axis_maximum (float *unit_vec)
{
    uint_fast8_t idx = N_AXIS;
    float limit_value = SOME_LARGE_VALUE;
 80165b0:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80165f8 <limit_max_rate_by_axis_maximum+0x48>
    uint_fast8_t idx = N_AXIS;
 80165b4:	2303      	movs	r3, #3
 80165b6:	e000      	b.n	80165ba <limit_max_rate_by_axis_maximum+0xa>

    do {
        if (unit_vec[--idx] != 0.0f)  // Avoid divide by zero.
            limit_value = min(limit_value, fabsf(settings.axis[idx].max_rate / unit_vec[idx]));
    } while(idx);
 80165b8:	b1e3      	cbz	r3, 80165f4 <limit_max_rate_by_axis_maximum+0x44>
        if (unit_vec[--idx] != 0.0f)  // Avoid divide by zero.
 80165ba:	3b01      	subs	r3, #1
 80165bc:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 80165c0:	edd2 7a00 	vldr	s15, [r2]
 80165c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80165c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165cc:	d0f4      	beq.n	80165b8 <limit_max_rate_by_axis_maximum+0x8>
            limit_value = min(limit_value, fabsf(settings.axis[idx].max_rate / unit_vec[idx]));
 80165ce:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80165d2:	4a0a      	ldr	r2, [pc, #40]	@ (80165fc <limit_max_rate_by_axis_maximum+0x4c>)
 80165d4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80165d8:	edd2 6a0d 	vldr	s13, [r2, #52]	@ 0x34
 80165dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80165e0:	eef0 7ac7 	vabs.f32	s15, s14
 80165e4:	eef4 7ac0 	vcmpe.f32	s15, s0
 80165e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165ec:	dce4      	bgt.n	80165b8 <limit_max_rate_by_axis_maximum+0x8>
 80165ee:	eeb0 0a67 	vmov.f32	s0, s15
 80165f2:	e7e1      	b.n	80165b8 <limit_max_rate_by_axis_maximum+0x8>

    return limit_value;
}
 80165f4:	4770      	bx	lr
 80165f6:	bf00      	nop
 80165f8:	7e967699 	.word	0x7e967699
 80165fc:	200024a8 	.word	0x200024a8

08016600 <plan_cleanup>:
{
 8016600:	b538      	push	{r3, r4, r5, lr}
 8016602:	4604      	mov	r4, r0
    if(block->message) {
 8016604:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8016606:	b140      	cbz	r0, 801661a <plan_cleanup+0x1a>
        free(block->message);
 8016608:	f00c fad0 	bl	8022bac <free>
        block->message = NULL;
 801660c:	2300      	movs	r3, #0
 801660e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8016610:	e003      	b.n	801661a <plan_cleanup+0x1a>
        output_command_t *next = block->output_commands->next;
 8016612:	6885      	ldr	r5, [r0, #8]
        free(block->output_commands);
 8016614:	f00c faca 	bl	8022bac <free>
        block->output_commands = next;
 8016618:	64e5      	str	r5, [r4, #76]	@ 0x4c
    while(block->output_commands) {
 801661a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801661c:	2800      	cmp	r0, #0
 801661e:	d1f8      	bne.n	8016612 <plan_cleanup+0x12>
}
 8016620:	bd38      	pop	{r3, r4, r5, pc}
	...

08016624 <plan_reset_buffer>:
{
 8016624:	b508      	push	{r3, lr}
    if(block_buffer_tail) {
 8016626:	4b0e      	ldr	r3, [pc, #56]	@ (8016660 <plan_reset_buffer+0x3c>)
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	b933      	cbnz	r3, 801663a <plan_reset_buffer+0x16>
 801662c:	e00b      	b.n	8016646 <plan_reset_buffer+0x22>
            plan_cleanup(block_buffer_tail);
 801662e:	f7ff ffe7 	bl	8016600 <plan_cleanup>
            block_buffer_tail = block_buffer_tail->next;
 8016632:	4b0b      	ldr	r3, [pc, #44]	@ (8016660 <plan_reset_buffer+0x3c>)
 8016634:	681a      	ldr	r2, [r3, #0]
 8016636:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8016638:	601a      	str	r2, [r3, #0]
        while(block_buffer_tail != block_buffer_head) {
 801663a:	4b09      	ldr	r3, [pc, #36]	@ (8016660 <plan_reset_buffer+0x3c>)
 801663c:	6818      	ldr	r0, [r3, #0]
 801663e:	4b09      	ldr	r3, [pc, #36]	@ (8016664 <plan_reset_buffer+0x40>)
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	4298      	cmp	r0, r3
 8016644:	d1f3      	bne.n	801662e <plan_reset_buffer+0xa>
    block_buffer_tail = block_buffer_head = block_buffer;   // Empty = tail == head
 8016646:	4b08      	ldr	r3, [pc, #32]	@ (8016668 <plan_reset_buffer+0x44>)
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	4a06      	ldr	r2, [pc, #24]	@ (8016664 <plan_reset_buffer+0x40>)
 801664c:	6013      	str	r3, [r2, #0]
 801664e:	4a04      	ldr	r2, [pc, #16]	@ (8016660 <plan_reset_buffer+0x3c>)
 8016650:	6013      	str	r3, [r2, #0]
    next_buffer_head = block_buffer_head->next;             // = next block
 8016652:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016654:	4a05      	ldr	r2, [pc, #20]	@ (801666c <plan_reset_buffer+0x48>)
 8016656:	6011      	str	r1, [r2, #0]
    block_buffer_planned = block_buffer_tail;               // = block_buffer_tail
 8016658:	4a05      	ldr	r2, [pc, #20]	@ (8016670 <plan_reset_buffer+0x4c>)
 801665a:	6013      	str	r3, [r2, #0]
}
 801665c:	bd08      	pop	{r3, pc}
 801665e:	bf00      	nop
 8016660:	20002078 	.word	0x20002078
 8016664:	20002074 	.word	0x20002074
 8016668:	2000207c 	.word	0x2000207c
 801666c:	20002070 	.word	0x20002070
 8016670:	2000206c 	.word	0x2000206c

08016674 <planner_recalculate>:
{
 8016674:	b570      	push	{r4, r5, r6, lr}
    plan_block_t *block = block_buffer_head->prev;
 8016676:	4b42      	ldr	r3, [pc, #264]	@ (8016780 <planner_recalculate+0x10c>)
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
    if (block == block_buffer_planned)
 801667c:	4b41      	ldr	r3, [pc, #260]	@ (8016784 <planner_recalculate+0x110>)
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	42b3      	cmp	r3, r6
 8016682:	d07b      	beq.n	801677c <planner_recalculate+0x108>
    current->entry_speed_sqr = min(current->max_entry_speed_sqr, 2.0f * current->acceleration * current->millimeters);
 8016684:	ed96 7a08 	vldr	s14, [r6, #32]
 8016688:	edd6 7a09 	vldr	s15, [r6, #36]	@ 0x24
 801668c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016690:	edd6 6a0a 	vldr	s13, [r6, #40]	@ 0x28
 8016694:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016698:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801669c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166a0:	d501      	bpl.n	80166a6 <planner_recalculate+0x32>
 80166a2:	eef0 7a47 	vmov.f32	s15, s14
 80166a6:	edc6 7a07 	vstr	s15, [r6, #28]
    block = block->prev;
 80166aa:	6d34      	ldr	r4, [r6, #80]	@ 0x50
    if (block == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 80166ac:	42a3      	cmp	r3, r4
 80166ae:	d111      	bne.n	80166d4 <planner_recalculate+0x60>
        if (block == block_buffer_tail)
 80166b0:	4b35      	ldr	r3, [pc, #212]	@ (8016788 <planner_recalculate+0x114>)
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	42a3      	cmp	r3, r4
 80166b6:	d003      	beq.n	80166c0 <planner_recalculate+0x4c>
    next = block_buffer_planned; // Begin at buffer planned pointer
 80166b8:	4b32      	ldr	r3, [pc, #200]	@ (8016784 <planner_recalculate+0x110>)
 80166ba:	681a      	ldr	r2, [r3, #0]
    block = block_buffer_planned->next;
 80166bc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
    while (block != block_buffer_head) {
 80166be:	e03c      	b.n	801673a <planner_recalculate+0xc6>
            st_update_plan_block_parameters();
 80166c0:	f009 fbb4 	bl	801fe2c <st_update_plan_block_parameters>
 80166c4:	e7f8      	b.n	80166b8 <planner_recalculate+0x44>
            st_update_plan_block_parameters();
 80166c6:	f009 fbb1 	bl	801fe2c <st_update_plan_block_parameters>
 80166ca:	e00c      	b.n	80166e6 <planner_recalculate+0x72>
            current->entry_speed_sqr = entry_speed_sqr < current->max_entry_speed_sqr ? entry_speed_sqr : current->max_entry_speed_sqr;
 80166cc:	ed84 7a07 	vstr	s14, [r4, #28]
 80166d0:	4626      	mov	r6, r4
 80166d2:	462c      	mov	r4, r5
    } else while (block != block_buffer_planned) { // Three or more plan-able blocks
 80166d4:	4b2b      	ldr	r3, [pc, #172]	@ (8016784 <planner_recalculate+0x110>)
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	42a3      	cmp	r3, r4
 80166da:	d0ed      	beq.n	80166b8 <planner_recalculate+0x44>
        block = block->prev;
 80166dc:	6d25      	ldr	r5, [r4, #80]	@ 0x50
        if (block == block_buffer_tail)
 80166de:	4b2a      	ldr	r3, [pc, #168]	@ (8016788 <planner_recalculate+0x114>)
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	42ab      	cmp	r3, r5
 80166e4:	d0ef      	beq.n	80166c6 <planner_recalculate+0x52>
        if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 80166e6:	edd4 7a07 	vldr	s15, [r4, #28]
 80166ea:	ed94 7a08 	vldr	s14, [r4, #32]
 80166ee:	eef4 7a47 	vcmp.f32	s15, s14
 80166f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166f6:	d0eb      	beq.n	80166d0 <planner_recalculate+0x5c>
            entry_speed_sqr = next->entry_speed_sqr + 2.0f * current->acceleration * current->millimeters;
 80166f8:	edd6 6a07 	vldr	s13, [r6, #28]
 80166fc:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 8016700:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016704:	ed94 6a0a 	vldr	s12, [r4, #40]	@ 0x28
 8016708:	ee67 7a86 	vmul.f32	s15, s15, s12
 801670c:	ee76 7aa7 	vadd.f32	s15, s13, s15
            current->entry_speed_sqr = entry_speed_sqr < current->max_entry_speed_sqr ? entry_speed_sqr : current->max_entry_speed_sqr;
 8016710:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016718:	ddd8      	ble.n	80166cc <planner_recalculate+0x58>
 801671a:	eeb0 7a67 	vmov.f32	s14, s15
 801671e:	e7d5      	b.n	80166cc <planner_recalculate+0x58>
        if (next->entry_speed_sqr == next->max_entry_speed_sqr)
 8016720:	ed93 7a07 	vldr	s14, [r3, #28]
 8016724:	edd3 7a08 	vldr	s15, [r3, #32]
 8016728:	eeb4 7a67 	vcmp.f32	s14, s15
 801672c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016730:	d101      	bne.n	8016736 <planner_recalculate+0xc2>
            block_buffer_planned = block;
 8016732:	4a14      	ldr	r2, [pc, #80]	@ (8016784 <planner_recalculate+0x110>)
 8016734:	6013      	str	r3, [r2, #0]
        next = block;
 8016736:	461a      	mov	r2, r3
        block = block->next;
 8016738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    while (block != block_buffer_head) {
 801673a:	4911      	ldr	r1, [pc, #68]	@ (8016780 <planner_recalculate+0x10c>)
 801673c:	6809      	ldr	r1, [r1, #0]
 801673e:	4299      	cmp	r1, r3
 8016740:	d01c      	beq.n	801677c <planner_recalculate+0x108>
        if (current->entry_speed_sqr < next->entry_speed_sqr) {
 8016742:	edd2 7a07 	vldr	s15, [r2, #28]
 8016746:	edd3 6a07 	vldr	s13, [r3, #28]
 801674a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801674e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016752:	d5e5      	bpl.n	8016720 <planner_recalculate+0xac>
            entry_speed_sqr = current->entry_speed_sqr + 2.0f * current->acceleration * current->millimeters;
 8016754:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 8016758:	ee37 7a07 	vadd.f32	s14, s14, s14
 801675c:	ed92 6a0a 	vldr	s12, [r2, #40]	@ 0x28
 8016760:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016764:	ee77 7a87 	vadd.f32	s15, s15, s14
            if (entry_speed_sqr < next->entry_speed_sqr) {
 8016768:	eef4 6ae7 	vcmpe.f32	s13, s15
 801676c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016770:	ddd6      	ble.n	8016720 <planner_recalculate+0xac>
                next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 8016772:	edc3 7a07 	vstr	s15, [r3, #28]
                block_buffer_planned = block; // Set optimal plan pointer.
 8016776:	4a03      	ldr	r2, [pc, #12]	@ (8016784 <planner_recalculate+0x110>)
 8016778:	6013      	str	r3, [r2, #0]
 801677a:	e7d1      	b.n	8016720 <planner_recalculate+0xac>
}
 801677c:	bd70      	pop	{r4, r5, r6, pc}
 801677e:	bf00      	nop
 8016780:	20002074 	.word	0x20002074
 8016784:	2000206c 	.word	0x2000206c
 8016788:	20002078 	.word	0x20002078

0801678c <plan_get_buffer_size>:
}
 801678c:	4b01      	ldr	r3, [pc, #4]	@ (8016794 <plan_get_buffer_size+0x8>)
 801678e:	6818      	ldr	r0, [r3, #0]
 8016790:	4770      	bx	lr
 8016792:	bf00      	nop
 8016794:	20002080 	.word	0x20002080

08016798 <plan_reset>:
{
 8016798:	b510      	push	{r4, lr}
    if(block_buffer == NULL) {
 801679a:	4b37      	ldr	r3, [pc, #220]	@ (8016878 <plan_reset+0xe0>)
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	b16b      	cbz	r3, 80167bc <plan_reset+0x24>
    if(block_buffer_size != settings.planner_buffer_blocks)
 80167a0:	4b36      	ldr	r3, [pc, #216]	@ (801687c <plan_reset+0xe4>)
 80167a2:	8ada      	ldrh	r2, [r3, #22]
 80167a4:	4b36      	ldr	r3, [pc, #216]	@ (8016880 <plan_reset+0xe8>)
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	429a      	cmp	r2, r3
 80167aa:	d121      	bne.n	80167f0 <plan_reset+0x58>
    if(block_buffer == NULL)
 80167ac:	4b32      	ldr	r3, [pc, #200]	@ (8016878 <plan_reset+0xe0>)
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d05e      	beq.n	8016872 <plan_reset+0xda>
    if(block_buffer_tail) {
 80167b4:	4b33      	ldr	r3, [pc, #204]	@ (8016884 <plan_reset+0xec>)
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	bb2b      	cbnz	r3, 8016806 <plan_reset+0x6e>
 80167ba:	e02d      	b.n	8016818 <plan_reset+0x80>
        block_buffer_size = settings.planner_buffer_blocks;
 80167bc:	4b2f      	ldr	r3, [pc, #188]	@ (801687c <plan_reset+0xe4>)
 80167be:	8ada      	ldrh	r2, [r3, #22]
 80167c0:	4b2f      	ldr	r3, [pc, #188]	@ (8016880 <plan_reset+0xe8>)
 80167c2:	601a      	str	r2, [r3, #0]
        while((block_buffer = malloc((block_buffer_size + 1) * sizeof(plan_block_t))) == NULL) {
 80167c4:	4b2e      	ldr	r3, [pc, #184]	@ (8016880 <plan_reset+0xe8>)
 80167c6:	681c      	ldr	r4, [r3, #0]
 80167c8:	2058      	movs	r0, #88	@ 0x58
 80167ca:	fb04 0000 	mla	r0, r4, r0, r0
 80167ce:	f00c f9e5 	bl	8022b9c <malloc>
 80167d2:	4b29      	ldr	r3, [pc, #164]	@ (8016878 <plan_reset+0xe0>)
 80167d4:	6018      	str	r0, [r3, #0]
 80167d6:	2800      	cmp	r0, #0
 80167d8:	d1e2      	bne.n	80167a0 <plan_reset+0x8>
            if(block_buffer_size > 40)
 80167da:	2c28      	cmp	r4, #40	@ 0x28
 80167dc:	d9e0      	bls.n	80167a0 <plan_reset+0x8>
                block_buffer_size -= block_buffer_size >= 250 ? 100 : 10;
 80167de:	2cf9      	cmp	r4, #249	@ 0xf9
 80167e0:	d904      	bls.n	80167ec <plan_reset+0x54>
 80167e2:	2364      	movs	r3, #100	@ 0x64
 80167e4:	1ae4      	subs	r4, r4, r3
 80167e6:	4b26      	ldr	r3, [pc, #152]	@ (8016880 <plan_reset+0xe8>)
 80167e8:	601c      	str	r4, [r3, #0]
 80167ea:	e7eb      	b.n	80167c4 <plan_reset+0x2c>
 80167ec:	230a      	movs	r3, #10
 80167ee:	e7f9      	b.n	80167e4 <plan_reset+0x4c>
        protocol_enqueue_foreground_task(report_plain, "Planner buffer size was reduced!");
 80167f0:	4925      	ldr	r1, [pc, #148]	@ (8016888 <plan_reset+0xf0>)
 80167f2:	4826      	ldr	r0, [pc, #152]	@ (801688c <plan_reset+0xf4>)
 80167f4:	f001 fb2c 	bl	8017e50 <protocol_enqueue_foreground_task>
 80167f8:	e7d8      	b.n	80167ac <plan_reset+0x14>
            plan_cleanup(block_buffer_tail);
 80167fa:	f7ff ff01 	bl	8016600 <plan_cleanup>
            block_buffer_tail = block_buffer_tail->next;
 80167fe:	4b21      	ldr	r3, [pc, #132]	@ (8016884 <plan_reset+0xec>)
 8016800:	681a      	ldr	r2, [r3, #0]
 8016802:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8016804:	601a      	str	r2, [r3, #0]
        while(block_buffer_tail != block_buffer_head) {
 8016806:	4b1f      	ldr	r3, [pc, #124]	@ (8016884 <plan_reset+0xec>)
 8016808:	6818      	ldr	r0, [r3, #0]
 801680a:	4b21      	ldr	r3, [pc, #132]	@ (8016890 <plan_reset+0xf8>)
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	4298      	cmp	r0, r3
 8016810:	d1f3      	bne.n	80167fa <plan_reset+0x62>
        block_buffer_tail = NULL;
 8016812:	4b1c      	ldr	r3, [pc, #112]	@ (8016884 <plan_reset+0xec>)
 8016814:	2200      	movs	r2, #0
 8016816:	601a      	str	r2, [r3, #0]
    memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 8016818:	4a1e      	ldr	r2, [pc, #120]	@ (8016894 <plan_reset+0xfc>)
 801681a:	2300      	movs	r3, #0
 801681c:	6013      	str	r3, [r2, #0]
 801681e:	6053      	str	r3, [r2, #4]
 8016820:	6093      	str	r3, [r2, #8]
 8016822:	60d3      	str	r3, [r2, #12]
 8016824:	6113      	str	r3, [r2, #16]
 8016826:	6153      	str	r3, [r2, #20]
 8016828:	6193      	str	r3, [r2, #24]
    for(idx = 0 ; idx <= block_buffer_size ; idx++) {
 801682a:	e010      	b.n	801684e <plan_reset+0xb6>
        block_buffer[idx].prev = &block_buffer[idx == 0 ? block_buffer_size : idx - 1];
 801682c:	2258      	movs	r2, #88	@ 0x58
 801682e:	fb03 f202 	mul.w	r2, r3, r2
 8016832:	3a58      	subs	r2, #88	@ 0x58
 8016834:	2058      	movs	r0, #88	@ 0x58
 8016836:	fb00 1003 	mla	r0, r0, r3, r1
 801683a:	440a      	add	r2, r1
 801683c:	6502      	str	r2, [r0, #80]	@ 0x50
        block_buffer[idx].next = &block_buffer[idx == block_buffer_size ? 0 : idx + 1];
 801683e:	429c      	cmp	r4, r3
 8016840:	d011      	beq.n	8016866 <plan_reset+0xce>
 8016842:	2258      	movs	r2, #88	@ 0x58
 8016844:	fb03 2202 	mla	r2, r3, r2, r2
 8016848:	4411      	add	r1, r2
 801684a:	6541      	str	r1, [r0, #84]	@ 0x54
    for(idx = 0 ; idx <= block_buffer_size ; idx++) {
 801684c:	3301      	adds	r3, #1
 801684e:	4a0c      	ldr	r2, [pc, #48]	@ (8016880 <plan_reset+0xe8>)
 8016850:	6814      	ldr	r4, [r2, #0]
 8016852:	429c      	cmp	r4, r3
 8016854:	d309      	bcc.n	801686a <plan_reset+0xd2>
        block_buffer[idx].prev = &block_buffer[idx == 0 ? block_buffer_size : idx - 1];
 8016856:	4a08      	ldr	r2, [pc, #32]	@ (8016878 <plan_reset+0xe0>)
 8016858:	6811      	ldr	r1, [r2, #0]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d1e6      	bne.n	801682c <plan_reset+0x94>
 801685e:	2258      	movs	r2, #88	@ 0x58
 8016860:	fb04 f202 	mul.w	r2, r4, r2
 8016864:	e7e6      	b.n	8016834 <plan_reset+0x9c>
        block_buffer[idx].next = &block_buffer[idx == block_buffer_size ? 0 : idx + 1];
 8016866:	2200      	movs	r2, #0
 8016868:	e7ee      	b.n	8016848 <plan_reset+0xb0>
    plan_reset_buffer();
 801686a:	f7ff fedb 	bl	8016624 <plan_reset_buffer>
    return true;
 801686e:	2001      	movs	r0, #1
}
 8016870:	bd10      	pop	{r4, pc}
        return false;
 8016872:	2000      	movs	r0, #0
 8016874:	e7fc      	b.n	8016870 <plan_reset+0xd8>
 8016876:	bf00      	nop
 8016878:	2000207c 	.word	0x2000207c
 801687c:	200024a8 	.word	0x200024a8
 8016880:	20002080 	.word	0x20002080
 8016884:	20002078 	.word	0x20002078
 8016888:	0802bef0 	.word	0x0802bef0
 801688c:	080197e5 	.word	0x080197e5
 8016890:	20002074 	.word	0x20002074
 8016894:	20002050 	.word	0x20002050

08016898 <plan_discard_current_block>:
{
 8016898:	b508      	push	{r3, lr}
    if (block_buffer_tail != block_buffer_head) { // Discard non-empty buffer.
 801689a:	4b0b      	ldr	r3, [pc, #44]	@ (80168c8 <plan_discard_current_block+0x30>)
 801689c:	6818      	ldr	r0, [r3, #0]
 801689e:	4b0b      	ldr	r3, [pc, #44]	@ (80168cc <plan_discard_current_block+0x34>)
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	4298      	cmp	r0, r3
 80168a4:	d00a      	beq.n	80168bc <plan_discard_current_block+0x24>
        plan_cleanup(block_buffer_tail);
 80168a6:	f7ff feab 	bl	8016600 <plan_cleanup>
        if (block_buffer_tail == block_buffer_planned)
 80168aa:	4b07      	ldr	r3, [pc, #28]	@ (80168c8 <plan_discard_current_block+0x30>)
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	4a08      	ldr	r2, [pc, #32]	@ (80168d0 <plan_discard_current_block+0x38>)
 80168b0:	6812      	ldr	r2, [r2, #0]
 80168b2:	4293      	cmp	r3, r2
 80168b4:	d003      	beq.n	80168be <plan_discard_current_block+0x26>
        block_buffer_tail = block_buffer_tail->next;
 80168b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80168b8:	4b03      	ldr	r3, [pc, #12]	@ (80168c8 <plan_discard_current_block+0x30>)
 80168ba:	601a      	str	r2, [r3, #0]
}
 80168bc:	bd08      	pop	{r3, pc}
            block_buffer_planned = block_buffer_tail->next;
 80168be:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80168c0:	4a03      	ldr	r2, [pc, #12]	@ (80168d0 <plan_discard_current_block+0x38>)
 80168c2:	6011      	str	r1, [r2, #0]
 80168c4:	e7f7      	b.n	80168b6 <plan_discard_current_block+0x1e>
 80168c6:	bf00      	nop
 80168c8:	20002078 	.word	0x20002078
 80168cc:	20002074 	.word	0x20002074
 80168d0:	2000206c 	.word	0x2000206c

080168d4 <plan_get_system_motion_block>:
}
 80168d4:	4b01      	ldr	r3, [pc, #4]	@ (80168dc <plan_get_system_motion_block+0x8>)
 80168d6:	6818      	ldr	r0, [r3, #0]
 80168d8:	4770      	bx	lr
 80168da:	bf00      	nop
 80168dc:	20002074 	.word	0x20002074

080168e0 <plan_get_current_block>:
    return block_buffer_head == block_buffer_tail ? NULL : block_buffer_tail;
 80168e0:	4b04      	ldr	r3, [pc, #16]	@ (80168f4 <plan_get_current_block+0x14>)
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	4a04      	ldr	r2, [pc, #16]	@ (80168f8 <plan_get_current_block+0x18>)
 80168e6:	6810      	ldr	r0, [r2, #0]
 80168e8:	4283      	cmp	r3, r0
 80168ea:	d000      	beq.n	80168ee <plan_get_current_block+0xe>
}
 80168ec:	4770      	bx	lr
    return block_buffer_head == block_buffer_tail ? NULL : block_buffer_tail;
 80168ee:	2000      	movs	r0, #0
 80168f0:	e7fc      	b.n	80168ec <plan_get_current_block+0xc>
 80168f2:	bf00      	nop
 80168f4:	20002074 	.word	0x20002074
 80168f8:	20002078 	.word	0x20002078

080168fc <plan_get_exec_block_exit_speed_sqr>:
    plan_block_t *block = block_buffer_tail->next;
 80168fc:	4b06      	ldr	r3, [pc, #24]	@ (8016918 <plan_get_exec_block_exit_speed_sqr+0x1c>)
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    return block == block_buffer_head ? 0.0f : block->entry_speed_sqr;
 8016902:	4a06      	ldr	r2, [pc, #24]	@ (801691c <plan_get_exec_block_exit_speed_sqr+0x20>)
 8016904:	6812      	ldr	r2, [r2, #0]
 8016906:	429a      	cmp	r2, r3
 8016908:	d002      	beq.n	8016910 <plan_get_exec_block_exit_speed_sqr+0x14>
 801690a:	ed93 0a07 	vldr	s0, [r3, #28]
 801690e:	4770      	bx	lr
 8016910:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8016920 <plan_get_exec_block_exit_speed_sqr+0x24>
}
 8016914:	4770      	bx	lr
 8016916:	bf00      	nop
 8016918:	20002078 	.word	0x20002078
 801691c:	20002074 	.word	0x20002074
 8016920:	00000000 	.word	0x00000000

08016924 <plan_check_full_buffer>:
    return block_buffer_tail == next_buffer_head;
 8016924:	4b04      	ldr	r3, [pc, #16]	@ (8016938 <plan_check_full_buffer+0x14>)
 8016926:	6818      	ldr	r0, [r3, #0]
 8016928:	4b04      	ldr	r3, [pc, #16]	@ (801693c <plan_check_full_buffer+0x18>)
 801692a:	681b      	ldr	r3, [r3, #0]
}
 801692c:	4298      	cmp	r0, r3
 801692e:	bf14      	ite	ne
 8016930:	2000      	movne	r0, #0
 8016932:	2001      	moveq	r0, #1
 8016934:	4770      	bx	lr
 8016936:	bf00      	nop
 8016938:	20002078 	.word	0x20002078
 801693c:	20002070 	.word	0x20002070

08016940 <plan_compute_profile_nominal_speed>:
{
 8016940:	b510      	push	{r4, lr}
 8016942:	ed2d 8b02 	vpush	{d8}
 8016946:	4604      	mov	r4, r0
    float nominal_speed = block->condition.units_per_rev || block->spindle.state.synchronized
 8016948:	7d03      	ldrb	r3, [r0, #20]
                           : block->programmed_rate;
 801694a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801694e:	d106      	bne.n	801695e <plan_compute_profile_nominal_speed+0x1e>
    float nominal_speed = block->condition.units_per_rev || block->spindle.state.synchronized
 8016950:	f990 303c 	ldrsb.w	r3, [r0, #60]	@ 0x3c
 8016954:	2b00      	cmp	r3, #0
 8016956:	db02      	blt.n	801695e <plan_compute_profile_nominal_speed+0x1e>
                           : block->programmed_rate;
 8016958:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
 801695c:	e009      	b.n	8016972 <plan_compute_profile_nominal_speed+0x32>
                           ? block->programmed_rate * block->spindle.hal->get_data(SpindleData_RPM)->rpm
 801695e:	ed94 8a0d 	vldr	s16, [r4, #52]	@ 0x34
 8016962:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8016964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016966:	2001      	movs	r0, #1
 8016968:	4798      	blx	r3
 801696a:	edd0 7a00 	vldr	s15, [r0]
                           : block->programmed_rate;
 801696e:	ee68 7a27 	vmul.f32	s15, s16, s15
    if(block->condition.rapid_motion)
 8016972:	7d23      	ldrb	r3, [r4, #20]
 8016974:	f013 0f01 	tst.w	r3, #1
 8016978:	d014      	beq.n	80169a4 <plan_compute_profile_nominal_speed+0x64>
        nominal_speed *= (0.01f * (float)sys.override.rapid_rate);
 801697a:	4b18      	ldr	r3, [pc, #96]	@ (80169dc <plan_compute_profile_nominal_speed+0x9c>)
 801697c:	ed93 0a08 	vldr	s0, [r3, #32]
 8016980:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8016984:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80169e0 <plan_compute_profile_nominal_speed+0xa0>
 8016988:	ee20 0a07 	vmul.f32	s0, s0, s14
 801698c:	ee20 0a27 	vmul.f32	s0, s0, s15
    return nominal_speed > MINIMUM_FEED_RATE ? nominal_speed : MINIMUM_FEED_RATE;
 8016990:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8016994:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801699c:	dd1a      	ble.n	80169d4 <plan_compute_profile_nominal_speed+0x94>
}
 801699e:	ecbd 8b02 	vpop	{d8}
 80169a2:	bd10      	pop	{r4, pc}
        if(!block->condition.no_feed_override)
 80169a4:	f013 0f10 	tst.w	r3, #16
 80169a8:	d10a      	bne.n	80169c0 <plan_compute_profile_nominal_speed+0x80>
            nominal_speed *= (0.01f * (float)sys.override.feed_rate);
 80169aa:	4b0c      	ldr	r3, [pc, #48]	@ (80169dc <plan_compute_profile_nominal_speed+0x9c>)
 80169ac:	ed93 7a07 	vldr	s14, [r3, #28]
 80169b0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80169b4:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80169e0 <plan_compute_profile_nominal_speed+0xa0>
 80169b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80169bc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if(nominal_speed > block->rapid_rate)
 80169c0:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 80169c4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80169c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169cc:	d4e0      	bmi.n	8016990 <plan_compute_profile_nominal_speed+0x50>
 80169ce:	eeb0 0a67 	vmov.f32	s0, s15
 80169d2:	e7dd      	b.n	8016990 <plan_compute_profile_nominal_speed+0x50>
    return nominal_speed > MINIMUM_FEED_RATE ? nominal_speed : MINIMUM_FEED_RATE;
 80169d4:	eeb0 0a67 	vmov.f32	s0, s15
 80169d8:	e7e1      	b.n	801699e <plan_compute_profile_nominal_speed+0x5e>
 80169da:	bf00      	nop
 80169dc:	20001d70 	.word	0x20001d70
 80169e0:	3c23d70a 	.word	0x3c23d70a

080169e4 <plan_update_velocity_profile_parameters>:
        planner_recalculate();
}

// Re-calculates buffered motions profile parameters upon a motion-based override change.
static bool plan_update_velocity_profile_parameters (void)
{
 80169e4:	b510      	push	{r4, lr}
 80169e6:	ed2d 8b02 	vpush	{d8}
    if(block_buffer_tail != block_buffer_head) {
 80169ea:	4b1b      	ldr	r3, [pc, #108]	@ (8016a58 <plan_update_velocity_profile_parameters+0x74>)
 80169ec:	681c      	ldr	r4, [r3, #0]
 80169ee:	4b1b      	ldr	r3, [pc, #108]	@ (8016a5c <plan_update_velocity_profile_parameters+0x78>)
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	429c      	cmp	r4, r3
 80169f4:	d025      	beq.n	8016a42 <plan_update_velocity_profile_parameters+0x5e>

        plan_block_t *block = block_buffer_tail;
        float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 80169f6:	ed9f 8a1a 	vldr	s16, [pc, #104]	@ 8016a60 <plan_update_velocity_profile_parameters+0x7c>
 80169fa:	e005      	b.n	8016a08 <plan_update_velocity_profile_parameters+0x24>
    block->max_entry_speed_sqr = nominal_speed > prev_nominal_speed ? (prev_nominal_speed * prev_nominal_speed) : (nominal_speed * nominal_speed);
 80169fc:	ee20 8a00 	vmul.f32	s16, s0, s0
 8016a00:	e010      	b.n	8016a24 <plan_update_velocity_profile_parameters+0x40>

        while (block != block_buffer_head) {
            prev_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), prev_nominal_speed);
            block = block->next;
 8016a02:	6d64      	ldr	r4, [r4, #84]	@ 0x54
            prev_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), prev_nominal_speed);
 8016a04:	eeb0 8a40 	vmov.f32	s16, s0
        while (block != block_buffer_head) {
 8016a08:	4b14      	ldr	r3, [pc, #80]	@ (8016a5c <plan_update_velocity_profile_parameters+0x78>)
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	42a3      	cmp	r3, r4
 8016a0e:	d015      	beq.n	8016a3c <plan_update_velocity_profile_parameters+0x58>
            prev_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), prev_nominal_speed);
 8016a10:	4620      	mov	r0, r4
 8016a12:	f7ff ff95 	bl	8016940 <plan_compute_profile_nominal_speed>
    block->max_entry_speed_sqr = nominal_speed > prev_nominal_speed ? (prev_nominal_speed * prev_nominal_speed) : (nominal_speed * nominal_speed);
 8016a16:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8016a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a1e:	dded      	ble.n	80169fc <plan_update_velocity_profile_parameters+0x18>
 8016a20:	ee28 8a08 	vmul.f32	s16, s16, s16
 8016a24:	ed84 8a08 	vstr	s16, [r4, #32]
    if (block->max_entry_speed_sqr > block->max_junction_speed_sqr)
 8016a28:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8016a2c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a34:	dde5      	ble.n	8016a02 <plan_update_velocity_profile_parameters+0x1e>
        block->max_entry_speed_sqr = block->max_junction_speed_sqr;
 8016a36:	edc4 7a08 	vstr	s15, [r4, #32]
 8016a3a:	e7e2      	b.n	8016a02 <plan_update_velocity_profile_parameters+0x1e>
        }

        pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 8016a3c:	4b09      	ldr	r3, [pc, #36]	@ (8016a64 <plan_update_velocity_profile_parameters+0x80>)
 8016a3e:	ed83 8a06 	vstr	s16, [r3, #24]
    }

    return block_buffer_tail != block_buffer_head;
 8016a42:	4b05      	ldr	r3, [pc, #20]	@ (8016a58 <plan_update_velocity_profile_parameters+0x74>)
 8016a44:	6818      	ldr	r0, [r3, #0]
 8016a46:	4b05      	ldr	r3, [pc, #20]	@ (8016a5c <plan_update_velocity_profile_parameters+0x78>)
 8016a48:	681b      	ldr	r3, [r3, #0]
}
 8016a4a:	1ac0      	subs	r0, r0, r3
 8016a4c:	bf18      	it	ne
 8016a4e:	2001      	movne	r0, #1
 8016a50:	ecbd 8b02 	vpop	{d8}
 8016a54:	bd10      	pop	{r4, pc}
 8016a56:	bf00      	nop
 8016a58:	20002078 	.word	0x20002078
 8016a5c:	20002074 	.word	0x20002074
 8016a60:	7e967699 	.word	0x7e967699
 8016a64:	20002050 	.word	0x20002050

08016a68 <plan_buffer_line>:
{
 8016a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a6c:	ed2d 8b04 	vpush	{d8-d9}
 8016a70:	b08c      	sub	sp, #48	@ 0x30
 8016a72:	4607      	mov	r7, r0
 8016a74:	460e      	mov	r6, r1
    plan_block_t *block = block_buffer_head;
 8016a76:	4bb6      	ldr	r3, [pc, #728]	@ (8016d50 <plan_buffer_line+0x2e8>)
 8016a78:	681c      	ldr	r4, [r3, #0]
    memset(block, 0, sizeof(plan_block_t) - 2 * sizeof(plan_block_t *));    // Zero all block values (except linked list pointers).
 8016a7a:	2250      	movs	r2, #80	@ 0x50
 8016a7c:	2100      	movs	r1, #0
 8016a7e:	4620      	mov	r0, r4
 8016a80:	f00e f955 	bl	8024d2e <memset>
    memcpy(&block->spindle, &pl_data->spindle, sizeof(spindle_t));          // Copy spindle data (RPM etc)
 8016a84:	6870      	ldr	r0, [r6, #4]
 8016a86:	68b1      	ldr	r1, [r6, #8]
 8016a88:	68f2      	ldr	r2, [r6, #12]
 8016a8a:	6933      	ldr	r3, [r6, #16]
 8016a8c:	63a0      	str	r0, [r4, #56]	@ 0x38
 8016a8e:	63e1      	str	r1, [r4, #60]	@ 0x3c
 8016a90:	6422      	str	r2, [r4, #64]	@ 0x40
 8016a92:	6463      	str	r3, [r4, #68]	@ 0x44
    block->condition = pl_data->condition;
 8016a94:	6973      	ldr	r3, [r6, #20]
 8016a96:	6163      	str	r3, [r4, #20]
    block->overrides = pl_data->overrides;
 8016a98:	7e33      	ldrb	r3, [r6, #24]
 8016a9a:	74a3      	strb	r3, [r4, #18]
    block->line_number = pl_data->line_number;
 8016a9c:	69f3      	ldr	r3, [r6, #28]
 8016a9e:	61a3      	str	r3, [r4, #24]
    block->offset_id = pl_data->offset_id;
 8016aa0:	f996 3019 	ldrsb.w	r3, [r6, #25]
 8016aa4:	7463      	strb	r3, [r4, #17]
    block->output_commands = pl_data->output_commands;
 8016aa6:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8016aa8:	64e3      	str	r3, [r4, #76]	@ 0x4c
    block->message = pl_data->message;
 8016aaa:	6a33      	ldr	r3, [r6, #32]
 8016aac:	64a3      	str	r3, [r4, #72]	@ 0x48
    memcpy(position_steps, block->condition.system_motion ? sys.position : pl.position, sizeof(position_steps));
 8016aae:	7d23      	ldrb	r3, [r4, #20]
 8016ab0:	f013 0f02 	tst.w	r3, #2
 8016ab4:	d006      	beq.n	8016ac4 <plan_buffer_line+0x5c>
 8016ab6:	4aa7      	ldr	r2, [pc, #668]	@ (8016d54 <plan_buffer_line+0x2ec>)
 8016ab8:	ab06      	add	r3, sp, #24
 8016aba:	ca07      	ldmia	r2, {r0, r1, r2}
 8016abc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    idx = N_AXIS;
 8016ac0:	2503      	movs	r5, #3
 8016ac2:	e021      	b.n	8016b08 <plan_buffer_line+0xa0>
    memcpy(position_steps, block->condition.system_motion ? sys.position : pl.position, sizeof(position_steps));
 8016ac4:	4aa4      	ldr	r2, [pc, #656]	@ (8016d58 <plan_buffer_line+0x2f0>)
 8016ac6:	e7f7      	b.n	8016ab8 <plan_buffer_line+0x50>
            block->steps[idx] = labs(delta_steps);
 8016ac8:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8016acc:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8016ad0:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
            block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8016ad4:	68e2      	ldr	r2, [r4, #12]
 8016ad6:	4293      	cmp	r3, r2
 8016ad8:	bf38      	it	cc
 8016ada:	4613      	movcc	r3, r2
 8016adc:	60e3      	str	r3, [r4, #12]
            unit_vec[idx] = (float)delta_steps / settings.axis[idx].steps_per_mm; // Store unit vector numerator
 8016ade:	ee07 0a90 	vmov	s15, r0
 8016ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ae6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8016aea:	4b9c      	ldr	r3, [pc, #624]	@ (8016d5c <plan_buffer_line+0x2f4>)
 8016aec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8016af0:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8016af4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016af8:	ab0c      	add	r3, sp, #48	@ 0x30
 8016afa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8016afe:	ed03 7a09 	vstr	s14, [r3, #-36]	@ 0xffffffdc
        if (delta_steps < 0)
 8016b02:	2800      	cmp	r0, #0
 8016b04:	db25      	blt.n	8016b52 <plan_buffer_line+0xea>
    } while(idx);
 8016b06:	b355      	cbz	r5, 8016b5e <plan_buffer_line+0xf6>
        idx--;
 8016b08:	3d01      	subs	r5, #1
        target_steps[idx] = lroundf(target[idx] * settings.axis[idx].steps_per_mm);
 8016b0a:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8016b0e:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8016b12:	ed93 0a00 	vldr	s0, [r3]
 8016b16:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8016b1a:	4b90      	ldr	r3, [pc, #576]	@ (8016d5c <plan_buffer_line+0x2f4>)
 8016b1c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8016b20:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8016b24:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016b28:	f010 ff40 	bl	80279ac <lroundf>
 8016b2c:	f108 0330 	add.w	r3, r8, #48	@ 0x30
 8016b30:	446b      	add	r3, sp
 8016b32:	f843 0c0c 	str.w	r0, [r3, #-12]
        if((delta_steps = target_steps[idx] - position_steps[idx])) {
 8016b36:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8016b3a:	1ac0      	subs	r0, r0, r3
 8016b3c:	d1c4      	bne.n	8016ac8 <plan_buffer_line+0x60>
            block->steps[idx] = 0;
 8016b3e:	2300      	movs	r3, #0
 8016b40:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
            unit_vec[idx] = 0.0f; // Store unit vector numerator
 8016b44:	2200      	movs	r2, #0
 8016b46:	ab0c      	add	r3, sp, #48	@ 0x30
 8016b48:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8016b4c:	f843 2c24 	str.w	r2, [r3, #-36]
 8016b50:	e7d7      	b.n	8016b02 <plan_buffer_line+0x9a>
            block->direction_bits.mask |= bit(idx);
 8016b52:	7c23      	ldrb	r3, [r4, #16]
 8016b54:	2201      	movs	r2, #1
 8016b56:	40aa      	lsls	r2, r5
 8016b58:	4313      	orrs	r3, r2
 8016b5a:	7423      	strb	r3, [r4, #16]
 8016b5c:	e7d3      	b.n	8016b06 <plan_buffer_line+0x9e>
    if(block->spindle.css) {
 8016b5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d05d      	beq.n	8016c20 <plan_buffer_line+0x1b8>
        if((pos = (float)position_steps[block->spindle.css->axis] / settings.axis[block->spindle.css->axis].steps_per_mm - block->spindle.css->tool_offset) > 0.0f) {
 8016b64:	695a      	ldr	r2, [r3, #20]
 8016b66:	a90c      	add	r1, sp, #48	@ 0x30
 8016b68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016b6c:	ed11 7a06 	vldr	s14, [r1, #-24]	@ 0xffffffe8
 8016b70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016b74:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016b78:	4978      	ldr	r1, [pc, #480]	@ (8016d5c <plan_buffer_line+0x2f4>)
 8016b7a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8016b7e:	edd2 6a0c 	vldr	s13, [r2, #48]	@ 0x30
 8016b82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016b86:	ed93 7a04 	vldr	s14, [r3, #16]
 8016b8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016b8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b96:	dd13      	ble.n	8016bc0 <plan_buffer_line+0x158>
            if((block->spindle.rpm = block->spindle.css->surface_speed / (pos * (float)(2.0f * M_PI))) > block->spindle.css->max_rpm)
 8016b98:	edd3 6a00 	vldr	s13, [r3]
 8016b9c:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8016d60 <plan_buffer_line+0x2f8>
 8016ba0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016ba4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016ba8:	ed84 7a0e 	vstr	s14, [r4, #56]	@ 0x38
 8016bac:	edd3 7a03 	vldr	s15, [r3, #12]
 8016bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bb8:	dd04      	ble.n	8016bc4 <plan_buffer_line+0x15c>
                block->spindle.rpm = block->spindle.css->max_rpm;
 8016bba:	edc4 7a0e 	vstr	s15, [r4, #56]	@ 0x38
 8016bbe:	e001      	b.n	8016bc4 <plan_buffer_line+0x15c>
            block->spindle.rpm = block->spindle.css->max_rpm;
 8016bc0:	68da      	ldr	r2, [r3, #12]
 8016bc2:	63a2      	str	r2, [r4, #56]	@ 0x38
        if((pos = target[block->spindle.css->axis] - block->spindle.css->tool_offset) > 0.0f) {
 8016bc4:	695a      	ldr	r2, [r3, #20]
 8016bc6:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 8016bca:	edd7 7a00 	vldr	s15, [r7]
 8016bce:	ed93 7a04 	vldr	s14, [r3, #16]
 8016bd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016bd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bde:	dd14      	ble.n	8016c0a <plan_buffer_line+0x1a2>
            if((block->spindle.css->target_rpm = block->spindle.css->surface_speed / (pos * (float)(2.0f * M_PI))) > block->spindle.css->max_rpm)
 8016be0:	edd3 6a00 	vldr	s13, [r3]
 8016be4:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8016d60 <plan_buffer_line+0x2f8>
 8016be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016bec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016bf0:	ed83 7a01 	vstr	s14, [r3, #4]
 8016bf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016bf6:	edd3 7a03 	vldr	s15, [r3, #12]
 8016bfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c02:	dd04      	ble.n	8016c0e <plan_buffer_line+0x1a6>
                block->spindle.css->target_rpm = block->spindle.css->max_rpm;
 8016c04:	edc3 7a01 	vstr	s15, [r3, #4]
 8016c08:	e001      	b.n	8016c0e <plan_buffer_line+0x1a6>
            block->spindle.css->target_rpm = block->spindle.css->max_rpm;
 8016c0a:	68da      	ldr	r2, [r3, #12]
 8016c0c:	605a      	str	r2, [r3, #4]
        block->spindle.css->delta_rpm = block->spindle.css->target_rpm - block->spindle.rpm;
 8016c0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016c10:	edd3 7a01 	vldr	s15, [r3, #4]
 8016c14:	ed94 7a0e 	vldr	s14, [r4, #56]	@ 0x38
 8016c18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016c1c:	edc3 7a02 	vstr	s15, [r3, #8]
    pl_data->message = NULL;         // Indicate message is already queued for display on execution
 8016c20:	2300      	movs	r3, #0
 8016c22:	6233      	str	r3, [r6, #32]
    pl_data->output_commands = NULL; // Indicate commands are already queued for execution
 8016c24:	6273      	str	r3, [r6, #36]	@ 0x24
    if(block->step_event_count == 0) {
 8016c26:	68e3      	ldr	r3, [r4, #12]
 8016c28:	b363      	cbz	r3, 8016c84 <plan_buffer_line+0x21c>
    block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 8016c2a:	a803      	add	r0, sp, #12
 8016c2c:	f7ff f886 	bl	8015d3c <convert_delta_vector_to_unit_vector>
 8016c30:	eeb0 8a40 	vmov.f32	s16, s0
 8016c34:	ed84 0a0a 	vstr	s0, [r4, #40]	@ 0x28
    block->acceleration = limit_acceleration_by_axis_maximum(unit_vec);
 8016c38:	a803      	add	r0, sp, #12
 8016c3a:	f7ff fc91 	bl	8016560 <limit_acceleration_by_axis_maximum>
 8016c3e:	ed84 0a09 	vstr	s0, [r4, #36]	@ 0x24
    block->rapid_rate = limit_max_rate_by_axis_maximum(unit_vec);
 8016c42:	a803      	add	r0, sp, #12
 8016c44:	f7ff fcb4 	bl	80165b0 <limit_max_rate_by_axis_maximum>
 8016c48:	ed84 0a0c 	vstr	s0, [r4, #48]	@ 0x30
    if (block->condition.rapid_motion)
 8016c4c:	7d23      	ldrb	r3, [r4, #20]
 8016c4e:	f013 0f01 	tst.w	r3, #1
 8016c52:	d01c      	beq.n	8016c8e <plan_buffer_line+0x226>
        block->programmed_rate = block->rapid_rate;
 8016c54:	ed84 0a0d 	vstr	s0, [r4, #52]	@ 0x34
    if ((block_buffer_head == block_buffer_tail) || (block->condition.system_motion)) {
 8016c58:	4a3d      	ldr	r2, [pc, #244]	@ (8016d50 <plan_buffer_line+0x2e8>)
 8016c5a:	6811      	ldr	r1, [r2, #0]
 8016c5c:	4a41      	ldr	r2, [pc, #260]	@ (8016d64 <plan_buffer_line+0x2fc>)
 8016c5e:	6812      	ldr	r2, [r2, #0]
 8016c60:	4291      	cmp	r1, r2
 8016c62:	d002      	beq.n	8016c6a <plan_buffer_line+0x202>
 8016c64:	f013 0f02 	tst.w	r3, #2
 8016c68:	d01d      	beq.n	8016ca6 <plan_buffer_line+0x23e>
        block->entry_speed_sqr = 0.0f;
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	61e3      	str	r3, [r4, #28]
        block->max_junction_speed_sqr = 0.0f; // Starting from rest. Enforce start from zero velocity.
 8016c6e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (!block->condition.system_motion) {
 8016c70:	7d23      	ldrb	r3, [r4, #20]
 8016c72:	f013 0f02 	tst.w	r3, #2
 8016c76:	d07f      	beq.n	8016d78 <plan_buffer_line+0x310>
    return true;
 8016c78:	2001      	movs	r0, #1
}
 8016c7a:	b00c      	add	sp, #48	@ 0x30
 8016c7c:	ecbd 8b04 	vpop	{d8-d9}
 8016c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        plan_cleanup(block); // TODO: output message and execute output_commands?
 8016c84:	4620      	mov	r0, r4
 8016c86:	f7ff fcbb 	bl	8016600 <plan_cleanup>
        return false;
 8016c8a:	2000      	movs	r0, #0
 8016c8c:	e7f5      	b.n	8016c7a <plan_buffer_line+0x212>
        block->programmed_rate = pl_data->feed_rate;
 8016c8e:	edd6 7a00 	vldr	s15, [r6]
 8016c92:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
        if (block->condition.inverse_time)
 8016c96:	f013 0f20 	tst.w	r3, #32
 8016c9a:	d0dd      	beq.n	8016c58 <plan_buffer_line+0x1f0>
            block->programmed_rate *= block->millimeters;
 8016c9c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8016ca0:	ed84 8a0d 	vstr	s16, [r4, #52]	@ 0x34
 8016ca4:	e7d8      	b.n	8016c58 <plan_buffer_line+0x1f0>
        float junction_cos_theta = 0.0f;
 8016ca6:	ed9f 8a30 	vldr	s16, [pc, #192]	@ 8016d68 <plan_buffer_line+0x300>
        idx = N_AXIS;
 8016caa:	2303      	movs	r3, #3
            idx--;
 8016cac:	3b01      	subs	r3, #1
            junction_cos_theta -= pl.previous_unit_vec[idx] * unit_vec[idx];
 8016cae:	1c99      	adds	r1, r3, #2
 8016cb0:	4a29      	ldr	r2, [pc, #164]	@ (8016d58 <plan_buffer_line+0x2f0>)
 8016cb2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016cb6:	ed92 7a01 	vldr	s14, [r2, #4]
 8016cba:	aa0c      	add	r2, sp, #48	@ 0x30
 8016cbc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8016cc0:	ed52 7a09 	vldr	s15, [r2, #-36]	@ 0xffffffdc
 8016cc4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8016cc8:	ee38 8a66 	vsub.f32	s16, s16, s13
            junction_unit_vec[idx] = unit_vec[idx] - pl.previous_unit_vec[idx];
 8016ccc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016cd0:	ed42 7a0c 	vstr	s15, [r2, #-48]	@ 0xffffffd0
        } while(idx);
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d1e9      	bne.n	8016cac <plan_buffer_line+0x244>
        if (junction_cos_theta > 0.999999f)
 8016cd8:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8016d6c <plan_buffer_line+0x304>
 8016cdc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ce4:	dd02      	ble.n	8016cec <plan_buffer_line+0x284>
            block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED * MINIMUM_JUNCTION_SPEED;
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016cea:	e7c1      	b.n	8016c70 <plan_buffer_line+0x208>
        else if (junction_cos_theta < -0.999999f) {
 8016cec:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8016d70 <plan_buffer_line+0x308>
 8016cf0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cf8:	d502      	bpl.n	8016d00 <plan_buffer_line+0x298>
            block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 8016cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8016d74 <plan_buffer_line+0x30c>)
 8016cfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016cfe:	e7b7      	b.n	8016c70 <plan_buffer_line+0x208>
            convert_delta_vector_to_unit_vector(junction_unit_vec);
 8016d00:	4668      	mov	r0, sp
 8016d02:	f7ff f81b 	bl	8015d3c <convert_delta_vector_to_unit_vector>
            float junction_acceleration = limit_acceleration_by_axis_maximum(junction_unit_vec);
 8016d06:	4668      	mov	r0, sp
 8016d08:	f7ff fc2a 	bl	8016560 <limit_acceleration_by_axis_maximum>
 8016d0c:	eeb0 9a40 	vmov.f32	s18, s0
            float sin_theta_d2 = sqrtf(0.5f * (1.0f - junction_cos_theta)); // Trig half angle identity. Always positive.
 8016d10:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8016d14:	ee38 8ac8 	vsub.f32	s16, s17, s16
 8016d18:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8016d1c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016d20:	f010 fd66 	bl	80277f0 <sqrtf>
            block->max_junction_speed_sqr = max(MINIMUM_JUNCTION_SPEED * MINIMUM_JUNCTION_SPEED,
 8016d24:	4b0d      	ldr	r3, [pc, #52]	@ (8016d5c <plan_buffer_line+0x2f4>)
 8016d26:	edd3 7a01 	vldr	s15, [r3, #4]
 8016d2a:	ee67 7a89 	vmul.f32	s15, s15, s18
 8016d2e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016d32:	ee78 8ac0 	vsub.f32	s17, s17, s0
 8016d36:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8016d3a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d42:	d402      	bmi.n	8016d4a <plan_buffer_line+0x2e2>
 8016d44:	ed84 7a0b 	vstr	s14, [r4, #44]	@ 0x2c
 8016d48:	e792      	b.n	8016c70 <plan_buffer_line+0x208>
 8016d4a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8016d68 <plan_buffer_line+0x300>
 8016d4e:	e7f9      	b.n	8016d44 <plan_buffer_line+0x2dc>
 8016d50:	20002074 	.word	0x20002074
 8016d54:	20001df8 	.word	0x20001df8
 8016d58:	20002050 	.word	0x20002050
 8016d5c:	200024a8 	.word	0x200024a8
 8016d60:	40c90fdb 	.word	0x40c90fdb
 8016d64:	20002078 	.word	0x20002078
 8016d68:	00000000 	.word	0x00000000
 8016d6c:	3f7fffef 	.word	0x3f7fffef
 8016d70:	bf7fffef 	.word	0xbf7fffef
 8016d74:	7e967699 	.word	0x7e967699
        pl.previous_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), pl.previous_nominal_speed);
 8016d78:	4620      	mov	r0, r4
 8016d7a:	f7ff fde1 	bl	8016940 <plan_compute_profile_nominal_speed>
 8016d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8016de8 <plan_buffer_line+0x380>)
 8016d80:	edd3 7a06 	vldr	s15, [r3, #24]
    block->max_entry_speed_sqr = nominal_speed > prev_nominal_speed ? (prev_nominal_speed * prev_nominal_speed) : (nominal_speed * nominal_speed);
 8016d84:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d8c:	dd29      	ble.n	8016de2 <plan_buffer_line+0x37a>
 8016d8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016d92:	edc4 7a08 	vstr	s15, [r4, #32]
    if (block->max_entry_speed_sqr > block->max_junction_speed_sqr)
 8016d96:	ed94 7a0b 	vldr	s14, [r4, #44]	@ 0x2c
 8016d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016da2:	dd01      	ble.n	8016da8 <plan_buffer_line+0x340>
        block->max_entry_speed_sqr = block->max_junction_speed_sqr;
 8016da4:	ed84 7a08 	vstr	s14, [r4, #32]
        pl.previous_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), pl.previous_nominal_speed);
 8016da8:	4b0f      	ldr	r3, [pc, #60]	@ (8016de8 <plan_buffer_line+0x380>)
 8016daa:	ed83 0a06 	vstr	s0, [r3, #24]
        if(!block->condition.backlash_motion) {
 8016dae:	7d23      	ldrb	r3, [r4, #20]
 8016db0:	f013 0f08 	tst.w	r3, #8
 8016db4:	d10b      	bne.n	8016dce <plan_buffer_line+0x366>
            memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8016db6:	4b0c      	ldr	r3, [pc, #48]	@ (8016de8 <plan_buffer_line+0x380>)
 8016db8:	f103 040c 	add.w	r4, r3, #12
 8016dbc:	aa03      	add	r2, sp, #12
 8016dbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8016dc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8016dc4:	aa0c      	add	r2, sp, #48	@ 0x30
 8016dc6:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 8016dca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        block_buffer_head = next_buffer_head;
 8016dce:	4b07      	ldr	r3, [pc, #28]	@ (8016dec <plan_buffer_line+0x384>)
 8016dd0:	681a      	ldr	r2, [r3, #0]
 8016dd2:	4907      	ldr	r1, [pc, #28]	@ (8016df0 <plan_buffer_line+0x388>)
 8016dd4:	600a      	str	r2, [r1, #0]
        next_buffer_head = block_buffer_head->next;
 8016dd6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8016dd8:	601a      	str	r2, [r3, #0]
        planner_recalculate();
 8016dda:	f7ff fc4b 	bl	8016674 <planner_recalculate>
    return true;
 8016dde:	2001      	movs	r0, #1
 8016de0:	e74b      	b.n	8016c7a <plan_buffer_line+0x212>
    block->max_entry_speed_sqr = nominal_speed > prev_nominal_speed ? (prev_nominal_speed * prev_nominal_speed) : (nominal_speed * nominal_speed);
 8016de2:	ee60 7a00 	vmul.f32	s15, s0, s0
 8016de6:	e7d4      	b.n	8016d92 <plan_buffer_line+0x32a>
 8016de8:	20002050 	.word	0x20002050
 8016dec:	20002070 	.word	0x20002070
 8016df0:	20002074 	.word	0x20002074

08016df4 <plan_sync_position>:
    memcpy(pl.position, sys.position, sizeof(pl.position));
 8016df4:	4b02      	ldr	r3, [pc, #8]	@ (8016e00 <plan_sync_position+0xc>)
 8016df6:	4a03      	ldr	r2, [pc, #12]	@ (8016e04 <plan_sync_position+0x10>)
 8016df8:	ca07      	ldmia	r2, {r0, r1, r2}
 8016dfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8016dfe:	4770      	bx	lr
 8016e00:	20002050 	.word	0x20002050
 8016e04:	20001df8 	.word	0x20001df8

08016e08 <plan_get_block_buffer_available>:
    return (uint_fast16_t)(block_buffer_head >= block_buffer_tail
 8016e08:	4b0a      	ldr	r3, [pc, #40]	@ (8016e34 <plan_get_block_buffer_available+0x2c>)
 8016e0a:	681a      	ldr	r2, [r3, #0]
 8016e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8016e38 <plan_get_block_buffer_available+0x30>)
 8016e0e:	6818      	ldr	r0, [r3, #0]
 8016e10:	4282      	cmp	r2, r0
 8016e12:	d307      	bcc.n	8016e24 <plan_get_block_buffer_available+0x1c>
                            ? (block_buffer_size - (block_buffer_head - block_buffer_tail))
 8016e14:	4909      	ldr	r1, [pc, #36]	@ (8016e3c <plan_get_block_buffer_available+0x34>)
 8016e16:	6809      	ldr	r1, [r1, #0]
 8016e18:	1a12      	subs	r2, r2, r0
 8016e1a:	10d2      	asrs	r2, r2, #3
    return (uint_fast16_t)(block_buffer_head >= block_buffer_tail
 8016e1c:	4808      	ldr	r0, [pc, #32]	@ (8016e40 <plan_get_block_buffer_available+0x38>)
 8016e1e:	fb00 1012 	mls	r0, r0, r2, r1
 8016e22:	4770      	bx	lr
                            : ((block_buffer_tail - block_buffer_head) - 1));
 8016e24:	1a80      	subs	r0, r0, r2
 8016e26:	10c0      	asrs	r0, r0, #3
 8016e28:	4b05      	ldr	r3, [pc, #20]	@ (8016e40 <plan_get_block_buffer_available+0x38>)
 8016e2a:	fb03 f000 	mul.w	r0, r3, r0
 8016e2e:	3801      	subs	r0, #1
}
 8016e30:	4770      	bx	lr
 8016e32:	bf00      	nop
 8016e34:	20002074 	.word	0x20002074
 8016e38:	20002078 	.word	0x20002078
 8016e3c:	20002080 	.word	0x20002080
 8016e40:	ba2e8ba3 	.word	0xba2e8ba3

08016e44 <plan_cycle_reinitialize>:
{
 8016e44:	b508      	push	{r3, lr}
    st_update_plan_block_parameters();
 8016e46:	f008 fff1 	bl	801fe2c <st_update_plan_block_parameters>
    if((block_buffer_planned = block_buffer_tail) != block_buffer_head)
 8016e4a:	4b05      	ldr	r3, [pc, #20]	@ (8016e60 <plan_cycle_reinitialize+0x1c>)
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	4a05      	ldr	r2, [pc, #20]	@ (8016e64 <plan_cycle_reinitialize+0x20>)
 8016e50:	6013      	str	r3, [r2, #0]
 8016e52:	4a05      	ldr	r2, [pc, #20]	@ (8016e68 <plan_cycle_reinitialize+0x24>)
 8016e54:	6812      	ldr	r2, [r2, #0]
 8016e56:	4293      	cmp	r3, r2
 8016e58:	d001      	beq.n	8016e5e <plan_cycle_reinitialize+0x1a>
        planner_recalculate();
 8016e5a:	f7ff fc0b 	bl	8016674 <planner_recalculate>
}
 8016e5e:	bd08      	pop	{r3, pc}
 8016e60:	20002078 	.word	0x20002078
 8016e64:	2000206c 	.word	0x2000206c
 8016e68:	20002074 	.word	0x20002074

08016e6c <plan_feed_override>:
// Set feed overrides
void plan_feed_override (override_t feed_override, override_t rapid_override)
{
    bool feedrate_changed = false, rapidrate_changed = false;

    if(sys.override.control.feed_rate_disable)
 8016e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8016ed8 <plan_feed_override+0x6c>)
 8016e6e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8016e72:	f013 0f01 	tst.w	r3, #1
 8016e76:	d12d      	bne.n	8016ed4 <plan_feed_override+0x68>
{
 8016e78:	b570      	push	{r4, r5, r6, lr}
        return;

    feed_override = constrain(feed_override, MIN_FEED_RATE_OVERRIDE, MAX_FEED_RATE_OVERRIDE);
 8016e7a:	2809      	cmp	r0, #9
 8016e7c:	d904      	bls.n	8016e88 <plan_feed_override+0x1c>
 8016e7e:	28c8      	cmp	r0, #200	@ 0xc8
 8016e80:	bf28      	it	cs
 8016e82:	20c8      	movcs	r0, #200	@ 0xc8
 8016e84:	4604      	mov	r4, r0
 8016e86:	e000      	b.n	8016e8a <plan_feed_override+0x1e>
 8016e88:	240a      	movs	r4, #10

    if((feedrate_changed = feed_override != sys.override.feed_rate) ||
 8016e8a:	4b13      	ldr	r3, [pc, #76]	@ (8016ed8 <plan_feed_override+0x6c>)
 8016e8c:	69dd      	ldr	r5, [r3, #28]
 8016e8e:	42a5      	cmp	r5, r4
 8016e90:	d106      	bne.n	8016ea0 <plan_feed_override+0x34>
         (rapidrate_changed = rapid_override != sys.override.rapid_rate)) {
 8016e92:	6a1b      	ldr	r3, [r3, #32]
 8016e94:	428b      	cmp	r3, r1
 8016e96:	bf14      	ite	ne
 8016e98:	2601      	movne	r6, #1
 8016e9a:	2600      	moveq	r6, #0
    if((feedrate_changed = feed_override != sys.override.feed_rate) ||
 8016e9c:	d101      	bne.n	8016ea2 <plan_feed_override+0x36>
 8016e9e:	e015      	b.n	8016ecc <plan_feed_override+0x60>
    bool feedrate_changed = false, rapidrate_changed = false;
 8016ea0:	2600      	movs	r6, #0
        sys.override.feed_rate = feed_override;
 8016ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8016ed8 <plan_feed_override+0x6c>)
 8016ea4:	61dc      	str	r4, [r3, #28]
        sys.override.rapid_rate = rapid_override;
 8016ea6:	6219      	str	r1, [r3, #32]
        system_add_rt_report(Report_Overrides); // Set to report change immediately
 8016ea8:	2040      	movs	r0, #64	@ 0x40
 8016eaa:	f00b f80b 	bl	8021ec4 <system_add_rt_report>
        if(plan_update_velocity_profile_parameters())
 8016eae:	f7ff fd99 	bl	80169e4 <plan_update_velocity_profile_parameters>
 8016eb2:	b960      	cbnz	r0, 8016ece <plan_feed_override+0x62>
            plan_cycle_reinitialize();
        if(grbl.on_override_changed) {
 8016eb4:	4b09      	ldr	r3, [pc, #36]	@ (8016edc <plan_feed_override+0x70>)
 8016eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016eb8:	b143      	cbz	r3, 8016ecc <plan_feed_override+0x60>
            if(feedrate_changed)
 8016eba:	42a5      	cmp	r5, r4
 8016ebc:	d001      	beq.n	8016ec2 <plan_feed_override+0x56>
                grbl.on_override_changed(OverrideChanged_FeedRate);
 8016ebe:	2000      	movs	r0, #0
 8016ec0:	4798      	blx	r3
            if(rapidrate_changed)
 8016ec2:	b11e      	cbz	r6, 8016ecc <plan_feed_override+0x60>
                grbl.on_override_changed(OverrideChanged_RapidRate);
 8016ec4:	4b05      	ldr	r3, [pc, #20]	@ (8016edc <plan_feed_override+0x70>)
 8016ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016ec8:	2000      	movs	r0, #0
 8016eca:	4798      	blx	r3
        }
    }
}
 8016ecc:	bd70      	pop	{r4, r5, r6, pc}
            plan_cycle_reinitialize();
 8016ece:	f7ff ffb9 	bl	8016e44 <plan_cycle_reinitialize>
 8016ed2:	e7ef      	b.n	8016eb4 <plan_feed_override+0x48>
 8016ed4:	4770      	bx	lr
 8016ed6:	bf00      	nop
 8016ed8:	20001d70 	.word	0x20001d70
 8016edc:	20001c78 	.word	0x20001c78

08016ee0 <plan_data_init>:

void plan_data_init (plan_line_data_t *plan_data)
{
 8016ee0:	b510      	push	{r4, lr}
 8016ee2:	4604      	mov	r4, r0
    memset(plan_data, 0, sizeof(plan_line_data_t));
 8016ee4:	2228      	movs	r2, #40	@ 0x28
 8016ee6:	2100      	movs	r1, #0
 8016ee8:	f00d ff21 	bl	8024d2e <memset>
    plan_data->offset_id = gc_state.offset_id;
 8016eec:	4b0c      	ldr	r3, [pc, #48]	@ (8016f20 <plan_data_init+0x40>)
 8016eee:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8016ef2:	7662      	strb	r2, [r4, #25]
    plan_data->spindle.hal = gc_state.spindle.hal ? gc_state.spindle.hal : spindle_get(0);
 8016ef4:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8016ef6:	b178      	cbz	r0, 8016f18 <plan_data_init+0x38>
 8016ef8:	6120      	str	r0, [r4, #16]
    plan_data->condition.target_validated = plan_data->condition.target_valid = sys.soft_limits.mask == 0;
 8016efa:	4b0a      	ldr	r3, [pc, #40]	@ (8016f24 <plan_data_init+0x44>)
 8016efc:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8016f00:	fab3 f383 	clz	r3, r3
 8016f04:	095b      	lsrs	r3, r3, #5
 8016f06:	7d62      	ldrb	r2, [r4, #21]
 8016f08:	f363 0241 	bfi	r2, r3, #1, #1
 8016f0c:	7562      	strb	r2, [r4, #21]
 8016f0e:	b2d2      	uxtb	r2, r2
 8016f10:	f363 0282 	bfi	r2, r3, #2, #1
 8016f14:	7562      	strb	r2, [r4, #21]
#ifdef KINEMATICS_API
    plan_data->rate_multiplier = 1.0f;
#endif
}
 8016f16:	bd10      	pop	{r4, pc}
    plan_data->spindle.hal = gc_state.spindle.hal ? gc_state.spindle.hal : spindle_get(0);
 8016f18:	f007 fb86 	bl	801e628 <spindle_get>
 8016f1c:	e7ec      	b.n	8016ef8 <plan_data_init+0x18>
 8016f1e:	bf00      	nop
 8016f20:	200017c8 	.word	0x200017c8
 8016f24:	20001d70 	.word	0x20001d70

08016f28 <recheck_line>:

static bool recheck_line (char *line, line_flags_t *flags)
{
    bool keep_rt_commands = false, first_char = true;

    flags->value = 0;
 8016f28:	2300      	movs	r3, #0
 8016f2a:	700b      	strb	r3, [r1, #0]

    if(*line != '\0') do {
 8016f2c:	7803      	ldrb	r3, [r0, #0]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d075      	beq.n	801701e <recheck_line+0xf6>
{
 8016f32:	b410      	push	{r4}
 8016f34:	4602      	mov	r2, r0
    bool keep_rt_commands = false, first_char = true;
 8016f36:	2401      	movs	r4, #1
 8016f38:	2000      	movs	r0, #0
 8016f3a:	e008      	b.n	8016f4e <recheck_line+0x26>

        switch(*line) {
 8016f3c:	2b5b      	cmp	r3, #91	@ 0x5b
 8016f3e:	d101      	bne.n	8016f44 <recheck_line+0x1c>

            case '$':
            case '[':
                if(first_char)
 8016f40:	2c00      	cmp	r4, #0
 8016f42:	d16a      	bne.n	801701a <recheck_line+0xf2>
                break;
        }

        first_char = false;

    } while(*++line != '\0');
 8016f44:	f812 3f01 	ldrb.w	r3, [r2, #1]!
        first_char = false;
 8016f48:	2400      	movs	r4, #0
    } while(*++line != '\0');
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d069      	beq.n	8017022 <recheck_line+0xfa>
        switch(*line) {
 8016f4e:	7813      	ldrb	r3, [r2, #0]
 8016f50:	2b3b      	cmp	r3, #59	@ 0x3b
 8016f52:	d8f3      	bhi.n	8016f3c <recheck_line+0x14>
 8016f54:	2b24      	cmp	r3, #36	@ 0x24
 8016f56:	d3f5      	bcc.n	8016f44 <recheck_line+0x1c>
 8016f58:	3b24      	subs	r3, #36	@ 0x24
 8016f5a:	2b17      	cmp	r3, #23
 8016f5c:	d8f2      	bhi.n	8016f44 <recheck_line+0x1c>
 8016f5e:	f20f 0c08 	addw	ip, pc, #8
 8016f62:	f85c f023 	ldr.w	pc, [ip, r3, lsl #2]
 8016f66:	bf00      	nop
 8016f68:	08016f41 	.word	0x08016f41
 8016f6c:	08016f45 	.word	0x08016f45
 8016f70:	08016f45 	.word	0x08016f45
 8016f74:	08016f45 	.word	0x08016f45
 8016f78:	08016fc9 	.word	0x08016fc9
 8016f7c:	08016ff5 	.word	0x08016ff5
 8016f80:	08016f45 	.word	0x08016f45
 8016f84:	08016f45 	.word	0x08016f45
 8016f88:	08016f45 	.word	0x08016f45
 8016f8c:	08016f45 	.word	0x08016f45
 8016f90:	08016f45 	.word	0x08016f45
 8016f94:	08016f45 	.word	0x08016f45
 8016f98:	08016f45 	.word	0x08016f45
 8016f9c:	08016f45 	.word	0x08016f45
 8016fa0:	08016f45 	.word	0x08016f45
 8016fa4:	08016f45 	.word	0x08016f45
 8016fa8:	08016f45 	.word	0x08016f45
 8016fac:	08016f45 	.word	0x08016f45
 8016fb0:	08016f45 	.word	0x08016f45
 8016fb4:	08016f45 	.word	0x08016f45
 8016fb8:	08016f45 	.word	0x08016f45
 8016fbc:	08016f45 	.word	0x08016f45
 8016fc0:	08016f45 	.word	0x08016f45
 8016fc4:	08017009 	.word	0x08017009
                if(!keep_rt_commands && (flags->comment_parentheses = !flags->comment_semicolon))
 8016fc8:	2800      	cmp	r0, #0
 8016fca:	d1bb      	bne.n	8016f44 <recheck_line+0x1c>
 8016fcc:	780c      	ldrb	r4, [r1, #0]
 8016fce:	08a3      	lsrs	r3, r4, #2
 8016fd0:	f083 0301 	eor.w	r3, r3, #1
 8016fd4:	f003 0301 	and.w	r3, r3, #1
 8016fd8:	f363 0441 	bfi	r4, r3, #1, #1
 8016fdc:	700c      	strb	r4, [r1, #0]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d0b0      	beq.n	8016f44 <recheck_line+0x1c>
                    keep_rt_commands = !hal.driver_cap.no_gcode_message_handling; // Suspend real-time processing of printable command characters.
 8016fe2:	4b11      	ldr	r3, [pc, #68]	@ (8017028 <recheck_line+0x100>)
 8016fe4:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 8016fe8:	f013 0f04 	tst.w	r3, #4
 8016fec:	bf0c      	ite	eq
 8016fee:	2001      	moveq	r0, #1
 8016ff0:	2000      	movne	r0, #0
 8016ff2:	e7a7      	b.n	8016f44 <recheck_line+0x1c>
                if(!flags->comment_semicolon)
 8016ff4:	780b      	ldrb	r3, [r1, #0]
 8016ff6:	f013 0f04 	tst.w	r3, #4
 8016ffa:	d1a3      	bne.n	8016f44 <recheck_line+0x1c>
                    flags->comment_parentheses = keep_rt_commands = false;
 8016ffc:	780b      	ldrb	r3, [r1, #0]
 8016ffe:	f36f 0341 	bfc	r3, #1, #1
 8017002:	700b      	strb	r3, [r1, #0]
 8017004:	2000      	movs	r0, #0
 8017006:	e79d      	b.n	8016f44 <recheck_line+0x1c>
                if(!flags->comment_parentheses) {
 8017008:	780b      	ldrb	r3, [r1, #0]
 801700a:	f013 0f02 	tst.w	r3, #2
 801700e:	d199      	bne.n	8016f44 <recheck_line+0x1c>
                    flags->comment_semicolon = On;
 8017010:	f043 0304 	orr.w	r3, r3, #4
 8017014:	700b      	strb	r3, [r1, #0]
                    keep_rt_commands = false;
 8017016:	2000      	movs	r0, #0
 8017018:	e794      	b.n	8016f44 <recheck_line+0x1c>
                    keep_rt_commands = true;
 801701a:	4620      	mov	r0, r4
 801701c:	e792      	b.n	8016f44 <recheck_line+0x1c>
    bool keep_rt_commands = false, first_char = true;
 801701e:	2000      	movs	r0, #0

    return keep_rt_commands;
}
 8017020:	4770      	bx	lr
 8017022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017026:	4770      	bx	lr
 8017028:	20001a90 	.word	0x20001a90

0801702c <protocol_execute_rt_commands>:
    return protocol_enqueue_foreground_task(fn, (void *)&dummy_data);
}

// Execute enqueued functions.
static void protocol_execute_rt_commands (sys_state_t state)
{
 801702c:	b538      	push	{r3, r4, r5, lr}
    while(realtime_queue.tail != realtime_queue.head) {
 801702e:	e00d      	b.n	801704c <protocol_execute_rt_commands+0x20>
        uint_fast8_t bptr = realtime_queue.tail;
        if(realtime_queue.task[bptr].task.fn) {
            if(realtime_queue.task[bptr].data == (void *)&dummy_data) {
                on_execute_realtime_ptr call = realtime_queue.task[bptr].task.fn_deprecated;
                realtime_queue.task[bptr].task.fn_deprecated = NULL;
 8017030:	1c62      	adds	r2, r4, #1
 8017032:	4b17      	ldr	r3, [pc, #92]	@ (8017090 <protocol_execute_rt_commands+0x64>)
 8017034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017038:	2200      	movs	r2, #0
 801703a:	605a      	str	r2, [r3, #4]
                call(state_get());
 801703c:	f007 ff84 	bl	801ef48 <state_get>
 8017040:	47a8      	blx	r5
                foreground_task_ptr call = realtime_queue.task[bptr].task.fn;
                realtime_queue.task[bptr].task.fn = NULL;
                call(realtime_queue.task[bptr].data);
            }
        }
        realtime_queue.tail = (bptr + 1) & (RT_QUEUE_SIZE - 1);
 8017042:	3401      	adds	r4, #1
 8017044:	f004 040f 	and.w	r4, r4, #15
 8017048:	4b11      	ldr	r3, [pc, #68]	@ (8017090 <protocol_execute_rt_commands+0x64>)
 801704a:	605c      	str	r4, [r3, #4]
    while(realtime_queue.tail != realtime_queue.head) {
 801704c:	4b10      	ldr	r3, [pc, #64]	@ (8017090 <protocol_execute_rt_commands+0x64>)
 801704e:	685a      	ldr	r2, [r3, #4]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	429a      	cmp	r2, r3
 8017054:	d016      	beq.n	8017084 <protocol_execute_rt_commands+0x58>
        uint_fast8_t bptr = realtime_queue.tail;
 8017056:	4b0e      	ldr	r3, [pc, #56]	@ (8017090 <protocol_execute_rt_commands+0x64>)
 8017058:	685c      	ldr	r4, [r3, #4]
        if(realtime_queue.task[bptr].task.fn) {
 801705a:	1c62      	adds	r2, r4, #1
 801705c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017060:	685d      	ldr	r5, [r3, #4]
 8017062:	2d00      	cmp	r5, #0
 8017064:	d0ed      	beq.n	8017042 <protocol_execute_rt_commands+0x16>
            if(realtime_queue.task[bptr].data == (void *)&dummy_data) {
 8017066:	4613      	mov	r3, r2
 8017068:	4a09      	ldr	r2, [pc, #36]	@ (8017090 <protocol_execute_rt_commands+0x64>)
 801706a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801706e:	4b09      	ldr	r3, [pc, #36]	@ (8017094 <protocol_execute_rt_commands+0x68>)
 8017070:	4298      	cmp	r0, r3
 8017072:	d0dd      	beq.n	8017030 <protocol_execute_rt_commands+0x4>
                realtime_queue.task[bptr].task.fn = NULL;
 8017074:	1c62      	adds	r2, r4, #1
 8017076:	4b06      	ldr	r3, [pc, #24]	@ (8017090 <protocol_execute_rt_commands+0x64>)
 8017078:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801707c:	2200      	movs	r2, #0
 801707e:	605a      	str	r2, [r3, #4]
                call(realtime_queue.task[bptr].data);
 8017080:	47a8      	blx	r5
 8017082:	e7de      	b.n	8017042 <protocol_execute_rt_commands+0x16>
    }

    if(!sys.driver_started)
 8017084:	4b04      	ldr	r3, [pc, #16]	@ (8017098 <protocol_execute_rt_commands+0x6c>)
 8017086:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 801708a:	b903      	cbnz	r3, 801708e <protocol_execute_rt_commands+0x62>
        while(true);
 801708c:	e7fe      	b.n	801708c <protocol_execute_rt_commands+0x60>
}
 801708e:	bd38      	pop	{r3, r4, r5, pc}
 8017090:	2000208c 	.word	0x2000208c
 8017094:	0802bf18 	.word	0x0802bf18
 8017098:	20001d70 	.word	0x20001d70

0801709c <protocol_on_execute_delay>:
{
 801709c:	b510      	push	{r4, lr}
 801709e:	4604      	mov	r4, r0
    if(sys.rt_exec_state & EXEC_RT_COMMAND) {
 80170a0:	4b09      	ldr	r3, [pc, #36]	@ (80170c8 <protocol_on_execute_delay+0x2c>)
 80170a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80170a4:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80170a8:	d008      	beq.n	80170bc <protocol_on_execute_delay+0x20>
        system_clear_exec_state_flag(EXEC_RT_COMMAND);
 80170aa:	4b08      	ldr	r3, [pc, #32]	@ (80170cc <protocol_on_execute_delay+0x30>)
 80170ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80170ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80170b2:	4807      	ldr	r0, [pc, #28]	@ (80170d0 <protocol_on_execute_delay+0x34>)
 80170b4:	4798      	blx	r3
        protocol_execute_rt_commands(0);
 80170b6:	2000      	movs	r0, #0
 80170b8:	f7ff ffb8 	bl	801702c <protocol_execute_rt_commands>
    on_execute_delay(state);
 80170bc:	4b05      	ldr	r3, [pc, #20]	@ (80170d4 <protocol_on_execute_delay+0x38>)
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	4620      	mov	r0, r4
 80170c2:	4798      	blx	r3
}
 80170c4:	bd10      	pop	{r4, pc}
 80170c6:	bf00      	nop
 80170c8:	20001d70 	.word	0x20001d70
 80170cc:	20001a90 	.word	0x20001a90
 80170d0:	20001db8 	.word	0x20001db8
 80170d4:	20002088 	.word	0x20002088

080170d8 <protocol_poll_cmd>:
{
 80170d8:	b508      	push	{r3, lr}
    if((c = hal.stream.read()) != SERIAL_NO_DATA) {
 80170da:	4b2b      	ldr	r3, [pc, #172]	@ (8017188 <protocol_poll_cmd+0xb0>)
 80170dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80170e0:	4798      	blx	r3
 80170e2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80170e6:	d04b      	beq.n	8017180 <protocol_poll_cmd+0xa8>
        if ((c == '\n') || (c == '\r')) { // End of line reached
 80170e8:	280a      	cmp	r0, #10
 80170ea:	d014      	beq.n	8017116 <protocol_poll_cmd+0x3e>
 80170ec:	280d      	cmp	r0, #13
 80170ee:	d012      	beq.n	8017116 <protocol_poll_cmd+0x3e>
        } else if(c == ASCII_DEL || c == ASCII_BS) {
 80170f0:	287f      	cmp	r0, #127	@ 0x7f
 80170f2:	d032      	beq.n	801715a <protocol_poll_cmd+0x82>
 80170f4:	2808      	cmp	r0, #8
 80170f6:	d030      	beq.n	801715a <protocol_poll_cmd+0x82>
        } else if(char_counter == 0 ? c != ' ' : char_counter < (LINE_BUFFER_SIZE - 1))
 80170f8:	4b24      	ldr	r3, [pc, #144]	@ (801718c <protocol_poll_cmd+0xb4>)
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d137      	bne.n	8017170 <protocol_poll_cmd+0x98>
 8017100:	f1b0 0220 	subs.w	r2, r0, #32
 8017104:	bf18      	it	ne
 8017106:	2201      	movne	r2, #1
 8017108:	b1d2      	cbz	r2, 8017140 <protocol_poll_cmd+0x68>
            line[char_counter++] = c;
 801710a:	1c59      	adds	r1, r3, #1
 801710c:	4a1f      	ldr	r2, [pc, #124]	@ (801718c <protocol_poll_cmd+0xb4>)
 801710e:	6011      	str	r1, [r2, #0]
 8017110:	4a1f      	ldr	r2, [pc, #124]	@ (8017190 <protocol_poll_cmd+0xb8>)
 8017112:	54d0      	strb	r0, [r2, r3]
 8017114:	e014      	b.n	8017140 <protocol_poll_cmd+0x68>
            line[char_counter] = '\0';
 8017116:	4b1d      	ldr	r3, [pc, #116]	@ (801718c <protocol_poll_cmd+0xb4>)
 8017118:	681a      	ldr	r2, [r3, #0]
 801711a:	4b1d      	ldr	r3, [pc, #116]	@ (8017190 <protocol_poll_cmd+0xb8>)
 801711c:	2100      	movs	r1, #0
 801711e:	5499      	strb	r1, [r3, r2]
            gc_state.last_error = *line == '\0' ? Status_OK : (*line == '$' ? system_execute_line(line) : Status_SystemGClock);
 8017120:	7818      	ldrb	r0, [r3, #0]
 8017122:	b110      	cbz	r0, 801712a <protocol_poll_cmd+0x52>
 8017124:	2824      	cmp	r0, #36	@ 0x24
 8017126:	d014      	beq.n	8017152 <protocol_poll_cmd+0x7a>
 8017128:	2009      	movs	r0, #9
 801712a:	4b1a      	ldr	r3, [pc, #104]	@ (8017194 <protocol_poll_cmd+0xbc>)
 801712c:	f883 0081 	strb.w	r0, [r3, #129]	@ 0x81
            char_counter = 0;
 8017130:	2300      	movs	r3, #0
 8017132:	4a16      	ldr	r2, [pc, #88]	@ (801718c <protocol_poll_cmd+0xb4>)
 8017134:	6013      	str	r3, [r2, #0]
            *line = '\0';
 8017136:	4a16      	ldr	r2, [pc, #88]	@ (8017190 <protocol_poll_cmd+0xb8>)
 8017138:	7013      	strb	r3, [r2, #0]
            grbl.report.status_message(gc_state.last_error);
 801713a:	4b17      	ldr	r3, [pc, #92]	@ (8017198 <protocol_poll_cmd+0xc0>)
 801713c:	689b      	ldr	r3, [r3, #8]
 801713e:	4798      	blx	r3
        keep_rt_commands = char_counter > 0 && *line == '$';
 8017140:	4b12      	ldr	r3, [pc, #72]	@ (801718c <protocol_poll_cmd+0xb4>)
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	b1cb      	cbz	r3, 801717a <protocol_poll_cmd+0xa2>
 8017146:	4b12      	ldr	r3, [pc, #72]	@ (8017190 <protocol_poll_cmd+0xb8>)
 8017148:	781b      	ldrb	r3, [r3, #0]
 801714a:	2b24      	cmp	r3, #36	@ 0x24
 801714c:	d019      	beq.n	8017182 <protocol_poll_cmd+0xaa>
 801714e:	2200      	movs	r2, #0
 8017150:	e014      	b.n	801717c <protocol_poll_cmd+0xa4>
            gc_state.last_error = *line == '\0' ? Status_OK : (*line == '$' ? system_execute_line(line) : Status_SystemGClock);
 8017152:	4618      	mov	r0, r3
 8017154:	f00a fcfc 	bl	8021b50 <system_execute_line>
 8017158:	e7e7      	b.n	801712a <protocol_poll_cmd+0x52>
            if(char_counter)
 801715a:	4b0c      	ldr	r3, [pc, #48]	@ (801718c <protocol_poll_cmd+0xb4>)
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d0ee      	beq.n	8017140 <protocol_poll_cmd+0x68>
                line[--char_counter] = '\0';
 8017162:	3b01      	subs	r3, #1
 8017164:	4a09      	ldr	r2, [pc, #36]	@ (801718c <protocol_poll_cmd+0xb4>)
 8017166:	6013      	str	r3, [r2, #0]
 8017168:	4a09      	ldr	r2, [pc, #36]	@ (8017190 <protocol_poll_cmd+0xb8>)
 801716a:	2100      	movs	r1, #0
 801716c:	54d1      	strb	r1, [r2, r3]
 801716e:	e7e7      	b.n	8017140 <protocol_poll_cmd+0x68>
        } else if(char_counter == 0 ? c != ' ' : char_counter < (LINE_BUFFER_SIZE - 1))
 8017170:	2bff      	cmp	r3, #255	@ 0xff
 8017172:	bf8c      	ite	hi
 8017174:	2200      	movhi	r2, #0
 8017176:	2201      	movls	r2, #1
 8017178:	e7c6      	b.n	8017108 <protocol_poll_cmd+0x30>
        keep_rt_commands = char_counter > 0 && *line == '$';
 801717a:	2200      	movs	r2, #0
 801717c:	4b07      	ldr	r3, [pc, #28]	@ (801719c <protocol_poll_cmd+0xc4>)
 801717e:	701a      	strb	r2, [r3, #0]
}
 8017180:	bd08      	pop	{r3, pc}
        keep_rt_commands = char_counter > 0 && *line == '$';
 8017182:	2201      	movs	r2, #1
 8017184:	e7fa      	b.n	801717c <protocol_poll_cmd+0xa4>
 8017186:	bf00      	nop
 8017188:	20001a90 	.word	0x20001a90
 801718c:	20002320 	.word	0x20002320
 8017190:	2000221c 	.word	0x2000221c
 8017194:	200017c8 	.word	0x200017c8
 8017198:	20001c78 	.word	0x20001c78
 801719c:	20002114 	.word	0x20002114

080171a0 <protocol_enqueue_gcode>:
    bool ok = xcommand[0] == '\0' &&
 80171a0:	4b16      	ldr	r3, [pc, #88]	@ (80171fc <protocol_enqueue_gcode+0x5c>)
 80171a2:	781b      	ldrb	r3, [r3, #0]
               (state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_JOG|STATE_TOOL_CHANGE))) &&
 80171a4:	b10b      	cbz	r3, 80171aa <protocol_enqueue_gcode+0xa>
    bool ok = xcommand[0] == '\0' &&
 80171a6:	2000      	movs	r0, #0
}
 80171a8:	4770      	bx	lr
{
 80171aa:	b510      	push	{r4, lr}
 80171ac:	4604      	mov	r4, r0
               (state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_JOG|STATE_TOOL_CHANGE))) &&
 80171ae:	f007 fecb 	bl	801ef48 <state_get>
    bool ok = xcommand[0] == '\0' &&
 80171b2:	b9b8      	cbnz	r0, 80171e4 <protocol_enqueue_gcode+0x44>
                 bit_isfalse(sys.rt_exec_state, EXEC_MOTION_CANCEL);
 80171b4:	4b12      	ldr	r3, [pc, #72]	@ (8017200 <protocol_enqueue_gcode+0x60>)
 80171b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
               (state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_JOG|STATE_TOOL_CHANGE))) &&
 80171b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80171bc:	d11a      	bne.n	80171f4 <protocol_enqueue_gcode+0x54>
    if(ok && gc_state.file_run)
 80171be:	4b11      	ldr	r3, [pc, #68]	@ (8017204 <protocol_enqueue_gcode+0x64>)
 80171c0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80171c4:	b143      	cbz	r3, 80171d8 <protocol_enqueue_gcode+0x38>
        ok = gc_state.modal.program_flow != ProgramFlow_Running || strncmp((char *)gcode, "$J=", 3);
 80171c6:	4b0f      	ldr	r3, [pc, #60]	@ (8017204 <protocol_enqueue_gcode+0x64>)
 80171c8:	7e1b      	ldrb	r3, [r3, #24]
 80171ca:	b92b      	cbnz	r3, 80171d8 <protocol_enqueue_gcode+0x38>
 80171cc:	2203      	movs	r2, #3
 80171ce:	490e      	ldr	r1, [pc, #56]	@ (8017208 <protocol_enqueue_gcode+0x68>)
 80171d0:	4620      	mov	r0, r4
 80171d2:	f00d fdd0 	bl	8024d76 <strncmp>
 80171d6:	b178      	cbz	r0, 80171f8 <protocol_enqueue_gcode+0x58>
        strcpy(xcommand, gcode);
 80171d8:	4621      	mov	r1, r4
 80171da:	4808      	ldr	r0, [pc, #32]	@ (80171fc <protocol_enqueue_gcode+0x5c>)
 80171dc:	f00d feff 	bl	8024fde <strcpy>
 80171e0:	2001      	movs	r0, #1
 80171e2:	e008      	b.n	80171f6 <protocol_enqueue_gcode+0x56>
               (state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_JOG|STATE_TOOL_CHANGE))) &&
 80171e4:	f007 feb0 	bl	801ef48 <state_get>
 80171e8:	f240 2321 	movw	r3, #545	@ 0x221
 80171ec:	4218      	tst	r0, r3
 80171ee:	d1e1      	bne.n	80171b4 <protocol_enqueue_gcode+0x14>
    bool ok = xcommand[0] == '\0' &&
 80171f0:	2000      	movs	r0, #0
 80171f2:	e000      	b.n	80171f6 <protocol_enqueue_gcode+0x56>
 80171f4:	2000      	movs	r0, #0
}
 80171f6:	bd10      	pop	{r4, pc}
        ok = gc_state.modal.program_flow != ProgramFlow_Running || strncmp((char *)gcode, "$J=", 3);
 80171f8:	2000      	movs	r0, #0
 80171fa:	e7fc      	b.n	80171f6 <protocol_enqueue_gcode+0x56>
 80171fc:	20002118 	.word	0x20002118
 8017200:	20001d70 	.word	0x20001d70
 8017204:	200017c8 	.word	0x200017c8
 8017208:	0802bf14 	.word	0x0802bf14

0801720c <protocol_auto_cycle_start>:
{
 801720c:	b508      	push	{r3, lr}
    if (plan_get_current_block() != NULL) // Check if there are any blocks in the buffer.
 801720e:	f7ff fb67 	bl	80168e0 <plan_get_current_block>
 8017212:	b120      	cbz	r0, 801721e <protocol_auto_cycle_start+0x12>
        system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8017214:	4b02      	ldr	r3, [pc, #8]	@ (8017220 <protocol_auto_cycle_start+0x14>)
 8017216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017218:	2102      	movs	r1, #2
 801721a:	4802      	ldr	r0, [pc, #8]	@ (8017224 <protocol_auto_cycle_start+0x18>)
 801721c:	4798      	blx	r3
}
 801721e:	bd08      	pop	{r3, pc}
 8017220:	20001a90 	.word	0x20001a90
 8017224:	20001db8 	.word	0x20001db8

08017228 <protocol_exec_rt_system>:
{
 8017228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (sys.rt_exec_alarm && (rt_exec = system_clear_exec_alarm())) { // Enter only if any bit flag is true
 801722a:	4ba3      	ldr	r3, [pc, #652]	@ (80174b8 <protocol_exec_rt_system+0x290>)
 801722c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801722e:	2b00      	cmp	r3, #0
 8017230:	d078      	beq.n	8017324 <protocol_exec_rt_system+0xfc>
 8017232:	4ba2      	ldr	r3, [pc, #648]	@ (80174bc <protocol_exec_rt_system+0x294>)
 8017234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017236:	2100      	movs	r1, #0
 8017238:	48a1      	ldr	r0, [pc, #644]	@ (80174c0 <protocol_exec_rt_system+0x298>)
 801723a:	4798      	blx	r3
 801723c:	4604      	mov	r4, r0
 801723e:	2800      	cmp	r0, #0
 8017240:	f000 8137 	beq.w	80174b2 <protocol_exec_rt_system+0x28a>
        if((sys.reset_pending = !!(sys.rt_exec_state & EXEC_RESET))) {
 8017244:	4b9c      	ldr	r3, [pc, #624]	@ (80174b8 <protocol_exec_rt_system+0x290>)
 8017246:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
 8017248:	f3c5 1540 	ubfx	r5, r5, #5, #1
 801724c:	711d      	strb	r5, [r3, #4]
 801724e:	b995      	cbnz	r5, 8017276 <protocol_exec_rt_system+0x4e>
        system_raise_alarm((alarm_code_t)rt_exec);
 8017250:	b2e6      	uxtb	r6, r4
 8017252:	4630      	mov	r0, r6
 8017254:	f00a fde8 	bl	8021e28 <system_raise_alarm>
        if(killed) // Tell driver/plugins about reset.
 8017258:	b11d      	cbz	r5, 8017262 <protocol_exec_rt_system+0x3a>
            hal.driver_reset();
 801725a:	4b98      	ldr	r3, [pc, #608]	@ (80174bc <protocol_exec_rt_system+0x294>)
 801725c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8017260:	4798      	blx	r3
        if((sys.blocking_event = (alarm_code_t)rt_exec == Alarm_HardLimit ||
 8017262:	1e73      	subs	r3, r6, #1
 8017264:	b2db      	uxtb	r3, r3
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 8017266:	2b01      	cmp	r3, #1
 8017268:	d90f      	bls.n	801728a <protocol_exec_rt_system+0x62>
                                  (alarm_code_t)rt_exec == Alarm_SoftLimit ||
 801726a:	2e0a      	cmp	r6, #10
 801726c:	d022      	beq.n	80172b4 <protocol_exec_rt_system+0x8c>
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 801726e:	2e11      	cmp	r6, #17
 8017270:	d009      	beq.n	8017286 <protocol_exec_rt_system+0x5e>
 8017272:	2300      	movs	r3, #0
 8017274:	e00a      	b.n	801728c <protocol_exec_rt_system+0x64>
            spindle_all_off();
 8017276:	f007 fbe3 	bl	801ea40 <spindle_all_off>
            hal.coolant.set_state((coolant_state_t){0});
 801727a:	4b90      	ldr	r3, [pc, #576]	@ (80174bc <protocol_exec_rt_system+0x294>)
 801727c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801727e:	f04f 0000 	mov.w	r0, #0
 8017282:	4798      	blx	r3
 8017284:	e7e4      	b.n	8017250 <protocol_exec_rt_system+0x28>
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 8017286:	2301      	movs	r3, #1
 8017288:	e000      	b.n	801728c <protocol_exec_rt_system+0x64>
 801728a:	2301      	movs	r3, #1
        if((sys.blocking_event = (alarm_code_t)rt_exec == Alarm_HardLimit ||
 801728c:	4a8a      	ldr	r2, [pc, #552]	@ (80174b8 <protocol_exec_rt_system+0x290>)
 801728e:	7153      	strb	r3, [r2, #5]
 8017290:	2b00      	cmp	r3, #0
 8017292:	d048      	beq.n	8017326 <protocol_exec_rt_system+0xfe>
            system_set_exec_alarm(rt_exec);
 8017294:	4b89      	ldr	r3, [pc, #548]	@ (80174bc <protocol_exec_rt_system+0x294>)
 8017296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017298:	4621      	mov	r1, r4
 801729a:	f102 004c 	add.w	r0, r2, #76	@ 0x4c
 801729e:	4798      	blx	r3
            switch((alarm_code_t)rt_exec) {
 80172a0:	b2e4      	uxtb	r4, r4
 80172a2:	2c0a      	cmp	r4, #10
 80172a4:	d008      	beq.n	80172b8 <protocol_exec_rt_system+0x90>
 80172a6:	2c11      	cmp	r4, #17
 80172a8:	d018      	beq.n	80172dc <protocol_exec_rt_system+0xb4>
                    grbl.report.feedback_message(Message_CriticalEvent);
 80172aa:	4b86      	ldr	r3, [pc, #536]	@ (80174c4 <protocol_exec_rt_system+0x29c>)
 80172ac:	68db      	ldr	r3, [r3, #12]
 80172ae:	2001      	movs	r0, #1
 80172b0:	4798      	blx	r3
                    break;
 80172b2:	e005      	b.n	80172c0 <protocol_exec_rt_system+0x98>
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 80172b4:	2301      	movs	r3, #1
 80172b6:	e7e9      	b.n	801728c <protocol_exec_rt_system+0x64>
                    grbl.report.feedback_message(Message_EStop);
 80172b8:	4b82      	ldr	r3, [pc, #520]	@ (80174c4 <protocol_exec_rt_system+0x29c>)
 80172ba:	68db      	ldr	r3, [r3, #12]
 80172bc:	200c      	movs	r0, #12
 80172be:	4798      	blx	r3
            system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 80172c0:	4c7e      	ldr	r4, [pc, #504]	@ (80174bc <protocol_exec_rt_system+0x294>)
 80172c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80172c4:	2120      	movs	r1, #32
 80172c6:	4880      	ldr	r0, [pc, #512]	@ (80174c8 <protocol_exec_rt_system+0x2a0>)
 80172c8:	4798      	blx	r3
            *line = '\0';
 80172ca:	2300      	movs	r3, #0
 80172cc:	4a7f      	ldr	r2, [pc, #508]	@ (80174cc <protocol_exec_rt_system+0x2a4>)
 80172ce:	7013      	strb	r3, [r2, #0]
            char_counter = 0;
 80172d0:	4a7f      	ldr	r2, [pc, #508]	@ (80174d0 <protocol_exec_rt_system+0x2a8>)
 80172d2:	6013      	str	r3, [r2, #0]
            hal.stream.reset_read_buffer();
 80172d4:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 80172d8:	4798      	blx	r3
            while (bit_isfalse(sys.rt_exec_state, EXEC_RESET)) {
 80172da:	e00b      	b.n	80172f4 <protocol_exec_rt_system+0xcc>
                    grbl.report.feedback_message(Message_MotorFault);
 80172dc:	4b79      	ldr	r3, [pc, #484]	@ (80174c4 <protocol_exec_rt_system+0x29c>)
 80172de:	68db      	ldr	r3, [r3, #12]
 80172e0:	2010      	movs	r0, #16
 80172e2:	4798      	blx	r3
                    break;
 80172e4:	e7ec      	b.n	80172c0 <protocol_exec_rt_system+0x98>
                protocol_poll_cmd();
 80172e6:	f7ff fef7 	bl	80170d8 <protocol_poll_cmd>
                grbl.on_execute_realtime(STATE_ESTOP);
 80172ea:	4b76      	ldr	r3, [pc, #472]	@ (80174c4 <protocol_exec_rt_system+0x29c>)
 80172ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80172ee:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80172f2:	4798      	blx	r3
            while (bit_isfalse(sys.rt_exec_state, EXEC_RESET)) {
 80172f4:	4b70      	ldr	r3, [pc, #448]	@ (80174b8 <protocol_exec_rt_system+0x290>)
 80172f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80172f8:	f013 0f20 	tst.w	r3, #32
 80172fc:	d10c      	bne.n	8017318 <protocol_exec_rt_system+0xf0>
                if(bit_istrue(sys.rt_exec_state, EXEC_STATUS_REPORT)) {
 80172fe:	4b6e      	ldr	r3, [pc, #440]	@ (80174b8 <protocol_exec_rt_system+0x290>)
 8017300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017302:	f013 0f01 	tst.w	r3, #1
 8017306:	d0ee      	beq.n	80172e6 <protocol_exec_rt_system+0xbe>
                    system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8017308:	4b6c      	ldr	r3, [pc, #432]	@ (80174bc <protocol_exec_rt_system+0x294>)
 801730a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801730c:	2101      	movs	r1, #1
 801730e:	486e      	ldr	r0, [pc, #440]	@ (80174c8 <protocol_exec_rt_system+0x2a0>)
 8017310:	4798      	blx	r3
                    report_realtime_status();
 8017312:	f003 fb29 	bl	801a968 <report_realtime_status>
 8017316:	e7e6      	b.n	80172e6 <protocol_exec_rt_system+0xbe>
            system_clear_exec_alarm(); // Clear alarm
 8017318:	4b68      	ldr	r3, [pc, #416]	@ (80174bc <protocol_exec_rt_system+0x294>)
 801731a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801731c:	2100      	movs	r1, #0
 801731e:	4868      	ldr	r0, [pc, #416]	@ (80174c0 <protocol_exec_rt_system+0x298>)
 8017320:	4798      	blx	r3
 8017322:	e000      	b.n	8017326 <protocol_exec_rt_system+0xfe>
    bool killed = false;
 8017324:	2500      	movs	r5, #0
    if (sys.rt_exec_state && (rt_exec = system_clear_exec_states())) { // Get and clear volatile sys.rt_exec_state atomically.
 8017326:	4b64      	ldr	r3, [pc, #400]	@ (80174b8 <protocol_exec_rt_system+0x290>)
 8017328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801732a:	2b00      	cmp	r3, #0
 801732c:	f000 8095 	beq.w	801745a <protocol_exec_rt_system+0x232>
 8017330:	4b62      	ldr	r3, [pc, #392]	@ (80174bc <protocol_exec_rt_system+0x294>)
 8017332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017334:	2100      	movs	r1, #0
 8017336:	4864      	ldr	r0, [pc, #400]	@ (80174c8 <protocol_exec_rt_system+0x2a0>)
 8017338:	4798      	blx	r3
 801733a:	4604      	mov	r4, r0
 801733c:	2800      	cmp	r0, #0
 801733e:	f000 808c 	beq.w	801745a <protocol_exec_rt_system+0x232>
        if((sys.reset_pending = !!(rt_exec & EXEC_RESET))) {
 8017342:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8017346:	4a5c      	ldr	r2, [pc, #368]	@ (80174b8 <protocol_exec_rt_system+0x290>)
 8017348:	7113      	strb	r3, [r2, #4]
 801734a:	2b00      	cmp	r3, #0
 801734c:	f040 80c8 	bne.w	80174e0 <protocol_exec_rt_system+0x2b8>
        if(rt_exec & EXEC_STOP) { // Experimental for now, must be verified. Do NOT move to interrupt context!
 8017350:	f010 0f10 	tst.w	r0, #16
 8017354:	d058      	beq.n	8017408 <protocol_exec_rt_system+0x1e0>
            sys.cancel = true;
 8017356:	4b58      	ldr	r3, [pc, #352]	@ (80174b8 <protocol_exec_rt_system+0x290>)
 8017358:	2201      	movs	r2, #1
 801735a:	705a      	strb	r2, [r3, #1]
            sys.step_control.flags = 0;
 801735c:	2200      	movs	r2, #0
 801735e:	761a      	strb	r2, [r3, #24]
            sys.flags.feed_hold_pending = Off;
 8017360:	7d99      	ldrb	r1, [r3, #22]
 8017362:	f362 1145 	bfi	r1, r2, #5, #1
 8017366:	7599      	strb	r1, [r3, #22]
            sys.override_delay.flags = 0;
 8017368:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
            if(sys.override.control.sync)
 801736c:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8017370:	4293      	cmp	r3, r2
 8017372:	f2c0 80f4 	blt.w	801755e <protocol_exec_rt_system+0x336>
            gc_state.tool_change = false;
 8017376:	4b57      	ldr	r3, [pc, #348]	@ (80174d4 <protocol_exec_rt_system+0x2ac>)
 8017378:	2200      	movs	r2, #0
 801737a:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
            gc_state.modal.spindle.rpm_mode = SpindleSpeedMode_RPM;
 801737e:	76da      	strb	r2, [r3, #27]
            hal.driver_reset();
 8017380:	4b4e      	ldr	r3, [pc, #312]	@ (80174bc <protocol_exec_rt_system+0x294>)
 8017382:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8017386:	4798      	blx	r3
            if(!sys.flags.keep_input && hal.stream.suspend_read && hal.stream.suspend_read(false))
 8017388:	4b4b      	ldr	r3, [pc, #300]	@ (80174b8 <protocol_exec_rt_system+0x290>)
 801738a:	7ddb      	ldrb	r3, [r3, #23]
 801738c:	f013 0f01 	tst.w	r3, #1
 8017390:	d10a      	bne.n	80173a8 <protocol_exec_rt_system+0x180>
 8017392:	4b4a      	ldr	r3, [pc, #296]	@ (80174bc <protocol_exec_rt_system+0x294>)
 8017394:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8017398:	b133      	cbz	r3, 80173a8 <protocol_exec_rt_system+0x180>
 801739a:	2000      	movs	r0, #0
 801739c:	4798      	blx	r3
 801739e:	b118      	cbz	r0, 80173a8 <protocol_exec_rt_system+0x180>
                hal.stream.cancel_read_buffer(); // flush pending blocks (after M6)
 80173a0:	4b46      	ldr	r3, [pc, #280]	@ (80174bc <protocol_exec_rt_system+0x294>)
 80173a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80173a6:	4798      	blx	r3
            sys.flags.keep_input = Off;
 80173a8:	4d43      	ldr	r5, [pc, #268]	@ (80174b8 <protocol_exec_rt_system+0x290>)
 80173aa:	7deb      	ldrb	r3, [r5, #23]
 80173ac:	f36f 0300 	bfc	r3, #0, #1
 80173b0:	75eb      	strb	r3, [r5, #23]
            gc_init();
 80173b2:	f7f6 f889 	bl	800d4c8 <gc_init>
            plan_reset();
 80173b6:	f7ff f9ef 	bl	8016798 <plan_reset>
            if(sys.alarm_pending == Alarm_ProbeProtect) {
 80173ba:	7d2b      	ldrb	r3, [r5, #20]
 80173bc:	2b0d      	cmp	r3, #13
 80173be:	f000 80d4 	beq.w	801756a <protocol_exec_rt_system+0x342>
                st_reset();
 80173c2:	f008 fca5 	bl	801fd10 <st_reset>
            sync_position();
 80173c6:	f7ff fd15 	bl	8016df4 <plan_sync_position>
 80173ca:	4943      	ldr	r1, [pc, #268]	@ (80174d8 <protocol_exec_rt_system+0x2b0>)
 80173cc:	4843      	ldr	r0, [pc, #268]	@ (80174dc <protocol_exec_rt_system+0x2b4>)
 80173ce:	f00a fcd5 	bl	8021d7c <system_convert_array_steps_to_mpos>
            gc_spindle_off();
 80173d2:	f7f6 f919 	bl	800d608 <gc_spindle_off>
            gc_coolant((coolant_state_t){0});
 80173d6:	f04f 0000 	mov.w	r0, #0
 80173da:	f7f6 f923 	bl	800d624 <gc_coolant>
            flush_override_buffers();
 80173de:	f7ff f8ad 	bl	801653c <flush_override_buffers>
            if(!((state_get() == STATE_ALARM) && (sys.alarm == Alarm_LimitsEngaged || sys.alarm == Alarm_HomingRequired))) {
 80173e2:	f007 fdb1 	bl	801ef48 <state_get>
 80173e6:	2801      	cmp	r0, #1
 80173e8:	f000 80ca 	beq.w	8017580 <protocol_exec_rt_system+0x358>
                state_set(hal.control.get_state().safety_door_ajar ? STATE_SAFETY_DOOR : STATE_IDLE);
 80173ec:	4b33      	ldr	r3, [pc, #204]	@ (80174bc <protocol_exec_rt_system+0x294>)
 80173ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80173f0:	4798      	blx	r3
 80173f2:	f010 0f08 	tst.w	r0, #8
 80173f6:	f000 80cc 	beq.w	8017592 <protocol_exec_rt_system+0x36a>
 80173fa:	2040      	movs	r0, #64	@ 0x40
 80173fc:	f007 fdaa 	bl	801ef54 <state_set>
                grbl.report.feedback_message(Message_Stop);
 8017400:	4b30      	ldr	r3, [pc, #192]	@ (80174c4 <protocol_exec_rt_system+0x29c>)
 8017402:	68db      	ldr	r3, [r3, #12]
 8017404:	2016      	movs	r0, #22
 8017406:	4798      	blx	r3
        if (rt_exec & EXEC_STATUS_REPORT)
 8017408:	f014 0f01 	tst.w	r4, #1
 801740c:	f040 80c3 	bne.w	8017596 <protocol_exec_rt_system+0x36e>
        if(rt_exec & EXEC_GCODE_REPORT)
 8017410:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 8017414:	f040 80c2 	bne.w	801759c <protocol_exec_rt_system+0x374>
        if(rt_exec & EXEC_TLO_REPORT)
 8017418:	f414 5f80 	tst.w	r4, #4096	@ 0x1000
 801741c:	f040 80c1 	bne.w	80175a2 <protocol_exec_rt_system+0x37a>
        if (rt_exec & EXEC_PID_REPORT)
 8017420:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 8017424:	f040 80c0 	bne.w	80175a8 <protocol_exec_rt_system+0x380>
        if(rt_exec & EXEC_RT_COMMAND)
 8017428:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 801742c:	f040 80bf 	bne.w	80175ae <protocol_exec_rt_system+0x386>
        rt_exec &= ~(EXEC_STOP|EXEC_STATUS_REPORT|EXEC_GCODE_REPORT|EXEC_PID_REPORT|EXEC_TLO_REPORT|EXEC_RT_COMMAND); // clear requests already processed
 8017430:	f424 5070 	bic.w	r0, r4, #15360	@ 0x3c00
 8017434:	f020 0011 	bic.w	r0, r0, #17
        if(sys.flags.feed_hold_pending) {
 8017438:	4b1f      	ldr	r3, [pc, #124]	@ (80174b8 <protocol_exec_rt_system+0x290>)
 801743a:	7d9b      	ldrb	r3, [r3, #22]
 801743c:	f013 0f20 	tst.w	r3, #32
 8017440:	d008      	beq.n	8017454 <protocol_exec_rt_system+0x22c>
            if(rt_exec & EXEC_CYCLE_START)
 8017442:	f014 0f02 	tst.w	r4, #2
 8017446:	f000 80b6 	beq.w	80175b6 <protocol_exec_rt_system+0x38e>
                sys.flags.feed_hold_pending = Off;
 801744a:	4b1b      	ldr	r3, [pc, #108]	@ (80174b8 <protocol_exec_rt_system+0x290>)
 801744c:	7d9a      	ldrb	r2, [r3, #22]
 801744e:	f36f 1245 	bfc	r2, #5, #1
 8017452:	759a      	strb	r2, [r3, #22]
        if(rt_exec)
 8017454:	b108      	cbz	r0, 801745a <protocol_exec_rt_system+0x232>
            state_update(rt_exec);
 8017456:	f007 fed5 	bl	801f204 <state_update>
    grbl.on_execute_realtime(state_get());
 801745a:	4b1a      	ldr	r3, [pc, #104]	@ (80174c4 <protocol_exec_rt_system+0x29c>)
 801745c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 801745e:	f007 fd73 	bl	801ef48 <state_get>
 8017462:	47a0      	blx	r4
    if(!sys.override_delay.feedrate && (rt_exec = get_feed_override())) {
 8017464:	4b14      	ldr	r3, [pc, #80]	@ (80174b8 <protocol_exec_rt_system+0x290>)
 8017466:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801746a:	f013 0f01 	tst.w	r3, #1
 801746e:	f000 80ac 	beq.w	80175ca <protocol_exec_rt_system+0x3a2>
    if(!sys.override_delay.spindle && (rt_exec = get_spindle_override())) {
 8017472:	4b11      	ldr	r3, [pc, #68]	@ (80174b8 <protocol_exec_rt_system+0x290>)
 8017474:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8017478:	f013 0f04 	tst.w	r3, #4
 801747c:	f000 80e5 	beq.w	801764a <protocol_exec_rt_system+0x422>
    if(!sys.override_delay.coolant && (rt_exec = get_coolant_override())) {
 8017480:	4b0d      	ldr	r3, [pc, #52]	@ (80174b8 <protocol_exec_rt_system+0x290>)
 8017482:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8017486:	f013 0f02 	tst.w	r3, #2
 801748a:	f000 8145 	beq.w	8017718 <protocol_exec_rt_system+0x4f0>
    if (state_get() & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG))
 801748e:	f007 fd5b 	bl	801ef48 <state_get>
 8017492:	f010 0ffc 	tst.w	r0, #252	@ 0xfc
 8017496:	f040 819a 	bne.w	80177ce <protocol_exec_rt_system+0x5a6>
    return !ABORTED;
 801749a:	4b07      	ldr	r3, [pc, #28]	@ (80174b8 <protocol_exec_rt_system+0x290>)
 801749c:	781b      	ldrb	r3, [r3, #0]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	f040 8198 	bne.w	80177d4 <protocol_exec_rt_system+0x5ac>
 80174a4:	4b04      	ldr	r3, [pc, #16]	@ (80174b8 <protocol_exec_rt_system+0x290>)
 80174a6:	785b      	ldrb	r3, [r3, #1]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	f000 8195 	beq.w	80177d8 <protocol_exec_rt_system+0x5b0>
 80174ae:	2000      	movs	r0, #0
 80174b0:	e191      	b.n	80177d6 <protocol_exec_rt_system+0x5ae>
    bool killed = false;
 80174b2:	2500      	movs	r5, #0
 80174b4:	e737      	b.n	8017326 <protocol_exec_rt_system+0xfe>
 80174b6:	bf00      	nop
 80174b8:	20001d70 	.word	0x20001d70
 80174bc:	20001a90 	.word	0x20001a90
 80174c0:	20001dbc 	.word	0x20001dbc
 80174c4:	20001c78 	.word	0x20001c78
 80174c8:	20001db8 	.word	0x20001db8
 80174cc:	2000221c 	.word	0x2000221c
 80174d0:	20002320 	.word	0x20002320
 80174d4:	200017c8 	.word	0x200017c8
 80174d8:	20001df8 	.word	0x20001df8
 80174dc:	20001830 	.word	0x20001830
            if(!killed) {
 80174e0:	b305      	cbz	r5, 8017524 <protocol_exec_rt_system+0x2fc>
            if(!(sys.abort = !hal.control.get_state().e_stop)) {
 80174e2:	4bae      	ldr	r3, [pc, #696]	@ (801779c <protocol_exec_rt_system+0x574>)
 80174e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80174e6:	4798      	blx	r3
 80174e8:	f3c0 1381 	ubfx	r3, r0, #6, #2
 80174ec:	f083 0301 	eor.w	r3, r3, #1
 80174f0:	f003 0301 	and.w	r3, r3, #1
 80174f4:	4aaa      	ldr	r2, [pc, #680]	@ (80177a0 <protocol_exec_rt_system+0x578>)
 80174f6:	7013      	strb	r3, [r2, #0]
 80174f8:	b9e3      	cbnz	r3, 8017534 <protocol_exec_rt_system+0x30c>
                hal.stream.reset_read_buffer();
 80174fa:	4ba8      	ldr	r3, [pc, #672]	@ (801779c <protocol_exec_rt_system+0x574>)
 80174fc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8017500:	4798      	blx	r3
                system_raise_alarm(Alarm_EStop);
 8017502:	200a      	movs	r0, #10
 8017504:	f00a fc90 	bl	8021e28 <system_raise_alarm>
                grbl.report.feedback_message(Message_EStop);
 8017508:	4ba6      	ldr	r3, [pc, #664]	@ (80177a4 <protocol_exec_rt_system+0x57c>)
 801750a:	68db      	ldr	r3, [r3, #12]
 801750c:	200c      	movs	r0, #12
 801750e:	4798      	blx	r3
            if(!killed) // Tell driver/plugins about reset.
 8017510:	b91d      	cbnz	r5, 801751a <protocol_exec_rt_system+0x2f2>
                hal.driver_reset();
 8017512:	4ba2      	ldr	r3, [pc, #648]	@ (801779c <protocol_exec_rt_system+0x574>)
 8017514:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8017518:	4798      	blx	r3
            return !sys.abort; // Nothing else to do but exit.
 801751a:	4ba1      	ldr	r3, [pc, #644]	@ (80177a0 <protocol_exec_rt_system+0x578>)
 801751c:	7818      	ldrb	r0, [r3, #0]
 801751e:	f080 0001 	eor.w	r0, r0, #1
 8017522:	e158      	b.n	80177d6 <protocol_exec_rt_system+0x5ae>
                spindle_all_off();
 8017524:	f007 fa8c 	bl	801ea40 <spindle_all_off>
                hal.coolant.set_state((coolant_state_t){0});
 8017528:	4b9c      	ldr	r3, [pc, #624]	@ (801779c <protocol_exec_rt_system+0x574>)
 801752a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801752c:	f04f 0000 	mov.w	r0, #0
 8017530:	4798      	blx	r3
 8017532:	e7d6      	b.n	80174e2 <protocol_exec_rt_system+0x2ba>
            } else if(hal.control.get_state().motor_fault) {
 8017534:	4b99      	ldr	r3, [pc, #612]	@ (801779c <protocol_exec_rt_system+0x574>)
 8017536:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017538:	4798      	blx	r3
 801753a:	f410 7f80 	tst.w	r0, #256	@ 0x100
 801753e:	d0e7      	beq.n	8017510 <protocol_exec_rt_system+0x2e8>
                sys.abort = false;
 8017540:	4b97      	ldr	r3, [pc, #604]	@ (80177a0 <protocol_exec_rt_system+0x578>)
 8017542:	2200      	movs	r2, #0
 8017544:	701a      	strb	r2, [r3, #0]
                hal.stream.reset_read_buffer();
 8017546:	4b95      	ldr	r3, [pc, #596]	@ (801779c <protocol_exec_rt_system+0x574>)
 8017548:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801754c:	4798      	blx	r3
                system_raise_alarm(Alarm_MotorFault);
 801754e:	2011      	movs	r0, #17
 8017550:	f00a fc6a 	bl	8021e28 <system_raise_alarm>
                grbl.report.feedback_message(Message_MotorFault);
 8017554:	4b93      	ldr	r3, [pc, #588]	@ (80177a4 <protocol_exec_rt_system+0x57c>)
 8017556:	68db      	ldr	r3, [r3, #12]
 8017558:	2010      	movs	r0, #16
 801755a:	4798      	blx	r3
 801755c:	e7d8      	b.n	8017510 <protocol_exec_rt_system+0x2e8>
                sys.override.control = gc_state.modal.override_ctrl;
 801755e:	4b92      	ldr	r3, [pc, #584]	@ (80177a8 <protocol_exec_rt_system+0x580>)
 8017560:	7f1a      	ldrb	r2, [r3, #28]
 8017562:	4b8f      	ldr	r3, [pc, #572]	@ (80177a0 <protocol_exec_rt_system+0x578>)
 8017564:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8017568:	e705      	b.n	8017376 <protocol_exec_rt_system+0x14e>
                st_go_idle();
 801756a:	f008 fa17 	bl	801f99c <st_go_idle>
                system_set_exec_alarm(sys.alarm_pending);
 801756e:	4b8b      	ldr	r3, [pc, #556]	@ (801779c <protocol_exec_rt_system+0x574>)
 8017570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017572:	7d29      	ldrb	r1, [r5, #20]
 8017574:	f105 004c 	add.w	r0, r5, #76	@ 0x4c
 8017578:	4798      	blx	r3
                sys.alarm_pending = Alarm_None;
 801757a:	2300      	movs	r3, #0
 801757c:	752b      	strb	r3, [r5, #20]
 801757e:	e722      	b.n	80173c6 <protocol_exec_rt_system+0x19e>
            if(!((state_get() == STATE_ALARM) && (sys.alarm == Alarm_LimitsEngaged || sys.alarm == Alarm_HomingRequired))) {
 8017580:	4b87      	ldr	r3, [pc, #540]	@ (80177a0 <protocol_exec_rt_system+0x578>)
 8017582:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8017586:	3b0b      	subs	r3, #11
 8017588:	b2db      	uxtb	r3, r3
 801758a:	2b01      	cmp	r3, #1
 801758c:	f63f af2e 	bhi.w	80173ec <protocol_exec_rt_system+0x1c4>
 8017590:	e73a      	b.n	8017408 <protocol_exec_rt_system+0x1e0>
                state_set(hal.control.get_state().safety_door_ajar ? STATE_SAFETY_DOOR : STATE_IDLE);
 8017592:	2000      	movs	r0, #0
 8017594:	e732      	b.n	80173fc <protocol_exec_rt_system+0x1d4>
            report_realtime_status();
 8017596:	f003 f9e7 	bl	801a968 <report_realtime_status>
 801759a:	e739      	b.n	8017410 <protocol_exec_rt_system+0x1e8>
            report_gcode_modes();
 801759c:	f002 fbc0 	bl	8019d20 <report_gcode_modes>
 80175a0:	e73a      	b.n	8017418 <protocol_exec_rt_system+0x1f0>
            report_tool_offsets();
 80175a2:	f002 fa1f 	bl	80199e4 <report_tool_offsets>
 80175a6:	e73b      	b.n	8017420 <protocol_exec_rt_system+0x1f8>
            report_pid_log();
 80175a8:	f004 fd12 	bl	801bfd0 <report_pid_log>
 80175ac:	e73c      	b.n	8017428 <protocol_exec_rt_system+0x200>
            protocol_execute_rt_commands(0);
 80175ae:	2000      	movs	r0, #0
 80175b0:	f7ff fd3c 	bl	801702c <protocol_execute_rt_commands>
 80175b4:	e73c      	b.n	8017430 <protocol_exec_rt_system+0x208>
            else if(!sys.override.control.feed_hold_disable)
 80175b6:	4b7a      	ldr	r3, [pc, #488]	@ (80177a0 <protocol_exec_rt_system+0x578>)
 80175b8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80175bc:	f013 0f02 	tst.w	r3, #2
 80175c0:	f47f af48 	bne.w	8017454 <protocol_exec_rt_system+0x22c>
                rt_exec |= EXEC_FEED_HOLD;
 80175c4:	f040 0008 	orr.w	r0, r0, #8
        if(rt_exec)
 80175c8:	e745      	b.n	8017456 <protocol_exec_rt_system+0x22e>
    if(!sys.override_delay.feedrate && (rt_exec = get_feed_override())) {
 80175ca:	f7fe ff61 	bl	8016490 <get_feed_override>
 80175ce:	4603      	mov	r3, r0
 80175d0:	2800      	cmp	r0, #0
 80175d2:	f43f af4e 	beq.w	8017472 <protocol_exec_rt_system+0x24a>
        override_t new_f_override = sys.override.feed_rate;
 80175d6:	4a72      	ldr	r2, [pc, #456]	@ (80177a0 <protocol_exec_rt_system+0x578>)
 80175d8:	69d4      	ldr	r4, [r2, #28]
        override_t new_r_override = sys.override.rapid_rate;
 80175da:	6a15      	ldr	r5, [r2, #32]
 80175dc:	e015      	b.n	801760a <protocol_exec_rt_system+0x3e2>
                    new_f_override += FEED_OVERRIDE_COARSE_INCREMENT;
 80175de:	340a      	adds	r4, #10
                    break;
 80175e0:	e00a      	b.n	80175f8 <protocol_exec_rt_system+0x3d0>
                    new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT;
 80175e2:	3c0a      	subs	r4, #10
                    break;
 80175e4:	e008      	b.n	80175f8 <protocol_exec_rt_system+0x3d0>
                    new_f_override += FEED_OVERRIDE_FINE_INCREMENT;
 80175e6:	3401      	adds	r4, #1
                    break;
 80175e8:	e006      	b.n	80175f8 <protocol_exec_rt_system+0x3d0>
                    new_f_override -= FEED_OVERRIDE_FINE_INCREMENT;
 80175ea:	3c01      	subs	r4, #1
                    break;
 80175ec:	e004      	b.n	80175f8 <protocol_exec_rt_system+0x3d0>
                    new_r_override = RAPID_OVERRIDE_MEDIUM;
 80175ee:	2532      	movs	r5, #50	@ 0x32
                    break;
 80175f0:	e002      	b.n	80175f8 <protocol_exec_rt_system+0x3d0>
                    new_r_override = RAPID_OVERRIDE_LOW;
 80175f2:	2519      	movs	r5, #25
                    break;
 80175f4:	e000      	b.n	80175f8 <protocol_exec_rt_system+0x3d0>
                    new_r_override = DEFAULT_RAPID_OVERRIDE;
 80175f6:	2564      	movs	r5, #100	@ 0x64
            new_f_override = constrain(new_f_override, MIN_FEED_RATE_OVERRIDE, MAX_FEED_RATE_OVERRIDE);
 80175f8:	2c09      	cmp	r4, #9
 80175fa:	d91f      	bls.n	801763c <protocol_exec_rt_system+0x414>
 80175fc:	2cc8      	cmp	r4, #200	@ 0xc8
 80175fe:	bf28      	it	cs
 8017600:	24c8      	movcs	r4, #200	@ 0xc8
        } while((rt_exec = get_feed_override()));
 8017602:	f7fe ff45 	bl	8016490 <get_feed_override>
 8017606:	4603      	mov	r3, r0
 8017608:	b1d0      	cbz	r0, 8017640 <protocol_exec_rt_system+0x418>
            switch(rt_exec) {
 801760a:	3b90      	subs	r3, #144	@ 0x90
 801760c:	2b07      	cmp	r3, #7
 801760e:	d8f3      	bhi.n	80175f8 <protocol_exec_rt_system+0x3d0>
 8017610:	a201      	add	r2, pc, #4	@ (adr r2, 8017618 <protocol_exec_rt_system+0x3f0>)
 8017612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017616:	bf00      	nop
 8017618:	08017639 	.word	0x08017639
 801761c:	080175df 	.word	0x080175df
 8017620:	080175e3 	.word	0x080175e3
 8017624:	080175e7 	.word	0x080175e7
 8017628:	080175eb 	.word	0x080175eb
 801762c:	080175f7 	.word	0x080175f7
 8017630:	080175ef 	.word	0x080175ef
 8017634:	080175f3 	.word	0x080175f3
 8017638:	2464      	movs	r4, #100	@ 0x64
 801763a:	e7df      	b.n	80175fc <protocol_exec_rt_system+0x3d4>
            new_f_override = constrain(new_f_override, MIN_FEED_RATE_OVERRIDE, MAX_FEED_RATE_OVERRIDE);
 801763c:	240a      	movs	r4, #10
 801763e:	e7e0      	b.n	8017602 <protocol_exec_rt_system+0x3da>
        plan_feed_override(new_f_override, new_r_override);
 8017640:	4629      	mov	r1, r5
 8017642:	4620      	mov	r0, r4
 8017644:	f7ff fc12 	bl	8016e6c <plan_feed_override>
 8017648:	e713      	b.n	8017472 <protocol_exec_rt_system+0x24a>
    if(!sys.override_delay.spindle && (rt_exec = get_spindle_override())) {
 801764a:	f7fe ff43 	bl	80164d4 <get_spindle_override>
 801764e:	4605      	mov	r5, r0
 8017650:	2800      	cmp	r0, #0
 8017652:	f43f af15 	beq.w	8017480 <protocol_exec_rt_system+0x258>
        spindle_ptrs_t *spindle = gc_spindle_get();
 8017656:	f7f5 fff5 	bl	800d644 <gc_spindle_get>
 801765a:	4606      	mov	r6, r0
        override_t last_s_override = spindle->param->override_pct;
 801765c:	6843      	ldr	r3, [r0, #4]
 801765e:	68dc      	ldr	r4, [r3, #12]
        bool spindle_stop = false;
 8017660:	2700      	movs	r7, #0
 8017662:	e009      	b.n	8017678 <protocol_exec_rt_system+0x450>
                    last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT;
 8017664:	340a      	adds	r4, #10
            last_s_override = constrain(last_s_override, MIN_SPINDLE_RPM_OVERRIDE, MAX_SPINDLE_RPM_OVERRIDE);
 8017666:	2c09      	cmp	r4, #9
 8017668:	d92c      	bls.n	80176c4 <protocol_exec_rt_system+0x49c>
 801766a:	2cc8      	cmp	r4, #200	@ 0xc8
 801766c:	bf28      	it	cs
 801766e:	24c8      	movcs	r4, #200	@ 0xc8
        } while((rt_exec = get_spindle_override()));
 8017670:	f7fe ff30 	bl	80164d4 <get_spindle_override>
 8017674:	4605      	mov	r5, r0
 8017676:	b338      	cbz	r0, 80176c8 <protocol_exec_rt_system+0x4a0>
            switch(rt_exec) {
 8017678:	f1a5 0399 	sub.w	r3, r5, #153	@ 0x99
 801767c:	2b05      	cmp	r3, #5
 801767e:	d818      	bhi.n	80176b2 <protocol_exec_rt_system+0x48a>
 8017680:	a201      	add	r2, pc, #4	@ (adr r2, 8017688 <protocol_exec_rt_system+0x460>)
 8017682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017686:	bf00      	nop
 8017688:	080176c1 	.word	0x080176c1
 801768c:	08017665 	.word	0x08017665
 8017690:	080176a1 	.word	0x080176a1
 8017694:	080176a5 	.word	0x080176a5
 8017698:	080176a9 	.word	0x080176a9
 801769c:	080176ad 	.word	0x080176ad
                    last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT;
 80176a0:	3c0a      	subs	r4, #10
                    break;
 80176a2:	e7e0      	b.n	8017666 <protocol_exec_rt_system+0x43e>
                    last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT;
 80176a4:	3401      	adds	r4, #1
                    break;
 80176a6:	e7de      	b.n	8017666 <protocol_exec_rt_system+0x43e>
                    last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT;
 80176a8:	3c01      	subs	r4, #1
                    break;
 80176aa:	e7dc      	b.n	8017666 <protocol_exec_rt_system+0x43e>
                    spindle_stop = !spindle_stop;
 80176ac:	f087 0701 	eor.w	r7, r7, #1
                    break;
 80176b0:	e7d9      	b.n	8017666 <protocol_exec_rt_system+0x43e>
                    if(grbl.on_unknown_accessory_override)
 80176b2:	4b3c      	ldr	r3, [pc, #240]	@ (80177a4 <protocol_exec_rt_system+0x57c>)
 80176b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d0d5      	beq.n	8017666 <protocol_exec_rt_system+0x43e>
                        grbl.on_unknown_accessory_override(rt_exec);
 80176ba:	b2e8      	uxtb	r0, r5
 80176bc:	4798      	blx	r3
 80176be:	e7d2      	b.n	8017666 <protocol_exec_rt_system+0x43e>
            switch(rt_exec) {
 80176c0:	2464      	movs	r4, #100	@ 0x64
 80176c2:	e7d2      	b.n	801766a <protocol_exec_rt_system+0x442>
            last_s_override = constrain(last_s_override, MIN_SPINDLE_RPM_OVERRIDE, MAX_SPINDLE_RPM_OVERRIDE);
 80176c4:	240a      	movs	r4, #10
 80176c6:	e7d3      	b.n	8017670 <protocol_exec_rt_system+0x448>
        spindle_set_override(spindle, last_s_override);
 80176c8:	4621      	mov	r1, r4
 80176ca:	4630      	mov	r0, r6
 80176cc:	f007 f972 	bl	801e9b4 <spindle_set_override>
        if (spindle_stop && state_get() == STATE_HOLD && gc_state.modal.spindle.state.on) {
 80176d0:	2f00      	cmp	r7, #0
 80176d2:	f43f aed5 	beq.w	8017480 <protocol_exec_rt_system+0x258>
 80176d6:	f007 fc37 	bl	801ef48 <state_get>
 80176da:	2810      	cmp	r0, #16
 80176dc:	f47f aed0 	bne.w	8017480 <protocol_exec_rt_system+0x258>
 80176e0:	4b31      	ldr	r3, [pc, #196]	@ (80177a8 <protocol_exec_rt_system+0x580>)
 80176e2:	7e9b      	ldrb	r3, [r3, #26]
 80176e4:	f013 0f01 	tst.w	r3, #1
 80176e8:	f43f aeca 	beq.w	8017480 <protocol_exec_rt_system+0x258>
            if (!sys.override.spindle_stop.value)
 80176ec:	4b2c      	ldr	r3, [pc, #176]	@ (80177a0 <protocol_exec_rt_system+0x578>)
 80176ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80176f2:	b92b      	cbnz	r3, 8017700 <protocol_exec_rt_system+0x4d8>
                sys.override.spindle_stop.initiate = On;
 80176f4:	4a2a      	ldr	r2, [pc, #168]	@ (80177a0 <protocol_exec_rt_system+0x578>)
 80176f6:	f043 0302 	orr.w	r3, r3, #2
 80176fa:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 80176fe:	e6bf      	b.n	8017480 <protocol_exec_rt_system+0x258>
            else if (sys.override.spindle_stop.enabled)
 8017700:	f013 0f01 	tst.w	r3, #1
 8017704:	f43f aebc 	beq.w	8017480 <protocol_exec_rt_system+0x258>
                sys.override.spindle_stop.restore = On;
 8017708:	4a25      	ldr	r2, [pc, #148]	@ (80177a0 <protocol_exec_rt_system+0x578>)
 801770a:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 801770e:	f043 0304 	orr.w	r3, r3, #4
 8017712:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8017716:	e6b3      	b.n	8017480 <protocol_exec_rt_system+0x258>
    if(!sys.override_delay.coolant && (rt_exec = get_coolant_override())) {
 8017718:	f7fe fefe 	bl	8016518 <get_coolant_override>
 801771c:	4603      	mov	r3, r0
 801771e:	2800      	cmp	r0, #0
 8017720:	f43f aeb5 	beq.w	801748e <protocol_exec_rt_system+0x266>
        coolant_state_t coolant_state = gc_state.modal.coolant;
 8017724:	4a20      	ldr	r2, [pc, #128]	@ (80177a8 <protocol_exec_rt_system+0x580>)
 8017726:	7e54      	ldrb	r4, [r2, #25]
 8017728:	e022      	b.n	8017770 <protocol_exec_rt_system+0x548>
                    if(hal.coolant_cap.mist && ((state_get() == STATE_IDLE) || (state_get() & (STATE_CYCLE | STATE_HOLD))))
 801772a:	f007 fc0d 	bl	801ef48 <state_get>
 801772e:	f010 0f18 	tst.w	r0, #24
 8017732:	d019      	beq.n	8017768 <protocol_exec_rt_system+0x540>
 8017734:	e02a      	b.n	801778c <protocol_exec_rt_system+0x564>
                    if(hal.coolant_cap.flood && ((state_get() == STATE_IDLE) || (state_get() & (STATE_CYCLE | STATE_HOLD))))
 8017736:	4b19      	ldr	r3, [pc, #100]	@ (801779c <protocol_exec_rt_system+0x574>)
 8017738:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 801773c:	f013 0f01 	tst.w	r3, #1
 8017740:	d012      	beq.n	8017768 <protocol_exec_rt_system+0x540>
 8017742:	f007 fc01 	bl	801ef48 <state_get>
 8017746:	b920      	cbnz	r0, 8017752 <protocol_exec_rt_system+0x52a>
                        coolant_state.flood = !coolant_state.flood;
 8017748:	f084 0301 	eor.w	r3, r4, #1
 801774c:	f363 0400 	bfi	r4, r3, #0, #1
 8017750:	e00a      	b.n	8017768 <protocol_exec_rt_system+0x540>
                    if(hal.coolant_cap.flood && ((state_get() == STATE_IDLE) || (state_get() & (STATE_CYCLE | STATE_HOLD))))
 8017752:	f007 fbf9 	bl	801ef48 <state_get>
 8017756:	f010 0f18 	tst.w	r0, #24
 801775a:	d005      	beq.n	8017768 <protocol_exec_rt_system+0x540>
 801775c:	e7f4      	b.n	8017748 <protocol_exec_rt_system+0x520>
                    if(grbl.on_unknown_accessory_override)
 801775e:	4a11      	ldr	r2, [pc, #68]	@ (80177a4 <protocol_exec_rt_system+0x57c>)
 8017760:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8017762:	b10a      	cbz	r2, 8017768 <protocol_exec_rt_system+0x540>
                        grbl.on_unknown_accessory_override(rt_exec);
 8017764:	b2d8      	uxtb	r0, r3
 8017766:	4790      	blx	r2
        } while((rt_exec = get_coolant_override()));
 8017768:	f7fe fed6 	bl	8016518 <get_coolant_override>
 801776c:	4603      	mov	r3, r0
 801776e:	b1e8      	cbz	r0, 80177ac <protocol_exec_rt_system+0x584>
            switch(rt_exec) {
 8017770:	2ba0      	cmp	r3, #160	@ 0xa0
 8017772:	d0e0      	beq.n	8017736 <protocol_exec_rt_system+0x50e>
 8017774:	2ba1      	cmp	r3, #161	@ 0xa1
 8017776:	d1f2      	bne.n	801775e <protocol_exec_rt_system+0x536>
                    if(hal.coolant_cap.mist && ((state_get() == STATE_IDLE) || (state_get() & (STATE_CYCLE | STATE_HOLD))))
 8017778:	4b08      	ldr	r3, [pc, #32]	@ (801779c <protocol_exec_rt_system+0x574>)
 801777a:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 801777e:	f013 0f02 	tst.w	r3, #2
 8017782:	d0f1      	beq.n	8017768 <protocol_exec_rt_system+0x540>
 8017784:	f007 fbe0 	bl	801ef48 <state_get>
 8017788:	2800      	cmp	r0, #0
 801778a:	d1ce      	bne.n	801772a <protocol_exec_rt_system+0x502>
                        coolant_state.mist = !coolant_state.mist;
 801778c:	f3c4 0346 	ubfx	r3, r4, #1, #7
 8017790:	f083 0301 	eor.w	r3, r3, #1
 8017794:	f363 0441 	bfi	r4, r3, #1, #1
 8017798:	e7e6      	b.n	8017768 <protocol_exec_rt_system+0x540>
 801779a:	bf00      	nop
 801779c:	20001a90 	.word	0x20001a90
 80177a0:	20001d70 	.word	0x20001d70
 80177a4:	20001c78 	.word	0x20001c78
 80177a8:	200017c8 	.word	0x200017c8
        if(coolant_state.value != gc_state.modal.coolant.value) {
 80177ac:	b2e3      	uxtb	r3, r4
 80177ae:	4a0b      	ldr	r2, [pc, #44]	@ (80177dc <protocol_exec_rt_system+0x5b4>)
 80177b0:	7e52      	ldrb	r2, [r2, #25]
 80177b2:	4293      	cmp	r3, r2
 80177b4:	f43f ae6b 	beq.w	801748e <protocol_exec_rt_system+0x266>
            gc_coolant(coolant_state); // Report flag set in gc_coolant().
 80177b8:	4620      	mov	r0, r4
 80177ba:	f7f5 ff33 	bl	800d624 <gc_coolant>
            if(grbl.on_override_changed)
 80177be:	4b08      	ldr	r3, [pc, #32]	@ (80177e0 <protocol_exec_rt_system+0x5b8>)
 80177c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	f43f ae63 	beq.w	801748e <protocol_exec_rt_system+0x266>
                grbl.on_override_changed(OverrideChanged_CoolantState);
 80177c8:	2000      	movs	r0, #0
 80177ca:	4798      	blx	r3
 80177cc:	e65f      	b.n	801748e <protocol_exec_rt_system+0x266>
        st_prep_buffer();
 80177ce:	f008 fbc9 	bl	801ff64 <st_prep_buffer>
 80177d2:	e662      	b.n	801749a <protocol_exec_rt_system+0x272>
    return !ABORTED;
 80177d4:	2000      	movs	r0, #0
}
 80177d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return !ABORTED;
 80177d8:	2001      	movs	r0, #1
 80177da:	e7fc      	b.n	80177d6 <protocol_exec_rt_system+0x5ae>
 80177dc:	200017c8 	.word	0x200017c8
 80177e0:	20001c78 	.word	0x20001c78

080177e4 <protocol_exec_rt_suspend>:
{
 80177e4:	b508      	push	{r3, lr}
    if((sys.blocking_event = state == STATE_SLEEP)) {
 80177e6:	2880      	cmp	r0, #128	@ 0x80
 80177e8:	bf14      	ite	ne
 80177ea:	2000      	movne	r0, #0
 80177ec:	2001      	moveq	r0, #1
 80177ee:	4b1c      	ldr	r3, [pc, #112]	@ (8017860 <protocol_exec_rt_suspend+0x7c>)
 80177f0:	7158      	strb	r0, [r3, #5]
 80177f2:	b1a0      	cbz	r0, 801781e <protocol_exec_rt_suspend+0x3a>
        *line = '\0';
 80177f4:	2300      	movs	r3, #0
 80177f6:	4a1b      	ldr	r2, [pc, #108]	@ (8017864 <protocol_exec_rt_suspend+0x80>)
 80177f8:	7013      	strb	r3, [r2, #0]
        char_counter = 0;
 80177fa:	4a1b      	ldr	r2, [pc, #108]	@ (8017868 <protocol_exec_rt_suspend+0x84>)
 80177fc:	6013      	str	r3, [r2, #0]
        hal.stream.reset_read_buffer();
 80177fe:	4b1b      	ldr	r3, [pc, #108]	@ (801786c <protocol_exec_rt_suspend+0x88>)
 8017800:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8017804:	4798      	blx	r3
 8017806:	e00a      	b.n	801781e <protocol_exec_rt_suspend+0x3a>
            protocol_poll_cmd();
 8017808:	f7ff fc66 	bl	80170d8 <protocol_poll_cmd>
 801780c:	e011      	b.n	8017832 <protocol_exec_rt_suspend+0x4e>
        if(settings.flags.sleep_enable)
 801780e:	4b18      	ldr	r3, [pc, #96]	@ (8017870 <protocol_exec_rt_suspend+0x8c>)
 8017810:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8017814:	f013 0f08 	tst.w	r3, #8
 8017818:	d11e      	bne.n	8017858 <protocol_exec_rt_suspend+0x74>
        protocol_exec_rt_system();
 801781a:	f7ff fd05 	bl	8017228 <protocol_exec_rt_system>
    while(sys.suspend) {
 801781e:	4b10      	ldr	r3, [pc, #64]	@ (8017860 <protocol_exec_rt_suspend+0x7c>)
 8017820:	789b      	ldrb	r3, [r3, #2]
 8017822:	b1e3      	cbz	r3, 801785e <protocol_exec_rt_suspend+0x7a>
        if(sys.abort)
 8017824:	4b0e      	ldr	r3, [pc, #56]	@ (8017860 <protocol_exec_rt_suspend+0x7c>)
 8017826:	781b      	ldrb	r3, [r3, #0]
 8017828:	b9cb      	cbnz	r3, 801785e <protocol_exec_rt_suspend+0x7a>
        if(sys.blocking_event)
 801782a:	4b0d      	ldr	r3, [pc, #52]	@ (8017860 <protocol_exec_rt_suspend+0x7c>)
 801782c:	795b      	ldrb	r3, [r3, #5]
 801782e:	2b00      	cmp	r3, #0
 8017830:	d1ea      	bne.n	8017808 <protocol_exec_rt_suspend+0x24>
        state_suspend_manager();
 8017832:	f008 f80d 	bl	801f850 <state_suspend_manager>
        if(state_get() == STATE_SAFETY_DOOR && !hal.control.get_state().safety_door_ajar)
 8017836:	f007 fb87 	bl	801ef48 <state_get>
 801783a:	2840      	cmp	r0, #64	@ 0x40
 801783c:	d1e7      	bne.n	801780e <protocol_exec_rt_suspend+0x2a>
 801783e:	4b0b      	ldr	r3, [pc, #44]	@ (801786c <protocol_exec_rt_suspend+0x88>)
 8017840:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017842:	4798      	blx	r3
 8017844:	f010 0f08 	tst.w	r0, #8
 8017848:	d1e1      	bne.n	801780e <protocol_exec_rt_suspend+0x2a>
            system_set_exec_state_flag(EXEC_DOOR_CLOSED);
 801784a:	4b08      	ldr	r3, [pc, #32]	@ (801786c <protocol_exec_rt_suspend+0x88>)
 801784c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801784e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8017852:	4808      	ldr	r0, [pc, #32]	@ (8017874 <protocol_exec_rt_suspend+0x90>)
 8017854:	4798      	blx	r3
 8017856:	e7da      	b.n	801780e <protocol_exec_rt_suspend+0x2a>
            sleep_check();
 8017858:	f006 fc38 	bl	801e0cc <sleep_check>
 801785c:	e7dd      	b.n	801781a <protocol_exec_rt_suspend+0x36>
}
 801785e:	bd08      	pop	{r3, pc}
 8017860:	20001d70 	.word	0x20001d70
 8017864:	2000221c 	.word	0x2000221c
 8017868:	20002320 	.word	0x20002320
 801786c:	20001a90 	.word	0x20001a90
 8017870:	200024a8 	.word	0x200024a8
 8017874:	20001db8 	.word	0x20001db8

08017878 <protocol_execute_realtime>:
{
 8017878:	b510      	push	{r4, lr}
    if(protocol_exec_rt_system()) {
 801787a:	f7ff fcd5 	bl	8017228 <protocol_exec_rt_system>
 801787e:	b938      	cbnz	r0, 8017890 <protocol_execute_realtime+0x18>
    return !ABORTED;
 8017880:	4b12      	ldr	r3, [pc, #72]	@ (80178cc <protocol_execute_realtime+0x54>)
 8017882:	781b      	ldrb	r3, [r3, #0]
 8017884:	b9f3      	cbnz	r3, 80178c4 <protocol_execute_realtime+0x4c>
 8017886:	4b11      	ldr	r3, [pc, #68]	@ (80178cc <protocol_execute_realtime+0x54>)
 8017888:	785b      	ldrb	r3, [r3, #1]
 801788a:	b1eb      	cbz	r3, 80178c8 <protocol_execute_realtime+0x50>
 801788c:	2000      	movs	r0, #0
 801788e:	e01a      	b.n	80178c6 <protocol_execute_realtime+0x4e>
        sys_state_t state = state_get();
 8017890:	f007 fb5a 	bl	801ef48 <state_get>
 8017894:	4604      	mov	r4, r0
        if(sys.suspend)
 8017896:	4b0d      	ldr	r3, [pc, #52]	@ (80178cc <protocol_execute_realtime+0x54>)
 8017898:	789b      	ldrb	r3, [r3, #2]
 801789a:	b983      	cbnz	r3, 80178be <protocol_execute_realtime+0x46>
        if((state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP))) && settings_dirty.is_dirty && !gc_state.file_run)
 801789c:	b11c      	cbz	r4, 80178a6 <protocol_execute_realtime+0x2e>
 801789e:	f240 1301 	movw	r3, #257	@ 0x101
 80178a2:	421c      	tst	r4, r3
 80178a4:	d0ec      	beq.n	8017880 <protocol_execute_realtime+0x8>
 80178a6:	4b0a      	ldr	r3, [pc, #40]	@ (80178d0 <protocol_execute_realtime+0x58>)
 80178a8:	781b      	ldrb	r3, [r3, #0]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d0e8      	beq.n	8017880 <protocol_execute_realtime+0x8>
 80178ae:	4b09      	ldr	r3, [pc, #36]	@ (80178d4 <protocol_execute_realtime+0x5c>)
 80178b0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d1e3      	bne.n	8017880 <protocol_execute_realtime+0x8>
            nvs_buffer_sync_physical();
 80178b8:	f7fe fcd6 	bl	8016268 <nvs_buffer_sync_physical>
 80178bc:	e7e0      	b.n	8017880 <protocol_execute_realtime+0x8>
            protocol_exec_rt_suspend(state);
 80178be:	f7ff ff91 	bl	80177e4 <protocol_exec_rt_suspend>
 80178c2:	e7eb      	b.n	801789c <protocol_execute_realtime+0x24>
    return !ABORTED;
 80178c4:	2000      	movs	r0, #0
}
 80178c6:	bd10      	pop	{r4, pc}
    return !ABORTED;
 80178c8:	2001      	movs	r0, #1
 80178ca:	e7fc      	b.n	80178c6 <protocol_execute_realtime+0x4e>
 80178cc:	20001d70 	.word	0x20001d70
 80178d0:	20001fcc 	.word	0x20001fcc
 80178d4:	200017c8 	.word	0x200017c8

080178d8 <protocol_main_loop>:
{
 80178d8:	b510      	push	{r4, lr}
 80178da:	b082      	sub	sp, #8
    if(sys.alarm == Alarm_SelftestFailed) {
 80178dc:	4b9f      	ldr	r3, [pc, #636]	@ (8017b5c <protocol_main_loop+0x284>)
 80178de:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80178e2:	2b10      	cmp	r3, #16
 80178e4:	d03c      	beq.n	8017960 <protocol_main_loop+0x88>
    } else if (hal.control.get_state().e_stop) {
 80178e6:	4b9e      	ldr	r3, [pc, #632]	@ (8017b60 <protocol_main_loop+0x288>)
 80178e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80178ea:	4798      	blx	r3
 80178ec:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80178f0:	d13e      	bne.n	8017970 <protocol_main_loop+0x98>
    } else if(hal.control.get_state().motor_fault) {
 80178f2:	4b9b      	ldr	r3, [pc, #620]	@ (8017b60 <protocol_main_loop+0x288>)
 80178f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80178f6:	4798      	blx	r3
 80178f8:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80178fc:	d16b      	bne.n	80179d6 <protocol_main_loop+0xfe>
    } else if(settings.probe.enable_protection && hal.control.get_state().probe_triggered) {
 80178fe:	4b99      	ldr	r3, [pc, #612]	@ (8017b64 <protocol_main_loop+0x28c>)
 8017900:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8017904:	f013 0f20 	tst.w	r3, #32
 8017908:	d005      	beq.n	8017916 <protocol_main_loop+0x3e>
 801790a:	4b95      	ldr	r3, [pc, #596]	@ (8017b60 <protocol_main_loop+0x288>)
 801790c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801790e:	4798      	blx	r3
 8017910:	f410 4f80 	tst.w	r0, #16384	@ 0x4000
 8017914:	d167      	bne.n	80179e6 <protocol_main_loop+0x10e>
    } else if (limits_homing_required()) {
 8017916:	f7fc f901 	bl	8013b1c <limits_homing_required>
 801791a:	2800      	cmp	r0, #0
 801791c:	d16b      	bne.n	80179f6 <protocol_main_loop+0x11e>
    } else if (settings.limits.flags.hard_enabled &&
 801791e:	4b91      	ldr	r3, [pc, #580]	@ (8017b64 <protocol_main_loop+0x28c>)
 8017920:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 8017924:	f003 0305 	and.w	r3, r3, #5
 8017928:	2b05      	cmp	r3, #5
 801792a:	d06c      	beq.n	8017a06 <protocol_main_loop+0x12e>
    } else if(sys.cold_start && (settings.flags.force_initialization_alarm || hal.control.get_state().reset)) {
 801792c:	4b8b      	ldr	r3, [pc, #556]	@ (8017b5c <protocol_main_loop+0x284>)
 801792e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8017932:	2b00      	cmp	r3, #0
 8017934:	f000 8089 	beq.w	8017a4a <protocol_main_loop+0x172>
 8017938:	4b8a      	ldr	r3, [pc, #552]	@ (8017b64 <protocol_main_loop+0x28c>)
 801793a:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 801793e:	f013 0f20 	tst.w	r3, #32
 8017942:	d105      	bne.n	8017950 <protocol_main_loop+0x78>
 8017944:	4b86      	ldr	r3, [pc, #536]	@ (8017b60 <protocol_main_loop+0x288>)
 8017946:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017948:	4798      	blx	r3
 801794a:	f010 0f01 	tst.w	r0, #1
 801794e:	d07c      	beq.n	8017a4a <protocol_main_loop+0x172>
        state_set(STATE_ALARM); // Ensure alarm state is set.
 8017950:	2001      	movs	r0, #1
 8017952:	f007 faff 	bl	801ef54 <state_set>
        grbl.report.feedback_message(Message_AlarmLock);
 8017956:	4b84      	ldr	r3, [pc, #528]	@ (8017b68 <protocol_main_loop+0x290>)
 8017958:	68db      	ldr	r3, [r3, #12]
 801795a:	2002      	movs	r0, #2
 801795c:	4798      	blx	r3
 801795e:	e00e      	b.n	801797e <protocol_main_loop+0xa6>
        sys.alarm = Alarm_None;
 8017960:	4b7e      	ldr	r3, [pc, #504]	@ (8017b5c <protocol_main_loop+0x284>)
 8017962:	2200      	movs	r2, #0
 8017964:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        system_raise_alarm(Alarm_SelftestFailed);
 8017968:	2010      	movs	r0, #16
 801796a:	f00a fa5d 	bl	8021e28 <system_raise_alarm>
 801796e:	e006      	b.n	801797e <protocol_main_loop+0xa6>
        system_raise_alarm(Alarm_EStop);
 8017970:	200a      	movs	r0, #10
 8017972:	f00a fa59 	bl	8021e28 <system_raise_alarm>
        grbl.report.feedback_message(Message_EStop);
 8017976:	4b7c      	ldr	r3, [pc, #496]	@ (8017b68 <protocol_main_loop+0x290>)
 8017978:	68db      	ldr	r3, [r3, #12]
 801797a:	200c      	movs	r0, #12
 801797c:	4798      	blx	r3
    if(sys.cold_start) {
 801797e:	4b77      	ldr	r3, [pc, #476]	@ (8017b5c <protocol_main_loop+0x284>)
 8017980:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8017984:	2b00      	cmp	r3, #0
 8017986:	f000 8096 	beq.w	8017ab6 <protocol_main_loop+0x1de>
        spindle_all_off();
 801798a:	f007 f859 	bl	801ea40 <spindle_all_off>
        hal.coolant.set_state((coolant_state_t){0});
 801798e:	4b74      	ldr	r3, [pc, #464]	@ (8017b60 <protocol_main_loop+0x288>)
 8017990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017992:	f04f 0000 	mov.w	r0, #0
 8017996:	4798      	blx	r3
        if(realtime_queue.head != realtime_queue.tail)
 8017998:	4b74      	ldr	r3, [pc, #464]	@ (8017b6c <protocol_main_loop+0x294>)
 801799a:	681a      	ldr	r2, [r3, #0]
 801799c:	685b      	ldr	r3, [r3, #4]
 801799e:	429a      	cmp	r2, r3
 80179a0:	d005      	beq.n	80179ae <protocol_main_loop+0xd6>
            system_set_exec_state_flag(EXEC_RT_COMMAND);  // execute any boot up commands
 80179a2:	4b6f      	ldr	r3, [pc, #444]	@ (8017b60 <protocol_main_loop+0x288>)
 80179a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80179a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80179aa:	4871      	ldr	r0, [pc, #452]	@ (8017b70 <protocol_main_loop+0x298>)
 80179ac:	4798      	blx	r3
        on_execute_delay = grbl.on_execute_delay;
 80179ae:	4b6e      	ldr	r3, [pc, #440]	@ (8017b68 <protocol_main_loop+0x290>)
 80179b0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80179b2:	4a70      	ldr	r2, [pc, #448]	@ (8017b74 <protocol_main_loop+0x29c>)
 80179b4:	6011      	str	r1, [r2, #0]
        grbl.on_execute_delay = protocol_on_execute_delay;
 80179b6:	4a70      	ldr	r2, [pc, #448]	@ (8017b78 <protocol_main_loop+0x2a0>)
 80179b8:	64da      	str	r2, [r3, #76]	@ 0x4c
        sys.cold_start = false;
 80179ba:	4b68      	ldr	r3, [pc, #416]	@ (8017b5c <protocol_main_loop+0x284>)
 80179bc:	2200      	movs	r2, #0
 80179be:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    line_flags_t line_flags = {0};
 80179c2:	2400      	movs	r4, #0
 80179c4:	f88d 4000 	strb.w	r4, [sp]
    xcommand[0] = '\0';
 80179c8:	4b6c      	ldr	r3, [pc, #432]	@ (8017b7c <protocol_main_loop+0x2a4>)
 80179ca:	701c      	strb	r4, [r3, #0]
    char_counter = 0;
 80179cc:	4b6c      	ldr	r3, [pc, #432]	@ (8017b80 <protocol_main_loop+0x2a8>)
 80179ce:	601c      	str	r4, [r3, #0]
    keep_rt_commands = false;
 80179d0:	4b6c      	ldr	r3, [pc, #432]	@ (8017b84 <protocol_main_loop+0x2ac>)
 80179d2:	701c      	strb	r4, [r3, #0]
 80179d4:	e1c7      	b.n	8017d66 <protocol_main_loop+0x48e>
        system_raise_alarm(Alarm_MotorFault);
 80179d6:	2011      	movs	r0, #17
 80179d8:	f00a fa26 	bl	8021e28 <system_raise_alarm>
        grbl.report.feedback_message(Message_MotorFault);
 80179dc:	4b62      	ldr	r3, [pc, #392]	@ (8017b68 <protocol_main_loop+0x290>)
 80179de:	68db      	ldr	r3, [r3, #12]
 80179e0:	2010      	movs	r0, #16
 80179e2:	4798      	blx	r3
 80179e4:	e7cb      	b.n	801797e <protocol_main_loop+0xa6>
        system_raise_alarm(Alarm_ProbeProtect);
 80179e6:	200d      	movs	r0, #13
 80179e8:	f00a fa1e 	bl	8021e28 <system_raise_alarm>
        grbl.report.feedback_message(Message_ProbeProtected);
 80179ec:	4b5e      	ldr	r3, [pc, #376]	@ (8017b68 <protocol_main_loop+0x290>)
 80179ee:	68db      	ldr	r3, [r3, #12]
 80179f0:	2015      	movs	r0, #21
 80179f2:	4798      	blx	r3
 80179f4:	e7c3      	b.n	801797e <protocol_main_loop+0xa6>
        system_raise_alarm(Alarm_HomingRequired);
 80179f6:	200b      	movs	r0, #11
 80179f8:	f00a fa16 	bl	8021e28 <system_raise_alarm>
        grbl.report.feedback_message(Message_HomingCycleRequired);
 80179fc:	4b5a      	ldr	r3, [pc, #360]	@ (8017b68 <protocol_main_loop+0x290>)
 80179fe:	68db      	ldr	r3, [r3, #12]
 8017a00:	200d      	movs	r0, #13
 8017a02:	4798      	blx	r3
 8017a04:	e7bb      	b.n	801797e <protocol_main_loop+0xa6>
                 (limit_signals_merge(hal.limits.get_state()).value & sys.hard_limits.mask)) {
 8017a06:	4b56      	ldr	r3, [pc, #344]	@ (8017b60 <protocol_main_loop+0x288>)
 8017a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017a0a:	4798      	blx	r3
 8017a0c:	9001      	str	r0, [sp, #4]
 8017a0e:	f7fb fc39 	bl	8013284 <limit_signals_merge>
 8017a12:	4b52      	ldr	r3, [pc, #328]	@ (8017b5c <protocol_main_loop+0x284>)
 8017a14:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
                settings.limits.flags.check_at_init &&
 8017a18:	4203      	tst	r3, r0
 8017a1a:	d087      	beq.n	801792c <protocol_main_loop+0x54>
        if(sys.alarm == Alarm_LimitsEngaged && hal.control.get_state().limits_override)
 8017a1c:	4b4f      	ldr	r3, [pc, #316]	@ (8017b5c <protocol_main_loop+0x284>)
 8017a1e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8017a22:	2b0c      	cmp	r3, #12
 8017a24:	d105      	bne.n	8017a32 <protocol_main_loop+0x15a>
 8017a26:	4b4e      	ldr	r3, [pc, #312]	@ (8017b60 <protocol_main_loop+0x288>)
 8017a28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017a2a:	4798      	blx	r3
 8017a2c:	f410 6f80 	tst.w	r0, #1024	@ 0x400
 8017a30:	d107      	bne.n	8017a42 <protocol_main_loop+0x16a>
            system_raise_alarm(Alarm_LimitsEngaged);
 8017a32:	200c      	movs	r0, #12
 8017a34:	f00a f9f8 	bl	8021e28 <system_raise_alarm>
            grbl.report.feedback_message(Message_CheckLimits);
 8017a38:	4b4b      	ldr	r3, [pc, #300]	@ (8017b68 <protocol_main_loop+0x290>)
 8017a3a:	68db      	ldr	r3, [r3, #12]
 8017a3c:	2007      	movs	r0, #7
 8017a3e:	4798      	blx	r3
 8017a40:	e79d      	b.n	801797e <protocol_main_loop+0xa6>
            state_set(STATE_IDLE); // Clear alarm state to enable limit switch pulloff.
 8017a42:	2000      	movs	r0, #0
 8017a44:	f007 fa86 	bl	801ef54 <state_set>
 8017a48:	e799      	b.n	801797e <protocol_main_loop+0xa6>
    } else if (state_get() & (STATE_ALARM|STATE_SLEEP)) {
 8017a4a:	f007 fa7d 	bl	801ef48 <state_get>
 8017a4e:	f010 0f81 	tst.w	r0, #129	@ 0x81
 8017a52:	d011      	beq.n	8017a78 <protocol_main_loop+0x1a0>
        if(sys.alarm == Alarm_HomingRequired)
 8017a54:	4b41      	ldr	r3, [pc, #260]	@ (8017b5c <protocol_main_loop+0x284>)
 8017a56:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8017a5a:	2b0b      	cmp	r3, #11
 8017a5c:	d007      	beq.n	8017a6e <protocol_main_loop+0x196>
        state_set(STATE_ALARM); // Ensure alarm state is set.
 8017a5e:	2001      	movs	r0, #1
 8017a60:	f007 fa78 	bl	801ef54 <state_set>
        grbl.report.feedback_message(Message_AlarmLock);
 8017a64:	4b40      	ldr	r3, [pc, #256]	@ (8017b68 <protocol_main_loop+0x290>)
 8017a66:	68db      	ldr	r3, [r3, #12]
 8017a68:	2002      	movs	r0, #2
 8017a6a:	4798      	blx	r3
 8017a6c:	e787      	b.n	801797e <protocol_main_loop+0xa6>
            sys.alarm = Alarm_None; // Clear Alarm_HomingRequired as the lock has been overridden by a soft reset.
 8017a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8017b5c <protocol_main_loop+0x284>)
 8017a70:	2200      	movs	r2, #0
 8017a72:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8017a76:	e7f2      	b.n	8017a5e <protocol_main_loop+0x186>
        state_set(STATE_IDLE);
 8017a78:	2000      	movs	r0, #0
 8017a7a:	f007 fa6b 	bl	801ef54 <state_set>
        if (hal.signals_cap.safety_door_ajar && !settings.safety_door.flags.ignore_when_idle && hal.control.get_state().safety_door_ajar) {
 8017a7e:	4b38      	ldr	r3, [pc, #224]	@ (8017b60 <protocol_main_loop+0x288>)
 8017a80:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8017a84:	f013 0f08 	tst.w	r3, #8
 8017a88:	d012      	beq.n	8017ab0 <protocol_main_loop+0x1d8>
 8017a8a:	4b36      	ldr	r3, [pc, #216]	@ (8017b64 <protocol_main_loop+0x28c>)
 8017a8c:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 8017a90:	f013 0f01 	tst.w	r3, #1
 8017a94:	d10c      	bne.n	8017ab0 <protocol_main_loop+0x1d8>
 8017a96:	4b32      	ldr	r3, [pc, #200]	@ (8017b60 <protocol_main_loop+0x288>)
 8017a98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017a9a:	4798      	blx	r3
 8017a9c:	f010 0f08 	tst.w	r0, #8
 8017aa0:	d006      	beq.n	8017ab0 <protocol_main_loop+0x1d8>
            system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 8017aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8017b60 <protocol_main_loop+0x288>)
 8017aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017aa6:	2140      	movs	r1, #64	@ 0x40
 8017aa8:	4831      	ldr	r0, [pc, #196]	@ (8017b70 <protocol_main_loop+0x298>)
 8017aaa:	4798      	blx	r3
            protocol_execute_realtime(); // Enter safety door mode. Should return as IDLE state.
 8017aac:	f7ff fee4 	bl	8017878 <protocol_execute_realtime>
        system_execute_startup(); // Execute startup script.
 8017ab0:	f009 ff32 	bl	8021918 <system_execute_startup>
 8017ab4:	e763      	b.n	801797e <protocol_main_loop+0xa6>
        memset(&realtime_queue, 0, sizeof(realtime_queue_t));
 8017ab6:	2288      	movs	r2, #136	@ 0x88
 8017ab8:	2100      	movs	r1, #0
 8017aba:	482c      	ldr	r0, [pc, #176]	@ (8017b6c <protocol_main_loop+0x294>)
 8017abc:	f00d f937 	bl	8024d2e <memset>
 8017ac0:	e77f      	b.n	80179c2 <protocol_main_loop+0xea>
                eol = xcommand[0] = '\0';
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	4a2d      	ldr	r2, [pc, #180]	@ (8017b7c <protocol_main_loop+0x2a4>)
 8017ac6:	7013      	strb	r3, [r2, #0]
                keep_rt_commands = false;
 8017ac8:	4a2e      	ldr	r2, [pc, #184]	@ (8017b84 <protocol_main_loop+0x2ac>)
 8017aca:	7013      	strb	r3, [r2, #0]
                char_counter = line_flags.value = 0;
 8017acc:	f88d 3000 	strb.w	r3, [sp]
 8017ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8017b80 <protocol_main_loop+0x2a8>)
 8017ad2:	6013      	str	r3, [r2, #0]
                gc_state.last_error = Status_OK;
 8017ad4:	4a2c      	ldr	r2, [pc, #176]	@ (8017b88 <protocol_main_loop+0x2b0>)
 8017ad6:	f882 3081 	strb.w	r3, [r2, #129]	@ 0x81
                if (state_get() == STATE_JOG) // Block all other states from invoking motion cancel.
 8017ada:	f007 fa35 	bl	801ef48 <state_get>
 8017ade:	2820      	cmp	r0, #32
 8017ae0:	d001      	beq.n	8017ae6 <protocol_main_loop+0x20e>
                eol = xcommand[0] = '\0';
 8017ae2:	2400      	movs	r4, #0
 8017ae4:	e13f      	b.n	8017d66 <protocol_main_loop+0x48e>
                    system_set_exec_state_flag(EXEC_MOTION_CANCEL);
 8017ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8017b60 <protocol_main_loop+0x288>)
 8017ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017aea:	2180      	movs	r1, #128	@ 0x80
 8017aec:	4820      	ldr	r0, [pc, #128]	@ (8017b70 <protocol_main_loop+0x298>)
 8017aee:	4798      	blx	r3
                eol = xcommand[0] = '\0';
 8017af0:	2400      	movs	r4, #0
 8017af2:	e138      	b.n	8017d66 <protocol_main_loop+0x48e>
                if(char_counter == 0 && eol && eol != c) {
 8017af4:	4b22      	ldr	r3, [pc, #136]	@ (8017b80 <protocol_main_loop+0x2a8>)
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	b91b      	cbnz	r3, 8017b02 <protocol_main_loop+0x22a>
 8017afa:	b114      	cbz	r4, 8017b02 <protocol_main_loop+0x22a>
 8017afc:	4284      	cmp	r4, r0
 8017afe:	f040 810c 	bne.w	8017d1a <protocol_main_loop+0x442>
                    eol = (char)c;
 8017b02:	b2c4      	uxtb	r4, r0
                if(!protocol_execute_realtime()) // Runtime command check point.
 8017b04:	f7ff feb8 	bl	8017878 <protocol_execute_realtime>
 8017b08:	b300      	cbz	r0, 8017b4c <protocol_main_loop+0x274>
                line[char_counter] = '\0'; // Set string termination character.
 8017b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8017b80 <protocol_main_loop+0x2a8>)
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8017b8c <protocol_main_loop+0x2b4>)
 8017b10:	2100      	movs	r1, #0
 8017b12:	54d1      	strb	r1, [r2, r3]
                if (line_flags.overflow) // Report line overflow error.
 8017b14:	f89d 3000 	ldrb.w	r3, [sp]
 8017b18:	f013 0f01 	tst.w	r3, #1
 8017b1c:	d038      	beq.n	8017b90 <protocol_main_loop+0x2b8>
                    gc_state.last_error = Status_Overflow;
 8017b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8017b88 <protocol_main_loop+0x2b0>)
 8017b20:	220b      	movs	r2, #11
 8017b22:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
                if(ABORTED)
 8017b26:	4b0d      	ldr	r3, [pc, #52]	@ (8017b5c <protocol_main_loop+0x284>)
 8017b28:	881b      	ldrh	r3, [r3, #0]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	f040 80f7 	bne.w	8017d1e <protocol_main_loop+0x446>
                    grbl.report.status_message(gc_state.last_error);
 8017b30:	4b0d      	ldr	r3, [pc, #52]	@ (8017b68 <protocol_main_loop+0x290>)
 8017b32:	689b      	ldr	r3, [r3, #8]
 8017b34:	4a14      	ldr	r2, [pc, #80]	@ (8017b88 <protocol_main_loop+0x2b0>)
 8017b36:	f892 0081 	ldrb.w	r0, [r2, #129]	@ 0x81
 8017b3a:	4798      	blx	r3
                keep_rt_commands = false;
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	4a11      	ldr	r2, [pc, #68]	@ (8017b84 <protocol_main_loop+0x2ac>)
 8017b40:	7013      	strb	r3, [r2, #0]
                char_counter = line_flags.value = 0;
 8017b42:	f88d 3000 	strb.w	r3, [sp]
 8017b46:	4a0e      	ldr	r2, [pc, #56]	@ (8017b80 <protocol_main_loop+0x2a8>)
 8017b48:	6013      	str	r3, [r2, #0]
 8017b4a:	e10c      	b.n	8017d66 <protocol_main_loop+0x48e>
                    return !sys.flags.exit;      // Bail to calling function upon system abort
 8017b4c:	4b03      	ldr	r3, [pc, #12]	@ (8017b5c <protocol_main_loop+0x284>)
 8017b4e:	7d98      	ldrb	r0, [r3, #22]
 8017b50:	08c0      	lsrs	r0, r0, #3
 8017b52:	f080 0001 	eor.w	r0, r0, #1
 8017b56:	f000 0001 	and.w	r0, r0, #1
 8017b5a:	e144      	b.n	8017de6 <protocol_main_loop+0x50e>
 8017b5c:	20001d70 	.word	0x20001d70
 8017b60:	20001a90 	.word	0x20001a90
 8017b64:	200024a8 	.word	0x200024a8
 8017b68:	20001c78 	.word	0x20001c78
 8017b6c:	2000208c 	.word	0x2000208c
 8017b70:	20001db8 	.word	0x20001db8
 8017b74:	20002088 	.word	0x20002088
 8017b78:	0801709d 	.word	0x0801709d
 8017b7c:	20002118 	.word	0x20002118
 8017b80:	20002320 	.word	0x20002320
 8017b84:	20002114 	.word	0x20002114
 8017b88:	200017c8 	.word	0x200017c8
 8017b8c:	2000221c 	.word	0x2000221c
                else if(*line == '\0') // Empty line. For syncing purposes.
 8017b90:	4b97      	ldr	r3, [pc, #604]	@ (8017df0 <protocol_main_loop+0x518>)
 8017b92:	781b      	ldrb	r3, [r3, #0]
 8017b94:	b923      	cbnz	r3, 8017ba0 <protocol_main_loop+0x2c8>
                    gc_state.last_error = Status_OK;
 8017b96:	4b97      	ldr	r3, [pc, #604]	@ (8017df4 <protocol_main_loop+0x51c>)
 8017b98:	2200      	movs	r2, #0
 8017b9a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8017b9e:	e7c2      	b.n	8017b26 <protocol_main_loop+0x24e>
                else if(*line == '$') {// grblHAL '$' system command
 8017ba0:	2b24      	cmp	r3, #36	@ 0x24
 8017ba2:	d00b      	beq.n	8017bbc <protocol_main_loop+0x2e4>
                } else if(*line == '[' && grbl.on_user_command)
 8017ba4:	2b5b      	cmp	r3, #91	@ 0x5b
 8017ba6:	d119      	bne.n	8017bdc <protocol_main_loop+0x304>
 8017ba8:	4b93      	ldr	r3, [pc, #588]	@ (8017df8 <protocol_main_loop+0x520>)
 8017baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017bae:	b1ab      	cbz	r3, 8017bdc <protocol_main_loop+0x304>
                    gc_state.last_error = grbl.on_user_command(line);
 8017bb0:	488f      	ldr	r0, [pc, #572]	@ (8017df0 <protocol_main_loop+0x518>)
 8017bb2:	4798      	blx	r3
 8017bb4:	4b8f      	ldr	r3, [pc, #572]	@ (8017df4 <protocol_main_loop+0x51c>)
 8017bb6:	f883 0081 	strb.w	r0, [r3, #129]	@ 0x81
 8017bba:	e7b4      	b.n	8017b26 <protocol_main_loop+0x24e>
                    if((gc_state.last_error = system_execute_line(line)) == Status_LimitsEngaged) {
 8017bbc:	488c      	ldr	r0, [pc, #560]	@ (8017df0 <protocol_main_loop+0x518>)
 8017bbe:	f009 ffc7 	bl	8021b50 <system_execute_line>
 8017bc2:	4b8c      	ldr	r3, [pc, #560]	@ (8017df4 <protocol_main_loop+0x51c>)
 8017bc4:	f883 0081 	strb.w	r0, [r3, #129]	@ 0x81
 8017bc8:	282d      	cmp	r0, #45	@ 0x2d
 8017bca:	d1ac      	bne.n	8017b26 <protocol_main_loop+0x24e>
                        system_raise_alarm(Alarm_LimitsEngaged);
 8017bcc:	200c      	movs	r0, #12
 8017bce:	f00a f92b 	bl	8021e28 <system_raise_alarm>
                        grbl.report.feedback_message(Message_CheckLimits);
 8017bd2:	4b89      	ldr	r3, [pc, #548]	@ (8017df8 <protocol_main_loop+0x520>)
 8017bd4:	68db      	ldr	r3, [r3, #12]
 8017bd6:	2007      	movs	r0, #7
 8017bd8:	4798      	blx	r3
 8017bda:	e7a4      	b.n	8017b26 <protocol_main_loop+0x24e>
                else if (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_JOG)) // Everything else is gcode. Block if in alarm, eStop or jog mode.
 8017bdc:	f007 f9b4 	bl	801ef48 <state_get>
 8017be0:	f240 1321 	movw	r3, #289	@ 0x121
 8017be4:	4218      	tst	r0, r3
 8017be6:	d004      	beq.n	8017bf2 <protocol_main_loop+0x31a>
                    gc_state.last_error = Status_SystemGClock;
 8017be8:	4b82      	ldr	r3, [pc, #520]	@ (8017df4 <protocol_main_loop+0x51c>)
 8017bea:	2209      	movs	r2, #9
 8017bec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8017bf0:	e799      	b.n	8017b26 <protocol_main_loop+0x24e>
                else if(gc_state.last_error == Status_OK || gc_state.last_error == Status_GcodeToolChangePending) { // Parse and execute g-code block.
 8017bf2:	4b80      	ldr	r3, [pc, #512]	@ (8017df4 <protocol_main_loop+0x51c>)
 8017bf4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8017bf8:	b10b      	cbz	r3, 8017bfe <protocol_main_loop+0x326>
 8017bfa:	2b28      	cmp	r3, #40	@ 0x28
 8017bfc:	d193      	bne.n	8017b26 <protocol_main_loop+0x24e>
                    gc_state.last_error = gc_execute_block(line);
 8017bfe:	487c      	ldr	r0, [pc, #496]	@ (8017df0 <protocol_main_loop+0x518>)
 8017c00:	f7f5 fe3c 	bl	800d87c <gc_execute_block>
 8017c04:	4b7b      	ldr	r3, [pc, #492]	@ (8017df4 <protocol_main_loop+0x51c>)
 8017c06:	f883 0081 	strb.w	r0, [r3, #129]	@ 0x81
 8017c0a:	e78c      	b.n	8017b26 <protocol_main_loop+0x24e>
            } else if (c != ASCII_BS && c <= (char_counter > 0 ? ' ' - 1 : ' '))
 8017c0c:	4b7b      	ldr	r3, [pc, #492]	@ (8017dfc <protocol_main_loop+0x524>)
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	b1cb      	cbz	r3, 8017c46 <protocol_main_loop+0x36e>
 8017c12:	221f      	movs	r2, #31
 8017c14:	4290      	cmp	r0, r2
 8017c16:	f340 80a6 	ble.w	8017d66 <protocol_main_loop+0x48e>
                switch(c) {
 8017c1a:	283b      	cmp	r0, #59	@ 0x3b
 8017c1c:	dc29      	bgt.n	8017c72 <protocol_main_loop+0x39a>
 8017c1e:	2824      	cmp	r0, #36	@ 0x24
 8017c20:	db13      	blt.n	8017c4a <protocol_main_loop+0x372>
 8017c22:	f1a0 0224 	sub.w	r2, r0, #36	@ 0x24
 8017c26:	2a17      	cmp	r2, #23
 8017c28:	d811      	bhi.n	8017c4e <protocol_main_loop+0x376>
 8017c2a:	e8df f002 	tbb	[pc, r2]
 8017c2e:	1036      	.short	0x1036
 8017c30:	583c1010 	.word	0x583c1010
 8017c34:	10101010 	.word	0x10101010
 8017c38:	10101010 	.word	0x10101010
 8017c3c:	10101010 	.word	0x10101010
 8017c40:	10101010 	.word	0x10101010
 8017c44:	6710      	.short	0x6710
            } else if (c != ASCII_BS && c <= (char_counter > 0 ? ' ' - 1 : ' '))
 8017c46:	2220      	movs	r2, #32
 8017c48:	e7e4      	b.n	8017c14 <protocol_main_loop+0x33c>
                switch(c) {
 8017c4a:	2808      	cmp	r0, #8
 8017c4c:	d015      	beq.n	8017c7a <protocol_main_loop+0x3a2>
                if(!(line_flags.overflow = char_counter >= (LINE_BUFFER_SIZE - 1)))
 8017c4e:	2bff      	cmp	r3, #255	@ 0xff
 8017c50:	bf94      	ite	ls
 8017c52:	2200      	movls	r2, #0
 8017c54:	2201      	movhi	r2, #1
 8017c56:	f89d 1000 	ldrb.w	r1, [sp]
 8017c5a:	f362 0100 	bfi	r1, r2, #0, #1
 8017c5e:	f88d 1000 	strb.w	r1, [sp]
 8017c62:	2a00      	cmp	r2, #0
 8017c64:	d17f      	bne.n	8017d66 <protocol_main_loop+0x48e>
                    line[char_counter++] = c;
 8017c66:	1c59      	adds	r1, r3, #1
 8017c68:	4a64      	ldr	r2, [pc, #400]	@ (8017dfc <protocol_main_loop+0x524>)
 8017c6a:	6011      	str	r1, [r2, #0]
 8017c6c:	4a60      	ldr	r2, [pc, #384]	@ (8017df0 <protocol_main_loop+0x518>)
 8017c6e:	54d0      	strb	r0, [r2, r3]
 8017c70:	e079      	b.n	8017d66 <protocol_main_loop+0x48e>
                switch(c) {
 8017c72:	285b      	cmp	r0, #91	@ 0x5b
 8017c74:	d011      	beq.n	8017c9a <protocol_main_loop+0x3c2>
 8017c76:	287f      	cmp	r0, #127	@ 0x7f
 8017c78:	d1e9      	bne.n	8017c4e <protocol_main_loop+0x376>
                        if(char_counter) {
 8017c7a:	4b60      	ldr	r3, [pc, #384]	@ (8017dfc <protocol_main_loop+0x524>)
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d071      	beq.n	8017d66 <protocol_main_loop+0x48e>
                            line[--char_counter] = '\0';
 8017c82:	3b01      	subs	r3, #1
 8017c84:	4a5d      	ldr	r2, [pc, #372]	@ (8017dfc <protocol_main_loop+0x524>)
 8017c86:	6013      	str	r3, [r2, #0]
 8017c88:	4859      	ldr	r0, [pc, #356]	@ (8017df0 <protocol_main_loop+0x518>)
 8017c8a:	2200      	movs	r2, #0
 8017c8c:	54c2      	strb	r2, [r0, r3]
                            keep_rt_commands = recheck_line(line, &line_flags);
 8017c8e:	4669      	mov	r1, sp
 8017c90:	f7ff f94a 	bl	8016f28 <recheck_line>
 8017c94:	4b5a      	ldr	r3, [pc, #360]	@ (8017e00 <protocol_main_loop+0x528>)
 8017c96:	7018      	strb	r0, [r3, #0]
                        continue;
 8017c98:	e065      	b.n	8017d66 <protocol_main_loop+0x48e>
                        if(char_counter == 0)
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d1d7      	bne.n	8017c4e <protocol_main_loop+0x376>
                            keep_rt_commands = true;
 8017c9e:	4a58      	ldr	r2, [pc, #352]	@ (8017e00 <protocol_main_loop+0x528>)
 8017ca0:	2101      	movs	r1, #1
 8017ca2:	7011      	strb	r1, [r2, #0]
 8017ca4:	e7d3      	b.n	8017c4e <protocol_main_loop+0x376>
                        if(!keep_rt_commands && (line_flags.comment_parentheses = !line_flags.comment_semicolon))
 8017ca6:	4a56      	ldr	r2, [pc, #344]	@ (8017e00 <protocol_main_loop+0x528>)
 8017ca8:	7812      	ldrb	r2, [r2, #0]
 8017caa:	2a00      	cmp	r2, #0
 8017cac:	d1cf      	bne.n	8017c4e <protocol_main_loop+0x376>
 8017cae:	f89d 1000 	ldrb.w	r1, [sp]
 8017cb2:	088a      	lsrs	r2, r1, #2
 8017cb4:	f082 0201 	eor.w	r2, r2, #1
 8017cb8:	f002 0201 	and.w	r2, r2, #1
 8017cbc:	f362 0141 	bfi	r1, r2, #1, #1
 8017cc0:	f88d 1000 	strb.w	r1, [sp]
 8017cc4:	2a00      	cmp	r2, #0
 8017cc6:	d0c2      	beq.n	8017c4e <protocol_main_loop+0x376>
                            keep_rt_commands = !hal.driver_cap.no_gcode_message_handling; // Suspend real-time processing of printable command characters.
 8017cc8:	4a4e      	ldr	r2, [pc, #312]	@ (8017e04 <protocol_main_loop+0x52c>)
 8017cca:	f892 21da 	ldrb.w	r2, [r2, #474]	@ 0x1da
 8017cce:	0892      	lsrs	r2, r2, #2
 8017cd0:	f082 0201 	eor.w	r2, r2, #1
 8017cd4:	f002 0201 	and.w	r2, r2, #1
 8017cd8:	4949      	ldr	r1, [pc, #292]	@ (8017e00 <protocol_main_loop+0x528>)
 8017cda:	700a      	strb	r2, [r1, #0]
 8017cdc:	e7b7      	b.n	8017c4e <protocol_main_loop+0x376>
                        if(!line_flags.comment_semicolon)
 8017cde:	f89d 2000 	ldrb.w	r2, [sp]
 8017ce2:	f012 0f04 	tst.w	r2, #4
 8017ce6:	d1b2      	bne.n	8017c4e <protocol_main_loop+0x376>
                            line_flags.comment_parentheses = keep_rt_commands = false;
 8017ce8:	2100      	movs	r1, #0
 8017cea:	4a45      	ldr	r2, [pc, #276]	@ (8017e00 <protocol_main_loop+0x528>)
 8017cec:	7011      	strb	r1, [r2, #0]
 8017cee:	f89d 2000 	ldrb.w	r2, [sp]
 8017cf2:	f361 0241 	bfi	r2, r1, #1, #1
 8017cf6:	f88d 2000 	strb.w	r2, [sp]
 8017cfa:	e7a8      	b.n	8017c4e <protocol_main_loop+0x376>
                        if(!line_flags.comment_parentheses) {
 8017cfc:	f89d 2000 	ldrb.w	r2, [sp]
 8017d00:	f012 0f02 	tst.w	r2, #2
 8017d04:	d1a3      	bne.n	8017c4e <protocol_main_loop+0x376>
                            keep_rt_commands = false;
 8017d06:	4a3e      	ldr	r2, [pc, #248]	@ (8017e00 <protocol_main_loop+0x528>)
 8017d08:	2100      	movs	r1, #0
 8017d0a:	7011      	strb	r1, [r2, #0]
                            line_flags.comment_semicolon = On;
 8017d0c:	f89d 2000 	ldrb.w	r2, [sp]
 8017d10:	f042 0204 	orr.w	r2, r2, #4
 8017d14:	f88d 2000 	strb.w	r2, [sp]
 8017d18:	e799      	b.n	8017c4e <protocol_main_loop+0x376>
                    eol = '\0';
 8017d1a:	2400      	movs	r4, #0
 8017d1c:	e023      	b.n	8017d66 <protocol_main_loop+0x48e>
        if(xcommand[0] != '\0') {
 8017d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8017e08 <protocol_main_loop+0x530>)
 8017d20:	781b      	ldrb	r3, [r3, #0]
 8017d22:	b173      	cbz	r3, 8017d42 <protocol_main_loop+0x46a>
            if (xcommand[0] == '$') // grblHAL '$' system command
 8017d24:	2b24      	cmp	r3, #36	@ 0x24
 8017d26:	d04f      	beq.n	8017dc8 <protocol_main_loop+0x4f0>
            else if (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_JOG)) // Everything else is gcode. Block if in alarm, eStop or jog state.
 8017d28:	f007 f90e 	bl	801ef48 <state_get>
 8017d2c:	f240 1321 	movw	r3, #289	@ 0x121
 8017d30:	4218      	tst	r0, r3
 8017d32:	d04d      	beq.n	8017dd0 <protocol_main_loop+0x4f8>
                grbl.report.status_message(Status_SystemGClock);
 8017d34:	4b30      	ldr	r3, [pc, #192]	@ (8017df8 <protocol_main_loop+0x520>)
 8017d36:	689b      	ldr	r3, [r3, #8]
 8017d38:	2009      	movs	r0, #9
 8017d3a:	4798      	blx	r3
            xcommand[0] = '\0';
 8017d3c:	4b32      	ldr	r3, [pc, #200]	@ (8017e08 <protocol_main_loop+0x530>)
 8017d3e:	2200      	movs	r2, #0
 8017d40:	701a      	strb	r2, [r3, #0]
        protocol_auto_cycle_start();
 8017d42:	f7ff fa63 	bl	801720c <protocol_auto_cycle_start>
        if(!protocol_execute_realtime() && sys.abort) // Runtime command check point.
 8017d46:	f7ff fd97 	bl	8017878 <protocol_execute_realtime>
 8017d4a:	b918      	cbnz	r0, 8017d54 <protocol_main_loop+0x47c>
 8017d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8017e0c <protocol_main_loop+0x534>)
 8017d4e:	781b      	ldrb	r3, [r3, #0]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d141      	bne.n	8017dd8 <protocol_main_loop+0x500>
        sys.cancel = false;
 8017d54:	4b2d      	ldr	r3, [pc, #180]	@ (8017e0c <protocol_main_loop+0x534>)
 8017d56:	2200      	movs	r2, #0
 8017d58:	705a      	strb	r2, [r3, #1]
        if(settings.flags.sleep_enable)
 8017d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8017e10 <protocol_main_loop+0x538>)
 8017d5c:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8017d60:	f013 0f08 	tst.w	r3, #8
 8017d64:	d141      	bne.n	8017dea <protocol_main_loop+0x512>
        while((c = hal.stream.read()) != SERIAL_NO_DATA) {
 8017d66:	4b27      	ldr	r3, [pc, #156]	@ (8017e04 <protocol_main_loop+0x52c>)
 8017d68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8017d6c:	4798      	blx	r3
 8017d6e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017d72:	d0d4      	beq.n	8017d1e <protocol_main_loop+0x446>
            if(c == ASCII_CAN) {
 8017d74:	f1a0 0308 	sub.w	r3, r0, #8
 8017d78:	2b10      	cmp	r3, #16
 8017d7a:	f63f af47 	bhi.w	8017c0c <protocol_main_loop+0x334>
 8017d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8017d84 <protocol_main_loop+0x4ac>)
 8017d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d84:	08017c7b 	.word	0x08017c7b
 8017d88:	08017c0d 	.word	0x08017c0d
 8017d8c:	08017af5 	.word	0x08017af5
 8017d90:	08017c0d 	.word	0x08017c0d
 8017d94:	08017c0d 	.word	0x08017c0d
 8017d98:	08017af5 	.word	0x08017af5
 8017d9c:	08017c0d 	.word	0x08017c0d
 8017da0:	08017c0d 	.word	0x08017c0d
 8017da4:	08017c0d 	.word	0x08017c0d
 8017da8:	08017c0d 	.word	0x08017c0d
 8017dac:	08017c0d 	.word	0x08017c0d
 8017db0:	08017c0d 	.word	0x08017c0d
 8017db4:	08017c0d 	.word	0x08017c0d
 8017db8:	08017c0d 	.word	0x08017c0d
 8017dbc:	08017c0d 	.word	0x08017c0d
 8017dc0:	08017c0d 	.word	0x08017c0d
 8017dc4:	08017ac3 	.word	0x08017ac3
                system_execute_line(xcommand);
 8017dc8:	480f      	ldr	r0, [pc, #60]	@ (8017e08 <protocol_main_loop+0x530>)
 8017dca:	f009 fec1 	bl	8021b50 <system_execute_line>
 8017dce:	e7b5      	b.n	8017d3c <protocol_main_loop+0x464>
                gc_execute_block(xcommand);
 8017dd0:	480d      	ldr	r0, [pc, #52]	@ (8017e08 <protocol_main_loop+0x530>)
 8017dd2:	f7f5 fd53 	bl	800d87c <gc_execute_block>
 8017dd6:	e7b1      	b.n	8017d3c <protocol_main_loop+0x464>
            return !sys.flags.exit;                   // Bail to main() program loop to reset system.
 8017dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8017e0c <protocol_main_loop+0x534>)
 8017dda:	7d98      	ldrb	r0, [r3, #22]
 8017ddc:	08c0      	lsrs	r0, r0, #3
 8017dde:	f080 0001 	eor.w	r0, r0, #1
 8017de2:	f000 0001 	and.w	r0, r0, #1
}
 8017de6:	b002      	add	sp, #8
 8017de8:	bd10      	pop	{r4, pc}
            sleep_check();
 8017dea:	f006 f96f 	bl	801e0cc <sleep_check>
 8017dee:	e7ba      	b.n	8017d66 <protocol_main_loop+0x48e>
 8017df0:	2000221c 	.word	0x2000221c
 8017df4:	200017c8 	.word	0x200017c8
 8017df8:	20001c78 	.word	0x20001c78
 8017dfc:	20002320 	.word	0x20002320
 8017e00:	20002114 	.word	0x20002114
 8017e04:	20001a90 	.word	0x20001a90
 8017e08:	20002118 	.word	0x20002118
 8017e0c:	20001d70 	.word	0x20001d70
 8017e10:	200024a8 	.word	0x200024a8

08017e14 <protocol_buffer_synchronize>:
{
 8017e14:	b510      	push	{r4, lr}
    protocol_auto_cycle_start();
 8017e16:	f7ff f9f9 	bl	801720c <protocol_auto_cycle_start>
    sys.flags.synchronizing = On;
 8017e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8017e4c <protocol_buffer_synchronize+0x38>)
 8017e1c:	7dd3      	ldrb	r3, [r2, #23]
 8017e1e:	f043 0304 	orr.w	r3, r3, #4
 8017e22:	75d3      	strb	r3, [r2, #23]
    while ((ok = protocol_execute_realtime()) && (plan_get_current_block() || state_get() == STATE_CYCLE));
 8017e24:	f7ff fd28 	bl	8017878 <protocol_execute_realtime>
 8017e28:	4604      	mov	r4, r0
 8017e2a:	b138      	cbz	r0, 8017e3c <protocol_buffer_synchronize+0x28>
 8017e2c:	f7fe fd58 	bl	80168e0 <plan_get_current_block>
 8017e30:	2800      	cmp	r0, #0
 8017e32:	d1f7      	bne.n	8017e24 <protocol_buffer_synchronize+0x10>
 8017e34:	f007 f888 	bl	801ef48 <state_get>
 8017e38:	2808      	cmp	r0, #8
 8017e3a:	d0f3      	beq.n	8017e24 <protocol_buffer_synchronize+0x10>
    sys.flags.synchronizing = Off;
 8017e3c:	4b03      	ldr	r3, [pc, #12]	@ (8017e4c <protocol_buffer_synchronize+0x38>)
 8017e3e:	7dda      	ldrb	r2, [r3, #23]
 8017e40:	f36f 0282 	bfc	r2, #2, #1
 8017e44:	75da      	strb	r2, [r3, #23]
}
 8017e46:	4620      	mov	r0, r4
 8017e48:	bd10      	pop	{r4, pc}
 8017e4a:	bf00      	nop
 8017e4c:	20001d70 	.word	0x20001d70

08017e50 <protocol_enqueue_foreground_task>:
{
 8017e50:	b538      	push	{r3, r4, r5, lr}
    uint_fast8_t bptr = (realtime_queue.head + 1) & (RT_QUEUE_SIZE - 1);    // Get next head pointer
 8017e52:	4a0f      	ldr	r2, [pc, #60]	@ (8017e90 <protocol_enqueue_foreground_task+0x40>)
 8017e54:	6813      	ldr	r3, [r2, #0]
 8017e56:	3301      	adds	r3, #1
 8017e58:	f003 030f 	and.w	r3, r3, #15
    if((ok = bptr != realtime_queue.tail)) {                    // If not buffer full
 8017e5c:	6852      	ldr	r2, [r2, #4]
 8017e5e:	429a      	cmp	r2, r3
 8017e60:	bf14      	ite	ne
 8017e62:	2401      	movne	r4, #1
 8017e64:	2400      	moveq	r4, #0
 8017e66:	d011      	beq.n	8017e8c <protocol_enqueue_foreground_task+0x3c>
        realtime_queue.task[realtime_queue.head].data = data;
 8017e68:	4a09      	ldr	r2, [pc, #36]	@ (8017e90 <protocol_enqueue_foreground_task+0x40>)
 8017e6a:	6815      	ldr	r5, [r2, #0]
 8017e6c:	f105 0c01 	add.w	ip, r5, #1
 8017e70:	f842 103c 	str.w	r1, [r2, ip, lsl #3]
        realtime_queue.task[realtime_queue.head].task = fn;       // add function pointer to buffer,
 8017e74:	6811      	ldr	r1, [r2, #0]
 8017e76:	3101      	adds	r1, #1
 8017e78:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8017e7c:	6048      	str	r0, [r1, #4]
        realtime_queue.head = bptr;                             // update pointer and
 8017e7e:	6013      	str	r3, [r2, #0]
        system_set_exec_state_flag(EXEC_RT_COMMAND);            // flag it for execute
 8017e80:	4b04      	ldr	r3, [pc, #16]	@ (8017e94 <protocol_enqueue_foreground_task+0x44>)
 8017e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017e84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8017e88:	4803      	ldr	r0, [pc, #12]	@ (8017e98 <protocol_enqueue_foreground_task+0x48>)
 8017e8a:	4798      	blx	r3
}
 8017e8c:	4620      	mov	r0, r4
 8017e8e:	bd38      	pop	{r3, r4, r5, pc}
 8017e90:	2000208c 	.word	0x2000208c
 8017e94:	20001a90 	.word	0x20001a90
 8017e98:	20001db8 	.word	0x20001db8

08017e9c <protocol_enqueue_realtime_command>:
{
 8017e9c:	b538      	push	{r3, r4, r5, lr}
 8017e9e:	4604      	mov	r4, r0
    switch ((unsigned char)c) {
 8017ea0:	1ec3      	subs	r3, r0, #3
 8017ea2:	2ba1      	cmp	r3, #161	@ 0xa1
 8017ea4:	f200 81b0 	bhi.w	8018208 <protocol_enqueue_realtime_command+0x36c>
 8017ea8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017eac:	01ae00cc 	.word	0x01ae00cc
 8017eb0:	01ae00ef 	.word	0x01ae00ef
 8017eb4:	01ae01ae 	.word	0x01ae01ae
 8017eb8:	01c401ae 	.word	0x01c401ae
 8017ebc:	01ae01ae 	.word	0x01ae01ae
 8017ec0:	01ae01c4 	.word	0x01ae01c4
 8017ec4:	01ae01ae 	.word	0x01ae01ae
 8017ec8:	01ae01ae 	.word	0x01ae01ae
 8017ecc:	01a301ae 	.word	0x01a301ae
 8017ed0:	01ae01ae 	.word	0x01ae01ae
 8017ed4:	00c001ae 	.word	0x00c001ae
 8017ed8:	01ae00b3 	.word	0x01ae00b3
 8017edc:	01ae01ae 	.word	0x01ae01ae
 8017ee0:	01ae01ae 	.word	0x01ae01ae
 8017ee4:	01ae01ae 	.word	0x01ae01ae
 8017ee8:	01ae01ae 	.word	0x01ae01ae
 8017eec:	00a201ae 	.word	0x00a201ae
 8017ef0:	01ae01ae 	.word	0x01ae01ae
 8017ef4:	01ae01ae 	.word	0x01ae01ae
 8017ef8:	01ae01ae 	.word	0x01ae01ae
 8017efc:	01ae01ae 	.word	0x01ae01ae
 8017f00:	01ae01ae 	.word	0x01ae01ae
 8017f04:	01ae01ae 	.word	0x01ae01ae
 8017f08:	01ae01ae 	.word	0x01ae01ae
 8017f0c:	01ae01ae 	.word	0x01ae01ae
 8017f10:	01ae01ae 	.word	0x01ae01ae
 8017f14:	01ae01ae 	.word	0x01ae01ae
 8017f18:	01ae01ae 	.word	0x01ae01ae
 8017f1c:	01ae01ae 	.word	0x01ae01ae
 8017f20:	01ae01ae 	.word	0x01ae01ae
 8017f24:	01ae01ae 	.word	0x01ae01ae
 8017f28:	01ae01ae 	.word	0x01ae01ae
 8017f2c:	01ae01ae 	.word	0x01ae01ae
 8017f30:	01ae01ae 	.word	0x01ae01ae
 8017f34:	01ae01ae 	.word	0x01ae01ae
 8017f38:	01ae01ae 	.word	0x01ae01ae
 8017f3c:	01ae01ae 	.word	0x01ae01ae
 8017f40:	01ae01ae 	.word	0x01ae01ae
 8017f44:	01ae01ae 	.word	0x01ae01ae
 8017f48:	01ae01ae 	.word	0x01ae01ae
 8017f4c:	01ae01ae 	.word	0x01ae01ae
 8017f50:	01ae01ae 	.word	0x01ae01ae
 8017f54:	01ae01ae 	.word	0x01ae01ae
 8017f58:	01ae01ae 	.word	0x01ae01ae
 8017f5c:	01ae01ae 	.word	0x01ae01ae
 8017f60:	01ae01ae 	.word	0x01ae01ae
 8017f64:	01ae01ae 	.word	0x01ae01ae
 8017f68:	01ae01ae 	.word	0x01ae01ae
 8017f6c:	01ae01ae 	.word	0x01ae01ae
 8017f70:	01ae01ae 	.word	0x01ae01ae
 8017f74:	01ae01ae 	.word	0x01ae01ae
 8017f78:	01ae01ae 	.word	0x01ae01ae
 8017f7c:	01ae01ae 	.word	0x01ae01ae
 8017f80:	01ae01ae 	.word	0x01ae01ae
 8017f84:	01ae01ae 	.word	0x01ae01ae
 8017f88:	01ae01ae 	.word	0x01ae01ae
 8017f8c:	01ae01ae 	.word	0x01ae01ae
 8017f90:	01ae01ae 	.word	0x01ae01ae
 8017f94:	01ae01ae 	.word	0x01ae01ae
 8017f98:	01ae01ae 	.word	0x01ae01ae
 8017f9c:	01ae01ae 	.word	0x01ae01ae
 8017fa0:	01ae01ae 	.word	0x01ae01ae
 8017fa4:	00ef01ae 	.word	0x00ef01ae
 8017fa8:	010700fc 	.word	0x010700fc
 8017fac:	010e012c 	.word	0x010e012c
 8017fb0:	01ae011a 	.word	0x01ae011a
 8017fb4:	013d00d5 	.word	0x013d00d5
 8017fb8:	019f014e 	.word	0x019f014e
 8017fbc:	01870166 	.word	0x01870166
 8017fc0:	01ae01ae 	.word	0x01ae01ae
 8017fc4:	019701ae 	.word	0x019701ae
 8017fc8:	01970197 	.word	0x01970197
 8017fcc:	01970197 	.word	0x01970197
 8017fd0:	01970197 	.word	0x01970197
 8017fd4:	01ae0197 	.word	0x01ae0197
 8017fd8:	019b019b 	.word	0x019b019b
 8017fdc:	019b019b 	.word	0x019b019b
 8017fe0:	019b019b 	.word	0x019b019b
 8017fe4:	019f01ae 	.word	0x019f01ae
 8017fe8:	015e019f 	.word	0x015e019f
 8017fec:	013401ae 	.word	0x013401ae
            if(char_counter == 0)
 8017ff0:	4ba3      	ldr	r3, [pc, #652]	@ (8018280 <protocol_enqueue_realtime_command+0x3e4>)
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	f040 811f 	bne.w	8018238 <protocol_enqueue_realtime_command+0x39c>
                keep_rt_commands = !settings.flags.legacy_rt_commands;
 8017ffa:	4ba2      	ldr	r3, [pc, #648]	@ (8018284 <protocol_enqueue_realtime_command+0x3e8>)
 8017ffc:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8018000:	099b      	lsrs	r3, r3, #6
 8018002:	f083 0301 	eor.w	r3, r3, #1
 8018006:	f003 0301 	and.w	r3, r3, #1
 801800a:	4a9f      	ldr	r2, [pc, #636]	@ (8018288 <protocol_enqueue_realtime_command+0x3ec>)
 801800c:	7013      	strb	r3, [r2, #0]
    bool drop = false;
 801800e:	2500      	movs	r5, #0
 8018010:	e0bc      	b.n	801818c <protocol_enqueue_realtime_command+0x2f0>
            system_set_exec_state_flag(EXEC_STOP);
 8018012:	4d9e      	ldr	r5, [pc, #632]	@ (801828c <protocol_enqueue_realtime_command+0x3f0>)
 8018014:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8018016:	2110      	movs	r1, #16
 8018018:	489d      	ldr	r0, [pc, #628]	@ (8018290 <protocol_enqueue_realtime_command+0x3f4>)
 801801a:	4798      	blx	r3
            char_counter = 0;
 801801c:	4b98      	ldr	r3, [pc, #608]	@ (8018280 <protocol_enqueue_realtime_command+0x3e4>)
 801801e:	2200      	movs	r2, #0
 8018020:	601a      	str	r2, [r3, #0]
            hal.stream.cancel_read_buffer();
 8018022:	f8d5 30cc 	ldr.w	r3, [r5, #204]	@ 0xcc
 8018026:	4798      	blx	r3
            drop = true;
 8018028:	2501      	movs	r5, #1
 801802a:	e120      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
            if(!hal.control.get_state().e_stop)
 801802c:	4b97      	ldr	r3, [pc, #604]	@ (801828c <protocol_enqueue_realtime_command+0x3f0>)
 801802e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018030:	4798      	blx	r3
 8018032:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8018036:	d001      	beq.n	801803c <protocol_enqueue_realtime_command+0x1a0>
            drop = true;
 8018038:	2501      	movs	r5, #1
 801803a:	e118      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
                mc_reset();
 801803c:	f7fc fe50 	bl	8014ce0 <mc_reset>
            drop = true;
 8018040:	2501      	movs	r5, #1
 8018042:	e114      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
            mc_reset();
 8018044:	f7fc fe4c 	bl	8014ce0 <mc_reset>
            sys.flags.exit = On;
 8018048:	4a92      	ldr	r2, [pc, #584]	@ (8018294 <protocol_enqueue_realtime_command+0x3f8>)
 801804a:	7d93      	ldrb	r3, [r2, #22]
 801804c:	f043 0308 	orr.w	r3, r3, #8
 8018050:	7593      	strb	r3, [r2, #22]
            drop = true;
 8018052:	2501      	movs	r5, #1
 8018054:	e10b      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
                report.value = (uint32_t)Report_All;
 8018056:	4890      	ldr	r0, [pc, #576]	@ (8018298 <protocol_enqueue_realtime_command+0x3fc>)
                report.tool_offset = sys.report.tool_offset;
 8018058:	4d8e      	ldr	r5, [pc, #568]	@ (8018294 <protocol_enqueue_realtime_command+0x3f8>)
 801805a:	f895 3031 	ldrb.w	r3, [r5, #49]	@ 0x31
 801805e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018062:	f363 208a 	bfi	r0, r3, #10, #1
                report.m66result = sys.var5399 > -2;
 8018066:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8018068:	f1b3 3fff 	cmp.w	r3, #4294967295
 801806c:	bfb4      	ite	lt
 801806e:	2300      	movlt	r3, #0
 8018070:	2301      	movge	r3, #1
 8018072:	f363 20cb 	bfi	r0, r3, #11, #1
                system_add_rt_report((report_tracking_t)report.value);
 8018076:	f009 ff25 	bl	8021ec4 <system_add_rt_report>
            system_set_exec_state_flag(EXEC_STATUS_REPORT);
 801807a:	4b84      	ldr	r3, [pc, #528]	@ (801828c <protocol_enqueue_realtime_command+0x3f0>)
 801807c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801807e:	2101      	movs	r1, #1
 8018080:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8018084:	4798      	blx	r3
            drop = true;
 8018086:	2501      	movs	r5, #1
 8018088:	e0f1      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
            if(!sys.flags.auto_reporting)
 801808a:	4b82      	ldr	r3, [pc, #520]	@ (8018294 <protocol_enqueue_realtime_command+0x3f8>)
 801808c:	7ddb      	ldrb	r3, [r3, #23]
 801808e:	f013 0f02 	tst.w	r3, #2
 8018092:	f040 8133 	bne.w	80182fc <protocol_enqueue_realtime_command+0x460>
                system_set_exec_state_flag(EXEC_STATUS_REPORT);
 8018096:	4b7d      	ldr	r3, [pc, #500]	@ (801828c <protocol_enqueue_realtime_command+0x3f0>)
 8018098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801809a:	2101      	movs	r1, #1
 801809c:	487c      	ldr	r0, [pc, #496]	@ (8018290 <protocol_enqueue_realtime_command+0x3f4>)
 801809e:	4798      	blx	r3
            drop = true;
 80180a0:	2501      	movs	r5, #1
 80180a2:	e0e4      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
            system_set_exec_state_flag(EXEC_CYCLE_START);
 80180a4:	4b79      	ldr	r3, [pc, #484]	@ (801828c <protocol_enqueue_realtime_command+0x3f0>)
 80180a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80180a8:	2102      	movs	r1, #2
 80180aa:	4879      	ldr	r0, [pc, #484]	@ (8018290 <protocol_enqueue_realtime_command+0x3f4>)
 80180ac:	4798      	blx	r3
            gc_state.tool_change = false;
 80180ae:	4b7b      	ldr	r3, [pc, #492]	@ (801829c <protocol_enqueue_realtime_command+0x400>)
 80180b0:	2200      	movs	r2, #0
 80180b2:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
            drop = true;
 80180b6:	2501      	movs	r5, #1
 80180b8:	e0d9      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
            system_set_exec_state_flag(EXEC_FEED_HOLD);
 80180ba:	4b74      	ldr	r3, [pc, #464]	@ (801828c <protocol_enqueue_realtime_command+0x3f0>)
 80180bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80180be:	2108      	movs	r1, #8
 80180c0:	4873      	ldr	r0, [pc, #460]	@ (8018290 <protocol_enqueue_realtime_command+0x3f4>)
 80180c2:	4798      	blx	r3
            drop = true;
 80180c4:	2501      	movs	r5, #1
 80180c6:	e0d2      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
            if(state_get() != STATE_SAFETY_DOOR) {
 80180c8:	f006 ff3e 	bl	801ef48 <state_get>
 80180cc:	2840      	cmp	r0, #64	@ 0x40
 80180ce:	f000 80b5 	beq.w	801823c <protocol_enqueue_realtime_command+0x3a0>
                system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 80180d2:	4b6e      	ldr	r3, [pc, #440]	@ (801828c <protocol_enqueue_realtime_command+0x3f0>)
 80180d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80180d6:	2140      	movs	r1, #64	@ 0x40
 80180d8:	486d      	ldr	r0, [pc, #436]	@ (8018290 <protocol_enqueue_realtime_command+0x3f4>)
 80180da:	4798      	blx	r3
                drop = true;
 80180dc:	2501      	movs	r5, #1
 80180de:	e0c6      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
            char_counter = 0;
 80180e0:	4b67      	ldr	r3, [pc, #412]	@ (8018280 <protocol_enqueue_realtime_command+0x3e4>)
 80180e2:	2200      	movs	r2, #0
 80180e4:	601a      	str	r2, [r3, #0]
            hal.stream.cancel_read_buffer();
 80180e6:	4b69      	ldr	r3, [pc, #420]	@ (801828c <protocol_enqueue_realtime_command+0x3f0>)
 80180e8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80180ec:	4798      	blx	r3
            if(grbl.on_jog_cancel)
 80180ee:	4b6c      	ldr	r3, [pc, #432]	@ (80182a0 <protocol_enqueue_realtime_command+0x404>)
 80180f0:	f8d3 50c0 	ldr.w	r5, [r3, #192]	@ 0xc0
 80180f4:	2d00      	cmp	r5, #0
 80180f6:	f000 8103 	beq.w	8018300 <protocol_enqueue_realtime_command+0x464>
                grbl.on_jog_cancel(state_get());
 80180fa:	f006 ff25 	bl	801ef48 <state_get>
 80180fe:	47a8      	blx	r5
            drop = true;
 8018100:	2501      	movs	r5, #1
 8018102:	e0b4      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
            system_set_exec_state_flag(EXEC_GCODE_REPORT);
 8018104:	4b61      	ldr	r3, [pc, #388]	@ (801828c <protocol_enqueue_realtime_command+0x3f0>)
 8018106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018108:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801810c:	4860      	ldr	r0, [pc, #384]	@ (8018290 <protocol_enqueue_realtime_command+0x3f4>)
 801810e:	4798      	blx	r3
            drop = true;
 8018110:	2501      	movs	r5, #1
 8018112:	e0ac      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
            if(hal.probe.connected_toggle)
 8018114:	4b5d      	ldr	r3, [pc, #372]	@ (801828c <protocol_enqueue_realtime_command+0x3f0>)
 8018116:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 801811a:	2b00      	cmp	r3, #0
 801811c:	f000 8090 	beq.w	8018240 <protocol_enqueue_realtime_command+0x3a4>
                hal.probe.connected_toggle();
 8018120:	4798      	blx	r3
    bool drop = false;
 8018122:	2500      	movs	r5, #0
 8018124:	e032      	b.n	801818c <protocol_enqueue_realtime_command+0x2f0>
            if(!hal.signals_cap.stop_disable) // Not available as realtime command if HAL supports physical switch
 8018126:	4b59      	ldr	r3, [pc, #356]	@ (801828c <protocol_enqueue_realtime_command+0x3f0>)
 8018128:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801812c:	f013 0f20 	tst.w	r3, #32
 8018130:	f040 8088 	bne.w	8018244 <protocol_enqueue_realtime_command+0x3a8>
                sys.flags.optional_stop_disable = !sys.flags.optional_stop_disable;
 8018134:	4957      	ldr	r1, [pc, #348]	@ (8018294 <protocol_enqueue_realtime_command+0x3f8>)
 8018136:	7d8b      	ldrb	r3, [r1, #22]
 8018138:	099a      	lsrs	r2, r3, #6
 801813a:	f082 0201 	eor.w	r2, r2, #1
 801813e:	f362 1386 	bfi	r3, r2, #6, #1
 8018142:	758b      	strb	r3, [r1, #22]
    bool drop = false;
 8018144:	2500      	movs	r5, #0
 8018146:	e021      	b.n	801818c <protocol_enqueue_realtime_command+0x2f0>
            if(!hal.signals_cap.single_block) // Not available as realtime command if HAL supports physical switch
 8018148:	4b50      	ldr	r3, [pc, #320]	@ (801828c <protocol_enqueue_realtime_command+0x3f0>)
 801814a:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
 801814e:	f013 0f08 	tst.w	r3, #8
 8018152:	d179      	bne.n	8018248 <protocol_enqueue_realtime_command+0x3ac>
                sys.flags.single_block = !sys.flags.single_block;
 8018154:	494f      	ldr	r1, [pc, #316]	@ (8018294 <protocol_enqueue_realtime_command+0x3f8>)
 8018156:	7d8b      	ldrb	r3, [r1, #22]
 8018158:	43da      	mvns	r2, r3
 801815a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801815e:	f362 13c7 	bfi	r3, r2, #7, #1
 8018162:	758b      	strb	r3, [r1, #22]
    bool drop = false;
 8018164:	2500      	movs	r5, #0
 8018166:	e011      	b.n	801818c <protocol_enqueue_realtime_command+0x2f0>
            system_set_exec_state_flag(EXEC_PID_REPORT);
 8018168:	4b48      	ldr	r3, [pc, #288]	@ (801828c <protocol_enqueue_realtime_command+0x3f0>)
 801816a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801816c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8018170:	4847      	ldr	r0, [pc, #284]	@ (8018290 <protocol_enqueue_realtime_command+0x3f4>)
 8018172:	4798      	blx	r3
            drop = true;
 8018174:	2501      	movs	r5, #1
 8018176:	e07a      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
            if((drop = hal.stream.type == StreamType_MPG))
 8018178:	4b44      	ldr	r3, [pc, #272]	@ (801828c <protocol_enqueue_realtime_command+0x3f0>)
 801817a:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 801817e:	2b01      	cmp	r3, #1
 8018180:	bf0c      	ite	eq
 8018182:	2501      	moveq	r5, #1
 8018184:	2500      	movne	r5, #0
 8018186:	d013      	beq.n	80181b0 <protocol_enqueue_realtime_command+0x314>
    if(!drop) switch ((unsigned char)c) {
 8018188:	2d00      	cmp	r5, #0
 801818a:	d170      	bne.n	801826e <protocol_enqueue_realtime_command+0x3d2>
 801818c:	2c3f      	cmp	r4, #63	@ 0x3f
 801818e:	d05f      	beq.n	8018250 <protocol_enqueue_realtime_command+0x3b4>
 8018190:	2c7e      	cmp	r4, #126	@ 0x7e
 8018192:	f000 808b 	beq.w	80182ac <protocol_enqueue_realtime_command+0x410>
 8018196:	2c21      	cmp	r4, #33	@ 0x21
 8018198:	f000 809c 	beq.w	80182d4 <protocol_enqueue_realtime_command+0x438>
            drop = !(keep_rt_commands || (unsigned char)c < 0x7F);
 801819c:	4b3a      	ldr	r3, [pc, #232]	@ (8018288 <protocol_enqueue_realtime_command+0x3ec>)
 801819e:	781b      	ldrb	r3, [r3, #0]
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	f040 80a7 	bne.w	80182f4 <protocol_enqueue_realtime_command+0x458>
 80181a6:	2c7e      	cmp	r4, #126	@ 0x7e
 80181a8:	f200 80a6 	bhi.w	80182f8 <protocol_enqueue_realtime_command+0x45c>
 80181ac:	2500      	movs	r5, #0
 80181ae:	e05e      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
                protocol_enqueue_foreground_task(stream_mpg_set_mode, NULL);
 80181b0:	2100      	movs	r1, #0
 80181b2:	483c      	ldr	r0, [pc, #240]	@ (80182a4 <protocol_enqueue_realtime_command+0x408>)
 80181b4:	f7ff fe4c 	bl	8017e50 <protocol_enqueue_foreground_task>
 80181b8:	e7e6      	b.n	8018188 <protocol_enqueue_realtime_command+0x2ec>
            if((drop = settings.report_interval != 0))
 80181ba:	4b32      	ldr	r3, [pc, #200]	@ (8018284 <protocol_enqueue_realtime_command+0x3e8>)
 80181bc:	8a9b      	ldrh	r3, [r3, #20]
 80181be:	2b00      	cmp	r3, #0
 80181c0:	bf14      	ite	ne
 80181c2:	2501      	movne	r5, #1
 80181c4:	2500      	moveq	r5, #0
 80181c6:	d0df      	beq.n	8018188 <protocol_enqueue_realtime_command+0x2ec>
                sys.flags.auto_reporting = !sys.flags.auto_reporting;
 80181c8:	4932      	ldr	r1, [pc, #200]	@ (8018294 <protocol_enqueue_realtime_command+0x3f8>)
 80181ca:	7dcb      	ldrb	r3, [r1, #23]
 80181cc:	085a      	lsrs	r2, r3, #1
 80181ce:	f082 0201 	eor.w	r2, r2, #1
 80181d2:	f362 0341 	bfi	r3, r2, #1, #1
 80181d6:	75cb      	strb	r3, [r1, #23]
 80181d8:	e7d6      	b.n	8018188 <protocol_enqueue_realtime_command+0x2ec>
            enqueue_feed_override(c);
 80181da:	f7fe f949 	bl	8016470 <enqueue_feed_override>
            drop = true;
 80181de:	2501      	movs	r5, #1
 80181e0:	e045      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
            enqueue_spindle_override((uint8_t)c);
 80181e2:	f7fe f967 	bl	80164b4 <enqueue_spindle_override>
            drop = true;
 80181e6:	2501      	movs	r5, #1
 80181e8:	e041      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
            enqueue_coolant_override((uint8_t)c);
 80181ea:	f7fe f985 	bl	80164f8 <enqueue_coolant_override>
            drop = true;
 80181ee:	2501      	movs	r5, #1
 80181f0:	e03d      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
            if(esc && hal.reboot)
 80181f2:	4b2d      	ldr	r3, [pc, #180]	@ (80182a8 <protocol_enqueue_realtime_command+0x40c>)
 80181f4:	781d      	ldrb	r5, [r3, #0]
 80181f6:	2d00      	cmp	r5, #0
 80181f8:	d0c8      	beq.n	801818c <protocol_enqueue_realtime_command+0x2f0>
 80181fa:	4b24      	ldr	r3, [pc, #144]	@ (801828c <protocol_enqueue_realtime_command+0x3f0>)
 80181fc:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8018200:	b323      	cbz	r3, 801824c <protocol_enqueue_realtime_command+0x3b0>
                hal.reboot(); // Force MCU reboot. This call should never return.
 8018202:	4798      	blx	r3
    bool drop = false;
 8018204:	2500      	movs	r5, #0
 8018206:	e7c1      	b.n	801818c <protocol_enqueue_realtime_command+0x2f0>
            if((c < ' ' && c != ASCII_BS) || (c > ASCII_DEL && c <= 0xBF))
 8018208:	281f      	cmp	r0, #31
 801820a:	d80d      	bhi.n	8018228 <protocol_enqueue_realtime_command+0x38c>
 801820c:	2808      	cmp	r0, #8
 801820e:	d009      	beq.n	8018224 <protocol_enqueue_realtime_command+0x388>
                drop = grbl.on_unknown_realtime_cmd == NULL || grbl.on_unknown_realtime_cmd(c);
 8018210:	4b23      	ldr	r3, [pc, #140]	@ (80182a0 <protocol_enqueue_realtime_command+0x404>)
 8018212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018216:	2b00      	cmp	r3, #0
 8018218:	d074      	beq.n	8018304 <protocol_enqueue_realtime_command+0x468>
 801821a:	4620      	mov	r0, r4
 801821c:	4798      	blx	r3
 801821e:	4605      	mov	r5, r0
 8018220:	bb28      	cbnz	r0, 801826e <protocol_enqueue_realtime_command+0x3d2>
 8018222:	e7b3      	b.n	801818c <protocol_enqueue_realtime_command+0x2f0>
    bool drop = false;
 8018224:	2500      	movs	r5, #0
 8018226:	e7af      	b.n	8018188 <protocol_enqueue_realtime_command+0x2ec>
            if((c < ' ' && c != ASCII_BS) || (c > ASCII_DEL && c <= 0xBF))
 8018228:	f080 0380 	eor.w	r3, r0, #128	@ 0x80
 801822c:	2b3f      	cmp	r3, #63	@ 0x3f
 801822e:	d9ef      	bls.n	8018210 <protocol_enqueue_realtime_command+0x374>
    bool drop = false;
 8018230:	2500      	movs	r5, #0
 8018232:	e7ab      	b.n	801818c <protocol_enqueue_realtime_command+0x2f0>
    switch ((unsigned char)c) {
 8018234:	2500      	movs	r5, #0
 8018236:	e7a9      	b.n	801818c <protocol_enqueue_realtime_command+0x2f0>
    bool drop = false;
 8018238:	2500      	movs	r5, #0
 801823a:	e7a7      	b.n	801818c <protocol_enqueue_realtime_command+0x2f0>
 801823c:	2500      	movs	r5, #0
 801823e:	e7a5      	b.n	801818c <protocol_enqueue_realtime_command+0x2f0>
 8018240:	2500      	movs	r5, #0
 8018242:	e7a3      	b.n	801818c <protocol_enqueue_realtime_command+0x2f0>
 8018244:	2500      	movs	r5, #0
 8018246:	e7a1      	b.n	801818c <protocol_enqueue_realtime_command+0x2f0>
 8018248:	2500      	movs	r5, #0
 801824a:	e79f      	b.n	801818c <protocol_enqueue_realtime_command+0x2f0>
 801824c:	2500      	movs	r5, #0
 801824e:	e79d      	b.n	801818c <protocol_enqueue_realtime_command+0x2f0>
            if(!keep_rt_commands || settings.flags.legacy_rt_commands) {
 8018250:	4b0d      	ldr	r3, [pc, #52]	@ (8018288 <protocol_enqueue_realtime_command+0x3ec>)
 8018252:	781b      	ldrb	r3, [r3, #0]
 8018254:	b12b      	cbz	r3, 8018262 <protocol_enqueue_realtime_command+0x3c6>
 8018256:	4b0b      	ldr	r3, [pc, #44]	@ (8018284 <protocol_enqueue_realtime_command+0x3e8>)
 8018258:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 801825c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8018260:	d005      	beq.n	801826e <protocol_enqueue_realtime_command+0x3d2>
                system_set_exec_state_flag(EXEC_STATUS_REPORT);
 8018262:	4b0a      	ldr	r3, [pc, #40]	@ (801828c <protocol_enqueue_realtime_command+0x3f0>)
 8018264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018266:	2101      	movs	r1, #1
 8018268:	4809      	ldr	r0, [pc, #36]	@ (8018290 <protocol_enqueue_realtime_command+0x3f4>)
 801826a:	4798      	blx	r3
                drop = true;
 801826c:	2501      	movs	r5, #1
    esc = c == ASCII_ESC;
 801826e:	2c1b      	cmp	r4, #27
 8018270:	bf14      	ite	ne
 8018272:	2400      	movne	r4, #0
 8018274:	2401      	moveq	r4, #1
 8018276:	4b0c      	ldr	r3, [pc, #48]	@ (80182a8 <protocol_enqueue_realtime_command+0x40c>)
 8018278:	701c      	strb	r4, [r3, #0]
}
 801827a:	4628      	mov	r0, r5
 801827c:	bd38      	pop	{r3, r4, r5, pc}
 801827e:	bf00      	nop
 8018280:	20002320 	.word	0x20002320
 8018284:	200024a8 	.word	0x200024a8
 8018288:	20002114 	.word	0x20002114
 801828c:	20001a90 	.word	0x20001a90
 8018290:	20001db8 	.word	0x20001db8
 8018294:	20001d70 	.word	0x20001d70
 8018298:	8003ffff 	.word	0x8003ffff
 801829c:	200017c8 	.word	0x200017c8
 80182a0:	20001c78 	.word	0x20001c78
 80182a4:	08020fc1 	.word	0x08020fc1
 80182a8:	20002084 	.word	0x20002084
            if(!keep_rt_commands || settings.flags.legacy_rt_commands) {
 80182ac:	4b16      	ldr	r3, [pc, #88]	@ (8018308 <protocol_enqueue_realtime_command+0x46c>)
 80182ae:	781b      	ldrb	r3, [r3, #0]
 80182b0:	b12b      	cbz	r3, 80182be <protocol_enqueue_realtime_command+0x422>
 80182b2:	4b16      	ldr	r3, [pc, #88]	@ (801830c <protocol_enqueue_realtime_command+0x470>)
 80182b4:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 80182b8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80182bc:	d0d7      	beq.n	801826e <protocol_enqueue_realtime_command+0x3d2>
                system_set_exec_state_flag(EXEC_CYCLE_START);
 80182be:	4b14      	ldr	r3, [pc, #80]	@ (8018310 <protocol_enqueue_realtime_command+0x474>)
 80182c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80182c2:	2102      	movs	r1, #2
 80182c4:	4813      	ldr	r0, [pc, #76]	@ (8018314 <protocol_enqueue_realtime_command+0x478>)
 80182c6:	4798      	blx	r3
                gc_state.tool_change = false;
 80182c8:	4b13      	ldr	r3, [pc, #76]	@ (8018318 <protocol_enqueue_realtime_command+0x47c>)
 80182ca:	2200      	movs	r2, #0
 80182cc:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
                drop = true;
 80182d0:	2501      	movs	r5, #1
 80182d2:	e7cc      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
            if(!keep_rt_commands || settings.flags.legacy_rt_commands) {
 80182d4:	4b0c      	ldr	r3, [pc, #48]	@ (8018308 <protocol_enqueue_realtime_command+0x46c>)
 80182d6:	781b      	ldrb	r3, [r3, #0]
 80182d8:	b12b      	cbz	r3, 80182e6 <protocol_enqueue_realtime_command+0x44a>
 80182da:	4b0c      	ldr	r3, [pc, #48]	@ (801830c <protocol_enqueue_realtime_command+0x470>)
 80182dc:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 80182e0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80182e4:	d0c3      	beq.n	801826e <protocol_enqueue_realtime_command+0x3d2>
                system_set_exec_state_flag(EXEC_FEED_HOLD);
 80182e6:	4b0a      	ldr	r3, [pc, #40]	@ (8018310 <protocol_enqueue_realtime_command+0x474>)
 80182e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80182ea:	2108      	movs	r1, #8
 80182ec:	4809      	ldr	r0, [pc, #36]	@ (8018314 <protocol_enqueue_realtime_command+0x478>)
 80182ee:	4798      	blx	r3
                drop = true;
 80182f0:	2501      	movs	r5, #1
 80182f2:	e7bc      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
            drop = !(keep_rt_commands || (unsigned char)c < 0x7F);
 80182f4:	2500      	movs	r5, #0
 80182f6:	e7ba      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
 80182f8:	2501      	movs	r5, #1
            break;
 80182fa:	e7b8      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
            drop = true;
 80182fc:	2501      	movs	r5, #1
 80182fe:	e7b6      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
            drop = true;
 8018300:	2501      	movs	r5, #1
 8018302:	e7b4      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
                drop = grbl.on_unknown_realtime_cmd == NULL || grbl.on_unknown_realtime_cmd(c);
 8018304:	2501      	movs	r5, #1
 8018306:	e7b2      	b.n	801826e <protocol_enqueue_realtime_command+0x3d2>
 8018308:	20002114 	.word	0x20002114
 801830c:	200024a8 	.word	0x200024a8
 8018310:	20001a90 	.word	0x20001a90
 8018314:	20001db8 	.word	0x20001db8
 8018318:	200017c8 	.word	0x200017c8

0801831c <matchstar>:
    return 0;
}

/* matchstar: search for c*regexp at beginning of text */
int matchstar(int c, char *regexp, char *text)
{
 801831c:	b570      	push	{r4, r5, r6, lr}
 801831e:	4605      	mov	r5, r0
 8018320:	460e      	mov	r6, r1
 8018322:	4614      	mov	r4, r2
    do {    /* a * matches zero or more instances */
        if (matchhere(regexp, text))
 8018324:	4621      	mov	r1, r4
 8018326:	4630      	mov	r0, r6
 8018328:	f000 f80d 	bl	8018346 <matchhere>
 801832c:	4602      	mov	r2, r0
 801832e:	b938      	cbnz	r0, 8018340 <matchstar+0x24>
            return 1;
    } while (*text != '\0' && (*text++ == c || c == '.'));
 8018330:	7823      	ldrb	r3, [r4, #0]
 8018332:	b133      	cbz	r3, 8018342 <matchstar+0x26>
 8018334:	3401      	adds	r4, #1
 8018336:	42ab      	cmp	r3, r5
 8018338:	d0f4      	beq.n	8018324 <matchstar+0x8>
 801833a:	2d2e      	cmp	r5, #46	@ 0x2e
 801833c:	d0f2      	beq.n	8018324 <matchstar+0x8>
 801833e:	e000      	b.n	8018342 <matchstar+0x26>
            return 1;
 8018340:	2201      	movs	r2, #1
    return 0;
}
 8018342:	4610      	mov	r0, r2
 8018344:	bd70      	pop	{r4, r5, r6, pc}

08018346 <matchhere>:
{
 8018346:	b508      	push	{r3, lr}
    if (regexp[0] == '\0')
 8018348:	7803      	ldrb	r3, [r0, #0]
 801834a:	b1f3      	cbz	r3, 801838a <matchhere+0x44>
    if (regexp[1] == '*')
 801834c:	7842      	ldrb	r2, [r0, #1]
 801834e:	2a2a      	cmp	r2, #42	@ 0x2a
 8018350:	d009      	beq.n	8018366 <matchhere+0x20>
    if (regexp[0] == '$' && regexp[1] == '\0')
 8018352:	2b24      	cmp	r3, #36	@ 0x24
 8018354:	d00d      	beq.n	8018372 <matchhere+0x2c>
    if (*text!='\0' && (regexp[0]=='.' || regexp[0]==*text))
 8018356:	780a      	ldrb	r2, [r1, #0]
 8018358:	b1ca      	cbz	r2, 801838e <matchhere+0x48>
 801835a:	2b2e      	cmp	r3, #46	@ 0x2e
 801835c:	d010      	beq.n	8018380 <matchhere+0x3a>
 801835e:	4293      	cmp	r3, r2
 8018360:	d00e      	beq.n	8018380 <matchhere+0x3a>
    return 0;
 8018362:	2000      	movs	r0, #0
 8018364:	e012      	b.n	801838c <matchhere+0x46>
        return matchstar(regexp[0], regexp+2, text);
 8018366:	460a      	mov	r2, r1
 8018368:	1c81      	adds	r1, r0, #2
 801836a:	4618      	mov	r0, r3
 801836c:	f7ff ffd6 	bl	801831c <matchstar>
 8018370:	e00c      	b.n	801838c <matchhere+0x46>
    if (regexp[0] == '$' && regexp[1] == '\0')
 8018372:	2a00      	cmp	r2, #0
 8018374:	d1ef      	bne.n	8018356 <matchhere+0x10>
        return *text == '\0';
 8018376:	7808      	ldrb	r0, [r1, #0]
 8018378:	fab0 f080 	clz	r0, r0
 801837c:	0940      	lsrs	r0, r0, #5
 801837e:	e005      	b.n	801838c <matchhere+0x46>
        return matchhere(regexp+1, text+1);
 8018380:	3101      	adds	r1, #1
 8018382:	3001      	adds	r0, #1
 8018384:	f7ff ffdf 	bl	8018346 <matchhere>
 8018388:	e000      	b.n	801838c <matchhere+0x46>
        return 1;
 801838a:	2001      	movs	r0, #1
}
 801838c:	bd08      	pop	{r3, pc}
    return 0;
 801838e:	2000      	movs	r0, #0
 8018390:	e7fc      	b.n	801838c <matchhere+0x46>
	...

08018394 <axis_signals_tostring>:
// NOTE: returns pointer to null terminator!
inline static char *axis_signals_tostring (char *buf, axes_signals_t signals)
{
    uint_fast16_t idx = 0;

    signals.mask &= AXES_BITMASK;
 8018394:	f001 0107 	and.w	r1, r1, #7
    uint_fast16_t idx = 0;
 8018398:	2300      	movs	r3, #0

    while(signals.mask) {
 801839a:	e002      	b.n	80183a2 <axis_signals_tostring+0xe>
        if(signals.mask & 0x01)
            *buf++ = *axis_letter[idx];
        idx++;
 801839c:	3301      	adds	r3, #1
        signals.mask >>= 1;
 801839e:	f3c1 0147 	ubfx	r1, r1, #1, #8
    while(signals.mask) {
 80183a2:	b2c9      	uxtb	r1, r1
 80183a4:	b149      	cbz	r1, 80183ba <axis_signals_tostring+0x26>
        if(signals.mask & 0x01)
 80183a6:	f011 0f01 	tst.w	r1, #1
 80183aa:	d0f7      	beq.n	801839c <axis_signals_tostring+0x8>
            *buf++ = *axis_letter[idx];
 80183ac:	4a04      	ldr	r2, [pc, #16]	@ (80183c0 <axis_signals_tostring+0x2c>)
 80183ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80183b2:	7812      	ldrb	r2, [r2, #0]
 80183b4:	f800 2b01 	strb.w	r2, [r0], #1
 80183b8:	e7f0      	b.n	801839c <axis_signals_tostring+0x8>
    };

    *buf = '\0';
 80183ba:	2300      	movs	r3, #0
 80183bc:	7003      	strb	r3, [r0, #0]

    return buf;
}
 80183be:	4770      	bx	lr
 80183c0:	0802be3c 	.word	0x0802be3c

080183c4 <control_signals_tostring>:
{
    static const char signals_map[] = "RHSDLTEOFM Q  P ";

    char *map = (char *)signals_map;

    if(!signals.deasserted)
 80183c4:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 80183c8:	d12e      	bne.n	8018428 <control_signals_tostring+0x64>
    char *map = (char *)signals_map;
 80183ca:	4b1a      	ldr	r3, [pc, #104]	@ (8018434 <control_signals_tostring+0x70>)
 80183cc:	e01f      	b.n	801840e <control_signals_tostring+0x4a>
                    if(hal.signals_cap.safety_door_ajar)
                        *buf++ = *map;
                    break;

                default:
                    *buf++ = *map;
 80183ce:	f800 2b01 	strb.w	r2, [r0], #1
                    break;
            }
        }

        map++;
 80183d2:	3301      	adds	r3, #1
        signals.mask >>= 1;
 80183d4:	f3c1 014f 	ubfx	r1, r1, #1, #16
      while(signals.mask) {
 80183d8:	b289      	uxth	r1, r1
 80183da:	b181      	cbz	r1, 80183fe <control_signals_tostring+0x3a>
        if(signals.mask & 0x01) {
 80183dc:	f011 0f01 	tst.w	r1, #1
 80183e0:	d0f7      	beq.n	80183d2 <control_signals_tostring+0xe>
            switch(*map) {
 80183e2:	781a      	ldrb	r2, [r3, #0]
 80183e4:	2a20      	cmp	r2, #32
 80183e6:	d0f4      	beq.n	80183d2 <control_signals_tostring+0xe>
 80183e8:	2a44      	cmp	r2, #68	@ 0x44
 80183ea:	d1f0      	bne.n	80183ce <control_signals_tostring+0xa>
                    if(hal.signals_cap.safety_door_ajar)
 80183ec:	4c12      	ldr	r4, [pc, #72]	@ (8018438 <control_signals_tostring+0x74>)
 80183ee:	f894 c1dc 	ldrb.w	ip, [r4, #476]	@ 0x1dc
 80183f2:	f01c 0f08 	tst.w	ip, #8
 80183f6:	d0ec      	beq.n	80183d2 <control_signals_tostring+0xe>
                        *buf++ = *map;
 80183f8:	f800 2b01 	strb.w	r2, [r0], #1
 80183fc:	e7e9      	b.n	80183d2 <control_signals_tostring+0xe>
    }

    *buf = '\0';
 80183fe:	2300      	movs	r3, #0
 8018400:	7003      	strb	r3, [r0, #0]

    return buf;
}
 8018402:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018406:	4770      	bx	lr
        map++;
 8018408:	3301      	adds	r3, #1
        signals.mask >>= 1;
 801840a:	f3c1 014f 	ubfx	r1, r1, #1, #16
      while(signals.mask) {
 801840e:	b289      	uxth	r1, r1
 8018410:	b151      	cbz	r1, 8018428 <control_signals_tostring+0x64>
        if(signals.mask & 0x01) {
 8018412:	f011 0f01 	tst.w	r1, #1
 8018416:	d0f7      	beq.n	8018408 <control_signals_tostring+0x44>
            switch(*map) {
 8018418:	781a      	ldrb	r2, [r3, #0]
 801841a:	2a20      	cmp	r2, #32
 801841c:	d0f4      	beq.n	8018408 <control_signals_tostring+0x44>
 801841e:	2a44      	cmp	r2, #68	@ 0x44
 8018420:	d005      	beq.n	801842e <control_signals_tostring+0x6a>
                    *buf++ = *map;
 8018422:	f800 2b01 	strb.w	r2, [r0], #1
                    break;
 8018426:	e7ef      	b.n	8018408 <control_signals_tostring+0x44>
    *buf = '\0';
 8018428:	2300      	movs	r3, #0
 801842a:	7003      	strb	r3, [r0, #0]
}
 801842c:	4770      	bx	lr
{
 801842e:	b410      	push	{r4}
 8018430:	e7dc      	b.n	80183ec <control_signals_tostring+0x28>
 8018432:	bf00      	nop
 8018434:	0802c7d0 	.word	0x0802c7d0
 8018438:	20001a90 	.word	0x20001a90

0801843c <report_init_message>:
    return id;
}

// Welcome message
static void report_init_message (void)
{
 801843c:	b508      	push	{r3, lr}
    override_counter = wco_counter = 0;
 801843e:	2300      	movs	r3, #0
 8018440:	4a04      	ldr	r2, [pc, #16]	@ (8018454 <report_init_message+0x18>)
 8018442:	7013      	strb	r3, [r2, #0]
 8018444:	4a04      	ldr	r2, [pc, #16]	@ (8018458 <report_init_message+0x1c>)
 8018446:	7013      	strb	r3, [r2, #0]

#if COMPATIBILITY_LEVEL == 0
    hal.stream.write_all(ASCII_EOL "GrblHAL " GRBL_VERSION " ['$' or '$HELP' for help]" ASCII_EOL);
 8018448:	4b04      	ldr	r3, [pc, #16]	@ (801845c <report_init_message+0x20>)
 801844a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801844e:	4804      	ldr	r0, [pc, #16]	@ (8018460 <report_init_message+0x24>)
 8018450:	4798      	blx	r3
#else
    hal.stream.write_all(ASCII_EOL "Grbl " GRBL_VERSION " ['$' for help]" ASCII_EOL);
#endif
}
 8018452:	bd08      	pop	{r3, pc}
 8018454:	20002369 	.word	0x20002369
 8018458:	2000236a 	.word	0x2000236a
 801845c:	20001a90 	.word	0x20001a90
 8018460:	0802bf1c 	.word	0x0802bf1c

08018464 <report_help_message>:

// grblHAL help message
static void report_help_message (void)
{
 8018464:	b508      	push	{r3, lr}
    hal.stream.write("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H $B ~ ! ? ctrl-x]" ASCII_EOL);
 8018466:	4b03      	ldr	r3, [pc, #12]	@ (8018474 <report_help_message+0x10>)
 8018468:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801846c:	4802      	ldr	r0, [pc, #8]	@ (8018478 <report_help_message+0x14>)
 801846e:	4798      	blx	r3
}
 8018470:	bd08      	pop	{r3, pc}
 8018472:	bf00      	nop
 8018474:	20001a90 	.word	0x20001a90
 8018478:	0802bf48 	.word	0x0802bf48

0801847c <cmp_settings>:

// grblHAL settings print out.

static int cmp_settings (const void *a, const void *b)
{
  return (*(setting_detail_t **)(a))->id - (*(setting_detail_t **)(b))->id;
 801847c:	6803      	ldr	r3, [r0, #0]
 801847e:	8818      	ldrh	r0, [r3, #0]
 8018480:	680b      	ldr	r3, [r1, #0]
 8018482:	881b      	ldrh	r3, [r3, #0]
}
 8018484:	1ac0      	subs	r0, r0, r3
 8018486:	4770      	bx	lr

08018488 <write_quoted>:
        free(s);
    }
}

static void write_quoted (const char *s, const char *sep)
{
 8018488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801848a:	4606      	mov	r6, r0
 801848c:	460c      	mov	r4, r1
    hal.stream.write("\"");
 801848e:	4d0a      	ldr	r5, [pc, #40]	@ (80184b8 <write_quoted+0x30>)
 8018490:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018494:	4f09      	ldr	r7, [pc, #36]	@ (80184bc <write_quoted+0x34>)
 8018496:	4638      	mov	r0, r7
 8018498:	4798      	blx	r3
    hal.stream.write(s); // TODO: escape double quoutes
 801849a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801849e:	4630      	mov	r0, r6
 80184a0:	4798      	blx	r3
    hal.stream.write("\"");
 80184a2:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80184a6:	4638      	mov	r0, r7
 80184a8:	4798      	blx	r3
    if(sep)
 80184aa:	b11c      	cbz	r4, 80184b4 <write_quoted+0x2c>
        hal.stream.write(sep);
 80184ac:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80184b0:	4620      	mov	r0, r4
 80184b2:	4798      	blx	r3
}
 80184b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80184b6:	bf00      	nop
 80184b8:	20001a90 	.word	0x20001a90
 80184bc:	0802bf98 	.word	0x0802bf98

080184c0 <cmp_alarms>:

#endif

static int cmp_alarms (const void *a, const void *b)
{
  return (*(alarm_detail_t **)(a))->id - (*(alarm_detail_t **)(b))->id;
 80184c0:	6803      	ldr	r3, [r0, #0]
 80184c2:	7818      	ldrb	r0, [r3, #0]
 80184c4:	680b      	ldr	r3, [r1, #0]
 80184c6:	781b      	ldrb	r3, [r3, #0]
}
 80184c8:	1ac0      	subs	r0, r0, r3
 80184ca:	4770      	bx	lr

080184cc <cmp_errors>:
    return Status_OK;
}

static int cmp_errors (const void *a, const void *b)
{
  return (*(status_detail_t **)(a))->id - (*(status_detail_t **)(b))->id;
 80184cc:	6803      	ldr	r3, [r0, #0]
 80184ce:	7818      	ldrb	r0, [r3, #0]
 80184d0:	680b      	ldr	r3, [r1, #0]
 80184d2:	781b      	ldrb	r3, [r3, #0]
}
 80184d4:	1ac0      	subs	r0, r0, r3
 80184d6:	4770      	bx	lr

080184d8 <cmp_setting_group_id>:
    }
}

static int cmp_setting_group_id (const void *a, const void *b)
{
    return (*(setting_group_detail_t **)(a))->id - (*(setting_group_detail_t **)(b))->id;
 80184d8:	6803      	ldr	r3, [r0, #0]
 80184da:	7858      	ldrb	r0, [r3, #1]
 80184dc:	680b      	ldr	r3, [r1, #0]
 80184de:	785b      	ldrb	r3, [r3, #1]
}
 80184e0:	1ac0      	subs	r0, r0, r3
 80184e2:	4770      	bx	lr

080184e4 <group_is_dup>:
    return strcmp((*(setting_group_detail_t **)(a))->name, (*(setting_group_detail_t **)(b))->name);
}

static bool group_is_dup (setting_group_detail_t **groups, setting_group_t group)
{
    while(*groups) {
 80184e4:	e000      	b.n	80184e8 <group_is_dup+0x4>
        if((*groups)->id == group)
            return true;
        groups++;
 80184e6:	3004      	adds	r0, #4
    while(*groups) {
 80184e8:	6803      	ldr	r3, [r0, #0]
 80184ea:	b123      	cbz	r3, 80184f6 <group_is_dup+0x12>
        if((*groups)->id == group)
 80184ec:	785b      	ldrb	r3, [r3, #1]
 80184ee:	428b      	cmp	r3, r1
 80184f0:	d1f9      	bne.n	80184e6 <group_is_dup+0x2>
            return true;
 80184f2:	2001      	movs	r0, #1
    }

    return false;
}
 80184f4:	4770      	bx	lr
    return false;
 80184f6:	2000      	movs	r0, #0
 80184f8:	4770      	bx	lr

080184fa <add_limits>:

    return Status_OK;
}

static char *add_limits (char *buf, limit_signals_t limits)
{
 80184fa:	b510      	push	{r4, lr}
 80184fc:	b082      	sub	sp, #8
 80184fe:	9101      	str	r1, [sp, #4]
    buf = axis_signals_tostring(buf, limits.min);
 8018500:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8018504:	f7ff ff46 	bl	8018394 <axis_signals_tostring>
    *buf++ = ',';
 8018508:	242c      	movs	r4, #44	@ 0x2c
 801850a:	f800 4b01 	strb.w	r4, [r0], #1
    buf = axis_signals_tostring(buf, limits.max);
 801850e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8018512:	f7ff ff3f 	bl	8018394 <axis_signals_tostring>
    *buf++ = ',';
 8018516:	f800 4b01 	strb.w	r4, [r0], #1
    buf = axis_signals_tostring(buf, limits.min2);
 801851a:	f89d 1006 	ldrb.w	r1, [sp, #6]
 801851e:	f7ff ff39 	bl	8018394 <axis_signals_tostring>
    *buf++ = ',';
 8018522:	f800 4b01 	strb.w	r4, [r0], #1
    buf = axis_signals_tostring(buf, limits.max2);
 8018526:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801852a:	f7ff ff33 	bl	8018394 <axis_signals_tostring>

    return buf;
}
 801852e:	b002      	add	sp, #8
 8018530:	bd10      	pop	{r4, pc}

08018532 <count_pins>:
    return info;
}

static void count_pins (xbar_t *pin, void *data)
{
    ((pin_data_t *)data)->n_pins++;
 8018532:	684b      	ldr	r3, [r1, #4]
 8018534:	3301      	adds	r3, #1
 8018536:	604b      	str	r3, [r1, #4]
}
 8018538:	4770      	bx	lr

0801853a <cmp_pins>:
    get_pin_info(pin, &((pin_data_t *)data)->pins[((pin_data_t *)data)->idx++]);
}

static int cmp_pins (const void *a, const void *b)
{
    return ((pin_info_t *)a)->sortkey - ((pin_info_t *)b)->sortkey;
 801853a:	6940      	ldr	r0, [r0, #20]
 801853c:	694b      	ldr	r3, [r1, #20]
}
 801853e:	1ac0      	subs	r0, r0, r3
 8018540:	4770      	bx	lr
	...

08018544 <irq_mode>:

#ifndef NO_SETTINGS_DESCRIPTIONS

static char *irq_mode (pin_irq_mode_t mode)
{
    switch(mode) {
 8018544:	3801      	subs	r0, #1
 8018546:	281e      	cmp	r0, #30
 8018548:	d81f      	bhi.n	801858a <irq_mode+0x46>
 801854a:	e8df f000 	tbb	[pc, r0]
 801854e:	2010      	.short	0x2010
 8018550:	1e1e1412 	.word	0x1e1e1412
 8018554:	1e1e1816 	.word	0x1e1e1816
 8018558:	1e1e1e1e 	.word	0x1e1e1e1e
 801855c:	1e1e1a1e 	.word	0x1e1e1a1e
 8018560:	1e1e1e1e 	.word	0x1e1e1e1e
 8018564:	1e1e1e1e 	.word	0x1e1e1e1e
 8018568:	1e1e1e1e 	.word	0x1e1e1e1e
 801856c:	1c          	.byte	0x1c
 801856d:	00          	.byte	0x00
 801856e:	4809      	ldr	r0, [pc, #36]	@ (8018594 <irq_mode+0x50>)
 8018570:	4770      	bx	lr
        case IRQ_Mode_Rising:
            return "R";
        case IRQ_Mode_Falling:
            return "F";
        case IRQ_Mode_RisingFalling:
            return "T";
 8018572:	4809      	ldr	r0, [pc, #36]	@ (8018598 <irq_mode+0x54>)
 8018574:	4770      	bx	lr
        case IRQ_Mode_Change:
            return "C";
 8018576:	4809      	ldr	r0, [pc, #36]	@ (801859c <irq_mode+0x58>)
 8018578:	4770      	bx	lr
        case IRQ_Mode_Edges:
            return "E";
 801857a:	4809      	ldr	r0, [pc, #36]	@ (80185a0 <irq_mode+0x5c>)
 801857c:	4770      	bx	lr
        case IRQ_Mode_High:
            return "H";
 801857e:	4809      	ldr	r0, [pc, #36]	@ (80185a4 <irq_mode+0x60>)
 8018580:	4770      	bx	lr
        case IRQ_Mode_Low:
            return "L";
 8018582:	4809      	ldr	r0, [pc, #36]	@ (80185a8 <irq_mode+0x64>)
 8018584:	4770      	bx	lr
        case IRQ_Mode_All:
            return "A";
 8018586:	4809      	ldr	r0, [pc, #36]	@ (80185ac <irq_mode+0x68>)
 8018588:	4770      	bx	lr
        default:
            break;
    }

    return "-";
 801858a:	4809      	ldr	r0, [pc, #36]	@ (80185b0 <irq_mode+0x6c>)
 801858c:	4770      	bx	lr
            return "F";
 801858e:	4809      	ldr	r0, [pc, #36]	@ (80185b4 <irq_mode+0x70>)
}
 8018590:	4770      	bx	lr
 8018592:	bf00      	nop
 8018594:	0802a1dc 	.word	0x0802a1dc
 8018598:	0802bfa0 	.word	0x0802bfa0
 801859c:	0802bfa4 	.word	0x0802bfa4
 80185a0:	0802bfa8 	.word	0x0802bfa8
 80185a4:	0802c3c0 	.word	0x0802c3c0
 80185a8:	0802bfac 	.word	0x0802bfac
 80185ac:	0802a2a8 	.word	0x0802a2a8
 80185b0:	0802bfb0 	.word	0x0802bfb0
 80185b4:	0802bf9c 	.word	0x0802bf9c

080185b8 <pull_mode>:

static char *pull_mode (pull_mode_t mode)
{
    switch(mode) {
 80185b8:	2802      	cmp	r0, #2
 80185ba:	d007      	beq.n	80185cc <pull_mode+0x14>
 80185bc:	2803      	cmp	r0, #3
 80185be:	d007      	beq.n	80185d0 <pull_mode+0x18>
 80185c0:	2801      	cmp	r0, #1
 80185c2:	d001      	beq.n	80185c8 <pull_mode+0x10>
            return "B";
        default:
            break;
    }

    return "-";
 80185c4:	4803      	ldr	r0, [pc, #12]	@ (80185d4 <pull_mode+0x1c>)
}
 80185c6:	4770      	bx	lr
    switch(mode) {
 80185c8:	4803      	ldr	r0, [pc, #12]	@ (80185d8 <pull_mode+0x20>)
 80185ca:	4770      	bx	lr
            return "D";
 80185cc:	4803      	ldr	r0, [pc, #12]	@ (80185dc <pull_mode+0x24>)
 80185ce:	4770      	bx	lr
            return "B";
 80185d0:	4803      	ldr	r0, [pc, #12]	@ (80185e0 <pull_mode+0x28>)
 80185d2:	4770      	bx	lr
 80185d4:	0802bfb0 	.word	0x0802bfb0
 80185d8:	0802bfb4 	.word	0x0802bfb4
 80185dc:	0802bfb8 	.word	0x0802bfb8
 80185e0:	0802a1ec 	.word	0x0802a1ec

080185e4 <get_rate_value_mm>:
{
 80185e4:	b508      	push	{r3, lr}
    return uitoa((uint32_t)value);
 80185e6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80185ea:	ee17 0a90 	vmov	r0, s15
 80185ee:	f7fd f9e7 	bl	80159c0 <uitoa>
}
 80185f2:	bd08      	pop	{r3, pc}

080185f4 <get_rate_value_inch>:
{
 80185f4:	b508      	push	{r3, lr}
    return uitoa((uint32_t)(value * INCH_PER_MM));
 80185f6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 801860c <get_rate_value_inch+0x18>
 80185fa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80185fe:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8018602:	ee17 0a90 	vmov	r0, s15
 8018606:	f7fd f9db 	bl	80159c0 <uitoa>
}
 801860a:	bd08      	pop	{r3, pc}
 801860c:	3d21428b 	.word	0x3d21428b

08018610 <print_setting>:
{
 8018610:	b570      	push	{r4, r5, r6, lr}
 8018612:	4604      	mov	r4, r0
    if(setting->value != NULL)
 8018614:	6a03      	ldr	r3, [r0, #32]
 8018616:	b123      	cbz	r3, 8018622 <print_setting+0x12>
        grbl.report.setting(setting, offset, data);
 8018618:	4b0a      	ldr	r3, [pc, #40]	@ (8018644 <print_setting+0x34>)
 801861a:	695b      	ldr	r3, [r3, #20]
 801861c:	4798      	blx	r3
}
 801861e:	2001      	movs	r0, #1
 8018620:	bd70      	pop	{r4, r5, r6, pc}
        hal.stream.write("$");
 8018622:	4d09      	ldr	r5, [pc, #36]	@ (8018648 <print_setting+0x38>)
 8018624:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018628:	4808      	ldr	r0, [pc, #32]	@ (801864c <print_setting+0x3c>)
 801862a:	4798      	blx	r3
        hal.stream.write(uitoa(setting->id));
 801862c:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8018630:	8820      	ldrh	r0, [r4, #0]
 8018632:	f7fd f9c5 	bl	80159c0 <uitoa>
 8018636:	47b0      	blx	r6
        hal.stream.write("=N/A" ASCII_EOL);
 8018638:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801863c:	4804      	ldr	r0, [pc, #16]	@ (8018650 <print_setting+0x40>)
 801863e:	4798      	blx	r3
 8018640:	e7ed      	b.n	801861e <print_setting+0xe>
 8018642:	bf00      	nop
 8018644:	20001c78 	.word	0x20001c78
 8018648:	20001a90 	.word	0x20001a90
 801864c:	0802bfbc 	.word	0x0802bfbc
 8018650:	0802bfc0 	.word	0x0802bfc0

08018654 <print_alarm>:
{
 8018654:	b570      	push	{r4, r5, r6, lr}
 8018656:	4604      	mov	r4, r0
    if(grbl_format) {
 8018658:	b9f1      	cbnz	r1, 8018698 <print_alarm+0x44>
        hal.stream.write("[ALARMCODE:");
 801865a:	4d1b      	ldr	r5, [pc, #108]	@ (80186c8 <print_alarm+0x74>)
 801865c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018660:	481a      	ldr	r0, [pc, #104]	@ (80186cc <print_alarm+0x78>)
 8018662:	4798      	blx	r3
        hal.stream.write(uitoa(alarm->id));
 8018664:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8018668:	7820      	ldrb	r0, [r4, #0]
 801866a:	f7fd f9a9 	bl	80159c0 <uitoa>
 801866e:	47b0      	blx	r6
        hal.stream.write(vbar);
 8018670:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018674:	4e16      	ldr	r6, [pc, #88]	@ (80186d0 <print_alarm+0x7c>)
 8018676:	4630      	mov	r0, r6
 8018678:	4798      	blx	r3
        hal.stream.write(vbar);
 801867a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801867e:	4630      	mov	r0, r6
 8018680:	4798      	blx	r3
        if(alarm->description)
 8018682:	6860      	ldr	r0, [r4, #4]
 8018684:	b110      	cbz	r0, 801868c <print_alarm+0x38>
            hal.stream.write(alarm->description);
 8018686:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801868a:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 801868c:	4b0e      	ldr	r3, [pc, #56]	@ (80186c8 <print_alarm+0x74>)
 801868e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018692:	4810      	ldr	r0, [pc, #64]	@ (80186d4 <print_alarm+0x80>)
 8018694:	4798      	blx	r3
}
 8018696:	bd70      	pop	{r4, r5, r6, pc}
        write_quoted(uitoa(alarm->id), ",");
 8018698:	7800      	ldrb	r0, [r0, #0]
 801869a:	f7fd f991 	bl	80159c0 <uitoa>
 801869e:	4d0e      	ldr	r5, [pc, #56]	@ (80186d8 <print_alarm+0x84>)
 80186a0:	4629      	mov	r1, r5
 80186a2:	f7ff fef1 	bl	8018488 <write_quoted>
        write_quoted("N/A", ",");
 80186a6:	4629      	mov	r1, r5
 80186a8:	480c      	ldr	r0, [pc, #48]	@ (80186dc <print_alarm+0x88>)
 80186aa:	f7ff feed 	bl	8018488 <write_quoted>
        write_quoted(alarm->description ? alarm->description : "", NULL);
 80186ae:	6860      	ldr	r0, [r4, #4]
 80186b0:	b140      	cbz	r0, 80186c4 <print_alarm+0x70>
 80186b2:	2100      	movs	r1, #0
 80186b4:	f7ff fee8 	bl	8018488 <write_quoted>
        hal.stream.write(ASCII_EOL);
 80186b8:	4b03      	ldr	r3, [pc, #12]	@ (80186c8 <print_alarm+0x74>)
 80186ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80186be:	4808      	ldr	r0, [pc, #32]	@ (80186e0 <print_alarm+0x8c>)
 80186c0:	4798      	blx	r3
 80186c2:	e7e8      	b.n	8018696 <print_alarm+0x42>
        write_quoted(alarm->description ? alarm->description : "", NULL);
 80186c4:	4807      	ldr	r0, [pc, #28]	@ (80186e4 <print_alarm+0x90>)
 80186c6:	e7f4      	b.n	80186b2 <print_alarm+0x5e>
 80186c8:	20001a90 	.word	0x20001a90
 80186cc:	0802bfc8 	.word	0x0802bfc8
 80186d0:	0802c7fc 	.word	0x0802c7fc
 80186d4:	0802bfd4 	.word	0x0802bfd4
 80186d8:	0802c400 	.word	0x0802c400
 80186dc:	08029c58 	.word	0x08029c58
 80186e0:	0802c680 	.word	0x0802c680
 80186e4:	0802c13c 	.word	0x0802c13c

080186e8 <print_error>:
{
 80186e8:	b570      	push	{r4, r5, r6, lr}
 80186ea:	4604      	mov	r4, r0
    if(grbl_format) {
 80186ec:	b9f1      	cbnz	r1, 801872c <print_error+0x44>
        hal.stream.write("[ERRORCODE:");
 80186ee:	4d1b      	ldr	r5, [pc, #108]	@ (801875c <print_error+0x74>)
 80186f0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80186f4:	481a      	ldr	r0, [pc, #104]	@ (8018760 <print_error+0x78>)
 80186f6:	4798      	blx	r3
        hal.stream.write(uitoa(error->id));
 80186f8:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 80186fc:	7820      	ldrb	r0, [r4, #0]
 80186fe:	f7fd f95f 	bl	80159c0 <uitoa>
 8018702:	47b0      	blx	r6
        hal.stream.write(vbar);
 8018704:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018708:	4e16      	ldr	r6, [pc, #88]	@ (8018764 <print_error+0x7c>)
 801870a:	4630      	mov	r0, r6
 801870c:	4798      	blx	r3
        hal.stream.write(vbar);
 801870e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018712:	4630      	mov	r0, r6
 8018714:	4798      	blx	r3
        if(error->description)
 8018716:	6860      	ldr	r0, [r4, #4]
 8018718:	b110      	cbz	r0, 8018720 <print_error+0x38>
            hal.stream.write(error->description);
 801871a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801871e:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 8018720:	4b0e      	ldr	r3, [pc, #56]	@ (801875c <print_error+0x74>)
 8018722:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018726:	4810      	ldr	r0, [pc, #64]	@ (8018768 <print_error+0x80>)
 8018728:	4798      	blx	r3
}
 801872a:	bd70      	pop	{r4, r5, r6, pc}
        write_quoted(uitoa(error->id), ",");
 801872c:	7800      	ldrb	r0, [r0, #0]
 801872e:	f7fd f947 	bl	80159c0 <uitoa>
 8018732:	4d0e      	ldr	r5, [pc, #56]	@ (801876c <print_error+0x84>)
 8018734:	4629      	mov	r1, r5
 8018736:	f7ff fea7 	bl	8018488 <write_quoted>
        write_quoted("N/A", ",");
 801873a:	4629      	mov	r1, r5
 801873c:	480c      	ldr	r0, [pc, #48]	@ (8018770 <print_error+0x88>)
 801873e:	f7ff fea3 	bl	8018488 <write_quoted>
        write_quoted(error->description ? error->description : "", NULL);
 8018742:	6860      	ldr	r0, [r4, #4]
 8018744:	b140      	cbz	r0, 8018758 <print_error+0x70>
 8018746:	2100      	movs	r1, #0
 8018748:	f7ff fe9e 	bl	8018488 <write_quoted>
        hal.stream.write(ASCII_EOL);
 801874c:	4b03      	ldr	r3, [pc, #12]	@ (801875c <print_error+0x74>)
 801874e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018752:	4808      	ldr	r0, [pc, #32]	@ (8018774 <print_error+0x8c>)
 8018754:	4798      	blx	r3
 8018756:	e7e8      	b.n	801872a <print_error+0x42>
        write_quoted(error->description ? error->description : "", NULL);
 8018758:	4807      	ldr	r0, [pc, #28]	@ (8018778 <print_error+0x90>)
 801875a:	e7f4      	b.n	8018746 <print_error+0x5e>
 801875c:	20001a90 	.word	0x20001a90
 8018760:	0802bfd8 	.word	0x0802bfd8
 8018764:	0802c7fc 	.word	0x0802c7fc
 8018768:	0802bfd4 	.word	0x0802bfd4
 801876c:	0802c400 	.word	0x0802c400
 8018770:	08029c58 	.word	0x08029c58
 8018774:	0802c680 	.word	0x0802c680
 8018778:	0802c13c 	.word	0x0802c13c

0801877c <print_uito2a>:
}

#endif

static void print_uito2a (char *prefix, uint32_t v)
{
 801877c:	b538      	push	{r3, r4, r5, lr}
 801877e:	460c      	mov	r4, r1
    hal.stream.write(prefix);
 8018780:	4b09      	ldr	r3, [pc, #36]	@ (80187a8 <print_uito2a+0x2c>)
 8018782:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018786:	4798      	blx	r3
    if(v < 10)
 8018788:	2c09      	cmp	r4, #9
 801878a:	d804      	bhi.n	8018796 <print_uito2a+0x1a>
        hal.stream.write("0");
 801878c:	4b06      	ldr	r3, [pc, #24]	@ (80187a8 <print_uito2a+0x2c>)
 801878e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018792:	4806      	ldr	r0, [pc, #24]	@ (80187ac <print_uito2a+0x30>)
 8018794:	4798      	blx	r3
    hal.stream.write(uitoa(v));
 8018796:	4b04      	ldr	r3, [pc, #16]	@ (80187a8 <print_uito2a+0x2c>)
 8018798:	f8d3 50b4 	ldr.w	r5, [r3, #180]	@ 0xb4
 801879c:	4620      	mov	r0, r4
 801879e:	f7fd f90f 	bl	80159c0 <uitoa>
 80187a2:	47a8      	blx	r5
}
 80187a4:	bd38      	pop	{r3, r4, r5, pc}
 80187a6:	bf00      	nop
 80187a8:	20001a90 	.word	0x20001a90
 80187ac:	0802a0ac 	.word	0x0802a0ac

080187b0 <report_spindle>:

    return ok ? Status_OK : Status_InvalidStatement;
}

static void report_spindle (spindle_info_t *spindle, void *data)
{
 80187b0:	b570      	push	{r4, r5, r6, lr}
 80187b2:	4604      	mov	r4, r0
    if(data) {
 80187b4:	2900      	cmp	r1, #0
 80187b6:	f000 80bc 	beq.w	8018932 <report_spindle+0x182>
        char *caps = buf;
        hal.stream.write("[SPINDLE:");
 80187ba:	4d68      	ldr	r5, [pc, #416]	@ (801895c <report_spindle+0x1ac>)
 80187bc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80187c0:	4867      	ldr	r0, [pc, #412]	@ (8018960 <report_spindle+0x1b0>)
 80187c2:	4798      	blx	r3
        hal.stream.write(uitoa(spindle->id));
 80187c4:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 80187c8:	f994 0000 	ldrsb.w	r0, [r4]
 80187cc:	f7fd f8f8 	bl	80159c0 <uitoa>
 80187d0:	47b0      	blx	r6
        hal.stream.write("|");
 80187d2:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80187d6:	4863      	ldr	r0, [pc, #396]	@ (8018964 <report_spindle+0x1b4>)
 80187d8:	4798      	blx	r3
        hal.stream.write(spindle->enabled ? uitoa(spindle->num) : "-");
 80187da:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 80187de:	7a23      	ldrb	r3, [r4, #8]
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	f040 809b 	bne.w	801891c <report_spindle+0x16c>
 80187e6:	4860      	ldr	r0, [pc, #384]	@ (8018968 <report_spindle+0x1b8>)
 80187e8:	47a8      	blx	r5
        hal.stream.write("|");
 80187ea:	4d5c      	ldr	r5, [pc, #368]	@ (801895c <report_spindle+0x1ac>)
 80187ec:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80187f0:	485c      	ldr	r0, [pc, #368]	@ (8018964 <report_spindle+0x1b4>)
 80187f2:	4798      	blx	r3
        hal.stream.write(uitoa(spindle->hal->type));
 80187f4:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 80187f8:	68e3      	ldr	r3, [r4, #12]
 80187fa:	7a18      	ldrb	r0, [r3, #8]
 80187fc:	f7fd f8e0 	bl	80159c0 <uitoa>
 8018800:	47a8      	blx	r5
        *caps++ = '|';
 8018802:	4b5a      	ldr	r3, [pc, #360]	@ (801896c <report_spindle+0x1bc>)
 8018804:	227c      	movs	r2, #124	@ 0x7c
 8018806:	701a      	strb	r2, [r3, #0]
#if N_SYS_SPINDLE == 1
        if(spindle->is_current)
 8018808:	7a63      	ldrb	r3, [r4, #9]
 801880a:	2b00      	cmp	r3, #0
 801880c:	f000 808b 	beq.w	8018926 <report_spindle+0x176>
            *caps++ = '*';
 8018810:	4b56      	ldr	r3, [pc, #344]	@ (801896c <report_spindle+0x1bc>)
 8018812:	222a      	movs	r2, #42	@ 0x2a
 8018814:	705a      	strb	r2, [r3, #1]
 8018816:	3302      	adds	r3, #2
#endif
        if(spindle->hal->cap.at_speed)
 8018818:	68e2      	ldr	r2, [r4, #12]
 801881a:	7a92      	ldrb	r2, [r2, #10]
 801881c:	f012 0f04 	tst.w	r2, #4
 8018820:	d002      	beq.n	8018828 <report_spindle+0x78>
            *caps++ = 'S';
 8018822:	2253      	movs	r2, #83	@ 0x53
 8018824:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.direction)
 8018828:	68e2      	ldr	r2, [r4, #12]
 801882a:	7a92      	ldrb	r2, [r2, #10]
 801882c:	f012 0f02 	tst.w	r2, #2
 8018830:	d002      	beq.n	8018838 <report_spindle+0x88>
            *caps++ = 'D';
 8018832:	2244      	movs	r2, #68	@ 0x44
 8018834:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.laser)
 8018838:	68e2      	ldr	r2, [r4, #12]
 801883a:	7a92      	ldrb	r2, [r2, #10]
 801883c:	f012 0f08 	tst.w	r2, #8
 8018840:	d002      	beq.n	8018848 <report_spindle+0x98>
            *caps++ = 'L';
 8018842:	224c      	movs	r2, #76	@ 0x4c
 8018844:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.laser && spindle->hal->pulse_on)
 8018848:	68e2      	ldr	r2, [r4, #12]
 801884a:	7a91      	ldrb	r1, [r2, #10]
 801884c:	f011 0f08 	tst.w	r1, #8
 8018850:	d004      	beq.n	801885c <report_spindle+0xac>
 8018852:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8018854:	b112      	cbz	r2, 801885c <report_spindle+0xac>
            *caps++ = 'A';
 8018856:	2241      	movs	r2, #65	@ 0x41
 8018858:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.pid)
 801885c:	68e2      	ldr	r2, [r4, #12]
 801885e:	7a92      	ldrb	r2, [r2, #10]
 8018860:	f012 0f20 	tst.w	r2, #32
 8018864:	d002      	beq.n	801886c <report_spindle+0xbc>
            *caps++ = 'P';
 8018866:	2250      	movs	r2, #80	@ 0x50
 8018868:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.pwm_invert)
 801886c:	68e2      	ldr	r2, [r4, #12]
 801886e:	7a92      	ldrb	r2, [r2, #10]
 8018870:	f012 0f10 	tst.w	r2, #16
 8018874:	d002      	beq.n	801887c <report_spindle+0xcc>
            *caps++ = 'I';
 8018876:	2249      	movs	r2, #73	@ 0x49
 8018878:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.pwm_linearization)
 801887c:	68e2      	ldr	r2, [r4, #12]
 801887e:	7a92      	ldrb	r2, [r2, #10]
 8018880:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8018884:	d002      	beq.n	801888c <report_spindle+0xdc>
            *caps++ = 'N';
 8018886:	224e      	movs	r2, #78	@ 0x4e
 8018888:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.rpm_range_locked)
 801888c:	68e2      	ldr	r2, [r4, #12]
 801888e:	f992 200a 	ldrsb.w	r2, [r2, #10]
 8018892:	2a00      	cmp	r2, #0
 8018894:	db49      	blt.n	801892a <report_spindle+0x17a>
            *caps++ = 'R';
        if(spindle->hal->cap.variable)
 8018896:	68e2      	ldr	r2, [r4, #12]
 8018898:	7a92      	ldrb	r2, [r2, #10]
 801889a:	f012 0f01 	tst.w	r2, #1
 801889e:	d002      	beq.n	80188a6 <report_spindle+0xf6>
            *caps++ = 'V';
 80188a0:	2256      	movs	r2, #86	@ 0x56
 80188a2:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->get_data)
 80188a6:	68e2      	ldr	r2, [r4, #12]
 80188a8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80188aa:	b112      	cbz	r2, 80188b2 <report_spindle+0x102>
            *caps++ = 'E';
 80188ac:	2245      	movs	r2, #69	@ 0x45
 80188ae:	f803 2b01 	strb.w	r2, [r3], #1
        *caps++ = '|';
 80188b2:	227c      	movs	r2, #124	@ 0x7c
 80188b4:	701a      	strb	r2, [r3, #0]
        *caps = '\0';
 80188b6:	2200      	movs	r2, #0
 80188b8:	705a      	strb	r2, [r3, #1]
        hal.stream.write(buf);
 80188ba:	4d28      	ldr	r5, [pc, #160]	@ (801895c <report_spindle+0x1ac>)
 80188bc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80188c0:	482a      	ldr	r0, [pc, #168]	@ (801896c <report_spindle+0x1bc>)
 80188c2:	4798      	blx	r3
        hal.stream.write(spindle->name);
 80188c4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80188c8:	6860      	ldr	r0, [r4, #4]
 80188ca:	4798      	blx	r3
        if(spindle->hal->rpm_max > 0.0f) {
 80188cc:	68e3      	ldr	r3, [r4, #12]
 80188ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80188d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80188d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188da:	dd19      	ble.n	8018910 <report_spindle+0x160>
            hal.stream.write("|");
 80188dc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80188e0:	4820      	ldr	r0, [pc, #128]	@ (8018964 <report_spindle+0x1b4>)
 80188e2:	4798      	blx	r3
            hal.stream.write(ftoa(spindle->hal->rpm_min, 1));
 80188e4:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 80188e8:	68e3      	ldr	r3, [r4, #12]
 80188ea:	2001      	movs	r0, #1
 80188ec:	ed93 0a05 	vldr	s0, [r3, #20]
 80188f0:	f7fd f888 	bl	8015a04 <ftoa>
 80188f4:	47b0      	blx	r6
            hal.stream.write(",");
 80188f6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80188fa:	481d      	ldr	r0, [pc, #116]	@ (8018970 <report_spindle+0x1c0>)
 80188fc:	4798      	blx	r3
            hal.stream.write(ftoa(spindle->hal->rpm_max, 1));
 80188fe:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 8018902:	68e3      	ldr	r3, [r4, #12]
 8018904:	2001      	movs	r0, #1
 8018906:	ed93 0a06 	vldr	s0, [r3, #24]
 801890a:	f7fd f87b 	bl	8015a04 <ftoa>
 801890e:	47a8      	blx	r5
        }
        hal.stream.write("]" ASCII_EOL);
 8018910:	4b12      	ldr	r3, [pc, #72]	@ (801895c <report_spindle+0x1ac>)
 8018912:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018916:	4817      	ldr	r0, [pc, #92]	@ (8018974 <report_spindle+0x1c4>)
 8018918:	4798      	blx	r3
 #endif
#endif
        }
        hal.stream.write(ASCII_EOL);
    }
}
 801891a:	bd70      	pop	{r4, r5, r6, pc}
        hal.stream.write(spindle->enabled ? uitoa(spindle->num) : "-");
 801891c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8018920:	f7fd f84e 	bl	80159c0 <uitoa>
 8018924:	e760      	b.n	80187e8 <report_spindle+0x38>
        *caps++ = '|';
 8018926:	4b14      	ldr	r3, [pc, #80]	@ (8018978 <report_spindle+0x1c8>)
 8018928:	e776      	b.n	8018818 <report_spindle+0x68>
            *caps++ = 'R';
 801892a:	2252      	movs	r2, #82	@ 0x52
 801892c:	f803 2b01 	strb.w	r2, [r3], #1
 8018930:	e7b1      	b.n	8018896 <report_spindle+0xe6>
        hal.stream.write(uitoa(spindle->id));
 8018932:	4d0a      	ldr	r5, [pc, #40]	@ (801895c <report_spindle+0x1ac>)
 8018934:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8018938:	f990 0000 	ldrsb.w	r0, [r0]
 801893c:	f7fd f840 	bl	80159c0 <uitoa>
 8018940:	47b0      	blx	r6
        hal.stream.write(" - ");
 8018942:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018946:	480d      	ldr	r0, [pc, #52]	@ (801897c <report_spindle+0x1cc>)
 8018948:	4798      	blx	r3
        hal.stream.write(spindle->name);
 801894a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801894e:	6860      	ldr	r0, [r4, #4]
 8018950:	4798      	blx	r3
        hal.stream.write(ASCII_EOL);
 8018952:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018956:	480a      	ldr	r0, [pc, #40]	@ (8018980 <report_spindle+0x1d0>)
 8018958:	4798      	blx	r3
}
 801895a:	e7de      	b.n	801891a <report_spindle+0x16a>
 801895c:	20001a90 	.word	0x20001a90
 8018960:	0802bfe4 	.word	0x0802bfe4
 8018964:	0802bff0 	.word	0x0802bff0
 8018968:	0802bfb0 	.word	0x0802bfb0
 801896c:	20002378 	.word	0x20002378
 8018970:	0802c400 	.word	0x0802c400
 8018974:	0802bfd4 	.word	0x0802bfd4
 8018978:	20002379 	.word	0x20002379
 801897c:	0802bff4 	.word	0x0802bff4
 8018980:	0802c680 	.word	0x0802c680

08018984 <get_axis_values_mm>:
{
 8018984:	b570      	push	{r4, r5, r6, lr}
 8018986:	4605      	mov	r5, r0
    buf[0] = '\0';
 8018988:	2400      	movs	r4, #0
 801898a:	4b18      	ldr	r3, [pc, #96]	@ (80189ec <get_axis_values_mm+0x68>)
 801898c:	701c      	strb	r4, [r3, #0]
    for (idx = 0; idx < N_AXIS; idx++) {
 801898e:	e014      	b.n	80189ba <get_axis_values_mm+0x36>
            strcat(buf, ftoa(axis_values[idx], N_DECIMAL_COORDVALUE_MM));
 8018990:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018994:	2003      	movs	r0, #3
 8018996:	ed93 0a00 	vldr	s0, [r3]
 801899a:	f7fd f833 	bl	8015a04 <ftoa>
 801899e:	4601      	mov	r1, r0
 80189a0:	4812      	ldr	r0, [pc, #72]	@ (80189ec <get_axis_values_mm+0x68>)
 80189a2:	f00c f9cc 	bl	8024d3e <strcat>
        if (idx < (N_AXIS - 1))
 80189a6:	2c01      	cmp	r4, #1
 80189a8:	d806      	bhi.n	80189b8 <get_axis_values_mm+0x34>
            strcat(buf, ",");
 80189aa:	4e10      	ldr	r6, [pc, #64]	@ (80189ec <get_axis_values_mm+0x68>)
 80189ac:	4630      	mov	r0, r6
 80189ae:	f7ef fba7 	bl	8008100 <strlen>
 80189b2:	4b0f      	ldr	r3, [pc, #60]	@ (80189f0 <get_axis_values_mm+0x6c>)
 80189b4:	881b      	ldrh	r3, [r3, #0]
 80189b6:	5233      	strh	r3, [r6, r0]
    for (idx = 0; idx < N_AXIS; idx++) {
 80189b8:	3401      	adds	r4, #1
 80189ba:	2c02      	cmp	r4, #2
 80189bc:	d813      	bhi.n	80189e6 <get_axis_values_mm+0x62>
        if(idx == X_AXIS && gc_state.modal.diameter_mode)
 80189be:	2c00      	cmp	r4, #0
 80189c0:	d1e6      	bne.n	8018990 <get_axis_values_mm+0xc>
 80189c2:	4b0c      	ldr	r3, [pc, #48]	@ (80189f4 <get_axis_values_mm+0x70>)
 80189c4:	795b      	ldrb	r3, [r3, #5]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d0e2      	beq.n	8018990 <get_axis_values_mm+0xc>
            strcat(buf, ftoa(axis_values[idx] * 2.0f, N_DECIMAL_COORDVALUE_MM));
 80189ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80189ce:	ed93 0a00 	vldr	s0, [r3]
 80189d2:	2003      	movs	r0, #3
 80189d4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80189d8:	f7fd f814 	bl	8015a04 <ftoa>
 80189dc:	4601      	mov	r1, r0
 80189de:	4803      	ldr	r0, [pc, #12]	@ (80189ec <get_axis_values_mm+0x68>)
 80189e0:	f00c f9ad 	bl	8024d3e <strcat>
 80189e4:	e7df      	b.n	80189a6 <get_axis_values_mm+0x22>
}
 80189e6:	4801      	ldr	r0, [pc, #4]	@ (80189ec <get_axis_values_mm+0x68>)
 80189e8:	bd70      	pop	{r4, r5, r6, pc}
 80189ea:	bf00      	nop
 80189ec:	20002378 	.word	0x20002378
 80189f0:	0802c400 	.word	0x0802c400
 80189f4:	200017c8 	.word	0x200017c8

080189f8 <get_axis_values_inches>:
{
 80189f8:	b570      	push	{r4, r5, r6, lr}
 80189fa:	4605      	mov	r5, r0
    buf[0] = '\0';
 80189fc:	2400      	movs	r4, #0
 80189fe:	4b1c      	ldr	r3, [pc, #112]	@ (8018a70 <get_axis_values_inches+0x78>)
 8018a00:	701c      	strb	r4, [r3, #0]
    for (idx = 0; idx < N_AXIS; idx++) {
 8018a02:	e018      	b.n	8018a36 <get_axis_values_inches+0x3e>
             strcat(buf, ftoa(axis_values[idx] * INCH_PER_MM, N_DECIMAL_COORDVALUE_INCH));
 8018a04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018a08:	ed93 0a00 	vldr	s0, [r3]
 8018a0c:	2004      	movs	r0, #4
 8018a0e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018a74 <get_axis_values_inches+0x7c>
 8018a12:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018a16:	f7fc fff5 	bl	8015a04 <ftoa>
 8018a1a:	4601      	mov	r1, r0
 8018a1c:	4814      	ldr	r0, [pc, #80]	@ (8018a70 <get_axis_values_inches+0x78>)
 8018a1e:	f00c f98e 	bl	8024d3e <strcat>
        if (idx < (N_AXIS - 1))
 8018a22:	2c01      	cmp	r4, #1
 8018a24:	d806      	bhi.n	8018a34 <get_axis_values_inches+0x3c>
            strcat(buf, ",");
 8018a26:	4e12      	ldr	r6, [pc, #72]	@ (8018a70 <get_axis_values_inches+0x78>)
 8018a28:	4630      	mov	r0, r6
 8018a2a:	f7ef fb69 	bl	8008100 <strlen>
 8018a2e:	4b12      	ldr	r3, [pc, #72]	@ (8018a78 <get_axis_values_inches+0x80>)
 8018a30:	881b      	ldrh	r3, [r3, #0]
 8018a32:	5233      	strh	r3, [r6, r0]
    for (idx = 0; idx < N_AXIS; idx++) {
 8018a34:	3401      	adds	r4, #1
 8018a36:	2c02      	cmp	r4, #2
 8018a38:	d817      	bhi.n	8018a6a <get_axis_values_inches+0x72>
        if(idx == X_AXIS && gc_state.modal.diameter_mode)
 8018a3a:	2c00      	cmp	r4, #0
 8018a3c:	d1e2      	bne.n	8018a04 <get_axis_values_inches+0xc>
 8018a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8018a7c <get_axis_values_inches+0x84>)
 8018a40:	795b      	ldrb	r3, [r3, #5]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d0de      	beq.n	8018a04 <get_axis_values_inches+0xc>
            strcat(buf, ftoa(axis_values[idx] * INCH_PER_MM * 2.0f, N_DECIMAL_COORDVALUE_INCH));
 8018a46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018a4a:	ed93 0a00 	vldr	s0, [r3]
 8018a4e:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8018a74 <get_axis_values_inches+0x7c>
 8018a52:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018a56:	2004      	movs	r0, #4
 8018a58:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018a5c:	f7fc ffd2 	bl	8015a04 <ftoa>
 8018a60:	4601      	mov	r1, r0
 8018a62:	4803      	ldr	r0, [pc, #12]	@ (8018a70 <get_axis_values_inches+0x78>)
 8018a64:	f00c f96b 	bl	8024d3e <strcat>
 8018a68:	e7db      	b.n	8018a22 <get_axis_values_inches+0x2a>
}
 8018a6a:	4801      	ldr	r0, [pc, #4]	@ (8018a70 <get_axis_values_inches+0x78>)
 8018a6c:	bd70      	pop	{r4, r5, r6, pc}
 8018a6e:	bf00      	nop
 8018a70:	20002378 	.word	0x20002378
 8018a74:	3d21428b 	.word	0x3d21428b
 8018a78:	0802c400 	.word	0x0802c400
 8018a7c:	200017c8 	.word	0x200017c8

08018a80 <get_axis_value_mm>:
{
 8018a80:	b508      	push	{r3, lr}
    return strcpy(buf, ftoa(value, N_DECIMAL_COORDVALUE_MM));
 8018a82:	2003      	movs	r0, #3
 8018a84:	f7fc ffbe 	bl	8015a04 <ftoa>
 8018a88:	4601      	mov	r1, r0
 8018a8a:	4802      	ldr	r0, [pc, #8]	@ (8018a94 <get_axis_value_mm+0x14>)
 8018a8c:	f00c faa7 	bl	8024fde <strcpy>
}
 8018a90:	bd08      	pop	{r3, pc}
 8018a92:	bf00      	nop
 8018a94:	20002378 	.word	0x20002378

08018a98 <get_axis_value_inches>:
{
 8018a98:	b508      	push	{r3, lr}
    return strcpy(buf, ftoa(value * INCH_PER_MM, N_DECIMAL_COORDVALUE_INCH));
 8018a9a:	2004      	movs	r0, #4
 8018a9c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8018ab4 <get_axis_value_inches+0x1c>
 8018aa0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018aa4:	f7fc ffae 	bl	8015a04 <ftoa>
 8018aa8:	4601      	mov	r1, r0
 8018aaa:	4803      	ldr	r0, [pc, #12]	@ (8018ab8 <get_axis_value_inches+0x20>)
 8018aac:	f00c fa97 	bl	8024fde <strcpy>
}
 8018ab0:	bd08      	pop	{r3, pc}
 8018ab2:	bf00      	nop
 8018ab4:	3d21428b 	.word	0x3d21428b
 8018ab8:	20002378 	.word	0x20002378

08018abc <map_coord_system>:
{
 8018abc:	b538      	push	{r3, r4, r5, lr}
    uint8_t g5x = id + 54;
 8018abe:	f100 0436 	add.w	r4, r0, #54	@ 0x36
 8018ac2:	b2e4      	uxtb	r4, r4
    strcpy(buf, uitoa((uint32_t)(g5x > 59 ? 59 : g5x)));
 8018ac4:	4620      	mov	r0, r4
 8018ac6:	2c3b      	cmp	r4, #59	@ 0x3b
 8018ac8:	bf28      	it	cs
 8018aca:	203b      	movcs	r0, #59	@ 0x3b
 8018acc:	f7fc ff78 	bl	80159c0 <uitoa>
 8018ad0:	4601      	mov	r1, r0
 8018ad2:	480b      	ldr	r0, [pc, #44]	@ (8018b00 <map_coord_system+0x44>)
 8018ad4:	f00c fa83 	bl	8024fde <strcpy>
    if(g5x > 59) {
 8018ad8:	2c3b      	cmp	r4, #59	@ 0x3b
 8018ada:	d801      	bhi.n	8018ae0 <map_coord_system+0x24>
}
 8018adc:	4808      	ldr	r0, [pc, #32]	@ (8018b00 <map_coord_system+0x44>)
 8018ade:	bd38      	pop	{r3, r4, r5, pc}
        strcat(buf, ".");
 8018ae0:	4d07      	ldr	r5, [pc, #28]	@ (8018b00 <map_coord_system+0x44>)
 8018ae2:	4628      	mov	r0, r5
 8018ae4:	f7ef fb0c 	bl	8008100 <strlen>
 8018ae8:	4b06      	ldr	r3, [pc, #24]	@ (8018b04 <map_coord_system+0x48>)
 8018aea:	881b      	ldrh	r3, [r3, #0]
 8018aec:	522b      	strh	r3, [r5, r0]
        strcat(buf, uitoa((uint32_t)(g5x - 59)));
 8018aee:	f1a4 003b 	sub.w	r0, r4, #59	@ 0x3b
 8018af2:	f7fc ff65 	bl	80159c0 <uitoa>
 8018af6:	4601      	mov	r1, r0
 8018af8:	4628      	mov	r0, r5
 8018afa:	f00c f920 	bl	8024d3e <strcat>
 8018afe:	e7ed      	b.n	8018adc <map_coord_system+0x20>
 8018b00:	20002378 	.word	0x20002378
 8018b04:	0802986c 	.word	0x0802986c

08018b08 <get_pin_info>:
{
 8018b08:	b510      	push	{r4, lr}
 8018b0a:	460c      	mov	r4, r1
    info->function = pin->function;
 8018b0c:	7843      	ldrb	r3, [r0, #1]
 8018b0e:	704b      	strb	r3, [r1, #1]
    info->pin = pin->pin;
 8018b10:	6903      	ldr	r3, [r0, #16]
 8018b12:	700b      	strb	r3, [r1, #0]
    info->description = pin->description;
 8018b14:	68c3      	ldr	r3, [r0, #12]
 8018b16:	610b      	str	r3, [r1, #16]
    info->sortkey = (pin->function << 8) | pin->id | (pin->group >= PinGroup_UART1 && pin->group <= PinGroup_UART4 ? pin->group << 16 : 0);
 8018b18:	7842      	ldrb	r2, [r0, #1]
 8018b1a:	7803      	ldrb	r3, [r0, #0]
 8018b1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018b20:	6842      	ldr	r2, [r0, #4]
 8018b22:	f1a2 0111 	sub.w	r1, r2, #17
 8018b26:	2903      	cmp	r1, #3
 8018b28:	d809      	bhi.n	8018b3e <get_pin_info+0x36>
 8018b2a:	0412      	lsls	r2, r2, #16
 8018b2c:	4313      	orrs	r3, r2
 8018b2e:	6163      	str	r3, [r4, #20]
    if(pin->port)
 8018b30:	6881      	ldr	r1, [r0, #8]
 8018b32:	b131      	cbz	r1, 8018b42 <get_pin_info+0x3a>
        strcpy(info->port, (char *)pin->port);
 8018b34:	1ca0      	adds	r0, r4, #2
 8018b36:	f00c fa52 	bl	8024fde <strcpy>
}
 8018b3a:	4620      	mov	r0, r4
 8018b3c:	bd10      	pop	{r4, pc}
    info->sortkey = (pin->function << 8) | pin->id | (pin->group >= PinGroup_UART1 && pin->group <= PinGroup_UART4 ? pin->group << 16 : 0);
 8018b3e:	2200      	movs	r2, #0
 8018b40:	e7f4      	b.n	8018b2c <get_pin_info+0x24>
        *info->port = '\0';
 8018b42:	2300      	movs	r3, #0
 8018b44:	70a3      	strb	r3, [r4, #2]
 8018b46:	e7f8      	b.n	8018b3a <get_pin_info+0x32>

08018b48 <get_pins>:
{
 8018b48:	b510      	push	{r4, lr}
    get_pin_info(pin, &((pin_data_t *)data)->pins[((pin_data_t *)data)->idx++]);
 8018b4a:	688a      	ldr	r2, [r1, #8]
 8018b4c:	680b      	ldr	r3, [r1, #0]
 8018b4e:	1c5c      	adds	r4, r3, #1
 8018b50:	600c      	str	r4, [r1, #0]
 8018b52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018b56:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8018b5a:	f7ff ffd5 	bl	8018b08 <get_pin_info>
}
 8018b5e:	bd10      	pop	{r4, pc}

08018b60 <appendbuf>:
{
 8018b60:	b40f      	push	{r0, r1, r2, r3}
 8018b62:	b410      	push	{r4}
 8018b64:	b083      	sub	sp, #12
 8018b66:	ab04      	add	r3, sp, #16
 8018b68:	f853 4b04 	ldr.w	r4, [r3], #4
    va_start(list, argc);
 8018b6c:	9301      	str	r3, [sp, #4]
    char c, *s = buf, *arg;
 8018b6e:	480c      	ldr	r0, [pc, #48]	@ (8018ba0 <appendbuf+0x40>)
    while(argc--) {
 8018b70:	e00b      	b.n	8018b8a <appendbuf+0x2a>
        arg = va_arg(list, char *);
 8018b72:	9b01      	ldr	r3, [sp, #4]
 8018b74:	1d1a      	adds	r2, r3, #4
 8018b76:	9201      	str	r2, [sp, #4]
 8018b78:	6819      	ldr	r1, [r3, #0]
 8018b7a:	4602      	mov	r2, r0
            c = *s++ = *arg++;
 8018b7c:	4610      	mov	r0, r2
 8018b7e:	3201      	adds	r2, #1
 8018b80:	780b      	ldrb	r3, [r1, #0]
 8018b82:	3101      	adds	r1, #1
 8018b84:	7003      	strb	r3, [r0, #0]
        } while(c);
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d1f8      	bne.n	8018b7c <appendbuf+0x1c>
    while(argc--) {
 8018b8a:	4623      	mov	r3, r4
 8018b8c:	3c01      	subs	r4, #1
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d1ef      	bne.n	8018b72 <appendbuf+0x12>
}
 8018b92:	4803      	ldr	r0, [pc, #12]	@ (8018ba0 <appendbuf+0x40>)
 8018b94:	b003      	add	sp, #12
 8018b96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b9a:	b004      	add	sp, #16
 8018b9c:	4770      	bx	lr
 8018b9e:	bf00      	nop
 8018ba0:	20002378 	.word	0x20002378

08018ba4 <report_alarm_message>:
{
 8018ba4:	b570      	push	{r4, r5, r6, lr}
 8018ba6:	4604      	mov	r4, r0
    hal.stream.write_all(appendbuf(3, "ALARM:", uitoa((uint32_t)alarm_code), ASCII_EOL));
 8018ba8:	4d08      	ldr	r5, [pc, #32]	@ (8018bcc <report_alarm_message+0x28>)
 8018baa:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 8018bae:	f7fc ff07 	bl	80159c0 <uitoa>
 8018bb2:	4602      	mov	r2, r0
 8018bb4:	4b06      	ldr	r3, [pc, #24]	@ (8018bd0 <report_alarm_message+0x2c>)
 8018bb6:	4907      	ldr	r1, [pc, #28]	@ (8018bd4 <report_alarm_message+0x30>)
 8018bb8:	2003      	movs	r0, #3
 8018bba:	f7ff ffd1 	bl	8018b60 <appendbuf>
 8018bbe:	47b0      	blx	r6
    hal.delay_ms(100, NULL); // Force delay to ensure message clears output stream buffer.
 8018bc0:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8018bc2:	2100      	movs	r1, #0
 8018bc4:	2064      	movs	r0, #100	@ 0x64
 8018bc6:	4798      	blx	r3
}
 8018bc8:	4620      	mov	r0, r4
 8018bca:	bd70      	pop	{r4, r5, r6, pc}
 8018bcc:	20001a90 	.word	0x20001a90
 8018bd0:	0802c680 	.word	0x0802c680
 8018bd4:	0802bff8 	.word	0x0802bff8

08018bd8 <report_status_message>:
{
 8018bd8:	b538      	push	{r3, r4, r5, lr}
    switch(status_code) {
 8018bda:	4604      	mov	r4, r0
 8018bdc:	b930      	cbnz	r0, 8018bec <report_status_message+0x14>
            hal.stream.write("ok" ASCII_EOL);
 8018bde:	4b0a      	ldr	r3, [pc, #40]	@ (8018c08 <report_status_message+0x30>)
 8018be0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018be4:	4809      	ldr	r0, [pc, #36]	@ (8018c0c <report_status_message+0x34>)
 8018be6:	4798      	blx	r3
}
 8018be8:	4620      	mov	r0, r4
 8018bea:	bd38      	pop	{r3, r4, r5, pc}
            hal.stream.write(appendbuf(3, "error:", uitoa((uint32_t)status_code), ASCII_EOL));
 8018bec:	4b06      	ldr	r3, [pc, #24]	@ (8018c08 <report_status_message+0x30>)
 8018bee:	f8d3 50b4 	ldr.w	r5, [r3, #180]	@ 0xb4
 8018bf2:	f7fc fee5 	bl	80159c0 <uitoa>
 8018bf6:	4602      	mov	r2, r0
 8018bf8:	4b05      	ldr	r3, [pc, #20]	@ (8018c10 <report_status_message+0x38>)
 8018bfa:	4906      	ldr	r1, [pc, #24]	@ (8018c14 <report_status_message+0x3c>)
 8018bfc:	2003      	movs	r0, #3
 8018bfe:	f7ff ffaf 	bl	8018b60 <appendbuf>
 8018c02:	47a8      	blx	r5
            break;
 8018c04:	e7f0      	b.n	8018be8 <report_status_message+0x10>
 8018c06:	bf00      	nop
 8018c08:	20001a90 	.word	0x20001a90
 8018c0c:	0802c000 	.word	0x0802c000
 8018c10:	0802c680 	.word	0x0802c680
 8018c14:	0802c008 	.word	0x0802c008

08018c18 <report_bitfield>:
{
 8018c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c1c:	4604      	mov	r4, r0
 8018c1e:	4688      	mov	r8, r1
    if((s = (char *)malloc(strlen(format) + 1))) {
 8018c20:	f7ef fa6e 	bl	8008100 <strlen>
 8018c24:	3001      	adds	r0, #1
 8018c26:	f009 ffb9 	bl	8022b9c <malloc>
 8018c2a:	2800      	cmp	r0, #0
 8018c2c:	d049      	beq.n	8018cc2 <report_bitfield+0xaa>
 8018c2e:	4681      	mov	r9, r0
        strcpy(s, format);
 8018c30:	4621      	mov	r1, r4
 8018c32:	f00c f9d4 	bl	8024fde <strcpy>
        char *element = strtok(s, ",");
 8018c36:	4924      	ldr	r1, [pc, #144]	@ (8018cc8 <report_bitfield+0xb0>)
 8018c38:	4648      	mov	r0, r9
 8018c3a:	f00c f8d7 	bl	8024dec <strtok>
 8018c3e:	4604      	mov	r4, r0
    uint_fast16_t val = 1;
 8018c40:	2701      	movs	r7, #1
    uint_fast8_t bit = 0;
 8018c42:	2600      	movs	r6, #0
        while(element) {
 8018c44:	e006      	b.n	8018c54 <report_bitfield+0x3c>
            bit++;
 8018c46:	3601      	adds	r6, #1
            val <<= 1;
 8018c48:	007f      	lsls	r7, r7, #1
            element = strtok(NULL, ",");
 8018c4a:	491f      	ldr	r1, [pc, #124]	@ (8018cc8 <report_bitfield+0xb0>)
 8018c4c:	2000      	movs	r0, #0
 8018c4e:	f00c f8cd 	bl	8024dec <strtok>
 8018c52:	4604      	mov	r4, r0
        while(element) {
 8018c54:	2c00      	cmp	r4, #0
 8018c56:	d031      	beq.n	8018cbc <report_bitfield+0xa4>
            if(strcmp(element, "N/A")) {
 8018c58:	491c      	ldr	r1, [pc, #112]	@ (8018ccc <report_bitfield+0xb4>)
 8018c5a:	4620      	mov	r0, r4
 8018c5c:	f7ef f9f0 	bl	8008040 <strcmp>
 8018c60:	2800      	cmp	r0, #0
 8018c62:	d0f0      	beq.n	8018c46 <report_bitfield+0x2e>
                hal.stream.write(ASCII_EOL);
 8018c64:	4d1a      	ldr	r5, [pc, #104]	@ (8018cd0 <report_bitfield+0xb8>)
 8018c66:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018c6a:	481a      	ldr	r0, [pc, #104]	@ (8018cd4 <report_bitfield+0xbc>)
 8018c6c:	4798      	blx	r3
                hal.stream.write("    ");
 8018c6e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018c72:	4819      	ldr	r0, [pc, #100]	@ (8018cd8 <report_bitfield+0xc0>)
 8018c74:	4798      	blx	r3
                hal.stream.write(uitoa(bit));
 8018c76:	f8d5 a0b4 	ldr.w	sl, [r5, #180]	@ 0xb4
 8018c7a:	4630      	mov	r0, r6
 8018c7c:	f7fc fea0 	bl	80159c0 <uitoa>
 8018c80:	47d0      	blx	sl
                hal.stream.write(" - ");
 8018c82:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018c86:	4815      	ldr	r0, [pc, #84]	@ (8018cdc <report_bitfield+0xc4>)
 8018c88:	4798      	blx	r3
                if(*element)
 8018c8a:	7823      	ldrb	r3, [r4, #0]
 8018c8c:	b11b      	cbz	r3, 8018c96 <report_bitfield+0x7e>
                hal.stream.write(element);
 8018c8e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018c92:	4620      	mov	r0, r4
 8018c94:	4798      	blx	r3
                if(bitmap) {
 8018c96:	f1b8 0f00 	cmp.w	r8, #0
 8018c9a:	d0d4      	beq.n	8018c46 <report_bitfield+0x2e>
                    hal.stream.write(" (");
 8018c9c:	4c0c      	ldr	r4, [pc, #48]	@ (8018cd0 <report_bitfield+0xb8>)
 8018c9e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8018ca2:	480f      	ldr	r0, [pc, #60]	@ (8018ce0 <report_bitfield+0xc8>)
 8018ca4:	4798      	blx	r3
                    hal.stream.write(uitoa(val));
 8018ca6:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8018caa:	4638      	mov	r0, r7
 8018cac:	f7fc fe88 	bl	80159c0 <uitoa>
 8018cb0:	47a8      	blx	r5
                    hal.stream.write(")");
 8018cb2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8018cb6:	480b      	ldr	r0, [pc, #44]	@ (8018ce4 <report_bitfield+0xcc>)
 8018cb8:	4798      	blx	r3
 8018cba:	e7c4      	b.n	8018c46 <report_bitfield+0x2e>
        free(s);
 8018cbc:	4648      	mov	r0, r9
 8018cbe:	f009 ff75 	bl	8022bac <free>
}
 8018cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cc6:	bf00      	nop
 8018cc8:	0802c400 	.word	0x0802c400
 8018ccc:	08029c58 	.word	0x08029c58
 8018cd0:	20001a90 	.word	0x20001a90
 8018cd4:	0802c680 	.word	0x0802c680
 8018cd8:	0802c010 	.word	0x0802c010
 8018cdc:	0802bff4 	.word	0x0802bff4
 8018ce0:	0802c018 	.word	0x0802c018
 8018ce4:	0802b558 	.word	0x0802b558

08018ce8 <cmp_setting_group_name>:
{
 8018ce8:	b508      	push	{r3, lr}
    return strcmp((*(setting_group_detail_t **)(a))->name, (*(setting_group_detail_t **)(b))->name);
 8018cea:	6803      	ldr	r3, [r0, #0]
 8018cec:	680a      	ldr	r2, [r1, #0]
 8018cee:	6851      	ldr	r1, [r2, #4]
 8018cf0:	6858      	ldr	r0, [r3, #4]
 8018cf2:	f7ef f9a5 	bl	8008040 <strcmp>
}
 8018cf6:	bd08      	pop	{r3, pc}

08018cf8 <write_name>:
{
 8018cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cfa:	4604      	mov	r4, r0
    char *q = hal.stream.write_n ? strchr(s, '?') : NULL;
 8018cfc:	4b10      	ldr	r3, [pc, #64]	@ (8018d40 <write_name+0x48>)
 8018cfe:	f8d3 50d8 	ldr.w	r5, [r3, #216]	@ 0xd8
 8018d02:	b1bd      	cbz	r5, 8018d34 <write_name+0x3c>
 8018d04:	460f      	mov	r7, r1
 8018d06:	213f      	movs	r1, #63	@ 0x3f
 8018d08:	f00c f828 	bl	8024d5c <strchr>
    if(q) {
 8018d0c:	4606      	mov	r6, r0
 8018d0e:	b188      	cbz	r0, 8018d34 <write_name+0x3c>
        if(q != s)
 8018d10:	4284      	cmp	r4, r0
 8018d12:	d003      	beq.n	8018d1c <write_name+0x24>
            hal.stream.write_n(s, q - s);
 8018d14:	1b01      	subs	r1, r0, r4
 8018d16:	b289      	uxth	r1, r1
 8018d18:	4620      	mov	r0, r4
 8018d1a:	47a8      	blx	r5
        hal.stream.write(uitoa(offset + 1));
 8018d1c:	4c08      	ldr	r4, [pc, #32]	@ (8018d40 <write_name+0x48>)
 8018d1e:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8018d22:	1c78      	adds	r0, r7, #1
 8018d24:	f7fc fe4c 	bl	80159c0 <uitoa>
 8018d28:	47a8      	blx	r5
        hal.stream.write(q + 1);
 8018d2a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8018d2e:	1c70      	adds	r0, r6, #1
 8018d30:	4798      	blx	r3
 8018d32:	e004      	b.n	8018d3e <write_name+0x46>
        hal.stream.write(s);
 8018d34:	4b02      	ldr	r3, [pc, #8]	@ (8018d40 <write_name+0x48>)
 8018d36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018d3a:	4620      	mov	r0, r4
 8018d3c:	4798      	blx	r3
}
 8018d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d40:	20001a90 	.word	0x20001a90

08018d44 <report_settings_detail>:
{
 8018d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d48:	460c      	mov	r4, r1
 8018d4a:	4615      	mov	r5, r2
    uint_fast8_t suboffset = setting->flags.subgroups ? offset / setting->flags.increment : offset;
 8018d4c:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8018d50:	f013 0f04 	tst.w	r3, #4
 8018d54:	d004      	beq.n	8018d60 <report_settings_detail+0x1c>
 8018d56:	f3c3 06c3 	ubfx	r6, r3, #3, #4
 8018d5a:	fbb2 f6f6 	udiv	r6, r2, r6
 8018d5e:	e000      	b.n	8018d62 <report_settings_detail+0x1e>
 8018d60:	4616      	mov	r6, r2
    switch(format)
 8018d62:	2803      	cmp	r0, #3
 8018d64:	f200 82d3 	bhi.w	801930e <report_settings_detail+0x5ca>
 8018d68:	e8df f010 	tbh	[pc, r0, lsl #1]
 8018d6c:	00040132 	.word	0x00040132
 8018d70:	01fa01c3 	.word	0x01fa01c3
                hal.stream.write(ASCII_EOL "$");
 8018d74:	4f81      	ldr	r7, [pc, #516]	@ (8018f7c <report_settings_detail+0x238>)
 8018d76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018d7a:	4881      	ldr	r0, [pc, #516]	@ (8018f80 <report_settings_detail+0x23c>)
 8018d7c:	4798      	blx	r3
                hal.stream.write(uitoa(setting->id + offset));
 8018d7e:	f8d7 80b4 	ldr.w	r8, [r7, #180]	@ 0xb4
 8018d82:	8820      	ldrh	r0, [r4, #0]
 8018d84:	4428      	add	r0, r5
 8018d86:	f7fc fe1b 	bl	80159c0 <uitoa>
 8018d8a:	47c0      	blx	r8
                hal.stream.write(": ");
 8018d8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018d90:	487c      	ldr	r0, [pc, #496]	@ (8018f84 <report_settings_detail+0x240>)
 8018d92:	4798      	blx	r3
                if(setting->group == Group_Axis0)
 8018d94:	78a3      	ldrb	r3, [r4, #2]
 8018d96:	2b2b      	cmp	r3, #43	@ 0x2b
 8018d98:	d010      	beq.n	8018dbc <report_settings_detail+0x78>
                write_name(setting->name, suboffset);
 8018d9a:	4631      	mov	r1, r6
 8018d9c:	6860      	ldr	r0, [r4, #4]
 8018d9e:	f7ff ffab 	bl	8018cf8 <write_name>
                switch(setting_datatype_to_external(setting->datatype)) {
 8018da2:	7b20      	ldrb	r0, [r4, #12]
 8018da4:	f004 fed3 	bl	801db4e <setting_datatype_to_external>
 8018da8:	2809      	cmp	r0, #9
 8018daa:	f200 8087 	bhi.w	8018ebc <report_settings_detail+0x178>
 8018dae:	e8df f000 	tbb	[pc, r0]
 8018db2:	5d56      	.short	0x5d56
 8018db4:	850c7368 	.word	0x850c7368
 8018db8:	7e858585 	.word	0x7e858585
                    hal.stream.write(axis_letter[offset]);
 8018dbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018dc0:	4a71      	ldr	r2, [pc, #452]	@ (8018f88 <report_settings_detail+0x244>)
 8018dc2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018dc6:	4798      	blx	r3
 8018dc8:	e7e7      	b.n	8018d9a <report_settings_detail+0x56>
                        hal.stream.write(" as axismask");
 8018dca:	4b6c      	ldr	r3, [pc, #432]	@ (8018f7c <report_settings_detail+0x238>)
 8018dcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018dd0:	486e      	ldr	r0, [pc, #440]	@ (8018f8c <report_settings_detail+0x248>)
 8018dd2:	4798      	blx	r3
                bool reboot_newline = false;
 8018dd4:	2700      	movs	r7, #0
                if(setting->min_value && setting->max_value) {
 8018dd6:	6963      	ldr	r3, [r4, #20]
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d07e      	beq.n	8018eda <report_settings_detail+0x196>
 8018ddc:	69a3      	ldr	r3, [r4, #24]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d07b      	beq.n	8018eda <report_settings_detail+0x196>
                    hal.stream.write(", range: ");
 8018de2:	4e66      	ldr	r6, [pc, #408]	@ (8018f7c <report_settings_detail+0x238>)
 8018de4:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018de8:	4869      	ldr	r0, [pc, #420]	@ (8018f90 <report_settings_detail+0x24c>)
 8018dea:	4798      	blx	r3
                    hal.stream.write(setting->min_value);
 8018dec:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018df0:	6960      	ldr	r0, [r4, #20]
 8018df2:	4798      	blx	r3
                    hal.stream.write(" - ");
 8018df4:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018df8:	4866      	ldr	r0, [pc, #408]	@ (8018f94 <report_settings_detail+0x250>)
 8018dfa:	4798      	blx	r3
                    hal.stream.write(setting->max_value);
 8018dfc:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018e00:	69a0      	ldr	r0, [r4, #24]
 8018e02:	4798      	blx	r3
                if(setting->flags.reboot_required)
 8018e04:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018e08:	f013 0f01 	tst.w	r3, #1
 8018e0c:	d006      	beq.n	8018e1c <report_settings_detail+0xd8>
                    hal.stream.write(reboot_newline ? ASCII_EOL ASCII_EOL "Reboot required." : ", reboot required");
 8018e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8018f7c <report_settings_detail+0x238>)
 8018e10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018e14:	2f00      	cmp	r7, #0
 8018e16:	d07d      	beq.n	8018f14 <report_settings_detail+0x1d0>
 8018e18:	485f      	ldr	r0, [pc, #380]	@ (8018f98 <report_settings_detail+0x254>)
 8018e1a:	4798      	blx	r3
                if(hal.stream.write_n) {
 8018e1c:	4b57      	ldr	r3, [pc, #348]	@ (8018f7c <report_settings_detail+0x238>)
 8018e1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	f000 8273 	beq.w	801930e <report_settings_detail+0x5ca>
                    const char *description = setting_get_description((setting_id_t)(setting->id + offset));
 8018e28:	8820      	ldrh	r0, [r4, #0]
 8018e2a:	fa10 f085 	uxtah	r0, r0, r5
 8018e2e:	b280      	uxth	r0, r0
 8018e30:	f004 fdde 	bl	801d9f0 <setting_get_description>
                    if(description && *description != '\0') {
 8018e34:	4606      	mov	r6, r0
 8018e36:	2800      	cmp	r0, #0
 8018e38:	f000 808c 	beq.w	8018f54 <report_settings_detail+0x210>
 8018e3c:	7803      	ldrb	r3, [r0, #0]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	f000 8088 	beq.w	8018f54 <report_settings_detail+0x210>
                        hal.stream.write(ASCII_EOL);
 8018e44:	4b4d      	ldr	r3, [pc, #308]	@ (8018f7c <report_settings_detail+0x238>)
 8018e46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018e4a:	4854      	ldr	r0, [pc, #336]	@ (8018f9c <report_settings_detail+0x258>)
 8018e4c:	4798      	blx	r3
                        if((lf = strstr(description, "\\n"))) while(lf) {
 8018e4e:	4954      	ldr	r1, [pc, #336]	@ (8018fa0 <report_settings_detail+0x25c>)
 8018e50:	4630      	mov	r0, r6
 8018e52:	f00c f827 	bl	8024ea4 <strstr>
 8018e56:	4605      	mov	r5, r0
 8018e58:	2800      	cmp	r0, #0
 8018e5a:	d16e      	bne.n	8018f3a <report_settings_detail+0x1f6>
 8018e5c:	e06f      	b.n	8018f3e <report_settings_detail+0x1fa>
                        hal.stream.write(" as boolean");
 8018e5e:	4b47      	ldr	r3, [pc, #284]	@ (8018f7c <report_settings_detail+0x238>)
 8018e60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018e64:	484f      	ldr	r0, [pc, #316]	@ (8018fa4 <report_settings_detail+0x260>)
 8018e66:	4798      	blx	r3
                bool reboot_newline = false;
 8018e68:	2700      	movs	r7, #0
                        break;
 8018e6a:	e7b4      	b.n	8018dd6 <report_settings_detail+0x92>
                        hal.stream.write(" as bitfield:");
 8018e6c:	4b43      	ldr	r3, [pc, #268]	@ (8018f7c <report_settings_detail+0x238>)
 8018e6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018e72:	484d      	ldr	r0, [pc, #308]	@ (8018fa8 <report_settings_detail+0x264>)
 8018e74:	4798      	blx	r3
                        report_bitfield(setting->format, true);
 8018e76:	2101      	movs	r1, #1
 8018e78:	6920      	ldr	r0, [r4, #16]
 8018e7a:	f7ff fecd 	bl	8018c18 <report_bitfield>
                        reboot_newline = true;
 8018e7e:	2701      	movs	r7, #1
                        break;
 8018e80:	e7a9      	b.n	8018dd6 <report_settings_detail+0x92>
                        hal.stream.write(" as bitfield where setting bit 0 enables the rest:");
 8018e82:	4b3e      	ldr	r3, [pc, #248]	@ (8018f7c <report_settings_detail+0x238>)
 8018e84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018e88:	4848      	ldr	r0, [pc, #288]	@ (8018fac <report_settings_detail+0x268>)
 8018e8a:	4798      	blx	r3
                        report_bitfield(setting->format, true);
 8018e8c:	2101      	movs	r1, #1
 8018e8e:	6920      	ldr	r0, [r4, #16]
 8018e90:	f7ff fec2 	bl	8018c18 <report_bitfield>
                        reboot_newline = true;
 8018e94:	2701      	movs	r7, #1
                        break;
 8018e96:	e79e      	b.n	8018dd6 <report_settings_detail+0x92>
                        hal.stream.write(":");
 8018e98:	4b38      	ldr	r3, [pc, #224]	@ (8018f7c <report_settings_detail+0x238>)
 8018e9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018e9e:	4844      	ldr	r0, [pc, #272]	@ (8018fb0 <report_settings_detail+0x26c>)
 8018ea0:	4798      	blx	r3
                        report_bitfield(setting->format, false);
 8018ea2:	2100      	movs	r1, #0
 8018ea4:	6920      	ldr	r0, [r4, #16]
 8018ea6:	f7ff feb7 	bl	8018c18 <report_bitfield>
                        reboot_newline = true;
 8018eaa:	2701      	movs	r7, #1
                        break;
 8018eac:	e793      	b.n	8018dd6 <report_settings_detail+0x92>
                        hal.stream.write(" as IP address");
 8018eae:	4b33      	ldr	r3, [pc, #204]	@ (8018f7c <report_settings_detail+0x238>)
 8018eb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018eb4:	483f      	ldr	r0, [pc, #252]	@ (8018fb4 <report_settings_detail+0x270>)
 8018eb6:	4798      	blx	r3
                bool reboot_newline = false;
 8018eb8:	2700      	movs	r7, #0
                        break;
 8018eba:	e78c      	b.n	8018dd6 <report_settings_detail+0x92>
                        if(setting->unit) {
 8018ebc:	68a3      	ldr	r3, [r4, #8]
 8018ebe:	b153      	cbz	r3, 8018ed6 <report_settings_detail+0x192>
                            hal.stream.write(" in ");
 8018ec0:	4e2e      	ldr	r6, [pc, #184]	@ (8018f7c <report_settings_detail+0x238>)
 8018ec2:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018ec6:	483c      	ldr	r0, [pc, #240]	@ (8018fb8 <report_settings_detail+0x274>)
 8018ec8:	4798      	blx	r3
                            hal.stream.write(setting->unit);
 8018eca:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018ece:	68a0      	ldr	r0, [r4, #8]
 8018ed0:	4798      	blx	r3
                bool reboot_newline = false;
 8018ed2:	2700      	movs	r7, #0
 8018ed4:	e77f      	b.n	8018dd6 <report_settings_detail+0x92>
 8018ed6:	2700      	movs	r7, #0
 8018ed8:	e77d      	b.n	8018dd6 <report_settings_detail+0x92>
                } else if(!setting_is_list(setting)) {
 8018eda:	4620      	mov	r0, r4
 8018edc:	f004 fe3e 	bl	801db5c <setting_is_list>
 8018ee0:	2800      	cmp	r0, #0
 8018ee2:	d18f      	bne.n	8018e04 <report_settings_detail+0xc0>
                    if(setting->min_value) {
 8018ee4:	6963      	ldr	r3, [r4, #20]
 8018ee6:	b143      	cbz	r3, 8018efa <report_settings_detail+0x1b6>
                        hal.stream.write(", min: ");
 8018ee8:	4e24      	ldr	r6, [pc, #144]	@ (8018f7c <report_settings_detail+0x238>)
 8018eea:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018eee:	4833      	ldr	r0, [pc, #204]	@ (8018fbc <report_settings_detail+0x278>)
 8018ef0:	4798      	blx	r3
                        hal.stream.write(setting->min_value);
 8018ef2:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018ef6:	6960      	ldr	r0, [r4, #20]
 8018ef8:	4798      	blx	r3
                    if(setting->max_value) {
 8018efa:	69a3      	ldr	r3, [r4, #24]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d081      	beq.n	8018e04 <report_settings_detail+0xc0>
                        hal.stream.write(", max: ");
 8018f00:	4e1e      	ldr	r6, [pc, #120]	@ (8018f7c <report_settings_detail+0x238>)
 8018f02:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018f06:	482e      	ldr	r0, [pc, #184]	@ (8018fc0 <report_settings_detail+0x27c>)
 8018f08:	4798      	blx	r3
                        hal.stream.write(setting->max_value);
 8018f0a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018f0e:	69a0      	ldr	r0, [r4, #24]
 8018f10:	4798      	blx	r3
 8018f12:	e777      	b.n	8018e04 <report_settings_detail+0xc0>
                    hal.stream.write(reboot_newline ? ASCII_EOL ASCII_EOL "Reboot required." : ", reboot required");
 8018f14:	482b      	ldr	r0, [pc, #172]	@ (8018fc4 <report_settings_detail+0x280>)
 8018f16:	e780      	b.n	8018e1a <report_settings_detail+0xd6>
                            hal.stream.write(ASCII_EOL);
 8018f18:	4f18      	ldr	r7, [pc, #96]	@ (8018f7c <report_settings_detail+0x238>)
 8018f1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018f1e:	481f      	ldr	r0, [pc, #124]	@ (8018f9c <report_settings_detail+0x258>)
 8018f20:	4798      	blx	r3
                            hal.stream.write_n(description, lf - description);
 8018f22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8018f26:	1ba9      	subs	r1, r5, r6
 8018f28:	b289      	uxth	r1, r1
 8018f2a:	4630      	mov	r0, r6
 8018f2c:	4798      	blx	r3
                            description = lf + 2;
 8018f2e:	1cae      	adds	r6, r5, #2
                            lf = strstr(description, "\\n");
 8018f30:	491b      	ldr	r1, [pc, #108]	@ (8018fa0 <report_settings_detail+0x25c>)
 8018f32:	4630      	mov	r0, r6
 8018f34:	f00b ffb6 	bl	8024ea4 <strstr>
 8018f38:	4605      	mov	r5, r0
                        if((lf = strstr(description, "\\n"))) while(lf) {
 8018f3a:	2d00      	cmp	r5, #0
 8018f3c:	d1ec      	bne.n	8018f18 <report_settings_detail+0x1d4>
                        if(*description != '\0') {
 8018f3e:	7833      	ldrb	r3, [r6, #0]
 8018f40:	b143      	cbz	r3, 8018f54 <report_settings_detail+0x210>
                            hal.stream.write(ASCII_EOL);
 8018f42:	4d0e      	ldr	r5, [pc, #56]	@ (8018f7c <report_settings_detail+0x238>)
 8018f44:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018f48:	4814      	ldr	r0, [pc, #80]	@ (8018f9c <report_settings_detail+0x258>)
 8018f4a:	4798      	blx	r3
                            hal.stream.write(description);
 8018f4c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018f50:	4630      	mov	r0, r6
 8018f52:	4798      	blx	r3
                    if(setting->flags.reboot_required) {
 8018f54:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018f58:	f013 0f01 	tst.w	r3, #1
 8018f5c:	f000 81d7 	beq.w	801930e <report_settings_detail+0x5ca>
                        if(description && *description != '\0')
 8018f60:	b136      	cbz	r6, 8018f70 <report_settings_detail+0x22c>
 8018f62:	7833      	ldrb	r3, [r6, #0]
 8018f64:	b123      	cbz	r3, 8018f70 <report_settings_detail+0x22c>
                            hal.stream.write(ASCII_EOL ASCII_EOL);
 8018f66:	4b05      	ldr	r3, [pc, #20]	@ (8018f7c <report_settings_detail+0x238>)
 8018f68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018f6c:	4816      	ldr	r0, [pc, #88]	@ (8018fc8 <report_settings_detail+0x284>)
 8018f6e:	4798      	blx	r3
                        hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + 4);
 8018f70:	4b02      	ldr	r3, [pc, #8]	@ (8018f7c <report_settings_detail+0x238>)
 8018f72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018f76:	4815      	ldr	r0, [pc, #84]	@ (8018fcc <report_settings_detail+0x288>)
 8018f78:	4798      	blx	r3
 8018f7a:	e1c8      	b.n	801930e <report_settings_detail+0x5ca>
 8018f7c:	20001a90 	.word	0x20001a90
 8018f80:	0802c09c 	.word	0x0802c09c
 8018f84:	0802c25c 	.word	0x0802c25c
 8018f88:	0802be3c 	.word	0x0802be3c
 8018f8c:	0802c0a0 	.word	0x0802c0a0
 8018f90:	0802c118 	.word	0x0802c118
 8018f94:	0802bff4 	.word	0x0802bff4
 8018f98:	0802c01c 	.word	0x0802c01c
 8018f9c:	0802c680 	.word	0x0802c680
 8018fa0:	0802c134 	.word	0x0802c134
 8018fa4:	0802c0b0 	.word	0x0802c0b0
 8018fa8:	0802c0bc 	.word	0x0802c0bc
 8018fac:	0802c0cc 	.word	0x0802c0cc
 8018fb0:	0802c33c 	.word	0x0802c33c
 8018fb4:	0802c100 	.word	0x0802c100
 8018fb8:	0802c110 	.word	0x0802c110
 8018fbc:	0802c124 	.word	0x0802c124
 8018fc0:	0802c12c 	.word	0x0802c12c
 8018fc4:	0802c034 	.word	0x0802c034
 8018fc8:	0802c138 	.word	0x0802c138
 8018fcc:	0802c04c 	.word	0x0802c04c
            hal.stream.write("[SETTING:");
 8018fd0:	4f8f      	ldr	r7, [pc, #572]	@ (8019210 <report_settings_detail+0x4cc>)
 8018fd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018fd6:	488f      	ldr	r0, [pc, #572]	@ (8019214 <report_settings_detail+0x4d0>)
 8018fd8:	4798      	blx	r3
            hal.stream.write(uitoa(setting->id + offset));
 8018fda:	f8d7 80b4 	ldr.w	r8, [r7, #180]	@ 0xb4
 8018fde:	8820      	ldrh	r0, [r4, #0]
 8018fe0:	4428      	add	r0, r5
 8018fe2:	f7fc fced 	bl	80159c0 <uitoa>
 8018fe6:	47c0      	blx	r8
            hal.stream.write(vbar);
 8018fe8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018fec:	488a      	ldr	r0, [pc, #552]	@ (8019218 <report_settings_detail+0x4d4>)
 8018fee:	4798      	blx	r3
            hal.stream.write(uitoa(setting->group + (setting->flags.subgroups ? suboffset : 0)));
 8018ff0:	f8d7 70b4 	ldr.w	r7, [r7, #180]	@ 0xb4
 8018ff4:	78a0      	ldrb	r0, [r4, #2]
 8018ff6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018ffa:	f013 0f04 	tst.w	r3, #4
 8018ffe:	d06e      	beq.n	80190de <report_settings_detail+0x39a>
 8019000:	4633      	mov	r3, r6
 8019002:	4418      	add	r0, r3
 8019004:	f7fc fcdc 	bl	80159c0 <uitoa>
 8019008:	47b8      	blx	r7
            hal.stream.write(vbar);
 801900a:	4b81      	ldr	r3, [pc, #516]	@ (8019210 <report_settings_detail+0x4cc>)
 801900c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019010:	4881      	ldr	r0, [pc, #516]	@ (8019218 <report_settings_detail+0x4d4>)
 8019012:	4798      	blx	r3
            if(setting->group == Group_Axis0)
 8019014:	78a3      	ldrb	r3, [r4, #2]
 8019016:	2b2b      	cmp	r3, #43	@ 0x2b
 8019018:	d063      	beq.n	80190e2 <report_settings_detail+0x39e>
            write_name(setting->name, suboffset);
 801901a:	4631      	mov	r1, r6
 801901c:	6860      	ldr	r0, [r4, #4]
 801901e:	f7ff fe6b 	bl	8018cf8 <write_name>
            hal.stream.write(vbar);
 8019022:	4b7b      	ldr	r3, [pc, #492]	@ (8019210 <report_settings_detail+0x4cc>)
 8019024:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019028:	487b      	ldr	r0, [pc, #492]	@ (8019218 <report_settings_detail+0x4d4>)
 801902a:	4798      	blx	r3
            if(setting->unit)
 801902c:	68a0      	ldr	r0, [r4, #8]
 801902e:	b118      	cbz	r0, 8019038 <report_settings_detail+0x2f4>
                hal.stream.write(setting->unit);
 8019030:	4b77      	ldr	r3, [pc, #476]	@ (8019210 <report_settings_detail+0x4cc>)
 8019032:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019036:	4798      	blx	r3
            hal.stream.write(vbar);
 8019038:	4d75      	ldr	r5, [pc, #468]	@ (8019210 <report_settings_detail+0x4cc>)
 801903a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801903e:	4e76      	ldr	r6, [pc, #472]	@ (8019218 <report_settings_detail+0x4d4>)
 8019040:	4630      	mov	r0, r6
 8019042:	4798      	blx	r3
            hal.stream.write(uitoa(setting_datatype_to_external(setting->datatype)));
 8019044:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 8019048:	7b20      	ldrb	r0, [r4, #12]
 801904a:	f004 fd80 	bl	801db4e <setting_datatype_to_external>
 801904e:	f7fc fcb7 	bl	80159c0 <uitoa>
 8019052:	47b8      	blx	r7
            hal.stream.write(vbar);
 8019054:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019058:	4630      	mov	r0, r6
 801905a:	4798      	blx	r3
            if(setting->format)
 801905c:	6920      	ldr	r0, [r4, #16]
 801905e:	b110      	cbz	r0, 8019066 <report_settings_detail+0x322>
                hal.stream.write(setting->format);
 8019060:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019064:	4798      	blx	r3
            hal.stream.write(vbar);
 8019066:	4b6a      	ldr	r3, [pc, #424]	@ (8019210 <report_settings_detail+0x4cc>)
 8019068:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801906c:	486a      	ldr	r0, [pc, #424]	@ (8019218 <report_settings_detail+0x4d4>)
 801906e:	4798      	blx	r3
            if(setting->min_value && !setting_is_list(setting))
 8019070:	6963      	ldr	r3, [r4, #20]
 8019072:	b143      	cbz	r3, 8019086 <report_settings_detail+0x342>
 8019074:	4620      	mov	r0, r4
 8019076:	f004 fd71 	bl	801db5c <setting_is_list>
 801907a:	b920      	cbnz	r0, 8019086 <report_settings_detail+0x342>
                hal.stream.write(setting->min_value);
 801907c:	4b64      	ldr	r3, [pc, #400]	@ (8019210 <report_settings_detail+0x4cc>)
 801907e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019082:	6960      	ldr	r0, [r4, #20]
 8019084:	4798      	blx	r3
            hal.stream.write(vbar);
 8019086:	4b62      	ldr	r3, [pc, #392]	@ (8019210 <report_settings_detail+0x4cc>)
 8019088:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801908c:	4862      	ldr	r0, [pc, #392]	@ (8019218 <report_settings_detail+0x4d4>)
 801908e:	4798      	blx	r3
            if(setting->max_value)
 8019090:	69a0      	ldr	r0, [r4, #24]
 8019092:	b118      	cbz	r0, 801909c <report_settings_detail+0x358>
                hal.stream.write(setting->max_value);
 8019094:	4b5e      	ldr	r3, [pc, #376]	@ (8019210 <report_settings_detail+0x4cc>)
 8019096:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801909a:	4798      	blx	r3
            hal.stream.write(vbar);
 801909c:	4d5c      	ldr	r5, [pc, #368]	@ (8019210 <report_settings_detail+0x4cc>)
 801909e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80190a2:	4e5d      	ldr	r6, [pc, #372]	@ (8019218 <report_settings_detail+0x4d4>)
 80190a4:	4630      	mov	r0, r6
 80190a6:	4798      	blx	r3
            hal.stream.write(uitoa(setting->flags.reboot_required));
 80190a8:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 80190ac:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80190b0:	f000 0001 	and.w	r0, r0, #1
 80190b4:	f7fc fc84 	bl	80159c0 <uitoa>
 80190b8:	47b8      	blx	r7
            hal.stream.write(vbar);
 80190ba:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80190be:	4630      	mov	r0, r6
 80190c0:	4798      	blx	r3
            hal.stream.write(uitoa(setting->flags.allow_null));
 80190c2:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 80190c6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80190ca:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80190ce:	f7fc fc77 	bl	80159c0 <uitoa>
 80190d2:	47b0      	blx	r6
            hal.stream.write("]");
 80190d4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80190d8:	4850      	ldr	r0, [pc, #320]	@ (801921c <report_settings_detail+0x4d8>)
 80190da:	4798      	blx	r3
            break;
 80190dc:	e117      	b.n	801930e <report_settings_detail+0x5ca>
            hal.stream.write(uitoa(setting->group + (setting->flags.subgroups ? suboffset : 0)));
 80190de:	2300      	movs	r3, #0
 80190e0:	e78f      	b.n	8019002 <report_settings_detail+0x2be>
                hal.stream.write(axis_letter[offset]);
 80190e2:	4b4b      	ldr	r3, [pc, #300]	@ (8019210 <report_settings_detail+0x4cc>)
 80190e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80190e8:	4a4d      	ldr	r2, [pc, #308]	@ (8019220 <report_settings_detail+0x4dc>)
 80190ea:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80190ee:	4798      	blx	r3
 80190f0:	e793      	b.n	801901a <report_settings_detail+0x2d6>
                write_quoted(uitoa(setting->id + offset), ",");
 80190f2:	8820      	ldrh	r0, [r4, #0]
 80190f4:	4428      	add	r0, r5
 80190f6:	f7fc fc63 	bl	80159c0 <uitoa>
 80190fa:	494a      	ldr	r1, [pc, #296]	@ (8019224 <report_settings_detail+0x4e0>)
 80190fc:	f7ff f9c4 	bl	8018488 <write_quoted>
                hal.stream.write("\"");
 8019100:	4b43      	ldr	r3, [pc, #268]	@ (8019210 <report_settings_detail+0x4cc>)
 8019102:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019106:	4848      	ldr	r0, [pc, #288]	@ (8019228 <report_settings_detail+0x4e4>)
 8019108:	4798      	blx	r3
                if(setting->group == Group_Axis0)
 801910a:	78a3      	ldrb	r3, [r4, #2]
 801910c:	2b2b      	cmp	r3, #43	@ 0x2b
 801910e:	d018      	beq.n	8019142 <report_settings_detail+0x3fe>
                write_name(setting->name, suboffset);
 8019110:	4631      	mov	r1, r6
 8019112:	6860      	ldr	r0, [r4, #4]
 8019114:	f7ff fdf0 	bl	8018cf8 <write_name>
                hal.stream.write("\",");
 8019118:	4b3d      	ldr	r3, [pc, #244]	@ (8019210 <report_settings_detail+0x4cc>)
 801911a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801911e:	4843      	ldr	r0, [pc, #268]	@ (801922c <report_settings_detail+0x4e8>)
 8019120:	4798      	blx	r3
                if(setting->unit) {
 8019122:	68a0      	ldr	r0, [r4, #8]
 8019124:	b1a8      	cbz	r0, 8019152 <report_settings_detail+0x40e>
                    write_quoted(setting->unit, ",");
 8019126:	493f      	ldr	r1, [pc, #252]	@ (8019224 <report_settings_detail+0x4e0>)
 8019128:	f7ff f9ae 	bl	8018488 <write_quoted>
                const char *description = setting_get_description((setting_id_t)(setting->id + offset));
 801912c:	8820      	ldrh	r0, [r4, #0]
 801912e:	fa10 f085 	uxtah	r0, r0, r5
 8019132:	b280      	uxth	r0, r0
 8019134:	f004 fc5c 	bl	801d9f0 <setting_get_description>
                write_quoted(description ? description : "", ",");
 8019138:	b180      	cbz	r0, 801915c <report_settings_detail+0x418>
 801913a:	493a      	ldr	r1, [pc, #232]	@ (8019224 <report_settings_detail+0x4e0>)
 801913c:	f7ff f9a4 	bl	8018488 <write_quoted>
            break;
 8019140:	e0e5      	b.n	801930e <report_settings_detail+0x5ca>
                    hal.stream.write(axis_letter[offset]);
 8019142:	4b33      	ldr	r3, [pc, #204]	@ (8019210 <report_settings_detail+0x4cc>)
 8019144:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019148:	4a35      	ldr	r2, [pc, #212]	@ (8019220 <report_settings_detail+0x4dc>)
 801914a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801914e:	4798      	blx	r3
 8019150:	e7de      	b.n	8019110 <report_settings_detail+0x3cc>
                    write_quoted("", ",");
 8019152:	4934      	ldr	r1, [pc, #208]	@ (8019224 <report_settings_detail+0x4e0>)
 8019154:	4836      	ldr	r0, [pc, #216]	@ (8019230 <report_settings_detail+0x4ec>)
 8019156:	f7ff f997 	bl	8018488 <write_quoted>
 801915a:	e7e7      	b.n	801912c <report_settings_detail+0x3e8>
                write_quoted(description ? description : "", ",");
 801915c:	4834      	ldr	r0, [pc, #208]	@ (8019230 <report_settings_detail+0x4ec>)
 801915e:	e7ec      	b.n	801913a <report_settings_detail+0x3f6>
                hal.stream.write(uitoa(setting->id + offset));
 8019160:	4f2b      	ldr	r7, [pc, #172]	@ (8019210 <report_settings_detail+0x4cc>)
 8019162:	f8d7 80b4 	ldr.w	r8, [r7, #180]	@ 0xb4
 8019166:	8820      	ldrh	r0, [r4, #0]
 8019168:	4428      	add	r0, r5
 801916a:	f7fc fc29 	bl	80159c0 <uitoa>
 801916e:	47c0      	blx	r8
                hal.stream.write("\t");
 8019170:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019174:	482f      	ldr	r0, [pc, #188]	@ (8019234 <report_settings_detail+0x4f0>)
 8019176:	4798      	blx	r3
                if(setting->group == Group_Axis0)
 8019178:	78a3      	ldrb	r3, [r4, #2]
 801917a:	2b2b      	cmp	r3, #43	@ 0x2b
 801917c:	d024      	beq.n	80191c8 <report_settings_detail+0x484>
                write_name(setting->name, suboffset);
 801917e:	4631      	mov	r1, r6
 8019180:	6860      	ldr	r0, [r4, #4]
 8019182:	f7ff fdb9 	bl	8018cf8 <write_name>
                hal.stream.write("\t");
 8019186:	4b22      	ldr	r3, [pc, #136]	@ (8019210 <report_settings_detail+0x4cc>)
 8019188:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801918c:	4829      	ldr	r0, [pc, #164]	@ (8019234 <report_settings_detail+0x4f0>)
 801918e:	4798      	blx	r3
                if(setting->unit)
 8019190:	68a0      	ldr	r0, [r4, #8]
 8019192:	b300      	cbz	r0, 80191d6 <report_settings_detail+0x492>
                    hal.stream.write(setting->unit);
 8019194:	4b1e      	ldr	r3, [pc, #120]	@ (8019210 <report_settings_detail+0x4cc>)
 8019196:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801919a:	4798      	blx	r3
                hal.stream.write("\t");
 801919c:	4b1c      	ldr	r3, [pc, #112]	@ (8019210 <report_settings_detail+0x4cc>)
 801919e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80191a2:	4824      	ldr	r0, [pc, #144]	@ (8019234 <report_settings_detail+0x4f0>)
 80191a4:	4798      	blx	r3
                switch(setting_datatype_to_external(setting->datatype)) {
 80191a6:	7b20      	ldrb	r0, [r4, #12]
 80191a8:	f004 fcd1 	bl	801db4e <setting_datatype_to_external>
 80191ac:	2809      	cmp	r0, #9
 80191ae:	d84e      	bhi.n	801924e <report_settings_detail+0x50a>
 80191b0:	e8df f010 	tbh	[pc, r0, lsl #1]
 80191b4:	00c000ba 	.word	0x00c000ba
 80191b8:	00cc00c6 	.word	0x00cc00c6
 80191bc:	004800c0 	.word	0x004800c0
 80191c0:	00d800b4 	.word	0x00d800b4
 80191c4:	00d200de 	.word	0x00d200de
                    hal.stream.write(axis_letter[offset]);
 80191c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80191cc:	4a14      	ldr	r2, [pc, #80]	@ (8019220 <report_settings_detail+0x4dc>)
 80191ce:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80191d2:	4798      	blx	r3
 80191d4:	e7d3      	b.n	801917e <report_settings_detail+0x43a>
                else if(setting->datatype == Format_AxisMask || setting->datatype == Format_Bitfield || setting->datatype == Format_XBitfield)
 80191d6:	7b23      	ldrb	r3, [r4, #12]
 80191d8:	2b04      	cmp	r3, #4
 80191da:	d00a      	beq.n	80191f2 <report_settings_detail+0x4ae>
 80191dc:	2b01      	cmp	r3, #1
 80191de:	d008      	beq.n	80191f2 <report_settings_detail+0x4ae>
 80191e0:	2b02      	cmp	r3, #2
 80191e2:	d006      	beq.n	80191f2 <report_settings_detail+0x4ae>
                else if(setting->datatype == Format_Bool)
 80191e4:	b95b      	cbnz	r3, 80191fe <report_settings_detail+0x4ba>
                    hal.stream.write("boolean");
 80191e6:	4b0a      	ldr	r3, [pc, #40]	@ (8019210 <report_settings_detail+0x4cc>)
 80191e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80191ec:	4812      	ldr	r0, [pc, #72]	@ (8019238 <report_settings_detail+0x4f4>)
 80191ee:	4798      	blx	r3
 80191f0:	e7d4      	b.n	801919c <report_settings_detail+0x458>
                    hal.stream.write("mask");
 80191f2:	4b07      	ldr	r3, [pc, #28]	@ (8019210 <report_settings_detail+0x4cc>)
 80191f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80191f8:	4810      	ldr	r0, [pc, #64]	@ (801923c <report_settings_detail+0x4f8>)
 80191fa:	4798      	blx	r3
 80191fc:	e7ce      	b.n	801919c <report_settings_detail+0x458>
                else if(setting->datatype == Format_RadioButtons)
 80191fe:	2b03      	cmp	r3, #3
 8019200:	d1cc      	bne.n	801919c <report_settings_detail+0x458>
                    hal.stream.write("integer");
 8019202:	4b03      	ldr	r3, [pc, #12]	@ (8019210 <report_settings_detail+0x4cc>)
 8019204:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019208:	480d      	ldr	r0, [pc, #52]	@ (8019240 <report_settings_detail+0x4fc>)
 801920a:	4798      	blx	r3
 801920c:	e7c6      	b.n	801919c <report_settings_detail+0x458>
 801920e:	bf00      	nop
 8019210:	20001a90 	.word	0x20001a90
 8019214:	0802c140 	.word	0x0802c140
 8019218:	0802c7fc 	.word	0x0802c7fc
 801921c:	0802c14c 	.word	0x0802c14c
 8019220:	0802be3c 	.word	0x0802be3c
 8019224:	0802c400 	.word	0x0802c400
 8019228:	0802bf98 	.word	0x0802bf98
 801922c:	0802c150 	.word	0x0802c150
 8019230:	0802c13c 	.word	0x0802c13c
 8019234:	0802c154 	.word	0x0802c154
 8019238:	0802c0b4 	.word	0x0802c0b4
 801923c:	0802c0a8 	.word	0x0802c0a8
 8019240:	0802c158 	.word	0x0802c158
                        hal.stream.write("integer");
 8019244:	4b55      	ldr	r3, [pc, #340]	@ (801939c <report_settings_detail+0x658>)
 8019246:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801924a:	4855      	ldr	r0, [pc, #340]	@ (80193a0 <report_settings_detail+0x65c>)
 801924c:	4798      	blx	r3
                hal.stream.write("\t");
 801924e:	4b53      	ldr	r3, [pc, #332]	@ (801939c <report_settings_detail+0x658>)
 8019250:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019254:	4853      	ldr	r0, [pc, #332]	@ (80193a4 <report_settings_detail+0x660>)
 8019256:	4798      	blx	r3
                if(setting->format)
 8019258:	6920      	ldr	r0, [r4, #16]
 801925a:	2800      	cmp	r0, #0
 801925c:	f000 808e 	beq.w	801937c <report_settings_detail+0x638>
                    hal.stream.write(setting->format);
 8019260:	4b4e      	ldr	r3, [pc, #312]	@ (801939c <report_settings_detail+0x658>)
 8019262:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019266:	4798      	blx	r3
                hal.stream.write("\t");
 8019268:	4e4c      	ldr	r6, [pc, #304]	@ (801939c <report_settings_detail+0x658>)
 801926a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801926e:	484d      	ldr	r0, [pc, #308]	@ (80193a4 <report_settings_detail+0x660>)
 8019270:	4798      	blx	r3
                const char *description = setting_get_description((setting_id_t)(setting->id + offset));
 8019272:	8823      	ldrh	r3, [r4, #0]
 8019274:	fa13 f085 	uxtah	r0, r3, r5
 8019278:	b280      	uxth	r0, r0
 801927a:	f004 fbb9 	bl	801d9f0 <setting_get_description>
                hal.stream.write(description ? description : "");
 801927e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8019282:	4605      	mov	r5, r0
 8019284:	2800      	cmp	r0, #0
 8019286:	f000 8083 	beq.w	8019390 <report_settings_detail+0x64c>
 801928a:	4798      	blx	r3
                if(setting->flags.reboot_required)
 801928c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019290:	f013 0f01 	tst.w	r3, #1
 8019294:	d009      	beq.n	80192aa <report_settings_detail+0x566>
                    hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + (description && *description != '\0' ? 0 : 4));
 8019296:	4b41      	ldr	r3, [pc, #260]	@ (801939c <report_settings_detail+0x658>)
 8019298:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801929c:	2d00      	cmp	r5, #0
 801929e:	d079      	beq.n	8019394 <report_settings_detail+0x650>
 80192a0:	782a      	ldrb	r2, [r5, #0]
 80192a2:	2a00      	cmp	r2, #0
 80192a4:	d178      	bne.n	8019398 <report_settings_detail+0x654>
 80192a6:	4840      	ldr	r0, [pc, #256]	@ (80193a8 <report_settings_detail+0x664>)
 80192a8:	4798      	blx	r3
                hal.stream.write("\t");
 80192aa:	4b3c      	ldr	r3, [pc, #240]	@ (801939c <report_settings_detail+0x658>)
 80192ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80192b0:	483c      	ldr	r0, [pc, #240]	@ (80193a4 <report_settings_detail+0x660>)
 80192b2:	4798      	blx	r3
                if(setting->min_value)
 80192b4:	6960      	ldr	r0, [r4, #20]
 80192b6:	b118      	cbz	r0, 80192c0 <report_settings_detail+0x57c>
                    hal.stream.write(setting->min_value);
 80192b8:	4b38      	ldr	r3, [pc, #224]	@ (801939c <report_settings_detail+0x658>)
 80192ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80192be:	4798      	blx	r3
                hal.stream.write("\t");
 80192c0:	4b36      	ldr	r3, [pc, #216]	@ (801939c <report_settings_detail+0x658>)
 80192c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80192c6:	4837      	ldr	r0, [pc, #220]	@ (80193a4 <report_settings_detail+0x660>)
 80192c8:	4798      	blx	r3
                if(setting->max_value)
 80192ca:	69a0      	ldr	r0, [r4, #24]
 80192cc:	b118      	cbz	r0, 80192d6 <report_settings_detail+0x592>
                    hal.stream.write(setting->max_value);
 80192ce:	4b33      	ldr	r3, [pc, #204]	@ (801939c <report_settings_detail+0x658>)
 80192d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80192d4:	4798      	blx	r3
                hal.stream.write("\t");
 80192d6:	4d31      	ldr	r5, [pc, #196]	@ (801939c <report_settings_detail+0x658>)
 80192d8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80192dc:	4e31      	ldr	r6, [pc, #196]	@ (80193a4 <report_settings_detail+0x660>)
 80192de:	4630      	mov	r0, r6
 80192e0:	4798      	blx	r3
                hal.stream.write(uitoa(setting->flags.reboot_required));
 80192e2:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 80192e6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80192ea:	f000 0001 	and.w	r0, r0, #1
 80192ee:	f7fc fb67 	bl	80159c0 <uitoa>
 80192f2:	47b8      	blx	r7
                hal.stream.write("\t");
 80192f4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80192f8:	4630      	mov	r0, r6
 80192fa:	4798      	blx	r3
                hal.stream.write(uitoa(setting->flags.allow_null));
 80192fc:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 8019300:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8019304:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8019308:	f7fc fb5a 	bl	80159c0 <uitoa>
 801930c:	47a8      	blx	r5
    hal.stream.write(ASCII_EOL);
 801930e:	4b23      	ldr	r3, [pc, #140]	@ (801939c <report_settings_detail+0x658>)
 8019310:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019314:	4825      	ldr	r0, [pc, #148]	@ (80193ac <report_settings_detail+0x668>)
 8019316:	4798      	blx	r3
}
 8019318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        hal.stream.write("float");
 801931c:	4b1f      	ldr	r3, [pc, #124]	@ (801939c <report_settings_detail+0x658>)
 801931e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019322:	4823      	ldr	r0, [pc, #140]	@ (80193b0 <report_settings_detail+0x66c>)
 8019324:	4798      	blx	r3
                        break;
 8019326:	e792      	b.n	801924e <report_settings_detail+0x50a>
                        hal.stream.write("bool");
 8019328:	4b1c      	ldr	r3, [pc, #112]	@ (801939c <report_settings_detail+0x658>)
 801932a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801932e:	4821      	ldr	r0, [pc, #132]	@ (80193b4 <report_settings_detail+0x670>)
 8019330:	4798      	blx	r3
                        break;
 8019332:	e78c      	b.n	801924e <report_settings_detail+0x50a>
                        hal.stream.write("bitfield");
 8019334:	4b19      	ldr	r3, [pc, #100]	@ (801939c <report_settings_detail+0x658>)
 8019336:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801933a:	481f      	ldr	r0, [pc, #124]	@ (80193b8 <report_settings_detail+0x674>)
 801933c:	4798      	blx	r3
                        break;
 801933e:	e786      	b.n	801924e <report_settings_detail+0x50a>
                        hal.stream.write("xbitfield");
 8019340:	4b16      	ldr	r3, [pc, #88]	@ (801939c <report_settings_detail+0x658>)
 8019342:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019346:	481d      	ldr	r0, [pc, #116]	@ (80193bc <report_settings_detail+0x678>)
 8019348:	4798      	blx	r3
                        break;
 801934a:	e780      	b.n	801924e <report_settings_detail+0x50a>
                        hal.stream.write("radiobuttons");
 801934c:	4b13      	ldr	r3, [pc, #76]	@ (801939c <report_settings_detail+0x658>)
 801934e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019352:	481b      	ldr	r0, [pc, #108]	@ (80193c0 <report_settings_detail+0x67c>)
 8019354:	4798      	blx	r3
                        break;
 8019356:	e77a      	b.n	801924e <report_settings_detail+0x50a>
                        hal.stream.write("ipv4");
 8019358:	4b10      	ldr	r3, [pc, #64]	@ (801939c <report_settings_detail+0x658>)
 801935a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801935e:	4819      	ldr	r0, [pc, #100]	@ (80193c4 <report_settings_detail+0x680>)
 8019360:	4798      	blx	r3
                        break;
 8019362:	e774      	b.n	801924e <report_settings_detail+0x50a>
                        hal.stream.write("string");
 8019364:	4b0d      	ldr	r3, [pc, #52]	@ (801939c <report_settings_detail+0x658>)
 8019366:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801936a:	4817      	ldr	r0, [pc, #92]	@ (80193c8 <report_settings_detail+0x684>)
 801936c:	4798      	blx	r3
                        break;
 801936e:	e76e      	b.n	801924e <report_settings_detail+0x50a>
                        hal.stream.write("password");
 8019370:	4b0a      	ldr	r3, [pc, #40]	@ (801939c <report_settings_detail+0x658>)
 8019372:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019376:	4815      	ldr	r0, [pc, #84]	@ (80193cc <report_settings_detail+0x688>)
 8019378:	4798      	blx	r3
                        break;
 801937a:	e768      	b.n	801924e <report_settings_detail+0x50a>
                else if (setting->datatype == Format_AxisMask)
 801937c:	7b23      	ldrb	r3, [r4, #12]
 801937e:	2b04      	cmp	r3, #4
 8019380:	f47f af72 	bne.w	8019268 <report_settings_detail+0x524>
                    hal.stream.write("axes");
 8019384:	4b05      	ldr	r3, [pc, #20]	@ (801939c <report_settings_detail+0x658>)
 8019386:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801938a:	4811      	ldr	r0, [pc, #68]	@ (80193d0 <report_settings_detail+0x68c>)
 801938c:	4798      	blx	r3
 801938e:	e76b      	b.n	8019268 <report_settings_detail+0x524>
                hal.stream.write(description ? description : "");
 8019390:	4810      	ldr	r0, [pc, #64]	@ (80193d4 <report_settings_detail+0x690>)
 8019392:	e77a      	b.n	801928a <report_settings_detail+0x546>
                    hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + (description && *description != '\0' ? 0 : 4));
 8019394:	4804      	ldr	r0, [pc, #16]	@ (80193a8 <report_settings_detail+0x664>)
 8019396:	e787      	b.n	80192a8 <report_settings_detail+0x564>
 8019398:	480f      	ldr	r0, [pc, #60]	@ (80193d8 <report_settings_detail+0x694>)
 801939a:	e785      	b.n	80192a8 <report_settings_detail+0x564>
 801939c:	20001a90 	.word	0x20001a90
 80193a0:	0802c158 	.word	0x0802c158
 80193a4:	0802c154 	.word	0x0802c154
 80193a8:	0802c04c 	.word	0x0802c04c
 80193ac:	0802c680 	.word	0x0802c680
 80193b0:	0802c160 	.word	0x0802c160
 80193b4:	0802c168 	.word	0x0802c168
 80193b8:	0802c170 	.word	0x0802c170
 80193bc:	0802c17c 	.word	0x0802c17c
 80193c0:	0802c188 	.word	0x0802c188
 80193c4:	0802c198 	.word	0x0802c198
 80193c8:	08031130 	.word	0x08031130
 80193cc:	0802c1a0 	.word	0x0802c1a0
 80193d0:	0802c1ac 	.word	0x0802c1ac
 80193d4:	0802c13c 	.word	0x0802c13c
 80193d8:	0802c048 	.word	0x0802c048

080193dc <print_unsorted>:
{
 80193dc:	b570      	push	{r4, r5, r6, lr}
 80193de:	4604      	mov	r4, r0
 80193e0:	460e      	mov	r6, r1
 80193e2:	4615      	mov	r5, r2
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset) &&
 80193e4:	7850      	ldrb	r0, [r2, #1]
 80193e6:	78a3      	ldrb	r3, [r4, #2]
 80193e8:	4298      	cmp	r0, r3
 80193ea:	d00b      	beq.n	8019404 <print_unsorted+0x28>
       (setting->is_available == NULL ||setting->is_available(setting)))
 80193ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset) &&
 80193ee:	b113      	cbz	r3, 80193f6 <print_unsorted+0x1a>
       (setting->is_available == NULL ||setting->is_available(setting)))
 80193f0:	4620      	mov	r0, r4
 80193f2:	4798      	blx	r3
 80193f4:	b120      	cbz	r0, 8019400 <print_unsorted+0x24>
        report_settings_detail(((report_args_t *)args)->format, setting, offset);
 80193f6:	4632      	mov	r2, r6
 80193f8:	4621      	mov	r1, r4
 80193fa:	7828      	ldrb	r0, [r5, #0]
 80193fc:	f7ff fca2 	bl	8018d44 <report_settings_detail>
}
 8019400:	2001      	movs	r0, #1
 8019402:	bd70      	pop	{r4, r5, r6, pc}
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset) &&
 8019404:	6853      	ldr	r3, [r2, #4]
 8019406:	428b      	cmp	r3, r1
 8019408:	d1fa      	bne.n	8019400 <print_unsorted+0x24>
 801940a:	e7ef      	b.n	80193ec <print_unsorted+0x10>

0801940c <print_sorted>:
{
 801940c:	b508      	push	{r3, lr}
 801940e:	4613      	mov	r3, r2
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset))
 8019410:	f892 c001 	ldrb.w	ip, [r2, #1]
 8019414:	7882      	ldrb	r2, [r0, #2]
 8019416:	4594      	cmp	ip, r2
 8019418:	d102      	bne.n	8019420 <print_sorted+0x14>
 801941a:	685a      	ldr	r2, [r3, #4]
 801941c:	428a      	cmp	r2, r1
 801941e:	d104      	bne.n	801942a <print_sorted+0x1e>
        report_settings_detail (((report_args_t *)args)->format, setting, offset);
 8019420:	460a      	mov	r2, r1
 8019422:	4601      	mov	r1, r0
 8019424:	7818      	ldrb	r0, [r3, #0]
 8019426:	f7ff fc8d 	bl	8018d44 <report_settings_detail>
}
 801942a:	2001      	movs	r0, #1
 801942c:	bd08      	pop	{r3, pc}
	...

08019430 <print_settings_details>:
{
 8019430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019434:	b083      	sub	sp, #12
 8019436:	4606      	mov	r6, r0
    bool reported = group == Group_All;
 8019438:	4688      	mov	r8, r1
 801943a:	fab1 fb81 	clz	fp, r1
 801943e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    setting_details_t *details = settings_get_details();
 8019442:	f003 fdeb 	bl	801d01c <settings_get_details>
 8019446:	4604      	mov	r4, r0
    args.group = settings_normalize_group(group);
 8019448:	4640      	mov	r0, r8
 801944a:	f004 fa33 	bl	801d8b4 <settings_normalize_group>
 801944e:	f88d 0001 	strb.w	r0, [sp, #1]
    args.offset = group - args.group;
 8019452:	eba8 0000 	sub.w	r0, r8, r0
 8019456:	9001      	str	r0, [sp, #4]
    args.format = format;
 8019458:	f88d 6000 	strb.w	r6, [sp]
    uint_fast16_t idx, n_settings = 0;
 801945c:	2500      	movs	r5, #0
        n_settings += details->n_settings;
 801945e:	8923      	ldrh	r3, [r4, #8]
 8019460:	441d      	add	r5, r3
    } while((details = details->next));
 8019462:	69a4      	ldr	r4, [r4, #24]
 8019464:	2c00      	cmp	r4, #0
 8019466:	d1fa      	bne.n	801945e <print_settings_details+0x2e>
    if(format == SettingsFormat_Grbl)
 8019468:	2e02      	cmp	r6, #2
 801946a:	d00f      	beq.n	801948c <print_settings_details+0x5c>
    else if(format == SettingsFormat_grblHAL)
 801946c:	2e03      	cmp	r6, #3
 801946e:	d013      	beq.n	8019498 <print_settings_details+0x68>
    details = settings_get_details();
 8019470:	f003 fdd4 	bl	801d01c <settings_get_details>
 8019474:	4607      	mov	r7, r0
    if((all_settings = psetting = calloc(n_settings, sizeof(setting_detail_t *)))) {
 8019476:	2104      	movs	r1, #4
 8019478:	4628      	mov	r0, r5
 801947a:	f009 fb73 	bl	8022b64 <calloc>
 801947e:	4682      	mov	sl, r0
 8019480:	2800      	cmp	r0, #0
 8019482:	d068      	beq.n	8019556 <print_settings_details+0x126>
 8019484:	4606      	mov	r6, r0
        n_settings = 0;
 8019486:	f04f 0900 	mov.w	r9, #0
 801948a:	e028      	b.n	80194de <print_settings_details+0xae>
        hal.stream.write("\"$-Code\",\" Setting\",\" Units\",\" Setting Description\"" ASCII_EOL);
 801948c:	4b34      	ldr	r3, [pc, #208]	@ (8019560 <print_settings_details+0x130>)
 801948e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019492:	4834      	ldr	r0, [pc, #208]	@ (8019564 <print_settings_details+0x134>)
 8019494:	4798      	blx	r3
 8019496:	e7eb      	b.n	8019470 <print_settings_details+0x40>
        hal.stream.write("$-Code\tSetting\tUnits\tDatatype\tData format\tSetting Description\tMin\tMax" ASCII_EOL);
 8019498:	4b31      	ldr	r3, [pc, #196]	@ (8019560 <print_settings_details+0x130>)
 801949a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801949e:	4832      	ldr	r0, [pc, #200]	@ (8019568 <print_settings_details+0x138>)
 80194a0:	4798      	blx	r3
 80194a2:	e7e5      	b.n	8019470 <print_settings_details+0x40>
                if((group == Group_All || setting->group == args.group) && (setting->is_available == NULL || setting->is_available(setting))) {
 80194a4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80194a6:	b113      	cbz	r3, 80194ae <print_settings_details+0x7e>
 80194a8:	4628      	mov	r0, r5
 80194aa:	4798      	blx	r3
 80194ac:	b118      	cbz	r0, 80194b6 <print_settings_details+0x86>
                    *psetting++ = (setting_detail_t *)setting;
 80194ae:	f846 5b04 	str.w	r5, [r6], #4
                    n_settings++;
 80194b2:	f109 0901 	add.w	r9, r9, #1
            for(idx = 0; idx < details->n_settings; idx++) {
 80194b6:	3401      	adds	r4, #1
 80194b8:	893b      	ldrh	r3, [r7, #8]
 80194ba:	42a3      	cmp	r3, r4
 80194bc:	d90d      	bls.n	80194da <print_settings_details+0xaa>
                setting = &details->settings[idx];
 80194be:	68fd      	ldr	r5, [r7, #12]
 80194c0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80194c4:	eb05 1503 	add.w	r5, r5, r3, lsl #4
                if((group == Group_All || setting->group == args.group) && (setting->is_available == NULL || setting->is_available(setting))) {
 80194c8:	f1b8 0f00 	cmp.w	r8, #0
 80194cc:	d0ea      	beq.n	80194a4 <print_settings_details+0x74>
 80194ce:	78aa      	ldrb	r2, [r5, #2]
 80194d0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80194d4:	429a      	cmp	r2, r3
 80194d6:	d1ee      	bne.n	80194b6 <print_settings_details+0x86>
 80194d8:	e7e4      	b.n	80194a4 <print_settings_details+0x74>
        } while((details = details->next));
 80194da:	69bf      	ldr	r7, [r7, #24]
 80194dc:	b10f      	cbz	r7, 80194e2 <print_settings_details+0xb2>
            for(idx = 0; idx < details->n_settings; idx++) {
 80194de:	2400      	movs	r4, #0
 80194e0:	e7ea      	b.n	80194b8 <print_settings_details+0x88>
        qsort(all_settings, n_settings, sizeof(setting_detail_t *), cmp_settings);
 80194e2:	4b22      	ldr	r3, [pc, #136]	@ (801956c <print_settings_details+0x13c>)
 80194e4:	2204      	movs	r2, #4
 80194e6:	4649      	mov	r1, r9
 80194e8:	4650      	mov	r0, sl
 80194ea:	f00a fb0c 	bl	8023b06 <qsort>
        for(idx = 0; idx < n_settings; idx++) {
 80194ee:	2400      	movs	r4, #0
 80194f0:	e000      	b.n	80194f4 <print_settings_details+0xc4>
 80194f2:	3401      	adds	r4, #1
 80194f4:	454c      	cmp	r4, r9
 80194f6:	d209      	bcs.n	801950c <print_settings_details+0xdc>
            if(settings_iterator(all_settings[idx], print_sorted, &args))
 80194f8:	466a      	mov	r2, sp
 80194fa:	491d      	ldr	r1, [pc, #116]	@ (8019570 <print_settings_details+0x140>)
 80194fc:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 8019500:	f004 fa3a 	bl	801d978 <settings_iterator>
 8019504:	2800      	cmp	r0, #0
 8019506:	d0f4      	beq.n	80194f2 <print_settings_details+0xc2>
                reported = true;
 8019508:	4683      	mov	fp, r0
 801950a:	e7f2      	b.n	80194f2 <print_settings_details+0xc2>
        free(all_settings);
 801950c:	4650      	mov	r0, sl
 801950e:	f009 fb4d 	bl	8022bac <free>
    return reported ? Status_OK : Status_SettingDisabled;
 8019512:	f1bb 0f00 	cmp.w	fp, #0
 8019516:	d020      	beq.n	801955a <print_settings_details+0x12a>
 8019518:	2000      	movs	r0, #0
}
 801951a:	b003      	add	sp, #12
 801951c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(settings_iterator(setting, print_unsorted, &args))
 8019520:	466a      	mov	r2, sp
 8019522:	4914      	ldr	r1, [pc, #80]	@ (8019574 <print_settings_details+0x144>)
 8019524:	f004 fa28 	bl	801d978 <settings_iterator>
 8019528:	b100      	cbz	r0, 801952c <print_settings_details+0xfc>
                    reported = true;
 801952a:	4683      	mov	fp, r0
        for(idx = 0; idx < details->n_settings; idx++) {
 801952c:	3401      	adds	r4, #1
 801952e:	893b      	ldrh	r3, [r7, #8]
 8019530:	42a3      	cmp	r3, r4
 8019532:	d90d      	bls.n	8019550 <print_settings_details+0x120>
            setting = &details->settings[idx];
 8019534:	68f8      	ldr	r0, [r7, #12]
 8019536:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801953a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
            if(group == Group_All || setting->group == args.group) {
 801953e:	f1b8 0f00 	cmp.w	r8, #0
 8019542:	d0ed      	beq.n	8019520 <print_settings_details+0xf0>
 8019544:	7882      	ldrb	r2, [r0, #2]
 8019546:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801954a:	429a      	cmp	r2, r3
 801954c:	d1ee      	bne.n	801952c <print_settings_details+0xfc>
 801954e:	e7e7      	b.n	8019520 <print_settings_details+0xf0>
    } while((details = details->next));
 8019550:	69bf      	ldr	r7, [r7, #24]
 8019552:	2f00      	cmp	r7, #0
 8019554:	d0dd      	beq.n	8019512 <print_settings_details+0xe2>
        for(idx = 0; idx < details->n_settings; idx++) {
 8019556:	2400      	movs	r4, #0
 8019558:	e7e9      	b.n	801952e <print_settings_details+0xfe>
    return reported ? Status_OK : Status_SettingDisabled;
 801955a:	2035      	movs	r0, #53	@ 0x35
 801955c:	e7dd      	b.n	801951a <print_settings_details+0xea>
 801955e:	bf00      	nop
 8019560:	20001a90 	.word	0x20001a90
 8019564:	0802c1b4 	.word	0x0802c1b4
 8019568:	0802c1ec 	.word	0x0802c1ec
 801956c:	0801847d 	.word	0x0801847d
 8019570:	0801940d 	.word	0x0801940d
 8019574:	080193dd 	.word	0x080193dd

08019578 <print_setting_group>:
{
 8019578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801957a:	4604      	mov	r4, r0
 801957c:	460d      	mov	r5, r1
    if(settings_is_group_available(group->id)) {
 801957e:	7840      	ldrb	r0, [r0, #1]
 8019580:	f004 fa80 	bl	801da84 <settings_is_group_available>
 8019584:	b178      	cbz	r0, 80195a6 <print_setting_group+0x2e>
        if(!prefix) {
 8019586:	b17d      	cbz	r5, 80195a8 <print_setting_group+0x30>
        } else if(group->id != Group_Root) {
 8019588:	7863      	ldrb	r3, [r4, #1]
 801958a:	b163      	cbz	r3, 80195a6 <print_setting_group+0x2e>
            hal.stream.write(prefix);
 801958c:	4e18      	ldr	r6, [pc, #96]	@ (80195f0 <print_setting_group+0x78>)
 801958e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8019592:	4628      	mov	r0, r5
 8019594:	4798      	blx	r3
            hal.stream.write(group->name);
 8019596:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801959a:	6860      	ldr	r0, [r4, #4]
 801959c:	4798      	blx	r3
            hal.stream.write(ASCII_EOL);
 801959e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80195a2:	4814      	ldr	r0, [pc, #80]	@ (80195f4 <print_setting_group+0x7c>)
 80195a4:	4798      	blx	r3
}
 80195a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            hal.stream.write("[SETTINGGROUP:");
 80195a8:	4d11      	ldr	r5, [pc, #68]	@ (80195f0 <print_setting_group+0x78>)
 80195aa:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80195ae:	4812      	ldr	r0, [pc, #72]	@ (80195f8 <print_setting_group+0x80>)
 80195b0:	4798      	blx	r3
            hal.stream.write(uitoa(group->id));
 80195b2:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 80195b6:	7860      	ldrb	r0, [r4, #1]
 80195b8:	f7fc fa02 	bl	80159c0 <uitoa>
 80195bc:	47b0      	blx	r6
            hal.stream.write(vbar);
 80195be:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80195c2:	4e0e      	ldr	r6, [pc, #56]	@ (80195fc <print_setting_group+0x84>)
 80195c4:	4630      	mov	r0, r6
 80195c6:	4798      	blx	r3
            hal.stream.write(uitoa(group->parent));
 80195c8:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 80195cc:	7820      	ldrb	r0, [r4, #0]
 80195ce:	f7fc f9f7 	bl	80159c0 <uitoa>
 80195d2:	47b8      	blx	r7
            hal.stream.write(vbar);
 80195d4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80195d8:	4630      	mov	r0, r6
 80195da:	4798      	blx	r3
            hal.stream.write(group->name);
 80195dc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80195e0:	6860      	ldr	r0, [r4, #4]
 80195e2:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 80195e4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80195e8:	4805      	ldr	r0, [pc, #20]	@ (8019600 <print_setting_group+0x88>)
 80195ea:	4798      	blx	r3
 80195ec:	e7db      	b.n	80195a6 <print_setting_group+0x2e>
 80195ee:	bf00      	nop
 80195f0:	20001a90 	.word	0x20001a90
 80195f4:	0802c680 	.word	0x0802c680
 80195f8:	0802c234 	.word	0x0802c234
 80195fc:	0802c7fc 	.word	0x0802c7fc
 8019600:	0802bfd4 	.word	0x0802bfd4

08019604 <report_pin_info>:
{
 8019604:	b570      	push	{r4, r5, r6, lr}
 8019606:	4604      	mov	r4, r0
    hal.stream.write("[PIN:");
 8019608:	4b16      	ldr	r3, [pc, #88]	@ (8019664 <report_pin_info+0x60>)
 801960a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801960e:	4816      	ldr	r0, [pc, #88]	@ (8019668 <report_pin_info+0x64>)
 8019610:	4798      	blx	r3
    if(*pin->port)
 8019612:	78a3      	ldrb	r3, [r4, #2]
 8019614:	b123      	cbz	r3, 8019620 <report_pin_info+0x1c>
        hal.stream.write(pin->port);
 8019616:	4b13      	ldr	r3, [pc, #76]	@ (8019664 <report_pin_info+0x60>)
 8019618:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801961c:	1ca0      	adds	r0, r4, #2
 801961e:	4798      	blx	r3
    hal.stream.write(uitoa(pin->pin));
 8019620:	4d10      	ldr	r5, [pc, #64]	@ (8019664 <report_pin_info+0x60>)
 8019622:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8019626:	7820      	ldrb	r0, [r4, #0]
 8019628:	f7fc f9ca 	bl	80159c0 <uitoa>
 801962c:	47b0      	blx	r6
    hal.stream.write(",");
 801962e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019632:	480e      	ldr	r0, [pc, #56]	@ (801966c <report_pin_info+0x68>)
 8019634:	4798      	blx	r3
    hal.stream.write(xbar_fn_to_pinname(pin->function));
 8019636:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 801963a:	7860      	ldrb	r0, [r4, #1]
 801963c:	f7f3 fd4a 	bl	800d0d4 <xbar_fn_to_pinname>
 8019640:	47a8      	blx	r5
    if(pin->description) {
 8019642:	6923      	ldr	r3, [r4, #16]
 8019644:	b143      	cbz	r3, 8019658 <report_pin_info+0x54>
        hal.stream.write(",");
 8019646:	4d07      	ldr	r5, [pc, #28]	@ (8019664 <report_pin_info+0x60>)
 8019648:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801964c:	4807      	ldr	r0, [pc, #28]	@ (801966c <report_pin_info+0x68>)
 801964e:	4798      	blx	r3
        hal.stream.write(pin->description);
 8019650:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019654:	6920      	ldr	r0, [r4, #16]
 8019656:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 8019658:	4b02      	ldr	r3, [pc, #8]	@ (8019664 <report_pin_info+0x60>)
 801965a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801965e:	4804      	ldr	r0, [pc, #16]	@ (8019670 <report_pin_info+0x6c>)
 8019660:	4798      	blx	r3
}
 8019662:	bd70      	pop	{r4, r5, r6, pc}
 8019664:	20001a90 	.word	0x20001a90
 8019668:	0802c244 	.word	0x0802c244
 801966c:	0802c400 	.word	0x0802c400
 8019670:	0802bfd4 	.word	0x0802bfd4

08019674 <report_pin>:
{
 8019674:	b500      	push	{lr}
 8019676:	b087      	sub	sp, #28
    report_pin_info(get_pin_info(pin, &info));
 8019678:	4669      	mov	r1, sp
 801967a:	f7ff fa45 	bl	8018b08 <get_pin_info>
 801967e:	f7ff ffc1 	bl	8019604 <report_pin_info>
}
 8019682:	b007      	add	sp, #28
 8019684:	f85d fb04 	ldr.w	pc, [sp], #4

08019688 <report_setting>:
{
 8019688:	b538      	push	{r3, r4, r5, lr}
 801968a:	4604      	mov	r4, r0
 801968c:	460d      	mov	r5, r1
    appendbuf(3, "$", uitoa(setting->id + offset), "=");
 801968e:	8800      	ldrh	r0, [r0, #0]
 8019690:	4408      	add	r0, r1
 8019692:	f7fc f995 	bl	80159c0 <uitoa>
 8019696:	4602      	mov	r2, r0
 8019698:	4b0c      	ldr	r3, [pc, #48]	@ (80196cc <report_setting+0x44>)
 801969a:	490d      	ldr	r1, [pc, #52]	@ (80196d0 <report_setting+0x48>)
 801969c:	2003      	movs	r0, #3
 801969e:	f7ff fa5f 	bl	8018b60 <appendbuf>
    char *value = setting_get_value(setting, offset);
 80196a2:	4629      	mov	r1, r5
 80196a4:	4620      	mov	r0, r4
 80196a6:	f003 fe9b 	bl	801d3e0 <setting_get_value>
    if(value) {
 80196aa:	b168      	cbz	r0, 80196c8 <report_setting+0x40>
 80196ac:	4605      	mov	r5, r0
        hal.stream.write(buf);
 80196ae:	4c09      	ldr	r4, [pc, #36]	@ (80196d4 <report_setting+0x4c>)
 80196b0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80196b4:	4808      	ldr	r0, [pc, #32]	@ (80196d8 <report_setting+0x50>)
 80196b6:	4798      	blx	r3
        hal.stream.write(value);
 80196b8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80196bc:	4628      	mov	r0, r5
 80196be:	4798      	blx	r3
        hal.stream.write(ASCII_EOL);
 80196c0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80196c4:	4805      	ldr	r0, [pc, #20]	@ (80196dc <report_setting+0x54>)
 80196c6:	4798      	blx	r3
}
 80196c8:	2001      	movs	r0, #1
 80196ca:	bd38      	pop	{r3, r4, r5, pc}
 80196cc:	0802c24c 	.word	0x0802c24c
 80196d0:	0802bfbc 	.word	0x0802bfbc
 80196d4:	20001a90 	.word	0x20001a90
 80196d8:	20002378 	.word	0x20002378
 80196dc:	0802c680 	.word	0x0802c680

080196e0 <report_init>:
    get_axis_value = settings.flags.report_inches ? get_axis_value_inches : get_axis_value_mm;
 80196e0:	4b0b      	ldr	r3, [pc, #44]	@ (8019710 <report_init+0x30>)
 80196e2:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 80196e6:	f013 0301 	ands.w	r3, r3, #1
 80196ea:	d00b      	beq.n	8019704 <report_init+0x24>
 80196ec:	4909      	ldr	r1, [pc, #36]	@ (8019714 <report_init+0x34>)
 80196ee:	4a0a      	ldr	r2, [pc, #40]	@ (8019718 <report_init+0x38>)
 80196f0:	6011      	str	r1, [r2, #0]
    get_axis_values = settings.flags.report_inches ? get_axis_values_inches : get_axis_values_mm;
 80196f2:	b14b      	cbz	r3, 8019708 <report_init+0x28>
 80196f4:	4909      	ldr	r1, [pc, #36]	@ (801971c <report_init+0x3c>)
 80196f6:	4a0a      	ldr	r2, [pc, #40]	@ (8019720 <report_init+0x40>)
 80196f8:	6011      	str	r1, [r2, #0]
    get_rate_value = settings.flags.report_inches ? get_rate_value_inch : get_rate_value_mm;
 80196fa:	b13b      	cbz	r3, 801970c <report_init+0x2c>
 80196fc:	4a09      	ldr	r2, [pc, #36]	@ (8019724 <report_init+0x44>)
 80196fe:	4b0a      	ldr	r3, [pc, #40]	@ (8019728 <report_init+0x48>)
 8019700:	601a      	str	r2, [r3, #0]
}
 8019702:	4770      	bx	lr
    get_axis_value = settings.flags.report_inches ? get_axis_value_inches : get_axis_value_mm;
 8019704:	4909      	ldr	r1, [pc, #36]	@ (801972c <report_init+0x4c>)
 8019706:	e7f2      	b.n	80196ee <report_init+0xe>
    get_axis_values = settings.flags.report_inches ? get_axis_values_inches : get_axis_values_mm;
 8019708:	4909      	ldr	r1, [pc, #36]	@ (8019730 <report_init+0x50>)
 801970a:	e7f4      	b.n	80196f6 <report_init+0x16>
    get_rate_value = settings.flags.report_inches ? get_rate_value_inch : get_rate_value_mm;
 801970c:	4a09      	ldr	r2, [pc, #36]	@ (8019734 <report_init+0x54>)
 801970e:	e7f6      	b.n	80196fe <report_init+0x1e>
 8019710:	200024a8 	.word	0x200024a8
 8019714:	08018a99 	.word	0x08018a99
 8019718:	20002370 	.word	0x20002370
 801971c:	080189f9 	.word	0x080189f9
 8019720:	20002374 	.word	0x20002374
 8019724:	080185f5 	.word	0x080185f5
 8019728:	2000236c 	.word	0x2000236c
 801972c:	08018a81 	.word	0x08018a81
 8019730:	08018985 	.word	0x08018985
 8019734:	080185e5 	.word	0x080185e5

08019738 <report_message>:
{
 8019738:	b538      	push	{r3, r4, r5, lr}
 801973a:	4605      	mov	r5, r0
 801973c:	460c      	mov	r4, r1
    if(hal.stream.is_connected()) {
 801973e:	4b16      	ldr	r3, [pc, #88]	@ (8019798 <report_message+0x60>)
 8019740:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8019744:	4798      	blx	r3
 8019746:	b198      	cbz	r0, 8019770 <report_message+0x38>
        hal.stream.write("[MSG:");
 8019748:	4b13      	ldr	r3, [pc, #76]	@ (8019798 <report_message+0x60>)
 801974a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801974e:	4813      	ldr	r0, [pc, #76]	@ (801979c <report_message+0x64>)
 8019750:	4798      	blx	r3
        switch(type) {
 8019752:	2c02      	cmp	r4, #2
 8019754:	d013      	beq.n	801977e <report_message+0x46>
 8019756:	2c03      	cmp	r4, #3
 8019758:	d017      	beq.n	801978a <report_message+0x52>
 801975a:	2c01      	cmp	r4, #1
 801975c:	d009      	beq.n	8019772 <report_message+0x3a>
        hal.stream.write(msg);
 801975e:	4c0e      	ldr	r4, [pc, #56]	@ (8019798 <report_message+0x60>)
 8019760:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019764:	4628      	mov	r0, r5
 8019766:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 8019768:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801976c:	480c      	ldr	r0, [pc, #48]	@ (80197a0 <report_message+0x68>)
 801976e:	4798      	blx	r3
}
 8019770:	bd38      	pop	{r3, r4, r5, pc}
                hal.stream.write("Info: ");
 8019772:	4b09      	ldr	r3, [pc, #36]	@ (8019798 <report_message+0x60>)
 8019774:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019778:	480a      	ldr	r0, [pc, #40]	@ (80197a4 <report_message+0x6c>)
 801977a:	4798      	blx	r3
                break;
 801977c:	e7ef      	b.n	801975e <report_message+0x26>
                hal.stream.write("Warning: ");
 801977e:	4b06      	ldr	r3, [pc, #24]	@ (8019798 <report_message+0x60>)
 8019780:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019784:	4808      	ldr	r0, [pc, #32]	@ (80197a8 <report_message+0x70>)
 8019786:	4798      	blx	r3
                break;
 8019788:	e7e9      	b.n	801975e <report_message+0x26>
                hal.stream.write("Debug: ");
 801978a:	4b03      	ldr	r3, [pc, #12]	@ (8019798 <report_message+0x60>)
 801978c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019790:	4806      	ldr	r0, [pc, #24]	@ (80197ac <report_message+0x74>)
 8019792:	4798      	blx	r3
                break;
 8019794:	e7e3      	b.n	801975e <report_message+0x26>
 8019796:	bf00      	nop
 8019798:	20001a90 	.word	0x20001a90
 801979c:	0802c250 	.word	0x0802c250
 80197a0:	0802bfd4 	.word	0x0802bfd4
 80197a4:	0802c258 	.word	0x0802c258
 80197a8:	0802c260 	.word	0x0802c260
 80197ac:	0802c26c 	.word	0x0802c26c

080197b0 <report_feedback_message>:
{
 80197b0:	b510      	push	{r4, lr}
 80197b2:	4604      	mov	r4, r0
    const message_t *msg = message_get(id);
 80197b4:	f7fa f9f6 	bl	8013ba4 <message_get>
    report_message(msg ? msg->text : "", msg ? msg->type : Message_Plain);
 80197b8:	b168      	cbz	r0, 80197d6 <report_feedback_message+0x26>
 80197ba:	4603      	mov	r3, r0
 80197bc:	6840      	ldr	r0, [r0, #4]
 80197be:	7859      	ldrb	r1, [r3, #1]
 80197c0:	f7ff ffba 	bl	8019738 <report_message>
    if(id == Message_None && grbl.on_gcode_message)
 80197c4:	b92c      	cbnz	r4, 80197d2 <report_feedback_message+0x22>
 80197c6:	4b05      	ldr	r3, [pc, #20]	@ (80197dc <report_feedback_message+0x2c>)
 80197c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80197cc:	b10b      	cbz	r3, 80197d2 <report_feedback_message+0x22>
        grbl.on_gcode_message("");
 80197ce:	4804      	ldr	r0, [pc, #16]	@ (80197e0 <report_feedback_message+0x30>)
 80197d0:	4798      	blx	r3
}
 80197d2:	4620      	mov	r0, r4
 80197d4:	bd10      	pop	{r4, pc}
    report_message(msg ? msg->text : "", msg ? msg->type : Message_Plain);
 80197d6:	4802      	ldr	r0, [pc, #8]	@ (80197e0 <report_feedback_message+0x30>)
 80197d8:	2100      	movs	r1, #0
 80197da:	e7f1      	b.n	80197c0 <report_feedback_message+0x10>
 80197dc:	20001c78 	.word	0x20001c78
 80197e0:	0802c13c 	.word	0x0802c13c

080197e4 <report_plain>:
{
 80197e4:	b508      	push	{r3, lr}
    report_message((char *)message, Message_Plain);
 80197e6:	2100      	movs	r1, #0
 80197e8:	f7ff ffa6 	bl	8019738 <report_message>
}
 80197ec:	bd08      	pop	{r3, pc}

080197ee <report_warning>:
{
 80197ee:	b508      	push	{r3, lr}
    report_message((char *)message, Message_Warning);
 80197f0:	2102      	movs	r1, #2
 80197f2:	f7ff ffa1 	bl	8019738 <report_message>
}
 80197f6:	bd08      	pop	{r3, pc}

080197f8 <report_grbl_setting>:
{
 80197f8:	b570      	push	{r4, r5, r6, lr}
 80197fa:	4604      	mov	r4, r0
 80197fc:	460d      	mov	r5, r1
    const setting_detail_t *setting = setting_get_details(id, NULL);
 80197fe:	2100      	movs	r1, #0
 8019800:	f004 f860 	bl	801d8c4 <setting_get_details>
    if(setting)
 8019804:	b138      	cbz	r0, 8019816 <report_grbl_setting+0x1e>
        grbl.report.setting(setting, id - setting->id, data);
 8019806:	4a05      	ldr	r2, [pc, #20]	@ (801981c <report_grbl_setting+0x24>)
 8019808:	6956      	ldr	r6, [r2, #20]
 801980a:	8801      	ldrh	r1, [r0, #0]
 801980c:	462a      	mov	r2, r5
 801980e:	1a61      	subs	r1, r4, r1
 8019810:	47b0      	blx	r6
    status_code_t status = Status_OK;
 8019812:	2000      	movs	r0, #0
}
 8019814:	bd70      	pop	{r4, r5, r6, pc}
        status = Status_SettingDisabled;
 8019816:	2035      	movs	r0, #53	@ 0x35
 8019818:	e7fc      	b.n	8019814 <report_grbl_setting+0x1c>
 801981a:	bf00      	nop
 801981c:	20001c78 	.word	0x20001c78

08019820 <report_grbl_settings>:
{
 8019820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019824:	4606      	mov	r6, r0
 8019826:	4689      	mov	r9, r1
    setting_details_t *details = settings_get_details();
 8019828:	f003 fbf8 	bl	801d01c <settings_get_details>
    uint_fast16_t idx, n_settings = 0;
 801982c:	2400      	movs	r4, #0
        n_settings += details->n_settings;
 801982e:	8903      	ldrh	r3, [r0, #8]
 8019830:	441c      	add	r4, r3
    } while((details = details->next));
 8019832:	6980      	ldr	r0, [r0, #24]
 8019834:	2800      	cmp	r0, #0
 8019836:	d1fa      	bne.n	801982e <report_grbl_settings+0xe>
    details = settings_get_details();
 8019838:	f003 fbf0 	bl	801d01c <settings_get_details>
 801983c:	4683      	mov	fp, r0
    if((all_settings = psetting = calloc(n_settings, sizeof(setting_detail_t *)))) {
 801983e:	2104      	movs	r1, #4
 8019840:	4620      	mov	r0, r4
 8019842:	f009 f98f 	bl	8022b64 <calloc>
 8019846:	4680      	mov	r8, r0
 8019848:	2800      	cmp	r0, #0
 801984a:	d067      	beq.n	801991c <report_grbl_settings+0xfc>
 801984c:	4682      	mov	sl, r0
        n_settings = 0;
 801984e:	2700      	movs	r7, #0
        for(idx = 0; idx < details->n_settings; idx++) {
 8019850:	463d      	mov	r5, r7
 8019852:	e00a      	b.n	801986a <report_grbl_settings+0x4a>
                  (setting->is_available == NULL ||setting->is_available(setting))) {
 8019854:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            if((all || setting->type == Setting_IsLegacy || setting->type == Setting_IsLegacyFn) &&
 8019856:	b113      	cbz	r3, 801985e <report_grbl_settings+0x3e>
                  (setting->is_available == NULL ||setting->is_available(setting))) {
 8019858:	4620      	mov	r0, r4
 801985a:	4798      	blx	r3
 801985c:	b120      	cbz	r0, 8019868 <report_grbl_settings+0x48>
                *psetting++ = (setting_detail_t *)setting;
 801985e:	4653      	mov	r3, sl
 8019860:	f843 4b04 	str.w	r4, [r3], #4
                n_settings++;
 8019864:	3701      	adds	r7, #1
                *psetting++ = (setting_detail_t *)setting;
 8019866:	469a      	mov	sl, r3
        for(idx = 0; idx < details->n_settings; idx++) {
 8019868:	3501      	adds	r5, #1
 801986a:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801986e:	42ab      	cmp	r3, r5
 8019870:	d90d      	bls.n	801988e <report_grbl_settings+0x6e>
            setting = &details->settings[idx];
 8019872:	f8db 400c 	ldr.w	r4, [fp, #12]
 8019876:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801987a:	eb04 1403 	add.w	r4, r4, r3, lsl #4
            if((all || setting->type == Setting_IsLegacy || setting->type == Setting_IsLegacyFn) &&
 801987e:	2e00      	cmp	r6, #0
 8019880:	d1e8      	bne.n	8019854 <report_grbl_settings+0x34>
 8019882:	7f23      	ldrb	r3, [r4, #28]
 8019884:	2b04      	cmp	r3, #4
 8019886:	d0e5      	beq.n	8019854 <report_grbl_settings+0x34>
 8019888:	2b05      	cmp	r3, #5
 801988a:	d1ed      	bne.n	8019868 <report_grbl_settings+0x48>
 801988c:	e7e2      	b.n	8019854 <report_grbl_settings+0x34>
        if(all && (details = details->next)) do {
 801988e:	b116      	cbz	r6, 8019896 <report_grbl_settings+0x76>
 8019890:	f8db 6018 	ldr.w	r6, [fp, #24]
 8019894:	bb06      	cbnz	r6, 80198d8 <report_grbl_settings+0xb8>
        qsort(all_settings, n_settings, sizeof(setting_detail_t *), cmp_settings);
 8019896:	4b22      	ldr	r3, [pc, #136]	@ (8019920 <report_grbl_settings+0x100>)
 8019898:	2204      	movs	r2, #4
 801989a:	4639      	mov	r1, r7
 801989c:	4640      	mov	r0, r8
 801989e:	f00a f932 	bl	8023b06 <qsort>
        for(idx = 0; idx < n_settings; idx++)
 80198a2:	2400      	movs	r4, #0
 80198a4:	e021      	b.n	80198ea <report_grbl_settings+0xca>
                    *psetting++ = (setting_detail_t *)setting;
 80198a6:	4653      	mov	r3, sl
 80198a8:	f843 4b04 	str.w	r4, [r3], #4
                    n_settings++;
 80198ac:	3701      	adds	r7, #1
                    *psetting++ = (setting_detail_t *)setting;
 80198ae:	469a      	mov	sl, r3
            for(idx = 0; idx < details->n_settings; idx++) {
 80198b0:	3501      	adds	r5, #1
 80198b2:	8933      	ldrh	r3, [r6, #8]
 80198b4:	42ab      	cmp	r3, r5
 80198b6:	d90c      	bls.n	80198d2 <report_grbl_settings+0xb2>
                setting = &details->settings[idx];
 80198b8:	68f4      	ldr	r4, [r6, #12]
 80198ba:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80198be:	eb04 1403 	add.w	r4, r4, r3, lsl #4
                if(setting->is_available == NULL ||setting->is_available(setting)) {
 80198c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	d0ee      	beq.n	80198a6 <report_grbl_settings+0x86>
 80198c8:	4620      	mov	r0, r4
 80198ca:	4798      	blx	r3
 80198cc:	2800      	cmp	r0, #0
 80198ce:	d0ef      	beq.n	80198b0 <report_grbl_settings+0x90>
 80198d0:	e7e9      	b.n	80198a6 <report_grbl_settings+0x86>
        } while((details = details->next));
 80198d2:	69b6      	ldr	r6, [r6, #24]
 80198d4:	2e00      	cmp	r6, #0
 80198d6:	d0de      	beq.n	8019896 <report_grbl_settings+0x76>
            for(idx = 0; idx < details->n_settings; idx++) {
 80198d8:	2500      	movs	r5, #0
 80198da:	e7ea      	b.n	80198b2 <report_grbl_settings+0x92>
            settings_iterator(all_settings[idx], print_setting, data);
 80198dc:	464a      	mov	r2, r9
 80198de:	4911      	ldr	r1, [pc, #68]	@ (8019924 <report_grbl_settings+0x104>)
 80198e0:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 80198e4:	f004 f848 	bl	801d978 <settings_iterator>
        for(idx = 0; idx < n_settings; idx++)
 80198e8:	3401      	adds	r4, #1
 80198ea:	42bc      	cmp	r4, r7
 80198ec:	d3f6      	bcc.n	80198dc <report_grbl_settings+0xbc>
        free(all_settings);
 80198ee:	4640      	mov	r0, r8
 80198f0:	f009 f95c 	bl	8022bac <free>
}
 80198f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            settings_iterator(&details->settings[idx], print_setting, data);
 80198f8:	f8db 300c 	ldr.w	r3, [fp, #12]
 80198fc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8019900:	464a      	mov	r2, r9
 8019902:	4908      	ldr	r1, [pc, #32]	@ (8019924 <report_grbl_settings+0x104>)
 8019904:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8019908:	f004 f836 	bl	801d978 <settings_iterator>
        for(idx = 0; idx < n_settings; idx++)
 801990c:	3501      	adds	r5, #1
 801990e:	42a5      	cmp	r5, r4
 8019910:	d3f2      	bcc.n	80198f8 <report_grbl_settings+0xd8>
    } while((details = details->next));
 8019912:	f8db b018 	ldr.w	fp, [fp, #24]
 8019916:	f1bb 0f00 	cmp.w	fp, #0
 801991a:	d0eb      	beq.n	80198f4 <report_grbl_settings+0xd4>
        for(idx = 0; idx < n_settings; idx++)
 801991c:	2500      	movs	r5, #0
 801991e:	e7f6      	b.n	801990e <report_grbl_settings+0xee>
 8019920:	0801847d 	.word	0x0801847d
 8019924:	08018611 	.word	0x08018611

08019928 <report_probe_parameters>:
{
 8019928:	b570      	push	{r4, r5, r6, lr}
 801992a:	b084      	sub	sp, #16
    system_convert_array_steps_to_mpos(print_position, sys.probe_position);
 801992c:	4d11      	ldr	r5, [pc, #68]	@ (8019974 <report_probe_parameters+0x4c>)
 801992e:	4629      	mov	r1, r5
 8019930:	a801      	add	r0, sp, #4
 8019932:	f008 fa23 	bl	8021d7c <system_convert_array_steps_to_mpos>
    hal.stream.write("[PRB:");
 8019936:	4c10      	ldr	r4, [pc, #64]	@ (8019978 <report_probe_parameters+0x50>)
 8019938:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801993c:	480f      	ldr	r0, [pc, #60]	@ (801997c <report_probe_parameters+0x54>)
 801993e:	4798      	blx	r3
    hal.stream.write(get_axis_values(print_position));
 8019940:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8019944:	4b0e      	ldr	r3, [pc, #56]	@ (8019980 <report_probe_parameters+0x58>)
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	a801      	add	r0, sp, #4
 801994a:	4798      	blx	r3
 801994c:	47b0      	blx	r6
    hal.stream.write(sys.flags.probe_succeeded ? ":1" : ":0");
 801994e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019952:	f815 2c22 	ldrb.w	r2, [r5, #-34]
 8019956:	f012 0f02 	tst.w	r2, #2
 801995a:	d008      	beq.n	801996e <report_probe_parameters+0x46>
 801995c:	4809      	ldr	r0, [pc, #36]	@ (8019984 <report_probe_parameters+0x5c>)
 801995e:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 8019960:	4b05      	ldr	r3, [pc, #20]	@ (8019978 <report_probe_parameters+0x50>)
 8019962:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019966:	4808      	ldr	r0, [pc, #32]	@ (8019988 <report_probe_parameters+0x60>)
 8019968:	4798      	blx	r3
}
 801996a:	b004      	add	sp, #16
 801996c:	bd70      	pop	{r4, r5, r6, pc}
    hal.stream.write(sys.flags.probe_succeeded ? ":1" : ":0");
 801996e:	4807      	ldr	r0, [pc, #28]	@ (801998c <report_probe_parameters+0x64>)
 8019970:	e7f5      	b.n	801995e <report_probe_parameters+0x36>
 8019972:	bf00      	nop
 8019974:	20001da8 	.word	0x20001da8
 8019978:	20001a90 	.word	0x20001a90
 801997c:	0802c274 	.word	0x0802c274
 8019980:	20002374 	.word	0x20002374
 8019984:	0802c530 	.word	0x0802c530
 8019988:	0802bfd4 	.word	0x0802bfd4
 801998c:	0802c538 	.word	0x0802c538

08019990 <report_home_position>:
{
 8019990:	b570      	push	{r4, r5, r6, lr}
    hal.stream.write("[HOME:");
 8019992:	4c0e      	ldr	r4, [pc, #56]	@ (80199cc <report_home_position+0x3c>)
 8019994:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019998:	480d      	ldr	r0, [pc, #52]	@ (80199d0 <report_home_position+0x40>)
 801999a:	4798      	blx	r3
    hal.stream.write(get_axis_values(sys.home_position));
 801999c:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 80199a0:	4b0c      	ldr	r3, [pc, #48]	@ (80199d4 <report_home_position+0x44>)
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	4d0c      	ldr	r5, [pc, #48]	@ (80199d8 <report_home_position+0x48>)
 80199a6:	4628      	mov	r0, r5
 80199a8:	4798      	blx	r3
 80199aa:	47b0      	blx	r6
    hal.stream.write(":");
 80199ac:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80199b0:	480a      	ldr	r0, [pc, #40]	@ (80199dc <report_home_position+0x4c>)
 80199b2:	4798      	blx	r3
    hal.stream.write(uitoa(sys.homed.mask));
 80199b4:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 80199b8:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 80199bc:	f7fc f800 	bl	80159c0 <uitoa>
 80199c0:	47b0      	blx	r6
    hal.stream.write("]" ASCII_EOL);
 80199c2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80199c6:	4806      	ldr	r0, [pc, #24]	@ (80199e0 <report_home_position+0x50>)
 80199c8:	4798      	blx	r3
}
 80199ca:	bd70      	pop	{r4, r5, r6, pc}
 80199cc:	20001a90 	.word	0x20001a90
 80199d0:	0802c27c 	.word	0x0802c27c
 80199d4:	20002374 	.word	0x20002374
 80199d8:	20001dc8 	.word	0x20001dc8
 80199dc:	0802c33c 	.word	0x0802c33c
 80199e0:	0802bfd4 	.word	0x0802bfd4

080199e4 <report_tool_offsets>:
{
 80199e4:	b538      	push	{r3, r4, r5, lr}
    hal.stream.write("[TLO:");
 80199e6:	4c08      	ldr	r4, [pc, #32]	@ (8019a08 <report_tool_offsets+0x24>)
 80199e8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80199ec:	4807      	ldr	r0, [pc, #28]	@ (8019a0c <report_tool_offsets+0x28>)
 80199ee:	4798      	blx	r3
    hal.stream.write(get_axis_values(gc_state.tool_length_offset));
 80199f0:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 80199f4:	4b06      	ldr	r3, [pc, #24]	@ (8019a10 <report_tool_offsets+0x2c>)
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	4806      	ldr	r0, [pc, #24]	@ (8019a14 <report_tool_offsets+0x30>)
 80199fa:	4798      	blx	r3
 80199fc:	47a8      	blx	r5
    hal.stream.write("]" ASCII_EOL);
 80199fe:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019a02:	4805      	ldr	r0, [pc, #20]	@ (8019a18 <report_tool_offsets+0x34>)
 8019a04:	4798      	blx	r3
}
 8019a06:	bd38      	pop	{r3, r4, r5, pc}
 8019a08:	20001a90 	.word	0x20001a90
 8019a0c:	0802c284 	.word	0x0802c284
 8019a10:	20002374 	.word	0x20002374
 8019a14:	2000188c 	.word	0x2000188c
 8019a18:	0802bfd4 	.word	0x0802bfd4

08019a1c <report_ngc_parameter>:
{
 8019a1c:	b530      	push	{r4, r5, lr}
 8019a1e:	ed2d 8b02 	vpush	{d8}
 8019a22:	b083      	sub	sp, #12
 8019a24:	4604      	mov	r4, r0
    hal.stream.write("[PARAM:");
 8019a26:	4d19      	ldr	r5, [pc, #100]	@ (8019a8c <report_ngc_parameter+0x70>)
 8019a28:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019a2c:	4818      	ldr	r0, [pc, #96]	@ (8019a90 <report_ngc_parameter+0x74>)
 8019a2e:	4798      	blx	r3
    hal.stream.write(uitoa(id));
 8019a30:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 8019a34:	4620      	mov	r0, r4
 8019a36:	f7fb ffc3 	bl	80159c0 <uitoa>
 8019a3a:	47a8      	blx	r5
    if(ngc_param_get(id, &value)) {
 8019a3c:	a901      	add	r1, sp, #4
 8019a3e:	4620      	mov	r0, r4
 8019a40:	f7fb fc94 	bl	801536c <ngc_param_get>
 8019a44:	b1d8      	cbz	r0, 8019a7e <report_ngc_parameter+0x62>
        hal.stream.write("=");
 8019a46:	4c11      	ldr	r4, [pc, #68]	@ (8019a8c <report_ngc_parameter+0x70>)
 8019a48:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019a4c:	4811      	ldr	r0, [pc, #68]	@ (8019a94 <report_ngc_parameter+0x78>)
 8019a4e:	4798      	blx	r3
        hal.stream.write(trim_float(ftoa(value, ngc_float_decimals())));
 8019a50:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 8019a54:	ed9d 8a01 	vldr	s16, [sp, #4]
 8019a58:	f7fb ffa6 	bl	80159a8 <ngc_float_decimals>
 8019a5c:	eeb0 0a48 	vmov.f32	s0, s16
 8019a60:	f7fb ffd0 	bl	8015a04 <ftoa>
 8019a64:	f7fc f84a 	bl	8015afc <trim_float>
 8019a68:	47a0      	blx	r4
    hal.stream.write("]" ASCII_EOL);
 8019a6a:	4b08      	ldr	r3, [pc, #32]	@ (8019a8c <report_ngc_parameter+0x70>)
 8019a6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019a70:	4809      	ldr	r0, [pc, #36]	@ (8019a98 <report_ngc_parameter+0x7c>)
 8019a72:	4798      	blx	r3
}
 8019a74:	2000      	movs	r0, #0
 8019a76:	b003      	add	sp, #12
 8019a78:	ecbd 8b02 	vpop	{d8}
 8019a7c:	bd30      	pop	{r4, r5, pc}
        hal.stream.write("=N/A");
 8019a7e:	4b03      	ldr	r3, [pc, #12]	@ (8019a8c <report_ngc_parameter+0x70>)
 8019a80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019a84:	4805      	ldr	r0, [pc, #20]	@ (8019a9c <report_ngc_parameter+0x80>)
 8019a86:	4798      	blx	r3
 8019a88:	e7ef      	b.n	8019a6a <report_ngc_parameter+0x4e>
 8019a8a:	bf00      	nop
 8019a8c:	20001a90 	.word	0x20001a90
 8019a90:	0802c28c 	.word	0x0802c28c
 8019a94:	0802c24c 	.word	0x0802c24c
 8019a98:	0802bfd4 	.word	0x0802bfd4
 8019a9c:	0802c294 	.word	0x0802c294

08019aa0 <report_named_ngc_parameter>:
{
 8019aa0:	b530      	push	{r4, r5, lr}
 8019aa2:	ed2d 8b02 	vpush	{d8}
 8019aa6:	b083      	sub	sp, #12
 8019aa8:	4604      	mov	r4, r0
    hal.stream.write("[PARAM:");
 8019aaa:	4d17      	ldr	r5, [pc, #92]	@ (8019b08 <report_named_ngc_parameter+0x68>)
 8019aac:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019ab0:	4816      	ldr	r0, [pc, #88]	@ (8019b0c <report_named_ngc_parameter+0x6c>)
 8019ab2:	4798      	blx	r3
    hal.stream.write(arg);
 8019ab4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019ab8:	4620      	mov	r0, r4
 8019aba:	4798      	blx	r3
    if(ngc_named_param_get(arg, &value)) {
 8019abc:	a901      	add	r1, sp, #4
 8019abe:	4620      	mov	r0, r4
 8019ac0:	f7fb ff20 	bl	8015904 <ngc_named_param_get>
 8019ac4:	b1d0      	cbz	r0, 8019afc <report_named_ngc_parameter+0x5c>
        hal.stream.write("=");
 8019ac6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019aca:	4811      	ldr	r0, [pc, #68]	@ (8019b10 <report_named_ngc_parameter+0x70>)
 8019acc:	4798      	blx	r3
        hal.stream.write(trim_float(ftoa(value, ngc_float_decimals())));
 8019ace:	f8d5 40b4 	ldr.w	r4, [r5, #180]	@ 0xb4
 8019ad2:	ed9d 8a01 	vldr	s16, [sp, #4]
 8019ad6:	f7fb ff67 	bl	80159a8 <ngc_float_decimals>
 8019ada:	eeb0 0a48 	vmov.f32	s0, s16
 8019ade:	f7fb ff91 	bl	8015a04 <ftoa>
 8019ae2:	f7fc f80b 	bl	8015afc <trim_float>
 8019ae6:	47a0      	blx	r4
    hal.stream.write("]" ASCII_EOL);
 8019ae8:	4b07      	ldr	r3, [pc, #28]	@ (8019b08 <report_named_ngc_parameter+0x68>)
 8019aea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019aee:	4809      	ldr	r0, [pc, #36]	@ (8019b14 <report_named_ngc_parameter+0x74>)
 8019af0:	4798      	blx	r3
}
 8019af2:	2000      	movs	r0, #0
 8019af4:	b003      	add	sp, #12
 8019af6:	ecbd 8b02 	vpop	{d8}
 8019afa:	bd30      	pop	{r4, r5, pc}
        hal.stream.write("=N/A");
 8019afc:	4b02      	ldr	r3, [pc, #8]	@ (8019b08 <report_named_ngc_parameter+0x68>)
 8019afe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019b02:	4805      	ldr	r0, [pc, #20]	@ (8019b18 <report_named_ngc_parameter+0x78>)
 8019b04:	4798      	blx	r3
 8019b06:	e7ef      	b.n	8019ae8 <report_named_ngc_parameter+0x48>
 8019b08:	20001a90 	.word	0x20001a90
 8019b0c:	0802c28c 	.word	0x0802c28c
 8019b10:	0802c24c 	.word	0x0802c24c
 8019b14:	0802bfd4 	.word	0x0802bfd4
 8019b18:	0802c294 	.word	0x0802c294

08019b1c <report_ngc_parameters>:
{
 8019b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b20:	b085      	sub	sp, #20
    if(gc_state.modal.scaling_active) {
 8019b22:	4b6d      	ldr	r3, [pc, #436]	@ (8019cd8 <report_ngc_parameters+0x1bc>)
 8019b24:	7f9b      	ldrb	r3, [r3, #30]
 8019b26:	b183      	cbz	r3, 8019b4a <report_ngc_parameters+0x2e>
        hal.stream.write("[G51:");
 8019b28:	4c6c      	ldr	r4, [pc, #432]	@ (8019cdc <report_ngc_parameters+0x1c0>)
 8019b2a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019b2e:	486c      	ldr	r0, [pc, #432]	@ (8019ce0 <report_ngc_parameters+0x1c4>)
 8019b30:	4798      	blx	r3
        hal.stream.write(get_axis_values(gc_get_scaling()));
 8019b32:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8019b36:	4b6b      	ldr	r3, [pc, #428]	@ (8019ce4 <report_ngc_parameters+0x1c8>)
 8019b38:	681e      	ldr	r6, [r3, #0]
 8019b3a:	f7f3 fbb3 	bl	800d2a4 <gc_get_scaling>
 8019b3e:	47b0      	blx	r6
 8019b40:	47a8      	blx	r5
        hal.stream.write("]" ASCII_EOL);
 8019b42:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019b46:	4868      	ldr	r0, [pc, #416]	@ (8019ce8 <report_ngc_parameters+0x1cc>)
 8019b48:	4798      	blx	r3
{
 8019b4a:	2400      	movs	r4, #0
 8019b4c:	e01c      	b.n	8019b88 <report_ngc_parameters+0x6c>
            grbl.report.status_message(Status_SettingReadFail);
 8019b4e:	4b67      	ldr	r3, [pc, #412]	@ (8019cec <report_ngc_parameters+0x1d0>)
 8019b50:	689b      	ldr	r3, [r3, #8]
 8019b52:	2007      	movs	r0, #7
 8019b54:	4798      	blx	r3
            return;
 8019b56:	e091      	b.n	8019c7c <report_ngc_parameters+0x160>
                hal.stream.write("28");
 8019b58:	4b60      	ldr	r3, [pc, #384]	@ (8019cdc <report_ngc_parameters+0x1c0>)
 8019b5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019b5e:	4864      	ldr	r0, [pc, #400]	@ (8019cf0 <report_ngc_parameters+0x1d4>)
 8019b60:	4798      	blx	r3
        if(idx != CoordinateSystem_G92) {
 8019b62:	2c0b      	cmp	r4, #11
 8019b64:	d00f      	beq.n	8019b86 <report_ngc_parameters+0x6a>
            hal.stream.write(":");
 8019b66:	4d5d      	ldr	r5, [pc, #372]	@ (8019cdc <report_ngc_parameters+0x1c0>)
 8019b68:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019b6c:	4861      	ldr	r0, [pc, #388]	@ (8019cf4 <report_ngc_parameters+0x1d8>)
 8019b6e:	4798      	blx	r3
            hal.stream.write(get_axis_values(coord_data));
 8019b70:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8019b74:	4b5b      	ldr	r3, [pc, #364]	@ (8019ce4 <report_ngc_parameters+0x1c8>)
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	a801      	add	r0, sp, #4
 8019b7a:	4798      	blx	r3
 8019b7c:	47b0      	blx	r6
            hal.stream.write("]" ASCII_EOL);
 8019b7e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019b82:	4859      	ldr	r0, [pc, #356]	@ (8019ce8 <report_ngc_parameters+0x1cc>)
 8019b84:	4798      	blx	r3
    for (idx = 0; idx < N_CoordinateSystems; idx++) {
 8019b86:	3401      	adds	r4, #1
 8019b88:	2c0b      	cmp	r4, #11
 8019b8a:	d81f      	bhi.n	8019bcc <report_ngc_parameters+0xb0>
        if (!(settings_read_coord_data((coord_system_id_t)idx, &coord_data))) {
 8019b8c:	b2e5      	uxtb	r5, r4
 8019b8e:	a901      	add	r1, sp, #4
 8019b90:	4628      	mov	r0, r5
 8019b92:	f003 fd7f 	bl	801d694 <settings_read_coord_data>
 8019b96:	2800      	cmp	r0, #0
 8019b98:	d0d9      	beq.n	8019b4e <report_ngc_parameters+0x32>
        hal.stream.write("[G");
 8019b9a:	4b50      	ldr	r3, [pc, #320]	@ (8019cdc <report_ngc_parameters+0x1c0>)
 8019b9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019ba0:	4855      	ldr	r0, [pc, #340]	@ (8019cf8 <report_ngc_parameters+0x1dc>)
 8019ba2:	4798      	blx	r3
        switch (idx) {
 8019ba4:	2c0a      	cmp	r4, #10
 8019ba6:	d00b      	beq.n	8019bc0 <report_ngc_parameters+0xa4>
 8019ba8:	2c0b      	cmp	r4, #11
 8019baa:	d0ec      	beq.n	8019b86 <report_ngc_parameters+0x6a>
 8019bac:	2c09      	cmp	r4, #9
 8019bae:	d0d3      	beq.n	8019b58 <report_ngc_parameters+0x3c>
                hal.stream.write(map_coord_system((coord_system_id_t)idx));
 8019bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8019cdc <report_ngc_parameters+0x1c0>)
 8019bb2:	f8d3 60b4 	ldr.w	r6, [r3, #180]	@ 0xb4
 8019bb6:	4628      	mov	r0, r5
 8019bb8:	f7fe ff80 	bl	8018abc <map_coord_system>
 8019bbc:	47b0      	blx	r6
                break;
 8019bbe:	e7d0      	b.n	8019b62 <report_ngc_parameters+0x46>
                hal.stream.write("30");
 8019bc0:	4b46      	ldr	r3, [pc, #280]	@ (8019cdc <report_ngc_parameters+0x1c0>)
 8019bc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019bc6:	484d      	ldr	r0, [pc, #308]	@ (8019cfc <report_ngc_parameters+0x1e0>)
 8019bc8:	4798      	blx	r3
                break;
 8019bca:	e7ca      	b.n	8019b62 <report_ngc_parameters+0x46>
    hal.stream.write("92:");
 8019bcc:	4c43      	ldr	r4, [pc, #268]	@ (8019cdc <report_ngc_parameters+0x1c0>)
 8019bce:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019bd2:	484b      	ldr	r0, [pc, #300]	@ (8019d00 <report_ngc_parameters+0x1e4>)
 8019bd4:	4798      	blx	r3
    hal.stream.write(get_axis_values(gc_state.g92_coord_offset));
 8019bd6:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8019bda:	4b42      	ldr	r3, [pc, #264]	@ (8019ce4 <report_ngc_parameters+0x1c8>)
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	4849      	ldr	r0, [pc, #292]	@ (8019d04 <report_ngc_parameters+0x1e8>)
 8019be0:	4798      	blx	r3
 8019be2:	47a8      	blx	r5
    hal.stream.write("]" ASCII_EOL);
 8019be4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019be8:	483f      	ldr	r0, [pc, #252]	@ (8019ce8 <report_ngc_parameters+0x1cc>)
 8019bea:	4798      	blx	r3
    for (idx = 1; idx <= grbl.tool_table.n_tools; idx++) {
 8019bec:	2501      	movs	r5, #1
 8019bee:	e030      	b.n	8019c52 <report_ngc_parameters+0x136>
        hal.stream.write("[T:");
 8019bf0:	4c3a      	ldr	r4, [pc, #232]	@ (8019cdc <report_ngc_parameters+0x1c0>)
 8019bf2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019bf6:	4844      	ldr	r0, [pc, #272]	@ (8019d08 <report_ngc_parameters+0x1ec>)
 8019bf8:	4798      	blx	r3
        hal.stream.write(uitoa((uint32_t)idx));
 8019bfa:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8019bfe:	4628      	mov	r0, r5
 8019c00:	f7fb fede 	bl	80159c0 <uitoa>
 8019c04:	47b0      	blx	r6
        hal.stream.write("|");
 8019c06:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019c0a:	4f40      	ldr	r7, [pc, #256]	@ (8019d0c <report_ngc_parameters+0x1f0>)
 8019c0c:	4638      	mov	r0, r7
 8019c0e:	4798      	blx	r3
        hal.stream.write(get_axis_values(grbl.tool_table.tool[idx].offset));
 8019c10:	f8d4 90b4 	ldr.w	r9, [r4, #180]	@ 0xb4
 8019c14:	4b33      	ldr	r3, [pc, #204]	@ (8019ce4 <report_ngc_parameters+0x1c8>)
 8019c16:	681a      	ldr	r2, [r3, #0]
 8019c18:	4e34      	ldr	r6, [pc, #208]	@ (8019cec <report_ngc_parameters+0x1d0>)
 8019c1a:	69f0      	ldr	r0, [r6, #28]
 8019c1c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8019c20:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8019c24:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8019c28:	4790      	blx	r2
 8019c2a:	47c8      	blx	r9
        hal.stream.write("|");
 8019c2c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019c30:	4638      	mov	r0, r7
 8019c32:	4798      	blx	r3
        hal.stream.write(get_axis_value(grbl.tool_table.tool[idx].radius));
 8019c34:	f8d4 70b4 	ldr.w	r7, [r4, #180]	@ 0xb4
 8019c38:	4b35      	ldr	r3, [pc, #212]	@ (8019d10 <report_ngc_parameters+0x1f4>)
 8019c3a:	681a      	ldr	r2, [r3, #0]
 8019c3c:	69f3      	ldr	r3, [r6, #28]
 8019c3e:	4443      	add	r3, r8
 8019c40:	ed93 0a03 	vldr	s0, [r3, #12]
 8019c44:	4790      	blx	r2
 8019c46:	47b8      	blx	r7
        hal.stream.write("]" ASCII_EOL);
 8019c48:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019c4c:	4826      	ldr	r0, [pc, #152]	@ (8019ce8 <report_ngc_parameters+0x1cc>)
 8019c4e:	4798      	blx	r3
    for (idx = 1; idx <= grbl.tool_table.n_tools; idx++) {
 8019c50:	3501      	adds	r5, #1
 8019c52:	4b26      	ldr	r3, [pc, #152]	@ (8019cec <report_ngc_parameters+0x1d0>)
 8019c54:	699b      	ldr	r3, [r3, #24]
 8019c56:	42ab      	cmp	r3, r5
 8019c58:	d2ca      	bcs.n	8019bf0 <report_ngc_parameters+0xd4>
    if(settings.homing.flags.enabled)
 8019c5a:	4b2e      	ldr	r3, [pc, #184]	@ (8019d14 <report_ngc_parameters+0x1f8>)
 8019c5c:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8019c60:	f013 0f01 	tst.w	r3, #1
 8019c64:	d10d      	bne.n	8019c82 <report_ngc_parameters+0x166>
    report_tool_offsets();      // Print tool length offset value.
 8019c66:	f7ff febd 	bl	80199e4 <report_tool_offsets>
    report_probe_parameters();  // Print probe parameters. Not persistent in memory.
 8019c6a:	f7ff fe5d 	bl	8019928 <report_probe_parameters>
    if(sys.tlo_reference_set.mask) { // Print tool length reference offset. Not persistent in memory.
 8019c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8019d18 <report_ngc_parameters+0x1fc>)
 8019c70:	79db      	ldrb	r3, [r3, #7]
 8019c72:	b94b      	cbnz	r3, 8019c88 <report_ngc_parameters+0x16c>
    if(grbl.on_report_ngc_parameters)
 8019c74:	4b1d      	ldr	r3, [pc, #116]	@ (8019cec <report_ngc_parameters+0x1d0>)
 8019c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019c78:	b103      	cbz	r3, 8019c7c <report_ngc_parameters+0x160>
        grbl.on_report_ngc_parameters();
 8019c7a:	4798      	blx	r3
}
 8019c7c:	b005      	add	sp, #20
 8019c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        report_home_position();
 8019c82:	f7ff fe85 	bl	8019990 <report_home_position>
 8019c86:	e7ee      	b.n	8019c66 <report_ngc_parameters+0x14a>
        gc_get_plane_data(&plane, gc_state.modal.plane_select);
 8019c88:	4b13      	ldr	r3, [pc, #76]	@ (8019cd8 <report_ngc_parameters+0x1bc>)
 8019c8a:	7999      	ldrb	r1, [r3, #6]
 8019c8c:	4668      	mov	r0, sp
 8019c8e:	f7f3 fc03 	bl	800d498 <gc_get_plane_data>
        hal.stream.write("[TLR:");
 8019c92:	4c12      	ldr	r4, [pc, #72]	@ (8019cdc <report_ngc_parameters+0x1c0>)
 8019c94:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019c98:	4820      	ldr	r0, [pc, #128]	@ (8019d1c <report_ngc_parameters+0x200>)
 8019c9a:	4798      	blx	r3
        hal.stream.write(get_axis_value(sys.tlo_reference[plane.axis_linear] / settings.axis[plane.axis_linear].steps_per_mm));
 8019c9c:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8019ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8019d10 <report_ngc_parameters+0x1f4>)
 8019ca2:	6819      	ldr	r1, [r3, #0]
 8019ca4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8019ca8:	1c98      	adds	r0, r3, #2
 8019caa:	4a1b      	ldr	r2, [pc, #108]	@ (8019d18 <report_ngc_parameters+0x1fc>)
 8019cac:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8019cb0:	edd2 7a00 	vldr	s15, [r2]
 8019cb4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019cb8:	4a16      	ldr	r2, [pc, #88]	@ (8019d14 <report_ngc_parameters+0x1f8>)
 8019cba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019cbe:	ed93 0a0c 	vldr	s0, [r3, #48]	@ 0x30
 8019cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019cc6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8019cca:	4788      	blx	r1
 8019ccc:	47a8      	blx	r5
        hal.stream.write("]" ASCII_EOL);
 8019cce:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019cd2:	4805      	ldr	r0, [pc, #20]	@ (8019ce8 <report_ngc_parameters+0x1cc>)
 8019cd4:	4798      	blx	r3
 8019cd6:	e7cd      	b.n	8019c74 <report_ngc_parameters+0x158>
 8019cd8:	200017c8 	.word	0x200017c8
 8019cdc:	20001a90 	.word	0x20001a90
 8019ce0:	0802c29c 	.word	0x0802c29c
 8019ce4:	20002374 	.word	0x20002374
 8019ce8:	0802bfd4 	.word	0x0802bfd4
 8019cec:	20001c78 	.word	0x20001c78
 8019cf0:	0802c2a8 	.word	0x0802c2a8
 8019cf4:	0802c33c 	.word	0x0802c33c
 8019cf8:	0802c2a4 	.word	0x0802c2a4
 8019cfc:	0802c2ac 	.word	0x0802c2ac
 8019d00:	0802c2b0 	.word	0x0802c2b0
 8019d04:	20001880 	.word	0x20001880
 8019d08:	0802c2b4 	.word	0x0802c2b4
 8019d0c:	0802bff0 	.word	0x0802bff0
 8019d10:	20002370 	.word	0x20002370
 8019d14:	200024a8 	.word	0x200024a8
 8019d18:	20001d70 	.word	0x20001d70
 8019d1c:	0802c2b8 	.word	0x0802c2b8

08019d20 <report_gcode_modes>:
{
 8019d20:	b570      	push	{r4, r5, r6, lr}
    hal.stream.write("[GC:G");
 8019d22:	4b8c      	ldr	r3, [pc, #560]	@ (8019f54 <report_gcode_modes+0x234>)
 8019d24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019d28:	488b      	ldr	r0, [pc, #556]	@ (8019f58 <report_gcode_modes+0x238>)
 8019d2a:	4798      	blx	r3
    if (gc_state.modal.motion >= MotionMode_ProbeToward) {
 8019d2c:	4b8b      	ldr	r3, [pc, #556]	@ (8019f5c <report_gcode_modes+0x23c>)
 8019d2e:	8818      	ldrh	r0, [r3, #0]
 8019d30:	288b      	cmp	r0, #139	@ 0x8b
 8019d32:	f240 80ab 	bls.w	8019e8c <report_gcode_modes+0x16c>
        hal.stream.write("38.");
 8019d36:	4c87      	ldr	r4, [pc, #540]	@ (8019f54 <report_gcode_modes+0x234>)
 8019d38:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019d3c:	4888      	ldr	r0, [pc, #544]	@ (8019f60 <report_gcode_modes+0x240>)
 8019d3e:	4798      	blx	r3
        hal.stream.write(uitoa((uint32_t)(gc_state.modal.motion - (MotionMode_ProbeToward - 2))));
 8019d40:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 8019d44:	4b85      	ldr	r3, [pc, #532]	@ (8019f5c <report_gcode_modes+0x23c>)
 8019d46:	8818      	ldrh	r0, [r3, #0]
 8019d48:	388a      	subs	r0, #138	@ 0x8a
 8019d4a:	f7fb fe39 	bl	80159c0 <uitoa>
 8019d4e:	47a0      	blx	r4
    hal.stream.write(" G");
 8019d50:	4c80      	ldr	r4, [pc, #512]	@ (8019f54 <report_gcode_modes+0x234>)
 8019d52:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019d56:	4883      	ldr	r0, [pc, #524]	@ (8019f64 <report_gcode_modes+0x244>)
 8019d58:	4798      	blx	r3
    hal.stream.write(map_coord_system(gc_state.modal.coord_system.id));
 8019d5a:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 8019d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8019f5c <report_gcode_modes+0x23c>)
 8019d60:	7d18      	ldrb	r0, [r3, #20]
 8019d62:	f7fe feab 	bl	8018abc <map_coord_system>
 8019d66:	47a0      	blx	r4
    uint_fast32_t idx = N_AXIS;
 8019d68:	2303      	movs	r3, #3
        idx--;
 8019d6a:	3b01      	subs	r3, #1
        active = !(gc_state.g92_coord_offset[idx] == 0.0f || gc_state.g92_coord_offset[idx] == -0.0f);
 8019d6c:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 8019d70:	4a7a      	ldr	r2, [pc, #488]	@ (8019f5c <report_gcode_modes+0x23c>)
 8019d72:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8019d76:	edd2 7a00 	vldr	s15, [r2]
    } while(idx && !active);
 8019d7a:	b123      	cbz	r3, 8019d86 <report_gcode_modes+0x66>
 8019d7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d84:	d0f1      	beq.n	8019d6a <report_gcode_modes+0x4a>
    if(is_g92_active())
 8019d86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d8e:	d004      	beq.n	8019d9a <report_gcode_modes+0x7a>
        hal.stream.write(" G92");
 8019d90:	4b70      	ldr	r3, [pc, #448]	@ (8019f54 <report_gcode_modes+0x234>)
 8019d92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019d96:	4874      	ldr	r0, [pc, #464]	@ (8019f68 <report_gcode_modes+0x248>)
 8019d98:	4798      	blx	r3
    if(settings.mode == Mode_Lathe)
 8019d9a:	4b74      	ldr	r3, [pc, #464]	@ (8019f6c <report_gcode_modes+0x24c>)
 8019d9c:	7e1b      	ldrb	r3, [r3, #24]
 8019d9e:	2b02      	cmp	r3, #2
 8019da0:	d07b      	beq.n	8019e9a <report_gcode_modes+0x17a>
    hal.stream.write(" G");
 8019da2:	4c6c      	ldr	r4, [pc, #432]	@ (8019f54 <report_gcode_modes+0x234>)
 8019da4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019da8:	486e      	ldr	r0, [pc, #440]	@ (8019f64 <report_gcode_modes+0x244>)
 8019daa:	4798      	blx	r3
    hal.stream.write(uitoa((uint32_t)(gc_state.modal.plane_select + 17)));
 8019dac:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8019db0:	4d6a      	ldr	r5, [pc, #424]	@ (8019f5c <report_gcode_modes+0x23c>)
 8019db2:	79a8      	ldrb	r0, [r5, #6]
 8019db4:	3011      	adds	r0, #17
 8019db6:	f7fb fe03 	bl	80159c0 <uitoa>
 8019dba:	47b0      	blx	r6
    hal.stream.write(gc_state.modal.units_imperial ? " G20" : " G21");
 8019dbc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019dc0:	78ea      	ldrb	r2, [r5, #3]
 8019dc2:	2a00      	cmp	r2, #0
 8019dc4:	d074      	beq.n	8019eb0 <report_gcode_modes+0x190>
 8019dc6:	486a      	ldr	r0, [pc, #424]	@ (8019f70 <report_gcode_modes+0x250>)
 8019dc8:	4798      	blx	r3
    hal.stream.write(gc_state.modal.distance_incremental ? " G91" : " G90");
 8019dca:	4b62      	ldr	r3, [pc, #392]	@ (8019f54 <report_gcode_modes+0x234>)
 8019dcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019dd0:	4a62      	ldr	r2, [pc, #392]	@ (8019f5c <report_gcode_modes+0x23c>)
 8019dd2:	7912      	ldrb	r2, [r2, #4]
 8019dd4:	2a00      	cmp	r2, #0
 8019dd6:	d06d      	beq.n	8019eb4 <report_gcode_modes+0x194>
 8019dd8:	4866      	ldr	r0, [pc, #408]	@ (8019f74 <report_gcode_modes+0x254>)
 8019dda:	4798      	blx	r3
    hal.stream.write(" G");
 8019ddc:	4c5d      	ldr	r4, [pc, #372]	@ (8019f54 <report_gcode_modes+0x234>)
 8019dde:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019de2:	4860      	ldr	r0, [pc, #384]	@ (8019f64 <report_gcode_modes+0x244>)
 8019de4:	4798      	blx	r3
    hal.stream.write(uitoa((uint32_t)(93 + (gc_state.modal.feed_mode == FeedMode_UnitsPerRev ? 2 : gc_state.modal.feed_mode ^ 1))));
 8019de6:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 8019dea:	4b5c      	ldr	r3, [pc, #368]	@ (8019f5c <report_gcode_modes+0x23c>)
 8019dec:	7898      	ldrb	r0, [r3, #2]
 8019dee:	2802      	cmp	r0, #2
 8019df0:	d062      	beq.n	8019eb8 <report_gcode_modes+0x198>
 8019df2:	f080 0001 	eor.w	r0, r0, #1
 8019df6:	305d      	adds	r0, #93	@ 0x5d
 8019df8:	f7fb fde2 	bl	80159c0 <uitoa>
 8019dfc:	47a0      	blx	r4
    if(settings.mode == Mode_Lathe && gc_spindle_get()->cap.variable)
 8019dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8019f6c <report_gcode_modes+0x24c>)
 8019e00:	7e1b      	ldrb	r3, [r3, #24]
 8019e02:	2b02      	cmp	r3, #2
 8019e04:	d05a      	beq.n	8019ebc <report_gcode_modes+0x19c>
    if(gc_state.modal.tool_offset_mode == ToolLengthOffset_Cancel)
 8019e06:	4b55      	ldr	r3, [pc, #340]	@ (8019f5c <report_gcode_modes+0x23c>)
 8019e08:	79db      	ldrb	r3, [r3, #7]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d167      	bne.n	8019ede <report_gcode_modes+0x1be>
        hal.stream.write(" G49");
 8019e0e:	4b51      	ldr	r3, [pc, #324]	@ (8019f54 <report_gcode_modes+0x234>)
 8019e10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019e14:	4858      	ldr	r0, [pc, #352]	@ (8019f78 <report_gcode_modes+0x258>)
 8019e16:	4798      	blx	r3
    hal.stream.write(gc_state.modal.retract_mode == CCRetractMode_RPos ? " G99" : " G98");
 8019e18:	4b4e      	ldr	r3, [pc, #312]	@ (8019f54 <report_gcode_modes+0x234>)
 8019e1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019e1e:	4a4f      	ldr	r2, [pc, #316]	@ (8019f5c <report_gcode_modes+0x23c>)
 8019e20:	7f52      	ldrb	r2, [r2, #29]
 8019e22:	2a01      	cmp	r2, #1
 8019e24:	d06e      	beq.n	8019f04 <report_gcode_modes+0x1e4>
 8019e26:	4855      	ldr	r0, [pc, #340]	@ (8019f7c <report_gcode_modes+0x25c>)
 8019e28:	4798      	blx	r3
    if(gc_state.modal.scaling_active) {
 8019e2a:	4b4c      	ldr	r3, [pc, #304]	@ (8019f5c <report_gcode_modes+0x23c>)
 8019e2c:	7f9b      	ldrb	r3, [r3, #30]
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d06a      	beq.n	8019f08 <report_gcode_modes+0x1e8>
        hal.stream.write(" G51:");
 8019e32:	4d48      	ldr	r5, [pc, #288]	@ (8019f54 <report_gcode_modes+0x234>)
 8019e34:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019e38:	4851      	ldr	r0, [pc, #324]	@ (8019f80 <report_gcode_modes+0x260>)
 8019e3a:	4798      	blx	r3
        axis_signals_tostring(buf, gc_get_g51_state());
 8019e3c:	f7f3 fa36 	bl	800d2ac <gc_get_g51_state>
 8019e40:	4601      	mov	r1, r0
 8019e42:	4c50      	ldr	r4, [pc, #320]	@ (8019f84 <report_gcode_modes+0x264>)
 8019e44:	4620      	mov	r0, r4
 8019e46:	f7fe faa5 	bl	8018394 <axis_signals_tostring>
        hal.stream.write(buf);
 8019e4a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019e4e:	4620      	mov	r0, r4
 8019e50:	4798      	blx	r3
    if (gc_state.modal.program_flow) {
 8019e52:	4b42      	ldr	r3, [pc, #264]	@ (8019f5c <report_gcode_modes+0x23c>)
 8019e54:	7e1b      	ldrb	r3, [r3, #24]
 8019e56:	2b00      	cmp	r3, #0
 8019e58:	d069      	beq.n	8019f2e <report_gcode_modes+0x20e>
        switch (gc_state.modal.program_flow) {
 8019e5a:	2b1e      	cmp	r3, #30
 8019e5c:	d85a      	bhi.n	8019f14 <report_gcode_modes+0x1f4>
 8019e5e:	b25a      	sxtb	r2, r3
 8019e60:	2a00      	cmp	r2, #0
 8019e62:	d064      	beq.n	8019f2e <report_gcode_modes+0x20e>
 8019e64:	3b01      	subs	r3, #1
 8019e66:	2b1d      	cmp	r3, #29
 8019e68:	d861      	bhi.n	8019f2e <report_gcode_modes+0x20e>
 8019e6a:	e8df f003 	tbb	[pc, r3]
 8019e6e:	ab6d      	.short	0xab6d
 8019e70:	6060605b 	.word	0x6060605b
 8019e74:	60606060 	.word	0x60606060
 8019e78:	60606060 	.word	0x60606060
 8019e7c:	60606060 	.word	0x60606060
 8019e80:	60606060 	.word	0x60606060
 8019e84:	60606060 	.word	0x60606060
 8019e88:	b1606060 	.word	0xb1606060
        hal.stream.write(uitoa((uint32_t)gc_state.modal.motion));
 8019e8c:	4b31      	ldr	r3, [pc, #196]	@ (8019f54 <report_gcode_modes+0x234>)
 8019e8e:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8019e92:	f7fb fd95 	bl	80159c0 <uitoa>
 8019e96:	47a0      	blx	r4
 8019e98:	e75a      	b.n	8019d50 <report_gcode_modes+0x30>
        hal.stream.write(gc_state.modal.diameter_mode ? " G7" : " G8");
 8019e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8019f54 <report_gcode_modes+0x234>)
 8019e9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8019f5c <report_gcode_modes+0x23c>)
 8019ea2:	7952      	ldrb	r2, [r2, #5]
 8019ea4:	b112      	cbz	r2, 8019eac <report_gcode_modes+0x18c>
 8019ea6:	4838      	ldr	r0, [pc, #224]	@ (8019f88 <report_gcode_modes+0x268>)
 8019ea8:	4798      	blx	r3
 8019eaa:	e77a      	b.n	8019da2 <report_gcode_modes+0x82>
 8019eac:	4837      	ldr	r0, [pc, #220]	@ (8019f8c <report_gcode_modes+0x26c>)
 8019eae:	e7fb      	b.n	8019ea8 <report_gcode_modes+0x188>
    hal.stream.write(gc_state.modal.units_imperial ? " G20" : " G21");
 8019eb0:	4837      	ldr	r0, [pc, #220]	@ (8019f90 <report_gcode_modes+0x270>)
 8019eb2:	e789      	b.n	8019dc8 <report_gcode_modes+0xa8>
    hal.stream.write(gc_state.modal.distance_incremental ? " G91" : " G90");
 8019eb4:	4837      	ldr	r0, [pc, #220]	@ (8019f94 <report_gcode_modes+0x274>)
 8019eb6:	e790      	b.n	8019dda <report_gcode_modes+0xba>
    hal.stream.write(uitoa((uint32_t)(93 + (gc_state.modal.feed_mode == FeedMode_UnitsPerRev ? 2 : gc_state.modal.feed_mode ^ 1))));
 8019eb8:	205f      	movs	r0, #95	@ 0x5f
 8019eba:	e79d      	b.n	8019df8 <report_gcode_modes+0xd8>
    if(settings.mode == Mode_Lathe && gc_spindle_get()->cap.variable)
 8019ebc:	f7f3 fbc2 	bl	800d644 <gc_spindle_get>
 8019ec0:	7a83      	ldrb	r3, [r0, #10]
 8019ec2:	f013 0f01 	tst.w	r3, #1
 8019ec6:	d09e      	beq.n	8019e06 <report_gcode_modes+0xe6>
        hal.stream.write(gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? " G97" : " G96");
 8019ec8:	4b22      	ldr	r3, [pc, #136]	@ (8019f54 <report_gcode_modes+0x234>)
 8019eca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019ece:	4a23      	ldr	r2, [pc, #140]	@ (8019f5c <report_gcode_modes+0x23c>)
 8019ed0:	7ed2      	ldrb	r2, [r2, #27]
 8019ed2:	b912      	cbnz	r2, 8019eda <report_gcode_modes+0x1ba>
 8019ed4:	4830      	ldr	r0, [pc, #192]	@ (8019f98 <report_gcode_modes+0x278>)
 8019ed6:	4798      	blx	r3
 8019ed8:	e795      	b.n	8019e06 <report_gcode_modes+0xe6>
 8019eda:	4830      	ldr	r0, [pc, #192]	@ (8019f9c <report_gcode_modes+0x27c>)
 8019edc:	e7fb      	b.n	8019ed6 <report_gcode_modes+0x1b6>
        hal.stream.write(" G43");
 8019ede:	4b1d      	ldr	r3, [pc, #116]	@ (8019f54 <report_gcode_modes+0x234>)
 8019ee0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019ee4:	482e      	ldr	r0, [pc, #184]	@ (8019fa0 <report_gcode_modes+0x280>)
 8019ee6:	4798      	blx	r3
        if(gc_state.modal.tool_offset_mode != ToolLengthOffset_Enable)
 8019ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8019f5c <report_gcode_modes+0x23c>)
 8019eea:	79db      	ldrb	r3, [r3, #7]
 8019eec:	2b01      	cmp	r3, #1
 8019eee:	d093      	beq.n	8019e18 <report_gcode_modes+0xf8>
            hal.stream.write(gc_state.modal.tool_offset_mode == ToolLengthOffset_EnableDynamic ? ".1" : ".2");
 8019ef0:	4a18      	ldr	r2, [pc, #96]	@ (8019f54 <report_gcode_modes+0x234>)
 8019ef2:	f8d2 20b4 	ldr.w	r2, [r2, #180]	@ 0xb4
 8019ef6:	2b02      	cmp	r3, #2
 8019ef8:	d002      	beq.n	8019f00 <report_gcode_modes+0x1e0>
 8019efa:	482a      	ldr	r0, [pc, #168]	@ (8019fa4 <report_gcode_modes+0x284>)
 8019efc:	4790      	blx	r2
 8019efe:	e78b      	b.n	8019e18 <report_gcode_modes+0xf8>
 8019f00:	4829      	ldr	r0, [pc, #164]	@ (8019fa8 <report_gcode_modes+0x288>)
 8019f02:	e7fb      	b.n	8019efc <report_gcode_modes+0x1dc>
    hal.stream.write(gc_state.modal.retract_mode == CCRetractMode_RPos ? " G99" : " G98");
 8019f04:	4829      	ldr	r0, [pc, #164]	@ (8019fac <report_gcode_modes+0x28c>)
 8019f06:	e78f      	b.n	8019e28 <report_gcode_modes+0x108>
        hal.stream.write(" G50");
 8019f08:	4b12      	ldr	r3, [pc, #72]	@ (8019f54 <report_gcode_modes+0x234>)
 8019f0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019f0e:	4828      	ldr	r0, [pc, #160]	@ (8019fb0 <report_gcode_modes+0x290>)
 8019f10:	4798      	blx	r3
 8019f12:	e79e      	b.n	8019e52 <report_gcode_modes+0x132>
        switch (gc_state.modal.program_flow) {
 8019f14:	2b3c      	cmp	r3, #60	@ 0x3c
 8019f16:	d10a      	bne.n	8019f2e <report_gcode_modes+0x20e>
                hal.stream.write(" M60");
 8019f18:	4b0e      	ldr	r3, [pc, #56]	@ (8019f54 <report_gcode_modes+0x234>)
 8019f1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019f1e:	4825      	ldr	r0, [pc, #148]	@ (8019fb4 <report_gcode_modes+0x294>)
 8019f20:	4798      	blx	r3
                break;
 8019f22:	e004      	b.n	8019f2e <report_gcode_modes+0x20e>
                hal.stream.write(" M0");
 8019f24:	4b0b      	ldr	r3, [pc, #44]	@ (8019f54 <report_gcode_modes+0x234>)
 8019f26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019f2a:	4823      	ldr	r0, [pc, #140]	@ (8019fb8 <report_gcode_modes+0x298>)
 8019f2c:	4798      	blx	r3
    hal.stream.write(gc_state.modal.spindle.state.on ? (gc_state.modal.spindle.state.ccw ? " M4" : " M3") : " M5");
 8019f2e:	4b09      	ldr	r3, [pc, #36]	@ (8019f54 <report_gcode_modes+0x234>)
 8019f30:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8019f34:	4b09      	ldr	r3, [pc, #36]	@ (8019f5c <report_gcode_modes+0x23c>)
 8019f36:	7e9b      	ldrb	r3, [r3, #26]
 8019f38:	f013 0f01 	tst.w	r3, #1
 8019f3c:	d04e      	beq.n	8019fdc <report_gcode_modes+0x2bc>
 8019f3e:	f013 0f02 	tst.w	r3, #2
 8019f42:	d06c      	beq.n	801a01e <report_gcode_modes+0x2fe>
 8019f44:	481d      	ldr	r0, [pc, #116]	@ (8019fbc <report_gcode_modes+0x29c>)
 8019f46:	e04a      	b.n	8019fde <report_gcode_modes+0x2be>
                hal.stream.write(" M1");
 8019f48:	4b02      	ldr	r3, [pc, #8]	@ (8019f54 <report_gcode_modes+0x234>)
 8019f4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019f4e:	481c      	ldr	r0, [pc, #112]	@ (8019fc0 <report_gcode_modes+0x2a0>)
 8019f50:	4798      	blx	r3
                break;
 8019f52:	e7ec      	b.n	8019f2e <report_gcode_modes+0x20e>
 8019f54:	20001a90 	.word	0x20001a90
 8019f58:	0802c310 	.word	0x0802c310
 8019f5c:	200017c8 	.word	0x200017c8
 8019f60:	0802c318 	.word	0x0802c318
 8019f64:	0802c31c 	.word	0x0802c31c
 8019f68:	0802c320 	.word	0x0802c320
 8019f6c:	200024a8 	.word	0x200024a8
 8019f70:	0802c2c8 	.word	0x0802c2c8
 8019f74:	0802c2d8 	.word	0x0802c2d8
 8019f78:	0802c328 	.word	0x0802c328
 8019f7c:	0802c308 	.word	0x0802c308
 8019f80:	0802c338 	.word	0x0802c338
 8019f84:	20002378 	.word	0x20002378
 8019f88:	0802c2c0 	.word	0x0802c2c0
 8019f8c:	0802c2c4 	.word	0x0802c2c4
 8019f90:	0802c2d0 	.word	0x0802c2d0
 8019f94:	0802c2e0 	.word	0x0802c2e0
 8019f98:	0802c2e8 	.word	0x0802c2e8
 8019f9c:	0802c2f0 	.word	0x0802c2f0
 8019fa0:	0802c330 	.word	0x0802c330
 8019fa4:	0802c2fc 	.word	0x0802c2fc
 8019fa8:	0802c2f8 	.word	0x0802c2f8
 8019fac:	0802c300 	.word	0x0802c300
 8019fb0:	0802c340 	.word	0x0802c340
 8019fb4:	0802c35c 	.word	0x0802c35c
 8019fb8:	0802c348 	.word	0x0802c348
 8019fbc:	0802a2f0 	.word	0x0802a2f0
 8019fc0:	0802c34c 	.word	0x0802c34c
                hal.stream.write(" M2");
 8019fc4:	4b4e      	ldr	r3, [pc, #312]	@ (801a100 <report_gcode_modes+0x3e0>)
 8019fc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019fca:	484e      	ldr	r0, [pc, #312]	@ (801a104 <report_gcode_modes+0x3e4>)
 8019fcc:	4798      	blx	r3
                break;
 8019fce:	e7ae      	b.n	8019f2e <report_gcode_modes+0x20e>
                hal.stream.write(" M30");
 8019fd0:	4b4b      	ldr	r3, [pc, #300]	@ (801a100 <report_gcode_modes+0x3e0>)
 8019fd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019fd6:	484c      	ldr	r0, [pc, #304]	@ (801a108 <report_gcode_modes+0x3e8>)
 8019fd8:	4798      	blx	r3
                break;
 8019fda:	e7a8      	b.n	8019f2e <report_gcode_modes+0x20e>
    hal.stream.write(gc_state.modal.spindle.state.on ? (gc_state.modal.spindle.state.ccw ? " M4" : " M3") : " M5");
 8019fdc:	484b      	ldr	r0, [pc, #300]	@ (801a10c <report_gcode_modes+0x3ec>)
 8019fde:	4790      	blx	r2
    if(gc_state.tool_change)
 8019fe0:	4b4b      	ldr	r3, [pc, #300]	@ (801a110 <report_gcode_modes+0x3f0>)
 8019fe2:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8019fe6:	b123      	cbz	r3, 8019ff2 <report_gcode_modes+0x2d2>
        hal.stream.write(" M6");
 8019fe8:	4b45      	ldr	r3, [pc, #276]	@ (801a100 <report_gcode_modes+0x3e0>)
 8019fea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019fee:	4849      	ldr	r0, [pc, #292]	@ (801a114 <report_gcode_modes+0x3f4>)
 8019ff0:	4798      	blx	r3
    if (gc_state.modal.coolant.value) {
 8019ff2:	4b47      	ldr	r3, [pc, #284]	@ (801a110 <report_gcode_modes+0x3f0>)
 8019ff4:	7e5b      	ldrb	r3, [r3, #25]
 8019ff6:	b1a3      	cbz	r3, 801a022 <report_gcode_modes+0x302>
        if (gc_state.modal.coolant.mist)
 8019ff8:	f013 0f02 	tst.w	r3, #2
 8019ffc:	d004      	beq.n	801a008 <report_gcode_modes+0x2e8>
             hal.stream.write(" M7");
 8019ffe:	4b40      	ldr	r3, [pc, #256]	@ (801a100 <report_gcode_modes+0x3e0>)
 801a000:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a004:	4844      	ldr	r0, [pc, #272]	@ (801a118 <report_gcode_modes+0x3f8>)
 801a006:	4798      	blx	r3
        if (gc_state.modal.coolant.flood)
 801a008:	4b41      	ldr	r3, [pc, #260]	@ (801a110 <report_gcode_modes+0x3f0>)
 801a00a:	7e5b      	ldrb	r3, [r3, #25]
 801a00c:	f013 0f01 	tst.w	r3, #1
 801a010:	d00c      	beq.n	801a02c <report_gcode_modes+0x30c>
            hal.stream.write(" M8");
 801a012:	4b3b      	ldr	r3, [pc, #236]	@ (801a100 <report_gcode_modes+0x3e0>)
 801a014:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a018:	4840      	ldr	r0, [pc, #256]	@ (801a11c <report_gcode_modes+0x3fc>)
 801a01a:	4798      	blx	r3
 801a01c:	e006      	b.n	801a02c <report_gcode_modes+0x30c>
    hal.stream.write(gc_state.modal.spindle.state.on ? (gc_state.modal.spindle.state.ccw ? " M4" : " M3") : " M5");
 801a01e:	4840      	ldr	r0, [pc, #256]	@ (801a120 <report_gcode_modes+0x400>)
 801a020:	e7dd      	b.n	8019fde <report_gcode_modes+0x2be>
        hal.stream.write(" M9");
 801a022:	4b37      	ldr	r3, [pc, #220]	@ (801a100 <report_gcode_modes+0x3e0>)
 801a024:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a028:	483e      	ldr	r0, [pc, #248]	@ (801a124 <report_gcode_modes+0x404>)
 801a02a:	4798      	blx	r3
    if (sys.override.control.feed_rate_disable)
 801a02c:	4b3e      	ldr	r3, [pc, #248]	@ (801a128 <report_gcode_modes+0x408>)
 801a02e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801a032:	f013 0f01 	tst.w	r3, #1
 801a036:	d004      	beq.n	801a042 <report_gcode_modes+0x322>
        hal.stream.write(" M50");
 801a038:	4b31      	ldr	r3, [pc, #196]	@ (801a100 <report_gcode_modes+0x3e0>)
 801a03a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a03e:	483b      	ldr	r0, [pc, #236]	@ (801a12c <report_gcode_modes+0x40c>)
 801a040:	4798      	blx	r3
    if (sys.override.control.spindle_rpm_disable)
 801a042:	4b39      	ldr	r3, [pc, #228]	@ (801a128 <report_gcode_modes+0x408>)
 801a044:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801a048:	f013 0f04 	tst.w	r3, #4
 801a04c:	d004      	beq.n	801a058 <report_gcode_modes+0x338>
        hal.stream.write(" M51");
 801a04e:	4b2c      	ldr	r3, [pc, #176]	@ (801a100 <report_gcode_modes+0x3e0>)
 801a050:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a054:	4836      	ldr	r0, [pc, #216]	@ (801a130 <report_gcode_modes+0x410>)
 801a056:	4798      	blx	r3
    if (sys.override.control.feed_hold_disable)
 801a058:	4b33      	ldr	r3, [pc, #204]	@ (801a128 <report_gcode_modes+0x408>)
 801a05a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801a05e:	f013 0f02 	tst.w	r3, #2
 801a062:	d004      	beq.n	801a06e <report_gcode_modes+0x34e>
        hal.stream.write(" M53");
 801a064:	4b26      	ldr	r3, [pc, #152]	@ (801a100 <report_gcode_modes+0x3e0>)
 801a066:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a06a:	4832      	ldr	r0, [pc, #200]	@ (801a134 <report_gcode_modes+0x414>)
 801a06c:	4798      	blx	r3
    if (settings.parking.flags.enable_override_control && sys.override.control.parking_disable)
 801a06e:	4b32      	ldr	r3, [pc, #200]	@ (801a138 <report_gcode_modes+0x418>)
 801a070:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801a074:	f013 0f04 	tst.w	r3, #4
 801a078:	d00a      	beq.n	801a090 <report_gcode_modes+0x370>
 801a07a:	4b2b      	ldr	r3, [pc, #172]	@ (801a128 <report_gcode_modes+0x408>)
 801a07c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801a080:	f013 0f08 	tst.w	r3, #8
 801a084:	d004      	beq.n	801a090 <report_gcode_modes+0x370>
        hal.stream.write(" M56");
 801a086:	4b1e      	ldr	r3, [pc, #120]	@ (801a100 <report_gcode_modes+0x3e0>)
 801a088:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a08c:	482b      	ldr	r0, [pc, #172]	@ (801a13c <report_gcode_modes+0x41c>)
 801a08e:	4798      	blx	r3
    hal.stream.write(appendbuf(2, " T", uitoa((uint32_t)gc_state.tool->tool_id)));
 801a090:	4d1b      	ldr	r5, [pc, #108]	@ (801a100 <report_gcode_modes+0x3e0>)
 801a092:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 801a096:	4c1e      	ldr	r4, [pc, #120]	@ (801a110 <report_gcode_modes+0x3f0>)
 801a098:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 801a09c:	6918      	ldr	r0, [r3, #16]
 801a09e:	f7fb fc8f 	bl	80159c0 <uitoa>
 801a0a2:	4602      	mov	r2, r0
 801a0a4:	4926      	ldr	r1, [pc, #152]	@ (801a140 <report_gcode_modes+0x420>)
 801a0a6:	2002      	movs	r0, #2
 801a0a8:	f7fe fd5a 	bl	8018b60 <appendbuf>
 801a0ac:	47b0      	blx	r6
    hal.stream.write(appendbuf(2, " F", get_rate_value(gc_state.feed_rate)));
 801a0ae:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 801a0b2:	4b24      	ldr	r3, [pc, #144]	@ (801a144 <report_gcode_modes+0x424>)
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	ed94 0a18 	vldr	s0, [r4, #96]	@ 0x60
 801a0ba:	4798      	blx	r3
 801a0bc:	4602      	mov	r2, r0
 801a0be:	4922      	ldr	r1, [pc, #136]	@ (801a148 <report_gcode_modes+0x428>)
 801a0c0:	2002      	movs	r0, #2
 801a0c2:	f7fe fd4d 	bl	8018b60 <appendbuf>
 801a0c6:	47a8      	blx	r5
    if(gc_spindle_get()->cap.variable)
 801a0c8:	f7f3 fabc 	bl	800d644 <gc_spindle_get>
 801a0cc:	7a83      	ldrb	r3, [r0, #10]
 801a0ce:	f013 0f01 	tst.w	r3, #1
 801a0d2:	d105      	bne.n	801a0e0 <report_gcode_modes+0x3c0>
    hal.stream.write("]" ASCII_EOL);
 801a0d4:	4b0a      	ldr	r3, [pc, #40]	@ (801a100 <report_gcode_modes+0x3e0>)
 801a0d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a0da:	481c      	ldr	r0, [pc, #112]	@ (801a14c <report_gcode_modes+0x42c>)
 801a0dc:	4798      	blx	r3
}
 801a0de:	bd70      	pop	{r4, r5, r6, pc}
        hal.stream.write(appendbuf(2, " S", ftoa(gc_state.spindle.rpm, N_DECIMAL_RPMVALUE)));
 801a0e0:	4b07      	ldr	r3, [pc, #28]	@ (801a100 <report_gcode_modes+0x3e0>)
 801a0e2:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 801a0e6:	2000      	movs	r0, #0
 801a0e8:	4b09      	ldr	r3, [pc, #36]	@ (801a110 <report_gcode_modes+0x3f0>)
 801a0ea:	ed93 0a14 	vldr	s0, [r3, #80]	@ 0x50
 801a0ee:	f7fb fc89 	bl	8015a04 <ftoa>
 801a0f2:	4602      	mov	r2, r0
 801a0f4:	4916      	ldr	r1, [pc, #88]	@ (801a150 <report_gcode_modes+0x430>)
 801a0f6:	2002      	movs	r0, #2
 801a0f8:	f7fe fd32 	bl	8018b60 <appendbuf>
 801a0fc:	47a0      	blx	r4
 801a0fe:	e7e9      	b.n	801a0d4 <report_gcode_modes+0x3b4>
 801a100:	20001a90 	.word	0x20001a90
 801a104:	0802c350 	.word	0x0802c350
 801a108:	0802c354 	.word	0x0802c354
 801a10c:	0802a2f8 	.word	0x0802a2f8
 801a110:	200017c8 	.word	0x200017c8
 801a114:	0802a300 	.word	0x0802a300
 801a118:	0802a308 	.word	0x0802a308
 801a11c:	0802c364 	.word	0x0802c364
 801a120:	0802a2e8 	.word	0x0802a2e8
 801a124:	0802c368 	.word	0x0802c368
 801a128:	20001d70 	.word	0x20001d70
 801a12c:	0802c36c 	.word	0x0802c36c
 801a130:	0802c374 	.word	0x0802c374
 801a134:	0802c37c 	.word	0x0802c37c
 801a138:	200024a8 	.word	0x200024a8
 801a13c:	0802c384 	.word	0x0802c384
 801a140:	0802c38c 	.word	0x0802c38c
 801a144:	2000236c 	.word	0x2000236c
 801a148:	0802c390 	.word	0x0802c390
 801a14c:	0802bfd4 	.word	0x0802bfd4
 801a150:	0802c394 	.word	0x0802c394

0801a154 <report_startup_line>:
{
 801a154:	b570      	push	{r4, r5, r6, lr}
 801a156:	460d      	mov	r5, r1
    hal.stream.write(appendbuf(3, "$N", uitoa((uint32_t)n), "="));
 801a158:	4c0a      	ldr	r4, [pc, #40]	@ (801a184 <report_startup_line+0x30>)
 801a15a:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 801a15e:	f7fb fc2f 	bl	80159c0 <uitoa>
 801a162:	4602      	mov	r2, r0
 801a164:	4b08      	ldr	r3, [pc, #32]	@ (801a188 <report_startup_line+0x34>)
 801a166:	4909      	ldr	r1, [pc, #36]	@ (801a18c <report_startup_line+0x38>)
 801a168:	2003      	movs	r0, #3
 801a16a:	f7fe fcf9 	bl	8018b60 <appendbuf>
 801a16e:	47b0      	blx	r6
    hal.stream.write(line);
 801a170:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a174:	4628      	mov	r0, r5
 801a176:	4798      	blx	r3
    hal.stream.write(ASCII_EOL);
 801a178:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a17c:	4804      	ldr	r0, [pc, #16]	@ (801a190 <report_startup_line+0x3c>)
 801a17e:	4798      	blx	r3
}
 801a180:	bd70      	pop	{r4, r5, r6, pc}
 801a182:	bf00      	nop
 801a184:	20001a90 	.word	0x20001a90
 801a188:	0802c24c 	.word	0x0802c24c
 801a18c:	0802c398 	.word	0x0802c398
 801a190:	0802c680 	.word	0x0802c680

0801a194 <report_execute_startup_message>:
{
 801a194:	b570      	push	{r4, r5, r6, lr}
 801a196:	4606      	mov	r6, r0
 801a198:	460c      	mov	r4, r1
    hal.stream.write(">");
 801a19a:	4d09      	ldr	r5, [pc, #36]	@ (801a1c0 <report_execute_startup_message+0x2c>)
 801a19c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801a1a0:	4808      	ldr	r0, [pc, #32]	@ (801a1c4 <report_execute_startup_message+0x30>)
 801a1a2:	4798      	blx	r3
    hal.stream.write(line);
 801a1a4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801a1a8:	4630      	mov	r0, r6
 801a1aa:	4798      	blx	r3
    hal.stream.write(":");
 801a1ac:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801a1b0:	4805      	ldr	r0, [pc, #20]	@ (801a1c8 <report_execute_startup_message+0x34>)
 801a1b2:	4798      	blx	r3
    grbl.report.status_message(status_code);
 801a1b4:	4b05      	ldr	r3, [pc, #20]	@ (801a1cc <report_execute_startup_message+0x38>)
 801a1b6:	689b      	ldr	r3, [r3, #8]
 801a1b8:	4620      	mov	r0, r4
 801a1ba:	4798      	blx	r3
}
 801a1bc:	bd70      	pop	{r4, r5, r6, pc}
 801a1be:	bf00      	nop
 801a1c0:	20001a90 	.word	0x20001a90
 801a1c4:	0802c39c 	.word	0x0802c39c
 801a1c8:	0802c33c 	.word	0x0802c33c
 801a1cc:	20001c78 	.word	0x20001c78

0801a1d0 <report_build_info>:
{
 801a1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1d2:	b09b      	sub	sp, #108	@ 0x6c
 801a1d4:	4605      	mov	r5, r0
    hal.stream.write("[VER:" GRBL_VERSION ".");
 801a1d6:	4c7f      	ldr	r4, [pc, #508]	@ (801a3d4 <report_build_info+0x204>)
 801a1d8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a1dc:	487e      	ldr	r0, [pc, #504]	@ (801a3d8 <report_build_info+0x208>)
 801a1de:	4798      	blx	r3
    hal.stream.write(uitoa(GRBL_BUILD));
 801a1e0:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 801a1e4:	487d      	ldr	r0, [pc, #500]	@ (801a3dc <report_build_info+0x20c>)
 801a1e6:	f7fb fbeb 	bl	80159c0 <uitoa>
 801a1ea:	47b0      	blx	r6
    hal.stream.write(":");
 801a1ec:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a1f0:	487b      	ldr	r0, [pc, #492]	@ (801a3e0 <report_build_info+0x210>)
 801a1f2:	4798      	blx	r3
    hal.stream.write(line);
 801a1f4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a1f8:	4628      	mov	r0, r5
 801a1fa:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 801a1fc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a200:	4878      	ldr	r0, [pc, #480]	@ (801a3e4 <report_build_info+0x214>)
 801a202:	4798      	blx	r3
    spindle_ptrs_t *spindle = spindle_get(0);
 801a204:	2000      	movs	r0, #0
 801a206:	f004 fa0f 	bl	801e628 <spindle_get>
 801a20a:	4603      	mov	r3, r0
    strcpy(buf, "[OPT:");
 801a20c:	4a76      	ldr	r2, [pc, #472]	@ (801a3e8 <report_build_info+0x218>)
 801a20e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a212:	9001      	str	r0, [sp, #4]
 801a214:	f8ad 1008 	strh.w	r1, [sp, #8]
    if(spindle && spindle->cap.variable)
 801a218:	461a      	mov	r2, r3
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	f000 80d4 	beq.w	801a3c8 <report_build_info+0x1f8>
 801a220:	7a9b      	ldrb	r3, [r3, #10]
 801a222:	f013 0f01 	tst.w	r3, #1
 801a226:	f000 80d2 	beq.w	801a3ce <report_build_info+0x1fe>
        *append++ = 'V';
 801a22a:	2356      	movs	r3, #86	@ 0x56
 801a22c:	f88d 3009 	strb.w	r3, [sp, #9]
 801a230:	f10d 010a 	add.w	r1, sp, #10
    *append++ = 'N';
 801a234:	460b      	mov	r3, r1
 801a236:	204e      	movs	r0, #78	@ 0x4e
 801a238:	f803 0b01 	strb.w	r0, [r3], #1
    if(hal.coolant_cap.mist)
 801a23c:	4865      	ldr	r0, [pc, #404]	@ (801a3d4 <report_build_info+0x204>)
 801a23e:	f890 01e4 	ldrb.w	r0, [r0, #484]	@ 0x1e4
 801a242:	f010 0f02 	tst.w	r0, #2
 801a246:	d002      	beq.n	801a24e <report_build_info+0x7e>
        *append++ = 'M';
 801a248:	1c8b      	adds	r3, r1, #2
 801a24a:	204d      	movs	r0, #77	@ 0x4d
 801a24c:	7048      	strb	r0, [r1, #1]
    if(settings.parking.flags.enabled)
 801a24e:	4967      	ldr	r1, [pc, #412]	@ (801a3ec <report_build_info+0x21c>)
 801a250:	f891 1128 	ldrb.w	r1, [r1, #296]	@ 0x128
 801a254:	f011 0f01 	tst.w	r1, #1
 801a258:	d002      	beq.n	801a260 <report_build_info+0x90>
        *append++ = 'P';
 801a25a:	2150      	movs	r1, #80	@ 0x50
 801a25c:	f803 1b01 	strb.w	r1, [r3], #1
    if(settings.homing.flags.force_set_origin)
 801a260:	4962      	ldr	r1, [pc, #392]	@ (801a3ec <report_build_info+0x21c>)
 801a262:	f891 1114 	ldrb.w	r1, [r1, #276]	@ 0x114
 801a266:	f011 0f08 	tst.w	r1, #8
 801a26a:	d002      	beq.n	801a272 <report_build_info+0xa2>
        *append++ = 'Z';
 801a26c:	215a      	movs	r1, #90	@ 0x5a
 801a26e:	f803 1b01 	strb.w	r1, [r3], #1
    if(settings.homing.flags.single_axis_commands)
 801a272:	495e      	ldr	r1, [pc, #376]	@ (801a3ec <report_build_info+0x21c>)
 801a274:	f891 1114 	ldrb.w	r1, [r1, #276]	@ 0x114
 801a278:	f011 0f02 	tst.w	r1, #2
 801a27c:	d002      	beq.n	801a284 <report_build_info+0xb4>
        *append++ = 'H';
 801a27e:	2148      	movs	r1, #72	@ 0x48
 801a280:	f803 1b01 	strb.w	r1, [r3], #1
    if(settings.limits.flags.two_switches)
 801a284:	4959      	ldr	r1, [pc, #356]	@ (801a3ec <report_build_info+0x21c>)
 801a286:	f891 1124 	ldrb.w	r1, [r1, #292]	@ 0x124
 801a28a:	f011 0f10 	tst.w	r1, #16
 801a28e:	d002      	beq.n	801a296 <report_build_info+0xc6>
        *append++ = 'T';
 801a290:	2154      	movs	r1, #84	@ 0x54
 801a292:	f803 1b01 	strb.w	r1, [r3], #1
    if(settings.probe.allow_feed_override)
 801a296:	4955      	ldr	r1, [pc, #340]	@ (801a3ec <report_build_info+0x21c>)
 801a298:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
 801a29c:	f011 0f10 	tst.w	r1, #16
 801a2a0:	d002      	beq.n	801a2a8 <report_build_info+0xd8>
        *append++ = 'A';
 801a2a2:	2141      	movs	r1, #65	@ 0x41
 801a2a4:	f803 1b01 	strb.w	r1, [r3], #1
    if(spindle && !spindle->cap.direction) // NOTE: Shown when disabled.
 801a2a8:	b132      	cbz	r2, 801a2b8 <report_build_info+0xe8>
 801a2aa:	7a92      	ldrb	r2, [r2, #10]
 801a2ac:	f012 0f02 	tst.w	r2, #2
 801a2b0:	d102      	bne.n	801a2b8 <report_build_info+0xe8>
        *append++ = 'D';
 801a2b2:	2244      	movs	r2, #68	@ 0x44
 801a2b4:	f803 2b01 	strb.w	r2, [r3], #1
    if(settings.spindle.flags.enable_rpm_controlled)
 801a2b8:	4a4c      	ldr	r2, [pc, #304]	@ (801a3ec <report_build_info+0x21c>)
 801a2ba:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 801a2be:	f012 0f01 	tst.w	r2, #1
 801a2c2:	d002      	beq.n	801a2ca <report_build_info+0xfa>
        *append++ = '0';
 801a2c4:	2230      	movs	r2, #48	@ 0x30
 801a2c6:	f803 2b01 	strb.w	r2, [r3], #1
    if(hal.driver_cap.software_debounce)
 801a2ca:	4a42      	ldr	r2, [pc, #264]	@ (801a3d4 <report_build_info+0x204>)
 801a2cc:	f892 21d8 	ldrb.w	r2, [r2, #472]	@ 0x1d8
 801a2d0:	f012 0f01 	tst.w	r2, #1
 801a2d4:	d002      	beq.n	801a2dc <report_build_info+0x10c>
        *append++ = 'S';
 801a2d6:	2253      	movs	r2, #83	@ 0x53
 801a2d8:	f803 2b01 	strb.w	r2, [r3], #1
    if(settings.parking.flags.enable_override_control)
 801a2dc:	4a43      	ldr	r2, [pc, #268]	@ (801a3ec <report_build_info+0x21c>)
 801a2de:	f892 2128 	ldrb.w	r2, [r2, #296]	@ 0x128
 801a2e2:	f012 0f04 	tst.w	r2, #4
 801a2e6:	d002      	beq.n	801a2ee <report_build_info+0x11e>
        *append++ = 'R';
 801a2e8:	2252      	movs	r2, #82	@ 0x52
 801a2ea:	f803 2b01 	strb.w	r2, [r3], #1
    if(!settings.homing.flags.init_lock)
 801a2ee:	4a3f      	ldr	r2, [pc, #252]	@ (801a3ec <report_build_info+0x21c>)
 801a2f0:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 801a2f4:	f012 0f04 	tst.w	r2, #4
 801a2f8:	d102      	bne.n	801a300 <report_build_info+0x130>
        *append++ = 'L';
 801a2fa:	224c      	movs	r2, #76	@ 0x4c
 801a2fc:	f803 2b01 	strb.w	r2, [r3], #1
    if(hal.signals_cap.safety_door_ajar)
 801a300:	4a34      	ldr	r2, [pc, #208]	@ (801a3d4 <report_build_info+0x204>)
 801a302:	f892 21dc 	ldrb.w	r2, [r2, #476]	@ 0x1dc
 801a306:	f012 0f08 	tst.w	r2, #8
 801a30a:	d002      	beq.n	801a312 <report_build_info+0x142>
        *append++ = '+';
 801a30c:	222b      	movs	r2, #43	@ 0x2b
 801a30e:	f803 2b01 	strb.w	r2, [r3], #1
    if(!settings.status_report.sync_on_wco_change) // NOTE: Shown when disabled.
 801a312:	4a36      	ldr	r2, [pc, #216]	@ (801a3ec <report_build_info+0x21c>)
 801a314:	f892 20fd 	ldrb.w	r2, [r2, #253]	@ 0xfd
 801a318:	f012 0f01 	tst.w	r2, #1
 801a31c:	d102      	bne.n	801a324 <report_build_info+0x154>
        *append++ = 'W';
 801a31e:	2257      	movs	r2, #87	@ 0x57
 801a320:	f803 2b01 	strb.w	r2, [r3], #1
    if(hal.stepper.get_ganged)
 801a324:	4a2b      	ldr	r2, [pc, #172]	@ (801a3d4 <report_build_info+0x204>)
 801a326:	f8d2 209c 	ldr.w	r2, [r2, #156]	@ 0x9c
 801a32a:	b112      	cbz	r2, 801a332 <report_build_info+0x162>
        *append++ = '2';
 801a32c:	2232      	movs	r2, #50	@ 0x32
 801a32e:	f803 2b01 	strb.w	r2, [r3], #1
    *append++ = ',';
 801a332:	222c      	movs	r2, #44	@ 0x2c
 801a334:	701a      	strb	r2, [r3, #0]
    *append = '\0';
 801a336:	2400      	movs	r4, #0
 801a338:	705c      	strb	r4, [r3, #1]
    hal.stream.write(buf);
 801a33a:	4d26      	ldr	r5, [pc, #152]	@ (801a3d4 <report_build_info+0x204>)
 801a33c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801a340:	a801      	add	r0, sp, #4
 801a342:	4798      	blx	r3
    hal.stream.write(uitoa((uint32_t)plan_get_buffer_size()));
 801a344:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 801a348:	f7fc fa20 	bl	801678c <plan_get_buffer_size>
 801a34c:	f7fb fb38 	bl	80159c0 <uitoa>
 801a350:	47b0      	blx	r6
    hal.stream.write(",");
 801a352:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801a356:	4e26      	ldr	r6, [pc, #152]	@ (801a3f0 <report_build_info+0x220>)
 801a358:	4630      	mov	r0, r6
 801a35a:	4798      	blx	r3
    hal.stream.write(uitoa(hal.rx_buffer_size));
 801a35c:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 801a360:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 801a362:	f7fb fb2d 	bl	80159c0 <uitoa>
 801a366:	47b8      	blx	r7
        hal.stream.write(",");
 801a368:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801a36c:	4630      	mov	r0, r6
 801a36e:	4798      	blx	r3
        hal.stream.write(uitoa((uint32_t)N_AXIS));
 801a370:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 801a374:	2003      	movs	r0, #3
 801a376:	f7fb fb23 	bl	80159c0 <uitoa>
 801a37a:	47b8      	blx	r7
        hal.stream.write(",");
 801a37c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801a380:	4630      	mov	r0, r6
 801a382:	4798      	blx	r3
        hal.stream.write(uitoa(grbl.tool_table.n_tools));
 801a384:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 801a388:	4b1a      	ldr	r3, [pc, #104]	@ (801a3f4 <report_build_info+0x224>)
 801a38a:	6998      	ldr	r0, [r3, #24]
 801a38c:	f7fb fb18 	bl	80159c0 <uitoa>
 801a390:	47b0      	blx	r6
    hal.stream.write("]" ASCII_EOL);
 801a392:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801a396:	4813      	ldr	r0, [pc, #76]	@ (801a3e4 <report_build_info+0x214>)
 801a398:	4798      	blx	r3
        nvs_io_t *nvs = nvs_buffer_get_physical();
 801a39a:	f7fc f859 	bl	8016450 <nvs_buffer_get_physical>
 801a39e:	4605      	mov	r5, r0
        strcat(strcpy(buf, "[AXS:"), uitoa(N_AXIS));
 801a3a0:	4b15      	ldr	r3, [pc, #84]	@ (801a3f8 <report_build_info+0x228>)
 801a3a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a3a6:	9001      	str	r0, [sp, #4]
 801a3a8:	f8ad 1008 	strh.w	r1, [sp, #8]
 801a3ac:	2003      	movs	r0, #3
 801a3ae:	f7fb fb07 	bl	80159c0 <uitoa>
 801a3b2:	4601      	mov	r1, r0
 801a3b4:	a801      	add	r0, sp, #4
 801a3b6:	f00a fcc2 	bl	8024d3e <strcat>
        *append++ = ':';
 801a3ba:	233a      	movs	r3, #58	@ 0x3a
 801a3bc:	f88d 300a 	strb.w	r3, [sp, #10]
        for(idx = 0; idx < N_AXIS; idx++)
 801a3c0:	4622      	mov	r2, r4
        *append++ = ':';
 801a3c2:	f10d 030b 	add.w	r3, sp, #11
        for(idx = 0; idx < N_AXIS; idx++)
 801a3c6:	e020      	b.n	801a40a <report_build_info+0x23a>
    char *append = &buf[5];
 801a3c8:	f10d 0109 	add.w	r1, sp, #9
 801a3cc:	e732      	b.n	801a234 <report_build_info+0x64>
 801a3ce:	f10d 0109 	add.w	r1, sp, #9
 801a3d2:	e72f      	b.n	801a234 <report_build_info+0x64>
 801a3d4:	20001a90 	.word	0x20001a90
 801a3d8:	0802c3cc 	.word	0x0802c3cc
 801a3dc:	0134d94f 	.word	0x0134d94f
 801a3e0:	0802c33c 	.word	0x0802c33c
 801a3e4:	0802bfd4 	.word	0x0802bfd4
 801a3e8:	0802c3d8 	.word	0x0802c3d8
 801a3ec:	200024a8 	.word	0x200024a8
 801a3f0:	0802c400 	.word	0x0802c400
 801a3f4:	20001c78 	.word	0x20001c78
 801a3f8:	0802c3e0 	.word	0x0802c3e0
            *append++ = *axis_letter[idx];
 801a3fc:	49ab      	ldr	r1, [pc, #684]	@ (801a6ac <report_build_info+0x4dc>)
 801a3fe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a402:	7809      	ldrb	r1, [r1, #0]
 801a404:	f803 1b01 	strb.w	r1, [r3], #1
        for(idx = 0; idx < N_AXIS; idx++)
 801a408:	3201      	adds	r2, #1
 801a40a:	2a02      	cmp	r2, #2
 801a40c:	d9f6      	bls.n	801a3fc <report_build_info+0x22c>
        *append = '\0';
 801a40e:	2200      	movs	r2, #0
 801a410:	701a      	strb	r2, [r3, #0]
        hal.stream.write(strcat(buf, "]" ASCII_EOL));
 801a412:	4ba7      	ldr	r3, [pc, #668]	@ (801a6b0 <report_build_info+0x4e0>)
 801a414:	f8d3 60b4 	ldr.w	r6, [r3, #180]	@ 0xb4
 801a418:	ac01      	add	r4, sp, #4
 801a41a:	4620      	mov	r0, r4
 801a41c:	f7ed fe70 	bl	8008100 <strlen>
 801a420:	4603      	mov	r3, r0
 801a422:	4aa4      	ldr	r2, [pc, #656]	@ (801a6b4 <report_build_info+0x4e4>)
 801a424:	6810      	ldr	r0, [r2, #0]
 801a426:	50e0      	str	r0, [r4, r3]
 801a428:	4620      	mov	r0, r4
 801a42a:	47b0      	blx	r6
        strcpy(buf, "[NEWOPT:ENUMS,RT");
 801a42c:	4ea2      	ldr	r6, [pc, #648]	@ (801a6b8 <report_build_info+0x4e8>)
 801a42e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a432:	6833      	ldr	r3, [r6, #0]
 801a434:	7023      	strb	r3, [r4, #0]
        strcat(buf, settings.flags.legacy_rt_commands ? "+," : "-,");
 801a436:	4ba1      	ldr	r3, [pc, #644]	@ (801a6bc <report_build_info+0x4ec>)
 801a438:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 801a43c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801a440:	f000 81b7 	beq.w	801a7b2 <report_build_info+0x5e2>
 801a444:	4e9e      	ldr	r6, [pc, #632]	@ (801a6c0 <report_build_info+0x4f0>)
 801a446:	ac01      	add	r4, sp, #4
 801a448:	4620      	mov	r0, r4
 801a44a:	f7ed fe59 	bl	8008100 <strlen>
 801a44e:	1823      	adds	r3, r4, r0
 801a450:	8831      	ldrh	r1, [r6, #0]
 801a452:	78b2      	ldrb	r2, [r6, #2]
 801a454:	5221      	strh	r1, [r4, r0]
 801a456:	709a      	strb	r2, [r3, #2]
        if(settings.homing.flags.enabled)
 801a458:	4b98      	ldr	r3, [pc, #608]	@ (801a6bc <report_build_info+0x4ec>)
 801a45a:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 801a45e:	f013 0f01 	tst.w	r3, #1
 801a462:	f040 81a8 	bne.w	801a7b6 <report_build_info+0x5e6>
        if(!hal.probe.get_state)
 801a466:	4b92      	ldr	r3, [pc, #584]	@ (801a6b0 <report_build_info+0x4e0>)
 801a468:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	f000 81ad 	beq.w	801a7cc <report_build_info+0x5fc>
        else if(hal.signals_cap.probe_disconnected)
 801a472:	4b8f      	ldr	r3, [pc, #572]	@ (801a6b0 <report_build_info+0x4e0>)
 801a474:	f993 31dc 	ldrsb.w	r3, [r3, #476]	@ 0x1dc
 801a478:	2b00      	cmp	r3, #0
 801a47a:	f2c0 81b4 	blt.w	801a7e6 <report_build_info+0x616>
        if(hal.signals_cap.stop_disable)
 801a47e:	4b8c      	ldr	r3, [pc, #560]	@ (801a6b0 <report_build_info+0x4e0>)
 801a480:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801a484:	f013 0f20 	tst.w	r3, #32
 801a488:	f040 81b6 	bne.w	801a7f8 <report_build_info+0x628>
        if(hal.signals_cap.block_delete)
 801a48c:	4b88      	ldr	r3, [pc, #544]	@ (801a6b0 <report_build_info+0x4e0>)
 801a48e:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801a492:	f013 0f10 	tst.w	r3, #16
 801a496:	f040 81b8 	bne.w	801a80a <report_build_info+0x63a>
        if(hal.signals_cap.e_stop)
 801a49a:	4b85      	ldr	r3, [pc, #532]	@ (801a6b0 <report_build_info+0x4e0>)
 801a49c:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801a4a0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801a4a4:	f040 81ba 	bne.w	801a81c <report_build_info+0x64c>
        if(hal.driver_cap.mpg_mode)
 801a4a8:	4b81      	ldr	r3, [pc, #516]	@ (801a6b0 <report_build_info+0x4e0>)
 801a4aa:	f993 31d9 	ldrsb.w	r3, [r3, #473]	@ 0x1d9
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	f2c0 81bd 	blt.w	801a82e <report_build_info+0x65e>
        if(settings.mode == Mode_Lathe)
 801a4b4:	4b81      	ldr	r3, [pc, #516]	@ (801a6bc <report_build_info+0x4ec>)
 801a4b6:	7e1b      	ldrb	r3, [r3, #24]
 801a4b8:	2b02      	cmp	r3, #2
 801a4ba:	f000 81c4 	beq.w	801a846 <report_build_info+0x676>
        if(hal.driver_cap.laser_ppi_mode)
 801a4be:	4b7c      	ldr	r3, [pc, #496]	@ (801a6b0 <report_build_info+0x4e0>)
 801a4c0:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 801a4c4:	f013 0f01 	tst.w	r3, #1
 801a4c8:	f040 81cb 	bne.w	801a862 <report_build_info+0x692>
        if(hal.reboot)
 801a4cc:	4b78      	ldr	r3, [pc, #480]	@ (801a6b0 <report_build_info+0x4e0>)
 801a4ce:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 801a4d2:	b14b      	cbz	r3, 801a4e8 <report_build_info+0x318>
            strcat(buf, "REBOOT,");
 801a4d4:	ac01      	add	r4, sp, #4
 801a4d6:	4620      	mov	r0, r4
 801a4d8:	f7ed fe12 	bl	8008100 <strlen>
 801a4dc:	4603      	mov	r3, r0
 801a4de:	1826      	adds	r6, r4, r0
 801a4e0:	4a78      	ldr	r2, [pc, #480]	@ (801a6c4 <report_build_info+0x4f4>)
 801a4e2:	ca03      	ldmia	r2!, {r0, r1}
 801a4e4:	50e0      	str	r0, [r4, r3]
 801a4e6:	6071      	str	r1, [r6, #4]
        if(hal.tool.change)
 801a4e8:	4b71      	ldr	r3, [pc, #452]	@ (801a6b0 <report_build_info+0x4e0>)
 801a4ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801a4ee:	b153      	cbz	r3, 801a506 <report_build_info+0x336>
            strcat(buf, hal.driver_cap.atc ? "ATC," : "TC,"); // Tool change supported (M6)
 801a4f0:	4b6f      	ldr	r3, [pc, #444]	@ (801a6b0 <report_build_info+0x4e0>)
 801a4f2:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 801a4f6:	f013 0f02 	tst.w	r3, #2
 801a4fa:	f000 81be 	beq.w	801a87a <report_build_info+0x6aa>
 801a4fe:	4972      	ldr	r1, [pc, #456]	@ (801a6c8 <report_build_info+0x4f8>)
 801a500:	a801      	add	r0, sp, #4
 801a502:	f00a fc1c 	bl	8024d3e <strcat>
        if(hal.driver_cap.spindle_sync)
 801a506:	4b6a      	ldr	r3, [pc, #424]	@ (801a6b0 <report_build_info+0x4e0>)
 801a508:	f893 31d9 	ldrb.w	r3, [r3, #473]	@ 0x1d9
 801a50c:	f013 0f01 	tst.w	r3, #1
 801a510:	f040 81b5 	bne.w	801a87e <report_build_info+0x6ae>
        strcat(buf, "SED,");
 801a514:	ac01      	add	r4, sp, #4
 801a516:	4620      	mov	r0, r4
 801a518:	f7ed fdf2 	bl	8008100 <strlen>
 801a51c:	4603      	mov	r3, r0
 801a51e:	1821      	adds	r1, r4, r0
 801a520:	4a6a      	ldr	r2, [pc, #424]	@ (801a6cc <report_build_info+0x4fc>)
 801a522:	6810      	ldr	r0, [r2, #0]
 801a524:	50e0      	str	r0, [r4, r3]
 801a526:	7913      	ldrb	r3, [r2, #4]
 801a528:	710b      	strb	r3, [r1, #4]
        if(hal.rtc.get_datetime)
 801a52a:	4b61      	ldr	r3, [pc, #388]	@ (801a6b0 <report_build_info+0x4e0>)
 801a52c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801a530:	b14b      	cbz	r3, 801a546 <report_build_info+0x376>
            strcat(buf, "RTC,");
 801a532:	4620      	mov	r0, r4
 801a534:	f7ed fde4 	bl	8008100 <strlen>
 801a538:	4603      	mov	r3, r0
 801a53a:	1821      	adds	r1, r4, r0
 801a53c:	4a64      	ldr	r2, [pc, #400]	@ (801a6d0 <report_build_info+0x500>)
 801a53e:	6810      	ldr	r0, [r2, #0]
 801a540:	50e0      	str	r0, [r4, r3]
 801a542:	7913      	ldrb	r3, [r2, #4]
 801a544:	710b      	strb	r3, [r1, #4]
        if(canbus_enabled())
 801a546:	f7f2 fcff 	bl	800cf48 <canbus_enabled>
 801a54a:	2800      	cmp	r0, #0
 801a54c:	f040 81a0 	bne.w	801a890 <report_build_info+0x6c0>
        append = &buf[strlen(buf) - 1];
 801a550:	a801      	add	r0, sp, #4
 801a552:	f7ed fdd5 	bl	8008100 <strlen>
        if(*append == ',')
 801a556:	f100 0367 	add.w	r3, r0, #103	@ 0x67
        append = &buf[strlen(buf) - 1];
 801a55a:	3801      	subs	r0, #1
        if(*append == ',')
 801a55c:	446b      	add	r3, sp
 801a55e:	f813 3c64 	ldrb.w	r3, [r3, #-100]
 801a562:	2b2c      	cmp	r3, #44	@ 0x2c
 801a564:	f000 81a0 	beq.w	801a8a8 <report_build_info+0x6d8>
        hal.stream.write(buf);
 801a568:	4c51      	ldr	r4, [pc, #324]	@ (801a6b0 <report_build_info+0x4e0>)
 801a56a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a56e:	a801      	add	r0, sp, #4
 801a570:	4798      	blx	r3
        grbl.on_report_options(true);
 801a572:	4b58      	ldr	r3, [pc, #352]	@ (801a6d4 <report_build_info+0x504>)
 801a574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a576:	2001      	movs	r0, #1
 801a578:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 801a57a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a57e:	4e4d      	ldr	r6, [pc, #308]	@ (801a6b4 <report_build_info+0x4e4>)
 801a580:	4630      	mov	r0, r6
 801a582:	4798      	blx	r3
        hal.stream.write("[FIRMWARE:grblHAL]" ASCII_EOL);
 801a584:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a588:	4853      	ldr	r0, [pc, #332]	@ (801a6d8 <report_build_info+0x508>)
 801a58a:	4798      	blx	r3
        hal.stream.write("[SIGNALS:");
 801a58c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a590:	4852      	ldr	r0, [pc, #328]	@ (801a6dc <report_build_info+0x50c>)
 801a592:	4798      	blx	r3
        control_signals_tostring(buf, hal.signals_cap);
 801a594:	f8b4 11dc 	ldrh.w	r1, [r4, #476]	@ 0x1dc
 801a598:	a801      	add	r0, sp, #4
 801a59a:	f7fd ff13 	bl	80183c4 <control_signals_tostring>
        hal.stream.write(buf);
 801a59e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a5a2:	a801      	add	r0, sp, #4
 801a5a4:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 801a5a6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a5aa:	4630      	mov	r0, r6
 801a5ac:	4798      	blx	r3
        if(!(nvs->type == NVS_None || nvs->type == NVS_Emulated)) {
 801a5ae:	782b      	ldrb	r3, [r5, #0]
 801a5b0:	b33b      	cbz	r3, 801a602 <report_build_info+0x432>
 801a5b2:	2b04      	cmp	r3, #4
 801a5b4:	d025      	beq.n	801a602 <report_build_info+0x432>
            hal.stream.write("[NVS STORAGE:");
 801a5b6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a5ba:	4849      	ldr	r0, [pc, #292]	@ (801a6e0 <report_build_info+0x510>)
 801a5bc:	4798      	blx	r3
            *buf = '\0';
 801a5be:	2300      	movs	r3, #0
 801a5c0:	f88d 3004 	strb.w	r3, [sp, #4]
            if(hal.nvs.type == NVS_Emulated)
 801a5c4:	f894 3174 	ldrb.w	r3, [r4, #372]	@ 0x174
 801a5c8:	2b04      	cmp	r3, #4
 801a5ca:	f000 8175 	beq.w	801a8b8 <report_build_info+0x6e8>
            strcat(buf, nvs->type == NVS_Flash ? "FLASH" : (nvs->type == NVS_FRAM ? "FRAM" : "EEPROM"));
 801a5ce:	782b      	ldrb	r3, [r5, #0]
 801a5d0:	2b03      	cmp	r3, #3
 801a5d2:	f000 817b 	beq.w	801a8cc <report_build_info+0x6fc>
 801a5d6:	2b02      	cmp	r3, #2
 801a5d8:	f000 8176 	beq.w	801a8c8 <report_build_info+0x6f8>
 801a5dc:	4941      	ldr	r1, [pc, #260]	@ (801a6e4 <report_build_info+0x514>)
 801a5de:	a801      	add	r0, sp, #4
 801a5e0:	f00a fbad 	bl	8024d3e <strcat>
            if(hal.nvs.size_max) {
 801a5e4:	4b32      	ldr	r3, [pc, #200]	@ (801a6b0 <report_build_info+0x4e0>)
 801a5e6:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	f040 8170 	bne.w	801a8d0 <report_build_info+0x700>
            hal.stream.write(buf);
 801a5f0:	4c2f      	ldr	r4, [pc, #188]	@ (801a6b0 <report_build_info+0x4e0>)
 801a5f2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a5f6:	a801      	add	r0, sp, #4
 801a5f8:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 801a5fa:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a5fe:	482d      	ldr	r0, [pc, #180]	@ (801a6b4 <report_build_info+0x4e4>)
 801a600:	4798      	blx	r3
        if(hal.get_free_mem) {
 801a602:	4b2b      	ldr	r3, [pc, #172]	@ (801a6b0 <report_build_info+0x4e0>)
 801a604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a606:	b183      	cbz	r3, 801a62a <report_build_info+0x45a>
            hal.stream.write("[FREE MEMORY:");
 801a608:	4c29      	ldr	r4, [pc, #164]	@ (801a6b0 <report_build_info+0x4e0>)
 801a60a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a60e:	4836      	ldr	r0, [pc, #216]	@ (801a6e8 <report_build_info+0x518>)
 801a610:	4798      	blx	r3
            hal.stream.write(uitoa(hal.get_free_mem() / 1024));
 801a612:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 801a616:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a618:	4798      	blx	r3
 801a61a:	0a80      	lsrs	r0, r0, #10
 801a61c:	f7fb f9d0 	bl	80159c0 <uitoa>
 801a620:	47a8      	blx	r5
            hal.stream.write("K]" ASCII_EOL);
 801a622:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a626:	4831      	ldr	r0, [pc, #196]	@ (801a6ec <report_build_info+0x51c>)
 801a628:	4798      	blx	r3
        if(hal.info) {
 801a62a:	4b21      	ldr	r3, [pc, #132]	@ (801a6b0 <report_build_info+0x4e0>)
 801a62c:	685b      	ldr	r3, [r3, #4]
 801a62e:	b163      	cbz	r3, 801a64a <report_build_info+0x47a>
            hal.stream.write("[DRIVER:");
 801a630:	4c1f      	ldr	r4, [pc, #124]	@ (801a6b0 <report_build_info+0x4e0>)
 801a632:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a636:	482e      	ldr	r0, [pc, #184]	@ (801a6f0 <report_build_info+0x520>)
 801a638:	4798      	blx	r3
            hal.stream.write(hal.info);
 801a63a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a63e:	6860      	ldr	r0, [r4, #4]
 801a640:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 801a642:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a646:	481b      	ldr	r0, [pc, #108]	@ (801a6b4 <report_build_info+0x4e4>)
 801a648:	4798      	blx	r3
        if(hal.driver_version) {
 801a64a:	4b19      	ldr	r3, [pc, #100]	@ (801a6b0 <report_build_info+0x4e0>)
 801a64c:	689b      	ldr	r3, [r3, #8]
 801a64e:	b163      	cbz	r3, 801a66a <report_build_info+0x49a>
            hal.stream.write("[DRIVER VERSION:");
 801a650:	4c17      	ldr	r4, [pc, #92]	@ (801a6b0 <report_build_info+0x4e0>)
 801a652:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a656:	4827      	ldr	r0, [pc, #156]	@ (801a6f4 <report_build_info+0x524>)
 801a658:	4798      	blx	r3
            hal.stream.write(hal.driver_version);
 801a65a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a65e:	68a0      	ldr	r0, [r4, #8]
 801a660:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 801a662:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a666:	4813      	ldr	r0, [pc, #76]	@ (801a6b4 <report_build_info+0x4e4>)
 801a668:	4798      	blx	r3
        if(hal.driver_options) {
 801a66a:	4b11      	ldr	r3, [pc, #68]	@ (801a6b0 <report_build_info+0x4e0>)
 801a66c:	68db      	ldr	r3, [r3, #12]
 801a66e:	b163      	cbz	r3, 801a68a <report_build_info+0x4ba>
            hal.stream.write("[DRIVER OPTIONS:");
 801a670:	4c0f      	ldr	r4, [pc, #60]	@ (801a6b0 <report_build_info+0x4e0>)
 801a672:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a676:	4820      	ldr	r0, [pc, #128]	@ (801a6f8 <report_build_info+0x528>)
 801a678:	4798      	blx	r3
            hal.stream.write(hal.driver_options);
 801a67a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a67e:	68e0      	ldr	r0, [r4, #12]
 801a680:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 801a682:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a686:	480b      	ldr	r0, [pc, #44]	@ (801a6b4 <report_build_info+0x4e4>)
 801a688:	4798      	blx	r3
        if(hal.board) {
 801a68a:	4b09      	ldr	r3, [pc, #36]	@ (801a6b0 <report_build_info+0x4e0>)
 801a68c:	695b      	ldr	r3, [r3, #20]
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d038      	beq.n	801a704 <report_build_info+0x534>
            hal.stream.write("[BOARD:");
 801a692:	4c07      	ldr	r4, [pc, #28]	@ (801a6b0 <report_build_info+0x4e0>)
 801a694:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a698:	4818      	ldr	r0, [pc, #96]	@ (801a6fc <report_build_info+0x52c>)
 801a69a:	4798      	blx	r3
            hal.stream.write(hal.board);
 801a69c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a6a0:	6960      	ldr	r0, [r4, #20]
 801a6a2:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 801a6a4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a6a8:	e02a      	b.n	801a700 <report_build_info+0x530>
 801a6aa:	bf00      	nop
 801a6ac:	0802be3c 	.word	0x0802be3c
 801a6b0:	20001a90 	.word	0x20001a90
 801a6b4:	0802bfd4 	.word	0x0802bfd4
 801a6b8:	0802c3e8 	.word	0x0802c3e8
 801a6bc:	200024a8 	.word	0x200024a8
 801a6c0:	0802c3a0 	.word	0x0802c3a0
 801a6c4:	0802c438 	.word	0x0802c438
 801a6c8:	0802c3a8 	.word	0x0802c3a8
 801a6cc:	0802c444 	.word	0x0802c444
 801a6d0:	0802c44c 	.word	0x0802c44c
 801a6d4:	20001c78 	.word	0x20001c78
 801a6d8:	0802c45c 	.word	0x0802c45c
 801a6dc:	0802c474 	.word	0x0802c474
 801a6e0:	0802c480 	.word	0x0802c480
 801a6e4:	0802c3b4 	.word	0x0802c3b4
 801a6e8:	0802c498 	.word	0x0802c498
 801a6ec:	0802c4a8 	.word	0x0802c4a8
 801a6f0:	0802c4b0 	.word	0x0802c4b0
 801a6f4:	0802c4bc 	.word	0x0802c4bc
 801a6f8:	0802c4d0 	.word	0x0802c4d0
 801a6fc:	0802c4e4 	.word	0x0802c4e4
 801a700:	4880      	ldr	r0, [pc, #512]	@ (801a904 <report_build_info+0x734>)
 801a702:	4798      	blx	r3
        if(hal.max_step_rate) {
 801a704:	4b80      	ldr	r3, [pc, #512]	@ (801a908 <report_build_info+0x738>)
 801a706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a708:	b173      	cbz	r3, 801a728 <report_build_info+0x558>
            hal.stream.write("[MAX STEP RATE:");
 801a70a:	4c7f      	ldr	r4, [pc, #508]	@ (801a908 <report_build_info+0x738>)
 801a70c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a710:	487e      	ldr	r0, [pc, #504]	@ (801a90c <report_build_info+0x73c>)
 801a712:	4798      	blx	r3
            hal.stream.write(uitoa(hal.max_step_rate));
 801a714:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 801a718:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801a71a:	f7fb f951 	bl	80159c0 <uitoa>
 801a71e:	47a8      	blx	r5
            hal.stream.write(" Hz]" ASCII_EOL);
 801a720:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a724:	487a      	ldr	r0, [pc, #488]	@ (801a910 <report_build_info+0x740>)
 801a726:	4798      	blx	r3
        if(hal.port.num_digital_in + hal.port.num_digital_out + hal.port.num_analog_in + hal.port.num_analog_out > 0) {
 801a728:	4a77      	ldr	r2, [pc, #476]	@ (801a908 <report_build_info+0x738>)
 801a72a:	f892 3114 	ldrb.w	r3, [r2, #276]	@ 0x114
 801a72e:	f892 1115 	ldrb.w	r1, [r2, #277]	@ 0x115
 801a732:	440b      	add	r3, r1
 801a734:	f892 1116 	ldrb.w	r1, [r2, #278]	@ 0x116
 801a738:	440b      	add	r3, r1
 801a73a:	f892 2117 	ldrb.w	r2, [r2, #279]	@ 0x117
 801a73e:	42d3      	cmn	r3, r2
 801a740:	d031      	beq.n	801a7a6 <report_build_info+0x5d6>
            hal.stream.write("[AUX IO:");
 801a742:	4c71      	ldr	r4, [pc, #452]	@ (801a908 <report_build_info+0x738>)
 801a744:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a748:	4872      	ldr	r0, [pc, #456]	@ (801a914 <report_build_info+0x744>)
 801a74a:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_digital_in));
 801a74c:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 801a750:	f894 0114 	ldrb.w	r0, [r4, #276]	@ 0x114
 801a754:	f7fb f934 	bl	80159c0 <uitoa>
 801a758:	47a8      	blx	r5
            hal.stream.write(",");
 801a75a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a75e:	4d6e      	ldr	r5, [pc, #440]	@ (801a918 <report_build_info+0x748>)
 801a760:	4628      	mov	r0, r5
 801a762:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_digital_out));
 801a764:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 801a768:	f894 0115 	ldrb.w	r0, [r4, #277]	@ 0x115
 801a76c:	f7fb f928 	bl	80159c0 <uitoa>
 801a770:	47b0      	blx	r6
            hal.stream.write(",");
 801a772:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a776:	4628      	mov	r0, r5
 801a778:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_analog_in));
 801a77a:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 801a77e:	f894 0116 	ldrb.w	r0, [r4, #278]	@ 0x116
 801a782:	f7fb f91d 	bl	80159c0 <uitoa>
 801a786:	47b0      	blx	r6
            hal.stream.write(",");
 801a788:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a78c:	4628      	mov	r0, r5
 801a78e:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_analog_out));
 801a790:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 801a794:	f894 0117 	ldrb.w	r0, [r4, #279]	@ 0x117
 801a798:	f7fb f912 	bl	80159c0 <uitoa>
 801a79c:	47a8      	blx	r5
            hal.stream.write("]" ASCII_EOL);
 801a79e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a7a2:	4858      	ldr	r0, [pc, #352]	@ (801a904 <report_build_info+0x734>)
 801a7a4:	4798      	blx	r3
        grbl.on_report_options(false);
 801a7a6:	4b5d      	ldr	r3, [pc, #372]	@ (801a91c <report_build_info+0x74c>)
 801a7a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a7aa:	2000      	movs	r0, #0
 801a7ac:	4798      	blx	r3
}
 801a7ae:	b01b      	add	sp, #108	@ 0x6c
 801a7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        strcat(buf, settings.flags.legacy_rt_commands ? "+," : "-,");
 801a7b2:	4e5b      	ldr	r6, [pc, #364]	@ (801a920 <report_build_info+0x750>)
 801a7b4:	e647      	b.n	801a446 <report_build_info+0x276>
            strcat(buf, "HOME,");
 801a7b6:	4620      	mov	r0, r4
 801a7b8:	f7ed fca2 	bl	8008100 <strlen>
 801a7bc:	4603      	mov	r3, r0
 801a7be:	1821      	adds	r1, r4, r0
 801a7c0:	4a58      	ldr	r2, [pc, #352]	@ (801a924 <report_build_info+0x754>)
 801a7c2:	6810      	ldr	r0, [r2, #0]
 801a7c4:	50e0      	str	r0, [r4, r3]
 801a7c6:	8893      	ldrh	r3, [r2, #4]
 801a7c8:	808b      	strh	r3, [r1, #4]
 801a7ca:	e64c      	b.n	801a466 <report_build_info+0x296>
            strcat(buf, "NOPROBE,");
 801a7cc:	ac01      	add	r4, sp, #4
 801a7ce:	4620      	mov	r0, r4
 801a7d0:	f7ed fc96 	bl	8008100 <strlen>
 801a7d4:	4602      	mov	r2, r0
 801a7d6:	1826      	adds	r6, r4, r0
 801a7d8:	4b53      	ldr	r3, [pc, #332]	@ (801a928 <report_build_info+0x758>)
 801a7da:	cb03      	ldmia	r3!, {r0, r1}
 801a7dc:	50a0      	str	r0, [r4, r2]
 801a7de:	6071      	str	r1, [r6, #4]
 801a7e0:	781b      	ldrb	r3, [r3, #0]
 801a7e2:	7233      	strb	r3, [r6, #8]
 801a7e4:	e64b      	b.n	801a47e <report_build_info+0x2ae>
            strcat(buf, "PC,");
 801a7e6:	ac01      	add	r4, sp, #4
 801a7e8:	4620      	mov	r0, r4
 801a7ea:	f7ed fc89 	bl	8008100 <strlen>
 801a7ee:	4603      	mov	r3, r0
 801a7f0:	4a4e      	ldr	r2, [pc, #312]	@ (801a92c <report_build_info+0x75c>)
 801a7f2:	6810      	ldr	r0, [r2, #0]
 801a7f4:	50e0      	str	r0, [r4, r3]
 801a7f6:	e642      	b.n	801a47e <report_build_info+0x2ae>
            strcat(buf, "OS,");
 801a7f8:	ac01      	add	r4, sp, #4
 801a7fa:	4620      	mov	r0, r4
 801a7fc:	f7ed fc80 	bl	8008100 <strlen>
 801a800:	4603      	mov	r3, r0
 801a802:	4a4b      	ldr	r2, [pc, #300]	@ (801a930 <report_build_info+0x760>)
 801a804:	6810      	ldr	r0, [r2, #0]
 801a806:	50e0      	str	r0, [r4, r3]
 801a808:	e640      	b.n	801a48c <report_build_info+0x2bc>
            strcat(buf, "BD,");
 801a80a:	ac01      	add	r4, sp, #4
 801a80c:	4620      	mov	r0, r4
 801a80e:	f7ed fc77 	bl	8008100 <strlen>
 801a812:	4603      	mov	r3, r0
 801a814:	4a47      	ldr	r2, [pc, #284]	@ (801a934 <report_build_info+0x764>)
 801a816:	6810      	ldr	r0, [r2, #0]
 801a818:	50e0      	str	r0, [r4, r3]
 801a81a:	e63e      	b.n	801a49a <report_build_info+0x2ca>
            strcat(buf, "ES,");
 801a81c:	ac01      	add	r4, sp, #4
 801a81e:	4620      	mov	r0, r4
 801a820:	f7ed fc6e 	bl	8008100 <strlen>
 801a824:	4603      	mov	r3, r0
 801a826:	4a44      	ldr	r2, [pc, #272]	@ (801a938 <report_build_info+0x768>)
 801a828:	6810      	ldr	r0, [r2, #0]
 801a82a:	50e0      	str	r0, [r4, r3]
 801a82c:	e63c      	b.n	801a4a8 <report_build_info+0x2d8>
            strcat(buf, "MPG,");
 801a82e:	ac01      	add	r4, sp, #4
 801a830:	4620      	mov	r0, r4
 801a832:	f7ed fc65 	bl	8008100 <strlen>
 801a836:	4603      	mov	r3, r0
 801a838:	1821      	adds	r1, r4, r0
 801a83a:	4a40      	ldr	r2, [pc, #256]	@ (801a93c <report_build_info+0x76c>)
 801a83c:	6810      	ldr	r0, [r2, #0]
 801a83e:	50e0      	str	r0, [r4, r3]
 801a840:	7913      	ldrb	r3, [r2, #4]
 801a842:	710b      	strb	r3, [r1, #4]
 801a844:	e636      	b.n	801a4b4 <report_build_info+0x2e4>
            strcat(buf, "LATHE,");
 801a846:	ac01      	add	r4, sp, #4
 801a848:	4620      	mov	r0, r4
 801a84a:	f7ed fc59 	bl	8008100 <strlen>
 801a84e:	4603      	mov	r3, r0
 801a850:	1821      	adds	r1, r4, r0
 801a852:	4a3b      	ldr	r2, [pc, #236]	@ (801a940 <report_build_info+0x770>)
 801a854:	6810      	ldr	r0, [r2, #0]
 801a856:	50e0      	str	r0, [r4, r3]
 801a858:	8890      	ldrh	r0, [r2, #4]
 801a85a:	7993      	ldrb	r3, [r2, #6]
 801a85c:	8088      	strh	r0, [r1, #4]
 801a85e:	718b      	strb	r3, [r1, #6]
 801a860:	e62d      	b.n	801a4be <report_build_info+0x2ee>
            strcat(buf, "PPI,");
 801a862:	ac01      	add	r4, sp, #4
 801a864:	4620      	mov	r0, r4
 801a866:	f7ed fc4b 	bl	8008100 <strlen>
 801a86a:	4603      	mov	r3, r0
 801a86c:	1821      	adds	r1, r4, r0
 801a86e:	4a35      	ldr	r2, [pc, #212]	@ (801a944 <report_build_info+0x774>)
 801a870:	6810      	ldr	r0, [r2, #0]
 801a872:	50e0      	str	r0, [r4, r3]
 801a874:	7913      	ldrb	r3, [r2, #4]
 801a876:	710b      	strb	r3, [r1, #4]
 801a878:	e628      	b.n	801a4cc <report_build_info+0x2fc>
            strcat(buf, hal.driver_cap.atc ? "ATC," : "TC,"); // Tool change supported (M6)
 801a87a:	4933      	ldr	r1, [pc, #204]	@ (801a948 <report_build_info+0x778>)
 801a87c:	e640      	b.n	801a500 <report_build_info+0x330>
            strcat(buf, "SS,");
 801a87e:	ac01      	add	r4, sp, #4
 801a880:	4620      	mov	r0, r4
 801a882:	f7ed fc3d 	bl	8008100 <strlen>
 801a886:	4603      	mov	r3, r0
 801a888:	4a30      	ldr	r2, [pc, #192]	@ (801a94c <report_build_info+0x77c>)
 801a88a:	6810      	ldr	r0, [r2, #0]
 801a88c:	50e0      	str	r0, [r4, r3]
 801a88e:	e641      	b.n	801a514 <report_build_info+0x344>
            strcat(buf, "CAN,");
 801a890:	ac01      	add	r4, sp, #4
 801a892:	4620      	mov	r0, r4
 801a894:	f7ed fc34 	bl	8008100 <strlen>
 801a898:	4603      	mov	r3, r0
 801a89a:	1821      	adds	r1, r4, r0
 801a89c:	4a2c      	ldr	r2, [pc, #176]	@ (801a950 <report_build_info+0x780>)
 801a89e:	6810      	ldr	r0, [r2, #0]
 801a8a0:	50e0      	str	r0, [r4, r3]
 801a8a2:	7913      	ldrb	r3, [r2, #4]
 801a8a4:	710b      	strb	r3, [r1, #4]
 801a8a6:	e653      	b.n	801a550 <report_build_info+0x380>
            *append = '\0';
 801a8a8:	f100 0368 	add.w	r3, r0, #104	@ 0x68
 801a8ac:	eb0d 0003 	add.w	r0, sp, r3
 801a8b0:	2300      	movs	r3, #0
 801a8b2:	f800 3c64 	strb.w	r3, [r0, #-100]
 801a8b6:	e657      	b.n	801a568 <report_build_info+0x398>
                strcat(buf, "*");
 801a8b8:	ac01      	add	r4, sp, #4
 801a8ba:	4620      	mov	r0, r4
 801a8bc:	f7ed fc20 	bl	8008100 <strlen>
 801a8c0:	4b24      	ldr	r3, [pc, #144]	@ (801a954 <report_build_info+0x784>)
 801a8c2:	881b      	ldrh	r3, [r3, #0]
 801a8c4:	5223      	strh	r3, [r4, r0]
 801a8c6:	e682      	b.n	801a5ce <report_build_info+0x3fe>
            strcat(buf, nvs->type == NVS_Flash ? "FLASH" : (nvs->type == NVS_FRAM ? "FRAM" : "EEPROM"));
 801a8c8:	4923      	ldr	r1, [pc, #140]	@ (801a958 <report_build_info+0x788>)
 801a8ca:	e688      	b.n	801a5de <report_build_info+0x40e>
 801a8cc:	4923      	ldr	r1, [pc, #140]	@ (801a95c <report_build_info+0x78c>)
 801a8ce:	e686      	b.n	801a5de <report_build_info+0x40e>
                strcat(buf, " ");
 801a8d0:	a801      	add	r0, sp, #4
 801a8d2:	f7ed fc15 	bl	8008100 <strlen>
 801a8d6:	4b22      	ldr	r3, [pc, #136]	@ (801a960 <report_build_info+0x790>)
 801a8d8:	881b      	ldrh	r3, [r3, #0]
 801a8da:	aa01      	add	r2, sp, #4
 801a8dc:	5213      	strh	r3, [r2, r0]
                strcat(buf, uitoa(hal.nvs.size_max / 1024));
 801a8de:	4b0a      	ldr	r3, [pc, #40]	@ (801a908 <report_build_info+0x738>)
 801a8e0:	f8d3 017c 	ldr.w	r0, [r3, #380]	@ 0x17c
 801a8e4:	0a80      	lsrs	r0, r0, #10
 801a8e6:	f7fb f86b 	bl	80159c0 <uitoa>
 801a8ea:	4601      	mov	r1, r0
 801a8ec:	a801      	add	r0, sp, #4
 801a8ee:	f00a fa26 	bl	8024d3e <strcat>
                strcat(buf, "K");
 801a8f2:	a801      	add	r0, sp, #4
 801a8f4:	f7ed fc04 	bl	8008100 <strlen>
 801a8f8:	4b1a      	ldr	r3, [pc, #104]	@ (801a964 <report_build_info+0x794>)
 801a8fa:	881b      	ldrh	r3, [r3, #0]
 801a8fc:	aa01      	add	r2, sp, #4
 801a8fe:	5213      	strh	r3, [r2, r0]
 801a900:	e676      	b.n	801a5f0 <report_build_info+0x420>
 801a902:	bf00      	nop
 801a904:	0802bfd4 	.word	0x0802bfd4
 801a908:	20001a90 	.word	0x20001a90
 801a90c:	0802c4ec 	.word	0x0802c4ec
 801a910:	0802c4fc 	.word	0x0802c4fc
 801a914:	0802c504 	.word	0x0802c504
 801a918:	0802c400 	.word	0x0802c400
 801a91c:	20001c78 	.word	0x20001c78
 801a920:	0802c3a4 	.word	0x0802c3a4
 801a924:	0802c3fc 	.word	0x0802c3fc
 801a928:	0802c404 	.word	0x0802c404
 801a92c:	0802c410 	.word	0x0802c410
 801a930:	0802c414 	.word	0x0802c414
 801a934:	0802c418 	.word	0x0802c418
 801a938:	0802c41c 	.word	0x0802c41c
 801a93c:	0802c420 	.word	0x0802c420
 801a940:	0802c428 	.word	0x0802c428
 801a944:	0802c430 	.word	0x0802c430
 801a948:	0802c3b0 	.word	0x0802c3b0
 801a94c:	0802c440 	.word	0x0802c440
 801a950:	0802c454 	.word	0x0802c454
 801a954:	0802c490 	.word	0x0802c490
 801a958:	0802c3c4 	.word	0x0802c3c4
 801a95c:	0802c3bc 	.word	0x0802c3bc
 801a960:	0802c120 	.word	0x0802c120
 801a964:	0802c494 	.word	0x0802c494

0801a968 <report_realtime_status>:
{
 801a968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a96c:	b08b      	sub	sp, #44	@ 0x2c
    report_tracking_flags_t report = system_get_rt_report_flags();
 801a96e:	f007 faa3 	bl	8021eb8 <system_get_rt_report_flags>
 801a972:	4604      	mov	r4, r0
    probe_state_t probe_state = {
 801a974:	f04f 0902 	mov.w	r9, #2
    system_convert_array_steps_to_mpos(print_position, sys.position);
 801a978:	49a2      	ldr	r1, [pc, #648]	@ (801ac04 <report_realtime_status+0x29c>)
 801a97a:	a806      	add	r0, sp, #24
 801a97c:	f007 f9fe 	bl	8021d7c <system_convert_array_steps_to_mpos>
    if(hal.probe.get_state)
 801a980:	4ba1      	ldr	r3, [pc, #644]	@ (801ac08 <report_realtime_status+0x2a0>)
 801a982:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 801a986:	b10b      	cbz	r3, 801a98c <report_realtime_status+0x24>
        probe_state = hal.probe.get_state();
 801a988:	4798      	blx	r3
 801a98a:	4681      	mov	r9, r0
    hal.stream.write_all("<");
 801a98c:	4b9e      	ldr	r3, [pc, #632]	@ (801ac08 <report_realtime_status+0x2a0>)
 801a98e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a992:	489e      	ldr	r0, [pc, #632]	@ (801ac0c <report_realtime_status+0x2a4>)
 801a994:	4798      	blx	r3
    sys_state_t state = state_get();
 801a996:	f004 fad7 	bl	801ef48 <state_get>
 801a99a:	4680      	mov	r8, r0
    switch (gc_state.tool_change && state == STATE_CYCLE ? STATE_TOOL_CHANGE : state) {
 801a99c:	4b9c      	ldr	r3, [pc, #624]	@ (801ac10 <report_realtime_status+0x2a8>)
 801a99e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801a9a2:	b10b      	cbz	r3, 801a9a8 <report_realtime_status+0x40>
 801a9a4:	2808      	cmp	r0, #8
 801a9a6:	d035      	beq.n	801aa14 <report_realtime_status+0xac>
 801a9a8:	f1b8 0f20 	cmp.w	r8, #32
 801a9ac:	d825      	bhi.n	801a9fa <report_realtime_status+0x92>
 801a9ae:	f1b8 0f20 	cmp.w	r8, #32
 801a9b2:	d834      	bhi.n	801aa1e <report_realtime_status+0xb6>
 801a9b4:	e8df f018 	tbh	[pc, r8, lsl #1]
 801a9b8:	015200d1 	.word	0x015200d1
 801a9bc:	00330170 	.word	0x00330170
 801a9c0:	0033011f 	.word	0x0033011f
 801a9c4:	00330033 	.word	0x00330033
 801a9c8:	003300d7 	.word	0x003300d7
 801a9cc:	00330033 	.word	0x00330033
 801a9d0:	00330033 	.word	0x00330033
 801a9d4:	00330033 	.word	0x00330033
 801a9d8:	00330109 	.word	0x00330109
 801a9dc:	00330033 	.word	0x00330033
 801a9e0:	00330033 	.word	0x00330033
 801a9e4:	00330033 	.word	0x00330033
 801a9e8:	00330033 	.word	0x00330033
 801a9ec:	00330033 	.word	0x00330033
 801a9f0:	00330033 	.word	0x00330033
 801a9f4:	00330033 	.word	0x00330033
 801a9f8:	0119      	.short	0x0119
 801a9fa:	f1b8 0f80 	cmp.w	r8, #128	@ 0x80
 801a9fe:	f000 8151 	beq.w	801aca4 <report_realtime_status+0x33c>
 801aa02:	f240 8097 	bls.w	801ab34 <report_realtime_status+0x1cc>
 801aa06:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 801aa0a:	f000 8127 	beq.w	801ac5c <report_realtime_status+0x2f4>
 801aa0e:	f5b8 7f00 	cmp.w	r8, #512	@ 0x200
 801aa12:	d104      	bne.n	801aa1e <report_realtime_status+0xb6>
            hal.stream.write_all("Tool");
 801aa14:	4b7c      	ldr	r3, [pc, #496]	@ (801ac08 <report_realtime_status+0x2a0>)
 801aa16:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801aa1a:	487e      	ldr	r0, [pc, #504]	@ (801ac14 <report_realtime_status+0x2ac>)
 801aa1c:	4798      	blx	r3
    if(!settings.status_report.machine_position || report.wco) {
 801aa1e:	4b7e      	ldr	r3, [pc, #504]	@ (801ac18 <report_realtime_status+0x2b0>)
 801aa20:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801aa24:	f013 0f01 	tst.w	r3, #1
 801aa28:	f000 815f 	beq.w	801acea <report_realtime_status+0x382>
 801aa2c:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801aa30:	f040 815d 	bne.w	801acee <report_realtime_status+0x386>
    hal.stream.write_all(settings.status_report.machine_position ? "|MPos:" : "|WPos:");
 801aa34:	4b74      	ldr	r3, [pc, #464]	@ (801ac08 <report_realtime_status+0x2a0>)
 801aa36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801aa3a:	4a77      	ldr	r2, [pc, #476]	@ (801ac18 <report_realtime_status+0x2b0>)
 801aa3c:	f892 20fc 	ldrb.w	r2, [r2, #252]	@ 0xfc
 801aa40:	f012 0f01 	tst.w	r2, #1
 801aa44:	f000 8155 	beq.w	801acf2 <report_realtime_status+0x38a>
 801aa48:	4874      	ldr	r0, [pc, #464]	@ (801ac1c <report_realtime_status+0x2b4>)
 801aa4a:	4798      	blx	r3
    hal.stream.write_all(get_axis_values(print_position));
 801aa4c:	4b6e      	ldr	r3, [pc, #440]	@ (801ac08 <report_realtime_status+0x2a0>)
 801aa4e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801aa52:	4b73      	ldr	r3, [pc, #460]	@ (801ac20 <report_realtime_status+0x2b8>)
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	a806      	add	r0, sp, #24
 801aa58:	4798      	blx	r3
 801aa5a:	47a8      	blx	r5
    if (settings.status_report.buffer_state) {
 801aa5c:	4b6e      	ldr	r3, [pc, #440]	@ (801ac18 <report_realtime_status+0x2b0>)
 801aa5e:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801aa62:	f013 0f02 	tst.w	r3, #2
 801aa66:	d017      	beq.n	801aa98 <report_realtime_status+0x130>
        hal.stream.write_all("|Bf:");
 801aa68:	4d67      	ldr	r5, [pc, #412]	@ (801ac08 <report_realtime_status+0x2a0>)
 801aa6a:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 801aa6e:	486d      	ldr	r0, [pc, #436]	@ (801ac24 <report_realtime_status+0x2bc>)
 801aa70:	4798      	blx	r3
        hal.stream.write_all(uitoa((uint32_t)plan_get_block_buffer_available()));
 801aa72:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 801aa76:	f7fc f9c7 	bl	8016e08 <plan_get_block_buffer_available>
 801aa7a:	f7fa ffa1 	bl	80159c0 <uitoa>
 801aa7e:	47b0      	blx	r6
        hal.stream.write_all(",");
 801aa80:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 801aa84:	4868      	ldr	r0, [pc, #416]	@ (801ac28 <report_realtime_status+0x2c0>)
 801aa86:	4798      	blx	r3
        hal.stream.write_all(uitoa(hal.stream.get_rx_buffer_free()));
 801aa88:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 801aa8c:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 801aa90:	4798      	blx	r3
 801aa92:	f7fa ff95 	bl	80159c0 <uitoa>
 801aa96:	47b0      	blx	r6
    if(settings.status_report.line_numbers) {
 801aa98:	4b5f      	ldr	r3, [pc, #380]	@ (801ac18 <report_realtime_status+0x2b0>)
 801aa9a:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801aa9e:	f013 0f04 	tst.w	r3, #4
 801aaa2:	f040 8128 	bne.w	801acf6 <report_realtime_status+0x38e>
    spindle_0 = spindle_get(0);
 801aaa6:	2000      	movs	r0, #0
 801aaa8:	f003 fdbe 	bl	801e628 <spindle_get>
 801aaac:	4606      	mov	r6, r0
    spindle_0_state = spindle_0->get_state(spindle_0);
 801aaae:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801aab0:	4798      	blx	r3
 801aab2:	4607      	mov	r7, r0
    if(settings.status_report.feed_speed) {
 801aab4:	4b58      	ldr	r3, [pc, #352]	@ (801ac18 <report_realtime_status+0x2b0>)
 801aab6:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801aaba:	f013 0f08 	tst.w	r3, #8
 801aabe:	f000 8144 	beq.w	801ad4a <report_realtime_status+0x3e2>
        if(spindle_0->cap.variable) {
 801aac2:	7ab3      	ldrb	r3, [r6, #10]
 801aac4:	f013 0f01 	tst.w	r3, #1
 801aac8:	f000 8130 	beq.w	801ad2c <report_realtime_status+0x3c4>
            hal.stream.write_all(appendbuf(2, "|FS:", get_rate_value(st_get_realtime_rate())));
 801aacc:	4d4e      	ldr	r5, [pc, #312]	@ (801ac08 <report_realtime_status+0x2a0>)
 801aace:	f8d5 a0b8 	ldr.w	sl, [r5, #184]	@ 0xb8
 801aad2:	4b56      	ldr	r3, [pc, #344]	@ (801ac2c <report_realtime_status+0x2c4>)
 801aad4:	f8d3 b000 	ldr.w	fp, [r3]
 801aad8:	f005 fe8a 	bl	80207f0 <st_get_realtime_rate>
 801aadc:	47d8      	blx	fp
 801aade:	4602      	mov	r2, r0
 801aae0:	4953      	ldr	r1, [pc, #332]	@ (801ac30 <report_realtime_status+0x2c8>)
 801aae2:	2002      	movs	r0, #2
 801aae4:	f7fe f83c 	bl	8018b60 <appendbuf>
 801aae8:	47d0      	blx	sl
            hal.stream.write_all(appendbuf(2, ",", uitoa(spindle_0_state.on ? lroundf(spindle_0->param->rpm_overridden) : 0)));
 801aaea:	f8d5 50b8 	ldr.w	r5, [r5, #184]	@ 0xb8
 801aaee:	f017 0f01 	tst.w	r7, #1
 801aaf2:	f040 8115 	bne.w	801ad20 <report_realtime_status+0x3b8>
 801aaf6:	2000      	movs	r0, #0
 801aaf8:	f7fa ff62 	bl	80159c0 <uitoa>
 801aafc:	4602      	mov	r2, r0
 801aafe:	494a      	ldr	r1, [pc, #296]	@ (801ac28 <report_realtime_status+0x2c0>)
 801ab00:	2002      	movs	r0, #2
 801ab02:	f7fe f82d 	bl	8018b60 <appendbuf>
 801ab06:	47a8      	blx	r5
            if(spindle_0->get_data /* && sys.mpg_mode */)
 801ab08:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	f000 811d 	beq.w	801ad4a <report_realtime_status+0x3e2>
                hal.stream.write_all(appendbuf(2, ",", uitoa(lroundf(spindle_0->get_data(SpindleData_RPM)->rpm))));
 801ab10:	4a3d      	ldr	r2, [pc, #244]	@ (801ac08 <report_realtime_status+0x2a0>)
 801ab12:	f8d2 50b8 	ldr.w	r5, [r2, #184]	@ 0xb8
 801ab16:	2001      	movs	r0, #1
 801ab18:	4798      	blx	r3
 801ab1a:	ed90 0a00 	vldr	s0, [r0]
 801ab1e:	f00c ff45 	bl	80279ac <lroundf>
 801ab22:	f7fa ff4d 	bl	80159c0 <uitoa>
 801ab26:	4602      	mov	r2, r0
 801ab28:	493f      	ldr	r1, [pc, #252]	@ (801ac28 <report_realtime_status+0x2c0>)
 801ab2a:	2002      	movs	r0, #2
 801ab2c:	f7fe f818 	bl	8018b60 <appendbuf>
 801ab30:	47a8      	blx	r5
 801ab32:	e10a      	b.n	801ad4a <report_realtime_status+0x3e2>
    switch (gc_state.tool_change && state == STATE_CYCLE ? STATE_TOOL_CHANGE : state) {
 801ab34:	f1b8 0f40 	cmp.w	r8, #64	@ 0x40
 801ab38:	f47f af71 	bne.w	801aa1e <report_realtime_status+0xb6>
            hal.stream.write_all(appendbuf(2, "Door:", uitoa((uint32_t)sys.parking_state)));
 801ab3c:	4b32      	ldr	r3, [pc, #200]	@ (801ac08 <report_realtime_status+0x2a0>)
 801ab3e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801ab42:	4b3c      	ldr	r3, [pc, #240]	@ (801ac34 <report_realtime_status+0x2cc>)
 801ab44:	f893 0034 	ldrb.w	r0, [r3, #52]	@ 0x34
 801ab48:	f7fa ff3a 	bl	80159c0 <uitoa>
 801ab4c:	4602      	mov	r2, r0
 801ab4e:	493a      	ldr	r1, [pc, #232]	@ (801ac38 <report_realtime_status+0x2d0>)
 801ab50:	2002      	movs	r0, #2
 801ab52:	f7fe f805 	bl	8018b60 <appendbuf>
 801ab56:	47a8      	blx	r5
            break;
 801ab58:	e761      	b.n	801aa1e <report_realtime_status+0xb6>
            hal.stream.write_all("Idle");
 801ab5a:	4b2b      	ldr	r3, [pc, #172]	@ (801ac08 <report_realtime_status+0x2a0>)
 801ab5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ab60:	4836      	ldr	r0, [pc, #216]	@ (801ac3c <report_realtime_status+0x2d4>)
 801ab62:	4798      	blx	r3
            break;
 801ab64:	e75b      	b.n	801aa1e <report_realtime_status+0xb6>
            hal.stream.write_all("Run");
 801ab66:	4b28      	ldr	r3, [pc, #160]	@ (801ac08 <report_realtime_status+0x2a0>)
 801ab68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ab6c:	4834      	ldr	r0, [pc, #208]	@ (801ac40 <report_realtime_status+0x2d8>)
 801ab6e:	4798      	blx	r3
            if(sys.probing_state == Probing_Active && settings.status_report.run_substate)
 801ab70:	4b30      	ldr	r3, [pc, #192]	@ (801ac34 <report_realtime_status+0x2cc>)
 801ab72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801ab76:	b2db      	uxtb	r3, r3
 801ab78:	2b01      	cmp	r3, #1
 801ab7a:	d011      	beq.n	801aba0 <report_realtime_status+0x238>
            else if (probing)
 801ab7c:	4b31      	ldr	r3, [pc, #196]	@ (801ac44 <report_realtime_status+0x2dc>)
 801ab7e:	781b      	ldrb	r3, [r3, #0]
 801ab80:	b11b      	cbz	r3, 801ab8a <report_realtime_status+0x222>
                probing = probe_state.triggered;
 801ab82:	f3c9 0200 	ubfx	r2, r9, #0, #1
 801ab86:	4b2f      	ldr	r3, [pc, #188]	@ (801ac44 <report_realtime_status+0x2dc>)
 801ab88:	701a      	strb	r2, [r3, #0]
            if(sys.flags.feed_hold_pending)
 801ab8a:	4b2a      	ldr	r3, [pc, #168]	@ (801ac34 <report_realtime_status+0x2cc>)
 801ab8c:	7d9b      	ldrb	r3, [r3, #22]
 801ab8e:	f013 0f20 	tst.w	r3, #32
 801ab92:	d00f      	beq.n	801abb4 <report_realtime_status+0x24c>
                hal.stream.write_all(":1");
 801ab94:	4b1c      	ldr	r3, [pc, #112]	@ (801ac08 <report_realtime_status+0x2a0>)
 801ab96:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ab9a:	482b      	ldr	r0, [pc, #172]	@ (801ac48 <report_realtime_status+0x2e0>)
 801ab9c:	4798      	blx	r3
 801ab9e:	e73e      	b.n	801aa1e <report_realtime_status+0xb6>
            if(sys.probing_state == Probing_Active && settings.status_report.run_substate)
 801aba0:	4b1d      	ldr	r3, [pc, #116]	@ (801ac18 <report_realtime_status+0x2b0>)
 801aba2:	f893 30fd 	ldrb.w	r3, [r3, #253]	@ 0xfd
 801aba6:	f013 0f08 	tst.w	r3, #8
 801abaa:	d0e7      	beq.n	801ab7c <report_realtime_status+0x214>
                probing = true;
 801abac:	4b25      	ldr	r3, [pc, #148]	@ (801ac44 <report_realtime_status+0x2dc>)
 801abae:	2201      	movs	r2, #1
 801abb0:	701a      	strb	r2, [r3, #0]
 801abb2:	e7ea      	b.n	801ab8a <report_realtime_status+0x222>
            else if(probing)
 801abb4:	4b23      	ldr	r3, [pc, #140]	@ (801ac44 <report_realtime_status+0x2dc>)
 801abb6:	781b      	ldrb	r3, [r3, #0]
 801abb8:	2b00      	cmp	r3, #0
 801abba:	f43f af30 	beq.w	801aa1e <report_realtime_status+0xb6>
                hal.stream.write_all(":2");
 801abbe:	4b12      	ldr	r3, [pc, #72]	@ (801ac08 <report_realtime_status+0x2a0>)
 801abc0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801abc4:	4821      	ldr	r0, [pc, #132]	@ (801ac4c <report_realtime_status+0x2e4>)
 801abc6:	4798      	blx	r3
 801abc8:	e729      	b.n	801aa1e <report_realtime_status+0xb6>
            hal.stream.write_all(appendbuf(2, "Hold:", uitoa((uint32_t)(sys.holding_state - 1))));
 801abca:	4b0f      	ldr	r3, [pc, #60]	@ (801ac08 <report_realtime_status+0x2a0>)
 801abcc:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801abd0:	4b18      	ldr	r3, [pc, #96]	@ (801ac34 <report_realtime_status+0x2cc>)
 801abd2:	f893 0035 	ldrb.w	r0, [r3, #53]	@ 0x35
 801abd6:	3801      	subs	r0, #1
 801abd8:	f7fa fef2 	bl	80159c0 <uitoa>
 801abdc:	4602      	mov	r2, r0
 801abde:	491c      	ldr	r1, [pc, #112]	@ (801ac50 <report_realtime_status+0x2e8>)
 801abe0:	2002      	movs	r0, #2
 801abe2:	f7fd ffbd 	bl	8018b60 <appendbuf>
 801abe6:	47a8      	blx	r5
            break;
 801abe8:	e719      	b.n	801aa1e <report_realtime_status+0xb6>
            hal.stream.write_all("Jog");
 801abea:	4b07      	ldr	r3, [pc, #28]	@ (801ac08 <report_realtime_status+0x2a0>)
 801abec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801abf0:	4818      	ldr	r0, [pc, #96]	@ (801ac54 <report_realtime_status+0x2ec>)
 801abf2:	4798      	blx	r3
            break;
 801abf4:	e713      	b.n	801aa1e <report_realtime_status+0xb6>
            hal.stream.write_all("Home");
 801abf6:	4b04      	ldr	r3, [pc, #16]	@ (801ac08 <report_realtime_status+0x2a0>)
 801abf8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801abfc:	4816      	ldr	r0, [pc, #88]	@ (801ac58 <report_realtime_status+0x2f0>)
 801abfe:	4798      	blx	r3
            break;
 801ac00:	e70d      	b.n	801aa1e <report_realtime_status+0xb6>
 801ac02:	bf00      	nop
 801ac04:	20001df8 	.word	0x20001df8
 801ac08:	20001a90 	.word	0x20001a90
 801ac0c:	0802c54c 	.word	0x0802c54c
 801ac10:	200017c8 	.word	0x200017c8
 801ac14:	0802c59c 	.word	0x0802c59c
 801ac18:	200024a8 	.word	0x200024a8
 801ac1c:	0802c510 	.word	0x0802c510
 801ac20:	20002374 	.word	0x20002374
 801ac24:	0802c5a4 	.word	0x0802c5a4
 801ac28:	0802c400 	.word	0x0802c400
 801ac2c:	2000236c 	.word	0x2000236c
 801ac30:	0802c5b4 	.word	0x0802c5b4
 801ac34:	20001d70 	.word	0x20001d70
 801ac38:	0802c58c 	.word	0x0802c58c
 801ac3c:	0802c550 	.word	0x0802c550
 801ac40:	0802c558 	.word	0x0802c558
 801ac44:	20002368 	.word	0x20002368
 801ac48:	0802c530 	.word	0x0802c530
 801ac4c:	0802c55c 	.word	0x0802c55c
 801ac50:	0802c560 	.word	0x0802c560
 801ac54:	0802c568 	.word	0x0802c568
 801ac58:	0802c56c 	.word	0x0802c56c
            if((report.all || settings.status_report.alarm_substate) && sys.alarm)
 801ac5c:	2c00      	cmp	r4, #0
 801ac5e:	db05      	blt.n	801ac6c <report_realtime_status+0x304>
 801ac60:	4ba0      	ldr	r3, [pc, #640]	@ (801aee4 <report_realtime_status+0x57c>)
 801ac62:	f893 30fd 	ldrb.w	r3, [r3, #253]	@ 0xfd
 801ac66:	f013 0f04 	tst.w	r3, #4
 801ac6a:	d003      	beq.n	801ac74 <report_realtime_status+0x30c>
 801ac6c:	4b9e      	ldr	r3, [pc, #632]	@ (801aee8 <report_realtime_status+0x580>)
 801ac6e:	f893 007c 	ldrb.w	r0, [r3, #124]	@ 0x7c
 801ac72:	b928      	cbnz	r0, 801ac80 <report_realtime_status+0x318>
                hal.stream.write_all("Alarm");
 801ac74:	4b9d      	ldr	r3, [pc, #628]	@ (801aeec <report_realtime_status+0x584>)
 801ac76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ac7a:	489d      	ldr	r0, [pc, #628]	@ (801aef0 <report_realtime_status+0x588>)
 801ac7c:	4798      	blx	r3
 801ac7e:	e6ce      	b.n	801aa1e <report_realtime_status+0xb6>
                hal.stream.write_all(appendbuf(2, "Alarm:", uitoa((uint32_t)sys.alarm)));
 801ac80:	4b9a      	ldr	r3, [pc, #616]	@ (801aeec <report_realtime_status+0x584>)
 801ac82:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801ac86:	f7fa fe9b 	bl	80159c0 <uitoa>
 801ac8a:	4602      	mov	r2, r0
 801ac8c:	4999      	ldr	r1, [pc, #612]	@ (801aef4 <report_realtime_status+0x58c>)
 801ac8e:	2002      	movs	r0, #2
 801ac90:	f7fd ff66 	bl	8018b60 <appendbuf>
 801ac94:	47a8      	blx	r5
 801ac96:	e6c2      	b.n	801aa1e <report_realtime_status+0xb6>
            hal.stream.write_all("Check");
 801ac98:	4b94      	ldr	r3, [pc, #592]	@ (801aeec <report_realtime_status+0x584>)
 801ac9a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ac9e:	4896      	ldr	r0, [pc, #600]	@ (801aef8 <report_realtime_status+0x590>)
 801aca0:	4798      	blx	r3
            break;
 801aca2:	e6bc      	b.n	801aa1e <report_realtime_status+0xb6>
            hal.stream.write_all("Sleep");
 801aca4:	4b91      	ldr	r3, [pc, #580]	@ (801aeec <report_realtime_status+0x584>)
 801aca6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801acaa:	4894      	ldr	r0, [pc, #592]	@ (801aefc <report_realtime_status+0x594>)
 801acac:	4798      	blx	r3
            break;
 801acae:	e6b6      	b.n	801aa1e <report_realtime_status+0xb6>
        for(idx = 0; idx < N_AXIS; idx++) {
 801acb0:	3501      	adds	r5, #1
 801acb2:	2d02      	cmp	r5, #2
 801acb4:	f63f aebe 	bhi.w	801aa34 <report_realtime_status+0xcc>
            wco[idx] = gc_get_offset(idx, true);
 801acb8:	2101      	movs	r1, #1
 801acba:	4628      	mov	r0, r5
 801acbc:	f7f2 fb46 	bl	800d34c <gc_get_offset>
 801acc0:	ab0a      	add	r3, sp, #40	@ 0x28
 801acc2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801acc6:	ed03 0a07 	vstr	s0, [r3, #-28]	@ 0xffffffe4
            if(!settings.status_report.machine_position)
 801acca:	4b86      	ldr	r3, [pc, #536]	@ (801aee4 <report_realtime_status+0x57c>)
 801accc:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801acd0:	f013 0f01 	tst.w	r3, #1
 801acd4:	d1ec      	bne.n	801acb0 <report_realtime_status+0x348>
                print_position[idx] -= wco[idx];
 801acd6:	ab0a      	add	r3, sp, #40	@ 0x28
 801acd8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801acdc:	ed53 7a04 	vldr	s15, [r3, #-16]
 801ace0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801ace4:	ed43 7a04 	vstr	s15, [r3, #-16]
 801ace8:	e7e2      	b.n	801acb0 <report_realtime_status+0x348>
 801acea:	2500      	movs	r5, #0
 801acec:	e7e1      	b.n	801acb2 <report_realtime_status+0x34a>
 801acee:	2500      	movs	r5, #0
 801acf0:	e7df      	b.n	801acb2 <report_realtime_status+0x34a>
    hal.stream.write_all(settings.status_report.machine_position ? "|MPos:" : "|WPos:");
 801acf2:	4883      	ldr	r0, [pc, #524]	@ (801af00 <report_realtime_status+0x598>)
 801acf4:	e6a9      	b.n	801aa4a <report_realtime_status+0xe2>
        plan_block_t *cur_block = plan_get_current_block();
 801acf6:	f7fb fdf3 	bl	80168e0 <plan_get_current_block>
        if (cur_block != NULL && cur_block->line_number > 0)
 801acfa:	2800      	cmp	r0, #0
 801acfc:	f43f aed3 	beq.w	801aaa6 <report_realtime_status+0x13e>
 801ad00:	6980      	ldr	r0, [r0, #24]
 801ad02:	2800      	cmp	r0, #0
 801ad04:	f77f aecf 	ble.w	801aaa6 <report_realtime_status+0x13e>
            hal.stream.write_all(appendbuf(2, "|Ln:", uitoa((uint32_t)cur_block->line_number)));
 801ad08:	4b78      	ldr	r3, [pc, #480]	@ (801aeec <report_realtime_status+0x584>)
 801ad0a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801ad0e:	f7fa fe57 	bl	80159c0 <uitoa>
 801ad12:	4602      	mov	r2, r0
 801ad14:	497b      	ldr	r1, [pc, #492]	@ (801af04 <report_realtime_status+0x59c>)
 801ad16:	2002      	movs	r0, #2
 801ad18:	f7fd ff22 	bl	8018b60 <appendbuf>
 801ad1c:	47a8      	blx	r5
 801ad1e:	e6c2      	b.n	801aaa6 <report_realtime_status+0x13e>
            hal.stream.write_all(appendbuf(2, ",", uitoa(spindle_0_state.on ? lroundf(spindle_0->param->rpm_overridden) : 0)));
 801ad20:	6873      	ldr	r3, [r6, #4]
 801ad22:	ed93 0a01 	vldr	s0, [r3, #4]
 801ad26:	f00c fe41 	bl	80279ac <lroundf>
 801ad2a:	e6e5      	b.n	801aaf8 <report_realtime_status+0x190>
            hal.stream.write_all(appendbuf(2, "|F:", get_rate_value(st_get_realtime_rate())));
 801ad2c:	4b6f      	ldr	r3, [pc, #444]	@ (801aeec <report_realtime_status+0x584>)
 801ad2e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801ad32:	4b75      	ldr	r3, [pc, #468]	@ (801af08 <report_realtime_status+0x5a0>)
 801ad34:	f8d3 a000 	ldr.w	sl, [r3]
 801ad38:	f005 fd5a 	bl	80207f0 <st_get_realtime_rate>
 801ad3c:	47d0      	blx	sl
 801ad3e:	4602      	mov	r2, r0
 801ad40:	4972      	ldr	r1, [pc, #456]	@ (801af0c <report_realtime_status+0x5a4>)
 801ad42:	2002      	movs	r0, #2
 801ad44:	f7fd ff0c 	bl	8018b60 <appendbuf>
 801ad48:	47a8      	blx	r5
    if(settings.status_report.pin_state) {
 801ad4a:	4b66      	ldr	r3, [pc, #408]	@ (801aee4 <report_realtime_status+0x57c>)
 801ad4c:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801ad50:	f013 0f10 	tst.w	r3, #16
 801ad54:	d045      	beq.n	801ade2 <report_realtime_status+0x47a>
        axes_signals_t lim_pin_state = limit_signals_merge(hal.limits.get_state());
 801ad56:	4d65      	ldr	r5, [pc, #404]	@ (801aeec <report_realtime_status+0x584>)
 801ad58:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 801ad5a:	4798      	blx	r3
 801ad5c:	9009      	str	r0, [sp, #36]	@ 0x24
 801ad5e:	f7f8 fa91 	bl	8013284 <limit_signals_merge>
 801ad62:	4682      	mov	sl, r0
        control_signals_t ctrl_pin_state = hal.control.get_state();
 801ad64:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801ad66:	4798      	blx	r3
 801ad68:	4605      	mov	r5, r0
        ctrl_pin_state.probe_triggered = probe_state.triggered;
 801ad6a:	f369 358e 	bfi	r5, r9, #14, #1
        ctrl_pin_state.probe_disconnected = !probe_state.connected;
 801ad6e:	f3c9 0946 	ubfx	r9, r9, #1, #7
 801ad72:	f089 0901 	eor.w	r9, r9, #1
 801ad76:	f369 15c7 	bfi	r5, r9, #7, #1
        ctrl_pin_state.cycle_start |= sys.report.cycle_start;
 801ad7a:	f3c5 0380 	ubfx	r3, r5, #2, #1
 801ad7e:	495a      	ldr	r1, [pc, #360]	@ (801aee8 <report_realtime_status+0x580>)
 801ad80:	f891 2033 	ldrb.w	r2, [r1, #51]	@ 0x33
 801ad84:	f3c2 1280 	ubfx	r2, r2, #6, #1
 801ad88:	4313      	orrs	r3, r2
 801ad8a:	f363 0582 	bfi	r5, r3, #2, #1
        if(sys.flags.value & sys_switches.value) {
 801ad8e:	8acb      	ldrh	r3, [r1, #22]
 801ad90:	f013 0fd0 	tst.w	r3, #208	@ 0xd0
 801ad94:	d01e      	beq.n	801add4 <report_realtime_status+0x46c>
            if(!hal.signals_cap.stop_disable)
 801ad96:	4b55      	ldr	r3, [pc, #340]	@ (801aeec <report_realtime_status+0x584>)
 801ad98:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801ad9c:	f013 0f20 	tst.w	r3, #32
 801ada0:	d104      	bne.n	801adac <report_realtime_status+0x444>
                ctrl_pin_state.stop_disable = sys.flags.optional_stop_disable;
 801ada2:	7d8a      	ldrb	r2, [r1, #22]
 801ada4:	f3c2 1280 	ubfx	r2, r2, #6, #1
 801ada8:	f362 1545 	bfi	r5, r2, #5, #1
            if(!hal.signals_cap.block_delete)
 801adac:	f013 0f10 	tst.w	r3, #16
 801adb0:	d105      	bne.n	801adbe <report_realtime_status+0x456>
                ctrl_pin_state.block_delete = sys.flags.block_delete_enabled;
 801adb2:	4b4d      	ldr	r3, [pc, #308]	@ (801aee8 <report_realtime_status+0x580>)
 801adb4:	7d9b      	ldrb	r3, [r3, #22]
 801adb6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801adba:	f363 1504 	bfi	r5, r3, #4, #1
            if(!hal.signals_cap.single_block)
 801adbe:	4b4b      	ldr	r3, [pc, #300]	@ (801aeec <report_realtime_status+0x584>)
 801adc0:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
 801adc4:	f013 0f08 	tst.w	r3, #8
 801adc8:	d104      	bne.n	801add4 <report_realtime_status+0x46c>
                ctrl_pin_state.single_block = sys.flags.single_block;
 801adca:	4b47      	ldr	r3, [pc, #284]	@ (801aee8 <report_realtime_status+0x580>)
 801adcc:	7d9b      	ldrb	r3, [r3, #22]
 801adce:	09db      	lsrs	r3, r3, #7
 801add0:	f363 25cb 	bfi	r5, r3, #11, #1
        if(lim_pin_state.value | ctrl_pin_state.value) {
 801add4:	fa5f f38a 	uxtb.w	r3, sl
 801add8:	fa1f f985 	uxth.w	r9, r5
 801addc:	ea53 0209 	orrs.w	r2, r3, r9
 801ade0:	d118      	bne.n	801ae14 <report_realtime_status+0x4ac>
    if(settings.status_report.work_coord_offset) {
 801ade2:	4b40      	ldr	r3, [pc, #256]	@ (801aee4 <report_realtime_status+0x57c>)
 801ade4:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801ade8:	f013 0f20 	tst.w	r3, #32
 801adec:	d03b      	beq.n	801ae66 <report_realtime_status+0x4fe>
        if(wco_counter > 0 && !report.wco) {
 801adee:	4a48      	ldr	r2, [pc, #288]	@ (801af10 <report_realtime_status+0x5a8>)
 801adf0:	7812      	ldrb	r2, [r2, #0]
 801adf2:	b37a      	cbz	r2, 801ae54 <report_realtime_status+0x4ec>
 801adf4:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801adf8:	d12c      	bne.n	801ae54 <report_realtime_status+0x4ec>
            if(wco_counter > (REPORT_WCO_REFRESH_IDLE_COUNT - 1) && state == STATE_IDLE)
 801adfa:	2a09      	cmp	r2, #9
 801adfc:	d905      	bls.n	801ae0a <report_realtime_status+0x4a2>
 801adfe:	f1b8 0f00 	cmp.w	r8, #0
 801ae02:	d102      	bne.n	801ae0a <report_realtime_status+0x4a2>
                wco_counter = REPORT_WCO_REFRESH_IDLE_COUNT - 1;
 801ae04:	4a42      	ldr	r2, [pc, #264]	@ (801af10 <report_realtime_status+0x5a8>)
 801ae06:	2109      	movs	r1, #9
 801ae08:	7011      	strb	r1, [r2, #0]
            wco_counter--;
 801ae0a:	4941      	ldr	r1, [pc, #260]	@ (801af10 <report_realtime_status+0x5a8>)
 801ae0c:	780a      	ldrb	r2, [r1, #0]
 801ae0e:	3a01      	subs	r2, #1
 801ae10:	700a      	strb	r2, [r1, #0]
 801ae12:	e02a      	b.n	801ae6a <report_realtime_status+0x502>
            strcpy(buf, "|Pn:");
 801ae14:	4a3f      	ldr	r2, [pc, #252]	@ (801af14 <report_realtime_status+0x5ac>)
 801ae16:	4940      	ldr	r1, [pc, #256]	@ (801af18 <report_realtime_status+0x5b0>)
 801ae18:	c903      	ldmia	r1, {r0, r1}
 801ae1a:	6010      	str	r0, [r2, #0]
 801ae1c:	7111      	strb	r1, [r2, #4]
            if(lim_pin_state.value && !ctrl_pin_state.limits_override)
 801ae1e:	b14b      	cbz	r3, 801ae34 <report_realtime_status+0x4cc>
 801ae20:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 801ae24:	d001      	beq.n	801ae2a <report_realtime_status+0x4c2>
            char *append = &buf[4];
 801ae26:	483d      	ldr	r0, [pc, #244]	@ (801af1c <report_realtime_status+0x5b4>)
 801ae28:	e005      	b.n	801ae36 <report_realtime_status+0x4ce>
                append = axis_signals_tostring(append, lim_pin_state);
 801ae2a:	4651      	mov	r1, sl
 801ae2c:	1d10      	adds	r0, r2, #4
 801ae2e:	f7fd fab1 	bl	8018394 <axis_signals_tostring>
 801ae32:	e000      	b.n	801ae36 <report_realtime_status+0x4ce>
            char *append = &buf[4];
 801ae34:	4839      	ldr	r0, [pc, #228]	@ (801af1c <report_realtime_status+0x5b4>)
            if(ctrl_pin_state.value)
 801ae36:	f1b9 0f00 	cmp.w	r9, #0
 801ae3a:	d107      	bne.n	801ae4c <report_realtime_status+0x4e4>
            *append = '\0';
 801ae3c:	2300      	movs	r3, #0
 801ae3e:	7003      	strb	r3, [r0, #0]
            hal.stream.write_all(buf);
 801ae40:	4b2a      	ldr	r3, [pc, #168]	@ (801aeec <report_realtime_status+0x584>)
 801ae42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ae46:	4833      	ldr	r0, [pc, #204]	@ (801af14 <report_realtime_status+0x5ac>)
 801ae48:	4798      	blx	r3
 801ae4a:	e7ca      	b.n	801ade2 <report_realtime_status+0x47a>
                append = control_signals_tostring(append, ctrl_pin_state);
 801ae4c:	4629      	mov	r1, r5
 801ae4e:	f7fd fab9 	bl	80183c4 <control_signals_tostring>
 801ae52:	e7f3      	b.n	801ae3c <report_realtime_status+0x4d4>
            wco_counter = state & (STATE_HOMING|STATE_CYCLE|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 801ae54:	f018 0f7c 	tst.w	r8, #124	@ 0x7c
 801ae58:	d003      	beq.n	801ae62 <report_realtime_status+0x4fa>
 801ae5a:	211d      	movs	r1, #29
 801ae5c:	4a2c      	ldr	r2, [pc, #176]	@ (801af10 <report_realtime_status+0x5a8>)
 801ae5e:	7011      	strb	r1, [r2, #0]
 801ae60:	e003      	b.n	801ae6a <report_realtime_status+0x502>
 801ae62:	2109      	movs	r1, #9
 801ae64:	e7fa      	b.n	801ae5c <report_realtime_status+0x4f4>
        report.wco = Off;
 801ae66:	f36f 2408 	bfc	r4, #8, #1
    if(settings.status_report.overrides) {
 801ae6a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801ae6e:	d059      	beq.n	801af24 <report_realtime_status+0x5bc>
        if (override_counter > 0 && !report.overrides)
 801ae70:	4b2b      	ldr	r3, [pc, #172]	@ (801af20 <report_realtime_status+0x5b8>)
 801ae72:	781b      	ldrb	r3, [r3, #0]
 801ae74:	b133      	cbz	r3, 801ae84 <report_realtime_status+0x51c>
 801ae76:	f014 0f40 	tst.w	r4, #64	@ 0x40
 801ae7a:	d103      	bne.n	801ae84 <report_realtime_status+0x51c>
            override_counter--;
 801ae7c:	3b01      	subs	r3, #1
 801ae7e:	4a28      	ldr	r2, [pc, #160]	@ (801af20 <report_realtime_status+0x5b8>)
 801ae80:	7013      	strb	r3, [r2, #0]
 801ae82:	e051      	b.n	801af28 <report_realtime_status+0x5c0>
        else if((report.overrides = !report.wco)) {
 801ae84:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801ae88:	f083 0301 	eor.w	r3, r3, #1
 801ae8c:	f003 0301 	and.w	r3, r3, #1
 801ae90:	f363 1486 	bfi	r4, r3, #6, #1
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d047      	beq.n	801af28 <report_realtime_status+0x5c0>
            report.spindle = report.spindle || spindle_0_state.on;
 801ae98:	f014 0f10 	tst.w	r4, #16
 801ae9c:	d104      	bne.n	801aea8 <report_realtime_status+0x540>
 801ae9e:	f017 0f01 	tst.w	r7, #1
 801aea2:	d00e      	beq.n	801aec2 <report_realtime_status+0x55a>
 801aea4:	2301      	movs	r3, #1
 801aea6:	e000      	b.n	801aeaa <report_realtime_status+0x542>
 801aea8:	2301      	movs	r3, #1
 801aeaa:	f363 1404 	bfi	r4, r3, #4, #1
            report.coolant = report.coolant || hal.coolant.get_state().value != 0;
 801aeae:	f014 0f20 	tst.w	r4, #32
 801aeb2:	d108      	bne.n	801aec6 <report_realtime_status+0x55e>
 801aeb4:	4b0d      	ldr	r3, [pc, #52]	@ (801aeec <report_realtime_status+0x584>)
 801aeb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801aeb8:	4798      	blx	r3
 801aeba:	b2c0      	uxtb	r0, r0
 801aebc:	b968      	cbnz	r0, 801aeda <report_realtime_status+0x572>
 801aebe:	2300      	movs	r3, #0
 801aec0:	e002      	b.n	801aec8 <report_realtime_status+0x560>
            report.spindle = report.spindle || spindle_0_state.on;
 801aec2:	2300      	movs	r3, #0
 801aec4:	e7f1      	b.n	801aeaa <report_realtime_status+0x542>
            report.coolant = report.coolant || hal.coolant.get_state().value != 0;
 801aec6:	2301      	movs	r3, #1
 801aec8:	f363 1445 	bfi	r4, r3, #5, #1
            override_counter = state & (STATE_HOMING|STATE_CYCLE|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 801aecc:	f018 0f7c 	tst.w	r8, #124	@ 0x7c
 801aed0:	d005      	beq.n	801aede <report_realtime_status+0x576>
 801aed2:	2213      	movs	r2, #19
 801aed4:	4b12      	ldr	r3, [pc, #72]	@ (801af20 <report_realtime_status+0x5b8>)
 801aed6:	701a      	strb	r2, [r3, #0]
 801aed8:	e026      	b.n	801af28 <report_realtime_status+0x5c0>
            report.coolant = report.coolant || hal.coolant.get_state().value != 0;
 801aeda:	2301      	movs	r3, #1
 801aedc:	e7f4      	b.n	801aec8 <report_realtime_status+0x560>
            override_counter = state & (STATE_HOMING|STATE_CYCLE|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 801aede:	2209      	movs	r2, #9
 801aee0:	e7f8      	b.n	801aed4 <report_realtime_status+0x56c>
 801aee2:	bf00      	nop
 801aee4:	200024a8 	.word	0x200024a8
 801aee8:	20001d70 	.word	0x20001d70
 801aeec:	20001a90 	.word	0x20001a90
 801aef0:	0802c57c 	.word	0x0802c57c
 801aef4:	0802c574 	.word	0x0802c574
 801aef8:	0802c584 	.word	0x0802c584
 801aefc:	0802c594 	.word	0x0802c594
 801af00:	0802c518 	.word	0x0802c518
 801af04:	0802c5ac 	.word	0x0802c5ac
 801af08:	2000236c 	.word	0x2000236c
 801af0c:	0802c5bc 	.word	0x0802c5bc
 801af10:	20002369 	.word	0x20002369
 801af14:	20002378 	.word	0x20002378
 801af18:	0802c5c0 	.word	0x0802c5c0
 801af1c:	2000237c 	.word	0x2000237c
 801af20:	2000236a 	.word	0x2000236a
        report.overrides = Off;
 801af24:	f36f 1486 	bfc	r4, #6, #1
    if(report.value || gc_state.tool_change) {
 801af28:	9400      	str	r4, [sp, #0]
 801af2a:	b92c      	cbnz	r4, 801af38 <report_realtime_status+0x5d0>
 801af2c:	4b9e      	ldr	r3, [pc, #632]	@ (801b1a8 <report_realtime_status+0x840>)
 801af2e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801af32:	2b00      	cmp	r3, #0
 801af34:	f000 80e2 	beq.w	801b0fc <report_realtime_status+0x794>
        if(report.wco) {
 801af38:	f3c4 2907 	ubfx	r9, r4, #8, #8
 801af3c:	46c8      	mov	r8, r9
 801af3e:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801af42:	d014      	beq.n	801af6e <report_realtime_status+0x606>
            if(report.force_wco || !sys.flags.synchronizing) {
 801af44:	f014 5f00 	tst.w	r4, #536870912	@ 0x20000000
 801af48:	d105      	bne.n	801af56 <report_realtime_status+0x5ee>
 801af4a:	4b98      	ldr	r3, [pc, #608]	@ (801b1ac <report_realtime_status+0x844>)
 801af4c:	7ddb      	ldrb	r3, [r3, #23]
 801af4e:	f013 0f04 	tst.w	r3, #4
 801af52:	f040 8124 	bne.w	801b19e <report_realtime_status+0x836>
                hal.stream.write_all("|WCO:");
 801af56:	4d96      	ldr	r5, [pc, #600]	@ (801b1b0 <report_realtime_status+0x848>)
 801af58:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 801af5c:	4895      	ldr	r0, [pc, #596]	@ (801b1b4 <report_realtime_status+0x84c>)
 801af5e:	4798      	blx	r3
                hal.stream.write_all(get_axis_values(wco));
 801af60:	f8d5 50b8 	ldr.w	r5, [r5, #184]	@ 0xb8
 801af64:	4b94      	ldr	r3, [pc, #592]	@ (801b1b8 <report_realtime_status+0x850>)
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	a803      	add	r0, sp, #12
 801af6a:	4798      	blx	r3
 801af6c:	47a8      	blx	r5
        if(report.gwco) {
 801af6e:	f018 0f02 	tst.w	r8, #2
 801af72:	d00b      	beq.n	801af8c <report_realtime_status+0x624>
            hal.stream.write_all("|WCS:G");
 801af74:	4d8e      	ldr	r5, [pc, #568]	@ (801b1b0 <report_realtime_status+0x848>)
 801af76:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 801af7a:	4890      	ldr	r0, [pc, #576]	@ (801b1bc <report_realtime_status+0x854>)
 801af7c:	4798      	blx	r3
            hal.stream.write_all(map_coord_system(gc_state.modal.coord_system.id));
 801af7e:	f8d5 50b8 	ldr.w	r5, [r5, #184]	@ 0xb8
 801af82:	4b89      	ldr	r3, [pc, #548]	@ (801b1a8 <report_realtime_status+0x840>)
 801af84:	7d18      	ldrb	r0, [r3, #20]
 801af86:	f7fd fd99 	bl	8018abc <map_coord_system>
 801af8a:	47a8      	blx	r5
        if(report.overrides) {
 801af8c:	b2e5      	uxtb	r5, r4
 801af8e:	f014 0f40 	tst.w	r4, #64	@ 0x40
 801af92:	f040 8133 	bne.w	801b1fc <report_realtime_status+0x894>
        if(report.spindle || report.coolant || report.tool || gc_state.tool_change) {
 801af96:	f015 0fb0 	tst.w	r5, #176	@ 0xb0
 801af9a:	d104      	bne.n	801afa6 <report_realtime_status+0x63e>
 801af9c:	4b82      	ldr	r3, [pc, #520]	@ (801b1a8 <report_realtime_status+0x840>)
 801af9e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d03c      	beq.n	801b020 <report_realtime_status+0x6b8>
            coolant_state_t cl_state = hal.coolant.get_state();
 801afa6:	4b82      	ldr	r3, [pc, #520]	@ (801b1b0 <report_realtime_status+0x848>)
 801afa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801afaa:	4798      	blx	r3
            strcpy(buf, "|A:");
 801afac:	4b84      	ldr	r3, [pc, #528]	@ (801b1c0 <report_realtime_status+0x858>)
 801afae:	4a85      	ldr	r2, [pc, #532]	@ (801b1c4 <report_realtime_status+0x85c>)
 801afb0:	601a      	str	r2, [r3, #0]
            if (spindle_0_state.on)
 801afb2:	b2fa      	uxtb	r2, r7
 801afb4:	f017 0f01 	tst.w	r7, #1
 801afb8:	f000 8151 	beq.w	801b25e <report_realtime_status+0x8f6>
                *append++ = spindle_0_state.ccw ? 'C' : 'S';
 801afbc:	f012 0f02 	tst.w	r2, #2
 801afc0:	f000 814b 	beq.w	801b25a <report_realtime_status+0x8f2>
 801afc4:	2143      	movs	r1, #67	@ 0x43
 801afc6:	4b7e      	ldr	r3, [pc, #504]	@ (801b1c0 <report_realtime_status+0x858>)
 801afc8:	70d9      	strb	r1, [r3, #3]
 801afca:	3304      	adds	r3, #4
            if(spindle_0_state.encoder_error && hal.driver_cap.spindle_sync)
 801afcc:	f012 0f20 	tst.w	r2, #32
 801afd0:	d008      	beq.n	801afe4 <report_realtime_status+0x67c>
 801afd2:	4a77      	ldr	r2, [pc, #476]	@ (801b1b0 <report_realtime_status+0x848>)
 801afd4:	f892 21d9 	ldrb.w	r2, [r2, #473]	@ 0x1d9
 801afd8:	f012 0f01 	tst.w	r2, #1
 801afdc:	d002      	beq.n	801afe4 <report_realtime_status+0x67c>
                *append++ = 'E';
 801afde:	2245      	movs	r2, #69	@ 0x45
 801afe0:	f803 2b01 	strb.w	r2, [r3], #1
            if (cl_state.flood)
 801afe4:	b2c2      	uxtb	r2, r0
 801afe6:	f010 0f01 	tst.w	r0, #1
 801afea:	d002      	beq.n	801aff2 <report_realtime_status+0x68a>
                *append++ = 'F';
 801afec:	2146      	movs	r1, #70	@ 0x46
 801afee:	f803 1b01 	strb.w	r1, [r3], #1
            if (cl_state.mist)
 801aff2:	f012 0f02 	tst.w	r2, #2
 801aff6:	d002      	beq.n	801affe <report_realtime_status+0x696>
                *append++ = 'M';
 801aff8:	224d      	movs	r2, #77	@ 0x4d
 801affa:	f803 2b01 	strb.w	r2, [r3], #1
            if(gc_state.tool_change && !report.tool)
 801affe:	4a6a      	ldr	r2, [pc, #424]	@ (801b1a8 <report_realtime_status+0x840>)
 801b000:	f892 207f 	ldrb.w	r2, [r2, #127]	@ 0x7f
 801b004:	b12a      	cbz	r2, 801b012 <report_realtime_status+0x6aa>
 801b006:	f015 0f80 	tst.w	r5, #128	@ 0x80
 801b00a:	d102      	bne.n	801b012 <report_realtime_status+0x6aa>
                *append++ = 'T';
 801b00c:	2254      	movs	r2, #84	@ 0x54
 801b00e:	f803 2b01 	strb.w	r2, [r3], #1
            *append = '\0';
 801b012:	2200      	movs	r2, #0
 801b014:	701a      	strb	r2, [r3, #0]
            hal.stream.write_all(buf);
 801b016:	4b66      	ldr	r3, [pc, #408]	@ (801b1b0 <report_realtime_status+0x848>)
 801b018:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b01c:	4868      	ldr	r0, [pc, #416]	@ (801b1c0 <report_realtime_status+0x858>)
 801b01e:	4798      	blx	r3
        if(report.scaling) {
 801b020:	f015 0f02 	tst.w	r5, #2
 801b024:	f040 811d 	bne.w	801b262 <report_realtime_status+0x8fa>
        if((report.all || report.mpg_mode) && settings.report_interval) {
 801b028:	4b67      	ldr	r3, [pc, #412]	@ (801b1c8 <report_realtime_status+0x860>)
 801b02a:	9a00      	ldr	r2, [sp, #0]
 801b02c:	421a      	tst	r2, r3
 801b02e:	d013      	beq.n	801b058 <report_realtime_status+0x6f0>
 801b030:	4b66      	ldr	r3, [pc, #408]	@ (801b1cc <report_realtime_status+0x864>)
 801b032:	8a9b      	ldrh	r3, [r3, #20]
 801b034:	b183      	cbz	r3, 801b058 <report_realtime_status+0x6f0>
            hal.stream.write_all(sys.flags.auto_reporting ? "|AR:" : "|AR");
 801b036:	4b5e      	ldr	r3, [pc, #376]	@ (801b1b0 <report_realtime_status+0x848>)
 801b038:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b03c:	4a5b      	ldr	r2, [pc, #364]	@ (801b1ac <report_realtime_status+0x844>)
 801b03e:	7dd2      	ldrb	r2, [r2, #23]
 801b040:	f012 0f02 	tst.w	r2, #2
 801b044:	f000 811e 	beq.w	801b284 <report_realtime_status+0x91c>
 801b048:	4861      	ldr	r0, [pc, #388]	@ (801b1d0 <report_realtime_status+0x868>)
 801b04a:	4798      	blx	r3
            if(sys.flags.auto_reporting)
 801b04c:	4b57      	ldr	r3, [pc, #348]	@ (801b1ac <report_realtime_status+0x844>)
 801b04e:	7ddb      	ldrb	r3, [r3, #23]
 801b050:	f013 0f02 	tst.w	r3, #2
 801b054:	f040 8118 	bne.w	801b288 <report_realtime_status+0x920>
        if(report.mpg_mode)
 801b058:	f015 0f01 	tst.w	r5, #1
 801b05c:	d00a      	beq.n	801b074 <report_realtime_status+0x70c>
            hal.stream.write_all(sys.mpg_mode ? "|MPG:1" : "|MPG:0");
 801b05e:	4b54      	ldr	r3, [pc, #336]	@ (801b1b0 <report_realtime_status+0x848>)
 801b060:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b064:	4a51      	ldr	r2, [pc, #324]	@ (801b1ac <report_realtime_status+0x844>)
 801b066:	f892 207f 	ldrb.w	r2, [r2, #127]	@ 0x7f
 801b06a:	2a00      	cmp	r2, #0
 801b06c:	f000 8115 	beq.w	801b29a <report_realtime_status+0x932>
 801b070:	4858      	ldr	r0, [pc, #352]	@ (801b1d4 <report_realtime_status+0x86c>)
 801b072:	4798      	blx	r3
        if(report.homed && (sys.homing.mask || settings.homing.flags.single_axis_commands || settings.homing.flags.manual)) {
 801b074:	f015 0f04 	tst.w	r5, #4
 801b078:	d020      	beq.n	801b0bc <report_realtime_status+0x754>
 801b07a:	4b4c      	ldr	r3, [pc, #304]	@ (801b1ac <report_realtime_status+0x844>)
 801b07c:	7e9b      	ldrb	r3, [r3, #26]
 801b07e:	b92b      	cbnz	r3, 801b08c <report_realtime_status+0x724>
 801b080:	4a52      	ldr	r2, [pc, #328]	@ (801b1cc <report_realtime_status+0x864>)
 801b082:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 801b086:	f012 0f12 	tst.w	r2, #18
 801b08a:	d017      	beq.n	801b0bc <report_realtime_status+0x754>
            axes_signals_t homing = {sys.homing.mask ? sys.homing.mask : AXES_BITMASK};
 801b08c:	b903      	cbnz	r3, 801b090 <report_realtime_status+0x728>
 801b08e:	2307      	movs	r3, #7
            hal.stream.write_all(appendbuf(2, "|H:", (homing.mask & sys.homed.mask) == homing.mask ? "1" : "0"));
 801b090:	4a47      	ldr	r2, [pc, #284]	@ (801b1b0 <report_realtime_status+0x848>)
 801b092:	f8d2 60b8 	ldr.w	r6, [r2, #184]	@ 0xb8
 801b096:	4a45      	ldr	r2, [pc, #276]	@ (801b1ac <report_realtime_status+0x844>)
 801b098:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 801b09c:	4393      	bics	r3, r2
 801b09e:	f000 80fe 	beq.w	801b29e <report_realtime_status+0x936>
 801b0a2:	4a4d      	ldr	r2, [pc, #308]	@ (801b1d8 <report_realtime_status+0x870>)
 801b0a4:	494d      	ldr	r1, [pc, #308]	@ (801b1dc <report_realtime_status+0x874>)
 801b0a6:	2002      	movs	r0, #2
 801b0a8:	f7fd fd5a 	bl	8018b60 <appendbuf>
 801b0ac:	47b0      	blx	r6
            if(settings.homing.flags.single_axis_commands)
 801b0ae:	4b47      	ldr	r3, [pc, #284]	@ (801b1cc <report_realtime_status+0x864>)
 801b0b0:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 801b0b4:	f013 0f02 	tst.w	r3, #2
 801b0b8:	f040 80f3 	bne.w	801b2a2 <report_realtime_status+0x93a>
        if(report.xmode && settings.mode == Mode_Lathe)
 801b0bc:	f015 0f08 	tst.w	r5, #8
 801b0c0:	d004      	beq.n	801b0cc <report_realtime_status+0x764>
 801b0c2:	4b42      	ldr	r3, [pc, #264]	@ (801b1cc <report_realtime_status+0x864>)
 801b0c4:	7e1b      	ldrb	r3, [r3, #24]
 801b0c6:	2b02      	cmp	r3, #2
 801b0c8:	f000 80fa 	beq.w	801b2c0 <report_realtime_status+0x958>
        if(report.tool)
 801b0cc:	f015 0f80 	tst.w	r5, #128	@ 0x80
 801b0d0:	f040 8101 	bne.w	801b2d6 <report_realtime_status+0x96e>
        if(report.tlo_reference)
 801b0d4:	f019 0f80 	tst.w	r9, #128	@ 0x80
 801b0d8:	f040 810d 	bne.w	801b2f6 <report_realtime_status+0x98e>
        if(report.m66result && sys.var5399 > -2) { // M66 result
 801b0dc:	f018 0f08 	tst.w	r8, #8
 801b0e0:	d00c      	beq.n	801b0fc <report_realtime_status+0x794>
 801b0e2:	4b32      	ldr	r3, [pc, #200]	@ (801b1ac <report_realtime_status+0x844>)
 801b0e4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801b0e6:	f1b0 3fff 	cmp.w	r0, #4294967295
 801b0ea:	db07      	blt.n	801b0fc <report_realtime_status+0x794>
            if(sys.var5399 >= 0)
 801b0ec:	2800      	cmp	r0, #0
 801b0ee:	f280 8113 	bge.w	801b318 <report_realtime_status+0x9b0>
                hal.stream.write_all("|In:-1");
 801b0f2:	4b2f      	ldr	r3, [pc, #188]	@ (801b1b0 <report_realtime_status+0x848>)
 801b0f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b0f8:	4839      	ldr	r0, [pc, #228]	@ (801b1e0 <report_realtime_status+0x878>)
 801b0fa:	4798      	blx	r3
    if(grbl.on_realtime_report)
 801b0fc:	4b39      	ldr	r3, [pc, #228]	@ (801b1e4 <report_realtime_status+0x87c>)
 801b0fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b100:	b12b      	cbz	r3, 801b10e <report_realtime_status+0x7a6>
        grbl.on_realtime_report(hal.stream.write_all, sys.report);
 801b102:	4a2a      	ldr	r2, [pc, #168]	@ (801b1ac <report_realtime_status+0x844>)
 801b104:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 801b106:	4a2a      	ldr	r2, [pc, #168]	@ (801b1b0 <report_realtime_status+0x848>)
 801b108:	f8d2 00b8 	ldr.w	r0, [r2, #184]	@ 0xb8
 801b10c:	4798      	blx	r3
    if(report.all) {
 801b10e:	2c00      	cmp	r4, #0
 801b110:	f2c0 810e 	blt.w	801b330 <report_realtime_status+0x9c8>
    if(settings.status_report.parser_state) {
 801b114:	4b2d      	ldr	r3, [pc, #180]	@ (801b1cc <report_realtime_status+0x864>)
 801b116:	f893 30fd 	ldrb.w	r3, [r3, #253]	@ 0xfd
 801b11a:	f013 0f02 	tst.w	r3, #2
 801b11e:	f000 8114 	beq.w	801b34a <report_realtime_status+0x9e2>
        bool is_changed = feed_rate != gc_state.feed_rate || spindle_rpm != gc_state.spindle.rpm || tool_id != gc_state.tool->tool_id;
 801b122:	4b21      	ldr	r3, [pc, #132]	@ (801b1a8 <report_realtime_status+0x840>)
 801b124:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 801b128:	4b2f      	ldr	r3, [pc, #188]	@ (801b1e8 <report_realtime_status+0x880>)
 801b12a:	ed93 7a00 	vldr	s14, [r3]
 801b12e:	eef4 7a47 	vcmp.f32	s15, s14
 801b132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b136:	d113      	bne.n	801b160 <report_realtime_status+0x7f8>
 801b138:	4b1b      	ldr	r3, [pc, #108]	@ (801b1a8 <report_realtime_status+0x840>)
 801b13a:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 801b13e:	4b2b      	ldr	r3, [pc, #172]	@ (801b1ec <report_realtime_status+0x884>)
 801b140:	ed93 7a00 	vldr	s14, [r3]
 801b144:	eef4 6a47 	vcmp.f32	s13, s14
 801b148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b14c:	d108      	bne.n	801b160 <report_realtime_status+0x7f8>
 801b14e:	4b16      	ldr	r3, [pc, #88]	@ (801b1a8 <report_realtime_status+0x840>)
 801b150:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801b154:	691a      	ldr	r2, [r3, #16]
 801b156:	4b26      	ldr	r3, [pc, #152]	@ (801b1f0 <report_realtime_status+0x888>)
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	429a      	cmp	r2, r3
 801b15c:	f000 810a 	beq.w	801b374 <report_realtime_status+0xa0c>
            feed_rate = gc_state.feed_rate;
 801b160:	4b21      	ldr	r3, [pc, #132]	@ (801b1e8 <report_realtime_status+0x880>)
 801b162:	edc3 7a00 	vstr	s15, [r3]
            tool_id = gc_state.tool->tool_id;
 801b166:	4b10      	ldr	r3, [pc, #64]	@ (801b1a8 <report_realtime_status+0x840>)
 801b168:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 801b16c:	6911      	ldr	r1, [r2, #16]
 801b16e:	4a20      	ldr	r2, [pc, #128]	@ (801b1f0 <report_realtime_status+0x888>)
 801b170:	6011      	str	r1, [r2, #0]
            spindle_rpm = gc_state.spindle.rpm;
 801b172:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b174:	4b1d      	ldr	r3, [pc, #116]	@ (801b1ec <report_realtime_status+0x884>)
 801b176:	601a      	str	r2, [r3, #0]
 801b178:	2501      	movs	r5, #1
        if (is_changed)
 801b17a:	b12d      	cbz	r5, 801b188 <report_realtime_status+0x820>
            system_set_exec_state_flag(EXEC_GCODE_REPORT);
 801b17c:	4b0c      	ldr	r3, [pc, #48]	@ (801b1b0 <report_realtime_status+0x848>)
 801b17e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b180:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801b184:	481b      	ldr	r0, [pc, #108]	@ (801b1f4 <report_realtime_status+0x88c>)
 801b186:	4798      	blx	r3
        if(report.tool_offset)
 801b188:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 801b18c:	f000 80dd 	beq.w	801b34a <report_realtime_status+0x9e2>
            system_set_exec_state_flag(EXEC_TLO_REPORT);
 801b190:	4b07      	ldr	r3, [pc, #28]	@ (801b1b0 <report_realtime_status+0x848>)
 801b192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b194:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801b198:	4816      	ldr	r0, [pc, #88]	@ (801b1f4 <report_realtime_status+0x88c>)
 801b19a:	4798      	blx	r3
 801b19c:	e0d5      	b.n	801b34a <report_realtime_status+0x9e2>
                wco_counter = 0;
 801b19e:	4b16      	ldr	r3, [pc, #88]	@ (801b1f8 <report_realtime_status+0x890>)
 801b1a0:	2200      	movs	r2, #0
 801b1a2:	701a      	strb	r2, [r3, #0]
 801b1a4:	e6e3      	b.n	801af6e <report_realtime_status+0x606>
 801b1a6:	bf00      	nop
 801b1a8:	200017c8 	.word	0x200017c8
 801b1ac:	20001d70 	.word	0x20001d70
 801b1b0:	20001a90 	.word	0x20001a90
 801b1b4:	0802c5c8 	.word	0x0802c5c8
 801b1b8:	20002374 	.word	0x20002374
 801b1bc:	0802c5d0 	.word	0x0802c5d0
 801b1c0:	20002378 	.word	0x20002378
 801b1c4:	003a417c 	.word	0x003a417c
 801b1c8:	80000001 	.word	0x80000001
 801b1cc:	200024a8 	.word	0x200024a8
 801b1d0:	0802c520 	.word	0x0802c520
 801b1d4:	0802c52c 	.word	0x0802c52c
 801b1d8:	0802a0ac 	.word	0x0802a0ac
 801b1dc:	0802c5e8 	.word	0x0802c5e8
 801b1e0:	0802c600 	.word	0x0802c600
 801b1e4:	20001c78 	.word	0x20001c78
 801b1e8:	20002364 	.word	0x20002364
 801b1ec:	20002360 	.word	0x20002360
 801b1f0:	2000235c 	.word	0x2000235c
 801b1f4:	20001db8 	.word	0x20001db8
 801b1f8:	20002369 	.word	0x20002369
            hal.stream.write_all(appendbuf(2, "|Ov:", uitoa((uint32_t)sys.override.feed_rate)));
 801b1fc:	f8df a1f4 	ldr.w	sl, [pc, #500]	@ 801b3f4 <report_realtime_status+0xa8c>
 801b200:	f8da 30b8 	ldr.w	r3, [sl, #184]	@ 0xb8
 801b204:	9301      	str	r3, [sp, #4]
 801b206:	f8df b204 	ldr.w	fp, [pc, #516]	@ 801b40c <report_realtime_status+0xaa4>
 801b20a:	f8db 001c 	ldr.w	r0, [fp, #28]
 801b20e:	f7fa fbd7 	bl	80159c0 <uitoa>
 801b212:	4602      	mov	r2, r0
 801b214:	4974      	ldr	r1, [pc, #464]	@ (801b3e8 <report_realtime_status+0xa80>)
 801b216:	2002      	movs	r0, #2
 801b218:	f7fd fca2 	bl	8018b60 <appendbuf>
 801b21c:	9b01      	ldr	r3, [sp, #4]
 801b21e:	4798      	blx	r3
            hal.stream.write_all(appendbuf(2, ",", uitoa((uint32_t)sys.override.rapid_rate)));
 801b220:	f8da 30b8 	ldr.w	r3, [sl, #184]	@ 0xb8
 801b224:	9301      	str	r3, [sp, #4]
 801b226:	f8db 0020 	ldr.w	r0, [fp, #32]
 801b22a:	f7fa fbc9 	bl	80159c0 <uitoa>
 801b22e:	4602      	mov	r2, r0
 801b230:	f8df b1dc 	ldr.w	fp, [pc, #476]	@ 801b410 <report_realtime_status+0xaa8>
 801b234:	4659      	mov	r1, fp
 801b236:	2002      	movs	r0, #2
 801b238:	f7fd fc92 	bl	8018b60 <appendbuf>
 801b23c:	9b01      	ldr	r3, [sp, #4]
 801b23e:	4798      	blx	r3
            hal.stream.write_all(appendbuf(2, ",", uitoa((uint32_t)spindle_0->param->override_pct)));
 801b240:	f8da a0b8 	ldr.w	sl, [sl, #184]	@ 0xb8
 801b244:	6873      	ldr	r3, [r6, #4]
 801b246:	68d8      	ldr	r0, [r3, #12]
 801b248:	f7fa fbba 	bl	80159c0 <uitoa>
 801b24c:	4602      	mov	r2, r0
 801b24e:	4659      	mov	r1, fp
 801b250:	2002      	movs	r0, #2
 801b252:	f7fd fc85 	bl	8018b60 <appendbuf>
 801b256:	47d0      	blx	sl
 801b258:	e69d      	b.n	801af96 <report_realtime_status+0x62e>
                *append++ = spindle_0_state.ccw ? 'C' : 'S';
 801b25a:	2153      	movs	r1, #83	@ 0x53
 801b25c:	e6b3      	b.n	801afc6 <report_realtime_status+0x65e>
            char *append = &buf[3];
 801b25e:	4b63      	ldr	r3, [pc, #396]	@ (801b3ec <report_realtime_status+0xa84>)
 801b260:	e6b4      	b.n	801afcc <report_realtime_status+0x664>
            axis_signals_tostring(buf, gc_get_g51_state());
 801b262:	f7f2 f823 	bl	800d2ac <gc_get_g51_state>
 801b266:	4601      	mov	r1, r0
 801b268:	4e61      	ldr	r6, [pc, #388]	@ (801b3f0 <report_realtime_status+0xa88>)
 801b26a:	4630      	mov	r0, r6
 801b26c:	f7fd f892 	bl	8018394 <axis_signals_tostring>
            hal.stream.write_all("|Sc:");
 801b270:	4f60      	ldr	r7, [pc, #384]	@ (801b3f4 <report_realtime_status+0xa8c>)
 801b272:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b276:	4860      	ldr	r0, [pc, #384]	@ (801b3f8 <report_realtime_status+0xa90>)
 801b278:	4798      	blx	r3
            hal.stream.write_all(buf);
 801b27a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b27e:	4630      	mov	r0, r6
 801b280:	4798      	blx	r3
 801b282:	e6d1      	b.n	801b028 <report_realtime_status+0x6c0>
            hal.stream.write_all(sys.flags.auto_reporting ? "|AR:" : "|AR");
 801b284:	485d      	ldr	r0, [pc, #372]	@ (801b3fc <report_realtime_status+0xa94>)
 801b286:	e6e0      	b.n	801b04a <report_realtime_status+0x6e2>
                hal.stream.write_all(uitoa(settings.report_interval));
 801b288:	4b5a      	ldr	r3, [pc, #360]	@ (801b3f4 <report_realtime_status+0xa8c>)
 801b28a:	f8d3 60b8 	ldr.w	r6, [r3, #184]	@ 0xb8
 801b28e:	4b5c      	ldr	r3, [pc, #368]	@ (801b400 <report_realtime_status+0xa98>)
 801b290:	8a98      	ldrh	r0, [r3, #20]
 801b292:	f7fa fb95 	bl	80159c0 <uitoa>
 801b296:	47b0      	blx	r6
 801b298:	e6de      	b.n	801b058 <report_realtime_status+0x6f0>
            hal.stream.write_all(sys.mpg_mode ? "|MPG:1" : "|MPG:0");
 801b29a:	485a      	ldr	r0, [pc, #360]	@ (801b404 <report_realtime_status+0xa9c>)
 801b29c:	e6e9      	b.n	801b072 <report_realtime_status+0x70a>
            hal.stream.write_all(appendbuf(2, "|H:", (homing.mask & sys.homed.mask) == homing.mask ? "1" : "0"));
 801b29e:	4a5a      	ldr	r2, [pc, #360]	@ (801b408 <report_realtime_status+0xaa0>)
 801b2a0:	e700      	b.n	801b0a4 <report_realtime_status+0x73c>
                hal.stream.write_all(appendbuf(2, ",", uitoa(sys.homed.mask)));
 801b2a2:	4b54      	ldr	r3, [pc, #336]	@ (801b3f4 <report_realtime_status+0xa8c>)
 801b2a4:	f8d3 60b8 	ldr.w	r6, [r3, #184]	@ 0xb8
 801b2a8:	4b58      	ldr	r3, [pc, #352]	@ (801b40c <report_realtime_status+0xaa4>)
 801b2aa:	f893 0054 	ldrb.w	r0, [r3, #84]	@ 0x54
 801b2ae:	f7fa fb87 	bl	80159c0 <uitoa>
 801b2b2:	4602      	mov	r2, r0
 801b2b4:	4956      	ldr	r1, [pc, #344]	@ (801b410 <report_realtime_status+0xaa8>)
 801b2b6:	2002      	movs	r0, #2
 801b2b8:	f7fd fc52 	bl	8018b60 <appendbuf>
 801b2bc:	47b0      	blx	r6
 801b2be:	e6fd      	b.n	801b0bc <report_realtime_status+0x754>
            hal.stream.write_all(gc_state.modal.diameter_mode ? "|D:1" : "|D:0");
 801b2c0:	4b4c      	ldr	r3, [pc, #304]	@ (801b3f4 <report_realtime_status+0xa8c>)
 801b2c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b2c6:	4a53      	ldr	r2, [pc, #332]	@ (801b414 <report_realtime_status+0xaac>)
 801b2c8:	7952      	ldrb	r2, [r2, #5]
 801b2ca:	b112      	cbz	r2, 801b2d2 <report_realtime_status+0x96a>
 801b2cc:	4852      	ldr	r0, [pc, #328]	@ (801b418 <report_realtime_status+0xab0>)
 801b2ce:	4798      	blx	r3
 801b2d0:	e6fc      	b.n	801b0cc <report_realtime_status+0x764>
 801b2d2:	4852      	ldr	r0, [pc, #328]	@ (801b41c <report_realtime_status+0xab4>)
 801b2d4:	e7fb      	b.n	801b2ce <report_realtime_status+0x966>
            hal.stream.write_all(appendbuf(2, "|T:", uitoa((uint32_t)gc_state.tool->tool_id)));
 801b2d6:	4b47      	ldr	r3, [pc, #284]	@ (801b3f4 <report_realtime_status+0xa8c>)
 801b2d8:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801b2dc:	4b4d      	ldr	r3, [pc, #308]	@ (801b414 <report_realtime_status+0xaac>)
 801b2de:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801b2e2:	6918      	ldr	r0, [r3, #16]
 801b2e4:	f7fa fb6c 	bl	80159c0 <uitoa>
 801b2e8:	4602      	mov	r2, r0
 801b2ea:	494d      	ldr	r1, [pc, #308]	@ (801b420 <report_realtime_status+0xab8>)
 801b2ec:	2002      	movs	r0, #2
 801b2ee:	f7fd fc37 	bl	8018b60 <appendbuf>
 801b2f2:	47a8      	blx	r5
 801b2f4:	e6ee      	b.n	801b0d4 <report_realtime_status+0x76c>
            hal.stream.write_all(appendbuf(2, "|TLR:", uitoa(sys.tlo_reference_set.mask != 0)));
 801b2f6:	4b3f      	ldr	r3, [pc, #252]	@ (801b3f4 <report_realtime_status+0xa8c>)
 801b2f8:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801b2fc:	4b43      	ldr	r3, [pc, #268]	@ (801b40c <report_realtime_status+0xaa4>)
 801b2fe:	79d8      	ldrb	r0, [r3, #7]
 801b300:	3800      	subs	r0, #0
 801b302:	bf18      	it	ne
 801b304:	2001      	movne	r0, #1
 801b306:	f7fa fb5b 	bl	80159c0 <uitoa>
 801b30a:	4602      	mov	r2, r0
 801b30c:	4945      	ldr	r1, [pc, #276]	@ (801b424 <report_realtime_status+0xabc>)
 801b30e:	2002      	movs	r0, #2
 801b310:	f7fd fc26 	bl	8018b60 <appendbuf>
 801b314:	47a8      	blx	r5
 801b316:	e6e1      	b.n	801b0dc <report_realtime_status+0x774>
                hal.stream.write_all(appendbuf(2, "|In:", uitoa(sys.var5399)));
 801b318:	4b36      	ldr	r3, [pc, #216]	@ (801b3f4 <report_realtime_status+0xa8c>)
 801b31a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801b31e:	f7fa fb4f 	bl	80159c0 <uitoa>
 801b322:	4602      	mov	r2, r0
 801b324:	4940      	ldr	r1, [pc, #256]	@ (801b428 <report_realtime_status+0xac0>)
 801b326:	2002      	movs	r0, #2
 801b328:	f7fd fc1a 	bl	8018b60 <appendbuf>
 801b32c:	47a8      	blx	r5
 801b32e:	e6e5      	b.n	801b0fc <report_realtime_status+0x794>
        hal.stream.write_all("|FW:grblHAL");
 801b330:	4b30      	ldr	r3, [pc, #192]	@ (801b3f4 <report_realtime_status+0xa8c>)
 801b332:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b336:	483d      	ldr	r0, [pc, #244]	@ (801b42c <report_realtime_status+0xac4>)
 801b338:	4798      	blx	r3
        if(sys.blocking_event)
 801b33a:	4b34      	ldr	r3, [pc, #208]	@ (801b40c <report_realtime_status+0xaa4>)
 801b33c:	795b      	ldrb	r3, [r3, #5]
 801b33e:	b123      	cbz	r3, 801b34a <report_realtime_status+0x9e2>
            hal.stream.write_all("|$C:1");
 801b340:	4b2c      	ldr	r3, [pc, #176]	@ (801b3f4 <report_realtime_status+0xa8c>)
 801b342:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b346:	483a      	ldr	r0, [pc, #232]	@ (801b430 <report_realtime_status+0xac8>)
 801b348:	4798      	blx	r3
    hal.stream.write_all(">" ASCII_EOL);
 801b34a:	4b2a      	ldr	r3, [pc, #168]	@ (801b3f4 <report_realtime_status+0xa8c>)
 801b34c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b350:	4838      	ldr	r0, [pc, #224]	@ (801b434 <report_realtime_status+0xacc>)
 801b352:	4798      	blx	r3
    system_add_rt_report(Report_ClearAll);
 801b354:	2000      	movs	r0, #0
 801b356:	f006 fdb5 	bl	8021ec4 <system_add_rt_report>
    if(settings.status_report.work_coord_offset && wco_counter == 0)
 801b35a:	4b29      	ldr	r3, [pc, #164]	@ (801b400 <report_realtime_status+0xa98>)
 801b35c:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801b360:	f013 0f20 	tst.w	r3, #32
 801b364:	d003      	beq.n	801b36e <report_realtime_status+0xa06>
 801b366:	4b34      	ldr	r3, [pc, #208]	@ (801b438 <report_realtime_status+0xad0>)
 801b368:	781b      	ldrb	r3, [r3, #0]
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d037      	beq.n	801b3de <report_realtime_status+0xa76>
}
 801b36e:	b00b      	add	sp, #44	@ 0x2c
 801b370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint_fast32_t idx = N_AXIS;
 801b374:	2303      	movs	r3, #3
        idx--;
 801b376:	3b01      	subs	r3, #1
        active = !(gc_state.g92_coord_offset[idx] == 0.0f || gc_state.g92_coord_offset[idx] == -0.0f);
 801b378:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 801b37c:	4a25      	ldr	r2, [pc, #148]	@ (801b414 <report_realtime_status+0xaac>)
 801b37e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801b382:	edd2 7a00 	vldr	s15, [r2]
 801b386:	eef5 7a40 	vcmp.f32	s15, #0.0
 801b38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b38e:	bf14      	ite	ne
 801b390:	2201      	movne	r2, #1
 801b392:	2200      	moveq	r2, #0
    } while(idx && !active);
 801b394:	b123      	cbz	r3, 801b3a0 <report_realtime_status+0xa38>
 801b396:	eef5 7a40 	vcmp.f32	s15, #0.0
 801b39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b39e:	d0ea      	beq.n	801b376 <report_realtime_status+0xa0e>
        } else if ((is_changed = g92_active != is_g92_active()))
 801b3a0:	4b26      	ldr	r3, [pc, #152]	@ (801b43c <report_realtime_status+0xad4>)
 801b3a2:	781b      	ldrb	r3, [r3, #0]
 801b3a4:	4293      	cmp	r3, r2
 801b3a6:	bf14      	ite	ne
 801b3a8:	2501      	movne	r5, #1
 801b3aa:	2500      	moveq	r5, #0
 801b3ac:	d004      	beq.n	801b3b8 <report_realtime_status+0xa50>
            g92_active = !g92_active;
 801b3ae:	f083 0301 	eor.w	r3, r3, #1
 801b3b2:	4a22      	ldr	r2, [pc, #136]	@ (801b43c <report_realtime_status+0xad4>)
 801b3b4:	7013      	strb	r3, [r2, #0]
 801b3b6:	e6e0      	b.n	801b17a <report_realtime_status+0x812>
        else if(memcmp(&last_state, &gc_state.modal, sizeof(gc_modal_t))) {
 801b3b8:	2234      	movs	r2, #52	@ 0x34
 801b3ba:	4916      	ldr	r1, [pc, #88]	@ (801b414 <report_realtime_status+0xaac>)
 801b3bc:	4820      	ldr	r0, [pc, #128]	@ (801b440 <report_realtime_status+0xad8>)
 801b3be:	f009 fc8c 	bl	8024cda <memcmp>
 801b3c2:	2800      	cmp	r0, #0
 801b3c4:	f43f aed9 	beq.w	801b17a <report_realtime_status+0x812>
            last_state = gc_state.modal;
 801b3c8:	4d1d      	ldr	r5, [pc, #116]	@ (801b440 <report_realtime_status+0xad8>)
 801b3ca:	4e12      	ldr	r6, [pc, #72]	@ (801b414 <report_realtime_status+0xaac>)
 801b3cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801b3ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b3d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801b3d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b3d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801b3d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b3d8:	6833      	ldr	r3, [r6, #0]
 801b3da:	602b      	str	r3, [r5, #0]
        if (is_changed)
 801b3dc:	e6ce      	b.n	801b17c <report_realtime_status+0x814>
        system_add_rt_report(Report_WCO); // Set to report on next request
 801b3de:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b3e2:	f006 fd6f 	bl	8021ec4 <system_add_rt_report>
}
 801b3e6:	e7c2      	b.n	801b36e <report_realtime_status+0xa06>
 801b3e8:	0802c5d8 	.word	0x0802c5d8
 801b3ec:	2000237b 	.word	0x2000237b
 801b3f0:	20002378 	.word	0x20002378
 801b3f4:	20001a90 	.word	0x20001a90
 801b3f8:	0802c5e0 	.word	0x0802c5e0
 801b3fc:	0802c528 	.word	0x0802c528
 801b400:	200024a8 	.word	0x200024a8
 801b404:	0802c534 	.word	0x0802c534
 801b408:	0802a0b8 	.word	0x0802a0b8
 801b40c:	20001d70 	.word	0x20001d70
 801b410:	0802c400 	.word	0x0802c400
 801b414:	200017c8 	.word	0x200017c8
 801b418:	0802c53c 	.word	0x0802c53c
 801b41c:	0802c544 	.word	0x0802c544
 801b420:	0802c5ec 	.word	0x0802c5ec
 801b424:	0802c5f0 	.word	0x0802c5f0
 801b428:	0802c5f8 	.word	0x0802c5f8
 801b42c:	0802c608 	.word	0x0802c608
 801b430:	0802c614 	.word	0x0802c614
 801b434:	0802c61c 	.word	0x0802c61c
 801b438:	20002369 	.word	0x20002369
 801b43c:	20002358 	.word	0x20002358
 801b440:	20002324 	.word	0x20002324

0801b444 <report_settings_details>:
{
 801b444:	b538      	push	{r3, r4, r5, lr}
 801b446:	4605      	mov	r5, r0
    if(id != Setting_SettingsAll) {
 801b448:	f240 23e5 	movw	r3, #741	@ 0x2e5
 801b44c:	4299      	cmp	r1, r3
 801b44e:	d00f      	beq.n	801b470 <report_settings_details+0x2c>
 801b450:	460c      	mov	r4, r1
        const setting_detail_t *setting = setting_get_details(id, NULL);
 801b452:	2100      	movs	r1, #0
 801b454:	4620      	mov	r0, r4
 801b456:	f002 fa35 	bl	801d8c4 <setting_get_details>
        if(setting)
 801b45a:	4601      	mov	r1, r0
 801b45c:	b130      	cbz	r0, 801b46c <report_settings_details+0x28>
            report_settings_detail(format, setting, id - setting->id);
 801b45e:	8802      	ldrh	r2, [r0, #0]
 801b460:	1aa2      	subs	r2, r4, r2
 801b462:	4628      	mov	r0, r5
 801b464:	f7fd fc6e 	bl	8018d44 <report_settings_detail>
        status_code_t status = Status_OK;
 801b468:	2000      	movs	r0, #0
 801b46a:	e004      	b.n	801b476 <report_settings_details+0x32>
            status = Status_SettingDisabled;
 801b46c:	2035      	movs	r0, #53	@ 0x35
        return status;
 801b46e:	e002      	b.n	801b476 <report_settings_details+0x32>
    return print_settings_details(format, group);
 801b470:	4611      	mov	r1, r2
 801b472:	f7fd ffdd 	bl	8019430 <print_settings_details>
}
 801b476:	bd38      	pop	{r3, r4, r5, pc}

0801b478 <report_group_settings>:
{
 801b478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b47c:	b089      	sub	sp, #36	@ 0x24
 801b47e:	4680      	mov	r8, r0
 801b480:	460e      	mov	r6, r1
 801b482:	4617      	mov	r7, r2
    for(idx = 0; idx < n_groups; idx++) {
 801b484:	2400      	movs	r4, #0
    bool found = false;
 801b486:	46a1      	mov	r9, r4
    for(idx = 0; idx < n_groups; idx++) {
 801b488:	e017      	b.n	801b4ba <report_group_settings+0x42>
            *s++ = CAPS(c);
 801b48a:	f803 2b01 	strb.w	r2, [r3], #1
        while((c = *s))
 801b48e:	781a      	ldrb	r2, [r3, #0]
 801b490:	b13a      	cbz	r2, 801b4a2 <report_group_settings+0x2a>
            *s++ = CAPS(c);
 801b492:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 801b496:	b2c9      	uxtb	r1, r1
 801b498:	2919      	cmp	r1, #25
 801b49a:	d8f6      	bhi.n	801b48a <report_group_settings+0x12>
 801b49c:	f002 025f 	and.w	r2, r2, #95	@ 0x5f
 801b4a0:	e7f3      	b.n	801b48a <report_group_settings+0x12>
        if((found = matchhere(args, group))) {
 801b4a2:	a901      	add	r1, sp, #4
 801b4a4:	4638      	mov	r0, r7
 801b4a6:	f7fc ff4e 	bl	8018346 <matchhere>
 801b4aa:	2800      	cmp	r0, #0
 801b4ac:	bf14      	ite	ne
 801b4ae:	f04f 0901 	movne.w	r9, #1
 801b4b2:	f04f 0900 	moveq.w	r9, #0
 801b4b6:	d10d      	bne.n	801b4d4 <report_group_settings+0x5c>
    for(idx = 0; idx < n_groups; idx++) {
 801b4b8:	3401      	adds	r4, #1
 801b4ba:	42b4      	cmp	r4, r6
 801b4bc:	d21d      	bcs.n	801b4fa <report_group_settings+0x82>
        strncpy(group, groups[idx].name, sizeof(group) - 1);
 801b4be:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801b4c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801b4c6:	2219      	movs	r2, #25
 801b4c8:	6869      	ldr	r1, [r5, #4]
 801b4ca:	a801      	add	r0, sp, #4
 801b4cc:	f009 fc65 	bl	8024d9a <strncpy>
        s = group;
 801b4d0:	ab01      	add	r3, sp, #4
        while((c = *s))
 801b4d2:	e7dc      	b.n	801b48e <report_group_settings+0x16>
            hal.stream.write(ASCII_EOL "---- ");
 801b4d4:	4c0b      	ldr	r4, [pc, #44]	@ (801b504 <report_group_settings+0x8c>)
 801b4d6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b4da:	480b      	ldr	r0, [pc, #44]	@ (801b508 <report_group_settings+0x90>)
 801b4dc:	4798      	blx	r3
            hal.stream.write(groups[idx].name);
 801b4de:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b4e2:	6868      	ldr	r0, [r5, #4]
 801b4e4:	4798      	blx	r3
            hal.stream.write(":" ASCII_EOL);
 801b4e6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b4ea:	4808      	ldr	r0, [pc, #32]	@ (801b50c <report_group_settings+0x94>)
 801b4ec:	4798      	blx	r3
            report_settings_details(SettingsFormat_HumanReadable, Setting_SettingsAll, groups[idx].id);
 801b4ee:	786a      	ldrb	r2, [r5, #1]
 801b4f0:	f240 21e5 	movw	r1, #741	@ 0x2e5
 801b4f4:	2001      	movs	r0, #1
 801b4f6:	f7ff ffa5 	bl	801b444 <report_settings_details>
}
 801b4fa:	4648      	mov	r0, r9
 801b4fc:	b009      	add	sp, #36	@ 0x24
 801b4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b502:	bf00      	nop
 801b504:	20001a90 	.word	0x20001a90
 801b508:	0802c620 	.word	0x0802c620
 801b50c:	0802c628 	.word	0x0802c628

0801b510 <report_setting_description>:
{
 801b510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b514:	4606      	mov	r6, r0
 801b516:	460c      	mov	r4, r1
    const setting_detail_t *setting = setting_get_details(id, NULL);
 801b518:	2100      	movs	r1, #0
 801b51a:	4620      	mov	r0, r4
 801b51c:	f002 f9d2 	bl	801d8c4 <setting_get_details>
 801b520:	4607      	mov	r7, r0
    const char *description = setting_get_description(id);
 801b522:	4620      	mov	r0, r4
 801b524:	f002 fa64 	bl	801d9f0 <setting_get_description>
 801b528:	4680      	mov	r8, r0
    if(format == SettingsFormat_MachineReadable) {
 801b52a:	b976      	cbnz	r6, 801b54a <report_setting_description+0x3a>
        hal.stream.write("[SETTINGDESCR:");
 801b52c:	4d1c      	ldr	r5, [pc, #112]	@ (801b5a0 <report_setting_description+0x90>)
 801b52e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801b532:	481c      	ldr	r0, [pc, #112]	@ (801b5a4 <report_setting_description+0x94>)
 801b534:	4798      	blx	r3
        hal.stream.write(uitoa(id));
 801b536:	f8d5 90b4 	ldr.w	r9, [r5, #180]	@ 0xb4
 801b53a:	4620      	mov	r0, r4
 801b53c:	f7fa fa40 	bl	80159c0 <uitoa>
 801b540:	47c8      	blx	r9
        hal.stream.write(vbar);
 801b542:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801b546:	4818      	ldr	r0, [pc, #96]	@ (801b5a8 <report_setting_description+0x98>)
 801b548:	4798      	blx	r3
    hal.stream.write(description ? description : (setting ? "" : "N/A"));
 801b54a:	4b15      	ldr	r3, [pc, #84]	@ (801b5a0 <report_setting_description+0x90>)
 801b54c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b550:	f1b8 0f00 	cmp.w	r8, #0
 801b554:	d01b      	beq.n	801b58e <report_setting_description+0x7e>
 801b556:	4640      	mov	r0, r8
 801b558:	4798      	blx	r3
    if(setting && setting->flags.reboot_required)
 801b55a:	b17f      	cbz	r7, 801b57c <report_setting_description+0x6c>
 801b55c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801b560:	f013 0f01 	tst.w	r3, #1
 801b564:	d00a      	beq.n	801b57c <report_setting_description+0x6c>
        hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + (description && *description != '\0' ? 0 : 4));
 801b566:	4b0e      	ldr	r3, [pc, #56]	@ (801b5a0 <report_setting_description+0x90>)
 801b568:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b56c:	f1b8 0f00 	cmp.w	r8, #0
 801b570:	d012      	beq.n	801b598 <report_setting_description+0x88>
 801b572:	f898 2000 	ldrb.w	r2, [r8]
 801b576:	b98a      	cbnz	r2, 801b59c <report_setting_description+0x8c>
 801b578:	480c      	ldr	r0, [pc, #48]	@ (801b5ac <report_setting_description+0x9c>)
 801b57a:	4798      	blx	r3
    if(format == SettingsFormat_MachineReadable)
 801b57c:	b926      	cbnz	r6, 801b588 <report_setting_description+0x78>
        hal.stream.write("]" ASCII_EOL);
 801b57e:	4b08      	ldr	r3, [pc, #32]	@ (801b5a0 <report_setting_description+0x90>)
 801b580:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b584:	480a      	ldr	r0, [pc, #40]	@ (801b5b0 <report_setting_description+0xa0>)
 801b586:	4798      	blx	r3
}
 801b588:	2000      	movs	r0, #0
 801b58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hal.stream.write(description ? description : (setting ? "" : "N/A"));
 801b58e:	b10f      	cbz	r7, 801b594 <report_setting_description+0x84>
 801b590:	4808      	ldr	r0, [pc, #32]	@ (801b5b4 <report_setting_description+0xa4>)
 801b592:	e7e1      	b.n	801b558 <report_setting_description+0x48>
 801b594:	4808      	ldr	r0, [pc, #32]	@ (801b5b8 <report_setting_description+0xa8>)
 801b596:	e7df      	b.n	801b558 <report_setting_description+0x48>
        hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + (description && *description != '\0' ? 0 : 4));
 801b598:	4804      	ldr	r0, [pc, #16]	@ (801b5ac <report_setting_description+0x9c>)
 801b59a:	e7ee      	b.n	801b57a <report_setting_description+0x6a>
 801b59c:	4807      	ldr	r0, [pc, #28]	@ (801b5bc <report_setting_description+0xac>)
 801b59e:	e7ec      	b.n	801b57a <report_setting_description+0x6a>
 801b5a0:	20001a90 	.word	0x20001a90
 801b5a4:	0802c62c 	.word	0x0802c62c
 801b5a8:	0802c7fc 	.word	0x0802c7fc
 801b5ac:	0802c04c 	.word	0x0802c04c
 801b5b0:	0802bfd4 	.word	0x0802bfd4
 801b5b4:	0802c13c 	.word	0x0802c13c
 801b5b8:	08029c58 	.word	0x08029c58
 801b5bc:	0802c048 	.word	0x0802c048

0801b5c0 <report_alarm_details>:
{
 801b5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5c2:	4606      	mov	r6, r0
    alarm_details_t *details = grbl.on_get_alarms();
 801b5c4:	4b25      	ldr	r3, [pc, #148]	@ (801b65c <report_alarm_details+0x9c>)
 801b5c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b5c8:	4798      	blx	r3
 801b5ca:	4604      	mov	r4, r0
    if(grbl_format)
 801b5cc:	b126      	cbz	r6, 801b5d8 <report_alarm_details+0x18>
        hal.stream.write("\"Alarm Code in v1.1+\",\" Alarm Message in v1.0-\",\" Alarm Description\"" ASCII_EOL);
 801b5ce:	4b24      	ldr	r3, [pc, #144]	@ (801b660 <report_alarm_details+0xa0>)
 801b5d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b5d4:	4823      	ldr	r0, [pc, #140]	@ (801b664 <report_alarm_details+0xa4>)
 801b5d6:	4798      	blx	r3
{
 801b5d8:	2500      	movs	r5, #0
        n_alarms += details->n_alarms;
 801b5da:	8823      	ldrh	r3, [r4, #0]
 801b5dc:	441d      	add	r5, r3
    } while((details = details->next));
 801b5de:	68a4      	ldr	r4, [r4, #8]
 801b5e0:	2c00      	cmp	r4, #0
 801b5e2:	d1fa      	bne.n	801b5da <report_alarm_details+0x1a>
    details = grbl.on_get_alarms();
 801b5e4:	4b1d      	ldr	r3, [pc, #116]	@ (801b65c <report_alarm_details+0x9c>)
 801b5e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b5e8:	4798      	blx	r3
 801b5ea:	4604      	mov	r4, r0
    if((all_alarms = palarm = calloc(n_alarms, sizeof(alarm_detail_t *)))) {
 801b5ec:	2104      	movs	r1, #4
 801b5ee:	4628      	mov	r0, r5
 801b5f0:	f007 fab8 	bl	8022b64 <calloc>
 801b5f4:	4607      	mov	r7, r0
 801b5f6:	b328      	cbz	r0, 801b644 <report_alarm_details+0x84>
 801b5f8:	4603      	mov	r3, r0
 801b5fa:	e00a      	b.n	801b612 <report_alarm_details+0x52>
                *palarm++ = (alarm_detail_t *)&(details->alarms[idx]);
 801b5fc:	6861      	ldr	r1, [r4, #4]
 801b5fe:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801b602:	f843 1b04 	str.w	r1, [r3], #4
            for(idx = 0; idx < details->n_alarms; idx++)
 801b606:	3201      	adds	r2, #1
 801b608:	8821      	ldrh	r1, [r4, #0]
 801b60a:	4291      	cmp	r1, r2
 801b60c:	d8f6      	bhi.n	801b5fc <report_alarm_details+0x3c>
        } while((details = details->next));
 801b60e:	68a4      	ldr	r4, [r4, #8]
 801b610:	b10c      	cbz	r4, 801b616 <report_alarm_details+0x56>
            for(idx = 0; idx < details->n_alarms; idx++)
 801b612:	2200      	movs	r2, #0
 801b614:	e7f8      	b.n	801b608 <report_alarm_details+0x48>
        qsort(all_alarms, n_alarms, sizeof(alarm_detail_t *), cmp_alarms);
 801b616:	4b14      	ldr	r3, [pc, #80]	@ (801b668 <report_alarm_details+0xa8>)
 801b618:	2204      	movs	r2, #4
 801b61a:	4629      	mov	r1, r5
 801b61c:	4638      	mov	r0, r7
 801b61e:	f008 fa72 	bl	8023b06 <qsort>
        for(idx = 0; idx < n_alarms; idx++)
 801b622:	e005      	b.n	801b630 <report_alarm_details+0x70>
            print_alarm(all_alarms[idx], grbl_format);
 801b624:	4631      	mov	r1, r6
 801b626:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 801b62a:	f7fd f813 	bl	8018654 <print_alarm>
        for(idx = 0; idx < n_alarms; idx++)
 801b62e:	3401      	adds	r4, #1
 801b630:	42ac      	cmp	r4, r5
 801b632:	d3f7      	bcc.n	801b624 <report_alarm_details+0x64>
        free(all_alarms);
 801b634:	4638      	mov	r0, r7
 801b636:	f007 fab9 	bl	8022bac <free>
}
 801b63a:	2000      	movs	r0, #0
 801b63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while((details = details->next));
 801b63e:	68a4      	ldr	r4, [r4, #8]
 801b640:	2c00      	cmp	r4, #0
 801b642:	d0fa      	beq.n	801b63a <report_alarm_details+0x7a>
        for(idx = 0; idx < details->n_alarms; idx++)
 801b644:	2500      	movs	r5, #0
 801b646:	8823      	ldrh	r3, [r4, #0]
 801b648:	42ab      	cmp	r3, r5
 801b64a:	d9f8      	bls.n	801b63e <report_alarm_details+0x7e>
            print_alarm(&details->alarms[idx], grbl_format);
 801b64c:	6860      	ldr	r0, [r4, #4]
 801b64e:	4631      	mov	r1, r6
 801b650:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 801b654:	f7fc fffe 	bl	8018654 <print_alarm>
        for(idx = 0; idx < details->n_alarms; idx++)
 801b658:	3501      	adds	r5, #1
 801b65a:	e7f4      	b.n	801b646 <report_alarm_details+0x86>
 801b65c:	20001c78 	.word	0x20001c78
 801b660:	20001a90 	.word	0x20001a90
 801b664:	0802c63c 	.word	0x0802c63c
 801b668:	080184c1 	.word	0x080184c1

0801b66c <report_error_details>:
{
 801b66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b66e:	4606      	mov	r6, r0
    error_details_t *details = grbl.on_get_errors();
 801b670:	4b25      	ldr	r3, [pc, #148]	@ (801b708 <report_error_details+0x9c>)
 801b672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b674:	4798      	blx	r3
 801b676:	4604      	mov	r4, r0
    if(grbl_format)
 801b678:	b126      	cbz	r6, 801b684 <report_error_details+0x18>
        hal.stream.write("\"Error Code in v1.1+\",\"Error Message in v1.0-\",\"Error Description\"" ASCII_EOL);
 801b67a:	4b24      	ldr	r3, [pc, #144]	@ (801b70c <report_error_details+0xa0>)
 801b67c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b680:	4823      	ldr	r0, [pc, #140]	@ (801b710 <report_error_details+0xa4>)
 801b682:	4798      	blx	r3
{
 801b684:	2500      	movs	r5, #0
        n_errors += details->n_errors;
 801b686:	8823      	ldrh	r3, [r4, #0]
 801b688:	441d      	add	r5, r3
    } while((details = details->next));
 801b68a:	68a4      	ldr	r4, [r4, #8]
 801b68c:	2c00      	cmp	r4, #0
 801b68e:	d1fa      	bne.n	801b686 <report_error_details+0x1a>
    details = grbl.on_get_errors();
 801b690:	4b1d      	ldr	r3, [pc, #116]	@ (801b708 <report_error_details+0x9c>)
 801b692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b694:	4798      	blx	r3
 801b696:	4604      	mov	r4, r0
    if((all_errors = perror = calloc(n_errors, sizeof(status_detail_t *)))) {
 801b698:	2104      	movs	r1, #4
 801b69a:	4628      	mov	r0, r5
 801b69c:	f007 fa62 	bl	8022b64 <calloc>
 801b6a0:	4607      	mov	r7, r0
 801b6a2:	b328      	cbz	r0, 801b6f0 <report_error_details+0x84>
 801b6a4:	4603      	mov	r3, r0
 801b6a6:	e00a      	b.n	801b6be <report_error_details+0x52>
                *perror++ = (status_detail_t *)&(details->errors[idx]);
 801b6a8:	6861      	ldr	r1, [r4, #4]
 801b6aa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801b6ae:	f843 1b04 	str.w	r1, [r3], #4
            for(idx = 0; idx < details->n_errors; idx++)
 801b6b2:	3201      	adds	r2, #1
 801b6b4:	8821      	ldrh	r1, [r4, #0]
 801b6b6:	4291      	cmp	r1, r2
 801b6b8:	d8f6      	bhi.n	801b6a8 <report_error_details+0x3c>
        } while((details = details->next));
 801b6ba:	68a4      	ldr	r4, [r4, #8]
 801b6bc:	b10c      	cbz	r4, 801b6c2 <report_error_details+0x56>
            for(idx = 0; idx < details->n_errors; idx++)
 801b6be:	2200      	movs	r2, #0
 801b6c0:	e7f8      	b.n	801b6b4 <report_error_details+0x48>
        qsort(all_errors, n_errors, sizeof(status_detail_t *), cmp_errors);
 801b6c2:	4b14      	ldr	r3, [pc, #80]	@ (801b714 <report_error_details+0xa8>)
 801b6c4:	2204      	movs	r2, #4
 801b6c6:	4629      	mov	r1, r5
 801b6c8:	4638      	mov	r0, r7
 801b6ca:	f008 fa1c 	bl	8023b06 <qsort>
        for(idx = 0; idx < n_errors; idx++)
 801b6ce:	e005      	b.n	801b6dc <report_error_details+0x70>
            print_error(all_errors[idx], grbl_format);
 801b6d0:	4631      	mov	r1, r6
 801b6d2:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 801b6d6:	f7fd f807 	bl	80186e8 <print_error>
        for(idx = 0; idx < n_errors; idx++)
 801b6da:	3401      	adds	r4, #1
 801b6dc:	42ac      	cmp	r4, r5
 801b6de:	d3f7      	bcc.n	801b6d0 <report_error_details+0x64>
        free(all_errors);
 801b6e0:	4638      	mov	r0, r7
 801b6e2:	f007 fa63 	bl	8022bac <free>
}
 801b6e6:	2000      	movs	r0, #0
 801b6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while((details = details->next));
 801b6ea:	68a4      	ldr	r4, [r4, #8]
 801b6ec:	2c00      	cmp	r4, #0
 801b6ee:	d0fa      	beq.n	801b6e6 <report_error_details+0x7a>
        for(idx = 0; idx < details->n_errors; idx++)
 801b6f0:	2500      	movs	r5, #0
 801b6f2:	8823      	ldrh	r3, [r4, #0]
 801b6f4:	42ab      	cmp	r3, r5
 801b6f6:	d9f8      	bls.n	801b6ea <report_error_details+0x7e>
            print_error(&details->errors[idx], grbl_format);
 801b6f8:	6860      	ldr	r0, [r4, #4]
 801b6fa:	4631      	mov	r1, r6
 801b6fc:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 801b700:	f7fc fff2 	bl	80186e8 <print_error>
        for(idx = 0; idx < details->n_errors; idx++)
 801b704:	3501      	adds	r5, #1
 801b706:	e7f4      	b.n	801b6f2 <report_error_details+0x86>
 801b708:	20001c78 	.word	0x20001c78
 801b70c:	20001a90 	.word	0x20001a90
 801b710:	0802c684 	.word	0x0802c684
 801b714:	080184cd 	.word	0x080184cd

0801b718 <report_setting_group_details>:
{
 801b718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b71c:	4683      	mov	fp, r0
 801b71e:	468a      	mov	sl, r1
    setting_details_t *details = settings_get_details();
 801b720:	f001 fc7c 	bl	801d01c <settings_get_details>
    uint_fast16_t idx, n_groups = 0;
 801b724:	f04f 0800 	mov.w	r8, #0
        n_groups += details->n_groups;
 801b728:	7803      	ldrb	r3, [r0, #0]
 801b72a:	4498      	add	r8, r3
    } while((details = details->next));
 801b72c:	6980      	ldr	r0, [r0, #24]
 801b72e:	2800      	cmp	r0, #0
 801b730:	d1fa      	bne.n	801b728 <report_setting_group_details+0x10>
    details = settings_get_details();
 801b732:	f001 fc73 	bl	801d01c <settings_get_details>
 801b736:	4607      	mov	r7, r0
    if((all_groups = group = calloc(n_groups, sizeof(setting_group_detail_t *)))) {
 801b738:	2104      	movs	r1, #4
 801b73a:	4640      	mov	r0, r8
 801b73c:	f007 fa12 	bl	8022b64 <calloc>
 801b740:	4681      	mov	r9, r0
 801b742:	2800      	cmp	r0, #0
 801b744:	d037      	beq.n	801b7b6 <report_setting_group_details+0x9e>
 801b746:	4606      	mov	r6, r0
 801b748:	e015      	b.n	801b776 <report_setting_group_details+0x5e>
                    *group++ = (setting_group_detail_t *)&details->groups[idx];
 801b74a:	f846 5b04 	str.w	r5, [r6], #4
            for(idx = 0; idx < details->n_groups; idx++) {
 801b74e:	3401      	adds	r4, #1
 801b750:	783b      	ldrb	r3, [r7, #0]
 801b752:	42a3      	cmp	r3, r4
 801b754:	d90d      	bls.n	801b772 <report_setting_group_details+0x5a>
                if(group_is_dup(all_groups, details->groups[idx].id))
 801b756:	687d      	ldr	r5, [r7, #4]
 801b758:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801b75c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801b760:	7869      	ldrb	r1, [r5, #1]
 801b762:	4648      	mov	r0, r9
 801b764:	f7fc febe 	bl	80184e4 <group_is_dup>
 801b768:	2800      	cmp	r0, #0
 801b76a:	d0ee      	beq.n	801b74a <report_setting_group_details+0x32>
                    n_groups--;
 801b76c:	f108 38ff 	add.w	r8, r8, #4294967295
 801b770:	e7ed      	b.n	801b74e <report_setting_group_details+0x36>
        } while((details = details->next));
 801b772:	69bf      	ldr	r7, [r7, #24]
 801b774:	b10f      	cbz	r7, 801b77a <report_setting_group_details+0x62>
            for(idx = 0; idx < details->n_groups; idx++) {
 801b776:	2400      	movs	r4, #0
 801b778:	e7ea      	b.n	801b750 <report_setting_group_details+0x38>
        qsort(all_groups, n_groups, sizeof(setting_group_detail_t *), by_id ? cmp_setting_group_id : cmp_setting_group_name);
 801b77a:	f1bb 0f00 	cmp.w	fp, #0
 801b77e:	d007      	beq.n	801b790 <report_setting_group_details+0x78>
 801b780:	4b14      	ldr	r3, [pc, #80]	@ (801b7d4 <report_setting_group_details+0xbc>)
 801b782:	2204      	movs	r2, #4
 801b784:	4641      	mov	r1, r8
 801b786:	4648      	mov	r0, r9
 801b788:	f008 f9bd 	bl	8023b06 <qsort>
        for(idx = 0; idx < n_groups; idx++)
 801b78c:	2400      	movs	r4, #0
 801b78e:	e007      	b.n	801b7a0 <report_setting_group_details+0x88>
        qsort(all_groups, n_groups, sizeof(setting_group_detail_t *), by_id ? cmp_setting_group_id : cmp_setting_group_name);
 801b790:	4b11      	ldr	r3, [pc, #68]	@ (801b7d8 <report_setting_group_details+0xc0>)
 801b792:	e7f6      	b.n	801b782 <report_setting_group_details+0x6a>
            print_setting_group(all_groups[idx], prefix);
 801b794:	4651      	mov	r1, sl
 801b796:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
 801b79a:	f7fd feed 	bl	8019578 <print_setting_group>
        for(idx = 0; idx < n_groups; idx++)
 801b79e:	3401      	adds	r4, #1
 801b7a0:	45a0      	cmp	r8, r4
 801b7a2:	d8f7      	bhi.n	801b794 <report_setting_group_details+0x7c>
        free(all_groups);
 801b7a4:	4648      	mov	r0, r9
 801b7a6:	f007 fa01 	bl	8022bac <free>
}
 801b7aa:	2000      	movs	r0, #0
 801b7ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } while((details = details->next));
 801b7b0:	69bf      	ldr	r7, [r7, #24]
 801b7b2:	2f00      	cmp	r7, #0
 801b7b4:	d0f9      	beq.n	801b7aa <report_setting_group_details+0x92>
        for(idx = 0; idx < details->n_groups; idx++)
 801b7b6:	2400      	movs	r4, #0
 801b7b8:	783b      	ldrb	r3, [r7, #0]
 801b7ba:	42a3      	cmp	r3, r4
 801b7bc:	d9f8      	bls.n	801b7b0 <report_setting_group_details+0x98>
            print_setting_group(&details->groups[idx], prefix);
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 801b7c4:	4651      	mov	r1, sl
 801b7c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b7ca:	f7fd fed5 	bl	8019578 <print_setting_group>
        for(idx = 0; idx < details->n_groups; idx++)
 801b7ce:	3401      	adds	r4, #1
 801b7d0:	e7f2      	b.n	801b7b8 <report_setting_group_details+0xa0>
 801b7d2:	bf00      	nop
 801b7d4:	080184d9 	.word	0x080184d9
 801b7d8:	08018ce9 	.word	0x08018ce9

0801b7dc <report_help>:
{
 801b7dc:	b538      	push	{r3, r4, r5, lr}
 801b7de:	4604      	mov	r4, r0
    while(*args == ' ')
 801b7e0:	e000      	b.n	801b7e4 <report_help+0x8>
        args++;
 801b7e2:	3401      	adds	r4, #1
    while(*args == ' ')
 801b7e4:	7823      	ldrb	r3, [r4, #0]
 801b7e6:	2b20      	cmp	r3, #32
 801b7e8:	d0fb      	beq.n	801b7e2 <report_help+0x6>
    if(*args == '\0') {
 801b7ea:	b9f3      	cbnz	r3, 801b82a <report_help+0x4e>
        hal.stream.write("Help topics:" ASCII_EOL);
 801b7ec:	4c2d      	ldr	r4, [pc, #180]	@ (801b8a4 <report_help+0xc8>)
 801b7ee:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b7f2:	482d      	ldr	r0, [pc, #180]	@ (801b8a8 <report_help+0xcc>)
 801b7f4:	4798      	blx	r3
        hal.stream.write(" Commands" ASCII_EOL);
 801b7f6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b7fa:	482c      	ldr	r0, [pc, #176]	@ (801b8ac <report_help+0xd0>)
 801b7fc:	4798      	blx	r3
        hal.stream.write(" Settings" ASCII_EOL);
 801b7fe:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b802:	482b      	ldr	r0, [pc, #172]	@ (801b8b0 <report_help+0xd4>)
 801b804:	4798      	blx	r3
        report_setting_group_details(false, " ");
 801b806:	492b      	ldr	r1, [pc, #172]	@ (801b8b4 <report_help+0xd8>)
 801b808:	2000      	movs	r0, #0
 801b80a:	f7ff ff85 	bl	801b718 <report_setting_group_details>
}
 801b80e:	2000      	movs	r0, #0
 801b810:	bd38      	pop	{r3, r4, r5, pc}
            *s++ = CAPS(c);
 801b812:	f803 2b01 	strb.w	r2, [r3], #1
        while((c = *s))
 801b816:	781a      	ldrb	r2, [r3, #0]
 801b818:	b14a      	cbz	r2, 801b82e <report_help+0x52>
            *s++ = CAPS(c);
 801b81a:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 801b81e:	b2c9      	uxtb	r1, r1
 801b820:	2919      	cmp	r1, #25
 801b822:	d8f6      	bhi.n	801b812 <report_help+0x36>
 801b824:	f002 025f 	and.w	r2, r2, #95	@ 0x5f
 801b828:	e7f3      	b.n	801b812 <report_help+0x36>
        char c, *s = args;
 801b82a:	4623      	mov	r3, r4
 801b82c:	e7f3      	b.n	801b816 <report_help+0x3a>
        if(matchhere(args, "COMMANDS")) {
 801b82e:	4922      	ldr	r1, [pc, #136]	@ (801b8b8 <report_help+0xdc>)
 801b830:	4620      	mov	r0, r4
 801b832:	f7fc fd88 	bl	8018346 <matchhere>
 801b836:	b128      	cbz	r0, 801b844 <report_help+0x68>
            if(grbl.on_report_command_help)
 801b838:	4b20      	ldr	r3, [pc, #128]	@ (801b8bc <report_help+0xe0>)
 801b83a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	d0e6      	beq.n	801b80e <report_help+0x32>
                grbl.on_report_command_help();
 801b840:	4798      	blx	r3
 801b842:	e7e4      	b.n	801b80e <report_help+0x32>
        } else if(matchhere(args, "SETTINGS"))
 801b844:	491e      	ldr	r1, [pc, #120]	@ (801b8c0 <report_help+0xe4>)
 801b846:	4620      	mov	r0, r4
 801b848:	f7fc fd7d 	bl	8018346 <matchhere>
 801b84c:	b130      	cbz	r0, 801b85c <report_help+0x80>
            report_settings_details(SettingsFormat_HumanReadable, Setting_SettingsAll, Group_All);
 801b84e:	2200      	movs	r2, #0
 801b850:	f240 21e5 	movw	r1, #741	@ 0x2e5
 801b854:	2001      	movs	r0, #1
 801b856:	f7ff fdf5 	bl	801b444 <report_settings_details>
 801b85a:	e7d8      	b.n	801b80e <report_help+0x32>
            setting_details_t *settings_info = settings_get_details();
 801b85c:	f001 fbde 	bl	801d01c <settings_get_details>
 801b860:	4605      	mov	r5, r0
            found = report_group_settings(settings_info->groups, settings_info->n_groups, args);
 801b862:	4622      	mov	r2, r4
 801b864:	7801      	ldrb	r1, [r0, #0]
 801b866:	6840      	ldr	r0, [r0, #4]
 801b868:	f7ff fe06 	bl	801b478 <report_group_settings>
            if(!found && (settings_info = settings_info->next)) do {
 801b86c:	4603      	mov	r3, r0
 801b86e:	2800      	cmp	r0, #0
 801b870:	d1cd      	bne.n	801b80e <report_help+0x32>
 801b872:	69ad      	ldr	r5, [r5, #24]
 801b874:	b955      	cbnz	r5, 801b88c <report_help+0xb0>
            if(!found)
 801b876:	2b00      	cmp	r3, #0
 801b878:	d1c9      	bne.n	801b80e <report_help+0x32>
                hal.stream.write( ASCII_EOL "N/A" ASCII_EOL);
 801b87a:	4b0a      	ldr	r3, [pc, #40]	@ (801b8a4 <report_help+0xc8>)
 801b87c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b880:	4810      	ldr	r0, [pc, #64]	@ (801b8c4 <report_help+0xe8>)
 801b882:	4798      	blx	r3
 801b884:	e7c3      	b.n	801b80e <report_help+0x32>
            } while((settings_info = settings_info->next));
 801b886:	69ad      	ldr	r5, [r5, #24]
 801b888:	2d00      	cmp	r5, #0
 801b88a:	d0f4      	beq.n	801b876 <report_help+0x9a>
                if(settings_info->groups && (found = report_group_settings(settings_info->groups, settings_info->n_groups, args)))
 801b88c:	6868      	ldr	r0, [r5, #4]
 801b88e:	2800      	cmp	r0, #0
 801b890:	d0f9      	beq.n	801b886 <report_help+0xaa>
 801b892:	4622      	mov	r2, r4
 801b894:	7829      	ldrb	r1, [r5, #0]
 801b896:	f7ff fdef 	bl	801b478 <report_group_settings>
 801b89a:	4603      	mov	r3, r0
 801b89c:	2800      	cmp	r0, #0
 801b89e:	d0f2      	beq.n	801b886 <report_help+0xaa>
 801b8a0:	e7e9      	b.n	801b876 <report_help+0x9a>
 801b8a2:	bf00      	nop
 801b8a4:	20001a90 	.word	0x20001a90
 801b8a8:	0802c6cc 	.word	0x0802c6cc
 801b8ac:	0802c6dc 	.word	0x0802c6dc
 801b8b0:	0802c6e8 	.word	0x0802c6e8
 801b8b4:	0802c120 	.word	0x0802c120
 801b8b8:	0802c6f4 	.word	0x0802c6f4
 801b8bc:	20001c78 	.word	0x20001c78
 801b8c0:	0802c700 	.word	0x0802c700
 801b8c4:	0802c70c 	.word	0x0802c70c

0801b8c8 <report_last_signals_event>:
{
 801b8c8:	b538      	push	{r3, r4, r5, lr}
    strcpy(buf, "[LASTEVENTS:");
 801b8ca:	4d10      	ldr	r5, [pc, #64]	@ (801b90c <report_last_signals_event+0x44>)
 801b8cc:	4b10      	ldr	r3, [pc, #64]	@ (801b910 <report_last_signals_event+0x48>)
 801b8ce:	46ac      	mov	ip, r5
 801b8d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b8d2:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 801b8d6:	f88c 3000 	strb.w	r3, [ip]
    append = control_signals_tostring(append, sys.last_event.control);
 801b8da:	4c0e      	ldr	r4, [pc, #56]	@ (801b914 <report_last_signals_event+0x4c>)
 801b8dc:	f8b4 1080 	ldrh.w	r1, [r4, #128]	@ 0x80
 801b8e0:	4660      	mov	r0, ip
 801b8e2:	f7fc fd6f 	bl	80183c4 <control_signals_tostring>
    *append++ = ',';
 801b8e6:	232c      	movs	r3, #44	@ 0x2c
 801b8e8:	f800 3b01 	strb.w	r3, [r0], #1
    append = add_limits(append, sys.last_event.limits);
 801b8ec:	f8d4 1082 	ldr.w	r1, [r4, #130]	@ 0x82
 801b8f0:	f7fc fe03 	bl	80184fa <add_limits>
    hal.stream.write(buf);
 801b8f4:	4c08      	ldr	r4, [pc, #32]	@ (801b918 <report_last_signals_event+0x50>)
 801b8f6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b8fa:	4628      	mov	r0, r5
 801b8fc:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 801b8fe:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b902:	4806      	ldr	r0, [pc, #24]	@ (801b91c <report_last_signals_event+0x54>)
 801b904:	4798      	blx	r3
}
 801b906:	2000      	movs	r0, #0
 801b908:	bd38      	pop	{r3, r4, r5, pc}
 801b90a:	bf00      	nop
 801b90c:	20002378 	.word	0x20002378
 801b910:	0802c714 	.word	0x0802c714
 801b914:	20001d70 	.word	0x20001d70
 801b918:	20001a90 	.word	0x20001a90
 801b91c:	0802bfd4 	.word	0x0802bfd4

0801b920 <report_current_limit_state>:
{
 801b920:	b570      	push	{r4, r5, r6, lr}
 801b922:	b082      	sub	sp, #8
    strcpy(buf, "[LIMITS:");
 801b924:	4e0c      	ldr	r6, [pc, #48]	@ (801b958 <report_current_limit_state+0x38>)
 801b926:	4b0d      	ldr	r3, [pc, #52]	@ (801b95c <report_current_limit_state+0x3c>)
 801b928:	4634      	mov	r4, r6
 801b92a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b92e:	c403      	stmia	r4!, {r0, r1}
 801b930:	7022      	strb	r2, [r4, #0]
    append = add_limits(append, hal.limits.get_state());
 801b932:	4d0b      	ldr	r5, [pc, #44]	@ (801b960 <report_current_limit_state+0x40>)
 801b934:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 801b936:	4798      	blx	r3
 801b938:	4601      	mov	r1, r0
 801b93a:	9001      	str	r0, [sp, #4]
 801b93c:	4620      	mov	r0, r4
 801b93e:	f7fc fddc 	bl	80184fa <add_limits>
    hal.stream.write(buf);
 801b942:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801b946:	4630      	mov	r0, r6
 801b948:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 801b94a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801b94e:	4805      	ldr	r0, [pc, #20]	@ (801b964 <report_current_limit_state+0x44>)
 801b950:	4798      	blx	r3
}
 801b952:	2000      	movs	r0, #0
 801b954:	b002      	add	sp, #8
 801b956:	bd70      	pop	{r4, r5, r6, pc}
 801b958:	20002378 	.word	0x20002378
 801b95c:	0802c724 	.word	0x0802c724
 801b960:	20001a90 	.word	0x20001a90
 801b964:	0802bfd4 	.word	0x0802bfd4

0801b968 <report_current_home_signal_state>:
{
 801b968:	b530      	push	{r4, r5, lr}
 801b96a:	b083      	sub	sp, #12
    home_signals_t home = hal.homing.get_state();
 801b96c:	4d18      	ldr	r5, [pc, #96]	@ (801b9d0 <report_current_home_signal_state+0x68>)
 801b96e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 801b970:	4798      	blx	r3
 801b972:	f8ad 0004 	strh.w	r0, [sp, #4]
    strcpy(buf, "[HOMES:");
 801b976:	4b17      	ldr	r3, [pc, #92]	@ (801b9d4 <report_current_home_signal_state+0x6c>)
 801b978:	4a17      	ldr	r2, [pc, #92]	@ (801b9d8 <report_current_home_signal_state+0x70>)
 801b97a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b97e:	e883 0003 	stmia.w	r3, {r0, r1}
    append = axis_signals_tostring(append, home.a);
 801b982:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801b986:	1dd8      	adds	r0, r3, #7
 801b988:	f7fc fd04 	bl	8018394 <axis_signals_tostring>
    *append++ = ',';
 801b98c:	232c      	movs	r3, #44	@ 0x2c
 801b98e:	f800 3b01 	strb.w	r3, [r0], #1
    append = axis_signals_tostring(append, home.b);
 801b992:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801b996:	f7fc fcfd 	bl	8018394 <axis_signals_tostring>
 801b99a:	4604      	mov	r4, r0
    strcat(append, hal.home_cap.a.mask ? ":H" : ":L");
 801b99c:	f895 31e2 	ldrb.w	r3, [r5, #482]	@ 0x1e2
 801b9a0:	b1a3      	cbz	r3, 801b9cc <report_current_home_signal_state+0x64>
 801b9a2:	4d0e      	ldr	r5, [pc, #56]	@ (801b9dc <report_current_home_signal_state+0x74>)
 801b9a4:	4620      	mov	r0, r4
 801b9a6:	f7ec fbab 	bl	8008100 <strlen>
 801b9aa:	1823      	adds	r3, r4, r0
 801b9ac:	8829      	ldrh	r1, [r5, #0]
 801b9ae:	78aa      	ldrb	r2, [r5, #2]
 801b9b0:	5221      	strh	r1, [r4, r0]
 801b9b2:	709a      	strb	r2, [r3, #2]
    hal.stream.write(buf);
 801b9b4:	4c06      	ldr	r4, [pc, #24]	@ (801b9d0 <report_current_home_signal_state+0x68>)
 801b9b6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b9ba:	4806      	ldr	r0, [pc, #24]	@ (801b9d4 <report_current_home_signal_state+0x6c>)
 801b9bc:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 801b9be:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b9c2:	4807      	ldr	r0, [pc, #28]	@ (801b9e0 <report_current_home_signal_state+0x78>)
 801b9c4:	4798      	blx	r3
}
 801b9c6:	2000      	movs	r0, #0
 801b9c8:	b003      	add	sp, #12
 801b9ca:	bd30      	pop	{r4, r5, pc}
    strcat(append, hal.home_cap.a.mask ? ":H" : ":L");
 801b9cc:	4d05      	ldr	r5, [pc, #20]	@ (801b9e4 <report_current_home_signal_state+0x7c>)
 801b9ce:	e7e9      	b.n	801b9a4 <report_current_home_signal_state+0x3c>
 801b9d0:	20001a90 	.word	0x20001a90
 801b9d4:	20002378 	.word	0x20002378
 801b9d8:	0802c738 	.word	0x0802c738
 801b9dc:	0802c730 	.word	0x0802c730
 801b9e0:	0802bfd4 	.word	0x0802bfd4
 801b9e4:	0802c734 	.word	0x0802c734

0801b9e8 <report_spindle_data>:
{
 801b9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9ec:	ed2d 8b02 	vpush	{d8}
    spindle_ptrs_t *spindle = gc_spindle_get();
 801b9f0:	f7f1 fe28 	bl	800d644 <gc_spindle_get>
 801b9f4:	4605      	mov	r5, r0
    if(spindle->get_data) {
 801b9f6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	d037      	beq.n	801ba6c <report_spindle_data+0x84>
        float apos = spindle->get_data(SpindleData_AngularPosition)->angular_position;
 801b9fc:	2002      	movs	r0, #2
 801b9fe:	4798      	blx	r3
 801ba00:	ed90 8a03 	vldr	s16, [r0, #12]
        spindle_data_t *data = spindle->get_data(SpindleData_Counters);
 801ba04:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 801ba06:	2000      	movs	r0, #0
 801ba08:	4798      	blx	r3
 801ba0a:	4606      	mov	r6, r0
        hal.stream.write("[SPINDLEENCODER:");
 801ba0c:	4c1c      	ldr	r4, [pc, #112]	@ (801ba80 <report_spindle_data+0x98>)
 801ba0e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801ba12:	481c      	ldr	r0, [pc, #112]	@ (801ba84 <report_spindle_data+0x9c>)
 801ba14:	4798      	blx	r3
        hal.stream.write(uitoa(data->index_count));
 801ba16:	f8d4 70b4 	ldr.w	r7, [r4, #180]	@ 0xb4
 801ba1a:	6970      	ldr	r0, [r6, #20]
 801ba1c:	f7f9 ffd0 	bl	80159c0 <uitoa>
 801ba20:	47b8      	blx	r7
        hal.stream.write(",");
 801ba22:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801ba26:	4f18      	ldr	r7, [pc, #96]	@ (801ba88 <report_spindle_data+0xa0>)
 801ba28:	4638      	mov	r0, r7
 801ba2a:	4798      	blx	r3
        hal.stream.write(uitoa(data->pulse_count));
 801ba2c:	f8d4 80b4 	ldr.w	r8, [r4, #180]	@ 0xb4
 801ba30:	69b0      	ldr	r0, [r6, #24]
 801ba32:	f7f9 ffc5 	bl	80159c0 <uitoa>
 801ba36:	47c0      	blx	r8
        hal.stream.write(",");
 801ba38:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801ba3c:	4638      	mov	r0, r7
 801ba3e:	4798      	blx	r3
        hal.stream.write(uitoa(data->error_count));
 801ba40:	f8d4 80b4 	ldr.w	r8, [r4, #180]	@ 0xb4
 801ba44:	69f0      	ldr	r0, [r6, #28]
 801ba46:	f7f9 ffbb 	bl	80159c0 <uitoa>
 801ba4a:	47c0      	blx	r8
        hal.stream.write(",");
 801ba4c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801ba50:	4638      	mov	r0, r7
 801ba52:	4798      	blx	r3
        hal.stream.write(ftoa(apos, 3));
 801ba54:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 801ba58:	2003      	movs	r0, #3
 801ba5a:	eeb0 0a48 	vmov.f32	s0, s16
 801ba5e:	f7f9 ffd1 	bl	8015a04 <ftoa>
 801ba62:	47b0      	blx	r6
        hal.stream.write("]" ASCII_EOL);
 801ba64:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801ba68:	4808      	ldr	r0, [pc, #32]	@ (801ba8c <report_spindle_data+0xa4>)
 801ba6a:	4798      	blx	r3
    return spindle->get_data ? Status_OK : Status_InvalidStatement;
 801ba6c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 801ba6e:	b123      	cbz	r3, 801ba7a <report_spindle_data+0x92>
 801ba70:	2000      	movs	r0, #0
}
 801ba72:	ecbd 8b02 	vpop	{d8}
 801ba76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return spindle->get_data ? Status_OK : Status_InvalidStatement;
 801ba7a:	2003      	movs	r0, #3
 801ba7c:	e7f9      	b.n	801ba72 <report_spindle_data+0x8a>
 801ba7e:	bf00      	nop
 801ba80:	20001a90 	.word	0x20001a90
 801ba84:	0802c740 	.word	0x0802c740
 801ba88:	0802c400 	.word	0x0802c400
 801ba8c:	0802bfd4 	.word	0x0802bfd4

0801ba90 <report_pins>:
{
 801ba90:	b500      	push	{lr}
 801ba92:	b085      	sub	sp, #20
    pin_data_t pin_data = {0};
 801ba94:	2300      	movs	r3, #0
 801ba96:	9301      	str	r3, [sp, #4]
 801ba98:	9302      	str	r3, [sp, #8]
 801ba9a:	9303      	str	r3, [sp, #12]
    if(hal.enumerate_pins) {
 801ba9c:	4b1e      	ldr	r3, [pc, #120]	@ (801bb18 <report_pins+0x88>)
 801ba9e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 801baa2:	b363      	cbz	r3, 801bafe <report_pins+0x6e>
        hal.enumerate_pins(false, count_pins, (void *)&pin_data);
 801baa4:	aa01      	add	r2, sp, #4
 801baa6:	491d      	ldr	r1, [pc, #116]	@ (801bb1c <report_pins+0x8c>)
 801baa8:	2000      	movs	r0, #0
 801baaa:	4798      	blx	r3
        if((pin_data.pins = malloc(pin_data.n_pins * sizeof(pin_info_t)))) {
 801baac:	9802      	ldr	r0, [sp, #8]
 801baae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bab2:	00c0      	lsls	r0, r0, #3
 801bab4:	f007 f872 	bl	8022b9c <malloc>
 801bab8:	9003      	str	r0, [sp, #12]
 801baba:	b320      	cbz	r0, 801bb06 <report_pins+0x76>
            hal.enumerate_pins(false, get_pins, (void *)&pin_data);
 801babc:	4b16      	ldr	r3, [pc, #88]	@ (801bb18 <report_pins+0x88>)
 801babe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 801bac2:	aa01      	add	r2, sp, #4
 801bac4:	4916      	ldr	r1, [pc, #88]	@ (801bb20 <report_pins+0x90>)
 801bac6:	2000      	movs	r0, #0
 801bac8:	4798      	blx	r3
            qsort(pin_data.pins, pin_data.n_pins, sizeof(pin_info_t), cmp_pins);
 801baca:	4b16      	ldr	r3, [pc, #88]	@ (801bb24 <report_pins+0x94>)
 801bacc:	2218      	movs	r2, #24
 801bace:	9902      	ldr	r1, [sp, #8]
 801bad0:	9803      	ldr	r0, [sp, #12]
 801bad2:	f008 f818 	bl	8023b06 <qsort>
            for(pin_data.idx = 0; pin_data.idx < pin_data.n_pins; pin_data.idx++)
 801bad6:	2300      	movs	r3, #0
 801bad8:	9301      	str	r3, [sp, #4]
 801bada:	e009      	b.n	801baf0 <report_pins+0x60>
                report_pin_info(&pin_data.pins[pin_data.idx]);
 801badc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bae0:	9b03      	ldr	r3, [sp, #12]
 801bae2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801bae6:	f7fd fd8d 	bl	8019604 <report_pin_info>
            for(pin_data.idx = 0; pin_data.idx < pin_data.n_pins; pin_data.idx++)
 801baea:	9b01      	ldr	r3, [sp, #4]
 801baec:	3301      	adds	r3, #1
 801baee:	9301      	str	r3, [sp, #4]
 801baf0:	9801      	ldr	r0, [sp, #4]
 801baf2:	9b02      	ldr	r3, [sp, #8]
 801baf4:	4298      	cmp	r0, r3
 801baf6:	d3f1      	bcc.n	801badc <report_pins+0x4c>
            free(pin_data.pins);
 801baf8:	9803      	ldr	r0, [sp, #12]
 801bafa:	f007 f857 	bl	8022bac <free>
}
 801bafe:	2000      	movs	r0, #0
 801bb00:	b005      	add	sp, #20
 801bb02:	f85d fb04 	ldr.w	pc, [sp], #4
            hal.enumerate_pins(false, report_pin, NULL);
 801bb06:	4b04      	ldr	r3, [pc, #16]	@ (801bb18 <report_pins+0x88>)
 801bb08:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 801bb0c:	2200      	movs	r2, #0
 801bb0e:	4906      	ldr	r1, [pc, #24]	@ (801bb28 <report_pins+0x98>)
 801bb10:	4610      	mov	r0, r2
 801bb12:	4798      	blx	r3
 801bb14:	e7f3      	b.n	801bafe <report_pins+0x6e>
 801bb16:	bf00      	nop
 801bb18:	20001a90 	.word	0x20001a90
 801bb1c:	08018533 	.word	0x08018533
 801bb20:	08018b49 	.word	0x08018b49
 801bb24:	0801853b 	.word	0x0801853b
 801bb28:	08019675 	.word	0x08019675

0801bb2c <report_pin_states>:
{
 801bb2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if((ports = ioports_available(Port_Digital, Port_Input))) {
 801bb30:	2100      	movs	r1, #0
 801bb32:	2001      	movs	r0, #1
 801bb34:	f7f6 fa2c 	bl	8011f90 <ioports_available>
 801bb38:	2800      	cmp	r0, #0
 801bb3a:	f040 80b3 	bne.w	801bca4 <report_pin_states+0x178>
    if((ports = ioports_available(Port_Digital, Port_Output))) {
 801bb3e:	2101      	movs	r1, #1
 801bb40:	4608      	mov	r0, r1
 801bb42:	f7f6 fa25 	bl	8011f90 <ioports_available>
 801bb46:	4607      	mov	r7, r0
 801bb48:	2800      	cmp	r0, #0
 801bb4a:	f040 8110 	bne.w	801bd6e <report_pin_states+0x242>
    if((ports = ioports_available(Port_Analog, Port_Input))) {
 801bb4e:	2100      	movs	r1, #0
 801bb50:	4608      	mov	r0, r1
 801bb52:	f7f6 fa1d 	bl	8011f90 <ioports_available>
 801bb56:	4607      	mov	r7, r0
 801bb58:	2800      	cmp	r0, #0
 801bb5a:	f040 8146 	bne.w	801bdea <report_pin_states+0x2be>
    if((ports = ioports_available(Port_Analog, Port_Output))) {
 801bb5e:	2101      	movs	r1, #1
 801bb60:	2000      	movs	r0, #0
 801bb62:	f7f6 fa15 	bl	8011f90 <ioports_available>
 801bb66:	4607      	mov	r7, r0
 801bb68:	2800      	cmp	r0, #0
 801bb6a:	f040 81c3 	bne.w	801bef4 <report_pin_states+0x3c8>
}
 801bb6e:	2000      	movs	r0, #0
 801bb70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                hal.stream.write(port->description ? port->description : xbar_fn_to_pinname(port->function));
 801bb74:	7860      	ldrb	r0, [r4, #1]
 801bb76:	f7f1 faad 	bl	800d0d4 <xbar_fn_to_pinname>
 801bb7a:	e04e      	b.n	801bc1a <report_pin_states+0xee>
                hal.stream.write(port->mode.inverted ? "I" : "N");
 801bb7c:	48a6      	ldr	r0, [pc, #664]	@ (801be18 <report_pin_states+0x2ec>)
 801bb7e:	e065      	b.n	801bc4c <report_pin_states+0x120>
                hal.stream.write(port->mode.debounce ? "D" : "-");
 801bb80:	48a6      	ldr	r0, [pc, #664]	@ (801be1c <report_pin_states+0x2f0>)
 801bb82:	e07c      	b.n	801bc7e <report_pin_states+0x152>
                hal.stream.write(port->cap.invert ? "I" : "-");
 801bb84:	48a6      	ldr	r0, [pc, #664]	@ (801be20 <report_pin_states+0x2f4>)
 801bb86:	4798      	blx	r3
                hal.stream.write(pull_mode((pull_mode_t)port->cap.pull_mode));
 801bb88:	4ea6      	ldr	r6, [pc, #664]	@ (801be24 <report_pin_states+0x2f8>)
 801bb8a:	f8d6 80b4 	ldr.w	r8, [r6, #180]	@ 0xb4
 801bb8e:	7d20      	ldrb	r0, [r4, #20]
 801bb90:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 801bb94:	f7fc fd10 	bl	80185b8 <pull_mode>
 801bb98:	47c0      	blx	r8
                hal.stream.write(irq_mode((pin_irq_mode_t)port->cap.irq_mode));
 801bb9a:	f8d6 80b4 	ldr.w	r8, [r6, #180]	@ 0xb4
 801bb9e:	8aa0      	ldrh	r0, [r4, #20]
 801bba0:	f3c0 1044 	ubfx	r0, r0, #5, #5
 801bba4:	f7fc fcce 	bl	8018544 <irq_mode>
 801bba8:	47c0      	blx	r8
                hal.stream.write(port->cap.debounce ? "D" : "-");
 801bbaa:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bbae:	f994 2015 	ldrsb.w	r2, [r4, #21]
 801bbb2:	2a00      	cmp	r2, #0
 801bbb4:	db72      	blt.n	801bc9c <report_pin_states+0x170>
 801bbb6:	489a      	ldr	r0, [pc, #616]	@ (801be20 <report_pin_states+0x2f4>)
 801bbb8:	4798      	blx	r3
                hal.stream.write("|");
 801bbba:	4e9a      	ldr	r6, [pc, #616]	@ (801be24 <report_pin_states+0x2f8>)
 801bbbc:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bbc0:	4899      	ldr	r0, [pc, #612]	@ (801be28 <report_pin_states+0x2fc>)
 801bbc2:	4798      	blx	r3
                hal.stream.write(port->get_value ? uitoa((uint32_t)port->get_value(port)) : "?");
 801bbc4:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801bbc8:	69e3      	ldr	r3, [r4, #28]
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d068      	beq.n	801bca0 <report_pin_states+0x174>
 801bbce:	4620      	mov	r0, r4
 801bbd0:	4798      	blx	r3
 801bbd2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801bbd6:	ee17 0a90 	vmov	r0, s15
 801bbda:	f7f9 fef1 	bl	80159c0 <uitoa>
 801bbde:	47b0      	blx	r6
                hal.stream.write("]" ASCII_EOL);
 801bbe0:	4b90      	ldr	r3, [pc, #576]	@ (801be24 <report_pin_states+0x2f8>)
 801bbe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801bbe6:	4891      	ldr	r0, [pc, #580]	@ (801be2c <report_pin_states+0x300>)
 801bbe8:	4798      	blx	r3
        for(idx = 0; idx < ports; idx++) {
 801bbea:	3501      	adds	r5, #1
 801bbec:	b2ed      	uxtb	r5, r5
 801bbee:	42bd      	cmp	r5, r7
 801bbf0:	d2a5      	bcs.n	801bb3e <report_pin_states+0x12>
            if((port = hal.port.get_pin_info(Port_Digital, Port_Input, idx))) {
 801bbf2:	4b8c      	ldr	r3, [pc, #560]	@ (801be24 <report_pin_states+0x2f8>)
 801bbf4:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801bbf8:	462a      	mov	r2, r5
 801bbfa:	2100      	movs	r1, #0
 801bbfc:	2001      	movs	r0, #1
 801bbfe:	4798      	blx	r3
 801bc00:	4604      	mov	r4, r0
 801bc02:	2800      	cmp	r0, #0
 801bc04:	d0f1      	beq.n	801bbea <report_pin_states+0xbe>
                hal.stream.write("[PINSTATE:DIN|");
 801bc06:	4e87      	ldr	r6, [pc, #540]	@ (801be24 <report_pin_states+0x2f8>)
 801bc08:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bc0c:	4888      	ldr	r0, [pc, #544]	@ (801be30 <report_pin_states+0x304>)
 801bc0e:	4798      	blx	r3
                hal.stream.write(port->description ? port->description : xbar_fn_to_pinname(port->function));
 801bc10:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801bc14:	68e0      	ldr	r0, [r4, #12]
 801bc16:	2800      	cmp	r0, #0
 801bc18:	d0ac      	beq.n	801bb74 <report_pin_states+0x48>
 801bc1a:	47b0      	blx	r6
                hal.stream.write("|");
 801bc1c:	4e81      	ldr	r6, [pc, #516]	@ (801be24 <report_pin_states+0x2f8>)
 801bc1e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bc22:	f8df 8204 	ldr.w	r8, [pc, #516]	@ 801be28 <report_pin_states+0x2fc>
 801bc26:	4640      	mov	r0, r8
 801bc28:	4798      	blx	r3
                hal.stream.write(uitoa(port->id));
 801bc2a:	f8d6 90b4 	ldr.w	r9, [r6, #180]	@ 0xb4
 801bc2e:	7820      	ldrb	r0, [r4, #0]
 801bc30:	f7f9 fec6 	bl	80159c0 <uitoa>
 801bc34:	47c8      	blx	r9
                hal.stream.write("|");
 801bc36:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bc3a:	4640      	mov	r0, r8
 801bc3c:	4798      	blx	r3
                hal.stream.write(port->mode.inverted ? "I" : "N");
 801bc3e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bc42:	7de2      	ldrb	r2, [r4, #23]
 801bc44:	f012 0f04 	tst.w	r2, #4
 801bc48:	d098      	beq.n	801bb7c <report_pin_states+0x50>
 801bc4a:	487a      	ldr	r0, [pc, #488]	@ (801be34 <report_pin_states+0x308>)
 801bc4c:	4798      	blx	r3
                hal.stream.write(pull_mode((pull_mode_t)port->mode.pull_mode));
 801bc4e:	4e75      	ldr	r6, [pc, #468]	@ (801be24 <report_pin_states+0x2f8>)
 801bc50:	f8d6 80b4 	ldr.w	r8, [r6, #180]	@ 0xb4
 801bc54:	7da0      	ldrb	r0, [r4, #22]
 801bc56:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 801bc5a:	f7fc fcad 	bl	80185b8 <pull_mode>
 801bc5e:	47c0      	blx	r8
                hal.stream.write(irq_mode((pin_irq_mode_t)port->mode.irq_mode));
 801bc60:	f8d6 80b4 	ldr.w	r8, [r6, #180]	@ 0xb4
 801bc64:	8ae0      	ldrh	r0, [r4, #22]
 801bc66:	f3c0 1044 	ubfx	r0, r0, #5, #5
 801bc6a:	f7fc fc6b 	bl	8018544 <irq_mode>
 801bc6e:	47c0      	blx	r8
                hal.stream.write(port->mode.debounce ? "D" : "-");
 801bc70:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bc74:	f994 2017 	ldrsb.w	r2, [r4, #23]
 801bc78:	2a00      	cmp	r2, #0
 801bc7a:	db81      	blt.n	801bb80 <report_pin_states+0x54>
 801bc7c:	4868      	ldr	r0, [pc, #416]	@ (801be20 <report_pin_states+0x2f4>)
 801bc7e:	4798      	blx	r3
                hal.stream.write("|");
 801bc80:	4e68      	ldr	r6, [pc, #416]	@ (801be24 <report_pin_states+0x2f8>)
 801bc82:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bc86:	4868      	ldr	r0, [pc, #416]	@ (801be28 <report_pin_states+0x2fc>)
 801bc88:	4798      	blx	r3
                hal.stream.write(port->cap.invert ? "I" : "-");
 801bc8a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bc8e:	7d62      	ldrb	r2, [r4, #21]
 801bc90:	f012 0f04 	tst.w	r2, #4
 801bc94:	f43f af76 	beq.w	801bb84 <report_pin_states+0x58>
 801bc98:	4866      	ldr	r0, [pc, #408]	@ (801be34 <report_pin_states+0x308>)
 801bc9a:	e774      	b.n	801bb86 <report_pin_states+0x5a>
                hal.stream.write(port->cap.debounce ? "D" : "-");
 801bc9c:	485f      	ldr	r0, [pc, #380]	@ (801be1c <report_pin_states+0x2f0>)
 801bc9e:	e78b      	b.n	801bbb8 <report_pin_states+0x8c>
                hal.stream.write(port->get_value ? uitoa((uint32_t)port->get_value(port)) : "?");
 801bca0:	4865      	ldr	r0, [pc, #404]	@ (801be38 <report_pin_states+0x30c>)
 801bca2:	e79c      	b.n	801bbde <report_pin_states+0xb2>
 801bca4:	4607      	mov	r7, r0
        for(idx = 0; idx < ports; idx++) {
 801bca6:	2500      	movs	r5, #0
 801bca8:	e7a1      	b.n	801bbee <report_pin_states+0xc2>
                hal.stream.write(port->description ? port->description : xbar_fn_to_pinname(port->function));
 801bcaa:	7868      	ldrb	r0, [r5, #1]
 801bcac:	f7f1 fa12 	bl	800d0d4 <xbar_fn_to_pinname>
 801bcb0:	e034      	b.n	801bd1c <report_pin_states+0x1f0>
                hal.stream.write(port->mode.inverted ? "I" : "N");
 801bcb2:	4859      	ldr	r0, [pc, #356]	@ (801be18 <report_pin_states+0x2ec>)
 801bcb4:	e04b      	b.n	801bd4e <report_pin_states+0x222>
                hal.stream.write(port->cap.invert ? "I" : "-");
 801bcb6:	485a      	ldr	r0, [pc, #360]	@ (801be20 <report_pin_states+0x2f4>)
 801bcb8:	4798      	blx	r3
                hal.stream.write("|");
 801bcba:	4e5a      	ldr	r6, [pc, #360]	@ (801be24 <report_pin_states+0x2f8>)
 801bcbc:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bcc0:	4859      	ldr	r0, [pc, #356]	@ (801be28 <report_pin_states+0x2fc>)
 801bcc2:	4798      	blx	r3
                hal.stream.write(port->get_value ? uitoa((uint32_t)port->get_value(port)) : "?");
 801bcc4:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801bcc8:	69eb      	ldr	r3, [r5, #28]
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	d04d      	beq.n	801bd6a <report_pin_states+0x23e>
 801bcce:	4628      	mov	r0, r5
 801bcd0:	4798      	blx	r3
 801bcd2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801bcd6:	ee17 0a90 	vmov	r0, s15
 801bcda:	f7f9 fe71 	bl	80159c0 <uitoa>
 801bcde:	47b0      	blx	r6
                hal.stream.write("]" ASCII_EOL);
 801bce0:	4b50      	ldr	r3, [pc, #320]	@ (801be24 <report_pin_states+0x2f8>)
 801bce2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801bce6:	4851      	ldr	r0, [pc, #324]	@ (801be2c <report_pin_states+0x300>)
 801bce8:	4798      	blx	r3
        for(idx = 0; idx < ports; idx++) {
 801bcea:	3401      	adds	r4, #1
 801bcec:	b2e4      	uxtb	r4, r4
 801bcee:	42bc      	cmp	r4, r7
 801bcf0:	f4bf af2d 	bcs.w	801bb4e <report_pin_states+0x22>
            if((port = hal.port.get_pin_info(Port_Digital, Port_Output, idx))) {
 801bcf4:	4b4b      	ldr	r3, [pc, #300]	@ (801be24 <report_pin_states+0x2f8>)
 801bcf6:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801bcfa:	4622      	mov	r2, r4
 801bcfc:	2101      	movs	r1, #1
 801bcfe:	4608      	mov	r0, r1
 801bd00:	4798      	blx	r3
 801bd02:	4605      	mov	r5, r0
 801bd04:	2800      	cmp	r0, #0
 801bd06:	d0f0      	beq.n	801bcea <report_pin_states+0x1be>
                hal.stream.write("[PINSTATE:DOUT|");
 801bd08:	4e46      	ldr	r6, [pc, #280]	@ (801be24 <report_pin_states+0x2f8>)
 801bd0a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bd0e:	484b      	ldr	r0, [pc, #300]	@ (801be3c <report_pin_states+0x310>)
 801bd10:	4798      	blx	r3
                hal.stream.write(port->description ? port->description : xbar_fn_to_pinname(port->function));
 801bd12:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801bd16:	68e8      	ldr	r0, [r5, #12]
 801bd18:	2800      	cmp	r0, #0
 801bd1a:	d0c6      	beq.n	801bcaa <report_pin_states+0x17e>
 801bd1c:	47b0      	blx	r6
                hal.stream.write("|");
 801bd1e:	4e41      	ldr	r6, [pc, #260]	@ (801be24 <report_pin_states+0x2f8>)
 801bd20:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bd24:	f8df 8100 	ldr.w	r8, [pc, #256]	@ 801be28 <report_pin_states+0x2fc>
 801bd28:	4640      	mov	r0, r8
 801bd2a:	4798      	blx	r3
                hal.stream.write(uitoa(port->id));
 801bd2c:	f8d6 90b4 	ldr.w	r9, [r6, #180]	@ 0xb4
 801bd30:	7828      	ldrb	r0, [r5, #0]
 801bd32:	f7f9 fe45 	bl	80159c0 <uitoa>
 801bd36:	47c8      	blx	r9
                hal.stream.write("|");
 801bd38:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bd3c:	4640      	mov	r0, r8
 801bd3e:	4798      	blx	r3
                hal.stream.write(port->mode.inverted ? "I" : "N");
 801bd40:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bd44:	7dea      	ldrb	r2, [r5, #23]
 801bd46:	f012 0f04 	tst.w	r2, #4
 801bd4a:	d0b2      	beq.n	801bcb2 <report_pin_states+0x186>
 801bd4c:	4839      	ldr	r0, [pc, #228]	@ (801be34 <report_pin_states+0x308>)
 801bd4e:	4798      	blx	r3
                hal.stream.write("|");
 801bd50:	4e34      	ldr	r6, [pc, #208]	@ (801be24 <report_pin_states+0x2f8>)
 801bd52:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bd56:	4834      	ldr	r0, [pc, #208]	@ (801be28 <report_pin_states+0x2fc>)
 801bd58:	4798      	blx	r3
                hal.stream.write(port->cap.invert ? "I" : "-");
 801bd5a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bd5e:	7d6a      	ldrb	r2, [r5, #21]
 801bd60:	f012 0f04 	tst.w	r2, #4
 801bd64:	d0a7      	beq.n	801bcb6 <report_pin_states+0x18a>
 801bd66:	4833      	ldr	r0, [pc, #204]	@ (801be34 <report_pin_states+0x308>)
 801bd68:	e7a6      	b.n	801bcb8 <report_pin_states+0x18c>
                hal.stream.write(port->get_value ? uitoa((uint32_t)port->get_value(port)) : "?");
 801bd6a:	4833      	ldr	r0, [pc, #204]	@ (801be38 <report_pin_states+0x30c>)
 801bd6c:	e7b7      	b.n	801bcde <report_pin_states+0x1b2>
        for(idx = 0; idx < ports; idx++) {
 801bd6e:	2400      	movs	r4, #0
 801bd70:	e7bd      	b.n	801bcee <report_pin_states+0x1c2>
                hal.stream.write(port->get_value ? ftoa((uint32_t)port->get_value(port), 2) : "?");
 801bd72:	4831      	ldr	r0, [pc, #196]	@ (801be38 <report_pin_states+0x30c>)
 801bd74:	47a8      	blx	r5
                hal.stream.write("]" ASCII_EOL);
 801bd76:	4b2b      	ldr	r3, [pc, #172]	@ (801be24 <report_pin_states+0x2f8>)
 801bd78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801bd7c:	482b      	ldr	r0, [pc, #172]	@ (801be2c <report_pin_states+0x300>)
 801bd7e:	4798      	blx	r3
        for(idx = 0; idx < ports; idx++) {
 801bd80:	3401      	adds	r4, #1
 801bd82:	b2e4      	uxtb	r4, r4
 801bd84:	42bc      	cmp	r4, r7
 801bd86:	f4bf aeea 	bcs.w	801bb5e <report_pin_states+0x32>
            if((port = hal.port.get_pin_info(Port_Analog, Port_Input, idx))) {
 801bd8a:	4b26      	ldr	r3, [pc, #152]	@ (801be24 <report_pin_states+0x2f8>)
 801bd8c:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801bd90:	4622      	mov	r2, r4
 801bd92:	2100      	movs	r1, #0
 801bd94:	4608      	mov	r0, r1
 801bd96:	4798      	blx	r3
 801bd98:	4606      	mov	r6, r0
 801bd9a:	2800      	cmp	r0, #0
 801bd9c:	d0f0      	beq.n	801bd80 <report_pin_states+0x254>
                hal.stream.write("[PINSTATE:AIN|");
 801bd9e:	4d21      	ldr	r5, [pc, #132]	@ (801be24 <report_pin_states+0x2f8>)
 801bda0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801bda4:	4826      	ldr	r0, [pc, #152]	@ (801be40 <report_pin_states+0x314>)
 801bda6:	4798      	blx	r3
                hal.stream.write(port->description);
 801bda8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801bdac:	68f0      	ldr	r0, [r6, #12]
 801bdae:	4798      	blx	r3
                hal.stream.write("|");
 801bdb0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801bdb4:	481c      	ldr	r0, [pc, #112]	@ (801be28 <report_pin_states+0x2fc>)
 801bdb6:	4798      	blx	r3
                hal.stream.write(uitoa(port->id));
 801bdb8:	f8d5 80b4 	ldr.w	r8, [r5, #180]	@ 0xb4
 801bdbc:	7830      	ldrb	r0, [r6, #0]
 801bdbe:	f7f9 fdff 	bl	80159c0 <uitoa>
 801bdc2:	47c0      	blx	r8
                hal.stream.write("|||");
 801bdc4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801bdc8:	481e      	ldr	r0, [pc, #120]	@ (801be44 <report_pin_states+0x318>)
 801bdca:	4798      	blx	r3
                hal.stream.write(port->get_value ? ftoa((uint32_t)port->get_value(port), 2) : "?");
 801bdcc:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 801bdd0:	69f3      	ldr	r3, [r6, #28]
 801bdd2:	2b00      	cmp	r3, #0
 801bdd4:	d0cd      	beq.n	801bd72 <report_pin_states+0x246>
 801bdd6:	4630      	mov	r0, r6
 801bdd8:	4798      	blx	r3
 801bdda:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801bdde:	2002      	movs	r0, #2
 801bde0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801bde4:	f7f9 fe0e 	bl	8015a04 <ftoa>
 801bde8:	e7c4      	b.n	801bd74 <report_pin_states+0x248>
        for(idx = 0; idx < ports; idx++) {
 801bdea:	2400      	movs	r4, #0
 801bdec:	e7ca      	b.n	801bd84 <report_pin_states+0x258>
                hal.stream.write(port->mode.pwm ? "P" : (port->mode.servo_pwm ? "S" : "N"));
 801bdee:	4816      	ldr	r0, [pc, #88]	@ (801be48 <report_pin_states+0x31c>)
 801bdf0:	4790      	blx	r2
                hal.stream.write("|");
 801bdf2:	4e0c      	ldr	r6, [pc, #48]	@ (801be24 <report_pin_states+0x2f8>)
 801bdf4:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bdf8:	480b      	ldr	r0, [pc, #44]	@ (801be28 <report_pin_states+0x2fc>)
 801bdfa:	4798      	blx	r3
                hal.stream.write(port->cap.pwm ? "P" : (port->cap.servo_pwm ? "S" : "N"));
 801bdfc:	f8d6 20b4 	ldr.w	r2, [r6, #180]	@ 0xb4
 801be00:	7d6b      	ldrb	r3, [r5, #21]
 801be02:	f013 0f10 	tst.w	r3, #16
 801be06:	d123      	bne.n	801be50 <report_pin_states+0x324>
 801be08:	f013 0f20 	tst.w	r3, #32
 801be0c:	d06e      	beq.n	801beec <report_pin_states+0x3c0>
 801be0e:	480f      	ldr	r0, [pc, #60]	@ (801be4c <report_pin_states+0x320>)
 801be10:	e01f      	b.n	801be52 <report_pin_states+0x326>
                hal.stream.write(port->mode.pwm ? "P" : (port->mode.servo_pwm ? "S" : "N"));
 801be12:	4801      	ldr	r0, [pc, #4]	@ (801be18 <report_pin_states+0x2ec>)
 801be14:	e7ec      	b.n	801bdf0 <report_pin_states+0x2c4>
 801be16:	bf00      	nop
 801be18:	0802c758 	.word	0x0802c758
 801be1c:	0802bfb8 	.word	0x0802bfb8
 801be20:	0802bfb0 	.word	0x0802bfb0
 801be24:	20001a90 	.word	0x20001a90
 801be28:	0802bff0 	.word	0x0802bff0
 801be2c:	0802bfd4 	.word	0x0802bfd4
 801be30:	0802c768 	.word	0x0802c768
 801be34:	0802c754 	.word	0x0802c754
 801be38:	0802c75c 	.word	0x0802c75c
 801be3c:	0802c778 	.word	0x0802c778
 801be40:	0802c788 	.word	0x0802c788
 801be44:	0802c798 	.word	0x0802c798
 801be48:	0802c760 	.word	0x0802c760
 801be4c:	0802c764 	.word	0x0802c764
                hal.stream.write(port->cap.pwm ? "P" : (port->cap.servo_pwm ? "S" : "N"));
 801be50:	4829      	ldr	r0, [pc, #164]	@ (801bef8 <report_pin_states+0x3cc>)
 801be52:	4790      	blx	r2
                hal.stream.write("|");
 801be54:	4e29      	ldr	r6, [pc, #164]	@ (801befc <report_pin_states+0x3d0>)
 801be56:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801be5a:	4829      	ldr	r0, [pc, #164]	@ (801bf00 <report_pin_states+0x3d4>)
 801be5c:	4798      	blx	r3
                hal.stream.write(port->get_value ? ftoa((uint32_t)port->get_value(port), 2) : "?");
 801be5e:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801be62:	69eb      	ldr	r3, [r5, #28]
 801be64:	2b00      	cmp	r3, #0
 801be66:	d043      	beq.n	801bef0 <report_pin_states+0x3c4>
 801be68:	4628      	mov	r0, r5
 801be6a:	4798      	blx	r3
 801be6c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801be70:	2002      	movs	r0, #2
 801be72:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801be76:	f7f9 fdc5 	bl	8015a04 <ftoa>
 801be7a:	47b0      	blx	r6
                hal.stream.write("]" ASCII_EOL);
 801be7c:	4b1f      	ldr	r3, [pc, #124]	@ (801befc <report_pin_states+0x3d0>)
 801be7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801be82:	4820      	ldr	r0, [pc, #128]	@ (801bf04 <report_pin_states+0x3d8>)
 801be84:	4798      	blx	r3
        for(idx = 0; idx < ports; idx++) {
 801be86:	3401      	adds	r4, #1
 801be88:	b2e4      	uxtb	r4, r4
 801be8a:	42bc      	cmp	r4, r7
 801be8c:	f4bf ae6f 	bcs.w	801bb6e <report_pin_states+0x42>
            if((port = hal.port.get_pin_info(Port_Analog, Port_Output, idx))) {
 801be90:	4b1a      	ldr	r3, [pc, #104]	@ (801befc <report_pin_states+0x3d0>)
 801be92:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801be96:	4622      	mov	r2, r4
 801be98:	2101      	movs	r1, #1
 801be9a:	2000      	movs	r0, #0
 801be9c:	4798      	blx	r3
 801be9e:	4605      	mov	r5, r0
 801bea0:	2800      	cmp	r0, #0
 801bea2:	d0f0      	beq.n	801be86 <report_pin_states+0x35a>
                hal.stream.write("[PINSTATE:AOUT|");
 801bea4:	4e15      	ldr	r6, [pc, #84]	@ (801befc <report_pin_states+0x3d0>)
 801bea6:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801beaa:	4817      	ldr	r0, [pc, #92]	@ (801bf08 <report_pin_states+0x3dc>)
 801beac:	4798      	blx	r3
                hal.stream.write(port->description);
 801beae:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801beb2:	68e8      	ldr	r0, [r5, #12]
 801beb4:	4798      	blx	r3
                hal.stream.write("|");
 801beb6:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801beba:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 801bf00 <report_pin_states+0x3d4>
 801bebe:	4640      	mov	r0, r8
 801bec0:	4798      	blx	r3
                hal.stream.write(uitoa(port->id));
 801bec2:	f8d6 90b4 	ldr.w	r9, [r6, #180]	@ 0xb4
 801bec6:	7828      	ldrb	r0, [r5, #0]
 801bec8:	f7f9 fd7a 	bl	80159c0 <uitoa>
 801becc:	47c8      	blx	r9
                hal.stream.write("|");
 801bece:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bed2:	4640      	mov	r0, r8
 801bed4:	4798      	blx	r3
                hal.stream.write(port->mode.pwm ? "P" : (port->mode.servo_pwm ? "S" : "N"));
 801bed6:	f8d6 20b4 	ldr.w	r2, [r6, #180]	@ 0xb4
 801beda:	7deb      	ldrb	r3, [r5, #23]
 801bedc:	f013 0f10 	tst.w	r3, #16
 801bee0:	d185      	bne.n	801bdee <report_pin_states+0x2c2>
 801bee2:	f013 0f20 	tst.w	r3, #32
 801bee6:	d094      	beq.n	801be12 <report_pin_states+0x2e6>
 801bee8:	4808      	ldr	r0, [pc, #32]	@ (801bf0c <report_pin_states+0x3e0>)
 801beea:	e781      	b.n	801bdf0 <report_pin_states+0x2c4>
                hal.stream.write(port->cap.pwm ? "P" : (port->cap.servo_pwm ? "S" : "N"));
 801beec:	4808      	ldr	r0, [pc, #32]	@ (801bf10 <report_pin_states+0x3e4>)
 801beee:	e7b0      	b.n	801be52 <report_pin_states+0x326>
                hal.stream.write(port->get_value ? ftoa((uint32_t)port->get_value(port), 2) : "?");
 801bef0:	4808      	ldr	r0, [pc, #32]	@ (801bf14 <report_pin_states+0x3e8>)
 801bef2:	e7c2      	b.n	801be7a <report_pin_states+0x34e>
        for(idx = 0; idx < ports; idx++) {
 801bef4:	2400      	movs	r4, #0
 801bef6:	e7c8      	b.n	801be8a <report_pin_states+0x35e>
 801bef8:	0802c760 	.word	0x0802c760
 801befc:	20001a90 	.word	0x20001a90
 801bf00:	0802bff0 	.word	0x0802bff0
 801bf04:	0802bfd4 	.word	0x0802bfd4
 801bf08:	0802c79c 	.word	0x0802c79c
 801bf0c:	0802c764 	.word	0x0802c764
 801bf10:	0802c758 	.word	0x0802c758
 801bf14:	0802c75c 	.word	0x0802c75c

0801bf18 <report_time>:
    if(hal.rtc.get_datetime) {
 801bf18:	4b1c      	ldr	r3, [pc, #112]	@ (801bf8c <report_time+0x74>)
 801bf1a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	d031      	beq.n	801bf86 <report_time+0x6e>
{
 801bf22:	b530      	push	{r4, r5, lr}
 801bf24:	b08b      	sub	sp, #44	@ 0x2c
        if((ok = !!hal.rtc.get_datetime(&time))) {
 801bf26:	a801      	add	r0, sp, #4
 801bf28:	4798      	blx	r3
 801bf2a:	b350      	cbz	r0, 801bf82 <report_time+0x6a>
            hal.stream.write("[RTC:");
 801bf2c:	4c17      	ldr	r4, [pc, #92]	@ (801bf8c <report_time+0x74>)
 801bf2e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801bf32:	4817      	ldr	r0, [pc, #92]	@ (801bf90 <report_time+0x78>)
 801bf34:	4798      	blx	r3
            hal.stream.write(uitoa(time.tm_year + 1900));
 801bf36:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 801bf3a:	9806      	ldr	r0, [sp, #24]
 801bf3c:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 801bf40:	f7f9 fd3e 	bl	80159c0 <uitoa>
 801bf44:	47a8      	blx	r5
            print_uito2a("-", time.tm_mon + 1);
 801bf46:	4d13      	ldr	r5, [pc, #76]	@ (801bf94 <report_time+0x7c>)
 801bf48:	9905      	ldr	r1, [sp, #20]
 801bf4a:	3101      	adds	r1, #1
 801bf4c:	4628      	mov	r0, r5
 801bf4e:	f7fc fc15 	bl	801877c <print_uito2a>
            print_uito2a("-", time.tm_mday);
 801bf52:	9904      	ldr	r1, [sp, #16]
 801bf54:	4628      	mov	r0, r5
 801bf56:	f7fc fc11 	bl	801877c <print_uito2a>
            print_uito2a("T", time.tm_hour);
 801bf5a:	9903      	ldr	r1, [sp, #12]
 801bf5c:	480e      	ldr	r0, [pc, #56]	@ (801bf98 <report_time+0x80>)
 801bf5e:	f7fc fc0d 	bl	801877c <print_uito2a>
            print_uito2a(":", time.tm_min);
 801bf62:	4d0e      	ldr	r5, [pc, #56]	@ (801bf9c <report_time+0x84>)
 801bf64:	9902      	ldr	r1, [sp, #8]
 801bf66:	4628      	mov	r0, r5
 801bf68:	f7fc fc08 	bl	801877c <print_uito2a>
            print_uito2a(":", time.tm_sec);
 801bf6c:	9901      	ldr	r1, [sp, #4]
 801bf6e:	4628      	mov	r0, r5
 801bf70:	f7fc fc04 	bl	801877c <print_uito2a>
            hal.stream.write("]" ASCII_EOL);
 801bf74:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801bf78:	4809      	ldr	r0, [pc, #36]	@ (801bfa0 <report_time+0x88>)
 801bf7a:	4798      	blx	r3
    return ok ? Status_OK : Status_InvalidStatement;
 801bf7c:	2000      	movs	r0, #0
}
 801bf7e:	b00b      	add	sp, #44	@ 0x2c
 801bf80:	bd30      	pop	{r4, r5, pc}
    return ok ? Status_OK : Status_InvalidStatement;
 801bf82:	2003      	movs	r0, #3
 801bf84:	e7fb      	b.n	801bf7e <report_time+0x66>
 801bf86:	2003      	movs	r0, #3
}
 801bf88:	4770      	bx	lr
 801bf8a:	bf00      	nop
 801bf8c:	20001a90 	.word	0x20001a90
 801bf90:	0802c7ac 	.word	0x0802c7ac
 801bf94:	0802bfb0 	.word	0x0802bfb0
 801bf98:	0802bfa0 	.word	0x0802bfa0
 801bf9c:	0802c33c 	.word	0x0802c33c
 801bfa0:	0802bfd4 	.word	0x0802bfd4

0801bfa4 <report_spindles>:

status_code_t report_spindles (bool machine_readable)
{
 801bfa4:	b510      	push	{r4, lr}
 801bfa6:	4604      	mov	r4, r0
    if(!spindle_enumerate_spindles(report_spindle, (void *)machine_readable) && !machine_readable)
 801bfa8:	4601      	mov	r1, r0
 801bfaa:	4806      	ldr	r0, [pc, #24]	@ (801bfc4 <report_spindles+0x20>)
 801bfac:	f002 facc 	bl	801e548 <spindle_enumerate_spindles>
 801bfb0:	b928      	cbnz	r0, 801bfbe <report_spindles+0x1a>
 801bfb2:	b924      	cbnz	r4, 801bfbe <report_spindles+0x1a>
        hal.stream.write("No spindles registered." ASCII_EOL);
 801bfb4:	4b04      	ldr	r3, [pc, #16]	@ (801bfc8 <report_spindles+0x24>)
 801bfb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801bfba:	4804      	ldr	r0, [pc, #16]	@ (801bfcc <report_spindles+0x28>)
 801bfbc:	4798      	blx	r3

    return Status_OK;
}
 801bfbe:	2000      	movs	r0, #0
 801bfc0:	bd10      	pop	{r4, pc}
 801bfc2:	bf00      	nop
 801bfc4:	080187b1 	.word	0x080187b1
 801bfc8:	20001a90 	.word	0x20001a90
 801bfcc:	0802c7b4 	.word	0x0802c7b4

0801bfd0 <report_pid_log>:

void report_pid_log (void)
{
 801bfd0:	b508      	push	{r3, lr}
    } while(idx != sys.pid_log.idx);

    hal.stream.write("]" ASCII_EOL);
    grbl.report.status_message(Status_OK);
#else
    grbl.report.status_message(Status_GcodeUnsupportedCommand);
 801bfd2:	4b02      	ldr	r3, [pc, #8]	@ (801bfdc <report_pid_log+0xc>)
 801bfd4:	689b      	ldr	r3, [r3, #8]
 801bfd6:	2014      	movs	r0, #20
 801bfd8:	4798      	blx	r3
#endif
}
 801bfda:	bd08      	pop	{r3, pc}
 801bfdc:	20001c78 	.word	0x20001c78

0801bfe0 <report_init_fns>:
    .alarm_message = report_alarm_message,
    .setting = report_setting
};

void report_init_fns (void)
{
 801bfe0:	b538      	push	{r3, r4, r5, lr}
    memcpy(&grbl.report, &report_fns, sizeof(report_t));
 801bfe2:	4d07      	ldr	r5, [pc, #28]	@ (801c000 <report_init_fns+0x20>)
 801bfe4:	46ac      	mov	ip, r5
 801bfe6:	4c07      	ldr	r4, [pc, #28]	@ (801c004 <report_init_fns+0x24>)
 801bfe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bfea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bfee:	e894 0003 	ldmia.w	r4, {r0, r1}
 801bff2:	e88c 0003 	stmia.w	ip, {r0, r1}

    if(grbl.on_report_handlers_init)
 801bff6:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 801bff8:	b103      	cbz	r3, 801bffc <report_init_fns+0x1c>
        grbl.on_report_handlers_init();
 801bffa:	4798      	blx	r3
}
 801bffc:	bd38      	pop	{r3, r4, r5, pc}
 801bffe:	bf00      	nop
 801c000:	20001c78 	.word	0x20001c78
 801c004:	0802c7e4 	.word	0x0802c7e4

0801c008 <group_is_available>:
};

static bool group_is_available (const setting_group_detail_t *group)
{
    return true;
}
 801c008:	2001      	movs	r0, #1
 801c00a:	4770      	bx	lr

0801c00c <restore_override_backup>:

static void restore_override_backup (void)
{
    uint_fast8_t idx = N_AXIS;

    if(override_backup.valid) do {
 801c00c:	4b08      	ldr	r3, [pc, #32]	@ (801c030 <restore_override_backup+0x24>)
 801c00e:	781b      	ldrb	r3, [r3, #0]
 801c010:	b16b      	cbz	r3, 801c02e <restore_override_backup+0x22>
    uint_fast8_t idx = N_AXIS;
 801c012:	2303      	movs	r3, #3
        idx--;
 801c014:	3b01      	subs	r3, #1
        settings.axis[idx].acceleration = override_backup.acceleration[idx];
 801c016:	4a06      	ldr	r2, [pc, #24]	@ (801c030 <restore_override_backup+0x24>)
 801c018:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801c01c:	6850      	ldr	r0, [r2, #4]
 801c01e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801c022:	0091      	lsls	r1, r2, #2
 801c024:	4a03      	ldr	r2, [pc, #12]	@ (801c034 <restore_override_backup+0x28>)
 801c026:	440a      	add	r2, r1
 801c028:	6390      	str	r0, [r2, #56]	@ 0x38
    } while(idx);
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d1f2      	bne.n	801c014 <restore_override_backup+0x8>
}
 801c02e:	4770      	bx	lr
 801c030:	20002430 	.word	0x20002430
 801c034:	200024a8 	.word	0x200024a8

0801c038 <set_ganged_dir_invert>:
    return Status_OK;
}

static status_code_t set_ganged_dir_invert (setting_id_t id, uint_fast16_t int_value)
{
    if(!hal.stepper.get_ganged)
 801c038:	4b08      	ldr	r3, [pc, #32]	@ (801c05c <set_ganged_dir_invert+0x24>)
 801c03a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801c03e:	b15b      	cbz	r3, 801c058 <set_ganged_dir_invert+0x20>
{
 801c040:	b510      	push	{r4, lr}
 801c042:	460c      	mov	r4, r1
        return Status_SettingDisabled;

    settings.steppers.ganged_dir_invert.mask = int_value & hal.stepper.get_ganged(false).mask;
 801c044:	2000      	movs	r0, #0
 801c046:	4798      	blx	r3
 801c048:	b2c0      	uxtb	r0, r0
 801c04a:	ea00 0104 	and.w	r1, r0, r4
 801c04e:	4b04      	ldr	r3, [pc, #16]	@ (801c060 <set_ganged_dir_invert+0x28>)
 801c050:	f883 10ea 	strb.w	r1, [r3, #234]	@ 0xea

    return Status_OK;
 801c054:	2000      	movs	r0, #0
}
 801c056:	bd10      	pop	{r4, pc}
        return Status_SettingDisabled;
 801c058:	2035      	movs	r0, #53	@ 0x35
}
 801c05a:	4770      	bx	lr
 801c05c:	20001a90 	.word	0x20001a90
 801c060:	200024a8 	.word	0x200024a8

0801c064 <set_stepper_deenergize_mask>:

static status_code_t set_stepper_deenergize_mask (setting_id_t id, uint_fast16_t int_value)
{
 801c064:	b508      	push	{r3, lr}
    settings.steppers.deenergize.mask = int_value;
 801c066:	4b05      	ldr	r3, [pc, #20]	@ (801c07c <set_stepper_deenergize_mask+0x18>)
 801c068:	f883 10ec 	strb.w	r1, [r3, #236]	@ 0xec

    hal.stepper.enable(settings.steppers.deenergize);
 801c06c:	4a04      	ldr	r2, [pc, #16]	@ (801c080 <set_stepper_deenergize_mask+0x1c>)
 801c06e:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801c072:	b2c8      	uxtb	r0, r1
 801c074:	4790      	blx	r2

    return Status_OK;
}
 801c076:	2000      	movs	r0, #0
 801c078:	bd08      	pop	{r3, pc}
 801c07a:	bf00      	nop
 801c07c:	200024a8 	.word	0x200024a8
 801c080:	20001a90 	.word	0x20001a90

0801c084 <set_report_interval>:

static status_code_t set_report_interval (setting_id_t setting, uint_fast16_t int_value)
{
    if((settings.report_interval = int_value) == 0)
 801c084:	b289      	uxth	r1, r1
 801c086:	4b05      	ldr	r3, [pc, #20]	@ (801c09c <set_report_interval+0x18>)
 801c088:	8299      	strh	r1, [r3, #20]
 801c08a:	b921      	cbnz	r1, 801c096 <set_report_interval+0x12>
        sys.flags.auto_reporting = Off;
 801c08c:	4b04      	ldr	r3, [pc, #16]	@ (801c0a0 <set_report_interval+0x1c>)
 801c08e:	7dda      	ldrb	r2, [r3, #23]
 801c090:	f36f 0241 	bfc	r2, #1, #1
 801c094:	75da      	strb	r2, [r3, #23]

    return Status_OK;
}
 801c096:	2000      	movs	r0, #0
 801c098:	4770      	bx	lr
 801c09a:	bf00      	nop
 801c09c:	200024a8 	.word	0x200024a8
 801c0a0:	20001d70 	.word	0x20001d70

0801c0a4 <set_report_mask>:

static status_code_t set_report_mask (setting_id_t id, uint_fast16_t int_value)
{
#if COMPATIBILITY_LEVEL <= 1
    settings.status_report.mask = int_value;
 801c0a4:	4b02      	ldr	r3, [pc, #8]	@ (801c0b0 <set_report_mask+0xc>)
 801c0a6:	f8a3 10fc 	strh.w	r1, [r3, #252]	@ 0xfc
    int_value &= 0b11;
    settings.status_report.mask = (settings.status_report.mask & ~0b11) | int_value;
#endif

    return Status_OK;
}
 801c0aa:	2000      	movs	r0, #0
 801c0ac:	4770      	bx	lr
 801c0ae:	bf00      	nop
 801c0b0:	200024a8 	.word	0x200024a8

0801c0b4 <set_pwm_mode>:
    return Status_OK;
}

static status_code_t set_pwm_mode (setting_id_t id, uint_fast16_t int_value)
{
    settings.spindle.flags.enable_rpm_controlled = int_value != 0;
 801c0b4:	3900      	subs	r1, #0
 801c0b6:	bf18      	it	ne
 801c0b8:	2101      	movne	r1, #1
 801c0ba:	4b04      	ldr	r3, [pc, #16]	@ (801c0cc <set_pwm_mode+0x18>)
 801c0bc:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801c0c0:	f361 0200 	bfi	r2, r1, #0, #1
 801c0c4:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7

    return Status_OK;
}
 801c0c8:	2000      	movs	r0, #0
 801c0ca:	4770      	bx	lr
 801c0cc:	200024a8 	.word	0x200024a8

0801c0d0 <set_pwm_options>:

static status_code_t set_pwm_options (setting_id_t id, uint_fast16_t int_value)
{
    if(int_value & 0x001) {
 801c0d0:	f011 0f01 	tst.w	r1, #1
 801c0d4:	d018      	beq.n	801c108 <set_pwm_options+0x38>
        if(int_value > 0b111)
 801c0d6:	2907      	cmp	r1, #7
 801c0d8:	d829      	bhi.n	801c12e <set_pwm_options+0x5e>
            return Status_SettingValueOutOfRange;
        settings.spindle.flags.pwm_disable = Off;
 801c0da:	4b16      	ldr	r3, [pc, #88]	@ (801c134 <set_pwm_options+0x64>)
 801c0dc:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801c0e0:	f36f 12c7 	bfc	r2, #7, #1
 801c0e4:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        settings.spindle.flags.enable_rpm_controlled = !!(int_value & 0b010);
 801c0e8:	f3c1 0040 	ubfx	r0, r1, #1, #1
 801c0ec:	b2d2      	uxtb	r2, r2
 801c0ee:	f360 0200 	bfi	r2, r0, #0, #1
 801c0f2:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        settings.spindle.flags.laser_mode_disable = !!(int_value & 0b100);
 801c0f6:	f3c1 0180 	ubfx	r1, r1, #2, #1
 801c0fa:	b2d2      	uxtb	r2, r2
 801c0fc:	f361 0241 	bfi	r2, r1, #1, #1
 801c100:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    } else {
        settings.spindle.flags.pwm_disable = On;
        settings.spindle.flags.enable_rpm_controlled = settings.spindle.flags.laser_mode_disable = Off;
    }

    return Status_OK;
 801c104:	2000      	movs	r0, #0
 801c106:	4770      	bx	lr
        settings.spindle.flags.pwm_disable = On;
 801c108:	4b0a      	ldr	r3, [pc, #40]	@ (801c134 <set_pwm_options+0x64>)
 801c10a:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801c10e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801c112:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        settings.spindle.flags.enable_rpm_controlled = settings.spindle.flags.laser_mode_disable = Off;
 801c116:	b2d2      	uxtb	r2, r2
 801c118:	f36f 0241 	bfc	r2, #1, #1
 801c11c:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
 801c120:	b2d2      	uxtb	r2, r2
 801c122:	f36f 0200 	bfc	r2, #0, #1
 801c126:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    return Status_OK;
 801c12a:	2000      	movs	r0, #0
 801c12c:	4770      	bx	lr
            return Status_SettingValueOutOfRange;
 801c12e:	2034      	movs	r0, #52	@ 0x34
}
 801c130:	4770      	bx	lr
 801c132:	bf00      	nop
 801c134:	200024a8 	.word	0x200024a8

0801c138 <tmp_set_soft_limits>:
    return Status_OK;
}

static void tmp_set_soft_limits (void)
{
    sys.soft_limits.mask = 0;
 801c138:	4b11      	ldr	r3, [pc, #68]	@ (801c180 <tmp_set_soft_limits+0x48>)
 801c13a:	2200      	movs	r2, #0
 801c13c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95

    if(settings.limits.flags.soft_enabled) {
 801c140:	4b10      	ldr	r3, [pc, #64]	@ (801c184 <tmp_set_soft_limits+0x4c>)
 801c142:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 801c146:	f013 0f02 	tst.w	r3, #2
 801c14a:	d018      	beq.n	801c17e <tmp_set_soft_limits+0x46>
        uint_fast8_t idx = N_AXIS;
 801c14c:	2303      	movs	r3, #3
 801c14e:	e000      	b.n	801c152 <tmp_set_soft_limits+0x1a>
        do {
            if(settings.axis[--idx].max_travel < -0.0f)
                bit_true(sys.soft_limits.mask, bit(idx));
        } while(idx);
 801c150:	b1ab      	cbz	r3, 801c17e <tmp_set_soft_limits+0x46>
            if(settings.axis[--idx].max_travel < -0.0f)
 801c152:	3b01      	subs	r3, #1
 801c154:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801c158:	0091      	lsls	r1, r2, #2
 801c15a:	4a0a      	ldr	r2, [pc, #40]	@ (801c184 <tmp_set_soft_limits+0x4c>)
 801c15c:	440a      	add	r2, r1
 801c15e:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 801c162:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c16a:	d5f1      	bpl.n	801c150 <tmp_set_soft_limits+0x18>
                bit_true(sys.soft_limits.mask, bit(idx));
 801c16c:	4804      	ldr	r0, [pc, #16]	@ (801c180 <tmp_set_soft_limits+0x48>)
 801c16e:	f890 2095 	ldrb.w	r2, [r0, #149]	@ 0x95
 801c172:	2101      	movs	r1, #1
 801c174:	4099      	lsls	r1, r3
 801c176:	430a      	orrs	r2, r1
 801c178:	f880 2095 	strb.w	r2, [r0, #149]	@ 0x95
 801c17c:	e7e8      	b.n	801c150 <tmp_set_soft_limits+0x18>
    }
}
 801c17e:	4770      	bx	lr
 801c180:	20001d70 	.word	0x20001d70
 801c184:	200024a8 	.word	0x200024a8

0801c188 <set_soft_limits_enable>:

static status_code_t set_soft_limits_enable (setting_id_t id, uint_fast16_t int_value)
{
 801c188:	b508      	push	{r3, lr}
    if(int_value && !settings.homing.flags.enabled)
 801c18a:	460b      	mov	r3, r1
 801c18c:	b129      	cbz	r1, 801c19a <set_soft_limits_enable+0x12>
 801c18e:	4a0b      	ldr	r2, [pc, #44]	@ (801c1bc <set_soft_limits_enable+0x34>)
 801c190:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 801c194:	f012 0f01 	tst.w	r2, #1
 801c198:	d00d      	beq.n	801c1b6 <set_soft_limits_enable+0x2e>
        return Status_SoftLimitError;

    settings.limits.flags.soft_enabled = int_value != 0;
 801c19a:	3b00      	subs	r3, #0
 801c19c:	bf18      	it	ne
 801c19e:	2301      	movne	r3, #1
 801c1a0:	4a06      	ldr	r2, [pc, #24]	@ (801c1bc <set_soft_limits_enable+0x34>)
 801c1a2:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 801c1a6:	f363 0141 	bfi	r1, r3, #1, #1
 801c1aa:	f882 1124 	strb.w	r1, [r2, #292]	@ 0x124

    tmp_set_soft_limits();
 801c1ae:	f7ff ffc3 	bl	801c138 <tmp_set_soft_limits>

    return Status_OK;
 801c1b2:	2000      	movs	r0, #0
}
 801c1b4:	bd08      	pop	{r3, pc}
        return Status_SoftLimitError;
 801c1b6:	200a      	movs	r0, #10
 801c1b8:	e7fc      	b.n	801c1b4 <set_soft_limits_enable+0x2c>
 801c1ba:	bf00      	nop
 801c1bc:	200024a8 	.word	0x200024a8

0801c1c0 <set_estop_unlock>:

static status_code_t set_estop_unlock (setting_id_t id, uint_fast16_t int_value)
{
    if(!hal.signals_cap.e_stop)
 801c1c0:	4b09      	ldr	r3, [pc, #36]	@ (801c1e8 <set_estop_unlock+0x28>)
 801c1c2:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801c1c6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801c1ca:	d00b      	beq.n	801c1e4 <set_estop_unlock+0x24>
        return Status_SettingDisabled;

    settings.flags.no_unlock_after_estop = int_value == 0;
 801c1cc:	fab1 f181 	clz	r1, r1
 801c1d0:	0949      	lsrs	r1, r1, #5
 801c1d2:	4b06      	ldr	r3, [pc, #24]	@ (801c1ec <set_estop_unlock+0x2c>)
 801c1d4:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 801c1d8:	f361 12c7 	bfi	r2, r1, #7, #1
 801c1dc:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    return Status_OK;
 801c1e0:	2000      	movs	r0, #0
 801c1e2:	4770      	bx	lr
        return Status_SettingDisabled;
 801c1e4:	2035      	movs	r0, #53	@ 0x35
}
 801c1e6:	4770      	bx	lr
 801c1e8:	20001a90 	.word	0x20001a90
 801c1ec:	200024a8 	.word	0x200024a8

0801c1f0 <set_offset_lock>:

#if COMPATIBILITY_LEVEL <= 1

static status_code_t set_offset_lock (setting_id_t id, uint_fast16_t int_value)
{
    settings.parking.flags.offset_lock = int_value & 0b111; // TODO: remove
 801c1f0:	f001 0107 	and.w	r1, r1, #7
 801c1f4:	4a08      	ldr	r2, [pc, #32]	@ (801c218 <set_offset_lock+0x28>)
 801c1f6:	f892 3128 	ldrb.w	r3, [r2, #296]	@ 0x128
 801c1fa:	f361 1347 	bfi	r3, r1, #5, #3
 801c1fe:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
    settings.offset_lock.mask &= ~0b111; // TODO: remove
 801c202:	f892 3102 	ldrb.w	r3, [r2, #258]	@ 0x102
 801c206:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801c20a:	f882 3102 	strb.w	r3, [r2, #258]	@ 0x102
    settings.offset_lock.mask |= settings.parking.flags.offset_lock;
 801c20e:	430b      	orrs	r3, r1
 801c210:	f882 3102 	strb.w	r3, [r2, #258]	@ 0x102

    return Status_OK;
}
 801c214:	2000      	movs	r0, #0
 801c216:	4770      	bx	lr
 801c218:	200024a8 	.word	0x200024a8

0801c21c <set_hard_limits_enable>:
        sys.hard_limits.mask &= ~settings.steppers.is_rotary.mask;
  #endif
}

static status_code_t set_hard_limits_enable (setting_id_t id, uint_fast16_t int_value)
{
 801c21c:	b510      	push	{r4, lr}
    if((settings.limits.flags.hard_enabled = bit_istrue(int_value, bit(0)))) {
 801c21e:	f001 0001 	and.w	r0, r1, #1
 801c222:	4b16      	ldr	r3, [pc, #88]	@ (801c27c <set_hard_limits_enable+0x60>)
 801c224:	f893 2124 	ldrb.w	r2, [r3, #292]	@ 0x124
 801c228:	f360 0200 	bfi	r2, r0, #0, #1
 801c22c:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
 801c230:	b1b8      	cbz	r0, 801c262 <set_hard_limits_enable+0x46>
#if COMPATIBILITY_LEVEL <= 1
        settings.limits.flags.check_at_init = bit_istrue(int_value, bit(1));
 801c232:	f3c1 0140 	ubfx	r1, r1, #1, #1
 801c236:	b2d2      	uxtb	r2, r2
 801c238:	f361 0282 	bfi	r2, r1, #2, #1
 801c23c:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
    sys.hard_limits.mask = settings.limits.flags.hard_enabled ? AXES_BITMASK : 0;
 801c240:	4b0e      	ldr	r3, [pc, #56]	@ (801c27c <set_hard_limits_enable+0x60>)
 801c242:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 801c246:	f013 0301 	ands.w	r3, r3, #1
 801c24a:	d000      	beq.n	801c24e <set_hard_limits_enable+0x32>
 801c24c:	2307      	movs	r3, #7
 801c24e:	4a0c      	ldr	r2, [pc, #48]	@ (801c280 <set_hard_limits_enable+0x64>)
 801c250:	f882 3094 	strb.w	r3, [r2, #148]	@ 0x94
#endif
    } else
        settings.limits.flags.check_at_init = settings.limits.flags.hard_disabled_rotary = Off;

    tmp_set_hard_limits();
    hal.limits.enable(settings.limits.flags.hard_enabled, (axes_signals_t){0}); // Change immediately. NOTE: Nice to have but could be problematic later.
 801c254:	4b0b      	ldr	r3, [pc, #44]	@ (801c284 <set_hard_limits_enable+0x68>)
 801c256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c258:	2400      	movs	r4, #0
 801c25a:	4621      	mov	r1, r4
 801c25c:	4798      	blx	r3

    return Status_OK;
}
 801c25e:	4620      	mov	r0, r4
 801c260:	bd10      	pop	{r4, pc}
        settings.limits.flags.check_at_init = settings.limits.flags.hard_disabled_rotary = Off;
 801c262:	4b06      	ldr	r3, [pc, #24]	@ (801c27c <set_hard_limits_enable+0x60>)
 801c264:	f893 2124 	ldrb.w	r2, [r3, #292]	@ 0x124
 801c268:	f36f 1245 	bfc	r2, #5, #1
 801c26c:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
 801c270:	b2d2      	uxtb	r2, r2
 801c272:	f36f 0282 	bfc	r2, #2, #1
 801c276:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
 801c27a:	e7e1      	b.n	801c240 <set_hard_limits_enable+0x24>
 801c27c:	200024a8 	.word	0x200024a8
 801c280:	20001d70 	.word	0x20001d70
 801c284:	20001a90 	.word	0x20001a90

0801c288 <set_jog_soft_limited>:

static status_code_t set_jog_soft_limited (setting_id_t id, uint_fast16_t int_value)
{
    if (int_value && !settings.homing.flags.enabled)
 801c288:	460b      	mov	r3, r1
 801c28a:	b129      	cbz	r1, 801c298 <set_jog_soft_limited+0x10>
 801c28c:	4a09      	ldr	r2, [pc, #36]	@ (801c2b4 <set_jog_soft_limited+0x2c>)
 801c28e:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 801c292:	f012 0f01 	tst.w	r2, #1
 801c296:	d00b      	beq.n	801c2b0 <set_jog_soft_limited+0x28>
        return Status_SoftLimitError;

    settings.limits.flags.jog_soft_limited = int_value != 0;
 801c298:	3b00      	subs	r3, #0
 801c29a:	bf18      	it	ne
 801c29c:	2301      	movne	r3, #1
 801c29e:	4a05      	ldr	r2, [pc, #20]	@ (801c2b4 <set_jog_soft_limited+0x2c>)
 801c2a0:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 801c2a4:	f363 01c3 	bfi	r1, r3, #3, #1
 801c2a8:	f882 1124 	strb.w	r1, [r2, #292]	@ 0x124

    return Status_OK;
 801c2ac:	2000      	movs	r0, #0
 801c2ae:	4770      	bx	lr
        return Status_SoftLimitError;
 801c2b0:	200a      	movs	r0, #10
}
 801c2b2:	4770      	bx	lr
 801c2b4:	200024a8 	.word	0x200024a8

0801c2b8 <set_homing_enable>:

static status_code_t set_homing_enable (setting_id_t id, uint_fast16_t int_value)
{
    homing_flags_t homing;

    homing.value = int_value;
 801c2b8:	b28a      	uxth	r2, r1

    if(homing.enabled) {
 801c2ba:	f011 0f01 	tst.w	r1, #1
 801c2be:	d02b      	beq.n	801c318 <set_homing_enable+0x60>
        settings.homing.flags.override_locks = DEFAULT_HOMING_OVERRIDE_LOCKS;
        settings.homing.flags.keep_on_reset = DEFAULT_HOMING_KEEP_STATUS_ON_RESET;
        settings.homing.flags.use_limit_switches = DEFAULT_HOMING_USE_LIMIT_SWITCHES;
        settings.limits.flags.two_switches = DEFAULT_LIMITS_TWO_SWITCHES_ON_AXES;
#else
        settings.homing.flags.value = int_value & 0b1111;
 801c2c0:	f001 010f 	and.w	r1, r1, #15
 801c2c4:	4b1c      	ldr	r3, [pc, #112]	@ (801c338 <set_homing_enable+0x80>)
 801c2c6:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.limits.flags.two_switches = homing.two_switches;
 801c2ca:	f3c2 1000 	ubfx	r0, r2, #4, #1
 801c2ce:	f893 1124 	ldrb.w	r1, [r3, #292]	@ 0x124
 801c2d2:	f360 1104 	bfi	r1, r0, #4, #1
 801c2d6:	f883 1124 	strb.w	r1, [r3, #292]	@ 0x124
        settings.homing.flags.manual = homing.manual;
 801c2da:	f3c2 1040 	ubfx	r0, r2, #5, #1
 801c2de:	f893 1114 	ldrb.w	r1, [r3, #276]	@ 0x114
 801c2e2:	f360 1104 	bfi	r1, r0, #4, #1
 801c2e6:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.homing.flags.override_locks = homing.override_locks;
 801c2ea:	f3c2 1080 	ubfx	r0, r2, #6, #1
 801c2ee:	b2c9      	uxtb	r1, r1
 801c2f0:	f360 1145 	bfi	r1, r0, #5, #1
 801c2f4:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.homing.flags.keep_on_reset = homing.keep_on_reset;
 801c2f8:	f3c2 10c0 	ubfx	r0, r2, #7, #1
 801c2fc:	b2c9      	uxtb	r1, r1
 801c2fe:	f360 1186 	bfi	r1, r0, #6, #1
 801c302:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.homing.flags.use_limit_switches = homing.use_limit_switches;
 801c306:	f3c2 2200 	ubfx	r2, r2, #8, #1
 801c30a:	b2c9      	uxtb	r1, r1
 801c30c:	f362 11c7 	bfi	r1, r2, #7, #1
 801c310:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.limits.flags.soft_enabled = Off; // Force disable soft-limits.
        settings.limits.flags.jog_soft_limited = Off;
    }

    return Status_OK;
}
 801c314:	2000      	movs	r0, #0
 801c316:	4770      	bx	lr
        settings.homing.flags.value = 0;
 801c318:	4b07      	ldr	r3, [pc, #28]	@ (801c338 <set_homing_enable+0x80>)
 801c31a:	2200      	movs	r2, #0
 801c31c:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
        settings.limits.flags.soft_enabled = Off; // Force disable soft-limits.
 801c320:	f893 1124 	ldrb.w	r1, [r3, #292]	@ 0x124
 801c324:	f362 0141 	bfi	r1, r2, #1, #1
 801c328:	f883 1124 	strb.w	r1, [r3, #292]	@ 0x124
        settings.limits.flags.jog_soft_limited = Off;
 801c32c:	b2c9      	uxtb	r1, r1
 801c32e:	f362 01c3 	bfi	r1, r2, #3, #1
 801c332:	f883 1124 	strb.w	r1, [r3, #292]	@ 0x124
 801c336:	e7ed      	b.n	801c314 <set_homing_enable+0x5c>
 801c338:	200024a8 	.word	0x200024a8

0801c33c <set_enable_legacy_rt_commands>:

static status_code_t set_enable_legacy_rt_commands (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.legacy_rt_commands = int_value != 0;
 801c33c:	3900      	subs	r1, #0
 801c33e:	bf18      	it	ne
 801c340:	2101      	movne	r1, #1
 801c342:	4b04      	ldr	r3, [pc, #16]	@ (801c354 <set_enable_legacy_rt_commands+0x18>)
 801c344:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801c348:	f361 1286 	bfi	r2, r1, #6, #1
 801c34c:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801c350:	2000      	movs	r0, #0
 801c352:	4770      	bx	lr
 801c354:	200024a8 	.word	0x200024a8

0801c358 <set_parking_enable>:

#ifndef NO_SAFETY_DOOR_SUPPORT

static status_code_t set_parking_enable (setting_id_t id, uint_fast16_t int_value)
{
    settings.parking.flags.value = bit_istrue(int_value, bit(0)) ? (int_value & 0x07) : 0;
 801c358:	f011 0f01 	tst.w	r1, #1
 801c35c:	d006      	beq.n	801c36c <set_parking_enable+0x14>
 801c35e:	f001 0107 	and.w	r1, r1, #7
 801c362:	4b03      	ldr	r3, [pc, #12]	@ (801c370 <set_parking_enable+0x18>)
 801c364:	f883 1128 	strb.w	r1, [r3, #296]	@ 0x128

    return Status_OK;
}
 801c368:	2000      	movs	r0, #0
 801c36a:	4770      	bx	lr
    settings.parking.flags.value = bit_istrue(int_value, bit(0)) ? (int_value & 0x07) : 0;
 801c36c:	2100      	movs	r1, #0
 801c36e:	e7f8      	b.n	801c362 <set_parking_enable+0xa>
 801c370:	200024a8 	.word	0x200024a8

0801c374 <set_restore_overrides>:

static status_code_t set_restore_overrides (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.restore_overrides = int_value != 0;
 801c374:	3900      	subs	r1, #0
 801c376:	bf18      	it	ne
 801c378:	2101      	movne	r1, #1
 801c37a:	4b04      	ldr	r3, [pc, #16]	@ (801c38c <set_restore_overrides+0x18>)
 801c37c:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801c380:	f361 0241 	bfi	r2, r1, #1, #1
 801c384:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801c388:	2000      	movs	r0, #0
 801c38a:	4770      	bx	lr
 801c38c:	200024a8 	.word	0x200024a8

0801c390 <set_sleep_enable>:

#endif // NO_SAFETY_DOOR_SUPPORT

static status_code_t set_sleep_enable (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.sleep_enable = int_value != 0;
 801c390:	3900      	subs	r1, #0
 801c392:	bf18      	it	ne
 801c394:	2101      	movne	r1, #1
 801c396:	4b04      	ldr	r3, [pc, #16]	@ (801c3a8 <set_sleep_enable+0x18>)
 801c398:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801c39c:	f361 02c3 	bfi	r2, r1, #3, #1
 801c3a0:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801c3a4:	2000      	movs	r0, #0
 801c3a6:	4770      	bx	lr
 801c3a8:	200024a8 	.word	0x200024a8

0801c3ac <set_hold_actions>:

static status_code_t set_hold_actions (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.disable_laser_during_hold = bit_istrue(int_value, bit(0));
 801c3ac:	4b07      	ldr	r3, [pc, #28]	@ (801c3cc <set_hold_actions+0x20>)
 801c3ae:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801c3b2:	f361 1204 	bfi	r2, r1, #4, #1
 801c3b6:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
    settings.flags.restore_after_feed_hold = bit_istrue(int_value, bit(1));
 801c3ba:	f3c1 0140 	ubfx	r1, r1, #1, #1
 801c3be:	b2d2      	uxtb	r2, r2
 801c3c0:	f361 12c7 	bfi	r2, r1, #7, #1
 801c3c4:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801c3c8:	2000      	movs	r0, #0
 801c3ca:	4770      	bx	lr
 801c3cc:	200024a8 	.word	0x200024a8

0801c3d0 <set_g92_disable_persistence>:

#if COMPATIBILITY_LEVEL <= 1
static status_code_t set_g92_disable_persistence (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.g92_is_volatile = int_value != 0;
 801c3d0:	3900      	subs	r1, #0
 801c3d2:	bf18      	it	ne
 801c3d4:	2101      	movne	r1, #1
 801c3d6:	4b04      	ldr	r3, [pc, #16]	@ (801c3e8 <set_g92_disable_persistence+0x18>)
 801c3d8:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 801c3dc:	f361 0241 	bfi	r2, r1, #1, #1
 801c3e0:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    return Status_OK;
}
 801c3e4:	2000      	movs	r0, #0
 801c3e6:	4770      	bx	lr
 801c3e8:	200024a8 	.word	0x200024a8

0801c3ec <set_force_initialization_alarm>:
#endif

static status_code_t set_force_initialization_alarm (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.force_initialization_alarm = int_value != 0;
 801c3ec:	3900      	subs	r1, #0
 801c3ee:	bf18      	it	ne
 801c3f0:	2101      	movne	r1, #1
 801c3f2:	4b04      	ldr	r3, [pc, #16]	@ (801c404 <set_force_initialization_alarm+0x18>)
 801c3f4:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801c3f8:	f361 1245 	bfi	r2, r1, #5, #1
 801c3fc:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801c400:	2000      	movs	r0, #0
 801c402:	4770      	bx	lr
 801c404:	200024a8 	.word	0x200024a8

0801c408 <set_probe_allow_feed_override>:

static status_code_t set_probe_allow_feed_override (setting_id_t id, uint_fast16_t int_value)
{
    settings.probe.allow_feed_override = int_value != 0;
 801c408:	3900      	subs	r1, #0
 801c40a:	bf18      	it	ne
 801c40c:	2101      	movne	r1, #1
 801c40e:	4b04      	ldr	r3, [pc, #16]	@ (801c420 <set_probe_allow_feed_override+0x18>)
 801c410:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
 801c414:	f361 1204 	bfi	r2, r1, #4, #1
 801c418:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

    return Status_OK;
}
 801c41c:	2000      	movs	r0, #0
 801c41e:	4770      	bx	lr
 801c420:	200024a8 	.word	0x200024a8

0801c424 <set_tool_change_probing_distance>:
    return Status_OK;
}

static status_code_t set_tool_change_probing_distance (setting_id_t id, float value)
{
    if(hal.driver_cap.atc)
 801c424:	4b05      	ldr	r3, [pc, #20]	@ (801c43c <set_tool_change_probing_distance+0x18>)
 801c426:	f893 01da 	ldrb.w	r0, [r3, #474]	@ 0x1da
 801c42a:	f010 0002 	ands.w	r0, r0, #2
 801c42e:	d103      	bne.n	801c438 <set_tool_change_probing_distance+0x14>
        return Status_InvalidStatement;

    settings.tool_change.probing_distance = value;
 801c430:	4b03      	ldr	r3, [pc, #12]	@ (801c440 <set_tool_change_probing_distance+0x1c>)
 801c432:	ed83 0a0a 	vstr	s0, [r3, #40]	@ 0x28

    return Status_OK;
 801c436:	4770      	bx	lr
        return Status_InvalidStatement;
 801c438:	2003      	movs	r0, #3
}
 801c43a:	4770      	bx	lr
 801c43c:	20001a90 	.word	0x20001a90
 801c440:	200024a8 	.word	0x200024a8

0801c444 <set_tool_restore_pos>:

static status_code_t set_tool_restore_pos (setting_id_t id, uint_fast16_t int_value)
{
    if(hal.driver_cap.atc)
 801c444:	4b09      	ldr	r3, [pc, #36]	@ (801c46c <set_tool_restore_pos+0x28>)
 801c446:	f893 01da 	ldrb.w	r0, [r3, #474]	@ 0x1da
 801c44a:	f010 0002 	ands.w	r0, r0, #2
 801c44e:	d10a      	bne.n	801c466 <set_tool_restore_pos+0x22>
        return Status_InvalidStatement;

    settings.flags.no_restore_position_after_M6 = int_value == 0;
 801c450:	fab1 f181 	clz	r1, r1
 801c454:	0949      	lsrs	r1, r1, #5
 801c456:	4b06      	ldr	r3, [pc, #24]	@ (801c470 <set_tool_restore_pos+0x2c>)
 801c458:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 801c45c:	f361 1286 	bfi	r2, r1, #6, #1
 801c460:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    return Status_OK;
 801c464:	4770      	bx	lr
        return Status_InvalidStatement;
 801c466:	2003      	movs	r0, #3
}
 801c468:	4770      	bx	lr
 801c46a:	bf00      	nop
 801c46c:	20001a90 	.word	0x20001a90
 801c470:	200024a8 	.word	0x200024a8

0801c474 <normalize_id>:

#endif

inline static setting_id_t normalize_id (setting_id_t id)
{
    if((id > Setting_AxisSettingsBase && id <= Setting_AxisSettingsMax) ||
 801c474:	f1a0 0365 	sub.w	r3, r0, #101	@ 0x65
 801c478:	b29b      	uxth	r3, r3
 801c47a:	2b5c      	cmp	r3, #92	@ 0x5c
 801c47c:	d904      	bls.n	801c488 <normalize_id+0x14>
       (id > Setting_AxisSettingsBase2 && id <= Setting_AxisSettingsMax2))
 801c47e:	f1a0 03c9 	sub.w	r3, r0, #201	@ 0xc9
 801c482:	b29b      	uxth	r3, r3
    if((id > Setting_AxisSettingsBase && id <= Setting_AxisSettingsMax) ||
 801c484:	2b5c      	cmp	r3, #92	@ 0x5c
 801c486:	d80b      	bhi.n	801c4a0 <normalize_id+0x2c>
        id -= id % AXIS_SETTINGS_INCREMENT;
 801c488:	4b24      	ldr	r3, [pc, #144]	@ (801c51c <normalize_id+0xa8>)
 801c48a:	fba3 2300 	umull	r2, r3, r3, r0
 801c48e:	08db      	lsrs	r3, r3, #3
 801c490:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c494:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 801c498:	b29b      	uxth	r3, r3
 801c49a:	1ac0      	subs	r0, r0, r3
 801c49c:	b280      	uxth	r0, r0
 801c49e:	4770      	bx	lr
    else if(id > Setting_EncoderSettingsBase && id <= Setting_EncoderSettingsMax)
 801c4a0:	f2a0 1391 	subw	r3, r0, #401	@ 0x191
 801c4a4:	b29b      	uxth	r3, r3
 801c4a6:	2b30      	cmp	r3, #48	@ 0x30
 801c4a8:	d80c      	bhi.n	801c4c4 <normalize_id+0x50>
        id = (setting_id_t)(Setting_EncoderSettingsBase + (id % ENCODER_SETTINGS_INCREMENT));
 801c4aa:	4b1c      	ldr	r3, [pc, #112]	@ (801c51c <normalize_id+0xa8>)
 801c4ac:	fba3 2300 	umull	r2, r3, r3, r0
 801c4b0:	08db      	lsrs	r3, r3, #3
 801c4b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c4b6:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 801c4ba:	b280      	uxth	r0, r0
 801c4bc:	f500 70c8 	add.w	r0, r0, #400	@ 0x190
 801c4c0:	b280      	uxth	r0, r0
 801c4c2:	4770      	bx	lr
    else if(id > Setting_ModbusTCPBase && id <= Setting_ModbusTCPMax)
 801c4c4:	f2a0 2359 	subw	r3, r0, #601	@ 0x259
 801c4c8:	b29b      	uxth	r3, r3
 801c4ca:	2b26      	cmp	r3, #38	@ 0x26
 801c4cc:	d80b      	bhi.n	801c4e6 <normalize_id+0x72>
        id = (setting_id_t)(Setting_ModbusTCPBase + (id % MODBUS_TCP_SETTINGS_INCREMENT));
 801c4ce:	4b13      	ldr	r3, [pc, #76]	@ (801c51c <normalize_id+0xa8>)
 801c4d0:	fba3 2300 	umull	r2, r3, r3, r0
 801c4d4:	089b      	lsrs	r3, r3, #2
 801c4d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c4da:	1ac0      	subs	r0, r0, r3
 801c4dc:	b280      	uxth	r0, r0
 801c4de:	f500 7016 	add.w	r0, r0, #600	@ 0x258
 801c4e2:	b280      	uxth	r0, r0
 801c4e4:	4770      	bx	lr
    else if((id > Setting_Macro0 && id <= Setting_Macro9) || (id > Setting_MacroPort0 && id <= Setting_MacroPort9) || (id > Setting_ButtonAction0 && id <= Setting_ButtonAction9))
 801c4e6:	f2a0 13eb 	subw	r3, r0, #491	@ 0x1eb
 801c4ea:	b29b      	uxth	r3, r3
 801c4ec:	2b08      	cmp	r3, #8
 801c4ee:	d909      	bls.n	801c504 <normalize_id+0x90>
 801c4f0:	f2a0 13f5 	subw	r3, r0, #501	@ 0x1f5
 801c4f4:	b29b      	uxth	r3, r3
 801c4f6:	2b08      	cmp	r3, #8
 801c4f8:	d904      	bls.n	801c504 <normalize_id+0x90>
 801c4fa:	f2a0 234f 	subw	r3, r0, #591	@ 0x24f
 801c4fe:	b29b      	uxth	r3, r3
 801c500:	2b08      	cmp	r3, #8
 801c502:	d80a      	bhi.n	801c51a <normalize_id+0xa6>
        id = (setting_id_t)(id - (id % 10));
 801c504:	4b05      	ldr	r3, [pc, #20]	@ (801c51c <normalize_id+0xa8>)
 801c506:	fba3 2300 	umull	r2, r3, r3, r0
 801c50a:	08db      	lsrs	r3, r3, #3
 801c50c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c510:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 801c514:	b29b      	uxth	r3, r3
 801c516:	1ac0      	subs	r0, r0, r3
 801c518:	b280      	uxth	r0, r0

    return id;
}
 801c51a:	4770      	bx	lr
 801c51c:	cccccccd 	.word	0xcccccccd

0801c520 <get_int>:

static uint32_t get_int (setting_id_t id)
{
    uint32_t value = 0;

    switch(id) {
 801c520:	2841      	cmp	r0, #65	@ 0x41
 801c522:	d844      	bhi.n	801c5ae <get_int+0x8e>
 801c524:	2806      	cmp	r0, #6
 801c526:	f0c0 8148 	bcc.w	801c7ba <get_int+0x29a>
 801c52a:	1f83      	subs	r3, r0, #6
 801c52c:	2b3b      	cmp	r3, #59	@ 0x3b
 801c52e:	f200 8146 	bhi.w	801c7be <get_int+0x29e>
 801c532:	e8df f013 	tbh	[pc, r3, lsl #1]
 801c536:	0095      	.short	0x0095
 801c538:	009b0144 	.word	0x009b0144
 801c53c:	009f0081 	.word	0x009f0081
 801c540:	01440144 	.word	0x01440144
 801c544:	00a900a3 	.word	0x00a900a3
 801c548:	00b30144 	.word	0x00b30144
 801c54c:	014400b7 	.word	0x014400b7
 801c550:	00c100bb 	.word	0x00c100bb
 801c554:	00dd00c7 	.word	0x00dd00c7
 801c558:	01440144 	.word	0x01440144
 801c55c:	01440144 	.word	0x01440144
 801c560:	01440144 	.word	0x01440144
 801c564:	01440144 	.word	0x01440144
 801c568:	00920144 	.word	0x00920144
 801c56c:	01440144 	.word	0x01440144
 801c570:	01440144 	.word	0x01440144
 801c574:	014400f9 	.word	0x014400f9
 801c578:	00d700fd 	.word	0x00d700fd
 801c57c:	01440103 	.word	0x01440103
 801c580:	01070144 	.word	0x01070144
 801c584:	01070107 	.word	0x01070107
 801c588:	01070107 	.word	0x01070107
 801c58c:	01440107 	.word	0x01440107
 801c590:	01440144 	.word	0x01440144
 801c594:	01440144 	.word	0x01440144
 801c598:	01440144 	.word	0x01440144
 801c59c:	01440144 	.word	0x01440144
 801c5a0:	010d0144 	.word	0x010d0144
 801c5a4:	01130144 	.word	0x01130144
 801c5a8:	01230119 	.word	0x01230119
 801c5ac:	0129      	.short	0x0129
 801c5ae:	f240 13e1 	movw	r3, #481	@ 0x1e1
 801c5b2:	4298      	cmp	r0, r3
 801c5b4:	f000 80f8 	beq.w	801c7a8 <get_int+0x288>
 801c5b8:	f5b0 7ff1 	cmp.w	r0, #482	@ 0x1e2
 801c5bc:	d30c      	bcc.n	801c5d8 <get_int+0xb8>
 801c5be:	f5b0 7ff3 	cmp.w	r0, #486	@ 0x1e6
 801c5c2:	f000 80f4 	beq.w	801c7ae <get_int+0x28e>
 801c5c6:	f240 2307 	movw	r3, #519	@ 0x207
 801c5ca:	4298      	cmp	r0, r3
 801c5cc:	d128      	bne.n	801c620 <get_int+0x100>
        case Setting_OffsetLock:
            value = settings.offset_lock.mask & 0b111;
            break;

        case Setting_EncoderSpindle:
            value = settings.offset_lock.encoder_spindle;
 801c5ce:	4b7f      	ldr	r3, [pc, #508]	@ (801c7cc <get_int+0x2ac>)
 801c5d0:	f893 0102 	ldrb.w	r0, [r3, #258]	@ 0x102
 801c5d4:	08c0      	lsrs	r0, r0, #3
            break;
 801c5d6:	4770      	bx	lr
    switch(id) {
 801c5d8:	f5b0 7fc0 	cmp.w	r0, #384	@ 0x180
 801c5dc:	f000 80de 	beq.w	801c79c <get_int+0x27c>
 801c5e0:	d909      	bls.n	801c5f6 <get_int+0xd6>
 801c5e2:	f240 138b 	movw	r3, #395	@ 0x18b
 801c5e6:	4298      	cmp	r0, r3
 801c5e8:	d118      	bne.n	801c61c <get_int+0xfc>
            value = settings.spindle.flags.type;
 801c5ea:	4b78      	ldr	r3, [pc, #480]	@ (801c7cc <get_int+0x2ac>)
 801c5ec:	f893 00e7 	ldrb.w	r0, [r3, #231]	@ 0xe7
 801c5f0:	f3c0 0084 	ubfx	r0, r0, #2, #5
            break;
 801c5f4:	4770      	bx	lr
    switch(id) {
 801c5f6:	f240 1355 	movw	r3, #341	@ 0x155
 801c5fa:	4298      	cmp	r0, r3
 801c5fc:	f000 80ca 	beq.w	801c794 <get_int+0x274>
 801c600:	f5b0 7fad 	cmp.w	r0, #346	@ 0x15a
 801c604:	d108      	bne.n	801c618 <get_int+0xf8>
            value = settings.flags.no_restore_position_after_M6 ? 0 : 1;
 801c606:	4b71      	ldr	r3, [pc, #452]	@ (801c7cc <get_int+0x2ac>)
 801c608:	f893 00ff 	ldrb.w	r0, [r3, #255]	@ 0xff
 801c60c:	0980      	lsrs	r0, r0, #6
 801c60e:	f080 0001 	eor.w	r0, r0, #1
 801c612:	f000 0001 	and.w	r0, r0, #1
            break;
 801c616:	4770      	bx	lr
    switch(id) {
 801c618:	2000      	movs	r0, #0
 801c61a:	4770      	bx	lr
 801c61c:	2000      	movs	r0, #0
 801c61e:	4770      	bx	lr
 801c620:	f5b0 7ff2 	cmp.w	r0, #484	@ 0x1e4
 801c624:	d106      	bne.n	801c634 <get_int+0x114>
            value = settings.flags.no_unlock_after_estop ? 0 : 1;
 801c626:	4b69      	ldr	r3, [pc, #420]	@ (801c7cc <get_int+0x2ac>)
 801c628:	f893 00ff 	ldrb.w	r0, [r3, #255]	@ 0xff
 801c62c:	43c0      	mvns	r0, r0
 801c62e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
            break;
 801c632:	4770      	bx	lr
    switch(id) {
 801c634:	2000      	movs	r0, #0
 801c636:	4770      	bx	lr
            value = settings.spindle.flags.pwm_disable ? 0 : (0b001 |
 801c638:	4a64      	ldr	r2, [pc, #400]	@ (801c7cc <get_int+0x2ac>)
 801c63a:	f892 30e7 	ldrb.w	r3, [r2, #231]	@ 0xe7
 801c63e:	f992 20e7 	ldrsb.w	r2, [r2, #231]	@ 0xe7
 801c642:	2a00      	cmp	r2, #0
 801c644:	f2c0 80bd 	blt.w	801c7c2 <get_int+0x2a2>
                                                              (settings.spindle.flags.enable_rpm_controlled ? 0b010 : 0) |
 801c648:	005b      	lsls	r3, r3, #1
 801c64a:	f003 0002 	and.w	r0, r3, #2
            value = settings.spindle.flags.pwm_disable ? 0 : (0b001 |
 801c64e:	f040 0001 	orr.w	r0, r0, #1
                                                               (settings.spindle.flags.laser_mode_disable ? 0b100 : 0));
 801c652:	f003 0304 	and.w	r3, r3, #4
                                                              (settings.spindle.flags.enable_rpm_controlled ? 0b010 : 0) |
 801c656:	4318      	orrs	r0, r3
 801c658:	4770      	bx	lr
            value = settings.mode;
 801c65a:	4b5c      	ldr	r3, [pc, #368]	@ (801c7cc <get_int+0x2ac>)
 801c65c:	7e18      	ldrb	r0, [r3, #24]
            break;
 801c65e:	4770      	bx	lr
            value = settings.probe.invert_probe_pin;
 801c660:	4b5a      	ldr	r3, [pc, #360]	@ (801c7cc <get_int+0x2ac>)
 801c662:	f893 0100 	ldrb.w	r0, [r3, #256]	@ 0x100
 801c666:	f000 0001 	and.w	r0, r0, #1
            break;
 801c66a:	4770      	bx	lr
            value = settings.steppers.ganged_dir_invert.mask;
 801c66c:	4b57      	ldr	r3, [pc, #348]	@ (801c7cc <get_int+0x2ac>)
 801c66e:	f893 00ea 	ldrb.w	r0, [r3, #234]	@ 0xea
            break;
 801c672:	4770      	bx	lr
            value = settings.status_report.mask;
 801c674:	4b55      	ldr	r3, [pc, #340]	@ (801c7cc <get_int+0x2ac>)
 801c676:	f8b3 00fc 	ldrh.w	r0, [r3, #252]	@ 0xfc
            break;
 801c67a:	4770      	bx	lr
            value = settings.flags.report_inches;
 801c67c:	4b53      	ldr	r3, [pc, #332]	@ (801c7cc <get_int+0x2ac>)
 801c67e:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801c682:	f000 0001 	and.w	r0, r0, #1
            break;
 801c686:	4770      	bx	lr
            value = settings.control_invert.mask & (hal.signals_cap.mask & ~limits_override.mask);
 801c688:	4b50      	ldr	r3, [pc, #320]	@ (801c7cc <get_int+0x2ac>)
 801c68a:	f8b3 006c 	ldrh.w	r0, [r3, #108]	@ 0x6c
 801c68e:	4b50      	ldr	r3, [pc, #320]	@ (801c7d0 <get_int+0x2b0>)
 801c690:	f8b3 31dc 	ldrh.w	r3, [r3, #476]	@ 0x1dc
 801c694:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801c698:	4018      	ands	r0, r3
            break;
 801c69a:	4770      	bx	lr
            value = settings.spindle.invert.mask;
 801c69c:	4b4b      	ldr	r3, [pc, #300]	@ (801c7cc <get_int+0x2ac>)
 801c69e:	f893 00e6 	ldrb.w	r0, [r3, #230]	@ 0xe6
            break;
 801c6a2:	4770      	bx	lr
            value = settings.control_disable_pullup.mask;
 801c6a4:	4b49      	ldr	r3, [pc, #292]	@ (801c7cc <get_int+0x2ac>)
 801c6a6:	f8b3 006e 	ldrh.w	r0, [r3, #110]	@ 0x6e
            break;
 801c6aa:	4770      	bx	lr
            value = settings.probe.disable_probe_pullup;
 801c6ac:	4b47      	ldr	r3, [pc, #284]	@ (801c7cc <get_int+0x2ac>)
 801c6ae:	f893 0100 	ldrb.w	r0, [r3, #256]	@ 0x100
 801c6b2:	f3c0 0040 	ubfx	r0, r0, #1, #1
            break;
 801c6b6:	4770      	bx	lr
            value = settings.limits.flags.soft_enabled;
 801c6b8:	4b44      	ldr	r3, [pc, #272]	@ (801c7cc <get_int+0x2ac>)
 801c6ba:	f893 0124 	ldrb.w	r0, [r3, #292]	@ 0x124
 801c6be:	f3c0 0040 	ubfx	r0, r0, #1, #1
            break;
 801c6c2:	4770      	bx	lr
            value = ((settings.limits.flags.hard_enabled & bit(0)) ? bit(0) |
 801c6c4:	4b41      	ldr	r3, [pc, #260]	@ (801c7cc <get_int+0x2ac>)
 801c6c6:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
                      (settings.limits.flags.hard_disabled_rotary ? bit(2) : 0) : 0);
 801c6ca:	f013 0f01 	tst.w	r3, #1
 801c6ce:	d07a      	beq.n	801c7c6 <get_int+0x2a6>
                     (settings.limits.flags.check_at_init ? bit(1) : 0) |
 801c6d0:	0858      	lsrs	r0, r3, #1
                      (settings.limits.flags.hard_disabled_rotary ? bit(2) : 0) : 0);
 801c6d2:	08db      	lsrs	r3, r3, #3
 801c6d4:	f000 0002 	and.w	r0, r0, #2
 801c6d8:	f003 0304 	and.w	r3, r3, #4
 801c6dc:	4318      	orrs	r0, r3
 801c6de:	f040 0001 	orr.w	r0, r0, #1
 801c6e2:	4770      	bx	lr
            value = settings.limits.flags.jog_soft_limited;
 801c6e4:	4b39      	ldr	r3, [pc, #228]	@ (801c7cc <get_int+0x2ac>)
 801c6e6:	f893 0124 	ldrb.w	r0, [r3, #292]	@ 0x124
 801c6ea:	f3c0 00c0 	ubfx	r0, r0, #3, #1
            break;
 801c6ee:	4770      	bx	lr
            homing.value = settings.homing.flags.value & 0b1111;
 801c6f0:	4a36      	ldr	r2, [pc, #216]	@ (801c7cc <get_int+0x2ac>)
 801c6f2:	f892 3114 	ldrb.w	r3, [r2, #276]	@ 0x114
 801c6f6:	f003 000f 	and.w	r0, r3, #15
            homing.two_switches = settings.limits.flags.two_switches;
 801c6fa:	f892 2124 	ldrb.w	r2, [r2, #292]	@ 0x124
 801c6fe:	f3c2 1200 	ubfx	r2, r2, #4, #1
 801c702:	f362 1004 	bfi	r0, r2, #4, #1
            homing.manual = settings.homing.flags.manual;
 801c706:	f3c3 1200 	ubfx	r2, r3, #4, #1
 801c70a:	f362 1045 	bfi	r0, r2, #5, #1
            homing.override_locks = settings.homing.flags.override_locks;
 801c70e:	f3c3 1240 	ubfx	r2, r3, #5, #1
 801c712:	f362 1086 	bfi	r0, r2, #6, #1
            homing.keep_on_reset = settings.homing.flags.keep_on_reset;
 801c716:	f3c3 1280 	ubfx	r2, r3, #6, #1
 801c71a:	f362 10c7 	bfi	r0, r2, #7, #1
            homing.use_limit_switches = settings.homing.flags.use_limit_switches;
 801c71e:	09db      	lsrs	r3, r3, #7
 801c720:	f363 2008 	bfi	r0, r3, #8, #1
            value = homing.value;
 801c724:	b280      	uxth	r0, r0
            break;
 801c726:	4770      	bx	lr
            value = settings.steppers.deenergize.mask;
 801c728:	4b28      	ldr	r3, [pc, #160]	@ (801c7cc <get_int+0x2ac>)
 801c72a:	f893 00ec 	ldrb.w	r0, [r3, #236]	@ 0xec
            break;
 801c72e:	4770      	bx	lr
            value = settings.flags.legacy_rt_commands;
 801c730:	4b26      	ldr	r3, [pc, #152]	@ (801c7cc <get_int+0x2ac>)
 801c732:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801c736:	f3c0 1080 	ubfx	r0, r0, #6, #1
            break;
 801c73a:	4770      	bx	lr
            value = settings.parking.flags.value;
 801c73c:	4b23      	ldr	r3, [pc, #140]	@ (801c7cc <get_int+0x2ac>)
 801c73e:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
            break;
 801c742:	4770      	bx	lr
            value = settings.homing.cycle[id - Setting_HomingCycle_1].mask;
 801c744:	382c      	subs	r0, #44	@ 0x2c
 801c746:	4b21      	ldr	r3, [pc, #132]	@ (801c7cc <get_int+0x2ac>)
 801c748:	4403      	add	r3, r0
 801c74a:	f893 0115 	ldrb.w	r0, [r3, #277]	@ 0x115
            break;
 801c74e:	4770      	bx	lr
            value = settings.flags.restore_overrides;
 801c750:	4b1e      	ldr	r3, [pc, #120]	@ (801c7cc <get_int+0x2ac>)
 801c752:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801c756:	f3c0 0040 	ubfx	r0, r0, #1, #1
            break;
 801c75a:	4770      	bx	lr
            value = settings.flags.sleep_enable;
 801c75c:	4b1b      	ldr	r3, [pc, #108]	@ (801c7cc <get_int+0x2ac>)
 801c75e:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801c762:	f3c0 00c0 	ubfx	r0, r0, #3, #1
            break;
 801c766:	4770      	bx	lr
            value = (settings.flags.disable_laser_during_hold ? bit(0) : 0) | (settings.flags.restore_after_feed_hold ? bit(1) : 0);
 801c768:	4b18      	ldr	r3, [pc, #96]	@ (801c7cc <get_int+0x2ac>)
 801c76a:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801c76e:	0983      	lsrs	r3, r0, #6
 801c770:	f3c0 1000 	ubfx	r0, r0, #4, #1
 801c774:	f003 0302 	and.w	r3, r3, #2
 801c778:	4318      	orrs	r0, r3
            break;
 801c77a:	4770      	bx	lr
            value = settings.flags.force_initialization_alarm;
 801c77c:	4b13      	ldr	r3, [pc, #76]	@ (801c7cc <get_int+0x2ac>)
 801c77e:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801c782:	f3c0 1040 	ubfx	r0, r0, #5, #1
            break;
 801c786:	4770      	bx	lr
            value = settings.probe.allow_feed_override;
 801c788:	4b10      	ldr	r3, [pc, #64]	@ (801c7cc <get_int+0x2ac>)
 801c78a:	f893 0100 	ldrb.w	r0, [r3, #256]	@ 0x100
 801c78e:	f3c0 1000 	ubfx	r0, r0, #4, #1
            break;
 801c792:	4770      	bx	lr
            value = settings.tool_change.mode;
 801c794:	4b0d      	ldr	r3, [pc, #52]	@ (801c7cc <get_int+0x2ac>)
 801c796:	f893 002c 	ldrb.w	r0, [r3, #44]	@ 0x2c
            break;
 801c79a:	4770      	bx	lr
            value = settings.flags.g92_is_volatile;
 801c79c:	4b0b      	ldr	r3, [pc, #44]	@ (801c7cc <get_int+0x2ac>)
 801c79e:	f893 00ff 	ldrb.w	r0, [r3, #255]	@ 0xff
 801c7a2:	f3c0 0040 	ubfx	r0, r0, #1, #1
            break;
 801c7a6:	4770      	bx	lr
            value = settings.report_interval;
 801c7a8:	4b08      	ldr	r3, [pc, #32]	@ (801c7cc <get_int+0x2ac>)
 801c7aa:	8a98      	ldrh	r0, [r3, #20]
            break;
 801c7ac:	4770      	bx	lr
            value = settings.offset_lock.mask & 0b111;
 801c7ae:	4b07      	ldr	r3, [pc, #28]	@ (801c7cc <get_int+0x2ac>)
 801c7b0:	f893 0102 	ldrb.w	r0, [r3, #258]	@ 0x102
 801c7b4:	f000 0007 	and.w	r0, r0, #7
            break;
 801c7b8:	4770      	bx	lr
    switch(id) {
 801c7ba:	2000      	movs	r0, #0
 801c7bc:	4770      	bx	lr
 801c7be:	2000      	movs	r0, #0
 801c7c0:	4770      	bx	lr
            value = settings.spindle.flags.pwm_disable ? 0 : (0b001 |
 801c7c2:	2000      	movs	r0, #0
 801c7c4:	4770      	bx	lr
                      (settings.limits.flags.hard_disabled_rotary ? bit(2) : 0) : 0);
 801c7c6:	2000      	movs	r0, #0
        default:
            break;
    }

    return value;
}
 801c7c8:	4770      	bx	lr
 801c7ca:	bf00      	nop
 801c7cc:	200024a8 	.word	0x200024a8
 801c7d0:	20001a90 	.word	0x20001a90

0801c7d4 <settings_write_global>:
}


// Write global settings to persistent storage
void settings_write_global (void)
{
 801c7d4:	b510      	push	{r4, lr}
    if(override_backup.valid)
 801c7d6:	4b0d      	ldr	r3, [pc, #52]	@ (801c80c <settings_write_global+0x38>)
 801c7d8:	781b      	ldrb	r3, [r3, #0]
 801c7da:	b9a3      	cbnz	r3, 801c806 <settings_write_global+0x32>
        restore_override_backup();

    settings.flags.compatibility_level = COMPATIBILITY_LEVEL;
 801c7dc:	4b0c      	ldr	r3, [pc, #48]	@ (801c810 <settings_write_global+0x3c>)
 801c7de:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 801c7e2:	f36f 0285 	bfc	r2, #2, #4
 801c7e6:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    if(hal.nvs.type != NVS_None)
 801c7ea:	4b0a      	ldr	r3, [pc, #40]	@ (801c814 <settings_write_global+0x40>)
 801c7ec:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801c7f0:	b143      	cbz	r3, 801c804 <settings_write_global+0x30>
        hal.nvs.memcpy_to_nvs(NVS_ADDR_GLOBAL, (uint8_t *)&settings, sizeof(settings_t), true);
 801c7f2:	4b08      	ldr	r3, [pc, #32]	@ (801c814 <settings_write_global+0x40>)
 801c7f4:	f8d3 4190 	ldr.w	r4, [r3, #400]	@ 0x190
 801c7f8:	2301      	movs	r3, #1
 801c7fa:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801c7fe:	4904      	ldr	r1, [pc, #16]	@ (801c810 <settings_write_global+0x3c>)
 801c800:	4618      	mov	r0, r3
 801c802:	47a0      	blx	r4
}
 801c804:	bd10      	pop	{r4, pc}
        restore_override_backup();
 801c806:	f7ff fc01 	bl	801c00c <restore_override_backup>
 801c80a:	e7e7      	b.n	801c7dc <settings_write_global+0x8>
 801c80c:	20002430 	.word	0x20002430
 801c810:	200024a8 	.word	0x200024a8
 801c814:	20001a90 	.word	0x20001a90

0801c818 <is_available>:

    nvs_buffer_sync_physical();
}

inline static bool is_available (const setting_detail_t *setting)
{
 801c818:	b508      	push	{r3, lr}
    return setting->is_available == NULL || setting->is_available(setting);
 801c81a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801c81c:	b113      	cbz	r3, 801c824 <is_available+0xc>
 801c81e:	4798      	blx	r3
 801c820:	b910      	cbnz	r0, 801c828 <is_available+0x10>
}
 801c822:	bd08      	pop	{r3, pc}
    return setting->is_available == NULL || setting->is_available(setting);
 801c824:	2001      	movs	r0, #1
 801c826:	e7fc      	b.n	801c822 <is_available+0xa>
 801c828:	2001      	movs	r0, #1
 801c82a:	e7fa      	b.n	801c822 <is_available+0xa>

0801c82c <remove_element>:
    return setting->datatype == Format_Integer || setting->datatype == Format_Int8 || setting->datatype == Format_Int16;
}

static char *remove_element (char *s, uint_fast8_t entry)
{
    while(entry && *s) {
 801c82c:	e000      	b.n	801c830 <remove_element+0x4>
        if(*s == ',')
            entry--;
        s++;
 801c82e:	3001      	adds	r0, #1
    while(entry && *s) {
 801c830:	b129      	cbz	r1, 801c83e <remove_element+0x12>
 801c832:	7803      	ldrb	r3, [r0, #0]
 801c834:	b11b      	cbz	r3, 801c83e <remove_element+0x12>
        if(*s == ',')
 801c836:	2b2c      	cmp	r3, #44	@ 0x2c
 801c838:	d1f9      	bne.n	801c82e <remove_element+0x2>
            entry--;
 801c83a:	3901      	subs	r1, #1
 801c83c:	e7f7      	b.n	801c82e <remove_element+0x2>
    }

    if(entry == 0) {
 801c83e:	b9b9      	cbnz	r1, 801c870 <remove_element+0x44>
        *s++ = 'N';
 801c840:	234e      	movs	r3, #78	@ 0x4e
 801c842:	7003      	strb	r3, [r0, #0]
        *s++ = '/';
 801c844:	232f      	movs	r3, #47	@ 0x2f
 801c846:	7043      	strb	r3, [r0, #1]
        *s++ = 'A';
 801c848:	1cc3      	adds	r3, r0, #3
 801c84a:	2241      	movs	r2, #65	@ 0x41
 801c84c:	7082      	strb	r2, [r0, #2]
        char *s2 = s;
 801c84e:	461a      	mov	r2, r3
        while(*s2 && *s2 != ',')
 801c850:	e000      	b.n	801c854 <remove_element+0x28>
            s2++;
 801c852:	3201      	adds	r2, #1
        while(*s2 && *s2 != ',')
 801c854:	7811      	ldrb	r1, [r2, #0]
 801c856:	b129      	cbz	r1, 801c864 <remove_element+0x38>
 801c858:	292c      	cmp	r1, #44	@ 0x2c
 801c85a:	d1fa      	bne.n	801c852 <remove_element+0x26>
 801c85c:	e002      	b.n	801c864 <remove_element+0x38>
        while(*s2)
            *s++ = *s2++;
 801c85e:	3201      	adds	r2, #1
 801c860:	f803 1b01 	strb.w	r1, [r3], #1
        while(*s2)
 801c864:	7811      	ldrb	r1, [r2, #0]
 801c866:	2900      	cmp	r1, #0
 801c868:	d1f9      	bne.n	801c85e <remove_element+0x32>
        *s = '\0';
 801c86a:	2200      	movs	r2, #0
 801c86c:	701a      	strb	r2, [r3, #0]
 801c86e:	4618      	mov	r0, r3
    }

    return s;
}
 801c870:	4770      	bx	lr
	...

0801c874 <set_encoder_spindle>:
{
 801c874:	b510      	push	{r4, lr}
 801c876:	460c      	mov	r4, r1
    if(spindle_get_count() < 2)
 801c878:	f001 ff30 	bl	801e6dc <spindle_get_count>
 801c87c:	2801      	cmp	r0, #1
 801c87e:	d90c      	bls.n	801c89a <set_encoder_spindle+0x26>
    else if(int_value >= spindle_get_count())
 801c880:	f001 ff2c 	bl	801e6dc <spindle_get_count>
 801c884:	42a0      	cmp	r0, r4
 801c886:	d90a      	bls.n	801c89e <set_encoder_spindle+0x2a>
    settings.offset_lock.encoder_spindle = int_value;
 801c888:	4b06      	ldr	r3, [pc, #24]	@ (801c8a4 <set_encoder_spindle+0x30>)
 801c88a:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 801c88e:	f364 02c7 	bfi	r2, r4, #3, #5
 801c892:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
    return Status_OK;
 801c896:	2000      	movs	r0, #0
}
 801c898:	bd10      	pop	{r4, pc}
        return Status_SettingDisabled;
 801c89a:	2035      	movs	r0, #53	@ 0x35
 801c89c:	e7fc      	b.n	801c898 <set_encoder_spindle+0x24>
        return Status_SettingValueOutOfRange;
 801c89e:	2034      	movs	r0, #52	@ 0x34
 801c8a0:	e7fa      	b.n	801c898 <set_encoder_spindle+0x24>
 801c8a2:	bf00      	nop
 801c8a4:	200024a8 	.word	0x200024a8

0801c8a8 <set_spindle_type>:
{
 801c8a8:	b510      	push	{r4, lr}
 801c8aa:	460c      	mov	r4, r1
    if(spindle_get_count() < 2)
 801c8ac:	f001 ff16 	bl	801e6dc <spindle_get_count>
 801c8b0:	2801      	cmp	r0, #1
 801c8b2:	d910      	bls.n	801c8d6 <set_spindle_type+0x2e>
    else if(int_value >= spindle_get_count())
 801c8b4:	f001 ff12 	bl	801e6dc <spindle_get_count>
 801c8b8:	42a0      	cmp	r0, r4
 801c8ba:	d90e      	bls.n	801c8da <set_spindle_type+0x32>
    settings.spindle.flags.type = int_value;
 801c8bc:	f004 001f 	and.w	r0, r4, #31
 801c8c0:	4b07      	ldr	r3, [pc, #28]	@ (801c8e0 <set_spindle_type+0x38>)
 801c8c2:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801c8c6:	f360 0286 	bfi	r2, r0, #2, #5
 801c8ca:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    spindle_select(settings.spindle.flags.type);
 801c8ce:	f001 fee5 	bl	801e69c <spindle_select>
    return Status_OK;
 801c8d2:	2000      	movs	r0, #0
}
 801c8d4:	bd10      	pop	{r4, pc}
        return Status_SettingDisabled;
 801c8d6:	2035      	movs	r0, #53	@ 0x35
 801c8d8:	e7fc      	b.n	801c8d4 <set_spindle_type+0x2c>
        return Status_SettingValueOutOfRange;
 801c8da:	2034      	movs	r0, #52	@ 0x34
 801c8dc:	e7fa      	b.n	801c8d4 <set_spindle_type+0x2c>
 801c8de:	bf00      	nop
 801c8e0:	200024a8 	.word	0x200024a8

0801c8e4 <set_tool_change_mode>:
{
 801c8e4:	b510      	push	{r4, lr}
    if(!hal.driver_cap.atc && hal.stream.suspend_read && int_value <= ToolChange_Ignore) {
 801c8e6:	4b0c      	ldr	r3, [pc, #48]	@ (801c918 <set_tool_change_mode+0x34>)
 801c8e8:	f893 01da 	ldrb.w	r0, [r3, #474]	@ 0x1da
 801c8ec:	f010 0402 	ands.w	r4, r0, #2
 801c8f0:	d10b      	bne.n	801c90a <set_tool_change_mode+0x26>
 801c8f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801c8f6:	b153      	cbz	r3, 801c90e <set_tool_change_mode+0x2a>
 801c8f8:	2904      	cmp	r1, #4
 801c8fa:	d80a      	bhi.n	801c912 <set_tool_change_mode+0x2e>
        settings.tool_change.mode = (toolchange_mode_t)int_value;
 801c8fc:	4b07      	ldr	r3, [pc, #28]	@ (801c91c <set_tool_change_mode+0x38>)
 801c8fe:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
        tc_init();
 801c902:	f005 ffd1 	bl	80228a8 <tc_init>
}
 801c906:	4620      	mov	r0, r4
 801c908:	bd10      	pop	{r4, pc}
        return Status_InvalidStatement;
 801c90a:	2403      	movs	r4, #3
 801c90c:	e7fb      	b.n	801c906 <set_tool_change_mode+0x22>
 801c90e:	2403      	movs	r4, #3
 801c910:	e7f9      	b.n	801c906 <set_tool_change_mode+0x22>
 801c912:	2403      	movs	r4, #3
 801c914:	e7f7      	b.n	801c906 <set_tool_change_mode+0x22>
 801c916:	bf00      	nop
 801c918:	20001a90 	.word	0x20001a90
 801c91c:	200024a8 	.word	0x200024a8

0801c920 <set_homing_cycle>:
{
 801c920:	b508      	push	{r3, lr}
    settings.homing.cycle[id - Setting_HomingCycle_1].mask = int_value;
 801c922:	382c      	subs	r0, #44	@ 0x2c
 801c924:	4b03      	ldr	r3, [pc, #12]	@ (801c934 <set_homing_cycle+0x14>)
 801c926:	4403      	add	r3, r0
 801c928:	f883 1115 	strb.w	r1, [r3, #277]	@ 0x115
    limits_set_homing_axes();
 801c92c:	f7f7 f8dc 	bl	8013ae8 <limits_set_homing_axes>
}
 801c930:	2000      	movs	r0, #0
 801c932:	bd08      	pop	{r3, pc}
 801c934:	200024a8 	.word	0x200024a8

0801c938 <set_mode>:
{
 801c938:	b510      	push	{r4, lr}
    switch((machine_mode_t)int_value) {
 801c93a:	b2cc      	uxtb	r4, r1
 801c93c:	2c01      	cmp	r4, #1
 801c93e:	d00e      	beq.n	801c95e <set_mode+0x26>
 801c940:	2c02      	cmp	r4, #2
 801c942:	d005      	beq.n	801c950 <set_mode+0x18>
 801c944:	b10c      	cbz	r4, 801c94a <set_mode+0x12>
 801c946:	2003      	movs	r0, #3
 801c948:	e008      	b.n	801c95c <set_mode+0x24>
           gc_state.modal.diameter_mode = false;
 801c94a:	4b0b      	ldr	r3, [pc, #44]	@ (801c978 <set_mode+0x40>)
 801c94c:	2200      	movs	r2, #0
 801c94e:	715a      	strb	r2, [r3, #5]
    machine_mode_changed = true;
 801c950:	4b0a      	ldr	r3, [pc, #40]	@ (801c97c <set_mode+0x44>)
 801c952:	2201      	movs	r2, #1
 801c954:	701a      	strb	r2, [r3, #0]
    settings.mode = (machine_mode_t)int_value;
 801c956:	4b0a      	ldr	r3, [pc, #40]	@ (801c980 <set_mode+0x48>)
 801c958:	761c      	strb	r4, [r3, #24]
    return Status_OK;
 801c95a:	2000      	movs	r0, #0
}
 801c95c:	bd10      	pop	{r4, pc}
            if(!spindle_get_caps(false).laser)
 801c95e:	2000      	movs	r0, #0
 801c960:	f001 fdce 	bl	801e500 <spindle_get_caps>
 801c964:	f010 0f08 	tst.w	r0, #8
 801c968:	d003      	beq.n	801c972 <set_mode+0x3a>
            gc_state.modal.diameter_mode = false;
 801c96a:	4b03      	ldr	r3, [pc, #12]	@ (801c978 <set_mode+0x40>)
 801c96c:	2200      	movs	r2, #0
 801c96e:	715a      	strb	r2, [r3, #5]
            break;
 801c970:	e7ee      	b.n	801c950 <set_mode+0x18>
                return Status_SettingDisabledLaser;
 801c972:	2011      	movs	r0, #17
 801c974:	e7f2      	b.n	801c95c <set_mode+0x24>
 801c976:	bf00      	nop
 801c978:	200017c8 	.word	0x200017c8
 801c97c:	200024a4 	.word	0x200024a4
 801c980:	200024a8 	.word	0x200024a8

0801c984 <set_spindle_invert>:
{
 801c984:	b508      	push	{r3, lr}
    settings.spindle.invert.mask = int_value;
 801c986:	b2c9      	uxtb	r1, r1
 801c988:	4b0b      	ldr	r3, [pc, #44]	@ (801c9b8 <set_spindle_invert+0x34>)
 801c98a:	f883 10e6 	strb.w	r1, [r3, #230]	@ 0xe6
    if(settings.spindle.invert.pwm && !spindle_get_caps(false).pwm_invert) {
 801c98e:	f011 0004 	ands.w	r0, r1, #4
 801c992:	d100      	bne.n	801c996 <set_spindle_invert+0x12>
}
 801c994:	bd08      	pop	{r3, pc}
    if(settings.spindle.invert.pwm && !spindle_get_caps(false).pwm_invert) {
 801c996:	2000      	movs	r0, #0
 801c998:	f001 fdb2 	bl	801e500 <spindle_get_caps>
 801c99c:	f010 0f10 	tst.w	r0, #16
 801c9a0:	d001      	beq.n	801c9a6 <set_spindle_invert+0x22>
    return Status_OK;
 801c9a2:	2000      	movs	r0, #0
 801c9a4:	e7f6      	b.n	801c994 <set_spindle_invert+0x10>
        settings.spindle.invert.pwm = Off;
 801c9a6:	4b04      	ldr	r3, [pc, #16]	@ (801c9b8 <set_spindle_invert+0x34>)
 801c9a8:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 801c9ac:	f36f 0282 	bfc	r2, #2, #1
 801c9b0:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        return Status_SettingDisabled;
 801c9b4:	2035      	movs	r0, #53	@ 0x35
 801c9b6:	e7ed      	b.n	801c994 <set_spindle_invert+0x10>
 801c9b8:	200024a8 	.word	0x200024a8

0801c9bc <is_setting_available>:
    if(setting) switch(normalize_id(setting->id)) {
 801c9bc:	2800      	cmp	r0, #0
 801c9be:	f000 81b4 	beq.w	801cd2a <is_setting_available+0x36e>
{
 801c9c2:	b508      	push	{r3, lr}
    if(setting) switch(normalize_id(setting->id)) {
 801c9c4:	8800      	ldrh	r0, [r0, #0]
 801c9c6:	f7ff fd55 	bl	801c474 <normalize_id>
 801c9ca:	f5b0 7fc6 	cmp.w	r0, #396	@ 0x18c
 801c9ce:	f080 809e 	bcs.w	801cb0e <is_setting_available+0x152>
 801c9d2:	f5b0 7faa 	cmp.w	r0, #340	@ 0x154
 801c9d6:	d247      	bcs.n	801ca68 <is_setting_available+0xac>
 801c9d8:	2841      	cmp	r0, #65	@ 0x41
 801c9da:	f200 8086 	bhi.w	801caea <is_setting_available+0x12e>
 801c9de:	2806      	cmp	r0, #6
 801c9e0:	d340      	bcc.n	801ca64 <is_setting_available+0xa8>
 801c9e2:	3806      	subs	r0, #6
 801c9e4:	283b      	cmp	r0, #59	@ 0x3b
 801c9e6:	d87e      	bhi.n	801cae6 <is_setting_available+0x12a>
 801c9e8:	e8df f010 	tbh	[pc, r0, lsl #1]
 801c9ec:	007d00e8 	.word	0x007d00e8
 801c9f0:	00ef00da 	.word	0x00ef00da
 801c9f4:	007d007d 	.word	0x007d007d
 801c9f8:	007d007d 	.word	0x007d007d
 801c9fc:	007d007d 	.word	0x007d007d
 801ca00:	007d0101 	.word	0x007d0101
 801ca04:	00e8007d 	.word	0x00e8007d
 801ca08:	007d007d 	.word	0x007d007d
 801ca0c:	007d007d 	.word	0x007d007d
 801ca10:	007d007d 	.word	0x007d007d
 801ca14:	007d007d 	.word	0x007d007d
 801ca18:	007d007d 	.word	0x007d007d
 801ca1c:	01190119 	.word	0x01190119
 801ca20:	0107007d 	.word	0x0107007d
 801ca24:	01070107 	.word	0x01070107
 801ca28:	007d0107 	.word	0x007d0107
 801ca2c:	007d0114 	.word	0x007d0114
 801ca30:	0123007d 	.word	0x0123007d
 801ca34:	007d0123 	.word	0x007d0123
 801ca38:	007d007d 	.word	0x007d007d
 801ca3c:	007d007d 	.word	0x007d007d
 801ca40:	007d007d 	.word	0x007d007d
 801ca44:	007d007d 	.word	0x007d007d
 801ca48:	007d007d 	.word	0x007d007d
 801ca4c:	007d007d 	.word	0x007d007d
 801ca50:	01230123 	.word	0x01230123
 801ca54:	01230123 	.word	0x01230123
 801ca58:	01230123 	.word	0x01230123
 801ca5c:	007d01a3 	.word	0x007d01a3
 801ca60:	00e8007d 	.word	0x00e8007d
 801ca64:	2000      	movs	r0, #0
 801ca66:	e163      	b.n	801cd30 <is_setting_available+0x374>
 801ca68:	f5a0 70aa 	sub.w	r0, r0, #340	@ 0x154
 801ca6c:	2837      	cmp	r0, #55	@ 0x37
 801ca6e:	f200 815e 	bhi.w	801cd2e <is_setting_available+0x372>
 801ca72:	e8df f010 	tbh	[pc, r0, lsl #1]
 801ca76:	010b      	.short	0x010b
 801ca78:	015c015c 	.word	0x015c015c
 801ca7c:	015c015c 	.word	0x015c015c
 801ca80:	015c015c 	.word	0x015c015c
 801ca84:	003c003c 	.word	0x003c003c
 801ca88:	015c003c 	.word	0x015c003c
 801ca8c:	015c015c 	.word	0x015c015c
 801ca90:	015c015c 	.word	0x015c015c
 801ca94:	015c015c 	.word	0x015c015c
 801ca98:	015c015c 	.word	0x015c015c
 801ca9c:	015c015c 	.word	0x015c015c
 801caa0:	015c015c 	.word	0x015c015c
 801caa4:	015c015c 	.word	0x015c015c
 801caa8:	015c015c 	.word	0x015c015c
 801caac:	015c015c 	.word	0x015c015c
 801cab0:	015c015c 	.word	0x015c015c
 801cab4:	015c015c 	.word	0x015c015c
 801cab8:	015c015c 	.word	0x015c015c
 801cabc:	015c015c 	.word	0x015c015c
 801cac0:	015c015c 	.word	0x015c015c
 801cac4:	015c015c 	.word	0x015c015c
 801cac8:	015c015c 	.word	0x015c015c
 801cacc:	015c015c 	.word	0x015c015c
 801cad0:	015c015c 	.word	0x015c015c
 801cad4:	015c015c 	.word	0x015c015c
 801cad8:	015c015c 	.word	0x015c015c
 801cadc:	00e4015c 	.word	0x00e4015c
 801cae0:	011c00fb 	.word	0x011c00fb
 801cae4:	00c8      	.short	0x00c8
 801cae6:	2000      	movs	r0, #0
 801cae8:	e122      	b.n	801cd30 <is_setting_available+0x374>
 801caea:	28aa      	cmp	r0, #170	@ 0xaa
 801caec:	d10d      	bne.n	801cb0a <is_setting_available+0x14e>
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(true).mask != 0;
 801caee:	4b92      	ldr	r3, [pc, #584]	@ (801cd38 <is_setting_available+0x37c>)
 801caf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	f000 8098 	beq.w	801cc2a <is_setting_available+0x26e>
 801cafa:	2001      	movs	r0, #1
 801cafc:	4798      	blx	r3
 801cafe:	b2c0      	uxtb	r0, r0
 801cb00:	2800      	cmp	r0, #0
 801cb02:	f000 8094 	beq.w	801cc2e <is_setting_available+0x272>
 801cb06:	2001      	movs	r0, #1
 801cb08:	e112      	b.n	801cd30 <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801cb0a:	2000      	movs	r0, #0
 801cb0c:	e110      	b.n	801cd30 <is_setting_available+0x374>
 801cb0e:	f240 2307 	movw	r3, #519	@ 0x207
 801cb12:	4298      	cmp	r0, r3
 801cb14:	f000 80e9 	beq.w	801ccea <is_setting_available+0x32e>
 801cb18:	f5b0 7f02 	cmp.w	r0, #520	@ 0x208
 801cb1c:	d317      	bcc.n	801cb4e <is_setting_available+0x192>
 801cb1e:	f240 239f 	movw	r3, #671	@ 0x29f
 801cb22:	4298      	cmp	r0, r3
 801cb24:	f000 80f0 	beq.w	801cd08 <is_setting_available+0x34c>
 801cb28:	f240 23a1 	movw	r3, #673	@ 0x2a1
 801cb2c:	4298      	cmp	r0, r3
 801cb2e:	d128      	bne.n	801cb82 <is_setting_available+0x1c6>
            available = !hal.signals_cap.safety_door_ajar && hal.coolant_cap.mask;
 801cb30:	4b81      	ldr	r3, [pc, #516]	@ (801cd38 <is_setting_available+0x37c>)
 801cb32:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801cb36:	f013 0f08 	tst.w	r3, #8
 801cb3a:	f040 80f2 	bne.w	801cd22 <is_setting_available+0x366>
 801cb3e:	4b7e      	ldr	r3, [pc, #504]	@ (801cd38 <is_setting_available+0x37c>)
 801cb40:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	f040 80ee 	bne.w	801cd26 <is_setting_available+0x36a>
 801cb4a:	2000      	movs	r0, #0
 801cb4c:	e0f0      	b.n	801cd30 <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801cb4e:	f5b0 7ff1 	cmp.w	r0, #482	@ 0x1e2
 801cb52:	f000 80c3 	beq.w	801ccdc <is_setting_available+0x320>
 801cb56:	f5b0 7ff2 	cmp.w	r0, #484	@ 0x1e4
 801cb5a:	d105      	bne.n	801cb68 <is_setting_available+0x1ac>
            available = hal.signals_cap.e_stop;
 801cb5c:	4b76      	ldr	r3, [pc, #472]	@ (801cd38 <is_setting_available+0x37c>)
 801cb5e:	f893 01dc 	ldrb.w	r0, [r3, #476]	@ 0x1dc
 801cb62:	f3c0 1080 	ubfx	r0, r0, #6, #1
            break;
 801cb66:	e0e3      	b.n	801cd30 <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801cb68:	f240 13e1 	movw	r3, #481	@ 0x1e1
 801cb6c:	4298      	cmp	r0, r3
 801cb6e:	d106      	bne.n	801cb7e <is_setting_available+0x1c2>
            available = hal.get_elapsed_ticks != NULL;
 801cb70:	4b71      	ldr	r3, [pc, #452]	@ (801cd38 <is_setting_available+0x37c>)
 801cb72:	f8d3 01a8 	ldr.w	r0, [r3, #424]	@ 0x1a8
 801cb76:	3800      	subs	r0, #0
 801cb78:	bf18      	it	ne
 801cb7a:	2001      	movne	r0, #1
            break;
 801cb7c:	e0d8      	b.n	801cd30 <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801cb7e:	2000      	movs	r0, #0
 801cb80:	e0d6      	b.n	801cd30 <is_setting_available+0x374>
 801cb82:	f240 238a 	movw	r3, #650	@ 0x28a
 801cb86:	4298      	cmp	r0, r3
 801cb88:	d108      	bne.n	801cb9c <is_setting_available+0x1e0>
            available = hal.driver_cap.sd_card || hal.driver_cap.littlefs;
 801cb8a:	4b6b      	ldr	r3, [pc, #428]	@ (801cd38 <is_setting_available+0x37c>)
 801cb8c:	f893 31d9 	ldrb.w	r3, [r3, #473]	@ 0x1d9
 801cb90:	f013 0f06 	tst.w	r3, #6
 801cb94:	bf14      	ite	ne
 801cb96:	2001      	movne	r0, #1
 801cb98:	2000      	moveq	r0, #0
            break;
 801cb9a:	e0c9      	b.n	801cd30 <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801cb9c:	2000      	movs	r0, #0
 801cb9e:	e0c7      	b.n	801cd30 <is_setting_available+0x374>
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(false).mask != 0;
 801cba0:	4b65      	ldr	r3, [pc, #404]	@ (801cd38 <is_setting_available+0x37c>)
 801cba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801cba6:	b12b      	cbz	r3, 801cbb4 <is_setting_available+0x1f8>
 801cba8:	2000      	movs	r0, #0
 801cbaa:	4798      	blx	r3
 801cbac:	b2c0      	uxtb	r0, r0
 801cbae:	b118      	cbz	r0, 801cbb8 <is_setting_available+0x1fc>
 801cbb0:	2001      	movs	r0, #1
 801cbb2:	e0bd      	b.n	801cd30 <is_setting_available+0x374>
 801cbb4:	2000      	movs	r0, #0
 801cbb6:	e0bb      	b.n	801cd30 <is_setting_available+0x374>
 801cbb8:	2000      	movs	r0, #0
            break;
 801cbba:	e0b9      	b.n	801cd30 <is_setting_available+0x374>
            available = hal.probe.get_state != NULL;
 801cbbc:	4b5e      	ldr	r3, [pc, #376]	@ (801cd38 <is_setting_available+0x37c>)
 801cbbe:	f8d3 00fc 	ldr.w	r0, [r3, #252]	@ 0xfc
 801cbc2:	3800      	subs	r0, #0
 801cbc4:	bf18      	it	ne
 801cbc6:	2001      	movne	r0, #1
            break;
 801cbc8:	e0b2      	b.n	801cd30 <is_setting_available+0x374>
            available = hal.driver_cap.pwm_spindle && spindle_get_caps(false).laser;
 801cbca:	4b5b      	ldr	r3, [pc, #364]	@ (801cd38 <is_setting_available+0x37c>)
 801cbcc:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 801cbd0:	f013 0f10 	tst.w	r3, #16
 801cbd4:	d101      	bne.n	801cbda <is_setting_available+0x21e>
 801cbd6:	2000      	movs	r0, #0
 801cbd8:	e0aa      	b.n	801cd30 <is_setting_available+0x374>
 801cbda:	2000      	movs	r0, #0
 801cbdc:	f001 fc90 	bl	801e500 <spindle_get_caps>
 801cbe0:	f010 0f08 	tst.w	r0, #8
 801cbe4:	d001      	beq.n	801cbea <is_setting_available+0x22e>
 801cbe6:	2001      	movs	r0, #1
 801cbe8:	e0a2      	b.n	801cd30 <is_setting_available+0x374>
 801cbea:	2000      	movs	r0, #0
            break;
 801cbec:	e0a0      	b.n	801cd30 <is_setting_available+0x374>
            available = spindle_get_caps(false).gpio_controlled;
 801cbee:	2000      	movs	r0, #0
 801cbf0:	f001 fc86 	bl	801e500 <spindle_get_caps>
 801cbf4:	f3c0 2000 	ubfx	r0, r0, #8, #1
            break;
 801cbf8:	e09a      	b.n	801cd30 <is_setting_available+0x374>
            available = hal.driver_cap.pwm_spindle;
 801cbfa:	4b4f      	ldr	r3, [pc, #316]	@ (801cd38 <is_setting_available+0x37c>)
 801cbfc:	f893 01da 	ldrb.w	r0, [r3, #474]	@ 0x1da
 801cc00:	f3c0 1000 	ubfx	r0, r0, #4, #1
            break;
 801cc04:	e094      	b.n	801cd30 <is_setting_available+0x374>
            available = spindle_get_count() > 1;
 801cc06:	f001 fd69 	bl	801e6dc <spindle_get_count>
 801cc0a:	2801      	cmp	r0, #1
 801cc0c:	bf94      	ite	ls
 801cc0e:	2000      	movls	r0, #0
 801cc10:	2001      	movhi	r0, #1
            break;
 801cc12:	e08d      	b.n	801cd30 <is_setting_available+0x374>
            available = hal.driver_cap.spindle_encoder;
 801cc14:	4b48      	ldr	r3, [pc, #288]	@ (801cd38 <is_setting_available+0x37c>)
 801cc16:	f893 01d8 	ldrb.w	r0, [r3, #472]	@ 0x1d8
 801cc1a:	09c0      	lsrs	r0, r0, #7
            break;
 801cc1c:	e088      	b.n	801cd30 <is_setting_available+0x374>
            available = spindle_get_caps(false).variable;
 801cc1e:	2000      	movs	r0, #0
 801cc20:	f001 fc6e 	bl	801e500 <spindle_get_caps>
 801cc24:	f000 0001 	and.w	r0, r0, #1
            break;
 801cc28:	e082      	b.n	801cd30 <is_setting_available+0x374>
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(true).mask != 0;
 801cc2a:	2000      	movs	r0, #0
 801cc2c:	e080      	b.n	801cd30 <is_setting_available+0x374>
 801cc2e:	2000      	movs	r0, #0
            break;
 801cc30:	e07e      	b.n	801cd30 <is_setting_available+0x374>
            available = hal.signals_cap.safety_door_ajar;
 801cc32:	4b41      	ldr	r3, [pc, #260]	@ (801cd38 <is_setting_available+0x37c>)
 801cc34:	f893 01dc 	ldrb.w	r0, [r3, #476]	@ 0x1dc
 801cc38:	f3c0 00c0 	ubfx	r0, r0, #3, #1
            break;
 801cc3c:	e078      	b.n	801cd30 <is_setting_available+0x374>
            available = hal.signals_cap.safety_door_ajar && spindle_get_count() && !spindle_get_caps(true).at_speed;
 801cc3e:	4b3e      	ldr	r3, [pc, #248]	@ (801cd38 <is_setting_available+0x37c>)
 801cc40:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801cc44:	f013 0f08 	tst.w	r3, #8
 801cc48:	d101      	bne.n	801cc4e <is_setting_available+0x292>
 801cc4a:	2000      	movs	r0, #0
 801cc4c:	e070      	b.n	801cd30 <is_setting_available+0x374>
 801cc4e:	f001 fd45 	bl	801e6dc <spindle_get_count>
 801cc52:	b908      	cbnz	r0, 801cc58 <is_setting_available+0x29c>
 801cc54:	2000      	movs	r0, #0
 801cc56:	e06b      	b.n	801cd30 <is_setting_available+0x374>
 801cc58:	2001      	movs	r0, #1
 801cc5a:	f001 fc51 	bl	801e500 <spindle_get_caps>
 801cc5e:	f010 0f04 	tst.w	r0, #4
 801cc62:	d101      	bne.n	801cc68 <is_setting_available+0x2ac>
 801cc64:	2001      	movs	r0, #1
 801cc66:	e063      	b.n	801cd30 <is_setting_available+0x374>
 801cc68:	2000      	movs	r0, #0
            break;
 801cc6a:	e061      	b.n	801cd30 <is_setting_available+0x374>
            available = hal.signals_cap.safety_door_ajar && hal.coolant_cap.mask;
 801cc6c:	4b32      	ldr	r3, [pc, #200]	@ (801cd38 <is_setting_available+0x37c>)
 801cc6e:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801cc72:	f013 0f08 	tst.w	r3, #8
 801cc76:	d005      	beq.n	801cc84 <is_setting_available+0x2c8>
 801cc78:	4b2f      	ldr	r3, [pc, #188]	@ (801cd38 <is_setting_available+0x37c>)
 801cc7a:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 801cc7e:	b91b      	cbnz	r3, 801cc88 <is_setting_available+0x2cc>
 801cc80:	2000      	movs	r0, #0
 801cc82:	e055      	b.n	801cd30 <is_setting_available+0x374>
 801cc84:	2000      	movs	r0, #0
 801cc86:	e053      	b.n	801cd30 <is_setting_available+0x374>
 801cc88:	2001      	movs	r0, #1
            break;
 801cc8a:	e051      	b.n	801cd30 <is_setting_available+0x374>
            available = spindle_get_caps(true).at_speed || hal.driver_cap.spindle_encoder;
 801cc8c:	2001      	movs	r0, #1
 801cc8e:	f001 fc37 	bl	801e500 <spindle_get_caps>
 801cc92:	f010 0f04 	tst.w	r0, #4
 801cc96:	d108      	bne.n	801ccaa <is_setting_available+0x2ee>
 801cc98:	4b27      	ldr	r3, [pc, #156]	@ (801cd38 <is_setting_available+0x37c>)
 801cc9a:	f993 31d8 	ldrsb.w	r3, [r3, #472]	@ 0x1d8
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	db01      	blt.n	801cca6 <is_setting_available+0x2ea>
 801cca2:	2000      	movs	r0, #0
            break;
 801cca4:	e044      	b.n	801cd30 <is_setting_available+0x374>
            available = spindle_get_caps(true).at_speed || hal.driver_cap.spindle_encoder;
 801cca6:	2001      	movs	r0, #1
 801cca8:	e042      	b.n	801cd30 <is_setting_available+0x374>
 801ccaa:	2001      	movs	r0, #1
 801ccac:	e040      	b.n	801cd30 <is_setting_available+0x374>
            available = !hal.signals_cap.safety_door_ajar && spindle_get_count() && !spindle_get_caps(true).at_speed;
 801ccae:	4b22      	ldr	r3, [pc, #136]	@ (801cd38 <is_setting_available+0x37c>)
 801ccb0:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801ccb4:	f013 0f08 	tst.w	r3, #8
 801ccb8:	d001      	beq.n	801ccbe <is_setting_available+0x302>
 801ccba:	2000      	movs	r0, #0
 801ccbc:	e038      	b.n	801cd30 <is_setting_available+0x374>
 801ccbe:	f001 fd0d 	bl	801e6dc <spindle_get_count>
 801ccc2:	b908      	cbnz	r0, 801ccc8 <is_setting_available+0x30c>
 801ccc4:	2000      	movs	r0, #0
 801ccc6:	e033      	b.n	801cd30 <is_setting_available+0x374>
 801ccc8:	2001      	movs	r0, #1
 801ccca:	f001 fc19 	bl	801e500 <spindle_get_caps>
 801ccce:	f010 0f04 	tst.w	r0, #4
 801ccd2:	d101      	bne.n	801ccd8 <is_setting_available+0x31c>
 801ccd4:	2001      	movs	r0, #1
 801ccd6:	e02b      	b.n	801cd30 <is_setting_available+0x374>
 801ccd8:	2000      	movs	r0, #0
            break;
 801ccda:	e029      	b.n	801cd30 <is_setting_available+0x374>
            available = hal.rtc.set_datetime != NULL;
 801ccdc:	4b16      	ldr	r3, [pc, #88]	@ (801cd38 <is_setting_available+0x37c>)
 801ccde:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
 801cce2:	3800      	subs	r0, #0
 801cce4:	bf18      	it	ne
 801cce6:	2001      	movne	r0, #1
            break;
 801cce8:	e022      	b.n	801cd30 <is_setting_available+0x374>
            available = hal.driver_cap.spindle_encoder && spindle_get_count() > 1;
 801ccea:	4b13      	ldr	r3, [pc, #76]	@ (801cd38 <is_setting_available+0x37c>)
 801ccec:	f993 31d8 	ldrsb.w	r3, [r3, #472]	@ 0x1d8
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	db01      	blt.n	801ccf8 <is_setting_available+0x33c>
 801ccf4:	2000      	movs	r0, #0
 801ccf6:	e01b      	b.n	801cd30 <is_setting_available+0x374>
 801ccf8:	f001 fcf0 	bl	801e6dc <spindle_get_count>
 801ccfc:	2801      	cmp	r0, #1
 801ccfe:	d901      	bls.n	801cd04 <is_setting_available+0x348>
 801cd00:	2001      	movs	r0, #1
 801cd02:	e015      	b.n	801cd30 <is_setting_available+0x374>
 801cd04:	2000      	movs	r0, #0
            break;
 801cd06:	e013      	b.n	801cd30 <is_setting_available+0x374>
            available = hal.homing.get_state != NULL && hal.home_cap.a.mask != 0;
 801cd08:	4b0b      	ldr	r3, [pc, #44]	@ (801cd38 <is_setting_available+0x37c>)
 801cd0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801cd0c:	b12b      	cbz	r3, 801cd1a <is_setting_available+0x35e>
 801cd0e:	4b0a      	ldr	r3, [pc, #40]	@ (801cd38 <is_setting_available+0x37c>)
 801cd10:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 801cd14:	b91b      	cbnz	r3, 801cd1e <is_setting_available+0x362>
 801cd16:	2000      	movs	r0, #0
 801cd18:	e00a      	b.n	801cd30 <is_setting_available+0x374>
 801cd1a:	2000      	movs	r0, #0
 801cd1c:	e008      	b.n	801cd30 <is_setting_available+0x374>
 801cd1e:	2001      	movs	r0, #1
            break;
 801cd20:	e006      	b.n	801cd30 <is_setting_available+0x374>
            available = !hal.signals_cap.safety_door_ajar && hal.coolant_cap.mask;
 801cd22:	2000      	movs	r0, #0
 801cd24:	e004      	b.n	801cd30 <is_setting_available+0x374>
 801cd26:	2001      	movs	r0, #1
            break;
 801cd28:	e002      	b.n	801cd30 <is_setting_available+0x374>
    bool available = false;
 801cd2a:	2000      	movs	r0, #0
}
 801cd2c:	4770      	bx	lr
    if(setting) switch(normalize_id(setting->id)) {
 801cd2e:	2000      	movs	r0, #0
}
 801cd30:	bd08      	pop	{r3, pc}
            available = SLEEP_DURATION > 0.0f;
 801cd32:	2001      	movs	r0, #1
 801cd34:	e7fc      	b.n	801cd30 <is_setting_available+0x374>
 801cd36:	bf00      	nop
 801cd38:	20001a90 	.word	0x20001a90

0801cd3c <set_probe_disable_pullup>:
{
 801cd3c:	b508      	push	{r3, lr}
    if(!hal.probe.configure)
 801cd3e:	4b0a      	ldr	r3, [pc, #40]	@ (801cd68 <set_probe_disable_pullup+0x2c>)
 801cd40:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801cd44:	b16b      	cbz	r3, 801cd62 <set_probe_disable_pullup+0x26>
    settings.probe.disable_probe_pullup = int_value != 0;
 801cd46:	3900      	subs	r1, #0
 801cd48:	bf18      	it	ne
 801cd4a:	2101      	movne	r1, #1
 801cd4c:	4b07      	ldr	r3, [pc, #28]	@ (801cd6c <set_probe_disable_pullup+0x30>)
 801cd4e:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
 801cd52:	f361 0241 	bfi	r2, r1, #1, #1
 801cd56:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
    ioport_setting_changed(id);
 801cd5a:	f7f5 fd2b 	bl	80127b4 <ioport_setting_changed>
    return Status_OK;
 801cd5e:	2000      	movs	r0, #0
}
 801cd60:	bd08      	pop	{r3, pc}
        return Status_SettingDisabled;
 801cd62:	2035      	movs	r0, #53	@ 0x35
 801cd64:	e7fc      	b.n	801cd60 <set_probe_disable_pullup+0x24>
 801cd66:	bf00      	nop
 801cd68:	20001a90 	.word	0x20001a90
 801cd6c:	200024a8 	.word	0x200024a8

0801cd70 <set_control_disable_pullup>:
{
 801cd70:	b508      	push	{r3, lr}
    settings.control_disable_pullup.mask = int_value & (hal.signals_cap.mask & ~limits_override.mask);
 801cd72:	4b06      	ldr	r3, [pc, #24]	@ (801cd8c <set_control_disable_pullup+0x1c>)
 801cd74:	f8b3 31dc 	ldrh.w	r3, [r3, #476]	@ 0x1dc
 801cd78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801cd7c:	400b      	ands	r3, r1
 801cd7e:	4a04      	ldr	r2, [pc, #16]	@ (801cd90 <set_control_disable_pullup+0x20>)
 801cd80:	f8a2 306e 	strh.w	r3, [r2, #110]	@ 0x6e
    ioport_setting_changed(id);
 801cd84:	f7f5 fd16 	bl	80127b4 <ioport_setting_changed>
}
 801cd88:	2000      	movs	r0, #0
 801cd8a:	bd08      	pop	{r3, pc}
 801cd8c:	20001a90 	.word	0x20001a90
 801cd90:	200024a8 	.word	0x200024a8

0801cd94 <set_probe_invert>:
{
 801cd94:	b508      	push	{r3, lr}
    if(!hal.probe.configure)
 801cd96:	4b0d      	ldr	r3, [pc, #52]	@ (801cdcc <set_probe_invert+0x38>)
 801cd98:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801cd9c:	b19b      	cbz	r3, 801cdc6 <set_probe_invert+0x32>
    settings.probe.invert_probe_pin = int_value != 0;
 801cd9e:	3900      	subs	r1, #0
 801cda0:	bf18      	it	ne
 801cda2:	2101      	movne	r1, #1
 801cda4:	4b0a      	ldr	r3, [pc, #40]	@ (801cdd0 <set_probe_invert+0x3c>)
 801cda6:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
 801cdaa:	f361 0200 	bfi	r2, r1, #0, #1
 801cdae:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
    ioport_setting_changed(id);
 801cdb2:	f7f5 fcff 	bl	80127b4 <ioport_setting_changed>
    hal.probe.configure(false, false);
 801cdb6:	4b05      	ldr	r3, [pc, #20]	@ (801cdcc <set_probe_invert+0x38>)
 801cdb8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801cdbc:	2100      	movs	r1, #0
 801cdbe:	4608      	mov	r0, r1
 801cdc0:	4798      	blx	r3
    return Status_OK;
 801cdc2:	2000      	movs	r0, #0
}
 801cdc4:	bd08      	pop	{r3, pc}
        return Status_SettingDisabled;
 801cdc6:	2035      	movs	r0, #53	@ 0x35
 801cdc8:	e7fc      	b.n	801cdc4 <set_probe_invert+0x30>
 801cdca:	bf00      	nop
 801cdcc:	20001a90 	.word	0x20001a90
 801cdd0:	200024a8 	.word	0x200024a8

0801cdd4 <set_control_invert>:
{
 801cdd4:	b508      	push	{r3, lr}
    settings.control_invert.mask = (int_value & hal.signals_cap.mask) | limits_override.mask;
 801cdd6:	4b07      	ldr	r3, [pc, #28]	@ (801cdf4 <set_control_invert+0x20>)
 801cdd8:	f8b3 31dc 	ldrh.w	r3, [r3, #476]	@ 0x1dc
 801cddc:	400b      	ands	r3, r1
 801cdde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801cde2:	4a05      	ldr	r2, [pc, #20]	@ (801cdf8 <set_control_invert+0x24>)
 801cde4:	f8a2 306c 	strh.w	r3, [r2, #108]	@ 0x6c
    ioport_setting_changed(id);
 801cde8:	f7f5 fce4 	bl	80127b4 <ioport_setting_changed>
    system_init_switches();
 801cdec:	f004 fc98 	bl	8021720 <system_init_switches>
}
 801cdf0:	2000      	movs	r0, #0
 801cdf2:	bd08      	pop	{r3, pc}
 801cdf4:	20001a90 	.word	0x20001a90
 801cdf8:	200024a8 	.word	0x200024a8

0801cdfc <set_report_inches>:
{
 801cdfc:	b508      	push	{r3, lr}
    settings.flags.report_inches = int_value != 0;
 801cdfe:	3900      	subs	r1, #0
 801ce00:	bf18      	it	ne
 801ce02:	2101      	movne	r1, #1
 801ce04:	4b06      	ldr	r3, [pc, #24]	@ (801ce20 <set_report_inches+0x24>)
 801ce06:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801ce0a:	f361 0200 	bfi	r2, r1, #0, #1
 801ce0e:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
    report_init();
 801ce12:	f7fc fc65 	bl	80196e0 <report_init>
    system_flag_wco_change(); // Make sure WCO is immediately updated.
 801ce16:	f005 f8e1 	bl	8021fdc <system_flag_wco_change>
}
 801ce1a:	2000      	movs	r0, #0
 801ce1c:	bd08      	pop	{r3, pc}
 801ce1e:	bf00      	nop
 801ce20:	200024a8 	.word	0x200024a8

0801ce24 <strnumentries>:
{
 801ce24:	b538      	push	{r3, r4, r5, lr}
    if(s == NULL || *s == '\0')
 801ce26:	b170      	cbz	r0, 801ce46 <strnumentries+0x22>
 801ce28:	460d      	mov	r5, r1
 801ce2a:	7803      	ldrb	r3, [r0, #0]
 801ce2c:	b16b      	cbz	r3, 801ce4a <strnumentries+0x26>
    uint32_t entries = 1;
 801ce2e:	2401      	movs	r4, #1
 801ce30:	e001      	b.n	801ce36 <strnumentries+0x12>
        p++;
 801ce32:	1c58      	adds	r0, r3, #1
        entries++;
 801ce34:	3401      	adds	r4, #1
    while((p = strchr(p, delimiter))) {
 801ce36:	4629      	mov	r1, r5
 801ce38:	f007 ff90 	bl	8024d5c <strchr>
 801ce3c:	4603      	mov	r3, r0
 801ce3e:	2800      	cmp	r0, #0
 801ce40:	d1f7      	bne.n	801ce32 <strnumentries+0xe>
}
 801ce42:	4620      	mov	r0, r4
 801ce44:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
 801ce46:	2400      	movs	r4, #0
 801ce48:	e7fb      	b.n	801ce42 <strnumentries+0x1e>
 801ce4a:	2400      	movs	r4, #0
 801ce4c:	e7f9      	b.n	801ce42 <strnumentries+0x1e>

0801ce4e <get_decimal_places>:
    char *dp = format == NULL ? NULL : strchr(format, '.');
 801ce4e:	b178      	cbz	r0, 801ce70 <get_decimal_places+0x22>
{
 801ce50:	b538      	push	{r3, r4, r5, lr}
 801ce52:	4604      	mov	r4, r0
    char *dp = format == NULL ? NULL : strchr(format, '.');
 801ce54:	212e      	movs	r1, #46	@ 0x2e
 801ce56:	f007 ff81 	bl	8024d5c <strchr>
    return dp ? strchr(format, '\0') - dp - 1 : 1;
 801ce5a:	4605      	mov	r5, r0
 801ce5c:	b150      	cbz	r0, 801ce74 <get_decimal_places+0x26>
 801ce5e:	4620      	mov	r0, r4
 801ce60:	f7eb f94e 	bl	8008100 <strlen>
 801ce64:	4420      	add	r0, r4
 801ce66:	1b40      	subs	r0, r0, r5
 801ce68:	b2c0      	uxtb	r0, r0
 801ce6a:	3801      	subs	r0, #1
 801ce6c:	b2c0      	uxtb	r0, r0
}
 801ce6e:	bd38      	pop	{r3, r4, r5, pc}
    return dp ? strchr(format, '\0') - dp - 1 : 1;
 801ce70:	2001      	movs	r0, #1
}
 801ce72:	4770      	bx	lr
    return dp ? strchr(format, '\0') - dp - 1 : 1;
 801ce74:	2001      	movs	r0, #1
 801ce76:	e7fa      	b.n	801ce6e <get_decimal_places+0x20>

0801ce78 <validate_uint_value>:
{
 801ce78:	b530      	push	{r4, r5, lr}
 801ce7a:	b083      	sub	sp, #12
 801ce7c:	4604      	mov	r4, r0
 801ce7e:	460d      	mov	r5, r1
    uint_fast8_t set_idx = 0;
 801ce80:	2300      	movs	r3, #0
 801ce82:	9300      	str	r3, [sp, #0]
    if(setting->min_value) {
 801ce84:	6940      	ldr	r0, [r0, #20]
 801ce86:	b168      	cbz	r0, 801cea4 <validate_uint_value+0x2c>
        if((status = read_uint((char *)setting->min_value, &set_idx, &val)) != Status_OK)
 801ce88:	aa01      	add	r2, sp, #4
 801ce8a:	4669      	mov	r1, sp
 801ce8c:	f7f8 fe50 	bl	8015b30 <read_uint>
 801ce90:	b9d8      	cbnz	r0, 801ceca <validate_uint_value+0x52>
        if(!(value >= val || (setting->flags.allow_null && value == 0)))
 801ce92:	9b01      	ldr	r3, [sp, #4]
 801ce94:	42ab      	cmp	r3, r5
 801ce96:	d905      	bls.n	801cea4 <validate_uint_value+0x2c>
 801ce98:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801ce9c:	f013 0f02 	tst.w	r3, #2
 801cea0:	d00e      	beq.n	801cec0 <validate_uint_value+0x48>
 801cea2:	b97d      	cbnz	r5, 801cec4 <validate_uint_value+0x4c>
    if(setting->max_value) {
 801cea4:	69a0      	ldr	r0, [r4, #24]
 801cea6:	b178      	cbz	r0, 801cec8 <validate_uint_value+0x50>
        set_idx = 0;
 801cea8:	2300      	movs	r3, #0
 801ceaa:	9300      	str	r3, [sp, #0]
        if((status = read_uint((char *)setting->max_value, &set_idx, &val)) != Status_OK)
 801ceac:	aa01      	add	r2, sp, #4
 801ceae:	4669      	mov	r1, sp
 801ceb0:	f7f8 fe3e 	bl	8015b30 <read_uint>
 801ceb4:	b958      	cbnz	r0, 801cece <validate_uint_value+0x56>
        if(value > val)
 801ceb6:	9b01      	ldr	r3, [sp, #4]
 801ceb8:	42ab      	cmp	r3, r5
 801ceba:	d206      	bcs.n	801ceca <validate_uint_value+0x52>
            return Status_SettingValueOutOfRange;
 801cebc:	2034      	movs	r0, #52	@ 0x34
 801cebe:	e004      	b.n	801ceca <validate_uint_value+0x52>
            return Status_SettingValueOutOfRange;
 801cec0:	2034      	movs	r0, #52	@ 0x34
 801cec2:	e002      	b.n	801ceca <validate_uint_value+0x52>
 801cec4:	2034      	movs	r0, #52	@ 0x34
 801cec6:	e000      	b.n	801ceca <validate_uint_value+0x52>
    return Status_OK;
 801cec8:	2000      	movs	r0, #0
}
 801ceca:	b003      	add	sp, #12
 801cecc:	bd30      	pop	{r4, r5, pc}
            return Status_BadNumberFormat;
 801cece:	2002      	movs	r0, #2
 801ced0:	e7fb      	b.n	801ceca <validate_uint_value+0x52>

0801ced2 <setting_validate_me_uint>:
{
    return !(type == Setting_NonCore || type == Setting_NonCoreFn);
}

static status_code_t setting_validate_me_uint (const setting_detail_t *setting, char *svalue)
{
 801ced2:	b530      	push	{r4, r5, lr}
 801ced4:	b083      	sub	sp, #12
 801ced6:	4604      	mov	r4, r0
 801ced8:	4608      	mov	r0, r1
    uint_fast8_t idx = 0;
 801ceda:	2300      	movs	r3, #0
 801cedc:	9301      	str	r3, [sp, #4]
    uint32_t value;
    status_code_t status;

    if((status = read_uint(svalue, &idx, &value)) != Status_OK)
 801cede:	466a      	mov	r2, sp
 801cee0:	a901      	add	r1, sp, #4
 801cee2:	f7f8 fe25 	bl	8015b30 <read_uint>
 801cee6:	4605      	mov	r5, r0
 801cee8:	bb68      	cbnz	r0, 801cf46 <setting_validate_me_uint+0x74>
        return status;

    switch(setting->datatype) {
 801ceea:	7b23      	ldrb	r3, [r4, #12]
 801ceec:	2b0b      	cmp	r3, #11
 801ceee:	d82a      	bhi.n	801cf46 <setting_validate_me_uint+0x74>
 801cef0:	e8df f003 	tbb	[pc, r3]
 801cef4:	160b0b06 	.word	0x160b0b06
 801cef8:	2929241f 	.word	0x2929241f
 801cefc:	24242929 	.word	0x24242929

        case Format_Bool:
            if(!(value == 0 || value == 1))
 801cf00:	9b00      	ldr	r3, [sp, #0]
 801cf02:	2b01      	cmp	r3, #1
 801cf04:	d91f      	bls.n	801cf46 <setting_validate_me_uint+0x74>
                status = Status_SettingValueOutOfRange;
 801cf06:	2534      	movs	r5, #52	@ 0x34
 801cf08:	e01d      	b.n	801cf46 <setting_validate_me_uint+0x74>
            break;

        case Format_Bitfield:
        case Format_XBitfield:;
            if(value >= (1UL << strnumentries(setting->format, ',')))
 801cf0a:	212c      	movs	r1, #44	@ 0x2c
 801cf0c:	6920      	ldr	r0, [r4, #16]
 801cf0e:	f7ff ff89 	bl	801ce24 <strnumentries>
 801cf12:	2301      	movs	r3, #1
 801cf14:	4083      	lsls	r3, r0
 801cf16:	9a00      	ldr	r2, [sp, #0]
 801cf18:	4293      	cmp	r3, r2
 801cf1a:	d814      	bhi.n	801cf46 <setting_validate_me_uint+0x74>
                status = Status_SettingValueOutOfRange;
 801cf1c:	2534      	movs	r5, #52	@ 0x34
 801cf1e:	e012      	b.n	801cf46 <setting_validate_me_uint+0x74>
            break;

        case Format_RadioButtons:
            if(value >= strnumentries(setting->format, ','))
 801cf20:	212c      	movs	r1, #44	@ 0x2c
 801cf22:	6920      	ldr	r0, [r4, #16]
 801cf24:	f7ff ff7e 	bl	801ce24 <strnumentries>
 801cf28:	9b00      	ldr	r3, [sp, #0]
 801cf2a:	4298      	cmp	r0, r3
 801cf2c:	d80b      	bhi.n	801cf46 <setting_validate_me_uint+0x74>
                status = Status_SettingValueOutOfRange;
 801cf2e:	2534      	movs	r5, #52	@ 0x34
 801cf30:	e009      	b.n	801cf46 <setting_validate_me_uint+0x74>
            break;

        case Format_AxisMask:
            if(value >= (1 << N_AXIS))
 801cf32:	9b00      	ldr	r3, [sp, #0]
 801cf34:	2b07      	cmp	r3, #7
 801cf36:	d906      	bls.n	801cf46 <setting_validate_me_uint+0x74>
                status = Status_SettingValueOutOfRange;
 801cf38:	2534      	movs	r5, #52	@ 0x34
 801cf3a:	e004      	b.n	801cf46 <setting_validate_me_uint+0x74>
            break;

        case Format_Int8:
        case Format_Int16:
        case Format_Integer:
            status = validate_uint_value(setting, value);
 801cf3c:	9900      	ldr	r1, [sp, #0]
 801cf3e:	4620      	mov	r0, r4
 801cf40:	f7ff ff9a 	bl	801ce78 <validate_uint_value>
 801cf44:	4605      	mov	r5, r0
        default:
            break;
    }

    return status;
}
 801cf46:	4628      	mov	r0, r5
 801cf48:	b003      	add	sp, #12
 801cf4a:	bd30      	pop	{r4, r5, pc}

0801cf4c <validate_value>:
{
 801cf4c:	b510      	push	{r4, lr}
 801cf4e:	ed2d 8b02 	vpush	{d8}
 801cf52:	b082      	sub	sp, #8
 801cf54:	4604      	mov	r4, r0
 801cf56:	eeb0 8a40 	vmov.f32	s16, s0
    uint_fast8_t set_idx = 0;
 801cf5a:	2300      	movs	r3, #0
 801cf5c:	9300      	str	r3, [sp, #0]
    if(setting->min_value) {
 801cf5e:	6940      	ldr	r0, [r0, #20]
 801cf60:	b1b8      	cbz	r0, 801cf92 <validate_value+0x46>
        if(!read_float((char *)setting->min_value, &set_idx, &val))
 801cf62:	aa01      	add	r2, sp, #4
 801cf64:	4669      	mov	r1, sp
 801cf66:	f7f8 fe2d 	bl	8015bc4 <read_float>
 801cf6a:	b348      	cbz	r0, 801cfc0 <validate_value+0x74>
        if(!(value >= val || (setting->flags.allow_null && value == 0.0f)))
 801cf6c:	eddd 7a01 	vldr	s15, [sp, #4]
 801cf70:	eef4 7ac8 	vcmpe.f32	s15, s16
 801cf74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf78:	d910      	bls.n	801cf9c <validate_value+0x50>
 801cf7a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801cf7e:	f013 0f02 	tst.w	r3, #2
 801cf82:	d01f      	beq.n	801cfc4 <validate_value+0x78>
 801cf84:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801cf88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf8c:	d006      	beq.n	801cf9c <validate_value+0x50>
            return Status_SettingValueOutOfRange;
 801cf8e:	2034      	movs	r0, #52	@ 0x34
 801cf90:	e01d      	b.n	801cfce <validate_value+0x82>
    } else if(value < 0.0f)
 801cf92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801cf96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf9a:	d415      	bmi.n	801cfc8 <validate_value+0x7c>
    if(setting->max_value) {
 801cf9c:	69a0      	ldr	r0, [r4, #24]
 801cf9e:	b1a8      	cbz	r0, 801cfcc <validate_value+0x80>
        set_idx = 0;
 801cfa0:	2300      	movs	r3, #0
 801cfa2:	9300      	str	r3, [sp, #0]
        if(!read_float((char *)setting->max_value, &set_idx, &val))
 801cfa4:	aa01      	add	r2, sp, #4
 801cfa6:	4669      	mov	r1, sp
 801cfa8:	f7f8 fe0c 	bl	8015bc4 <read_float>
 801cfac:	b198      	cbz	r0, 801cfd6 <validate_value+0x8a>
        if(value > val)
 801cfae:	eddd 7a01 	vldr	s15, [sp, #4]
 801cfb2:	eef4 7ac8 	vcmpe.f32	s15, s16
 801cfb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfba:	d40e      	bmi.n	801cfda <validate_value+0x8e>
    return Status_OK;
 801cfbc:	2000      	movs	r0, #0
 801cfbe:	e006      	b.n	801cfce <validate_value+0x82>
            return Status_BadNumberFormat;
 801cfc0:	2002      	movs	r0, #2
 801cfc2:	e004      	b.n	801cfce <validate_value+0x82>
            return Status_SettingValueOutOfRange;
 801cfc4:	2034      	movs	r0, #52	@ 0x34
 801cfc6:	e002      	b.n	801cfce <validate_value+0x82>
        return Status_NegativeValue;
 801cfc8:	2004      	movs	r0, #4
 801cfca:	e000      	b.n	801cfce <validate_value+0x82>
    return Status_OK;
 801cfcc:	2000      	movs	r0, #0
}
 801cfce:	b002      	add	sp, #8
 801cfd0:	ecbd 8b02 	vpop	{d8}
 801cfd4:	bd10      	pop	{r4, pc}
            return Status_BadNumberFormat;
 801cfd6:	2002      	movs	r0, #2
 801cfd8:	e7f9      	b.n	801cfce <validate_value+0x82>
            return Status_SettingValueOutOfRange;
 801cfda:	2034      	movs	r0, #52	@ 0x34
 801cfdc:	e7f7      	b.n	801cfce <validate_value+0x82>
	...

0801cfe0 <settings_changed_spindle>:
    // If no details available setting could nevertheless be a valid setting id.
    return setting == NULL ? Status_OK : setting_validate_me(setting, value, svalue);
}

static bool settings_changed_spindle (void)
{
 801cfe0:	b510      	push	{r4, lr}
    static spindle_settings_t spindle_settings = {0};

    bool changed;

    if((changed = memcmp(&spindle_settings, &settings.spindle, sizeof(spindle_settings_t))) != 0)
 801cfe2:	2274      	movs	r2, #116	@ 0x74
 801cfe4:	4907      	ldr	r1, [pc, #28]	@ (801d004 <settings_changed_spindle+0x24>)
 801cfe6:	4808      	ldr	r0, [pc, #32]	@ (801d008 <settings_changed_spindle+0x28>)
 801cfe8:	f007 fe77 	bl	8024cda <memcmp>
 801cfec:	2800      	cmp	r0, #0
 801cfee:	bf14      	ite	ne
 801cff0:	2401      	movne	r4, #1
 801cff2:	2400      	moveq	r4, #0
 801cff4:	d004      	beq.n	801d000 <settings_changed_spindle+0x20>
        memcpy(&spindle_settings, &settings.spindle, sizeof(spindle_settings_t));
 801cff6:	2274      	movs	r2, #116	@ 0x74
 801cff8:	4902      	ldr	r1, [pc, #8]	@ (801d004 <settings_changed_spindle+0x24>)
 801cffa:	4803      	ldr	r0, [pc, #12]	@ (801d008 <settings_changed_spindle+0x28>)
 801cffc:	f007 fff7 	bl	8024fee <memcpy>

    return changed;
}
 801d000:	4620      	mov	r0, r4
 801d002:	bd10      	pop	{r4, pc}
 801d004:	2000251c 	.word	0x2000251c
 801d008:	200023bc 	.word	0x200023bc

0801d00c <settings_register>:
    settingsd->next = details;
 801d00c:	4b02      	ldr	r3, [pc, #8]	@ (801d018 <settings_register+0xc>)
 801d00e:	681a      	ldr	r2, [r3, #0]
 801d010:	6190      	str	r0, [r2, #24]
    settingsd = details;
 801d012:	6018      	str	r0, [r3, #0]
}
 801d014:	4770      	bx	lr
 801d016:	bf00      	nop
 801d018:	20000218 	.word	0x20000218

0801d01c <settings_get_details>:
}
 801d01c:	4800      	ldr	r0, [pc, #0]	@ (801d020 <settings_get_details+0x4>)
 801d01e:	4770      	bx	lr
 801d020:	2000021c 	.word	0x2000021c

0801d024 <settings_get_axis_base>:
{
 801d024:	b538      	push	{r3, r4, r5, lr}
 801d026:	4604      	mov	r4, r0
 801d028:	460d      	mov	r5, r1
    setting_id_t base = normalize_id(id);
 801d02a:	f7ff fa23 	bl	801c474 <normalize_id>
    *idx = id - base;
 801d02e:	1a24      	subs	r4, r4, r0
 801d030:	602c      	str	r4, [r5, #0]
    return *idx < N_AXIS ? base : Setting_SettingsMax;
 801d032:	2c02      	cmp	r4, #2
 801d034:	d800      	bhi.n	801d038 <settings_get_axis_base+0x14>
}
 801d036:	bd38      	pop	{r3, r4, r5, pc}
    return *idx < N_AXIS ? base : Setting_SettingsMax;
 801d038:	f240 20e5 	movw	r0, #741	@ 0x2e5
 801d03c:	e7fb      	b.n	801d036 <settings_get_axis_base+0x12>
	...

0801d040 <get_float>:
    if (setting >= Setting_AxisSettingsBase && setting <= Setting_AxisSettingsMax) {
 801d040:	f1a0 0364 	sub.w	r3, r0, #100	@ 0x64
 801d044:	b29b      	uxth	r3, r3
 801d046:	2b5d      	cmp	r3, #93	@ 0x5d
 801d048:	d905      	bls.n	801d056 <get_float+0x16>
    } else switch(setting) {
 801d04a:	f5b0 7fab 	cmp.w	r0, #342	@ 0x156
 801d04e:	d060      	beq.n	801d112 <get_float+0xd2>
    float value = 0.0f;
 801d050:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 801d11c <get_float+0xdc>
}
 801d054:	4770      	bx	lr
{
 801d056:	b500      	push	{lr}
 801d058:	b083      	sub	sp, #12
        switch(settings_get_axis_base(setting, &idx)) {
 801d05a:	a901      	add	r1, sp, #4
 801d05c:	f7ff ffe2 	bl	801d024 <settings_get_axis_base>
 801d060:	2882      	cmp	r0, #130	@ 0x82
 801d062:	d816      	bhi.n	801d092 <get_float+0x52>
 801d064:	2864      	cmp	r0, #100	@ 0x64
 801d066:	d34c      	bcc.n	801d102 <get_float+0xc2>
 801d068:	3864      	subs	r0, #100	@ 0x64
 801d06a:	281e      	cmp	r0, #30
 801d06c:	d84c      	bhi.n	801d108 <get_float+0xc8>
 801d06e:	e8df f000 	tbb	[pc, r0]
 801d072:	4b1e      	.short	0x4b1e
 801d074:	4b4b4b4b 	.word	0x4b4b4b4b
 801d078:	4b4b4b4b 	.word	0x4b4b4b4b
 801d07c:	4b4b4b27 	.word	0x4b4b4b27
 801d080:	4b4b4b4b 	.word	0x4b4b4b4b
 801d084:	4b304b4b 	.word	0x4b304b4b
 801d088:	4b4b4b4b 	.word	0x4b4b4b4b
 801d08c:	4b4b4b4b 	.word	0x4b4b4b4b
 801d090:	3d          	.byte	0x3d
 801d091:	00          	.byte	0x00
 801d092:	28aa      	cmp	r0, #170	@ 0xaa
 801d094:	d108      	bne.n	801d0a8 <get_float+0x68>
                value = settings.axis[idx].dual_axis_offset;
 801d096:	9b01      	ldr	r3, [sp, #4]
 801d098:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d09c:	4a20      	ldr	r2, [pc, #128]	@ (801d120 <get_float+0xe0>)
 801d09e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d0a2:	ed93 0a10 	vldr	s0, [r3, #64]	@ 0x40
                break;
 801d0a6:	e031      	b.n	801d10c <get_float+0xcc>
        switch(settings_get_axis_base(setting, &idx)) {
 801d0a8:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 801d11c <get_float+0xdc>
 801d0ac:	e02e      	b.n	801d10c <get_float+0xcc>
                value = settings.axis[idx].steps_per_mm;
 801d0ae:	9b01      	ldr	r3, [sp, #4]
 801d0b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d0b4:	4a1a      	ldr	r2, [pc, #104]	@ (801d120 <get_float+0xe0>)
 801d0b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d0ba:	ed93 0a0c 	vldr	s0, [r3, #48]	@ 0x30
                break;
 801d0be:	e025      	b.n	801d10c <get_float+0xcc>
                value = settings.axis[idx].max_rate;
 801d0c0:	9b01      	ldr	r3, [sp, #4]
 801d0c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d0c6:	4a16      	ldr	r2, [pc, #88]	@ (801d120 <get_float+0xe0>)
 801d0c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d0cc:	ed93 0a0d 	vldr	s0, [r3, #52]	@ 0x34
                break;
 801d0d0:	e01c      	b.n	801d10c <get_float+0xcc>
                value = settings.axis[idx].acceleration / (60.0f * 60.0f); // Convert from mm/min^2 to mm/sec^2.
 801d0d2:	9b01      	ldr	r3, [sp, #4]
 801d0d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d0d8:	4a11      	ldr	r2, [pc, #68]	@ (801d120 <get_float+0xe0>)
 801d0da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d0de:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 801d0e2:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801d124 <get_float+0xe4>
 801d0e6:	ee87 0a27 	vdiv.f32	s0, s14, s15
                break;
 801d0ea:	e00f      	b.n	801d10c <get_float+0xcc>
                value = -settings.axis[idx].max_travel; // Store as negative for grbl internal use.
 801d0ec:	9b01      	ldr	r3, [sp, #4]
 801d0ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d0f2:	4a0b      	ldr	r2, [pc, #44]	@ (801d120 <get_float+0xe0>)
 801d0f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d0f8:	ed93 0a0f 	vldr	s0, [r3, #60]	@ 0x3c
 801d0fc:	eeb1 0a40 	vneg.f32	s0, s0
                break;
 801d100:	e004      	b.n	801d10c <get_float+0xcc>
        switch(settings_get_axis_base(setting, &idx)) {
 801d102:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 801d11c <get_float+0xdc>
 801d106:	e001      	b.n	801d10c <get_float+0xcc>
 801d108:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 801d11c <get_float+0xdc>
}
 801d10c:	b003      	add	sp, #12
 801d10e:	f85d fb04 	ldr.w	pc, [sp], #4
            value = settings.tool_change.probing_distance;
 801d112:	4b03      	ldr	r3, [pc, #12]	@ (801d120 <get_float+0xe0>)
 801d114:	ed93 0a0a 	vldr	s0, [r3, #40]	@ 0x28
            break;
 801d118:	4770      	bx	lr
 801d11a:	bf00      	nop
 801d11c:	00000000 	.word	0x00000000
 801d120:	200024a8 	.word	0x200024a8
 801d124:	45610000 	.word	0x45610000

0801d128 <set_axis_setting>:
{
 801d128:	b510      	push	{r4, lr}
 801d12a:	ed2d 8b02 	vpush	{d8}
 801d12e:	b082      	sub	sp, #8
 801d130:	eeb0 8a40 	vmov.f32	s16, s0
    switch(settings_get_axis_base(setting, &idx)) {
 801d134:	a901      	add	r1, sp, #4
 801d136:	f7ff ff75 	bl	801d024 <settings_get_axis_base>
 801d13a:	2882      	cmp	r0, #130	@ 0x82
 801d13c:	d827      	bhi.n	801d18e <set_axis_setting+0x66>
 801d13e:	2864      	cmp	r0, #100	@ 0x64
 801d140:	f0c0 8131 	bcc.w	801d3a6 <set_axis_setting+0x27e>
 801d144:	3864      	subs	r0, #100	@ 0x64
 801d146:	281e      	cmp	r0, #30
 801d148:	f200 812f 	bhi.w	801d3aa <set_axis_setting+0x282>
 801d14c:	e8df f010 	tbh	[pc, r0, lsl #1]
 801d150:	012d003b 	.word	0x012d003b
 801d154:	012d012d 	.word	0x012d012d
 801d158:	012d012d 	.word	0x012d012d
 801d15c:	012d012d 	.word	0x012d012d
 801d160:	012d012d 	.word	0x012d012d
 801d164:	012d00b6 	.word	0x012d00b6
 801d168:	012d012d 	.word	0x012d012d
 801d16c:	012d012d 	.word	0x012d012d
 801d170:	012d012d 	.word	0x012d012d
 801d174:	012d012d 	.word	0x012d012d
 801d178:	012d00da 	.word	0x012d00da
 801d17c:	012d012d 	.word	0x012d012d
 801d180:	012d012d 	.word	0x012d012d
 801d184:	012d012d 	.word	0x012d012d
 801d188:	012d012d 	.word	0x012d012d
 801d18c:	00ef      	.short	0x00ef
 801d18e:	28aa      	cmp	r0, #170	@ 0xaa
 801d190:	d117      	bne.n	801d1c2 <set_axis_setting+0x9a>
            if(hal.stepper.get_ganged && bit_istrue(hal.stepper.get_ganged(true).mask, bit(idx)))
 801d192:	4b8c      	ldr	r3, [pc, #560]	@ (801d3c4 <set_axis_setting+0x29c>)
 801d194:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801d198:	2b00      	cmp	r3, #0
 801d19a:	f000 810f 	beq.w	801d3bc <set_axis_setting+0x294>
 801d19e:	2001      	movs	r0, #1
 801d1a0:	4798      	blx	r3
 801d1a2:	b2c0      	uxtb	r0, r0
 801d1a4:	9b01      	ldr	r3, [sp, #4]
 801d1a6:	40d8      	lsrs	r0, r3
 801d1a8:	f010 0f01 	tst.w	r0, #1
 801d1ac:	f000 8108 	beq.w	801d3c0 <set_axis_setting+0x298>
                settings.axis[idx].dual_axis_offset = value;
 801d1b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d1b4:	4a84      	ldr	r2, [pc, #528]	@ (801d3c8 <set_axis_setting+0x2a0>)
 801d1b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d1ba:	ed83 8a10 	vstr	s16, [r3, #64]	@ 0x40
    status_code_t status = Status_OK;
 801d1be:	2000      	movs	r0, #0
                settings.axis[idx].dual_axis_offset = value;
 801d1c0:	e0f4      	b.n	801d3ac <set_axis_setting+0x284>
    switch(settings_get_axis_base(setting, &idx)) {
 801d1c2:	2035      	movs	r0, #53	@ 0x35
 801d1c4:	e0f2      	b.n	801d3ac <set_axis_setting+0x284>
            if (hal.max_step_rate && value * settings.axis[idx].max_rate > (float)hal.max_step_rate * 60.0f)
 801d1c6:	4b7f      	ldr	r3, [pc, #508]	@ (801d3c4 <set_axis_setting+0x29c>)
 801d1c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d1ca:	b1bb      	cbz	r3, 801d1fc <set_axis_setting+0xd4>
 801d1cc:	9a01      	ldr	r2, [sp, #4]
 801d1ce:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d1d2:	497d      	ldr	r1, [pc, #500]	@ (801d3c8 <set_axis_setting+0x2a0>)
 801d1d4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801d1d8:	ed92 7a0d 	vldr	s14, [r2, #52]	@ 0x34
 801d1dc:	ee27 7a08 	vmul.f32	s14, s14, s16
 801d1e0:	ee07 3a90 	vmov	s15, r3
 801d1e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d1e8:	eddf 6a78 	vldr	s13, [pc, #480]	@ 801d3cc <set_axis_setting+0x2a4>
 801d1ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d1f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1f8:	f300 80dc 	bgt.w	801d3b4 <set_axis_setting+0x28c>
                if(settings.axis[idx].steps_per_mm > 0.0f && settings.axis[idx].steps_per_mm != value) {
 801d1fc:	9b01      	ldr	r3, [sp, #4]
 801d1fe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801d202:	4a71      	ldr	r2, [pc, #452]	@ (801d3c8 <set_axis_setting+0x2a0>)
 801d204:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801d208:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 801d20c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d214:	dd04      	ble.n	801d220 <set_axis_setting+0xf8>
 801d216:	eef4 7a48 	vcmp.f32	s15, s16
 801d21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d21e:	d109      	bne.n	801d234 <set_axis_setting+0x10c>
                settings.axis[idx].steps_per_mm = value;
 801d220:	9b01      	ldr	r3, [sp, #4]
 801d222:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d226:	4a68      	ldr	r2, [pc, #416]	@ (801d3c8 <set_axis_setting+0x2a0>)
 801d228:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d22c:	ed83 8a0c 	vstr	s16, [r3, #48]	@ 0x30
    status_code_t status = Status_OK;
 801d230:	2000      	movs	r0, #0
 801d232:	e0bb      	b.n	801d3ac <set_axis_setting+0x284>
                    float comp = value / settings.axis[idx].steps_per_mm;
 801d234:	ee88 7a27 	vdiv.f32	s14, s16, s15
                    sys.position[idx] *= comp;
 801d238:	4c65      	ldr	r4, [pc, #404]	@ (801d3d0 <set_axis_setting+0x2a8>)
 801d23a:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 801d23e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 801d242:	ee07 1a90 	vmov	s15, r1
 801d246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d24a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d24e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d252:	ee17 1a90 	vmov	r1, s15
 801d256:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
                    sys.home_position[idx] *= comp;
 801d25a:	f103 0216 	add.w	r2, r3, #22
 801d25e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d262:	edd2 7a00 	vldr	s15, [r2]
 801d266:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d26a:	edc2 7a00 	vstr	s15, [r2]
                    sys.probe_position[idx] *= comp;
 801d26e:	f103 020e 	add.w	r2, r3, #14
 801d272:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 801d276:	ee07 1a90 	vmov	s15, r1
 801d27a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d27e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d282:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d286:	ee17 1a90 	vmov	r1, s15
 801d28a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
                    sys.tlo_reference[idx] *= comp;
 801d28e:	3302      	adds	r3, #2
 801d290:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 801d294:	ee07 2a90 	vmov	s15, r2
 801d298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d29c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d2a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d2a4:	ee17 2a90 	vmov	r2, s15
 801d2a8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                    sync_position();
 801d2ac:	f7f9 fda2 	bl	8016df4 <plan_sync_position>
 801d2b0:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 801d2b4:	4847      	ldr	r0, [pc, #284]	@ (801d3d4 <set_axis_setting+0x2ac>)
 801d2b6:	f004 fd61 	bl	8021d7c <system_convert_array_steps_to_mpos>
 801d2ba:	e7b1      	b.n	801d220 <set_axis_setting+0xf8>
            if (hal.max_step_rate && value * settings.axis[idx].steps_per_mm > (float)hal.max_step_rate * 60.0f)
 801d2bc:	4b41      	ldr	r3, [pc, #260]	@ (801d3c4 <set_axis_setting+0x29c>)
 801d2be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d2c0:	b1b3      	cbz	r3, 801d2f0 <set_axis_setting+0x1c8>
 801d2c2:	9a01      	ldr	r2, [sp, #4]
 801d2c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d2c8:	493f      	ldr	r1, [pc, #252]	@ (801d3c8 <set_axis_setting+0x2a0>)
 801d2ca:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801d2ce:	ed92 7a0c 	vldr	s14, [r2, #48]	@ 0x30
 801d2d2:	ee27 7a08 	vmul.f32	s14, s14, s16
 801d2d6:	ee07 3a90 	vmov	s15, r3
 801d2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d2de:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801d3cc <set_axis_setting+0x2a4>
 801d2e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d2e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2ee:	dc63      	bgt.n	801d3b8 <set_axis_setting+0x290>
                settings.axis[idx].max_rate = value;
 801d2f0:	9b01      	ldr	r3, [sp, #4]
 801d2f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d2f6:	4a34      	ldr	r2, [pc, #208]	@ (801d3c8 <set_axis_setting+0x2a0>)
 801d2f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d2fc:	ed83 8a0d 	vstr	s16, [r3, #52]	@ 0x34
    status_code_t status = Status_OK;
 801d300:	2000      	movs	r0, #0
 801d302:	e053      	b.n	801d3ac <set_axis_setting+0x284>
            settings.axis[idx].acceleration = override_backup.acceleration[idx] = value * 60.0f * 60.0f; // Convert to mm/min^2 for grbl internal use.
 801d304:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801d3cc <set_axis_setting+0x2a4>
 801d308:	ee28 0a27 	vmul.f32	s0, s16, s15
 801d30c:	9b01      	ldr	r3, [sp, #4]
 801d30e:	ee20 0a27 	vmul.f32	s0, s0, s15
 801d312:	4a31      	ldr	r2, [pc, #196]	@ (801d3d8 <set_axis_setting+0x2b0>)
 801d314:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d318:	ed82 0a01 	vstr	s0, [r2, #4]
 801d31c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d320:	4a29      	ldr	r2, [pc, #164]	@ (801d3c8 <set_axis_setting+0x2a0>)
 801d322:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d326:	ed83 0a0e 	vstr	s0, [r3, #56]	@ 0x38
    status_code_t status = Status_OK;
 801d32a:	2000      	movs	r0, #0
            break;
 801d32c:	e03e      	b.n	801d3ac <set_axis_setting+0x284>
            if(settings.axis[idx].max_travel != -value) {
 801d32e:	9a01      	ldr	r2, [sp, #4]
 801d330:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 801d334:	4b24      	ldr	r3, [pc, #144]	@ (801d3c8 <set_axis_setting+0x2a0>)
 801d336:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801d33a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 801d33e:	eeb1 8a48 	vneg.f32	s16, s16
 801d342:	eef4 7a48 	vcmp.f32	s15, s16
 801d346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d34a:	d116      	bne.n	801d37a <set_axis_setting+0x252>
            settings.axis[idx].max_travel = -value; // Store as negative for grbl internal use.
 801d34c:	9b01      	ldr	r3, [sp, #4]
 801d34e:	4a1e      	ldr	r2, [pc, #120]	@ (801d3c8 <set_axis_setting+0x2a0>)
 801d350:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d354:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d358:	ed83 8a0f 	vstr	s16, [r3, #60]	@ 0x3c
            if(settings.homing.flags.init_lock && (sys.homing.mask & sys.homed.mask) != sys.homing.mask) {
 801d35c:	f892 3114 	ldrb.w	r3, [r2, #276]	@ 0x114
 801d360:	f013 0f04 	tst.w	r3, #4
 801d364:	d005      	beq.n	801d372 <set_axis_setting+0x24a>
 801d366:	4a1a      	ldr	r2, [pc, #104]	@ (801d3d0 <set_axis_setting+0x2a8>)
 801d368:	7e93      	ldrb	r3, [r2, #26]
 801d36a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 801d36e:	4393      	bics	r3, r2
 801d370:	d111      	bne.n	801d396 <set_axis_setting+0x26e>
            tmp_set_soft_limits();
 801d372:	f7fe fee1 	bl	801c138 <tmp_set_soft_limits>
    status_code_t status = Status_OK;
 801d376:	2000      	movs	r0, #0
            break;
 801d378:	e018      	b.n	801d3ac <set_axis_setting+0x284>
                bit_false(sys.homed.mask, bit(idx));
 801d37a:	4815      	ldr	r0, [pc, #84]	@ (801d3d0 <set_axis_setting+0x2a8>)
 801d37c:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 801d380:	2101      	movs	r1, #1
 801d382:	fa01 f202 	lsl.w	r2, r1, r2
 801d386:	ea23 0302 	bic.w	r3, r3, r2
 801d38a:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
                system_add_rt_report(Report_Homed);
 801d38e:	2004      	movs	r0, #4
 801d390:	f004 fd98 	bl	8021ec4 <system_add_rt_report>
 801d394:	e7da      	b.n	801d34c <set_axis_setting+0x224>
                system_raise_alarm(Alarm_HomingRequired);
 801d396:	200b      	movs	r0, #11
 801d398:	f004 fd46 	bl	8021e28 <system_raise_alarm>
                grbl.report.feedback_message(Message_HomingCycleRequired);
 801d39c:	4b0f      	ldr	r3, [pc, #60]	@ (801d3dc <set_axis_setting+0x2b4>)
 801d39e:	68db      	ldr	r3, [r3, #12]
 801d3a0:	200d      	movs	r0, #13
 801d3a2:	4798      	blx	r3
 801d3a4:	e7e5      	b.n	801d372 <set_axis_setting+0x24a>
    switch(settings_get_axis_base(setting, &idx)) {
 801d3a6:	2035      	movs	r0, #53	@ 0x35
 801d3a8:	e000      	b.n	801d3ac <set_axis_setting+0x284>
 801d3aa:	2035      	movs	r0, #53	@ 0x35
}
 801d3ac:	b002      	add	sp, #8
 801d3ae:	ecbd 8b02 	vpop	{d8}
 801d3b2:	bd10      	pop	{r4, pc}
                status = Status_MaxStepRateExceeded;
 801d3b4:	200c      	movs	r0, #12
 801d3b6:	e7f9      	b.n	801d3ac <set_axis_setting+0x284>
                status = Status_MaxStepRateExceeded;
 801d3b8:	200c      	movs	r0, #12
 801d3ba:	e7f7      	b.n	801d3ac <set_axis_setting+0x284>
                status = Status_SettingDisabled;
 801d3bc:	2035      	movs	r0, #53	@ 0x35
 801d3be:	e7f5      	b.n	801d3ac <set_axis_setting+0x284>
 801d3c0:	2035      	movs	r0, #53	@ 0x35
 801d3c2:	e7f3      	b.n	801d3ac <set_axis_setting+0x284>
 801d3c4:	20001a90 	.word	0x20001a90
 801d3c8:	200024a8 	.word	0x200024a8
 801d3cc:	42700000 	.word	0x42700000
 801d3d0:	20001d70 	.word	0x20001d70
 801d3d4:	20001830 	.word	0x20001830
 801d3d8:	20002430 	.word	0x20002430
 801d3dc:	20001c78 	.word	0x20001c78

0801d3e0 <setting_get_value>:
{
 801d3e0:	b510      	push	{r4, lr}
 801d3e2:	ed2d 8b02 	vpush	{d8}
    if(setting == NULL)
 801d3e6:	4604      	mov	r4, r0
 801d3e8:	2800      	cmp	r0, #0
 801d3ea:	d063      	beq.n	801d4b4 <setting_get_value+0xd4>
    switch(setting->type) {
 801d3ec:	7f02      	ldrb	r2, [r0, #28]
 801d3ee:	2a07      	cmp	r2, #7
 801d3f0:	d85f      	bhi.n	801d4b2 <setting_get_value+0xd2>
 801d3f2:	2301      	movs	r3, #1
 801d3f4:	4093      	lsls	r3, r2
 801d3f6:	f013 0faa 	tst.w	r3, #170	@ 0xaa
 801d3fa:	d131      	bne.n	801d460 <setting_get_value+0x80>
 801d3fc:	f013 0f55 	tst.w	r3, #85	@ 0x55
 801d400:	d05b      	beq.n	801d4ba <setting_get_value+0xda>
            switch(setting->datatype) {
 801d402:	7b03      	ldrb	r3, [r0, #12]
 801d404:	2b0b      	cmp	r3, #11
 801d406:	d85a      	bhi.n	801d4be <setting_get_value+0xde>
 801d408:	e8df f003 	tbb	[pc, r3]
 801d40c:	11111111 	.word	0x11111111
 801d410:	28061b11 	.word	0x28061b11
 801d414:	16112820 	.word	0x16112820
                    value = ftoa(*((float *)(setting->value)), get_decimal_places(setting->format));
 801d418:	6a03      	ldr	r3, [r0, #32]
 801d41a:	ed93 8a00 	vldr	s16, [r3]
 801d41e:	6900      	ldr	r0, [r0, #16]
 801d420:	f7ff fd15 	bl	801ce4e <get_decimal_places>
 801d424:	eeb0 0a48 	vmov.f32	s0, s16
 801d428:	f7f8 faec 	bl	8015a04 <ftoa>
                    break;
 801d42c:	e042      	b.n	801d4b4 <setting_get_value+0xd4>
                    value = uitoa(*((uint8_t *)(setting->value)));
 801d42e:	6a03      	ldr	r3, [r0, #32]
 801d430:	7818      	ldrb	r0, [r3, #0]
 801d432:	f7f8 fac5 	bl	80159c0 <uitoa>
                    break;
 801d436:	e03d      	b.n	801d4b4 <setting_get_value+0xd4>
                    value = uitoa(*((uint16_t *)(setting->value)));
 801d438:	6a03      	ldr	r3, [r0, #32]
 801d43a:	8818      	ldrh	r0, [r3, #0]
 801d43c:	f7f8 fac0 	bl	80159c0 <uitoa>
                    break;
 801d440:	e038      	b.n	801d4b4 <setting_get_value+0xd4>
                    value = uitoa(*((uint32_t *)(setting->value)));
 801d442:	6a03      	ldr	r3, [r0, #32]
 801d444:	6818      	ldr	r0, [r3, #0]
 801d446:	f7f8 fabb 	bl	80159c0 <uitoa>
                    break;
 801d44a:	e033      	b.n	801d4b4 <setting_get_value+0xd4>
                    value = hal.stream.state.webui_connected ? PASSWORD_MASK : ((char *)(setting->value));
 801d44c:	4b1f      	ldr	r3, [pc, #124]	@ (801d4cc <setting_get_value+0xec>)
 801d44e:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 801d452:	f013 0f02 	tst.w	r3, #2
 801d456:	d134      	bne.n	801d4c2 <setting_get_value+0xe2>
 801d458:	6a00      	ldr	r0, [r0, #32]
 801d45a:	e02b      	b.n	801d4b4 <setting_get_value+0xd4>
                    value = ((char *)(setting->value));
 801d45c:	6a00      	ldr	r0, [r0, #32]
                    break;
 801d45e:	e029      	b.n	801d4b4 <setting_get_value+0xd4>
            setting_id_t id = (setting_id_t)(setting->id + offset);
 801d460:	8803      	ldrh	r3, [r0, #0]
 801d462:	fa13 f181 	uxtah	r1, r3, r1
 801d466:	b288      	uxth	r0, r1
            switch(setting->datatype) {
 801d468:	7b23      	ldrb	r3, [r4, #12]
 801d46a:	3b06      	subs	r3, #6
 801d46c:	2b03      	cmp	r3, #3
 801d46e:	d81b      	bhi.n	801d4a8 <setting_get_value+0xc8>
 801d470:	e8df f003 	tbb	[pc, r3]
 801d474:	170e1702 	.word	0x170e1702
                    value = ftoa(((setting_get_float_ptr)(setting->get_value))(id), get_decimal_places(setting->format));
 801d478:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801d47a:	4798      	blx	r3
 801d47c:	eeb0 8a40 	vmov.f32	s16, s0
 801d480:	6920      	ldr	r0, [r4, #16]
 801d482:	f7ff fce4 	bl	801ce4e <get_decimal_places>
 801d486:	eeb0 0a48 	vmov.f32	s0, s16
 801d48a:	f7f8 fabb 	bl	8015a04 <ftoa>
                    break;
 801d48e:	e011      	b.n	801d4b4 <setting_get_value+0xd4>
                    value = hal.stream.state.webui_connected ? "********" : ((setting_get_string_ptr)(setting->get_value))(id);
 801d490:	4b0e      	ldr	r3, [pc, #56]	@ (801d4cc <setting_get_value+0xec>)
 801d492:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 801d496:	f013 0f02 	tst.w	r3, #2
 801d49a:	d114      	bne.n	801d4c6 <setting_get_value+0xe6>
 801d49c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801d49e:	4798      	blx	r3
 801d4a0:	e008      	b.n	801d4b4 <setting_get_value+0xd4>
                    value = ((setting_get_string_ptr)(setting->get_value))(id);
 801d4a2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801d4a4:	4798      	blx	r3
                    break;
 801d4a6:	e005      	b.n	801d4b4 <setting_get_value+0xd4>
                    value = uitoa(((setting_get_int_ptr)(setting->get_value))(id));
 801d4a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801d4aa:	4798      	blx	r3
 801d4ac:	f7f8 fa88 	bl	80159c0 <uitoa>
                    break;
 801d4b0:	e000      	b.n	801d4b4 <setting_get_value+0xd4>
    switch(setting->type) {
 801d4b2:	2000      	movs	r0, #0
}
 801d4b4:	ecbd 8b02 	vpop	{d8}
 801d4b8:	bd10      	pop	{r4, pc}
    switch(setting->type) {
 801d4ba:	2000      	movs	r0, #0
 801d4bc:	e7fa      	b.n	801d4b4 <setting_get_value+0xd4>
 801d4be:	2000      	movs	r0, #0
 801d4c0:	e7f8      	b.n	801d4b4 <setting_get_value+0xd4>
                    value = hal.stream.state.webui_connected ? PASSWORD_MASK : ((char *)(setting->value));
 801d4c2:	4803      	ldr	r0, [pc, #12]	@ (801d4d0 <setting_get_value+0xf0>)
 801d4c4:	e7f6      	b.n	801d4b4 <setting_get_value+0xd4>
                    value = hal.stream.state.webui_connected ? "********" : ((setting_get_string_ptr)(setting->get_value))(id);
 801d4c6:	4802      	ldr	r0, [pc, #8]	@ (801d4d0 <setting_get_value+0xf0>)
 801d4c8:	e7f4      	b.n	801d4b4 <setting_get_value+0xd4>
 801d4ca:	bf00      	nop
 801d4cc:	20001a90 	.word	0x20001a90
 801d4d0:	0802c800 	.word	0x0802c800

0801d4d4 <setting_get_int_value>:
    if(setting) switch(setting->type) {
 801d4d4:	b358      	cbz	r0, 801d52e <setting_get_int_value+0x5a>
{
 801d4d6:	b508      	push	{r3, lr}
 801d4d8:	4603      	mov	r3, r0
    if(setting) switch(setting->type) {
 801d4da:	7f00      	ldrb	r0, [r0, #28]
 801d4dc:	2807      	cmp	r0, #7
 801d4de:	d828      	bhi.n	801d532 <setting_get_int_value+0x5e>
 801d4e0:	2201      	movs	r2, #1
 801d4e2:	4082      	lsls	r2, r0
 801d4e4:	f012 0faa 	tst.w	r2, #170	@ 0xaa
 801d4e8:	d116      	bne.n	801d518 <setting_get_int_value+0x44>
 801d4ea:	f012 0f55 	tst.w	r2, #85	@ 0x55
 801d4ee:	d022      	beq.n	801d536 <setting_get_int_value+0x62>
            switch(setting->datatype) {
 801d4f0:	7b1a      	ldrb	r2, [r3, #12]
 801d4f2:	2a0b      	cmp	r2, #11
 801d4f4:	d821      	bhi.n	801d53a <setting_get_int_value+0x66>
 801d4f6:	e8df f002 	tbb	[pc, r2]
 801d4fa:	0606      	.short	0x0606
 801d4fc:	0c060606 	.word	0x0c060606
 801d500:	20202020 	.word	0x20202020
 801d504:	0906      	.short	0x0906
                    value = *((uint8_t *)(setting->value));
 801d506:	6a1b      	ldr	r3, [r3, #32]
 801d508:	7818      	ldrb	r0, [r3, #0]
                    break;
 801d50a:	e013      	b.n	801d534 <setting_get_int_value+0x60>
                    value = *((uint16_t *)(setting->value));
 801d50c:	6a1b      	ldr	r3, [r3, #32]
 801d50e:	8818      	ldrh	r0, [r3, #0]
                    break;
 801d510:	e010      	b.n	801d534 <setting_get_int_value+0x60>
                    value = *((uint32_t *)(setting->value));
 801d512:	6a1b      	ldr	r3, [r3, #32]
 801d514:	6818      	ldr	r0, [r3, #0]
                    break;
 801d516:	e00d      	b.n	801d534 <setting_get_int_value+0x60>
            switch(setting->datatype) {
 801d518:	7b1a      	ldrb	r2, [r3, #12]
 801d51a:	3a06      	subs	r2, #6
 801d51c:	2a03      	cmp	r2, #3
 801d51e:	d90e      	bls.n	801d53e <setting_get_int_value+0x6a>
                    value = ((setting_get_int_ptr)(setting->get_value))((setting_id_t)(setting->id + offset));
 801d520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d522:	881b      	ldrh	r3, [r3, #0]
 801d524:	fa13 f181 	uxtah	r1, r3, r1
 801d528:	b288      	uxth	r0, r1
 801d52a:	4790      	blx	r2
                    break;
 801d52c:	e002      	b.n	801d534 <setting_get_int_value+0x60>
    uint32_t value = 0;
 801d52e:	2000      	movs	r0, #0
}
 801d530:	4770      	bx	lr
    if(setting) switch(setting->type) {
 801d532:	2000      	movs	r0, #0
}
 801d534:	bd08      	pop	{r3, pc}
    if(setting) switch(setting->type) {
 801d536:	2000      	movs	r0, #0
 801d538:	e7fc      	b.n	801d534 <setting_get_int_value+0x60>
 801d53a:	2000      	movs	r0, #0
 801d53c:	e7fa      	b.n	801d534 <setting_get_int_value+0x60>
    uint32_t value = 0;
 801d53e:	2000      	movs	r0, #0
    return value;
 801d540:	e7f8      	b.n	801d534 <setting_get_int_value+0x60>
	...

0801d544 <settings_write_build_info>:
    if(hal.nvs.type != NVS_None)
 801d544:	4b07      	ldr	r3, [pc, #28]	@ (801d564 <settings_write_build_info+0x20>)
 801d546:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801d54a:	b153      	cbz	r3, 801d562 <settings_write_build_info+0x1e>
{
 801d54c:	b510      	push	{r4, lr}
 801d54e:	4601      	mov	r1, r0
        hal.nvs.memcpy_to_nvs(NVS_ADDR_BUILD_INFO, (uint8_t *)line, sizeof(stored_line_t), true);
 801d550:	4b04      	ldr	r3, [pc, #16]	@ (801d564 <settings_write_build_info+0x20>)
 801d552:	f8d3 4190 	ldr.w	r4, [r3, #400]	@ 0x190
 801d556:	2301      	movs	r3, #1
 801d558:	2246      	movs	r2, #70	@ 0x46
 801d55a:	f240 30ae 	movw	r0, #942	@ 0x3ae
 801d55e:	47a0      	blx	r4
}
 801d560:	bd10      	pop	{r4, pc}
 801d562:	4770      	bx	lr
 801d564:	20001a90 	.word	0x20001a90

0801d568 <settings_read_build_info>:
{
 801d568:	b538      	push	{r3, r4, r5, lr}
 801d56a:	4604      	mov	r4, r0
    if (!(hal.nvs.type != NVS_None && hal.nvs.memcpy_from_nvs((uint8_t *)line, NVS_ADDR_BUILD_INFO, sizeof(stored_line_t), true) == NVS_TransferResult_OK)) {
 801d56c:	4b0b      	ldr	r3, [pc, #44]	@ (801d59c <settings_read_build_info+0x34>)
 801d56e:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801d572:	b14b      	cbz	r3, 801d588 <settings_read_build_info+0x20>
 801d574:	4b09      	ldr	r3, [pc, #36]	@ (801d59c <settings_read_build_info+0x34>)
 801d576:	f8d3 5194 	ldr.w	r5, [r3, #404]	@ 0x194
 801d57a:	2301      	movs	r3, #1
 801d57c:	2246      	movs	r2, #70	@ 0x46
 801d57e:	f240 31ae 	movw	r1, #942	@ 0x3ae
 801d582:	47a8      	blx	r5
 801d584:	2802      	cmp	r0, #2
 801d586:	d006      	beq.n	801d596 <settings_read_build_info+0x2e>
        line[0] = 0; // Empty line
 801d588:	2500      	movs	r5, #0
 801d58a:	7025      	strb	r5, [r4, #0]
        settings_write_build_info(line);
 801d58c:	4620      	mov	r0, r4
 801d58e:	f7ff ffd9 	bl	801d544 <settings_write_build_info>
        return false;
 801d592:	4628      	mov	r0, r5
}
 801d594:	bd38      	pop	{r3, r4, r5, pc}
    return true;
 801d596:	2001      	movs	r0, #1
 801d598:	e7fc      	b.n	801d594 <settings_read_build_info+0x2c>
 801d59a:	bf00      	nop
 801d59c:	20001a90 	.word	0x20001a90

0801d5a0 <settings_write_startup_line>:
{
 801d5a0:	b510      	push	{r4, lr}
    assert(idx < N_STARTUP_LINE);
 801d5a2:	2801      	cmp	r0, #1
 801d5a4:	d810      	bhi.n	801d5c8 <settings_write_startup_line+0x28>
    if(hal.nvs.type != NVS_None)
 801d5a6:	4b0c      	ldr	r3, [pc, #48]	@ (801d5d8 <settings_write_startup_line+0x38>)
 801d5a8:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801d5ac:	b15b      	cbz	r3, 801d5c6 <settings_write_startup_line+0x26>
        hal.nvs.memcpy_to_nvs(NVS_ADDR_STARTUP_BLOCK + idx * (sizeof(stored_line_t) + NVS_CRC_BYTES), (uint8_t *)line, sizeof(stored_line_t), true);
 801d5ae:	4b0a      	ldr	r3, [pc, #40]	@ (801d5d8 <settings_write_startup_line+0x38>)
 801d5b0:	f8d3 4190 	ldr.w	r4, [r3, #400]	@ 0x190
 801d5b4:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 801d5b8:	ebc0 00c3 	rsb	r0, r0, r3, lsl #3
 801d5bc:	2301      	movs	r3, #1
 801d5be:	2246      	movs	r2, #70	@ 0x46
 801d5c0:	f200 301f 	addw	r0, r0, #799	@ 0x31f
 801d5c4:	47a0      	blx	r4
}
 801d5c6:	bd10      	pop	{r4, pc}
    assert(idx < N_STARTUP_LINE);
 801d5c8:	4b04      	ldr	r3, [pc, #16]	@ (801d5dc <settings_write_startup_line+0x3c>)
 801d5ca:	4a05      	ldr	r2, [pc, #20]	@ (801d5e0 <settings_write_startup_line+0x40>)
 801d5cc:	f640 0143 	movw	r1, #2115	@ 0x843
 801d5d0:	4804      	ldr	r0, [pc, #16]	@ (801d5e4 <settings_write_startup_line+0x44>)
 801d5d2:	f005 faa9 	bl	8022b28 <__assert_func>
 801d5d6:	bf00      	nop
 801d5d8:	20001a90 	.word	0x20001a90
 801d5dc:	0802c80c 	.word	0x0802c80c
 801d5e0:	0802c8b0 	.word	0x0802c8b0
 801d5e4:	0802c824 	.word	0x0802c824

0801d5e8 <settings_read_startup_line>:
{
 801d5e8:	b570      	push	{r4, r5, r6, lr}
    assert(idx < N_STARTUP_LINE);
 801d5ea:	2801      	cmp	r0, #1
 801d5ec:	d81c      	bhi.n	801d628 <settings_read_startup_line+0x40>
 801d5ee:	4604      	mov	r4, r0
 801d5f0:	460d      	mov	r5, r1
    if (!(hal.nvs.type != NVS_None && hal.nvs.memcpy_from_nvs((uint8_t *)line, NVS_ADDR_STARTUP_BLOCK + idx * (sizeof(stored_line_t) + NVS_CRC_BYTES), sizeof(stored_line_t), true) == NVS_TransferResult_OK)) {
 801d5f2:	4b12      	ldr	r3, [pc, #72]	@ (801d63c <settings_read_startup_line+0x54>)
 801d5f4:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801d5f8:	b173      	cbz	r3, 801d618 <settings_read_startup_line+0x30>
 801d5fa:	4b10      	ldr	r3, [pc, #64]	@ (801d63c <settings_read_startup_line+0x54>)
 801d5fc:	f8d3 6194 	ldr.w	r6, [r3, #404]	@ 0x194
 801d600:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 801d604:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
 801d608:	2301      	movs	r3, #1
 801d60a:	2246      	movs	r2, #70	@ 0x46
 801d60c:	f201 311f 	addw	r1, r1, #799	@ 0x31f
 801d610:	4628      	mov	r0, r5
 801d612:	47b0      	blx	r6
 801d614:	2802      	cmp	r0, #2
 801d616:	d00e      	beq.n	801d636 <settings_read_startup_line+0x4e>
        *line = '\0'; // Empty line
 801d618:	2600      	movs	r6, #0
 801d61a:	702e      	strb	r6, [r5, #0]
        settings_write_startup_line(idx, line);
 801d61c:	4629      	mov	r1, r5
 801d61e:	4620      	mov	r0, r4
 801d620:	f7ff ffbe 	bl	801d5a0 <settings_write_startup_line>
        return false;
 801d624:	4630      	mov	r0, r6
}
 801d626:	bd70      	pop	{r4, r5, r6, pc}
    assert(idx < N_STARTUP_LINE);
 801d628:	4b05      	ldr	r3, [pc, #20]	@ (801d640 <settings_read_startup_line+0x58>)
 801d62a:	4a06      	ldr	r2, [pc, #24]	@ (801d644 <settings_read_startup_line+0x5c>)
 801d62c:	f44f 6105 	mov.w	r1, #2128	@ 0x850
 801d630:	4805      	ldr	r0, [pc, #20]	@ (801d648 <settings_read_startup_line+0x60>)
 801d632:	f005 fa79 	bl	8022b28 <__assert_func>
    return true;
 801d636:	2001      	movs	r0, #1
 801d638:	e7f5      	b.n	801d626 <settings_read_startup_line+0x3e>
 801d63a:	bf00      	nop
 801d63c:	20001a90 	.word	0x20001a90
 801d640:	0802c80c 	.word	0x0802c80c
 801d644:	0802c894 	.word	0x0802c894
 801d648:	0802c824 	.word	0x0802c824

0801d64c <settings_write_coord_data>:
{
 801d64c:	b510      	push	{r4, lr}
    assert(id <= N_CoordinateSystems);
 801d64e:	280c      	cmp	r0, #12
 801d650:	d810      	bhi.n	801d674 <settings_write_coord_data+0x28>
    if(hal.nvs.type != NVS_None)
 801d652:	4b0c      	ldr	r3, [pc, #48]	@ (801d684 <settings_write_coord_data+0x38>)
 801d654:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801d658:	b15b      	cbz	r3, 801d672 <settings_write_coord_data+0x26>
        hal.nvs.memcpy_to_nvs(NVS_ADDR_PARAMETERS + id * (sizeof(coord_data_t) + NVS_CRC_BYTES), (uint8_t *)coord_data, sizeof(coord_data_t), true);
 801d65a:	4b0a      	ldr	r3, [pc, #40]	@ (801d684 <settings_write_coord_data+0x38>)
 801d65c:	f8d3 4190 	ldr.w	r4, [r3, #400]	@ 0x190
 801d660:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801d664:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801d668:	2301      	movs	r3, #1
 801d66a:	220c      	movs	r2, #12
 801d66c:	f500 7000 	add.w	r0, r0, #512	@ 0x200
 801d670:	47a0      	blx	r4
}
 801d672:	bd10      	pop	{r4, pc}
    assert(id <= N_CoordinateSystems);
 801d674:	4b04      	ldr	r3, [pc, #16]	@ (801d688 <settings_write_coord_data+0x3c>)
 801d676:	4a05      	ldr	r2, [pc, #20]	@ (801d68c <settings_write_coord_data+0x40>)
 801d678:	f640 015e 	movw	r1, #2142	@ 0x85e
 801d67c:	4804      	ldr	r0, [pc, #16]	@ (801d690 <settings_write_coord_data+0x44>)
 801d67e:	f005 fa53 	bl	8022b28 <__assert_func>
 801d682:	bf00      	nop
 801d684:	20001a90 	.word	0x20001a90
 801d688:	0802c838 	.word	0x0802c838
 801d68c:	0802c878 	.word	0x0802c878
 801d690:	0802c824 	.word	0x0802c824

0801d694 <settings_read_coord_data>:
{
 801d694:	b570      	push	{r4, r5, r6, lr}
    assert(id <= N_CoordinateSystems);
 801d696:	280c      	cmp	r0, #12
 801d698:	d81e      	bhi.n	801d6d8 <settings_read_coord_data+0x44>
 801d69a:	4604      	mov	r4, r0
 801d69c:	460d      	mov	r5, r1
    if (!(hal.nvs.type != NVS_None && hal.nvs.memcpy_from_nvs((uint8_t *)coord_data, NVS_ADDR_PARAMETERS + id * (sizeof(coord_data_t) + NVS_CRC_BYTES), sizeof(coord_data_t), true) == NVS_TransferResult_OK)) {
 801d69e:	4b13      	ldr	r3, [pc, #76]	@ (801d6ec <settings_read_coord_data+0x58>)
 801d6a0:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801d6a4:	b173      	cbz	r3, 801d6c4 <settings_read_coord_data+0x30>
 801d6a6:	4b11      	ldr	r3, [pc, #68]	@ (801d6ec <settings_read_coord_data+0x58>)
 801d6a8:	f8d3 6194 	ldr.w	r6, [r3, #404]	@ 0x194
 801d6ac:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 801d6b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d6b4:	2301      	movs	r3, #1
 801d6b6:	220c      	movs	r2, #12
 801d6b8:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 801d6bc:	4628      	mov	r0, r5
 801d6be:	47b0      	blx	r6
 801d6c0:	2802      	cmp	r0, #2
 801d6c2:	d010      	beq.n	801d6e6 <settings_read_coord_data+0x52>
        memset(coord_data, 0, sizeof(coord_data_t));
 801d6c4:	2600      	movs	r6, #0
 801d6c6:	602e      	str	r6, [r5, #0]
 801d6c8:	606e      	str	r6, [r5, #4]
 801d6ca:	60ae      	str	r6, [r5, #8]
        settings_write_coord_data(id, coord_data);
 801d6cc:	4629      	mov	r1, r5
 801d6ce:	4620      	mov	r0, r4
 801d6d0:	f7ff ffbc 	bl	801d64c <settings_write_coord_data>
        return false;
 801d6d4:	4630      	mov	r0, r6
}
 801d6d6:	bd70      	pop	{r4, r5, r6, pc}
    assert(id <= N_CoordinateSystems);
 801d6d8:	4b05      	ldr	r3, [pc, #20]	@ (801d6f0 <settings_read_coord_data+0x5c>)
 801d6da:	4a06      	ldr	r2, [pc, #24]	@ (801d6f4 <settings_read_coord_data+0x60>)
 801d6dc:	f640 016b 	movw	r1, #2155	@ 0x86b
 801d6e0:	4805      	ldr	r0, [pc, #20]	@ (801d6f8 <settings_read_coord_data+0x64>)
 801d6e2:	f005 fa21 	bl	8022b28 <__assert_func>
    return true;
 801d6e6:	2001      	movs	r0, #1
 801d6e8:	e7f5      	b.n	801d6d6 <settings_read_coord_data+0x42>
 801d6ea:	bf00      	nop
 801d6ec:	20001a90 	.word	0x20001a90
 801d6f0:	0802c838 	.word	0x0802c838
 801d6f4:	0802c85c 	.word	0x0802c85c
 801d6f8:	0802c824 	.word	0x0802c824

0801d6fc <read_global_settings>:
{
 801d6fc:	b510      	push	{r4, lr}
    bool ok = hal.nvs.type != NVS_None && SETTINGS_VERSION == hal.nvs.get_byte(0) && hal.nvs.memcpy_from_nvs((uint8_t *)&settings, NVS_ADDR_GLOBAL, sizeof(settings_t), true) == NVS_TransferResult_OK;
 801d6fe:	4b2b      	ldr	r3, [pc, #172]	@ (801d7ac <read_global_settings+0xb0>)
 801d700:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801d704:	b1bb      	cbz	r3, 801d736 <read_global_settings+0x3a>
 801d706:	4b29      	ldr	r3, [pc, #164]	@ (801d7ac <read_global_settings+0xb0>)
 801d708:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 801d70c:	2000      	movs	r0, #0
 801d70e:	4798      	blx	r3
 801d710:	2816      	cmp	r0, #22
 801d712:	d001      	beq.n	801d718 <read_global_settings+0x1c>
 801d714:	2400      	movs	r4, #0
 801d716:	e00f      	b.n	801d738 <read_global_settings+0x3c>
 801d718:	4b24      	ldr	r3, [pc, #144]	@ (801d7ac <read_global_settings+0xb0>)
 801d71a:	f8d3 4194 	ldr.w	r4, [r3, #404]	@ 0x194
 801d71e:	2301      	movs	r3, #1
 801d720:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801d724:	4619      	mov	r1, r3
 801d726:	4822      	ldr	r0, [pc, #136]	@ (801d7b0 <read_global_settings+0xb4>)
 801d728:	47a0      	blx	r4
 801d72a:	2802      	cmp	r0, #2
 801d72c:	d001      	beq.n	801d732 <read_global_settings+0x36>
 801d72e:	2400      	movs	r4, #0
 801d730:	e002      	b.n	801d738 <read_global_settings+0x3c>
 801d732:	2401      	movs	r4, #1
 801d734:	e000      	b.n	801d738 <read_global_settings+0x3c>
 801d736:	2400      	movs	r4, #0
    if(settings.mode == Mode_Laser && !spindle_get_caps(false).laser)
 801d738:	4b1d      	ldr	r3, [pc, #116]	@ (801d7b0 <read_global_settings+0xb4>)
 801d73a:	7e1b      	ldrb	r3, [r3, #24]
 801d73c:	2b01      	cmp	r3, #1
 801d73e:	d026      	beq.n	801d78e <read_global_settings+0x92>
    if(settings.planner_buffer_blocks < 30 || settings.planner_buffer_blocks > 1000)
 801d740:	4b1b      	ldr	r3, [pc, #108]	@ (801d7b0 <read_global_settings+0xb4>)
 801d742:	8adb      	ldrh	r3, [r3, #22]
 801d744:	3b1e      	subs	r3, #30
 801d746:	b29b      	uxth	r3, r3
 801d748:	f240 32ca 	movw	r2, #970	@ 0x3ca
 801d74c:	4293      	cmp	r3, r2
 801d74e:	d902      	bls.n	801d756 <read_global_settings+0x5a>
        settings.planner_buffer_blocks = 35;
 801d750:	4b17      	ldr	r3, [pc, #92]	@ (801d7b0 <read_global_settings+0xb4>)
 801d752:	2223      	movs	r2, #35	@ 0x23
 801d754:	82da      	strh	r2, [r3, #22]
    if(!hal.driver_cap.spindle_encoder)
 801d756:	4b15      	ldr	r3, [pc, #84]	@ (801d7ac <read_global_settings+0xb0>)
 801d758:	f993 31d8 	ldrsb.w	r3, [r3, #472]	@ 0x1d8
 801d75c:	2b00      	cmp	r3, #0
 801d75e:	db03      	blt.n	801d768 <read_global_settings+0x6c>
        settings.spindle.ppr = 0;
 801d760:	4b13      	ldr	r3, [pc, #76]	@ (801d7b0 <read_global_settings+0xb4>)
 801d762:	2200      	movs	r2, #0
 801d764:	f8a3 20e4 	strh.w	r2, [r3, #228]	@ 0xe4
    settings.control_invert.mask |= limits_override.mask;
 801d768:	4b11      	ldr	r3, [pc, #68]	@ (801d7b0 <read_global_settings+0xb4>)
 801d76a:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
 801d76e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801d772:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
    settings.control_disable_pullup.mask &= ~limits_override.mask;
 801d776:	f8b3 206e 	ldrh.w	r2, [r3, #110]	@ 0x6e
 801d77a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801d77e:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
    return ok && settings.version == SETTINGS_VERSION;
 801d782:	b174      	cbz	r4, 801d7a2 <read_global_settings+0xa6>
 801d784:	681b      	ldr	r3, [r3, #0]
 801d786:	2b16      	cmp	r3, #22
 801d788:	d00d      	beq.n	801d7a6 <read_global_settings+0xaa>
 801d78a:	2000      	movs	r0, #0
 801d78c:	e00a      	b.n	801d7a4 <read_global_settings+0xa8>
    if(settings.mode == Mode_Laser && !spindle_get_caps(false).laser)
 801d78e:	2000      	movs	r0, #0
 801d790:	f000 feb6 	bl	801e500 <spindle_get_caps>
 801d794:	f010 0f08 	tst.w	r0, #8
 801d798:	d1d2      	bne.n	801d740 <read_global_settings+0x44>
        settings.mode = Mode_Standard;
 801d79a:	4b05      	ldr	r3, [pc, #20]	@ (801d7b0 <read_global_settings+0xb4>)
 801d79c:	2200      	movs	r2, #0
 801d79e:	761a      	strb	r2, [r3, #24]
 801d7a0:	e7ce      	b.n	801d740 <read_global_settings+0x44>
    return ok && settings.version == SETTINGS_VERSION;
 801d7a2:	2000      	movs	r0, #0
}
 801d7a4:	bd10      	pop	{r4, pc}
    return ok && settings.version == SETTINGS_VERSION;
 801d7a6:	2001      	movs	r0, #1
 801d7a8:	e7fc      	b.n	801d7a4 <read_global_settings+0xa8>
 801d7aa:	bf00      	nop
 801d7ac:	20001a90 	.word	0x20001a90
 801d7b0:	200024a8 	.word	0x200024a8

0801d7b4 <settings_restore>:
{
 801d7b4:	b530      	push	{r4, r5, lr}
 801d7b6:	b097      	sub	sp, #92	@ 0x5c
 801d7b8:	4604      	mov	r4, r0
    memset(empty_line, 0xFF, sizeof(stored_line_t));
 801d7ba:	2246      	movs	r2, #70	@ 0x46
 801d7bc:	21ff      	movs	r1, #255	@ 0xff
 801d7be:	a804      	add	r0, sp, #16
 801d7c0:	f007 fab5 	bl	8024d2e <memset>
    *empty_line = '\0';
 801d7c4:	2000      	movs	r0, #0
 801d7c6:	f88d 0010 	strb.w	r0, [sp, #16]
    hal.nvs.put_byte(0, SETTINGS_VERSION); // Forces write to physical storage
 801d7ca:	4b35      	ldr	r3, [pc, #212]	@ (801d8a0 <settings_restore+0xec>)
 801d7cc:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 801d7d0:	2116      	movs	r1, #22
 801d7d2:	4798      	blx	r3
    if (restore.defaults) {
 801d7d4:	b2e5      	uxtb	r5, r4
 801d7d6:	f014 0f01 	tst.w	r4, #1
 801d7da:	d110      	bne.n	801d7fe <settings_restore+0x4a>
    if (restore.parameters) {
 801d7dc:	f015 0f02 	tst.w	r5, #2
 801d7e0:	d135      	bne.n	801d84e <settings_restore+0x9a>
    if (restore.startup_lines) {
 801d7e2:	f015 0f04 	tst.w	r5, #4
 801d7e6:	d143      	bne.n	801d870 <settings_restore+0xbc>
    if (restore.build_info) {
 801d7e8:	f015 0f08 	tst.w	r5, #8
 801d7ec:	d149      	bne.n	801d882 <settings_restore+0xce>
    setting_details_t *details = setting_details.next;
 801d7ee:	4b2d      	ldr	r3, [pc, #180]	@ (801d8a4 <settings_restore+0xf0>)
 801d7f0:	699c      	ldr	r4, [r3, #24]
    if(details) do {
 801d7f2:	2c00      	cmp	r4, #0
 801d7f4:	d150      	bne.n	801d898 <settings_restore+0xe4>
    nvs_buffer_sync_physical();
 801d7f6:	f7f8 fd37 	bl	8016268 <nvs_buffer_sync_physical>
}
 801d7fa:	b017      	add	sp, #92	@ 0x5c
 801d7fc:	bd30      	pop	{r4, r5, pc}
        memcpy(&settings, &defaults, sizeof(settings_t));
 801d7fe:	4c2a      	ldr	r4, [pc, #168]	@ (801d8a8 <settings_restore+0xf4>)
 801d800:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801d804:	4929      	ldr	r1, [pc, #164]	@ (801d8ac <settings_restore+0xf8>)
 801d806:	4620      	mov	r0, r4
 801d808:	f007 fbf1 	bl	8024fee <memcpy>
        settings.control_invert.mask = (settings.control_invert.mask & hal.signals_cap.mask) | limits_override.mask;
 801d80c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d810:	f8a4 306c 	strh.w	r3, [r4, #108]	@ 0x6c
        settings.spindle.invert.ccw &= spindle_get_caps(false).direction;
 801d814:	2000      	movs	r0, #0
 801d816:	f000 fe73 	bl	801e500 <spindle_get_caps>
 801d81a:	f894 30e6 	ldrb.w	r3, [r4, #230]	@ 0xe6
 801d81e:	f3c3 0240 	ubfx	r2, r3, #1, #1
 801d822:	ea02 0250 	and.w	r2, r2, r0, lsr #1
 801d826:	f362 0341 	bfi	r3, r2, #1, #1
 801d82a:	f884 30e6 	strb.w	r3, [r4, #230]	@ 0xe6
        settings.spindle.invert.pwm &= spindle_get_caps(false).pwm_invert;
 801d82e:	2000      	movs	r0, #0
 801d830:	f000 fe66 	bl	801e500 <spindle_get_caps>
 801d834:	f894 30e6 	ldrb.w	r3, [r4, #230]	@ 0xe6
 801d838:	f3c3 0280 	ubfx	r2, r3, #2, #1
 801d83c:	ea02 1210 	and.w	r2, r2, r0, lsr #4
 801d840:	f362 0382 	bfi	r3, r2, #2, #1
 801d844:	f884 30e6 	strb.w	r3, [r4, #230]	@ 0xe6
        settings_write_global();
 801d848:	f7fe ffc4 	bl	801c7d4 <settings_write_global>
 801d84c:	e7c6      	b.n	801d7dc <settings_restore+0x28>
        memset(coord_data, 0, sizeof(coord_data));
 801d84e:	2400      	movs	r4, #0
 801d850:	9401      	str	r4, [sp, #4]
 801d852:	9402      	str	r4, [sp, #8]
 801d854:	9403      	str	r4, [sp, #12]
        for (idx = 0; idx <= N_WorkCoordinateSystems; idx++)
 801d856:	e004      	b.n	801d862 <settings_restore+0xae>
            settings_write_coord_data((coord_system_id_t)idx, &coord_data);
 801d858:	a901      	add	r1, sp, #4
 801d85a:	b2e0      	uxtb	r0, r4
 801d85c:	f7ff fef6 	bl	801d64c <settings_write_coord_data>
        for (idx = 0; idx <= N_WorkCoordinateSystems; idx++)
 801d860:	3401      	adds	r4, #1
 801d862:	2c09      	cmp	r4, #9
 801d864:	d9f8      	bls.n	801d858 <settings_restore+0xa4>
        settings_write_coord_data(CoordinateSystem_G92, &coord_data); // Clear G92 offsets
 801d866:	a901      	add	r1, sp, #4
 801d868:	200b      	movs	r0, #11
 801d86a:	f7ff feef 	bl	801d64c <settings_write_coord_data>
 801d86e:	e7b8      	b.n	801d7e2 <settings_restore+0x2e>
        for (idx = 0; idx < N_STARTUP_LINE; idx++)
 801d870:	2400      	movs	r4, #0
 801d872:	2c01      	cmp	r4, #1
 801d874:	d8b8      	bhi.n	801d7e8 <settings_restore+0x34>
            settings_write_startup_line(idx, empty_line);
 801d876:	a904      	add	r1, sp, #16
 801d878:	b2e0      	uxtb	r0, r4
 801d87a:	f7ff fe91 	bl	801d5a0 <settings_write_startup_line>
        for (idx = 0; idx < N_STARTUP_LINE; idx++)
 801d87e:	3401      	adds	r4, #1
 801d880:	e7f7      	b.n	801d872 <settings_restore+0xbe>
        settings_write_build_info(empty_line);
 801d882:	a804      	add	r0, sp, #16
 801d884:	f7ff fe5e 	bl	801d544 <settings_write_build_info>
        settings_write_build_info(BUILD_INFO);
 801d888:	4809      	ldr	r0, [pc, #36]	@ (801d8b0 <settings_restore+0xfc>)
 801d88a:	f7ff fe5b 	bl	801d544 <settings_write_build_info>
 801d88e:	e7ae      	b.n	801d7ee <settings_restore+0x3a>
            details->restore();
 801d890:	4798      	blx	r3
    } while((details = details->next));
 801d892:	69a4      	ldr	r4, [r4, #24]
 801d894:	2c00      	cmp	r4, #0
 801d896:	d0ae      	beq.n	801d7f6 <settings_restore+0x42>
        if(details->restore)
 801d898:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801d89a:	2b00      	cmp	r3, #0
 801d89c:	d1f8      	bne.n	801d890 <settings_restore+0xdc>
 801d89e:	e7f8      	b.n	801d892 <settings_restore+0xde>
 801d8a0:	20001a90 	.word	0x20001a90
 801d8a4:	2000021c 	.word	0x2000021c
 801d8a8:	200024a8 	.word	0x200024a8
 801d8ac:	0803093c 	.word	0x0803093c
 801d8b0:	0802c13c 	.word	0x0802c13c

0801d8b4 <settings_normalize_group>:
    return (group > Group_Axis0 && group < Group_Axis0 + N_AXIS) ? Group_Axis0 : group;
 801d8b4:	f1a0 032c 	sub.w	r3, r0, #44	@ 0x2c
 801d8b8:	b2db      	uxtb	r3, r3
 801d8ba:	2b01      	cmp	r3, #1
 801d8bc:	d900      	bls.n	801d8c0 <settings_normalize_group+0xc>
}
 801d8be:	4770      	bx	lr
    return (group > Group_Axis0 && group < Group_Axis0 + N_AXIS) ? Group_Axis0 : group;
 801d8c0:	202b      	movs	r0, #43	@ 0x2b
 801d8c2:	e7fc      	b.n	801d8be <settings_normalize_group+0xa>

0801d8c4 <setting_get_details>:
{
 801d8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d8c8:	4680      	mov	r8, r0
 801d8ca:	4689      	mov	r9, r1
    uint_fast16_t idx, offset = id - normalize_id(id);
 801d8cc:	f7fe fdd2 	bl	801c474 <normalize_id>
 801d8d0:	4607      	mov	r7, r0
 801d8d2:	eba8 0800 	sub.w	r8, r8, r0
    setting_details_t *details = settings_get_details();
 801d8d6:	f7ff fba1 	bl	801d01c <settings_get_details>
 801d8da:	4605      	mov	r5, r0
    id -= offset;
 801d8dc:	e045      	b.n	801d96a <setting_get_details+0xa6>
                if(details->settings[idx].group == Group_Axis0 && grbl.on_set_axis_setting_unit)
 801d8de:	4a24      	ldr	r2, [pc, #144]	@ (801d970 <setting_get_details+0xac>)
 801d8e0:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 801d8e4:	b372      	cbz	r2, 801d944 <setting_get_details+0x80>
                    set_axis_unit(&details->settings[idx], grbl.on_set_axis_setting_unit(details->settings[idx].id, offset));
 801d8e6:	4641      	mov	r1, r8
 801d8e8:	5b98      	ldrh	r0, [r3, r6]
 801d8ea:	4790      	blx	r2
    if(unit)
 801d8ec:	4601      	mov	r1, r0
 801d8ee:	b348      	cbz	r0, 801d944 <setting_get_details+0x80>
        strcpy((char *)setting->unit, unit);
 801d8f0:	68a0      	ldr	r0, [r4, #8]
 801d8f2:	f007 fb74 	bl	8024fde <strcpy>
 801d8f6:	e025      	b.n	801d944 <setting_get_details+0x80>
                if(offset && details->iterator == NULL && offset >= (details->settings[idx].group == Group_Encoder0 ? hal.encoder.get_n_encoders() : N_AXIS))
 801d8f8:	68eb      	ldr	r3, [r5, #12]
 801d8fa:	4433      	add	r3, r6
 801d8fc:	789b      	ldrb	r3, [r3, #2]
 801d8fe:	2b1d      	cmp	r3, #29
 801d900:	d004      	beq.n	801d90c <setting_get_details+0x48>
 801d902:	2303      	movs	r3, #3
 801d904:	4543      	cmp	r3, r8
 801d906:	d823      	bhi.n	801d950 <setting_get_details+0x8c>
                    return NULL;
 801d908:	2500      	movs	r5, #0
 801d90a:	e028      	b.n	801d95e <setting_get_details+0x9a>
                if(offset && details->iterator == NULL && offset >= (details->settings[idx].group == Group_Encoder0 ? hal.encoder.get_n_encoders() : N_AXIS))
 801d90c:	4b19      	ldr	r3, [pc, #100]	@ (801d974 <setting_get_details+0xb0>)
 801d90e:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801d912:	4798      	blx	r3
 801d914:	4603      	mov	r3, r0
 801d916:	e7f5      	b.n	801d904 <setting_get_details+0x40>
        for(idx = 0; idx < details->n_settings; idx++) {
 801d918:	3401      	adds	r4, #1
 801d91a:	892b      	ldrh	r3, [r5, #8]
 801d91c:	42a3      	cmp	r3, r4
 801d91e:	d921      	bls.n	801d964 <setting_get_details+0xa0>
            if(details->settings[idx].id == id && is_available(&details->settings[idx])) {
 801d920:	68eb      	ldr	r3, [r5, #12]
 801d922:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 801d926:	0106      	lsls	r6, r0, #4
 801d928:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 801d92c:	5b9b      	ldrh	r3, [r3, r6]
 801d92e:	429f      	cmp	r7, r3
 801d930:	d1f2      	bne.n	801d918 <setting_get_details+0x54>
 801d932:	f7fe ff71 	bl	801c818 <is_available>
 801d936:	2800      	cmp	r0, #0
 801d938:	d0ee      	beq.n	801d918 <setting_get_details+0x54>
                if(details->settings[idx].group == Group_Axis0 && grbl.on_set_axis_setting_unit)
 801d93a:	68eb      	ldr	r3, [r5, #12]
 801d93c:	199c      	adds	r4, r3, r6
 801d93e:	78a2      	ldrb	r2, [r4, #2]
 801d940:	2a2b      	cmp	r2, #43	@ 0x2b
 801d942:	d0cc      	beq.n	801d8de <setting_get_details+0x1a>
                if(offset && details->iterator == NULL && offset >= (details->settings[idx].group == Group_Encoder0 ? hal.encoder.get_n_encoders() : N_AXIS))
 801d944:	f1b8 0f00 	cmp.w	r8, #0
 801d948:	d002      	beq.n	801d950 <setting_get_details+0x8c>
 801d94a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801d94c:	2b00      	cmp	r3, #0
 801d94e:	d0d3      	beq.n	801d8f8 <setting_get_details+0x34>
                if(set)
 801d950:	f1b9 0f00 	cmp.w	r9, #0
 801d954:	d001      	beq.n	801d95a <setting_get_details+0x96>
                    *set = details;
 801d956:	f8c9 5000 	str.w	r5, [r9]
                return &details->settings[idx];
 801d95a:	68ed      	ldr	r5, [r5, #12]
 801d95c:	4435      	add	r5, r6
}
 801d95e:	4628      	mov	r0, r5
 801d960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    } while((details = details->next));
 801d964:	69ad      	ldr	r5, [r5, #24]
 801d966:	2d00      	cmp	r5, #0
 801d968:	d0f9      	beq.n	801d95e <setting_get_details+0x9a>
        for(idx = 0; idx < details->n_settings; idx++) {
 801d96a:	2400      	movs	r4, #0
 801d96c:	e7d5      	b.n	801d91a <setting_get_details+0x56>
 801d96e:	bf00      	nop
 801d970:	20001c78 	.word	0x20001c78
 801d974:	20001a90 	.word	0x20001a90

0801d978 <settings_iterator>:
{
 801d978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d97a:	b083      	sub	sp, #12
 801d97c:	4604      	mov	r4, r0
 801d97e:	460e      	mov	r6, r1
 801d980:	4617      	mov	r7, r2
    if(setting->group == Group_Axis0) {
 801d982:	7883      	ldrb	r3, [r0, #2]
 801d984:	2b2b      	cmp	r3, #43	@ 0x2b
 801d986:	d020      	beq.n	801d9ca <settings_iterator+0x52>
    } else if(setting->flags.increment) {
 801d988:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801d98c:	f013 0f78 	tst.w	r3, #120	@ 0x78
 801d990:	d11e      	bne.n	801d9d0 <settings_iterator+0x58>
        ok = callback(setting, 0, data);
 801d992:	2100      	movs	r1, #0
 801d994:	47b0      	blx	r6
}
 801d996:	b003      	add	sp, #12
 801d998:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(!(ok = callback(setting, axis_idx, data)))
 801d99a:	463a      	mov	r2, r7
 801d99c:	4629      	mov	r1, r5
 801d99e:	4620      	mov	r0, r4
 801d9a0:	47b0      	blx	r6
 801d9a2:	2800      	cmp	r0, #0
 801d9a4:	d0f7      	beq.n	801d996 <settings_iterator+0x1e>
        for(axis_idx = 0; axis_idx < N_AXIS; axis_idx++) {
 801d9a6:	3501      	adds	r5, #1
 801d9a8:	2d02      	cmp	r5, #2
 801d9aa:	d8f4      	bhi.n	801d996 <settings_iterator+0x1e>
            if(grbl.on_set_axis_setting_unit)
 801d9ac:	4b0f      	ldr	r3, [pc, #60]	@ (801d9ec <settings_iterator+0x74>)
 801d9ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d9b2:	2b00      	cmp	r3, #0
 801d9b4:	d0f1      	beq.n	801d99a <settings_iterator+0x22>
                set_axis_unit(setting, grbl.on_set_axis_setting_unit(setting->id, axis_idx));
 801d9b6:	4629      	mov	r1, r5
 801d9b8:	8820      	ldrh	r0, [r4, #0]
 801d9ba:	4798      	blx	r3
    if(unit)
 801d9bc:	4601      	mov	r1, r0
 801d9be:	2800      	cmp	r0, #0
 801d9c0:	d0eb      	beq.n	801d99a <settings_iterator+0x22>
        strcpy((char *)setting->unit, unit);
 801d9c2:	68a0      	ldr	r0, [r4, #8]
 801d9c4:	f007 fb0b 	bl	8024fde <strcpy>
 801d9c8:	e7e7      	b.n	801d99a <settings_iterator+0x22>
        for(axis_idx = 0; axis_idx < N_AXIS; axis_idx++) {
 801d9ca:	2500      	movs	r5, #0
    bool ok = false;
 801d9cc:	4628      	mov	r0, r5
 801d9ce:	e7eb      	b.n	801d9a8 <settings_iterator+0x30>
        setting = setting_get_details(setting->id, &set);
 801d9d0:	a901      	add	r1, sp, #4
 801d9d2:	8800      	ldrh	r0, [r0, #0]
 801d9d4:	f7ff ff76 	bl	801d8c4 <setting_get_details>
        if(set->iterator)
 801d9d8:	9b01      	ldr	r3, [sp, #4]
 801d9da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d9dc:	b11b      	cbz	r3, 801d9e6 <settings_iterator+0x6e>
            ok = set->iterator(setting, callback, data);
 801d9de:	463a      	mov	r2, r7
 801d9e0:	4631      	mov	r1, r6
 801d9e2:	4798      	blx	r3
 801d9e4:	e7d7      	b.n	801d996 <settings_iterator+0x1e>
    bool ok = false;
 801d9e6:	2000      	movs	r0, #0
 801d9e8:	e7d5      	b.n	801d996 <settings_iterator+0x1e>
 801d9ea:	bf00      	nop
 801d9ec:	20001c78 	.word	0x20001c78

0801d9f0 <setting_get_description>:
{
 801d9f0:	b570      	push	{r4, r5, r6, lr}
 801d9f2:	4606      	mov	r6, r0
    if(grbl.on_setting_get_description == NULL || (description = grbl.on_setting_get_description(id)) == NULL) {
 801d9f4:	4b14      	ldr	r3, [pc, #80]	@ (801da48 <setting_get_description+0x58>)
 801d9f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d9f8:	b123      	cbz	r3, 801da04 <setting_get_description+0x14>
 801d9fa:	4798      	blx	r3
 801d9fc:	4604      	mov	r4, r0
 801d9fe:	b110      	cbz	r0, 801da06 <setting_get_description+0x16>
}
 801da00:	4620      	mov	r0, r4
 801da02:	bd70      	pop	{r4, r5, r6, pc}
    const char *description = NULL;
 801da04:	2400      	movs	r4, #0
        setting_details_t *settings = settings_get_details();
 801da06:	f7ff fb09 	bl	801d01c <settings_get_details>
 801da0a:	4605      	mov	r5, r0
        const setting_detail_t *setting = setting_get_details(id, NULL);
 801da0c:	2100      	movs	r1, #0
 801da0e:	4630      	mov	r0, r6
 801da10:	f7ff ff58 	bl	801d8c4 <setting_get_details>
        if(setting) do {
 801da14:	4606      	mov	r6, r0
 801da16:	b990      	cbnz	r0, 801da3e <setting_get_description+0x4e>
 801da18:	e7f2      	b.n	801da00 <setting_get_description+0x10>
                        description = settings->descriptions[idx].description;
 801da1a:	f8de 4004 	ldr.w	r4, [lr, #4]
                } while(idx && description == NULL);
 801da1e:	b14b      	cbz	r3, 801da34 <setting_get_description+0x44>
 801da20:	b944      	cbnz	r4, 801da34 <setting_get_description+0x44>
                    if(settings->descriptions[--idx].id == setting->id) {
 801da22:	3b01      	subs	r3, #1
 801da24:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801da28:	f832 c033 	ldrh.w	ip, [r2, r3, lsl #3]
 801da2c:	8831      	ldrh	r1, [r6, #0]
 801da2e:	458c      	cmp	ip, r1
 801da30:	d1f5      	bne.n	801da1e <setting_get_description+0x2e>
 801da32:	e7f2      	b.n	801da1a <setting_get_description+0x2a>
        } while(description == NULL && (settings = settings->next));
 801da34:	2c00      	cmp	r4, #0
 801da36:	d1e3      	bne.n	801da00 <setting_get_description+0x10>
 801da38:	69ad      	ldr	r5, [r5, #24]
 801da3a:	2d00      	cmp	r5, #0
 801da3c:	d0e0      	beq.n	801da00 <setting_get_description+0x10>
            if(settings->descriptions) {
 801da3e:	696a      	ldr	r2, [r5, #20]
 801da40:	2a00      	cmp	r2, #0
 801da42:	d0f7      	beq.n	801da34 <setting_get_description+0x44>
                idx = settings->n_descriptions;
 801da44:	8a2b      	ldrh	r3, [r5, #16]
 801da46:	e7ec      	b.n	801da22 <setting_get_description+0x32>
 801da48:	20001c78 	.word	0x20001c78

0801da4c <setting_get_group_details>:
{
 801da4c:	b510      	push	{r4, lr}
 801da4e:	4604      	mov	r4, r0
    setting_details_t *details = settings_get_details();
 801da50:	f7ff fae4 	bl	801d01c <settings_get_details>
 801da54:	4601      	mov	r1, r0
    const setting_group_detail_t *detail = NULL;
 801da56:	2000      	movs	r0, #0
 801da58:	e011      	b.n	801da7e <setting_get_group_details+0x32>
        for(idx = 0; idx < details->n_groups; idx++) {
 801da5a:	3301      	adds	r3, #1
 801da5c:	780a      	ldrb	r2, [r1, #0]
 801da5e:	429a      	cmp	r2, r3
 801da60:	d90a      	bls.n	801da78 <setting_get_group_details+0x2c>
            if(details->groups[idx].id == id)
 801da62:	684a      	ldr	r2, [r1, #4]
 801da64:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 801da68:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 801da6c:	f892 c001 	ldrb.w	ip, [r2, #1]
 801da70:	45a4      	cmp	ip, r4
 801da72:	d1f2      	bne.n	801da5a <setting_get_group_details+0xe>
                detail = &details->groups[idx];
 801da74:	4610      	mov	r0, r2
 801da76:	e7f0      	b.n	801da5a <setting_get_group_details+0xe>
    } while(detail == NULL && (details = details->next));
 801da78:	b918      	cbnz	r0, 801da82 <setting_get_group_details+0x36>
 801da7a:	6989      	ldr	r1, [r1, #24]
 801da7c:	b109      	cbz	r1, 801da82 <setting_get_group_details+0x36>
        for(idx = 0; idx < details->n_groups; idx++) {
 801da7e:	2300      	movs	r3, #0
 801da80:	e7ec      	b.n	801da5c <setting_get_group_details+0x10>
}
 801da82:	bd10      	pop	{r4, pc}

0801da84 <settings_is_group_available>:
{
 801da84:	b570      	push	{r4, r5, r6, lr}
 801da86:	4606      	mov	r6, r0
    const setting_group_detail_t *group = setting_get_group_details(id);
 801da88:	f7ff ffe0 	bl	801da4c <setting_get_group_details>
    if(!group)
 801da8c:	2800      	cmp	r0, #0
 801da8e:	d050      	beq.n	801db32 <settings_is_group_available+0xae>
 801da90:	4604      	mov	r4, r0
    bool available = group->is_available ? group->is_available(group) : false;
 801da92:	6883      	ldr	r3, [r0, #8]
 801da94:	b11b      	cbz	r3, 801da9e <settings_is_group_available+0x1a>
 801da96:	4798      	blx	r3
 801da98:	4601      	mov	r1, r0
 801da9a:	2800      	cmp	r0, #0
 801da9c:	d14c      	bne.n	801db38 <settings_is_group_available+0xb4>
    if(!available) switch(group->id) {
 801da9e:	7863      	ldrb	r3, [r4, #1]
 801daa0:	3b02      	subs	r3, #2
 801daa2:	2b0c      	cmp	r3, #12
 801daa4:	d829      	bhi.n	801dafa <settings_is_group_available+0x76>
 801daa6:	e8df f003 	tbb	[pc, r3]
 801daaa:	4646      	.short	0x4646
 801daac:	0e46281a 	.word	0x0e46281a
 801dab0:	46282814 	.word	0x46282814
 801dab4:	2807      	.short	0x2807
 801dab6:	46          	.byte	0x46
 801dab7:	00          	.byte	0x00
            available = hal.probe.get_state != NULL;
 801dab8:	4b20      	ldr	r3, [pc, #128]	@ (801db3c <settings_is_group_available+0xb8>)
 801daba:	f8d3 10fc 	ldr.w	r1, [r3, #252]	@ 0xfc
 801dabe:	3900      	subs	r1, #0
 801dac0:	bf18      	it	ne
 801dac2:	2101      	movne	r1, #1
            break;
 801dac4:	e038      	b.n	801db38 <settings_is_group_available+0xb4>
            available = hal.driver_cap.spindle_sync;
 801dac6:	4b1d      	ldr	r3, [pc, #116]	@ (801db3c <settings_is_group_available+0xb8>)
 801dac8:	f893 11d9 	ldrb.w	r1, [r3, #473]	@ 0x1d9
 801dacc:	f001 0101 	and.w	r1, r1, #1
            break;
 801dad0:	e032      	b.n	801db38 <settings_is_group_available+0xb4>
            available = hal.driver_cap.spindle_pid;
 801dad2:	4b1a      	ldr	r3, [pc, #104]	@ (801db3c <settings_is_group_available+0xb8>)
 801dad4:	f893 11d9 	ldrb.w	r1, [r3, #473]	@ 0x1d9
 801dad8:	f3c1 1180 	ubfx	r1, r1, #6, #1
            break;
 801dadc:	e02c      	b.n	801db38 <settings_is_group_available+0xb4>
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(true).mask != 0;
 801dade:	4b17      	ldr	r3, [pc, #92]	@ (801db3c <settings_is_group_available+0xb8>)
 801dae0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801dae4:	b12b      	cbz	r3, 801daf2 <settings_is_group_available+0x6e>
 801dae6:	2001      	movs	r0, #1
 801dae8:	4798      	blx	r3
 801daea:	b2c0      	uxtb	r0, r0
 801daec:	b118      	cbz	r0, 801daf6 <settings_is_group_available+0x72>
 801daee:	2101      	movs	r1, #1
 801daf0:	e022      	b.n	801db38 <settings_is_group_available+0xb4>
 801daf2:	2100      	movs	r1, #0
 801daf4:	e020      	b.n	801db38 <settings_is_group_available+0xb4>
 801daf6:	2100      	movs	r1, #0
            break;
 801daf8:	e01e      	b.n	801db38 <settings_is_group_available+0xb4>
    if(!available) switch(group->id) {
 801dafa:	4d11      	ldr	r5, [pc, #68]	@ (801db40 <settings_is_group_available+0xbc>)
 801dafc:	2100      	movs	r1, #0
 801dafe:	e013      	b.n	801db28 <settings_is_group_available+0xa4>
                        for(idx = 0; idx < details->n_settings; idx++) {
 801db00:	3401      	adds	r4, #1
 801db02:	892b      	ldrh	r3, [r5, #8]
 801db04:	42a3      	cmp	r3, r4
 801db06:	d90c      	bls.n	801db22 <settings_is_group_available+0x9e>
                            if(details->settings[idx].group == id && (available = is_available(&details->settings[idx])))
 801db08:	68eb      	ldr	r3, [r5, #12]
 801db0a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801db0e:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801db12:	7883      	ldrb	r3, [r0, #2]
 801db14:	42b3      	cmp	r3, r6
 801db16:	d1f3      	bne.n	801db00 <settings_is_group_available+0x7c>
 801db18:	f7fe fe7e 	bl	801c818 <is_available>
 801db1c:	4601      	mov	r1, r0
 801db1e:	2800      	cmp	r0, #0
 801db20:	d0ee      	beq.n	801db00 <settings_is_group_available+0x7c>
                } while(!available && (details = details->next));
 801db22:	b949      	cbnz	r1, 801db38 <settings_is_group_available+0xb4>
 801db24:	69ad      	ldr	r5, [r5, #24]
 801db26:	b13d      	cbz	r5, 801db38 <settings_is_group_available+0xb4>
                    if(details->settings) {
 801db28:	68eb      	ldr	r3, [r5, #12]
 801db2a:	2b00      	cmp	r3, #0
 801db2c:	d0f9      	beq.n	801db22 <settings_is_group_available+0x9e>
                        for(idx = 0; idx < details->n_settings; idx++) {
 801db2e:	2400      	movs	r4, #0
 801db30:	e7e7      	b.n	801db02 <settings_is_group_available+0x7e>
        return false;
 801db32:	2100      	movs	r1, #0
 801db34:	e000      	b.n	801db38 <settings_is_group_available+0xb4>
    if(!available) switch(group->id) {
 801db36:	2101      	movs	r1, #1
}
 801db38:	4608      	mov	r0, r1
 801db3a:	bd70      	pop	{r4, r5, r6, pc}
 801db3c:	20001a90 	.word	0x20001a90
 801db40:	2000021c 	.word	0x2000021c

0801db44 <is_group_available>:
{
 801db44:	b508      	push	{r3, lr}
    return settings_is_group_available(setting->group);
 801db46:	7880      	ldrb	r0, [r0, #2]
 801db48:	f7ff ff9c 	bl	801da84 <settings_is_group_available>
}
 801db4c:	bd08      	pop	{r3, pc}

0801db4e <setting_datatype_to_external>:
    switch(datatype) {
 801db4e:	f1a0 030a 	sub.w	r3, r0, #10
 801db52:	2b01      	cmp	r3, #1
 801db54:	d900      	bls.n	801db58 <setting_datatype_to_external+0xa>
}
 801db56:	4770      	bx	lr
            datatype = Format_Integer;
 801db58:	2005      	movs	r0, #5
 801db5a:	e7fc      	b.n	801db56 <setting_datatype_to_external+0x8>

0801db5c <setting_is_list>:
    return setting->datatype == Format_Bitfield || setting->datatype == Format_XBitfield || setting->datatype == Format_RadioButtons;
 801db5c:	7b00      	ldrb	r0, [r0, #12]
 801db5e:	3801      	subs	r0, #1
 801db60:	b2c0      	uxtb	r0, r0
}
 801db62:	2802      	cmp	r0, #2
 801db64:	bf8c      	ite	hi
 801db66:	2000      	movhi	r0, #0
 801db68:	2001      	movls	r0, #1
 801db6a:	4770      	bx	lr

0801db6c <setting_remove_element>:
{
 801db6c:	b538      	push	{r3, r4, r5, lr}
 801db6e:	460c      	mov	r4, r1
    const setting_detail_t *setting = setting_get_details(id, NULL);
 801db70:	2100      	movs	r1, #0
 801db72:	f7ff fea7 	bl	801d8c4 <setting_get_details>
    if(setting && setting_is_list(setting))
 801db76:	b118      	cbz	r0, 801db80 <setting_remove_element+0x14>
 801db78:	4605      	mov	r5, r0
 801db7a:	f7ff ffef 	bl	801db5c <setting_is_list>
 801db7e:	b900      	cbnz	r0, 801db82 <setting_remove_element+0x16>
}
 801db80:	bd38      	pop	{r3, r4, r5, pc}
        remove_element((char *)setting->format, pos);
 801db82:	4621      	mov	r1, r4
 801db84:	6928      	ldr	r0, [r5, #16]
 801db86:	f7fe fe51 	bl	801c82c <remove_element>
}
 801db8a:	e7f9      	b.n	801db80 <setting_remove_element+0x14>

0801db8c <setting_remove_elements>:
{
 801db8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db90:	4680      	mov	r8, r0
 801db92:	460c      	mov	r4, r1
    if((setting = setting_get_details(id, NULL))) {
 801db94:	2100      	movs	r1, #0
 801db96:	f7ff fe95 	bl	801d8c4 <setting_get_details>
 801db9a:	b310      	cbz	r0, 801dbe2 <setting_remove_elements+0x56>
        char *format = (char *)setting->format, *s;
 801db9c:	6907      	ldr	r7, [r0, #16]
        uint_fast8_t idx, entries = strnumentries(format, ',');
 801db9e:	212c      	movs	r1, #44	@ 0x2c
 801dba0:	4638      	mov	r0, r7
 801dba2:	f7ff f93f 	bl	801ce24 <strnumentries>
 801dba6:	4606      	mov	r6, r0
        for(idx = 0; idx < entries; idx++ ) {
 801dba8:	2500      	movs	r5, #0
 801dbaa:	e001      	b.n	801dbb0 <setting_remove_elements+0x24>
            mask >>= 1;
 801dbac:	0864      	lsrs	r4, r4, #1
        for(idx = 0; idx < entries; idx++ ) {
 801dbae:	3501      	adds	r5, #1
 801dbb0:	42b5      	cmp	r5, r6
 801dbb2:	d209      	bcs.n	801dbc8 <setting_remove_elements+0x3c>
            if(!(mask & 0x1))
 801dbb4:	f014 0f01 	tst.w	r4, #1
 801dbb8:	d1f8      	bne.n	801dbac <setting_remove_elements+0x20>
                setting_remove_element(id, idx);
 801dbba:	4629      	mov	r1, r5
 801dbbc:	4640      	mov	r0, r8
 801dbbe:	f7ff ffd5 	bl	801db6c <setting_remove_element>
 801dbc2:	e7f3      	b.n	801dbac <setting_remove_elements+0x20>
            *s = '\0';
 801dbc4:	2300      	movs	r3, #0
 801dbc6:	7023      	strb	r3, [r4, #0]
        while((s = strrchr(format, ','))) {
 801dbc8:	212c      	movs	r1, #44	@ 0x2c
 801dbca:	4638      	mov	r0, r7
 801dbcc:	f007 f8f8 	bl	8024dc0 <strrchr>
 801dbd0:	4604      	mov	r4, r0
 801dbd2:	b130      	cbz	r0, 801dbe2 <setting_remove_elements+0x56>
            if(strncmp(s, ",N/A", 4))
 801dbd4:	2204      	movs	r2, #4
 801dbd6:	4904      	ldr	r1, [pc, #16]	@ (801dbe8 <setting_remove_elements+0x5c>)
 801dbd8:	4620      	mov	r0, r4
 801dbda:	f007 f8cc 	bl	8024d76 <strncmp>
 801dbde:	2800      	cmp	r0, #0
 801dbe0:	d0f0      	beq.n	801dbc4 <setting_remove_elements+0x38>
}
 801dbe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbe6:	bf00      	nop
 801dbe8:	0802c854 	.word	0x0802c854

0801dbec <setting_validate_me>:
{
 801dbec:	b570      	push	{r4, r5, r6, lr}
 801dbee:	4604      	mov	r4, r0
 801dbf0:	460d      	mov	r5, r1
    switch(setting->datatype) {
 801dbf2:	7b03      	ldrb	r3, [r0, #12]
 801dbf4:	2b0b      	cmp	r3, #11
 801dbf6:	d834      	bhi.n	801dc62 <setting_validate_me+0x76>
 801dbf8:	e8df f003 	tbb	[pc, r3]
 801dbfc:	06060606 	.word	0x06060606
 801dc00:	28090606 	.word	0x28090606
 801dc04:	0606330c 	.word	0x0606330c
            status = setting_validate_me_uint(setting, svalue);
 801dc08:	f7ff f963 	bl	801ced2 <setting_validate_me_uint>
}
 801dc0c:	bd70      	pop	{r4, r5, r6, pc}
            status = validate_value(setting, value);
 801dc0e:	f7ff f99d 	bl	801cf4c <validate_value>
            break;
 801dc12:	e7fb      	b.n	801dc0c <setting_validate_me+0x20>
                uint_fast16_t len = strlen(svalue);
 801dc14:	4608      	mov	r0, r1
 801dc16:	f7ea fa73 	bl	8008100 <strlen>
 801dc1a:	4606      	mov	r6, r0
                if(hal.stream.state.webui_connected && len == strlen(PASSWORD_MASK) && !strcmp(PASSWORD_MASK, svalue))
 801dc1c:	4b12      	ldr	r3, [pc, #72]	@ (801dc68 <setting_validate_me+0x7c>)
 801dc1e:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 801dc22:	f013 0f02 	tst.w	r3, #2
 801dc26:	d001      	beq.n	801dc2c <setting_validate_me+0x40>
 801dc28:	2808      	cmp	r0, #8
 801dc2a:	d007      	beq.n	801dc3c <setting_validate_me+0x50>
                    status = validate_value(setting, (float)len);
 801dc2c:	ee07 6a90 	vmov	s15, r6
 801dc30:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801dc34:	4620      	mov	r0, r4
 801dc36:	f7ff f989 	bl	801cf4c <validate_value>
 801dc3a:	e7e7      	b.n	801dc0c <setting_validate_me+0x20>
                if(hal.stream.state.webui_connected && len == strlen(PASSWORD_MASK) && !strcmp(PASSWORD_MASK, svalue))
 801dc3c:	4629      	mov	r1, r5
 801dc3e:	480b      	ldr	r0, [pc, #44]	@ (801dc6c <setting_validate_me+0x80>)
 801dc40:	f7ea f9fe 	bl	8008040 <strcmp>
 801dc44:	2800      	cmp	r0, #0
 801dc46:	d1f1      	bne.n	801dc2c <setting_validate_me+0x40>
                    status = Status_InvalidStatement;
 801dc48:	2003      	movs	r0, #3
 801dc4a:	e7df      	b.n	801dc0c <setting_validate_me+0x20>
                uint_fast16_t len = strlen(svalue);
 801dc4c:	4608      	mov	r0, r1
 801dc4e:	f7ea fa57 	bl	8008100 <strlen>
 801dc52:	ee00 0a10 	vmov	s0, r0
                status = validate_value(setting, (float)len);
 801dc56:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801dc5a:	4620      	mov	r0, r4
 801dc5c:	f7ff f976 	bl	801cf4c <validate_value>
            break;
 801dc60:	e7d4      	b.n	801dc0c <setting_validate_me+0x20>
    switch(setting->datatype) {
 801dc62:	2000      	movs	r0, #0
 801dc64:	e7d2      	b.n	801dc0c <setting_validate_me+0x20>
 801dc66:	bf00      	nop
 801dc68:	20001a90 	.word	0x20001a90
 801dc6c:	0802c800 	.word	0x0802c800

0801dc70 <settings_store_setting>:

// A helper method to set settings from command line
status_code_t settings_store_setting (setting_id_t id, char *svalue)
{
 801dc70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc72:	b085      	sub	sp, #20
 801dc74:	4606      	mov	r6, r0
 801dc76:	460c      	mov	r4, r1
    uint_fast8_t set_idx = 0;
 801dc78:	2300      	movs	r3, #0
 801dc7a:	9303      	str	r3, [sp, #12]
    uint32_t int_value = 0;
 801dc7c:	9302      	str	r3, [sp, #8]
    float value = NAN;
 801dc7e:	4b5c      	ldr	r3, [pc, #368]	@ (801ddf0 <settings_store_setting+0x180>)
 801dc80:	9301      	str	r3, [sp, #4]
    status_code_t status = Status_OK;
    setting_details_t *set;
    const setting_detail_t *setting = setting_get_details(id, &set);
 801dc82:	4669      	mov	r1, sp
 801dc84:	f7ff fe1e 	bl	801d8c4 <setting_get_details>

    if(setting == NULL) {
 801dc88:	4605      	mov	r5, r0
 801dc8a:	b938      	cbnz	r0, 801dc9c <settings_store_setting+0x2c>
        if(id == Setting_SpindlePWMBehaviour) {
 801dc8c:	2e07      	cmp	r6, #7
 801dc8e:	f040 80aa 	bne.w	801dde6 <settings_store_setting+0x176>
            set = &setting_details;
 801dc92:	4b58      	ldr	r3, [pc, #352]	@ (801ddf4 <settings_store_setting+0x184>)
 801dc94:	9300      	str	r3, [sp, #0]
            setting = &setting_detail[Setting_SpindlePWMBehaviour];
 801dc96:	4d58      	ldr	r5, [pc, #352]	@ (801ddf8 <settings_store_setting+0x188>)
 801dc98:	e000      	b.n	801dc9c <settings_store_setting+0x2c>
            return Status_SettingDisabled;
    }

    // Trim leading spaces
    while(*svalue == ' ')
        svalue++;
 801dc9a:	3401      	adds	r4, #1
    while(*svalue == ' ')
 801dc9c:	7823      	ldrb	r3, [r4, #0]
 801dc9e:	2b20      	cmp	r3, #32
 801dca0:	d0fb      	beq.n	801dc9a <settings_store_setting+0x2a>

    if(setting->datatype == Format_Decimal)  {
 801dca2:	7b2b      	ldrb	r3, [r5, #12]
 801dca4:	2b06      	cmp	r3, #6
 801dca6:	d022      	beq.n	801dcee <settings_store_setting+0x7e>
    return datatype == Format_String || datatype == Format_Password || datatype == Format_IPv4;
 801dca8:	3b07      	subs	r3, #7
 801dcaa:	b2db      	uxtb	r3, r3
        if(!read_float(svalue, &set_idx, &value) && setting_is_core(setting->type))
            return Status_BadNumberFormat;
    } else if(!setting_is_string(setting->datatype) && read_uint(svalue, &set_idx, &int_value) != Status_OK && setting_is_core(setting->type))
 801dcac:	2b02      	cmp	r3, #2
 801dcae:	d82a      	bhi.n	801dd06 <settings_store_setting+0x96>
        return Status_BadNumberFormat;

    if((status = setting_validate_me(setting, value, svalue)) != Status_OK) {
 801dcb0:	4621      	mov	r1, r4
 801dcb2:	ed9d 0a01 	vldr	s0, [sp, #4]
 801dcb6:	4628      	mov	r0, r5
 801dcb8:	f7ff ff98 	bl	801dbec <setting_validate_me>
 801dcbc:	4607      	mov	r7, r0
 801dcbe:	bb70      	cbnz	r0, 801dd1e <settings_store_setting+0xae>
            status =  Status_SettingStepPulseMin;

        return status;
    }

    switch(setting->type) {
 801dcc0:	7f2a      	ldrb	r2, [r5, #28]
 801dcc2:	2a07      	cmp	r2, #7
 801dcc4:	d863      	bhi.n	801dd8e <settings_store_setting+0x11e>
 801dcc6:	2301      	movs	r3, #1
 801dcc8:	4093      	lsls	r3, r2
 801dcca:	f013 0faa 	tst.w	r3, #170	@ 0xaa
 801dcce:	d14a      	bne.n	801dd66 <settings_store_setting+0xf6>
 801dcd0:	f013 0f55 	tst.w	r3, #85	@ 0x55
 801dcd4:	d05b      	beq.n	801dd8e <settings_store_setting+0x11e>

        case Setting_NonCore:
        case Setting_IsExtended:
        case Setting_IsLegacy:
        case Setting_IsExpanded:
            switch(setting->datatype) {
 801dcd6:	7b2b      	ldrb	r3, [r5, #12]
 801dcd8:	2b0b      	cmp	r3, #11
 801dcda:	f200 8086 	bhi.w	801ddea <settings_store_setting+0x17a>
 801dcde:	e8df f003 	tbb	[pc, r3]
 801dce2:	3434      	.short	0x3434
 801dce4:	3e2d3434 	.word	0x3e2d3434
 801dce8:	84282824 	.word	0x84282824
 801dcec:	3934      	.short	0x3934
        if(!read_float(svalue, &set_idx, &value) && setting_is_core(setting->type))
 801dcee:	aa01      	add	r2, sp, #4
 801dcf0:	a903      	add	r1, sp, #12
 801dcf2:	4620      	mov	r0, r4
 801dcf4:	f7f7 ff66 	bl	8015bc4 <read_float>
 801dcf8:	2800      	cmp	r0, #0
 801dcfa:	d1d9      	bne.n	801dcb0 <settings_store_setting+0x40>
 801dcfc:	7f2b      	ldrb	r3, [r5, #28]
 801dcfe:	2b01      	cmp	r3, #1
 801dd00:	d9d6      	bls.n	801dcb0 <settings_store_setting+0x40>
            return Status_BadNumberFormat;
 801dd02:	2702      	movs	r7, #2
 801dd04:	e044      	b.n	801dd90 <settings_store_setting+0x120>
    } else if(!setting_is_string(setting->datatype) && read_uint(svalue, &set_idx, &int_value) != Status_OK && setting_is_core(setting->type))
 801dd06:	aa02      	add	r2, sp, #8
 801dd08:	a903      	add	r1, sp, #12
 801dd0a:	4620      	mov	r0, r4
 801dd0c:	f7f7 ff10 	bl	8015b30 <read_uint>
 801dd10:	2800      	cmp	r0, #0
 801dd12:	d0cd      	beq.n	801dcb0 <settings_store_setting+0x40>
 801dd14:	7f2b      	ldrb	r3, [r5, #28]
 801dd16:	2b01      	cmp	r3, #1
 801dd18:	d9ca      	bls.n	801dcb0 <settings_store_setting+0x40>
        return Status_BadNumberFormat;
 801dd1a:	2702      	movs	r7, #2
 801dd1c:	e038      	b.n	801dd90 <settings_store_setting+0x120>
        if(setting == Setting_PulseMicroseconds && status == Status_SettingValueOutOfRange)
 801dd1e:	2d00      	cmp	r5, #0
 801dd20:	d136      	bne.n	801dd90 <settings_store_setting+0x120>
 801dd22:	2834      	cmp	r0, #52	@ 0x34
 801dd24:	d134      	bne.n	801dd90 <settings_store_setting+0x120>
            status =  Status_SettingStepPulseMin;
 801dd26:	2706      	movs	r7, #6
        return status;
 801dd28:	e032      	b.n	801dd90 <settings_store_setting+0x120>

                case Format_Decimal:
                    *((float *)(setting->value)) = value;
 801dd2a:	6a2b      	ldr	r3, [r5, #32]
 801dd2c:	9a01      	ldr	r2, [sp, #4]
 801dd2e:	601a      	str	r2, [r3, #0]
                    break;
 801dd30:	e02d      	b.n	801dd8e <settings_store_setting+0x11e>

                case Format_String:
                case Format_Password:
                    strcpy(((char *)(setting->value)), svalue);
 801dd32:	4621      	mov	r1, r4
 801dd34:	6a28      	ldr	r0, [r5, #32]
 801dd36:	f007 f952 	bl	8024fde <strcpy>
                    break;
 801dd3a:	e028      	b.n	801dd8e <settings_store_setting+0x11e>

                case Format_AxisMask:
                    *((uint8_t *)(setting->value)) = (uint8_t)int_value & AXES_BITMASK;
 801dd3c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801dd40:	6a2a      	ldr	r2, [r5, #32]
 801dd42:	f003 0307 	and.w	r3, r3, #7
 801dd46:	7013      	strb	r3, [r2, #0]
                    break;
 801dd48:	e021      	b.n	801dd8e <settings_store_setting+0x11e>
                case Format_Bool:
                case Format_Bitfield:
                case Format_XBitfield:
                case Format_RadioButtons:
                case Format_Int8:
                    *((uint8_t *)(setting->value)) = (uint8_t)int_value;
 801dd4a:	6a2b      	ldr	r3, [r5, #32]
 801dd4c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801dd50:	701a      	strb	r2, [r3, #0]
                    break;
 801dd52:	e01c      	b.n	801dd8e <settings_store_setting+0x11e>

                case Format_Int16:
                    *((uint16_t *)(setting->value)) = (uint16_t)int_value;
 801dd54:	6a2b      	ldr	r3, [r5, #32]
 801dd56:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801dd5a:	801a      	strh	r2, [r3, #0]
                    break;
 801dd5c:	e017      	b.n	801dd8e <settings_store_setting+0x11e>

                case Format_Integer:
                    *((uint32_t *)(setting->value)) = (uint32_t)int_value;
 801dd5e:	6a2b      	ldr	r3, [r5, #32]
 801dd60:	9a02      	ldr	r2, [sp, #8]
 801dd62:	601a      	str	r2, [r3, #0]
                    break;
 801dd64:	e013      	b.n	801dd8e <settings_store_setting+0x11e>

        case Setting_NonCoreFn:
        case Setting_IsExtendedFn:
        case Setting_IsLegacyFn:
        case Setting_IsExpandedFn:
            switch(setting->datatype) {
 801dd66:	7b2b      	ldrb	r3, [r5, #12]
 801dd68:	2b06      	cmp	r3, #6
 801dd6a:	d00a      	beq.n	801dd82 <settings_store_setting+0x112>
 801dd6c:	d313      	bcc.n	801dd96 <settings_store_setting+0x126>
 801dd6e:	3b07      	subs	r3, #7
 801dd70:	b2db      	uxtb	r3, r3
 801dd72:	2b02      	cmp	r3, #2
 801dd74:	d80f      	bhi.n	801dd96 <settings_store_setting+0x126>
                    break;

                case Format_String:
                case Format_Password:
                case Format_IPv4:
                    status = ((setting_set_string_ptr)(setting->value))(id, svalue);
 801dd76:	6a2b      	ldr	r3, [r5, #32]
 801dd78:	4621      	mov	r1, r4
 801dd7a:	4630      	mov	r0, r6
 801dd7c:	4798      	blx	r3
 801dd7e:	4607      	mov	r7, r0
                    break;
 801dd80:	e005      	b.n	801dd8e <settings_store_setting+0x11e>
                    status = ((setting_set_float_ptr)(setting->value))(id, value);
 801dd82:	6a2b      	ldr	r3, [r5, #32]
 801dd84:	ed9d 0a01 	vldr	s0, [sp, #4]
 801dd88:	4630      	mov	r0, r6
 801dd8a:	4798      	blx	r3
 801dd8c:	4607      	mov	r7, r0
                    break;
            }
            break;
    }

    if(status == Status_OK) {
 801dd8e:	b147      	cbz	r7, 801dda2 <settings_store_setting+0x132>
            set->on_changed(&settings, changed);
        }
    }

    return status;
}
 801dd90:	4638      	mov	r0, r7
 801dd92:	b005      	add	sp, #20
 801dd94:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    status = ((setting_set_int_ptr)(setting->value))(id, (uint_fast16_t)int_value);
 801dd96:	6a2b      	ldr	r3, [r5, #32]
 801dd98:	9902      	ldr	r1, [sp, #8]
 801dd9a:	4630      	mov	r0, r6
 801dd9c:	4798      	blx	r3
 801dd9e:	4607      	mov	r7, r0
                    break;
 801dda0:	e7f5      	b.n	801dd8e <settings_store_setting+0x11e>
        xbar_set_homing_source();
 801dda2:	f7ef f915 	bl	800cfd0 <xbar_set_homing_source>
        if(set->save)
 801dda6:	9b00      	ldr	r3, [sp, #0]
 801dda8:	6a1b      	ldr	r3, [r3, #32]
 801ddaa:	b103      	cbz	r3, 801ddae <settings_store_setting+0x13e>
            set->save();
 801ddac:	4798      	blx	r3
        if(set->on_changed) {
 801ddae:	9b00      	ldr	r3, [sp, #0]
 801ddb0:	69db      	ldr	r3, [r3, #28]
 801ddb2:	2b00      	cmp	r3, #0
 801ddb4:	d0ec      	beq.n	801dd90 <settings_store_setting+0x120>
            settings_changed_flags_t changed = {0};
 801ddb6:	f04f 0400 	mov.w	r4, #0
            changed.spindle = settings_changed_spindle() || machine_mode_changed;
 801ddba:	f7ff f911 	bl	801cfe0 <settings_changed_spindle>
 801ddbe:	b920      	cbnz	r0, 801ddca <settings_store_setting+0x15a>
 801ddc0:	4b0e      	ldr	r3, [pc, #56]	@ (801ddfc <settings_store_setting+0x18c>)
 801ddc2:	781b      	ldrb	r3, [r3, #0]
 801ddc4:	b16b      	cbz	r3, 801dde2 <settings_store_setting+0x172>
 801ddc6:	2301      	movs	r3, #1
 801ddc8:	e000      	b.n	801ddcc <settings_store_setting+0x15c>
 801ddca:	2301      	movs	r3, #1
 801ddcc:	f363 0400 	bfi	r4, r3, #0, #1
            machine_mode_changed = false;
 801ddd0:	4b0a      	ldr	r3, [pc, #40]	@ (801ddfc <settings_store_setting+0x18c>)
 801ddd2:	2200      	movs	r2, #0
 801ddd4:	701a      	strb	r2, [r3, #0]
            set->on_changed(&settings, changed);
 801ddd6:	9b00      	ldr	r3, [sp, #0]
 801ddd8:	69db      	ldr	r3, [r3, #28]
 801ddda:	4621      	mov	r1, r4
 801dddc:	4808      	ldr	r0, [pc, #32]	@ (801de00 <settings_store_setting+0x190>)
 801ddde:	4798      	blx	r3
 801dde0:	e7d6      	b.n	801dd90 <settings_store_setting+0x120>
            changed.spindle = settings_changed_spindle() || machine_mode_changed;
 801dde2:	2300      	movs	r3, #0
 801dde4:	e7f2      	b.n	801ddcc <settings_store_setting+0x15c>
            return Status_SettingDisabled;
 801dde6:	2735      	movs	r7, #53	@ 0x35
 801dde8:	e7d2      	b.n	801dd90 <settings_store_setting+0x120>
 801ddea:	2702      	movs	r7, #2
 801ddec:	e7d0      	b.n	801dd90 <settings_store_setting+0x120>
 801ddee:	bf00      	nop
 801ddf0:	7fc00000 	.word	0x7fc00000
 801ddf4:	2000021c 	.word	0x2000021c
 801ddf8:	0802f808 	.word	0x0802f808
 801ddfc:	200024a4 	.word	0x200024a4
 801de00:	200024a8 	.word	0x200024a8

0801de04 <settings_add_spindle_type>:

bool settings_add_spindle_type (const char *type)
{
 801de04:	b570      	push	{r4, r5, r6, lr}
 801de06:	4604      	mov	r4, r0
    bool ok;

    if((ok = strlen(spindle_types) + strlen(type) + 1 < sizeof(spindle_types))) {
 801de08:	480d      	ldr	r0, [pc, #52]	@ (801de40 <settings_add_spindle_type+0x3c>)
 801de0a:	f7ea f979 	bl	8008100 <strlen>
 801de0e:	4605      	mov	r5, r0
 801de10:	4620      	mov	r0, r4
 801de12:	f7ea f975 	bl	8008100 <strlen>
 801de16:	182b      	adds	r3, r5, r0
 801de18:	3301      	adds	r3, #1
 801de1a:	2b63      	cmp	r3, #99	@ 0x63
 801de1c:	bf94      	ite	ls
 801de1e:	2601      	movls	r6, #1
 801de20:	2600      	movhi	r6, #0
 801de22:	d806      	bhi.n	801de32 <settings_add_spindle_type+0x2e>
        if(*spindle_types != '\0')
 801de24:	4b06      	ldr	r3, [pc, #24]	@ (801de40 <settings_add_spindle_type+0x3c>)
 801de26:	781b      	ldrb	r3, [r3, #0]
 801de28:	b92b      	cbnz	r3, 801de36 <settings_add_spindle_type+0x32>
            strcat(spindle_types, ",");
        strcat(spindle_types, type);
 801de2a:	4621      	mov	r1, r4
 801de2c:	4804      	ldr	r0, [pc, #16]	@ (801de40 <settings_add_spindle_type+0x3c>)
 801de2e:	f006 ff86 	bl	8024d3e <strcat>
    }

    return ok;
}
 801de32:	4630      	mov	r0, r6
 801de34:	bd70      	pop	{r4, r5, r6, pc}
            strcat(spindle_types, ",");
 801de36:	4b03      	ldr	r3, [pc, #12]	@ (801de44 <settings_add_spindle_type+0x40>)
 801de38:	881a      	ldrh	r2, [r3, #0]
 801de3a:	4b01      	ldr	r3, [pc, #4]	@ (801de40 <settings_add_spindle_type+0x3c>)
 801de3c:	535a      	strh	r2, [r3, r5]
 801de3e:	e7f4      	b.n	801de2a <settings_add_spindle_type+0x26>
 801de40:	20002440 	.word	0x20002440
 801de44:	0802c400 	.word	0x0802c400

0801de48 <settings_clear>:

// Clear settings chain
void settings_clear (void)
{
    setting_details.next = NULL;
 801de48:	4b02      	ldr	r3, [pc, #8]	@ (801de54 <settings_clear+0xc>)
 801de4a:	2200      	movs	r2, #0
 801de4c:	619a      	str	r2, [r3, #24]
    settingsd = &setting_details;
 801de4e:	4a02      	ldr	r2, [pc, #8]	@ (801de58 <settings_clear+0x10>)
 801de50:	6013      	str	r3, [r2, #0]
}
 801de52:	4770      	bx	lr
 801de54:	2000021c 	.word	0x2000021c
 801de58:	20000218 	.word	0x20000218

0801de5c <settings_init>:

// Initialize the config subsystem
void settings_init (void)
{
 801de5c:	b538      	push	{r3, r4, r5, lr}
    settings_changed_flags_t changed = {0};
 801de5e:	f04f 0500 	mov.w	r5, #0
    grbl.tool_table.read = settings_read_tool_data;
    grbl.tool_table.write = settings_write_tool_data;
    grbl.tool_table.clear = settings_clear_tool_data;
#else
    static tool_data_t tools;
    if(grbl.tool_table.tool == NULL) {
 801de62:	4b71      	ldr	r3, [pc, #452]	@ (801e028 <settings_init+0x1cc>)
 801de64:	69db      	ldr	r3, [r3, #28]
 801de66:	2b00      	cmp	r3, #0
 801de68:	f000 8082 	beq.w	801df70 <settings_init+0x114>
        grbl.tool_table.n_tools = 0;
        grbl.tool_table.tool = &tools;
    }
#endif

    if(!read_global_settings()) {
 801de6c:	f7ff fc46 	bl	801d6fc <read_global_settings>
 801de70:	2800      	cmp	r0, #0
 801de72:	f040 8083 	bne.w	801df7c <settings_init+0x120>

        settings_restore_t settings = settings_all;
        settings.defaults = 1; // Ensure global settings get restored

        if(hal.nvs.type != NVS_None)
 801de76:	4b6d      	ldr	r3, [pc, #436]	@ (801e02c <settings_init+0x1d0>)
 801de78:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801de7c:	b11b      	cbz	r3, 801de86 <settings_init+0x2a>
            grbl.report.status_message(Status_SettingReadFail);
 801de7e:	4b6a      	ldr	r3, [pc, #424]	@ (801e028 <settings_init+0x1cc>)
 801de80:	689b      	ldr	r3, [r3, #8]
 801de82:	2007      	movs	r0, #7
 801de84:	4798      	blx	r3

        settings_restore(settings); // Force restore all non-volatile storage data.
 801de86:	f04f 001f 	mov.w	r0, #31
 801de8a:	f7ff fc93 	bl	801d7b4 <settings_restore>
        report_init();
 801de8e:	f7fb fc27 	bl	80196e0 <report_init>
#if COMPATIBILITY_LEVEL <= 1
        report_grbl_settings(true, NULL);
 801de92:	2100      	movs	r1, #0
 801de94:	2001      	movs	r0, #1
 801de96:	f7fb fcc3 	bl	8019820 <report_grbl_settings>
#else
        report_grbl_settings(false, NULL);
#endif
        changed.spindle = settings_changed_spindle();
 801de9a:	f7ff f8a1 	bl	801cfe0 <settings_changed_spindle>
 801de9e:	f360 0500 	bfi	r5, r0, #0, #1

        if(hal.probe.configure) // Initialize probe invert mask.
            hal.probe.configure(false, false);
    }

    settings.offset_lock.mask &= ~0b111; // TODO: remove
 801dea2:	4c63      	ldr	r4, [pc, #396]	@ (801e030 <settings_init+0x1d4>)
 801dea4:	f894 3102 	ldrb.w	r3, [r4, #258]	@ 0x102
 801dea8:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801deac:	f884 3102 	strb.w	r3, [r4, #258]	@ 0x102
    settings.offset_lock.mask |= settings.parking.flags.offset_lock; // TODO: remove
 801deb0:	f894 2128 	ldrb.w	r2, [r4, #296]	@ 0x128
 801deb4:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 801deb8:	f884 3102 	strb.w	r3, [r4, #258]	@ 0x102

    xbar_set_homing_source();
 801debc:	f7ef f888 	bl	800cfd0 <xbar_set_homing_source>

    tmp_set_soft_limits();
 801dec0:	f7fe f93a 	bl	801c138 <tmp_set_soft_limits>
    sys.hard_limits.mask = settings.limits.flags.hard_enabled ? AXES_BITMASK : 0;
 801dec4:	f894 3124 	ldrb.w	r3, [r4, #292]	@ 0x124
 801dec8:	f013 0301 	ands.w	r3, r3, #1
 801decc:	d000      	beq.n	801ded0 <settings_init+0x74>
 801dece:	2307      	movs	r3, #7
 801ded0:	4a58      	ldr	r2, [pc, #352]	@ (801e034 <settings_init+0x1d8>)
 801ded2:	f882 3094 	strb.w	r3, [r2, #148]	@ 0x94
    tmp_set_hard_limits();

    if(spindle_get_count() == 0)
 801ded6:	f000 fc01 	bl	801e6dc <spindle_get_count>
 801deda:	2800      	cmp	r0, #0
 801dedc:	d07e      	beq.n	801dfdc <settings_init+0x180>
        spindle_add_null();

    spindle_cap_t spindle_cap = spindle_get_caps(false);
 801dede:	2000      	movs	r0, #0
 801dee0:	f000 fb0e 	bl	801e500 <spindle_get_caps>
    if(spindle_cap.gpio_controlled) {
 801dee4:	f410 7f80 	tst.w	r0, #256	@ 0x100
 801dee8:	d17b      	bne.n	801dfe2 <settings_init+0x186>
        spindle_state.pwm = spindle_cap.pwm_invert;

        setting_remove_elements(Setting_SpindleInvertMask, spindle_state.mask);
    }

    setting_remove_elements(Setting_ControlInvertMask, hal.signals_cap.mask & ~limits_override.mask);
 801deea:	4c50      	ldr	r4, [pc, #320]	@ (801e02c <settings_init+0x1d0>)
 801deec:	f8b4 11dc 	ldrh.w	r1, [r4, #476]	@ 0x1dc
 801def0:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 801def4:	200e      	movs	r0, #14
 801def6:	f7ff fe49 	bl	801db8c <setting_remove_elements>

    if(hal.stepper.get_ganged)
 801defa:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 801defe:	b12b      	cbz	r3, 801df0c <settings_init+0xb0>
        setting_remove_elements(Setting_GangedDirInvertMask, hal.stepper.get_ganged(false).mask);
 801df00:	2000      	movs	r0, #0
 801df02:	4798      	blx	r3
 801df04:	b2c1      	uxtb	r1, r0
 801df06:	2008      	movs	r0, #8
 801df08:	f7ff fe40 	bl	801db8c <setting_remove_elements>

    setting_remove_elements(Setting_CoolantInvertMask, hal.coolant_cap.mask);
 801df0c:	4c47      	ldr	r4, [pc, #284]	@ (801e02c <settings_init+0x1d0>)
 801df0e:	f894 11e4 	ldrb.w	r1, [r4, #484]	@ 0x1e4
 801df12:	200f      	movs	r0, #15
 801df14:	f7ff fe3a 	bl	801db8c <setting_remove_elements>

#if COMPATIBILITY_LEVEL <= 1
    if(hal.homing.get_state == NULL) {
 801df18:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801df1a:	2b00      	cmp	r3, #0
 801df1c:	d070      	beq.n	801e000 <settings_init+0x1a4>
        homing.use_limit_switches = Off;
        setting_remove_elements(Setting_HomingEnable, homing.value);
    }
#endif

    setting_details_t *details = setting_details.next;
 801df1e:	4b46      	ldr	r3, [pc, #280]	@ (801e038 <settings_init+0x1dc>)
 801df20:	699c      	ldr	r4, [r3, #24]

    if(details) do {
 801df22:	2c00      	cmp	r4, #0
 801df24:	d178      	bne.n	801e018 <settings_init+0x1bc>
            details->load();
        if(details->on_changed)
            details->on_changed(&settings, changed);
    } while((details = details->next));

    setting_details.on_changed = hal.settings_changed;
 801df26:	4b41      	ldr	r3, [pc, #260]	@ (801e02c <settings_init+0x1d0>)
 801df28:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 801df2c:	4b42      	ldr	r3, [pc, #264]	@ (801e038 <settings_init+0x1dc>)
 801df2e:	61da      	str	r2, [r3, #28]

    // Sanity checks for spindle configuration
    if(settings.spindle.flags.type >= spindle_get_count())
 801df30:	4b3f      	ldr	r3, [pc, #252]	@ (801e030 <settings_init+0x1d4>)
 801df32:	f893 40e7 	ldrb.w	r4, [r3, #231]	@ 0xe7
 801df36:	f3c4 0484 	ubfx	r4, r4, #2, #5
 801df3a:	f000 fbcf 	bl	801e6dc <spindle_get_count>
 801df3e:	4284      	cmp	r4, r0
 801df40:	db06      	blt.n	801df50 <settings_init+0xf4>
        settings.spindle.flags.type = 0;
 801df42:	4b3b      	ldr	r3, [pc, #236]	@ (801e030 <settings_init+0x1d4>)
 801df44:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801df48:	f36f 0286 	bfc	r2, #2, #5
 801df4c:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    if(settings.offset_lock.encoder_spindle >= spindle_get_count())
 801df50:	4b37      	ldr	r3, [pc, #220]	@ (801e030 <settings_init+0x1d4>)
 801df52:	f893 4102 	ldrb.w	r4, [r3, #258]	@ 0x102
 801df56:	08e4      	lsrs	r4, r4, #3
 801df58:	f000 fbc0 	bl	801e6dc <spindle_get_count>
 801df5c:	4284      	cmp	r4, r0
 801df5e:	db06      	blt.n	801df6e <settings_init+0x112>
        settings.offset_lock.encoder_spindle = 0;
 801df60:	4b33      	ldr	r3, [pc, #204]	@ (801e030 <settings_init+0x1d4>)
 801df62:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 801df66:	f36f 02c7 	bfc	r2, #3, #5
 801df6a:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
}
 801df6e:	bd38      	pop	{r3, r4, r5, pc}
        grbl.tool_table.n_tools = 0;
 801df70:	4b2d      	ldr	r3, [pc, #180]	@ (801e028 <settings_init+0x1cc>)
 801df72:	2200      	movs	r2, #0
 801df74:	619a      	str	r2, [r3, #24]
        grbl.tool_table.tool = &tools;
 801df76:	4a31      	ldr	r2, [pc, #196]	@ (801e03c <settings_init+0x1e0>)
 801df78:	61da      	str	r2, [r3, #28]
 801df7a:	e777      	b.n	801de6c <settings_init+0x10>
        memset(grbl.tool_table.tool, 0, sizeof(tool_data_t)); // First entry is for tools not in tool table
 801df7c:	492a      	ldr	r1, [pc, #168]	@ (801e028 <settings_init+0x1cc>)
 801df7e:	69cb      	ldr	r3, [r1, #28]
 801df80:	2200      	movs	r2, #0
 801df82:	601a      	str	r2, [r3, #0]
 801df84:	605a      	str	r2, [r3, #4]
 801df86:	609a      	str	r2, [r3, #8]
 801df88:	60da      	str	r2, [r3, #12]
 801df8a:	611a      	str	r2, [r3, #16]
        if(grbl.tool_table.n_tools) {
 801df8c:	698b      	ldr	r3, [r1, #24]
 801df8e:	bb1b      	cbnz	r3, 801dfd8 <settings_init+0x17c>
        report_init();
 801df90:	f7fb fba6 	bl	80196e0 <report_init>
        changed.spindle = settings_changed_spindle();
 801df94:	f7ff f824 	bl	801cfe0 <settings_changed_spindle>
 801df98:	f360 0500 	bfi	r5, r0, #0, #1
        hal.settings_changed(&settings, changed);
 801df9c:	4c23      	ldr	r4, [pc, #140]	@ (801e02c <settings_init+0x1d0>)
 801df9e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 801dfa2:	4629      	mov	r1, r5
 801dfa4:	4822      	ldr	r0, [pc, #136]	@ (801e030 <settings_init+0x1d4>)
 801dfa6:	4798      	blx	r3
        if(hal.probe.configure) // Initialize probe invert mask.
 801dfa8:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 801dfac:	2b00      	cmp	r3, #0
 801dfae:	f43f af78 	beq.w	801dea2 <settings_init+0x46>
            hal.probe.configure(false, false);
 801dfb2:	2100      	movs	r1, #0
 801dfb4:	4608      	mov	r0, r1
 801dfb6:	4798      	blx	r3
 801dfb8:	e773      	b.n	801dea2 <settings_init+0x46>
                grbl.tool_table.read(idx, &grbl.tool_table.tool[idx]);
 801dfba:	4b1b      	ldr	r3, [pc, #108]	@ (801e028 <settings_init+0x1cc>)
 801dfbc:	6a1a      	ldr	r2, [r3, #32]
 801dfbe:	69db      	ldr	r3, [r3, #28]
 801dfc0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 801dfc4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801dfc8:	4620      	mov	r0, r4
 801dfca:	4790      	blx	r2
            for(idx = 1; idx <= grbl.tool_table.n_tools; idx++)
 801dfcc:	3401      	adds	r4, #1
 801dfce:	4b16      	ldr	r3, [pc, #88]	@ (801e028 <settings_init+0x1cc>)
 801dfd0:	699b      	ldr	r3, [r3, #24]
 801dfd2:	42a3      	cmp	r3, r4
 801dfd4:	d2f1      	bcs.n	801dfba <settings_init+0x15e>
 801dfd6:	e7db      	b.n	801df90 <settings_init+0x134>
 801dfd8:	2401      	movs	r4, #1
 801dfda:	e7f8      	b.n	801dfce <settings_init+0x172>
        spindle_add_null();
 801dfdc:	f000 fb3a 	bl	801e654 <spindle_add_null>
 801dfe0:	e77d      	b.n	801dede <settings_init+0x82>
        spindle_state_t spindle_state = { .on = On };
 801dfe2:	f04f 0101 	mov.w	r1, #1
        spindle_state.ccw = spindle_cap.direction;
 801dfe6:	f3c0 0340 	ubfx	r3, r0, #1, #1
 801dfea:	f363 0141 	bfi	r1, r3, #1, #1
        spindle_state.pwm = spindle_cap.pwm_invert;
 801dfee:	f3c0 1000 	ubfx	r0, r0, #4, #1
 801dff2:	f360 0182 	bfi	r1, r0, #2, #1
        setting_remove_elements(Setting_SpindleInvertMask, spindle_state.mask);
 801dff6:	b2c9      	uxtb	r1, r1
 801dff8:	2010      	movs	r0, #16
 801dffa:	f7ff fdc7 	bl	801db8c <setting_remove_elements>
 801dffe:	e774      	b.n	801deea <settings_init+0x8e>
        setting_remove_elements(Setting_HomingEnable, homing.value);
 801e000:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
 801e004:	2016      	movs	r0, #22
 801e006:	f7ff fdc1 	bl	801db8c <setting_remove_elements>
 801e00a:	e788      	b.n	801df1e <settings_init+0xc2>
            details->on_changed(&settings, changed);
 801e00c:	4629      	mov	r1, r5
 801e00e:	4808      	ldr	r0, [pc, #32]	@ (801e030 <settings_init+0x1d4>)
 801e010:	4798      	blx	r3
    } while((details = details->next));
 801e012:	69a4      	ldr	r4, [r4, #24]
 801e014:	2c00      	cmp	r4, #0
 801e016:	d086      	beq.n	801df26 <settings_init+0xca>
        if(details->load)
 801e018:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801e01a:	b103      	cbz	r3, 801e01e <settings_init+0x1c2>
            details->load();
 801e01c:	4798      	blx	r3
        if(details->on_changed)
 801e01e:	69e3      	ldr	r3, [r4, #28]
 801e020:	2b00      	cmp	r3, #0
 801e022:	d1f3      	bne.n	801e00c <settings_init+0x1b0>
 801e024:	e7f5      	b.n	801e012 <settings_init+0x1b6>
 801e026:	bf00      	nop
 801e028:	20001c78 	.word	0x20001c78
 801e02c:	20001a90 	.word	0x20001a90
 801e030:	200024a8 	.word	0x200024a8
 801e034:	20001d70 	.word	0x20001d70
 801e038:	2000021c 	.word	0x2000021c
 801e03c:	200023a8 	.word	0x200023a8

0801e040 <fall_asleep>:

static volatile bool slumber;

static void fall_asleep (void *data)
{
    slumber = false;
 801e040:	4b01      	ldr	r3, [pc, #4]	@ (801e048 <fall_asleep+0x8>)
 801e042:	2200      	movs	r2, #0
 801e044:	701a      	strb	r2, [r3, #0]
}
 801e046:	4770      	bx	lr
 801e048:	20002618 	.word	0x20002618

0801e04c <sleep_execute>:

// Starts sleep timer if running conditions are satisfied. When elapsed, sleep mode is executed.
static void sleep_execute (void)
{
 801e04c:	b538      	push	{r3, r4, r5, lr}
    // Enable sleep timeout
    if(!(slumber = task_add_delayed(fall_asleep, NULL, (uint32_t)(SLEEP_DURATION * 1000.0f * 60.0f))))
 801e04e:	4a18      	ldr	r2, [pc, #96]	@ (801e0b0 <sleep_execute+0x64>)
 801e050:	2100      	movs	r1, #0
 801e052:	4818      	ldr	r0, [pc, #96]	@ (801e0b4 <sleep_execute+0x68>)
 801e054:	f7f3 fc80 	bl	8011958 <task_add_delayed>
 801e058:	4b17      	ldr	r3, [pc, #92]	@ (801e0b8 <sleep_execute+0x6c>)
 801e05a:	7018      	strb	r0, [r3, #0]
 801e05c:	b330      	cbz	r0, 801e0ac <sleep_execute+0x60>
        return;

    // Fetch current number of buffered characters in input stream buffer.
    uint16_t rx_initial = hal.stream.get_rx_buffer_free();
 801e05e:	4b17      	ldr	r3, [pc, #92]	@ (801e0bc <sleep_execute+0x70>)
 801e060:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801e064:	4798      	blx	r3
 801e066:	4605      	mov	r5, r0

    do {
        grbl.on_execute_realtime(state_get());
 801e068:	4b15      	ldr	r3, [pc, #84]	@ (801e0c0 <sleep_execute+0x74>)
 801e06a:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 801e06c:	f000 ff6c 	bl	801ef48 <state_get>
 801e070:	47a0      	blx	r4
        // Monitor for any new input stream data or external events (queries, buttons, alarms) to exit.
        if((hal.stream.get_rx_buffer_free() != rx_initial) || sys.rt_exec_state || sys.rt_exec_alarm ) {
 801e072:	4b12      	ldr	r3, [pc, #72]	@ (801e0bc <sleep_execute+0x70>)
 801e074:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801e078:	4798      	blx	r3
 801e07a:	42a8      	cmp	r0, r5
 801e07c:	d110      	bne.n	801e0a0 <sleep_execute+0x54>
 801e07e:	4b11      	ldr	r3, [pc, #68]	@ (801e0c4 <sleep_execute+0x78>)
 801e080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e082:	b96b      	cbnz	r3, 801e0a0 <sleep_execute+0x54>
 801e084:	4b0f      	ldr	r3, [pc, #60]	@ (801e0c4 <sleep_execute+0x78>)
 801e086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e088:	b953      	cbnz	r3, 801e0a0 <sleep_execute+0x54>
            // Disable sleep timeout and return to normal operation.
            slumber = false;
            task_delete(fall_asleep, NULL);
            return;
        }
    } while(slumber);
 801e08a:	4b0b      	ldr	r3, [pc, #44]	@ (801e0b8 <sleep_execute+0x6c>)
 801e08c:	781b      	ldrb	r3, [r3, #0]
 801e08e:	2b00      	cmp	r3, #0
 801e090:	d1ea      	bne.n	801e068 <sleep_execute+0x1c>

    // If reached, sleep counter has expired. Execute sleep procedures.
    // Notify user that Grbl has timed out and will be parking.
    // To exit sleep, resume or reset. Either way, the job will not be recoverable.
    system_set_exec_state_flag(EXEC_SLEEP);
 801e092:	4b0a      	ldr	r3, [pc, #40]	@ (801e0bc <sleep_execute+0x70>)
 801e094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e096:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801e09a:	480b      	ldr	r0, [pc, #44]	@ (801e0c8 <sleep_execute+0x7c>)
 801e09c:	4798      	blx	r3
 801e09e:	e005      	b.n	801e0ac <sleep_execute+0x60>
            slumber = false;
 801e0a0:	2100      	movs	r1, #0
 801e0a2:	4b05      	ldr	r3, [pc, #20]	@ (801e0b8 <sleep_execute+0x6c>)
 801e0a4:	7019      	strb	r1, [r3, #0]
            task_delete(fall_asleep, NULL);
 801e0a6:	4803      	ldr	r0, [pc, #12]	@ (801e0b4 <sleep_execute+0x68>)
 801e0a8:	f7f3 fedc 	bl	8011e64 <task_delete>
}
 801e0ac:	bd38      	pop	{r3, r4, r5, pc}
 801e0ae:	bf00      	nop
 801e0b0:	000493e0 	.word	0x000493e0
 801e0b4:	0801e041 	.word	0x0801e041
 801e0b8:	20002618 	.word	0x20002618
 801e0bc:	20001a90 	.word	0x20001a90
 801e0c0:	20001c78 	.word	0x20001c78
 801e0c4:	20001d70 	.word	0x20001d70
 801e0c8:	20001db8 	.word	0x20001db8

0801e0cc <sleep_check>:
// Checks running conditions for sleep. If satisfied, enables sleep timeout and executes
// sleep mode upon elapse.
// NOTE: Sleep procedures can be blocking, since grblHAL isn't receiving any commands, nor moving.
// Hence, make sure any valid running state that executes the sleep timer is not one that is moving.
void sleep_check (void)
{
 801e0cc:	b508      	push	{r3, lr}
    static uint32_t last_check = 0;

    if(hal.get_elapsed_ticks() - last_check < 50)
 801e0ce:	4b1e      	ldr	r3, [pc, #120]	@ (801e148 <sleep_check+0x7c>)
 801e0d0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 801e0d4:	4798      	blx	r3
 801e0d6:	4b1d      	ldr	r3, [pc, #116]	@ (801e14c <sleep_check+0x80>)
 801e0d8:	681b      	ldr	r3, [r3, #0]
 801e0da:	1ac0      	subs	r0, r0, r3
 801e0dc:	2831      	cmp	r0, #49	@ 0x31
 801e0de:	d917      	bls.n	801e110 <sleep_check+0x44>
        return;

    last_check = hal.get_elapsed_ticks();
 801e0e0:	4b19      	ldr	r3, [pc, #100]	@ (801e148 <sleep_check+0x7c>)
 801e0e2:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 801e0e6:	4798      	blx	r3
 801e0e8:	4b18      	ldr	r3, [pc, #96]	@ (801e14c <sleep_check+0x80>)
 801e0ea:	6018      	str	r0, [r3, #0]

    // The sleep execution feature will continue only if the machine is in an IDLE or HOLD state and
    // has any powered components enabled.
    // NOTE: With overrides or in laser mode, modal spindle and coolant state are not guaranteed. Need
    // to directly monitor and record running state during parking to ensure proper function.
    if (!(slumber || sys.steppers_deenergize || sys.flags.auto_reporting) && (gc_state.modal.spindle.state.value || gc_state.modal.coolant.value)) {
 801e0ec:	4b18      	ldr	r3, [pc, #96]	@ (801e150 <sleep_check+0x84>)
 801e0ee:	781b      	ldrb	r3, [r3, #0]
 801e0f0:	b973      	cbnz	r3, 801e110 <sleep_check+0x44>
 801e0f2:	4b18      	ldr	r3, [pc, #96]	@ (801e154 <sleep_check+0x88>)
 801e0f4:	799b      	ldrb	r3, [r3, #6]
 801e0f6:	b95b      	cbnz	r3, 801e110 <sleep_check+0x44>
 801e0f8:	4b16      	ldr	r3, [pc, #88]	@ (801e154 <sleep_check+0x88>)
 801e0fa:	7ddb      	ldrb	r3, [r3, #23]
 801e0fc:	f013 0f02 	tst.w	r3, #2
 801e100:	d106      	bne.n	801e110 <sleep_check+0x44>
 801e102:	4b15      	ldr	r3, [pc, #84]	@ (801e158 <sleep_check+0x8c>)
 801e104:	699b      	ldr	r3, [r3, #24]
 801e106:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801e10a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801e10e:	b903      	cbnz	r3, 801e112 <sleep_check+0x46>
                if(sys.parking_state == Parking_DoorAjar)
                    sleep_execute();
                break;
        }
    }
}
 801e110:	bd08      	pop	{r3, pc}
        switch(state_get()) {
 801e112:	f000 ff19 	bl	801ef48 <state_get>
 801e116:	2810      	cmp	r0, #16
 801e118:	d006      	beq.n	801e128 <sleep_check+0x5c>
 801e11a:	2840      	cmp	r0, #64	@ 0x40
 801e11c:	d00c      	beq.n	801e138 <sleep_check+0x6c>
 801e11e:	2800      	cmp	r0, #0
 801e120:	d1f6      	bne.n	801e110 <sleep_check+0x44>
                sleep_execute();
 801e122:	f7ff ff93 	bl	801e04c <sleep_execute>
                break;
 801e126:	e7f3      	b.n	801e110 <sleep_check+0x44>
                if(sys.holding_state == Hold_Complete)
 801e128:	4b0a      	ldr	r3, [pc, #40]	@ (801e154 <sleep_check+0x88>)
 801e12a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801e12e:	2b01      	cmp	r3, #1
 801e130:	d1ee      	bne.n	801e110 <sleep_check+0x44>
                    sleep_execute();
 801e132:	f7ff ff8b 	bl	801e04c <sleep_execute>
 801e136:	e7eb      	b.n	801e110 <sleep_check+0x44>
                if(sys.parking_state == Parking_DoorAjar)
 801e138:	4b06      	ldr	r3, [pc, #24]	@ (801e154 <sleep_check+0x88>)
 801e13a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801e13e:	2b01      	cmp	r3, #1
 801e140:	d1e6      	bne.n	801e110 <sleep_check+0x44>
                    sleep_execute();
 801e142:	f7ff ff83 	bl	801e04c <sleep_execute>
 801e146:	e7e3      	b.n	801e110 <sleep_check+0x44>
 801e148:	20001a90 	.word	0x20001a90
 801e14c:	20002614 	.word	0x20002614
 801e150:	20002618 	.word	0x20002618
 801e154:	20001d70 	.word	0x20001d70
 801e158:	200017c8 	.word	0x200017c8

0801e15c <null_set_state>:
static void null_set_state (spindle_ptrs_t *spindle, spindle_state_t state, float rpm)
{
    UNUSED(spindle);
    UNUSED(state);
    UNUSED(rpm);
}
 801e15c:	4770      	bx	lr

0801e15e <null_get_state>:
static spindle_state_t null_get_state (spindle_ptrs_t *spindle)
{
    UNUSED(spindle);

    return (spindle_state_t){0};
}
 801e15e:	f04f 0000 	mov.w	r0, #0
 801e162:	4770      	bx	lr

0801e164 <null_update_pwm>:
// Sets spindle speed
static void null_update_pwm (spindle_ptrs_t *spindle, uint_fast16_t pwm_value)
{
    UNUSED(spindle);
    UNUSED(pwm_value);
}
 801e164:	4770      	bx	lr

0801e166 <null_get_pwm>:
{
    UNUSED(spindle);
    UNUSED(rpm);

    return 0;
}
 801e166:	2000      	movs	r0, #0
 801e168:	4770      	bx	lr

0801e16a <null_update_rpm>:

static void null_update_rpm (spindle_ptrs_t *spindle, float rpm)
{
    UNUSED(spindle);
    UNUSED(rpm);
}
 801e16a:	4770      	bx	lr

0801e16c <spindle_activate>:
{
 801e16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e170:	b090      	sub	sp, #64	@ 0x40
 801e172:	4604      	mov	r4, r0
 801e174:	460e      	mov	r6, r1
    if(pwm_spindle && pwm_spindle->cfg->config && pwm_spindle != &spindles[spindle_id]) {
 801e176:	4b95      	ldr	r3, [pc, #596]	@ (801e3cc <spindle_activate+0x260>)
 801e178:	6818      	ldr	r0, [r3, #0]
 801e17a:	b338      	cbz	r0, 801e1cc <spindle_activate+0x60>
 801e17c:	6803      	ldr	r3, [r0, #0]
 801e17e:	69db      	ldr	r3, [r3, #28]
 801e180:	b323      	cbz	r3, 801e1cc <spindle_activate+0x60>
 801e182:	224c      	movs	r2, #76	@ 0x4c
 801e184:	4b92      	ldr	r3, [pc, #584]	@ (801e3d0 <spindle_activate+0x264>)
 801e186:	fb02 3304 	mla	r3, r2, r4, r3
 801e18a:	4298      	cmp	r0, r3
 801e18c:	d01e      	beq.n	801e1cc <spindle_activate+0x60>
        if(!pwm_spindle->hal.cap.rpm_range_locked) {
 801e18e:	f990 300e 	ldrsb.w	r3, [r0, #14]
 801e192:	2b00      	cmp	r3, #0
 801e194:	db04      	blt.n	801e1a0 <spindle_activate+0x34>
            pwm_spindle->hal.rpm_min = settings.spindle.rpm_min;
 801e196:	4b8f      	ldr	r3, [pc, #572]	@ (801e3d4 <spindle_activate+0x268>)
 801e198:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801e19a:	6182      	str	r2, [r0, #24]
            pwm_spindle->hal.rpm_max = settings.spindle.rpm_max;
 801e19c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e19e:	61c3      	str	r3, [r0, #28]
        if((pwm_spindle->init_ok = pwm_spindle->hal.config == NULL || pwm_spindle->hal.config(&pwm_spindle->hal)))
 801e1a0:	6a03      	ldr	r3, [r0, #32]
 801e1a2:	2b00      	cmp	r3, #0
 801e1a4:	f000 80da 	beq.w	801e35c <spindle_activate+0x1f0>
 801e1a8:	3004      	adds	r0, #4
 801e1aa:	4798      	blx	r3
 801e1ac:	2800      	cmp	r0, #0
 801e1ae:	f040 80d7 	bne.w	801e360 <spindle_activate+0x1f4>
 801e1b2:	2300      	movs	r3, #0
 801e1b4:	4a85      	ldr	r2, [pc, #532]	@ (801e3cc <spindle_activate+0x260>)
 801e1b6:	6810      	ldr	r0, [r2, #0]
 801e1b8:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
 801e1bc:	b133      	cbz	r3, 801e1cc <spindle_activate+0x60>
            pwm_spindle->hal.set_state(&pwm_spindle->hal, (spindle_state_t){0}, 0.0f);
 801e1be:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801e1c0:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 801e3d8 <spindle_activate+0x26c>
 801e1c4:	f04f 0100 	mov.w	r1, #0
 801e1c8:	3004      	adds	r0, #4
 801e1ca:	4798      	blx	r3
    pwm_spindle = NULL;
 801e1cc:	4b7f      	ldr	r3, [pc, #508]	@ (801e3cc <spindle_activate+0x260>)
 801e1ce:	2200      	movs	r2, #0
 801e1d0:	601a      	str	r2, [r3, #0]
    if((ok = spindle_id >= 0 && spindle_id < n_spindle && !!spindles[spindle_id].cfg)) {
 801e1d2:	4294      	cmp	r4, r2
 801e1d4:	f2c0 80f1 	blt.w	801e3ba <spindle_activate+0x24e>
 801e1d8:	4b80      	ldr	r3, [pc, #512]	@ (801e3dc <spindle_activate+0x270>)
 801e1da:	781b      	ldrb	r3, [r3, #0]
 801e1dc:	429c      	cmp	r4, r3
 801e1de:	f280 80f1 	bge.w	801e3c4 <spindle_activate+0x258>
 801e1e2:	234c      	movs	r3, #76	@ 0x4c
 801e1e4:	fb04 f303 	mul.w	r3, r4, r3
 801e1e8:	4a79      	ldr	r2, [pc, #484]	@ (801e3d0 <spindle_activate+0x264>)
 801e1ea:	58d3      	ldr	r3, [r2, r3]
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	f000 80eb 	beq.w	801e3c8 <spindle_activate+0x25c>
        if(sys_spindle[spindle_num].enabled && sys_spindle[spindle_num].hal.id != spindle_id && sys_spindle[spindle_num].hal.set_state)
 801e1f2:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
 801e1f6:	4b7a      	ldr	r3, [pc, #488]	@ (801e3e0 <spindle_activate+0x274>)
 801e1f8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801e1fc:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 801e200:	b16b      	cbz	r3, 801e21e <spindle_activate+0xb2>
 801e202:	4b77      	ldr	r3, [pc, #476]	@ (801e3e0 <spindle_activate+0x274>)
 801e204:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801e208:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 801e20c:	42a3      	cmp	r3, r4
 801e20e:	d006      	beq.n	801e21e <spindle_activate+0xb2>
 801e210:	4b73      	ldr	r3, [pc, #460]	@ (801e3e0 <spindle_activate+0x274>)
 801e212:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801e216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e218:	b10b      	cbz	r3, 801e21e <spindle_activate+0xb2>
            gc_spindle_off(); // TODO: switch off only the default spindle?
 801e21a:	f7ef f9f5 	bl	800d608 <gc_spindle_off>
        if(!spindle->hal.cap.rpm_range_locked) {
 801e21e:	4b6c      	ldr	r3, [pc, #432]	@ (801e3d0 <spindle_activate+0x264>)
 801e220:	224c      	movs	r2, #76	@ 0x4c
 801e222:	fb02 3304 	mla	r3, r2, r4, r3
 801e226:	f993 300e 	ldrsb.w	r3, [r3, #14]
 801e22a:	2b00      	cmp	r3, #0
 801e22c:	db08      	blt.n	801e240 <spindle_activate+0xd4>
            spindle->hal.rpm_min = settings.spindle.rpm_min;
 801e22e:	4a69      	ldr	r2, [pc, #420]	@ (801e3d4 <spindle_activate+0x268>)
 801e230:	6f91      	ldr	r1, [r2, #120]	@ 0x78
 801e232:	4b67      	ldr	r3, [pc, #412]	@ (801e3d0 <spindle_activate+0x264>)
 801e234:	204c      	movs	r0, #76	@ 0x4c
 801e236:	fb00 3304 	mla	r3, r0, r4, r3
 801e23a:	6199      	str	r1, [r3, #24]
            spindle->hal.rpm_max = settings.spindle.rpm_max;
 801e23c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801e23e:	61da      	str	r2, [r3, #28]
        if(!spindle->init_ok)
 801e240:	4b63      	ldr	r3, [pc, #396]	@ (801e3d0 <spindle_activate+0x264>)
 801e242:	224c      	movs	r2, #76	@ 0x4c
 801e244:	fb02 3304 	mla	r3, r2, r4, r3
 801e248:	f893 5048 	ldrb.w	r5, [r3, #72]	@ 0x48
 801e24c:	b99d      	cbnz	r5, 801e276 <spindle_activate+0x10a>
            ok = spindle->init_ok = spindle->hal.config == NULL || spindle->hal.config(&spindle->hal);
 801e24e:	4b60      	ldr	r3, [pc, #384]	@ (801e3d0 <spindle_activate+0x264>)
 801e250:	fb02 3304 	mla	r3, r2, r4, r3
 801e254:	6a1b      	ldr	r3, [r3, #32]
 801e256:	2b00      	cmp	r3, #0
 801e258:	f000 8084 	beq.w	801e364 <spindle_activate+0x1f8>
 801e25c:	485c      	ldr	r0, [pc, #368]	@ (801e3d0 <spindle_activate+0x264>)
 801e25e:	fb02 0004 	mla	r0, r2, r4, r0
 801e262:	3004      	adds	r0, #4
 801e264:	4798      	blx	r3
 801e266:	2800      	cmp	r0, #0
 801e268:	d17e      	bne.n	801e368 <spindle_activate+0x1fc>
 801e26a:	4b59      	ldr	r3, [pc, #356]	@ (801e3d0 <spindle_activate+0x264>)
 801e26c:	224c      	movs	r2, #76	@ 0x4c
 801e26e:	fb02 3304 	mla	r3, r2, r4, r3
 801e272:	f883 5048 	strb.w	r5, [r3, #72]	@ 0x48
        if(ok) {
 801e276:	2d00      	cmp	r5, #0
 801e278:	f000 80a0 	beq.w	801e3bc <spindle_activate+0x250>
            memcpy(&spindle_hal, &spindle->hal, sizeof(spindle_ptrs_t));
 801e27c:	224c      	movs	r2, #76	@ 0x4c
 801e27e:	4b54      	ldr	r3, [pc, #336]	@ (801e3d0 <spindle_activate+0x264>)
 801e280:	fb02 3804 	mla	r8, r2, r4, r3
 801e284:	f108 0c04 	add.w	ip, r8, #4
 801e288:	466f      	mov	r7, sp
 801e28a:	f108 0844 	add.w	r8, r8, #68	@ 0x44
 801e28e:	46be      	mov	lr, r7
 801e290:	f8dc 0000 	ldr.w	r0, [ip]
 801e294:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801e298:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801e29c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 801e2a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801e2a4:	f10c 0c10 	add.w	ip, ip, #16
 801e2a8:	4677      	mov	r7, lr
 801e2aa:	45c4      	cmp	ip, r8
 801e2ac:	d1ef      	bne.n	801e28e <spindle_activate+0x122>
            if(spindle->cfg->get_data == NULL) {
 801e2ae:	234c      	movs	r3, #76	@ 0x4c
 801e2b0:	fb04 f303 	mul.w	r3, r4, r3
 801e2b4:	4a46      	ldr	r2, [pc, #280]	@ (801e3d0 <spindle_activate+0x264>)
 801e2b6:	58d3      	ldr	r3, [r2, r3]
 801e2b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e2ba:	2a00      	cmp	r2, #0
 801e2bc:	d056      	beq.n	801e36c <spindle_activate+0x200>
            spindle_hal.cap.laser &= settings.mode == Mode_Laser;
 801e2be:	f89d 300a 	ldrb.w	r3, [sp, #10]
 801e2c2:	4a44      	ldr	r2, [pc, #272]	@ (801e3d4 <spindle_activate+0x268>)
 801e2c4:	7e12      	ldrb	r2, [r2, #24]
 801e2c6:	2a01      	cmp	r2, #1
 801e2c8:	bf14      	ite	ne
 801e2ca:	2200      	movne	r2, #0
 801e2cc:	2201      	moveq	r2, #1
 801e2ce:	ea02 02d3 	and.w	r2, r2, r3, lsr #3
 801e2d2:	f362 03c3 	bfi	r3, r2, #3, #1
 801e2d6:	f88d 300a 	strb.w	r3, [sp, #10]
            if(grbl.on_spindle_select)
 801e2da:	4b42      	ldr	r3, [pc, #264]	@ (801e3e4 <spindle_activate+0x278>)
 801e2dc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801e2e0:	b113      	cbz	r3, 801e2e8 <spindle_activate+0x17c>
                ok = grbl.on_spindle_select(&spindle_hal);
 801e2e2:	4668      	mov	r0, sp
 801e2e4:	4798      	blx	r3
 801e2e6:	4605      	mov	r5, r0
            if(ok) {
 801e2e8:	2d00      	cmp	r5, #0
 801e2ea:	d067      	beq.n	801e3bc <spindle_activate+0x250>
                sys_spindle[spindle_num].enabled = true;
 801e2ec:	4a3c      	ldr	r2, [pc, #240]	@ (801e3e0 <spindle_activate+0x274>)
 801e2ee:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 801e2f2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801e2f6:	2101      	movs	r1, #1
 801e2f8:	f883 106c 	strb.w	r1, [r3, #108]	@ 0x6c
                sys_spindle[spindle_num].param.hal = &sys_spindle[spindle_num].hal;
 801e2fc:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 801e300:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801e304:	f10c 0c28 	add.w	ip, ip, #40	@ 0x28
 801e308:	4494      	add	ip, r2
 801e30a:	f10c 0c04 	add.w	ip, ip, #4
 801e30e:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
                if(sys_spindle[spindle_num].param.override_pct == 0)
 801e312:	68db      	ldr	r3, [r3, #12]
 801e314:	b933      	cbnz	r3, 801e324 <spindle_activate+0x1b8>
                    sys_spindle[spindle_num].param.override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE;
 801e316:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
 801e31a:	4b31      	ldr	r3, [pc, #196]	@ (801e3e0 <spindle_activate+0x274>)
 801e31c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801e320:	2264      	movs	r2, #100	@ 0x64
 801e322:	60da      	str	r2, [r3, #12]
                spindle_hal.param = &sys_spindle[spindle_num].param;
 801e324:	ebc6 01c6 	rsb	r1, r6, r6, lsl #3
 801e328:	4b2d      	ldr	r3, [pc, #180]	@ (801e3e0 <spindle_activate+0x274>)
 801e32a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 801e32e:	9301      	str	r3, [sp, #4]
                memcpy(&sys_spindle[spindle_num].hal, &spindle_hal, sizeof(spindle_ptrs_t));
 801e330:	466f      	mov	r7, sp
 801e332:	4666      	mov	r6, ip
 801e334:	f10d 0e40 	add.w	lr, sp, #64	@ 0x40
 801e338:	463c      	mov	r4, r7
 801e33a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e33c:	6030      	str	r0, [r6, #0]
 801e33e:	6071      	str	r1, [r6, #4]
 801e340:	60b2      	str	r2, [r6, #8]
 801e342:	60f3      	str	r3, [r6, #12]
 801e344:	4627      	mov	r7, r4
 801e346:	3610      	adds	r6, #16
 801e348:	4574      	cmp	r4, lr
 801e34a:	d1f5      	bne.n	801e338 <spindle_activate+0x1cc>
                if(grbl.on_spindle_selected)
 801e34c:	4b25      	ldr	r3, [pc, #148]	@ (801e3e4 <spindle_activate+0x278>)
 801e34e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 801e352:	2b00      	cmp	r3, #0
 801e354:	d032      	beq.n	801e3bc <spindle_activate+0x250>
                    grbl.on_spindle_selected(&sys_spindle[spindle_num].hal);
 801e356:	4660      	mov	r0, ip
 801e358:	4798      	blx	r3
 801e35a:	e02f      	b.n	801e3bc <spindle_activate+0x250>
        if((pwm_spindle->init_ok = pwm_spindle->hal.config == NULL || pwm_spindle->hal.config(&pwm_spindle->hal)))
 801e35c:	2301      	movs	r3, #1
 801e35e:	e729      	b.n	801e1b4 <spindle_activate+0x48>
 801e360:	2301      	movs	r3, #1
 801e362:	e727      	b.n	801e1b4 <spindle_activate+0x48>
            ok = spindle->init_ok = spindle->hal.config == NULL || spindle->hal.config(&spindle->hal);
 801e364:	2501      	movs	r5, #1
 801e366:	e780      	b.n	801e26a <spindle_activate+0xfe>
 801e368:	2501      	movs	r5, #1
 801e36a:	e77e      	b.n	801e26a <spindle_activate+0xfe>
                if(settings.offset_lock.encoder_spindle == spindle_id) {
 801e36c:	4a19      	ldr	r2, [pc, #100]	@ (801e3d4 <spindle_activate+0x268>)
 801e36e:	f892 2102 	ldrb.w	r2, [r2, #258]	@ 0x102
 801e372:	ebb4 0fd2 	cmp.w	r4, r2, lsr #3
 801e376:	d00d      	beq.n	801e394 <spindle_activate+0x228>
                    spindle_hal.get_data = NULL;
 801e378:	2200      	movs	r2, #0
 801e37a:	920e      	str	r2, [sp, #56]	@ 0x38
                    spindle_hal.reset_data = NULL;
 801e37c:	920f      	str	r2, [sp, #60]	@ 0x3c
                    if(!spindle->cfg->cap.at_speed)
 801e37e:	7a9b      	ldrb	r3, [r3, #10]
 801e380:	f013 0f04 	tst.w	r3, #4
 801e384:	d19b      	bne.n	801e2be <spindle_activate+0x152>
                        spindle_hal.cap.at_speed = Off;
 801e386:	f89d 300a 	ldrb.w	r3, [sp, #10]
 801e38a:	f36f 0382 	bfc	r3, #2, #1
 801e38e:	f88d 300a 	strb.w	r3, [sp, #10]
 801e392:	e794      	b.n	801e2be <spindle_activate+0x152>
                    spindle_hal.get_data = hal.spindle_data.get;
 801e394:	4914      	ldr	r1, [pc, #80]	@ (801e3e8 <spindle_activate+0x27c>)
 801e396:	6f8a      	ldr	r2, [r1, #120]	@ 0x78
 801e398:	920e      	str	r2, [sp, #56]	@ 0x38
                    spindle_hal.reset_data = hal.spindle_data.reset;
 801e39a:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 801e39c:	910f      	str	r1, [sp, #60]	@ 0x3c
                    if(!spindle->cfg->cap.at_speed)
 801e39e:	7a9b      	ldrb	r3, [r3, #10]
 801e3a0:	f013 0f04 	tst.w	r3, #4
 801e3a4:	d18b      	bne.n	801e2be <spindle_activate+0x152>
                        spindle_hal.cap.at_speed = !!spindle_hal.get_data;
 801e3a6:	3a00      	subs	r2, #0
 801e3a8:	bf18      	it	ne
 801e3aa:	2201      	movne	r2, #1
 801e3ac:	f89d 300a 	ldrb.w	r3, [sp, #10]
 801e3b0:	f362 0382 	bfi	r3, r2, #2, #1
 801e3b4:	f88d 300a 	strb.w	r3, [sp, #10]
 801e3b8:	e781      	b.n	801e2be <spindle_activate+0x152>
    if((ok = spindle_id >= 0 && spindle_id < n_spindle && !!spindles[spindle_id].cfg)) {
 801e3ba:	2500      	movs	r5, #0
}
 801e3bc:	4628      	mov	r0, r5
 801e3be:	b010      	add	sp, #64	@ 0x40
 801e3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((ok = spindle_id >= 0 && spindle_id < n_spindle && !!spindles[spindle_id].cfg)) {
 801e3c4:	2500      	movs	r5, #0
 801e3c6:	e7f9      	b.n	801e3bc <spindle_activate+0x250>
 801e3c8:	2500      	movs	r5, #0
 801e3ca:	e7f7      	b.n	801e3bc <spindle_activate+0x250>
 801e3cc:	2000261c 	.word	0x2000261c
 801e3d0:	20002620 	.word	0x20002620
 801e3d4:	200024a8 	.word	0x200024a8
 801e3d8:	00000000 	.word	0x00000000
 801e3dc:	200026dc 	.word	0x200026dc
 801e3e0:	2000266c 	.word	0x2000266c
 801e3e4:	20001c78 	.word	0x20001c78
 801e3e8:	20001a90 	.word	0x20001a90

0801e3ec <spindle_get_num>:
{
 801e3ec:	b510      	push	{r4, lr}
 801e3ee:	4604      	mov	r4, r0
        if((setting = setting_get_details(idx == 0 ? Setting_SpindleType : (setting_id_t)(Setting_SpindleEnable0 + idx), NULL))) {
 801e3f0:	2100      	movs	r1, #0
 801e3f2:	f240 108b 	movw	r0, #395	@ 0x18b
 801e3f6:	f7ff fa65 	bl	801d8c4 <setting_get_details>
 801e3fa:	b148      	cbz	r0, 801e410 <spindle_get_num+0x24>
            if(setting_get_int_value(setting, 0) == spindle_id)
 801e3fc:	2100      	movs	r1, #0
 801e3fe:	f7ff f869 	bl	801d4d4 <setting_get_int_value>
 801e402:	42a0      	cmp	r0, r4
 801e404:	d101      	bne.n	801e40a <spindle_get_num+0x1e>
                spindle_num = idx;
 801e406:	2000      	movs	r0, #0
}
 801e408:	bd10      	pop	{r4, pc}
            if(setting_get_int_value(setting, 0) == spindle_id)
 801e40a:	f04f 30ff 	mov.w	r0, #4294967295
 801e40e:	e7fb      	b.n	801e408 <spindle_get_num+0x1c>
 801e410:	f04f 30ff 	mov.w	r0, #4294967295
 801e414:	e7f8      	b.n	801e408 <spindle_get_num+0x1c>
	...

0801e418 <spindle_register>:
{
 801e418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e41a:	4604      	mov	r4, r0
 801e41c:	460e      	mov	r6, r1
    if(n_spindle == 1 && spindles[0].cfg->type == SpindleType_Null)
 801e41e:	4b33      	ldr	r3, [pc, #204]	@ (801e4ec <spindle_register+0xd4>)
 801e420:	781b      	ldrb	r3, [r3, #0]
 801e422:	2b01      	cmp	r3, #1
 801e424:	d032      	beq.n	801e48c <spindle_register+0x74>
    if(n_spindle < N_SPINDLE && settings_add_spindle_type(name)) {
 801e426:	4b31      	ldr	r3, [pc, #196]	@ (801e4ec <spindle_register+0xd4>)
 801e428:	781b      	ldrb	r3, [r3, #0]
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	d158      	bne.n	801e4e0 <spindle_register+0xc8>
 801e42e:	4630      	mov	r0, r6
 801e430:	f7ff fce8 	bl	801de04 <settings_add_spindle_type>
 801e434:	2800      	cmp	r0, #0
 801e436:	d056      	beq.n	801e4e6 <spindle_register+0xce>
        spindles[n_spindle].cfg = spindle;
 801e438:	4b2c      	ldr	r3, [pc, #176]	@ (801e4ec <spindle_register+0xd4>)
 801e43a:	781d      	ldrb	r5, [r3, #0]
 801e43c:	492c      	ldr	r1, [pc, #176]	@ (801e4f0 <spindle_register+0xd8>)
 801e43e:	224c      	movs	r2, #76	@ 0x4c
 801e440:	fb05 f202 	mul.w	r2, r5, r2
 801e444:	188b      	adds	r3, r1, r2
 801e446:	508c      	str	r4, [r1, r2]
        spindles[n_spindle].name = name;
 801e448:	645e      	str	r6, [r3, #68]	@ 0x44
        memcpy(&spindles[n_spindle].hal, spindles[n_spindle].cfg, sizeof(spindle_ptrs_t));
 801e44a:	4622      	mov	r2, r4
 801e44c:	3304      	adds	r3, #4
 801e44e:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 801e452:	6817      	ldr	r7, [r2, #0]
 801e454:	6856      	ldr	r6, [r2, #4]
 801e456:	6890      	ldr	r0, [r2, #8]
 801e458:	68d1      	ldr	r1, [r2, #12]
 801e45a:	601f      	str	r7, [r3, #0]
 801e45c:	605e      	str	r6, [r3, #4]
 801e45e:	6098      	str	r0, [r3, #8]
 801e460:	60d9      	str	r1, [r3, #12]
 801e462:	3210      	adds	r2, #16
 801e464:	3310      	adds	r3, #16
 801e466:	4562      	cmp	r2, ip
 801e468:	d1f3      	bne.n	801e452 <spindle_register+0x3a>
        spindles[n_spindle].hal.id = n_spindle;
 801e46a:	b26f      	sxtb	r7, r5
 801e46c:	4b20      	ldr	r3, [pc, #128]	@ (801e4f0 <spindle_register+0xd8>)
 801e46e:	224c      	movs	r2, #76	@ 0x4c
 801e470:	fb02 3305 	mla	r3, r2, r5, r3
 801e474:	711f      	strb	r7, [r3, #4]
        if(spindle->type == SpindleType_PWM && pwm_spindle == NULL) {
 801e476:	7a23      	ldrb	r3, [r4, #8]
 801e478:	b913      	cbnz	r3, 801e480 <spindle_register+0x68>
 801e47a:	4b1e      	ldr	r3, [pc, #120]	@ (801e4f4 <spindle_register+0xdc>)
 801e47c:	681b      	ldr	r3, [r3, #0]
 801e47e:	b173      	cbz	r3, 801e49e <spindle_register+0x86>
        if(n_spindle == 0)
 801e480:	b1d5      	cbz	r5, 801e4b8 <spindle_register+0xa0>
        return n_spindle++;
 801e482:	3501      	adds	r5, #1
 801e484:	4b19      	ldr	r3, [pc, #100]	@ (801e4ec <spindle_register+0xd4>)
 801e486:	701d      	strb	r5, [r3, #0]
}
 801e488:	4638      	mov	r0, r7
 801e48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(n_spindle == 1 && spindles[0].cfg->type == SpindleType_Null)
 801e48c:	4b18      	ldr	r3, [pc, #96]	@ (801e4f0 <spindle_register+0xd8>)
 801e48e:	681b      	ldr	r3, [r3, #0]
 801e490:	7a1b      	ldrb	r3, [r3, #8]
 801e492:	2b05      	cmp	r3, #5
 801e494:	d1c7      	bne.n	801e426 <spindle_register+0xe>
        n_spindle = 0;
 801e496:	4b15      	ldr	r3, [pc, #84]	@ (801e4ec <spindle_register+0xd4>)
 801e498:	2200      	movs	r2, #0
 801e49a:	701a      	strb	r2, [r3, #0]
 801e49c:	e7c3      	b.n	801e426 <spindle_register+0xe>
            pwm_spindle = &spindles[n_spindle];
 801e49e:	4b14      	ldr	r3, [pc, #80]	@ (801e4f0 <spindle_register+0xd8>)
 801e4a0:	fb02 3305 	mla	r3, r2, r5, r3
 801e4a4:	4a13      	ldr	r2, [pc, #76]	@ (801e4f4 <spindle_register+0xdc>)
 801e4a6:	6013      	str	r3, [r2, #0]
            hal.driver_cap.pwm_spindle = On;
 801e4a8:	4a13      	ldr	r2, [pc, #76]	@ (801e4f8 <spindle_register+0xe0>)
 801e4aa:	f892 31da 	ldrb.w	r3, [r2, #474]	@ 0x1da
 801e4ae:	f043 0310 	orr.w	r3, r3, #16
 801e4b2:	f882 31da 	strb.w	r3, [r2, #474]	@ 0x1da
 801e4b6:	e7e3      	b.n	801e480 <spindle_register+0x68>
            memcpy(&sys_spindle[0].hal, spindle, sizeof(spindle_ptrs_t));
 801e4b8:	46a4      	mov	ip, r4
 801e4ba:	4e10      	ldr	r6, [pc, #64]	@ (801e4fc <spindle_register+0xe4>)
 801e4bc:	3440      	adds	r4, #64	@ 0x40
 801e4be:	46b6      	mov	lr, r6
 801e4c0:	f8dc 0000 	ldr.w	r0, [ip]
 801e4c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801e4c8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801e4cc:	f8dc 300c 	ldr.w	r3, [ip, #12]
 801e4d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801e4d4:	f10c 0c10 	add.w	ip, ip, #16
 801e4d8:	4676      	mov	r6, lr
 801e4da:	45a4      	cmp	ip, r4
 801e4dc:	d1ef      	bne.n	801e4be <spindle_register+0xa6>
 801e4de:	e7d0      	b.n	801e482 <spindle_register+0x6a>
    return -1;
 801e4e0:	f04f 37ff 	mov.w	r7, #4294967295
 801e4e4:	e7d0      	b.n	801e488 <spindle_register+0x70>
 801e4e6:	f04f 37ff 	mov.w	r7, #4294967295
 801e4ea:	e7cd      	b.n	801e488 <spindle_register+0x70>
 801e4ec:	200026dc 	.word	0x200026dc
 801e4f0:	20002620 	.word	0x20002620
 801e4f4:	2000261c 	.word	0x2000261c
 801e4f8:	20001a90 	.word	0x20001a90
 801e4fc:	20002698 	.word	0x20002698

0801e500 <spindle_get_caps>:
{
 801e500:	4601      	mov	r1, r0
    spindle_cap_t caps = {0};
 801e502:	f04f 0000 	mov.w	r0, #0
    uint_fast8_t idx = n_spindle;
 801e506:	4b0e      	ldr	r3, [pc, #56]	@ (801e540 <spindle_get_caps+0x40>)
 801e508:	781b      	ldrb	r3, [r3, #0]
    if(n_spindle) do {
 801e50a:	b1c3      	cbz	r3, 801e53e <spindle_get_caps+0x3e>
{
 801e50c:	b410      	push	{r4}
 801e50e:	e007      	b.n	801e520 <spindle_get_caps+0x20>
        caps.value |= (active ? spindles[idx].hal.cap.value : spindles[idx].cfg->cap.value);
 801e510:	4a0c      	ldr	r2, [pc, #48]	@ (801e544 <spindle_get_caps+0x44>)
 801e512:	244c      	movs	r4, #76	@ 0x4c
 801e514:	fb04 2203 	mla	r2, r4, r3, r2
 801e518:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 801e51c:	4310      	orrs	r0, r2
    } while(idx);
 801e51e:	b15b      	cbz	r3, 801e538 <spindle_get_caps+0x38>
        --idx;
 801e520:	3b01      	subs	r3, #1
        caps.value |= (active ? spindles[idx].hal.cap.value : spindles[idx].cfg->cap.value);
 801e522:	b280      	uxth	r0, r0
 801e524:	2900      	cmp	r1, #0
 801e526:	d1f3      	bne.n	801e510 <spindle_get_caps+0x10>
 801e528:	224c      	movs	r2, #76	@ 0x4c
 801e52a:	fb03 f202 	mul.w	r2, r3, r2
 801e52e:	4c05      	ldr	r4, [pc, #20]	@ (801e544 <spindle_get_caps+0x44>)
 801e530:	58a2      	ldr	r2, [r4, r2]
 801e532:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801e536:	e7f1      	b.n	801e51c <spindle_get_caps+0x1c>
}
 801e538:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e53c:	4770      	bx	lr
 801e53e:	4770      	bx	lr
 801e540:	200026dc 	.word	0x200026dc
 801e544:	20002620 	.word	0x20002620

0801e548 <spindle_enumerate_spindles>:
    if(callback == NULL || n_spindle == 0)
 801e548:	2800      	cmp	r0, #0
 801e54a:	d04d      	beq.n	801e5e8 <spindle_enumerate_spindles+0xa0>
{
 801e54c:	b570      	push	{r4, r5, r6, lr}
 801e54e:	b084      	sub	sp, #16
 801e550:	460d      	mov	r5, r1
 801e552:	4606      	mov	r6, r0
    if(callback == NULL || n_spindle == 0)
 801e554:	4b26      	ldr	r3, [pc, #152]	@ (801e5f0 <spindle_enumerate_spindles+0xa8>)
 801e556:	781b      	ldrb	r3, [r3, #0]
 801e558:	2b00      	cmp	r3, #0
 801e55a:	d047      	beq.n	801e5ec <spindle_enumerate_spindles+0xa4>
    for(idx = 0; idx < n_spindle; idx++) {
 801e55c:	2400      	movs	r4, #0
 801e55e:	e03a      	b.n	801e5d6 <spindle_enumerate_spindles+0x8e>
        spindle.id = idx;
 801e560:	b260      	sxtb	r0, r4
 801e562:	f88d 0000 	strb.w	r0, [sp]
        spindle.name = spindles[idx].name;
 801e566:	4b23      	ldr	r3, [pc, #140]	@ (801e5f4 <spindle_enumerate_spindles+0xac>)
 801e568:	224c      	movs	r2, #76	@ 0x4c
 801e56a:	fb02 3304 	mla	r3, r2, r4, r3
 801e56e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e570:	9301      	str	r3, [sp, #4]
        spindle.num = spindle_get_num(idx);
 801e572:	f7ff ff3b 	bl	801e3ec <spindle_get_num>
 801e576:	f88d 0001 	strb.w	r0, [sp, #1]
        spindle.enabled = spindle.num != -1;
 801e57a:	1c42      	adds	r2, r0, #1
 801e57c:	bf18      	it	ne
 801e57e:	2201      	movne	r2, #1
 801e580:	f88d 2008 	strb.w	r2, [sp, #8]
        spindle.hal = spindle.enabled && sys_spindle[spindle.num].hal.id == spindle.id ? &sys_spindle[spindle.num].hal : &spindles[idx].hal;
 801e584:	b152      	cbz	r2, 801e59c <spindle_enumerate_spindles+0x54>
 801e586:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 801e58a:	4b1b      	ldr	r3, [pc, #108]	@ (801e5f8 <spindle_enumerate_spindles+0xb0>)
 801e58c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 801e590:	f993 102c 	ldrsb.w	r1, [r3, #44]	@ 0x2c
 801e594:	f99d 3000 	ldrsb.w	r3, [sp]
 801e598:	4299      	cmp	r1, r3
 801e59a:	d00d      	beq.n	801e5b8 <spindle_enumerate_spindles+0x70>
 801e59c:	214c      	movs	r1, #76	@ 0x4c
 801e59e:	4b15      	ldr	r3, [pc, #84]	@ (801e5f4 <spindle_enumerate_spindles+0xac>)
 801e5a0:	fb01 3304 	mla	r3, r1, r4, r3
 801e5a4:	3304      	adds	r3, #4
 801e5a6:	9303      	str	r3, [sp, #12]
        spindle.is_current = spindle.enabled && sys_spindle[0].hal.id == idx;
 801e5a8:	b172      	cbz	r2, 801e5c8 <spindle_enumerate_spindles+0x80>
 801e5aa:	4b13      	ldr	r3, [pc, #76]	@ (801e5f8 <spindle_enumerate_spindles+0xb0>)
 801e5ac:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 801e5b0:	42a3      	cmp	r3, r4
 801e5b2:	d017      	beq.n	801e5e4 <spindle_enumerate_spindles+0x9c>
 801e5b4:	2300      	movs	r3, #0
 801e5b6:	e008      	b.n	801e5ca <spindle_enumerate_spindles+0x82>
        spindle.hal = spindle.enabled && sys_spindle[spindle.num].hal.id == spindle.id ? &sys_spindle[spindle.num].hal : &spindles[idx].hal;
 801e5b8:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 801e5bc:	011b      	lsls	r3, r3, #4
 801e5be:	3328      	adds	r3, #40	@ 0x28
 801e5c0:	490d      	ldr	r1, [pc, #52]	@ (801e5f8 <spindle_enumerate_spindles+0xb0>)
 801e5c2:	440b      	add	r3, r1
 801e5c4:	3304      	adds	r3, #4
 801e5c6:	e7ee      	b.n	801e5a6 <spindle_enumerate_spindles+0x5e>
        spindle.is_current = spindle.enabled && sys_spindle[0].hal.id == idx;
 801e5c8:	2300      	movs	r3, #0
 801e5ca:	f88d 3009 	strb.w	r3, [sp, #9]
        callback(&spindle, data);
 801e5ce:	4629      	mov	r1, r5
 801e5d0:	4668      	mov	r0, sp
 801e5d2:	47b0      	blx	r6
    for(idx = 0; idx < n_spindle; idx++) {
 801e5d4:	3401      	adds	r4, #1
 801e5d6:	4b06      	ldr	r3, [pc, #24]	@ (801e5f0 <spindle_enumerate_spindles+0xa8>)
 801e5d8:	781b      	ldrb	r3, [r3, #0]
 801e5da:	42a3      	cmp	r3, r4
 801e5dc:	d8c0      	bhi.n	801e560 <spindle_enumerate_spindles+0x18>
    return true;
 801e5de:	2001      	movs	r0, #1
}
 801e5e0:	b004      	add	sp, #16
 801e5e2:	bd70      	pop	{r4, r5, r6, pc}
        spindle.is_current = spindle.enabled && sys_spindle[0].hal.id == idx;
 801e5e4:	2301      	movs	r3, #1
 801e5e6:	e7f0      	b.n	801e5ca <spindle_enumerate_spindles+0x82>
        return false;
 801e5e8:	2000      	movs	r0, #0
}
 801e5ea:	4770      	bx	lr
        return false;
 801e5ec:	2000      	movs	r0, #0
 801e5ee:	e7f7      	b.n	801e5e0 <spindle_enumerate_spindles+0x98>
 801e5f0:	200026dc 	.word	0x200026dc
 801e5f4:	20002620 	.word	0x20002620
 801e5f8:	2000266c 	.word	0x2000266c

0801e5fc <spindle_is_enabled>:
    if(spindle_num == -1)
 801e5fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 801e600:	d002      	beq.n	801e608 <spindle_is_enabled+0xc>
    return spindle_num >= 0 && spindle_num < N_SYS_SPINDLE && sys_spindle[spindle_num].enabled;
 801e602:	b110      	cbz	r0, 801e60a <spindle_is_enabled+0xe>
 801e604:	2000      	movs	r0, #0
 801e606:	4770      	bx	lr
        spindle_num = 0;
 801e608:	2000      	movs	r0, #0
    return spindle_num >= 0 && spindle_num < N_SYS_SPINDLE && sys_spindle[spindle_num].enabled;
 801e60a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801e60e:	4b05      	ldr	r3, [pc, #20]	@ (801e624 <spindle_is_enabled+0x28>)
 801e610:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801e614:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 801e618:	b90b      	cbnz	r3, 801e61e <spindle_is_enabled+0x22>
 801e61a:	2000      	movs	r0, #0
 801e61c:	4770      	bx	lr
 801e61e:	2001      	movs	r0, #1
}
 801e620:	4770      	bx	lr
 801e622:	bf00      	nop
 801e624:	2000266c 	.word	0x2000266c

0801e628 <spindle_get>:
    return spindle_num >= 0 && spindle_num < N_SYS_SPINDLE && sys_spindle[spindle_num].enabled ? &sys_spindle[spindle_num].hal : NULL;
 801e628:	b968      	cbnz	r0, 801e646 <spindle_get+0x1e>
 801e62a:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 801e62e:	4a08      	ldr	r2, [pc, #32]	@ (801e650 <spindle_get+0x28>)
 801e630:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801e634:	f892 206c 	ldrb.w	r2, [r2, #108]	@ 0x6c
 801e638:	b13a      	cbz	r2, 801e64a <spindle_get+0x22>
 801e63a:	0108      	lsls	r0, r1, #4
 801e63c:	3028      	adds	r0, #40	@ 0x28
 801e63e:	4b04      	ldr	r3, [pc, #16]	@ (801e650 <spindle_get+0x28>)
 801e640:	4418      	add	r0, r3
 801e642:	3004      	adds	r0, #4
 801e644:	4770      	bx	lr
 801e646:	2000      	movs	r0, #0
 801e648:	4770      	bx	lr
 801e64a:	2000      	movs	r0, #0
}
 801e64c:	4770      	bx	lr
 801e64e:	bf00      	nop
 801e650:	2000266c 	.word	0x2000266c

0801e654 <spindle_add_null>:
/*! \brief Register a null spindle that has no connection to the outside world.
This is done automatically on startup if no spindle can be succesfully enabled.
\returns assigned spindle id as a \ref spindle_id_t if successful, \a -1 if not.
*/
spindle_id_t spindle_add_null (void)
{
 801e654:	b508      	push	{r3, lr}
        .update_pwm = null_update_pwm,
        .update_rpm = null_update_rpm
    };

    bool registered = false;
    uint_fast8_t idx = n_spindle;
 801e656:	4b0d      	ldr	r3, [pc, #52]	@ (801e68c <spindle_add_null+0x38>)
 801e658:	7818      	ldrb	r0, [r3, #0]

    if(idx) do {
 801e65a:	b168      	cbz	r0, 801e678 <spindle_add_null+0x24>
        if((registered = spindles[--idx].hal.type == SpindleType_Null))
 801e65c:	3801      	subs	r0, #1
 801e65e:	4b0c      	ldr	r3, [pc, #48]	@ (801e690 <spindle_add_null+0x3c>)
 801e660:	224c      	movs	r2, #76	@ 0x4c
 801e662:	fb02 3300 	mla	r3, r2, r0, r3
 801e666:	7b1b      	ldrb	r3, [r3, #12]
 801e668:	2b05      	cmp	r3, #5
 801e66a:	bf0c      	ite	eq
 801e66c:	2301      	moveq	r3, #1
 801e66e:	2300      	movne	r3, #0
 801e670:	d003      	beq.n	801e67a <spindle_add_null+0x26>
            break;
    } while(idx);
 801e672:	2800      	cmp	r0, #0
 801e674:	d1f2      	bne.n	801e65c <spindle_add_null+0x8>
 801e676:	e000      	b.n	801e67a <spindle_add_null+0x26>
    bool registered = false;
 801e678:	2300      	movs	r3, #0

    if(!registered)
 801e67a:	b10b      	cbz	r3, 801e680 <spindle_add_null+0x2c>
        return spindle_register(&spindle, "NULL");

    return idx;
 801e67c:	b240      	sxtb	r0, r0
}
 801e67e:	bd08      	pop	{r3, pc}
        return spindle_register(&spindle, "NULL");
 801e680:	4904      	ldr	r1, [pc, #16]	@ (801e694 <spindle_add_null+0x40>)
 801e682:	4805      	ldr	r0, [pc, #20]	@ (801e698 <spindle_add_null+0x44>)
 801e684:	f7ff fec8 	bl	801e418 <spindle_register>
 801e688:	e7f9      	b.n	801e67e <spindle_add_null+0x2a>
 801e68a:	bf00      	nop
 801e68c:	200026dc 	.word	0x200026dc
 801e690:	20002620 	.word	0x20002620
 801e694:	08030aac 	.word	0x08030aac
 801e698:	08030ab4 	.word	0x08030ab4

0801e69c <spindle_select>:
{
 801e69c:	b508      	push	{r3, lr}
    if(n_spindle == 0 && spindle_id >= 0) {
 801e69e:	4b0d      	ldr	r3, [pc, #52]	@ (801e6d4 <spindle_select+0x38>)
 801e6a0:	781b      	ldrb	r3, [r3, #0]
 801e6a2:	b90b      	cbnz	r3, 801e6a8 <spindle_select+0xc>
 801e6a4:	2800      	cmp	r0, #0
 801e6a6:	da0d      	bge.n	801e6c4 <spindle_select+0x28>
    return (sys_spindle[0].enabled && sys_spindle[0].hal.id == spindle_id) || spindle_activate(spindle_id, 0);
 801e6a8:	4b0b      	ldr	r3, [pc, #44]	@ (801e6d8 <spindle_select+0x3c>)
 801e6aa:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 801e6ae:	b123      	cbz	r3, 801e6ba <spindle_select+0x1e>
 801e6b0:	4b09      	ldr	r3, [pc, #36]	@ (801e6d8 <spindle_select+0x3c>)
 801e6b2:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 801e6b6:	4283      	cmp	r3, r0
 801e6b8:	d008      	beq.n	801e6cc <spindle_select+0x30>
 801e6ba:	2100      	movs	r1, #0
 801e6bc:	f7ff fd56 	bl	801e16c <spindle_activate>
 801e6c0:	b930      	cbnz	r0, 801e6d0 <spindle_select+0x34>
}
 801e6c2:	bd08      	pop	{r3, pc}
        spindle_add_null();
 801e6c4:	f7ff ffc6 	bl	801e654 <spindle_add_null>
        spindle_id = 0;
 801e6c8:	2000      	movs	r0, #0
 801e6ca:	e7ed      	b.n	801e6a8 <spindle_select+0xc>
    return (sys_spindle[0].enabled && sys_spindle[0].hal.id == spindle_id) || spindle_activate(spindle_id, 0);
 801e6cc:	2001      	movs	r0, #1
 801e6ce:	e7f8      	b.n	801e6c2 <spindle_select+0x26>
 801e6d0:	2001      	movs	r0, #1
 801e6d2:	e7f6      	b.n	801e6c2 <spindle_select+0x26>
 801e6d4:	200026dc 	.word	0x200026dc
 801e6d8:	2000266c 	.word	0x2000266c

0801e6dc <spindle_get_count>:
{
 801e6dc:	b508      	push	{r3, lr}
    if(n_spindle == 0)
 801e6de:	4b09      	ldr	r3, [pc, #36]	@ (801e704 <spindle_get_count+0x28>)
 801e6e0:	781b      	ldrb	r3, [r3, #0]
 801e6e2:	b123      	cbz	r3, 801e6ee <spindle_get_count+0x12>
    return n_spindle == 1 && spindles[0].cfg->type == SpindleType_Null ? 0 : n_spindle;
 801e6e4:	4b07      	ldr	r3, [pc, #28]	@ (801e704 <spindle_get_count+0x28>)
 801e6e6:	7818      	ldrb	r0, [r3, #0]
 801e6e8:	2801      	cmp	r0, #1
 801e6ea:	d004      	beq.n	801e6f6 <spindle_get_count+0x1a>
}
 801e6ec:	bd08      	pop	{r3, pc}
        spindle_select(0);
 801e6ee:	2000      	movs	r0, #0
 801e6f0:	f7ff ffd4 	bl	801e69c <spindle_select>
 801e6f4:	e7f6      	b.n	801e6e4 <spindle_get_count+0x8>
    return n_spindle == 1 && spindles[0].cfg->type == SpindleType_Null ? 0 : n_spindle;
 801e6f6:	4b04      	ldr	r3, [pc, #16]	@ (801e708 <spindle_get_count+0x2c>)
 801e6f8:	681b      	ldr	r3, [r3, #0]
 801e6fa:	7a1b      	ldrb	r3, [r3, #8]
 801e6fc:	2b05      	cmp	r3, #5
 801e6fe:	d1f5      	bne.n	801e6ec <spindle_get_count+0x10>
 801e700:	2000      	movs	r0, #0
 801e702:	e7f3      	b.n	801e6ec <spindle_get_count+0x10>
 801e704:	200026dc 	.word	0x200026dc
 801e708:	20002620 	.word	0x20002620

0801e70c <spindle_set_rpm>:
\param rpm the programmed RPM.
\param override_pct override value in percent.
\returns the calulated RPM.
*/
float spindle_set_rpm (spindle_ptrs_t *spindle, float rpm, override_t override_pct)
{
 801e70c:	eef0 7a40 	vmov.f32	s15, s0
    if(override_pct != 100)
 801e710:	2964      	cmp	r1, #100	@ 0x64
 801e712:	d009      	beq.n	801e728 <spindle_set_rpm+0x1c>
        rpm *= 0.01f * (float)override_pct; // Scale RPM by override value.
 801e714:	ee07 1a10 	vmov	s14, r1
 801e718:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801e71c:	eddf 6a11 	vldr	s13, [pc, #68]	@ 801e764 <spindle_set_rpm+0x58>
 801e720:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e724:	ee60 7a07 	vmul.f32	s15, s0, s14

    // Apply RPM limits
    if (rpm <= 0.0f) // TODO: remove this test?
 801e728:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e730:	d910      	bls.n	801e754 <spindle_set_rpm+0x48>
        rpm = 0.0f;
    else if (rpm > spindle->rpm_max)
 801e732:	ed90 0a06 	vldr	s0, [r0, #24]
 801e736:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801e73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e73e:	d40b      	bmi.n	801e758 <spindle_set_rpm+0x4c>
        rpm = spindle->rpm_max;
    else if (rpm < spindle->rpm_min)
 801e740:	ed90 0a05 	vldr	s0, [r0, #20]
 801e744:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801e748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e74c:	dc04      	bgt.n	801e758 <spindle_set_rpm+0x4c>
 801e74e:	eeb0 0a67 	vmov.f32	s0, s15
 801e752:	e001      	b.n	801e758 <spindle_set_rpm+0x4c>
        rpm = 0.0f;
 801e754:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 801e768 <spindle_set_rpm+0x5c>
        rpm = spindle->rpm_min;

    spindle->param->rpm_overridden = rpm;
 801e758:	6843      	ldr	r3, [r0, #4]
 801e75a:	ed83 0a01 	vstr	s0, [r3, #4]
    spindle->param->override_pct = override_pct;
 801e75e:	6843      	ldr	r3, [r0, #4]
 801e760:	60d9      	str	r1, [r3, #12]

    return rpm;
}
 801e762:	4770      	bx	lr
 801e764:	3c23d70a 	.word	0x3c23d70a
 801e768:	00000000 	.word	0x00000000

0801e76c <set_state>:
    if (!ABORTED) { // Block during abort.
 801e76c:	4b29      	ldr	r3, [pc, #164]	@ (801e814 <set_state+0xa8>)
 801e76e:	781b      	ldrb	r3, [r3, #0]
 801e770:	2b00      	cmp	r3, #0
 801e772:	d142      	bne.n	801e7fa <set_state+0x8e>
{
 801e774:	b570      	push	{r4, r5, r6, lr}
 801e776:	ed2d 8b02 	vpush	{d8}
 801e77a:	4604      	mov	r4, r0
 801e77c:	460d      	mov	r5, r1
 801e77e:	eeb0 8a40 	vmov.f32	s16, s0
    if (!ABORTED) { // Block during abort.
 801e782:	4b24      	ldr	r3, [pc, #144]	@ (801e814 <set_state+0xa8>)
 801e784:	785b      	ldrb	r3, [r3, #1]
 801e786:	b9ab      	cbnz	r3, 801e7b4 <set_state+0x48>
        if (!state.on) { // Halt or set spindle direction and rpm.
 801e788:	b2cb      	uxtb	r3, r1
 801e78a:	f015 0f01 	tst.w	r5, #1
 801e78e:	d119      	bne.n	801e7c4 <set_state+0x58>
            spindle->param->rpm = rpm = 0.0f;
 801e790:	6843      	ldr	r3, [r0, #4]
 801e792:	ed9f 8a21 	vldr	s16, [pc, #132]	@ 801e818 <set_state+0xac>
 801e796:	ed83 8a00 	vstr	s16, [r3]
            spindle->set_state(spindle, (spindle_state_t){0}, 0.0f);
 801e79a:	6a03      	ldr	r3, [r0, #32]
 801e79c:	eeb0 0a48 	vmov.f32	s0, s16
 801e7a0:	f04f 0100 	mov.w	r1, #0
 801e7a4:	4798      	blx	r3
        system_add_rt_report(Report_Spindle); // Set to report change immediately
 801e7a6:	2010      	movs	r0, #16
 801e7a8:	f003 fb8c 	bl	8021ec4 <system_add_rt_report>
        st_rpm_changed(rpm);
 801e7ac:	eeb0 0a48 	vmov.f32	s0, s16
 801e7b0:	f001 fb36 	bl	801fe20 <st_rpm_changed>
    return !ABORTED;
 801e7b4:	4b17      	ldr	r3, [pc, #92]	@ (801e814 <set_state+0xa8>)
 801e7b6:	781b      	ldrb	r3, [r3, #0]
 801e7b8:	b9cb      	cbnz	r3, 801e7ee <set_state+0x82>
 801e7ba:	4b16      	ldr	r3, [pc, #88]	@ (801e814 <set_state+0xa8>)
 801e7bc:	785b      	ldrb	r3, [r3, #1]
 801e7be:	b1d3      	cbz	r3, 801e7f6 <set_state+0x8a>
 801e7c0:	2000      	movs	r0, #0
 801e7c2:	e015      	b.n	801e7f0 <set_state+0x84>
            if (spindle->cap.laser && state.ccw)
 801e7c4:	7a82      	ldrb	r2, [r0, #10]
 801e7c6:	f012 0f08 	tst.w	r2, #8
 801e7ca:	d004      	beq.n	801e7d6 <set_state+0x6a>
 801e7cc:	f013 0f02 	tst.w	r3, #2
 801e7d0:	d001      	beq.n	801e7d6 <set_state+0x6a>
                rpm = 0.0f; // TODO: May need to be rpm_min*(100/MAX_SPINDLE_RPM_OVERRIDE);
 801e7d2:	ed9f 8a11 	vldr	s16, [pc, #68]	@ 801e818 <set_state+0xac>
            spindle->set_state(spindle, state, spindle_set_rpm(spindle, rpm, spindle->param->override_pct));
 801e7d6:	6a26      	ldr	r6, [r4, #32]
 801e7d8:	6863      	ldr	r3, [r4, #4]
 801e7da:	68d9      	ldr	r1, [r3, #12]
 801e7dc:	eeb0 0a48 	vmov.f32	s0, s16
 801e7e0:	4620      	mov	r0, r4
 801e7e2:	f7ff ff93 	bl	801e70c <spindle_set_rpm>
 801e7e6:	4629      	mov	r1, r5
 801e7e8:	4620      	mov	r0, r4
 801e7ea:	47b0      	blx	r6
 801e7ec:	e7db      	b.n	801e7a6 <set_state+0x3a>
    return !ABORTED;
 801e7ee:	2000      	movs	r0, #0
}
 801e7f0:	ecbd 8b02 	vpop	{d8}
 801e7f4:	bd70      	pop	{r4, r5, r6, pc}
    return !ABORTED;
 801e7f6:	2001      	movs	r0, #1
 801e7f8:	e7fa      	b.n	801e7f0 <set_state+0x84>
 801e7fa:	4b06      	ldr	r3, [pc, #24]	@ (801e814 <set_state+0xa8>)
 801e7fc:	781b      	ldrb	r3, [r3, #0]
 801e7fe:	b923      	cbnz	r3, 801e80a <set_state+0x9e>
 801e800:	4b04      	ldr	r3, [pc, #16]	@ (801e814 <set_state+0xa8>)
 801e802:	785b      	ldrb	r3, [r3, #1]
 801e804:	b11b      	cbz	r3, 801e80e <set_state+0xa2>
 801e806:	2000      	movs	r0, #0
 801e808:	4770      	bx	lr
 801e80a:	2000      	movs	r0, #0
 801e80c:	4770      	bx	lr
 801e80e:	2001      	movs	r0, #1
}
 801e810:	4770      	bx	lr
 801e812:	bf00      	nop
 801e814:	20001d70 	.word	0x20001d70
 801e818:	00000000 	.word	0x00000000

0801e81c <spindle_set_state>:
{
 801e81c:	b508      	push	{r3, lr}
    return set_state(spindle, state, rpm);
 801e81e:	f7ff ffa5 	bl	801e76c <set_state>
}
 801e822:	bd08      	pop	{r3, pc}

0801e824 <spindle_restore>:
{
 801e824:	b538      	push	{r3, r4, r5, lr}
 801e826:	ed2d 8b02 	vpush	{d8}
    if(spindle->cap.laser) // When in laser mode, ignore spindle spin-up delay. Set to turn on laser when cycle starts.
 801e82a:	7a83      	ldrb	r3, [r0, #10]
 801e82c:	f013 0f08 	tst.w	r3, #8
 801e830:	d009      	beq.n	801e846 <spindle_restore+0x22>
        sys.step_control.update_spindle_rpm = On;
 801e832:	4a2a      	ldr	r2, [pc, #168]	@ (801e8dc <spindle_restore+0xb8>)
 801e834:	7e13      	ldrb	r3, [r2, #24]
 801e836:	f043 0308 	orr.w	r3, r3, #8
 801e83a:	7613      	strb	r3, [r2, #24]
    bool ok = true;
 801e83c:	2501      	movs	r5, #1
}
 801e83e:	4628      	mov	r0, r5
 801e840:	ecbd 8b02 	vpop	{d8}
 801e844:	bd38      	pop	{r3, r4, r5, pc}
 801e846:	4604      	mov	r4, r0
 801e848:	460d      	mov	r5, r1
        spindle_set_state(spindle, state, rpm);
 801e84a:	f7ff ffe7 	bl	801e81c <spindle_set_state>
        if(state.on) {
 801e84e:	f015 0f01 	tst.w	r5, #1
 801e852:	d040      	beq.n	801e8d6 <spindle_restore+0xb2>
            if((ok = !spindle->cap.at_speed))
 801e854:	7aa3      	ldrb	r3, [r4, #10]
 801e856:	f003 0304 	and.w	r3, r3, #4
 801e85a:	2b00      	cmp	r3, #0
 801e85c:	bf0c      	ite	eq
 801e85e:	2501      	moveq	r5, #1
 801e860:	2500      	movne	r5, #0
 801e862:	d030      	beq.n	801e8c6 <spindle_restore+0xa2>
            else if((ok == (settings.spindle.at_speed_tolerance <= 0.0f))) {
 801e864:	4b1e      	ldr	r3, [pc, #120]	@ (801e8e0 <spindle_restore+0xbc>)
 801e866:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 801e86a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e872:	bf94      	ite	ls
 801e874:	2301      	movls	r3, #1
 801e876:	2300      	movhi	r3, #0
 801e878:	42ab      	cmp	r3, r5
 801e87a:	d1e0      	bne.n	801e83e <spindle_restore+0x1a>
                float delay = 0.0f;
 801e87c:	ed9f 8a19 	vldr	s16, [pc, #100]	@ 801e8e4 <spindle_restore+0xc0>
                while(!(ok = spindle->get_state(spindle).at_speed)) {
 801e880:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801e882:	4620      	mov	r0, r4
 801e884:	4798      	blx	r3
 801e886:	f3c0 1580 	ubfx	r5, r0, #6, #1
 801e88a:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801e88e:	d1d6      	bne.n	801e83e <spindle_restore+0x1a>
                    if(!(ok = delay_sec(0.1f, DelayMode_SysSuspend)))
 801e890:	2001      	movs	r0, #1
 801e892:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 801e8e8 <spindle_restore+0xc4>
 801e896:	f7f7 fa25 	bl	8015ce4 <delay_sec>
 801e89a:	4605      	mov	r5, r0
 801e89c:	2800      	cmp	r0, #0
 801e89e:	d0ce      	beq.n	801e83e <spindle_restore+0x1a>
                    delay += 0.1f;
 801e8a0:	eddf 7a11 	vldr	s15, [pc, #68]	@ 801e8e8 <spindle_restore+0xc4>
 801e8a4:	ee38 8a27 	vadd.f32	s16, s16, s15
                    if(!(ok = delay < settings.safety_door.spindle_on_delay)) {
 801e8a8:	4b0d      	ldr	r3, [pc, #52]	@ (801e8e0 <spindle_restore+0xbc>)
 801e8aa:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 801e8ae:	eef4 7ac8 	vcmpe.f32	s15, s16
 801e8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8b6:	bfcc      	ite	gt
 801e8b8:	2501      	movgt	r5, #1
 801e8ba:	2500      	movle	r5, #0
 801e8bc:	dce0      	bgt.n	801e880 <spindle_restore+0x5c>
                        system_raise_alarm(Alarm_Spindle);
 801e8be:	200e      	movs	r0, #14
 801e8c0:	f003 fab2 	bl	8021e28 <system_raise_alarm>
                        break;
 801e8c4:	e7bb      	b.n	801e83e <spindle_restore+0x1a>
                ok = delay_sec(settings.safety_door.spindle_on_delay, DelayMode_SysSuspend);
 801e8c6:	2001      	movs	r0, #1
 801e8c8:	4b05      	ldr	r3, [pc, #20]	@ (801e8e0 <spindle_restore+0xbc>)
 801e8ca:	ed93 0a50 	vldr	s0, [r3, #320]	@ 0x140
 801e8ce:	f7f7 fa09 	bl	8015ce4 <delay_sec>
 801e8d2:	4605      	mov	r5, r0
 801e8d4:	e7b3      	b.n	801e83e <spindle_restore+0x1a>
    bool ok = true;
 801e8d6:	2501      	movs	r5, #1
 801e8d8:	e7b1      	b.n	801e83e <spindle_restore+0x1a>
 801e8da:	bf00      	nop
 801e8dc:	20001d70 	.word	0x20001d70
 801e8e0:	200024a8 	.word	0x200024a8
 801e8e4:	00000000 	.word	0x00000000
 801e8e8:	3dcccccd 	.word	0x3dcccccd

0801e8ec <spindle_sync>:
{
 801e8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8ee:	ed2d 8b02 	vpush	{d8}
 801e8f2:	4605      	mov	r5, r0
 801e8f4:	460f      	mov	r7, r1
 801e8f6:	eeb0 8a40 	vmov.f32	s16, s0
    if (!(ok = state_get() == STATE_CHECK_MODE)) {
 801e8fa:	f000 fb25 	bl	801ef48 <state_get>
 801e8fe:	2802      	cmp	r0, #2
 801e900:	bf0c      	ite	eq
 801e902:	2001      	moveq	r0, #1
 801e904:	2000      	movne	r0, #0
 801e906:	d019      	beq.n	801e93c <spindle_sync+0x50>
        bool at_speed = !state.on || !spindle->cap.at_speed || settings.spindle.at_speed_tolerance <= 0.0f;
 801e908:	f017 0f01 	tst.w	r7, #1
 801e90c:	d00f      	beq.n	801e92e <spindle_sync+0x42>
 801e90e:	7aab      	ldrb	r3, [r5, #10]
 801e910:	f013 0f04 	tst.w	r3, #4
 801e914:	d015      	beq.n	801e942 <spindle_sync+0x56>
 801e916:	4b24      	ldr	r3, [pc, #144]	@ (801e9a8 <spindle_sync+0xbc>)
 801e918:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 801e91c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e924:	d901      	bls.n	801e92a <spindle_sync+0x3e>
 801e926:	2600      	movs	r6, #0
 801e928:	e002      	b.n	801e930 <spindle_sync+0x44>
 801e92a:	2601      	movs	r6, #1
 801e92c:	e000      	b.n	801e930 <spindle_sync+0x44>
 801e92e:	2601      	movs	r6, #1
        if((ok = protocol_buffer_synchronize()) && set_state(spindle, state, rpm) && !at_speed) {
 801e930:	f7f9 fa70 	bl	8017e14 <protocol_buffer_synchronize>
 801e934:	4604      	mov	r4, r0
 801e936:	b930      	cbnz	r0, 801e946 <spindle_sync+0x5a>
        ok &= at_speed;
 801e938:	ea04 0006 	and.w	r0, r4, r6
}
 801e93c:	ecbd 8b02 	vpop	{d8}
 801e940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        bool at_speed = !state.on || !spindle->cap.at_speed || settings.spindle.at_speed_tolerance <= 0.0f;
 801e942:	2601      	movs	r6, #1
 801e944:	e7f4      	b.n	801e930 <spindle_sync+0x44>
        if((ok = protocol_buffer_synchronize()) && set_state(spindle, state, rpm) && !at_speed) {
 801e946:	eeb0 0a48 	vmov.f32	s0, s16
 801e94a:	4639      	mov	r1, r7
 801e94c:	4628      	mov	r0, r5
 801e94e:	f7ff ff0d 	bl	801e76c <set_state>
 801e952:	2800      	cmp	r0, #0
 801e954:	d0f0      	beq.n	801e938 <spindle_sync+0x4c>
 801e956:	2e00      	cmp	r6, #0
 801e958:	d1ee      	bne.n	801e938 <spindle_sync+0x4c>
            float on_delay = 0.0f;
 801e95a:	ed9f 8a14 	vldr	s16, [pc, #80]	@ 801e9ac <spindle_sync+0xc0>
            while(!(at_speed = spindle->get_state(spindle).at_speed)) {
 801e95e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801e960:	4628      	mov	r0, r5
 801e962:	4798      	blx	r3
 801e964:	f3c0 1680 	ubfx	r6, r0, #6, #1
 801e968:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801e96c:	d1e4      	bne.n	801e938 <spindle_sync+0x4c>
                if(!(ok = delay_sec(0.2f, DelayMode_Dwell)))
 801e96e:	2000      	movs	r0, #0
 801e970:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 801e9b0 <spindle_sync+0xc4>
 801e974:	f7f7 f9b6 	bl	8015ce4 <delay_sec>
 801e978:	4604      	mov	r4, r0
 801e97a:	2800      	cmp	r0, #0
 801e97c:	d0dc      	beq.n	801e938 <spindle_sync+0x4c>
                on_delay += 0.2f;
 801e97e:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801e9b0 <spindle_sync+0xc4>
 801e982:	ee38 8a27 	vadd.f32	s16, s16, s15
                if(!(ok = on_delay < settings.safety_door.spindle_on_delay)) {
 801e986:	4b08      	ldr	r3, [pc, #32]	@ (801e9a8 <spindle_sync+0xbc>)
 801e988:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 801e98c:	eef4 7ac8 	vcmpe.f32	s15, s16
 801e990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e994:	bfcc      	ite	gt
 801e996:	2401      	movgt	r4, #1
 801e998:	2400      	movle	r4, #0
 801e99a:	dce0      	bgt.n	801e95e <spindle_sync+0x72>
                    gc_spindle_off();
 801e99c:	f7ee fe34 	bl	800d608 <gc_spindle_off>
                    system_raise_alarm(Alarm_Spindle);
 801e9a0:	200e      	movs	r0, #14
 801e9a2:	f003 fa41 	bl	8021e28 <system_raise_alarm>
                    break;
 801e9a6:	e7c7      	b.n	801e938 <spindle_sync+0x4c>
 801e9a8:	200024a8 	.word	0x200024a8
 801e9ac:	00000000 	.word	0x00000000
 801e9b0:	3e4ccccd 	.word	0x3e4ccccd

0801e9b4 <spindle_set_override>:
{
 801e9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9b6:	4605      	mov	r5, r0
    if(speed_override != 100 && spindle->param->state.override_disable)
 801e9b8:	2964      	cmp	r1, #100	@ 0x64
 801e9ba:	d006      	beq.n	801e9ca <spindle_set_override+0x16>
 801e9bc:	6843      	ldr	r3, [r0, #4]
 801e9be:	7a1b      	ldrb	r3, [r3, #8]
 801e9c0:	f013 0f10 	tst.w	r3, #16
 801e9c4:	d10a      	bne.n	801e9dc <spindle_set_override+0x28>
    speed_override = constrain(speed_override, MIN_SPINDLE_RPM_OVERRIDE, MAX_SPINDLE_RPM_OVERRIDE);
 801e9c6:	2909      	cmp	r1, #9
 801e9c8:	d909      	bls.n	801e9de <spindle_set_override+0x2a>
 801e9ca:	29c8      	cmp	r1, #200	@ 0xc8
 801e9cc:	bf28      	it	cs
 801e9ce:	21c8      	movcs	r1, #200	@ 0xc8
 801e9d0:	460c      	mov	r4, r1
    if ((uint8_t)speed_override != spindle->param->override_pct) {
 801e9d2:	686b      	ldr	r3, [r5, #4]
 801e9d4:	68d9      	ldr	r1, [r3, #12]
 801e9d6:	b2e2      	uxtb	r2, r4
 801e9d8:	4291      	cmp	r1, r2
 801e9da:	d102      	bne.n	801e9e2 <spindle_set_override+0x2e>
}
 801e9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    speed_override = constrain(speed_override, MIN_SPINDLE_RPM_OVERRIDE, MAX_SPINDLE_RPM_OVERRIDE);
 801e9de:	240a      	movs	r4, #10
 801e9e0:	e7f7      	b.n	801e9d2 <spindle_set_override+0x1e>
        spindle->param->override_pct = speed_override;
 801e9e2:	60dc      	str	r4, [r3, #12]
        if(state_get() == STATE_IDLE)
 801e9e4:	f000 fab0 	bl	801ef48 <state_get>
 801e9e8:	b1e0      	cbz	r0, 801ea24 <spindle_set_override+0x70>
            sys.step_control.update_spindle_rpm = On;
 801e9ea:	4a12      	ldr	r2, [pc, #72]	@ (801ea34 <spindle_set_override+0x80>)
 801e9ec:	7e13      	ldrb	r3, [r2, #24]
 801e9ee:	f043 0308 	orr.w	r3, r3, #8
 801e9f2:	7613      	strb	r3, [r2, #24]
        system_add_rt_report(Report_Overrides); // Set to report change immediately
 801e9f4:	2040      	movs	r0, #64	@ 0x40
 801e9f6:	f003 fa65 	bl	8021ec4 <system_add_rt_report>
       if(grbl.on_spindle_programmed)
 801e9fa:	4b0f      	ldr	r3, [pc, #60]	@ (801ea38 <spindle_set_override+0x84>)
 801e9fc:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801e9fe:	b156      	cbz	r6, 801ea16 <spindle_set_override+0x62>
           grbl.on_spindle_programmed(spindle, gc_state.modal.spindle.state, spindle_set_rpm(spindle, gc_state.spindle.rpm, speed_override), gc_state.modal.spindle.rpm_mode);
 801ea00:	4f0e      	ldr	r7, [pc, #56]	@ (801ea3c <spindle_set_override+0x88>)
 801ea02:	4621      	mov	r1, r4
 801ea04:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 801ea08:	4628      	mov	r0, r5
 801ea0a:	f7ff fe7f 	bl	801e70c <spindle_set_rpm>
 801ea0e:	7efa      	ldrb	r2, [r7, #27]
 801ea10:	7eb9      	ldrb	r1, [r7, #26]
 801ea12:	4628      	mov	r0, r5
 801ea14:	47b0      	blx	r6
       if(grbl.on_override_changed)
 801ea16:	4b08      	ldr	r3, [pc, #32]	@ (801ea38 <spindle_set_override+0x84>)
 801ea18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ea1a:	2b00      	cmp	r3, #0
 801ea1c:	d0de      	beq.n	801e9dc <spindle_set_override+0x28>
           grbl.on_override_changed(OverrideChanged_SpindleRPM);
 801ea1e:	2000      	movs	r0, #0
 801ea20:	4798      	blx	r3
 801ea22:	e7db      	b.n	801e9dc <spindle_set_override+0x28>
            spindle_set_state(spindle, gc_state.modal.spindle.state, gc_state.spindle.rpm);
 801ea24:	4b05      	ldr	r3, [pc, #20]	@ (801ea3c <spindle_set_override+0x88>)
 801ea26:	ed93 0a14 	vldr	s0, [r3, #80]	@ 0x50
 801ea2a:	7e99      	ldrb	r1, [r3, #26]
 801ea2c:	4628      	mov	r0, r5
 801ea2e:	f7ff fef5 	bl	801e81c <spindle_set_state>
 801ea32:	e7df      	b.n	801e9f4 <spindle_set_override+0x40>
 801ea34:	20001d70 	.word	0x20001d70
 801ea38:	20001c78 	.word	0x20001c78
 801ea3c:	200017c8 	.word	0x200017c8

0801ea40 <spindle_all_off>:

/*! \brief Turn off all enabled spindles.
*/
void spindle_all_off (void)
{
 801ea40:	b508      	push	{r3, lr}
    spindle_ptrs_t *spindle;
    uint_fast8_t spindle_num = N_SYS_SPINDLE;

    do {
        if((spindle = spindle_get(--spindle_num))) {
 801ea42:	2000      	movs	r0, #0
 801ea44:	f7ff fdf0 	bl	801e628 <spindle_get>
 801ea48:	b160      	cbz	r0, 801ea64 <spindle_all_off+0x24>
            spindle->param->rpm = spindle->param->rpm_overridden = 0.0f;
 801ea4a:	6842      	ldr	r2, [r0, #4]
 801ea4c:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 801ea6c <spindle_all_off+0x2c>
 801ea50:	ed82 0a01 	vstr	s0, [r2, #4]
 801ea54:	6842      	ldr	r2, [r0, #4]
 801ea56:	ed82 0a00 	vstr	s0, [r2]
            spindle->param->state.value = 0;
 801ea5a:	6842      	ldr	r2, [r0, #4]
 801ea5c:	2100      	movs	r1, #0
 801ea5e:	7211      	strb	r1, [r2, #8]
#ifdef GRBL_ESP32
            spindle->esp32_off(spindle);
#else
            spindle->set_state(spindle, (spindle_state_t){0}, 0.0f);
 801ea60:	6a02      	ldr	r2, [r0, #32]
 801ea62:	4790      	blx	r2
#endif
        }
    } while(spindle_num);

    system_add_rt_report(Report_Spindle);
 801ea64:	2010      	movs	r0, #16
 801ea66:	f003 fa2d 	bl	8021ec4 <system_add_rt_report>
}
 801ea6a:	bd08      	pop	{r3, pc}
 801ea6c:	00000000 	.word	0x00000000

0801ea70 <spindle_is_on>:

/*! \brief Check if any of the enabled spindles is running.
\returns \a true if a spindle is running, \a false otherwise.
*/
bool spindle_is_on (void)
{
 801ea70:	b508      	push	{r3, lr}
    bool on = false;

    spindle_ptrs_t *spindle;
    uint_fast8_t spindle_num = N_SYS_SPINDLE;
    do {
        if((spindle = spindle_get(--spindle_num)))
 801ea72:	2000      	movs	r0, #0
 801ea74:	f7ff fdd8 	bl	801e628 <spindle_get>
 801ea78:	b120      	cbz	r0, 801ea84 <spindle_is_on+0x14>
            on = spindle->get_state(spindle).on;
 801ea7a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 801ea7c:	4790      	blx	r2
 801ea7e:	f000 0001 	and.w	r0, r0, #1
    } while(spindle_num && !on);

    return on;
}
 801ea82:	bd08      	pop	{r3, pc}
 801ea84:	2000      	movs	r0, #0
 801ea86:	e7fc      	b.n	801ea82 <spindle_is_on+0x12>

0801ea88 <state_noop>:
/*! /brief No operation handler.
 */
static void state_noop (uint_fast16_t rt_exec)
{
    // Do nothing - state change requests are handled elsewhere or ignored.
}
 801ea88:	4770      	bx	lr
	...

0801ea8c <state_await_restart_retract>:
/*! /brief Waits until plunge motion abort is completed then calls state_await_hold() to restart retraction.
state_await_hold() is set to handle the cycle complete event.
 */
static void state_await_restart_retract (uint_fast16_t rt_exec)
{
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801ea8c:	f010 0f04 	tst.w	r0, #4
 801ea90:	d014      	beq.n	801eabc <state_await_restart_retract+0x30>
{
 801ea92:	b508      	push	{r3, lr}

        if (sys.step_control.execute_sys_motion) {
 801ea94:	4b0a      	ldr	r3, [pc, #40]	@ (801eac0 <state_await_restart_retract+0x34>)
 801ea96:	7e1b      	ldrb	r3, [r3, #24]
 801ea98:	f013 0f04 	tst.w	r3, #4
 801ea9c:	d106      	bne.n	801eaac <state_await_restart_retract+0x20>
            sys.step_control.execute_sys_motion = Off;
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
        }

        stateHandler = state_await_hold;
 801ea9e:	4b09      	ldr	r3, [pc, #36]	@ (801eac4 <state_await_restart_retract+0x38>)
 801eaa0:	4a09      	ldr	r2, [pc, #36]	@ (801eac8 <state_await_restart_retract+0x3c>)
 801eaa2:	601a      	str	r2, [r3, #0]
        stateHandler(EXEC_CYCLE_COMPLETE);
 801eaa4:	681b      	ldr	r3, [r3, #0]
 801eaa6:	2004      	movs	r0, #4
 801eaa8:	4798      	blx	r3
    }
}
 801eaaa:	bd08      	pop	{r3, pc}
            sys.step_control.execute_sys_motion = Off;
 801eaac:	4b04      	ldr	r3, [pc, #16]	@ (801eac0 <state_await_restart_retract+0x34>)
 801eaae:	7e1a      	ldrb	r2, [r3, #24]
 801eab0:	f36f 0282 	bfc	r2, #2, #1
 801eab4:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801eab6:	f001 fa0f 	bl	801fed8 <st_parking_restore_buffer>
 801eaba:	e7f0      	b.n	801ea9e <state_await_restart_retract+0x12>
 801eabc:	4770      	bx	lr
 801eabe:	bf00      	nop
 801eac0:	20001d70 	.word	0x20001d70
 801eac4:	2000043c 	.word	0x2000043c
 801eac8:	0801f605 	.word	0x0801f605

0801eacc <state_await_waypoint_retract>:
/*! /brief Waits until slow plunge motion is completed then deenergize spindle and coolant and execute fast retract motion.
state_await_resume() is set to handle the cycle complete event.
 */
static void state_await_waypoint_retract (uint_fast16_t rt_exec)
{
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801eacc:	f010 0f04 	tst.w	r0, #4
 801ead0:	d05c      	beq.n	801eb8c <state_await_waypoint_retract+0xc0>
{
 801ead2:	b500      	push	{lr}
 801ead4:	b085      	sub	sp, #20

        bool await_motion = false;

        if (sys.step_control.execute_sys_motion) {
 801ead6:	4b2e      	ldr	r3, [pc, #184]	@ (801eb90 <state_await_waypoint_retract+0xc4>)
 801ead8:	7e1b      	ldrb	r3, [r3, #24]
 801eada:	f013 0f04 	tst.w	r3, #4
 801eade:	d135      	bne.n	801eb4c <state_await_waypoint_retract+0x80>
            sys.step_control.execute_sys_motion = Off;
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
        }

        // NOTE: Clear accessory state after retract and after an aborted restore motion.
        park.plan_data.spindle.state.value = 0;
 801eae0:	4b2c      	ldr	r3, [pc, #176]	@ (801eb94 <state_await_waypoint_retract+0xc8>)
 801eae2:	2100      	movs	r1, #0
 801eae4:	f883 1028 	strb.w	r1, [r3, #40]	@ 0x28
        park.plan_data.spindle.rpm = 0.0f;
 801eae8:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 801eb98 <state_await_waypoint_retract+0xcc>
 801eaec:	ed83 0a09 	vstr	s0, [r3, #36]	@ 0x24
        park.plan_data.spindle.hal->set_state(park.plan_data.spindle.hal, park.plan_data.spindle.state, 0.0f); // De-energize
 801eaf0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801eaf2:	6a03      	ldr	r3, [r0, #32]
 801eaf4:	4798      	blx	r3

        if (!settings.safety_door.flags.keep_coolant_on) {
 801eaf6:	4b29      	ldr	r3, [pc, #164]	@ (801eb9c <state_await_waypoint_retract+0xd0>)
 801eaf8:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 801eafc:	f013 0f02 	tst.w	r3, #2
 801eb00:	d106      	bne.n	801eb10 <state_await_waypoint_retract+0x44>
            park.plan_data.condition.coolant.value = 0;
 801eb02:	2000      	movs	r0, #0
 801eb04:	4b23      	ldr	r3, [pc, #140]	@ (801eb94 <state_await_waypoint_retract+0xc8>)
 801eb06:	f883 0036 	strb.w	r0, [r3, #54]	@ 0x36
            hal.coolant.set_state(park.plan_data.condition.coolant); // De-energize
 801eb0a:	4b25      	ldr	r3, [pc, #148]	@ (801eba0 <state_await_waypoint_retract+0xd4>)
 801eb0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801eb0e:	4798      	blx	r3
        }

        stateHandler = state_await_resume;
 801eb10:	4b24      	ldr	r3, [pc, #144]	@ (801eba4 <state_await_waypoint_retract+0xd8>)
 801eb12:	4a25      	ldr	r2, [pc, #148]	@ (801eba8 <state_await_waypoint_retract+0xdc>)
 801eb14:	601a      	str	r2, [r3, #0]

        // Execute fast parking retract motion to parking target location.
        if (park.flags.motion && park.target[settings.parking.axis] < settings.parking.target) {
 801eb16:	4b1f      	ldr	r3, [pc, #124]	@ (801eb94 <state_await_waypoint_retract+0xc8>)
 801eb18:	7f1b      	ldrb	r3, [r3, #28]
 801eb1a:	f013 0f02 	tst.w	r3, #2
 801eb1e:	d00e      	beq.n	801eb3e <state_await_waypoint_retract+0x72>
 801eb20:	4a1e      	ldr	r2, [pc, #120]	@ (801eb9c <state_await_waypoint_retract+0xd0>)
 801eb22:	f892 c129 	ldrb.w	ip, [r2, #297]	@ 0x129
 801eb26:	4b1b      	ldr	r3, [pc, #108]	@ (801eb94 <state_await_waypoint_retract+0xc8>)
 801eb28:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801eb2c:	ed93 7a00 	vldr	s14, [r3]
 801eb30:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 801eb34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801eb38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb3c:	d40e      	bmi.n	801eb5c <state_await_waypoint_retract+0x90>
            park.plan_data.feed_rate = settings.parking.rate;
            await_motion = mc_parking_motion(target, &park.plan_data);
        }

        if (!await_motion)
            stateHandler(EXEC_CYCLE_COMPLETE);
 801eb3e:	4b19      	ldr	r3, [pc, #100]	@ (801eba4 <state_await_waypoint_retract+0xd8>)
 801eb40:	681b      	ldr	r3, [r3, #0]
 801eb42:	2004      	movs	r0, #4
 801eb44:	4798      	blx	r3
    }
}
 801eb46:	b005      	add	sp, #20
 801eb48:	f85d fb04 	ldr.w	pc, [sp], #4
            sys.step_control.execute_sys_motion = Off;
 801eb4c:	4b10      	ldr	r3, [pc, #64]	@ (801eb90 <state_await_waypoint_retract+0xc4>)
 801eb4e:	7e1a      	ldrb	r2, [r3, #24]
 801eb50:	f36f 0282 	bfc	r2, #2, #1
 801eb54:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801eb56:	f001 f9bf 	bl	801fed8 <st_parking_restore_buffer>
 801eb5a:	e7c1      	b.n	801eae0 <state_await_waypoint_retract+0x14>
            memcpy(target, park.target, sizeof(target));
 801eb5c:	4b0d      	ldr	r3, [pc, #52]	@ (801eb94 <state_await_waypoint_retract+0xc8>)
 801eb5e:	f10d 0e04 	add.w	lr, sp, #4
 801eb62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801eb66:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
            target[settings.parking.axis] = settings.parking.target;
 801eb6a:	aa04      	add	r2, sp, #16
 801eb6c:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 801eb70:	ed4c 7a03 	vstr	s15, [ip, #-12]
            park.plan_data.feed_rate = settings.parking.rate;
 801eb74:	4a09      	ldr	r2, [pc, #36]	@ (801eb9c <state_await_waypoint_retract+0xd0>)
 801eb76:	f8d2 2130 	ldr.w	r2, [r2, #304]	@ 0x130
 801eb7a:	4619      	mov	r1, r3
 801eb7c:	f841 2f20 	str.w	r2, [r1, #32]!
            await_motion = mc_parking_motion(target, &park.plan_data);
 801eb80:	4670      	mov	r0, lr
 801eb82:	f7f6 f881 	bl	8014c88 <mc_parking_motion>
        if (!await_motion)
 801eb86:	2800      	cmp	r0, #0
 801eb88:	d1dd      	bne.n	801eb46 <state_await_waypoint_retract+0x7a>
 801eb8a:	e7d8      	b.n	801eb3e <state_await_waypoint_retract+0x72>
 801eb8c:	4770      	bx	lr
 801eb8e:	bf00      	nop
 801eb90:	20001d70 	.word	0x20001d70
 801eb94:	200026e0 	.word	0x200026e0
 801eb98:	00000000 	.word	0x00000000
 801eb9c:	200024a8 	.word	0x200024a8
 801eba0:	20001a90 	.word	0x20001a90
 801eba4:	2000043c 	.word	0x2000043c
 801eba8:	0801f231 	.word	0x0801f231

0801ebac <restart_retract>:
{
 801ebac:	b508      	push	{r3, lr}
    grbl.report.feedback_message(Message_SafetyDoorAjar);
 801ebae:	4b12      	ldr	r3, [pc, #72]	@ (801ebf8 <restart_retract+0x4c>)
 801ebb0:	68db      	ldr	r3, [r3, #12]
 801ebb2:	2006      	movs	r0, #6
 801ebb4:	4798      	blx	r3
    stateHandler = state_await_restart_retract;
 801ebb6:	4b11      	ldr	r3, [pc, #68]	@ (801ebfc <restart_retract+0x50>)
 801ebb8:	4a11      	ldr	r2, [pc, #68]	@ (801ec00 <restart_retract+0x54>)
 801ebba:	601a      	str	r2, [r3, #0]
    park.flags.restart = On;
 801ebbc:	4a11      	ldr	r2, [pc, #68]	@ (801ec04 <restart_retract+0x58>)
 801ebbe:	7f13      	ldrb	r3, [r2, #28]
 801ebc0:	f043 0304 	orr.w	r3, r3, #4
 801ebc4:	7713      	strb	r3, [r2, #28]
    sys.parking_state = Parking_Retracting;
 801ebc6:	4b10      	ldr	r3, [pc, #64]	@ (801ec08 <restart_retract+0x5c>)
 801ebc8:	2202      	movs	r2, #2
 801ebca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    if (sys.step_control.execute_sys_motion) {
 801ebce:	7e1b      	ldrb	r3, [r3, #24]
 801ebd0:	f013 0f04 	tst.w	r3, #4
 801ebd4:	d104      	bne.n	801ebe0 <restart_retract+0x34>
        stateHandler(EXEC_CYCLE_COMPLETE);
 801ebd6:	4b09      	ldr	r3, [pc, #36]	@ (801ebfc <restart_retract+0x50>)
 801ebd8:	681b      	ldr	r3, [r3, #0]
 801ebda:	2004      	movs	r0, #4
 801ebdc:	4798      	blx	r3
}
 801ebde:	bd08      	pop	{r3, pc}
        st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 801ebe0:	f001 f924 	bl	801fe2c <st_update_plan_block_parameters>
        sys.step_control.execute_hold = On;
 801ebe4:	4b08      	ldr	r3, [pc, #32]	@ (801ec08 <restart_retract+0x5c>)
 801ebe6:	7e1a      	ldrb	r2, [r3, #24]
 801ebe8:	f042 0202 	orr.w	r2, r2, #2
 801ebec:	761a      	strb	r2, [r3, #24]
        sys.step_control.execute_sys_motion = On;
 801ebee:	b2d2      	uxtb	r2, r2
 801ebf0:	f042 0204 	orr.w	r2, r2, #4
 801ebf4:	761a      	strb	r2, [r3, #24]
 801ebf6:	e7f2      	b.n	801ebde <restart_retract+0x32>
 801ebf8:	20001c78 	.word	0x20001c78
 801ebfc:	2000043c 	.word	0x2000043c
 801ec00:	0801ea8d 	.word	0x0801ea8d
 801ec04:	200026e0 	.word	0x200026e0
 801ec08:	20001d70 	.word	0x20001d70

0801ec0c <state_spindle_restore>:
{
 801ec0c:	b508      	push	{r3, lr}
 801ec0e:	4603      	mov	r3, r0
    if(spindle->hal)
 801ec10:	68c0      	ldr	r0, [r0, #12]
 801ec12:	b120      	cbz	r0, 801ec1e <state_spindle_restore+0x12>
        spindle_restore(spindle->hal, spindle->state, spindle->rpm);
 801ec14:	ed93 0a00 	vldr	s0, [r3]
 801ec18:	7919      	ldrb	r1, [r3, #4]
 801ec1a:	f7ff fe03 	bl	801e824 <spindle_restore>
}
 801ec1e:	bd08      	pop	{r3, pc}

0801ec20 <state_restore_conditions>:
{
 801ec20:	b538      	push	{r3, r4, r5, lr}
 801ec22:	4604      	mov	r4, r0
    if (!settings.parking.flags.enabled || !park.flags.restart) {
 801ec24:	4b17      	ldr	r3, [pc, #92]	@ (801ec84 <state_restore_conditions+0x64>)
 801ec26:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801ec2a:	f013 0f01 	tst.w	r3, #1
 801ec2e:	d004      	beq.n	801ec3a <state_restore_conditions+0x1a>
 801ec30:	4b15      	ldr	r3, [pc, #84]	@ (801ec88 <state_restore_conditions+0x68>)
 801ec32:	7f1b      	ldrb	r3, [r3, #28]
 801ec34:	f013 0f04 	tst.w	r3, #4
 801ec38:	d118      	bne.n	801ec6c <state_restore_conditions+0x4c>
        park.flags.restoring = On; //
 801ec3a:	4a13      	ldr	r2, [pc, #76]	@ (801ec88 <state_restore_conditions+0x68>)
 801ec3c:	7f13      	ldrb	r3, [r2, #28]
 801ec3e:	f043 0308 	orr.w	r3, r3, #8
 801ec42:	7713      	strb	r3, [r2, #28]
            state_spindle_restore(&condition->spindle[--spindle_num]);
 801ec44:	1d20      	adds	r0, r4, #4
 801ec46:	f7ff ffe1 	bl	801ec0c <state_spindle_restore>
        if (gc_state.modal.coolant.value != hal.coolant.get_state().value) {
 801ec4a:	4b10      	ldr	r3, [pc, #64]	@ (801ec8c <state_restore_conditions+0x6c>)
 801ec4c:	7e5d      	ldrb	r5, [r3, #25]
 801ec4e:	4b10      	ldr	r3, [pc, #64]	@ (801ec90 <state_restore_conditions+0x70>)
 801ec50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec52:	4798      	blx	r3
 801ec54:	b2c3      	uxtb	r3, r0
 801ec56:	429d      	cmp	r5, r3
 801ec58:	d109      	bne.n	801ec6e <state_restore_conditions+0x4e>
        park.flags.restoring = Off;
 801ec5a:	4a0b      	ldr	r2, [pc, #44]	@ (801ec88 <state_restore_conditions+0x68>)
 801ec5c:	7f13      	ldrb	r3, [r2, #28]
 801ec5e:	f36f 03c3 	bfc	r3, #3, #1
 801ec62:	7713      	strb	r3, [r2, #28]
        sys.override.spindle_stop.value = 0; // Clear spindle stop override states
 801ec64:	4b0b      	ldr	r3, [pc, #44]	@ (801ec94 <state_restore_conditions+0x74>)
 801ec66:	2200      	movs	r2, #0
 801ec68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 801ec6c:	bd38      	pop	{r3, r4, r5, pc}
            gc_coolant(condition->coolant);;
 801ec6e:	7820      	ldrb	r0, [r4, #0]
 801ec70:	f7ee fcd8 	bl	800d624 <gc_coolant>
            delay_sec(settings.safety_door.coolant_on_delay, DelayMode_SysSuspend);
 801ec74:	2001      	movs	r0, #1
 801ec76:	4b03      	ldr	r3, [pc, #12]	@ (801ec84 <state_restore_conditions+0x64>)
 801ec78:	ed93 0a51 	vldr	s0, [r3, #324]	@ 0x144
 801ec7c:	f7f7 f832 	bl	8015ce4 <delay_sec>
 801ec80:	e7eb      	b.n	801ec5a <state_restore_conditions+0x3a>
 801ec82:	bf00      	nop
 801ec84:	200024a8 	.word	0x200024a8
 801ec88:	200026e0 	.word	0x200026e0
 801ec8c:	200017c8 	.word	0x200017c8
 801ec90:	20001a90 	.word	0x20001a90
 801ec94:	20001d70 	.word	0x20001d70

0801ec98 <state_restore>:
/*! /brief Waits until fast plunge motion is completed then restore spindle and coolant and execute slow plunge motion.
state_await_resumed() is set to handle the cycle complete event.
Note: A safety door event during restoration or motion will halt it and restart the retract sequence.
 */
static void state_restore (uint_fast16_t rt_exec)
{
 801ec98:	b510      	push	{r4, lr}
    if (rt_exec & EXEC_SAFETY_DOOR) {
 801ec9a:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801ec9e:	d00d      	beq.n	801ecbc <state_restore+0x24>
        if(park.flags.restoring)
 801eca0:	4b2b      	ldr	r3, [pc, #172]	@ (801ed50 <state_restore+0xb8>)
 801eca2:	7f1b      	ldrb	r3, [r3, #28]
 801eca4:	f013 0f08 	tst.w	r3, #8
 801eca8:	d005      	beq.n	801ecb6 <state_restore+0x1e>
            park.flags.restart = On;
 801ecaa:	4a29      	ldr	r2, [pc, #164]	@ (801ed50 <state_restore+0xb8>)
 801ecac:	7f13      	ldrb	r3, [r2, #28]
 801ecae:	f043 0304 	orr.w	r3, r3, #4
 801ecb2:	7713      	strb	r3, [r2, #28]
        }

        if (!await_motion)
            stateHandler(EXEC_CYCLE_COMPLETE); // No motion, proceed to next step immediately.
    }
}
 801ecb4:	bd10      	pop	{r4, pc}
            restart_retract();
 801ecb6:	f7ff ff79 	bl	801ebac <restart_retract>
 801ecba:	e7fb      	b.n	801ecb4 <state_restore+0x1c>
    else if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801ecbc:	f010 0f04 	tst.w	r0, #4
 801ecc0:	d0f8      	beq.n	801ecb4 <state_restore+0x1c>
        if (sys.step_control.execute_sys_motion) {
 801ecc2:	4b24      	ldr	r3, [pc, #144]	@ (801ed54 <state_restore+0xbc>)
 801ecc4:	7e1b      	ldrb	r3, [r3, #24]
 801ecc6:	f013 0f04 	tst.w	r3, #4
 801ecca:	d118      	bne.n	801ecfe <state_restore+0x66>
        park.flags.restart = Off;
 801eccc:	4c20      	ldr	r4, [pc, #128]	@ (801ed50 <state_restore+0xb8>)
 801ecce:	7f23      	ldrb	r3, [r4, #28]
 801ecd0:	f36f 0382 	bfc	r3, #2, #1
 801ecd4:	7723      	strb	r3, [r4, #28]
        stateHandler = state_await_resumed;
 801ecd6:	4b20      	ldr	r3, [pc, #128]	@ (801ed58 <state_restore+0xc0>)
 801ecd8:	4a20      	ldr	r2, [pc, #128]	@ (801ed5c <state_restore+0xc4>)
 801ecda:	601a      	str	r2, [r3, #0]
        state_restore_conditions(&restore_condition);
 801ecdc:	4820      	ldr	r0, [pc, #128]	@ (801ed60 <state_restore+0xc8>)
 801ecde:	f7ff ff9f 	bl	801ec20 <state_restore_conditions>
        if(park.flags.restart) {
 801ece2:	7f23      	ldrb	r3, [r4, #28]
 801ece4:	f013 0f04 	tst.w	r3, #4
 801ece8:	d111      	bne.n	801ed0e <state_restore+0x76>
        if (park.flags.motion) {
 801ecea:	4b19      	ldr	r3, [pc, #100]	@ (801ed50 <state_restore+0xb8>)
 801ecec:	7f1b      	ldrb	r3, [r3, #28]
 801ecee:	f013 0f02 	tst.w	r3, #2
 801ecf2:	d10f      	bne.n	801ed14 <state_restore+0x7c>
            stateHandler(EXEC_CYCLE_COMPLETE); // No motion, proceed to next step immediately.
 801ecf4:	4b18      	ldr	r3, [pc, #96]	@ (801ed58 <state_restore+0xc0>)
 801ecf6:	681b      	ldr	r3, [r3, #0]
 801ecf8:	2004      	movs	r0, #4
 801ecfa:	4798      	blx	r3
 801ecfc:	e7da      	b.n	801ecb4 <state_restore+0x1c>
            sys.step_control.execute_sys_motion = Off;
 801ecfe:	4b15      	ldr	r3, [pc, #84]	@ (801ed54 <state_restore+0xbc>)
 801ed00:	7e1a      	ldrb	r2, [r3, #24]
 801ed02:	f36f 0282 	bfc	r2, #2, #1
 801ed06:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801ed08:	f001 f8e6 	bl	801fed8 <st_parking_restore_buffer>
 801ed0c:	e7de      	b.n	801eccc <state_restore+0x34>
            restart_retract();
 801ed0e:	f7ff ff4d 	bl	801ebac <restart_retract>
            return;
 801ed12:	e7cf      	b.n	801ecb4 <state_restore+0x1c>
            sys.parking_state = Parking_Resuming;
 801ed14:	4b0f      	ldr	r3, [pc, #60]	@ (801ed54 <state_restore+0xbc>)
 801ed16:	2204      	movs	r2, #4
 801ed18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            park.plan_data.feed_rate = settings.parking.pullout_rate;
 801ed1c:	4b11      	ldr	r3, [pc, #68]	@ (801ed64 <state_restore+0xcc>)
 801ed1e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801ed22:	480b      	ldr	r0, [pc, #44]	@ (801ed50 <state_restore+0xb8>)
 801ed24:	6203      	str	r3, [r0, #32]
            park.plan_data.condition.coolant = restore_condition.coolant;
 801ed26:	4b0e      	ldr	r3, [pc, #56]	@ (801ed60 <state_restore+0xc8>)
 801ed28:	781a      	ldrb	r2, [r3, #0]
 801ed2a:	f880 2036 	strb.w	r2, [r0, #54]	@ 0x36
            park.plan_data.spindle.state = restore_condition.spindle[restore_condition.spindle_num].state;
 801ed2e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801ed32:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801ed36:	7a1a      	ldrb	r2, [r3, #8]
 801ed38:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
            park.plan_data.spindle.rpm = restore_condition.spindle[restore_condition.spindle_num].rpm;
 801ed3c:	685b      	ldr	r3, [r3, #4]
 801ed3e:	6243      	str	r3, [r0, #36]	@ 0x24
            await_motion = mc_parking_motion(park.restore_target, &park.plan_data);
 801ed40:	f100 0120 	add.w	r1, r0, #32
 801ed44:	300c      	adds	r0, #12
 801ed46:	f7f5 ff9f 	bl	8014c88 <mc_parking_motion>
        if (!await_motion)
 801ed4a:	2800      	cmp	r0, #0
 801ed4c:	d1b2      	bne.n	801ecb4 <state_restore+0x1c>
 801ed4e:	e7d1      	b.n	801ecf4 <state_restore+0x5c>
 801ed50:	200026e0 	.word	0x200026e0
 801ed54:	20001d70 	.word	0x20001d70
 801ed58:	2000043c 	.word	0x2000043c
 801ed5c:	0801f46d 	.word	0x0801f46d
 801ed60:	20002730 	.word	0x20002730
 801ed64:	200024a8 	.word	0x200024a8

0801ed68 <initiate_hold>:
{
 801ed68:	b538      	push	{r3, r4, r5, lr}
 801ed6a:	4605      	mov	r5, r0
    if (settings.parking.flags.enabled) {
 801ed6c:	4b4e      	ldr	r3, [pc, #312]	@ (801eea8 <initiate_hold+0x140>)
 801ed6e:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801ed72:	f013 0f01 	tst.w	r3, #1
 801ed76:	d151      	bne.n	801ee1c <initiate_hold+0xb4>
    plan_block_t *block = plan_get_current_block();
 801ed78:	f7f7 fdb2 	bl	80168e0 <plan_get_current_block>
 801ed7c:	4604      	mov	r4, r0
    restore_condition.spindle_num = 0;
 801ed7e:	2000      	movs	r0, #0
 801ed80:	4b4a      	ldr	r3, [pc, #296]	@ (801eeac <initiate_hold+0x144>)
 801ed82:	7058      	strb	r0, [r3, #1]
        if((spindle = spindle_get(--spindle_num))) {
 801ed84:	f7ff fc50 	bl	801e628 <spindle_get>
 801ed88:	4603      	mov	r3, r0
 801ed8a:	2800      	cmp	r0, #0
 801ed8c:	d069      	beq.n	801ee62 <initiate_hold+0xfa>
            if(block && block->spindle.hal == spindle) {
 801ed8e:	b114      	cbz	r4, 801ed96 <initiate_hold+0x2e>
 801ed90:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801ed92:	4282      	cmp	r2, r0
 801ed94:	d051      	beq.n	801ee3a <initiate_hold+0xd2>
            } else if(gc_state.spindle.hal == spindle) {
 801ed96:	4a46      	ldr	r2, [pc, #280]	@ (801eeb0 <initiate_hold+0x148>)
 801ed98:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 801ed9a:	429a      	cmp	r2, r3
 801ed9c:	d057      	beq.n	801ee4e <initiate_hold+0xe6>
                restore_condition.spindle[spindle_num].hal = spindle;
 801ed9e:	4a43      	ldr	r2, [pc, #268]	@ (801eeac <initiate_hold+0x144>)
 801eda0:	6113      	str	r3, [r2, #16]
                restore_condition.spindle[spindle_num].rpm = spindle->param->rpm;
 801eda2:	6859      	ldr	r1, [r3, #4]
 801eda4:	6809      	ldr	r1, [r1, #0]
 801eda6:	6051      	str	r1, [r2, #4]
                restore_condition.spindle[spindle_num].state = spindle->param->state;
 801eda8:	685b      	ldr	r3, [r3, #4]
 801edaa:	7a1b      	ldrb	r3, [r3, #8]
 801edac:	7213      	strb	r3, [r2, #8]
    if (block)
 801edae:	2c00      	cmp	r4, #0
 801edb0:	d05b      	beq.n	801ee6a <initiate_hold+0x102>
        restore_condition.coolant.mask = block->condition.coolant.mask;
 801edb2:	7da2      	ldrb	r2, [r4, #22]
 801edb4:	4b3d      	ldr	r3, [pc, #244]	@ (801eeac <initiate_hold+0x144>)
 801edb6:	701a      	strb	r2, [r3, #0]
    if (restore_condition.spindle[restore_condition.spindle_num].hal->cap.laser && settings.flags.disable_laser_during_hold)
 801edb8:	4b3c      	ldr	r3, [pc, #240]	@ (801eeac <initiate_hold+0x144>)
 801edba:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801edbe:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801edc2:	691b      	ldr	r3, [r3, #16]
 801edc4:	7a9b      	ldrb	r3, [r3, #10]
 801edc6:	f013 0f08 	tst.w	r3, #8
 801edca:	d005      	beq.n	801edd8 <initiate_hold+0x70>
 801edcc:	4b36      	ldr	r3, [pc, #216]	@ (801eea8 <initiate_hold+0x140>)
 801edce:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 801edd2:	f013 0f10 	tst.w	r3, #16
 801edd6:	d152      	bne.n	801ee7e <initiate_hold+0x116>
    if (sys_state & (STATE_CYCLE|STATE_JOG)) {
 801edd8:	4b36      	ldr	r3, [pc, #216]	@ (801eeb4 <initiate_hold+0x14c>)
 801edda:	681b      	ldr	r3, [r3, #0]
 801eddc:	f013 0f28 	tst.w	r3, #40	@ 0x28
 801ede0:	d151      	bne.n	801ee86 <initiate_hold+0x11e>
    if (new_state == STATE_HOLD)
 801ede2:	2d10      	cmp	r5, #16
 801ede4:	d05a      	beq.n	801ee9c <initiate_hold+0x134>
        sys.parking_state = Parking_Retracting;
 801ede6:	4b34      	ldr	r3, [pc, #208]	@ (801eeb8 <initiate_hold+0x150>)
 801ede8:	2202      	movs	r2, #2
 801edea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        park.flags.value = 0;
 801edee:	4b33      	ldr	r3, [pc, #204]	@ (801eebc <initiate_hold+0x154>)
 801edf0:	2200      	movs	r2, #0
 801edf2:	771a      	strb	r2, [r3, #28]
    sys.suspend = !sys.flags.soft_limit;
 801edf4:	4a30      	ldr	r2, [pc, #192]	@ (801eeb8 <initiate_hold+0x150>)
 801edf6:	7d93      	ldrb	r3, [r2, #22]
 801edf8:	089b      	lsrs	r3, r3, #2
 801edfa:	f083 0301 	eor.w	r3, r3, #1
 801edfe:	f003 0301 	and.w	r3, r3, #1
 801ee02:	7093      	strb	r3, [r2, #2]
    pending_state = sys_state == STATE_JOG ? new_state : STATE_IDLE;
 801ee04:	4b2b      	ldr	r3, [pc, #172]	@ (801eeb4 <initiate_hold+0x14c>)
 801ee06:	6818      	ldr	r0, [r3, #0]
 801ee08:	2820      	cmp	r0, #32
 801ee0a:	d000      	beq.n	801ee0e <initiate_hold+0xa6>
 801ee0c:	2500      	movs	r5, #0
 801ee0e:	4b2c      	ldr	r3, [pc, #176]	@ (801eec0 <initiate_hold+0x158>)
 801ee10:	601d      	str	r5, [r3, #0]
}
 801ee12:	2808      	cmp	r0, #8
 801ee14:	bf14      	ite	ne
 801ee16:	2000      	movne	r0, #0
 801ee18:	2001      	moveq	r0, #1
 801ee1a:	bd38      	pop	{r3, r4, r5, pc}
        plan_data_init(&park.plan_data);
 801ee1c:	4c29      	ldr	r4, [pc, #164]	@ (801eec4 <initiate_hold+0x15c>)
 801ee1e:	4620      	mov	r0, r4
 801ee20:	f7f8 f85e 	bl	8016ee0 <plan_data_init>
        park.plan_data.condition.system_motion = On;
 801ee24:	7d22      	ldrb	r2, [r4, #20]
 801ee26:	f042 0202 	orr.w	r2, r2, #2
 801ee2a:	7522      	strb	r2, [r4, #20]
        park.plan_data.condition.no_feed_override = On;
 801ee2c:	b2d2      	uxtb	r2, r2
 801ee2e:	f042 0210 	orr.w	r2, r2, #16
 801ee32:	7522      	strb	r2, [r4, #20]
        park.plan_data.line_number = PARKING_MOTION_LINE_NUMBER;
 801ee34:	2200      	movs	r2, #0
 801ee36:	61e2      	str	r2, [r4, #28]
 801ee38:	e79e      	b.n	801ed78 <initiate_hold+0x10>
                restore_condition.spindle_num = spindle_num;
 801ee3a:	4b1c      	ldr	r3, [pc, #112]	@ (801eeac <initiate_hold+0x144>)
 801ee3c:	2100      	movs	r1, #0
 801ee3e:	7059      	strb	r1, [r3, #1]
                restore_condition.spindle[spindle_num].hal = block->spindle.hal;
 801ee40:	611a      	str	r2, [r3, #16]
                restore_condition.spindle[spindle_num].rpm = block->spindle.rpm;
 801ee42:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801ee44:	605a      	str	r2, [r3, #4]
                restore_condition.spindle[spindle_num].state = block->spindle.state;
 801ee46:	f894 203c 	ldrb.w	r2, [r4, #60]	@ 0x3c
 801ee4a:	721a      	strb	r2, [r3, #8]
    if (block)
 801ee4c:	e7b1      	b.n	801edb2 <initiate_hold+0x4a>
                restore_condition.spindle_num = spindle_num;
 801ee4e:	4b17      	ldr	r3, [pc, #92]	@ (801eeac <initiate_hold+0x144>)
 801ee50:	2100      	movs	r1, #0
 801ee52:	7059      	strb	r1, [r3, #1]
                restore_condition.spindle[spindle_num].hal = gc_state.spindle.hal;
 801ee54:	611a      	str	r2, [r3, #16]
                restore_condition.spindle[spindle_num].rpm = gc_state.spindle.rpm;
 801ee56:	4a16      	ldr	r2, [pc, #88]	@ (801eeb0 <initiate_hold+0x148>)
 801ee58:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 801ee5a:	6059      	str	r1, [r3, #4]
                restore_condition.spindle[spindle_num].state = gc_state.modal.spindle.state;
 801ee5c:	7e92      	ldrb	r2, [r2, #26]
 801ee5e:	721a      	strb	r2, [r3, #8]
 801ee60:	e7a5      	b.n	801edae <initiate_hold+0x46>
            restore_condition.spindle[spindle_num].hal = NULL;
 801ee62:	4b12      	ldr	r3, [pc, #72]	@ (801eeac <initiate_hold+0x144>)
 801ee64:	2200      	movs	r2, #0
 801ee66:	611a      	str	r2, [r3, #16]
 801ee68:	e7a1      	b.n	801edae <initiate_hold+0x46>
        restore_condition.coolant.mask = gc_state.modal.coolant.mask | hal.coolant.get_state().mask;
 801ee6a:	4b11      	ldr	r3, [pc, #68]	@ (801eeb0 <initiate_hold+0x148>)
 801ee6c:	7e5c      	ldrb	r4, [r3, #25]
 801ee6e:	4b16      	ldr	r3, [pc, #88]	@ (801eec8 <initiate_hold+0x160>)
 801ee70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ee72:	4798      	blx	r3
 801ee74:	b2c0      	uxtb	r0, r0
 801ee76:	4304      	orrs	r4, r0
 801ee78:	4b0c      	ldr	r3, [pc, #48]	@ (801eeac <initiate_hold+0x144>)
 801ee7a:	701c      	strb	r4, [r3, #0]
 801ee7c:	e79c      	b.n	801edb8 <initiate_hold+0x50>
        enqueue_spindle_override(CMD_OVERRIDE_SPINDLE_STOP);
 801ee7e:	209e      	movs	r0, #158	@ 0x9e
 801ee80:	f7f7 fb18 	bl	80164b4 <enqueue_spindle_override>
 801ee84:	e7a8      	b.n	801edd8 <initiate_hold+0x70>
        st_update_plan_block_parameters();  // Notify stepper module to recompute for hold deceleration.
 801ee86:	f000 ffd1 	bl	801fe2c <st_update_plan_block_parameters>
        sys.step_control.execute_hold = On; // Initiate suspend state with active flag.
 801ee8a:	4a0b      	ldr	r2, [pc, #44]	@ (801eeb8 <initiate_hold+0x150>)
 801ee8c:	7e13      	ldrb	r3, [r2, #24]
 801ee8e:	f043 0302 	orr.w	r3, r3, #2
 801ee92:	7613      	strb	r3, [r2, #24]
        stateHandler = state_await_hold;
 801ee94:	4b0d      	ldr	r3, [pc, #52]	@ (801eecc <initiate_hold+0x164>)
 801ee96:	4a0e      	ldr	r2, [pc, #56]	@ (801eed0 <initiate_hold+0x168>)
 801ee98:	601a      	str	r2, [r3, #0]
 801ee9a:	e7a2      	b.n	801ede2 <initiate_hold+0x7a>
        sys.holding_state = Hold_Pending;
 801ee9c:	4b06      	ldr	r3, [pc, #24]	@ (801eeb8 <initiate_hold+0x150>)
 801ee9e:	2202      	movs	r2, #2
 801eea0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801eea4:	e7a6      	b.n	801edf4 <initiate_hold+0x8c>
 801eea6:	bf00      	nop
 801eea8:	200024a8 	.word	0x200024a8
 801eeac:	20002730 	.word	0x20002730
 801eeb0:	200017c8 	.word	0x200017c8
 801eeb4:	20002728 	.word	0x20002728
 801eeb8:	20001d70 	.word	0x20001d70
 801eebc:	200026e0 	.word	0x200026e0
 801eec0:	2000272c 	.word	0x2000272c
 801eec4:	20002700 	.word	0x20002700
 801eec8:	20001a90 	.word	0x20001a90
 801eecc:	2000043c 	.word	0x2000043c
 801eed0:	0801f605 	.word	0x0801f605

0801eed4 <enter_sleep>:
{
 801eed4:	b508      	push	{r3, lr}
    st_go_idle();
 801eed6:	f000 fd61 	bl	801f99c <st_go_idle>
    spindle_all_off();
 801eeda:	f7ff fdb1 	bl	801ea40 <spindle_all_off>
    hal.coolant.set_state((coolant_state_t){0});
 801eede:	4b06      	ldr	r3, [pc, #24]	@ (801eef8 <enter_sleep+0x24>)
 801eee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801eee2:	f04f 0000 	mov.w	r0, #0
 801eee6:	4798      	blx	r3
    grbl.report.feedback_message(Message_SleepMode);
 801eee8:	4b04      	ldr	r3, [pc, #16]	@ (801eefc <enter_sleep+0x28>)
 801eeea:	68db      	ldr	r3, [r3, #12]
 801eeec:	200b      	movs	r0, #11
 801eeee:	4798      	blx	r3
    stateHandler = state_noop;
 801eef0:	4b03      	ldr	r3, [pc, #12]	@ (801ef00 <enter_sleep+0x2c>)
 801eef2:	4a04      	ldr	r2, [pc, #16]	@ (801ef04 <enter_sleep+0x30>)
 801eef4:	601a      	str	r2, [r3, #0]
}
 801eef6:	bd08      	pop	{r3, pc}
 801eef8:	20001a90 	.word	0x20001a90
 801eefc:	20001c78 	.word	0x20001c78
 801ef00:	2000043c 	.word	0x2000043c
 801ef04:	0801ea89 	.word	0x0801ea89

0801ef08 <state_spindle_set_state>:
{
 801ef08:	b508      	push	{r3, lr}
 801ef0a:	4603      	mov	r3, r0
    if(spindle->hal)
 801ef0c:	68c0      	ldr	r0, [r0, #12]
 801ef0e:	b120      	cbz	r0, 801ef1a <state_spindle_set_state+0x12>
        spindle_set_state(spindle->hal, spindle->state, spindle->rpm);
 801ef10:	ed93 0a00 	vldr	s0, [r3]
 801ef14:	7919      	ldrb	r1, [r3, #4]
 801ef16:	f7ff fc81 	bl	801e81c <spindle_set_state>
}
 801ef1a:	bd08      	pop	{r3, pc}

0801ef1c <state_door_reopened>:
    return settings.parking.flags.enabled && park.flags.restart;
 801ef1c:	4b08      	ldr	r3, [pc, #32]	@ (801ef40 <state_door_reopened+0x24>)
 801ef1e:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801ef22:	f013 0f01 	tst.w	r3, #1
 801ef26:	d006      	beq.n	801ef36 <state_door_reopened+0x1a>
 801ef28:	4b06      	ldr	r3, [pc, #24]	@ (801ef44 <state_door_reopened+0x28>)
 801ef2a:	7f1b      	ldrb	r3, [r3, #28]
 801ef2c:	f013 0f04 	tst.w	r3, #4
 801ef30:	d103      	bne.n	801ef3a <state_door_reopened+0x1e>
 801ef32:	2000      	movs	r0, #0
 801ef34:	4770      	bx	lr
 801ef36:	2000      	movs	r0, #0
 801ef38:	4770      	bx	lr
 801ef3a:	2001      	movs	r0, #1
}
 801ef3c:	4770      	bx	lr
 801ef3e:	bf00      	nop
 801ef40:	200024a8 	.word	0x200024a8
 801ef44:	200026e0 	.word	0x200026e0

0801ef48 <state_get>:
}
 801ef48:	4b01      	ldr	r3, [pc, #4]	@ (801ef50 <state_get+0x8>)
 801ef4a:	6818      	ldr	r0, [r3, #0]
 801ef4c:	4770      	bx	lr
 801ef4e:	bf00      	nop
 801ef50:	20002728 	.word	0x20002728

0801ef54 <state_set>:
{
 801ef54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(new_state != sys_state) {
 801ef56:	4b8a      	ldr	r3, [pc, #552]	@ (801f180 <state_set+0x22c>)
 801ef58:	681d      	ldr	r5, [r3, #0]
 801ef5a:	4285      	cmp	r5, r0
 801ef5c:	f000 80fd 	beq.w	801f15a <state_set+0x206>
 801ef60:	4604      	mov	r4, r0
        switch(new_state) {    // Set up new state and handler
 801ef62:	2820      	cmp	r0, #32
 801ef64:	d825      	bhi.n	801efb2 <state_set+0x5e>
 801ef66:	2820      	cmp	r0, #32
 801ef68:	f200 80e7 	bhi.w	801f13a <state_set+0x1e6>
 801ef6c:	e8df f010 	tbh	[pc, r0, lsl #1]
 801ef70:	00fe0053 	.word	0x00fe0053
 801ef74:	00e500fe 	.word	0x00e500fe
 801ef78:	00e500fe 	.word	0x00e500fe
 801ef7c:	00e500e5 	.word	0x00e500e5
 801ef80:	00e50065 	.word	0x00e50065
 801ef84:	00e500e5 	.word	0x00e500e5
 801ef88:	00e500e5 	.word	0x00e500e5
 801ef8c:	00e500e5 	.word	0x00e500e5
 801ef90:	00e500b9 	.word	0x00e500b9
 801ef94:	00e500e5 	.word	0x00e500e5
 801ef98:	00e500e5 	.word	0x00e500e5
 801ef9c:	00e500e5 	.word	0x00e500e5
 801efa0:	00e500e5 	.word	0x00e500e5
 801efa4:	00e500e5 	.word	0x00e500e5
 801efa8:	00e500e5 	.word	0x00e500e5
 801efac:	00e500e5 	.word	0x00e500e5
 801efb0:	00ab      	.short	0x00ab
 801efb2:	2880      	cmp	r0, #128	@ 0x80
 801efb4:	d01a      	beq.n	801efec <state_set+0x98>
 801efb6:	d90d      	bls.n	801efd4 <state_set+0x80>
 801efb8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 801efbc:	f000 80d6 	beq.w	801f16c <state_set+0x218>
 801efc0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 801efc4:	f040 80b9 	bne.w	801f13a <state_set+0x1e6>
                sys_state = new_state;
 801efc8:	4b6d      	ldr	r3, [pc, #436]	@ (801f180 <state_set+0x22c>)
 801efca:	6018      	str	r0, [r3, #0]
                stateHandler = state_await_toolchanged;
 801efcc:	4b6d      	ldr	r3, [pc, #436]	@ (801f184 <state_set+0x230>)
 801efce:	4a6e      	ldr	r2, [pc, #440]	@ (801f188 <state_set+0x234>)
 801efd0:	601a      	str	r2, [r3, #0]
                break;
 801efd2:	e0b2      	b.n	801f13a <state_set+0x1e6>
        switch(new_state) {    // Set up new state and handler
 801efd4:	2840      	cmp	r0, #64	@ 0x40
 801efd6:	f040 80b0 	bne.w	801f13a <state_set+0x1e6>
                if ((sys_state & (STATE_ALARM|STATE_ESTOP|STATE_SLEEP|STATE_CHECK_MODE)))
 801efda:	f240 1383 	movw	r3, #387	@ 0x183
 801efde:	421d      	tst	r5, r3
 801efe0:	f040 80bb 	bne.w	801f15a <state_set+0x206>
                grbl.report.feedback_message(Message_SafetyDoorAjar);
 801efe4:	4b69      	ldr	r3, [pc, #420]	@ (801f18c <state_set+0x238>)
 801efe6:	68db      	ldr	r3, [r3, #12]
 801efe8:	2006      	movs	r0, #6
 801efea:	4798      	blx	r3
                sys.parking_state = Parking_Retracting;
 801efec:	4b68      	ldr	r3, [pc, #416]	@ (801f190 <state_set+0x23c>)
 801efee:	2202      	movs	r2, #2
 801eff0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                if (!initiate_hold(new_state)) {
 801eff4:	4620      	mov	r0, r4
 801eff6:	f7ff feb7 	bl	801ed68 <initiate_hold>
 801effa:	2800      	cmp	r0, #0
 801effc:	f040 8097 	bne.w	801f12e <state_set+0x1da>
                    if (pending_state != new_state) {
 801f000:	4b64      	ldr	r3, [pc, #400]	@ (801f194 <state_set+0x240>)
 801f002:	681b      	ldr	r3, [r3, #0]
 801f004:	42a3      	cmp	r3, r4
 801f006:	f000 8094 	beq.w	801f132 <state_set+0x1de>
                        sys_state = new_state;
 801f00a:	4b5d      	ldr	r3, [pc, #372]	@ (801f180 <state_set+0x22c>)
 801f00c:	601c      	str	r4, [r3, #0]
                        state_await_hold(EXEC_CYCLE_COMPLETE); // "Simulate" a cycle stop
 801f00e:	2004      	movs	r0, #4
 801f010:	f000 faf8 	bl	801f604 <state_await_hold>
 801f014:	e08d      	b.n	801f132 <state_set+0x1de>
                sys.suspend = false;        // Break suspend state.
 801f016:	4a5e      	ldr	r2, [pc, #376]	@ (801f190 <state_set+0x23c>)
 801f018:	2300      	movs	r3, #0
 801f01a:	7093      	strb	r3, [r2, #2]
                sys.step_control.flags = 0; // Restore step control to normal operation.
 801f01c:	7613      	strb	r3, [r2, #24]
                sys.parking_state = Parking_DoorClosed;
 801f01e:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                sys.holding_state = Hold_NotHolding;
 801f022:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
                sys_state = pending_state = new_state;
 801f026:	4a5b      	ldr	r2, [pc, #364]	@ (801f194 <state_set+0x240>)
 801f028:	6010      	str	r0, [r2, #0]
 801f02a:	4a55      	ldr	r2, [pc, #340]	@ (801f180 <state_set+0x22c>)
 801f02c:	6010      	str	r0, [r2, #0]
                park.flags.value = 0;
 801f02e:	4a5a      	ldr	r2, [pc, #360]	@ (801f198 <state_set+0x244>)
 801f030:	7713      	strb	r3, [r2, #28]
                stateHandler = state_idle;
 801f032:	4b54      	ldr	r3, [pc, #336]	@ (801f184 <state_set+0x230>)
 801f034:	4a59      	ldr	r2, [pc, #356]	@ (801f19c <state_set+0x248>)
 801f036:	601a      	str	r2, [r3, #0]
                break;
 801f038:	e07f      	b.n	801f13a <state_set+0x1e6>
                if (sys_state == STATE_IDLE) {
 801f03a:	2d00      	cmp	r5, #0
 801f03c:	d17d      	bne.n	801f13a <state_set+0x1e6>
                    if ((block = plan_get_current_block())) {
 801f03e:	f7f7 fc4f 	bl	80168e0 <plan_get_current_block>
 801f042:	4606      	mov	r6, r0
 801f044:	2800      	cmp	r0, #0
 801f046:	d078      	beq.n	801f13a <state_set+0x1e6>
                        sys_state = new_state;
 801f048:	4b4d      	ldr	r3, [pc, #308]	@ (801f180 <state_set+0x22c>)
 801f04a:	601c      	str	r4, [r3, #0]
                        sys.steppers_deenergize = false;    // Cancel stepper deenergize if pending.
 801f04c:	4b50      	ldr	r3, [pc, #320]	@ (801f190 <state_set+0x23c>)
 801f04e:	2200      	movs	r2, #0
 801f050:	719a      	strb	r2, [r3, #6]
                        st_prep_buffer();                   // Initialize step segment buffer before beginning cycle.
 801f052:	f000 ff87 	bl	801ff64 <st_prep_buffer>
                        if (block->spindle.state.synchronized) {
 801f056:	f996 303c 	ldrsb.w	r3, [r6, #60]	@ 0x3c
 801f05a:	2b00      	cmp	r3, #0
 801f05c:	da2d      	bge.n	801f0ba <state_set+0x166>
                            uint32_t ms = hal.get_elapsed_ticks();
 801f05e:	4b50      	ldr	r3, [pc, #320]	@ (801f1a0 <state_set+0x24c>)
 801f060:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 801f064:	4798      	blx	r3
 801f066:	4607      	mov	r7, r0
                            if (block->spindle.hal->reset_data)
 801f068:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 801f06a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f06c:	b103      	cbz	r3, 801f070 <state_set+0x11c>
                                block->spindle.hal->reset_data();
 801f06e:	4798      	blx	r3
                            uint32_t index = block->spindle.hal->get_data(SpindleData_Counters)->index_count + 2;
 801f070:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 801f072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f074:	2000      	movs	r0, #0
 801f076:	4798      	blx	r3
 801f078:	6944      	ldr	r4, [r0, #20]
 801f07a:	3402      	adds	r4, #2
                            while(index != block->spindle.hal->get_data(SpindleData_Counters)->index_count) {
 801f07c:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 801f07e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f080:	2000      	movs	r0, #0
 801f082:	4798      	blx	r3
 801f084:	6943      	ldr	r3, [r0, #20]
 801f086:	42a3      	cmp	r3, r4
 801f088:	d017      	beq.n	801f0ba <state_set+0x166>
                                if(hal.get_elapsed_ticks() - ms > 5000) {
 801f08a:	4b45      	ldr	r3, [pc, #276]	@ (801f1a0 <state_set+0x24c>)
 801f08c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 801f090:	4798      	blx	r3
 801f092:	1bc0      	subs	r0, r0, r7
 801f094:	f241 3388 	movw	r3, #5000	@ 0x1388
 801f098:	4298      	cmp	r0, r3
 801f09a:	d80a      	bhi.n	801f0b2 <state_set+0x15e>
                                if(sys.rt_exec_state & (EXEC_RESET|EXEC_STOP)) {
 801f09c:	4b3c      	ldr	r3, [pc, #240]	@ (801f190 <state_set+0x23c>)
 801f09e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801f0a0:	f013 0f30 	tst.w	r3, #48	@ 0x30
 801f0a4:	d0ea      	beq.n	801f07c <state_set+0x128>
                                    system_set_exec_state_flag(EXEC_RESET);
 801f0a6:	4b3e      	ldr	r3, [pc, #248]	@ (801f1a0 <state_set+0x24c>)
 801f0a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f0aa:	2120      	movs	r1, #32
 801f0ac:	483d      	ldr	r0, [pc, #244]	@ (801f1a4 <state_set+0x250>)
 801f0ae:	4798      	blx	r3
                                    return;
 801f0b0:	e053      	b.n	801f15a <state_set+0x206>
                                    system_raise_alarm(Alarm_Spindle);
 801f0b2:	200e      	movs	r0, #14
 801f0b4:	f002 feb8 	bl	8021e28 <system_raise_alarm>
                                    return;
 801f0b8:	e04f      	b.n	801f15a <state_set+0x206>
                        st_wake_up();
 801f0ba:	f000 fc61 	bl	801f980 <st_wake_up>
                        stateHandler = state_cycle;
 801f0be:	4b31      	ldr	r3, [pc, #196]	@ (801f184 <state_set+0x230>)
 801f0c0:	4a39      	ldr	r2, [pc, #228]	@ (801f1a8 <state_set+0x254>)
 801f0c2:	601a      	str	r2, [r3, #0]
 801f0c4:	e039      	b.n	801f13a <state_set+0x1e6>
                if (sys_state == STATE_TOOL_CHANGE)
 801f0c6:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 801f0ca:	d005      	beq.n	801f0d8 <state_set+0x184>
                sys_state = new_state;
 801f0cc:	4b2c      	ldr	r3, [pc, #176]	@ (801f180 <state_set+0x22c>)
 801f0ce:	601c      	str	r4, [r3, #0]
                stateHandler = state_cycle;
 801f0d0:	4b2c      	ldr	r3, [pc, #176]	@ (801f184 <state_set+0x230>)
 801f0d2:	4a35      	ldr	r2, [pc, #212]	@ (801f1a8 <state_set+0x254>)
 801f0d4:	601a      	str	r2, [r3, #0]
                break;
 801f0d6:	e030      	b.n	801f13a <state_set+0x1e6>
                    pending_state = STATE_TOOL_CHANGE;
 801f0d8:	4b2e      	ldr	r3, [pc, #184]	@ (801f194 <state_set+0x240>)
 801f0da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801f0de:	601a      	str	r2, [r3, #0]
 801f0e0:	e7f4      	b.n	801f0cc <state_set+0x178>
                if (sys.override.control.sync && sys.override.control.feed_hold_disable)
 801f0e2:	4b2b      	ldr	r3, [pc, #172]	@ (801f190 <state_set+0x23c>)
 801f0e4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801f0e8:	f003 0282 	and.w	r2, r3, #130	@ 0x82
 801f0ec:	2a82      	cmp	r2, #130	@ 0x82
 801f0ee:	d018      	beq.n	801f122 <state_set+0x1ce>
                if (!((sys_state & STATE_JOG) || sys.override.control.feed_hold_disable)) {
 801f0f0:	f015 0f20 	tst.w	r5, #32
 801f0f4:	d121      	bne.n	801f13a <state_set+0x1e6>
 801f0f6:	f013 0f02 	tst.w	r3, #2
 801f0fa:	d11e      	bne.n	801f13a <state_set+0x1e6>
                    if (!initiate_hold(new_state)) {
 801f0fc:	4620      	mov	r0, r4
 801f0fe:	f7ff fe33 	bl	801ed68 <initiate_hold>
 801f102:	b930      	cbnz	r0, 801f112 <state_set+0x1be>
                        sys.holding_state = Hold_Complete;
 801f104:	4b22      	ldr	r3, [pc, #136]	@ (801f190 <state_set+0x23c>)
 801f106:	2201      	movs	r2, #1
 801f108:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                        stateHandler = state_await_resume;
 801f10c:	4b1d      	ldr	r3, [pc, #116]	@ (801f184 <state_set+0x230>)
 801f10e:	4a27      	ldr	r2, [pc, #156]	@ (801f1ac <state_set+0x258>)
 801f110:	601a      	str	r2, [r3, #0]
                    sys_state = new_state;
 801f112:	4b1b      	ldr	r3, [pc, #108]	@ (801f180 <state_set+0x22c>)
 801f114:	601c      	str	r4, [r3, #0]
                    sys.flags.feed_hold_pending = Off;
 801f116:	4b1e      	ldr	r3, [pc, #120]	@ (801f190 <state_set+0x23c>)
 801f118:	7d9a      	ldrb	r2, [r3, #22]
 801f11a:	f36f 1245 	bfc	r2, #5, #1
 801f11e:	759a      	strb	r2, [r3, #22]
 801f120:	e00b      	b.n	801f13a <state_set+0x1e6>
                    sys.flags.feed_hold_pending = On;
 801f122:	491b      	ldr	r1, [pc, #108]	@ (801f190 <state_set+0x23c>)
 801f124:	7d8a      	ldrb	r2, [r1, #22]
 801f126:	f042 0220 	orr.w	r2, r2, #32
 801f12a:	758a      	strb	r2, [r1, #22]
 801f12c:	e7e0      	b.n	801f0f0 <state_set+0x19c>
                    sys_state = new_state;
 801f12e:	4b14      	ldr	r3, [pc, #80]	@ (801f180 <state_set+0x22c>)
 801f130:	601c      	str	r4, [r3, #0]
                if(sys_state == STATE_SLEEP && stateHandler != state_await_waypoint_retract)
 801f132:	4b13      	ldr	r3, [pc, #76]	@ (801f180 <state_set+0x22c>)
 801f134:	681b      	ldr	r3, [r3, #0]
 801f136:	2b80      	cmp	r3, #128	@ 0x80
 801f138:	d010      	beq.n	801f15c <state_set+0x208>
        if(!(sys_state & (STATE_ALARM|STATE_ESTOP)))
 801f13a:	4b11      	ldr	r3, [pc, #68]	@ (801f180 <state_set+0x22c>)
 801f13c:	6818      	ldr	r0, [r3, #0]
 801f13e:	f240 1301 	movw	r3, #257	@ 0x101
 801f142:	4218      	tst	r0, r3
 801f144:	d103      	bne.n	801f14e <state_set+0x1fa>
            sys.alarm = Alarm_None;
 801f146:	4b12      	ldr	r3, [pc, #72]	@ (801f190 <state_set+0x23c>)
 801f148:	2200      	movs	r2, #0
 801f14a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        if(sys_state != org_state && grbl.on_state_change)
 801f14e:	4285      	cmp	r5, r0
 801f150:	d003      	beq.n	801f15a <state_set+0x206>
 801f152:	4b0e      	ldr	r3, [pc, #56]	@ (801f18c <state_set+0x238>)
 801f154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f156:	b103      	cbz	r3, 801f15a <state_set+0x206>
            grbl.on_state_change(sys_state);
 801f158:	4798      	blx	r3
}
 801f15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(sys_state == STATE_SLEEP && stateHandler != state_await_waypoint_retract)
 801f15c:	4b09      	ldr	r3, [pc, #36]	@ (801f184 <state_set+0x230>)
 801f15e:	681a      	ldr	r2, [r3, #0]
 801f160:	4b13      	ldr	r3, [pc, #76]	@ (801f1b0 <state_set+0x25c>)
 801f162:	429a      	cmp	r2, r3
 801f164:	d0e9      	beq.n	801f13a <state_set+0x1e6>
                    enter_sleep();
 801f166:	f7ff feb5 	bl	801eed4 <enter_sleep>
 801f16a:	e7e6      	b.n	801f13a <state_set+0x1e6>
                sys_state = new_state;
 801f16c:	4b04      	ldr	r3, [pc, #16]	@ (801f180 <state_set+0x22c>)
 801f16e:	601c      	str	r4, [r3, #0]
                sys.suspend = false;
 801f170:	4b07      	ldr	r3, [pc, #28]	@ (801f190 <state_set+0x23c>)
 801f172:	2200      	movs	r2, #0
 801f174:	709a      	strb	r2, [r3, #2]
                stateHandler = state_noop;
 801f176:	4b03      	ldr	r3, [pc, #12]	@ (801f184 <state_set+0x230>)
 801f178:	4a0e      	ldr	r2, [pc, #56]	@ (801f1b4 <state_set+0x260>)
 801f17a:	601a      	str	r2, [r3, #0]
                break;
 801f17c:	e7dd      	b.n	801f13a <state_set+0x1e6>
 801f17e:	bf00      	nop
 801f180:	20002728 	.word	0x20002728
 801f184:	2000043c 	.word	0x2000043c
 801f188:	0801f4b5 	.word	0x0801f4b5
 801f18c:	20001c78 	.word	0x20001c78
 801f190:	20001d70 	.word	0x20001d70
 801f194:	2000272c 	.word	0x2000272c
 801f198:	200026e0 	.word	0x200026e0
 801f19c:	0801f1b9 	.word	0x0801f1b9
 801f1a0:	20001a90 	.word	0x20001a90
 801f1a4:	20001db8 	.word	0x20001db8
 801f1a8:	0801f529 	.word	0x0801f529
 801f1ac:	0801f231 	.word	0x0801f231
 801f1b0:	0801eacd 	.word	0x0801eacd
 801f1b4:	0801ea89 	.word	0x0801ea89

0801f1b8 <state_idle>:
{
 801f1b8:	b510      	push	{r4, lr}
 801f1ba:	4604      	mov	r4, r0
    if ((rt_exec & EXEC_CYCLE_START))
 801f1bc:	f010 0f02 	tst.w	r0, #2
 801f1c0:	d112      	bne.n	801f1e8 <state_idle+0x30>
    if (rt_exec & EXEC_FEED_HOLD)
 801f1c2:	f014 0f08 	tst.w	r4, #8
 801f1c6:	d113      	bne.n	801f1f0 <state_idle+0x38>
    if ((rt_exec & EXEC_TOOL_CHANGE)) {
 801f1c8:	f414 7f00 	tst.w	r4, #512	@ 0x200
 801f1cc:	d008      	beq.n	801f1e0 <state_idle+0x28>
        hal.stream.suspend_read(true); // Block reading from input stream until tool change state is acknowledged
 801f1ce:	4b0c      	ldr	r3, [pc, #48]	@ (801f200 <state_idle+0x48>)
 801f1d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801f1d4:	2001      	movs	r0, #1
 801f1d6:	4798      	blx	r3
        state_set(STATE_TOOL_CHANGE);
 801f1d8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801f1dc:	f7ff feba 	bl	801ef54 <state_set>
    if (rt_exec & EXEC_SLEEP)
 801f1e0:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801f1e4:	d108      	bne.n	801f1f8 <state_idle+0x40>
}
 801f1e6:	bd10      	pop	{r4, pc}
        state_set(STATE_CYCLE);
 801f1e8:	2008      	movs	r0, #8
 801f1ea:	f7ff feb3 	bl	801ef54 <state_set>
 801f1ee:	e7e8      	b.n	801f1c2 <state_idle+0xa>
        state_set(STATE_HOLD);
 801f1f0:	2010      	movs	r0, #16
 801f1f2:	f7ff feaf 	bl	801ef54 <state_set>
 801f1f6:	e7e7      	b.n	801f1c8 <state_idle+0x10>
        state_set(STATE_SLEEP);
 801f1f8:	2080      	movs	r0, #128	@ 0x80
 801f1fa:	f7ff feab 	bl	801ef54 <state_set>
}
 801f1fe:	e7f2      	b.n	801f1e6 <state_idle+0x2e>
 801f200:	20001a90 	.word	0x20001a90

0801f204 <state_update>:
{
 801f204:	b510      	push	{r4, lr}
 801f206:	4604      	mov	r4, r0
    if((rt_exec & EXEC_SAFETY_DOOR) && sys_state != STATE_SAFETY_DOOR)
 801f208:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801f20c:	d003      	beq.n	801f216 <state_update+0x12>
 801f20e:	4b06      	ldr	r3, [pc, #24]	@ (801f228 <state_update+0x24>)
 801f210:	681b      	ldr	r3, [r3, #0]
 801f212:	2b40      	cmp	r3, #64	@ 0x40
 801f214:	d104      	bne.n	801f220 <state_update+0x1c>
    stateHandler(rt_exec);
 801f216:	4b05      	ldr	r3, [pc, #20]	@ (801f22c <state_update+0x28>)
 801f218:	681b      	ldr	r3, [r3, #0]
 801f21a:	4620      	mov	r0, r4
 801f21c:	4798      	blx	r3
}
 801f21e:	bd10      	pop	{r4, pc}
        state_set(STATE_SAFETY_DOOR);
 801f220:	2040      	movs	r0, #64	@ 0x40
 801f222:	f7ff fe97 	bl	801ef54 <state_set>
 801f226:	e7f6      	b.n	801f216 <state_update+0x12>
 801f228:	20002728 	.word	0x20002728
 801f22c:	2000043c 	.word	0x2000043c

0801f230 <state_await_resume>:
{
 801f230:	b530      	push	{r4, r5, lr}
 801f232:	b085      	sub	sp, #20
 801f234:	4604      	mov	r4, r0
    if ((rt_exec & EXEC_CYCLE_COMPLETE) && settings.parking.flags.enabled) {
 801f236:	f010 0f04 	tst.w	r0, #4
 801f23a:	d016      	beq.n	801f26a <state_await_resume+0x3a>
 801f23c:	4b82      	ldr	r3, [pc, #520]	@ (801f448 <state_await_resume+0x218>)
 801f23e:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801f242:	f013 0f01 	tst.w	r3, #1
 801f246:	d010      	beq.n	801f26a <state_await_resume+0x3a>
        if (sys.step_control.execute_sys_motion) {
 801f248:	4b80      	ldr	r3, [pc, #512]	@ (801f44c <state_await_resume+0x21c>)
 801f24a:	7e1b      	ldrb	r3, [r3, #24]
 801f24c:	f013 0f04 	tst.w	r3, #4
 801f250:	d11b      	bne.n	801f28a <state_await_resume+0x5a>
        sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801f252:	4b7f      	ldr	r3, [pc, #508]	@ (801f450 <state_await_resume+0x220>)
 801f254:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f256:	4798      	blx	r3
 801f258:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801f25c:	4b7b      	ldr	r3, [pc, #492]	@ (801f44c <state_await_resume+0x21c>)
 801f25e:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
        if(sys_state == STATE_SLEEP) {
 801f262:	4b7c      	ldr	r3, [pc, #496]	@ (801f454 <state_await_resume+0x224>)
 801f264:	681b      	ldr	r3, [r3, #0]
 801f266:	2b80      	cmp	r3, #128	@ 0x80
 801f268:	d017      	beq.n	801f29a <state_await_resume+0x6a>
    if (rt_exec & EXEC_SLEEP)
 801f26a:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801f26e:	d117      	bne.n	801f2a0 <state_await_resume+0x70>
    if (rt_exec & EXEC_SAFETY_DOOR)
 801f270:	f014 0f40 	tst.w	r4, #64	@ 0x40
 801f274:	d018      	beq.n	801f2a8 <state_await_resume+0x78>
        sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801f276:	4b76      	ldr	r3, [pc, #472]	@ (801f450 <state_await_resume+0x220>)
 801f278:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f27a:	4798      	blx	r3
 801f27c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801f280:	4b72      	ldr	r3, [pc, #456]	@ (801f44c <state_await_resume+0x21c>)
 801f282:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
}
 801f286:	b005      	add	sp, #20
 801f288:	bd30      	pop	{r4, r5, pc}
            sys.step_control.execute_sys_motion = Off;
 801f28a:	4b70      	ldr	r3, [pc, #448]	@ (801f44c <state_await_resume+0x21c>)
 801f28c:	7e1a      	ldrb	r2, [r3, #24]
 801f28e:	f36f 0282 	bfc	r2, #2, #1
 801f292:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801f294:	f000 fe20 	bl	801fed8 <st_parking_restore_buffer>
 801f298:	e7db      	b.n	801f252 <state_await_resume+0x22>
            enter_sleep();
 801f29a:	f7ff fe1b 	bl	801eed4 <enter_sleep>
            return;
 801f29e:	e7f2      	b.n	801f286 <state_await_resume+0x56>
        state_set(STATE_SLEEP);
 801f2a0:	2080      	movs	r0, #128	@ 0x80
 801f2a2:	f7ff fe57 	bl	801ef54 <state_set>
 801f2a6:	e7e3      	b.n	801f270 <state_await_resume+0x40>
    else if (rt_exec & EXEC_CYCLE_START) {
 801f2a8:	f014 0f02 	tst.w	r4, #2
 801f2ac:	f000 80bb 	beq.w	801f426 <state_await_resume+0x1f6>
        if (sys_state == STATE_HOLD && !sys.override.spindle_stop.value)
 801f2b0:	4b68      	ldr	r3, [pc, #416]	@ (801f454 <state_await_resume+0x224>)
 801f2b2:	681b      	ldr	r3, [r3, #0]
 801f2b4:	2b10      	cmp	r3, #16
 801f2b6:	d01b      	beq.n	801f2f0 <state_await_resume+0xc0>
        switch (sys_state) {
 801f2b8:	2b80      	cmp	r3, #128	@ 0x80
 801f2ba:	d053      	beq.n	801f364 <state_await_resume+0x134>
 801f2bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f2c0:	d050      	beq.n	801f364 <state_await_resume+0x134>
 801f2c2:	2b40      	cmp	r3, #64	@ 0x40
 801f2c4:	d01f      	beq.n	801f306 <state_await_resume+0xd6>
                if (!settings.flags.restore_after_feed_hold) {
 801f2c6:	4b60      	ldr	r3, [pc, #384]	@ (801f448 <state_await_resume+0x218>)
 801f2c8:	f993 30fe 	ldrsb.w	r3, [r3, #254]	@ 0xfe
 801f2cc:	2b00      	cmp	r3, #0
 801f2ce:	db74      	blt.n	801f3ba <state_await_resume+0x18a>
                    if (!restore_condition.spindle[restore_condition.spindle_num].hal->get_state(restore_condition.spindle[restore_condition.spindle_num].hal).on)
 801f2d0:	4b61      	ldr	r3, [pc, #388]	@ (801f458 <state_await_resume+0x228>)
 801f2d2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801f2d6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801f2da:	6918      	ldr	r0, [r3, #16]
 801f2dc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801f2de:	4798      	blx	r3
 801f2e0:	f010 0f01 	tst.w	r0, #1
 801f2e4:	d066      	beq.n	801f3b4 <state_await_resume+0x184>
                    sys.override.spindle_stop.value = 0; // Clear spindle stop override states
 801f2e6:	4b59      	ldr	r3, [pc, #356]	@ (801f44c <state_await_resume+0x21c>)
 801f2e8:	2200      	movs	r2, #0
 801f2ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 801f2ee:	e039      	b.n	801f364 <state_await_resume+0x134>
        if (sys_state == STATE_HOLD && !sys.override.spindle_stop.value)
 801f2f0:	4a56      	ldr	r2, [pc, #344]	@ (801f44c <state_await_resume+0x21c>)
 801f2f2:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 801f2f6:	2a00      	cmp	r2, #0
 801f2f8:	d1de      	bne.n	801f2b8 <state_await_resume+0x88>
            sys.override.spindle_stop.restore_cycle = On;
 801f2fa:	4954      	ldr	r1, [pc, #336]	@ (801f44c <state_await_resume+0x21c>)
 801f2fc:	f042 0208 	orr.w	r2, r2, #8
 801f300:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
 801f304:	e7d8      	b.n	801f2b8 <state_await_resume+0x88>
                if (park.flags.restart || !hal.control.get_state().safety_door_ajar) {
 801f306:	4b55      	ldr	r3, [pc, #340]	@ (801f45c <state_await_resume+0x22c>)
 801f308:	7f1b      	ldrb	r3, [r3, #28]
 801f30a:	f013 0f04 	tst.w	r3, #4
 801f30e:	d105      	bne.n	801f31c <state_await_resume+0xec>
 801f310:	4b4f      	ldr	r3, [pc, #316]	@ (801f450 <state_await_resume+0x220>)
 801f312:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f314:	4798      	blx	r3
 801f316:	f010 0f08 	tst.w	r0, #8
 801f31a:	d123      	bne.n	801f364 <state_await_resume+0x134>
                    stateHandler = state_restore;
 801f31c:	4b50      	ldr	r3, [pc, #320]	@ (801f460 <state_await_resume+0x230>)
 801f31e:	4a51      	ldr	r2, [pc, #324]	@ (801f464 <state_await_resume+0x234>)
 801f320:	601a      	str	r2, [r3, #0]
                    sys.parking_state = Parking_Resuming;
 801f322:	4b4a      	ldr	r3, [pc, #296]	@ (801f44c <state_await_resume+0x21c>)
 801f324:	2204      	movs	r2, #4
 801f326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                    if (park.flags.motion) {
 801f32a:	4b4c      	ldr	r3, [pc, #304]	@ (801f45c <state_await_resume+0x22c>)
 801f32c:	7f1b      	ldrb	r3, [r3, #28]
 801f32e:	f013 0f02 	tst.w	r3, #2
 801f332:	d013      	beq.n	801f35c <state_await_resume+0x12c>
                        park.flags.restart = Off;
 801f334:	4b49      	ldr	r3, [pc, #292]	@ (801f45c <state_await_resume+0x22c>)
 801f336:	7f1a      	ldrb	r2, [r3, #28]
 801f338:	f36f 0282 	bfc	r2, #2, #1
 801f33c:	771a      	strb	r2, [r3, #28]
                        if (park.restore_target[settings.parking.axis] <= settings.parking.target) {
 801f33e:	4a42      	ldr	r2, [pc, #264]	@ (801f448 <state_await_resume+0x218>)
 801f340:	f892 4129 	ldrb.w	r4, [r2, #297]	@ 0x129
 801f344:	1ca1      	adds	r1, r4, #2
 801f346:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801f34a:	ed93 7a01 	vldr	s14, [r3, #4]
 801f34e:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 801f352:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f35a:	d912      	bls.n	801f382 <state_await_resume+0x152>
                        stateHandler(EXEC_CYCLE_COMPLETE);
 801f35c:	4b40      	ldr	r3, [pc, #256]	@ (801f460 <state_await_resume+0x230>)
 801f35e:	681b      	ldr	r3, [r3, #0]
 801f360:	2004      	movs	r0, #4
 801f362:	4798      	blx	r3
        if (!(sys_state & (STATE_SLEEP|STATE_SAFETY_DOOR))) {
 801f364:	4b3b      	ldr	r3, [pc, #236]	@ (801f454 <state_await_resume+0x224>)
 801f366:	681b      	ldr	r3, [r3, #0]
 801f368:	f013 0fc0 	tst.w	r3, #192	@ 0xc0
 801f36c:	d18b      	bne.n	801f286 <state_await_resume+0x56>
            step_control_t step_control = sys.step_control;
 801f36e:	4c37      	ldr	r4, [pc, #220]	@ (801f44c <state_await_resume+0x21c>)
 801f370:	7e25      	ldrb	r5, [r4, #24]
            state_set(STATE_IDLE);
 801f372:	2000      	movs	r0, #0
 801f374:	f7ff fdee 	bl	801ef54 <state_set>
            sys.step_control = step_control;
 801f378:	7625      	strb	r5, [r4, #24]
            state_set(STATE_CYCLE);
 801f37a:	2008      	movs	r0, #8
 801f37c:	f7ff fdea 	bl	801ef54 <state_set>
 801f380:	e781      	b.n	801f286 <state_await_resume+0x56>
                            memcpy(target, park.restore_target, sizeof(target));
 801f382:	4b36      	ldr	r3, [pc, #216]	@ (801f45c <state_await_resume+0x22c>)
 801f384:	ad01      	add	r5, sp, #4
 801f386:	f103 020c 	add.w	r2, r3, #12
 801f38a:	ca07      	ldmia	r2, {r0, r1, r2}
 801f38c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                            target[settings.parking.axis] = park.retract_waypoint;
 801f390:	699a      	ldr	r2, [r3, #24]
 801f392:	a904      	add	r1, sp, #16
 801f394:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801f398:	f844 2c0c 	str.w	r2, [r4, #-12]
                            park.plan_data.feed_rate = settings.parking.rate;
 801f39c:	4a2a      	ldr	r2, [pc, #168]	@ (801f448 <state_await_resume+0x218>)
 801f39e:	f8d2 2130 	ldr.w	r2, [r2, #304]	@ 0x130
 801f3a2:	4619      	mov	r1, r3
 801f3a4:	f841 2f20 	str.w	r2, [r1, #32]!
                            await_motion = mc_parking_motion(target, &park.plan_data);
 801f3a8:	4628      	mov	r0, r5
 801f3aa:	f7f5 fc6d 	bl	8014c88 <mc_parking_motion>
                    if (!await_motion) // No motion, proceed to next step immediately.
 801f3ae:	2800      	cmp	r0, #0
 801f3b0:	d1d8      	bne.n	801f364 <state_await_resume+0x134>
 801f3b2:	e7d3      	b.n	801f35c <state_await_resume+0x12c>
                        gc_spindle_off();
 801f3b4:	f7ee f928 	bl	800d608 <gc_spindle_off>
 801f3b8:	e795      	b.n	801f2e6 <state_await_resume+0xb6>
                    if (restore_condition.spindle[restore_condition.spindle_num].state.on != restore_condition.spindle[restore_condition.spindle_num].hal->get_state(restore_condition.spindle[restore_condition.spindle_num].hal).on) {
 801f3ba:	4b27      	ldr	r3, [pc, #156]	@ (801f458 <state_await_resume+0x228>)
 801f3bc:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801f3c0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801f3c4:	7a1c      	ldrb	r4, [r3, #8]
 801f3c6:	f004 0401 	and.w	r4, r4, #1
 801f3ca:	6918      	ldr	r0, [r3, #16]
 801f3cc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801f3ce:	4798      	blx	r3
 801f3d0:	f000 0001 	and.w	r0, r0, #1
 801f3d4:	4284      	cmp	r4, r0
 801f3d6:	d00b      	beq.n	801f3f0 <state_await_resume+0x1c0>
                        grbl.report.feedback_message(Message_SpindleRestore);
 801f3d8:	4b23      	ldr	r3, [pc, #140]	@ (801f468 <state_await_resume+0x238>)
 801f3da:	68db      	ldr	r3, [r3, #12]
 801f3dc:	200a      	movs	r0, #10
 801f3de:	4798      	blx	r3
                        state_spindle_restore(&restore_condition.spindle[restore_condition.spindle_num]);
 801f3e0:	481d      	ldr	r0, [pc, #116]	@ (801f458 <state_await_resume+0x228>)
 801f3e2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801f3e6:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 801f3ea:	3004      	adds	r0, #4
 801f3ec:	f7ff fc0e 	bl	801ec0c <state_spindle_restore>
                    if (restore_condition.coolant.value != hal.coolant.get_state().value) {
 801f3f0:	4b19      	ldr	r3, [pc, #100]	@ (801f458 <state_await_resume+0x228>)
 801f3f2:	781c      	ldrb	r4, [r3, #0]
 801f3f4:	4b16      	ldr	r3, [pc, #88]	@ (801f450 <state_await_resume+0x220>)
 801f3f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f3f8:	4798      	blx	r3
 801f3fa:	b2c0      	uxtb	r0, r0
 801f3fc:	4284      	cmp	r4, r0
 801f3fe:	d107      	bne.n	801f410 <state_await_resume+0x1e0>
                    sys.override.spindle_stop.value = 0; // Clear spindle stop override states
 801f400:	2000      	movs	r0, #0
 801f402:	4b12      	ldr	r3, [pc, #72]	@ (801f44c <state_await_resume+0x21c>)
 801f404:	f883 0028 	strb.w	r0, [r3, #40]	@ 0x28
                    grbl.report.feedback_message(Message_None);
 801f408:	4b17      	ldr	r3, [pc, #92]	@ (801f468 <state_await_resume+0x238>)
 801f40a:	68db      	ldr	r3, [r3, #12]
 801f40c:	4798      	blx	r3
 801f40e:	e7a9      	b.n	801f364 <state_await_resume+0x134>
                        gc_coolant(restore_condition.coolant);
 801f410:	4b11      	ldr	r3, [pc, #68]	@ (801f458 <state_await_resume+0x228>)
 801f412:	7818      	ldrb	r0, [r3, #0]
 801f414:	f7ee f906 	bl	800d624 <gc_coolant>
                        delay_sec(settings.safety_door.coolant_on_delay, DelayMode_SysSuspend);
 801f418:	2001      	movs	r0, #1
 801f41a:	4b0b      	ldr	r3, [pc, #44]	@ (801f448 <state_await_resume+0x218>)
 801f41c:	ed93 0a51 	vldr	s0, [r3, #324]	@ 0x144
 801f420:	f7f6 fc60 	bl	8015ce4 <delay_sec>
 801f424:	e7ec      	b.n	801f400 <state_await_resume+0x1d0>
    } else if ((rt_exec & EXEC_DOOR_CLOSED) && !hal.control.get_state().safety_door_ajar)
 801f426:	f414 4f80 	tst.w	r4, #16384	@ 0x4000
 801f42a:	f43f af2c 	beq.w	801f286 <state_await_resume+0x56>
 801f42e:	4b08      	ldr	r3, [pc, #32]	@ (801f450 <state_await_resume+0x220>)
 801f430:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f432:	4798      	blx	r3
 801f434:	f010 0f08 	tst.w	r0, #8
 801f438:	f47f af25 	bne.w	801f286 <state_await_resume+0x56>
        sys.parking_state = Parking_DoorClosed;
 801f43c:	4b03      	ldr	r3, [pc, #12]	@ (801f44c <state_await_resume+0x21c>)
 801f43e:	2200      	movs	r2, #0
 801f440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 801f444:	e71f      	b.n	801f286 <state_await_resume+0x56>
 801f446:	bf00      	nop
 801f448:	200024a8 	.word	0x200024a8
 801f44c:	20001d70 	.word	0x20001d70
 801f450:	20001a90 	.word	0x20001a90
 801f454:	20002728 	.word	0x20002728
 801f458:	20002730 	.word	0x20002730
 801f45c:	200026e0 	.word	0x200026e0
 801f460:	2000043c 	.word	0x2000043c
 801f464:	0801ec99 	.word	0x0801ec99
 801f468:	20001c78 	.word	0x20001c78

0801f46c <state_await_resumed>:

/*! /brief Waits until slow plunge motion is complete then restart the cycle.
Note: A safety door event during the motion will halt it and restart the retract sequence.
 */
static void state_await_resumed (uint_fast16_t rt_exec)
{
 801f46c:	b508      	push	{r3, lr}
    if (rt_exec & EXEC_SAFETY_DOOR)
 801f46e:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801f472:	d113      	bne.n	801f49c <state_await_resumed+0x30>
        restart_retract();

    else if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801f474:	f010 0f04 	tst.w	r0, #4
 801f478:	d00f      	beq.n	801f49a <state_await_resumed+0x2e>
        sys.parking_state = Parking_DoorClosed;
 801f47a:	4b0c      	ldr	r3, [pc, #48]	@ (801f4ac <state_await_resumed+0x40>)
 801f47c:	2200      	movs	r2, #0
 801f47e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        park.flags.value = 0;
 801f482:	490b      	ldr	r1, [pc, #44]	@ (801f4b0 <state_await_resumed+0x44>)
 801f484:	770a      	strb	r2, [r1, #28]
        if (sys.step_control.execute_sys_motion) {
 801f486:	7e1b      	ldrb	r3, [r3, #24]
 801f488:	f013 0f04 	tst.w	r3, #4
 801f48c:	d109      	bne.n	801f4a2 <state_await_resumed+0x36>
            sys.step_control.flags = 0;
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
        }
        state_set(STATE_IDLE);
 801f48e:	2000      	movs	r0, #0
 801f490:	f7ff fd60 	bl	801ef54 <state_set>
        state_set(STATE_CYCLE);
 801f494:	2008      	movs	r0, #8
 801f496:	f7ff fd5d 	bl	801ef54 <state_set>
    }
}
 801f49a:	bd08      	pop	{r3, pc}
        restart_retract();
 801f49c:	f7ff fb86 	bl	801ebac <restart_retract>
 801f4a0:	e7fb      	b.n	801f49a <state_await_resumed+0x2e>
            sys.step_control.flags = 0;
 801f4a2:	4b02      	ldr	r3, [pc, #8]	@ (801f4ac <state_await_resumed+0x40>)
 801f4a4:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801f4a6:	f000 fd17 	bl	801fed8 <st_parking_restore_buffer>
 801f4aa:	e7f0      	b.n	801f48e <state_await_resumed+0x22>
 801f4ac:	20001d70 	.word	0x20001d70
 801f4b0:	200026e0 	.word	0x200026e0

0801f4b4 <state_await_toolchanged>:
    if (rt_exec & EXEC_CYCLE_START) {
 801f4b4:	f010 0f02 	tst.w	r0, #2
 801f4b8:	d02b      	beq.n	801f512 <state_await_toolchanged+0x5e>
{
 801f4ba:	b508      	push	{r3, lr}
        if (!gc_state.tool_change) {
 801f4bc:	4b15      	ldr	r3, [pc, #84]	@ (801f514 <state_await_toolchanged+0x60>)
 801f4be:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801f4c2:	b983      	cbnz	r3, 801f4e6 <state_await_toolchanged+0x32>
            if (hal.stream.suspend_read)
 801f4c4:	4b14      	ldr	r3, [pc, #80]	@ (801f518 <state_await_toolchanged+0x64>)
 801f4c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801f4ca:	b10b      	cbz	r3, 801f4d0 <state_await_toolchanged+0x1c>
                hal.stream.suspend_read(false); // Tool change complete, restore "normal" stream input.
 801f4cc:	2000      	movs	r0, #0
 801f4ce:	4798      	blx	r3
            if(grbl.on_tool_changed)
 801f4d0:	4b12      	ldr	r3, [pc, #72]	@ (801f51c <state_await_toolchanged+0x68>)
 801f4d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801f4d6:	b11b      	cbz	r3, 801f4e0 <state_await_toolchanged+0x2c>
                grbl.on_tool_changed(gc_state.tool);
 801f4d8:	4a0e      	ldr	r2, [pc, #56]	@ (801f514 <state_await_toolchanged+0x60>)
 801f4da:	f8d2 00d0 	ldr.w	r0, [r2, #208]	@ 0xd0
 801f4de:	4798      	blx	r3
            system_add_rt_report(Report_Tool);
 801f4e0:	2080      	movs	r0, #128	@ 0x80
 801f4e2:	f002 fcef 	bl	8021ec4 <system_add_rt_report>
        pending_state = gc_state.tool_change ? STATE_TOOL_CHANGE : STATE_IDLE;
 801f4e6:	4b0b      	ldr	r3, [pc, #44]	@ (801f514 <state_await_toolchanged+0x60>)
 801f4e8:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801f4ec:	b17b      	cbz	r3, 801f50e <state_await_toolchanged+0x5a>
 801f4ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801f4f2:	4b0b      	ldr	r3, [pc, #44]	@ (801f520 <state_await_toolchanged+0x6c>)
 801f4f4:	601a      	str	r2, [r3, #0]
        state_set(STATE_IDLE);
 801f4f6:	2000      	movs	r0, #0
 801f4f8:	f7ff fd2c 	bl	801ef54 <state_set>
        state_set(STATE_CYCLE);
 801f4fc:	2008      	movs	r0, #8
 801f4fe:	f7ff fd29 	bl	801ef54 <state_set>
        system_set_exec_state_flag(EXEC_STATUS_REPORT);
 801f502:	4b05      	ldr	r3, [pc, #20]	@ (801f518 <state_await_toolchanged+0x64>)
 801f504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f506:	2101      	movs	r1, #1
 801f508:	4806      	ldr	r0, [pc, #24]	@ (801f524 <state_await_toolchanged+0x70>)
 801f50a:	4798      	blx	r3
}
 801f50c:	bd08      	pop	{r3, pc}
        pending_state = gc_state.tool_change ? STATE_TOOL_CHANGE : STATE_IDLE;
 801f50e:	2200      	movs	r2, #0
 801f510:	e7ef      	b.n	801f4f2 <state_await_toolchanged+0x3e>
 801f512:	4770      	bx	lr
 801f514:	200017c8 	.word	0x200017c8
 801f518:	20001a90 	.word	0x20001a90
 801f51c:	20001c78 	.word	0x20001c78
 801f520:	2000272c 	.word	0x2000272c
 801f524:	20001db8 	.word	0x20001db8

0801f528 <state_cycle>:
    if (rt_exec == EXEC_CYCLE_START)
 801f528:	2802      	cmp	r0, #2
 801f52a:	d02e      	beq.n	801f58a <state_cycle+0x62>
{
 801f52c:	b510      	push	{r4, lr}
 801f52e:	4604      	mov	r4, r0
    if ((rt_exec & EXEC_TOOL_CHANGE))
 801f530:	f410 7f00 	tst.w	r0, #512	@ 0x200
 801f534:	d004      	beq.n	801f540 <state_cycle+0x18>
        hal.stream.suspend_read(true); // Block reading from input stream until tool change state is acknowledged
 801f536:	4b15      	ldr	r3, [pc, #84]	@ (801f58c <state_cycle+0x64>)
 801f538:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801f53c:	2001      	movs	r0, #1
 801f53e:	4798      	blx	r3
    if (rt_exec & EXEC_CYCLE_COMPLETE)
 801f540:	f014 0f04 	tst.w	r4, #4
 801f544:	d007      	beq.n	801f556 <state_cycle+0x2e>
        state_set(gc_state.tool_change ? STATE_TOOL_CHANGE : STATE_IDLE);
 801f546:	4b12      	ldr	r3, [pc, #72]	@ (801f590 <state_cycle+0x68>)
 801f548:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801f54c:	b153      	cbz	r3, 801f564 <state_cycle+0x3c>
 801f54e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801f552:	f7ff fcff 	bl	801ef54 <state_set>
    if (rt_exec & EXEC_MOTION_CANCEL) {
 801f556:	f014 0f80 	tst.w	r4, #128	@ 0x80
 801f55a:	d105      	bne.n	801f568 <state_cycle+0x40>
    if ((rt_exec & EXEC_FEED_HOLD))
 801f55c:	f014 0f08 	tst.w	r4, #8
 801f560:	d10f      	bne.n	801f582 <state_cycle+0x5a>
}
 801f562:	bd10      	pop	{r4, pc}
        state_set(gc_state.tool_change ? STATE_TOOL_CHANGE : STATE_IDLE);
 801f564:	2000      	movs	r0, #0
 801f566:	e7f4      	b.n	801f552 <state_cycle+0x2a>
        st_update_plan_block_parameters();  // Notify stepper module to recompute for hold deceleration.
 801f568:	f000 fc60 	bl	801fe2c <st_update_plan_block_parameters>
        sys.suspend = true;
 801f56c:	4b09      	ldr	r3, [pc, #36]	@ (801f594 <state_cycle+0x6c>)
 801f56e:	2201      	movs	r2, #1
 801f570:	709a      	strb	r2, [r3, #2]
        sys.step_control.execute_hold = On; // Initiate suspend state with active flag.
 801f572:	7e1a      	ldrb	r2, [r3, #24]
 801f574:	f042 0202 	orr.w	r2, r2, #2
 801f578:	761a      	strb	r2, [r3, #24]
        stateHandler = state_await_motion_cancel;
 801f57a:	4b07      	ldr	r3, [pc, #28]	@ (801f598 <state_cycle+0x70>)
 801f57c:	4a07      	ldr	r2, [pc, #28]	@ (801f59c <state_cycle+0x74>)
 801f57e:	601a      	str	r2, [r3, #0]
 801f580:	e7ec      	b.n	801f55c <state_cycle+0x34>
        state_set(STATE_HOLD);
 801f582:	2010      	movs	r0, #16
 801f584:	f7ff fce6 	bl	801ef54 <state_set>
 801f588:	e7eb      	b.n	801f562 <state_cycle+0x3a>
 801f58a:	4770      	bx	lr
 801f58c:	20001a90 	.word	0x20001a90
 801f590:	200017c8 	.word	0x200017c8
 801f594:	20001d70 	.word	0x20001d70
 801f598:	2000043c 	.word	0x2000043c
 801f59c:	0801f5a1 	.word	0x0801f5a1

0801f5a0 <state_await_motion_cancel>:
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801f5a0:	f010 0f04 	tst.w	r0, #4
 801f5a4:	d022      	beq.n	801f5ec <state_await_motion_cancel+0x4c>
{
 801f5a6:	b538      	push	{r3, r4, r5, lr}
        if (sys_state == STATE_JOG) {
 801f5a8:	4b11      	ldr	r3, [pc, #68]	@ (801f5f0 <state_await_motion_cancel+0x50>)
 801f5aa:	681b      	ldr	r3, [r3, #0]
 801f5ac:	2b20      	cmp	r3, #32
 801f5ae:	d008      	beq.n	801f5c2 <state_await_motion_cancel+0x22>
        state_set(pending_state);
 801f5b0:	4b10      	ldr	r3, [pc, #64]	@ (801f5f4 <state_await_motion_cancel+0x54>)
 801f5b2:	6818      	ldr	r0, [r3, #0]
 801f5b4:	f7ff fcce 	bl	801ef54 <state_set>
        if (gc_state.tool_change)
 801f5b8:	4b0f      	ldr	r3, [pc, #60]	@ (801f5f8 <state_await_motion_cancel+0x58>)
 801f5ba:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801f5be:	b983      	cbnz	r3, 801f5e2 <state_await_motion_cancel+0x42>
}
 801f5c0:	bd38      	pop	{r3, r4, r5, pc}
            sys.step_control.flags = 0;
 801f5c2:	4c0e      	ldr	r4, [pc, #56]	@ (801f5fc <state_await_motion_cancel+0x5c>)
 801f5c4:	2500      	movs	r5, #0
 801f5c6:	7625      	strb	r5, [r4, #24]
            plan_reset();
 801f5c8:	f7f7 f8e6 	bl	8016798 <plan_reset>
            st_reset();
 801f5cc:	f000 fba0 	bl	801fd10 <st_reset>
            sync_position();
 801f5d0:	f7f7 fc10 	bl	8016df4 <plan_sync_position>
 801f5d4:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 801f5d8:	4809      	ldr	r0, [pc, #36]	@ (801f600 <state_await_motion_cancel+0x60>)
 801f5da:	f002 fbcf 	bl	8021d7c <system_convert_array_steps_to_mpos>
            sys.suspend = false;
 801f5de:	70a5      	strb	r5, [r4, #2]
 801f5e0:	e7e6      	b.n	801f5b0 <state_await_motion_cancel+0x10>
            state_set(STATE_TOOL_CHANGE);
 801f5e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801f5e6:	f7ff fcb5 	bl	801ef54 <state_set>
}
 801f5ea:	e7e9      	b.n	801f5c0 <state_await_motion_cancel+0x20>
 801f5ec:	4770      	bx	lr
 801f5ee:	bf00      	nop
 801f5f0:	20002728 	.word	0x20002728
 801f5f4:	2000272c 	.word	0x2000272c
 801f5f8:	200017c8 	.word	0x200017c8
 801f5fc:	20001d70 	.word	0x20001d70
 801f600:	20001830 	.word	0x20001830

0801f604 <state_await_hold>:
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801f604:	f010 0f04 	tst.w	r0, #4
 801f608:	d100      	bne.n	801f60c <state_await_hold+0x8>
 801f60a:	4770      	bx	lr
{
 801f60c:	b510      	push	{r4, lr}
        plan_cycle_reinitialize();
 801f60e:	f7f7 fc19 	bl	8016e44 <plan_cycle_reinitialize>
        sys.step_control.flags = 0;
 801f612:	4b84      	ldr	r3, [pc, #528]	@ (801f824 <state_await_hold+0x220>)
 801f614:	2200      	movs	r2, #0
 801f616:	761a      	strb	r2, [r3, #24]
        if (sys.alarm_pending) {
 801f618:	7d19      	ldrb	r1, [r3, #20]
 801f61a:	b139      	cbz	r1, 801f62c <state_await_hold+0x28>
            system_set_exec_alarm(sys.alarm_pending);
 801f61c:	4b82      	ldr	r3, [pc, #520]	@ (801f828 <state_await_hold+0x224>)
 801f61e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f620:	4c82      	ldr	r4, [pc, #520]	@ (801f82c <state_await_hold+0x228>)
 801f622:	4620      	mov	r0, r4
 801f624:	4798      	blx	r3
            sys.alarm_pending = Alarm_None;
 801f626:	2300      	movs	r3, #0
 801f628:	f804 3c38 	strb.w	r3, [r4, #-56]
        switch (sys_state) {
 801f62c:	4b80      	ldr	r3, [pc, #512]	@ (801f830 <state_await_hold+0x22c>)
 801f62e:	681b      	ldr	r3, [r3, #0]
 801f630:	2b80      	cmp	r3, #128	@ 0x80
 801f632:	d01a      	beq.n	801f66a <state_await_hold+0x66>
 801f634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f638:	d00f      	beq.n	801f65a <state_await_hold+0x56>
 801f63a:	2b40      	cmp	r3, #64	@ 0x40
 801f63c:	d015      	beq.n	801f66a <state_await_hold+0x66>
            if(sys.flags.soft_limit)
 801f63e:	4b79      	ldr	r3, [pc, #484]	@ (801f824 <state_await_hold+0x220>)
 801f640:	7d9b      	ldrb	r3, [r3, #22]
 801f642:	f013 0f04 	tst.w	r3, #4
 801f646:	f040 80e8 	bne.w	801f81a <state_await_hold+0x216>
                sys.holding_state = Hold_Complete;
 801f64a:	4b76      	ldr	r3, [pc, #472]	@ (801f824 <state_await_hold+0x220>)
 801f64c:	2201      	movs	r2, #1
 801f64e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                stateHandler = state_await_resume;
 801f652:	4b78      	ldr	r3, [pc, #480]	@ (801f834 <state_await_hold+0x230>)
 801f654:	4a78      	ldr	r2, [pc, #480]	@ (801f838 <state_await_hold+0x234>)
 801f656:	601a      	str	r2, [r3, #0]
}
 801f658:	bd10      	pop	{r4, pc}
                spindle_all_off(); // De-energize
 801f65a:	f7ff f9f1 	bl	801ea40 <spindle_all_off>
                hal.coolant.set_state((coolant_state_t){0}); // De-energize
 801f65e:	4b72      	ldr	r3, [pc, #456]	@ (801f828 <state_await_hold+0x224>)
 801f660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f662:	f04f 0000 	mov.w	r0, #0
 801f666:	4798      	blx	r3
        if (!handler_changed) {
 801f668:	e7e9      	b.n	801f63e <state_await_hold+0x3a>
                sys.override.spindle_stop.value = 0;
 801f66a:	4b6e      	ldr	r3, [pc, #440]	@ (801f824 <state_await_hold+0x220>)
 801f66c:	2200      	movs	r2, #0
 801f66e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                if (settings.parking.flags.enabled && !sys.override.control.parking_disable && settings.mode != Mode_Laser) {
 801f672:	4b72      	ldr	r3, [pc, #456]	@ (801f83c <state_await_hold+0x238>)
 801f674:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801f678:	f013 0f01 	tst.w	r3, #1
 801f67c:	f000 80b3 	beq.w	801f7e6 <state_await_hold+0x1e2>
 801f680:	4b68      	ldr	r3, [pc, #416]	@ (801f824 <state_await_hold+0x220>)
 801f682:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801f686:	f013 0f08 	tst.w	r3, #8
 801f68a:	f040 80ac 	bne.w	801f7e6 <state_await_hold+0x1e2>
 801f68e:	4b6b      	ldr	r3, [pc, #428]	@ (801f83c <state_await_hold+0x238>)
 801f690:	7e1b      	ldrb	r3, [r3, #24]
 801f692:	2b01      	cmp	r3, #1
 801f694:	f000 80a7 	beq.w	801f7e6 <state_await_hold+0x1e2>
                    if (!park.flags.active) {
 801f698:	4b69      	ldr	r3, [pc, #420]	@ (801f840 <state_await_hold+0x23c>)
 801f69a:	7f1b      	ldrb	r3, [r3, #28]
 801f69c:	f013 0f01 	tst.w	r3, #1
 801f6a0:	d05d      	beq.n	801f75e <state_await_hold+0x15a>
                    if (bit_istrue(sys.homed.mask, bit(settings.parking.axis)) && (park.restore_target[settings.parking.axis] < settings.parking.target)) {
 801f6a2:	4b60      	ldr	r3, [pc, #384]	@ (801f824 <state_await_hold+0x220>)
 801f6a4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 801f6a8:	4a64      	ldr	r2, [pc, #400]	@ (801f83c <state_await_hold+0x238>)
 801f6aa:	f892 4129 	ldrb.w	r4, [r2, #297]	@ 0x129
 801f6ae:	40e3      	lsrs	r3, r4
 801f6b0:	f013 0f01 	tst.w	r3, #1
 801f6b4:	d07d      	beq.n	801f7b2 <state_await_hold+0x1ae>
 801f6b6:	1ca2      	adds	r2, r4, #2
 801f6b8:	4b61      	ldr	r3, [pc, #388]	@ (801f840 <state_await_hold+0x23c>)
 801f6ba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801f6be:	ed93 7a01 	vldr	s14, [r3, #4]
 801f6c2:	4b5e      	ldr	r3, [pc, #376]	@ (801f83c <state_await_hold+0x238>)
 801f6c4:	edd3 7a4b 	vldr	s15, [r3, #300]	@ 0x12c
 801f6c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6d0:	d56f      	bpl.n	801f7b2 <state_await_hold+0x1ae>
                        stateHandler = state_await_waypoint_retract;
 801f6d2:	4b58      	ldr	r3, [pc, #352]	@ (801f834 <state_await_hold+0x230>)
 801f6d4:	4a5b      	ldr	r2, [pc, #364]	@ (801f844 <state_await_hold+0x240>)
 801f6d6:	601a      	str	r2, [r3, #0]
                        if(park.flags.restart)
 801f6d8:	4b59      	ldr	r3, [pc, #356]	@ (801f840 <state_await_hold+0x23c>)
 801f6da:	7f1b      	ldrb	r3, [r3, #28]
 801f6dc:	f013 0f04 	tst.w	r3, #4
 801f6e0:	d147      	bne.n	801f772 <state_await_hold+0x16e>
                            memcpy(park.target, park.restore_target, sizeof(park.target));
 801f6e2:	4b57      	ldr	r3, [pc, #348]	@ (801f840 <state_await_hold+0x23c>)
 801f6e4:	f103 020c 	add.w	r2, r3, #12
 801f6e8:	ca07      	ldmia	r2, {r0, r1, r2}
 801f6ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                            park.retract_waypoint = settings.parking.pullout_increment + park.target[settings.parking.axis];
 801f6ee:	4a53      	ldr	r2, [pc, #332]	@ (801f83c <state_await_hold+0x238>)
 801f6f0:	ed92 7a4e 	vldr	s14, [r2, #312]	@ 0x138
 801f6f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f6f8:	edd4 6a00 	vldr	s13, [r4]
 801f6fc:	ee37 7a26 	vadd.f32	s14, s14, s13
 801f700:	ed83 7a06 	vstr	s14, [r3, #24]
                            park.retract_waypoint = min(park.retract_waypoint, settings.parking.target);
 801f704:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f70c:	dd01      	ble.n	801f712 <state_await_hold+0x10e>
 801f70e:	eef0 7a47 	vmov.f32	s15, s14
 801f712:	4b4b      	ldr	r3, [pc, #300]	@ (801f840 <state_await_hold+0x23c>)
 801f714:	edc3 7a06 	vstr	s15, [r3, #24]
                        if ((await_motion = park.target[settings.parking.axis] < park.retract_waypoint)) {
 801f718:	4b48      	ldr	r3, [pc, #288]	@ (801f83c <state_await_hold+0x238>)
 801f71a:	f893 2129 	ldrb.w	r2, [r3, #297]	@ 0x129
 801f71e:	4b48      	ldr	r3, [pc, #288]	@ (801f840 <state_await_hold+0x23c>)
 801f720:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801f724:	ed91 7a00 	vldr	s14, [r1]
 801f728:	edd3 7a06 	vldr	s15, [r3, #24]
 801f72c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f734:	bf4c      	ite	mi
 801f736:	2001      	movmi	r0, #1
 801f738:	2000      	movpl	r0, #0
 801f73a:	d41f      	bmi.n	801f77c <state_await_hold+0x178>
                        if(!park.flags.restart)
 801f73c:	4b40      	ldr	r3, [pc, #256]	@ (801f840 <state_await_hold+0x23c>)
 801f73e:	7f1b      	ldrb	r3, [r3, #28]
 801f740:	f013 0f04 	tst.w	r3, #4
 801f744:	d104      	bne.n	801f750 <state_await_hold+0x14c>
                            park.flags.motion = await_motion;
 801f746:	4a3e      	ldr	r2, [pc, #248]	@ (801f840 <state_await_hold+0x23c>)
 801f748:	7f13      	ldrb	r3, [r2, #28]
 801f74a:	f360 0341 	bfi	r3, r0, #1, #1
 801f74e:	7713      	strb	r3, [r2, #28]
                        if (!await_motion)
 801f750:	2800      	cmp	r0, #0
 801f752:	d181      	bne.n	801f658 <state_await_hold+0x54>
                            stateHandler(EXEC_CYCLE_COMPLETE); // No motion, proceed to next step immediately.
 801f754:	4b37      	ldr	r3, [pc, #220]	@ (801f834 <state_await_hold+0x230>)
 801f756:	681b      	ldr	r3, [r3, #0]
 801f758:	2004      	movs	r0, #4
 801f75a:	4798      	blx	r3
        if (!handler_changed) {
 801f75c:	e77c      	b.n	801f658 <state_await_hold+0x54>
                        park.flags.active = On;
 801f75e:	4838      	ldr	r0, [pc, #224]	@ (801f840 <state_await_hold+0x23c>)
 801f760:	7f03      	ldrb	r3, [r0, #28]
 801f762:	f043 0301 	orr.w	r3, r3, #1
 801f766:	7703      	strb	r3, [r0, #28]
                        system_convert_array_steps_to_mpos(park.restore_target, sys.position);
 801f768:	4937      	ldr	r1, [pc, #220]	@ (801f848 <state_await_hold+0x244>)
 801f76a:	300c      	adds	r0, #12
 801f76c:	f002 fb06 	bl	8021d7c <system_convert_array_steps_to_mpos>
 801f770:	e797      	b.n	801f6a2 <state_await_hold+0x9e>
                            system_convert_array_steps_to_mpos(park.target, sys.position);
 801f772:	4935      	ldr	r1, [pc, #212]	@ (801f848 <state_await_hold+0x244>)
 801f774:	4832      	ldr	r0, [pc, #200]	@ (801f840 <state_await_hold+0x23c>)
 801f776:	f002 fb01 	bl	8021d7c <system_convert_array_steps_to_mpos>
 801f77a:	e7cd      	b.n	801f718 <state_await_hold+0x114>
                            park.target[settings.parking.axis] = park.retract_waypoint;
 801f77c:	4618      	mov	r0, r3
 801f77e:	edc1 7a00 	vstr	s15, [r1]
                            park.plan_data.feed_rate = settings.parking.pullout_rate;
 801f782:	4b2e      	ldr	r3, [pc, #184]	@ (801f83c <state_await_hold+0x238>)
 801f784:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801f788:	6203      	str	r3, [r0, #32]
                            park.plan_data.condition.coolant = restore_condition.coolant; // Retain coolant state
 801f78a:	4b30      	ldr	r3, [pc, #192]	@ (801f84c <state_await_hold+0x248>)
 801f78c:	781a      	ldrb	r2, [r3, #0]
 801f78e:	f880 2036 	strb.w	r2, [r0, #54]	@ 0x36
                            park.plan_data.spindle.state = restore_condition.spindle[restore_condition.spindle_num].state; // Retain spindle state
 801f792:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801f796:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801f79a:	7a1a      	ldrb	r2, [r3, #8]
 801f79c:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
                            park.plan_data.spindle.hal = restore_condition.spindle[restore_condition.spindle_num].hal;
 801f7a0:	691a      	ldr	r2, [r3, #16]
 801f7a2:	6302      	str	r2, [r0, #48]	@ 0x30
                            park.plan_data.spindle.rpm = restore_condition.spindle[restore_condition.spindle_num].rpm;
 801f7a4:	685b      	ldr	r3, [r3, #4]
 801f7a6:	6243      	str	r3, [r0, #36]	@ 0x24
                            await_motion = mc_parking_motion(park.target, &park.plan_data);
 801f7a8:	f100 0120 	add.w	r1, r0, #32
 801f7ac:	f7f5 fa6c 	bl	8014c88 <mc_parking_motion>
 801f7b0:	e7c4      	b.n	801f73c <state_await_hold+0x138>
                        spindle_all_off(); // De-energize
 801f7b2:	f7ff f945 	bl	801ea40 <spindle_all_off>
                        if (!settings.safety_door.flags.keep_coolant_on || sys_state == STATE_SLEEP)
 801f7b6:	4b21      	ldr	r3, [pc, #132]	@ (801f83c <state_await_hold+0x238>)
 801f7b8:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 801f7bc:	f013 0f02 	tst.w	r3, #2
 801f7c0:	d003      	beq.n	801f7ca <state_await_hold+0x1c6>
 801f7c2:	4b1b      	ldr	r3, [pc, #108]	@ (801f830 <state_await_hold+0x22c>)
 801f7c4:	681b      	ldr	r3, [r3, #0]
 801f7c6:	2b80      	cmp	r3, #128	@ 0x80
 801f7c8:	d104      	bne.n	801f7d4 <state_await_hold+0x1d0>
                            hal.coolant.set_state((coolant_state_t){0}); // De-energize
 801f7ca:	4b17      	ldr	r3, [pc, #92]	@ (801f828 <state_await_hold+0x224>)
 801f7cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f7ce:	f04f 0000 	mov.w	r0, #0
 801f7d2:	4798      	blx	r3
                        sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801f7d4:	4b14      	ldr	r3, [pc, #80]	@ (801f828 <state_await_hold+0x224>)
 801f7d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f7d8:	4798      	blx	r3
 801f7da:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801f7de:	4b11      	ldr	r3, [pc, #68]	@ (801f824 <state_await_hold+0x220>)
 801f7e0:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
        if (!handler_changed) {
 801f7e4:	e72b      	b.n	801f63e <state_await_hold+0x3a>
                    spindle_all_off(); // De-energize
 801f7e6:	f7ff f92b 	bl	801ea40 <spindle_all_off>
                    if (!settings.safety_door.flags.keep_coolant_on || sys_state == STATE_SLEEP)
 801f7ea:	4b14      	ldr	r3, [pc, #80]	@ (801f83c <state_await_hold+0x238>)
 801f7ec:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 801f7f0:	f013 0f02 	tst.w	r3, #2
 801f7f4:	d003      	beq.n	801f7fe <state_await_hold+0x1fa>
 801f7f6:	4b0e      	ldr	r3, [pc, #56]	@ (801f830 <state_await_hold+0x22c>)
 801f7f8:	681b      	ldr	r3, [r3, #0]
 801f7fa:	2b80      	cmp	r3, #128	@ 0x80
 801f7fc:	d104      	bne.n	801f808 <state_await_hold+0x204>
                        hal.coolant.set_state((coolant_state_t){0}); // De-energize
 801f7fe:	4b0a      	ldr	r3, [pc, #40]	@ (801f828 <state_await_hold+0x224>)
 801f800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f802:	f04f 0000 	mov.w	r0, #0
 801f806:	4798      	blx	r3
                    sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801f808:	4b07      	ldr	r3, [pc, #28]	@ (801f828 <state_await_hold+0x224>)
 801f80a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f80c:	4798      	blx	r3
 801f80e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801f812:	4b04      	ldr	r3, [pc, #16]	@ (801f824 <state_await_hold+0x220>)
 801f814:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
        if (!handler_changed) {
 801f818:	e711      	b.n	801f63e <state_await_hold+0x3a>
                state_set(STATE_IDLE);
 801f81a:	2000      	movs	r0, #0
 801f81c:	f7ff fb9a 	bl	801ef54 <state_set>
 801f820:	e71a      	b.n	801f658 <state_await_hold+0x54>
 801f822:	bf00      	nop
 801f824:	20001d70 	.word	0x20001d70
 801f828:	20001a90 	.word	0x20001a90
 801f82c:	20001dbc 	.word	0x20001dbc
 801f830:	20002728 	.word	0x20002728
 801f834:	2000043c 	.word	0x2000043c
 801f838:	0801f231 	.word	0x0801f231
 801f83c:	200024a8 	.word	0x200024a8
 801f840:	200026e0 	.word	0x200026e0
 801f844:	0801eacd 	.word	0x0801eacd
 801f848:	20001df8 	.word	0x20001df8
 801f84c:	20002730 	.word	0x20002730

0801f850 <state_suspend_manager>:
    if (stateHandler != state_await_resume || !gc_state.modal.spindle.state.on)
 801f850:	4b39      	ldr	r3, [pc, #228]	@ (801f938 <state_suspend_manager+0xe8>)
 801f852:	681a      	ldr	r2, [r3, #0]
 801f854:	4b39      	ldr	r3, [pc, #228]	@ (801f93c <state_suspend_manager+0xec>)
 801f856:	429a      	cmp	r2, r3
 801f858:	d000      	beq.n	801f85c <state_suspend_manager+0xc>
 801f85a:	4770      	bx	lr
 801f85c:	4b38      	ldr	r3, [pc, #224]	@ (801f940 <state_suspend_manager+0xf0>)
 801f85e:	7e9b      	ldrb	r3, [r3, #26]
 801f860:	f013 0f01 	tst.w	r3, #1
 801f864:	d0f9      	beq.n	801f85a <state_suspend_manager+0xa>
{
 801f866:	b510      	push	{r4, lr}
    if (sys.override.spindle_stop.value) {
 801f868:	4b36      	ldr	r3, [pc, #216]	@ (801f944 <state_suspend_manager+0xf4>)
 801f86a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801f86e:	2b00      	cmp	r3, #0
 801f870:	d047      	beq.n	801f902 <state_suspend_manager+0xb2>
        if (sys.override.spindle_stop.initiate) {
 801f872:	f013 0f02 	tst.w	r3, #2
 801f876:	d122      	bne.n	801f8be <state_suspend_manager+0x6e>
        if (sys.override.spindle_stop.restore) {
 801f878:	4b32      	ldr	r3, [pc, #200]	@ (801f944 <state_suspend_manager+0xf4>)
 801f87a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801f87e:	f013 0f04 	tst.w	r3, #4
 801f882:	d01b      	beq.n	801f8bc <state_suspend_manager+0x6c>
            grbl.report.feedback_message(Message_SpindleRestore);
 801f884:	4b30      	ldr	r3, [pc, #192]	@ (801f948 <state_suspend_manager+0xf8>)
 801f886:	68db      	ldr	r3, [r3, #12]
 801f888:	200a      	movs	r0, #10
 801f88a:	4798      	blx	r3
            if (restore_condition.spindle[restore_condition.spindle_num].hal->cap.laser) // When in laser mode, ignore spindle spin-up delay. Set to turn on laser when cycle starts.
 801f88c:	4b2f      	ldr	r3, [pc, #188]	@ (801f94c <state_suspend_manager+0xfc>)
 801f88e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801f892:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801f896:	691b      	ldr	r3, [r3, #16]
 801f898:	7a9b      	ldrb	r3, [r3, #10]
 801f89a:	f013 0f08 	tst.w	r3, #8
 801f89e:	d029      	beq.n	801f8f4 <state_suspend_manager+0xa4>
                sys.step_control.update_spindle_rpm = On;
 801f8a0:	4a28      	ldr	r2, [pc, #160]	@ (801f944 <state_suspend_manager+0xf4>)
 801f8a2:	7e13      	ldrb	r3, [r2, #24]
 801f8a4:	f043 0308 	orr.w	r3, r3, #8
 801f8a8:	7613      	strb	r3, [r2, #24]
            sys.override.spindle_stop.value = 0; // Clear stop override state
 801f8aa:	4b26      	ldr	r3, [pc, #152]	@ (801f944 <state_suspend_manager+0xf4>)
 801f8ac:	2200      	movs	r2, #0
 801f8ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            if(grbl.on_override_changed)
 801f8b2:	4b25      	ldr	r3, [pc, #148]	@ (801f948 <state_suspend_manager+0xf8>)
 801f8b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f8b6:	b10b      	cbz	r3, 801f8bc <state_suspend_manager+0x6c>
                grbl.on_override_changed(OverrideChanged_SpindleState);
 801f8b8:	4610      	mov	r0, r2
 801f8ba:	4798      	blx	r3
}
 801f8bc:	bd10      	pop	{r4, pc}
            sys.override.spindle_stop.value = 0; // Clear stop override state
 801f8be:	4c21      	ldr	r4, [pc, #132]	@ (801f944 <state_suspend_manager+0xf4>)
 801f8c0:	2100      	movs	r1, #0
 801f8c2:	f884 1028 	strb.w	r1, [r4, #40]	@ 0x28
            spindle_set_state(restore_condition.spindle[restore_condition.spindle_num].hal, (spindle_state_t){0}, 0.0f); // De-energize
 801f8c6:	4b21      	ldr	r3, [pc, #132]	@ (801f94c <state_suspend_manager+0xfc>)
 801f8c8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801f8cc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801f8d0:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 801f950 <state_suspend_manager+0x100>
 801f8d4:	6918      	ldr	r0, [r3, #16]
 801f8d6:	f7fe ffa1 	bl	801e81c <spindle_set_state>
            sys.override.spindle_stop.enabled = On; // Set stop override state to enabled, if de-energized.
 801f8da:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801f8de:	f043 0301 	orr.w	r3, r3, #1
 801f8e2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
            if(grbl.on_override_changed)
 801f8e6:	4b18      	ldr	r3, [pc, #96]	@ (801f948 <state_suspend_manager+0xf8>)
 801f8e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f8ea:	2b00      	cmp	r3, #0
 801f8ec:	d0c4      	beq.n	801f878 <state_suspend_manager+0x28>
                grbl.on_override_changed(OverrideChanged_SpindleState);
 801f8ee:	2000      	movs	r0, #0
 801f8f0:	4798      	blx	r3
 801f8f2:	e7c1      	b.n	801f878 <state_suspend_manager+0x28>
                state_spindle_set_state(&restore_condition.spindle[restore_condition.spindle_num]);
 801f8f4:	4815      	ldr	r0, [pc, #84]	@ (801f94c <state_suspend_manager+0xfc>)
 801f8f6:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801f8fa:	3004      	adds	r0, #4
 801f8fc:	f7ff fb04 	bl	801ef08 <state_spindle_set_state>
 801f900:	e7d3      	b.n	801f8aa <state_suspend_manager+0x5a>
    } else if (sys.step_control.update_spindle_rpm && restore_condition.spindle[0].hal->get_state(restore_condition.spindle[0].hal).on) {
 801f902:	4b10      	ldr	r3, [pc, #64]	@ (801f944 <state_suspend_manager+0xf4>)
 801f904:	7e1b      	ldrb	r3, [r3, #24]
 801f906:	f013 0f08 	tst.w	r3, #8
 801f90a:	d0d7      	beq.n	801f8bc <state_suspend_manager+0x6c>
 801f90c:	4b0f      	ldr	r3, [pc, #60]	@ (801f94c <state_suspend_manager+0xfc>)
 801f90e:	6918      	ldr	r0, [r3, #16]
 801f910:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801f912:	4798      	blx	r3
 801f914:	f010 0f01 	tst.w	r0, #1
 801f918:	d0d0      	beq.n	801f8bc <state_suspend_manager+0x6c>
        state_spindle_set_state(&restore_condition.spindle[restore_condition.spindle_num]);
 801f91a:	480c      	ldr	r0, [pc, #48]	@ (801f94c <state_suspend_manager+0xfc>)
 801f91c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801f920:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 801f924:	3004      	adds	r0, #4
 801f926:	f7ff faef 	bl	801ef08 <state_spindle_set_state>
        sys.step_control.update_spindle_rpm = Off;
 801f92a:	4b06      	ldr	r3, [pc, #24]	@ (801f944 <state_suspend_manager+0xf4>)
 801f92c:	7e1a      	ldrb	r2, [r3, #24]
 801f92e:	f36f 02c3 	bfc	r2, #3, #1
 801f932:	761a      	strb	r2, [r3, #24]
 801f934:	e7c2      	b.n	801f8bc <state_suspend_manager+0x6c>
 801f936:	bf00      	nop
 801f938:	2000043c 	.word	0x2000043c
 801f93c:	0801f231 	.word	0x0801f231
 801f940:	200017c8 	.word	0x200017c8
 801f944:	20001d70 	.word	0x20001d70
 801f948:	20001c78 	.word	0x20001c78
 801f94c:	20002730 	.word	0x20002730
 801f950:	00000000 	.word	0x00000000

0801f954 <st_deenergize>:

//

// Callback from delay to deenergize steppers after movement, might been cancelled
void st_deenergize (void *data)
{
 801f954:	b508      	push	{r3, lr}
    if(sys.steppers_deenergize) {
 801f956:	4b07      	ldr	r3, [pc, #28]	@ (801f974 <st_deenergize+0x20>)
 801f958:	799b      	ldrb	r3, [r3, #6]
 801f95a:	b14b      	cbz	r3, 801f970 <st_deenergize+0x1c>
        hal.stepper.enable(settings.steppers.deenergize);
 801f95c:	4b06      	ldr	r3, [pc, #24]	@ (801f978 <st_deenergize+0x24>)
 801f95e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f962:	4a06      	ldr	r2, [pc, #24]	@ (801f97c <st_deenergize+0x28>)
 801f964:	f892 00ec 	ldrb.w	r0, [r2, #236]	@ 0xec
 801f968:	4798      	blx	r3
        sys.steppers_deenergize = false;
 801f96a:	4b02      	ldr	r3, [pc, #8]	@ (801f974 <st_deenergize+0x20>)
 801f96c:	2200      	movs	r2, #0
 801f96e:	719a      	strb	r2, [r3, #6]
    }
}
 801f970:	bd08      	pop	{r3, pc}
 801f972:	bf00      	nop
 801f974:	20001d70 	.word	0x20001d70
 801f978:	20001a90 	.word	0x20001a90
 801f97c:	200024a8 	.word	0x200024a8

0801f980 <st_wake_up>:

// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up (void)
{
 801f980:	b508      	push	{r3, lr}
    // Initialize stepper data to ensure first ISR call does not step and
    // cancel any pending steppers deenergize
    //st.exec_block = NULL;
    sys.steppers_deenergize = false;
 801f982:	4b04      	ldr	r3, [pc, #16]	@ (801f994 <st_wake_up+0x14>)
 801f984:	2200      	movs	r2, #0
 801f986:	719a      	strb	r2, [r3, #6]
    hal.stepper.wake_up();
 801f988:	4b03      	ldr	r3, [pc, #12]	@ (801f998 <st_wake_up+0x18>)
 801f98a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801f98e:	4798      	blx	r3
}
 801f990:	bd08      	pop	{r3, pc}
 801f992:	bf00      	nop
 801f994:	20001d70 	.word	0x20001d70
 801f998:	20001a90 	.word	0x20001a90

0801f99c <st_go_idle>:

// Stepper shutdown
ISR_CODE void ISR_FUNC(st_go_idle)(void)
{
 801f99c:	b510      	push	{r4, lr}
    // Disable Stepper Driver Interrupt. Allow Stepper Port Reset Interrupt to finish, if active.

    sys_state_t state = state_get();
 801f99e:	f7ff fad3 	bl	801ef48 <state_get>
 801f9a2:	4604      	mov	r4, r0

    hal.stepper.go_idle(false);
 801f9a4:	4b1b      	ldr	r3, [pc, #108]	@ (801fa14 <st_go_idle+0x78>)
 801f9a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f9aa:	2000      	movs	r0, #0
 801f9ac:	4798      	blx	r3

    // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
    if(((settings.steppers.idle_lock_time != 255) || sys.rt_exec_alarm || state == STATE_SLEEP) && state != STATE_HOMING) {
 801f9ae:	4b1a      	ldr	r3, [pc, #104]	@ (801fa18 <st_go_idle+0x7c>)
 801f9b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801f9b4:	2bff      	cmp	r3, #255	@ 0xff
 801f9b6:	d00b      	beq.n	801f9d0 <st_go_idle+0x34>
 801f9b8:	2c04      	cmp	r4, #4
 801f9ba:	d00f      	beq.n	801f9dc <st_go_idle+0x40>
        if(settings.steppers.idle_lock_time == 0 || state == STATE_SLEEP)
 801f9bc:	b10b      	cbz	r3, 801f9c2 <st_go_idle+0x26>
 801f9be:	2c80      	cmp	r4, #128	@ 0x80
 801f9c0:	d116      	bne.n	801f9f0 <st_go_idle+0x54>
            hal.stepper.enable((axes_signals_t){0});
 801f9c2:	4b14      	ldr	r3, [pc, #80]	@ (801fa14 <st_go_idle+0x78>)
 801f9c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f9c8:	f04f 0000 	mov.w	r0, #0
 801f9cc:	4798      	blx	r3
            task_delete(st_deenergize, NULL); // Cancel any pending steppers deenergize task
            sys.steppers_deenergize = task_add_delayed(st_deenergize, NULL, settings.steppers.idle_lock_time);
        }
    } else
        hal.stepper.enable(settings.steppers.idle_lock_time == 255 ? (axes_signals_t){AXES_BITMASK} : settings.steppers.deenergize);
}
 801f9ce:	bd10      	pop	{r4, pc}
    if(((settings.steppers.idle_lock_time != 255) || sys.rt_exec_alarm || state == STATE_SLEEP) && state != STATE_HOMING) {
 801f9d0:	4a12      	ldr	r2, [pc, #72]	@ (801fa1c <st_go_idle+0x80>)
 801f9d2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 801f9d4:	2a00      	cmp	r2, #0
 801f9d6:	d1ef      	bne.n	801f9b8 <st_go_idle+0x1c>
 801f9d8:	2c80      	cmp	r4, #128	@ 0x80
 801f9da:	d0ef      	beq.n	801f9bc <st_go_idle+0x20>
        hal.stepper.enable(settings.steppers.idle_lock_time == 255 ? (axes_signals_t){AXES_BITMASK} : settings.steppers.deenergize);
 801f9dc:	4a0d      	ldr	r2, [pc, #52]	@ (801fa14 <st_go_idle+0x78>)
 801f9de:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801f9e2:	2bff      	cmp	r3, #255	@ 0xff
 801f9e4:	d013      	beq.n	801fa0e <st_go_idle+0x72>
 801f9e6:	4b0c      	ldr	r3, [pc, #48]	@ (801fa18 <st_go_idle+0x7c>)
 801f9e8:	f893 00ec 	ldrb.w	r0, [r3, #236]	@ 0xec
 801f9ec:	4790      	blx	r2
}
 801f9ee:	e7ee      	b.n	801f9ce <st_go_idle+0x32>
            task_delete(st_deenergize, NULL); // Cancel any pending steppers deenergize task
 801f9f0:	4c0b      	ldr	r4, [pc, #44]	@ (801fa20 <st_go_idle+0x84>)
 801f9f2:	2100      	movs	r1, #0
 801f9f4:	4620      	mov	r0, r4
 801f9f6:	f7f2 fa35 	bl	8011e64 <task_delete>
            sys.steppers_deenergize = task_add_delayed(st_deenergize, NULL, settings.steppers.idle_lock_time);
 801f9fa:	4b07      	ldr	r3, [pc, #28]	@ (801fa18 <st_go_idle+0x7c>)
 801f9fc:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	@ 0xf8
 801fa00:	2100      	movs	r1, #0
 801fa02:	4620      	mov	r0, r4
 801fa04:	f7f1 ffa8 	bl	8011958 <task_add_delayed>
 801fa08:	4b04      	ldr	r3, [pc, #16]	@ (801fa1c <st_go_idle+0x80>)
 801fa0a:	7198      	strb	r0, [r3, #6]
 801fa0c:	e7df      	b.n	801f9ce <st_go_idle+0x32>
        hal.stepper.enable(settings.steppers.idle_lock_time == 255 ? (axes_signals_t){AXES_BITMASK} : settings.steppers.deenergize);
 801fa0e:	f04f 0007 	mov.w	r0, #7
 801fa12:	e7eb      	b.n	801f9ec <st_go_idle+0x50>
 801fa14:	20001a90 	.word	0x20001a90
 801fa18:	200024a8 	.word	0x200024a8
 801fa1c:	20001d70 	.word	0x20001d70
 801fa20:	0801f955 	.word	0x0801f955

0801fa24 <stepper_driver_interrupt_handler>:
*/

//! \cond

ISR_CODE void ISR_FUNC(stepper_driver_interrupt_handler)(void)
{
 801fa24:	b510      	push	{r4, lr}
#if ENABLE_BACKLASH_COMPENSATION
    static bool backlash_motion;
#endif

    // Start a step pulse when there is a block to execute.
    if(st.exec_block) {
 801fa26:	4b91      	ldr	r3, [pc, #580]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fa28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa2a:	b163      	cbz	r3, 801fa46 <stepper_driver_interrupt_handler+0x22>

        hal.stepper.pulse_start(&st);
 801fa2c:	4b90      	ldr	r3, [pc, #576]	@ (801fc70 <stepper_driver_interrupt_handler+0x24c>)
 801fa2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801fa32:	4c8e      	ldr	r4, [pc, #568]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fa34:	4620      	mov	r0, r4
 801fa36:	4798      	blx	r3

        st.new_block = st.dir_change = false;
 801fa38:	2300      	movs	r3, #0
 801fa3a:	7363      	strb	r3, [r4, #13]
 801fa3c:	7323      	strb	r3, [r4, #12]

        if (st.step_count == 0) // Segment is complete. Discard current segment.
 801fa3e:	6a23      	ldr	r3, [r4, #32]
 801fa40:	b90b      	cbnz	r3, 801fa46 <stepper_driver_interrupt_handler+0x22>
            st.exec_segment = NULL;
 801fa42:	2200      	movs	r2, #0
 801fa44:	62e2      	str	r2, [r4, #44]	@ 0x2c
    }

    // If there is no step segment, attempt to pop one from the stepper buffer
    if (st.exec_segment == NULL) {
 801fa46:	4b89      	ldr	r3, [pc, #548]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fa48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa4a:	2b00      	cmp	r3, #0
 801fa4c:	d068      	beq.n	801fb20 <stepper_driver_interrupt_handler+0xfc>
    }

    // Check probing state.
    // Monitors probe pin state and records the system position when detected.
    // NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
    if (sys.probing_state == Probing_Active && hal.probe.get_state().triggered) {
 801fa4e:	4b89      	ldr	r3, [pc, #548]	@ (801fc74 <stepper_driver_interrupt_handler+0x250>)
 801fa50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801fa54:	b2db      	uxtb	r3, r3
 801fa56:	2b01      	cmp	r3, #1
 801fa58:	f000 812c 	beq.w	801fcb4 <stepper_driver_interrupt_handler+0x290>
            segment_next_head = segment_next_head->next;
        }
#endif
    }

    register axes_signals_t step_outbits = (axes_signals_t){0};
 801fa5c:	f04f 0100 	mov.w	r1, #0

    // Execute step displacement profile by Bresenham line algorithm

    st.counter_x += st.steps[X_AXIS];
 801fa60:	4a82      	ldr	r2, [pc, #520]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fa62:	6813      	ldr	r3, [r2, #0]
 801fa64:	6910      	ldr	r0, [r2, #16]
 801fa66:	4403      	add	r3, r0
 801fa68:	6013      	str	r3, [r2, #0]
    if (st.counter_x > st.step_event_count) {
 801fa6a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801fa6c:	4293      	cmp	r3, r2
 801fa6e:	d912      	bls.n	801fa96 <stepper_driver_interrupt_handler+0x72>
        step_outbits.x = On;
 801fa70:	f04f 0101 	mov.w	r1, #1
        st.counter_x -= st.step_event_count;
 801fa74:	487d      	ldr	r0, [pc, #500]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fa76:	1a9b      	subs	r3, r3, r2
 801fa78:	6003      	str	r3, [r0, #0]
#if ENABLE_BACKLASH_COMPENSATION
        if(!backlash_motion)
#endif
            sys.position[X_AXIS] = sys.position[X_AXIS] + (st.dir_outbits.x ? -1 : 1);
 801fa7a:	4b7e      	ldr	r3, [pc, #504]	@ (801fc74 <stepper_driver_interrupt_handler+0x250>)
 801fa7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801fa80:	7bc0      	ldrb	r0, [r0, #15]
 801fa82:	f010 0f01 	tst.w	r0, #1
 801fa86:	f000 812d 	beq.w	801fce4 <stepper_driver_interrupt_handler+0x2c0>
 801fa8a:	f04f 30ff 	mov.w	r0, #4294967295
 801fa8e:	4403      	add	r3, r0
 801fa90:	4878      	ldr	r0, [pc, #480]	@ (801fc74 <stepper_driver_interrupt_handler+0x250>)
 801fa92:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    }

    st.counter_y += st.steps[Y_AXIS];
 801fa96:	4875      	ldr	r0, [pc, #468]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fa98:	6843      	ldr	r3, [r0, #4]
 801fa9a:	6944      	ldr	r4, [r0, #20]
 801fa9c:	4423      	add	r3, r4
 801fa9e:	6043      	str	r3, [r0, #4]
    if (st.counter_y > st.step_event_count) {
 801faa0:	429a      	cmp	r2, r3
 801faa2:	d211      	bcs.n	801fac8 <stepper_driver_interrupt_handler+0xa4>
        step_outbits.y = On;
 801faa4:	f041 0102 	orr.w	r1, r1, #2
        st.counter_y -= st.step_event_count;
 801faa8:	1a9b      	subs	r3, r3, r2
 801faaa:	6043      	str	r3, [r0, #4]
#if ENABLE_BACKLASH_COMPENSATION
        if(!backlash_motion)
#endif
            sys.position[Y_AXIS] = sys.position[Y_AXIS] + (st.dir_outbits.y ? -1 : 1);
 801faac:	4b71      	ldr	r3, [pc, #452]	@ (801fc74 <stepper_driver_interrupt_handler+0x250>)
 801faae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801fab2:	7bc0      	ldrb	r0, [r0, #15]
 801fab4:	f010 0f02 	tst.w	r0, #2
 801fab8:	f000 8116 	beq.w	801fce8 <stepper_driver_interrupt_handler+0x2c4>
 801fabc:	f04f 30ff 	mov.w	r0, #4294967295
 801fac0:	4403      	add	r3, r0
 801fac2:	486c      	ldr	r0, [pc, #432]	@ (801fc74 <stepper_driver_interrupt_handler+0x250>)
 801fac4:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
    }

    st.counter_z += st.steps[Z_AXIS];
 801fac8:	4868      	ldr	r0, [pc, #416]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801faca:	6883      	ldr	r3, [r0, #8]
 801facc:	6984      	ldr	r4, [r0, #24]
 801face:	4423      	add	r3, r4
 801fad0:	6083      	str	r3, [r0, #8]
    if (st.counter_z > st.step_event_count) {
 801fad2:	429a      	cmp	r2, r3
 801fad4:	d211      	bcs.n	801fafa <stepper_driver_interrupt_handler+0xd6>
        step_outbits.z = On;
 801fad6:	f041 0104 	orr.w	r1, r1, #4
        st.counter_z -= st.step_event_count;
 801fada:	1a9b      	subs	r3, r3, r2
 801fadc:	6083      	str	r3, [r0, #8]
#if ENABLE_BACKLASH_COMPENSATION
        if(!backlash_motion)
#endif
            sys.position[Z_AXIS] = sys.position[Z_AXIS] + (st.dir_outbits.z ? -1 : 1);
 801fade:	4b65      	ldr	r3, [pc, #404]	@ (801fc74 <stepper_driver_interrupt_handler+0x250>)
 801fae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801fae4:	7bc2      	ldrb	r2, [r0, #15]
 801fae6:	f012 0f04 	tst.w	r2, #4
 801faea:	f000 80ff 	beq.w	801fcec <stepper_driver_interrupt_handler+0x2c8>
 801faee:	f04f 32ff 	mov.w	r2, #4294967295
 801faf2:	4413      	add	r3, r2
 801faf4:	4a5f      	ldr	r2, [pc, #380]	@ (801fc74 <stepper_driver_interrupt_handler+0x250>)
 801faf6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif
            sys.position[V_AXIS] = sys.position[V_AXIS] + (st.dir_outbits.v ? -1 : 1);
    }
  #endif

    st.step_outbits.value = step_outbits.value;
 801fafa:	4b5c      	ldr	r3, [pc, #368]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fafc:	7399      	strb	r1, [r3, #14]

    // During a homing cycle, lock out and prevent desired axes from moving.
    if (state_get() == STATE_HOMING)
 801fafe:	f7ff fa23 	bl	801ef48 <state_get>
 801fb02:	2804      	cmp	r0, #4
 801fb04:	f000 80f4 	beq.w	801fcf0 <stepper_driver_interrupt_handler+0x2cc>
        st.step_outbits.value &= sys.homing_axis_lock.mask;

    if (st.step_count == 0 || --st.step_count == 0) {
 801fb08:	4b58      	ldr	r3, [pc, #352]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fb0a:	6a1b      	ldr	r3, [r3, #32]
 801fb0c:	b11b      	cbz	r3, 801fb16 <stepper_driver_interrupt_handler+0xf2>
 801fb0e:	3b01      	subs	r3, #1
 801fb10:	4a56      	ldr	r2, [pc, #344]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fb12:	6213      	str	r3, [r2, #32]
 801fb14:	b91b      	cbnz	r3, 801fb1e <stepper_driver_interrupt_handler+0xfa>
        // Segment is complete. Advance segment tail pointer.
        segment_buffer_tail = segment_buffer_tail->next;
 801fb16:	4b58      	ldr	r3, [pc, #352]	@ (801fc78 <stepper_driver_interrupt_handler+0x254>)
 801fb18:	681a      	ldr	r2, [r3, #0]
 801fb1a:	6852      	ldr	r2, [r2, #4]
 801fb1c:	601a      	str	r2, [r3, #0]
    }
}
 801fb1e:	bd10      	pop	{r4, pc}
        if (segment_buffer_tail != segment_buffer_head) {
 801fb20:	4b55      	ldr	r3, [pc, #340]	@ (801fc78 <stepper_driver_interrupt_handler+0x254>)
 801fb22:	681b      	ldr	r3, [r3, #0]
 801fb24:	4a55      	ldr	r2, [pc, #340]	@ (801fc7c <stepper_driver_interrupt_handler+0x258>)
 801fb26:	6812      	ldr	r2, [r2, #0]
 801fb28:	4293      	cmp	r3, r2
 801fb2a:	f000 80ab 	beq.w	801fc84 <stepper_driver_interrupt_handler+0x260>
            st.exec_segment = (segment_t *)segment_buffer_tail;
 801fb2e:	4c4f      	ldr	r4, [pc, #316]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fb30:	62e3      	str	r3, [r4, #44]	@ 0x2c
            hal.stepper.cycles_per_tick(st.exec_segment->cycles_per_tick);
 801fb32:	4a4f      	ldr	r2, [pc, #316]	@ (801fc70 <stepper_driver_interrupt_handler+0x24c>)
 801fb34:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 801fb38:	68d8      	ldr	r0, [r3, #12]
 801fb3a:	4790      	blx	r2
            st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 801fb3c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801fb3e:	699a      	ldr	r2, [r3, #24]
 801fb40:	6222      	str	r2, [r4, #32]
            if (st.exec_block != st.exec_segment->exec_block) {
 801fb42:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801fb44:	6899      	ldr	r1, [r3, #8]
 801fb46:	428a      	cmp	r2, r1
 801fb48:	d06c      	beq.n	801fc24 <stepper_driver_interrupt_handler+0x200>
                if((st.dir_change = st.exec_block == NULL || st.dir_outbits.value != st.exec_segment->exec_block->direction_bits.value))
 801fb4a:	b382      	cbz	r2, 801fbae <stepper_driver_interrupt_handler+0x18a>
 801fb4c:	7be0      	ldrb	r0, [r4, #15]
 801fb4e:	7e09      	ldrb	r1, [r1, #24]
 801fb50:	4288      	cmp	r0, r1
 801fb52:	d02e      	beq.n	801fbb2 <stepper_driver_interrupt_handler+0x18e>
 801fb54:	2101      	movs	r1, #1
 801fb56:	4845      	ldr	r0, [pc, #276]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fb58:	7341      	strb	r1, [r0, #13]
 801fb5a:	b119      	cbz	r1, 801fb64 <stepper_driver_interrupt_handler+0x140>
                    st.dir_outbits = st.exec_segment->exec_block->direction_bits;
 801fb5c:	6899      	ldr	r1, [r3, #8]
 801fb5e:	7e08      	ldrb	r0, [r1, #24]
 801fb60:	4942      	ldr	r1, [pc, #264]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fb62:	73c8      	strb	r0, [r1, #15]
                if(st.exec_block != NULL && st.exec_block->offset_id != st.exec_segment->exec_block->offset_id)
 801fb64:	b19a      	cbz	r2, 801fb8e <stepper_driver_interrupt_handler+0x16a>
 801fb66:	f992 1032 	ldrsb.w	r1, [r2, #50]	@ 0x32
 801fb6a:	689a      	ldr	r2, [r3, #8]
 801fb6c:	f992 2032 	ldrsb.w	r2, [r2, #50]	@ 0x32
 801fb70:	4291      	cmp	r1, r2
 801fb72:	d00c      	beq.n	801fb8e <stepper_driver_interrupt_handler+0x16a>
                    sys.report.wco = sys.report.force_wco = On; // Do not generate grbl.on_rt_reports_added event!
 801fb74:	4a3f      	ldr	r2, [pc, #252]	@ (801fc74 <stepper_driver_interrupt_handler+0x250>)
 801fb76:	f892 1033 	ldrb.w	r1, [r2, #51]	@ 0x33
 801fb7a:	f041 0120 	orr.w	r1, r1, #32
 801fb7e:	f882 1033 	strb.w	r1, [r2, #51]	@ 0x33
 801fb82:	f892 1031 	ldrb.w	r1, [r2, #49]	@ 0x31
 801fb86:	f041 0101 	orr.w	r1, r1, #1
 801fb8a:	f882 1031 	strb.w	r1, [r2, #49]	@ 0x31
                st.exec_block = st.exec_segment->exec_block;
 801fb8e:	689b      	ldr	r3, [r3, #8]
 801fb90:	4a36      	ldr	r2, [pc, #216]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fb92:	6293      	str	r3, [r2, #40]	@ 0x28
                st.step_event_count = st.exec_block->step_event_count;
 801fb94:	6959      	ldr	r1, [r3, #20]
 801fb96:	6251      	str	r1, [r2, #36]	@ 0x24
                st.new_block = true;
 801fb98:	2101      	movs	r1, #1
 801fb9a:	7311      	strb	r1, [r2, #12]
                if(st.exec_block->overrides.sync)
 801fb9c:	f993 2019 	ldrsb.w	r2, [r3, #25]
 801fba0:	2a00      	cmp	r2, #0
 801fba2:	da15      	bge.n	801fbd0 <stepper_driver_interrupt_handler+0x1ac>
                    sys.override.control = st.exec_block->overrides;
 801fba4:	7e5a      	ldrb	r2, [r3, #25]
 801fba6:	4b33      	ldr	r3, [pc, #204]	@ (801fc74 <stepper_driver_interrupt_handler+0x250>)
 801fba8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 801fbac:	e010      	b.n	801fbd0 <stepper_driver_interrupt_handler+0x1ac>
                if((st.dir_change = st.exec_block == NULL || st.dir_outbits.value != st.exec_segment->exec_block->direction_bits.value))
 801fbae:	2101      	movs	r1, #1
 801fbb0:	e7d1      	b.n	801fb56 <stepper_driver_interrupt_handler+0x132>
 801fbb2:	2100      	movs	r1, #0
 801fbb4:	e7cf      	b.n	801fb56 <stepper_driver_interrupt_handler+0x132>
                        hal.port.analog_out(cmd->port, cmd->value);
 801fbb6:	4b2e      	ldr	r3, [pc, #184]	@ (801fc70 <stepper_driver_interrupt_handler+0x24c>)
 801fbb8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801fbbc:	edd4 7a01 	vldr	s15, [r4, #4]
 801fbc0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801fbc4:	78a0      	ldrb	r0, [r4, #2]
 801fbc6:	4798      	blx	r3
                    st.exec_block->output_commands = cmd->next;
 801fbc8:	4b28      	ldr	r3, [pc, #160]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fbca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fbcc:	68a2      	ldr	r2, [r4, #8]
 801fbce:	62da      	str	r2, [r3, #44]	@ 0x2c
                while(st.exec_block->output_commands) {
 801fbd0:	4b26      	ldr	r3, [pc, #152]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fbd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fbd4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801fbd6:	b1ac      	cbz	r4, 801fc04 <stepper_driver_interrupt_handler+0x1e0>
                    cmd->is_executed = true;
 801fbd8:	2301      	movs	r3, #1
 801fbda:	7063      	strb	r3, [r4, #1]
                    if(cmd->is_digital)
 801fbdc:	7823      	ldrb	r3, [r4, #0]
 801fbde:	2b00      	cmp	r3, #0
 801fbe0:	d0e9      	beq.n	801fbb6 <stepper_driver_interrupt_handler+0x192>
                        hal.port.digital_out(cmd->port, cmd->value != 0.0f);
 801fbe2:	4b23      	ldr	r3, [pc, #140]	@ (801fc70 <stepper_driver_interrupt_handler+0x24c>)
 801fbe4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801fbe8:	edd4 7a01 	vldr	s15, [r4, #4]
 801fbec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fbf0:	eef5 7a40 	vcmp.f32	s15, #0.0
 801fbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbf8:	bf14      	ite	ne
 801fbfa:	2101      	movne	r1, #1
 801fbfc:	2100      	moveq	r1, #0
 801fbfe:	78a0      	ldrb	r0, [r4, #2]
 801fc00:	4798      	blx	r3
 801fc02:	e7e1      	b.n	801fbc8 <stepper_driver_interrupt_handler+0x1a4>
                if(st.exec_block->message) {
 801fc04:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 801fc06:	b139      	cbz	r1, 801fc18 <stepper_driver_interrupt_handler+0x1f4>
                    if(!protocol_enqueue_foreground_task((foreground_task_ptr)gc_output_message, st.exec_block->message))
 801fc08:	481d      	ldr	r0, [pc, #116]	@ (801fc80 <stepper_driver_interrupt_handler+0x25c>)
 801fc0a:	f7f8 f921 	bl	8017e50 <protocol_enqueue_foreground_task>
 801fc0e:	b1e8      	cbz	r0, 801fc4c <stepper_driver_interrupt_handler+0x228>
                    st.exec_block->message = NULL;
 801fc10:	4b16      	ldr	r3, [pc, #88]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fc12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fc14:	2200      	movs	r2, #0
 801fc16:	629a      	str	r2, [r3, #40]	@ 0x28
                  = st.step_event_count >> 1;
 801fc18:	4a14      	ldr	r2, [pc, #80]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fc1a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801fc1c:	085b      	lsrs	r3, r3, #1
 801fc1e:	6093      	str	r3, [r2, #8]
                st.counter_x = st.counter_y = st.counter_z
 801fc20:	6053      	str	r3, [r2, #4]
 801fc22:	6013      	str	r3, [r2, #0]
            st.amass_level = st.exec_segment->amass_level;
 801fc24:	4b11      	ldr	r3, [pc, #68]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fc26:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801fc28:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 801fc2a:	61da      	str	r2, [r3, #28]
            st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.amass_level;
 801fc2c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801fc2e:	6884      	ldr	r4, [r0, #8]
 801fc30:	40d4      	lsrs	r4, r2
 801fc32:	611c      	str	r4, [r3, #16]
            st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.amass_level;
 801fc34:	68c4      	ldr	r4, [r0, #12]
 801fc36:	40d4      	lsrs	r4, r2
 801fc38:	615c      	str	r4, [r3, #20]
            st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.amass_level;
 801fc3a:	6904      	ldr	r4, [r0, #16]
 801fc3c:	40d4      	lsrs	r4, r2
 801fc3e:	619c      	str	r4, [r3, #24]
            if(st.exec_segment->update_pwm)
 801fc40:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801fc42:	b14b      	cbz	r3, 801fc58 <stepper_driver_interrupt_handler+0x234>
                st.exec_segment->update_pwm(st.exec_block->spindle, st.exec_segment->spindle_pwm);
 801fc44:	69c9      	ldr	r1, [r1, #28]
 801fc46:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801fc48:	4798      	blx	r3
 801fc4a:	e700      	b.n	801fa4e <stepper_driver_interrupt_handler+0x2a>
                        free(st.exec_block->message);
 801fc4c:	4b07      	ldr	r3, [pc, #28]	@ (801fc6c <stepper_driver_interrupt_handler+0x248>)
 801fc4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fc50:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801fc52:	f002 ffab 	bl	8022bac <free>
 801fc56:	e7db      	b.n	801fc10 <stepper_driver_interrupt_handler+0x1ec>
            else if(st.exec_segment->update_rpm)
 801fc58:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801fc5a:	2b00      	cmp	r3, #0
 801fc5c:	f43f aef7 	beq.w	801fa4e <stepper_driver_interrupt_handler+0x2a>
                st.exec_segment->update_rpm(st.exec_block->spindle, st.exec_segment->spindle_rpm);
 801fc60:	ed91 0a08 	vldr	s0, [r1, #32]
 801fc64:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801fc66:	4798      	blx	r3
 801fc68:	e6f1      	b.n	801fa4e <stepper_driver_interrupt_handler+0x2a>
 801fc6a:	bf00      	nop
 801fc6c:	200027f4 	.word	0x200027f4
 801fc70:	20001a90 	.word	0x20001a90
 801fc74:	20001d70 	.word	0x20001d70
 801fc78:	200027dc 	.word	0x200027dc
 801fc7c:	200027d8 	.word	0x200027d8
 801fc80:	0800d651 	.word	0x0800d651
            st_go_idle();
 801fc84:	f7ff fe8a 	bl	801f99c <st_go_idle>
            if (st.exec_block->dynamic_rpm && st.exec_block->spindle->cap.laser)
 801fc88:	4b1d      	ldr	r3, [pc, #116]	@ (801fd00 <stepper_driver_interrupt_handler+0x2dc>)
 801fc8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fc8c:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 801fc90:	b13a      	cbz	r2, 801fca2 <stepper_driver_interrupt_handler+0x27e>
 801fc92:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801fc94:	7a83      	ldrb	r3, [r0, #10]
 801fc96:	f013 0f08 	tst.w	r3, #8
 801fc9a:	d002      	beq.n	801fca2 <stepper_driver_interrupt_handler+0x27e>
                st.exec_block->spindle->update_pwm(st.exec_block->spindle, st.exec_block->spindle->pwm_off_value);
 801fc9c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801fc9e:	6901      	ldr	r1, [r0, #16]
 801fca0:	4798      	blx	r3
            st.exec_block = NULL;
 801fca2:	4b17      	ldr	r3, [pc, #92]	@ (801fd00 <stepper_driver_interrupt_handler+0x2dc>)
 801fca4:	2200      	movs	r2, #0
 801fca6:	629a      	str	r2, [r3, #40]	@ 0x28
            system_set_exec_state_flag(EXEC_CYCLE_COMPLETE); // Flag main program for cycle complete
 801fca8:	4b16      	ldr	r3, [pc, #88]	@ (801fd04 <stepper_driver_interrupt_handler+0x2e0>)
 801fcaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fcac:	2104      	movs	r1, #4
 801fcae:	4816      	ldr	r0, [pc, #88]	@ (801fd08 <stepper_driver_interrupt_handler+0x2e4>)
 801fcb0:	4798      	blx	r3
            return; // Nothing to do but exit.
 801fcb2:	e734      	b.n	801fb1e <stepper_driver_interrupt_handler+0xfa>
    if (sys.probing_state == Probing_Active && hal.probe.get_state().triggered) {
 801fcb4:	4b13      	ldr	r3, [pc, #76]	@ (801fd04 <stepper_driver_interrupt_handler+0x2e0>)
 801fcb6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 801fcba:	4798      	blx	r3
 801fcbc:	f010 0f01 	tst.w	r0, #1
 801fcc0:	f43f aecc 	beq.w	801fa5c <stepper_driver_interrupt_handler+0x38>
        sys.probing_state = Probing_Off;
 801fcc4:	4b11      	ldr	r3, [pc, #68]	@ (801fd0c <stepper_driver_interrupt_handler+0x2e8>)
 801fcc6:	2200      	movs	r2, #0
 801fcc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        memcpy(sys.probe_position, sys.position, sizeof(sys.position));
 801fccc:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 801fcd0:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 801fcd4:	ca07      	ldmia	r2, {r0, r1, r2}
 801fcd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        bit_true(sys.rt_exec_state, EXEC_MOTION_CANCEL);
 801fcda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801fcdc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801fce0:	649a      	str	r2, [r3, #72]	@ 0x48
 801fce2:	e6bb      	b.n	801fa5c <stepper_driver_interrupt_handler+0x38>
            sys.position[X_AXIS] = sys.position[X_AXIS] + (st.dir_outbits.x ? -1 : 1);
 801fce4:	2001      	movs	r0, #1
 801fce6:	e6d2      	b.n	801fa8e <stepper_driver_interrupt_handler+0x6a>
            sys.position[Y_AXIS] = sys.position[Y_AXIS] + (st.dir_outbits.y ? -1 : 1);
 801fce8:	2001      	movs	r0, #1
 801fcea:	e6e9      	b.n	801fac0 <stepper_driver_interrupt_handler+0x9c>
            sys.position[Z_AXIS] = sys.position[Z_AXIS] + (st.dir_outbits.z ? -1 : 1);
 801fcec:	2201      	movs	r2, #1
 801fcee:	e700      	b.n	801faf2 <stepper_driver_interrupt_handler+0xce>
        st.step_outbits.value &= sys.homing_axis_lock.mask;
 801fcf0:	4a03      	ldr	r2, [pc, #12]	@ (801fd00 <stepper_driver_interrupt_handler+0x2dc>)
 801fcf2:	7b93      	ldrb	r3, [r2, #14]
 801fcf4:	4905      	ldr	r1, [pc, #20]	@ (801fd0c <stepper_driver_interrupt_handler+0x2e8>)
 801fcf6:	7e49      	ldrb	r1, [r1, #25]
 801fcf8:	400b      	ands	r3, r1
 801fcfa:	7393      	strb	r3, [r2, #14]
 801fcfc:	e704      	b.n	801fb08 <stepper_driver_interrupt_handler+0xe4>
 801fcfe:	bf00      	nop
 801fd00:	200027f4 	.word	0x200027f4
 801fd04:	20001a90 	.word	0x20001a90
 801fd08:	20001db8 	.word	0x20001db8
 801fd0c:	20001d70 	.word	0x20001d70

0801fd10 <st_reset>:

//! \endcond

// Reset and clear stepper subsystem variables
void st_reset (void)
{
 801fd10:	b510      	push	{r4, lr}
    if(hal.probe.configure)
 801fd12:	4b35      	ldr	r3, [pc, #212]	@ (801fde8 <st_reset+0xd8>)
 801fd14:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801fd18:	b113      	cbz	r3, 801fd20 <st_reset+0x10>
        hal.probe.configure(false, false);
 801fd1a:	2100      	movs	r1, #0
 801fd1c:	4608      	mov	r0, r1
 801fd1e:	4798      	blx	r3

    // Initialize stepper driver idle state, clear step and direction port pins.
    st_go_idle();
 801fd20:	f7ff fe3c 	bl	801f99c <st_go_idle>

    // NOTE: buffer indices starts from 1 for simpler driver coding!

    // Set up stepper block ringbuffer as circular linked list and add id
    uint_fast8_t idx, idx_max = (sizeof(st_block_buffer) / sizeof(st_block_t)) - 1;
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801fd24:	2300      	movs	r3, #0
 801fd26:	e010      	b.n	801fd4a <st_reset+0x3a>
        st_block_buffer[idx].next = &st_block_buffer[idx == idx_max ? 0 : idx + 1];
 801fd28:	2200      	movs	r2, #0
 801fd2a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801fd2e:	00d1      	lsls	r1, r2, #3
 801fd30:	482e      	ldr	r0, [pc, #184]	@ (801fdec <st_reset+0xdc>)
 801fd32:	4401      	add	r1, r0
 801fd34:	ebc3 0cc3 	rsb	ip, r3, r3, lsl #3
 801fd38:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801fd3c:	4402      	add	r2, r0
 801fd3e:	6051      	str	r1, [r2, #4]
        st_block_buffer[idx].id = idx + 1;
 801fd40:	1c5a      	adds	r2, r3, #1
 801fd42:	4663      	mov	r3, ip
 801fd44:	00d9      	lsls	r1, r3, #3
 801fd46:	5042      	str	r2, [r0, r1]
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801fd48:	4613      	mov	r3, r2
 801fd4a:	2b08      	cmp	r3, #8
 801fd4c:	d803      	bhi.n	801fd56 <st_reset+0x46>
        st_block_buffer[idx].next = &st_block_buffer[idx == idx_max ? 0 : idx + 1];
 801fd4e:	2b08      	cmp	r3, #8
 801fd50:	d0ea      	beq.n	801fd28 <st_reset+0x18>
 801fd52:	1c5a      	adds	r2, r3, #1
 801fd54:	e7e9      	b.n	801fd2a <st_reset+0x1a>
    }

    // Set up segments ringbuffer as circular linked list, add id and clear AMASS level
    idx_max = (sizeof(segment_buffer) / sizeof(segment_t)) - 1;
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801fd56:	2300      	movs	r3, #0
 801fd58:	e00f      	b.n	801fd7a <st_reset+0x6a>
        segment_buffer[idx].next = &segment_buffer[idx == idx_max ? 0 : idx + 1];
 801fd5a:	2000      	movs	r0, #0
 801fd5c:	2234      	movs	r2, #52	@ 0x34
 801fd5e:	4924      	ldr	r1, [pc, #144]	@ (801fdf0 <st_reset+0xe0>)
 801fd60:	fb02 1000 	mla	r0, r2, r0, r1
 801fd64:	fb03 f202 	mul.w	r2, r3, r2
 801fd68:	eb01 0c02 	add.w	ip, r1, r2
 801fd6c:	f8cc 0004 	str.w	r0, [ip, #4]
        segment_buffer[idx].id = idx + 1;
 801fd70:	3301      	adds	r3, #1
 801fd72:	508b      	str	r3, [r1, r2]
        segment_buffer[idx].amass_level = 0;
 801fd74:	2200      	movs	r2, #0
 801fd76:	f8cc 2028 	str.w	r2, [ip, #40]	@ 0x28
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801fd7a:	2b09      	cmp	r3, #9
 801fd7c:	d803      	bhi.n	801fd86 <st_reset+0x76>
        segment_buffer[idx].next = &segment_buffer[idx == idx_max ? 0 : idx + 1];
 801fd7e:	2b09      	cmp	r3, #9
 801fd80:	d0eb      	beq.n	801fd5a <st_reset+0x4a>
 801fd82:	1c58      	adds	r0, r3, #1
 801fd84:	e7ea      	b.n	801fd5c <st_reset+0x4c>
    }

    st_prep_block = &st_block_buffer[0];
 801fd86:	4b1b      	ldr	r3, [pc, #108]	@ (801fdf4 <st_reset+0xe4>)
 801fd88:	4a18      	ldr	r2, [pc, #96]	@ (801fdec <st_reset+0xdc>)
 801fd8a:	601a      	str	r2, [r3, #0]

    // Initialize stepper algorithm variables.
    pl_block = NULL;  // Planner block pointer used by segment buffer
 801fd8c:	2400      	movs	r4, #0
 801fd8e:	4b1a      	ldr	r3, [pc, #104]	@ (801fdf8 <st_reset+0xe8>)
 801fd90:	601c      	str	r4, [r3, #0]
    segment_buffer_tail = segment_buffer_head = &segment_buffer[0]; // empty = tail
 801fd92:	4b17      	ldr	r3, [pc, #92]	@ (801fdf0 <st_reset+0xe0>)
 801fd94:	4a19      	ldr	r2, [pc, #100]	@ (801fdfc <st_reset+0xec>)
 801fd96:	6013      	str	r3, [r2, #0]
 801fd98:	4a19      	ldr	r2, [pc, #100]	@ (801fe00 <st_reset+0xf0>)
 801fd9a:	6013      	str	r3, [r2, #0]
    segment_next_head = segment_buffer_head->next;
 801fd9c:	685a      	ldr	r2, [r3, #4]
 801fd9e:	4b19      	ldr	r3, [pc, #100]	@ (801fe04 <st_reset+0xf4>)
 801fda0:	601a      	str	r2, [r3, #0]

    memset(&prep, 0, sizeof(st_prep_t));
 801fda2:	2250      	movs	r2, #80	@ 0x50
 801fda4:	4621      	mov	r1, r4
 801fda6:	4818      	ldr	r0, [pc, #96]	@ (801fe08 <st_reset+0xf8>)
 801fda8:	f004 ffc1 	bl	8024d2e <memset>
    memset(&st, 0, sizeof(stepper_t));
 801fdac:	2230      	movs	r2, #48	@ 0x30
 801fdae:	4621      	mov	r1, r4
 801fdb0:	4816      	ldr	r0, [pc, #88]	@ (801fe0c <st_reset+0xfc>)
 801fdb2:	f004 ffbc 	bl	8024d2e <memset>

#ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    // TODO: move to driver?
    // AMASS_LEVEL0: Normal operation. No AMASS. No upper cutoff frequency. Starts at LEVEL1 cutoff frequency.
    // Defined as step timer frequency / Cutoff frequency in Hz
    amass.level_1 = hal.f_step_timer / 8000;
 801fdb6:	4b0c      	ldr	r3, [pc, #48]	@ (801fde8 <st_reset+0xd8>)
 801fdb8:	69da      	ldr	r2, [r3, #28]
 801fdba:	4b15      	ldr	r3, [pc, #84]	@ (801fe10 <st_reset+0x100>)
 801fdbc:	fba3 1302 	umull	r1, r3, r3, r2
 801fdc0:	0a58      	lsrs	r0, r3, #9
 801fdc2:	4914      	ldr	r1, [pc, #80]	@ (801fe14 <st_reset+0x104>)
 801fdc4:	6008      	str	r0, [r1, #0]
    amass.level_2 = hal.f_step_timer / 4000;
 801fdc6:	0a18      	lsrs	r0, r3, #8
 801fdc8:	6048      	str	r0, [r1, #4]
    amass.level_3 = hal.f_step_timer / 2000;
 801fdca:	09db      	lsrs	r3, r3, #7
 801fdcc:	608b      	str	r3, [r1, #8]
#endif

    cycles_per_min = (float)hal.f_step_timer * 60.0f;
 801fdce:	ee07 2a90 	vmov	s15, r2
 801fdd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801fdd6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 801fe18 <st_reset+0x108>
 801fdda:	ee67 7a87 	vmul.f32	s15, s15, s14
 801fdde:	4b0f      	ldr	r3, [pc, #60]	@ (801fe1c <st_reset+0x10c>)
 801fde0:	edc3 7a00 	vstr	s15, [r3]
}
 801fde4:	bd10      	pop	{r4, pc}
 801fde6:	bf00      	nop
 801fde8:	20001a90 	.word	0x20001a90
 801fdec:	20002a2c 	.word	0x20002a2c
 801fdf0:	20002824 	.word	0x20002824
 801fdf4:	200027cc 	.word	0x200027cc
 801fdf8:	200027d0 	.word	0x200027d0
 801fdfc:	200027d8 	.word	0x200027d8
 801fe00:	200027dc 	.word	0x200027dc
 801fe04:	200027d4 	.word	0x200027d4
 801fe08:	20002744 	.word	0x20002744
 801fe0c:	200027f4 	.word	0x200027f4
 801fe10:	10624dd3 	.word	0x10624dd3
 801fe14:	200027e8 	.word	0x200027e8
 801fe18:	42700000 	.word	0x42700000
 801fe1c:	200027e0 	.word	0x200027e0

0801fe20 <st_rpm_changed>:

// Called by spindle_set_state() to inform about RPM changes.
// Used by st_prep_buffer() to determine if spindle needs update when dynamic RPM is called for.
void st_rpm_changed (float rpm)
{
    prep.current_spindle_rpm = rpm;
 801fe20:	4b01      	ldr	r3, [pc, #4]	@ (801fe28 <st_rpm_changed+0x8>)
 801fe22:	ed83 0a13 	vstr	s0, [r3, #76]	@ 0x4c
}
 801fe26:	4770      	bx	lr
 801fe28:	20002744 	.word	0x20002744

0801fe2c <st_update_plan_block_parameters>:

// Called by planner_recalculate() when the executing block is updated by the new plan.
void st_update_plan_block_parameters (void)
{
    if (pl_block != NULL) { // Ignore if at start of a new block.
 801fe2c:	4b08      	ldr	r3, [pc, #32]	@ (801fe50 <st_update_plan_block_parameters+0x24>)
 801fe2e:	6819      	ldr	r1, [r3, #0]
 801fe30:	b169      	cbz	r1, 801fe4e <st_update_plan_block_parameters+0x22>
        prep.recalculate.velocity_profile = On;
 801fe32:	4b08      	ldr	r3, [pc, #32]	@ (801fe54 <st_update_plan_block_parameters+0x28>)
 801fe34:	781a      	ldrb	r2, [r3, #0]
 801fe36:	f042 0201 	orr.w	r2, r2, #1
 801fe3a:	701a      	strb	r2, [r3, #0]
        pl_block->entry_speed_sqr = prep.current_speed * prep.current_speed; // Update entry speed.
 801fe3c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801fe40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801fe44:	edc1 7a07 	vstr	s15, [r1, #28]
        pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 801fe48:	4b01      	ldr	r3, [pc, #4]	@ (801fe50 <st_update_plan_block_parameters+0x24>)
 801fe4a:	2200      	movs	r2, #0
 801fe4c:	601a      	str	r2, [r3, #0]
    }
}
 801fe4e:	4770      	bx	lr
 801fe50:	200027d0 	.word	0x200027d0
 801fe54:	20002744 	.word	0x20002744

0801fe58 <st_parking_setup_buffer>:

// Changes the run state of the step segment buffer to execute the special parking motion.
void st_parking_setup_buffer (void)
{
 801fe58:	b530      	push	{r4, r5, lr}
    // Store step execution data of partially completed block, if necessary.
    if (prep.recalculate.hold_partial_block && !prep.recalculate.parking) {
 801fe5a:	4b1b      	ldr	r3, [pc, #108]	@ (801fec8 <st_parking_setup_buffer+0x70>)
 801fe5c:	781b      	ldrb	r3, [r3, #0]
 801fe5e:	f003 0306 	and.w	r3, r3, #6
 801fe62:	2b02      	cmp	r3, #2
 801fe64:	d00c      	beq.n	801fe80 <st_parking_setup_buffer+0x28>
        prep.last_steps_remaining = prep.steps_remaining;
        prep.last_dt_remainder = prep.dt_remainder;
        prep.last_steps_per_mm = prep.steps_per_mm;
    }
    // Set flags to execute a parking motion
    prep.recalculate.parking = On;
 801fe66:	4b18      	ldr	r3, [pc, #96]	@ (801fec8 <st_parking_setup_buffer+0x70>)
 801fe68:	781a      	ldrb	r2, [r3, #0]
 801fe6a:	f042 0204 	orr.w	r2, r2, #4
 801fe6e:	701a      	strb	r2, [r3, #0]
    prep.recalculate.velocity_profile = Off;
 801fe70:	b2d2      	uxtb	r2, r2
 801fe72:	f36f 0200 	bfc	r2, #0, #1
 801fe76:	701a      	strb	r2, [r3, #0]
    pl_block = NULL; // Always reset parking motion to reload new block.
 801fe78:	4b14      	ldr	r3, [pc, #80]	@ (801fecc <st_parking_setup_buffer+0x74>)
 801fe7a:	2200      	movs	r2, #0
 801fe7c:	601a      	str	r2, [r3, #0]
}
 801fe7e:	bd30      	pop	{r4, r5, pc}
        prep.last_st_block = st_prep_block;
 801fe80:	4b13      	ldr	r3, [pc, #76]	@ (801fed0 <st_parking_setup_buffer+0x78>)
 801fe82:	681d      	ldr	r5, [r3, #0]
 801fe84:	4b10      	ldr	r3, [pc, #64]	@ (801fec8 <st_parking_setup_buffer+0x70>)
 801fe86:	615d      	str	r5, [r3, #20]
        memcpy(&st_hold_block, st_prep_block, sizeof(st_block_t));
 801fe88:	46ac      	mov	ip, r5
 801fe8a:	4c12      	ldr	r4, [pc, #72]	@ (801fed4 <st_parking_setup_buffer+0x7c>)
 801fe8c:	3530      	adds	r5, #48	@ 0x30
 801fe8e:	46a6      	mov	lr, r4
 801fe90:	f8dc 0000 	ldr.w	r0, [ip]
 801fe94:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801fe98:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801fe9c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 801fea0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801fea4:	f10c 0c10 	add.w	ip, ip, #16
 801fea8:	4674      	mov	r4, lr
 801feaa:	45ac      	cmp	ip, r5
 801feac:	d1ef      	bne.n	801fe8e <st_parking_setup_buffer+0x36>
 801feae:	f8dc 0000 	ldr.w	r0, [ip]
 801feb2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801feb6:	c403      	stmia	r4!, {r0, r1}
        prep.last_steps_remaining = prep.steps_remaining;
 801feb8:	4b03      	ldr	r3, [pc, #12]	@ (801fec8 <st_parking_setup_buffer+0x70>)
 801feba:	689a      	ldr	r2, [r3, #8]
 801febc:	619a      	str	r2, [r3, #24]
        prep.last_dt_remainder = prep.dt_remainder;
 801febe:	685a      	ldr	r2, [r3, #4]
 801fec0:	621a      	str	r2, [r3, #32]
        prep.last_steps_per_mm = prep.steps_per_mm;
 801fec2:	68da      	ldr	r2, [r3, #12]
 801fec4:	61da      	str	r2, [r3, #28]
 801fec6:	e7ce      	b.n	801fe66 <st_parking_setup_buffer+0xe>
 801fec8:	20002744 	.word	0x20002744
 801fecc:	200027d0 	.word	0x200027d0
 801fed0:	200027cc 	.word	0x200027cc
 801fed4:	20002794 	.word	0x20002794

0801fed8 <st_parking_restore_buffer>:

// Restores the step segment buffer to the normal run state after a parking motion.
void st_parking_restore_buffer (void)
{
    // Restore step execution data and flags of partially completed block, if necessary.
    if (prep.recalculate.hold_partial_block) {
 801fed8:	4b1e      	ldr	r3, [pc, #120]	@ (801ff54 <st_parking_restore_buffer+0x7c>)
 801feda:	781b      	ldrb	r3, [r3, #0]
 801fedc:	f013 0f02 	tst.w	r3, #2
 801fee0:	d106      	bne.n	801fef0 <st_parking_restore_buffer+0x18>
        prep.steps_per_mm = prep.last_steps_per_mm;
        prep.recalculate.flags = 0;
        prep.recalculate.hold_partial_block = prep.recalculate.velocity_profile = On;
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR / prep.steps_per_mm; // Recompute this value.
    } else
        prep.recalculate.flags = 0;
 801fee2:	4b1c      	ldr	r3, [pc, #112]	@ (801ff54 <st_parking_restore_buffer+0x7c>)
 801fee4:	2200      	movs	r2, #0
 801fee6:	701a      	strb	r2, [r3, #0]

    pl_block = NULL; // Set to reload next block.
 801fee8:	4b1b      	ldr	r3, [pc, #108]	@ (801ff58 <st_parking_restore_buffer+0x80>)
 801feea:	2200      	movs	r2, #0
 801feec:	601a      	str	r2, [r3, #0]
 801feee:	4770      	bx	lr
{
 801fef0:	b530      	push	{r4, r5, lr}
        memcpy(prep.last_st_block, &st_hold_block, sizeof(st_block_t));
 801fef2:	4d1a      	ldr	r5, [pc, #104]	@ (801ff5c <st_parking_restore_buffer+0x84>)
 801fef4:	4b17      	ldr	r3, [pc, #92]	@ (801ff54 <st_parking_restore_buffer+0x7c>)
 801fef6:	695c      	ldr	r4, [r3, #20]
 801fef8:	f105 0e30 	add.w	lr, r5, #48	@ 0x30
 801fefc:	46ac      	mov	ip, r5
 801fefe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ff02:	6020      	str	r0, [r4, #0]
 801ff04:	6061      	str	r1, [r4, #4]
 801ff06:	60a2      	str	r2, [r4, #8]
 801ff08:	60e3      	str	r3, [r4, #12]
 801ff0a:	4665      	mov	r5, ip
 801ff0c:	3410      	adds	r4, #16
 801ff0e:	45f4      	cmp	ip, lr
 801ff10:	d1f4      	bne.n	801fefc <st_parking_restore_buffer+0x24>
 801ff12:	cd03      	ldmia	r5!, {r0, r1}
 801ff14:	6020      	str	r0, [r4, #0]
 801ff16:	6061      	str	r1, [r4, #4]
        st_prep_block = prep.last_st_block;
 801ff18:	4b0e      	ldr	r3, [pc, #56]	@ (801ff54 <st_parking_restore_buffer+0x7c>)
 801ff1a:	6959      	ldr	r1, [r3, #20]
 801ff1c:	4a10      	ldr	r2, [pc, #64]	@ (801ff60 <st_parking_restore_buffer+0x88>)
 801ff1e:	6011      	str	r1, [r2, #0]
        prep.steps_remaining = prep.last_steps_remaining;
 801ff20:	699a      	ldr	r2, [r3, #24]
 801ff22:	609a      	str	r2, [r3, #8]
        prep.dt_remainder = prep.last_dt_remainder;
 801ff24:	6a1a      	ldr	r2, [r3, #32]
 801ff26:	605a      	str	r2, [r3, #4]
        prep.steps_per_mm = prep.last_steps_per_mm;
 801ff28:	edd3 7a07 	vldr	s15, [r3, #28]
 801ff2c:	edc3 7a03 	vstr	s15, [r3, #12]
        prep.recalculate.flags = 0;
 801ff30:	2200      	movs	r2, #0
 801ff32:	701a      	strb	r2, [r3, #0]
        prep.recalculate.hold_partial_block = prep.recalculate.velocity_profile = On;
 801ff34:	2201      	movs	r2, #1
 801ff36:	701a      	strb	r2, [r3, #0]
 801ff38:	b2d2      	uxtb	r2, r2
 801ff3a:	f042 0202 	orr.w	r2, r2, #2
 801ff3e:	701a      	strb	r2, [r3, #0]
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR / prep.steps_per_mm; // Recompute this value.
 801ff40:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 801ff44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ff48:	ed83 7a04 	vstr	s14, [r3, #16]
    pl_block = NULL; // Set to reload next block.
 801ff4c:	4b02      	ldr	r3, [pc, #8]	@ (801ff58 <st_parking_restore_buffer+0x80>)
 801ff4e:	2200      	movs	r2, #0
 801ff50:	601a      	str	r2, [r3, #0]
}
 801ff52:	bd30      	pop	{r4, r5, pc}
 801ff54:	20002744 	.word	0x20002744
 801ff58:	200027d0 	.word	0x200027d0
 801ff5c:	20002794 	.word	0x20002794
 801ff60:	200027cc 	.word	0x200027cc

0801ff64 <st_prep_buffer>:
   NOTE: Computation units are in steps, millimeters, and minutes.
*/
void st_prep_buffer (void)
{
    // Block step prep buffer, while in a suspend state and there is no suspend motion to execute.
    if (sys.step_control.end_motion)
 801ff64:	4bba      	ldr	r3, [pc, #744]	@ (8020250 <st_prep_buffer+0x2ec>)
 801ff66:	7e1b      	ldrb	r3, [r3, #24]
 801ff68:	f013 0f01 	tst.w	r3, #1
 801ff6c:	d103      	bne.n	801ff76 <st_prep_buffer+0x12>
{
 801ff6e:	b570      	push	{r4, r5, r6, lr}
 801ff70:	ed2d 8b04 	vpush	{d8-d9}
 801ff74:	e39a      	b.n	80206ac <st_prep_buffer+0x748>
 801ff76:	4770      	bx	lr
        // Determine if we need to load a new planner block or if the block needs to be recomputed.
        if (pl_block == NULL) {

            // Query planner for a queued block

            pl_block = sys.step_control.execute_sys_motion ? plan_get_system_motion_block() : plan_get_current_block();
 801ff78:	4bb5      	ldr	r3, [pc, #724]	@ (8020250 <st_prep_buffer+0x2ec>)
 801ff7a:	7e1b      	ldrb	r3, [r3, #24]
 801ff7c:	f013 0f04 	tst.w	r3, #4
 801ff80:	d01b      	beq.n	801ffba <st_prep_buffer+0x56>
 801ff82:	f7f6 fca7 	bl	80168d4 <plan_get_system_motion_block>
 801ff86:	4604      	mov	r4, r0
 801ff88:	4bb2      	ldr	r3, [pc, #712]	@ (8020254 <st_prep_buffer+0x2f0>)
 801ff8a:	601c      	str	r4, [r3, #0]

            if (pl_block == NULL)
 801ff8c:	2c00      	cmp	r4, #0
 801ff8e:	f000 83d4 	beq.w	802073a <st_prep_buffer+0x7d6>
                return; // No planner blocks. Exit.

            // Check if we need to only recompute the velocity profile or load a new block.
            if (prep.recalculate.velocity_profile) {
 801ff92:	4bb1      	ldr	r3, [pc, #708]	@ (8020258 <st_prep_buffer+0x2f4>)
 801ff94:	7819      	ldrb	r1, [r3, #0]
 801ff96:	f011 0f01 	tst.w	r1, #1
 801ff9a:	d060      	beq.n	802005e <st_prep_buffer+0xfa>
                if(settings.parking.flags.enabled) {
 801ff9c:	4baf      	ldr	r3, [pc, #700]	@ (802025c <st_prep_buffer+0x2f8>)
 801ff9e:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801ffa2:	f013 0f01 	tst.w	r3, #1
 801ffa6:	d010      	beq.n	801ffca <st_prep_buffer+0x66>
                    if (prep.recalculate.parking)
 801ffa8:	f011 0f04 	tst.w	r1, #4
 801ffac:	d009      	beq.n	801ffc2 <st_prep_buffer+0x5e>
                        prep.recalculate.velocity_profile = Off;
 801ffae:	4baa      	ldr	r3, [pc, #680]	@ (8020258 <st_prep_buffer+0x2f4>)
 801ffb0:	781a      	ldrb	r2, [r3, #0]
 801ffb2:	f36f 0200 	bfc	r2, #0, #1
 801ffb6:	701a      	strb	r2, [r3, #0]
 801ffb8:	e00a      	b.n	801ffd0 <st_prep_buffer+0x6c>
            pl_block = sys.step_control.execute_sys_motion ? plan_get_system_motion_block() : plan_get_current_block();
 801ffba:	f7f6 fc91 	bl	80168e0 <plan_get_current_block>
 801ffbe:	4604      	mov	r4, r0
 801ffc0:	e7e2      	b.n	801ff88 <st_prep_buffer+0x24>
                    else
                        prep.recalculate.flags = 0;
 801ffc2:	4ba5      	ldr	r3, [pc, #660]	@ (8020258 <st_prep_buffer+0x2f4>)
 801ffc4:	2200      	movs	r2, #0
 801ffc6:	701a      	strb	r2, [r3, #0]
 801ffc8:	e002      	b.n	801ffd0 <st_prep_buffer+0x6c>
                } else
                    prep.recalculate.flags = 0;
 801ffca:	4ba3      	ldr	r3, [pc, #652]	@ (8020258 <st_prep_buffer+0x2f4>)
 801ffcc:	2200      	movs	r2, #0
 801ffce:	701a      	strb	r2, [r3, #0]
             Compute the velocity profile of a new planner block based on its entry and exit
             speeds, or recompute the profile of a partially-completed planner block if the
             planner has updated it. For a commanded forced-deceleration, such as from a feed
             hold, override the planner velocities and decelerate to the target exit speed.
            */
            prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 801ffd0:	4ba1      	ldr	r3, [pc, #644]	@ (8020258 <st_prep_buffer+0x2f4>)
 801ffd2:	2200      	movs	r2, #0
 801ffd4:	629a      	str	r2, [r3, #40]	@ 0x28
            float inv_2_accel = 0.5f / pl_block->acceleration;
 801ffd6:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 801ffda:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801ffde:	ee87 8a27 	vdiv.f32	s16, s14, s15

            if (sys.step_control.execute_hold) { // [Forced Deceleration to Zero Velocity]
 801ffe2:	4b9b      	ldr	r3, [pc, #620]	@ (8020250 <st_prep_buffer+0x2ec>)
 801ffe4:	7e1b      	ldrb	r3, [r3, #24]
 801ffe6:	f013 0f02 	tst.w	r3, #2
 801ffea:	f000 80c6 	beq.w	802017a <st_prep_buffer+0x216>
                // Compute velocity profile parameters for a feed hold in-progress. This profile overrides
                // the planner block profile, enforcing a deceleration to zero speed.
                prep.ramp_type = Ramp_Decel;
 801ffee:	4b9a      	ldr	r3, [pc, #616]	@ (8020258 <st_prep_buffer+0x2f4>)
 801fff0:	2202      	movs	r2, #2
 801fff2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                // Compute decelerate distance relative to end of block.
                float decel_dist = pl_block->millimeters - inv_2_accel * pl_block->entry_speed_sqr;
 801fff6:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801fffa:	ed94 0a07 	vldr	s0, [r4, #28]
 801fffe:	ee60 7a08 	vmul.f32	s15, s0, s16
 8020002:	ee77 7a67 	vsub.f32	s15, s14, s15
                if(decel_dist < -0.0001f) {
 8020006:	eddf 6a96 	vldr	s13, [pc, #600]	@ 8020260 <st_prep_buffer+0x2fc>
 802000a:	eef4 7ae6 	vcmpe.f32	s15, s13
 802000e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020012:	f100 80a4 	bmi.w	802015e <st_prep_buffer+0x1fa>
                    // Deceleration through entire planner block. End of feed hold is not in this block.
                    prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2.0f * pl_block->acceleration * pl_block->millimeters);
                } else {
                    prep.mm_complete = decel_dist < 0.0001f ? 0.0f : decel_dist; // End of feed hold.
 8020016:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8020264 <st_prep_buffer+0x300>
 802001a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802001e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020022:	d501      	bpl.n	8020028 <st_prep_buffer+0xc4>
 8020024:	eddf 7a90 	vldr	s15, [pc, #576]	@ 8020268 <st_prep_buffer+0x304>
 8020028:	4b8b      	ldr	r3, [pc, #556]	@ (8020258 <st_prep_buffer+0x2f4>)
 802002a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
                    prep.exit_speed = 0.0f;
 802002e:	2200      	movs	r2, #0
 8020030:	635a      	str	r2, [r3, #52]	@ 0x34
                    // prep.decelerate_after = 0.0f;
                    prep.maximum_speed = prep.exit_speed;
                }
            }

            if(state_get() != STATE_HOMING)
 8020032:	f7fe ff89 	bl	801ef48 <state_get>
 8020036:	2804      	cmp	r0, #4
 8020038:	d00d      	beq.n	8020056 <st_prep_buffer+0xf2>
                sys.step_control.update_spindle_rpm |= pl_block->spindle.hal->cap.laser; // Force update whenever updating block in laser mode.
 802003a:	4885      	ldr	r0, [pc, #532]	@ (8020250 <st_prep_buffer+0x2ec>)
 802003c:	7e03      	ldrb	r3, [r0, #24]
 802003e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8020042:	4984      	ldr	r1, [pc, #528]	@ (8020254 <st_prep_buffer+0x2f0>)
 8020044:	6809      	ldr	r1, [r1, #0]
 8020046:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8020048:	7a89      	ldrb	r1, [r1, #10]
 802004a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 802004e:	430a      	orrs	r2, r1
 8020050:	f362 03c3 	bfi	r3, r2, #3, #1
 8020054:	7603      	strb	r3, [r0, #24]

            probe_asserted = false;
 8020056:	4b85      	ldr	r3, [pc, #532]	@ (802026c <st_prep_buffer+0x308>)
 8020058:	2200      	movs	r2, #0
 802005a:	701a      	strb	r2, [r3, #0]
 802005c:	e331      	b.n	80206c2 <st_prep_buffer+0x75e>
                st_prep_block = st_prep_block->next;
 802005e:	4b84      	ldr	r3, [pc, #528]	@ (8020270 <st_prep_buffer+0x30c>)
 8020060:	681a      	ldr	r2, [r3, #0]
 8020062:	6855      	ldr	r5, [r2, #4]
 8020064:	601d      	str	r5, [r3, #0]
                uint_fast8_t idx = N_AXIS;
 8020066:	2303      	movs	r3, #3
                    idx--;
 8020068:	3b01      	subs	r3, #1
                    st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL;
 802006a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 802006e:	00d2      	lsls	r2, r2, #3
 8020070:	1c98      	adds	r0, r3, #2
 8020072:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
                } while(idx);
 8020076:	2b00      	cmp	r3, #0
 8020078:	d1f6      	bne.n	8020068 <st_prep_buffer+0x104>
                st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 802007a:	68e3      	ldr	r3, [r4, #12]
 802007c:	00db      	lsls	r3, r3, #3
 802007e:	616b      	str	r3, [r5, #20]
                st_prep_block->direction_bits = pl_block->direction_bits;
 8020080:	7c23      	ldrb	r3, [r4, #16]
 8020082:	762b      	strb	r3, [r5, #24]
                st_prep_block->programmed_rate = pl_block->programmed_rate;
 8020084:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020086:	626b      	str	r3, [r5, #36]	@ 0x24
                st_prep_block->millimeters = pl_block->millimeters;
 8020088:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 802008c:	ed85 7a08 	vstr	s14, [r5, #32]
                st_prep_block->steps_per_mm = (float)pl_block->step_event_count / pl_block->millimeters;
 8020090:	edd4 7a03 	vldr	s15, [r4, #12]
 8020094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020098:	eec7 6a87 	vdiv.f32	s13, s15, s14
 802009c:	edc5 6a07 	vstr	s13, [r5, #28]
                st_prep_block->spindle = pl_block->spindle.hal;
 80200a0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80200a2:	636b      	str	r3, [r5, #52]	@ 0x34
                st_prep_block->output_commands = pl_block->output_commands;
 80200a4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80200a6:	62eb      	str	r3, [r5, #44]	@ 0x2c
                st_prep_block->overrides = pl_block->overrides;
 80200a8:	7ca3      	ldrb	r3, [r4, #18]
 80200aa:	766b      	strb	r3, [r5, #25]
                st_prep_block->offset_id = pl_block->offset_id;
 80200ac:	f994 3011 	ldrsb.w	r3, [r4, #17]
 80200b0:	f885 3032 	strb.w	r3, [r5, #50]	@ 0x32
                st_prep_block->backlash_motion = pl_block->condition.backlash_motion;
 80200b4:	7d23      	ldrb	r3, [r4, #20]
 80200b6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80200ba:	f885 3030 	strb.w	r3, [r5, #48]	@ 0x30
                st_prep_block->message = pl_block->message;
 80200be:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80200c0:	62ab      	str	r3, [r5, #40]	@ 0x28
                pl_block->message = NULL;
 80200c2:	2300      	movs	r3, #0
 80200c4:	64a3      	str	r3, [r4, #72]	@ 0x48
                prep.steps_per_mm = st_prep_block->steps_per_mm;
 80200c6:	edd5 7a07 	vldr	s15, [r5, #28]
 80200ca:	4b63      	ldr	r3, [pc, #396]	@ (8020258 <st_prep_buffer+0x2f4>)
 80200cc:	edc3 7a03 	vstr	s15, [r3, #12]
                prep.steps_remaining = pl_block->step_event_count;
 80200d0:	68e2      	ldr	r2, [r4, #12]
 80200d2:	609a      	str	r2, [r3, #8]
                prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR / prep.steps_per_mm;
 80200d4:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 80200d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80200dc:	ed83 7a04 	vstr	s14, [r3, #16]
                prep.dt_remainder = prep.target_position = 0.0f; // Reset for new segment block
 80200e0:	2200      	movs	r2, #0
 80200e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80200e4:	605a      	str	r2, [r3, #4]
                if (sys.step_control.execute_hold || prep.recalculate.decel_override) {
 80200e6:	4b5a      	ldr	r3, [pc, #360]	@ (8020250 <st_prep_buffer+0x2ec>)
 80200e8:	7e1b      	ldrb	r3, [r3, #24]
 80200ea:	f013 0f02 	tst.w	r3, #2
 80200ee:	d102      	bne.n	80200f6 <st_prep_buffer+0x192>
 80200f0:	f011 0f08 	tst.w	r1, #8
 80200f4:	d021      	beq.n	802013a <st_prep_buffer+0x1d6>
                    prep.current_speed = prep.exit_speed;
 80200f6:	4b58      	ldr	r3, [pc, #352]	@ (8020258 <st_prep_buffer+0x2f4>)
 80200f8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80200fc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
                    pl_block->entry_speed_sqr = prep.exit_speed * prep.exit_speed;
 8020100:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8020104:	edc4 7a07 	vstr	s15, [r4, #28]
                    prep.recalculate.decel_override = Off;
 8020108:	781a      	ldrb	r2, [r3, #0]
 802010a:	f36f 02c3 	bfc	r2, #3, #1
 802010e:	701a      	strb	r2, [r3, #0]
                if ((st_prep_block->dynamic_rpm = pl_block->condition.is_rpm_rate_adjusted)) {
 8020110:	7d23      	ldrb	r3, [r4, #20]
 8020112:	f3c3 12c0 	ubfx	r2, r3, #7, #1
 8020116:	f885 2031 	strb.w	r2, [r5, #49]	@ 0x31
 802011a:	09db      	lsrs	r3, r3, #7
 802011c:	d018      	beq.n	8020150 <st_prep_buffer+0x1ec>
                    prep.inv_feedrate = pl_block->condition.is_laser_ppi_mode ? 1.0f : 1.0f / pl_block->programmed_rate;
 802011e:	7d63      	ldrb	r3, [r4, #21]
 8020120:	f013 0f01 	tst.w	r3, #1
 8020124:	d111      	bne.n	802014a <st_prep_buffer+0x1e6>
 8020126:	ed94 7a0d 	vldr	s14, [r4, #52]	@ 0x34
 802012a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802012e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020132:	4b49      	ldr	r3, [pc, #292]	@ (8020258 <st_prep_buffer+0x2f4>)
 8020134:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
 8020138:	e74a      	b.n	801ffd0 <st_prep_buffer+0x6c>
                    prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 802013a:	ed94 0a07 	vldr	s0, [r4, #28]
 802013e:	f007 fb57 	bl	80277f0 <sqrtf>
 8020142:	4b45      	ldr	r3, [pc, #276]	@ (8020258 <st_prep_buffer+0x2f4>)
 8020144:	ed83 0a0b 	vstr	s0, [r3, #44]	@ 0x2c
 8020148:	e7e2      	b.n	8020110 <st_prep_buffer+0x1ac>
                    prep.inv_feedrate = pl_block->condition.is_laser_ppi_mode ? 1.0f : 1.0f / pl_block->programmed_rate;
 802014a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802014e:	e7f0      	b.n	8020132 <st_prep_buffer+0x1ce>
                    st_prep_block->dynamic_rpm = !!pl_block->spindle.css;
 8020150:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020152:	3b00      	subs	r3, #0
 8020154:	bf18      	it	ne
 8020156:	2301      	movne	r3, #1
 8020158:	f885 3031 	strb.w	r3, [r5, #49]	@ 0x31
 802015c:	e738      	b.n	801ffd0 <st_prep_buffer+0x6c>
                    prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2.0f * pl_block->acceleration * pl_block->millimeters);
 802015e:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 8020162:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8020166:	ee27 7a27 	vmul.f32	s14, s14, s15
 802016a:	ee30 0a47 	vsub.f32	s0, s0, s14
 802016e:	f007 fb3f 	bl	80277f0 <sqrtf>
 8020172:	4b39      	ldr	r3, [pc, #228]	@ (8020258 <st_prep_buffer+0x2f4>)
 8020174:	ed83 0a0d 	vstr	s0, [r3, #52]	@ 0x34
 8020178:	e75b      	b.n	8020032 <st_prep_buffer+0xce>
                prep.ramp_type = Ramp_Accel; // Initialize as acceleration ramp.
 802017a:	4a37      	ldr	r2, [pc, #220]	@ (8020258 <st_prep_buffer+0x2f4>)
 802017c:	2100      	movs	r1, #0
 802017e:	f882 1024 	strb.w	r1, [r2, #36]	@ 0x24
                prep.accelerate_until = pl_block->millimeters;
 8020182:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8020184:	6391      	str	r1, [r2, #56]	@ 0x38
                if (sys.step_control.execute_sys_motion)
 8020186:	f013 0f04 	tst.w	r3, #4
 802018a:	d03e      	beq.n	802020a <st_prep_buffer+0x2a6>
                    prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 802018c:	eddf 8a36 	vldr	s17, [pc, #216]	@ 8020268 <st_prep_buffer+0x304>
 8020190:	edc2 8a0d 	vstr	s17, [r2, #52]	@ 0x34
                float nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8020194:	4c2f      	ldr	r4, [pc, #188]	@ (8020254 <st_prep_buffer+0x2f0>)
 8020196:	6820      	ldr	r0, [r4, #0]
 8020198:	f7f6 fbd2 	bl	8016940 <plan_compute_profile_nominal_speed>
                float nominal_speed_sqr = nominal_speed * nominal_speed;
 802019c:	ee60 6a00 	vmul.f32	s13, s0, s0
                float intersect_distance = 0.5f * (pl_block->millimeters + inv_2_accel * (pl_block->entry_speed_sqr - exit_speed_sqr));
 80201a0:	6823      	ldr	r3, [r4, #0]
 80201a2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80201a6:	ed93 7a07 	vldr	s14, [r3, #28]
 80201aa:	ee37 7a68 	vsub.f32	s14, s14, s17
 80201ae:	ee27 7a08 	vmul.f32	s14, s14, s16
 80201b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80201b6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80201ba:	ee67 7a87 	vmul.f32	s15, s15, s14
                prep.target_feed = nominal_speed;
 80201be:	4a26      	ldr	r2, [pc, #152]	@ (8020258 <st_prep_buffer+0x2f4>)
 80201c0:	ed82 0a11 	vstr	s0, [r2, #68]	@ 0x44
                if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 80201c4:	ed93 7a07 	vldr	s14, [r3, #28]
 80201c8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80201cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201d0:	dd50      	ble.n	8020274 <st_prep_buffer+0x310>
                    prep.accelerate_until = pl_block->millimeters - inv_2_accel * (pl_block->entry_speed_sqr - nominal_speed_sqr);
 80201d2:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 80201d6:	ee77 7a66 	vsub.f32	s15, s14, s13
 80201da:	ee67 7a88 	vmul.f32	s15, s15, s16
 80201de:	ee76 7a67 	vsub.f32	s15, s12, s15
 80201e2:	edc2 7a0e 	vstr	s15, [r2, #56]	@ 0x38
                    if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 80201e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80201ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201ee:	d916      	bls.n	802021e <st_prep_buffer+0x2ba>
                        prep.decelerate_after = inv_2_accel * (nominal_speed_sqr - exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 80201f0:	ee76 7ae8 	vsub.f32	s15, s13, s17
 80201f4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80201f8:	4b17      	ldr	r3, [pc, #92]	@ (8020258 <st_prep_buffer+0x2f4>)
 80201fa:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                        prep.maximum_speed = nominal_speed;
 80201fe:	ed83 0a0c 	vstr	s0, [r3, #48]	@ 0x30
                        prep.ramp_type = Ramp_DecelOverride;
 8020202:	2203      	movs	r2, #3
 8020204:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8020208:	e713      	b.n	8020032 <st_prep_buffer+0xce>
                    exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 802020a:	f7f6 fb77 	bl	80168fc <plan_get_exec_block_exit_speed_sqr>
 802020e:	eef0 8a40 	vmov.f32	s17, s0
                    prep.exit_speed = sqrtf(exit_speed_sqr);
 8020212:	f007 faed 	bl	80277f0 <sqrtf>
 8020216:	4b10      	ldr	r3, [pc, #64]	@ (8020258 <st_prep_buffer+0x2f4>)
 8020218:	ed83 0a0d 	vstr	s0, [r3, #52]	@ 0x34
 802021c:	e7ba      	b.n	8020194 <st_prep_buffer+0x230>
                        prep.ramp_type = Ramp_Decel;
 802021e:	4614      	mov	r4, r2
 8020220:	2202      	movs	r2, #2
 8020222:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
                        prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2.0f * pl_block->acceleration * pl_block->millimeters);
 8020226:	ed93 0a07 	vldr	s0, [r3, #28]
 802022a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 802022e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8020232:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8020236:	ee67 7a87 	vmul.f32	s15, s15, s14
 802023a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802023e:	f007 fad7 	bl	80277f0 <sqrtf>
 8020242:	ed84 0a0d 	vstr	s0, [r4, #52]	@ 0x34
                        prep.recalculate.decel_override = On; // Flag to load next block as deceleration override.
 8020246:	7823      	ldrb	r3, [r4, #0]
 8020248:	f043 0308 	orr.w	r3, r3, #8
 802024c:	7023      	strb	r3, [r4, #0]
 802024e:	e6f0      	b.n	8020032 <st_prep_buffer+0xce>
 8020250:	20001d70 	.word	0x20001d70
 8020254:	200027d0 	.word	0x200027d0
 8020258:	20002744 	.word	0x20002744
 802025c:	200024a8 	.word	0x200024a8
 8020260:	b8d1b717 	.word	0xb8d1b717
 8020264:	38d1b717 	.word	0x38d1b717
 8020268:	00000000 	.word	0x00000000
 802026c:	200027e4 	.word	0x200027e4
 8020270:	200027cc 	.word	0x200027cc
                } else if (intersect_distance > 0.0f) {
 8020274:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802027c:	dd43      	ble.n	8020306 <st_prep_buffer+0x3a2>
                    if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 802027e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8020282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802028a:	dd37      	ble.n	80202fc <st_prep_buffer+0x398>
                        prep.decelerate_after = inv_2_accel * (nominal_speed_sqr - exit_speed_sqr);
 802028c:	ee36 7ae8 	vsub.f32	s14, s13, s17
 8020290:	ee27 7a08 	vmul.f32	s14, s14, s16
 8020294:	4ab6      	ldr	r2, [pc, #728]	@ (8020570 <st_prep_buffer+0x60c>)
 8020296:	ed82 7a0f 	vstr	s14, [r2, #60]	@ 0x3c
                        if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 802029a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802029e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202a2:	d519      	bpl.n	80202d8 <st_prep_buffer+0x374>
                            prep.maximum_speed = nominal_speed;
 80202a4:	ed82 0a0c 	vstr	s0, [r2, #48]	@ 0x30
                            if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 80202a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80202ac:	eef4 7a66 	vcmp.f32	s15, s13
 80202b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202b4:	d104      	bne.n	80202c0 <st_prep_buffer+0x35c>
                                prep.ramp_type = Ramp_Cruise;
 80202b6:	4613      	mov	r3, r2
 80202b8:	2201      	movs	r2, #1
 80202ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80202be:	e6b8      	b.n	8020032 <st_prep_buffer+0xce>
                                prep.accelerate_until -= inv_2_accel * (nominal_speed_sqr - pl_block->entry_speed_sqr);
 80202c0:	4bab      	ldr	r3, [pc, #684]	@ (8020570 <st_prep_buffer+0x60c>)
 80202c2:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80202c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80202ca:	ee67 7a88 	vmul.f32	s15, s15, s16
 80202ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80202d2:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
 80202d6:	e6ac      	b.n	8020032 <st_prep_buffer+0xce>
                            prep.accelerate_until = prep.decelerate_after = intersect_distance;
 80202d8:	4ca5      	ldr	r4, [pc, #660]	@ (8020570 <st_prep_buffer+0x60c>)
 80202da:	edc4 7a0f 	vstr	s15, [r4, #60]	@ 0x3c
 80202de:	edc4 7a0e 	vstr	s15, [r4, #56]	@ 0x38
                            prep.maximum_speed = sqrtf(2.0f * pl_block->acceleration * intersect_distance + exit_speed_sqr);
 80202e2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80202e6:	ee37 7a07 	vadd.f32	s14, s14, s14
 80202ea:	ee27 0a27 	vmul.f32	s0, s14, s15
 80202ee:	ee30 0a28 	vadd.f32	s0, s0, s17
 80202f2:	f007 fa7d 	bl	80277f0 <sqrtf>
 80202f6:	ed84 0a0c 	vstr	s0, [r4, #48]	@ 0x30
 80202fa:	e69a      	b.n	8020032 <st_prep_buffer+0xce>
                        prep.ramp_type = Ramp_Decel;
 80202fc:	4b9c      	ldr	r3, [pc, #624]	@ (8020570 <st_prep_buffer+0x60c>)
 80202fe:	2202      	movs	r2, #2
 8020300:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8020304:	e695      	b.n	8020032 <st_prep_buffer+0xce>
                    prep.accelerate_until = 0.0f;
 8020306:	4b9a      	ldr	r3, [pc, #616]	@ (8020570 <st_prep_buffer+0x60c>)
 8020308:	2200      	movs	r2, #0
 802030a:	639a      	str	r2, [r3, #56]	@ 0x38
                    prep.maximum_speed = prep.exit_speed;
 802030c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802030e:	631a      	str	r2, [r3, #48]	@ 0x30
 8020310:	e68f      	b.n	8020032 <st_prep_buffer+0xce>
        float speed_var; // Speed worker variable
        float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
        float minimum_mm = mm_remaining - prep.req_mm_increment; // Guarantee at least one step.

        if (minimum_mm < 0.0f)
            minimum_mm = 0.0f;
 8020312:	ed9f 5a9a 	vldr	s10, [pc, #616]	@ 802057c <st_prep_buffer+0x618>
 8020316:	e1ef      	b.n	80206f8 <st_prep_buffer+0x794>
        do {

            switch (prep.ramp_type) {

                case Ramp_DecelOverride:
                    speed_var = pl_block->acceleration * time_var;
 8020318:	ed92 6a09 	vldr	s12, [r2, #36]	@ 0x24
 802031c:	ee26 6a27 	vmul.f32	s12, s12, s15
                    if ((prep.current_speed - prep.maximum_speed) <= speed_var) {
 8020320:	4b93      	ldr	r3, [pc, #588]	@ (8020570 <st_prep_buffer+0x60c>)
 8020322:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8020326:	edd3 5a0c 	vldr	s11, [r3, #48]	@ 0x30
 802032a:	ee76 4ae5 	vsub.f32	s9, s13, s11
 802032e:	eef4 4ac6 	vcmpe.f32	s9, s12
 8020332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020336:	d811      	bhi.n	802035c <st_prep_buffer+0x3f8>
                        // Cruise or cruise-deceleration types only for deceleration override.
                        mm_remaining = prep.accelerate_until;
 8020338:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
                        time_var = 2.0f * (pl_block->millimeters - mm_remaining) / (prep.current_speed + prep.maximum_speed);
 802033c:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 8020340:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8020344:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8020348:	ee76 6aa5 	vadd.f32	s13, s13, s11
 802034c:	eec6 7a26 	vdiv.f32	s15, s12, s13
                        prep.ramp_type = Ramp_Cruise;
 8020350:	2001      	movs	r0, #1
 8020352:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
                        prep.current_speed = prep.maximum_speed;
 8020356:	edc3 5a0b 	vstr	s11, [r3, #44]	@ 0x2c
 802035a:	e074      	b.n	8020446 <st_prep_buffer+0x4e2>
                    } else {// Mid-deceleration override ramp.
                        mm_remaining -= time_var * (prep.current_speed - 0.5f * speed_var);
 802035c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8020360:	ee66 5a25 	vmul.f32	s11, s12, s11
 8020364:	ee76 5ae5 	vsub.f32	s11, s13, s11
 8020368:	ee65 5aa7 	vmul.f32	s11, s11, s15
 802036c:	ee38 8a65 	vsub.f32	s16, s16, s11
                        prep.current_speed -= speed_var;
 8020370:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8020374:	4b7e      	ldr	r3, [pc, #504]	@ (8020570 <st_prep_buffer+0x60c>)
 8020376:	edc3 6a0b 	vstr	s13, [r3, #44]	@ 0x2c
 802037a:	e064      	b.n	8020446 <st_prep_buffer+0x4e2>
                    }
                    break;

                case Ramp_Accel:
                    // NOTE: Acceleration ramp only computes during first do-while loop.
                    speed_var = pl_block->acceleration * time_var;
 802037c:	edd2 5a09 	vldr	s11, [r2, #36]	@ 0x24
 8020380:	ee65 5aa7 	vmul.f32	s11, s11, s15
                    mm_remaining -= time_var * (prep.current_speed + 0.5f * speed_var);
 8020384:	4b7a      	ldr	r3, [pc, #488]	@ (8020570 <st_prep_buffer+0x60c>)
 8020386:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 802038a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 802038e:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8020392:	ee76 6a26 	vadd.f32	s13, s12, s13
 8020396:	ee66 6aa7 	vmul.f32	s13, s13, s15
 802039a:	ee38 8a66 	vsub.f32	s16, s16, s13
                    if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 802039e:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 80203a2:	eef4 6ac8 	vcmpe.f32	s13, s16
 80203a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203aa:	dd1d      	ble.n	80203e8 <st_prep_buffer+0x484>
                        // Acceleration-cruise, acceleration-deceleration ramp junction, or end of block.
                        mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
                        time_var = 2.0f * (pl_block->millimeters - mm_remaining) / (prep.current_speed + prep.maximum_speed);
 80203ac:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 80203b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80203b4:	ee77 5aa7 	vadd.f32	s11, s15, s15
 80203b8:	edd3 4a0c 	vldr	s9, [r3, #48]	@ 0x30
 80203bc:	ee36 6a24 	vadd.f32	s12, s12, s9
 80203c0:	eec5 7a86 	vdiv.f32	s15, s11, s12
                        prep.ramp_type = mm_remaining == prep.decelerate_after ? Ramp_Decel : Ramp_Cruise;
 80203c4:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 80203c8:	eef4 6a46 	vcmp.f32	s13, s12
 80203cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203d0:	d108      	bne.n	80203e4 <st_prep_buffer+0x480>
 80203d2:	2002      	movs	r0, #2
 80203d4:	4b66      	ldr	r3, [pc, #408]	@ (8020570 <st_prep_buffer+0x60c>)
 80203d6:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
                        prep.current_speed = prep.maximum_speed;
 80203da:	edc3 4a0b 	vstr	s9, [r3, #44]	@ 0x2c
                        mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 80203de:	eeb0 8a66 	vmov.f32	s16, s13
 80203e2:	e030      	b.n	8020446 <st_prep_buffer+0x4e2>
                        prep.ramp_type = mm_remaining == prep.decelerate_after ? Ramp_Decel : Ramp_Cruise;
 80203e4:	2001      	movs	r0, #1
 80203e6:	e7f5      	b.n	80203d4 <st_prep_buffer+0x470>
                    } else // Acceleration only.
                        prep.current_speed += speed_var;
 80203e8:	ee36 6a25 	vadd.f32	s12, s12, s11
 80203ec:	4b60      	ldr	r3, [pc, #384]	@ (8020570 <st_prep_buffer+0x60c>)
 80203ee:	ed83 6a0b 	vstr	s12, [r3, #44]	@ 0x2c
 80203f2:	e028      	b.n	8020446 <st_prep_buffer+0x4e2>

                case Ramp_Cruise:
                    // NOTE: mm_var used to retain the last mm_remaining for incomplete segment time_var calculations.
                    // NOTE: If maximum_speed*time_var value is too low, round-off can cause mm_var to not change. To
                    //   prevent this, simply enforce a minimum speed threshold in the planner.
                    mm_var = mm_remaining - prep.maximum_speed * time_var;
 80203f4:	4b5e      	ldr	r3, [pc, #376]	@ (8020570 <st_prep_buffer+0x60c>)
 80203f6:	edd3 5a0c 	vldr	s11, [r3, #48]	@ 0x30
 80203fa:	ee65 6aa7 	vmul.f32	s13, s11, s15
 80203fe:	ee78 6a66 	vsub.f32	s13, s16, s13
                    if (mm_var < prep.decelerate_after) { // End of cruise.
 8020402:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 8020406:	eeb4 6ae6 	vcmpe.f32	s12, s13
 802040a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802040e:	dd5a      	ble.n	80204c6 <st_prep_buffer+0x562>
                        // Cruise-deceleration junction or end of block.
                        time_var = (mm_remaining - prep.decelerate_after) / prep.maximum_speed;
 8020410:	ee38 8a46 	vsub.f32	s16, s16, s12
 8020414:	eec8 7a25 	vdiv.f32	s15, s16, s11
                        mm_remaining = prep.decelerate_after; // NOTE: 0.0 at EOB
                        prep.ramp_type = Ramp_Decel;
 8020418:	2002      	movs	r0, #2
 802041a:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
                        mm_remaining = prep.decelerate_after; // NOTE: 0.0 at EOB
 802041e:	eeb0 8a46 	vmov.f32	s16, s12
 8020422:	e010      	b.n	8020446 <st_prep_buffer+0x4e2>
                            prep.current_speed -= speed_var;
                            break; // Segment complete. Exit switch-case statement. Continue do-while loop.
                        }
                    }
                    // Otherwise, at end of block or end of forced-deceleration.
                    time_var = 2.0f * (mm_remaining - prep.mm_complete) / (prep.current_speed + prep.exit_speed);
 8020424:	4b52      	ldr	r3, [pc, #328]	@ (8020570 <st_prep_buffer+0x60c>)
 8020426:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 802042a:	ee38 8a46 	vsub.f32	s16, s16, s12
 802042e:	ee38 8a08 	vadd.f32	s16, s16, s16
 8020432:	edd3 5a0d 	vldr	s11, [r3, #52]	@ 0x34
 8020436:	ee76 6aa5 	vadd.f32	s13, s13, s11
 802043a:	eec8 7a26 	vdiv.f32	s15, s16, s13
                    mm_remaining = prep.mm_complete;
                    prep.current_speed = prep.exit_speed;
 802043e:	edc3 5a0b 	vstr	s11, [r3, #44]	@ 0x2c
                    mm_remaining = prep.mm_complete;
 8020442:	eeb0 8a46 	vmov.f32	s16, s12
            }

            dt += time_var; // Add computed ramp time to total segment time.
 8020446:	ee78 8aa7 	vadd.f32	s17, s17, s15

            if (dt < dt_max)
 802044a:	eeb4 7ae8 	vcmpe.f32	s14, s17
 802044e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020452:	dd3b      	ble.n	80204cc <st_prep_buffer+0x568>
                time_var = dt_max - dt;// **Incomplete** At ramp junction.
 8020454:	ee77 7a68 	vsub.f32	s15, s14, s17
                    time_var = dt_max - dt;
                } else
                    break; // **Complete** Exit loop. Segment execution time maxed.
            }

        } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8020458:	4b45      	ldr	r3, [pc, #276]	@ (8020570 <st_prep_buffer+0x60c>)
 802045a:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 802045e:	eef4 6ac8 	vcmpe.f32	s13, s16
 8020462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020466:	d53d      	bpl.n	80204e4 <st_prep_buffer+0x580>
            switch (prep.ramp_type) {
 8020468:	4b41      	ldr	r3, [pc, #260]	@ (8020570 <st_prep_buffer+0x60c>)
 802046a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 802046e:	2b01      	cmp	r3, #1
 8020470:	d0c0      	beq.n	80203f4 <st_prep_buffer+0x490>
 8020472:	2b03      	cmp	r3, #3
 8020474:	f43f af50 	beq.w	8020318 <st_prep_buffer+0x3b4>
 8020478:	2b00      	cmp	r3, #0
 802047a:	f43f af7f 	beq.w	802037c <st_prep_buffer+0x418>
                    speed_var = pl_block->acceleration * time_var; // Used as delta speed (mm/min)
 802047e:	edd2 5a09 	vldr	s11, [r2, #36]	@ 0x24
 8020482:	ee65 5aa7 	vmul.f32	s11, s11, s15
                    if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8020486:	4b3a      	ldr	r3, [pc, #232]	@ (8020570 <st_prep_buffer+0x60c>)
 8020488:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 802048c:	eef4 6ae5 	vcmpe.f32	s13, s11
 8020490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020494:	ddc6      	ble.n	8020424 <st_prep_buffer+0x4c0>
                        mm_var = mm_remaining - time_var * (prep.current_speed - 0.5f * speed_var); // (mm)
 8020496:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 802049a:	ee25 6a86 	vmul.f32	s12, s11, s12
 802049e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80204a2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80204a6:	ee38 6a46 	vsub.f32	s12, s16, s12
                        if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 80204aa:	edd3 4a0a 	vldr	s9, [r3, #40]	@ 0x28
 80204ae:	eef4 4ac6 	vcmpe.f32	s9, s12
 80204b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204b6:	d5b5      	bpl.n	8020424 <st_prep_buffer+0x4c0>
                            prep.current_speed -= speed_var;
 80204b8:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80204bc:	edc3 6a0b 	vstr	s13, [r3, #44]	@ 0x2c
                            mm_remaining = mm_var;
 80204c0:	eeb0 8a46 	vmov.f32	s16, s12
                            break; // Segment complete. Exit switch-case statement. Continue do-while loop.
 80204c4:	e7bf      	b.n	8020446 <st_prep_buffer+0x4e2>
                        mm_remaining = mm_var;
 80204c6:	eeb0 8a66 	vmov.f32	s16, s13
 80204ca:	e7bc      	b.n	8020446 <st_prep_buffer+0x4e2>
                if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 80204cc:	eeb4 8ac5 	vcmpe.f32	s16, s10
 80204d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204d4:	dd06      	ble.n	80204e4 <st_prep_buffer+0x580>
                    dt_max += DT_SEGMENT;
 80204d6:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8020574 <st_prep_buffer+0x610>
 80204da:	ee37 7a27 	vadd.f32	s14, s14, s15
                    time_var = dt_max - dt;
 80204de:	ee77 7a68 	vsub.f32	s15, s14, s17
 80204e2:	e7b9      	b.n	8020458 <st_prep_buffer+0x4f4>

        /* -----------------------------------------------------------------------------------
           Compute spindle spindle speed for step segment
        */

        if (sys.step_control.update_spindle_rpm || st_prep_block->dynamic_rpm) {
 80204e4:	4b24      	ldr	r3, [pc, #144]	@ (8020578 <st_prep_buffer+0x614>)
 80204e6:	7e1b      	ldrb	r3, [r3, #24]
 80204e8:	f013 0f08 	tst.w	r3, #8
 80204ec:	d103      	bne.n	80204f6 <st_prep_buffer+0x592>
 80204ee:	f891 3031 	ldrb.w	r3, [r1, #49]	@ 0x31
 80204f2:	2b00      	cmp	r3, #0
 80204f4:	d068      	beq.n	80205c8 <st_prep_buffer+0x664>

            float rpm;

            if (pl_block->spindle.state.on) {
 80204f6:	f892 303c 	ldrb.w	r3, [r2, #60]	@ 0x3c
 80204fa:	f013 0f01 	tst.w	r3, #1
 80204fe:	d03f      	beq.n	8020580 <st_prep_buffer+0x61c>
                if(pl_block->spindle.css) {
 8020500:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8020502:	b1d9      	cbz	r1, 802053c <st_prep_buffer+0x5d8>
                    float npos = (float)(pl_block->step_event_count - prep.steps_remaining) / (float)pl_block->step_event_count;
 8020504:	4b1a      	ldr	r3, [pc, #104]	@ (8020570 <st_prep_buffer+0x60c>)
 8020506:	689b      	ldr	r3, [r3, #8]
 8020508:	68d0      	ldr	r0, [r2, #12]
 802050a:	1ac3      	subs	r3, r0, r3
 802050c:	ee07 3a90 	vmov	s15, r3
 8020510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020514:	ee07 0a10 	vmov	s14, r0
 8020518:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 802051c:	eec7 6a87 	vdiv.f32	s13, s15, s14
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 8020520:	6c50      	ldr	r0, [r2, #68]	@ 0x44
                                           pl_block->spindle.rpm + pl_block->spindle.css->delta_rpm * npos,
 8020522:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
 8020526:	edd1 7a02 	vldr	s15, [r1, #8]
 802052a:	ee67 7aa6 	vmul.f32	s15, s15, s13
                                            pl_block->spindle.hal->param->override_pct);
 802052e:	6843      	ldr	r3, [r0, #4]
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 8020530:	68d9      	ldr	r1, [r3, #12]
 8020532:	ee30 0a27 	vadd.f32	s0, s0, s15
 8020536:	f7fe f8e9 	bl	801e70c <spindle_set_rpm>
 802053a:	e027      	b.n	802058c <st_prep_buffer+0x628>
                } else {
                    // NOTE: Feed and rapid overrides are independent of PWM value and do not alter laser power/rate.
                    // If current_speed is zero, then may need to be rpm_min*(100/MAX_SPINDLE_RPM_OVERRIDE)
                    // but this would be instantaneous only and during a motion. May not matter at all.
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 802053c:	6c50      	ldr	r0, [r2, #68]	@ 0x44
                                           pl_block->condition.is_rpm_rate_adjusted && !pl_block->condition.is_laser_ppi_mode
 802053e:	8a93      	ldrh	r3, [r2, #20]
 8020540:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 8020544:	2b80      	cmp	r3, #128	@ 0x80
 8020546:	d006      	beq.n	8020556 <st_prep_buffer+0x5f2>
 8020548:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
                                            ? pl_block->spindle.rpm * prep.current_speed * prep.inv_feedrate
                                            : pl_block->spindle.rpm, pl_block->spindle.hal->param->override_pct);
 802054c:	6843      	ldr	r3, [r0, #4]
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 802054e:	68d9      	ldr	r1, [r3, #12]
 8020550:	f7fe f8dc 	bl	801e70c <spindle_set_rpm>
 8020554:	e01a      	b.n	802058c <st_prep_buffer+0x628>
                                            ? pl_block->spindle.rpm * prep.current_speed * prep.inv_feedrate
 8020556:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
 802055a:	4b05      	ldr	r3, [pc, #20]	@ (8020570 <st_prep_buffer+0x60c>)
 802055c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8020560:	ee20 0a27 	vmul.f32	s0, s0, s15
 8020564:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 8020568:	ee20 0a27 	vmul.f32	s0, s0, s15
 802056c:	e7ee      	b.n	802054c <st_prep_buffer+0x5e8>
 802056e:	bf00      	nop
 8020570:	20002744 	.word	0x20002744
 8020574:	392ec33e 	.word	0x392ec33e
 8020578:	20001d70 	.word	0x20001d70
 802057c:	00000000 	.word	0x00000000
                }
            } else
                pl_block->spindle.hal->param->rpm = rpm = 0.0f;
 8020580:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8020582:	685b      	ldr	r3, [r3, #4]
 8020584:	ed1f 0a03 	vldr	s0, [pc, #-12]	@ 802057c <st_prep_buffer+0x618>
 8020588:	ed83 0a00 	vstr	s0, [r3]

            if(rpm != prep.current_spindle_rpm) {
 802058c:	4b8b      	ldr	r3, [pc, #556]	@ (80207bc <st_prep_buffer+0x858>)
 802058e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8020592:	eef4 7a40 	vcmp.f32	s15, s0
 8020596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802059a:	d015      	beq.n	80205c8 <st_prep_buffer+0x664>
                if(pl_block->spindle.hal->get_pwm != NULL) {
 802059c:	4b88      	ldr	r3, [pc, #544]	@ (80207c0 <st_prep_buffer+0x85c>)
 802059e:	681b      	ldr	r3, [r3, #0]
 80205a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80205a2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80205a4:	2900      	cmp	r1, #0
 80205a6:	f000 80ae 	beq.w	8020706 <st_prep_buffer+0x7a2>
                    prep.current_spindle_rpm = rpm;
 80205aa:	4a84      	ldr	r2, [pc, #528]	@ (80207bc <st_prep_buffer+0x858>)
 80205ac:	ed82 0a13 	vstr	s0, [r2, #76]	@ 0x4c
                    prep_segment->update_pwm = pl_block->spindle.hal->update_pwm;
 80205b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80205b2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80205b4:	62ea      	str	r2, [r5, #44]	@ 0x2c
                    prep_segment->spindle_pwm = pl_block->spindle.hal->get_pwm(pl_block->spindle.hal, rpm);
 80205b6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80205b8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80205ba:	4798      	blx	r3
 80205bc:	61e8      	str	r0, [r5, #28]
                } else {
                    prep_segment->update_rpm = pl_block->spindle.hal->update_rpm;
                    prep.current_spindle_rpm = prep_segment->spindle_rpm = rpm;
                }
                sys.step_control.update_spindle_rpm = Off;
 80205be:	4b81      	ldr	r3, [pc, #516]	@ (80207c4 <st_prep_buffer+0x860>)
 80205c0:	7e1a      	ldrb	r2, [r3, #24]
 80205c2:	f36f 02c3 	bfc	r2, #3, #1
 80205c6:	761a      	strb	r2, [r3, #24]
           However, since floats have only 7.2 significant digits, long moves with extremely
           high step counts can exceed the precision of floats, which can lead to lost steps.
           Fortunately, this scenario is highly unlikely and unrealistic in CNC machines
           supported by Grbl (i.e. exceeding 10 meters axis travel at 200 step/mm).
        */
        float step_dist_remaining = prep.steps_per_mm * mm_remaining; // Convert mm_remaining to steps
 80205c8:	4e7c      	ldr	r6, [pc, #496]	@ (80207bc <st_prep_buffer+0x858>)
 80205ca:	edd6 9a03 	vldr	s19, [r6, #12]
 80205ce:	ee69 9a88 	vmul.f32	s19, s19, s16
        uint32_t n_steps_remaining = (uint32_t)ceilf(step_dist_remaining); // Round-up current steps remaining
 80205d2:	eeb0 0a69 	vmov.f32	s0, s19
 80205d6:	f007 fa19 	bl	8027a0c <ceilf>
 80205da:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80205de:	ee17 4a90 	vmov	r4, s15

        prep_segment->n_step = (uint_fast16_t)(prep.steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 80205e2:	68b3      	ldr	r3, [r6, #8]
 80205e4:	1b1a      	subs	r2, r3, r4
 80205e6:	61aa      	str	r2, [r5, #24]

        // Bail if we are at the end of a feed hold and don't have a step to execute.
        if (prep_segment->n_step == 0 && sys.step_control.execute_hold) {
 80205e8:	b92a      	cbnz	r2, 80205f6 <st_prep_buffer+0x692>
 80205ea:	4a76      	ldr	r2, [pc, #472]	@ (80207c4 <st_prep_buffer+0x860>)
 80205ec:	7e12      	ldrb	r2, [r2, #24]
 80205ee:	f012 0f02 	tst.w	r2, #2
 80205f2:	f040 8090 	bne.w	8020716 <st_prep_buffer+0x7b2>
        // compensate, we track the time to execute the previous segment's partial step and simply
        // apply it with the partial step distance to the current segment, so that it minutely
        // adjusts the whole segment rate to keep step output exact. These rate adjustments are
        // typically very small and do not adversely effect performance, but ensures that Grbl
        // outputs the exact acceleration and velocity profiles as computed by the planner.
        dt += prep.dt_remainder; // Apply previous segment partial step execute time
 80205f6:	4a71      	ldr	r2, [pc, #452]	@ (80207bc <st_prep_buffer+0x858>)
 80205f8:	edd2 7a01 	vldr	s15, [r2, #4]
 80205fc:	ee77 8aa8 	vadd.f32	s17, s15, s17
        float inv_rate = dt / ((float)prep.steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8020600:	ee07 3a90 	vmov	s15, r3
 8020604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020608:	ee77 7ae9 	vsub.f32	s15, s15, s19
 802060c:	ee88 9aa7 	vdiv.f32	s18, s17, s15

        // Compute timer ticks per step for the prepped segment.
        uint32_t cycles = (uint32_t)ceilf(cycles_per_min * inv_rate); // (cycles/step)
 8020610:	4b6d      	ldr	r3, [pc, #436]	@ (80207c8 <st_prep_buffer+0x864>)
 8020612:	ed93 0a00 	vldr	s0, [r3]
 8020616:	ee29 0a00 	vmul.f32	s0, s18, s0
 802061a:	f007 f9f7 	bl	8027a0c <ceilf>
 802061e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8020622:	ee17 2a90 	vmov	r2, s15

        // Record end position of segment relative to block if spindle synchronized motion
        if((prep_segment->spindle_sync = pl_block->spindle.state.synchronized)) {
 8020626:	4b66      	ldr	r3, [pc, #408]	@ (80207c0 <st_prep_buffer+0x85c>)
 8020628:	6818      	ldr	r0, [r3, #0]
 802062a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 802062e:	f3c3 11c0 	ubfx	r1, r3, #7, #1
 8020632:	f885 1024 	strb.w	r1, [r5, #36]	@ 0x24
 8020636:	09db      	lsrs	r3, r3, #7
 8020638:	d014      	beq.n	8020664 <st_prep_buffer+0x700>
            prep.target_position += dt * prep.target_feed;
 802063a:	4b60      	ldr	r3, [pc, #384]	@ (80207bc <st_prep_buffer+0x858>)
 802063c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8020640:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8020644:	ee27 7a28 	vmul.f32	s14, s14, s17
 8020648:	ee77 7a87 	vadd.f32	s15, s15, s14
 802064c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
            prep_segment->cruising = prep.ramp_type == Ramp_Cruise;
 8020650:	f893 1024 	ldrb.w	r1, [r3, #36]	@ 0x24
 8020654:	2901      	cmp	r1, #1
 8020656:	bf14      	ite	ne
 8020658:	2100      	movne	r1, #0
 802065a:	2101      	moveq	r1, #1
 802065c:	f885 1025 	strb.w	r1, [r5, #37]	@ 0x25
            prep_segment->target_position = prep.target_position; //st_prep_block->millimeters - pl_block->millimeters;
 8020660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020662:	616b      	str	r3, [r5, #20]
        }

      #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
        // Compute step timing and multi-axis smoothing level.
        // NOTE: AMASS overdrives the timer with each level, so only one prescalar is required.
        if (cycles < amass.level_1)
 8020664:	4b59      	ldr	r3, [pc, #356]	@ (80207cc <st_prep_buffer+0x868>)
 8020666:	681b      	ldr	r3, [r3, #0]
 8020668:	4293      	cmp	r3, r2
 802066a:	d969      	bls.n	8020740 <st_prep_buffer+0x7dc>
            prep_segment->amass_level = 0;
 802066c:	2300      	movs	r3, #0
 802066e:	62ab      	str	r3, [r5, #40]	@ 0x28
            cycles >>= prep_segment->amass_level;
            prep_segment->n_step <<= prep_segment->amass_level;
        }
      #endif

        prep_segment->cycles_per_tick = cycles;
 8020670:	60ea      	str	r2, [r5, #12]
        prep_segment->current_rate = prep.current_speed;
 8020672:	4b52      	ldr	r3, [pc, #328]	@ (80207bc <st_prep_buffer+0x858>)
 8020674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020676:	612a      	str	r2, [r5, #16]

        // Segment complete! Increment segment pointers, so stepper ISR can immediately execute it.
        segment_buffer_head = segment_next_head;
 8020678:	4a55      	ldr	r2, [pc, #340]	@ (80207d0 <st_prep_buffer+0x86c>)
 802067a:	6811      	ldr	r1, [r2, #0]
 802067c:	4d55      	ldr	r5, [pc, #340]	@ (80207d4 <st_prep_buffer+0x870>)
 802067e:	6029      	str	r1, [r5, #0]
        segment_next_head = segment_next_head->next;
 8020680:	6849      	ldr	r1, [r1, #4]
 8020682:	6011      	str	r1, [r2, #0]

        // Update the appropriate planner and segment data.
        pl_block->millimeters = mm_remaining;
 8020684:	ed80 8a0a 	vstr	s16, [r0, #40]	@ 0x28
        prep.steps_remaining = n_steps_remaining;
 8020688:	609c      	str	r4, [r3, #8]
        prep.dt_remainder = ((float)n_steps_remaining - step_dist_remaining) * inv_rate;
 802068a:	ee07 4a90 	vmov	s15, r4
 802068e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020692:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8020696:	ee67 7a89 	vmul.f32	s15, s15, s18
 802069a:	edc3 7a01 	vstr	s15, [r3, #4]

        // Check for exit conditions and flag to load next planner block.
        if (mm_remaining <= prep.mm_complete) {
 802069e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80206a2:	eef4 7ac8 	vcmpe.f32	s15, s16
 80206a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80206aa:	da5c      	bge.n	8020766 <st_prep_buffer+0x802>
    while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 80206ac:	4b4a      	ldr	r3, [pc, #296]	@ (80207d8 <st_prep_buffer+0x874>)
 80206ae:	681a      	ldr	r2, [r3, #0]
 80206b0:	4b47      	ldr	r3, [pc, #284]	@ (80207d0 <st_prep_buffer+0x86c>)
 80206b2:	681b      	ldr	r3, [r3, #0]
 80206b4:	429a      	cmp	r2, r3
 80206b6:	d040      	beq.n	802073a <st_prep_buffer+0x7d6>
        if (pl_block == NULL) {
 80206b8:	4b41      	ldr	r3, [pc, #260]	@ (80207c0 <st_prep_buffer+0x85c>)
 80206ba:	681b      	ldr	r3, [r3, #0]
 80206bc:	2b00      	cmp	r3, #0
 80206be:	f43f ac5b 	beq.w	801ff78 <st_prep_buffer+0x14>
        if(probe_asserted)
 80206c2:	4b46      	ldr	r3, [pc, #280]	@ (80207dc <st_prep_buffer+0x878>)
 80206c4:	781b      	ldrb	r3, [r3, #0]
 80206c6:	2b00      	cmp	r3, #0
 80206c8:	d137      	bne.n	802073a <st_prep_buffer+0x7d6>
        segment_t *prep_segment = segment_buffer_head;
 80206ca:	4b42      	ldr	r3, [pc, #264]	@ (80207d4 <st_prep_buffer+0x870>)
 80206cc:	681d      	ldr	r5, [r3, #0]
        prep_segment->exec_block = st_prep_block;
 80206ce:	4b44      	ldr	r3, [pc, #272]	@ (80207e0 <st_prep_buffer+0x87c>)
 80206d0:	6819      	ldr	r1, [r3, #0]
 80206d2:	60a9      	str	r1, [r5, #8]
        prep_segment->update_rpm = NULL;
 80206d4:	2300      	movs	r3, #0
 80206d6:	632b      	str	r3, [r5, #48]	@ 0x30
        prep_segment->update_pwm = NULL;
 80206d8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
 80206da:	4b39      	ldr	r3, [pc, #228]	@ (80207c0 <st_prep_buffer+0x85c>)
 80206dc:	681a      	ldr	r2, [r3, #0]
 80206de:	ed92 8a0a 	vldr	s16, [r2, #40]	@ 0x28
        float minimum_mm = mm_remaining - prep.req_mm_increment; // Guarantee at least one step.
 80206e2:	4b36      	ldr	r3, [pc, #216]	@ (80207bc <st_prep_buffer+0x858>)
 80206e4:	ed93 5a04 	vldr	s10, [r3, #16]
 80206e8:	ee38 5a45 	vsub.f32	s10, s16, s10
        if (minimum_mm < 0.0f)
 80206ec:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 80206f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80206f4:	f53f ae0d 	bmi.w	8020312 <st_prep_buffer+0x3ae>
            minimum_mm = 0.0f;
 80206f8:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 80207e4 <st_prep_buffer+0x880>
 80206fc:	eddf 8a3a 	vldr	s17, [pc, #232]	@ 80207e8 <st_prep_buffer+0x884>
 8020700:	eeb0 7a67 	vmov.f32	s14, s15
 8020704:	e6b0      	b.n	8020468 <st_prep_buffer+0x504>
                    prep_segment->update_rpm = pl_block->spindle.hal->update_rpm;
 8020706:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8020708:	632b      	str	r3, [r5, #48]	@ 0x30
                    prep.current_spindle_rpm = prep_segment->spindle_rpm = rpm;
 802070a:	ed85 0a08 	vstr	s0, [r5, #32]
 802070e:	4b2b      	ldr	r3, [pc, #172]	@ (80207bc <st_prep_buffer+0x858>)
 8020710:	ed83 0a13 	vstr	s0, [r3, #76]	@ 0x4c
 8020714:	e753      	b.n	80205be <st_prep_buffer+0x65a>
            sys.step_control.end_motion = On;
 8020716:	4a2b      	ldr	r2, [pc, #172]	@ (80207c4 <st_prep_buffer+0x860>)
 8020718:	7e13      	ldrb	r3, [r2, #24]
 802071a:	f043 0301 	orr.w	r3, r3, #1
 802071e:	7613      	strb	r3, [r2, #24]
            if (settings.parking.flags.enabled && !prep.recalculate.parking)
 8020720:	4b32      	ldr	r3, [pc, #200]	@ (80207ec <st_prep_buffer+0x888>)
 8020722:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 8020726:	f013 0f01 	tst.w	r3, #1
 802072a:	d006      	beq.n	802073a <st_prep_buffer+0x7d6>
 802072c:	7833      	ldrb	r3, [r6, #0]
 802072e:	f013 0f04 	tst.w	r3, #4
 8020732:	d102      	bne.n	802073a <st_prep_buffer+0x7d6>
                prep.recalculate.hold_partial_block = On;
 8020734:	f043 0302 	orr.w	r3, r3, #2
 8020738:	7033      	strb	r3, [r6, #0]
                pl_block = NULL; // Set pointer to indicate check and load next planner block.
                plan_discard_current_block();
            }
        }
    }
}
 802073a:	ecbd 8b04 	vpop	{d8-d9}
 802073e:	bd70      	pop	{r4, r5, r6, pc}
            prep_segment->amass_level = cycles < amass.level_2 ? 1 : (cycles < amass.level_3 ? 2 : 3);
 8020740:	4b22      	ldr	r3, [pc, #136]	@ (80207cc <st_prep_buffer+0x868>)
 8020742:	685b      	ldr	r3, [r3, #4]
 8020744:	4293      	cmp	r3, r2
 8020746:	d805      	bhi.n	8020754 <st_prep_buffer+0x7f0>
 8020748:	4b20      	ldr	r3, [pc, #128]	@ (80207cc <st_prep_buffer+0x868>)
 802074a:	689b      	ldr	r3, [r3, #8]
 802074c:	4293      	cmp	r3, r2
 802074e:	d908      	bls.n	8020762 <st_prep_buffer+0x7fe>
 8020750:	2102      	movs	r1, #2
 8020752:	e000      	b.n	8020756 <st_prep_buffer+0x7f2>
 8020754:	2101      	movs	r1, #1
 8020756:	62a9      	str	r1, [r5, #40]	@ 0x28
            cycles >>= prep_segment->amass_level;
 8020758:	40ca      	lsrs	r2, r1
            prep_segment->n_step <<= prep_segment->amass_level;
 802075a:	69ab      	ldr	r3, [r5, #24]
 802075c:	408b      	lsls	r3, r1
 802075e:	61ab      	str	r3, [r5, #24]
 8020760:	e786      	b.n	8020670 <st_prep_buffer+0x70c>
            prep_segment->amass_level = cycles < amass.level_2 ? 1 : (cycles < amass.level_3 ? 2 : 3);
 8020762:	2103      	movs	r1, #3
 8020764:	e7f7      	b.n	8020756 <st_prep_buffer+0x7f2>
            if (mm_remaining > 0.0f) { // At end of forced-termination.
 8020766:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802076a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802076e:	dc0a      	bgt.n	8020786 <st_prep_buffer+0x822>
                if (sys.step_control.execute_sys_motion) {
 8020770:	4b14      	ldr	r3, [pc, #80]	@ (80207c4 <st_prep_buffer+0x860>)
 8020772:	7e1b      	ldrb	r3, [r3, #24]
 8020774:	f013 0f04 	tst.w	r3, #4
 8020778:	d11a      	bne.n	80207b0 <st_prep_buffer+0x84c>
                pl_block = NULL; // Set pointer to indicate check and load next planner block.
 802077a:	4b11      	ldr	r3, [pc, #68]	@ (80207c0 <st_prep_buffer+0x85c>)
 802077c:	2200      	movs	r2, #0
 802077e:	601a      	str	r2, [r3, #0]
                plan_discard_current_block();
 8020780:	f7f6 f88a 	bl	8016898 <plan_discard_current_block>
 8020784:	e792      	b.n	80206ac <st_prep_buffer+0x748>
                sys.step_control.end_motion = On;
 8020786:	4a0f      	ldr	r2, [pc, #60]	@ (80207c4 <st_prep_buffer+0x860>)
 8020788:	7e13      	ldrb	r3, [r2, #24]
 802078a:	f043 0301 	orr.w	r3, r3, #1
 802078e:	7613      	strb	r3, [r2, #24]
                if (settings.parking.flags.enabled && !prep.recalculate.parking)
 8020790:	4b16      	ldr	r3, [pc, #88]	@ (80207ec <st_prep_buffer+0x888>)
 8020792:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 8020796:	f013 0f01 	tst.w	r3, #1
 802079a:	d0ce      	beq.n	802073a <st_prep_buffer+0x7d6>
 802079c:	4b07      	ldr	r3, [pc, #28]	@ (80207bc <st_prep_buffer+0x858>)
 802079e:	781b      	ldrb	r3, [r3, #0]
 80207a0:	f013 0f04 	tst.w	r3, #4
 80207a4:	d1c9      	bne.n	802073a <st_prep_buffer+0x7d6>
                    prep.recalculate.hold_partial_block = On;
 80207a6:	4a05      	ldr	r2, [pc, #20]	@ (80207bc <st_prep_buffer+0x858>)
 80207a8:	f043 0302 	orr.w	r3, r3, #2
 80207ac:	7013      	strb	r3, [r2, #0]
                return; // Bail!
 80207ae:	e7c4      	b.n	802073a <st_prep_buffer+0x7d6>
                    sys.step_control.end_motion = On;
 80207b0:	4a04      	ldr	r2, [pc, #16]	@ (80207c4 <st_prep_buffer+0x860>)
 80207b2:	f043 0301 	orr.w	r3, r3, #1
 80207b6:	7613      	strb	r3, [r2, #24]
                    return;
 80207b8:	e7bf      	b.n	802073a <st_prep_buffer+0x7d6>
 80207ba:	bf00      	nop
 80207bc:	20002744 	.word	0x20002744
 80207c0:	200027d0 	.word	0x200027d0
 80207c4:	20001d70 	.word	0x20001d70
 80207c8:	200027e0 	.word	0x200027e0
 80207cc:	200027e8 	.word	0x200027e8
 80207d0:	200027d4 	.word	0x200027d4
 80207d4:	200027d8 	.word	0x200027d8
 80207d8:	200027dc 	.word	0x200027dc
 80207dc:	200027e4 	.word	0x200027e4
 80207e0:	200027cc 	.word	0x200027cc
 80207e4:	392ec33e 	.word	0x392ec33e
 80207e8:	00000000 	.word	0x00000000
 80207ec:	200024a8 	.word	0x200024a8

080207f0 <st_get_realtime_rate>:
// Called by realtime status reporting to fetch the current speed being executed. This value
// however is not exactly the current speed, but the speed computed in the last step segment
// in the segment buffer. It will always be behind by up to the number of segment blocks (-1)
// divided by the ACCELERATION TICKS PER SECOND in seconds.
float st_get_realtime_rate (void)
{
 80207f0:	b508      	push	{r3, lr}
    return state_get() & (STATE_CYCLE|STATE_HOMING|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 80207f2:	f7fe fba9 	bl	801ef48 <state_get>
#ifdef KINEMATICS_API
            ? prep.current_speed * prep.rate_multiplier
#else
            ? prep.current_speed
#endif
            : 0.0f;
 80207f6:	f010 0f7c 	tst.w	r0, #124	@ 0x7c
 80207fa:	d003      	beq.n	8020804 <st_get_realtime_rate+0x14>
 80207fc:	4b03      	ldr	r3, [pc, #12]	@ (802080c <st_get_realtime_rate+0x1c>)
 80207fe:	ed93 0a0b 	vldr	s0, [r3, #44]	@ 0x2c
}
 8020802:	bd08      	pop	{r3, pc}
            : 0.0f;
 8020804:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8020810 <st_get_realtime_rate+0x20>
 8020808:	e7fb      	b.n	8020802 <st_get_realtime_rate+0x12>
 802080a:	bf00      	nop
 802080c:	20002744 	.word	0x20002744
 8020810:	00000000 	.word	0x00000000

08020814 <st_get_offset_id>:

offset_id_t st_get_offset_id (void)
{
 8020814:	b508      	push	{r3, lr}
    plan_block_t *pl_block;

    return st.exec_block
 8020816:	4b0b      	ldr	r3, [pc, #44]	@ (8020844 <st_get_offset_id+0x30>)
 8020818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            ? st.exec_block->offset_id
            : (sys.holding_state == Hold_Complete && (pl_block = plan_get_current_block())
 802081a:	b113      	cbz	r3, 8020822 <st_get_offset_id+0xe>
 802081c:	f993 0032 	ldrsb.w	r0, [r3, #50]	@ 0x32
                ? pl_block->offset_id
                : -1);
}
 8020820:	bd08      	pop	{r3, pc}
            : (sys.holding_state == Hold_Complete && (pl_block = plan_get_current_block())
 8020822:	4b09      	ldr	r3, [pc, #36]	@ (8020848 <st_get_offset_id+0x34>)
 8020824:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8020828:	2b01      	cmp	r3, #1
 802082a:	d105      	bne.n	8020838 <st_get_offset_id+0x24>
 802082c:	f7f6 f858 	bl	80168e0 <plan_get_current_block>
 8020830:	b128      	cbz	r0, 802083e <st_get_offset_id+0x2a>
 8020832:	f990 0011 	ldrsb.w	r0, [r0, #17]
 8020836:	e7f3      	b.n	8020820 <st_get_offset_id+0xc>
 8020838:	f04f 30ff 	mov.w	r0, #4294967295
 802083c:	e7f0      	b.n	8020820 <st_get_offset_id+0xc>
 802083e:	f04f 30ff 	mov.w	r0, #4294967295
 8020842:	e7ed      	b.n	8020820 <st_get_offset_id+0xc>
 8020844:	200027f4 	.word	0x200027f4
 8020848:	20001d70 	.word	0x20001d70

0802084c <stream_get_null>:

// "dummy" version of serialGetC
int16_t stream_get_null (void)
{
    return SERIAL_NO_DATA;
}
 802084c:	f04f 30ff 	mov.w	r0, #4294967295
 8020850:	4770      	bx	lr

08020852 <stream_connected>:
// helper function for (UART) stream implementations.

bool stream_connected (void)
{
    return true;
}
 8020852:	2001      	movs	r0, #1
 8020854:	4770      	bx	lr

08020856 <is_not_connected>:

static bool is_not_connected (void)
{
    return false;
}
 8020856:	2000      	movs	r0, #0
 8020858:	4770      	bx	lr
	...

0802085c <connection_is_up>:

static bool connection_is_up (io_stream_t *stream)
{
 802085c:	b508      	push	{r3, lr}
    if(stream->is_connected)
 802085e:	6843      	ldr	r3, [r0, #4]
 8020860:	b1bb      	cbz	r3, 8020892 <connection_is_up+0x36>
        return stream->is_connected();
 8020862:	4798      	blx	r3
        }
        connection = connection->next;
    }

    return false;
}
 8020864:	bd08      	pop	{r3, pc}
        connection = connection->next;
 8020866:	68db      	ldr	r3, [r3, #12]
    while(connection) {
 8020868:	b1ab      	cbz	r3, 8020896 <connection_is_up+0x3a>
        if(connection->stream->type == stream->type &&
 802086a:	681a      	ldr	r2, [r3, #0]
 802086c:	f8b2 c000 	ldrh.w	ip, [r2]
 8020870:	8801      	ldrh	r1, [r0, #0]
 8020872:	458c      	cmp	ip, r1
 8020874:	d1f7      	bne.n	8020866 <connection_is_up+0xa>
             connection->stream->state.is_usb == stream->state.is_usb) {
 8020876:	7891      	ldrb	r1, [r2, #2]
 8020878:	7882      	ldrb	r2, [r0, #2]
 802087a:	404a      	eors	r2, r1
            connection->stream->instance == stream->instance &&
 802087c:	f012 0f04 	tst.w	r2, #4
 8020880:	d1f1      	bne.n	8020866 <connection_is_up+0xa>
            if(connection->stream->state.is_usb)
 8020882:	f011 0f04 	tst.w	r1, #4
 8020886:	d001      	beq.n	802088c <connection_is_up+0x30>
                connection->is_up = is_not_connected;
 8020888:	4a04      	ldr	r2, [pc, #16]	@ (802089c <connection_is_up+0x40>)
 802088a:	605a      	str	r2, [r3, #4]
            return connection->is_up();
 802088c:	685b      	ldr	r3, [r3, #4]
 802088e:	4798      	blx	r3
 8020890:	e7e8      	b.n	8020864 <connection_is_up+0x8>
    stream_connection_t *connection = connections;
 8020892:	4b03      	ldr	r3, [pc, #12]	@ (80208a0 <connection_is_up+0x44>)
 8020894:	e7e8      	b.n	8020868 <connection_is_up+0xc>
    return false;
 8020896:	2000      	movs	r0, #0
 8020898:	e7e4      	b.n	8020864 <connection_is_up+0x8>
 802089a:	bf00      	nop
 802089c:	08020857 	.word	0x08020857
 80208a0:	20002c4c 	.word	0x20002c4c

080208a4 <stream_write_all>:

static void stream_write_all (const char *s)
{
 80208a4:	b538      	push	{r3, r4, r5, lr}
 80208a6:	4605      	mov	r5, r0
    stream_connection_t *connection = connections;
 80208a8:	4c06      	ldr	r4, [pc, #24]	@ (80208c4 <stream_write_all+0x20>)

    while(connection) {
 80208aa:	e000      	b.n	80208ae <stream_write_all+0xa>
        if(connection->is_up())
            connection->stream->write(s);
        connection = connection->next;
 80208ac:	68e4      	ldr	r4, [r4, #12]
    while(connection) {
 80208ae:	b144      	cbz	r4, 80208c2 <stream_write_all+0x1e>
        if(connection->is_up())
 80208b0:	6863      	ldr	r3, [r4, #4]
 80208b2:	4798      	blx	r3
 80208b4:	2800      	cmp	r0, #0
 80208b6:	d0f9      	beq.n	80208ac <stream_write_all+0x8>
            connection->stream->write(s);
 80208b8:	6823      	ldr	r3, [r4, #0]
 80208ba:	68db      	ldr	r3, [r3, #12]
 80208bc:	4628      	mov	r0, r5
 80208be:	4798      	blx	r3
 80208c0:	e7f4      	b.n	80208ac <stream_write_all+0x8>
    }
}
 80208c2:	bd38      	pop	{r3, r4, r5, pc}
 80208c4:	20002c4c 	.word	0x20002c4c

080208c8 <_open_instance>:
    uint32_t baud_rate;
    io_stream_t const *stream;
} connection;

static bool _open_instance (io_stream_properties_t const *stream)
{
 80208c8:	b510      	push	{r4, lr}
    if(stream->type == StreamType_Serial && (connection.instance == 255 || stream->instance == connection.instance) && stream->flags.claimable && !stream->flags.claimed)
 80208ca:	7803      	ldrb	r3, [r0, #0]
 80208cc:	b933      	cbnz	r3, 80208dc <_open_instance+0x14>
 80208ce:	4b0c      	ldr	r3, [pc, #48]	@ (8020900 <_open_instance+0x38>)
 80208d0:	781b      	ldrb	r3, [r3, #0]
 80208d2:	2bff      	cmp	r3, #255	@ 0xff
 80208d4:	d008      	beq.n	80208e8 <_open_instance+0x20>
 80208d6:	7842      	ldrb	r2, [r0, #1]
 80208d8:	4293      	cmp	r3, r2
 80208da:	d005      	beq.n	80208e8 <_open_instance+0x20>
        connection.stream = stream->claim(connection.baud_rate);

    return connection.stream != NULL;
 80208dc:	4b08      	ldr	r3, [pc, #32]	@ (8020900 <_open_instance+0x38>)
 80208de:	6898      	ldr	r0, [r3, #8]
}
 80208e0:	3800      	subs	r0, #0
 80208e2:	bf18      	it	ne
 80208e4:	2001      	movne	r0, #1
 80208e6:	bd10      	pop	{r4, pc}
    if(stream->type == StreamType_Serial && (connection.instance == 255 || stream->instance == connection.instance) && stream->flags.claimable && !stream->flags.claimed)
 80208e8:	7883      	ldrb	r3, [r0, #2]
 80208ea:	f003 0306 	and.w	r3, r3, #6
 80208ee:	2b02      	cmp	r3, #2
 80208f0:	d1f4      	bne.n	80208dc <_open_instance+0x14>
        connection.stream = stream->claim(connection.baud_rate);
 80208f2:	6843      	ldr	r3, [r0, #4]
 80208f4:	4c02      	ldr	r4, [pc, #8]	@ (8020900 <_open_instance+0x38>)
 80208f6:	6860      	ldr	r0, [r4, #4]
 80208f8:	4798      	blx	r3
 80208fa:	60a0      	str	r0, [r4, #8]
 80208fc:	e7ee      	b.n	80208dc <_open_instance+0x14>
 80208fe:	bf00      	nop
 8020900:	20002c28 	.word	0x20002c28

08020904 <null_rx_free>:
static enqueue_realtime_command_ptr enqueue_realtime_command = protocol_enqueue_realtime_command;

static uint16_t null_rx_free (void)
{
    return RX_BUFFER_SIZE;
}
 8020904:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8020908:	4770      	bx	lr

0802090a <null_count>:

static uint16_t null_count (void)
{
    return 0;
}
 802090a:	2000      	movs	r0, #0
 802090c:	4770      	bx	lr

0802090e <null_put_c>:

static bool null_put_c (const char c)
{
    return true;
}
 802090e:	2001      	movs	r0, #1
 8020910:	4770      	bx	lr

08020912 <null_write_string>:

static void null_write_string (const char *s)
{
}
 8020912:	4770      	bx	lr

08020914 <null_write>:

static void null_write(const char *s, uint16_t length)
{
}
 8020914:	4770      	bx	lr

08020916 <null_suspend_disable>:

static bool null_suspend_disable (bool suspend)
{
    return true;
}
 8020916:	2001      	movs	r0, #1
 8020918:	4770      	bx	lr

0802091a <null_set_baudrate>:

static bool null_set_baudrate (uint32_t baud_rate)
{
    return true;
}
 802091a:	2001      	movs	r0, #1
 802091c:	4770      	bx	lr
	...

08020920 <null_enqueue_rt_command>:

static bool null_enqueue_rt_command (char c)
{
 8020920:	b508      	push	{r3, lr}
    return enqueue_realtime_command(c);
 8020922:	4b02      	ldr	r3, [pc, #8]	@ (802092c <null_enqueue_rt_command+0xc>)
 8020924:	681b      	ldr	r3, [r3, #0]
 8020926:	4798      	blx	r3
}
 8020928:	bd08      	pop	{r3, pc}
 802092a:	bf00      	nop
 802092c:	2000048c 	.word	0x2000048c

08020930 <null_set_rt_handler>:

static enqueue_realtime_command_ptr null_set_rt_handler (enqueue_realtime_command_ptr handler)
{
 8020930:	4603      	mov	r3, r0
    enqueue_realtime_command_ptr prev = enqueue_realtime_command;
 8020932:	4a03      	ldr	r2, [pc, #12]	@ (8020940 <null_set_rt_handler+0x10>)
 8020934:	6810      	ldr	r0, [r2, #0]

    if(handler)
 8020936:	461a      	mov	r2, r3
 8020938:	b10b      	cbz	r3, 802093e <null_set_rt_handler+0xe>
        enqueue_realtime_command = handler;
 802093a:	4b01      	ldr	r3, [pc, #4]	@ (8020940 <null_set_rt_handler+0x10>)
 802093c:	601a      	str	r2, [r3, #0]

    return prev;
}
 802093e:	4770      	bx	lr
 8020940:	2000048c 	.word	0x2000048c

08020944 <stream_null_init>:
        .set_baud_rate = null_set_baudrate,
        .set_enqueue_rt_handler = null_set_rt_handler
    };

    return &stream;
}
 8020944:	4800      	ldr	r0, [pc, #0]	@ (8020948 <stream_null_init+0x4>)
 8020946:	4770      	bx	lr
 8020948:	08030b64 	.word	0x08030b64

0802094c <await_toolchange_ack>:
{
 802094c:	b510      	push	{r4, lr}
    if(c == CMD_TOOL_ACK && !stream.rxbuffer->backup) {
 802094e:	28a3      	cmp	r0, #163	@ 0xa3
 8020950:	d103      	bne.n	802095a <await_toolchange_ack+0xe>
 8020952:	4b13      	ldr	r3, [pc, #76]	@ (80209a0 <await_toolchange_ack+0x54>)
 8020954:	689c      	ldr	r4, [r3, #8]
 8020956:	7aa3      	ldrb	r3, [r4, #10]
 8020958:	b11b      	cbz	r3, 8020962 <await_toolchange_ack+0x16>
        return stream.enqueue_realtime_command(c);
 802095a:	4b11      	ldr	r3, [pc, #68]	@ (80209a0 <await_toolchange_ack+0x54>)
 802095c:	681b      	ldr	r3, [r3, #0]
 802095e:	4798      	blx	r3
}
 8020960:	bd10      	pop	{r4, pc}
        memcpy(&rxbackup, stream.rxbuffer, sizeof(stream_rx_buffer_t));
 8020962:	f240 420c 	movw	r2, #1036	@ 0x40c
 8020966:	4621      	mov	r1, r4
 8020968:	480e      	ldr	r0, [pc, #56]	@ (80209a4 <await_toolchange_ack+0x58>)
 802096a:	f004 fb40 	bl	8024fee <memcpy>
        stream.rxbuffer->backup = true;
 802096e:	2301      	movs	r3, #1
 8020970:	72a3      	strb	r3, [r4, #10]
        stream.rxbuffer->tail = stream.rxbuffer->head;
 8020972:	6823      	ldr	r3, [r4, #0]
 8020974:	6063      	str	r3, [r4, #4]
        hal.stream.read = stream.read; // restore normal input
 8020976:	4c0a      	ldr	r4, [pc, #40]	@ (80209a0 <await_toolchange_ack+0x54>)
 8020978:	6862      	ldr	r2, [r4, #4]
 802097a:	4b0b      	ldr	r3, [pc, #44]	@ (80209a8 <await_toolchange_ack+0x5c>)
 802097c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        hal.stream.set_enqueue_rt_handler(stream.enqueue_realtime_command);
 8020980:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8020984:	6820      	ldr	r0, [r4, #0]
 8020986:	4798      	blx	r3
        stream.enqueue_realtime_command = NULL;
 8020988:	2300      	movs	r3, #0
 802098a:	6023      	str	r3, [r4, #0]
        if(grbl.on_toolchange_ack)
 802098c:	4b07      	ldr	r3, [pc, #28]	@ (80209ac <await_toolchange_ack+0x60>)
 802098e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8020992:	b113      	cbz	r3, 802099a <await_toolchange_ack+0x4e>
            grbl.on_toolchange_ack();
 8020994:	4798      	blx	r3
    return true;
 8020996:	2001      	movs	r0, #1
 8020998:	e7e2      	b.n	8020960 <await_toolchange_ack+0x14>
 802099a:	2001      	movs	r0, #1
 802099c:	e7e0      	b.n	8020960 <await_toolchange_ack+0x14>
 802099e:	bf00      	nop
 80209a0:	20002c60 	.word	0x20002c60
 80209a4:	20002c6c 	.word	0x20002c6c
 80209a8:	20001a90 	.word	0x20001a90
 80209ac:	20001c78 	.word	0x20001c78

080209b0 <add_connection>:
{
 80209b0:	b510      	push	{r4, lr}
 80209b2:	4604      	mov	r4, r0
    if(base.stream == NULL) {
 80209b4:	4b15      	ldr	r3, [pc, #84]	@ (8020a0c <add_connection+0x5c>)
 80209b6:	681b      	ldr	r3, [r3, #0]
 80209b8:	b18b      	cbz	r3, 80209de <add_connection+0x2e>
    } else if((connection = malloc(sizeof(stream_connection_t)))) {
 80209ba:	2014      	movs	r0, #20
 80209bc:	f002 f8ee 	bl	8022b9c <malloc>
 80209c0:	b178      	cbz	r0, 80209e2 <add_connection+0x32>
        connection->stream = stream;
 80209c2:	6004      	str	r4, [r0, #0]
        connection->next = NULL;
 80209c4:	2300      	movs	r3, #0
 80209c6:	60c3      	str	r3, [r0, #12]
    stream_connection_t *connection, *last = connections;
 80209c8:	4b10      	ldr	r3, [pc, #64]	@ (8020a0c <add_connection+0x5c>)
        while(last->next) {
 80209ca:	461a      	mov	r2, r3
 80209cc:	68db      	ldr	r3, [r3, #12]
 80209ce:	b163      	cbz	r3, 80209ea <add_connection+0x3a>
            if(last->stream == stream) {
 80209d0:	681a      	ldr	r2, [r3, #0]
 80209d2:	42a2      	cmp	r2, r4
 80209d4:	d1f9      	bne.n	80209ca <add_connection+0x1a>
                free(connection);
 80209d6:	f002 f8e9 	bl	8022bac <free>
                return NULL;
 80209da:	2000      	movs	r0, #0
 80209dc:	e004      	b.n	80209e8 <add_connection+0x38>
        base.stream = stream;
 80209de:	480b      	ldr	r0, [pc, #44]	@ (8020a0c <add_connection+0x5c>)
 80209e0:	6004      	str	r4, [r0, #0]
    connection->is_up = stream->is_connected ?
 80209e2:	6863      	ldr	r3, [r4, #4]
                         stream->is_connected :
 80209e4:	b123      	cbz	r3, 80209f0 <add_connection+0x40>
    connection->is_up = stream->is_connected ?
 80209e6:	6043      	str	r3, [r0, #4]
}
 80209e8:	bd10      	pop	{r4, pc}
        connection->prev = last;
 80209ea:	6102      	str	r2, [r0, #16]
        last->next = connection;
 80209ec:	60d0      	str	r0, [r2, #12]
 80209ee:	e7f8      	b.n	80209e2 <add_connection+0x32>
                          (stream->state.is_usb && base.stream != stream ? is_not_connected : stream_connected);
 80209f0:	78a3      	ldrb	r3, [r4, #2]
 80209f2:	f013 0f04 	tst.w	r3, #4
 80209f6:	d007      	beq.n	8020a08 <add_connection+0x58>
 80209f8:	4b04      	ldr	r3, [pc, #16]	@ (8020a0c <add_connection+0x5c>)
 80209fa:	681b      	ldr	r3, [r3, #0]
 80209fc:	42a3      	cmp	r3, r4
 80209fe:	d001      	beq.n	8020a04 <add_connection+0x54>
 8020a00:	4b03      	ldr	r3, [pc, #12]	@ (8020a10 <add_connection+0x60>)
 8020a02:	e7f0      	b.n	80209e6 <add_connection+0x36>
 8020a04:	4b03      	ldr	r3, [pc, #12]	@ (8020a14 <add_connection+0x64>)
 8020a06:	e7ee      	b.n	80209e6 <add_connection+0x36>
 8020a08:	4b02      	ldr	r3, [pc, #8]	@ (8020a14 <add_connection+0x64>)
 8020a0a:	e7ec      	b.n	80209e6 <add_connection+0x36>
 8020a0c:	20002c4c 	.word	0x20002c4c
 8020a10:	08020857 	.word	0x08020857
 8020a14:	08020853 	.word	0x08020853

08020a18 <stream_register_streams>:
    if(details->n_streams) {
 8020a18:	7803      	ldrb	r3, [r0, #0]
 8020a1a:	b11b      	cbz	r3, 8020a24 <stream_register_streams+0xc>
        details->next = streams;
 8020a1c:	4b02      	ldr	r3, [pc, #8]	@ (8020a28 <stream_register_streams+0x10>)
 8020a1e:	681a      	ldr	r2, [r3, #0]
 8020a20:	6082      	str	r2, [r0, #8]
        streams = details;
 8020a22:	6018      	str	r0, [r3, #0]
}
 8020a24:	4770      	bx	lr
 8020a26:	bf00      	nop
 8020a28:	20000490 	.word	0x20000490

08020a2c <stream_enumerate_streams>:
    if(callback == NULL)
 8020a2c:	b1a8      	cbz	r0, 8020a5a <stream_enumerate_streams+0x2e>
{
 8020a2e:	b570      	push	{r4, r5, r6, lr}
 8020a30:	4606      	mov	r6, r0
    io_stream_details_t *details = streams;
 8020a32:	4b0c      	ldr	r3, [pc, #48]	@ (8020a64 <stream_enumerate_streams+0x38>)
 8020a34:	681d      	ldr	r5, [r3, #0]
    bool claimed = false;
 8020a36:	2200      	movs	r2, #0
    while(details && !claimed) {
 8020a38:	e000      	b.n	8020a3c <stream_enumerate_streams+0x10>
        details = details->next;
 8020a3a:	68ad      	ldr	r5, [r5, #8]
    while(details && !claimed) {
 8020a3c:	b185      	cbz	r5, 8020a60 <stream_enumerate_streams+0x34>
 8020a3e:	b97a      	cbnz	r2, 8020a60 <stream_enumerate_streams+0x34>
        for(idx = 0; idx < details->n_streams; idx++) {
 8020a40:	2400      	movs	r4, #0
 8020a42:	782b      	ldrb	r3, [r5, #0]
 8020a44:	42a3      	cmp	r3, r4
 8020a46:	d9f8      	bls.n	8020a3a <stream_enumerate_streams+0xe>
            if((claimed = callback(&details->streams[idx])))
 8020a48:	6868      	ldr	r0, [r5, #4]
 8020a4a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8020a4e:	47b0      	blx	r6
 8020a50:	4602      	mov	r2, r0
 8020a52:	2800      	cmp	r0, #0
 8020a54:	d1f1      	bne.n	8020a3a <stream_enumerate_streams+0xe>
        for(idx = 0; idx < details->n_streams; idx++) {
 8020a56:	3401      	adds	r4, #1
 8020a58:	e7f3      	b.n	8020a42 <stream_enumerate_streams+0x16>
        return false;
 8020a5a:	2200      	movs	r2, #0
}
 8020a5c:	4610      	mov	r0, r2
 8020a5e:	4770      	bx	lr
 8020a60:	4610      	mov	r0, r2
 8020a62:	bd70      	pop	{r4, r5, r6, pc}
 8020a64:	20000490 	.word	0x20000490

08020a68 <stream_tx_blocking>:
{
 8020a68:	b510      	push	{r4, lr}
    grbl.on_execute_realtime(state_get());
 8020a6a:	4b06      	ldr	r3, [pc, #24]	@ (8020a84 <stream_tx_blocking+0x1c>)
 8020a6c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8020a6e:	f7fe fa6b 	bl	801ef48 <state_get>
 8020a72:	47a0      	blx	r4
    return !(sys.rt_exec_state & EXEC_RESET);
 8020a74:	4b04      	ldr	r3, [pc, #16]	@ (8020a88 <stream_tx_blocking+0x20>)
 8020a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8020a78:	f013 0f20 	tst.w	r3, #32
}
 8020a7c:	bf0c      	ite	eq
 8020a7e:	2001      	moveq	r0, #1
 8020a80:	2000      	movne	r0, #0
 8020a82:	bd10      	pop	{r4, pc}
 8020a84:	20001c78 	.word	0x20001c78
 8020a88:	20001d70 	.word	0x20001d70

08020a8c <stream_rx_suspend>:
{
 8020a8c:	b570      	push	{r4, r5, r6, lr}
 8020a8e:	4604      	mov	r4, r0
    if(suspend) {
 8020a90:	b1b9      	cbz	r1, 8020ac2 <stream_rx_suspend+0x36>
        if(stream.rxbuffer == NULL) {
 8020a92:	4b1a      	ldr	r3, [pc, #104]	@ (8020afc <stream_rx_suspend+0x70>)
 8020a94:	689b      	ldr	r3, [r3, #8]
 8020a96:	b12b      	cbz	r3, 8020aa4 <stream_rx_suspend+0x18>
    return rxbuffer->tail != rxbuffer->head;
 8020a98:	6860      	ldr	r0, [r4, #4]
 8020a9a:	6823      	ldr	r3, [r4, #0]
}
 8020a9c:	1ac0      	subs	r0, r0, r3
 8020a9e:	bf18      	it	ne
 8020aa0:	2001      	movne	r0, #1
 8020aa2:	bd70      	pop	{r4, r5, r6, pc}
            stream.rxbuffer = rxbuffer;
 8020aa4:	4e15      	ldr	r6, [pc, #84]	@ (8020afc <stream_rx_suspend+0x70>)
 8020aa6:	60b0      	str	r0, [r6, #8]
            stream.read = hal.stream.read;
 8020aa8:	4d15      	ldr	r5, [pc, #84]	@ (8020b00 <stream_rx_suspend+0x74>)
 8020aaa:	f8d5 30c4 	ldr.w	r3, [r5, #196]	@ 0xc4
 8020aae:	6073      	str	r3, [r6, #4]
            stream.enqueue_realtime_command = hal.stream.set_enqueue_rt_handler(await_toolchange_ack);
 8020ab0:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 8020ab4:	4813      	ldr	r0, [pc, #76]	@ (8020b04 <stream_rx_suspend+0x78>)
 8020ab6:	4798      	blx	r3
 8020ab8:	6030      	str	r0, [r6, #0]
            hal.stream.read = stream_get_null;
 8020aba:	4b13      	ldr	r3, [pc, #76]	@ (8020b08 <stream_rx_suspend+0x7c>)
 8020abc:	f8c5 30c4 	str.w	r3, [r5, #196]	@ 0xc4
 8020ac0:	e7ea      	b.n	8020a98 <stream_rx_suspend+0xc>
    } else if(stream.rxbuffer) {
 8020ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8020afc <stream_rx_suspend+0x70>)
 8020ac4:	689b      	ldr	r3, [r3, #8]
 8020ac6:	2b00      	cmp	r3, #0
 8020ac8:	d0e6      	beq.n	8020a98 <stream_rx_suspend+0xc>
        if(rxbuffer->backup)
 8020aca:	7a83      	ldrb	r3, [r0, #10]
 8020acc:	b983      	cbnz	r3, 8020af0 <stream_rx_suspend+0x64>
        if(stream.enqueue_realtime_command) {
 8020ace:	4b0b      	ldr	r3, [pc, #44]	@ (8020afc <stream_rx_suspend+0x70>)
 8020ad0:	6818      	ldr	r0, [r3, #0]
 8020ad2:	b148      	cbz	r0, 8020ae8 <stream_rx_suspend+0x5c>
            hal.stream.read = stream.read; // restore normal input
 8020ad4:	461d      	mov	r5, r3
 8020ad6:	685a      	ldr	r2, [r3, #4]
 8020ad8:	4b09      	ldr	r3, [pc, #36]	@ (8020b00 <stream_rx_suspend+0x74>)
 8020ada:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
            hal.stream.set_enqueue_rt_handler(stream.enqueue_realtime_command);
 8020ade:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8020ae2:	4798      	blx	r3
            stream.enqueue_realtime_command = NULL;
 8020ae4:	2300      	movs	r3, #0
 8020ae6:	602b      	str	r3, [r5, #0]
        stream.rxbuffer = NULL;
 8020ae8:	4b04      	ldr	r3, [pc, #16]	@ (8020afc <stream_rx_suspend+0x70>)
 8020aea:	2200      	movs	r2, #0
 8020aec:	609a      	str	r2, [r3, #8]
 8020aee:	e7d3      	b.n	8020a98 <stream_rx_suspend+0xc>
            memcpy(rxbuffer, &rxbackup, sizeof(stream_rx_buffer_t));
 8020af0:	f240 420c 	movw	r2, #1036	@ 0x40c
 8020af4:	4905      	ldr	r1, [pc, #20]	@ (8020b0c <stream_rx_suspend+0x80>)
 8020af6:	f004 fa7a 	bl	8024fee <memcpy>
 8020afa:	e7e8      	b.n	8020ace <stream_rx_suspend+0x42>
 8020afc:	20002c60 	.word	0x20002c60
 8020b00:	20001a90 	.word	0x20001a90
 8020b04:	0802094d 	.word	0x0802094d
 8020b08:	0802084d 	.word	0x0802084d
 8020b0c:	20002c6c 	.word	0x20002c6c

08020b10 <stream_enqueue_realtime_command>:
{
 8020b10:	b510      	push	{r4, lr}
 8020b12:	4604      	mov	r4, r0
	bool drop = hal.stream.enqueue_rt_command ? hal.stream.enqueue_rt_command(c) : protocol_enqueue_realtime_command(c);
 8020b14:	4b0c      	ldr	r3, [pc, #48]	@ (8020b48 <stream_enqueue_realtime_command+0x38>)
 8020b16:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8020b1a:	b193      	cbz	r3, 8020b42 <stream_enqueue_realtime_command+0x32>
 8020b1c:	4798      	blx	r3
    if(drop && (c == CMD_CYCLE_START || c == CMD_CYCLE_START_LEGACY))
 8020b1e:	b178      	cbz	r0, 8020b40 <stream_enqueue_realtime_command+0x30>
 8020b20:	2c81      	cmp	r4, #129	@ 0x81
 8020b22:	d001      	beq.n	8020b28 <stream_enqueue_realtime_command+0x18>
 8020b24:	2c7e      	cmp	r4, #126	@ 0x7e
 8020b26:	d10b      	bne.n	8020b40 <stream_enqueue_realtime_command+0x30>
        sys.report.cycle_start = settings.status_report.pin_state;
 8020b28:	4b08      	ldr	r3, [pc, #32]	@ (8020b4c <stream_enqueue_realtime_command+0x3c>)
 8020b2a:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8020b2e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8020b32:	4a07      	ldr	r2, [pc, #28]	@ (8020b50 <stream_enqueue_realtime_command+0x40>)
 8020b34:	f892 1033 	ldrb.w	r1, [r2, #51]	@ 0x33
 8020b38:	f363 1186 	bfi	r1, r3, #6, #1
 8020b3c:	f882 1033 	strb.w	r1, [r2, #51]	@ 0x33
}
 8020b40:	bd10      	pop	{r4, pc}
	bool drop = hal.stream.enqueue_rt_command ? hal.stream.enqueue_rt_command(c) : protocol_enqueue_realtime_command(c);
 8020b42:	f7f7 f9ab 	bl	8017e9c <protocol_enqueue_realtime_command>
 8020b46:	e7ea      	b.n	8020b1e <stream_enqueue_realtime_command+0xe>
 8020b48:	20001a90 	.word	0x20001a90
 8020b4c:	200024a8 	.word	0x200024a8
 8020b50:	20001d70 	.word	0x20001d70

08020b54 <stream_set_description>:
{
 8020b54:	b538      	push	{r3, r4, r5, lr}
    if((ok = stream->type == StreamType_Serial && !stream->state.is_usb && hal.periph_port.set_pin_description)) {
 8020b56:	6803      	ldr	r3, [r0, #0]
 8020b58:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020b5c:	f423 037b 	bic.w	r3, r3, #16449536	@ 0xfb0000
 8020b60:	b9a3      	cbnz	r3, 8020b8c <stream_set_description+0x38>
 8020b62:	4604      	mov	r4, r0
 8020b64:	460d      	mov	r5, r1
 8020b66:	4b0b      	ldr	r3, [pc, #44]	@ (8020b94 <stream_set_description+0x40>)
 8020b68:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8020b6c:	b183      	cbz	r3, 8020b90 <stream_set_description+0x3c>
        hal.periph_port.set_pin_description(Output_TX, (pin_group_t)(PinGroup_UART + stream->instance), description);
 8020b6e:	7841      	ldrb	r1, [r0, #1]
 8020b70:	462a      	mov	r2, r5
 8020b72:	3111      	adds	r1, #17
 8020b74:	209f      	movs	r0, #159	@ 0x9f
 8020b76:	4798      	blx	r3
        hal.periph_port.set_pin_description(Input_RX, (pin_group_t)(PinGroup_UART + stream->instance), description);
 8020b78:	4b06      	ldr	r3, [pc, #24]	@ (8020b94 <stream_set_description+0x40>)
 8020b7a:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8020b7e:	7861      	ldrb	r1, [r4, #1]
 8020b80:	462a      	mov	r2, r5
 8020b82:	3111      	adds	r1, #17
 8020b84:	209e      	movs	r0, #158	@ 0x9e
 8020b86:	4798      	blx	r3
    if((ok = stream->type == StreamType_Serial && !stream->state.is_usb && hal.periph_port.set_pin_description)) {
 8020b88:	2001      	movs	r0, #1
 8020b8a:	e000      	b.n	8020b8e <stream_set_description+0x3a>
 8020b8c:	2000      	movs	r0, #0
}
 8020b8e:	bd38      	pop	{r3, r4, r5, pc}
    if((ok = stream->type == StreamType_Serial && !stream->state.is_usb && hal.periph_port.set_pin_description)) {
 8020b90:	2000      	movs	r0, #0
 8020b92:	e7fc      	b.n	8020b8e <stream_set_description+0x3a>
 8020b94:	20001a90 	.word	0x20001a90

08020b98 <stream_mpg_enable>:
    if(mpg.stream == NULL)
 8020b98:	4b47      	ldr	r3, [pc, #284]	@ (8020cb8 <stream_mpg_enable+0x120>)
 8020b9a:	681b      	ldr	r3, [r3, #0]
 8020b9c:	2b00      	cmp	r3, #0
 8020b9e:	f000 8088 	beq.w	8020cb2 <stream_mpg_enable+0x11a>
{
 8020ba2:	b570      	push	{r4, r5, r6, lr}
 8020ba4:	4604      	mov	r4, r0
    sys_state_t state = state_get();
 8020ba6:	f7fe f9cf 	bl	801ef48 <state_get>
    if(on == sys.mpg_mode || (on && (gc_state.file_run || !(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP)))))) {
 8020baa:	4b44      	ldr	r3, [pc, #272]	@ (8020cbc <stream_mpg_enable+0x124>)
 8020bac:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8020bb0:	42a3      	cmp	r3, r4
 8020bb2:	d042      	beq.n	8020c3a <stream_mpg_enable+0xa2>
 8020bb4:	2c00      	cmp	r4, #0
 8020bb6:	d045      	beq.n	8020c44 <stream_mpg_enable+0xac>
 8020bb8:	4b41      	ldr	r3, [pc, #260]	@ (8020cc0 <stream_mpg_enable+0x128>)
 8020bba:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8020bbe:	2b00      	cmp	r3, #0
 8020bc0:	d13b      	bne.n	8020c3a <stream_mpg_enable+0xa2>
 8020bc2:	b118      	cbz	r0, 8020bcc <stream_mpg_enable+0x34>
 8020bc4:	f240 1301 	movw	r3, #257	@ 0x101
 8020bc8:	4218      	tst	r0, r3
 8020bca:	d036      	beq.n	8020c3a <stream_mpg_enable+0xa2>
        if(org_stream.type == StreamType_Redirected) {
 8020bcc:	4b3d      	ldr	r3, [pc, #244]	@ (8020cc4 <stream_mpg_enable+0x12c>)
 8020bce:	781b      	ldrb	r3, [r3, #0]
 8020bd0:	2b06      	cmp	r3, #6
 8020bd2:	d151      	bne.n	8020c78 <stream_mpg_enable+0xe0>
            memcpy(&org_stream, &hal.stream, sizeof(io_stream_t));
 8020bd4:	4d3c      	ldr	r5, [pc, #240]	@ (8020cc8 <stream_mpg_enable+0x130>)
 8020bd6:	224c      	movs	r2, #76	@ 0x4c
 8020bd8:	f105 01a8 	add.w	r1, r5, #168	@ 0xa8
 8020bdc:	4839      	ldr	r0, [pc, #228]	@ (8020cc4 <stream_mpg_enable+0x12c>)
 8020bde:	f004 fa06 	bl	8024fee <memcpy>
            if(hal.stream.disable_rx)
 8020be2:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
 8020be6:	b10b      	cbz	r3, 8020bec <stream_mpg_enable+0x54>
                hal.stream.disable_rx(true);
 8020be8:	2001      	movs	r0, #1
 8020bea:	4798      	blx	r3
            mpg.stream->disable_rx(false);
 8020bec:	4d32      	ldr	r5, [pc, #200]	@ (8020cb8 <stream_mpg_enable+0x120>)
 8020bee:	682b      	ldr	r3, [r5, #0]
 8020bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020bf2:	2000      	movs	r0, #0
 8020bf4:	4798      	blx	r3
            mpg.stream->set_enqueue_rt_handler(org_stream.set_enqueue_rt_handler(NULL));
 8020bf6:	682b      	ldr	r3, [r5, #0]
 8020bf8:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 8020bfa:	4b32      	ldr	r3, [pc, #200]	@ (8020cc4 <stream_mpg_enable+0x12c>)
 8020bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020bfe:	2000      	movs	r0, #0
 8020c00:	4798      	blx	r3
 8020c02:	47b0      	blx	r6
            hal.stream.type = StreamType_MPG;
 8020c04:	4a30      	ldr	r2, [pc, #192]	@ (8020cc8 <stream_mpg_enable+0x130>)
 8020c06:	2301      	movs	r3, #1
 8020c08:	f882 30a8 	strb.w	r3, [r2, #168]	@ 0xa8
            hal.stream.read = mpg.stream->read;
 8020c0c:	682b      	ldr	r3, [r5, #0]
 8020c0e:	69d9      	ldr	r1, [r3, #28]
 8020c10:	f8c2 10c4 	str.w	r1, [r2, #196]	@ 0xc4
            if(mpg.flags.is_mpg_tx)
 8020c14:	7a2a      	ldrb	r2, [r5, #8]
 8020c16:	f012 0f02 	tst.w	r2, #2
 8020c1a:	d003      	beq.n	8020c24 <stream_mpg_enable+0x8c>
                hal.stream.write = mpg.stream->write;
 8020c1c:	68d9      	ldr	r1, [r3, #12]
 8020c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8020cc8 <stream_mpg_enable+0x130>)
 8020c20:	f8c2 10b4 	str.w	r1, [r2, #180]	@ 0xb4
            hal.stream.get_rx_buffer_free = mpg.stream->get_rx_buffer_free;
 8020c24:	6899      	ldr	r1, [r3, #8]
 8020c26:	4a28      	ldr	r2, [pc, #160]	@ (8020cc8 <stream_mpg_enable+0x130>)
 8020c28:	f8c2 10b0 	str.w	r1, [r2, #176]	@ 0xb0
            hal.stream.cancel_read_buffer = mpg.stream->cancel_read_buffer;
 8020c2c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8020c2e:	f8c2 10cc 	str.w	r1, [r2, #204]	@ 0xcc
            hal.stream.reset_read_buffer = mpg.stream->reset_read_buffer;
 8020c32:	6a1b      	ldr	r3, [r3, #32]
 8020c34:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
 8020c38:	e01e      	b.n	8020c78 <stream_mpg_enable+0xe0>
        protocol_enqueue_realtime_command(CMD_STATUS_REPORT_ALL);
 8020c3a:	2087      	movs	r0, #135	@ 0x87
 8020c3c:	f7f7 f92e 	bl	8017e9c <protocol_enqueue_realtime_command>
        return false;
 8020c40:	2000      	movs	r0, #0
 8020c42:	e02d      	b.n	8020ca0 <stream_mpg_enable+0x108>
    } else if(org_stream.type != StreamType_Redirected) {
 8020c44:	4b1f      	ldr	r3, [pc, #124]	@ (8020cc4 <stream_mpg_enable+0x12c>)
 8020c46:	781b      	ldrb	r3, [r3, #0]
 8020c48:	2b06      	cmp	r3, #6
 8020c4a:	d015      	beq.n	8020c78 <stream_mpg_enable+0xe0>
        if(mpg_write_char)
 8020c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8020ccc <stream_mpg_enable+0x134>)
 8020c4e:	6818      	ldr	r0, [r3, #0]
 8020c50:	b338      	cbz	r0, 8020ca2 <stream_mpg_enable+0x10a>
            mpg.stream->set_enqueue_rt_handler(mpg_write_char);
 8020c52:	4b19      	ldr	r3, [pc, #100]	@ (8020cb8 <stream_mpg_enable+0x120>)
 8020c54:	681b      	ldr	r3, [r3, #0]
 8020c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020c58:	4798      	blx	r3
        memcpy(&hal.stream, &org_stream, sizeof(io_stream_t));
 8020c5a:	4d1b      	ldr	r5, [pc, #108]	@ (8020cc8 <stream_mpg_enable+0x130>)
 8020c5c:	4e19      	ldr	r6, [pc, #100]	@ (8020cc4 <stream_mpg_enable+0x12c>)
 8020c5e:	224c      	movs	r2, #76	@ 0x4c
 8020c60:	4631      	mov	r1, r6
 8020c62:	f105 00a8 	add.w	r0, r5, #168	@ 0xa8
 8020c66:	f004 f9c2 	bl	8024fee <memcpy>
        org_stream.type = StreamType_Redirected;
 8020c6a:	2306      	movs	r3, #6
 8020c6c:	7033      	strb	r3, [r6, #0]
        if(hal.stream.disable_rx)
 8020c6e:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
 8020c72:	b10b      	cbz	r3, 8020c78 <stream_mpg_enable+0xe0>
            hal.stream.disable_rx(false);
 8020c74:	2000      	movs	r0, #0
 8020c76:	4798      	blx	r3
    hal.stream.reset_read_buffer();
 8020c78:	4b13      	ldr	r3, [pc, #76]	@ (8020cc8 <stream_mpg_enable+0x130>)
 8020c7a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8020c7e:	4798      	blx	r3
    sys.mpg_mode = on;
 8020c80:	4b0e      	ldr	r3, [pc, #56]	@ (8020cbc <stream_mpg_enable+0x124>)
 8020c82:	f883 407f 	strb.w	r4, [r3, #127]	@ 0x7f
    mpg.flags.mpg_control = Off;
 8020c86:	4b0c      	ldr	r3, [pc, #48]	@ (8020cb8 <stream_mpg_enable+0x120>)
 8020c88:	7a1a      	ldrb	r2, [r3, #8]
 8020c8a:	f36f 0200 	bfc	r2, #0, #1
 8020c8e:	721a      	strb	r2, [r3, #8]
    system_add_rt_report(Report_MPGMode);
 8020c90:	2001      	movs	r0, #1
 8020c92:	f001 f917 	bl	8021ec4 <system_add_rt_report>
    protocol_enqueue_realtime_command(on ? CMD_STATUS_REPORT_ALL : CMD_STATUS_REPORT);
 8020c96:	b154      	cbz	r4, 8020cae <stream_mpg_enable+0x116>
 8020c98:	2087      	movs	r0, #135	@ 0x87
 8020c9a:	f7f7 f8ff 	bl	8017e9c <protocol_enqueue_realtime_command>
    return true;
 8020c9e:	2001      	movs	r0, #1
}
 8020ca0:	bd70      	pop	{r4, r5, r6, pc}
            mpg.stream->disable_rx(true);
 8020ca2:	4b05      	ldr	r3, [pc, #20]	@ (8020cb8 <stream_mpg_enable+0x120>)
 8020ca4:	681b      	ldr	r3, [r3, #0]
 8020ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020ca8:	2001      	movs	r0, #1
 8020caa:	4798      	blx	r3
 8020cac:	e7d5      	b.n	8020c5a <stream_mpg_enable+0xc2>
    protocol_enqueue_realtime_command(on ? CMD_STATUS_REPORT_ALL : CMD_STATUS_REPORT);
 8020cae:	2080      	movs	r0, #128	@ 0x80
 8020cb0:	e7f3      	b.n	8020c9a <stream_mpg_enable+0x102>
        return false;
 8020cb2:	2000      	movs	r0, #0
}
 8020cb4:	4770      	bx	lr
 8020cb6:	bf00      	nop
 8020cb8:	20002c38 	.word	0x20002c38
 8020cbc:	20001d70 	.word	0x20001d70
 8020cc0:	200017c8 	.word	0x200017c8
 8020cc4:	20000440 	.word	0x20000440
 8020cc8:	20001a90 	.word	0x20001a90
 8020ccc:	20002c34 	.word	0x20002c34

08020cd0 <stream_select>:
{
 8020cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020cd2:	4604      	mov	r4, r0
 8020cd4:	460d      	mov	r5, r1
    if(stream == base.stream) {
 8020cd6:	4b8e      	ldr	r3, [pc, #568]	@ (8020f10 <stream_select+0x240>)
 8020cd8:	681b      	ldr	r3, [r3, #0]
 8020cda:	4283      	cmp	r3, r0
 8020cdc:	d00b      	beq.n	8020cf6 <stream_select+0x26>
    if(!add) { // disconnect
 8020cde:	2900      	cmp	r1, #0
 8020ce0:	d144      	bne.n	8020d6c <stream_select+0x9c>
        if(stream == base.stream || stream == mpg.stream)
 8020ce2:	4b8c      	ldr	r3, [pc, #560]	@ (8020f14 <stream_select+0x244>)
 8020ce4:	681b      	ldr	r3, [r3, #0]
 8020ce6:	4283      	cmp	r3, r0
 8020ce8:	f000 813a 	beq.w	8020f60 <stream_select+0x290>
        stream_connection_t *connection = connections->next;
 8020cec:	4b88      	ldr	r3, [pc, #544]	@ (8020f10 <stream_select+0x240>)
 8020cee:	68db      	ldr	r3, [r3, #12]
        bool disconnected = false;
 8020cf0:	4608      	mov	r0, r1
    bool send_init_message = false, mpg_enable = false;
 8020cf2:	460e      	mov	r6, r1
        while(connection) {
 8020cf4:	e014      	b.n	8020d20 <stream_select+0x50>
        base.is_up = add ? (stream->is_connected ? stream->is_connected : stream_connected) : is_not_connected;
 8020cf6:	b119      	cbz	r1, 8020d00 <stream_select+0x30>
 8020cf8:	6843      	ldr	r3, [r0, #4]
 8020cfa:	b913      	cbnz	r3, 8020d02 <stream_select+0x32>
 8020cfc:	4b86      	ldr	r3, [pc, #536]	@ (8020f18 <stream_select+0x248>)
 8020cfe:	e000      	b.n	8020d02 <stream_select+0x32>
 8020d00:	4b86      	ldr	r3, [pc, #536]	@ (8020f1c <stream_select+0x24c>)
 8020d02:	4a83      	ldr	r2, [pc, #524]	@ (8020f10 <stream_select+0x240>)
 8020d04:	6053      	str	r3, [r2, #4]
        return true;
 8020d06:	2001      	movs	r0, #1
 8020d08:	e0de      	b.n	8020ec8 <stream_select+0x1f8>
                	mpg_enable = mpg.flags.mpg_control;
 8020d0a:	4982      	ldr	r1, [pc, #520]	@ (8020f14 <stream_select+0x244>)
 8020d0c:	7a0e      	ldrb	r6, [r1, #8]
 8020d0e:	f006 0601 	and.w	r6, r6, #1
                	if((stream = connection->prev->prev->stream) == NULL)
 8020d12:	6912      	ldr	r2, [r2, #16]
 8020d14:	6814      	ldr	r4, [r2, #0]
 8020d16:	b99c      	cbnz	r4, 8020d40 <stream_select+0x70>
                		stream = base.stream;
 8020d18:	4a7d      	ldr	r2, [pc, #500]	@ (8020f10 <stream_select+0x240>)
 8020d1a:	6814      	ldr	r4, [r2, #0]
 8020d1c:	e010      	b.n	8020d40 <stream_select+0x70>
        		connection = connection->next;
 8020d1e:	68db      	ldr	r3, [r3, #12]
        while(connection) {
 8020d20:	b1a3      	cbz	r3, 8020d4c <stream_select+0x7c>
        	if(stream == connection->stream) {
 8020d22:	681a      	ldr	r2, [r3, #0]
 8020d24:	42a2      	cmp	r2, r4
 8020d26:	d1fa      	bne.n	8020d1e <stream_select+0x4e>
        		if((connection->prev->next = connection->next))
 8020d28:	6919      	ldr	r1, [r3, #16]
 8020d2a:	68da      	ldr	r2, [r3, #12]
 8020d2c:	60ca      	str	r2, [r1, #12]
 8020d2e:	b10a      	cbz	r2, 8020d34 <stream_select+0x64>
        			connection->next->prev = connection->prev;
 8020d30:	6919      	ldr	r1, [r3, #16]
 8020d32:	6111      	str	r1, [r2, #16]
                if((stream = connection->prev->stream) == mpg.stream) {
 8020d34:	691a      	ldr	r2, [r3, #16]
 8020d36:	6814      	ldr	r4, [r2, #0]
 8020d38:	4976      	ldr	r1, [pc, #472]	@ (8020f14 <stream_select+0x244>)
 8020d3a:	6809      	ldr	r1, [r1, #0]
 8020d3c:	42a1      	cmp	r1, r4
 8020d3e:	d0e4      	beq.n	8020d0a <stream_select+0x3a>
                free(connection);
 8020d40:	4618      	mov	r0, r3
 8020d42:	f001 ff33 	bl	8022bac <free>
        		connection = NULL;
 8020d46:	2300      	movs	r3, #0
        		disconnected = true;
 8020d48:	2001      	movs	r0, #1
 8020d4a:	e7e9      	b.n	8020d20 <stream_select+0x50>
        if(!disconnected)
 8020d4c:	2800      	cmp	r0, #0
 8020d4e:	f000 80bb 	beq.w	8020ec8 <stream_select+0x1f8>
    bool webui_connected = hal.stream.state.webui_connected;
 8020d52:	4b73      	ldr	r3, [pc, #460]	@ (8020f20 <stream_select+0x250>)
 8020d54:	f893 70aa 	ldrb.w	r7, [r3, #170]	@ 0xaa
 8020d58:	f3c7 0740 	ubfx	r7, r7, #1, #1
    switch(stream->type) {
 8020d5c:	7823      	ldrb	r3, [r4, #0]
 8020d5e:	2b04      	cmp	r3, #4
 8020d60:	d875      	bhi.n	8020e4e <stream_select+0x17e>
 8020d62:	e8df f003 	tbb	[pc, r3]
 8020d66:	740a      	.short	0x740a
 8020d68:	3060      	.short	0x3060
 8020d6a:	44          	.byte	0x44
 8020d6b:	00          	.byte	0x00
	} else if(add_connection(stream) == NULL)
 8020d6c:	f7ff fe20 	bl	80209b0 <add_connection>
 8020d70:	2800      	cmp	r0, #0
 8020d72:	f000 80f7 	beq.w	8020f64 <stream_select+0x294>
    bool send_init_message = false, mpg_enable = false;
 8020d76:	2600      	movs	r6, #0
 8020d78:	e7eb      	b.n	8020d52 <stream_select+0x82>
            if(active_stream && active_stream->type != StreamType_Serial && connection_is_up((io_stream_t *)stream)) {
 8020d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8020f24 <stream_select+0x254>)
 8020d7c:	681b      	ldr	r3, [r3, #0]
 8020d7e:	2b00      	cmp	r3, #0
 8020d80:	f000 80a3 	beq.w	8020eca <stream_select+0x1fa>
 8020d84:	781b      	ldrb	r3, [r3, #0]
 8020d86:	b90b      	cbnz	r3, 8020d8c <stream_select+0xbc>
    bool send_init_message = false, mpg_enable = false;
 8020d88:	2500      	movs	r5, #0
 8020d8a:	e061      	b.n	8020e50 <stream_select+0x180>
            if(active_stream && active_stream->type != StreamType_Serial && connection_is_up((io_stream_t *)stream)) {
 8020d8c:	4620      	mov	r0, r4
 8020d8e:	f7ff fd65 	bl	802085c <connection_is_up>
 8020d92:	4605      	mov	r5, r0
 8020d94:	2800      	cmp	r0, #0
 8020d96:	d05b      	beq.n	8020e50 <stream_select+0x180>
                hal.stream.write = stream->write;
 8020d98:	68e2      	ldr	r2, [r4, #12]
 8020d9a:	4b61      	ldr	r3, [pc, #388]	@ (8020f20 <stream_select+0x250>)
 8020d9c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
                report_message("SERIAL STREAM ACTIVE", Message_Plain);
 8020da0:	2100      	movs	r1, #0
 8020da2:	4861      	ldr	r0, [pc, #388]	@ (8020f28 <stream_select+0x258>)
 8020da4:	f7f8 fcc8 	bl	8019738 <report_message>
                if(stream->get_tx_buffer_count)
 8020da8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8020daa:	b12b      	cbz	r3, 8020db8 <stream_select+0xe8>
                    while(stream->get_tx_buffer_count());
 8020dac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8020dae:	4798      	blx	r3
 8020db0:	2800      	cmp	r0, #0
 8020db2:	d1fb      	bne.n	8020dac <stream_select+0xdc>
    bool send_init_message = false, mpg_enable = false;
 8020db4:	2500      	movs	r5, #0
 8020db6:	e04b      	b.n	8020e50 <stream_select+0x180>
                    hal.delay_ms(100, NULL);
 8020db8:	4b59      	ldr	r3, [pc, #356]	@ (8020f20 <stream_select+0x250>)
 8020dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020dbc:	2100      	movs	r1, #0
 8020dbe:	2064      	movs	r0, #100	@ 0x64
 8020dc0:	4798      	blx	r3
    bool send_init_message = false, mpg_enable = false;
 8020dc2:	2500      	movs	r5, #0
 8020dc4:	e044      	b.n	8020e50 <stream_select+0x180>
            if(connection_is_up(&hal.stream))
 8020dc6:	4859      	ldr	r0, [pc, #356]	@ (8020f2c <stream_select+0x25c>)
 8020dc8:	f7ff fd48 	bl	802085c <connection_is_up>
 8020dcc:	b930      	cbnz	r0, 8020ddc <stream_select+0x10c>
            send_init_message = add && sys.driver_started;
 8020dce:	b155      	cbz	r5, 8020de6 <stream_select+0x116>
 8020dd0:	4b57      	ldr	r3, [pc, #348]	@ (8020f30 <stream_select+0x260>)
 8020dd2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8020dd6:	b943      	cbnz	r3, 8020dea <stream_select+0x11a>
 8020dd8:	2500      	movs	r5, #0
 8020dda:	e039      	b.n	8020e50 <stream_select+0x180>
                report_message("TELNET STREAM ACTIVE", Message_Plain);
 8020ddc:	2100      	movs	r1, #0
 8020dde:	4855      	ldr	r0, [pc, #340]	@ (8020f34 <stream_select+0x264>)
 8020de0:	f7f8 fcaa 	bl	8019738 <report_message>
 8020de4:	e7f3      	b.n	8020dce <stream_select+0xfe>
            send_init_message = add && sys.driver_started;
 8020de6:	2500      	movs	r5, #0
 8020de8:	e032      	b.n	8020e50 <stream_select+0x180>
 8020dea:	2501      	movs	r5, #1
            break;
 8020dec:	e030      	b.n	8020e50 <stream_select+0x180>
            if(connection_is_up(&hal.stream))
 8020dee:	484f      	ldr	r0, [pc, #316]	@ (8020f2c <stream_select+0x25c>)
 8020df0:	f7ff fd34 	bl	802085c <connection_is_up>
 8020df4:	b960      	cbnz	r0, 8020e10 <stream_select+0x140>
            send_init_message = add && sys.driver_started && !hal.stream.state.webui_connected;
 8020df6:	b185      	cbz	r5, 8020e1a <stream_select+0x14a>
 8020df8:	4b4d      	ldr	r3, [pc, #308]	@ (8020f30 <stream_select+0x260>)
 8020dfa:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8020dfe:	b173      	cbz	r3, 8020e1e <stream_select+0x14e>
 8020e00:	4b47      	ldr	r3, [pc, #284]	@ (8020f20 <stream_select+0x250>)
 8020e02:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 8020e06:	f013 0f02 	tst.w	r3, #2
 8020e0a:	d00a      	beq.n	8020e22 <stream_select+0x152>
 8020e0c:	2500      	movs	r5, #0
 8020e0e:	e01f      	b.n	8020e50 <stream_select+0x180>
                report_message("WEBSOCKET STREAM ACTIVE", Message_Plain);
 8020e10:	2100      	movs	r1, #0
 8020e12:	4849      	ldr	r0, [pc, #292]	@ (8020f38 <stream_select+0x268>)
 8020e14:	f7f8 fc90 	bl	8019738 <report_message>
 8020e18:	e7ed      	b.n	8020df6 <stream_select+0x126>
            send_init_message = add && sys.driver_started && !hal.stream.state.webui_connected;
 8020e1a:	2500      	movs	r5, #0
 8020e1c:	e018      	b.n	8020e50 <stream_select+0x180>
 8020e1e:	2500      	movs	r5, #0
 8020e20:	e016      	b.n	8020e50 <stream_select+0x180>
 8020e22:	2501      	movs	r5, #1
            break;
 8020e24:	e014      	b.n	8020e50 <stream_select+0x180>
            if(connection_is_up(&hal.stream))
 8020e26:	4841      	ldr	r0, [pc, #260]	@ (8020f2c <stream_select+0x25c>)
 8020e28:	f7ff fd18 	bl	802085c <connection_is_up>
 8020e2c:	b930      	cbnz	r0, 8020e3c <stream_select+0x16c>
            send_init_message = add && sys.driver_started;
 8020e2e:	b155      	cbz	r5, 8020e46 <stream_select+0x176>
 8020e30:	4b3f      	ldr	r3, [pc, #252]	@ (8020f30 <stream_select+0x260>)
 8020e32:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8020e36:	b943      	cbnz	r3, 8020e4a <stream_select+0x17a>
 8020e38:	2500      	movs	r5, #0
 8020e3a:	e009      	b.n	8020e50 <stream_select+0x180>
                report_message("BLUETOOTH STREAM ACTIVE", Message_Plain);
 8020e3c:	2100      	movs	r1, #0
 8020e3e:	483f      	ldr	r0, [pc, #252]	@ (8020f3c <stream_select+0x26c>)
 8020e40:	f7f8 fc7a 	bl	8019738 <report_message>
 8020e44:	e7f3      	b.n	8020e2e <stream_select+0x15e>
            send_init_message = add && sys.driver_started;
 8020e46:	2500      	movs	r5, #0
 8020e48:	e002      	b.n	8020e50 <stream_select+0x180>
 8020e4a:	2501      	movs	r5, #1
            break;
 8020e4c:	e000      	b.n	8020e50 <stream_select+0x180>
    switch(stream->type) {
 8020e4e:	2500      	movs	r5, #0
    if(hal.stream.type == StreamType_MPG) {
 8020e50:	4b33      	ldr	r3, [pc, #204]	@ (8020f20 <stream_select+0x250>)
 8020e52:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8020e56:	2b01      	cmp	r3, #1
 8020e58:	d039      	beq.n	8020ece <stream_select+0x1fe>
    } else if(mpg_enable)
 8020e5a:	2e00      	cmp	r6, #0
 8020e5c:	d140      	bne.n	8020ee0 <stream_select+0x210>
    memcpy(&hal.stream, stream, sizeof(io_stream_t));
 8020e5e:	224c      	movs	r2, #76	@ 0x4c
 8020e60:	4621      	mov	r1, r4
 8020e62:	4832      	ldr	r0, [pc, #200]	@ (8020f2c <stream_select+0x25c>)
 8020e64:	f004 f8c3 	bl	8024fee <memcpy>
    if(stream == base.stream && base.is_up == is_not_connected)
 8020e68:	4b29      	ldr	r3, [pc, #164]	@ (8020f10 <stream_select+0x240>)
 8020e6a:	681b      	ldr	r3, [r3, #0]
 8020e6c:	42a3      	cmp	r3, r4
 8020e6e:	d03c      	beq.n	8020eea <stream_select+0x21a>
    if(hal.stream.is_connected == NULL)
 8020e70:	4a2b      	ldr	r2, [pc, #172]	@ (8020f20 <stream_select+0x250>)
 8020e72:	f8d2 20ac 	ldr.w	r2, [r2, #172]	@ 0xac
 8020e76:	2a00      	cmp	r2, #0
 8020e78:	d040      	beq.n	8020efc <stream_select+0x22c>
    if(stream->type == StreamType_WebSocket && !stream->state.webui_connected)
 8020e7a:	6823      	ldr	r3, [r4, #0]
 8020e7c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020e80:	f423 037d 	bic.w	r3, r3, #16580608	@ 0xfd0000
 8020e84:	2b04      	cmp	r3, #4
 8020e86:	d063      	beq.n	8020f50 <stream_select+0x280>
    if(send_init_message) {
 8020e88:	b135      	cbz	r5, 8020e98 <stream_select+0x1c8>
        hal.stream.write_all = stream->write;
 8020e8a:	68e2      	ldr	r2, [r4, #12]
 8020e8c:	4b24      	ldr	r3, [pc, #144]	@ (8020f20 <stream_select+0x250>)
 8020e8e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        grbl.report.init_message();
 8020e92:	4b2b      	ldr	r3, [pc, #172]	@ (8020f40 <stream_select+0x270>)
 8020e94:	681b      	ldr	r3, [r3, #0]
 8020e96:	4798      	blx	r3
    hal.stream.write_all = stream_write_all;
 8020e98:	4d21      	ldr	r5, [pc, #132]	@ (8020f20 <stream_select+0x250>)
 8020e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8020f44 <stream_select+0x274>)
 8020e9c:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
    hal.stream.set_enqueue_rt_handler(protocol_enqueue_realtime_command);
 8020ea0:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 8020ea4:	4828      	ldr	r0, [pc, #160]	@ (8020f48 <stream_select+0x278>)
 8020ea6:	4798      	blx	r3
    if(hal.stream.disable_rx)
 8020ea8:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
 8020eac:	b10b      	cbz	r3, 8020eb2 <stream_select+0x1e2>
        hal.stream.disable_rx(false);
 8020eae:	2000      	movs	r0, #0
 8020eb0:	4798      	blx	r3
    if(grbl.on_stream_changed)
 8020eb2:	4b23      	ldr	r3, [pc, #140]	@ (8020f40 <stream_select+0x270>)
 8020eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020eb8:	b11b      	cbz	r3, 8020ec2 <stream_select+0x1f2>
        grbl.on_stream_changed(hal.stream.type);
 8020eba:	4a19      	ldr	r2, [pc, #100]	@ (8020f20 <stream_select+0x250>)
 8020ebc:	f892 00a8 	ldrb.w	r0, [r2, #168]	@ 0xa8
 8020ec0:	4798      	blx	r3
    active_stream = stream;
 8020ec2:	4b18      	ldr	r3, [pc, #96]	@ (8020f24 <stream_select+0x254>)
 8020ec4:	601c      	str	r4, [r3, #0]
    return true;
 8020ec6:	2001      	movs	r0, #1
}
 8020ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool send_init_message = false, mpg_enable = false;
 8020eca:	2500      	movs	r5, #0
 8020ecc:	e7c0      	b.n	8020e50 <stream_select+0x180>
        stream_mpg_enable(false);
 8020ece:	2000      	movs	r0, #0
 8020ed0:	f7ff fe62 	bl	8020b98 <stream_mpg_enable>
        mpg.flags.mpg_control = On;
 8020ed4:	4a0f      	ldr	r2, [pc, #60]	@ (8020f14 <stream_select+0x244>)
 8020ed6:	7a13      	ldrb	r3, [r2, #8]
 8020ed8:	f043 0301 	orr.w	r3, r3, #1
 8020edc:	7213      	strb	r3, [r2, #8]
 8020ede:	e7be      	b.n	8020e5e <stream_select+0x18e>
		protocol_enqueue_foreground_task(stream_mpg_set_mode, (void *)1);
 8020ee0:	2101      	movs	r1, #1
 8020ee2:	481a      	ldr	r0, [pc, #104]	@ (8020f4c <stream_select+0x27c>)
 8020ee4:	f7f6 ffb4 	bl	8017e50 <protocol_enqueue_foreground_task>
 8020ee8:	e7b9      	b.n	8020e5e <stream_select+0x18e>
    if(stream == base.stream && base.is_up == is_not_connected)
 8020eea:	4a09      	ldr	r2, [pc, #36]	@ (8020f10 <stream_select+0x240>)
 8020eec:	6851      	ldr	r1, [r2, #4]
 8020eee:	4a0b      	ldr	r2, [pc, #44]	@ (8020f1c <stream_select+0x24c>)
 8020ef0:	4291      	cmp	r1, r2
 8020ef2:	d1bd      	bne.n	8020e70 <stream_select+0x1a0>
        base.is_up = stream_connected;
 8020ef4:	4a06      	ldr	r2, [pc, #24]	@ (8020f10 <stream_select+0x240>)
 8020ef6:	4908      	ldr	r1, [pc, #32]	@ (8020f18 <stream_select+0x248>)
 8020ef8:	6051      	str	r1, [r2, #4]
 8020efa:	e7b9      	b.n	8020e70 <stream_select+0x1a0>
        hal.stream.is_connected = stream == base.stream ? base.is_up : stream_connected;
 8020efc:	42a3      	cmp	r3, r4
 8020efe:	d004      	beq.n	8020f0a <stream_select+0x23a>
 8020f00:	4a05      	ldr	r2, [pc, #20]	@ (8020f18 <stream_select+0x248>)
 8020f02:	4b07      	ldr	r3, [pc, #28]	@ (8020f20 <stream_select+0x250>)
 8020f04:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8020f08:	e7b7      	b.n	8020e7a <stream_select+0x1aa>
 8020f0a:	4b01      	ldr	r3, [pc, #4]	@ (8020f10 <stream_select+0x240>)
 8020f0c:	685a      	ldr	r2, [r3, #4]
 8020f0e:	e7f8      	b.n	8020f02 <stream_select+0x232>
 8020f10:	20002c4c 	.word	0x20002c4c
 8020f14:	20002c38 	.word	0x20002c38
 8020f18:	08020853 	.word	0x08020853
 8020f1c:	08020857 	.word	0x08020857
 8020f20:	20001a90 	.word	0x20001a90
 8020f24:	20002c24 	.word	0x20002c24
 8020f28:	08030af4 	.word	0x08030af4
 8020f2c:	20001b38 	.word	0x20001b38
 8020f30:	20001d70 	.word	0x20001d70
 8020f34:	08030b0c 	.word	0x08030b0c
 8020f38:	08030b24 	.word	0x08030b24
 8020f3c:	08030b3c 	.word	0x08030b3c
 8020f40:	20001c78 	.word	0x20001c78
 8020f44:	080208a5 	.word	0x080208a5
 8020f48:	08017e9d 	.word	0x08017e9d
 8020f4c:	08020fc1 	.word	0x08020fc1
        hal.stream.state.webui_connected = webui_connected;
 8020f50:	4b05      	ldr	r3, [pc, #20]	@ (8020f68 <stream_select+0x298>)
 8020f52:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8020f56:	f367 0241 	bfi	r2, r7, #1, #1
 8020f5a:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
 8020f5e:	e793      	b.n	8020e88 <stream_select+0x1b8>
        	return false;
 8020f60:	4608      	mov	r0, r1
 8020f62:	e7b1      	b.n	8020ec8 <stream_select+0x1f8>
        return false;
 8020f64:	2000      	movs	r0, #0
 8020f66:	e7af      	b.n	8020ec8 <stream_select+0x1f8>
 8020f68:	20001a90 	.word	0x20001a90

08020f6c <stream_connect>:
{
 8020f6c:	b538      	push	{r3, r4, r5, lr}
 8020f6e:	4604      	mov	r4, r0
    if((ok = stream_select(stream, true)))
 8020f70:	2101      	movs	r1, #1
 8020f72:	f7ff fead 	bl	8020cd0 <stream_select>
 8020f76:	4605      	mov	r5, r0
 8020f78:	b908      	cbnz	r0, 8020f7e <stream_connect+0x12>
}
 8020f7a:	4628      	mov	r0, r5
 8020f7c:	bd38      	pop	{r3, r4, r5, pc}
        stream_set_description(stream, "Primary UART");
 8020f7e:	4902      	ldr	r1, [pc, #8]	@ (8020f88 <stream_connect+0x1c>)
 8020f80:	4620      	mov	r0, r4
 8020f82:	f7ff fde7 	bl	8020b54 <stream_set_description>
 8020f86:	e7f8      	b.n	8020f7a <stream_connect+0xe>
 8020f88:	08030b54 	.word	0x08030b54

08020f8c <stream_connect_instance>:
{
 8020f8c:	b508      	push	{r3, lr}
    connection.instance = instance;
 8020f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8020fb8 <stream_connect_instance+0x2c>)
 8020f90:	7018      	strb	r0, [r3, #0]
    connection.baud_rate = baud_rate;
 8020f92:	6059      	str	r1, [r3, #4]
    connection.stream = NULL;
 8020f94:	2200      	movs	r2, #0
 8020f96:	609a      	str	r2, [r3, #8]
    return stream_enumerate_streams(_open_instance) && stream_connect(connection.stream);
 8020f98:	4808      	ldr	r0, [pc, #32]	@ (8020fbc <stream_connect_instance+0x30>)
 8020f9a:	f7ff fd47 	bl	8020a2c <stream_enumerate_streams>
 8020f9e:	b908      	cbnz	r0, 8020fa4 <stream_connect_instance+0x18>
 8020fa0:	2000      	movs	r0, #0
}
 8020fa2:	bd08      	pop	{r3, pc}
    return stream_enumerate_streams(_open_instance) && stream_connect(connection.stream);
 8020fa4:	4b04      	ldr	r3, [pc, #16]	@ (8020fb8 <stream_connect_instance+0x2c>)
 8020fa6:	6898      	ldr	r0, [r3, #8]
 8020fa8:	f7ff ffe0 	bl	8020f6c <stream_connect>
 8020fac:	b108      	cbz	r0, 8020fb2 <stream_connect_instance+0x26>
 8020fae:	2001      	movs	r0, #1
 8020fb0:	e7f7      	b.n	8020fa2 <stream_connect_instance+0x16>
 8020fb2:	2000      	movs	r0, #0
 8020fb4:	e7f5      	b.n	8020fa2 <stream_connect_instance+0x16>
 8020fb6:	bf00      	nop
 8020fb8:	20002c28 	.word	0x20002c28
 8020fbc:	080208c9 	.word	0x080208c9

08020fc0 <stream_mpg_set_mode>:
{
 8020fc0:	b508      	push	{r3, lr}
    stream_mpg_enable(data != NULL);
 8020fc2:	3800      	subs	r0, #0
 8020fc4:	bf18      	it	ne
 8020fc6:	2001      	movne	r0, #1
 8020fc8:	f7ff fde6 	bl	8020b98 <stream_mpg_enable>
}
 8020fcc:	bd08      	pop	{r3, pc}
	...

08020fd0 <toggle_single_block>:

    return Status_OK;
}

static status_code_t toggle_single_block (sys_state_t state, char *args)
{
 8020fd0:	b508      	push	{r3, lr}
    if(!hal.signals_cap.single_block) {
 8020fd2:	4b10      	ldr	r3, [pc, #64]	@ (8021014 <toggle_single_block+0x44>)
 8020fd4:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
 8020fd8:	f013 0f08 	tst.w	r3, #8
 8020fdc:	d10f      	bne.n	8020ffe <toggle_single_block+0x2e>
        sys.flags.single_block = !sys.flags.single_block;
 8020fde:	4a0e      	ldr	r2, [pc, #56]	@ (8021018 <toggle_single_block+0x48>)
 8020fe0:	7d93      	ldrb	r3, [r2, #22]
 8020fe2:	43d9      	mvns	r1, r3
 8020fe4:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 8020fe8:	f361 13c7 	bfi	r3, r1, #7, #1
 8020fec:	7593      	strb	r3, [r2, #22]
        grbl.report.feedback_message(sys.flags.single_block ? Message_Enabled : Message_Disabled);
 8020fee:	4b0b      	ldr	r3, [pc, #44]	@ (802101c <toggle_single_block+0x4c>)
 8020ff0:	68db      	ldr	r3, [r3, #12]
 8020ff2:	f992 2016 	ldrsb.w	r2, [r2, #22]
 8020ff6:	2a00      	cmp	r2, #0
 8020ff8:	db08      	blt.n	802100c <toggle_single_block+0x3c>
 8020ffa:	2005      	movs	r0, #5
 8020ffc:	4798      	blx	r3
    }

    return hal.signals_cap.single_block ? Status_InvalidStatement : Status_OK;
 8020ffe:	4b05      	ldr	r3, [pc, #20]	@ (8021014 <toggle_single_block+0x44>)
 8021000:	f893 01dd 	ldrb.w	r0, [r3, #477]	@ 0x1dd
 8021004:	f010 0008 	ands.w	r0, r0, #8
 8021008:	d102      	bne.n	8021010 <toggle_single_block+0x40>
}
 802100a:	bd08      	pop	{r3, pc}
        grbl.report.feedback_message(sys.flags.single_block ? Message_Enabled : Message_Disabled);
 802100c:	2004      	movs	r0, #4
 802100e:	e7f5      	b.n	8020ffc <toggle_single_block+0x2c>
    return hal.signals_cap.single_block ? Status_InvalidStatement : Status_OK;
 8021010:	2003      	movs	r0, #3
 8021012:	e7fa      	b.n	802100a <toggle_single_block+0x3a>
 8021014:	20001a90 	.word	0x20001a90
 8021018:	20001d70 	.word	0x20001d70
 802101c:	20001c78 	.word	0x20001c78

08021020 <toggle_block_delete>:

static status_code_t toggle_block_delete (sys_state_t state, char *args)
{
 8021020:	b508      	push	{r3, lr}
    if(!hal.signals_cap.block_delete) {
 8021022:	4b10      	ldr	r3, [pc, #64]	@ (8021064 <toggle_block_delete+0x44>)
 8021024:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8021028:	f013 0f10 	tst.w	r3, #16
 802102c:	d10f      	bne.n	802104e <toggle_block_delete+0x2e>
        sys.flags.block_delete_enabled = !sys.flags.block_delete_enabled;
 802102e:	4a0e      	ldr	r2, [pc, #56]	@ (8021068 <toggle_block_delete+0x48>)
 8021030:	7d93      	ldrb	r3, [r2, #22]
 8021032:	0919      	lsrs	r1, r3, #4
 8021034:	f081 0101 	eor.w	r1, r1, #1
 8021038:	f361 1304 	bfi	r3, r1, #4, #1
 802103c:	7593      	strb	r3, [r2, #22]
        grbl.report.feedback_message(sys.flags.block_delete_enabled ? Message_Enabled : Message_Disabled);
 802103e:	4b0b      	ldr	r3, [pc, #44]	@ (802106c <toggle_block_delete+0x4c>)
 8021040:	68db      	ldr	r3, [r3, #12]
 8021042:	7d92      	ldrb	r2, [r2, #22]
 8021044:	f012 0f10 	tst.w	r2, #16
 8021048:	d008      	beq.n	802105c <toggle_block_delete+0x3c>
 802104a:	2004      	movs	r0, #4
 802104c:	4798      	blx	r3
    }

    return hal.signals_cap.block_delete ? Status_InvalidStatement : Status_OK;
 802104e:	4b05      	ldr	r3, [pc, #20]	@ (8021064 <toggle_block_delete+0x44>)
 8021050:	f893 01dc 	ldrb.w	r0, [r3, #476]	@ 0x1dc
 8021054:	f010 0010 	ands.w	r0, r0, #16
 8021058:	d102      	bne.n	8021060 <toggle_block_delete+0x40>
}
 802105a:	bd08      	pop	{r3, pc}
        grbl.report.feedback_message(sys.flags.block_delete_enabled ? Message_Enabled : Message_Disabled);
 802105c:	2005      	movs	r0, #5
 802105e:	e7f5      	b.n	802104c <toggle_block_delete+0x2c>
    return hal.signals_cap.block_delete ? Status_InvalidStatement : Status_OK;
 8021060:	2003      	movs	r0, #3
 8021062:	e7fa      	b.n	802105a <toggle_block_delete+0x3a>
 8021064:	20001a90 	.word	0x20001a90
 8021068:	20001d70 	.word	0x20001d70
 802106c:	20001c78 	.word	0x20001c78

08021070 <toggle_optional_stop>:

static status_code_t toggle_optional_stop (sys_state_t state, char *args)
{
 8021070:	b508      	push	{r3, lr}
    if(!hal.signals_cap.stop_disable) {
 8021072:	4b10      	ldr	r3, [pc, #64]	@ (80210b4 <toggle_optional_stop+0x44>)
 8021074:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8021078:	f013 0f20 	tst.w	r3, #32
 802107c:	d10f      	bne.n	802109e <toggle_optional_stop+0x2e>
        sys.flags.optional_stop_disable = !sys.flags.optional_stop_disable;
 802107e:	4a0e      	ldr	r2, [pc, #56]	@ (80210b8 <toggle_optional_stop+0x48>)
 8021080:	7d93      	ldrb	r3, [r2, #22]
 8021082:	0999      	lsrs	r1, r3, #6
 8021084:	f081 0101 	eor.w	r1, r1, #1
 8021088:	f361 1386 	bfi	r3, r1, #6, #1
 802108c:	7593      	strb	r3, [r2, #22]
        grbl.report.feedback_message(sys.flags.block_delete_enabled ? Message_Enabled : Message_Disabled);
 802108e:	4b0b      	ldr	r3, [pc, #44]	@ (80210bc <toggle_optional_stop+0x4c>)
 8021090:	68db      	ldr	r3, [r3, #12]
 8021092:	7d92      	ldrb	r2, [r2, #22]
 8021094:	f012 0f10 	tst.w	r2, #16
 8021098:	d008      	beq.n	80210ac <toggle_optional_stop+0x3c>
 802109a:	2004      	movs	r0, #4
 802109c:	4798      	blx	r3
    }

    return hal.signals_cap.stop_disable ? Status_InvalidStatement : Status_OK;
 802109e:	4b05      	ldr	r3, [pc, #20]	@ (80210b4 <toggle_optional_stop+0x44>)
 80210a0:	f893 01dc 	ldrb.w	r0, [r3, #476]	@ 0x1dc
 80210a4:	f010 0020 	ands.w	r0, r0, #32
 80210a8:	d102      	bne.n	80210b0 <toggle_optional_stop+0x40>
}
 80210aa:	bd08      	pop	{r3, pc}
        grbl.report.feedback_message(sys.flags.block_delete_enabled ? Message_Enabled : Message_Disabled);
 80210ac:	2005      	movs	r0, #5
 80210ae:	e7f5      	b.n	802109c <toggle_optional_stop+0x2c>
    return hal.signals_cap.stop_disable ? Status_InvalidStatement : Status_OK;
 80210b0:	2003      	movs	r0, #3
 80210b2:	e7fa      	b.n	80210aa <toggle_optional_stop+0x3a>
 80210b4:	20001a90 	.word	0x20001a90
 80210b8:	20001d70 	.word	0x20001d70
 80210bc:	20001c78 	.word	0x20001c78

080210c0 <enter_sleep>:
    return go_home(state, (axes_signals_t){V_AXIS_BIT});
}
#endif

static status_code_t enter_sleep (sys_state_t state, char *args)
{
 80210c0:	b508      	push	{r3, lr}
    if(!settings.flags.sleep_enable)
 80210c2:	4b0a      	ldr	r3, [pc, #40]	@ (80210ec <enter_sleep+0x2c>)
 80210c4:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 80210c8:	f013 0f08 	tst.w	r3, #8
 80210cc:	d009      	beq.n	80210e2 <enter_sleep+0x22>
        return Status_InvalidStatement;
    else if(!(state == STATE_IDLE || state == STATE_ALARM))
 80210ce:	2801      	cmp	r0, #1
 80210d0:	d809      	bhi.n	80210e6 <enter_sleep+0x26>
        return Status_IdleError;
    else
        system_set_exec_state_flag(EXEC_SLEEP); // Set to execute enter_sleep mode immediately
 80210d2:	4b07      	ldr	r3, [pc, #28]	@ (80210f0 <enter_sleep+0x30>)
 80210d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80210d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80210da:	4806      	ldr	r0, [pc, #24]	@ (80210f4 <enter_sleep+0x34>)
 80210dc:	4798      	blx	r3

    return Status_OK;
 80210de:	2000      	movs	r0, #0
}
 80210e0:	bd08      	pop	{r3, pc}
        return Status_InvalidStatement;
 80210e2:	2003      	movs	r0, #3
 80210e4:	e7fc      	b.n	80210e0 <enter_sleep+0x20>
        return Status_IdleError;
 80210e6:	2008      	movs	r0, #8
 80210e8:	e7fa      	b.n	80210e0 <enter_sleep+0x20>
 80210ea:	bf00      	nop
 80210ec:	200024a8 	.word	0x200024a8
 80210f0:	20001a90 	.word	0x20001a90
 80210f4:	20001db8 	.word	0x20001db8

080210f8 <help_rtc>:
    return NULL;
}

const char *help_rtc (const char *cmd)
{
    if(hal.rtc.get_datetime) {
 80210f8:	4b08      	ldr	r3, [pc, #32]	@ (802111c <help_rtc+0x24>)
 80210fa:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80210fe:	b15b      	cbz	r3, 8021118 <help_rtc+0x20>
{
 8021100:	b510      	push	{r4, lr}
        hal.stream.write("$RTC - output current time." ASCII_EOL);
 8021102:	4c06      	ldr	r4, [pc, #24]	@ (802111c <help_rtc+0x24>)
 8021104:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8021108:	4805      	ldr	r0, [pc, #20]	@ (8021120 <help_rtc+0x28>)
 802110a:	4798      	blx	r3
        hal.stream.write("$RTC=<ISO8601 datetime> - set current time." ASCII_EOL);
 802110c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8021110:	4804      	ldr	r0, [pc, #16]	@ (8021124 <help_rtc+0x2c>)
 8021112:	4798      	blx	r3
    }

    return NULL;
}
 8021114:	2000      	movs	r0, #0
 8021116:	bd10      	pop	{r4, pc}
 8021118:	2000      	movs	r0, #0
 802111a:	4770      	bx	lr
 802111c:	20001a90 	.word	0x20001a90
 8021120:	08030bb8 	.word	0x08030bb8
 8021124:	08030bd8 	.word	0x08030bd8

08021128 <help_pins>:
    return NULL;
}

const char *help_pins (const char *cmd)
{
    return hal.enumerate_pins ? "enumerate pin bindings" : NULL;
 8021128:	4b03      	ldr	r3, [pc, #12]	@ (8021138 <help_pins+0x10>)
 802112a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 802112e:	b10b      	cbz	r3, 8021134 <help_pins+0xc>
 8021130:	4802      	ldr	r0, [pc, #8]	@ (802113c <help_pins+0x14>)
 8021132:	4770      	bx	lr
 8021134:	2000      	movs	r0, #0
}
 8021136:	4770      	bx	lr
 8021138:	20001a90 	.word	0x20001a90
 802113c:	08030c08 	.word	0x08030c08

08021140 <help_pin_state>:

#ifndef NO_SETTINGS_DESCRIPTIONS

const char *help_pin_state (const char *cmd)
{
    return hal.port.get_pin_info ? "output auxillary pin states" : NULL;
 8021140:	4b03      	ldr	r3, [pc, #12]	@ (8021150 <help_pin_state+0x10>)
 8021142:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8021146:	b10b      	cbz	r3, 802114c <help_pin_state+0xc>
 8021148:	4802      	ldr	r0, [pc, #8]	@ (8021154 <help_pin_state+0x14>)
 802114a:	4770      	bx	lr
 802114c:	2000      	movs	r0, #0
}
 802114e:	4770      	bx	lr
 8021150:	20001a90 	.word	0x20001a90
 8021154:	08030c20 	.word	0x08030c20

08021158 <help_switches>:

const char *help_switches (const char *cmd)
{
    const char *help = NULL;

    switch(*cmd) {
 8021158:	7803      	ldrb	r3, [r0, #0]
 802115a:	2b4f      	cmp	r3, #79	@ 0x4f
 802115c:	d00f      	beq.n	802117e <help_switches+0x26>
 802115e:	2b53      	cmp	r3, #83	@ 0x53
 8021160:	d017      	beq.n	8021192 <help_switches+0x3a>
 8021162:	2b42      	cmp	r3, #66	@ 0x42
 8021164:	d001      	beq.n	802116a <help_switches+0x12>
 8021166:	2000      	movs	r0, #0
 8021168:	4770      	bx	lr

        case 'B':
            if(!hal.signals_cap.block_delete)
 802116a:	4b0f      	ldr	r3, [pc, #60]	@ (80211a8 <help_switches+0x50>)
 802116c:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8021170:	f013 0f10 	tst.w	r3, #16
 8021174:	d101      	bne.n	802117a <help_switches+0x22>
                help = "toggle block delete switch";
 8021176:	480d      	ldr	r0, [pc, #52]	@ (80211ac <help_switches+0x54>)
 8021178:	4770      	bx	lr
    const char *help = NULL;
 802117a:	2000      	movs	r0, #0
 802117c:	4770      	bx	lr
            break;

        case 'O':
            if(!hal.signals_cap.stop_disable)
 802117e:	4b0a      	ldr	r3, [pc, #40]	@ (80211a8 <help_switches+0x50>)
 8021180:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8021184:	f013 0f20 	tst.w	r3, #32
 8021188:	d101      	bne.n	802118e <help_switches+0x36>
                help = "toggle optional stop switch (M1)";
 802118a:	4809      	ldr	r0, [pc, #36]	@ (80211b0 <help_switches+0x58>)
 802118c:	4770      	bx	lr
    const char *help = NULL;
 802118e:	2000      	movs	r0, #0
 8021190:	4770      	bx	lr
            break;

        case 'S':
            if(!hal.signals_cap.single_block)
 8021192:	4b05      	ldr	r3, [pc, #20]	@ (80211a8 <help_switches+0x50>)
 8021194:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
 8021198:	f013 0f08 	tst.w	r3, #8
 802119c:	d101      	bne.n	80211a2 <help_switches+0x4a>
                help = "toggle single stepping switch";
 802119e:	4805      	ldr	r0, [pc, #20]	@ (80211b4 <help_switches+0x5c>)
            break;
    }

    return help;
}
 80211a0:	4770      	bx	lr
    const char *help = NULL;
 80211a2:	2000      	movs	r0, #0
 80211a4:	4770      	bx	lr
 80211a6:	bf00      	nop
 80211a8:	20001a90 	.word	0x20001a90
 80211ac:	08030c3c 	.word	0x08030c3c
 80211b0:	08030c58 	.word	0x08030c58
 80211b4:	08030c7c 	.word	0x08030c7c

080211b8 <help_homing>:

const char *help_homing (const char *cmd)
{
 80211b8:	b508      	push	{r3, lr}
    if(settings.homing.flags.enabled)
 80211ba:	4b0c      	ldr	r3, [pc, #48]	@ (80211ec <help_homing+0x34>)
 80211bc:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 80211c0:	f013 0f01 	tst.w	r3, #1
 80211c4:	d004      	beq.n	80211d0 <help_homing+0x18>
        hal.stream.write("$H - home configured axes." ASCII_EOL);
 80211c6:	4b0a      	ldr	r3, [pc, #40]	@ (80211f0 <help_homing+0x38>)
 80211c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80211cc:	4809      	ldr	r0, [pc, #36]	@ (80211f4 <help_homing+0x3c>)
 80211ce:	4798      	blx	r3

    if(settings.homing.flags.single_axis_commands)
 80211d0:	4b06      	ldr	r3, [pc, #24]	@ (80211ec <help_homing+0x34>)
 80211d2:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 80211d6:	f013 0f02 	tst.w	r3, #2
 80211da:	d004      	beq.n	80211e6 <help_homing+0x2e>
        hal.stream.write("$H<axisletter> - home single axis." ASCII_EOL);
 80211dc:	4b04      	ldr	r3, [pc, #16]	@ (80211f0 <help_homing+0x38>)
 80211de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80211e2:	4805      	ldr	r0, [pc, #20]	@ (80211f8 <help_homing+0x40>)
 80211e4:	4798      	blx	r3

    return NULL;
}
 80211e6:	2000      	movs	r0, #0
 80211e8:	bd08      	pop	{r3, pc}
 80211ea:	bf00      	nop
 80211ec:	200024a8 	.word	0x200024a8
 80211f0:	20001a90 	.word	0x20001a90
 80211f4:	08030c9c 	.word	0x08030c9c
 80211f8:	08030cbc 	.word	0x08030cbc

080211fc <jog>:
{
 80211fc:	b508      	push	{r3, lr}
    if(!(state == STATE_IDLE || (state & (STATE_JOG|STATE_TOOL_CHANGE))))
 80211fe:	b110      	cbz	r0, 8021206 <jog+0xa>
 8021200:	f410 7f08 	tst.w	r0, #544	@ 0x220
 8021204:	d007      	beq.n	8021216 <jog+0x1a>
    if(args != NULL) {
 8021206:	b141      	cbz	r1, 802121a <jog+0x1e>
        *(--args) = '=';
 8021208:	233d      	movs	r3, #61	@ 0x3d
 802120a:	f801 3c01 	strb.w	r3, [r1, #-1]
    return args == NULL ? Status_InvalidStatement : gc_execute_block(args); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 802120e:	1ec8      	subs	r0, r1, #3
 8021210:	f7ec fb34 	bl	800d87c <gc_execute_block>
}
 8021214:	bd08      	pop	{r3, pc}
         return Status_IdleError;
 8021216:	2008      	movs	r0, #8
 8021218:	e7fc      	b.n	8021214 <jog+0x18>
    return args == NULL ? Status_InvalidStatement : gc_execute_block(args); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 802121a:	2003      	movs	r0, #3
 802121c:	e7fa      	b.n	8021214 <jog+0x18>
	...

08021220 <help_rst>:
{
 8021220:	b510      	push	{r4, lr}
    hal.stream.write("$RST=* - restore/reset all settings." ASCII_EOL);
 8021222:	4c10      	ldr	r4, [pc, #64]	@ (8021264 <help_rst+0x44>)
 8021224:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8021228:	480f      	ldr	r0, [pc, #60]	@ (8021268 <help_rst+0x48>)
 802122a:	4798      	blx	r3
    hal.stream.write("$RST=$ - restore default settings." ASCII_EOL);
 802122c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8021230:	480e      	ldr	r0, [pc, #56]	@ (802126c <help_rst+0x4c>)
 8021232:	4798      	blx	r3
    if(settings_get_details()->next)
 8021234:	f7fb fef2 	bl	801d01c <settings_get_details>
 8021238:	6983      	ldr	r3, [r0, #24]
 802123a:	b11b      	cbz	r3, 8021244 <help_rst+0x24>
        hal.stream.write("$RST=& - restore driver and plugin default settings." ASCII_EOL);
 802123c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8021240:	480b      	ldr	r0, [pc, #44]	@ (8021270 <help_rst+0x50>)
 8021242:	4798      	blx	r3
    if(grbl.tool_table.n_tools)
 8021244:	4b0b      	ldr	r3, [pc, #44]	@ (8021274 <help_rst+0x54>)
 8021246:	699b      	ldr	r3, [r3, #24]
 8021248:	b133      	cbz	r3, 8021258 <help_rst+0x38>
        hal.stream.write("$RST=# - reset offsets and tool data." ASCII_EOL);
 802124a:	4b06      	ldr	r3, [pc, #24]	@ (8021264 <help_rst+0x44>)
 802124c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8021250:	4809      	ldr	r0, [pc, #36]	@ (8021278 <help_rst+0x58>)
 8021252:	4798      	blx	r3
}
 8021254:	2000      	movs	r0, #0
 8021256:	bd10      	pop	{r4, pc}
        hal.stream.write("$RST=# - reset offsets." ASCII_EOL);
 8021258:	4b02      	ldr	r3, [pc, #8]	@ (8021264 <help_rst+0x44>)
 802125a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 802125e:	4807      	ldr	r0, [pc, #28]	@ (802127c <help_rst+0x5c>)
 8021260:	4798      	blx	r3
 8021262:	e7f7      	b.n	8021254 <help_rst+0x34>
 8021264:	20001a90 	.word	0x20001a90
 8021268:	08030ce4 	.word	0x08030ce4
 802126c:	08030d0c 	.word	0x08030d0c
 8021270:	08030d34 	.word	0x08030d34
 8021274:	20001c78 	.word	0x20001c78
 8021278:	08030d6c 	.word	0x08030d6c
 802127c:	08030d94 	.word	0x08030d94

08021280 <help_spindle>:
{
 8021280:	b538      	push	{r3, r4, r5, lr}
 8021282:	4604      	mov	r4, r0
    spindle_ptrs_t *spindle = gc_spindle_get();
 8021284:	f7ec f9de 	bl	800d644 <gc_spindle_get>
 8021288:	4605      	mov	r5, r0
    if(cmd[1] == 'R' && spindle->reset_data)
 802128a:	7863      	ldrb	r3, [r4, #1]
 802128c:	2b52      	cmp	r3, #82	@ 0x52
 802128e:	d004      	beq.n	802129a <help_spindle+0x1a>
    if(cmd[1] == 'D' && spindle->get_data)
 8021290:	7863      	ldrb	r3, [r4, #1]
 8021292:	2b44      	cmp	r3, #68	@ 0x44
 8021294:	d00a      	beq.n	80212ac <help_spindle+0x2c>
}
 8021296:	2000      	movs	r0, #0
 8021298:	bd38      	pop	{r3, r4, r5, pc}
    if(cmd[1] == 'R' && spindle->reset_data)
 802129a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 802129c:	2b00      	cmp	r3, #0
 802129e:	d0f7      	beq.n	8021290 <help_spindle+0x10>
        hal.stream.write("$SR - reset spindle encoder data." ASCII_EOL);
 80212a0:	4b07      	ldr	r3, [pc, #28]	@ (80212c0 <help_spindle+0x40>)
 80212a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80212a6:	4807      	ldr	r0, [pc, #28]	@ (80212c4 <help_spindle+0x44>)
 80212a8:	4798      	blx	r3
 80212aa:	e7f1      	b.n	8021290 <help_spindle+0x10>
    if(cmd[1] == 'D' && spindle->get_data)
 80212ac:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80212ae:	2b00      	cmp	r3, #0
 80212b0:	d0f1      	beq.n	8021296 <help_spindle+0x16>
        hal.stream.write("$SD - output spindle encoder data." ASCII_EOL);
 80212b2:	4b03      	ldr	r3, [pc, #12]	@ (80212c0 <help_spindle+0x40>)
 80212b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80212b8:	4803      	ldr	r0, [pc, #12]	@ (80212c8 <help_spindle+0x48>)
 80212ba:	4798      	blx	r3
 80212bc:	e7eb      	b.n	8021296 <help_spindle+0x16>
 80212be:	bf00      	nop
 80212c0:	20001a90 	.word	0x20001a90
 80212c4:	08030db0 	.word	0x08030db0
 80212c8:	08030dd4 	.word	0x08030dd4

080212cc <spindle_reset_data>:
{
 80212cc:	b510      	push	{r4, lr}
    spindle_ptrs_t *spindle = gc_spindle_get();
 80212ce:	f7ec f9b9 	bl	800d644 <gc_spindle_get>
 80212d2:	4604      	mov	r4, r0
    if(spindle->reset_data)
 80212d4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80212d6:	b103      	cbz	r3, 80212da <spindle_reset_data+0xe>
        spindle->reset_data();
 80212d8:	4798      	blx	r3
    return spindle->reset_data ? Status_OK : Status_InvalidStatement;
 80212da:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80212dc:	b10b      	cbz	r3, 80212e2 <spindle_reset_data+0x16>
 80212de:	2000      	movs	r0, #0
}
 80212e0:	bd10      	pop	{r4, pc}
    return spindle->reset_data ? Status_OK : Status_InvalidStatement;
 80212e2:	2003      	movs	r0, #3
 80212e4:	e7fc      	b.n	80212e0 <spindle_reset_data+0x14>
	...

080212e8 <rtc_action>:
{
 80212e8:	b508      	push	{r3, lr}
    if(args) {
 80212ea:	b149      	cbz	r1, 8021300 <rtc_action+0x18>
 80212ec:	4608      	mov	r0, r1
        struct tm *time = get_datetime(args);
 80212ee:	f7f4 fd51 	bl	8015d94 <get_datetime>
        if(time)
 80212f2:	b140      	cbz	r0, 8021306 <rtc_action+0x1e>
            hal.rtc.set_datetime(time);
 80212f4:	4a05      	ldr	r2, [pc, #20]	@ (802130c <rtc_action+0x24>)
 80212f6:	f8d2 2110 	ldr.w	r2, [r2, #272]	@ 0x110
 80212fa:	4790      	blx	r2
    status_code_t retval = Status_OK;
 80212fc:	2000      	movs	r0, #0
}
 80212fe:	bd08      	pop	{r3, pc}
        retval = report_time();
 8021300:	f7fa fe0a 	bl	801bf18 <report_time>
 8021304:	e7fb      	b.n	80212fe <rtc_action+0x16>
            retval = Status_BadNumberFormat;
 8021306:	2002      	movs	r0, #2
 8021308:	e7f9      	b.n	80212fe <rtc_action+0x16>
 802130a:	bf00      	nop
 802130c:	20001a90 	.word	0x20001a90

08021310 <pin_state>:
{
 8021310:	b508      	push	{r3, lr}
    return report_pin_states(state, args);
 8021312:	f7fa fc0b 	bl	801bb2c <report_pin_states>
}
 8021316:	bd08      	pop	{r3, pc}

08021318 <enumerate_pins>:
{
 8021318:	b508      	push	{r3, lr}
    return report_pins(state, args);
 802131a:	f7fa fbb9 	bl	801ba90 <report_pins>
}
 802131e:	bd08      	pop	{r3, pc}

08021320 <enumerate_alarms_grblformatted>:
{
 8021320:	b508      	push	{r3, lr}
    return report_alarm_details(true);
 8021322:	2001      	movs	r0, #1
 8021324:	f7fa f94c 	bl	801b5c0 <report_alarm_details>
}
 8021328:	bd08      	pop	{r3, pc}

0802132a <enumerate_alarms>:
{
 802132a:	b508      	push	{r3, lr}
    return report_alarm_details(false);
 802132c:	2000      	movs	r0, #0
 802132e:	f7fa f947 	bl	801b5c0 <report_alarm_details>
}
 8021332:	bd08      	pop	{r3, pc}

08021334 <enumerate_errors_grblformatted>:
{
 8021334:	b508      	push	{r3, lr}
    return report_error_details(true);
 8021336:	2001      	movs	r0, #1
 8021338:	f7fa f998 	bl	801b66c <report_error_details>
}
 802133c:	bd08      	pop	{r3, pc}

0802133e <enumerate_errors>:
{
 802133e:	b508      	push	{r3, lr}
    return report_error_details(false);
 8021340:	2000      	movs	r0, #0
 8021342:	f7fa f993 	bl	801b66c <report_error_details>
}
 8021346:	bd08      	pop	{r3, pc}

08021348 <enumerate_groups>:
{
 8021348:	b508      	push	{r3, lr}
    return report_setting_group_details(true, NULL);
 802134a:	2100      	movs	r1, #0
 802134c:	2001      	movs	r0, #1
 802134e:	f7fa f9e3 	bl	801b718 <report_setting_group_details>
}
 8021352:	bd08      	pop	{r3, pc}

08021354 <enumerate_all>:
{
 8021354:	b508      	push	{r3, lr}
    report_alarm_details(false);
 8021356:	2000      	movs	r0, #0
 8021358:	f7fa f932 	bl	801b5c0 <report_alarm_details>
    report_error_details(false);
 802135c:	2000      	movs	r0, #0
 802135e:	f7fa f985 	bl	801b66c <report_error_details>
    report_setting_group_details(true, NULL);
 8021362:	2100      	movs	r1, #0
 8021364:	2001      	movs	r0, #1
 8021366:	f7fa f9d7 	bl	801b718 <report_setting_group_details>
    return report_settings_details(SettingsFormat_MachineReadable, Setting_SettingsAll, Group_All);
 802136a:	2200      	movs	r2, #0
 802136c:	f240 21e5 	movw	r1, #741	@ 0x2e5
 8021370:	4610      	mov	r0, r2
 8021372:	f7fa f867 	bl	801b444 <report_settings_details>
}
 8021376:	bd08      	pop	{r3, pc}

08021378 <enumerate_settings_halformatted>:
{
 8021378:	b508      	push	{r3, lr}
    return report_settings_details(SettingsFormat_grblHAL, Setting_SettingsAll, Group_All);
 802137a:	2200      	movs	r2, #0
 802137c:	f240 21e5 	movw	r1, #741	@ 0x2e5
 8021380:	2003      	movs	r0, #3
 8021382:	f7fa f85f 	bl	801b444 <report_settings_details>
}
 8021386:	bd08      	pop	{r3, pc}

08021388 <enumerate_settings_grblformatted>:
{
 8021388:	b508      	push	{r3, lr}
    return report_settings_details(SettingsFormat_Grbl, Setting_SettingsAll, Group_All);
 802138a:	2200      	movs	r2, #0
 802138c:	f240 21e5 	movw	r1, #741	@ 0x2e5
 8021390:	2002      	movs	r0, #2
 8021392:	f7fa f857 	bl	801b444 <report_settings_details>
}
 8021396:	bd08      	pop	{r3, pc}

08021398 <enumerate_settings>:
{
 8021398:	b508      	push	{r3, lr}
    return report_settings_details(SettingsFormat_MachineReadable, Setting_SettingsAll, Group_All);
 802139a:	2200      	movs	r2, #0
 802139c:	f240 21e5 	movw	r1, #741	@ 0x2e5
 80213a0:	4610      	mov	r0, r2
 80213a2:	f7fa f84f 	bl	801b444 <report_settings_details>
}
 80213a6:	bd08      	pop	{r3, pc}

080213a8 <set_startup_line>:
{
 80213a8:	b570      	push	{r4, r5, r6, lr}
 80213aa:	460b      	mov	r3, r1
 80213ac:	4615      	mov	r5, r2
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))))
 80213ae:	b118      	cbz	r0, 80213b8 <set_startup_line+0x10>
 80213b0:	f240 1103 	movw	r1, #259	@ 0x103
 80213b4:	4208      	tst	r0, r1
 80213b6:	d017      	beq.n	80213e8 <set_startup_line+0x40>
    if(args == NULL)
 80213b8:	b1c3      	cbz	r3, 80213ec <set_startup_line+0x44>
    args = gc_normalize_block(args, NULL);
 80213ba:	2100      	movs	r1, #0
 80213bc:	4618      	mov	r0, r3
 80213be:	f7ec f9bb 	bl	800d738 <gc_normalize_block>
 80213c2:	4604      	mov	r4, r0
    if(strlen(args) >= (sizeof(stored_line_t) - 1))
 80213c4:	f7e6 fe9c 	bl	8008100 <strlen>
 80213c8:	2844      	cmp	r0, #68	@ 0x44
 80213ca:	d902      	bls.n	80213d2 <set_startup_line+0x2a>
        retval = Status_Overflow;
 80213cc:	260b      	movs	r6, #11
}
 80213ce:	4630      	mov	r0, r6
 80213d0:	bd70      	pop	{r4, r5, r6, pc}
    else if ((retval = gc_execute_block(args)) == Status_OK) // Execute gcode block to ensure block is valid.
 80213d2:	4620      	mov	r0, r4
 80213d4:	f7ec fa52 	bl	800d87c <gc_execute_block>
 80213d8:	4606      	mov	r6, r0
 80213da:	2800      	cmp	r0, #0
 80213dc:	d1f7      	bne.n	80213ce <set_startup_line+0x26>
        settings_write_startup_line(lnr, args);
 80213de:	4621      	mov	r1, r4
 80213e0:	b2e8      	uxtb	r0, r5
 80213e2:	f7fc f8dd 	bl	801d5a0 <settings_write_startup_line>
 80213e6:	e7f2      	b.n	80213ce <set_startup_line+0x26>
        return Status_IdleError;
 80213e8:	2608      	movs	r6, #8
 80213ea:	e7f0      	b.n	80213ce <set_startup_line+0x26>
        return Status_InvalidStatement;
 80213ec:	2603      	movs	r6, #3
 80213ee:	e7ee      	b.n	80213ce <set_startup_line+0x26>

080213f0 <set_startup_line1>:
{
 80213f0:	b508      	push	{r3, lr}
    return set_startup_line(state, args, 1);
 80213f2:	2201      	movs	r2, #1
 80213f4:	f7ff ffd8 	bl	80213a8 <set_startup_line>
}
 80213f8:	bd08      	pop	{r3, pc}

080213fa <set_startup_line0>:
{
 80213fa:	b508      	push	{r3, lr}
    return set_startup_line(state, args, 0);
 80213fc:	2200      	movs	r2, #0
 80213fe:	f7ff ffd3 	bl	80213a8 <set_startup_line>
}
 8021402:	bd08      	pop	{r3, pc}

08021404 <output_startup_lines>:
{
 8021404:	b530      	push	{r4, r5, lr}
 8021406:	b093      	sub	sp, #76	@ 0x4c
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))))
 8021408:	4604      	mov	r4, r0
 802140a:	b150      	cbz	r0, 8021422 <output_startup_lines+0x1e>
 802140c:	f240 1303 	movw	r3, #259	@ 0x103
 8021410:	4218      	tst	r0, r3
 8021412:	d017      	beq.n	8021444 <output_startup_lines+0x40>
 8021414:	2400      	movs	r4, #0
 8021416:	e004      	b.n	8021422 <output_startup_lines+0x1e>
            report_startup_line(counter, line);
 8021418:	4669      	mov	r1, sp
 802141a:	4628      	mov	r0, r5
 802141c:	f7f8 fe9a 	bl	801a154 <report_startup_line>
    for (counter = 0; counter < N_STARTUP_LINE; counter++) {
 8021420:	3401      	adds	r4, #1
 8021422:	2c01      	cmp	r4, #1
 8021424:	d80b      	bhi.n	802143e <output_startup_lines+0x3a>
        if (!(settings_read_startup_line(counter, line)))
 8021426:	b2e5      	uxtb	r5, r4
 8021428:	4669      	mov	r1, sp
 802142a:	4628      	mov	r0, r5
 802142c:	f7fc f8dc 	bl	801d5e8 <settings_read_startup_line>
 8021430:	2800      	cmp	r0, #0
 8021432:	d1f1      	bne.n	8021418 <output_startup_lines+0x14>
            grbl.report.status_message(Status_SettingReadFail);
 8021434:	4b04      	ldr	r3, [pc, #16]	@ (8021448 <output_startup_lines+0x44>)
 8021436:	689b      	ldr	r3, [r3, #8]
 8021438:	2007      	movs	r0, #7
 802143a:	4798      	blx	r3
 802143c:	e7f0      	b.n	8021420 <output_startup_lines+0x1c>
    return Status_OK;
 802143e:	2000      	movs	r0, #0
}
 8021440:	b013      	add	sp, #76	@ 0x4c
 8021442:	bd30      	pop	{r4, r5, pc}
        return Status_IdleError;
 8021444:	2008      	movs	r0, #8
 8021446:	e7fb      	b.n	8021440 <output_startup_lines+0x3c>
 8021448:	20001c78 	.word	0x20001c78

0802144c <settings_reset>:
{
 802144c:	b508      	push	{r3, lr}
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP))))
 802144e:	b118      	cbz	r0, 8021458 <settings_reset+0xc>
 8021450:	f240 1201 	movw	r2, #257	@ 0x101
 8021454:	4210      	tst	r0, r2
 8021456:	d022      	beq.n	802149e <settings_reset+0x52>
    else switch (*args) {
 8021458:	780b      	ldrb	r3, [r1, #0]
 802145a:	3b23      	subs	r3, #35	@ 0x23
 802145c:	2b07      	cmp	r3, #7
 802145e:	d820      	bhi.n	80214a2 <settings_reset+0x56>
 8021460:	e8df f003 	tbb	[pc, r3]
 8021464:	0f1f0409 	.word	0x0f1f0409
 8021468:	0c1f1f1f 	.word	0x0c1f1f1f
            restore.defaults = On;
 802146c:	f04f 0301 	mov.w	r3, #1
    if(retval == Status_OK && restore.mask) {
 8021470:	b2d8      	uxtb	r0, r3
 8021472:	b948      	cbnz	r0, 8021488 <settings_reset+0x3c>
}
 8021474:	bd08      	pop	{r3, pc}
            restore.parameters = On;
 8021476:	f04f 0302 	mov.w	r3, #2
    if(retval == Status_OK && restore.mask) {
 802147a:	e7f9      	b.n	8021470 <settings_reset+0x24>
            restore.mask = settings_all.mask;
 802147c:	4b0a      	ldr	r3, [pc, #40]	@ (80214a8 <settings_reset+0x5c>)
 802147e:	781b      	ldrb	r3, [r3, #0]
    if(retval == Status_OK && restore.mask) {
 8021480:	e7f6      	b.n	8021470 <settings_reset+0x24>
            restore.driver_parameters = On;
 8021482:	f04f 0310 	mov.w	r3, #16
    if(retval == Status_OK && restore.mask) {
 8021486:	e7f3      	b.n	8021470 <settings_reset+0x24>
        settings_restore(restore);
 8021488:	4618      	mov	r0, r3
 802148a:	f7fc f993 	bl	801d7b4 <settings_restore>
        grbl.report.feedback_message(Message_RestoreDefaults);
 802148e:	4b07      	ldr	r3, [pc, #28]	@ (80214ac <settings_reset+0x60>)
 8021490:	68db      	ldr	r3, [r3, #12]
 8021492:	2009      	movs	r0, #9
 8021494:	4798      	blx	r3
        mc_reset(); // Force reset to ensure settings are initialized correctly.
 8021496:	f7f3 fc23 	bl	8014ce0 <mc_reset>
 802149a:	2000      	movs	r0, #0
 802149c:	e7ea      	b.n	8021474 <settings_reset+0x28>
        retval = Status_IdleError;
 802149e:	2008      	movs	r0, #8
 80214a0:	e7e8      	b.n	8021474 <settings_reset+0x28>
    else switch (*args) {
 80214a2:	2003      	movs	r0, #3
 80214a4:	e7e6      	b.n	8021474 <settings_reset+0x28>
 80214a6:	bf00      	nop
 80214a8:	08030aa8 	.word	0x08030aa8
 80214ac:	20001c78 	.word	0x20001c78

080214b0 <output_all_build_info>:
{
 80214b0:	b500      	push	{lr}
 80214b2:	b093      	sub	sp, #76	@ 0x4c
    settings_read_build_info(info);
 80214b4:	4668      	mov	r0, sp
 80214b6:	f7fc f857 	bl	801d568 <settings_read_build_info>
    report_build_info(info, true);
 80214ba:	2101      	movs	r1, #1
 80214bc:	4668      	mov	r0, sp
 80214be:	f7f8 fe87 	bl	801a1d0 <report_build_info>
}
 80214c2:	2000      	movs	r0, #0
 80214c4:	b013      	add	sp, #76	@ 0x4c
 80214c6:	f85d fb04 	ldr.w	pc, [sp], #4

080214ca <build_info>:
{
 80214ca:	b510      	push	{r4, lr}
 80214cc:	b092      	sub	sp, #72	@ 0x48
 80214ce:	460c      	mov	r4, r1
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP|STATE_SLEEP|STATE_CHECK_MODE))))
 80214d0:	b118      	cbz	r0, 80214da <build_info+0x10>
 80214d2:	f240 1283 	movw	r2, #387	@ 0x183
 80214d6:	4210      	tst	r0, r2
 80214d8:	d014      	beq.n	8021504 <build_info+0x3a>
    if (args == NULL) {
 80214da:	b154      	cbz	r4, 80214f2 <build_info+0x28>
    else if (strlen(args) < (sizeof(stored_line_t) - 1))
 80214dc:	4620      	mov	r0, r4
 80214de:	f7e6 fe0f 	bl	8008100 <strlen>
 80214e2:	2844      	cmp	r0, #68	@ 0x44
 80214e4:	d810      	bhi.n	8021508 <build_info+0x3e>
        settings_write_build_info(args);
 80214e6:	4620      	mov	r0, r4
 80214e8:	f7fc f82c 	bl	801d544 <settings_write_build_info>
    return Status_OK;
 80214ec:	2000      	movs	r0, #0
}
 80214ee:	b012      	add	sp, #72	@ 0x48
 80214f0:	bd10      	pop	{r4, pc}
        settings_read_build_info(info);
 80214f2:	4668      	mov	r0, sp
 80214f4:	f7fc f838 	bl	801d568 <settings_read_build_info>
        report_build_info(info, false);
 80214f8:	2100      	movs	r1, #0
 80214fa:	4668      	mov	r0, sp
 80214fc:	f7f8 fe68 	bl	801a1d0 <report_build_info>
    return Status_OK;
 8021500:	2000      	movs	r0, #0
 8021502:	e7f4      	b.n	80214ee <build_info+0x24>
        return Status_IdleError;
 8021504:	2008      	movs	r0, #8
 8021506:	e7f2      	b.n	80214ee <build_info+0x24>
        return Status_InvalidStatement;
 8021508:	2003      	movs	r0, #3
 802150a:	e7f0      	b.n	80214ee <build_info+0x24>

0802150c <tool_probe_workpiece>:
{
 802150c:	b508      	push	{r3, lr}
    return tc_probe_workpiece();
 802150e:	f001 fa37 	bl	8022980 <tc_probe_workpiece>
}
 8021512:	bd08      	pop	{r3, pc}

08021514 <enumerate_spindles_mr>:
{
 8021514:	b508      	push	{r3, lr}
    return report_spindles(true);
 8021516:	2001      	movs	r0, #1
 8021518:	f7fa fd44 	bl	801bfa4 <report_spindles>
}
 802151c:	bd08      	pop	{r3, pc}

0802151e <enumerate_spindles>:
{
 802151e:	b508      	push	{r3, lr}
    return report_spindles(false);
 8021520:	2000      	movs	r0, #0
 8021522:	f7fa fd3f 	bl	801bfa4 <report_spindles>
}
 8021526:	bd08      	pop	{r3, pc}

08021528 <output_help>:
{
 8021528:	b508      	push	{r3, lr}
    return report_help(args);
 802152a:	4608      	mov	r0, r1
 802152c:	f7fa f956 	bl	801b7dc <report_help>
}
 8021530:	bd08      	pop	{r3, pc}
	...

08021534 <check_mode>:
{
 8021534:	b508      	push	{r3, lr}
    if (state == STATE_CHECK_MODE) {
 8021536:	2802      	cmp	r0, #2
 8021538:	d009      	beq.n	802154e <check_mode+0x1a>
    } else if (state == STATE_IDLE) { // Requires idle mode.
 802153a:	b980      	cbnz	r0, 802155e <check_mode+0x2a>
        state_set(STATE_CHECK_MODE);
 802153c:	2002      	movs	r0, #2
 802153e:	f7fd fd09 	bl	801ef54 <state_set>
        grbl.report.feedback_message(Message_Enabled);
 8021542:	4b08      	ldr	r3, [pc, #32]	@ (8021564 <check_mode+0x30>)
 8021544:	68db      	ldr	r3, [r3, #12]
 8021546:	2004      	movs	r0, #4
 8021548:	4798      	blx	r3
    return Status_OK;
 802154a:	2000      	movs	r0, #0
}
 802154c:	bd08      	pop	{r3, pc}
        mc_reset();
 802154e:	f7f3 fbc7 	bl	8014ce0 <mc_reset>
        grbl.report.feedback_message(Message_Disabled);
 8021552:	4b04      	ldr	r3, [pc, #16]	@ (8021564 <check_mode+0x30>)
 8021554:	68db      	ldr	r3, [r3, #12]
 8021556:	2005      	movs	r0, #5
 8021558:	4798      	blx	r3
    return Status_OK;
 802155a:	2000      	movs	r0, #0
 802155c:	e7f6      	b.n	802154c <check_mode+0x18>
        return Status_IdleError;
 802155e:	2008      	movs	r0, #8
 8021560:	e7f4      	b.n	802154c <check_mode+0x18>
 8021562:	bf00      	nop
 8021564:	20001c78 	.word	0x20001c78

08021568 <disable_lock>:
{
 8021568:	b510      	push	{r4, lr}
 802156a:	b082      	sub	sp, #8
    if(state & (STATE_ALARM|STATE_ESTOP)) {
 802156c:	f240 1301 	movw	r3, #257	@ 0x101
 8021570:	4218      	tst	r0, r3
 8021572:	d037      	beq.n	80215e4 <disable_lock+0x7c>
        control_signals_t control_signals = hal.control.get_state();
 8021574:	4b1d      	ldr	r3, [pc, #116]	@ (80215ec <disable_lock+0x84>)
 8021576:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8021578:	4798      	blx	r3
        if(sys.alarm == Alarm_SelftestFailed)
 802157a:	4b1d      	ldr	r3, [pc, #116]	@ (80215f0 <disable_lock+0x88>)
 802157c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8021580:	2b10      	cmp	r3, #16
 8021582:	d023      	beq.n	80215cc <disable_lock+0x64>
        else if (control_signals.e_stop)
 8021584:	b2c4      	uxtb	r4, r0
 8021586:	f010 0f40 	tst.w	r0, #64	@ 0x40
 802158a:	d121      	bne.n	80215d0 <disable_lock+0x68>
        else if (control_signals.safety_door_ajar)
 802158c:	f014 0f08 	tst.w	r4, #8
 8021590:	d120      	bne.n	80215d4 <disable_lock+0x6c>
        else if(control_signals.reset)
 8021592:	f014 0401 	ands.w	r4, r4, #1
 8021596:	d11f      	bne.n	80215d8 <disable_lock+0x70>
        else if(settings.limits.flags.hard_enabled && settings.limits.flags.check_at_init && limit_signals_merge(hal.limits.get_state()).value)
 8021598:	4b16      	ldr	r3, [pc, #88]	@ (80215f4 <disable_lock+0x8c>)
 802159a:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 802159e:	f003 0305 	and.w	r3, r3, #5
 80215a2:	2b05      	cmp	r3, #5
 80215a4:	d107      	bne.n	80215b6 <disable_lock+0x4e>
 80215a6:	4b11      	ldr	r3, [pc, #68]	@ (80215ec <disable_lock+0x84>)
 80215a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80215aa:	4798      	blx	r3
 80215ac:	9001      	str	r0, [sp, #4]
 80215ae:	f7f1 fe69 	bl	8013284 <limit_signals_merge>
 80215b2:	b2c0      	uxtb	r0, r0
 80215b4:	b990      	cbnz	r0, 80215dc <disable_lock+0x74>
        else if(limits_homing_required())
 80215b6:	f7f2 fab1 	bl	8013b1c <limits_homing_required>
 80215ba:	b988      	cbnz	r0, 80215e0 <disable_lock+0x78>
            grbl.report.feedback_message(Message_AlarmUnlock);
 80215bc:	4b0e      	ldr	r3, [pc, #56]	@ (80215f8 <disable_lock+0x90>)
 80215be:	68db      	ldr	r3, [r3, #12]
 80215c0:	2003      	movs	r0, #3
 80215c2:	4798      	blx	r3
            state_set(STATE_IDLE);
 80215c4:	2000      	movs	r0, #0
 80215c6:	f7fd fcc5 	bl	801ef54 <state_set>
 80215ca:	e00c      	b.n	80215e6 <disable_lock+0x7e>
            retval = Status_SelfTestFailed;
 80215cc:	2431      	movs	r4, #49	@ 0x31
 80215ce:	e00a      	b.n	80215e6 <disable_lock+0x7e>
            retval = Status_EStop;
 80215d0:	2432      	movs	r4, #50	@ 0x32
 80215d2:	e008      	b.n	80215e6 <disable_lock+0x7e>
            retval = Status_CheckDoor;
 80215d4:	240d      	movs	r4, #13
 80215d6:	e006      	b.n	80215e6 <disable_lock+0x7e>
            retval = Status_Reset;
 80215d8:	2412      	movs	r4, #18
 80215da:	e004      	b.n	80215e6 <disable_lock+0x7e>
            retval = Status_LimitsEngaged;
 80215dc:	242d      	movs	r4, #45	@ 0x2d
 80215de:	e002      	b.n	80215e6 <disable_lock+0x7e>
            retval = Status_HomingRequired;
 80215e0:	242e      	movs	r4, #46	@ 0x2e
 80215e2:	e000      	b.n	80215e6 <disable_lock+0x7e>
    status_code_t retval = Status_OK;
 80215e4:	2400      	movs	r4, #0
}
 80215e6:	4620      	mov	r0, r4
 80215e8:	b002      	add	sp, #8
 80215ea:	bd10      	pop	{r4, pc}
 80215ec:	20001a90 	.word	0x20001a90
 80215f0:	20001d70 	.word	0x20001d70
 80215f4:	200024a8 	.word	0x200024a8
 80215f8:	20001c78 	.word	0x20001c78

080215fc <read_int>:
{
 80215fc:	b510      	push	{r4, lr}
 80215fe:	ed2d 8b02 	vpush	{d8}
 8021602:	b082      	sub	sp, #8
 8021604:	460c      	mov	r4, r1
    uint_fast8_t counter = 0;
 8021606:	2300      	movs	r3, #0
 8021608:	9301      	str	r3, [sp, #4]
    if(!read_float(s, &counter, &parameter))
 802160a:	466a      	mov	r2, sp
 802160c:	a901      	add	r1, sp, #4
 802160e:	f7f4 fad9 	bl	8015bc4 <read_float>
 8021612:	b1a8      	cbz	r0, 8021640 <read_int+0x44>
    if(parameter - truncf(parameter) != 0.0f)
 8021614:	ed9d 8a00 	vldr	s16, [sp]
 8021618:	eeb0 0a48 	vmov.f32	s0, s16
 802161c:	f006 faa0 	bl	8027b60 <truncf>
 8021620:	ee38 0a40 	vsub.f32	s0, s16, s0
 8021624:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8021628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802162c:	d10a      	bne.n	8021644 <read_int+0x48>
    *value = (int32_t)parameter;
 802162e:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8021632:	ed84 8a00 	vstr	s16, [r4]
    return Status_OK;
 8021636:	2000      	movs	r0, #0
}
 8021638:	b002      	add	sp, #8
 802163a:	ecbd 8b02 	vpop	{d8}
 802163e:	bd10      	pop	{r4, pc}
        return Status_BadNumberFormat;
 8021640:	2002      	movs	r0, #2
 8021642:	e7f9      	b.n	8021638 <read_int+0x3c>
        return Status_InvalidStatement;
 8021644:	2003      	movs	r0, #3
 8021646:	e7f7      	b.n	8021638 <read_int+0x3c>

08021648 <output_setting_description>:
    if(args) {
 8021648:	b189      	cbz	r1, 802166e <output_setting_description+0x26>
{
 802164a:	b500      	push	{lr}
 802164c:	b083      	sub	sp, #12
 802164e:	4608      	mov	r0, r1
        retval = read_int(args, &id);
 8021650:	a901      	add	r1, sp, #4
 8021652:	f7ff ffd3 	bl	80215fc <read_int>
        if(retval == Status_OK && id >= 0)
 8021656:	b910      	cbnz	r0, 802165e <output_setting_description+0x16>
 8021658:	9901      	ldr	r1, [sp, #4]
 802165a:	2900      	cmp	r1, #0
 802165c:	da02      	bge.n	8021664 <output_setting_description+0x1c>
}
 802165e:	b003      	add	sp, #12
 8021660:	f85d fb04 	ldr.w	pc, [sp], #4
            retval = report_setting_description(SettingsFormat_MachineReadable, (setting_id_t)id);
 8021664:	b289      	uxth	r1, r1
 8021666:	2000      	movs	r0, #0
 8021668:	f7f9 ff52 	bl	801b510 <report_setting_description>
 802166c:	e7f7      	b.n	802165e <output_setting_description+0x16>
    status_code_t retval = Status_BadNumberFormat;
 802166e:	2002      	movs	r0, #2
}
 8021670:	4770      	bx	lr

08021672 <output_all_settings>:
{
 8021672:	b500      	push	{lr}
 8021674:	b083      	sub	sp, #12
    if(args) {
 8021676:	b171      	cbz	r1, 8021696 <output_all_settings+0x24>
 8021678:	460b      	mov	r3, r1
        retval = read_int(args, &id);
 802167a:	a901      	add	r1, sp, #4
 802167c:	4618      	mov	r0, r3
 802167e:	f7ff ffbd 	bl	80215fc <read_int>
        if(retval == Status_OK && id >= 0)
 8021682:	b960      	cbnz	r0, 802169e <output_all_settings+0x2c>
 8021684:	9901      	ldr	r1, [sp, #4]
 8021686:	2900      	cmp	r1, #0
 8021688:	db09      	blt.n	802169e <output_all_settings+0x2c>
            retval = report_settings_details(SettingsFormat_HumanReadable, (setting_id_t)id, Group_All);
 802168a:	2200      	movs	r2, #0
 802168c:	b289      	uxth	r1, r1
 802168e:	2001      	movs	r0, #1
 8021690:	f7f9 fed8 	bl	801b444 <report_settings_details>
 8021694:	e003      	b.n	802169e <output_all_settings+0x2c>
    } else if (state & (STATE_CYCLE|STATE_HOLD))
 8021696:	f010 0f18 	tst.w	r0, #24
 802169a:	d003      	beq.n	80216a4 <output_all_settings+0x32>
        retval = Status_IdleError; // Block during cycle. Takes too long to print.
 802169c:	2008      	movs	r0, #8
}
 802169e:	b003      	add	sp, #12
 80216a0:	f85d fb04 	ldr.w	pc, [sp], #4
        report_grbl_settings(true, NULL);
 80216a4:	2100      	movs	r1, #0
 80216a6:	2001      	movs	r0, #1
 80216a8:	f7f8 f8ba 	bl	8019820 <report_grbl_settings>
    status_code_t retval = Status_OK;
 80216ac:	2000      	movs	r0, #0
 80216ae:	e7f6      	b.n	802169e <output_all_settings+0x2c>

080216b0 <output_settings>:
{
 80216b0:	b500      	push	{lr}
 80216b2:	b083      	sub	sp, #12
    if(args) {
 80216b4:	b171      	cbz	r1, 80216d4 <output_settings+0x24>
 80216b6:	460b      	mov	r3, r1
        retval = read_int(args, &id);
 80216b8:	a901      	add	r1, sp, #4
 80216ba:	4618      	mov	r0, r3
 80216bc:	f7ff ff9e 	bl	80215fc <read_int>
        if(retval == Status_OK && id >= 0)
 80216c0:	b960      	cbnz	r0, 80216dc <output_settings+0x2c>
 80216c2:	9901      	ldr	r1, [sp, #4]
 80216c4:	2900      	cmp	r1, #0
 80216c6:	db09      	blt.n	80216dc <output_settings+0x2c>
            retval = report_settings_details(SettingsFormat_HumanReadable, (setting_id_t)id, Group_All);
 80216c8:	2200      	movs	r2, #0
 80216ca:	b289      	uxth	r1, r1
 80216cc:	2001      	movs	r0, #1
 80216ce:	f7f9 feb9 	bl	801b444 <report_settings_details>
 80216d2:	e003      	b.n	80216dc <output_settings+0x2c>
    } else if (state & (STATE_CYCLE|STATE_HOLD))
 80216d4:	f010 0f18 	tst.w	r0, #24
 80216d8:	d003      	beq.n	80216e2 <output_settings+0x32>
        retval = Status_IdleError; // Block during cycle. Takes too long to print.
 80216da:	2008      	movs	r0, #8
}
 80216dc:	b003      	add	sp, #12
 80216de:	f85d fb04 	ldr.w	pc, [sp], #4
    report_grbl_settings(true, NULL);
 80216e2:	2100      	movs	r1, #0
 80216e4:	2001      	movs	r0, #1
 80216e6:	f7f8 f89b 	bl	8019820 <report_grbl_settings>
    status_code_t retval = Status_OK;
 80216ea:	2000      	movs	r0, #0
 80216ec:	e7f6      	b.n	80216dc <output_settings+0x2c>

080216ee <output_ngc_parameters>:
{
 80216ee:	b510      	push	{r4, lr}
 80216f0:	b082      	sub	sp, #8
    if(args) {
 80216f2:	b189      	cbz	r1, 8021718 <output_ngc_parameters+0x2a>
 80216f4:	460c      	mov	r4, r1
        retval = read_int(args, &id);
 80216f6:	a901      	add	r1, sp, #4
 80216f8:	4620      	mov	r0, r4
 80216fa:	f7ff ff7f 	bl	80215fc <read_int>
        if(retval == Status_OK && id >= 0)
 80216fe:	b910      	cbnz	r0, 8021706 <output_ngc_parameters+0x18>
 8021700:	9801      	ldr	r0, [sp, #4]
 8021702:	2800      	cmp	r0, #0
 8021704:	da04      	bge.n	8021710 <output_ngc_parameters+0x22>
            retval = report_named_ngc_parameter(args);
 8021706:	4620      	mov	r0, r4
 8021708:	f7f8 f9ca 	bl	8019aa0 <report_named_ngc_parameter>
}
 802170c:	b002      	add	sp, #8
 802170e:	bd10      	pop	{r4, pc}
            retval = report_ngc_parameter((ngc_param_id_t)id);
 8021710:	b280      	uxth	r0, r0
 8021712:	f7f8 f983 	bl	8019a1c <report_ngc_parameter>
 8021716:	e7f9      	b.n	802170c <output_ngc_parameters+0x1e>
        report_ngc_parameters();
 8021718:	f7f8 fa00 	bl	8019b1c <report_ngc_parameters>
    status_code_t retval = Status_OK;
 802171c:	2000      	movs	r0, #0
 802171e:	e7f5      	b.n	802170c <output_ngc_parameters+0x1e>

08021720 <system_init_switches>:
{
 8021720:	b508      	push	{r3, lr}
    control_signals_t signals = hal.control.get_state();
 8021722:	4b0b      	ldr	r3, [pc, #44]	@ (8021750 <system_init_switches+0x30>)
 8021724:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8021726:	4798      	blx	r3
    sys.flags.block_delete_enabled = signals.block_delete;
 8021728:	f3c0 1100 	ubfx	r1, r0, #4, #1
 802172c:	4b09      	ldr	r3, [pc, #36]	@ (8021754 <system_init_switches+0x34>)
 802172e:	7d9a      	ldrb	r2, [r3, #22]
 8021730:	f361 1204 	bfi	r2, r1, #4, #1
 8021734:	759a      	strb	r2, [r3, #22]
    sys.flags.single_block = signals.single_block;
 8021736:	f3c0 21c0 	ubfx	r1, r0, #11, #1
 802173a:	b2d2      	uxtb	r2, r2
 802173c:	f361 12c7 	bfi	r2, r1, #7, #1
 8021740:	759a      	strb	r2, [r3, #22]
    sys.flags.optional_stop_disable = signals.stop_disable;
 8021742:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8021746:	b2d2      	uxtb	r2, r2
 8021748:	f360 1286 	bfi	r2, r0, #6, #1
 802174c:	759a      	strb	r2, [r3, #22]
}
 802174e:	bd08      	pop	{r3, pc}
 8021750:	20001a90 	.word	0x20001a90
 8021754:	20001d70 	.word	0x20001d70

08021758 <control_interrupt_handler>:
{
 8021758:	b5f0      	push	{r4, r5, r6, r7, lr}
 802175a:	b083      	sub	sp, #12
 802175c:	4604      	mov	r4, r0
    if(signals.deasserted)
 802175e:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8021762:	d153      	bne.n	802180c <control_interrupt_handler+0xb4>
    if(signals.value) {
 8021764:	b2a3      	uxth	r3, r4
 8021766:	2b00      	cmp	r3, #0
 8021768:	d04e      	beq.n	8021808 <control_interrupt_handler+0xb0>
        sys.last_event.control.value = signals.value;
 802176a:	4a66      	ldr	r2, [pc, #408]	@ (8021904 <control_interrupt_handler+0x1ac>)
 802176c:	f8a2 4080 	strh.w	r4, [r2, #128]	@ 0x80
        if((signals.reset || signals.e_stop || signals.motor_fault) && state_get() != STATE_ESTOP)
 8021770:	f240 1241 	movw	r2, #321	@ 0x141
 8021774:	4213      	tst	r3, r2
 8021776:	d151      	bne.n	802181c <control_interrupt_handler+0xc4>
            if(signals.safety_door_ajar && hal.signals_cap.safety_door_ajar) {
 8021778:	b2e6      	uxtb	r6, r4
 802177a:	f014 0f08 	tst.w	r4, #8
 802177e:	d010      	beq.n	80217a2 <control_interrupt_handler+0x4a>
 8021780:	4b61      	ldr	r3, [pc, #388]	@ (8021908 <control_interrupt_handler+0x1b0>)
 8021782:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8021786:	f013 0f08 	tst.w	r3, #8
 802178a:	d00a      	beq.n	80217a2 <control_interrupt_handler+0x4a>
                if(settings.safety_door.flags.ignore_when_idle) {
 802178c:	4b5f      	ldr	r3, [pc, #380]	@ (802190c <control_interrupt_handler+0x1b4>)
 802178e:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 8021792:	f013 0f01 	tst.w	r3, #1
 8021796:	d149      	bne.n	802182c <control_interrupt_handler+0xd4>
                    system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 8021798:	4b5b      	ldr	r3, [pc, #364]	@ (8021908 <control_interrupt_handler+0x1b0>)
 802179a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802179c:	2140      	movs	r1, #64	@ 0x40
 802179e:	485c      	ldr	r0, [pc, #368]	@ (8021910 <control_interrupt_handler+0x1b8>)
 80217a0:	4798      	blx	r3
            if(signals.probe_overtravel) {
 80217a2:	f3c4 2507 	ubfx	r5, r4, #8, #8
 80217a6:	462f      	mov	r7, r5
 80217a8:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 80217ac:	d052      	beq.n	8021854 <control_interrupt_handler+0xfc>
                limit_signals_t overtravel = { .min.z = On};
 80217ae:	2300      	movs	r3, #0
 80217b0:	9301      	str	r3, [sp, #4]
 80217b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80217b6:	f043 0304 	orr.w	r3, r3, #4
 80217ba:	f88d 3004 	strb.w	r3, [sp, #4]
                hal.limits.interrupt_callback(overtravel);
 80217be:	4b52      	ldr	r3, [pc, #328]	@ (8021908 <control_interrupt_handler+0x1b0>)
 80217c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80217c2:	9801      	ldr	r0, [sp, #4]
 80217c4:	4798      	blx	r3
            if(signals.block_delete)
 80217c6:	f016 0f10 	tst.w	r6, #16
 80217ca:	d007      	beq.n	80217dc <control_interrupt_handler+0x84>
                sys.flags.block_delete_enabled = !signals.deasserted;
 80217cc:	43eb      	mvns	r3, r5
 80217ce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80217d2:	4a4c      	ldr	r2, [pc, #304]	@ (8021904 <control_interrupt_handler+0x1ac>)
 80217d4:	7d91      	ldrb	r1, [r2, #22]
 80217d6:	f363 1104 	bfi	r1, r3, #4, #1
 80217da:	7591      	strb	r1, [r2, #22]
            if(signals.single_block)
 80217dc:	f017 0f08 	tst.w	r7, #8
 80217e0:	d007      	beq.n	80217f2 <control_interrupt_handler+0x9a>
                sys.flags.single_block = !signals.deasserted;
 80217e2:	43eb      	mvns	r3, r5
 80217e4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80217e8:	4a46      	ldr	r2, [pc, #280]	@ (8021904 <control_interrupt_handler+0x1ac>)
 80217ea:	7d91      	ldrb	r1, [r2, #22]
 80217ec:	f363 11c7 	bfi	r1, r3, #7, #1
 80217f0:	7591      	strb	r1, [r2, #22]
            if(signals.stop_disable)
 80217f2:	f016 0f20 	tst.w	r6, #32
 80217f6:	d007      	beq.n	8021808 <control_interrupt_handler+0xb0>
                sys.flags.optional_stop_disable = !signals.deasserted;
 80217f8:	43eb      	mvns	r3, r5
 80217fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80217fe:	4a41      	ldr	r2, [pc, #260]	@ (8021904 <control_interrupt_handler+0x1ac>)
 8021800:	7d91      	ldrb	r1, [r2, #22]
 8021802:	f363 1186 	bfi	r1, r3, #6, #1
 8021806:	7591      	strb	r1, [r2, #22]
}
 8021808:	b003      	add	sp, #12
 802180a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        signals.value &= onoff_signals.mask;
 802180c:	b284      	uxth	r4, r0
 802180e:	f424 44ef 	bic.w	r4, r4, #30592	@ 0x7780
 8021812:	f424 44ef 	bic.w	r4, r4, #30592	@ 0x7780
 8021816:	f024 044f 	bic.w	r4, r4, #79	@ 0x4f
 802181a:	e7a3      	b.n	8021764 <control_interrupt_handler+0xc>
        if((signals.reset || signals.e_stop || signals.motor_fault) && state_get() != STATE_ESTOP)
 802181c:	f7fd fb94 	bl	801ef48 <state_get>
 8021820:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8021824:	d0a8      	beq.n	8021778 <control_interrupt_handler+0x20>
            mc_reset();
 8021826:	f7f3 fa5b 	bl	8014ce0 <mc_reset>
 802182a:	e7ed      	b.n	8021808 <control_interrupt_handler+0xb0>
                    if(state_get() != STATE_IDLE && state_get() != STATE_JOG)
 802182c:	f7fd fb8c 	bl	801ef48 <state_get>
 8021830:	b930      	cbnz	r0, 8021840 <control_interrupt_handler+0xe8>
                    if(settings.mode == Mode_Laser) // Turn off spindle immediately (laser) when in laser mode
 8021832:	4b36      	ldr	r3, [pc, #216]	@ (802190c <control_interrupt_handler+0x1b4>)
 8021834:	7e1b      	ldrb	r3, [r3, #24]
 8021836:	2b01      	cmp	r3, #1
 8021838:	d1b3      	bne.n	80217a2 <control_interrupt_handler+0x4a>
                        spindle_all_off();
 802183a:	f7fd f901 	bl	801ea40 <spindle_all_off>
 802183e:	e7b0      	b.n	80217a2 <control_interrupt_handler+0x4a>
                    if(state_get() != STATE_IDLE && state_get() != STATE_JOG)
 8021840:	f7fd fb82 	bl	801ef48 <state_get>
 8021844:	2820      	cmp	r0, #32
 8021846:	d0f4      	beq.n	8021832 <control_interrupt_handler+0xda>
                        system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 8021848:	4b2f      	ldr	r3, [pc, #188]	@ (8021908 <control_interrupt_handler+0x1b0>)
 802184a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802184c:	2140      	movs	r1, #64	@ 0x40
 802184e:	4830      	ldr	r0, [pc, #192]	@ (8021910 <control_interrupt_handler+0x1b8>)
 8021850:	4798      	blx	r3
 8021852:	e7ee      	b.n	8021832 <control_interrupt_handler+0xda>
            } else if(signals.probe_triggered) {
 8021854:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8021858:	d019      	beq.n	802188e <control_interrupt_handler+0x136>
                if(sys.probing_state == Probing_Off && (state_get() & (STATE_CYCLE|STATE_JOG))) {
 802185a:	4b2a      	ldr	r3, [pc, #168]	@ (8021904 <control_interrupt_handler+0x1ac>)
 802185c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8021860:	b133      	cbz	r3, 8021870 <control_interrupt_handler+0x118>
                    hal.probe.configure(false, false);
 8021862:	4b29      	ldr	r3, [pc, #164]	@ (8021908 <control_interrupt_handler+0x1b0>)
 8021864:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8021868:	2100      	movs	r1, #0
 802186a:	4608      	mov	r0, r1
 802186c:	4798      	blx	r3
 802186e:	e7aa      	b.n	80217c6 <control_interrupt_handler+0x6e>
                if(sys.probing_state == Probing_Off && (state_get() & (STATE_CYCLE|STATE_JOG))) {
 8021870:	f7fd fb6a 	bl	801ef48 <state_get>
 8021874:	f010 0f28 	tst.w	r0, #40	@ 0x28
 8021878:	d0f3      	beq.n	8021862 <control_interrupt_handler+0x10a>
                    system_set_exec_state_flag(EXEC_STOP);
 802187a:	4b23      	ldr	r3, [pc, #140]	@ (8021908 <control_interrupt_handler+0x1b0>)
 802187c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802187e:	4c24      	ldr	r4, [pc, #144]	@ (8021910 <control_interrupt_handler+0x1b8>)
 8021880:	2110      	movs	r1, #16
 8021882:	4620      	mov	r0, r4
 8021884:	4798      	blx	r3
                    sys.alarm_pending = Alarm_ProbeProtect;
 8021886:	230d      	movs	r3, #13
 8021888:	f804 3c34 	strb.w	r3, [r4, #-52]
 802188c:	e79b      	b.n	80217c6 <control_interrupt_handler+0x6e>
            } else if(signals.probe_disconnected) {
 802188e:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8021892:	d108      	bne.n	80218a6 <control_interrupt_handler+0x14e>
            } else if(signals.feed_hold)
 8021894:	f016 0f02 	tst.w	r6, #2
 8021898:	d019      	beq.n	80218ce <control_interrupt_handler+0x176>
                system_set_exec_state_flag(EXEC_FEED_HOLD);
 802189a:	4b1b      	ldr	r3, [pc, #108]	@ (8021908 <control_interrupt_handler+0x1b0>)
 802189c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802189e:	2108      	movs	r1, #8
 80218a0:	481b      	ldr	r0, [pc, #108]	@ (8021910 <control_interrupt_handler+0x1b8>)
 80218a2:	4798      	blx	r3
 80218a4:	e78f      	b.n	80217c6 <control_interrupt_handler+0x6e>
                if(sys.probing_state == Probing_Active && state_get() == STATE_CYCLE) {
 80218a6:	4b17      	ldr	r3, [pc, #92]	@ (8021904 <control_interrupt_handler+0x1ac>)
 80218a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80218ac:	b2db      	uxtb	r3, r3
 80218ae:	2b01      	cmp	r3, #1
 80218b0:	d189      	bne.n	80217c6 <control_interrupt_handler+0x6e>
 80218b2:	f7fd fb49 	bl	801ef48 <state_get>
 80218b6:	2808      	cmp	r0, #8
 80218b8:	d185      	bne.n	80217c6 <control_interrupt_handler+0x6e>
                    system_set_exec_state_flag(EXEC_FEED_HOLD);
 80218ba:	4b13      	ldr	r3, [pc, #76]	@ (8021908 <control_interrupt_handler+0x1b0>)
 80218bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80218be:	4c14      	ldr	r4, [pc, #80]	@ (8021910 <control_interrupt_handler+0x1b8>)
 80218c0:	2108      	movs	r1, #8
 80218c2:	4620      	mov	r0, r4
 80218c4:	4798      	blx	r3
                    sys.alarm_pending = Alarm_ProbeProtect;
 80218c6:	230d      	movs	r3, #13
 80218c8:	f804 3c34 	strb.w	r3, [r4, #-52]
 80218cc:	e77b      	b.n	80217c6 <control_interrupt_handler+0x6e>
            else if(signals.cycle_start) {
 80218ce:	f016 0f04 	tst.w	r6, #4
 80218d2:	f43f af78 	beq.w	80217c6 <control_interrupt_handler+0x6e>
                system_set_exec_state_flag(EXEC_CYCLE_START);
 80218d6:	4b0c      	ldr	r3, [pc, #48]	@ (8021908 <control_interrupt_handler+0x1b0>)
 80218d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80218da:	4c0d      	ldr	r4, [pc, #52]	@ (8021910 <control_interrupt_handler+0x1b8>)
 80218dc:	2102      	movs	r1, #2
 80218de:	4620      	mov	r0, r4
 80218e0:	4798      	blx	r3
                sys.report.cycle_start = settings.status_report.pin_state;
 80218e2:	4b0a      	ldr	r3, [pc, #40]	@ (802190c <control_interrupt_handler+0x1b4>)
 80218e4:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 80218e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80218ec:	f814 2c15 	ldrb.w	r2, [r4, #-21]
 80218f0:	f363 1286 	bfi	r2, r3, #6, #1
 80218f4:	f804 2c15 	strb.w	r2, [r4, #-21]
                gc_state.tool_change = false;
 80218f8:	4b06      	ldr	r3, [pc, #24]	@ (8021914 <control_interrupt_handler+0x1bc>)
 80218fa:	2200      	movs	r2, #0
 80218fc:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8021900:	e761      	b.n	80217c6 <control_interrupt_handler+0x6e>
 8021902:	bf00      	nop
 8021904:	20001d70 	.word	0x20001d70
 8021908:	20001a90 	.word	0x20001a90
 802190c:	200024a8 	.word	0x200024a8
 8021910:	20001db8 	.word	0x20001db8
 8021914:	200017c8 	.word	0x200017c8

08021918 <system_execute_startup>:
    if(hal.nvs.type != NVS_None) {
 8021918:	4b11      	ldr	r3, [pc, #68]	@ (8021960 <system_execute_startup+0x48>)
 802191a:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 802191e:	b9cb      	cbnz	r3, 8021954 <system_execute_startup+0x3c>
 8021920:	4770      	bx	lr
                report_execute_startup_message(line, Status_SettingReadFail);
 8021922:	2107      	movs	r1, #7
 8021924:	4668      	mov	r0, sp
 8021926:	f7f8 fc35 	bl	801a194 <report_execute_startup_message>
        for (n = 0; n < N_STARTUP_LINE; n++) {
 802192a:	3401      	adds	r4, #1
 802192c:	2c01      	cmp	r4, #1
 802192e:	d815      	bhi.n	802195c <system_execute_startup+0x44>
            if (!settings_read_startup_line(n, line))
 8021930:	4669      	mov	r1, sp
 8021932:	b2e0      	uxtb	r0, r4
 8021934:	f7fb fe58 	bl	801d5e8 <settings_read_startup_line>
 8021938:	2800      	cmp	r0, #0
 802193a:	d0f2      	beq.n	8021922 <system_execute_startup+0xa>
            else if (*line != '\0')
 802193c:	f89d 3000 	ldrb.w	r3, [sp]
 8021940:	2b00      	cmp	r3, #0
 8021942:	d0f2      	beq.n	802192a <system_execute_startup+0x12>
                report_execute_startup_message(line, gc_execute_block(line));
 8021944:	4668      	mov	r0, sp
 8021946:	f7eb ff99 	bl	800d87c <gc_execute_block>
 802194a:	4601      	mov	r1, r0
 802194c:	4668      	mov	r0, sp
 802194e:	f7f8 fc21 	bl	801a194 <report_execute_startup_message>
 8021952:	e7ea      	b.n	802192a <system_execute_startup+0x12>
{
 8021954:	b510      	push	{r4, lr}
 8021956:	b092      	sub	sp, #72	@ 0x48
        for (n = 0; n < N_STARTUP_LINE; n++) {
 8021958:	2400      	movs	r4, #0
 802195a:	e7e7      	b.n	802192c <system_execute_startup+0x14>
}
 802195c:	b012      	add	sp, #72	@ 0x48
 802195e:	bd10      	pop	{r4, pc}
 8021960:	20001a90 	.word	0x20001a90

08021964 <go_home>:
{
 8021964:	b510      	push	{r4, lr}
 8021966:	460c      	mov	r4, r1
    if(axes.mask && !settings.homing.flags.single_axis_commands)
 8021968:	b2cb      	uxtb	r3, r1
 802196a:	b12b      	cbz	r3, 8021978 <go_home+0x14>
 802196c:	4b39      	ldr	r3, [pc, #228]	@ (8021a54 <go_home+0xf0>)
 802196e:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8021972:	f013 0f02 	tst.w	r3, #2
 8021976:	d069      	beq.n	8021a4c <go_home+0xe8>
    if(!(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP))))
 8021978:	f7fd fae6 	bl	801ef48 <state_get>
 802197c:	bb40      	cbnz	r0, 80219d0 <go_home+0x6c>
    control_signals_t control_signals = hal.control.get_state();
 802197e:	4b36      	ldr	r3, [pc, #216]	@ (8021a58 <go_home+0xf4>)
 8021980:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8021982:	4798      	blx	r3
    if(sys.alarm == Alarm_SelftestFailed)
 8021984:	4b35      	ldr	r3, [pc, #212]	@ (8021a5c <go_home+0xf8>)
 8021986:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802198a:	2b10      	cmp	r3, #16
 802198c:	d02d      	beq.n	80219ea <go_home+0x86>
    else if (control_signals.e_stop)
 802198e:	b2c3      	uxtb	r3, r0
 8021990:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8021994:	d14d      	bne.n	8021a32 <go_home+0xce>
    else if(control_signals.motor_fault)
 8021996:	f410 7f80 	tst.w	r0, #256	@ 0x100
 802199a:	d14f      	bne.n	8021a3c <go_home+0xd8>
    else if (!(settings.homing.flags.enabled && (sys.homing.mask || settings.homing.flags.single_axis_commands || settings.homing.flags.manual)))
 802199c:	4a2d      	ldr	r2, [pc, #180]	@ (8021a54 <go_home+0xf0>)
 802199e:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 80219a2:	f012 0f01 	tst.w	r2, #1
 80219a6:	d04b      	beq.n	8021a40 <go_home+0xdc>
 80219a8:	492c      	ldr	r1, [pc, #176]	@ (8021a5c <go_home+0xf8>)
 80219aa:	7e89      	ldrb	r1, [r1, #26]
 80219ac:	b911      	cbnz	r1, 80219b4 <go_home+0x50>
 80219ae:	f012 0f12 	tst.w	r2, #18
 80219b2:	d047      	beq.n	8021a44 <go_home+0xe0>
    else if (control_signals.safety_door_ajar && !settings.safety_door.flags.ignore_when_idle)
 80219b4:	f013 0f08 	tst.w	r3, #8
 80219b8:	d005      	beq.n	80219c6 <go_home+0x62>
 80219ba:	4a26      	ldr	r2, [pc, #152]	@ (8021a54 <go_home+0xf0>)
 80219bc:	f892 213c 	ldrb.w	r2, [r2, #316]	@ 0x13c
 80219c0:	f012 0f01 	tst.w	r2, #1
 80219c4:	d040      	beq.n	8021a48 <go_home+0xe4>
    else if(control_signals.reset)
 80219c6:	f013 0f01 	tst.w	r3, #1
 80219ca:	d009      	beq.n	80219e0 <go_home+0x7c>
        retval = Status_Reset;
 80219cc:	2412      	movs	r4, #18
 80219ce:	e031      	b.n	8021a34 <go_home+0xd0>
    if(!(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP))))
 80219d0:	f7fd faba 	bl	801ef48 <state_get>
 80219d4:	f240 1301 	movw	r3, #257	@ 0x101
 80219d8:	4218      	tst	r0, r3
 80219da:	d1d0      	bne.n	802197e <go_home+0x1a>
        return Status_IdleError;
 80219dc:	2408      	movs	r4, #8
 80219de:	e02b      	b.n	8021a38 <go_home+0xd4>
        retval = mc_homing_cycle(axes); // Home axes according to configuration
 80219e0:	4620      	mov	r0, r4
 80219e2:	f7f3 f9d5 	bl	8014d90 <mc_homing_cycle>
 80219e6:	4604      	mov	r4, r0
 80219e8:	e000      	b.n	80219ec <go_home+0x88>
        retval = Status_SelfTestFailed;
 80219ea:	2431      	movs	r4, #49	@ 0x31
    if (retval == Status_OK && !sys.abort) {
 80219ec:	bb14      	cbnz	r4, 8021a34 <go_home+0xd0>
 80219ee:	4b1b      	ldr	r3, [pc, #108]	@ (8021a5c <go_home+0xf8>)
 80219f0:	781b      	ldrb	r3, [r3, #0]
 80219f2:	b9fb      	cbnz	r3, 8021a34 <go_home+0xd0>
        state_set(STATE_IDLE);  // Set to IDLE when complete.
 80219f4:	2000      	movs	r0, #0
 80219f6:	f7fd faad 	bl	801ef54 <state_set>
        st_go_idle();           // Set steppers to the settings idle state before returning.
 80219fa:	f7fd ffcf 	bl	801f99c <st_go_idle>
        grbl.report.feedback_message(Message_None);
 80219fe:	4b18      	ldr	r3, [pc, #96]	@ (8021a60 <go_home+0xfc>)
 8021a00:	68db      	ldr	r3, [r3, #12]
 8021a02:	2000      	movs	r0, #0
 8021a04:	4798      	blx	r3
        if (sys.homing.mask && (sys.homing.mask & sys.homed.mask) == sys.homing.mask)
 8021a06:	4b15      	ldr	r3, [pc, #84]	@ (8021a5c <go_home+0xf8>)
 8021a08:	7e9b      	ldrb	r3, [r3, #26]
 8021a0a:	b123      	cbz	r3, 8021a16 <go_home+0xb2>
 8021a0c:	4a13      	ldr	r2, [pc, #76]	@ (8021a5c <go_home+0xf8>)
 8021a0e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8021a12:	4393      	bics	r3, r2
 8021a14:	d00a      	beq.n	8021a2c <go_home+0xc8>
        else if(limits_homing_required()) { // Keep alarm state active if homing is required and not all axes homed.
 8021a16:	f7f2 f881 	bl	8013b1c <limits_homing_required>
 8021a1a:	b158      	cbz	r0, 8021a34 <go_home+0xd0>
            sys.alarm = Alarm_HomingRequired;
 8021a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8021a5c <go_home+0xf8>)
 8021a1e:	220b      	movs	r2, #11
 8021a20:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            state_set(STATE_ALARM);
 8021a24:	2001      	movs	r0, #1
 8021a26:	f7fd fa95 	bl	801ef54 <state_set>
 8021a2a:	e003      	b.n	8021a34 <go_home+0xd0>
            system_execute_startup();
 8021a2c:	f7ff ff74 	bl	8021918 <system_execute_startup>
 8021a30:	e000      	b.n	8021a34 <go_home+0xd0>
        retval = Status_EStop;
 8021a32:	2432      	movs	r4, #50	@ 0x32
    return retval == Status_Unhandled ? Status_OK : retval;
 8021a34:	2c54      	cmp	r4, #84	@ 0x54
 8021a36:	d00b      	beq.n	8021a50 <go_home+0xec>
}
 8021a38:	4620      	mov	r0, r4
 8021a3a:	bd10      	pop	{r4, pc}
        retval = Status_MotorFault;
 8021a3c:	2433      	movs	r4, #51	@ 0x33
 8021a3e:	e7f9      	b.n	8021a34 <go_home+0xd0>
        retval = Status_HomingDisabled;
 8021a40:	2405      	movs	r4, #5
 8021a42:	e7f7      	b.n	8021a34 <go_home+0xd0>
 8021a44:	2405      	movs	r4, #5
 8021a46:	e7f5      	b.n	8021a34 <go_home+0xd0>
        retval = Status_CheckDoor;
 8021a48:	240d      	movs	r4, #13
 8021a4a:	e7f3      	b.n	8021a34 <go_home+0xd0>
        return Status_HomingDisabled;
 8021a4c:	2405      	movs	r4, #5
 8021a4e:	e7f3      	b.n	8021a38 <go_home+0xd4>
    return retval == Status_Unhandled ? Status_OK : retval;
 8021a50:	2400      	movs	r4, #0
 8021a52:	e7f1      	b.n	8021a38 <go_home+0xd4>
 8021a54:	200024a8 	.word	0x200024a8
 8021a58:	20001a90 	.word	0x20001a90
 8021a5c:	20001d70 	.word	0x20001d70
 8021a60:	20001c78 	.word	0x20001c78

08021a64 <home_z>:
{
 8021a64:	b508      	push	{r3, lr}
    return go_home(state, (axes_signals_t){Z_AXIS_BIT});
 8021a66:	f04f 0104 	mov.w	r1, #4
 8021a6a:	f7ff ff7b 	bl	8021964 <go_home>
}
 8021a6e:	bd08      	pop	{r3, pc}

08021a70 <home_y>:
{
 8021a70:	b508      	push	{r3, lr}
    return go_home(state, (axes_signals_t){Y_AXIS_BIT});
 8021a72:	f04f 0102 	mov.w	r1, #2
 8021a76:	f7ff ff75 	bl	8021964 <go_home>
}
 8021a7a:	bd08      	pop	{r3, pc}

08021a7c <home_x>:
{
 8021a7c:	b508      	push	{r3, lr}
    return go_home(state, (axes_signals_t){X_AXIS_BIT});
 8021a7e:	f04f 0101 	mov.w	r1, #1
 8021a82:	f7ff ff6f 	bl	8021964 <go_home>
}
 8021a86:	bd08      	pop	{r3, pc}

08021a88 <home>:
{
 8021a88:	b508      	push	{r3, lr}
    return go_home(state, (axes_signals_t){0});
 8021a8a:	f04f 0100 	mov.w	r1, #0
 8021a8e:	f7ff ff69 	bl	8021964 <go_home>
}
 8021a92:	bd08      	pop	{r3, pc}

08021a94 <_system_output_help>:
    commands->next = commands_root;
    commands_root = commands;
}

void _system_output_help (sys_commands_t *commands, bool traverse)
{
 8021a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021a98:	4606      	mov	r6, r0
 8021a9a:	4688      	mov	r8, r1
    const char *help;
    uint_fast8_t idx;

    while(commands) {
 8021a9c:	e039      	b.n	8021b12 <_system_output_help+0x7e>
                    if(*help != '$') {
                        hal.stream.write_char('$');
                        hal.stream.write(commands->commands[idx].command);
                        hal.stream.write(" - ");
                    }
                    hal.stream.write(help);
 8021a9e:	4f1f      	ldr	r7, [pc, #124]	@ (8021b1c <_system_output_help+0x88>)
 8021aa0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8021aa4:	4628      	mov	r0, r5
 8021aa6:	4798      	blx	r3
                    hal.stream.write("." ASCII_EOL);
 8021aa8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8021aac:	481c      	ldr	r0, [pc, #112]	@ (8021b20 <_system_output_help+0x8c>)
 8021aae:	4798      	blx	r3
        for(idx = 0; idx < commands->n_commands; idx++) {
 8021ab0:	3401      	adds	r4, #1
 8021ab2:	7833      	ldrb	r3, [r6, #0]
 8021ab4:	42a3      	cmp	r3, r4
 8021ab6:	d922      	bls.n	8021afe <_system_output_help+0x6a>
            if(commands->commands[idx].help.str) {
 8021ab8:	6872      	ldr	r2, [r6, #4]
 8021aba:	0127      	lsls	r7, r4, #4
 8021abc:	eb02 1304 	add.w	r3, r2, r4, lsl #4
 8021ac0:	68dd      	ldr	r5, [r3, #12]
 8021ac2:	2d00      	cmp	r5, #0
 8021ac4:	d0f4      	beq.n	8021ab0 <_system_output_help+0x1c>
                if(commands->commands[idx].flags.help_fn)
 8021ac6:	7a1b      	ldrb	r3, [r3, #8]
 8021ac8:	f013 0f04 	tst.w	r3, #4
 8021acc:	d002      	beq.n	8021ad4 <_system_output_help+0x40>
                    help = commands->commands[idx].help.fn(commands->commands[idx].command);
 8021ace:	59d0      	ldr	r0, [r2, r7]
 8021ad0:	47a8      	blx	r5
 8021ad2:	4605      	mov	r5, r0
                if(help) {
 8021ad4:	2d00      	cmp	r5, #0
 8021ad6:	d0eb      	beq.n	8021ab0 <_system_output_help+0x1c>
                    if(*help != '$') {
 8021ad8:	782b      	ldrb	r3, [r5, #0]
 8021ada:	2b24      	cmp	r3, #36	@ 0x24
 8021adc:	d0df      	beq.n	8021a9e <_system_output_help+0xa>
                        hal.stream.write_char('$');
 8021ade:	f8df 903c 	ldr.w	r9, [pc, #60]	@ 8021b1c <_system_output_help+0x88>
 8021ae2:	f8d9 30bc 	ldr.w	r3, [r9, #188]	@ 0xbc
 8021ae6:	2024      	movs	r0, #36	@ 0x24
 8021ae8:	4798      	blx	r3
                        hal.stream.write(commands->commands[idx].command);
 8021aea:	f8d9 30b4 	ldr.w	r3, [r9, #180]	@ 0xb4
 8021aee:	6872      	ldr	r2, [r6, #4]
 8021af0:	59d0      	ldr	r0, [r2, r7]
 8021af2:	4798      	blx	r3
                        hal.stream.write(" - ");
 8021af4:	f8d9 30b4 	ldr.w	r3, [r9, #180]	@ 0xb4
 8021af8:	480a      	ldr	r0, [pc, #40]	@ (8021b24 <_system_output_help+0x90>)
 8021afa:	4798      	blx	r3
 8021afc:	e7cf      	b.n	8021a9e <_system_output_help+0xa>
                }
            }
        }
        commands = traverse && commands->next != &core_commands ? commands->next : NULL;
 8021afe:	f1b8 0f00 	cmp.w	r8, #0
 8021b02:	d005      	beq.n	8021b10 <_system_output_help+0x7c>
 8021b04:	68b6      	ldr	r6, [r6, #8]
 8021b06:	4b08      	ldr	r3, [pc, #32]	@ (8021b28 <_system_output_help+0x94>)
 8021b08:	429e      	cmp	r6, r3
 8021b0a:	d102      	bne.n	8021b12 <_system_output_help+0x7e>
 8021b0c:	2600      	movs	r6, #0
 8021b0e:	e000      	b.n	8021b12 <_system_output_help+0x7e>
 8021b10:	2600      	movs	r6, #0
    while(commands) {
 8021b12:	b10e      	cbz	r6, 8021b18 <_system_output_help+0x84>
        for(idx = 0; idx < commands->n_commands; idx++) {
 8021b14:	2400      	movs	r4, #0
 8021b16:	e7cc      	b.n	8021ab2 <_system_output_help+0x1e>
    }
}
 8021b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021b1c:	20001a90 	.word	0x20001a90
 8021b20:	08030d90 	.word	0x08030d90
 8021b24:	0802bff4 	.word	0x0802bff4
 8021b28:	200004a4 	.word	0x200004a4

08021b2c <system_command_help>:

    _system_output_help(&cmd, false);
}

void system_command_help (void)
{
 8021b2c:	b510      	push	{r4, lr}
    _system_output_help(&core_commands, false);
 8021b2e:	4c06      	ldr	r4, [pc, #24]	@ (8021b48 <system_command_help+0x1c>)
 8021b30:	2100      	movs	r1, #0
 8021b32:	4620      	mov	r0, r4
 8021b34:	f7ff ffae 	bl	8021a94 <_system_output_help>
    if(commands_root != &core_commands)
 8021b38:	4b04      	ldr	r3, [pc, #16]	@ (8021b4c <system_command_help+0x20>)
 8021b3a:	6818      	ldr	r0, [r3, #0]
 8021b3c:	42a0      	cmp	r0, r4
 8021b3e:	d002      	beq.n	8021b46 <system_command_help+0x1a>
        _system_output_help(commands_root, true);
 8021b40:	2101      	movs	r1, #1
 8021b42:	f7ff ffa7 	bl	8021a94 <_system_output_help>
}
 8021b46:	bd10      	pop	{r4, pc}
 8021b48:	200004a4 	.word	0x200004a4
 8021b4c:	200004a0 	.word	0x200004a0

08021b50 <system_execute_line>:

\param line pointer to the command string.
\returns \a status_code_t enum value; #Status_OK if successfully handled, another relevant status code if not.
*/
status_code_t system_execute_line (char *line)
{
 8021b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021b54:	b082      	sub	sp, #8
    if(line[1] == '\0') {
 8021b56:	7847      	ldrb	r7, [r0, #1]
 8021b58:	b12f      	cbz	r7, 8021b66 <system_execute_line+0x16>
 8021b5a:	4604      	mov	r4, r0

    status_code_t retval = Status_Unhandled;

    char c, *s1, *s2;

    s1 = s2 = ++line;
 8021b5c:	f100 0801 	add.w	r8, r0, #1
 8021b60:	4643      	mov	r3, r8
 8021b62:	4642      	mov	r2, r8

    c = *s1;
    while(c && c != '=') {
 8021b64:	e007      	b.n	8021b76 <system_execute_line+0x26>
        grbl.report.help_message();
 8021b66:	4b81      	ldr	r3, [pc, #516]	@ (8021d6c <system_execute_line+0x21c>)
 8021b68:	685b      	ldr	r3, [r3, #4]
 8021b6a:	4798      	blx	r3
        return Status_OK;
 8021b6c:	e060      	b.n	8021c30 <system_execute_line+0xe0>
        if(c != ' ')
            *s2++ = CAPS(c);
 8021b6e:	f803 7b01 	strb.w	r7, [r3], #1
        c = *++s1;
 8021b72:	f812 7f01 	ldrb.w	r7, [r2, #1]!
    while(c && c != '=') {
 8021b76:	b16f      	cbz	r7, 8021b94 <system_execute_line+0x44>
 8021b78:	2f3d      	cmp	r7, #61	@ 0x3d
 8021b7a:	d00b      	beq.n	8021b94 <system_execute_line+0x44>
        if(c != ' ')
 8021b7c:	2f20      	cmp	r7, #32
 8021b7e:	d0f8      	beq.n	8021b72 <system_execute_line+0x22>
            *s2++ = CAPS(c);
 8021b80:	f1a7 0161 	sub.w	r1, r7, #97	@ 0x61
 8021b84:	b2c9      	uxtb	r1, r1
 8021b86:	2919      	cmp	r1, #25
 8021b88:	d8f1      	bhi.n	8021b6e <system_execute_line+0x1e>
 8021b8a:	f007 075f 	and.w	r7, r7, #95	@ 0x5f
 8021b8e:	e7ee      	b.n	8021b6e <system_execute_line+0x1e>
    }

    while((c = *s1++))
        *s2++ = c;
 8021b90:	f803 1b01 	strb.w	r1, [r3], #1
    while((c = *s1++))
 8021b94:	f812 1b01 	ldrb.w	r1, [r2], #1
 8021b98:	2900      	cmp	r1, #0
 8021b9a:	d1f9      	bne.n	8021b90 <system_execute_line+0x40>

    *s2 = '\0';
 8021b9c:	2200      	movs	r2, #0
 8021b9e:	701a      	strb	r2, [r3, #0]

    if(!strncmp(line, "HELP", 4))
 8021ba0:	2204      	movs	r2, #4
 8021ba2:	4973      	ldr	r1, [pc, #460]	@ (8021d70 <system_execute_line+0x220>)
 8021ba4:	4640      	mov	r0, r8
 8021ba6:	f003 f8e6 	bl	8024d76 <strncmp>
 8021baa:	b160      	cbz	r0, 8021bc6 <system_execute_line+0x76>
        return report_help(&line[4]);

    char *args = strchr(line, '=');
 8021bac:	213d      	movs	r1, #61	@ 0x3d
 8021bae:	4640      	mov	r0, r8
 8021bb0:	f003 f8d4 	bl	8024d5c <strchr>

    if(args)
 8021bb4:	4681      	mov	r9, r0
 8021bb6:	b110      	cbz	r0, 8021bbe <system_execute_line+0x6e>
        *args++ = '\0';
 8021bb8:	2300      	movs	r3, #0
 8021bba:	f809 3b01 	strb.w	r3, [r9], #1

    uint_fast8_t idx;
    sys_commands_t *cmd = commands_root;
 8021bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8021d74 <system_execute_line+0x224>)
 8021bc0:	681d      	ldr	r5, [r3, #0]
    status_code_t retval = Status_Unhandled;
 8021bc2:	2754      	movs	r7, #84	@ 0x54
 8021bc4:	e02e      	b.n	8021c24 <system_execute_line+0xd4>
        return report_help(&line[4]);
 8021bc6:	1d60      	adds	r0, r4, #5
 8021bc8:	f7f9 fe08 	bl	801b7dc <report_help>
 8021bcc:	4607      	mov	r7, r0
 8021bce:	e02f      	b.n	8021c30 <system_execute_line+0xe0>
            if(!strcmp(line, cmd->commands[idx].command)) {
                if(sys.blocking_event && !cmd->commands[idx].flags.allow_blocking) {
                    retval = Status_NotAllowedCriticalEvent;
                    break;
                } else if(!cmd->commands[idx].flags.noargs || args == NULL) {
                    if((retval = cmd->commands[idx].execute(state_get(), args)) != Status_Unhandled)
 8021bd0:	6876      	ldr	r6, [r6, #4]
 8021bd2:	f7fd f9b9 	bl	801ef48 <state_get>
 8021bd6:	4649      	mov	r1, r9
 8021bd8:	47b0      	blx	r6
 8021bda:	4607      	mov	r7, r0
 8021bdc:	2854      	cmp	r0, #84	@ 0x54
 8021bde:	d11d      	bne.n	8021c1c <system_execute_line+0xcc>
        for(idx = 0; idx < cmd->n_commands; idx++) {
 8021be0:	3401      	adds	r4, #1
 8021be2:	782b      	ldrb	r3, [r5, #0]
 8021be4:	42a3      	cmp	r3, r4
 8021be6:	d919      	bls.n	8021c1c <system_execute_line+0xcc>
            if(!strcmp(line, cmd->commands[idx].command)) {
 8021be8:	686a      	ldr	r2, [r5, #4]
 8021bea:	0123      	lsls	r3, r4, #4
 8021bec:	eb02 1604 	add.w	r6, r2, r4, lsl #4
 8021bf0:	58d1      	ldr	r1, [r2, r3]
 8021bf2:	4640      	mov	r0, r8
 8021bf4:	f7e6 fa24 	bl	8008040 <strcmp>
 8021bf8:	2800      	cmp	r0, #0
 8021bfa:	d1f1      	bne.n	8021be0 <system_execute_line+0x90>
                if(sys.blocking_event && !cmd->commands[idx].flags.allow_blocking) {
 8021bfc:	4b5e      	ldr	r3, [pc, #376]	@ (8021d78 <system_execute_line+0x228>)
 8021bfe:	795b      	ldrb	r3, [r3, #5]
 8021c00:	b11b      	cbz	r3, 8021c0a <system_execute_line+0xba>
 8021c02:	7a33      	ldrb	r3, [r6, #8]
 8021c04:	f013 0f02 	tst.w	r3, #2
 8021c08:	d007      	beq.n	8021c1a <system_execute_line+0xca>
                } else if(!cmd->commands[idx].flags.noargs || args == NULL) {
 8021c0a:	7a33      	ldrb	r3, [r6, #8]
 8021c0c:	f013 0f01 	tst.w	r3, #1
 8021c10:	d0de      	beq.n	8021bd0 <system_execute_line+0x80>
 8021c12:	f1b9 0f00 	cmp.w	r9, #0
 8021c16:	d1e3      	bne.n	8021be0 <system_execute_line+0x90>
 8021c18:	e7da      	b.n	8021bd0 <system_execute_line+0x80>
                    retval = Status_NotAllowedCriticalEvent;
 8021c1a:	274f      	movs	r7, #79	@ 0x4f
                        break;
                }
            }
        }
        cmd = retval == Status_Unhandled ? cmd->next : NULL;
 8021c1c:	2f54      	cmp	r7, #84	@ 0x54
 8021c1e:	d103      	bne.n	8021c28 <system_execute_line+0xd8>
 8021c20:	68ad      	ldr	r5, [r5, #8]
    } while(cmd);
 8021c22:	b11d      	cbz	r5, 8021c2c <system_execute_line+0xdc>
        for(idx = 0; idx < cmd->n_commands; idx++) {
 8021c24:	2400      	movs	r4, #0
 8021c26:	e7dc      	b.n	8021be2 <system_execute_line+0x92>
        cmd = retval == Status_Unhandled ? cmd->next : NULL;
 8021c28:	2500      	movs	r5, #0
 8021c2a:	e7fa      	b.n	8021c22 <system_execute_line+0xd2>

    // deprecated, to be removed
    if(retval == Status_Unhandled && (cmd = grbl.on_get_commands ? grbl.on_get_commands() : NULL)) {
 8021c2c:	2f54      	cmp	r7, #84	@ 0x54
 8021c2e:	d003      	beq.n	8021c38 <system_execute_line+0xe8>
        } else
            retval = Status_IdleError;
    }

    return retval;
}
 8021c30:	4638      	mov	r0, r7
 8021c32:	b002      	add	sp, #8
 8021c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(retval == Status_Unhandled && (cmd = grbl.on_get_commands ? grbl.on_get_commands() : NULL)) {
 8021c38:	4b4c      	ldr	r3, [pc, #304]	@ (8021d6c <system_execute_line+0x21c>)
 8021c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8021c3e:	b11b      	cbz	r3, 8021c48 <system_execute_line+0xf8>
 8021c40:	4798      	blx	r3
 8021c42:	4606      	mov	r6, r0
 8021c44:	2800      	cmp	r0, #0
 8021c46:	d162      	bne.n	8021d0e <system_execute_line+0x1be>
    if(retval == Status_Unhandled && grbl.on_unknown_sys_command) {
 8021c48:	2f54      	cmp	r7, #84	@ 0x54
 8021c4a:	d1f1      	bne.n	8021c30 <system_execute_line+0xe0>
 8021c4c:	4b47      	ldr	r3, [pc, #284]	@ (8021d6c <system_execute_line+0x21c>)
 8021c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021c52:	b1ab      	cbz	r3, 8021c80 <system_execute_line+0x130>
        if(args)
 8021c54:	f1b9 0f00 	cmp.w	r9, #0
 8021c58:	d05f      	beq.n	8021d1a <system_execute_line+0x1ca>
            *(--args) = '=';
 8021c5a:	f109 34ff 	add.w	r4, r9, #4294967295
 8021c5e:	233d      	movs	r3, #61	@ 0x3d
 8021c60:	f809 3c01 	strb.w	r3, [r9, #-1]
        retval = grbl.on_unknown_sys_command(state_get(), line);
 8021c64:	4b41      	ldr	r3, [pc, #260]	@ (8021d6c <system_execute_line+0x21c>)
 8021c66:	f8d3 5084 	ldr.w	r5, [r3, #132]	@ 0x84
 8021c6a:	f7fd f96d 	bl	801ef48 <state_get>
 8021c6e:	4641      	mov	r1, r8
 8021c70:	47a8      	blx	r5
 8021c72:	4607      	mov	r7, r0
        if(args)
 8021c74:	2c00      	cmp	r4, #0
 8021c76:	d052      	beq.n	8021d1e <system_execute_line+0x1ce>
            *args++ = '\0';
 8021c78:	46a1      	mov	r9, r4
 8021c7a:	2300      	movs	r3, #0
 8021c7c:	f809 3b01 	strb.w	r3, [r9], #1
    if (retval == Status_Unhandled) {
 8021c80:	2f54      	cmp	r7, #84	@ 0x54
 8021c82:	d1d5      	bne.n	8021c30 <system_execute_line+0xe0>
        if(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))) {
 8021c84:	f7fd f960 	bl	801ef48 <state_get>
 8021c88:	b128      	cbz	r0, 8021c96 <system_execute_line+0x146>
 8021c8a:	f7fd f95d 	bl	801ef48 <state_get>
 8021c8e:	f240 1303 	movw	r3, #259	@ 0x103
 8021c92:	4218      	tst	r0, r3
 8021c94:	d067      	beq.n	8021d66 <system_execute_line+0x216>
            uint_fast8_t counter = 0;
 8021c96:	2300      	movs	r3, #0
 8021c98:	9300      	str	r3, [sp, #0]
            if(!read_float(line, &counter, &parameter))
 8021c9a:	aa01      	add	r2, sp, #4
 8021c9c:	4669      	mov	r1, sp
 8021c9e:	4640      	mov	r0, r8
 8021ca0:	f7f3 ff90 	bl	8015bc4 <read_float>
 8021ca4:	2800      	cmp	r0, #0
 8021ca6:	d13c      	bne.n	8021d22 <system_execute_line+0x1d2>
                retval = Status_BadNumberFormat;
 8021ca8:	2702      	movs	r7, #2
 8021caa:	e7c1      	b.n	8021c30 <system_execute_line+0xe0>
                        if((retval = cmd->commands[idx].execute(state_get(), args)) != Status_Unhandled)
 8021cac:	f8da 7004 	ldr.w	r7, [sl, #4]
 8021cb0:	f7fd f94a 	bl	801ef48 <state_get>
 8021cb4:	4649      	mov	r1, r9
 8021cb6:	47b8      	blx	r7
 8021cb8:	4607      	mov	r7, r0
 8021cba:	2854      	cmp	r0, #84	@ 0x54
 8021cbc:	d11f      	bne.n	8021cfe <system_execute_line+0x1ae>
            for(idx = 0; idx < cmd->n_commands; idx++) {
 8021cbe:	3401      	adds	r4, #1
 8021cc0:	7833      	ldrb	r3, [r6, #0]
 8021cc2:	42a3      	cmp	r3, r4
 8021cc4:	d91b      	bls.n	8021cfe <system_execute_line+0x1ae>
                if(!strcmp(line, cmd->commands[idx].command)) {
 8021cc6:	6872      	ldr	r2, [r6, #4]
 8021cc8:	0123      	lsls	r3, r4, #4
 8021cca:	eb02 1a04 	add.w	sl, r2, r4, lsl #4
 8021cce:	58d1      	ldr	r1, [r2, r3]
 8021cd0:	4640      	mov	r0, r8
 8021cd2:	f7e6 f9b5 	bl	8008040 <strcmp>
 8021cd6:	2800      	cmp	r0, #0
 8021cd8:	d1f1      	bne.n	8021cbe <system_execute_line+0x16e>
                    if(sys.blocking_event && !cmd->commands[idx].flags.allow_blocking) {
 8021cda:	4b27      	ldr	r3, [pc, #156]	@ (8021d78 <system_execute_line+0x228>)
 8021cdc:	795b      	ldrb	r3, [r3, #5]
 8021cde:	b123      	cbz	r3, 8021cea <system_execute_line+0x19a>
 8021ce0:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8021ce4:	f013 0f02 	tst.w	r3, #2
 8021ce8:	d008      	beq.n	8021cfc <system_execute_line+0x1ac>
                    } else if(!cmd->commands[idx].flags.noargs || args == NULL) {
 8021cea:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8021cee:	f013 0f01 	tst.w	r3, #1
 8021cf2:	d0db      	beq.n	8021cac <system_execute_line+0x15c>
 8021cf4:	f1b9 0f00 	cmp.w	r9, #0
 8021cf8:	d1e1      	bne.n	8021cbe <system_execute_line+0x16e>
 8021cfa:	e7d7      	b.n	8021cac <system_execute_line+0x15c>
                        retval = Status_NotAllowedCriticalEvent;
 8021cfc:	274f      	movs	r7, #79	@ 0x4f
            cmd = retval == Status_Unhandled && cmd->on_get_commands ? cmd->on_get_commands() : NULL;
 8021cfe:	2f54      	cmp	r7, #84	@ 0x54
 8021d00:	d107      	bne.n	8021d12 <system_execute_line+0x1c2>
 8021d02:	68f3      	ldr	r3, [r6, #12]
 8021d04:	b13b      	cbz	r3, 8021d16 <system_execute_line+0x1c6>
 8021d06:	4798      	blx	r3
 8021d08:	4606      	mov	r6, r0
        } while(cmd);
 8021d0a:	2e00      	cmp	r6, #0
 8021d0c:	d09c      	beq.n	8021c48 <system_execute_line+0xf8>
            for(idx = 0; idx < cmd->n_commands; idx++) {
 8021d0e:	2400      	movs	r4, #0
 8021d10:	e7d6      	b.n	8021cc0 <system_execute_line+0x170>
            cmd = retval == Status_Unhandled && cmd->on_get_commands ? cmd->on_get_commands() : NULL;
 8021d12:	462e      	mov	r6, r5
 8021d14:	e7f9      	b.n	8021d0a <system_execute_line+0x1ba>
 8021d16:	462e      	mov	r6, r5
 8021d18:	e7f7      	b.n	8021d0a <system_execute_line+0x1ba>
 8021d1a:	464c      	mov	r4, r9
 8021d1c:	e7a2      	b.n	8021c64 <system_execute_line+0x114>
 8021d1e:	46a1      	mov	r9, r4
 8021d20:	e7ae      	b.n	8021c80 <system_execute_line+0x130>
            else if(!isintf(parameter))
 8021d22:	ed9d 0a01 	vldr	s0, [sp, #4]
 8021d26:	f7f3 ffc3 	bl	8015cb0 <isintf>
 8021d2a:	b1d0      	cbz	r0, 8021d62 <system_execute_line+0x212>
            else if(args)
 8021d2c:	f1b9 0f00 	cmp.w	r9, #0
 8021d30:	d00b      	beq.n	8021d4a <system_execute_line+0x1fa>
                retval = settings_store_setting((setting_id_t)parameter, args);
 8021d32:	eddd 7a01 	vldr	s15, [sp, #4]
 8021d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021d3a:	4649      	mov	r1, r9
 8021d3c:	ee17 3a90 	vmov	r3, s15
 8021d40:	b298      	uxth	r0, r3
 8021d42:	f7fb ff95 	bl	801dc70 <settings_store_setting>
 8021d46:	4607      	mov	r7, r0
 8021d48:	e772      	b.n	8021c30 <system_execute_line+0xe0>
                retval = report_grbl_setting((setting_id_t)parameter, NULL);
 8021d4a:	eddd 7a01 	vldr	s15, [sp, #4]
 8021d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021d52:	2100      	movs	r1, #0
 8021d54:	ee17 3a90 	vmov	r3, s15
 8021d58:	b298      	uxth	r0, r3
 8021d5a:	f7f7 fd4d 	bl	80197f8 <report_grbl_setting>
 8021d5e:	4607      	mov	r7, r0
 8021d60:	e766      	b.n	8021c30 <system_execute_line+0xe0>
                retval = Status_InvalidStatement;
 8021d62:	2703      	movs	r7, #3
        if(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))) {
 8021d64:	e764      	b.n	8021c30 <system_execute_line+0xe0>
            retval = Status_IdleError;
 8021d66:	2708      	movs	r7, #8
 8021d68:	e762      	b.n	8021c30 <system_execute_line+0xe0>
 8021d6a:	bf00      	nop
 8021d6c:	20001c78 	.word	0x20001c78
 8021d70:	08030dfc 	.word	0x08030dfc
 8021d74:	200004a0 	.word	0x200004a0
 8021d78:	20001d70 	.word	0x20001d70

08021d7c <system_convert_array_steps_to_mpos>:
          this function serves as a central place to compute the transformation.
\param position pointer to the target float array for the machine position.
\param steps pointer to the source step count array to transform.
 */
void system_convert_array_steps_to_mpos (float *position, int32_t *steps)
{
 8021d7c:	b410      	push	{r4}
#ifdef KINEMATICS_API
    kinematics.transform_steps_to_cartesian(position, steps);
#else
    uint_fast8_t idx = N_AXIS;
 8021d7e:	2303      	movs	r3, #3
    do {
        idx--;
 8021d80:	3b01      	subs	r3, #1
        position[idx] = steps[idx] / settings.axis[idx].steps_per_mm;
 8021d82:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8021d86:	4a0b      	ldr	r2, [pc, #44]	@ (8021db4 <system_convert_array_steps_to_mpos+0x38>)
 8021d88:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8021d8c:	edd2 6a0c 	vldr	s13, [r2, #48]	@ 0x30
 8021d90:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8021d94:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8021d98:	ee07 4a90 	vmov	s15, r4
 8021d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021da0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8021da4:	ed82 7a00 	vstr	s14, [r2]
    } while(idx);
 8021da8:	2b00      	cmp	r3, #0
 8021daa:	d1e9      	bne.n	8021d80 <system_convert_array_steps_to_mpos+0x4>
#endif
}
 8021dac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021db0:	4770      	bx	lr
 8021db2:	bf00      	nop
 8021db4:	200024a8 	.word	0x200024a8

08021db8 <system_xy_at_fixture>:
{
    bool ok = false;

    coord_data_t target, position;

    if(tolerance > 0.0f && settings_read_coord_data(id, &target.values)) {
 8021db8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021dc0:	dc01      	bgt.n	8021dc6 <system_xy_at_fixture+0xe>
    bool ok = false;
 8021dc2:	2000      	movs	r0, #0
        system_convert_array_steps_to_mpos(position.values, sys.position);
        ok = hypot_f(position.x - target.x, position.y - target.y) <= tolerance;
    }

    return ok;
}
 8021dc4:	4770      	bx	lr
{
 8021dc6:	b500      	push	{lr}
 8021dc8:	ed2d 8b02 	vpush	{d8}
 8021dcc:	b087      	sub	sp, #28
 8021dce:	eeb0 8a40 	vmov.f32	s16, s0
    if(tolerance > 0.0f && settings_read_coord_data(id, &target.values)) {
 8021dd2:	a903      	add	r1, sp, #12
 8021dd4:	f7fb fc5e 	bl	801d694 <settings_read_coord_data>
 8021dd8:	b920      	cbnz	r0, 8021de4 <system_xy_at_fixture+0x2c>
}
 8021dda:	b007      	add	sp, #28
 8021ddc:	ecbd 8b02 	vpop	{d8}
 8021de0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_convert_array_steps_to_mpos(position.values, sys.position);
 8021de4:	490f      	ldr	r1, [pc, #60]	@ (8021e24 <system_xy_at_fixture+0x6c>)
 8021de6:	4668      	mov	r0, sp
 8021de8:	f7ff ffc8 	bl	8021d7c <system_convert_array_steps_to_mpos>
        ok = hypot_f(position.x - target.x, position.y - target.y) <= tolerance;
 8021dec:	ed9d 0a00 	vldr	s0, [sp]
 8021df0:	eddd 7a03 	vldr	s15, [sp, #12]
 8021df4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8021df8:	eddd 7a01 	vldr	s15, [sp, #4]
 8021dfc:	ed9d 7a04 	vldr	s14, [sp, #16]
 8021e00:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return sqrtf(x * x + y * y);
 8021e04:	ee20 0a00 	vmul.f32	s0, s0, s0
 8021e08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8021e0c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021e10:	f005 fcee 	bl	80277f0 <sqrtf>
        ok = hypot_f(position.x - target.x, position.y - target.y) <= tolerance;
 8021e14:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8021e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e1c:	bfac      	ite	ge
 8021e1e:	2001      	movge	r0, #1
 8021e20:	2000      	movlt	r0, #0
 8021e22:	e7da      	b.n	8021dda <system_xy_at_fixture+0x22>
 8021e24:	20001df8 	.word	0x20001df8

08021e28 <system_raise_alarm>:

/*! \brief Raise and report a system alarm.
\param a #alarm_code_t enum representing the alarm code.
 */
void system_raise_alarm (alarm_code_t alarm)
{
 8021e28:	b510      	push	{r4, lr}
 8021e2a:	4604      	mov	r4, r0
    if(state_get() == STATE_HOMING && !(sys.rt_exec_state & EXEC_RESET))
 8021e2c:	f7fd f88c 	bl	801ef48 <state_get>
 8021e30:	2804      	cmp	r0, #4
 8021e32:	d011      	beq.n	8021e58 <system_raise_alarm+0x30>
        system_set_exec_alarm(alarm);
    else if(sys.alarm != alarm) {
 8021e34:	4b1c      	ldr	r3, [pc, #112]	@ (8021ea8 <system_raise_alarm+0x80>)
 8021e36:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8021e3a:	42a3      	cmp	r3, r4
 8021e3c:	d02e      	beq.n	8021e9c <system_raise_alarm+0x74>
        sys.alarm = alarm;
 8021e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8021ea8 <system_raise_alarm+0x80>)
 8021e40:	f883 407c 	strb.w	r4, [r3, #124]	@ 0x7c
        sys.blocking_event = sys.alarm == Alarm_HardLimit ||
 8021e44:	1e63      	subs	r3, r4, #1
 8021e46:	b2db      	uxtb	r3, r3
                              sys.alarm == Alarm_SoftLimit ||
                               sys.alarm == Alarm_EStop ||
 8021e48:	2b01      	cmp	r3, #1
 8021e4a:	d912      	bls.n	8021e72 <system_raise_alarm+0x4a>
                              sys.alarm == Alarm_SoftLimit ||
 8021e4c:	2c0a      	cmp	r4, #10
 8021e4e:	d026      	beq.n	8021e9e <system_raise_alarm+0x76>
                               sys.alarm == Alarm_EStop ||
 8021e50:	2c11      	cmp	r4, #17
 8021e52:	d00c      	beq.n	8021e6e <system_raise_alarm+0x46>
 8021e54:	2200      	movs	r2, #0
 8021e56:	e00d      	b.n	8021e74 <system_raise_alarm+0x4c>
    if(state_get() == STATE_HOMING && !(sys.rt_exec_state & EXEC_RESET))
 8021e58:	4b13      	ldr	r3, [pc, #76]	@ (8021ea8 <system_raise_alarm+0x80>)
 8021e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8021e5c:	f013 0f20 	tst.w	r3, #32
 8021e60:	d1e8      	bne.n	8021e34 <system_raise_alarm+0xc>
        system_set_exec_alarm(alarm);
 8021e62:	4b12      	ldr	r3, [pc, #72]	@ (8021eac <system_raise_alarm+0x84>)
 8021e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021e66:	4621      	mov	r1, r4
 8021e68:	4811      	ldr	r0, [pc, #68]	@ (8021eb0 <system_raise_alarm+0x88>)
 8021e6a:	4798      	blx	r3
 8021e6c:	e016      	b.n	8021e9c <system_raise_alarm+0x74>
                               sys.alarm == Alarm_EStop ||
 8021e6e:	2201      	movs	r2, #1
 8021e70:	e000      	b.n	8021e74 <system_raise_alarm+0x4c>
 8021e72:	2201      	movs	r2, #1
        sys.blocking_event = sys.alarm == Alarm_HardLimit ||
 8021e74:	4b0c      	ldr	r3, [pc, #48]	@ (8021ea8 <system_raise_alarm+0x80>)
 8021e76:	715a      	strb	r2, [r3, #5]
                                sys.alarm == Alarm_MotorFault;
        state_set(alarm == Alarm_EStop ? STATE_ESTOP : STATE_ALARM);
 8021e78:	2c0a      	cmp	r4, #10
 8021e7a:	d012      	beq.n	8021ea2 <system_raise_alarm+0x7a>
 8021e7c:	2001      	movs	r0, #1
 8021e7e:	f7fd f869 	bl	801ef54 <state_set>
        if(sys.driver_started || sys.alarm == Alarm_SelftestFailed)
 8021e82:	4b09      	ldr	r3, [pc, #36]	@ (8021ea8 <system_raise_alarm+0x80>)
 8021e84:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8021e88:	b923      	cbnz	r3, 8021e94 <system_raise_alarm+0x6c>
 8021e8a:	4b07      	ldr	r3, [pc, #28]	@ (8021ea8 <system_raise_alarm+0x80>)
 8021e8c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8021e90:	2b10      	cmp	r3, #16
 8021e92:	d103      	bne.n	8021e9c <system_raise_alarm+0x74>
            grbl.report.alarm_message(alarm);
 8021e94:	4b07      	ldr	r3, [pc, #28]	@ (8021eb4 <system_raise_alarm+0x8c>)
 8021e96:	691b      	ldr	r3, [r3, #16]
 8021e98:	4620      	mov	r0, r4
 8021e9a:	4798      	blx	r3
    }
}
 8021e9c:	bd10      	pop	{r4, pc}
                               sys.alarm == Alarm_EStop ||
 8021e9e:	2201      	movs	r2, #1
 8021ea0:	e7e8      	b.n	8021e74 <system_raise_alarm+0x4c>
        state_set(alarm == Alarm_EStop ? STATE_ESTOP : STATE_ALARM);
 8021ea2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8021ea6:	e7ea      	b.n	8021e7e <system_raise_alarm+0x56>
 8021ea8:	20001d70 	.word	0x20001d70
 8021eac:	20001a90 	.word	0x20001a90
 8021eb0:	20001dbc 	.word	0x20001dbc
 8021eb4:	20001c78 	.word	0x20001c78

08021eb8 <system_get_rt_report_flags>:
\return a #report_tracking_flags_t union containing the flags.
 */
report_tracking_flags_t system_get_rt_report_flags (void)
{
    return sys.report;
}
 8021eb8:	4b01      	ldr	r3, [pc, #4]	@ (8021ec0 <system_get_rt_report_flags+0x8>)
 8021eba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8021ebc:	4770      	bx	lr
 8021ebe:	bf00      	nop
 8021ec0:	20001d70 	.word	0x20001d70

08021ec4 <system_add_rt_report>:

Fires the \ref grbl.on_rt_reports_added event.
\param report a #report_tracking_t enum containing the flag(s) to set or clear.
 */
void system_add_rt_report (report_tracking_t report)
{
 8021ec4:	b508      	push	{r3, lr}
    switch(report) {
 8021ec6:	2801      	cmp	r0, #1
 8021ec8:	d010      	beq.n	8021eec <system_add_rt_report+0x28>
 8021eca:	2808      	cmp	r0, #8
 8021ecc:	d014      	beq.n	8021ef8 <system_add_rt_report+0x34>
 8021ece:	b148      	cbz	r0, 8021ee4 <system_add_rt_report+0x20>

        default:
            break;
    }

    sys.report.value |= (uint32_t)report;
 8021ed0:	4a10      	ldr	r2, [pc, #64]	@ (8021f14 <system_add_rt_report+0x50>)
 8021ed2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8021ed4:	4303      	orrs	r3, r0
 8021ed6:	6313      	str	r3, [r2, #48]	@ 0x30

    if(sys.report.value && grbl.on_rt_reports_added)
 8021ed8:	b13b      	cbz	r3, 8021eea <system_add_rt_report+0x26>
 8021eda:	4b0f      	ldr	r3, [pc, #60]	@ (8021f18 <system_add_rt_report+0x54>)
 8021edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8021ede:	b123      	cbz	r3, 8021eea <system_add_rt_report+0x26>
        grbl.on_rt_reports_added((report_tracking_flags_t)((uint32_t)report));
 8021ee0:	4798      	blx	r3
 8021ee2:	e002      	b.n	8021eea <system_add_rt_report+0x26>
            sys.report.value = 0;
 8021ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8021f14 <system_add_rt_report+0x50>)
 8021ee6:	2200      	movs	r2, #0
 8021ee8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8021eea:	bd08      	pop	{r3, pc}
            if(!hal.driver_cap.mpg_mode)
 8021eec:	4b0b      	ldr	r3, [pc, #44]	@ (8021f1c <system_add_rt_report+0x58>)
 8021eee:	f993 31d9 	ldrsb.w	r3, [r3, #473]	@ 0x1d9
 8021ef2:	2b00      	cmp	r3, #0
 8021ef4:	dbec      	blt.n	8021ed0 <system_add_rt_report+0xc>
 8021ef6:	e7f8      	b.n	8021eea <system_add_rt_report+0x26>
            sys.report.wco = settings.status_report.work_coord_offset;
 8021ef8:	4b09      	ldr	r3, [pc, #36]	@ (8021f20 <system_add_rt_report+0x5c>)
 8021efa:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8021efe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8021f02:	4a04      	ldr	r2, [pc, #16]	@ (8021f14 <system_add_rt_report+0x50>)
 8021f04:	f892 1031 	ldrb.w	r1, [r2, #49]	@ 0x31
 8021f08:	f363 0100 	bfi	r1, r3, #0, #1
 8021f0c:	f882 1031 	strb.w	r1, [r2, #49]	@ 0x31
            break;
 8021f10:	e7de      	b.n	8021ed0 <system_add_rt_report+0xc>
 8021f12:	bf00      	nop
 8021f14:	20001d70 	.word	0x20001d70
 8021f18:	20001c78 	.word	0x20001c78
 8021f1c:	20001a90 	.word	0x20001a90
 8021f20:	200024a8 	.word	0x200024a8

08021f24 <set_tool_reference>:
{
 8021f24:	b500      	push	{lr}
 8021f26:	b083      	sub	sp, #12
    gc_get_plane_data(&plane, gc_state.modal.plane_select);
 8021f28:	4b12      	ldr	r3, [pc, #72]	@ (8021f74 <set_tool_reference+0x50>)
 8021f2a:	7999      	ldrb	r1, [r3, #6]
 8021f2c:	a801      	add	r0, sp, #4
 8021f2e:	f7eb fab3 	bl	800d498 <gc_get_plane_data>
    if(sys.flags.probe_succeeded) {
 8021f32:	4b11      	ldr	r3, [pc, #68]	@ (8021f78 <set_tool_reference+0x54>)
 8021f34:	7d9b      	ldrb	r3, [r3, #22]
 8021f36:	f013 0f02 	tst.w	r3, #2
 8021f3a:	d016      	beq.n	8021f6a <set_tool_reference+0x46>
        sys.tlo_reference_set.mask |= bit(plane.axis_linear);
 8021f3c:	4a0e      	ldr	r2, [pc, #56]	@ (8021f78 <set_tool_reference+0x54>)
 8021f3e:	79d1      	ldrb	r1, [r2, #7]
 8021f40:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8021f44:	2001      	movs	r0, #1
 8021f46:	4098      	lsls	r0, r3
 8021f48:	4301      	orrs	r1, r0
 8021f4a:	71d1      	strb	r1, [r2, #7]
        sys.tlo_reference[plane.axis_linear] = sys.probe_position[plane.axis_linear];
 8021f4c:	f103 010e 	add.w	r1, r3, #14
 8021f50:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8021f54:	3302      	adds	r3, #2
 8021f56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    system_add_rt_report(Report_TLOReference);
 8021f5a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8021f5e:	f7ff ffb1 	bl	8021ec4 <system_add_rt_report>
}
 8021f62:	2000      	movs	r0, #0
 8021f64:	b003      	add	sp, #12
 8021f66:	f85d fb04 	ldr.w	pc, [sp], #4
        sys.tlo_reference_set.mask = 0;
 8021f6a:	4b03      	ldr	r3, [pc, #12]	@ (8021f78 <set_tool_reference+0x54>)
 8021f6c:	2200      	movs	r2, #0
 8021f6e:	71da      	strb	r2, [r3, #7]
 8021f70:	e7f3      	b.n	8021f5a <set_tool_reference+0x36>
 8021f72:	bf00      	nop
 8021f74:	200017c8 	.word	0x200017c8
 8021f78:	20001d70 	.word	0x20001d70

08021f7c <output_parser_state>:
{
 8021f7c:	b508      	push	{r3, lr}
    report_gcode_modes();
 8021f7e:	f7f7 fecf 	bl	8019d20 <report_gcode_modes>
    system_add_rt_report(Report_Homed); // Report homed state on next realtime report
 8021f82:	2004      	movs	r0, #4
 8021f84:	f7ff ff9e 	bl	8021ec4 <system_add_rt_report>
}
 8021f88:	2000      	movs	r0, #0
 8021f8a:	bd08      	pop	{r3, pc}

08021f8c <system_clear_tlo_reference>:
{
 8021f8c:	b510      	push	{r4, lr}
 8021f8e:	b082      	sub	sp, #8
 8021f90:	4604      	mov	r4, r0
    gc_get_plane_data(&plane, gc_state.modal.plane_select);
 8021f92:	4b0f      	ldr	r3, [pc, #60]	@ (8021fd0 <system_clear_tlo_reference+0x44>)
 8021f94:	7999      	ldrb	r1, [r3, #6]
 8021f96:	a801      	add	r0, sp, #4
 8021f98:	f7eb fa7e 	bl	800d498 <gc_get_plane_data>
    if(homing_cycle.mask & (settings.mode == Mode_Lathe ? (X_AXIS_BIT|Z_AXIS_BIT) : bit(plane.axis_linear))) {
 8021f9c:	b2e4      	uxtb	r4, r4
 8021f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8021fd4 <system_clear_tlo_reference+0x48>)
 8021fa0:	7e1b      	ldrb	r3, [r3, #24]
 8021fa2:	2b02      	cmp	r3, #2
 8021fa4:	d00a      	beq.n	8021fbc <system_clear_tlo_reference+0x30>
 8021fa6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8021faa:	2301      	movs	r3, #1
 8021fac:	4093      	lsls	r3, r2
 8021fae:	421c      	tst	r4, r3
 8021fb0:	d002      	beq.n	8021fb8 <system_clear_tlo_reference+0x2c>
        if(sys.tlo_reference_set.mask != 0) {
 8021fb2:	4b09      	ldr	r3, [pc, #36]	@ (8021fd8 <system_clear_tlo_reference+0x4c>)
 8021fb4:	79db      	ldrb	r3, [r3, #7]
 8021fb6:	b91b      	cbnz	r3, 8021fc0 <system_clear_tlo_reference+0x34>
}
 8021fb8:	b002      	add	sp, #8
 8021fba:	bd10      	pop	{r4, pc}
    if(homing_cycle.mask & (settings.mode == Mode_Lathe ? (X_AXIS_BIT|Z_AXIS_BIT) : bit(plane.axis_linear))) {
 8021fbc:	2305      	movs	r3, #5
 8021fbe:	e7f6      	b.n	8021fae <system_clear_tlo_reference+0x22>
            sys.tlo_reference_set.mask = 0;  // Invalidate tool length offset reference
 8021fc0:	4b05      	ldr	r3, [pc, #20]	@ (8021fd8 <system_clear_tlo_reference+0x4c>)
 8021fc2:	2200      	movs	r2, #0
 8021fc4:	71da      	strb	r2, [r3, #7]
            system_add_rt_report(Report_TLOReference);
 8021fc6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8021fca:	f7ff ff7b 	bl	8021ec4 <system_add_rt_report>
}
 8021fce:	e7f3      	b.n	8021fb8 <system_clear_tlo_reference+0x2c>
 8021fd0:	200017c8 	.word	0x200017c8
 8021fd4:	200024a8 	.word	0x200024a8
 8021fd8:	20001d70 	.word	0x20001d70

08021fdc <system_flag_wco_change>:
{
 8021fdc:	b508      	push	{r3, lr}
    if(settings.status_report.sync_on_wco_change)
 8021fde:	4b09      	ldr	r3, [pc, #36]	@ (8022004 <system_flag_wco_change+0x28>)
 8021fe0:	f893 30fd 	ldrb.w	r3, [r3, #253]	@ 0xfd
 8021fe4:	f013 0f01 	tst.w	r3, #1
 8021fe8:	d108      	bne.n	8021ffc <system_flag_wco_change+0x20>
    if(grbl.on_wco_changed)
 8021fea:	4b07      	ldr	r3, [pc, #28]	@ (8022008 <system_flag_wco_change+0x2c>)
 8021fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021fee:	b103      	cbz	r3, 8021ff2 <system_flag_wco_change+0x16>
        grbl.on_wco_changed();
 8021ff0:	4798      	blx	r3
    system_add_rt_report(Report_WCO);
 8021ff2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8021ff6:	f7ff ff65 	bl	8021ec4 <system_add_rt_report>
}
 8021ffa:	bd08      	pop	{r3, pc}
        protocol_buffer_synchronize();
 8021ffc:	f7f5 ff0a 	bl	8017e14 <protocol_buffer_synchronize>
 8022000:	e7f3      	b.n	8021fea <system_flag_wco_change+0xe>
 8022002:	bf00      	nop
 8022004:	200024a8 	.word	0x200024a8
 8022008:	20001c78 	.word	0x20001c78

0802200c <change_completed>:
//    else error?
}

// Restore HAL pointers on completion or reset.
static void change_completed (void)
{
 802200c:	b538      	push	{r3, r4, r5, lr}
    if(enqueue_realtime_command) {
 802200e:	4b1c      	ldr	r3, [pc, #112]	@ (8022080 <change_completed+0x74>)
 8022010:	681b      	ldr	r3, [r3, #0]
 8022012:	b17b      	cbz	r3, 8022034 <change_completed+0x28>
        while(spin_lock);
 8022014:	4b1b      	ldr	r3, [pc, #108]	@ (8022084 <change_completed+0x78>)
 8022016:	681b      	ldr	r3, [r3, #0]
 8022018:	2b00      	cmp	r3, #0
 802201a:	d1fb      	bne.n	8022014 <change_completed+0x8>
        hal.irq_disable();
 802201c:	4c1a      	ldr	r4, [pc, #104]	@ (8022088 <change_completed+0x7c>)
 802201e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8022020:	4798      	blx	r3
        hal.stream.set_enqueue_rt_handler(enqueue_realtime_command);
 8022022:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 8022026:	4d16      	ldr	r5, [pc, #88]	@ (8022080 <change_completed+0x74>)
 8022028:	6828      	ldr	r0, [r5, #0]
 802202a:	4798      	blx	r3
        enqueue_realtime_command = NULL;
 802202c:	2300      	movs	r3, #0
 802202e:	602b      	str	r3, [r5, #0]
        hal.irq_enable();
 8022030:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8022032:	4798      	blx	r3
    }

    if(control_interrupt_callback) {
 8022034:	4b15      	ldr	r3, [pc, #84]	@ (802208c <change_completed+0x80>)
 8022036:	681b      	ldr	r3, [r3, #0]
 8022038:	b16b      	cbz	r3, 8022056 <change_completed+0x4a>
        while(spin_lock);
 802203a:	4b12      	ldr	r3, [pc, #72]	@ (8022084 <change_completed+0x78>)
 802203c:	681b      	ldr	r3, [r3, #0]
 802203e:	2b00      	cmp	r3, #0
 8022040:	d1fb      	bne.n	802203a <change_completed+0x2e>
        hal.irq_disable();
 8022042:	4c11      	ldr	r4, [pc, #68]	@ (8022088 <change_completed+0x7c>)
 8022044:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8022046:	4798      	blx	r3
        hal.control.interrupt_callback = control_interrupt_callback;
 8022048:	4b10      	ldr	r3, [pc, #64]	@ (802208c <change_completed+0x80>)
 802204a:	681a      	ldr	r2, [r3, #0]
 802204c:	66e2      	str	r2, [r4, #108]	@ 0x6c
        control_interrupt_callback = NULL;
 802204e:	2200      	movs	r2, #0
 8022050:	601a      	str	r2, [r3, #0]
        hal.irq_enable();
 8022052:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8022054:	4798      	blx	r3
    }

    if(probe_toolsetter)
 8022056:	4b0e      	ldr	r3, [pc, #56]	@ (8022090 <change_completed+0x84>)
 8022058:	781b      	ldrb	r3, [r3, #0]
 802205a:	b13b      	cbz	r3, 802206c <change_completed+0x60>
        grbl.on_probe_toolsetter(&current_tool, NULL, true, false);
 802205c:	4b0d      	ldr	r3, [pc, #52]	@ (8022094 <change_completed+0x88>)
 802205e:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 8022062:	2300      	movs	r3, #0
 8022064:	2201      	movs	r2, #1
 8022066:	4619      	mov	r1, r3
 8022068:	480b      	ldr	r0, [pc, #44]	@ (8022098 <change_completed+0x8c>)
 802206a:	47a0      	blx	r4

    grbl.on_probe_completed = NULL;
 802206c:	2300      	movs	r3, #0
 802206e:	4a09      	ldr	r2, [pc, #36]	@ (8022094 <change_completed+0x88>)
 8022070:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    gc_state.tool_change = probe_toolsetter = false;
 8022074:	4a06      	ldr	r2, [pc, #24]	@ (8022090 <change_completed+0x84>)
 8022076:	7013      	strb	r3, [r2, #0]
 8022078:	4a08      	ldr	r2, [pc, #32]	@ (802209c <change_completed+0x90>)
 802207a:	f882 307f 	strb.w	r3, [r2, #127]	@ 0x7f
}
 802207e:	bd38      	pop	{r3, r4, r5, pc}
 8022080:	20003084 	.word	0x20003084
 8022084:	200030c4 	.word	0x200030c4
 8022088:	20001a90 	.word	0x20001a90
 802208c:	20003080 	.word	0x20003080
 8022090:	200030c9 	.word	0x200030c9
 8022094:	20001c78 	.word	0x20001c78
 8022098:	200030ac 	.word	0x200030ac
 802209c:	200017c8 	.word	0x200017c8

080220a0 <execute_warning>:
}

// Issue warning on cycle start event if touch off by $TPW is pending.
// Used in Manual and Manual_G59_3 modes ($341=1 or $341=2). Called from the foreground process.
static void execute_warning (void *data)
{
 80220a0:	b508      	push	{r3, lr}
    grbl.report.feedback_message(Message_ExecuteTPW);
 80220a2:	4b02      	ldr	r3, [pc, #8]	@ (80220ac <execute_warning+0xc>)
 80220a4:	68db      	ldr	r3, [r3, #12]
 80220a6:	2014      	movs	r0, #20
 80220a8:	4798      	blx	r3
}
 80220aa:	bd08      	pop	{r3, pc}
 80220ac:	20001c78 	.word	0x20001c78

080220b0 <set_probe_target>:
}

// Set and limit probe travel to be within machine limits.
static void set_probe_target (coord_data_t *target, uint8_t axis)
{
    target->values[axis] -= settings.tool_change.probing_distance;
 80220b0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80220b4:	edd3 7a00 	vldr	s15, [r3]
 80220b8:	4a1d      	ldr	r2, [pc, #116]	@ (8022130 <set_probe_target+0x80>)
 80220ba:	ed92 7a0a 	vldr	s14, [r2, #40]	@ 0x28
 80220be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80220c2:	edc3 7a00 	vstr	s15, [r3]

    if(bit_istrue(sys.homed.mask, bit(axis)) && settings.axis[axis].max_travel < -0.0f)
 80220c6:	4b1b      	ldr	r3, [pc, #108]	@ (8022134 <set_probe_target+0x84>)
 80220c8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80220cc:	40cb      	lsrs	r3, r1
 80220ce:	f013 0f01 	tst.w	r3, #1
 80220d2:	d00b      	beq.n	80220ec <set_probe_target+0x3c>
 80220d4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80220d8:	4b15      	ldr	r3, [pc, #84]	@ (8022130 <set_probe_target+0x80>)
 80220da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80220de:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80220e2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80220e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220ea:	d400      	bmi.n	80220ee <set_probe_target+0x3e>
        target->values[axis] = max(min(target->values[axis], sys.work_envelope.max.values[axis]), sys.work_envelope.min.values[axis]);
}
 80220ec:	4770      	bx	lr
        target->values[axis] = max(min(target->values[axis], sys.work_envelope.max.values[axis]), sys.work_envelope.min.values[axis]);
 80220ee:	f101 021a 	add.w	r2, r1, #26
 80220f2:	4b10      	ldr	r3, [pc, #64]	@ (8022134 <set_probe_target+0x84>)
 80220f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80220f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80220fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022104:	d501      	bpl.n	802210a <set_probe_target+0x5a>
 8022106:	eeb0 7a67 	vmov.f32	s14, s15
 802210a:	f101 0218 	add.w	r2, r1, #24
 802210e:	4b09      	ldr	r3, [pc, #36]	@ (8022134 <set_probe_target+0x84>)
 8022110:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8022114:	edd3 7a01 	vldr	s15, [r3, #4]
 8022118:	eef4 7ac7 	vcmpe.f32	s15, s14
 802211c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022120:	d401      	bmi.n	8022126 <set_probe_target+0x76>
 8022122:	eeb0 7a67 	vmov.f32	s14, s15
 8022126:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 802212a:	ed80 7a00 	vstr	s14, [r0]
}
 802212e:	e7dd      	b.n	80220ec <set_probe_target+0x3c>
 8022130:	200024a8 	.word	0x200024a8
 8022134:	20001d70 	.word	0x20001d70

08022138 <on_toolchange_ack>:
    return drop;
}

// Trap cycle start command and control signal when tool change is acknowledged by sender.
ISR_CODE static void ISR_FUNC(on_toolchange_ack)(void)
{
 8022138:	b508      	push	{r3, lr}
    control_interrupt_callback = hal.control.interrupt_callback;
 802213a:	4b06      	ldr	r3, [pc, #24]	@ (8022154 <on_toolchange_ack+0x1c>)
 802213c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 802213e:	4a06      	ldr	r2, [pc, #24]	@ (8022158 <on_toolchange_ack+0x20>)
 8022140:	6011      	str	r1, [r2, #0]
    hal.control.interrupt_callback = trap_control_cycle_start;
 8022142:	4a06      	ldr	r2, [pc, #24]	@ (802215c <on_toolchange_ack+0x24>)
 8022144:	66da      	str	r2, [r3, #108]	@ 0x6c
    enqueue_realtime_command = hal.stream.set_enqueue_rt_handler(trap_stream_cycle_start);
 8022146:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 802214a:	4805      	ldr	r0, [pc, #20]	@ (8022160 <on_toolchange_ack+0x28>)
 802214c:	4798      	blx	r3
 802214e:	4b05      	ldr	r3, [pc, #20]	@ (8022164 <on_toolchange_ack+0x2c>)
 8022150:	6018      	str	r0, [r3, #0]

}
 8022152:	bd08      	pop	{r3, pc}
 8022154:	20001a90 	.word	0x20001a90
 8022158:	20003080 	.word	0x20003080
 802215c:	080222fd 	.word	0x080222fd
 8022160:	0802227d 	.word	0x0802227d
 8022164:	20003084 	.word	0x20003084

08022168 <on_probe_completed>:
{
 8022168:	b508      	push	{r3, lr}
    if(!sys.flags.probe_succeeded)
 802216a:	4b0f      	ldr	r3, [pc, #60]	@ (80221a8 <on_probe_completed+0x40>)
 802216c:	7d9b      	ldrb	r3, [r3, #22]
 802216e:	f013 0f02 	tst.w	r3, #2
 8022172:	d104      	bne.n	802217e <on_probe_completed+0x16>
        grbl.report.feedback_message(Message_ProbeFailedRetry);
 8022174:	4b0d      	ldr	r3, [pc, #52]	@ (80221ac <on_probe_completed+0x44>)
 8022176:	68db      	ldr	r3, [r3, #12]
 8022178:	2013      	movs	r0, #19
 802217a:	4798      	blx	r3
}
 802217c:	bd08      	pop	{r3, pc}
    else if(sys.tlo_reference_set.mask & bit(plane.axis_linear))
 802217e:	4b0a      	ldr	r3, [pc, #40]	@ (80221a8 <on_probe_completed+0x40>)
 8022180:	79db      	ldrb	r3, [r3, #7]
 8022182:	4a0b      	ldr	r2, [pc, #44]	@ (80221b0 <on_probe_completed+0x48>)
 8022184:	7891      	ldrb	r1, [r2, #2]
 8022186:	40cb      	lsrs	r3, r1
 8022188:	f013 0f01 	tst.w	r3, #1
 802218c:	d0f6      	beq.n	802217c <on_probe_completed+0x14>
        gc_set_tool_offset(ToolLengthOffset_EnableDynamic, plane.axis_linear, sys.probe_position[plane.axis_linear] - sys.tlo_reference[plane.axis_linear]);
 802218e:	4b06      	ldr	r3, [pc, #24]	@ (80221a8 <on_probe_completed+0x40>)
 8022190:	f101 020e 	add.w	r2, r1, #14
 8022194:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8022198:	1c88      	adds	r0, r1, #2
 802219a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802219e:	1ad2      	subs	r2, r2, r3
 80221a0:	2002      	movs	r0, #2
 80221a2:	f7eb f913 	bl	800d3cc <gc_set_tool_offset>
}
 80221a6:	e7e9      	b.n	802217c <on_probe_completed+0x14>
 80221a8:	20001d70 	.word	0x20001d70
 80221ac:	20001c78 	.word	0x20001c78
 80221b0:	200030a4 	.word	0x200030a4

080221b4 <reset>:
{
 80221b4:	b538      	push	{r3, r4, r5, lr}
    if(next_tool) { //TODO: move to gc_xxx() function?
 80221b6:	4b18      	ldr	r3, [pc, #96]	@ (8022218 <reset+0x64>)
 80221b8:	681c      	ldr	r4, [r3, #0]
 80221ba:	b1ec      	cbz	r4, 80221f8 <reset+0x44>
        if(current_tool.tool_id != next_tool->tool_id) {
 80221bc:	4b17      	ldr	r3, [pc, #92]	@ (802221c <reset+0x68>)
 80221be:	691a      	ldr	r2, [r3, #16]
 80221c0:	6923      	ldr	r3, [r4, #16]
 80221c2:	429a      	cmp	r2, r3
 80221c4:	d010      	beq.n	80221e8 <reset+0x34>
            if(grbl.tool_table.n_tools)
 80221c6:	4b16      	ldr	r3, [pc, #88]	@ (8022220 <reset+0x6c>)
 80221c8:	699b      	ldr	r3, [r3, #24]
 80221ca:	b1db      	cbz	r3, 8022204 <reset+0x50>
                memcpy(gc_state.tool, &current_tool, sizeof(tool_data_t));
 80221cc:	4b15      	ldr	r3, [pc, #84]	@ (8022224 <reset+0x70>)
 80221ce:	f8d3 50d0 	ldr.w	r5, [r3, #208]	@ 0xd0
 80221d2:	4c12      	ldr	r4, [pc, #72]	@ (802221c <reset+0x68>)
 80221d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80221d6:	6028      	str	r0, [r5, #0]
 80221d8:	6069      	str	r1, [r5, #4]
 80221da:	60aa      	str	r2, [r5, #8]
 80221dc:	60eb      	str	r3, [r5, #12]
 80221de:	6820      	ldr	r0, [r4, #0]
 80221e0:	6128      	str	r0, [r5, #16]
            system_add_rt_report(Report_Tool);
 80221e2:	2080      	movs	r0, #128	@ 0x80
 80221e4:	f7ff fe6e 	bl	8021ec4 <system_add_rt_report>
        gc_state.tool_pending = gc_state.tool->tool_id;
 80221e8:	4b0e      	ldr	r3, [pc, #56]	@ (8022224 <reset+0x70>)
 80221ea:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80221ee:	6912      	ldr	r2, [r2, #16]
 80221f0:	679a      	str	r2, [r3, #120]	@ 0x78
        next_tool = NULL;
 80221f2:	4b09      	ldr	r3, [pc, #36]	@ (8022218 <reset+0x64>)
 80221f4:	2200      	movs	r2, #0
 80221f6:	601a      	str	r2, [r3, #0]
    change_completed();
 80221f8:	f7ff ff08 	bl	802200c <change_completed>
    driver_reset();
 80221fc:	4b0a      	ldr	r3, [pc, #40]	@ (8022228 <reset+0x74>)
 80221fe:	681b      	ldr	r3, [r3, #0]
 8022200:	4798      	blx	r3
}
 8022202:	bd38      	pop	{r3, r4, r5, pc}
                memcpy(next_tool, &current_tool, sizeof(tool_data_t));
 8022204:	4d05      	ldr	r5, [pc, #20]	@ (802221c <reset+0x68>)
 8022206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022208:	6020      	str	r0, [r4, #0]
 802220a:	6061      	str	r1, [r4, #4]
 802220c:	60a2      	str	r2, [r4, #8]
 802220e:	60e3      	str	r3, [r4, #12]
 8022210:	6828      	ldr	r0, [r5, #0]
 8022212:	6120      	str	r0, [r4, #16]
 8022214:	e7e5      	b.n	80221e2 <reset+0x2e>
 8022216:	bf00      	nop
 8022218:	200030a8 	.word	0x200030a8
 802221c:	200030ac 	.word	0x200030ac
 8022220:	20001c78 	.word	0x20001c78
 8022224:	200017c8 	.word	0x200017c8
 8022228:	20003088 	.word	0x20003088

0802222c <tool_select>:

// Set next and/or current tool. Called by gcode.c on on a Tn or M61 command (via HAL).
static void tool_select (tool_data_t *tool, bool next)
{
    next_tool = tool;
 802222c:	4b07      	ldr	r3, [pc, #28]	@ (802224c <tool_select+0x20>)
 802222e:	6018      	str	r0, [r3, #0]
    if(!next)
 8022230:	b101      	cbz	r1, 8022234 <tool_select+0x8>
 8022232:	4770      	bx	lr
{
 8022234:	b430      	push	{r4, r5}
 8022236:	4604      	mov	r4, r0
        memcpy(&current_tool, tool, sizeof(tool_data_t));
 8022238:	4d05      	ldr	r5, [pc, #20]	@ (8022250 <tool_select+0x24>)
 802223a:	6800      	ldr	r0, [r0, #0]
 802223c:	6861      	ldr	r1, [r4, #4]
 802223e:	68a2      	ldr	r2, [r4, #8]
 8022240:	68e3      	ldr	r3, [r4, #12]
 8022242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8022244:	6920      	ldr	r0, [r4, #16]
 8022246:	6028      	str	r0, [r5, #0]
}
 8022248:	bc30      	pop	{r4, r5}
 802224a:	4770      	bx	lr
 802224c:	200030a8 	.word	0x200030a8
 8022250:	200030ac 	.word	0x200030ac

08022254 <tc_on_homing_complete>:
{
 8022254:	b510      	push	{r4, lr}
 8022256:	4604      	mov	r4, r0
    if(on_homing_completed)
 8022258:	4b06      	ldr	r3, [pc, #24]	@ (8022274 <tc_on_homing_complete+0x20>)
 802225a:	681b      	ldr	r3, [r3, #0]
 802225c:	b103      	cbz	r3, 8022260 <tc_on_homing_complete+0xc>
        on_homing_completed(homing_cycle, success);
 802225e:	4798      	blx	r3
    if(settings.tool_change.mode != ToolChange_Disabled)
 8022260:	4b05      	ldr	r3, [pc, #20]	@ (8022278 <tc_on_homing_complete+0x24>)
 8022262:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8022266:	b903      	cbnz	r3, 802226a <tc_on_homing_complete+0x16>
}
 8022268:	bd10      	pop	{r4, pc}
        system_clear_tlo_reference(homing_cycle);
 802226a:	4620      	mov	r0, r4
 802226c:	f7ff fe8e 	bl	8021f8c <system_clear_tlo_reference>
}
 8022270:	e7fa      	b.n	8022268 <tc_on_homing_complete+0x14>
 8022272:	bf00      	nop
 8022274:	2000307c 	.word	0x2000307c
 8022278:	200024a8 	.word	0x200024a8

0802227c <trap_stream_cycle_start>:
{
 802227c:	b510      	push	{r4, lr}
    spin_lock++;
 802227e:	4a17      	ldr	r2, [pc, #92]	@ (80222dc <trap_stream_cycle_start+0x60>)
 8022280:	6813      	ldr	r3, [r2, #0]
 8022282:	3301      	adds	r3, #1
 8022284:	6013      	str	r3, [r2, #0]
    if((drop = (c == CMD_CYCLE_START || c == CMD_CYCLE_START_LEGACY))) {
 8022286:	2881      	cmp	r0, #129	@ 0x81
 8022288:	d00b      	beq.n	80222a2 <trap_stream_cycle_start+0x26>
 802228a:	287e      	cmp	r0, #126	@ 0x7e
 802228c:	d009      	beq.n	80222a2 <trap_stream_cycle_start+0x26>
        drop = enqueue_realtime_command(c);
 802228e:	4b14      	ldr	r3, [pc, #80]	@ (80222e0 <trap_stream_cycle_start+0x64>)
 8022290:	681b      	ldr	r3, [r3, #0]
 8022292:	4798      	blx	r3
 8022294:	4604      	mov	r4, r0
    spin_lock--;
 8022296:	4a11      	ldr	r2, [pc, #68]	@ (80222dc <trap_stream_cycle_start+0x60>)
 8022298:	6813      	ldr	r3, [r2, #0]
 802229a:	3b01      	subs	r3, #1
 802229c:	6013      	str	r3, [r2, #0]
}
 802229e:	4620      	mov	r0, r4
 80222a0:	bd10      	pop	{r4, pc}
        if(!execute_posted) {
 80222a2:	4b10      	ldr	r3, [pc, #64]	@ (80222e4 <trap_stream_cycle_start+0x68>)
 80222a4:	781b      	ldrb	r3, [r3, #0]
 80222a6:	f003 04ff 	and.w	r4, r3, #255	@ 0xff
 80222aa:	2b00      	cmp	r3, #0
 80222ac:	d1f3      	bne.n	8022296 <trap_stream_cycle_start+0x1a>
            if(!block_cycle_start)
 80222ae:	4b0e      	ldr	r3, [pc, #56]	@ (80222e8 <trap_stream_cycle_start+0x6c>)
 80222b0:	781c      	ldrb	r4, [r3, #0]
 80222b2:	b974      	cbnz	r4, 80222d2 <trap_stream_cycle_start+0x56>
                execute_posted = protocol_enqueue_foreground_task(settings.tool_change.mode == ToolChange_SemiAutomatic ? execute_probe : execute_restore, NULL);
 80222b4:	4b0d      	ldr	r3, [pc, #52]	@ (80222ec <trap_stream_cycle_start+0x70>)
 80222b6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80222ba:	2b03      	cmp	r3, #3
 80222bc:	d007      	beq.n	80222ce <trap_stream_cycle_start+0x52>
 80222be:	480c      	ldr	r0, [pc, #48]	@ (80222f0 <trap_stream_cycle_start+0x74>)
 80222c0:	2100      	movs	r1, #0
 80222c2:	f7f5 fdc5 	bl	8017e50 <protocol_enqueue_foreground_task>
 80222c6:	4b07      	ldr	r3, [pc, #28]	@ (80222e4 <trap_stream_cycle_start+0x68>)
 80222c8:	7018      	strb	r0, [r3, #0]
 80222ca:	2401      	movs	r4, #1
 80222cc:	e7e3      	b.n	8022296 <trap_stream_cycle_start+0x1a>
 80222ce:	4809      	ldr	r0, [pc, #36]	@ (80222f4 <trap_stream_cycle_start+0x78>)
 80222d0:	e7f6      	b.n	80222c0 <trap_stream_cycle_start+0x44>
                protocol_enqueue_foreground_task(execute_warning, NULL);
 80222d2:	2100      	movs	r1, #0
 80222d4:	4808      	ldr	r0, [pc, #32]	@ (80222f8 <trap_stream_cycle_start+0x7c>)
 80222d6:	f7f5 fdbb 	bl	8017e50 <protocol_enqueue_foreground_task>
 80222da:	e7dc      	b.n	8022296 <trap_stream_cycle_start+0x1a>
 80222dc:	200030c4 	.word	0x200030c4
 80222e0:	20003084 	.word	0x20003084
 80222e4:	200030c8 	.word	0x200030c8
 80222e8:	200030ca 	.word	0x200030ca
 80222ec:	200024a8 	.word	0x200024a8
 80222f0:	08022499 	.word	0x08022499
 80222f4:	080224d9 	.word	0x080224d9
 80222f8:	080220a1 	.word	0x080220a1

080222fc <trap_control_cycle_start>:
{
 80222fc:	b508      	push	{r3, lr}
    spin_lock++;
 80222fe:	4a14      	ldr	r2, [pc, #80]	@ (8022350 <trap_control_cycle_start+0x54>)
 8022300:	6813      	ldr	r3, [r2, #0]
 8022302:	3301      	adds	r3, #1
 8022304:	6013      	str	r3, [r2, #0]
    if(signals.cycle_start) {
 8022306:	f010 0f04 	tst.w	r0, #4
 802230a:	d018      	beq.n	802233e <trap_control_cycle_start+0x42>
        if(!execute_posted) {
 802230c:	4b11      	ldr	r3, [pc, #68]	@ (8022354 <trap_control_cycle_start+0x58>)
 802230e:	781b      	ldrb	r3, [r3, #0]
 8022310:	b9c3      	cbnz	r3, 8022344 <trap_control_cycle_start+0x48>
            if(!block_cycle_start)
 8022312:	4b11      	ldr	r3, [pc, #68]	@ (8022358 <trap_control_cycle_start+0x5c>)
 8022314:	781b      	ldrb	r3, [r3, #0]
 8022316:	b96b      	cbnz	r3, 8022334 <trap_control_cycle_start+0x38>
                execute_posted = protocol_enqueue_foreground_task(settings.tool_change.mode == ToolChange_SemiAutomatic ? execute_probe : execute_restore, NULL);
 8022318:	4b10      	ldr	r3, [pc, #64]	@ (802235c <trap_control_cycle_start+0x60>)
 802231a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 802231e:	2b03      	cmp	r3, #3
 8022320:	d006      	beq.n	8022330 <trap_control_cycle_start+0x34>
 8022322:	480f      	ldr	r0, [pc, #60]	@ (8022360 <trap_control_cycle_start+0x64>)
 8022324:	2100      	movs	r1, #0
 8022326:	f7f5 fd93 	bl	8017e50 <protocol_enqueue_foreground_task>
 802232a:	4b0a      	ldr	r3, [pc, #40]	@ (8022354 <trap_control_cycle_start+0x58>)
 802232c:	7018      	strb	r0, [r3, #0]
 802232e:	e009      	b.n	8022344 <trap_control_cycle_start+0x48>
 8022330:	480c      	ldr	r0, [pc, #48]	@ (8022364 <trap_control_cycle_start+0x68>)
 8022332:	e7f7      	b.n	8022324 <trap_control_cycle_start+0x28>
                protocol_enqueue_foreground_task(execute_warning, NULL);
 8022334:	2100      	movs	r1, #0
 8022336:	480c      	ldr	r0, [pc, #48]	@ (8022368 <trap_control_cycle_start+0x6c>)
 8022338:	f7f5 fd8a 	bl	8017e50 <protocol_enqueue_foreground_task>
        signals.cycle_start = Off;
 802233c:	e002      	b.n	8022344 <trap_control_cycle_start+0x48>
        control_interrupt_callback(signals);
 802233e:	4b0b      	ldr	r3, [pc, #44]	@ (802236c <trap_control_cycle_start+0x70>)
 8022340:	681b      	ldr	r3, [r3, #0]
 8022342:	4798      	blx	r3
    spin_lock--;
 8022344:	4a02      	ldr	r2, [pc, #8]	@ (8022350 <trap_control_cycle_start+0x54>)
 8022346:	6813      	ldr	r3, [r2, #0]
 8022348:	3b01      	subs	r3, #1
 802234a:	6013      	str	r3, [r2, #0]
}
 802234c:	bd08      	pop	{r3, pc}
 802234e:	bf00      	nop
 8022350:	200030c4 	.word	0x200030c4
 8022354:	200030c8 	.word	0x200030c8
 8022358:	200030ca 	.word	0x200030ca
 802235c:	200024a8 	.word	0x200024a8
 8022360:	08022499 	.word	0x08022499
 8022364:	080224d9 	.word	0x080224d9
 8022368:	080220a1 	.word	0x080220a1
 802236c:	20003080 	.word	0x20003080

08022370 <restore>:
{
 8022370:	b530      	push	{r4, r5, lr}
 8022372:	b08b      	sub	sp, #44	@ 0x2c
    plan_data_init(&plan_data);
 8022374:	4668      	mov	r0, sp
 8022376:	f7f4 fdb3 	bl	8016ee0 <plan_data_init>
    plan_data.condition.rapid_motion = On;
 802237a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802237e:	f043 0301 	orr.w	r3, r3, #1
 8022382:	f88d 3014 	strb.w	r3, [sp, #20]
    target.values[plane.axis_linear] = tool_change_position;
 8022386:	4b3a      	ldr	r3, [pc, #232]	@ (8022470 <restore+0x100>)
 8022388:	789b      	ldrb	r3, [r3, #2]
 802238a:	483a      	ldr	r0, [pc, #232]	@ (8022474 <restore+0x104>)
 802238c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8022390:	4a39      	ldr	r2, [pc, #228]	@ (8022478 <restore+0x108>)
 8022392:	6812      	ldr	r2, [r2, #0]
 8022394:	601a      	str	r2, [r3, #0]
    mc_line(target.values, &plan_data);
 8022396:	4669      	mov	r1, sp
 8022398:	f7f1 fc40 	bl	8013c1c <mc_line>
    if(!settings.flags.no_restore_position_after_M6) {
 802239c:	4b37      	ldr	r3, [pc, #220]	@ (802247c <restore+0x10c>)
 802239e:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 80223a2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80223a6:	d010      	beq.n	80223ca <restore+0x5a>
    if(protocol_buffer_synchronize()) {
 80223a8:	f7f5 fd34 	bl	8017e14 <protocol_buffer_synchronize>
 80223ac:	b9f0      	cbnz	r0, 80223ec <restore+0x7c>
    if(protocol_buffer_synchronize()) {
 80223ae:	f7f5 fd31 	bl	8017e14 <protocol_buffer_synchronize>
 80223b2:	2800      	cmp	r0, #0
 80223b4:	d145      	bne.n	8022442 <restore+0xd2>
    return !ABORTED;
 80223b6:	4b32      	ldr	r3, [pc, #200]	@ (8022480 <restore+0x110>)
 80223b8:	781b      	ldrb	r3, [r3, #0]
 80223ba:	2b00      	cmp	r3, #0
 80223bc:	d152      	bne.n	8022464 <restore+0xf4>
 80223be:	4b30      	ldr	r3, [pc, #192]	@ (8022480 <restore+0x110>)
 80223c0:	785b      	ldrb	r3, [r3, #1]
 80223c2:	2b00      	cmp	r3, #0
 80223c4:	d051      	beq.n	802246a <restore+0xfa>
 80223c6:	2000      	movs	r0, #0
 80223c8:	e04d      	b.n	8022466 <restore+0xf6>
        memcpy(&target, &previous, sizeof(coord_data_t));
 80223ca:	4b2a      	ldr	r3, [pc, #168]	@ (8022474 <restore+0x104>)
 80223cc:	4a2d      	ldr	r2, [pc, #180]	@ (8022484 <restore+0x114>)
 80223ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80223d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        target.values[plane.axis_linear] = tool_change_position;
 80223d4:	4a26      	ldr	r2, [pc, #152]	@ (8022470 <restore+0x100>)
 80223d6:	7892      	ldrb	r2, [r2, #2]
 80223d8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80223dc:	4926      	ldr	r1, [pc, #152]	@ (8022478 <restore+0x108>)
 80223de:	6809      	ldr	r1, [r1, #0]
 80223e0:	6011      	str	r1, [r2, #0]
        mc_line(target.values, &plan_data);
 80223e2:	4669      	mov	r1, sp
 80223e4:	4618      	mov	r0, r3
 80223e6:	f7f1 fc19 	bl	8013c1c <mc_line>
 80223ea:	e7dd      	b.n	80223a8 <restore+0x38>
        sync_position();
 80223ec:	f7f4 fd02 	bl	8016df4 <plan_sync_position>
 80223f0:	4c25      	ldr	r4, [pc, #148]	@ (8022488 <restore+0x118>)
 80223f2:	4926      	ldr	r1, [pc, #152]	@ (802248c <restore+0x11c>)
 80223f4:	4620      	mov	r0, r4
 80223f6:	f7ff fcc1 	bl	8021d7c <system_convert_array_steps_to_mpos>
        coolant_sync(gc_state.modal.coolant);
 80223fa:	f814 0c4f 	ldrb.w	r0, [r4, #-79]
 80223fe:	f7ea fdbb 	bl	800cf78 <coolant_sync>
        spindle_restore(plan_data.spindle.hal, gc_state.modal.spindle.state, gc_state.spindle.rpm);
 8022402:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8022406:	f814 1c4e 	ldrb.w	r1, [r4, #-78]
 802240a:	9804      	ldr	r0, [sp, #16]
 802240c:	f7fc fa0a 	bl	801e824 <spindle_restore>
        if(!settings.flags.no_restore_position_after_M6) {
 8022410:	4b1a      	ldr	r3, [pc, #104]	@ (802247c <restore+0x10c>)
 8022412:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 8022416:	f013 0f40 	tst.w	r3, #64	@ 0x40
 802241a:	d1c8      	bne.n	80223ae <restore+0x3e>
            previous.values[plane.axis_linear] += gc_get_offset(plane.axis_linear, false);
 802241c:	4c14      	ldr	r4, [pc, #80]	@ (8022470 <restore+0x100>)
 802241e:	2100      	movs	r1, #0
 8022420:	78a0      	ldrb	r0, [r4, #2]
 8022422:	f7ea ff93 	bl	800d34c <gc_get_offset>
 8022426:	78a3      	ldrb	r3, [r4, #2]
 8022428:	4816      	ldr	r0, [pc, #88]	@ (8022484 <restore+0x114>)
 802242a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802242e:	edd3 7a00 	vldr	s15, [r3]
 8022432:	ee77 7a80 	vadd.f32	s15, s15, s0
 8022436:	edc3 7a00 	vstr	s15, [r3]
            mc_line(previous.values, &plan_data);
 802243a:	4669      	mov	r1, sp
 802243c:	f7f1 fbee 	bl	8013c1c <mc_line>
 8022440:	e7b5      	b.n	80223ae <restore+0x3e>
        sync_position();
 8022442:	f7f4 fcd7 	bl	8016df4 <plan_sync_position>
 8022446:	4911      	ldr	r1, [pc, #68]	@ (802248c <restore+0x11c>)
 8022448:	480f      	ldr	r0, [pc, #60]	@ (8022488 <restore+0x118>)
 802244a:	f7ff fc97 	bl	8021d7c <system_convert_array_steps_to_mpos>
        memcpy(&current_tool, next_tool, sizeof(tool_data_t));
 802244e:	4b10      	ldr	r3, [pc, #64]	@ (8022490 <restore+0x120>)
 8022450:	681d      	ldr	r5, [r3, #0]
 8022452:	4c10      	ldr	r4, [pc, #64]	@ (8022494 <restore+0x124>)
 8022454:	6828      	ldr	r0, [r5, #0]
 8022456:	6869      	ldr	r1, [r5, #4]
 8022458:	68aa      	ldr	r2, [r5, #8]
 802245a:	68eb      	ldr	r3, [r5, #12]
 802245c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802245e:	6928      	ldr	r0, [r5, #16]
 8022460:	6020      	str	r0, [r4, #0]
 8022462:	e7a8      	b.n	80223b6 <restore+0x46>
    return !ABORTED;
 8022464:	2000      	movs	r0, #0
}
 8022466:	b00b      	add	sp, #44	@ 0x2c
 8022468:	bd30      	pop	{r4, r5, pc}
    return !ABORTED;
 802246a:	2001      	movs	r0, #1
 802246c:	e7fb      	b.n	8022466 <restore+0xf6>
 802246e:	bf00      	nop
 8022470:	200030a4 	.word	0x200030a4
 8022474:	20003098 	.word	0x20003098
 8022478:	200030c0 	.word	0x200030c0
 802247c:	200024a8 	.word	0x200024a8
 8022480:	20001d70 	.word	0x20001d70
 8022484:	2000308c 	.word	0x2000308c
 8022488:	20001830 	.word	0x20001830
 802248c:	20001df8 	.word	0x20001df8
 8022490:	200030a8 	.word	0x200030a8
 8022494:	200030ac 	.word	0x200030ac

08022498 <execute_restore>:
{
 8022498:	b510      	push	{r4, lr}
    system_convert_array_steps_to_mpos(target.values, sys.position);
 802249a:	490a      	ldr	r1, [pc, #40]	@ (80224c4 <execute_restore+0x2c>)
 802249c:	480a      	ldr	r0, [pc, #40]	@ (80224c8 <execute_restore+0x30>)
 802249e:	f7ff fc6d 	bl	8021d7c <system_convert_array_steps_to_mpos>
    bool ok = restore();
 80224a2:	f7ff ff65 	bl	8022370 <restore>
 80224a6:	4604      	mov	r4, r0
    change_completed();
 80224a8:	f7ff fdb0 	bl	802200c <change_completed>
    grbl.report.feedback_message(Message_None);
 80224ac:	4b07      	ldr	r3, [pc, #28]	@ (80224cc <execute_restore+0x34>)
 80224ae:	68db      	ldr	r3, [r3, #12]
 80224b0:	2000      	movs	r0, #0
 80224b2:	4798      	blx	r3
    if(ok)
 80224b4:	b124      	cbz	r4, 80224c0 <execute_restore+0x28>
        system_set_exec_state_flag(EXEC_CYCLE_START);
 80224b6:	4b06      	ldr	r3, [pc, #24]	@ (80224d0 <execute_restore+0x38>)
 80224b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80224ba:	2102      	movs	r1, #2
 80224bc:	4805      	ldr	r0, [pc, #20]	@ (80224d4 <execute_restore+0x3c>)
 80224be:	4798      	blx	r3
}
 80224c0:	bd10      	pop	{r4, pc}
 80224c2:	bf00      	nop
 80224c4:	20001df8 	.word	0x20001df8
 80224c8:	20003098 	.word	0x20003098
 80224cc:	20001c78 	.word	0x20001c78
 80224d0:	20001a90 	.word	0x20001a90
 80224d4:	20001db8 	.word	0x20001db8

080224d8 <execute_probe>:
{
 80224d8:	b570      	push	{r4, r5, r6, lr}
 80224da:	b08e      	sub	sp, #56	@ 0x38
    gc_parser_flags_t flags = {0};
 80224dc:	2400      	movs	r4, #0
    settings_read_coord_data(CoordinateSystem_G59_3, &offset.values);
 80224de:	a90b      	add	r1, sp, #44	@ 0x2c
 80224e0:	2008      	movs	r0, #8
 80224e2:	f7fb f8d7 	bl	801d694 <settings_read_coord_data>
    plan_data_init(&plan_data);
 80224e6:	a801      	add	r0, sp, #4
 80224e8:	f7f4 fcfa 	bl	8016ee0 <plan_data_init>
    plan_data.condition.rapid_motion = On;
 80224ec:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80224f0:	f043 0301 	orr.w	r3, r3, #1
 80224f4:	f88d 3018 	strb.w	r3, [sp, #24]
    target.values[plane.axis_0] = offset.values[plane.axis_0];
 80224f8:	4961      	ldr	r1, [pc, #388]	@ (8022680 <execute_probe+0x1a8>)
 80224fa:	780a      	ldrb	r2, [r1, #0]
 80224fc:	ab0e      	add	r3, sp, #56	@ 0x38
 80224fe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8022502:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 8022506:	4b5f      	ldr	r3, [pc, #380]	@ (8022684 <execute_probe+0x1ac>)
 8022508:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 802250c:	6010      	str	r0, [r2, #0]
    target.values[plane.axis_1] = offset.values[plane.axis_1];
 802250e:	784a      	ldrb	r2, [r1, #1]
 8022510:	a90e      	add	r1, sp, #56	@ 0x38
 8022512:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8022516:	f851 1c0c 	ldr.w	r1, [r1, #-12]
 802251a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802251e:	6019      	str	r1, [r3, #0]
    if(probe_toolsetter)
 8022520:	4b59      	ldr	r3, [pc, #356]	@ (8022688 <execute_probe+0x1b0>)
 8022522:	781b      	ldrb	r3, [r3, #0]
 8022524:	b143      	cbz	r3, 8022538 <execute_probe+0x60>
        grbl.on_probe_toolsetter(next_tool, &target, false, true);
 8022526:	4b59      	ldr	r3, [pc, #356]	@ (802268c <execute_probe+0x1b4>)
 8022528:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 802252c:	2301      	movs	r3, #1
 802252e:	4622      	mov	r2, r4
 8022530:	4954      	ldr	r1, [pc, #336]	@ (8022684 <execute_probe+0x1ac>)
 8022532:	4857      	ldr	r0, [pc, #348]	@ (8022690 <execute_probe+0x1b8>)
 8022534:	6800      	ldr	r0, [r0, #0]
 8022536:	47a8      	blx	r5
    if((ok = mc_line(target.values, &plan_data))) {
 8022538:	a901      	add	r1, sp, #4
 802253a:	4852      	ldr	r0, [pc, #328]	@ (8022684 <execute_probe+0x1ac>)
 802253c:	f7f1 fb6e 	bl	8013c1c <mc_line>
 8022540:	b918      	cbnz	r0, 802254a <execute_probe+0x72>
    change_completed();
 8022542:	f7ff fd63 	bl	802200c <change_completed>
}
 8022546:	b00e      	add	sp, #56	@ 0x38
 8022548:	bd70      	pop	{r4, r5, r6, pc}
        target.values[plane.axis_linear] = offset.values[plane.axis_linear];
 802254a:	4b4d      	ldr	r3, [pc, #308]	@ (8022680 <execute_probe+0x1a8>)
 802254c:	789b      	ldrb	r3, [r3, #2]
 802254e:	aa0e      	add	r2, sp, #56	@ 0x38
 8022550:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8022554:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 8022558:	484a      	ldr	r0, [pc, #296]	@ (8022684 <execute_probe+0x1ac>)
 802255a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802255e:	601a      	str	r2, [r3, #0]
        ok = mc_line(target.values, &plan_data);
 8022560:	a901      	add	r1, sp, #4
 8022562:	f7f1 fb5b 	bl	8013c1c <mc_line>
        if(ok && probe_toolsetter)
 8022566:	4605      	mov	r5, r0
 8022568:	b158      	cbz	r0, 8022582 <execute_probe+0xaa>
 802256a:	4b47      	ldr	r3, [pc, #284]	@ (8022688 <execute_probe+0x1b0>)
 802256c:	781b      	ldrb	r3, [r3, #0]
 802256e:	b143      	cbz	r3, 8022582 <execute_probe+0xaa>
            grbl.on_probe_toolsetter(next_tool, NULL, true, true);
 8022570:	4b46      	ldr	r3, [pc, #280]	@ (802268c <execute_probe+0x1b4>)
 8022572:	f8d3 609c 	ldr.w	r6, [r3, #156]	@ 0x9c
 8022576:	2301      	movs	r3, #1
 8022578:	461a      	mov	r2, r3
 802257a:	2100      	movs	r1, #0
 802257c:	4844      	ldr	r0, [pc, #272]	@ (8022690 <execute_probe+0x1b8>)
 802257e:	6800      	ldr	r0, [r0, #0]
 8022580:	47b0      	blx	r6
        plan_data.feed_rate = settings.tool_change.seek_rate;
 8022582:	4b44      	ldr	r3, [pc, #272]	@ (8022694 <execute_probe+0x1bc>)
 8022584:	6a1b      	ldr	r3, [r3, #32]
 8022586:	9301      	str	r3, [sp, #4]
        plan_data.condition.value = 0;
 8022588:	2300      	movs	r3, #0
 802258a:	9306      	str	r3, [sp, #24]
        plan_data.spindle.state.value = 0;
 802258c:	f88d 300c 	strb.w	r3, [sp, #12]
        set_probe_target(&target, plane.axis_linear);
 8022590:	4b3b      	ldr	r3, [pc, #236]	@ (8022680 <execute_probe+0x1a8>)
 8022592:	7899      	ldrb	r1, [r3, #2]
 8022594:	483b      	ldr	r0, [pc, #236]	@ (8022684 <execute_probe+0x1ac>)
 8022596:	f7ff fd8b 	bl	80220b0 <set_probe_target>
        if((ok = ok && mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found))
 802259a:	b135      	cbz	r5, 80225aa <execute_probe+0xd2>
 802259c:	4622      	mov	r2, r4
 802259e:	a901      	add	r1, sp, #4
 80225a0:	4838      	ldr	r0, [pc, #224]	@ (8022684 <execute_probe+0x1ac>)
 80225a2:	f7f2 fa49 	bl	8014a38 <mc_probe_cycle>
 80225a6:	2801      	cmp	r0, #1
 80225a8:	d002      	beq.n	80225b0 <execute_probe+0xd8>
    change_completed();
 80225aa:	f7ff fd2f 	bl	802200c <change_completed>
    if(ok)
 80225ae:	e7ca      	b.n	8022546 <execute_probe+0x6e>
            system_convert_array_steps_to_mpos(target.values, sys.probe_position);
 80225b0:	4d34      	ldr	r5, [pc, #208]	@ (8022684 <execute_probe+0x1ac>)
 80225b2:	4939      	ldr	r1, [pc, #228]	@ (8022698 <execute_probe+0x1c0>)
 80225b4:	4628      	mov	r0, r5
 80225b6:	f7ff fbe1 	bl	8021d7c <system_convert_array_steps_to_mpos>
            plan_data.feed_rate = settings.tool_change.pulloff_rate;
 80225ba:	4b36      	ldr	r3, [pc, #216]	@ (8022694 <execute_probe+0x1bc>)
 80225bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80225be:	9301      	str	r3, [sp, #4]
            target.values[plane.axis_linear] += TOOL_CHANGE_PROBE_RETRACT_DISTANCE;
 80225c0:	4b2f      	ldr	r3, [pc, #188]	@ (8022680 <execute_probe+0x1a8>)
 80225c2:	789b      	ldrb	r3, [r3, #2]
 80225c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80225c8:	edd3 7a00 	vldr	s15, [r3]
 80225cc:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80225d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80225d4:	edc3 7a00 	vstr	s15, [r3]
            if((ok = mc_line(target.values, &plan_data))) {
 80225d8:	a901      	add	r1, sp, #4
 80225da:	4628      	mov	r0, r5
 80225dc:	f7f1 fb1e 	bl	8013c1c <mc_line>
 80225e0:	2800      	cmp	r0, #0
 80225e2:	d0e2      	beq.n	80225aa <execute_probe+0xd2>
                plan_data.feed_rate = settings.tool_change.feed_rate;
 80225e4:	4b2b      	ldr	r3, [pc, #172]	@ (8022694 <execute_probe+0x1bc>)
 80225e6:	69db      	ldr	r3, [r3, #28]
 80225e8:	9301      	str	r3, [sp, #4]
                target.values[plane.axis_linear] -= (TOOL_CHANGE_PROBE_RETRACT_DISTANCE + 2.0f);
 80225ea:	4b25      	ldr	r3, [pc, #148]	@ (8022680 <execute_probe+0x1a8>)
 80225ec:	789b      	ldrb	r3, [r3, #2]
 80225ee:	4628      	mov	r0, r5
 80225f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80225f4:	edd3 7a00 	vldr	s15, [r3]
 80225f8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80225fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022600:	edc3 7a00 	vstr	s15, [r3]
                ok = mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found;
 8022604:	4622      	mov	r2, r4
 8022606:	a901      	add	r1, sp, #4
 8022608:	f7f2 fa16 	bl	8014a38 <mc_probe_cycle>
        if(ok) {
 802260c:	2801      	cmp	r0, #1
 802260e:	d1cc      	bne.n	80225aa <execute_probe+0xd2>
            if(!(sys.tlo_reference_set.mask & bit(plane.axis_linear))) {
 8022610:	4b22      	ldr	r3, [pc, #136]	@ (802269c <execute_probe+0x1c4>)
 8022612:	79db      	ldrb	r3, [r3, #7]
 8022614:	4a1a      	ldr	r2, [pc, #104]	@ (8022680 <execute_probe+0x1a8>)
 8022616:	7891      	ldrb	r1, [r2, #2]
 8022618:	fa23 f201 	lsr.w	r2, r3, r1
 802261c:	f012 0f01 	tst.w	r2, #1
 8022620:	d121      	bne.n	8022666 <execute_probe+0x18e>
                sys.tlo_reference[plane.axis_linear] = sys.probe_position[plane.axis_linear];
 8022622:	4a1e      	ldr	r2, [pc, #120]	@ (802269c <execute_probe+0x1c4>)
 8022624:	f101 000e 	add.w	r0, r1, #14
 8022628:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 802262c:	1c88      	adds	r0, r1, #2
 802262e:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
                sys.tlo_reference_set.mask |= bit(plane.axis_linear);
 8022632:	2001      	movs	r0, #1
 8022634:	4088      	lsls	r0, r1
 8022636:	4303      	orrs	r3, r0
 8022638:	71d3      	strb	r3, [r2, #7]
                system_add_rt_report(Report_TLOReference);
 802263a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 802263e:	f7ff fc41 	bl	8021ec4 <system_add_rt_report>
                grbl.report.feedback_message(Message_ReferenceTLOEstablished);
 8022642:	4b12      	ldr	r3, [pc, #72]	@ (802268c <execute_probe+0x1b4>)
 8022644:	68db      	ldr	r3, [r3, #12]
 8022646:	200f      	movs	r0, #15
 8022648:	4798      	blx	r3
            ok = restore();
 802264a:	f7ff fe91 	bl	8022370 <restore>
 802264e:	4604      	mov	r4, r0
    change_completed();
 8022650:	f7ff fcdc 	bl	802200c <change_completed>
    if(ok)
 8022654:	2c00      	cmp	r4, #0
 8022656:	f43f af76 	beq.w	8022546 <execute_probe+0x6e>
        system_set_exec_state_flag(EXEC_CYCLE_START);
 802265a:	4b11      	ldr	r3, [pc, #68]	@ (80226a0 <execute_probe+0x1c8>)
 802265c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802265e:	2102      	movs	r1, #2
 8022660:	4810      	ldr	r0, [pc, #64]	@ (80226a4 <execute_probe+0x1cc>)
 8022662:	4798      	blx	r3
}
 8022664:	e76f      	b.n	8022546 <execute_probe+0x6e>
                                    sys.probe_position[plane.axis_linear] - sys.tlo_reference[plane.axis_linear]);
 8022666:	4b0d      	ldr	r3, [pc, #52]	@ (802269c <execute_probe+0x1c4>)
 8022668:	f101 020e 	add.w	r2, r1, #14
 802266c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8022670:	1c88      	adds	r0, r1, #2
 8022672:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
                gc_set_tool_offset(ToolLengthOffset_EnableDynamic, plane.axis_linear,
 8022676:	1ad2      	subs	r2, r2, r3
 8022678:	2002      	movs	r0, #2
 802267a:	f7ea fea7 	bl	800d3cc <gc_set_tool_offset>
 802267e:	e7e4      	b.n	802264a <execute_probe+0x172>
 8022680:	200030a4 	.word	0x200030a4
 8022684:	20003098 	.word	0x20003098
 8022688:	200030c9 	.word	0x200030c9
 802268c:	20001c78 	.word	0x20001c78
 8022690:	200030a8 	.word	0x200030a8
 8022694:	200024a8 	.word	0x200024a8
 8022698:	20001da8 	.word	0x20001da8
 802269c:	20001d70 	.word	0x20001d70
 80226a0:	20001a90 	.word	0x20001a90
 80226a4:	20001db8 	.word	0x20001db8

080226a8 <tool_change>:

// Start a tool change sequence. Called by gcode.c on a M6 command (via HAL).
static status_code_t tool_change (parser_state_t *parser_state)
{
    if(next_tool == NULL)
 80226a8:	4b6f      	ldr	r3, [pc, #444]	@ (8022868 <tool_change+0x1c0>)
 80226aa:	681b      	ldr	r3, [r3, #0]
 80226ac:	2b00      	cmp	r3, #0
 80226ae:	f000 80cd 	beq.w	802284c <tool_change+0x1a4>
{
 80226b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80226b4:	b08b      	sub	sp, #44	@ 0x2c
 80226b6:	4604      	mov	r4, r0
        return Status_GCodeToolError;

    if(current_tool.tool_id == next_tool->tool_id)
 80226b8:	4a6c      	ldr	r2, [pc, #432]	@ (802286c <tool_change+0x1c4>)
 80226ba:	6912      	ldr	r2, [r2, #16]
 80226bc:	691b      	ldr	r3, [r3, #16]
 80226be:	429a      	cmp	r2, r3
 80226c0:	f000 80c6 	beq.w	8022850 <tool_change+0x1a8>
  #else
    plane.axis_0 = X_AXIS;
    plane.axis_1 = Y_AXIS;
  #endif
#else
    gc_get_plane_data(&plane, parser_state->modal.plane_select);
 80226c4:	7981      	ldrb	r1, [r0, #6]
 80226c6:	486a      	ldr	r0, [pc, #424]	@ (8022870 <tool_change+0x1c8>)
 80226c8:	f7ea fee6 	bl	800d498 <gc_get_plane_data>
#endif

    uint8_t homed_req = settings.tool_change.mode == ToolChange_Manual ? bit(plane.axis_linear) : (X_AXIS_BIT|Y_AXIS_BIT|Z_AXIS_BIT);
 80226cc:	4b69      	ldr	r3, [pc, #420]	@ (8022874 <tool_change+0x1cc>)
 80226ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80226d2:	2b01      	cmp	r3, #1
 80226d4:	d07b      	beq.n	80227ce <tool_change+0x126>
 80226d6:	2207      	movs	r2, #7

    if((sys.homed.mask & homed_req) != homed_req)
 80226d8:	4967      	ldr	r1, [pc, #412]	@ (8022878 <tool_change+0x1d0>)
 80226da:	f891 1054 	ldrb.w	r1, [r1, #84]	@ 0x54
 80226de:	438a      	bics	r2, r1
 80226e0:	f040 80b9 	bne.w	8022856 <tool_change+0x1ae>
        return Status_HomingRequired;

    if(settings.tool_change.mode != ToolChange_SemiAutomatic)
 80226e4:	2b03      	cmp	r3, #3
 80226e6:	d003      	beq.n	80226f0 <tool_change+0x48>
        grbl.on_probe_completed = on_probe_completed;
 80226e8:	4a64      	ldr	r2, [pc, #400]	@ (802287c <tool_change+0x1d4>)
 80226ea:	4965      	ldr	r1, [pc, #404]	@ (8022880 <tool_change+0x1d8>)
 80226ec:	f8c2 10a4 	str.w	r1, [r2, #164]	@ 0xa4

    block_cycle_start = settings.tool_change.mode != ToolChange_SemiAutomatic;
 80226f0:	3b03      	subs	r3, #3
 80226f2:	bf18      	it	ne
 80226f4:	2301      	movne	r3, #1
 80226f6:	4a63      	ldr	r2, [pc, #396]	@ (8022884 <tool_change+0x1dc>)
 80226f8:	7013      	strb	r3, [r2, #0]

    // Stop spindle and coolant.
    spindle_all_off();
 80226fa:	f7fc f9a1 	bl	801ea40 <spindle_all_off>
    hal.coolant.set_state((coolant_state_t){0});
 80226fe:	4b62      	ldr	r3, [pc, #392]	@ (8022888 <tool_change+0x1e0>)
 8022700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8022702:	2500      	movs	r5, #0
 8022704:	4628      	mov	r0, r5
 8022706:	4798      	blx	r3

    execute_posted = false;
 8022708:	4b60      	ldr	r3, [pc, #384]	@ (802288c <tool_change+0x1e4>)
 802270a:	701d      	strb	r5, [r3, #0]
    probe_toolsetter = grbl.on_probe_toolsetter != NULL &&
 802270c:	4b5b      	ldr	r3, [pc, #364]	@ (802287c <tool_change+0x1d4>)
 802270e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8022712:	2b00      	cmp	r3, #0
 8022714:	d061      	beq.n	80227da <tool_change+0x132>
                       (settings.tool_change.mode == ToolChange_Manual ||
 8022716:	4b57      	ldr	r3, [pc, #348]	@ (8022874 <tool_change+0x1cc>)
 8022718:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
                         settings.tool_change.mode == ToolChange_Manual_G59_3 ||
 802271c:	3b01      	subs	r3, #1
 802271e:	b2db      	uxtb	r3, r3
    probe_toolsetter = grbl.on_probe_toolsetter != NULL &&
 8022720:	2b02      	cmp	r3, #2
 8022722:	d95c      	bls.n	80227de <tool_change+0x136>
 8022724:	462a      	mov	r2, r5
 8022726:	4b5a      	ldr	r3, [pc, #360]	@ (8022890 <tool_change+0x1e8>)
 8022728:	701a      	strb	r2, [r3, #0]
                          settings.tool_change.mode == ToolChange_SemiAutomatic);

    // Save current position.
    system_convert_array_steps_to_mpos(previous.values, sys.position);
 802272a:	4d5a      	ldr	r5, [pc, #360]	@ (8022894 <tool_change+0x1ec>)
 802272c:	4e5a      	ldr	r6, [pc, #360]	@ (8022898 <tool_change+0x1f0>)
 802272e:	4629      	mov	r1, r5
 8022730:	4630      	mov	r0, r6
 8022732:	f7ff fb23 	bl	8021d7c <system_convert_array_steps_to_mpos>

    // Establish axis assignments.

    previous.values[plane.axis_linear] -= gc_get_offset(plane.axis_linear, false);
 8022736:	4f4e      	ldr	r7, [pc, #312]	@ (8022870 <tool_change+0x1c8>)
 8022738:	2100      	movs	r1, #0
 802273a:	78b8      	ldrb	r0, [r7, #2]
 802273c:	f7ea fe06 	bl	800d34c <gc_get_offset>
 8022740:	78bb      	ldrb	r3, [r7, #2]
 8022742:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8022746:	edd3 7a00 	vldr	s15, [r3]
 802274a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802274e:	edc3 7a00 	vstr	s15, [r3]

    plan_line_data_t plan_data;

    plan_data_init(&plan_data);
 8022752:	4668      	mov	r0, sp
 8022754:	f7f4 fbc4 	bl	8016ee0 <plan_data_init>
    plan_data.condition.rapid_motion = On;
 8022758:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802275c:	f043 0301 	orr.w	r3, r3, #1
 8022760:	f88d 3014 	strb.w	r3, [sp, #20]
    // TODO: add?
    //if(!settings.homing.flags.force_set_origin && bit_istrue(settings.homing.dir_mask.value, bit(plane.axis_linear)))
    //    tool_change_position = ?
    //else

    tool_change_position = sys.home_position[plane.axis_linear]; // - settings.homing.flags.force_set_origin ? LINEAR_AXIS_HOME_OFFSET : 0.0f;
 8022764:	f897 c002 	ldrb.w	ip, [r7, #2]
 8022768:	3d88      	subs	r5, #136	@ 0x88
 802276a:	f10c 0316 	add.w	r3, ip, #22
 802276e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8022772:	682d      	ldr	r5, [r5, #0]
 8022774:	4b49      	ldr	r3, [pc, #292]	@ (802289c <tool_change+0x1f4>)
 8022776:	601d      	str	r5, [r3, #0]

    // Rapid to home position of linear axis.
    memcpy(&target, &previous, sizeof(coord_data_t));
 8022778:	4b49      	ldr	r3, [pc, #292]	@ (80228a0 <tool_change+0x1f8>)
 802277a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 802277e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    target.values[plane.axis_linear] = tool_change_position;
 8022782:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8022786:	f8cc 5000 	str.w	r5, [ip]
    if(!mc_line(target.values, &plan_data))
 802278a:	4669      	mov	r1, sp
 802278c:	4618      	mov	r0, r3
 802278e:	f7f1 fa45 	bl	8013c1c <mc_line>
 8022792:	2800      	cmp	r0, #0
 8022794:	d061      	beq.n	802285a <tool_change+0x1b2>
        return Status_Reset;

#if COMPATIBILITY_LEVEL <= 1
    if(settings.tool_change.mode == ToolChange_Manual_G59_3) {
 8022796:	4b37      	ldr	r3, [pc, #220]	@ (8022874 <tool_change+0x1cc>)
 8022798:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 802279c:	2b02      	cmp	r3, #2
 802279e:	d020      	beq.n	80227e2 <tool_change+0x13a>
        if(probe_toolsetter)
            grbl.on_probe_toolsetter(next_tool, NULL, true, true);
    }
#endif

    protocol_buffer_synchronize();
 80227a0:	f7f5 fb38 	bl	8017e14 <protocol_buffer_synchronize>
    sync_position();
 80227a4:	f7f4 fb26 	bl	8016df4 <plan_sync_position>
 80227a8:	4d3a      	ldr	r5, [pc, #232]	@ (8022894 <tool_change+0x1ec>)
 80227aa:	4629      	mov	r1, r5
 80227ac:	483d      	ldr	r0, [pc, #244]	@ (80228a4 <tool_change+0x1fc>)
 80227ae:	f7ff fae5 	bl	8021d7c <system_convert_array_steps_to_mpos>

    // Enter tool change mode, waits for cycle start to continue.
    parser_state->tool_change = true;
 80227b2:	2301      	movs	r3, #1
 80227b4:	f884 307f 	strb.w	r3, [r4, #127]	@ 0x7f
    system_set_exec_state_flag(EXEC_TOOL_CHANGE);   // Set up program pause for manual tool change
 80227b8:	4b33      	ldr	r3, [pc, #204]	@ (8022888 <tool_change+0x1e0>)
 80227ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80227bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80227c0:	f1a5 0040 	sub.w	r0, r5, #64	@ 0x40
 80227c4:	4798      	blx	r3
    protocol_execute_realtime();                    // Execute...
 80227c6:	f7f5 f857 	bl	8017878 <protocol_execute_realtime>

    return Status_OK;
 80227ca:	2000      	movs	r0, #0
 80227cc:	e041      	b.n	8022852 <tool_change+0x1aa>
    uint8_t homed_req = settings.tool_change.mode == ToolChange_Manual ? bit(plane.axis_linear) : (X_AXIS_BIT|Y_AXIS_BIT|Z_AXIS_BIT);
 80227ce:	4a28      	ldr	r2, [pc, #160]	@ (8022870 <tool_change+0x1c8>)
 80227d0:	7891      	ldrb	r1, [r2, #2]
 80227d2:	2201      	movs	r2, #1
 80227d4:	408a      	lsls	r2, r1
 80227d6:	b2d2      	uxtb	r2, r2
 80227d8:	e77e      	b.n	80226d8 <tool_change+0x30>
    probe_toolsetter = grbl.on_probe_toolsetter != NULL &&
 80227da:	2200      	movs	r2, #0
 80227dc:	e7a3      	b.n	8022726 <tool_change+0x7e>
 80227de:	2201      	movs	r2, #1
 80227e0:	e7a1      	b.n	8022726 <tool_change+0x7e>
        settings_read_coord_data(CoordinateSystem_G59_3, &target.values);
 80227e2:	4d2f      	ldr	r5, [pc, #188]	@ (80228a0 <tool_change+0x1f8>)
 80227e4:	4629      	mov	r1, r5
 80227e6:	2008      	movs	r0, #8
 80227e8:	f7fa ff54 	bl	801d694 <settings_read_coord_data>
        float tmp_pos = target.values[plane.axis_linear];
 80227ec:	78bb      	ldrb	r3, [r7, #2]
 80227ee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80227f2:	682e      	ldr	r6, [r5, #0]
        target.values[plane.axis_linear] = tool_change_position;
 80227f4:	4b29      	ldr	r3, [pc, #164]	@ (802289c <tool_change+0x1f4>)
 80227f6:	681b      	ldr	r3, [r3, #0]
 80227f8:	602b      	str	r3, [r5, #0]
        if(probe_toolsetter)
 80227fa:	4b25      	ldr	r3, [pc, #148]	@ (8022890 <tool_change+0x1e8>)
 80227fc:	781b      	ldrb	r3, [r3, #0]
 80227fe:	b143      	cbz	r3, 8022812 <tool_change+0x16a>
            grbl.on_probe_toolsetter(next_tool, &target, false, true);
 8022800:	4b1e      	ldr	r3, [pc, #120]	@ (802287c <tool_change+0x1d4>)
 8022802:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 8022806:	2301      	movs	r3, #1
 8022808:	2200      	movs	r2, #0
 802280a:	4925      	ldr	r1, [pc, #148]	@ (80228a0 <tool_change+0x1f8>)
 802280c:	4816      	ldr	r0, [pc, #88]	@ (8022868 <tool_change+0x1c0>)
 802280e:	6800      	ldr	r0, [r0, #0]
 8022810:	47a8      	blx	r5
        if(!mc_line(target.values, &plan_data))
 8022812:	4669      	mov	r1, sp
 8022814:	4822      	ldr	r0, [pc, #136]	@ (80228a0 <tool_change+0x1f8>)
 8022816:	f7f1 fa01 	bl	8013c1c <mc_line>
 802281a:	b300      	cbz	r0, 802285e <tool_change+0x1b6>
        target.values[plane.axis_linear] = tmp_pos;
 802281c:	4b14      	ldr	r3, [pc, #80]	@ (8022870 <tool_change+0x1c8>)
 802281e:	789b      	ldrb	r3, [r3, #2]
 8022820:	481f      	ldr	r0, [pc, #124]	@ (80228a0 <tool_change+0x1f8>)
 8022822:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8022826:	601e      	str	r6, [r3, #0]
        if(!mc_line(target.values, &plan_data))
 8022828:	4669      	mov	r1, sp
 802282a:	f7f1 f9f7 	bl	8013c1c <mc_line>
 802282e:	b1c0      	cbz	r0, 8022862 <tool_change+0x1ba>
        if(probe_toolsetter)
 8022830:	4b17      	ldr	r3, [pc, #92]	@ (8022890 <tool_change+0x1e8>)
 8022832:	781b      	ldrb	r3, [r3, #0]
 8022834:	2b00      	cmp	r3, #0
 8022836:	d0b3      	beq.n	80227a0 <tool_change+0xf8>
            grbl.on_probe_toolsetter(next_tool, NULL, true, true);
 8022838:	4b10      	ldr	r3, [pc, #64]	@ (802287c <tool_change+0x1d4>)
 802283a:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 802283e:	2301      	movs	r3, #1
 8022840:	461a      	mov	r2, r3
 8022842:	2100      	movs	r1, #0
 8022844:	4808      	ldr	r0, [pc, #32]	@ (8022868 <tool_change+0x1c0>)
 8022846:	6800      	ldr	r0, [r0, #0]
 8022848:	47a8      	blx	r5
 802284a:	e7a9      	b.n	80227a0 <tool_change+0xf8>
        return Status_GCodeToolError;
 802284c:	202f      	movs	r0, #47	@ 0x2f
}
 802284e:	4770      	bx	lr
        return Status_OK;
 8022850:	2000      	movs	r0, #0
}
 8022852:	b00b      	add	sp, #44	@ 0x2c
 8022854:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return Status_HomingRequired;
 8022856:	202e      	movs	r0, #46	@ 0x2e
 8022858:	e7fb      	b.n	8022852 <tool_change+0x1aa>
        return Status_Reset;
 802285a:	2012      	movs	r0, #18
 802285c:	e7f9      	b.n	8022852 <tool_change+0x1aa>
            return Status_Reset;
 802285e:	2012      	movs	r0, #18
 8022860:	e7f7      	b.n	8022852 <tool_change+0x1aa>
            return Status_Reset;
 8022862:	2012      	movs	r0, #18
 8022864:	e7f5      	b.n	8022852 <tool_change+0x1aa>
 8022866:	bf00      	nop
 8022868:	200030a8 	.word	0x200030a8
 802286c:	200030ac 	.word	0x200030ac
 8022870:	200030a4 	.word	0x200030a4
 8022874:	200024a8 	.word	0x200024a8
 8022878:	20001d70 	.word	0x20001d70
 802287c:	20001c78 	.word	0x20001c78
 8022880:	08022169 	.word	0x08022169
 8022884:	200030ca 	.word	0x200030ca
 8022888:	20001a90 	.word	0x20001a90
 802288c:	200030c8 	.word	0x200030c8
 8022890:	200030c9 	.word	0x200030c9
 8022894:	20001df8 	.word	0x20001df8
 8022898:	2000308c 	.word	0x2000308c
 802289c:	200030c0 	.word	0x200030c0
 80228a0:	20003098 	.word	0x20003098
 80228a4:	20001830 	.word	0x20001830

080228a8 <tc_init>:

// Claim HAL tool change entry points and clear current tool offsets.
// TODO: change to survive a warm reset?
void tc_init (void)
{
 80228a8:	b508      	push	{r3, lr}
    static bool on_homing_subscribed = false;

    if(hal.driver_cap.atc) // Do not override driver tool change implementation!
 80228aa:	4b29      	ldr	r3, [pc, #164]	@ (8022950 <tc_init+0xa8>)
 80228ac:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 80228b0:	f013 0f02 	tst.w	r3, #2
 80228b4:	d14a      	bne.n	802294c <tc_init+0xa4>
        return;

    if(!hal.stream.suspend_read) // Tool change requires support for suspending input stream.
 80228b6:	4b26      	ldr	r3, [pc, #152]	@ (8022950 <tc_init+0xa8>)
 80228b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80228bc:	2b00      	cmp	r3, #0
 80228be:	d045      	beq.n	802294c <tc_init+0xa4>
        return;

    if(sys.tlo_reference_set.mask != 0) {
 80228c0:	4b24      	ldr	r3, [pc, #144]	@ (8022954 <tc_init+0xac>)
 80228c2:	79db      	ldrb	r3, [r3, #7]
 80228c4:	2b00      	cmp	r3, #0
 80228c6:	d130      	bne.n	802292a <tc_init+0x82>
        sys.tlo_reference_set.mask = 0;
        system_add_rt_report(Report_TLOReference);
    }

    gc_set_tool_offset(ToolLengthOffset_Cancel, 0, 0.0f);
 80228c8:	2200      	movs	r2, #0
 80228ca:	4611      	mov	r1, r2
 80228cc:	4610      	mov	r0, r2
 80228ce:	f7ea fd7d 	bl	800d3cc <gc_set_tool_offset>

    if(settings.tool_change.mode == ToolChange_Disabled || settings.tool_change.mode == ToolChange_Ignore) {
 80228d2:	4b21      	ldr	r3, [pc, #132]	@ (8022958 <tc_init+0xb0>)
 80228d4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80228d8:	2b00      	cmp	r3, #0
 80228da:	d02e      	beq.n	802293a <tc_init+0x92>
 80228dc:	2b04      	cmp	r3, #4
 80228de:	d02c      	beq.n	802293a <tc_init+0x92>
        hal.tool.select = NULL;
        hal.tool.change = NULL;
        grbl.on_toolchange_ack = NULL;
    } else {
        hal.tool.select = tool_select;
 80228e0:	4b1b      	ldr	r3, [pc, #108]	@ (8022950 <tc_init+0xa8>)
 80228e2:	4a1e      	ldr	r2, [pc, #120]	@ (802295c <tc_init+0xb4>)
 80228e4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
        hal.tool.change = tool_change;
 80228e8:	4a1d      	ldr	r2, [pc, #116]	@ (8022960 <tc_init+0xb8>)
 80228ea:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        grbl.on_toolchange_ack = on_toolchange_ack;
 80228ee:	4b1d      	ldr	r3, [pc, #116]	@ (8022964 <tc_init+0xbc>)
 80228f0:	4a1d      	ldr	r2, [pc, #116]	@ (8022968 <tc_init+0xc0>)
 80228f2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        if(!on_homing_subscribed) {
 80228f6:	4b1d      	ldr	r3, [pc, #116]	@ (802296c <tc_init+0xc4>)
 80228f8:	781b      	ldrb	r3, [r3, #0]
 80228fa:	b953      	cbnz	r3, 8022912 <tc_init+0x6a>
            on_homing_subscribed = true;
 80228fc:	4b1b      	ldr	r3, [pc, #108]	@ (802296c <tc_init+0xc4>)
 80228fe:	2201      	movs	r2, #1
 8022900:	701a      	strb	r2, [r3, #0]
            on_homing_completed = grbl.on_homing_completed;
 8022902:	4b18      	ldr	r3, [pc, #96]	@ (8022964 <tc_init+0xbc>)
 8022904:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8022908:	4a19      	ldr	r2, [pc, #100]	@ (8022970 <tc_init+0xc8>)
 802290a:	6011      	str	r1, [r2, #0]
            grbl.on_homing_completed = tc_on_homing_complete;
 802290c:	4a19      	ldr	r2, [pc, #100]	@ (8022974 <tc_init+0xcc>)
 802290e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        }
        if(driver_reset == NULL) {
 8022912:	4b19      	ldr	r3, [pc, #100]	@ (8022978 <tc_init+0xd0>)
 8022914:	681b      	ldr	r3, [r3, #0]
 8022916:	b9cb      	cbnz	r3, 802294c <tc_init+0xa4>
            driver_reset = hal.driver_reset;
 8022918:	4b0d      	ldr	r3, [pc, #52]	@ (8022950 <tc_init+0xa8>)
 802291a:	f8d3 1170 	ldr.w	r1, [r3, #368]	@ 0x170
 802291e:	4a16      	ldr	r2, [pc, #88]	@ (8022978 <tc_init+0xd0>)
 8022920:	6011      	str	r1, [r2, #0]
            hal.driver_reset = reset;
 8022922:	4a16      	ldr	r2, [pc, #88]	@ (802297c <tc_init+0xd4>)
 8022924:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
 8022928:	e010      	b.n	802294c <tc_init+0xa4>
        sys.tlo_reference_set.mask = 0;
 802292a:	4b0a      	ldr	r3, [pc, #40]	@ (8022954 <tc_init+0xac>)
 802292c:	2200      	movs	r2, #0
 802292e:	71da      	strb	r2, [r3, #7]
        system_add_rt_report(Report_TLOReference);
 8022930:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8022934:	f7ff fac6 	bl	8021ec4 <system_add_rt_report>
 8022938:	e7c6      	b.n	80228c8 <tc_init+0x20>
        hal.tool.select = NULL;
 802293a:	4a05      	ldr	r2, [pc, #20]	@ (8022950 <tc_init+0xa8>)
 802293c:	2300      	movs	r3, #0
 802293e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
        hal.tool.change = NULL;
 8022942:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
        grbl.on_toolchange_ack = NULL;
 8022946:	4a07      	ldr	r2, [pc, #28]	@ (8022964 <tc_init+0xbc>)
 8022948:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
        }
    }
}
 802294c:	bd08      	pop	{r3, pc}
 802294e:	bf00      	nop
 8022950:	20001a90 	.word	0x20001a90
 8022954:	20001d70 	.word	0x20001d70
 8022958:	200024a8 	.word	0x200024a8
 802295c:	0802222d 	.word	0x0802222d
 8022960:	080226a9 	.word	0x080226a9
 8022964:	20001c78 	.word	0x20001c78
 8022968:	08022139 	.word	0x08022139
 802296c:	20003078 	.word	0x20003078
 8022970:	2000307c 	.word	0x2000307c
 8022974:	08022255 	.word	0x08022255
 8022978:	20003088 	.word	0x20003088
 802297c:	080221b5 	.word	0x080221b5

08022980 <tc_probe_workpiece>:
// Perform a probe cycle: set tool length offset and restart job if successful.
// Note: tool length offset is set by the on_probe_completed event handler.
// Called by the $TPW system command.
status_code_t tc_probe_workpiece (void)
{
    if(!(settings.tool_change.mode == ToolChange_Manual || settings.tool_change.mode == ToolChange_Manual_G59_3) || enqueue_realtime_command == NULL)
 8022980:	4b5d      	ldr	r3, [pc, #372]	@ (8022af8 <tc_probe_workpiece+0x178>)
 8022982:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8022986:	3b01      	subs	r3, #1
 8022988:	b2db      	uxtb	r3, r3
 802298a:	2b01      	cmp	r3, #1
 802298c:	f200 80ad 	bhi.w	8022aea <tc_probe_workpiece+0x16a>
 8022990:	4b5a      	ldr	r3, [pc, #360]	@ (8022afc <tc_probe_workpiece+0x17c>)
 8022992:	681b      	ldr	r3, [r3, #0]
 8022994:	2b00      	cmp	r3, #0
 8022996:	f000 80aa 	beq.w	8022aee <tc_probe_workpiece+0x16e>
{
 802299a:	b530      	push	{r4, r5, lr}
 802299c:	b08b      	sub	sp, #44	@ 0x2c
    bool ok;
    gc_parser_flags_t flags = {0};
    plan_line_data_t plan_data;

#if COMPATIBILITY_LEVEL <= 1
    if(probe_toolsetter)
 802299e:	4b58      	ldr	r3, [pc, #352]	@ (8022b00 <tc_probe_workpiece+0x180>)
 80229a0:	781b      	ldrb	r3, [r3, #0]
 80229a2:	b9fb      	cbnz	r3, 80229e4 <tc_probe_workpiece+0x64>
        grbl.on_probe_toolsetter(next_tool, NULL, system_xy_at_fixture(CoordinateSystem_G59_3, TOOLSETTER_RADIUS), true);
#endif

    // Get current position.
    system_convert_array_steps_to_mpos(target.values, sys.position);
 80229a4:	4c57      	ldr	r4, [pc, #348]	@ (8022b04 <tc_probe_workpiece+0x184>)
 80229a6:	4958      	ldr	r1, [pc, #352]	@ (8022b08 <tc_probe_workpiece+0x188>)
 80229a8:	4620      	mov	r0, r4
 80229aa:	f7ff f9e7 	bl	8021d7c <system_convert_array_steps_to_mpos>

    flags.probe_is_no_error = On;
 80229ae:	2510      	movs	r5, #16

    plan_data_init(&plan_data);
 80229b0:	4668      	mov	r0, sp
 80229b2:	f7f4 fa95 	bl	8016ee0 <plan_data_init>
    plan_data.feed_rate = settings.tool_change.seek_rate;
 80229b6:	4b50      	ldr	r3, [pc, #320]	@ (8022af8 <tc_probe_workpiece+0x178>)
 80229b8:	6a1b      	ldr	r3, [r3, #32]
 80229ba:	9300      	str	r3, [sp, #0]

    set_probe_target(&target, plane.axis_linear);
 80229bc:	4b53      	ldr	r3, [pc, #332]	@ (8022b0c <tc_probe_workpiece+0x18c>)
 80229be:	7899      	ldrb	r1, [r3, #2]
 80229c0:	4620      	mov	r0, r4
 80229c2:	f7ff fb75 	bl	80220b0 <set_probe_target>

    if((ok = mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found))
 80229c6:	462a      	mov	r2, r5
 80229c8:	4669      	mov	r1, sp
 80229ca:	4620      	mov	r0, r4
 80229cc:	f7f2 f834 	bl	8014a38 <mc_probe_cycle>
 80229d0:	2801      	cmp	r0, #1
 80229d2:	bf0c      	ite	eq
 80229d4:	2401      	moveq	r4, #1
 80229d6:	2400      	movne	r4, #0
 80229d8:	d014      	beq.n	8022a04 <tc_probe_workpiece+0x84>
                ok = mc_line(target.values, &plan_data);
            }
        }
    }

    if(ok && protocol_buffer_synchronize()) {
 80229da:	2c00      	cmp	r4, #0
 80229dc:	d16a      	bne.n	8022ab4 <tc_probe_workpiece+0x134>
        grbl.report.feedback_message(settings.tool_change.mode == ToolChange_Manual_G59_3
                                      ? Message_CycleStart2Continue
                                      : Message_TPCycleStart2Continue);
    }

    return ok ? Status_OK : Status_GCodeToolError;
 80229de:	202f      	movs	r0, #47	@ 0x2f
}
 80229e0:	b00b      	add	sp, #44	@ 0x2c
 80229e2:	bd30      	pop	{r4, r5, pc}
        grbl.on_probe_toolsetter(next_tool, NULL, system_xy_at_fixture(CoordinateSystem_G59_3, TOOLSETTER_RADIUS), true);
 80229e4:	4b4a      	ldr	r3, [pc, #296]	@ (8022b10 <tc_probe_workpiece+0x190>)
 80229e6:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 80229ea:	4b4a      	ldr	r3, [pc, #296]	@ (8022b14 <tc_probe_workpiece+0x194>)
 80229ec:	681d      	ldr	r5, [r3, #0]
 80229ee:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 80229f2:	2008      	movs	r0, #8
 80229f4:	f7ff f9e0 	bl	8021db8 <system_xy_at_fixture>
 80229f8:	4602      	mov	r2, r0
 80229fa:	2301      	movs	r3, #1
 80229fc:	2100      	movs	r1, #0
 80229fe:	4628      	mov	r0, r5
 8022a00:	47a0      	blx	r4
 8022a02:	e7cf      	b.n	80229a4 <tc_probe_workpiece+0x24>
        system_convert_array_steps_to_mpos(target.values, sys.probe_position);
 8022a04:	4c3f      	ldr	r4, [pc, #252]	@ (8022b04 <tc_probe_workpiece+0x184>)
 8022a06:	4944      	ldr	r1, [pc, #272]	@ (8022b18 <tc_probe_workpiece+0x198>)
 8022a08:	4620      	mov	r0, r4
 8022a0a:	f7ff f9b7 	bl	8021d7c <system_convert_array_steps_to_mpos>
        plan_data.feed_rate = settings.tool_change.pulloff_rate;
 8022a0e:	4b3a      	ldr	r3, [pc, #232]	@ (8022af8 <tc_probe_workpiece+0x178>)
 8022a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022a12:	9300      	str	r3, [sp, #0]
        target.values[plane.axis_linear] += TOOL_CHANGE_PROBE_RETRACT_DISTANCE;
 8022a14:	4b3d      	ldr	r3, [pc, #244]	@ (8022b0c <tc_probe_workpiece+0x18c>)
 8022a16:	789b      	ldrb	r3, [r3, #2]
 8022a18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8022a1c:	edd3 7a00 	vldr	s15, [r3]
 8022a20:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8022a24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022a28:	edc3 7a00 	vstr	s15, [r3]
        if((ok = mc_line(target.values, &plan_data))) {
 8022a2c:	4669      	mov	r1, sp
 8022a2e:	4620      	mov	r0, r4
 8022a30:	f7f1 f8f4 	bl	8013c1c <mc_line>
 8022a34:	4604      	mov	r4, r0
 8022a36:	2800      	cmp	r0, #0
 8022a38:	d03f      	beq.n	8022aba <tc_probe_workpiece+0x13a>
            plan_data.feed_rate = settings.tool_change.feed_rate;
 8022a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8022af8 <tc_probe_workpiece+0x178>)
 8022a3c:	69db      	ldr	r3, [r3, #28]
 8022a3e:	9300      	str	r3, [sp, #0]
            target.values[plane.axis_linear] -= (TOOL_CHANGE_PROBE_RETRACT_DISTANCE + 2.0f);
 8022a40:	4b32      	ldr	r3, [pc, #200]	@ (8022b0c <tc_probe_workpiece+0x18c>)
 8022a42:	789b      	ldrb	r3, [r3, #2]
 8022a44:	482f      	ldr	r0, [pc, #188]	@ (8022b04 <tc_probe_workpiece+0x184>)
 8022a46:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8022a4a:	edd3 7a00 	vldr	s15, [r3]
 8022a4e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8022a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022a56:	edc3 7a00 	vstr	s15, [r3]
            if((ok = mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found)) {
 8022a5a:	462a      	mov	r2, r5
 8022a5c:	4669      	mov	r1, sp
 8022a5e:	f7f1 ffeb 	bl	8014a38 <mc_probe_cycle>
 8022a62:	2801      	cmp	r0, #1
 8022a64:	bf0c      	ite	eq
 8022a66:	2401      	moveq	r4, #1
 8022a68:	2400      	movne	r4, #0
 8022a6a:	d1b6      	bne.n	80229da <tc_probe_workpiece+0x5a>
                system_convert_array_steps_to_mpos(target.values, sys.probe_position);
 8022a6c:	4c25      	ldr	r4, [pc, #148]	@ (8022b04 <tc_probe_workpiece+0x184>)
 8022a6e:	492a      	ldr	r1, [pc, #168]	@ (8022b18 <tc_probe_workpiece+0x198>)
 8022a70:	4620      	mov	r0, r4
 8022a72:	f7ff f983 	bl	8021d7c <system_convert_array_steps_to_mpos>
                plan_data.feed_rate = settings.tool_change.seek_rate;
 8022a76:	4b20      	ldr	r3, [pc, #128]	@ (8022af8 <tc_probe_workpiece+0x178>)
 8022a78:	6a1b      	ldr	r3, [r3, #32]
 8022a7a:	9300      	str	r3, [sp, #0]
                target.values[plane.axis_linear] += TOOL_CHANGE_PROBE_RETRACT_DISTANCE * 2.0f;
 8022a7c:	4b23      	ldr	r3, [pc, #140]	@ (8022b0c <tc_probe_workpiece+0x18c>)
 8022a7e:	789b      	ldrb	r3, [r3, #2]
 8022a80:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8022a84:	edd4 7a00 	vldr	s15, [r4]
 8022a88:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8022a8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022a90:	edc4 7a00 	vstr	s15, [r4]
                if(target.values[plane.axis_linear] > tool_change_position)
 8022a94:	4a21      	ldr	r2, [pc, #132]	@ (8022b1c <tc_probe_workpiece+0x19c>)
 8022a96:	ed92 7a00 	vldr	s14, [r2]
 8022a9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022aa2:	dd01      	ble.n	8022aa8 <tc_probe_workpiece+0x128>
                    target.values[plane.axis_linear] = tool_change_position;
 8022aa4:	ed84 7a00 	vstr	s14, [r4]
                ok = mc_line(target.values, &plan_data);
 8022aa8:	4669      	mov	r1, sp
 8022aaa:	4816      	ldr	r0, [pc, #88]	@ (8022b04 <tc_probe_workpiece+0x184>)
 8022aac:	f7f1 f8b6 	bl	8013c1c <mc_line>
 8022ab0:	4604      	mov	r4, r0
 8022ab2:	e792      	b.n	80229da <tc_probe_workpiece+0x5a>
    if(ok && protocol_buffer_synchronize()) {
 8022ab4:	f7f5 f9ae 	bl	8017e14 <protocol_buffer_synchronize>
 8022ab8:	b910      	cbnz	r0, 8022ac0 <tc_probe_workpiece+0x140>
    return ok ? Status_OK : Status_GCodeToolError;
 8022aba:	b1d4      	cbz	r4, 8022af2 <tc_probe_workpiece+0x172>
 8022abc:	2000      	movs	r0, #0
 8022abe:	e78f      	b.n	80229e0 <tc_probe_workpiece+0x60>
        sync_position();
 8022ac0:	f7f4 f998 	bl	8016df4 <plan_sync_position>
 8022ac4:	4910      	ldr	r1, [pc, #64]	@ (8022b08 <tc_probe_workpiece+0x188>)
 8022ac6:	4816      	ldr	r0, [pc, #88]	@ (8022b20 <tc_probe_workpiece+0x1a0>)
 8022ac8:	f7ff f958 	bl	8021d7c <system_convert_array_steps_to_mpos>
        block_cycle_start = false;
 8022acc:	4b15      	ldr	r3, [pc, #84]	@ (8022b24 <tc_probe_workpiece+0x1a4>)
 8022ace:	2200      	movs	r2, #0
 8022ad0:	701a      	strb	r2, [r3, #0]
        grbl.report.feedback_message(settings.tool_change.mode == ToolChange_Manual_G59_3
 8022ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8022b10 <tc_probe_workpiece+0x190>)
 8022ad4:	68db      	ldr	r3, [r3, #12]
 8022ad6:	4a08      	ldr	r2, [pc, #32]	@ (8022af8 <tc_probe_workpiece+0x178>)
 8022ad8:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8022adc:	2a02      	cmp	r2, #2
 8022ade:	d002      	beq.n	8022ae6 <tc_probe_workpiece+0x166>
 8022ae0:	2012      	movs	r0, #18
 8022ae2:	4798      	blx	r3
 8022ae4:	e7e9      	b.n	8022aba <tc_probe_workpiece+0x13a>
 8022ae6:	2011      	movs	r0, #17
 8022ae8:	e7fb      	b.n	8022ae2 <tc_probe_workpiece+0x162>
        return Status_InvalidStatement;
 8022aea:	2003      	movs	r0, #3
 8022aec:	4770      	bx	lr
 8022aee:	2003      	movs	r0, #3
}
 8022af0:	4770      	bx	lr
    return ok ? Status_OK : Status_GCodeToolError;
 8022af2:	202f      	movs	r0, #47	@ 0x2f
 8022af4:	e774      	b.n	80229e0 <tc_probe_workpiece+0x60>
 8022af6:	bf00      	nop
 8022af8:	200024a8 	.word	0x200024a8
 8022afc:	20003084 	.word	0x20003084
 8022b00:	200030c9 	.word	0x200030c9
 8022b04:	20003098 	.word	0x20003098
 8022b08:	20001df8 	.word	0x20001df8
 8022b0c:	200030a4 	.word	0x200030a4
 8022b10:	20001c78 	.word	0x20001c78
 8022b14:	200030a8 	.word	0x200030a8
 8022b18:	20001da8 	.word	0x20001da8
 8022b1c:	200030c0 	.word	0x200030c0
 8022b20:	20001830 	.word	0x20001830
 8022b24:	200030ca 	.word	0x200030ca

08022b28 <__assert_func>:
 8022b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022b2a:	4614      	mov	r4, r2
 8022b2c:	461a      	mov	r2, r3
 8022b2e:	4b09      	ldr	r3, [pc, #36]	@ (8022b54 <__assert_func+0x2c>)
 8022b30:	681b      	ldr	r3, [r3, #0]
 8022b32:	4605      	mov	r5, r0
 8022b34:	68d8      	ldr	r0, [r3, #12]
 8022b36:	b954      	cbnz	r4, 8022b4e <__assert_func+0x26>
 8022b38:	4b07      	ldr	r3, [pc, #28]	@ (8022b58 <__assert_func+0x30>)
 8022b3a:	461c      	mov	r4, r3
 8022b3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022b40:	9100      	str	r1, [sp, #0]
 8022b42:	462b      	mov	r3, r5
 8022b44:	4905      	ldr	r1, [pc, #20]	@ (8022b5c <__assert_func+0x34>)
 8022b46:	f002 f835 	bl	8024bb4 <fiprintf>
 8022b4a:	f002 fa6f 	bl	802502c <abort>
 8022b4e:	4b04      	ldr	r3, [pc, #16]	@ (8022b60 <__assert_func+0x38>)
 8022b50:	e7f4      	b.n	8022b3c <__assert_func+0x14>
 8022b52:	bf00      	nop
 8022b54:	2000062c 	.word	0x2000062c
 8022b58:	0803166b 	.word	0x0803166b
 8022b5c:	0803163d 	.word	0x0803163d
 8022b60:	08031630 	.word	0x08031630

08022b64 <calloc>:
 8022b64:	4b02      	ldr	r3, [pc, #8]	@ (8022b70 <calloc+0xc>)
 8022b66:	460a      	mov	r2, r1
 8022b68:	4601      	mov	r1, r0
 8022b6a:	6818      	ldr	r0, [r3, #0]
 8022b6c:	f000 b802 	b.w	8022b74 <_calloc_r>
 8022b70:	2000062c 	.word	0x2000062c

08022b74 <_calloc_r>:
 8022b74:	b570      	push	{r4, r5, r6, lr}
 8022b76:	fba1 5402 	umull	r5, r4, r1, r2
 8022b7a:	b93c      	cbnz	r4, 8022b8c <_calloc_r+0x18>
 8022b7c:	4629      	mov	r1, r5
 8022b7e:	f000 f83f 	bl	8022c00 <_malloc_r>
 8022b82:	4606      	mov	r6, r0
 8022b84:	b928      	cbnz	r0, 8022b92 <_calloc_r+0x1e>
 8022b86:	2600      	movs	r6, #0
 8022b88:	4630      	mov	r0, r6
 8022b8a:	bd70      	pop	{r4, r5, r6, pc}
 8022b8c:	220c      	movs	r2, #12
 8022b8e:	6002      	str	r2, [r0, #0]
 8022b90:	e7f9      	b.n	8022b86 <_calloc_r+0x12>
 8022b92:	462a      	mov	r2, r5
 8022b94:	4621      	mov	r1, r4
 8022b96:	f002 f8ca 	bl	8024d2e <memset>
 8022b9a:	e7f5      	b.n	8022b88 <_calloc_r+0x14>

08022b9c <malloc>:
 8022b9c:	4b02      	ldr	r3, [pc, #8]	@ (8022ba8 <malloc+0xc>)
 8022b9e:	4601      	mov	r1, r0
 8022ba0:	6818      	ldr	r0, [r3, #0]
 8022ba2:	f000 b82d 	b.w	8022c00 <_malloc_r>
 8022ba6:	bf00      	nop
 8022ba8:	2000062c 	.word	0x2000062c

08022bac <free>:
 8022bac:	4b02      	ldr	r3, [pc, #8]	@ (8022bb8 <free+0xc>)
 8022bae:	4601      	mov	r1, r0
 8022bb0:	6818      	ldr	r0, [r3, #0]
 8022bb2:	f003 b891 	b.w	8025cd8 <_free_r>
 8022bb6:	bf00      	nop
 8022bb8:	2000062c 	.word	0x2000062c

08022bbc <sbrk_aligned>:
 8022bbc:	b570      	push	{r4, r5, r6, lr}
 8022bbe:	4e0f      	ldr	r6, [pc, #60]	@ (8022bfc <sbrk_aligned+0x40>)
 8022bc0:	460c      	mov	r4, r1
 8022bc2:	6831      	ldr	r1, [r6, #0]
 8022bc4:	4605      	mov	r5, r0
 8022bc6:	b911      	cbnz	r1, 8022bce <sbrk_aligned+0x12>
 8022bc8:	f002 f9ba 	bl	8024f40 <_sbrk_r>
 8022bcc:	6030      	str	r0, [r6, #0]
 8022bce:	4621      	mov	r1, r4
 8022bd0:	4628      	mov	r0, r5
 8022bd2:	f002 f9b5 	bl	8024f40 <_sbrk_r>
 8022bd6:	1c43      	adds	r3, r0, #1
 8022bd8:	d103      	bne.n	8022be2 <sbrk_aligned+0x26>
 8022bda:	f04f 34ff 	mov.w	r4, #4294967295
 8022bde:	4620      	mov	r0, r4
 8022be0:	bd70      	pop	{r4, r5, r6, pc}
 8022be2:	1cc4      	adds	r4, r0, #3
 8022be4:	f024 0403 	bic.w	r4, r4, #3
 8022be8:	42a0      	cmp	r0, r4
 8022bea:	d0f8      	beq.n	8022bde <sbrk_aligned+0x22>
 8022bec:	1a21      	subs	r1, r4, r0
 8022bee:	4628      	mov	r0, r5
 8022bf0:	f002 f9a6 	bl	8024f40 <_sbrk_r>
 8022bf4:	3001      	adds	r0, #1
 8022bf6:	d1f2      	bne.n	8022bde <sbrk_aligned+0x22>
 8022bf8:	e7ef      	b.n	8022bda <sbrk_aligned+0x1e>
 8022bfa:	bf00      	nop
 8022bfc:	200030cc 	.word	0x200030cc

08022c00 <_malloc_r>:
 8022c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022c04:	1ccd      	adds	r5, r1, #3
 8022c06:	f025 0503 	bic.w	r5, r5, #3
 8022c0a:	3508      	adds	r5, #8
 8022c0c:	2d0c      	cmp	r5, #12
 8022c0e:	bf38      	it	cc
 8022c10:	250c      	movcc	r5, #12
 8022c12:	2d00      	cmp	r5, #0
 8022c14:	4606      	mov	r6, r0
 8022c16:	db01      	blt.n	8022c1c <_malloc_r+0x1c>
 8022c18:	42a9      	cmp	r1, r5
 8022c1a:	d904      	bls.n	8022c26 <_malloc_r+0x26>
 8022c1c:	230c      	movs	r3, #12
 8022c1e:	6033      	str	r3, [r6, #0]
 8022c20:	2000      	movs	r0, #0
 8022c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022c26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022cfc <_malloc_r+0xfc>
 8022c2a:	f000 f869 	bl	8022d00 <__malloc_lock>
 8022c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8022c32:	461c      	mov	r4, r3
 8022c34:	bb44      	cbnz	r4, 8022c88 <_malloc_r+0x88>
 8022c36:	4629      	mov	r1, r5
 8022c38:	4630      	mov	r0, r6
 8022c3a:	f7ff ffbf 	bl	8022bbc <sbrk_aligned>
 8022c3e:	1c43      	adds	r3, r0, #1
 8022c40:	4604      	mov	r4, r0
 8022c42:	d158      	bne.n	8022cf6 <_malloc_r+0xf6>
 8022c44:	f8d8 4000 	ldr.w	r4, [r8]
 8022c48:	4627      	mov	r7, r4
 8022c4a:	2f00      	cmp	r7, #0
 8022c4c:	d143      	bne.n	8022cd6 <_malloc_r+0xd6>
 8022c4e:	2c00      	cmp	r4, #0
 8022c50:	d04b      	beq.n	8022cea <_malloc_r+0xea>
 8022c52:	6823      	ldr	r3, [r4, #0]
 8022c54:	4639      	mov	r1, r7
 8022c56:	4630      	mov	r0, r6
 8022c58:	eb04 0903 	add.w	r9, r4, r3
 8022c5c:	f002 f970 	bl	8024f40 <_sbrk_r>
 8022c60:	4581      	cmp	r9, r0
 8022c62:	d142      	bne.n	8022cea <_malloc_r+0xea>
 8022c64:	6821      	ldr	r1, [r4, #0]
 8022c66:	1a6d      	subs	r5, r5, r1
 8022c68:	4629      	mov	r1, r5
 8022c6a:	4630      	mov	r0, r6
 8022c6c:	f7ff ffa6 	bl	8022bbc <sbrk_aligned>
 8022c70:	3001      	adds	r0, #1
 8022c72:	d03a      	beq.n	8022cea <_malloc_r+0xea>
 8022c74:	6823      	ldr	r3, [r4, #0]
 8022c76:	442b      	add	r3, r5
 8022c78:	6023      	str	r3, [r4, #0]
 8022c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8022c7e:	685a      	ldr	r2, [r3, #4]
 8022c80:	bb62      	cbnz	r2, 8022cdc <_malloc_r+0xdc>
 8022c82:	f8c8 7000 	str.w	r7, [r8]
 8022c86:	e00f      	b.n	8022ca8 <_malloc_r+0xa8>
 8022c88:	6822      	ldr	r2, [r4, #0]
 8022c8a:	1b52      	subs	r2, r2, r5
 8022c8c:	d420      	bmi.n	8022cd0 <_malloc_r+0xd0>
 8022c8e:	2a0b      	cmp	r2, #11
 8022c90:	d917      	bls.n	8022cc2 <_malloc_r+0xc2>
 8022c92:	1961      	adds	r1, r4, r5
 8022c94:	42a3      	cmp	r3, r4
 8022c96:	6025      	str	r5, [r4, #0]
 8022c98:	bf18      	it	ne
 8022c9a:	6059      	strne	r1, [r3, #4]
 8022c9c:	6863      	ldr	r3, [r4, #4]
 8022c9e:	bf08      	it	eq
 8022ca0:	f8c8 1000 	streq.w	r1, [r8]
 8022ca4:	5162      	str	r2, [r4, r5]
 8022ca6:	604b      	str	r3, [r1, #4]
 8022ca8:	4630      	mov	r0, r6
 8022caa:	f000 f82f 	bl	8022d0c <__malloc_unlock>
 8022cae:	f104 000b 	add.w	r0, r4, #11
 8022cb2:	1d23      	adds	r3, r4, #4
 8022cb4:	f020 0007 	bic.w	r0, r0, #7
 8022cb8:	1ac2      	subs	r2, r0, r3
 8022cba:	bf1c      	itt	ne
 8022cbc:	1a1b      	subne	r3, r3, r0
 8022cbe:	50a3      	strne	r3, [r4, r2]
 8022cc0:	e7af      	b.n	8022c22 <_malloc_r+0x22>
 8022cc2:	6862      	ldr	r2, [r4, #4]
 8022cc4:	42a3      	cmp	r3, r4
 8022cc6:	bf0c      	ite	eq
 8022cc8:	f8c8 2000 	streq.w	r2, [r8]
 8022ccc:	605a      	strne	r2, [r3, #4]
 8022cce:	e7eb      	b.n	8022ca8 <_malloc_r+0xa8>
 8022cd0:	4623      	mov	r3, r4
 8022cd2:	6864      	ldr	r4, [r4, #4]
 8022cd4:	e7ae      	b.n	8022c34 <_malloc_r+0x34>
 8022cd6:	463c      	mov	r4, r7
 8022cd8:	687f      	ldr	r7, [r7, #4]
 8022cda:	e7b6      	b.n	8022c4a <_malloc_r+0x4a>
 8022cdc:	461a      	mov	r2, r3
 8022cde:	685b      	ldr	r3, [r3, #4]
 8022ce0:	42a3      	cmp	r3, r4
 8022ce2:	d1fb      	bne.n	8022cdc <_malloc_r+0xdc>
 8022ce4:	2300      	movs	r3, #0
 8022ce6:	6053      	str	r3, [r2, #4]
 8022ce8:	e7de      	b.n	8022ca8 <_malloc_r+0xa8>
 8022cea:	230c      	movs	r3, #12
 8022cec:	6033      	str	r3, [r6, #0]
 8022cee:	4630      	mov	r0, r6
 8022cf0:	f000 f80c 	bl	8022d0c <__malloc_unlock>
 8022cf4:	e794      	b.n	8022c20 <_malloc_r+0x20>
 8022cf6:	6005      	str	r5, [r0, #0]
 8022cf8:	e7d6      	b.n	8022ca8 <_malloc_r+0xa8>
 8022cfa:	bf00      	nop
 8022cfc:	200030d0 	.word	0x200030d0

08022d00 <__malloc_lock>:
 8022d00:	4801      	ldr	r0, [pc, #4]	@ (8022d08 <__malloc_lock+0x8>)
 8022d02:	f002 b96a 	b.w	8024fda <__retarget_lock_acquire_recursive>
 8022d06:	bf00      	nop
 8022d08:	20003214 	.word	0x20003214

08022d0c <__malloc_unlock>:
 8022d0c:	4801      	ldr	r0, [pc, #4]	@ (8022d14 <__malloc_unlock+0x8>)
 8022d0e:	f002 b965 	b.w	8024fdc <__retarget_lock_release_recursive>
 8022d12:	bf00      	nop
 8022d14:	20003214 	.word	0x20003214

08022d18 <mallinfo>:
 8022d18:	b510      	push	{r4, lr}
 8022d1a:	4b03      	ldr	r3, [pc, #12]	@ (8022d28 <mallinfo+0x10>)
 8022d1c:	4604      	mov	r4, r0
 8022d1e:	6819      	ldr	r1, [r3, #0]
 8022d20:	f003 fb5e 	bl	80263e0 <_mallinfo_r>
 8022d24:	4620      	mov	r0, r4
 8022d26:	bd10      	pop	{r4, pc}
 8022d28:	2000062c 	.word	0x2000062c

08022d2c <_realloc_r>:
 8022d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022d30:	4680      	mov	r8, r0
 8022d32:	4615      	mov	r5, r2
 8022d34:	460c      	mov	r4, r1
 8022d36:	b921      	cbnz	r1, 8022d42 <_realloc_r+0x16>
 8022d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022d3c:	4611      	mov	r1, r2
 8022d3e:	f7ff bf5f 	b.w	8022c00 <_malloc_r>
 8022d42:	b92a      	cbnz	r2, 8022d50 <_realloc_r+0x24>
 8022d44:	f002 ffc8 	bl	8025cd8 <_free_r>
 8022d48:	2400      	movs	r4, #0
 8022d4a:	4620      	mov	r0, r4
 8022d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022d50:	f004 f83e 	bl	8026dd0 <_malloc_usable_size_r>
 8022d54:	4285      	cmp	r5, r0
 8022d56:	4606      	mov	r6, r0
 8022d58:	d802      	bhi.n	8022d60 <_realloc_r+0x34>
 8022d5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8022d5e:	d8f4      	bhi.n	8022d4a <_realloc_r+0x1e>
 8022d60:	4629      	mov	r1, r5
 8022d62:	4640      	mov	r0, r8
 8022d64:	f7ff ff4c 	bl	8022c00 <_malloc_r>
 8022d68:	4607      	mov	r7, r0
 8022d6a:	2800      	cmp	r0, #0
 8022d6c:	d0ec      	beq.n	8022d48 <_realloc_r+0x1c>
 8022d6e:	42b5      	cmp	r5, r6
 8022d70:	462a      	mov	r2, r5
 8022d72:	4621      	mov	r1, r4
 8022d74:	bf28      	it	cs
 8022d76:	4632      	movcs	r2, r6
 8022d78:	f002 f939 	bl	8024fee <memcpy>
 8022d7c:	4621      	mov	r1, r4
 8022d7e:	4640      	mov	r0, r8
 8022d80:	f002 ffaa 	bl	8025cd8 <_free_r>
 8022d84:	463c      	mov	r4, r7
 8022d86:	e7e0      	b.n	8022d4a <_realloc_r+0x1e>

08022d88 <sulp>:
 8022d88:	b570      	push	{r4, r5, r6, lr}
 8022d8a:	4604      	mov	r4, r0
 8022d8c:	460d      	mov	r5, r1
 8022d8e:	ec45 4b10 	vmov	d0, r4, r5
 8022d92:	4616      	mov	r6, r2
 8022d94:	f003 fede 	bl	8026b54 <__ulp>
 8022d98:	ec51 0b10 	vmov	r0, r1, d0
 8022d9c:	b17e      	cbz	r6, 8022dbe <sulp+0x36>
 8022d9e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8022da2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8022da6:	2b00      	cmp	r3, #0
 8022da8:	dd09      	ble.n	8022dbe <sulp+0x36>
 8022daa:	051b      	lsls	r3, r3, #20
 8022dac:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8022db0:	2400      	movs	r4, #0
 8022db2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8022db6:	4622      	mov	r2, r4
 8022db8:	462b      	mov	r3, r5
 8022dba:	f7e5 fb65 	bl	8008488 <__aeabi_dmul>
 8022dbe:	ec41 0b10 	vmov	d0, r0, r1
 8022dc2:	bd70      	pop	{r4, r5, r6, pc}
 8022dc4:	0000      	movs	r0, r0
	...

08022dc8 <_strtod_l>:
 8022dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022dcc:	b09f      	sub	sp, #124	@ 0x7c
 8022dce:	460c      	mov	r4, r1
 8022dd0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8022dd2:	2200      	movs	r2, #0
 8022dd4:	921a      	str	r2, [sp, #104]	@ 0x68
 8022dd6:	9005      	str	r0, [sp, #20]
 8022dd8:	f04f 0a00 	mov.w	sl, #0
 8022ddc:	f04f 0b00 	mov.w	fp, #0
 8022de0:	460a      	mov	r2, r1
 8022de2:	9219      	str	r2, [sp, #100]	@ 0x64
 8022de4:	7811      	ldrb	r1, [r2, #0]
 8022de6:	292b      	cmp	r1, #43	@ 0x2b
 8022de8:	d04a      	beq.n	8022e80 <_strtod_l+0xb8>
 8022dea:	d838      	bhi.n	8022e5e <_strtod_l+0x96>
 8022dec:	290d      	cmp	r1, #13
 8022dee:	d832      	bhi.n	8022e56 <_strtod_l+0x8e>
 8022df0:	2908      	cmp	r1, #8
 8022df2:	d832      	bhi.n	8022e5a <_strtod_l+0x92>
 8022df4:	2900      	cmp	r1, #0
 8022df6:	d03b      	beq.n	8022e70 <_strtod_l+0xa8>
 8022df8:	2200      	movs	r2, #0
 8022dfa:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022dfc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8022dfe:	782a      	ldrb	r2, [r5, #0]
 8022e00:	2a30      	cmp	r2, #48	@ 0x30
 8022e02:	f040 80b3 	bne.w	8022f6c <_strtod_l+0x1a4>
 8022e06:	786a      	ldrb	r2, [r5, #1]
 8022e08:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8022e0c:	2a58      	cmp	r2, #88	@ 0x58
 8022e0e:	d16e      	bne.n	8022eee <_strtod_l+0x126>
 8022e10:	9302      	str	r3, [sp, #8]
 8022e12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022e14:	9301      	str	r3, [sp, #4]
 8022e16:	ab1a      	add	r3, sp, #104	@ 0x68
 8022e18:	9300      	str	r3, [sp, #0]
 8022e1a:	4a8e      	ldr	r2, [pc, #568]	@ (8023054 <_strtod_l+0x28c>)
 8022e1c:	9805      	ldr	r0, [sp, #20]
 8022e1e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8022e20:	a919      	add	r1, sp, #100	@ 0x64
 8022e22:	f003 f80b 	bl	8025e3c <__gethex>
 8022e26:	f010 060f 	ands.w	r6, r0, #15
 8022e2a:	4604      	mov	r4, r0
 8022e2c:	d005      	beq.n	8022e3a <_strtod_l+0x72>
 8022e2e:	2e06      	cmp	r6, #6
 8022e30:	d128      	bne.n	8022e84 <_strtod_l+0xbc>
 8022e32:	3501      	adds	r5, #1
 8022e34:	2300      	movs	r3, #0
 8022e36:	9519      	str	r5, [sp, #100]	@ 0x64
 8022e38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022e3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022e3c:	2b00      	cmp	r3, #0
 8022e3e:	f040 858e 	bne.w	802395e <_strtod_l+0xb96>
 8022e42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022e44:	b1cb      	cbz	r3, 8022e7a <_strtod_l+0xb2>
 8022e46:	4652      	mov	r2, sl
 8022e48:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8022e4c:	ec43 2b10 	vmov	d0, r2, r3
 8022e50:	b01f      	add	sp, #124	@ 0x7c
 8022e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e56:	2920      	cmp	r1, #32
 8022e58:	d1ce      	bne.n	8022df8 <_strtod_l+0x30>
 8022e5a:	3201      	adds	r2, #1
 8022e5c:	e7c1      	b.n	8022de2 <_strtod_l+0x1a>
 8022e5e:	292d      	cmp	r1, #45	@ 0x2d
 8022e60:	d1ca      	bne.n	8022df8 <_strtod_l+0x30>
 8022e62:	2101      	movs	r1, #1
 8022e64:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022e66:	1c51      	adds	r1, r2, #1
 8022e68:	9119      	str	r1, [sp, #100]	@ 0x64
 8022e6a:	7852      	ldrb	r2, [r2, #1]
 8022e6c:	2a00      	cmp	r2, #0
 8022e6e:	d1c5      	bne.n	8022dfc <_strtod_l+0x34>
 8022e70:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022e72:	9419      	str	r4, [sp, #100]	@ 0x64
 8022e74:	2b00      	cmp	r3, #0
 8022e76:	f040 8570 	bne.w	802395a <_strtod_l+0xb92>
 8022e7a:	4652      	mov	r2, sl
 8022e7c:	465b      	mov	r3, fp
 8022e7e:	e7e5      	b.n	8022e4c <_strtod_l+0x84>
 8022e80:	2100      	movs	r1, #0
 8022e82:	e7ef      	b.n	8022e64 <_strtod_l+0x9c>
 8022e84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8022e86:	b13a      	cbz	r2, 8022e98 <_strtod_l+0xd0>
 8022e88:	2135      	movs	r1, #53	@ 0x35
 8022e8a:	a81c      	add	r0, sp, #112	@ 0x70
 8022e8c:	f003 ff5c 	bl	8026d48 <__copybits>
 8022e90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8022e92:	9805      	ldr	r0, [sp, #20]
 8022e94:	f003 fb2a 	bl	80264ec <_Bfree>
 8022e98:	3e01      	subs	r6, #1
 8022e9a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8022e9c:	2e04      	cmp	r6, #4
 8022e9e:	d806      	bhi.n	8022eae <_strtod_l+0xe6>
 8022ea0:	e8df f006 	tbb	[pc, r6]
 8022ea4:	201d0314 	.word	0x201d0314
 8022ea8:	14          	.byte	0x14
 8022ea9:	00          	.byte	0x00
 8022eaa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8022eae:	05e1      	lsls	r1, r4, #23
 8022eb0:	bf48      	it	mi
 8022eb2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8022eb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8022eba:	0d1b      	lsrs	r3, r3, #20
 8022ebc:	051b      	lsls	r3, r3, #20
 8022ebe:	2b00      	cmp	r3, #0
 8022ec0:	d1bb      	bne.n	8022e3a <_strtod_l+0x72>
 8022ec2:	f002 f85f 	bl	8024f84 <__errno>
 8022ec6:	2322      	movs	r3, #34	@ 0x22
 8022ec8:	6003      	str	r3, [r0, #0]
 8022eca:	e7b6      	b.n	8022e3a <_strtod_l+0x72>
 8022ecc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8022ed0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8022ed4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8022ed8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8022edc:	e7e7      	b.n	8022eae <_strtod_l+0xe6>
 8022ede:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 802305c <_strtod_l+0x294>
 8022ee2:	e7e4      	b.n	8022eae <_strtod_l+0xe6>
 8022ee4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8022ee8:	f04f 3aff 	mov.w	sl, #4294967295
 8022eec:	e7df      	b.n	8022eae <_strtod_l+0xe6>
 8022eee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022ef0:	1c5a      	adds	r2, r3, #1
 8022ef2:	9219      	str	r2, [sp, #100]	@ 0x64
 8022ef4:	785b      	ldrb	r3, [r3, #1]
 8022ef6:	2b30      	cmp	r3, #48	@ 0x30
 8022ef8:	d0f9      	beq.n	8022eee <_strtod_l+0x126>
 8022efa:	2b00      	cmp	r3, #0
 8022efc:	d09d      	beq.n	8022e3a <_strtod_l+0x72>
 8022efe:	2301      	movs	r3, #1
 8022f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8022f02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022f04:	930c      	str	r3, [sp, #48]	@ 0x30
 8022f06:	2300      	movs	r3, #0
 8022f08:	9308      	str	r3, [sp, #32]
 8022f0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8022f0c:	461f      	mov	r7, r3
 8022f0e:	220a      	movs	r2, #10
 8022f10:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8022f12:	7805      	ldrb	r5, [r0, #0]
 8022f14:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8022f18:	b2d9      	uxtb	r1, r3
 8022f1a:	2909      	cmp	r1, #9
 8022f1c:	d928      	bls.n	8022f70 <_strtod_l+0x1a8>
 8022f1e:	494e      	ldr	r1, [pc, #312]	@ (8023058 <_strtod_l+0x290>)
 8022f20:	2201      	movs	r2, #1
 8022f22:	f001 ff28 	bl	8024d76 <strncmp>
 8022f26:	2800      	cmp	r0, #0
 8022f28:	d032      	beq.n	8022f90 <_strtod_l+0x1c8>
 8022f2a:	2000      	movs	r0, #0
 8022f2c:	462a      	mov	r2, r5
 8022f2e:	4681      	mov	r9, r0
 8022f30:	463d      	mov	r5, r7
 8022f32:	4603      	mov	r3, r0
 8022f34:	2a65      	cmp	r2, #101	@ 0x65
 8022f36:	d001      	beq.n	8022f3c <_strtod_l+0x174>
 8022f38:	2a45      	cmp	r2, #69	@ 0x45
 8022f3a:	d114      	bne.n	8022f66 <_strtod_l+0x19e>
 8022f3c:	b91d      	cbnz	r5, 8022f46 <_strtod_l+0x17e>
 8022f3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022f40:	4302      	orrs	r2, r0
 8022f42:	d095      	beq.n	8022e70 <_strtod_l+0xa8>
 8022f44:	2500      	movs	r5, #0
 8022f46:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8022f48:	1c62      	adds	r2, r4, #1
 8022f4a:	9219      	str	r2, [sp, #100]	@ 0x64
 8022f4c:	7862      	ldrb	r2, [r4, #1]
 8022f4e:	2a2b      	cmp	r2, #43	@ 0x2b
 8022f50:	d077      	beq.n	8023042 <_strtod_l+0x27a>
 8022f52:	2a2d      	cmp	r2, #45	@ 0x2d
 8022f54:	d07b      	beq.n	802304e <_strtod_l+0x286>
 8022f56:	f04f 0c00 	mov.w	ip, #0
 8022f5a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8022f5e:	2909      	cmp	r1, #9
 8022f60:	f240 8082 	bls.w	8023068 <_strtod_l+0x2a0>
 8022f64:	9419      	str	r4, [sp, #100]	@ 0x64
 8022f66:	f04f 0800 	mov.w	r8, #0
 8022f6a:	e0a2      	b.n	80230b2 <_strtod_l+0x2ea>
 8022f6c:	2300      	movs	r3, #0
 8022f6e:	e7c7      	b.n	8022f00 <_strtod_l+0x138>
 8022f70:	2f08      	cmp	r7, #8
 8022f72:	bfd5      	itete	le
 8022f74:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8022f76:	9908      	ldrgt	r1, [sp, #32]
 8022f78:	fb02 3301 	mlale	r3, r2, r1, r3
 8022f7c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8022f80:	f100 0001 	add.w	r0, r0, #1
 8022f84:	bfd4      	ite	le
 8022f86:	930a      	strle	r3, [sp, #40]	@ 0x28
 8022f88:	9308      	strgt	r3, [sp, #32]
 8022f8a:	3701      	adds	r7, #1
 8022f8c:	9019      	str	r0, [sp, #100]	@ 0x64
 8022f8e:	e7bf      	b.n	8022f10 <_strtod_l+0x148>
 8022f90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022f92:	1c5a      	adds	r2, r3, #1
 8022f94:	9219      	str	r2, [sp, #100]	@ 0x64
 8022f96:	785a      	ldrb	r2, [r3, #1]
 8022f98:	b37f      	cbz	r7, 8022ffa <_strtod_l+0x232>
 8022f9a:	4681      	mov	r9, r0
 8022f9c:	463d      	mov	r5, r7
 8022f9e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8022fa2:	2b09      	cmp	r3, #9
 8022fa4:	d912      	bls.n	8022fcc <_strtod_l+0x204>
 8022fa6:	2301      	movs	r3, #1
 8022fa8:	e7c4      	b.n	8022f34 <_strtod_l+0x16c>
 8022faa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022fac:	1c5a      	adds	r2, r3, #1
 8022fae:	9219      	str	r2, [sp, #100]	@ 0x64
 8022fb0:	785a      	ldrb	r2, [r3, #1]
 8022fb2:	3001      	adds	r0, #1
 8022fb4:	2a30      	cmp	r2, #48	@ 0x30
 8022fb6:	d0f8      	beq.n	8022faa <_strtod_l+0x1e2>
 8022fb8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8022fbc:	2b08      	cmp	r3, #8
 8022fbe:	f200 84d3 	bhi.w	8023968 <_strtod_l+0xba0>
 8022fc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022fc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8022fc6:	4681      	mov	r9, r0
 8022fc8:	2000      	movs	r0, #0
 8022fca:	4605      	mov	r5, r0
 8022fcc:	3a30      	subs	r2, #48	@ 0x30
 8022fce:	f100 0301 	add.w	r3, r0, #1
 8022fd2:	d02a      	beq.n	802302a <_strtod_l+0x262>
 8022fd4:	4499      	add	r9, r3
 8022fd6:	eb00 0c05 	add.w	ip, r0, r5
 8022fda:	462b      	mov	r3, r5
 8022fdc:	210a      	movs	r1, #10
 8022fde:	4563      	cmp	r3, ip
 8022fe0:	d10d      	bne.n	8022ffe <_strtod_l+0x236>
 8022fe2:	1c69      	adds	r1, r5, #1
 8022fe4:	4401      	add	r1, r0
 8022fe6:	4428      	add	r0, r5
 8022fe8:	2808      	cmp	r0, #8
 8022fea:	dc16      	bgt.n	802301a <_strtod_l+0x252>
 8022fec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8022fee:	230a      	movs	r3, #10
 8022ff0:	fb03 2300 	mla	r3, r3, r0, r2
 8022ff4:	930a      	str	r3, [sp, #40]	@ 0x28
 8022ff6:	2300      	movs	r3, #0
 8022ff8:	e018      	b.n	802302c <_strtod_l+0x264>
 8022ffa:	4638      	mov	r0, r7
 8022ffc:	e7da      	b.n	8022fb4 <_strtod_l+0x1ec>
 8022ffe:	2b08      	cmp	r3, #8
 8023000:	f103 0301 	add.w	r3, r3, #1
 8023004:	dc03      	bgt.n	802300e <_strtod_l+0x246>
 8023006:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8023008:	434e      	muls	r6, r1
 802300a:	960a      	str	r6, [sp, #40]	@ 0x28
 802300c:	e7e7      	b.n	8022fde <_strtod_l+0x216>
 802300e:	2b10      	cmp	r3, #16
 8023010:	bfde      	ittt	le
 8023012:	9e08      	ldrle	r6, [sp, #32]
 8023014:	434e      	mulle	r6, r1
 8023016:	9608      	strle	r6, [sp, #32]
 8023018:	e7e1      	b.n	8022fde <_strtod_l+0x216>
 802301a:	280f      	cmp	r0, #15
 802301c:	dceb      	bgt.n	8022ff6 <_strtod_l+0x22e>
 802301e:	9808      	ldr	r0, [sp, #32]
 8023020:	230a      	movs	r3, #10
 8023022:	fb03 2300 	mla	r3, r3, r0, r2
 8023026:	9308      	str	r3, [sp, #32]
 8023028:	e7e5      	b.n	8022ff6 <_strtod_l+0x22e>
 802302a:	4629      	mov	r1, r5
 802302c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802302e:	1c50      	adds	r0, r2, #1
 8023030:	9019      	str	r0, [sp, #100]	@ 0x64
 8023032:	7852      	ldrb	r2, [r2, #1]
 8023034:	4618      	mov	r0, r3
 8023036:	460d      	mov	r5, r1
 8023038:	e7b1      	b.n	8022f9e <_strtod_l+0x1d6>
 802303a:	f04f 0900 	mov.w	r9, #0
 802303e:	2301      	movs	r3, #1
 8023040:	e77d      	b.n	8022f3e <_strtod_l+0x176>
 8023042:	f04f 0c00 	mov.w	ip, #0
 8023046:	1ca2      	adds	r2, r4, #2
 8023048:	9219      	str	r2, [sp, #100]	@ 0x64
 802304a:	78a2      	ldrb	r2, [r4, #2]
 802304c:	e785      	b.n	8022f5a <_strtod_l+0x192>
 802304e:	f04f 0c01 	mov.w	ip, #1
 8023052:	e7f8      	b.n	8023046 <_strtod_l+0x27e>
 8023054:	08031684 	.word	0x08031684
 8023058:	0803166c 	.word	0x0803166c
 802305c:	7ff00000 	.word	0x7ff00000
 8023060:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8023062:	1c51      	adds	r1, r2, #1
 8023064:	9119      	str	r1, [sp, #100]	@ 0x64
 8023066:	7852      	ldrb	r2, [r2, #1]
 8023068:	2a30      	cmp	r2, #48	@ 0x30
 802306a:	d0f9      	beq.n	8023060 <_strtod_l+0x298>
 802306c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8023070:	2908      	cmp	r1, #8
 8023072:	f63f af78 	bhi.w	8022f66 <_strtod_l+0x19e>
 8023076:	3a30      	subs	r2, #48	@ 0x30
 8023078:	920e      	str	r2, [sp, #56]	@ 0x38
 802307a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802307c:	920f      	str	r2, [sp, #60]	@ 0x3c
 802307e:	f04f 080a 	mov.w	r8, #10
 8023082:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8023084:	1c56      	adds	r6, r2, #1
 8023086:	9619      	str	r6, [sp, #100]	@ 0x64
 8023088:	7852      	ldrb	r2, [r2, #1]
 802308a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 802308e:	f1be 0f09 	cmp.w	lr, #9
 8023092:	d939      	bls.n	8023108 <_strtod_l+0x340>
 8023094:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8023096:	1a76      	subs	r6, r6, r1
 8023098:	2e08      	cmp	r6, #8
 802309a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 802309e:	dc03      	bgt.n	80230a8 <_strtod_l+0x2e0>
 80230a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80230a2:	4588      	cmp	r8, r1
 80230a4:	bfa8      	it	ge
 80230a6:	4688      	movge	r8, r1
 80230a8:	f1bc 0f00 	cmp.w	ip, #0
 80230ac:	d001      	beq.n	80230b2 <_strtod_l+0x2ea>
 80230ae:	f1c8 0800 	rsb	r8, r8, #0
 80230b2:	2d00      	cmp	r5, #0
 80230b4:	d14e      	bne.n	8023154 <_strtod_l+0x38c>
 80230b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80230b8:	4308      	orrs	r0, r1
 80230ba:	f47f aebe 	bne.w	8022e3a <_strtod_l+0x72>
 80230be:	2b00      	cmp	r3, #0
 80230c0:	f47f aed6 	bne.w	8022e70 <_strtod_l+0xa8>
 80230c4:	2a69      	cmp	r2, #105	@ 0x69
 80230c6:	d028      	beq.n	802311a <_strtod_l+0x352>
 80230c8:	dc25      	bgt.n	8023116 <_strtod_l+0x34e>
 80230ca:	2a49      	cmp	r2, #73	@ 0x49
 80230cc:	d025      	beq.n	802311a <_strtod_l+0x352>
 80230ce:	2a4e      	cmp	r2, #78	@ 0x4e
 80230d0:	f47f aece 	bne.w	8022e70 <_strtod_l+0xa8>
 80230d4:	499b      	ldr	r1, [pc, #620]	@ (8023344 <_strtod_l+0x57c>)
 80230d6:	a819      	add	r0, sp, #100	@ 0x64
 80230d8:	f003 f8d2 	bl	8026280 <__match>
 80230dc:	2800      	cmp	r0, #0
 80230de:	f43f aec7 	beq.w	8022e70 <_strtod_l+0xa8>
 80230e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80230e4:	781b      	ldrb	r3, [r3, #0]
 80230e6:	2b28      	cmp	r3, #40	@ 0x28
 80230e8:	d12e      	bne.n	8023148 <_strtod_l+0x380>
 80230ea:	4997      	ldr	r1, [pc, #604]	@ (8023348 <_strtod_l+0x580>)
 80230ec:	aa1c      	add	r2, sp, #112	@ 0x70
 80230ee:	a819      	add	r0, sp, #100	@ 0x64
 80230f0:	f003 f8da 	bl	80262a8 <__hexnan>
 80230f4:	2805      	cmp	r0, #5
 80230f6:	d127      	bne.n	8023148 <_strtod_l+0x380>
 80230f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80230fa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80230fe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8023102:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8023106:	e698      	b.n	8022e3a <_strtod_l+0x72>
 8023108:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802310a:	fb08 2101 	mla	r1, r8, r1, r2
 802310e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8023112:	920e      	str	r2, [sp, #56]	@ 0x38
 8023114:	e7b5      	b.n	8023082 <_strtod_l+0x2ba>
 8023116:	2a6e      	cmp	r2, #110	@ 0x6e
 8023118:	e7da      	b.n	80230d0 <_strtod_l+0x308>
 802311a:	498c      	ldr	r1, [pc, #560]	@ (802334c <_strtod_l+0x584>)
 802311c:	a819      	add	r0, sp, #100	@ 0x64
 802311e:	f003 f8af 	bl	8026280 <__match>
 8023122:	2800      	cmp	r0, #0
 8023124:	f43f aea4 	beq.w	8022e70 <_strtod_l+0xa8>
 8023128:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802312a:	4989      	ldr	r1, [pc, #548]	@ (8023350 <_strtod_l+0x588>)
 802312c:	3b01      	subs	r3, #1
 802312e:	a819      	add	r0, sp, #100	@ 0x64
 8023130:	9319      	str	r3, [sp, #100]	@ 0x64
 8023132:	f003 f8a5 	bl	8026280 <__match>
 8023136:	b910      	cbnz	r0, 802313e <_strtod_l+0x376>
 8023138:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802313a:	3301      	adds	r3, #1
 802313c:	9319      	str	r3, [sp, #100]	@ 0x64
 802313e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8023360 <_strtod_l+0x598>
 8023142:	f04f 0a00 	mov.w	sl, #0
 8023146:	e678      	b.n	8022e3a <_strtod_l+0x72>
 8023148:	4882      	ldr	r0, [pc, #520]	@ (8023354 <_strtod_l+0x58c>)
 802314a:	f001 ff61 	bl	8025010 <nan>
 802314e:	ec5b ab10 	vmov	sl, fp, d0
 8023152:	e672      	b.n	8022e3a <_strtod_l+0x72>
 8023154:	eba8 0309 	sub.w	r3, r8, r9
 8023158:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802315a:	9309      	str	r3, [sp, #36]	@ 0x24
 802315c:	2f00      	cmp	r7, #0
 802315e:	bf08      	it	eq
 8023160:	462f      	moveq	r7, r5
 8023162:	2d10      	cmp	r5, #16
 8023164:	462c      	mov	r4, r5
 8023166:	bfa8      	it	ge
 8023168:	2410      	movge	r4, #16
 802316a:	f7e5 f913 	bl	8008394 <__aeabi_ui2d>
 802316e:	2d09      	cmp	r5, #9
 8023170:	4682      	mov	sl, r0
 8023172:	468b      	mov	fp, r1
 8023174:	dc13      	bgt.n	802319e <_strtod_l+0x3d6>
 8023176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023178:	2b00      	cmp	r3, #0
 802317a:	f43f ae5e 	beq.w	8022e3a <_strtod_l+0x72>
 802317e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023180:	dd78      	ble.n	8023274 <_strtod_l+0x4ac>
 8023182:	2b16      	cmp	r3, #22
 8023184:	dc5f      	bgt.n	8023246 <_strtod_l+0x47e>
 8023186:	4974      	ldr	r1, [pc, #464]	@ (8023358 <_strtod_l+0x590>)
 8023188:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802318c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023190:	4652      	mov	r2, sl
 8023192:	465b      	mov	r3, fp
 8023194:	f7e5 f978 	bl	8008488 <__aeabi_dmul>
 8023198:	4682      	mov	sl, r0
 802319a:	468b      	mov	fp, r1
 802319c:	e64d      	b.n	8022e3a <_strtod_l+0x72>
 802319e:	4b6e      	ldr	r3, [pc, #440]	@ (8023358 <_strtod_l+0x590>)
 80231a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80231a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80231a8:	f7e5 f96e 	bl	8008488 <__aeabi_dmul>
 80231ac:	4682      	mov	sl, r0
 80231ae:	9808      	ldr	r0, [sp, #32]
 80231b0:	468b      	mov	fp, r1
 80231b2:	f7e5 f8ef 	bl	8008394 <__aeabi_ui2d>
 80231b6:	4602      	mov	r2, r0
 80231b8:	460b      	mov	r3, r1
 80231ba:	4650      	mov	r0, sl
 80231bc:	4659      	mov	r1, fp
 80231be:	f7e4 ffad 	bl	800811c <__adddf3>
 80231c2:	2d0f      	cmp	r5, #15
 80231c4:	4682      	mov	sl, r0
 80231c6:	468b      	mov	fp, r1
 80231c8:	ddd5      	ble.n	8023176 <_strtod_l+0x3ae>
 80231ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231cc:	1b2c      	subs	r4, r5, r4
 80231ce:	441c      	add	r4, r3
 80231d0:	2c00      	cmp	r4, #0
 80231d2:	f340 8096 	ble.w	8023302 <_strtod_l+0x53a>
 80231d6:	f014 030f 	ands.w	r3, r4, #15
 80231da:	d00a      	beq.n	80231f2 <_strtod_l+0x42a>
 80231dc:	495e      	ldr	r1, [pc, #376]	@ (8023358 <_strtod_l+0x590>)
 80231de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80231e2:	4652      	mov	r2, sl
 80231e4:	465b      	mov	r3, fp
 80231e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80231ea:	f7e5 f94d 	bl	8008488 <__aeabi_dmul>
 80231ee:	4682      	mov	sl, r0
 80231f0:	468b      	mov	fp, r1
 80231f2:	f034 040f 	bics.w	r4, r4, #15
 80231f6:	d073      	beq.n	80232e0 <_strtod_l+0x518>
 80231f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80231fc:	dd48      	ble.n	8023290 <_strtod_l+0x4c8>
 80231fe:	2400      	movs	r4, #0
 8023200:	46a0      	mov	r8, r4
 8023202:	940a      	str	r4, [sp, #40]	@ 0x28
 8023204:	46a1      	mov	r9, r4
 8023206:	9a05      	ldr	r2, [sp, #20]
 8023208:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8023360 <_strtod_l+0x598>
 802320c:	2322      	movs	r3, #34	@ 0x22
 802320e:	6013      	str	r3, [r2, #0]
 8023210:	f04f 0a00 	mov.w	sl, #0
 8023214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023216:	2b00      	cmp	r3, #0
 8023218:	f43f ae0f 	beq.w	8022e3a <_strtod_l+0x72>
 802321c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802321e:	9805      	ldr	r0, [sp, #20]
 8023220:	f003 f964 	bl	80264ec <_Bfree>
 8023224:	9805      	ldr	r0, [sp, #20]
 8023226:	4649      	mov	r1, r9
 8023228:	f003 f960 	bl	80264ec <_Bfree>
 802322c:	9805      	ldr	r0, [sp, #20]
 802322e:	4641      	mov	r1, r8
 8023230:	f003 f95c 	bl	80264ec <_Bfree>
 8023234:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023236:	9805      	ldr	r0, [sp, #20]
 8023238:	f003 f958 	bl	80264ec <_Bfree>
 802323c:	9805      	ldr	r0, [sp, #20]
 802323e:	4621      	mov	r1, r4
 8023240:	f003 f954 	bl	80264ec <_Bfree>
 8023244:	e5f9      	b.n	8022e3a <_strtod_l+0x72>
 8023246:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023248:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 802324c:	4293      	cmp	r3, r2
 802324e:	dbbc      	blt.n	80231ca <_strtod_l+0x402>
 8023250:	4c41      	ldr	r4, [pc, #260]	@ (8023358 <_strtod_l+0x590>)
 8023252:	f1c5 050f 	rsb	r5, r5, #15
 8023256:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 802325a:	4652      	mov	r2, sl
 802325c:	465b      	mov	r3, fp
 802325e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023262:	f7e5 f911 	bl	8008488 <__aeabi_dmul>
 8023266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023268:	1b5d      	subs	r5, r3, r5
 802326a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 802326e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8023272:	e78f      	b.n	8023194 <_strtod_l+0x3cc>
 8023274:	3316      	adds	r3, #22
 8023276:	dba8      	blt.n	80231ca <_strtod_l+0x402>
 8023278:	4b37      	ldr	r3, [pc, #220]	@ (8023358 <_strtod_l+0x590>)
 802327a:	eba9 0808 	sub.w	r8, r9, r8
 802327e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8023282:	e9d8 2300 	ldrd	r2, r3, [r8]
 8023286:	4650      	mov	r0, sl
 8023288:	4659      	mov	r1, fp
 802328a:	f7e5 fa27 	bl	80086dc <__aeabi_ddiv>
 802328e:	e783      	b.n	8023198 <_strtod_l+0x3d0>
 8023290:	4b32      	ldr	r3, [pc, #200]	@ (802335c <_strtod_l+0x594>)
 8023292:	9308      	str	r3, [sp, #32]
 8023294:	2300      	movs	r3, #0
 8023296:	1124      	asrs	r4, r4, #4
 8023298:	4650      	mov	r0, sl
 802329a:	4659      	mov	r1, fp
 802329c:	461e      	mov	r6, r3
 802329e:	2c01      	cmp	r4, #1
 80232a0:	dc21      	bgt.n	80232e6 <_strtod_l+0x51e>
 80232a2:	b10b      	cbz	r3, 80232a8 <_strtod_l+0x4e0>
 80232a4:	4682      	mov	sl, r0
 80232a6:	468b      	mov	fp, r1
 80232a8:	492c      	ldr	r1, [pc, #176]	@ (802335c <_strtod_l+0x594>)
 80232aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80232ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80232b2:	4652      	mov	r2, sl
 80232b4:	465b      	mov	r3, fp
 80232b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80232ba:	f7e5 f8e5 	bl	8008488 <__aeabi_dmul>
 80232be:	4b28      	ldr	r3, [pc, #160]	@ (8023360 <_strtod_l+0x598>)
 80232c0:	460a      	mov	r2, r1
 80232c2:	400b      	ands	r3, r1
 80232c4:	4927      	ldr	r1, [pc, #156]	@ (8023364 <_strtod_l+0x59c>)
 80232c6:	428b      	cmp	r3, r1
 80232c8:	4682      	mov	sl, r0
 80232ca:	d898      	bhi.n	80231fe <_strtod_l+0x436>
 80232cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80232d0:	428b      	cmp	r3, r1
 80232d2:	bf86      	itte	hi
 80232d4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8023368 <_strtod_l+0x5a0>
 80232d8:	f04f 3aff 	movhi.w	sl, #4294967295
 80232dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80232e0:	2300      	movs	r3, #0
 80232e2:	9308      	str	r3, [sp, #32]
 80232e4:	e07a      	b.n	80233dc <_strtod_l+0x614>
 80232e6:	07e2      	lsls	r2, r4, #31
 80232e8:	d505      	bpl.n	80232f6 <_strtod_l+0x52e>
 80232ea:	9b08      	ldr	r3, [sp, #32]
 80232ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232f0:	f7e5 f8ca 	bl	8008488 <__aeabi_dmul>
 80232f4:	2301      	movs	r3, #1
 80232f6:	9a08      	ldr	r2, [sp, #32]
 80232f8:	3208      	adds	r2, #8
 80232fa:	3601      	adds	r6, #1
 80232fc:	1064      	asrs	r4, r4, #1
 80232fe:	9208      	str	r2, [sp, #32]
 8023300:	e7cd      	b.n	802329e <_strtod_l+0x4d6>
 8023302:	d0ed      	beq.n	80232e0 <_strtod_l+0x518>
 8023304:	4264      	negs	r4, r4
 8023306:	f014 020f 	ands.w	r2, r4, #15
 802330a:	d00a      	beq.n	8023322 <_strtod_l+0x55a>
 802330c:	4b12      	ldr	r3, [pc, #72]	@ (8023358 <_strtod_l+0x590>)
 802330e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023312:	4650      	mov	r0, sl
 8023314:	4659      	mov	r1, fp
 8023316:	e9d3 2300 	ldrd	r2, r3, [r3]
 802331a:	f7e5 f9df 	bl	80086dc <__aeabi_ddiv>
 802331e:	4682      	mov	sl, r0
 8023320:	468b      	mov	fp, r1
 8023322:	1124      	asrs	r4, r4, #4
 8023324:	d0dc      	beq.n	80232e0 <_strtod_l+0x518>
 8023326:	2c1f      	cmp	r4, #31
 8023328:	dd20      	ble.n	802336c <_strtod_l+0x5a4>
 802332a:	2400      	movs	r4, #0
 802332c:	46a0      	mov	r8, r4
 802332e:	940a      	str	r4, [sp, #40]	@ 0x28
 8023330:	46a1      	mov	r9, r4
 8023332:	9a05      	ldr	r2, [sp, #20]
 8023334:	2322      	movs	r3, #34	@ 0x22
 8023336:	f04f 0a00 	mov.w	sl, #0
 802333a:	f04f 0b00 	mov.w	fp, #0
 802333e:	6013      	str	r3, [r2, #0]
 8023340:	e768      	b.n	8023214 <_strtod_l+0x44c>
 8023342:	bf00      	nop
 8023344:	080317ce 	.word	0x080317ce
 8023348:	08031670 	.word	0x08031670
 802334c:	080317c6 	.word	0x080317c6
 8023350:	08031876 	.word	0x08031876
 8023354:	0803166b 	.word	0x0803166b
 8023358:	080319d8 	.word	0x080319d8
 802335c:	080319b0 	.word	0x080319b0
 8023360:	7ff00000 	.word	0x7ff00000
 8023364:	7ca00000 	.word	0x7ca00000
 8023368:	7fefffff 	.word	0x7fefffff
 802336c:	f014 0310 	ands.w	r3, r4, #16
 8023370:	bf18      	it	ne
 8023372:	236a      	movne	r3, #106	@ 0x6a
 8023374:	4ea9      	ldr	r6, [pc, #676]	@ (802361c <_strtod_l+0x854>)
 8023376:	9308      	str	r3, [sp, #32]
 8023378:	4650      	mov	r0, sl
 802337a:	4659      	mov	r1, fp
 802337c:	2300      	movs	r3, #0
 802337e:	07e2      	lsls	r2, r4, #31
 8023380:	d504      	bpl.n	802338c <_strtod_l+0x5c4>
 8023382:	e9d6 2300 	ldrd	r2, r3, [r6]
 8023386:	f7e5 f87f 	bl	8008488 <__aeabi_dmul>
 802338a:	2301      	movs	r3, #1
 802338c:	1064      	asrs	r4, r4, #1
 802338e:	f106 0608 	add.w	r6, r6, #8
 8023392:	d1f4      	bne.n	802337e <_strtod_l+0x5b6>
 8023394:	b10b      	cbz	r3, 802339a <_strtod_l+0x5d2>
 8023396:	4682      	mov	sl, r0
 8023398:	468b      	mov	fp, r1
 802339a:	9b08      	ldr	r3, [sp, #32]
 802339c:	b1b3      	cbz	r3, 80233cc <_strtod_l+0x604>
 802339e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80233a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80233a6:	2b00      	cmp	r3, #0
 80233a8:	4659      	mov	r1, fp
 80233aa:	dd0f      	ble.n	80233cc <_strtod_l+0x604>
 80233ac:	2b1f      	cmp	r3, #31
 80233ae:	dd55      	ble.n	802345c <_strtod_l+0x694>
 80233b0:	2b34      	cmp	r3, #52	@ 0x34
 80233b2:	bfde      	ittt	le
 80233b4:	f04f 33ff 	movle.w	r3, #4294967295
 80233b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80233bc:	4093      	lslle	r3, r2
 80233be:	f04f 0a00 	mov.w	sl, #0
 80233c2:	bfcc      	ite	gt
 80233c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80233c8:	ea03 0b01 	andle.w	fp, r3, r1
 80233cc:	2200      	movs	r2, #0
 80233ce:	2300      	movs	r3, #0
 80233d0:	4650      	mov	r0, sl
 80233d2:	4659      	mov	r1, fp
 80233d4:	f7e5 fac0 	bl	8008958 <__aeabi_dcmpeq>
 80233d8:	2800      	cmp	r0, #0
 80233da:	d1a6      	bne.n	802332a <_strtod_l+0x562>
 80233dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80233de:	9300      	str	r3, [sp, #0]
 80233e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80233e2:	9805      	ldr	r0, [sp, #20]
 80233e4:	462b      	mov	r3, r5
 80233e6:	463a      	mov	r2, r7
 80233e8:	f003 f8e8 	bl	80265bc <__s2b>
 80233ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80233ee:	2800      	cmp	r0, #0
 80233f0:	f43f af05 	beq.w	80231fe <_strtod_l+0x436>
 80233f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80233f6:	2a00      	cmp	r2, #0
 80233f8:	eba9 0308 	sub.w	r3, r9, r8
 80233fc:	bfa8      	it	ge
 80233fe:	2300      	movge	r3, #0
 8023400:	9312      	str	r3, [sp, #72]	@ 0x48
 8023402:	2400      	movs	r4, #0
 8023404:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8023408:	9316      	str	r3, [sp, #88]	@ 0x58
 802340a:	46a0      	mov	r8, r4
 802340c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802340e:	9805      	ldr	r0, [sp, #20]
 8023410:	6859      	ldr	r1, [r3, #4]
 8023412:	f003 f82b 	bl	802646c <_Balloc>
 8023416:	4681      	mov	r9, r0
 8023418:	2800      	cmp	r0, #0
 802341a:	f43f aef4 	beq.w	8023206 <_strtod_l+0x43e>
 802341e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023420:	691a      	ldr	r2, [r3, #16]
 8023422:	3202      	adds	r2, #2
 8023424:	f103 010c 	add.w	r1, r3, #12
 8023428:	0092      	lsls	r2, r2, #2
 802342a:	300c      	adds	r0, #12
 802342c:	f001 fddf 	bl	8024fee <memcpy>
 8023430:	ec4b ab10 	vmov	d0, sl, fp
 8023434:	9805      	ldr	r0, [sp, #20]
 8023436:	aa1c      	add	r2, sp, #112	@ 0x70
 8023438:	a91b      	add	r1, sp, #108	@ 0x6c
 802343a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 802343e:	f003 fbf9 	bl	8026c34 <__d2b>
 8023442:	901a      	str	r0, [sp, #104]	@ 0x68
 8023444:	2800      	cmp	r0, #0
 8023446:	f43f aede 	beq.w	8023206 <_strtod_l+0x43e>
 802344a:	9805      	ldr	r0, [sp, #20]
 802344c:	2101      	movs	r1, #1
 802344e:	f003 f94b 	bl	80266e8 <__i2b>
 8023452:	4680      	mov	r8, r0
 8023454:	b948      	cbnz	r0, 802346a <_strtod_l+0x6a2>
 8023456:	f04f 0800 	mov.w	r8, #0
 802345a:	e6d4      	b.n	8023206 <_strtod_l+0x43e>
 802345c:	f04f 32ff 	mov.w	r2, #4294967295
 8023460:	fa02 f303 	lsl.w	r3, r2, r3
 8023464:	ea03 0a0a 	and.w	sl, r3, sl
 8023468:	e7b0      	b.n	80233cc <_strtod_l+0x604>
 802346a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 802346c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802346e:	2d00      	cmp	r5, #0
 8023470:	bfab      	itete	ge
 8023472:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8023474:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8023476:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8023478:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 802347a:	bfac      	ite	ge
 802347c:	18ef      	addge	r7, r5, r3
 802347e:	1b5e      	sublt	r6, r3, r5
 8023480:	9b08      	ldr	r3, [sp, #32]
 8023482:	1aed      	subs	r5, r5, r3
 8023484:	4415      	add	r5, r2
 8023486:	4b66      	ldr	r3, [pc, #408]	@ (8023620 <_strtod_l+0x858>)
 8023488:	3d01      	subs	r5, #1
 802348a:	429d      	cmp	r5, r3
 802348c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8023490:	da50      	bge.n	8023534 <_strtod_l+0x76c>
 8023492:	1b5b      	subs	r3, r3, r5
 8023494:	2b1f      	cmp	r3, #31
 8023496:	eba2 0203 	sub.w	r2, r2, r3
 802349a:	f04f 0101 	mov.w	r1, #1
 802349e:	dc3d      	bgt.n	802351c <_strtod_l+0x754>
 80234a0:	fa01 f303 	lsl.w	r3, r1, r3
 80234a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80234a6:	2300      	movs	r3, #0
 80234a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80234aa:	18bd      	adds	r5, r7, r2
 80234ac:	9b08      	ldr	r3, [sp, #32]
 80234ae:	42af      	cmp	r7, r5
 80234b0:	4416      	add	r6, r2
 80234b2:	441e      	add	r6, r3
 80234b4:	463b      	mov	r3, r7
 80234b6:	bfa8      	it	ge
 80234b8:	462b      	movge	r3, r5
 80234ba:	42b3      	cmp	r3, r6
 80234bc:	bfa8      	it	ge
 80234be:	4633      	movge	r3, r6
 80234c0:	2b00      	cmp	r3, #0
 80234c2:	bfc2      	ittt	gt
 80234c4:	1aed      	subgt	r5, r5, r3
 80234c6:	1af6      	subgt	r6, r6, r3
 80234c8:	1aff      	subgt	r7, r7, r3
 80234ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80234cc:	2b00      	cmp	r3, #0
 80234ce:	dd16      	ble.n	80234fe <_strtod_l+0x736>
 80234d0:	4641      	mov	r1, r8
 80234d2:	9805      	ldr	r0, [sp, #20]
 80234d4:	461a      	mov	r2, r3
 80234d6:	f003 f9c7 	bl	8026868 <__pow5mult>
 80234da:	4680      	mov	r8, r0
 80234dc:	2800      	cmp	r0, #0
 80234de:	d0ba      	beq.n	8023456 <_strtod_l+0x68e>
 80234e0:	4601      	mov	r1, r0
 80234e2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80234e4:	9805      	ldr	r0, [sp, #20]
 80234e6:	f003 f915 	bl	8026714 <__multiply>
 80234ea:	900e      	str	r0, [sp, #56]	@ 0x38
 80234ec:	2800      	cmp	r0, #0
 80234ee:	f43f ae8a 	beq.w	8023206 <_strtod_l+0x43e>
 80234f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80234f4:	9805      	ldr	r0, [sp, #20]
 80234f6:	f002 fff9 	bl	80264ec <_Bfree>
 80234fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80234fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80234fe:	2d00      	cmp	r5, #0
 8023500:	dc1d      	bgt.n	802353e <_strtod_l+0x776>
 8023502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023504:	2b00      	cmp	r3, #0
 8023506:	dd23      	ble.n	8023550 <_strtod_l+0x788>
 8023508:	4649      	mov	r1, r9
 802350a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802350c:	9805      	ldr	r0, [sp, #20]
 802350e:	f003 f9ab 	bl	8026868 <__pow5mult>
 8023512:	4681      	mov	r9, r0
 8023514:	b9e0      	cbnz	r0, 8023550 <_strtod_l+0x788>
 8023516:	f04f 0900 	mov.w	r9, #0
 802351a:	e674      	b.n	8023206 <_strtod_l+0x43e>
 802351c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8023520:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8023524:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8023528:	35e2      	adds	r5, #226	@ 0xe2
 802352a:	fa01 f305 	lsl.w	r3, r1, r5
 802352e:	9310      	str	r3, [sp, #64]	@ 0x40
 8023530:	9113      	str	r1, [sp, #76]	@ 0x4c
 8023532:	e7ba      	b.n	80234aa <_strtod_l+0x6e2>
 8023534:	2300      	movs	r3, #0
 8023536:	9310      	str	r3, [sp, #64]	@ 0x40
 8023538:	2301      	movs	r3, #1
 802353a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802353c:	e7b5      	b.n	80234aa <_strtod_l+0x6e2>
 802353e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8023540:	9805      	ldr	r0, [sp, #20]
 8023542:	462a      	mov	r2, r5
 8023544:	f003 f9ea 	bl	802691c <__lshift>
 8023548:	901a      	str	r0, [sp, #104]	@ 0x68
 802354a:	2800      	cmp	r0, #0
 802354c:	d1d9      	bne.n	8023502 <_strtod_l+0x73a>
 802354e:	e65a      	b.n	8023206 <_strtod_l+0x43e>
 8023550:	2e00      	cmp	r6, #0
 8023552:	dd07      	ble.n	8023564 <_strtod_l+0x79c>
 8023554:	4649      	mov	r1, r9
 8023556:	9805      	ldr	r0, [sp, #20]
 8023558:	4632      	mov	r2, r6
 802355a:	f003 f9df 	bl	802691c <__lshift>
 802355e:	4681      	mov	r9, r0
 8023560:	2800      	cmp	r0, #0
 8023562:	d0d8      	beq.n	8023516 <_strtod_l+0x74e>
 8023564:	2f00      	cmp	r7, #0
 8023566:	dd08      	ble.n	802357a <_strtod_l+0x7b2>
 8023568:	4641      	mov	r1, r8
 802356a:	9805      	ldr	r0, [sp, #20]
 802356c:	463a      	mov	r2, r7
 802356e:	f003 f9d5 	bl	802691c <__lshift>
 8023572:	4680      	mov	r8, r0
 8023574:	2800      	cmp	r0, #0
 8023576:	f43f ae46 	beq.w	8023206 <_strtod_l+0x43e>
 802357a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802357c:	9805      	ldr	r0, [sp, #20]
 802357e:	464a      	mov	r2, r9
 8023580:	f003 fa54 	bl	8026a2c <__mdiff>
 8023584:	4604      	mov	r4, r0
 8023586:	2800      	cmp	r0, #0
 8023588:	f43f ae3d 	beq.w	8023206 <_strtod_l+0x43e>
 802358c:	68c3      	ldr	r3, [r0, #12]
 802358e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023590:	2300      	movs	r3, #0
 8023592:	60c3      	str	r3, [r0, #12]
 8023594:	4641      	mov	r1, r8
 8023596:	f003 fa2d 	bl	80269f4 <__mcmp>
 802359a:	2800      	cmp	r0, #0
 802359c:	da46      	bge.n	802362c <_strtod_l+0x864>
 802359e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80235a0:	ea53 030a 	orrs.w	r3, r3, sl
 80235a4:	d16c      	bne.n	8023680 <_strtod_l+0x8b8>
 80235a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80235aa:	2b00      	cmp	r3, #0
 80235ac:	d168      	bne.n	8023680 <_strtod_l+0x8b8>
 80235ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80235b2:	0d1b      	lsrs	r3, r3, #20
 80235b4:	051b      	lsls	r3, r3, #20
 80235b6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80235ba:	d961      	bls.n	8023680 <_strtod_l+0x8b8>
 80235bc:	6963      	ldr	r3, [r4, #20]
 80235be:	b913      	cbnz	r3, 80235c6 <_strtod_l+0x7fe>
 80235c0:	6923      	ldr	r3, [r4, #16]
 80235c2:	2b01      	cmp	r3, #1
 80235c4:	dd5c      	ble.n	8023680 <_strtod_l+0x8b8>
 80235c6:	4621      	mov	r1, r4
 80235c8:	2201      	movs	r2, #1
 80235ca:	9805      	ldr	r0, [sp, #20]
 80235cc:	f003 f9a6 	bl	802691c <__lshift>
 80235d0:	4641      	mov	r1, r8
 80235d2:	4604      	mov	r4, r0
 80235d4:	f003 fa0e 	bl	80269f4 <__mcmp>
 80235d8:	2800      	cmp	r0, #0
 80235da:	dd51      	ble.n	8023680 <_strtod_l+0x8b8>
 80235dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80235e0:	9a08      	ldr	r2, [sp, #32]
 80235e2:	0d1b      	lsrs	r3, r3, #20
 80235e4:	051b      	lsls	r3, r3, #20
 80235e6:	2a00      	cmp	r2, #0
 80235e8:	d06b      	beq.n	80236c2 <_strtod_l+0x8fa>
 80235ea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80235ee:	d868      	bhi.n	80236c2 <_strtod_l+0x8fa>
 80235f0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80235f4:	f67f ae9d 	bls.w	8023332 <_strtod_l+0x56a>
 80235f8:	4b0a      	ldr	r3, [pc, #40]	@ (8023624 <_strtod_l+0x85c>)
 80235fa:	4650      	mov	r0, sl
 80235fc:	4659      	mov	r1, fp
 80235fe:	2200      	movs	r2, #0
 8023600:	f7e4 ff42 	bl	8008488 <__aeabi_dmul>
 8023604:	4b08      	ldr	r3, [pc, #32]	@ (8023628 <_strtod_l+0x860>)
 8023606:	400b      	ands	r3, r1
 8023608:	4682      	mov	sl, r0
 802360a:	468b      	mov	fp, r1
 802360c:	2b00      	cmp	r3, #0
 802360e:	f47f ae05 	bne.w	802321c <_strtod_l+0x454>
 8023612:	9a05      	ldr	r2, [sp, #20]
 8023614:	2322      	movs	r3, #34	@ 0x22
 8023616:	6013      	str	r3, [r2, #0]
 8023618:	e600      	b.n	802321c <_strtod_l+0x454>
 802361a:	bf00      	nop
 802361c:	08031698 	.word	0x08031698
 8023620:	fffffc02 	.word	0xfffffc02
 8023624:	39500000 	.word	0x39500000
 8023628:	7ff00000 	.word	0x7ff00000
 802362c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8023630:	d165      	bne.n	80236fe <_strtod_l+0x936>
 8023632:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023634:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8023638:	b35a      	cbz	r2, 8023692 <_strtod_l+0x8ca>
 802363a:	4a9f      	ldr	r2, [pc, #636]	@ (80238b8 <_strtod_l+0xaf0>)
 802363c:	4293      	cmp	r3, r2
 802363e:	d12b      	bne.n	8023698 <_strtod_l+0x8d0>
 8023640:	9b08      	ldr	r3, [sp, #32]
 8023642:	4651      	mov	r1, sl
 8023644:	b303      	cbz	r3, 8023688 <_strtod_l+0x8c0>
 8023646:	4b9d      	ldr	r3, [pc, #628]	@ (80238bc <_strtod_l+0xaf4>)
 8023648:	465a      	mov	r2, fp
 802364a:	4013      	ands	r3, r2
 802364c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8023650:	f04f 32ff 	mov.w	r2, #4294967295
 8023654:	d81b      	bhi.n	802368e <_strtod_l+0x8c6>
 8023656:	0d1b      	lsrs	r3, r3, #20
 8023658:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802365c:	fa02 f303 	lsl.w	r3, r2, r3
 8023660:	4299      	cmp	r1, r3
 8023662:	d119      	bne.n	8023698 <_strtod_l+0x8d0>
 8023664:	4b96      	ldr	r3, [pc, #600]	@ (80238c0 <_strtod_l+0xaf8>)
 8023666:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023668:	429a      	cmp	r2, r3
 802366a:	d102      	bne.n	8023672 <_strtod_l+0x8aa>
 802366c:	3101      	adds	r1, #1
 802366e:	f43f adca 	beq.w	8023206 <_strtod_l+0x43e>
 8023672:	4b92      	ldr	r3, [pc, #584]	@ (80238bc <_strtod_l+0xaf4>)
 8023674:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023676:	401a      	ands	r2, r3
 8023678:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 802367c:	f04f 0a00 	mov.w	sl, #0
 8023680:	9b08      	ldr	r3, [sp, #32]
 8023682:	2b00      	cmp	r3, #0
 8023684:	d1b8      	bne.n	80235f8 <_strtod_l+0x830>
 8023686:	e5c9      	b.n	802321c <_strtod_l+0x454>
 8023688:	f04f 33ff 	mov.w	r3, #4294967295
 802368c:	e7e8      	b.n	8023660 <_strtod_l+0x898>
 802368e:	4613      	mov	r3, r2
 8023690:	e7e6      	b.n	8023660 <_strtod_l+0x898>
 8023692:	ea53 030a 	orrs.w	r3, r3, sl
 8023696:	d0a1      	beq.n	80235dc <_strtod_l+0x814>
 8023698:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802369a:	b1db      	cbz	r3, 80236d4 <_strtod_l+0x90c>
 802369c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802369e:	4213      	tst	r3, r2
 80236a0:	d0ee      	beq.n	8023680 <_strtod_l+0x8b8>
 80236a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80236a4:	9a08      	ldr	r2, [sp, #32]
 80236a6:	4650      	mov	r0, sl
 80236a8:	4659      	mov	r1, fp
 80236aa:	b1bb      	cbz	r3, 80236dc <_strtod_l+0x914>
 80236ac:	f7ff fb6c 	bl	8022d88 <sulp>
 80236b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80236b4:	ec53 2b10 	vmov	r2, r3, d0
 80236b8:	f7e4 fd30 	bl	800811c <__adddf3>
 80236bc:	4682      	mov	sl, r0
 80236be:	468b      	mov	fp, r1
 80236c0:	e7de      	b.n	8023680 <_strtod_l+0x8b8>
 80236c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80236c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80236ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80236ce:	f04f 3aff 	mov.w	sl, #4294967295
 80236d2:	e7d5      	b.n	8023680 <_strtod_l+0x8b8>
 80236d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80236d6:	ea13 0f0a 	tst.w	r3, sl
 80236da:	e7e1      	b.n	80236a0 <_strtod_l+0x8d8>
 80236dc:	f7ff fb54 	bl	8022d88 <sulp>
 80236e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80236e4:	ec53 2b10 	vmov	r2, r3, d0
 80236e8:	f7e4 fd16 	bl	8008118 <__aeabi_dsub>
 80236ec:	2200      	movs	r2, #0
 80236ee:	2300      	movs	r3, #0
 80236f0:	4682      	mov	sl, r0
 80236f2:	468b      	mov	fp, r1
 80236f4:	f7e5 f930 	bl	8008958 <__aeabi_dcmpeq>
 80236f8:	2800      	cmp	r0, #0
 80236fa:	d0c1      	beq.n	8023680 <_strtod_l+0x8b8>
 80236fc:	e619      	b.n	8023332 <_strtod_l+0x56a>
 80236fe:	4641      	mov	r1, r8
 8023700:	4620      	mov	r0, r4
 8023702:	f003 faef 	bl	8026ce4 <__ratio>
 8023706:	ec57 6b10 	vmov	r6, r7, d0
 802370a:	2200      	movs	r2, #0
 802370c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8023710:	4630      	mov	r0, r6
 8023712:	4639      	mov	r1, r7
 8023714:	f7e5 f934 	bl	8008980 <__aeabi_dcmple>
 8023718:	2800      	cmp	r0, #0
 802371a:	d06f      	beq.n	80237fc <_strtod_l+0xa34>
 802371c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802371e:	2b00      	cmp	r3, #0
 8023720:	d17a      	bne.n	8023818 <_strtod_l+0xa50>
 8023722:	f1ba 0f00 	cmp.w	sl, #0
 8023726:	d158      	bne.n	80237da <_strtod_l+0xa12>
 8023728:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802372a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802372e:	2b00      	cmp	r3, #0
 8023730:	d15a      	bne.n	80237e8 <_strtod_l+0xa20>
 8023732:	4b64      	ldr	r3, [pc, #400]	@ (80238c4 <_strtod_l+0xafc>)
 8023734:	2200      	movs	r2, #0
 8023736:	4630      	mov	r0, r6
 8023738:	4639      	mov	r1, r7
 802373a:	f7e5 f917 	bl	800896c <__aeabi_dcmplt>
 802373e:	2800      	cmp	r0, #0
 8023740:	d159      	bne.n	80237f6 <_strtod_l+0xa2e>
 8023742:	4630      	mov	r0, r6
 8023744:	4639      	mov	r1, r7
 8023746:	4b60      	ldr	r3, [pc, #384]	@ (80238c8 <_strtod_l+0xb00>)
 8023748:	2200      	movs	r2, #0
 802374a:	f7e4 fe9d 	bl	8008488 <__aeabi_dmul>
 802374e:	4606      	mov	r6, r0
 8023750:	460f      	mov	r7, r1
 8023752:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8023756:	9606      	str	r6, [sp, #24]
 8023758:	9307      	str	r3, [sp, #28]
 802375a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802375e:	4d57      	ldr	r5, [pc, #348]	@ (80238bc <_strtod_l+0xaf4>)
 8023760:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8023764:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023766:	401d      	ands	r5, r3
 8023768:	4b58      	ldr	r3, [pc, #352]	@ (80238cc <_strtod_l+0xb04>)
 802376a:	429d      	cmp	r5, r3
 802376c:	f040 80b2 	bne.w	80238d4 <_strtod_l+0xb0c>
 8023770:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023772:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8023776:	ec4b ab10 	vmov	d0, sl, fp
 802377a:	f003 f9eb 	bl	8026b54 <__ulp>
 802377e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023782:	ec51 0b10 	vmov	r0, r1, d0
 8023786:	f7e4 fe7f 	bl	8008488 <__aeabi_dmul>
 802378a:	4652      	mov	r2, sl
 802378c:	465b      	mov	r3, fp
 802378e:	f7e4 fcc5 	bl	800811c <__adddf3>
 8023792:	460b      	mov	r3, r1
 8023794:	4949      	ldr	r1, [pc, #292]	@ (80238bc <_strtod_l+0xaf4>)
 8023796:	4a4e      	ldr	r2, [pc, #312]	@ (80238d0 <_strtod_l+0xb08>)
 8023798:	4019      	ands	r1, r3
 802379a:	4291      	cmp	r1, r2
 802379c:	4682      	mov	sl, r0
 802379e:	d942      	bls.n	8023826 <_strtod_l+0xa5e>
 80237a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80237a2:	4b47      	ldr	r3, [pc, #284]	@ (80238c0 <_strtod_l+0xaf8>)
 80237a4:	429a      	cmp	r2, r3
 80237a6:	d103      	bne.n	80237b0 <_strtod_l+0x9e8>
 80237a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80237aa:	3301      	adds	r3, #1
 80237ac:	f43f ad2b 	beq.w	8023206 <_strtod_l+0x43e>
 80237b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80238c0 <_strtod_l+0xaf8>
 80237b4:	f04f 3aff 	mov.w	sl, #4294967295
 80237b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80237ba:	9805      	ldr	r0, [sp, #20]
 80237bc:	f002 fe96 	bl	80264ec <_Bfree>
 80237c0:	9805      	ldr	r0, [sp, #20]
 80237c2:	4649      	mov	r1, r9
 80237c4:	f002 fe92 	bl	80264ec <_Bfree>
 80237c8:	9805      	ldr	r0, [sp, #20]
 80237ca:	4641      	mov	r1, r8
 80237cc:	f002 fe8e 	bl	80264ec <_Bfree>
 80237d0:	9805      	ldr	r0, [sp, #20]
 80237d2:	4621      	mov	r1, r4
 80237d4:	f002 fe8a 	bl	80264ec <_Bfree>
 80237d8:	e618      	b.n	802340c <_strtod_l+0x644>
 80237da:	f1ba 0f01 	cmp.w	sl, #1
 80237de:	d103      	bne.n	80237e8 <_strtod_l+0xa20>
 80237e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80237e2:	2b00      	cmp	r3, #0
 80237e4:	f43f ada5 	beq.w	8023332 <_strtod_l+0x56a>
 80237e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8023898 <_strtod_l+0xad0>
 80237ec:	4f35      	ldr	r7, [pc, #212]	@ (80238c4 <_strtod_l+0xafc>)
 80237ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80237f2:	2600      	movs	r6, #0
 80237f4:	e7b1      	b.n	802375a <_strtod_l+0x992>
 80237f6:	4f34      	ldr	r7, [pc, #208]	@ (80238c8 <_strtod_l+0xb00>)
 80237f8:	2600      	movs	r6, #0
 80237fa:	e7aa      	b.n	8023752 <_strtod_l+0x98a>
 80237fc:	4b32      	ldr	r3, [pc, #200]	@ (80238c8 <_strtod_l+0xb00>)
 80237fe:	4630      	mov	r0, r6
 8023800:	4639      	mov	r1, r7
 8023802:	2200      	movs	r2, #0
 8023804:	f7e4 fe40 	bl	8008488 <__aeabi_dmul>
 8023808:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802380a:	4606      	mov	r6, r0
 802380c:	460f      	mov	r7, r1
 802380e:	2b00      	cmp	r3, #0
 8023810:	d09f      	beq.n	8023752 <_strtod_l+0x98a>
 8023812:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8023816:	e7a0      	b.n	802375a <_strtod_l+0x992>
 8023818:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80238a0 <_strtod_l+0xad8>
 802381c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8023820:	ec57 6b17 	vmov	r6, r7, d7
 8023824:	e799      	b.n	802375a <_strtod_l+0x992>
 8023826:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 802382a:	9b08      	ldr	r3, [sp, #32]
 802382c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8023830:	2b00      	cmp	r3, #0
 8023832:	d1c1      	bne.n	80237b8 <_strtod_l+0x9f0>
 8023834:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8023838:	0d1b      	lsrs	r3, r3, #20
 802383a:	051b      	lsls	r3, r3, #20
 802383c:	429d      	cmp	r5, r3
 802383e:	d1bb      	bne.n	80237b8 <_strtod_l+0x9f0>
 8023840:	4630      	mov	r0, r6
 8023842:	4639      	mov	r1, r7
 8023844:	f7e5 f980 	bl	8008b48 <__aeabi_d2lz>
 8023848:	f7e4 fdf0 	bl	800842c <__aeabi_l2d>
 802384c:	4602      	mov	r2, r0
 802384e:	460b      	mov	r3, r1
 8023850:	4630      	mov	r0, r6
 8023852:	4639      	mov	r1, r7
 8023854:	f7e4 fc60 	bl	8008118 <__aeabi_dsub>
 8023858:	460b      	mov	r3, r1
 802385a:	4602      	mov	r2, r0
 802385c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8023860:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8023864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023866:	ea46 060a 	orr.w	r6, r6, sl
 802386a:	431e      	orrs	r6, r3
 802386c:	d06f      	beq.n	802394e <_strtod_l+0xb86>
 802386e:	a30e      	add	r3, pc, #56	@ (adr r3, 80238a8 <_strtod_l+0xae0>)
 8023870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023874:	f7e5 f87a 	bl	800896c <__aeabi_dcmplt>
 8023878:	2800      	cmp	r0, #0
 802387a:	f47f accf 	bne.w	802321c <_strtod_l+0x454>
 802387e:	a30c      	add	r3, pc, #48	@ (adr r3, 80238b0 <_strtod_l+0xae8>)
 8023880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023884:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8023888:	f7e5 f88e 	bl	80089a8 <__aeabi_dcmpgt>
 802388c:	2800      	cmp	r0, #0
 802388e:	d093      	beq.n	80237b8 <_strtod_l+0x9f0>
 8023890:	e4c4      	b.n	802321c <_strtod_l+0x454>
 8023892:	bf00      	nop
 8023894:	f3af 8000 	nop.w
 8023898:	00000000 	.word	0x00000000
 802389c:	bff00000 	.word	0xbff00000
 80238a0:	00000000 	.word	0x00000000
 80238a4:	3ff00000 	.word	0x3ff00000
 80238a8:	94a03595 	.word	0x94a03595
 80238ac:	3fdfffff 	.word	0x3fdfffff
 80238b0:	35afe535 	.word	0x35afe535
 80238b4:	3fe00000 	.word	0x3fe00000
 80238b8:	000fffff 	.word	0x000fffff
 80238bc:	7ff00000 	.word	0x7ff00000
 80238c0:	7fefffff 	.word	0x7fefffff
 80238c4:	3ff00000 	.word	0x3ff00000
 80238c8:	3fe00000 	.word	0x3fe00000
 80238cc:	7fe00000 	.word	0x7fe00000
 80238d0:	7c9fffff 	.word	0x7c9fffff
 80238d4:	9b08      	ldr	r3, [sp, #32]
 80238d6:	b323      	cbz	r3, 8023922 <_strtod_l+0xb5a>
 80238d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80238dc:	d821      	bhi.n	8023922 <_strtod_l+0xb5a>
 80238de:	a328      	add	r3, pc, #160	@ (adr r3, 8023980 <_strtod_l+0xbb8>)
 80238e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238e4:	4630      	mov	r0, r6
 80238e6:	4639      	mov	r1, r7
 80238e8:	f7e5 f84a 	bl	8008980 <__aeabi_dcmple>
 80238ec:	b1a0      	cbz	r0, 8023918 <_strtod_l+0xb50>
 80238ee:	4639      	mov	r1, r7
 80238f0:	4630      	mov	r0, r6
 80238f2:	f7e5 f8a1 	bl	8008a38 <__aeabi_d2uiz>
 80238f6:	2801      	cmp	r0, #1
 80238f8:	bf38      	it	cc
 80238fa:	2001      	movcc	r0, #1
 80238fc:	f7e4 fd4a 	bl	8008394 <__aeabi_ui2d>
 8023900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023902:	4606      	mov	r6, r0
 8023904:	460f      	mov	r7, r1
 8023906:	b9fb      	cbnz	r3, 8023948 <_strtod_l+0xb80>
 8023908:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802390c:	9014      	str	r0, [sp, #80]	@ 0x50
 802390e:	9315      	str	r3, [sp, #84]	@ 0x54
 8023910:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8023914:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8023918:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802391a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 802391e:	1b5b      	subs	r3, r3, r5
 8023920:	9311      	str	r3, [sp, #68]	@ 0x44
 8023922:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8023926:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 802392a:	f003 f913 	bl	8026b54 <__ulp>
 802392e:	4650      	mov	r0, sl
 8023930:	ec53 2b10 	vmov	r2, r3, d0
 8023934:	4659      	mov	r1, fp
 8023936:	f7e4 fda7 	bl	8008488 <__aeabi_dmul>
 802393a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 802393e:	f7e4 fbed 	bl	800811c <__adddf3>
 8023942:	4682      	mov	sl, r0
 8023944:	468b      	mov	fp, r1
 8023946:	e770      	b.n	802382a <_strtod_l+0xa62>
 8023948:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 802394c:	e7e0      	b.n	8023910 <_strtod_l+0xb48>
 802394e:	a30e      	add	r3, pc, #56	@ (adr r3, 8023988 <_strtod_l+0xbc0>)
 8023950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023954:	f7e5 f80a 	bl	800896c <__aeabi_dcmplt>
 8023958:	e798      	b.n	802388c <_strtod_l+0xac4>
 802395a:	2300      	movs	r3, #0
 802395c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802395e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8023960:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023962:	6013      	str	r3, [r2, #0]
 8023964:	f7ff ba6d 	b.w	8022e42 <_strtod_l+0x7a>
 8023968:	2a65      	cmp	r2, #101	@ 0x65
 802396a:	f43f ab66 	beq.w	802303a <_strtod_l+0x272>
 802396e:	2a45      	cmp	r2, #69	@ 0x45
 8023970:	f43f ab63 	beq.w	802303a <_strtod_l+0x272>
 8023974:	2301      	movs	r3, #1
 8023976:	f7ff bb9e 	b.w	80230b6 <_strtod_l+0x2ee>
 802397a:	bf00      	nop
 802397c:	f3af 8000 	nop.w
 8023980:	ffc00000 	.word	0xffc00000
 8023984:	41dfffff 	.word	0x41dfffff
 8023988:	94a03595 	.word	0x94a03595
 802398c:	3fcfffff 	.word	0x3fcfffff

08023990 <_strtod_r>:
 8023990:	4b01      	ldr	r3, [pc, #4]	@ (8023998 <_strtod_r+0x8>)
 8023992:	f7ff ba19 	b.w	8022dc8 <_strtod_l>
 8023996:	bf00      	nop
 8023998:	200004c0 	.word	0x200004c0

0802399c <_strtol_l.constprop.0>:
 802399c:	2b24      	cmp	r3, #36	@ 0x24
 802399e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80239a2:	4686      	mov	lr, r0
 80239a4:	4690      	mov	r8, r2
 80239a6:	d801      	bhi.n	80239ac <_strtol_l.constprop.0+0x10>
 80239a8:	2b01      	cmp	r3, #1
 80239aa:	d106      	bne.n	80239ba <_strtol_l.constprop.0+0x1e>
 80239ac:	f001 faea 	bl	8024f84 <__errno>
 80239b0:	2316      	movs	r3, #22
 80239b2:	6003      	str	r3, [r0, #0]
 80239b4:	2000      	movs	r0, #0
 80239b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80239ba:	4834      	ldr	r0, [pc, #208]	@ (8023a8c <_strtol_l.constprop.0+0xf0>)
 80239bc:	460d      	mov	r5, r1
 80239be:	462a      	mov	r2, r5
 80239c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80239c4:	5d06      	ldrb	r6, [r0, r4]
 80239c6:	f016 0608 	ands.w	r6, r6, #8
 80239ca:	d1f8      	bne.n	80239be <_strtol_l.constprop.0+0x22>
 80239cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80239ce:	d12d      	bne.n	8023a2c <_strtol_l.constprop.0+0x90>
 80239d0:	782c      	ldrb	r4, [r5, #0]
 80239d2:	2601      	movs	r6, #1
 80239d4:	1c95      	adds	r5, r2, #2
 80239d6:	f033 0210 	bics.w	r2, r3, #16
 80239da:	d109      	bne.n	80239f0 <_strtol_l.constprop.0+0x54>
 80239dc:	2c30      	cmp	r4, #48	@ 0x30
 80239de:	d12a      	bne.n	8023a36 <_strtol_l.constprop.0+0x9a>
 80239e0:	782a      	ldrb	r2, [r5, #0]
 80239e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80239e6:	2a58      	cmp	r2, #88	@ 0x58
 80239e8:	d125      	bne.n	8023a36 <_strtol_l.constprop.0+0x9a>
 80239ea:	786c      	ldrb	r4, [r5, #1]
 80239ec:	2310      	movs	r3, #16
 80239ee:	3502      	adds	r5, #2
 80239f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80239f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80239f8:	2200      	movs	r2, #0
 80239fa:	fbbc f9f3 	udiv	r9, ip, r3
 80239fe:	4610      	mov	r0, r2
 8023a00:	fb03 ca19 	mls	sl, r3, r9, ip
 8023a04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8023a08:	2f09      	cmp	r7, #9
 8023a0a:	d81b      	bhi.n	8023a44 <_strtol_l.constprop.0+0xa8>
 8023a0c:	463c      	mov	r4, r7
 8023a0e:	42a3      	cmp	r3, r4
 8023a10:	dd27      	ble.n	8023a62 <_strtol_l.constprop.0+0xc6>
 8023a12:	1c57      	adds	r7, r2, #1
 8023a14:	d007      	beq.n	8023a26 <_strtol_l.constprop.0+0x8a>
 8023a16:	4581      	cmp	r9, r0
 8023a18:	d320      	bcc.n	8023a5c <_strtol_l.constprop.0+0xc0>
 8023a1a:	d101      	bne.n	8023a20 <_strtol_l.constprop.0+0x84>
 8023a1c:	45a2      	cmp	sl, r4
 8023a1e:	db1d      	blt.n	8023a5c <_strtol_l.constprop.0+0xc0>
 8023a20:	fb00 4003 	mla	r0, r0, r3, r4
 8023a24:	2201      	movs	r2, #1
 8023a26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023a2a:	e7eb      	b.n	8023a04 <_strtol_l.constprop.0+0x68>
 8023a2c:	2c2b      	cmp	r4, #43	@ 0x2b
 8023a2e:	bf04      	itt	eq
 8023a30:	782c      	ldrbeq	r4, [r5, #0]
 8023a32:	1c95      	addeq	r5, r2, #2
 8023a34:	e7cf      	b.n	80239d6 <_strtol_l.constprop.0+0x3a>
 8023a36:	2b00      	cmp	r3, #0
 8023a38:	d1da      	bne.n	80239f0 <_strtol_l.constprop.0+0x54>
 8023a3a:	2c30      	cmp	r4, #48	@ 0x30
 8023a3c:	bf0c      	ite	eq
 8023a3e:	2308      	moveq	r3, #8
 8023a40:	230a      	movne	r3, #10
 8023a42:	e7d5      	b.n	80239f0 <_strtol_l.constprop.0+0x54>
 8023a44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8023a48:	2f19      	cmp	r7, #25
 8023a4a:	d801      	bhi.n	8023a50 <_strtol_l.constprop.0+0xb4>
 8023a4c:	3c37      	subs	r4, #55	@ 0x37
 8023a4e:	e7de      	b.n	8023a0e <_strtol_l.constprop.0+0x72>
 8023a50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8023a54:	2f19      	cmp	r7, #25
 8023a56:	d804      	bhi.n	8023a62 <_strtol_l.constprop.0+0xc6>
 8023a58:	3c57      	subs	r4, #87	@ 0x57
 8023a5a:	e7d8      	b.n	8023a0e <_strtol_l.constprop.0+0x72>
 8023a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8023a60:	e7e1      	b.n	8023a26 <_strtol_l.constprop.0+0x8a>
 8023a62:	1c53      	adds	r3, r2, #1
 8023a64:	d108      	bne.n	8023a78 <_strtol_l.constprop.0+0xdc>
 8023a66:	2322      	movs	r3, #34	@ 0x22
 8023a68:	f8ce 3000 	str.w	r3, [lr]
 8023a6c:	4660      	mov	r0, ip
 8023a6e:	f1b8 0f00 	cmp.w	r8, #0
 8023a72:	d0a0      	beq.n	80239b6 <_strtol_l.constprop.0+0x1a>
 8023a74:	1e69      	subs	r1, r5, #1
 8023a76:	e006      	b.n	8023a86 <_strtol_l.constprop.0+0xea>
 8023a78:	b106      	cbz	r6, 8023a7c <_strtol_l.constprop.0+0xe0>
 8023a7a:	4240      	negs	r0, r0
 8023a7c:	f1b8 0f00 	cmp.w	r8, #0
 8023a80:	d099      	beq.n	80239b6 <_strtol_l.constprop.0+0x1a>
 8023a82:	2a00      	cmp	r2, #0
 8023a84:	d1f6      	bne.n	8023a74 <_strtol_l.constprop.0+0xd8>
 8023a86:	f8c8 1000 	str.w	r1, [r8]
 8023a8a:	e794      	b.n	80239b6 <_strtol_l.constprop.0+0x1a>
 8023a8c:	080316c1 	.word	0x080316c1

08023a90 <_strtol_r>:
 8023a90:	f7ff bf84 	b.w	802399c <_strtol_l.constprop.0>

08023a94 <swapfunc>:
 8023a94:	2b02      	cmp	r3, #2
 8023a96:	b510      	push	{r4, lr}
 8023a98:	d00a      	beq.n	8023ab0 <swapfunc+0x1c>
 8023a9a:	0892      	lsrs	r2, r2, #2
 8023a9c:	3a01      	subs	r2, #1
 8023a9e:	6803      	ldr	r3, [r0, #0]
 8023aa0:	680c      	ldr	r4, [r1, #0]
 8023aa2:	f840 4b04 	str.w	r4, [r0], #4
 8023aa6:	2a00      	cmp	r2, #0
 8023aa8:	f841 3b04 	str.w	r3, [r1], #4
 8023aac:	dcf6      	bgt.n	8023a9c <swapfunc+0x8>
 8023aae:	bd10      	pop	{r4, pc}
 8023ab0:	4402      	add	r2, r0
 8023ab2:	780c      	ldrb	r4, [r1, #0]
 8023ab4:	7803      	ldrb	r3, [r0, #0]
 8023ab6:	f800 4b01 	strb.w	r4, [r0], #1
 8023aba:	f801 3b01 	strb.w	r3, [r1], #1
 8023abe:	1a13      	subs	r3, r2, r0
 8023ac0:	2b00      	cmp	r3, #0
 8023ac2:	dcf6      	bgt.n	8023ab2 <swapfunc+0x1e>
 8023ac4:	e7f3      	b.n	8023aae <swapfunc+0x1a>

08023ac6 <med3.constprop.0>:
 8023ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ac8:	460f      	mov	r7, r1
 8023aca:	4616      	mov	r6, r2
 8023acc:	4604      	mov	r4, r0
 8023ace:	461d      	mov	r5, r3
 8023ad0:	4798      	blx	r3
 8023ad2:	2800      	cmp	r0, #0
 8023ad4:	4631      	mov	r1, r6
 8023ad6:	4638      	mov	r0, r7
 8023ad8:	da0c      	bge.n	8023af4 <med3.constprop.0+0x2e>
 8023ada:	47a8      	blx	r5
 8023adc:	2800      	cmp	r0, #0
 8023ade:	da02      	bge.n	8023ae6 <med3.constprop.0+0x20>
 8023ae0:	463c      	mov	r4, r7
 8023ae2:	4620      	mov	r0, r4
 8023ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023ae6:	4631      	mov	r1, r6
 8023ae8:	4620      	mov	r0, r4
 8023aea:	47a8      	blx	r5
 8023aec:	2800      	cmp	r0, #0
 8023aee:	daf8      	bge.n	8023ae2 <med3.constprop.0+0x1c>
 8023af0:	4634      	mov	r4, r6
 8023af2:	e7f6      	b.n	8023ae2 <med3.constprop.0+0x1c>
 8023af4:	47a8      	blx	r5
 8023af6:	2800      	cmp	r0, #0
 8023af8:	dcf2      	bgt.n	8023ae0 <med3.constprop.0+0x1a>
 8023afa:	4631      	mov	r1, r6
 8023afc:	4620      	mov	r0, r4
 8023afe:	47a8      	blx	r5
 8023b00:	2800      	cmp	r0, #0
 8023b02:	daf5      	bge.n	8023af0 <med3.constprop.0+0x2a>
 8023b04:	e7ed      	b.n	8023ae2 <med3.constprop.0+0x1c>

08023b06 <qsort>:
 8023b06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b0a:	b095      	sub	sp, #84	@ 0x54
 8023b0c:	4606      	mov	r6, r0
 8023b0e:	9300      	str	r3, [sp, #0]
 8023b10:	ea40 0302 	orr.w	r3, r0, r2
 8023b14:	079b      	lsls	r3, r3, #30
 8023b16:	4614      	mov	r4, r2
 8023b18:	d118      	bne.n	8023b4c <qsort+0x46>
 8023b1a:	f1b2 0804 	subs.w	r8, r2, #4
 8023b1e:	bf18      	it	ne
 8023b20:	f04f 0801 	movne.w	r8, #1
 8023b24:	2300      	movs	r3, #0
 8023b26:	9301      	str	r3, [sp, #4]
 8023b28:	fb04 f701 	mul.w	r7, r4, r1
 8023b2c:	19f3      	adds	r3, r6, r7
 8023b2e:	2906      	cmp	r1, #6
 8023b30:	eb06 0b04 	add.w	fp, r6, r4
 8023b34:	9302      	str	r3, [sp, #8]
 8023b36:	d828      	bhi.n	8023b8a <qsort+0x84>
 8023b38:	9b02      	ldr	r3, [sp, #8]
 8023b3a:	459b      	cmp	fp, r3
 8023b3c:	d310      	bcc.n	8023b60 <qsort+0x5a>
 8023b3e:	9b01      	ldr	r3, [sp, #4]
 8023b40:	2b00      	cmp	r3, #0
 8023b42:	f040 8117 	bne.w	8023d74 <qsort+0x26e>
 8023b46:	b015      	add	sp, #84	@ 0x54
 8023b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b4c:	f04f 0802 	mov.w	r8, #2
 8023b50:	e7e8      	b.n	8023b24 <qsort+0x1e>
 8023b52:	4643      	mov	r3, r8
 8023b54:	4622      	mov	r2, r4
 8023b56:	4639      	mov	r1, r7
 8023b58:	4628      	mov	r0, r5
 8023b5a:	f7ff ff9b 	bl	8023a94 <swapfunc>
 8023b5e:	e00f      	b.n	8023b80 <qsort+0x7a>
 8023b60:	465d      	mov	r5, fp
 8023b62:	e00e      	b.n	8023b82 <qsort+0x7c>
 8023b64:	1b2f      	subs	r7, r5, r4
 8023b66:	9b00      	ldr	r3, [sp, #0]
 8023b68:	4629      	mov	r1, r5
 8023b6a:	4638      	mov	r0, r7
 8023b6c:	4798      	blx	r3
 8023b6e:	2800      	cmp	r0, #0
 8023b70:	dd09      	ble.n	8023b86 <qsort+0x80>
 8023b72:	f1b8 0f00 	cmp.w	r8, #0
 8023b76:	d1ec      	bne.n	8023b52 <qsort+0x4c>
 8023b78:	682b      	ldr	r3, [r5, #0]
 8023b7a:	683a      	ldr	r2, [r7, #0]
 8023b7c:	602a      	str	r2, [r5, #0]
 8023b7e:	603b      	str	r3, [r7, #0]
 8023b80:	463d      	mov	r5, r7
 8023b82:	42ae      	cmp	r6, r5
 8023b84:	d3ee      	bcc.n	8023b64 <qsort+0x5e>
 8023b86:	44a3      	add	fp, r4
 8023b88:	e7d6      	b.n	8023b38 <qsort+0x32>
 8023b8a:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8023b8e:	1b3f      	subs	r7, r7, r4
 8023b90:	2907      	cmp	r1, #7
 8023b92:	fb04 6909 	mla	r9, r4, r9, r6
 8023b96:	4437      	add	r7, r6
 8023b98:	d021      	beq.n	8023bde <qsort+0xd8>
 8023b9a:	2928      	cmp	r1, #40	@ 0x28
 8023b9c:	d944      	bls.n	8023c28 <qsort+0x122>
 8023b9e:	08cd      	lsrs	r5, r1, #3
 8023ba0:	4365      	muls	r5, r4
 8023ba2:	9b00      	ldr	r3, [sp, #0]
 8023ba4:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8023ba8:	1971      	adds	r1, r6, r5
 8023baa:	4630      	mov	r0, r6
 8023bac:	f7ff ff8b 	bl	8023ac6 <med3.constprop.0>
 8023bb0:	4649      	mov	r1, r9
 8023bb2:	eb09 0205 	add.w	r2, r9, r5
 8023bb6:	9b00      	ldr	r3, [sp, #0]
 8023bb8:	4682      	mov	sl, r0
 8023bba:	1b48      	subs	r0, r1, r5
 8023bbc:	f7ff ff83 	bl	8023ac6 <med3.constprop.0>
 8023bc0:	463a      	mov	r2, r7
 8023bc2:	9b00      	ldr	r3, [sp, #0]
 8023bc4:	4681      	mov	r9, r0
 8023bc6:	1b79      	subs	r1, r7, r5
 8023bc8:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8023bcc:	f7ff ff7b 	bl	8023ac6 <med3.constprop.0>
 8023bd0:	4602      	mov	r2, r0
 8023bd2:	4649      	mov	r1, r9
 8023bd4:	9b00      	ldr	r3, [sp, #0]
 8023bd6:	4650      	mov	r0, sl
 8023bd8:	f7ff ff75 	bl	8023ac6 <med3.constprop.0>
 8023bdc:	4681      	mov	r9, r0
 8023bde:	f1b8 0f00 	cmp.w	r8, #0
 8023be2:	d124      	bne.n	8023c2e <qsort+0x128>
 8023be4:	6833      	ldr	r3, [r6, #0]
 8023be6:	f8d9 2000 	ldr.w	r2, [r9]
 8023bea:	6032      	str	r2, [r6, #0]
 8023bec:	f8c9 3000 	str.w	r3, [r9]
 8023bf0:	46d9      	mov	r9, fp
 8023bf2:	46ba      	mov	sl, r7
 8023bf4:	465d      	mov	r5, fp
 8023bf6:	2300      	movs	r3, #0
 8023bf8:	45b9      	cmp	r9, r7
 8023bfa:	d857      	bhi.n	8023cac <qsort+0x1a6>
 8023bfc:	9303      	str	r3, [sp, #12]
 8023bfe:	4631      	mov	r1, r6
 8023c00:	9b00      	ldr	r3, [sp, #0]
 8023c02:	4648      	mov	r0, r9
 8023c04:	4798      	blx	r3
 8023c06:	2800      	cmp	r0, #0
 8023c08:	9b03      	ldr	r3, [sp, #12]
 8023c0a:	dc2c      	bgt.n	8023c66 <qsort+0x160>
 8023c0c:	d10a      	bne.n	8023c24 <qsort+0x11e>
 8023c0e:	f1b8 0f00 	cmp.w	r8, #0
 8023c12:	d113      	bne.n	8023c3c <qsort+0x136>
 8023c14:	682b      	ldr	r3, [r5, #0]
 8023c16:	f8d9 2000 	ldr.w	r2, [r9]
 8023c1a:	602a      	str	r2, [r5, #0]
 8023c1c:	f8c9 3000 	str.w	r3, [r9]
 8023c20:	4425      	add	r5, r4
 8023c22:	2301      	movs	r3, #1
 8023c24:	44a1      	add	r9, r4
 8023c26:	e7e7      	b.n	8023bf8 <qsort+0xf2>
 8023c28:	463a      	mov	r2, r7
 8023c2a:	46b2      	mov	sl, r6
 8023c2c:	e7d1      	b.n	8023bd2 <qsort+0xcc>
 8023c2e:	4643      	mov	r3, r8
 8023c30:	4622      	mov	r2, r4
 8023c32:	4649      	mov	r1, r9
 8023c34:	4630      	mov	r0, r6
 8023c36:	f7ff ff2d 	bl	8023a94 <swapfunc>
 8023c3a:	e7d9      	b.n	8023bf0 <qsort+0xea>
 8023c3c:	4643      	mov	r3, r8
 8023c3e:	4622      	mov	r2, r4
 8023c40:	4649      	mov	r1, r9
 8023c42:	4628      	mov	r0, r5
 8023c44:	f7ff ff26 	bl	8023a94 <swapfunc>
 8023c48:	e7ea      	b.n	8023c20 <qsort+0x11a>
 8023c4a:	d10b      	bne.n	8023c64 <qsort+0x15e>
 8023c4c:	f1b8 0f00 	cmp.w	r8, #0
 8023c50:	d11e      	bne.n	8023c90 <qsort+0x18a>
 8023c52:	683b      	ldr	r3, [r7, #0]
 8023c54:	f8da 2000 	ldr.w	r2, [sl]
 8023c58:	603a      	str	r2, [r7, #0]
 8023c5a:	f8ca 3000 	str.w	r3, [sl]
 8023c5e:	ebaa 0a04 	sub.w	sl, sl, r4
 8023c62:	2301      	movs	r3, #1
 8023c64:	1b3f      	subs	r7, r7, r4
 8023c66:	45b9      	cmp	r9, r7
 8023c68:	d820      	bhi.n	8023cac <qsort+0x1a6>
 8023c6a:	9303      	str	r3, [sp, #12]
 8023c6c:	4631      	mov	r1, r6
 8023c6e:	9b00      	ldr	r3, [sp, #0]
 8023c70:	4638      	mov	r0, r7
 8023c72:	4798      	blx	r3
 8023c74:	2800      	cmp	r0, #0
 8023c76:	9b03      	ldr	r3, [sp, #12]
 8023c78:	dae7      	bge.n	8023c4a <qsort+0x144>
 8023c7a:	f1b8 0f00 	cmp.w	r8, #0
 8023c7e:	d10e      	bne.n	8023c9e <qsort+0x198>
 8023c80:	f8d9 3000 	ldr.w	r3, [r9]
 8023c84:	683a      	ldr	r2, [r7, #0]
 8023c86:	f8c9 2000 	str.w	r2, [r9]
 8023c8a:	603b      	str	r3, [r7, #0]
 8023c8c:	1b3f      	subs	r7, r7, r4
 8023c8e:	e7c8      	b.n	8023c22 <qsort+0x11c>
 8023c90:	4643      	mov	r3, r8
 8023c92:	4622      	mov	r2, r4
 8023c94:	4651      	mov	r1, sl
 8023c96:	4638      	mov	r0, r7
 8023c98:	f7ff fefc 	bl	8023a94 <swapfunc>
 8023c9c:	e7df      	b.n	8023c5e <qsort+0x158>
 8023c9e:	4643      	mov	r3, r8
 8023ca0:	4622      	mov	r2, r4
 8023ca2:	4639      	mov	r1, r7
 8023ca4:	4648      	mov	r0, r9
 8023ca6:	f7ff fef5 	bl	8023a94 <swapfunc>
 8023caa:	e7ef      	b.n	8023c8c <qsort+0x186>
 8023cac:	b9fb      	cbnz	r3, 8023cee <qsort+0x1e8>
 8023cae:	9b02      	ldr	r3, [sp, #8]
 8023cb0:	459b      	cmp	fp, r3
 8023cb2:	f4bf af44 	bcs.w	8023b3e <qsort+0x38>
 8023cb6:	465d      	mov	r5, fp
 8023cb8:	e015      	b.n	8023ce6 <qsort+0x1e0>
 8023cba:	4643      	mov	r3, r8
 8023cbc:	4622      	mov	r2, r4
 8023cbe:	4639      	mov	r1, r7
 8023cc0:	4628      	mov	r0, r5
 8023cc2:	f7ff fee7 	bl	8023a94 <swapfunc>
 8023cc6:	e00d      	b.n	8023ce4 <qsort+0x1de>
 8023cc8:	1b2f      	subs	r7, r5, r4
 8023cca:	9b00      	ldr	r3, [sp, #0]
 8023ccc:	4629      	mov	r1, r5
 8023cce:	4638      	mov	r0, r7
 8023cd0:	4798      	blx	r3
 8023cd2:	2800      	cmp	r0, #0
 8023cd4:	dd09      	ble.n	8023cea <qsort+0x1e4>
 8023cd6:	f1b8 0f00 	cmp.w	r8, #0
 8023cda:	d1ee      	bne.n	8023cba <qsort+0x1b4>
 8023cdc:	682b      	ldr	r3, [r5, #0]
 8023cde:	683a      	ldr	r2, [r7, #0]
 8023ce0:	602a      	str	r2, [r5, #0]
 8023ce2:	603b      	str	r3, [r7, #0]
 8023ce4:	463d      	mov	r5, r7
 8023ce6:	42ae      	cmp	r6, r5
 8023ce8:	d3ee      	bcc.n	8023cc8 <qsort+0x1c2>
 8023cea:	44a3      	add	fp, r4
 8023cec:	e7df      	b.n	8023cae <qsort+0x1a8>
 8023cee:	eba9 0b05 	sub.w	fp, r9, r5
 8023cf2:	1baa      	subs	r2, r5, r6
 8023cf4:	455a      	cmp	r2, fp
 8023cf6:	bfa8      	it	ge
 8023cf8:	465a      	movge	r2, fp
 8023cfa:	b12a      	cbz	r2, 8023d08 <qsort+0x202>
 8023cfc:	4643      	mov	r3, r8
 8023cfe:	eba9 0102 	sub.w	r1, r9, r2
 8023d02:	4630      	mov	r0, r6
 8023d04:	f7ff fec6 	bl	8023a94 <swapfunc>
 8023d08:	9b02      	ldr	r3, [sp, #8]
 8023d0a:	eba3 020a 	sub.w	r2, r3, sl
 8023d0e:	ebaa 0507 	sub.w	r5, sl, r7
 8023d12:	1b12      	subs	r2, r2, r4
 8023d14:	42aa      	cmp	r2, r5
 8023d16:	bf28      	it	cs
 8023d18:	462a      	movcs	r2, r5
 8023d1a:	b12a      	cbz	r2, 8023d28 <qsort+0x222>
 8023d1c:	9902      	ldr	r1, [sp, #8]
 8023d1e:	4643      	mov	r3, r8
 8023d20:	1a89      	subs	r1, r1, r2
 8023d22:	4648      	mov	r0, r9
 8023d24:	f7ff feb6 	bl	8023a94 <swapfunc>
 8023d28:	9b02      	ldr	r3, [sp, #8]
 8023d2a:	455d      	cmp	r5, fp
 8023d2c:	465f      	mov	r7, fp
 8023d2e:	eba3 0005 	sub.w	r0, r3, r5
 8023d32:	d904      	bls.n	8023d3e <qsort+0x238>
 8023d34:	4633      	mov	r3, r6
 8023d36:	462f      	mov	r7, r5
 8023d38:	4606      	mov	r6, r0
 8023d3a:	465d      	mov	r5, fp
 8023d3c:	4618      	mov	r0, r3
 8023d3e:	42a5      	cmp	r5, r4
 8023d40:	d921      	bls.n	8023d86 <qsort+0x280>
 8023d42:	fbb5 f1f4 	udiv	r1, r5, r4
 8023d46:	9b01      	ldr	r3, [sp, #4]
 8023d48:	2b07      	cmp	r3, #7
 8023d4a:	d80d      	bhi.n	8023d68 <qsort+0x262>
 8023d4c:	fbb7 f7f4 	udiv	r7, r7, r4
 8023d50:	aa14      	add	r2, sp, #80	@ 0x50
 8023d52:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8023d56:	f843 6c40 	str.w	r6, [r3, #-64]
 8023d5a:	f843 7c3c 	str.w	r7, [r3, #-60]
 8023d5e:	9b01      	ldr	r3, [sp, #4]
 8023d60:	3301      	adds	r3, #1
 8023d62:	9301      	str	r3, [sp, #4]
 8023d64:	4606      	mov	r6, r0
 8023d66:	e6df      	b.n	8023b28 <qsort+0x22>
 8023d68:	9b00      	ldr	r3, [sp, #0]
 8023d6a:	4622      	mov	r2, r4
 8023d6c:	f7ff fecb 	bl	8023b06 <qsort>
 8023d70:	42a7      	cmp	r7, r4
 8023d72:	d80b      	bhi.n	8023d8c <qsort+0x286>
 8023d74:	9b01      	ldr	r3, [sp, #4]
 8023d76:	aa14      	add	r2, sp, #80	@ 0x50
 8023d78:	3b01      	subs	r3, #1
 8023d7a:	9301      	str	r3, [sp, #4]
 8023d7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8023d80:	e953 0110 	ldrd	r0, r1, [r3, #-64]	@ 0x40
 8023d84:	e7ee      	b.n	8023d64 <qsort+0x25e>
 8023d86:	42a7      	cmp	r7, r4
 8023d88:	f67f aed9 	bls.w	8023b3e <qsort+0x38>
 8023d8c:	fbb7 f1f4 	udiv	r1, r7, r4
 8023d90:	4630      	mov	r0, r6
 8023d92:	e7e7      	b.n	8023d64 <qsort+0x25e>

08023d94 <__cvt>:
 8023d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023d98:	ec57 6b10 	vmov	r6, r7, d0
 8023d9c:	2f00      	cmp	r7, #0
 8023d9e:	460c      	mov	r4, r1
 8023da0:	4619      	mov	r1, r3
 8023da2:	463b      	mov	r3, r7
 8023da4:	bfbb      	ittet	lt
 8023da6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8023daa:	461f      	movlt	r7, r3
 8023dac:	2300      	movge	r3, #0
 8023dae:	232d      	movlt	r3, #45	@ 0x2d
 8023db0:	700b      	strb	r3, [r1, #0]
 8023db2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023db4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8023db8:	4691      	mov	r9, r2
 8023dba:	f023 0820 	bic.w	r8, r3, #32
 8023dbe:	bfbc      	itt	lt
 8023dc0:	4632      	movlt	r2, r6
 8023dc2:	4616      	movlt	r6, r2
 8023dc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8023dc8:	d005      	beq.n	8023dd6 <__cvt+0x42>
 8023dca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8023dce:	d100      	bne.n	8023dd2 <__cvt+0x3e>
 8023dd0:	3401      	adds	r4, #1
 8023dd2:	2102      	movs	r1, #2
 8023dd4:	e000      	b.n	8023dd8 <__cvt+0x44>
 8023dd6:	2103      	movs	r1, #3
 8023dd8:	ab03      	add	r3, sp, #12
 8023dda:	9301      	str	r3, [sp, #4]
 8023ddc:	ab02      	add	r3, sp, #8
 8023dde:	9300      	str	r3, [sp, #0]
 8023de0:	ec47 6b10 	vmov	d0, r6, r7
 8023de4:	4653      	mov	r3, sl
 8023de6:	4622      	mov	r2, r4
 8023de8:	f001 f9b2 	bl	8025150 <_dtoa_r>
 8023dec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8023df0:	4605      	mov	r5, r0
 8023df2:	d119      	bne.n	8023e28 <__cvt+0x94>
 8023df4:	f019 0f01 	tst.w	r9, #1
 8023df8:	d00e      	beq.n	8023e18 <__cvt+0x84>
 8023dfa:	eb00 0904 	add.w	r9, r0, r4
 8023dfe:	2200      	movs	r2, #0
 8023e00:	2300      	movs	r3, #0
 8023e02:	4630      	mov	r0, r6
 8023e04:	4639      	mov	r1, r7
 8023e06:	f7e4 fda7 	bl	8008958 <__aeabi_dcmpeq>
 8023e0a:	b108      	cbz	r0, 8023e10 <__cvt+0x7c>
 8023e0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8023e10:	2230      	movs	r2, #48	@ 0x30
 8023e12:	9b03      	ldr	r3, [sp, #12]
 8023e14:	454b      	cmp	r3, r9
 8023e16:	d31e      	bcc.n	8023e56 <__cvt+0xc2>
 8023e18:	9b03      	ldr	r3, [sp, #12]
 8023e1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023e1c:	1b5b      	subs	r3, r3, r5
 8023e1e:	4628      	mov	r0, r5
 8023e20:	6013      	str	r3, [r2, #0]
 8023e22:	b004      	add	sp, #16
 8023e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023e28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8023e2c:	eb00 0904 	add.w	r9, r0, r4
 8023e30:	d1e5      	bne.n	8023dfe <__cvt+0x6a>
 8023e32:	7803      	ldrb	r3, [r0, #0]
 8023e34:	2b30      	cmp	r3, #48	@ 0x30
 8023e36:	d10a      	bne.n	8023e4e <__cvt+0xba>
 8023e38:	2200      	movs	r2, #0
 8023e3a:	2300      	movs	r3, #0
 8023e3c:	4630      	mov	r0, r6
 8023e3e:	4639      	mov	r1, r7
 8023e40:	f7e4 fd8a 	bl	8008958 <__aeabi_dcmpeq>
 8023e44:	b918      	cbnz	r0, 8023e4e <__cvt+0xba>
 8023e46:	f1c4 0401 	rsb	r4, r4, #1
 8023e4a:	f8ca 4000 	str.w	r4, [sl]
 8023e4e:	f8da 3000 	ldr.w	r3, [sl]
 8023e52:	4499      	add	r9, r3
 8023e54:	e7d3      	b.n	8023dfe <__cvt+0x6a>
 8023e56:	1c59      	adds	r1, r3, #1
 8023e58:	9103      	str	r1, [sp, #12]
 8023e5a:	701a      	strb	r2, [r3, #0]
 8023e5c:	e7d9      	b.n	8023e12 <__cvt+0x7e>

08023e5e <__exponent>:
 8023e5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023e60:	2900      	cmp	r1, #0
 8023e62:	bfba      	itte	lt
 8023e64:	4249      	neglt	r1, r1
 8023e66:	232d      	movlt	r3, #45	@ 0x2d
 8023e68:	232b      	movge	r3, #43	@ 0x2b
 8023e6a:	2909      	cmp	r1, #9
 8023e6c:	7002      	strb	r2, [r0, #0]
 8023e6e:	7043      	strb	r3, [r0, #1]
 8023e70:	dd29      	ble.n	8023ec6 <__exponent+0x68>
 8023e72:	f10d 0307 	add.w	r3, sp, #7
 8023e76:	461d      	mov	r5, r3
 8023e78:	270a      	movs	r7, #10
 8023e7a:	461a      	mov	r2, r3
 8023e7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8023e80:	fb07 1416 	mls	r4, r7, r6, r1
 8023e84:	3430      	adds	r4, #48	@ 0x30
 8023e86:	f802 4c01 	strb.w	r4, [r2, #-1]
 8023e8a:	460c      	mov	r4, r1
 8023e8c:	2c63      	cmp	r4, #99	@ 0x63
 8023e8e:	f103 33ff 	add.w	r3, r3, #4294967295
 8023e92:	4631      	mov	r1, r6
 8023e94:	dcf1      	bgt.n	8023e7a <__exponent+0x1c>
 8023e96:	3130      	adds	r1, #48	@ 0x30
 8023e98:	1e94      	subs	r4, r2, #2
 8023e9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8023e9e:	1c41      	adds	r1, r0, #1
 8023ea0:	4623      	mov	r3, r4
 8023ea2:	42ab      	cmp	r3, r5
 8023ea4:	d30a      	bcc.n	8023ebc <__exponent+0x5e>
 8023ea6:	f10d 0309 	add.w	r3, sp, #9
 8023eaa:	1a9b      	subs	r3, r3, r2
 8023eac:	42ac      	cmp	r4, r5
 8023eae:	bf88      	it	hi
 8023eb0:	2300      	movhi	r3, #0
 8023eb2:	3302      	adds	r3, #2
 8023eb4:	4403      	add	r3, r0
 8023eb6:	1a18      	subs	r0, r3, r0
 8023eb8:	b003      	add	sp, #12
 8023eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023ebc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8023ec0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8023ec4:	e7ed      	b.n	8023ea2 <__exponent+0x44>
 8023ec6:	2330      	movs	r3, #48	@ 0x30
 8023ec8:	3130      	adds	r1, #48	@ 0x30
 8023eca:	7083      	strb	r3, [r0, #2]
 8023ecc:	70c1      	strb	r1, [r0, #3]
 8023ece:	1d03      	adds	r3, r0, #4
 8023ed0:	e7f1      	b.n	8023eb6 <__exponent+0x58>
	...

08023ed4 <_printf_float>:
 8023ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ed8:	b08d      	sub	sp, #52	@ 0x34
 8023eda:	460c      	mov	r4, r1
 8023edc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8023ee0:	4616      	mov	r6, r2
 8023ee2:	461f      	mov	r7, r3
 8023ee4:	4605      	mov	r5, r0
 8023ee6:	f000 fff3 	bl	8024ed0 <_localeconv_r>
 8023eea:	6803      	ldr	r3, [r0, #0]
 8023eec:	9304      	str	r3, [sp, #16]
 8023eee:	4618      	mov	r0, r3
 8023ef0:	f7e4 f906 	bl	8008100 <strlen>
 8023ef4:	2300      	movs	r3, #0
 8023ef6:	930a      	str	r3, [sp, #40]	@ 0x28
 8023ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8023efc:	9005      	str	r0, [sp, #20]
 8023efe:	3307      	adds	r3, #7
 8023f00:	f023 0307 	bic.w	r3, r3, #7
 8023f04:	f103 0208 	add.w	r2, r3, #8
 8023f08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8023f0c:	f8d4 b000 	ldr.w	fp, [r4]
 8023f10:	f8c8 2000 	str.w	r2, [r8]
 8023f14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023f18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8023f1c:	9307      	str	r3, [sp, #28]
 8023f1e:	f8cd 8018 	str.w	r8, [sp, #24]
 8023f22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8023f26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023f2a:	4b9c      	ldr	r3, [pc, #624]	@ (802419c <_printf_float+0x2c8>)
 8023f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8023f30:	f7e4 fd44 	bl	80089bc <__aeabi_dcmpun>
 8023f34:	bb70      	cbnz	r0, 8023f94 <_printf_float+0xc0>
 8023f36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023f3a:	4b98      	ldr	r3, [pc, #608]	@ (802419c <_printf_float+0x2c8>)
 8023f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8023f40:	f7e4 fd1e 	bl	8008980 <__aeabi_dcmple>
 8023f44:	bb30      	cbnz	r0, 8023f94 <_printf_float+0xc0>
 8023f46:	2200      	movs	r2, #0
 8023f48:	2300      	movs	r3, #0
 8023f4a:	4640      	mov	r0, r8
 8023f4c:	4649      	mov	r1, r9
 8023f4e:	f7e4 fd0d 	bl	800896c <__aeabi_dcmplt>
 8023f52:	b110      	cbz	r0, 8023f5a <_printf_float+0x86>
 8023f54:	232d      	movs	r3, #45	@ 0x2d
 8023f56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023f5a:	4a91      	ldr	r2, [pc, #580]	@ (80241a0 <_printf_float+0x2cc>)
 8023f5c:	4b91      	ldr	r3, [pc, #580]	@ (80241a4 <_printf_float+0x2d0>)
 8023f5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8023f62:	bf94      	ite	ls
 8023f64:	4690      	movls	r8, r2
 8023f66:	4698      	movhi	r8, r3
 8023f68:	2303      	movs	r3, #3
 8023f6a:	6123      	str	r3, [r4, #16]
 8023f6c:	f02b 0304 	bic.w	r3, fp, #4
 8023f70:	6023      	str	r3, [r4, #0]
 8023f72:	f04f 0900 	mov.w	r9, #0
 8023f76:	9700      	str	r7, [sp, #0]
 8023f78:	4633      	mov	r3, r6
 8023f7a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8023f7c:	4621      	mov	r1, r4
 8023f7e:	4628      	mov	r0, r5
 8023f80:	f000 f9d2 	bl	8024328 <_printf_common>
 8023f84:	3001      	adds	r0, #1
 8023f86:	f040 808d 	bne.w	80240a4 <_printf_float+0x1d0>
 8023f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8023f8e:	b00d      	add	sp, #52	@ 0x34
 8023f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f94:	4642      	mov	r2, r8
 8023f96:	464b      	mov	r3, r9
 8023f98:	4640      	mov	r0, r8
 8023f9a:	4649      	mov	r1, r9
 8023f9c:	f7e4 fd0e 	bl	80089bc <__aeabi_dcmpun>
 8023fa0:	b140      	cbz	r0, 8023fb4 <_printf_float+0xe0>
 8023fa2:	464b      	mov	r3, r9
 8023fa4:	2b00      	cmp	r3, #0
 8023fa6:	bfbc      	itt	lt
 8023fa8:	232d      	movlt	r3, #45	@ 0x2d
 8023faa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8023fae:	4a7e      	ldr	r2, [pc, #504]	@ (80241a8 <_printf_float+0x2d4>)
 8023fb0:	4b7e      	ldr	r3, [pc, #504]	@ (80241ac <_printf_float+0x2d8>)
 8023fb2:	e7d4      	b.n	8023f5e <_printf_float+0x8a>
 8023fb4:	6863      	ldr	r3, [r4, #4]
 8023fb6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8023fba:	9206      	str	r2, [sp, #24]
 8023fbc:	1c5a      	adds	r2, r3, #1
 8023fbe:	d13b      	bne.n	8024038 <_printf_float+0x164>
 8023fc0:	2306      	movs	r3, #6
 8023fc2:	6063      	str	r3, [r4, #4]
 8023fc4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8023fc8:	2300      	movs	r3, #0
 8023fca:	6022      	str	r2, [r4, #0]
 8023fcc:	9303      	str	r3, [sp, #12]
 8023fce:	ab0a      	add	r3, sp, #40	@ 0x28
 8023fd0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8023fd4:	ab09      	add	r3, sp, #36	@ 0x24
 8023fd6:	9300      	str	r3, [sp, #0]
 8023fd8:	6861      	ldr	r1, [r4, #4]
 8023fda:	ec49 8b10 	vmov	d0, r8, r9
 8023fde:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8023fe2:	4628      	mov	r0, r5
 8023fe4:	f7ff fed6 	bl	8023d94 <__cvt>
 8023fe8:	9b06      	ldr	r3, [sp, #24]
 8023fea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023fec:	2b47      	cmp	r3, #71	@ 0x47
 8023fee:	4680      	mov	r8, r0
 8023ff0:	d129      	bne.n	8024046 <_printf_float+0x172>
 8023ff2:	1cc8      	adds	r0, r1, #3
 8023ff4:	db02      	blt.n	8023ffc <_printf_float+0x128>
 8023ff6:	6863      	ldr	r3, [r4, #4]
 8023ff8:	4299      	cmp	r1, r3
 8023ffa:	dd41      	ble.n	8024080 <_printf_float+0x1ac>
 8023ffc:	f1aa 0a02 	sub.w	sl, sl, #2
 8024000:	fa5f fa8a 	uxtb.w	sl, sl
 8024004:	3901      	subs	r1, #1
 8024006:	4652      	mov	r2, sl
 8024008:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 802400c:	9109      	str	r1, [sp, #36]	@ 0x24
 802400e:	f7ff ff26 	bl	8023e5e <__exponent>
 8024012:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024014:	1813      	adds	r3, r2, r0
 8024016:	2a01      	cmp	r2, #1
 8024018:	4681      	mov	r9, r0
 802401a:	6123      	str	r3, [r4, #16]
 802401c:	dc02      	bgt.n	8024024 <_printf_float+0x150>
 802401e:	6822      	ldr	r2, [r4, #0]
 8024020:	07d2      	lsls	r2, r2, #31
 8024022:	d501      	bpl.n	8024028 <_printf_float+0x154>
 8024024:	3301      	adds	r3, #1
 8024026:	6123      	str	r3, [r4, #16]
 8024028:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 802402c:	2b00      	cmp	r3, #0
 802402e:	d0a2      	beq.n	8023f76 <_printf_float+0xa2>
 8024030:	232d      	movs	r3, #45	@ 0x2d
 8024032:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024036:	e79e      	b.n	8023f76 <_printf_float+0xa2>
 8024038:	9a06      	ldr	r2, [sp, #24]
 802403a:	2a47      	cmp	r2, #71	@ 0x47
 802403c:	d1c2      	bne.n	8023fc4 <_printf_float+0xf0>
 802403e:	2b00      	cmp	r3, #0
 8024040:	d1c0      	bne.n	8023fc4 <_printf_float+0xf0>
 8024042:	2301      	movs	r3, #1
 8024044:	e7bd      	b.n	8023fc2 <_printf_float+0xee>
 8024046:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 802404a:	d9db      	bls.n	8024004 <_printf_float+0x130>
 802404c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8024050:	d118      	bne.n	8024084 <_printf_float+0x1b0>
 8024052:	2900      	cmp	r1, #0
 8024054:	6863      	ldr	r3, [r4, #4]
 8024056:	dd0b      	ble.n	8024070 <_printf_float+0x19c>
 8024058:	6121      	str	r1, [r4, #16]
 802405a:	b913      	cbnz	r3, 8024062 <_printf_float+0x18e>
 802405c:	6822      	ldr	r2, [r4, #0]
 802405e:	07d0      	lsls	r0, r2, #31
 8024060:	d502      	bpl.n	8024068 <_printf_float+0x194>
 8024062:	3301      	adds	r3, #1
 8024064:	440b      	add	r3, r1
 8024066:	6123      	str	r3, [r4, #16]
 8024068:	65a1      	str	r1, [r4, #88]	@ 0x58
 802406a:	f04f 0900 	mov.w	r9, #0
 802406e:	e7db      	b.n	8024028 <_printf_float+0x154>
 8024070:	b913      	cbnz	r3, 8024078 <_printf_float+0x1a4>
 8024072:	6822      	ldr	r2, [r4, #0]
 8024074:	07d2      	lsls	r2, r2, #31
 8024076:	d501      	bpl.n	802407c <_printf_float+0x1a8>
 8024078:	3302      	adds	r3, #2
 802407a:	e7f4      	b.n	8024066 <_printf_float+0x192>
 802407c:	2301      	movs	r3, #1
 802407e:	e7f2      	b.n	8024066 <_printf_float+0x192>
 8024080:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8024084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024086:	4299      	cmp	r1, r3
 8024088:	db05      	blt.n	8024096 <_printf_float+0x1c2>
 802408a:	6823      	ldr	r3, [r4, #0]
 802408c:	6121      	str	r1, [r4, #16]
 802408e:	07d8      	lsls	r0, r3, #31
 8024090:	d5ea      	bpl.n	8024068 <_printf_float+0x194>
 8024092:	1c4b      	adds	r3, r1, #1
 8024094:	e7e7      	b.n	8024066 <_printf_float+0x192>
 8024096:	2900      	cmp	r1, #0
 8024098:	bfd4      	ite	le
 802409a:	f1c1 0202 	rsble	r2, r1, #2
 802409e:	2201      	movgt	r2, #1
 80240a0:	4413      	add	r3, r2
 80240a2:	e7e0      	b.n	8024066 <_printf_float+0x192>
 80240a4:	6823      	ldr	r3, [r4, #0]
 80240a6:	055a      	lsls	r2, r3, #21
 80240a8:	d407      	bmi.n	80240ba <_printf_float+0x1e6>
 80240aa:	6923      	ldr	r3, [r4, #16]
 80240ac:	4642      	mov	r2, r8
 80240ae:	4631      	mov	r1, r6
 80240b0:	4628      	mov	r0, r5
 80240b2:	47b8      	blx	r7
 80240b4:	3001      	adds	r0, #1
 80240b6:	d12b      	bne.n	8024110 <_printf_float+0x23c>
 80240b8:	e767      	b.n	8023f8a <_printf_float+0xb6>
 80240ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80240be:	f240 80dd 	bls.w	802427c <_printf_float+0x3a8>
 80240c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80240c6:	2200      	movs	r2, #0
 80240c8:	2300      	movs	r3, #0
 80240ca:	f7e4 fc45 	bl	8008958 <__aeabi_dcmpeq>
 80240ce:	2800      	cmp	r0, #0
 80240d0:	d033      	beq.n	802413a <_printf_float+0x266>
 80240d2:	4a37      	ldr	r2, [pc, #220]	@ (80241b0 <_printf_float+0x2dc>)
 80240d4:	2301      	movs	r3, #1
 80240d6:	4631      	mov	r1, r6
 80240d8:	4628      	mov	r0, r5
 80240da:	47b8      	blx	r7
 80240dc:	3001      	adds	r0, #1
 80240de:	f43f af54 	beq.w	8023f8a <_printf_float+0xb6>
 80240e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80240e6:	4543      	cmp	r3, r8
 80240e8:	db02      	blt.n	80240f0 <_printf_float+0x21c>
 80240ea:	6823      	ldr	r3, [r4, #0]
 80240ec:	07d8      	lsls	r0, r3, #31
 80240ee:	d50f      	bpl.n	8024110 <_printf_float+0x23c>
 80240f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80240f4:	4631      	mov	r1, r6
 80240f6:	4628      	mov	r0, r5
 80240f8:	47b8      	blx	r7
 80240fa:	3001      	adds	r0, #1
 80240fc:	f43f af45 	beq.w	8023f8a <_printf_float+0xb6>
 8024100:	f04f 0900 	mov.w	r9, #0
 8024104:	f108 38ff 	add.w	r8, r8, #4294967295
 8024108:	f104 0a1a 	add.w	sl, r4, #26
 802410c:	45c8      	cmp	r8, r9
 802410e:	dc09      	bgt.n	8024124 <_printf_float+0x250>
 8024110:	6823      	ldr	r3, [r4, #0]
 8024112:	079b      	lsls	r3, r3, #30
 8024114:	f100 8103 	bmi.w	802431e <_printf_float+0x44a>
 8024118:	68e0      	ldr	r0, [r4, #12]
 802411a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802411c:	4298      	cmp	r0, r3
 802411e:	bfb8      	it	lt
 8024120:	4618      	movlt	r0, r3
 8024122:	e734      	b.n	8023f8e <_printf_float+0xba>
 8024124:	2301      	movs	r3, #1
 8024126:	4652      	mov	r2, sl
 8024128:	4631      	mov	r1, r6
 802412a:	4628      	mov	r0, r5
 802412c:	47b8      	blx	r7
 802412e:	3001      	adds	r0, #1
 8024130:	f43f af2b 	beq.w	8023f8a <_printf_float+0xb6>
 8024134:	f109 0901 	add.w	r9, r9, #1
 8024138:	e7e8      	b.n	802410c <_printf_float+0x238>
 802413a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802413c:	2b00      	cmp	r3, #0
 802413e:	dc39      	bgt.n	80241b4 <_printf_float+0x2e0>
 8024140:	4a1b      	ldr	r2, [pc, #108]	@ (80241b0 <_printf_float+0x2dc>)
 8024142:	2301      	movs	r3, #1
 8024144:	4631      	mov	r1, r6
 8024146:	4628      	mov	r0, r5
 8024148:	47b8      	blx	r7
 802414a:	3001      	adds	r0, #1
 802414c:	f43f af1d 	beq.w	8023f8a <_printf_float+0xb6>
 8024150:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8024154:	ea59 0303 	orrs.w	r3, r9, r3
 8024158:	d102      	bne.n	8024160 <_printf_float+0x28c>
 802415a:	6823      	ldr	r3, [r4, #0]
 802415c:	07d9      	lsls	r1, r3, #31
 802415e:	d5d7      	bpl.n	8024110 <_printf_float+0x23c>
 8024160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024164:	4631      	mov	r1, r6
 8024166:	4628      	mov	r0, r5
 8024168:	47b8      	blx	r7
 802416a:	3001      	adds	r0, #1
 802416c:	f43f af0d 	beq.w	8023f8a <_printf_float+0xb6>
 8024170:	f04f 0a00 	mov.w	sl, #0
 8024174:	f104 0b1a 	add.w	fp, r4, #26
 8024178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802417a:	425b      	negs	r3, r3
 802417c:	4553      	cmp	r3, sl
 802417e:	dc01      	bgt.n	8024184 <_printf_float+0x2b0>
 8024180:	464b      	mov	r3, r9
 8024182:	e793      	b.n	80240ac <_printf_float+0x1d8>
 8024184:	2301      	movs	r3, #1
 8024186:	465a      	mov	r2, fp
 8024188:	4631      	mov	r1, r6
 802418a:	4628      	mov	r0, r5
 802418c:	47b8      	blx	r7
 802418e:	3001      	adds	r0, #1
 8024190:	f43f aefb 	beq.w	8023f8a <_printf_float+0xb6>
 8024194:	f10a 0a01 	add.w	sl, sl, #1
 8024198:	e7ee      	b.n	8024178 <_printf_float+0x2a4>
 802419a:	bf00      	nop
 802419c:	7fefffff 	.word	0x7fefffff
 80241a0:	080317c1 	.word	0x080317c1
 80241a4:	080317c5 	.word	0x080317c5
 80241a8:	080317c9 	.word	0x080317c9
 80241ac:	080317cd 	.word	0x080317cd
 80241b0:	080317d1 	.word	0x080317d1
 80241b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80241b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80241ba:	4553      	cmp	r3, sl
 80241bc:	bfa8      	it	ge
 80241be:	4653      	movge	r3, sl
 80241c0:	2b00      	cmp	r3, #0
 80241c2:	4699      	mov	r9, r3
 80241c4:	dc36      	bgt.n	8024234 <_printf_float+0x360>
 80241c6:	f04f 0b00 	mov.w	fp, #0
 80241ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80241ce:	f104 021a 	add.w	r2, r4, #26
 80241d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80241d4:	9306      	str	r3, [sp, #24]
 80241d6:	eba3 0309 	sub.w	r3, r3, r9
 80241da:	455b      	cmp	r3, fp
 80241dc:	dc31      	bgt.n	8024242 <_printf_float+0x36e>
 80241de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241e0:	459a      	cmp	sl, r3
 80241e2:	dc3a      	bgt.n	802425a <_printf_float+0x386>
 80241e4:	6823      	ldr	r3, [r4, #0]
 80241e6:	07da      	lsls	r2, r3, #31
 80241e8:	d437      	bmi.n	802425a <_printf_float+0x386>
 80241ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241ec:	ebaa 0903 	sub.w	r9, sl, r3
 80241f0:	9b06      	ldr	r3, [sp, #24]
 80241f2:	ebaa 0303 	sub.w	r3, sl, r3
 80241f6:	4599      	cmp	r9, r3
 80241f8:	bfa8      	it	ge
 80241fa:	4699      	movge	r9, r3
 80241fc:	f1b9 0f00 	cmp.w	r9, #0
 8024200:	dc33      	bgt.n	802426a <_printf_float+0x396>
 8024202:	f04f 0800 	mov.w	r8, #0
 8024206:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802420a:	f104 0b1a 	add.w	fp, r4, #26
 802420e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024210:	ebaa 0303 	sub.w	r3, sl, r3
 8024214:	eba3 0309 	sub.w	r3, r3, r9
 8024218:	4543      	cmp	r3, r8
 802421a:	f77f af79 	ble.w	8024110 <_printf_float+0x23c>
 802421e:	2301      	movs	r3, #1
 8024220:	465a      	mov	r2, fp
 8024222:	4631      	mov	r1, r6
 8024224:	4628      	mov	r0, r5
 8024226:	47b8      	blx	r7
 8024228:	3001      	adds	r0, #1
 802422a:	f43f aeae 	beq.w	8023f8a <_printf_float+0xb6>
 802422e:	f108 0801 	add.w	r8, r8, #1
 8024232:	e7ec      	b.n	802420e <_printf_float+0x33a>
 8024234:	4642      	mov	r2, r8
 8024236:	4631      	mov	r1, r6
 8024238:	4628      	mov	r0, r5
 802423a:	47b8      	blx	r7
 802423c:	3001      	adds	r0, #1
 802423e:	d1c2      	bne.n	80241c6 <_printf_float+0x2f2>
 8024240:	e6a3      	b.n	8023f8a <_printf_float+0xb6>
 8024242:	2301      	movs	r3, #1
 8024244:	4631      	mov	r1, r6
 8024246:	4628      	mov	r0, r5
 8024248:	9206      	str	r2, [sp, #24]
 802424a:	47b8      	blx	r7
 802424c:	3001      	adds	r0, #1
 802424e:	f43f ae9c 	beq.w	8023f8a <_printf_float+0xb6>
 8024252:	9a06      	ldr	r2, [sp, #24]
 8024254:	f10b 0b01 	add.w	fp, fp, #1
 8024258:	e7bb      	b.n	80241d2 <_printf_float+0x2fe>
 802425a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802425e:	4631      	mov	r1, r6
 8024260:	4628      	mov	r0, r5
 8024262:	47b8      	blx	r7
 8024264:	3001      	adds	r0, #1
 8024266:	d1c0      	bne.n	80241ea <_printf_float+0x316>
 8024268:	e68f      	b.n	8023f8a <_printf_float+0xb6>
 802426a:	9a06      	ldr	r2, [sp, #24]
 802426c:	464b      	mov	r3, r9
 802426e:	4442      	add	r2, r8
 8024270:	4631      	mov	r1, r6
 8024272:	4628      	mov	r0, r5
 8024274:	47b8      	blx	r7
 8024276:	3001      	adds	r0, #1
 8024278:	d1c3      	bne.n	8024202 <_printf_float+0x32e>
 802427a:	e686      	b.n	8023f8a <_printf_float+0xb6>
 802427c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8024280:	f1ba 0f01 	cmp.w	sl, #1
 8024284:	dc01      	bgt.n	802428a <_printf_float+0x3b6>
 8024286:	07db      	lsls	r3, r3, #31
 8024288:	d536      	bpl.n	80242f8 <_printf_float+0x424>
 802428a:	2301      	movs	r3, #1
 802428c:	4642      	mov	r2, r8
 802428e:	4631      	mov	r1, r6
 8024290:	4628      	mov	r0, r5
 8024292:	47b8      	blx	r7
 8024294:	3001      	adds	r0, #1
 8024296:	f43f ae78 	beq.w	8023f8a <_printf_float+0xb6>
 802429a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802429e:	4631      	mov	r1, r6
 80242a0:	4628      	mov	r0, r5
 80242a2:	47b8      	blx	r7
 80242a4:	3001      	adds	r0, #1
 80242a6:	f43f ae70 	beq.w	8023f8a <_printf_float+0xb6>
 80242aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80242ae:	2200      	movs	r2, #0
 80242b0:	2300      	movs	r3, #0
 80242b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80242b6:	f7e4 fb4f 	bl	8008958 <__aeabi_dcmpeq>
 80242ba:	b9c0      	cbnz	r0, 80242ee <_printf_float+0x41a>
 80242bc:	4653      	mov	r3, sl
 80242be:	f108 0201 	add.w	r2, r8, #1
 80242c2:	4631      	mov	r1, r6
 80242c4:	4628      	mov	r0, r5
 80242c6:	47b8      	blx	r7
 80242c8:	3001      	adds	r0, #1
 80242ca:	d10c      	bne.n	80242e6 <_printf_float+0x412>
 80242cc:	e65d      	b.n	8023f8a <_printf_float+0xb6>
 80242ce:	2301      	movs	r3, #1
 80242d0:	465a      	mov	r2, fp
 80242d2:	4631      	mov	r1, r6
 80242d4:	4628      	mov	r0, r5
 80242d6:	47b8      	blx	r7
 80242d8:	3001      	adds	r0, #1
 80242da:	f43f ae56 	beq.w	8023f8a <_printf_float+0xb6>
 80242de:	f108 0801 	add.w	r8, r8, #1
 80242e2:	45d0      	cmp	r8, sl
 80242e4:	dbf3      	blt.n	80242ce <_printf_float+0x3fa>
 80242e6:	464b      	mov	r3, r9
 80242e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80242ec:	e6df      	b.n	80240ae <_printf_float+0x1da>
 80242ee:	f04f 0800 	mov.w	r8, #0
 80242f2:	f104 0b1a 	add.w	fp, r4, #26
 80242f6:	e7f4      	b.n	80242e2 <_printf_float+0x40e>
 80242f8:	2301      	movs	r3, #1
 80242fa:	4642      	mov	r2, r8
 80242fc:	e7e1      	b.n	80242c2 <_printf_float+0x3ee>
 80242fe:	2301      	movs	r3, #1
 8024300:	464a      	mov	r2, r9
 8024302:	4631      	mov	r1, r6
 8024304:	4628      	mov	r0, r5
 8024306:	47b8      	blx	r7
 8024308:	3001      	adds	r0, #1
 802430a:	f43f ae3e 	beq.w	8023f8a <_printf_float+0xb6>
 802430e:	f108 0801 	add.w	r8, r8, #1
 8024312:	68e3      	ldr	r3, [r4, #12]
 8024314:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024316:	1a5b      	subs	r3, r3, r1
 8024318:	4543      	cmp	r3, r8
 802431a:	dcf0      	bgt.n	80242fe <_printf_float+0x42a>
 802431c:	e6fc      	b.n	8024118 <_printf_float+0x244>
 802431e:	f04f 0800 	mov.w	r8, #0
 8024322:	f104 0919 	add.w	r9, r4, #25
 8024326:	e7f4      	b.n	8024312 <_printf_float+0x43e>

08024328 <_printf_common>:
 8024328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802432c:	4616      	mov	r6, r2
 802432e:	4698      	mov	r8, r3
 8024330:	688a      	ldr	r2, [r1, #8]
 8024332:	690b      	ldr	r3, [r1, #16]
 8024334:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8024338:	4293      	cmp	r3, r2
 802433a:	bfb8      	it	lt
 802433c:	4613      	movlt	r3, r2
 802433e:	6033      	str	r3, [r6, #0]
 8024340:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8024344:	4607      	mov	r7, r0
 8024346:	460c      	mov	r4, r1
 8024348:	b10a      	cbz	r2, 802434e <_printf_common+0x26>
 802434a:	3301      	adds	r3, #1
 802434c:	6033      	str	r3, [r6, #0]
 802434e:	6823      	ldr	r3, [r4, #0]
 8024350:	0699      	lsls	r1, r3, #26
 8024352:	bf42      	ittt	mi
 8024354:	6833      	ldrmi	r3, [r6, #0]
 8024356:	3302      	addmi	r3, #2
 8024358:	6033      	strmi	r3, [r6, #0]
 802435a:	6825      	ldr	r5, [r4, #0]
 802435c:	f015 0506 	ands.w	r5, r5, #6
 8024360:	d106      	bne.n	8024370 <_printf_common+0x48>
 8024362:	f104 0a19 	add.w	sl, r4, #25
 8024366:	68e3      	ldr	r3, [r4, #12]
 8024368:	6832      	ldr	r2, [r6, #0]
 802436a:	1a9b      	subs	r3, r3, r2
 802436c:	42ab      	cmp	r3, r5
 802436e:	dc26      	bgt.n	80243be <_printf_common+0x96>
 8024370:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8024374:	6822      	ldr	r2, [r4, #0]
 8024376:	3b00      	subs	r3, #0
 8024378:	bf18      	it	ne
 802437a:	2301      	movne	r3, #1
 802437c:	0692      	lsls	r2, r2, #26
 802437e:	d42b      	bmi.n	80243d8 <_printf_common+0xb0>
 8024380:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8024384:	4641      	mov	r1, r8
 8024386:	4638      	mov	r0, r7
 8024388:	47c8      	blx	r9
 802438a:	3001      	adds	r0, #1
 802438c:	d01e      	beq.n	80243cc <_printf_common+0xa4>
 802438e:	6823      	ldr	r3, [r4, #0]
 8024390:	6922      	ldr	r2, [r4, #16]
 8024392:	f003 0306 	and.w	r3, r3, #6
 8024396:	2b04      	cmp	r3, #4
 8024398:	bf02      	ittt	eq
 802439a:	68e5      	ldreq	r5, [r4, #12]
 802439c:	6833      	ldreq	r3, [r6, #0]
 802439e:	1aed      	subeq	r5, r5, r3
 80243a0:	68a3      	ldr	r3, [r4, #8]
 80243a2:	bf0c      	ite	eq
 80243a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80243a8:	2500      	movne	r5, #0
 80243aa:	4293      	cmp	r3, r2
 80243ac:	bfc4      	itt	gt
 80243ae:	1a9b      	subgt	r3, r3, r2
 80243b0:	18ed      	addgt	r5, r5, r3
 80243b2:	2600      	movs	r6, #0
 80243b4:	341a      	adds	r4, #26
 80243b6:	42b5      	cmp	r5, r6
 80243b8:	d11a      	bne.n	80243f0 <_printf_common+0xc8>
 80243ba:	2000      	movs	r0, #0
 80243bc:	e008      	b.n	80243d0 <_printf_common+0xa8>
 80243be:	2301      	movs	r3, #1
 80243c0:	4652      	mov	r2, sl
 80243c2:	4641      	mov	r1, r8
 80243c4:	4638      	mov	r0, r7
 80243c6:	47c8      	blx	r9
 80243c8:	3001      	adds	r0, #1
 80243ca:	d103      	bne.n	80243d4 <_printf_common+0xac>
 80243cc:	f04f 30ff 	mov.w	r0, #4294967295
 80243d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80243d4:	3501      	adds	r5, #1
 80243d6:	e7c6      	b.n	8024366 <_printf_common+0x3e>
 80243d8:	18e1      	adds	r1, r4, r3
 80243da:	1c5a      	adds	r2, r3, #1
 80243dc:	2030      	movs	r0, #48	@ 0x30
 80243de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80243e2:	4422      	add	r2, r4
 80243e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80243e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80243ec:	3302      	adds	r3, #2
 80243ee:	e7c7      	b.n	8024380 <_printf_common+0x58>
 80243f0:	2301      	movs	r3, #1
 80243f2:	4622      	mov	r2, r4
 80243f4:	4641      	mov	r1, r8
 80243f6:	4638      	mov	r0, r7
 80243f8:	47c8      	blx	r9
 80243fa:	3001      	adds	r0, #1
 80243fc:	d0e6      	beq.n	80243cc <_printf_common+0xa4>
 80243fe:	3601      	adds	r6, #1
 8024400:	e7d9      	b.n	80243b6 <_printf_common+0x8e>
	...

08024404 <_printf_i>:
 8024404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024408:	7e0f      	ldrb	r7, [r1, #24]
 802440a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802440c:	2f78      	cmp	r7, #120	@ 0x78
 802440e:	4691      	mov	r9, r2
 8024410:	4680      	mov	r8, r0
 8024412:	460c      	mov	r4, r1
 8024414:	469a      	mov	sl, r3
 8024416:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802441a:	d807      	bhi.n	802442c <_printf_i+0x28>
 802441c:	2f62      	cmp	r7, #98	@ 0x62
 802441e:	d80a      	bhi.n	8024436 <_printf_i+0x32>
 8024420:	2f00      	cmp	r7, #0
 8024422:	f000 80d2 	beq.w	80245ca <_printf_i+0x1c6>
 8024426:	2f58      	cmp	r7, #88	@ 0x58
 8024428:	f000 80b9 	beq.w	802459e <_printf_i+0x19a>
 802442c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024430:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8024434:	e03a      	b.n	80244ac <_printf_i+0xa8>
 8024436:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802443a:	2b15      	cmp	r3, #21
 802443c:	d8f6      	bhi.n	802442c <_printf_i+0x28>
 802443e:	a101      	add	r1, pc, #4	@ (adr r1, 8024444 <_printf_i+0x40>)
 8024440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024444:	0802449d 	.word	0x0802449d
 8024448:	080244b1 	.word	0x080244b1
 802444c:	0802442d 	.word	0x0802442d
 8024450:	0802442d 	.word	0x0802442d
 8024454:	0802442d 	.word	0x0802442d
 8024458:	0802442d 	.word	0x0802442d
 802445c:	080244b1 	.word	0x080244b1
 8024460:	0802442d 	.word	0x0802442d
 8024464:	0802442d 	.word	0x0802442d
 8024468:	0802442d 	.word	0x0802442d
 802446c:	0802442d 	.word	0x0802442d
 8024470:	080245b1 	.word	0x080245b1
 8024474:	080244db 	.word	0x080244db
 8024478:	0802456b 	.word	0x0802456b
 802447c:	0802442d 	.word	0x0802442d
 8024480:	0802442d 	.word	0x0802442d
 8024484:	080245d3 	.word	0x080245d3
 8024488:	0802442d 	.word	0x0802442d
 802448c:	080244db 	.word	0x080244db
 8024490:	0802442d 	.word	0x0802442d
 8024494:	0802442d 	.word	0x0802442d
 8024498:	08024573 	.word	0x08024573
 802449c:	6833      	ldr	r3, [r6, #0]
 802449e:	1d1a      	adds	r2, r3, #4
 80244a0:	681b      	ldr	r3, [r3, #0]
 80244a2:	6032      	str	r2, [r6, #0]
 80244a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80244a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80244ac:	2301      	movs	r3, #1
 80244ae:	e09d      	b.n	80245ec <_printf_i+0x1e8>
 80244b0:	6833      	ldr	r3, [r6, #0]
 80244b2:	6820      	ldr	r0, [r4, #0]
 80244b4:	1d19      	adds	r1, r3, #4
 80244b6:	6031      	str	r1, [r6, #0]
 80244b8:	0606      	lsls	r6, r0, #24
 80244ba:	d501      	bpl.n	80244c0 <_printf_i+0xbc>
 80244bc:	681d      	ldr	r5, [r3, #0]
 80244be:	e003      	b.n	80244c8 <_printf_i+0xc4>
 80244c0:	0645      	lsls	r5, r0, #25
 80244c2:	d5fb      	bpl.n	80244bc <_printf_i+0xb8>
 80244c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80244c8:	2d00      	cmp	r5, #0
 80244ca:	da03      	bge.n	80244d4 <_printf_i+0xd0>
 80244cc:	232d      	movs	r3, #45	@ 0x2d
 80244ce:	426d      	negs	r5, r5
 80244d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80244d4:	4859      	ldr	r0, [pc, #356]	@ (802463c <_printf_i+0x238>)
 80244d6:	230a      	movs	r3, #10
 80244d8:	e011      	b.n	80244fe <_printf_i+0xfa>
 80244da:	6821      	ldr	r1, [r4, #0]
 80244dc:	6833      	ldr	r3, [r6, #0]
 80244de:	0608      	lsls	r0, r1, #24
 80244e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80244e4:	d402      	bmi.n	80244ec <_printf_i+0xe8>
 80244e6:	0649      	lsls	r1, r1, #25
 80244e8:	bf48      	it	mi
 80244ea:	b2ad      	uxthmi	r5, r5
 80244ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80244ee:	4853      	ldr	r0, [pc, #332]	@ (802463c <_printf_i+0x238>)
 80244f0:	6033      	str	r3, [r6, #0]
 80244f2:	bf14      	ite	ne
 80244f4:	230a      	movne	r3, #10
 80244f6:	2308      	moveq	r3, #8
 80244f8:	2100      	movs	r1, #0
 80244fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80244fe:	6866      	ldr	r6, [r4, #4]
 8024500:	60a6      	str	r6, [r4, #8]
 8024502:	2e00      	cmp	r6, #0
 8024504:	bfa2      	ittt	ge
 8024506:	6821      	ldrge	r1, [r4, #0]
 8024508:	f021 0104 	bicge.w	r1, r1, #4
 802450c:	6021      	strge	r1, [r4, #0]
 802450e:	b90d      	cbnz	r5, 8024514 <_printf_i+0x110>
 8024510:	2e00      	cmp	r6, #0
 8024512:	d04b      	beq.n	80245ac <_printf_i+0x1a8>
 8024514:	4616      	mov	r6, r2
 8024516:	fbb5 f1f3 	udiv	r1, r5, r3
 802451a:	fb03 5711 	mls	r7, r3, r1, r5
 802451e:	5dc7      	ldrb	r7, [r0, r7]
 8024520:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8024524:	462f      	mov	r7, r5
 8024526:	42bb      	cmp	r3, r7
 8024528:	460d      	mov	r5, r1
 802452a:	d9f4      	bls.n	8024516 <_printf_i+0x112>
 802452c:	2b08      	cmp	r3, #8
 802452e:	d10b      	bne.n	8024548 <_printf_i+0x144>
 8024530:	6823      	ldr	r3, [r4, #0]
 8024532:	07df      	lsls	r7, r3, #31
 8024534:	d508      	bpl.n	8024548 <_printf_i+0x144>
 8024536:	6923      	ldr	r3, [r4, #16]
 8024538:	6861      	ldr	r1, [r4, #4]
 802453a:	4299      	cmp	r1, r3
 802453c:	bfde      	ittt	le
 802453e:	2330      	movle	r3, #48	@ 0x30
 8024540:	f806 3c01 	strble.w	r3, [r6, #-1]
 8024544:	f106 36ff 	addle.w	r6, r6, #4294967295
 8024548:	1b92      	subs	r2, r2, r6
 802454a:	6122      	str	r2, [r4, #16]
 802454c:	f8cd a000 	str.w	sl, [sp]
 8024550:	464b      	mov	r3, r9
 8024552:	aa03      	add	r2, sp, #12
 8024554:	4621      	mov	r1, r4
 8024556:	4640      	mov	r0, r8
 8024558:	f7ff fee6 	bl	8024328 <_printf_common>
 802455c:	3001      	adds	r0, #1
 802455e:	d14a      	bne.n	80245f6 <_printf_i+0x1f2>
 8024560:	f04f 30ff 	mov.w	r0, #4294967295
 8024564:	b004      	add	sp, #16
 8024566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802456a:	6823      	ldr	r3, [r4, #0]
 802456c:	f043 0320 	orr.w	r3, r3, #32
 8024570:	6023      	str	r3, [r4, #0]
 8024572:	4833      	ldr	r0, [pc, #204]	@ (8024640 <_printf_i+0x23c>)
 8024574:	2778      	movs	r7, #120	@ 0x78
 8024576:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802457a:	6823      	ldr	r3, [r4, #0]
 802457c:	6831      	ldr	r1, [r6, #0]
 802457e:	061f      	lsls	r7, r3, #24
 8024580:	f851 5b04 	ldr.w	r5, [r1], #4
 8024584:	d402      	bmi.n	802458c <_printf_i+0x188>
 8024586:	065f      	lsls	r7, r3, #25
 8024588:	bf48      	it	mi
 802458a:	b2ad      	uxthmi	r5, r5
 802458c:	6031      	str	r1, [r6, #0]
 802458e:	07d9      	lsls	r1, r3, #31
 8024590:	bf44      	itt	mi
 8024592:	f043 0320 	orrmi.w	r3, r3, #32
 8024596:	6023      	strmi	r3, [r4, #0]
 8024598:	b11d      	cbz	r5, 80245a2 <_printf_i+0x19e>
 802459a:	2310      	movs	r3, #16
 802459c:	e7ac      	b.n	80244f8 <_printf_i+0xf4>
 802459e:	4827      	ldr	r0, [pc, #156]	@ (802463c <_printf_i+0x238>)
 80245a0:	e7e9      	b.n	8024576 <_printf_i+0x172>
 80245a2:	6823      	ldr	r3, [r4, #0]
 80245a4:	f023 0320 	bic.w	r3, r3, #32
 80245a8:	6023      	str	r3, [r4, #0]
 80245aa:	e7f6      	b.n	802459a <_printf_i+0x196>
 80245ac:	4616      	mov	r6, r2
 80245ae:	e7bd      	b.n	802452c <_printf_i+0x128>
 80245b0:	6833      	ldr	r3, [r6, #0]
 80245b2:	6825      	ldr	r5, [r4, #0]
 80245b4:	6961      	ldr	r1, [r4, #20]
 80245b6:	1d18      	adds	r0, r3, #4
 80245b8:	6030      	str	r0, [r6, #0]
 80245ba:	062e      	lsls	r6, r5, #24
 80245bc:	681b      	ldr	r3, [r3, #0]
 80245be:	d501      	bpl.n	80245c4 <_printf_i+0x1c0>
 80245c0:	6019      	str	r1, [r3, #0]
 80245c2:	e002      	b.n	80245ca <_printf_i+0x1c6>
 80245c4:	0668      	lsls	r0, r5, #25
 80245c6:	d5fb      	bpl.n	80245c0 <_printf_i+0x1bc>
 80245c8:	8019      	strh	r1, [r3, #0]
 80245ca:	2300      	movs	r3, #0
 80245cc:	6123      	str	r3, [r4, #16]
 80245ce:	4616      	mov	r6, r2
 80245d0:	e7bc      	b.n	802454c <_printf_i+0x148>
 80245d2:	6833      	ldr	r3, [r6, #0]
 80245d4:	1d1a      	adds	r2, r3, #4
 80245d6:	6032      	str	r2, [r6, #0]
 80245d8:	681e      	ldr	r6, [r3, #0]
 80245da:	6862      	ldr	r2, [r4, #4]
 80245dc:	2100      	movs	r1, #0
 80245de:	4630      	mov	r0, r6
 80245e0:	f7e3 fd3e 	bl	8008060 <memchr>
 80245e4:	b108      	cbz	r0, 80245ea <_printf_i+0x1e6>
 80245e6:	1b80      	subs	r0, r0, r6
 80245e8:	6060      	str	r0, [r4, #4]
 80245ea:	6863      	ldr	r3, [r4, #4]
 80245ec:	6123      	str	r3, [r4, #16]
 80245ee:	2300      	movs	r3, #0
 80245f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80245f4:	e7aa      	b.n	802454c <_printf_i+0x148>
 80245f6:	6923      	ldr	r3, [r4, #16]
 80245f8:	4632      	mov	r2, r6
 80245fa:	4649      	mov	r1, r9
 80245fc:	4640      	mov	r0, r8
 80245fe:	47d0      	blx	sl
 8024600:	3001      	adds	r0, #1
 8024602:	d0ad      	beq.n	8024560 <_printf_i+0x15c>
 8024604:	6823      	ldr	r3, [r4, #0]
 8024606:	079b      	lsls	r3, r3, #30
 8024608:	d413      	bmi.n	8024632 <_printf_i+0x22e>
 802460a:	68e0      	ldr	r0, [r4, #12]
 802460c:	9b03      	ldr	r3, [sp, #12]
 802460e:	4298      	cmp	r0, r3
 8024610:	bfb8      	it	lt
 8024612:	4618      	movlt	r0, r3
 8024614:	e7a6      	b.n	8024564 <_printf_i+0x160>
 8024616:	2301      	movs	r3, #1
 8024618:	4632      	mov	r2, r6
 802461a:	4649      	mov	r1, r9
 802461c:	4640      	mov	r0, r8
 802461e:	47d0      	blx	sl
 8024620:	3001      	adds	r0, #1
 8024622:	d09d      	beq.n	8024560 <_printf_i+0x15c>
 8024624:	3501      	adds	r5, #1
 8024626:	68e3      	ldr	r3, [r4, #12]
 8024628:	9903      	ldr	r1, [sp, #12]
 802462a:	1a5b      	subs	r3, r3, r1
 802462c:	42ab      	cmp	r3, r5
 802462e:	dcf2      	bgt.n	8024616 <_printf_i+0x212>
 8024630:	e7eb      	b.n	802460a <_printf_i+0x206>
 8024632:	2500      	movs	r5, #0
 8024634:	f104 0619 	add.w	r6, r4, #25
 8024638:	e7f5      	b.n	8024626 <_printf_i+0x222>
 802463a:	bf00      	nop
 802463c:	080317d3 	.word	0x080317d3
 8024640:	080317e4 	.word	0x080317e4

08024644 <_scanf_float>:
 8024644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024648:	b087      	sub	sp, #28
 802464a:	4617      	mov	r7, r2
 802464c:	9303      	str	r3, [sp, #12]
 802464e:	688b      	ldr	r3, [r1, #8]
 8024650:	1e5a      	subs	r2, r3, #1
 8024652:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8024656:	bf81      	itttt	hi
 8024658:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 802465c:	eb03 0b05 	addhi.w	fp, r3, r5
 8024660:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8024664:	608b      	strhi	r3, [r1, #8]
 8024666:	680b      	ldr	r3, [r1, #0]
 8024668:	460a      	mov	r2, r1
 802466a:	f04f 0500 	mov.w	r5, #0
 802466e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8024672:	f842 3b1c 	str.w	r3, [r2], #28
 8024676:	e9cd 5504 	strd	r5, r5, [sp, #16]
 802467a:	4680      	mov	r8, r0
 802467c:	460c      	mov	r4, r1
 802467e:	bf98      	it	ls
 8024680:	f04f 0b00 	movls.w	fp, #0
 8024684:	9201      	str	r2, [sp, #4]
 8024686:	4616      	mov	r6, r2
 8024688:	46aa      	mov	sl, r5
 802468a:	46a9      	mov	r9, r5
 802468c:	9502      	str	r5, [sp, #8]
 802468e:	68a2      	ldr	r2, [r4, #8]
 8024690:	b152      	cbz	r2, 80246a8 <_scanf_float+0x64>
 8024692:	683b      	ldr	r3, [r7, #0]
 8024694:	781b      	ldrb	r3, [r3, #0]
 8024696:	2b4e      	cmp	r3, #78	@ 0x4e
 8024698:	d864      	bhi.n	8024764 <_scanf_float+0x120>
 802469a:	2b40      	cmp	r3, #64	@ 0x40
 802469c:	d83c      	bhi.n	8024718 <_scanf_float+0xd4>
 802469e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80246a2:	b2c8      	uxtb	r0, r1
 80246a4:	280e      	cmp	r0, #14
 80246a6:	d93a      	bls.n	802471e <_scanf_float+0xda>
 80246a8:	f1b9 0f00 	cmp.w	r9, #0
 80246ac:	d003      	beq.n	80246b6 <_scanf_float+0x72>
 80246ae:	6823      	ldr	r3, [r4, #0]
 80246b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80246b4:	6023      	str	r3, [r4, #0]
 80246b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80246ba:	f1ba 0f01 	cmp.w	sl, #1
 80246be:	f200 8117 	bhi.w	80248f0 <_scanf_float+0x2ac>
 80246c2:	9b01      	ldr	r3, [sp, #4]
 80246c4:	429e      	cmp	r6, r3
 80246c6:	f200 8108 	bhi.w	80248da <_scanf_float+0x296>
 80246ca:	2001      	movs	r0, #1
 80246cc:	b007      	add	sp, #28
 80246ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80246d2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80246d6:	2a0d      	cmp	r2, #13
 80246d8:	d8e6      	bhi.n	80246a8 <_scanf_float+0x64>
 80246da:	a101      	add	r1, pc, #4	@ (adr r1, 80246e0 <_scanf_float+0x9c>)
 80246dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80246e0:	08024827 	.word	0x08024827
 80246e4:	080246a9 	.word	0x080246a9
 80246e8:	080246a9 	.word	0x080246a9
 80246ec:	080246a9 	.word	0x080246a9
 80246f0:	08024887 	.word	0x08024887
 80246f4:	0802485f 	.word	0x0802485f
 80246f8:	080246a9 	.word	0x080246a9
 80246fc:	080246a9 	.word	0x080246a9
 8024700:	08024835 	.word	0x08024835
 8024704:	080246a9 	.word	0x080246a9
 8024708:	080246a9 	.word	0x080246a9
 802470c:	080246a9 	.word	0x080246a9
 8024710:	080246a9 	.word	0x080246a9
 8024714:	080247ed 	.word	0x080247ed
 8024718:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 802471c:	e7db      	b.n	80246d6 <_scanf_float+0x92>
 802471e:	290e      	cmp	r1, #14
 8024720:	d8c2      	bhi.n	80246a8 <_scanf_float+0x64>
 8024722:	a001      	add	r0, pc, #4	@ (adr r0, 8024728 <_scanf_float+0xe4>)
 8024724:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8024728:	080247dd 	.word	0x080247dd
 802472c:	080246a9 	.word	0x080246a9
 8024730:	080247dd 	.word	0x080247dd
 8024734:	08024873 	.word	0x08024873
 8024738:	080246a9 	.word	0x080246a9
 802473c:	08024785 	.word	0x08024785
 8024740:	080247c3 	.word	0x080247c3
 8024744:	080247c3 	.word	0x080247c3
 8024748:	080247c3 	.word	0x080247c3
 802474c:	080247c3 	.word	0x080247c3
 8024750:	080247c3 	.word	0x080247c3
 8024754:	080247c3 	.word	0x080247c3
 8024758:	080247c3 	.word	0x080247c3
 802475c:	080247c3 	.word	0x080247c3
 8024760:	080247c3 	.word	0x080247c3
 8024764:	2b6e      	cmp	r3, #110	@ 0x6e
 8024766:	d809      	bhi.n	802477c <_scanf_float+0x138>
 8024768:	2b60      	cmp	r3, #96	@ 0x60
 802476a:	d8b2      	bhi.n	80246d2 <_scanf_float+0x8e>
 802476c:	2b54      	cmp	r3, #84	@ 0x54
 802476e:	d07b      	beq.n	8024868 <_scanf_float+0x224>
 8024770:	2b59      	cmp	r3, #89	@ 0x59
 8024772:	d199      	bne.n	80246a8 <_scanf_float+0x64>
 8024774:	2d07      	cmp	r5, #7
 8024776:	d197      	bne.n	80246a8 <_scanf_float+0x64>
 8024778:	2508      	movs	r5, #8
 802477a:	e02c      	b.n	80247d6 <_scanf_float+0x192>
 802477c:	2b74      	cmp	r3, #116	@ 0x74
 802477e:	d073      	beq.n	8024868 <_scanf_float+0x224>
 8024780:	2b79      	cmp	r3, #121	@ 0x79
 8024782:	e7f6      	b.n	8024772 <_scanf_float+0x12e>
 8024784:	6821      	ldr	r1, [r4, #0]
 8024786:	05c8      	lsls	r0, r1, #23
 8024788:	d51b      	bpl.n	80247c2 <_scanf_float+0x17e>
 802478a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 802478e:	6021      	str	r1, [r4, #0]
 8024790:	f109 0901 	add.w	r9, r9, #1
 8024794:	f1bb 0f00 	cmp.w	fp, #0
 8024798:	d003      	beq.n	80247a2 <_scanf_float+0x15e>
 802479a:	3201      	adds	r2, #1
 802479c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80247a0:	60a2      	str	r2, [r4, #8]
 80247a2:	68a3      	ldr	r3, [r4, #8]
 80247a4:	3b01      	subs	r3, #1
 80247a6:	60a3      	str	r3, [r4, #8]
 80247a8:	6923      	ldr	r3, [r4, #16]
 80247aa:	3301      	adds	r3, #1
 80247ac:	6123      	str	r3, [r4, #16]
 80247ae:	687b      	ldr	r3, [r7, #4]
 80247b0:	3b01      	subs	r3, #1
 80247b2:	2b00      	cmp	r3, #0
 80247b4:	607b      	str	r3, [r7, #4]
 80247b6:	f340 8087 	ble.w	80248c8 <_scanf_float+0x284>
 80247ba:	683b      	ldr	r3, [r7, #0]
 80247bc:	3301      	adds	r3, #1
 80247be:	603b      	str	r3, [r7, #0]
 80247c0:	e765      	b.n	802468e <_scanf_float+0x4a>
 80247c2:	eb1a 0105 	adds.w	r1, sl, r5
 80247c6:	f47f af6f 	bne.w	80246a8 <_scanf_float+0x64>
 80247ca:	6822      	ldr	r2, [r4, #0]
 80247cc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80247d0:	6022      	str	r2, [r4, #0]
 80247d2:	460d      	mov	r5, r1
 80247d4:	468a      	mov	sl, r1
 80247d6:	f806 3b01 	strb.w	r3, [r6], #1
 80247da:	e7e2      	b.n	80247a2 <_scanf_float+0x15e>
 80247dc:	6822      	ldr	r2, [r4, #0]
 80247de:	0610      	lsls	r0, r2, #24
 80247e0:	f57f af62 	bpl.w	80246a8 <_scanf_float+0x64>
 80247e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80247e8:	6022      	str	r2, [r4, #0]
 80247ea:	e7f4      	b.n	80247d6 <_scanf_float+0x192>
 80247ec:	f1ba 0f00 	cmp.w	sl, #0
 80247f0:	d10e      	bne.n	8024810 <_scanf_float+0x1cc>
 80247f2:	f1b9 0f00 	cmp.w	r9, #0
 80247f6:	d10e      	bne.n	8024816 <_scanf_float+0x1d2>
 80247f8:	6822      	ldr	r2, [r4, #0]
 80247fa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80247fe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8024802:	d108      	bne.n	8024816 <_scanf_float+0x1d2>
 8024804:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8024808:	6022      	str	r2, [r4, #0]
 802480a:	f04f 0a01 	mov.w	sl, #1
 802480e:	e7e2      	b.n	80247d6 <_scanf_float+0x192>
 8024810:	f1ba 0f02 	cmp.w	sl, #2
 8024814:	d055      	beq.n	80248c2 <_scanf_float+0x27e>
 8024816:	2d01      	cmp	r5, #1
 8024818:	d002      	beq.n	8024820 <_scanf_float+0x1dc>
 802481a:	2d04      	cmp	r5, #4
 802481c:	f47f af44 	bne.w	80246a8 <_scanf_float+0x64>
 8024820:	3501      	adds	r5, #1
 8024822:	b2ed      	uxtb	r5, r5
 8024824:	e7d7      	b.n	80247d6 <_scanf_float+0x192>
 8024826:	f1ba 0f01 	cmp.w	sl, #1
 802482a:	f47f af3d 	bne.w	80246a8 <_scanf_float+0x64>
 802482e:	f04f 0a02 	mov.w	sl, #2
 8024832:	e7d0      	b.n	80247d6 <_scanf_float+0x192>
 8024834:	b97d      	cbnz	r5, 8024856 <_scanf_float+0x212>
 8024836:	f1b9 0f00 	cmp.w	r9, #0
 802483a:	f47f af38 	bne.w	80246ae <_scanf_float+0x6a>
 802483e:	6822      	ldr	r2, [r4, #0]
 8024840:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8024844:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8024848:	f040 8108 	bne.w	8024a5c <_scanf_float+0x418>
 802484c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8024850:	6022      	str	r2, [r4, #0]
 8024852:	2501      	movs	r5, #1
 8024854:	e7bf      	b.n	80247d6 <_scanf_float+0x192>
 8024856:	2d03      	cmp	r5, #3
 8024858:	d0e2      	beq.n	8024820 <_scanf_float+0x1dc>
 802485a:	2d05      	cmp	r5, #5
 802485c:	e7de      	b.n	802481c <_scanf_float+0x1d8>
 802485e:	2d02      	cmp	r5, #2
 8024860:	f47f af22 	bne.w	80246a8 <_scanf_float+0x64>
 8024864:	2503      	movs	r5, #3
 8024866:	e7b6      	b.n	80247d6 <_scanf_float+0x192>
 8024868:	2d06      	cmp	r5, #6
 802486a:	f47f af1d 	bne.w	80246a8 <_scanf_float+0x64>
 802486e:	2507      	movs	r5, #7
 8024870:	e7b1      	b.n	80247d6 <_scanf_float+0x192>
 8024872:	6822      	ldr	r2, [r4, #0]
 8024874:	0591      	lsls	r1, r2, #22
 8024876:	f57f af17 	bpl.w	80246a8 <_scanf_float+0x64>
 802487a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 802487e:	6022      	str	r2, [r4, #0]
 8024880:	f8cd 9008 	str.w	r9, [sp, #8]
 8024884:	e7a7      	b.n	80247d6 <_scanf_float+0x192>
 8024886:	6822      	ldr	r2, [r4, #0]
 8024888:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 802488c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8024890:	d006      	beq.n	80248a0 <_scanf_float+0x25c>
 8024892:	0550      	lsls	r0, r2, #21
 8024894:	f57f af08 	bpl.w	80246a8 <_scanf_float+0x64>
 8024898:	f1b9 0f00 	cmp.w	r9, #0
 802489c:	f000 80de 	beq.w	8024a5c <_scanf_float+0x418>
 80248a0:	0591      	lsls	r1, r2, #22
 80248a2:	bf58      	it	pl
 80248a4:	9902      	ldrpl	r1, [sp, #8]
 80248a6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80248aa:	bf58      	it	pl
 80248ac:	eba9 0101 	subpl.w	r1, r9, r1
 80248b0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80248b4:	bf58      	it	pl
 80248b6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80248ba:	6022      	str	r2, [r4, #0]
 80248bc:	f04f 0900 	mov.w	r9, #0
 80248c0:	e789      	b.n	80247d6 <_scanf_float+0x192>
 80248c2:	f04f 0a03 	mov.w	sl, #3
 80248c6:	e786      	b.n	80247d6 <_scanf_float+0x192>
 80248c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80248cc:	4639      	mov	r1, r7
 80248ce:	4640      	mov	r0, r8
 80248d0:	4798      	blx	r3
 80248d2:	2800      	cmp	r0, #0
 80248d4:	f43f aedb 	beq.w	802468e <_scanf_float+0x4a>
 80248d8:	e6e6      	b.n	80246a8 <_scanf_float+0x64>
 80248da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80248de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80248e2:	463a      	mov	r2, r7
 80248e4:	4640      	mov	r0, r8
 80248e6:	4798      	blx	r3
 80248e8:	6923      	ldr	r3, [r4, #16]
 80248ea:	3b01      	subs	r3, #1
 80248ec:	6123      	str	r3, [r4, #16]
 80248ee:	e6e8      	b.n	80246c2 <_scanf_float+0x7e>
 80248f0:	1e6b      	subs	r3, r5, #1
 80248f2:	2b06      	cmp	r3, #6
 80248f4:	d824      	bhi.n	8024940 <_scanf_float+0x2fc>
 80248f6:	2d02      	cmp	r5, #2
 80248f8:	d836      	bhi.n	8024968 <_scanf_float+0x324>
 80248fa:	9b01      	ldr	r3, [sp, #4]
 80248fc:	429e      	cmp	r6, r3
 80248fe:	f67f aee4 	bls.w	80246ca <_scanf_float+0x86>
 8024902:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024906:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802490a:	463a      	mov	r2, r7
 802490c:	4640      	mov	r0, r8
 802490e:	4798      	blx	r3
 8024910:	6923      	ldr	r3, [r4, #16]
 8024912:	3b01      	subs	r3, #1
 8024914:	6123      	str	r3, [r4, #16]
 8024916:	e7f0      	b.n	80248fa <_scanf_float+0x2b6>
 8024918:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802491c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8024920:	463a      	mov	r2, r7
 8024922:	4640      	mov	r0, r8
 8024924:	4798      	blx	r3
 8024926:	6923      	ldr	r3, [r4, #16]
 8024928:	3b01      	subs	r3, #1
 802492a:	6123      	str	r3, [r4, #16]
 802492c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024930:	fa5f fa8a 	uxtb.w	sl, sl
 8024934:	f1ba 0f02 	cmp.w	sl, #2
 8024938:	d1ee      	bne.n	8024918 <_scanf_float+0x2d4>
 802493a:	3d03      	subs	r5, #3
 802493c:	b2ed      	uxtb	r5, r5
 802493e:	1b76      	subs	r6, r6, r5
 8024940:	6823      	ldr	r3, [r4, #0]
 8024942:	05da      	lsls	r2, r3, #23
 8024944:	d530      	bpl.n	80249a8 <_scanf_float+0x364>
 8024946:	055b      	lsls	r3, r3, #21
 8024948:	d511      	bpl.n	802496e <_scanf_float+0x32a>
 802494a:	9b01      	ldr	r3, [sp, #4]
 802494c:	429e      	cmp	r6, r3
 802494e:	f67f aebc 	bls.w	80246ca <_scanf_float+0x86>
 8024952:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024956:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802495a:	463a      	mov	r2, r7
 802495c:	4640      	mov	r0, r8
 802495e:	4798      	blx	r3
 8024960:	6923      	ldr	r3, [r4, #16]
 8024962:	3b01      	subs	r3, #1
 8024964:	6123      	str	r3, [r4, #16]
 8024966:	e7f0      	b.n	802494a <_scanf_float+0x306>
 8024968:	46aa      	mov	sl, r5
 802496a:	46b3      	mov	fp, r6
 802496c:	e7de      	b.n	802492c <_scanf_float+0x2e8>
 802496e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8024972:	6923      	ldr	r3, [r4, #16]
 8024974:	2965      	cmp	r1, #101	@ 0x65
 8024976:	f103 33ff 	add.w	r3, r3, #4294967295
 802497a:	f106 35ff 	add.w	r5, r6, #4294967295
 802497e:	6123      	str	r3, [r4, #16]
 8024980:	d00c      	beq.n	802499c <_scanf_float+0x358>
 8024982:	2945      	cmp	r1, #69	@ 0x45
 8024984:	d00a      	beq.n	802499c <_scanf_float+0x358>
 8024986:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802498a:	463a      	mov	r2, r7
 802498c:	4640      	mov	r0, r8
 802498e:	4798      	blx	r3
 8024990:	6923      	ldr	r3, [r4, #16]
 8024992:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8024996:	3b01      	subs	r3, #1
 8024998:	1eb5      	subs	r5, r6, #2
 802499a:	6123      	str	r3, [r4, #16]
 802499c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80249a0:	463a      	mov	r2, r7
 80249a2:	4640      	mov	r0, r8
 80249a4:	4798      	blx	r3
 80249a6:	462e      	mov	r6, r5
 80249a8:	6822      	ldr	r2, [r4, #0]
 80249aa:	f012 0210 	ands.w	r2, r2, #16
 80249ae:	d001      	beq.n	80249b4 <_scanf_float+0x370>
 80249b0:	2000      	movs	r0, #0
 80249b2:	e68b      	b.n	80246cc <_scanf_float+0x88>
 80249b4:	7032      	strb	r2, [r6, #0]
 80249b6:	6823      	ldr	r3, [r4, #0]
 80249b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80249bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80249c0:	d11c      	bne.n	80249fc <_scanf_float+0x3b8>
 80249c2:	9b02      	ldr	r3, [sp, #8]
 80249c4:	454b      	cmp	r3, r9
 80249c6:	eba3 0209 	sub.w	r2, r3, r9
 80249ca:	d123      	bne.n	8024a14 <_scanf_float+0x3d0>
 80249cc:	9901      	ldr	r1, [sp, #4]
 80249ce:	2200      	movs	r2, #0
 80249d0:	4640      	mov	r0, r8
 80249d2:	f7fe ffdd 	bl	8023990 <_strtod_r>
 80249d6:	9b03      	ldr	r3, [sp, #12]
 80249d8:	6821      	ldr	r1, [r4, #0]
 80249da:	681b      	ldr	r3, [r3, #0]
 80249dc:	f011 0f02 	tst.w	r1, #2
 80249e0:	ec57 6b10 	vmov	r6, r7, d0
 80249e4:	f103 0204 	add.w	r2, r3, #4
 80249e8:	d01f      	beq.n	8024a2a <_scanf_float+0x3e6>
 80249ea:	9903      	ldr	r1, [sp, #12]
 80249ec:	600a      	str	r2, [r1, #0]
 80249ee:	681b      	ldr	r3, [r3, #0]
 80249f0:	e9c3 6700 	strd	r6, r7, [r3]
 80249f4:	68e3      	ldr	r3, [r4, #12]
 80249f6:	3301      	adds	r3, #1
 80249f8:	60e3      	str	r3, [r4, #12]
 80249fa:	e7d9      	b.n	80249b0 <_scanf_float+0x36c>
 80249fc:	9b04      	ldr	r3, [sp, #16]
 80249fe:	2b00      	cmp	r3, #0
 8024a00:	d0e4      	beq.n	80249cc <_scanf_float+0x388>
 8024a02:	9905      	ldr	r1, [sp, #20]
 8024a04:	230a      	movs	r3, #10
 8024a06:	3101      	adds	r1, #1
 8024a08:	4640      	mov	r0, r8
 8024a0a:	f7ff f841 	bl	8023a90 <_strtol_r>
 8024a0e:	9b04      	ldr	r3, [sp, #16]
 8024a10:	9e05      	ldr	r6, [sp, #20]
 8024a12:	1ac2      	subs	r2, r0, r3
 8024a14:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8024a18:	429e      	cmp	r6, r3
 8024a1a:	bf28      	it	cs
 8024a1c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8024a20:	4910      	ldr	r1, [pc, #64]	@ (8024a64 <_scanf_float+0x420>)
 8024a22:	4630      	mov	r0, r6
 8024a24:	f000 f8f6 	bl	8024c14 <siprintf>
 8024a28:	e7d0      	b.n	80249cc <_scanf_float+0x388>
 8024a2a:	f011 0f04 	tst.w	r1, #4
 8024a2e:	9903      	ldr	r1, [sp, #12]
 8024a30:	600a      	str	r2, [r1, #0]
 8024a32:	d1dc      	bne.n	80249ee <_scanf_float+0x3aa>
 8024a34:	681d      	ldr	r5, [r3, #0]
 8024a36:	4632      	mov	r2, r6
 8024a38:	463b      	mov	r3, r7
 8024a3a:	4630      	mov	r0, r6
 8024a3c:	4639      	mov	r1, r7
 8024a3e:	f7e3 ffbd 	bl	80089bc <__aeabi_dcmpun>
 8024a42:	b128      	cbz	r0, 8024a50 <_scanf_float+0x40c>
 8024a44:	4808      	ldr	r0, [pc, #32]	@ (8024a68 <_scanf_float+0x424>)
 8024a46:	f000 faeb 	bl	8025020 <nanf>
 8024a4a:	ed85 0a00 	vstr	s0, [r5]
 8024a4e:	e7d1      	b.n	80249f4 <_scanf_float+0x3b0>
 8024a50:	4630      	mov	r0, r6
 8024a52:	4639      	mov	r1, r7
 8024a54:	f7e4 f810 	bl	8008a78 <__aeabi_d2f>
 8024a58:	6028      	str	r0, [r5, #0]
 8024a5a:	e7cb      	b.n	80249f4 <_scanf_float+0x3b0>
 8024a5c:	f04f 0900 	mov.w	r9, #0
 8024a60:	e629      	b.n	80246b6 <_scanf_float+0x72>
 8024a62:	bf00      	nop
 8024a64:	080317f5 	.word	0x080317f5
 8024a68:	0803166b 	.word	0x0803166b

08024a6c <std>:
 8024a6c:	2300      	movs	r3, #0
 8024a6e:	b510      	push	{r4, lr}
 8024a70:	4604      	mov	r4, r0
 8024a72:	e9c0 3300 	strd	r3, r3, [r0]
 8024a76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024a7a:	6083      	str	r3, [r0, #8]
 8024a7c:	8181      	strh	r1, [r0, #12]
 8024a7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8024a80:	81c2      	strh	r2, [r0, #14]
 8024a82:	6183      	str	r3, [r0, #24]
 8024a84:	4619      	mov	r1, r3
 8024a86:	2208      	movs	r2, #8
 8024a88:	305c      	adds	r0, #92	@ 0x5c
 8024a8a:	f000 f950 	bl	8024d2e <memset>
 8024a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8024ac4 <std+0x58>)
 8024a90:	6263      	str	r3, [r4, #36]	@ 0x24
 8024a92:	4b0d      	ldr	r3, [pc, #52]	@ (8024ac8 <std+0x5c>)
 8024a94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8024a96:	4b0d      	ldr	r3, [pc, #52]	@ (8024acc <std+0x60>)
 8024a98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8024a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8024ad0 <std+0x64>)
 8024a9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8024a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8024ad4 <std+0x68>)
 8024aa0:	6224      	str	r4, [r4, #32]
 8024aa2:	429c      	cmp	r4, r3
 8024aa4:	d006      	beq.n	8024ab4 <std+0x48>
 8024aa6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8024aaa:	4294      	cmp	r4, r2
 8024aac:	d002      	beq.n	8024ab4 <std+0x48>
 8024aae:	33d0      	adds	r3, #208	@ 0xd0
 8024ab0:	429c      	cmp	r4, r3
 8024ab2:	d105      	bne.n	8024ac0 <std+0x54>
 8024ab4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8024ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024abc:	f000 ba8c 	b.w	8024fd8 <__retarget_lock_init_recursive>
 8024ac0:	bd10      	pop	{r4, pc}
 8024ac2:	bf00      	nop
 8024ac4:	08024c55 	.word	0x08024c55
 8024ac8:	08024c77 	.word	0x08024c77
 8024acc:	08024caf 	.word	0x08024caf
 8024ad0:	08024cd3 	.word	0x08024cd3
 8024ad4:	200030d4 	.word	0x200030d4

08024ad8 <stdio_exit_handler>:
 8024ad8:	4a02      	ldr	r2, [pc, #8]	@ (8024ae4 <stdio_exit_handler+0xc>)
 8024ada:	4903      	ldr	r1, [pc, #12]	@ (8024ae8 <stdio_exit_handler+0x10>)
 8024adc:	4803      	ldr	r0, [pc, #12]	@ (8024aec <stdio_exit_handler+0x14>)
 8024ade:	f000 b87b 	b.w	8024bd8 <_fwalk_sglue>
 8024ae2:	bf00      	nop
 8024ae4:	200004b4 	.word	0x200004b4
 8024ae8:	08027435 	.word	0x08027435
 8024aec:	20000630 	.word	0x20000630

08024af0 <cleanup_stdio>:
 8024af0:	6841      	ldr	r1, [r0, #4]
 8024af2:	4b0c      	ldr	r3, [pc, #48]	@ (8024b24 <cleanup_stdio+0x34>)
 8024af4:	4299      	cmp	r1, r3
 8024af6:	b510      	push	{r4, lr}
 8024af8:	4604      	mov	r4, r0
 8024afa:	d001      	beq.n	8024b00 <cleanup_stdio+0x10>
 8024afc:	f002 fc9a 	bl	8027434 <_fflush_r>
 8024b00:	68a1      	ldr	r1, [r4, #8]
 8024b02:	4b09      	ldr	r3, [pc, #36]	@ (8024b28 <cleanup_stdio+0x38>)
 8024b04:	4299      	cmp	r1, r3
 8024b06:	d002      	beq.n	8024b0e <cleanup_stdio+0x1e>
 8024b08:	4620      	mov	r0, r4
 8024b0a:	f002 fc93 	bl	8027434 <_fflush_r>
 8024b0e:	68e1      	ldr	r1, [r4, #12]
 8024b10:	4b06      	ldr	r3, [pc, #24]	@ (8024b2c <cleanup_stdio+0x3c>)
 8024b12:	4299      	cmp	r1, r3
 8024b14:	d004      	beq.n	8024b20 <cleanup_stdio+0x30>
 8024b16:	4620      	mov	r0, r4
 8024b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024b1c:	f002 bc8a 	b.w	8027434 <_fflush_r>
 8024b20:	bd10      	pop	{r4, pc}
 8024b22:	bf00      	nop
 8024b24:	200030d4 	.word	0x200030d4
 8024b28:	2000313c 	.word	0x2000313c
 8024b2c:	200031a4 	.word	0x200031a4

08024b30 <global_stdio_init.part.0>:
 8024b30:	b510      	push	{r4, lr}
 8024b32:	4b0b      	ldr	r3, [pc, #44]	@ (8024b60 <global_stdio_init.part.0+0x30>)
 8024b34:	4c0b      	ldr	r4, [pc, #44]	@ (8024b64 <global_stdio_init.part.0+0x34>)
 8024b36:	4a0c      	ldr	r2, [pc, #48]	@ (8024b68 <global_stdio_init.part.0+0x38>)
 8024b38:	601a      	str	r2, [r3, #0]
 8024b3a:	4620      	mov	r0, r4
 8024b3c:	2200      	movs	r2, #0
 8024b3e:	2104      	movs	r1, #4
 8024b40:	f7ff ff94 	bl	8024a6c <std>
 8024b44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8024b48:	2201      	movs	r2, #1
 8024b4a:	2109      	movs	r1, #9
 8024b4c:	f7ff ff8e 	bl	8024a6c <std>
 8024b50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8024b54:	2202      	movs	r2, #2
 8024b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024b5a:	2112      	movs	r1, #18
 8024b5c:	f7ff bf86 	b.w	8024a6c <std>
 8024b60:	2000320c 	.word	0x2000320c
 8024b64:	200030d4 	.word	0x200030d4
 8024b68:	08024ad9 	.word	0x08024ad9

08024b6c <__sfp_lock_acquire>:
 8024b6c:	4801      	ldr	r0, [pc, #4]	@ (8024b74 <__sfp_lock_acquire+0x8>)
 8024b6e:	f000 ba34 	b.w	8024fda <__retarget_lock_acquire_recursive>
 8024b72:	bf00      	nop
 8024b74:	20003215 	.word	0x20003215

08024b78 <__sfp_lock_release>:
 8024b78:	4801      	ldr	r0, [pc, #4]	@ (8024b80 <__sfp_lock_release+0x8>)
 8024b7a:	f000 ba2f 	b.w	8024fdc <__retarget_lock_release_recursive>
 8024b7e:	bf00      	nop
 8024b80:	20003215 	.word	0x20003215

08024b84 <__sinit>:
 8024b84:	b510      	push	{r4, lr}
 8024b86:	4604      	mov	r4, r0
 8024b88:	f7ff fff0 	bl	8024b6c <__sfp_lock_acquire>
 8024b8c:	6a23      	ldr	r3, [r4, #32]
 8024b8e:	b11b      	cbz	r3, 8024b98 <__sinit+0x14>
 8024b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024b94:	f7ff bff0 	b.w	8024b78 <__sfp_lock_release>
 8024b98:	4b04      	ldr	r3, [pc, #16]	@ (8024bac <__sinit+0x28>)
 8024b9a:	6223      	str	r3, [r4, #32]
 8024b9c:	4b04      	ldr	r3, [pc, #16]	@ (8024bb0 <__sinit+0x2c>)
 8024b9e:	681b      	ldr	r3, [r3, #0]
 8024ba0:	2b00      	cmp	r3, #0
 8024ba2:	d1f5      	bne.n	8024b90 <__sinit+0xc>
 8024ba4:	f7ff ffc4 	bl	8024b30 <global_stdio_init.part.0>
 8024ba8:	e7f2      	b.n	8024b90 <__sinit+0xc>
 8024baa:	bf00      	nop
 8024bac:	08024af1 	.word	0x08024af1
 8024bb0:	2000320c 	.word	0x2000320c

08024bb4 <fiprintf>:
 8024bb4:	b40e      	push	{r1, r2, r3}
 8024bb6:	b503      	push	{r0, r1, lr}
 8024bb8:	4601      	mov	r1, r0
 8024bba:	ab03      	add	r3, sp, #12
 8024bbc:	4805      	ldr	r0, [pc, #20]	@ (8024bd4 <fiprintf+0x20>)
 8024bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8024bc2:	6800      	ldr	r0, [r0, #0]
 8024bc4:	9301      	str	r3, [sp, #4]
 8024bc6:	f002 fa99 	bl	80270fc <_vfiprintf_r>
 8024bca:	b002      	add	sp, #8
 8024bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8024bd0:	b003      	add	sp, #12
 8024bd2:	4770      	bx	lr
 8024bd4:	2000062c 	.word	0x2000062c

08024bd8 <_fwalk_sglue>:
 8024bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024bdc:	4607      	mov	r7, r0
 8024bde:	4688      	mov	r8, r1
 8024be0:	4614      	mov	r4, r2
 8024be2:	2600      	movs	r6, #0
 8024be4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024be8:	f1b9 0901 	subs.w	r9, r9, #1
 8024bec:	d505      	bpl.n	8024bfa <_fwalk_sglue+0x22>
 8024bee:	6824      	ldr	r4, [r4, #0]
 8024bf0:	2c00      	cmp	r4, #0
 8024bf2:	d1f7      	bne.n	8024be4 <_fwalk_sglue+0xc>
 8024bf4:	4630      	mov	r0, r6
 8024bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024bfa:	89ab      	ldrh	r3, [r5, #12]
 8024bfc:	2b01      	cmp	r3, #1
 8024bfe:	d907      	bls.n	8024c10 <_fwalk_sglue+0x38>
 8024c00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024c04:	3301      	adds	r3, #1
 8024c06:	d003      	beq.n	8024c10 <_fwalk_sglue+0x38>
 8024c08:	4629      	mov	r1, r5
 8024c0a:	4638      	mov	r0, r7
 8024c0c:	47c0      	blx	r8
 8024c0e:	4306      	orrs	r6, r0
 8024c10:	3568      	adds	r5, #104	@ 0x68
 8024c12:	e7e9      	b.n	8024be8 <_fwalk_sglue+0x10>

08024c14 <siprintf>:
 8024c14:	b40e      	push	{r1, r2, r3}
 8024c16:	b500      	push	{lr}
 8024c18:	b09c      	sub	sp, #112	@ 0x70
 8024c1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8024c1c:	9002      	str	r0, [sp, #8]
 8024c1e:	9006      	str	r0, [sp, #24]
 8024c20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8024c24:	4809      	ldr	r0, [pc, #36]	@ (8024c4c <siprintf+0x38>)
 8024c26:	9107      	str	r1, [sp, #28]
 8024c28:	9104      	str	r1, [sp, #16]
 8024c2a:	4909      	ldr	r1, [pc, #36]	@ (8024c50 <siprintf+0x3c>)
 8024c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8024c30:	9105      	str	r1, [sp, #20]
 8024c32:	6800      	ldr	r0, [r0, #0]
 8024c34:	9301      	str	r3, [sp, #4]
 8024c36:	a902      	add	r1, sp, #8
 8024c38:	f002 f93a 	bl	8026eb0 <_svfiprintf_r>
 8024c3c:	9b02      	ldr	r3, [sp, #8]
 8024c3e:	2200      	movs	r2, #0
 8024c40:	701a      	strb	r2, [r3, #0]
 8024c42:	b01c      	add	sp, #112	@ 0x70
 8024c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8024c48:	b003      	add	sp, #12
 8024c4a:	4770      	bx	lr
 8024c4c:	2000062c 	.word	0x2000062c
 8024c50:	ffff0208 	.word	0xffff0208

08024c54 <__sread>:
 8024c54:	b510      	push	{r4, lr}
 8024c56:	460c      	mov	r4, r1
 8024c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024c5c:	f000 f95e 	bl	8024f1c <_read_r>
 8024c60:	2800      	cmp	r0, #0
 8024c62:	bfab      	itete	ge
 8024c64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8024c66:	89a3      	ldrhlt	r3, [r4, #12]
 8024c68:	181b      	addge	r3, r3, r0
 8024c6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8024c6e:	bfac      	ite	ge
 8024c70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8024c72:	81a3      	strhlt	r3, [r4, #12]
 8024c74:	bd10      	pop	{r4, pc}

08024c76 <__swrite>:
 8024c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024c7a:	461f      	mov	r7, r3
 8024c7c:	898b      	ldrh	r3, [r1, #12]
 8024c7e:	05db      	lsls	r3, r3, #23
 8024c80:	4605      	mov	r5, r0
 8024c82:	460c      	mov	r4, r1
 8024c84:	4616      	mov	r6, r2
 8024c86:	d505      	bpl.n	8024c94 <__swrite+0x1e>
 8024c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024c8c:	2302      	movs	r3, #2
 8024c8e:	2200      	movs	r2, #0
 8024c90:	f000 f932 	bl	8024ef8 <_lseek_r>
 8024c94:	89a3      	ldrh	r3, [r4, #12]
 8024c96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024c9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8024c9e:	81a3      	strh	r3, [r4, #12]
 8024ca0:	4632      	mov	r2, r6
 8024ca2:	463b      	mov	r3, r7
 8024ca4:	4628      	mov	r0, r5
 8024ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024caa:	f000 b959 	b.w	8024f60 <_write_r>

08024cae <__sseek>:
 8024cae:	b510      	push	{r4, lr}
 8024cb0:	460c      	mov	r4, r1
 8024cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024cb6:	f000 f91f 	bl	8024ef8 <_lseek_r>
 8024cba:	1c43      	adds	r3, r0, #1
 8024cbc:	89a3      	ldrh	r3, [r4, #12]
 8024cbe:	bf15      	itete	ne
 8024cc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8024cc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8024cc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8024cca:	81a3      	strheq	r3, [r4, #12]
 8024ccc:	bf18      	it	ne
 8024cce:	81a3      	strhne	r3, [r4, #12]
 8024cd0:	bd10      	pop	{r4, pc}

08024cd2 <__sclose>:
 8024cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024cd6:	f000 b8ff 	b.w	8024ed8 <_close_r>

08024cda <memcmp>:
 8024cda:	b510      	push	{r4, lr}
 8024cdc:	3901      	subs	r1, #1
 8024cde:	4402      	add	r2, r0
 8024ce0:	4290      	cmp	r0, r2
 8024ce2:	d101      	bne.n	8024ce8 <memcmp+0xe>
 8024ce4:	2000      	movs	r0, #0
 8024ce6:	e005      	b.n	8024cf4 <memcmp+0x1a>
 8024ce8:	7803      	ldrb	r3, [r0, #0]
 8024cea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8024cee:	42a3      	cmp	r3, r4
 8024cf0:	d001      	beq.n	8024cf6 <memcmp+0x1c>
 8024cf2:	1b18      	subs	r0, r3, r4
 8024cf4:	bd10      	pop	{r4, pc}
 8024cf6:	3001      	adds	r0, #1
 8024cf8:	e7f2      	b.n	8024ce0 <memcmp+0x6>

08024cfa <memmove>:
 8024cfa:	4288      	cmp	r0, r1
 8024cfc:	b510      	push	{r4, lr}
 8024cfe:	eb01 0402 	add.w	r4, r1, r2
 8024d02:	d902      	bls.n	8024d0a <memmove+0x10>
 8024d04:	4284      	cmp	r4, r0
 8024d06:	4623      	mov	r3, r4
 8024d08:	d807      	bhi.n	8024d1a <memmove+0x20>
 8024d0a:	1e43      	subs	r3, r0, #1
 8024d0c:	42a1      	cmp	r1, r4
 8024d0e:	d008      	beq.n	8024d22 <memmove+0x28>
 8024d10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024d14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024d18:	e7f8      	b.n	8024d0c <memmove+0x12>
 8024d1a:	4402      	add	r2, r0
 8024d1c:	4601      	mov	r1, r0
 8024d1e:	428a      	cmp	r2, r1
 8024d20:	d100      	bne.n	8024d24 <memmove+0x2a>
 8024d22:	bd10      	pop	{r4, pc}
 8024d24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024d28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8024d2c:	e7f7      	b.n	8024d1e <memmove+0x24>

08024d2e <memset>:
 8024d2e:	4402      	add	r2, r0
 8024d30:	4603      	mov	r3, r0
 8024d32:	4293      	cmp	r3, r2
 8024d34:	d100      	bne.n	8024d38 <memset+0xa>
 8024d36:	4770      	bx	lr
 8024d38:	f803 1b01 	strb.w	r1, [r3], #1
 8024d3c:	e7f9      	b.n	8024d32 <memset+0x4>

08024d3e <strcat>:
 8024d3e:	b510      	push	{r4, lr}
 8024d40:	4602      	mov	r2, r0
 8024d42:	7814      	ldrb	r4, [r2, #0]
 8024d44:	4613      	mov	r3, r2
 8024d46:	3201      	adds	r2, #1
 8024d48:	2c00      	cmp	r4, #0
 8024d4a:	d1fa      	bne.n	8024d42 <strcat+0x4>
 8024d4c:	3b01      	subs	r3, #1
 8024d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024d52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024d56:	2a00      	cmp	r2, #0
 8024d58:	d1f9      	bne.n	8024d4e <strcat+0x10>
 8024d5a:	bd10      	pop	{r4, pc}

08024d5c <strchr>:
 8024d5c:	b2c9      	uxtb	r1, r1
 8024d5e:	4603      	mov	r3, r0
 8024d60:	4618      	mov	r0, r3
 8024d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024d66:	b112      	cbz	r2, 8024d6e <strchr+0x12>
 8024d68:	428a      	cmp	r2, r1
 8024d6a:	d1f9      	bne.n	8024d60 <strchr+0x4>
 8024d6c:	4770      	bx	lr
 8024d6e:	2900      	cmp	r1, #0
 8024d70:	bf18      	it	ne
 8024d72:	2000      	movne	r0, #0
 8024d74:	4770      	bx	lr

08024d76 <strncmp>:
 8024d76:	b510      	push	{r4, lr}
 8024d78:	b16a      	cbz	r2, 8024d96 <strncmp+0x20>
 8024d7a:	3901      	subs	r1, #1
 8024d7c:	1884      	adds	r4, r0, r2
 8024d7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024d82:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8024d86:	429a      	cmp	r2, r3
 8024d88:	d103      	bne.n	8024d92 <strncmp+0x1c>
 8024d8a:	42a0      	cmp	r0, r4
 8024d8c:	d001      	beq.n	8024d92 <strncmp+0x1c>
 8024d8e:	2a00      	cmp	r2, #0
 8024d90:	d1f5      	bne.n	8024d7e <strncmp+0x8>
 8024d92:	1ad0      	subs	r0, r2, r3
 8024d94:	bd10      	pop	{r4, pc}
 8024d96:	4610      	mov	r0, r2
 8024d98:	e7fc      	b.n	8024d94 <strncmp+0x1e>

08024d9a <strncpy>:
 8024d9a:	b510      	push	{r4, lr}
 8024d9c:	3901      	subs	r1, #1
 8024d9e:	4603      	mov	r3, r0
 8024da0:	b132      	cbz	r2, 8024db0 <strncpy+0x16>
 8024da2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8024da6:	f803 4b01 	strb.w	r4, [r3], #1
 8024daa:	3a01      	subs	r2, #1
 8024dac:	2c00      	cmp	r4, #0
 8024dae:	d1f7      	bne.n	8024da0 <strncpy+0x6>
 8024db0:	441a      	add	r2, r3
 8024db2:	2100      	movs	r1, #0
 8024db4:	4293      	cmp	r3, r2
 8024db6:	d100      	bne.n	8024dba <strncpy+0x20>
 8024db8:	bd10      	pop	{r4, pc}
 8024dba:	f803 1b01 	strb.w	r1, [r3], #1
 8024dbe:	e7f9      	b.n	8024db4 <strncpy+0x1a>

08024dc0 <strrchr>:
 8024dc0:	b538      	push	{r3, r4, r5, lr}
 8024dc2:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8024dc6:	4603      	mov	r3, r0
 8024dc8:	d10e      	bne.n	8024de8 <strrchr+0x28>
 8024dca:	4621      	mov	r1, r4
 8024dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024dd0:	f7ff bfc4 	b.w	8024d5c <strchr>
 8024dd4:	1c43      	adds	r3, r0, #1
 8024dd6:	4605      	mov	r5, r0
 8024dd8:	4621      	mov	r1, r4
 8024dda:	4618      	mov	r0, r3
 8024ddc:	f7ff ffbe 	bl	8024d5c <strchr>
 8024de0:	2800      	cmp	r0, #0
 8024de2:	d1f7      	bne.n	8024dd4 <strrchr+0x14>
 8024de4:	4628      	mov	r0, r5
 8024de6:	bd38      	pop	{r3, r4, r5, pc}
 8024de8:	2500      	movs	r5, #0
 8024dea:	e7f5      	b.n	8024dd8 <strrchr+0x18>

08024dec <strtok>:
 8024dec:	4b16      	ldr	r3, [pc, #88]	@ (8024e48 <strtok+0x5c>)
 8024dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024df2:	681f      	ldr	r7, [r3, #0]
 8024df4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8024df6:	4605      	mov	r5, r0
 8024df8:	460e      	mov	r6, r1
 8024dfa:	b9ec      	cbnz	r4, 8024e38 <strtok+0x4c>
 8024dfc:	2050      	movs	r0, #80	@ 0x50
 8024dfe:	f7fd fecd 	bl	8022b9c <malloc>
 8024e02:	4602      	mov	r2, r0
 8024e04:	6478      	str	r0, [r7, #68]	@ 0x44
 8024e06:	b920      	cbnz	r0, 8024e12 <strtok+0x26>
 8024e08:	4b10      	ldr	r3, [pc, #64]	@ (8024e4c <strtok+0x60>)
 8024e0a:	4811      	ldr	r0, [pc, #68]	@ (8024e50 <strtok+0x64>)
 8024e0c:	215b      	movs	r1, #91	@ 0x5b
 8024e0e:	f7fd fe8b 	bl	8022b28 <__assert_func>
 8024e12:	e9c0 4400 	strd	r4, r4, [r0]
 8024e16:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8024e1a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8024e1e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8024e22:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8024e26:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8024e2a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8024e2e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8024e32:	6184      	str	r4, [r0, #24]
 8024e34:	7704      	strb	r4, [r0, #28]
 8024e36:	6244      	str	r4, [r0, #36]	@ 0x24
 8024e38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8024e3a:	4631      	mov	r1, r6
 8024e3c:	4628      	mov	r0, r5
 8024e3e:	2301      	movs	r3, #1
 8024e40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024e44:	f000 b806 	b.w	8024e54 <__strtok_r>
 8024e48:	2000062c 	.word	0x2000062c
 8024e4c:	080317fa 	.word	0x080317fa
 8024e50:	08031811 	.word	0x08031811

08024e54 <__strtok_r>:
 8024e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e56:	4604      	mov	r4, r0
 8024e58:	b908      	cbnz	r0, 8024e5e <__strtok_r+0xa>
 8024e5a:	6814      	ldr	r4, [r2, #0]
 8024e5c:	b144      	cbz	r4, 8024e70 <__strtok_r+0x1c>
 8024e5e:	4620      	mov	r0, r4
 8024e60:	f814 5b01 	ldrb.w	r5, [r4], #1
 8024e64:	460f      	mov	r7, r1
 8024e66:	f817 6b01 	ldrb.w	r6, [r7], #1
 8024e6a:	b91e      	cbnz	r6, 8024e74 <__strtok_r+0x20>
 8024e6c:	b965      	cbnz	r5, 8024e88 <__strtok_r+0x34>
 8024e6e:	6015      	str	r5, [r2, #0]
 8024e70:	2000      	movs	r0, #0
 8024e72:	e005      	b.n	8024e80 <__strtok_r+0x2c>
 8024e74:	42b5      	cmp	r5, r6
 8024e76:	d1f6      	bne.n	8024e66 <__strtok_r+0x12>
 8024e78:	2b00      	cmp	r3, #0
 8024e7a:	d1f0      	bne.n	8024e5e <__strtok_r+0xa>
 8024e7c:	6014      	str	r4, [r2, #0]
 8024e7e:	7003      	strb	r3, [r0, #0]
 8024e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024e82:	461c      	mov	r4, r3
 8024e84:	e00c      	b.n	8024ea0 <__strtok_r+0x4c>
 8024e86:	b915      	cbnz	r5, 8024e8e <__strtok_r+0x3a>
 8024e88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8024e8c:	460e      	mov	r6, r1
 8024e8e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8024e92:	42ab      	cmp	r3, r5
 8024e94:	d1f7      	bne.n	8024e86 <__strtok_r+0x32>
 8024e96:	2b00      	cmp	r3, #0
 8024e98:	d0f3      	beq.n	8024e82 <__strtok_r+0x2e>
 8024e9a:	2300      	movs	r3, #0
 8024e9c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8024ea0:	6014      	str	r4, [r2, #0]
 8024ea2:	e7ed      	b.n	8024e80 <__strtok_r+0x2c>

08024ea4 <strstr>:
 8024ea4:	780a      	ldrb	r2, [r1, #0]
 8024ea6:	b570      	push	{r4, r5, r6, lr}
 8024ea8:	b96a      	cbnz	r2, 8024ec6 <strstr+0x22>
 8024eaa:	bd70      	pop	{r4, r5, r6, pc}
 8024eac:	429a      	cmp	r2, r3
 8024eae:	d109      	bne.n	8024ec4 <strstr+0x20>
 8024eb0:	460c      	mov	r4, r1
 8024eb2:	4605      	mov	r5, r0
 8024eb4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8024eb8:	2b00      	cmp	r3, #0
 8024eba:	d0f6      	beq.n	8024eaa <strstr+0x6>
 8024ebc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8024ec0:	429e      	cmp	r6, r3
 8024ec2:	d0f7      	beq.n	8024eb4 <strstr+0x10>
 8024ec4:	3001      	adds	r0, #1
 8024ec6:	7803      	ldrb	r3, [r0, #0]
 8024ec8:	2b00      	cmp	r3, #0
 8024eca:	d1ef      	bne.n	8024eac <strstr+0x8>
 8024ecc:	4618      	mov	r0, r3
 8024ece:	e7ec      	b.n	8024eaa <strstr+0x6>

08024ed0 <_localeconv_r>:
 8024ed0:	4800      	ldr	r0, [pc, #0]	@ (8024ed4 <_localeconv_r+0x4>)
 8024ed2:	4770      	bx	lr
 8024ed4:	200005b0 	.word	0x200005b0

08024ed8 <_close_r>:
 8024ed8:	b538      	push	{r3, r4, r5, lr}
 8024eda:	4d06      	ldr	r5, [pc, #24]	@ (8024ef4 <_close_r+0x1c>)
 8024edc:	2300      	movs	r3, #0
 8024ede:	4604      	mov	r4, r0
 8024ee0:	4608      	mov	r0, r1
 8024ee2:	602b      	str	r3, [r5, #0]
 8024ee4:	f7e7 ff88 	bl	800cdf8 <_close>
 8024ee8:	1c43      	adds	r3, r0, #1
 8024eea:	d102      	bne.n	8024ef2 <_close_r+0x1a>
 8024eec:	682b      	ldr	r3, [r5, #0]
 8024eee:	b103      	cbz	r3, 8024ef2 <_close_r+0x1a>
 8024ef0:	6023      	str	r3, [r4, #0]
 8024ef2:	bd38      	pop	{r3, r4, r5, pc}
 8024ef4:	20003210 	.word	0x20003210

08024ef8 <_lseek_r>:
 8024ef8:	b538      	push	{r3, r4, r5, lr}
 8024efa:	4d07      	ldr	r5, [pc, #28]	@ (8024f18 <_lseek_r+0x20>)
 8024efc:	4604      	mov	r4, r0
 8024efe:	4608      	mov	r0, r1
 8024f00:	4611      	mov	r1, r2
 8024f02:	2200      	movs	r2, #0
 8024f04:	602a      	str	r2, [r5, #0]
 8024f06:	461a      	mov	r2, r3
 8024f08:	f7e7 ff80 	bl	800ce0c <_lseek>
 8024f0c:	1c43      	adds	r3, r0, #1
 8024f0e:	d102      	bne.n	8024f16 <_lseek_r+0x1e>
 8024f10:	682b      	ldr	r3, [r5, #0]
 8024f12:	b103      	cbz	r3, 8024f16 <_lseek_r+0x1e>
 8024f14:	6023      	str	r3, [r4, #0]
 8024f16:	bd38      	pop	{r3, r4, r5, pc}
 8024f18:	20003210 	.word	0x20003210

08024f1c <_read_r>:
 8024f1c:	b538      	push	{r3, r4, r5, lr}
 8024f1e:	4d07      	ldr	r5, [pc, #28]	@ (8024f3c <_read_r+0x20>)
 8024f20:	4604      	mov	r4, r0
 8024f22:	4608      	mov	r0, r1
 8024f24:	4611      	mov	r1, r2
 8024f26:	2200      	movs	r2, #0
 8024f28:	602a      	str	r2, [r5, #0]
 8024f2a:	461a      	mov	r2, r3
 8024f2c:	f7e7 ff46 	bl	800cdbc <_read>
 8024f30:	1c43      	adds	r3, r0, #1
 8024f32:	d102      	bne.n	8024f3a <_read_r+0x1e>
 8024f34:	682b      	ldr	r3, [r5, #0]
 8024f36:	b103      	cbz	r3, 8024f3a <_read_r+0x1e>
 8024f38:	6023      	str	r3, [r4, #0]
 8024f3a:	bd38      	pop	{r3, r4, r5, pc}
 8024f3c:	20003210 	.word	0x20003210

08024f40 <_sbrk_r>:
 8024f40:	b538      	push	{r3, r4, r5, lr}
 8024f42:	4d06      	ldr	r5, [pc, #24]	@ (8024f5c <_sbrk_r+0x1c>)
 8024f44:	2300      	movs	r3, #0
 8024f46:	4604      	mov	r4, r0
 8024f48:	4608      	mov	r0, r1
 8024f4a:	602b      	str	r3, [r5, #0]
 8024f4c:	f7e7 ff60 	bl	800ce10 <_sbrk>
 8024f50:	1c43      	adds	r3, r0, #1
 8024f52:	d102      	bne.n	8024f5a <_sbrk_r+0x1a>
 8024f54:	682b      	ldr	r3, [r5, #0]
 8024f56:	b103      	cbz	r3, 8024f5a <_sbrk_r+0x1a>
 8024f58:	6023      	str	r3, [r4, #0]
 8024f5a:	bd38      	pop	{r3, r4, r5, pc}
 8024f5c:	20003210 	.word	0x20003210

08024f60 <_write_r>:
 8024f60:	b538      	push	{r3, r4, r5, lr}
 8024f62:	4d07      	ldr	r5, [pc, #28]	@ (8024f80 <_write_r+0x20>)
 8024f64:	4604      	mov	r4, r0
 8024f66:	4608      	mov	r0, r1
 8024f68:	4611      	mov	r1, r2
 8024f6a:	2200      	movs	r2, #0
 8024f6c:	602a      	str	r2, [r5, #0]
 8024f6e:	461a      	mov	r2, r3
 8024f70:	f7e7 ff34 	bl	800cddc <_write>
 8024f74:	1c43      	adds	r3, r0, #1
 8024f76:	d102      	bne.n	8024f7e <_write_r+0x1e>
 8024f78:	682b      	ldr	r3, [r5, #0]
 8024f7a:	b103      	cbz	r3, 8024f7e <_write_r+0x1e>
 8024f7c:	6023      	str	r3, [r4, #0]
 8024f7e:	bd38      	pop	{r3, r4, r5, pc}
 8024f80:	20003210 	.word	0x20003210

08024f84 <__errno>:
 8024f84:	4b01      	ldr	r3, [pc, #4]	@ (8024f8c <__errno+0x8>)
 8024f86:	6818      	ldr	r0, [r3, #0]
 8024f88:	4770      	bx	lr
 8024f8a:	bf00      	nop
 8024f8c:	2000062c 	.word	0x2000062c

08024f90 <__libc_init_array>:
 8024f90:	b570      	push	{r4, r5, r6, lr}
 8024f92:	4d0d      	ldr	r5, [pc, #52]	@ (8024fc8 <__libc_init_array+0x38>)
 8024f94:	4c0d      	ldr	r4, [pc, #52]	@ (8024fcc <__libc_init_array+0x3c>)
 8024f96:	1b64      	subs	r4, r4, r5
 8024f98:	10a4      	asrs	r4, r4, #2
 8024f9a:	2600      	movs	r6, #0
 8024f9c:	42a6      	cmp	r6, r4
 8024f9e:	d109      	bne.n	8024fb4 <__libc_init_array+0x24>
 8024fa0:	4d0b      	ldr	r5, [pc, #44]	@ (8024fd0 <__libc_init_array+0x40>)
 8024fa2:	4c0c      	ldr	r4, [pc, #48]	@ (8024fd4 <__libc_init_array+0x44>)
 8024fa4:	f004 f8ea 	bl	802917c <_init>
 8024fa8:	1b64      	subs	r4, r4, r5
 8024faa:	10a4      	asrs	r4, r4, #2
 8024fac:	2600      	movs	r6, #0
 8024fae:	42a6      	cmp	r6, r4
 8024fb0:	d105      	bne.n	8024fbe <__libc_init_array+0x2e>
 8024fb2:	bd70      	pop	{r4, r5, r6, pc}
 8024fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8024fb8:	4798      	blx	r3
 8024fba:	3601      	adds	r6, #1
 8024fbc:	e7ee      	b.n	8024f9c <__libc_init_array+0xc>
 8024fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8024fc2:	4798      	blx	r3
 8024fc4:	3601      	adds	r6, #1
 8024fc6:	e7f2      	b.n	8024fae <__libc_init_array+0x1e>
 8024fc8:	08031f18 	.word	0x08031f18
 8024fcc:	08031f18 	.word	0x08031f18
 8024fd0:	08031f18 	.word	0x08031f18
 8024fd4:	08031f1c 	.word	0x08031f1c

08024fd8 <__retarget_lock_init_recursive>:
 8024fd8:	4770      	bx	lr

08024fda <__retarget_lock_acquire_recursive>:
 8024fda:	4770      	bx	lr

08024fdc <__retarget_lock_release_recursive>:
 8024fdc:	4770      	bx	lr

08024fde <strcpy>:
 8024fde:	4603      	mov	r3, r0
 8024fe0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024fe4:	f803 2b01 	strb.w	r2, [r3], #1
 8024fe8:	2a00      	cmp	r2, #0
 8024fea:	d1f9      	bne.n	8024fe0 <strcpy+0x2>
 8024fec:	4770      	bx	lr

08024fee <memcpy>:
 8024fee:	440a      	add	r2, r1
 8024ff0:	4291      	cmp	r1, r2
 8024ff2:	f100 33ff 	add.w	r3, r0, #4294967295
 8024ff6:	d100      	bne.n	8024ffa <memcpy+0xc>
 8024ff8:	4770      	bx	lr
 8024ffa:	b510      	push	{r4, lr}
 8024ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025000:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025004:	4291      	cmp	r1, r2
 8025006:	d1f9      	bne.n	8024ffc <memcpy+0xe>
 8025008:	bd10      	pop	{r4, pc}
 802500a:	0000      	movs	r0, r0
 802500c:	0000      	movs	r0, r0
	...

08025010 <nan>:
 8025010:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8025018 <nan+0x8>
 8025014:	4770      	bx	lr
 8025016:	bf00      	nop
 8025018:	00000000 	.word	0x00000000
 802501c:	7ff80000 	.word	0x7ff80000

08025020 <nanf>:
 8025020:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8025028 <nanf+0x8>
 8025024:	4770      	bx	lr
 8025026:	bf00      	nop
 8025028:	7fc00000 	.word	0x7fc00000

0802502c <abort>:
 802502c:	b508      	push	{r3, lr}
 802502e:	2006      	movs	r0, #6
 8025030:	f002 fae4 	bl	80275fc <raise>
 8025034:	2001      	movs	r0, #1
 8025036:	f7e7 febb 	bl	800cdb0 <_exit>

0802503a <quorem>:
 802503a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802503e:	6903      	ldr	r3, [r0, #16]
 8025040:	690c      	ldr	r4, [r1, #16]
 8025042:	42a3      	cmp	r3, r4
 8025044:	4607      	mov	r7, r0
 8025046:	db7e      	blt.n	8025146 <quorem+0x10c>
 8025048:	3c01      	subs	r4, #1
 802504a:	f101 0814 	add.w	r8, r1, #20
 802504e:	00a3      	lsls	r3, r4, #2
 8025050:	f100 0514 	add.w	r5, r0, #20
 8025054:	9300      	str	r3, [sp, #0]
 8025056:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802505a:	9301      	str	r3, [sp, #4]
 802505c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8025060:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025064:	3301      	adds	r3, #1
 8025066:	429a      	cmp	r2, r3
 8025068:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802506c:	fbb2 f6f3 	udiv	r6, r2, r3
 8025070:	d32e      	bcc.n	80250d0 <quorem+0x96>
 8025072:	f04f 0a00 	mov.w	sl, #0
 8025076:	46c4      	mov	ip, r8
 8025078:	46ae      	mov	lr, r5
 802507a:	46d3      	mov	fp, sl
 802507c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8025080:	b298      	uxth	r0, r3
 8025082:	fb06 a000 	mla	r0, r6, r0, sl
 8025086:	0c02      	lsrs	r2, r0, #16
 8025088:	0c1b      	lsrs	r3, r3, #16
 802508a:	fb06 2303 	mla	r3, r6, r3, r2
 802508e:	f8de 2000 	ldr.w	r2, [lr]
 8025092:	b280      	uxth	r0, r0
 8025094:	b292      	uxth	r2, r2
 8025096:	1a12      	subs	r2, r2, r0
 8025098:	445a      	add	r2, fp
 802509a:	f8de 0000 	ldr.w	r0, [lr]
 802509e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80250a2:	b29b      	uxth	r3, r3
 80250a4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80250a8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80250ac:	b292      	uxth	r2, r2
 80250ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80250b2:	45e1      	cmp	r9, ip
 80250b4:	f84e 2b04 	str.w	r2, [lr], #4
 80250b8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80250bc:	d2de      	bcs.n	802507c <quorem+0x42>
 80250be:	9b00      	ldr	r3, [sp, #0]
 80250c0:	58eb      	ldr	r3, [r5, r3]
 80250c2:	b92b      	cbnz	r3, 80250d0 <quorem+0x96>
 80250c4:	9b01      	ldr	r3, [sp, #4]
 80250c6:	3b04      	subs	r3, #4
 80250c8:	429d      	cmp	r5, r3
 80250ca:	461a      	mov	r2, r3
 80250cc:	d32f      	bcc.n	802512e <quorem+0xf4>
 80250ce:	613c      	str	r4, [r7, #16]
 80250d0:	4638      	mov	r0, r7
 80250d2:	f001 fc8f 	bl	80269f4 <__mcmp>
 80250d6:	2800      	cmp	r0, #0
 80250d8:	db25      	blt.n	8025126 <quorem+0xec>
 80250da:	4629      	mov	r1, r5
 80250dc:	2000      	movs	r0, #0
 80250de:	f858 2b04 	ldr.w	r2, [r8], #4
 80250e2:	f8d1 c000 	ldr.w	ip, [r1]
 80250e6:	fa1f fe82 	uxth.w	lr, r2
 80250ea:	fa1f f38c 	uxth.w	r3, ip
 80250ee:	eba3 030e 	sub.w	r3, r3, lr
 80250f2:	4403      	add	r3, r0
 80250f4:	0c12      	lsrs	r2, r2, #16
 80250f6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80250fa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80250fe:	b29b      	uxth	r3, r3
 8025100:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025104:	45c1      	cmp	r9, r8
 8025106:	f841 3b04 	str.w	r3, [r1], #4
 802510a:	ea4f 4022 	mov.w	r0, r2, asr #16
 802510e:	d2e6      	bcs.n	80250de <quorem+0xa4>
 8025110:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025114:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025118:	b922      	cbnz	r2, 8025124 <quorem+0xea>
 802511a:	3b04      	subs	r3, #4
 802511c:	429d      	cmp	r5, r3
 802511e:	461a      	mov	r2, r3
 8025120:	d30b      	bcc.n	802513a <quorem+0x100>
 8025122:	613c      	str	r4, [r7, #16]
 8025124:	3601      	adds	r6, #1
 8025126:	4630      	mov	r0, r6
 8025128:	b003      	add	sp, #12
 802512a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802512e:	6812      	ldr	r2, [r2, #0]
 8025130:	3b04      	subs	r3, #4
 8025132:	2a00      	cmp	r2, #0
 8025134:	d1cb      	bne.n	80250ce <quorem+0x94>
 8025136:	3c01      	subs	r4, #1
 8025138:	e7c6      	b.n	80250c8 <quorem+0x8e>
 802513a:	6812      	ldr	r2, [r2, #0]
 802513c:	3b04      	subs	r3, #4
 802513e:	2a00      	cmp	r2, #0
 8025140:	d1ef      	bne.n	8025122 <quorem+0xe8>
 8025142:	3c01      	subs	r4, #1
 8025144:	e7ea      	b.n	802511c <quorem+0xe2>
 8025146:	2000      	movs	r0, #0
 8025148:	e7ee      	b.n	8025128 <quorem+0xee>
 802514a:	0000      	movs	r0, r0
 802514c:	0000      	movs	r0, r0
	...

08025150 <_dtoa_r>:
 8025150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025154:	69c7      	ldr	r7, [r0, #28]
 8025156:	b099      	sub	sp, #100	@ 0x64
 8025158:	ed8d 0b02 	vstr	d0, [sp, #8]
 802515c:	ec55 4b10 	vmov	r4, r5, d0
 8025160:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8025162:	9109      	str	r1, [sp, #36]	@ 0x24
 8025164:	4683      	mov	fp, r0
 8025166:	920e      	str	r2, [sp, #56]	@ 0x38
 8025168:	9313      	str	r3, [sp, #76]	@ 0x4c
 802516a:	b97f      	cbnz	r7, 802518c <_dtoa_r+0x3c>
 802516c:	2010      	movs	r0, #16
 802516e:	f7fd fd15 	bl	8022b9c <malloc>
 8025172:	4602      	mov	r2, r0
 8025174:	f8cb 001c 	str.w	r0, [fp, #28]
 8025178:	b920      	cbnz	r0, 8025184 <_dtoa_r+0x34>
 802517a:	4ba7      	ldr	r3, [pc, #668]	@ (8025418 <_dtoa_r+0x2c8>)
 802517c:	21ef      	movs	r1, #239	@ 0xef
 802517e:	48a7      	ldr	r0, [pc, #668]	@ (802541c <_dtoa_r+0x2cc>)
 8025180:	f7fd fcd2 	bl	8022b28 <__assert_func>
 8025184:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8025188:	6007      	str	r7, [r0, #0]
 802518a:	60c7      	str	r7, [r0, #12]
 802518c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8025190:	6819      	ldr	r1, [r3, #0]
 8025192:	b159      	cbz	r1, 80251ac <_dtoa_r+0x5c>
 8025194:	685a      	ldr	r2, [r3, #4]
 8025196:	604a      	str	r2, [r1, #4]
 8025198:	2301      	movs	r3, #1
 802519a:	4093      	lsls	r3, r2
 802519c:	608b      	str	r3, [r1, #8]
 802519e:	4658      	mov	r0, fp
 80251a0:	f001 f9a4 	bl	80264ec <_Bfree>
 80251a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80251a8:	2200      	movs	r2, #0
 80251aa:	601a      	str	r2, [r3, #0]
 80251ac:	1e2b      	subs	r3, r5, #0
 80251ae:	bfb9      	ittee	lt
 80251b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80251b4:	9303      	strlt	r3, [sp, #12]
 80251b6:	2300      	movge	r3, #0
 80251b8:	6033      	strge	r3, [r6, #0]
 80251ba:	9f03      	ldr	r7, [sp, #12]
 80251bc:	4b98      	ldr	r3, [pc, #608]	@ (8025420 <_dtoa_r+0x2d0>)
 80251be:	bfbc      	itt	lt
 80251c0:	2201      	movlt	r2, #1
 80251c2:	6032      	strlt	r2, [r6, #0]
 80251c4:	43bb      	bics	r3, r7
 80251c6:	d112      	bne.n	80251ee <_dtoa_r+0x9e>
 80251c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80251ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80251ce:	6013      	str	r3, [r2, #0]
 80251d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80251d4:	4323      	orrs	r3, r4
 80251d6:	f000 854d 	beq.w	8025c74 <_dtoa_r+0xb24>
 80251da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80251dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8025434 <_dtoa_r+0x2e4>
 80251e0:	2b00      	cmp	r3, #0
 80251e2:	f000 854f 	beq.w	8025c84 <_dtoa_r+0xb34>
 80251e6:	f10a 0303 	add.w	r3, sl, #3
 80251ea:	f000 bd49 	b.w	8025c80 <_dtoa_r+0xb30>
 80251ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80251f2:	2200      	movs	r2, #0
 80251f4:	ec51 0b17 	vmov	r0, r1, d7
 80251f8:	2300      	movs	r3, #0
 80251fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80251fe:	f7e3 fbab 	bl	8008958 <__aeabi_dcmpeq>
 8025202:	4680      	mov	r8, r0
 8025204:	b158      	cbz	r0, 802521e <_dtoa_r+0xce>
 8025206:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025208:	2301      	movs	r3, #1
 802520a:	6013      	str	r3, [r2, #0]
 802520c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802520e:	b113      	cbz	r3, 8025216 <_dtoa_r+0xc6>
 8025210:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8025212:	4b84      	ldr	r3, [pc, #528]	@ (8025424 <_dtoa_r+0x2d4>)
 8025214:	6013      	str	r3, [r2, #0]
 8025216:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8025438 <_dtoa_r+0x2e8>
 802521a:	f000 bd33 	b.w	8025c84 <_dtoa_r+0xb34>
 802521e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8025222:	aa16      	add	r2, sp, #88	@ 0x58
 8025224:	a917      	add	r1, sp, #92	@ 0x5c
 8025226:	4658      	mov	r0, fp
 8025228:	f001 fd04 	bl	8026c34 <__d2b>
 802522c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8025230:	4681      	mov	r9, r0
 8025232:	2e00      	cmp	r6, #0
 8025234:	d077      	beq.n	8025326 <_dtoa_r+0x1d6>
 8025236:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025238:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802523c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8025244:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8025248:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802524c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8025250:	4619      	mov	r1, r3
 8025252:	2200      	movs	r2, #0
 8025254:	4b74      	ldr	r3, [pc, #464]	@ (8025428 <_dtoa_r+0x2d8>)
 8025256:	f7e2 ff5f 	bl	8008118 <__aeabi_dsub>
 802525a:	a369      	add	r3, pc, #420	@ (adr r3, 8025400 <_dtoa_r+0x2b0>)
 802525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025260:	f7e3 f912 	bl	8008488 <__aeabi_dmul>
 8025264:	a368      	add	r3, pc, #416	@ (adr r3, 8025408 <_dtoa_r+0x2b8>)
 8025266:	e9d3 2300 	ldrd	r2, r3, [r3]
 802526a:	f7e2 ff57 	bl	800811c <__adddf3>
 802526e:	4604      	mov	r4, r0
 8025270:	4630      	mov	r0, r6
 8025272:	460d      	mov	r5, r1
 8025274:	f7e3 f89e 	bl	80083b4 <__aeabi_i2d>
 8025278:	a365      	add	r3, pc, #404	@ (adr r3, 8025410 <_dtoa_r+0x2c0>)
 802527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802527e:	f7e3 f903 	bl	8008488 <__aeabi_dmul>
 8025282:	4602      	mov	r2, r0
 8025284:	460b      	mov	r3, r1
 8025286:	4620      	mov	r0, r4
 8025288:	4629      	mov	r1, r5
 802528a:	f7e2 ff47 	bl	800811c <__adddf3>
 802528e:	4604      	mov	r4, r0
 8025290:	460d      	mov	r5, r1
 8025292:	f7e3 fba9 	bl	80089e8 <__aeabi_d2iz>
 8025296:	2200      	movs	r2, #0
 8025298:	4607      	mov	r7, r0
 802529a:	2300      	movs	r3, #0
 802529c:	4620      	mov	r0, r4
 802529e:	4629      	mov	r1, r5
 80252a0:	f7e3 fb64 	bl	800896c <__aeabi_dcmplt>
 80252a4:	b140      	cbz	r0, 80252b8 <_dtoa_r+0x168>
 80252a6:	4638      	mov	r0, r7
 80252a8:	f7e3 f884 	bl	80083b4 <__aeabi_i2d>
 80252ac:	4622      	mov	r2, r4
 80252ae:	462b      	mov	r3, r5
 80252b0:	f7e3 fb52 	bl	8008958 <__aeabi_dcmpeq>
 80252b4:	b900      	cbnz	r0, 80252b8 <_dtoa_r+0x168>
 80252b6:	3f01      	subs	r7, #1
 80252b8:	2f16      	cmp	r7, #22
 80252ba:	d851      	bhi.n	8025360 <_dtoa_r+0x210>
 80252bc:	4b5b      	ldr	r3, [pc, #364]	@ (802542c <_dtoa_r+0x2dc>)
 80252be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80252c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80252ca:	f7e3 fb4f 	bl	800896c <__aeabi_dcmplt>
 80252ce:	2800      	cmp	r0, #0
 80252d0:	d048      	beq.n	8025364 <_dtoa_r+0x214>
 80252d2:	3f01      	subs	r7, #1
 80252d4:	2300      	movs	r3, #0
 80252d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80252d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80252da:	1b9b      	subs	r3, r3, r6
 80252dc:	1e5a      	subs	r2, r3, #1
 80252de:	bf44      	itt	mi
 80252e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80252e4:	2300      	movmi	r3, #0
 80252e6:	9208      	str	r2, [sp, #32]
 80252e8:	bf54      	ite	pl
 80252ea:	f04f 0800 	movpl.w	r8, #0
 80252ee:	9308      	strmi	r3, [sp, #32]
 80252f0:	2f00      	cmp	r7, #0
 80252f2:	db39      	blt.n	8025368 <_dtoa_r+0x218>
 80252f4:	9b08      	ldr	r3, [sp, #32]
 80252f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80252f8:	443b      	add	r3, r7
 80252fa:	9308      	str	r3, [sp, #32]
 80252fc:	2300      	movs	r3, #0
 80252fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8025300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025302:	2b09      	cmp	r3, #9
 8025304:	d864      	bhi.n	80253d0 <_dtoa_r+0x280>
 8025306:	2b05      	cmp	r3, #5
 8025308:	bfc4      	itt	gt
 802530a:	3b04      	subgt	r3, #4
 802530c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802530e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025310:	f1a3 0302 	sub.w	r3, r3, #2
 8025314:	bfcc      	ite	gt
 8025316:	2400      	movgt	r4, #0
 8025318:	2401      	movle	r4, #1
 802531a:	2b03      	cmp	r3, #3
 802531c:	d863      	bhi.n	80253e6 <_dtoa_r+0x296>
 802531e:	e8df f003 	tbb	[pc, r3]
 8025322:	372a      	.short	0x372a
 8025324:	5535      	.short	0x5535
 8025326:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 802532a:	441e      	add	r6, r3
 802532c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8025330:	2b20      	cmp	r3, #32
 8025332:	bfc1      	itttt	gt
 8025334:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8025338:	409f      	lslgt	r7, r3
 802533a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802533e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8025342:	bfd6      	itet	le
 8025344:	f1c3 0320 	rsble	r3, r3, #32
 8025348:	ea47 0003 	orrgt.w	r0, r7, r3
 802534c:	fa04 f003 	lslle.w	r0, r4, r3
 8025350:	f7e3 f820 	bl	8008394 <__aeabi_ui2d>
 8025354:	2201      	movs	r2, #1
 8025356:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802535a:	3e01      	subs	r6, #1
 802535c:	9214      	str	r2, [sp, #80]	@ 0x50
 802535e:	e777      	b.n	8025250 <_dtoa_r+0x100>
 8025360:	2301      	movs	r3, #1
 8025362:	e7b8      	b.n	80252d6 <_dtoa_r+0x186>
 8025364:	9012      	str	r0, [sp, #72]	@ 0x48
 8025366:	e7b7      	b.n	80252d8 <_dtoa_r+0x188>
 8025368:	427b      	negs	r3, r7
 802536a:	930a      	str	r3, [sp, #40]	@ 0x28
 802536c:	2300      	movs	r3, #0
 802536e:	eba8 0807 	sub.w	r8, r8, r7
 8025372:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025374:	e7c4      	b.n	8025300 <_dtoa_r+0x1b0>
 8025376:	2300      	movs	r3, #0
 8025378:	930b      	str	r3, [sp, #44]	@ 0x2c
 802537a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802537c:	2b00      	cmp	r3, #0
 802537e:	dc35      	bgt.n	80253ec <_dtoa_r+0x29c>
 8025380:	2301      	movs	r3, #1
 8025382:	9300      	str	r3, [sp, #0]
 8025384:	9307      	str	r3, [sp, #28]
 8025386:	461a      	mov	r2, r3
 8025388:	920e      	str	r2, [sp, #56]	@ 0x38
 802538a:	e00b      	b.n	80253a4 <_dtoa_r+0x254>
 802538c:	2301      	movs	r3, #1
 802538e:	e7f3      	b.n	8025378 <_dtoa_r+0x228>
 8025390:	2300      	movs	r3, #0
 8025392:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025394:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025396:	18fb      	adds	r3, r7, r3
 8025398:	9300      	str	r3, [sp, #0]
 802539a:	3301      	adds	r3, #1
 802539c:	2b01      	cmp	r3, #1
 802539e:	9307      	str	r3, [sp, #28]
 80253a0:	bfb8      	it	lt
 80253a2:	2301      	movlt	r3, #1
 80253a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80253a8:	2100      	movs	r1, #0
 80253aa:	2204      	movs	r2, #4
 80253ac:	f102 0514 	add.w	r5, r2, #20
 80253b0:	429d      	cmp	r5, r3
 80253b2:	d91f      	bls.n	80253f4 <_dtoa_r+0x2a4>
 80253b4:	6041      	str	r1, [r0, #4]
 80253b6:	4658      	mov	r0, fp
 80253b8:	f001 f858 	bl	802646c <_Balloc>
 80253bc:	4682      	mov	sl, r0
 80253be:	2800      	cmp	r0, #0
 80253c0:	d13c      	bne.n	802543c <_dtoa_r+0x2ec>
 80253c2:	4b1b      	ldr	r3, [pc, #108]	@ (8025430 <_dtoa_r+0x2e0>)
 80253c4:	4602      	mov	r2, r0
 80253c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80253ca:	e6d8      	b.n	802517e <_dtoa_r+0x2e>
 80253cc:	2301      	movs	r3, #1
 80253ce:	e7e0      	b.n	8025392 <_dtoa_r+0x242>
 80253d0:	2401      	movs	r4, #1
 80253d2:	2300      	movs	r3, #0
 80253d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80253d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80253d8:	f04f 33ff 	mov.w	r3, #4294967295
 80253dc:	9300      	str	r3, [sp, #0]
 80253de:	9307      	str	r3, [sp, #28]
 80253e0:	2200      	movs	r2, #0
 80253e2:	2312      	movs	r3, #18
 80253e4:	e7d0      	b.n	8025388 <_dtoa_r+0x238>
 80253e6:	2301      	movs	r3, #1
 80253e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80253ea:	e7f5      	b.n	80253d8 <_dtoa_r+0x288>
 80253ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80253ee:	9300      	str	r3, [sp, #0]
 80253f0:	9307      	str	r3, [sp, #28]
 80253f2:	e7d7      	b.n	80253a4 <_dtoa_r+0x254>
 80253f4:	3101      	adds	r1, #1
 80253f6:	0052      	lsls	r2, r2, #1
 80253f8:	e7d8      	b.n	80253ac <_dtoa_r+0x25c>
 80253fa:	bf00      	nop
 80253fc:	f3af 8000 	nop.w
 8025400:	636f4361 	.word	0x636f4361
 8025404:	3fd287a7 	.word	0x3fd287a7
 8025408:	8b60c8b3 	.word	0x8b60c8b3
 802540c:	3fc68a28 	.word	0x3fc68a28
 8025410:	509f79fb 	.word	0x509f79fb
 8025414:	3fd34413 	.word	0x3fd34413
 8025418:	080317fa 	.word	0x080317fa
 802541c:	08031880 	.word	0x08031880
 8025420:	7ff00000 	.word	0x7ff00000
 8025424:	080317d2 	.word	0x080317d2
 8025428:	3ff80000 	.word	0x3ff80000
 802542c:	080319d8 	.word	0x080319d8
 8025430:	080318d8 	.word	0x080318d8
 8025434:	0803187c 	.word	0x0803187c
 8025438:	080317d1 	.word	0x080317d1
 802543c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8025440:	6018      	str	r0, [r3, #0]
 8025442:	9b07      	ldr	r3, [sp, #28]
 8025444:	2b0e      	cmp	r3, #14
 8025446:	f200 80a4 	bhi.w	8025592 <_dtoa_r+0x442>
 802544a:	2c00      	cmp	r4, #0
 802544c:	f000 80a1 	beq.w	8025592 <_dtoa_r+0x442>
 8025450:	2f00      	cmp	r7, #0
 8025452:	dd33      	ble.n	80254bc <_dtoa_r+0x36c>
 8025454:	4bad      	ldr	r3, [pc, #692]	@ (802570c <_dtoa_r+0x5bc>)
 8025456:	f007 020f 	and.w	r2, r7, #15
 802545a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802545e:	ed93 7b00 	vldr	d7, [r3]
 8025462:	05f8      	lsls	r0, r7, #23
 8025464:	ed8d 7b04 	vstr	d7, [sp, #16]
 8025468:	ea4f 1427 	mov.w	r4, r7, asr #4
 802546c:	d516      	bpl.n	802549c <_dtoa_r+0x34c>
 802546e:	4ba8      	ldr	r3, [pc, #672]	@ (8025710 <_dtoa_r+0x5c0>)
 8025470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8025474:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8025478:	f7e3 f930 	bl	80086dc <__aeabi_ddiv>
 802547c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025480:	f004 040f 	and.w	r4, r4, #15
 8025484:	2603      	movs	r6, #3
 8025486:	4da2      	ldr	r5, [pc, #648]	@ (8025710 <_dtoa_r+0x5c0>)
 8025488:	b954      	cbnz	r4, 80254a0 <_dtoa_r+0x350>
 802548a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802548e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025492:	f7e3 f923 	bl	80086dc <__aeabi_ddiv>
 8025496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802549a:	e028      	b.n	80254ee <_dtoa_r+0x39e>
 802549c:	2602      	movs	r6, #2
 802549e:	e7f2      	b.n	8025486 <_dtoa_r+0x336>
 80254a0:	07e1      	lsls	r1, r4, #31
 80254a2:	d508      	bpl.n	80254b6 <_dtoa_r+0x366>
 80254a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80254a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80254ac:	f7e2 ffec 	bl	8008488 <__aeabi_dmul>
 80254b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80254b4:	3601      	adds	r6, #1
 80254b6:	1064      	asrs	r4, r4, #1
 80254b8:	3508      	adds	r5, #8
 80254ba:	e7e5      	b.n	8025488 <_dtoa_r+0x338>
 80254bc:	f000 80d2 	beq.w	8025664 <_dtoa_r+0x514>
 80254c0:	427c      	negs	r4, r7
 80254c2:	4b92      	ldr	r3, [pc, #584]	@ (802570c <_dtoa_r+0x5bc>)
 80254c4:	4d92      	ldr	r5, [pc, #584]	@ (8025710 <_dtoa_r+0x5c0>)
 80254c6:	f004 020f 	and.w	r2, r4, #15
 80254ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80254ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80254d6:	f7e2 ffd7 	bl	8008488 <__aeabi_dmul>
 80254da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80254de:	1124      	asrs	r4, r4, #4
 80254e0:	2300      	movs	r3, #0
 80254e2:	2602      	movs	r6, #2
 80254e4:	2c00      	cmp	r4, #0
 80254e6:	f040 80b2 	bne.w	802564e <_dtoa_r+0x4fe>
 80254ea:	2b00      	cmp	r3, #0
 80254ec:	d1d3      	bne.n	8025496 <_dtoa_r+0x346>
 80254ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80254f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80254f4:	2b00      	cmp	r3, #0
 80254f6:	f000 80b7 	beq.w	8025668 <_dtoa_r+0x518>
 80254fa:	4b86      	ldr	r3, [pc, #536]	@ (8025714 <_dtoa_r+0x5c4>)
 80254fc:	2200      	movs	r2, #0
 80254fe:	4620      	mov	r0, r4
 8025500:	4629      	mov	r1, r5
 8025502:	f7e3 fa33 	bl	800896c <__aeabi_dcmplt>
 8025506:	2800      	cmp	r0, #0
 8025508:	f000 80ae 	beq.w	8025668 <_dtoa_r+0x518>
 802550c:	9b07      	ldr	r3, [sp, #28]
 802550e:	2b00      	cmp	r3, #0
 8025510:	f000 80aa 	beq.w	8025668 <_dtoa_r+0x518>
 8025514:	9b00      	ldr	r3, [sp, #0]
 8025516:	2b00      	cmp	r3, #0
 8025518:	dd37      	ble.n	802558a <_dtoa_r+0x43a>
 802551a:	1e7b      	subs	r3, r7, #1
 802551c:	9304      	str	r3, [sp, #16]
 802551e:	4620      	mov	r0, r4
 8025520:	4b7d      	ldr	r3, [pc, #500]	@ (8025718 <_dtoa_r+0x5c8>)
 8025522:	2200      	movs	r2, #0
 8025524:	4629      	mov	r1, r5
 8025526:	f7e2 ffaf 	bl	8008488 <__aeabi_dmul>
 802552a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802552e:	9c00      	ldr	r4, [sp, #0]
 8025530:	3601      	adds	r6, #1
 8025532:	4630      	mov	r0, r6
 8025534:	f7e2 ff3e 	bl	80083b4 <__aeabi_i2d>
 8025538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802553c:	f7e2 ffa4 	bl	8008488 <__aeabi_dmul>
 8025540:	4b76      	ldr	r3, [pc, #472]	@ (802571c <_dtoa_r+0x5cc>)
 8025542:	2200      	movs	r2, #0
 8025544:	f7e2 fdea 	bl	800811c <__adddf3>
 8025548:	4605      	mov	r5, r0
 802554a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 802554e:	2c00      	cmp	r4, #0
 8025550:	f040 808d 	bne.w	802566e <_dtoa_r+0x51e>
 8025554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025558:	4b71      	ldr	r3, [pc, #452]	@ (8025720 <_dtoa_r+0x5d0>)
 802555a:	2200      	movs	r2, #0
 802555c:	f7e2 fddc 	bl	8008118 <__aeabi_dsub>
 8025560:	4602      	mov	r2, r0
 8025562:	460b      	mov	r3, r1
 8025564:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8025568:	462a      	mov	r2, r5
 802556a:	4633      	mov	r3, r6
 802556c:	f7e3 fa1c 	bl	80089a8 <__aeabi_dcmpgt>
 8025570:	2800      	cmp	r0, #0
 8025572:	f040 828b 	bne.w	8025a8c <_dtoa_r+0x93c>
 8025576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802557a:	462a      	mov	r2, r5
 802557c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8025580:	f7e3 f9f4 	bl	800896c <__aeabi_dcmplt>
 8025584:	2800      	cmp	r0, #0
 8025586:	f040 8128 	bne.w	80257da <_dtoa_r+0x68a>
 802558a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 802558e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8025592:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025594:	2b00      	cmp	r3, #0
 8025596:	f2c0 815a 	blt.w	802584e <_dtoa_r+0x6fe>
 802559a:	2f0e      	cmp	r7, #14
 802559c:	f300 8157 	bgt.w	802584e <_dtoa_r+0x6fe>
 80255a0:	4b5a      	ldr	r3, [pc, #360]	@ (802570c <_dtoa_r+0x5bc>)
 80255a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80255a6:	ed93 7b00 	vldr	d7, [r3]
 80255aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80255ac:	2b00      	cmp	r3, #0
 80255ae:	ed8d 7b00 	vstr	d7, [sp]
 80255b2:	da03      	bge.n	80255bc <_dtoa_r+0x46c>
 80255b4:	9b07      	ldr	r3, [sp, #28]
 80255b6:	2b00      	cmp	r3, #0
 80255b8:	f340 8101 	ble.w	80257be <_dtoa_r+0x66e>
 80255bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80255c0:	4656      	mov	r6, sl
 80255c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80255c6:	4620      	mov	r0, r4
 80255c8:	4629      	mov	r1, r5
 80255ca:	f7e3 f887 	bl	80086dc <__aeabi_ddiv>
 80255ce:	f7e3 fa0b 	bl	80089e8 <__aeabi_d2iz>
 80255d2:	4680      	mov	r8, r0
 80255d4:	f7e2 feee 	bl	80083b4 <__aeabi_i2d>
 80255d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80255dc:	f7e2 ff54 	bl	8008488 <__aeabi_dmul>
 80255e0:	4602      	mov	r2, r0
 80255e2:	460b      	mov	r3, r1
 80255e4:	4620      	mov	r0, r4
 80255e6:	4629      	mov	r1, r5
 80255e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80255ec:	f7e2 fd94 	bl	8008118 <__aeabi_dsub>
 80255f0:	f806 4b01 	strb.w	r4, [r6], #1
 80255f4:	9d07      	ldr	r5, [sp, #28]
 80255f6:	eba6 040a 	sub.w	r4, r6, sl
 80255fa:	42a5      	cmp	r5, r4
 80255fc:	4602      	mov	r2, r0
 80255fe:	460b      	mov	r3, r1
 8025600:	f040 8117 	bne.w	8025832 <_dtoa_r+0x6e2>
 8025604:	f7e2 fd8a 	bl	800811c <__adddf3>
 8025608:	e9dd 2300 	ldrd	r2, r3, [sp]
 802560c:	4604      	mov	r4, r0
 802560e:	460d      	mov	r5, r1
 8025610:	f7e3 f9ca 	bl	80089a8 <__aeabi_dcmpgt>
 8025614:	2800      	cmp	r0, #0
 8025616:	f040 80f9 	bne.w	802580c <_dtoa_r+0x6bc>
 802561a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802561e:	4620      	mov	r0, r4
 8025620:	4629      	mov	r1, r5
 8025622:	f7e3 f999 	bl	8008958 <__aeabi_dcmpeq>
 8025626:	b118      	cbz	r0, 8025630 <_dtoa_r+0x4e0>
 8025628:	f018 0f01 	tst.w	r8, #1
 802562c:	f040 80ee 	bne.w	802580c <_dtoa_r+0x6bc>
 8025630:	4649      	mov	r1, r9
 8025632:	4658      	mov	r0, fp
 8025634:	f000 ff5a 	bl	80264ec <_Bfree>
 8025638:	2300      	movs	r3, #0
 802563a:	7033      	strb	r3, [r6, #0]
 802563c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802563e:	3701      	adds	r7, #1
 8025640:	601f      	str	r7, [r3, #0]
 8025642:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025644:	2b00      	cmp	r3, #0
 8025646:	f000 831d 	beq.w	8025c84 <_dtoa_r+0xb34>
 802564a:	601e      	str	r6, [r3, #0]
 802564c:	e31a      	b.n	8025c84 <_dtoa_r+0xb34>
 802564e:	07e2      	lsls	r2, r4, #31
 8025650:	d505      	bpl.n	802565e <_dtoa_r+0x50e>
 8025652:	e9d5 2300 	ldrd	r2, r3, [r5]
 8025656:	f7e2 ff17 	bl	8008488 <__aeabi_dmul>
 802565a:	3601      	adds	r6, #1
 802565c:	2301      	movs	r3, #1
 802565e:	1064      	asrs	r4, r4, #1
 8025660:	3508      	adds	r5, #8
 8025662:	e73f      	b.n	80254e4 <_dtoa_r+0x394>
 8025664:	2602      	movs	r6, #2
 8025666:	e742      	b.n	80254ee <_dtoa_r+0x39e>
 8025668:	9c07      	ldr	r4, [sp, #28]
 802566a:	9704      	str	r7, [sp, #16]
 802566c:	e761      	b.n	8025532 <_dtoa_r+0x3e2>
 802566e:	4b27      	ldr	r3, [pc, #156]	@ (802570c <_dtoa_r+0x5bc>)
 8025670:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025672:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8025676:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802567a:	4454      	add	r4, sl
 802567c:	2900      	cmp	r1, #0
 802567e:	d053      	beq.n	8025728 <_dtoa_r+0x5d8>
 8025680:	4928      	ldr	r1, [pc, #160]	@ (8025724 <_dtoa_r+0x5d4>)
 8025682:	2000      	movs	r0, #0
 8025684:	f7e3 f82a 	bl	80086dc <__aeabi_ddiv>
 8025688:	4633      	mov	r3, r6
 802568a:	462a      	mov	r2, r5
 802568c:	f7e2 fd44 	bl	8008118 <__aeabi_dsub>
 8025690:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8025694:	4656      	mov	r6, sl
 8025696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802569a:	f7e3 f9a5 	bl	80089e8 <__aeabi_d2iz>
 802569e:	4605      	mov	r5, r0
 80256a0:	f7e2 fe88 	bl	80083b4 <__aeabi_i2d>
 80256a4:	4602      	mov	r2, r0
 80256a6:	460b      	mov	r3, r1
 80256a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80256ac:	f7e2 fd34 	bl	8008118 <__aeabi_dsub>
 80256b0:	3530      	adds	r5, #48	@ 0x30
 80256b2:	4602      	mov	r2, r0
 80256b4:	460b      	mov	r3, r1
 80256b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80256ba:	f806 5b01 	strb.w	r5, [r6], #1
 80256be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80256c2:	f7e3 f953 	bl	800896c <__aeabi_dcmplt>
 80256c6:	2800      	cmp	r0, #0
 80256c8:	d171      	bne.n	80257ae <_dtoa_r+0x65e>
 80256ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80256ce:	4911      	ldr	r1, [pc, #68]	@ (8025714 <_dtoa_r+0x5c4>)
 80256d0:	2000      	movs	r0, #0
 80256d2:	f7e2 fd21 	bl	8008118 <__aeabi_dsub>
 80256d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80256da:	f7e3 f947 	bl	800896c <__aeabi_dcmplt>
 80256de:	2800      	cmp	r0, #0
 80256e0:	f040 8095 	bne.w	802580e <_dtoa_r+0x6be>
 80256e4:	42a6      	cmp	r6, r4
 80256e6:	f43f af50 	beq.w	802558a <_dtoa_r+0x43a>
 80256ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80256ee:	4b0a      	ldr	r3, [pc, #40]	@ (8025718 <_dtoa_r+0x5c8>)
 80256f0:	2200      	movs	r2, #0
 80256f2:	f7e2 fec9 	bl	8008488 <__aeabi_dmul>
 80256f6:	4b08      	ldr	r3, [pc, #32]	@ (8025718 <_dtoa_r+0x5c8>)
 80256f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80256fc:	2200      	movs	r2, #0
 80256fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025702:	f7e2 fec1 	bl	8008488 <__aeabi_dmul>
 8025706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802570a:	e7c4      	b.n	8025696 <_dtoa_r+0x546>
 802570c:	080319d8 	.word	0x080319d8
 8025710:	080319b0 	.word	0x080319b0
 8025714:	3ff00000 	.word	0x3ff00000
 8025718:	40240000 	.word	0x40240000
 802571c:	401c0000 	.word	0x401c0000
 8025720:	40140000 	.word	0x40140000
 8025724:	3fe00000 	.word	0x3fe00000
 8025728:	4631      	mov	r1, r6
 802572a:	4628      	mov	r0, r5
 802572c:	f7e2 feac 	bl	8008488 <__aeabi_dmul>
 8025730:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8025734:	9415      	str	r4, [sp, #84]	@ 0x54
 8025736:	4656      	mov	r6, sl
 8025738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802573c:	f7e3 f954 	bl	80089e8 <__aeabi_d2iz>
 8025740:	4605      	mov	r5, r0
 8025742:	f7e2 fe37 	bl	80083b4 <__aeabi_i2d>
 8025746:	4602      	mov	r2, r0
 8025748:	460b      	mov	r3, r1
 802574a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802574e:	f7e2 fce3 	bl	8008118 <__aeabi_dsub>
 8025752:	3530      	adds	r5, #48	@ 0x30
 8025754:	f806 5b01 	strb.w	r5, [r6], #1
 8025758:	4602      	mov	r2, r0
 802575a:	460b      	mov	r3, r1
 802575c:	42a6      	cmp	r6, r4
 802575e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8025762:	f04f 0200 	mov.w	r2, #0
 8025766:	d124      	bne.n	80257b2 <_dtoa_r+0x662>
 8025768:	4bac      	ldr	r3, [pc, #688]	@ (8025a1c <_dtoa_r+0x8cc>)
 802576a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802576e:	f7e2 fcd5 	bl	800811c <__adddf3>
 8025772:	4602      	mov	r2, r0
 8025774:	460b      	mov	r3, r1
 8025776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802577a:	f7e3 f915 	bl	80089a8 <__aeabi_dcmpgt>
 802577e:	2800      	cmp	r0, #0
 8025780:	d145      	bne.n	802580e <_dtoa_r+0x6be>
 8025782:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8025786:	49a5      	ldr	r1, [pc, #660]	@ (8025a1c <_dtoa_r+0x8cc>)
 8025788:	2000      	movs	r0, #0
 802578a:	f7e2 fcc5 	bl	8008118 <__aeabi_dsub>
 802578e:	4602      	mov	r2, r0
 8025790:	460b      	mov	r3, r1
 8025792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025796:	f7e3 f8e9 	bl	800896c <__aeabi_dcmplt>
 802579a:	2800      	cmp	r0, #0
 802579c:	f43f aef5 	beq.w	802558a <_dtoa_r+0x43a>
 80257a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80257a2:	1e73      	subs	r3, r6, #1
 80257a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80257a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80257aa:	2b30      	cmp	r3, #48	@ 0x30
 80257ac:	d0f8      	beq.n	80257a0 <_dtoa_r+0x650>
 80257ae:	9f04      	ldr	r7, [sp, #16]
 80257b0:	e73e      	b.n	8025630 <_dtoa_r+0x4e0>
 80257b2:	4b9b      	ldr	r3, [pc, #620]	@ (8025a20 <_dtoa_r+0x8d0>)
 80257b4:	f7e2 fe68 	bl	8008488 <__aeabi_dmul>
 80257b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80257bc:	e7bc      	b.n	8025738 <_dtoa_r+0x5e8>
 80257be:	d10c      	bne.n	80257da <_dtoa_r+0x68a>
 80257c0:	4b98      	ldr	r3, [pc, #608]	@ (8025a24 <_dtoa_r+0x8d4>)
 80257c2:	2200      	movs	r2, #0
 80257c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80257c8:	f7e2 fe5e 	bl	8008488 <__aeabi_dmul>
 80257cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80257d0:	f7e3 f8e0 	bl	8008994 <__aeabi_dcmpge>
 80257d4:	2800      	cmp	r0, #0
 80257d6:	f000 8157 	beq.w	8025a88 <_dtoa_r+0x938>
 80257da:	2400      	movs	r4, #0
 80257dc:	4625      	mov	r5, r4
 80257de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80257e0:	43db      	mvns	r3, r3
 80257e2:	9304      	str	r3, [sp, #16]
 80257e4:	4656      	mov	r6, sl
 80257e6:	2700      	movs	r7, #0
 80257e8:	4621      	mov	r1, r4
 80257ea:	4658      	mov	r0, fp
 80257ec:	f000 fe7e 	bl	80264ec <_Bfree>
 80257f0:	2d00      	cmp	r5, #0
 80257f2:	d0dc      	beq.n	80257ae <_dtoa_r+0x65e>
 80257f4:	b12f      	cbz	r7, 8025802 <_dtoa_r+0x6b2>
 80257f6:	42af      	cmp	r7, r5
 80257f8:	d003      	beq.n	8025802 <_dtoa_r+0x6b2>
 80257fa:	4639      	mov	r1, r7
 80257fc:	4658      	mov	r0, fp
 80257fe:	f000 fe75 	bl	80264ec <_Bfree>
 8025802:	4629      	mov	r1, r5
 8025804:	4658      	mov	r0, fp
 8025806:	f000 fe71 	bl	80264ec <_Bfree>
 802580a:	e7d0      	b.n	80257ae <_dtoa_r+0x65e>
 802580c:	9704      	str	r7, [sp, #16]
 802580e:	4633      	mov	r3, r6
 8025810:	461e      	mov	r6, r3
 8025812:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025816:	2a39      	cmp	r2, #57	@ 0x39
 8025818:	d107      	bne.n	802582a <_dtoa_r+0x6da>
 802581a:	459a      	cmp	sl, r3
 802581c:	d1f8      	bne.n	8025810 <_dtoa_r+0x6c0>
 802581e:	9a04      	ldr	r2, [sp, #16]
 8025820:	3201      	adds	r2, #1
 8025822:	9204      	str	r2, [sp, #16]
 8025824:	2230      	movs	r2, #48	@ 0x30
 8025826:	f88a 2000 	strb.w	r2, [sl]
 802582a:	781a      	ldrb	r2, [r3, #0]
 802582c:	3201      	adds	r2, #1
 802582e:	701a      	strb	r2, [r3, #0]
 8025830:	e7bd      	b.n	80257ae <_dtoa_r+0x65e>
 8025832:	4b7b      	ldr	r3, [pc, #492]	@ (8025a20 <_dtoa_r+0x8d0>)
 8025834:	2200      	movs	r2, #0
 8025836:	f7e2 fe27 	bl	8008488 <__aeabi_dmul>
 802583a:	2200      	movs	r2, #0
 802583c:	2300      	movs	r3, #0
 802583e:	4604      	mov	r4, r0
 8025840:	460d      	mov	r5, r1
 8025842:	f7e3 f889 	bl	8008958 <__aeabi_dcmpeq>
 8025846:	2800      	cmp	r0, #0
 8025848:	f43f aebb 	beq.w	80255c2 <_dtoa_r+0x472>
 802584c:	e6f0      	b.n	8025630 <_dtoa_r+0x4e0>
 802584e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025850:	2a00      	cmp	r2, #0
 8025852:	f000 80db 	beq.w	8025a0c <_dtoa_r+0x8bc>
 8025856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025858:	2a01      	cmp	r2, #1
 802585a:	f300 80bf 	bgt.w	80259dc <_dtoa_r+0x88c>
 802585e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025860:	2a00      	cmp	r2, #0
 8025862:	f000 80b7 	beq.w	80259d4 <_dtoa_r+0x884>
 8025866:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802586a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802586c:	4646      	mov	r6, r8
 802586e:	9a08      	ldr	r2, [sp, #32]
 8025870:	2101      	movs	r1, #1
 8025872:	441a      	add	r2, r3
 8025874:	4658      	mov	r0, fp
 8025876:	4498      	add	r8, r3
 8025878:	9208      	str	r2, [sp, #32]
 802587a:	f000 ff35 	bl	80266e8 <__i2b>
 802587e:	4605      	mov	r5, r0
 8025880:	b15e      	cbz	r6, 802589a <_dtoa_r+0x74a>
 8025882:	9b08      	ldr	r3, [sp, #32]
 8025884:	2b00      	cmp	r3, #0
 8025886:	dd08      	ble.n	802589a <_dtoa_r+0x74a>
 8025888:	42b3      	cmp	r3, r6
 802588a:	9a08      	ldr	r2, [sp, #32]
 802588c:	bfa8      	it	ge
 802588e:	4633      	movge	r3, r6
 8025890:	eba8 0803 	sub.w	r8, r8, r3
 8025894:	1af6      	subs	r6, r6, r3
 8025896:	1ad3      	subs	r3, r2, r3
 8025898:	9308      	str	r3, [sp, #32]
 802589a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802589c:	b1f3      	cbz	r3, 80258dc <_dtoa_r+0x78c>
 802589e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80258a0:	2b00      	cmp	r3, #0
 80258a2:	f000 80b7 	beq.w	8025a14 <_dtoa_r+0x8c4>
 80258a6:	b18c      	cbz	r4, 80258cc <_dtoa_r+0x77c>
 80258a8:	4629      	mov	r1, r5
 80258aa:	4622      	mov	r2, r4
 80258ac:	4658      	mov	r0, fp
 80258ae:	f000 ffdb 	bl	8026868 <__pow5mult>
 80258b2:	464a      	mov	r2, r9
 80258b4:	4601      	mov	r1, r0
 80258b6:	4605      	mov	r5, r0
 80258b8:	4658      	mov	r0, fp
 80258ba:	f000 ff2b 	bl	8026714 <__multiply>
 80258be:	4649      	mov	r1, r9
 80258c0:	9004      	str	r0, [sp, #16]
 80258c2:	4658      	mov	r0, fp
 80258c4:	f000 fe12 	bl	80264ec <_Bfree>
 80258c8:	9b04      	ldr	r3, [sp, #16]
 80258ca:	4699      	mov	r9, r3
 80258cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80258ce:	1b1a      	subs	r2, r3, r4
 80258d0:	d004      	beq.n	80258dc <_dtoa_r+0x78c>
 80258d2:	4649      	mov	r1, r9
 80258d4:	4658      	mov	r0, fp
 80258d6:	f000 ffc7 	bl	8026868 <__pow5mult>
 80258da:	4681      	mov	r9, r0
 80258dc:	2101      	movs	r1, #1
 80258de:	4658      	mov	r0, fp
 80258e0:	f000 ff02 	bl	80266e8 <__i2b>
 80258e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80258e6:	4604      	mov	r4, r0
 80258e8:	2b00      	cmp	r3, #0
 80258ea:	f000 81cf 	beq.w	8025c8c <_dtoa_r+0xb3c>
 80258ee:	461a      	mov	r2, r3
 80258f0:	4601      	mov	r1, r0
 80258f2:	4658      	mov	r0, fp
 80258f4:	f000 ffb8 	bl	8026868 <__pow5mult>
 80258f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80258fa:	2b01      	cmp	r3, #1
 80258fc:	4604      	mov	r4, r0
 80258fe:	f300 8095 	bgt.w	8025a2c <_dtoa_r+0x8dc>
 8025902:	9b02      	ldr	r3, [sp, #8]
 8025904:	2b00      	cmp	r3, #0
 8025906:	f040 8087 	bne.w	8025a18 <_dtoa_r+0x8c8>
 802590a:	9b03      	ldr	r3, [sp, #12]
 802590c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025910:	2b00      	cmp	r3, #0
 8025912:	f040 8089 	bne.w	8025a28 <_dtoa_r+0x8d8>
 8025916:	9b03      	ldr	r3, [sp, #12]
 8025918:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802591c:	0d1b      	lsrs	r3, r3, #20
 802591e:	051b      	lsls	r3, r3, #20
 8025920:	b12b      	cbz	r3, 802592e <_dtoa_r+0x7de>
 8025922:	9b08      	ldr	r3, [sp, #32]
 8025924:	3301      	adds	r3, #1
 8025926:	9308      	str	r3, [sp, #32]
 8025928:	f108 0801 	add.w	r8, r8, #1
 802592c:	2301      	movs	r3, #1
 802592e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025932:	2b00      	cmp	r3, #0
 8025934:	f000 81b0 	beq.w	8025c98 <_dtoa_r+0xb48>
 8025938:	6923      	ldr	r3, [r4, #16]
 802593a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802593e:	6918      	ldr	r0, [r3, #16]
 8025940:	f000 fe86 	bl	8026650 <__hi0bits>
 8025944:	f1c0 0020 	rsb	r0, r0, #32
 8025948:	9b08      	ldr	r3, [sp, #32]
 802594a:	4418      	add	r0, r3
 802594c:	f010 001f 	ands.w	r0, r0, #31
 8025950:	d077      	beq.n	8025a42 <_dtoa_r+0x8f2>
 8025952:	f1c0 0320 	rsb	r3, r0, #32
 8025956:	2b04      	cmp	r3, #4
 8025958:	dd6b      	ble.n	8025a32 <_dtoa_r+0x8e2>
 802595a:	9b08      	ldr	r3, [sp, #32]
 802595c:	f1c0 001c 	rsb	r0, r0, #28
 8025960:	4403      	add	r3, r0
 8025962:	4480      	add	r8, r0
 8025964:	4406      	add	r6, r0
 8025966:	9308      	str	r3, [sp, #32]
 8025968:	f1b8 0f00 	cmp.w	r8, #0
 802596c:	dd05      	ble.n	802597a <_dtoa_r+0x82a>
 802596e:	4649      	mov	r1, r9
 8025970:	4642      	mov	r2, r8
 8025972:	4658      	mov	r0, fp
 8025974:	f000 ffd2 	bl	802691c <__lshift>
 8025978:	4681      	mov	r9, r0
 802597a:	9b08      	ldr	r3, [sp, #32]
 802597c:	2b00      	cmp	r3, #0
 802597e:	dd05      	ble.n	802598c <_dtoa_r+0x83c>
 8025980:	4621      	mov	r1, r4
 8025982:	461a      	mov	r2, r3
 8025984:	4658      	mov	r0, fp
 8025986:	f000 ffc9 	bl	802691c <__lshift>
 802598a:	4604      	mov	r4, r0
 802598c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802598e:	2b00      	cmp	r3, #0
 8025990:	d059      	beq.n	8025a46 <_dtoa_r+0x8f6>
 8025992:	4621      	mov	r1, r4
 8025994:	4648      	mov	r0, r9
 8025996:	f001 f82d 	bl	80269f4 <__mcmp>
 802599a:	2800      	cmp	r0, #0
 802599c:	da53      	bge.n	8025a46 <_dtoa_r+0x8f6>
 802599e:	1e7b      	subs	r3, r7, #1
 80259a0:	9304      	str	r3, [sp, #16]
 80259a2:	4649      	mov	r1, r9
 80259a4:	2300      	movs	r3, #0
 80259a6:	220a      	movs	r2, #10
 80259a8:	4658      	mov	r0, fp
 80259aa:	f000 fdc1 	bl	8026530 <__multadd>
 80259ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80259b0:	4681      	mov	r9, r0
 80259b2:	2b00      	cmp	r3, #0
 80259b4:	f000 8172 	beq.w	8025c9c <_dtoa_r+0xb4c>
 80259b8:	2300      	movs	r3, #0
 80259ba:	4629      	mov	r1, r5
 80259bc:	220a      	movs	r2, #10
 80259be:	4658      	mov	r0, fp
 80259c0:	f000 fdb6 	bl	8026530 <__multadd>
 80259c4:	9b00      	ldr	r3, [sp, #0]
 80259c6:	2b00      	cmp	r3, #0
 80259c8:	4605      	mov	r5, r0
 80259ca:	dc67      	bgt.n	8025a9c <_dtoa_r+0x94c>
 80259cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80259ce:	2b02      	cmp	r3, #2
 80259d0:	dc41      	bgt.n	8025a56 <_dtoa_r+0x906>
 80259d2:	e063      	b.n	8025a9c <_dtoa_r+0x94c>
 80259d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80259d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80259da:	e746      	b.n	802586a <_dtoa_r+0x71a>
 80259dc:	9b07      	ldr	r3, [sp, #28]
 80259de:	1e5c      	subs	r4, r3, #1
 80259e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80259e2:	42a3      	cmp	r3, r4
 80259e4:	bfbf      	itttt	lt
 80259e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80259e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80259ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80259ec:	1ae3      	sublt	r3, r4, r3
 80259ee:	bfb4      	ite	lt
 80259f0:	18d2      	addlt	r2, r2, r3
 80259f2:	1b1c      	subge	r4, r3, r4
 80259f4:	9b07      	ldr	r3, [sp, #28]
 80259f6:	bfbc      	itt	lt
 80259f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80259fa:	2400      	movlt	r4, #0
 80259fc:	2b00      	cmp	r3, #0
 80259fe:	bfb5      	itete	lt
 8025a00:	eba8 0603 	sublt.w	r6, r8, r3
 8025a04:	9b07      	ldrge	r3, [sp, #28]
 8025a06:	2300      	movlt	r3, #0
 8025a08:	4646      	movge	r6, r8
 8025a0a:	e730      	b.n	802586e <_dtoa_r+0x71e>
 8025a0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025a0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8025a10:	4646      	mov	r6, r8
 8025a12:	e735      	b.n	8025880 <_dtoa_r+0x730>
 8025a14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025a16:	e75c      	b.n	80258d2 <_dtoa_r+0x782>
 8025a18:	2300      	movs	r3, #0
 8025a1a:	e788      	b.n	802592e <_dtoa_r+0x7de>
 8025a1c:	3fe00000 	.word	0x3fe00000
 8025a20:	40240000 	.word	0x40240000
 8025a24:	40140000 	.word	0x40140000
 8025a28:	9b02      	ldr	r3, [sp, #8]
 8025a2a:	e780      	b.n	802592e <_dtoa_r+0x7de>
 8025a2c:	2300      	movs	r3, #0
 8025a2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025a30:	e782      	b.n	8025938 <_dtoa_r+0x7e8>
 8025a32:	d099      	beq.n	8025968 <_dtoa_r+0x818>
 8025a34:	9a08      	ldr	r2, [sp, #32]
 8025a36:	331c      	adds	r3, #28
 8025a38:	441a      	add	r2, r3
 8025a3a:	4498      	add	r8, r3
 8025a3c:	441e      	add	r6, r3
 8025a3e:	9208      	str	r2, [sp, #32]
 8025a40:	e792      	b.n	8025968 <_dtoa_r+0x818>
 8025a42:	4603      	mov	r3, r0
 8025a44:	e7f6      	b.n	8025a34 <_dtoa_r+0x8e4>
 8025a46:	9b07      	ldr	r3, [sp, #28]
 8025a48:	9704      	str	r7, [sp, #16]
 8025a4a:	2b00      	cmp	r3, #0
 8025a4c:	dc20      	bgt.n	8025a90 <_dtoa_r+0x940>
 8025a4e:	9300      	str	r3, [sp, #0]
 8025a50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025a52:	2b02      	cmp	r3, #2
 8025a54:	dd1e      	ble.n	8025a94 <_dtoa_r+0x944>
 8025a56:	9b00      	ldr	r3, [sp, #0]
 8025a58:	2b00      	cmp	r3, #0
 8025a5a:	f47f aec0 	bne.w	80257de <_dtoa_r+0x68e>
 8025a5e:	4621      	mov	r1, r4
 8025a60:	2205      	movs	r2, #5
 8025a62:	4658      	mov	r0, fp
 8025a64:	f000 fd64 	bl	8026530 <__multadd>
 8025a68:	4601      	mov	r1, r0
 8025a6a:	4604      	mov	r4, r0
 8025a6c:	4648      	mov	r0, r9
 8025a6e:	f000 ffc1 	bl	80269f4 <__mcmp>
 8025a72:	2800      	cmp	r0, #0
 8025a74:	f77f aeb3 	ble.w	80257de <_dtoa_r+0x68e>
 8025a78:	4656      	mov	r6, sl
 8025a7a:	2331      	movs	r3, #49	@ 0x31
 8025a7c:	f806 3b01 	strb.w	r3, [r6], #1
 8025a80:	9b04      	ldr	r3, [sp, #16]
 8025a82:	3301      	adds	r3, #1
 8025a84:	9304      	str	r3, [sp, #16]
 8025a86:	e6ae      	b.n	80257e6 <_dtoa_r+0x696>
 8025a88:	9c07      	ldr	r4, [sp, #28]
 8025a8a:	9704      	str	r7, [sp, #16]
 8025a8c:	4625      	mov	r5, r4
 8025a8e:	e7f3      	b.n	8025a78 <_dtoa_r+0x928>
 8025a90:	9b07      	ldr	r3, [sp, #28]
 8025a92:	9300      	str	r3, [sp, #0]
 8025a94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025a96:	2b00      	cmp	r3, #0
 8025a98:	f000 8104 	beq.w	8025ca4 <_dtoa_r+0xb54>
 8025a9c:	2e00      	cmp	r6, #0
 8025a9e:	dd05      	ble.n	8025aac <_dtoa_r+0x95c>
 8025aa0:	4629      	mov	r1, r5
 8025aa2:	4632      	mov	r2, r6
 8025aa4:	4658      	mov	r0, fp
 8025aa6:	f000 ff39 	bl	802691c <__lshift>
 8025aaa:	4605      	mov	r5, r0
 8025aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025aae:	2b00      	cmp	r3, #0
 8025ab0:	d05a      	beq.n	8025b68 <_dtoa_r+0xa18>
 8025ab2:	6869      	ldr	r1, [r5, #4]
 8025ab4:	4658      	mov	r0, fp
 8025ab6:	f000 fcd9 	bl	802646c <_Balloc>
 8025aba:	4606      	mov	r6, r0
 8025abc:	b928      	cbnz	r0, 8025aca <_dtoa_r+0x97a>
 8025abe:	4b84      	ldr	r3, [pc, #528]	@ (8025cd0 <_dtoa_r+0xb80>)
 8025ac0:	4602      	mov	r2, r0
 8025ac2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8025ac6:	f7ff bb5a 	b.w	802517e <_dtoa_r+0x2e>
 8025aca:	692a      	ldr	r2, [r5, #16]
 8025acc:	3202      	adds	r2, #2
 8025ace:	0092      	lsls	r2, r2, #2
 8025ad0:	f105 010c 	add.w	r1, r5, #12
 8025ad4:	300c      	adds	r0, #12
 8025ad6:	f7ff fa8a 	bl	8024fee <memcpy>
 8025ada:	2201      	movs	r2, #1
 8025adc:	4631      	mov	r1, r6
 8025ade:	4658      	mov	r0, fp
 8025ae0:	f000 ff1c 	bl	802691c <__lshift>
 8025ae4:	f10a 0301 	add.w	r3, sl, #1
 8025ae8:	9307      	str	r3, [sp, #28]
 8025aea:	9b00      	ldr	r3, [sp, #0]
 8025aec:	4453      	add	r3, sl
 8025aee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025af0:	9b02      	ldr	r3, [sp, #8]
 8025af2:	f003 0301 	and.w	r3, r3, #1
 8025af6:	462f      	mov	r7, r5
 8025af8:	930a      	str	r3, [sp, #40]	@ 0x28
 8025afa:	4605      	mov	r5, r0
 8025afc:	9b07      	ldr	r3, [sp, #28]
 8025afe:	4621      	mov	r1, r4
 8025b00:	3b01      	subs	r3, #1
 8025b02:	4648      	mov	r0, r9
 8025b04:	9300      	str	r3, [sp, #0]
 8025b06:	f7ff fa98 	bl	802503a <quorem>
 8025b0a:	4639      	mov	r1, r7
 8025b0c:	9002      	str	r0, [sp, #8]
 8025b0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8025b12:	4648      	mov	r0, r9
 8025b14:	f000 ff6e 	bl	80269f4 <__mcmp>
 8025b18:	462a      	mov	r2, r5
 8025b1a:	9008      	str	r0, [sp, #32]
 8025b1c:	4621      	mov	r1, r4
 8025b1e:	4658      	mov	r0, fp
 8025b20:	f000 ff84 	bl	8026a2c <__mdiff>
 8025b24:	68c2      	ldr	r2, [r0, #12]
 8025b26:	4606      	mov	r6, r0
 8025b28:	bb02      	cbnz	r2, 8025b6c <_dtoa_r+0xa1c>
 8025b2a:	4601      	mov	r1, r0
 8025b2c:	4648      	mov	r0, r9
 8025b2e:	f000 ff61 	bl	80269f4 <__mcmp>
 8025b32:	4602      	mov	r2, r0
 8025b34:	4631      	mov	r1, r6
 8025b36:	4658      	mov	r0, fp
 8025b38:	920e      	str	r2, [sp, #56]	@ 0x38
 8025b3a:	f000 fcd7 	bl	80264ec <_Bfree>
 8025b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025b40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025b42:	9e07      	ldr	r6, [sp, #28]
 8025b44:	ea43 0102 	orr.w	r1, r3, r2
 8025b48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025b4a:	4319      	orrs	r1, r3
 8025b4c:	d110      	bne.n	8025b70 <_dtoa_r+0xa20>
 8025b4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8025b52:	d029      	beq.n	8025ba8 <_dtoa_r+0xa58>
 8025b54:	9b08      	ldr	r3, [sp, #32]
 8025b56:	2b00      	cmp	r3, #0
 8025b58:	dd02      	ble.n	8025b60 <_dtoa_r+0xa10>
 8025b5a:	9b02      	ldr	r3, [sp, #8]
 8025b5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8025b60:	9b00      	ldr	r3, [sp, #0]
 8025b62:	f883 8000 	strb.w	r8, [r3]
 8025b66:	e63f      	b.n	80257e8 <_dtoa_r+0x698>
 8025b68:	4628      	mov	r0, r5
 8025b6a:	e7bb      	b.n	8025ae4 <_dtoa_r+0x994>
 8025b6c:	2201      	movs	r2, #1
 8025b6e:	e7e1      	b.n	8025b34 <_dtoa_r+0x9e4>
 8025b70:	9b08      	ldr	r3, [sp, #32]
 8025b72:	2b00      	cmp	r3, #0
 8025b74:	db04      	blt.n	8025b80 <_dtoa_r+0xa30>
 8025b76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025b78:	430b      	orrs	r3, r1
 8025b7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025b7c:	430b      	orrs	r3, r1
 8025b7e:	d120      	bne.n	8025bc2 <_dtoa_r+0xa72>
 8025b80:	2a00      	cmp	r2, #0
 8025b82:	dded      	ble.n	8025b60 <_dtoa_r+0xa10>
 8025b84:	4649      	mov	r1, r9
 8025b86:	2201      	movs	r2, #1
 8025b88:	4658      	mov	r0, fp
 8025b8a:	f000 fec7 	bl	802691c <__lshift>
 8025b8e:	4621      	mov	r1, r4
 8025b90:	4681      	mov	r9, r0
 8025b92:	f000 ff2f 	bl	80269f4 <__mcmp>
 8025b96:	2800      	cmp	r0, #0
 8025b98:	dc03      	bgt.n	8025ba2 <_dtoa_r+0xa52>
 8025b9a:	d1e1      	bne.n	8025b60 <_dtoa_r+0xa10>
 8025b9c:	f018 0f01 	tst.w	r8, #1
 8025ba0:	d0de      	beq.n	8025b60 <_dtoa_r+0xa10>
 8025ba2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8025ba6:	d1d8      	bne.n	8025b5a <_dtoa_r+0xa0a>
 8025ba8:	9a00      	ldr	r2, [sp, #0]
 8025baa:	2339      	movs	r3, #57	@ 0x39
 8025bac:	7013      	strb	r3, [r2, #0]
 8025bae:	4633      	mov	r3, r6
 8025bb0:	461e      	mov	r6, r3
 8025bb2:	3b01      	subs	r3, #1
 8025bb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8025bb8:	2a39      	cmp	r2, #57	@ 0x39
 8025bba:	d052      	beq.n	8025c62 <_dtoa_r+0xb12>
 8025bbc:	3201      	adds	r2, #1
 8025bbe:	701a      	strb	r2, [r3, #0]
 8025bc0:	e612      	b.n	80257e8 <_dtoa_r+0x698>
 8025bc2:	2a00      	cmp	r2, #0
 8025bc4:	dd07      	ble.n	8025bd6 <_dtoa_r+0xa86>
 8025bc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8025bca:	d0ed      	beq.n	8025ba8 <_dtoa_r+0xa58>
 8025bcc:	9a00      	ldr	r2, [sp, #0]
 8025bce:	f108 0301 	add.w	r3, r8, #1
 8025bd2:	7013      	strb	r3, [r2, #0]
 8025bd4:	e608      	b.n	80257e8 <_dtoa_r+0x698>
 8025bd6:	9b07      	ldr	r3, [sp, #28]
 8025bd8:	9a07      	ldr	r2, [sp, #28]
 8025bda:	f803 8c01 	strb.w	r8, [r3, #-1]
 8025bde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025be0:	4293      	cmp	r3, r2
 8025be2:	d028      	beq.n	8025c36 <_dtoa_r+0xae6>
 8025be4:	4649      	mov	r1, r9
 8025be6:	2300      	movs	r3, #0
 8025be8:	220a      	movs	r2, #10
 8025bea:	4658      	mov	r0, fp
 8025bec:	f000 fca0 	bl	8026530 <__multadd>
 8025bf0:	42af      	cmp	r7, r5
 8025bf2:	4681      	mov	r9, r0
 8025bf4:	f04f 0300 	mov.w	r3, #0
 8025bf8:	f04f 020a 	mov.w	r2, #10
 8025bfc:	4639      	mov	r1, r7
 8025bfe:	4658      	mov	r0, fp
 8025c00:	d107      	bne.n	8025c12 <_dtoa_r+0xac2>
 8025c02:	f000 fc95 	bl	8026530 <__multadd>
 8025c06:	4607      	mov	r7, r0
 8025c08:	4605      	mov	r5, r0
 8025c0a:	9b07      	ldr	r3, [sp, #28]
 8025c0c:	3301      	adds	r3, #1
 8025c0e:	9307      	str	r3, [sp, #28]
 8025c10:	e774      	b.n	8025afc <_dtoa_r+0x9ac>
 8025c12:	f000 fc8d 	bl	8026530 <__multadd>
 8025c16:	4629      	mov	r1, r5
 8025c18:	4607      	mov	r7, r0
 8025c1a:	2300      	movs	r3, #0
 8025c1c:	220a      	movs	r2, #10
 8025c1e:	4658      	mov	r0, fp
 8025c20:	f000 fc86 	bl	8026530 <__multadd>
 8025c24:	4605      	mov	r5, r0
 8025c26:	e7f0      	b.n	8025c0a <_dtoa_r+0xaba>
 8025c28:	9b00      	ldr	r3, [sp, #0]
 8025c2a:	2b00      	cmp	r3, #0
 8025c2c:	bfcc      	ite	gt
 8025c2e:	461e      	movgt	r6, r3
 8025c30:	2601      	movle	r6, #1
 8025c32:	4456      	add	r6, sl
 8025c34:	2700      	movs	r7, #0
 8025c36:	4649      	mov	r1, r9
 8025c38:	2201      	movs	r2, #1
 8025c3a:	4658      	mov	r0, fp
 8025c3c:	f000 fe6e 	bl	802691c <__lshift>
 8025c40:	4621      	mov	r1, r4
 8025c42:	4681      	mov	r9, r0
 8025c44:	f000 fed6 	bl	80269f4 <__mcmp>
 8025c48:	2800      	cmp	r0, #0
 8025c4a:	dcb0      	bgt.n	8025bae <_dtoa_r+0xa5e>
 8025c4c:	d102      	bne.n	8025c54 <_dtoa_r+0xb04>
 8025c4e:	f018 0f01 	tst.w	r8, #1
 8025c52:	d1ac      	bne.n	8025bae <_dtoa_r+0xa5e>
 8025c54:	4633      	mov	r3, r6
 8025c56:	461e      	mov	r6, r3
 8025c58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025c5c:	2a30      	cmp	r2, #48	@ 0x30
 8025c5e:	d0fa      	beq.n	8025c56 <_dtoa_r+0xb06>
 8025c60:	e5c2      	b.n	80257e8 <_dtoa_r+0x698>
 8025c62:	459a      	cmp	sl, r3
 8025c64:	d1a4      	bne.n	8025bb0 <_dtoa_r+0xa60>
 8025c66:	9b04      	ldr	r3, [sp, #16]
 8025c68:	3301      	adds	r3, #1
 8025c6a:	9304      	str	r3, [sp, #16]
 8025c6c:	2331      	movs	r3, #49	@ 0x31
 8025c6e:	f88a 3000 	strb.w	r3, [sl]
 8025c72:	e5b9      	b.n	80257e8 <_dtoa_r+0x698>
 8025c74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025c76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8025cd4 <_dtoa_r+0xb84>
 8025c7a:	b11b      	cbz	r3, 8025c84 <_dtoa_r+0xb34>
 8025c7c:	f10a 0308 	add.w	r3, sl, #8
 8025c80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8025c82:	6013      	str	r3, [r2, #0]
 8025c84:	4650      	mov	r0, sl
 8025c86:	b019      	add	sp, #100	@ 0x64
 8025c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025c8e:	2b01      	cmp	r3, #1
 8025c90:	f77f ae37 	ble.w	8025902 <_dtoa_r+0x7b2>
 8025c94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025c96:	930a      	str	r3, [sp, #40]	@ 0x28
 8025c98:	2001      	movs	r0, #1
 8025c9a:	e655      	b.n	8025948 <_dtoa_r+0x7f8>
 8025c9c:	9b00      	ldr	r3, [sp, #0]
 8025c9e:	2b00      	cmp	r3, #0
 8025ca0:	f77f aed6 	ble.w	8025a50 <_dtoa_r+0x900>
 8025ca4:	4656      	mov	r6, sl
 8025ca6:	4621      	mov	r1, r4
 8025ca8:	4648      	mov	r0, r9
 8025caa:	f7ff f9c6 	bl	802503a <quorem>
 8025cae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8025cb2:	f806 8b01 	strb.w	r8, [r6], #1
 8025cb6:	9b00      	ldr	r3, [sp, #0]
 8025cb8:	eba6 020a 	sub.w	r2, r6, sl
 8025cbc:	4293      	cmp	r3, r2
 8025cbe:	ddb3      	ble.n	8025c28 <_dtoa_r+0xad8>
 8025cc0:	4649      	mov	r1, r9
 8025cc2:	2300      	movs	r3, #0
 8025cc4:	220a      	movs	r2, #10
 8025cc6:	4658      	mov	r0, fp
 8025cc8:	f000 fc32 	bl	8026530 <__multadd>
 8025ccc:	4681      	mov	r9, r0
 8025cce:	e7ea      	b.n	8025ca6 <_dtoa_r+0xb56>
 8025cd0:	080318d8 	.word	0x080318d8
 8025cd4:	08031873 	.word	0x08031873

08025cd8 <_free_r>:
 8025cd8:	b538      	push	{r3, r4, r5, lr}
 8025cda:	4605      	mov	r5, r0
 8025cdc:	2900      	cmp	r1, #0
 8025cde:	d041      	beq.n	8025d64 <_free_r+0x8c>
 8025ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025ce4:	1f0c      	subs	r4, r1, #4
 8025ce6:	2b00      	cmp	r3, #0
 8025ce8:	bfb8      	it	lt
 8025cea:	18e4      	addlt	r4, r4, r3
 8025cec:	f7fd f808 	bl	8022d00 <__malloc_lock>
 8025cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8025d68 <_free_r+0x90>)
 8025cf2:	6813      	ldr	r3, [r2, #0]
 8025cf4:	b933      	cbnz	r3, 8025d04 <_free_r+0x2c>
 8025cf6:	6063      	str	r3, [r4, #4]
 8025cf8:	6014      	str	r4, [r2, #0]
 8025cfa:	4628      	mov	r0, r5
 8025cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025d00:	f7fd b804 	b.w	8022d0c <__malloc_unlock>
 8025d04:	42a3      	cmp	r3, r4
 8025d06:	d908      	bls.n	8025d1a <_free_r+0x42>
 8025d08:	6820      	ldr	r0, [r4, #0]
 8025d0a:	1821      	adds	r1, r4, r0
 8025d0c:	428b      	cmp	r3, r1
 8025d0e:	bf01      	itttt	eq
 8025d10:	6819      	ldreq	r1, [r3, #0]
 8025d12:	685b      	ldreq	r3, [r3, #4]
 8025d14:	1809      	addeq	r1, r1, r0
 8025d16:	6021      	streq	r1, [r4, #0]
 8025d18:	e7ed      	b.n	8025cf6 <_free_r+0x1e>
 8025d1a:	461a      	mov	r2, r3
 8025d1c:	685b      	ldr	r3, [r3, #4]
 8025d1e:	b10b      	cbz	r3, 8025d24 <_free_r+0x4c>
 8025d20:	42a3      	cmp	r3, r4
 8025d22:	d9fa      	bls.n	8025d1a <_free_r+0x42>
 8025d24:	6811      	ldr	r1, [r2, #0]
 8025d26:	1850      	adds	r0, r2, r1
 8025d28:	42a0      	cmp	r0, r4
 8025d2a:	d10b      	bne.n	8025d44 <_free_r+0x6c>
 8025d2c:	6820      	ldr	r0, [r4, #0]
 8025d2e:	4401      	add	r1, r0
 8025d30:	1850      	adds	r0, r2, r1
 8025d32:	4283      	cmp	r3, r0
 8025d34:	6011      	str	r1, [r2, #0]
 8025d36:	d1e0      	bne.n	8025cfa <_free_r+0x22>
 8025d38:	6818      	ldr	r0, [r3, #0]
 8025d3a:	685b      	ldr	r3, [r3, #4]
 8025d3c:	6053      	str	r3, [r2, #4]
 8025d3e:	4408      	add	r0, r1
 8025d40:	6010      	str	r0, [r2, #0]
 8025d42:	e7da      	b.n	8025cfa <_free_r+0x22>
 8025d44:	d902      	bls.n	8025d4c <_free_r+0x74>
 8025d46:	230c      	movs	r3, #12
 8025d48:	602b      	str	r3, [r5, #0]
 8025d4a:	e7d6      	b.n	8025cfa <_free_r+0x22>
 8025d4c:	6820      	ldr	r0, [r4, #0]
 8025d4e:	1821      	adds	r1, r4, r0
 8025d50:	428b      	cmp	r3, r1
 8025d52:	bf04      	itt	eq
 8025d54:	6819      	ldreq	r1, [r3, #0]
 8025d56:	685b      	ldreq	r3, [r3, #4]
 8025d58:	6063      	str	r3, [r4, #4]
 8025d5a:	bf04      	itt	eq
 8025d5c:	1809      	addeq	r1, r1, r0
 8025d5e:	6021      	streq	r1, [r4, #0]
 8025d60:	6054      	str	r4, [r2, #4]
 8025d62:	e7ca      	b.n	8025cfa <_free_r+0x22>
 8025d64:	bd38      	pop	{r3, r4, r5, pc}
 8025d66:	bf00      	nop
 8025d68:	200030d0 	.word	0x200030d0

08025d6c <rshift>:
 8025d6c:	6903      	ldr	r3, [r0, #16]
 8025d6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8025d72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025d76:	ea4f 1261 	mov.w	r2, r1, asr #5
 8025d7a:	f100 0414 	add.w	r4, r0, #20
 8025d7e:	dd45      	ble.n	8025e0c <rshift+0xa0>
 8025d80:	f011 011f 	ands.w	r1, r1, #31
 8025d84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8025d88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8025d8c:	d10c      	bne.n	8025da8 <rshift+0x3c>
 8025d8e:	f100 0710 	add.w	r7, r0, #16
 8025d92:	4629      	mov	r1, r5
 8025d94:	42b1      	cmp	r1, r6
 8025d96:	d334      	bcc.n	8025e02 <rshift+0x96>
 8025d98:	1a9b      	subs	r3, r3, r2
 8025d9a:	009b      	lsls	r3, r3, #2
 8025d9c:	1eea      	subs	r2, r5, #3
 8025d9e:	4296      	cmp	r6, r2
 8025da0:	bf38      	it	cc
 8025da2:	2300      	movcc	r3, #0
 8025da4:	4423      	add	r3, r4
 8025da6:	e015      	b.n	8025dd4 <rshift+0x68>
 8025da8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8025dac:	f1c1 0820 	rsb	r8, r1, #32
 8025db0:	40cf      	lsrs	r7, r1
 8025db2:	f105 0e04 	add.w	lr, r5, #4
 8025db6:	46a1      	mov	r9, r4
 8025db8:	4576      	cmp	r6, lr
 8025dba:	46f4      	mov	ip, lr
 8025dbc:	d815      	bhi.n	8025dea <rshift+0x7e>
 8025dbe:	1a9a      	subs	r2, r3, r2
 8025dc0:	0092      	lsls	r2, r2, #2
 8025dc2:	3a04      	subs	r2, #4
 8025dc4:	3501      	adds	r5, #1
 8025dc6:	42ae      	cmp	r6, r5
 8025dc8:	bf38      	it	cc
 8025dca:	2200      	movcc	r2, #0
 8025dcc:	18a3      	adds	r3, r4, r2
 8025dce:	50a7      	str	r7, [r4, r2]
 8025dd0:	b107      	cbz	r7, 8025dd4 <rshift+0x68>
 8025dd2:	3304      	adds	r3, #4
 8025dd4:	1b1a      	subs	r2, r3, r4
 8025dd6:	42a3      	cmp	r3, r4
 8025dd8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8025ddc:	bf08      	it	eq
 8025dde:	2300      	moveq	r3, #0
 8025de0:	6102      	str	r2, [r0, #16]
 8025de2:	bf08      	it	eq
 8025de4:	6143      	streq	r3, [r0, #20]
 8025de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025dea:	f8dc c000 	ldr.w	ip, [ip]
 8025dee:	fa0c fc08 	lsl.w	ip, ip, r8
 8025df2:	ea4c 0707 	orr.w	r7, ip, r7
 8025df6:	f849 7b04 	str.w	r7, [r9], #4
 8025dfa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8025dfe:	40cf      	lsrs	r7, r1
 8025e00:	e7da      	b.n	8025db8 <rshift+0x4c>
 8025e02:	f851 cb04 	ldr.w	ip, [r1], #4
 8025e06:	f847 cf04 	str.w	ip, [r7, #4]!
 8025e0a:	e7c3      	b.n	8025d94 <rshift+0x28>
 8025e0c:	4623      	mov	r3, r4
 8025e0e:	e7e1      	b.n	8025dd4 <rshift+0x68>

08025e10 <__hexdig_fun>:
 8025e10:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8025e14:	2b09      	cmp	r3, #9
 8025e16:	d802      	bhi.n	8025e1e <__hexdig_fun+0xe>
 8025e18:	3820      	subs	r0, #32
 8025e1a:	b2c0      	uxtb	r0, r0
 8025e1c:	4770      	bx	lr
 8025e1e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8025e22:	2b05      	cmp	r3, #5
 8025e24:	d801      	bhi.n	8025e2a <__hexdig_fun+0x1a>
 8025e26:	3847      	subs	r0, #71	@ 0x47
 8025e28:	e7f7      	b.n	8025e1a <__hexdig_fun+0xa>
 8025e2a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8025e2e:	2b05      	cmp	r3, #5
 8025e30:	d801      	bhi.n	8025e36 <__hexdig_fun+0x26>
 8025e32:	3827      	subs	r0, #39	@ 0x27
 8025e34:	e7f1      	b.n	8025e1a <__hexdig_fun+0xa>
 8025e36:	2000      	movs	r0, #0
 8025e38:	4770      	bx	lr
	...

08025e3c <__gethex>:
 8025e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e40:	b085      	sub	sp, #20
 8025e42:	468a      	mov	sl, r1
 8025e44:	9302      	str	r3, [sp, #8]
 8025e46:	680b      	ldr	r3, [r1, #0]
 8025e48:	9001      	str	r0, [sp, #4]
 8025e4a:	4690      	mov	r8, r2
 8025e4c:	1c9c      	adds	r4, r3, #2
 8025e4e:	46a1      	mov	r9, r4
 8025e50:	f814 0b01 	ldrb.w	r0, [r4], #1
 8025e54:	2830      	cmp	r0, #48	@ 0x30
 8025e56:	d0fa      	beq.n	8025e4e <__gethex+0x12>
 8025e58:	eba9 0303 	sub.w	r3, r9, r3
 8025e5c:	f1a3 0b02 	sub.w	fp, r3, #2
 8025e60:	f7ff ffd6 	bl	8025e10 <__hexdig_fun>
 8025e64:	4605      	mov	r5, r0
 8025e66:	2800      	cmp	r0, #0
 8025e68:	d168      	bne.n	8025f3c <__gethex+0x100>
 8025e6a:	49a0      	ldr	r1, [pc, #640]	@ (80260ec <__gethex+0x2b0>)
 8025e6c:	2201      	movs	r2, #1
 8025e6e:	4648      	mov	r0, r9
 8025e70:	f7fe ff81 	bl	8024d76 <strncmp>
 8025e74:	4607      	mov	r7, r0
 8025e76:	2800      	cmp	r0, #0
 8025e78:	d167      	bne.n	8025f4a <__gethex+0x10e>
 8025e7a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8025e7e:	4626      	mov	r6, r4
 8025e80:	f7ff ffc6 	bl	8025e10 <__hexdig_fun>
 8025e84:	2800      	cmp	r0, #0
 8025e86:	d062      	beq.n	8025f4e <__gethex+0x112>
 8025e88:	4623      	mov	r3, r4
 8025e8a:	7818      	ldrb	r0, [r3, #0]
 8025e8c:	2830      	cmp	r0, #48	@ 0x30
 8025e8e:	4699      	mov	r9, r3
 8025e90:	f103 0301 	add.w	r3, r3, #1
 8025e94:	d0f9      	beq.n	8025e8a <__gethex+0x4e>
 8025e96:	f7ff ffbb 	bl	8025e10 <__hexdig_fun>
 8025e9a:	fab0 f580 	clz	r5, r0
 8025e9e:	096d      	lsrs	r5, r5, #5
 8025ea0:	f04f 0b01 	mov.w	fp, #1
 8025ea4:	464a      	mov	r2, r9
 8025ea6:	4616      	mov	r6, r2
 8025ea8:	3201      	adds	r2, #1
 8025eaa:	7830      	ldrb	r0, [r6, #0]
 8025eac:	f7ff ffb0 	bl	8025e10 <__hexdig_fun>
 8025eb0:	2800      	cmp	r0, #0
 8025eb2:	d1f8      	bne.n	8025ea6 <__gethex+0x6a>
 8025eb4:	498d      	ldr	r1, [pc, #564]	@ (80260ec <__gethex+0x2b0>)
 8025eb6:	2201      	movs	r2, #1
 8025eb8:	4630      	mov	r0, r6
 8025eba:	f7fe ff5c 	bl	8024d76 <strncmp>
 8025ebe:	2800      	cmp	r0, #0
 8025ec0:	d13f      	bne.n	8025f42 <__gethex+0x106>
 8025ec2:	b944      	cbnz	r4, 8025ed6 <__gethex+0x9a>
 8025ec4:	1c74      	adds	r4, r6, #1
 8025ec6:	4622      	mov	r2, r4
 8025ec8:	4616      	mov	r6, r2
 8025eca:	3201      	adds	r2, #1
 8025ecc:	7830      	ldrb	r0, [r6, #0]
 8025ece:	f7ff ff9f 	bl	8025e10 <__hexdig_fun>
 8025ed2:	2800      	cmp	r0, #0
 8025ed4:	d1f8      	bne.n	8025ec8 <__gethex+0x8c>
 8025ed6:	1ba4      	subs	r4, r4, r6
 8025ed8:	00a7      	lsls	r7, r4, #2
 8025eda:	7833      	ldrb	r3, [r6, #0]
 8025edc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8025ee0:	2b50      	cmp	r3, #80	@ 0x50
 8025ee2:	d13e      	bne.n	8025f62 <__gethex+0x126>
 8025ee4:	7873      	ldrb	r3, [r6, #1]
 8025ee6:	2b2b      	cmp	r3, #43	@ 0x2b
 8025ee8:	d033      	beq.n	8025f52 <__gethex+0x116>
 8025eea:	2b2d      	cmp	r3, #45	@ 0x2d
 8025eec:	d034      	beq.n	8025f58 <__gethex+0x11c>
 8025eee:	1c71      	adds	r1, r6, #1
 8025ef0:	2400      	movs	r4, #0
 8025ef2:	7808      	ldrb	r0, [r1, #0]
 8025ef4:	f7ff ff8c 	bl	8025e10 <__hexdig_fun>
 8025ef8:	1e43      	subs	r3, r0, #1
 8025efa:	b2db      	uxtb	r3, r3
 8025efc:	2b18      	cmp	r3, #24
 8025efe:	d830      	bhi.n	8025f62 <__gethex+0x126>
 8025f00:	f1a0 0210 	sub.w	r2, r0, #16
 8025f04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8025f08:	f7ff ff82 	bl	8025e10 <__hexdig_fun>
 8025f0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8025f10:	fa5f fc8c 	uxtb.w	ip, ip
 8025f14:	f1bc 0f18 	cmp.w	ip, #24
 8025f18:	f04f 030a 	mov.w	r3, #10
 8025f1c:	d91e      	bls.n	8025f5c <__gethex+0x120>
 8025f1e:	b104      	cbz	r4, 8025f22 <__gethex+0xe6>
 8025f20:	4252      	negs	r2, r2
 8025f22:	4417      	add	r7, r2
 8025f24:	f8ca 1000 	str.w	r1, [sl]
 8025f28:	b1ed      	cbz	r5, 8025f66 <__gethex+0x12a>
 8025f2a:	f1bb 0f00 	cmp.w	fp, #0
 8025f2e:	bf0c      	ite	eq
 8025f30:	2506      	moveq	r5, #6
 8025f32:	2500      	movne	r5, #0
 8025f34:	4628      	mov	r0, r5
 8025f36:	b005      	add	sp, #20
 8025f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f3c:	2500      	movs	r5, #0
 8025f3e:	462c      	mov	r4, r5
 8025f40:	e7b0      	b.n	8025ea4 <__gethex+0x68>
 8025f42:	2c00      	cmp	r4, #0
 8025f44:	d1c7      	bne.n	8025ed6 <__gethex+0x9a>
 8025f46:	4627      	mov	r7, r4
 8025f48:	e7c7      	b.n	8025eda <__gethex+0x9e>
 8025f4a:	464e      	mov	r6, r9
 8025f4c:	462f      	mov	r7, r5
 8025f4e:	2501      	movs	r5, #1
 8025f50:	e7c3      	b.n	8025eda <__gethex+0x9e>
 8025f52:	2400      	movs	r4, #0
 8025f54:	1cb1      	adds	r1, r6, #2
 8025f56:	e7cc      	b.n	8025ef2 <__gethex+0xb6>
 8025f58:	2401      	movs	r4, #1
 8025f5a:	e7fb      	b.n	8025f54 <__gethex+0x118>
 8025f5c:	fb03 0002 	mla	r0, r3, r2, r0
 8025f60:	e7ce      	b.n	8025f00 <__gethex+0xc4>
 8025f62:	4631      	mov	r1, r6
 8025f64:	e7de      	b.n	8025f24 <__gethex+0xe8>
 8025f66:	eba6 0309 	sub.w	r3, r6, r9
 8025f6a:	3b01      	subs	r3, #1
 8025f6c:	4629      	mov	r1, r5
 8025f6e:	2b07      	cmp	r3, #7
 8025f70:	dc0a      	bgt.n	8025f88 <__gethex+0x14c>
 8025f72:	9801      	ldr	r0, [sp, #4]
 8025f74:	f000 fa7a 	bl	802646c <_Balloc>
 8025f78:	4604      	mov	r4, r0
 8025f7a:	b940      	cbnz	r0, 8025f8e <__gethex+0x152>
 8025f7c:	4b5c      	ldr	r3, [pc, #368]	@ (80260f0 <__gethex+0x2b4>)
 8025f7e:	4602      	mov	r2, r0
 8025f80:	21e4      	movs	r1, #228	@ 0xe4
 8025f82:	485c      	ldr	r0, [pc, #368]	@ (80260f4 <__gethex+0x2b8>)
 8025f84:	f7fc fdd0 	bl	8022b28 <__assert_func>
 8025f88:	3101      	adds	r1, #1
 8025f8a:	105b      	asrs	r3, r3, #1
 8025f8c:	e7ef      	b.n	8025f6e <__gethex+0x132>
 8025f8e:	f100 0a14 	add.w	sl, r0, #20
 8025f92:	2300      	movs	r3, #0
 8025f94:	4655      	mov	r5, sl
 8025f96:	469b      	mov	fp, r3
 8025f98:	45b1      	cmp	r9, r6
 8025f9a:	d337      	bcc.n	802600c <__gethex+0x1d0>
 8025f9c:	f845 bb04 	str.w	fp, [r5], #4
 8025fa0:	eba5 050a 	sub.w	r5, r5, sl
 8025fa4:	10ad      	asrs	r5, r5, #2
 8025fa6:	6125      	str	r5, [r4, #16]
 8025fa8:	4658      	mov	r0, fp
 8025faa:	f000 fb51 	bl	8026650 <__hi0bits>
 8025fae:	016d      	lsls	r5, r5, #5
 8025fb0:	f8d8 6000 	ldr.w	r6, [r8]
 8025fb4:	1a2d      	subs	r5, r5, r0
 8025fb6:	42b5      	cmp	r5, r6
 8025fb8:	dd54      	ble.n	8026064 <__gethex+0x228>
 8025fba:	1bad      	subs	r5, r5, r6
 8025fbc:	4629      	mov	r1, r5
 8025fbe:	4620      	mov	r0, r4
 8025fc0:	f000 fee5 	bl	8026d8e <__any_on>
 8025fc4:	4681      	mov	r9, r0
 8025fc6:	b178      	cbz	r0, 8025fe8 <__gethex+0x1ac>
 8025fc8:	1e6b      	subs	r3, r5, #1
 8025fca:	1159      	asrs	r1, r3, #5
 8025fcc:	f003 021f 	and.w	r2, r3, #31
 8025fd0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8025fd4:	f04f 0901 	mov.w	r9, #1
 8025fd8:	fa09 f202 	lsl.w	r2, r9, r2
 8025fdc:	420a      	tst	r2, r1
 8025fde:	d003      	beq.n	8025fe8 <__gethex+0x1ac>
 8025fe0:	454b      	cmp	r3, r9
 8025fe2:	dc36      	bgt.n	8026052 <__gethex+0x216>
 8025fe4:	f04f 0902 	mov.w	r9, #2
 8025fe8:	4629      	mov	r1, r5
 8025fea:	4620      	mov	r0, r4
 8025fec:	f7ff febe 	bl	8025d6c <rshift>
 8025ff0:	442f      	add	r7, r5
 8025ff2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8025ff6:	42bb      	cmp	r3, r7
 8025ff8:	da42      	bge.n	8026080 <__gethex+0x244>
 8025ffa:	9801      	ldr	r0, [sp, #4]
 8025ffc:	4621      	mov	r1, r4
 8025ffe:	f000 fa75 	bl	80264ec <_Bfree>
 8026002:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026004:	2300      	movs	r3, #0
 8026006:	6013      	str	r3, [r2, #0]
 8026008:	25a3      	movs	r5, #163	@ 0xa3
 802600a:	e793      	b.n	8025f34 <__gethex+0xf8>
 802600c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8026010:	2a2e      	cmp	r2, #46	@ 0x2e
 8026012:	d012      	beq.n	802603a <__gethex+0x1fe>
 8026014:	2b20      	cmp	r3, #32
 8026016:	d104      	bne.n	8026022 <__gethex+0x1e6>
 8026018:	f845 bb04 	str.w	fp, [r5], #4
 802601c:	f04f 0b00 	mov.w	fp, #0
 8026020:	465b      	mov	r3, fp
 8026022:	7830      	ldrb	r0, [r6, #0]
 8026024:	9303      	str	r3, [sp, #12]
 8026026:	f7ff fef3 	bl	8025e10 <__hexdig_fun>
 802602a:	9b03      	ldr	r3, [sp, #12]
 802602c:	f000 000f 	and.w	r0, r0, #15
 8026030:	4098      	lsls	r0, r3
 8026032:	ea4b 0b00 	orr.w	fp, fp, r0
 8026036:	3304      	adds	r3, #4
 8026038:	e7ae      	b.n	8025f98 <__gethex+0x15c>
 802603a:	45b1      	cmp	r9, r6
 802603c:	d8ea      	bhi.n	8026014 <__gethex+0x1d8>
 802603e:	492b      	ldr	r1, [pc, #172]	@ (80260ec <__gethex+0x2b0>)
 8026040:	9303      	str	r3, [sp, #12]
 8026042:	2201      	movs	r2, #1
 8026044:	4630      	mov	r0, r6
 8026046:	f7fe fe96 	bl	8024d76 <strncmp>
 802604a:	9b03      	ldr	r3, [sp, #12]
 802604c:	2800      	cmp	r0, #0
 802604e:	d1e1      	bne.n	8026014 <__gethex+0x1d8>
 8026050:	e7a2      	b.n	8025f98 <__gethex+0x15c>
 8026052:	1ea9      	subs	r1, r5, #2
 8026054:	4620      	mov	r0, r4
 8026056:	f000 fe9a 	bl	8026d8e <__any_on>
 802605a:	2800      	cmp	r0, #0
 802605c:	d0c2      	beq.n	8025fe4 <__gethex+0x1a8>
 802605e:	f04f 0903 	mov.w	r9, #3
 8026062:	e7c1      	b.n	8025fe8 <__gethex+0x1ac>
 8026064:	da09      	bge.n	802607a <__gethex+0x23e>
 8026066:	1b75      	subs	r5, r6, r5
 8026068:	4621      	mov	r1, r4
 802606a:	9801      	ldr	r0, [sp, #4]
 802606c:	462a      	mov	r2, r5
 802606e:	f000 fc55 	bl	802691c <__lshift>
 8026072:	1b7f      	subs	r7, r7, r5
 8026074:	4604      	mov	r4, r0
 8026076:	f100 0a14 	add.w	sl, r0, #20
 802607a:	f04f 0900 	mov.w	r9, #0
 802607e:	e7b8      	b.n	8025ff2 <__gethex+0x1b6>
 8026080:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8026084:	42bd      	cmp	r5, r7
 8026086:	dd6f      	ble.n	8026168 <__gethex+0x32c>
 8026088:	1bed      	subs	r5, r5, r7
 802608a:	42ae      	cmp	r6, r5
 802608c:	dc34      	bgt.n	80260f8 <__gethex+0x2bc>
 802608e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8026092:	2b02      	cmp	r3, #2
 8026094:	d022      	beq.n	80260dc <__gethex+0x2a0>
 8026096:	2b03      	cmp	r3, #3
 8026098:	d024      	beq.n	80260e4 <__gethex+0x2a8>
 802609a:	2b01      	cmp	r3, #1
 802609c:	d115      	bne.n	80260ca <__gethex+0x28e>
 802609e:	42ae      	cmp	r6, r5
 80260a0:	d113      	bne.n	80260ca <__gethex+0x28e>
 80260a2:	2e01      	cmp	r6, #1
 80260a4:	d10b      	bne.n	80260be <__gethex+0x282>
 80260a6:	9a02      	ldr	r2, [sp, #8]
 80260a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80260ac:	6013      	str	r3, [r2, #0]
 80260ae:	2301      	movs	r3, #1
 80260b0:	6123      	str	r3, [r4, #16]
 80260b2:	f8ca 3000 	str.w	r3, [sl]
 80260b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80260b8:	2562      	movs	r5, #98	@ 0x62
 80260ba:	601c      	str	r4, [r3, #0]
 80260bc:	e73a      	b.n	8025f34 <__gethex+0xf8>
 80260be:	1e71      	subs	r1, r6, #1
 80260c0:	4620      	mov	r0, r4
 80260c2:	f000 fe64 	bl	8026d8e <__any_on>
 80260c6:	2800      	cmp	r0, #0
 80260c8:	d1ed      	bne.n	80260a6 <__gethex+0x26a>
 80260ca:	9801      	ldr	r0, [sp, #4]
 80260cc:	4621      	mov	r1, r4
 80260ce:	f000 fa0d 	bl	80264ec <_Bfree>
 80260d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80260d4:	2300      	movs	r3, #0
 80260d6:	6013      	str	r3, [r2, #0]
 80260d8:	2550      	movs	r5, #80	@ 0x50
 80260da:	e72b      	b.n	8025f34 <__gethex+0xf8>
 80260dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80260de:	2b00      	cmp	r3, #0
 80260e0:	d1f3      	bne.n	80260ca <__gethex+0x28e>
 80260e2:	e7e0      	b.n	80260a6 <__gethex+0x26a>
 80260e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80260e6:	2b00      	cmp	r3, #0
 80260e8:	d1dd      	bne.n	80260a6 <__gethex+0x26a>
 80260ea:	e7ee      	b.n	80260ca <__gethex+0x28e>
 80260ec:	0803166c 	.word	0x0803166c
 80260f0:	080318d8 	.word	0x080318d8
 80260f4:	080318e9 	.word	0x080318e9
 80260f8:	1e6f      	subs	r7, r5, #1
 80260fa:	f1b9 0f00 	cmp.w	r9, #0
 80260fe:	d130      	bne.n	8026162 <__gethex+0x326>
 8026100:	b127      	cbz	r7, 802610c <__gethex+0x2d0>
 8026102:	4639      	mov	r1, r7
 8026104:	4620      	mov	r0, r4
 8026106:	f000 fe42 	bl	8026d8e <__any_on>
 802610a:	4681      	mov	r9, r0
 802610c:	117a      	asrs	r2, r7, #5
 802610e:	2301      	movs	r3, #1
 8026110:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8026114:	f007 071f 	and.w	r7, r7, #31
 8026118:	40bb      	lsls	r3, r7
 802611a:	4213      	tst	r3, r2
 802611c:	4629      	mov	r1, r5
 802611e:	4620      	mov	r0, r4
 8026120:	bf18      	it	ne
 8026122:	f049 0902 	orrne.w	r9, r9, #2
 8026126:	f7ff fe21 	bl	8025d6c <rshift>
 802612a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 802612e:	1b76      	subs	r6, r6, r5
 8026130:	2502      	movs	r5, #2
 8026132:	f1b9 0f00 	cmp.w	r9, #0
 8026136:	d047      	beq.n	80261c8 <__gethex+0x38c>
 8026138:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802613c:	2b02      	cmp	r3, #2
 802613e:	d015      	beq.n	802616c <__gethex+0x330>
 8026140:	2b03      	cmp	r3, #3
 8026142:	d017      	beq.n	8026174 <__gethex+0x338>
 8026144:	2b01      	cmp	r3, #1
 8026146:	d109      	bne.n	802615c <__gethex+0x320>
 8026148:	f019 0f02 	tst.w	r9, #2
 802614c:	d006      	beq.n	802615c <__gethex+0x320>
 802614e:	f8da 3000 	ldr.w	r3, [sl]
 8026152:	ea49 0903 	orr.w	r9, r9, r3
 8026156:	f019 0f01 	tst.w	r9, #1
 802615a:	d10e      	bne.n	802617a <__gethex+0x33e>
 802615c:	f045 0510 	orr.w	r5, r5, #16
 8026160:	e032      	b.n	80261c8 <__gethex+0x38c>
 8026162:	f04f 0901 	mov.w	r9, #1
 8026166:	e7d1      	b.n	802610c <__gethex+0x2d0>
 8026168:	2501      	movs	r5, #1
 802616a:	e7e2      	b.n	8026132 <__gethex+0x2f6>
 802616c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802616e:	f1c3 0301 	rsb	r3, r3, #1
 8026172:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026176:	2b00      	cmp	r3, #0
 8026178:	d0f0      	beq.n	802615c <__gethex+0x320>
 802617a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802617e:	f104 0314 	add.w	r3, r4, #20
 8026182:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8026186:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802618a:	f04f 0c00 	mov.w	ip, #0
 802618e:	4618      	mov	r0, r3
 8026190:	f853 2b04 	ldr.w	r2, [r3], #4
 8026194:	f1b2 3fff 	cmp.w	r2, #4294967295
 8026198:	d01b      	beq.n	80261d2 <__gethex+0x396>
 802619a:	3201      	adds	r2, #1
 802619c:	6002      	str	r2, [r0, #0]
 802619e:	2d02      	cmp	r5, #2
 80261a0:	f104 0314 	add.w	r3, r4, #20
 80261a4:	d13c      	bne.n	8026220 <__gethex+0x3e4>
 80261a6:	f8d8 2000 	ldr.w	r2, [r8]
 80261aa:	3a01      	subs	r2, #1
 80261ac:	42b2      	cmp	r2, r6
 80261ae:	d109      	bne.n	80261c4 <__gethex+0x388>
 80261b0:	1171      	asrs	r1, r6, #5
 80261b2:	2201      	movs	r2, #1
 80261b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80261b8:	f006 061f 	and.w	r6, r6, #31
 80261bc:	fa02 f606 	lsl.w	r6, r2, r6
 80261c0:	421e      	tst	r6, r3
 80261c2:	d13a      	bne.n	802623a <__gethex+0x3fe>
 80261c4:	f045 0520 	orr.w	r5, r5, #32
 80261c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80261ca:	601c      	str	r4, [r3, #0]
 80261cc:	9b02      	ldr	r3, [sp, #8]
 80261ce:	601f      	str	r7, [r3, #0]
 80261d0:	e6b0      	b.n	8025f34 <__gethex+0xf8>
 80261d2:	4299      	cmp	r1, r3
 80261d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80261d8:	d8d9      	bhi.n	802618e <__gethex+0x352>
 80261da:	68a3      	ldr	r3, [r4, #8]
 80261dc:	459b      	cmp	fp, r3
 80261de:	db17      	blt.n	8026210 <__gethex+0x3d4>
 80261e0:	6861      	ldr	r1, [r4, #4]
 80261e2:	9801      	ldr	r0, [sp, #4]
 80261e4:	3101      	adds	r1, #1
 80261e6:	f000 f941 	bl	802646c <_Balloc>
 80261ea:	4681      	mov	r9, r0
 80261ec:	b918      	cbnz	r0, 80261f6 <__gethex+0x3ba>
 80261ee:	4b1a      	ldr	r3, [pc, #104]	@ (8026258 <__gethex+0x41c>)
 80261f0:	4602      	mov	r2, r0
 80261f2:	2184      	movs	r1, #132	@ 0x84
 80261f4:	e6c5      	b.n	8025f82 <__gethex+0x146>
 80261f6:	6922      	ldr	r2, [r4, #16]
 80261f8:	3202      	adds	r2, #2
 80261fa:	f104 010c 	add.w	r1, r4, #12
 80261fe:	0092      	lsls	r2, r2, #2
 8026200:	300c      	adds	r0, #12
 8026202:	f7fe fef4 	bl	8024fee <memcpy>
 8026206:	4621      	mov	r1, r4
 8026208:	9801      	ldr	r0, [sp, #4]
 802620a:	f000 f96f 	bl	80264ec <_Bfree>
 802620e:	464c      	mov	r4, r9
 8026210:	6923      	ldr	r3, [r4, #16]
 8026212:	1c5a      	adds	r2, r3, #1
 8026214:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8026218:	6122      	str	r2, [r4, #16]
 802621a:	2201      	movs	r2, #1
 802621c:	615a      	str	r2, [r3, #20]
 802621e:	e7be      	b.n	802619e <__gethex+0x362>
 8026220:	6922      	ldr	r2, [r4, #16]
 8026222:	455a      	cmp	r2, fp
 8026224:	dd0b      	ble.n	802623e <__gethex+0x402>
 8026226:	2101      	movs	r1, #1
 8026228:	4620      	mov	r0, r4
 802622a:	f7ff fd9f 	bl	8025d6c <rshift>
 802622e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8026232:	3701      	adds	r7, #1
 8026234:	42bb      	cmp	r3, r7
 8026236:	f6ff aee0 	blt.w	8025ffa <__gethex+0x1be>
 802623a:	2501      	movs	r5, #1
 802623c:	e7c2      	b.n	80261c4 <__gethex+0x388>
 802623e:	f016 061f 	ands.w	r6, r6, #31
 8026242:	d0fa      	beq.n	802623a <__gethex+0x3fe>
 8026244:	4453      	add	r3, sl
 8026246:	f1c6 0620 	rsb	r6, r6, #32
 802624a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802624e:	f000 f9ff 	bl	8026650 <__hi0bits>
 8026252:	42b0      	cmp	r0, r6
 8026254:	dbe7      	blt.n	8026226 <__gethex+0x3ea>
 8026256:	e7f0      	b.n	802623a <__gethex+0x3fe>
 8026258:	080318d8 	.word	0x080318d8

0802625c <L_shift>:
 802625c:	f1c2 0208 	rsb	r2, r2, #8
 8026260:	0092      	lsls	r2, r2, #2
 8026262:	b570      	push	{r4, r5, r6, lr}
 8026264:	f1c2 0620 	rsb	r6, r2, #32
 8026268:	6843      	ldr	r3, [r0, #4]
 802626a:	6804      	ldr	r4, [r0, #0]
 802626c:	fa03 f506 	lsl.w	r5, r3, r6
 8026270:	432c      	orrs	r4, r5
 8026272:	40d3      	lsrs	r3, r2
 8026274:	6004      	str	r4, [r0, #0]
 8026276:	f840 3f04 	str.w	r3, [r0, #4]!
 802627a:	4288      	cmp	r0, r1
 802627c:	d3f4      	bcc.n	8026268 <L_shift+0xc>
 802627e:	bd70      	pop	{r4, r5, r6, pc}

08026280 <__match>:
 8026280:	b530      	push	{r4, r5, lr}
 8026282:	6803      	ldr	r3, [r0, #0]
 8026284:	3301      	adds	r3, #1
 8026286:	f811 4b01 	ldrb.w	r4, [r1], #1
 802628a:	b914      	cbnz	r4, 8026292 <__match+0x12>
 802628c:	6003      	str	r3, [r0, #0]
 802628e:	2001      	movs	r0, #1
 8026290:	bd30      	pop	{r4, r5, pc}
 8026292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026296:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 802629a:	2d19      	cmp	r5, #25
 802629c:	bf98      	it	ls
 802629e:	3220      	addls	r2, #32
 80262a0:	42a2      	cmp	r2, r4
 80262a2:	d0f0      	beq.n	8026286 <__match+0x6>
 80262a4:	2000      	movs	r0, #0
 80262a6:	e7f3      	b.n	8026290 <__match+0x10>

080262a8 <__hexnan>:
 80262a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80262ac:	680b      	ldr	r3, [r1, #0]
 80262ae:	6801      	ldr	r1, [r0, #0]
 80262b0:	115e      	asrs	r6, r3, #5
 80262b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80262b6:	f013 031f 	ands.w	r3, r3, #31
 80262ba:	b087      	sub	sp, #28
 80262bc:	bf18      	it	ne
 80262be:	3604      	addne	r6, #4
 80262c0:	2500      	movs	r5, #0
 80262c2:	1f37      	subs	r7, r6, #4
 80262c4:	4682      	mov	sl, r0
 80262c6:	4690      	mov	r8, r2
 80262c8:	9301      	str	r3, [sp, #4]
 80262ca:	f846 5c04 	str.w	r5, [r6, #-4]
 80262ce:	46b9      	mov	r9, r7
 80262d0:	463c      	mov	r4, r7
 80262d2:	9502      	str	r5, [sp, #8]
 80262d4:	46ab      	mov	fp, r5
 80262d6:	784a      	ldrb	r2, [r1, #1]
 80262d8:	1c4b      	adds	r3, r1, #1
 80262da:	9303      	str	r3, [sp, #12]
 80262dc:	b342      	cbz	r2, 8026330 <__hexnan+0x88>
 80262de:	4610      	mov	r0, r2
 80262e0:	9105      	str	r1, [sp, #20]
 80262e2:	9204      	str	r2, [sp, #16]
 80262e4:	f7ff fd94 	bl	8025e10 <__hexdig_fun>
 80262e8:	2800      	cmp	r0, #0
 80262ea:	d151      	bne.n	8026390 <__hexnan+0xe8>
 80262ec:	9a04      	ldr	r2, [sp, #16]
 80262ee:	9905      	ldr	r1, [sp, #20]
 80262f0:	2a20      	cmp	r2, #32
 80262f2:	d818      	bhi.n	8026326 <__hexnan+0x7e>
 80262f4:	9b02      	ldr	r3, [sp, #8]
 80262f6:	459b      	cmp	fp, r3
 80262f8:	dd13      	ble.n	8026322 <__hexnan+0x7a>
 80262fa:	454c      	cmp	r4, r9
 80262fc:	d206      	bcs.n	802630c <__hexnan+0x64>
 80262fe:	2d07      	cmp	r5, #7
 8026300:	dc04      	bgt.n	802630c <__hexnan+0x64>
 8026302:	462a      	mov	r2, r5
 8026304:	4649      	mov	r1, r9
 8026306:	4620      	mov	r0, r4
 8026308:	f7ff ffa8 	bl	802625c <L_shift>
 802630c:	4544      	cmp	r4, r8
 802630e:	d952      	bls.n	80263b6 <__hexnan+0x10e>
 8026310:	2300      	movs	r3, #0
 8026312:	f1a4 0904 	sub.w	r9, r4, #4
 8026316:	f844 3c04 	str.w	r3, [r4, #-4]
 802631a:	f8cd b008 	str.w	fp, [sp, #8]
 802631e:	464c      	mov	r4, r9
 8026320:	461d      	mov	r5, r3
 8026322:	9903      	ldr	r1, [sp, #12]
 8026324:	e7d7      	b.n	80262d6 <__hexnan+0x2e>
 8026326:	2a29      	cmp	r2, #41	@ 0x29
 8026328:	d157      	bne.n	80263da <__hexnan+0x132>
 802632a:	3102      	adds	r1, #2
 802632c:	f8ca 1000 	str.w	r1, [sl]
 8026330:	f1bb 0f00 	cmp.w	fp, #0
 8026334:	d051      	beq.n	80263da <__hexnan+0x132>
 8026336:	454c      	cmp	r4, r9
 8026338:	d206      	bcs.n	8026348 <__hexnan+0xa0>
 802633a:	2d07      	cmp	r5, #7
 802633c:	dc04      	bgt.n	8026348 <__hexnan+0xa0>
 802633e:	462a      	mov	r2, r5
 8026340:	4649      	mov	r1, r9
 8026342:	4620      	mov	r0, r4
 8026344:	f7ff ff8a 	bl	802625c <L_shift>
 8026348:	4544      	cmp	r4, r8
 802634a:	d936      	bls.n	80263ba <__hexnan+0x112>
 802634c:	f1a8 0204 	sub.w	r2, r8, #4
 8026350:	4623      	mov	r3, r4
 8026352:	f853 1b04 	ldr.w	r1, [r3], #4
 8026356:	f842 1f04 	str.w	r1, [r2, #4]!
 802635a:	429f      	cmp	r7, r3
 802635c:	d2f9      	bcs.n	8026352 <__hexnan+0xaa>
 802635e:	1b3b      	subs	r3, r7, r4
 8026360:	f023 0303 	bic.w	r3, r3, #3
 8026364:	3304      	adds	r3, #4
 8026366:	3401      	adds	r4, #1
 8026368:	3e03      	subs	r6, #3
 802636a:	42b4      	cmp	r4, r6
 802636c:	bf88      	it	hi
 802636e:	2304      	movhi	r3, #4
 8026370:	4443      	add	r3, r8
 8026372:	2200      	movs	r2, #0
 8026374:	f843 2b04 	str.w	r2, [r3], #4
 8026378:	429f      	cmp	r7, r3
 802637a:	d2fb      	bcs.n	8026374 <__hexnan+0xcc>
 802637c:	683b      	ldr	r3, [r7, #0]
 802637e:	b91b      	cbnz	r3, 8026388 <__hexnan+0xe0>
 8026380:	4547      	cmp	r7, r8
 8026382:	d128      	bne.n	80263d6 <__hexnan+0x12e>
 8026384:	2301      	movs	r3, #1
 8026386:	603b      	str	r3, [r7, #0]
 8026388:	2005      	movs	r0, #5
 802638a:	b007      	add	sp, #28
 802638c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026390:	3501      	adds	r5, #1
 8026392:	2d08      	cmp	r5, #8
 8026394:	f10b 0b01 	add.w	fp, fp, #1
 8026398:	dd06      	ble.n	80263a8 <__hexnan+0x100>
 802639a:	4544      	cmp	r4, r8
 802639c:	d9c1      	bls.n	8026322 <__hexnan+0x7a>
 802639e:	2300      	movs	r3, #0
 80263a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80263a4:	2501      	movs	r5, #1
 80263a6:	3c04      	subs	r4, #4
 80263a8:	6822      	ldr	r2, [r4, #0]
 80263aa:	f000 000f 	and.w	r0, r0, #15
 80263ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80263b2:	6020      	str	r0, [r4, #0]
 80263b4:	e7b5      	b.n	8026322 <__hexnan+0x7a>
 80263b6:	2508      	movs	r5, #8
 80263b8:	e7b3      	b.n	8026322 <__hexnan+0x7a>
 80263ba:	9b01      	ldr	r3, [sp, #4]
 80263bc:	2b00      	cmp	r3, #0
 80263be:	d0dd      	beq.n	802637c <__hexnan+0xd4>
 80263c0:	f1c3 0320 	rsb	r3, r3, #32
 80263c4:	f04f 32ff 	mov.w	r2, #4294967295
 80263c8:	40da      	lsrs	r2, r3
 80263ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80263ce:	4013      	ands	r3, r2
 80263d0:	f846 3c04 	str.w	r3, [r6, #-4]
 80263d4:	e7d2      	b.n	802637c <__hexnan+0xd4>
 80263d6:	3f04      	subs	r7, #4
 80263d8:	e7d0      	b.n	802637c <__hexnan+0xd4>
 80263da:	2004      	movs	r0, #4
 80263dc:	e7d5      	b.n	802638a <__hexnan+0xe2>
	...

080263e0 <_mallinfo_r>:
 80263e0:	b570      	push	{r4, r5, r6, lr}
 80263e2:	4c16      	ldr	r4, [pc, #88]	@ (802643c <_mallinfo_r+0x5c>)
 80263e4:	4605      	mov	r5, r0
 80263e6:	4608      	mov	r0, r1
 80263e8:	460e      	mov	r6, r1
 80263ea:	f7fc fc89 	bl	8022d00 <__malloc_lock>
 80263ee:	6823      	ldr	r3, [r4, #0]
 80263f0:	b14b      	cbz	r3, 8026406 <_mallinfo_r+0x26>
 80263f2:	2100      	movs	r1, #0
 80263f4:	4630      	mov	r0, r6
 80263f6:	f7fe fda3 	bl	8024f40 <_sbrk_r>
 80263fa:	1c42      	adds	r2, r0, #1
 80263fc:	bf18      	it	ne
 80263fe:	6822      	ldrne	r2, [r4, #0]
 8026400:	4603      	mov	r3, r0
 8026402:	bf18      	it	ne
 8026404:	1a83      	subne	r3, r0, r2
 8026406:	4a0e      	ldr	r2, [pc, #56]	@ (8026440 <_mallinfo_r+0x60>)
 8026408:	6811      	ldr	r1, [r2, #0]
 802640a:	2200      	movs	r2, #0
 802640c:	b991      	cbnz	r1, 8026434 <_mallinfo_r+0x54>
 802640e:	4c0d      	ldr	r4, [pc, #52]	@ (8026444 <_mallinfo_r+0x64>)
 8026410:	4630      	mov	r0, r6
 8026412:	6023      	str	r3, [r4, #0]
 8026414:	1a9b      	subs	r3, r3, r2
 8026416:	6222      	str	r2, [r4, #32]
 8026418:	61e3      	str	r3, [r4, #28]
 802641a:	f7fc fc77 	bl	8022d0c <__malloc_unlock>
 802641e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026420:	462e      	mov	r6, r5
 8026422:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8026424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026426:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8026428:	e894 0003 	ldmia.w	r4, {r0, r1}
 802642c:	e886 0003 	stmia.w	r6, {r0, r1}
 8026430:	4628      	mov	r0, r5
 8026432:	bd70      	pop	{r4, r5, r6, pc}
 8026434:	6808      	ldr	r0, [r1, #0]
 8026436:	6849      	ldr	r1, [r1, #4]
 8026438:	4402      	add	r2, r0
 802643a:	e7e7      	b.n	802640c <_mallinfo_r+0x2c>
 802643c:	200030cc 	.word	0x200030cc
 8026440:	200030d0 	.word	0x200030d0
 8026444:	20003218 	.word	0x20003218

08026448 <__ascii_mbtowc>:
 8026448:	b082      	sub	sp, #8
 802644a:	b901      	cbnz	r1, 802644e <__ascii_mbtowc+0x6>
 802644c:	a901      	add	r1, sp, #4
 802644e:	b142      	cbz	r2, 8026462 <__ascii_mbtowc+0x1a>
 8026450:	b14b      	cbz	r3, 8026466 <__ascii_mbtowc+0x1e>
 8026452:	7813      	ldrb	r3, [r2, #0]
 8026454:	600b      	str	r3, [r1, #0]
 8026456:	7812      	ldrb	r2, [r2, #0]
 8026458:	1e10      	subs	r0, r2, #0
 802645a:	bf18      	it	ne
 802645c:	2001      	movne	r0, #1
 802645e:	b002      	add	sp, #8
 8026460:	4770      	bx	lr
 8026462:	4610      	mov	r0, r2
 8026464:	e7fb      	b.n	802645e <__ascii_mbtowc+0x16>
 8026466:	f06f 0001 	mvn.w	r0, #1
 802646a:	e7f8      	b.n	802645e <__ascii_mbtowc+0x16>

0802646c <_Balloc>:
 802646c:	b570      	push	{r4, r5, r6, lr}
 802646e:	69c6      	ldr	r6, [r0, #28]
 8026470:	4604      	mov	r4, r0
 8026472:	460d      	mov	r5, r1
 8026474:	b976      	cbnz	r6, 8026494 <_Balloc+0x28>
 8026476:	2010      	movs	r0, #16
 8026478:	f7fc fb90 	bl	8022b9c <malloc>
 802647c:	4602      	mov	r2, r0
 802647e:	61e0      	str	r0, [r4, #28]
 8026480:	b920      	cbnz	r0, 802648c <_Balloc+0x20>
 8026482:	4b18      	ldr	r3, [pc, #96]	@ (80264e4 <_Balloc+0x78>)
 8026484:	4818      	ldr	r0, [pc, #96]	@ (80264e8 <_Balloc+0x7c>)
 8026486:	216b      	movs	r1, #107	@ 0x6b
 8026488:	f7fc fb4e 	bl	8022b28 <__assert_func>
 802648c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026490:	6006      	str	r6, [r0, #0]
 8026492:	60c6      	str	r6, [r0, #12]
 8026494:	69e6      	ldr	r6, [r4, #28]
 8026496:	68f3      	ldr	r3, [r6, #12]
 8026498:	b183      	cbz	r3, 80264bc <_Balloc+0x50>
 802649a:	69e3      	ldr	r3, [r4, #28]
 802649c:	68db      	ldr	r3, [r3, #12]
 802649e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80264a2:	b9b8      	cbnz	r0, 80264d4 <_Balloc+0x68>
 80264a4:	2101      	movs	r1, #1
 80264a6:	fa01 f605 	lsl.w	r6, r1, r5
 80264aa:	1d72      	adds	r2, r6, #5
 80264ac:	0092      	lsls	r2, r2, #2
 80264ae:	4620      	mov	r0, r4
 80264b0:	f7fc fb60 	bl	8022b74 <_calloc_r>
 80264b4:	b160      	cbz	r0, 80264d0 <_Balloc+0x64>
 80264b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80264ba:	e00e      	b.n	80264da <_Balloc+0x6e>
 80264bc:	2221      	movs	r2, #33	@ 0x21
 80264be:	2104      	movs	r1, #4
 80264c0:	4620      	mov	r0, r4
 80264c2:	f7fc fb57 	bl	8022b74 <_calloc_r>
 80264c6:	69e3      	ldr	r3, [r4, #28]
 80264c8:	60f0      	str	r0, [r6, #12]
 80264ca:	68db      	ldr	r3, [r3, #12]
 80264cc:	2b00      	cmp	r3, #0
 80264ce:	d1e4      	bne.n	802649a <_Balloc+0x2e>
 80264d0:	2000      	movs	r0, #0
 80264d2:	bd70      	pop	{r4, r5, r6, pc}
 80264d4:	6802      	ldr	r2, [r0, #0]
 80264d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80264da:	2300      	movs	r3, #0
 80264dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80264e0:	e7f7      	b.n	80264d2 <_Balloc+0x66>
 80264e2:	bf00      	nop
 80264e4:	080317fa 	.word	0x080317fa
 80264e8:	08031949 	.word	0x08031949

080264ec <_Bfree>:
 80264ec:	b570      	push	{r4, r5, r6, lr}
 80264ee:	69c6      	ldr	r6, [r0, #28]
 80264f0:	4605      	mov	r5, r0
 80264f2:	460c      	mov	r4, r1
 80264f4:	b976      	cbnz	r6, 8026514 <_Bfree+0x28>
 80264f6:	2010      	movs	r0, #16
 80264f8:	f7fc fb50 	bl	8022b9c <malloc>
 80264fc:	4602      	mov	r2, r0
 80264fe:	61e8      	str	r0, [r5, #28]
 8026500:	b920      	cbnz	r0, 802650c <_Bfree+0x20>
 8026502:	4b09      	ldr	r3, [pc, #36]	@ (8026528 <_Bfree+0x3c>)
 8026504:	4809      	ldr	r0, [pc, #36]	@ (802652c <_Bfree+0x40>)
 8026506:	218f      	movs	r1, #143	@ 0x8f
 8026508:	f7fc fb0e 	bl	8022b28 <__assert_func>
 802650c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026510:	6006      	str	r6, [r0, #0]
 8026512:	60c6      	str	r6, [r0, #12]
 8026514:	b13c      	cbz	r4, 8026526 <_Bfree+0x3a>
 8026516:	69eb      	ldr	r3, [r5, #28]
 8026518:	6862      	ldr	r2, [r4, #4]
 802651a:	68db      	ldr	r3, [r3, #12]
 802651c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026520:	6021      	str	r1, [r4, #0]
 8026522:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8026526:	bd70      	pop	{r4, r5, r6, pc}
 8026528:	080317fa 	.word	0x080317fa
 802652c:	08031949 	.word	0x08031949

08026530 <__multadd>:
 8026530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026534:	690d      	ldr	r5, [r1, #16]
 8026536:	4607      	mov	r7, r0
 8026538:	460c      	mov	r4, r1
 802653a:	461e      	mov	r6, r3
 802653c:	f101 0c14 	add.w	ip, r1, #20
 8026540:	2000      	movs	r0, #0
 8026542:	f8dc 3000 	ldr.w	r3, [ip]
 8026546:	b299      	uxth	r1, r3
 8026548:	fb02 6101 	mla	r1, r2, r1, r6
 802654c:	0c1e      	lsrs	r6, r3, #16
 802654e:	0c0b      	lsrs	r3, r1, #16
 8026550:	fb02 3306 	mla	r3, r2, r6, r3
 8026554:	b289      	uxth	r1, r1
 8026556:	3001      	adds	r0, #1
 8026558:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802655c:	4285      	cmp	r5, r0
 802655e:	f84c 1b04 	str.w	r1, [ip], #4
 8026562:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8026566:	dcec      	bgt.n	8026542 <__multadd+0x12>
 8026568:	b30e      	cbz	r6, 80265ae <__multadd+0x7e>
 802656a:	68a3      	ldr	r3, [r4, #8]
 802656c:	42ab      	cmp	r3, r5
 802656e:	dc19      	bgt.n	80265a4 <__multadd+0x74>
 8026570:	6861      	ldr	r1, [r4, #4]
 8026572:	4638      	mov	r0, r7
 8026574:	3101      	adds	r1, #1
 8026576:	f7ff ff79 	bl	802646c <_Balloc>
 802657a:	4680      	mov	r8, r0
 802657c:	b928      	cbnz	r0, 802658a <__multadd+0x5a>
 802657e:	4602      	mov	r2, r0
 8026580:	4b0c      	ldr	r3, [pc, #48]	@ (80265b4 <__multadd+0x84>)
 8026582:	480d      	ldr	r0, [pc, #52]	@ (80265b8 <__multadd+0x88>)
 8026584:	21ba      	movs	r1, #186	@ 0xba
 8026586:	f7fc facf 	bl	8022b28 <__assert_func>
 802658a:	6922      	ldr	r2, [r4, #16]
 802658c:	3202      	adds	r2, #2
 802658e:	f104 010c 	add.w	r1, r4, #12
 8026592:	0092      	lsls	r2, r2, #2
 8026594:	300c      	adds	r0, #12
 8026596:	f7fe fd2a 	bl	8024fee <memcpy>
 802659a:	4621      	mov	r1, r4
 802659c:	4638      	mov	r0, r7
 802659e:	f7ff ffa5 	bl	80264ec <_Bfree>
 80265a2:	4644      	mov	r4, r8
 80265a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80265a8:	3501      	adds	r5, #1
 80265aa:	615e      	str	r6, [r3, #20]
 80265ac:	6125      	str	r5, [r4, #16]
 80265ae:	4620      	mov	r0, r4
 80265b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80265b4:	080318d8 	.word	0x080318d8
 80265b8:	08031949 	.word	0x08031949

080265bc <__s2b>:
 80265bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80265c0:	460c      	mov	r4, r1
 80265c2:	4615      	mov	r5, r2
 80265c4:	461f      	mov	r7, r3
 80265c6:	2209      	movs	r2, #9
 80265c8:	3308      	adds	r3, #8
 80265ca:	4606      	mov	r6, r0
 80265cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80265d0:	2100      	movs	r1, #0
 80265d2:	2201      	movs	r2, #1
 80265d4:	429a      	cmp	r2, r3
 80265d6:	db09      	blt.n	80265ec <__s2b+0x30>
 80265d8:	4630      	mov	r0, r6
 80265da:	f7ff ff47 	bl	802646c <_Balloc>
 80265de:	b940      	cbnz	r0, 80265f2 <__s2b+0x36>
 80265e0:	4602      	mov	r2, r0
 80265e2:	4b19      	ldr	r3, [pc, #100]	@ (8026648 <__s2b+0x8c>)
 80265e4:	4819      	ldr	r0, [pc, #100]	@ (802664c <__s2b+0x90>)
 80265e6:	21d3      	movs	r1, #211	@ 0xd3
 80265e8:	f7fc fa9e 	bl	8022b28 <__assert_func>
 80265ec:	0052      	lsls	r2, r2, #1
 80265ee:	3101      	adds	r1, #1
 80265f0:	e7f0      	b.n	80265d4 <__s2b+0x18>
 80265f2:	9b08      	ldr	r3, [sp, #32]
 80265f4:	6143      	str	r3, [r0, #20]
 80265f6:	2d09      	cmp	r5, #9
 80265f8:	f04f 0301 	mov.w	r3, #1
 80265fc:	6103      	str	r3, [r0, #16]
 80265fe:	dd16      	ble.n	802662e <__s2b+0x72>
 8026600:	f104 0909 	add.w	r9, r4, #9
 8026604:	46c8      	mov	r8, r9
 8026606:	442c      	add	r4, r5
 8026608:	f818 3b01 	ldrb.w	r3, [r8], #1
 802660c:	4601      	mov	r1, r0
 802660e:	3b30      	subs	r3, #48	@ 0x30
 8026610:	220a      	movs	r2, #10
 8026612:	4630      	mov	r0, r6
 8026614:	f7ff ff8c 	bl	8026530 <__multadd>
 8026618:	45a0      	cmp	r8, r4
 802661a:	d1f5      	bne.n	8026608 <__s2b+0x4c>
 802661c:	f1a5 0408 	sub.w	r4, r5, #8
 8026620:	444c      	add	r4, r9
 8026622:	1b2d      	subs	r5, r5, r4
 8026624:	1963      	adds	r3, r4, r5
 8026626:	42bb      	cmp	r3, r7
 8026628:	db04      	blt.n	8026634 <__s2b+0x78>
 802662a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802662e:	340a      	adds	r4, #10
 8026630:	2509      	movs	r5, #9
 8026632:	e7f6      	b.n	8026622 <__s2b+0x66>
 8026634:	f814 3b01 	ldrb.w	r3, [r4], #1
 8026638:	4601      	mov	r1, r0
 802663a:	3b30      	subs	r3, #48	@ 0x30
 802663c:	220a      	movs	r2, #10
 802663e:	4630      	mov	r0, r6
 8026640:	f7ff ff76 	bl	8026530 <__multadd>
 8026644:	e7ee      	b.n	8026624 <__s2b+0x68>
 8026646:	bf00      	nop
 8026648:	080318d8 	.word	0x080318d8
 802664c:	08031949 	.word	0x08031949

08026650 <__hi0bits>:
 8026650:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8026654:	4603      	mov	r3, r0
 8026656:	bf36      	itet	cc
 8026658:	0403      	lslcc	r3, r0, #16
 802665a:	2000      	movcs	r0, #0
 802665c:	2010      	movcc	r0, #16
 802665e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8026662:	bf3c      	itt	cc
 8026664:	021b      	lslcc	r3, r3, #8
 8026666:	3008      	addcc	r0, #8
 8026668:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802666c:	bf3c      	itt	cc
 802666e:	011b      	lslcc	r3, r3, #4
 8026670:	3004      	addcc	r0, #4
 8026672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8026676:	bf3c      	itt	cc
 8026678:	009b      	lslcc	r3, r3, #2
 802667a:	3002      	addcc	r0, #2
 802667c:	2b00      	cmp	r3, #0
 802667e:	db05      	blt.n	802668c <__hi0bits+0x3c>
 8026680:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8026684:	f100 0001 	add.w	r0, r0, #1
 8026688:	bf08      	it	eq
 802668a:	2020      	moveq	r0, #32
 802668c:	4770      	bx	lr

0802668e <__lo0bits>:
 802668e:	6803      	ldr	r3, [r0, #0]
 8026690:	4602      	mov	r2, r0
 8026692:	f013 0007 	ands.w	r0, r3, #7
 8026696:	d00b      	beq.n	80266b0 <__lo0bits+0x22>
 8026698:	07d9      	lsls	r1, r3, #31
 802669a:	d421      	bmi.n	80266e0 <__lo0bits+0x52>
 802669c:	0798      	lsls	r0, r3, #30
 802669e:	bf49      	itett	mi
 80266a0:	085b      	lsrmi	r3, r3, #1
 80266a2:	089b      	lsrpl	r3, r3, #2
 80266a4:	2001      	movmi	r0, #1
 80266a6:	6013      	strmi	r3, [r2, #0]
 80266a8:	bf5c      	itt	pl
 80266aa:	6013      	strpl	r3, [r2, #0]
 80266ac:	2002      	movpl	r0, #2
 80266ae:	4770      	bx	lr
 80266b0:	b299      	uxth	r1, r3
 80266b2:	b909      	cbnz	r1, 80266b8 <__lo0bits+0x2a>
 80266b4:	0c1b      	lsrs	r3, r3, #16
 80266b6:	2010      	movs	r0, #16
 80266b8:	b2d9      	uxtb	r1, r3
 80266ba:	b909      	cbnz	r1, 80266c0 <__lo0bits+0x32>
 80266bc:	3008      	adds	r0, #8
 80266be:	0a1b      	lsrs	r3, r3, #8
 80266c0:	0719      	lsls	r1, r3, #28
 80266c2:	bf04      	itt	eq
 80266c4:	091b      	lsreq	r3, r3, #4
 80266c6:	3004      	addeq	r0, #4
 80266c8:	0799      	lsls	r1, r3, #30
 80266ca:	bf04      	itt	eq
 80266cc:	089b      	lsreq	r3, r3, #2
 80266ce:	3002      	addeq	r0, #2
 80266d0:	07d9      	lsls	r1, r3, #31
 80266d2:	d403      	bmi.n	80266dc <__lo0bits+0x4e>
 80266d4:	085b      	lsrs	r3, r3, #1
 80266d6:	f100 0001 	add.w	r0, r0, #1
 80266da:	d003      	beq.n	80266e4 <__lo0bits+0x56>
 80266dc:	6013      	str	r3, [r2, #0]
 80266de:	4770      	bx	lr
 80266e0:	2000      	movs	r0, #0
 80266e2:	4770      	bx	lr
 80266e4:	2020      	movs	r0, #32
 80266e6:	4770      	bx	lr

080266e8 <__i2b>:
 80266e8:	b510      	push	{r4, lr}
 80266ea:	460c      	mov	r4, r1
 80266ec:	2101      	movs	r1, #1
 80266ee:	f7ff febd 	bl	802646c <_Balloc>
 80266f2:	4602      	mov	r2, r0
 80266f4:	b928      	cbnz	r0, 8026702 <__i2b+0x1a>
 80266f6:	4b05      	ldr	r3, [pc, #20]	@ (802670c <__i2b+0x24>)
 80266f8:	4805      	ldr	r0, [pc, #20]	@ (8026710 <__i2b+0x28>)
 80266fa:	f240 1145 	movw	r1, #325	@ 0x145
 80266fe:	f7fc fa13 	bl	8022b28 <__assert_func>
 8026702:	2301      	movs	r3, #1
 8026704:	6144      	str	r4, [r0, #20]
 8026706:	6103      	str	r3, [r0, #16]
 8026708:	bd10      	pop	{r4, pc}
 802670a:	bf00      	nop
 802670c:	080318d8 	.word	0x080318d8
 8026710:	08031949 	.word	0x08031949

08026714 <__multiply>:
 8026714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026718:	4614      	mov	r4, r2
 802671a:	690a      	ldr	r2, [r1, #16]
 802671c:	6923      	ldr	r3, [r4, #16]
 802671e:	429a      	cmp	r2, r3
 8026720:	bfa8      	it	ge
 8026722:	4623      	movge	r3, r4
 8026724:	460f      	mov	r7, r1
 8026726:	bfa4      	itt	ge
 8026728:	460c      	movge	r4, r1
 802672a:	461f      	movge	r7, r3
 802672c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8026730:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8026734:	68a3      	ldr	r3, [r4, #8]
 8026736:	6861      	ldr	r1, [r4, #4]
 8026738:	eb0a 0609 	add.w	r6, sl, r9
 802673c:	42b3      	cmp	r3, r6
 802673e:	b085      	sub	sp, #20
 8026740:	bfb8      	it	lt
 8026742:	3101      	addlt	r1, #1
 8026744:	f7ff fe92 	bl	802646c <_Balloc>
 8026748:	b930      	cbnz	r0, 8026758 <__multiply+0x44>
 802674a:	4602      	mov	r2, r0
 802674c:	4b44      	ldr	r3, [pc, #272]	@ (8026860 <__multiply+0x14c>)
 802674e:	4845      	ldr	r0, [pc, #276]	@ (8026864 <__multiply+0x150>)
 8026750:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8026754:	f7fc f9e8 	bl	8022b28 <__assert_func>
 8026758:	f100 0514 	add.w	r5, r0, #20
 802675c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8026760:	462b      	mov	r3, r5
 8026762:	2200      	movs	r2, #0
 8026764:	4543      	cmp	r3, r8
 8026766:	d321      	bcc.n	80267ac <__multiply+0x98>
 8026768:	f107 0114 	add.w	r1, r7, #20
 802676c:	f104 0214 	add.w	r2, r4, #20
 8026770:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8026774:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8026778:	9302      	str	r3, [sp, #8]
 802677a:	1b13      	subs	r3, r2, r4
 802677c:	3b15      	subs	r3, #21
 802677e:	f023 0303 	bic.w	r3, r3, #3
 8026782:	3304      	adds	r3, #4
 8026784:	f104 0715 	add.w	r7, r4, #21
 8026788:	42ba      	cmp	r2, r7
 802678a:	bf38      	it	cc
 802678c:	2304      	movcc	r3, #4
 802678e:	9301      	str	r3, [sp, #4]
 8026790:	9b02      	ldr	r3, [sp, #8]
 8026792:	9103      	str	r1, [sp, #12]
 8026794:	428b      	cmp	r3, r1
 8026796:	d80c      	bhi.n	80267b2 <__multiply+0x9e>
 8026798:	2e00      	cmp	r6, #0
 802679a:	dd03      	ble.n	80267a4 <__multiply+0x90>
 802679c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80267a0:	2b00      	cmp	r3, #0
 80267a2:	d05b      	beq.n	802685c <__multiply+0x148>
 80267a4:	6106      	str	r6, [r0, #16]
 80267a6:	b005      	add	sp, #20
 80267a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80267ac:	f843 2b04 	str.w	r2, [r3], #4
 80267b0:	e7d8      	b.n	8026764 <__multiply+0x50>
 80267b2:	f8b1 a000 	ldrh.w	sl, [r1]
 80267b6:	f1ba 0f00 	cmp.w	sl, #0
 80267ba:	d024      	beq.n	8026806 <__multiply+0xf2>
 80267bc:	f104 0e14 	add.w	lr, r4, #20
 80267c0:	46a9      	mov	r9, r5
 80267c2:	f04f 0c00 	mov.w	ip, #0
 80267c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80267ca:	f8d9 3000 	ldr.w	r3, [r9]
 80267ce:	fa1f fb87 	uxth.w	fp, r7
 80267d2:	b29b      	uxth	r3, r3
 80267d4:	fb0a 330b 	mla	r3, sl, fp, r3
 80267d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80267dc:	f8d9 7000 	ldr.w	r7, [r9]
 80267e0:	4463      	add	r3, ip
 80267e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80267e6:	fb0a c70b 	mla	r7, sl, fp, ip
 80267ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80267ee:	b29b      	uxth	r3, r3
 80267f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80267f4:	4572      	cmp	r2, lr
 80267f6:	f849 3b04 	str.w	r3, [r9], #4
 80267fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80267fe:	d8e2      	bhi.n	80267c6 <__multiply+0xb2>
 8026800:	9b01      	ldr	r3, [sp, #4]
 8026802:	f845 c003 	str.w	ip, [r5, r3]
 8026806:	9b03      	ldr	r3, [sp, #12]
 8026808:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802680c:	3104      	adds	r1, #4
 802680e:	f1b9 0f00 	cmp.w	r9, #0
 8026812:	d021      	beq.n	8026858 <__multiply+0x144>
 8026814:	682b      	ldr	r3, [r5, #0]
 8026816:	f104 0c14 	add.w	ip, r4, #20
 802681a:	46ae      	mov	lr, r5
 802681c:	f04f 0a00 	mov.w	sl, #0
 8026820:	f8bc b000 	ldrh.w	fp, [ip]
 8026824:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8026828:	fb09 770b 	mla	r7, r9, fp, r7
 802682c:	4457      	add	r7, sl
 802682e:	b29b      	uxth	r3, r3
 8026830:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8026834:	f84e 3b04 	str.w	r3, [lr], #4
 8026838:	f85c 3b04 	ldr.w	r3, [ip], #4
 802683c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8026840:	f8be 3000 	ldrh.w	r3, [lr]
 8026844:	fb09 330a 	mla	r3, r9, sl, r3
 8026848:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 802684c:	4562      	cmp	r2, ip
 802684e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8026852:	d8e5      	bhi.n	8026820 <__multiply+0x10c>
 8026854:	9f01      	ldr	r7, [sp, #4]
 8026856:	51eb      	str	r3, [r5, r7]
 8026858:	3504      	adds	r5, #4
 802685a:	e799      	b.n	8026790 <__multiply+0x7c>
 802685c:	3e01      	subs	r6, #1
 802685e:	e79b      	b.n	8026798 <__multiply+0x84>
 8026860:	080318d8 	.word	0x080318d8
 8026864:	08031949 	.word	0x08031949

08026868 <__pow5mult>:
 8026868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802686c:	4615      	mov	r5, r2
 802686e:	f012 0203 	ands.w	r2, r2, #3
 8026872:	4607      	mov	r7, r0
 8026874:	460e      	mov	r6, r1
 8026876:	d007      	beq.n	8026888 <__pow5mult+0x20>
 8026878:	4c25      	ldr	r4, [pc, #148]	@ (8026910 <__pow5mult+0xa8>)
 802687a:	3a01      	subs	r2, #1
 802687c:	2300      	movs	r3, #0
 802687e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026882:	f7ff fe55 	bl	8026530 <__multadd>
 8026886:	4606      	mov	r6, r0
 8026888:	10ad      	asrs	r5, r5, #2
 802688a:	d03d      	beq.n	8026908 <__pow5mult+0xa0>
 802688c:	69fc      	ldr	r4, [r7, #28]
 802688e:	b97c      	cbnz	r4, 80268b0 <__pow5mult+0x48>
 8026890:	2010      	movs	r0, #16
 8026892:	f7fc f983 	bl	8022b9c <malloc>
 8026896:	4602      	mov	r2, r0
 8026898:	61f8      	str	r0, [r7, #28]
 802689a:	b928      	cbnz	r0, 80268a8 <__pow5mult+0x40>
 802689c:	4b1d      	ldr	r3, [pc, #116]	@ (8026914 <__pow5mult+0xac>)
 802689e:	481e      	ldr	r0, [pc, #120]	@ (8026918 <__pow5mult+0xb0>)
 80268a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80268a4:	f7fc f940 	bl	8022b28 <__assert_func>
 80268a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80268ac:	6004      	str	r4, [r0, #0]
 80268ae:	60c4      	str	r4, [r0, #12]
 80268b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80268b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80268b8:	b94c      	cbnz	r4, 80268ce <__pow5mult+0x66>
 80268ba:	f240 2171 	movw	r1, #625	@ 0x271
 80268be:	4638      	mov	r0, r7
 80268c0:	f7ff ff12 	bl	80266e8 <__i2b>
 80268c4:	2300      	movs	r3, #0
 80268c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80268ca:	4604      	mov	r4, r0
 80268cc:	6003      	str	r3, [r0, #0]
 80268ce:	f04f 0900 	mov.w	r9, #0
 80268d2:	07eb      	lsls	r3, r5, #31
 80268d4:	d50a      	bpl.n	80268ec <__pow5mult+0x84>
 80268d6:	4631      	mov	r1, r6
 80268d8:	4622      	mov	r2, r4
 80268da:	4638      	mov	r0, r7
 80268dc:	f7ff ff1a 	bl	8026714 <__multiply>
 80268e0:	4631      	mov	r1, r6
 80268e2:	4680      	mov	r8, r0
 80268e4:	4638      	mov	r0, r7
 80268e6:	f7ff fe01 	bl	80264ec <_Bfree>
 80268ea:	4646      	mov	r6, r8
 80268ec:	106d      	asrs	r5, r5, #1
 80268ee:	d00b      	beq.n	8026908 <__pow5mult+0xa0>
 80268f0:	6820      	ldr	r0, [r4, #0]
 80268f2:	b938      	cbnz	r0, 8026904 <__pow5mult+0x9c>
 80268f4:	4622      	mov	r2, r4
 80268f6:	4621      	mov	r1, r4
 80268f8:	4638      	mov	r0, r7
 80268fa:	f7ff ff0b 	bl	8026714 <__multiply>
 80268fe:	6020      	str	r0, [r4, #0]
 8026900:	f8c0 9000 	str.w	r9, [r0]
 8026904:	4604      	mov	r4, r0
 8026906:	e7e4      	b.n	80268d2 <__pow5mult+0x6a>
 8026908:	4630      	mov	r0, r6
 802690a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802690e:	bf00      	nop
 8026910:	080319a4 	.word	0x080319a4
 8026914:	080317fa 	.word	0x080317fa
 8026918:	08031949 	.word	0x08031949

0802691c <__lshift>:
 802691c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026920:	460c      	mov	r4, r1
 8026922:	6849      	ldr	r1, [r1, #4]
 8026924:	6923      	ldr	r3, [r4, #16]
 8026926:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802692a:	68a3      	ldr	r3, [r4, #8]
 802692c:	4607      	mov	r7, r0
 802692e:	4691      	mov	r9, r2
 8026930:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026934:	f108 0601 	add.w	r6, r8, #1
 8026938:	42b3      	cmp	r3, r6
 802693a:	db0b      	blt.n	8026954 <__lshift+0x38>
 802693c:	4638      	mov	r0, r7
 802693e:	f7ff fd95 	bl	802646c <_Balloc>
 8026942:	4605      	mov	r5, r0
 8026944:	b948      	cbnz	r0, 802695a <__lshift+0x3e>
 8026946:	4602      	mov	r2, r0
 8026948:	4b28      	ldr	r3, [pc, #160]	@ (80269ec <__lshift+0xd0>)
 802694a:	4829      	ldr	r0, [pc, #164]	@ (80269f0 <__lshift+0xd4>)
 802694c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8026950:	f7fc f8ea 	bl	8022b28 <__assert_func>
 8026954:	3101      	adds	r1, #1
 8026956:	005b      	lsls	r3, r3, #1
 8026958:	e7ee      	b.n	8026938 <__lshift+0x1c>
 802695a:	2300      	movs	r3, #0
 802695c:	f100 0114 	add.w	r1, r0, #20
 8026960:	f100 0210 	add.w	r2, r0, #16
 8026964:	4618      	mov	r0, r3
 8026966:	4553      	cmp	r3, sl
 8026968:	db33      	blt.n	80269d2 <__lshift+0xb6>
 802696a:	6920      	ldr	r0, [r4, #16]
 802696c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026970:	f104 0314 	add.w	r3, r4, #20
 8026974:	f019 091f 	ands.w	r9, r9, #31
 8026978:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802697c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8026980:	d02b      	beq.n	80269da <__lshift+0xbe>
 8026982:	f1c9 0e20 	rsb	lr, r9, #32
 8026986:	468a      	mov	sl, r1
 8026988:	2200      	movs	r2, #0
 802698a:	6818      	ldr	r0, [r3, #0]
 802698c:	fa00 f009 	lsl.w	r0, r0, r9
 8026990:	4310      	orrs	r0, r2
 8026992:	f84a 0b04 	str.w	r0, [sl], #4
 8026996:	f853 2b04 	ldr.w	r2, [r3], #4
 802699a:	459c      	cmp	ip, r3
 802699c:	fa22 f20e 	lsr.w	r2, r2, lr
 80269a0:	d8f3      	bhi.n	802698a <__lshift+0x6e>
 80269a2:	ebac 0304 	sub.w	r3, ip, r4
 80269a6:	3b15      	subs	r3, #21
 80269a8:	f023 0303 	bic.w	r3, r3, #3
 80269ac:	3304      	adds	r3, #4
 80269ae:	f104 0015 	add.w	r0, r4, #21
 80269b2:	4584      	cmp	ip, r0
 80269b4:	bf38      	it	cc
 80269b6:	2304      	movcc	r3, #4
 80269b8:	50ca      	str	r2, [r1, r3]
 80269ba:	b10a      	cbz	r2, 80269c0 <__lshift+0xa4>
 80269bc:	f108 0602 	add.w	r6, r8, #2
 80269c0:	3e01      	subs	r6, #1
 80269c2:	4638      	mov	r0, r7
 80269c4:	612e      	str	r6, [r5, #16]
 80269c6:	4621      	mov	r1, r4
 80269c8:	f7ff fd90 	bl	80264ec <_Bfree>
 80269cc:	4628      	mov	r0, r5
 80269ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80269d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80269d6:	3301      	adds	r3, #1
 80269d8:	e7c5      	b.n	8026966 <__lshift+0x4a>
 80269da:	3904      	subs	r1, #4
 80269dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80269e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80269e4:	459c      	cmp	ip, r3
 80269e6:	d8f9      	bhi.n	80269dc <__lshift+0xc0>
 80269e8:	e7ea      	b.n	80269c0 <__lshift+0xa4>
 80269ea:	bf00      	nop
 80269ec:	080318d8 	.word	0x080318d8
 80269f0:	08031949 	.word	0x08031949

080269f4 <__mcmp>:
 80269f4:	690a      	ldr	r2, [r1, #16]
 80269f6:	4603      	mov	r3, r0
 80269f8:	6900      	ldr	r0, [r0, #16]
 80269fa:	1a80      	subs	r0, r0, r2
 80269fc:	b530      	push	{r4, r5, lr}
 80269fe:	d10e      	bne.n	8026a1e <__mcmp+0x2a>
 8026a00:	3314      	adds	r3, #20
 8026a02:	3114      	adds	r1, #20
 8026a04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8026a08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8026a0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8026a10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8026a14:	4295      	cmp	r5, r2
 8026a16:	d003      	beq.n	8026a20 <__mcmp+0x2c>
 8026a18:	d205      	bcs.n	8026a26 <__mcmp+0x32>
 8026a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8026a1e:	bd30      	pop	{r4, r5, pc}
 8026a20:	42a3      	cmp	r3, r4
 8026a22:	d3f3      	bcc.n	8026a0c <__mcmp+0x18>
 8026a24:	e7fb      	b.n	8026a1e <__mcmp+0x2a>
 8026a26:	2001      	movs	r0, #1
 8026a28:	e7f9      	b.n	8026a1e <__mcmp+0x2a>
	...

08026a2c <__mdiff>:
 8026a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a30:	4689      	mov	r9, r1
 8026a32:	4606      	mov	r6, r0
 8026a34:	4611      	mov	r1, r2
 8026a36:	4648      	mov	r0, r9
 8026a38:	4614      	mov	r4, r2
 8026a3a:	f7ff ffdb 	bl	80269f4 <__mcmp>
 8026a3e:	1e05      	subs	r5, r0, #0
 8026a40:	d112      	bne.n	8026a68 <__mdiff+0x3c>
 8026a42:	4629      	mov	r1, r5
 8026a44:	4630      	mov	r0, r6
 8026a46:	f7ff fd11 	bl	802646c <_Balloc>
 8026a4a:	4602      	mov	r2, r0
 8026a4c:	b928      	cbnz	r0, 8026a5a <__mdiff+0x2e>
 8026a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8026b4c <__mdiff+0x120>)
 8026a50:	f240 2137 	movw	r1, #567	@ 0x237
 8026a54:	483e      	ldr	r0, [pc, #248]	@ (8026b50 <__mdiff+0x124>)
 8026a56:	f7fc f867 	bl	8022b28 <__assert_func>
 8026a5a:	2301      	movs	r3, #1
 8026a5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8026a60:	4610      	mov	r0, r2
 8026a62:	b003      	add	sp, #12
 8026a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a68:	bfbc      	itt	lt
 8026a6a:	464b      	movlt	r3, r9
 8026a6c:	46a1      	movlt	r9, r4
 8026a6e:	4630      	mov	r0, r6
 8026a70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8026a74:	bfba      	itte	lt
 8026a76:	461c      	movlt	r4, r3
 8026a78:	2501      	movlt	r5, #1
 8026a7a:	2500      	movge	r5, #0
 8026a7c:	f7ff fcf6 	bl	802646c <_Balloc>
 8026a80:	4602      	mov	r2, r0
 8026a82:	b918      	cbnz	r0, 8026a8c <__mdiff+0x60>
 8026a84:	4b31      	ldr	r3, [pc, #196]	@ (8026b4c <__mdiff+0x120>)
 8026a86:	f240 2145 	movw	r1, #581	@ 0x245
 8026a8a:	e7e3      	b.n	8026a54 <__mdiff+0x28>
 8026a8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8026a90:	6926      	ldr	r6, [r4, #16]
 8026a92:	60c5      	str	r5, [r0, #12]
 8026a94:	f109 0310 	add.w	r3, r9, #16
 8026a98:	f109 0514 	add.w	r5, r9, #20
 8026a9c:	f104 0e14 	add.w	lr, r4, #20
 8026aa0:	f100 0b14 	add.w	fp, r0, #20
 8026aa4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8026aa8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8026aac:	9301      	str	r3, [sp, #4]
 8026aae:	46d9      	mov	r9, fp
 8026ab0:	f04f 0c00 	mov.w	ip, #0
 8026ab4:	9b01      	ldr	r3, [sp, #4]
 8026ab6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8026aba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8026abe:	9301      	str	r3, [sp, #4]
 8026ac0:	fa1f f38a 	uxth.w	r3, sl
 8026ac4:	4619      	mov	r1, r3
 8026ac6:	b283      	uxth	r3, r0
 8026ac8:	1acb      	subs	r3, r1, r3
 8026aca:	0c00      	lsrs	r0, r0, #16
 8026acc:	4463      	add	r3, ip
 8026ace:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8026ad2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8026ad6:	b29b      	uxth	r3, r3
 8026ad8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8026adc:	4576      	cmp	r6, lr
 8026ade:	f849 3b04 	str.w	r3, [r9], #4
 8026ae2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026ae6:	d8e5      	bhi.n	8026ab4 <__mdiff+0x88>
 8026ae8:	1b33      	subs	r3, r6, r4
 8026aea:	3b15      	subs	r3, #21
 8026aec:	f023 0303 	bic.w	r3, r3, #3
 8026af0:	3415      	adds	r4, #21
 8026af2:	3304      	adds	r3, #4
 8026af4:	42a6      	cmp	r6, r4
 8026af6:	bf38      	it	cc
 8026af8:	2304      	movcc	r3, #4
 8026afa:	441d      	add	r5, r3
 8026afc:	445b      	add	r3, fp
 8026afe:	461e      	mov	r6, r3
 8026b00:	462c      	mov	r4, r5
 8026b02:	4544      	cmp	r4, r8
 8026b04:	d30e      	bcc.n	8026b24 <__mdiff+0xf8>
 8026b06:	f108 0103 	add.w	r1, r8, #3
 8026b0a:	1b49      	subs	r1, r1, r5
 8026b0c:	f021 0103 	bic.w	r1, r1, #3
 8026b10:	3d03      	subs	r5, #3
 8026b12:	45a8      	cmp	r8, r5
 8026b14:	bf38      	it	cc
 8026b16:	2100      	movcc	r1, #0
 8026b18:	440b      	add	r3, r1
 8026b1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8026b1e:	b191      	cbz	r1, 8026b46 <__mdiff+0x11a>
 8026b20:	6117      	str	r7, [r2, #16]
 8026b22:	e79d      	b.n	8026a60 <__mdiff+0x34>
 8026b24:	f854 1b04 	ldr.w	r1, [r4], #4
 8026b28:	46e6      	mov	lr, ip
 8026b2a:	0c08      	lsrs	r0, r1, #16
 8026b2c:	fa1c fc81 	uxtah	ip, ip, r1
 8026b30:	4471      	add	r1, lr
 8026b32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8026b36:	b289      	uxth	r1, r1
 8026b38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8026b3c:	f846 1b04 	str.w	r1, [r6], #4
 8026b40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026b44:	e7dd      	b.n	8026b02 <__mdiff+0xd6>
 8026b46:	3f01      	subs	r7, #1
 8026b48:	e7e7      	b.n	8026b1a <__mdiff+0xee>
 8026b4a:	bf00      	nop
 8026b4c:	080318d8 	.word	0x080318d8
 8026b50:	08031949 	.word	0x08031949

08026b54 <__ulp>:
 8026b54:	b082      	sub	sp, #8
 8026b56:	ed8d 0b00 	vstr	d0, [sp]
 8026b5a:	9a01      	ldr	r2, [sp, #4]
 8026b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8026b9c <__ulp+0x48>)
 8026b5e:	4013      	ands	r3, r2
 8026b60:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8026b64:	2b00      	cmp	r3, #0
 8026b66:	dc08      	bgt.n	8026b7a <__ulp+0x26>
 8026b68:	425b      	negs	r3, r3
 8026b6a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8026b6e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8026b72:	da04      	bge.n	8026b7e <__ulp+0x2a>
 8026b74:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8026b78:	4113      	asrs	r3, r2
 8026b7a:	2200      	movs	r2, #0
 8026b7c:	e008      	b.n	8026b90 <__ulp+0x3c>
 8026b7e:	f1a2 0314 	sub.w	r3, r2, #20
 8026b82:	2b1e      	cmp	r3, #30
 8026b84:	bfda      	itte	le
 8026b86:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8026b8a:	40da      	lsrle	r2, r3
 8026b8c:	2201      	movgt	r2, #1
 8026b8e:	2300      	movs	r3, #0
 8026b90:	4619      	mov	r1, r3
 8026b92:	4610      	mov	r0, r2
 8026b94:	ec41 0b10 	vmov	d0, r0, r1
 8026b98:	b002      	add	sp, #8
 8026b9a:	4770      	bx	lr
 8026b9c:	7ff00000 	.word	0x7ff00000

08026ba0 <__b2d>:
 8026ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026ba4:	6906      	ldr	r6, [r0, #16]
 8026ba6:	f100 0814 	add.w	r8, r0, #20
 8026baa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8026bae:	1f37      	subs	r7, r6, #4
 8026bb0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8026bb4:	4610      	mov	r0, r2
 8026bb6:	f7ff fd4b 	bl	8026650 <__hi0bits>
 8026bba:	f1c0 0320 	rsb	r3, r0, #32
 8026bbe:	280a      	cmp	r0, #10
 8026bc0:	600b      	str	r3, [r1, #0]
 8026bc2:	491b      	ldr	r1, [pc, #108]	@ (8026c30 <__b2d+0x90>)
 8026bc4:	dc15      	bgt.n	8026bf2 <__b2d+0x52>
 8026bc6:	f1c0 0c0b 	rsb	ip, r0, #11
 8026bca:	fa22 f30c 	lsr.w	r3, r2, ip
 8026bce:	45b8      	cmp	r8, r7
 8026bd0:	ea43 0501 	orr.w	r5, r3, r1
 8026bd4:	bf34      	ite	cc
 8026bd6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8026bda:	2300      	movcs	r3, #0
 8026bdc:	3015      	adds	r0, #21
 8026bde:	fa02 f000 	lsl.w	r0, r2, r0
 8026be2:	fa23 f30c 	lsr.w	r3, r3, ip
 8026be6:	4303      	orrs	r3, r0
 8026be8:	461c      	mov	r4, r3
 8026bea:	ec45 4b10 	vmov	d0, r4, r5
 8026bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026bf2:	45b8      	cmp	r8, r7
 8026bf4:	bf3a      	itte	cc
 8026bf6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8026bfa:	f1a6 0708 	subcc.w	r7, r6, #8
 8026bfe:	2300      	movcs	r3, #0
 8026c00:	380b      	subs	r0, #11
 8026c02:	d012      	beq.n	8026c2a <__b2d+0x8a>
 8026c04:	f1c0 0120 	rsb	r1, r0, #32
 8026c08:	fa23 f401 	lsr.w	r4, r3, r1
 8026c0c:	4082      	lsls	r2, r0
 8026c0e:	4322      	orrs	r2, r4
 8026c10:	4547      	cmp	r7, r8
 8026c12:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8026c16:	bf8c      	ite	hi
 8026c18:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8026c1c:	2200      	movls	r2, #0
 8026c1e:	4083      	lsls	r3, r0
 8026c20:	40ca      	lsrs	r2, r1
 8026c22:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8026c26:	4313      	orrs	r3, r2
 8026c28:	e7de      	b.n	8026be8 <__b2d+0x48>
 8026c2a:	ea42 0501 	orr.w	r5, r2, r1
 8026c2e:	e7db      	b.n	8026be8 <__b2d+0x48>
 8026c30:	3ff00000 	.word	0x3ff00000

08026c34 <__d2b>:
 8026c34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026c38:	460f      	mov	r7, r1
 8026c3a:	2101      	movs	r1, #1
 8026c3c:	ec59 8b10 	vmov	r8, r9, d0
 8026c40:	4616      	mov	r6, r2
 8026c42:	f7ff fc13 	bl	802646c <_Balloc>
 8026c46:	4604      	mov	r4, r0
 8026c48:	b930      	cbnz	r0, 8026c58 <__d2b+0x24>
 8026c4a:	4602      	mov	r2, r0
 8026c4c:	4b23      	ldr	r3, [pc, #140]	@ (8026cdc <__d2b+0xa8>)
 8026c4e:	4824      	ldr	r0, [pc, #144]	@ (8026ce0 <__d2b+0xac>)
 8026c50:	f240 310f 	movw	r1, #783	@ 0x30f
 8026c54:	f7fb ff68 	bl	8022b28 <__assert_func>
 8026c58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8026c5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8026c60:	b10d      	cbz	r5, 8026c66 <__d2b+0x32>
 8026c62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8026c66:	9301      	str	r3, [sp, #4]
 8026c68:	f1b8 0300 	subs.w	r3, r8, #0
 8026c6c:	d023      	beq.n	8026cb6 <__d2b+0x82>
 8026c6e:	4668      	mov	r0, sp
 8026c70:	9300      	str	r3, [sp, #0]
 8026c72:	f7ff fd0c 	bl	802668e <__lo0bits>
 8026c76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8026c7a:	b1d0      	cbz	r0, 8026cb2 <__d2b+0x7e>
 8026c7c:	f1c0 0320 	rsb	r3, r0, #32
 8026c80:	fa02 f303 	lsl.w	r3, r2, r3
 8026c84:	430b      	orrs	r3, r1
 8026c86:	40c2      	lsrs	r2, r0
 8026c88:	6163      	str	r3, [r4, #20]
 8026c8a:	9201      	str	r2, [sp, #4]
 8026c8c:	9b01      	ldr	r3, [sp, #4]
 8026c8e:	61a3      	str	r3, [r4, #24]
 8026c90:	2b00      	cmp	r3, #0
 8026c92:	bf0c      	ite	eq
 8026c94:	2201      	moveq	r2, #1
 8026c96:	2202      	movne	r2, #2
 8026c98:	6122      	str	r2, [r4, #16]
 8026c9a:	b1a5      	cbz	r5, 8026cc6 <__d2b+0x92>
 8026c9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8026ca0:	4405      	add	r5, r0
 8026ca2:	603d      	str	r5, [r7, #0]
 8026ca4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8026ca8:	6030      	str	r0, [r6, #0]
 8026caa:	4620      	mov	r0, r4
 8026cac:	b003      	add	sp, #12
 8026cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026cb2:	6161      	str	r1, [r4, #20]
 8026cb4:	e7ea      	b.n	8026c8c <__d2b+0x58>
 8026cb6:	a801      	add	r0, sp, #4
 8026cb8:	f7ff fce9 	bl	802668e <__lo0bits>
 8026cbc:	9b01      	ldr	r3, [sp, #4]
 8026cbe:	6163      	str	r3, [r4, #20]
 8026cc0:	3020      	adds	r0, #32
 8026cc2:	2201      	movs	r2, #1
 8026cc4:	e7e8      	b.n	8026c98 <__d2b+0x64>
 8026cc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8026cca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8026cce:	6038      	str	r0, [r7, #0]
 8026cd0:	6918      	ldr	r0, [r3, #16]
 8026cd2:	f7ff fcbd 	bl	8026650 <__hi0bits>
 8026cd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8026cda:	e7e5      	b.n	8026ca8 <__d2b+0x74>
 8026cdc:	080318d8 	.word	0x080318d8
 8026ce0:	08031949 	.word	0x08031949

08026ce4 <__ratio>:
 8026ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ce8:	b085      	sub	sp, #20
 8026cea:	e9cd 1000 	strd	r1, r0, [sp]
 8026cee:	a902      	add	r1, sp, #8
 8026cf0:	f7ff ff56 	bl	8026ba0 <__b2d>
 8026cf4:	9800      	ldr	r0, [sp, #0]
 8026cf6:	a903      	add	r1, sp, #12
 8026cf8:	ec55 4b10 	vmov	r4, r5, d0
 8026cfc:	f7ff ff50 	bl	8026ba0 <__b2d>
 8026d00:	9b01      	ldr	r3, [sp, #4]
 8026d02:	6919      	ldr	r1, [r3, #16]
 8026d04:	9b00      	ldr	r3, [sp, #0]
 8026d06:	691b      	ldr	r3, [r3, #16]
 8026d08:	1ac9      	subs	r1, r1, r3
 8026d0a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8026d0e:	1a9b      	subs	r3, r3, r2
 8026d10:	ec5b ab10 	vmov	sl, fp, d0
 8026d14:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8026d18:	2b00      	cmp	r3, #0
 8026d1a:	bfce      	itee	gt
 8026d1c:	462a      	movgt	r2, r5
 8026d1e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8026d22:	465a      	movle	r2, fp
 8026d24:	462f      	mov	r7, r5
 8026d26:	46d9      	mov	r9, fp
 8026d28:	bfcc      	ite	gt
 8026d2a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8026d2e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8026d32:	464b      	mov	r3, r9
 8026d34:	4652      	mov	r2, sl
 8026d36:	4620      	mov	r0, r4
 8026d38:	4639      	mov	r1, r7
 8026d3a:	f7e1 fccf 	bl	80086dc <__aeabi_ddiv>
 8026d3e:	ec41 0b10 	vmov	d0, r0, r1
 8026d42:	b005      	add	sp, #20
 8026d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026d48 <__copybits>:
 8026d48:	3901      	subs	r1, #1
 8026d4a:	b570      	push	{r4, r5, r6, lr}
 8026d4c:	1149      	asrs	r1, r1, #5
 8026d4e:	6914      	ldr	r4, [r2, #16]
 8026d50:	3101      	adds	r1, #1
 8026d52:	f102 0314 	add.w	r3, r2, #20
 8026d56:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8026d5a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8026d5e:	1f05      	subs	r5, r0, #4
 8026d60:	42a3      	cmp	r3, r4
 8026d62:	d30c      	bcc.n	8026d7e <__copybits+0x36>
 8026d64:	1aa3      	subs	r3, r4, r2
 8026d66:	3b11      	subs	r3, #17
 8026d68:	f023 0303 	bic.w	r3, r3, #3
 8026d6c:	3211      	adds	r2, #17
 8026d6e:	42a2      	cmp	r2, r4
 8026d70:	bf88      	it	hi
 8026d72:	2300      	movhi	r3, #0
 8026d74:	4418      	add	r0, r3
 8026d76:	2300      	movs	r3, #0
 8026d78:	4288      	cmp	r0, r1
 8026d7a:	d305      	bcc.n	8026d88 <__copybits+0x40>
 8026d7c:	bd70      	pop	{r4, r5, r6, pc}
 8026d7e:	f853 6b04 	ldr.w	r6, [r3], #4
 8026d82:	f845 6f04 	str.w	r6, [r5, #4]!
 8026d86:	e7eb      	b.n	8026d60 <__copybits+0x18>
 8026d88:	f840 3b04 	str.w	r3, [r0], #4
 8026d8c:	e7f4      	b.n	8026d78 <__copybits+0x30>

08026d8e <__any_on>:
 8026d8e:	f100 0214 	add.w	r2, r0, #20
 8026d92:	6900      	ldr	r0, [r0, #16]
 8026d94:	114b      	asrs	r3, r1, #5
 8026d96:	4298      	cmp	r0, r3
 8026d98:	b510      	push	{r4, lr}
 8026d9a:	db11      	blt.n	8026dc0 <__any_on+0x32>
 8026d9c:	dd0a      	ble.n	8026db4 <__any_on+0x26>
 8026d9e:	f011 011f 	ands.w	r1, r1, #31
 8026da2:	d007      	beq.n	8026db4 <__any_on+0x26>
 8026da4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8026da8:	fa24 f001 	lsr.w	r0, r4, r1
 8026dac:	fa00 f101 	lsl.w	r1, r0, r1
 8026db0:	428c      	cmp	r4, r1
 8026db2:	d10b      	bne.n	8026dcc <__any_on+0x3e>
 8026db4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026db8:	4293      	cmp	r3, r2
 8026dba:	d803      	bhi.n	8026dc4 <__any_on+0x36>
 8026dbc:	2000      	movs	r0, #0
 8026dbe:	bd10      	pop	{r4, pc}
 8026dc0:	4603      	mov	r3, r0
 8026dc2:	e7f7      	b.n	8026db4 <__any_on+0x26>
 8026dc4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8026dc8:	2900      	cmp	r1, #0
 8026dca:	d0f5      	beq.n	8026db8 <__any_on+0x2a>
 8026dcc:	2001      	movs	r0, #1
 8026dce:	e7f6      	b.n	8026dbe <__any_on+0x30>

08026dd0 <_malloc_usable_size_r>:
 8026dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026dd4:	1f18      	subs	r0, r3, #4
 8026dd6:	2b00      	cmp	r3, #0
 8026dd8:	bfbc      	itt	lt
 8026dda:	580b      	ldrlt	r3, [r1, r0]
 8026ddc:	18c0      	addlt	r0, r0, r3
 8026dde:	4770      	bx	lr

08026de0 <__ascii_wctomb>:
 8026de0:	4603      	mov	r3, r0
 8026de2:	4608      	mov	r0, r1
 8026de4:	b141      	cbz	r1, 8026df8 <__ascii_wctomb+0x18>
 8026de6:	2aff      	cmp	r2, #255	@ 0xff
 8026de8:	d904      	bls.n	8026df4 <__ascii_wctomb+0x14>
 8026dea:	228a      	movs	r2, #138	@ 0x8a
 8026dec:	601a      	str	r2, [r3, #0]
 8026dee:	f04f 30ff 	mov.w	r0, #4294967295
 8026df2:	4770      	bx	lr
 8026df4:	700a      	strb	r2, [r1, #0]
 8026df6:	2001      	movs	r0, #1
 8026df8:	4770      	bx	lr

08026dfa <__ssputs_r>:
 8026dfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026dfe:	688e      	ldr	r6, [r1, #8]
 8026e00:	461f      	mov	r7, r3
 8026e02:	42be      	cmp	r6, r7
 8026e04:	680b      	ldr	r3, [r1, #0]
 8026e06:	4682      	mov	sl, r0
 8026e08:	460c      	mov	r4, r1
 8026e0a:	4690      	mov	r8, r2
 8026e0c:	d82d      	bhi.n	8026e6a <__ssputs_r+0x70>
 8026e0e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8026e12:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8026e16:	d026      	beq.n	8026e66 <__ssputs_r+0x6c>
 8026e18:	6965      	ldr	r5, [r4, #20]
 8026e1a:	6909      	ldr	r1, [r1, #16]
 8026e1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026e20:	eba3 0901 	sub.w	r9, r3, r1
 8026e24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8026e28:	1c7b      	adds	r3, r7, #1
 8026e2a:	444b      	add	r3, r9
 8026e2c:	106d      	asrs	r5, r5, #1
 8026e2e:	429d      	cmp	r5, r3
 8026e30:	bf38      	it	cc
 8026e32:	461d      	movcc	r5, r3
 8026e34:	0553      	lsls	r3, r2, #21
 8026e36:	d527      	bpl.n	8026e88 <__ssputs_r+0x8e>
 8026e38:	4629      	mov	r1, r5
 8026e3a:	f7fb fee1 	bl	8022c00 <_malloc_r>
 8026e3e:	4606      	mov	r6, r0
 8026e40:	b360      	cbz	r0, 8026e9c <__ssputs_r+0xa2>
 8026e42:	6921      	ldr	r1, [r4, #16]
 8026e44:	464a      	mov	r2, r9
 8026e46:	f7fe f8d2 	bl	8024fee <memcpy>
 8026e4a:	89a3      	ldrh	r3, [r4, #12]
 8026e4c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8026e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8026e54:	81a3      	strh	r3, [r4, #12]
 8026e56:	6126      	str	r6, [r4, #16]
 8026e58:	6165      	str	r5, [r4, #20]
 8026e5a:	444e      	add	r6, r9
 8026e5c:	eba5 0509 	sub.w	r5, r5, r9
 8026e60:	6026      	str	r6, [r4, #0]
 8026e62:	60a5      	str	r5, [r4, #8]
 8026e64:	463e      	mov	r6, r7
 8026e66:	42be      	cmp	r6, r7
 8026e68:	d900      	bls.n	8026e6c <__ssputs_r+0x72>
 8026e6a:	463e      	mov	r6, r7
 8026e6c:	6820      	ldr	r0, [r4, #0]
 8026e6e:	4632      	mov	r2, r6
 8026e70:	4641      	mov	r1, r8
 8026e72:	f7fd ff42 	bl	8024cfa <memmove>
 8026e76:	68a3      	ldr	r3, [r4, #8]
 8026e78:	1b9b      	subs	r3, r3, r6
 8026e7a:	60a3      	str	r3, [r4, #8]
 8026e7c:	6823      	ldr	r3, [r4, #0]
 8026e7e:	4433      	add	r3, r6
 8026e80:	6023      	str	r3, [r4, #0]
 8026e82:	2000      	movs	r0, #0
 8026e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026e88:	462a      	mov	r2, r5
 8026e8a:	f7fb ff4f 	bl	8022d2c <_realloc_r>
 8026e8e:	4606      	mov	r6, r0
 8026e90:	2800      	cmp	r0, #0
 8026e92:	d1e0      	bne.n	8026e56 <__ssputs_r+0x5c>
 8026e94:	6921      	ldr	r1, [r4, #16]
 8026e96:	4650      	mov	r0, sl
 8026e98:	f7fe ff1e 	bl	8025cd8 <_free_r>
 8026e9c:	230c      	movs	r3, #12
 8026e9e:	f8ca 3000 	str.w	r3, [sl]
 8026ea2:	89a3      	ldrh	r3, [r4, #12]
 8026ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026ea8:	81a3      	strh	r3, [r4, #12]
 8026eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8026eae:	e7e9      	b.n	8026e84 <__ssputs_r+0x8a>

08026eb0 <_svfiprintf_r>:
 8026eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026eb4:	4698      	mov	r8, r3
 8026eb6:	898b      	ldrh	r3, [r1, #12]
 8026eb8:	061b      	lsls	r3, r3, #24
 8026eba:	b09d      	sub	sp, #116	@ 0x74
 8026ebc:	4607      	mov	r7, r0
 8026ebe:	460d      	mov	r5, r1
 8026ec0:	4614      	mov	r4, r2
 8026ec2:	d510      	bpl.n	8026ee6 <_svfiprintf_r+0x36>
 8026ec4:	690b      	ldr	r3, [r1, #16]
 8026ec6:	b973      	cbnz	r3, 8026ee6 <_svfiprintf_r+0x36>
 8026ec8:	2140      	movs	r1, #64	@ 0x40
 8026eca:	f7fb fe99 	bl	8022c00 <_malloc_r>
 8026ece:	6028      	str	r0, [r5, #0]
 8026ed0:	6128      	str	r0, [r5, #16]
 8026ed2:	b930      	cbnz	r0, 8026ee2 <_svfiprintf_r+0x32>
 8026ed4:	230c      	movs	r3, #12
 8026ed6:	603b      	str	r3, [r7, #0]
 8026ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8026edc:	b01d      	add	sp, #116	@ 0x74
 8026ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026ee2:	2340      	movs	r3, #64	@ 0x40
 8026ee4:	616b      	str	r3, [r5, #20]
 8026ee6:	2300      	movs	r3, #0
 8026ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8026eea:	2320      	movs	r3, #32
 8026eec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8026ef0:	f8cd 800c 	str.w	r8, [sp, #12]
 8026ef4:	2330      	movs	r3, #48	@ 0x30
 8026ef6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8027094 <_svfiprintf_r+0x1e4>
 8026efa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8026efe:	f04f 0901 	mov.w	r9, #1
 8026f02:	4623      	mov	r3, r4
 8026f04:	469a      	mov	sl, r3
 8026f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026f0a:	b10a      	cbz	r2, 8026f10 <_svfiprintf_r+0x60>
 8026f0c:	2a25      	cmp	r2, #37	@ 0x25
 8026f0e:	d1f9      	bne.n	8026f04 <_svfiprintf_r+0x54>
 8026f10:	ebba 0b04 	subs.w	fp, sl, r4
 8026f14:	d00b      	beq.n	8026f2e <_svfiprintf_r+0x7e>
 8026f16:	465b      	mov	r3, fp
 8026f18:	4622      	mov	r2, r4
 8026f1a:	4629      	mov	r1, r5
 8026f1c:	4638      	mov	r0, r7
 8026f1e:	f7ff ff6c 	bl	8026dfa <__ssputs_r>
 8026f22:	3001      	adds	r0, #1
 8026f24:	f000 80a7 	beq.w	8027076 <_svfiprintf_r+0x1c6>
 8026f28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026f2a:	445a      	add	r2, fp
 8026f2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8026f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8026f32:	2b00      	cmp	r3, #0
 8026f34:	f000 809f 	beq.w	8027076 <_svfiprintf_r+0x1c6>
 8026f38:	2300      	movs	r3, #0
 8026f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8026f3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026f42:	f10a 0a01 	add.w	sl, sl, #1
 8026f46:	9304      	str	r3, [sp, #16]
 8026f48:	9307      	str	r3, [sp, #28]
 8026f4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8026f4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8026f50:	4654      	mov	r4, sl
 8026f52:	2205      	movs	r2, #5
 8026f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026f58:	484e      	ldr	r0, [pc, #312]	@ (8027094 <_svfiprintf_r+0x1e4>)
 8026f5a:	f7e1 f881 	bl	8008060 <memchr>
 8026f5e:	9a04      	ldr	r2, [sp, #16]
 8026f60:	b9d8      	cbnz	r0, 8026f9a <_svfiprintf_r+0xea>
 8026f62:	06d0      	lsls	r0, r2, #27
 8026f64:	bf44      	itt	mi
 8026f66:	2320      	movmi	r3, #32
 8026f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8026f6c:	0711      	lsls	r1, r2, #28
 8026f6e:	bf44      	itt	mi
 8026f70:	232b      	movmi	r3, #43	@ 0x2b
 8026f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8026f76:	f89a 3000 	ldrb.w	r3, [sl]
 8026f7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8026f7c:	d015      	beq.n	8026faa <_svfiprintf_r+0xfa>
 8026f7e:	9a07      	ldr	r2, [sp, #28]
 8026f80:	4654      	mov	r4, sl
 8026f82:	2000      	movs	r0, #0
 8026f84:	f04f 0c0a 	mov.w	ip, #10
 8026f88:	4621      	mov	r1, r4
 8026f8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026f8e:	3b30      	subs	r3, #48	@ 0x30
 8026f90:	2b09      	cmp	r3, #9
 8026f92:	d94b      	bls.n	802702c <_svfiprintf_r+0x17c>
 8026f94:	b1b0      	cbz	r0, 8026fc4 <_svfiprintf_r+0x114>
 8026f96:	9207      	str	r2, [sp, #28]
 8026f98:	e014      	b.n	8026fc4 <_svfiprintf_r+0x114>
 8026f9a:	eba0 0308 	sub.w	r3, r0, r8
 8026f9e:	fa09 f303 	lsl.w	r3, r9, r3
 8026fa2:	4313      	orrs	r3, r2
 8026fa4:	9304      	str	r3, [sp, #16]
 8026fa6:	46a2      	mov	sl, r4
 8026fa8:	e7d2      	b.n	8026f50 <_svfiprintf_r+0xa0>
 8026faa:	9b03      	ldr	r3, [sp, #12]
 8026fac:	1d19      	adds	r1, r3, #4
 8026fae:	681b      	ldr	r3, [r3, #0]
 8026fb0:	9103      	str	r1, [sp, #12]
 8026fb2:	2b00      	cmp	r3, #0
 8026fb4:	bfbb      	ittet	lt
 8026fb6:	425b      	neglt	r3, r3
 8026fb8:	f042 0202 	orrlt.w	r2, r2, #2
 8026fbc:	9307      	strge	r3, [sp, #28]
 8026fbe:	9307      	strlt	r3, [sp, #28]
 8026fc0:	bfb8      	it	lt
 8026fc2:	9204      	strlt	r2, [sp, #16]
 8026fc4:	7823      	ldrb	r3, [r4, #0]
 8026fc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8026fc8:	d10a      	bne.n	8026fe0 <_svfiprintf_r+0x130>
 8026fca:	7863      	ldrb	r3, [r4, #1]
 8026fcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8026fce:	d132      	bne.n	8027036 <_svfiprintf_r+0x186>
 8026fd0:	9b03      	ldr	r3, [sp, #12]
 8026fd2:	1d1a      	adds	r2, r3, #4
 8026fd4:	681b      	ldr	r3, [r3, #0]
 8026fd6:	9203      	str	r2, [sp, #12]
 8026fd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8026fdc:	3402      	adds	r4, #2
 8026fde:	9305      	str	r3, [sp, #20]
 8026fe0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80270a4 <_svfiprintf_r+0x1f4>
 8026fe4:	7821      	ldrb	r1, [r4, #0]
 8026fe6:	2203      	movs	r2, #3
 8026fe8:	4650      	mov	r0, sl
 8026fea:	f7e1 f839 	bl	8008060 <memchr>
 8026fee:	b138      	cbz	r0, 8027000 <_svfiprintf_r+0x150>
 8026ff0:	9b04      	ldr	r3, [sp, #16]
 8026ff2:	eba0 000a 	sub.w	r0, r0, sl
 8026ff6:	2240      	movs	r2, #64	@ 0x40
 8026ff8:	4082      	lsls	r2, r0
 8026ffa:	4313      	orrs	r3, r2
 8026ffc:	3401      	adds	r4, #1
 8026ffe:	9304      	str	r3, [sp, #16]
 8027000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027004:	4824      	ldr	r0, [pc, #144]	@ (8027098 <_svfiprintf_r+0x1e8>)
 8027006:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802700a:	2206      	movs	r2, #6
 802700c:	f7e1 f828 	bl	8008060 <memchr>
 8027010:	2800      	cmp	r0, #0
 8027012:	d036      	beq.n	8027082 <_svfiprintf_r+0x1d2>
 8027014:	4b21      	ldr	r3, [pc, #132]	@ (802709c <_svfiprintf_r+0x1ec>)
 8027016:	bb1b      	cbnz	r3, 8027060 <_svfiprintf_r+0x1b0>
 8027018:	9b03      	ldr	r3, [sp, #12]
 802701a:	3307      	adds	r3, #7
 802701c:	f023 0307 	bic.w	r3, r3, #7
 8027020:	3308      	adds	r3, #8
 8027022:	9303      	str	r3, [sp, #12]
 8027024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027026:	4433      	add	r3, r6
 8027028:	9309      	str	r3, [sp, #36]	@ 0x24
 802702a:	e76a      	b.n	8026f02 <_svfiprintf_r+0x52>
 802702c:	fb0c 3202 	mla	r2, ip, r2, r3
 8027030:	460c      	mov	r4, r1
 8027032:	2001      	movs	r0, #1
 8027034:	e7a8      	b.n	8026f88 <_svfiprintf_r+0xd8>
 8027036:	2300      	movs	r3, #0
 8027038:	3401      	adds	r4, #1
 802703a:	9305      	str	r3, [sp, #20]
 802703c:	4619      	mov	r1, r3
 802703e:	f04f 0c0a 	mov.w	ip, #10
 8027042:	4620      	mov	r0, r4
 8027044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027048:	3a30      	subs	r2, #48	@ 0x30
 802704a:	2a09      	cmp	r2, #9
 802704c:	d903      	bls.n	8027056 <_svfiprintf_r+0x1a6>
 802704e:	2b00      	cmp	r3, #0
 8027050:	d0c6      	beq.n	8026fe0 <_svfiprintf_r+0x130>
 8027052:	9105      	str	r1, [sp, #20]
 8027054:	e7c4      	b.n	8026fe0 <_svfiprintf_r+0x130>
 8027056:	fb0c 2101 	mla	r1, ip, r1, r2
 802705a:	4604      	mov	r4, r0
 802705c:	2301      	movs	r3, #1
 802705e:	e7f0      	b.n	8027042 <_svfiprintf_r+0x192>
 8027060:	ab03      	add	r3, sp, #12
 8027062:	9300      	str	r3, [sp, #0]
 8027064:	462a      	mov	r2, r5
 8027066:	4b0e      	ldr	r3, [pc, #56]	@ (80270a0 <_svfiprintf_r+0x1f0>)
 8027068:	a904      	add	r1, sp, #16
 802706a:	4638      	mov	r0, r7
 802706c:	f7fc ff32 	bl	8023ed4 <_printf_float>
 8027070:	1c42      	adds	r2, r0, #1
 8027072:	4606      	mov	r6, r0
 8027074:	d1d6      	bne.n	8027024 <_svfiprintf_r+0x174>
 8027076:	89ab      	ldrh	r3, [r5, #12]
 8027078:	065b      	lsls	r3, r3, #25
 802707a:	f53f af2d 	bmi.w	8026ed8 <_svfiprintf_r+0x28>
 802707e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027080:	e72c      	b.n	8026edc <_svfiprintf_r+0x2c>
 8027082:	ab03      	add	r3, sp, #12
 8027084:	9300      	str	r3, [sp, #0]
 8027086:	462a      	mov	r2, r5
 8027088:	4b05      	ldr	r3, [pc, #20]	@ (80270a0 <_svfiprintf_r+0x1f0>)
 802708a:	a904      	add	r1, sp, #16
 802708c:	4638      	mov	r0, r7
 802708e:	f7fd f9b9 	bl	8024404 <_printf_i>
 8027092:	e7ed      	b.n	8027070 <_svfiprintf_r+0x1c0>
 8027094:	08031aa0 	.word	0x08031aa0
 8027098:	08031aaa 	.word	0x08031aaa
 802709c:	08023ed5 	.word	0x08023ed5
 80270a0:	08026dfb 	.word	0x08026dfb
 80270a4:	08031aa6 	.word	0x08031aa6

080270a8 <__sfputc_r>:
 80270a8:	6893      	ldr	r3, [r2, #8]
 80270aa:	3b01      	subs	r3, #1
 80270ac:	2b00      	cmp	r3, #0
 80270ae:	b410      	push	{r4}
 80270b0:	6093      	str	r3, [r2, #8]
 80270b2:	da08      	bge.n	80270c6 <__sfputc_r+0x1e>
 80270b4:	6994      	ldr	r4, [r2, #24]
 80270b6:	42a3      	cmp	r3, r4
 80270b8:	db01      	blt.n	80270be <__sfputc_r+0x16>
 80270ba:	290a      	cmp	r1, #10
 80270bc:	d103      	bne.n	80270c6 <__sfputc_r+0x1e>
 80270be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80270c2:	f000 b9df 	b.w	8027484 <__swbuf_r>
 80270c6:	6813      	ldr	r3, [r2, #0]
 80270c8:	1c58      	adds	r0, r3, #1
 80270ca:	6010      	str	r0, [r2, #0]
 80270cc:	7019      	strb	r1, [r3, #0]
 80270ce:	4608      	mov	r0, r1
 80270d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80270d4:	4770      	bx	lr

080270d6 <__sfputs_r>:
 80270d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80270d8:	4606      	mov	r6, r0
 80270da:	460f      	mov	r7, r1
 80270dc:	4614      	mov	r4, r2
 80270de:	18d5      	adds	r5, r2, r3
 80270e0:	42ac      	cmp	r4, r5
 80270e2:	d101      	bne.n	80270e8 <__sfputs_r+0x12>
 80270e4:	2000      	movs	r0, #0
 80270e6:	e007      	b.n	80270f8 <__sfputs_r+0x22>
 80270e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80270ec:	463a      	mov	r2, r7
 80270ee:	4630      	mov	r0, r6
 80270f0:	f7ff ffda 	bl	80270a8 <__sfputc_r>
 80270f4:	1c43      	adds	r3, r0, #1
 80270f6:	d1f3      	bne.n	80270e0 <__sfputs_r+0xa>
 80270f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080270fc <_vfiprintf_r>:
 80270fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027100:	460d      	mov	r5, r1
 8027102:	b09d      	sub	sp, #116	@ 0x74
 8027104:	4614      	mov	r4, r2
 8027106:	4698      	mov	r8, r3
 8027108:	4606      	mov	r6, r0
 802710a:	b118      	cbz	r0, 8027114 <_vfiprintf_r+0x18>
 802710c:	6a03      	ldr	r3, [r0, #32]
 802710e:	b90b      	cbnz	r3, 8027114 <_vfiprintf_r+0x18>
 8027110:	f7fd fd38 	bl	8024b84 <__sinit>
 8027114:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8027116:	07d9      	lsls	r1, r3, #31
 8027118:	d405      	bmi.n	8027126 <_vfiprintf_r+0x2a>
 802711a:	89ab      	ldrh	r3, [r5, #12]
 802711c:	059a      	lsls	r2, r3, #22
 802711e:	d402      	bmi.n	8027126 <_vfiprintf_r+0x2a>
 8027120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8027122:	f7fd ff5a 	bl	8024fda <__retarget_lock_acquire_recursive>
 8027126:	89ab      	ldrh	r3, [r5, #12]
 8027128:	071b      	lsls	r3, r3, #28
 802712a:	d501      	bpl.n	8027130 <_vfiprintf_r+0x34>
 802712c:	692b      	ldr	r3, [r5, #16]
 802712e:	b99b      	cbnz	r3, 8027158 <_vfiprintf_r+0x5c>
 8027130:	4629      	mov	r1, r5
 8027132:	4630      	mov	r0, r6
 8027134:	f000 f9e4 	bl	8027500 <__swsetup_r>
 8027138:	b170      	cbz	r0, 8027158 <_vfiprintf_r+0x5c>
 802713a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802713c:	07dc      	lsls	r4, r3, #31
 802713e:	d504      	bpl.n	802714a <_vfiprintf_r+0x4e>
 8027140:	f04f 30ff 	mov.w	r0, #4294967295
 8027144:	b01d      	add	sp, #116	@ 0x74
 8027146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802714a:	89ab      	ldrh	r3, [r5, #12]
 802714c:	0598      	lsls	r0, r3, #22
 802714e:	d4f7      	bmi.n	8027140 <_vfiprintf_r+0x44>
 8027150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8027152:	f7fd ff43 	bl	8024fdc <__retarget_lock_release_recursive>
 8027156:	e7f3      	b.n	8027140 <_vfiprintf_r+0x44>
 8027158:	2300      	movs	r3, #0
 802715a:	9309      	str	r3, [sp, #36]	@ 0x24
 802715c:	2320      	movs	r3, #32
 802715e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8027162:	f8cd 800c 	str.w	r8, [sp, #12]
 8027166:	2330      	movs	r3, #48	@ 0x30
 8027168:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8027318 <_vfiprintf_r+0x21c>
 802716c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8027170:	f04f 0901 	mov.w	r9, #1
 8027174:	4623      	mov	r3, r4
 8027176:	469a      	mov	sl, r3
 8027178:	f813 2b01 	ldrb.w	r2, [r3], #1
 802717c:	b10a      	cbz	r2, 8027182 <_vfiprintf_r+0x86>
 802717e:	2a25      	cmp	r2, #37	@ 0x25
 8027180:	d1f9      	bne.n	8027176 <_vfiprintf_r+0x7a>
 8027182:	ebba 0b04 	subs.w	fp, sl, r4
 8027186:	d00b      	beq.n	80271a0 <_vfiprintf_r+0xa4>
 8027188:	465b      	mov	r3, fp
 802718a:	4622      	mov	r2, r4
 802718c:	4629      	mov	r1, r5
 802718e:	4630      	mov	r0, r6
 8027190:	f7ff ffa1 	bl	80270d6 <__sfputs_r>
 8027194:	3001      	adds	r0, #1
 8027196:	f000 80a7 	beq.w	80272e8 <_vfiprintf_r+0x1ec>
 802719a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802719c:	445a      	add	r2, fp
 802719e:	9209      	str	r2, [sp, #36]	@ 0x24
 80271a0:	f89a 3000 	ldrb.w	r3, [sl]
 80271a4:	2b00      	cmp	r3, #0
 80271a6:	f000 809f 	beq.w	80272e8 <_vfiprintf_r+0x1ec>
 80271aa:	2300      	movs	r3, #0
 80271ac:	f04f 32ff 	mov.w	r2, #4294967295
 80271b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80271b4:	f10a 0a01 	add.w	sl, sl, #1
 80271b8:	9304      	str	r3, [sp, #16]
 80271ba:	9307      	str	r3, [sp, #28]
 80271bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80271c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80271c2:	4654      	mov	r4, sl
 80271c4:	2205      	movs	r2, #5
 80271c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80271ca:	4853      	ldr	r0, [pc, #332]	@ (8027318 <_vfiprintf_r+0x21c>)
 80271cc:	f7e0 ff48 	bl	8008060 <memchr>
 80271d0:	9a04      	ldr	r2, [sp, #16]
 80271d2:	b9d8      	cbnz	r0, 802720c <_vfiprintf_r+0x110>
 80271d4:	06d1      	lsls	r1, r2, #27
 80271d6:	bf44      	itt	mi
 80271d8:	2320      	movmi	r3, #32
 80271da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80271de:	0713      	lsls	r3, r2, #28
 80271e0:	bf44      	itt	mi
 80271e2:	232b      	movmi	r3, #43	@ 0x2b
 80271e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80271e8:	f89a 3000 	ldrb.w	r3, [sl]
 80271ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80271ee:	d015      	beq.n	802721c <_vfiprintf_r+0x120>
 80271f0:	9a07      	ldr	r2, [sp, #28]
 80271f2:	4654      	mov	r4, sl
 80271f4:	2000      	movs	r0, #0
 80271f6:	f04f 0c0a 	mov.w	ip, #10
 80271fa:	4621      	mov	r1, r4
 80271fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027200:	3b30      	subs	r3, #48	@ 0x30
 8027202:	2b09      	cmp	r3, #9
 8027204:	d94b      	bls.n	802729e <_vfiprintf_r+0x1a2>
 8027206:	b1b0      	cbz	r0, 8027236 <_vfiprintf_r+0x13a>
 8027208:	9207      	str	r2, [sp, #28]
 802720a:	e014      	b.n	8027236 <_vfiprintf_r+0x13a>
 802720c:	eba0 0308 	sub.w	r3, r0, r8
 8027210:	fa09 f303 	lsl.w	r3, r9, r3
 8027214:	4313      	orrs	r3, r2
 8027216:	9304      	str	r3, [sp, #16]
 8027218:	46a2      	mov	sl, r4
 802721a:	e7d2      	b.n	80271c2 <_vfiprintf_r+0xc6>
 802721c:	9b03      	ldr	r3, [sp, #12]
 802721e:	1d19      	adds	r1, r3, #4
 8027220:	681b      	ldr	r3, [r3, #0]
 8027222:	9103      	str	r1, [sp, #12]
 8027224:	2b00      	cmp	r3, #0
 8027226:	bfbb      	ittet	lt
 8027228:	425b      	neglt	r3, r3
 802722a:	f042 0202 	orrlt.w	r2, r2, #2
 802722e:	9307      	strge	r3, [sp, #28]
 8027230:	9307      	strlt	r3, [sp, #28]
 8027232:	bfb8      	it	lt
 8027234:	9204      	strlt	r2, [sp, #16]
 8027236:	7823      	ldrb	r3, [r4, #0]
 8027238:	2b2e      	cmp	r3, #46	@ 0x2e
 802723a:	d10a      	bne.n	8027252 <_vfiprintf_r+0x156>
 802723c:	7863      	ldrb	r3, [r4, #1]
 802723e:	2b2a      	cmp	r3, #42	@ 0x2a
 8027240:	d132      	bne.n	80272a8 <_vfiprintf_r+0x1ac>
 8027242:	9b03      	ldr	r3, [sp, #12]
 8027244:	1d1a      	adds	r2, r3, #4
 8027246:	681b      	ldr	r3, [r3, #0]
 8027248:	9203      	str	r2, [sp, #12]
 802724a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802724e:	3402      	adds	r4, #2
 8027250:	9305      	str	r3, [sp, #20]
 8027252:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8027328 <_vfiprintf_r+0x22c>
 8027256:	7821      	ldrb	r1, [r4, #0]
 8027258:	2203      	movs	r2, #3
 802725a:	4650      	mov	r0, sl
 802725c:	f7e0 ff00 	bl	8008060 <memchr>
 8027260:	b138      	cbz	r0, 8027272 <_vfiprintf_r+0x176>
 8027262:	9b04      	ldr	r3, [sp, #16]
 8027264:	eba0 000a 	sub.w	r0, r0, sl
 8027268:	2240      	movs	r2, #64	@ 0x40
 802726a:	4082      	lsls	r2, r0
 802726c:	4313      	orrs	r3, r2
 802726e:	3401      	adds	r4, #1
 8027270:	9304      	str	r3, [sp, #16]
 8027272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027276:	4829      	ldr	r0, [pc, #164]	@ (802731c <_vfiprintf_r+0x220>)
 8027278:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802727c:	2206      	movs	r2, #6
 802727e:	f7e0 feef 	bl	8008060 <memchr>
 8027282:	2800      	cmp	r0, #0
 8027284:	d03f      	beq.n	8027306 <_vfiprintf_r+0x20a>
 8027286:	4b26      	ldr	r3, [pc, #152]	@ (8027320 <_vfiprintf_r+0x224>)
 8027288:	bb1b      	cbnz	r3, 80272d2 <_vfiprintf_r+0x1d6>
 802728a:	9b03      	ldr	r3, [sp, #12]
 802728c:	3307      	adds	r3, #7
 802728e:	f023 0307 	bic.w	r3, r3, #7
 8027292:	3308      	adds	r3, #8
 8027294:	9303      	str	r3, [sp, #12]
 8027296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027298:	443b      	add	r3, r7
 802729a:	9309      	str	r3, [sp, #36]	@ 0x24
 802729c:	e76a      	b.n	8027174 <_vfiprintf_r+0x78>
 802729e:	fb0c 3202 	mla	r2, ip, r2, r3
 80272a2:	460c      	mov	r4, r1
 80272a4:	2001      	movs	r0, #1
 80272a6:	e7a8      	b.n	80271fa <_vfiprintf_r+0xfe>
 80272a8:	2300      	movs	r3, #0
 80272aa:	3401      	adds	r4, #1
 80272ac:	9305      	str	r3, [sp, #20]
 80272ae:	4619      	mov	r1, r3
 80272b0:	f04f 0c0a 	mov.w	ip, #10
 80272b4:	4620      	mov	r0, r4
 80272b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80272ba:	3a30      	subs	r2, #48	@ 0x30
 80272bc:	2a09      	cmp	r2, #9
 80272be:	d903      	bls.n	80272c8 <_vfiprintf_r+0x1cc>
 80272c0:	2b00      	cmp	r3, #0
 80272c2:	d0c6      	beq.n	8027252 <_vfiprintf_r+0x156>
 80272c4:	9105      	str	r1, [sp, #20]
 80272c6:	e7c4      	b.n	8027252 <_vfiprintf_r+0x156>
 80272c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80272cc:	4604      	mov	r4, r0
 80272ce:	2301      	movs	r3, #1
 80272d0:	e7f0      	b.n	80272b4 <_vfiprintf_r+0x1b8>
 80272d2:	ab03      	add	r3, sp, #12
 80272d4:	9300      	str	r3, [sp, #0]
 80272d6:	462a      	mov	r2, r5
 80272d8:	4b12      	ldr	r3, [pc, #72]	@ (8027324 <_vfiprintf_r+0x228>)
 80272da:	a904      	add	r1, sp, #16
 80272dc:	4630      	mov	r0, r6
 80272de:	f7fc fdf9 	bl	8023ed4 <_printf_float>
 80272e2:	4607      	mov	r7, r0
 80272e4:	1c78      	adds	r0, r7, #1
 80272e6:	d1d6      	bne.n	8027296 <_vfiprintf_r+0x19a>
 80272e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80272ea:	07d9      	lsls	r1, r3, #31
 80272ec:	d405      	bmi.n	80272fa <_vfiprintf_r+0x1fe>
 80272ee:	89ab      	ldrh	r3, [r5, #12]
 80272f0:	059a      	lsls	r2, r3, #22
 80272f2:	d402      	bmi.n	80272fa <_vfiprintf_r+0x1fe>
 80272f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80272f6:	f7fd fe71 	bl	8024fdc <__retarget_lock_release_recursive>
 80272fa:	89ab      	ldrh	r3, [r5, #12]
 80272fc:	065b      	lsls	r3, r3, #25
 80272fe:	f53f af1f 	bmi.w	8027140 <_vfiprintf_r+0x44>
 8027302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027304:	e71e      	b.n	8027144 <_vfiprintf_r+0x48>
 8027306:	ab03      	add	r3, sp, #12
 8027308:	9300      	str	r3, [sp, #0]
 802730a:	462a      	mov	r2, r5
 802730c:	4b05      	ldr	r3, [pc, #20]	@ (8027324 <_vfiprintf_r+0x228>)
 802730e:	a904      	add	r1, sp, #16
 8027310:	4630      	mov	r0, r6
 8027312:	f7fd f877 	bl	8024404 <_printf_i>
 8027316:	e7e4      	b.n	80272e2 <_vfiprintf_r+0x1e6>
 8027318:	08031aa0 	.word	0x08031aa0
 802731c:	08031aaa 	.word	0x08031aaa
 8027320:	08023ed5 	.word	0x08023ed5
 8027324:	080270d7 	.word	0x080270d7
 8027328:	08031aa6 	.word	0x08031aa6

0802732c <__sflush_r>:
 802732c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8027330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027334:	0716      	lsls	r6, r2, #28
 8027336:	4605      	mov	r5, r0
 8027338:	460c      	mov	r4, r1
 802733a:	d454      	bmi.n	80273e6 <__sflush_r+0xba>
 802733c:	684b      	ldr	r3, [r1, #4]
 802733e:	2b00      	cmp	r3, #0
 8027340:	dc02      	bgt.n	8027348 <__sflush_r+0x1c>
 8027342:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8027344:	2b00      	cmp	r3, #0
 8027346:	dd48      	ble.n	80273da <__sflush_r+0xae>
 8027348:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802734a:	2e00      	cmp	r6, #0
 802734c:	d045      	beq.n	80273da <__sflush_r+0xae>
 802734e:	2300      	movs	r3, #0
 8027350:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8027354:	682f      	ldr	r7, [r5, #0]
 8027356:	6a21      	ldr	r1, [r4, #32]
 8027358:	602b      	str	r3, [r5, #0]
 802735a:	d030      	beq.n	80273be <__sflush_r+0x92>
 802735c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802735e:	89a3      	ldrh	r3, [r4, #12]
 8027360:	0759      	lsls	r1, r3, #29
 8027362:	d505      	bpl.n	8027370 <__sflush_r+0x44>
 8027364:	6863      	ldr	r3, [r4, #4]
 8027366:	1ad2      	subs	r2, r2, r3
 8027368:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802736a:	b10b      	cbz	r3, 8027370 <__sflush_r+0x44>
 802736c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802736e:	1ad2      	subs	r2, r2, r3
 8027370:	2300      	movs	r3, #0
 8027372:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8027374:	6a21      	ldr	r1, [r4, #32]
 8027376:	4628      	mov	r0, r5
 8027378:	47b0      	blx	r6
 802737a:	1c43      	adds	r3, r0, #1
 802737c:	89a3      	ldrh	r3, [r4, #12]
 802737e:	d106      	bne.n	802738e <__sflush_r+0x62>
 8027380:	6829      	ldr	r1, [r5, #0]
 8027382:	291d      	cmp	r1, #29
 8027384:	d82b      	bhi.n	80273de <__sflush_r+0xb2>
 8027386:	4a2a      	ldr	r2, [pc, #168]	@ (8027430 <__sflush_r+0x104>)
 8027388:	410a      	asrs	r2, r1
 802738a:	07d6      	lsls	r6, r2, #31
 802738c:	d427      	bmi.n	80273de <__sflush_r+0xb2>
 802738e:	2200      	movs	r2, #0
 8027390:	6062      	str	r2, [r4, #4]
 8027392:	04d9      	lsls	r1, r3, #19
 8027394:	6922      	ldr	r2, [r4, #16]
 8027396:	6022      	str	r2, [r4, #0]
 8027398:	d504      	bpl.n	80273a4 <__sflush_r+0x78>
 802739a:	1c42      	adds	r2, r0, #1
 802739c:	d101      	bne.n	80273a2 <__sflush_r+0x76>
 802739e:	682b      	ldr	r3, [r5, #0]
 80273a0:	b903      	cbnz	r3, 80273a4 <__sflush_r+0x78>
 80273a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80273a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80273a6:	602f      	str	r7, [r5, #0]
 80273a8:	b1b9      	cbz	r1, 80273da <__sflush_r+0xae>
 80273aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80273ae:	4299      	cmp	r1, r3
 80273b0:	d002      	beq.n	80273b8 <__sflush_r+0x8c>
 80273b2:	4628      	mov	r0, r5
 80273b4:	f7fe fc90 	bl	8025cd8 <_free_r>
 80273b8:	2300      	movs	r3, #0
 80273ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80273bc:	e00d      	b.n	80273da <__sflush_r+0xae>
 80273be:	2301      	movs	r3, #1
 80273c0:	4628      	mov	r0, r5
 80273c2:	47b0      	blx	r6
 80273c4:	4602      	mov	r2, r0
 80273c6:	1c50      	adds	r0, r2, #1
 80273c8:	d1c9      	bne.n	802735e <__sflush_r+0x32>
 80273ca:	682b      	ldr	r3, [r5, #0]
 80273cc:	2b00      	cmp	r3, #0
 80273ce:	d0c6      	beq.n	802735e <__sflush_r+0x32>
 80273d0:	2b1d      	cmp	r3, #29
 80273d2:	d001      	beq.n	80273d8 <__sflush_r+0xac>
 80273d4:	2b16      	cmp	r3, #22
 80273d6:	d11e      	bne.n	8027416 <__sflush_r+0xea>
 80273d8:	602f      	str	r7, [r5, #0]
 80273da:	2000      	movs	r0, #0
 80273dc:	e022      	b.n	8027424 <__sflush_r+0xf8>
 80273de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80273e2:	b21b      	sxth	r3, r3
 80273e4:	e01b      	b.n	802741e <__sflush_r+0xf2>
 80273e6:	690f      	ldr	r7, [r1, #16]
 80273e8:	2f00      	cmp	r7, #0
 80273ea:	d0f6      	beq.n	80273da <__sflush_r+0xae>
 80273ec:	0793      	lsls	r3, r2, #30
 80273ee:	680e      	ldr	r6, [r1, #0]
 80273f0:	bf08      	it	eq
 80273f2:	694b      	ldreq	r3, [r1, #20]
 80273f4:	600f      	str	r7, [r1, #0]
 80273f6:	bf18      	it	ne
 80273f8:	2300      	movne	r3, #0
 80273fa:	eba6 0807 	sub.w	r8, r6, r7
 80273fe:	608b      	str	r3, [r1, #8]
 8027400:	f1b8 0f00 	cmp.w	r8, #0
 8027404:	dde9      	ble.n	80273da <__sflush_r+0xae>
 8027406:	6a21      	ldr	r1, [r4, #32]
 8027408:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802740a:	4643      	mov	r3, r8
 802740c:	463a      	mov	r2, r7
 802740e:	4628      	mov	r0, r5
 8027410:	47b0      	blx	r6
 8027412:	2800      	cmp	r0, #0
 8027414:	dc08      	bgt.n	8027428 <__sflush_r+0xfc>
 8027416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802741a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802741e:	81a3      	strh	r3, [r4, #12]
 8027420:	f04f 30ff 	mov.w	r0, #4294967295
 8027424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027428:	4407      	add	r7, r0
 802742a:	eba8 0800 	sub.w	r8, r8, r0
 802742e:	e7e7      	b.n	8027400 <__sflush_r+0xd4>
 8027430:	dfbffffe 	.word	0xdfbffffe

08027434 <_fflush_r>:
 8027434:	b538      	push	{r3, r4, r5, lr}
 8027436:	690b      	ldr	r3, [r1, #16]
 8027438:	4605      	mov	r5, r0
 802743a:	460c      	mov	r4, r1
 802743c:	b913      	cbnz	r3, 8027444 <_fflush_r+0x10>
 802743e:	2500      	movs	r5, #0
 8027440:	4628      	mov	r0, r5
 8027442:	bd38      	pop	{r3, r4, r5, pc}
 8027444:	b118      	cbz	r0, 802744e <_fflush_r+0x1a>
 8027446:	6a03      	ldr	r3, [r0, #32]
 8027448:	b90b      	cbnz	r3, 802744e <_fflush_r+0x1a>
 802744a:	f7fd fb9b 	bl	8024b84 <__sinit>
 802744e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027452:	2b00      	cmp	r3, #0
 8027454:	d0f3      	beq.n	802743e <_fflush_r+0xa>
 8027456:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8027458:	07d0      	lsls	r0, r2, #31
 802745a:	d404      	bmi.n	8027466 <_fflush_r+0x32>
 802745c:	0599      	lsls	r1, r3, #22
 802745e:	d402      	bmi.n	8027466 <_fflush_r+0x32>
 8027460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027462:	f7fd fdba 	bl	8024fda <__retarget_lock_acquire_recursive>
 8027466:	4628      	mov	r0, r5
 8027468:	4621      	mov	r1, r4
 802746a:	f7ff ff5f 	bl	802732c <__sflush_r>
 802746e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8027470:	07da      	lsls	r2, r3, #31
 8027472:	4605      	mov	r5, r0
 8027474:	d4e4      	bmi.n	8027440 <_fflush_r+0xc>
 8027476:	89a3      	ldrh	r3, [r4, #12]
 8027478:	059b      	lsls	r3, r3, #22
 802747a:	d4e1      	bmi.n	8027440 <_fflush_r+0xc>
 802747c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802747e:	f7fd fdad 	bl	8024fdc <__retarget_lock_release_recursive>
 8027482:	e7dd      	b.n	8027440 <_fflush_r+0xc>

08027484 <__swbuf_r>:
 8027484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027486:	460e      	mov	r6, r1
 8027488:	4614      	mov	r4, r2
 802748a:	4605      	mov	r5, r0
 802748c:	b118      	cbz	r0, 8027496 <__swbuf_r+0x12>
 802748e:	6a03      	ldr	r3, [r0, #32]
 8027490:	b90b      	cbnz	r3, 8027496 <__swbuf_r+0x12>
 8027492:	f7fd fb77 	bl	8024b84 <__sinit>
 8027496:	69a3      	ldr	r3, [r4, #24]
 8027498:	60a3      	str	r3, [r4, #8]
 802749a:	89a3      	ldrh	r3, [r4, #12]
 802749c:	071a      	lsls	r2, r3, #28
 802749e:	d501      	bpl.n	80274a4 <__swbuf_r+0x20>
 80274a0:	6923      	ldr	r3, [r4, #16]
 80274a2:	b943      	cbnz	r3, 80274b6 <__swbuf_r+0x32>
 80274a4:	4621      	mov	r1, r4
 80274a6:	4628      	mov	r0, r5
 80274a8:	f000 f82a 	bl	8027500 <__swsetup_r>
 80274ac:	b118      	cbz	r0, 80274b6 <__swbuf_r+0x32>
 80274ae:	f04f 37ff 	mov.w	r7, #4294967295
 80274b2:	4638      	mov	r0, r7
 80274b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80274b6:	6823      	ldr	r3, [r4, #0]
 80274b8:	6922      	ldr	r2, [r4, #16]
 80274ba:	1a98      	subs	r0, r3, r2
 80274bc:	6963      	ldr	r3, [r4, #20]
 80274be:	b2f6      	uxtb	r6, r6
 80274c0:	4283      	cmp	r3, r0
 80274c2:	4637      	mov	r7, r6
 80274c4:	dc05      	bgt.n	80274d2 <__swbuf_r+0x4e>
 80274c6:	4621      	mov	r1, r4
 80274c8:	4628      	mov	r0, r5
 80274ca:	f7ff ffb3 	bl	8027434 <_fflush_r>
 80274ce:	2800      	cmp	r0, #0
 80274d0:	d1ed      	bne.n	80274ae <__swbuf_r+0x2a>
 80274d2:	68a3      	ldr	r3, [r4, #8]
 80274d4:	3b01      	subs	r3, #1
 80274d6:	60a3      	str	r3, [r4, #8]
 80274d8:	6823      	ldr	r3, [r4, #0]
 80274da:	1c5a      	adds	r2, r3, #1
 80274dc:	6022      	str	r2, [r4, #0]
 80274de:	701e      	strb	r6, [r3, #0]
 80274e0:	6962      	ldr	r2, [r4, #20]
 80274e2:	1c43      	adds	r3, r0, #1
 80274e4:	429a      	cmp	r2, r3
 80274e6:	d004      	beq.n	80274f2 <__swbuf_r+0x6e>
 80274e8:	89a3      	ldrh	r3, [r4, #12]
 80274ea:	07db      	lsls	r3, r3, #31
 80274ec:	d5e1      	bpl.n	80274b2 <__swbuf_r+0x2e>
 80274ee:	2e0a      	cmp	r6, #10
 80274f0:	d1df      	bne.n	80274b2 <__swbuf_r+0x2e>
 80274f2:	4621      	mov	r1, r4
 80274f4:	4628      	mov	r0, r5
 80274f6:	f7ff ff9d 	bl	8027434 <_fflush_r>
 80274fa:	2800      	cmp	r0, #0
 80274fc:	d0d9      	beq.n	80274b2 <__swbuf_r+0x2e>
 80274fe:	e7d6      	b.n	80274ae <__swbuf_r+0x2a>

08027500 <__swsetup_r>:
 8027500:	b538      	push	{r3, r4, r5, lr}
 8027502:	4b29      	ldr	r3, [pc, #164]	@ (80275a8 <__swsetup_r+0xa8>)
 8027504:	4605      	mov	r5, r0
 8027506:	6818      	ldr	r0, [r3, #0]
 8027508:	460c      	mov	r4, r1
 802750a:	b118      	cbz	r0, 8027514 <__swsetup_r+0x14>
 802750c:	6a03      	ldr	r3, [r0, #32]
 802750e:	b90b      	cbnz	r3, 8027514 <__swsetup_r+0x14>
 8027510:	f7fd fb38 	bl	8024b84 <__sinit>
 8027514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027518:	0719      	lsls	r1, r3, #28
 802751a:	d422      	bmi.n	8027562 <__swsetup_r+0x62>
 802751c:	06da      	lsls	r2, r3, #27
 802751e:	d407      	bmi.n	8027530 <__swsetup_r+0x30>
 8027520:	2209      	movs	r2, #9
 8027522:	602a      	str	r2, [r5, #0]
 8027524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027528:	81a3      	strh	r3, [r4, #12]
 802752a:	f04f 30ff 	mov.w	r0, #4294967295
 802752e:	e033      	b.n	8027598 <__swsetup_r+0x98>
 8027530:	0758      	lsls	r0, r3, #29
 8027532:	d512      	bpl.n	802755a <__swsetup_r+0x5a>
 8027534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027536:	b141      	cbz	r1, 802754a <__swsetup_r+0x4a>
 8027538:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802753c:	4299      	cmp	r1, r3
 802753e:	d002      	beq.n	8027546 <__swsetup_r+0x46>
 8027540:	4628      	mov	r0, r5
 8027542:	f7fe fbc9 	bl	8025cd8 <_free_r>
 8027546:	2300      	movs	r3, #0
 8027548:	6363      	str	r3, [r4, #52]	@ 0x34
 802754a:	89a3      	ldrh	r3, [r4, #12]
 802754c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8027550:	81a3      	strh	r3, [r4, #12]
 8027552:	2300      	movs	r3, #0
 8027554:	6063      	str	r3, [r4, #4]
 8027556:	6923      	ldr	r3, [r4, #16]
 8027558:	6023      	str	r3, [r4, #0]
 802755a:	89a3      	ldrh	r3, [r4, #12]
 802755c:	f043 0308 	orr.w	r3, r3, #8
 8027560:	81a3      	strh	r3, [r4, #12]
 8027562:	6923      	ldr	r3, [r4, #16]
 8027564:	b94b      	cbnz	r3, 802757a <__swsetup_r+0x7a>
 8027566:	89a3      	ldrh	r3, [r4, #12]
 8027568:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802756c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8027570:	d003      	beq.n	802757a <__swsetup_r+0x7a>
 8027572:	4621      	mov	r1, r4
 8027574:	4628      	mov	r0, r5
 8027576:	f000 f883 	bl	8027680 <__smakebuf_r>
 802757a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802757e:	f013 0201 	ands.w	r2, r3, #1
 8027582:	d00a      	beq.n	802759a <__swsetup_r+0x9a>
 8027584:	2200      	movs	r2, #0
 8027586:	60a2      	str	r2, [r4, #8]
 8027588:	6962      	ldr	r2, [r4, #20]
 802758a:	4252      	negs	r2, r2
 802758c:	61a2      	str	r2, [r4, #24]
 802758e:	6922      	ldr	r2, [r4, #16]
 8027590:	b942      	cbnz	r2, 80275a4 <__swsetup_r+0xa4>
 8027592:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8027596:	d1c5      	bne.n	8027524 <__swsetup_r+0x24>
 8027598:	bd38      	pop	{r3, r4, r5, pc}
 802759a:	0799      	lsls	r1, r3, #30
 802759c:	bf58      	it	pl
 802759e:	6962      	ldrpl	r2, [r4, #20]
 80275a0:	60a2      	str	r2, [r4, #8]
 80275a2:	e7f4      	b.n	802758e <__swsetup_r+0x8e>
 80275a4:	2000      	movs	r0, #0
 80275a6:	e7f7      	b.n	8027598 <__swsetup_r+0x98>
 80275a8:	2000062c 	.word	0x2000062c

080275ac <_raise_r>:
 80275ac:	291f      	cmp	r1, #31
 80275ae:	b538      	push	{r3, r4, r5, lr}
 80275b0:	4605      	mov	r5, r0
 80275b2:	460c      	mov	r4, r1
 80275b4:	d904      	bls.n	80275c0 <_raise_r+0x14>
 80275b6:	2316      	movs	r3, #22
 80275b8:	6003      	str	r3, [r0, #0]
 80275ba:	f04f 30ff 	mov.w	r0, #4294967295
 80275be:	bd38      	pop	{r3, r4, r5, pc}
 80275c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80275c2:	b112      	cbz	r2, 80275ca <_raise_r+0x1e>
 80275c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80275c8:	b94b      	cbnz	r3, 80275de <_raise_r+0x32>
 80275ca:	4628      	mov	r0, r5
 80275cc:	f000 f830 	bl	8027630 <_getpid_r>
 80275d0:	4622      	mov	r2, r4
 80275d2:	4601      	mov	r1, r0
 80275d4:	4628      	mov	r0, r5
 80275d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80275da:	f000 b817 	b.w	802760c <_kill_r>
 80275de:	2b01      	cmp	r3, #1
 80275e0:	d00a      	beq.n	80275f8 <_raise_r+0x4c>
 80275e2:	1c59      	adds	r1, r3, #1
 80275e4:	d103      	bne.n	80275ee <_raise_r+0x42>
 80275e6:	2316      	movs	r3, #22
 80275e8:	6003      	str	r3, [r0, #0]
 80275ea:	2001      	movs	r0, #1
 80275ec:	e7e7      	b.n	80275be <_raise_r+0x12>
 80275ee:	2100      	movs	r1, #0
 80275f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80275f4:	4620      	mov	r0, r4
 80275f6:	4798      	blx	r3
 80275f8:	2000      	movs	r0, #0
 80275fa:	e7e0      	b.n	80275be <_raise_r+0x12>

080275fc <raise>:
 80275fc:	4b02      	ldr	r3, [pc, #8]	@ (8027608 <raise+0xc>)
 80275fe:	4601      	mov	r1, r0
 8027600:	6818      	ldr	r0, [r3, #0]
 8027602:	f7ff bfd3 	b.w	80275ac <_raise_r>
 8027606:	bf00      	nop
 8027608:	2000062c 	.word	0x2000062c

0802760c <_kill_r>:
 802760c:	b538      	push	{r3, r4, r5, lr}
 802760e:	4d07      	ldr	r5, [pc, #28]	@ (802762c <_kill_r+0x20>)
 8027610:	2300      	movs	r3, #0
 8027612:	4604      	mov	r4, r0
 8027614:	4608      	mov	r0, r1
 8027616:	4611      	mov	r1, r2
 8027618:	602b      	str	r3, [r5, #0]
 802761a:	f7e5 fbc1 	bl	800cda0 <_kill>
 802761e:	1c43      	adds	r3, r0, #1
 8027620:	d102      	bne.n	8027628 <_kill_r+0x1c>
 8027622:	682b      	ldr	r3, [r5, #0]
 8027624:	b103      	cbz	r3, 8027628 <_kill_r+0x1c>
 8027626:	6023      	str	r3, [r4, #0]
 8027628:	bd38      	pop	{r3, r4, r5, pc}
 802762a:	bf00      	nop
 802762c:	20003210 	.word	0x20003210

08027630 <_getpid_r>:
 8027630:	f7e5 bbb4 	b.w	800cd9c <_getpid>

08027634 <__swhatbuf_r>:
 8027634:	b570      	push	{r4, r5, r6, lr}
 8027636:	460c      	mov	r4, r1
 8027638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802763c:	2900      	cmp	r1, #0
 802763e:	b096      	sub	sp, #88	@ 0x58
 8027640:	4615      	mov	r5, r2
 8027642:	461e      	mov	r6, r3
 8027644:	da0d      	bge.n	8027662 <__swhatbuf_r+0x2e>
 8027646:	89a3      	ldrh	r3, [r4, #12]
 8027648:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802764c:	f04f 0100 	mov.w	r1, #0
 8027650:	bf14      	ite	ne
 8027652:	2340      	movne	r3, #64	@ 0x40
 8027654:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8027658:	2000      	movs	r0, #0
 802765a:	6031      	str	r1, [r6, #0]
 802765c:	602b      	str	r3, [r5, #0]
 802765e:	b016      	add	sp, #88	@ 0x58
 8027660:	bd70      	pop	{r4, r5, r6, pc}
 8027662:	466a      	mov	r2, sp
 8027664:	f000 f848 	bl	80276f8 <_fstat_r>
 8027668:	2800      	cmp	r0, #0
 802766a:	dbec      	blt.n	8027646 <__swhatbuf_r+0x12>
 802766c:	9901      	ldr	r1, [sp, #4]
 802766e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8027672:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8027676:	4259      	negs	r1, r3
 8027678:	4159      	adcs	r1, r3
 802767a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802767e:	e7eb      	b.n	8027658 <__swhatbuf_r+0x24>

08027680 <__smakebuf_r>:
 8027680:	898b      	ldrh	r3, [r1, #12]
 8027682:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027684:	079d      	lsls	r5, r3, #30
 8027686:	4606      	mov	r6, r0
 8027688:	460c      	mov	r4, r1
 802768a:	d507      	bpl.n	802769c <__smakebuf_r+0x1c>
 802768c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8027690:	6023      	str	r3, [r4, #0]
 8027692:	6123      	str	r3, [r4, #16]
 8027694:	2301      	movs	r3, #1
 8027696:	6163      	str	r3, [r4, #20]
 8027698:	b003      	add	sp, #12
 802769a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802769c:	ab01      	add	r3, sp, #4
 802769e:	466a      	mov	r2, sp
 80276a0:	f7ff ffc8 	bl	8027634 <__swhatbuf_r>
 80276a4:	9f00      	ldr	r7, [sp, #0]
 80276a6:	4605      	mov	r5, r0
 80276a8:	4639      	mov	r1, r7
 80276aa:	4630      	mov	r0, r6
 80276ac:	f7fb faa8 	bl	8022c00 <_malloc_r>
 80276b0:	b948      	cbnz	r0, 80276c6 <__smakebuf_r+0x46>
 80276b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80276b6:	059a      	lsls	r2, r3, #22
 80276b8:	d4ee      	bmi.n	8027698 <__smakebuf_r+0x18>
 80276ba:	f023 0303 	bic.w	r3, r3, #3
 80276be:	f043 0302 	orr.w	r3, r3, #2
 80276c2:	81a3      	strh	r3, [r4, #12]
 80276c4:	e7e2      	b.n	802768c <__smakebuf_r+0xc>
 80276c6:	89a3      	ldrh	r3, [r4, #12]
 80276c8:	6020      	str	r0, [r4, #0]
 80276ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80276ce:	81a3      	strh	r3, [r4, #12]
 80276d0:	9b01      	ldr	r3, [sp, #4]
 80276d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80276d6:	b15b      	cbz	r3, 80276f0 <__smakebuf_r+0x70>
 80276d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80276dc:	4630      	mov	r0, r6
 80276de:	f000 f81d 	bl	802771c <_isatty_r>
 80276e2:	b128      	cbz	r0, 80276f0 <__smakebuf_r+0x70>
 80276e4:	89a3      	ldrh	r3, [r4, #12]
 80276e6:	f023 0303 	bic.w	r3, r3, #3
 80276ea:	f043 0301 	orr.w	r3, r3, #1
 80276ee:	81a3      	strh	r3, [r4, #12]
 80276f0:	89a3      	ldrh	r3, [r4, #12]
 80276f2:	431d      	orrs	r5, r3
 80276f4:	81a5      	strh	r5, [r4, #12]
 80276f6:	e7cf      	b.n	8027698 <__smakebuf_r+0x18>

080276f8 <_fstat_r>:
 80276f8:	b538      	push	{r3, r4, r5, lr}
 80276fa:	4d07      	ldr	r5, [pc, #28]	@ (8027718 <_fstat_r+0x20>)
 80276fc:	2300      	movs	r3, #0
 80276fe:	4604      	mov	r4, r0
 8027700:	4608      	mov	r0, r1
 8027702:	4611      	mov	r1, r2
 8027704:	602b      	str	r3, [r5, #0]
 8027706:	f7e5 fb7a 	bl	800cdfe <_fstat>
 802770a:	1c43      	adds	r3, r0, #1
 802770c:	d102      	bne.n	8027714 <_fstat_r+0x1c>
 802770e:	682b      	ldr	r3, [r5, #0]
 8027710:	b103      	cbz	r3, 8027714 <_fstat_r+0x1c>
 8027712:	6023      	str	r3, [r4, #0]
 8027714:	bd38      	pop	{r3, r4, r5, pc}
 8027716:	bf00      	nop
 8027718:	20003210 	.word	0x20003210

0802771c <_isatty_r>:
 802771c:	b538      	push	{r3, r4, r5, lr}
 802771e:	4d06      	ldr	r5, [pc, #24]	@ (8027738 <_isatty_r+0x1c>)
 8027720:	2300      	movs	r3, #0
 8027722:	4604      	mov	r4, r0
 8027724:	4608      	mov	r0, r1
 8027726:	602b      	str	r3, [r5, #0]
 8027728:	f7e5 fb6e 	bl	800ce08 <_isatty>
 802772c:	1c43      	adds	r3, r0, #1
 802772e:	d102      	bne.n	8027736 <_isatty_r+0x1a>
 8027730:	682b      	ldr	r3, [r5, #0]
 8027732:	b103      	cbz	r3, 8027736 <_isatty_r+0x1a>
 8027734:	6023      	str	r3, [r4, #0]
 8027736:	bd38      	pop	{r3, r4, r5, pc}
 8027738:	20003210 	.word	0x20003210

0802773c <atan2>:
 802773c:	f000 ba30 	b.w	8027ba0 <__ieee754_atan2>

08027740 <powf>:
 8027740:	b508      	push	{r3, lr}
 8027742:	ed2d 8b04 	vpush	{d8-d9}
 8027746:	eeb0 8a60 	vmov.f32	s16, s1
 802774a:	eeb0 9a40 	vmov.f32	s18, s0
 802774e:	f000 fe0f 	bl	8028370 <__ieee754_powf>
 8027752:	eeb4 8a48 	vcmp.f32	s16, s16
 8027756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802775a:	eef0 8a40 	vmov.f32	s17, s0
 802775e:	d63e      	bvs.n	80277de <powf+0x9e>
 8027760:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8027764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027768:	d112      	bne.n	8027790 <powf+0x50>
 802776a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802776e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027772:	d039      	beq.n	80277e8 <powf+0xa8>
 8027774:	eeb0 0a48 	vmov.f32	s0, s16
 8027778:	f000 f90e 	bl	8027998 <finitef>
 802777c:	b378      	cbz	r0, 80277de <powf+0x9e>
 802777e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8027782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027786:	d52a      	bpl.n	80277de <powf+0x9e>
 8027788:	f7fd fbfc 	bl	8024f84 <__errno>
 802778c:	2322      	movs	r3, #34	@ 0x22
 802778e:	e014      	b.n	80277ba <powf+0x7a>
 8027790:	f000 f902 	bl	8027998 <finitef>
 8027794:	b998      	cbnz	r0, 80277be <powf+0x7e>
 8027796:	eeb0 0a49 	vmov.f32	s0, s18
 802779a:	f000 f8fd 	bl	8027998 <finitef>
 802779e:	b170      	cbz	r0, 80277be <powf+0x7e>
 80277a0:	eeb0 0a48 	vmov.f32	s0, s16
 80277a4:	f000 f8f8 	bl	8027998 <finitef>
 80277a8:	b148      	cbz	r0, 80277be <powf+0x7e>
 80277aa:	eef4 8a68 	vcmp.f32	s17, s17
 80277ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80277b2:	d7e9      	bvc.n	8027788 <powf+0x48>
 80277b4:	f7fd fbe6 	bl	8024f84 <__errno>
 80277b8:	2321      	movs	r3, #33	@ 0x21
 80277ba:	6003      	str	r3, [r0, #0]
 80277bc:	e00f      	b.n	80277de <powf+0x9e>
 80277be:	eef5 8a40 	vcmp.f32	s17, #0.0
 80277c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80277c6:	d10a      	bne.n	80277de <powf+0x9e>
 80277c8:	eeb0 0a49 	vmov.f32	s0, s18
 80277cc:	f000 f8e4 	bl	8027998 <finitef>
 80277d0:	b128      	cbz	r0, 80277de <powf+0x9e>
 80277d2:	eeb0 0a48 	vmov.f32	s0, s16
 80277d6:	f000 f8df 	bl	8027998 <finitef>
 80277da:	2800      	cmp	r0, #0
 80277dc:	d1d4      	bne.n	8027788 <powf+0x48>
 80277de:	eeb0 0a68 	vmov.f32	s0, s17
 80277e2:	ecbd 8b04 	vpop	{d8-d9}
 80277e6:	bd08      	pop	{r3, pc}
 80277e8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80277ec:	e7f7      	b.n	80277de <powf+0x9e>
	...

080277f0 <sqrtf>:
 80277f0:	b508      	push	{r3, lr}
 80277f2:	ed2d 8b02 	vpush	{d8}
 80277f6:	eeb0 8a40 	vmov.f32	s16, s0
 80277fa:	f000 f904 	bl	8027a06 <__ieee754_sqrtf>
 80277fe:	eeb4 8a48 	vcmp.f32	s16, s16
 8027802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027806:	d60c      	bvs.n	8027822 <sqrtf+0x32>
 8027808:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8027828 <sqrtf+0x38>
 802780c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8027810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027814:	d505      	bpl.n	8027822 <sqrtf+0x32>
 8027816:	f7fd fbb5 	bl	8024f84 <__errno>
 802781a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802781e:	2321      	movs	r3, #33	@ 0x21
 8027820:	6003      	str	r3, [r0, #0]
 8027822:	ecbd 8b02 	vpop	{d8}
 8027826:	bd08      	pop	{r3, pc}
 8027828:	00000000 	.word	0x00000000

0802782c <cosf>:
 802782c:	ee10 3a10 	vmov	r3, s0
 8027830:	b507      	push	{r0, r1, r2, lr}
 8027832:	4a1e      	ldr	r2, [pc, #120]	@ (80278ac <cosf+0x80>)
 8027834:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8027838:	4293      	cmp	r3, r2
 802783a:	d806      	bhi.n	802784a <cosf+0x1e>
 802783c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80278b0 <cosf+0x84>
 8027840:	b003      	add	sp, #12
 8027842:	f85d eb04 	ldr.w	lr, [sp], #4
 8027846:	f000 bc13 	b.w	8028070 <__kernel_cosf>
 802784a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802784e:	d304      	bcc.n	802785a <cosf+0x2e>
 8027850:	ee30 0a40 	vsub.f32	s0, s0, s0
 8027854:	b003      	add	sp, #12
 8027856:	f85d fb04 	ldr.w	pc, [sp], #4
 802785a:	4668      	mov	r0, sp
 802785c:	f001 f858 	bl	8028910 <__ieee754_rem_pio2f>
 8027860:	f000 0003 	and.w	r0, r0, #3
 8027864:	2801      	cmp	r0, #1
 8027866:	d009      	beq.n	802787c <cosf+0x50>
 8027868:	2802      	cmp	r0, #2
 802786a:	d010      	beq.n	802788e <cosf+0x62>
 802786c:	b9b0      	cbnz	r0, 802789c <cosf+0x70>
 802786e:	eddd 0a01 	vldr	s1, [sp, #4]
 8027872:	ed9d 0a00 	vldr	s0, [sp]
 8027876:	f000 fbfb 	bl	8028070 <__kernel_cosf>
 802787a:	e7eb      	b.n	8027854 <cosf+0x28>
 802787c:	eddd 0a01 	vldr	s1, [sp, #4]
 8027880:	ed9d 0a00 	vldr	s0, [sp]
 8027884:	f000 fc4c 	bl	8028120 <__kernel_sinf>
 8027888:	eeb1 0a40 	vneg.f32	s0, s0
 802788c:	e7e2      	b.n	8027854 <cosf+0x28>
 802788e:	eddd 0a01 	vldr	s1, [sp, #4]
 8027892:	ed9d 0a00 	vldr	s0, [sp]
 8027896:	f000 fbeb 	bl	8028070 <__kernel_cosf>
 802789a:	e7f5      	b.n	8027888 <cosf+0x5c>
 802789c:	eddd 0a01 	vldr	s1, [sp, #4]
 80278a0:	ed9d 0a00 	vldr	s0, [sp]
 80278a4:	2001      	movs	r0, #1
 80278a6:	f000 fc3b 	bl	8028120 <__kernel_sinf>
 80278aa:	e7d3      	b.n	8027854 <cosf+0x28>
 80278ac:	3f490fd8 	.word	0x3f490fd8
 80278b0:	00000000 	.word	0x00000000

080278b4 <sinf>:
 80278b4:	ee10 3a10 	vmov	r3, s0
 80278b8:	b507      	push	{r0, r1, r2, lr}
 80278ba:	4a1f      	ldr	r2, [pc, #124]	@ (8027938 <sinf+0x84>)
 80278bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80278c0:	4293      	cmp	r3, r2
 80278c2:	d807      	bhi.n	80278d4 <sinf+0x20>
 80278c4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 802793c <sinf+0x88>
 80278c8:	2000      	movs	r0, #0
 80278ca:	b003      	add	sp, #12
 80278cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80278d0:	f000 bc26 	b.w	8028120 <__kernel_sinf>
 80278d4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80278d8:	d304      	bcc.n	80278e4 <sinf+0x30>
 80278da:	ee30 0a40 	vsub.f32	s0, s0, s0
 80278de:	b003      	add	sp, #12
 80278e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80278e4:	4668      	mov	r0, sp
 80278e6:	f001 f813 	bl	8028910 <__ieee754_rem_pio2f>
 80278ea:	f000 0003 	and.w	r0, r0, #3
 80278ee:	2801      	cmp	r0, #1
 80278f0:	d00a      	beq.n	8027908 <sinf+0x54>
 80278f2:	2802      	cmp	r0, #2
 80278f4:	d00f      	beq.n	8027916 <sinf+0x62>
 80278f6:	b9c0      	cbnz	r0, 802792a <sinf+0x76>
 80278f8:	eddd 0a01 	vldr	s1, [sp, #4]
 80278fc:	ed9d 0a00 	vldr	s0, [sp]
 8027900:	2001      	movs	r0, #1
 8027902:	f000 fc0d 	bl	8028120 <__kernel_sinf>
 8027906:	e7ea      	b.n	80278de <sinf+0x2a>
 8027908:	eddd 0a01 	vldr	s1, [sp, #4]
 802790c:	ed9d 0a00 	vldr	s0, [sp]
 8027910:	f000 fbae 	bl	8028070 <__kernel_cosf>
 8027914:	e7e3      	b.n	80278de <sinf+0x2a>
 8027916:	eddd 0a01 	vldr	s1, [sp, #4]
 802791a:	ed9d 0a00 	vldr	s0, [sp]
 802791e:	2001      	movs	r0, #1
 8027920:	f000 fbfe 	bl	8028120 <__kernel_sinf>
 8027924:	eeb1 0a40 	vneg.f32	s0, s0
 8027928:	e7d9      	b.n	80278de <sinf+0x2a>
 802792a:	eddd 0a01 	vldr	s1, [sp, #4]
 802792e:	ed9d 0a00 	vldr	s0, [sp]
 8027932:	f000 fb9d 	bl	8028070 <__kernel_cosf>
 8027936:	e7f5      	b.n	8027924 <sinf+0x70>
 8027938:	3f490fd8 	.word	0x3f490fd8
 802793c:	00000000 	.word	0x00000000

08027940 <tanf>:
 8027940:	ee10 3a10 	vmov	r3, s0
 8027944:	b507      	push	{r0, r1, r2, lr}
 8027946:	4a12      	ldr	r2, [pc, #72]	@ (8027990 <tanf+0x50>)
 8027948:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802794c:	4293      	cmp	r3, r2
 802794e:	d807      	bhi.n	8027960 <tanf+0x20>
 8027950:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8027994 <tanf+0x54>
 8027954:	2001      	movs	r0, #1
 8027956:	b003      	add	sp, #12
 8027958:	f85d eb04 	ldr.w	lr, [sp], #4
 802795c:	f000 bc28 	b.w	80281b0 <__kernel_tanf>
 8027960:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8027964:	d304      	bcc.n	8027970 <tanf+0x30>
 8027966:	ee30 0a40 	vsub.f32	s0, s0, s0
 802796a:	b003      	add	sp, #12
 802796c:	f85d fb04 	ldr.w	pc, [sp], #4
 8027970:	4668      	mov	r0, sp
 8027972:	f000 ffcd 	bl	8028910 <__ieee754_rem_pio2f>
 8027976:	0040      	lsls	r0, r0, #1
 8027978:	f000 0002 	and.w	r0, r0, #2
 802797c:	eddd 0a01 	vldr	s1, [sp, #4]
 8027980:	ed9d 0a00 	vldr	s0, [sp]
 8027984:	f1c0 0001 	rsb	r0, r0, #1
 8027988:	f000 fc12 	bl	80281b0 <__kernel_tanf>
 802798c:	e7ed      	b.n	802796a <tanf+0x2a>
 802798e:	bf00      	nop
 8027990:	3f490fda 	.word	0x3f490fda
 8027994:	00000000 	.word	0x00000000

08027998 <finitef>:
 8027998:	ee10 3a10 	vmov	r3, s0
 802799c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80279a0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80279a4:	bfac      	ite	ge
 80279a6:	2000      	movge	r0, #0
 80279a8:	2001      	movlt	r0, #1
 80279aa:	4770      	bx	lr

080279ac <lroundf>:
 80279ac:	ee10 1a10 	vmov	r1, s0
 80279b0:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 80279b4:	2900      	cmp	r1, #0
 80279b6:	f1a3 027f 	sub.w	r2, r3, #127	@ 0x7f
 80279ba:	bfb4      	ite	lt
 80279bc:	f04f 30ff 	movlt.w	r0, #4294967295
 80279c0:	2001      	movge	r0, #1
 80279c2:	2a1e      	cmp	r2, #30
 80279c4:	dc1a      	bgt.n	80279fc <lroundf+0x50>
 80279c6:	2a00      	cmp	r2, #0
 80279c8:	da03      	bge.n	80279d2 <lroundf+0x26>
 80279ca:	3201      	adds	r2, #1
 80279cc:	bf18      	it	ne
 80279ce:	2000      	movne	r0, #0
 80279d0:	4770      	bx	lr
 80279d2:	2a16      	cmp	r2, #22
 80279d4:	bfd8      	it	le
 80279d6:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 80279da:	f3c1 0116 	ubfx	r1, r1, #0, #23
 80279de:	bfd8      	it	le
 80279e0:	4113      	asrle	r3, r2
 80279e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80279e6:	bfcd      	iteet	gt
 80279e8:	3b96      	subgt	r3, #150	@ 0x96
 80279ea:	185b      	addle	r3, r3, r1
 80279ec:	f1c2 0217 	rsble	r2, r2, #23
 80279f0:	fa01 f303 	lslgt.w	r3, r1, r3
 80279f4:	bfd8      	it	le
 80279f6:	40d3      	lsrle	r3, r2
 80279f8:	4358      	muls	r0, r3
 80279fa:	4770      	bx	lr
 80279fc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8027a00:	ee17 0a90 	vmov	r0, s15
 8027a04:	4770      	bx	lr

08027a06 <__ieee754_sqrtf>:
 8027a06:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8027a0a:	4770      	bx	lr

08027a0c <ceilf>:
 8027a0c:	ee10 3a10 	vmov	r3, s0
 8027a10:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8027a14:	3a7f      	subs	r2, #127	@ 0x7f
 8027a16:	2a16      	cmp	r2, #22
 8027a18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8027a1c:	dc2a      	bgt.n	8027a74 <ceilf+0x68>
 8027a1e:	2a00      	cmp	r2, #0
 8027a20:	da11      	bge.n	8027a46 <ceilf+0x3a>
 8027a22:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8027a88 <ceilf+0x7c>
 8027a26:	ee30 0a27 	vadd.f32	s0, s0, s15
 8027a2a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8027a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a32:	dd05      	ble.n	8027a40 <ceilf+0x34>
 8027a34:	2b00      	cmp	r3, #0
 8027a36:	db23      	blt.n	8027a80 <ceilf+0x74>
 8027a38:	2900      	cmp	r1, #0
 8027a3a:	bf18      	it	ne
 8027a3c:	f04f 537e 	movne.w	r3, #1065353216	@ 0x3f800000
 8027a40:	ee00 3a10 	vmov	s0, r3
 8027a44:	4770      	bx	lr
 8027a46:	4911      	ldr	r1, [pc, #68]	@ (8027a8c <ceilf+0x80>)
 8027a48:	4111      	asrs	r1, r2
 8027a4a:	420b      	tst	r3, r1
 8027a4c:	d0fa      	beq.n	8027a44 <ceilf+0x38>
 8027a4e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8027a88 <ceilf+0x7c>
 8027a52:	ee30 0a27 	vadd.f32	s0, s0, s15
 8027a56:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8027a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a5e:	ddef      	ble.n	8027a40 <ceilf+0x34>
 8027a60:	2b00      	cmp	r3, #0
 8027a62:	bfc2      	ittt	gt
 8027a64:	f44f 0000 	movgt.w	r0, #8388608	@ 0x800000
 8027a68:	fa40 f202 	asrgt.w	r2, r0, r2
 8027a6c:	189b      	addgt	r3, r3, r2
 8027a6e:	ea23 0301 	bic.w	r3, r3, r1
 8027a72:	e7e5      	b.n	8027a40 <ceilf+0x34>
 8027a74:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8027a78:	d3e4      	bcc.n	8027a44 <ceilf+0x38>
 8027a7a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8027a7e:	4770      	bx	lr
 8027a80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8027a84:	e7dc      	b.n	8027a40 <ceilf+0x34>
 8027a86:	bf00      	nop
 8027a88:	7149f2ca 	.word	0x7149f2ca
 8027a8c:	007fffff 	.word	0x007fffff

08027a90 <floorf>:
 8027a90:	ee10 3a10 	vmov	r3, s0
 8027a94:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8027a98:	3a7f      	subs	r2, #127	@ 0x7f
 8027a9a:	2a16      	cmp	r2, #22
 8027a9c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8027aa0:	dc2b      	bgt.n	8027afa <floorf+0x6a>
 8027aa2:	2a00      	cmp	r2, #0
 8027aa4:	da12      	bge.n	8027acc <floorf+0x3c>
 8027aa6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8027b0c <floorf+0x7c>
 8027aaa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8027aae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8027ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ab6:	dd06      	ble.n	8027ac6 <floorf+0x36>
 8027ab8:	2b00      	cmp	r3, #0
 8027aba:	da24      	bge.n	8027b06 <floorf+0x76>
 8027abc:	2900      	cmp	r1, #0
 8027abe:	4b14      	ldr	r3, [pc, #80]	@ (8027b10 <floorf+0x80>)
 8027ac0:	bf08      	it	eq
 8027ac2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8027ac6:	ee00 3a10 	vmov	s0, r3
 8027aca:	4770      	bx	lr
 8027acc:	4911      	ldr	r1, [pc, #68]	@ (8027b14 <floorf+0x84>)
 8027ace:	4111      	asrs	r1, r2
 8027ad0:	420b      	tst	r3, r1
 8027ad2:	d0fa      	beq.n	8027aca <floorf+0x3a>
 8027ad4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8027b0c <floorf+0x7c>
 8027ad8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8027adc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8027ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ae4:	ddef      	ble.n	8027ac6 <floorf+0x36>
 8027ae6:	2b00      	cmp	r3, #0
 8027ae8:	bfbe      	ittt	lt
 8027aea:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8027aee:	fa40 f202 	asrlt.w	r2, r0, r2
 8027af2:	189b      	addlt	r3, r3, r2
 8027af4:	ea23 0301 	bic.w	r3, r3, r1
 8027af8:	e7e5      	b.n	8027ac6 <floorf+0x36>
 8027afa:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8027afe:	d3e4      	bcc.n	8027aca <floorf+0x3a>
 8027b00:	ee30 0a00 	vadd.f32	s0, s0, s0
 8027b04:	4770      	bx	lr
 8027b06:	2300      	movs	r3, #0
 8027b08:	e7dd      	b.n	8027ac6 <floorf+0x36>
 8027b0a:	bf00      	nop
 8027b0c:	7149f2ca 	.word	0x7149f2ca
 8027b10:	bf800000 	.word	0xbf800000
 8027b14:	007fffff 	.word	0x007fffff

08027b18 <roundf>:
 8027b18:	ee10 0a10 	vmov	r0, s0
 8027b1c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8027b20:	3a7f      	subs	r2, #127	@ 0x7f
 8027b22:	2a16      	cmp	r2, #22
 8027b24:	dc15      	bgt.n	8027b52 <roundf+0x3a>
 8027b26:	2a00      	cmp	r2, #0
 8027b28:	da08      	bge.n	8027b3c <roundf+0x24>
 8027b2a:	3201      	adds	r2, #1
 8027b2c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8027b30:	d101      	bne.n	8027b36 <roundf+0x1e>
 8027b32:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8027b36:	ee00 3a10 	vmov	s0, r3
 8027b3a:	4770      	bx	lr
 8027b3c:	4907      	ldr	r1, [pc, #28]	@ (8027b5c <roundf+0x44>)
 8027b3e:	4111      	asrs	r1, r2
 8027b40:	4201      	tst	r1, r0
 8027b42:	d0fa      	beq.n	8027b3a <roundf+0x22>
 8027b44:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8027b48:	4113      	asrs	r3, r2
 8027b4a:	4403      	add	r3, r0
 8027b4c:	ea23 0301 	bic.w	r3, r3, r1
 8027b50:	e7f1      	b.n	8027b36 <roundf+0x1e>
 8027b52:	2a80      	cmp	r2, #128	@ 0x80
 8027b54:	d1f1      	bne.n	8027b3a <roundf+0x22>
 8027b56:	ee30 0a00 	vadd.f32	s0, s0, s0
 8027b5a:	4770      	bx	lr
 8027b5c:	007fffff 	.word	0x007fffff

08027b60 <truncf>:
 8027b60:	ee10 0a10 	vmov	r0, s0
 8027b64:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8027b68:	3a7f      	subs	r2, #127	@ 0x7f
 8027b6a:	2a16      	cmp	r2, #22
 8027b6c:	dc0e      	bgt.n	8027b8c <truncf+0x2c>
 8027b6e:	2a00      	cmp	r2, #0
 8027b70:	bfa4      	itt	ge
 8027b72:	4909      	ldrge	r1, [pc, #36]	@ (8027b98 <truncf+0x38>)
 8027b74:	fa41 f202 	asrge.w	r2, r1, r2
 8027b78:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8027b7c:	bfa5      	ittet	ge
 8027b7e:	4002      	andge	r2, r0
 8027b80:	4313      	orrge	r3, r2
 8027b82:	ee00 3a10 	vmovlt	s0, r3
 8027b86:	ee00 3a10 	vmovge	s0, r3
 8027b8a:	4770      	bx	lr
 8027b8c:	2a80      	cmp	r2, #128	@ 0x80
 8027b8e:	bf08      	it	eq
 8027b90:	ee30 0a00 	vaddeq.f32	s0, s0, s0
 8027b94:	4770      	bx	lr
 8027b96:	bf00      	nop
 8027b98:	ff800000 	.word	0xff800000
 8027b9c:	00000000 	.word	0x00000000

08027ba0 <__ieee754_atan2>:
 8027ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027ba4:	ec57 6b11 	vmov	r6, r7, d1
 8027ba8:	4273      	negs	r3, r6
 8027baa:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8027d28 <__ieee754_atan2+0x188>
 8027bae:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8027bb2:	4333      	orrs	r3, r6
 8027bb4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8027bb8:	4543      	cmp	r3, r8
 8027bba:	ec51 0b10 	vmov	r0, r1, d0
 8027bbe:	4635      	mov	r5, r6
 8027bc0:	d809      	bhi.n	8027bd6 <__ieee754_atan2+0x36>
 8027bc2:	4244      	negs	r4, r0
 8027bc4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8027bc8:	4304      	orrs	r4, r0
 8027bca:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8027bce:	4544      	cmp	r4, r8
 8027bd0:	468e      	mov	lr, r1
 8027bd2:	4681      	mov	r9, r0
 8027bd4:	d907      	bls.n	8027be6 <__ieee754_atan2+0x46>
 8027bd6:	4632      	mov	r2, r6
 8027bd8:	463b      	mov	r3, r7
 8027bda:	f7e0 fa9f 	bl	800811c <__adddf3>
 8027bde:	ec41 0b10 	vmov	d0, r0, r1
 8027be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027be6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8027bea:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8027bee:	4334      	orrs	r4, r6
 8027bf0:	d103      	bne.n	8027bfa <__ieee754_atan2+0x5a>
 8027bf2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027bf6:	f000 b89b 	b.w	8027d30 <atan>
 8027bfa:	17bc      	asrs	r4, r7, #30
 8027bfc:	f004 0402 	and.w	r4, r4, #2
 8027c00:	ea53 0909 	orrs.w	r9, r3, r9
 8027c04:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8027c08:	d107      	bne.n	8027c1a <__ieee754_atan2+0x7a>
 8027c0a:	2c02      	cmp	r4, #2
 8027c0c:	d05f      	beq.n	8027cce <__ieee754_atan2+0x12e>
 8027c0e:	2c03      	cmp	r4, #3
 8027c10:	d1e5      	bne.n	8027bde <__ieee754_atan2+0x3e>
 8027c12:	a141      	add	r1, pc, #260	@ (adr r1, 8027d18 <__ieee754_atan2+0x178>)
 8027c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027c18:	e7e1      	b.n	8027bde <__ieee754_atan2+0x3e>
 8027c1a:	4315      	orrs	r5, r2
 8027c1c:	d106      	bne.n	8027c2c <__ieee754_atan2+0x8c>
 8027c1e:	f1be 0f00 	cmp.w	lr, #0
 8027c22:	da5f      	bge.n	8027ce4 <__ieee754_atan2+0x144>
 8027c24:	a13e      	add	r1, pc, #248	@ (adr r1, 8027d20 <__ieee754_atan2+0x180>)
 8027c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027c2a:	e7d8      	b.n	8027bde <__ieee754_atan2+0x3e>
 8027c2c:	4542      	cmp	r2, r8
 8027c2e:	d10f      	bne.n	8027c50 <__ieee754_atan2+0xb0>
 8027c30:	4293      	cmp	r3, r2
 8027c32:	f104 34ff 	add.w	r4, r4, #4294967295
 8027c36:	d107      	bne.n	8027c48 <__ieee754_atan2+0xa8>
 8027c38:	2c02      	cmp	r4, #2
 8027c3a:	d84c      	bhi.n	8027cd6 <__ieee754_atan2+0x136>
 8027c3c:	4b34      	ldr	r3, [pc, #208]	@ (8027d10 <__ieee754_atan2+0x170>)
 8027c3e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8027c42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027c46:	e7ca      	b.n	8027bde <__ieee754_atan2+0x3e>
 8027c48:	2c02      	cmp	r4, #2
 8027c4a:	d848      	bhi.n	8027cde <__ieee754_atan2+0x13e>
 8027c4c:	4b31      	ldr	r3, [pc, #196]	@ (8027d14 <__ieee754_atan2+0x174>)
 8027c4e:	e7f6      	b.n	8027c3e <__ieee754_atan2+0x9e>
 8027c50:	4543      	cmp	r3, r8
 8027c52:	d0e4      	beq.n	8027c1e <__ieee754_atan2+0x7e>
 8027c54:	1a9b      	subs	r3, r3, r2
 8027c56:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8027c5a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8027c5e:	da1e      	bge.n	8027c9e <__ieee754_atan2+0xfe>
 8027c60:	2f00      	cmp	r7, #0
 8027c62:	da01      	bge.n	8027c68 <__ieee754_atan2+0xc8>
 8027c64:	323c      	adds	r2, #60	@ 0x3c
 8027c66:	db1e      	blt.n	8027ca6 <__ieee754_atan2+0x106>
 8027c68:	4632      	mov	r2, r6
 8027c6a:	463b      	mov	r3, r7
 8027c6c:	f7e0 fd36 	bl	80086dc <__aeabi_ddiv>
 8027c70:	ec41 0b10 	vmov	d0, r0, r1
 8027c74:	f000 f9f4 	bl	8028060 <fabs>
 8027c78:	f000 f85a 	bl	8027d30 <atan>
 8027c7c:	ec51 0b10 	vmov	r0, r1, d0
 8027c80:	2c01      	cmp	r4, #1
 8027c82:	d013      	beq.n	8027cac <__ieee754_atan2+0x10c>
 8027c84:	2c02      	cmp	r4, #2
 8027c86:	d015      	beq.n	8027cb4 <__ieee754_atan2+0x114>
 8027c88:	2c00      	cmp	r4, #0
 8027c8a:	d0a8      	beq.n	8027bde <__ieee754_atan2+0x3e>
 8027c8c:	a318      	add	r3, pc, #96	@ (adr r3, 8027cf0 <__ieee754_atan2+0x150>)
 8027c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027c92:	f7e0 fa41 	bl	8008118 <__aeabi_dsub>
 8027c96:	a318      	add	r3, pc, #96	@ (adr r3, 8027cf8 <__ieee754_atan2+0x158>)
 8027c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027c9c:	e014      	b.n	8027cc8 <__ieee754_atan2+0x128>
 8027c9e:	a118      	add	r1, pc, #96	@ (adr r1, 8027d00 <__ieee754_atan2+0x160>)
 8027ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027ca4:	e7ec      	b.n	8027c80 <__ieee754_atan2+0xe0>
 8027ca6:	2000      	movs	r0, #0
 8027ca8:	2100      	movs	r1, #0
 8027caa:	e7e9      	b.n	8027c80 <__ieee754_atan2+0xe0>
 8027cac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8027cb0:	4619      	mov	r1, r3
 8027cb2:	e794      	b.n	8027bde <__ieee754_atan2+0x3e>
 8027cb4:	a30e      	add	r3, pc, #56	@ (adr r3, 8027cf0 <__ieee754_atan2+0x150>)
 8027cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027cba:	f7e0 fa2d 	bl	8008118 <__aeabi_dsub>
 8027cbe:	4602      	mov	r2, r0
 8027cc0:	460b      	mov	r3, r1
 8027cc2:	a10d      	add	r1, pc, #52	@ (adr r1, 8027cf8 <__ieee754_atan2+0x158>)
 8027cc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027cc8:	f7e0 fa26 	bl	8008118 <__aeabi_dsub>
 8027ccc:	e787      	b.n	8027bde <__ieee754_atan2+0x3e>
 8027cce:	a10a      	add	r1, pc, #40	@ (adr r1, 8027cf8 <__ieee754_atan2+0x158>)
 8027cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027cd4:	e783      	b.n	8027bde <__ieee754_atan2+0x3e>
 8027cd6:	a10c      	add	r1, pc, #48	@ (adr r1, 8027d08 <__ieee754_atan2+0x168>)
 8027cd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027cdc:	e77f      	b.n	8027bde <__ieee754_atan2+0x3e>
 8027cde:	2000      	movs	r0, #0
 8027ce0:	2100      	movs	r1, #0
 8027ce2:	e77c      	b.n	8027bde <__ieee754_atan2+0x3e>
 8027ce4:	a106      	add	r1, pc, #24	@ (adr r1, 8027d00 <__ieee754_atan2+0x160>)
 8027ce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027cea:	e778      	b.n	8027bde <__ieee754_atan2+0x3e>
 8027cec:	f3af 8000 	nop.w
 8027cf0:	33145c07 	.word	0x33145c07
 8027cf4:	3ca1a626 	.word	0x3ca1a626
 8027cf8:	54442d18 	.word	0x54442d18
 8027cfc:	400921fb 	.word	0x400921fb
 8027d00:	54442d18 	.word	0x54442d18
 8027d04:	3ff921fb 	.word	0x3ff921fb
 8027d08:	54442d18 	.word	0x54442d18
 8027d0c:	3fe921fb 	.word	0x3fe921fb
 8027d10:	08031ad0 	.word	0x08031ad0
 8027d14:	08031ab8 	.word	0x08031ab8
 8027d18:	54442d18 	.word	0x54442d18
 8027d1c:	c00921fb 	.word	0xc00921fb
 8027d20:	54442d18 	.word	0x54442d18
 8027d24:	bff921fb 	.word	0xbff921fb
 8027d28:	7ff00000 	.word	0x7ff00000
 8027d2c:	00000000 	.word	0x00000000

08027d30 <atan>:
 8027d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d34:	ec55 4b10 	vmov	r4, r5, d0
 8027d38:	4bbf      	ldr	r3, [pc, #764]	@ (8028038 <atan+0x308>)
 8027d3a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8027d3e:	429e      	cmp	r6, r3
 8027d40:	46ab      	mov	fp, r5
 8027d42:	d918      	bls.n	8027d76 <atan+0x46>
 8027d44:	4bbd      	ldr	r3, [pc, #756]	@ (802803c <atan+0x30c>)
 8027d46:	429e      	cmp	r6, r3
 8027d48:	d801      	bhi.n	8027d4e <atan+0x1e>
 8027d4a:	d109      	bne.n	8027d60 <atan+0x30>
 8027d4c:	b144      	cbz	r4, 8027d60 <atan+0x30>
 8027d4e:	4622      	mov	r2, r4
 8027d50:	462b      	mov	r3, r5
 8027d52:	4620      	mov	r0, r4
 8027d54:	4629      	mov	r1, r5
 8027d56:	f7e0 f9e1 	bl	800811c <__adddf3>
 8027d5a:	4604      	mov	r4, r0
 8027d5c:	460d      	mov	r5, r1
 8027d5e:	e006      	b.n	8027d6e <atan+0x3e>
 8027d60:	f1bb 0f00 	cmp.w	fp, #0
 8027d64:	f340 812b 	ble.w	8027fbe <atan+0x28e>
 8027d68:	a597      	add	r5, pc, #604	@ (adr r5, 8027fc8 <atan+0x298>)
 8027d6a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8027d6e:	ec45 4b10 	vmov	d0, r4, r5
 8027d72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027d76:	4bb2      	ldr	r3, [pc, #712]	@ (8028040 <atan+0x310>)
 8027d78:	429e      	cmp	r6, r3
 8027d7a:	d813      	bhi.n	8027da4 <atan+0x74>
 8027d7c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8027d80:	429e      	cmp	r6, r3
 8027d82:	d80c      	bhi.n	8027d9e <atan+0x6e>
 8027d84:	a392      	add	r3, pc, #584	@ (adr r3, 8027fd0 <atan+0x2a0>)
 8027d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027d8a:	4620      	mov	r0, r4
 8027d8c:	4629      	mov	r1, r5
 8027d8e:	f7e0 f9c5 	bl	800811c <__adddf3>
 8027d92:	4bac      	ldr	r3, [pc, #688]	@ (8028044 <atan+0x314>)
 8027d94:	2200      	movs	r2, #0
 8027d96:	f7e0 fe07 	bl	80089a8 <__aeabi_dcmpgt>
 8027d9a:	2800      	cmp	r0, #0
 8027d9c:	d1e7      	bne.n	8027d6e <atan+0x3e>
 8027d9e:	f04f 3aff 	mov.w	sl, #4294967295
 8027da2:	e029      	b.n	8027df8 <atan+0xc8>
 8027da4:	f000 f95c 	bl	8028060 <fabs>
 8027da8:	4ba7      	ldr	r3, [pc, #668]	@ (8028048 <atan+0x318>)
 8027daa:	429e      	cmp	r6, r3
 8027dac:	ec55 4b10 	vmov	r4, r5, d0
 8027db0:	f200 80bc 	bhi.w	8027f2c <atan+0x1fc>
 8027db4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8027db8:	429e      	cmp	r6, r3
 8027dba:	f200 809e 	bhi.w	8027efa <atan+0x1ca>
 8027dbe:	4622      	mov	r2, r4
 8027dc0:	462b      	mov	r3, r5
 8027dc2:	4620      	mov	r0, r4
 8027dc4:	4629      	mov	r1, r5
 8027dc6:	f7e0 f9a9 	bl	800811c <__adddf3>
 8027dca:	4b9e      	ldr	r3, [pc, #632]	@ (8028044 <atan+0x314>)
 8027dcc:	2200      	movs	r2, #0
 8027dce:	f7e0 f9a3 	bl	8008118 <__aeabi_dsub>
 8027dd2:	2200      	movs	r2, #0
 8027dd4:	4606      	mov	r6, r0
 8027dd6:	460f      	mov	r7, r1
 8027dd8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8027ddc:	4620      	mov	r0, r4
 8027dde:	4629      	mov	r1, r5
 8027de0:	f7e0 f99c 	bl	800811c <__adddf3>
 8027de4:	4602      	mov	r2, r0
 8027de6:	460b      	mov	r3, r1
 8027de8:	4630      	mov	r0, r6
 8027dea:	4639      	mov	r1, r7
 8027dec:	f7e0 fc76 	bl	80086dc <__aeabi_ddiv>
 8027df0:	f04f 0a00 	mov.w	sl, #0
 8027df4:	4604      	mov	r4, r0
 8027df6:	460d      	mov	r5, r1
 8027df8:	4622      	mov	r2, r4
 8027dfa:	462b      	mov	r3, r5
 8027dfc:	4620      	mov	r0, r4
 8027dfe:	4629      	mov	r1, r5
 8027e00:	f7e0 fb42 	bl	8008488 <__aeabi_dmul>
 8027e04:	4602      	mov	r2, r0
 8027e06:	460b      	mov	r3, r1
 8027e08:	4680      	mov	r8, r0
 8027e0a:	4689      	mov	r9, r1
 8027e0c:	f7e0 fb3c 	bl	8008488 <__aeabi_dmul>
 8027e10:	a371      	add	r3, pc, #452	@ (adr r3, 8027fd8 <atan+0x2a8>)
 8027e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027e16:	4606      	mov	r6, r0
 8027e18:	460f      	mov	r7, r1
 8027e1a:	f7e0 fb35 	bl	8008488 <__aeabi_dmul>
 8027e1e:	a370      	add	r3, pc, #448	@ (adr r3, 8027fe0 <atan+0x2b0>)
 8027e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027e24:	f7e0 f97a 	bl	800811c <__adddf3>
 8027e28:	4632      	mov	r2, r6
 8027e2a:	463b      	mov	r3, r7
 8027e2c:	f7e0 fb2c 	bl	8008488 <__aeabi_dmul>
 8027e30:	a36d      	add	r3, pc, #436	@ (adr r3, 8027fe8 <atan+0x2b8>)
 8027e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027e36:	f7e0 f971 	bl	800811c <__adddf3>
 8027e3a:	4632      	mov	r2, r6
 8027e3c:	463b      	mov	r3, r7
 8027e3e:	f7e0 fb23 	bl	8008488 <__aeabi_dmul>
 8027e42:	a36b      	add	r3, pc, #428	@ (adr r3, 8027ff0 <atan+0x2c0>)
 8027e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027e48:	f7e0 f968 	bl	800811c <__adddf3>
 8027e4c:	4632      	mov	r2, r6
 8027e4e:	463b      	mov	r3, r7
 8027e50:	f7e0 fb1a 	bl	8008488 <__aeabi_dmul>
 8027e54:	a368      	add	r3, pc, #416	@ (adr r3, 8027ff8 <atan+0x2c8>)
 8027e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027e5a:	f7e0 f95f 	bl	800811c <__adddf3>
 8027e5e:	4632      	mov	r2, r6
 8027e60:	463b      	mov	r3, r7
 8027e62:	f7e0 fb11 	bl	8008488 <__aeabi_dmul>
 8027e66:	a366      	add	r3, pc, #408	@ (adr r3, 8028000 <atan+0x2d0>)
 8027e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027e6c:	f7e0 f956 	bl	800811c <__adddf3>
 8027e70:	4642      	mov	r2, r8
 8027e72:	464b      	mov	r3, r9
 8027e74:	f7e0 fb08 	bl	8008488 <__aeabi_dmul>
 8027e78:	a363      	add	r3, pc, #396	@ (adr r3, 8028008 <atan+0x2d8>)
 8027e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027e7e:	4680      	mov	r8, r0
 8027e80:	4689      	mov	r9, r1
 8027e82:	4630      	mov	r0, r6
 8027e84:	4639      	mov	r1, r7
 8027e86:	f7e0 faff 	bl	8008488 <__aeabi_dmul>
 8027e8a:	a361      	add	r3, pc, #388	@ (adr r3, 8028010 <atan+0x2e0>)
 8027e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027e90:	f7e0 f942 	bl	8008118 <__aeabi_dsub>
 8027e94:	4632      	mov	r2, r6
 8027e96:	463b      	mov	r3, r7
 8027e98:	f7e0 faf6 	bl	8008488 <__aeabi_dmul>
 8027e9c:	a35e      	add	r3, pc, #376	@ (adr r3, 8028018 <atan+0x2e8>)
 8027e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027ea2:	f7e0 f939 	bl	8008118 <__aeabi_dsub>
 8027ea6:	4632      	mov	r2, r6
 8027ea8:	463b      	mov	r3, r7
 8027eaa:	f7e0 faed 	bl	8008488 <__aeabi_dmul>
 8027eae:	a35c      	add	r3, pc, #368	@ (adr r3, 8028020 <atan+0x2f0>)
 8027eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027eb4:	f7e0 f930 	bl	8008118 <__aeabi_dsub>
 8027eb8:	4632      	mov	r2, r6
 8027eba:	463b      	mov	r3, r7
 8027ebc:	f7e0 fae4 	bl	8008488 <__aeabi_dmul>
 8027ec0:	a359      	add	r3, pc, #356	@ (adr r3, 8028028 <atan+0x2f8>)
 8027ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027ec6:	f7e0 f927 	bl	8008118 <__aeabi_dsub>
 8027eca:	4632      	mov	r2, r6
 8027ecc:	463b      	mov	r3, r7
 8027ece:	f7e0 fadb 	bl	8008488 <__aeabi_dmul>
 8027ed2:	4602      	mov	r2, r0
 8027ed4:	460b      	mov	r3, r1
 8027ed6:	4640      	mov	r0, r8
 8027ed8:	4649      	mov	r1, r9
 8027eda:	f7e0 f91f 	bl	800811c <__adddf3>
 8027ede:	4622      	mov	r2, r4
 8027ee0:	462b      	mov	r3, r5
 8027ee2:	f7e0 fad1 	bl	8008488 <__aeabi_dmul>
 8027ee6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8027eea:	4602      	mov	r2, r0
 8027eec:	460b      	mov	r3, r1
 8027eee:	d148      	bne.n	8027f82 <atan+0x252>
 8027ef0:	4620      	mov	r0, r4
 8027ef2:	4629      	mov	r1, r5
 8027ef4:	f7e0 f910 	bl	8008118 <__aeabi_dsub>
 8027ef8:	e72f      	b.n	8027d5a <atan+0x2a>
 8027efa:	4b52      	ldr	r3, [pc, #328]	@ (8028044 <atan+0x314>)
 8027efc:	2200      	movs	r2, #0
 8027efe:	4620      	mov	r0, r4
 8027f00:	4629      	mov	r1, r5
 8027f02:	f7e0 f909 	bl	8008118 <__aeabi_dsub>
 8027f06:	4b4f      	ldr	r3, [pc, #316]	@ (8028044 <atan+0x314>)
 8027f08:	4606      	mov	r6, r0
 8027f0a:	460f      	mov	r7, r1
 8027f0c:	2200      	movs	r2, #0
 8027f0e:	4620      	mov	r0, r4
 8027f10:	4629      	mov	r1, r5
 8027f12:	f7e0 f903 	bl	800811c <__adddf3>
 8027f16:	4602      	mov	r2, r0
 8027f18:	460b      	mov	r3, r1
 8027f1a:	4630      	mov	r0, r6
 8027f1c:	4639      	mov	r1, r7
 8027f1e:	f7e0 fbdd 	bl	80086dc <__aeabi_ddiv>
 8027f22:	f04f 0a01 	mov.w	sl, #1
 8027f26:	4604      	mov	r4, r0
 8027f28:	460d      	mov	r5, r1
 8027f2a:	e765      	b.n	8027df8 <atan+0xc8>
 8027f2c:	4b47      	ldr	r3, [pc, #284]	@ (802804c <atan+0x31c>)
 8027f2e:	429e      	cmp	r6, r3
 8027f30:	d21c      	bcs.n	8027f6c <atan+0x23c>
 8027f32:	4b47      	ldr	r3, [pc, #284]	@ (8028050 <atan+0x320>)
 8027f34:	2200      	movs	r2, #0
 8027f36:	4620      	mov	r0, r4
 8027f38:	4629      	mov	r1, r5
 8027f3a:	f7e0 f8ed 	bl	8008118 <__aeabi_dsub>
 8027f3e:	4b44      	ldr	r3, [pc, #272]	@ (8028050 <atan+0x320>)
 8027f40:	4606      	mov	r6, r0
 8027f42:	460f      	mov	r7, r1
 8027f44:	2200      	movs	r2, #0
 8027f46:	4620      	mov	r0, r4
 8027f48:	4629      	mov	r1, r5
 8027f4a:	f7e0 fa9d 	bl	8008488 <__aeabi_dmul>
 8027f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8028044 <atan+0x314>)
 8027f50:	2200      	movs	r2, #0
 8027f52:	f7e0 f8e3 	bl	800811c <__adddf3>
 8027f56:	4602      	mov	r2, r0
 8027f58:	460b      	mov	r3, r1
 8027f5a:	4630      	mov	r0, r6
 8027f5c:	4639      	mov	r1, r7
 8027f5e:	f7e0 fbbd 	bl	80086dc <__aeabi_ddiv>
 8027f62:	f04f 0a02 	mov.w	sl, #2
 8027f66:	4604      	mov	r4, r0
 8027f68:	460d      	mov	r5, r1
 8027f6a:	e745      	b.n	8027df8 <atan+0xc8>
 8027f6c:	4622      	mov	r2, r4
 8027f6e:	462b      	mov	r3, r5
 8027f70:	4938      	ldr	r1, [pc, #224]	@ (8028054 <atan+0x324>)
 8027f72:	2000      	movs	r0, #0
 8027f74:	f7e0 fbb2 	bl	80086dc <__aeabi_ddiv>
 8027f78:	f04f 0a03 	mov.w	sl, #3
 8027f7c:	4604      	mov	r4, r0
 8027f7e:	460d      	mov	r5, r1
 8027f80:	e73a      	b.n	8027df8 <atan+0xc8>
 8027f82:	4b35      	ldr	r3, [pc, #212]	@ (8028058 <atan+0x328>)
 8027f84:	4e35      	ldr	r6, [pc, #212]	@ (802805c <atan+0x32c>)
 8027f86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8027f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027f8e:	f7e0 f8c3 	bl	8008118 <__aeabi_dsub>
 8027f92:	4622      	mov	r2, r4
 8027f94:	462b      	mov	r3, r5
 8027f96:	f7e0 f8bf 	bl	8008118 <__aeabi_dsub>
 8027f9a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8027f9e:	4602      	mov	r2, r0
 8027fa0:	460b      	mov	r3, r1
 8027fa2:	e9d6 0100 	ldrd	r0, r1, [r6]
 8027fa6:	f7e0 f8b7 	bl	8008118 <__aeabi_dsub>
 8027faa:	f1bb 0f00 	cmp.w	fp, #0
 8027fae:	4604      	mov	r4, r0
 8027fb0:	460d      	mov	r5, r1
 8027fb2:	f6bf aedc 	bge.w	8027d6e <atan+0x3e>
 8027fb6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8027fba:	461d      	mov	r5, r3
 8027fbc:	e6d7      	b.n	8027d6e <atan+0x3e>
 8027fbe:	a51c      	add	r5, pc, #112	@ (adr r5, 8028030 <atan+0x300>)
 8027fc0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8027fc4:	e6d3      	b.n	8027d6e <atan+0x3e>
 8027fc6:	bf00      	nop
 8027fc8:	54442d18 	.word	0x54442d18
 8027fcc:	3ff921fb 	.word	0x3ff921fb
 8027fd0:	8800759c 	.word	0x8800759c
 8027fd4:	7e37e43c 	.word	0x7e37e43c
 8027fd8:	e322da11 	.word	0xe322da11
 8027fdc:	3f90ad3a 	.word	0x3f90ad3a
 8027fe0:	24760deb 	.word	0x24760deb
 8027fe4:	3fa97b4b 	.word	0x3fa97b4b
 8027fe8:	a0d03d51 	.word	0xa0d03d51
 8027fec:	3fb10d66 	.word	0x3fb10d66
 8027ff0:	c54c206e 	.word	0xc54c206e
 8027ff4:	3fb745cd 	.word	0x3fb745cd
 8027ff8:	920083ff 	.word	0x920083ff
 8027ffc:	3fc24924 	.word	0x3fc24924
 8028000:	5555550d 	.word	0x5555550d
 8028004:	3fd55555 	.word	0x3fd55555
 8028008:	2c6a6c2f 	.word	0x2c6a6c2f
 802800c:	bfa2b444 	.word	0xbfa2b444
 8028010:	52defd9a 	.word	0x52defd9a
 8028014:	3fadde2d 	.word	0x3fadde2d
 8028018:	af749a6d 	.word	0xaf749a6d
 802801c:	3fb3b0f2 	.word	0x3fb3b0f2
 8028020:	fe231671 	.word	0xfe231671
 8028024:	3fbc71c6 	.word	0x3fbc71c6
 8028028:	9998ebc4 	.word	0x9998ebc4
 802802c:	3fc99999 	.word	0x3fc99999
 8028030:	54442d18 	.word	0x54442d18
 8028034:	bff921fb 	.word	0xbff921fb
 8028038:	440fffff 	.word	0x440fffff
 802803c:	7ff00000 	.word	0x7ff00000
 8028040:	3fdbffff 	.word	0x3fdbffff
 8028044:	3ff00000 	.word	0x3ff00000
 8028048:	3ff2ffff 	.word	0x3ff2ffff
 802804c:	40038000 	.word	0x40038000
 8028050:	3ff80000 	.word	0x3ff80000
 8028054:	bff00000 	.word	0xbff00000
 8028058:	08031ae8 	.word	0x08031ae8
 802805c:	08031b08 	.word	0x08031b08

08028060 <fabs>:
 8028060:	ec51 0b10 	vmov	r0, r1, d0
 8028064:	4602      	mov	r2, r0
 8028066:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 802806a:	ec43 2b10 	vmov	d0, r2, r3
 802806e:	4770      	bx	lr

08028070 <__kernel_cosf>:
 8028070:	ee10 3a10 	vmov	r3, s0
 8028074:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8028078:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802807c:	eef0 6a40 	vmov.f32	s13, s0
 8028080:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8028084:	d204      	bcs.n	8028090 <__kernel_cosf+0x20>
 8028086:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 802808a:	ee17 2a90 	vmov	r2, s15
 802808e:	b342      	cbz	r2, 80280e2 <__kernel_cosf+0x72>
 8028090:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8028094:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8028100 <__kernel_cosf+0x90>
 8028098:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8028104 <__kernel_cosf+0x94>
 802809c:	4a1a      	ldr	r2, [pc, #104]	@ (8028108 <__kernel_cosf+0x98>)
 802809e:	eea7 6a27 	vfma.f32	s12, s14, s15
 80280a2:	4293      	cmp	r3, r2
 80280a4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802810c <__kernel_cosf+0x9c>
 80280a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80280ac:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8028110 <__kernel_cosf+0xa0>
 80280b0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80280b4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8028114 <__kernel_cosf+0xa4>
 80280b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80280bc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8028118 <__kernel_cosf+0xa8>
 80280c0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80280c4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80280c8:	ee26 6a07 	vmul.f32	s12, s12, s14
 80280cc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80280d0:	eee7 0a06 	vfma.f32	s1, s14, s12
 80280d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80280d8:	d804      	bhi.n	80280e4 <__kernel_cosf+0x74>
 80280da:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80280de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80280e2:	4770      	bx	lr
 80280e4:	4a0d      	ldr	r2, [pc, #52]	@ (802811c <__kernel_cosf+0xac>)
 80280e6:	4293      	cmp	r3, r2
 80280e8:	bf9a      	itte	ls
 80280ea:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80280ee:	ee07 3a10 	vmovls	s14, r3
 80280f2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80280f6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80280fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80280fe:	e7ec      	b.n	80280da <__kernel_cosf+0x6a>
 8028100:	ad47d74e 	.word	0xad47d74e
 8028104:	310f74f6 	.word	0x310f74f6
 8028108:	3e999999 	.word	0x3e999999
 802810c:	b493f27c 	.word	0xb493f27c
 8028110:	37d00d01 	.word	0x37d00d01
 8028114:	bab60b61 	.word	0xbab60b61
 8028118:	3d2aaaab 	.word	0x3d2aaaab
 802811c:	3f480000 	.word	0x3f480000

08028120 <__kernel_sinf>:
 8028120:	ee10 3a10 	vmov	r3, s0
 8028124:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8028128:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802812c:	d204      	bcs.n	8028138 <__kernel_sinf+0x18>
 802812e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8028132:	ee17 3a90 	vmov	r3, s15
 8028136:	b35b      	cbz	r3, 8028190 <__kernel_sinf+0x70>
 8028138:	ee20 7a00 	vmul.f32	s14, s0, s0
 802813c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8028194 <__kernel_sinf+0x74>
 8028140:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8028198 <__kernel_sinf+0x78>
 8028144:	eea7 6a27 	vfma.f32	s12, s14, s15
 8028148:	eddf 7a14 	vldr	s15, [pc, #80]	@ 802819c <__kernel_sinf+0x7c>
 802814c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8028150:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80281a0 <__kernel_sinf+0x80>
 8028154:	eea7 6a87 	vfma.f32	s12, s15, s14
 8028158:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80281a4 <__kernel_sinf+0x84>
 802815c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8028160:	eee6 7a07 	vfma.f32	s15, s12, s14
 8028164:	b930      	cbnz	r0, 8028174 <__kernel_sinf+0x54>
 8028166:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80281a8 <__kernel_sinf+0x88>
 802816a:	eea7 6a27 	vfma.f32	s12, s14, s15
 802816e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8028172:	4770      	bx	lr
 8028174:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8028178:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 802817c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8028180:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8028184:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80281ac <__kernel_sinf+0x8c>
 8028188:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802818c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8028190:	4770      	bx	lr
 8028192:	bf00      	nop
 8028194:	2f2ec9d3 	.word	0x2f2ec9d3
 8028198:	b2d72f34 	.word	0xb2d72f34
 802819c:	3638ef1b 	.word	0x3638ef1b
 80281a0:	b9500d01 	.word	0xb9500d01
 80281a4:	3c088889 	.word	0x3c088889
 80281a8:	be2aaaab 	.word	0xbe2aaaab
 80281ac:	3e2aaaab 	.word	0x3e2aaaab

080281b0 <__kernel_tanf>:
 80281b0:	b508      	push	{r3, lr}
 80281b2:	ee10 3a10 	vmov	r3, s0
 80281b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80281ba:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 80281be:	eef0 7a40 	vmov.f32	s15, s0
 80281c2:	d217      	bcs.n	80281f4 <__kernel_tanf+0x44>
 80281c4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80281c8:	ee17 1a10 	vmov	r1, s14
 80281cc:	bb41      	cbnz	r1, 8028220 <__kernel_tanf+0x70>
 80281ce:	1c43      	adds	r3, r0, #1
 80281d0:	4313      	orrs	r3, r2
 80281d2:	d108      	bne.n	80281e6 <__kernel_tanf+0x36>
 80281d4:	f000 fccc 	bl	8028b70 <fabsf>
 80281d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80281dc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80281e0:	eeb0 0a67 	vmov.f32	s0, s15
 80281e4:	bd08      	pop	{r3, pc}
 80281e6:	2801      	cmp	r0, #1
 80281e8:	d0fa      	beq.n	80281e0 <__kernel_tanf+0x30>
 80281ea:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80281ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80281f2:	e7f5      	b.n	80281e0 <__kernel_tanf+0x30>
 80281f4:	494c      	ldr	r1, [pc, #304]	@ (8028328 <__kernel_tanf+0x178>)
 80281f6:	428a      	cmp	r2, r1
 80281f8:	d312      	bcc.n	8028220 <__kernel_tanf+0x70>
 80281fa:	2b00      	cmp	r3, #0
 80281fc:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 802832c <__kernel_tanf+0x17c>
 8028200:	bfb8      	it	lt
 8028202:	eef1 7a40 	vneglt.f32	s15, s0
 8028206:	ee37 7a67 	vsub.f32	s14, s14, s15
 802820a:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8028330 <__kernel_tanf+0x180>
 802820e:	bfb8      	it	lt
 8028210:	eef1 0a60 	vneglt.f32	s1, s1
 8028214:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8028218:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8028334 <__kernel_tanf+0x184>
 802821c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8028220:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8028224:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8028338 <__kernel_tanf+0x188>
 8028228:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 802833c <__kernel_tanf+0x18c>
 802822c:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8028340 <__kernel_tanf+0x190>
 8028230:	493d      	ldr	r1, [pc, #244]	@ (8028328 <__kernel_tanf+0x178>)
 8028232:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8028236:	428a      	cmp	r2, r1
 8028238:	eea7 6a25 	vfma.f32	s12, s14, s11
 802823c:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8028344 <__kernel_tanf+0x194>
 8028240:	eee6 5a07 	vfma.f32	s11, s12, s14
 8028244:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8028348 <__kernel_tanf+0x198>
 8028248:	eea5 6a87 	vfma.f32	s12, s11, s14
 802824c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 802834c <__kernel_tanf+0x19c>
 8028250:	eee6 5a07 	vfma.f32	s11, s12, s14
 8028254:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8028350 <__kernel_tanf+0x1a0>
 8028258:	eea5 6a87 	vfma.f32	s12, s11, s14
 802825c:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8028354 <__kernel_tanf+0x1a4>
 8028260:	eee7 5a05 	vfma.f32	s11, s14, s10
 8028264:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8028358 <__kernel_tanf+0x1a8>
 8028268:	eea5 5a87 	vfma.f32	s10, s11, s14
 802826c:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 802835c <__kernel_tanf+0x1ac>
 8028270:	eee5 5a07 	vfma.f32	s11, s10, s14
 8028274:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8028360 <__kernel_tanf+0x1b0>
 8028278:	eea5 5a87 	vfma.f32	s10, s11, s14
 802827c:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8028364 <__kernel_tanf+0x1b4>
 8028280:	eee5 5a07 	vfma.f32	s11, s10, s14
 8028284:	eeb0 7a46 	vmov.f32	s14, s12
 8028288:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802828c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8028290:	eeb0 6a60 	vmov.f32	s12, s1
 8028294:	eea7 6a05 	vfma.f32	s12, s14, s10
 8028298:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8028368 <__kernel_tanf+0x1b8>
 802829c:	eee6 0a26 	vfma.f32	s1, s12, s13
 80282a0:	eee5 0a07 	vfma.f32	s1, s10, s14
 80282a4:	ee37 6aa0 	vadd.f32	s12, s15, s1
 80282a8:	d31d      	bcc.n	80282e6 <__kernel_tanf+0x136>
 80282aa:	ee07 0a10 	vmov	s14, r0
 80282ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80282b2:	ee26 5a06 	vmul.f32	s10, s12, s12
 80282b6:	ee36 6a07 	vadd.f32	s12, s12, s14
 80282ba:	179b      	asrs	r3, r3, #30
 80282bc:	eec5 5a06 	vdiv.f32	s11, s10, s12
 80282c0:	f003 0302 	and.w	r3, r3, #2
 80282c4:	f1c3 0301 	rsb	r3, r3, #1
 80282c8:	ee06 3a90 	vmov	s13, r3
 80282cc:	ee35 6ae0 	vsub.f32	s12, s11, s1
 80282d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80282d4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80282d8:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80282dc:	eea7 7ac6 	vfms.f32	s14, s15, s12
 80282e0:	ee66 7a87 	vmul.f32	s15, s13, s14
 80282e4:	e77c      	b.n	80281e0 <__kernel_tanf+0x30>
 80282e6:	2801      	cmp	r0, #1
 80282e8:	d01b      	beq.n	8028322 <__kernel_tanf+0x172>
 80282ea:	4b20      	ldr	r3, [pc, #128]	@ (802836c <__kernel_tanf+0x1bc>)
 80282ec:	ee16 2a10 	vmov	r2, s12
 80282f0:	401a      	ands	r2, r3
 80282f2:	ee05 2a90 	vmov	s11, r2
 80282f6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80282fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80282fe:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8028302:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8028306:	eec7 6a86 	vdiv.f32	s13, s15, s12
 802830a:	ee16 2a90 	vmov	r2, s13
 802830e:	4013      	ands	r3, r2
 8028310:	ee07 3a90 	vmov	s15, r3
 8028314:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8028318:	eea0 7aa7 	vfma.f32	s14, s1, s15
 802831c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8028320:	e75e      	b.n	80281e0 <__kernel_tanf+0x30>
 8028322:	eef0 7a46 	vmov.f32	s15, s12
 8028326:	e75b      	b.n	80281e0 <__kernel_tanf+0x30>
 8028328:	3f2ca140 	.word	0x3f2ca140
 802832c:	3f490fda 	.word	0x3f490fda
 8028330:	33222168 	.word	0x33222168
 8028334:	00000000 	.word	0x00000000
 8028338:	b79bae5f 	.word	0xb79bae5f
 802833c:	38a3f445 	.word	0x38a3f445
 8028340:	37d95384 	.word	0x37d95384
 8028344:	3a1a26c8 	.word	0x3a1a26c8
 8028348:	3b6b6916 	.word	0x3b6b6916
 802834c:	3cb327a4 	.word	0x3cb327a4
 8028350:	3e088889 	.word	0x3e088889
 8028354:	3895c07a 	.word	0x3895c07a
 8028358:	398137b9 	.word	0x398137b9
 802835c:	3abede48 	.word	0x3abede48
 8028360:	3c11371f 	.word	0x3c11371f
 8028364:	3d5d0dd1 	.word	0x3d5d0dd1
 8028368:	3eaaaaab 	.word	0x3eaaaaab
 802836c:	fffff000 	.word	0xfffff000

08028370 <__ieee754_powf>:
 8028370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028374:	ee10 4a90 	vmov	r4, s1
 8028378:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 802837c:	ed2d 8b02 	vpush	{d8}
 8028380:	ee10 6a10 	vmov	r6, s0
 8028384:	eeb0 8a40 	vmov.f32	s16, s0
 8028388:	eef0 8a60 	vmov.f32	s17, s1
 802838c:	d10c      	bne.n	80283a8 <__ieee754_powf+0x38>
 802838e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8028392:	0076      	lsls	r6, r6, #1
 8028394:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8028398:	f240 829c 	bls.w	80288d4 <__ieee754_powf+0x564>
 802839c:	ee38 0a28 	vadd.f32	s0, s16, s17
 80283a0:	ecbd 8b02 	vpop	{d8}
 80283a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80283a8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80283ac:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80283b0:	d802      	bhi.n	80283b8 <__ieee754_powf+0x48>
 80283b2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80283b6:	d908      	bls.n	80283ca <__ieee754_powf+0x5a>
 80283b8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80283bc:	d1ee      	bne.n	802839c <__ieee754_powf+0x2c>
 80283be:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80283c2:	0064      	lsls	r4, r4, #1
 80283c4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80283c8:	e7e6      	b.n	8028398 <__ieee754_powf+0x28>
 80283ca:	2e00      	cmp	r6, #0
 80283cc:	da1e      	bge.n	802840c <__ieee754_powf+0x9c>
 80283ce:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80283d2:	d22b      	bcs.n	802842c <__ieee754_powf+0xbc>
 80283d4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80283d8:	d332      	bcc.n	8028440 <__ieee754_powf+0xd0>
 80283da:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80283de:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80283e2:	fa49 f503 	asr.w	r5, r9, r3
 80283e6:	fa05 f303 	lsl.w	r3, r5, r3
 80283ea:	454b      	cmp	r3, r9
 80283ec:	d126      	bne.n	802843c <__ieee754_powf+0xcc>
 80283ee:	f005 0501 	and.w	r5, r5, #1
 80283f2:	f1c5 0502 	rsb	r5, r5, #2
 80283f6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80283fa:	d122      	bne.n	8028442 <__ieee754_powf+0xd2>
 80283fc:	2c00      	cmp	r4, #0
 80283fe:	f280 826f 	bge.w	80288e0 <__ieee754_powf+0x570>
 8028402:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8028406:	ee87 0a88 	vdiv.f32	s0, s15, s16
 802840a:	e7c9      	b.n	80283a0 <__ieee754_powf+0x30>
 802840c:	2500      	movs	r5, #0
 802840e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8028412:	d1f0      	bne.n	80283f6 <__ieee754_powf+0x86>
 8028414:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8028418:	f000 825c 	beq.w	80288d4 <__ieee754_powf+0x564>
 802841c:	d908      	bls.n	8028430 <__ieee754_powf+0xc0>
 802841e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8028780 <__ieee754_powf+0x410>
 8028422:	2c00      	cmp	r4, #0
 8028424:	bfa8      	it	ge
 8028426:	eeb0 0a68 	vmovge.f32	s0, s17
 802842a:	e7b9      	b.n	80283a0 <__ieee754_powf+0x30>
 802842c:	2502      	movs	r5, #2
 802842e:	e7ee      	b.n	802840e <__ieee754_powf+0x9e>
 8028430:	2c00      	cmp	r4, #0
 8028432:	f280 8252 	bge.w	80288da <__ieee754_powf+0x56a>
 8028436:	eeb1 0a68 	vneg.f32	s0, s17
 802843a:	e7b1      	b.n	80283a0 <__ieee754_powf+0x30>
 802843c:	2500      	movs	r5, #0
 802843e:	e7da      	b.n	80283f6 <__ieee754_powf+0x86>
 8028440:	2500      	movs	r5, #0
 8028442:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8028446:	d102      	bne.n	802844e <__ieee754_powf+0xde>
 8028448:	ee28 0a08 	vmul.f32	s0, s16, s16
 802844c:	e7a8      	b.n	80283a0 <__ieee754_powf+0x30>
 802844e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8028452:	d109      	bne.n	8028468 <__ieee754_powf+0xf8>
 8028454:	2e00      	cmp	r6, #0
 8028456:	db07      	blt.n	8028468 <__ieee754_powf+0xf8>
 8028458:	eeb0 0a48 	vmov.f32	s0, s16
 802845c:	ecbd 8b02 	vpop	{d8}
 8028460:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028464:	f7ff bacf 	b.w	8027a06 <__ieee754_sqrtf>
 8028468:	eeb0 0a48 	vmov.f32	s0, s16
 802846c:	f000 fb80 	bl	8028b70 <fabsf>
 8028470:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8028474:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8028478:	4647      	mov	r7, r8
 802847a:	d002      	beq.n	8028482 <__ieee754_powf+0x112>
 802847c:	f1b8 0f00 	cmp.w	r8, #0
 8028480:	d117      	bne.n	80284b2 <__ieee754_powf+0x142>
 8028482:	2c00      	cmp	r4, #0
 8028484:	bfbc      	itt	lt
 8028486:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 802848a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 802848e:	2e00      	cmp	r6, #0
 8028490:	da86      	bge.n	80283a0 <__ieee754_powf+0x30>
 8028492:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8028496:	ea58 0805 	orrs.w	r8, r8, r5
 802849a:	d104      	bne.n	80284a6 <__ieee754_powf+0x136>
 802849c:	ee70 7a40 	vsub.f32	s15, s0, s0
 80284a0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80284a4:	e77c      	b.n	80283a0 <__ieee754_powf+0x30>
 80284a6:	2d01      	cmp	r5, #1
 80284a8:	f47f af7a 	bne.w	80283a0 <__ieee754_powf+0x30>
 80284ac:	eeb1 0a40 	vneg.f32	s0, s0
 80284b0:	e776      	b.n	80283a0 <__ieee754_powf+0x30>
 80284b2:	0ff0      	lsrs	r0, r6, #31
 80284b4:	3801      	subs	r0, #1
 80284b6:	ea55 0300 	orrs.w	r3, r5, r0
 80284ba:	d104      	bne.n	80284c6 <__ieee754_powf+0x156>
 80284bc:	ee38 8a48 	vsub.f32	s16, s16, s16
 80284c0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80284c4:	e76c      	b.n	80283a0 <__ieee754_powf+0x30>
 80284c6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80284ca:	d973      	bls.n	80285b4 <__ieee754_powf+0x244>
 80284cc:	4bad      	ldr	r3, [pc, #692]	@ (8028784 <__ieee754_powf+0x414>)
 80284ce:	4598      	cmp	r8, r3
 80284d0:	d808      	bhi.n	80284e4 <__ieee754_powf+0x174>
 80284d2:	2c00      	cmp	r4, #0
 80284d4:	da0b      	bge.n	80284ee <__ieee754_powf+0x17e>
 80284d6:	2000      	movs	r0, #0
 80284d8:	ecbd 8b02 	vpop	{d8}
 80284dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80284e0:	f000 bbd4 	b.w	8028c8c <__math_oflowf>
 80284e4:	4ba8      	ldr	r3, [pc, #672]	@ (8028788 <__ieee754_powf+0x418>)
 80284e6:	4598      	cmp	r8, r3
 80284e8:	d908      	bls.n	80284fc <__ieee754_powf+0x18c>
 80284ea:	2c00      	cmp	r4, #0
 80284ec:	dcf3      	bgt.n	80284d6 <__ieee754_powf+0x166>
 80284ee:	2000      	movs	r0, #0
 80284f0:	ecbd 8b02 	vpop	{d8}
 80284f4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80284f8:	f000 bbc2 	b.w	8028c80 <__math_uflowf>
 80284fc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8028500:	ee30 0a67 	vsub.f32	s0, s0, s15
 8028504:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 802878c <__ieee754_powf+0x41c>
 8028508:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 802850c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8028510:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8028514:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8028518:	ee20 7a00 	vmul.f32	s14, s0, s0
 802851c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8028520:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8028790 <__ieee754_powf+0x420>
 8028524:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8028528:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8028794 <__ieee754_powf+0x424>
 802852c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8028530:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8028798 <__ieee754_powf+0x428>
 8028534:	eef0 6a67 	vmov.f32	s13, s15
 8028538:	eee0 6a07 	vfma.f32	s13, s0, s14
 802853c:	ee16 3a90 	vmov	r3, s13
 8028540:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8028544:	f023 030f 	bic.w	r3, r3, #15
 8028548:	ee06 3a90 	vmov	s13, r3
 802854c:	eee0 6a47 	vfms.f32	s13, s0, s14
 8028550:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8028554:	3d01      	subs	r5, #1
 8028556:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 802855a:	4305      	orrs	r5, r0
 802855c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028560:	f024 040f 	bic.w	r4, r4, #15
 8028564:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8028568:	bf18      	it	ne
 802856a:	eeb0 8a47 	vmovne.f32	s16, s14
 802856e:	ee07 4a10 	vmov	s14, r4
 8028572:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8028576:	ee38 7ac7 	vsub.f32	s14, s17, s14
 802857a:	ee07 3a90 	vmov	s15, r3
 802857e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8028582:	ee07 4a10 	vmov	s14, r4
 8028586:	ee67 7a87 	vmul.f32	s15, s15, s14
 802858a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 802858e:	ee17 1a10 	vmov	r1, s14
 8028592:	2900      	cmp	r1, #0
 8028594:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8028598:	f340 80dd 	ble.w	8028756 <__ieee754_powf+0x3e6>
 802859c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80285a0:	f240 80ca 	bls.w	8028738 <__ieee754_powf+0x3c8>
 80285a4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80285a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80285ac:	bf4c      	ite	mi
 80285ae:	2001      	movmi	r0, #1
 80285b0:	2000      	movpl	r0, #0
 80285b2:	e791      	b.n	80284d8 <__ieee754_powf+0x168>
 80285b4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80285b8:	bf01      	itttt	eq
 80285ba:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 802879c <__ieee754_powf+0x42c>
 80285be:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80285c2:	f06f 0317 	mvneq.w	r3, #23
 80285c6:	ee17 7a90 	vmoveq	r7, s15
 80285ca:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80285ce:	bf18      	it	ne
 80285d0:	2300      	movne	r3, #0
 80285d2:	3a7f      	subs	r2, #127	@ 0x7f
 80285d4:	441a      	add	r2, r3
 80285d6:	4b72      	ldr	r3, [pc, #456]	@ (80287a0 <__ieee754_powf+0x430>)
 80285d8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80285dc:	429f      	cmp	r7, r3
 80285de:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80285e2:	dd06      	ble.n	80285f2 <__ieee754_powf+0x282>
 80285e4:	4b6f      	ldr	r3, [pc, #444]	@ (80287a4 <__ieee754_powf+0x434>)
 80285e6:	429f      	cmp	r7, r3
 80285e8:	f340 80a4 	ble.w	8028734 <__ieee754_powf+0x3c4>
 80285ec:	3201      	adds	r2, #1
 80285ee:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80285f2:	2600      	movs	r6, #0
 80285f4:	4b6c      	ldr	r3, [pc, #432]	@ (80287a8 <__ieee754_powf+0x438>)
 80285f6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80285fa:	ee07 1a10 	vmov	s14, r1
 80285fe:	edd3 5a00 	vldr	s11, [r3]
 8028602:	4b6a      	ldr	r3, [pc, #424]	@ (80287ac <__ieee754_powf+0x43c>)
 8028604:	ee75 7a87 	vadd.f32	s15, s11, s14
 8028608:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802860c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8028610:	1049      	asrs	r1, r1, #1
 8028612:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8028616:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 802861a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 802861e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8028622:	ee07 1a90 	vmov	s15, r1
 8028626:	ee26 5a24 	vmul.f32	s10, s12, s9
 802862a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 802862e:	ee15 7a10 	vmov	r7, s10
 8028632:	401f      	ands	r7, r3
 8028634:	ee06 7a90 	vmov	s13, r7
 8028638:	eea6 6ae7 	vfms.f32	s12, s13, s15
 802863c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8028640:	ee65 7a05 	vmul.f32	s15, s10, s10
 8028644:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8028648:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80287b0 <__ieee754_powf+0x440>
 802864c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80287b4 <__ieee754_powf+0x444>
 8028650:	eee7 5a87 	vfma.f32	s11, s15, s14
 8028654:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80287b8 <__ieee754_powf+0x448>
 8028658:	eea5 7aa7 	vfma.f32	s14, s11, s15
 802865c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 802878c <__ieee754_powf+0x41c>
 8028660:	eee7 5a27 	vfma.f32	s11, s14, s15
 8028664:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80287bc <__ieee754_powf+0x44c>
 8028668:	eea5 7aa7 	vfma.f32	s14, s11, s15
 802866c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80287c0 <__ieee754_powf+0x450>
 8028670:	ee26 6a24 	vmul.f32	s12, s12, s9
 8028674:	eee7 5a27 	vfma.f32	s11, s14, s15
 8028678:	ee35 7a26 	vadd.f32	s14, s10, s13
 802867c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8028680:	ee27 7a06 	vmul.f32	s14, s14, s12
 8028684:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8028688:	eea4 7aa5 	vfma.f32	s14, s9, s11
 802868c:	eef0 5a67 	vmov.f32	s11, s15
 8028690:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8028694:	ee75 5a87 	vadd.f32	s11, s11, s14
 8028698:	ee15 1a90 	vmov	r1, s11
 802869c:	4019      	ands	r1, r3
 802869e:	ee05 1a90 	vmov	s11, r1
 80286a2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80286a6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80286aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80286ae:	ee67 7a85 	vmul.f32	s15, s15, s10
 80286b2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80286b6:	eeb0 6a67 	vmov.f32	s12, s15
 80286ba:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80286be:	ee16 1a10 	vmov	r1, s12
 80286c2:	4019      	ands	r1, r3
 80286c4:	ee06 1a10 	vmov	s12, r1
 80286c8:	eeb0 7a46 	vmov.f32	s14, s12
 80286cc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80286d0:	493c      	ldr	r1, [pc, #240]	@ (80287c4 <__ieee754_powf+0x454>)
 80286d2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80286d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80286da:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80287c8 <__ieee754_powf+0x458>
 80286de:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80287cc <__ieee754_powf+0x45c>
 80286e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80286e6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80287d0 <__ieee754_powf+0x460>
 80286ea:	eee6 7a07 	vfma.f32	s15, s12, s14
 80286ee:	ed91 7a00 	vldr	s14, [r1]
 80286f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80286f6:	ee07 2a10 	vmov	s14, r2
 80286fa:	eef0 6a67 	vmov.f32	s13, s15
 80286fe:	4a35      	ldr	r2, [pc, #212]	@ (80287d4 <__ieee754_powf+0x464>)
 8028700:	eee6 6a25 	vfma.f32	s13, s12, s11
 8028704:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8028708:	ed92 5a00 	vldr	s10, [r2]
 802870c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8028710:	ee76 6a85 	vadd.f32	s13, s13, s10
 8028714:	ee76 6a87 	vadd.f32	s13, s13, s14
 8028718:	ee16 2a90 	vmov	r2, s13
 802871c:	4013      	ands	r3, r2
 802871e:	ee06 3a90 	vmov	s13, r3
 8028722:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8028726:	ee37 7a45 	vsub.f32	s14, s14, s10
 802872a:	eea6 7a65 	vfms.f32	s14, s12, s11
 802872e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028732:	e70f      	b.n	8028554 <__ieee754_powf+0x1e4>
 8028734:	2601      	movs	r6, #1
 8028736:	e75d      	b.n	80285f4 <__ieee754_powf+0x284>
 8028738:	d152      	bne.n	80287e0 <__ieee754_powf+0x470>
 802873a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80287d8 <__ieee754_powf+0x468>
 802873e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8028742:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8028746:	eef4 6ac7 	vcmpe.f32	s13, s14
 802874a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802874e:	f73f af29 	bgt.w	80285a4 <__ieee754_powf+0x234>
 8028752:	2386      	movs	r3, #134	@ 0x86
 8028754:	e048      	b.n	80287e8 <__ieee754_powf+0x478>
 8028756:	4a21      	ldr	r2, [pc, #132]	@ (80287dc <__ieee754_powf+0x46c>)
 8028758:	4293      	cmp	r3, r2
 802875a:	d907      	bls.n	802876c <__ieee754_powf+0x3fc>
 802875c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8028760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028764:	bf4c      	ite	mi
 8028766:	2001      	movmi	r0, #1
 8028768:	2000      	movpl	r0, #0
 802876a:	e6c1      	b.n	80284f0 <__ieee754_powf+0x180>
 802876c:	d138      	bne.n	80287e0 <__ieee754_powf+0x470>
 802876e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8028772:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8028776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802877a:	dbea      	blt.n	8028752 <__ieee754_powf+0x3e2>
 802877c:	e7ee      	b.n	802875c <__ieee754_powf+0x3ec>
 802877e:	bf00      	nop
 8028780:	00000000 	.word	0x00000000
 8028784:	3f7ffff3 	.word	0x3f7ffff3
 8028788:	3f800007 	.word	0x3f800007
 802878c:	3eaaaaab 	.word	0x3eaaaaab
 8028790:	3fb8aa3b 	.word	0x3fb8aa3b
 8028794:	36eca570 	.word	0x36eca570
 8028798:	3fb8aa00 	.word	0x3fb8aa00
 802879c:	4b800000 	.word	0x4b800000
 80287a0:	001cc471 	.word	0x001cc471
 80287a4:	005db3d6 	.word	0x005db3d6
 80287a8:	08031b38 	.word	0x08031b38
 80287ac:	fffff000 	.word	0xfffff000
 80287b0:	3e6c3255 	.word	0x3e6c3255
 80287b4:	3e53f142 	.word	0x3e53f142
 80287b8:	3e8ba305 	.word	0x3e8ba305
 80287bc:	3edb6db7 	.word	0x3edb6db7
 80287c0:	3f19999a 	.word	0x3f19999a
 80287c4:	08031b28 	.word	0x08031b28
 80287c8:	3f76384f 	.word	0x3f76384f
 80287cc:	3f763800 	.word	0x3f763800
 80287d0:	369dc3a0 	.word	0x369dc3a0
 80287d4:	08031b30 	.word	0x08031b30
 80287d8:	3338aa3c 	.word	0x3338aa3c
 80287dc:	43160000 	.word	0x43160000
 80287e0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80287e4:	d971      	bls.n	80288ca <__ieee754_powf+0x55a>
 80287e6:	15db      	asrs	r3, r3, #23
 80287e8:	3b7e      	subs	r3, #126	@ 0x7e
 80287ea:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80287ee:	4118      	asrs	r0, r3
 80287f0:	4408      	add	r0, r1
 80287f2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80287f6:	4a3c      	ldr	r2, [pc, #240]	@ (80288e8 <__ieee754_powf+0x578>)
 80287f8:	3b7f      	subs	r3, #127	@ 0x7f
 80287fa:	411a      	asrs	r2, r3
 80287fc:	4002      	ands	r2, r0
 80287fe:	ee07 2a10 	vmov	s14, r2
 8028802:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8028806:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 802880a:	f1c3 0317 	rsb	r3, r3, #23
 802880e:	4118      	asrs	r0, r3
 8028810:	2900      	cmp	r1, #0
 8028812:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028816:	bfb8      	it	lt
 8028818:	4240      	neglt	r0, r0
 802881a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 802881e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80288ec <__ieee754_powf+0x57c>
 8028822:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 80288f0 <__ieee754_powf+0x580>
 8028826:	ee17 3a10 	vmov	r3, s14
 802882a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 802882e:	f023 030f 	bic.w	r3, r3, #15
 8028832:	ee07 3a10 	vmov	s14, r3
 8028836:	ee77 7a67 	vsub.f32	s15, s14, s15
 802883a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802883e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8028842:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80288f4 <__ieee754_powf+0x584>
 8028846:	ee67 7a27 	vmul.f32	s15, s14, s15
 802884a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 802884e:	eef0 6a67 	vmov.f32	s13, s15
 8028852:	eee7 6a06 	vfma.f32	s13, s14, s12
 8028856:	eef0 5a66 	vmov.f32	s11, s13
 802885a:	eee7 5a46 	vfms.f32	s11, s14, s12
 802885e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8028862:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8028866:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 80288f8 <__ieee754_powf+0x588>
 802886a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 80288fc <__ieee754_powf+0x58c>
 802886e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8028872:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8028900 <__ieee754_powf+0x590>
 8028876:	eee6 5a07 	vfma.f32	s11, s12, s14
 802887a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8028904 <__ieee754_powf+0x594>
 802887e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8028882:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8028908 <__ieee754_powf+0x598>
 8028886:	eee6 5a07 	vfma.f32	s11, s12, s14
 802888a:	eeb0 6a66 	vmov.f32	s12, s13
 802888e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8028892:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8028896:	ee66 5a86 	vmul.f32	s11, s13, s12
 802889a:	ee36 6a47 	vsub.f32	s12, s12, s14
 802889e:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80288a2:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80288a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80288aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80288ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80288b2:	ee10 3a10 	vmov	r3, s0
 80288b6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80288ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80288be:	da06      	bge.n	80288ce <__ieee754_powf+0x55e>
 80288c0:	f000 f95e 	bl	8028b80 <scalbnf>
 80288c4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80288c8:	e56a      	b.n	80283a0 <__ieee754_powf+0x30>
 80288ca:	2000      	movs	r0, #0
 80288cc:	e7a5      	b.n	802881a <__ieee754_powf+0x4aa>
 80288ce:	ee00 3a10 	vmov	s0, r3
 80288d2:	e7f7      	b.n	80288c4 <__ieee754_powf+0x554>
 80288d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80288d8:	e562      	b.n	80283a0 <__ieee754_powf+0x30>
 80288da:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 802890c <__ieee754_powf+0x59c>
 80288de:	e55f      	b.n	80283a0 <__ieee754_powf+0x30>
 80288e0:	eeb0 0a48 	vmov.f32	s0, s16
 80288e4:	e55c      	b.n	80283a0 <__ieee754_powf+0x30>
 80288e6:	bf00      	nop
 80288e8:	ff800000 	.word	0xff800000
 80288ec:	3f317218 	.word	0x3f317218
 80288f0:	3f317200 	.word	0x3f317200
 80288f4:	35bfbe8c 	.word	0x35bfbe8c
 80288f8:	b5ddea0e 	.word	0xb5ddea0e
 80288fc:	3331bb4c 	.word	0x3331bb4c
 8028900:	388ab355 	.word	0x388ab355
 8028904:	bb360b61 	.word	0xbb360b61
 8028908:	3e2aaaab 	.word	0x3e2aaaab
 802890c:	00000000 	.word	0x00000000

08028910 <__ieee754_rem_pio2f>:
 8028910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028912:	ee10 6a10 	vmov	r6, s0
 8028916:	4b88      	ldr	r3, [pc, #544]	@ (8028b38 <__ieee754_rem_pio2f+0x228>)
 8028918:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 802891c:	429d      	cmp	r5, r3
 802891e:	b087      	sub	sp, #28
 8028920:	4604      	mov	r4, r0
 8028922:	d805      	bhi.n	8028930 <__ieee754_rem_pio2f+0x20>
 8028924:	2300      	movs	r3, #0
 8028926:	ed80 0a00 	vstr	s0, [r0]
 802892a:	6043      	str	r3, [r0, #4]
 802892c:	2000      	movs	r0, #0
 802892e:	e022      	b.n	8028976 <__ieee754_rem_pio2f+0x66>
 8028930:	4b82      	ldr	r3, [pc, #520]	@ (8028b3c <__ieee754_rem_pio2f+0x22c>)
 8028932:	429d      	cmp	r5, r3
 8028934:	d83a      	bhi.n	80289ac <__ieee754_rem_pio2f+0x9c>
 8028936:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802893a:	2e00      	cmp	r6, #0
 802893c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8028b40 <__ieee754_rem_pio2f+0x230>
 8028940:	4a80      	ldr	r2, [pc, #512]	@ (8028b44 <__ieee754_rem_pio2f+0x234>)
 8028942:	f023 030f 	bic.w	r3, r3, #15
 8028946:	dd18      	ble.n	802897a <__ieee754_rem_pio2f+0x6a>
 8028948:	4293      	cmp	r3, r2
 802894a:	ee70 7a47 	vsub.f32	s15, s0, s14
 802894e:	bf09      	itett	eq
 8028950:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8028b48 <__ieee754_rem_pio2f+0x238>
 8028954:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8028b4c <__ieee754_rem_pio2f+0x23c>
 8028958:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8028b50 <__ieee754_rem_pio2f+0x240>
 802895c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8028960:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8028964:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028968:	ed80 7a00 	vstr	s14, [r0]
 802896c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8028970:	edc0 7a01 	vstr	s15, [r0, #4]
 8028974:	2001      	movs	r0, #1
 8028976:	b007      	add	sp, #28
 8028978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802897a:	4293      	cmp	r3, r2
 802897c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8028980:	bf09      	itett	eq
 8028982:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8028b48 <__ieee754_rem_pio2f+0x238>
 8028986:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8028b4c <__ieee754_rem_pio2f+0x23c>
 802898a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8028b50 <__ieee754_rem_pio2f+0x240>
 802898e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8028992:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8028996:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802899a:	ed80 7a00 	vstr	s14, [r0]
 802899e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80289a2:	edc0 7a01 	vstr	s15, [r0, #4]
 80289a6:	f04f 30ff 	mov.w	r0, #4294967295
 80289aa:	e7e4      	b.n	8028976 <__ieee754_rem_pio2f+0x66>
 80289ac:	4b69      	ldr	r3, [pc, #420]	@ (8028b54 <__ieee754_rem_pio2f+0x244>)
 80289ae:	429d      	cmp	r5, r3
 80289b0:	d873      	bhi.n	8028a9a <__ieee754_rem_pio2f+0x18a>
 80289b2:	f000 f8dd 	bl	8028b70 <fabsf>
 80289b6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8028b58 <__ieee754_rem_pio2f+0x248>
 80289ba:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80289be:	eee0 7a07 	vfma.f32	s15, s0, s14
 80289c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80289c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80289ca:	ee17 0a90 	vmov	r0, s15
 80289ce:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8028b40 <__ieee754_rem_pio2f+0x230>
 80289d2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80289d6:	281f      	cmp	r0, #31
 80289d8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8028b4c <__ieee754_rem_pio2f+0x23c>
 80289dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80289e0:	eeb1 6a47 	vneg.f32	s12, s14
 80289e4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80289e8:	ee16 1a90 	vmov	r1, s13
 80289ec:	dc09      	bgt.n	8028a02 <__ieee754_rem_pio2f+0xf2>
 80289ee:	4a5b      	ldr	r2, [pc, #364]	@ (8028b5c <__ieee754_rem_pio2f+0x24c>)
 80289f0:	1e47      	subs	r7, r0, #1
 80289f2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80289f6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80289fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80289fe:	4293      	cmp	r3, r2
 8028a00:	d107      	bne.n	8028a12 <__ieee754_rem_pio2f+0x102>
 8028a02:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8028a06:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8028a0a:	2a08      	cmp	r2, #8
 8028a0c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8028a10:	dc14      	bgt.n	8028a3c <__ieee754_rem_pio2f+0x12c>
 8028a12:	6021      	str	r1, [r4, #0]
 8028a14:	ed94 7a00 	vldr	s14, [r4]
 8028a18:	ee30 0a47 	vsub.f32	s0, s0, s14
 8028a1c:	2e00      	cmp	r6, #0
 8028a1e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8028a22:	ed84 0a01 	vstr	s0, [r4, #4]
 8028a26:	daa6      	bge.n	8028976 <__ieee754_rem_pio2f+0x66>
 8028a28:	eeb1 7a47 	vneg.f32	s14, s14
 8028a2c:	eeb1 0a40 	vneg.f32	s0, s0
 8028a30:	ed84 7a00 	vstr	s14, [r4]
 8028a34:	ed84 0a01 	vstr	s0, [r4, #4]
 8028a38:	4240      	negs	r0, r0
 8028a3a:	e79c      	b.n	8028976 <__ieee754_rem_pio2f+0x66>
 8028a3c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8028b48 <__ieee754_rem_pio2f+0x238>
 8028a40:	eef0 6a40 	vmov.f32	s13, s0
 8028a44:	eee6 6a25 	vfma.f32	s13, s12, s11
 8028a48:	ee70 7a66 	vsub.f32	s15, s0, s13
 8028a4c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8028a50:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8028b50 <__ieee754_rem_pio2f+0x240>
 8028a54:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8028a58:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8028a5c:	ee15 2a90 	vmov	r2, s11
 8028a60:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8028a64:	1a5b      	subs	r3, r3, r1
 8028a66:	2b19      	cmp	r3, #25
 8028a68:	dc04      	bgt.n	8028a74 <__ieee754_rem_pio2f+0x164>
 8028a6a:	edc4 5a00 	vstr	s11, [r4]
 8028a6e:	eeb0 0a66 	vmov.f32	s0, s13
 8028a72:	e7cf      	b.n	8028a14 <__ieee754_rem_pio2f+0x104>
 8028a74:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8028b60 <__ieee754_rem_pio2f+0x250>
 8028a78:	eeb0 0a66 	vmov.f32	s0, s13
 8028a7c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8028a80:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8028a84:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8028b64 <__ieee754_rem_pio2f+0x254>
 8028a88:	eee6 7a25 	vfma.f32	s15, s12, s11
 8028a8c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8028a90:	ee30 7a67 	vsub.f32	s14, s0, s15
 8028a94:	ed84 7a00 	vstr	s14, [r4]
 8028a98:	e7bc      	b.n	8028a14 <__ieee754_rem_pio2f+0x104>
 8028a9a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8028a9e:	d306      	bcc.n	8028aae <__ieee754_rem_pio2f+0x19e>
 8028aa0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8028aa4:	edc0 7a01 	vstr	s15, [r0, #4]
 8028aa8:	edc0 7a00 	vstr	s15, [r0]
 8028aac:	e73e      	b.n	802892c <__ieee754_rem_pio2f+0x1c>
 8028aae:	15ea      	asrs	r2, r5, #23
 8028ab0:	3a86      	subs	r2, #134	@ 0x86
 8028ab2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8028ab6:	ee07 3a90 	vmov	s15, r3
 8028aba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8028abe:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8028b68 <__ieee754_rem_pio2f+0x258>
 8028ac2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8028ac6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028aca:	ed8d 7a03 	vstr	s14, [sp, #12]
 8028ace:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8028ad2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8028ad6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8028ada:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028ade:	ed8d 7a04 	vstr	s14, [sp, #16]
 8028ae2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8028ae6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8028aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028aee:	edcd 7a05 	vstr	s15, [sp, #20]
 8028af2:	d11e      	bne.n	8028b32 <__ieee754_rem_pio2f+0x222>
 8028af4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8028af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028afc:	bf0c      	ite	eq
 8028afe:	2301      	moveq	r3, #1
 8028b00:	2302      	movne	r3, #2
 8028b02:	491a      	ldr	r1, [pc, #104]	@ (8028b6c <__ieee754_rem_pio2f+0x25c>)
 8028b04:	9101      	str	r1, [sp, #4]
 8028b06:	2102      	movs	r1, #2
 8028b08:	9100      	str	r1, [sp, #0]
 8028b0a:	a803      	add	r0, sp, #12
 8028b0c:	4621      	mov	r1, r4
 8028b0e:	f000 f8c3 	bl	8028c98 <__kernel_rem_pio2f>
 8028b12:	2e00      	cmp	r6, #0
 8028b14:	f6bf af2f 	bge.w	8028976 <__ieee754_rem_pio2f+0x66>
 8028b18:	edd4 7a00 	vldr	s15, [r4]
 8028b1c:	eef1 7a67 	vneg.f32	s15, s15
 8028b20:	edc4 7a00 	vstr	s15, [r4]
 8028b24:	edd4 7a01 	vldr	s15, [r4, #4]
 8028b28:	eef1 7a67 	vneg.f32	s15, s15
 8028b2c:	edc4 7a01 	vstr	s15, [r4, #4]
 8028b30:	e782      	b.n	8028a38 <__ieee754_rem_pio2f+0x128>
 8028b32:	2303      	movs	r3, #3
 8028b34:	e7e5      	b.n	8028b02 <__ieee754_rem_pio2f+0x1f2>
 8028b36:	bf00      	nop
 8028b38:	3f490fd8 	.word	0x3f490fd8
 8028b3c:	4016cbe3 	.word	0x4016cbe3
 8028b40:	3fc90f80 	.word	0x3fc90f80
 8028b44:	3fc90fd0 	.word	0x3fc90fd0
 8028b48:	37354400 	.word	0x37354400
 8028b4c:	37354443 	.word	0x37354443
 8028b50:	2e85a308 	.word	0x2e85a308
 8028b54:	43490f80 	.word	0x43490f80
 8028b58:	3f22f984 	.word	0x3f22f984
 8028b5c:	08031b40 	.word	0x08031b40
 8028b60:	2e85a300 	.word	0x2e85a300
 8028b64:	248d3132 	.word	0x248d3132
 8028b68:	43800000 	.word	0x43800000
 8028b6c:	08031bc0 	.word	0x08031bc0

08028b70 <fabsf>:
 8028b70:	ee10 3a10 	vmov	r3, s0
 8028b74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8028b78:	ee00 3a10 	vmov	s0, r3
 8028b7c:	4770      	bx	lr
	...

08028b80 <scalbnf>:
 8028b80:	ee10 3a10 	vmov	r3, s0
 8028b84:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8028b88:	d02b      	beq.n	8028be2 <scalbnf+0x62>
 8028b8a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8028b8e:	d302      	bcc.n	8028b96 <scalbnf+0x16>
 8028b90:	ee30 0a00 	vadd.f32	s0, s0, s0
 8028b94:	4770      	bx	lr
 8028b96:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8028b9a:	d123      	bne.n	8028be4 <scalbnf+0x64>
 8028b9c:	4b24      	ldr	r3, [pc, #144]	@ (8028c30 <scalbnf+0xb0>)
 8028b9e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8028c34 <scalbnf+0xb4>
 8028ba2:	4298      	cmp	r0, r3
 8028ba4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8028ba8:	db17      	blt.n	8028bda <scalbnf+0x5a>
 8028baa:	ee10 3a10 	vmov	r3, s0
 8028bae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8028bb2:	3a19      	subs	r2, #25
 8028bb4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8028bb8:	4288      	cmp	r0, r1
 8028bba:	dd15      	ble.n	8028be8 <scalbnf+0x68>
 8028bbc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8028c38 <scalbnf+0xb8>
 8028bc0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8028c3c <scalbnf+0xbc>
 8028bc4:	ee10 3a10 	vmov	r3, s0
 8028bc8:	eeb0 7a67 	vmov.f32	s14, s15
 8028bcc:	2b00      	cmp	r3, #0
 8028bce:	bfb8      	it	lt
 8028bd0:	eef0 7a66 	vmovlt.f32	s15, s13
 8028bd4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8028bd8:	4770      	bx	lr
 8028bda:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8028c40 <scalbnf+0xc0>
 8028bde:	ee27 0a80 	vmul.f32	s0, s15, s0
 8028be2:	4770      	bx	lr
 8028be4:	0dd2      	lsrs	r2, r2, #23
 8028be6:	e7e5      	b.n	8028bb4 <scalbnf+0x34>
 8028be8:	4410      	add	r0, r2
 8028bea:	28fe      	cmp	r0, #254	@ 0xfe
 8028bec:	dce6      	bgt.n	8028bbc <scalbnf+0x3c>
 8028bee:	2800      	cmp	r0, #0
 8028bf0:	dd06      	ble.n	8028c00 <scalbnf+0x80>
 8028bf2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8028bf6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8028bfa:	ee00 3a10 	vmov	s0, r3
 8028bfe:	4770      	bx	lr
 8028c00:	f110 0f16 	cmn.w	r0, #22
 8028c04:	da09      	bge.n	8028c1a <scalbnf+0x9a>
 8028c06:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8028c40 <scalbnf+0xc0>
 8028c0a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8028c44 <scalbnf+0xc4>
 8028c0e:	ee10 3a10 	vmov	r3, s0
 8028c12:	eeb0 7a67 	vmov.f32	s14, s15
 8028c16:	2b00      	cmp	r3, #0
 8028c18:	e7d9      	b.n	8028bce <scalbnf+0x4e>
 8028c1a:	3019      	adds	r0, #25
 8028c1c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8028c20:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8028c24:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8028c48 <scalbnf+0xc8>
 8028c28:	ee07 3a90 	vmov	s15, r3
 8028c2c:	e7d7      	b.n	8028bde <scalbnf+0x5e>
 8028c2e:	bf00      	nop
 8028c30:	ffff3cb0 	.word	0xffff3cb0
 8028c34:	4c000000 	.word	0x4c000000
 8028c38:	7149f2ca 	.word	0x7149f2ca
 8028c3c:	f149f2ca 	.word	0xf149f2ca
 8028c40:	0da24260 	.word	0x0da24260
 8028c44:	8da24260 	.word	0x8da24260
 8028c48:	33000000 	.word	0x33000000

08028c4c <with_errnof>:
 8028c4c:	b510      	push	{r4, lr}
 8028c4e:	ed2d 8b02 	vpush	{d8}
 8028c52:	eeb0 8a40 	vmov.f32	s16, s0
 8028c56:	4604      	mov	r4, r0
 8028c58:	f7fc f994 	bl	8024f84 <__errno>
 8028c5c:	eeb0 0a48 	vmov.f32	s0, s16
 8028c60:	ecbd 8b02 	vpop	{d8}
 8028c64:	6004      	str	r4, [r0, #0]
 8028c66:	bd10      	pop	{r4, pc}

08028c68 <xflowf>:
 8028c68:	b130      	cbz	r0, 8028c78 <xflowf+0x10>
 8028c6a:	eef1 7a40 	vneg.f32	s15, s0
 8028c6e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8028c72:	2022      	movs	r0, #34	@ 0x22
 8028c74:	f7ff bfea 	b.w	8028c4c <with_errnof>
 8028c78:	eef0 7a40 	vmov.f32	s15, s0
 8028c7c:	e7f7      	b.n	8028c6e <xflowf+0x6>
	...

08028c80 <__math_uflowf>:
 8028c80:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8028c88 <__math_uflowf+0x8>
 8028c84:	f7ff bff0 	b.w	8028c68 <xflowf>
 8028c88:	10000000 	.word	0x10000000

08028c8c <__math_oflowf>:
 8028c8c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8028c94 <__math_oflowf+0x8>
 8028c90:	f7ff bfea 	b.w	8028c68 <xflowf>
 8028c94:	70000000 	.word	0x70000000

08028c98 <__kernel_rem_pio2f>:
 8028c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c9c:	ed2d 8b04 	vpush	{d8-d9}
 8028ca0:	b0d9      	sub	sp, #356	@ 0x164
 8028ca2:	4690      	mov	r8, r2
 8028ca4:	9001      	str	r0, [sp, #4]
 8028ca6:	4ab9      	ldr	r2, [pc, #740]	@ (8028f8c <__kernel_rem_pio2f+0x2f4>)
 8028ca8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8028caa:	f118 0f04 	cmn.w	r8, #4
 8028cae:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8028cb2:	460f      	mov	r7, r1
 8028cb4:	f103 3bff 	add.w	fp, r3, #4294967295
 8028cb8:	db27      	blt.n	8028d0a <__kernel_rem_pio2f+0x72>
 8028cba:	f1b8 0203 	subs.w	r2, r8, #3
 8028cbe:	bf48      	it	mi
 8028cc0:	f108 0204 	addmi.w	r2, r8, #4
 8028cc4:	10d2      	asrs	r2, r2, #3
 8028cc6:	1c55      	adds	r5, r2, #1
 8028cc8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8028cca:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8028f9c <__kernel_rem_pio2f+0x304>
 8028cce:	00e8      	lsls	r0, r5, #3
 8028cd0:	eba2 060b 	sub.w	r6, r2, fp
 8028cd4:	9002      	str	r0, [sp, #8]
 8028cd6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8028cda:	eb0a 0c0b 	add.w	ip, sl, fp
 8028cde:	ac1c      	add	r4, sp, #112	@ 0x70
 8028ce0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8028ce4:	2000      	movs	r0, #0
 8028ce6:	4560      	cmp	r0, ip
 8028ce8:	dd11      	ble.n	8028d0e <__kernel_rem_pio2f+0x76>
 8028cea:	a91c      	add	r1, sp, #112	@ 0x70
 8028cec:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8028cf0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8028cf4:	f04f 0c00 	mov.w	ip, #0
 8028cf8:	45d4      	cmp	ip, sl
 8028cfa:	dc27      	bgt.n	8028d4c <__kernel_rem_pio2f+0xb4>
 8028cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8028d00:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8028f9c <__kernel_rem_pio2f+0x304>
 8028d04:	4606      	mov	r6, r0
 8028d06:	2400      	movs	r4, #0
 8028d08:	e016      	b.n	8028d38 <__kernel_rem_pio2f+0xa0>
 8028d0a:	2200      	movs	r2, #0
 8028d0c:	e7db      	b.n	8028cc6 <__kernel_rem_pio2f+0x2e>
 8028d0e:	42c6      	cmn	r6, r0
 8028d10:	bf5d      	ittte	pl
 8028d12:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8028d16:	ee07 1a90 	vmovpl	s15, r1
 8028d1a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8028d1e:	eef0 7a47 	vmovmi.f32	s15, s14
 8028d22:	ece4 7a01 	vstmia	r4!, {s15}
 8028d26:	3001      	adds	r0, #1
 8028d28:	e7dd      	b.n	8028ce6 <__kernel_rem_pio2f+0x4e>
 8028d2a:	ecfe 6a01 	vldmia	lr!, {s13}
 8028d2e:	ed96 7a00 	vldr	s14, [r6]
 8028d32:	eee6 7a87 	vfma.f32	s15, s13, s14
 8028d36:	3401      	adds	r4, #1
 8028d38:	455c      	cmp	r4, fp
 8028d3a:	f1a6 0604 	sub.w	r6, r6, #4
 8028d3e:	ddf4      	ble.n	8028d2a <__kernel_rem_pio2f+0x92>
 8028d40:	ece9 7a01 	vstmia	r9!, {s15}
 8028d44:	f10c 0c01 	add.w	ip, ip, #1
 8028d48:	3004      	adds	r0, #4
 8028d4a:	e7d5      	b.n	8028cf8 <__kernel_rem_pio2f+0x60>
 8028d4c:	a908      	add	r1, sp, #32
 8028d4e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8028d52:	9104      	str	r1, [sp, #16]
 8028d54:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8028d56:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8028f98 <__kernel_rem_pio2f+0x300>
 8028d5a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8028f94 <__kernel_rem_pio2f+0x2fc>
 8028d5e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8028d62:	9203      	str	r2, [sp, #12]
 8028d64:	4654      	mov	r4, sl
 8028d66:	00a2      	lsls	r2, r4, #2
 8028d68:	9205      	str	r2, [sp, #20]
 8028d6a:	aa58      	add	r2, sp, #352	@ 0x160
 8028d6c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8028d70:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8028d74:	a944      	add	r1, sp, #272	@ 0x110
 8028d76:	aa08      	add	r2, sp, #32
 8028d78:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8028d7c:	4694      	mov	ip, r2
 8028d7e:	4626      	mov	r6, r4
 8028d80:	2e00      	cmp	r6, #0
 8028d82:	f1a0 0004 	sub.w	r0, r0, #4
 8028d86:	dc4c      	bgt.n	8028e22 <__kernel_rem_pio2f+0x18a>
 8028d88:	4628      	mov	r0, r5
 8028d8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8028d8e:	f7ff fef7 	bl	8028b80 <scalbnf>
 8028d92:	eeb0 8a40 	vmov.f32	s16, s0
 8028d96:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8028d9a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8028d9e:	f7fe fe77 	bl	8027a90 <floorf>
 8028da2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8028da6:	eea0 8a67 	vfms.f32	s16, s0, s15
 8028daa:	2d00      	cmp	r5, #0
 8028dac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8028db0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8028db4:	ee17 9a90 	vmov	r9, s15
 8028db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028dbc:	ee38 8a67 	vsub.f32	s16, s16, s15
 8028dc0:	dd41      	ble.n	8028e46 <__kernel_rem_pio2f+0x1ae>
 8028dc2:	f104 3cff 	add.w	ip, r4, #4294967295
 8028dc6:	a908      	add	r1, sp, #32
 8028dc8:	f1c5 0e08 	rsb	lr, r5, #8
 8028dcc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8028dd0:	fa46 f00e 	asr.w	r0, r6, lr
 8028dd4:	4481      	add	r9, r0
 8028dd6:	fa00 f00e 	lsl.w	r0, r0, lr
 8028dda:	1a36      	subs	r6, r6, r0
 8028ddc:	f1c5 0007 	rsb	r0, r5, #7
 8028de0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8028de4:	4106      	asrs	r6, r0
 8028de6:	2e00      	cmp	r6, #0
 8028de8:	dd3c      	ble.n	8028e64 <__kernel_rem_pio2f+0x1cc>
 8028dea:	f04f 0e00 	mov.w	lr, #0
 8028dee:	f109 0901 	add.w	r9, r9, #1
 8028df2:	4670      	mov	r0, lr
 8028df4:	4574      	cmp	r4, lr
 8028df6:	dc68      	bgt.n	8028eca <__kernel_rem_pio2f+0x232>
 8028df8:	2d00      	cmp	r5, #0
 8028dfa:	dd03      	ble.n	8028e04 <__kernel_rem_pio2f+0x16c>
 8028dfc:	2d01      	cmp	r5, #1
 8028dfe:	d074      	beq.n	8028eea <__kernel_rem_pio2f+0x252>
 8028e00:	2d02      	cmp	r5, #2
 8028e02:	d07d      	beq.n	8028f00 <__kernel_rem_pio2f+0x268>
 8028e04:	2e02      	cmp	r6, #2
 8028e06:	d12d      	bne.n	8028e64 <__kernel_rem_pio2f+0x1cc>
 8028e08:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8028e0c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8028e10:	b340      	cbz	r0, 8028e64 <__kernel_rem_pio2f+0x1cc>
 8028e12:	4628      	mov	r0, r5
 8028e14:	9306      	str	r3, [sp, #24]
 8028e16:	f7ff feb3 	bl	8028b80 <scalbnf>
 8028e1a:	9b06      	ldr	r3, [sp, #24]
 8028e1c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8028e20:	e020      	b.n	8028e64 <__kernel_rem_pio2f+0x1cc>
 8028e22:	ee60 7a28 	vmul.f32	s15, s0, s17
 8028e26:	3e01      	subs	r6, #1
 8028e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028e30:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8028e34:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8028e38:	ecac 0a01 	vstmia	ip!, {s0}
 8028e3c:	ed90 0a00 	vldr	s0, [r0]
 8028e40:	ee37 0a80 	vadd.f32	s0, s15, s0
 8028e44:	e79c      	b.n	8028d80 <__kernel_rem_pio2f+0xe8>
 8028e46:	d105      	bne.n	8028e54 <__kernel_rem_pio2f+0x1bc>
 8028e48:	1e60      	subs	r0, r4, #1
 8028e4a:	a908      	add	r1, sp, #32
 8028e4c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8028e50:	11f6      	asrs	r6, r6, #7
 8028e52:	e7c8      	b.n	8028de6 <__kernel_rem_pio2f+0x14e>
 8028e54:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8028e58:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8028e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e60:	da31      	bge.n	8028ec6 <__kernel_rem_pio2f+0x22e>
 8028e62:	2600      	movs	r6, #0
 8028e64:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8028e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e6c:	f040 8098 	bne.w	8028fa0 <__kernel_rem_pio2f+0x308>
 8028e70:	1e60      	subs	r0, r4, #1
 8028e72:	2200      	movs	r2, #0
 8028e74:	4550      	cmp	r0, sl
 8028e76:	da4b      	bge.n	8028f10 <__kernel_rem_pio2f+0x278>
 8028e78:	2a00      	cmp	r2, #0
 8028e7a:	d065      	beq.n	8028f48 <__kernel_rem_pio2f+0x2b0>
 8028e7c:	3c01      	subs	r4, #1
 8028e7e:	ab08      	add	r3, sp, #32
 8028e80:	3d08      	subs	r5, #8
 8028e82:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8028e86:	2b00      	cmp	r3, #0
 8028e88:	d0f8      	beq.n	8028e7c <__kernel_rem_pio2f+0x1e4>
 8028e8a:	4628      	mov	r0, r5
 8028e8c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8028e90:	f7ff fe76 	bl	8028b80 <scalbnf>
 8028e94:	1c63      	adds	r3, r4, #1
 8028e96:	aa44      	add	r2, sp, #272	@ 0x110
 8028e98:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8028f98 <__kernel_rem_pio2f+0x300>
 8028e9c:	0099      	lsls	r1, r3, #2
 8028e9e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8028ea2:	4623      	mov	r3, r4
 8028ea4:	2b00      	cmp	r3, #0
 8028ea6:	f280 80a9 	bge.w	8028ffc <__kernel_rem_pio2f+0x364>
 8028eaa:	4623      	mov	r3, r4
 8028eac:	2b00      	cmp	r3, #0
 8028eae:	f2c0 80c7 	blt.w	8029040 <__kernel_rem_pio2f+0x3a8>
 8028eb2:	aa44      	add	r2, sp, #272	@ 0x110
 8028eb4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8028eb8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8028f90 <__kernel_rem_pio2f+0x2f8>
 8028ebc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8028f9c <__kernel_rem_pio2f+0x304>
 8028ec0:	2000      	movs	r0, #0
 8028ec2:	1ae2      	subs	r2, r4, r3
 8028ec4:	e0b1      	b.n	802902a <__kernel_rem_pio2f+0x392>
 8028ec6:	2602      	movs	r6, #2
 8028ec8:	e78f      	b.n	8028dea <__kernel_rem_pio2f+0x152>
 8028eca:	f852 1b04 	ldr.w	r1, [r2], #4
 8028ece:	b948      	cbnz	r0, 8028ee4 <__kernel_rem_pio2f+0x24c>
 8028ed0:	b121      	cbz	r1, 8028edc <__kernel_rem_pio2f+0x244>
 8028ed2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8028ed6:	f842 1c04 	str.w	r1, [r2, #-4]
 8028eda:	2101      	movs	r1, #1
 8028edc:	f10e 0e01 	add.w	lr, lr, #1
 8028ee0:	4608      	mov	r0, r1
 8028ee2:	e787      	b.n	8028df4 <__kernel_rem_pio2f+0x15c>
 8028ee4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8028ee8:	e7f5      	b.n	8028ed6 <__kernel_rem_pio2f+0x23e>
 8028eea:	f104 3cff 	add.w	ip, r4, #4294967295
 8028eee:	aa08      	add	r2, sp, #32
 8028ef0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8028ef4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8028ef8:	a908      	add	r1, sp, #32
 8028efa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8028efe:	e781      	b.n	8028e04 <__kernel_rem_pio2f+0x16c>
 8028f00:	f104 3cff 	add.w	ip, r4, #4294967295
 8028f04:	aa08      	add	r2, sp, #32
 8028f06:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8028f0a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8028f0e:	e7f3      	b.n	8028ef8 <__kernel_rem_pio2f+0x260>
 8028f10:	a908      	add	r1, sp, #32
 8028f12:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8028f16:	3801      	subs	r0, #1
 8028f18:	430a      	orrs	r2, r1
 8028f1a:	e7ab      	b.n	8028e74 <__kernel_rem_pio2f+0x1dc>
 8028f1c:	3201      	adds	r2, #1
 8028f1e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8028f22:	2e00      	cmp	r6, #0
 8028f24:	d0fa      	beq.n	8028f1c <__kernel_rem_pio2f+0x284>
 8028f26:	9905      	ldr	r1, [sp, #20]
 8028f28:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8028f2c:	eb0d 0001 	add.w	r0, sp, r1
 8028f30:	18e6      	adds	r6, r4, r3
 8028f32:	a91c      	add	r1, sp, #112	@ 0x70
 8028f34:	f104 0c01 	add.w	ip, r4, #1
 8028f38:	384c      	subs	r0, #76	@ 0x4c
 8028f3a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8028f3e:	4422      	add	r2, r4
 8028f40:	4562      	cmp	r2, ip
 8028f42:	da04      	bge.n	8028f4e <__kernel_rem_pio2f+0x2b6>
 8028f44:	4614      	mov	r4, r2
 8028f46:	e70e      	b.n	8028d66 <__kernel_rem_pio2f+0xce>
 8028f48:	9804      	ldr	r0, [sp, #16]
 8028f4a:	2201      	movs	r2, #1
 8028f4c:	e7e7      	b.n	8028f1e <__kernel_rem_pio2f+0x286>
 8028f4e:	9903      	ldr	r1, [sp, #12]
 8028f50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8028f54:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8028f58:	9105      	str	r1, [sp, #20]
 8028f5a:	ee07 1a90 	vmov	s15, r1
 8028f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028f62:	2400      	movs	r4, #0
 8028f64:	ece6 7a01 	vstmia	r6!, {s15}
 8028f68:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8028f9c <__kernel_rem_pio2f+0x304>
 8028f6c:	46b1      	mov	r9, r6
 8028f6e:	455c      	cmp	r4, fp
 8028f70:	dd04      	ble.n	8028f7c <__kernel_rem_pio2f+0x2e4>
 8028f72:	ece0 7a01 	vstmia	r0!, {s15}
 8028f76:	f10c 0c01 	add.w	ip, ip, #1
 8028f7a:	e7e1      	b.n	8028f40 <__kernel_rem_pio2f+0x2a8>
 8028f7c:	ecfe 6a01 	vldmia	lr!, {s13}
 8028f80:	ed39 7a01 	vldmdb	r9!, {s14}
 8028f84:	3401      	adds	r4, #1
 8028f86:	eee6 7a87 	vfma.f32	s15, s13, s14
 8028f8a:	e7f0      	b.n	8028f6e <__kernel_rem_pio2f+0x2d6>
 8028f8c:	08031f04 	.word	0x08031f04
 8028f90:	08031ed8 	.word	0x08031ed8
 8028f94:	43800000 	.word	0x43800000
 8028f98:	3b800000 	.word	0x3b800000
 8028f9c:	00000000 	.word	0x00000000
 8028fa0:	9b02      	ldr	r3, [sp, #8]
 8028fa2:	eeb0 0a48 	vmov.f32	s0, s16
 8028fa6:	eba3 0008 	sub.w	r0, r3, r8
 8028faa:	f7ff fde9 	bl	8028b80 <scalbnf>
 8028fae:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8028f94 <__kernel_rem_pio2f+0x2fc>
 8028fb2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8028fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028fba:	db19      	blt.n	8028ff0 <__kernel_rem_pio2f+0x358>
 8028fbc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8028f98 <__kernel_rem_pio2f+0x300>
 8028fc0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8028fc4:	aa08      	add	r2, sp, #32
 8028fc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028fca:	3508      	adds	r5, #8
 8028fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028fd0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8028fd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028fd8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8028fdc:	ee10 3a10 	vmov	r3, s0
 8028fe0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8028fe4:	ee17 3a90 	vmov	r3, s15
 8028fe8:	3401      	adds	r4, #1
 8028fea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8028fee:	e74c      	b.n	8028e8a <__kernel_rem_pio2f+0x1f2>
 8028ff0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8028ff4:	aa08      	add	r2, sp, #32
 8028ff6:	ee10 3a10 	vmov	r3, s0
 8028ffa:	e7f6      	b.n	8028fea <__kernel_rem_pio2f+0x352>
 8028ffc:	a808      	add	r0, sp, #32
 8028ffe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8029002:	9001      	str	r0, [sp, #4]
 8029004:	ee07 0a90 	vmov	s15, r0
 8029008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802900c:	3b01      	subs	r3, #1
 802900e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8029012:	ee20 0a07 	vmul.f32	s0, s0, s14
 8029016:	ed62 7a01 	vstmdb	r2!, {s15}
 802901a:	e743      	b.n	8028ea4 <__kernel_rem_pio2f+0x20c>
 802901c:	ecfc 6a01 	vldmia	ip!, {s13}
 8029020:	ecb5 7a01 	vldmia	r5!, {s14}
 8029024:	eee6 7a87 	vfma.f32	s15, s13, s14
 8029028:	3001      	adds	r0, #1
 802902a:	4550      	cmp	r0, sl
 802902c:	dc01      	bgt.n	8029032 <__kernel_rem_pio2f+0x39a>
 802902e:	4282      	cmp	r2, r0
 8029030:	daf4      	bge.n	802901c <__kernel_rem_pio2f+0x384>
 8029032:	a858      	add	r0, sp, #352	@ 0x160
 8029034:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8029038:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 802903c:	3b01      	subs	r3, #1
 802903e:	e735      	b.n	8028eac <__kernel_rem_pio2f+0x214>
 8029040:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8029042:	2b02      	cmp	r3, #2
 8029044:	dc09      	bgt.n	802905a <__kernel_rem_pio2f+0x3c2>
 8029046:	2b00      	cmp	r3, #0
 8029048:	dc2b      	bgt.n	80290a2 <__kernel_rem_pio2f+0x40a>
 802904a:	d044      	beq.n	80290d6 <__kernel_rem_pio2f+0x43e>
 802904c:	f009 0007 	and.w	r0, r9, #7
 8029050:	b059      	add	sp, #356	@ 0x164
 8029052:	ecbd 8b04 	vpop	{d8-d9}
 8029056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802905a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802905c:	2b03      	cmp	r3, #3
 802905e:	d1f5      	bne.n	802904c <__kernel_rem_pio2f+0x3b4>
 8029060:	aa30      	add	r2, sp, #192	@ 0xc0
 8029062:	1f0b      	subs	r3, r1, #4
 8029064:	4413      	add	r3, r2
 8029066:	461a      	mov	r2, r3
 8029068:	4620      	mov	r0, r4
 802906a:	2800      	cmp	r0, #0
 802906c:	f1a2 0204 	sub.w	r2, r2, #4
 8029070:	dc52      	bgt.n	8029118 <__kernel_rem_pio2f+0x480>
 8029072:	4622      	mov	r2, r4
 8029074:	2a01      	cmp	r2, #1
 8029076:	f1a3 0304 	sub.w	r3, r3, #4
 802907a:	dc5d      	bgt.n	8029138 <__kernel_rem_pio2f+0x4a0>
 802907c:	ab30      	add	r3, sp, #192	@ 0xc0
 802907e:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8028f9c <__kernel_rem_pio2f+0x304>
 8029082:	440b      	add	r3, r1
 8029084:	2c01      	cmp	r4, #1
 8029086:	dc67      	bgt.n	8029158 <__kernel_rem_pio2f+0x4c0>
 8029088:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 802908c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8029090:	2e00      	cmp	r6, #0
 8029092:	d167      	bne.n	8029164 <__kernel_rem_pio2f+0x4cc>
 8029094:	edc7 6a00 	vstr	s13, [r7]
 8029098:	ed87 7a01 	vstr	s14, [r7, #4]
 802909c:	edc7 7a02 	vstr	s15, [r7, #8]
 80290a0:	e7d4      	b.n	802904c <__kernel_rem_pio2f+0x3b4>
 80290a2:	ab30      	add	r3, sp, #192	@ 0xc0
 80290a4:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8028f9c <__kernel_rem_pio2f+0x304>
 80290a8:	440b      	add	r3, r1
 80290aa:	4622      	mov	r2, r4
 80290ac:	2a00      	cmp	r2, #0
 80290ae:	da24      	bge.n	80290fa <__kernel_rem_pio2f+0x462>
 80290b0:	b34e      	cbz	r6, 8029106 <__kernel_rem_pio2f+0x46e>
 80290b2:	eef1 7a47 	vneg.f32	s15, s14
 80290b6:	edc7 7a00 	vstr	s15, [r7]
 80290ba:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80290be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80290c2:	aa31      	add	r2, sp, #196	@ 0xc4
 80290c4:	2301      	movs	r3, #1
 80290c6:	429c      	cmp	r4, r3
 80290c8:	da20      	bge.n	802910c <__kernel_rem_pio2f+0x474>
 80290ca:	b10e      	cbz	r6, 80290d0 <__kernel_rem_pio2f+0x438>
 80290cc:	eef1 7a67 	vneg.f32	s15, s15
 80290d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80290d4:	e7ba      	b.n	802904c <__kernel_rem_pio2f+0x3b4>
 80290d6:	ab30      	add	r3, sp, #192	@ 0xc0
 80290d8:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8028f9c <__kernel_rem_pio2f+0x304>
 80290dc:	440b      	add	r3, r1
 80290de:	2c00      	cmp	r4, #0
 80290e0:	da05      	bge.n	80290ee <__kernel_rem_pio2f+0x456>
 80290e2:	b10e      	cbz	r6, 80290e8 <__kernel_rem_pio2f+0x450>
 80290e4:	eef1 7a67 	vneg.f32	s15, s15
 80290e8:	edc7 7a00 	vstr	s15, [r7]
 80290ec:	e7ae      	b.n	802904c <__kernel_rem_pio2f+0x3b4>
 80290ee:	ed33 7a01 	vldmdb	r3!, {s14}
 80290f2:	3c01      	subs	r4, #1
 80290f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80290f8:	e7f1      	b.n	80290de <__kernel_rem_pio2f+0x446>
 80290fa:	ed73 7a01 	vldmdb	r3!, {s15}
 80290fe:	3a01      	subs	r2, #1
 8029100:	ee37 7a27 	vadd.f32	s14, s14, s15
 8029104:	e7d2      	b.n	80290ac <__kernel_rem_pio2f+0x414>
 8029106:	eef0 7a47 	vmov.f32	s15, s14
 802910a:	e7d4      	b.n	80290b6 <__kernel_rem_pio2f+0x41e>
 802910c:	ecb2 7a01 	vldmia	r2!, {s14}
 8029110:	3301      	adds	r3, #1
 8029112:	ee77 7a87 	vadd.f32	s15, s15, s14
 8029116:	e7d6      	b.n	80290c6 <__kernel_rem_pio2f+0x42e>
 8029118:	edd2 7a00 	vldr	s15, [r2]
 802911c:	edd2 6a01 	vldr	s13, [r2, #4]
 8029120:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8029124:	3801      	subs	r0, #1
 8029126:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802912a:	ed82 7a00 	vstr	s14, [r2]
 802912e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8029132:	edc2 7a01 	vstr	s15, [r2, #4]
 8029136:	e798      	b.n	802906a <__kernel_rem_pio2f+0x3d2>
 8029138:	edd3 7a00 	vldr	s15, [r3]
 802913c:	edd3 6a01 	vldr	s13, [r3, #4]
 8029140:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8029144:	3a01      	subs	r2, #1
 8029146:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802914a:	ed83 7a00 	vstr	s14, [r3]
 802914e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8029152:	edc3 7a01 	vstr	s15, [r3, #4]
 8029156:	e78d      	b.n	8029074 <__kernel_rem_pio2f+0x3dc>
 8029158:	ed33 7a01 	vldmdb	r3!, {s14}
 802915c:	3c01      	subs	r4, #1
 802915e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8029162:	e78f      	b.n	8029084 <__kernel_rem_pio2f+0x3ec>
 8029164:	eef1 6a66 	vneg.f32	s13, s13
 8029168:	eeb1 7a47 	vneg.f32	s14, s14
 802916c:	edc7 6a00 	vstr	s13, [r7]
 8029170:	ed87 7a01 	vstr	s14, [r7, #4]
 8029174:	eef1 7a67 	vneg.f32	s15, s15
 8029178:	e790      	b.n	802909c <__kernel_rem_pio2f+0x404>
 802917a:	bf00      	nop

0802917c <_init>:
 802917c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802917e:	bf00      	nop
 8029180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029182:	bc08      	pop	{r3}
 8029184:	469e      	mov	lr, r3
 8029186:	4770      	bx	lr

08029188 <_fini>:
 8029188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802918a:	bf00      	nop
 802918c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802918e:	bc08      	pop	{r3}
 8029190:	469e      	mov	lr, r3
 8029192:	4770      	bx	lr
