
XY-Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002138c  08008000  08008000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008ce0  08029390  08029390  00023390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08032070  08032070  0002d67c  2**0
                  CONTENTS
  4 .ARM          00000008  08032070  08032070  0002c070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08032078  08032078  0002d67c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08032078  08032078  0002c078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803207c  0803207c  0002c07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000067c  20000000  08032080  0002d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a10  2000067c  080326fc  0002d67c  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  2000308c  080326fc  0002e08c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002d67c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000dbaf2  00000000  00000000  0002d6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b9ff  00000000  00000000  0010919e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000110f8  00000000  00000000  00114b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e40  00000000  00000000  00125c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c09  00000000  00000000  00127ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bf14  00000000  00000000  001296e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000fd49  00000000  00000000  001555f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016533e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072ac  00000000  00000000  00165384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  0016c630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	@ (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	@ (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	@ (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	2000067c 	.word	0x2000067c
 800801c:	00000000 	.word	0x00000000
 8008020:	08029374 	.word	0x08029374

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	@ (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	@ (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	@ (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000680 	.word	0x20000680
 800803c:	08029374 	.word	0x08029374

08008040 <strcmp>:
 8008040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008048:	2a01      	cmp	r2, #1
 800804a:	bf28      	it	cs
 800804c:	429a      	cmpcs	r2, r3
 800804e:	d0f7      	beq.n	8008040 <strcmp>
 8008050:	1ad0      	subs	r0, r2, r3
 8008052:	4770      	bx	lr
	...

08008060 <memchr>:
 8008060:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008064:	2a10      	cmp	r2, #16
 8008066:	db2b      	blt.n	80080c0 <memchr+0x60>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	d008      	beq.n	8008080 <memchr+0x20>
 800806e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008072:	3a01      	subs	r2, #1
 8008074:	428b      	cmp	r3, r1
 8008076:	d02d      	beq.n	80080d4 <memchr+0x74>
 8008078:	f010 0f07 	tst.w	r0, #7
 800807c:	b342      	cbz	r2, 80080d0 <memchr+0x70>
 800807e:	d1f6      	bne.n	800806e <memchr+0xe>
 8008080:	b4f0      	push	{r4, r5, r6, r7}
 8008082:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008086:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800808a:	f022 0407 	bic.w	r4, r2, #7
 800808e:	f07f 0700 	mvns.w	r7, #0
 8008092:	2300      	movs	r3, #0
 8008094:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008098:	3c08      	subs	r4, #8
 800809a:	ea85 0501 	eor.w	r5, r5, r1
 800809e:	ea86 0601 	eor.w	r6, r6, r1
 80080a2:	fa85 f547 	uadd8	r5, r5, r7
 80080a6:	faa3 f587 	sel	r5, r3, r7
 80080aa:	fa86 f647 	uadd8	r6, r6, r7
 80080ae:	faa5 f687 	sel	r6, r5, r7
 80080b2:	b98e      	cbnz	r6, 80080d8 <memchr+0x78>
 80080b4:	d1ee      	bne.n	8008094 <memchr+0x34>
 80080b6:	bcf0      	pop	{r4, r5, r6, r7}
 80080b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80080bc:	f002 0207 	and.w	r2, r2, #7
 80080c0:	b132      	cbz	r2, 80080d0 <memchr+0x70>
 80080c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080c6:	3a01      	subs	r2, #1
 80080c8:	ea83 0301 	eor.w	r3, r3, r1
 80080cc:	b113      	cbz	r3, 80080d4 <memchr+0x74>
 80080ce:	d1f8      	bne.n	80080c2 <memchr+0x62>
 80080d0:	2000      	movs	r0, #0
 80080d2:	4770      	bx	lr
 80080d4:	3801      	subs	r0, #1
 80080d6:	4770      	bx	lr
 80080d8:	2d00      	cmp	r5, #0
 80080da:	bf06      	itte	eq
 80080dc:	4635      	moveq	r5, r6
 80080de:	3803      	subeq	r0, #3
 80080e0:	3807      	subne	r0, #7
 80080e2:	f015 0f01 	tst.w	r5, #1
 80080e6:	d107      	bne.n	80080f8 <memchr+0x98>
 80080e8:	3001      	adds	r0, #1
 80080ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80080ee:	bf02      	ittt	eq
 80080f0:	3001      	addeq	r0, #1
 80080f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80080f6:	3001      	addeq	r0, #1
 80080f8:	bcf0      	pop	{r4, r5, r6, r7}
 80080fa:	3801      	subs	r0, #1
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop

08008100 <strlen>:
 8008100:	4603      	mov	r3, r0
 8008102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008106:	2a00      	cmp	r2, #0
 8008108:	d1fb      	bne.n	8008102 <strlen+0x2>
 800810a:	1a18      	subs	r0, r3, r0
 800810c:	3801      	subs	r0, #1
 800810e:	4770      	bx	lr

08008110 <__aeabi_drsub>:
 8008110:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8008114:	e002      	b.n	800811c <__adddf3>
 8008116:	bf00      	nop

08008118 <__aeabi_dsub>:
 8008118:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800811c <__adddf3>:
 800811c:	b530      	push	{r4, r5, lr}
 800811e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008122:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008126:	ea94 0f05 	teq	r4, r5
 800812a:	bf08      	it	eq
 800812c:	ea90 0f02 	teqeq	r0, r2
 8008130:	bf1f      	itttt	ne
 8008132:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008136:	ea55 0c02 	orrsne.w	ip, r5, r2
 800813a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800813e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008142:	f000 80e2 	beq.w	800830a <__adddf3+0x1ee>
 8008146:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800814a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800814e:	bfb8      	it	lt
 8008150:	426d      	neglt	r5, r5
 8008152:	dd0c      	ble.n	800816e <__adddf3+0x52>
 8008154:	442c      	add	r4, r5
 8008156:	ea80 0202 	eor.w	r2, r0, r2
 800815a:	ea81 0303 	eor.w	r3, r1, r3
 800815e:	ea82 0000 	eor.w	r0, r2, r0
 8008162:	ea83 0101 	eor.w	r1, r3, r1
 8008166:	ea80 0202 	eor.w	r2, r0, r2
 800816a:	ea81 0303 	eor.w	r3, r1, r3
 800816e:	2d36      	cmp	r5, #54	@ 0x36
 8008170:	bf88      	it	hi
 8008172:	bd30      	pophi	{r4, r5, pc}
 8008174:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008178:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800817c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008180:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008184:	d002      	beq.n	800818c <__adddf3+0x70>
 8008186:	4240      	negs	r0, r0
 8008188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800818c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008190:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008194:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008198:	d002      	beq.n	80081a0 <__adddf3+0x84>
 800819a:	4252      	negs	r2, r2
 800819c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80081a0:	ea94 0f05 	teq	r4, r5
 80081a4:	f000 80a7 	beq.w	80082f6 <__adddf3+0x1da>
 80081a8:	f1a4 0401 	sub.w	r4, r4, #1
 80081ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80081b0:	db0d      	blt.n	80081ce <__adddf3+0xb2>
 80081b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80081b6:	fa22 f205 	lsr.w	r2, r2, r5
 80081ba:	1880      	adds	r0, r0, r2
 80081bc:	f141 0100 	adc.w	r1, r1, #0
 80081c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081c4:	1880      	adds	r0, r0, r2
 80081c6:	fa43 f305 	asr.w	r3, r3, r5
 80081ca:	4159      	adcs	r1, r3
 80081cc:	e00e      	b.n	80081ec <__adddf3+0xd0>
 80081ce:	f1a5 0520 	sub.w	r5, r5, #32
 80081d2:	f10e 0e20 	add.w	lr, lr, #32
 80081d6:	2a01      	cmp	r2, #1
 80081d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081dc:	bf28      	it	cs
 80081de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081e2:	fa43 f305 	asr.w	r3, r3, r5
 80081e6:	18c0      	adds	r0, r0, r3
 80081e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80081f0:	d507      	bpl.n	8008202 <__adddf3+0xe6>
 80081f2:	f04f 0e00 	mov.w	lr, #0
 80081f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8008202:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8008206:	d31b      	bcc.n	8008240 <__adddf3+0x124>
 8008208:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800820c:	d30c      	bcc.n	8008228 <__adddf3+0x10c>
 800820e:	0849      	lsrs	r1, r1, #1
 8008210:	ea5f 0030 	movs.w	r0, r0, rrx
 8008214:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008218:	f104 0401 	add.w	r4, r4, #1
 800821c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008220:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8008224:	f080 809a 	bcs.w	800835c <__adddf3+0x240>
 8008228:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800822c:	bf08      	it	eq
 800822e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008232:	f150 0000 	adcs.w	r0, r0, #0
 8008236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800823a:	ea41 0105 	orr.w	r1, r1, r5
 800823e:	bd30      	pop	{r4, r5, pc}
 8008240:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008244:	4140      	adcs	r0, r0
 8008246:	eb41 0101 	adc.w	r1, r1, r1
 800824a:	3c01      	subs	r4, #1
 800824c:	bf28      	it	cs
 800824e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8008252:	d2e9      	bcs.n	8008228 <__adddf3+0x10c>
 8008254:	f091 0f00 	teq	r1, #0
 8008258:	bf04      	itt	eq
 800825a:	4601      	moveq	r1, r0
 800825c:	2000      	moveq	r0, #0
 800825e:	fab1 f381 	clz	r3, r1
 8008262:	bf08      	it	eq
 8008264:	3320      	addeq	r3, #32
 8008266:	f1a3 030b 	sub.w	r3, r3, #11
 800826a:	f1b3 0220 	subs.w	r2, r3, #32
 800826e:	da0c      	bge.n	800828a <__adddf3+0x16e>
 8008270:	320c      	adds	r2, #12
 8008272:	dd08      	ble.n	8008286 <__adddf3+0x16a>
 8008274:	f102 0c14 	add.w	ip, r2, #20
 8008278:	f1c2 020c 	rsb	r2, r2, #12
 800827c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008280:	fa21 f102 	lsr.w	r1, r1, r2
 8008284:	e00c      	b.n	80082a0 <__adddf3+0x184>
 8008286:	f102 0214 	add.w	r2, r2, #20
 800828a:	bfd8      	it	le
 800828c:	f1c2 0c20 	rsble	ip, r2, #32
 8008290:	fa01 f102 	lsl.w	r1, r1, r2
 8008294:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008298:	bfdc      	itt	le
 800829a:	ea41 010c 	orrle.w	r1, r1, ip
 800829e:	4090      	lslle	r0, r2
 80082a0:	1ae4      	subs	r4, r4, r3
 80082a2:	bfa2      	ittt	ge
 80082a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80082a8:	4329      	orrge	r1, r5
 80082aa:	bd30      	popge	{r4, r5, pc}
 80082ac:	ea6f 0404 	mvn.w	r4, r4
 80082b0:	3c1f      	subs	r4, #31
 80082b2:	da1c      	bge.n	80082ee <__adddf3+0x1d2>
 80082b4:	340c      	adds	r4, #12
 80082b6:	dc0e      	bgt.n	80082d6 <__adddf3+0x1ba>
 80082b8:	f104 0414 	add.w	r4, r4, #20
 80082bc:	f1c4 0220 	rsb	r2, r4, #32
 80082c0:	fa20 f004 	lsr.w	r0, r0, r4
 80082c4:	fa01 f302 	lsl.w	r3, r1, r2
 80082c8:	ea40 0003 	orr.w	r0, r0, r3
 80082cc:	fa21 f304 	lsr.w	r3, r1, r4
 80082d0:	ea45 0103 	orr.w	r1, r5, r3
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f1c4 040c 	rsb	r4, r4, #12
 80082da:	f1c4 0220 	rsb	r2, r4, #32
 80082de:	fa20 f002 	lsr.w	r0, r0, r2
 80082e2:	fa01 f304 	lsl.w	r3, r1, r4
 80082e6:	ea40 0003 	orr.w	r0, r0, r3
 80082ea:	4629      	mov	r1, r5
 80082ec:	bd30      	pop	{r4, r5, pc}
 80082ee:	fa21 f004 	lsr.w	r0, r1, r4
 80082f2:	4629      	mov	r1, r5
 80082f4:	bd30      	pop	{r4, r5, pc}
 80082f6:	f094 0f00 	teq	r4, #0
 80082fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80082fe:	bf06      	itte	eq
 8008300:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8008304:	3401      	addeq	r4, #1
 8008306:	3d01      	subne	r5, #1
 8008308:	e74e      	b.n	80081a8 <__adddf3+0x8c>
 800830a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800830e:	bf18      	it	ne
 8008310:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008314:	d029      	beq.n	800836a <__adddf3+0x24e>
 8008316:	ea94 0f05 	teq	r4, r5
 800831a:	bf08      	it	eq
 800831c:	ea90 0f02 	teqeq	r0, r2
 8008320:	d005      	beq.n	800832e <__adddf3+0x212>
 8008322:	ea54 0c00 	orrs.w	ip, r4, r0
 8008326:	bf04      	itt	eq
 8008328:	4619      	moveq	r1, r3
 800832a:	4610      	moveq	r0, r2
 800832c:	bd30      	pop	{r4, r5, pc}
 800832e:	ea91 0f03 	teq	r1, r3
 8008332:	bf1e      	ittt	ne
 8008334:	2100      	movne	r1, #0
 8008336:	2000      	movne	r0, #0
 8008338:	bd30      	popne	{r4, r5, pc}
 800833a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800833e:	d105      	bne.n	800834c <__adddf3+0x230>
 8008340:	0040      	lsls	r0, r0, #1
 8008342:	4149      	adcs	r1, r1
 8008344:	bf28      	it	cs
 8008346:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800834a:	bd30      	pop	{r4, r5, pc}
 800834c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8008350:	bf3c      	itt	cc
 8008352:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8008356:	bd30      	popcc	{r4, r5, pc}
 8008358:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800835c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8008360:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008364:	f04f 0000 	mov.w	r0, #0
 8008368:	bd30      	pop	{r4, r5, pc}
 800836a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800836e:	bf1a      	itte	ne
 8008370:	4619      	movne	r1, r3
 8008372:	4610      	movne	r0, r2
 8008374:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008378:	bf1c      	itt	ne
 800837a:	460b      	movne	r3, r1
 800837c:	4602      	movne	r2, r0
 800837e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008382:	bf06      	itte	eq
 8008384:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008388:	ea91 0f03 	teqeq	r1, r3
 800838c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008390:	bd30      	pop	{r4, r5, pc}
 8008392:	bf00      	nop

08008394 <__aeabi_ui2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80083a8:	f04f 0500 	mov.w	r5, #0
 80083ac:	f04f 0100 	mov.w	r1, #0
 80083b0:	e750      	b.n	8008254 <__adddf3+0x138>
 80083b2:	bf00      	nop

080083b4 <__aeabi_i2d>:
 80083b4:	f090 0f00 	teq	r0, #0
 80083b8:	bf04      	itt	eq
 80083ba:	2100      	moveq	r1, #0
 80083bc:	4770      	bxeq	lr
 80083be:	b530      	push	{r4, r5, lr}
 80083c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80083c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80083c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80083cc:	bf48      	it	mi
 80083ce:	4240      	negmi	r0, r0
 80083d0:	f04f 0100 	mov.w	r1, #0
 80083d4:	e73e      	b.n	8008254 <__adddf3+0x138>
 80083d6:	bf00      	nop

080083d8 <__aeabi_f2d>:
 80083d8:	0042      	lsls	r2, r0, #1
 80083da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083de:	ea4f 0131 	mov.w	r1, r1, rrx
 80083e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083e6:	bf1f      	itttt	ne
 80083e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80083ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80083f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80083f4:	4770      	bxne	lr
 80083f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80083fa:	bf08      	it	eq
 80083fc:	4770      	bxeq	lr
 80083fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8008402:	bf04      	itt	eq
 8008404:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8008408:	4770      	bxeq	lr
 800840a:	b530      	push	{r4, r5, lr}
 800840c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8008410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8008414:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008418:	e71c      	b.n	8008254 <__adddf3+0x138>
 800841a:	bf00      	nop

0800841c <__aeabi_ul2d>:
 800841c:	ea50 0201 	orrs.w	r2, r0, r1
 8008420:	bf08      	it	eq
 8008422:	4770      	bxeq	lr
 8008424:	b530      	push	{r4, r5, lr}
 8008426:	f04f 0500 	mov.w	r5, #0
 800842a:	e00a      	b.n	8008442 <__aeabi_l2d+0x16>

0800842c <__aeabi_l2d>:
 800842c:	ea50 0201 	orrs.w	r2, r0, r1
 8008430:	bf08      	it	eq
 8008432:	4770      	bxeq	lr
 8008434:	b530      	push	{r4, r5, lr}
 8008436:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800843a:	d502      	bpl.n	8008442 <__aeabi_l2d+0x16>
 800843c:	4240      	negs	r0, r0
 800843e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008442:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008446:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800844a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800844e:	f43f aed8 	beq.w	8008202 <__adddf3+0xe6>
 8008452:	f04f 0203 	mov.w	r2, #3
 8008456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800845a:	bf18      	it	ne
 800845c:	3203      	addne	r2, #3
 800845e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008462:	bf18      	it	ne
 8008464:	3203      	addne	r2, #3
 8008466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800846a:	f1c2 0320 	rsb	r3, r2, #32
 800846e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008472:	fa20 f002 	lsr.w	r0, r0, r2
 8008476:	fa01 fe03 	lsl.w	lr, r1, r3
 800847a:	ea40 000e 	orr.w	r0, r0, lr
 800847e:	fa21 f102 	lsr.w	r1, r1, r2
 8008482:	4414      	add	r4, r2
 8008484:	e6bd      	b.n	8008202 <__adddf3+0xe6>
 8008486:	bf00      	nop

08008488 <__aeabi_dmul>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800848e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008496:	bf1d      	ittte	ne
 8008498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800849c:	ea94 0f0c 	teqne	r4, ip
 80084a0:	ea95 0f0c 	teqne	r5, ip
 80084a4:	f000 f8de 	bleq	8008664 <__aeabi_dmul+0x1dc>
 80084a8:	442c      	add	r4, r5
 80084aa:	ea81 0603 	eor.w	r6, r1, r3
 80084ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80084b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80084b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80084ba:	bf18      	it	ne
 80084bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80084c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084c8:	d038      	beq.n	800853c <__aeabi_dmul+0xb4>
 80084ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ce:	f04f 0500 	mov.w	r5, #0
 80084d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80084da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084de:	f04f 0600 	mov.w	r6, #0
 80084e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084e6:	f09c 0f00 	teq	ip, #0
 80084ea:	bf18      	it	ne
 80084ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80084f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80084f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80084f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80084fc:	d204      	bcs.n	8008508 <__aeabi_dmul+0x80>
 80084fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008502:	416d      	adcs	r5, r5
 8008504:	eb46 0606 	adc.w	r6, r6, r6
 8008508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800850c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800851c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8008520:	bf88      	it	hi
 8008522:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8008526:	d81e      	bhi.n	8008566 <__aeabi_dmul+0xde>
 8008528:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800852c:	bf08      	it	eq
 800852e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008532:	f150 0000 	adcs.w	r0, r0, #0
 8008536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800853a:	bd70      	pop	{r4, r5, r6, pc}
 800853c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8008540:	ea46 0101 	orr.w	r1, r6, r1
 8008544:	ea40 0002 	orr.w	r0, r0, r2
 8008548:	ea81 0103 	eor.w	r1, r1, r3
 800854c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008550:	bfc2      	ittt	gt
 8008552:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800855a:	bd70      	popgt	{r4, r5, r6, pc}
 800855c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008560:	f04f 0e00 	mov.w	lr, #0
 8008564:	3c01      	subs	r4, #1
 8008566:	f300 80ab 	bgt.w	80086c0 <__aeabi_dmul+0x238>
 800856a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800856e:	bfde      	ittt	le
 8008570:	2000      	movle	r0, #0
 8008572:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8008576:	bd70      	pople	{r4, r5, r6, pc}
 8008578:	f1c4 0400 	rsb	r4, r4, #0
 800857c:	3c20      	subs	r4, #32
 800857e:	da35      	bge.n	80085ec <__aeabi_dmul+0x164>
 8008580:	340c      	adds	r4, #12
 8008582:	dc1b      	bgt.n	80085bc <__aeabi_dmul+0x134>
 8008584:	f104 0414 	add.w	r4, r4, #20
 8008588:	f1c4 0520 	rsb	r5, r4, #32
 800858c:	fa00 f305 	lsl.w	r3, r0, r5
 8008590:	fa20 f004 	lsr.w	r0, r0, r4
 8008594:	fa01 f205 	lsl.w	r2, r1, r5
 8008598:	ea40 0002 	orr.w	r0, r0, r2
 800859c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80085a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80085a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085a8:	fa21 f604 	lsr.w	r6, r1, r4
 80085ac:	eb42 0106 	adc.w	r1, r2, r6
 80085b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085b4:	bf08      	it	eq
 80085b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	f1c4 040c 	rsb	r4, r4, #12
 80085c0:	f1c4 0520 	rsb	r5, r4, #32
 80085c4:	fa00 f304 	lsl.w	r3, r0, r4
 80085c8:	fa20 f005 	lsr.w	r0, r0, r5
 80085cc:	fa01 f204 	lsl.w	r2, r1, r4
 80085d0:	ea40 0002 	orr.w	r0, r0, r2
 80085d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80085d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085dc:	f141 0100 	adc.w	r1, r1, #0
 80085e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085e4:	bf08      	it	eq
 80085e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	f1c4 0520 	rsb	r5, r4, #32
 80085f0:	fa00 f205 	lsl.w	r2, r0, r5
 80085f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085f8:	fa20 f304 	lsr.w	r3, r0, r4
 80085fc:	fa01 f205 	lsl.w	r2, r1, r5
 8008600:	ea43 0302 	orr.w	r3, r3, r2
 8008604:	fa21 f004 	lsr.w	r0, r1, r4
 8008608:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800860c:	fa21 f204 	lsr.w	r2, r1, r4
 8008610:	ea20 0002 	bic.w	r0, r0, r2
 8008614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800861c:	bf08      	it	eq
 800861e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008622:	bd70      	pop	{r4, r5, r6, pc}
 8008624:	f094 0f00 	teq	r4, #0
 8008628:	d10f      	bne.n	800864a <__aeabi_dmul+0x1c2>
 800862a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800862e:	0040      	lsls	r0, r0, #1
 8008630:	eb41 0101 	adc.w	r1, r1, r1
 8008634:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008638:	bf08      	it	eq
 800863a:	3c01      	subeq	r4, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1a6>
 800863e:	ea41 0106 	orr.w	r1, r1, r6
 8008642:	f095 0f00 	teq	r5, #0
 8008646:	bf18      	it	ne
 8008648:	4770      	bxne	lr
 800864a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800864e:	0052      	lsls	r2, r2, #1
 8008650:	eb43 0303 	adc.w	r3, r3, r3
 8008654:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008658:	bf08      	it	eq
 800865a:	3d01      	subeq	r5, #1
 800865c:	d0f7      	beq.n	800864e <__aeabi_dmul+0x1c6>
 800865e:	ea43 0306 	orr.w	r3, r3, r6
 8008662:	4770      	bx	lr
 8008664:	ea94 0f0c 	teq	r4, ip
 8008668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800866c:	bf18      	it	ne
 800866e:	ea95 0f0c 	teqne	r5, ip
 8008672:	d00c      	beq.n	800868e <__aeabi_dmul+0x206>
 8008674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008678:	bf18      	it	ne
 800867a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867e:	d1d1      	bne.n	8008624 <__aeabi_dmul+0x19c>
 8008680:	ea81 0103 	eor.w	r1, r1, r3
 8008684:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008688:	f04f 0000 	mov.w	r0, #0
 800868c:	bd70      	pop	{r4, r5, r6, pc}
 800868e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008692:	bf06      	itte	eq
 8008694:	4610      	moveq	r0, r2
 8008696:	4619      	moveq	r1, r3
 8008698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800869c:	d019      	beq.n	80086d2 <__aeabi_dmul+0x24a>
 800869e:	ea94 0f0c 	teq	r4, ip
 80086a2:	d102      	bne.n	80086aa <__aeabi_dmul+0x222>
 80086a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80086a8:	d113      	bne.n	80086d2 <__aeabi_dmul+0x24a>
 80086aa:	ea95 0f0c 	teq	r5, ip
 80086ae:	d105      	bne.n	80086bc <__aeabi_dmul+0x234>
 80086b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80086b4:	bf1c      	itt	ne
 80086b6:	4610      	movne	r0, r2
 80086b8:	4619      	movne	r1, r3
 80086ba:	d10a      	bne.n	80086d2 <__aeabi_dmul+0x24a>
 80086bc:	ea81 0103 	eor.w	r1, r1, r3
 80086c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80086c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80086c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80086cc:	f04f 0000 	mov.w	r0, #0
 80086d0:	bd70      	pop	{r4, r5, r6, pc}
 80086d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80086d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80086da:	bd70      	pop	{r4, r5, r6, pc}

080086dc <__aeabi_ddiv>:
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80086e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80086e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ea:	bf1d      	ittte	ne
 80086ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086f0:	ea94 0f0c 	teqne	r4, ip
 80086f4:	ea95 0f0c 	teqne	r5, ip
 80086f8:	f000 f8a7 	bleq	800884a <__aeabi_ddiv+0x16e>
 80086fc:	eba4 0405 	sub.w	r4, r4, r5
 8008700:	ea81 0e03 	eor.w	lr, r1, r3
 8008704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008708:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800870c:	f000 8088 	beq.w	8008820 <__aeabi_ddiv+0x144>
 8008710:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008714:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8008718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800871c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008720:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800872c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008730:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8008734:	429d      	cmp	r5, r3
 8008736:	bf08      	it	eq
 8008738:	4296      	cmpeq	r6, r2
 800873a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800873e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8008742:	d202      	bcs.n	800874a <__aeabi_ddiv+0x6e>
 8008744:	085b      	lsrs	r3, r3, #1
 8008746:	ea4f 0232 	mov.w	r2, r2, rrx
 800874a:	1ab6      	subs	r6, r6, r2
 800874c:	eb65 0503 	sbc.w	r5, r5, r3
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800875a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800875e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008766:	bf22      	ittt	cs
 8008768:	1ab6      	subcs	r6, r6, r2
 800876a:	4675      	movcs	r5, lr
 800876c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008770:	085b      	lsrs	r3, r3, #1
 8008772:	ea4f 0232 	mov.w	r2, r2, rrx
 8008776:	ebb6 0e02 	subs.w	lr, r6, r2
 800877a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800877e:	bf22      	ittt	cs
 8008780:	1ab6      	subcs	r6, r6, r2
 8008782:	4675      	movcs	r5, lr
 8008784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008788:	085b      	lsrs	r3, r3, #1
 800878a:	ea4f 0232 	mov.w	r2, r2, rrx
 800878e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008792:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008796:	bf22      	ittt	cs
 8008798:	1ab6      	subcs	r6, r6, r2
 800879a:	4675      	movcs	r5, lr
 800879c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80087a0:	085b      	lsrs	r3, r3, #1
 80087a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80087a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80087aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80087ae:	bf22      	ittt	cs
 80087b0:	1ab6      	subcs	r6, r6, r2
 80087b2:	4675      	movcs	r5, lr
 80087b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80087b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80087bc:	d018      	beq.n	80087f0 <__aeabi_ddiv+0x114>
 80087be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087da:	d1c0      	bne.n	800875e <__aeabi_ddiv+0x82>
 80087dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80087e0:	d10b      	bne.n	80087fa <__aeabi_ddiv+0x11e>
 80087e2:	ea41 0100 	orr.w	r1, r1, r0
 80087e6:	f04f 0000 	mov.w	r0, #0
 80087ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80087ee:	e7b6      	b.n	800875e <__aeabi_ddiv+0x82>
 80087f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80087f4:	bf04      	itt	eq
 80087f6:	4301      	orreq	r1, r0
 80087f8:	2000      	moveq	r0, #0
 80087fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80087fe:	bf88      	it	hi
 8008800:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8008804:	f63f aeaf 	bhi.w	8008566 <__aeabi_dmul+0xde>
 8008808:	ebb5 0c03 	subs.w	ip, r5, r3
 800880c:	bf04      	itt	eq
 800880e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008816:	f150 0000 	adcs.w	r0, r0, #0
 800881a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800881e:	bd70      	pop	{r4, r5, r6, pc}
 8008820:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8008824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800882c:	bfc2      	ittt	gt
 800882e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008836:	bd70      	popgt	{r4, r5, r6, pc}
 8008838:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800883c:	f04f 0e00 	mov.w	lr, #0
 8008840:	3c01      	subs	r4, #1
 8008842:	e690      	b.n	8008566 <__aeabi_dmul+0xde>
 8008844:	ea45 0e06 	orr.w	lr, r5, r6
 8008848:	e68d      	b.n	8008566 <__aeabi_dmul+0xde>
 800884a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800884e:	ea94 0f0c 	teq	r4, ip
 8008852:	bf08      	it	eq
 8008854:	ea95 0f0c 	teqeq	r5, ip
 8008858:	f43f af3b 	beq.w	80086d2 <__aeabi_dmul+0x24a>
 800885c:	ea94 0f0c 	teq	r4, ip
 8008860:	d10a      	bne.n	8008878 <__aeabi_ddiv+0x19c>
 8008862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008866:	f47f af34 	bne.w	80086d2 <__aeabi_dmul+0x24a>
 800886a:	ea95 0f0c 	teq	r5, ip
 800886e:	f47f af25 	bne.w	80086bc <__aeabi_dmul+0x234>
 8008872:	4610      	mov	r0, r2
 8008874:	4619      	mov	r1, r3
 8008876:	e72c      	b.n	80086d2 <__aeabi_dmul+0x24a>
 8008878:	ea95 0f0c 	teq	r5, ip
 800887c:	d106      	bne.n	800888c <__aeabi_ddiv+0x1b0>
 800887e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008882:	f43f aefd 	beq.w	8008680 <__aeabi_dmul+0x1f8>
 8008886:	4610      	mov	r0, r2
 8008888:	4619      	mov	r1, r3
 800888a:	e722      	b.n	80086d2 <__aeabi_dmul+0x24a>
 800888c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008890:	bf18      	it	ne
 8008892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008896:	f47f aec5 	bne.w	8008624 <__aeabi_dmul+0x19c>
 800889a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800889e:	f47f af0d 	bne.w	80086bc <__aeabi_dmul+0x234>
 80088a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80088a6:	f47f aeeb 	bne.w	8008680 <__aeabi_dmul+0x1f8>
 80088aa:	e712      	b.n	80086d2 <__aeabi_dmul+0x24a>

080088ac <__gedf2>:
 80088ac:	f04f 3cff 	mov.w	ip, #4294967295
 80088b0:	e006      	b.n	80088c0 <__cmpdf2+0x4>
 80088b2:	bf00      	nop

080088b4 <__ledf2>:
 80088b4:	f04f 0c01 	mov.w	ip, #1
 80088b8:	e002      	b.n	80088c0 <__cmpdf2+0x4>
 80088ba:	bf00      	nop

080088bc <__cmpdf2>:
 80088bc:	f04f 0c01 	mov.w	ip, #1
 80088c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088d0:	bf18      	it	ne
 80088d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088d6:	d01b      	beq.n	8008910 <__cmpdf2+0x54>
 80088d8:	b001      	add	sp, #4
 80088da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088de:	bf0c      	ite	eq
 80088e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088e4:	ea91 0f03 	teqne	r1, r3
 80088e8:	bf02      	ittt	eq
 80088ea:	ea90 0f02 	teqeq	r0, r2
 80088ee:	2000      	moveq	r0, #0
 80088f0:	4770      	bxeq	lr
 80088f2:	f110 0f00 	cmn.w	r0, #0
 80088f6:	ea91 0f03 	teq	r1, r3
 80088fa:	bf58      	it	pl
 80088fc:	4299      	cmppl	r1, r3
 80088fe:	bf08      	it	eq
 8008900:	4290      	cmpeq	r0, r2
 8008902:	bf2c      	ite	cs
 8008904:	17d8      	asrcs	r0, r3, #31
 8008906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800890a:	f040 0001 	orr.w	r0, r0, #1
 800890e:	4770      	bx	lr
 8008910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008918:	d102      	bne.n	8008920 <__cmpdf2+0x64>
 800891a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800891e:	d107      	bne.n	8008930 <__cmpdf2+0x74>
 8008920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008928:	d1d6      	bne.n	80088d8 <__cmpdf2+0x1c>
 800892a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800892e:	d0d3      	beq.n	80088d8 <__cmpdf2+0x1c>
 8008930:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop

08008938 <__aeabi_cdrcmple>:
 8008938:	4684      	mov	ip, r0
 800893a:	4610      	mov	r0, r2
 800893c:	4662      	mov	r2, ip
 800893e:	468c      	mov	ip, r1
 8008940:	4619      	mov	r1, r3
 8008942:	4663      	mov	r3, ip
 8008944:	e000      	b.n	8008948 <__aeabi_cdcmpeq>
 8008946:	bf00      	nop

08008948 <__aeabi_cdcmpeq>:
 8008948:	b501      	push	{r0, lr}
 800894a:	f7ff ffb7 	bl	80088bc <__cmpdf2>
 800894e:	2800      	cmp	r0, #0
 8008950:	bf48      	it	mi
 8008952:	f110 0f00 	cmnmi.w	r0, #0
 8008956:	bd01      	pop	{r0, pc}

08008958 <__aeabi_dcmpeq>:
 8008958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800895c:	f7ff fff4 	bl	8008948 <__aeabi_cdcmpeq>
 8008960:	bf0c      	ite	eq
 8008962:	2001      	moveq	r0, #1
 8008964:	2000      	movne	r0, #0
 8008966:	f85d fb08 	ldr.w	pc, [sp], #8
 800896a:	bf00      	nop

0800896c <__aeabi_dcmplt>:
 800896c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008970:	f7ff ffea 	bl	8008948 <__aeabi_cdcmpeq>
 8008974:	bf34      	ite	cc
 8008976:	2001      	movcc	r0, #1
 8008978:	2000      	movcs	r0, #0
 800897a:	f85d fb08 	ldr.w	pc, [sp], #8
 800897e:	bf00      	nop

08008980 <__aeabi_dcmple>:
 8008980:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008984:	f7ff ffe0 	bl	8008948 <__aeabi_cdcmpeq>
 8008988:	bf94      	ite	ls
 800898a:	2001      	movls	r0, #1
 800898c:	2000      	movhi	r0, #0
 800898e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008992:	bf00      	nop

08008994 <__aeabi_dcmpge>:
 8008994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008998:	f7ff ffce 	bl	8008938 <__aeabi_cdrcmple>
 800899c:	bf94      	ite	ls
 800899e:	2001      	movls	r0, #1
 80089a0:	2000      	movhi	r0, #0
 80089a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80089a6:	bf00      	nop

080089a8 <__aeabi_dcmpgt>:
 80089a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089ac:	f7ff ffc4 	bl	8008938 <__aeabi_cdrcmple>
 80089b0:	bf34      	ite	cc
 80089b2:	2001      	movcc	r0, #1
 80089b4:	2000      	movcs	r0, #0
 80089b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80089ba:	bf00      	nop

080089bc <__aeabi_dcmpun>:
 80089bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089c4:	d102      	bne.n	80089cc <__aeabi_dcmpun+0x10>
 80089c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089ca:	d10a      	bne.n	80089e2 <__aeabi_dcmpun+0x26>
 80089cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089d4:	d102      	bne.n	80089dc <__aeabi_dcmpun+0x20>
 80089d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089da:	d102      	bne.n	80089e2 <__aeabi_dcmpun+0x26>
 80089dc:	f04f 0000 	mov.w	r0, #0
 80089e0:	4770      	bx	lr
 80089e2:	f04f 0001 	mov.w	r0, #1
 80089e6:	4770      	bx	lr

080089e8 <__aeabi_d2iz>:
 80089e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80089f0:	d215      	bcs.n	8008a1e <__aeabi_d2iz+0x36>
 80089f2:	d511      	bpl.n	8008a18 <__aeabi_d2iz+0x30>
 80089f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80089f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089fc:	d912      	bls.n	8008a24 <__aeabi_d2iz+0x3c>
 80089fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a0a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008a0e:	fa23 f002 	lsr.w	r0, r3, r2
 8008a12:	bf18      	it	ne
 8008a14:	4240      	negne	r0, r0
 8008a16:	4770      	bx	lr
 8008a18:	f04f 0000 	mov.w	r0, #0
 8008a1c:	4770      	bx	lr
 8008a1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a22:	d105      	bne.n	8008a30 <__aeabi_d2iz+0x48>
 8008a24:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008a28:	bf08      	it	eq
 8008a2a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008a2e:	4770      	bx	lr
 8008a30:	f04f 0000 	mov.w	r0, #0
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop

08008a38 <__aeabi_d2uiz>:
 8008a38:	004a      	lsls	r2, r1, #1
 8008a3a:	d211      	bcs.n	8008a60 <__aeabi_d2uiz+0x28>
 8008a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008a40:	d211      	bcs.n	8008a66 <__aeabi_d2uiz+0x2e>
 8008a42:	d50d      	bpl.n	8008a60 <__aeabi_d2uiz+0x28>
 8008a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a4c:	d40e      	bmi.n	8008a6c <__aeabi_d2uiz+0x34>
 8008a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a5e:	4770      	bx	lr
 8008a60:	f04f 0000 	mov.w	r0, #0
 8008a64:	4770      	bx	lr
 8008a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a6a:	d102      	bne.n	8008a72 <__aeabi_d2uiz+0x3a>
 8008a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a70:	4770      	bx	lr
 8008a72:	f04f 0000 	mov.w	r0, #0
 8008a76:	4770      	bx	lr

08008a78 <__aeabi_d2f>:
 8008a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8008a80:	bf24      	itt	cs
 8008a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8008a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8008a8a:	d90d      	bls.n	8008aa8 <__aeabi_d2f+0x30>
 8008a8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8008a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8008a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008aa0:	bf08      	it	eq
 8008aa2:	f020 0001 	biceq.w	r0, r0, #1
 8008aa6:	4770      	bx	lr
 8008aa8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8008aac:	d121      	bne.n	8008af2 <__aeabi_d2f+0x7a>
 8008aae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8008ab2:	bfbc      	itt	lt
 8008ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8008ab8:	4770      	bxlt	lr
 8008aba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008ac2:	f1c2 0218 	rsb	r2, r2, #24
 8008ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8008ace:	fa20 f002 	lsr.w	r0, r0, r2
 8008ad2:	bf18      	it	ne
 8008ad4:	f040 0001 	orrne.w	r0, r0, #1
 8008ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ae4:	ea40 000c 	orr.w	r0, r0, ip
 8008ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8008aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008af0:	e7cc      	b.n	8008a8c <__aeabi_d2f+0x14>
 8008af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008af6:	d107      	bne.n	8008b08 <__aeabi_d2f+0x90>
 8008af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008afc:	bf1e      	ittt	ne
 8008afe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8008b02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8008b06:	4770      	bxne	lr
 8008b08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8008b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8008b10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop

08008b18 <__aeabi_uldivmod>:
 8008b18:	b953      	cbnz	r3, 8008b30 <__aeabi_uldivmod+0x18>
 8008b1a:	b94a      	cbnz	r2, 8008b30 <__aeabi_uldivmod+0x18>
 8008b1c:	2900      	cmp	r1, #0
 8008b1e:	bf08      	it	eq
 8008b20:	2800      	cmpeq	r0, #0
 8008b22:	bf1c      	itt	ne
 8008b24:	f04f 31ff 	movne.w	r1, #4294967295
 8008b28:	f04f 30ff 	movne.w	r0, #4294967295
 8008b2c:	f000 b9a0 	b.w	8008e70 <__aeabi_idiv0>
 8008b30:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b38:	f000 f83c 	bl	8008bb4 <__udivmoddi4>
 8008b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b44:	b004      	add	sp, #16
 8008b46:	4770      	bx	lr

08008b48 <__aeabi_d2lz>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	4604      	mov	r4, r0
 8008b50:	460d      	mov	r5, r1
 8008b52:	f7ff ff0b 	bl	800896c <__aeabi_dcmplt>
 8008b56:	b928      	cbnz	r0, 8008b64 <__aeabi_d2lz+0x1c>
 8008b58:	4620      	mov	r0, r4
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b60:	f000 b80a 	b.w	8008b78 <__aeabi_d2ulz>
 8008b64:	4620      	mov	r0, r4
 8008b66:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8008b6a:	f000 f805 	bl	8008b78 <__aeabi_d2ulz>
 8008b6e:	4240      	negs	r0, r0
 8008b70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008b74:	bd38      	pop	{r3, r4, r5, pc}
 8008b76:	bf00      	nop

08008b78 <__aeabi_d2ulz>:
 8008b78:	b5d0      	push	{r4, r6, r7, lr}
 8008b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8008bac <__aeabi_d2ulz+0x34>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	4606      	mov	r6, r0
 8008b80:	460f      	mov	r7, r1
 8008b82:	f7ff fc81 	bl	8008488 <__aeabi_dmul>
 8008b86:	f7ff ff57 	bl	8008a38 <__aeabi_d2uiz>
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	f7ff fc02 	bl	8008394 <__aeabi_ui2d>
 8008b90:	4b07      	ldr	r3, [pc, #28]	@ (8008bb0 <__aeabi_d2ulz+0x38>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	f7ff fc78 	bl	8008488 <__aeabi_dmul>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	f7ff faba 	bl	8008118 <__aeabi_dsub>
 8008ba4:	f7ff ff48 	bl	8008a38 <__aeabi_d2uiz>
 8008ba8:	4621      	mov	r1, r4
 8008baa:	bdd0      	pop	{r4, r6, r7, pc}
 8008bac:	3df00000 	.word	0x3df00000
 8008bb0:	41f00000 	.word	0x41f00000

08008bb4 <__udivmoddi4>:
 8008bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb8:	9d08      	ldr	r5, [sp, #32]
 8008bba:	460c      	mov	r4, r1
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d14e      	bne.n	8008c5e <__udivmoddi4+0xaa>
 8008bc0:	4694      	mov	ip, r2
 8008bc2:	458c      	cmp	ip, r1
 8008bc4:	4686      	mov	lr, r0
 8008bc6:	fab2 f282 	clz	r2, r2
 8008bca:	d962      	bls.n	8008c92 <__udivmoddi4+0xde>
 8008bcc:	b14a      	cbz	r2, 8008be2 <__udivmoddi4+0x2e>
 8008bce:	f1c2 0320 	rsb	r3, r2, #32
 8008bd2:	4091      	lsls	r1, r2
 8008bd4:	fa20 f303 	lsr.w	r3, r0, r3
 8008bd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8008bdc:	4319      	orrs	r1, r3
 8008bde:	fa00 fe02 	lsl.w	lr, r0, r2
 8008be2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008be6:	fa1f f68c 	uxth.w	r6, ip
 8008bea:	fbb1 f4f7 	udiv	r4, r1, r7
 8008bee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8008bf2:	fb07 1114 	mls	r1, r7, r4, r1
 8008bf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bfa:	fb04 f106 	mul.w	r1, r4, r6
 8008bfe:	4299      	cmp	r1, r3
 8008c00:	d90a      	bls.n	8008c18 <__udivmoddi4+0x64>
 8008c02:	eb1c 0303 	adds.w	r3, ip, r3
 8008c06:	f104 30ff 	add.w	r0, r4, #4294967295
 8008c0a:	f080 8112 	bcs.w	8008e32 <__udivmoddi4+0x27e>
 8008c0e:	4299      	cmp	r1, r3
 8008c10:	f240 810f 	bls.w	8008e32 <__udivmoddi4+0x27e>
 8008c14:	3c02      	subs	r4, #2
 8008c16:	4463      	add	r3, ip
 8008c18:	1a59      	subs	r1, r3, r1
 8008c1a:	fa1f f38e 	uxth.w	r3, lr
 8008c1e:	fbb1 f0f7 	udiv	r0, r1, r7
 8008c22:	fb07 1110 	mls	r1, r7, r0, r1
 8008c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c2a:	fb00 f606 	mul.w	r6, r0, r6
 8008c2e:	429e      	cmp	r6, r3
 8008c30:	d90a      	bls.n	8008c48 <__udivmoddi4+0x94>
 8008c32:	eb1c 0303 	adds.w	r3, ip, r3
 8008c36:	f100 31ff 	add.w	r1, r0, #4294967295
 8008c3a:	f080 80fc 	bcs.w	8008e36 <__udivmoddi4+0x282>
 8008c3e:	429e      	cmp	r6, r3
 8008c40:	f240 80f9 	bls.w	8008e36 <__udivmoddi4+0x282>
 8008c44:	4463      	add	r3, ip
 8008c46:	3802      	subs	r0, #2
 8008c48:	1b9b      	subs	r3, r3, r6
 8008c4a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8008c4e:	2100      	movs	r1, #0
 8008c50:	b11d      	cbz	r5, 8008c5a <__udivmoddi4+0xa6>
 8008c52:	40d3      	lsrs	r3, r2
 8008c54:	2200      	movs	r2, #0
 8008c56:	e9c5 3200 	strd	r3, r2, [r5]
 8008c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c5e:	428b      	cmp	r3, r1
 8008c60:	d905      	bls.n	8008c6e <__udivmoddi4+0xba>
 8008c62:	b10d      	cbz	r5, 8008c68 <__udivmoddi4+0xb4>
 8008c64:	e9c5 0100 	strd	r0, r1, [r5]
 8008c68:	2100      	movs	r1, #0
 8008c6a:	4608      	mov	r0, r1
 8008c6c:	e7f5      	b.n	8008c5a <__udivmoddi4+0xa6>
 8008c6e:	fab3 f183 	clz	r1, r3
 8008c72:	2900      	cmp	r1, #0
 8008c74:	d146      	bne.n	8008d04 <__udivmoddi4+0x150>
 8008c76:	42a3      	cmp	r3, r4
 8008c78:	d302      	bcc.n	8008c80 <__udivmoddi4+0xcc>
 8008c7a:	4290      	cmp	r0, r2
 8008c7c:	f0c0 80f0 	bcc.w	8008e60 <__udivmoddi4+0x2ac>
 8008c80:	1a86      	subs	r6, r0, r2
 8008c82:	eb64 0303 	sbc.w	r3, r4, r3
 8008c86:	2001      	movs	r0, #1
 8008c88:	2d00      	cmp	r5, #0
 8008c8a:	d0e6      	beq.n	8008c5a <__udivmoddi4+0xa6>
 8008c8c:	e9c5 6300 	strd	r6, r3, [r5]
 8008c90:	e7e3      	b.n	8008c5a <__udivmoddi4+0xa6>
 8008c92:	2a00      	cmp	r2, #0
 8008c94:	f040 8090 	bne.w	8008db8 <__udivmoddi4+0x204>
 8008c98:	eba1 040c 	sub.w	r4, r1, ip
 8008c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008ca0:	fa1f f78c 	uxth.w	r7, ip
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	fbb4 f6f8 	udiv	r6, r4, r8
 8008caa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8008cae:	fb08 4416 	mls	r4, r8, r6, r4
 8008cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008cb6:	fb07 f006 	mul.w	r0, r7, r6
 8008cba:	4298      	cmp	r0, r3
 8008cbc:	d908      	bls.n	8008cd0 <__udivmoddi4+0x11c>
 8008cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8008cc2:	f106 34ff 	add.w	r4, r6, #4294967295
 8008cc6:	d202      	bcs.n	8008cce <__udivmoddi4+0x11a>
 8008cc8:	4298      	cmp	r0, r3
 8008cca:	f200 80cd 	bhi.w	8008e68 <__udivmoddi4+0x2b4>
 8008cce:	4626      	mov	r6, r4
 8008cd0:	1a1c      	subs	r4, r3, r0
 8008cd2:	fa1f f38e 	uxth.w	r3, lr
 8008cd6:	fbb4 f0f8 	udiv	r0, r4, r8
 8008cda:	fb08 4410 	mls	r4, r8, r0, r4
 8008cde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008ce2:	fb00 f707 	mul.w	r7, r0, r7
 8008ce6:	429f      	cmp	r7, r3
 8008ce8:	d908      	bls.n	8008cfc <__udivmoddi4+0x148>
 8008cea:	eb1c 0303 	adds.w	r3, ip, r3
 8008cee:	f100 34ff 	add.w	r4, r0, #4294967295
 8008cf2:	d202      	bcs.n	8008cfa <__udivmoddi4+0x146>
 8008cf4:	429f      	cmp	r7, r3
 8008cf6:	f200 80b0 	bhi.w	8008e5a <__udivmoddi4+0x2a6>
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	1bdb      	subs	r3, r3, r7
 8008cfe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008d02:	e7a5      	b.n	8008c50 <__udivmoddi4+0x9c>
 8008d04:	f1c1 0620 	rsb	r6, r1, #32
 8008d08:	408b      	lsls	r3, r1
 8008d0a:	fa22 f706 	lsr.w	r7, r2, r6
 8008d0e:	431f      	orrs	r7, r3
 8008d10:	fa20 fc06 	lsr.w	ip, r0, r6
 8008d14:	fa04 f301 	lsl.w	r3, r4, r1
 8008d18:	ea43 030c 	orr.w	r3, r3, ip
 8008d1c:	40f4      	lsrs	r4, r6
 8008d1e:	fa00 f801 	lsl.w	r8, r0, r1
 8008d22:	0c38      	lsrs	r0, r7, #16
 8008d24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8008d28:	fbb4 fef0 	udiv	lr, r4, r0
 8008d2c:	fa1f fc87 	uxth.w	ip, r7
 8008d30:	fb00 441e 	mls	r4, r0, lr, r4
 8008d34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008d38:	fb0e f90c 	mul.w	r9, lr, ip
 8008d3c:	45a1      	cmp	r9, r4
 8008d3e:	fa02 f201 	lsl.w	r2, r2, r1
 8008d42:	d90a      	bls.n	8008d5a <__udivmoddi4+0x1a6>
 8008d44:	193c      	adds	r4, r7, r4
 8008d46:	f10e 3aff 	add.w	sl, lr, #4294967295
 8008d4a:	f080 8084 	bcs.w	8008e56 <__udivmoddi4+0x2a2>
 8008d4e:	45a1      	cmp	r9, r4
 8008d50:	f240 8081 	bls.w	8008e56 <__udivmoddi4+0x2a2>
 8008d54:	f1ae 0e02 	sub.w	lr, lr, #2
 8008d58:	443c      	add	r4, r7
 8008d5a:	eba4 0409 	sub.w	r4, r4, r9
 8008d5e:	fa1f f983 	uxth.w	r9, r3
 8008d62:	fbb4 f3f0 	udiv	r3, r4, r0
 8008d66:	fb00 4413 	mls	r4, r0, r3, r4
 8008d6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008d6e:	fb03 fc0c 	mul.w	ip, r3, ip
 8008d72:	45a4      	cmp	ip, r4
 8008d74:	d907      	bls.n	8008d86 <__udivmoddi4+0x1d2>
 8008d76:	193c      	adds	r4, r7, r4
 8008d78:	f103 30ff 	add.w	r0, r3, #4294967295
 8008d7c:	d267      	bcs.n	8008e4e <__udivmoddi4+0x29a>
 8008d7e:	45a4      	cmp	ip, r4
 8008d80:	d965      	bls.n	8008e4e <__udivmoddi4+0x29a>
 8008d82:	3b02      	subs	r3, #2
 8008d84:	443c      	add	r4, r7
 8008d86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8008d8a:	fba0 9302 	umull	r9, r3, r0, r2
 8008d8e:	eba4 040c 	sub.w	r4, r4, ip
 8008d92:	429c      	cmp	r4, r3
 8008d94:	46ce      	mov	lr, r9
 8008d96:	469c      	mov	ip, r3
 8008d98:	d351      	bcc.n	8008e3e <__udivmoddi4+0x28a>
 8008d9a:	d04e      	beq.n	8008e3a <__udivmoddi4+0x286>
 8008d9c:	b155      	cbz	r5, 8008db4 <__udivmoddi4+0x200>
 8008d9e:	ebb8 030e 	subs.w	r3, r8, lr
 8008da2:	eb64 040c 	sbc.w	r4, r4, ip
 8008da6:	fa04 f606 	lsl.w	r6, r4, r6
 8008daa:	40cb      	lsrs	r3, r1
 8008dac:	431e      	orrs	r6, r3
 8008dae:	40cc      	lsrs	r4, r1
 8008db0:	e9c5 6400 	strd	r6, r4, [r5]
 8008db4:	2100      	movs	r1, #0
 8008db6:	e750      	b.n	8008c5a <__udivmoddi4+0xa6>
 8008db8:	f1c2 0320 	rsb	r3, r2, #32
 8008dbc:	fa20 f103 	lsr.w	r1, r0, r3
 8008dc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8008dc4:	fa24 f303 	lsr.w	r3, r4, r3
 8008dc8:	4094      	lsls	r4, r2
 8008dca:	430c      	orrs	r4, r1
 8008dcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008dd0:	fa00 fe02 	lsl.w	lr, r0, r2
 8008dd4:	fa1f f78c 	uxth.w	r7, ip
 8008dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ddc:	fb08 3110 	mls	r1, r8, r0, r3
 8008de0:	0c23      	lsrs	r3, r4, #16
 8008de2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008de6:	fb00 f107 	mul.w	r1, r0, r7
 8008dea:	4299      	cmp	r1, r3
 8008dec:	d908      	bls.n	8008e00 <__udivmoddi4+0x24c>
 8008dee:	eb1c 0303 	adds.w	r3, ip, r3
 8008df2:	f100 36ff 	add.w	r6, r0, #4294967295
 8008df6:	d22c      	bcs.n	8008e52 <__udivmoddi4+0x29e>
 8008df8:	4299      	cmp	r1, r3
 8008dfa:	d92a      	bls.n	8008e52 <__udivmoddi4+0x29e>
 8008dfc:	3802      	subs	r0, #2
 8008dfe:	4463      	add	r3, ip
 8008e00:	1a5b      	subs	r3, r3, r1
 8008e02:	b2a4      	uxth	r4, r4
 8008e04:	fbb3 f1f8 	udiv	r1, r3, r8
 8008e08:	fb08 3311 	mls	r3, r8, r1, r3
 8008e0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008e10:	fb01 f307 	mul.w	r3, r1, r7
 8008e14:	42a3      	cmp	r3, r4
 8008e16:	d908      	bls.n	8008e2a <__udivmoddi4+0x276>
 8008e18:	eb1c 0404 	adds.w	r4, ip, r4
 8008e1c:	f101 36ff 	add.w	r6, r1, #4294967295
 8008e20:	d213      	bcs.n	8008e4a <__udivmoddi4+0x296>
 8008e22:	42a3      	cmp	r3, r4
 8008e24:	d911      	bls.n	8008e4a <__udivmoddi4+0x296>
 8008e26:	3902      	subs	r1, #2
 8008e28:	4464      	add	r4, ip
 8008e2a:	1ae4      	subs	r4, r4, r3
 8008e2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e30:	e739      	b.n	8008ca6 <__udivmoddi4+0xf2>
 8008e32:	4604      	mov	r4, r0
 8008e34:	e6f0      	b.n	8008c18 <__udivmoddi4+0x64>
 8008e36:	4608      	mov	r0, r1
 8008e38:	e706      	b.n	8008c48 <__udivmoddi4+0x94>
 8008e3a:	45c8      	cmp	r8, r9
 8008e3c:	d2ae      	bcs.n	8008d9c <__udivmoddi4+0x1e8>
 8008e3e:	ebb9 0e02 	subs.w	lr, r9, r2
 8008e42:	eb63 0c07 	sbc.w	ip, r3, r7
 8008e46:	3801      	subs	r0, #1
 8008e48:	e7a8      	b.n	8008d9c <__udivmoddi4+0x1e8>
 8008e4a:	4631      	mov	r1, r6
 8008e4c:	e7ed      	b.n	8008e2a <__udivmoddi4+0x276>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	e799      	b.n	8008d86 <__udivmoddi4+0x1d2>
 8008e52:	4630      	mov	r0, r6
 8008e54:	e7d4      	b.n	8008e00 <__udivmoddi4+0x24c>
 8008e56:	46d6      	mov	lr, sl
 8008e58:	e77f      	b.n	8008d5a <__udivmoddi4+0x1a6>
 8008e5a:	4463      	add	r3, ip
 8008e5c:	3802      	subs	r0, #2
 8008e5e:	e74d      	b.n	8008cfc <__udivmoddi4+0x148>
 8008e60:	4606      	mov	r6, r0
 8008e62:	4623      	mov	r3, r4
 8008e64:	4608      	mov	r0, r1
 8008e66:	e70f      	b.n	8008c88 <__udivmoddi4+0xd4>
 8008e68:	3e02      	subs	r6, #2
 8008e6a:	4463      	add	r3, ip
 8008e6c:	e730      	b.n	8008cd0 <__udivmoddi4+0x11c>
 8008e6e:	bf00      	nop

08008e70 <__aeabi_idiv0>:
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop

08008e74 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8008e74:	4770      	bx	lr
	...

08008e78 <HAL_DeInit>:
{
 8008e78:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 8008e7a:	4b09      	ldr	r3, [pc, #36]	@ (8008ea0 <HAL_DeInit+0x28>)
 8008e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e80:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8008e82:	2400      	movs	r4, #0
 8008e84:	621c      	str	r4, [r3, #32]
  __HAL_RCC_APB2_FORCE_RESET();
 8008e86:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8008e88:	625c      	str	r4, [r3, #36]	@ 0x24
  __HAL_RCC_AHB1_FORCE_RESET();
 8008e8a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8008e8c:	611c      	str	r4, [r3, #16]
  __HAL_RCC_AHB2_FORCE_RESET();
 8008e8e:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8008e90:	615c      	str	r4, [r3, #20]
  __HAL_RCC_AHB3_FORCE_RESET();
 8008e92:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8008e94:	619c      	str	r4, [r3, #24]
  HAL_MspDeInit();
 8008e96:	f7ff ffed 	bl	8008e74 <HAL_MspDeInit>
}
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	bd10      	pop	{r4, pc}
 8008e9e:	bf00      	nop
 8008ea0:	40023800 	.word	0x40023800

08008ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ea4:	b510      	push	{r4, lr}
 8008ea6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8008ee4 <HAL_InitTick+0x40>)
 8008eaa:	781a      	ldrb	r2, [r3, #0]
 8008eac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8008ee8 <HAL_InitTick+0x44>)
 8008eb6:	6810      	ldr	r0, [r2, #0]
 8008eb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8008ebc:	f000 f8d2 	bl	8009064 <HAL_SYSTICK_Config>
 8008ec0:	b968      	cbnz	r0, 8008ede <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ec2:	2c0f      	cmp	r4, #15
 8008ec4:	d901      	bls.n	8008eca <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8008ec6:	2001      	movs	r0, #1
 8008ec8:	e00a      	b.n	8008ee0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008eca:	2200      	movs	r2, #0
 8008ecc:	4621      	mov	r1, r4
 8008ece:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed2:	f000 f8a5 	bl	8009020 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008ed6:	4b05      	ldr	r3, [pc, #20]	@ (8008eec <HAL_InitTick+0x48>)
 8008ed8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008eda:	2000      	movs	r0, #0
 8008edc:	e000      	b.n	8008ee0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8008ede:	2001      	movs	r0, #1
}
 8008ee0:	bd10      	pop	{r4, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20000000 	.word	0x20000000
 8008ee8:	200001a4 	.word	0x200001a4
 8008eec:	20000004 	.word	0x20000004

08008ef0 <HAL_Init>:
{
 8008ef0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8008f20 <HAL_Init+0x30>)
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008efa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008f02:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f0a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008f0c:	2003      	movs	r0, #3
 8008f0e:	f000 f875 	bl	8008ffc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8008f12:	2000      	movs	r0, #0
 8008f14:	f7ff ffc6 	bl	8008ea4 <HAL_InitTick>
  HAL_MspInit();
 8008f18:	f003 ffe8 	bl	800ceec <HAL_MspInit>
}
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	bd08      	pop	{r3, pc}
 8008f20:	40023c00 	.word	0x40023c00

08008f24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008f24:	4a03      	ldr	r2, [pc, #12]	@ (8008f34 <HAL_IncTick+0x10>)
 8008f26:	6811      	ldr	r1, [r2, #0]
 8008f28:	4b03      	ldr	r3, [pc, #12]	@ (8008f38 <HAL_IncTick+0x14>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	440b      	add	r3, r1
 8008f2e:	6013      	str	r3, [r2, #0]
}
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	20000698 	.word	0x20000698
 8008f38:	20000000 	.word	0x20000000

08008f3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008f3c:	4b01      	ldr	r3, [pc, #4]	@ (8008f44 <HAL_GetTick+0x8>)
 8008f3e:	6818      	ldr	r0, [r3, #0]
}
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	20000698 	.word	0x20000698

08008f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008f4c:	f7ff fff6 	bl	8008f3c <HAL_GetTick>
 8008f50:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f52:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008f56:	d002      	beq.n	8008f5e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f58:	4b04      	ldr	r3, [pc, #16]	@ (8008f6c <HAL_Delay+0x24>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008f5e:	f7ff ffed 	bl	8008f3c <HAL_GetTick>
 8008f62:	1b40      	subs	r0, r0, r5
 8008f64:	42a0      	cmp	r0, r4
 8008f66:	d3fa      	bcc.n	8008f5e <HAL_Delay+0x16>
  {
  }
}
 8008f68:	bd38      	pop	{r3, r4, r5, pc}
 8008f6a:	bf00      	nop
 8008f6c:	20000000 	.word	0x20000000

08008f70 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8008f70:	2800      	cmp	r0, #0
 8008f72:	db0c      	blt.n	8008f8e <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f74:	f000 021f 	and.w	r2, r0, #31
 8008f78:	0940      	lsrs	r0, r0, #5
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	4093      	lsls	r3, r2
 8008f7e:	3020      	adds	r0, #32
 8008f80:	4a03      	ldr	r2, [pc, #12]	@ (8008f90 <__NVIC_DisableIRQ+0x20>)
 8008f82:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008f86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008f8a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8008f8e:	4770      	bx	lr
 8008f90:	e000e100 	.word	0xe000e100

08008f94 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8008f94:	2800      	cmp	r0, #0
 8008f96:	db08      	blt.n	8008faa <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f98:	0109      	lsls	r1, r1, #4
 8008f9a:	b2c9      	uxtb	r1, r1
 8008f9c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8008fa0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8008fa4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8008fa8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008faa:	f000 000f 	and.w	r0, r0, #15
 8008fae:	0109      	lsls	r1, r1, #4
 8008fb0:	b2c9      	uxtb	r1, r1
 8008fb2:	4b01      	ldr	r3, [pc, #4]	@ (8008fb8 <__NVIC_SetPriority+0x24>)
 8008fb4:	5419      	strb	r1, [r3, r0]
  }
}
 8008fb6:	4770      	bx	lr
 8008fb8:	e000ed14 	.word	0xe000ed14

08008fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008fbc:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008fbe:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008fc2:	f1c0 0c07 	rsb	ip, r0, #7
 8008fc6:	f1bc 0f04 	cmp.w	ip, #4
 8008fca:	bf28      	it	cs
 8008fcc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008fd0:	1d03      	adds	r3, r0, #4
 8008fd2:	2b06      	cmp	r3, #6
 8008fd4:	d90f      	bls.n	8008ff6 <NVIC_EncodePriority+0x3a>
 8008fd6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008fd8:	f04f 3eff 	mov.w	lr, #4294967295
 8008fdc:	fa0e f00c 	lsl.w	r0, lr, ip
 8008fe0:	ea21 0100 	bic.w	r1, r1, r0
 8008fe4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008fe6:	fa0e fe03 	lsl.w	lr, lr, r3
 8008fea:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8008fee:	ea41 0002 	orr.w	r0, r1, r2
 8008ff2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	e7ee      	b.n	8008fd8 <NVIC_EncodePriority+0x1c>
	...

08008ffc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008ffc:	4a07      	ldr	r2, [pc, #28]	@ (800901c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008ffe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009000:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009004:	041b      	lsls	r3, r3, #16
 8009006:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009008:	0200      	lsls	r0, r0, #8
 800900a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800900e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8009010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8009018:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800901a:	4770      	bx	lr
 800901c:	e000ed00 	.word	0xe000ed00

08009020 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009020:	b510      	push	{r4, lr}
 8009022:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009024:	4b05      	ldr	r3, [pc, #20]	@ (800903c <HAL_NVIC_SetPriority+0x1c>)
 8009026:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009028:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800902c:	f7ff ffc6 	bl	8008fbc <NVIC_EncodePriority>
 8009030:	4601      	mov	r1, r0
 8009032:	4620      	mov	r0, r4
 8009034:	f7ff ffae 	bl	8008f94 <__NVIC_SetPriority>
}
 8009038:	bd10      	pop	{r4, pc}
 800903a:	bf00      	nop
 800903c:	e000ed00 	.word	0xe000ed00

08009040 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8009040:	2800      	cmp	r0, #0
 8009042:	db07      	blt.n	8009054 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009044:	f000 021f 	and.w	r2, r0, #31
 8009048:	0940      	lsrs	r0, r0, #5
 800904a:	2301      	movs	r3, #1
 800904c:	4093      	lsls	r3, r2
 800904e:	4a02      	ldr	r2, [pc, #8]	@ (8009058 <HAL_NVIC_EnableIRQ+0x18>)
 8009050:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	e000e100 	.word	0xe000e100

0800905c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800905c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800905e:	f7ff ff87 	bl	8008f70 <__NVIC_DisableIRQ>
}
 8009062:	bd08      	pop	{r3, pc}

08009064 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009064:	3801      	subs	r0, #1
 8009066:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800906a:	d20b      	bcs.n	8009084 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800906c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009070:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009072:	4a05      	ldr	r2, [pc, #20]	@ (8009088 <HAL_SYSTICK_Config+0x24>)
 8009074:	21f0      	movs	r1, #240	@ 0xf0
 8009076:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800907a:	2000      	movs	r0, #0
 800907c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800907e:	2207      	movs	r2, #7
 8009080:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009082:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8009084:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8009086:	4770      	bx	lr
 8009088:	e000ed00 	.word	0xe000ed00

0800908c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800908c:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800908e:	490a      	ldr	r1, [pc, #40]	@ (80090b8 <FLASH_Program_DoubleWord+0x2c>)
 8009090:	690c      	ldr	r4, [r1, #16]
 8009092:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
 8009096:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8009098:	690c      	ldr	r4, [r1, #16]
 800909a:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
 800909e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80090a0:	690c      	ldr	r4, [r1, #16]
 80090a2:	f044 0401 	orr.w	r4, r4, #1
 80090a6:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80090a8:	6002      	str	r2, [r0, #0]
 80090aa:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80090ae:	6043      	str	r3, [r0, #4]
}
 80090b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	40023c00 	.word	0x40023c00

080090bc <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80090bc:	4b07      	ldr	r3, [pc, #28]	@ (80090dc <FLASH_Program_Word+0x20>)
 80090be:	691a      	ldr	r2, [r3, #16]
 80090c0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80090c4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80090c6:	691a      	ldr	r2, [r3, #16]
 80090c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090cc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80090ce:	691a      	ldr	r2, [r3, #16]
 80090d0:	f042 0201 	orr.w	r2, r2, #1
 80090d4:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80090d6:	6001      	str	r1, [r0, #0]
}
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	40023c00 	.word	0x40023c00

080090e0 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80090e0:	4b07      	ldr	r3, [pc, #28]	@ (8009100 <FLASH_Program_HalfWord+0x20>)
 80090e2:	691a      	ldr	r2, [r3, #16]
 80090e4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80090e8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80090ea:	691a      	ldr	r2, [r3, #16]
 80090ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090f0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80090f2:	691a      	ldr	r2, [r3, #16]
 80090f4:	f042 0201 	orr.w	r2, r2, #1
 80090f8:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80090fa:	8001      	strh	r1, [r0, #0]
}
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	40023c00 	.word	0x40023c00

08009104 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009104:	4b06      	ldr	r3, [pc, #24]	@ (8009120 <FLASH_Program_Byte+0x1c>)
 8009106:	691a      	ldr	r2, [r3, #16]
 8009108:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800910c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800910e:	691a      	ldr	r2, [r3, #16]
 8009110:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009112:	691a      	ldr	r2, [r3, #16]
 8009114:	f042 0201 	orr.w	r2, r2, #1
 8009118:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 800911a:	7001      	strb	r1, [r0, #0]
}
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	40023c00 	.word	0x40023c00

08009124 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8009124:	4b20      	ldr	r3, [pc, #128]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	f013 0f10 	tst.w	r3, #16
 800912c:	d007      	beq.n	800913e <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800912e:	4a1f      	ldr	r2, [pc, #124]	@ (80091ac <FLASH_SetErrorCode+0x88>)
 8009130:	69d3      	ldr	r3, [r2, #28]
 8009132:	f043 0310 	orr.w	r3, r3, #16
 8009136:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8009138:	4b1b      	ldr	r3, [pc, #108]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 800913a:	2210      	movs	r2, #16
 800913c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800913e:	4b1a      	ldr	r3, [pc, #104]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	f013 0f20 	tst.w	r3, #32
 8009146:	d007      	beq.n	8009158 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8009148:	4a18      	ldr	r2, [pc, #96]	@ (80091ac <FLASH_SetErrorCode+0x88>)
 800914a:	69d3      	ldr	r3, [r2, #28]
 800914c:	f043 0308 	orr.w	r3, r3, #8
 8009150:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8009152:	4b15      	ldr	r3, [pc, #84]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 8009154:	2220      	movs	r2, #32
 8009156:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009158:	4b13      	ldr	r3, [pc, #76]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009160:	d007      	beq.n	8009172 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8009162:	4a12      	ldr	r2, [pc, #72]	@ (80091ac <FLASH_SetErrorCode+0x88>)
 8009164:	69d3      	ldr	r3, [r2, #28]
 8009166:	f043 0304 	orr.w	r3, r3, #4
 800916a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800916c:	4b0e      	ldr	r3, [pc, #56]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 800916e:	2240      	movs	r2, #64	@ 0x40
 8009170:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8009172:	4b0d      	ldr	r3, [pc, #52]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800917a:	d007      	beq.n	800918c <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800917c:	4a0b      	ldr	r2, [pc, #44]	@ (80091ac <FLASH_SetErrorCode+0x88>)
 800917e:	69d3      	ldr	r3, [r2, #28]
 8009180:	f043 0302 	orr.w	r3, r3, #2
 8009184:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8009186:	4b08      	ldr	r3, [pc, #32]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 8009188:	2280      	movs	r2, #128	@ 0x80
 800918a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800918c:	4b06      	ldr	r3, [pc, #24]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f013 0f02 	tst.w	r3, #2
 8009194:	d007      	beq.n	80091a6 <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8009196:	4a05      	ldr	r2, [pc, #20]	@ (80091ac <FLASH_SetErrorCode+0x88>)
 8009198:	69d3      	ldr	r3, [r2, #28]
 800919a:	f043 0320 	orr.w	r3, r3, #32
 800919e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80091a0:	4b01      	ldr	r3, [pc, #4]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 80091a2:	2202      	movs	r2, #2
 80091a4:	60da      	str	r2, [r3, #12]
  }
}
 80091a6:	4770      	bx	lr
 80091a8:	40023c00 	.word	0x40023c00
 80091ac:	2000069c 	.word	0x2000069c

080091b0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80091b0:	4b09      	ldr	r3, [pc, #36]	@ (80091d8 <HAL_FLASH_Unlock+0x28>)
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	db01      	blt.n	80091bc <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80091b8:	2000      	movs	r0, #0
 80091ba:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80091bc:	4b06      	ldr	r3, [pc, #24]	@ (80091d8 <HAL_FLASH_Unlock+0x28>)
 80091be:	4a07      	ldr	r2, [pc, #28]	@ (80091dc <HAL_FLASH_Unlock+0x2c>)
 80091c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80091c2:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 80091c6:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	db01      	blt.n	80091d2 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80091ce:	2000      	movs	r0, #0
 80091d0:	4770      	bx	lr
      status = HAL_ERROR;
 80091d2:	2001      	movs	r0, #1
}
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	40023c00 	.word	0x40023c00
 80091dc:	45670123 	.word	0x45670123

080091e0 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 80091e0:	4a03      	ldr	r2, [pc, #12]	@ (80091f0 <HAL_FLASH_Lock+0x10>)
 80091e2:	6913      	ldr	r3, [r2, #16]
 80091e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091e8:	6113      	str	r3, [r2, #16]
}
 80091ea:	2000      	movs	r0, #0
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	40023c00 	.word	0x40023c00

080091f4 <FLASH_WaitForLastOperation>:
{ 
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80091f8:	4b14      	ldr	r3, [pc, #80]	@ (800924c <FLASH_WaitForLastOperation+0x58>)
 80091fa:	2200      	movs	r2, #0
 80091fc:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 80091fe:	f7ff fe9d 	bl	8008f3c <HAL_GetTick>
 8009202:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009204:	4b12      	ldr	r3, [pc, #72]	@ (8009250 <FLASH_WaitForLastOperation+0x5c>)
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800920c:	d00a      	beq.n	8009224 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 800920e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009212:	d0f7      	beq.n	8009204 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009214:	b124      	cbz	r4, 8009220 <FLASH_WaitForLastOperation+0x2c>
 8009216:	f7ff fe91 	bl	8008f3c <HAL_GetTick>
 800921a:	1b40      	subs	r0, r0, r5
 800921c:	42a0      	cmp	r0, r4
 800921e:	d9f1      	bls.n	8009204 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8009220:	2003      	movs	r0, #3
 8009222:	e00d      	b.n	8009240 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009224:	4b0a      	ldr	r3, [pc, #40]	@ (8009250 <FLASH_WaitForLastOperation+0x5c>)
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	f013 0f01 	tst.w	r3, #1
 800922c:	d002      	beq.n	8009234 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800922e:	4b08      	ldr	r3, [pc, #32]	@ (8009250 <FLASH_WaitForLastOperation+0x5c>)
 8009230:	2201      	movs	r2, #1
 8009232:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8009234:	4b06      	ldr	r3, [pc, #24]	@ (8009250 <FLASH_WaitForLastOperation+0x5c>)
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	f013 0ff2 	tst.w	r3, #242	@ 0xf2
 800923c:	d101      	bne.n	8009242 <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 800923e:	2000      	movs	r0, #0
}  
 8009240:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 8009242:	f7ff ff6f 	bl	8009124 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8009246:	2001      	movs	r0, #1
 8009248:	e7fa      	b.n	8009240 <FLASH_WaitForLastOperation+0x4c>
 800924a:	bf00      	nop
 800924c:	2000069c 	.word	0x2000069c
 8009250:	40023c00 	.word	0x40023c00

08009254 <HAL_FLASH_Program>:
{
 8009254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009256:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8009258:	4a1b      	ldr	r2, [pc, #108]	@ (80092c8 <HAL_FLASH_Program+0x74>)
 800925a:	7e12      	ldrb	r2, [r2, #24]
 800925c:	2a01      	cmp	r2, #1
 800925e:	d030      	beq.n	80092c2 <HAL_FLASH_Program+0x6e>
 8009260:	4604      	mov	r4, r0
 8009262:	460d      	mov	r5, r1
 8009264:	461f      	mov	r7, r3
 8009266:	4b18      	ldr	r3, [pc, #96]	@ (80092c8 <HAL_FLASH_Program+0x74>)
 8009268:	2201      	movs	r2, #1
 800926a:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800926c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009270:	f7ff ffc0 	bl	80091f4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8009274:	b990      	cbnz	r0, 800929c <HAL_FLASH_Program+0x48>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8009276:	b1ac      	cbz	r4, 80092a4 <HAL_FLASH_Program+0x50>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009278:	2c01      	cmp	r4, #1
 800927a:	d018      	beq.n	80092ae <HAL_FLASH_Program+0x5a>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800927c:	2c02      	cmp	r4, #2
 800927e:	d01b      	beq.n	80092b8 <HAL_FLASH_Program+0x64>
      FLASH_Program_DoubleWord(Address, Data);
 8009280:	4632      	mov	r2, r6
 8009282:	463b      	mov	r3, r7
 8009284:	4628      	mov	r0, r5
 8009286:	f7ff ff01 	bl	800908c <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800928a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800928e:	f7ff ffb1 	bl	80091f4 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8009292:	4a0e      	ldr	r2, [pc, #56]	@ (80092cc <HAL_FLASH_Program+0x78>)
 8009294:	6913      	ldr	r3, [r2, #16]
 8009296:	f023 0301 	bic.w	r3, r3, #1
 800929a:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 800929c:	4b0a      	ldr	r3, [pc, #40]	@ (80092c8 <HAL_FLASH_Program+0x74>)
 800929e:	2200      	movs	r2, #0
 80092a0:	761a      	strb	r2, [r3, #24]
}
 80092a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80092a4:	b2f1      	uxtb	r1, r6
 80092a6:	4628      	mov	r0, r5
 80092a8:	f7ff ff2c 	bl	8009104 <FLASH_Program_Byte>
 80092ac:	e7ed      	b.n	800928a <HAL_FLASH_Program+0x36>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80092ae:	b2b1      	uxth	r1, r6
 80092b0:	4628      	mov	r0, r5
 80092b2:	f7ff ff15 	bl	80090e0 <FLASH_Program_HalfWord>
 80092b6:	e7e8      	b.n	800928a <HAL_FLASH_Program+0x36>
      FLASH_Program_Word(Address, (uint32_t) Data);
 80092b8:	4631      	mov	r1, r6
 80092ba:	4628      	mov	r0, r5
 80092bc:	f7ff fefe 	bl	80090bc <FLASH_Program_Word>
 80092c0:	e7e3      	b.n	800928a <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 80092c2:	2002      	movs	r0, #2
 80092c4:	e7ed      	b.n	80092a2 <HAL_FLASH_Program+0x4e>
 80092c6:	bf00      	nop
 80092c8:	2000069c 	.word	0x2000069c
 80092cc:	40023c00 	.word	0x40023c00

080092d0 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80092d0:	4b07      	ldr	r3, [pc, #28]	@ (80092f0 <FLASH_MassErase+0x20>)
 80092d2:	691a      	ldr	r2, [r3, #16]
 80092d4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80092d8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 80092da:	691a      	ldr	r2, [r3, #16]
 80092dc:	f042 0204 	orr.w	r2, r2, #4
 80092e0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80092e2:	691a      	ldr	r2, [r3, #16]
 80092e4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80092e8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80092ec:	611a      	str	r2, [r3, #16]
}
 80092ee:	4770      	bx	lr
 80092f0:	40023c00 	.word	0x40023c00

080092f4 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80092f4:	2901      	cmp	r1, #1
 80092f6:	d01b      	beq.n	8009330 <FLASH_Erase_Sector+0x3c>
 80092f8:	2902      	cmp	r1, #2
 80092fa:	d01c      	beq.n	8009336 <FLASH_Erase_Sector+0x42>
 80092fc:	b109      	cbz	r1, 8009302 <FLASH_Erase_Sector+0xe>
{
 80092fe:	f44f 7140 	mov.w	r1, #768	@ 0x300
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009302:	4b0e      	ldr	r3, [pc, #56]	@ (800933c <FLASH_Erase_Sector+0x48>)
 8009304:	691a      	ldr	r2, [r3, #16]
 8009306:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800930a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800930c:	691a      	ldr	r2, [r3, #16]
 800930e:	430a      	orrs	r2, r1
 8009310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8009312:	691a      	ldr	r2, [r3, #16]
 8009314:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8009318:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800931a:	691a      	ldr	r2, [r3, #16]
 800931c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8009320:	f040 0002 	orr.w	r0, r0, #2
 8009324:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8009326:	691a      	ldr	r2, [r3, #16]
 8009328:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800932c:	611a      	str	r2, [r3, #16]
}
 800932e:	4770      	bx	lr
{
 8009330:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009334:	e7e5      	b.n	8009302 <FLASH_Erase_Sector+0xe>
 8009336:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800933a:	e7e2      	b.n	8009302 <FLASH_Erase_Sector+0xe>
 800933c:	40023c00 	.word	0x40023c00

08009340 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8009340:	4b16      	ldr	r3, [pc, #88]	@ (800939c <FLASH_FlushCaches+0x5c>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8009348:	d010      	beq.n	800936c <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800934a:	4b14      	ldr	r3, [pc, #80]	@ (800939c <FLASH_FlushCaches+0x5c>)
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009352:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009362:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800936a:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800936c:	4b0b      	ldr	r3, [pc, #44]	@ (800939c <FLASH_FlushCaches+0x5c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8009374:	d010      	beq.n	8009398 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8009376:	4b09      	ldr	r3, [pc, #36]	@ (800939c <FLASH_FlushCaches+0x5c>)
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800937e:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009386:	601a      	str	r2, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800938e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009396:	601a      	str	r2, [r3, #0]
  }
}
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	40023c00 	.word	0x40023c00

080093a0 <HAL_FLASHEx_Erase>:
{
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80093a2:	4b22      	ldr	r3, [pc, #136]	@ (800942c <HAL_FLASHEx_Erase+0x8c>)
 80093a4:	7e1b      	ldrb	r3, [r3, #24]
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d03e      	beq.n	8009428 <HAL_FLASHEx_Erase+0x88>
 80093aa:	4604      	mov	r4, r0
 80093ac:	460e      	mov	r6, r1
 80093ae:	4b1f      	ldr	r3, [pc, #124]	@ (800942c <HAL_FLASHEx_Erase+0x8c>)
 80093b0:	2201      	movs	r2, #1
 80093b2:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80093b4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80093b8:	f7ff ff1c 	bl	80091f4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80093bc:	4607      	mov	r7, r0
 80093be:	bb70      	cbnz	r0, 800941e <HAL_FLASHEx_Erase+0x7e>
    *SectorError = 0xFFFFFFFFU;
 80093c0:	f04f 33ff 	mov.w	r3, #4294967295
 80093c4:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d016      	beq.n	80093fa <HAL_FLASHEx_Erase+0x5a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80093cc:	68a5      	ldr	r5, [r4, #8]
 80093ce:	68e3      	ldr	r3, [r4, #12]
 80093d0:	68a2      	ldr	r2, [r4, #8]
 80093d2:	4413      	add	r3, r2
 80093d4:	42ab      	cmp	r3, r5
 80093d6:	d920      	bls.n	800941a <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80093d8:	7c21      	ldrb	r1, [r4, #16]
 80093da:	4628      	mov	r0, r5
 80093dc:	f7ff ff8a 	bl	80092f4 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80093e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80093e4:	f7ff ff06 	bl	80091f4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80093e8:	4a11      	ldr	r2, [pc, #68]	@ (8009430 <HAL_FLASHEx_Erase+0x90>)
 80093ea:	6913      	ldr	r3, [r2, #16]
 80093ec:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80093f0:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 80093f2:	4607      	mov	r7, r0
 80093f4:	b980      	cbnz	r0, 8009418 <HAL_FLASHEx_Erase+0x78>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80093f6:	3501      	adds	r5, #1
 80093f8:	e7e9      	b.n	80093ce <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80093fa:	6861      	ldr	r1, [r4, #4]
 80093fc:	7c20      	ldrb	r0, [r4, #16]
 80093fe:	f7ff ff67 	bl	80092d0 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009402:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009406:	f7ff fef5 	bl	80091f4 <FLASH_WaitForLastOperation>
 800940a:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800940c:	4a08      	ldr	r2, [pc, #32]	@ (8009430 <HAL_FLASHEx_Erase+0x90>)
 800940e:	6913      	ldr	r3, [r2, #16]
 8009410:	f023 0304 	bic.w	r3, r3, #4
 8009414:	6113      	str	r3, [r2, #16]
 8009416:	e000      	b.n	800941a <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 8009418:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();    
 800941a:	f7ff ff91 	bl	8009340 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800941e:	4b03      	ldr	r3, [pc, #12]	@ (800942c <HAL_FLASHEx_Erase+0x8c>)
 8009420:	2200      	movs	r2, #0
 8009422:	761a      	strb	r2, [r3, #24]
}
 8009424:	4638      	mov	r0, r7
 8009426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8009428:	2702      	movs	r7, #2
 800942a:	e7fb      	b.n	8009424 <HAL_FLASHEx_Erase+0x84>
 800942c:	2000069c 	.word	0x2000069c
 8009430:	40023c00 	.word	0x40023c00

08009434 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009434:	2300      	movs	r3, #0
 8009436:	2b0f      	cmp	r3, #15
 8009438:	f200 80da 	bhi.w	80095f0 <HAL_GPIO_Init+0x1bc>
{
 800943c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800943e:	b083      	sub	sp, #12
 8009440:	e03a      	b.n	80094b8 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009442:	2207      	movs	r2, #7
 8009444:	e000      	b.n	8009448 <HAL_GPIO_Init+0x14>
 8009446:	2200      	movs	r2, #0
 8009448:	40aa      	lsls	r2, r5
 800944a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800944c:	3402      	adds	r4, #2
 800944e:	4d69      	ldr	r5, [pc, #420]	@ (80095f4 <HAL_GPIO_Init+0x1c0>)
 8009450:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009454:	4a68      	ldr	r2, [pc, #416]	@ (80095f8 <HAL_GPIO_Init+0x1c4>)
 8009456:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8009458:	ea6f 020c 	mvn.w	r2, ip
 800945c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009460:	684e      	ldr	r6, [r1, #4]
 8009462:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8009466:	d001      	beq.n	800946c <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8009468:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 800946c:	4c62      	ldr	r4, [pc, #392]	@ (80095f8 <HAL_GPIO_Init+0x1c4>)
 800946e:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8009470:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8009472:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009476:	684e      	ldr	r6, [r1, #4]
 8009478:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800947c:	d001      	beq.n	8009482 <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 800947e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8009482:	4c5d      	ldr	r4, [pc, #372]	@ (80095f8 <HAL_GPIO_Init+0x1c4>)
 8009484:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009486:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8009488:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800948c:	684e      	ldr	r6, [r1, #4]
 800948e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8009492:	d001      	beq.n	8009498 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8009494:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8009498:	4c57      	ldr	r4, [pc, #348]	@ (80095f8 <HAL_GPIO_Init+0x1c4>)
 800949a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800949c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800949e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80094a0:	684d      	ldr	r5, [r1, #4]
 80094a2:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
 80094a6:	d001      	beq.n	80094ac <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 80094a8:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 80094ac:	4c52      	ldr	r4, [pc, #328]	@ (80095f8 <HAL_GPIO_Init+0x1c4>)
 80094ae:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80094b0:	3301      	adds	r3, #1
 80094b2:	2b0f      	cmp	r3, #15
 80094b4:	f200 809a 	bhi.w	80095ec <HAL_GPIO_Init+0x1b8>
    ioposition = 0x01U << position;
 80094b8:	2201      	movs	r2, #1
 80094ba:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80094bc:	680c      	ldr	r4, [r1, #0]
 80094be:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80094c2:	ea32 0404 	bics.w	r4, r2, r4
 80094c6:	d1f3      	bne.n	80094b0 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80094c8:	684c      	ldr	r4, [r1, #4]
 80094ca:	1e65      	subs	r5, r4, #1
 80094cc:	2d01      	cmp	r5, #1
 80094ce:	d903      	bls.n	80094d8 <HAL_GPIO_Init+0xa4>
 80094d0:	2c11      	cmp	r4, #17
 80094d2:	d001      	beq.n	80094d8 <HAL_GPIO_Init+0xa4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80094d4:	2c12      	cmp	r4, #18
 80094d6:	d112      	bne.n	80094fe <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR; 
 80094d8:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80094da:	005e      	lsls	r6, r3, #1
 80094dc:	2403      	movs	r4, #3
 80094de:	40b4      	lsls	r4, r6
 80094e0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80094e4:	68cc      	ldr	r4, [r1, #12]
 80094e6:	40b4      	lsls	r4, r6
 80094e8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80094ea:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80094ec:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80094ee:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80094f2:	684a      	ldr	r2, [r1, #4]
 80094f4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80094f8:	409a      	lsls	r2, r3
 80094fa:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80094fc:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80094fe:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009500:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8009504:	2203      	movs	r2, #3
 8009506:	fa02 f20e 	lsl.w	r2, r2, lr
 800950a:	43d4      	mvns	r4, r2
 800950c:	ea25 0502 	bic.w	r5, r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009510:	688a      	ldr	r2, [r1, #8]
 8009512:	fa02 f20e 	lsl.w	r2, r2, lr
 8009516:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8009518:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800951a:	684a      	ldr	r2, [r1, #4]
 800951c:	2a02      	cmp	r2, #2
 800951e:	d001      	beq.n	8009524 <HAL_GPIO_Init+0xf0>
 8009520:	2a12      	cmp	r2, #18
 8009522:	d10f      	bne.n	8009544 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3U];
 8009524:	08dd      	lsrs	r5, r3, #3
 8009526:	3508      	adds	r5, #8
 8009528:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800952c:	f003 0607 	and.w	r6, r3, #7
 8009530:	00b6      	lsls	r6, r6, #2
 8009532:	220f      	movs	r2, #15
 8009534:	40b2      	lsls	r2, r6
 8009536:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800953a:	690a      	ldr	r2, [r1, #16]
 800953c:	40b2      	lsls	r2, r6
 800953e:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8009540:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8009544:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009546:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009548:	684a      	ldr	r2, [r1, #4]
 800954a:	f002 0203 	and.w	r2, r2, #3
 800954e:	fa02 f20e 	lsl.w	r2, r2, lr
 8009552:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8009554:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009556:	684a      	ldr	r2, [r1, #4]
 8009558:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 800955c:	d0a8      	beq.n	80094b0 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800955e:	2200      	movs	r2, #0
 8009560:	9201      	str	r2, [sp, #4]
 8009562:	4a26      	ldr	r2, [pc, #152]	@ (80095fc <HAL_GPIO_Init+0x1c8>)
 8009564:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8009566:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800956a:	6454      	str	r4, [r2, #68]	@ 0x44
 800956c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800956e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8009572:	9201      	str	r2, [sp, #4]
 8009574:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8009576:	089c      	lsrs	r4, r3, #2
 8009578:	1ca5      	adds	r5, r4, #2
 800957a:	4a1e      	ldr	r2, [pc, #120]	@ (80095f4 <HAL_GPIO_Init+0x1c0>)
 800957c:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009580:	f003 0503 	and.w	r5, r3, #3
 8009584:	00ad      	lsls	r5, r5, #2
 8009586:	220f      	movs	r2, #15
 8009588:	40aa      	lsls	r2, r5
 800958a:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800958e:	4a1c      	ldr	r2, [pc, #112]	@ (8009600 <HAL_GPIO_Init+0x1cc>)
 8009590:	4290      	cmp	r0, r2
 8009592:	f43f af58 	beq.w	8009446 <HAL_GPIO_Init+0x12>
 8009596:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800959a:	4290      	cmp	r0, r2
 800959c:	d01a      	beq.n	80095d4 <HAL_GPIO_Init+0x1a0>
 800959e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095a2:	4290      	cmp	r0, r2
 80095a4:	d018      	beq.n	80095d8 <HAL_GPIO_Init+0x1a4>
 80095a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095aa:	4290      	cmp	r0, r2
 80095ac:	d016      	beq.n	80095dc <HAL_GPIO_Init+0x1a8>
 80095ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095b2:	4290      	cmp	r0, r2
 80095b4:	d014      	beq.n	80095e0 <HAL_GPIO_Init+0x1ac>
 80095b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095ba:	4290      	cmp	r0, r2
 80095bc:	d012      	beq.n	80095e4 <HAL_GPIO_Init+0x1b0>
 80095be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095c2:	4290      	cmp	r0, r2
 80095c4:	d010      	beq.n	80095e8 <HAL_GPIO_Init+0x1b4>
 80095c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095ca:	4290      	cmp	r0, r2
 80095cc:	f43f af39 	beq.w	8009442 <HAL_GPIO_Init+0xe>
 80095d0:	2208      	movs	r2, #8
 80095d2:	e739      	b.n	8009448 <HAL_GPIO_Init+0x14>
 80095d4:	2201      	movs	r2, #1
 80095d6:	e737      	b.n	8009448 <HAL_GPIO_Init+0x14>
 80095d8:	2202      	movs	r2, #2
 80095da:	e735      	b.n	8009448 <HAL_GPIO_Init+0x14>
 80095dc:	2203      	movs	r2, #3
 80095de:	e733      	b.n	8009448 <HAL_GPIO_Init+0x14>
 80095e0:	2204      	movs	r2, #4
 80095e2:	e731      	b.n	8009448 <HAL_GPIO_Init+0x14>
 80095e4:	2205      	movs	r2, #5
 80095e6:	e72f      	b.n	8009448 <HAL_GPIO_Init+0x14>
 80095e8:	2206      	movs	r2, #6
 80095ea:	e72d      	b.n	8009448 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80095ec:	b003      	add	sp, #12
 80095ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	40013800 	.word	0x40013800
 80095f8:	40013c00 	.word	0x40013c00
 80095fc:	40023800 	.word	0x40023800
 8009600:	40020000 	.word	0x40020000

08009604 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009604:	2800      	cmp	r0, #0
 8009606:	f000 81da 	beq.w	80099be <HAL_RCC_OscConfig+0x3ba>
{
 800960a:	b570      	push	{r4, r5, r6, lr}
 800960c:	b082      	sub	sp, #8
 800960e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009610:	6803      	ldr	r3, [r0, #0]
 8009612:	f013 0f01 	tst.w	r3, #1
 8009616:	d03b      	beq.n	8009690 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009618:	4b9f      	ldr	r3, [pc, #636]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	f003 030c 	and.w	r3, r3, #12
 8009620:	2b04      	cmp	r3, #4
 8009622:	d02c      	beq.n	800967e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009624:	4b9c      	ldr	r3, [pc, #624]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800962c:	2b08      	cmp	r3, #8
 800962e:	d021      	beq.n	8009674 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009630:	6863      	ldr	r3, [r4, #4]
 8009632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009636:	d04f      	beq.n	80096d8 <HAL_RCC_OscConfig+0xd4>
 8009638:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800963c:	d052      	beq.n	80096e4 <HAL_RCC_OscConfig+0xe0>
 800963e:	4b96      	ldr	r3, [pc, #600]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009646:	601a      	str	r2, [r3, #0]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800964e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009650:	6863      	ldr	r3, [r4, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d050      	beq.n	80096f8 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009656:	f7ff fc71 	bl	8008f3c <HAL_GetTick>
 800965a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800965c:	4b8e      	ldr	r3, [pc, #568]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009664:	d114      	bne.n	8009690 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009666:	f7ff fc69 	bl	8008f3c <HAL_GetTick>
 800966a:	1b40      	subs	r0, r0, r5
 800966c:	2864      	cmp	r0, #100	@ 0x64
 800966e:	d9f5      	bls.n	800965c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8009670:	2003      	movs	r0, #3
 8009672:	e1ab      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009674:	4b88      	ldr	r3, [pc, #544]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800967c:	d0d8      	beq.n	8009630 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800967e:	4b86      	ldr	r3, [pc, #536]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009686:	d003      	beq.n	8009690 <HAL_RCC_OscConfig+0x8c>
 8009688:	6863      	ldr	r3, [r4, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	f000 8199 	beq.w	80099c2 <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	f013 0f02 	tst.w	r3, #2
 8009696:	d054      	beq.n	8009742 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009698:	4b7f      	ldr	r3, [pc, #508]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	f013 0f0c 	tst.w	r3, #12
 80096a0:	d03e      	beq.n	8009720 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80096a2:	4b7d      	ldr	r3, [pc, #500]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80096aa:	2b08      	cmp	r3, #8
 80096ac:	d033      	beq.n	8009716 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80096ae:	68e3      	ldr	r3, [r4, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d068      	beq.n	8009786 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80096b4:	4b79      	ldr	r3, [pc, #484]	@ (800989c <HAL_RCC_OscConfig+0x298>)
 80096b6:	2201      	movs	r2, #1
 80096b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096ba:	f7ff fc3f 	bl	8008f3c <HAL_GetTick>
 80096be:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096c0:	4b75      	ldr	r3, [pc, #468]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f013 0f02 	tst.w	r3, #2
 80096c8:	d154      	bne.n	8009774 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096ca:	f7ff fc37 	bl	8008f3c <HAL_GetTick>
 80096ce:	1b40      	subs	r0, r0, r5
 80096d0:	2802      	cmp	r0, #2
 80096d2:	d9f5      	bls.n	80096c0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80096d4:	2003      	movs	r0, #3
 80096d6:	e179      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096d8:	4a6f      	ldr	r2, [pc, #444]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 80096da:	6813      	ldr	r3, [r2, #0]
 80096dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096e0:	6013      	str	r3, [r2, #0]
 80096e2:	e7b5      	b.n	8009650 <HAL_RCC_OscConfig+0x4c>
 80096e4:	4b6c      	ldr	r3, [pc, #432]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80096f4:	601a      	str	r2, [r3, #0]
 80096f6:	e7ab      	b.n	8009650 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80096f8:	f7ff fc20 	bl	8008f3c <HAL_GetTick>
 80096fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096fe:	4b66      	ldr	r3, [pc, #408]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009706:	d0c3      	beq.n	8009690 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009708:	f7ff fc18 	bl	8008f3c <HAL_GetTick>
 800970c:	1b40      	subs	r0, r0, r5
 800970e:	2864      	cmp	r0, #100	@ 0x64
 8009710:	d9f5      	bls.n	80096fe <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8009712:	2003      	movs	r0, #3
 8009714:	e15a      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009716:	4b60      	ldr	r3, [pc, #384]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800971e:	d1c6      	bne.n	80096ae <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009720:	4b5d      	ldr	r3, [pc, #372]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f013 0f02 	tst.w	r3, #2
 8009728:	d003      	beq.n	8009732 <HAL_RCC_OscConfig+0x12e>
 800972a:	68e3      	ldr	r3, [r4, #12]
 800972c:	2b01      	cmp	r3, #1
 800972e:	f040 814a 	bne.w	80099c6 <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009732:	4a59      	ldr	r2, [pc, #356]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009734:	6813      	ldr	r3, [r2, #0]
 8009736:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800973a:	6921      	ldr	r1, [r4, #16]
 800973c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009740:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	f013 0f08 	tst.w	r3, #8
 8009748:	d042      	beq.n	80097d0 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800974a:	6963      	ldr	r3, [r4, #20]
 800974c:	b36b      	cbz	r3, 80097aa <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800974e:	4b53      	ldr	r3, [pc, #332]	@ (800989c <HAL_RCC_OscConfig+0x298>)
 8009750:	2201      	movs	r2, #1
 8009752:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009756:	f7ff fbf1 	bl	8008f3c <HAL_GetTick>
 800975a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800975c:	4b4e      	ldr	r3, [pc, #312]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 800975e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009760:	f013 0f02 	tst.w	r3, #2
 8009764:	d134      	bne.n	80097d0 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009766:	f7ff fbe9 	bl	8008f3c <HAL_GetTick>
 800976a:	1b40      	subs	r0, r0, r5
 800976c:	2802      	cmp	r0, #2
 800976e:	d9f5      	bls.n	800975c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8009770:	2003      	movs	r0, #3
 8009772:	e12b      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009774:	4a48      	ldr	r2, [pc, #288]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009776:	6813      	ldr	r3, [r2, #0]
 8009778:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800977c:	6921      	ldr	r1, [r4, #16]
 800977e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009782:	6013      	str	r3, [r2, #0]
 8009784:	e7dd      	b.n	8009742 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8009786:	4b45      	ldr	r3, [pc, #276]	@ (800989c <HAL_RCC_OscConfig+0x298>)
 8009788:	2200      	movs	r2, #0
 800978a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800978c:	f7ff fbd6 	bl	8008f3c <HAL_GetTick>
 8009790:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009792:	4b41      	ldr	r3, [pc, #260]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f013 0f02 	tst.w	r3, #2
 800979a:	d0d2      	beq.n	8009742 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800979c:	f7ff fbce 	bl	8008f3c <HAL_GetTick>
 80097a0:	1b40      	subs	r0, r0, r5
 80097a2:	2802      	cmp	r0, #2
 80097a4:	d9f5      	bls.n	8009792 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80097a6:	2003      	movs	r0, #3
 80097a8:	e110      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80097aa:	4b3c      	ldr	r3, [pc, #240]	@ (800989c <HAL_RCC_OscConfig+0x298>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80097b2:	f7ff fbc3 	bl	8008f3c <HAL_GetTick>
 80097b6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80097b8:	4b37      	ldr	r3, [pc, #220]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 80097ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097bc:	f013 0f02 	tst.w	r3, #2
 80097c0:	d006      	beq.n	80097d0 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097c2:	f7ff fbbb 	bl	8008f3c <HAL_GetTick>
 80097c6:	1b40      	subs	r0, r0, r5
 80097c8:	2802      	cmp	r0, #2
 80097ca:	d9f5      	bls.n	80097b8 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80097cc:	2003      	movs	r0, #3
 80097ce:	e0fd      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	f013 0f04 	tst.w	r3, #4
 80097d6:	d077      	beq.n	80098c8 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097d8:	4b2f      	ldr	r3, [pc, #188]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 80097da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097dc:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80097e0:	d133      	bne.n	800984a <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097e2:	2300      	movs	r3, #0
 80097e4:	9301      	str	r3, [sp, #4]
 80097e6:	4b2c      	ldr	r3, [pc, #176]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 80097e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097ea:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80097ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80097f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80097fa:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097fc:	4b28      	ldr	r3, [pc, #160]	@ (80098a0 <HAL_RCC_OscConfig+0x29c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8009804:	d023      	beq.n	800984e <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009806:	68a3      	ldr	r3, [r4, #8]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d034      	beq.n	8009876 <HAL_RCC_OscConfig+0x272>
 800980c:	2b05      	cmp	r3, #5
 800980e:	d038      	beq.n	8009882 <HAL_RCC_OscConfig+0x27e>
 8009810:	4b21      	ldr	r3, [pc, #132]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009812:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009814:	f022 0201 	bic.w	r2, r2, #1
 8009818:	671a      	str	r2, [r3, #112]	@ 0x70
 800981a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800981c:	f022 0204 	bic.w	r2, r2, #4
 8009820:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009822:	68a3      	ldr	r3, [r4, #8]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d03d      	beq.n	80098a4 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009828:	f7ff fb88 	bl	8008f3c <HAL_GetTick>
 800982c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800982e:	4b1a      	ldr	r3, [pc, #104]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009832:	f013 0f02 	tst.w	r3, #2
 8009836:	d146      	bne.n	80098c6 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009838:	f7ff fb80 	bl	8008f3c <HAL_GetTick>
 800983c:	1b80      	subs	r0, r0, r6
 800983e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009842:	4298      	cmp	r0, r3
 8009844:	d9f3      	bls.n	800982e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8009846:	2003      	movs	r0, #3
 8009848:	e0c0      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
    FlagStatus       pwrclkchanged = RESET;
 800984a:	2500      	movs	r5, #0
 800984c:	e7d6      	b.n	80097fc <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800984e:	4a14      	ldr	r2, [pc, #80]	@ (80098a0 <HAL_RCC_OscConfig+0x29c>)
 8009850:	6813      	ldr	r3, [r2, #0]
 8009852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009856:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8009858:	f7ff fb70 	bl	8008f3c <HAL_GetTick>
 800985c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800985e:	4b10      	ldr	r3, [pc, #64]	@ (80098a0 <HAL_RCC_OscConfig+0x29c>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8009866:	d1ce      	bne.n	8009806 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009868:	f7ff fb68 	bl	8008f3c <HAL_GetTick>
 800986c:	1b80      	subs	r0, r0, r6
 800986e:	2802      	cmp	r0, #2
 8009870:	d9f5      	bls.n	800985e <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8009872:	2003      	movs	r0, #3
 8009874:	e0aa      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009876:	4a08      	ldr	r2, [pc, #32]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009878:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800987a:	f043 0301 	orr.w	r3, r3, #1
 800987e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009880:	e7cf      	b.n	8009822 <HAL_RCC_OscConfig+0x21e>
 8009882:	4b05      	ldr	r3, [pc, #20]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009884:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009886:	f042 0204 	orr.w	r2, r2, #4
 800988a:	671a      	str	r2, [r3, #112]	@ 0x70
 800988c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800988e:	f042 0201 	orr.w	r2, r2, #1
 8009892:	671a      	str	r2, [r3, #112]	@ 0x70
 8009894:	e7c5      	b.n	8009822 <HAL_RCC_OscConfig+0x21e>
 8009896:	bf00      	nop
 8009898:	40023800 	.word	0x40023800
 800989c:	42470000 	.word	0x42470000
 80098a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80098a4:	f7ff fb4a 	bl	8008f3c <HAL_GetTick>
 80098a8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098aa:	4b4f      	ldr	r3, [pc, #316]	@ (80099e8 <HAL_RCC_OscConfig+0x3e4>)
 80098ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098ae:	f013 0f02 	tst.w	r3, #2
 80098b2:	d008      	beq.n	80098c6 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098b4:	f7ff fb42 	bl	8008f3c <HAL_GetTick>
 80098b8:	1b80      	subs	r0, r0, r6
 80098ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80098be:	4298      	cmp	r0, r3
 80098c0:	d9f3      	bls.n	80098aa <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80098c2:	2003      	movs	r0, #3
 80098c4:	e082      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80098c6:	b9e5      	cbnz	r5, 8009902 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80098c8:	69a3      	ldr	r3, [r4, #24]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d07d      	beq.n	80099ca <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80098ce:	4a46      	ldr	r2, [pc, #280]	@ (80099e8 <HAL_RCC_OscConfig+0x3e4>)
 80098d0:	6892      	ldr	r2, [r2, #8]
 80098d2:	f002 020c 	and.w	r2, r2, #12
 80098d6:	2a08      	cmp	r2, #8
 80098d8:	d051      	beq.n	800997e <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d017      	beq.n	800990e <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098de:	4b43      	ldr	r3, [pc, #268]	@ (80099ec <HAL_RCC_OscConfig+0x3e8>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098e4:	f7ff fb2a 	bl	8008f3c <HAL_GetTick>
 80098e8:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098ea:	4b3f      	ldr	r3, [pc, #252]	@ (80099e8 <HAL_RCC_OscConfig+0x3e4>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80098f2:	d042      	beq.n	800997a <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098f4:	f7ff fb22 	bl	8008f3c <HAL_GetTick>
 80098f8:	1b00      	subs	r0, r0, r4
 80098fa:	2802      	cmp	r0, #2
 80098fc:	d9f5      	bls.n	80098ea <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80098fe:	2003      	movs	r0, #3
 8009900:	e064      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009902:	4a39      	ldr	r2, [pc, #228]	@ (80099e8 <HAL_RCC_OscConfig+0x3e4>)
 8009904:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8009906:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800990a:	6413      	str	r3, [r2, #64]	@ 0x40
 800990c:	e7dc      	b.n	80098c8 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800990e:	4b37      	ldr	r3, [pc, #220]	@ (80099ec <HAL_RCC_OscConfig+0x3e8>)
 8009910:	2200      	movs	r2, #0
 8009912:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8009914:	f7ff fb12 	bl	8008f3c <HAL_GetTick>
 8009918:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800991a:	4b33      	ldr	r3, [pc, #204]	@ (80099e8 <HAL_RCC_OscConfig+0x3e4>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8009922:	d006      	beq.n	8009932 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009924:	f7ff fb0a 	bl	8008f3c <HAL_GetTick>
 8009928:	1b40      	subs	r0, r0, r5
 800992a:	2802      	cmp	r0, #2
 800992c:	d9f5      	bls.n	800991a <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 800992e:	2003      	movs	r0, #3
 8009930:	e04c      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009932:	69e3      	ldr	r3, [r4, #28]
 8009934:	6a22      	ldr	r2, [r4, #32]
 8009936:	4313      	orrs	r3, r2
 8009938:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800993a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800993e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009940:	0852      	lsrs	r2, r2, #1
 8009942:	3a01      	subs	r2, #1
 8009944:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009948:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800994a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800994e:	4a26      	ldr	r2, [pc, #152]	@ (80099e8 <HAL_RCC_OscConfig+0x3e4>)
 8009950:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8009952:	4b26      	ldr	r3, [pc, #152]	@ (80099ec <HAL_RCC_OscConfig+0x3e8>)
 8009954:	2201      	movs	r2, #1
 8009956:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8009958:	f7ff faf0 	bl	8008f3c <HAL_GetTick>
 800995c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800995e:	4b22      	ldr	r3, [pc, #136]	@ (80099e8 <HAL_RCC_OscConfig+0x3e4>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8009966:	d106      	bne.n	8009976 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009968:	f7ff fae8 	bl	8008f3c <HAL_GetTick>
 800996c:	1b00      	subs	r0, r0, r4
 800996e:	2802      	cmp	r0, #2
 8009970:	d9f5      	bls.n	800995e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8009972:	2003      	movs	r0, #3
 8009974:	e02a      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8009976:	2000      	movs	r0, #0
 8009978:	e028      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
 800997a:	2000      	movs	r0, #0
 800997c:	e026      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800997e:	2b01      	cmp	r3, #1
 8009980:	d026      	beq.n	80099d0 <HAL_RCC_OscConfig+0x3cc>
        pll_config = RCC->PLLCFGR;
 8009982:	4b19      	ldr	r3, [pc, #100]	@ (80099e8 <HAL_RCC_OscConfig+0x3e4>)
 8009984:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009986:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 800998a:	69e2      	ldr	r2, [r4, #28]
 800998c:	4291      	cmp	r1, r2
 800998e:	d121      	bne.n	80099d4 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009990:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009994:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009996:	428a      	cmp	r2, r1
 8009998:	d11e      	bne.n	80099d8 <HAL_RCC_OscConfig+0x3d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800999a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800999c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80099a0:	401a      	ands	r2, r3
 80099a2:	428a      	cmp	r2, r1
 80099a4:	d11a      	bne.n	80099dc <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80099a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80099aa:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80099ac:	428a      	cmp	r2, r1
 80099ae:	d117      	bne.n	80099e0 <HAL_RCC_OscConfig+0x3dc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80099b0:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80099b4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d114      	bne.n	80099e4 <HAL_RCC_OscConfig+0x3e0>
  return HAL_OK;
 80099ba:	2000      	movs	r0, #0
 80099bc:	e006      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 80099be:	2001      	movs	r0, #1
}
 80099c0:	4770      	bx	lr
        return HAL_ERROR;
 80099c2:	2001      	movs	r0, #1
 80099c4:	e002      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
        return HAL_ERROR;
 80099c6:	2001      	movs	r0, #1
 80099c8:	e000      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 80099ca:	2000      	movs	r0, #0
}
 80099cc:	b002      	add	sp, #8
 80099ce:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80099d0:	2001      	movs	r0, #1
 80099d2:	e7fb      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
          return HAL_ERROR;
 80099d4:	2001      	movs	r0, #1
 80099d6:	e7f9      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
 80099d8:	2001      	movs	r0, #1
 80099da:	e7f7      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
 80099dc:	2001      	movs	r0, #1
 80099de:	e7f5      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
 80099e0:	2001      	movs	r0, #1
 80099e2:	e7f3      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
 80099e4:	2001      	movs	r0, #1
 80099e6:	e7f1      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
 80099e8:	40023800 	.word	0x40023800
 80099ec:	42470000 	.word	0x42470000

080099f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099f0:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099f2:	4b33      	ldr	r3, [pc, #204]	@ (8009ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	f003 030c 	and.w	r3, r3, #12
 80099fa:	2b04      	cmp	r3, #4
 80099fc:	d05b      	beq.n	8009ab6 <HAL_RCC_GetSysClockFreq+0xc6>
 80099fe:	2b08      	cmp	r3, #8
 8009a00:	d15b      	bne.n	8009aba <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009a02:	4b2f      	ldr	r3, [pc, #188]	@ (8009ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009a04:	685a      	ldr	r2, [r3, #4]
 8009a06:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8009a10:	d02c      	beq.n	8009a6c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a12:	4b2b      	ldr	r3, [pc, #172]	@ (8009ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009a14:	6858      	ldr	r0, [r3, #4]
 8009a16:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8009a1a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8009a1e:	ebbc 0c00 	subs.w	ip, ip, r0
 8009a22:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8009a26:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8009a2a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8009a2e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8009a32:	ebb1 010c 	subs.w	r1, r1, ip
 8009a36:	eb63 030e 	sbc.w	r3, r3, lr
 8009a3a:	00db      	lsls	r3, r3, #3
 8009a3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a40:	00c9      	lsls	r1, r1, #3
 8009a42:	eb11 0c00 	adds.w	ip, r1, r0
 8009a46:	f143 0300 	adc.w	r3, r3, #0
 8009a4a:	0259      	lsls	r1, r3, #9
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8009a52:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8009a56:	f7ff f85f 	bl	8008b18 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009a5a:	4b19      	ldr	r3, [pc, #100]	@ (8009ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8009a62:	3301      	adds	r3, #1
 8009a64:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8009a66:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8009a6a:	e027      	b.n	8009abc <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a6c:	4b14      	ldr	r3, [pc, #80]	@ (8009ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009a6e:	6858      	ldr	r0, [r3, #4]
 8009a70:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8009a74:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8009a78:	ebbc 0c00 	subs.w	ip, ip, r0
 8009a7c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8009a80:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8009a84:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8009a88:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8009a8c:	ebb1 010c 	subs.w	r1, r1, ip
 8009a90:	eb63 030e 	sbc.w	r3, r3, lr
 8009a94:	00db      	lsls	r3, r3, #3
 8009a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a9a:	00c9      	lsls	r1, r1, #3
 8009a9c:	eb11 0c00 	adds.w	ip, r1, r0
 8009aa0:	f143 0300 	adc.w	r3, r3, #0
 8009aa4:	0299      	lsls	r1, r3, #10
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8009aac:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8009ab0:	f7ff f832 	bl	8008b18 <__aeabi_uldivmod>
 8009ab4:	e7d1      	b.n	8009a5a <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8009ab6:	4803      	ldr	r0, [pc, #12]	@ (8009ac4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009ab8:	e000      	b.n	8009abc <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009aba:	4803      	ldr	r0, [pc, #12]	@ (8009ac8 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8009abc:	bd08      	pop	{r3, pc}
 8009abe:	bf00      	nop
 8009ac0:	40023800 	.word	0x40023800
 8009ac4:	007a1200 	.word	0x007a1200
 8009ac8:	00f42400 	.word	0x00f42400

08009acc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009acc:	2800      	cmp	r0, #0
 8009ace:	f000 809b 	beq.w	8009c08 <HAL_RCC_ClockConfig+0x13c>
{
 8009ad2:	b570      	push	{r4, r5, r6, lr}
 8009ad4:	460d      	mov	r5, r1
 8009ad6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009ad8:	4b4f      	ldr	r3, [pc, #316]	@ (8009c18 <HAL_RCC_ClockConfig+0x14c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 030f 	and.w	r3, r3, #15
 8009ae0:	428b      	cmp	r3, r1
 8009ae2:	d208      	bcs.n	8009af6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ae4:	b2cb      	uxtb	r3, r1
 8009ae6:	4a4c      	ldr	r2, [pc, #304]	@ (8009c18 <HAL_RCC_ClockConfig+0x14c>)
 8009ae8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009aea:	6813      	ldr	r3, [r2, #0]
 8009aec:	f003 030f 	and.w	r3, r3, #15
 8009af0:	428b      	cmp	r3, r1
 8009af2:	f040 808b 	bne.w	8009c0c <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	f013 0f02 	tst.w	r3, #2
 8009afc:	d017      	beq.n	8009b2e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009afe:	f013 0f04 	tst.w	r3, #4
 8009b02:	d004      	beq.n	8009b0e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b04:	4a45      	ldr	r2, [pc, #276]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009b06:	6893      	ldr	r3, [r2, #8]
 8009b08:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009b0c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	f013 0f08 	tst.w	r3, #8
 8009b14:	d004      	beq.n	8009b20 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b16:	4a41      	ldr	r2, [pc, #260]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009b18:	6893      	ldr	r3, [r2, #8]
 8009b1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009b1e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b20:	4a3e      	ldr	r2, [pc, #248]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009b22:	6893      	ldr	r3, [r2, #8]
 8009b24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b28:	68a1      	ldr	r1, [r4, #8]
 8009b2a:	430b      	orrs	r3, r1
 8009b2c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	f013 0f01 	tst.w	r3, #1
 8009b34:	d032      	beq.n	8009b9c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b36:	6863      	ldr	r3, [r4, #4]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d021      	beq.n	8009b80 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b3c:	1e9a      	subs	r2, r3, #2
 8009b3e:	2a01      	cmp	r2, #1
 8009b40:	d925      	bls.n	8009b8e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b42:	4a36      	ldr	r2, [pc, #216]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009b44:	6812      	ldr	r2, [r2, #0]
 8009b46:	f012 0f02 	tst.w	r2, #2
 8009b4a:	d061      	beq.n	8009c10 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009b4c:	4933      	ldr	r1, [pc, #204]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009b4e:	688a      	ldr	r2, [r1, #8]
 8009b50:	f022 0203 	bic.w	r2, r2, #3
 8009b54:	4313      	orrs	r3, r2
 8009b56:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8009b58:	f7ff f9f0 	bl	8008f3c <HAL_GetTick>
 8009b5c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	f003 030c 	and.w	r3, r3, #12
 8009b66:	6862      	ldr	r2, [r4, #4]
 8009b68:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009b6c:	d016      	beq.n	8009b9c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b6e:	f7ff f9e5 	bl	8008f3c <HAL_GetTick>
 8009b72:	1b80      	subs	r0, r0, r6
 8009b74:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009b78:	4298      	cmp	r0, r3
 8009b7a:	d9f0      	bls.n	8009b5e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8009b7c:	2003      	movs	r0, #3
 8009b7e:	e042      	b.n	8009c06 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b80:	4a26      	ldr	r2, [pc, #152]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009b82:	6812      	ldr	r2, [r2, #0]
 8009b84:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8009b88:	d1e0      	bne.n	8009b4c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8009b8a:	2001      	movs	r0, #1
 8009b8c:	e03b      	b.n	8009c06 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b8e:	4a23      	ldr	r2, [pc, #140]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009b90:	6812      	ldr	r2, [r2, #0]
 8009b92:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8009b96:	d1d9      	bne.n	8009b4c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8009b98:	2001      	movs	r0, #1
 8009b9a:	e034      	b.n	8009c06 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8009c18 <HAL_RCC_ClockConfig+0x14c>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f003 030f 	and.w	r3, r3, #15
 8009ba4:	42ab      	cmp	r3, r5
 8009ba6:	d907      	bls.n	8009bb8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ba8:	b2ea      	uxtb	r2, r5
 8009baa:	4b1b      	ldr	r3, [pc, #108]	@ (8009c18 <HAL_RCC_ClockConfig+0x14c>)
 8009bac:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 030f 	and.w	r3, r3, #15
 8009bb4:	42ab      	cmp	r3, r5
 8009bb6:	d12d      	bne.n	8009c14 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	f013 0f04 	tst.w	r3, #4
 8009bbe:	d006      	beq.n	8009bce <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009bc0:	4a16      	ldr	r2, [pc, #88]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009bc2:	6893      	ldr	r3, [r2, #8]
 8009bc4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8009bc8:	68e1      	ldr	r1, [r4, #12]
 8009bca:	430b      	orrs	r3, r1
 8009bcc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	f013 0f08 	tst.w	r3, #8
 8009bd4:	d007      	beq.n	8009be6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009bd6:	4a11      	ldr	r2, [pc, #68]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009bd8:	6893      	ldr	r3, [r2, #8]
 8009bda:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8009bde:	6921      	ldr	r1, [r4, #16]
 8009be0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009be4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009be6:	f7ff ff03 	bl	80099f0 <HAL_RCC_GetSysClockFreq>
 8009bea:	4b0c      	ldr	r3, [pc, #48]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009bf2:	4a0b      	ldr	r2, [pc, #44]	@ (8009c20 <HAL_RCC_ClockConfig+0x154>)
 8009bf4:	5cd3      	ldrb	r3, [r2, r3]
 8009bf6:	40d8      	lsrs	r0, r3
 8009bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8009c24 <HAL_RCC_ClockConfig+0x158>)
 8009bfa:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8009bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8009c28 <HAL_RCC_ClockConfig+0x15c>)
 8009bfe:	6818      	ldr	r0, [r3, #0]
 8009c00:	f7ff f950 	bl	8008ea4 <HAL_InitTick>
  return HAL_OK;
 8009c04:	2000      	movs	r0, #0
}
 8009c06:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8009c08:	2001      	movs	r0, #1
}
 8009c0a:	4770      	bx	lr
      return HAL_ERROR;
 8009c0c:	2001      	movs	r0, #1
 8009c0e:	e7fa      	b.n	8009c06 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8009c10:	2001      	movs	r0, #1
 8009c12:	e7f8      	b.n	8009c06 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8009c14:	2001      	movs	r0, #1
 8009c16:	e7f6      	b.n	8009c06 <HAL_RCC_ClockConfig+0x13a>
 8009c18:	40023c00 	.word	0x40023c00
 8009c1c:	40023800 	.word	0x40023800
 8009c20:	08029768 	.word	0x08029768
 8009c24:	200001a4 	.word	0x200001a4
 8009c28:	20000004 	.word	0x20000004

08009c2c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8009c2c:	4b01      	ldr	r3, [pc, #4]	@ (8009c34 <HAL_RCC_GetHCLKFreq+0x8>)
 8009c2e:	6818      	ldr	r0, [r3, #0]
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	200001a4 	.word	0x200001a4

08009c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c38:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009c3a:	f7ff fff7 	bl	8009c2c <HAL_RCC_GetHCLKFreq>
 8009c3e:	4b04      	ldr	r3, [pc, #16]	@ (8009c50 <HAL_RCC_GetPCLK1Freq+0x18>)
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8009c46:	4a03      	ldr	r2, [pc, #12]	@ (8009c54 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009c48:	5cd3      	ldrb	r3, [r2, r3]
}
 8009c4a:	40d8      	lsrs	r0, r3
 8009c4c:	bd08      	pop	{r3, pc}
 8009c4e:	bf00      	nop
 8009c50:	40023800 	.word	0x40023800
 8009c54:	08029760 	.word	0x08029760

08009c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c58:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009c5a:	f7ff ffe7 	bl	8009c2c <HAL_RCC_GetHCLKFreq>
 8009c5e:	4b04      	ldr	r3, [pc, #16]	@ (8009c70 <HAL_RCC_GetPCLK2Freq+0x18>)
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8009c66:	4a03      	ldr	r2, [pc, #12]	@ (8009c74 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009c68:	5cd3      	ldrb	r3, [r2, r3]
}
 8009c6a:	40d8      	lsrs	r0, r3
 8009c6c:	bd08      	pop	{r3, pc}
 8009c6e:	bf00      	nop
 8009c70:	40023800 	.word	0x40023800
 8009c74:	08029760 	.word	0x08029760

08009c78 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009c78:	230f      	movs	r3, #15
 8009c7a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8009cac <HAL_RCC_GetClockConfig+0x34>)
 8009c7e:	689a      	ldr	r2, [r3, #8]
 8009c80:	f002 0203 	and.w	r2, r2, #3
 8009c84:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009c86:	689a      	ldr	r2, [r3, #8]
 8009c88:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8009c8c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009c8e:	689a      	ldr	r2, [r3, #8]
 8009c90:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8009c94:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	08db      	lsrs	r3, r3, #3
 8009c9a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8009c9e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009ca0:	4b03      	ldr	r3, [pc, #12]	@ (8009cb0 <HAL_RCC_GetClockConfig+0x38>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 030f 	and.w	r3, r3, #15
 8009ca8:	600b      	str	r3, [r1, #0]
}
 8009caa:	4770      	bx	lr
 8009cac:	40023800 	.word	0x40023800
 8009cb0:	40023c00 	.word	0x40023c00

08009cb4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8009cb4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009cb6:	f7ff f941 	bl	8008f3c <HAL_GetTick>
 8009cba:	4604      	mov	r4, r0

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009cbc:	4a46      	ldr	r2, [pc, #280]	@ (8009dd8 <HAL_RCC_DeInit+0x124>)
 8009cbe:	6813      	ldr	r3, [r2, #0]
 8009cc0:	f043 0301 	orr.w	r3, r3, #1
 8009cc4:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8009cc6:	4b44      	ldr	r3, [pc, #272]	@ (8009dd8 <HAL_RCC_DeInit+0x124>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f013 0f02 	tst.w	r3, #2
 8009cce:	d106      	bne.n	8009cde <HAL_RCC_DeInit+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cd0:	f7ff f934 	bl	8008f3c <HAL_GetTick>
 8009cd4:	1b00      	subs	r0, r0, r4
 8009cd6:	2802      	cmp	r0, #2
 8009cd8:	d9f5      	bls.n	8009cc6 <HAL_RCC_DeInit+0x12>
    {
      return HAL_TIMEOUT;
 8009cda:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_OK;
  }
}
 8009cdc:	bd38      	pop	{r3, r4, r5, pc}
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8009cde:	4d3e      	ldr	r5, [pc, #248]	@ (8009dd8 <HAL_RCC_DeInit+0x124>)
 8009ce0:	682b      	ldr	r3, [r5, #0]
 8009ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ce6:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8009ce8:	f7ff f928 	bl	8008f3c <HAL_GetTick>
 8009cec:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60ab      	str	r3, [r5, #8]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8009cf2:	4b39      	ldr	r3, [pc, #228]	@ (8009dd8 <HAL_RCC_DeInit+0x124>)
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	f013 0f0c 	tst.w	r3, #12
 8009cfa:	d008      	beq.n	8009d0e <HAL_RCC_DeInit+0x5a>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cfc:	f7ff f91e 	bl	8008f3c <HAL_GetTick>
 8009d00:	1b00      	subs	r0, r0, r4
 8009d02:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009d06:	4298      	cmp	r0, r3
 8009d08:	d9f3      	bls.n	8009cf2 <HAL_RCC_DeInit+0x3e>
      return HAL_TIMEOUT;
 8009d0a:	2003      	movs	r0, #3
 8009d0c:	e7e6      	b.n	8009cdc <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8009d0e:	f7ff f915 	bl	8008f3c <HAL_GetTick>
 8009d12:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8009d14:	4a30      	ldr	r2, [pc, #192]	@ (8009dd8 <HAL_RCC_DeInit+0x124>)
 8009d16:	6813      	ldr	r3, [r2, #0]
 8009d18:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8009d1c:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8009d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8009dd8 <HAL_RCC_DeInit+0x124>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009d26:	d006      	beq.n	8009d36 <HAL_RCC_DeInit+0x82>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d28:	f7ff f908 	bl	8008f3c <HAL_GetTick>
 8009d2c:	1b00      	subs	r0, r0, r4
 8009d2e:	2864      	cmp	r0, #100	@ 0x64
 8009d30:	d9f5      	bls.n	8009d1e <HAL_RCC_DeInit+0x6a>
      return HAL_TIMEOUT;
 8009d32:	2003      	movs	r0, #3
 8009d34:	e7d2      	b.n	8009cdc <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8009d36:	f7ff f901 	bl	8008f3c <HAL_GetTick>
 8009d3a:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8009d3c:	4a26      	ldr	r2, [pc, #152]	@ (8009dd8 <HAL_RCC_DeInit+0x124>)
 8009d3e:	6813      	ldr	r3, [r2, #0]
 8009d40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009d44:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8009d46:	4b24      	ldr	r3, [pc, #144]	@ (8009dd8 <HAL_RCC_DeInit+0x124>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8009d4e:	d006      	beq.n	8009d5e <HAL_RCC_DeInit+0xaa>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d50:	f7ff f8f4 	bl	8008f3c <HAL_GetTick>
 8009d54:	1b00      	subs	r0, r0, r4
 8009d56:	2802      	cmp	r0, #2
 8009d58:	d9f5      	bls.n	8009d46 <HAL_RCC_DeInit+0x92>
      return HAL_TIMEOUT;
 8009d5a:	2003      	movs	r0, #3
 8009d5c:	e7be      	b.n	8009cdc <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8009d5e:	f7ff f8ed 	bl	8008f3c <HAL_GetTick>
 8009d62:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8009d64:	4a1c      	ldr	r2, [pc, #112]	@ (8009dd8 <HAL_RCC_DeInit+0x124>)
 8009d66:	6813      	ldr	r3, [r2, #0]
 8009d68:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d6c:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8009d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8009dd8 <HAL_RCC_DeInit+0x124>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8009d76:	d006      	beq.n	8009d86 <HAL_RCC_DeInit+0xd2>
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009d78:	f7ff f8e0 	bl	8008f3c <HAL_GetTick>
 8009d7c:	1b00      	subs	r0, r0, r4
 8009d7e:	2802      	cmp	r0, #2
 8009d80:	d9f5      	bls.n	8009d6e <HAL_RCC_DeInit+0xba>
      return HAL_TIMEOUT;
 8009d82:	2003      	movs	r0, #3
 8009d84:	e7aa      	b.n	8009cdc <HAL_RCC_DeInit+0x28>
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8009d86:	4b14      	ldr	r3, [pc, #80]	@ (8009dd8 <HAL_RCC_DeInit+0x124>)
 8009d88:	4a14      	ldr	r2, [pc, #80]	@ (8009ddc <HAL_RCC_DeInit+0x128>)
 8009d8a:	605a      	str	r2, [r3, #4]
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8009d8c:	4a14      	ldr	r2, [pc, #80]	@ (8009de0 <HAL_RCC_DeInit+0x12c>)
 8009d8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8009d92:	68da      	ldr	r2, [r3, #12]
 8009d94:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8009d98:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8009d9a:	68da      	ldr	r2, [r3, #12]
 8009d9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009da0:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8009da2:	68da      	ldr	r2, [r3, #12]
 8009da4:	f442 021f 	orr.w	r2, r2, #10420224	@ 0x9f0000
 8009da8:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8009daa:	68da      	ldr	r2, [r3, #12]
 8009dac:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8009db0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8009db2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009db4:	f022 0201 	bic.w	r2, r2, #1
 8009db8:	675a      	str	r2, [r3, #116]	@ 0x74
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8009dba:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009dbc:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8009dc0:	675a      	str	r2, [r3, #116]	@ 0x74
  SystemCoreClock = HSI_VALUE;
 8009dc2:	4b08      	ldr	r3, [pc, #32]	@ (8009de4 <HAL_RCC_DeInit+0x130>)
 8009dc4:	4a08      	ldr	r2, [pc, #32]	@ (8009de8 <HAL_RCC_DeInit+0x134>)
 8009dc6:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8009dc8:	4b08      	ldr	r3, [pc, #32]	@ (8009dec <HAL_RCC_DeInit+0x138>)
 8009dca:	6818      	ldr	r0, [r3, #0]
 8009dcc:	f7ff f86a 	bl	8008ea4 <HAL_InitTick>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d083      	beq.n	8009cdc <HAL_RCC_DeInit+0x28>
    return HAL_ERROR;
 8009dd4:	2001      	movs	r0, #1
 8009dd6:	e781      	b.n	8009cdc <HAL_RCC_DeInit+0x28>
 8009dd8:	40023800 	.word	0x40023800
 8009ddc:	04003010 	.word	0x04003010
 8009de0:	20003000 	.word	0x20003000
 8009de4:	200001a4 	.word	0x200001a4
 8009de8:	00f42400 	.word	0x00f42400
 8009dec:	20000004 	.word	0x20000004

08009df0 <crc16>:
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
0x40
} ;

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8009df0:	b500      	push	{lr}
	uint8_t crc_hi = 0xFF ; /* high byte of CRC initialized */
	uint8_t crc_lo = 0xFF ; /* low byte of CRC initialized */
 8009df2:	22ff      	movs	r2, #255	@ 0xff
	uint8_t crc_hi = 0xFF ; /* high byte of CRC initialized */
 8009df4:	4696      	mov	lr, r2
	unsigned int i ; /* will index into CRC lookup table */
	while ( buffer_length--) /* pass through message buffer */
 8009df6:	e00a      	b.n	8009e0e <crc16+0x1e>
		{
			i = crc_lo ^ *buffer++ ; /* calculate the CRC */
 8009df8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009dfc:	4053      	eors	r3, r2
			crc_lo = crc_hi ^ table_crc_hi[i] ;
 8009dfe:	4a08      	ldr	r2, [pc, #32]	@ (8009e20 <crc16+0x30>)
 8009e00:	5cd2      	ldrb	r2, [r2, r3]
 8009e02:	ea82 020e 	eor.w	r2, r2, lr
			crc_hi =table_crc_lo[i] ;
 8009e06:	4907      	ldr	r1, [pc, #28]	@ (8009e24 <crc16+0x34>)
 8009e08:	f811 e003 	ldrb.w	lr, [r1, r3]
	while ( buffer_length--) /* pass through message buffer */
 8009e0c:	4661      	mov	r1, ip
 8009e0e:	1e4b      	subs	r3, r1, #1
 8009e10:	fa1f fc83 	uxth.w	ip, r3
 8009e14:	2900      	cmp	r1, #0
 8009e16:	d1ef      	bne.n	8009df8 <crc16+0x8>
		}
	return (crc_hi << 8 | crc_lo) ;
}
 8009e18:	ea42 200e 	orr.w	r0, r2, lr, lsl #8
 8009e1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e20:	080294cc 	.word	0x080294cc
 8009e24:	080293cc 	.word	0x080293cc

08009e28 <sendData>:



void sendData (uint8_t *data, int size)
{
 8009e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	460c      	mov	r4, r1
  // we will calculate the CRC in this function itself
  uint16_t crc = crc16(data, size);
 8009e2e:	b28e      	uxth	r6, r1
 8009e30:	4631      	mov	r1, r6
 8009e32:	f7ff ffdd 	bl	8009df0 <crc16>
  data[size] = crc&0xFF;   // CRC LOW
 8009e36:	5528      	strb	r0, [r5, r4]
  data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8009e38:	1c63      	adds	r3, r4, #1
 8009e3a:	0a00      	lsrs	r0, r0, #8
 8009e3c:	54e8      	strb	r0, [r5, r3]

// HAL_UART_Transmit(&huart2, data, size+2, 1000);

  uint8_t *buff = (uint8_t *)malloc(size + 2);
 8009e3e:	3402      	adds	r4, #2
 8009e40:	4620      	mov	r0, r4
 8009e42:	f018 ffa9 	bl	8022d98 <malloc>
  if (buff == NULL) {
 8009e46:	b170      	cbz	r0, 8009e66 <sendData+0x3e>
 8009e48:	4607      	mov	r7, r0
	  // Handle memory allocation failure
	  return;
  }

  // Copy data to buffer
  memcpy(buff, data, size+2);
 8009e4a:	4622      	mov	r2, r4
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	f01b f9ca 	bl	80251e6 <memcpy>

  // Send the buffer
  hal.stream.write_n(buff, size + 2);
 8009e52:	4b05      	ldr	r3, [pc, #20]	@ (8009e68 <sendData+0x40>)
 8009e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009e58:	1cb1      	adds	r1, r6, #2
 8009e5a:	b289      	uxth	r1, r1
 8009e5c:	4638      	mov	r0, r7
 8009e5e:	4798      	blx	r3

  // Free the allocated buffer
  free(buff);
 8009e60:	4638      	mov	r0, r7
 8009e62:	f018 ffa1 	bl	8022da8 <free>
}
 8009e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e68:	200018dc 	.word	0x200018dc

08009e6c <modbusException>:

void modbusException (uint8_t exceptioncode)
{
 8009e6c:	b508      	push	{r3, lr}
	//| SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	//| 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	TxData[0] = RxData[0];       // slave ID
 8009e6e:	4a07      	ldr	r2, [pc, #28]	@ (8009e8c <modbusException+0x20>)
 8009e70:	7811      	ldrb	r1, [r2, #0]
 8009e72:	4b07      	ldr	r3, [pc, #28]	@ (8009e90 <modbusException+0x24>)
 8009e74:	7019      	strb	r1, [r3, #0]
	TxData[1] = RxData[1]|0x80;  // adding 1 to the MSB of the function code
 8009e76:	7852      	ldrb	r2, [r2, #1]
 8009e78:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009e7c:	705a      	strb	r2, [r3, #1]
	TxData[2] = exceptioncode;   // Load the Exception code
 8009e7e:	7098      	strb	r0, [r3, #2]
	sendData(TxData, 3);         // send Data... CRC will be calculated in the function
 8009e80:	2103      	movs	r1, #3
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7ff ffd0 	bl	8009e28 <sendData>
}
 8009e88:	bd08      	pop	{r3, pc}
 8009e8a:	bf00      	nop
 8009e8c:	200008a0 	.word	0x200008a0
 8009e90:	2000088c 	.word	0x2000088c

08009e94 <readHoldingRegs>:

uint8_t readHoldingRegs (void)
{
 8009e94:	b538      	push	{r3, r4, r5, lr}
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8009e96:	4a22      	ldr	r2, [pc, #136]	@ (8009f20 <readHoldingRegs+0x8c>)
 8009e98:	7891      	ldrb	r1, [r2, #2]
 8009e9a:	78d3      	ldrb	r3, [r2, #3]
 8009e9c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8009ea0:	7911      	ldrb	r1, [r2, #4]
 8009ea2:	f892 e005 	ldrb.w	lr, [r2, #5]
 8009ea6:	ea4e 2e01 	orr.w	lr, lr, r1, lsl #8
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 8009eaa:	f10e 32ff 	add.w	r2, lr, #4294967295
 8009eae:	b292      	uxth	r2, r2
 8009eb0:	2a7c      	cmp	r2, #124	@ 0x7c
 8009eb2:	d814      	bhi.n	8009ede <readHoldingRegs+0x4a>
 8009eb4:	fa0f f18e 	sxth.w	r1, lr
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
		return 0;
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8009eb8:	eb03 020e 	add.w	r2, r3, lr
 8009ebc:	b292      	uxth	r2, r2
 8009ebe:	3a01      	subs	r2, #1
 8009ec0:	b292      	uxth	r2, r2
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8009ec2:	2a31      	cmp	r2, #49	@ 0x31
 8009ec4:	d810      	bhi.n	8009ee8 <readHoldingRegs+0x54>
	// Prepare TxData buffer

	 //| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	 //| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	 TxData[0] = SLAVE_ID;  // slave ID
 8009ec6:	4a17      	ldr	r2, [pc, #92]	@ (8009f24 <readHoldingRegs+0x90>)
 8009ec8:	2001      	movs	r0, #1
 8009eca:	7010      	strb	r0, [r2, #0]
	 TxData[1] = RxData[1];  // function code
 8009ecc:	4814      	ldr	r0, [pc, #80]	@ (8009f20 <readHoldingRegs+0x8c>)
 8009ece:	7840      	ldrb	r0, [r0, #1]
 8009ed0:	7050      	strb	r0, [r2, #1]
	 TxData[2] = numRegs*2;  // Byte count
 8009ed2:	0049      	lsls	r1, r1, #1
 8009ed4:	7091      	strb	r1, [r2, #2]
	 int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer

	 for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8009ed6:	f04f 0c00 	mov.w	ip, #0
	 int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8009eda:	2103      	movs	r1, #3
	 for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8009edc:	e019      	b.n	8009f12 <readHoldingRegs+0x7e>
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8009ede:	2003      	movs	r0, #3
 8009ee0:	f7ff ffc4 	bl	8009e6c <modbusException>
		return 0;
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	e01a      	b.n	8009f1e <readHoldingRegs+0x8a>
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8009ee8:	2002      	movs	r0, #2
 8009eea:	f7ff ffbf 	bl	8009e6c <modbusException>
		return 0;
 8009eee:	2000      	movs	r0, #0
 8009ef0:	e015      	b.n	8009f1e <readHoldingRegs+0x8a>
	 {
	   TxData[indx++] = (Holding_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 8009ef2:	4d0d      	ldr	r5, [pc, #52]	@ (8009f28 <readHoldingRegs+0x94>)
 8009ef4:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
 8009ef8:	1c4a      	adds	r2, r1, #1
 8009efa:	4c0a      	ldr	r4, [pc, #40]	@ (8009f24 <readHoldingRegs+0x90>)
 8009efc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8009f00:	5460      	strb	r0, [r4, r1]
	   TxData[indx++] = (Holding_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8009f02:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
 8009f06:	54a0      	strb	r0, [r4, r2]
 8009f08:	3102      	adds	r1, #2
	   startAddr++;  // increment the register address
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	b29b      	uxth	r3, r3
	 for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8009f0e:	f10c 0c01 	add.w	ip, ip, #1
 8009f12:	45e6      	cmp	lr, ip
 8009f14:	dced      	bgt.n	8009ef2 <readHoldingRegs+0x5e>
	 }

	 sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8009f16:	4803      	ldr	r0, [pc, #12]	@ (8009f24 <readHoldingRegs+0x90>)
 8009f18:	f7ff ff86 	bl	8009e28 <sendData>
	 return 1;   // success
 8009f1c:	2001      	movs	r0, #1
}
 8009f1e:	bd38      	pop	{r3, r4, r5, pc}
 8009f20:	200008a0 	.word	0x200008a0
 8009f24:	2000088c 	.word	0x2000088c
 8009f28:	200006d8 	.word	0x200006d8

08009f2c <readCoils>:
uint8_t readCoils (void)
{
 8009f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Coil Address
 8009f30:	4b35      	ldr	r3, [pc, #212]	@ (800a008 <readCoils+0xdc>)
 8009f32:	789a      	ldrb	r2, [r3, #2]
 8009f34:	f893 e003 	ldrb.w	lr, [r3, #3]
 8009f38:	ea4e 2e02 	orr.w	lr, lr, r2, lsl #8

	uint16_t numCoils = ((RxData[4]<<8)|RxData[5]);   // number to coils master has requested
 8009f3c:	791a      	ldrb	r2, [r3, #4]
 8009f3e:	795c      	ldrb	r4, [r3, #5]
 8009f40:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	if ((numCoils<1)||(numCoils>2000))  // maximum no. of coils as per the PDF
 8009f44:	1e63      	subs	r3, r4, #1
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8009f4c:	d22c      	bcs.n	8009fa8 <readCoils+0x7c>
 8009f4e:	fa0f f78e 	sxth.w	r7, lr
 8009f52:	4675      	mov	r5, lr
 8009f54:	fa0f f884 	sxth.w	r8, r4
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
		return 0;
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 8009f58:	192b      	adds	r3, r5, r4
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	b29b      	uxth	r3, r3
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8009f60:	2bc7      	cmp	r3, #199	@ 0xc7
 8009f62:	d826      	bhi.n	8009fb2 <readCoils+0x86>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
		return 0;
	}
	//reset TxData buffer
		memset (TxData, '\0', 256);
 8009f64:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 800a010 <readCoils+0xe4>
 8009f68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	4648      	mov	r0, r9
 8009f70:	f01a ffd9 	bl	8024f26 <memset>

		// Prepare TxData buffer

		TxData[0] = SLAVE_ID;  // slave ID
 8009f74:	2301      	movs	r3, #1
 8009f76:	f889 3000 	strb.w	r3, [r9]
		TxData[1] = RxData[1];  // function code
 8009f7a:	4b23      	ldr	r3, [pc, #140]	@ (800a008 <readCoils+0xdc>)
 8009f7c:	785b      	ldrb	r3, [r3, #1]
 8009f7e:	f889 3001 	strb.w	r3, [r9, #1]
		TxData[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);  // Byte count
 8009f82:	f008 0607 	and.w	r6, r8, #7
 8009f86:	f018 0807 	ands.w	r8, r8, #7
 8009f8a:	bf18      	it	ne
 8009f8c:	f04f 0801 	movne.w	r8, #1
 8009f90:	eb08 08d4 	add.w	r8, r8, r4, lsr #3
 8009f94:	f889 8002 	strb.w	r8, [r9, #2]
		int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer

		int startByte = startAddr/8;  // which byte we have to start extracting the data from
 8009f98:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
		uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 8009f9c:	f007 0207 	and.w	r2, r7, #7
		int indxPosition = 0;  // The shift position in the current indx of the TxData buffer

		// Load the actual data into TxData buffer
		for (int i=0; i<numCoils; i++)
 8009fa0:	2500      	movs	r5, #0
		int indxPosition = 0;  // The shift position in the current indx of the TxData buffer
 8009fa2:	4628      	mov	r0, r5
		int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8009fa4:	2103      	movs	r1, #3
		for (int i=0; i<numCoils; i++)
 8009fa6:	e00a      	b.n	8009fbe <readCoils+0x92>
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8009fa8:	2003      	movs	r0, #3
 8009faa:	f7ff ff5f 	bl	8009e6c <modbusException>
		return 0;
 8009fae:	2000      	movs	r0, #0
 8009fb0:	e028      	b.n	800a004 <readCoils+0xd8>
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8009fb2:	2002      	movs	r0, #2
 8009fb4:	f7ff ff5a 	bl	8009e6c <modbusException>
		return 0;
 8009fb8:	2000      	movs	r0, #0
 8009fba:	e023      	b.n	800a004 <readCoils+0xd8>
		for (int i=0; i<numCoils; i++)
 8009fbc:	3501      	adds	r5, #1
 8009fbe:	42ac      	cmp	r4, r5
 8009fc0:	dd1a      	ble.n	8009ff8 <readCoils+0xcc>
		{
			TxData[indx] |= ((Coils_Database[startByte] >> bitPosition) &0x01) << indxPosition;
 8009fc2:	4b12      	ldr	r3, [pc, #72]	@ (800a00c <readCoils+0xe0>)
 8009fc4:	f813 300e 	ldrb.w	r3, [r3, lr]
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	4113      	asrs	r3, r2
 8009fcc:	f003 0301 	and.w	r3, r3, #1
 8009fd0:	4083      	lsls	r3, r0
 8009fd2:	4f0f      	ldr	r7, [pc, #60]	@ (800a010 <readCoils+0xe4>)
 8009fd4:	f817 c001 	ldrb.w	ip, [r7, r1]
 8009fd8:	ea4c 0303 	orr.w	r3, ip, r3
 8009fdc:	547b      	strb	r3, [r7, r1]
			indxPosition++; bitPosition++;
 8009fde:	3001      	adds	r0, #1
 8009fe0:	3201      	adds	r2, #1
 8009fe2:	b292      	uxth	r2, r2
			if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 8009fe4:	2807      	cmp	r0, #7
 8009fe6:	dd01      	ble.n	8009fec <readCoils+0xc0>
			{
				indxPosition = 0;
				indx++;
 8009fe8:	3101      	adds	r1, #1
				indxPosition = 0;
 8009fea:	2000      	movs	r0, #0
			}
			if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 8009fec:	2a07      	cmp	r2, #7
 8009fee:	d9e5      	bls.n	8009fbc <readCoils+0x90>
			{
				bitPosition=0;
				startByte++;
 8009ff0:	f10e 0e01 	add.w	lr, lr, #1
				bitPosition=0;
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	e7e1      	b.n	8009fbc <readCoils+0x90>
			}
		}

		if (numCoils%8 != 0)indx++;  // increment the indx variable, only if the numcoils is not a multiple of 8
 8009ff8:	b106      	cbz	r6, 8009ffc <readCoils+0xd0>
 8009ffa:	3101      	adds	r1, #1
		sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8009ffc:	4804      	ldr	r0, [pc, #16]	@ (800a010 <readCoils+0xe4>)
 8009ffe:	f7ff ff13 	bl	8009e28 <sendData>
		return 1;   // success
 800a002:	2001      	movs	r0, #1
}
 800a004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a008:	200008a0 	.word	0x200008a0
 800a00c:	200006bc 	.word	0x200006bc
 800a010:	2000088c 	.word	0x2000088c

0800a014 <writeSingleCoil>:

	 sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
	 return 1;   // success
}
uint8_t writeSingleCoil (void)
{
 800a014:	b538      	push	{r3, r4, r5, lr}
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Coil Address
 800a016:	4b21      	ldr	r3, [pc, #132]	@ (800a09c <writeSingleCoil+0x88>)
 800a018:	f893 e002 	ldrb.w	lr, [r3, #2]
 800a01c:	f893 c003 	ldrb.w	ip, [r3, #3]
 800a020:	ea4c 230e 	orr.w	r3, ip, lr, lsl #8

	if (startAddr>199)  // The Coil Address can not be more than 199 as we only have record of 200 Coils in total
 800a024:	2bc7      	cmp	r3, #199	@ 0xc7
 800a026:	d826      	bhi.n	800a076 <writeSingleCoil+0x62>
 800a028:	b21a      	sxth	r2, r3
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
		return 0;
	}

	/* Calculation for the bit in the database, where the modification will be done */
	int startByte = startAddr/8;  // which byte we have to start writing the data into
 800a02a:	08db      	lsrs	r3, r3, #3
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 800a02c:	f002 0107 	and.w	r1, r2, #7
		 * A value of FF 00 hex requests the coil to be ON.
		 * A value of 00 00 requests it to be OFF.
		 * All other values are illegal and will not affect the coil.
		 */

		if ((RxData[4] == 0xFF) && (RxData[5] == 0x00))
 800a030:	4a1a      	ldr	r2, [pc, #104]	@ (800a09c <writeSingleCoil+0x88>)
 800a032:	7912      	ldrb	r2, [r2, #4]
 800a034:	2aff      	cmp	r2, #255	@ 0xff
 800a036:	d023      	beq.n	800a080 <writeSingleCoil+0x6c>
		{
			Coils_Database[startByte] |= 1<<bitPosition; // Replace that bit with 1
		}

		else if ((RxData[4] == 0x00) && (RxData[5] == 0x00))
 800a038:	b95a      	cbnz	r2, 800a052 <writeSingleCoil+0x3e>
 800a03a:	4818      	ldr	r0, [pc, #96]	@ (800a09c <writeSingleCoil+0x88>)
 800a03c:	7940      	ldrb	r0, [r0, #5]
 800a03e:	b940      	cbnz	r0, 800a052 <writeSingleCoil+0x3e>
		{
			Coils_Database[startByte] &= ~(1<<bitPosition); // Replace that bit with 0
 800a040:	4d17      	ldr	r5, [pc, #92]	@ (800a0a0 <writeSingleCoil+0x8c>)
 800a042:	5cec      	ldrb	r4, [r5, r3]
 800a044:	2001      	movs	r0, #1
 800a046:	fa00 f101 	lsl.w	r1, r0, r1
 800a04a:	43c9      	mvns	r1, r1
 800a04c:	b249      	sxtb	r1, r1
 800a04e:	4021      	ands	r1, r4
 800a050:	54e9      	strb	r1, [r5, r3]
		// Prepare Response

			//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
			//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

			TxData[0] = SLAVE_ID;    // slave ID
 800a052:	4814      	ldr	r0, [pc, #80]	@ (800a0a4 <writeSingleCoil+0x90>)
 800a054:	2401      	movs	r4, #1
 800a056:	7004      	strb	r4, [r0, #0]
			TxData[1] = RxData[1];   // function code
 800a058:	4b10      	ldr	r3, [pc, #64]	@ (800a09c <writeSingleCoil+0x88>)
 800a05a:	7859      	ldrb	r1, [r3, #1]
 800a05c:	7041      	strb	r1, [r0, #1]
			TxData[2] = RxData[2];   // Start Addr HIGH Byte
 800a05e:	f880 e002 	strb.w	lr, [r0, #2]
			TxData[3] = RxData[3];   // Start Addr LOW Byte
 800a062:	f880 c003 	strb.w	ip, [r0, #3]
			TxData[4] = RxData[4];   // Coil Data HIGH Byte
 800a066:	7102      	strb	r2, [r0, #4]
			TxData[5] = RxData[5];   // Coil Data LOW  Byte
 800a068:	795b      	ldrb	r3, [r3, #5]
 800a06a:	7143      	strb	r3, [r0, #5]

			sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 800a06c:	2106      	movs	r1, #6
 800a06e:	f7ff fedb 	bl	8009e28 <sendData>
			return 1;
 800a072:	4620      	mov	r0, r4
}
 800a074:	bd38      	pop	{r3, r4, r5, pc}
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 800a076:	2002      	movs	r0, #2
 800a078:	f7ff fef8 	bl	8009e6c <modbusException>
		return 0;
 800a07c:	2000      	movs	r0, #0
 800a07e:	e7f9      	b.n	800a074 <writeSingleCoil+0x60>
		if ((RxData[4] == 0xFF) && (RxData[5] == 0x00))
 800a080:	4806      	ldr	r0, [pc, #24]	@ (800a09c <writeSingleCoil+0x88>)
 800a082:	7940      	ldrb	r0, [r0, #5]
 800a084:	2800      	cmp	r0, #0
 800a086:	d1d7      	bne.n	800a038 <writeSingleCoil+0x24>
			Coils_Database[startByte] |= 1<<bitPosition; // Replace that bit with 1
 800a088:	4d05      	ldr	r5, [pc, #20]	@ (800a0a0 <writeSingleCoil+0x8c>)
 800a08a:	5ce8      	ldrb	r0, [r5, r3]
 800a08c:	2401      	movs	r4, #1
 800a08e:	fa04 f101 	lsl.w	r1, r4, r1
 800a092:	4301      	orrs	r1, r0
 800a094:	b2c9      	uxtb	r1, r1
 800a096:	54e9      	strb	r1, [r5, r3]
 800a098:	e7db      	b.n	800a052 <writeSingleCoil+0x3e>
 800a09a:	bf00      	nop
 800a09c:	200008a0 	.word	0x200008a0
 800a0a0:	200006bc 	.word	0x200006bc
 800a0a4:	2000088c 	.word	0x2000088c

0800a0a8 <writeHoldingRegs>:

			sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
			return 1;   // success
		}
uint8_t writeHoldingRegs (void)
{
 800a0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 800a0ac:	4b22      	ldr	r3, [pc, #136]	@ (800a138 <writeHoldingRegs+0x90>)
 800a0ae:	789f      	ldrb	r7, [r3, #2]
 800a0b0:	78de      	ldrb	r6, [r3, #3]
 800a0b2:	ea46 2107 	orr.w	r1, r6, r7, lsl #8

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 800a0b6:	791d      	ldrb	r5, [r3, #4]
 800a0b8:	f893 e005 	ldrb.w	lr, [r3, #5]
 800a0bc:	ea4e 2c05 	orr.w	ip, lr, r5, lsl #8
	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per the PDF
 800a0c0:	f10c 33ff 	add.w	r3, ip, #4294967295
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	2b7a      	cmp	r3, #122	@ 0x7a
 800a0c8:	d809      	bhi.n	800a0de <writeHoldingRegs+0x36>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
		return 0;
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 800a0ca:	eb01 030c 	add.w	r3, r1, ip
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	b29b      	uxth	r3, r3
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 800a0d4:	2b31      	cmp	r3, #49	@ 0x31
 800a0d6:	d807      	bhi.n	800a0e8 <writeHoldingRegs+0x40>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
		return 0;
	}
	int indx = 7;  // we need to keep track of index in RxData
		for (int i=0; i<numRegs; i++)
 800a0d8:	2000      	movs	r0, #0
	int indx = 7;  // we need to keep track of index in RxData
 800a0da:	2307      	movs	r3, #7
 800a0dc:	e018      	b.n	800a110 <writeHoldingRegs+0x68>
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 800a0de:	2003      	movs	r0, #3
 800a0e0:	f7ff fec4 	bl	8009e6c <modbusException>
		return 0;
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	e024      	b.n	800a132 <writeHoldingRegs+0x8a>
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 800a0e8:	2002      	movs	r0, #2
 800a0ea:	f7ff febf 	bl	8009e6c <modbusException>
		return 0;
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	e01f      	b.n	800a132 <writeHoldingRegs+0x8a>
		{
			Holding_Registers_Database[startAddr++] = (RxData[indx++]<<8)|RxData[indx++];
 800a0f2:	1c5a      	adds	r2, r3, #1
 800a0f4:	4c10      	ldr	r4, [pc, #64]	@ (800a138 <writeHoldingRegs+0x90>)
 800a0f6:	f814 8003 	ldrb.w	r8, [r4, r3]
 800a0fa:	5ca2      	ldrb	r2, [r4, r2]
 800a0fc:	3302      	adds	r3, #2
 800a0fe:	1c4c      	adds	r4, r1, #1
 800a100:	ea42 2208 	orr.w	r2, r2, r8, lsl #8
 800a104:	f8df 8038 	ldr.w	r8, [pc, #56]	@ 800a140 <writeHoldingRegs+0x98>
 800a108:	f828 2011 	strh.w	r2, [r8, r1, lsl #1]
		for (int i=0; i<numRegs; i++)
 800a10c:	3001      	adds	r0, #1
			Holding_Registers_Database[startAddr++] = (RxData[indx++]<<8)|RxData[indx++];
 800a10e:	b2a1      	uxth	r1, r4
		for (int i=0; i<numRegs; i++)
 800a110:	4584      	cmp	ip, r0
 800a112:	dcee      	bgt.n	800a0f2 <writeHoldingRegs+0x4a>
		// Prepare Response

		//| SLAVE_ID | FUNCTION_CODE | Start Addr | num of Regs    | CRC     |
		//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES      | 2 BYTES |

		TxData[0] = SLAVE_ID;    // slave ID
 800a114:	4809      	ldr	r0, [pc, #36]	@ (800a13c <writeHoldingRegs+0x94>)
 800a116:	2401      	movs	r4, #1
 800a118:	7004      	strb	r4, [r0, #0]
		TxData[1] = RxData[1];   // function code
 800a11a:	4b07      	ldr	r3, [pc, #28]	@ (800a138 <writeHoldingRegs+0x90>)
 800a11c:	785b      	ldrb	r3, [r3, #1]
 800a11e:	7043      	strb	r3, [r0, #1]
		TxData[2] = RxData[2];   // Start Addr HIGH Byte
 800a120:	7087      	strb	r7, [r0, #2]
		TxData[3] = RxData[3];   // Start Addr LOW Byte
 800a122:	70c6      	strb	r6, [r0, #3]
		TxData[4] = RxData[4];   // num of Regs HIGH Byte
 800a124:	7105      	strb	r5, [r0, #4]
		TxData[5] = RxData[5];   // num of Regs LOW Byte
 800a126:	f880 e005 	strb.w	lr, [r0, #5]

		sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 800a12a:	2106      	movs	r1, #6
 800a12c:	f7ff fe7c 	bl	8009e28 <sendData>
		return 1;   // success
 800a130:	4620      	mov	r0, r4
}
 800a132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a136:	bf00      	nop
 800a138:	200008a0 	.word	0x200008a0
 800a13c:	2000088c 	.word	0x2000088c
 800a140:	200006d8 	.word	0x200006d8

0800a144 <__enable_irq>:
  __ASM volatile ("cpsie i" : : : "memory");
 800a144:	b662      	cpsie	i
}
 800a146:	4770      	bx	lr

0800a148 <__disable_irq>:
  __ASM volatile ("cpsid i" : : : "memory");
 800a148:	b672      	cpsid	i
}
 800a14a:	4770      	bx	lr

0800a14c <motor_iterator>:

static void motor_iterator (motor_iterator_callback_ptr callback)
{
    motor_map_t motor;

    if(callback) for(motor.id = 0; motor.id < N_AXIS + N_GANGED; motor.id++)
 800a14c:	b180      	cbz	r0, 800a170 <motor_iterator+0x24>
{
 800a14e:	b570      	push	{r4, r5, r6, lr}
 800a150:	4606      	mov	r6, r0
    if(callback) for(motor.id = 0; motor.id < N_AXIS + N_GANGED; motor.id++)
 800a152:	2500      	movs	r5, #0
 800a154:	f36f 0507 	bfc	r5, #0, #8
 800a158:	e006      	b.n	800a168 <motor_iterator+0x1c>
    {
        if(motor.id < N_AXIS)
            motor.axis = motor.id;
 800a15a:	f364 250f 	bfi	r5, r4, #8, #8
            case Z2_MOTOR:
                motor.axis = Z_AXIS;
                break;
#endif
        }
        callback(motor);
 800a15e:	4628      	mov	r0, r5
 800a160:	47b0      	blx	r6
    if(callback) for(motor.id = 0; motor.id < N_AXIS + N_GANGED; motor.id++)
 800a162:	3401      	adds	r4, #1
 800a164:	f364 0507 	bfi	r5, r4, #0, #8
 800a168:	b2ec      	uxtb	r4, r5
 800a16a:	2c02      	cmp	r4, #2
 800a16c:	d9f5      	bls.n	800a15a <motor_iterator+0xe>
    }
}
 800a16e:	bd70      	pop	{r4, r5, r6, pc}
 800a170:	4770      	bx	lr
	...

0800a174 <aux_ctrl_remap_explicit>:
    { .function = Input_ProbeDisconnect, .aux_port = 0xFF, .irq_mode = (pin_irq_mode_t)(IRQ_Mode_Rising|IRQ_Mode_Falling), .cap = { .probe_disconnected = On }, .pin = 0xFF, .port = NULL },
#endif
};

static inline aux_ctrl_t *aux_ctrl_remap_explicit (void *port, uint8_t pin, uint8_t aux_port, void *input)
{
 800a174:	b530      	push	{r4, r5, lr}
 800a176:	4686      	mov	lr, r0
    aux_ctrl_t *ctrl_pin = NULL;

    uint_fast8_t idx = sizeof(aux_ctrl) / sizeof(aux_ctrl_t);
 800a178:	2400      	movs	r4, #0
    aux_ctrl_t *ctrl_pin = NULL;
 800a17a:	4620      	mov	r0, r4
 800a17c:	e001      	b.n	800a182 <aux_ctrl_remap_explicit+0xe>
        if(aux_ctrl[idx].port == port && aux_ctrl[idx].pin == pin) {
            ctrl_pin = &aux_ctrl[idx];
            ctrl_pin->aux_port = aux_port;
            ctrl_pin->input = input;
        }
    } while(idx && ctrl_pin == NULL);
 800a17e:	b194      	cbz	r4, 800a1a6 <aux_ctrl_remap_explicit+0x32>
 800a180:	b988      	cbnz	r0, 800a1a6 <aux_ctrl_remap_explicit+0x32>
        idx--;
 800a182:	3c01      	subs	r4, #1
        if(aux_ctrl[idx].port == port && aux_ctrl[idx].pin == pin) {
 800a184:	4d08      	ldr	r5, [pc, #32]	@ (800a1a8 <aux_ctrl_remap_explicit+0x34>)
 800a186:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 800a18a:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800a18e:	4575      	cmp	r5, lr
 800a190:	d1f5      	bne.n	800a17e <aux_ctrl_remap_explicit+0xa>
 800a192:	f89c 5006 	ldrb.w	r5, [ip, #6]
 800a196:	428d      	cmp	r5, r1
 800a198:	d1f1      	bne.n	800a17e <aux_ctrl_remap_explicit+0xa>
            ctrl_pin = &aux_ctrl[idx];
 800a19a:	4660      	mov	r0, ip
            ctrl_pin->aux_port = aux_port;
 800a19c:	f88c 2001 	strb.w	r2, [ip, #1]
            ctrl_pin->input = input;
 800a1a0:	f8cc 300c 	str.w	r3, [ip, #12]
 800a1a4:	e7eb      	b.n	800a17e <aux_ctrl_remap_explicit+0xa>

    return ctrl_pin;
}
 800a1a6:	bd30      	pop	{r4, r5, pc}
 800a1a8:	200007ec 	.word	0x200007ec

0800a1ac <stepperEnable>:
   #ifdef C_ENABLE_PORT
    DIGITAL_OUT(C_ENABLE_PORT, C_ENABLE_PIN, enable.c);
   #endif
  #endif
#endif
}
 800a1ac:	4770      	bx	lr
	...

0800a1b0 <stepperWakeUp>:

// Starts stepper driver ISR timer and forces a stepper driver interrupt callback
static void stepperWakeUp (void)
{
 800a1b0:	b510      	push	{r4, lr}
    hal.stepper.enable((axes_signals_t){AXES_BITMASK});
 800a1b2:	4c0b      	ldr	r4, [pc, #44]	@ (800a1e0 <stepperWakeUp+0x30>)
 800a1b4:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 800a1b8:	f04f 0007 	mov.w	r0, #7
 800a1bc:	4798      	blx	r3

    STEPPER_TIMER->ARR = hal.f_step_timer / 500; // ~2ms delay to allow drivers time to wake up.
 800a1be:	69e2      	ldr	r2, [r4, #28]
 800a1c0:	4b08      	ldr	r3, [pc, #32]	@ (800a1e4 <stepperWakeUp+0x34>)
 800a1c2:	fba3 3202 	umull	r3, r2, r3, r2
 800a1c6:	0952      	lsrs	r2, r2, #5
 800a1c8:	4b07      	ldr	r3, [pc, #28]	@ (800a1e8 <stepperWakeUp+0x38>)
 800a1ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    STEPPER_TIMER->EGR = TIM_EGR_UG;
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	615a      	str	r2, [r3, #20]
    STEPPER_TIMER->SR = ~TIM_SR_UIF;
 800a1d0:	f06f 0201 	mvn.w	r2, #1
 800a1d4:	611a      	str	r2, [r3, #16]
    STEPPER_TIMER->CR1 |= TIM_CR1_CEN;
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	f042 0201 	orr.w	r2, r2, #1
 800a1dc:	601a      	str	r2, [r3, #0]
}
 800a1de:	bd10      	pop	{r4, pc}
 800a1e0:	200018dc 	.word	0x200018dc
 800a1e4:	10624dd3 	.word	0x10624dd3
 800a1e8:	40000c00 	.word	0x40000c00

0800a1ec <stepperGoIdle>:

// Disables stepper driver interrupts
static void stepperGoIdle (bool clear_signals)
{
    STEPPER_TIMER->CR1 &= ~TIM_CR1_CEN;
 800a1ec:	4b03      	ldr	r3, [pc, #12]	@ (800a1fc <stepperGoIdle+0x10>)
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	f022 0201 	bic.w	r2, r2, #1
 800a1f4:	601a      	str	r2, [r3, #0]
    STEPPER_TIMER->CNT = 0;
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800a1fa:	4770      	bx	lr
 800a1fc:	40000c00 	.word	0x40000c00

0800a200 <stepperCyclesPerTick>:

// Sets up stepper driver interrupt timeout, "Normal" version
static void stepperCyclesPerTick (uint32_t cycles_per_tick)
{
    STEPPER_TIMER->ARR = cycles_per_tick < (1UL << 20) ? cycles_per_tick : 0x000FFFFFUL;
 800a200:	4b03      	ldr	r3, [pc, #12]	@ (800a210 <stepperCyclesPerTick+0x10>)
 800a202:	4298      	cmp	r0, r3
 800a204:	bf28      	it	cs
 800a206:	4618      	movcs	r0, r3
 800a208:	4b02      	ldr	r3, [pc, #8]	@ (800a214 <stepperCyclesPerTick+0x14>)
 800a20a:	62d8      	str	r0, [r3, #44]	@ 0x2c
}
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	000fffff 	.word	0x000fffff
 800a214:	40000c00 	.word	0x40000c00

0800a218 <stepperPulseStart>:
        hal.stepper.pulse_start(stepper);
        return;
    }
#endif

    if(stepper->dir_change)
 800a218:	7b43      	ldrb	r3, [r0, #13]
 800a21a:	b1ab      	cbz	r3, 800a248 <stepperPulseStart+0x30>
    dir_outbits.mask ^= settings.steppers.dir_invert.mask;
 800a21c:	7bc3      	ldrb	r3, [r0, #15]
 800a21e:	4a19      	ldr	r2, [pc, #100]	@ (800a284 <stepperPulseStart+0x6c>)
 800a220:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
 800a224:	4053      	eors	r3, r2
    DIGITAL_OUT(X_DIRECTION_PORT, X_DIRECTION_PIN, dir_outbits.x);
 800a226:	f3c3 0100 	ubfx	r1, r3, #0, #1
 800a22a:	4a17      	ldr	r2, [pc, #92]	@ (800a288 <stepperPulseStart+0x70>)
 800a22c:	f882 10b0 	strb.w	r1, [r2, #176]	@ 0xb0
    DIGITAL_OUT(Y_DIRECTION_PORT, Y_DIRECTION_PIN, dir_outbits.y);
 800a230:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800a234:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 800a238:	f882 10bc 	strb.w	r1, [r2, #188]	@ 0xbc
    DIGITAL_OUT(Z_DIRECTION_PORT, Z_DIRECTION_PIN, dir_outbits.z);
 800a23c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a240:	f502 32c0 	add.w	r2, r2, #98304	@ 0x18000
 800a244:	f882 308c 	strb.w	r3, [r2, #140]	@ 0x8c
        stepperSetDirOutputs(stepper->dir_outbits);

    if(stepper->step_outbits.value) {
 800a248:	7b83      	ldrb	r3, [r0, #14]
 800a24a:	b1cb      	cbz	r3, 800a280 <stepperPulseStart+0x68>
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 800a24c:	4a0d      	ldr	r2, [pc, #52]	@ (800a284 <stepperPulseStart+0x6c>)
 800a24e:	f892 20e8 	ldrb.w	r2, [r2, #232]	@ 0xe8
 800a252:	4053      	eors	r3, r2
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 800a254:	f3c3 0100 	ubfx	r1, r3, #0, #1
 800a258:	4a0b      	ldr	r2, [pc, #44]	@ (800a288 <stepperPulseStart+0x70>)
 800a25a:	f882 10b4 	strb.w	r1, [r2, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 800a25e:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800a262:	f882 10ac 	strb.w	r1, [r2, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 800a266:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a26a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800a26e:	f882 3088 	strb.w	r3, [r2, #136]	@ 0x88
        stepperSetStepOutputs(stepper->step_outbits);
        PULSE_TIMER->EGR = TIM_EGR_UG;
 800a272:	4b06      	ldr	r3, [pc, #24]	@ (800a28c <stepperPulseStart+0x74>)
 800a274:	2201      	movs	r2, #1
 800a276:	615a      	str	r2, [r3, #20]
        PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	f042 0201 	orr.w	r2, r2, #1
 800a27e:	601a      	str	r2, [r3, #0]
    }
}
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	200022f4 	.word	0x200022f4
 800a288:	42418200 	.word	0x42418200
 800a28c:	40000800 	.word	0x40000800

0800a290 <stepperPulseStartDelayed>:
        hal.stepper.pulse_start(stepper);
        return;
    }
#endif

    if(stepper->dir_change) {
 800a290:	7b43      	ldrb	r3, [r0, #13]
 800a292:	b9e3      	cbnz	r3, 800a2ce <stepperPulseStartDelayed+0x3e>
        }

        return;
    }

    if(stepper->step_outbits.value) {
 800a294:	7b83      	ldrb	r3, [r0, #14]
 800a296:	b1cb      	cbz	r3, 800a2cc <stepperPulseStartDelayed+0x3c>
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 800a298:	4a20      	ldr	r2, [pc, #128]	@ (800a31c <stepperPulseStartDelayed+0x8c>)
 800a29a:	f892 20e8 	ldrb.w	r2, [r2, #232]	@ 0xe8
 800a29e:	4053      	eors	r3, r2
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 800a2a0:	f3c3 0100 	ubfx	r1, r3, #0, #1
 800a2a4:	4a1e      	ldr	r2, [pc, #120]	@ (800a320 <stepperPulseStartDelayed+0x90>)
 800a2a6:	f882 10b4 	strb.w	r1, [r2, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 800a2aa:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800a2ae:	f882 10ac 	strb.w	r1, [r2, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 800a2b2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a2b6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800a2ba:	f882 3088 	strb.w	r3, [r2, #136]	@ 0x88
        stepperSetStepOutputs(stepper->step_outbits);
        PULSE_TIMER->EGR = TIM_EGR_UG;
 800a2be:	4b19      	ldr	r3, [pc, #100]	@ (800a324 <stepperPulseStartDelayed+0x94>)
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	615a      	str	r2, [r3, #20]
        PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	f042 0201 	orr.w	r2, r2, #1
 800a2ca:	601a      	str	r2, [r3, #0]
    }
}
 800a2cc:	4770      	bx	lr
    dir_outbits.mask ^= settings.steppers.dir_invert.mask;
 800a2ce:	7bc3      	ldrb	r3, [r0, #15]
 800a2d0:	4a12      	ldr	r2, [pc, #72]	@ (800a31c <stepperPulseStartDelayed+0x8c>)
 800a2d2:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
 800a2d6:	4053      	eors	r3, r2
    DIGITAL_OUT(X_DIRECTION_PORT, X_DIRECTION_PIN, dir_outbits.x);
 800a2d8:	f3c3 0100 	ubfx	r1, r3, #0, #1
 800a2dc:	4a10      	ldr	r2, [pc, #64]	@ (800a320 <stepperPulseStartDelayed+0x90>)
 800a2de:	f882 10b0 	strb.w	r1, [r2, #176]	@ 0xb0
    DIGITAL_OUT(Y_DIRECTION_PORT, Y_DIRECTION_PIN, dir_outbits.y);
 800a2e2:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800a2e6:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 800a2ea:	f882 10bc 	strb.w	r1, [r2, #188]	@ 0xbc
    DIGITAL_OUT(Z_DIRECTION_PORT, Z_DIRECTION_PIN, dir_outbits.z);
 800a2ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a2f2:	f502 32c0 	add.w	r2, r2, #98304	@ 0x18000
 800a2f6:	f882 308c 	strb.w	r3, [r2, #140]	@ 0x8c
        if(stepper->step_outbits.value) {
 800a2fa:	7b83      	ldrb	r3, [r0, #14]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d0e5      	beq.n	800a2cc <stepperPulseStartDelayed+0x3c>
            next_step_outbits = stepper->step_outbits; // Store out_bits
 800a300:	461a      	mov	r2, r3
 800a302:	4b09      	ldr	r3, [pc, #36]	@ (800a328 <stepperPulseStartDelayed+0x98>)
 800a304:	701a      	strb	r2, [r3, #0]
            PULSE_TIMER->ARR = pulse_delay;
 800a306:	4b09      	ldr	r3, [pc, #36]	@ (800a32c <stepperPulseStartDelayed+0x9c>)
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	4b06      	ldr	r3, [pc, #24]	@ (800a324 <stepperPulseStartDelayed+0x94>)
 800a30c:	62da      	str	r2, [r3, #44]	@ 0x2c
            PULSE_TIMER->EGR = TIM_EGR_UG;
 800a30e:	2201      	movs	r2, #1
 800a310:	615a      	str	r2, [r3, #20]
            PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	f042 0201 	orr.w	r2, r2, #1
 800a318:	601a      	str	r2, [r3, #0]
        return;
 800a31a:	4770      	bx	lr
 800a31c:	200022f4 	.word	0x200022f4
 800a320:	42418200 	.word	0x42418200
 800a324:	40000800 	.word	0x40000800
 800a328:	200007c4 	.word	0x200007c4
 800a32c:	200007d8 	.word	0x200007d8

0800a330 <limitsGetState>:
}

// Returns limit state as an limit_signals_t variable.
// Each bitfield bit indicates an axis limit, where triggered is 1 and not triggered is 0.
inline static limit_signals_t limitsGetState (void)
{
 800a330:	b082      	sub	sp, #8
    limit_signals_t signals = {0};
 800a332:	2300      	movs	r3, #0
 800a334:	9300      	str	r3, [sp, #0]

    signals.min.mask = settings.limits.invert.mask;
 800a336:	4b1c      	ldr	r3, [pc, #112]	@ (800a3a8 <limitsGetState+0x78>)
 800a338:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 800a33c:	f88d 3000 	strb.w	r3, [sp]
#ifdef MAX_LIMIT_SWITCHES
    signals.max.mask = settings.limits.invert.mask;
#endif

#if LIMIT_INMODE == GPIO_BITBAND
    signals.min.x = DIGITAL_IN(X_LIMIT_PORT, X_LIMIT_PIN);
 800a340:	4a1a      	ldr	r2, [pc, #104]	@ (800a3ac <limitsGetState+0x7c>)
 800a342:	f892 002c 	ldrb.w	r0, [r2, #44]	@ 0x2c
 800a346:	b2d9      	uxtb	r1, r3
 800a348:	f360 0100 	bfi	r1, r0, #0, #1
 800a34c:	f88d 1000 	strb.w	r1, [sp]
    signals.min.y = DIGITAL_IN(Y_LIMIT_PORT, Y_LIMIT_PIN);
 800a350:	f892 1030 	ldrb.w	r1, [r2, #48]	@ 0x30
 800a354:	f89d 2000 	ldrb.w	r2, [sp]
 800a358:	f361 0241 	bfi	r2, r1, #1, #1
 800a35c:	f88d 2000 	strb.w	r2, [sp]
    signals.min.z = DIGITAL_IN(Z_LIMIT_PORT, Z_LIMIT_PIN);
 800a360:	4a13      	ldr	r2, [pc, #76]	@ (800a3b0 <limitsGetState+0x80>)
 800a362:	f892 1030 	ldrb.w	r1, [r2, #48]	@ 0x30
 800a366:	f89d 2000 	ldrb.w	r2, [sp]
 800a36a:	f361 0282 	bfi	r2, r1, #2, #1
 800a36e:	f88d 2000 	strb.w	r2, [sp]
#endif
#ifdef Z_LIMIT_PIN_MAX
    signals.max.z = DIGITAL_IN(Z_LIMIT_PORT_MAX, Z_LIMIT_PIN_MAX);
#endif

    if (settings.limits.invert.mask) {
 800a372:	b11b      	cbz	r3, 800a37c <limitsGetState+0x4c>
        signals.min.value ^= settings.limits.invert.mask;
 800a374:	b2d2      	uxtb	r2, r2
 800a376:	4053      	eors	r3, r2
 800a378:	f88d 3000 	strb.w	r3, [sp]
#ifdef MAX_LIMIT_SWITCHES
        signals.max.value ^= settings.limits.invert.mask;
#endif
    }

    return signals;
 800a37c:	9b00      	ldr	r3, [sp, #0]
 800a37e:	9301      	str	r3, [sp, #4]
 800a380:	2000      	movs	r0, #0
 800a382:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a386:	f363 0007 	bfi	r0, r3, #0, #8
 800a38a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a38e:	f363 200f 	bfi	r0, r3, #8, #8
 800a392:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a396:	f363 4017 	bfi	r0, r3, #16, #8
 800a39a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a39e:	f363 601f 	bfi	r0, r3, #24, #8
}
 800a3a2:	b002      	add	sp, #8
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	200022f4 	.word	0x200022f4
 800a3ac:	42400200 	.word	0x42400200
 800a3b0:	42408200 	.word	0x42408200

0800a3b4 <systemGetState>:
// Each bitfield bit indicates a control signal, where triggered is 1 and not triggered is 0.
static control_signals_t systemGetState (void)
{
    control_signals_t signals;

    signals.mask = settings.control_invert.mask;
 800a3b4:	4a06      	ldr	r2, [pc, #24]	@ (800a3d0 <systemGetState+0x1c>)
 800a3b6:	f8b2 306c 	ldrh.w	r3, [r2, #108]	@ 0x6c
 800a3ba:	4618      	mov	r0, r3
  #endif
#else
//    signals.value &= ~(CONTROL_MASK >> CONTROL_INMODE);
//    signals.value |= (uint16_t)((CONTROL_PORT->IDR & CONTROL_MASK) >> CONTROL_INMODE);
  #if ESTOP_ENABLE
    signals.e_stop = signals.reset;
 800a3bc:	f363 1086 	bfi	r0, r3, #6, #1
    signals.reset = settings.control_invert.reset;
 800a3c0:	f892 206c 	ldrb.w	r2, [r2, #108]	@ 0x6c
 800a3c4:	f362 0000 	bfi	r0, r2, #0, #1
  #endif
  #ifdef MOTOR_WARNING_PIN
    signals.motor_warning = DIGITAL_IN(MOTOR_WARNING_PORT, MOTOR_WARNING_PIN);
  #endif

    if(settings.control_invert.mask)
 800a3c8:	b10b      	cbz	r3, 800a3ce <systemGetState+0x1a>
        signals.value ^= settings.control_invert.mask;
 800a3ca:	b280      	uxth	r0, r0
 800a3cc:	4058      	eors	r0, r3

#endif // AUX_CONTROLS_ENABLED


    return signals;
}
 800a3ce:	4770      	bx	lr
 800a3d0:	200022f4 	.word	0x200022f4

0800a3d4 <coolantSetState>:
#endif // SPINDLE_ENCODER_ENABLE

// Start/stop coolant (and mist if enabled)
static void coolantSetState (coolant_state_t mode)
{
    mode.value ^= settings.coolant_invert.mask;
 800a3d4:	b2c0      	uxtb	r0, r0
 800a3d6:	4b08      	ldr	r3, [pc, #32]	@ (800a3f8 <coolantSetState+0x24>)
 800a3d8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a3dc:	4058      	eors	r0, r3
    DIGITAL_OUT(COOLANT_FLOOD_PORT, COOLANT_FLOOD_PIN, mode.flood);
 800a3de:	f3c0 0200 	ubfx	r2, r0, #0, #1
 800a3e2:	4b06      	ldr	r3, [pc, #24]	@ (800a3fc <coolantSetState+0x28>)
 800a3e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
#ifdef COOLANT_MIST_PIN
    DIGITAL_OUT(COOLANT_MIST_PORT, COOLANT_MIST_PIN, mode.mist);
 800a3e8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800a3ec:	f5a3 33c0 	sub.w	r3, r3, #98304	@ 0x18000
 800a3f0:	f883 0094 	strb.w	r0, [r3, #148]	@ 0x94
#endif
}
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	200022f4 	.word	0x200022f4
 800a3fc:	42420200 	.word	0x42420200

0800a400 <coolantGetState>:

// Returns coolant state in a coolant_state_t variable
static coolant_state_t coolantGetState (void)
{
    coolant_state_t state = (coolant_state_t){settings.coolant_invert.mask};
 800a400:	4b07      	ldr	r3, [pc, #28]	@ (800a420 <coolantGetState+0x20>)
 800a402:	f893 0070 	ldrb.w	r0, [r3, #112]	@ 0x70
 800a406:	4603      	mov	r3, r0

    state.flood = DIGITAL_IN(COOLANT_FLOOD_PORT, COOLANT_FLOOD_PIN);
 800a408:	4a06      	ldr	r2, [pc, #24]	@ (800a424 <coolantGetState+0x24>)
 800a40a:	7812      	ldrb	r2, [r2, #0]
 800a40c:	f362 0300 	bfi	r3, r2, #0, #1
#ifdef COOLANT_MIST_PIN
    state.mist  = DIGITAL_IN(COOLANT_MIST_PORT, COOLANT_MIST_PIN);
 800a410:	4a05      	ldr	r2, [pc, #20]	@ (800a428 <coolantGetState+0x28>)
 800a412:	7d12      	ldrb	r2, [r2, #20]
 800a414:	f362 0341 	bfi	r3, r2, #1, #1
#endif
    state.value ^= settings.coolant_invert.mask;
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	4058      	eors	r0, r3

    return state;
}
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	200022f4 	.word	0x200022f4
 800a424:	42420200 	.word	0x42420200
 800a428:	42408200 	.word	0x42408200

0800a42c <bitsSetAtomic>:
  __ASM volatile ("cpsid i" : : : "memory");
 800a42c:	b672      	cpsid	i

// Helper functions for setting/clearing/inverting individual bits atomically (uninterruptable)
static void bitsSetAtomic (volatile uint_fast16_t *ptr, uint_fast16_t bits)
{
    __disable_irq();
    *ptr |= bits;
 800a42e:	6803      	ldr	r3, [r0, #0]
 800a430:	4319      	orrs	r1, r3
 800a432:	6001      	str	r1, [r0, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a434:	b662      	cpsie	i
    __enable_irq();
}
 800a436:	4770      	bx	lr

0800a438 <bitsClearAtomic>:

static uint_fast16_t bitsClearAtomic (volatile uint_fast16_t *ptr, uint_fast16_t bits)
{
 800a438:	4603      	mov	r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
 800a43a:	b672      	cpsid	i
    __disable_irq();
    uint_fast16_t prev = *ptr;
 800a43c:	6800      	ldr	r0, [r0, #0]
    *ptr &= ~bits;
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	ea22 0101 	bic.w	r1, r2, r1
 800a444:	6019      	str	r1, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a446:	b662      	cpsie	i
    __enable_irq();

    return prev;
}
 800a448:	4770      	bx	lr

0800a44a <valueSetAtomic>:

static uint_fast16_t valueSetAtomic (volatile uint_fast16_t *ptr, uint_fast16_t value)
{
 800a44a:	4603      	mov	r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
 800a44c:	b672      	cpsid	i
    __disable_irq();
    uint_fast16_t prev = *ptr;
 800a44e:	6800      	ldr	r0, [r0, #0]
    *ptr = value;
 800a450:	6019      	str	r1, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a452:	b662      	cpsie	i
    __enable_irq();

    return prev;
}
 800a454:	4770      	bx	lr
	...

0800a458 <getElapsedMicros>:

static uint64_t getElapsedMicros (void)
{
 800a458:	b410      	push	{r4}
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45a:	4a0f      	ldr	r2, [pc, #60]	@ (800a498 <getElapsedMicros+0x40>)
 800a45c:	e852 3f00 	ldrex	r3, [r2]
    uint32_t ms, cycles;
    do {
        __LDREXW(&systick_safe_read);
        ms = uwTick;
 800a460:	4b0e      	ldr	r3, [pc, #56]	@ (800a49c <getElapsedMicros+0x44>)
 800a462:	681c      	ldr	r4, [r3, #0]
        cycles = cycle_count;
 800a464:	4b0e      	ldr	r3, [pc, #56]	@ (800a4a0 <getElapsedMicros+0x48>)
 800a466:	6818      	ldr	r0, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a468:	2301      	movs	r3, #1
 800a46a:	e842 3100 	strex	r1, r3, [r2]
    } while(__STREXW(1, &systick_safe_read));
 800a46e:	2900      	cmp	r1, #0
 800a470:	d1f3      	bne.n	800a45a <getElapsedMicros+0x2>

    uint32_t cyccnt = DWT->CYCCNT;
 800a472:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a4 <getElapsedMicros+0x4c>)
 800a474:	685b      	ldr	r3, [r3, #4]
    asm volatile("" : : : "memory");
    uint32_t ccdelta = cyccnt - cycles;
 800a476:	1a18      	subs	r0, r3, r0
    uint32_t frac = ((uint64_t)ccdelta * cycles2us_factor) >> 32;
 800a478:	4b0b      	ldr	r3, [pc, #44]	@ (800a4a8 <getElapsedMicros+0x50>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	fba3 3000 	umull	r3, r0, r3, r0

    return ms * 1000 + (frac > 1000 ? 1000 : frac);
 800a480:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a484:	bf28      	it	cs
 800a486:	f44f 707a 	movcs.w	r0, #1000	@ 0x3e8
}
 800a48a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a48e:	fb03 0004 	mla	r0, r3, r4, r0
 800a492:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	200007e4 	.word	0x200007e4
 800a49c:	20000698 	.word	0x20000698
 800a4a0:	200014e4 	.word	0x200014e4
 800a4a4:	e0001000 	.word	0xe0001000
 800a4a8:	200007e0 	.word	0x200007e0

0800a4ac <getElapsedTicks>:

static uint32_t getElapsedTicks (void)
{
    return uwTick;
 800a4ac:	4b01      	ldr	r3, [pc, #4]	@ (800a4b4 <getElapsedTicks+0x8>)
 800a4ae:	6818      	ldr	r0, [r3, #0]
}
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	20000698 	.word	0x20000698

0800a4b8 <port2char>:

static char *port2char (GPIO_TypeDef *port)
{
    static char name[3] = "P?";

    name[1] = 'A' + GPIO_GET_INDEX(port);
 800a4b8:	4b19      	ldr	r3, [pc, #100]	@ (800a520 <port2char+0x68>)
 800a4ba:	4298      	cmp	r0, r3
 800a4bc:	d01f      	beq.n	800a4fe <port2char+0x46>
 800a4be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4c2:	4298      	cmp	r0, r3
 800a4c4:	d01f      	beq.n	800a506 <port2char+0x4e>
 800a4c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4ca:	4298      	cmp	r0, r3
 800a4cc:	d01d      	beq.n	800a50a <port2char+0x52>
 800a4ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4d2:	4298      	cmp	r0, r3
 800a4d4:	d01b      	beq.n	800a50e <port2char+0x56>
 800a4d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4da:	4298      	cmp	r0, r3
 800a4dc:	d019      	beq.n	800a512 <port2char+0x5a>
 800a4de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4e2:	4298      	cmp	r0, r3
 800a4e4:	d017      	beq.n	800a516 <port2char+0x5e>
 800a4e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4ea:	4298      	cmp	r0, r3
 800a4ec:	d015      	beq.n	800a51a <port2char+0x62>
 800a4ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4f2:	4298      	cmp	r0, r3
 800a4f4:	d001      	beq.n	800a4fa <port2char+0x42>
 800a4f6:	2349      	movs	r3, #73	@ 0x49
 800a4f8:	e002      	b.n	800a500 <port2char+0x48>
 800a4fa:	2348      	movs	r3, #72	@ 0x48
 800a4fc:	e000      	b.n	800a500 <port2char+0x48>
 800a4fe:	2341      	movs	r3, #65	@ 0x41
 800a500:	4808      	ldr	r0, [pc, #32]	@ (800a524 <port2char+0x6c>)
 800a502:	7043      	strb	r3, [r0, #1]

    return name;
}
 800a504:	4770      	bx	lr
    name[1] = 'A' + GPIO_GET_INDEX(port);
 800a506:	2342      	movs	r3, #66	@ 0x42
 800a508:	e7fa      	b.n	800a500 <port2char+0x48>
 800a50a:	2343      	movs	r3, #67	@ 0x43
 800a50c:	e7f8      	b.n	800a500 <port2char+0x48>
 800a50e:	2344      	movs	r3, #68	@ 0x44
 800a510:	e7f6      	b.n	800a500 <port2char+0x48>
 800a512:	2345      	movs	r3, #69	@ 0x45
 800a514:	e7f4      	b.n	800a500 <port2char+0x48>
 800a516:	2346      	movs	r3, #70	@ 0x46
 800a518:	e7f2      	b.n	800a500 <port2char+0x48>
 800a51a:	2347      	movs	r3, #71	@ 0x47
 800a51c:	e7f0      	b.n	800a500 <port2char+0x48>
 800a51e:	bf00      	nop
 800a520:	40020000 	.word	0x40020000
 800a524:	20000008 	.word	0x20000008

0800a528 <enumeratePins>:

static void enumeratePins (bool low_level, pin_info_ptr pin_info, void *data)
{
 800a528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a52c:	4606      	mov	r6, r0
 800a52e:	460f      	mov	r7, r1
 800a530:	4690      	mov	r8, r2
    static xbar_t pin = {0};

    uint8_t i, id = 0;

    pin.mode.input = On;
 800a532:	4a53      	ldr	r2, [pc, #332]	@ (800a680 <enumeratePins+0x158>)
 800a534:	7d93      	ldrb	r3, [r2, #22]
 800a536:	f043 0301 	orr.w	r3, r3, #1
 800a53a:	7593      	strb	r3, [r2, #22]
    uint8_t i, id = 0;
 800a53c:	2500      	movs	r5, #0

    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800a53e:	462c      	mov	r4, r5
 800a540:	e01f      	b.n	800a582 <enumeratePins+0x5a>
        pin.id = id++;
        pin.pin = inputpin[i].pin;
        pin.function = inputpin[i].id;
        pin.group = inputpin[i].group;
        pin.port = low_level ? (void *)inputpin[i].port : (void *)port2char(inputpin[i].port);
 800a542:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a546:	4b4f      	ldr	r3, [pc, #316]	@ (800a684 <enumeratePins+0x15c>)
 800a548:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a54c:	68d8      	ldr	r0, [r3, #12]
 800a54e:	f7ff ffb3 	bl	800a4b8 <port2char>
 800a552:	4603      	mov	r3, r0
 800a554:	484a      	ldr	r0, [pc, #296]	@ (800a680 <enumeratePins+0x158>)
 800a556:	6083      	str	r3, [r0, #8]
        pin.description = inputpin[i].description;
 800a558:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800a55c:	4b49      	ldr	r3, [pc, #292]	@ (800a684 <enumeratePins+0x15c>)
 800a55e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a562:	6a1b      	ldr	r3, [r3, #32]
 800a564:	60c3      	str	r3, [r0, #12]
        pin.mode.pwm = pin.group == PinGroup_SpindlePWM;
 800a566:	6843      	ldr	r3, [r0, #4]
 800a568:	2b01      	cmp	r3, #1
 800a56a:	bf14      	ite	ne
 800a56c:	2300      	movne	r3, #0
 800a56e:	2301      	moveq	r3, #1
 800a570:	7dc2      	ldrb	r2, [r0, #23]
 800a572:	f363 1204 	bfi	r2, r3, #4, #1
 800a576:	75c2      	strb	r2, [r0, #23]

        pin_info(&pin, data);
 800a578:	4641      	mov	r1, r8
 800a57a:	47b8      	blx	r7
    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800a57c:	3401      	adds	r4, #1
 800a57e:	b2e4      	uxtb	r4, r4
        pin.id = id++;
 800a580:	464d      	mov	r5, r9
    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800a582:	2c02      	cmp	r4, #2
 800a584:	d81b      	bhi.n	800a5be <enumeratePins+0x96>
        pin.id = id++;
 800a586:	f105 0901 	add.w	r9, r5, #1
 800a58a:	fa5f f989 	uxtb.w	r9, r9
 800a58e:	4b3c      	ldr	r3, [pc, #240]	@ (800a680 <enumeratePins+0x158>)
 800a590:	701d      	strb	r5, [r3, #0]
        pin.pin = inputpin[i].pin;
 800a592:	4625      	mov	r5, r4
 800a594:	493b      	ldr	r1, [pc, #236]	@ (800a684 <enumeratePins+0x15c>)
 800a596:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a59a:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800a59e:	f892 c006 	ldrb.w	ip, [r2, #6]
 800a5a2:	f8c3 c010 	str.w	ip, [r3, #16]
        pin.function = inputpin[i].id;
 800a5a6:	f811 1020 	ldrb.w	r1, [r1, r0, lsl #2]
 800a5aa:	7059      	strb	r1, [r3, #1]
        pin.group = inputpin[i].group;
 800a5ac:	6912      	ldr	r2, [r2, #16]
 800a5ae:	605a      	str	r2, [r3, #4]
        pin.port = low_level ? (void *)inputpin[i].port : (void *)port2char(inputpin[i].port);
 800a5b0:	2e00      	cmp	r6, #0
 800a5b2:	d0c6      	beq.n	800a542 <enumeratePins+0x1a>
 800a5b4:	4b33      	ldr	r3, [pc, #204]	@ (800a684 <enumeratePins+0x15c>)
 800a5b6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	e7ca      	b.n	800a554 <enumeratePins+0x2c>
    };

    pin.mode.mask = 0;
 800a5be:	4b30      	ldr	r3, [pc, #192]	@ (800a680 <enumeratePins+0x158>)
 800a5c0:	2400      	movs	r4, #0
 800a5c2:	82dc      	strh	r4, [r3, #22]
    pin.mode.output = On;
 800a5c4:	7d9a      	ldrb	r2, [r3, #22]
 800a5c6:	f042 0202 	orr.w	r2, r2, #2
 800a5ca:	759a      	strb	r2, [r3, #22]

    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800a5cc:	e011      	b.n	800a5f2 <enumeratePins+0xca>
        pin.id = id++;
        pin.pin = outputpin[i].pin;
        pin.function = outputpin[i].id;
        pin.group = outputpin[i].group;
        pin.port = low_level ? (void *)outputpin[i].port : (void *)port2char(outputpin[i].port);
 800a5ce:	4b2e      	ldr	r3, [pc, #184]	@ (800a688 <enumeratePins+0x160>)
 800a5d0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	482a      	ldr	r0, [pc, #168]	@ (800a680 <enumeratePins+0x158>)
 800a5d8:	6083      	str	r3, [r0, #8]
        pin.description = outputpin[i].description;
 800a5da:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 800a5de:	4b2a      	ldr	r3, [pc, #168]	@ (800a688 <enumeratePins+0x160>)
 800a5e0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a5e4:	695b      	ldr	r3, [r3, #20]
 800a5e6:	60c3      	str	r3, [r0, #12]

        pin_info(&pin, data);
 800a5e8:	4641      	mov	r1, r8
 800a5ea:	47b8      	blx	r7
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800a5ec:	3401      	adds	r4, #1
 800a5ee:	b2e4      	uxtb	r4, r4
        pin.id = id++;
 800a5f0:	464d      	mov	r5, r9
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800a5f2:	2c07      	cmp	r4, #7
 800a5f4:	d820      	bhi.n	800a638 <enumeratePins+0x110>
        pin.id = id++;
 800a5f6:	f105 0901 	add.w	r9, r5, #1
 800a5fa:	fa5f f989 	uxtb.w	r9, r9
 800a5fe:	4b20      	ldr	r3, [pc, #128]	@ (800a680 <enumeratePins+0x158>)
 800a600:	701d      	strb	r5, [r3, #0]
        pin.pin = outputpin[i].pin;
 800a602:	4625      	mov	r5, r4
 800a604:	4920      	ldr	r1, [pc, #128]	@ (800a688 <enumeratePins+0x160>)
 800a606:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800a60a:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800a60e:	f892 c008 	ldrb.w	ip, [r2, #8]
 800a612:	f8c3 c010 	str.w	ip, [r3, #16]
        pin.function = outputpin[i].id;
 800a616:	f811 1020 	ldrb.w	r1, [r1, r0, lsl #2]
 800a61a:	7059      	strb	r1, [r3, #1]
        pin.group = outputpin[i].group;
 800a61c:	68d2      	ldr	r2, [r2, #12]
 800a61e:	605a      	str	r2, [r3, #4]
        pin.port = low_level ? (void *)outputpin[i].port : (void *)port2char(outputpin[i].port);
 800a620:	2e00      	cmp	r6, #0
 800a622:	d1d4      	bne.n	800a5ce <enumeratePins+0xa6>
 800a624:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800a628:	4b17      	ldr	r3, [pc, #92]	@ (800a688 <enumeratePins+0x160>)
 800a62a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a62e:	6858      	ldr	r0, [r3, #4]
 800a630:	f7ff ff42 	bl	800a4b8 <port2char>
 800a634:	4603      	mov	r3, r0
 800a636:	e7ce      	b.n	800a5d6 <enumeratePins+0xae>
    };

    periph_signal_t *ppin = periph_pins;
 800a638:	4b14      	ldr	r3, [pc, #80]	@ (800a68c <enumeratePins+0x164>)
 800a63a:	681c      	ldr	r4, [r3, #0]

    if(ppin) do {
 800a63c:	b984      	cbnz	r4, 800a660 <enumeratePins+0x138>
        pin.mode = ppin->pin.mode;
        pin.description = ppin->pin.description;

        pin_info(&pin, data);
    } while((ppin = ppin->next));
}
 800a63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        pin.port = low_level ? ppin->pin.port : (void *)port2char(ppin->pin.port);
 800a642:	68a0      	ldr	r0, [r4, #8]
 800a644:	f7ff ff38 	bl	800a4b8 <port2char>
 800a648:	4603      	mov	r3, r0
 800a64a:	480d      	ldr	r0, [pc, #52]	@ (800a680 <enumeratePins+0x158>)
 800a64c:	6083      	str	r3, [r0, #8]
        pin.mode = ppin->pin.mode;
 800a64e:	8a23      	ldrh	r3, [r4, #16]
 800a650:	82c3      	strh	r3, [r0, #22]
        pin.description = ppin->pin.description;
 800a652:	6963      	ldr	r3, [r4, #20]
 800a654:	60c3      	str	r3, [r0, #12]
        pin_info(&pin, data);
 800a656:	4641      	mov	r1, r8
 800a658:	47b8      	blx	r7
    } while((ppin = ppin->next));
 800a65a:	69a4      	ldr	r4, [r4, #24]
 800a65c:	2c00      	cmp	r4, #0
 800a65e:	d0ee      	beq.n	800a63e <enumeratePins+0x116>
        pin.id = id++;
 800a660:	462a      	mov	r2, r5
 800a662:	3501      	adds	r5, #1
 800a664:	b2ed      	uxtb	r5, r5
 800a666:	4b06      	ldr	r3, [pc, #24]	@ (800a680 <enumeratePins+0x158>)
 800a668:	701a      	strb	r2, [r3, #0]
        pin.pin = ppin->pin.pin;
 800a66a:	68e2      	ldr	r2, [r4, #12]
 800a66c:	611a      	str	r2, [r3, #16]
        pin.function = ppin->pin.function;
 800a66e:	7822      	ldrb	r2, [r4, #0]
 800a670:	705a      	strb	r2, [r3, #1]
        pin.group = ppin->pin.group;
 800a672:	6862      	ldr	r2, [r4, #4]
 800a674:	605a      	str	r2, [r3, #4]
        pin.port = low_level ? ppin->pin.port : (void *)port2char(ppin->pin.port);
 800a676:	2e00      	cmp	r6, #0
 800a678:	d0e3      	beq.n	800a642 <enumeratePins+0x11a>
 800a67a:	68a3      	ldr	r3, [r4, #8]
 800a67c:	e7e5      	b.n	800a64a <enumeratePins+0x122>
 800a67e:	bf00      	nop
 800a680:	2000073c 	.word	0x2000073c
 800a684:	200000f4 	.word	0x200000f4
 800a688:	20000014 	.word	0x20000014
 800a68c:	200007e8 	.word	0x200007e8

0800a690 <setPeriphPinDescription>:
    }
}

void setPeriphPinDescription (const pin_function_t function, const pin_group_t group, const char *description)
{
    periph_signal_t *ppin = periph_pins;
 800a690:	4b0e      	ldr	r3, [pc, #56]	@ (800a6cc <setPeriphPinDescription+0x3c>)
 800a692:	681b      	ldr	r3, [r3, #0]

    if(ppin) do {
 800a694:	b943      	cbnz	r3, 800a6a8 <setPeriphPinDescription+0x18>
 800a696:	4770      	bx	lr
        if(ppin->pin.function == function && ppin->pin.group == group) {
            ppin->pin.description = description;
 800a698:	615a      	str	r2, [r3, #20]
            ppin = NULL;
 800a69a:	2300      	movs	r3, #0
 800a69c:	e00d      	b.n	800a6ba <setPeriphPinDescription+0x2a>
        } else
            ppin = ppin->next;
    } while(ppin);
}
 800a69e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6a2:	4770      	bx	lr
            ppin = ppin->next;
 800a6a4:	699b      	ldr	r3, [r3, #24]
    } while(ppin);
 800a6a6:	b17b      	cbz	r3, 800a6c8 <setPeriphPinDescription+0x38>
        if(ppin->pin.function == function && ppin->pin.group == group) {
 800a6a8:	f893 c000 	ldrb.w	ip, [r3]
 800a6ac:	4584      	cmp	ip, r0
 800a6ae:	d1f9      	bne.n	800a6a4 <setPeriphPinDescription+0x14>
{
 800a6b0:	b410      	push	{r4}
        if(ppin->pin.function == function && ppin->pin.group == group) {
 800a6b2:	685c      	ldr	r4, [r3, #4]
 800a6b4:	428c      	cmp	r4, r1
 800a6b6:	d0ef      	beq.n	800a698 <setPeriphPinDescription+0x8>
            ppin = ppin->next;
 800a6b8:	699b      	ldr	r3, [r3, #24]
    } while(ppin);
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d0ef      	beq.n	800a69e <setPeriphPinDescription+0xe>
        if(ppin->pin.function == function && ppin->pin.group == group) {
 800a6be:	f893 c000 	ldrb.w	ip, [r3]
 800a6c2:	4584      	cmp	ip, r0
 800a6c4:	d1f8      	bne.n	800a6b8 <setPeriphPinDescription+0x28>
 800a6c6:	e7f4      	b.n	800a6b2 <setPeriphPinDescription+0x22>
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop
 800a6cc:	200007e8 	.word	0x200007e8

0800a6d0 <settings_changed>:
    if(IOInitDone) {
 800a6d0:	4bbe      	ldr	r3, [pc, #760]	@ (800a9cc <settings_changed+0x2fc>)
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f000 8398 	beq.w	800ae0a <settings_changed+0x73a>
{
 800a6da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6dc:	b087      	sub	sp, #28
 800a6de:	4605      	mov	r5, r0
        GPIO_InitTypeDef GPIO_Init = {
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	9301      	str	r3, [sp, #4]
 800a6e4:	9302      	str	r3, [sp, #8]
 800a6e6:	9303      	str	r3, [sp, #12]
 800a6e8:	9304      	str	r3, [sp, #16]
 800a6ea:	9305      	str	r3, [sp, #20]
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	9304      	str	r3, [sp, #16]
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 800a6f0:	48b7      	ldr	r0, [pc, #732]	@ (800a9d0 <settings_changed+0x300>)
 800a6f2:	f890 30e8 	ldrb.w	r3, [r0, #232]	@ 0xe8
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 800a6f6:	f3c3 0100 	ubfx	r1, r3, #0, #1
 800a6fa:	4ab6      	ldr	r2, [pc, #728]	@ (800a9d4 <settings_changed+0x304>)
 800a6fc:	f882 10b4 	strb.w	r1, [r2, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 800a700:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800a704:	f882 10ac 	strb.w	r1, [r2, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 800a708:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a70c:	49b2      	ldr	r1, [pc, #712]	@ (800a9d8 <settings_changed+0x308>)
 800a70e:	f881 3088 	strb.w	r3, [r1, #136]	@ 0x88
    dir_outbits.mask ^= settings.steppers.dir_invert.mask;
 800a712:	f890 30e9 	ldrb.w	r3, [r0, #233]	@ 0xe9
    DIGITAL_OUT(X_DIRECTION_PORT, X_DIRECTION_PIN, dir_outbits.x);
 800a716:	f3c3 0000 	ubfx	r0, r3, #0, #1
 800a71a:	f882 00b0 	strb.w	r0, [r2, #176]	@ 0xb0
    DIGITAL_OUT(Y_DIRECTION_PORT, Y_DIRECTION_PIN, dir_outbits.y);
 800a71e:	f3c3 0040 	ubfx	r0, r3, #1, #1
 800a722:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 800a726:	f882 00bc 	strb.w	r0, [r2, #188]	@ 0xbc
    DIGITAL_OUT(Z_DIRECTION_PORT, Z_DIRECTION_PIN, dir_outbits.z);
 800a72a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a72e:	f881 308c 	strb.w	r3, [r1, #140]	@ 0x8c
        pulse_length = (uint32_t)(10.0f * (settings->steppers.pulse_microseconds - STEP_PULSE_LATENCY)) - 1;
 800a732:	edd5 7a3c 	vldr	s15, [r5, #240]	@ 0xf0
 800a736:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a73a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a73e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800a742:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a74a:	ee17 3a90 	vmov	r3, s15
 800a74e:	3b01      	subs	r3, #1
 800a750:	4aa2      	ldr	r2, [pc, #648]	@ (800a9dc <settings_changed+0x30c>)
 800a752:	6013      	str	r3, [r2, #0]
        if(hal.driver_cap.step_pulse_delay && settings->steppers.pulse_delay_microseconds > 0.0f) {
 800a754:	4aa2      	ldr	r2, [pc, #648]	@ (800a9e0 <settings_changed+0x310>)
 800a756:	f892 21d8 	ldrb.w	r2, [r2, #472]	@ 0x1d8
 800a75a:	f012 0f02 	tst.w	r2, #2
 800a75e:	d025      	beq.n	800a7ac <settings_changed+0xdc>
 800a760:	edd5 7a3d 	vldr	s15, [r5, #244]	@ 0xf4
 800a764:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a76c:	dd1e      	ble.n	800a7ac <settings_changed+0xdc>
            pulse_delay = (uint32_t)(10.0f * (settings->steppers.pulse_delay_microseconds - 1.0f));
 800a76e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a772:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a776:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800a77a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a77e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a782:	ee17 2a90 	vmov	r2, s15
 800a786:	4997      	ldr	r1, [pc, #604]	@ (800a9e4 <settings_changed+0x314>)
 800a788:	edc1 7a00 	vstr	s15, [r1]
            if(pulse_delay < 2)
 800a78c:	2a01      	cmp	r2, #1
 800a78e:	d905      	bls.n	800a79c <settings_changed+0xcc>
            else if(pulse_delay == pulse_length)
 800a790:	4293      	cmp	r3, r2
 800a792:	d106      	bne.n	800a7a2 <settings_changed+0xd2>
                pulse_delay++;
 800a794:	3201      	adds	r2, #1
 800a796:	4993      	ldr	r1, [pc, #588]	@ (800a9e4 <settings_changed+0x314>)
 800a798:	600a      	str	r2, [r1, #0]
 800a79a:	e002      	b.n	800a7a2 <settings_changed+0xd2>
                pulse_delay = 2;
 800a79c:	460a      	mov	r2, r1
 800a79e:	2102      	movs	r1, #2
 800a7a0:	6011      	str	r1, [r2, #0]
            hal.stepper.pulse_start = &stepperPulseStartDelayed;
 800a7a2:	4a8f      	ldr	r2, [pc, #572]	@ (800a9e0 <settings_changed+0x310>)
 800a7a4:	4990      	ldr	r1, [pc, #576]	@ (800a9e8 <settings_changed+0x318>)
 800a7a6:	f8c2 1094 	str.w	r1, [r2, #148]	@ 0x94
 800a7aa:	e006      	b.n	800a7ba <settings_changed+0xea>
            pulse_delay = 0;
 800a7ac:	4a8d      	ldr	r2, [pc, #564]	@ (800a9e4 <settings_changed+0x314>)
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	6011      	str	r1, [r2, #0]
            hal.stepper.pulse_start = &stepperPulseStart;
 800a7b2:	4a8b      	ldr	r2, [pc, #556]	@ (800a9e0 <settings_changed+0x310>)
 800a7b4:	498d      	ldr	r1, [pc, #564]	@ (800a9ec <settings_changed+0x31c>)
 800a7b6:	f8c2 1094 	str.w	r1, [r2, #148]	@ 0x94
        PULSE_TIMER->ARR = pulse_length;
 800a7ba:	4a8d      	ldr	r2, [pc, #564]	@ (800a9f0 <settings_changed+0x320>)
 800a7bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        PULSE_TIMER->EGR = TIM_EGR_UG;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	6153      	str	r3, [r2, #20]
        HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800a7c2:	2028      	movs	r0, #40	@ 0x28
 800a7c4:	f7fe fc4a 	bl	800905c <HAL_NVIC_DisableIRQ>
        control_fei.mask = settings->control_disable_pullup.mask ^ settings->control_invert.mask;
 800a7c8:	f8b5 706e 	ldrh.w	r7, [r5, #110]	@ 0x6e
 800a7cc:	f8b5 306c 	ldrh.w	r3, [r5, #108]	@ 0x6c
 800a7d0:	405f      	eors	r7, r3
        limit_fei.mask = settings->limits.disable_pullup.mask ^ settings->limits.invert.mask;
 800a7d2:	f895 6126 	ldrb.w	r6, [r5, #294]	@ 0x126
 800a7d6:	f895 3125 	ldrb.w	r3, [r5, #293]	@ 0x125
 800a7da:	405e      	eors	r6, r3
        uint32_t i = sizeof(inputpin) / sizeof(input_signal_t);
 800a7dc:	2403      	movs	r4, #3
 800a7de:	e224      	b.n	800ac2a <settings_changed+0x55a>
            switch(input->id) {
 800a7e0:	2b99      	cmp	r3, #153	@ 0x99
 800a7e2:	d12b      	bne.n	800a83c <settings_changed+0x16c>
                    input->mode.pull_mode = true;
 800a7e4:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a7e8:	4b82      	ldr	r3, [pc, #520]	@ (800a9f4 <settings_changed+0x324>)
 800a7ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a7ee:	7919      	ldrb	r1, [r3, #4]
 800a7f0:	2001      	movs	r0, #1
 800a7f2:	f360 01c4 	bfi	r1, r0, #3, #2
 800a7f6:	7119      	strb	r1, [r3, #4]
                    input->mode.irq_mode = IRQ_Mode_Falling;
 800a7f8:	8899      	ldrh	r1, [r3, #4]
 800a7fa:	2002      	movs	r0, #2
 800a7fc:	f360 1149 	bfi	r1, r0, #5, #5
 800a800:	8099      	strh	r1, [r3, #4]
                    break;
 800a802:	e01b      	b.n	800a83c <settings_changed+0x16c>
                    input->mode.pull_mode = settings->control_disable_pullup.reset ? PullMode_None : PullMode_Up;
 800a804:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a808:	f083 0301 	eor.w	r3, r3, #1
 800a80c:	f003 0301 	and.w	r3, r3, #1
 800a810:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a814:	4977      	ldr	r1, [pc, #476]	@ (800a9f4 <settings_changed+0x324>)
 800a816:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a81a:	7908      	ldrb	r0, [r1, #4]
 800a81c:	f363 00c4 	bfi	r0, r3, #3, #2
 800a820:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.reset ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a822:	f017 0f01 	tst.w	r7, #1
 800a826:	d030      	beq.n	800a88a <settings_changed+0x1ba>
 800a828:	2002      	movs	r0, #2
 800a82a:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a82e:	4b71      	ldr	r3, [pc, #452]	@ (800a9f4 <settings_changed+0x324>)
 800a830:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a834:	8899      	ldrh	r1, [r3, #4]
 800a836:	f360 1149 	bfi	r1, r0, #5, #5
 800a83a:	8099      	strh	r1, [r3, #4]
            if(input->group == PinGroup_AuxInput) {
 800a83c:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800a840:	f000 818a 	beq.w	800ab58 <settings_changed+0x488>
            GPIO_Init.Pin = input->bit;
 800a844:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a848:	4b6a      	ldr	r3, [pc, #424]	@ (800a9f4 <settings_changed+0x324>)
 800a84a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a84e:	689a      	ldr	r2, [r3, #8]
 800a850:	9201      	str	r2, [sp, #4]
            GPIO_Init.Pull = input->mode.pull_mode == PullMode_Up ? GPIO_PULLUP : GPIO_NOPULL;
 800a852:	791b      	ldrb	r3, [r3, #4]
 800a854:	f003 0318 	and.w	r3, r3, #24
 800a858:	2b08      	cmp	r3, #8
 800a85a:	f000 81d6 	beq.w	800ac0a <settings_changed+0x53a>
 800a85e:	2300      	movs	r3, #0
 800a860:	9303      	str	r3, [sp, #12]
            switch(input->mode.irq_mode) {
 800a862:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a866:	4b63      	ldr	r3, [pc, #396]	@ (800a9f4 <settings_changed+0x324>)
 800a868:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a86c:	889b      	ldrh	r3, [r3, #4]
 800a86e:	f3c3 1344 	ubfx	r3, r3, #5, #5
 800a872:	2b02      	cmp	r3, #2
 800a874:	f000 8262 	beq.w	800ad3c <settings_changed+0x66c>
 800a878:	2b04      	cmp	r3, #4
 800a87a:	f000 8262 	beq.w	800ad42 <settings_changed+0x672>
 800a87e:	2b01      	cmp	r3, #1
 800a880:	f000 81c5 	beq.w	800ac0e <settings_changed+0x53e>
                    GPIO_Init.Mode = GPIO_MODE_INPUT;
 800a884:	2300      	movs	r3, #0
 800a886:	9302      	str	r3, [sp, #8]
                    break;
 800a888:	e1c3      	b.n	800ac12 <settings_changed+0x542>
                    input->mode.irq_mode = control_fei.reset ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a88a:	2001      	movs	r0, #1
 800a88c:	e7cd      	b.n	800a82a <settings_changed+0x15a>
                    input->mode.pull_mode = settings->control_disable_pullup.e_stop ? PullMode_None : PullMode_Up;
 800a88e:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a892:	099b      	lsrs	r3, r3, #6
 800a894:	f083 0301 	eor.w	r3, r3, #1
 800a898:	f003 0301 	and.w	r3, r3, #1
 800a89c:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a8a0:	4954      	ldr	r1, [pc, #336]	@ (800a9f4 <settings_changed+0x324>)
 800a8a2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a8a6:	7908      	ldrb	r0, [r1, #4]
 800a8a8:	f363 00c4 	bfi	r0, r3, #3, #2
 800a8ac:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.e_stop ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a8ae:	f017 0f40 	tst.w	r7, #64	@ 0x40
 800a8b2:	d00a      	beq.n	800a8ca <settings_changed+0x1fa>
 800a8b4:	2002      	movs	r0, #2
 800a8b6:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a8ba:	4b4e      	ldr	r3, [pc, #312]	@ (800a9f4 <settings_changed+0x324>)
 800a8bc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a8c0:	8899      	ldrh	r1, [r3, #4]
 800a8c2:	f360 1149 	bfi	r1, r0, #5, #5
 800a8c6:	8099      	strh	r1, [r3, #4]
                    break;
 800a8c8:	e7b8      	b.n	800a83c <settings_changed+0x16c>
                    input->mode.irq_mode = control_fei.e_stop ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a8ca:	2001      	movs	r0, #1
 800a8cc:	e7f3      	b.n	800a8b6 <settings_changed+0x1e6>
                    input->mode.pull_mode = settings->control_disable_pullup.feed_hold ? PullMode_None : PullMode_Up;
 800a8ce:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a8d2:	085b      	lsrs	r3, r3, #1
 800a8d4:	f083 0301 	eor.w	r3, r3, #1
 800a8d8:	f003 0301 	and.w	r3, r3, #1
 800a8dc:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a8e0:	4944      	ldr	r1, [pc, #272]	@ (800a9f4 <settings_changed+0x324>)
 800a8e2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a8e6:	7908      	ldrb	r0, [r1, #4]
 800a8e8:	f363 00c4 	bfi	r0, r3, #3, #2
 800a8ec:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.feed_hold ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a8ee:	f017 0f02 	tst.w	r7, #2
 800a8f2:	d00a      	beq.n	800a90a <settings_changed+0x23a>
 800a8f4:	2002      	movs	r0, #2
 800a8f6:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a8fa:	4b3e      	ldr	r3, [pc, #248]	@ (800a9f4 <settings_changed+0x324>)
 800a8fc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a900:	8899      	ldrh	r1, [r3, #4]
 800a902:	f360 1149 	bfi	r1, r0, #5, #5
 800a906:	8099      	strh	r1, [r3, #4]
                    break;
 800a908:	e798      	b.n	800a83c <settings_changed+0x16c>
                    input->mode.irq_mode = control_fei.feed_hold ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a90a:	2001      	movs	r0, #1
 800a90c:	e7f3      	b.n	800a8f6 <settings_changed+0x226>
                    input->mode.pull_mode = settings->control_disable_pullup.cycle_start ? PullMode_None : PullMode_Up;
 800a90e:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a912:	089b      	lsrs	r3, r3, #2
 800a914:	f083 0301 	eor.w	r3, r3, #1
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a920:	4934      	ldr	r1, [pc, #208]	@ (800a9f4 <settings_changed+0x324>)
 800a922:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a926:	7908      	ldrb	r0, [r1, #4]
 800a928:	f363 00c4 	bfi	r0, r3, #3, #2
 800a92c:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.cycle_start ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a92e:	f017 0f04 	tst.w	r7, #4
 800a932:	d00a      	beq.n	800a94a <settings_changed+0x27a>
 800a934:	2002      	movs	r0, #2
 800a936:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a93a:	4b2e      	ldr	r3, [pc, #184]	@ (800a9f4 <settings_changed+0x324>)
 800a93c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a940:	8899      	ldrh	r1, [r3, #4]
 800a942:	f360 1149 	bfi	r1, r0, #5, #5
 800a946:	8099      	strh	r1, [r3, #4]
                    break;
 800a948:	e778      	b.n	800a83c <settings_changed+0x16c>
                    input->mode.irq_mode = control_fei.cycle_start ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a94a:	2001      	movs	r0, #1
 800a94c:	e7f3      	b.n	800a936 <settings_changed+0x266>
                    input->mode.pull_mode = settings->control_disable_pullup.safety_door_ajar ? PullMode_None : PullMode_Up;
 800a94e:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a952:	08db      	lsrs	r3, r3, #3
 800a954:	f083 0301 	eor.w	r3, r3, #1
 800a958:	f003 0301 	and.w	r3, r3, #1
 800a95c:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a960:	4924      	ldr	r1, [pc, #144]	@ (800a9f4 <settings_changed+0x324>)
 800a962:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a966:	7908      	ldrb	r0, [r1, #4]
 800a968:	f363 00c4 	bfi	r0, r3, #3, #2
 800a96c:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.safety_door_ajar ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a96e:	f017 0f08 	tst.w	r7, #8
 800a972:	d00a      	beq.n	800a98a <settings_changed+0x2ba>
 800a974:	2002      	movs	r0, #2
 800a976:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a97a:	4b1e      	ldr	r3, [pc, #120]	@ (800a9f4 <settings_changed+0x324>)
 800a97c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a980:	8899      	ldrh	r1, [r3, #4]
 800a982:	f360 1149 	bfi	r1, r0, #5, #5
 800a986:	8099      	strh	r1, [r3, #4]
                    break;
 800a988:	e758      	b.n	800a83c <settings_changed+0x16c>
                    input->mode.irq_mode = control_fei.safety_door_ajar ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a98a:	2001      	movs	r0, #1
 800a98c:	e7f3      	b.n	800a976 <settings_changed+0x2a6>
                    input->mode.pull_mode = settings->limits.disable_pullup.x ? PullMode_None : PullMode_Up;
 800a98e:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a992:	f083 0301 	eor.w	r3, r3, #1
 800a996:	f003 0301 	and.w	r3, r3, #1
 800a99a:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a99e:	4915      	ldr	r1, [pc, #84]	@ (800a9f4 <settings_changed+0x324>)
 800a9a0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a9a4:	7908      	ldrb	r0, [r1, #4]
 800a9a6:	f363 00c4 	bfi	r0, r3, #3, #2
 800a9aa:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.x ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a9ac:	f016 0f01 	tst.w	r6, #1
 800a9b0:	d00a      	beq.n	800a9c8 <settings_changed+0x2f8>
 800a9b2:	2002      	movs	r0, #2
 800a9b4:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a9b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a9f4 <settings_changed+0x324>)
 800a9ba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a9be:	8899      	ldrh	r1, [r3, #4]
 800a9c0:	f360 1149 	bfi	r1, r0, #5, #5
 800a9c4:	8099      	strh	r1, [r3, #4]
                    break;
 800a9c6:	e739      	b.n	800a83c <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.x ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a9c8:	2001      	movs	r0, #1
 800a9ca:	e7f3      	b.n	800a9b4 <settings_changed+0x2e4>
 800a9cc:	200007d0 	.word	0x200007d0
 800a9d0:	200022f4 	.word	0x200022f4
 800a9d4:	42418200 	.word	0x42418200
 800a9d8:	42420200 	.word	0x42420200
 800a9dc:	200007dc 	.word	0x200007dc
 800a9e0:	200018dc 	.word	0x200018dc
 800a9e4:	200007d8 	.word	0x200007d8
 800a9e8:	0800a291 	.word	0x0800a291
 800a9ec:	0800a219 	.word	0x0800a219
 800a9f0:	40000800 	.word	0x40000800
 800a9f4:	200000f4 	.word	0x200000f4
                    input->mode.pull_mode = settings->limits.disable_pullup.y ? PullMode_None : PullMode_Up;
 800a9f8:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a9fc:	085b      	lsrs	r3, r3, #1
 800a9fe:	f083 0301 	eor.w	r3, r3, #1
 800aa02:	f003 0301 	and.w	r3, r3, #1
 800aa06:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800aa0a:	49c8      	ldr	r1, [pc, #800]	@ (800ad2c <settings_changed+0x65c>)
 800aa0c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800aa10:	7908      	ldrb	r0, [r1, #4]
 800aa12:	f363 00c4 	bfi	r0, r3, #3, #2
 800aa16:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.y ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800aa18:	f016 0f02 	tst.w	r6, #2
 800aa1c:	d00a      	beq.n	800aa34 <settings_changed+0x364>
 800aa1e:	2002      	movs	r0, #2
 800aa20:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800aa24:	4bc1      	ldr	r3, [pc, #772]	@ (800ad2c <settings_changed+0x65c>)
 800aa26:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800aa2a:	8899      	ldrh	r1, [r3, #4]
 800aa2c:	f360 1149 	bfi	r1, r0, #5, #5
 800aa30:	8099      	strh	r1, [r3, #4]
                    break;
 800aa32:	e703      	b.n	800a83c <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.y ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800aa34:	2001      	movs	r0, #1
 800aa36:	e7f3      	b.n	800aa20 <settings_changed+0x350>
                    input->mode.pull_mode = settings->limits.disable_pullup.z ? PullMode_None : PullMode_Up;
 800aa38:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800aa3c:	089b      	lsrs	r3, r3, #2
 800aa3e:	f083 0301 	eor.w	r3, r3, #1
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800aa4a:	49b8      	ldr	r1, [pc, #736]	@ (800ad2c <settings_changed+0x65c>)
 800aa4c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800aa50:	7908      	ldrb	r0, [r1, #4]
 800aa52:	f363 00c4 	bfi	r0, r3, #3, #2
 800aa56:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.z ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800aa58:	f016 0f04 	tst.w	r6, #4
 800aa5c:	d00a      	beq.n	800aa74 <settings_changed+0x3a4>
 800aa5e:	2002      	movs	r0, #2
 800aa60:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800aa64:	4bb1      	ldr	r3, [pc, #708]	@ (800ad2c <settings_changed+0x65c>)
 800aa66:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800aa6a:	8899      	ldrh	r1, [r3, #4]
 800aa6c:	f360 1149 	bfi	r1, r0, #5, #5
 800aa70:	8099      	strh	r1, [r3, #4]
                    break;
 800aa72:	e6e3      	b.n	800a83c <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.z ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800aa74:	2001      	movs	r0, #1
 800aa76:	e7f3      	b.n	800aa60 <settings_changed+0x390>
                    input->mode.pull_mode = settings->limits.disable_pullup.a ? PullMode_None : PullMode_Up;
 800aa78:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800aa7c:	08db      	lsrs	r3, r3, #3
 800aa7e:	f083 0301 	eor.w	r3, r3, #1
 800aa82:	f003 0301 	and.w	r3, r3, #1
 800aa86:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800aa8a:	49a8      	ldr	r1, [pc, #672]	@ (800ad2c <settings_changed+0x65c>)
 800aa8c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800aa90:	7908      	ldrb	r0, [r1, #4]
 800aa92:	f363 00c4 	bfi	r0, r3, #3, #2
 800aa96:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.a ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800aa98:	f016 0f08 	tst.w	r6, #8
 800aa9c:	d00a      	beq.n	800aab4 <settings_changed+0x3e4>
 800aa9e:	2002      	movs	r0, #2
 800aaa0:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800aaa4:	4ba1      	ldr	r3, [pc, #644]	@ (800ad2c <settings_changed+0x65c>)
 800aaa6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800aaaa:	8899      	ldrh	r1, [r3, #4]
 800aaac:	f360 1149 	bfi	r1, r0, #5, #5
 800aab0:	8099      	strh	r1, [r3, #4]
                    break;
 800aab2:	e6c3      	b.n	800a83c <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.a ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800aab4:	2001      	movs	r0, #1
 800aab6:	e7f3      	b.n	800aaa0 <settings_changed+0x3d0>
                    input->mode.pull_mode = settings->limits.disable_pullup.b ? PullMode_None : PullMode_Up;
 800aab8:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800aabc:	091b      	lsrs	r3, r3, #4
 800aabe:	f083 0301 	eor.w	r3, r3, #1
 800aac2:	f003 0301 	and.w	r3, r3, #1
 800aac6:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800aaca:	4998      	ldr	r1, [pc, #608]	@ (800ad2c <settings_changed+0x65c>)
 800aacc:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800aad0:	7908      	ldrb	r0, [r1, #4]
 800aad2:	f363 00c4 	bfi	r0, r3, #3, #2
 800aad6:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.b ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800aad8:	f016 0f10 	tst.w	r6, #16
 800aadc:	d00a      	beq.n	800aaf4 <settings_changed+0x424>
 800aade:	2002      	movs	r0, #2
 800aae0:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800aae4:	4b91      	ldr	r3, [pc, #580]	@ (800ad2c <settings_changed+0x65c>)
 800aae6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800aaea:	8899      	ldrh	r1, [r3, #4]
 800aaec:	f360 1149 	bfi	r1, r0, #5, #5
 800aaf0:	8099      	strh	r1, [r3, #4]
                    break;
 800aaf2:	e6a3      	b.n	800a83c <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.b ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800aaf4:	2001      	movs	r0, #1
 800aaf6:	e7f3      	b.n	800aae0 <settings_changed+0x410>
                    input->mode.pull_mode = settings->limits.disable_pullup.c ? PullMode_None : PullMode_Up;
 800aaf8:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800aafc:	095b      	lsrs	r3, r3, #5
 800aafe:	f083 0301 	eor.w	r3, r3, #1
 800ab02:	f003 0301 	and.w	r3, r3, #1
 800ab06:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800ab0a:	4988      	ldr	r1, [pc, #544]	@ (800ad2c <settings_changed+0x65c>)
 800ab0c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ab10:	7908      	ldrb	r0, [r1, #4]
 800ab12:	f363 00c4 	bfi	r0, r3, #3, #2
 800ab16:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.c ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800ab18:	f016 0f20 	tst.w	r6, #32
 800ab1c:	d00a      	beq.n	800ab34 <settings_changed+0x464>
 800ab1e:	2002      	movs	r0, #2
 800ab20:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800ab24:	4b81      	ldr	r3, [pc, #516]	@ (800ad2c <settings_changed+0x65c>)
 800ab26:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800ab2a:	8899      	ldrh	r1, [r3, #4]
 800ab2c:	f360 1149 	bfi	r1, r0, #5, #5
 800ab30:	8099      	strh	r1, [r3, #4]
                    break;
 800ab32:	e683      	b.n	800a83c <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.c ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800ab34:	2001      	movs	r0, #1
 800ab36:	e7f3      	b.n	800ab20 <settings_changed+0x450>
                    input->mode.pull_mode = true;
 800ab38:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800ab3c:	4b7b      	ldr	r3, [pc, #492]	@ (800ad2c <settings_changed+0x65c>)
 800ab3e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800ab42:	7919      	ldrb	r1, [r3, #4]
 800ab44:	2001      	movs	r0, #1
 800ab46:	f360 01c4 	bfi	r1, r0, #3, #2
 800ab4a:	7119      	strb	r1, [r3, #4]
                    input->mode.irq_mode = IRQ_Mode_Falling;
 800ab4c:	8899      	ldrh	r1, [r3, #4]
 800ab4e:	2002      	movs	r0, #2
 800ab50:	f360 1149 	bfi	r1, r0, #5, #5
 800ab54:	8099      	strh	r1, [r3, #4]
                    break;
 800ab56:	e671      	b.n	800a83c <settings_changed+0x16c>
                if(input->cap.irq_mode != IRQ_Mode_None) {
 800ab58:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800ab5c:	4b73      	ldr	r3, [pc, #460]	@ (800ad2c <settings_changed+0x65c>)
 800ab5e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ab62:	885b      	ldrh	r3, [r3, #2]
 800ab64:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f43f ae6b 	beq.w	800a844 <settings_changed+0x174>
                    uint32_t extireg = SYSCFG->EXTICR[input->pin >> 2] & ~(0b1111 << ((input->pin & 0b11) << 2));
 800ab6e:	4613      	mov	r3, r2
 800ab70:	4a6e      	ldr	r2, [pc, #440]	@ (800ad2c <settings_changed+0x65c>)
 800ab72:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ab76:	7993      	ldrb	r3, [r2, #6]
 800ab78:	0899      	lsrs	r1, r3, #2
 800ab7a:	f101 0c02 	add.w	ip, r1, #2
 800ab7e:	486c      	ldr	r0, [pc, #432]	@ (800ad30 <settings_changed+0x660>)
 800ab80:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	f003 030c 	and.w	r3, r3, #12
 800ab8a:	f04f 0c0f 	mov.w	ip, #15
 800ab8e:	fa0c fc03 	lsl.w	ip, ip, r3
 800ab92:	ea20 000c 	bic.w	r0, r0, ip
                    extireg |= ((uint32_t)(GPIO_GET_INDEX(input->port)) << ((input->pin & 0b11) << 2));
 800ab96:	68d2      	ldr	r2, [r2, #12]
 800ab98:	f8df c19c 	ldr.w	ip, [pc, #412]	@ 800ad38 <settings_changed+0x668>
 800ab9c:	4562      	cmp	r2, ip
 800ab9e:	d01f      	beq.n	800abe0 <settings_changed+0x510>
 800aba0:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800aba4:	4562      	cmp	r2, ip
 800aba6:	d024      	beq.n	800abf2 <settings_changed+0x522>
 800aba8:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800abac:	4562      	cmp	r2, ip
 800abae:	d022      	beq.n	800abf6 <settings_changed+0x526>
 800abb0:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800abb4:	4562      	cmp	r2, ip
 800abb6:	d020      	beq.n	800abfa <settings_changed+0x52a>
 800abb8:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800abbc:	4562      	cmp	r2, ip
 800abbe:	d01e      	beq.n	800abfe <settings_changed+0x52e>
 800abc0:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800abc4:	4562      	cmp	r2, ip
 800abc6:	d01c      	beq.n	800ac02 <settings_changed+0x532>
 800abc8:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800abcc:	4562      	cmp	r2, ip
 800abce:	d01a      	beq.n	800ac06 <settings_changed+0x536>
 800abd0:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800abd4:	4562      	cmp	r2, ip
 800abd6:	d001      	beq.n	800abdc <settings_changed+0x50c>
 800abd8:	2208      	movs	r2, #8
 800abda:	e002      	b.n	800abe2 <settings_changed+0x512>
 800abdc:	2207      	movs	r2, #7
 800abde:	e000      	b.n	800abe2 <settings_changed+0x512>
 800abe0:	2200      	movs	r2, #0
 800abe2:	fa02 f303 	lsl.w	r3, r2, r3
 800abe6:	4303      	orrs	r3, r0
                    SYSCFG->EXTICR[input->pin >> 2] = extireg;
 800abe8:	1c8a      	adds	r2, r1, #2
 800abea:	4951      	ldr	r1, [pc, #324]	@ (800ad30 <settings_changed+0x660>)
 800abec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800abf0:	e628      	b.n	800a844 <settings_changed+0x174>
                    extireg |= ((uint32_t)(GPIO_GET_INDEX(input->port)) << ((input->pin & 0b11) << 2));
 800abf2:	2201      	movs	r2, #1
 800abf4:	e7f5      	b.n	800abe2 <settings_changed+0x512>
 800abf6:	2202      	movs	r2, #2
 800abf8:	e7f3      	b.n	800abe2 <settings_changed+0x512>
 800abfa:	2203      	movs	r2, #3
 800abfc:	e7f1      	b.n	800abe2 <settings_changed+0x512>
 800abfe:	2204      	movs	r2, #4
 800ac00:	e7ef      	b.n	800abe2 <settings_changed+0x512>
 800ac02:	2205      	movs	r2, #5
 800ac04:	e7ed      	b.n	800abe2 <settings_changed+0x512>
 800ac06:	2206      	movs	r2, #6
 800ac08:	e7eb      	b.n	800abe2 <settings_changed+0x512>
            GPIO_Init.Pull = input->mode.pull_mode == PullMode_Up ? GPIO_PULLUP : GPIO_NOPULL;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e628      	b.n	800a860 <settings_changed+0x190>
                    GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 800ac0e:	4b49      	ldr	r3, [pc, #292]	@ (800ad34 <settings_changed+0x664>)
 800ac10:	9302      	str	r3, [sp, #8]
            HAL_GPIO_Init(input->port, &GPIO_Init);
 800ac12:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800ac16:	4b45      	ldr	r3, [pc, #276]	@ (800ad2c <settings_changed+0x65c>)
 800ac18:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ac1c:	a901      	add	r1, sp, #4
 800ac1e:	68d8      	ldr	r0, [r3, #12]
 800ac20:	f7fe fc08 	bl	8009434 <HAL_GPIO_Init>
        } while(i);
 800ac24:	2c00      	cmp	r4, #0
 800ac26:	f000 808f 	beq.w	800ad48 <settings_changed+0x678>
            input = &inputpin[--i];
 800ac2a:	3c01      	subs	r4, #1
            if(input->group == PinGroup_AuxInputAnalog)
 800ac2c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800ac30:	4b3e      	ldr	r3, [pc, #248]	@ (800ad2c <settings_changed+0x65c>)
 800ac32:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ac36:	691a      	ldr	r2, [r3, #16]
 800ac38:	2a0a      	cmp	r2, #10
 800ac3a:	d0f3      	beq.n	800ac24 <settings_changed+0x554>
            if(input->group != PinGroup_AuxInput)
 800ac3c:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800ac40:	d008      	beq.n	800ac54 <settings_changed+0x584>
                input->mode.irq_mode = IRQ_Mode_None;
 800ac42:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800ac46:	4b39      	ldr	r3, [pc, #228]	@ (800ad2c <settings_changed+0x65c>)
 800ac48:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800ac4c:	8899      	ldrh	r1, [r3, #4]
 800ac4e:	f36f 1149 	bfc	r1, #5, #5
 800ac52:	8099      	strh	r1, [r3, #4]
            switch(input->id) {
 800ac54:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800ac58:	4934      	ldr	r1, [pc, #208]	@ (800ad2c <settings_changed+0x65c>)
 800ac5a:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 800ac5e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac60:	f63f adbe 	bhi.w	800a7e0 <settings_changed+0x110>
 800ac64:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac66:	f63f ade9 	bhi.w	800a83c <settings_changed+0x16c>
 800ac6a:	a101      	add	r1, pc, #4	@ (adr r1, 800ac70 <settings_changed+0x5a0>)
 800ac6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac70:	0800a805 	.word	0x0800a805
 800ac74:	0800a8cf 	.word	0x0800a8cf
 800ac78:	0800a90f 	.word	0x0800a90f
 800ac7c:	0800a94f 	.word	0x0800a94f
 800ac80:	0800a83d 	.word	0x0800a83d
 800ac84:	0800a83d 	.word	0x0800a83d
 800ac88:	0800a88f 	.word	0x0800a88f
 800ac8c:	0800a83d 	.word	0x0800a83d
 800ac90:	0800a83d 	.word	0x0800a83d
 800ac94:	0800a83d 	.word	0x0800a83d
 800ac98:	0800a83d 	.word	0x0800a83d
 800ac9c:	0800a83d 	.word	0x0800a83d
 800aca0:	0800a83d 	.word	0x0800a83d
 800aca4:	0800a83d 	.word	0x0800a83d
 800aca8:	0800a83d 	.word	0x0800a83d
 800acac:	0800a83d 	.word	0x0800a83d
 800acb0:	0800a98f 	.word	0x0800a98f
 800acb4:	0800a98f 	.word	0x0800a98f
 800acb8:	0800a98f 	.word	0x0800a98f
 800acbc:	0800a83d 	.word	0x0800a83d
 800acc0:	0800a83d 	.word	0x0800a83d
 800acc4:	0800a9f9 	.word	0x0800a9f9
 800acc8:	0800a9f9 	.word	0x0800a9f9
 800accc:	0800a9f9 	.word	0x0800a9f9
 800acd0:	0800a83d 	.word	0x0800a83d
 800acd4:	0800a83d 	.word	0x0800a83d
 800acd8:	0800aa39 	.word	0x0800aa39
 800acdc:	0800aa39 	.word	0x0800aa39
 800ace0:	0800aa39 	.word	0x0800aa39
 800ace4:	0800a83d 	.word	0x0800a83d
 800ace8:	0800a83d 	.word	0x0800a83d
 800acec:	0800aa79 	.word	0x0800aa79
 800acf0:	0800aa79 	.word	0x0800aa79
 800acf4:	0800a83d 	.word	0x0800a83d
 800acf8:	0800aab9 	.word	0x0800aab9
 800acfc:	0800aab9 	.word	0x0800aab9
 800ad00:	0800a83d 	.word	0x0800a83d
 800ad04:	0800aaf9 	.word	0x0800aaf9
 800ad08:	0800aaf9 	.word	0x0800aaf9
 800ad0c:	0800a83d 	.word	0x0800a83d
 800ad10:	0800a83d 	.word	0x0800a83d
 800ad14:	0800a83d 	.word	0x0800a83d
 800ad18:	0800a83d 	.word	0x0800a83d
 800ad1c:	0800a83d 	.word	0x0800a83d
 800ad20:	0800a83d 	.word	0x0800a83d
 800ad24:	0800a83d 	.word	0x0800a83d
 800ad28:	0800ab39 	.word	0x0800ab39
 800ad2c:	200000f4 	.word	0x200000f4
 800ad30:	40013800 	.word	0x40013800
 800ad34:	10110000 	.word	0x10110000
 800ad38:	40020000 	.word	0x40020000
                    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
 800ad3c:	4b33      	ldr	r3, [pc, #204]	@ (800ae0c <settings_changed+0x73c>)
 800ad3e:	9302      	str	r3, [sp, #8]
                    break;
 800ad40:	e767      	b.n	800ac12 <settings_changed+0x542>
                    GPIO_Init.Mode = GPIO_MODE_IT_RISING_FALLING;
 800ad42:	4b33      	ldr	r3, [pc, #204]	@ (800ae10 <settings_changed+0x740>)
 800ad44:	9302      	str	r3, [sp, #8]
                    break;
 800ad46:	e764      	b.n	800ac12 <settings_changed+0x542>
        uint32_t irq_mask = DRIVER_IRQMASK|aux_irq;
 800ad48:	4b32      	ldr	r3, [pc, #200]	@ (800ae14 <settings_changed+0x744>)
 800ad4a:	681c      	ldr	r4, [r3, #0]
 800ad4c:	f444 52c0 	orr.w	r2, r4, #6144	@ 0x1800
        __HAL_GPIO_EXTI_CLEAR_IT(irq_mask);
 800ad50:	4b31      	ldr	r3, [pc, #196]	@ (800ae18 <settings_changed+0x748>)
 800ad52:	615a      	str	r2, [r3, #20]
        if(irq_mask & (1<<0)) {
 800ad54:	f014 0f01 	tst.w	r4, #1
 800ad58:	d121      	bne.n	800ad9e <settings_changed+0x6ce>
        if(irq_mask & (1<<1)) {
 800ad5a:	f014 0f02 	tst.w	r4, #2
 800ad5e:	d127      	bne.n	800adb0 <settings_changed+0x6e0>
        if(irq_mask & (1<<2)) {
 800ad60:	f014 0f04 	tst.w	r4, #4
 800ad64:	d12d      	bne.n	800adc2 <settings_changed+0x6f2>
        if(irq_mask & (1<<3)) {
 800ad66:	f014 0f08 	tst.w	r4, #8
 800ad6a:	d133      	bne.n	800add4 <settings_changed+0x704>
        if(irq_mask & (1<<4)) {
 800ad6c:	f014 0f10 	tst.w	r4, #16
 800ad70:	d139      	bne.n	800ade6 <settings_changed+0x716>
        if(irq_mask & 0x03E0) {
 800ad72:	f414 7f78 	tst.w	r4, #992	@ 0x3e0
 800ad76:	d13f      	bne.n	800adf8 <settings_changed+0x728>
            HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800ad78:	2200      	movs	r2, #0
 800ad7a:	2102      	movs	r1, #2
 800ad7c:	2028      	movs	r0, #40	@ 0x28
 800ad7e:	f7fe f94f 	bl	8009020 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800ad82:	2028      	movs	r0, #40	@ 0x28
 800ad84:	f7fe f95c 	bl	8009040 <HAL_NVIC_EnableIRQ>
        hal.limits.enable(settings->limits.flags.hard_enabled, (axes_signals_t){0});
 800ad88:	4b24      	ldr	r3, [pc, #144]	@ (800ae1c <settings_changed+0x74c>)
 800ad8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad8c:	f895 0124 	ldrb.w	r0, [r5, #292]	@ 0x124
 800ad90:	f04f 0100 	mov.w	r1, #0
 800ad94:	f000 0001 	and.w	r0, r0, #1
 800ad98:	4798      	blx	r3
}
 800ad9a:	b007      	add	sp, #28
 800ad9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800ad9e:	2200      	movs	r2, #0
 800ada0:	2102      	movs	r1, #2
 800ada2:	2006      	movs	r0, #6
 800ada4:	f7fe f93c 	bl	8009020 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800ada8:	2006      	movs	r0, #6
 800adaa:	f7fe f949 	bl	8009040 <HAL_NVIC_EnableIRQ>
 800adae:	e7d4      	b.n	800ad5a <settings_changed+0x68a>
            HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 800adb0:	2200      	movs	r2, #0
 800adb2:	2102      	movs	r1, #2
 800adb4:	2007      	movs	r0, #7
 800adb6:	f7fe f933 	bl	8009020 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800adba:	2007      	movs	r0, #7
 800adbc:	f7fe f940 	bl	8009040 <HAL_NVIC_EnableIRQ>
 800adc0:	e7ce      	b.n	800ad60 <settings_changed+0x690>
            HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 800adc2:	2200      	movs	r2, #0
 800adc4:	2102      	movs	r1, #2
 800adc6:	2008      	movs	r0, #8
 800adc8:	f7fe f92a 	bl	8009020 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800adcc:	2008      	movs	r0, #8
 800adce:	f7fe f937 	bl	8009040 <HAL_NVIC_EnableIRQ>
 800add2:	e7c8      	b.n	800ad66 <settings_changed+0x696>
            HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 800add4:	2200      	movs	r2, #0
 800add6:	2102      	movs	r1, #2
 800add8:	2009      	movs	r0, #9
 800adda:	f7fe f921 	bl	8009020 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800adde:	2009      	movs	r0, #9
 800ade0:	f7fe f92e 	bl	8009040 <HAL_NVIC_EnableIRQ>
 800ade4:	e7c2      	b.n	800ad6c <settings_changed+0x69c>
            HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 800ade6:	2200      	movs	r2, #0
 800ade8:	2102      	movs	r1, #2
 800adea:	200a      	movs	r0, #10
 800adec:	f7fe f918 	bl	8009020 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800adf0:	200a      	movs	r0, #10
 800adf2:	f7fe f925 	bl	8009040 <HAL_NVIC_EnableIRQ>
 800adf6:	e7bc      	b.n	800ad72 <settings_changed+0x6a2>
            HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800adf8:	2200      	movs	r2, #0
 800adfa:	2102      	movs	r1, #2
 800adfc:	2017      	movs	r0, #23
 800adfe:	f7fe f90f 	bl	8009020 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800ae02:	2017      	movs	r0, #23
 800ae04:	f7fe f91c 	bl	8009040 <HAL_NVIC_EnableIRQ>
 800ae08:	e7b6      	b.n	800ad78 <settings_changed+0x6a8>
 800ae0a:	4770      	bx	lr
 800ae0c:	10210000 	.word	0x10210000
 800ae10:	10310000 	.word	0x10310000
 800ae14:	200007d4 	.word	0x200007d4
 800ae18:	40013c00 	.word	0x40013c00
 800ae1c:	200018dc 	.word	0x200018dc

0800ae20 <registerPeriphPin>:
{
 800ae20:	b510      	push	{r4, lr}
 800ae22:	4604      	mov	r4, r0
    periph_signal_t *add_pin = malloc(sizeof(periph_signal_t));
 800ae24:	201c      	movs	r0, #28
 800ae26:	f017 ffb7 	bl	8022d98 <malloc>
    if(!add_pin)
 800ae2a:	b1c0      	cbz	r0, 800ae5e <registerPeriphPin+0x3e>
 800ae2c:	4602      	mov	r2, r0
    memcpy(&add_pin->pin, pin, sizeof(periph_pin_t));
 800ae2e:	6821      	ldr	r1, [r4, #0]
 800ae30:	6863      	ldr	r3, [r4, #4]
 800ae32:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800ae36:	68e0      	ldr	r0, [r4, #12]
 800ae38:	6011      	str	r1, [r2, #0]
 800ae3a:	6053      	str	r3, [r2, #4]
 800ae3c:	f8c2 c008 	str.w	ip, [r2, #8]
 800ae40:	60d0      	str	r0, [r2, #12]
 800ae42:	6921      	ldr	r1, [r4, #16]
 800ae44:	6963      	ldr	r3, [r4, #20]
 800ae46:	6111      	str	r1, [r2, #16]
 800ae48:	6153      	str	r3, [r2, #20]
    add_pin->next = NULL;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	6193      	str	r3, [r2, #24]
    if(periph_pins == NULL) {
 800ae4e:	4b06      	ldr	r3, [pc, #24]	@ (800ae68 <registerPeriphPin+0x48>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	b12b      	cbz	r3, 800ae60 <registerPeriphPin+0x40>
        while(last->next)
 800ae54:	4619      	mov	r1, r3
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1fb      	bne.n	800ae54 <registerPeriphPin+0x34>
        last->next = add_pin;
 800ae5c:	618a      	str	r2, [r1, #24]
}
 800ae5e:	bd10      	pop	{r4, pc}
        periph_pins = add_pin;
 800ae60:	4b01      	ldr	r3, [pc, #4]	@ (800ae68 <registerPeriphPin+0x48>)
 800ae62:	601a      	str	r2, [r3, #0]
 800ae64:	e7fb      	b.n	800ae5e <registerPeriphPin+0x3e>
 800ae66:	bf00      	nop
 800ae68:	200007e8 	.word	0x200007e8

0800ae6c <driver_setup>:
#endif // ETHERNET_ENABLE

// Initializes MCU peripherals for grblHAL use

static bool driver_setup (settings_t *settings)
{
 800ae6c:	b570      	push	{r4, r5, r6, lr}
 800ae6e:	b08e      	sub	sp, #56	@ 0x38
 800ae70:	4605      	mov	r5, r0
    uint32_t latency;
    RCC_ClkInitTypeDef clock_cfg;

    HAL_RCC_GetClockConfig(&clock_cfg, &latency);
 800ae72:	a90d      	add	r1, sp, #52	@ 0x34
 800ae74:	a808      	add	r0, sp, #32
 800ae76:	f7fe feff 	bl	8009c78 <HAL_RCC_GetClockConfig>

    GPIO_InitTypeDef GPIO_Init = {
 800ae7a:	2400      	movs	r4, #0
 800ae7c:	9403      	str	r4, [sp, #12]
 800ae7e:	9404      	str	r4, [sp, #16]
 800ae80:	9405      	str	r4, [sp, #20]
 800ae82:	9406      	str	r4, [sp, #24]
 800ae84:	9407      	str	r4, [sp, #28]
 800ae86:	2301      	movs	r3, #1
 800ae88:	9304      	str	r3, [sp, #16]
 800ae8a:	2302      	movs	r3, #2
 800ae8c:	9306      	str	r3, [sp, #24]
     *************************/

    uint32_t i;

    // Switch on stepper driver power before enabling other output pins
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800ae8e:	e013      	b.n	800aeb8 <driver_setup+0x4c>
        if(outputpin[i].group == PinGroup_StepperPower) {
            GPIO_Init.Pin = 1 << outputpin[i].pin;
            GPIO_Init.Mode = outputpin[i].mode.open_drain ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800ae90:	2301      	movs	r3, #1
 800ae92:	9304      	str	r3, [sp, #16]
            HAL_GPIO_Init(outputpin[i].port, &GPIO_Init);
 800ae94:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800ae98:	4e6d      	ldr	r6, [pc, #436]	@ (800b050 <driver_setup+0x1e4>)
 800ae9a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800ae9e:	a903      	add	r1, sp, #12
 800aea0:	6870      	ldr	r0, [r6, #4]
 800aea2:	f7fe fac7 	bl	8009434 <HAL_GPIO_Init>
            DIGITAL_OUT(outputpin[i].port, outputpin[i].pin, 1);
 800aea6:	6872      	ldr	r2, [r6, #4]
 800aea8:	4b6a      	ldr	r3, [pc, #424]	@ (800b054 <driver_setup+0x1e8>)
 800aeaa:	4413      	add	r3, r2
 800aeac:	015b      	lsls	r3, r3, #5
 800aeae:	7a32      	ldrb	r2, [r6, #8]
 800aeb0:	2101      	movs	r1, #1
 800aeb2:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800aeb6:	3401      	adds	r4, #1
 800aeb8:	2c07      	cmp	r4, #7
 800aeba:	d814      	bhi.n	800aee6 <driver_setup+0x7a>
        if(outputpin[i].group == PinGroup_StepperPower) {
 800aebc:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800aec0:	4b63      	ldr	r3, [pc, #396]	@ (800b050 <driver_setup+0x1e4>)
 800aec2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	2b05      	cmp	r3, #5
 800aeca:	d1f4      	bne.n	800aeb6 <driver_setup+0x4a>
            GPIO_Init.Pin = 1 << outputpin[i].pin;
 800aecc:	4b60      	ldr	r3, [pc, #384]	@ (800b050 <driver_setup+0x1e4>)
 800aece:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800aed2:	7a19      	ldrb	r1, [r3, #8]
 800aed4:	2201      	movs	r2, #1
 800aed6:	408a      	lsls	r2, r1
 800aed8:	9203      	str	r2, [sp, #12]
            GPIO_Init.Mode = outputpin[i].mode.open_drain ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800aeda:	7c1b      	ldrb	r3, [r3, #16]
 800aedc:	f013 0f04 	tst.w	r3, #4
 800aee0:	d0d6      	beq.n	800ae90 <driver_setup+0x24>
 800aee2:	2311      	movs	r3, #17
 800aee4:	e7d5      	b.n	800ae92 <driver_setup+0x26>
        }
    }

    hal.delay_ms(100, NULL);
 800aee6:	4b5c      	ldr	r3, [pc, #368]	@ (800b058 <driver_setup+0x1ec>)
 800aee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeea:	2100      	movs	r1, #0
 800aeec:	2064      	movs	r0, #100	@ 0x64
 800aeee:	4798      	blx	r3

    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800aef0:	2400      	movs	r4, #0
 800aef2:	e014      	b.n	800af1e <driver_setup+0xb2>
              outputpin[i].group == PinGroup_AuxOutputAnalog ||
               outputpin[i].id == Output_SpindlePWM ||
                outputpin[i].id == Output_Spindle1PWM)) {

            GPIO_Init.Pin = 1 << outputpin[i].pin;
            GPIO_Init.Mode = outputpin[i].mode.open_drain ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800aef4:	2001      	movs	r0, #1
 800aef6:	e033      	b.n	800af60 <driver_setup+0xf4>

            if(outputpin[i].group == PinGroup_MotorChipSelect ||
                outputpin[i].group == PinGroup_MotorUART ||
                 outputpin[i].id == Output_SPICS ||
                  outputpin[i].group == PinGroup_StepperEnable)
                outputpin[i].port->ODR |= GPIO_Init.Pin;
 800aef8:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800aefc:	4b54      	ldr	r3, [pc, #336]	@ (800b050 <driver_setup+0x1e4>)
 800aefe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	695a      	ldr	r2, [r3, #20]
 800af06:	4311      	orrs	r1, r2
 800af08:	6159      	str	r1, [r3, #20]

            HAL_GPIO_Init(outputpin[i].port, &GPIO_Init);
 800af0a:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800af0e:	4b50      	ldr	r3, [pc, #320]	@ (800b050 <driver_setup+0x1e4>)
 800af10:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800af14:	a903      	add	r1, sp, #12
 800af16:	6858      	ldr	r0, [r3, #4]
 800af18:	f7fe fa8c 	bl	8009434 <HAL_GPIO_Init>
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800af1c:	3401      	adds	r4, #1
 800af1e:	2c07      	cmp	r4, #7
 800af20:	d828      	bhi.n	800af74 <driver_setup+0x108>
        if(!(outputpin[i].group == PinGroup_StepperPower ||
 800af22:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800af26:	4b4a      	ldr	r3, [pc, #296]	@ (800b050 <driver_setup+0x1e4>)
 800af28:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	2b05      	cmp	r3, #5
 800af30:	d0f4      	beq.n	800af1c <driver_setup+0xb0>
 800af32:	2b0b      	cmp	r3, #11
 800af34:	d0f2      	beq.n	800af1c <driver_setup+0xb0>
               outputpin[i].id == Output_SpindlePWM ||
 800af36:	4946      	ldr	r1, [pc, #280]	@ (800b050 <driver_setup+0x1e4>)
 800af38:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
              outputpin[i].group == PinGroup_AuxOutputAnalog ||
 800af3c:	2a71      	cmp	r2, #113	@ 0x71
 800af3e:	d0ed      	beq.n	800af1c <driver_setup+0xb0>
        if(!(outputpin[i].group == PinGroup_StepperPower ||
 800af40:	2a74      	cmp	r2, #116	@ 0x74
 800af42:	d0eb      	beq.n	800af1c <driver_setup+0xb0>
            GPIO_Init.Pin = 1 << outputpin[i].pin;
 800af44:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 800af48:	4841      	ldr	r0, [pc, #260]	@ (800b050 <driver_setup+0x1e4>)
 800af4a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800af4e:	7a06      	ldrb	r6, [r0, #8]
 800af50:	2101      	movs	r1, #1
 800af52:	40b1      	lsls	r1, r6
 800af54:	9103      	str	r1, [sp, #12]
            GPIO_Init.Mode = outputpin[i].mode.open_drain ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800af56:	7c00      	ldrb	r0, [r0, #16]
 800af58:	f010 0f04 	tst.w	r0, #4
 800af5c:	d0ca      	beq.n	800aef4 <driver_setup+0x88>
 800af5e:	2011      	movs	r0, #17
 800af60:	9004      	str	r0, [sp, #16]
            if(outputpin[i].group == PinGroup_MotorChipSelect ||
 800af62:	f1a3 000d 	sub.w	r0, r3, #13
 800af66:	2801      	cmp	r0, #1
 800af68:	d9c6      	bls.n	800aef8 <driver_setup+0x8c>
                outputpin[i].group == PinGroup_MotorUART ||
 800af6a:	2a95      	cmp	r2, #149	@ 0x95
 800af6c:	d0c4      	beq.n	800aef8 <driver_setup+0x8c>
                 outputpin[i].id == Output_SPICS ||
 800af6e:	2b06      	cmp	r3, #6
 800af70:	d1cb      	bne.n	800af0a <driver_setup+0x9e>
 800af72:	e7c1      	b.n	800aef8 <driver_setup+0x8c>
        }
    }

    GPIO_Init.Mode = GPIO_MODE_OUTPUT_PP;
 800af74:	2301      	movs	r3, #1
 800af76:	9304      	str	r3, [sp, #16]

 // Stepper init

    STEPPER_TIMER_CLKEN();
 800af78:	2600      	movs	r6, #0
 800af7a:	9601      	str	r6, [sp, #4]
 800af7c:	4c37      	ldr	r4, [pc, #220]	@ (800b05c <driver_setup+0x1f0>)
 800af7e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af80:	f043 0308 	orr.w	r3, r3, #8
 800af84:	6423      	str	r3, [r4, #64]	@ 0x40
 800af86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af88:	f003 0308 	and.w	r3, r3, #8
 800af8c:	9301      	str	r3, [sp, #4]
 800af8e:	9b01      	ldr	r3, [sp, #4]
    STEPPER_TIMER->CR1 &= ~TIM_CR1_CEN;
 800af90:	4b33      	ldr	r3, [pc, #204]	@ (800b060 <driver_setup+0x1f4>)
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	f022 0201 	bic.w	r2, r2, #1
 800af98:	601a      	str	r2, [r3, #0]
    STEPPER_TIMER->SR &= ~TIM_SR_UIF;
 800af9a:	691a      	ldr	r2, [r3, #16]
 800af9c:	f022 0201 	bic.w	r2, r2, #1
 800afa0:	611a      	str	r2, [r3, #16]
    STEPPER_TIMER->PSC = STEPPER_TIMER_DIV - 1;
 800afa2:	2203      	movs	r2, #3
 800afa4:	629a      	str	r2, [r3, #40]	@ 0x28
    STEPPER_TIMER->CNT = 0;
 800afa6:	625e      	str	r6, [r3, #36]	@ 0x24
    STEPPER_TIMER->CR1 |= TIM_CR1_DIR;
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	f042 0210 	orr.w	r2, r2, #16
 800afae:	601a      	str	r2, [r3, #0]
    STEPPER_TIMER->DIER |= TIM_DIER_UIE;
 800afb0:	68da      	ldr	r2, [r3, #12]
 800afb2:	f042 0201 	orr.w	r2, r2, #1
 800afb6:	60da      	str	r2, [r3, #12]

    HAL_NVIC_SetPriority(STEPPER_TIMER_IRQn, 0, 2);
 800afb8:	2202      	movs	r2, #2
 800afba:	4631      	mov	r1, r6
 800afbc:	2032      	movs	r0, #50	@ 0x32
 800afbe:	f7fe f82f 	bl	8009020 <HAL_NVIC_SetPriority>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800afc2:	4b28      	ldr	r3, [pc, #160]	@ (800b064 <driver_setup+0x1f8>)
 800afc4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800afc8:	605a      	str	r2, [r3, #4]
    NVIC_EnableIRQ(STEPPER_TIMER_IRQn);

 // Single-shot 100 ns per tick

    PULSE_TIMER_CLKEN();
 800afca:	9602      	str	r6, [sp, #8]
 800afcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afce:	f043 0304 	orr.w	r3, r3, #4
 800afd2:	6423      	str	r3, [r4, #64]	@ 0x40
 800afd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afd6:	f003 0304 	and.w	r3, r3, #4
 800afda:	9302      	str	r3, [sp, #8]
 800afdc:	9b02      	ldr	r3, [sp, #8]
    PULSE_TIMER->CR1 |= TIM_CR1_OPM|TIM_CR1_DIR|TIM_CR1_CKD_1|TIM_CR1_ARPE|TIM_CR1_URS;
 800afde:	4a22      	ldr	r2, [pc, #136]	@ (800b068 <driver_setup+0x1fc>)
 800afe0:	6813      	ldr	r3, [r2, #0]
 800afe2:	f443 7327 	orr.w	r3, r3, #668	@ 0x29c
 800afe6:	6013      	str	r3, [r2, #0]
    PULSE_TIMER->PSC = (HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock_cfg.APB1CLKDivider) / 10000000UL) - 1;
 800afe8:	f7fe fe26 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 800afec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afee:	bb63      	cbnz	r3, 800b04a <driver_setup+0x1de>
 800aff0:	2301      	movs	r3, #1
 800aff2:	fb00 f303 	mul.w	r3, r0, r3
 800aff6:	4a1d      	ldr	r2, [pc, #116]	@ (800b06c <driver_setup+0x200>)
 800aff8:	fba2 2303 	umull	r2, r3, r2, r3
 800affc:	0d9b      	lsrs	r3, r3, #22
 800affe:	3b01      	subs	r3, #1
 800b000:	4a19      	ldr	r2, [pc, #100]	@ (800b068 <driver_setup+0x1fc>)
 800b002:	6293      	str	r3, [r2, #40]	@ 0x28
    PULSE_TIMER->SR &= ~(TIM_SR_UIF|TIM_SR_CC1IF);
 800b004:	6913      	ldr	r3, [r2, #16]
 800b006:	f023 0303 	bic.w	r3, r3, #3
 800b00a:	6113      	str	r3, [r2, #16]
    PULSE_TIMER->CNT = 0;
 800b00c:	2400      	movs	r4, #0
 800b00e:	6254      	str	r4, [r2, #36]	@ 0x24
    PULSE_TIMER->DIER |= TIM_DIER_UIE;
 800b010:	68d3      	ldr	r3, [r2, #12]
 800b012:	f043 0301 	orr.w	r3, r3, #1
 800b016:	60d3      	str	r3, [r2, #12]

    HAL_NVIC_SetPriority(PULSE_TIMER_IRQn, 0, 1);
 800b018:	2201      	movs	r2, #1
 800b01a:	4621      	mov	r1, r4
 800b01c:	201e      	movs	r0, #30
 800b01e:	f7fd ffff 	bl	8009020 <HAL_NVIC_SetPriority>
 800b022:	4b10      	ldr	r3, [pc, #64]	@ (800b064 <driver_setup+0x1f8>)
 800b024:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800b028:	601a      	str	r2, [r3, #0]

    hal.periph_port.register_pin(&ssp);

#endif // SPINDLE_ENCODER_ENABLE

    IOInitDone = settings->version == 22;
 800b02a:	682b      	ldr	r3, [r5, #0]
 800b02c:	2b16      	cmp	r3, #22
 800b02e:	bf14      	ite	ne
 800b030:	2300      	movne	r3, #0
 800b032:	2301      	moveq	r3, #1
 800b034:	4e0e      	ldr	r6, [pc, #56]	@ (800b070 <driver_setup+0x204>)
 800b036:	7033      	strb	r3, [r6, #0]

    hal.settings_changed(settings, (settings_changed_flags_t){0});
 800b038:	4b07      	ldr	r3, [pc, #28]	@ (800b058 <driver_setup+0x1ec>)
 800b03a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b03e:	4621      	mov	r1, r4
 800b040:	4628      	mov	r0, r5
 800b042:	4798      	blx	r3
    if(qei_enable)
        encoder_start(&qei.encoder);
#endif

    return IOInitDone;
}
 800b044:	7830      	ldrb	r0, [r6, #0]
 800b046:	b00e      	add	sp, #56	@ 0x38
 800b048:	bd70      	pop	{r4, r5, r6, pc}
    PULSE_TIMER->PSC = (HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock_cfg.APB1CLKDivider) / 10000000UL) - 1;
 800b04a:	2302      	movs	r3, #2
 800b04c:	e7d1      	b.n	800aff2 <driver_setup+0x186>
 800b04e:	bf00      	nop
 800b050:	20000014 	.word	0x20000014
 800b054:	c2100014 	.word	0xc2100014
 800b058:	200018dc 	.word	0x200018dc
 800b05c:	40023800 	.word	0x40023800
 800b060:	40000c00 	.word	0x40000c00
 800b064:	e000e100 	.word	0xe000e100
 800b068:	40000800 	.word	0x40000800
 800b06c:	6b5fca6b 	.word	0x6b5fca6b
 800b070:	200007d0 	.word	0x200007d0

0800b074 <driver_delay>:
{
 800b074:	b510      	push	{r4, lr}
    if((delay.ms = ms) > 0) {
 800b076:	4b0b      	ldr	r3, [pc, #44]	@ (800b0a4 <driver_delay+0x30>)
 800b078:	6018      	str	r0, [r3, #0]
 800b07a:	b160      	cbz	r0, 800b096 <driver_delay+0x22>
        if(!(delay.callback = callback)) {
 800b07c:	6059      	str	r1, [r3, #4]
 800b07e:	b129      	cbz	r1, 800b08c <driver_delay+0x18>
}
 800b080:	bd10      	pop	{r4, pc}
                grbl.on_execute_delay(state_get());
 800b082:	4b09      	ldr	r3, [pc, #36]	@ (800b0a8 <driver_delay+0x34>)
 800b084:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b086:	f014 f83f 	bl	801f108 <state_get>
 800b08a:	47a0      	blx	r4
            while(delay.ms)
 800b08c:	4b05      	ldr	r3, [pc, #20]	@ (800b0a4 <driver_delay+0x30>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d1f6      	bne.n	800b082 <driver_delay+0xe>
 800b094:	e7f4      	b.n	800b080 <driver_delay+0xc>
        delay.callback = NULL;
 800b096:	4b03      	ldr	r3, [pc, #12]	@ (800b0a4 <driver_delay+0x30>)
 800b098:	2200      	movs	r2, #0
 800b09a:	605a      	str	r2, [r3, #4]
        if(callback)
 800b09c:	2900      	cmp	r1, #0
 800b09e:	d0ef      	beq.n	800b080 <driver_delay+0xc>
            callback();
 800b0a0:	4788      	blx	r1
}
 800b0a2:	e7ed      	b.n	800b080 <driver_delay+0xc>
 800b0a4:	2000000c 	.word	0x2000000c
 800b0a8:	20001ac4 	.word	0x20001ac4

0800b0ac <get_free_mem>:
}

#endif

static uint32_t get_free_mem (void)
{
 800b0ac:	b510      	push	{r4, lr}
 800b0ae:	b08a      	sub	sp, #40	@ 0x28
    extern uint8_t _end; /* Symbol defined in the linker script */
    extern uint8_t _estack; /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;

    return stack_limit - (uint32_t)&_end - mallinfo().uordblks;
 800b0b0:	4c05      	ldr	r4, [pc, #20]	@ (800b0c8 <get_free_mem+0x1c>)
 800b0b2:	4668      	mov	r0, sp
 800b0b4:	f017 ff2e 	bl	8022f14 <mallinfo>
 800b0b8:	4b04      	ldr	r3, [pc, #16]	@ (800b0cc <get_free_mem+0x20>)
 800b0ba:	9a07      	ldr	r2, [sp, #28]
 800b0bc:	4413      	add	r3, r2
}
 800b0be:	4804      	ldr	r0, [pc, #16]	@ (800b0d0 <get_free_mem+0x24>)
 800b0c0:	1a20      	subs	r0, r4, r0
 800b0c2:	1ac0      	subs	r0, r0, r3
 800b0c4:	b00a      	add	sp, #40	@ 0x28
 800b0c6:	bd10      	pop	{r4, pc}
 800b0c8:	20010000 	.word	0x20010000
 800b0cc:	00000400 	.word	0x00000400
 800b0d0:	20003090 	.word	0x20003090

0800b0d4 <core_pin_debounce>:
#endif

#endif // SPINDLE_ENCODER_ENABLE

void core_pin_debounce (void *pin)
{
 800b0d4:	b530      	push	{r4, r5, lr}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	4604      	mov	r4, r0
    input_signal_t *input = (input_signal_t *)pin;

    if(input->mode.irq_mode == IRQ_Mode_Change ||
 800b0da:	8883      	ldrh	r3, [r0, #4]
 800b0dc:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 800b0e0:	2b80      	cmp	r3, #128	@ 0x80
 800b0e2:	d015      	beq.n	800b110 <core_pin_debounce+0x3c>
         DIGITAL_IN(input->port, input->pin) == (input->mode.irq_mode == IRQ_Mode_Falling ? 0 : 1)) {
 800b0e4:	68c2      	ldr	r2, [r0, #12]
 800b0e6:	f102 4242 	add.w	r2, r2, #3254779904	@ 0xc2000000
 800b0ea:	f102 1210 	add.w	r2, r2, #1048592	@ 0x100010
 800b0ee:	0152      	lsls	r2, r2, #5
 800b0f0:	7981      	ldrb	r1, [r0, #6]
 800b0f2:	f812 2021 	ldrb.w	r2, [r2, r1, lsl #2]
 800b0f6:	b2d2      	uxtb	r2, r2
 800b0f8:	3b40      	subs	r3, #64	@ 0x40
 800b0fa:	bf18      	it	ne
 800b0fc:	2301      	movne	r3, #1
    if(input->mode.irq_mode == IRQ_Mode_Change ||
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d006      	beq.n	800b110 <core_pin_debounce+0x3c>
    }

#ifdef Z_LIMIT_POLL
    if(input != z_limit_pin)
#endif
    EXTI->IMR |= input->bit; // Reenable pin interrupt
 800b102:	4a10      	ldr	r2, [pc, #64]	@ (800b144 <core_pin_debounce+0x70>)
 800b104:	6813      	ldr	r3, [r2, #0]
 800b106:	68a1      	ldr	r1, [r4, #8]
 800b108:	430b      	orrs	r3, r1
 800b10a:	6013      	str	r3, [r2, #0]
}
 800b10c:	b003      	add	sp, #12
 800b10e:	bd30      	pop	{r4, r5, pc}
        if(input->group & (PinGroup_Control)) {
 800b110:	6923      	ldr	r3, [r4, #16]
 800b112:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800b116:	d004      	beq.n	800b122 <core_pin_debounce+0x4e>
            hal.control.interrupt_callback(systemGetState());
 800b118:	4b0b      	ldr	r3, [pc, #44]	@ (800b148 <core_pin_debounce+0x74>)
 800b11a:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 800b11c:	f7ff f94a 	bl	800a3b4 <systemGetState>
 800b120:	47a8      	blx	r5
        if(input->group & (PinGroup_Limit|PinGroup_LimitMax)) {
 800b122:	6923      	ldr	r3, [r4, #16]
 800b124:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800b128:	d0eb      	beq.n	800b102 <core_pin_debounce+0x2e>
            limit_signals_t state = limitsGetState();
 800b12a:	f7ff f901 	bl	800a330 <limitsGetState>
 800b12e:	9001      	str	r0, [sp, #4]
            if(limit_signals_merge(state).value) //TODO: add check for limit switches having same state as when limit_isr were invoked?
 800b130:	f008 f986 	bl	8013440 <limit_signals_merge>
 800b134:	b2c0      	uxtb	r0, r0
 800b136:	2800      	cmp	r0, #0
 800b138:	d0e3      	beq.n	800b102 <core_pin_debounce+0x2e>
                hal.limits.interrupt_callback(state);
 800b13a:	4b03      	ldr	r3, [pc, #12]	@ (800b148 <core_pin_debounce+0x74>)
 800b13c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b13e:	9801      	ldr	r0, [sp, #4]
 800b140:	4798      	blx	r3
 800b142:	e7de      	b.n	800b102 <core_pin_debounce+0x2e>
 800b144:	40013c00 	.word	0x40013c00
 800b148:	200018dc 	.word	0x200018dc

0800b14c <core_pin_irq>:

static inline void core_pin_irq (uint32_t bit)
{
 800b14c:	b510      	push	{r4, lr}
    input_signal_t *input;

    if((input = pin_irq[__builtin_ffs(bit) - 1])) {
 800b14e:	fa90 f3a0 	rbit	r3, r0
 800b152:	fab3 f383 	clz	r3, r3
 800b156:	b908      	cbnz	r0, 800b15c <core_pin_irq+0x10>
 800b158:	f04f 33ff 	mov.w	r3, #4294967295
 800b15c:	4a0c      	ldr	r2, [pc, #48]	@ (800b190 <core_pin_irq+0x44>)
 800b15e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b162:	b134      	cbz	r4, 800b172 <core_pin_irq+0x26>
        if(input->mode.debounce && task_add_delayed(core_pin_debounce, input, 40)) {
 800b164:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	db03      	blt.n	800b174 <core_pin_irq+0x28>
            EXTI->IMR &= ~input->bit; // Disable pin interrupt
        } else
            core_pin_debounce(input);
 800b16c:	4620      	mov	r0, r4
 800b16e:	f7ff ffb1 	bl	800b0d4 <core_pin_debounce>
    }
}
 800b172:	bd10      	pop	{r4, pc}
        if(input->mode.debounce && task_add_delayed(core_pin_debounce, input, 40)) {
 800b174:	2228      	movs	r2, #40	@ 0x28
 800b176:	4621      	mov	r1, r4
 800b178:	4806      	ldr	r0, [pc, #24]	@ (800b194 <core_pin_irq+0x48>)
 800b17a:	f006 fccb 	bl	8011b14 <task_add_delayed>
 800b17e:	2800      	cmp	r0, #0
 800b180:	d0f4      	beq.n	800b16c <core_pin_irq+0x20>
            EXTI->IMR &= ~input->bit; // Disable pin interrupt
 800b182:	4a05      	ldr	r2, [pc, #20]	@ (800b198 <core_pin_irq+0x4c>)
 800b184:	6813      	ldr	r3, [r2, #0]
 800b186:	68a1      	ldr	r1, [r4, #8]
 800b188:	ea23 0301 	bic.w	r3, r3, r1
 800b18c:	6013      	str	r3, [r2, #0]
 800b18e:	e7f0      	b.n	800b172 <core_pin_irq+0x26>
 800b190:	20000784 	.word	0x20000784
 800b194:	0800b0d5 	.word	0x0800b0d5
 800b198:	40013c00 	.word	0x40013c00

0800b19c <gpio_irq_enable>:
{
 800b19c:	b410      	push	{r4}
    if(irq_mode == IRQ_Mode_Rising) {
 800b19e:	2901      	cmp	r1, #1
 800b1a0:	d00a      	beq.n	800b1b8 <gpio_irq_enable+0x1c>
    } else if(irq_mode == IRQ_Mode_Falling) {
 800b1a2:	2902      	cmp	r1, #2
 800b1a4:	d01b      	beq.n	800b1de <gpio_irq_enable+0x42>
    } else if(irq_mode == IRQ_Mode_Change) {
 800b1a6:	2904      	cmp	r1, #4
 800b1a8:	d024      	beq.n	800b1f4 <gpio_irq_enable+0x58>
        EXTI->IMR &= ~input->bit;   // Disable pin interrupt
 800b1aa:	4a17      	ldr	r2, [pc, #92]	@ (800b208 <gpio_irq_enable+0x6c>)
 800b1ac:	6813      	ldr	r3, [r2, #0]
 800b1ae:	6884      	ldr	r4, [r0, #8]
 800b1b0:	ea23 0304 	bic.w	r3, r3, r4
 800b1b4:	6013      	str	r3, [r2, #0]
 800b1b6:	e009      	b.n	800b1cc <gpio_irq_enable+0x30>
        EXTI->RTSR |= input->bit;
 800b1b8:	4b13      	ldr	r3, [pc, #76]	@ (800b208 <gpio_irq_enable+0x6c>)
 800b1ba:	689a      	ldr	r2, [r3, #8]
 800b1bc:	6884      	ldr	r4, [r0, #8]
 800b1be:	4322      	orrs	r2, r4
 800b1c0:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~input->bit;
 800b1c2:	68da      	ldr	r2, [r3, #12]
 800b1c4:	6884      	ldr	r4, [r0, #8]
 800b1c6:	ea22 0204 	bic.w	r2, r2, r4
 800b1ca:	60da      	str	r2, [r3, #12]
    if(irq_mode != IRQ_Mode_None)
 800b1cc:	b121      	cbz	r1, 800b1d8 <gpio_irq_enable+0x3c>
        EXTI->IMR |= input->bit;    // Enable pin interrupt
 800b1ce:	4a0e      	ldr	r2, [pc, #56]	@ (800b208 <gpio_irq_enable+0x6c>)
 800b1d0:	6813      	ldr	r3, [r2, #0]
 800b1d2:	6881      	ldr	r1, [r0, #8]
 800b1d4:	430b      	orrs	r3, r1
 800b1d6:	6013      	str	r3, [r2, #0]
}
 800b1d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1dc:	4770      	bx	lr
        EXTI->RTSR &= ~input->bit;
 800b1de:	4b0a      	ldr	r3, [pc, #40]	@ (800b208 <gpio_irq_enable+0x6c>)
 800b1e0:	689a      	ldr	r2, [r3, #8]
 800b1e2:	6884      	ldr	r4, [r0, #8]
 800b1e4:	ea22 0204 	bic.w	r2, r2, r4
 800b1e8:	609a      	str	r2, [r3, #8]
        EXTI->FTSR |= input->bit;
 800b1ea:	68da      	ldr	r2, [r3, #12]
 800b1ec:	6884      	ldr	r4, [r0, #8]
 800b1ee:	4322      	orrs	r2, r4
 800b1f0:	60da      	str	r2, [r3, #12]
 800b1f2:	e7eb      	b.n	800b1cc <gpio_irq_enable+0x30>
        EXTI->RTSR |= input->bit;
 800b1f4:	4b04      	ldr	r3, [pc, #16]	@ (800b208 <gpio_irq_enable+0x6c>)
 800b1f6:	689a      	ldr	r2, [r3, #8]
 800b1f8:	6884      	ldr	r4, [r0, #8]
 800b1fa:	4322      	orrs	r2, r4
 800b1fc:	609a      	str	r2, [r3, #8]
        EXTI->FTSR |= input->bit;
 800b1fe:	68da      	ldr	r2, [r3, #12]
 800b200:	6884      	ldr	r4, [r0, #8]
 800b202:	4322      	orrs	r2, r4
 800b204:	60da      	str	r2, [r3, #12]
 800b206:	e7e1      	b.n	800b1cc <gpio_irq_enable+0x30>
 800b208:	40013c00 	.word	0x40013c00

0800b20c <limitsEnable>:
{
 800b20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b210:	b082      	sub	sp, #8
 800b212:	4606      	mov	r6, r0
 800b214:	4688      	mov	r8, r1
    bool disable = !on;
 800b216:	f080 0701 	eor.w	r7, r0, #1
    uint_fast8_t idx = limit_inputs.n_pins;
 800b21a:	4b1c      	ldr	r3, [pc, #112]	@ (800b28c <limitsEnable+0x80>)
 800b21c:	781c      	ldrb	r4, [r3, #0]
    limit_signals_t homing_source = xbar_get_homing_source_from_cycle(homing_cycle);
 800b21e:	4608      	mov	r0, r1
 800b220:	f001 fff4 	bl	800d20c <xbar_get_homing_source_from_cycle>
 800b224:	9001      	str	r0, [sp, #4]
    while(idx--) {
 800b226:	e019      	b.n	800b25c <limitsEnable+0x50>
            pin = xbar_fn_to_axismask(limit->id);
 800b228:	5c50      	ldrb	r0, [r2, r1]
 800b22a:	f001 ff95 	bl	800d158 <xbar_fn_to_axismask>
            disable = limit->group == PinGroup_Limit ? (pin.mask & homing_source.min.mask) : (pin.mask & homing_source.max.mask);
 800b22e:	6923      	ldr	r3, [r4, #16]
 800b230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b234:	d006      	beq.n	800b244 <limitsEnable+0x38>
 800b236:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b23a:	4203      	tst	r3, r0
 800b23c:	bf14      	ite	ne
 800b23e:	2701      	movne	r7, #1
 800b240:	2700      	moveq	r7, #0
 800b242:	e019      	b.n	800b278 <limitsEnable+0x6c>
 800b244:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b248:	4203      	tst	r3, r0
 800b24a:	bf14      	ite	ne
 800b24c:	2701      	movne	r7, #1
 800b24e:	2700      	moveq	r7, #0
 800b250:	e012      	b.n	800b278 <limitsEnable+0x6c>
        gpio_irq_enable(limit, disable ? IRQ_Mode_None : limit->mode.irq_mode);
 800b252:	2100      	movs	r1, #0
 800b254:	4620      	mov	r0, r4
 800b256:	f7ff ffa1 	bl	800b19c <gpio_irq_enable>
    while(idx--) {
 800b25a:	462c      	mov	r4, r5
 800b25c:	1e65      	subs	r5, r4, #1
 800b25e:	b18c      	cbz	r4, 800b284 <limitsEnable+0x78>
        limit = &limit_inputs.pins.inputs[idx];
 800b260:	4b0a      	ldr	r3, [pc, #40]	@ (800b28c <limitsEnable+0x80>)
 800b262:	685a      	ldr	r2, [r3, #4]
 800b264:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800b268:	0099      	lsls	r1, r3, #2
 800b26a:	eb02 0483 	add.w	r4, r2, r3, lsl #2
        if(on && homing_cycle.mask) {
 800b26e:	b11e      	cbz	r6, 800b278 <limitsEnable+0x6c>
 800b270:	fa5f f388 	uxtb.w	r3, r8
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1d7      	bne.n	800b228 <limitsEnable+0x1c>
        gpio_irq_enable(limit, disable ? IRQ_Mode_None : limit->mode.irq_mode);
 800b278:	2f00      	cmp	r7, #0
 800b27a:	d1ea      	bne.n	800b252 <limitsEnable+0x46>
 800b27c:	88a1      	ldrh	r1, [r4, #4]
 800b27e:	f3c1 1144 	ubfx	r1, r1, #5, #5
 800b282:	e7e7      	b.n	800b254 <limitsEnable+0x48>
}
 800b284:	b002      	add	sp, #8
 800b286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b28a:	bf00      	nop
 800b28c:	200007c8 	.word	0x200007c8

0800b290 <driver_init>:
{
 800b290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b292:	b08d      	sub	sp, #52	@ 0x34
    HAL_RCC_GetClockConfig(&clock_cfg, &latency);
 800b294:	a907      	add	r1, sp, #28
 800b296:	a802      	add	r0, sp, #8
 800b298:	f7fe fcee 	bl	8009c78 <HAL_RCC_GetClockConfig>
    hal.info = "STM32F407";
 800b29c:	4c9c      	ldr	r4, [pc, #624]	@ (800b510 <driver_init+0x280>)
 800b29e:	4b9d      	ldr	r3, [pc, #628]	@ (800b514 <driver_init+0x284>)
 800b2a0:	6063      	str	r3, [r4, #4]
    hal.driver_version = "240624";
 800b2a2:	4b9d      	ldr	r3, [pc, #628]	@ (800b518 <driver_init+0x288>)
 800b2a4:	60a3      	str	r3, [r4, #8]
    hal.driver_url = GRBL_URL "/STM32F4xx";
 800b2a6:	4b9d      	ldr	r3, [pc, #628]	@ (800b51c <driver_init+0x28c>)
 800b2a8:	6123      	str	r3, [r4, #16]
    hal.board = BOARD_NAME;
 800b2aa:	4b9d      	ldr	r3, [pc, #628]	@ (800b520 <driver_init+0x290>)
 800b2ac:	6163      	str	r3, [r4, #20]
    hal.driver_setup = driver_setup;
 800b2ae:	4b9d      	ldr	r3, [pc, #628]	@ (800b524 <driver_init+0x294>)
 800b2b0:	6363      	str	r3, [r4, #52]	@ 0x34
    hal.f_mcu = HAL_RCC_GetHCLKFreq() / 1000000UL;
 800b2b2:	f7fe fcbb 	bl	8009c2c <HAL_RCC_GetHCLKFreq>
 800b2b6:	4b9c      	ldr	r3, [pc, #624]	@ (800b528 <driver_init+0x298>)
 800b2b8:	fba3 2300 	umull	r2, r3, r3, r0
 800b2bc:	0c9b      	lsrs	r3, r3, #18
 800b2be:	6223      	str	r3, [r4, #32]
    hal.f_step_timer = HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock_cfg.APB1CLKDivider) / STEPPER_TIMER_DIV;
 800b2c0:	f7fe fcba 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 800b2c4:	9b05      	ldr	r3, [sp, #20]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d154      	bne.n	800b374 <driver_init+0xe4>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	fb03 f200 	mul.w	r2, r3, r0
 800b2d0:	0892      	lsrs	r2, r2, #2
 800b2d2:	4b8f      	ldr	r3, [pc, #572]	@ (800b510 <driver_init+0x280>)
 800b2d4:	61da      	str	r2, [r3, #28]
    hal.rx_buffer_size = RX_BUFFER_SIZE;
 800b2d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b2da:	625a      	str	r2, [r3, #36]	@ 0x24
    hal.get_free_mem = get_free_mem;
 800b2dc:	4a93      	ldr	r2, [pc, #588]	@ (800b52c <driver_init+0x29c>)
 800b2de:	631a      	str	r2, [r3, #48]	@ 0x30
    hal.delay_ms = &driver_delay;
 800b2e0:	4a93      	ldr	r2, [pc, #588]	@ (800b530 <driver_init+0x2a0>)
 800b2e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hal.settings_changed = settings_changed;
 800b2e4:	4a93      	ldr	r2, [pc, #588]	@ (800b534 <driver_init+0x2a4>)
 800b2e6:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    cycles2us_factor = 0xFFFFFFFFU / hal.f_mcu;
 800b2ea:	6a19      	ldr	r1, [r3, #32]
 800b2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f0:	fbb2 f2f1 	udiv	r2, r2, r1
 800b2f4:	4990      	ldr	r1, [pc, #576]	@ (800b538 <driver_init+0x2a8>)
 800b2f6:	600a      	str	r2, [r1, #0]
    hal.stepper.wake_up = stepperWakeUp;
 800b2f8:	4a90      	ldr	r2, [pc, #576]	@ (800b53c <driver_init+0x2ac>)
 800b2fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hal.stepper.go_idle = stepperGoIdle;
 800b2fe:	4a90      	ldr	r2, [pc, #576]	@ (800b540 <driver_init+0x2b0>)
 800b300:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hal.stepper.enable = stepperEnable;
 800b304:	4a8f      	ldr	r2, [pc, #572]	@ (800b544 <driver_init+0x2b4>)
 800b306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    hal.stepper.cycles_per_tick = stepperCyclesPerTick;
 800b30a:	4a8f      	ldr	r2, [pc, #572]	@ (800b548 <driver_init+0x2b8>)
 800b30c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    hal.stepper.pulse_start = stepperPulseStart;
 800b310:	4a8e      	ldr	r2, [pc, #568]	@ (800b54c <driver_init+0x2bc>)
 800b312:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hal.stepper.motor_iterator = motor_iterator;
 800b316:	4a8e      	ldr	r2, [pc, #568]	@ (800b550 <driver_init+0x2c0>)
 800b318:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    hal.limits.enable = limitsEnable;
 800b31c:	4a8d      	ldr	r2, [pc, #564]	@ (800b554 <driver_init+0x2c4>)
 800b31e:	655a      	str	r2, [r3, #84]	@ 0x54
    hal.limits.get_state = limitsGetState;
 800b320:	4a8d      	ldr	r2, [pc, #564]	@ (800b558 <driver_init+0x2c8>)
 800b322:	659a      	str	r2, [r3, #88]	@ 0x58
    hal.coolant.set_state = coolantSetState;
 800b324:	4a8d      	ldr	r2, [pc, #564]	@ (800b55c <driver_init+0x2cc>)
 800b326:	671a      	str	r2, [r3, #112]	@ 0x70
    hal.coolant.get_state = coolantGetState;
 800b328:	4a8d      	ldr	r2, [pc, #564]	@ (800b560 <driver_init+0x2d0>)
 800b32a:	675a      	str	r2, [r3, #116]	@ 0x74
    hal.control.get_state = systemGetState;
 800b32c:	4a8d      	ldr	r2, [pc, #564]	@ (800b564 <driver_init+0x2d4>)
 800b32e:	669a      	str	r2, [r3, #104]	@ 0x68
    hal.irq_enable = __enable_irq;
 800b330:	4a8d      	ldr	r2, [pc, #564]	@ (800b568 <driver_init+0x2d8>)
 800b332:	649a      	str	r2, [r3, #72]	@ 0x48
    hal.irq_disable = __disable_irq;
 800b334:	4a8d      	ldr	r2, [pc, #564]	@ (800b56c <driver_init+0x2dc>)
 800b336:	64da      	str	r2, [r3, #76]	@ 0x4c
    hal.set_bits_atomic = bitsSetAtomic;
 800b338:	4a8d      	ldr	r2, [pc, #564]	@ (800b570 <driver_init+0x2e0>)
 800b33a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hal.clear_bits_atomic = bitsClearAtomic;
 800b33c:	4a8d      	ldr	r2, [pc, #564]	@ (800b574 <driver_init+0x2e4>)
 800b33e:	641a      	str	r2, [r3, #64]	@ 0x40
    hal.set_value_atomic = valueSetAtomic;
 800b340:	4a8d      	ldr	r2, [pc, #564]	@ (800b578 <driver_init+0x2e8>)
 800b342:	645a      	str	r2, [r3, #68]	@ 0x44
    hal.get_micros = getElapsedMicros;
 800b344:	4a8d      	ldr	r2, [pc, #564]	@ (800b57c <driver_init+0x2ec>)
 800b346:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
    hal.get_elapsed_ticks = getElapsedTicks;
 800b34a:	4a8d      	ldr	r2, [pc, #564]	@ (800b580 <driver_init+0x2f0>)
 800b34c:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
    hal.enumerate_pins = enumeratePins;
 800b350:	4a8c      	ldr	r2, [pc, #560]	@ (800b584 <driver_init+0x2f4>)
 800b352:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
    hal.periph_port.register_pin = registerPeriphPin;
 800b356:	4a8c      	ldr	r2, [pc, #560]	@ (800b588 <driver_init+0x2f8>)
 800b358:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
    hal.periph_port.set_pin_description = setPeriphPinDescription;
 800b35c:	4a8b      	ldr	r2, [pc, #556]	@ (800b58c <driver_init+0x2fc>)
 800b35e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    serialRegisterStreams();
 800b362:	f001 fd19 	bl	800cd98 <serialRegisterStreams>
    if(!stream_connect_instance(SERIAL_STREAM, BAUD_RATE))
 800b366:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800b36a:	2000      	movs	r0, #0
 800b36c:	f015 ff0c 	bl	8021188 <stream_connect_instance>
 800b370:	b910      	cbnz	r0, 800b378 <driver_init+0xe8>
        while(true); // Cannot boot if no communication channel is available!
 800b372:	e7fe      	b.n	800b372 <driver_init+0xe2>
    hal.f_step_timer = HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock_cfg.APB1CLKDivider) / STEPPER_TIMER_DIV;
 800b374:	2302      	movs	r3, #2
 800b376:	e7a9      	b.n	800b2cc <driver_init+0x3c>
    hal.nvs.type = NVS_Flash;
 800b378:	4b65      	ldr	r3, [pc, #404]	@ (800b510 <driver_init+0x280>)
 800b37a:	2203      	movs	r2, #3
 800b37c:	f883 2174 	strb.w	r2, [r3, #372]	@ 0x174
    hal.nvs.memcpy_from_flash = memcpy_from_flash;
 800b380:	4a83      	ldr	r2, [pc, #524]	@ (800b590 <driver_init+0x300>)
 800b382:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
    hal.nvs.memcpy_to_flash = memcpy_to_flash;
 800b386:	4a83      	ldr	r2, [pc, #524]	@ (800b594 <driver_init+0x304>)
 800b388:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
    hal.signals_cap.reset = Off;
 800b38c:	f893 21dc 	ldrb.w	r2, [r3, #476]	@ 0x1dc
 800b390:	f36f 0200 	bfc	r2, #0, #1
 800b394:	f883 21dc 	strb.w	r2, [r3, #476]	@ 0x1dc
    hal.signals_cap.feed_hold = Off;
 800b398:	b2d2      	uxtb	r2, r2
 800b39a:	f36f 0241 	bfc	r2, #1, #1
 800b39e:	f883 21dc 	strb.w	r2, [r3, #476]	@ 0x1dc
    hal.signals_cap.cycle_start = Off;
 800b3a2:	b2d2      	uxtb	r2, r2
 800b3a4:	f36f 0282 	bfc	r2, #2, #1
 800b3a8:	f883 21dc 	strb.w	r2, [r3, #476]	@ 0x1dc

static inline limit_signals_t get_limits_cap (void)
{
    limit_signals_t limits = {0};
 800b3ac:	2400      	movs	r4, #0
 800b3ae:	9401      	str	r4, [sp, #4]

#if X_LIMIT_BIT
    limits.min.x = On;
 800b3b0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b3b4:	f042 0201 	orr.w	r2, r2, #1
 800b3b8:	f88d 2004 	strb.w	r2, [sp, #4]
#endif
#if Y_LIMIT_BIT
    limits.min.y = On;
 800b3bc:	b2d2      	uxtb	r2, r2
 800b3be:	f042 0202 	orr.w	r2, r2, #2
 800b3c2:	f88d 2004 	strb.w	r2, [sp, #4]
#endif
#if Z_LIMIT_BIT
    limits.min.z = On;
 800b3c6:	b2d2      	uxtb	r2, r2
 800b3c8:	f042 0204 	orr.w	r2, r2, #4
 800b3cc:	f88d 2004 	strb.w	r2, [sp, #4]
#endif
#if V_LIMIT_BIT_MAX
    limits.max.v = On;
#endif

    return limits;
 800b3d0:	9a01      	ldr	r2, [sp, #4]
 800b3d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b3d4:	920a      	str	r2, [sp, #40]	@ 0x28
    hal.limits_cap = get_limits_cap();
 800b3d6:	f8c3 21de 	str.w	r2, [r3, #478]	@ 0x1de
}

static inline home_signals_t get_home_cap (void)
{
    home_signals_t home = {0};
 800b3da:	f8ad 4004 	strh.w	r4, [sp, #4]
    home.b.z = On;
#endif

#endif // HOME_MASK

    return home;
 800b3de:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
 800b3e2:	f8ad 4020 	strh.w	r4, [sp, #32]
    hal.home_cap = get_home_cap();
 800b3e6:	f8a3 41e2 	strh.w	r4, [r3, #482]	@ 0x1e2
    hal.coolant_cap.flood = On;
 800b3ea:	f893 21e4 	ldrb.w	r2, [r3, #484]	@ 0x1e4
 800b3ee:	f042 0201 	orr.w	r2, r2, #1
 800b3f2:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
    hal.coolant_cap.mist = On;
 800b3f6:	b2d2      	uxtb	r2, r2
 800b3f8:	f042 0202 	orr.w	r2, r2, #2
 800b3fc:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
    hal.driver_cap.software_debounce = On;
 800b400:	f893 21d8 	ldrb.w	r2, [r3, #472]	@ 0x1d8
 800b404:	f042 0201 	orr.w	r2, r2, #1
 800b408:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    hal.driver_cap.step_pulse_delay = On;
 800b40c:	b2d2      	uxtb	r2, r2
 800b40e:	f042 0202 	orr.w	r2, r2, #2
 800b412:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    hal.driver_cap.amass_level = 3;
 800b416:	b2d2      	uxtb	r2, r2
 800b418:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b41c:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    hal.driver_cap.control_pull_up = On;
 800b420:	b2d2      	uxtb	r2, r2
 800b422:	f042 0208 	orr.w	r2, r2, #8
 800b426:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    hal.driver_cap.limits_pull_up = On;
 800b42a:	b2d2      	uxtb	r2, r2
 800b42c:	f042 0204 	orr.w	r2, r2, #4
 800b430:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800b434:	e0d2      	b.n	800b5dc <driver_init+0x34c>
            if(aux_digital_in.pins.inputs == NULL)
 800b436:	4a58      	ldr	r2, [pc, #352]	@ (800b598 <driver_init+0x308>)
 800b438:	6852      	ldr	r2, [r2, #4]
 800b43a:	2a00      	cmp	r2, #0
 800b43c:	d062      	beq.n	800b504 <driver_init+0x274>
            input->user_port = aux_digital_in.n_pins++;
 800b43e:	4d56      	ldr	r5, [pc, #344]	@ (800b598 <driver_init+0x308>)
 800b440:	782a      	ldrb	r2, [r5, #0]
 800b442:	1c56      	adds	r6, r2, #1
 800b444:	702e      	strb	r6, [r5, #0]
 800b446:	4d55      	ldr	r5, [pc, #340]	@ (800b59c <driver_init+0x30c>)
 800b448:	eb04 06c4 	add.w	r6, r4, r4, lsl #3
 800b44c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800b450:	f88c 2014 	strb.w	r2, [ip, #20]
            input->id = (pin_function_t)(Input_Aux0 + input->user_port);
 800b454:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
 800b458:	f805 e026 	strb.w	lr, [r5, r6, lsl #2]
            input->mode.pull_mode = PullMode_Up;
 800b45c:	f89c 5004 	ldrb.w	r5, [ip, #4]
 800b460:	2601      	movs	r6, #1
 800b462:	f366 05c4 	bfi	r5, r6, #3, #2
 800b466:	f88c 5004 	strb.w	r5, [ip, #4]
            input->cap.pull_mode = PullMode_UpDown;
 800b46a:	f89c e002 	ldrb.w	lr, [ip, #2]
 800b46e:	f04e 0e18 	orr.w	lr, lr, #24
 800b472:	f88c e002 	strb.w	lr, [ip, #2]
            if((input->cap.irq_mode = ((DRIVER_IRQMASK|aux_irq) & input->bit) ? IRQ_Mode_None : IRQ_Mode_Edges) != IRQ_Mode_None) {
 800b476:	4d4a      	ldr	r5, [pc, #296]	@ (800b5a0 <driver_init+0x310>)
 800b478:	682d      	ldr	r5, [r5, #0]
 800b47a:	f445 56c0 	orr.w	r6, r5, #6144	@ 0x1800
 800b47e:	4230      	tst	r0, r6
 800b480:	d043      	beq.n	800b50a <driver_init+0x27a>
 800b482:	2600      	movs	r6, #0
 800b484:	eb04 0ec4 	add.w	lr, r4, r4, lsl #3
 800b488:	4f44      	ldr	r7, [pc, #272]	@ (800b59c <driver_init+0x30c>)
 800b48a:	eb07 0c8e 	add.w	ip, r7, lr, lsl #2
 800b48e:	f8bc e002 	ldrh.w	lr, [ip, #2]
 800b492:	f366 1e49 	bfi	lr, r6, #5, #5
 800b496:	f8ac e002 	strh.w	lr, [ip, #2]
 800b49a:	b166      	cbz	r6, 800b4b6 <driver_init+0x226>
                aux_irq |= input->bit;
 800b49c:	4305      	orrs	r5, r0
 800b49e:	4e40      	ldr	r6, [pc, #256]	@ (800b5a0 <driver_init+0x310>)
 800b4a0:	6035      	str	r5, [r6, #0]
                pin_irq[__builtin_ffs(input->bit) - 1] = input;
 800b4a2:	fa90 f5a0 	rbit	r5, r0
 800b4a6:	fab5 f585 	clz	r5, r5
 800b4aa:	b908      	cbnz	r0, 800b4b0 <driver_init+0x220>
 800b4ac:	f04f 35ff 	mov.w	r5, #4294967295
 800b4b0:	483c      	ldr	r0, [pc, #240]	@ (800b5a4 <driver_init+0x314>)
 800b4b2:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
            input->cap.debounce = !!input->cap.irq_mode;
 800b4b6:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 800b4ba:	4838      	ldr	r0, [pc, #224]	@ (800b59c <driver_init+0x30c>)
 800b4bc:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800b4c0:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 800b4c4:	f40c 7c78 	and.w	ip, ip, #992	@ 0x3e0
 800b4c8:	f1bc 0c00 	subs.w	ip, ip, #0
 800b4cc:	bf18      	it	ne
 800b4ce:	f04f 0c01 	movne.w	ip, #1
 800b4d2:	78c5      	ldrb	r5, [r0, #3]
 800b4d4:	f36c 15c7 	bfi	r5, ip, #7, #1
 800b4d8:	70c5      	strb	r5, [r0, #3]
            if((aux_remap = aux_ctrl_remap_explicit(input->port, input->pin, input->user_port, input))) {
 800b4da:	68c0      	ldr	r0, [r0, #12]
 800b4dc:	f7fe fe4a 	bl	800a174 <aux_ctrl_remap_explicit>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d07a      	beq.n	800b5da <driver_init+0x34a>
                if(aux_remap->function == Input_Probe && input->cap.irq_mode == IRQ_Mode_Edges)
 800b4e4:	7802      	ldrb	r2, [r0, #0]
 800b4e6:	2a0e      	cmp	r2, #14
 800b4e8:	d177      	bne.n	800b5da <driver_init+0x34a>
 800b4ea:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800b4ee:	4a2b      	ldr	r2, [pc, #172]	@ (800b59c <driver_init+0x30c>)
 800b4f0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b4f4:	8852      	ldrh	r2, [r2, #2]
 800b4f6:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
 800b4fa:	2ae0      	cmp	r2, #224	@ 0xe0
 800b4fc:	d16d      	bne.n	800b5da <driver_init+0x34a>
                    aux_remap->irq_mode = IRQ_Mode_Change;
 800b4fe:	2204      	movs	r2, #4
 800b500:	7082      	strb	r2, [r0, #2]
 800b502:	e06a      	b.n	800b5da <driver_init+0x34a>
                aux_digital_in.pins.inputs = input;
 800b504:	4a24      	ldr	r2, [pc, #144]	@ (800b598 <driver_init+0x308>)
 800b506:	6053      	str	r3, [r2, #4]
 800b508:	e799      	b.n	800b43e <driver_init+0x1ae>
            if((input->cap.irq_mode = ((DRIVER_IRQMASK|aux_irq) & input->bit) ? IRQ_Mode_None : IRQ_Mode_Edges) != IRQ_Mode_None) {
 800b50a:	2607      	movs	r6, #7
 800b50c:	e7ba      	b.n	800b484 <driver_init+0x1f4>
 800b50e:	bf00      	nop
 800b510:	200018dc 	.word	0x200018dc
 800b514:	080295cc 	.word	0x080295cc
 800b518:	080295d8 	.word	0x080295d8
 800b51c:	080295e0 	.word	0x080295e0
 800b520:	08029608 	.word	0x08029608
 800b524:	0800ae6d 	.word	0x0800ae6d
 800b528:	431bde83 	.word	0x431bde83
 800b52c:	0800b0ad 	.word	0x0800b0ad
 800b530:	0800b075 	.word	0x0800b075
 800b534:	0800a6d1 	.word	0x0800a6d1
 800b538:	200007e0 	.word	0x200007e0
 800b53c:	0800a1b1 	.word	0x0800a1b1
 800b540:	0800a1ed 	.word	0x0800a1ed
 800b544:	0800a1ad 	.word	0x0800a1ad
 800b548:	0800a201 	.word	0x0800a201
 800b54c:	0800a219 	.word	0x0800a219
 800b550:	0800a14d 	.word	0x0800a14d
 800b554:	0800b20d 	.word	0x0800b20d
 800b558:	0800a331 	.word	0x0800a331
 800b55c:	0800a3d5 	.word	0x0800a3d5
 800b560:	0800a401 	.word	0x0800a401
 800b564:	0800a3b5 	.word	0x0800a3b5
 800b568:	0800a145 	.word	0x0800a145
 800b56c:	0800a149 	.word	0x0800a149
 800b570:	0800a42d 	.word	0x0800a42d
 800b574:	0800a439 	.word	0x0800a439
 800b578:	0800a44b 	.word	0x0800a44b
 800b57c:	0800a459 	.word	0x0800a459
 800b580:	0800a4ad 	.word	0x0800a4ad
 800b584:	0800a529 	.word	0x0800a529
 800b588:	0800ae21 	.word	0x0800ae21
 800b58c:	0800a691 	.word	0x0800a691
 800b590:	0800b815 	.word	0x0800b815
 800b594:	0800b831 	.word	0x0800b831
 800b598:	2000077c 	.word	0x2000077c
 800b59c:	200000f4 	.word	0x200000f4
 800b5a0:	200007d4 	.word	0x200007d4
 800b5a4:	20000784 	.word	0x20000784
            if(aux_analog_in.pins.inputs == NULL)
 800b5a8:	4a50      	ldr	r2, [pc, #320]	@ (800b6ec <driver_init+0x45c>)
 800b5aa:	6852      	ldr	r2, [r2, #4]
 800b5ac:	2a00      	cmp	r2, #0
 800b5ae:	d047      	beq.n	800b640 <driver_init+0x3b0>
            input->id = (pin_function_t)(Input_Analog_Aux0 + aux_analog_in.n_pins++);
 800b5b0:	4a4e      	ldr	r2, [pc, #312]	@ (800b6ec <driver_init+0x45c>)
 800b5b2:	7813      	ldrb	r3, [r2, #0]
 800b5b4:	1c59      	adds	r1, r3, #1
 800b5b6:	7011      	strb	r1, [r2, #0]
 800b5b8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800b5bc:	494c      	ldr	r1, [pc, #304]	@ (800b6f0 <driver_init+0x460>)
 800b5be:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800b5c2:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 800b5c6:	f801 2020 	strb.w	r2, [r1, r0, lsl #2]
            input->mode.analog = input->cap.analog = On;
 800b5ca:	78da      	ldrb	r2, [r3, #3]
 800b5cc:	f042 0208 	orr.w	r2, r2, #8
 800b5d0:	70da      	strb	r2, [r3, #3]
 800b5d2:	795a      	ldrb	r2, [r3, #5]
 800b5d4:	f042 0208 	orr.w	r2, r2, #8
 800b5d8:	715a      	strb	r2, [r3, #5]
    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800b5da:	3401      	adds	r4, #1
 800b5dc:	2c02      	cmp	r4, #2
 800b5de:	d835      	bhi.n	800b64c <driver_init+0x3bc>
        input = &inputpin[i];
 800b5e0:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800b5e4:	4b42      	ldr	r3, [pc, #264]	@ (800b6f0 <driver_init+0x460>)
 800b5e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
        input->mode.input = input->cap.input = On;
 800b5ea:	789a      	ldrb	r2, [r3, #2]
 800b5ec:	f042 0201 	orr.w	r2, r2, #1
 800b5f0:	709a      	strb	r2, [r3, #2]
 800b5f2:	791a      	ldrb	r2, [r3, #4]
 800b5f4:	f042 0201 	orr.w	r2, r2, #1
 800b5f8:	711a      	strb	r2, [r3, #4]
        input->bit = 1 << input->pin;
 800b5fa:	7999      	ldrb	r1, [r3, #6]
 800b5fc:	2001      	movs	r0, #1
 800b5fe:	4088      	lsls	r0, r1
 800b600:	6098      	str	r0, [r3, #8]
        if(input->group == PinGroup_AuxInput) {
 800b602:	691a      	ldr	r2, [r3, #16]
 800b604:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800b608:	f43f af15 	beq.w	800b436 <driver_init+0x1a6>
        } else if(input->group == PinGroup_AuxInputAnalog) {
 800b60c:	2a0a      	cmp	r2, #10
 800b60e:	d0cb      	beq.n	800b5a8 <driver_init+0x318>
        }  else if(input->group & (PinGroup_Limit|PinGroup_LimitMax)) {
 800b610:	f412 6fc0 	tst.w	r2, #1536	@ 0x600
 800b614:	d0e1      	beq.n	800b5da <driver_init+0x34a>
            if(limit_inputs.pins.inputs == NULL)
 800b616:	4a37      	ldr	r2, [pc, #220]	@ (800b6f4 <driver_init+0x464>)
 800b618:	6852      	ldr	r2, [r2, #4]
 800b61a:	b1a2      	cbz	r2, 800b646 <driver_init+0x3b6>
            if(LIMIT_MASK & input->bit)
 800b61c:	f410 5fc0 	tst.w	r0, #6144	@ 0x1800
 800b620:	d009      	beq.n	800b636 <driver_init+0x3a6>
                pin_irq[__builtin_ffs(input->bit) - 1] = input;
 800b622:	fa90 f2a0 	rbit	r2, r0
 800b626:	fab2 f282 	clz	r2, r2
 800b62a:	b908      	cbnz	r0, 800b630 <driver_init+0x3a0>
 800b62c:	f04f 32ff 	mov.w	r2, #4294967295
 800b630:	4931      	ldr	r1, [pc, #196]	@ (800b6f8 <driver_init+0x468>)
 800b632:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
            limit_inputs.n_pins++;
 800b636:	4a2f      	ldr	r2, [pc, #188]	@ (800b6f4 <driver_init+0x464>)
 800b638:	7813      	ldrb	r3, [r2, #0]
 800b63a:	3301      	adds	r3, #1
 800b63c:	7013      	strb	r3, [r2, #0]
 800b63e:	e7cc      	b.n	800b5da <driver_init+0x34a>
                aux_analog_in.pins.inputs = input;
 800b640:	4a2a      	ldr	r2, [pc, #168]	@ (800b6ec <driver_init+0x45c>)
 800b642:	6053      	str	r3, [r2, #4]
 800b644:	e7b4      	b.n	800b5b0 <driver_init+0x320>
                limit_inputs.pins.inputs = input;
 800b646:	4a2b      	ldr	r2, [pc, #172]	@ (800b6f4 <driver_init+0x464>)
 800b648:	6053      	str	r3, [r2, #4]
 800b64a:	e7e7      	b.n	800b61c <driver_init+0x38c>
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800b64c:	2300      	movs	r3, #0
 800b64e:	e00e      	b.n	800b66e <driver_init+0x3de>
            if(aux_digital_out.pins.outputs == NULL)
 800b650:	492a      	ldr	r1, [pc, #168]	@ (800b6fc <driver_init+0x46c>)
 800b652:	6849      	ldr	r1, [r1, #4]
 800b654:	b379      	cbz	r1, 800b6b6 <driver_init+0x426>
            output->id = (pin_function_t)(Output_Aux0 + aux_digital_out.n_pins);
 800b656:	4829      	ldr	r0, [pc, #164]	@ (800b6fc <driver_init+0x46c>)
 800b658:	7802      	ldrb	r2, [r0, #0]
 800b65a:	f102 0c77 	add.w	ip, r2, #119	@ 0x77
 800b65e:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800b662:	4c27      	ldr	r4, [pc, #156]	@ (800b700 <driver_init+0x470>)
 800b664:	f804 c021 	strb.w	ip, [r4, r1, lsl #2]
            aux_digital_out.n_pins++;
 800b668:	3201      	adds	r2, #1
 800b66a:	7002      	strb	r2, [r0, #0]
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800b66c:	3301      	adds	r3, #1
 800b66e:	2b07      	cmp	r3, #7
 800b670:	d827      	bhi.n	800b6c2 <driver_init+0x432>
        output = &outputpin[i];
 800b672:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800b676:	4a22      	ldr	r2, [pc, #136]	@ (800b700 <driver_init+0x470>)
 800b678:	eb02 0281 	add.w	r2, r2, r1, lsl #2
        output->mode.output = On;
 800b67c:	7c11      	ldrb	r1, [r2, #16]
 800b67e:	f041 0102 	orr.w	r1, r1, #2
 800b682:	7411      	strb	r1, [r2, #16]
        if(output->group == PinGroup_AuxOutput) {
 800b684:	68d1      	ldr	r1, [r2, #12]
 800b686:	2909      	cmp	r1, #9
 800b688:	d0e2      	beq.n	800b650 <driver_init+0x3c0>
        } else if(output->group == PinGroup_AuxOutputAnalog) {
 800b68a:	290b      	cmp	r1, #11
 800b68c:	d1ee      	bne.n	800b66c <driver_init+0x3dc>
            if(aux_analog_out.pins.outputs == NULL)
 800b68e:	491d      	ldr	r1, [pc, #116]	@ (800b704 <driver_init+0x474>)
 800b690:	6849      	ldr	r1, [r1, #4]
 800b692:	b199      	cbz	r1, 800b6bc <driver_init+0x42c>
            output->mode.analog = On;
 800b694:	491a      	ldr	r1, [pc, #104]	@ (800b700 <driver_init+0x470>)
 800b696:	ebc3 00c3 	rsb	r0, r3, r3, lsl #3
 800b69a:	eb01 0480 	add.w	r4, r1, r0, lsl #2
 800b69e:	7c62      	ldrb	r2, [r4, #17]
 800b6a0:	f042 0208 	orr.w	r2, r2, #8
 800b6a4:	7462      	strb	r2, [r4, #17]
            output->id = (pin_function_t)(Output_Analog_Aux0 + aux_analog_out.n_pins++);
 800b6a6:	4c17      	ldr	r4, [pc, #92]	@ (800b704 <driver_init+0x474>)
 800b6a8:	7822      	ldrb	r2, [r4, #0]
 800b6aa:	1c55      	adds	r5, r2, #1
 800b6ac:	7025      	strb	r5, [r4, #0]
 800b6ae:	3a7d      	subs	r2, #125	@ 0x7d
 800b6b0:	f801 2020 	strb.w	r2, [r1, r0, lsl #2]
 800b6b4:	e7da      	b.n	800b66c <driver_init+0x3dc>
                aux_digital_out.pins.outputs = output;
 800b6b6:	4911      	ldr	r1, [pc, #68]	@ (800b6fc <driver_init+0x46c>)
 800b6b8:	604a      	str	r2, [r1, #4]
 800b6ba:	e7cc      	b.n	800b656 <driver_init+0x3c6>
                aux_analog_out.pins.outputs = output;
 800b6bc:	4911      	ldr	r1, [pc, #68]	@ (800b704 <driver_init+0x474>)
 800b6be:	604a      	str	r2, [r1, #4]
 800b6c0:	e7e8      	b.n	800b694 <driver_init+0x404>
    if(aux_digital_in.n_pins || aux_digital_out.n_pins)
 800b6c2:	4b11      	ldr	r3, [pc, #68]	@ (800b708 <driver_init+0x478>)
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	b913      	cbnz	r3, 800b6ce <driver_init+0x43e>
 800b6c8:	4b0c      	ldr	r3, [pc, #48]	@ (800b6fc <driver_init+0x46c>)
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	b11b      	cbz	r3, 800b6d6 <driver_init+0x446>
        ioports_init(&aux_digital_in, &aux_digital_out);
 800b6ce:	490b      	ldr	r1, [pc, #44]	@ (800b6fc <driver_init+0x46c>)
 800b6d0:	480d      	ldr	r0, [pc, #52]	@ (800b708 <driver_init+0x478>)
 800b6d2:	f000 fd93 	bl	800c1fc <ioports_init>
    extern void embroidery_init (void);
    embroidery_init();
#endif

    extern void my_plugin_init (void);
    my_plugin_init();
 800b6d6:	f000 ff8b 	bl	800c5f0 <my_plugin_init>
    return hal.version == 10;
 800b6da:	4b0c      	ldr	r3, [pc, #48]	@ (800b70c <driver_init+0x47c>)
 800b6dc:	6818      	ldr	r0, [r3, #0]
}
 800b6de:	280a      	cmp	r0, #10
 800b6e0:	bf14      	ite	ne
 800b6e2:	2000      	movne	r0, #0
 800b6e4:	2001      	moveq	r0, #1
 800b6e6:	b00d      	add	sp, #52	@ 0x34
 800b6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	20000774 	.word	0x20000774
 800b6f0:	200000f4 	.word	0x200000f4
 800b6f4:	200007c8 	.word	0x200007c8
 800b6f8:	20000784 	.word	0x20000784
 800b6fc:	2000076c 	.word	0x2000076c
 800b700:	20000014 	.word	0x20000014
 800b704:	20000764 	.word	0x20000764
 800b708:	2000077c 	.word	0x2000077c
 800b70c:	200018dc 	.word	0x200018dc

0800b710 <TIM5_IRQHandler>:
{
 800b710:	b508      	push	{r3, lr}
    if((STEPPER_TIMER->SR & TIM_SR_UIF) != 0) {    // check interrupt source
 800b712:	4b07      	ldr	r3, [pc, #28]	@ (800b730 <TIM5_IRQHandler+0x20>)
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	f013 0f01 	tst.w	r3, #1
 800b71a:	d007      	beq.n	800b72c <TIM5_IRQHandler+0x1c>
        STEPPER_TIMER->SR = ~TIM_SR_UIF;            // clear UIF flag
 800b71c:	4b04      	ldr	r3, [pc, #16]	@ (800b730 <TIM5_IRQHandler+0x20>)
 800b71e:	f06f 0201 	mvn.w	r2, #1
 800b722:	611a      	str	r2, [r3, #16]
        hal.stepper.interrupt_callback();
 800b724:	4b03      	ldr	r3, [pc, #12]	@ (800b734 <TIM5_IRQHandler+0x24>)
 800b726:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b72a:	4798      	blx	r3
}
 800b72c:	bd08      	pop	{r3, pc}
 800b72e:	bf00      	nop
 800b730:	40000c00 	.word	0x40000c00
 800b734:	200018dc 	.word	0x200018dc

0800b738 <TIM4_IRQHandler>:
    PULSE_TIMER->SR &= ~TIM_SR_UIF;                 // Clear UIF flag
 800b738:	4b1e      	ldr	r3, [pc, #120]	@ (800b7b4 <TIM4_IRQHandler+0x7c>)
 800b73a:	691a      	ldr	r2, [r3, #16]
 800b73c:	f022 0201 	bic.w	r2, r2, #1
 800b740:	611a      	str	r2, [r3, #16]
    if(PULSE_TIMER->ARR == pulse_delay) {          // Delayed step pulse?
 800b742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b744:	4b1c      	ldr	r3, [pc, #112]	@ (800b7b8 <TIM4_IRQHandler+0x80>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	429a      	cmp	r2, r3
 800b74a:	d012      	beq.n	800b772 <TIM4_IRQHandler+0x3a>
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 800b74c:	4b1b      	ldr	r3, [pc, #108]	@ (800b7bc <TIM4_IRQHandler+0x84>)
 800b74e:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 800b752:	f3c3 0100 	ubfx	r1, r3, #0, #1
 800b756:	4a1a      	ldr	r2, [pc, #104]	@ (800b7c0 <TIM4_IRQHandler+0x88>)
 800b758:	f882 10b4 	strb.w	r1, [r2, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 800b75c:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800b760:	f882 10ac 	strb.w	r1, [r2, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 800b764:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b768:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800b76c:	f882 3088 	strb.w	r3, [r2, #136]	@ 0x88
}
 800b770:	4770      	bx	lr
        PULSE_TIMER->ARR = pulse_length;
 800b772:	4b14      	ldr	r3, [pc, #80]	@ (800b7c4 <TIM4_IRQHandler+0x8c>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a0f      	ldr	r2, [pc, #60]	@ (800b7b4 <TIM4_IRQHandler+0x7c>)
 800b778:	62d3      	str	r3, [r2, #44]	@ 0x2c
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 800b77a:	4b13      	ldr	r3, [pc, #76]	@ (800b7c8 <TIM4_IRQHandler+0x90>)
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	490f      	ldr	r1, [pc, #60]	@ (800b7bc <TIM4_IRQHandler+0x84>)
 800b780:	f891 10e8 	ldrb.w	r1, [r1, #232]	@ 0xe8
 800b784:	404b      	eors	r3, r1
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 800b786:	f3c3 0000 	ubfx	r0, r3, #0, #1
 800b78a:	490d      	ldr	r1, [pc, #52]	@ (800b7c0 <TIM4_IRQHandler+0x88>)
 800b78c:	f881 00b4 	strb.w	r0, [r1, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 800b790:	f3c3 0040 	ubfx	r0, r3, #1, #1
 800b794:	f881 00ac 	strb.w	r0, [r1, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 800b798:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b79c:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 800b7a0:	f881 3088 	strb.w	r3, [r1, #136]	@ 0x88
        PULSE_TIMER->EGR = TIM_EGR_UG;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	6153      	str	r3, [r2, #20]
        PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 800b7a8:	6813      	ldr	r3, [r2, #0]
 800b7aa:	f043 0301 	orr.w	r3, r3, #1
 800b7ae:	6013      	str	r3, [r2, #0]
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	40000800 	.word	0x40000800
 800b7b8:	200007d8 	.word	0x200007d8
 800b7bc:	200022f4 	.word	0x200022f4
 800b7c0:	42418200 	.word	0x42418200
 800b7c4:	200007dc 	.word	0x200007dc
 800b7c8:	200007c4 	.word	0x200007c4

0800b7cc <EXTI15_10_IRQHandler>:
#endif

#if (DRIVER_IRQMASK|AUXINPUT_MASK) & (0xFC00)

void EXTI15_10_IRQHandler(void)
{
 800b7cc:	b508      	push	{r3, lr}
    uint32_t ifg = __HAL_GPIO_EXTI_GET_IT(0xFC00);
 800b7ce:	4b07      	ldr	r3, [pc, #28]	@ (800b7ec <EXTI15_10_IRQHandler+0x20>)
 800b7d0:	695b      	ldr	r3, [r3, #20]

    if(ifg) {
 800b7d2:	f413 407c 	ands.w	r0, r3, #64512	@ 0xfc00
 800b7d6:	d004      	beq.n	800b7e2 <EXTI15_10_IRQHandler+0x16>
        __HAL_GPIO_EXTI_CLEAR_IT(ifg);
 800b7d8:	4a04      	ldr	r2, [pc, #16]	@ (800b7ec <EXTI15_10_IRQHandler+0x20>)
 800b7da:	6150      	str	r0, [r2, #20]
#if CONTROL_MASK & 0xFC00
        if(ifg & CONTROL_MASK)
            hal.control.interrupt_callback(systemGetState());
#endif
#if LIMIT_MASK & 0xFC00
        if(ifg & LIMIT_MASK)
 800b7dc:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 800b7e0:	d100      	bne.n	800b7e4 <EXTI15_10_IRQHandler+0x18>
#if AUXINPUT_MASK & 0xFC00
        if(ifg & aux_irq)
            aux_pin_irq(ifg & aux_irq);
#endif
    }
}
 800b7e2:	bd08      	pop	{r3, pc}
            core_pin_irq(ifg);
 800b7e4:	f7ff fcb2 	bl	800b14c <core_pin_irq>
}
 800b7e8:	e7fb      	b.n	800b7e2 <EXTI15_10_IRQHandler+0x16>
 800b7ea:	bf00      	nop
 800b7ec:	40013c00 	.word	0x40013c00

0800b7f0 <Driver_IncTick>:

#endif

// Interrupt handler for 1 ms interval timer
void Driver_IncTick (void)
{
 800b7f0:	b508      	push	{r3, lr}
            }
        }
    }
#endif

    if(delay.ms && !(--delay.ms)) {
 800b7f2:	4b07      	ldr	r3, [pc, #28]	@ (800b810 <Driver_IncTick+0x20>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	b153      	cbz	r3, 800b80e <Driver_IncTick+0x1e>
 800b7f8:	4a05      	ldr	r2, [pc, #20]	@ (800b810 <Driver_IncTick+0x20>)
 800b7fa:	6813      	ldr	r3, [r2, #0]
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	6013      	str	r3, [r2, #0]
 800b800:	b92b      	cbnz	r3, 800b80e <Driver_IncTick+0x1e>
        if(delay.callback) {
 800b802:	6853      	ldr	r3, [r2, #4]
 800b804:	b11b      	cbz	r3, 800b80e <Driver_IncTick+0x1e>
            delay.callback();
 800b806:	4798      	blx	r3
            delay.callback = NULL;
 800b808:	4b01      	ldr	r3, [pc, #4]	@ (800b810 <Driver_IncTick+0x20>)
 800b80a:	2200      	movs	r2, #0
 800b80c:	605a      	str	r2, [r3, #4]
        }
    }
}
 800b80e:	bd08      	pop	{r3, pc}
 800b810:	2000000c 	.word	0x2000000c

0800b814 <memcpy_from_flash>:

extern void *_EEPROM_Emul_Start;
extern uint8_t _EEPROM_Emul_Sector;

bool memcpy_from_flash (uint8_t *dest)
{
 800b814:	b508      	push	{r3, lr}
    memcpy(dest, &_EEPROM_Emul_Start, hal.nvs.size);
 800b816:	4b04      	ldr	r3, [pc, #16]	@ (800b828 <memcpy_from_flash+0x14>)
 800b818:	f8d3 2178 	ldr.w	r2, [r3, #376]	@ 0x178
 800b81c:	4903      	ldr	r1, [pc, #12]	@ (800b82c <memcpy_from_flash+0x18>)
 800b81e:	f019 fce2 	bl	80251e6 <memcpy>

    return true;
}
 800b822:	2001      	movs	r0, #1
 800b824:	bd08      	pop	{r3, pc}
 800b826:	bf00      	nop
 800b828:	200018dc 	.word	0x200018dc
 800b82c:	08004000 	.word	0x08004000

0800b830 <memcpy_to_flash>:

bool memcpy_to_flash (uint8_t *source)
{
 800b830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b834:	b082      	sub	sp, #8
 800b836:	4605      	mov	r5, r0
    if (!memcmp(source, &_EEPROM_Emul_Start, hal.nvs.size))
 800b838:	4b21      	ldr	r3, [pc, #132]	@ (800b8c0 <memcpy_to_flash+0x90>)
 800b83a:	f8d3 2178 	ldr.w	r2, [r3, #376]	@ 0x178
 800b83e:	4921      	ldr	r1, [pc, #132]	@ (800b8c4 <memcpy_to_flash+0x94>)
 800b840:	f019 fb47 	bl	8024ed2 <memcmp>
 800b844:	b918      	cbnz	r0, 800b84e <memcpy_to_flash+0x1e>
        return true;
 800b846:	2001      	movs	r0, #1

        HAL_FLASH_Lock();
    }

    return status == HAL_OK;
}
 800b848:	b002      	add	sp, #8
 800b84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((status = HAL_FLASH_Unlock()) == HAL_OK) {
 800b84e:	f7fd fcaf 	bl	80091b0 <HAL_FLASH_Unlock>
 800b852:	4604      	mov	r4, r0
 800b854:	b118      	cbz	r0, 800b85e <memcpy_to_flash+0x2e>
    return status == HAL_OK;
 800b856:	fab4 f084 	clz	r0, r4
 800b85a:	0940      	lsrs	r0, r0, #5
 800b85c:	e7f4      	b.n	800b848 <memcpy_to_flash+0x18>
        if((status = HAL_FLASHEx_Erase(&erase, &error)) != HAL_OK)
 800b85e:	a901      	add	r1, sp, #4
 800b860:	4819      	ldr	r0, [pc, #100]	@ (800b8c8 <memcpy_to_flash+0x98>)
 800b862:	f7fd fd9d 	bl	80093a0 <HAL_FLASHEx_Erase>
 800b866:	4604      	mov	r4, r0
 800b868:	b920      	cbnz	r0, 800b874 <memcpy_to_flash+0x44>
        uint32_t address = (uint32_t)&_EEPROM_Emul_Start, remaining = (uint32_t)hal.nvs.size;
 800b86a:	4f16      	ldr	r7, [pc, #88]	@ (800b8c4 <memcpy_to_flash+0x94>)
 800b86c:	4b14      	ldr	r3, [pc, #80]	@ (800b8c0 <memcpy_to_flash+0x90>)
 800b86e:	f8d3 8178 	ldr.w	r8, [r3, #376]	@ 0x178
        while(remaining && status == HAL_OK) {
 800b872:	e009      	b.n	800b888 <memcpy_to_flash+0x58>
            status = HAL_FLASHEx_Erase(&erase, &error);
 800b874:	a901      	add	r1, sp, #4
 800b876:	4814      	ldr	r0, [pc, #80]	@ (800b8c8 <memcpy_to_flash+0x98>)
 800b878:	f7fd fd92 	bl	80093a0 <HAL_FLASHEx_Erase>
 800b87c:	4604      	mov	r4, r0
 800b87e:	e7f4      	b.n	800b86a <memcpy_to_flash+0x3a>
            address += 4;
 800b880:	3704      	adds	r7, #4
            remaining -= 4;
 800b882:	f1a8 0804 	sub.w	r8, r8, #4
 800b886:	4635      	mov	r5, r6
        while(remaining && status == HAL_OK) {
 800b888:	f1b8 0f00 	cmp.w	r8, #0
 800b88c:	d014      	beq.n	800b8b8 <memcpy_to_flash+0x88>
 800b88e:	b99c      	cbnz	r4, 800b8b8 <memcpy_to_flash+0x88>
            if((status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data++)) == HAL_OK)
 800b890:	462e      	mov	r6, r5
 800b892:	f836 2b02 	ldrh.w	r2, [r6], #2
 800b896:	2300      	movs	r3, #0
 800b898:	4639      	mov	r1, r7
 800b89a:	2001      	movs	r0, #1
 800b89c:	f7fd fcda 	bl	8009254 <HAL_FLASH_Program>
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d1ec      	bne.n	800b880 <memcpy_to_flash+0x50>
                status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, *data++);
 800b8a6:	1d2e      	adds	r6, r5, #4
 800b8a8:	886a      	ldrh	r2, [r5, #2]
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	1cb9      	adds	r1, r7, #2
 800b8ae:	2001      	movs	r0, #1
 800b8b0:	f7fd fcd0 	bl	8009254 <HAL_FLASH_Program>
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	e7e3      	b.n	800b880 <memcpy_to_flash+0x50>
        HAL_FLASH_Lock();
 800b8b8:	f7fd fc92 	bl	80091e0 <HAL_FLASH_Lock>
 800b8bc:	e7cb      	b.n	800b856 <memcpy_to_flash+0x26>
 800b8be:	bf00      	nop
 800b8c0:	200018dc 	.word	0x200018dc
 800b8c4:	08004000 	.word	0x08004000
 800b8c8:	20000160 	.word	0x20000160

0800b8cc <digital_out>:
    return output->id < digital.out.n_ports;
}

static void digital_out (uint8_t port, bool on)
{
    if(port < digital.out.n_ports) {
 800b8cc:	4b0d      	ldr	r3, [pc, #52]	@ (800b904 <digital_out+0x38>)
 800b8ce:	7b1b      	ldrb	r3, [r3, #12]
 800b8d0:	4283      	cmp	r3, r0
 800b8d2:	d916      	bls.n	800b902 <digital_out+0x36>
        port = ioports_map(digital.out, port);
 800b8d4:	4b0b      	ldr	r3, [pc, #44]	@ (800b904 <digital_out+0x38>)
 800b8d6:	691b      	ldr	r3, [r3, #16]
 800b8d8:	b103      	cbz	r3, 800b8dc <digital_out+0x10>
 800b8da:	5c18      	ldrb	r0, [r3, r0]
        DIGITAL_OUT(aux_out[port].port, aux_out[port].pin, aux_out[port].mode.inverted ? !on : on);
 800b8dc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800b8e0:	4b09      	ldr	r3, [pc, #36]	@ (800b908 <digital_out+0x3c>)
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800b8e8:	7c53      	ldrb	r3, [r2, #17]
 800b8ea:	f013 0f04 	tst.w	r3, #4
 800b8ee:	d001      	beq.n	800b8f4 <digital_out+0x28>
 800b8f0:	f081 0101 	eor.w	r1, r1, #1
 800b8f4:	6850      	ldr	r0, [r2, #4]
 800b8f6:	4b05      	ldr	r3, [pc, #20]	@ (800b90c <digital_out+0x40>)
 800b8f8:	4403      	add	r3, r0
 800b8fa:	015b      	lsls	r3, r3, #5
 800b8fc:	7a12      	ldrb	r2, [r2, #8]
 800b8fe:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    }
}
 800b902:	4770      	bx	lr
 800b904:	20000820 	.word	0x20000820
 800b908:	20000818 	.word	0x20000818
 800b90c:	c2100014 	.word	0xc2100014

0800b910 <digital_out_state>:

static float digital_out_state (xbar_t *output)
{
    float value = -1.0f;

    if(output->id < digital.out.n_ports)
 800b910:	7803      	ldrb	r3, [r0, #0]
 800b912:	4a0f      	ldr	r2, [pc, #60]	@ (800b950 <digital_out_state+0x40>)
 800b914:	7b12      	ldrb	r2, [r2, #12]
 800b916:	4293      	cmp	r3, r2
 800b918:	d217      	bcs.n	800b94a <digital_out_state+0x3a>
        value = (float)(DIGITAL_IN(aux_out[output->id].port, aux_out[output->id].pin) ^ aux_out[output->id].mode.inverted);
 800b91a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b91e:	4a0d      	ldr	r2, [pc, #52]	@ (800b954 <digital_out_state+0x44>)
 800b920:	6812      	ldr	r2, [r2, #0]
 800b922:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b926:	6853      	ldr	r3, [r2, #4]
 800b928:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800b92c:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800b930:	015b      	lsls	r3, r3, #5
 800b932:	7a11      	ldrb	r1, [r2, #8]
 800b934:	f813 3021 	ldrb.w	r3, [r3, r1, lsl #2]
 800b938:	7c52      	ldrb	r2, [r2, #17]
 800b93a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800b93e:	4053      	eors	r3, r2
 800b940:	ee00 3a10 	vmov	s0, r3
 800b944:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b948:	4770      	bx	lr
    float value = -1.0f;
 800b94a:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0

    return value;
}
 800b94e:	4770      	bx	lr
 800b950:	20000820 	.word	0x20000820
 800b954:	20000818 	.word	0x20000818

0800b958 <digital_in_state>:

static float digital_in_state (xbar_t *input)
{
    float value = -1.0f;

    if(input->id < digital.in.n_ports)
 800b958:	7803      	ldrb	r3, [r0, #0]
 800b95a:	4a0f      	ldr	r2, [pc, #60]	@ (800b998 <digital_in_state+0x40>)
 800b95c:	7912      	ldrb	r2, [r2, #4]
 800b95e:	4293      	cmp	r3, r2
 800b960:	d217      	bcs.n	800b992 <digital_in_state+0x3a>
        value = (float)(DIGITAL_IN(aux_in[input->id].port, aux_in[input->id].pin) ^ aux_in[input->id].mode.inverted);
 800b962:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800b966:	4a0d      	ldr	r2, [pc, #52]	@ (800b99c <digital_in_state+0x44>)
 800b968:	6812      	ldr	r2, [r2, #0]
 800b96a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b96e:	68d3      	ldr	r3, [r2, #12]
 800b970:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800b974:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800b978:	015b      	lsls	r3, r3, #5
 800b97a:	7991      	ldrb	r1, [r2, #6]
 800b97c:	f813 3021 	ldrb.w	r3, [r3, r1, lsl #2]
 800b980:	7952      	ldrb	r2, [r2, #5]
 800b982:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800b986:	4053      	eors	r3, r2
 800b988:	ee00 3a10 	vmov	s0, r3
 800b98c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b990:	4770      	bx	lr
    float value = -1.0f;
 800b992:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0

    return value;
}
 800b996:	4770      	bx	lr
 800b998:	20000820 	.word	0x20000820
 800b99c:	2000081c 	.word	0x2000081c

0800b9a0 <get_pin_info>:
{
    static xbar_t pin;

    xbar_t *info = NULL;

    if(type == Port_Digital) {
 800b9a0:	2801      	cmp	r0, #1
 800b9a2:	d16f      	bne.n	800ba84 <get_pin_info+0xe4>
{
 800b9a4:	b530      	push	{r4, r5, lr}

        if(dir == Port_Input && port < digital.in.n_ports) {
 800b9a6:	2900      	cmp	r1, #0
 800b9a8:	d136      	bne.n	800ba18 <get_pin_info+0x78>
 800b9aa:	4b37      	ldr	r3, [pc, #220]	@ (800ba88 <get_pin_info+0xe8>)
 800b9ac:	791b      	ldrb	r3, [r3, #4]
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d936      	bls.n	800ba20 <get_pin_info+0x80>
            XBAR_SET_DIN_INFO(pin, ioports_map(digital.in, port), aux_in[pin.id], digital_in_cfg, digital_in_state);
 800b9b2:	4b35      	ldr	r3, [pc, #212]	@ (800ba88 <get_pin_info+0xe8>)
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d02c      	beq.n	800ba14 <get_pin_info+0x74>
 800b9ba:	5c9b      	ldrb	r3, [r3, r2]
 800b9bc:	4833      	ldr	r0, [pc, #204]	@ (800ba8c <get_pin_info+0xec>)
 800b9be:	7003      	strb	r3, [r0, #0]
 800b9c0:	eb03 0ec3 	add.w	lr, r3, r3, lsl #3
 800b9c4:	4b32      	ldr	r3, [pc, #200]	@ (800ba90 <get_pin_info+0xf0>)
 800b9c6:	681c      	ldr	r4, [r3, #0]
 800b9c8:	eb04 038e 	add.w	r3, r4, lr, lsl #2
 800b9cc:	889d      	ldrh	r5, [r3, #4]
 800b9ce:	82c5      	strh	r5, [r0, #22]
 800b9d0:	885d      	ldrh	r5, [r3, #2]
 800b9d2:	8285      	strh	r5, [r0, #20]
 800b9d4:	f890 c015 	ldrb.w	ip, [r0, #21]
 800b9d8:	f04c 0c04 	orr.w	ip, ip, #4
 800b9dc:	f880 c015 	strb.w	ip, [r0, #21]
 800b9e0:	f893 c005 	ldrb.w	ip, [r3, #5]
 800b9e4:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 800b9e8:	f08c 0c01 	eor.w	ip, ip, #1
 800b9ec:	7d45      	ldrb	r5, [r0, #21]
 800b9ee:	f36c 1586 	bfi	r5, ip, #6, #1
 800b9f2:	7545      	strb	r5, [r0, #21]
 800b9f4:	f814 402e 	ldrb.w	r4, [r4, lr, lsl #2]
 800b9f8:	7044      	strb	r4, [r0, #1]
 800b9fa:	691c      	ldr	r4, [r3, #16]
 800b9fc:	6044      	str	r4, [r0, #4]
 800b9fe:	799c      	ldrb	r4, [r3, #6]
 800ba00:	6104      	str	r4, [r0, #16]
 800ba02:	68dc      	ldr	r4, [r3, #12]
 800ba04:	6084      	str	r4, [r0, #8]
 800ba06:	6a1b      	ldr	r3, [r3, #32]
 800ba08:	60c3      	str	r3, [r0, #12]
 800ba0a:	4b22      	ldr	r3, [pc, #136]	@ (800ba94 <get_pin_info+0xf4>)
 800ba0c:	6183      	str	r3, [r0, #24]
 800ba0e:	4b22      	ldr	r3, [pc, #136]	@ (800ba98 <get_pin_info+0xf8>)
 800ba10:	61c3      	str	r3, [r0, #28]
            info = &pin;
 800ba12:	e002      	b.n	800ba1a <get_pin_info+0x7a>
            XBAR_SET_DIN_INFO(pin, ioports_map(digital.in, port), aux_in[pin.id], digital_in_cfg, digital_in_state);
 800ba14:	4613      	mov	r3, r2
 800ba16:	e7d1      	b.n	800b9bc <get_pin_info+0x1c>
    xbar_t *info = NULL;
 800ba18:	2000      	movs	r0, #0
        }

        if(dir == Port_Output && port < digital.out.n_ports) {
 800ba1a:	2901      	cmp	r1, #1
 800ba1c:	d002      	beq.n	800ba24 <get_pin_info+0x84>
            info = &pin;
        }
    }

    return info;
}
 800ba1e:	bd30      	pop	{r4, r5, pc}
    xbar_t *info = NULL;
 800ba20:	2000      	movs	r0, #0
 800ba22:	e7fa      	b.n	800ba1a <get_pin_info+0x7a>
        if(dir == Port_Output && port < digital.out.n_ports) {
 800ba24:	4b18      	ldr	r3, [pc, #96]	@ (800ba88 <get_pin_info+0xe8>)
 800ba26:	7b1b      	ldrb	r3, [r3, #12]
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d9f8      	bls.n	800ba1e <get_pin_info+0x7e>
            XBAR_SET_DOUT_INFO(pin, ioports_map(digital.out, port), aux_out[pin.id], digital_out_cfg, digital_out_state);
 800ba2c:	4b16      	ldr	r3, [pc, #88]	@ (800ba88 <get_pin_info+0xe8>)
 800ba2e:	691b      	ldr	r3, [r3, #16]
 800ba30:	b103      	cbz	r3, 800ba34 <get_pin_info+0x94>
 800ba32:	5c9a      	ldrb	r2, [r3, r2]
 800ba34:	4815      	ldr	r0, [pc, #84]	@ (800ba8c <get_pin_info+0xec>)
 800ba36:	7002      	strb	r2, [r0, #0]
 800ba38:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800ba3c:	4b17      	ldr	r3, [pc, #92]	@ (800ba9c <get_pin_info+0xfc>)
 800ba3e:	681c      	ldr	r4, [r3, #0]
 800ba40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba44:	8a19      	ldrh	r1, [r3, #16]
 800ba46:	82c1      	strh	r1, [r0, #22]
 800ba48:	8a19      	ldrh	r1, [r3, #16]
 800ba4a:	8281      	strh	r1, [r0, #20]
 800ba4c:	7d41      	ldrb	r1, [r0, #21]
 800ba4e:	f041 0104 	orr.w	r1, r1, #4
 800ba52:	7541      	strb	r1, [r0, #21]
 800ba54:	7c59      	ldrb	r1, [r3, #17]
 800ba56:	0989      	lsrs	r1, r1, #6
 800ba58:	f081 0101 	eor.w	r1, r1, #1
 800ba5c:	7d45      	ldrb	r5, [r0, #21]
 800ba5e:	f361 1586 	bfi	r5, r1, #6, #1
 800ba62:	7545      	strb	r5, [r0, #21]
 800ba64:	f814 2022 	ldrb.w	r2, [r4, r2, lsl #2]
 800ba68:	7042      	strb	r2, [r0, #1]
 800ba6a:	68da      	ldr	r2, [r3, #12]
 800ba6c:	6042      	str	r2, [r0, #4]
 800ba6e:	7a1a      	ldrb	r2, [r3, #8]
 800ba70:	6102      	str	r2, [r0, #16]
 800ba72:	685a      	ldr	r2, [r3, #4]
 800ba74:	6082      	str	r2, [r0, #8]
 800ba76:	695b      	ldr	r3, [r3, #20]
 800ba78:	60c3      	str	r3, [r0, #12]
 800ba7a:	4b09      	ldr	r3, [pc, #36]	@ (800baa0 <get_pin_info+0x100>)
 800ba7c:	6183      	str	r3, [r0, #24]
 800ba7e:	4b09      	ldr	r3, [pc, #36]	@ (800baa4 <get_pin_info+0x104>)
 800ba80:	61c3      	str	r3, [r0, #28]
            info = &pin;
 800ba82:	e7cc      	b.n	800ba1e <get_pin_info+0x7e>
    xbar_t *info = NULL;
 800ba84:	2000      	movs	r0, #0
}
 800ba86:	4770      	bx	lr
 800ba88:	20000820 	.word	0x20000820
 800ba8c:	200007ec 	.word	0x200007ec
 800ba90:	2000081c 	.word	0x2000081c
 800ba94:	0800bbf9 	.word	0x0800bbf9
 800ba98:	0800b959 	.word	0x0800b959
 800ba9c:	20000818 	.word	0x20000818
 800baa0:	0800bb19 	.word	0x0800bb19
 800baa4:	0800b911 	.word	0x0800b911

0800baa8 <set_pin_description>:

static void set_pin_description (io_port_type_t type, io_port_direction_t dir, uint8_t port, const char *s)
{
    if(type == Port_Digital) {
 800baa8:	2801      	cmp	r0, #1
 800baaa:	d000      	beq.n	800baae <set_pin_description+0x6>
 800baac:	4770      	bx	lr
{
 800baae:	b410      	push	{r4}
        if(dir == Port_Input && port < digital.in.n_ports)
 800bab0:	b971      	cbnz	r1, 800bad0 <set_pin_description+0x28>
 800bab2:	4816      	ldr	r0, [pc, #88]	@ (800bb0c <set_pin_description+0x64>)
 800bab4:	7900      	ldrb	r0, [r0, #4]
 800bab6:	4290      	cmp	r0, r2
 800bab8:	d90a      	bls.n	800bad0 <set_pin_description+0x28>
            aux_in[ioports_map(digital.in, port)].description = s;
 800baba:	4815      	ldr	r0, [pc, #84]	@ (800bb10 <set_pin_description+0x68>)
 800babc:	6804      	ldr	r4, [r0, #0]
 800babe:	4813      	ldr	r0, [pc, #76]	@ (800bb0c <set_pin_description+0x64>)
 800bac0:	6880      	ldr	r0, [r0, #8]
 800bac2:	b150      	cbz	r0, 800bada <set_pin_description+0x32>
 800bac4:	5c80      	ldrb	r0, [r0, r2]
 800bac6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800baca:	0080      	lsls	r0, r0, #2
 800bacc:	4420      	add	r0, r4
 800bace:	6203      	str	r3, [r0, #32]
        if(dir == Port_Output && port < digital.out.n_ports)
 800bad0:	2901      	cmp	r1, #1
 800bad2:	d006      	beq.n	800bae2 <set_pin_description+0x3a>
            aux_out[ioports_map(digital.out, port)].description = s;
    }
}
 800bad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bad8:	4770      	bx	lr
            aux_in[ioports_map(digital.in, port)].description = s;
 800bada:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
 800bade:	0080      	lsls	r0, r0, #2
 800bae0:	e7f4      	b.n	800bacc <set_pin_description+0x24>
        if(dir == Port_Output && port < digital.out.n_ports)
 800bae2:	490a      	ldr	r1, [pc, #40]	@ (800bb0c <set_pin_description+0x64>)
 800bae4:	7b09      	ldrb	r1, [r1, #12]
 800bae6:	4291      	cmp	r1, r2
 800bae8:	d9f4      	bls.n	800bad4 <set_pin_description+0x2c>
            aux_out[ioports_map(digital.out, port)].description = s;
 800baea:	490a      	ldr	r1, [pc, #40]	@ (800bb14 <set_pin_description+0x6c>)
 800baec:	6809      	ldr	r1, [r1, #0]
 800baee:	4807      	ldr	r0, [pc, #28]	@ (800bb0c <set_pin_description+0x64>)
 800baf0:	6900      	ldr	r0, [r0, #16]
 800baf2:	b130      	cbz	r0, 800bb02 <set_pin_description+0x5a>
 800baf4:	5c82      	ldrb	r2, [r0, r2]
 800baf6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800bafa:	0092      	lsls	r2, r2, #2
 800bafc:	440a      	add	r2, r1
 800bafe:	6153      	str	r3, [r2, #20]
}
 800bb00:	e7e8      	b.n	800bad4 <set_pin_description+0x2c>
            aux_out[ioports_map(digital.out, port)].description = s;
 800bb02:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800bb06:	0092      	lsls	r2, r2, #2
 800bb08:	e7f8      	b.n	800bafc <set_pin_description+0x54>
 800bb0a:	bf00      	nop
 800bb0c:	20000820 	.word	0x20000820
 800bb10:	2000081c 	.word	0x2000081c
 800bb14:	20000818 	.word	0x20000818

0800bb18 <digital_out_cfg>:
{
 800bb18:	b570      	push	{r4, r5, r6, lr}
 800bb1a:	4604      	mov	r4, r0
    if(output->id < digital.out.n_ports) {
 800bb1c:	7803      	ldrb	r3, [r0, #0]
 800bb1e:	4833      	ldr	r0, [pc, #204]	@ (800bbec <digital_out_cfg+0xd4>)
 800bb20:	7b00      	ldrb	r0, [r0, #12]
 800bb22:	4283      	cmp	r3, r0
 800bb24:	d248      	bcs.n	800bbb8 <digital_out_cfg+0xa0>
        if(config->inverted != aux_out[output->id].mode.inverted) {
 800bb26:	780d      	ldrb	r5, [r1, #0]
 800bb28:	4831      	ldr	r0, [pc, #196]	@ (800bbf0 <digital_out_cfg+0xd8>)
 800bb2a:	6800      	ldr	r0, [r0, #0]
 800bb2c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bb30:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800bb34:	f893 c011 	ldrb.w	ip, [r3, #17]
 800bb38:	f3cc 0c80 	ubfx	ip, ip, #2, #1
 800bb3c:	4565      	cmp	r5, ip
 800bb3e:	d01b      	beq.n	800bb78 <digital_out_cfg+0x60>
            aux_out[output->id].mode.inverted = config->inverted;
 800bb40:	7c5e      	ldrb	r6, [r3, #17]
 800bb42:	f365 0682 	bfi	r6, r5, #2, #1
 800bb46:	745e      	strb	r6, [r3, #17]
            DIGITAL_OUT(aux_out[output->id].port, aux_out[output->id].pin, !DIGITAL_IN(aux_out[output->id].port, aux_out[output->id].pin));
 800bb48:	7823      	ldrb	r3, [r4, #0]
 800bb4a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bb4e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800bb52:	685e      	ldr	r6, [r3, #4]
 800bb54:	f106 4c42 	add.w	ip, r6, #3254779904	@ 0xc2000000
 800bb58:	f10c 1c10 	add.w	ip, ip, #1048592	@ 0x100010
 800bb5c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 800bb60:	7a1d      	ldrb	r5, [r3, #8]
 800bb62:	f81c c025 	ldrb.w	ip, [ip, r5, lsl #2]
 800bb66:	4b23      	ldr	r3, [pc, #140]	@ (800bbf4 <digital_out_cfg+0xdc>)
 800bb68:	4433      	add	r3, r6
 800bb6a:	015b      	lsls	r3, r3, #5
 800bb6c:	fabc fc8c 	clz	ip, ip
 800bb70:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800bb74:	f803 c025 	strb.w	ip, [r3, r5, lsl #2]
        if(config->open_drain != aux_out[output->id].mode.open_drain) {
 800bb78:	784d      	ldrb	r5, [r1, #1]
 800bb7a:	7823      	ldrb	r3, [r4, #0]
 800bb7c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bb80:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800bb84:	f893 c010 	ldrb.w	ip, [r3, #16]
 800bb88:	f3cc 0c80 	ubfx	ip, ip, #2, #1
 800bb8c:	4565      	cmp	r5, ip
 800bb8e:	d012      	beq.n	800bbb6 <digital_out_cfg+0x9e>
            if((aux_out[output->id].mode.open_drain = config->open_drain))
 800bb90:	f893 c010 	ldrb.w	ip, [r3, #16]
 800bb94:	f365 0c82 	bfi	ip, r5, #2, #1
 800bb98:	f883 c010 	strb.w	ip, [r3, #16]
 800bb9c:	b1a5      	cbz	r5, 800bbc8 <digital_out_cfg+0xb0>
                aux_out[output->id].port->OTYPER |= (GPIO_OTYPER_OT_0 << aux_out[output->id].pin);
 800bb9e:	7823      	ldrb	r3, [r4, #0]
 800bba0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bba4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800bba8:	685d      	ldr	r5, [r3, #4]
 800bbaa:	6868      	ldr	r0, [r5, #4]
 800bbac:	7a1e      	ldrb	r6, [r3, #8]
 800bbae:	2301      	movs	r3, #1
 800bbb0:	40b3      	lsls	r3, r6
 800bbb2:	4303      	orrs	r3, r0
 800bbb4:	606b      	str	r3, [r5, #4]
        if(persistent)
 800bbb6:	b9aa      	cbnz	r2, 800bbe4 <digital_out_cfg+0xcc>
    return output->id < digital.out.n_ports;
 800bbb8:	7820      	ldrb	r0, [r4, #0]
 800bbba:	4b0c      	ldr	r3, [pc, #48]	@ (800bbec <digital_out_cfg+0xd4>)
 800bbbc:	7b1b      	ldrb	r3, [r3, #12]
}
 800bbbe:	4298      	cmp	r0, r3
 800bbc0:	bf2c      	ite	cs
 800bbc2:	2000      	movcs	r0, #0
 800bbc4:	2001      	movcc	r0, #1
 800bbc6:	bd70      	pop	{r4, r5, r6, pc}
                aux_out[output->id].port->OTYPER &= ~(GPIO_OTYPER_OT_0 << aux_out[output->id].pin);
 800bbc8:	7823      	ldrb	r3, [r4, #0]
 800bbca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bbce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800bbd2:	6845      	ldr	r5, [r0, #4]
 800bbd4:	686b      	ldr	r3, [r5, #4]
 800bbd6:	7a06      	ldrb	r6, [r0, #8]
 800bbd8:	2001      	movs	r0, #1
 800bbda:	40b0      	lsls	r0, r6
 800bbdc:	ea23 0300 	bic.w	r3, r3, r0
 800bbe0:	606b      	str	r3, [r5, #4]
 800bbe2:	e7e8      	b.n	800bbb6 <digital_out_cfg+0x9e>
            ioport_save_output_settings(output, config);
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	f006 fe9d 	bl	8012924 <ioport_save_output_settings>
 800bbea:	e7e5      	b.n	800bbb8 <digital_out_cfg+0xa0>
 800bbec:	20000820 	.word	0x20000820
 800bbf0:	20000818 	.word	0x20000818
 800bbf4:	c2100014 	.word	0xc2100014

0800bbf8 <digital_in_cfg>:
{
 800bbf8:	b570      	push	{r4, r5, r6, lr}
 800bbfa:	4604      	mov	r4, r0
    if(input->id < digital.in.n_ports && config->pull_mode != PullMode_UpDown) {
 800bbfc:	7803      	ldrb	r3, [r0, #0]
 800bbfe:	482b      	ldr	r0, [pc, #172]	@ (800bcac <digital_in_cfg+0xb4>)
 800bc00:	7900      	ldrb	r0, [r0, #4]
 800bc02:	4283      	cmp	r3, r0
 800bc04:	d245      	bcs.n	800bc92 <digital_in_cfg+0x9a>
 800bc06:	7888      	ldrb	r0, [r1, #2]
 800bc08:	2803      	cmp	r0, #3
 800bc0a:	d042      	beq.n	800bc92 <digital_in_cfg+0x9a>
        aux_in[input->id].mode.inverted = config->inverted;
 800bc0c:	4828      	ldr	r0, [pc, #160]	@ (800bcb0 <digital_in_cfg+0xb8>)
 800bc0e:	6800      	ldr	r0, [r0, #0]
 800bc10:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bc14:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800bc18:	f891 c000 	ldrb.w	ip, [r1]
 800bc1c:	795d      	ldrb	r5, [r3, #5]
 800bc1e:	f36c 0582 	bfi	r5, ip, #2, #1
 800bc22:	715d      	strb	r5, [r3, #5]
        aux_in[input->id].mode.debounce = config->debounce;
 800bc24:	7823      	ldrb	r3, [r4, #0]
 800bc26:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bc2a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800bc2e:	f891 c001 	ldrb.w	ip, [r1, #1]
 800bc32:	795d      	ldrb	r5, [r3, #5]
 800bc34:	f36c 15c7 	bfi	r5, ip, #7, #1
 800bc38:	715d      	strb	r5, [r3, #5]
        aux_in[input->id].mode.pull_mode = config->pull_mode;
 800bc3a:	7823      	ldrb	r3, [r4, #0]
 800bc3c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bc40:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800bc44:	f891 c002 	ldrb.w	ip, [r1, #2]
 800bc48:	791d      	ldrb	r5, [r3, #4]
 800bc4a:	f36c 05c4 	bfi	r5, ip, #3, #2
 800bc4e:	711d      	strb	r5, [r3, #4]
        aux_in[input->id].port->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (input->pin << 1));
 800bc50:	7823      	ldrb	r3, [r4, #0]
 800bc52:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bc56:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800bc5a:	68dd      	ldr	r5, [r3, #12]
 800bc5c:	68eb      	ldr	r3, [r5, #12]
 800bc5e:	6926      	ldr	r6, [r4, #16]
 800bc60:	ea4f 0e46 	mov.w	lr, r6, lsl #1
 800bc64:	f04f 0c03 	mov.w	ip, #3
 800bc68:	fa0c fc0e 	lsl.w	ip, ip, lr
 800bc6c:	ea23 030c 	bic.w	r3, r3, ip
 800bc70:	60eb      	str	r3, [r5, #12]
        aux_in[input->id].port->PUPDR |= (config->pull_mode << (input->pin << 1));
 800bc72:	7823      	ldrb	r3, [r4, #0]
 800bc74:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bc78:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800bc7c:	68c5      	ldr	r5, [r0, #12]
 800bc7e:	68eb      	ldr	r3, [r5, #12]
 800bc80:	7888      	ldrb	r0, [r1, #2]
 800bc82:	6926      	ldr	r6, [r4, #16]
 800bc84:	ea4f 0c46 	mov.w	ip, r6, lsl #1
 800bc88:	fa00 f00c 	lsl.w	r0, r0, ip
 800bc8c:	4303      	orrs	r3, r0
 800bc8e:	60eb      	str	r3, [r5, #12]
        if(persistent)
 800bc90:	b93a      	cbnz	r2, 800bca2 <digital_in_cfg+0xaa>
    return input->id < digital.in.n_ports;
 800bc92:	7820      	ldrb	r0, [r4, #0]
 800bc94:	4b05      	ldr	r3, [pc, #20]	@ (800bcac <digital_in_cfg+0xb4>)
 800bc96:	791b      	ldrb	r3, [r3, #4]
}
 800bc98:	4298      	cmp	r0, r3
 800bc9a:	bf2c      	ite	cs
 800bc9c:	2000      	movcs	r0, #0
 800bc9e:	2001      	movcc	r0, #1
 800bca0:	bd70      	pop	{r4, r5, r6, pc}
            ioport_save_input_settings(input, config);
 800bca2:	4620      	mov	r0, r4
 800bca4:	f006 fdf2 	bl	801288c <ioport_save_input_settings>
 800bca8:	e7f3      	b.n	800bc92 <digital_in_cfg+0x9a>
 800bcaa:	bf00      	nop
 800bcac:	20000820 	.word	0x20000820
 800bcb0:	2000081c 	.word	0x2000081c

0800bcb4 <swap_pins>:

    return ok;
}

static bool swap_pins (io_port_type_t type, io_port_direction_t dir, uint8_t port_a, uint8_t port_b)
{
 800bcb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcb8:	b08a      	sub	sp, #40	@ 0x28
 800bcba:	4686      	mov	lr, r0
    bool ok = port_a == port_b;
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	bf0c      	ite	eq
 800bcc0:	2001      	moveq	r0, #1
 800bcc2:	2000      	movne	r0, #0

    if(!ok && type == Port_Digital) {
 800bcc4:	d005      	beq.n	800bcd2 <swap_pins+0x1e>
 800bcc6:	460d      	mov	r5, r1
 800bcc8:	4694      	mov	ip, r2
 800bcca:	461c      	mov	r4, r3
 800bccc:	f1be 0f01 	cmp.w	lr, #1
 800bcd0:	d002      	beq.n	800bcd8 <swap_pins+0x24>
            memcpy(&aux_out[port_b], &tmp, sizeof(output_signal_t));
        }
    }

    return ok;
}
 800bcd2:	b00a      	add	sp, #40	@ 0x28
 800bcd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                  aux_in[port_a].interrupt_callback == NULL &&
 800bcd8:	b971      	cbnz	r1, 800bcf8 <swap_pins+0x44>
        if((ok = dir == Port_Input && port_a < digital.in.n_ports && port_b < digital.in.n_ports &&
 800bcda:	4b56      	ldr	r3, [pc, #344]	@ (800be34 <swap_pins+0x180>)
 800bcdc:	791b      	ldrb	r3, [r3, #4]
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d90a      	bls.n	800bcf8 <swap_pins+0x44>
 800bce2:	42a3      	cmp	r3, r4
 800bce4:	d908      	bls.n	800bcf8 <swap_pins+0x44>
                  aux_in[port_a].interrupt_callback == NULL &&
 800bce6:	4b54      	ldr	r3, [pc, #336]	@ (800be38 <swap_pins+0x184>)
 800bce8:	681e      	ldr	r6, [r3, #0]
 800bcea:	eb02 0ec2 	add.w	lr, r2, r2, lsl #3
 800bcee:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
 800bcf2:	f8de 2018 	ldr.w	r2, [lr, #24]
        if((ok = dir == Port_Input && port_a < digital.in.n_ports && port_b < digital.in.n_ports &&
 800bcf6:	b11a      	cbz	r2, 800bd00 <swap_pins+0x4c>
        if((ok = dir == Port_Output && port_a < digital.out.n_ports && port_b < digital.out.n_ports)) {
 800bcf8:	2d01      	cmp	r5, #1
 800bcfa:	d04b      	beq.n	800bd94 <swap_pins+0xe0>
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	e7e8      	b.n	800bcd2 <swap_pins+0x1e>
                   aux_in[port_b].interrupt_callback == NULL)) {
 800bd00:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800bd04:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800bd08:	69b3      	ldr	r3, [r6, #24]
                  aux_in[port_a].interrupt_callback == NULL &&
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1f4      	bne.n	800bcf8 <swap_pins+0x44>
            memcpy(&tmp, &aux_in[port_a], sizeof(input_signal_t));
 800bd0e:	4677      	mov	r7, lr
 800bd10:	f10d 0904 	add.w	r9, sp, #4
 800bd14:	f10e 0a20 	add.w	sl, lr, #32
 800bd18:	46c8      	mov	r8, r9
 800bd1a:	6838      	ldr	r0, [r7, #0]
 800bd1c:	6879      	ldr	r1, [r7, #4]
 800bd1e:	68ba      	ldr	r2, [r7, #8]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800bd26:	3710      	adds	r7, #16
 800bd28:	46c1      	mov	r9, r8
 800bd2a:	4557      	cmp	r7, sl
 800bd2c:	d1f4      	bne.n	800bd18 <swap_pins+0x64>
 800bd2e:	6838      	ldr	r0, [r7, #0]
 800bd30:	f8c8 0000 	str.w	r0, [r8]
            memcpy(&aux_in[port_a], &aux_in[port_b], sizeof(input_signal_t));
 800bd34:	4633      	mov	r3, r6
 800bd36:	4672      	mov	r2, lr
 800bd38:	f106 0920 	add.w	r9, r6, #32
 800bd3c:	f8d3 8000 	ldr.w	r8, [r3]
 800bd40:	685f      	ldr	r7, [r3, #4]
 800bd42:	6898      	ldr	r0, [r3, #8]
 800bd44:	68d9      	ldr	r1, [r3, #12]
 800bd46:	f8c2 8000 	str.w	r8, [r2]
 800bd4a:	6057      	str	r7, [r2, #4]
 800bd4c:	6090      	str	r0, [r2, #8]
 800bd4e:	60d1      	str	r1, [r2, #12]
 800bd50:	3310      	adds	r3, #16
 800bd52:	3210      	adds	r2, #16
 800bd54:	454b      	cmp	r3, r9
 800bd56:	d1f1      	bne.n	800bd3c <swap_pins+0x88>
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	6013      	str	r3, [r2, #0]
            aux_in[port_a].description = tmp.description;
 800bd5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd5e:	f8ce 3020 	str.w	r3, [lr, #32]
            tmp.description = aux_in[port_b].description;
 800bd62:	6a33      	ldr	r3, [r6, #32]
 800bd64:	9309      	str	r3, [sp, #36]	@ 0x24
            memcpy(&aux_in[port_b], &tmp, sizeof(input_signal_t));
 800bd66:	af01      	add	r7, sp, #4
 800bd68:	46b6      	mov	lr, r6
 800bd6a:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 800bd6e:	463e      	mov	r6, r7
 800bd70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bd72:	f8ce 0000 	str.w	r0, [lr]
 800bd76:	f8ce 1004 	str.w	r1, [lr, #4]
 800bd7a:	f8ce 2008 	str.w	r2, [lr, #8]
 800bd7e:	f8ce 300c 	str.w	r3, [lr, #12]
 800bd82:	4637      	mov	r7, r6
 800bd84:	f10e 0e10 	add.w	lr, lr, #16
 800bd88:	4546      	cmp	r6, r8
 800bd8a:	d1f0      	bne.n	800bd6e <swap_pins+0xba>
 800bd8c:	6830      	ldr	r0, [r6, #0]
 800bd8e:	f8ce 0000 	str.w	r0, [lr]
 800bd92:	e7b1      	b.n	800bcf8 <swap_pins+0x44>
        if((ok = dir == Port_Output && port_a < digital.out.n_ports && port_b < digital.out.n_ports)) {
 800bd94:	4b27      	ldr	r3, [pc, #156]	@ (800be34 <swap_pins+0x180>)
 800bd96:	7b1b      	ldrb	r3, [r3, #12]
 800bd98:	4563      	cmp	r3, ip
 800bd9a:	d949      	bls.n	800be30 <swap_pins+0x17c>
 800bd9c:	42a3      	cmp	r3, r4
 800bd9e:	d801      	bhi.n	800bda4 <swap_pins+0xf0>
 800bda0:	2000      	movs	r0, #0
 800bda2:	e796      	b.n	800bcd2 <swap_pins+0x1e>
            memcpy(&tmp, &aux_out[port_a], sizeof(output_signal_t));
 800bda4:	4b25      	ldr	r3, [pc, #148]	@ (800be3c <swap_pins+0x188>)
 800bda6:	681e      	ldr	r6, [r3, #0]
 800bda8:	ebcc 0ccc 	rsb	ip, ip, ip, lsl #3
 800bdac:	eb06 058c 	add.w	r5, r6, ip, lsl #2
 800bdb0:	f10d 0e04 	add.w	lr, sp, #4
 800bdb4:	f856 002c 	ldr.w	r0, [r6, ip, lsl #2]
 800bdb8:	6869      	ldr	r1, [r5, #4]
 800bdba:	68aa      	ldr	r2, [r5, #8]
 800bdbc:	68eb      	ldr	r3, [r5, #12]
 800bdbe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bdc2:	6928      	ldr	r0, [r5, #16]
 800bdc4:	6969      	ldr	r1, [r5, #20]
 800bdc6:	69aa      	ldr	r2, [r5, #24]
 800bdc8:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
            memcpy(&aux_out[port_a], &aux_out[port_b], sizeof(output_signal_t));
 800bdcc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800bdd0:	eb06 0e84 	add.w	lr, r6, r4, lsl #2
 800bdd4:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800bdd8:	f8de 2004 	ldr.w	r2, [lr, #4]
 800bddc:	f8de 3008 	ldr.w	r3, [lr, #8]
 800bde0:	f8de 000c 	ldr.w	r0, [lr, #12]
 800bde4:	f846 102c 	str.w	r1, [r6, ip, lsl #2]
 800bde8:	606a      	str	r2, [r5, #4]
 800bdea:	60ab      	str	r3, [r5, #8]
 800bdec:	60e8      	str	r0, [r5, #12]
 800bdee:	f8de 1010 	ldr.w	r1, [lr, #16]
 800bdf2:	f8de 2014 	ldr.w	r2, [lr, #20]
 800bdf6:	f8de 3018 	ldr.w	r3, [lr, #24]
 800bdfa:	6129      	str	r1, [r5, #16]
 800bdfc:	616a      	str	r2, [r5, #20]
 800bdfe:	61ab      	str	r3, [r5, #24]
            aux_out[port_a].description = tmp.description;
 800be00:	9b06      	ldr	r3, [sp, #24]
 800be02:	616b      	str	r3, [r5, #20]
            tmp.description = aux_out[port_b].description;
 800be04:	f8de 3014 	ldr.w	r3, [lr, #20]
 800be08:	9306      	str	r3, [sp, #24]
            memcpy(&aux_out[port_b], &tmp, sizeof(output_signal_t));
 800be0a:	ad01      	add	r5, sp, #4
 800be0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be0e:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 800be12:	f8ce 1004 	str.w	r1, [lr, #4]
 800be16:	f8ce 2008 	str.w	r2, [lr, #8]
 800be1a:	f8ce 300c 	str.w	r3, [lr, #12]
 800be1e:	cd07      	ldmia	r5!, {r0, r1, r2}
 800be20:	f8ce 0010 	str.w	r0, [lr, #16]
 800be24:	f8ce 1014 	str.w	r1, [lr, #20]
 800be28:	f8ce 2018 	str.w	r2, [lr, #24]
        if((ok = dir == Port_Output && port_a < digital.out.n_ports && port_b < digital.out.n_ports)) {
 800be2c:	2001      	movs	r0, #1
 800be2e:	e750      	b.n	800bcd2 <swap_pins+0x1e>
 800be30:	2000      	movs	r0, #0
 800be32:	e74e      	b.n	800bcd2 <swap_pins+0x1e>
 800be34:	20000820 	.word	0x20000820
 800be38:	2000081c 	.word	0x2000081c
 800be3c:	20000818 	.word	0x20000818

0800be40 <claim>:
    if(type == Port_Digital) {
 800be40:	2801      	cmp	r0, #1
 800be42:	d001      	beq.n	800be48 <claim+0x8>
    bool ok = false;
 800be44:	2000      	movs	r0, #0
}
 800be46:	4770      	bx	lr
{
 800be48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be4c:	4615      	mov	r5, r2
 800be4e:	461c      	mov	r4, r3
        if(dir == Port_Input) {
 800be50:	2900      	cmp	r1, #0
 800be52:	d166      	bne.n	800bf22 <claim+0xe2>
            if((ok = digital.in.map && *port < digital.in.n_ports && !aux_in[*port].mode.claimed)) {
 800be54:	4b62      	ldr	r3, [pc, #392]	@ (800bfe0 <claim+0x1a0>)
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f000 80b8 	beq.w	800bfce <claim+0x18e>
 800be5e:	7813      	ldrb	r3, [r2, #0]
 800be60:	4a5f      	ldr	r2, [pc, #380]	@ (800bfe0 <claim+0x1a0>)
 800be62:	7912      	ldrb	r2, [r2, #4]
 800be64:	4293      	cmp	r3, r2
 800be66:	f080 80b4 	bcs.w	800bfd2 <claim+0x192>
 800be6a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800be6e:	4a5d      	ldr	r2, [pc, #372]	@ (800bfe4 <claim+0x1a4>)
 800be70:	6812      	ldr	r2, [r2, #0]
 800be72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be76:	795b      	ldrb	r3, [r3, #5]
 800be78:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800be7c:	d001      	beq.n	800be82 <claim+0x42>
 800be7e:	2000      	movs	r0, #0
 800be80:	e0a8      	b.n	800bfd4 <claim+0x194>
                hal.port.num_digital_in--;
 800be82:	4a59      	ldr	r2, [pc, #356]	@ (800bfe8 <claim+0x1a8>)
 800be84:	f892 3114 	ldrb.w	r3, [r2, #276]	@ 0x114
 800be88:	3b01      	subs	r3, #1
 800be8a:	f882 3114 	strb.w	r3, [r2, #276]	@ 0x114
                for(i = ioports_map_reverse(&digital.in, *port); i < hal.port.num_digital_in ; i++) {
 800be8e:	7829      	ldrb	r1, [r5, #0]
 800be90:	4856      	ldr	r0, [pc, #344]	@ (800bfec <claim+0x1ac>)
 800be92:	f006 fad3 	bl	801243c <ioports_map_reverse>
 800be96:	4606      	mov	r6, r0
 800be98:	e019      	b.n	800bece <claim+0x8e>
                    digital.in.map[i] = digital.in.map[i + 1];
 800be9a:	4851      	ldr	r0, [pc, #324]	@ (800bfe0 <claim+0x1a0>)
 800be9c:	6883      	ldr	r3, [r0, #8]
 800be9e:	199a      	adds	r2, r3, r6
 800bea0:	7852      	ldrb	r2, [r2, #1]
 800bea2:	559a      	strb	r2, [r3, r6]
                    aux_in[digital.in.map[i]].user_port = i;
 800bea4:	4b4f      	ldr	r3, [pc, #316]	@ (800bfe4 <claim+0x1a4>)
 800bea6:	681f      	ldr	r7, [r3, #0]
 800bea8:	6881      	ldr	r1, [r0, #8]
 800beaa:	5d8b      	ldrb	r3, [r1, r6]
 800beac:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800beb0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800beb4:	751e      	strb	r6, [r3, #20]
                    aux_in[digital.in.map[i]].description = iports_get_pnum(digital, i);
 800beb6:	f8d0 8014 	ldr.w	r8, [r0, #20]
 800beba:	5d8b      	ldrb	r3, [r1, r6]
 800bebc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bec0:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800bec4:	4631      	mov	r1, r6
 800bec6:	47c0      	blx	r8
 800bec8:	6238      	str	r0, [r7, #32]
                for(i = ioports_map_reverse(&digital.in, *port); i < hal.port.num_digital_in ; i++) {
 800beca:	3601      	adds	r6, #1
 800becc:	b2f6      	uxtb	r6, r6
 800bece:	4b46      	ldr	r3, [pc, #280]	@ (800bfe8 <claim+0x1a8>)
 800bed0:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800bed4:	42b3      	cmp	r3, r6
 800bed6:	d8e0      	bhi.n	800be9a <claim+0x5a>
                aux_in[*port].mode.claimed = On;
 800bed8:	4b42      	ldr	r3, [pc, #264]	@ (800bfe4 <claim+0x1a4>)
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	782b      	ldrb	r3, [r5, #0]
 800bede:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bee2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bee6:	7959      	ldrb	r1, [r3, #5]
 800bee8:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800beec:	7159      	strb	r1, [r3, #5]
                aux_in[*port].user_port = hal.port.num_digital_in;
 800beee:	782b      	ldrb	r3, [r5, #0]
 800bef0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bef4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bef8:	493b      	ldr	r1, [pc, #236]	@ (800bfe8 <claim+0x1a8>)
 800befa:	f891 0114 	ldrb.w	r0, [r1, #276]	@ 0x114
 800befe:	7518      	strb	r0, [r3, #20]
                aux_in[*port].description = description;
 800bf00:	782b      	ldrb	r3, [r5, #0]
 800bf02:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bf06:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bf0a:	6214      	str	r4, [r2, #32]
                digital.in.map[hal.port.num_digital_in] = *port;
 800bf0c:	4b34      	ldr	r3, [pc, #208]	@ (800bfe0 <claim+0x1a0>)
 800bf0e:	689a      	ldr	r2, [r3, #8]
 800bf10:	f891 3114 	ldrb.w	r3, [r1, #276]	@ 0x114
 800bf14:	7828      	ldrb	r0, [r5, #0]
 800bf16:	54d0      	strb	r0, [r2, r3]
                *port = hal.port.num_digital_in;
 800bf18:	f891 3114 	ldrb.w	r3, [r1, #276]	@ 0x114
 800bf1c:	702b      	strb	r3, [r5, #0]
            if((ok = digital.in.map && *port < digital.in.n_ports && !aux_in[*port].mode.claimed)) {
 800bf1e:	2001      	movs	r0, #1
 800bf20:	e058      	b.n	800bfd4 <claim+0x194>
        } else if((ok = digital.out.map && *port < digital.out.n_ports && !aux_out[*port].mode.claimed)) {
 800bf22:	4b2f      	ldr	r3, [pc, #188]	@ (800bfe0 <claim+0x1a0>)
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d056      	beq.n	800bfd8 <claim+0x198>
 800bf2a:	7813      	ldrb	r3, [r2, #0]
 800bf2c:	4a2c      	ldr	r2, [pc, #176]	@ (800bfe0 <claim+0x1a0>)
 800bf2e:	7b12      	ldrb	r2, [r2, #12]
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d253      	bcs.n	800bfdc <claim+0x19c>
 800bf34:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bf38:	4a2d      	ldr	r2, [pc, #180]	@ (800bff0 <claim+0x1b0>)
 800bf3a:	6812      	ldr	r2, [r2, #0]
 800bf3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf40:	7c5b      	ldrb	r3, [r3, #17]
 800bf42:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800bf46:	d001      	beq.n	800bf4c <claim+0x10c>
 800bf48:	2000      	movs	r0, #0
 800bf4a:	e043      	b.n	800bfd4 <claim+0x194>
            hal.port.num_digital_out--;
 800bf4c:	4a26      	ldr	r2, [pc, #152]	@ (800bfe8 <claim+0x1a8>)
 800bf4e:	f892 3115 	ldrb.w	r3, [r2, #277]	@ 0x115
 800bf52:	3b01      	subs	r3, #1
 800bf54:	f882 3115 	strb.w	r3, [r2, #277]	@ 0x115
            for(i = ioports_map_reverse(&digital.out, *port); i < hal.port.num_digital_out; i++) {
 800bf58:	7829      	ldrb	r1, [r5, #0]
 800bf5a:	4826      	ldr	r0, [pc, #152]	@ (800bff4 <claim+0x1b4>)
 800bf5c:	f006 fa6e 	bl	801243c <ioports_map_reverse>
 800bf60:	4606      	mov	r6, r0
 800bf62:	e012      	b.n	800bf8a <claim+0x14a>
                digital.out.map[i] = digital.out.map[i + 1];
 800bf64:	481e      	ldr	r0, [pc, #120]	@ (800bfe0 <claim+0x1a0>)
 800bf66:	6903      	ldr	r3, [r0, #16]
 800bf68:	199a      	adds	r2, r3, r6
 800bf6a:	7852      	ldrb	r2, [r2, #1]
 800bf6c:	559a      	strb	r2, [r3, r6]
                aux_out[digital.out.map[i]].description = iports_get_pnum(digital, i);
 800bf6e:	6942      	ldr	r2, [r0, #20]
 800bf70:	6903      	ldr	r3, [r0, #16]
 800bf72:	5d9b      	ldrb	r3, [r3, r6]
 800bf74:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bf78:	491d      	ldr	r1, [pc, #116]	@ (800bff0 <claim+0x1b0>)
 800bf7a:	680f      	ldr	r7, [r1, #0]
 800bf7c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800bf80:	4631      	mov	r1, r6
 800bf82:	4790      	blx	r2
 800bf84:	6178      	str	r0, [r7, #20]
            for(i = ioports_map_reverse(&digital.out, *port); i < hal.port.num_digital_out; i++) {
 800bf86:	3601      	adds	r6, #1
 800bf88:	b2f6      	uxtb	r6, r6
 800bf8a:	4b17      	ldr	r3, [pc, #92]	@ (800bfe8 <claim+0x1a8>)
 800bf8c:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800bf90:	42b3      	cmp	r3, r6
 800bf92:	d8e7      	bhi.n	800bf64 <claim+0x124>
            aux_out[*port].mode.claimed = On;
 800bf94:	4b16      	ldr	r3, [pc, #88]	@ (800bff0 <claim+0x1b0>)
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	782b      	ldrb	r3, [r5, #0]
 800bf9a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bf9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bfa2:	7c59      	ldrb	r1, [r3, #17]
 800bfa4:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800bfa8:	7459      	strb	r1, [r3, #17]
            aux_out[*port].description = description;
 800bfaa:	782b      	ldrb	r3, [r5, #0]
 800bfac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bfb0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bfb4:	6154      	str	r4, [r2, #20]
            digital.out.map[hal.port.num_digital_out] = *port;
 800bfb6:	4b0a      	ldr	r3, [pc, #40]	@ (800bfe0 <claim+0x1a0>)
 800bfb8:	6919      	ldr	r1, [r3, #16]
 800bfba:	4b0b      	ldr	r3, [pc, #44]	@ (800bfe8 <claim+0x1a8>)
 800bfbc:	f893 2115 	ldrb.w	r2, [r3, #277]	@ 0x115
 800bfc0:	7828      	ldrb	r0, [r5, #0]
 800bfc2:	5488      	strb	r0, [r1, r2]
            *port = hal.port.num_digital_out;
 800bfc4:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800bfc8:	702b      	strb	r3, [r5, #0]
        } else if((ok = digital.out.map && *port < digital.out.n_ports && !aux_out[*port].mode.claimed)) {
 800bfca:	2001      	movs	r0, #1
 800bfcc:	e002      	b.n	800bfd4 <claim+0x194>
            if((ok = digital.in.map && *port < digital.in.n_ports && !aux_in[*port].mode.claimed)) {
 800bfce:	2000      	movs	r0, #0
 800bfd0:	e000      	b.n	800bfd4 <claim+0x194>
 800bfd2:	2000      	movs	r0, #0
}
 800bfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else if((ok = digital.out.map && *port < digital.out.n_ports && !aux_out[*port].mode.claimed)) {
 800bfd8:	2000      	movs	r0, #0
 800bfda:	e7fb      	b.n	800bfd4 <claim+0x194>
 800bfdc:	2000      	movs	r0, #0
 800bfde:	e7f9      	b.n	800bfd4 <claim+0x194>
 800bfe0:	20000820 	.word	0x20000820
 800bfe4:	2000081c 	.word	0x2000081c
 800bfe8:	200018dc 	.word	0x200018dc
 800bfec:	20000824 	.word	0x20000824
 800bff0:	20000818 	.word	0x20000818
 800bff4:	2000082c 	.word	0x2000082c

0800bff8 <register_interrupt_handler>:
{
 800bff8:	b570      	push	{r4, r5, r6, lr}
 800bffa:	460c      	mov	r4, r1
    port = ioports_map(digital.in, port);
 800bffc:	4b1f      	ldr	r3, [pc, #124]	@ (800c07c <register_interrupt_handler+0x84>)
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	b103      	cbz	r3, 800c004 <register_interrupt_handler+0xc>
 800c002:	5c18      	ldrb	r0, [r3, r0]
    if((ok = port < digital.in.n_ports && aux_in[port].cap.irq_mode != IRQ_Mode_None)) {
 800c004:	4b1d      	ldr	r3, [pc, #116]	@ (800c07c <register_interrupt_handler+0x84>)
 800c006:	791b      	ldrb	r3, [r3, #4]
 800c008:	4283      	cmp	r3, r0
 800c00a:	d932      	bls.n	800c072 <register_interrupt_handler+0x7a>
 800c00c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800c010:	4b1b      	ldr	r3, [pc, #108]	@ (800c080 <register_interrupt_handler+0x88>)
 800c012:	681d      	ldr	r5, [r3, #0]
 800c014:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 800c018:	886b      	ldrh	r3, [r5, #2]
 800c01a:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 800c01e:	b35b      	cbz	r3, 800c078 <register_interrupt_handler+0x80>
        if((ok = (irq_mode & input->cap.irq_mode) == irq_mode && interrupt_callback != NULL)) {
 800c020:	886b      	ldrh	r3, [r5, #2]
 800c022:	f3c3 1344 	ubfx	r3, r3, #5, #5
 800c026:	ea34 0303 	bics.w	r3, r4, r3
 800c02a:	d014      	beq.n	800c056 <register_interrupt_handler+0x5e>
 800c02c:	2600      	movs	r6, #0
        if(irq_mode == IRQ_Mode_None || !ok) {
 800c02e:	b104      	cbz	r4, 800c032 <register_interrupt_handler+0x3a>
 800c030:	bb06      	cbnz	r6, 800c074 <register_interrupt_handler+0x7c>
            hal.irq_disable();
 800c032:	4c14      	ldr	r4, [pc, #80]	@ (800c084 <register_interrupt_handler+0x8c>)
 800c034:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800c036:	4798      	blx	r3
            EXTI->IMR &= ~input->bit;     // Disable pin interrupt
 800c038:	4a13      	ldr	r2, [pc, #76]	@ (800c088 <register_interrupt_handler+0x90>)
 800c03a:	6813      	ldr	r3, [r2, #0]
 800c03c:	68a9      	ldr	r1, [r5, #8]
 800c03e:	ea23 0301 	bic.w	r3, r3, r1
 800c042:	6013      	str	r3, [r2, #0]
            input->mode.irq_mode = IRQ_Mode_None;
 800c044:	88ab      	ldrh	r3, [r5, #4]
 800c046:	f36f 1349 	bfc	r3, #5, #5
 800c04a:	80ab      	strh	r3, [r5, #4]
            input->interrupt_callback = NULL;
 800c04c:	2300      	movs	r3, #0
 800c04e:	61ab      	str	r3, [r5, #24]
            hal.irq_enable();
 800c050:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800c052:	4798      	blx	r3
 800c054:	e00e      	b.n	800c074 <register_interrupt_handler+0x7c>
        if((ok = (irq_mode & input->cap.irq_mode) == irq_mode && interrupt_callback != NULL)) {
 800c056:	b152      	cbz	r2, 800c06e <register_interrupt_handler+0x76>
            input->mode.irq_mode = irq_mode;
 800c058:	88ab      	ldrh	r3, [r5, #4]
 800c05a:	f364 1349 	bfi	r3, r4, #5, #5
 800c05e:	80ab      	strh	r3, [r5, #4]
            input->interrupt_callback = interrupt_callback;
 800c060:	61aa      	str	r2, [r5, #24]
            gpio_irq_enable(input, irq_mode);
 800c062:	4621      	mov	r1, r4
 800c064:	4628      	mov	r0, r5
 800c066:	f7ff f899 	bl	800b19c <gpio_irq_enable>
        if((ok = (irq_mode & input->cap.irq_mode) == irq_mode && interrupt_callback != NULL)) {
 800c06a:	2601      	movs	r6, #1
 800c06c:	e7df      	b.n	800c02e <register_interrupt_handler+0x36>
 800c06e:	2600      	movs	r6, #0
 800c070:	e7dd      	b.n	800c02e <register_interrupt_handler+0x36>
    if((ok = port < digital.in.n_ports && aux_in[port].cap.irq_mode != IRQ_Mode_None)) {
 800c072:	2600      	movs	r6, #0
}
 800c074:	4630      	mov	r0, r6
 800c076:	bd70      	pop	{r4, r5, r6, pc}
    if((ok = port < digital.in.n_ports && aux_in[port].cap.irq_mode != IRQ_Mode_None)) {
 800c078:	2600      	movs	r6, #0
 800c07a:	e7fb      	b.n	800c074 <register_interrupt_handler+0x7c>
 800c07c:	20000820 	.word	0x20000820
 800c080:	2000081c 	.word	0x2000081c
 800c084:	200018dc 	.word	0x200018dc
 800c088:	40013c00 	.word	0x40013c00

0800c08c <wait_on_input>:
{
 800c08c:	b570      	push	{r4, r5, r6, lr}
    if(type == Port_Digital && port < digital.in.n_ports) {
 800c08e:	2801      	cmp	r0, #1
 800c090:	f040 809a 	bne.w	800c1c8 <wait_on_input+0x13c>
 800c094:	4616      	mov	r6, r2
 800c096:	4b54      	ldr	r3, [pc, #336]	@ (800c1e8 <wait_on_input+0x15c>)
 800c098:	791b      	ldrb	r3, [r3, #4]
 800c09a:	428b      	cmp	r3, r1
 800c09c:	f240 8097 	bls.w	800c1ce <wait_on_input+0x142>
        port = ioports_map(digital.in, port);
 800c0a0:	4b51      	ldr	r3, [pc, #324]	@ (800c1e8 <wait_on_input+0x15c>)
 800c0a2:	689b      	ldr	r3, [r3, #8]
 800c0a4:	b103      	cbz	r3, 800c0a8 <wait_on_input+0x1c>
 800c0a6:	5c59      	ldrb	r1, [r3, r1]
        value = get_input(&aux_in[port], wait_mode, timeout);
 800c0a8:	4b50      	ldr	r3, [pc, #320]	@ (800c1ec <wait_on_input+0x160>)
 800c0aa:	681d      	ldr	r5, [r3, #0]
 800c0ac:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800c0b0:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    if(wait_mode == WaitMode_Immediate)
 800c0b4:	2e00      	cmp	r6, #0
 800c0b6:	d032      	beq.n	800c11e <wait_on_input+0x92>
    uint_fast16_t delay = (uint_fast16_t)ceilf((1000.0f / 50.0f) * timeout) + 1;
 800c0b8:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 800c0bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c0c0:	f01b fda0 	bl	8027c04 <ceilf>
 800c0c4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800c0c8:	ee10 4a10 	vmov	r4, s0
 800c0cc:	3401      	adds	r4, #1
    if(wait_mode == WaitMode_Rise || wait_mode == WaitMode_Fall) {
 800c0ce:	1e73      	subs	r3, r6, #1
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d932      	bls.n	800c13c <wait_on_input+0xb0>
        bool wait_for = wait_mode != WaitMode_Low;
 800c0d6:	3e04      	subs	r6, #4
 800c0d8:	bf18      	it	ne
 800c0da:	2601      	movne	r6, #1
            if((DIGITAL_IN(input->port, input->pin) ^ input->mode.inverted) == wait_for) {
 800c0dc:	68eb      	ldr	r3, [r5, #12]
 800c0de:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800c0e2:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800c0e6:	015b      	lsls	r3, r3, #5
 800c0e8:	79a8      	ldrb	r0, [r5, #6]
 800c0ea:	f813 1020 	ldrb.w	r1, [r3, r0, lsl #2]
 800c0ee:	796a      	ldrb	r2, [r5, #5]
 800c0f0:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800c0f4:	4051      	eors	r1, r2
 800c0f6:	42b1      	cmp	r1, r6
 800c0f8:	d062      	beq.n	800c1c0 <wait_on_input+0x134>
            if(delay) {
 800c0fa:	2c00      	cmp	r4, #0
 800c0fc:	d06d      	beq.n	800c1da <wait_on_input+0x14e>
                protocol_execute_realtime();
 800c0fe:	f00b fc9b 	bl	8017a38 <protocol_execute_realtime>
                hal.delay_ms(50, NULL);
 800c102:	4b3b      	ldr	r3, [pc, #236]	@ (800c1f0 <wait_on_input+0x164>)
 800c104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c106:	2100      	movs	r1, #0
 800c108:	2032      	movs	r0, #50	@ 0x32
 800c10a:	4798      	blx	r3
        } while(--delay && !sys.abort);
 800c10c:	3c01      	subs	r4, #1
 800c10e:	d067      	beq.n	800c1e0 <wait_on_input+0x154>
 800c110:	4b38      	ldr	r3, [pc, #224]	@ (800c1f4 <wait_on_input+0x168>)
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d0e1      	beq.n	800c0dc <wait_on_input+0x50>
    int32_t value = -1;
 800c118:	f04f 34ff 	mov.w	r4, #4294967295
 800c11c:	e00c      	b.n	800c138 <wait_on_input+0xac>
        return DIGITAL_IN(input->port, input->pin) ^ input->mode.inverted;
 800c11e:	68eb      	ldr	r3, [r5, #12]
 800c120:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800c124:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800c128:	015b      	lsls	r3, r3, #5
 800c12a:	79aa      	ldrb	r2, [r5, #6]
 800c12c:	f813 4022 	ldrb.w	r4, [r3, r2, lsl #2]
 800c130:	796b      	ldrb	r3, [r5, #5]
 800c132:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c136:	405c      	eors	r4, r3
}
 800c138:	4620      	mov	r0, r4
 800c13a:	bd70      	pop	{r4, r5, r6, pc}
        pin_irq_mode_t irq_mode = wait_mode == WaitMode_Rise ? IRQ_Mode_Rising : IRQ_Mode_Falling;
 800c13c:	2e01      	cmp	r6, #1
 800c13e:	d000      	beq.n	800c142 <wait_on_input+0xb6>
 800c140:	2602      	movs	r6, #2
        if(input->cap.irq_mode & irq_mode) {
 800c142:	886b      	ldrh	r3, [r5, #2]
 800c144:	f3c3 1344 	ubfx	r3, r3, #5, #5
 800c148:	421e      	tst	r6, r3
 800c14a:	d043      	beq.n	800c1d4 <wait_on_input+0x148>
            event_bits &= ~input->bit;
 800c14c:	68a9      	ldr	r1, [r5, #8]
 800c14e:	4a2a      	ldr	r2, [pc, #168]	@ (800c1f8 <wait_on_input+0x16c>)
 800c150:	6813      	ldr	r3, [r2, #0]
 800c152:	ea23 0301 	bic.w	r3, r3, r1
 800c156:	6013      	str	r3, [r2, #0]
            gpio_irq_enable(input, irq_mode);
 800c158:	4631      	mov	r1, r6
 800c15a:	4628      	mov	r0, r5
 800c15c:	f7ff f81e 	bl	800b19c <gpio_irq_enable>
                if(event_bits & input->bit) {
 800c160:	68aa      	ldr	r2, [r5, #8]
 800c162:	4b25      	ldr	r3, [pc, #148]	@ (800c1f8 <wait_on_input+0x16c>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	421a      	tst	r2, r3
 800c168:	d110      	bne.n	800c18c <wait_on_input+0x100>
                if(delay) {
 800c16a:	b31c      	cbz	r4, 800c1b4 <wait_on_input+0x128>
                    protocol_execute_realtime();
 800c16c:	f00b fc64 	bl	8017a38 <protocol_execute_realtime>
                    hal.delay_ms(50, NULL);
 800c170:	4b1f      	ldr	r3, [pc, #124]	@ (800c1f0 <wait_on_input+0x164>)
 800c172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c174:	2100      	movs	r1, #0
 800c176:	2032      	movs	r0, #50	@ 0x32
 800c178:	4798      	blx	r3
            } while(--delay && !sys.abort);
 800c17a:	3c01      	subs	r4, #1
 800c17c:	d01d      	beq.n	800c1ba <wait_on_input+0x12e>
 800c17e:	4b1d      	ldr	r3, [pc, #116]	@ (800c1f4 <wait_on_input+0x168>)
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d0ec      	beq.n	800c160 <wait_on_input+0xd4>
    int32_t value = -1;
 800c186:	f04f 34ff 	mov.w	r4, #4294967295
 800c18a:	e00c      	b.n	800c1a6 <wait_on_input+0x11a>
                    value = DIGITAL_IN(input->port, input->pin) ^ input->mode.inverted;
 800c18c:	68eb      	ldr	r3, [r5, #12]
 800c18e:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800c192:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800c196:	015b      	lsls	r3, r3, #5
 800c198:	79aa      	ldrb	r2, [r5, #6]
 800c19a:	f813 4022 	ldrb.w	r4, [r3, r2, lsl #2]
 800c19e:	796b      	ldrb	r3, [r5, #5]
 800c1a0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c1a4:	405c      	eors	r4, r3
            gpio_irq_enable(input, input->mode.irq_mode);    // Restore pin interrupt status
 800c1a6:	88a9      	ldrh	r1, [r5, #4]
 800c1a8:	f3c1 1144 	ubfx	r1, r1, #5, #5
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	f7fe fff5 	bl	800b19c <gpio_irq_enable>
 800c1b2:	e7c1      	b.n	800c138 <wait_on_input+0xac>
    int32_t value = -1;
 800c1b4:	f04f 34ff 	mov.w	r4, #4294967295
 800c1b8:	e7f5      	b.n	800c1a6 <wait_on_input+0x11a>
 800c1ba:	f04f 34ff 	mov.w	r4, #4294967295
 800c1be:	e7f2      	b.n	800c1a6 <wait_on_input+0x11a>
                value = DIGITAL_IN(input->port, input->pin) ^ input->mode.inverted;
 800c1c0:	f813 4020 	ldrb.w	r4, [r3, r0, lsl #2]
 800c1c4:	4054      	eors	r4, r2
                break;
 800c1c6:	e7b7      	b.n	800c138 <wait_on_input+0xac>
    int32_t value = -1;
 800c1c8:	f04f 34ff 	mov.w	r4, #4294967295
 800c1cc:	e7b4      	b.n	800c138 <wait_on_input+0xac>
 800c1ce:	f04f 34ff 	mov.w	r4, #4294967295
 800c1d2:	e7b1      	b.n	800c138 <wait_on_input+0xac>
    int32_t value = -1;
 800c1d4:	f04f 34ff 	mov.w	r4, #4294967295
 800c1d8:	e7ae      	b.n	800c138 <wait_on_input+0xac>
 800c1da:	f04f 34ff 	mov.w	r4, #4294967295
 800c1de:	e7ab      	b.n	800c138 <wait_on_input+0xac>
 800c1e0:	f04f 34ff 	mov.w	r4, #4294967295
    return value;
 800c1e4:	e7a8      	b.n	800c138 <wait_on_input+0xac>
 800c1e6:	bf00      	nop
 800c1e8:	20000820 	.word	0x20000820
 800c1ec:	2000081c 	.word	0x2000081c
 800c1f0:	200018dc 	.word	0x200018dc
 800c1f4:	20001bbc 	.word	0x20001bbc
 800c1f8:	20000814 	.word	0x20000814

0800c1fc <ioports_init>:

void ioports_init (pin_group_pins_t *aux_inputs, pin_group_pins_t *aux_outputs)
{
 800c1fc:	b508      	push	{r3, lr}
    aux_in = aux_inputs->pins.inputs;
 800c1fe:	6842      	ldr	r2, [r0, #4]
 800c200:	4b1a      	ldr	r3, [pc, #104]	@ (800c26c <ioports_init+0x70>)
 800c202:	601a      	str	r2, [r3, #0]
    aux_out = aux_outputs->pins.outputs;
 800c204:	684a      	ldr	r2, [r1, #4]
 800c206:	4b1a      	ldr	r3, [pc, #104]	@ (800c270 <ioports_init+0x74>)
 800c208:	601a      	str	r2, [r3, #0]

    hal.port.set_pin_description = set_pin_description;
 800c20a:	4b1a      	ldr	r3, [pc, #104]	@ (800c274 <ioports_init+0x78>)
 800c20c:	4a1a      	ldr	r2, [pc, #104]	@ (800c278 <ioports_init+0x7c>)
 800c20e:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    if(ioports_add(&digital, Port_Digital, aux_inputs->n_pins, aux_outputs->n_pins))  {
 800c212:	780b      	ldrb	r3, [r1, #0]
 800c214:	7802      	ldrb	r2, [r0, #0]
 800c216:	2101      	movs	r1, #1
 800c218:	4818      	ldr	r0, [pc, #96]	@ (800c27c <ioports_init+0x80>)
 800c21a:	f005 fff3 	bl	8012204 <ioports_add>
 800c21e:	b1f8      	cbz	r0, 800c260 <ioports_init+0x64>

        if(digital.in.n_ports) {
 800c220:	4b16      	ldr	r3, [pc, #88]	@ (800c27c <ioports_init+0x80>)
 800c222:	791b      	ldrb	r3, [r3, #4]
 800c224:	b133      	cbz	r3, 800c234 <ioports_init+0x38>
            hal.port.wait_on_input = wait_on_input;
 800c226:	4b13      	ldr	r3, [pc, #76]	@ (800c274 <ioports_init+0x78>)
 800c228:	4a15      	ldr	r2, [pc, #84]	@ (800c280 <ioports_init+0x84>)
 800c22a:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
            hal.port.register_interrupt_handler = register_interrupt_handler;
 800c22e:	4a15      	ldr	r2, [pc, #84]	@ (800c284 <ioports_init+0x88>)
 800c230:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
        }

        if(digital.out.n_ports)
 800c234:	4b11      	ldr	r3, [pc, #68]	@ (800c27c <ioports_init+0x80>)
 800c236:	7b1b      	ldrb	r3, [r3, #12]
 800c238:	b11b      	cbz	r3, 800c242 <ioports_init+0x46>
            hal.port.digital_out = digital_out;
 800c23a:	4b0e      	ldr	r3, [pc, #56]	@ (800c274 <ioports_init+0x78>)
 800c23c:	4a12      	ldr	r2, [pc, #72]	@ (800c288 <ioports_init+0x8c>)
 800c23e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

        hal.port.claim = claim;
 800c242:	4b0c      	ldr	r3, [pc, #48]	@ (800c274 <ioports_init+0x78>)
 800c244:	4a11      	ldr	r2, [pc, #68]	@ (800c28c <ioports_init+0x90>)
 800c246:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
        hal.port.swap_pins = swap_pins;
 800c24a:	4a11      	ldr	r2, [pc, #68]	@ (800c290 <ioports_init+0x94>)
 800c24c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        hal.port.get_pin_info = get_pin_info;
 800c250:	4a10      	ldr	r2, [pc, #64]	@ (800c294 <ioports_init+0x98>)
 800c252:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

        ioports_add_settings(NULL, NULL);
 800c256:	2100      	movs	r1, #0
 800c258:	4608      	mov	r0, r1
 800c25a:	f006 fc75 	bl	8012b48 <ioports_add_settings>

    } else
        hal.port.set_pin_description = NULL;
}
 800c25e:	bd08      	pop	{r3, pc}
        hal.port.set_pin_description = NULL;
 800c260:	4b04      	ldr	r3, [pc, #16]	@ (800c274 <ioports_init+0x78>)
 800c262:	2200      	movs	r2, #0
 800c264:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
}
 800c268:	e7f9      	b.n	800c25e <ioports_init+0x62>
 800c26a:	bf00      	nop
 800c26c:	2000081c 	.word	0x2000081c
 800c270:	20000818 	.word	0x20000818
 800c274:	200018dc 	.word	0x200018dc
 800c278:	0800baa9 	.word	0x0800baa9
 800c27c:	20000820 	.word	0x20000820
 800c280:	0800c08d 	.word	0x0800c08d
 800c284:	0800bff9 	.word	0x0800bff9
 800c288:	0800b8cd 	.word	0x0800b8cd
 800c28c:	0800be41 	.word	0x0800be41
 800c290:	0800bcb5 	.word	0x0800bcb5
 800c294:	0800b9a1 	.word	0x0800b9a1

0800c298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c298:	b088      	sub	sp, #32
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c29a:	2200      	movs	r2, #0
 800c29c:	9200      	str	r2, [sp, #0]
 800c29e:	4b29      	ldr	r3, [pc, #164]	@ (800c344 <MX_GPIO_Init+0xac>)
 800c2a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c2a2:	f041 0101 	orr.w	r1, r1, #1
 800c2a6:	6319      	str	r1, [r3, #48]	@ 0x30
 800c2a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c2aa:	f001 0101 	and.w	r1, r1, #1
 800c2ae:	9100      	str	r1, [sp, #0]
 800c2b0:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c2b2:	9201      	str	r2, [sp, #4]
 800c2b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c2b6:	f041 0102 	orr.w	r1, r1, #2
 800c2ba:	6319      	str	r1, [r3, #48]	@ 0x30
 800c2bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c2be:	f001 0102 	and.w	r1, r1, #2
 800c2c2:	9101      	str	r1, [sp, #4]
 800c2c4:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c2c6:	9202      	str	r2, [sp, #8]
 800c2c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c2ca:	f041 0104 	orr.w	r1, r1, #4
 800c2ce:	6319      	str	r1, [r3, #48]	@ 0x30
 800c2d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c2d2:	f001 0104 	and.w	r1, r1, #4
 800c2d6:	9102      	str	r1, [sp, #8]
 800c2d8:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c2da:	9203      	str	r2, [sp, #12]
 800c2dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c2de:	f041 0108 	orr.w	r1, r1, #8
 800c2e2:	6319      	str	r1, [r3, #48]	@ 0x30
 800c2e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c2e6:	f001 0108 	and.w	r1, r1, #8
 800c2ea:	9103      	str	r1, [sp, #12]
 800c2ec:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c2ee:	9204      	str	r2, [sp, #16]
 800c2f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c2f2:	f041 0110 	orr.w	r1, r1, #16
 800c2f6:	6319      	str	r1, [r3, #48]	@ 0x30
 800c2f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c2fa:	f001 0110 	and.w	r1, r1, #16
 800c2fe:	9104      	str	r1, [sp, #16]
 800c300:	9904      	ldr	r1, [sp, #16]
#ifdef GPIOF
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800c302:	9205      	str	r2, [sp, #20]
 800c304:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c306:	f041 0120 	orr.w	r1, r1, #32
 800c30a:	6319      	str	r1, [r3, #48]	@ 0x30
 800c30c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c30e:	f001 0120 	and.w	r1, r1, #32
 800c312:	9105      	str	r1, [sp, #20]
 800c314:	9905      	ldr	r1, [sp, #20]
#endif
#ifdef GPIOG
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c316:	9206      	str	r2, [sp, #24]
 800c318:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c31a:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800c31e:	6319      	str	r1, [r3, #48]	@ 0x30
 800c320:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c322:	f001 0140 	and.w	r1, r1, #64	@ 0x40
 800c326:	9106      	str	r1, [sp, #24]
 800c328:	9906      	ldr	r1, [sp, #24]
#endif
#ifdef GPIOH
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c32a:	9207      	str	r2, [sp, #28]
 800c32c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c32e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c332:	631a      	str	r2, [r3, #48]	@ 0x30
 800c334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c33a:	9307      	str	r3, [sp, #28]
 800c33c:	9b07      	ldr	r3, [sp, #28]
#endif
}
 800c33e:	b008      	add	sp, #32
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	40023800 	.word	0x40023800

0800c348 <SystemClock_Config>:
{
 800c348:	b510      	push	{r4, lr}
 800c34a:	b094      	sub	sp, #80	@ 0x50
  __HAL_RCC_PWR_CLK_ENABLE();
 800c34c:	2100      	movs	r1, #0
 800c34e:	9101      	str	r1, [sp, #4]
 800c350:	4b1e      	ldr	r3, [pc, #120]	@ (800c3cc <SystemClock_Config+0x84>)
 800c352:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c354:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800c358:	641a      	str	r2, [r3, #64]	@ 0x40
 800c35a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c35c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c360:	9301      	str	r3, [sp, #4]
 800c362:	9b01      	ldr	r3, [sp, #4]
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c364:	9102      	str	r1, [sp, #8]
 800c366:	4b1a      	ldr	r3, [pc, #104]	@ (800c3d0 <SystemClock_Config+0x88>)
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c36e:	601a      	str	r2, [r3, #0]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c376:	9302      	str	r3, [sp, #8]
 800c378:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitTypeDef RCC_OscInitStruct = {
 800c37a:	2230      	movs	r2, #48	@ 0x30
 800c37c:	a808      	add	r0, sp, #32
 800c37e:	f018 fdd2 	bl	8024f26 <memset>
 800c382:	2301      	movs	r3, #1
 800c384:	9308      	str	r3, [sp, #32]
 800c386:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c38a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c38c:	2302      	movs	r3, #2
 800c38e:	930e      	str	r3, [sp, #56]	@ 0x38
 800c390:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800c394:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c396:	2208      	movs	r2, #8
 800c398:	9210      	str	r2, [sp, #64]	@ 0x40
 800c39a:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 800c39e:	9211      	str	r2, [sp, #68]	@ 0x44
 800c3a0:	9312      	str	r3, [sp, #72]	@ 0x48
 800c3a2:	2307      	movs	r3, #7
 800c3a4:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800c3a6:	a808      	add	r0, sp, #32
 800c3a8:	f7fd f92c 	bl	8009604 <HAL_RCC_OscConfig>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 800c3ac:	f10d 0c0c 	add.w	ip, sp, #12
 800c3b0:	4c08      	ldr	r4, [pc, #32]	@ (800c3d4 <SystemClock_Config+0x8c>)
 800c3b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c3b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c3b8:	6823      	ldr	r3, [r4, #0]
 800c3ba:	f8cc 3000 	str.w	r3, [ip]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY) != HAL_OK) {
 800c3be:	2105      	movs	r1, #5
 800c3c0:	a803      	add	r0, sp, #12
 800c3c2:	f7fd fb83 	bl	8009acc <HAL_RCC_ClockConfig>
}
 800c3c6:	b014      	add	sp, #80	@ 0x50
 800c3c8:	bd10      	pop	{r4, pc}
 800c3ca:	bf00      	nop
 800c3cc:	40023800 	.word	0x40023800
 800c3d0:	40007000 	.word	0x40007000
 800c3d4:	08029390 	.word	0x08029390

0800c3d8 <main>:
{
 800c3d8:	b508      	push	{r3, lr}
    HAL_Init();
 800c3da:	f7fc fd89 	bl	8008ef0 <HAL_Init>
    SystemClock_Config();
 800c3de:	f7ff ffb3 	bl	800c348 <SystemClock_Config>
    MX_GPIO_Init();
 800c3e2:	f7ff ff59 	bl	800c298 <MX_GPIO_Init>
    if(!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 800c3e6:	4b0c      	ldr	r3, [pc, #48]	@ (800c418 <main+0x40>)
 800c3e8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800c3ec:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800c3f0:	d10d      	bne.n	800c40e <main+0x36>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800c3f2:	4a09      	ldr	r2, [pc, #36]	@ (800c418 <main+0x40>)
 800c3f4:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
 800c3f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c3fc:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
        DWT->CYCCNT = 0;
 800c400:	4b06      	ldr	r3, [pc, #24]	@ (800c41c <main+0x44>)
 800c402:	2200      	movs	r2, #0
 800c404:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	f042 0201 	orr.w	r2, r2, #1
 800c40c:	601a      	str	r2, [r3, #0]
    grbl_enter();
 800c40e:	f005 fbbd 	bl	8011b8c <grbl_enter>
}
 800c412:	2000      	movs	r0, #0
 800c414:	bd08      	pop	{r3, pc}
 800c416:	bf00      	nop
 800c418:	e000ed00 	.word	0xe000ed00
 800c41c:	e0001000 	.word	0xe0001000

0800c420 <send_gcode>:

// Function to send G-code commands via the communication stream
static int16_t send_gcode(void) {
    static bool eol_ok = false;

    if (gcode == NULL) {
 800c420:	4b11      	ldr	r3, [pc, #68]	@ (800c468 <send_gcode+0x48>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	b1e3      	cbz	r3, 800c460 <send_gcode+0x40>
        return SERIAL_NO_DATA;
    }

    if (*gcode == '\0') {
 800c426:	7818      	ldrb	r0, [r3, #0]
 800c428:	b968      	cbnz	r0, 800c446 <send_gcode+0x26>
        if (eol_ok) {
 800c42a:	4b10      	ldr	r3, [pc, #64]	@ (800c46c <send_gcode+0x4c>)
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	b923      	cbnz	r3, 800c43a <send_gcode+0x1a>
            gcode = NULL;
            return SERIAL_NO_DATA;
        }
        eol_ok = true;
 800c430:	4b0e      	ldr	r3, [pc, #56]	@ (800c46c <send_gcode+0x4c>)
 800c432:	2201      	movs	r2, #1
 800c434:	701a      	strb	r2, [r3, #0]
        return ASCII_LF;
 800c436:	200a      	movs	r0, #10
 800c438:	4770      	bx	lr
            gcode = NULL;
 800c43a:	4b0b      	ldr	r3, [pc, #44]	@ (800c468 <send_gcode+0x48>)
 800c43c:	2200      	movs	r2, #0
 800c43e:	601a      	str	r2, [r3, #0]
            return SERIAL_NO_DATA;
 800c440:	f04f 30ff 	mov.w	r0, #4294967295
 800c444:	4770      	bx	lr
    }

    char c = *gcode++;
 800c446:	3301      	adds	r3, #1
 800c448:	4a07      	ldr	r2, [pc, #28]	@ (800c468 <send_gcode+0x48>)
 800c44a:	6013      	str	r3, [r2, #0]
    if ((eol_ok = (c == '|'))) {
 800c44c:	287c      	cmp	r0, #124	@ 0x7c
 800c44e:	bf14      	ite	ne
 800c450:	2300      	movne	r3, #0
 800c452:	2301      	moveq	r3, #1
 800c454:	4a05      	ldr	r2, [pc, #20]	@ (800c46c <send_gcode+0x4c>)
 800c456:	7013      	strb	r3, [r2, #0]
 800c458:	b103      	cbz	r3, 800c45c <send_gcode+0x3c>
        c = ASCII_LF;
 800c45a:	200a      	movs	r0, #10
    }

    return (int16_t)c;
 800c45c:	b200      	sxth	r0, r0
 800c45e:	4770      	bx	lr
        return SERIAL_NO_DATA;
 800c460:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop
 800c468:	2000083c 	.word	0x2000083c
 800c46c:	20000838 	.word	0x20000838

0800c470 <status_checker>:
        HAL_Delay(POLLING_INTERVAL_MS);
    }
}

// Function to check the status and execute G-code commands if needed
static void status_checker(void) {
 800c470:	b508      	push	{r3, lr}
    if (Coils_Database[0] != 0) {
 800c472:	4b15      	ldr	r3, [pc, #84]	@ (800c4c8 <status_checker+0x58>)
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	b13b      	cbz	r3, 800c488 <status_checker+0x18>
        const char* gcode_to_send = NULL;

        switch (Holding_Registers_Database[10]) {
 800c478:	4b14      	ldr	r3, [pc, #80]	@ (800c4cc <status_checker+0x5c>)
 800c47a:	8a9b      	ldrh	r3, [r3, #20]
 800c47c:	2b02      	cmp	r3, #2
 800c47e:	d01d      	beq.n	800c4bc <status_checker+0x4c>
 800c480:	2b03      	cmp	r3, #3
 800c482:	d01e      	beq.n	800c4c2 <status_checker+0x52>
 800c484:	2b01      	cmp	r3, #1
 800c486:	d000      	beq.n	800c48a <status_checker+0x1a>

            modbus_stream.read = org_read_ptr;
            Coils_Database[0] = 0;
        }
    }
}
 800c488:	bd08      	pop	{r3, pc}
                gcode_to_send = gcode_file_1;
 800c48a:	4b11      	ldr	r3, [pc, #68]	@ (800c4d0 <status_checker+0x60>)
 800c48c:	681b      	ldr	r3, [r3, #0]
        if (gcode_to_send != NULL) {
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d0fa      	beq.n	800c488 <status_checker+0x18>
            gcode = gcode_to_send;
 800c492:	4a10      	ldr	r2, [pc, #64]	@ (800c4d4 <status_checker+0x64>)
 800c494:	6013      	str	r3, [r2, #0]
            org_read_ptr = modbus_stream.read;
 800c496:	4b10      	ldr	r3, [pc, #64]	@ (800c4d8 <status_checker+0x68>)
 800c498:	69d9      	ldr	r1, [r3, #28]
 800c49a:	4a10      	ldr	r2, [pc, #64]	@ (800c4dc <status_checker+0x6c>)
 800c49c:	6011      	str	r1, [r2, #0]
            modbus_stream.read = send_gcode;
 800c49e:	4a10      	ldr	r2, [pc, #64]	@ (800c4e0 <status_checker+0x70>)
 800c4a0:	61da      	str	r2, [r3, #28]
            while (send_gcode() != SERIAL_NO_DATA) {
 800c4a2:	f7ff ffbd 	bl	800c420 <send_gcode>
 800c4a6:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c4aa:	d1fa      	bne.n	800c4a2 <status_checker+0x32>
            modbus_stream.read = org_read_ptr;
 800c4ac:	4b0b      	ldr	r3, [pc, #44]	@ (800c4dc <status_checker+0x6c>)
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	4b09      	ldr	r3, [pc, #36]	@ (800c4d8 <status_checker+0x68>)
 800c4b2:	61da      	str	r2, [r3, #28]
            Coils_Database[0] = 0;
 800c4b4:	4b04      	ldr	r3, [pc, #16]	@ (800c4c8 <status_checker+0x58>)
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	701a      	strb	r2, [r3, #0]
}
 800c4ba:	e7e5      	b.n	800c488 <status_checker+0x18>
                gcode_to_send = gcode_file_2;
 800c4bc:	4b09      	ldr	r3, [pc, #36]	@ (800c4e4 <status_checker+0x74>)
 800c4be:	681b      	ldr	r3, [r3, #0]
                break;
 800c4c0:	e7e5      	b.n	800c48e <status_checker+0x1e>
                gcode_to_send = gcode_file_3;
 800c4c2:	4b09      	ldr	r3, [pc, #36]	@ (800c4e8 <status_checker+0x78>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
                break;
 800c4c6:	e7e2      	b.n	800c48e <status_checker+0x1e>
 800c4c8:	200006bc 	.word	0x200006bc
 800c4cc:	200006d8 	.word	0x200006d8
 800c4d0:	2000017c 	.word	0x2000017c
 800c4d4:	2000083c 	.word	0x2000083c
 800c4d8:	20000840 	.word	0x20000840
 800c4dc:	200008b0 	.word	0x200008b0
 800c4e0:	0800c421 	.word	0x0800c421
 800c4e4:	20000178 	.word	0x20000178
 800c4e8:	20000174 	.word	0x20000174

0800c4ec <on_report_my_options>:
    status_checker();
    on_execute_realtime(state);
}

// Add plugin information to the report
static void on_report_my_options(bool newopt) {
 800c4ec:	b510      	push	{r4, lr}
 800c4ee:	b08a      	sub	sp, #40	@ 0x28
 800c4f0:	4604      	mov	r4, r0
    if (on_report_options) {
 800c4f2:	4b0b      	ldr	r3, [pc, #44]	@ (800c520 <on_report_my_options+0x34>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	b103      	cbz	r3, 800c4fa <on_report_my_options+0xe>
        on_report_options(newopt);
 800c4f8:	4798      	blx	r3
    }

    if (!newopt) {
 800c4fa:	b97c      	cbnz	r4, 800c51c <on_report_my_options+0x30>
        const char plugin_info[] = "[PLUGIN:Register Monitor v1.00]" ASCII_EOL;
 800c4fc:	f10d 0c04 	add.w	ip, sp, #4
 800c500:	4c08      	ldr	r4, [pc, #32]	@ (800c524 <on_report_my_options+0x38>)
 800c502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c504:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c50a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c50e:	6823      	ldr	r3, [r4, #0]
 800c510:	f8ac 3000 	strh.w	r3, [ip]
        modbus_stream.write((uint8_t*)plugin_info);
 800c514:	4b04      	ldr	r3, [pc, #16]	@ (800c528 <on_report_my_options+0x3c>)
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	a801      	add	r0, sp, #4
 800c51a:	4798      	blx	r3
    }
}
 800c51c:	b00a      	add	sp, #40	@ 0x28
 800c51e:	bd10      	pop	{r4, pc}
 800c520:	200008b8 	.word	0x200008b8
 800c524:	08029614 	.word	0x08029614
 800c528:	20000840 	.word	0x20000840

0800c52c <modbus_process>:
static void modbus_process(void) {
 800c52c:	b508      	push	{r3, lr}
    if (RxData[0] == SLAVE_ID) {
 800c52e:	4b0e      	ldr	r3, [pc, #56]	@ (800c568 <modbus_process+0x3c>)
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	2b01      	cmp	r3, #1
 800c534:	d000      	beq.n	800c538 <modbus_process+0xc>
}
 800c536:	bd08      	pop	{r3, pc}
        if (RxData[1] == 0x03 || RxData[1] == 0x04) {
 800c538:	4b0b      	ldr	r3, [pc, #44]	@ (800c568 <modbus_process+0x3c>)
 800c53a:	785a      	ldrb	r2, [r3, #1]
 800c53c:	1ed3      	subs	r3, r2, #3
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	2b01      	cmp	r3, #1
 800c542:	d908      	bls.n	800c556 <modbus_process+0x2a>
        } else if (RxData[1] == 16) {
 800c544:	2a10      	cmp	r2, #16
 800c546:	d009      	beq.n	800c55c <modbus_process+0x30>
        } else if (RxData[1] == 0x01) {
 800c548:	2a01      	cmp	r2, #1
 800c54a:	d00a      	beq.n	800c562 <modbus_process+0x36>
        } else if (RxData[1] == 0x05) {
 800c54c:	2a05      	cmp	r2, #5
 800c54e:	d1f2      	bne.n	800c536 <modbus_process+0xa>
            writeSingleCoil();
 800c550:	f7fd fd60 	bl	800a014 <writeSingleCoil>
}
 800c554:	e7ef      	b.n	800c536 <modbus_process+0xa>
            readHoldingRegs();
 800c556:	f7fd fc9d 	bl	8009e94 <readHoldingRegs>
 800c55a:	e7ec      	b.n	800c536 <modbus_process+0xa>
            writeHoldingRegs();
 800c55c:	f7fd fda4 	bl	800a0a8 <writeHoldingRegs>
 800c560:	e7e9      	b.n	800c536 <modbus_process+0xa>
            readCoils();
 800c562:	f7fd fce3 	bl	8009f2c <readCoils>
 800c566:	e7e6      	b.n	800c536 <modbus_process+0xa>
 800c568:	200008a0 	.word	0x200008a0

0800c56c <poll_for_received_data>:
static void poll_for_received_data(void) {
 800c56c:	b510      	push	{r4, lr}
    uint32_t idle_start_time = HAL_GetTick();
 800c56e:	f7fc fce5 	bl	8008f3c <HAL_GetTick>
 800c572:	4604      	mov	r4, r0
    rx_index = 0;
 800c574:	4b14      	ldr	r3, [pc, #80]	@ (800c5c8 <poll_for_received_data+0x5c>)
 800c576:	2200      	movs	r2, #0
 800c578:	801a      	strh	r2, [r3, #0]
 800c57a:	e018      	b.n	800c5ae <poll_for_received_data+0x42>
            idle_start_time = HAL_GetTick();
 800c57c:	f7fc fcde 	bl	8008f3c <HAL_GetTick>
 800c580:	4604      	mov	r4, r0
            while (rx_index < RX_DATA_SIZE && (c = modbus_stream.read()) != -1) {
 800c582:	e005      	b.n	800c590 <poll_for_received_data+0x24>
                RxData[rx_index++] = (uint8_t)c;
 800c584:	4a10      	ldr	r2, [pc, #64]	@ (800c5c8 <poll_for_received_data+0x5c>)
 800c586:	8813      	ldrh	r3, [r2, #0]
 800c588:	1c59      	adds	r1, r3, #1
 800c58a:	8011      	strh	r1, [r2, #0]
 800c58c:	4a0f      	ldr	r2, [pc, #60]	@ (800c5cc <poll_for_received_data+0x60>)
 800c58e:	54d0      	strb	r0, [r2, r3]
            while (rx_index < RX_DATA_SIZE && (c = modbus_stream.read()) != -1) {
 800c590:	4b0d      	ldr	r3, [pc, #52]	@ (800c5c8 <poll_for_received_data+0x5c>)
 800c592:	881b      	ldrh	r3, [r3, #0]
 800c594:	2b0f      	cmp	r3, #15
 800c596:	d805      	bhi.n	800c5a4 <poll_for_received_data+0x38>
 800c598:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d0 <poll_for_received_data+0x64>)
 800c59a:	69db      	ldr	r3, [r3, #28]
 800c59c:	4798      	blx	r3
 800c59e:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c5a2:	d1ef      	bne.n	800c584 <poll_for_received_data+0x18>
            modbus_process();
 800c5a4:	f7ff ffc2 	bl	800c52c <modbus_process>
        HAL_Delay(POLLING_INTERVAL_MS);
 800c5a8:	20c8      	movs	r0, #200	@ 0xc8
 800c5aa:	f7fc fccd 	bl	8008f48 <HAL_Delay>
        if (modbus_stream.get_rx_buffer_count() > 0) {
 800c5ae:	4b08      	ldr	r3, [pc, #32]	@ (800c5d0 <poll_for_received_data+0x64>)
 800c5b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5b2:	4798      	blx	r3
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	d1e1      	bne.n	800c57c <poll_for_received_data+0x10>
        } else if ((HAL_GetTick() - idle_start_time) > IDLE_TIMEOUT_MS) {
 800c5b8:	f7fc fcc0 	bl	8008f3c <HAL_GetTick>
 800c5bc:	1b03      	subs	r3, r0, r4
 800c5be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800c5c2:	d9f1      	bls.n	800c5a8 <poll_for_received_data+0x3c>
}
 800c5c4:	bd10      	pop	{r4, pc}
 800c5c6:	bf00      	nop
 800c5c8:	2000089c 	.word	0x2000089c
 800c5cc:	200008a0 	.word	0x200008a0
 800c5d0:	20000840 	.word	0x20000840

0800c5d4 <check_register_and_execute_gcode>:
static void check_register_and_execute_gcode(sys_state_t state) {
 800c5d4:	b510      	push	{r4, lr}
 800c5d6:	4604      	mov	r4, r0
    poll_for_received_data();
 800c5d8:	f7ff ffc8 	bl	800c56c <poll_for_received_data>
    status_checker();
 800c5dc:	f7ff ff48 	bl	800c470 <status_checker>
    on_execute_realtime(state);
 800c5e0:	4b02      	ldr	r3, [pc, #8]	@ (800c5ec <check_register_and_execute_gcode+0x18>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	4798      	blx	r3
}
 800c5e8:	bd10      	pop	{r4, pc}
 800c5ea:	bf00      	nop
 800c5ec:	200008b4 	.word	0x200008b4

0800c5f0 <my_plugin_init>:

void my_plugin_init(void) {
 800c5f0:	b510      	push	{r4, lr}
    // Initialize the Modbus stream
    io_stream_t const *stream;
    if ((stream = stream_open_instance(2, 115200, NULL, "Modbus UART")) == NULL) {
 800c5f2:	4b11      	ldr	r3, [pc, #68]	@ (800c638 <my_plugin_init+0x48>)
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800c5fa:	2002      	movs	r0, #2
 800c5fc:	f014 fbae 	bl	8020d5c <stream_open_instance>
 800c600:	4601      	mov	r1, r0
 800c602:	b198      	cbz	r0, 800c62c <my_plugin_init+0x3c>
        stream = stream_null_init(115200);
    }

    memcpy(&modbus_stream, stream, sizeof(io_stream_t));
 800c604:	4c0d      	ldr	r4, [pc, #52]	@ (800c63c <my_plugin_init+0x4c>)
 800c606:	224c      	movs	r2, #76	@ 0x4c
 800c608:	4620      	mov	r0, r4
 800c60a:	f018 fdec 	bl	80251e6 <memcpy>

    // Set up the plugin
    modbus_stream.set_enqueue_rt_handler(stream_buffer_all);
 800c60e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c610:	480b      	ldr	r0, [pc, #44]	@ (800c640 <my_plugin_init+0x50>)
 800c612:	4798      	blx	r3
    on_report_options = grbl.on_report_options;
 800c614:	4b0b      	ldr	r3, [pc, #44]	@ (800c644 <my_plugin_init+0x54>)
 800c616:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c618:	4a0b      	ldr	r2, [pc, #44]	@ (800c648 <my_plugin_init+0x58>)
 800c61a:	6011      	str	r1, [r2, #0]
    grbl.on_report_options = on_report_my_options;
 800c61c:	4a0b      	ldr	r2, [pc, #44]	@ (800c64c <my_plugin_init+0x5c>)
 800c61e:	655a      	str	r2, [r3, #84]	@ 0x54
    on_execute_realtime = grbl.on_execute_realtime;
 800c620:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800c622:	4a0b      	ldr	r2, [pc, #44]	@ (800c650 <my_plugin_init+0x60>)
 800c624:	6011      	str	r1, [r2, #0]
    grbl.on_execute_realtime = check_register_and_execute_gcode;
 800c626:	4a0b      	ldr	r2, [pc, #44]	@ (800c654 <my_plugin_init+0x64>)
 800c628:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800c62a:	bd10      	pop	{r4, pc}
        stream = stream_null_init(115200);
 800c62c:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 800c630:	f014 fa68 	bl	8020b04 <stream_null_init>
 800c634:	4601      	mov	r1, r0
 800c636:	e7e5      	b.n	800c604 <my_plugin_init+0x14>
 800c638:	08029638 	.word	0x08029638
 800c63c:	20000840 	.word	0x20000840
 800c640:	08020cd1 	.word	0x08020cd1
 800c644:	20001ac4 	.word	0x20001ac4
 800c648:	200008b8 	.word	0x200008b8
 800c64c:	0800c4ed 	.word	0x0800c4ed
 800c650:	200008b4 	.word	0x200008b4
 800c654:	0800c5d5 	.word	0x0800c5d5

0800c658 <serialClaimPort>:
#if SERIAL_PORT || SERIAL1_PORT || SERIAL2_PORT

static bool serialClaimPort (uint8_t instance)
{
    bool ok = false;
    uint_fast8_t idx = sizeof(serial) / sizeof(io_stream_properties_t);
 800c658:	2302      	movs	r3, #2

    do {
        if(serial[--idx].instance == instance) {
 800c65a:	3b01      	subs	r3, #1
 800c65c:	4a11      	ldr	r2, [pc, #68]	@ (800c6a4 <serialClaimPort+0x4c>)
 800c65e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c662:	7852      	ldrb	r2, [r2, #1]
 800c664:	4282      	cmp	r2, r0
 800c666:	d003      	beq.n	800c670 <serialClaimPort+0x18>
            if((ok = serial[idx].flags.claimable && !serial[idx].flags.claimed))
                serial[idx].flags.claimed = On;
            break;
        }

    } while(idx);
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d1f6      	bne.n	800c65a <serialClaimPort+0x2>
    bool ok = false;
 800c66c:	2000      	movs	r0, #0
 800c66e:	4770      	bx	lr
            if((ok = serial[idx].flags.claimable && !serial[idx].flags.claimed))
 800c670:	4a0c      	ldr	r2, [pc, #48]	@ (800c6a4 <serialClaimPort+0x4c>)
 800c672:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c676:	7892      	ldrb	r2, [r2, #2]
 800c678:	f3c2 0040 	ubfx	r0, r2, #1, #1
 800c67c:	f012 0f02 	tst.w	r2, #2
 800c680:	d00f      	beq.n	800c6a2 <serialClaimPort+0x4a>
 800c682:	4a08      	ldr	r2, [pc, #32]	@ (800c6a4 <serialClaimPort+0x4c>)
 800c684:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c688:	7892      	ldrb	r2, [r2, #2]
 800c68a:	f012 0f04 	tst.w	r2, #4
 800c68e:	d107      	bne.n	800c6a0 <serialClaimPort+0x48>
                serial[idx].flags.claimed = On;
 800c690:	4a04      	ldr	r2, [pc, #16]	@ (800c6a4 <serialClaimPort+0x4c>)
 800c692:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c696:	789a      	ldrb	r2, [r3, #2]
 800c698:	f042 0204 	orr.w	r2, r2, #4
 800c69c:	709a      	strb	r2, [r3, #2]
 800c69e:	4770      	bx	lr
            if((ok = serial[idx].flags.claimable && !serial[idx].flags.claimed))
 800c6a0:	2000      	movs	r0, #0

    return ok;
}
 800c6a2:	4770      	bx	lr
 800c6a4:	2000018c 	.word	0x2000018c

0800c6a8 <serialRxFree>:
//
// Returns number of free characters in serial input buffer
//
static uint16_t serialRxFree (void)
{
    uint16_t tail = rxbuf.tail, head = rxbuf.head;
 800c6a8:	4b08      	ldr	r3, [pc, #32]	@ (800c6cc <serialRxFree+0x24>)
 800c6aa:	6858      	ldr	r0, [r3, #4]
 800c6ac:	b280      	uxth	r0, r0
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	b29b      	uxth	r3, r3

    return (RX_BUFFER_SIZE - 1) - BUFCOUNT(head, tail, RX_BUFFER_SIZE);
 800c6b2:	4298      	cmp	r0, r3
 800c6b4:	d804      	bhi.n	800c6c0 <serialRxFree+0x18>
 800c6b6:	1ac0      	subs	r0, r0, r3
 800c6b8:	f200 30ff 	addw	r0, r0, #1023	@ 0x3ff
 800c6bc:	b280      	uxth	r0, r0
 800c6be:	4770      	bx	lr
 800c6c0:	1ac0      	subs	r0, r0, r3
 800c6c2:	b280      	uxth	r0, r0
 800c6c4:	3801      	subs	r0, #1
 800c6c6:	b280      	uxth	r0, r0
}
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	200010d8 	.word	0x200010d8

0800c6d0 <serialRxCount>:
//
// Returns number of characters in serial input buffer
//
static uint16_t serialRxCount (void)
{
    uint32_t tail = rxbuf.tail, head = rxbuf.head;
 800c6d0:	4a07      	ldr	r2, [pc, #28]	@ (800c6f0 <serialRxCount+0x20>)
 800c6d2:	6853      	ldr	r3, [r2, #4]
 800c6d4:	6810      	ldr	r0, [r2, #0]

    return BUFCOUNT(head, tail, RX_BUFFER_SIZE);
 800c6d6:	4283      	cmp	r3, r0
 800c6d8:	d804      	bhi.n	800c6e4 <serialRxCount+0x14>
 800c6da:	b280      	uxth	r0, r0
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	1ac0      	subs	r0, r0, r3
 800c6e0:	b280      	uxth	r0, r0
 800c6e2:	4770      	bx	lr
 800c6e4:	1ac0      	subs	r0, r0, r3
 800c6e6:	b280      	uxth	r0, r0
 800c6e8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800c6ec:	b280      	uxth	r0, r0
}
 800c6ee:	4770      	bx	lr
 800c6f0:	200010d8 	.word	0x200010d8

0800c6f4 <serialRxFlush>:
//
// Flushes the serial input buffer
//
static void serialRxFlush (void)
{
    rxbuf.tail = rxbuf.head;
 800c6f4:	4b01      	ldr	r3, [pc, #4]	@ (800c6fc <serialRxFlush+0x8>)
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	605a      	str	r2, [r3, #4]
}
 800c6fa:	4770      	bx	lr
 800c6fc:	200010d8 	.word	0x200010d8

0800c700 <serialRxCancel>:
//
// Flushes and adds a CAN character to the serial input buffer
//
static void serialRxCancel (void)
{
    rxbuf.data[rxbuf.head] = ASCII_CAN;
 800c700:	4b06      	ldr	r3, [pc, #24]	@ (800c71c <serialRxCancel+0x1c>)
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	441a      	add	r2, r3
 800c706:	2118      	movs	r1, #24
 800c708:	72d1      	strb	r1, [r2, #11]
    rxbuf.tail = rxbuf.head;
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	605a      	str	r2, [r3, #4]
    rxbuf.head = BUFNEXT(rxbuf.head, rxbuf);
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	3201      	adds	r2, #1
 800c712:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c716:	601a      	str	r2, [r3, #0]
}
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	200010d8 	.word	0x200010d8

0800c720 <serialPutC>:

//
// Writes a character to the serial output stream
//
static bool serialPutC (const char c)
{
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	4605      	mov	r5, r0
    uint16_t next_head = BUFNEXT(txbuf.head, txbuf);    // Get pointer to next free slot in buffer
 800c724:	4b0e      	ldr	r3, [pc, #56]	@ (800c760 <serialPutC+0x40>)
 800c726:	681c      	ldr	r4, [r3, #0]
 800c728:	3401      	adds	r4, #1
 800c72a:	f3c4 0408 	ubfx	r4, r4, #0, #9

    while(txbuf.tail == next_head) {                    // While TX buffer full
 800c72e:	4b0c      	ldr	r3, [pc, #48]	@ (800c760 <serialPutC+0x40>)
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	42a3      	cmp	r3, r4
 800c734:	d107      	bne.n	800c746 <serialPutC+0x26>
        if(!hal.stream_blocking_callback())             // check if blocking for space,
 800c736:	4b0b      	ldr	r3, [pc, #44]	@ (800c764 <serialPutC+0x44>)
 800c738:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800c73c:	4798      	blx	r3
 800c73e:	4603      	mov	r3, r0
 800c740:	2800      	cmp	r0, #0
 800c742:	d1f4      	bne.n	800c72e <serialPutC+0xe>
 800c744:	e00a      	b.n	800c75c <serialPutC+0x3c>
            return false;                               // exit if not (leaves TX buffer in an inconsistent state)
    }
    txbuf.data[txbuf.head] = c;                         // Add data to buffer,
 800c746:	4b06      	ldr	r3, [pc, #24]	@ (800c760 <serialPutC+0x40>)
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	441a      	add	r2, r3
 800c74c:	7215      	strb	r5, [r2, #8]
    txbuf.head = next_head;                             // update head pointer and
 800c74e:	601c      	str	r4, [r3, #0]
    UART0->CR1 |= USART_CR1_TXEIE;                      // enable TX interrupts
 800c750:	4a05      	ldr	r2, [pc, #20]	@ (800c768 <serialPutC+0x48>)
 800c752:	68d3      	ldr	r3, [r2, #12]
 800c754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c758:	60d3      	str	r3, [r2, #12]

    return true;
 800c75a:	2301      	movs	r3, #1
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	20000ed0 	.word	0x20000ed0
 800c764:	200018dc 	.word	0x200018dc
 800c768:	40011000 	.word	0x40011000

0800c76c <serialWriteS>:

//
// Writes a null terminated string to the serial output stream, blocks if buffer full
//
static void serialWriteS (const char *s)
{
 800c76c:	b510      	push	{r4, lr}
 800c76e:	4604      	mov	r4, r0
    char c, *ptr = (char *)s;

    while((c = *ptr++) != '\0')
 800c770:	e001      	b.n	800c776 <serialWriteS+0xa>
        serialPutC(c);
 800c772:	f7ff ffd5 	bl	800c720 <serialPutC>
    while((c = *ptr++) != '\0')
 800c776:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d1f9      	bne.n	800c772 <serialWriteS+0x6>
}
 800c77e:	bd10      	pop	{r4, pc}

0800c780 <serialWrite>:

//
// Writes a number of characters from string to the serial output stream followed by EOL, blocks if buffer full
//
static void serialWrite (const char *s, uint16_t length)
{
 800c780:	b538      	push	{r3, r4, r5, lr}
 800c782:	4604      	mov	r4, r0
    char *ptr = (char *)s;

    while(length--)
 800c784:	e004      	b.n	800c790 <serialWrite+0x10>
        serialPutC(*ptr++);
 800c786:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c78a:	f7ff ffc9 	bl	800c720 <serialPutC>
    while(length--)
 800c78e:	4629      	mov	r1, r5
 800c790:	1e4b      	subs	r3, r1, #1
 800c792:	b29d      	uxth	r5, r3
 800c794:	2900      	cmp	r1, #0
 800c796:	d1f6      	bne.n	800c786 <serialWrite+0x6>
}
 800c798:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c79c <serialTxFlush>:
//
// Flushes the serial output buffer
//
static void serialTxFlush (void)
{
    UART0->CR1 &= ~USART_CR1_TXEIE;     // Disable TX interrupts
 800c79c:	4a04      	ldr	r2, [pc, #16]	@ (800c7b0 <serialTxFlush+0x14>)
 800c79e:	68d3      	ldr	r3, [r2, #12]
 800c7a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c7a4:	60d3      	str	r3, [r2, #12]
    txbuf.tail = txbuf.head;
 800c7a6:	4b03      	ldr	r3, [pc, #12]	@ (800c7b4 <serialTxFlush+0x18>)
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	605a      	str	r2, [r3, #4]
}
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	40011000 	.word	0x40011000
 800c7b4:	20000ed0 	.word	0x20000ed0

0800c7b8 <serialTxCount>:
//
// Returns number of characters pending transmission
//
static uint16_t serialTxCount (void)
{
    uint32_t tail = txbuf.tail, head = txbuf.head;
 800c7b8:	4b0c      	ldr	r3, [pc, #48]	@ (800c7ec <serialTxCount+0x34>)
 800c7ba:	685a      	ldr	r2, [r3, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]

    return BUFCOUNT(head, tail, TX_BUFFER_SIZE) + (UART0->SR & USART_SR_TC ? 0 : 1);
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d80d      	bhi.n	800c7de <serialTxCount+0x26>
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	b292      	uxth	r2, r2
 800c7c6:	1a9b      	subs	r3, r3, r2
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	4a09      	ldr	r2, [pc, #36]	@ (800c7f0 <serialTxCount+0x38>)
 800c7cc:	6812      	ldr	r2, [r2, #0]
 800c7ce:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800c7d2:	bf0c      	ite	eq
 800c7d4:	2001      	moveq	r0, #1
 800c7d6:	2000      	movne	r0, #0
 800c7d8:	4418      	add	r0, r3
}
 800c7da:	b280      	uxth	r0, r0
 800c7dc:	4770      	bx	lr
    return BUFCOUNT(head, tail, TX_BUFFER_SIZE) + (UART0->SR & USART_SR_TC ? 0 : 1);
 800c7de:	1a9b      	subs	r3, r3, r2
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	e7ef      	b.n	800c7ca <serialTxCount+0x12>
 800c7ea:	bf00      	nop
 800c7ec:	20000ed0 	.word	0x20000ed0
 800c7f0:	40011000 	.word	0x40011000

0800c7f4 <serialGetC>:
//
// serialGetC - returns -1 if no data available
//
static int16_t serialGetC (void)
{
    uint_fast16_t tail = rxbuf.tail;    // Get buffer pointer
 800c7f4:	4a07      	ldr	r2, [pc, #28]	@ (800c814 <serialGetC+0x20>)
 800c7f6:	6853      	ldr	r3, [r2, #4]

    if(tail == rxbuf.head)
 800c7f8:	6812      	ldr	r2, [r2, #0]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d007      	beq.n	800c80e <serialGetC+0x1a>
        return -1; // no data available

    char data = rxbuf.data[tail];       // Get next character
 800c7fe:	4a05      	ldr	r2, [pc, #20]	@ (800c814 <serialGetC+0x20>)
 800c800:	18d1      	adds	r1, r2, r3
    rxbuf.tail = BUFNEXT(tail, rxbuf);  // and update pointer
 800c802:	3301      	adds	r3, #1
 800c804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c808:	6053      	str	r3, [r2, #4]

    return (int16_t)data;
 800c80a:	7ac8      	ldrb	r0, [r1, #11]
 800c80c:	4770      	bx	lr
        return -1; // no data available
 800c80e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c812:	4770      	bx	lr
 800c814:	200010d8 	.word	0x200010d8

0800c818 <serialDisable>:
    return true;
}

static bool serialDisable (bool disable)
{
    if(disable)
 800c818:	b130      	cbz	r0, 800c828 <serialDisable+0x10>
        UART0->CR1 &= ~USART_CR1_RXNEIE;
 800c81a:	4a06      	ldr	r2, [pc, #24]	@ (800c834 <serialDisable+0x1c>)
 800c81c:	68d3      	ldr	r3, [r2, #12]
 800c81e:	f023 0320 	bic.w	r3, r3, #32
 800c822:	60d3      	str	r3, [r2, #12]
    else
        UART0->CR1 |= USART_CR1_RXNEIE;

    return true;
}
 800c824:	2001      	movs	r0, #1
 800c826:	4770      	bx	lr
        UART0->CR1 |= USART_CR1_RXNEIE;
 800c828:	4a02      	ldr	r2, [pc, #8]	@ (800c834 <serialDisable+0x1c>)
 800c82a:	68d3      	ldr	r3, [r2, #12]
 800c82c:	f043 0320 	orr.w	r3, r3, #32
 800c830:	60d3      	str	r3, [r2, #12]
 800c832:	e7f7      	b.n	800c824 <serialDisable+0xc>
 800c834:	40011000 	.word	0x40011000

0800c838 <serialEnqueueRtCommand>:

static bool serialEnqueueRtCommand (char c)
{
 800c838:	b508      	push	{r3, lr}
    return enqueue_realtime_command(c);
 800c83a:	4b02      	ldr	r3, [pc, #8]	@ (800c844 <serialEnqueueRtCommand+0xc>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4798      	blx	r3
}
 800c840:	bd08      	pop	{r3, pc}
 800c842:	bf00      	nop
 800c844:	200001a0 	.word	0x200001a0

0800c848 <serialSetRtHandler>:

static enqueue_realtime_command_ptr serialSetRtHandler (enqueue_realtime_command_ptr handler)
{
 800c848:	4603      	mov	r3, r0
    enqueue_realtime_command_ptr prev = enqueue_realtime_command;
 800c84a:	4a03      	ldr	r2, [pc, #12]	@ (800c858 <serialSetRtHandler+0x10>)
 800c84c:	6810      	ldr	r0, [r2, #0]

    if(handler)
 800c84e:	461a      	mov	r2, r3
 800c850:	b10b      	cbz	r3, 800c856 <serialSetRtHandler+0xe>
        enqueue_realtime_command = handler;
 800c852:	4b01      	ldr	r3, [pc, #4]	@ (800c858 <serialSetRtHandler+0x10>)
 800c854:	601a      	str	r2, [r3, #0]

    return prev;
}
 800c856:	4770      	bx	lr
 800c858:	200001a0 	.word	0x200001a0

0800c85c <serial1RxFree>:
//
// Returns number of free characters in serial input buffer
//
static uint16_t serial1RxFree (void)
{
    uint32_t tail = rxbuf1.tail, head = rxbuf1.head;
 800c85c:	4a07      	ldr	r2, [pc, #28]	@ (800c87c <serial1RxFree+0x20>)
 800c85e:	6853      	ldr	r3, [r2, #4]
 800c860:	6810      	ldr	r0, [r2, #0]

    return (RX_BUFFER_SIZE - 1) - BUFCOUNT(head, tail, RX_BUFFER_SIZE);
 800c862:	4283      	cmp	r3, r0
 800c864:	d805      	bhi.n	800c872 <serial1RxFree+0x16>
 800c866:	1a18      	subs	r0, r3, r0
 800c868:	b280      	uxth	r0, r0
 800c86a:	f200 30ff 	addw	r0, r0, #1023	@ 0x3ff
 800c86e:	b280      	uxth	r0, r0
 800c870:	4770      	bx	lr
 800c872:	1a18      	subs	r0, r3, r0
 800c874:	b280      	uxth	r0, r0
 800c876:	3801      	subs	r0, #1
 800c878:	b280      	uxth	r0, r0
}
 800c87a:	4770      	bx	lr
 800c87c:	20000ac4 	.word	0x20000ac4

0800c880 <serial1RxCount>:
//
// Returns number of characters in serial input buffer
//
static uint16_t serial1RxCount (void)
{
    uint32_t tail = rxbuf1.tail, head = rxbuf1.head;
 800c880:	4a07      	ldr	r2, [pc, #28]	@ (800c8a0 <serial1RxCount+0x20>)
 800c882:	6853      	ldr	r3, [r2, #4]
 800c884:	6810      	ldr	r0, [r2, #0]

    return BUFCOUNT(head, tail, RX_BUFFER_SIZE);
 800c886:	4283      	cmp	r3, r0
 800c888:	d804      	bhi.n	800c894 <serial1RxCount+0x14>
 800c88a:	b280      	uxth	r0, r0
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	1ac0      	subs	r0, r0, r3
 800c890:	b280      	uxth	r0, r0
 800c892:	4770      	bx	lr
 800c894:	1ac0      	subs	r0, r0, r3
 800c896:	b280      	uxth	r0, r0
 800c898:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800c89c:	b280      	uxth	r0, r0
}
 800c89e:	4770      	bx	lr
 800c8a0:	20000ac4 	.word	0x20000ac4

0800c8a4 <serial1RxFlush>:
//
// Flushes the serial input buffer
//
static void serial1RxFlush (void)
{
    rxbuf1.tail = rxbuf1.head;
 800c8a4:	4b01      	ldr	r3, [pc, #4]	@ (800c8ac <serial1RxFlush+0x8>)
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	605a      	str	r2, [r3, #4]
}
 800c8aa:	4770      	bx	lr
 800c8ac:	20000ac4 	.word	0x20000ac4

0800c8b0 <serial1RxCancel>:
//
// Flushes and adds a CAN character to the serial input buffer
//
static void serial1RxCancel (void)
{
    rxbuf1.data[rxbuf1.head] = ASCII_CAN;
 800c8b0:	4b06      	ldr	r3, [pc, #24]	@ (800c8cc <serial1RxCancel+0x1c>)
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	441a      	add	r2, r3
 800c8b6:	2118      	movs	r1, #24
 800c8b8:	72d1      	strb	r1, [r2, #11]
    rxbuf1.tail = rxbuf1.head;
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	605a      	str	r2, [r3, #4]
    rxbuf1.head = BUFNEXT(rxbuf1.head, rxbuf1);
 800c8be:	681a      	ldr	r2, [r3, #0]
 800c8c0:	3201      	adds	r2, #1
 800c8c2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c8c6:	601a      	str	r2, [r3, #0]
}
 800c8c8:	4770      	bx	lr
 800c8ca:	bf00      	nop
 800c8cc:	20000ac4 	.word	0x20000ac4

0800c8d0 <serial1PutC>:

//
// Writes a character to the serial output stream
//
static bool serial1PutC (const char c)
{
 800c8d0:	b538      	push	{r3, r4, r5, lr}
 800c8d2:	4605      	mov	r5, r0
    uint32_t next_head = BUFNEXT(txbuf1.head, txbuf1);   // Set and update head pointer
 800c8d4:	4b11      	ldr	r3, [pc, #68]	@ (800c91c <serial1PutC+0x4c>)
 800c8d6:	681c      	ldr	r4, [r3, #0]
 800c8d8:	3401      	adds	r4, #1
 800c8da:	f3c4 0408 	ubfx	r4, r4, #0, #9

    while(txbuf1.tail == next_head) {           // While TX buffer full
 800c8de:	e004      	b.n	800c8ea <serial1PutC+0x1a>
        if(!hal.stream_blocking_callback())     // check if blocking for space,
            return false;                       // exit if not (leaves TX buffer in an inconsistent state)
        UART1->CR1 |= USART_CR1_TXEIE;          // Enable TX interrupts???
 800c8e0:	4a0f      	ldr	r2, [pc, #60]	@ (800c920 <serial1PutC+0x50>)
 800c8e2:	68d3      	ldr	r3, [r2, #12]
 800c8e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8e8:	60d3      	str	r3, [r2, #12]
    while(txbuf1.tail == next_head) {           // While TX buffer full
 800c8ea:	4b0c      	ldr	r3, [pc, #48]	@ (800c91c <serial1PutC+0x4c>)
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	42a3      	cmp	r3, r4
 800c8f0:	d107      	bne.n	800c902 <serial1PutC+0x32>
        if(!hal.stream_blocking_callback())     // check if blocking for space,
 800c8f2:	4b0c      	ldr	r3, [pc, #48]	@ (800c924 <serial1PutC+0x54>)
 800c8f4:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800c8f8:	4798      	blx	r3
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	d1ef      	bne.n	800c8e0 <serial1PutC+0x10>
 800c900:	e00a      	b.n	800c918 <serial1PutC+0x48>
    }

    txbuf1.data[txbuf1.head] = c;               // Add data to buffer
 800c902:	4b06      	ldr	r3, [pc, #24]	@ (800c91c <serial1PutC+0x4c>)
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	441a      	add	r2, r3
 800c908:	7215      	strb	r5, [r2, #8]
    txbuf1.head = next_head;                    // and update head pointer
 800c90a:	601c      	str	r4, [r3, #0]

    UART1->CR1 |= USART_CR1_TXEIE;              // Enable TX interrupts
 800c90c:	4a04      	ldr	r2, [pc, #16]	@ (800c920 <serial1PutC+0x50>)
 800c90e:	68d3      	ldr	r3, [r2, #12]
 800c910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c914:	60d3      	str	r3, [r2, #12]

    return true;
 800c916:	2301      	movs	r3, #1
}
 800c918:	4618      	mov	r0, r3
 800c91a:	bd38      	pop	{r3, r4, r5, pc}
 800c91c:	200008bc 	.word	0x200008bc
 800c920:	40004400 	.word	0x40004400
 800c924:	200018dc 	.word	0x200018dc

0800c928 <serial1WriteS>:

//
// Writes a null terminated string to the serial output stream, blocks if buffer full
//
static void serial1WriteS (const char *s)
{
 800c928:	b510      	push	{r4, lr}
 800c92a:	4604      	mov	r4, r0
    char c, *ptr = (char *)s;

    while((c = *ptr++) != '\0')
 800c92c:	e001      	b.n	800c932 <serial1WriteS+0xa>
        serial1PutC(c);
 800c92e:	f7ff ffcf 	bl	800c8d0 <serial1PutC>
    while((c = *ptr++) != '\0')
 800c932:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c936:	2800      	cmp	r0, #0
 800c938:	d1f9      	bne.n	800c92e <serial1WriteS+0x6>
}
 800c93a:	bd10      	pop	{r4, pc}

0800c93c <serial1Write>:

// Writes a number of characters from a buffer to the serial output stream, blocks if buffer full
//
static void serial1Write (const char *s, uint16_t length)
{
 800c93c:	b538      	push	{r3, r4, r5, lr}
 800c93e:	4604      	mov	r4, r0
    char *ptr = (char *)s;

    while(length--)
 800c940:	e004      	b.n	800c94c <serial1Write+0x10>
        serial1PutC(*ptr++);
 800c942:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c946:	f7ff ffc3 	bl	800c8d0 <serial1PutC>
    while(length--)
 800c94a:	4629      	mov	r1, r5
 800c94c:	1e4b      	subs	r3, r1, #1
 800c94e:	b29d      	uxth	r5, r3
 800c950:	2900      	cmp	r1, #0
 800c952:	d1f6      	bne.n	800c942 <serial1Write+0x6>
}
 800c954:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c958 <serial1TxFlush>:
//
// Flushes the serial output buffer
//
static void serial1TxFlush (void)
{
    UART1->CR1 &= ~USART_CR1_TXEIE;     // Disable TX interrupts
 800c958:	4a04      	ldr	r2, [pc, #16]	@ (800c96c <serial1TxFlush+0x14>)
 800c95a:	68d3      	ldr	r3, [r2, #12]
 800c95c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c960:	60d3      	str	r3, [r2, #12]
    txbuf1.tail = txbuf1.head;
 800c962:	4b03      	ldr	r3, [pc, #12]	@ (800c970 <serial1TxFlush+0x18>)
 800c964:	681a      	ldr	r2, [r3, #0]
 800c966:	605a      	str	r2, [r3, #4]
}
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	40004400 	.word	0x40004400
 800c970:	200008bc 	.word	0x200008bc

0800c974 <serial1TxCount>:
//
// Returns number of characters pending transmission
//
static uint16_t serial1TxCount (void)
{
    uint32_t tail = txbuf1.tail, head = txbuf1.head;
 800c974:	4b0c      	ldr	r3, [pc, #48]	@ (800c9a8 <serial1TxCount+0x34>)
 800c976:	685a      	ldr	r2, [r3, #4]
 800c978:	681b      	ldr	r3, [r3, #0]

    return BUFCOUNT(head, tail, TX_BUFFER_SIZE) + (UART1->SR & USART_SR_TC ? 0 : 1);
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d80d      	bhi.n	800c99a <serial1TxCount+0x26>
 800c97e:	b29b      	uxth	r3, r3
 800c980:	b292      	uxth	r2, r2
 800c982:	1a9b      	subs	r3, r3, r2
 800c984:	b29b      	uxth	r3, r3
 800c986:	4a09      	ldr	r2, [pc, #36]	@ (800c9ac <serial1TxCount+0x38>)
 800c988:	6812      	ldr	r2, [r2, #0]
 800c98a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800c98e:	bf0c      	ite	eq
 800c990:	2001      	moveq	r0, #1
 800c992:	2000      	movne	r0, #0
 800c994:	4418      	add	r0, r3
}
 800c996:	b280      	uxth	r0, r0
 800c998:	4770      	bx	lr
    return BUFCOUNT(head, tail, TX_BUFFER_SIZE) + (UART1->SR & USART_SR_TC ? 0 : 1);
 800c99a:	1a9b      	subs	r3, r3, r2
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	e7ef      	b.n	800c986 <serial1TxCount+0x12>
 800c9a6:	bf00      	nop
 800c9a8:	200008bc 	.word	0x200008bc
 800c9ac:	40004400 	.word	0x40004400

0800c9b0 <serial1GetC>:
//
// serialGetC - returns -1 if no data available
//
static int16_t serial1GetC (void)
{
    uint_fast16_t tail = rxbuf1.tail;       // Get buffer pointer
 800c9b0:	4a07      	ldr	r2, [pc, #28]	@ (800c9d0 <serial1GetC+0x20>)
 800c9b2:	6853      	ldr	r3, [r2, #4]

    if(tail == rxbuf1.head)
 800c9b4:	6812      	ldr	r2, [r2, #0]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d007      	beq.n	800c9ca <serial1GetC+0x1a>
        return -1; // no data available

    char data = rxbuf1.data[tail];          // Get next character
 800c9ba:	4a05      	ldr	r2, [pc, #20]	@ (800c9d0 <serial1GetC+0x20>)
 800c9bc:	18d1      	adds	r1, r2, r3
    rxbuf1.tail = BUFNEXT(tail, rxbuf1);    // and update pointer
 800c9be:	3301      	adds	r3, #1
 800c9c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c9c4:	6053      	str	r3, [r2, #4]

    return (int16_t)data;
 800c9c6:	7ac8      	ldrb	r0, [r1, #11]
 800c9c8:	4770      	bx	lr
        return -1; // no data available
 800c9ca:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c9ce:	4770      	bx	lr
 800c9d0:	20000ac4 	.word	0x20000ac4

0800c9d4 <serial1Disable>:
    return true;
}

static bool serial1Disable (bool disable)
{
    if(disable)
 800c9d4:	b130      	cbz	r0, 800c9e4 <serial1Disable+0x10>
        UART1->CR1 &= ~USART_CR1_RXNEIE;
 800c9d6:	4a06      	ldr	r2, [pc, #24]	@ (800c9f0 <serial1Disable+0x1c>)
 800c9d8:	68d3      	ldr	r3, [r2, #12]
 800c9da:	f023 0320 	bic.w	r3, r3, #32
 800c9de:	60d3      	str	r3, [r2, #12]
    else
        UART1->CR1 |= USART_CR1_RXNEIE;

    return true;
}
 800c9e0:	2001      	movs	r0, #1
 800c9e2:	4770      	bx	lr
        UART1->CR1 |= USART_CR1_RXNEIE;
 800c9e4:	4a02      	ldr	r2, [pc, #8]	@ (800c9f0 <serial1Disable+0x1c>)
 800c9e6:	68d3      	ldr	r3, [r2, #12]
 800c9e8:	f043 0320 	orr.w	r3, r3, #32
 800c9ec:	60d3      	str	r3, [r2, #12]
 800c9ee:	e7f7      	b.n	800c9e0 <serial1Disable+0xc>
 800c9f0:	40004400 	.word	0x40004400

0800c9f4 <serial1EnqueueRtCommand>:

static bool serial1EnqueueRtCommand (char c)
{
 800c9f4:	b508      	push	{r3, lr}
    return enqueue_realtime_command1(c);
 800c9f6:	4b02      	ldr	r3, [pc, #8]	@ (800ca00 <serial1EnqueueRtCommand+0xc>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4798      	blx	r3
}
 800c9fc:	bd08      	pop	{r3, pc}
 800c9fe:	bf00      	nop
 800ca00:	2000019c 	.word	0x2000019c

0800ca04 <serial1SetRtHandler>:

static enqueue_realtime_command_ptr serial1SetRtHandler (enqueue_realtime_command_ptr handler)
{
 800ca04:	4603      	mov	r3, r0
    enqueue_realtime_command_ptr prev = enqueue_realtime_command1;
 800ca06:	4a03      	ldr	r2, [pc, #12]	@ (800ca14 <serial1SetRtHandler+0x10>)
 800ca08:	6810      	ldr	r0, [r2, #0]

    if(handler)
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	b10b      	cbz	r3, 800ca12 <serial1SetRtHandler+0xe>
        enqueue_realtime_command1 = handler;
 800ca0e:	4b01      	ldr	r3, [pc, #4]	@ (800ca14 <serial1SetRtHandler+0x10>)
 800ca10:	601a      	str	r2, [r3, #0]

    return prev;
}
 800ca12:	4770      	bx	lr
 800ca14:	2000019c 	.word	0x2000019c

0800ca18 <serial1SetBaudRate>:
{
 800ca18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca1c:	4607      	mov	r7, r0
    UART1->CR1 = USART_CR1_RE|USART_CR1_TE;
 800ca1e:	f8df a130 	ldr.w	sl, [pc, #304]	@ 800cb50 <serial1SetBaudRate+0x138>
 800ca22:	230c      	movs	r3, #12
 800ca24:	f8ca 300c 	str.w	r3, [sl, #12]
    UART1->BRR = UART_BRR_SAMPLING16(UART1_CLK, baud_rate);
 800ca28:	f7fd f906 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 800ca2c:	2400      	movs	r4, #0
 800ca2e:	1803      	adds	r3, r0, r0
 800ca30:	eb44 0104 	adc.w	r1, r4, r4
 800ca34:	181b      	adds	r3, r3, r0
 800ca36:	f141 0100 	adc.w	r1, r1, #0
 800ca3a:	00c9      	lsls	r1, r1, #3
 800ca3c:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800ca40:	00db      	lsls	r3, r3, #3
 800ca42:	1818      	adds	r0, r3, r0
 800ca44:	ea4f 7997 	mov.w	r9, r7, lsr #30
 800ca48:	ea4f 0787 	mov.w	r7, r7, lsl #2
 800ca4c:	463a      	mov	r2, r7
 800ca4e:	464b      	mov	r3, r9
 800ca50:	f141 0100 	adc.w	r1, r1, #0
 800ca54:	f7fc f860 	bl	8008b18 <__aeabi_uldivmod>
 800ca58:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 800cb54 <serial1SetBaudRate+0x13c>
 800ca5c:	fba8 3500 	umull	r3, r5, r8, r0
 800ca60:	096d      	lsrs	r5, r5, #5
 800ca62:	012d      	lsls	r5, r5, #4
 800ca64:	f7fd f8e8 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 800ca68:	1803      	adds	r3, r0, r0
 800ca6a:	eb44 0104 	adc.w	r1, r4, r4
 800ca6e:	181b      	adds	r3, r3, r0
 800ca70:	f141 0100 	adc.w	r1, r1, #0
 800ca74:	00c9      	lsls	r1, r1, #3
 800ca76:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800ca7a:	00db      	lsls	r3, r3, #3
 800ca7c:	1818      	adds	r0, r3, r0
 800ca7e:	463a      	mov	r2, r7
 800ca80:	464b      	mov	r3, r9
 800ca82:	f141 0100 	adc.w	r1, r1, #0
 800ca86:	f7fc f847 	bl	8008b18 <__aeabi_uldivmod>
 800ca8a:	4606      	mov	r6, r0
 800ca8c:	f7fd f8d4 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 800ca90:	1803      	adds	r3, r0, r0
 800ca92:	eb44 0104 	adc.w	r1, r4, r4
 800ca96:	181b      	adds	r3, r3, r0
 800ca98:	f141 0100 	adc.w	r1, r1, #0
 800ca9c:	00c9      	lsls	r1, r1, #3
 800ca9e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800caa2:	00db      	lsls	r3, r3, #3
 800caa4:	1818      	adds	r0, r3, r0
 800caa6:	463a      	mov	r2, r7
 800caa8:	464b      	mov	r3, r9
 800caaa:	f141 0100 	adc.w	r1, r1, #0
 800caae:	f7fc f833 	bl	8008b18 <__aeabi_uldivmod>
 800cab2:	fba8 3000 	umull	r3, r0, r8, r0
 800cab6:	0940      	lsrs	r0, r0, #5
 800cab8:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 800cabc:	fb0b 6310 	mls	r3, fp, r0, r6
 800cac0:	011b      	lsls	r3, r3, #4
 800cac2:	3332      	adds	r3, #50	@ 0x32
 800cac4:	fba8 2303 	umull	r2, r3, r8, r3
 800cac8:	095b      	lsrs	r3, r3, #5
 800caca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cace:	441d      	add	r5, r3
 800cad0:	f7fd f8b2 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 800cad4:	1803      	adds	r3, r0, r0
 800cad6:	eb44 0104 	adc.w	r1, r4, r4
 800cada:	181b      	adds	r3, r3, r0
 800cadc:	f141 0100 	adc.w	r1, r1, #0
 800cae0:	00c9      	lsls	r1, r1, #3
 800cae2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800cae6:	00db      	lsls	r3, r3, #3
 800cae8:	1818      	adds	r0, r3, r0
 800caea:	463a      	mov	r2, r7
 800caec:	464b      	mov	r3, r9
 800caee:	f141 0100 	adc.w	r1, r1, #0
 800caf2:	f7fc f811 	bl	8008b18 <__aeabi_uldivmod>
 800caf6:	4606      	mov	r6, r0
 800caf8:	f7fd f89e 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 800cafc:	1803      	adds	r3, r0, r0
 800cafe:	4164      	adcs	r4, r4
 800cb00:	181b      	adds	r3, r3, r0
 800cb02:	f144 0100 	adc.w	r1, r4, #0
 800cb06:	00c9      	lsls	r1, r1, #3
 800cb08:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800cb0c:	00db      	lsls	r3, r3, #3
 800cb0e:	1818      	adds	r0, r3, r0
 800cb10:	463a      	mov	r2, r7
 800cb12:	464b      	mov	r3, r9
 800cb14:	f141 0100 	adc.w	r1, r1, #0
 800cb18:	f7fb fffe 	bl	8008b18 <__aeabi_uldivmod>
 800cb1c:	fba8 3000 	umull	r3, r0, r8, r0
 800cb20:	0940      	lsrs	r0, r0, #5
 800cb22:	fb0b 6310 	mls	r3, fp, r0, r6
 800cb26:	011b      	lsls	r3, r3, #4
 800cb28:	3332      	adds	r3, #50	@ 0x32
 800cb2a:	fba8 8303 	umull	r8, r3, r8, r3
 800cb2e:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800cb32:	441d      	add	r5, r3
 800cb34:	f8ca 5008 	str.w	r5, [sl, #8]
    UART1->CR1 |= (USART_CR1_UE|USART_CR1_RXNEIE);
 800cb38:	f8da 300c 	ldr.w	r3, [sl, #12]
 800cb3c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800cb40:	f043 0320 	orr.w	r3, r3, #32
 800cb44:	f8ca 300c 	str.w	r3, [sl, #12]
}
 800cb48:	2001      	movs	r0, #1
 800cb4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4e:	bf00      	nop
 800cb50:	40004400 	.word	0x40004400
 800cb54:	51eb851f 	.word	0x51eb851f

0800cb58 <serial1Init>:

static const io_stream_t *serial1Init (uint32_t baud_rate)
{
 800cb58:	b570      	push	{r4, r5, r6, lr}
 800cb5a:	b086      	sub	sp, #24
 800cb5c:	4605      	mov	r5, r0
        .disable_rx = serial1Disable,
        .set_baud_rate = serial1SetBaudRate,
        .set_enqueue_rt_handler = serial1SetRtHandler
    };

    if(!serialClaimPort(stream.instance))
 800cb5e:	2001      	movs	r0, #1
 800cb60:	f7ff fd7a 	bl	800c658 <serialClaimPort>
 800cb64:	b330      	cbz	r0, 800cbb4 <serial1Init+0x5c>
        return NULL;

    UART1_CLK_En();
 800cb66:	2600      	movs	r6, #0
 800cb68:	9600      	str	r6, [sp, #0]
 800cb6a:	4b13      	ldr	r3, [pc, #76]	@ (800cbb8 <serial1Init+0x60>)
 800cb6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cb6e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800cb72:	641a      	str	r2, [r3, #64]	@ 0x40
 800cb74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb7a:	9300      	str	r3, [sp, #0]
 800cb7c:	9b00      	ldr	r3, [sp, #0]

    GPIO_InitTypeDef GPIO_InitStructure = {
 800cb7e:	f10d 0c04 	add.w	ip, sp, #4
 800cb82:	4c0e      	ldr	r4, [pc, #56]	@ (800cbbc <serial1Init+0x64>)
 800cb84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb8a:	6823      	ldr	r3, [r4, #0]
 800cb8c:	f8cc 3000 	str.w	r3, [ip]
        .Pull      = GPIO_NOPULL,
        .Speed     = GPIO_SPEED_FREQ_VERY_HIGH,
        .Pin       = (1 << UART1_RX_PIN)|(1 << UART1_TX_PIN),
        .Alternate = UART1_AF
    };
    HAL_GPIO_Init(UART1_PORT, &GPIO_InitStructure);
 800cb90:	a901      	add	r1, sp, #4
 800cb92:	480b      	ldr	r0, [pc, #44]	@ (800cbc0 <serial1Init+0x68>)
 800cb94:	f7fc fc4e 	bl	8009434 <HAL_GPIO_Init>

    serial1SetBaudRate(baud_rate);
 800cb98:	4628      	mov	r0, r5
 800cb9a:	f7ff ff3d 	bl	800ca18 <serial1SetBaudRate>

    HAL_NVIC_SetPriority(UART1_IRQ, 0, 0);
 800cb9e:	4632      	mov	r2, r6
 800cba0:	4631      	mov	r1, r6
 800cba2:	2026      	movs	r0, #38	@ 0x26
 800cba4:	f7fc fa3c 	bl	8009020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART1_IRQ);
 800cba8:	2026      	movs	r0, #38	@ 0x26
 800cbaa:	f7fc fa49 	bl	8009040 <HAL_NVIC_EnableIRQ>


    return &stream;
 800cbae:	4805      	ldr	r0, [pc, #20]	@ (800cbc4 <serial1Init+0x6c>)
}
 800cbb0:	b006      	add	sp, #24
 800cbb2:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
 800cbb4:	2000      	movs	r0, #0
 800cbb6:	e7fb      	b.n	800cbb0 <serial1Init+0x58>
 800cbb8:	40023800 	.word	0x40023800
 800cbbc:	080293a4 	.word	0x080293a4
 800cbc0:	40020000 	.word	0x40020000
 800cbc4:	080296a4 	.word	0x080296a4

0800cbc8 <serial1SuspendInput>:
{
 800cbc8:	b508      	push	{r3, lr}
 800cbca:	4601      	mov	r1, r0
    return stream_rx_suspend(&rxbuf1, suspend);
 800cbcc:	4801      	ldr	r0, [pc, #4]	@ (800cbd4 <serial1SuspendInput+0xc>)
 800cbce:	f014 f83d 	bl	8020c4c <stream_rx_suspend>
}
 800cbd2:	bd08      	pop	{r3, pc}
 800cbd4:	20000ac4 	.word	0x20000ac4

0800cbd8 <serialSuspendInput>:
{
 800cbd8:	b508      	push	{r3, lr}
 800cbda:	4601      	mov	r1, r0
    return stream_rx_suspend(&rxbuf, suspend);
 800cbdc:	4801      	ldr	r0, [pc, #4]	@ (800cbe4 <serialSuspendInput+0xc>)
 800cbde:	f014 f835 	bl	8020c4c <stream_rx_suspend>
}
 800cbe2:	bd08      	pop	{r3, pc}
 800cbe4:	200010d8 	.word	0x200010d8

0800cbe8 <serialSetBaudRate>:
{
 800cbe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbec:	4607      	mov	r7, r0
    UART0->CR1 = USART_CR1_RE|USART_CR1_TE;
 800cbee:	f8df a130 	ldr.w	sl, [pc, #304]	@ 800cd20 <serialSetBaudRate+0x138>
 800cbf2:	230c      	movs	r3, #12
 800cbf4:	f8ca 300c 	str.w	r3, [sl, #12]
    UART0->BRR = UART_BRR_SAMPLING16(UART0_CLK, baud_rate);
 800cbf8:	f7fd f82e 	bl	8009c58 <HAL_RCC_GetPCLK2Freq>
 800cbfc:	2400      	movs	r4, #0
 800cbfe:	1803      	adds	r3, r0, r0
 800cc00:	eb44 0104 	adc.w	r1, r4, r4
 800cc04:	181b      	adds	r3, r3, r0
 800cc06:	f141 0100 	adc.w	r1, r1, #0
 800cc0a:	00c9      	lsls	r1, r1, #3
 800cc0c:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800cc10:	00db      	lsls	r3, r3, #3
 800cc12:	1818      	adds	r0, r3, r0
 800cc14:	ea4f 7997 	mov.w	r9, r7, lsr #30
 800cc18:	ea4f 0787 	mov.w	r7, r7, lsl #2
 800cc1c:	463a      	mov	r2, r7
 800cc1e:	464b      	mov	r3, r9
 800cc20:	f141 0100 	adc.w	r1, r1, #0
 800cc24:	f7fb ff78 	bl	8008b18 <__aeabi_uldivmod>
 800cc28:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 800cd24 <serialSetBaudRate+0x13c>
 800cc2c:	fba8 3500 	umull	r3, r5, r8, r0
 800cc30:	096d      	lsrs	r5, r5, #5
 800cc32:	012d      	lsls	r5, r5, #4
 800cc34:	f7fd f810 	bl	8009c58 <HAL_RCC_GetPCLK2Freq>
 800cc38:	1803      	adds	r3, r0, r0
 800cc3a:	eb44 0104 	adc.w	r1, r4, r4
 800cc3e:	181b      	adds	r3, r3, r0
 800cc40:	f141 0100 	adc.w	r1, r1, #0
 800cc44:	00c9      	lsls	r1, r1, #3
 800cc46:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800cc4a:	00db      	lsls	r3, r3, #3
 800cc4c:	1818      	adds	r0, r3, r0
 800cc4e:	463a      	mov	r2, r7
 800cc50:	464b      	mov	r3, r9
 800cc52:	f141 0100 	adc.w	r1, r1, #0
 800cc56:	f7fb ff5f 	bl	8008b18 <__aeabi_uldivmod>
 800cc5a:	4606      	mov	r6, r0
 800cc5c:	f7fc fffc 	bl	8009c58 <HAL_RCC_GetPCLK2Freq>
 800cc60:	1803      	adds	r3, r0, r0
 800cc62:	eb44 0104 	adc.w	r1, r4, r4
 800cc66:	181b      	adds	r3, r3, r0
 800cc68:	f141 0100 	adc.w	r1, r1, #0
 800cc6c:	00c9      	lsls	r1, r1, #3
 800cc6e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800cc72:	00db      	lsls	r3, r3, #3
 800cc74:	1818      	adds	r0, r3, r0
 800cc76:	463a      	mov	r2, r7
 800cc78:	464b      	mov	r3, r9
 800cc7a:	f141 0100 	adc.w	r1, r1, #0
 800cc7e:	f7fb ff4b 	bl	8008b18 <__aeabi_uldivmod>
 800cc82:	fba8 3000 	umull	r3, r0, r8, r0
 800cc86:	0940      	lsrs	r0, r0, #5
 800cc88:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 800cc8c:	fb0b 6310 	mls	r3, fp, r0, r6
 800cc90:	011b      	lsls	r3, r3, #4
 800cc92:	3332      	adds	r3, #50	@ 0x32
 800cc94:	fba8 2303 	umull	r2, r3, r8, r3
 800cc98:	095b      	lsrs	r3, r3, #5
 800cc9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cc9e:	441d      	add	r5, r3
 800cca0:	f7fc ffda 	bl	8009c58 <HAL_RCC_GetPCLK2Freq>
 800cca4:	1803      	adds	r3, r0, r0
 800cca6:	eb44 0104 	adc.w	r1, r4, r4
 800ccaa:	181b      	adds	r3, r3, r0
 800ccac:	f141 0100 	adc.w	r1, r1, #0
 800ccb0:	00c9      	lsls	r1, r1, #3
 800ccb2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800ccb6:	00db      	lsls	r3, r3, #3
 800ccb8:	1818      	adds	r0, r3, r0
 800ccba:	463a      	mov	r2, r7
 800ccbc:	464b      	mov	r3, r9
 800ccbe:	f141 0100 	adc.w	r1, r1, #0
 800ccc2:	f7fb ff29 	bl	8008b18 <__aeabi_uldivmod>
 800ccc6:	4606      	mov	r6, r0
 800ccc8:	f7fc ffc6 	bl	8009c58 <HAL_RCC_GetPCLK2Freq>
 800cccc:	1803      	adds	r3, r0, r0
 800ccce:	4164      	adcs	r4, r4
 800ccd0:	181b      	adds	r3, r3, r0
 800ccd2:	f144 0100 	adc.w	r1, r4, #0
 800ccd6:	00c9      	lsls	r1, r1, #3
 800ccd8:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800ccdc:	00db      	lsls	r3, r3, #3
 800ccde:	1818      	adds	r0, r3, r0
 800cce0:	463a      	mov	r2, r7
 800cce2:	464b      	mov	r3, r9
 800cce4:	f141 0100 	adc.w	r1, r1, #0
 800cce8:	f7fb ff16 	bl	8008b18 <__aeabi_uldivmod>
 800ccec:	fba8 3000 	umull	r3, r0, r8, r0
 800ccf0:	0940      	lsrs	r0, r0, #5
 800ccf2:	fb0b 6310 	mls	r3, fp, r0, r6
 800ccf6:	011b      	lsls	r3, r3, #4
 800ccf8:	3332      	adds	r3, #50	@ 0x32
 800ccfa:	fba8 8303 	umull	r8, r3, r8, r3
 800ccfe:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800cd02:	441d      	add	r5, r3
 800cd04:	f8ca 5008 	str.w	r5, [sl, #8]
    UART0->CR1 |= (USART_CR1_UE|USART_CR1_RXNEIE);
 800cd08:	f8da 300c 	ldr.w	r3, [sl, #12]
 800cd0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800cd10:	f043 0320 	orr.w	r3, r3, #32
 800cd14:	f8ca 300c 	str.w	r3, [sl, #12]
}
 800cd18:	2001      	movs	r0, #1
 800cd1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd1e:	bf00      	nop
 800cd20:	40011000 	.word	0x40011000
 800cd24:	51eb851f 	.word	0x51eb851f

0800cd28 <serialInit>:
{
 800cd28:	b570      	push	{r4, r5, r6, lr}
 800cd2a:	b086      	sub	sp, #24
 800cd2c:	4605      	mov	r5, r0
    if(!serialClaimPort(stream.instance))
 800cd2e:	2000      	movs	r0, #0
 800cd30:	f7ff fc92 	bl	800c658 <serialClaimPort>
 800cd34:	b330      	cbz	r0, 800cd84 <serialInit+0x5c>
    UART0_CLK_En();
 800cd36:	2600      	movs	r6, #0
 800cd38:	9600      	str	r6, [sp, #0]
 800cd3a:	4b13      	ldr	r3, [pc, #76]	@ (800cd88 <serialInit+0x60>)
 800cd3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd3e:	f042 0210 	orr.w	r2, r2, #16
 800cd42:	645a      	str	r2, [r3, #68]	@ 0x44
 800cd44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd46:	f003 0310 	and.w	r3, r3, #16
 800cd4a:	9300      	str	r3, [sp, #0]
 800cd4c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitTypeDef GPIO_InitStructure = {
 800cd4e:	f10d 0c04 	add.w	ip, sp, #4
 800cd52:	4c0e      	ldr	r4, [pc, #56]	@ (800cd8c <serialInit+0x64>)
 800cd54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cd5a:	6823      	ldr	r3, [r4, #0]
 800cd5c:	f8cc 3000 	str.w	r3, [ip]
    HAL_GPIO_Init(UART0_PORT, &GPIO_InitStructure);
 800cd60:	a901      	add	r1, sp, #4
 800cd62:	480b      	ldr	r0, [pc, #44]	@ (800cd90 <serialInit+0x68>)
 800cd64:	f7fc fb66 	bl	8009434 <HAL_GPIO_Init>
    serialSetBaudRate(baud_rate);
 800cd68:	4628      	mov	r0, r5
 800cd6a:	f7ff ff3d 	bl	800cbe8 <serialSetBaudRate>
    HAL_NVIC_SetPriority(UART0_IRQ, 0, 0);
 800cd6e:	4632      	mov	r2, r6
 800cd70:	4631      	mov	r1, r6
 800cd72:	2025      	movs	r0, #37	@ 0x25
 800cd74:	f7fc f954 	bl	8009020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART0_IRQ);
 800cd78:	2025      	movs	r0, #37	@ 0x25
 800cd7a:	f7fc f961 	bl	8009040 <HAL_NVIC_EnableIRQ>
    return &stream;
 800cd7e:	4805      	ldr	r0, [pc, #20]	@ (800cd94 <serialInit+0x6c>)
}
 800cd80:	b006      	add	sp, #24
 800cd82:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
 800cd84:	2000      	movs	r0, #0
 800cd86:	e7fb      	b.n	800cd80 <serialInit+0x58>
 800cd88:	40023800 	.word	0x40023800
 800cd8c:	080293b8 	.word	0x080293b8
 800cd90:	40020000 	.word	0x40020000
 800cd94:	08029658 	.word	0x08029658

0800cd98 <serialRegisterStreams>:
{
 800cd98:	b510      	push	{r4, lr}
    hal.periph_port.register_pin(&rx0);
 800cd9a:	4c0a      	ldr	r4, [pc, #40]	@ (800cdc4 <serialRegisterStreams+0x2c>)
 800cd9c:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
 800cda0:	4809      	ldr	r0, [pc, #36]	@ (800cdc8 <serialRegisterStreams+0x30>)
 800cda2:	4798      	blx	r3
    hal.periph_port.register_pin(&tx0);
 800cda4:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
 800cda8:	4808      	ldr	r0, [pc, #32]	@ (800cdcc <serialRegisterStreams+0x34>)
 800cdaa:	4798      	blx	r3
    hal.periph_port.register_pin(&rx1);
 800cdac:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
 800cdb0:	4807      	ldr	r0, [pc, #28]	@ (800cdd0 <serialRegisterStreams+0x38>)
 800cdb2:	4798      	blx	r3
    hal.periph_port.register_pin(&tx1);
 800cdb4:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
 800cdb8:	4806      	ldr	r0, [pc, #24]	@ (800cdd4 <serialRegisterStreams+0x3c>)
 800cdba:	4798      	blx	r3
    stream_register_streams(&streams);
 800cdbc:	4806      	ldr	r0, [pc, #24]	@ (800cdd8 <serialRegisterStreams+0x40>)
 800cdbe:	f013 ff0b 	bl	8020bd8 <stream_register_streams>
}
 800cdc2:	bd10      	pop	{r4, pc}
 800cdc4:	200018dc 	.word	0x200018dc
 800cdc8:	08029748 	.word	0x08029748
 800cdcc:	08029730 	.word	0x08029730
 800cdd0:	08029718 	.word	0x08029718
 800cdd4:	08029700 	.word	0x08029700
 800cdd8:	20000180 	.word	0x20000180

0800cddc <USART1_IRQHandler>:
{
 800cddc:	b510      	push	{r4, lr}
    if(UART0->SR & USART_SR_RXNE) {
 800cdde:	4b1d      	ldr	r3, [pc, #116]	@ (800ce54 <USART1_IRQHandler+0x78>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f013 0f20 	tst.w	r3, #32
 800cde6:	d014      	beq.n	800ce12 <USART1_IRQHandler+0x36>
        uint32_t data = UART0->DR;
 800cde8:	4b1a      	ldr	r3, [pc, #104]	@ (800ce54 <USART1_IRQHandler+0x78>)
 800cdea:	685c      	ldr	r4, [r3, #4]
        if(!enqueue_realtime_command((char)data)) {             // Check and strip realtime commands...
 800cdec:	b2e4      	uxtb	r4, r4
 800cdee:	4b1a      	ldr	r3, [pc, #104]	@ (800ce58 <USART1_IRQHandler+0x7c>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	4798      	blx	r3
 800cdf6:	b960      	cbnz	r0, 800ce12 <USART1_IRQHandler+0x36>
            uint16_t next_head = BUFNEXT(rxbuf.head, rxbuf);    // Get and increment buffer pointer
 800cdf8:	4a18      	ldr	r2, [pc, #96]	@ (800ce5c <USART1_IRQHandler+0x80>)
 800cdfa:	6813      	ldr	r3, [r2, #0]
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if(next_head == rxbuf.tail)                         // If buffer full
 800ce02:	6852      	ldr	r2, [r2, #4]
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d01c      	beq.n	800ce42 <USART1_IRQHandler+0x66>
                rxbuf.data[rxbuf.head] = (char)data;            // if not add data to buffer
 800ce08:	4a14      	ldr	r2, [pc, #80]	@ (800ce5c <USART1_IRQHandler+0x80>)
 800ce0a:	6811      	ldr	r1, [r2, #0]
 800ce0c:	4411      	add	r1, r2
 800ce0e:	72cc      	strb	r4, [r1, #11]
                rxbuf.head = next_head;                         // and update pointer
 800ce10:	6013      	str	r3, [r2, #0]
    if((UART0->SR & USART_SR_TXE) && (UART0->CR1 & USART_CR1_TXEIE)) {
 800ce12:	4b10      	ldr	r3, [pc, #64]	@ (800ce54 <USART1_IRQHandler+0x78>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ce1a:	d011      	beq.n	800ce40 <USART1_IRQHandler+0x64>
 800ce1c:	4b0d      	ldr	r3, [pc, #52]	@ (800ce54 <USART1_IRQHandler+0x78>)
 800ce1e:	68db      	ldr	r3, [r3, #12]
 800ce20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ce24:	d00c      	beq.n	800ce40 <USART1_IRQHandler+0x64>
        uint_fast16_t tail = txbuf.tail;            // Get buffer pointer
 800ce26:	4a0e      	ldr	r2, [pc, #56]	@ (800ce60 <USART1_IRQHandler+0x84>)
 800ce28:	6853      	ldr	r3, [r2, #4]
        UART0->DR = txbuf.data[tail];               // Send next character
 800ce2a:	18d1      	adds	r1, r2, r3
 800ce2c:	7a08      	ldrb	r0, [r1, #8]
 800ce2e:	4909      	ldr	r1, [pc, #36]	@ (800ce54 <USART1_IRQHandler+0x78>)
 800ce30:	6048      	str	r0, [r1, #4]
        txbuf.tail = tail = BUFNEXT(tail, txbuf);   // and increment pointer
 800ce32:	3301      	adds	r3, #1
 800ce34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce38:	6053      	str	r3, [r2, #4]
        if(tail == txbuf.head)                      // If buffer empty then
 800ce3a:	6812      	ldr	r2, [r2, #0]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d004      	beq.n	800ce4a <USART1_IRQHandler+0x6e>
}
 800ce40:	bd10      	pop	{r4, pc}
                rxbuf.overflow = 1;                             // flag overflow
 800ce42:	4b06      	ldr	r3, [pc, #24]	@ (800ce5c <USART1_IRQHandler+0x80>)
 800ce44:	2201      	movs	r2, #1
 800ce46:	725a      	strb	r2, [r3, #9]
 800ce48:	e7e3      	b.n	800ce12 <USART1_IRQHandler+0x36>
            UART0->CR1 &= ~USART_CR1_TXEIE;         // disable UART TX interrupt
 800ce4a:	68cb      	ldr	r3, [r1, #12]
 800ce4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce50:	60cb      	str	r3, [r1, #12]
}
 800ce52:	e7f5      	b.n	800ce40 <USART1_IRQHandler+0x64>
 800ce54:	40011000 	.word	0x40011000
 800ce58:	200001a0 	.word	0x200001a0
 800ce5c:	200010d8 	.word	0x200010d8
 800ce60:	20000ed0 	.word	0x20000ed0

0800ce64 <USART2_IRQHandler>:

void UART1_IRQHandler (void)
{
 800ce64:	b510      	push	{r4, lr}
    if(UART1->SR & USART_SR_RXNE) {
 800ce66:	4b1d      	ldr	r3, [pc, #116]	@ (800cedc <USART2_IRQHandler+0x78>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f013 0f20 	tst.w	r3, #32
 800ce6e:	d014      	beq.n	800ce9a <USART2_IRQHandler+0x36>
        uint32_t data = UART1->DR;
 800ce70:	4b1a      	ldr	r3, [pc, #104]	@ (800cedc <USART2_IRQHandler+0x78>)
 800ce72:	685c      	ldr	r4, [r3, #4]
        if(!enqueue_realtime_command1((char)data)) {            // Check and strip realtime commands...
 800ce74:	b2e4      	uxtb	r4, r4
 800ce76:	4b1a      	ldr	r3, [pc, #104]	@ (800cee0 <USART2_IRQHandler+0x7c>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	4798      	blx	r3
 800ce7e:	b960      	cbnz	r0, 800ce9a <USART2_IRQHandler+0x36>
            uint16_t next_head = BUFNEXT(rxbuf1.head, rxbuf1);  // Get and increment buffer pointer
 800ce80:	4a18      	ldr	r2, [pc, #96]	@ (800cee4 <USART2_IRQHandler+0x80>)
 800ce82:	6813      	ldr	r3, [r2, #0]
 800ce84:	3301      	adds	r3, #1
 800ce86:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if(next_head == rxbuf1.tail)                        // If buffer full
 800ce8a:	6852      	ldr	r2, [r2, #4]
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d01c      	beq.n	800ceca <USART2_IRQHandler+0x66>
                rxbuf1.overflow = 1;                            // flag overflow
            else {
                rxbuf1.data[rxbuf1.head] = (char)data;          // if not add data to buffer
 800ce90:	4a14      	ldr	r2, [pc, #80]	@ (800cee4 <USART2_IRQHandler+0x80>)
 800ce92:	6811      	ldr	r1, [r2, #0]
 800ce94:	4411      	add	r1, r2
 800ce96:	72cc      	strb	r4, [r1, #11]
                rxbuf1.head = next_head;                        // and update pointer
 800ce98:	6013      	str	r3, [r2, #0]
            }
        }
    }

    if((UART1->SR & USART_SR_TXE) && (UART1->CR1 & USART_CR1_TXEIE)) {
 800ce9a:	4b10      	ldr	r3, [pc, #64]	@ (800cedc <USART2_IRQHandler+0x78>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cea2:	d011      	beq.n	800cec8 <USART2_IRQHandler+0x64>
 800cea4:	4b0d      	ldr	r3, [pc, #52]	@ (800cedc <USART2_IRQHandler+0x78>)
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ceac:	d00c      	beq.n	800cec8 <USART2_IRQHandler+0x64>
        uint_fast16_t tail = txbuf1.tail;           // Get buffer pointer
 800ceae:	4a0e      	ldr	r2, [pc, #56]	@ (800cee8 <USART2_IRQHandler+0x84>)
 800ceb0:	6853      	ldr	r3, [r2, #4]
        UART1->DR = txbuf1.data[tail];              // Send next character
 800ceb2:	18d1      	adds	r1, r2, r3
 800ceb4:	7a08      	ldrb	r0, [r1, #8]
 800ceb6:	4909      	ldr	r1, [pc, #36]	@ (800cedc <USART2_IRQHandler+0x78>)
 800ceb8:	6048      	str	r0, [r1, #4]
        txbuf1.tail = tail = BUFNEXT(tail, txbuf1); // and increment pointer
 800ceba:	3301      	adds	r3, #1
 800cebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cec0:	6053      	str	r3, [r2, #4]
        if(tail == txbuf1.head)                     // If buffer empty then
 800cec2:	6812      	ldr	r2, [r2, #0]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d004      	beq.n	800ced2 <USART2_IRQHandler+0x6e>
            UART1->CR1 &= ~USART_CR1_TXEIE;         // disable UART TX interrupt
   }
}
 800cec8:	bd10      	pop	{r4, pc}
                rxbuf1.overflow = 1;                            // flag overflow
 800ceca:	4b06      	ldr	r3, [pc, #24]	@ (800cee4 <USART2_IRQHandler+0x80>)
 800cecc:	2201      	movs	r2, #1
 800cece:	725a      	strb	r2, [r3, #9]
 800ced0:	e7e3      	b.n	800ce9a <USART2_IRQHandler+0x36>
            UART1->CR1 &= ~USART_CR1_TXEIE;         // disable UART TX interrupt
 800ced2:	68cb      	ldr	r3, [r1, #12]
 800ced4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ced8:	60cb      	str	r3, [r1, #12]
}
 800ceda:	e7f5      	b.n	800cec8 <USART2_IRQHandler+0x64>
 800cedc:	40004400 	.word	0x40004400
 800cee0:	2000019c 	.word	0x2000019c
 800cee4:	20000ac4 	.word	0x20000ac4
 800cee8:	200008bc 	.word	0x200008bc

0800ceec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ceec:	b500      	push	{lr}
 800ceee:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cef0:	2100      	movs	r1, #0
 800cef2:	9100      	str	r1, [sp, #0]
 800cef4:	4b0c      	ldr	r3, [pc, #48]	@ (800cf28 <HAL_MspInit+0x3c>)
 800cef6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cef8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cefc:	645a      	str	r2, [r3, #68]	@ 0x44
 800cefe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf00:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800cf04:	9200      	str	r2, [sp, #0]
 800cf06:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800cf08:	9101      	str	r1, [sp, #4]
 800cf0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cf0c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800cf10:	641a      	str	r2, [r3, #64]	@ 0x40
 800cf12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf18:	9301      	str	r3, [sp, #4]
 800cf1a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800cf1c:	2005      	movs	r0, #5
 800cf1e:	f7fc f86d 	bl	8008ffc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cf22:	b003      	add	sp, #12
 800cf24:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf28:	40023800 	.word	0x40023800

0800cf2c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800cf2c:	4770      	bx	lr

0800cf2e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cf2e:	e7fe      	b.n	800cf2e <HardFault_Handler>

0800cf30 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cf30:	e7fe      	b.n	800cf30 <MemManage_Handler>

0800cf32 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800cf32:	e7fe      	b.n	800cf32 <BusFault_Handler>

0800cf34 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800cf34:	e7fe      	b.n	800cf34 <UsageFault_Handler>

0800cf36 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800cf36:	4770      	bx	lr

0800cf38 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cf38:	4770      	bx	lr

0800cf3a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800cf3a:	4770      	bx	lr

0800cf3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800cf3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  cycle_count = DWT->CYCCNT;
 800cf3e:	4b04      	ldr	r3, [pc, #16]	@ (800cf50 <SysTick_Handler+0x14>)
 800cf40:	685a      	ldr	r2, [r3, #4]
 800cf42:	4b04      	ldr	r3, [pc, #16]	@ (800cf54 <SysTick_Handler+0x18>)
 800cf44:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cf46:	f7fb ffed 	bl	8008f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Driver_IncTick();
 800cf4a:	f7fe fc51 	bl	800b7f0 <Driver_IncTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 800cf4e:	bd08      	pop	{r3, pc}
 800cf50:	e0001000 	.word	0xe0001000
 800cf54:	200014e4 	.word	0x200014e4

0800cf58 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800cf58:	2001      	movs	r0, #1
 800cf5a:	4770      	bx	lr

0800cf5c <_kill>:

int _kill(int pid, int sig)
{
 800cf5c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800cf5e:	f018 f90d 	bl	802517c <__errno>
 800cf62:	2316      	movs	r3, #22
 800cf64:	6003      	str	r3, [r0, #0]
	return -1;
}
 800cf66:	f04f 30ff 	mov.w	r0, #4294967295
 800cf6a:	bd08      	pop	{r3, pc}

0800cf6c <_exit>:

void _exit (int status)
{
 800cf6c:	b508      	push	{r3, lr}
	_kill(status, -1);
 800cf6e:	f04f 31ff 	mov.w	r1, #4294967295
 800cf72:	f7ff fff3 	bl	800cf5c <_kill>
	while (1) {}		/* Make sure we hang here */
 800cf76:	e7fe      	b.n	800cf76 <_exit+0xa>

0800cf78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cf78:	b570      	push	{r4, r5, r6, lr}
 800cf7a:	460c      	mov	r4, r1
 800cf7c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf7e:	2500      	movs	r5, #0
 800cf80:	e006      	b.n	800cf90 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800cf82:	f3af 8000 	nop.w
 800cf86:	4621      	mov	r1, r4
 800cf88:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf8c:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800cf8e:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf90:	42b5      	cmp	r5, r6
 800cf92:	dbf6      	blt.n	800cf82 <_read+0xa>
	}

return len;
}
 800cf94:	4630      	mov	r0, r6
 800cf96:	bd70      	pop	{r4, r5, r6, pc}

0800cf98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800cf98:	b570      	push	{r4, r5, r6, lr}
 800cf9a:	460c      	mov	r4, r1
 800cf9c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf9e:	2500      	movs	r5, #0
 800cfa0:	e004      	b.n	800cfac <_write+0x14>
	{
		__io_putchar(*ptr++);
 800cfa2:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cfa6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cfaa:	3501      	adds	r5, #1
 800cfac:	42b5      	cmp	r5, r6
 800cfae:	dbf8      	blt.n	800cfa2 <_write+0xa>
	}
	return len;
}
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	bd70      	pop	{r4, r5, r6, pc}

0800cfb4 <_close>:

int _close(int file)
{
	return -1;
}
 800cfb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb8:	4770      	bx	lr

0800cfba <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800cfba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cfbe:	604b      	str	r3, [r1, #4]
	return 0;
}
 800cfc0:	2000      	movs	r0, #0
 800cfc2:	4770      	bx	lr

0800cfc4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800cfc4:	2001      	movs	r0, #1
 800cfc6:	4770      	bx	lr

0800cfc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800cfc8:	2000      	movs	r0, #0
 800cfca:	4770      	bx	lr

0800cfcc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void *_sbrk(int incr)
{
 800cfcc:	b508      	push	{r3, lr}
 800cfce:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800cfd0:	4a0b      	ldr	r2, [pc, #44]	@ (800d000 <_sbrk+0x34>)
 800cfd2:	6812      	ldr	r2, [r2, #0]
 800cfd4:	b142      	cbz	r2, 800cfe8 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800cfd6:	4a0a      	ldr	r2, [pc, #40]	@ (800d000 <_sbrk+0x34>)
 800cfd8:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800cfda:	4403      	add	r3, r0
 800cfdc:	466a      	mov	r2, sp
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d806      	bhi.n	800cff0 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (void *)-1;
	}

	heap_end += incr;
 800cfe2:	4a07      	ldr	r2, [pc, #28]	@ (800d000 <_sbrk+0x34>)
 800cfe4:	6013      	str	r3, [r2, #0]

	return (void *)prev_heap_end;
}
 800cfe6:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800cfe8:	4a05      	ldr	r2, [pc, #20]	@ (800d000 <_sbrk+0x34>)
 800cfea:	4906      	ldr	r1, [pc, #24]	@ (800d004 <_sbrk+0x38>)
 800cfec:	6011      	str	r1, [r2, #0]
 800cfee:	e7f2      	b.n	800cfd6 <_sbrk+0xa>
		errno = ENOMEM;
 800cff0:	f018 f8c4 	bl	802517c <__errno>
 800cff4:	230c      	movs	r3, #12
 800cff6:	6003      	str	r3, [r0, #0]
		return (void *)-1;
 800cff8:	f04f 30ff 	mov.w	r0, #4294967295
 800cffc:	e7f3      	b.n	800cfe6 <_sbrk+0x1a>
 800cffe:	bf00      	nop
 800d000:	200014e8 	.word	0x200014e8
 800d004:	20003090 	.word	0x20003090

0800d008 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d008:	b508      	push	{r3, lr}
    extern uint8_t _estack; /* Symbol defined in the linker script */

    uint32_t *addr;

    addr = (uint32_t *)(((uint32_t)&_estack - 1) & 0xFFFFFFE0);
 800d00a:	4b20      	ldr	r3, [pc, #128]	@ (800d08c <SystemInit+0x84>)
 800d00c:	f023 031f 	bic.w	r3, r3, #31

    if(*addr == 0xDEADBEEF) {
 800d010:	6819      	ldr	r1, [r3, #0]
 800d012:	4a1f      	ldr	r2, [pc, #124]	@ (800d090 <SystemInit+0x88>)
 800d014:	4291      	cmp	r1, r2
 800d016:	d00a      	beq.n	800d02e <SystemInit+0x26>
        while(1) {};
    }

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d018:	4b1e      	ldr	r3, [pc, #120]	@ (800d094 <SystemInit+0x8c>)
 800d01a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d01e:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800d022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d026:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800d02a:	609a      	str	r2, [r3, #8]
#endif
}
 800d02c:	bd08      	pop	{r3, pc}
        *addr = 0xCAFEFEED; // Reset our trigger
 800d02e:	4a1a      	ldr	r2, [pc, #104]	@ (800d098 <SystemInit+0x90>)
 800d030:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800d032:	b672      	cpsid	i
        HAL_RCC_DeInit();
 800d034:	f7fc fe3e 	bl	8009cb4 <HAL_RCC_DeInit>
        HAL_DeInit();
 800d038:	f7fb ff1e 	bl	8008e78 <HAL_DeInit>
        for(i = 0; i < 5; i++) {
 800d03c:	2300      	movs	r3, #0
 800d03e:	e00b      	b.n	800d058 <SystemInit+0x50>
            NVIC->ICER[i] = 0xFFFFFFFF;
 800d040:	4a16      	ldr	r2, [pc, #88]	@ (800d09c <SystemInit+0x94>)
 800d042:	f103 0020 	add.w	r0, r3, #32
 800d046:	f04f 31ff 	mov.w	r1, #4294967295
 800d04a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
            NVIC->ICPR[i] = 0xFFFFFFFF;
 800d04e:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 800d052:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
        for(i = 0; i < 5; i++) {
 800d056:	3301      	adds	r3, #1
 800d058:	2b04      	cmp	r3, #4
 800d05a:	d9f1      	bls.n	800d040 <SystemInit+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
 800d05c:	b662      	cpsie	i
        SysTick->CTRL = SysTick->LOAD = SysTick->VAL = 0;
 800d05e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d062:	2200      	movs	r2, #0
 800d064:	619a      	str	r2, [r3, #24]
 800d066:	615a      	str	r2, [r3, #20]
 800d068:	611a      	str	r2, [r3, #16]
        __HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 800d06a:	4b0d      	ldr	r3, [pc, #52]	@ (800d0a0 <SystemInit+0x98>)
 800d06c:	681a      	ldr	r2, [r3, #0]
 800d06e:	f022 0203 	bic.w	r2, r2, #3
 800d072:	601a      	str	r2, [r3, #0]
 800d074:	681a      	ldr	r2, [r3, #0]
 800d076:	f042 0201 	orr.w	r2, r2, #1
 800d07a:	601a      	str	r2, [r3, #0]
        __set_MSP(*(uint32_t *)0x1FFF0000);
 800d07c:	4b09      	ldr	r3, [pc, #36]	@ (800d0a4 <SystemInit+0x9c>)
 800d07e:	681a      	ldr	r2, [r3, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800d080:	f382 8808 	msr	MSP, r2
        SysMemBootJump = (void(*)(void))(*((uint32_t *)0x1FFF0004));
 800d084:	685b      	ldr	r3, [r3, #4]
        SysMemBootJump();
 800d086:	4798      	blx	r3
        while(1) {};
 800d088:	e7fe      	b.n	800d088 <SystemInit+0x80>
 800d08a:	bf00      	nop
 800d08c:	2000ffff 	.word	0x2000ffff
 800d090:	deadbeef 	.word	0xdeadbeef
 800d094:	e000ed00 	.word	0xe000ed00
 800d098:	cafefeed 	.word	0xcafefeed
 800d09c:	e000e100 	.word	0xe000e100
 800d0a0:	40013800 	.word	0x40013800
 800d0a4:	1fff0000 	.word	0x1fff0000

0800d0a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800d0a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800d0e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d0ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d0ae:	e003      	b.n	800d0b8 <LoopCopyDataInit>

0800d0b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d0b0:	4b0c      	ldr	r3, [pc, #48]	@ (800d0e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d0b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d0b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d0b6:	3104      	adds	r1, #4

0800d0b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d0b8:	480b      	ldr	r0, [pc, #44]	@ (800d0e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d0ba:	4b0c      	ldr	r3, [pc, #48]	@ (800d0ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d0bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d0be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d0c0:	d3f6      	bcc.n	800d0b0 <CopyDataInit>
  ldr  r2, =_sbss
 800d0c2:	4a0b      	ldr	r2, [pc, #44]	@ (800d0f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d0c4:	e002      	b.n	800d0cc <LoopFillZerobss>

0800d0c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d0c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d0c8:	f842 3b04 	str.w	r3, [r2], #4

0800d0cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d0cc:	4b09      	ldr	r3, [pc, #36]	@ (800d0f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d0ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d0d0:	d3f9      	bcc.n	800d0c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d0d2:	f7ff ff99 	bl	800d008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d0d6:	f018 f857 	bl	8025188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d0da:	f7ff f97d 	bl	800c3d8 <main>
  bx  lr    
 800d0de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d0e0:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800d0e4:	08032080 	.word	0x08032080
  ldr  r0, =_sdata
 800d0e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d0ec:	2000067c 	.word	0x2000067c
  ldr  r2, =_sbss
 800d0f0:	2000067c 	.word	0x2000067c
  ldr  r3, = _ebss
 800d0f4:	2000308c 	.word	0x2000308c

0800d0f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d0f8:	e7fe      	b.n	800d0f8 <ADC_IRQHandler>
	...

0800d0fc <alarms_get_details>:
}

alarm_details_t *alarms_get_details (void)
{
    return &details;
}
 800d0fc:	4800      	ldr	r0, [pc, #0]	@ (800d100 <alarms_get_details+0x4>)
 800d0fe:	4770      	bx	lr
 800d100:	200001a8 	.word	0x200001a8

0800d104 <canbus_enabled>:
// Public API

bool canbus_enabled (void)
{
    return isEnabled;
}
 800d104:	4b01      	ldr	r3, [pc, #4]	@ (800d10c <canbus_enabled+0x8>)
 800d106:	7818      	ldrb	r0, [r3, #0]
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop
 800d10c:	200014ec 	.word	0x200014ec

0800d110 <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant,
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state (coolant_state_t mode)
{
 800d110:	b508      	push	{r3, lr}
    if (!ABORTED) { // Block during abort.
 800d112:	4b06      	ldr	r3, [pc, #24]	@ (800d12c <coolant_set_state+0x1c>)
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	b943      	cbnz	r3, 800d12a <coolant_set_state+0x1a>
 800d118:	4b04      	ldr	r3, [pc, #16]	@ (800d12c <coolant_set_state+0x1c>)
 800d11a:	785b      	ldrb	r3, [r3, #1]
 800d11c:	b92b      	cbnz	r3, 800d12a <coolant_set_state+0x1a>
        hal.coolant.set_state(mode);
 800d11e:	4b04      	ldr	r3, [pc, #16]	@ (800d130 <coolant_set_state+0x20>)
 800d120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d122:	4798      	blx	r3
        system_add_rt_report(Report_Coolant); // Set to report change immediately
 800d124:	2020      	movs	r0, #32
 800d126:	f014 ffcb 	bl	80220c0 <system_add_rt_report>
    }
}
 800d12a:	bd08      	pop	{r3, pc}
 800d12c:	20001bbc 	.word	0x20001bbc
 800d130:	200018dc 	.word	0x200018dc

0800d134 <coolant_sync>:

// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails
// if an abort or check-mode is active.
bool coolant_sync (coolant_state_t mode)
{
 800d134:	b538      	push	{r3, r4, r5, lr}
 800d136:	4604      	mov	r4, r0
    bool ok = true;
    if (state_get() != STATE_CHECK_MODE) {
 800d138:	f011 ffe6 	bl	801f108 <state_get>
 800d13c:	2802      	cmp	r0, #2
 800d13e:	d102      	bne.n	800d146 <coolant_sync+0x12>
    bool ok = true;
 800d140:	2501      	movs	r5, #1
        if((ok = protocol_buffer_synchronize())) // Ensure coolant changes state when specified in program.
            coolant_set_state(mode);
    }

    return ok;
}
 800d142:	4628      	mov	r0, r5
 800d144:	bd38      	pop	{r3, r4, r5, pc}
        if((ok = protocol_buffer_synchronize())) // Ensure coolant changes state when specified in program.
 800d146:	f00a ff45 	bl	8017fd4 <protocol_buffer_synchronize>
 800d14a:	4605      	mov	r5, r0
 800d14c:	2800      	cmp	r0, #0
 800d14e:	d0f8      	beq.n	800d142 <coolant_sync+0xe>
            coolant_set_state(mode);
 800d150:	4620      	mov	r0, r4
 800d152:	f7ff ffdd 	bl	800d110 <coolant_set_state>
 800d156:	e7f4      	b.n	800d142 <coolant_sync+0xe>

0800d158 <xbar_fn_to_axismask>:
#include "hal.h"

static limit_signals_t home_source = {0};

axes_signals_t xbar_fn_to_axismask (pin_function_t fn)
{
 800d158:	4603      	mov	r3, r0
    axes_signals_t mask = {0};
 800d15a:	f04f 0000 	mov.w	r0, #0

    switch(fn) {
 800d15e:	2b18      	cmp	r3, #24
 800d160:	d809      	bhi.n	800d176 <xbar_fn_to_axismask+0x1e>
 800d162:	2b15      	cmp	r3, #21
 800d164:	d20f      	bcs.n	800d186 <xbar_fn_to_axismask+0x2e>
 800d166:	3b10      	subs	r3, #16
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	2b03      	cmp	r3, #3
 800d16c:	d802      	bhi.n	800d174 <xbar_fn_to_axismask+0x1c>

        case Input_LimitX:
        case Input_LimitX_Max:
        case Input_LimitX_2:
        case Input_HomeX:
            mask.x = On;
 800d16e:	f04f 0001 	mov.w	r0, #1
            break;
 800d172:	4770      	bx	lr
 800d174:	4770      	bx	lr
    switch(fn) {
 800d176:	3b1a      	subs	r3, #26
 800d178:	b2db      	uxtb	r3, r3
 800d17a:	2b03      	cmp	r3, #3
 800d17c:	d802      	bhi.n	800d184 <xbar_fn_to_axismask+0x2c>

        case Input_LimitZ:
        case Input_LimitZ_Max:
        case Input_LimitZ_2:
        case Input_HomeZ:
            mask.z = On;
 800d17e:	f04f 0004 	mov.w	r0, #4
        default:
            break;
    }

    return mask;
}
 800d182:	4770      	bx	lr
 800d184:	4770      	bx	lr
            mask.y = On;
 800d186:	f04f 0002 	mov.w	r0, #2
            break;
 800d18a:	4770      	bx	lr

0800d18c <xbar_set_homing_source>:

// Sets limit signals used by homing when home signals are not available.
// For internal use, called by settings.c when homing direction mask is changed.
void xbar_set_homing_source (void)
{
    if(hal.home_cap.a.mask == 0) {
 800d18c:	4b0f      	ldr	r3, [pc, #60]	@ (800d1cc <xbar_set_homing_source+0x40>)
 800d18e:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 800d192:	b9d3      	cbnz	r3, 800d1ca <xbar_set_homing_source+0x3e>
        home_source.max.mask = hal.limits_cap.max.mask & ((~settings.homing.dir_mask.mask) & AXES_BITMASK);
 800d194:	480d      	ldr	r0, [pc, #52]	@ (800d1cc <xbar_set_homing_source+0x40>)
 800d196:	f890 31df 	ldrb.w	r3, [r0, #479]	@ 0x1df
 800d19a:	4a0d      	ldr	r2, [pc, #52]	@ (800d1d0 <xbar_set_homing_source+0x44>)
 800d19c:	f892 1110 	ldrb.w	r1, [r2, #272]	@ 0x110
 800d1a0:	ea23 0301 	bic.w	r3, r3, r1
 800d1a4:	f003 0307 	and.w	r3, r3, #7
 800d1a8:	4a0a      	ldr	r2, [pc, #40]	@ (800d1d4 <xbar_set_homing_source+0x48>)
 800d1aa:	7053      	strb	r3, [r2, #1]
        home_source.min.mask = (~home_source.max.mask) & AXES_BITMASK;
 800d1ac:	43db      	mvns	r3, r3
 800d1ae:	f003 0307 	and.w	r3, r3, #7
 800d1b2:	7013      	strb	r3, [r2, #0]
        home_source.max2.mask = hal.limits_cap.max2.mask & ((~settings.homing.dir_mask.mask) & AXES_BITMASK);
 800d1b4:	f890 31e1 	ldrb.w	r3, [r0, #481]	@ 0x1e1
 800d1b8:	ea23 0301 	bic.w	r3, r3, r1
 800d1bc:	f003 0307 	and.w	r3, r3, #7
 800d1c0:	70d3      	strb	r3, [r2, #3]
        home_source.min2.mask = (~home_source.max2.mask) & AXES_BITMASK;
 800d1c2:	43db      	mvns	r3, r3
 800d1c4:	f003 0307 	and.w	r3, r3, #7
 800d1c8:	7093      	strb	r3, [r2, #2]
    }
}
 800d1ca:	4770      	bx	lr
 800d1cc:	200018dc 	.word	0x200018dc
 800d1d0:	200022f4 	.word	0x200022f4
 800d1d4:	200014f0 	.word	0x200014f0

0800d1d8 <xbar_get_homing_source>:

// Returns limit signals used by homing when home signals are not available.
limit_signals_t xbar_get_homing_source (void)
{
 800d1d8:	b082      	sub	sp, #8
    return home_source;
 800d1da:	4b0b      	ldr	r3, [pc, #44]	@ (800d208 <xbar_get_homing_source+0x30>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	9301      	str	r3, [sp, #4]
 800d1e0:	2000      	movs	r0, #0
 800d1e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d1e6:	f363 0007 	bfi	r0, r3, #0, #8
 800d1ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d1ee:	f363 200f 	bfi	r0, r3, #8, #8
 800d1f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d1f6:	f363 4017 	bfi	r0, r3, #16, #8
 800d1fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d1fe:	f363 601f 	bfi	r0, r3, #24, #8
}
 800d202:	b002      	add	sp, #8
 800d204:	4770      	bx	lr
 800d206:	bf00      	nop
 800d208:	200014f0 	.word	0x200014f0

0800d20c <xbar_get_homing_source_from_cycle>:

// Returns limit signals used by homing cycle when home signals are not available.
limit_signals_t xbar_get_homing_source_from_cycle (axes_signals_t homing_cycle)
{
 800d20c:	b082      	sub	sp, #8
    limit_signals_t source = home_source;
 800d20e:	4b1e      	ldr	r3, [pc, #120]	@ (800d288 <xbar_get_homing_source_from_cycle+0x7c>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	9300      	str	r3, [sp, #0]

    if(hal.home_cap.a.mask == 0) {
 800d214:	4b1d      	ldr	r3, [pc, #116]	@ (800d28c <xbar_get_homing_source_from_cycle+0x80>)
 800d216:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 800d21a:	b9fb      	cbnz	r3, 800d25c <xbar_get_homing_source_from_cycle+0x50>
        source.min.mask &= homing_cycle.mask;
 800d21c:	f89d 3000 	ldrb.w	r3, [sp]
 800d220:	b2c2      	uxtb	r2, r0
 800d222:	ea03 0100 	and.w	r1, r3, r0
 800d226:	f88d 1000 	strb.w	r1, [sp]
        source.min2.mask &= homing_cycle.mask;
 800d22a:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800d22e:	ea01 0c00 	and.w	ip, r1, r0
 800d232:	f88d c002 	strb.w	ip, [sp, #2]
        source.min.mask |= source.min2.mask;
 800d236:	430b      	orrs	r3, r1
 800d238:	4003      	ands	r3, r0
 800d23a:	f88d 3000 	strb.w	r3, [sp]
        source.max.mask &= homing_cycle.mask;
 800d23e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d242:	ea03 0100 	and.w	r1, r3, r0
 800d246:	f88d 1001 	strb.w	r1, [sp, #1]
        source.max2.mask &= homing_cycle.mask;
 800d24a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800d24e:	4008      	ands	r0, r1
 800d250:	f88d 0003 	strb.w	r0, [sp, #3]
        source.max.mask |= source.max2.mask;
 800d254:	430b      	orrs	r3, r1
 800d256:	4013      	ands	r3, r2
 800d258:	f88d 3001 	strb.w	r3, [sp, #1]
    }

    return source;
 800d25c:	9b00      	ldr	r3, [sp, #0]
 800d25e:	9301      	str	r3, [sp, #4]
 800d260:	2000      	movs	r0, #0
 800d262:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d266:	f363 0007 	bfi	r0, r3, #0, #8
 800d26a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d26e:	f363 200f 	bfi	r0, r3, #8, #8
 800d272:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d276:	f363 4017 	bfi	r0, r3, #16, #8
 800d27a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d27e:	f363 601f 	bfi	r0, r3, #24, #8
}
 800d282:	b002      	add	sp, #8
 800d284:	4770      	bx	lr
 800d286:	bf00      	nop
 800d288:	200014f0 	.word	0x200014f0
 800d28c:	200018dc 	.word	0x200018dc

0800d290 <xbar_fn_to_pinname>:

const char *xbar_fn_to_pinname (pin_function_t fn)
{
 800d290:	4601      	mov	r1, r0
    const char *name = NULL;
    uint_fast8_t idx = sizeof(pin_names) / sizeof(pin_name_t);
 800d292:	238d      	movs	r3, #141	@ 0x8d
    const char *name = NULL;
 800d294:	2000      	movs	r0, #0
 800d296:	e001      	b.n	800d29c <xbar_fn_to_pinname+0xc>

    do {
        if(pin_names[--idx].function == fn)
            name = pin_names[idx].name;
    } while(idx && !name);
 800d298:	b15b      	cbz	r3, 800d2b2 <xbar_fn_to_pinname+0x22>
 800d29a:	b950      	cbnz	r0, 800d2b2 <xbar_fn_to_pinname+0x22>
        if(pin_names[--idx].function == fn)
 800d29c:	3b01      	subs	r3, #1
 800d29e:	4a07      	ldr	r2, [pc, #28]	@ (800d2bc <xbar_fn_to_pinname+0x2c>)
 800d2a0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800d2a4:	428a      	cmp	r2, r1
 800d2a6:	d1f7      	bne.n	800d298 <xbar_fn_to_pinname+0x8>
            name = pin_names[idx].name;
 800d2a8:	4a04      	ldr	r2, [pc, #16]	@ (800d2bc <xbar_fn_to_pinname+0x2c>)
 800d2aa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d2ae:	6850      	ldr	r0, [r2, #4]
 800d2b0:	e7f2      	b.n	800d298 <xbar_fn_to_pinname+0x8>

    return name ? name : "N/A";
 800d2b2:	b100      	cbz	r0, 800d2b6 <xbar_fn_to_pinname+0x26>
}
 800d2b4:	4770      	bx	lr
    return name ? name : "N/A";
 800d2b6:	4802      	ldr	r0, [pc, #8]	@ (800d2c0 <xbar_fn_to_pinname+0x30>)
 800d2b8:	e7fc      	b.n	800d2b4 <xbar_fn_to_pinname+0x24>
 800d2ba:	bf00      	nop
 800d2bc:	0802a46c 	.word	0x0802a46c
 800d2c0:	08029db8 	.word	0x08029db8

0800d2c4 <xbar_fn_to_signals_mask>:

control_signals_t xbar_fn_to_signals_mask (pin_function_t fn)
{
    control_signals_t signals;

    signals.mask = fn >= Input_Probe ? 0 : 1 << (uint32_t)fn;
 800d2c4:	280d      	cmp	r0, #13
 800d2c6:	d804      	bhi.n	800d2d2 <xbar_fn_to_signals_mask+0xe>
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	fa03 f000 	lsl.w	r0, r3, r0
 800d2ce:	b280      	uxth	r0, r0
 800d2d0:	4770      	bx	lr
 800d2d2:	2000      	movs	r0, #0

    return signals;
}
 800d2d4:	4770      	bx	lr
	...

0800d2d8 <errors_get_details>:
}

error_details_t *errors_get_details (void)
{
    return &details;
}
 800d2d8:	4800      	ldr	r0, [pc, #0]	@ (800d2dc <errors_get_details+0x4>)
 800d2da:	4770      	bx	lr
 800d2dc:	200001b4 	.word	0x200001b4

0800d2e0 <init_sync_motion>:

    return add_cmd != NULL;
}

static status_code_t init_sync_motion (plan_line_data_t *pl_data, float pitch)
{
 800d2e0:	b508      	push	{r3, lr}
 800d2e2:	ed2d 8b02 	vpush	{d8}
    if(pl_data->spindle.hal->get_data == NULL)
 800d2e6:	6903      	ldr	r3, [r0, #16]
 800d2e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d049      	beq.n	800d382 <init_sync_motion+0xa2>
        FAIL(Status_GcodeUnsupportedCommand); // [Spindle not sync capable]

    pl_data->condition.inverse_time = Off;
 800d2ee:	7d03      	ldrb	r3, [r0, #20]
 800d2f0:	f36f 1345 	bfc	r3, #5, #1
 800d2f4:	7503      	strb	r3, [r0, #20]
    pl_data->feed_rate = gc_state.distance_per_rev = pitch;
 800d2f6:	4b26      	ldr	r3, [pc, #152]	@ (800d390 <init_sync_motion+0xb0>)
 800d2f8:	ed83 0a19 	vstr	s0, [r3, #100]	@ 0x64
 800d2fc:	ed80 0a00 	vstr	s0, [r0]
    pl_data->spindle.css = NULL;                    // Switch off CSS.
 800d300:	2300      	movs	r3, #0
 800d302:	60c3      	str	r3, [r0, #12]
    pl_data->overrides = sys.override.control;      // Use current override flags and
 800d304:	4b23      	ldr	r3, [pc, #140]	@ (800d394 <init_sync_motion+0xb4>)
 800d306:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800d30a:	7602      	strb	r2, [r0, #24]
    pl_data->overrides.sync = On;                   // set to sync overrides on execution of motion.
 800d30c:	b2d2      	uxtb	r2, r2
 800d30e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d312:	7602      	strb	r2, [r0, #24]

    // Disable feed rate and spindle overrides for the duration of the cycle.
    pl_data->overrides.spindle_rpm_disable = sys.override.control.spindle_rpm_disable = On;
 800d314:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800d318:	f042 0204 	orr.w	r2, r2, #4
 800d31c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 800d320:	7e02      	ldrb	r2, [r0, #24]
 800d322:	f042 0204 	orr.w	r2, r2, #4
 800d326:	7602      	strb	r2, [r0, #24]
    pl_data->overrides.feed_rate_disable = sys.override.control.feed_rate_disable = On;
 800d328:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800d32c:	f042 0201 	orr.w	r2, r2, #1
 800d330:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 800d334:	7e03      	ldrb	r3, [r0, #24]
 800d336:	f043 0301 	orr.w	r3, r3, #1
 800d33a:	7603      	strb	r3, [r0, #24]
    pl_data->spindle.hal->param->override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE;
 800d33c:	6903      	ldr	r3, [r0, #16]
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	2264      	movs	r2, #100	@ 0x64
 800d342:	60da      	str	r2, [r3, #12]
    // TODO: need for gc_state.distance_per_rev to be reset on modal change?
    float feed_rate = pl_data->feed_rate * pl_data->spindle.hal->get_data(SpindleData_RPM)->rpm;
 800d344:	ed90 8a00 	vldr	s16, [r0]
 800d348:	6903      	ldr	r3, [r0, #16]
 800d34a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d34c:	2001      	movs	r0, #1
 800d34e:	4798      	blx	r3
 800d350:	edd0 7a00 	vldr	s15, [r0]
 800d354:	ee68 7a27 	vmul.f32	s15, s16, s15

    if(feed_rate == 0.0f)
 800d358:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d360:	d011      	beq.n	800d386 <init_sync_motion+0xa6>
        FAIL(Status_GcodeSpindleNotRunning); // [Spindle not running]

    if(feed_rate > settings.axis[Z_AXIS].max_rate * 0.9f)
 800d362:	4b0d      	ldr	r3, [pc, #52]	@ (800d398 <init_sync_motion+0xb8>)
 800d364:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800d368:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800d39c <init_sync_motion+0xbc>
 800d36c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d370:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d378:	d407      	bmi.n	800d38a <init_sync_motion+0xaa>
        FAIL(Status_GcodeMaxFeedRateExceeded); // [Feed rate too high]

    return Status_OK;
 800d37a:	2000      	movs	r0, #0
}
 800d37c:	ecbd 8b02 	vpop	{d8}
 800d380:	bd08      	pop	{r3, pc}
        FAIL(Status_GcodeUnsupportedCommand); // [Spindle not sync capable]
 800d382:	2014      	movs	r0, #20
 800d384:	e7fa      	b.n	800d37c <init_sync_motion+0x9c>
        FAIL(Status_GcodeSpindleNotRunning); // [Spindle not running]
 800d386:	2029      	movs	r0, #41	@ 0x29
 800d388:	e7f8      	b.n	800d37c <init_sync_motion+0x9c>
        FAIL(Status_GcodeMaxFeedRateExceeded); // [Feed rate too high]
 800d38a:	202b      	movs	r0, #43	@ 0x2b
 800d38c:	e7f6      	b.n	800d37c <init_sync_motion+0x9c>
 800d38e:	bf00      	nop
 800d390:	20001614 	.word	0x20001614
 800d394:	20001bbc 	.word	0x20001bbc
 800d398:	200022f4 	.word	0x200022f4
 800d39c:	3f666666 	.word	0x3f666666

0800d3a0 <tool_get_pending>:
{
 800d3a0:	b470      	push	{r4, r5, r6}
 800d3a2:	4604      	mov	r4, r0
    if(grbl.tool_table.n_tools)
 800d3a4:	4b0d      	ldr	r3, [pc, #52]	@ (800d3dc <tool_get_pending+0x3c>)
 800d3a6:	699b      	ldr	r3, [r3, #24]
 800d3a8:	b13b      	cbz	r3, 800d3ba <tool_get_pending+0x1a>
        return &grbl.tool_table.tool[tool_id];
 800d3aa:	4b0c      	ldr	r3, [pc, #48]	@ (800d3dc <tool_get_pending+0x3c>)
 800d3ac:	69d8      	ldr	r0, [r3, #28]
 800d3ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800d3b2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 800d3b6:	bc70      	pop	{r4, r5, r6}
 800d3b8:	4770      	bx	lr
    memcpy(&tool_data, gc_state.tool, sizeof(tool_data_t));
 800d3ba:	4b09      	ldr	r3, [pc, #36]	@ (800d3e0 <tool_get_pending+0x40>)
 800d3bc:	f8d3 60d0 	ldr.w	r6, [r3, #208]	@ 0xd0
 800d3c0:	4d08      	ldr	r5, [pc, #32]	@ (800d3e4 <tool_get_pending+0x44>)
 800d3c2:	46ac      	mov	ip, r5
 800d3c4:	6830      	ldr	r0, [r6, #0]
 800d3c6:	6871      	ldr	r1, [r6, #4]
 800d3c8:	68b2      	ldr	r2, [r6, #8]
 800d3ca:	68f3      	ldr	r3, [r6, #12]
 800d3cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d3d0:	6930      	ldr	r0, [r6, #16]
 800d3d2:	f8cc 0000 	str.w	r0, [ip]
    tool_data.tool_id = tool_id;
 800d3d6:	612c      	str	r4, [r5, #16]
    return &tool_data;
 800d3d8:	4628      	mov	r0, r5
 800d3da:	e7ec      	b.n	800d3b6 <tool_get_pending+0x16>
 800d3dc:	20001ac4 	.word	0x20001ac4
 800d3e0:	20001614 	.word	0x20001614
 800d3e4:	200014f4 	.word	0x200014f4

0800d3e8 <add_offset>:
{
 800d3e8:	b508      	push	{r3, lr}
    gc_state.offset_id = (gc_state.offset_id + 1) & (MAX_OFFSET_ENTRIES - 1);
 800d3ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d420 <add_offset+0x38>)
 800d3ec:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 800d3f0:	3201      	adds	r2, #1
 800d3f2:	f002 0203 	and.w	r2, r2, #3
 800d3f6:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    memcpy(&gc_state.offset_queue[gc_state.offset_id], &gc_state.g92_coord_offset, sizeof(coord_data_t));
 800d3fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d3fe:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 800d402:	f10c 0c80 	add.w	ip, ip, #128	@ 0x80
 800d406:	449c      	add	ip, r3
 800d408:	33b8      	adds	r3, #184	@ 0xb8
 800d40a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d40c:	f8cc 0004 	str.w	r0, [ip, #4]
 800d410:	f8cc 1008 	str.w	r1, [ip, #8]
 800d414:	f8cc 200c 	str.w	r2, [ip, #12]
    system_flag_wco_change();
 800d418:	f014 fede 	bl	80221d8 <system_flag_wco_change>
}
 800d41c:	bd08      	pop	{r3, pc}
 800d41e:	bf00      	nop
 800d420:	20001614 	.word	0x20001614

0800d424 <add_output_command>:
{
 800d424:	b510      	push	{r4, lr}
 800d426:	4604      	mov	r4, r0
    if((add_cmd = malloc(sizeof(output_command_t)))) {
 800d428:	200c      	movs	r0, #12
 800d42a:	f015 fcb5 	bl	8022d98 <malloc>
 800d42e:	4601      	mov	r1, r0
 800d430:	b168      	cbz	r0, 800d44e <add_output_command+0x2a>
        memcpy(add_cmd, command, sizeof(output_command_t));
 800d432:	6820      	ldr	r0, [r4, #0]
 800d434:	6862      	ldr	r2, [r4, #4]
 800d436:	68a3      	ldr	r3, [r4, #8]
 800d438:	6008      	str	r0, [r1, #0]
 800d43a:	604a      	str	r2, [r1, #4]
 800d43c:	608b      	str	r3, [r1, #8]
        if(output_commands == NULL)
 800d43e:	4b07      	ldr	r3, [pc, #28]	@ (800d45c <add_output_command+0x38>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	b143      	cbz	r3, 800d456 <add_output_command+0x32>
            while(cmd->next)
 800d444:	461a      	mov	r2, r3
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d1fb      	bne.n	800d444 <add_output_command+0x20>
            cmd->next = add_cmd;
 800d44c:	6091      	str	r1, [r2, #8]
}
 800d44e:	1e08      	subs	r0, r1, #0
 800d450:	bf18      	it	ne
 800d452:	2001      	movne	r0, #1
 800d454:	bd10      	pop	{r4, pc}
            output_commands = add_cmd;
 800d456:	4b01      	ldr	r3, [pc, #4]	@ (800d45c <add_output_command+0x38>)
 800d458:	6019      	str	r1, [r3, #0]
 800d45a:	e7f8      	b.n	800d44e <add_output_command+0x2a>
 800d45c:	200015e0 	.word	0x200015e0

0800d460 <gc_get_scaling>:
}
 800d460:	4800      	ldr	r0, [pc, #0]	@ (800d464 <gc_get_scaling+0x4>)
 800d462:	4770      	bx	lr
 800d464:	200001cc 	.word	0x200001cc

0800d468 <gc_get_g51_state>:
    axes_signals_t scaled = {0};
 800d468:	f04f 0000 	mov.w	r0, #0
    uint_fast8_t idx = N_AXIS;
 800d46c:	2303      	movs	r3, #3
 800d46e:	e002      	b.n	800d476 <gc_get_g51_state+0xe>
            scaled.value |= 0x01;
 800d470:	f041 0001 	orr.w	r0, r1, #1
    } while(idx);
 800d474:	b19b      	cbz	r3, 800d49e <gc_get_g51_state+0x36>
        scaled.value <<= 1;
 800d476:	b2c0      	uxtb	r0, r0
 800d478:	0040      	lsls	r0, r0, #1
 800d47a:	b2c1      	uxtb	r1, r0
 800d47c:	4608      	mov	r0, r1
        if(scale_factor.ijk[--idx] != 1.0f)
 800d47e:	3b01      	subs	r3, #1
 800d480:	f103 0c02 	add.w	ip, r3, #2
 800d484:	4a06      	ldr	r2, [pc, #24]	@ (800d4a0 <gc_get_g51_state+0x38>)
 800d486:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d48a:	ed92 7a01 	vldr	s14, [r2, #4]
 800d48e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d492:	eeb4 7a67 	vcmp.f32	s14, s15
 800d496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d49a:	d0eb      	beq.n	800d474 <gc_get_g51_state+0xc>
 800d49c:	e7e8      	b.n	800d470 <gc_get_g51_state+0x8>
}
 800d49e:	4770      	bx	lr
 800d4a0:	200001c0 	.word	0x200001c0

0800d4a4 <set_scaling>:
{
 800d4a4:	b510      	push	{r4, lr}
 800d4a6:	ed2d 8b02 	vpush	{d8}
 800d4aa:	eeb0 8a40 	vmov.f32	s16, s0
    axes_signals_t state = gc_get_g51_state();
 800d4ae:	f7ff ffdb 	bl	800d468 <gc_get_g51_state>
    uint_fast8_t idx = N_AXIS;
 800d4b2:	2303      	movs	r3, #3
        scale_factor.ijk[--idx] = factor;
 800d4b4:	3b01      	subs	r3, #1
 800d4b6:	4a12      	ldr	r2, [pc, #72]	@ (800d500 <set_scaling+0x5c>)
 800d4b8:	1c99      	adds	r1, r3, #2
 800d4ba:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d4be:	ed81 8a01 	vstr	s16, [r1, #4]
        scale_factor.xyz[idx] = 0.0f;
 800d4c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d4c6:	2100      	movs	r1, #0
 800d4c8:	6011      	str	r1, [r2, #0]
    } while(idx);
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d1f2      	bne.n	800d4b4 <set_scaling+0x10>
    gc_state.modal.scaling_active = factor != 1.0f;
 800d4ce:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d4d2:	eeb4 8a67 	vcmp.f32	s16, s15
 800d4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4da:	bf14      	ite	ne
 800d4dc:	2201      	movne	r2, #1
 800d4de:	2200      	moveq	r2, #0
 800d4e0:	4b08      	ldr	r3, [pc, #32]	@ (800d504 <set_scaling+0x60>)
 800d4e2:	779a      	strb	r2, [r3, #30]
    if(state.value != gc_get_g51_state().value)
 800d4e4:	b2c4      	uxtb	r4, r0
 800d4e6:	f7ff ffbf 	bl	800d468 <gc_get_g51_state>
 800d4ea:	b2c0      	uxtb	r0, r0
 800d4ec:	4284      	cmp	r4, r0
 800d4ee:	d102      	bne.n	800d4f6 <set_scaling+0x52>
}
 800d4f0:	ecbd 8b02 	vpop	{d8}
 800d4f4:	bd10      	pop	{r4, pc}
        system_add_rt_report(Report_Scaling);
 800d4f6:	2002      	movs	r0, #2
 800d4f8:	f014 fde2 	bl	80220c0 <system_add_rt_report>
}
 800d4fc:	e7f8      	b.n	800d4f0 <set_scaling+0x4c>
 800d4fe:	bf00      	nop
 800d500:	200001c0 	.word	0x200001c0
 800d504:	20001614 	.word	0x20001614

0800d508 <gc_get_offset>:
{
 800d508:	b510      	push	{r4, lr}
 800d50a:	4604      	mov	r4, r0
    if(real_time &&
 800d50c:	b311      	cbz	r1, 800d554 <gc_get_offset+0x4c>
        !(settings.status_report.machine_position && settings.status_report.sync_on_wco_change) &&
 800d50e:	4b1c      	ldr	r3, [pc, #112]	@ (800d580 <gc_get_offset+0x78>)
 800d510:	f8b3 20fc 	ldrh.w	r2, [r3, #252]	@ 0xfc
    if(real_time &&
 800d514:	f240 1301 	movw	r3, #257	@ 0x101
 800d518:	4393      	bics	r3, r2
 800d51a:	d01b      	beq.n	800d554 <gc_get_offset+0x4c>
          (offset_id = st_get_offset_id()) >= 0)
 800d51c:	f013 fa5a 	bl	80209d4 <st_get_offset_id>
        !(settings.status_report.machine_position && settings.status_report.sync_on_wco_change) &&
 800d520:	2800      	cmp	r0, #0
 800d522:	db17      	blt.n	800d554 <gc_get_offset+0x4c>
        return gc_state.modal.coord_system.xyz[idx] + gc_state.offset_queue[offset_id].values[idx] + gc_state.tool_length_offset[idx];
 800d524:	4a17      	ldr	r2, [pc, #92]	@ (800d584 <gc_get_offset+0x7c>)
 800d526:	1ca3      	adds	r3, r4, #2
 800d528:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d52c:	ed93 0a00 	vldr	s0, [r3]
 800d530:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d534:	1903      	adds	r3, r0, r4
 800d536:	3320      	adds	r3, #32
 800d538:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d53c:	edd3 7a01 	vldr	s15, [r3, #4]
 800d540:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d544:	3430      	adds	r4, #48	@ 0x30
 800d546:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d54a:	edd2 7a01 	vldr	s15, [r2, #4]
 800d54e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d552:	e014      	b.n	800d57e <gc_get_offset+0x76>
        return gc_state.modal.coord_system.xyz[idx] + gc_state.g92_coord_offset[idx] + gc_state.tool_length_offset[idx];
 800d554:	4b0b      	ldr	r3, [pc, #44]	@ (800d584 <gc_get_offset+0x7c>)
 800d556:	1ca2      	adds	r2, r4, #2
 800d558:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d55c:	ed92 0a00 	vldr	s0, [r2]
 800d560:	f104 022e 	add.w	r2, r4, #46	@ 0x2e
 800d564:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d568:	edd2 7a00 	vldr	s15, [r2]
 800d56c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d570:	3430      	adds	r4, #48	@ 0x30
 800d572:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d576:	edd3 7a01 	vldr	s15, [r3, #4]
 800d57a:	ee30 0a27 	vadd.f32	s0, s0, s15
}
 800d57e:	bd10      	pop	{r4, pc}
 800d580:	200022f4 	.word	0x200022f4
 800d584:	20001614 	.word	0x20001614

0800d588 <gc_set_tool_offset>:
{
 800d588:	b500      	push	{lr}
 800d58a:	b083      	sub	sp, #12
 800d58c:	9201      	str	r2, [sp, #4]
    switch(mode) {
 800d58e:	4684      	mov	ip, r0
 800d590:	b120      	cbz	r0, 800d59c <gc_set_tool_offset+0x14>
 800d592:	2802      	cmp	r0, #2
 800d594:	d023      	beq.n	800d5de <gc_set_tool_offset+0x56>
    gc_state.modal.tool_offset_mode = mode;
 800d596:	4b2c      	ldr	r3, [pc, #176]	@ (800d648 <gc_set_tool_offset+0xc0>)
 800d598:	71d8      	strb	r0, [r3, #7]
    if(tlo_changed) {
 800d59a:	e04b      	b.n	800d634 <gc_set_tool_offset+0xac>
    switch(mode) {
 800d59c:	2000      	movs	r0, #0
 800d59e:	2203      	movs	r2, #3
 800d5a0:	e007      	b.n	800d5b2 <gc_set_tool_offset+0x2a>
                    gc_state.tool->offset[idx] = 0.0f;
 800d5a2:	4b29      	ldr	r3, [pc, #164]	@ (800d648 <gc_set_tool_offset+0xc0>)
 800d5a4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800d5a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d5ac:	6019      	str	r1, [r3, #0]
            } while(idx);
 800d5ae:	2a00      	cmp	r2, #0
 800d5b0:	d03c      	beq.n	800d62c <gc_set_tool_offset+0xa4>
                idx--;
 800d5b2:	3a01      	subs	r2, #1
                tlo_changed |= gc_state.tool_length_offset[idx] != 0.0f;
 800d5b4:	f102 0130 	add.w	r1, r2, #48	@ 0x30
 800d5b8:	4b23      	ldr	r3, [pc, #140]	@ (800d648 <gc_set_tool_offset+0xc0>)
 800d5ba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d5be:	edd3 7a01 	vldr	s15, [r3, #4]
 800d5c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ca:	bf18      	it	ne
 800d5cc:	f040 0001 	orrne.w	r0, r0, #1
                gc_state.tool_length_offset[idx] = 0.0f;
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	6059      	str	r1, [r3, #4]
                if(grbl.tool_table.n_tools == 0)
 800d5d4:	4b1d      	ldr	r3, [pc, #116]	@ (800d64c <gc_set_tool_offset+0xc4>)
 800d5d6:	699b      	ldr	r3, [r3, #24]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d1e8      	bne.n	800d5ae <gc_set_tool_offset+0x26>
 800d5dc:	e7e1      	b.n	800d5a2 <gc_set_tool_offset+0x1a>
                float new_offset = offset / settings.axis[idx].steps_per_mm;
 800d5de:	eddd 7a01 	vldr	s15, [sp, #4]
 800d5e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5e6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800d5ea:	4b19      	ldr	r3, [pc, #100]	@ (800d650 <gc_set_tool_offset+0xc8>)
 800d5ec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d5f0:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800d5f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                tlo_changed |= gc_state.tool_length_offset[idx] != new_offset;
 800d5f8:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 800d5fc:	4b12      	ldr	r3, [pc, #72]	@ (800d648 <gc_set_tool_offset+0xc0>)
 800d5fe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d602:	edd3 7a01 	vldr	s15, [r3, #4]
 800d606:	eef4 7a47 	vcmp.f32	s15, s14
 800d60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d60e:	bf14      	ite	ne
 800d610:	2001      	movne	r0, #1
 800d612:	2000      	moveq	r0, #0
                gc_state.tool_length_offset[idx] = new_offset;
 800d614:	ed83 7a01 	vstr	s14, [r3, #4]
                if(grbl.tool_table.n_tools == 0)
 800d618:	4b0c      	ldr	r3, [pc, #48]	@ (800d64c <gc_set_tool_offset+0xc4>)
 800d61a:	699b      	ldr	r3, [r3, #24]
 800d61c:	b933      	cbnz	r3, 800d62c <gc_set_tool_offset+0xa4>
                    gc_state.tool->offset[idx] = new_offset;
 800d61e:	4b0a      	ldr	r3, [pc, #40]	@ (800d648 <gc_set_tool_offset+0xc0>)
 800d620:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800d624:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d628:	ed83 7a00 	vstr	s14, [r3]
    gc_state.modal.tool_offset_mode = mode;
 800d62c:	4b06      	ldr	r3, [pc, #24]	@ (800d648 <gc_set_tool_offset+0xc0>)
 800d62e:	f883 c007 	strb.w	ip, [r3, #7]
    if(tlo_changed) {
 800d632:	b910      	cbnz	r0, 800d63a <gc_set_tool_offset+0xb2>
}
 800d634:	b003      	add	sp, #12
 800d636:	f85d fb04 	ldr.w	pc, [sp], #4
        system_add_rt_report(Report_ToolOffset);
 800d63a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d63e:	f014 fd3f 	bl	80220c0 <system_add_rt_report>
        system_flag_wco_change();
 800d642:	f014 fdc9 	bl	80221d8 <system_flag_wco_change>
}
 800d646:	e7f5      	b.n	800d634 <gc_set_tool_offset+0xac>
 800d648:	20001614 	.word	0x20001614
 800d64c:	20001ac4 	.word	0x20001ac4
 800d650:	200022f4 	.word	0x200022f4

0800d654 <gc_get_plane_data>:
    switch (select) {
 800d654:	b141      	cbz	r1, 800d668 <gc_get_plane_data+0x14>
 800d656:	2901      	cmp	r1, #1
 800d658:	d00d      	beq.n	800d676 <gc_get_plane_data+0x22>
            plane->axis_0 = Y_AXIS;
 800d65a:	2301      	movs	r3, #1
 800d65c:	7003      	strb	r3, [r0, #0]
            plane->axis_1 = Z_AXIS;
 800d65e:	2302      	movs	r3, #2
 800d660:	7043      	strb	r3, [r0, #1]
            plane->axis_linear = X_AXIS;
 800d662:	2300      	movs	r3, #0
 800d664:	7083      	strb	r3, [r0, #2]
}
 800d666:	4770      	bx	lr
            plane->axis_0 = X_AXIS;
 800d668:	2300      	movs	r3, #0
 800d66a:	7003      	strb	r3, [r0, #0]
            plane->axis_1 = Y_AXIS;
 800d66c:	2301      	movs	r3, #1
 800d66e:	7043      	strb	r3, [r0, #1]
            plane->axis_linear = Z_AXIS;
 800d670:	2302      	movs	r3, #2
 800d672:	7083      	strb	r3, [r0, #2]
            break;
 800d674:	4770      	bx	lr
            plane->axis_0 = Z_AXIS;
 800d676:	2302      	movs	r3, #2
 800d678:	7003      	strb	r3, [r0, #0]
            plane->axis_1 = X_AXIS;
 800d67a:	2300      	movs	r3, #0
 800d67c:	7043      	strb	r3, [r0, #1]
            plane->axis_linear = Y_AXIS;
 800d67e:	2301      	movs	r3, #1
 800d680:	7083      	strb	r3, [r0, #2]
            break;
 800d682:	4770      	bx	lr

0800d684 <gc_init>:
{
 800d684:	b510      	push	{r4, lr}
 800d686:	b086      	sub	sp, #24
    if(sys.cold_start) {
 800d688:	4b46      	ldr	r3, [pc, #280]	@ (800d7a4 <gc_init+0x120>)
 800d68a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d68e:	b18b      	cbz	r3, 800d6b4 <gc_init+0x30>
        memset(&gc_state, 0, sizeof(parser_state_t));
 800d690:	4c45      	ldr	r4, [pc, #276]	@ (800d7a8 <gc_init+0x124>)
 800d692:	22d4      	movs	r2, #212	@ 0xd4
 800d694:	2100      	movs	r1, #0
 800d696:	4620      	mov	r0, r4
 800d698:	f017 fc45 	bl	8024f26 <memset>
        gc_state.tool = &grbl.tool_table.tool[0];
 800d69c:	4a43      	ldr	r2, [pc, #268]	@ (800d7ac <gc_init+0x128>)
 800d69e:	69d3      	ldr	r3, [r2, #28]
 800d6a0:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
        if(grbl.tool_table.n_tools == 0)
 800d6a4:	6992      	ldr	r2, [r2, #24]
 800d6a6:	b9da      	cbnz	r2, 800d6e0 <gc_init+0x5c>
            memset(grbl.tool_table.tool, 0, sizeof(tool_data_t));
 800d6a8:	601a      	str	r2, [r3, #0]
 800d6aa:	605a      	str	r2, [r3, #4]
 800d6ac:	609a      	str	r2, [r3, #8]
 800d6ae:	60da      	str	r2, [r3, #12]
 800d6b0:	611a      	str	r2, [r3, #16]
 800d6b2:	e015      	b.n	800d6e0 <gc_init+0x5c>
        memset(&gc_state, 0, offsetof(parser_state_t, g92_coord_offset));
 800d6b4:	4c3c      	ldr	r4, [pc, #240]	@ (800d7a8 <gc_init+0x124>)
 800d6b6:	22b8      	movs	r2, #184	@ 0xb8
 800d6b8:	2100      	movs	r1, #0
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	f017 fc33 	bl	8024f26 <memset>
        gc_state.tool_pending = gc_state.tool->tool_id;
 800d6c0:	f8d4 00d0 	ldr.w	r0, [r4, #208]	@ 0xd0
 800d6c4:	6903      	ldr	r3, [r0, #16]
 800d6c6:	67a3      	str	r3, [r4, #120]	@ 0x78
        if(hal.tool.select)
 800d6c8:	4b39      	ldr	r3, [pc, #228]	@ (800d7b0 <gc_init+0x12c>)
 800d6ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800d6ce:	b13b      	cbz	r3, 800d6e0 <gc_init+0x5c>
            hal.tool.select(gc_state.tool, false);
 800d6d0:	2100      	movs	r1, #0
 800d6d2:	4798      	blx	r3
 800d6d4:	e004      	b.n	800d6e0 <gc_init+0x5c>
        output_command_t *next = output_commands->next;
 800d6d6:	6884      	ldr	r4, [r0, #8]
        free(output_commands);
 800d6d8:	f015 fb66 	bl	8022da8 <free>
        output_commands = next;
 800d6dc:	4b35      	ldr	r3, [pc, #212]	@ (800d7b4 <gc_init+0x130>)
 800d6de:	601c      	str	r4, [r3, #0]
    while(output_commands) {
 800d6e0:	4b34      	ldr	r3, [pc, #208]	@ (800d7b4 <gc_init+0x130>)
 800d6e2:	6818      	ldr	r0, [r3, #0]
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	d1f6      	bne.n	800d6d6 <gc_init+0x52>
    gc_state.modal.override_ctrl = sys.override.control;
 800d6e8:	4c2f      	ldr	r4, [pc, #188]	@ (800d7a8 <gc_init+0x124>)
 800d6ea:	4b2e      	ldr	r3, [pc, #184]	@ (800d7a4 <gc_init+0x120>)
 800d6ec:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800d6f0:	7723      	strb	r3, [r4, #28]
    gc_state.spindle.hal = spindle_get(0);
 800d6f2:	f011 f879 	bl	801e7e8 <spindle_get>
 800d6f6:	65e0      	str	r0, [r4, #92]	@ 0x5c
    set_scaling(1.0f);
 800d6f8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d6fc:	f7ff fed2 	bl	800d4a4 <set_scaling>
    if (!settings_read_coord_data(gc_state.modal.coord_system.id, &gc_state.modal.coord_system.xyz))
 800d700:	f104 0108 	add.w	r1, r4, #8
 800d704:	7d20      	ldrb	r0, [r4, #20]
 800d706:	f010 f8a5 	bl	801d854 <settings_read_coord_data>
 800d70a:	b918      	cbnz	r0, 800d714 <gc_init+0x90>
        grbl.report.status_message(Status_SettingReadFail);
 800d70c:	4b27      	ldr	r3, [pc, #156]	@ (800d7ac <gc_init+0x128>)
 800d70e:	689b      	ldr	r3, [r3, #8]
 800d710:	2007      	movs	r0, #7
 800d712:	4798      	blx	r3
    if(sys.cold_start && !settings.flags.g92_is_volatile) {
 800d714:	4b23      	ldr	r3, [pc, #140]	@ (800d7a4 <gc_init+0x120>)
 800d716:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d71a:	b12b      	cbz	r3, 800d728 <gc_init+0xa4>
 800d71c:	4b26      	ldr	r3, [pc, #152]	@ (800d7b8 <gc_init+0x134>)
 800d71e:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 800d722:	f013 0f02 	tst.w	r3, #2
 800d726:	d025      	beq.n	800d774 <gc_init+0xf0>
    if(grbl.on_wco_changed && (!sys.cold_start ||
 800d728:	4b20      	ldr	r3, [pc, #128]	@ (800d7ac <gc_init+0x128>)
 800d72a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800d72c:	b1cc      	cbz	r4, 800d762 <gc_init+0xde>
 800d72e:	4b1d      	ldr	r3, [pc, #116]	@ (800d7a4 <gc_init+0x120>)
 800d730:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d734:	b1a3      	cbz	r3, 800d760 <gc_init+0xdc>
                                !is0_position_vector(gc_state.modal.coord_system.xyz) ||
 800d736:	2300      	movs	r3, #0
 800d738:	9300      	str	r3, [sp, #0]
 800d73a:	9301      	str	r3, [sp, #4]
 800d73c:	9302      	str	r3, [sp, #8]
 800d73e:	220c      	movs	r2, #12
 800d740:	4669      	mov	r1, sp
 800d742:	481e      	ldr	r0, [pc, #120]	@ (800d7bc <gc_init+0x138>)
 800d744:	f017 fbc5 	bl	8024ed2 <memcmp>
    if(grbl.on_wco_changed && (!sys.cold_start ||
 800d748:	b950      	cbnz	r0, 800d760 <gc_init+0xdc>
                                 !is0_position_vector(gc_state.g92_coord_offset)))
 800d74a:	2300      	movs	r3, #0
 800d74c:	9303      	str	r3, [sp, #12]
 800d74e:	9304      	str	r3, [sp, #16]
 800d750:	9305      	str	r3, [sp, #20]
 800d752:	220c      	movs	r2, #12
 800d754:	eb0d 0102 	add.w	r1, sp, r2
 800d758:	4819      	ldr	r0, [pc, #100]	@ (800d7c0 <gc_init+0x13c>)
 800d75a:	f017 fbba 	bl	8024ed2 <memcmp>
                                !is0_position_vector(gc_state.modal.coord_system.xyz) ||
 800d75e:	b100      	cbz	r0, 800d762 <gc_init+0xde>
        grbl.on_wco_changed();
 800d760:	47a0      	blx	r4
    ngc_modal_state_invalidate();
 800d762:	f007 ffd7 	bl	8015714 <ngc_modal_state_invalidate>
    if(grbl.on_parser_init)
 800d766:	4b11      	ldr	r3, [pc, #68]	@ (800d7ac <gc_init+0x128>)
 800d768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d76a:	b10b      	cbz	r3, 800d770 <gc_init+0xec>
        grbl.on_parser_init(&gc_state);
 800d76c:	480e      	ldr	r0, [pc, #56]	@ (800d7a8 <gc_init+0x124>)
 800d76e:	4798      	blx	r3
}
 800d770:	b006      	add	sp, #24
 800d772:	bd10      	pop	{r4, pc}
        if(!settings_read_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset))
 800d774:	4912      	ldr	r1, [pc, #72]	@ (800d7c0 <gc_init+0x13c>)
 800d776:	200b      	movs	r0, #11
 800d778:	f010 f86c 	bl	801d854 <settings_read_coord_data>
 800d77c:	b920      	cbnz	r0, 800d788 <gc_init+0x104>
            grbl.report.status_message(Status_SettingReadFail);
 800d77e:	4b0b      	ldr	r3, [pc, #44]	@ (800d7ac <gc_init+0x128>)
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	2007      	movs	r0, #7
 800d784:	4798      	blx	r3
 800d786:	e7cf      	b.n	800d728 <gc_init+0xa4>
            memcpy(&gc_state.offset_queue[gc_state.offset_id], &gc_state.g92_coord_offset, sizeof(coord_data_t));
 800d788:	4c07      	ldr	r4, [pc, #28]	@ (800d7a8 <gc_init+0x124>)
 800d78a:	f994 3082 	ldrsb.w	r3, [r4, #130]	@ 0x82
 800d78e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	3380      	adds	r3, #128	@ 0x80
 800d796:	4423      	add	r3, r4
 800d798:	34b8      	adds	r4, #184	@ 0xb8
 800d79a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800d79c:	6058      	str	r0, [r3, #4]
 800d79e:	6099      	str	r1, [r3, #8]
 800d7a0:	60da      	str	r2, [r3, #12]
 800d7a2:	e7c1      	b.n	800d728 <gc_init+0xa4>
 800d7a4:	20001bbc 	.word	0x20001bbc
 800d7a8:	20001614 	.word	0x20001614
 800d7ac:	20001ac4 	.word	0x20001ac4
 800d7b0:	200018dc 	.word	0x200018dc
 800d7b4:	200015e0 	.word	0x200015e0
 800d7b8:	200022f4 	.word	0x200022f4
 800d7bc:	2000161c 	.word	0x2000161c
 800d7c0:	200016cc 	.word	0x200016cc

0800d7c4 <gc_spindle_off>:
{
 800d7c4:	b508      	push	{r3, lr}
    gc_state.spindle.rpm = 0.0f;
 800d7c6:	4b05      	ldr	r3, [pc, #20]	@ (800d7dc <gc_spindle_off+0x18>)
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	651a      	str	r2, [r3, #80]	@ 0x50
    gc_state.modal.spindle.state.value = 0;
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	769a      	strb	r2, [r3, #26]
    spindle_all_off();
 800d7d0:	f011 fa16 	bl	801ec00 <spindle_all_off>
    system_add_rt_report(Report_Spindle);
 800d7d4:	2010      	movs	r0, #16
 800d7d6:	f014 fc73 	bl	80220c0 <system_add_rt_report>
}
 800d7da:	bd08      	pop	{r3, pc}
 800d7dc:	20001614 	.word	0x20001614

0800d7e0 <gc_coolant>:
{
 800d7e0:	b508      	push	{r3, lr}
    gc_state.modal.coolant = state;
 800d7e2:	4b05      	ldr	r3, [pc, #20]	@ (800d7f8 <gc_coolant+0x18>)
 800d7e4:	7658      	strb	r0, [r3, #25]
    hal.coolant.set_state(gc_state.modal.coolant);
 800d7e6:	4a05      	ldr	r2, [pc, #20]	@ (800d7fc <gc_coolant+0x1c>)
 800d7e8:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 800d7ea:	b2c0      	uxtb	r0, r0
 800d7ec:	4790      	blx	r2
    system_add_rt_report(Report_Coolant);
 800d7ee:	2020      	movs	r0, #32
 800d7f0:	f014 fc66 	bl	80220c0 <system_add_rt_report>
}
 800d7f4:	bd08      	pop	{r3, pc}
 800d7f6:	bf00      	nop
 800d7f8:	20001614 	.word	0x20001614
 800d7fc:	200018dc 	.word	0x200018dc

0800d800 <gc_spindle_get>:
}
 800d800:	4b01      	ldr	r3, [pc, #4]	@ (800d808 <gc_spindle_get+0x8>)
 800d802:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop
 800d808:	20001614 	.word	0x20001614

0800d80c <gc_output_message>:

// Output and free previously allocated message
void gc_output_message (char *message)
{
    if(message) {
 800d80c:	b188      	cbz	r0, 800d832 <gc_output_message+0x26>
{
 800d80e:	b510      	push	{r4, lr}
 800d810:	4604      	mov	r4, r0

        if(grbl.on_gcode_message)
 800d812:	4b08      	ldr	r3, [pc, #32]	@ (800d834 <gc_output_message+0x28>)
 800d814:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d818:	b103      	cbz	r3, 800d81c <gc_output_message+0x10>
            grbl.on_gcode_message(message);
 800d81a:	4798      	blx	r3

        if(*message)
 800d81c:	7823      	ldrb	r3, [r4, #0]
 800d81e:	b91b      	cbnz	r3, 800d828 <gc_output_message+0x1c>
            report_message(message, Message_Plain);

        free(message);
 800d820:	4620      	mov	r0, r4
 800d822:	f015 fac1 	bl	8022da8 <free>
    }
}
 800d826:	bd10      	pop	{r4, pc}
            report_message(message, Message_Plain);
 800d828:	2100      	movs	r1, #0
 800d82a:	4620      	mov	r0, r4
 800d82c:	f00c f864 	bl	80198f8 <report_message>
 800d830:	e7f6      	b.n	800d820 <gc_output_message+0x14>
 800d832:	4770      	bx	lr
 800d834:	20001ac4 	.word	0x20001ac4

0800d838 <gc_modal_state_restore>:

bool gc_modal_state_restore (gc_modal_t *copy)
{
    bool ok = false;

    if((ok = !!copy && !ABORTED)) {
 800d838:	2800      	cmp	r0, #0
 800d83a:	d04f      	beq.n	800d8dc <gc_modal_state_restore+0xa4>
{
 800d83c:	b538      	push	{r3, r4, r5, lr}
 800d83e:	4604      	mov	r4, r0
    if((ok = !!copy && !ABORTED)) {
 800d840:	4b28      	ldr	r3, [pc, #160]	@ (800d8e4 <gc_modal_state_restore+0xac>)
 800d842:	7818      	ldrb	r0, [r3, #0]
 800d844:	2800      	cmp	r0, #0
 800d846:	d14b      	bne.n	800d8e0 <gc_modal_state_restore+0xa8>
 800d848:	785b      	ldrb	r3, [r3, #1]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d149      	bne.n	800d8e2 <gc_modal_state_restore+0xaa>

        copy->auto_restore = false;
 800d84e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        copy->motion = gc_state.modal.motion;
 800d852:	4b25      	ldr	r3, [pc, #148]	@ (800d8e8 <gc_modal_state_restore+0xb0>)
 800d854:	881a      	ldrh	r2, [r3, #0]
 800d856:	8022      	strh	r2, [r4, #0]

        if(copy->coolant.value != gc_state.modal.coolant.value) {
 800d858:	7e62      	ldrb	r2, [r4, #25]
 800d85a:	7e5b      	ldrb	r3, [r3, #25]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d009      	beq.n	800d874 <gc_modal_state_restore+0x3c>
            hal.coolant.set_state(copy->coolant);
 800d860:	4b22      	ldr	r3, [pc, #136]	@ (800d8ec <gc_modal_state_restore+0xb4>)
 800d862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d864:	7e60      	ldrb	r0, [r4, #25]
 800d866:	4798      	blx	r3
            delay_sec(settings.safety_door.coolant_on_delay, DelayMode_SysSuspend);
 800d868:	2001      	movs	r0, #1
 800d86a:	4b21      	ldr	r3, [pc, #132]	@ (800d8f0 <gc_modal_state_restore+0xb8>)
 800d86c:	ed93 0a51 	vldr	s0, [r3, #324]	@ 0x144
 800d870:	f008 fb18 	bl	8015ea4 <delay_sec>
        }

        if(copy->spindle.state.value != gc_state.modal.spindle.state.value || copy->rpm != gc_state.modal.rpm)
 800d874:	7ea2      	ldrb	r2, [r4, #26]
 800d876:	4b1c      	ldr	r3, [pc, #112]	@ (800d8e8 <gc_modal_state_restore+0xb0>)
 800d878:	7e9b      	ldrb	r3, [r3, #26]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d109      	bne.n	800d892 <gc_modal_state_restore+0x5a>
 800d87e:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 800d882:	4b19      	ldr	r3, [pc, #100]	@ (800d8e8 <gc_modal_state_restore+0xb0>)
 800d884:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800d888:	eeb4 7a67 	vcmp.f32	s14, s15
 800d88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d890:	d006      	beq.n	800d8a0 <gc_modal_state_restore+0x68>
            spindle_restore(gc_state.spindle.hal, copy->spindle.state, copy->rpm);
 800d892:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 800d896:	7ea1      	ldrb	r1, [r4, #26]
 800d898:	4b13      	ldr	r3, [pc, #76]	@ (800d8e8 <gc_modal_state_restore+0xb0>)
 800d89a:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800d89c:	f011 f8a2 	bl	801e9e4 <spindle_restore>

        memcpy(&gc_state.modal, copy, sizeof(gc_modal_t));
 800d8a0:	46a4      	mov	ip, r4
 800d8a2:	4d11      	ldr	r5, [pc, #68]	@ (800d8e8 <gc_modal_state_restore+0xb0>)
 800d8a4:	3430      	adds	r4, #48	@ 0x30
 800d8a6:	46ae      	mov	lr, r5
 800d8a8:	f8dc 0000 	ldr.w	r0, [ip]
 800d8ac:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d8b0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800d8b4:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800d8b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d8bc:	f10c 0c10 	add.w	ip, ip, #16
 800d8c0:	4675      	mov	r5, lr
 800d8c2:	45a4      	cmp	ip, r4
 800d8c4:	d1ef      	bne.n	800d8a6 <gc_modal_state_restore+0x6e>
 800d8c6:	f8dc 0000 	ldr.w	r0, [ip]
 800d8ca:	f8ce 0000 	str.w	r0, [lr]

        gc_state.spindle.rpm = gc_state.modal.rpm;
 800d8ce:	4b06      	ldr	r3, [pc, #24]	@ (800d8e8 <gc_modal_state_restore+0xb0>)
 800d8d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d8d2:	651a      	str	r2, [r3, #80]	@ 0x50
        gc_state.feed_rate = gc_state.modal.feed_rate;
 800d8d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8d6:	661a      	str	r2, [r3, #96]	@ 0x60
    if((ok = !!copy && !ABORTED)) {
 800d8d8:	2001      	movs	r0, #1
 800d8da:	e002      	b.n	800d8e2 <gc_modal_state_restore+0xaa>
 800d8dc:	2000      	movs	r0, #0
    }

    return ok;
}
 800d8de:	4770      	bx	lr
    if((ok = !!copy && !ABORTED)) {
 800d8e0:	2000      	movs	r0, #0
}
 800d8e2:	bd38      	pop	{r3, r4, r5, pc}
 800d8e4:	20001bbc 	.word	0x20001bbc
 800d8e8:	20001614 	.word	0x20001614
 800d8ec:	200018dc 	.word	0x200018dc
 800d8f0:	200022f4 	.word	0x200022f4

0800d8f4 <gc_normalize_block>:
// else the block delete character. Remaining characters are converted to upper case.
// If the driver handles message comments then the first is extracted and returned in a dynamically
// allocated memory block, the caller must free this after the message has been processed.

char *gc_normalize_block (char *block, char **message)
{
 800d8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8f8:	4604      	mov	r4, r0
 800d8fa:	460f      	mov	r7, r1
    char c, *s1, *s2, *comment = NULL;

    // Remove leading whitespace & control characters
    while(*block && *block <= ' ')
 800d8fc:	e000      	b.n	800d900 <gc_normalize_block+0xc>
        block++;
 800d8fe:	3401      	adds	r4, #1
    while(*block && *block <= ' ')
 800d900:	7822      	ldrb	r2, [r4, #0]
 800d902:	1e53      	subs	r3, r2, #1
 800d904:	b2db      	uxtb	r3, r3
 800d906:	2b1f      	cmp	r3, #31
 800d908:	d9f9      	bls.n	800d8fe <gc_normalize_block+0xa>

    if(*block == ';' || (*block == '/' && sys.flags.block_delete_enabled)) {
 800d90a:	2a3b      	cmp	r2, #59	@ 0x3b
 800d90c:	d00c      	beq.n	800d928 <gc_normalize_block+0x34>
 800d90e:	2a2f      	cmp	r2, #47	@ 0x2f
 800d910:	d005      	beq.n	800d91e <gc_normalize_block+0x2a>
        *block = '\0';
        return block;
    }

    if(*block == '/')
 800d912:	2a2f      	cmp	r2, #47	@ 0x2f
 800d914:	d00c      	beq.n	800d930 <gc_normalize_block+0x3c>
        block++;

    s1 = s2 = block;
 800d916:	46a0      	mov	r8, r4
 800d918:	4625      	mov	r5, r4
    char c, *s1, *s2, *comment = NULL;
 800d91a:	2600      	movs	r6, #0

    while((c = *s1) != '\0') {
 800d91c:	e060      	b.n	800d9e0 <gc_normalize_block+0xec>
    if(*block == ';' || (*block == '/' && sys.flags.block_delete_enabled)) {
 800d91e:	4b41      	ldr	r3, [pc, #260]	@ (800da24 <gc_normalize_block+0x130>)
 800d920:	7d9b      	ldrb	r3, [r3, #22]
 800d922:	f013 0f10 	tst.w	r3, #16
 800d926:	d0f4      	beq.n	800d912 <gc_normalize_block+0x1e>
        *block = '\0';
 800d928:	2300      	movs	r3, #0
 800d92a:	7023      	strb	r3, [r4, #0]
        return block;
 800d92c:	4620      	mov	r0, r4
 800d92e:	e076      	b.n	800da1e <gc_normalize_block+0x12a>
        block++;
 800d930:	3401      	adds	r4, #1
 800d932:	e7f0      	b.n	800d916 <gc_normalize_block+0x22>

        if(c > ' ') switch(c) {

            case ';':
                if(!comment) {
 800d934:	2e00      	cmp	r6, #0
 800d936:	d147      	bne.n	800d9c8 <gc_normalize_block+0xd4>
                    *s1 = '\0';
 800d938:	2300      	movs	r3, #0
 800d93a:	702b      	strb	r3, [r5, #0]
                    continue;
 800d93c:	e050      	b.n	800d9e0 <gc_normalize_block+0xec>
                // TODO: generate error if a left parenthesis is found inside a comment...
                comment = s1;
                break;

            case ')':
                if(comment && !gc_state.skip_blocks) {
 800d93e:	2e00      	cmp	r6, #0
 800d940:	d04d      	beq.n	800d9de <gc_normalize_block+0xea>
 800d942:	4b39      	ldr	r3, [pc, #228]	@ (800da28 <gc_normalize_block+0x134>)
 800d944:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d15f      	bne.n	800da0c <gc_normalize_block+0x118>
                    *s1 = '\0';
 800d94c:	702b      	strb	r3, [r5, #0]
                    if(!hal.driver_cap.no_gcode_message_handling) {
 800d94e:	4b37      	ldr	r3, [pc, #220]	@ (800da2c <gc_normalize_block+0x138>)
 800d950:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 800d954:	f013 0f04 	tst.w	r3, #4
 800d958:	d106      	bne.n	800d968 <gc_normalize_block+0x74>

                        size_t len = s1 - comment - 4;
 800d95a:	eba5 0906 	sub.w	r9, r5, r6
 800d95e:	f1a9 0904 	sub.w	r9, r9, #4

                        if(message && *message == NULL && !strncmp(comment, "(MSG,", 5) && (*message = malloc(len))) {
 800d962:	b10f      	cbz	r7, 800d968 <gc_normalize_block+0x74>
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	b14b      	cbz	r3, 800d97c <gc_normalize_block+0x88>
                            *comment = '\0'; // Do not generate grbl.on_gcode_comment event!
                        }
#endif // NGC_EXPRESSIONS_ENABLE
                    }

                    if(*comment && *message == NULL && grbl.on_gcode_comment)
 800d968:	7833      	ldrb	r3, [r6, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d050      	beq.n	800da10 <gc_normalize_block+0x11c>
 800d96e:	f8d7 9000 	ldr.w	r9, [r7]
 800d972:	f1b9 0f00 	cmp.w	r9, #0
 800d976:	d01b      	beq.n	800d9b0 <gc_normalize_block+0xbc>
                        grbl.on_gcode_comment(comment);
                }
                comment = NULL;
 800d978:	2600      	movs	r6, #0
 800d97a:	e030      	b.n	800d9de <gc_normalize_block+0xea>
                        if(message && *message == NULL && !strncmp(comment, "(MSG,", 5) && (*message = malloc(len))) {
 800d97c:	2205      	movs	r2, #5
 800d97e:	492c      	ldr	r1, [pc, #176]	@ (800da30 <gc_normalize_block+0x13c>)
 800d980:	4630      	mov	r0, r6
 800d982:	f017 faf4 	bl	8024f6e <strncmp>
 800d986:	2800      	cmp	r0, #0
 800d988:	d1ee      	bne.n	800d968 <gc_normalize_block+0x74>
 800d98a:	4648      	mov	r0, r9
 800d98c:	f015 fa04 	bl	8022d98 <malloc>
 800d990:	6038      	str	r0, [r7, #0]
 800d992:	2800      	cmp	r0, #0
 800d994:	d0e8      	beq.n	800d968 <gc_normalize_block+0x74>
                            comment += 5;
 800d996:	3605      	adds	r6, #5
                            while(*comment == ' ') {
 800d998:	e002      	b.n	800d9a0 <gc_normalize_block+0xac>
                                comment++;
 800d99a:	3601      	adds	r6, #1
                                len--;
 800d99c:	f109 39ff 	add.w	r9, r9, #4294967295
                            while(*comment == ' ') {
 800d9a0:	7833      	ldrb	r3, [r6, #0]
 800d9a2:	2b20      	cmp	r3, #32
 800d9a4:	d0f9      	beq.n	800d99a <gc_normalize_block+0xa6>
                            memcpy(*message, comment, len);
 800d9a6:	464a      	mov	r2, r9
 800d9a8:	4631      	mov	r1, r6
 800d9aa:	f017 fc1c 	bl	80251e6 <memcpy>
 800d9ae:	e7db      	b.n	800d968 <gc_normalize_block+0x74>
                    if(*comment && *message == NULL && grbl.on_gcode_comment)
 800d9b0:	4b20      	ldr	r3, [pc, #128]	@ (800da34 <gc_normalize_block+0x140>)
 800d9b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d9b6:	b36b      	cbz	r3, 800da14 <gc_normalize_block+0x120>
                        grbl.on_gcode_comment(comment);
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	4798      	blx	r3
                comment = NULL;
 800d9bc:	464e      	mov	r6, r9
 800d9be:	e00e      	b.n	800d9de <gc_normalize_block+0xea>
                break;

            default:
                if(comment == NULL)
                    *s2++ = CAPS(c);
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	e020      	b.n	800da06 <gc_normalize_block+0x112>
        if(c > ' ') switch(c) {
 800d9c4:	462e      	mov	r6, r5

#if NGC_EXPRESSIONS_ENABLE
        if(comment && s1 - comment < (strncmp(comment, "(DEBU,", 5) ? 5 : 7))
            *s1 = CAPS(c);
#else
        if(comment && s1 - comment < 5)
 800d9c6:	b156      	cbz	r6, 800d9de <gc_normalize_block+0xea>
 800d9c8:	1baa      	subs	r2, r5, r6
 800d9ca:	2a04      	cmp	r2, #4
 800d9cc:	dc07      	bgt.n	800d9de <gc_normalize_block+0xea>
            *s1 = CAPS(c);
 800d9ce:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d9d2:	b2d2      	uxtb	r2, r2
 800d9d4:	2a19      	cmp	r2, #25
 800d9d6:	d801      	bhi.n	800d9dc <gc_normalize_block+0xe8>
 800d9d8:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 800d9dc:	702b      	strb	r3, [r5, #0]
#endif
        s1++;
 800d9de:	3501      	adds	r5, #1
    while((c = *s1) != '\0') {
 800d9e0:	782b      	ldrb	r3, [r5, #0]
 800d9e2:	b1cb      	cbz	r3, 800da18 <gc_normalize_block+0x124>
        if(c > ' ') switch(c) {
 800d9e4:	2b20      	cmp	r3, #32
 800d9e6:	d9ee      	bls.n	800d9c6 <gc_normalize_block+0xd2>
 800d9e8:	2b29      	cmp	r3, #41	@ 0x29
 800d9ea:	d0a8      	beq.n	800d93e <gc_normalize_block+0x4a>
 800d9ec:	2b3b      	cmp	r3, #59	@ 0x3b
 800d9ee:	d0a1      	beq.n	800d934 <gc_normalize_block+0x40>
 800d9f0:	2b28      	cmp	r3, #40	@ 0x28
 800d9f2:	d0e7      	beq.n	800d9c4 <gc_normalize_block+0xd0>
                if(comment == NULL)
 800d9f4:	2e00      	cmp	r6, #0
 800d9f6:	d1e7      	bne.n	800d9c8 <gc_normalize_block+0xd4>
                    *s2++ = CAPS(c);
 800d9f8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d9fc:	b2d2      	uxtb	r2, r2
 800d9fe:	2a19      	cmp	r2, #25
 800da00:	d8de      	bhi.n	800d9c0 <gc_normalize_block+0xcc>
 800da02:	f003 025f 	and.w	r2, r3, #95	@ 0x5f
 800da06:	f808 2b01 	strb.w	r2, [r8], #1
 800da0a:	e7dc      	b.n	800d9c6 <gc_normalize_block+0xd2>
                comment = NULL;
 800da0c:	2600      	movs	r6, #0
 800da0e:	e7e6      	b.n	800d9de <gc_normalize_block+0xea>
 800da10:	2600      	movs	r6, #0
 800da12:	e7e4      	b.n	800d9de <gc_normalize_block+0xea>
 800da14:	464e      	mov	r6, r9
 800da16:	e7e2      	b.n	800d9de <gc_normalize_block+0xea>
    }

    *s2 = '\0';
 800da18:	f888 3000 	strb.w	r3, [r8]

    return block;
 800da1c:	4620      	mov	r0, r4
}
 800da1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da22:	bf00      	nop
 800da24:	20001bbc 	.word	0x20001bbc
 800da28:	20001614 	.word	0x20001614
 800da2c:	200018dc 	.word	0x200018dc
 800da30:	0802b678 	.word	0x0802b678
 800da34:	20001ac4 	.word	0x20001ac4

0800da38 <gc_execute_block>:
// Parses and executes one block (line) of 0-terminated G-Code.
// In this function, all units and positions are converted and exported to internal functions
// in terms of (mm, mm/min) and absolute machine coordinates, respectively.

status_code_t gc_execute_block (char *block)
{
 800da38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3c:	ed2d 8b06 	vpush	{d8-d10}
 800da40:	b0a5      	sub	sp, #148	@ 0x94
       { &gc_block.values.xyz[Z_AXIS], ValueType_Float }
    };

#endif

    char *message = NULL;
 800da42:	2300      	movs	r3, #0
 800da44:	9323      	str	r3, [sp, #140]	@ 0x8c

    block = gc_normalize_block(block, &message);
 800da46:	a923      	add	r1, sp, #140	@ 0x8c
 800da48:	f7ff ff54 	bl	800d8f4 <gc_normalize_block>

    if(block[0] == '\0') {
 800da4c:	7804      	ldrb	r4, [r0, #0]
 800da4e:	2c00      	cmp	r4, #0
 800da50:	d02d      	beq.n	800daae <gc_execute_block+0x76>
 800da52:	4606      	mov	r6, r0
    // Old comment from protocol.c:
    // NOTE: This maybe installed to tell grblHAL when a program is running vs manual input,
    // where, during a program, the system auto-cycle start will continue to execute
    // everything until the next '%' sign. This will help fix resuming issues with certain
    // functions that empty the planner buffer to execute its task on-time.
    if (block[0] == CMD_PROGRAM_DEMARCATION && block[1] == '\0') {
 800da54:	2c25      	cmp	r4, #37	@ 0x25
 800da56:	d102      	bne.n	800da5e <gc_execute_block+0x26>
 800da58:	7844      	ldrb	r4, [r0, #1]
 800da5a:	2c00      	cmp	r4, #0
 800da5c:	d02e      	beq.n	800dabc <gc_execute_block+0x84>
     updates these modes and commands as the block line is parsed and will only be used and
     executed after successful error-checking. The parser block struct also contains a block
     values struct, word tracking variables, and a non-modal commands tracker for the new
     block. This struct contains all of the necessary information to execute the block. */

    memset(&gc_block, 0, sizeof(gc_block));                           // Initialize the parser block struct.
 800da5e:	4c9c      	ldr	r4, [pc, #624]	@ (800dcd0 <gc_execute_block+0x298>)
 800da60:	22d4      	movs	r2, #212	@ 0xd4
 800da62:	2100      	movs	r1, #0
 800da64:	4620      	mov	r0, r4
 800da66:	f017 fa5e 	bl	8024f26 <memset>
    memcpy(&gc_block.modal, &gc_state.modal, sizeof(gc_state.modal)); // Copy current modes
 800da6a:	3408      	adds	r4, #8
 800da6c:	4d99      	ldr	r5, [pc, #612]	@ (800dcd4 <gc_execute_block+0x29c>)
 800da6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da7a:	682b      	ldr	r3, [r5, #0]
 800da7c:	6023      	str	r3, [r4, #0]
    axis_command_t axis_command = AxisCommand_None;
    io_mcode_t port_command = (io_mcode_t)0;
    plane_t plane;

    // Initialize bitflag tracking variables for axis indices compatible operations.
    axes_signals_t axis_words = {0}; // XYZ tracking
 800da7e:	f04f 0800 	mov.w	r8, #0
 800da82:	46c3      	mov	fp, r8
    ijk_words_t ijk_words = {0}; // IJK tracking
 800da84:	f8cd 8014 	str.w	r8, [sp, #20]

    // Initialize command and value words and parser flags variables.
    modal_groups_t command_words = {0};         // Bitfield for tracking G and M command words. Also used for modal group violations.
 800da88:	4647      	mov	r7, r8
    gc_parser_flags_t gc_parser_flags = {0};    // Parser flags for handling special cases.
    static parameter_words_t user_words = {0};  // User M-code words "taken"

    // Determine if the line is a jogging motion or a normal g-code block.
    if (block[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 800da8a:	7833      	ldrb	r3, [r6, #0]
 800da8c:	2b24      	cmp	r3, #36	@ 0x24
 800da8e:	d023      	beq.n	800dad8 <gc_execute_block+0xa0>
     STEP 2: Import all g-code words in the block. A g-code word is a letter followed by
     a number, which can either be a 'G'/'M' command or sets/assigns a command value. Also,
     perform initial error-checks for command word modal group violations, for any repeated
     words, and for negative values set for the value words F, N, P, T, and S. */

    uint_fast8_t char_counter = gc_parser_flags.jog_motion ? 3 /* Start parsing after `$J=` */ : 0;
 800da90:	f018 0f01 	tst.w	r8, #1
 800da94:	d12b      	bne.n	800daee <gc_execute_block+0xb6>
 800da96:	2300      	movs	r3, #0
 800da98:	9321      	str	r3, [sp, #132]	@ 0x84
    char letter;
    float value;
    uint32_t int_value = 0;
    uint_fast16_t mantissa = 0;
    bool is_user_mcode = false;
    word_bit_t word_bit = { .parameter = {0}, .modal_group = {0} }; // Bit-value for assigning tracking variables
 800da9a:	2300      	movs	r3, #0
 800da9c:	931e      	str	r3, [sp, #120]	@ 0x78
 800da9e:	931f      	str	r3, [sp, #124]	@ 0x7c
    bool is_user_mcode = false;
 800daa0:	4699      	mov	r9, r3
    uint32_t int_value = 0;
 800daa2:	461c      	mov	r4, r3
    io_mcode_t port_command = (io_mcode_t)0;
 800daa4:	9306      	str	r3, [sp, #24]
    axis_command_t axis_command = AxisCommand_None;
 800daa6:	469a      	mov	sl, r3
    bool set_tool = false, spindle_event = false;
 800daa8:	9307      	str	r3, [sp, #28]

    while ((letter = block[char_counter++]) != '\0') { // Loop until no more g-code words in block.
 800daaa:	f000 bc8b 	b.w	800e3c4 <gc_execute_block+0x98c>
        if(message)
 800daae:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800dab0:	2800      	cmp	r0, #0
 800dab2:	f000 809e 	beq.w	800dbf2 <gc_execute_block+0x1ba>
            gc_output_message(message);
 800dab6:	f7ff fea9 	bl	800d80c <gc_output_message>
        return Status_OK;
 800daba:	e09a      	b.n	800dbf2 <gc_execute_block+0x1ba>
        gc_state.file_run = !gc_state.file_run;
 800dabc:	4a85      	ldr	r2, [pc, #532]	@ (800dcd4 <gc_execute_block+0x29c>)
 800dabe:	f892 307c 	ldrb.w	r3, [r2, #124]	@ 0x7c
 800dac2:	f083 0301 	eor.w	r3, r3, #1
 800dac6:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
        if(message)
 800daca:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800dacc:	2800      	cmp	r0, #0
 800dace:	f000 8090 	beq.w	800dbf2 <gc_execute_block+0x1ba>
            gc_output_message(message);
 800dad2:	f7ff fe9b 	bl	800d80c <gc_output_message>
        return Status_OK;
 800dad6:	e08c      	b.n	800dbf2 <gc_execute_block+0x1ba>
        gc_parser_flags.jog_motion = On;
 800dad8:	f04f 0801 	mov.w	r8, #1
        gc_block.modal.motion = MotionMode_Linear;
 800dadc:	f1a4 0338 	sub.w	r3, r4, #56	@ 0x38
 800dae0:	2201      	movs	r2, #1
 800dae2:	811a      	strh	r2, [r3, #8]
        gc_block.modal.feed_mode = FeedMode_UnitsPerMin;
 800dae4:	f883 b00a 	strb.w	fp, [r3, #10]
        gc_block.modal.spindle.rpm_mode = SpindleSpeedMode_RPM;
 800dae8:	f883 b023 	strb.w	fp, [r3, #35]	@ 0x23
        gc_block.values.n = JOG_LINE_NUMBER; // Initialize default line number reported during jog.
 800daec:	e7d0      	b.n	800da90 <gc_execute_block+0x58>
    uint_fast8_t char_counter = gc_parser_flags.jog_motion ? 3 /* Start parsing after `$J=` */ : 0;
 800daee:	2303      	movs	r3, #3
 800daf0:	e7d2      	b.n	800da98 <gc_execute_block+0x60>
        if(!is_user_mcode && isnanf(value))
            FAIL(Status_BadNumberFormat);   // [Expected word value]

#else

        if((letter < 'A' && letter != '$') || letter > 'Z')
 800daf2:	2d5a      	cmp	r5, #90	@ 0x5a
 800daf4:	f240 8473 	bls.w	800e3de <gc_execute_block+0x9a6>
            FAIL(Status_ExpectedCommandLetter); // [Expected word letter]
 800daf8:	2401      	movs	r4, #1
 800dafa:	e07a      	b.n	800dbf2 <gc_execute_block+0x1ba>
        // accurate enough for value words that require integers to within 0.0001. This should be
        // a good enough compromise and catch most all non-integer errors. To make it compliant,
        // we would simply need to change the mantissa to int16, but this add compiled flash space.
        // Maybe update this later.
        if(isnan(value))
            mantissa = 0;
 800dafc:	2100      	movs	r1, #0
 800dafe:	f000 bc94 	b.w	800e42a <gc_execute_block+0x9f2>
             NOTE: Modal group numbers are defined in Table 4 of NIST RS274-NGC v3, pg.20 */

            case 'G': // Determine 'G' command and its modal group

                is_user_mcode = false;
                word_bit.modal_group.mask = 0;
 800db02:	2300      	movs	r3, #0
 800db04:	931f      	str	r3, [sp, #124]	@ 0x7c

                switch(int_value) {
 800db06:	2c41      	cmp	r4, #65	@ 0x41
 800db08:	d858      	bhi.n	800dbbc <gc_execute_block+0x184>
 800db0a:	2c41      	cmp	r4, #65	@ 0x41
 800db0c:	f203 8545 	bhi.w	801159a <gc_execute_block+0x3b62>
 800db10:	e8df f014 	tbh	[pc, r4, lsl #1]
 800db14:	00f200f2 	.word	0x00f200f2
 800db18:	00f200f2 	.word	0x00f200f2
 800db1c:	00f20090 	.word	0x00f20090
 800db20:	00771d43 	.word	0x00771d43
 800db24:	1d430077 	.word	0x1d430077
 800db28:	1d430089 	.word	0x1d430089
 800db2c:	1d431d43 	.word	0x1d431d43
 800db30:	1d431d43 	.word	0x1d431d43
 800db34:	01351d43 	.word	0x01351d43
 800db38:	01350135 	.word	0x01350135
 800db3c:	01720172 	.word	0x01720172
 800db40:	1d431d43 	.word	0x1d431d43
 800db44:	1d431d43 	.word	0x1d431d43
 800db48:	1d431d43 	.word	0x1d431d43
 800db4c:	1d430089 	.word	0x1d430089
 800db50:	1d430089 	.word	0x1d430089
 800db54:	00b71d43 	.word	0x00b71d43
 800db58:	1d431d43 	.word	0x1d431d43
 800db5c:	1d431d43 	.word	0x1d431d43
 800db60:	1d4300cc 	.word	0x1d4300cc
 800db64:	1d43017f 	.word	0x1d43017f
 800db68:	01861d43 	.word	0x01861d43
 800db6c:	1d431d43 	.word	0x1d431d43
 800db70:	1d431d43 	.word	0x1d431d43
 800db74:	01861d43 	.word	0x01861d43
 800db78:	024d024d 	.word	0x024d024d
 800db7c:	00901d43 	.word	0x00901d43
 800db80:	01b401b4 	.word	0x01b401b4
 800db84:	01b401b4 	.word	0x01b401b4
 800db88:	01b401b4 	.word	0x01b401b4
 800db8c:	020f1d43 	.word	0x020f1d43
 800db90:	1d431d43 	.word	0x1d431d43
 800db94:	021a1d43 	.word	0x021a1d43
 800db98:	f1a4 0249 	sub.w	r2, r4, #73	@ 0x49
 800db9c:	2301      	movs	r3, #1
 800db9e:	4093      	lsls	r3, r2
 800dba0:	4a4d      	ldr	r2, [pc, #308]	@ (800dcd8 <gc_execute_block+0x2a0>)
 800dba2:	401a      	ands	r2, r3
 800dba4:	2a00      	cmp	r2, #0
 800dba6:	f040 80d0 	bne.w	800dd4a <gc_execute_block+0x312>
 800dbaa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dbae:	f040 80a9 	bne.w	800dd04 <gc_execute_block+0x2cc>
 800dbb2:	f013 0f08 	tst.w	r3, #8
 800dbb6:	d164      	bne.n	800dc82 <gc_execute_block+0x24a>
 800dbb8:	2414      	movs	r4, #20
 800dbba:	e01a      	b.n	800dbf2 <gc_execute_block+0x1ba>
 800dbbc:	2c59      	cmp	r4, #89	@ 0x59
 800dbbe:	d915      	bls.n	800dbec <gc_execute_block+0x1b4>
 800dbc0:	2c63      	cmp	r4, #99	@ 0x63
 800dbc2:	f203 84ed 	bhi.w	80115a0 <gc_execute_block+0x3b68>
 800dbc6:	2c5a      	cmp	r4, #90	@ 0x5a
 800dbc8:	d319      	bcc.n	800dbfe <gc_execute_block+0x1c6>
 800dbca:	f1a4 035a 	sub.w	r3, r4, #90	@ 0x5a
 800dbce:	2b09      	cmp	r3, #9
 800dbd0:	f203 84e0 	bhi.w	8011594 <gc_execute_block+0x3b5c>
 800dbd4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800dbd8:	00de00de 	.word	0x00de00de
 800dbdc:	00fa0027 	.word	0x00fa0027
 800dbe0:	010600fa 	.word	0x010600fa
 800dbe4:	01cb01cb 	.word	0x01cb01cb
 800dbe8:	01df01df 	.word	0x01df01df
 800dbec:	2c49      	cmp	r4, #73	@ 0x49
 800dbee:	d2d3      	bcs.n	800db98 <gc_execute_block+0x160>
 800dbf0:	2414      	movs	r4, #20
#endif

    // TODO: % to denote start of program.

    return Status_OK;
}
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	b025      	add	sp, #148	@ 0x94
 800dbf6:	ecbd 8b06 	vpop	{d8-d10}
 800dbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfe:	2414      	movs	r4, #20
 800dc00:	e7f7      	b.n	800dbf2 <gc_execute_block+0x1ba>
                        if(settings.mode == Mode_Lathe) {
 800dc02:	4b36      	ldr	r3, [pc, #216]	@ (800dcdc <gc_execute_block+0x2a4>)
 800dc04:	7e1b      	ldrb	r3, [r3, #24]
 800dc06:	2b02      	cmp	r3, #2
 800dc08:	f043 84cd 	bne.w	80115a6 <gc_execute_block+0x3b6e>
                            word_bit.modal_group.G15 = On;
 800dc0c:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800dc10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc14:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                            gc_block.modal.diameter_mode = int_value == 7; // TODO: find specs for implementation, only affects X calculation? reporting? current position?
 800dc18:	2c07      	cmp	r4, #7
 800dc1a:	bf14      	ite	ne
 800dc1c:	2200      	movne	r2, #0
 800dc1e:	2201      	moveq	r2, #1
 800dc20:	4b2b      	ldr	r3, [pc, #172]	@ (800dcd0 <gc_execute_block+0x298>)
 800dc22:	735a      	strb	r2, [r3, #13]
                        break;
 800dc24:	e07c      	b.n	800dd20 <gc_execute_block+0x2e8>
                        if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 800dc26:	b929      	cbnz	r1, 800dc34 <gc_execute_block+0x1fc>
                            if (axis_command)
 800dc28:	f1ba 0f00 	cmp.w	sl, #0
 800dc2c:	f043 84be 	bne.w	80115ac <gc_execute_block+0x3b74>
                            axis_command = AxisCommand_NonModal;
 800dc30:	f04f 0a01 	mov.w	sl, #1
                        word_bit.modal_group.G0 = On;
 800dc34:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800dc38:	f043 0301 	orr.w	r3, r3, #1
 800dc3c:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.non_modal_command = (non_modal_t)int_value;
 800dc40:	b2e3      	uxtb	r3, r4
 800dc42:	4a23      	ldr	r2, [pc, #140]	@ (800dcd0 <gc_execute_block+0x298>)
 800dc44:	7013      	strb	r3, [r2, #0]
                        if ((int_value == 28) || (int_value == 30)) {
 800dc46:	2c1c      	cmp	r4, #28
 800dc48:	d00d      	beq.n	800dc66 <gc_execute_block+0x22e>
 800dc4a:	2c1e      	cmp	r4, #30
 800dc4c:	d00b      	beq.n	800dc66 <gc_execute_block+0x22e>
                        } else if (int_value == 92) {
 800dc4e:	2c5c      	cmp	r4, #92	@ 0x5c
 800dc50:	d166      	bne.n	800dd20 <gc_execute_block+0x2e8>
                            if (!((mantissa == 0) || (mantissa == 10) || (mantissa == 20) || (mantissa == 30)))
 800dc52:	291e      	cmp	r1, #30
 800dc54:	f203 84b0 	bhi.w	80115b8 <gc_execute_block+0x3b80>
 800dc58:	4a21      	ldr	r2, [pc, #132]	@ (800dce0 <gc_execute_block+0x2a8>)
 800dc5a:	40ca      	lsrs	r2, r1
 800dc5c:	f012 0f01 	tst.w	r2, #1
 800dc60:	d10a      	bne.n	800dc78 <gc_execute_block+0x240>
                        } else if (int_value == 92) {
 800dc62:	2414      	movs	r4, #20
 800dc64:	e7c5      	b.n	800dbf2 <gc_execute_block+0x1ba>
                            if (!((mantissa == 0) || (mantissa == 10)))
 800dc66:	b111      	cbz	r1, 800dc6e <gc_execute_block+0x236>
 800dc68:	290a      	cmp	r1, #10
 800dc6a:	f043 84a2 	bne.w	80115b2 <gc_execute_block+0x3b7a>
                            gc_block.non_modal_command += mantissa;
 800dc6e:	440b      	add	r3, r1
 800dc70:	4a17      	ldr	r2, [pc, #92]	@ (800dcd0 <gc_execute_block+0x298>)
 800dc72:	7013      	strb	r3, [r2, #0]
                            mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800dc74:	2100      	movs	r1, #0
 800dc76:	e053      	b.n	800dd20 <gc_execute_block+0x2e8>
                            gc_block.non_modal_command += mantissa;
 800dc78:	440b      	add	r3, r1
 800dc7a:	4a15      	ldr	r2, [pc, #84]	@ (800dcd0 <gc_execute_block+0x298>)
 800dc7c:	7013      	strb	r3, [r2, #0]
                            mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800dc7e:	2100      	movs	r1, #0
 800dc80:	e04e      	b.n	800dd20 <gc_execute_block+0x2e8>
                        if(mantissa != 0)
 800dc82:	2900      	cmp	r1, #0
 800dc84:	f043 849b 	bne.w	80115be <gc_execute_block+0x3b86>
                        if (axis_command)
 800dc88:	f1ba 0f00 	cmp.w	sl, #0
 800dc8c:	f043 849a 	bne.w	80115c4 <gc_execute_block+0x3b8c>
                        word_bit.modal_group.G1 = On;
 800dc90:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800dc94:	f043 0302 	orr.w	r3, r3, #2
 800dc98:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.motion = (motion_mode_t)int_value;
 800dc9c:	4b0c      	ldr	r3, [pc, #48]	@ (800dcd0 <gc_execute_block+0x298>)
 800dc9e:	811c      	strh	r4, [r3, #8]
                        gc_block.modal.canned_cycle_active = false;
 800dca0:	2200      	movs	r2, #0
 800dca2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
                        axis_command = AxisCommand_MotionMode;
 800dca6:	f04f 0a02 	mov.w	sl, #2
                        break;
 800dcaa:	e039      	b.n	800dd20 <gc_execute_block+0x2e8>
                        if(!(hal.probe.get_state && ((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))))
 800dcac:	4b0d      	ldr	r3, [pc, #52]	@ (800dce4 <gc_execute_block+0x2ac>)
 800dcae:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f003 8489 	beq.w	80115ca <gc_execute_block+0x3b92>
 800dcb8:	f1a1 0214 	sub.w	r2, r1, #20
 800dcbc:	2a1e      	cmp	r2, #30
 800dcbe:	f203 8487 	bhi.w	80115d0 <gc_execute_block+0x3b98>
 800dcc2:	4b07      	ldr	r3, [pc, #28]	@ (800dce0 <gc_execute_block+0x2a8>)
 800dcc4:	40d3      	lsrs	r3, r2
 800dcc6:	f013 0f01 	tst.w	r3, #1
 800dcca:	d10d      	bne.n	800dce8 <gc_execute_block+0x2b0>
 800dccc:	2414      	movs	r4, #20
 800dcce:	e790      	b.n	800dbf2 <gc_execute_block+0x1ba>
 800dcd0:	2000150c 	.word	0x2000150c
 800dcd4:	20001614 	.word	0x20001614
 800dcd8:	00013701 	.word	0x00013701
 800dcdc:	200022f4 	.word	0x200022f4
 800dce0:	40100401 	.word	0x40100401
 800dce4:	200018dc 	.word	0x200018dc
                        int_value += (mantissa / 10) + 100;
 800dce8:	4bb9      	ldr	r3, [pc, #740]	@ (800dfd0 <gc_execute_block+0x598>)
 800dcea:	fba3 2301 	umull	r2, r3, r3, r1
 800dcee:	eb04 03d3 	add.w	r3, r4, r3, lsr #3
 800dcf2:	f103 0464 	add.w	r4, r3, #100	@ 0x64
                        mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800dcf6:	2100      	movs	r1, #0
                        if (axis_command)
 800dcf8:	f1ba 0f00 	cmp.w	sl, #0
 800dcfc:	f043 846b 	bne.w	80115d6 <gc_execute_block+0x3b9e>
                        axis_command = AxisCommand_MotionMode;
 800dd00:	f04f 0a02 	mov.w	sl, #2
                        word_bit.modal_group.G1 = On;
 800dd04:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800dd08:	f043 0302 	orr.w	r3, r3, #2
 800dd0c:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        if(int_value == 5 && mantissa != 0) {
 800dd10:	2c05      	cmp	r4, #5
 800dd12:	d010      	beq.n	800dd36 <gc_execute_block+0x2fe>
                            gc_block.modal.motion = (motion_mode_t)int_value;
 800dd14:	4baf      	ldr	r3, [pc, #700]	@ (800dfd4 <gc_execute_block+0x59c>)
 800dd16:	811c      	strh	r4, [r3, #8]
                        gc_block.modal.canned_cycle_active = false;
 800dd18:	4bae      	ldr	r3, [pc, #696]	@ (800dfd4 <gc_execute_block+0x59c>)
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
                if (mantissa > 0)
 800dd20:	2900      	cmp	r1, #0
 800dd22:	f043 8476 	bne.w	8011612 <gc_execute_block+0x3bda>
                if (command_words.mask & word_bit.modal_group.mask)
 800dd26:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800dd28:	421f      	tst	r7, r3
 800dd2a:	f043 8475 	bne.w	8011618 <gc_execute_block+0x3be0>
                command_words.mask |= word_bit.modal_group.mask;
 800dd2e:	431f      	orrs	r7, r3
                is_user_mcode = false;
 800dd30:	f04f 0900 	mov.w	r9, #0
                break;
 800dd34:	e346      	b.n	800e3c4 <gc_execute_block+0x98c>
                        if(int_value == 5 && mantissa != 0) {
 800dd36:	2900      	cmp	r1, #0
 800dd38:	d0ec      	beq.n	800dd14 <gc_execute_block+0x2dc>
                            if(mantissa == 10) {
 800dd3a:	290a      	cmp	r1, #10
 800dd3c:	f043 844e 	bne.w	80115dc <gc_execute_block+0x3ba4>
                                gc_block.modal.motion = MotionMode_QuadraticSpline;
 800dd40:	4ba4      	ldr	r3, [pc, #656]	@ (800dfd4 <gc_execute_block+0x59c>)
 800dd42:	2233      	movs	r2, #51	@ 0x33
 800dd44:	811a      	strh	r2, [r3, #8]
                                mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800dd46:	2100      	movs	r1, #0
                            if(mantissa == 10) {
 800dd48:	e7e6      	b.n	800dd18 <gc_execute_block+0x2e0>
                        if (axis_command)
 800dd4a:	f1ba 0f00 	cmp.w	sl, #0
 800dd4e:	f043 8448 	bne.w	80115e2 <gc_execute_block+0x3baa>
                        word_bit.modal_group.G1 = On;
 800dd52:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800dd56:	f043 0302 	orr.w	r3, r3, #2
 800dd5a:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.canned_cycle_active = true;
 800dd5e:	4a9d      	ldr	r2, [pc, #628]	@ (800dfd4 <gc_execute_block+0x59c>)
 800dd60:	2301      	movs	r3, #1
 800dd62:	f882 3027 	strb.w	r3, [r2, #39]	@ 0x27
                        gc_block.modal.motion = (motion_mode_t)int_value;
 800dd66:	b2a3      	uxth	r3, r4
 800dd68:	8113      	strh	r3, [r2, #8]
                        gc_parser_flags.canned_cycle_change = gc_block.modal.motion != gc_state.modal.motion;
 800dd6a:	4a9b      	ldr	r2, [pc, #620]	@ (800dfd8 <gc_execute_block+0x5a0>)
 800dd6c:	8812      	ldrh	r2, [r2, #0]
 800dd6e:	1a9b      	subs	r3, r3, r2
 800dd70:	bf18      	it	ne
 800dd72:	2301      	movne	r3, #1
 800dd74:	f363 0841 	bfi	r8, r3, #1, #1
                        axis_command = AxisCommand_MotionMode;
 800dd78:	f04f 0a02 	mov.w	sl, #2
                        break;
 800dd7c:	e7d0      	b.n	800dd20 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G2 = On;
 800dd7e:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800dd82:	f043 0304 	orr.w	r3, r3, #4
 800dd86:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.plane_select = (plane_select_t)(int_value - 17);
 800dd8a:	b2e3      	uxtb	r3, r4
 800dd8c:	3b11      	subs	r3, #17
 800dd8e:	4a91      	ldr	r2, [pc, #580]	@ (800dfd4 <gc_execute_block+0x59c>)
 800dd90:	7393      	strb	r3, [r2, #14]
                        break;
 800dd92:	e7c5      	b.n	800dd20 <gc_execute_block+0x2e8>
                        if (mantissa == 0) {
 800dd94:	b961      	cbnz	r1, 800ddb0 <gc_execute_block+0x378>
                            word_bit.modal_group.G3 = On;
 800dd96:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800dd9a:	f043 0308 	orr.w	r3, r3, #8
 800dd9e:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                            gc_block.modal.distance_incremental = int_value == 91;
 800dda2:	2c5b      	cmp	r4, #91	@ 0x5b
 800dda4:	bf14      	ite	ne
 800dda6:	2200      	movne	r2, #0
 800dda8:	2201      	moveq	r2, #1
 800ddaa:	4b8a      	ldr	r3, [pc, #552]	@ (800dfd4 <gc_execute_block+0x59c>)
 800ddac:	731a      	strb	r2, [r3, #12]
 800ddae:	e7b7      	b.n	800dd20 <gc_execute_block+0x2e8>
                            word_bit.modal_group.G4 = On;
 800ddb0:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800ddb4:	f043 0310 	orr.w	r3, r3, #16
 800ddb8:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                            if ((mantissa != 10) || (int_value == 90))
 800ddbc:	290a      	cmp	r1, #10
 800ddbe:	f043 8413 	bne.w	80115e8 <gc_execute_block+0x3bb0>
 800ddc2:	2c5a      	cmp	r4, #90	@ 0x5a
 800ddc4:	f003 8413 	beq.w	80115ee <gc_execute_block+0x3bb6>
                            mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800ddc8:	2100      	movs	r1, #0
 800ddca:	e7a9      	b.n	800dd20 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G5 = On;
 800ddcc:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800ddd0:	f043 0320 	orr.w	r3, r3, #32
 800ddd4:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.feed_mode = (feed_mode_t)(94 - int_value);
 800ddd8:	b2e3      	uxtb	r3, r4
 800ddda:	f1c3 035e 	rsb	r3, r3, #94	@ 0x5e
 800ddde:	4a7d      	ldr	r2, [pc, #500]	@ (800dfd4 <gc_execute_block+0x59c>)
 800dde0:	7293      	strb	r3, [r2, #10]
                        break;
 800dde2:	e79d      	b.n	800dd20 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G5 = On;
 800dde4:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800dde8:	f043 0320 	orr.w	r3, r3, #32
 800ddec:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.feed_mode = FeedMode_UnitsPerRev;
 800ddf0:	4b78      	ldr	r3, [pc, #480]	@ (800dfd4 <gc_execute_block+0x59c>)
 800ddf2:	2202      	movs	r2, #2
 800ddf4:	729a      	strb	r2, [r3, #10]
                        break;
 800ddf6:	e793      	b.n	800dd20 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G6 = On;
 800ddf8:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800ddfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de00:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.units_imperial = int_value == 20;
 800de04:	2c14      	cmp	r4, #20
 800de06:	bf14      	ite	ne
 800de08:	2200      	movne	r2, #0
 800de0a:	2201      	moveq	r2, #1
 800de0c:	4b71      	ldr	r3, [pc, #452]	@ (800dfd4 <gc_execute_block+0x59c>)
 800de0e:	72da      	strb	r2, [r3, #11]
                        break;
 800de10:	e786      	b.n	800dd20 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G7 = On;
 800de12:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800de16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de1a:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        break;
 800de1e:	e77f      	b.n	800dd20 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G8 = On;
 800de20:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800de24:	f043 0301 	orr.w	r3, r3, #1
 800de28:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        if(int_value == 49) // G49
 800de2c:	2c31      	cmp	r4, #49	@ 0x31
 800de2e:	d007      	beq.n	800de40 <gc_execute_block+0x408>
                        else if(mantissa == 0 && grbl.tool_table.n_tools) // G43
 800de30:	b959      	cbnz	r1, 800de4a <gc_execute_block+0x412>
 800de32:	4b6a      	ldr	r3, [pc, #424]	@ (800dfdc <gc_execute_block+0x5a4>)
 800de34:	699b      	ldr	r3, [r3, #24]
 800de36:	b143      	cbz	r3, 800de4a <gc_execute_block+0x412>
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_Enable;
 800de38:	4b66      	ldr	r3, [pc, #408]	@ (800dfd4 <gc_execute_block+0x59c>)
 800de3a:	2201      	movs	r2, #1
 800de3c:	73da      	strb	r2, [r3, #15]
 800de3e:	e76f      	b.n	800dd20 <gc_execute_block+0x2e8>
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_Cancel;
 800de40:	2300      	movs	r3, #0
 800de42:	4a64      	ldr	r2, [pc, #400]	@ (800dfd4 <gc_execute_block+0x59c>)
 800de44:	73d3      	strb	r3, [r2, #15]
                        mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800de46:	4619      	mov	r1, r3
 800de48:	e76a      	b.n	800dd20 <gc_execute_block+0x2e8>
                        else if(mantissa == 20 && grbl.tool_table.n_tools) // G43.2
 800de4a:	2914      	cmp	r1, #20
 800de4c:	d00d      	beq.n	800de6a <gc_execute_block+0x432>
                        else if(mantissa == 10) { // G43.1
 800de4e:	290a      	cmp	r1, #10
 800de50:	f043 83d0 	bne.w	80115f4 <gc_execute_block+0x3bbc>
                            if(axis_command)
 800de54:	f1ba 0f00 	cmp.w	sl, #0
 800de58:	f043 83cf 	bne.w	80115fa <gc_execute_block+0x3bc2>
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_EnableDynamic;
 800de5c:	4b5d      	ldr	r3, [pc, #372]	@ (800dfd4 <gc_execute_block+0x59c>)
 800de5e:	2202      	movs	r2, #2
 800de60:	73da      	strb	r2, [r3, #15]
                        mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800de62:	2100      	movs	r1, #0
                            axis_command = AxisCommand_ToolLengthOffset;
 800de64:	f04f 0a03 	mov.w	sl, #3
 800de68:	e75a      	b.n	800dd20 <gc_execute_block+0x2e8>
                        else if(mantissa == 20 && grbl.tool_table.n_tools) // G43.2
 800de6a:	4b5c      	ldr	r3, [pc, #368]	@ (800dfdc <gc_execute_block+0x5a4>)
 800de6c:	699b      	ldr	r3, [r3, #24]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d0ed      	beq.n	800de4e <gc_execute_block+0x416>
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_ApplyAdditional;
 800de72:	4b58      	ldr	r3, [pc, #352]	@ (800dfd4 <gc_execute_block+0x59c>)
 800de74:	2203      	movs	r2, #3
 800de76:	73da      	strb	r2, [r3, #15]
                        mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800de78:	2100      	movs	r1, #0
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_ApplyAdditional;
 800de7a:	e751      	b.n	800dd20 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G12 = On;
 800de7c:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800de80:	f043 0308 	orr.w	r3, r3, #8
 800de84:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        gc_block.modal.coord_system.id = (coord_system_id_t)(int_value - 54); // Shift to array indexing.
 800de88:	b2e2      	uxtb	r2, r4
 800de8a:	3a36      	subs	r2, #54	@ 0x36
 800de8c:	b2d2      	uxtb	r2, r2
 800de8e:	4b51      	ldr	r3, [pc, #324]	@ (800dfd4 <gc_execute_block+0x59c>)
 800de90:	771a      	strb	r2, [r3, #28]
                        if(int_value == 59 && mantissa > 0) {
 800de92:	2c3b      	cmp	r4, #59	@ 0x3b
 800de94:	f47f af44 	bne.w	800dd20 <gc_execute_block+0x2e8>
 800de98:	291e      	cmp	r1, #30
 800de9a:	f203 83b1 	bhi.w	8011600 <gc_execute_block+0x3bc8>
 800de9e:	a301      	add	r3, pc, #4	@ (adr r3, 800dea4 <gc_execute_block+0x46c>)
 800dea0:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800dea4:	0800dd21 	.word	0x0800dd21
 800dea8:	08011601 	.word	0x08011601
 800deac:	08011601 	.word	0x08011601
 800deb0:	08011601 	.word	0x08011601
 800deb4:	08011601 	.word	0x08011601
 800deb8:	08011601 	.word	0x08011601
 800debc:	08011601 	.word	0x08011601
 800dec0:	08011601 	.word	0x08011601
 800dec4:	08011601 	.word	0x08011601
 800dec8:	08011601 	.word	0x08011601
 800decc:	0800df21 	.word	0x0800df21
 800ded0:	08011601 	.word	0x08011601
 800ded4:	08011601 	.word	0x08011601
 800ded8:	08011601 	.word	0x08011601
 800dedc:	08011601 	.word	0x08011601
 800dee0:	08011601 	.word	0x08011601
 800dee4:	08011601 	.word	0x08011601
 800dee8:	08011601 	.word	0x08011601
 800deec:	08011601 	.word	0x08011601
 800def0:	08011601 	.word	0x08011601
 800def4:	0800df21 	.word	0x0800df21
 800def8:	08011601 	.word	0x08011601
 800defc:	08011601 	.word	0x08011601
 800df00:	08011601 	.word	0x08011601
 800df04:	08011601 	.word	0x08011601
 800df08:	08011601 	.word	0x08011601
 800df0c:	08011601 	.word	0x08011601
 800df10:	08011601 	.word	0x08011601
 800df14:	08011601 	.word	0x08011601
 800df18:	08011601 	.word	0x08011601
 800df1c:	0800df21 	.word	0x0800df21
                                gc_block.modal.coord_system.id += mantissa / 10;
 800df20:	4b2b      	ldr	r3, [pc, #172]	@ (800dfd0 <gc_execute_block+0x598>)
 800df22:	fba3 1301 	umull	r1, r3, r3, r1
 800df26:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 800df2a:	4b2a      	ldr	r3, [pc, #168]	@ (800dfd4 <gc_execute_block+0x59c>)
 800df2c:	771a      	strb	r2, [r3, #28]
                                mantissa = 0;
 800df2e:	2100      	movs	r1, #0
 800df30:	e6f6      	b.n	800dd20 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G13 = On;
 800df32:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800df36:	f043 0310 	orr.w	r3, r3, #16
 800df3a:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        if (mantissa != 0) // [G61.1 not supported]
 800df3e:	2900      	cmp	r1, #0
 800df40:	f43f aeee 	beq.w	800dd20 <gc_execute_block+0x2e8>
                            FAIL(Status_GcodeUnsupportedCommand);
 800df44:	2414      	movs	r4, #20
 800df46:	e654      	b.n	800dbf2 <gc_execute_block+0x1ba>
                        word_bit.modal_group.G0 = On;
 800df48:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800df4c:	f043 0301 	orr.w	r3, r3, #1
 800df50:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.non_modal_command = (non_modal_t)int_value;
 800df54:	4b1f      	ldr	r3, [pc, #124]	@ (800dfd4 <gc_execute_block+0x59c>)
 800df56:	701c      	strb	r4, [r3, #0]
                        if(mantissa != 0 || grbl.on_macro_execute == NULL)
 800df58:	2900      	cmp	r1, #0
 800df5a:	f043 8354 	bne.w	8011606 <gc_execute_block+0x3bce>
 800df5e:	4b1f      	ldr	r3, [pc, #124]	@ (800dfdc <gc_execute_block+0x5a4>)
 800df60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df64:	2b00      	cmp	r3, #0
 800df66:	f47f aedb 	bne.w	800dd20 <gc_execute_block+0x2e8>
                            FAIL(Status_GcodeUnsupportedCommand);
 800df6a:	2414      	movs	r4, #20
 800df6c:	e641      	b.n	800dbf2 <gc_execute_block+0x1ba>
                        if(settings.mode == Mode_Lathe) {
 800df6e:	4b1c      	ldr	r3, [pc, #112]	@ (800dfe0 <gc_execute_block+0x5a8>)
 800df70:	7e1b      	ldrb	r3, [r3, #24]
 800df72:	2b02      	cmp	r3, #2
 800df74:	f043 834a 	bne.w	801160c <gc_execute_block+0x3bd4>
                            word_bit.modal_group.G14 = On;
 800df78:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800df7c:	f043 0320 	orr.w	r3, r3, #32
 800df80:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                            gc_block.modal.spindle.rpm_mode = (spindle_rpm_mode_t)((int_value - 96) ^ 1);
 800df84:	f1a4 0360 	sub.w	r3, r4, #96	@ 0x60
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	f083 0301 	eor.w	r3, r3, #1
 800df8e:	4a11      	ldr	r2, [pc, #68]	@ (800dfd4 <gc_execute_block+0x59c>)
 800df90:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
                        break;
 800df94:	e6c4      	b.n	800dd20 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G10 = On;
 800df96:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800df9a:	f043 0302 	orr.w	r3, r3, #2
 800df9e:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        gc_block.modal.retract_mode = (cc_retract_mode_t)(int_value - 98);
 800dfa2:	b2e3      	uxtb	r3, r4
 800dfa4:	3b62      	subs	r3, #98	@ 0x62
 800dfa6:	4a0b      	ldr	r2, [pc, #44]	@ (800dfd4 <gc_execute_block+0x59c>)
 800dfa8:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
                        break;
 800dfac:	e6b8      	b.n	800dd20 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G11 = On;
 800dfae:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800dfb2:	f043 0304 	orr.w	r3, r3, #4
 800dfb6:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        gc_block.modal.scaling_active = int_value == 51;
 800dfba:	2c33      	cmp	r4, #51	@ 0x33
 800dfbc:	bf14      	ite	ne
 800dfbe:	2200      	movne	r2, #0
 800dfc0:	2201      	moveq	r2, #1
 800dfc2:	4b04      	ldr	r3, [pc, #16]	@ (800dfd4 <gc_execute_block+0x59c>)
 800dfc4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                        axis_command = AxisCommand_Scaling;
 800dfc8:	f04f 0a04 	mov.w	sl, #4
                        break;
 800dfcc:	e6a8      	b.n	800dd20 <gc_execute_block+0x2e8>
 800dfce:	bf00      	nop
 800dfd0:	cccccccd 	.word	0xcccccccd
 800dfd4:	2000150c 	.word	0x2000150c
 800dfd8:	20001614 	.word	0x20001614
 800dfdc:	20001ac4 	.word	0x20001ac4
 800dfe0:	200022f4 	.word	0x200022f4
                if(gc_block.non_modal_command == NonModal_MacroCall) {
 800dfe4:	4ba4      	ldr	r3, [pc, #656]	@ (800e278 <gc_execute_block+0x840>)
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	2b41      	cmp	r3, #65	@ 0x41
 800dfea:	d06d      	beq.n	800e0c8 <gc_execute_block+0x690>
                if(mantissa > 0)
 800dfec:	2900      	cmp	r1, #0
 800dfee:	f043 8319 	bne.w	8011624 <gc_execute_block+0x3bec>
                word_bit.modal_group.mask = 0;
 800dff2:	2300      	movs	r3, #0
 800dff4:	931f      	str	r3, [sp, #124]	@ 0x7c
                switch(int_value) {
 800dff6:	2c63      	cmp	r4, #99	@ 0x63
 800dff8:	f200 81b0 	bhi.w	800e35c <gc_execute_block+0x924>
 800dffc:	e8df f014 	tbh	[pc, r4, lsl #1]
 800e000:	00750075 	.word	0x00750075
 800e004:	00af0075 	.word	0x00af0075
 800e008:	00af00af 	.word	0x00af00af
 800e00c:	00ec00d2 	.word	0x00ec00d2
 800e010:	00ec00ec 	.word	0x00ec00ec
 800e014:	01ae01ae 	.word	0x01ae01ae
 800e018:	01ae01ae 	.word	0x01ae01ae
 800e01c:	01ae01ae 	.word	0x01ae01ae
 800e020:	01ae01ae 	.word	0x01ae01ae
 800e024:	01ae01ae 	.word	0x01ae01ae
 800e028:	01ae01ae 	.word	0x01ae01ae
 800e02c:	01ae01ae 	.word	0x01ae01ae
 800e030:	01ae01ae 	.word	0x01ae01ae
 800e034:	01ae01ae 	.word	0x01ae01ae
 800e038:	01ae01ae 	.word	0x01ae01ae
 800e03c:	01ae0075 	.word	0x01ae0075
 800e040:	01ae01ae 	.word	0x01ae01ae
 800e044:	01ae01ae 	.word	0x01ae01ae
 800e048:	01ae01ae 	.word	0x01ae01ae
 800e04c:	01ae01ae 	.word	0x01ae01ae
 800e050:	01ae01ae 	.word	0x01ae01ae
 800e054:	01ae01ae 	.word	0x01ae01ae
 800e058:	01ae01ae 	.word	0x01ae01ae
 800e05c:	01ae01ae 	.word	0x01ae01ae
 800e060:	012c012c 	.word	0x012c012c
 800e064:	012c012c 	.word	0x012c012c
 800e068:	012c01ae 	.word	0x012c01ae
 800e06c:	01ae01ae 	.word	0x01ae01ae
 800e070:	01ae0125 	.word	0x01ae0125
 800e074:	01ae01ae 	.word	0x01ae01ae
 800e078:	01440075 	.word	0x01440075
 800e07c:	014f014f 	.word	0x014f014f
 800e080:	014f014f 	.word	0x014f014f
 800e084:	017e0166 	.word	0x017e0166
 800e088:	01ae017e 	.word	0x01ae017e
 800e08c:	01950195 	.word	0x01950195
 800e090:	01950195 	.word	0x01950195
 800e094:	01ae01ae 	.word	0x01ae01ae
 800e098:	01ae01ae 	.word	0x01ae01ae
 800e09c:	01ae01ae 	.word	0x01ae01ae
 800e0a0:	01ae01ae 	.word	0x01ae01ae
 800e0a4:	01ae01ae 	.word	0x01ae01ae
 800e0a8:	01ae01ae 	.word	0x01ae01ae
 800e0ac:	01ae01ae 	.word	0x01ae01ae
 800e0b0:	01ae01ae 	.word	0x01ae01ae
 800e0b4:	01ae01ae 	.word	0x01ae01ae
 800e0b8:	01ae01ae 	.word	0x01ae01ae
 800e0bc:	01ae01ae 	.word	0x01ae01ae
 800e0c0:	01ae01ae 	.word	0x01ae01ae
 800e0c4:	019b01ae 	.word	0x019b01ae
                    if(gc_block.words.m)
 800e0c8:	4b6b      	ldr	r3, [pc, #428]	@ (800e278 <gc_execute_block+0x840>)
 800e0ca:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800e0ce:	f013 0f20 	tst.w	r3, #32
 800e0d2:	f043 82a4 	bne.w	801161e <gc_execute_block+0x3be6>
                    gc_block.values.m = value;
 800e0d6:	4b68      	ldr	r3, [pc, #416]	@ (800e278 <gc_execute_block+0x840>)
 800e0d8:	ed83 8a16 	vstr	s16, [r3, #88]	@ 0x58
                    gc_block.words.m = On; // Flag to indicate parameter assigned.
 800e0dc:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800e0e0:	f042 0220 	orr.w	r2, r2, #32
 800e0e4:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
                    continue;
 800e0e8:	e16c      	b.n	800e3c4 <gc_execute_block+0x98c>
                        word_bit.modal_group.M4 = On;
 800e0ea:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800e0ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0f2:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        switch(int_value) {
 800e0f6:	b13c      	cbz	r4, 800e108 <gc_execute_block+0x6d0>
 800e0f8:	2c01      	cmp	r4, #1
 800e0fa:	d00c      	beq.n	800e116 <gc_execute_block+0x6de>
                                gc_block.modal.program_flow = (program_flow_t)int_value;
 800e0fc:	4b5e      	ldr	r3, [pc, #376]	@ (800e278 <gc_execute_block+0x840>)
 800e0fe:	f883 4020 	strb.w	r4, [r3, #32]
                is_user_mcode = false;
 800e102:	f04f 0900 	mov.w	r9, #0
 800e106:	e0b1      	b.n	800e26c <gc_execute_block+0x834>
                                gc_block.modal.program_flow = ProgramFlow_Paused;
 800e108:	4b5b      	ldr	r3, [pc, #364]	@ (800e278 <gc_execute_block+0x840>)
 800e10a:	2203      	movs	r2, #3
 800e10c:	f883 2020 	strb.w	r2, [r3, #32]
                is_user_mcode = false;
 800e110:	f04f 0900 	mov.w	r9, #0
                                break;
 800e114:	e0aa      	b.n	800e26c <gc_execute_block+0x834>
                                if(hal.signals_cap.stop_disable ? !hal.control.get_state().stop_disable : !sys.flags.optional_stop_disable)
 800e116:	4b59      	ldr	r3, [pc, #356]	@ (800e27c <gc_execute_block+0x844>)
 800e118:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 800e11c:	f013 0f20 	tst.w	r3, #32
 800e120:	d013      	beq.n	800e14a <gc_execute_block+0x712>
 800e122:	4b56      	ldr	r3, [pc, #344]	@ (800e27c <gc_execute_block+0x844>)
 800e124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e126:	4798      	blx	r3
 800e128:	f3c0 1942 	ubfx	r9, r0, #5, #3
 800e12c:	f089 0901 	eor.w	r9, r9, #1
 800e130:	f009 0901 	and.w	r9, r9, #1
 800e134:	f1b9 0f00 	cmp.w	r9, #0
 800e138:	f000 8098 	beq.w	800e26c <gc_execute_block+0x834>
                                    gc_block.modal.program_flow = ProgramFlow_OptionalStop;
 800e13c:	4b4e      	ldr	r3, [pc, #312]	@ (800e278 <gc_execute_block+0x840>)
 800e13e:	2201      	movs	r2, #1
 800e140:	f883 2020 	strb.w	r2, [r3, #32]
                is_user_mcode = false;
 800e144:	f04f 0900 	mov.w	r9, #0
 800e148:	e090      	b.n	800e26c <gc_execute_block+0x834>
                                if(hal.signals_cap.stop_disable ? !hal.control.get_state().stop_disable : !sys.flags.optional_stop_disable)
 800e14a:	4b4d      	ldr	r3, [pc, #308]	@ (800e280 <gc_execute_block+0x848>)
 800e14c:	f893 9016 	ldrb.w	r9, [r3, #22]
 800e150:	ea4f 1999 	mov.w	r9, r9, lsr #6
 800e154:	f089 0901 	eor.w	r9, r9, #1
 800e158:	f009 0901 	and.w	r9, r9, #1
 800e15c:	e7ea      	b.n	800e134 <gc_execute_block+0x6fc>
                        word_bit.modal_group.M7 = On;
 800e15e:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800e162:	f043 0302 	orr.w	r3, r3, #2
 800e166:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        gc_block.modal.spindle.state.on = !(int_value == 5);
 800e16a:	1f61      	subs	r1, r4, #5
 800e16c:	bf18      	it	ne
 800e16e:	2101      	movne	r1, #1
 800e170:	4b41      	ldr	r3, [pc, #260]	@ (800e278 <gc_execute_block+0x840>)
 800e172:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800e176:	f361 0200 	bfi	r2, r1, #0, #1
 800e17a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                        gc_block.modal.spindle.state.ccw = int_value == 4;
 800e17e:	2c04      	cmp	r4, #4
 800e180:	bf14      	ite	ne
 800e182:	2100      	movne	r1, #0
 800e184:	2101      	moveq	r1, #1
 800e186:	b2d2      	uxtb	r2, r2
 800e188:	f361 0241 	bfi	r2, r1, #1, #1
 800e18c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                        sys.override_delay.spindle = On;
 800e190:	4a3b      	ldr	r2, [pc, #236]	@ (800e280 <gc_execute_block+0x848>)
 800e192:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800e196:	f043 0304 	orr.w	r3, r3, #4
 800e19a:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
                is_user_mcode = false;
 800e19e:	f04f 0900 	mov.w	r9, #0
                        break;
 800e1a2:	e063      	b.n	800e26c <gc_execute_block+0x834>
                        if(settings.tool_change.mode != ToolChange_Ignore) {
 800e1a4:	4b37      	ldr	r3, [pc, #220]	@ (800e284 <gc_execute_block+0x84c>)
 800e1a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e1aa:	2b04      	cmp	r3, #4
 800e1ac:	f000 80ea 	beq.w	800e384 <gc_execute_block+0x94c>
                            if(hal.stream.suspend_read || hal.tool.change)
 800e1b0:	4b32      	ldr	r3, [pc, #200]	@ (800e27c <gc_execute_block+0x844>)
 800e1b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800e1b6:	b143      	cbz	r3, 800e1ca <gc_execute_block+0x792>
                                word_bit.modal_group.M6 = On;
 800e1b8:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800e1bc:	f043 0301 	orr.w	r3, r3, #1
 800e1c0:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                is_user_mcode = false;
 800e1c4:	f04f 0900 	mov.w	r9, #0
                                word_bit.modal_group.M6 = On;
 800e1c8:	e050      	b.n	800e26c <gc_execute_block+0x834>
                            if(hal.stream.suspend_read || hal.tool.change)
 800e1ca:	4b2c      	ldr	r3, [pc, #176]	@ (800e27c <gc_execute_block+0x844>)
 800e1cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d1f1      	bne.n	800e1b8 <gc_execute_block+0x780>
                                FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 800e1d4:	2414      	movs	r4, #20
 800e1d6:	e50c      	b.n	800dbf2 <gc_execute_block+0x1ba>
                        word_bit.modal_group.M8 = On;
 800e1d8:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800e1dc:	f043 0304 	orr.w	r3, r3, #4
 800e1e0:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        sys.override_delay.coolant = On;
 800e1e4:	4a26      	ldr	r2, [pc, #152]	@ (800e280 <gc_execute_block+0x848>)
 800e1e6:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800e1ea:	f043 0302 	orr.w	r3, r3, #2
 800e1ee:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
                        gc_parser_flags.set_coolant = On;
 800e1f2:	f448 7880 	orr.w	r8, r8, #256	@ 0x100
                        switch(int_value) {
 800e1f6:	2c08      	cmp	r4, #8
 800e1f8:	d017      	beq.n	800e22a <gc_execute_block+0x7f2>
 800e1fa:	2c09      	cmp	r4, #9
 800e1fc:	d01f      	beq.n	800e23e <gc_execute_block+0x806>
 800e1fe:	2c07      	cmp	r4, #7
 800e200:	d002      	beq.n	800e208 <gc_execute_block+0x7d0>
 800e202:	f04f 0900 	mov.w	r9, #0
 800e206:	e031      	b.n	800e26c <gc_execute_block+0x834>
                                if(!hal.coolant_cap.mist)
 800e208:	4b1c      	ldr	r3, [pc, #112]	@ (800e27c <gc_execute_block+0x844>)
 800e20a:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800e20e:	f013 0f02 	tst.w	r3, #2
 800e212:	f003 820a 	beq.w	801162a <gc_execute_block+0x3bf2>
                                gc_block.modal.coolant.mist = On;
 800e216:	4a18      	ldr	r2, [pc, #96]	@ (800e278 <gc_execute_block+0x840>)
 800e218:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800e21c:	f043 0302 	orr.w	r3, r3, #2
 800e220:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
                is_user_mcode = false;
 800e224:	f04f 0900 	mov.w	r9, #0
                                break;
 800e228:	e020      	b.n	800e26c <gc_execute_block+0x834>
                                gc_block.modal.coolant.flood = On;
 800e22a:	4a13      	ldr	r2, [pc, #76]	@ (800e278 <gc_execute_block+0x840>)
 800e22c:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800e230:	f043 0301 	orr.w	r3, r3, #1
 800e234:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
                is_user_mcode = false;
 800e238:	f04f 0900 	mov.w	r9, #0
                                break;
 800e23c:	e016      	b.n	800e26c <gc_execute_block+0x834>
                                gc_block.modal.coolant.value = 0;
 800e23e:	f04f 0900 	mov.w	r9, #0
 800e242:	4b0d      	ldr	r3, [pc, #52]	@ (800e278 <gc_execute_block+0x840>)
 800e244:	f883 9021 	strb.w	r9, [r3, #33]	@ 0x21
                                break;
 800e248:	e010      	b.n	800e26c <gc_execute_block+0x834>
                        if(!settings.parking.flags.enable_override_control) // TODO: check if enabled?
 800e24a:	4b0e      	ldr	r3, [pc, #56]	@ (800e284 <gc_execute_block+0x84c>)
 800e24c:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800e250:	f013 0f04 	tst.w	r3, #4
 800e254:	f003 81ec 	beq.w	8011630 <gc_execute_block+0x3bf8>
                        word_bit.modal_group.M9 = On;
 800e258:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800e25c:	f043 0308 	orr.w	r3, r3, #8
 800e260:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        gc_block.override_command = (override_mode_t)int_value;
 800e264:	4b04      	ldr	r3, [pc, #16]	@ (800e278 <gc_execute_block+0x840>)
 800e266:	705c      	strb	r4, [r3, #1]
                is_user_mcode = false;
 800e268:	f04f 0900 	mov.w	r9, #0
                if (command_words.mask & word_bit.modal_group.mask)
 800e26c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e26e:	421f      	tst	r7, r3
 800e270:	f043 81f6 	bne.w	8011660 <gc_execute_block+0x3c28>
                command_words.mask |= word_bit.modal_group.mask;
 800e274:	431f      	orrs	r7, r3
                break;
 800e276:	e0a5      	b.n	800e3c4 <gc_execute_block+0x98c>
 800e278:	2000150c 	.word	0x2000150c
 800e27c:	200018dc 	.word	0x200018dc
 800e280:	20001bbc 	.word	0x20001bbc
 800e284:	200022f4 	.word	0x200022f4
                        word_bit.modal_group.M6 = On; //??
 800e288:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800e28c:	f043 0301 	orr.w	r3, r3, #1
 800e290:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                is_user_mcode = false;
 800e294:	f04f 0900 	mov.w	r9, #0
                        set_tool = true;
 800e298:	2301      	movs	r3, #1
 800e29a:	9307      	str	r3, [sp, #28]
                        break;
 800e29c:	e7e6      	b.n	800e26c <gc_execute_block+0x834>
                        if(hal.port.digital_out == NULL || hal.port.num_digital_out == 0)
 800e29e:	4bcc      	ldr	r3, [pc, #816]	@ (800e5d0 <gc_execute_block+0xb98>)
 800e2a0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	f003 81c6 	beq.w	8011636 <gc_execute_block+0x3bfe>
 800e2aa:	4bc9      	ldr	r3, [pc, #804]	@ (800e5d0 <gc_execute_block+0xb98>)
 800e2ac:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	f003 81c3 	beq.w	801163c <gc_execute_block+0x3c04>
                        word_bit.modal_group.M10 = On;
 800e2b6:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800e2ba:	f043 0310 	orr.w	r3, r3, #16
 800e2be:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        port_command = (io_mcode_t)int_value;
 800e2c2:	b2e3      	uxtb	r3, r4
 800e2c4:	9306      	str	r3, [sp, #24]
                is_user_mcode = false;
 800e2c6:	f04f 0900 	mov.w	r9, #0
                        break;
 800e2ca:	e7cf      	b.n	800e26c <gc_execute_block+0x834>
                        if(hal.port.wait_on_input == NULL || (hal.port.num_digital_in == 0 && hal.port.num_analog_in == 0))
 800e2cc:	4bc0      	ldr	r3, [pc, #768]	@ (800e5d0 <gc_execute_block+0xb98>)
 800e2ce:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	f003 81b5 	beq.w	8011642 <gc_execute_block+0x3c0a>
 800e2d8:	4bbd      	ldr	r3, [pc, #756]	@ (800e5d0 <gc_execute_block+0xb98>)
 800e2da:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800e2de:	f013 1fff 	tst.w	r3, #16711935	@ 0xff00ff
 800e2e2:	f003 81b1 	beq.w	8011648 <gc_execute_block+0x3c10>
                        word_bit.modal_group.M10 = On;
 800e2e6:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800e2ea:	f043 0310 	orr.w	r3, r3, #16
 800e2ee:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        port_command = (io_mcode_t)int_value;
 800e2f2:	b2e3      	uxtb	r3, r4
 800e2f4:	9306      	str	r3, [sp, #24]
                is_user_mcode = false;
 800e2f6:	f04f 0900 	mov.w	r9, #0
                        break;
 800e2fa:	e7b7      	b.n	800e26c <gc_execute_block+0x834>
                        if(hal.port.analog_out == NULL || hal.port.num_analog_out == 0)
 800e2fc:	4bb4      	ldr	r3, [pc, #720]	@ (800e5d0 <gc_execute_block+0xb98>)
 800e2fe:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800e302:	2b00      	cmp	r3, #0
 800e304:	f003 81a3 	beq.w	801164e <gc_execute_block+0x3c16>
 800e308:	4bb1      	ldr	r3, [pc, #708]	@ (800e5d0 <gc_execute_block+0xb98>)
 800e30a:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 800e30e:	2b00      	cmp	r3, #0
 800e310:	f003 81a0 	beq.w	8011654 <gc_execute_block+0x3c1c>
                        word_bit.modal_group.M10 = On;
 800e314:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800e318:	f043 0310 	orr.w	r3, r3, #16
 800e31c:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        port_command = (io_mcode_t)int_value;
 800e320:	b2e3      	uxtb	r3, r4
 800e322:	9306      	str	r3, [sp, #24]
                is_user_mcode = false;
 800e324:	f04f 0900 	mov.w	r9, #0
                        break;
 800e328:	e7a0      	b.n	800e26c <gc_execute_block+0x834>
                        gc_block.state_action = (modal_state_action_t)int_value;
 800e32a:	4baa      	ldr	r3, [pc, #680]	@ (800e5d4 <gc_execute_block+0xb9c>)
 800e32c:	f883 40d0 	strb.w	r4, [r3, #208]	@ 0xd0
                is_user_mcode = false;
 800e330:	f04f 0900 	mov.w	r9, #0
                        break;
 800e334:	e79a      	b.n	800e26c <gc_execute_block+0x834>
                        word_bit.modal_group.M4 = On;
 800e336:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800e33a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e33e:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        gc_block.modal.program_flow = ProgramFlow_Return;
 800e342:	4ba4      	ldr	r3, [pc, #656]	@ (800e5d4 <gc_execute_block+0xb9c>)
 800e344:	2263      	movs	r2, #99	@ 0x63
 800e346:	f883 2020 	strb.w	r2, [r3, #32]
                        if(grbl.on_macro_return == NULL)
 800e34a:	4ba3      	ldr	r3, [pc, #652]	@ (800e5d8 <gc_execute_block+0xba0>)
 800e34c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e350:	2b00      	cmp	r3, #0
 800e352:	f003 8182 	beq.w	801165a <gc_execute_block+0x3c22>
                is_user_mcode = false;
 800e356:	f04f 0900 	mov.w	r9, #0
 800e35a:	e787      	b.n	800e26c <gc_execute_block+0x834>
                        if(hal.user_mcode.check && (gc_block.user_mcode = hal.user_mcode.check((user_mcode_t)int_value))) {
 800e35c:	4b9c      	ldr	r3, [pc, #624]	@ (800e5d0 <gc_execute_block+0xb98>)
 800e35e:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800e362:	b16b      	cbz	r3, 800e380 <gc_execute_block+0x948>
 800e364:	b2a0      	uxth	r0, r4
 800e366:	4798      	blx	r3
 800e368:	4b9a      	ldr	r3, [pc, #616]	@ (800e5d4 <gc_execute_block+0xb9c>)
 800e36a:	8058      	strh	r0, [r3, #2]
 800e36c:	b140      	cbz	r0, 800e380 <gc_execute_block+0x948>
                            word_bit.modal_group.M10 = On;
 800e36e:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800e372:	f043 0310 	orr.w	r3, r3, #16
 800e376:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                            is_user_mcode = true;
 800e37a:	f04f 0901 	mov.w	r9, #1
                            word_bit.modal_group.M10 = On;
 800e37e:	e775      	b.n	800e26c <gc_execute_block+0x834>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 800e380:	2414      	movs	r4, #20
 800e382:	e436      	b.n	800dbf2 <gc_execute_block+0x1ba>
                is_user_mcode = false;
 800e384:	f04f 0900 	mov.w	r9, #0
 800e388:	e770      	b.n	800e26c <gc_execute_block+0x834>
                        word_bit.parameter.a = On;
 800e38a:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800e38e:	f043 0302 	orr.w	r3, r3, #2
 800e392:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.a = value;
 800e396:	4b8f      	ldr	r3, [pc, #572]	@ (800e5d4 <gc_execute_block+0xb9c>)
 800e398:	ed83 8a1b 	vstr	s16, [r3, #108]	@ 0x6c
                if (gc_block.words.mask & word_bit.parameter.mask)
 800e39c:	4b8d      	ldr	r3, [pc, #564]	@ (800e5d4 <gc_execute_block+0xb9c>)
 800e39e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e3a2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800e3a4:	4213      	tst	r3, r2
 800e3a6:	f043 8173 	bne.w	8011690 <gc_execute_block+0x3c58>
                if ((word_bit.parameter.mask & positive_only_words.mask) && value < 0.0f)
 800e3aa:	498c      	ldr	r1, [pc, #560]	@ (800e5dc <gc_execute_block+0xba4>)
 800e3ac:	420a      	tst	r2, r1
 800e3ae:	d005      	beq.n	800e3bc <gc_execute_block+0x984>
 800e3b0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3b8:	f103 816d 	bmi.w	8011696 <gc_execute_block+0x3c5e>
                gc_block.words.mask |= word_bit.parameter.mask; // Flag to indicate parameter assigned.
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	4a85      	ldr	r2, [pc, #532]	@ (800e5d4 <gc_execute_block+0xb9c>)
 800e3c0:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
    while ((letter = block[char_counter++]) != '\0') { // Loop until no more g-code words in block.
 800e3c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e3c6:	1c5a      	adds	r2, r3, #1
 800e3c8:	9221      	str	r2, [sp, #132]	@ 0x84
 800e3ca:	5cf5      	ldrb	r5, [r6, r3]
 800e3cc:	2d00      	cmp	r5, #0
 800e3ce:	f000 81fb 	beq.w	800e7c8 <gc_execute_block+0xd90>
        if((letter < 'A' && letter != '$') || letter > 'Z')
 800e3d2:	2d40      	cmp	r5, #64	@ 0x40
 800e3d4:	f63f ab8d 	bhi.w	800daf2 <gc_execute_block+0xba>
 800e3d8:	2d24      	cmp	r5, #36	@ 0x24
 800e3da:	f043 80d5 	bne.w	8011588 <gc_execute_block+0x3b50>
        if (!read_float(block, &char_counter, &value)) {
 800e3de:	aa20      	add	r2, sp, #128	@ 0x80
 800e3e0:	a921      	add	r1, sp, #132	@ 0x84
 800e3e2:	4630      	mov	r0, r6
 800e3e4:	f007 fcce 	bl	8015d84 <read_float>
 800e3e8:	b928      	cbnz	r0, 800e3f6 <gc_execute_block+0x9be>
            if(is_user_mcode)                   // Valueless parameters allowed for user defined M-codes.
 800e3ea:	f1b9 0f00 	cmp.w	r9, #0
 800e3ee:	f003 80ce 	beq.w	801158e <gc_execute_block+0x3b56>
                value = NAN;                    // Parameter validation deferred to implementation.
 800e3f2:	4b7b      	ldr	r3, [pc, #492]	@ (800e5e0 <gc_execute_block+0xba8>)
 800e3f4:	9320      	str	r3, [sp, #128]	@ 0x80
        if(isnan(value))
 800e3f6:	ed9d 8a20 	vldr	s16, [sp, #128]	@ 0x80
 800e3fa:	eeb4 8a48 	vcmp.f32	s16, s16
 800e3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e402:	f5bf ab7b 	bvs.w	800dafc <gc_execute_block+0xc4>
            int_value = (uint32_t)truncf(value);
 800e406:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800e40a:	ee17 4a90 	vmov	r4, s15
            mantissa = (uint_fast16_t)roundf(100.0f * (value - int_value));
 800e40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e412:	ee78 7a67 	vsub.f32	s15, s16, s15
 800e416:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 800e5e4 <gc_execute_block+0xbac>
 800e41a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e41e:	f019 fc77 	bl	8027d10 <roundf>
 800e422:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800e426:	ee17 1a90 	vmov	r1, s15
        switch(letter) {
 800e42a:	2d47      	cmp	r5, #71	@ 0x47
 800e42c:	f43f ab69 	beq.w	800db02 <gc_execute_block+0xca>
 800e430:	2d4d      	cmp	r5, #77	@ 0x4d
 800e432:	f43f add7 	beq.w	800dfe4 <gc_execute_block+0x5ac>
                word_bit.parameter.mask = 0;
 800e436:	2300      	movs	r3, #0
 800e438:	931e      	str	r3, [sp, #120]	@ 0x78
                switch(letter) {
 800e43a:	3d24      	subs	r5, #36	@ 0x24
 800e43c:	2d36      	cmp	r5, #54	@ 0x36
 800e43e:	f203 8112 	bhi.w	8011666 <gc_execute_block+0x3c2e>
 800e442:	a301      	add	r3, pc, #4	@ (adr r3, 800e448 <gc_execute_block+0xa10>)
 800e444:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 800e448:	0800e7ab 	.word	0x0800e7ab
 800e44c:	08011667 	.word	0x08011667
 800e450:	08011667 	.word	0x08011667
 800e454:	08011667 	.word	0x08011667
 800e458:	08011667 	.word	0x08011667
 800e45c:	08011667 	.word	0x08011667
 800e460:	08011667 	.word	0x08011667
 800e464:	08011667 	.word	0x08011667
 800e468:	08011667 	.word	0x08011667
 800e46c:	08011667 	.word	0x08011667
 800e470:	08011667 	.word	0x08011667
 800e474:	08011667 	.word	0x08011667
 800e478:	08011667 	.word	0x08011667
 800e47c:	08011667 	.word	0x08011667
 800e480:	08011667 	.word	0x08011667
 800e484:	08011667 	.word	0x08011667
 800e488:	08011667 	.word	0x08011667
 800e48c:	08011667 	.word	0x08011667
 800e490:	08011667 	.word	0x08011667
 800e494:	08011667 	.word	0x08011667
 800e498:	08011667 	.word	0x08011667
 800e49c:	08011667 	.word	0x08011667
 800e4a0:	08011667 	.word	0x08011667
 800e4a4:	08011667 	.word	0x08011667
 800e4a8:	08011667 	.word	0x08011667
 800e4ac:	08011667 	.word	0x08011667
 800e4b0:	08011667 	.word	0x08011667
 800e4b4:	08011667 	.word	0x08011667
 800e4b8:	08011667 	.word	0x08011667
 800e4bc:	0800e38b 	.word	0x0800e38b
 800e4c0:	0800e525 	.word	0x0800e525
 800e4c4:	0800e539 	.word	0x0800e539
 800e4c8:	0800e54d 	.word	0x0800e54d
 800e4cc:	0800e561 	.word	0x0800e561
 800e4d0:	0800e575 	.word	0x0800e575
 800e4d4:	08011667 	.word	0x08011667
 800e4d8:	0800e589 	.word	0x0800e589
 800e4dc:	0800e5b5 	.word	0x0800e5b5
 800e4e0:	0800e5e9 	.word	0x0800e5e9
 800e4e4:	0800e605 	.word	0x0800e605
 800e4e8:	0800e621 	.word	0x0800e621
 800e4ec:	08011667 	.word	0x08011667
 800e4f0:	0800e64b 	.word	0x0800e64b
 800e4f4:	0800e663 	.word	0x0800e663
 800e4f8:	0800e68f 	.word	0x0800e68f
 800e4fc:	0800e6a3 	.word	0x0800e6a3
 800e500:	0800e6b7 	.word	0x0800e6b7
 800e504:	0800e6cb 	.word	0x0800e6cb
 800e508:	0800e6df 	.word	0x0800e6df
 800e50c:	0800e727 	.word	0x0800e727
 800e510:	0800e73b 	.word	0x0800e73b
 800e514:	0800e74f 	.word	0x0800e74f
 800e518:	0800e763 	.word	0x0800e763
 800e51c:	0800e77b 	.word	0x0800e77b
 800e520:	0800e793 	.word	0x0800e793
                        word_bit.parameter.b = On;
 800e524:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800e528:	f043 0304 	orr.w	r3, r3, #4
 800e52c:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.b = value;
 800e530:	4b28      	ldr	r3, [pc, #160]	@ (800e5d4 <gc_execute_block+0xb9c>)
 800e532:	ed83 8a1c 	vstr	s16, [r3, #112]	@ 0x70
                        break;
 800e536:	e731      	b.n	800e39c <gc_execute_block+0x964>
                        word_bit.parameter.c = On;
 800e538:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800e53c:	f043 0308 	orr.w	r3, r3, #8
 800e540:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.c = value;
 800e544:	4b23      	ldr	r3, [pc, #140]	@ (800e5d4 <gc_execute_block+0xb9c>)
 800e546:	ed83 8a1d 	vstr	s16, [r3, #116]	@ 0x74
                        break;
 800e54a:	e727      	b.n	800e39c <gc_execute_block+0x964>
                        word_bit.parameter.d = On;
 800e54c:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800e550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e554:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.d = value;
 800e558:	4b1e      	ldr	r3, [pc, #120]	@ (800e5d4 <gc_execute_block+0xb9c>)
 800e55a:	ed83 8a0f 	vstr	s16, [r3, #60]	@ 0x3c
                        break;
 800e55e:	e71d      	b.n	800e39c <gc_execute_block+0x964>
                        word_bit.parameter.e = On;
 800e560:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800e564:	f043 0301 	orr.w	r3, r3, #1
 800e568:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.e = value;
 800e56c:	4b19      	ldr	r3, [pc, #100]	@ (800e5d4 <gc_execute_block+0xb9c>)
 800e56e:	ed83 8a10 	vstr	s16, [r3, #64]	@ 0x40
                        break;
 800e572:	e713      	b.n	800e39c <gc_execute_block+0x964>
                        word_bit.parameter.f = On;
 800e574:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800e578:	f043 0302 	orr.w	r3, r3, #2
 800e57c:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.f = value;
 800e580:	4b14      	ldr	r3, [pc, #80]	@ (800e5d4 <gc_execute_block+0xb9c>)
 800e582:	ed83 8a11 	vstr	s16, [r3, #68]	@ 0x44
                        break;
 800e586:	e709      	b.n	800e39c <gc_execute_block+0x964>
                        if (mantissa > 0)
 800e588:	2900      	cmp	r1, #0
 800e58a:	f043 806f 	bne.w	801166c <gc_execute_block+0x3c34>
                        word_bit.parameter.h = On;
 800e58e:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800e592:	f043 0308 	orr.w	r3, r3, #8
 800e596:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.h = isnan(value) ? 0xFFFFFFFF : int_value;
 800e59a:	eeb4 8a48 	vcmp.f32	s16, s16
 800e59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5a2:	d604      	bvs.n	800e5ae <gc_execute_block+0xb76>
 800e5a4:	4622      	mov	r2, r4
 800e5a6:	4b0b      	ldr	r3, [pc, #44]	@ (800e5d4 <gc_execute_block+0xb9c>)
 800e5a8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
                        break;
 800e5ac:	e6f6      	b.n	800e39c <gc_execute_block+0x964>
                        gc_block.values.h = isnan(value) ? 0xFFFFFFFF : int_value;
 800e5ae:	f04f 32ff 	mov.w	r2, #4294967295
 800e5b2:	e7f8      	b.n	800e5a6 <gc_execute_block+0xb6e>
                        ijk_words.i = On;
 800e5b4:	9b05      	ldr	r3, [sp, #20]
 800e5b6:	f043 0301 	orr.w	r3, r3, #1
 800e5ba:	9305      	str	r3, [sp, #20]
                        word_bit.parameter.i = On;
 800e5bc:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800e5c0:	f043 0310 	orr.w	r3, r3, #16
 800e5c4:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.ijk[I_VALUE] = value;
 800e5c8:	4b02      	ldr	r3, [pc, #8]	@ (800e5d4 <gc_execute_block+0xb9c>)
 800e5ca:	ed83 8a12 	vstr	s16, [r3, #72]	@ 0x48
                        break;
 800e5ce:	e6e5      	b.n	800e39c <gc_execute_block+0x964>
 800e5d0:	200018dc 	.word	0x200018dc
 800e5d4:	2000150c 	.word	0x2000150c
 800e5d8:	20001ac4 	.word	0x20001ac4
 800e5dc:	0018ca80 	.word	0x0018ca80
 800e5e0:	7fc00000 	.word	0x7fc00000
 800e5e4:	42c80000 	.word	0x42c80000
                        ijk_words.j = On;
 800e5e8:	9b05      	ldr	r3, [sp, #20]
 800e5ea:	f043 0302 	orr.w	r3, r3, #2
 800e5ee:	9305      	str	r3, [sp, #20]
                        word_bit.parameter.j = On;
 800e5f0:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800e5f4:	f043 0320 	orr.w	r3, r3, #32
 800e5f8:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.ijk[J_VALUE] = value;
 800e5fc:	4bb7      	ldr	r3, [pc, #732]	@ (800e8dc <gc_execute_block+0xea4>)
 800e5fe:	ed83 8a13 	vstr	s16, [r3, #76]	@ 0x4c
                        break;
 800e602:	e6cb      	b.n	800e39c <gc_execute_block+0x964>
                        ijk_words.k = On;
 800e604:	9b05      	ldr	r3, [sp, #20]
 800e606:	f043 0304 	orr.w	r3, r3, #4
 800e60a:	9305      	str	r3, [sp, #20]
                        word_bit.parameter.k = On;
 800e60c:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800e610:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e614:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.ijk[K_VALUE] = value;
 800e618:	4bb0      	ldr	r3, [pc, #704]	@ (800e8dc <gc_execute_block+0xea4>)
 800e61a:	ed83 8a14 	vstr	s16, [r3, #80]	@ 0x50
                        break;
 800e61e:	e6bd      	b.n	800e39c <gc_execute_block+0x964>
                        if (mantissa > 0)
 800e620:	2900      	cmp	r1, #0
 800e622:	f043 8026 	bne.w	8011672 <gc_execute_block+0x3c3a>
                        word_bit.parameter.l = On;
 800e626:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800e62a:	f043 0310 	orr.w	r3, r3, #16
 800e62e:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.l = isnan(value) ? 0xFF : (uint8_t)int_value;
 800e632:	eeb4 8a48 	vcmp.f32	s16, s16
 800e636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e63a:	d604      	bvs.n	800e646 <gc_execute_block+0xc0e>
 800e63c:	b2e2      	uxtb	r2, r4
 800e63e:	4ba7      	ldr	r3, [pc, #668]	@ (800e8dc <gc_execute_block+0xea4>)
 800e640:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                        break;
 800e644:	e6aa      	b.n	800e39c <gc_execute_block+0x964>
                        gc_block.values.l = isnan(value) ? 0xFF : (uint8_t)int_value;
 800e646:	22ff      	movs	r2, #255	@ 0xff
 800e648:	e7f9      	b.n	800e63e <gc_execute_block+0xc06>
                        word_bit.parameter.n = On;
 800e64a:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800e64e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e652:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.n = (int32_t)truncf(value);
 800e656:	4aa1      	ldr	r2, [pc, #644]	@ (800e8dc <gc_execute_block+0xea4>)
 800e658:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e65c:	edc2 7a29 	vstr	s15, [r2, #164]	@ 0xa4
                        break;
 800e660:	e69c      	b.n	800e39c <gc_execute_block+0x964>
                        if (mantissa > 0)
 800e662:	2900      	cmp	r1, #0
 800e664:	f043 8008 	bne.w	8011678 <gc_execute_block+0x3c40>
                        word_bit.parameter.o = On;
 800e668:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800e66c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e670:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.o = isnan(value) ? 0xFFFFFFFF : int_value;
 800e674:	eeb4 8a48 	vcmp.f32	s16, s16
 800e678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e67c:	d604      	bvs.n	800e688 <gc_execute_block+0xc50>
 800e67e:	4622      	mov	r2, r4
 800e680:	4b96      	ldr	r3, [pc, #600]	@ (800e8dc <gc_execute_block+0xea4>)
 800e682:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                        break;
 800e686:	e689      	b.n	800e39c <gc_execute_block+0x964>
                        gc_block.values.o = isnan(value) ? 0xFFFFFFFF : int_value;
 800e688:	f04f 32ff 	mov.w	r2, #4294967295
 800e68c:	e7f8      	b.n	800e680 <gc_execute_block+0xc48>
                        word_bit.parameter.p = On;
 800e68e:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800e692:	f043 0301 	orr.w	r3, r3, #1
 800e696:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.p = value;
 800e69a:	4b90      	ldr	r3, [pc, #576]	@ (800e8dc <gc_execute_block+0xea4>)
 800e69c:	ed83 8a17 	vstr	s16, [r3, #92]	@ 0x5c
                        break;
 800e6a0:	e67c      	b.n	800e39c <gc_execute_block+0x964>
                        word_bit.parameter.q = On;
 800e6a2:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800e6a6:	f043 0302 	orr.w	r3, r3, #2
 800e6aa:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.q = value;
 800e6ae:	4b8b      	ldr	r3, [pc, #556]	@ (800e8dc <gc_execute_block+0xea4>)
 800e6b0:	ed83 8a18 	vstr	s16, [r3, #96]	@ 0x60
                        break;
 800e6b4:	e672      	b.n	800e39c <gc_execute_block+0x964>
                        word_bit.parameter.r = On;
 800e6b6:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800e6ba:	f043 0304 	orr.w	r3, r3, #4
 800e6be:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.r = value;
 800e6c2:	4b86      	ldr	r3, [pc, #536]	@ (800e8dc <gc_execute_block+0xea4>)
 800e6c4:	ed83 8a19 	vstr	s16, [r3, #100]	@ 0x64
                        break;
 800e6c8:	e668      	b.n	800e39c <gc_execute_block+0x964>
                        word_bit.parameter.s = On;
 800e6ca:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800e6ce:	f043 0308 	orr.w	r3, r3, #8
 800e6d2:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.s = value;
 800e6d6:	4b81      	ldr	r3, [pc, #516]	@ (800e8dc <gc_execute_block+0xea4>)
 800e6d8:	ed83 8a1a 	vstr	s16, [r3, #104]	@ 0x68
                        break;
 800e6dc:	e65e      	b.n	800e39c <gc_execute_block+0x964>
                        if(mantissa > 0)
 800e6de:	2900      	cmp	r1, #0
 800e6e0:	f042 87cd 	bne.w	801167e <gc_execute_block+0x3c46>
                        if(int_value > (grbl.tool_table.n_tools ? grbl.tool_table.n_tools : MAX_TOOL_NUMBER))
 800e6e4:	4621      	mov	r1, r4
 800e6e6:	4b7e      	ldr	r3, [pc, #504]	@ (800e8e0 <gc_execute_block+0xea8>)
 800e6e8:	699b      	ldr	r3, [r3, #24]
 800e6ea:	b1ab      	cbz	r3, 800e718 <gc_execute_block+0xce0>
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	428b      	cmp	r3, r1
 800e6f0:	f172 0200 	sbcs.w	r2, r2, #0
 800e6f4:	f2c2 87c6 	blt.w	8011684 <gc_execute_block+0x3c4c>
                        word_bit.parameter.t = On;
 800e6f8:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800e6fc:	f043 0310 	orr.w	r3, r3, #16
 800e700:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.t = isnan(value) ? 0xFFFFFFFF : int_value;
 800e704:	eeb4 8a48 	vcmp.f32	s16, s16
 800e708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e70c:	d608      	bvs.n	800e720 <gc_execute_block+0xce8>
 800e70e:	4622      	mov	r2, r4
 800e710:	4b72      	ldr	r3, [pc, #456]	@ (800e8dc <gc_execute_block+0xea4>)
 800e712:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
                        break;
 800e716:	e641      	b.n	800e39c <gc_execute_block+0x964>
                        if(int_value > (grbl.tool_table.n_tools ? grbl.tool_table.n_tools : MAX_TOOL_NUMBER))
 800e718:	f06f 0301 	mvn.w	r3, #1
 800e71c:	2200      	movs	r2, #0
 800e71e:	e7e6      	b.n	800e6ee <gc_execute_block+0xcb6>
                        gc_block.values.t = isnan(value) ? 0xFFFFFFFF : int_value;
 800e720:	f04f 32ff 	mov.w	r2, #4294967295
 800e724:	e7f4      	b.n	800e710 <gc_execute_block+0xcd8>
                        word_bit.parameter.u = On;
 800e726:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800e72a:	f043 0320 	orr.w	r3, r3, #32
 800e72e:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.u = value;
 800e732:	4b6a      	ldr	r3, [pc, #424]	@ (800e8dc <gc_execute_block+0xea4>)
 800e734:	ed83 8a1e 	vstr	s16, [r3, #120]	@ 0x78
                        break;
 800e738:	e630      	b.n	800e39c <gc_execute_block+0x964>
                        word_bit.parameter.v = On;
 800e73a:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800e73e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e742:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.v = value;
 800e746:	4b65      	ldr	r3, [pc, #404]	@ (800e8dc <gc_execute_block+0xea4>)
 800e748:	ed83 8a1f 	vstr	s16, [r3, #124]	@ 0x7c
                        break;
 800e74c:	e626      	b.n	800e39c <gc_execute_block+0x964>
                        word_bit.parameter.w = On;
 800e74e:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800e752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e756:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.w = value;
 800e75a:	4b60      	ldr	r3, [pc, #384]	@ (800e8dc <gc_execute_block+0xea4>)
 800e75c:	ed83 8a20 	vstr	s16, [r3, #128]	@ 0x80
                        break;
 800e760:	e61c      	b.n	800e39c <gc_execute_block+0x964>
                        axis_words.x = On;
 800e762:	f04b 0b01 	orr.w	fp, fp, #1
                        word_bit.parameter.x = On;
 800e766:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800e76a:	f043 0301 	orr.w	r3, r3, #1
 800e76e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
                        gc_block.values.xyz[X_AXIS] = value;
 800e772:	4b5a      	ldr	r3, [pc, #360]	@ (800e8dc <gc_execute_block+0xea4>)
 800e774:	ed83 8a21 	vstr	s16, [r3, #132]	@ 0x84
                        break;
 800e778:	e610      	b.n	800e39c <gc_execute_block+0x964>
                        axis_words.y = On;
 800e77a:	f04b 0b02 	orr.w	fp, fp, #2
                        word_bit.parameter.y = On;
 800e77e:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800e782:	f043 0302 	orr.w	r3, r3, #2
 800e786:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
                        gc_block.values.xyz[Y_AXIS] = value;
 800e78a:	4b54      	ldr	r3, [pc, #336]	@ (800e8dc <gc_execute_block+0xea4>)
 800e78c:	ed83 8a22 	vstr	s16, [r3, #136]	@ 0x88
                        break;
 800e790:	e604      	b.n	800e39c <gc_execute_block+0x964>
                        axis_words.z = On;
 800e792:	f04b 0b04 	orr.w	fp, fp, #4
                        word_bit.parameter.z = On;
 800e796:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800e79a:	f043 0304 	orr.w	r3, r3, #4
 800e79e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
                        gc_block.values.xyz[Z_AXIS] = value;
 800e7a2:	4b4e      	ldr	r3, [pc, #312]	@ (800e8dc <gc_execute_block+0xea4>)
 800e7a4:	ed83 8a23 	vstr	s16, [r3, #140]	@ 0x8c
                        break;
 800e7a8:	e5f8      	b.n	800e39c <gc_execute_block+0x964>
                        if(mantissa > 0)
 800e7aa:	2900      	cmp	r1, #0
 800e7ac:	f042 876d 	bne.w	801168a <gc_execute_block+0x3c52>
                        word_bit.parameter.$ = On;
 800e7b0:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800e7b4:	f043 0301 	orr.w	r3, r3, #1
 800e7b8:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.$ = (int32_t)value;
 800e7bc:	4a47      	ldr	r2, [pc, #284]	@ (800e8dc <gc_execute_block+0xea4>)
 800e7be:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e7c2:	edc2 7a28 	vstr	s15, [r2, #160]	@ 0xa0
                        break;
 800e7c6:	e5e9      	b.n	800e39c <gc_execute_block+0x964>
    if (axis_words.mask && !axis_command)
 800e7c8:	fa5f f38b 	uxtb.w	r3, fp
 800e7cc:	b123      	cbz	r3, 800e7d8 <gc_execute_block+0xda0>
 800e7ce:	f1ba 0f00 	cmp.w	sl, #0
 800e7d2:	d101      	bne.n	800e7d8 <gc_execute_block+0xda0>
        axis_command = AxisCommand_MotionMode; // Assign implicit motion-mode
 800e7d4:	f04f 0a02 	mov.w	sl, #2
    if(gc_state.tool_change && axis_command == AxisCommand_MotionMode && !gc_parser_flags.jog_motion)
 800e7d8:	4b42      	ldr	r3, [pc, #264]	@ (800e8e4 <gc_execute_block+0xeac>)
 800e7da:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800e7de:	b113      	cbz	r3, 800e7e6 <gc_execute_block+0xdae>
 800e7e0:	f1ba 0f02 	cmp.w	sl, #2
 800e7e4:	d051      	beq.n	800e88a <gc_execute_block+0xe52>
    if (gc_block.words.n && gc_block.values.n > MAX_LINE_NUMBER)
 800e7e6:	4b3d      	ldr	r3, [pc, #244]	@ (800e8dc <gc_execute_block+0xea4>)
 800e7e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800e7ec:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800e7f0:	d006      	beq.n	800e800 <gc_execute_block+0xdc8>
 800e7f2:	4a3a      	ldr	r2, [pc, #232]	@ (800e8dc <gc_execute_block+0xea4>)
 800e7f4:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 800e7f8:	4a3b      	ldr	r2, [pc, #236]	@ (800e8e8 <gc_execute_block+0xeb0>)
 800e7fa:	4291      	cmp	r1, r2
 800e7fc:	f302 874e 	bgt.w	801169c <gc_execute_block+0x3c64>
    if (gc_parser_flags.jog_motion) {
 800e800:	f018 0f01 	tst.w	r8, #1
 800e804:	d047      	beq.n	800e896 <gc_execute_block+0xe5e>
        if(!gc_block.words.f)
 800e806:	f013 0f02 	tst.w	r3, #2
 800e80a:	f002 874a 	beq.w	80116a2 <gc_execute_block+0x3c6a>
        if (gc_block.modal.units_imperial)
 800e80e:	4b33      	ldr	r3, [pc, #204]	@ (800e8dc <gc_execute_block+0xea4>)
 800e810:	7adb      	ldrb	r3, [r3, #11]
 800e812:	b143      	cbz	r3, 800e826 <gc_execute_block+0xdee>
            gc_block.values.f *= MM_PER_INCH;
 800e814:	4b31      	ldr	r3, [pc, #196]	@ (800e8dc <gc_execute_block+0xea4>)
 800e816:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800e81a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e8ec <gc_execute_block+0xeb4>
 800e81e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e822:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    if(gc_block.words.$) {
 800e826:	4b2d      	ldr	r3, [pc, #180]	@ (800e8dc <gc_execute_block+0xea4>)
 800e828:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800e82c:	f013 0f01 	tst.w	r3, #1
 800e830:	f000 80de 	beq.w	800e9f0 <gc_execute_block+0xfb8>
        bool single_spindle_only = (gc_block.words.s && !user_words.s) ||
 800e834:	4b29      	ldr	r3, [pc, #164]	@ (800e8dc <gc_execute_block+0xea4>)
 800e836:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
                                      command_words.G14 ||
 800e83a:	f013 0f08 	tst.w	r3, #8
 800e83e:	d005      	beq.n	800e84c <gc_execute_block+0xe14>
        bool single_spindle_only = (gc_block.words.s && !user_words.s) ||
 800e840:	4b2b      	ldr	r3, [pc, #172]	@ (800e8f0 <gc_execute_block+0xeb8>)
 800e842:	789b      	ldrb	r3, [r3, #2]
 800e844:	f013 0f08 	tst.w	r3, #8
 800e848:	f000 808e 	beq.w	800e968 <gc_execute_block+0xf30>
 800e84c:	f017 0f01 	tst.w	r7, #1
 800e850:	d00c      	beq.n	800e86c <gc_execute_block+0xe34>
                                    (command_words.G0 && (gc_block.modal.motion == MotionMode_SpindleSynchronized ||
 800e852:	4b22      	ldr	r3, [pc, #136]	@ (800e8dc <gc_execute_block+0xea4>)
 800e854:	891b      	ldrh	r3, [r3, #8]
 800e856:	2b21      	cmp	r3, #33	@ 0x21
 800e858:	f000 8091 	beq.w	800e97e <gc_execute_block+0xf46>
 800e85c:	f240 124b 	movw	r2, #331	@ 0x14b
 800e860:	4293      	cmp	r3, r2
 800e862:	f000 808e 	beq.w	800e982 <gc_execute_block+0xf4a>
                                                           gc_block.modal.motion == MotionMode_RigidTapping ||
 800e866:	2b4c      	cmp	r3, #76	@ 0x4c
 800e868:	f000 808d 	beq.w	800e986 <gc_execute_block+0xf4e>
                                                            gc_block.modal.motion == MotionMode_Threading)) ||
 800e86c:	f417 5f00 	tst.w	r7, #8192	@ 0x2000
 800e870:	f040 808b 	bne.w	800e98a <gc_execute_block+0xf52>
                                      command_words.G14 ||
 800e874:	f417 2f00 	tst.w	r7, #524288	@ 0x80000
 800e878:	f000 8089 	beq.w	800e98e <gc_execute_block+0xf56>
                                       (command_words.M9 && gc_block.override_command == Override_SpindleSpeed);
 800e87c:	4b17      	ldr	r3, [pc, #92]	@ (800e8dc <gc_execute_block+0xea4>)
 800e87e:	785b      	ldrb	r3, [r3, #1]
 800e880:	2b33      	cmp	r3, #51	@ 0x33
 800e882:	f000 8086 	beq.w	800e992 <gc_execute_block+0xf5a>
                                      command_words.G14 ||
 800e886:	2300      	movs	r3, #0
 800e888:	e06f      	b.n	800e96a <gc_execute_block+0xf32>
    if(gc_state.tool_change && axis_command == AxisCommand_MotionMode && !gc_parser_flags.jog_motion)
 800e88a:	f018 0f01 	tst.w	r8, #1
 800e88e:	d1aa      	bne.n	800e7e6 <gc_execute_block+0xdae>
        FAIL(Status_GcodeToolChangePending); // [Motions (except jogging) not allowed when changing tool]
 800e890:	2428      	movs	r4, #40	@ 0x28
 800e892:	f7ff b9ae 	b.w	800dbf2 <gc_execute_block+0x1ba>
    } else if(gc_block.modal.motion == MotionMode_SpindleSynchronized) {
 800e896:	4a11      	ldr	r2, [pc, #68]	@ (800e8dc <gc_execute_block+0xea4>)
 800e898:	8912      	ldrh	r2, [r2, #8]
 800e89a:	2a21      	cmp	r2, #33	@ 0x21
 800e89c:	d012      	beq.n	800e8c4 <gc_execute_block+0xe8c>
    } else if (gc_block.modal.feed_mode == FeedMode_InverseTime) { // = G93
 800e89e:	490f      	ldr	r1, [pc, #60]	@ (800e8dc <gc_execute_block+0xea4>)
 800e8a0:	7a89      	ldrb	r1, [r1, #10]
 800e8a2:	2901      	cmp	r1, #1
 800e8a4:	d040      	beq.n	800e928 <gc_execute_block+0xef0>
    } else if (gc_block.modal.feed_mode == FeedMode_UnitsPerMin || gc_block.modal.feed_mode == FeedMode_UnitsPerRev) {
 800e8a6:	b109      	cbz	r1, 800e8ac <gc_execute_block+0xe74>
 800e8a8:	2902      	cmp	r1, #2
 800e8aa:	d1bc      	bne.n	800e826 <gc_execute_block+0xdee>
        if (!gc_block.words.f) {
 800e8ac:	f013 0f02 	tst.w	r3, #2
 800e8b0:	d14b      	bne.n	800e94a <gc_execute_block+0xf12>
            if(gc_block.modal.feed_mode == gc_state.modal.feed_mode)
 800e8b2:	4b0c      	ldr	r3, [pc, #48]	@ (800e8e4 <gc_execute_block+0xeac>)
 800e8b4:	789b      	ldrb	r3, [r3, #2]
 800e8b6:	4299      	cmp	r1, r3
 800e8b8:	d1b5      	bne.n	800e826 <gc_execute_block+0xdee>
                gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 800e8ba:	4b0a      	ldr	r3, [pc, #40]	@ (800e8e4 <gc_execute_block+0xeac>)
 800e8bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e8be:	4b07      	ldr	r3, [pc, #28]	@ (800e8dc <gc_execute_block+0xea4>)
 800e8c0:	645a      	str	r2, [r3, #68]	@ 0x44
 800e8c2:	e7b0      	b.n	800e826 <gc_execute_block+0xdee>
        if (!gc_block.words.k) {
 800e8c4:	4b05      	ldr	r3, [pc, #20]	@ (800e8dc <gc_execute_block+0xea4>)
 800e8c6:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800e8ca:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800e8ce:	d111      	bne.n	800e8f4 <gc_execute_block+0xebc>
            gc_block.values.k = gc_state.distance_per_rev;
 800e8d0:	4b04      	ldr	r3, [pc, #16]	@ (800e8e4 <gc_execute_block+0xeac>)
 800e8d2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800e8d4:	4b01      	ldr	r3, [pc, #4]	@ (800e8dc <gc_execute_block+0xea4>)
 800e8d6:	655a      	str	r2, [r3, #84]	@ 0x54
 800e8d8:	e7a5      	b.n	800e826 <gc_execute_block+0xdee>
 800e8da:	bf00      	nop
 800e8dc:	2000150c 	.word	0x2000150c
 800e8e0:	20001ac4 	.word	0x20001ac4
 800e8e4:	20001614 	.word	0x20001614
 800e8e8:	00989680 	.word	0x00989680
 800e8ec:	41cb3333 	.word	0x41cb3333
 800e8f0:	20001508 	.word	0x20001508
            gc_block.words.k = Off;
 800e8f4:	4ba7      	ldr	r3, [pc, #668]	@ (800eb94 <gc_execute_block+0x115c>)
 800e8f6:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800e8fa:	f36f 1286 	bfc	r2, #6, #1
 800e8fe:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
            gc_block.values.k = gc_block.modal.units_imperial ? gc_block.values.ijk[K_VALUE] *= MM_PER_INCH : gc_block.values.ijk[K_VALUE];
 800e902:	7adb      	ldrb	r3, [r3, #11]
 800e904:	b163      	cbz	r3, 800e920 <gc_execute_block+0xee8>
 800e906:	4ba3      	ldr	r3, [pc, #652]	@ (800eb94 <gc_execute_block+0x115c>)
 800e908:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800e90c:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800eb98 <gc_execute_block+0x1160>
 800e910:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e914:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
 800e918:	4b9e      	ldr	r3, [pc, #632]	@ (800eb94 <gc_execute_block+0x115c>)
 800e91a:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
 800e91e:	e782      	b.n	800e826 <gc_execute_block+0xdee>
 800e920:	4b9c      	ldr	r3, [pc, #624]	@ (800eb94 <gc_execute_block+0x115c>)
 800e922:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800e926:	e7f7      	b.n	800e918 <gc_execute_block+0xee0>
        if (axis_command == AxisCommand_MotionMode) {
 800e928:	f1ba 0f02 	cmp.w	sl, #2
 800e92c:	f47f af7b 	bne.w	800e826 <gc_execute_block+0xdee>
            if (!(gc_block.modal.motion == MotionMode_None || gc_block.modal.motion == MotionMode_Seek)) {
 800e930:	2a50      	cmp	r2, #80	@ 0x50
 800e932:	f43f af78 	beq.w	800e826 <gc_execute_block+0xdee>
 800e936:	2a00      	cmp	r2, #0
 800e938:	f43f af75 	beq.w	800e826 <gc_execute_block+0xdee>
                if (!gc_block.words.f)
 800e93c:	f013 0f02 	tst.w	r3, #2
 800e940:	f47f af71 	bne.w	800e826 <gc_execute_block+0xdee>
                    FAIL(Status_GcodeUndefinedFeedRate); // [F word missing]
 800e944:	2416      	movs	r4, #22
 800e946:	f7ff b954 	b.w	800dbf2 <gc_execute_block+0x1ba>
        } else if (gc_block.modal.units_imperial)
 800e94a:	4b92      	ldr	r3, [pc, #584]	@ (800eb94 <gc_execute_block+0x115c>)
 800e94c:	7adb      	ldrb	r3, [r3, #11]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	f43f af69 	beq.w	800e826 <gc_execute_block+0xdee>
            gc_block.values.f *= MM_PER_INCH;
 800e954:	4b8f      	ldr	r3, [pc, #572]	@ (800eb94 <gc_execute_block+0x115c>)
 800e956:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800e95a:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 800eb98 <gc_execute_block+0x1160>
 800e95e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e962:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
 800e966:	e75e      	b.n	800e826 <gc_execute_block+0xdee>
                                      command_words.G14 ||
 800e968:	2301      	movs	r3, #1
        if(command_words.M7 || single_spindle_only) {
 800e96a:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 800e96e:	d112      	bne.n	800e996 <gc_execute_block+0xf5e>
 800e970:	2b00      	cmp	r3, #0
 800e972:	d041      	beq.n	800e9f8 <gc_execute_block+0xfc0>
            if(gc_block.values.$ < (single_spindle_only ? 0 : -1))
 800e974:	4a87      	ldr	r2, [pc, #540]	@ (800eb94 <gc_execute_block+0x115c>)
 800e976:	f8d2 00a0 	ldr.w	r0, [r2, #160]	@ 0xa0
 800e97a:	2200      	movs	r2, #0
 800e97c:	e010      	b.n	800e9a0 <gc_execute_block+0xf68>
                                      command_words.G14 ||
 800e97e:	2301      	movs	r3, #1
 800e980:	e7f3      	b.n	800e96a <gc_execute_block+0xf32>
 800e982:	2301      	movs	r3, #1
 800e984:	e7f1      	b.n	800e96a <gc_execute_block+0xf32>
 800e986:	2301      	movs	r3, #1
 800e988:	e7ef      	b.n	800e96a <gc_execute_block+0xf32>
 800e98a:	2301      	movs	r3, #1
 800e98c:	e7ed      	b.n	800e96a <gc_execute_block+0xf32>
 800e98e:	2300      	movs	r3, #0
 800e990:	e7eb      	b.n	800e96a <gc_execute_block+0xf32>
 800e992:	2301      	movs	r3, #1
 800e994:	e7e9      	b.n	800e96a <gc_execute_block+0xf32>
            if(gc_block.values.$ < (single_spindle_only ? 0 : -1))
 800e996:	4a7f      	ldr	r2, [pc, #508]	@ (800eb94 <gc_execute_block+0x115c>)
 800e998:	f8d2 00a0 	ldr.w	r0, [r2, #160]	@ 0xa0
 800e99c:	b133      	cbz	r3, 800e9ac <gc_execute_block+0xf74>
 800e99e:	2200      	movs	r2, #0
 800e9a0:	4290      	cmp	r0, r2
 800e9a2:	da09      	bge.n	800e9b8 <gc_execute_block+0xf80>
                FAIL(single_spindle_only ? Status_NegativeValue : Status_GcodeValueOutOfRange);
 800e9a4:	b12b      	cbz	r3, 800e9b2 <gc_execute_block+0xf7a>
 800e9a6:	2404      	movs	r4, #4
 800e9a8:	f7ff b923 	b.w	800dbf2 <gc_execute_block+0x1ba>
            if(gc_block.values.$ < (single_spindle_only ? 0 : -1))
 800e9ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e9b0:	e7f6      	b.n	800e9a0 <gc_execute_block+0xf68>
                FAIL(single_spindle_only ? Status_NegativeValue : Status_GcodeValueOutOfRange);
 800e9b2:	2427      	movs	r4, #39	@ 0x27
 800e9b4:	f7ff b91d 	b.w	800dbf2 <gc_execute_block+0x1ba>
            if(!spindle_is_enabled(gc_block.values.$))
 800e9b8:	b240      	sxtb	r0, r0
 800e9ba:	f00f feff 	bl	801e7bc <spindle_is_enabled>
 800e9be:	2800      	cmp	r0, #0
 800e9c0:	f002 8672 	beq.w	80116a8 <gc_execute_block+0x3c70>
            if(gc_block.values.$ >= 0)
 800e9c4:	4b73      	ldr	r3, [pc, #460]	@ (800eb94 <gc_execute_block+0x115c>)
 800e9c6:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	da07      	bge.n	800e9de <gc_execute_block+0xfa6>
            gc_block.words.$ = Off;
 800e9ce:	4b71      	ldr	r3, [pc, #452]	@ (800eb94 <gc_execute_block+0x115c>)
 800e9d0:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800e9d4:	f36f 0200 	bfc	r2, #0, #1
 800e9d8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e9dc:	e00c      	b.n	800e9f8 <gc_execute_block+0xfc0>
                gc_state.spindle.hal = gc_block.spindle = spindle_get(gc_block.values.$);
 800e9de:	b240      	sxtb	r0, r0
 800e9e0:	f00f ff02 	bl	801e7e8 <spindle_get>
 800e9e4:	4a6b      	ldr	r2, [pc, #428]	@ (800eb94 <gc_execute_block+0x115c>)
 800e9e6:	f8c2 00cc 	str.w	r0, [r2, #204]	@ 0xcc
 800e9ea:	4a6c      	ldr	r2, [pc, #432]	@ (800eb9c <gc_execute_block+0x1164>)
 800e9ec:	65d0      	str	r0, [r2, #92]	@ 0x5c
 800e9ee:	e7ee      	b.n	800e9ce <gc_execute_block+0xf96>
    } else if(gc_block.spindle == NULL)
 800e9f0:	4b68      	ldr	r3, [pc, #416]	@ (800eb94 <gc_execute_block+0x115c>)
 800e9f2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800e9f6:	b323      	cbz	r3, 800ea42 <gc_execute_block+0x100a>
    if(gc_block.modal.feed_mode == FeedMode_UnitsPerRev && !gc_state.spindle.hal->get_data)
 800e9f8:	4b66      	ldr	r3, [pc, #408]	@ (800eb94 <gc_execute_block+0x115c>)
 800e9fa:	7a9b      	ldrb	r3, [r3, #10]
 800e9fc:	2b02      	cmp	r3, #2
 800e9fe:	d026      	beq.n	800ea4e <gc_execute_block+0x1016>
    if (command_words.G14) {
 800ea00:	f3c7 2507 	ubfx	r5, r7, #8, #8
 800ea04:	f417 5f00 	tst.w	r7, #8192	@ 0x2000
 800ea08:	d00d      	beq.n	800ea26 <gc_execute_block+0xfee>
        if(gc_block.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 800ea0a:	4b62      	ldr	r3, [pc, #392]	@ (800eb94 <gc_execute_block+0x115c>)
 800ea0c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d024      	beq.n	800ea5e <gc_execute_block+0x1026>
        } else if(gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 800ea14:	4b61      	ldr	r3, [pc, #388]	@ (800eb9c <gc_execute_block+0x1164>)
 800ea16:	7edb      	ldrb	r3, [r3, #27]
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d04e      	beq.n	800eaba <gc_execute_block+0x1082>
        gc_state.modal.spindle.rpm_mode = gc_block.modal.spindle.rpm_mode;
 800ea1c:	4b5d      	ldr	r3, [pc, #372]	@ (800eb94 <gc_execute_block+0x115c>)
 800ea1e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800ea22:	4b5e      	ldr	r3, [pc, #376]	@ (800eb9c <gc_execute_block+0x1164>)
 800ea24:	76da      	strb	r2, [r3, #27]
    spindle_event = gc_block.words.s && !user_words.s;
 800ea26:	4b5b      	ldr	r3, [pc, #364]	@ (800eb94 <gc_execute_block+0x115c>)
 800ea28:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800ea2c:	f013 0308 	ands.w	r3, r3, #8
 800ea30:	d051      	beq.n	800ead6 <gc_execute_block+0x109e>
 800ea32:	4a5b      	ldr	r2, [pc, #364]	@ (800eba0 <gc_execute_block+0x1168>)
 800ea34:	7892      	ldrb	r2, [r2, #2]
 800ea36:	f012 0f08 	tst.w	r2, #8
 800ea3a:	f000 8089 	beq.w	800eb50 <gc_execute_block+0x1118>
 800ea3e:	2200      	movs	r2, #0
 800ea40:	e04a      	b.n	800ead8 <gc_execute_block+0x10a0>
        gc_block.spindle = gc_state.spindle.hal;
 800ea42:	4b56      	ldr	r3, [pc, #344]	@ (800eb9c <gc_execute_block+0x1164>)
 800ea44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ea46:	4b53      	ldr	r3, [pc, #332]	@ (800eb94 <gc_execute_block+0x115c>)
 800ea48:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 800ea4c:	e7d4      	b.n	800e9f8 <gc_execute_block+0xfc0>
    if(gc_block.modal.feed_mode == FeedMode_UnitsPerRev && !gc_state.spindle.hal->get_data)
 800ea4e:	4b53      	ldr	r3, [pc, #332]	@ (800eb9c <gc_execute_block+0x1164>)
 800ea50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ea52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d1d3      	bne.n	800ea00 <gc_execute_block+0xfc8>
        FAIL(Status_GcodeUnsupportedCommand); // [G95 not supported]
 800ea58:	2414      	movs	r4, #20
 800ea5a:	f7ff b8ca 	b.w	800dbf2 <gc_execute_block+0x1ba>
            if(!gc_state.spindle.hal->cap.variable)
 800ea5e:	4b4f      	ldr	r3, [pc, #316]	@ (800eb9c <gc_execute_block+0x1164>)
 800ea60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ea62:	7a9a      	ldrb	r2, [r3, #10]
 800ea64:	f012 0f01 	tst.w	r2, #1
 800ea68:	f002 8621 	beq.w	80116ae <gc_execute_block+0x3c76>
            if (!gc_block.words.s) // TODO: add check for S0?
 800ea6c:	4a49      	ldr	r2, [pc, #292]	@ (800eb94 <gc_execute_block+0x115c>)
 800ea6e:	f892 20ba 	ldrb.w	r2, [r2, #186]	@ 0xba
 800ea72:	f012 0f08 	tst.w	r2, #8
 800ea76:	f002 861d 	beq.w	80116b4 <gc_execute_block+0x3c7c>
            if (gc_block.words.d) {
 800ea7a:	4a46      	ldr	r2, [pc, #280]	@ (800eb94 <gc_execute_block+0x115c>)
 800ea7c:	f992 20b8 	ldrsb.w	r2, [r2, #184]	@ 0xb8
 800ea80:	2a00      	cmp	r2, #0
 800ea82:	db03      	blt.n	800ea8c <gc_execute_block+0x1054>
                gc_state.spindle.hal->param->css.max_rpm = gc_state.spindle.hal->rpm_max;
 800ea84:	685a      	ldr	r2, [r3, #4]
 800ea86:	699b      	ldr	r3, [r3, #24]
 800ea88:	61d3      	str	r3, [r2, #28]
 800ea8a:	e7c7      	b.n	800ea1c <gc_execute_block+0xfe4>
                gc_state.spindle.hal->param->css.max_rpm = min(gc_block.values.d, gc_state.spindle.hal->rpm_max);
 800ea8c:	4a41      	ldr	r2, [pc, #260]	@ (800eb94 <gc_execute_block+0x115c>)
 800ea8e:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 800ea92:	edd3 7a06 	vldr	s15, [r3, #24]
 800ea96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ea9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea9e:	d501      	bpl.n	800eaa4 <gc_execute_block+0x106c>
 800eaa0:	eef0 7a47 	vmov.f32	s15, s14
 800eaa4:	685b      	ldr	r3, [r3, #4]
 800eaa6:	edc3 7a07 	vstr	s15, [r3, #28]
                gc_block.words.d = Off;
 800eaaa:	4b3a      	ldr	r3, [pc, #232]	@ (800eb94 <gc_execute_block+0x115c>)
 800eaac:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800eab0:	f36f 12c7 	bfc	r2, #7, #1
 800eab4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800eab8:	e7b0      	b.n	800ea1c <gc_execute_block+0xfe4>
            if(gc_state.spindle.css) {
 800eaba:	4b38      	ldr	r3, [pc, #224]	@ (800eb9c <gc_execute_block+0x1164>)
 800eabc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eabe:	b123      	cbz	r3, 800eaca <gc_execute_block+0x1092>
                gc_state.spindle.css = NULL;
 800eac0:	4b36      	ldr	r3, [pc, #216]	@ (800eb9c <gc_execute_block+0x1164>)
 800eac2:	2200      	movs	r2, #0
 800eac4:	659a      	str	r2, [r3, #88]	@ 0x58
                protocol_buffer_synchronize(); // Empty planner buffer to ensure we get RPM at end of last CSS motion
 800eac6:	f009 fa85 	bl	8017fd4 <protocol_buffer_synchronize>
            gc_state.spindle.rpm = gc_state.spindle.hal->param->rpm; // Is it correct to restore latest spindle RPM here?
 800eaca:	4b34      	ldr	r3, [pc, #208]	@ (800eb9c <gc_execute_block+0x1164>)
 800eacc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800eace:	6852      	ldr	r2, [r2, #4]
 800ead0:	6812      	ldr	r2, [r2, #0]
 800ead2:	651a      	str	r2, [r3, #80]	@ 0x50
 800ead4:	e7a2      	b.n	800ea1c <gc_execute_block+0xfe4>
    spindle_event = gc_block.words.s && !user_words.s;
 800ead6:	2200      	movs	r2, #0
 800ead8:	9208      	str	r2, [sp, #32]
    if (!gc_block.words.s)
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d13f      	bne.n	800eb5e <gc_execute_block+0x1126>
        gc_block.values.s = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? gc_state.spindle.rpm : gc_state.spindle.hal->param->css.max_rpm;
 800eade:	4b2f      	ldr	r3, [pc, #188]	@ (800eb9c <gc_execute_block+0x1164>)
 800eae0:	7edb      	ldrb	r3, [r3, #27]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d136      	bne.n	800eb54 <gc_execute_block+0x111c>
 800eae6:	4b2d      	ldr	r3, [pc, #180]	@ (800eb9c <gc_execute_block+0x1164>)
 800eae8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eaea:	4b2a      	ldr	r3, [pc, #168]	@ (800eb94 <gc_execute_block+0x115c>)
 800eaec:	669a      	str	r2, [r3, #104]	@ 0x68
    if(set_tool) { // M61
 800eaee:	9b07      	ldr	r3, [sp, #28]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d064      	beq.n	800ebbe <gc_execute_block+0x1186>
        if(!gc_block.words.q)
 800eaf4:	4b27      	ldr	r3, [pc, #156]	@ (800eb94 <gc_execute_block+0x115c>)
 800eaf6:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800eafa:	f013 0f02 	tst.w	r3, #2
 800eafe:	f002 85dc 	beq.w	80116ba <gc_execute_block+0x3c82>
        if (floorf(gc_block.values.q) - gc_block.values.q != 0.0f)
 800eb02:	4b24      	ldr	r3, [pc, #144]	@ (800eb94 <gc_execute_block+0x115c>)
 800eb04:	ed93 8a18 	vldr	s16, [r3, #96]	@ 0x60
 800eb08:	eeb0 0a48 	vmov.f32	s0, s16
 800eb0c:	f019 f8bc 	bl	8027c88 <floorf>
 800eb10:	ee70 7a48 	vsub.f32	s15, s0, s16
 800eb14:	eef5 7a40 	vcmp.f32	s15, #0.0
 800eb18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb1c:	f042 85d0 	bne.w	80116c0 <gc_execute_block+0x3c88>
        if ((uint32_t)gc_block.values.q > (grbl.tool_table.n_tools ? grbl.tool_table.n_tools : MAX_TOOL_NUMBER))
 800eb20:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800eb24:	ee17 3a90 	vmov	r3, s15
 800eb28:	4a1e      	ldr	r2, [pc, #120]	@ (800eba4 <gc_execute_block+0x116c>)
 800eb2a:	6992      	ldr	r2, [r2, #24]
 800eb2c:	2a00      	cmp	r2, #0
 800eb2e:	d042      	beq.n	800ebb6 <gc_execute_block+0x117e>
 800eb30:	2100      	movs	r1, #0
 800eb32:	429a      	cmp	r2, r3
 800eb34:	f171 0100 	sbcs.w	r1, r1, #0
 800eb38:	f2c2 85c5 	blt.w	80116c6 <gc_execute_block+0x3c8e>
        gc_block.values.t = (uint32_t)gc_block.values.q;
 800eb3c:	4a15      	ldr	r2, [pc, #84]	@ (800eb94 <gc_execute_block+0x115c>)
 800eb3e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
        gc_block.words.q = Off;
 800eb42:	f892 30ba 	ldrb.w	r3, [r2, #186]	@ 0xba
 800eb46:	f36f 0341 	bfc	r3, #1, #1
 800eb4a:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
 800eb4e:	e041      	b.n	800ebd4 <gc_execute_block+0x119c>
    spindle_event = gc_block.words.s && !user_words.s;
 800eb50:	2201      	movs	r2, #1
 800eb52:	e7c1      	b.n	800ead8 <gc_execute_block+0x10a0>
        gc_block.values.s = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? gc_state.spindle.rpm : gc_state.spindle.hal->param->css.max_rpm;
 800eb54:	4b11      	ldr	r3, [pc, #68]	@ (800eb9c <gc_execute_block+0x1164>)
 800eb56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eb58:	685b      	ldr	r3, [r3, #4]
 800eb5a:	69da      	ldr	r2, [r3, #28]
 800eb5c:	e7c5      	b.n	800eaea <gc_execute_block+0x10b2>
    else if(!user_words.s && gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 800eb5e:	4b10      	ldr	r3, [pc, #64]	@ (800eba0 <gc_execute_block+0x1168>)
 800eb60:	789b      	ldrb	r3, [r3, #2]
 800eb62:	f013 0f08 	tst.w	r3, #8
 800eb66:	d1c2      	bne.n	800eaee <gc_execute_block+0x10b6>
 800eb68:	4b0c      	ldr	r3, [pc, #48]	@ (800eb9c <gc_execute_block+0x1164>)
 800eb6a:	7edb      	ldrb	r3, [r3, #27]
 800eb6c:	2b01      	cmp	r3, #1
 800eb6e:	d1be      	bne.n	800eaee <gc_execute_block+0x10b6>
        gc_block.values.s *= (gc_block.modal.units_imperial ? MM_PER_INCH * 12.0f : 1000.0f); // convert surface speed to mm/min
 800eb70:	4b08      	ldr	r3, [pc, #32]	@ (800eb94 <gc_execute_block+0x115c>)
 800eb72:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800eb76:	7adb      	ldrb	r3, [r3, #11]
 800eb78:	b1d3      	cbz	r3, 800ebb0 <gc_execute_block+0x1178>
 800eb7a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800eba8 <gc_execute_block+0x1170>
 800eb7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb82:	4b04      	ldr	r3, [pc, #16]	@ (800eb94 <gc_execute_block+0x115c>)
 800eb84:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
        gc_state.spindle.hal->param->css.surface_speed = gc_block.values.s;
 800eb88:	4b04      	ldr	r3, [pc, #16]	@ (800eb9c <gc_execute_block+0x1164>)
 800eb8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	edc3 7a04 	vstr	s15, [r3, #16]
 800eb92:	e7ac      	b.n	800eaee <gc_execute_block+0x10b6>
 800eb94:	2000150c 	.word	0x2000150c
 800eb98:	41cb3333 	.word	0x41cb3333
 800eb9c:	20001614 	.word	0x20001614
 800eba0:	20001508 	.word	0x20001508
 800eba4:	20001ac4 	.word	0x20001ac4
 800eba8:	43986666 	.word	0x43986666
 800ebac:	447a0000 	.word	0x447a0000
        gc_block.values.s *= (gc_block.modal.units_imperial ? MM_PER_INCH * 12.0f : 1000.0f); // convert surface speed to mm/min
 800ebb0:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 800ebac <gc_execute_block+0x1174>
 800ebb4:	e7e3      	b.n	800eb7e <gc_execute_block+0x1146>
        if ((uint32_t)gc_block.values.q > (grbl.tool_table.n_tools ? grbl.tool_table.n_tools : MAX_TOOL_NUMBER))
 800ebb6:	f06f 0201 	mvn.w	r2, #1
 800ebba:	2100      	movs	r1, #0
 800ebbc:	e7b9      	b.n	800eb32 <gc_execute_block+0x10fa>
    } else if (!gc_block.words.t)
 800ebbe:	4bab      	ldr	r3, [pc, #684]	@ (800ee6c <gc_execute_block+0x1434>)
 800ebc0:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800ebc4:	f013 0f10 	tst.w	r3, #16
 800ebc8:	d104      	bne.n	800ebd4 <gc_execute_block+0x119c>
        gc_block.values.t = gc_state.tool_pending;
 800ebca:	4ba9      	ldr	r3, [pc, #676]	@ (800ee70 <gc_execute_block+0x1438>)
 800ebcc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800ebce:	4ba7      	ldr	r3, [pc, #668]	@ (800ee6c <gc_execute_block+0x1434>)
 800ebd0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    if(command_words.M10 && port_command) {
 800ebd4:	f3c7 4907 	ubfx	r9, r7, #16, #8
 800ebd8:	f019 0410 	ands.w	r4, r9, #16
 800ebdc:	d071      	beq.n	800ecc2 <gc_execute_block+0x128a>
 800ebde:	9b06      	ldr	r3, [sp, #24]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d06e      	beq.n	800ecc2 <gc_execute_block+0x128a>
        switch(port_command) {
 800ebe4:	2b42      	cmp	r3, #66	@ 0x42
 800ebe6:	f000 80a4 	beq.w	800ed32 <gc_execute_block+0x12fa>
 800ebea:	d836      	bhi.n	800ec5a <gc_execute_block+0x1222>
 800ebec:	3b3e      	subs	r3, #62	@ 0x3e
 800ebee:	b2db      	uxtb	r3, r3
 800ebf0:	2b03      	cmp	r3, #3
 800ebf2:	d866      	bhi.n	800ecc2 <gc_execute_block+0x128a>
                if(!gc_block.words.p)
 800ebf4:	4b9d      	ldr	r3, [pc, #628]	@ (800ee6c <gc_execute_block+0x1434>)
 800ebf6:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800ebfa:	f013 0f01 	tst.w	r3, #1
 800ebfe:	f002 8565 	beq.w	80116cc <gc_execute_block+0x3c94>
                if(gc_block.values.p < 0.0f)
 800ec02:	4b9a      	ldr	r3, [pc, #616]	@ (800ee6c <gc_execute_block+0x1434>)
 800ec04:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ec08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ec0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec10:	f102 855f 	bmi.w	80116d2 <gc_execute_block+0x3c9a>
                if((uint32_t)gc_block.values.p + 1 > hal.port.num_digital_out)
 800ec14:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ec18:	ee17 3a10 	vmov	r3, s14
 800ec1c:	3301      	adds	r3, #1
 800ec1e:	4a95      	ldr	r2, [pc, #596]	@ (800ee74 <gc_execute_block+0x143c>)
 800ec20:	f892 2115 	ldrb.w	r2, [r2, #277]	@ 0x115
 800ec24:	4293      	cmp	r3, r2
 800ec26:	f202 8557 	bhi.w	80116d8 <gc_execute_block+0x3ca0>
                gc_block.output_command.is_digital = true;
 800ec2a:	4a90      	ldr	r2, [pc, #576]	@ (800ee6c <gc_execute_block+0x1434>)
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
                gc_block.output_command.port = (uint8_t)gc_block.values.p;
 800ec32:	ee17 3a10 	vmov	r3, s14
 800ec36:	f882 30be 	strb.w	r3, [r2, #190]	@ 0xbe
                gc_block.output_command.value = port_command == 62 || port_command == 64 ? 1.0f : 0.0f;
 800ec3a:	9b06      	ldr	r3, [sp, #24]
 800ec3c:	2b3e      	cmp	r3, #62	@ 0x3e
 800ec3e:	d076      	beq.n	800ed2e <gc_execute_block+0x12f6>
 800ec40:	2b40      	cmp	r3, #64	@ 0x40
 800ec42:	d072      	beq.n	800ed2a <gc_execute_block+0x12f2>
 800ec44:	2200      	movs	r2, #0
 800ec46:	4b89      	ldr	r3, [pc, #548]	@ (800ee6c <gc_execute_block+0x1434>)
 800ec48:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
                gc_block.words.p = Off;
 800ec4c:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800ec50:	f36f 0200 	bfc	r2, #0, #1
 800ec54:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                break;
 800ec58:	e033      	b.n	800ecc2 <gc_execute_block+0x128a>
        switch(port_command) {
 800ec5a:	9b06      	ldr	r3, [sp, #24]
 800ec5c:	3b43      	subs	r3, #67	@ 0x43
 800ec5e:	b2db      	uxtb	r3, r3
 800ec60:	2b01      	cmp	r3, #1
 800ec62:	d82e      	bhi.n	800ecc2 <gc_execute_block+0x128a>
                if(!(gc_block.words.e || gc_block.words.q))
 800ec64:	4b81      	ldr	r3, [pc, #516]	@ (800ee6c <gc_execute_block+0x1434>)
 800ec66:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ec6a:	4a83      	ldr	r2, [pc, #524]	@ (800ee78 <gc_execute_block+0x1440>)
 800ec6c:	421a      	tst	r2, r3
 800ec6e:	f002 8569 	beq.w	8011744 <gc_execute_block+0x3d0c>
                if((uint32_t)gc_block.values.e + 1 > hal.port.num_analog_out)
 800ec72:	4b7e      	ldr	r3, [pc, #504]	@ (800ee6c <gc_execute_block+0x1434>)
 800ec74:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800ec78:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ec7c:	ee17 3a10 	vmov	r3, s14
 800ec80:	3301      	adds	r3, #1
 800ec82:	4a7c      	ldr	r2, [pc, #496]	@ (800ee74 <gc_execute_block+0x143c>)
 800ec84:	f892 2117 	ldrb.w	r2, [r2, #279]	@ 0x117
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	f202 855e 	bhi.w	801174a <gc_execute_block+0x3d12>
                gc_block.output_command.is_digital = false;
 800ec8e:	4b77      	ldr	r3, [pc, #476]	@ (800ee6c <gc_execute_block+0x1434>)
 800ec90:	2100      	movs	r1, #0
 800ec92:	f883 10bc 	strb.w	r1, [r3, #188]	@ 0xbc
                gc_block.output_command.port = (uint8_t)gc_block.values.e;
 800ec96:	ee17 2a10 	vmov	r2, s14
 800ec9a:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
                gc_block.output_command.value = gc_block.values.q;
 800ec9e:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800eca2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eca6:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
                gc_block.words.e = gc_block.words.q = Off;
 800ecaa:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800ecae:	f361 0241 	bfi	r2, r1, #1, #1
 800ecb2:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800ecb6:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800ecba:	f361 0200 	bfi	r2, r1, #0, #1
 800ecbe:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
    if(command_words.M7 && gc_block.modal.spindle.state.ccw) {
 800ecc2:	f019 0f02 	tst.w	r9, #2
 800ecc6:	d010      	beq.n	800ecea <gc_execute_block+0x12b2>
 800ecc8:	4b68      	ldr	r3, [pc, #416]	@ (800ee6c <gc_execute_block+0x1434>)
 800ecca:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800ecce:	f013 0f02 	tst.w	r3, #2
 800ecd2:	d00a      	beq.n	800ecea <gc_execute_block+0x12b2>
        if(gc_block.spindle == NULL) {
 800ecd4:	4b65      	ldr	r3, [pc, #404]	@ (800ee6c <gc_execute_block+0x1434>)
 800ecd6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	f000 809c 	beq.w	800ee18 <gc_execute_block+0x13e0>
        } else if(!(gc_block.spindle->cap.direction || gc_block.spindle->cap.laser))
 800ece0:	7a9b      	ldrb	r3, [r3, #10]
 800ece2:	f013 0f0a 	tst.w	r3, #10
 800ece6:	f002 8533 	beq.w	8011750 <gc_execute_block+0x3d18>
    if (command_words.M9) {
 800ecea:	f019 0f08 	tst.w	r9, #8
 800ecee:	f000 80d3 	beq.w	800ee98 <gc_execute_block+0x1460>
        if(!gc_block.words.p)
 800ecf2:	4b5e      	ldr	r3, [pc, #376]	@ (800ee6c <gc_execute_block+0x1434>)
 800ecf4:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800ecf8:	f013 0f01 	tst.w	r3, #1
 800ecfc:	f040 80a5 	bne.w	800ee4a <gc_execute_block+0x1412>
            gc_block.values.p = 1.0f;
 800ed00:	4b5a      	ldr	r3, [pc, #360]	@ (800ee6c <gc_execute_block+0x1434>)
 800ed02:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ed06:	65da      	str	r2, [r3, #92]	@ 0x5c
        switch(gc_block.override_command) {
 800ed08:	4b58      	ldr	r3, [pc, #352]	@ (800ee6c <gc_execute_block+0x1434>)
 800ed0a:	785b      	ldrb	r3, [r3, #1]
 800ed0c:	3b30      	subs	r3, #48	@ 0x30
 800ed0e:	2b08      	cmp	r3, #8
 800ed10:	f200 80c2 	bhi.w	800ee98 <gc_execute_block+0x1460>
 800ed14:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ed18:	00ff00b4 	.word	0x00ff00b4
 800ed1c:	011d010c 	.word	0x011d010c
 800ed20:	012e00c0 	.word	0x012e00c0
 800ed24:	00c000c0 	.word	0x00c000c0
 800ed28:	013f      	.short	0x013f
                gc_block.output_command.value = port_command == 62 || port_command == 64 ? 1.0f : 0.0f;
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	e78b      	b.n	800ec46 <gc_execute_block+0x120e>
 800ed2e:	2201      	movs	r2, #1
 800ed30:	e789      	b.n	800ec46 <gc_execute_block+0x120e>
                if(!(gc_block.words.l || gc_block.words.q))
 800ed32:	4b4e      	ldr	r3, [pc, #312]	@ (800ee6c <gc_execute_block+0x1434>)
 800ed34:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800ed38:	f412 3f04 	tst.w	r2, #135168	@ 0x21000
 800ed3c:	f002 84cf 	beq.w	80116de <gc_execute_block+0x3ca6>
                if(gc_block.words.p && gc_block.words.e)
 800ed40:	4b4e      	ldr	r3, [pc, #312]	@ (800ee7c <gc_execute_block+0x1444>)
 800ed42:	4393      	bics	r3, r2
 800ed44:	f002 84ce 	beq.w	80116e4 <gc_execute_block+0x3cac>
                if(gc_block.values.l >= (uint8_t)WaitMode_Max)
 800ed48:	4b48      	ldr	r3, [pc, #288]	@ (800ee6c <gc_execute_block+0x1434>)
 800ed4a:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 800ed4e:	2a04      	cmp	r2, #4
 800ed50:	f202 84e6 	bhi.w	8011720 <gc_execute_block+0x3ce8>
                if((wait_mode_t)gc_block.values.l != WaitMode_Immediate && gc_block.values.q == 0.0f)
 800ed54:	b13a      	cbz	r2, 800ed66 <gc_execute_block+0x132e>
 800ed56:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800ed5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ed5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed62:	f002 84e0 	beq.w	8011726 <gc_execute_block+0x3cee>
                if(gc_block.words.p) {
 800ed66:	4b41      	ldr	r3, [pc, #260]	@ (800ee6c <gc_execute_block+0x1434>)
 800ed68:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800ed6c:	f013 0f01 	tst.w	r3, #1
 800ed70:	d01b      	beq.n	800edaa <gc_execute_block+0x1372>
                    if(gc_block.values.p < 0.0f)
 800ed72:	4b3e      	ldr	r3, [pc, #248]	@ (800ee6c <gc_execute_block+0x1434>)
 800ed74:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ed78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ed7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed80:	f102 84d4 	bmi.w	801172c <gc_execute_block+0x3cf4>
                    if((uint32_t)gc_block.values.p + 1 > hal.port.num_digital_in)
 800ed84:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ed88:	ee17 3a10 	vmov	r3, s14
 800ed8c:	3301      	adds	r3, #1
 800ed8e:	4939      	ldr	r1, [pc, #228]	@ (800ee74 <gc_execute_block+0x143c>)
 800ed90:	f891 1114 	ldrb.w	r1, [r1, #276]	@ 0x114
 800ed94:	428b      	cmp	r3, r1
 800ed96:	f202 84cc 	bhi.w	8011732 <gc_execute_block+0x3cfa>
                    gc_block.output_command.is_digital = true;
 800ed9a:	4934      	ldr	r1, [pc, #208]	@ (800ee6c <gc_execute_block+0x1434>)
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	f881 30bc 	strb.w	r3, [r1, #188]	@ 0xbc
                    gc_block.output_command.port = (uint8_t)gc_block.values.p;
 800eda2:	ee17 3a10 	vmov	r3, s14
 800eda6:	f881 30be 	strb.w	r3, [r1, #190]	@ 0xbe
                if(gc_block.words.e) {
 800edaa:	4b30      	ldr	r3, [pc, #192]	@ (800ee6c <gc_execute_block+0x1434>)
 800edac:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800edb0:	f013 0f01 	tst.w	r3, #1
 800edb4:	d018      	beq.n	800ede8 <gc_execute_block+0x13b0>
                    if((uint32_t)gc_block.values.e + 1 > hal.port.num_analog_in)
 800edb6:	4b2d      	ldr	r3, [pc, #180]	@ (800ee6c <gc_execute_block+0x1434>)
 800edb8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800edbc:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800edc0:	ee17 3a10 	vmov	r3, s14
 800edc4:	3301      	adds	r3, #1
 800edc6:	492b      	ldr	r1, [pc, #172]	@ (800ee74 <gc_execute_block+0x143c>)
 800edc8:	f891 1116 	ldrb.w	r1, [r1, #278]	@ 0x116
 800edcc:	428b      	cmp	r3, r1
 800edce:	f202 84b3 	bhi.w	8011738 <gc_execute_block+0x3d00>
                    if((wait_mode_t)gc_block.values.l != WaitMode_Immediate)
 800edd2:	2a00      	cmp	r2, #0
 800edd4:	f042 84b3 	bne.w	801173e <gc_execute_block+0x3d06>
                    gc_block.output_command.is_digital = false;
 800edd8:	4a24      	ldr	r2, [pc, #144]	@ (800ee6c <gc_execute_block+0x1434>)
 800edda:	2300      	movs	r3, #0
 800eddc:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
                    gc_block.output_command.port = (uint8_t)gc_block.values.e;
 800ede0:	ee17 3a10 	vmov	r3, s14
 800ede4:	f882 30be 	strb.w	r3, [r2, #190]	@ 0xbe
                gc_block.words.e = gc_block.words.l = gc_block.words.p = gc_block.words.q = Off;
 800ede8:	4b20      	ldr	r3, [pc, #128]	@ (800ee6c <gc_execute_block+0x1434>)
 800edea:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800edee:	f36f 0241 	bfc	r2, #1, #1
 800edf2:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800edf6:	b2d2      	uxtb	r2, r2
 800edf8:	f36f 0200 	bfc	r2, #0, #1
 800edfc:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800ee00:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800ee04:	f36f 1204 	bfc	r2, #4, #1
 800ee08:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800ee0c:	b2d2      	uxtb	r2, r2
 800ee0e:	f36f 0200 	bfc	r2, #0, #1
 800ee12:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
                break;
 800ee16:	e754      	b.n	800ecc2 <gc_execute_block+0x128a>
                if(spindle_is_enabled(idx) && !(spindle_get(idx)->cap.direction || spindle_get(idx)->cap.laser))
 800ee18:	2000      	movs	r0, #0
 800ee1a:	f00f fccf 	bl	801e7bc <spindle_is_enabled>
 800ee1e:	2800      	cmp	r0, #0
 800ee20:	f43f af63 	beq.w	800ecea <gc_execute_block+0x12b2>
 800ee24:	2000      	movs	r0, #0
 800ee26:	f00f fcdf 	bl	801e7e8 <spindle_get>
 800ee2a:	7a83      	ldrb	r3, [r0, #10]
 800ee2c:	f013 0f02 	tst.w	r3, #2
 800ee30:	f47f af5b 	bne.w	800ecea <gc_execute_block+0x12b2>
 800ee34:	2000      	movs	r0, #0
 800ee36:	f00f fcd7 	bl	801e7e8 <spindle_get>
 800ee3a:	7a83      	ldrb	r3, [r0, #10]
 800ee3c:	f013 0f08 	tst.w	r3, #8
 800ee40:	f47f af53 	bne.w	800ecea <gc_execute_block+0x12b2>
                    FAIL(Status_GcodeUnsupportedCommand);
 800ee44:	2414      	movs	r4, #20
 800ee46:	f7fe bed4 	b.w	800dbf2 <gc_execute_block+0x1ba>
            if(gc_block.values.p < 0.0f)
 800ee4a:	4b08      	ldr	r3, [pc, #32]	@ (800ee6c <gc_execute_block+0x1434>)
 800ee4c:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ee50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ee54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee58:	f102 847d 	bmi.w	8011756 <gc_execute_block+0x3d1e>
            gc_block.words.p = Off;
 800ee5c:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800ee60:	f36f 0200 	bfc	r2, #0, #1
 800ee64:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800ee68:	e74e      	b.n	800ed08 <gc_execute_block+0x12d0>
 800ee6a:	bf00      	nop
 800ee6c:	2000150c 	.word	0x2000150c
 800ee70:	20001614 	.word	0x20001614
 800ee74:	200018dc 	.word	0x200018dc
 800ee78:	00020100 	.word	0x00020100
 800ee7c:	00010100 	.word	0x00010100
                gc_block.modal.override_ctrl.feed_rate_disable = Off;
 800ee80:	4ba5      	ldr	r3, [pc, #660]	@ (800f118 <gc_execute_block+0x16e0>)
 800ee82:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800ee86:	f36f 0200 	bfc	r2, #0, #1
 800ee8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                gc_block.modal.override_ctrl.spindle_rpm_disable = Off;
 800ee8e:	b2d2      	uxtb	r2, r2
 800ee90:	f36f 0282 	bfc	r2, #2, #1
 800ee94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (command_words.M10 && gc_block.user_mcode) {
 800ee98:	b1d4      	cbz	r4, 800eed0 <gc_execute_block+0x1498>
 800ee9a:	4b9f      	ldr	r3, [pc, #636]	@ (800f118 <gc_execute_block+0x16e0>)
 800ee9c:	885b      	ldrh	r3, [r3, #2]
 800ee9e:	b1bb      	cbz	r3, 800eed0 <gc_execute_block+0x1498>
        user_words.mask = gc_block.words.mask;
 800eea0:	489d      	ldr	r0, [pc, #628]	@ (800f118 <gc_execute_block+0x16e0>)
 800eea2:	4601      	mov	r1, r0
 800eea4:	f851 2fb8 	ldr.w	r2, [r1, #184]!
 800eea8:	4b9c      	ldr	r3, [pc, #624]	@ (800f11c <gc_execute_block+0x16e4>)
 800eeaa:	601a      	str	r2, [r3, #0]
        if((int_value = (uint_fast16_t)hal.user_mcode.validate(&gc_block, &gc_block.words)))
 800eeac:	4b9c      	ldr	r3, [pc, #624]	@ (800f120 <gc_execute_block+0x16e8>)
 800eeae:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800eeb2:	4798      	blx	r3
 800eeb4:	4604      	mov	r4, r0
 800eeb6:	2800      	cmp	r0, #0
 800eeb8:	f47e ae9b 	bne.w	800dbf2 <gc_execute_block+0x1ba>
        user_words.mask ^= gc_block.words.mask; // Flag "taken" words for execution
 800eebc:	4a97      	ldr	r2, [pc, #604]	@ (800f11c <gc_execute_block+0x16e4>)
 800eebe:	6813      	ldr	r3, [r2, #0]
 800eec0:	4995      	ldr	r1, [pc, #596]	@ (800f118 <gc_execute_block+0x16e0>)
 800eec2:	f8d1 10b8 	ldr.w	r1, [r1, #184]	@ 0xb8
 800eec6:	404b      	eors	r3, r1
 800eec8:	6013      	str	r3, [r2, #0]
        axis_words.mask = ijk_words.mask = 0;
 800eeca:	2300      	movs	r3, #0
 800eecc:	9305      	str	r3, [sp, #20]
 800eece:	469b      	mov	fp, r3
    if (gc_block.non_modal_command == NonModal_Dwell) {
 800eed0:	4b91      	ldr	r3, [pc, #580]	@ (800f118 <gc_execute_block+0x16e0>)
 800eed2:	781c      	ldrb	r4, [r3, #0]
 800eed4:	2c04      	cmp	r4, #4
 800eed6:	d114      	bne.n	800ef02 <gc_execute_block+0x14ca>
        if (!gc_block.words.p)
 800eed8:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800eedc:	f013 0f01 	tst.w	r3, #1
 800eee0:	f002 843c 	beq.w	801175c <gc_execute_block+0x3d24>
        if(gc_block.values.p < 0.0f)
 800eee4:	4b8c      	ldr	r3, [pc, #560]	@ (800f118 <gc_execute_block+0x16e0>)
 800eee6:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800eeea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eeee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eef2:	f53e ae7e 	bmi.w	800dbf2 <gc_execute_block+0x1ba>
        gc_block.words.p = Off;
 800eef6:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800eefa:	f36f 0200 	bfc	r2, #0, #1
 800eefe:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
    gc_get_plane_data(&plane, gc_block.modal.plane_select);
 800ef02:	4c85      	ldr	r4, [pc, #532]	@ (800f118 <gc_execute_block+0x16e0>)
 800ef04:	7ba1      	ldrb	r1, [r4, #14]
 800ef06:	a822      	add	r0, sp, #136	@ 0x88
 800ef08:	f7fe fba4 	bl	800d654 <gc_get_plane_data>
    if (gc_block.modal.units_imperial) do { // Axes indices are consistent, so loop may be used.
 800ef0c:	7ae3      	ldrb	r3, [r4, #11]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d06f      	beq.n	800eff2 <gc_execute_block+0x15ba>
    uint_fast8_t idx = N_AXIS;
 800ef12:	2303      	movs	r3, #3
 800ef14:	e058      	b.n	800efc8 <gc_execute_block+0x1590>
                gc_block.modal.override_ctrl.feed_rate_disable = On;
 800ef16:	4b80      	ldr	r3, [pc, #512]	@ (800f118 <gc_execute_block+0x16e0>)
 800ef18:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800ef1c:	f042 0201 	orr.w	r2, r2, #1
 800ef20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                gc_block.modal.override_ctrl.spindle_rpm_disable = On;
 800ef24:	b2d2      	uxtb	r2, r2
 800ef26:	f042 0204 	orr.w	r2, r2, #4
 800ef2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800ef2e:	e7b3      	b.n	800ee98 <gc_execute_block+0x1460>
                gc_block.modal.override_ctrl.feed_rate_disable = gc_block.values.p == 0.0f;
 800ef30:	4b79      	ldr	r3, [pc, #484]	@ (800f118 <gc_execute_block+0x16e0>)
 800ef32:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ef36:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ef3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef3e:	bf0c      	ite	eq
 800ef40:	2101      	moveq	r1, #1
 800ef42:	2100      	movne	r1, #0
 800ef44:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800ef48:	f361 0200 	bfi	r2, r1, #0, #1
 800ef4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800ef50:	e7a2      	b.n	800ee98 <gc_execute_block+0x1460>
                gc_block.modal.override_ctrl.spindle_rpm_disable = gc_block.values.p == 0.0f;
 800ef52:	4b71      	ldr	r3, [pc, #452]	@ (800f118 <gc_execute_block+0x16e0>)
 800ef54:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ef58:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ef5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef60:	bf0c      	ite	eq
 800ef62:	2101      	moveq	r1, #1
 800ef64:	2100      	movne	r1, #0
 800ef66:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800ef6a:	f361 0282 	bfi	r2, r1, #2, #1
 800ef6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800ef72:	e791      	b.n	800ee98 <gc_execute_block+0x1460>
                gc_block.modal.override_ctrl.feed_hold_disable = gc_block.values.p == 0.0f;
 800ef74:	4b68      	ldr	r3, [pc, #416]	@ (800f118 <gc_execute_block+0x16e0>)
 800ef76:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ef7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ef7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef82:	bf0c      	ite	eq
 800ef84:	2101      	moveq	r1, #1
 800ef86:	2100      	movne	r1, #0
 800ef88:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800ef8c:	f361 0241 	bfi	r2, r1, #1, #1
 800ef90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800ef94:	e780      	b.n	800ee98 <gc_execute_block+0x1460>
                if(settings.parking.flags.enable_override_control)
 800ef96:	4b63      	ldr	r3, [pc, #396]	@ (800f124 <gc_execute_block+0x16ec>)
 800ef98:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800ef9c:	f013 0f04 	tst.w	r3, #4
 800efa0:	f43f af7a 	beq.w	800ee98 <gc_execute_block+0x1460>
                    gc_block.modal.override_ctrl.parking_disable = gc_block.values.p == 0.0f;
 800efa4:	4b5c      	ldr	r3, [pc, #368]	@ (800f118 <gc_execute_block+0x16e0>)
 800efa6:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800efaa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800efae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efb2:	bf0c      	ite	eq
 800efb4:	2101      	moveq	r1, #1
 800efb6:	2100      	movne	r1, #0
 800efb8:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800efbc:	f361 02c3 	bfi	r2, r1, #3, #1
 800efc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800efc4:	e768      	b.n	800ee98 <gc_execute_block+0x1460>
    } while(idx);
 800efc6:	b1a3      	cbz	r3, 800eff2 <gc_execute_block+0x15ba>
        idx--;
 800efc8:	3b01      	subs	r3, #1
        if (bit_istrue(axis_words.mask, bit(idx))) {
 800efca:	fa5f f28b 	uxtb.w	r2, fp
 800efce:	40da      	lsrs	r2, r3
 800efd0:	f012 0f01 	tst.w	r2, #1
 800efd4:	d0f7      	beq.n	800efc6 <gc_execute_block+0x158e>
            gc_block.values.xyz[idx] *= MM_PER_INCH;
 800efd6:	f103 0120 	add.w	r1, r3, #32
 800efda:	4a4f      	ldr	r2, [pc, #316]	@ (800f118 <gc_execute_block+0x16e0>)
 800efdc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800efe0:	edd2 7a01 	vldr	s15, [r2, #4]
 800efe4:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800f128 <gc_execute_block+0x16f0>
 800efe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800efec:	edc2 7a01 	vstr	s15, [r2, #4]
 800eff0:	e7e9      	b.n	800efc6 <gc_execute_block+0x158e>
    if (command_words.G15 && gc_state.modal.diameter_mode != gc_block.modal.diameter_mode) {
 800eff2:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800eff6:	d005      	beq.n	800f004 <gc_execute_block+0x15cc>
 800eff8:	4b4c      	ldr	r3, [pc, #304]	@ (800f12c <gc_execute_block+0x16f4>)
 800effa:	795a      	ldrb	r2, [r3, #5]
 800effc:	4b46      	ldr	r3, [pc, #280]	@ (800f118 <gc_execute_block+0x16e0>)
 800effe:	7b5b      	ldrb	r3, [r3, #13]
 800f000:	429a      	cmp	r2, r3
 800f002:	d118      	bne.n	800f036 <gc_execute_block+0x15fe>
    if(gc_state.modal.diameter_mode && bit_istrue(axis_words.mask, bit(X_AXIS)))
 800f004:	4b49      	ldr	r3, [pc, #292]	@ (800f12c <gc_execute_block+0x16f4>)
 800f006:	795b      	ldrb	r3, [r3, #5]
 800f008:	b15b      	cbz	r3, 800f022 <gc_execute_block+0x15ea>
 800f00a:	f01b 0f01 	tst.w	fp, #1
 800f00e:	d008      	beq.n	800f022 <gc_execute_block+0x15ea>
        gc_block.values.xyz[X_AXIS] /= 2.0f;
 800f010:	4b41      	ldr	r3, [pc, #260]	@ (800f118 <gc_execute_block+0x16e0>)
 800f012:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 800f016:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f01a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f01e:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
    if(axis_command == AxisCommand_Scaling) {
 800f022:	f1ba 0f04 	cmp.w	sl, #4
 800f026:	d00c      	beq.n	800f042 <gc_execute_block+0x160a>
    if(gc_state.modal.scaling_active) {
 800f028:	4b40      	ldr	r3, [pc, #256]	@ (800f12c <gc_execute_block+0x16f4>)
 800f02a:	7f9b      	ldrb	r3, [r3, #30]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	f000 80b8 	beq.w	800f1a2 <gc_execute_block+0x176a>
        idx = N_AXIS;
 800f032:	2203      	movs	r2, #3
 800f034:	e098      	b.n	800f168 <gc_execute_block+0x1730>
        gc_state.modal.diameter_mode = gc_block.modal.diameter_mode;
 800f036:	4a3d      	ldr	r2, [pc, #244]	@ (800f12c <gc_execute_block+0x16f4>)
 800f038:	7153      	strb	r3, [r2, #5]
        system_add_rt_report(Report_LatheXMode);
 800f03a:	2008      	movs	r0, #8
 800f03c:	f013 f840 	bl	80220c0 <system_add_rt_report>
 800f040:	e7e0      	b.n	800f004 <gc_execute_block+0x15cc>
        if(gc_block.modal.scaling_active) {
 800f042:	4b35      	ldr	r3, [pc, #212]	@ (800f118 <gc_execute_block+0x16e0>)
 800f044:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d05f      	beq.n	800f10c <gc_execute_block+0x16d4>
            gc_block.modal.scaling_active = false;
 800f04c:	4b32      	ldr	r3, [pc, #200]	@ (800f118 <gc_execute_block+0x16e0>)
 800f04e:	2200      	movs	r2, #0
 800f050:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            if (!axis_words.mask)
 800f054:	fa5f f38b 	uxtb.w	r3, fp
 800f058:	2b00      	cmp	r3, #0
 800f05a:	f002 8382 	beq.w	8011762 <gc_execute_block+0x3d2a>
            bool report_scaling = false;
 800f05e:	4616      	mov	r6, r2
            idx = N_AXIS;
 800f060:	2403      	movs	r4, #3
 800f062:	e024      	b.n	800f0ae <gc_execute_block+0x1676>
                    report_scaling |= scale_factor.ijk[idx] != gc_block.values.xyz[idx];
 800f064:	1ca1      	adds	r1, r4, #2
 800f066:	4a32      	ldr	r2, [pc, #200]	@ (800f130 <gc_execute_block+0x16f8>)
 800f068:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f06c:	ed92 7a01 	vldr	s14, [r2, #4]
 800f070:	f104 0020 	add.w	r0, r4, #32
 800f074:	4928      	ldr	r1, [pc, #160]	@ (800f118 <gc_execute_block+0x16e0>)
 800f076:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800f07a:	edd1 7a01 	vldr	s15, [r1, #4]
 800f07e:	eeb4 7a67 	vcmp.f32	s14, s15
 800f082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f086:	bf18      	it	ne
 800f088:	f046 0601 	orrne.w	r6, r6, #1
                    scale_factor.ijk[idx] = gc_block.values.xyz[idx];
 800f08c:	edc2 7a01 	vstr	s15, [r2, #4]
                    bit_false(axis_words.mask, bit(idx));
 800f090:	f04f 0b01 	mov.w	fp, #1
 800f094:	fa0b fb04 	lsl.w	fp, fp, r4
 800f098:	ea23 0b0b 	bic.w	fp, r3, fp
                    system_add_rt_report(Report_Scaling);
 800f09c:	2002      	movs	r0, #2
 800f09e:	f013 f80f 	bl	80220c0 <system_add_rt_report>
 800f0a2:	e00c      	b.n	800f0be <gc_execute_block+0x1686>
                gc_block.modal.scaling_active = gc_block.modal.scaling_active || (scale_factor.xyz[idx] != 1.0f);
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	4a1c      	ldr	r2, [pc, #112]	@ (800f118 <gc_execute_block+0x16e0>)
 800f0a8:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
            } while(idx);
 800f0ac:	b1e4      	cbz	r4, 800f0e8 <gc_execute_block+0x16b0>
                if(bit_istrue(axis_words.mask, bit(--idx))) {
 800f0ae:	fa5f f38b 	uxtb.w	r3, fp
 800f0b2:	3c01      	subs	r4, #1
 800f0b4:	fa23 f204 	lsr.w	r2, r3, r4
 800f0b8:	f012 0f01 	tst.w	r2, #1
 800f0bc:	d1d2      	bne.n	800f064 <gc_execute_block+0x162c>
                gc_block.modal.scaling_active = gc_block.modal.scaling_active || (scale_factor.xyz[idx] != 1.0f);
 800f0be:	4b16      	ldr	r3, [pc, #88]	@ (800f118 <gc_execute_block+0x16e0>)
 800f0c0:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d1ed      	bne.n	800f0a4 <gc_execute_block+0x166c>
 800f0c8:	4b19      	ldr	r3, [pc, #100]	@ (800f130 <gc_execute_block+0x16f8>)
 800f0ca:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f0ce:	ed93 7a00 	vldr	s14, [r3]
 800f0d2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f0d6:	eeb4 7a67 	vcmp.f32	s14, s15
 800f0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0de:	d001      	beq.n	800f0e4 <gc_execute_block+0x16ac>
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	e7e0      	b.n	800f0a6 <gc_execute_block+0x166e>
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	e7de      	b.n	800f0a6 <gc_execute_block+0x166e>
            gc_block.words.mask &= ~axis_words_mask.mask; // Remove axis words.
 800f0e8:	4611      	mov	r1, r2
 800f0ea:	f8d2 20b8 	ldr.w	r2, [r2, #184]	@ 0xb8
 800f0ee:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 800f0f2:	f8c1 20b8 	str.w	r2, [r1, #184]	@ 0xb8
            report_scaling |= gc_state.modal.scaling_active != gc_block.modal.scaling_active;
 800f0f6:	4a0d      	ldr	r2, [pc, #52]	@ (800f12c <gc_execute_block+0x16f4>)
 800f0f8:	7f91      	ldrb	r1, [r2, #30]
            gc_state.modal.scaling_active = gc_block.modal.scaling_active;
 800f0fa:	7793      	strb	r3, [r2, #30]
            if(report_scaling)
 800f0fc:	428b      	cmp	r3, r1
 800f0fe:	d101      	bne.n	800f104 <gc_execute_block+0x16cc>
 800f100:	2e00      	cmp	r6, #0
 800f102:	d091      	beq.n	800f028 <gc_execute_block+0x15f0>
                system_add_rt_report(Report_Scaling);
 800f104:	2002      	movs	r0, #2
 800f106:	f012 ffdb 	bl	80220c0 <system_add_rt_report>
 800f10a:	e78d      	b.n	800f028 <gc_execute_block+0x15f0>
            set_scaling(1.0f);
 800f10c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f110:	f7fe f9c8 	bl	800d4a4 <set_scaling>
 800f114:	e788      	b.n	800f028 <gc_execute_block+0x15f0>
 800f116:	bf00      	nop
 800f118:	2000150c 	.word	0x2000150c
 800f11c:	20001508 	.word	0x20001508
 800f120:	200018dc 	.word	0x200018dc
 800f124:	200022f4 	.word	0x200022f4
 800f128:	41cb3333 	.word	0x41cb3333
 800f12c:	20001614 	.word	0x20001614
 800f130:	200001c0 	.word	0x200001c0
                     gc_block.values.xyz[idx] = (gc_block.values.xyz[idx] - scale_factor.xyz[idx]) * scale_factor.ijk[idx] + scale_factor.xyz[idx];
 800f134:	f102 0120 	add.w	r1, r2, #32
 800f138:	4bb2      	ldr	r3, [pc, #712]	@ (800f404 <gc_execute_block+0x19cc>)
 800f13a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f13e:	edd3 7a01 	vldr	s15, [r3, #4]
 800f142:	49b1      	ldr	r1, [pc, #708]	@ (800f408 <gc_execute_block+0x19d0>)
 800f144:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800f148:	ed90 7a00 	vldr	s14, [r0]
 800f14c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f150:	1c90      	adds	r0, r2, #2
 800f152:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800f156:	edd1 6a01 	vldr	s13, [r1, #4]
 800f15a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f15e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f162:	ed83 7a01 	vstr	s14, [r3, #4]
        } while(idx);
 800f166:	b1e2      	cbz	r2, 800f1a2 <gc_execute_block+0x176a>
            if(bit_istrue(axis_words.mask, bit(--idx))) {
 800f168:	fa5f f38b 	uxtb.w	r3, fp
 800f16c:	3a01      	subs	r2, #1
 800f16e:	40d3      	lsrs	r3, r2
 800f170:	f013 0f01 	tst.w	r3, #1
 800f174:	d0f7      	beq.n	800f166 <gc_execute_block+0x172e>
                if(gc_block.modal.distance_incremental)
 800f176:	4ba3      	ldr	r3, [pc, #652]	@ (800f404 <gc_execute_block+0x19cc>)
 800f178:	7b1b      	ldrb	r3, [r3, #12]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d0da      	beq.n	800f134 <gc_execute_block+0x16fc>
                     gc_block.values.xyz[idx] *= scale_factor.ijk[idx];
 800f17e:	f102 0120 	add.w	r1, r2, #32
 800f182:	4ba0      	ldr	r3, [pc, #640]	@ (800f404 <gc_execute_block+0x19cc>)
 800f184:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f188:	edd3 7a01 	vldr	s15, [r3, #4]
 800f18c:	1c90      	adds	r0, r2, #2
 800f18e:	499e      	ldr	r1, [pc, #632]	@ (800f408 <gc_execute_block+0x19d0>)
 800f190:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800f194:	ed91 7a01 	vldr	s14, [r1, #4]
 800f198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f19c:	edc3 7a01 	vstr	s15, [r3, #4]
 800f1a0:	e7e1      	b.n	800f166 <gc_execute_block+0x172e>
    if (command_words.G8) { // Indicates called in block.
 800f1a2:	f015 0301 	ands.w	r3, r5, #1
 800f1a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1a8:	d007      	beq.n	800f1ba <gc_execute_block+0x1782>
        switch(gc_block.modal.tool_offset_mode) {
 800f1aa:	4b96      	ldr	r3, [pc, #600]	@ (800f404 <gc_execute_block+0x19cc>)
 800f1ac:	7bdb      	ldrb	r3, [r3, #15]
 800f1ae:	2b02      	cmp	r3, #2
 800f1b0:	d01e      	beq.n	800f1f0 <gc_execute_block+0x17b8>
 800f1b2:	2b03      	cmp	r3, #3
 800f1b4:	d049      	beq.n	800f24a <gc_execute_block+0x1812>
 800f1b6:	2b01      	cmp	r3, #1
 800f1b8:	d021      	beq.n	800f1fe <gc_execute_block+0x17c6>
    if (command_words.G12) { // Check if called in block
 800f1ba:	f015 0f08 	tst.w	r5, #8
 800f1be:	d005      	beq.n	800f1cc <gc_execute_block+0x1794>
        if (gc_state.modal.coord_system.id != gc_block.modal.coord_system.id && !settings_read_coord_data(gc_block.modal.coord_system.id, &gc_block.modal.coord_system.xyz))
 800f1c0:	4b92      	ldr	r3, [pc, #584]	@ (800f40c <gc_execute_block+0x19d4>)
 800f1c2:	7d1b      	ldrb	r3, [r3, #20]
 800f1c4:	4a8f      	ldr	r2, [pc, #572]	@ (800f404 <gc_execute_block+0x19cc>)
 800f1c6:	7f10      	ldrb	r0, [r2, #28]
 800f1c8:	4283      	cmp	r3, r0
 800f1ca:	d15b      	bne.n	800f284 <gc_execute_block+0x184c>
    switch (gc_block.non_modal_command) {
 800f1cc:	4b8d      	ldr	r3, [pc, #564]	@ (800f404 <gc_execute_block+0x19cc>)
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	2b0a      	cmp	r3, #10
 800f1d2:	d060      	beq.n	800f296 <gc_execute_block+0x185e>
 800f1d4:	2b5c      	cmp	r3, #92	@ 0x5c
 800f1d6:	f000 8260 	beq.w	800f69a <gc_execute_block+0x1c62>
            if (axis_words.mask && axis_command != AxisCommand_ToolLengthOffset) { // TLO block any axis command.
 800f1da:	fa5f f48b 	uxtb.w	r4, fp
 800f1de:	2c00      	cmp	r4, #0
 800f1e0:	f000 82ef 	beq.w	800f7c2 <gc_execute_block+0x1d8a>
 800f1e4:	f1ba 0f03 	cmp.w	sl, #3
 800f1e8:	f000 82eb 	beq.w	800f7c2 <gc_execute_block+0x1d8a>
                idx = N_AXIS;
 800f1ec:	2203      	movs	r2, #3
 800f1ee:	e2b3      	b.n	800f758 <gc_execute_block+0x1d20>
                if(!axis_words.mask)
 800f1f0:	fa5f f38b 	uxtb.w	r3, fp
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d1e0      	bne.n	800f1ba <gc_execute_block+0x1782>
                    FAIL(Status_GcodeG43DynamicAxisError);
 800f1f8:	2425      	movs	r4, #37	@ 0x25
 800f1fa:	f7fe bcfa 	b.w	800dbf2 <gc_execute_block+0x1ba>
                if(grbl.tool_table.n_tools) {
 800f1fe:	4b84      	ldr	r3, [pc, #528]	@ (800f410 <gc_execute_block+0x19d8>)
 800f200:	699a      	ldr	r2, [r3, #24]
 800f202:	2a00      	cmp	r2, #0
 800f204:	f002 82b0 	beq.w	8011768 <gc_execute_block+0x3d30>
                    if(gc_block.words.h) {
 800f208:	4b7e      	ldr	r3, [pc, #504]	@ (800f404 <gc_execute_block+0x19cc>)
 800f20a:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800f20e:	f013 0f08 	tst.w	r3, #8
 800f212:	d014      	beq.n	800f23e <gc_execute_block+0x1806>
                        if(gc_block.values.h > grbl.tool_table.n_tools)
 800f214:	4b7b      	ldr	r3, [pc, #492]	@ (800f404 <gc_execute_block+0x19cc>)
 800f216:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f21a:	429a      	cmp	r2, r3
 800f21c:	f0c2 82a7 	bcc.w	801176e <gc_execute_block+0x3d36>
                        gc_block.words.h = Off;
 800f220:	4a78      	ldr	r2, [pc, #480]	@ (800f404 <gc_execute_block+0x19cc>)
 800f222:	f892 10b9 	ldrb.w	r1, [r2, #185]	@ 0xb9
 800f226:	f36f 01c3 	bfc	r1, #3, #1
 800f22a:	f882 10b9 	strb.w	r1, [r2, #185]	@ 0xb9
                        if(gc_block.values.h == 0)
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d1c3      	bne.n	800f1ba <gc_execute_block+0x1782>
                            gc_block.values.h = gc_block.values.t;
 800f232:	4613      	mov	r3, r2
 800f234:	f8d2 20b0 	ldr.w	r2, [r2, #176]	@ 0xb0
 800f238:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 800f23c:	e7bd      	b.n	800f1ba <gc_execute_block+0x1782>
                        gc_block.values.h = gc_block.values.t;
 800f23e:	4b71      	ldr	r3, [pc, #452]	@ (800f404 <gc_execute_block+0x19cc>)
 800f240:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800f244:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 800f248:	e7b7      	b.n	800f1ba <gc_execute_block+0x1782>
                if(grbl.tool_table.n_tools) {
 800f24a:	4b71      	ldr	r3, [pc, #452]	@ (800f410 <gc_execute_block+0x19d8>)
 800f24c:	699a      	ldr	r2, [r3, #24]
 800f24e:	2a00      	cmp	r2, #0
 800f250:	f002 8290 	beq.w	8011774 <gc_execute_block+0x3d3c>
                    if(gc_block.words.h) {
 800f254:	4b6b      	ldr	r3, [pc, #428]	@ (800f404 <gc_execute_block+0x19cc>)
 800f256:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800f25a:	f013 0f08 	tst.w	r3, #8
 800f25e:	f002 828c 	beq.w	801177a <gc_execute_block+0x3d42>
                        if(gc_block.values.h == 0 || gc_block.values.h > grbl.tool_table.n_tools)
 800f262:	4b68      	ldr	r3, [pc, #416]	@ (800f404 <gc_execute_block+0x19cc>)
 800f264:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f268:	2b00      	cmp	r3, #0
 800f26a:	f002 8289 	beq.w	8011780 <gc_execute_block+0x3d48>
 800f26e:	429a      	cmp	r2, r3
 800f270:	f0c2 8289 	bcc.w	8011786 <gc_execute_block+0x3d4e>
                        gc_block.words.h = Off;
 800f274:	4b63      	ldr	r3, [pc, #396]	@ (800f404 <gc_execute_block+0x19cc>)
 800f276:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800f27a:	f36f 02c3 	bfc	r2, #3, #1
 800f27e:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
                        FAIL(Status_GcodeValueWordMissing);
 800f282:	e79a      	b.n	800f1ba <gc_execute_block+0x1782>
        if (gc_state.modal.coord_system.id != gc_block.modal.coord_system.id && !settings_read_coord_data(gc_block.modal.coord_system.id, &gc_block.modal.coord_system.xyz))
 800f284:	f102 0110 	add.w	r1, r2, #16
 800f288:	f00e fae4 	bl	801d854 <settings_read_coord_data>
 800f28c:	2800      	cmp	r0, #0
 800f28e:	d19d      	bne.n	800f1cc <gc_execute_block+0x1794>
            FAIL(Status_SettingReadFail);
 800f290:	2407      	movs	r4, #7
 800f292:	f7fe bcae 	b.w	800dbf2 <gc_execute_block+0x1ba>
            if (!(axis_words.mask || (gc_block.values.l != 20 && gc_block.words.r)))
 800f296:	fa5f f68b 	uxtb.w	r6, fp
 800f29a:	b966      	cbnz	r6, 800f2b6 <gc_execute_block+0x187e>
 800f29c:	4b59      	ldr	r3, [pc, #356]	@ (800f404 <gc_execute_block+0x19cc>)
 800f29e:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800f2a2:	2b14      	cmp	r3, #20
 800f2a4:	f002 8272 	beq.w	801178c <gc_execute_block+0x3d54>
 800f2a8:	4b56      	ldr	r3, [pc, #344]	@ (800f404 <gc_execute_block+0x19cc>)
 800f2aa:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f2ae:	f013 0f04 	tst.w	r3, #4
 800f2b2:	f002 826e 	beq.w	8011792 <gc_execute_block+0x3d5a>
            if (!(gc_block.words.p || gc_block.words.l))
 800f2b6:	4b53      	ldr	r3, [pc, #332]	@ (800f404 <gc_execute_block+0x19cc>)
 800f2b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800f2bc:	f413 3f88 	tst.w	r3, #69632	@ 0x11000
 800f2c0:	f002 826a 	beq.w	8011798 <gc_execute_block+0x3d60>
            if(gc_block.values.p < 0.0f)
 800f2c4:	4b4f      	ldr	r3, [pc, #316]	@ (800f404 <gc_execute_block+0x19cc>)
 800f2c6:	ed93 0a17 	vldr	s0, [r3, #92]	@ 0x5c
 800f2ca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2d2:	f102 8264 	bmi.w	801179e <gc_execute_block+0x3d66>
            p_value = (uint8_t)truncf(gc_block.values.p); // Convert p value to int.
 800f2d6:	f018 fd3f 	bl	8027d58 <truncf>
 800f2da:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800f2de:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
 800f2e2:	f89d 4028 	ldrb.w	r4, [sp, #40]	@ 0x28
            switch(gc_block.values.l) {
 800f2e6:	4b47      	ldr	r3, [pc, #284]	@ (800f404 <gc_execute_block+0x19cc>)
 800f2e8:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800f2ec:	3b01      	subs	r3, #1
 800f2ee:	2b13      	cmp	r3, #19
 800f2f0:	f202 8258 	bhi.w	80117a4 <gc_execute_block+0x3d6c>
 800f2f4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f2f8:	00140090 	.word	0x00140090
 800f2fc:	12561256 	.word	0x12561256
 800f300:	12561256 	.word	0x12561256
 800f304:	12561256 	.word	0x12561256
 800f308:	00901256 	.word	0x00901256
 800f30c:	12560090 	.word	0x12560090
 800f310:	12561256 	.word	0x12561256
 800f314:	12561256 	.word	0x12561256
 800f318:	12561256 	.word	0x12561256
 800f31c:	001b1256 	.word	0x001b1256
                    if (gc_block.words.r)
 800f320:	4b38      	ldr	r3, [pc, #224]	@ (800f404 <gc_execute_block+0x19cc>)
 800f322:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f326:	f013 0f04 	tst.w	r3, #4
 800f32a:	f042 823e 	bne.w	80117aa <gc_execute_block+0x3d72>
                    if (p_value > N_WorkCoordinateSystems)
 800f32e:	2c09      	cmp	r4, #9
 800f330:	f202 823e 	bhi.w	80117b0 <gc_execute_block+0x3d78>
                                                     : (coord_system_id_t)(p_value - 1);    // else adjust index to NVS coordinate data indexing.
 800f334:	b9ec      	cbnz	r4, 800f372 <gc_execute_block+0x193a>
 800f336:	4b33      	ldr	r3, [pc, #204]	@ (800f404 <gc_execute_block+0x19cc>)
 800f338:	7f18      	ldrb	r0, [r3, #28]
                    gc_block.values.coord_data.id = p_value == 0
 800f33a:	4932      	ldr	r1, [pc, #200]	@ (800f404 <gc_execute_block+0x19cc>)
 800f33c:	f881 009c 	strb.w	r0, [r1, #156]	@ 0x9c
                    if (!settings_read_coord_data(gc_block.values.coord_data.id, &gc_block.values.coord_data.xyz))
 800f340:	3190      	adds	r1, #144	@ 0x90
 800f342:	f00e fa87 	bl	801d854 <settings_read_coord_data>
 800f346:	2800      	cmp	r0, #0
 800f348:	f002 8235 	beq.w	80117b6 <gc_execute_block+0x3d7e>
                    if(settings.offset_lock.mask && gc_block.values.coord_data.id >= CoordinateSystem_G59_1 && gc_block.values.coord_data.id <= CoordinateSystem_G59_3) {
 800f34c:	4b31      	ldr	r3, [pc, #196]	@ (800f414 <gc_execute_block+0x19dc>)
 800f34e:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 800f352:	b18a      	cbz	r2, 800f378 <gc_execute_block+0x1940>
 800f354:	4b2b      	ldr	r3, [pc, #172]	@ (800f404 <gc_execute_block+0x19cc>)
 800f356:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800f35a:	2b05      	cmp	r3, #5
 800f35c:	d90e      	bls.n	800f37c <gc_execute_block+0x1944>
 800f35e:	2b08      	cmp	r3, #8
 800f360:	d80e      	bhi.n	800f380 <gc_execute_block+0x1948>
                        if(bit_istrue(settings.offset_lock.mask, bit(gc_block.values.coord_data.id - CoordinateSystem_G59_1)))
 800f362:	3b06      	subs	r3, #6
 800f364:	40da      	lsrs	r2, r3
 800f366:	f012 0f01 	tst.w	r2, #1
 800f36a:	f042 8227 	bne.w	80117bc <gc_execute_block+0x3d84>
 800f36e:	2303      	movs	r3, #3
 800f370:	e031      	b.n	800f3d6 <gc_execute_block+0x199e>
                                                     : (coord_system_id_t)(p_value - 1);    // else adjust index to NVS coordinate data indexing.
 800f372:	1e60      	subs	r0, r4, #1
 800f374:	b2c0      	uxtb	r0, r0
 800f376:	e7e0      	b.n	800f33a <gc_execute_block+0x1902>
 800f378:	2303      	movs	r3, #3
 800f37a:	e02c      	b.n	800f3d6 <gc_execute_block+0x199e>
 800f37c:	2303      	movs	r3, #3
 800f37e:	e02a      	b.n	800f3d6 <gc_execute_block+0x199e>
 800f380:	2303      	movs	r3, #3
 800f382:	e028      	b.n	800f3d6 <gc_execute_block+0x199e>
                                gc_block.values.coord_data.xyz[idx] = gc_state.position[idx] - gc_block.values.xyz[idx] - gc_state.g92_coord_offset[idx] - gc_state.tool_length_offset[idx];
 800f384:	4a21      	ldr	r2, [pc, #132]	@ (800f40c <gc_execute_block+0x19d4>)
 800f386:	f103 011a 	add.w	r1, r3, #26
 800f38a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f38e:	edd1 7a00 	vldr	s15, [r1]
 800f392:	491c      	ldr	r1, [pc, #112]	@ (800f404 <gc_execute_block+0x19cc>)
 800f394:	f103 0020 	add.w	r0, r3, #32
 800f398:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800f39c:	ed90 7a01 	vldr	s14, [r0, #4]
 800f3a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f3a4:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 800f3a8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800f3ac:	ed90 7a00 	vldr	s14, [r0]
 800f3b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f3b4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800f3b8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f3bc:	ed92 7a01 	vldr	s14, [r2, #4]
 800f3c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f3c4:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800f3c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f3cc:	edc1 7a02 	vstr	s15, [r1, #8]
                    } while(idx);
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	f000 80d5 	beq.w	800f580 <gc_execute_block+0x1b48>
                        if (bit_istrue(axis_words.mask, bit(--idx))) {
 800f3d6:	3b01      	subs	r3, #1
 800f3d8:	fa26 f203 	lsr.w	r2, r6, r3
 800f3dc:	f012 0f01 	tst.w	r2, #1
 800f3e0:	d0f6      	beq.n	800f3d0 <gc_execute_block+0x1998>
                            if (gc_block.values.l == 20)
 800f3e2:	4a08      	ldr	r2, [pc, #32]	@ (800f404 <gc_execute_block+0x19cc>)
 800f3e4:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 800f3e8:	2a14      	cmp	r2, #20
 800f3ea:	d0cb      	beq.n	800f384 <gc_execute_block+0x194c>
                                gc_block.values.coord_data.xyz[idx] = gc_block.values.xyz[idx];
 800f3ec:	4a05      	ldr	r2, [pc, #20]	@ (800f404 <gc_execute_block+0x19cc>)
 800f3ee:	f103 0120 	add.w	r1, r3, #32
 800f3f2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f3f6:	6849      	ldr	r1, [r1, #4]
 800f3f8:	f103 0022 	add.w	r0, r3, #34	@ 0x22
 800f3fc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f400:	6091      	str	r1, [r2, #8]
 800f402:	e7e5      	b.n	800f3d0 <gc_execute_block+0x1998>
 800f404:	2000150c 	.word	0x2000150c
 800f408:	200001c0 	.word	0x200001c0
 800f40c:	20001614 	.word	0x20001614
 800f410:	20001ac4 	.word	0x20001ac4
 800f414:	200022f4 	.word	0x200022f4
                    if(grbl.tool_table.n_tools) {
 800f418:	4bbf      	ldr	r3, [pc, #764]	@ (800f718 <gc_execute_block+0x1ce0>)
 800f41a:	699b      	ldr	r3, [r3, #24]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	f002 81d0 	beq.w	80117c2 <gc_execute_block+0x3d8a>
                        if(p_value == 0 || p_value > grbl.tool_table.n_tools)
 800f422:	2c00      	cmp	r4, #0
 800f424:	f000 8133 	beq.w	800f68e <gc_execute_block+0x1c56>
 800f428:	42a3      	cmp	r3, r4
 800f42a:	f0c0 8133 	bcc.w	800f694 <gc_execute_block+0x1c5c>
                        grbl.tool_table.tool[p_value].tool_id = (tool_id_t)p_value;
 800f42e:	4bba      	ldr	r3, [pc, #744]	@ (800f718 <gc_execute_block+0x1ce0>)
 800f430:	69db      	ldr	r3, [r3, #28]
 800f432:	2514      	movs	r5, #20
 800f434:	fb04 f505 	mul.w	r5, r4, r5
 800f438:	442b      	add	r3, r5
 800f43a:	611c      	str	r4, [r3, #16]
                        if(gc_block.words.r) {
 800f43c:	4bb7      	ldr	r3, [pc, #732]	@ (800f71c <gc_execute_block+0x1ce4>)
 800f43e:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f442:	f013 0f04 	tst.w	r3, #4
 800f446:	d00b      	beq.n	800f460 <gc_execute_block+0x1a28>
                            grbl.tool_table.tool[p_value].radius = gc_block.values.r;
 800f448:	4bb3      	ldr	r3, [pc, #716]	@ (800f718 <gc_execute_block+0x1ce0>)
 800f44a:	69da      	ldr	r2, [r3, #28]
 800f44c:	442a      	add	r2, r5
 800f44e:	4bb3      	ldr	r3, [pc, #716]	@ (800f71c <gc_execute_block+0x1ce4>)
 800f450:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 800f452:	60d1      	str	r1, [r2, #12]
                            gc_block.words.r = Off;
 800f454:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800f458:	f36f 0282 	bfc	r2, #2, #1
 800f45c:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                        if(gc_block.values.l == 11 && !settings_read_coord_data(CoordinateSystem_G59_3, &g59_3_offset))
 800f460:	4bae      	ldr	r3, [pc, #696]	@ (800f71c <gc_execute_block+0x1ce4>)
 800f462:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800f466:	2b0b      	cmp	r3, #11
 800f468:	d006      	beq.n	800f478 <gc_execute_block+0x1a40>
                        if(gc_block.values.l == 1)
 800f46a:	4bac      	ldr	r3, [pc, #688]	@ (800f71c <gc_execute_block+0x1ce4>)
 800f46c:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800f470:	2b01      	cmp	r3, #1
 800f472:	d00a      	beq.n	800f48a <gc_execute_block+0x1a52>
 800f474:	2303      	movs	r3, #3
 800f476:	e04b      	b.n	800f510 <gc_execute_block+0x1ad8>
                        if(gc_block.values.l == 11 && !settings_read_coord_data(CoordinateSystem_G59_3, &g59_3_offset))
 800f478:	a911      	add	r1, sp, #68	@ 0x44
 800f47a:	2008      	movs	r0, #8
 800f47c:	f00e f9ea 	bl	801d854 <settings_read_coord_data>
 800f480:	2800      	cmp	r0, #0
 800f482:	d1f2      	bne.n	800f46a <gc_execute_block+0x1a32>
                            FAIL(Status_SettingReadFail);
 800f484:	2407      	movs	r4, #7
 800f486:	f7fe bbb4 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            grbl.tool_table.read(p_value, &grbl.tool_table.tool[p_value]);
 800f48a:	4ba3      	ldr	r3, [pc, #652]	@ (800f718 <gc_execute_block+0x1ce0>)
 800f48c:	6a1a      	ldr	r2, [r3, #32]
 800f48e:	69d9      	ldr	r1, [r3, #28]
 800f490:	4429      	add	r1, r5
 800f492:	4620      	mov	r0, r4
 800f494:	4790      	blx	r2
 800f496:	e7ed      	b.n	800f474 <gc_execute_block+0x1a3c>
                                    grbl.tool_table.tool[p_value].offset[idx] = gc_block.values.xyz[idx];
 800f498:	4a9f      	ldr	r2, [pc, #636]	@ (800f718 <gc_execute_block+0x1ce0>)
 800f49a:	69d2      	ldr	r2, [r2, #28]
 800f49c:	442a      	add	r2, r5
 800f49e:	f103 0020 	add.w	r0, r3, #32
 800f4a2:	499e      	ldr	r1, [pc, #632]	@ (800f71c <gc_execute_block+0x1ce4>)
 800f4a4:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800f4a8:	6849      	ldr	r1, [r1, #4]
 800f4aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f4ae:	6011      	str	r1, [r2, #0]
 800f4b0:	e02d      	b.n	800f50e <gc_execute_block+0x1ad6>
                                    grbl.tool_table.tool[p_value].offset[idx] = gc_state.position[idx] - gc_state.modal.coord_system.xyz[idx] - gc_state.g92_coord_offset[idx] - gc_block.values.xyz[idx];
 800f4b2:	4a9b      	ldr	r2, [pc, #620]	@ (800f720 <gc_execute_block+0x1ce8>)
 800f4b4:	f103 011a 	add.w	r1, r3, #26
 800f4b8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f4bc:	edd1 7a00 	vldr	s15, [r1]
 800f4c0:	1c99      	adds	r1, r3, #2
 800f4c2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f4c6:	ed91 7a00 	vldr	s14, [r1]
 800f4ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4ce:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 800f4d2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f4d6:	ed92 7a00 	vldr	s14, [r2]
 800f4da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4de:	f103 0120 	add.w	r1, r3, #32
 800f4e2:	4a8e      	ldr	r2, [pc, #568]	@ (800f71c <gc_execute_block+0x1ce4>)
 800f4e4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f4e8:	ed92 7a01 	vldr	s14, [r2, #4]
 800f4ec:	4a8a      	ldr	r2, [pc, #552]	@ (800f718 <gc_execute_block+0x1ce0>)
 800f4ee:	69d2      	ldr	r2, [r2, #28]
 800f4f0:	442a      	add	r2, r5
 800f4f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4f6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f4fa:	edc2 7a00 	vstr	s15, [r2]
 800f4fe:	e006      	b.n	800f50e <gc_execute_block+0x1ad6>
                            } else if(gc_block.values.l == 10 || gc_block.values.l == 11)
 800f500:	4a86      	ldr	r2, [pc, #536]	@ (800f71c <gc_execute_block+0x1ce4>)
 800f502:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 800f506:	3a0a      	subs	r2, #10
 800f508:	b2d2      	uxtb	r2, r2
 800f50a:	2a01      	cmp	r2, #1
 800f50c:	d925      	bls.n	800f55a <gc_execute_block+0x1b22>
                        } while(idx);
 800f50e:	b38b      	cbz	r3, 800f574 <gc_execute_block+0x1b3c>
                            if(bit_istrue(axis_words.mask, bit(--idx))) {
 800f510:	3b01      	subs	r3, #1
 800f512:	fa26 f203 	lsr.w	r2, r6, r3
 800f516:	f012 0f01 	tst.w	r2, #1
 800f51a:	d0f1      	beq.n	800f500 <gc_execute_block+0x1ac8>
                                if(gc_block.values.l == 1)
 800f51c:	4a7f      	ldr	r2, [pc, #508]	@ (800f71c <gc_execute_block+0x1ce4>)
 800f51e:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 800f522:	2a01      	cmp	r2, #1
 800f524:	d0b8      	beq.n	800f498 <gc_execute_block+0x1a60>
                                else if(gc_block.values.l == 10)
 800f526:	2a0a      	cmp	r2, #10
 800f528:	d0c3      	beq.n	800f4b2 <gc_execute_block+0x1a7a>
                                else if(gc_block.values.l == 11)
 800f52a:	2a0b      	cmp	r2, #11
 800f52c:	d1ef      	bne.n	800f50e <gc_execute_block+0x1ad6>
                                    grbl.tool_table.tool[p_value].offset[idx] = g59_3_offset[idx] - gc_block.values.xyz[idx];
 800f52e:	aa24      	add	r2, sp, #144	@ 0x90
 800f530:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f534:	ed52 7a13 	vldr	s15, [r2, #-76]	@ 0xffffffb4
 800f538:	f103 0120 	add.w	r1, r3, #32
 800f53c:	4a77      	ldr	r2, [pc, #476]	@ (800f71c <gc_execute_block+0x1ce4>)
 800f53e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f542:	ed92 7a01 	vldr	s14, [r2, #4]
 800f546:	4a74      	ldr	r2, [pc, #464]	@ (800f718 <gc_execute_block+0x1ce0>)
 800f548:	69d2      	ldr	r2, [r2, #28]
 800f54a:	442a      	add	r2, r5
 800f54c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f550:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f554:	edc2 7a00 	vstr	s15, [r2]
 800f558:	e7d9      	b.n	800f50e <gc_execute_block+0x1ad6>
                                grbl.tool_table.tool[p_value].offset[idx] = gc_state.tool_length_offset[idx];
 800f55a:	4a6f      	ldr	r2, [pc, #444]	@ (800f718 <gc_execute_block+0x1ce0>)
 800f55c:	69d2      	ldr	r2, [r2, #28]
 800f55e:	442a      	add	r2, r5
 800f560:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800f564:	496e      	ldr	r1, [pc, #440]	@ (800f720 <gc_execute_block+0x1ce8>)
 800f566:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800f56a:	6849      	ldr	r1, [r1, #4]
 800f56c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f570:	6011      	str	r1, [r2, #0]
 800f572:	e7cc      	b.n	800f50e <gc_execute_block+0x1ad6>
                        if(gc_block.values.l == 1)
 800f574:	4b69      	ldr	r3, [pc, #420]	@ (800f71c <gc_execute_block+0x1ce4>)
 800f576:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800f57a:	2b01      	cmp	r3, #1
 800f57c:	f000 8081 	beq.w	800f682 <gc_execute_block+0x1c4a>
            gc_block.words.l = gc_block.words.p = Off;
 800f580:	4b66      	ldr	r3, [pc, #408]	@ (800f71c <gc_execute_block+0x1ce4>)
 800f582:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800f586:	f36f 0200 	bfc	r2, #0, #1
 800f58a:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800f58e:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800f592:	f36f 1204 	bfc	r2, #4, #1
 800f596:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
    if (gc_block.modal.motion == MotionMode_None) {
 800f59a:	4b60      	ldr	r3, [pc, #384]	@ (800f71c <gc_execute_block+0x1ce4>)
 800f59c:	891d      	ldrh	r5, [r3, #8]
 800f59e:	2d50      	cmp	r5, #80	@ 0x50
 800f5a0:	f000 816e 	beq.w	800f880 <gc_execute_block+0x1e48>
    } else if (axis_command == AxisCommand_MotionMode) {
 800f5a4:	f1ba 0f02 	cmp.w	sl, #2
 800f5a8:	f000 8176 	beq.w	800f898 <gc_execute_block+0x1e60>
    if (gc_parser_flags.jog_motion) // Jogging only uses the F feed rate and XYZ value words. N is valid, but S and T are invalid.
 800f5ac:	f018 0301 	ands.w	r3, r8, #1
 800f5b0:	9305      	str	r3, [sp, #20]
 800f5b2:	f000 879c 	beq.w	80104ee <gc_execute_block+0x2ab6>
        gc_block.words.n = gc_block.words.f = Off;
 800f5b6:	4b59      	ldr	r3, [pc, #356]	@ (800f71c <gc_execute_block+0x1ce4>)
 800f5b8:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800f5bc:	f36f 0241 	bfc	r2, #1, #1
 800f5c0:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800f5c4:	b2d2      	uxtb	r2, r2
 800f5c6:	f36f 1286 	bfc	r2, #6, #1
 800f5ca:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
    if (axis_command)
 800f5ce:	f1ba 0f00 	cmp.w	sl, #0
 800f5d2:	d006      	beq.n	800f5e2 <gc_execute_block+0x1baa>
        gc_block.words.mask &= ~axis_words_mask.mask; // Remove axis words.
 800f5d4:	4a51      	ldr	r2, [pc, #324]	@ (800f71c <gc_execute_block+0x1ce4>)
 800f5d6:	f8d2 30b8 	ldr.w	r3, [r2, #184]	@ 0xb8
 800f5da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800f5de:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
    if (gc_block.words.mask)
 800f5e2:	4b4e      	ldr	r3, [pc, #312]	@ (800f71c <gc_execute_block+0x1ce4>)
 800f5e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	f042 8180 	bne.w	80118ee <gc_execute_block+0x3eb6>
    memset(&plan_data, 0, sizeof(plan_line_data_t)); // Zero plan_data struct
 800f5ee:	2228      	movs	r2, #40	@ 0x28
 800f5f0:	2100      	movs	r1, #0
 800f5f2:	a814      	add	r0, sp, #80	@ 0x50
 800f5f4:	f015 fc97 	bl	8024f26 <memset>
    plan_data.offset_id = gc_state.offset_id;
 800f5f8:	4b49      	ldr	r3, [pc, #292]	@ (800f720 <gc_execute_block+0x1ce8>)
 800f5fa:	f993 3082 	ldrsb.w	r3, [r3, #130]	@ 0x82
 800f5fe:	f88d 3069 	strb.w	r3, [sp, #105]	@ 0x69
    plan_data.condition.target_validated = plan_data.condition.target_valid = sys.soft_limits.mask == 0;
 800f602:	4b48      	ldr	r3, [pc, #288]	@ (800f724 <gc_execute_block+0x1cec>)
 800f604:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800f608:	fab3 f383 	clz	r3, r3
 800f60c:	095b      	lsrs	r3, r3, #5
 800f60e:	f89d 2065 	ldrb.w	r2, [sp, #101]	@ 0x65
 800f612:	f363 0241 	bfi	r2, r3, #1, #1
 800f616:	f88d 2065 	strb.w	r2, [sp, #101]	@ 0x65
 800f61a:	b2d2      	uxtb	r2, r2
 800f61c:	f363 0282 	bfi	r2, r3, #2, #1
 800f620:	f88d 2065 	strb.w	r2, [sp, #101]	@ 0x65
    if (gc_parser_flags.jog_motion) {
 800f624:	9b05      	ldr	r3, [sp, #20]
 800f626:	2b00      	cmp	r3, #0
 800f628:	f000 8795 	beq.w	8010556 <gc_execute_block+0x2b1e>
        if (command_words.mask & ~jog_groups.mask)
 800f62c:	f037 0349 	bics.w	r3, r7, #73	@ 0x49
 800f630:	f042 8160 	bne.w	80118f4 <gc_execute_block+0x3ebc>
        if (!(gc_block.non_modal_command == NonModal_AbsoluteOverride || gc_block.non_modal_command == NonModal_NoAction))
 800f634:	4b39      	ldr	r3, [pc, #228]	@ (800f71c <gc_execute_block+0x1ce4>)
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	2b35      	cmp	r3, #53	@ 0x35
 800f63a:	d002      	beq.n	800f642 <gc_execute_block+0x1c0a>
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	f042 815c 	bne.w	80118fa <gc_execute_block+0x3ec2>
        memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t));
 800f642:	4c37      	ldr	r4, [pc, #220]	@ (800f720 <gc_execute_block+0x1ce8>)
 800f644:	ad15      	add	r5, sp, #84	@ 0x54
 800f646:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 800f64a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f64c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        plan_data.spindle.state = gc_state.modal.spindle.state;
 800f650:	7ea3      	ldrb	r3, [r4, #26]
 800f652:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
        plan_data.condition.coolant = gc_state.modal.coolant;
 800f656:	7e63      	ldrb	r3, [r4, #25]
 800f658:	f88d 3066 	strb.w	r3, [sp, #102]	@ 0x66
        plan_data.condition.is_rpm_rate_adjusted = gc_state.is_rpm_rate_adjusted || (gc_state.modal.spindle.state.ccw && gc_state.spindle.hal->cap.laser);
 800f65c:	f894 307e 	ldrb.w	r3, [r4, #126]	@ 0x7e
 800f660:	2b00      	cmp	r3, #0
 800f662:	f040 875d 	bne.w	8010520 <gc_execute_block+0x2ae8>
 800f666:	7ea3      	ldrb	r3, [r4, #26]
 800f668:	f013 0f02 	tst.w	r3, #2
 800f66c:	f000 876f 	beq.w	801054e <gc_execute_block+0x2b16>
 800f670:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800f672:	7a9b      	ldrb	r3, [r3, #10]
 800f674:	f013 0f08 	tst.w	r3, #8
 800f678:	f040 876b 	bne.w	8010552 <gc_execute_block+0x2b1a>
 800f67c:	2300      	movs	r3, #0
 800f67e:	f000 bf50 	b.w	8010522 <gc_execute_block+0x2aea>
                            grbl.tool_table.write(&grbl.tool_table.tool[p_value]);
 800f682:	4b25      	ldr	r3, [pc, #148]	@ (800f718 <gc_execute_block+0x1ce0>)
 800f684:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f686:	69d8      	ldr	r0, [r3, #28]
 800f688:	4428      	add	r0, r5
 800f68a:	4790      	blx	r2
 800f68c:	e778      	b.n	800f580 <gc_execute_block+0x1b48>
                           FAIL(Status_GcodeIllegalToolTableEntry); // [Greater than max allowed tool number]
 800f68e:	2426      	movs	r4, #38	@ 0x26
 800f690:	f7fe baaf 	b.w	800dbf2 <gc_execute_block+0x1ba>
 800f694:	2426      	movs	r4, #38	@ 0x26
 800f696:	f7fe baac 	b.w	800dbf2 <gc_execute_block+0x1ba>
            if (!axis_words.mask)
 800f69a:	fa5f f08b 	uxtb.w	r0, fp
 800f69e:	2800      	cmp	r0, #0
 800f6a0:	f002 8092 	beq.w	80117c8 <gc_execute_block+0x3d90>
            idx = N_AXIS;
 800f6a4:	2303      	movs	r3, #3
 800f6a6:	e00e      	b.n	800f6c6 <gc_execute_block+0x1c8e>
                    gc_block.values.xyz[idx] = gc_state.g92_coord_offset[idx];
 800f6a8:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 800f6ac:	4a1c      	ldr	r2, [pc, #112]	@ (800f720 <gc_execute_block+0x1ce8>)
 800f6ae:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f6b2:	6814      	ldr	r4, [r2, #0]
 800f6b4:	f103 0120 	add.w	r1, r3, #32
 800f6b8:	4a18      	ldr	r2, [pc, #96]	@ (800f71c <gc_execute_block+0x1ce4>)
 800f6ba:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f6be:	6054      	str	r4, [r2, #4]
            } while(idx);
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	f43f af6a 	beq.w	800f59a <gc_execute_block+0x1b62>
                if (bit_istrue(axis_words.mask, bit(--idx))) {
 800f6c6:	3b01      	subs	r3, #1
 800f6c8:	fa20 f203 	lsr.w	r2, r0, r3
 800f6cc:	f012 0f01 	tst.w	r2, #1
 800f6d0:	d0ea      	beq.n	800f6a8 <gc_execute_block+0x1c70>
                    gc_block.values.xyz[idx] = gc_state.position[idx] - gc_block.modal.coord_system.xyz[idx] - gc_block.values.xyz[idx] - gc_state.tool_length_offset[idx];
 800f6d2:	4913      	ldr	r1, [pc, #76]	@ (800f720 <gc_execute_block+0x1ce8>)
 800f6d4:	f103 021a 	add.w	r2, r3, #26
 800f6d8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800f6dc:	edd2 7a00 	vldr	s15, [r2]
 800f6e0:	4a0e      	ldr	r2, [pc, #56]	@ (800f71c <gc_execute_block+0x1ce4>)
 800f6e2:	1d1c      	adds	r4, r3, #4
 800f6e4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f6e8:	ed94 7a00 	vldr	s14, [r4]
 800f6ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f6f0:	f103 0420 	add.w	r4, r3, #32
 800f6f4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800f6f8:	ed92 7a01 	vldr	s14, [r2, #4]
 800f6fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f700:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 800f704:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f708:	ed91 7a01 	vldr	s14, [r1, #4]
 800f70c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f710:	edc2 7a01 	vstr	s15, [r2, #4]
 800f714:	e7d4      	b.n	800f6c0 <gc_execute_block+0x1c88>
 800f716:	bf00      	nop
 800f718:	20001ac4 	.word	0x20001ac4
 800f71c:	2000150c 	.word	0x2000150c
 800f720:	20001614 	.word	0x20001614
 800f724:	20001bbc 	.word	0x20001bbc
                    else if(gc_block.non_modal_command != NonModal_AbsoluteOverride) {
 800f728:	2b35      	cmp	r3, #53	@ 0x35
 800f72a:	d014      	beq.n	800f756 <gc_execute_block+0x1d1e>
                        if(gc_block.modal.distance_incremental)
 800f72c:	49b2      	ldr	r1, [pc, #712]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f72e:	7b09      	ldrb	r1, [r1, #12]
 800f730:	b329      	cbz	r1, 800f77e <gc_execute_block+0x1d46>
                            gc_block.values.xyz[idx] += gc_state.position[idx];
 800f732:	f102 0020 	add.w	r0, r2, #32
 800f736:	49b0      	ldr	r1, [pc, #704]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f738:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800f73c:	edd1 7a01 	vldr	s15, [r1, #4]
 800f740:	f102 051a 	add.w	r5, r2, #26
 800f744:	48ad      	ldr	r0, [pc, #692]	@ (800f9fc <gc_execute_block+0x1fc4>)
 800f746:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800f74a:	ed90 7a00 	vldr	s14, [r0]
 800f74e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f752:	edc1 7a01 	vstr	s15, [r1, #4]
                } while(idx);
 800f756:	b3a2      	cbz	r2, 800f7c2 <gc_execute_block+0x1d8a>
                    if(bit_isfalse(axis_words.mask, bit(--idx)))
 800f758:	3a01      	subs	r2, #1
 800f75a:	fa24 f102 	lsr.w	r1, r4, r2
 800f75e:	f011 0f01 	tst.w	r1, #1
 800f762:	d1e1      	bne.n	800f728 <gc_execute_block+0x1cf0>
                        gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 800f764:	f102 001a 	add.w	r0, r2, #26
 800f768:	49a4      	ldr	r1, [pc, #656]	@ (800f9fc <gc_execute_block+0x1fc4>)
 800f76a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800f76e:	680d      	ldr	r5, [r1, #0]
 800f770:	f102 0020 	add.w	r0, r2, #32
 800f774:	49a0      	ldr	r1, [pc, #640]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f776:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800f77a:	604d      	str	r5, [r1, #4]
 800f77c:	e7eb      	b.n	800f756 <gc_execute_block+0x1d1e>
    return gc_block->modal.coord_system.xyz[idx] + gc_state.g92_coord_offset[idx] + gc_state.tool_length_offset[idx];
 800f77e:	499e      	ldr	r1, [pc, #632]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f780:	1d10      	adds	r0, r2, #4
 800f782:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800f786:	ed90 7a00 	vldr	s14, [r0]
 800f78a:	489c      	ldr	r0, [pc, #624]	@ (800f9fc <gc_execute_block+0x1fc4>)
 800f78c:	f102 052e 	add.w	r5, r2, #46	@ 0x2e
 800f790:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800f794:	edd5 7a00 	vldr	s15, [r5]
 800f798:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f79c:	f102 0530 	add.w	r5, r2, #48	@ 0x30
 800f7a0:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800f7a4:	ed90 7a01 	vldr	s14, [r0, #4]
 800f7a8:	ee37 7a27 	vadd.f32	s14, s14, s15
                            gc_block.values.xyz[idx] += gc_get_block_offset(&gc_block, idx);
 800f7ac:	f102 0020 	add.w	r0, r2, #32
 800f7b0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800f7b4:	edd1 7a01 	vldr	s15, [r1, #4]
 800f7b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f7bc:	edc1 7a01 	vstr	s15, [r1, #4]
 800f7c0:	e7c9      	b.n	800f756 <gc_execute_block+0x1d1e>
            switch (gc_block.non_modal_command) {
 800f7c2:	2b35      	cmp	r3, #53	@ 0x35
 800f7c4:	d052      	beq.n	800f86c <gc_execute_block+0x1e34>
 800f7c6:	d811      	bhi.n	800f7ec <gc_execute_block+0x1db4>
 800f7c8:	2b1c      	cmp	r3, #28
 800f7ca:	d002      	beq.n	800f7d2 <gc_execute_block+0x1d9a>
 800f7cc:	2b1e      	cmp	r3, #30
 800f7ce:	f47f aee4 	bne.w	800f59a <gc_execute_block+0x1b62>
                    if (!settings_read_coord_data(gc_block.non_modal_command == NonModal_GoHome_0 ? CoordinateSystem_G28 : CoordinateSystem_G30, &gc_block.values.coord_data.xyz))
 800f7d2:	2b1c      	cmp	r3, #28
 800f7d4:	d032      	beq.n	800f83c <gc_execute_block+0x1e04>
 800f7d6:	200a      	movs	r0, #10
 800f7d8:	4989      	ldr	r1, [pc, #548]	@ (800fa00 <gc_execute_block+0x1fc8>)
 800f7da:	f00e f83b 	bl	801d854 <settings_read_coord_data>
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	f001 87f5 	beq.w	80117ce <gc_execute_block+0x3d96>
                    if (axis_words.mask) {
 800f7e4:	2c00      	cmp	r4, #0
 800f7e6:	d049      	beq.n	800f87c <gc_execute_block+0x1e44>
                        idx = N_AXIS;
 800f7e8:	2303      	movs	r3, #3
 800f7ea:	e02c      	b.n	800f846 <gc_execute_block+0x1e0e>
 800f7ec:	2b41      	cmp	r3, #65	@ 0x41
 800f7ee:	f47f aed4 	bne.w	800f59a <gc_execute_block+0x1b62>
                    if(!gc_block.words.p)
 800f7f2:	4b81      	ldr	r3, [pc, #516]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f7f4:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f7f8:	f013 0f01 	tst.w	r3, #1
 800f7fc:	f001 87ea 	beq.w	80117d4 <gc_execute_block+0x3d9c>
                    if(gc_block.values.p > 65535.0f)
 800f800:	4b7d      	ldr	r3, [pc, #500]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f802:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800f806:	eddf 7a7f 	vldr	s15, [pc, #508]	@ 800fa04 <gc_execute_block+0x1fcc>
 800f80a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f812:	f301 87e2 	bgt.w	80117da <gc_execute_block+0x3da2>
                    if(!ngc_call_push(&gc_state + ngc_call_level()))
 800f816:	f005 ffcb 	bl	80157b0 <ngc_call_level>
 800f81a:	22d4      	movs	r2, #212	@ 0xd4
 800f81c:	4b77      	ldr	r3, [pc, #476]	@ (800f9fc <gc_execute_block+0x1fc4>)
 800f81e:	fb02 3000 	mla	r0, r2, r0, r3
 800f822:	f005 ffab 	bl	801577c <ngc_call_push>
 800f826:	2800      	cmp	r0, #0
 800f828:	f001 87da 	beq.w	80117e0 <gc_execute_block+0x3da8>
                    gc_block.words.p = Off;
 800f82c:	4b72      	ldr	r3, [pc, #456]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f82e:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800f832:	f36f 0200 	bfc	r2, #0, #1
 800f836:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                    break;
 800f83a:	e6ae      	b.n	800f59a <gc_execute_block+0x1b62>
                    if (!settings_read_coord_data(gc_block.non_modal_command == NonModal_GoHome_0 ? CoordinateSystem_G28 : CoordinateSystem_G30, &gc_block.values.coord_data.xyz))
 800f83c:	2009      	movs	r0, #9
 800f83e:	e7cb      	b.n	800f7d8 <gc_execute_block+0x1da0>
                        } while(idx);
 800f840:	2b00      	cmp	r3, #0
 800f842:	f43f aeaa 	beq.w	800f59a <gc_execute_block+0x1b62>
                            if (bit_isfalse(axis_words.mask, bit(--idx)))
 800f846:	3b01      	subs	r3, #1
 800f848:	fa24 f203 	lsr.w	r2, r4, r3
 800f84c:	f012 0f01 	tst.w	r2, #1
 800f850:	d1f6      	bne.n	800f840 <gc_execute_block+0x1e08>
                                gc_block.values.coord_data.xyz[idx] = gc_state.position[idx];
 800f852:	f103 011a 	add.w	r1, r3, #26
 800f856:	4a69      	ldr	r2, [pc, #420]	@ (800f9fc <gc_execute_block+0x1fc4>)
 800f858:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f85c:	6810      	ldr	r0, [r2, #0]
 800f85e:	f103 0122 	add.w	r1, r3, #34	@ 0x22
 800f862:	4a65      	ldr	r2, [pc, #404]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f864:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f868:	6090      	str	r0, [r2, #8]
 800f86a:	e7e9      	b.n	800f840 <gc_execute_block+0x1e08>
                    if (!(gc_block.modal.motion == MotionMode_Seek || gc_block.modal.motion == MotionMode_Linear))
 800f86c:	4b62      	ldr	r3, [pc, #392]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f86e:	891b      	ldrh	r3, [r3, #8]
 800f870:	2b01      	cmp	r3, #1
 800f872:	f67f ae92 	bls.w	800f59a <gc_execute_block+0x1b62>
                        FAIL(Status_GcodeG53InvalidMotionMode); // [G53 G0/1 not active]
 800f876:	241e      	movs	r4, #30
 800f878:	f7fe b9bb 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        axis_command = AxisCommand_None; // Set to none if no intermediate motion.
 800f87c:	46a2      	mov	sl, r4
 800f87e:	e68c      	b.n	800f59a <gc_execute_block+0x1b62>
        if (axis_words.mask && axis_command != AxisCommand_NonModal) // [No axis words allowed]
 800f880:	fa5f f38b 	uxtb.w	r3, fp
 800f884:	b11b      	cbz	r3, 800f88e <gc_execute_block+0x1e56>
 800f886:	f1ba 0f01 	cmp.w	sl, #1
 800f88a:	f041 87ac 	bne.w	80117e6 <gc_execute_block+0x3dae>
        gc_block.modal.retract_mode = CCRetractMode_Previous;
 800f88e:	4b5a      	ldr	r3, [pc, #360]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f890:	2200      	movs	r2, #0
 800f892:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800f896:	e689      	b.n	800f5ac <gc_execute_block+0x1b74>
        gc_parser_flags.motion_mode_changed = gc_block.modal.motion != gc_state.modal.motion;
 800f898:	4b58      	ldr	r3, [pc, #352]	@ (800f9fc <gc_execute_block+0x1fc4>)
 800f89a:	8819      	ldrh	r1, [r3, #0]
 800f89c:	1a6b      	subs	r3, r5, r1
 800f89e:	bf18      	it	ne
 800f8a0:	2301      	movne	r3, #1
 800f8a2:	f363 2849 	bfi	r8, r3, #9, #1
        if (gc_block.modal.motion == MotionMode_Seek) {
 800f8a6:	b935      	cbnz	r5, 800f8b6 <gc_execute_block+0x1e7e>
            if (!axis_words.mask)
 800f8a8:	fa5f f38b 	uxtb.w	r3, fp
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	f47f ae7d 	bne.w	800f5ac <gc_execute_block+0x1b74>
                axis_command = AxisCommand_None;
 800f8b2:	469a      	mov	sl, r3
 800f8b4:	e67a      	b.n	800f5ac <gc_execute_block+0x1b74>
            if(!gc_block.modal.canned_cycle_active)
 800f8b6:	4b50      	ldr	r3, [pc, #320]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f8b8:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800f8bc:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8be:	b91b      	cbnz	r3, 800f8c8 <gc_execute_block+0x1e90>
                gc_block.modal.retract_mode = CCRetractMode_Previous;
 800f8c0:	4b4d      	ldr	r3, [pc, #308]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            if(gc_block.modal.spindle.rpm_mode == SpindleSpeedMode_CSS && (!gc_block.modal.spindle.state.on || gc_block.values.s == 0.0f))
 800f8c8:	4b4b      	ldr	r3, [pc, #300]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f8ca:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800f8ce:	2b01      	cmp	r3, #1
 800f8d0:	d06e      	beq.n	800f9b0 <gc_execute_block+0x1f78>
            if (gc_block.modal.motion == MotionMode_SpindleSynchronized) {
 800f8d2:	2d21      	cmp	r5, #33	@ 0x21
 800f8d4:	d07e      	beq.n	800f9d4 <gc_execute_block+0x1f9c>
            } else if (gc_block.modal.motion == MotionMode_Threading) {
 800f8d6:	2d4c      	cmp	r5, #76	@ 0x4c
 800f8d8:	f000 8098 	beq.w	800fa0c <gc_execute_block+0x1fd4>
            } else if (gc_block.values.f == 0.0f)
 800f8dc:	4b46      	ldr	r3, [pc, #280]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f8de:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800f8e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ea:	f001 87b8 	beq.w	801185e <gc_execute_block+0x3e26>
            if (gc_block.modal.canned_cycle_active) {
 800f8ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	f000 832c 	beq.w	800ff4e <gc_execute_block+0x2516>
                if(gc_parser_flags.canned_cycle_change) {
 800f8f6:	f018 0102 	ands.w	r1, r8, #2
 800f8fa:	d029      	beq.n	800f950 <gc_execute_block+0x1f18>
                    if(gc_state.modal.feed_mode == FeedMode_InverseTime)
 800f8fc:	4b3f      	ldr	r3, [pc, #252]	@ (800f9fc <gc_execute_block+0x1fc4>)
 800f8fe:	789b      	ldrb	r3, [r3, #2]
 800f900:	2b01      	cmp	r3, #1
 800f902:	f001 87af 	beq.w	8011864 <gc_execute_block+0x3e2c>
                    if(!gc_block.words.r)
 800f906:	4b3c      	ldr	r3, [pc, #240]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f908:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f90c:	f013 0f04 	tst.w	r3, #4
 800f910:	f001 87ab 	beq.w	801186a <gc_execute_block+0x3e32>
                    if(!(axis_words.mask & bit(plane.axis_linear)))
 800f914:	fa5f f38b 	uxtb.w	r3, fp
 800f918:	f89d 208a 	ldrb.w	r2, [sp, #138]	@ 0x8a
 800f91c:	40d3      	lsrs	r3, r2
 800f91e:	f013 0f01 	tst.w	r3, #1
 800f922:	f001 87a5 	beq.w	8011870 <gc_execute_block+0x3e38>
                    gc_state.canned.dwell = 0.0f;
 800f926:	4b35      	ldr	r3, [pc, #212]	@ (800f9fc <gc_execute_block+0x1fc4>)
 800f928:	2000      	movs	r0, #0
 800f92a:	6458      	str	r0, [r3, #68]	@ 0x44
                    gc_state.canned.xyz[plane.axis_0] = 0.0f;
 800f92c:	f89d 2088 	ldrb.w	r2, [sp, #136]	@ 0x88
 800f930:	320c      	adds	r2, #12
 800f932:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f936:	6050      	str	r0, [r2, #4]
                    gc_state.canned.xyz[plane.axis_1] = 0.0f;
 800f938:	f89d 2089 	ldrb.w	r2, [sp, #137]	@ 0x89
 800f93c:	320c      	adds	r2, #12
 800f93e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f942:	6050      	str	r0, [r2, #4]
                    gc_state.canned.rapid_retract = On;
 800f944:	2201      	movs	r2, #1
 800f946:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                    gc_state.canned.spindle_off = Off;
 800f94a:	2200      	movs	r2, #0
 800f94c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
                if(!gc_block.words.l)
 800f950:	4b29      	ldr	r3, [pc, #164]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f952:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800f956:	f013 0f10 	tst.w	r3, #16
 800f95a:	f040 81eb 	bne.w	800fd34 <gc_execute_block+0x22fc>
                    gc_block.values.l = 1;
 800f95e:	4b26      	ldr	r3, [pc, #152]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f960:	2201      	movs	r2, #1
 800f962:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                if(gc_block.words.r)
 800f966:	4b24      	ldr	r3, [pc, #144]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f968:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f96c:	f013 0f04 	tst.w	r3, #4
 800f970:	d01c      	beq.n	800f9ac <gc_execute_block+0x1f74>
                    gc_state.canned.retract_position = gc_block.values.r * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f) +
 800f972:	4b21      	ldr	r3, [pc, #132]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f974:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800f978:	7adb      	ldrb	r3, [r3, #11]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	f000 81e3 	beq.w	800fd46 <gc_execute_block+0x230e>
 800f980:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800fa08 <gc_execute_block+0x1fd0>
 800f984:	ee27 7a87 	vmul.f32	s14, s15, s14
                                                        (gc_block.modal.distance_incremental
 800f988:	4b1b      	ldr	r3, [pc, #108]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f98a:	7b1b      	ldrb	r3, [r3, #12]
                                                          : gc_get_block_offset(&gc_block, plane.axis_linear));
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	f000 81dd 	beq.w	800fd4c <gc_execute_block+0x2314>
                                                          ? gc_state.position[plane.axis_linear]
 800f992:	f89d 208a 	ldrb.w	r2, [sp, #138]	@ 0x8a
                                                          : gc_get_block_offset(&gc_block, plane.axis_linear));
 800f996:	321a      	adds	r2, #26
 800f998:	4b18      	ldr	r3, [pc, #96]	@ (800f9fc <gc_execute_block+0x1fc4>)
 800f99a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f99e:	edd3 7a00 	vldr	s15, [r3]
                    gc_state.canned.retract_position = gc_block.values.r * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f) +
 800f9a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9a6:	4b15      	ldr	r3, [pc, #84]	@ (800f9fc <gc_execute_block+0x1fc4>)
 800f9a8:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
 800f9ac:	2303      	movs	r3, #3
 800f9ae:	e1fd      	b.n	800fdac <gc_execute_block+0x2374>
            if(gc_block.modal.spindle.rpm_mode == SpindleSpeedMode_CSS && (!gc_block.modal.spindle.state.on || gc_block.values.s == 0.0f))
 800f9b0:	4b11      	ldr	r3, [pc, #68]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f9b2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800f9b6:	f013 0f01 	tst.w	r3, #1
 800f9ba:	f001 8717 	beq.w	80117ec <gc_execute_block+0x3db4>
 800f9be:	4b0e      	ldr	r3, [pc, #56]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f9c0:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800f9c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9cc:	d181      	bne.n	800f8d2 <gc_execute_block+0x1e9a>
                 FAIL(Status_GcodeSpindleNotRunning);
 800f9ce:	2429      	movs	r4, #41	@ 0x29
 800f9d0:	f7fe b90f 	b.w	800dbf2 <gc_execute_block+0x1ba>
                if(!gc_state.spindle.hal->get_data)
 800f9d4:	4b09      	ldr	r3, [pc, #36]	@ (800f9fc <gc_execute_block+0x1fc4>)
 800f9d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f9d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	f001 8709 	beq.w	80117f2 <gc_execute_block+0x3dba>
                if(gc_block.values.k == 0.0f)
 800f9e0:	4b05      	ldr	r3, [pc, #20]	@ (800f9f8 <gc_execute_block+0x1fc0>)
 800f9e2:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800f9e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ee:	f001 8703 	beq.w	80117f8 <gc_execute_block+0x3dc0>
                gc_parser_flags.spindle_force_sync = On;
 800f9f2:	f048 0820 	orr.w	r8, r8, #32
 800f9f6:	e77a      	b.n	800f8ee <gc_execute_block+0x1eb6>
 800f9f8:	2000150c 	.word	0x2000150c
 800f9fc:	20001614 	.word	0x20001614
 800fa00:	2000159c 	.word	0x2000159c
 800fa04:	477fff00 	.word	0x477fff00
 800fa08:	41cb3333 	.word	0x41cb3333
                if(!gc_state.spindle.hal->get_data)
 800fa0c:	4baf      	ldr	r3, [pc, #700]	@ (800fccc <gc_execute_block+0x2294>)
 800fa0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fa10:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	f001 86f3 	beq.w	80117fe <gc_execute_block+0x3dc6>
                if(gc_block.modal.plane_select != PlaneSelect_ZX)
 800fa18:	4bad      	ldr	r3, [pc, #692]	@ (800fcd0 <gc_execute_block+0x2298>)
 800fa1a:	7b9b      	ldrb	r3, [r3, #14]
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	f041 86f1 	bne.w	8011804 <gc_execute_block+0x3dcc>
                if(axis_words.mask & ~(bit(X_AXIS)|bit(Z_AXIS)))
 800fa22:	fa5f f48b 	uxtb.w	r4, fp
 800fa26:	f01b 0ffa 	tst.w	fp, #250	@ 0xfa
 800fa2a:	f041 86ee 	bne.w	801180a <gc_execute_block+0x3dd2>
                if(gc_block.words.r && gc_block.values.r < 1.0f)
 800fa2e:	4ba8      	ldr	r3, [pc, #672]	@ (800fcd0 <gc_execute_block+0x2298>)
 800fa30:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800fa34:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa36:	f013 0304 	ands.w	r3, r3, #4
 800fa3a:	930c      	str	r3, [sp, #48]	@ 0x30
 800fa3c:	d00a      	beq.n	800fa54 <gc_execute_block+0x201c>
 800fa3e:	4ba4      	ldr	r3, [pc, #656]	@ (800fcd0 <gc_execute_block+0x2298>)
 800fa40:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 800fa44:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fa48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fa4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa50:	f101 86de 	bmi.w	8011810 <gc_execute_block+0x3dd8>
                if(!axis_words.z || !(gc_block.words.i || gc_block.words.j || gc_block.words.k || gc_block.words.p))
 800fa54:	f014 0f04 	tst.w	r4, #4
 800fa58:	f001 86dd 	beq.w	8011816 <gc_execute_block+0x3dde>
 800fa5c:	4b9c      	ldr	r3, [pc, #624]	@ (800fcd0 <gc_execute_block+0x2298>)
 800fa5e:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 800fa62:	4b9c      	ldr	r3, [pc, #624]	@ (800fcd4 <gc_execute_block+0x229c>)
 800fa64:	4003      	ands	r3, r0
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	f001 86d8 	beq.w	801181c <gc_execute_block+0x3de4>
                if(gc_block.values.p < 0.0f || gc_block.values.ijk[J_VALUE] < 0.0f || gc_block.values.ijk[K_VALUE] < 0.0f)
 800fa6c:	4b98      	ldr	r3, [pc, #608]	@ (800fcd0 <gc_execute_block+0x2298>)
 800fa6e:	ed93 aa17 	vldr	s20, [r3, #92]	@ 0x5c
 800fa72:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 800fa76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa7a:	f101 86d2 	bmi.w	8011822 <gc_execute_block+0x3dea>
 800fa7e:	ed93 9a13 	vldr	s18, [r3, #76]	@ 0x4c
 800fa82:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800fa86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa8a:	f101 86cd 	bmi.w	8011828 <gc_execute_block+0x3df0>
 800fa8e:	edd3 9a14 	vldr	s19, [r3, #80]	@ 0x50
 800fa92:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 800fa96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa9a:	f101 86c8 	bmi.w	801182e <gc_execute_block+0x3df6>
                if(gc_block.values.ijk[I_VALUE] == 0.0f ||
 800fa9e:	edd3 8a12 	vldr	s17, [r3, #72]	@ 0x48
 800faa2:	eef5 8a40 	vcmp.f32	s17, #0.0
 800faa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faaa:	f001 86c3 	beq.w	8011834 <gc_execute_block+0x3dfc>
 800faae:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fab6:	f001 86c0 	beq.w	801183a <gc_execute_block+0x3e02>
                    gc_block.values.ijk[J_VALUE] == 0.0f ||
 800faba:	eeb4 9ae9 	vcmpe.f32	s18, s19
 800fabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac2:	f281 86bd 	bge.w	8011840 <gc_execute_block+0x3e08>
                      (gc_block.words.l && (gc_taper_type)gc_block.values.l > Taper_Both))
 800fac6:	f893 60b9 	ldrb.w	r6, [r3, #185]	@ 0xb9
                     gc_block.values.ijk[K_VALUE] <= gc_block.values.ijk[J_VALUE] ||
 800faca:	f016 0310 	ands.w	r3, r6, #16
 800face:	930d      	str	r3, [sp, #52]	@ 0x34
 800fad0:	d005      	beq.n	800fade <gc_execute_block+0x20a6>
                      (gc_block.words.l && (gc_taper_type)gc_block.values.l > Taper_Both))
 800fad2:	4b7f      	ldr	r3, [pc, #508]	@ (800fcd0 <gc_execute_block+0x2298>)
 800fad4:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800fad8:	2b03      	cmp	r3, #3
 800fada:	f201 86b4 	bhi.w	8011846 <gc_execute_block+0x3e0e>
                if(gc_state.spindle.rpm < gc_state.spindle.hal->rpm_min || gc_state.spindle.rpm > gc_state.spindle.hal->rpm_max)
 800fade:	4b7b      	ldr	r3, [pc, #492]	@ (800fccc <gc_execute_block+0x2294>)
 800fae0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800fae4:	ed92 7a05 	vldr	s14, [r2, #20]
 800fae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800faec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf0:	f101 86ac 	bmi.w	801184c <gc_execute_block+0x3e14>
 800faf4:	ed92 7a06 	vldr	s14, [r2, #24]
 800faf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb00:	f301 86a7 	bgt.w	8011852 <gc_execute_block+0x3e1a>
                if(gc_block.modal.motion != gc_state.modal.motion) {
 800fb04:	428d      	cmp	r5, r1
 800fb06:	f040 80d4 	bne.w	800fcb2 <gc_execute_block+0x227a>
                thread.pitch = gc_block.values.p;
 800fb0a:	4b73      	ldr	r3, [pc, #460]	@ (800fcd8 <gc_execute_block+0x22a0>)
 800fb0c:	ed83 aa00 	vstr	s20, [r3]
                thread.z_final = gc_block.values.xyz[Z_AXIS];
 800fb10:	4a6f      	ldr	r2, [pc, #444]	@ (800fcd0 <gc_execute_block+0x2298>)
 800fb12:	ed92 8a23 	vldr	s16, [r2, #140]	@ 0x8c
 800fb16:	ed83 8a01 	vstr	s16, [r3, #4]
                thread.cut_direction = gc_block.values.ijk[I_VALUE] < 0.0f ? -1.0f : 1.0f;
 800fb1a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800fb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb22:	f100 80d0 	bmi.w	800fcc6 <gc_execute_block+0x228e>
 800fb26:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800fb2a:	4b6b      	ldr	r3, [pc, #428]	@ (800fcd8 <gc_execute_block+0x22a0>)
 800fb2c:	625a      	str	r2, [r3, #36]	@ 0x24
                thread.peak = fabsf(gc_block.values.ijk[I_VALUE]);
 800fb2e:	eef0 8ae8 	vabs.f32	s17, s17
 800fb32:	edc3 8a02 	vstr	s17, [r3, #8]
                thread.initial_depth = gc_block.values.ijk[J_VALUE];
 800fb36:	ed83 9a03 	vstr	s18, [r3, #12]
                thread.depth = gc_block.values.ijk[K_VALUE];
 800fb3a:	edc3 9a04 	vstr	s19, [r3, #16]
                if(gc_block.modal.units_imperial) {
 800fb3e:	4b64      	ldr	r3, [pc, #400]	@ (800fcd0 <gc_execute_block+0x2298>)
 800fb40:	7adb      	ldrb	r3, [r3, #11]
 800fb42:	b173      	cbz	r3, 800fb62 <gc_execute_block+0x212a>
                    thread.peak *= MM_PER_INCH;
 800fb44:	4b64      	ldr	r3, [pc, #400]	@ (800fcd8 <gc_execute_block+0x22a0>)
 800fb46:	eddf 7a65 	vldr	s15, [pc, #404]	@ 800fcdc <gc_execute_block+0x22a4>
 800fb4a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800fb4e:	edc3 8a02 	vstr	s17, [r3, #8]
                    thread.initial_depth *= MM_PER_INCH;
 800fb52:	ee29 9a27 	vmul.f32	s18, s18, s15
 800fb56:	ed83 9a03 	vstr	s18, [r3, #12]
                    thread.depth *= MM_PER_INCH;
 800fb5a:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800fb5e:	edc3 9a04 	vstr	s19, [r3, #16]
                if(gc_block.modal.diameter_mode) {
 800fb62:	4b5b      	ldr	r3, [pc, #364]	@ (800fcd0 <gc_execute_block+0x2298>)
 800fb64:	7b5b      	ldrb	r3, [r3, #13]
 800fb66:	b1a3      	cbz	r3, 800fb92 <gc_execute_block+0x215a>
                    thread.peak /= 2.0f;
 800fb68:	4b5b      	ldr	r3, [pc, #364]	@ (800fcd8 <gc_execute_block+0x22a0>)
 800fb6a:	edd3 7a02 	vldr	s15, [r3, #8]
 800fb6e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800fb72:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb76:	edc3 7a02 	vstr	s15, [r3, #8]
                    thread.initial_depth /= 2.0f;
 800fb7a:	edd3 7a03 	vldr	s15, [r3, #12]
 800fb7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb82:	edc3 7a03 	vstr	s15, [r3, #12]
                    thread.depth /= 2.0f;
 800fb86:	edd3 7a04 	vldr	s15, [r3, #16]
 800fb8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb8e:	edc3 7a04 	vstr	s15, [r3, #16]
                if(axis_words.x) {
 800fb92:	f014 0f01 	tst.w	r4, #1
 800fb96:	f040 80a5 	bne.w	800fce4 <gc_execute_block+0x22ac>
                if(gc_block.words.h)
 800fb9a:	f016 0f08 	tst.w	r6, #8
 800fb9e:	d004      	beq.n	800fbaa <gc_execute_block+0x2172>
                    thread.spring_passes = (uint_fast16_t)gc_block.values.h;
 800fba0:	4b4b      	ldr	r3, [pc, #300]	@ (800fcd0 <gc_execute_block+0x2298>)
 800fba2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800fba6:	4b4c      	ldr	r3, [pc, #304]	@ (800fcd8 <gc_execute_block+0x22a0>)
 800fba8:	629a      	str	r2, [r3, #40]	@ 0x28
                if(gc_block.words.l)
 800fbaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fbac:	b12b      	cbz	r3, 800fbba <gc_execute_block+0x2182>
                    thread.end_taper_type = (gc_taper_type)gc_block.values.l;
 800fbae:	4b48      	ldr	r3, [pc, #288]	@ (800fcd0 <gc_execute_block+0x2298>)
 800fbb0:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 800fbb4:	4b48      	ldr	r3, [pc, #288]	@ (800fcd8 <gc_execute_block+0x22a0>)
 800fbb6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                if(gc_block.words.e)
 800fbba:	f016 0f01 	tst.w	r6, #1
 800fbbe:	d003      	beq.n	800fbc8 <gc_execute_block+0x2190>
                    thread.end_taper_length = gc_block.values.e;
 800fbc0:	4b43      	ldr	r3, [pc, #268]	@ (800fcd0 <gc_execute_block+0x2298>)
 800fbc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fbc4:	4b44      	ldr	r3, [pc, #272]	@ (800fcd8 <gc_execute_block+0x22a0>)
 800fbc6:	61da      	str	r2, [r3, #28]
                if(thread.end_taper_length <= 0.0f || thread.end_taper_type == Taper_None) {
 800fbc8:	4b43      	ldr	r3, [pc, #268]	@ (800fcd8 <gc_execute_block+0x22a0>)
 800fbca:	edd3 7a07 	vldr	s15, [r3, #28]
 800fbce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbd6:	d902      	bls.n	800fbde <gc_execute_block+0x21a6>
 800fbd8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800fbdc:	b92b      	cbnz	r3, 800fbea <gc_execute_block+0x21b2>
                    thread.end_taper_length = 0.0f;
 800fbde:	4b3e      	ldr	r3, [pc, #248]	@ (800fcd8 <gc_execute_block+0x22a0>)
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	61da      	str	r2, [r3, #28]
                    thread.end_taper_type = Taper_None;
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                if(thread.end_taper_type != Taper_None && thread.end_taper_length > abs(thread.z_final - gc_state.position[Z_AXIS]) / 2.0f)
 800fbea:	4b3b      	ldr	r3, [pc, #236]	@ (800fcd8 <gc_execute_block+0x22a0>)
 800fbec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800fbf0:	b1e3      	cbz	r3, 800fc2c <gc_execute_block+0x21f4>
 800fbf2:	4b39      	ldr	r3, [pc, #228]	@ (800fcd8 <gc_execute_block+0x22a0>)
 800fbf4:	ed93 7a07 	vldr	s14, [r3, #28]
 800fbf8:	4b34      	ldr	r3, [pc, #208]	@ (800fccc <gc_execute_block+0x2294>)
 800fbfa:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 800fbfe:	ee78 7a67 	vsub.f32	s15, s16, s15
 800fc02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc06:	ee17 3a90 	vmov	r3, s15
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	bfb8      	it	lt
 800fc0e:	425b      	neglt	r3, r3
 800fc10:	ee07 3a90 	vmov	s15, r3
 800fc14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc18:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800fc1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fc20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc28:	f301 8616 	bgt.w	8011858 <gc_execute_block+0x3e20>
                if(gc_block.words.r)
 800fc2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc2e:	b11b      	cbz	r3, 800fc38 <gc_execute_block+0x2200>
                    thread.depth_degression = gc_block.values.r;
 800fc30:	4b27      	ldr	r3, [pc, #156]	@ (800fcd0 <gc_execute_block+0x2298>)
 800fc32:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800fc34:	4b28      	ldr	r3, [pc, #160]	@ (800fcd8 <gc_execute_block+0x22a0>)
 800fc36:	615a      	str	r2, [r3, #20]
                if(gc_block.words.q)
 800fc38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc3a:	f013 0f02 	tst.w	r3, #2
 800fc3e:	d003      	beq.n	800fc48 <gc_execute_block+0x2210>
                    thread.infeed_angle = gc_block.values.q;
 800fc40:	4b23      	ldr	r3, [pc, #140]	@ (800fcd0 <gc_execute_block+0x2298>)
 800fc42:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800fc44:	4b24      	ldr	r3, [pc, #144]	@ (800fcd8 <gc_execute_block+0x22a0>)
 800fc46:	621a      	str	r2, [r3, #32]
                gc_parser_flags.spindle_force_sync = On;
 800fc48:	f048 0820 	orr.w	r8, r8, #32
                gc_block.words.e = gc_block.words.h = gc_block.words.i = gc_block.words.j = gc_block.words.k = gc_block.words.l = gc_block.words.p = gc_block.words.q = gc_block.words.r = Off;
 800fc4c:	4b20      	ldr	r3, [pc, #128]	@ (800fcd0 <gc_execute_block+0x2298>)
 800fc4e:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800fc52:	f36f 0282 	bfc	r2, #2, #1
 800fc56:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800fc5a:	b2d2      	uxtb	r2, r2
 800fc5c:	f36f 0241 	bfc	r2, #1, #1
 800fc60:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800fc64:	b2d2      	uxtb	r2, r2
 800fc66:	f36f 0200 	bfc	r2, #0, #1
 800fc6a:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800fc6e:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800fc72:	f36f 1204 	bfc	r2, #4, #1
 800fc76:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800fc7a:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800fc7e:	f36f 1286 	bfc	r2, #6, #1
 800fc82:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800fc86:	b2d2      	uxtb	r2, r2
 800fc88:	f36f 1245 	bfc	r2, #5, #1
 800fc8c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800fc90:	b2d2      	uxtb	r2, r2
 800fc92:	f36f 1204 	bfc	r2, #4, #1
 800fc96:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800fc9a:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800fc9e:	f36f 02c3 	bfc	r2, #3, #1
 800fca2:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800fca6:	b2d2      	uxtb	r2, r2
 800fca8:	f36f 0200 	bfc	r2, #0, #1
 800fcac:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800fcb0:	e61d      	b.n	800f8ee <gc_execute_block+0x1eb6>
                    memset(&thread, 0, sizeof(gc_thread_data));
 800fcb2:	2230      	movs	r2, #48	@ 0x30
 800fcb4:	2100      	movs	r1, #0
 800fcb6:	4808      	ldr	r0, [pc, #32]	@ (800fcd8 <gc_execute_block+0x22a0>)
 800fcb8:	f015 f935 	bl	8024f26 <memset>
                    thread.depth_degression = 1.0f;
 800fcbc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800fcc0:	4a05      	ldr	r2, [pc, #20]	@ (800fcd8 <gc_execute_block+0x22a0>)
 800fcc2:	6153      	str	r3, [r2, #20]
 800fcc4:	e721      	b.n	800fb0a <gc_execute_block+0x20d2>
                thread.cut_direction = gc_block.values.ijk[I_VALUE] < 0.0f ? -1.0f : 1.0f;
 800fcc6:	4a06      	ldr	r2, [pc, #24]	@ (800fce0 <gc_execute_block+0x22a8>)
 800fcc8:	e72f      	b.n	800fb2a <gc_execute_block+0x20f2>
 800fcca:	bf00      	nop
 800fccc:	20001614 	.word	0x20001614
 800fcd0:	2000150c 	.word	0x2000150c
 800fcd4:	00010070 	.word	0x00010070
 800fcd8:	200015e4 	.word	0x200015e4
 800fcdc:	41cb3333 	.word	0x41cb3333
 800fce0:	bf800000 	.word	0xbf800000
                    thread.main_taper_height = gc_block.values.xyz[X_AXIS] - gc_get_block_offset(&gc_block, X_AXIS);
 800fce4:	4bb4      	ldr	r3, [pc, #720]	@ (800ffb8 <gc_execute_block+0x2580>)
 800fce6:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
    return gc_block->modal.coord_system.xyz[idx] + gc_state.g92_coord_offset[idx] + gc_state.tool_length_offset[idx];
 800fcea:	ed93 7a04 	vldr	s14, [r3, #16]
 800fcee:	4ab3      	ldr	r2, [pc, #716]	@ (800ffbc <gc_execute_block+0x2584>)
 800fcf0:	edd2 6a2e 	vldr	s13, [r2, #184]	@ 0xb8
 800fcf4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fcf8:	edd2 6a31 	vldr	s13, [r2, #196]	@ 0xc4
 800fcfc:	ee37 7a26 	vadd.f32	s14, s14, s13
                    thread.main_taper_height = gc_block.values.xyz[X_AXIS] - gc_get_block_offset(&gc_block, X_AXIS);
 800fd00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd04:	4cae      	ldr	r4, [pc, #696]	@ (800ffc0 <gc_execute_block+0x2588>)
 800fd06:	edc4 7a06 	vstr	s15, [r4, #24]
                    gc_block.values.p = fabsf(thread.z_final - gc_state.position[Z_AXIS]);
 800fd0a:	ed92 0a1c 	vldr	s0, [r2, #112]	@ 0x70
 800fd0e:	ee38 0a40 	vsub.f32	s0, s16, s0
 800fd12:	eef0 8ac0 	vabs.f32	s17, s0
 800fd16:	edc3 8a17 	vstr	s17, [r3, #92]	@ 0x5c
    return sqrtf(x * x + y * y);
 800fd1a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fd1e:	ee07 0aa7 	vmla.f32	s0, s15, s15
 800fd22:	f017 fe61 	bl	80279e8 <sqrtf>
                    thread.pitch = thread.pitch * hypot_f(thread.main_taper_height, gc_block.values.p) / gc_block.values.p;
 800fd26:	ee2a aa00 	vmul.f32	s20, s20, s0
 800fd2a:	eeca 7a28 	vdiv.f32	s15, s20, s17
 800fd2e:	edc4 7a00 	vstr	s15, [r4]
 800fd32:	e732      	b.n	800fb9a <gc_execute_block+0x2162>
                else if(gc_block.values.l <= 0)
 800fd34:	4ba0      	ldr	r3, [pc, #640]	@ (800ffb8 <gc_execute_block+0x2580>)
 800fd36:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	f47f ae13 	bne.w	800f966 <gc_execute_block+0x1f2e>
                    FAIL(Status_NonPositiveValue); // [L <= 0]
 800fd40:	2413      	movs	r4, #19
 800fd42:	f7fd bf56 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    gc_state.canned.retract_position = gc_block.values.r * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f) +
 800fd46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fd4a:	e61b      	b.n	800f984 <gc_execute_block+0x1f4c>
                                                          : gc_get_block_offset(&gc_block, plane.axis_linear));
 800fd4c:	f89d 308a 	ldrb.w	r3, [sp, #138]	@ 0x8a
    return gc_block->modal.coord_system.xyz[idx] + gc_state.g92_coord_offset[idx] + gc_state.tool_length_offset[idx];
 800fd50:	1d18      	adds	r0, r3, #4
 800fd52:	4a99      	ldr	r2, [pc, #612]	@ (800ffb8 <gc_execute_block+0x2580>)
 800fd54:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800fd58:	edd2 7a00 	vldr	s15, [r2]
 800fd5c:	4a97      	ldr	r2, [pc, #604]	@ (800ffbc <gc_execute_block+0x2584>)
 800fd5e:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 800fd62:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800fd66:	edd0 6a00 	vldr	s13, [r0]
 800fd6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd6e:	3330      	adds	r3, #48	@ 0x30
 800fd70:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fd74:	edd2 6a01 	vldr	s13, [r2, #4]
 800fd78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd7c:	e611      	b.n	800f9a2 <gc_execute_block+0x1f6a>
                        else if(gc_block.modal.distance_incremental)
 800fd7e:	4a8e      	ldr	r2, [pc, #568]	@ (800ffb8 <gc_execute_block+0x2580>)
 800fd80:	7b12      	ldrb	r2, [r2, #12]
 800fd82:	b192      	cbz	r2, 800fdaa <gc_execute_block+0x2372>
                            gc_state.canned.xyz[idx] = gc_state.canned.retract_position + (gc_state.canned.xyz[idx] - gc_state.position[idx]);
 800fd84:	4a8d      	ldr	r2, [pc, #564]	@ (800ffbc <gc_execute_block+0x2584>)
 800fd86:	ed92 7a12 	vldr	s14, [r2, #72]	@ 0x48
 800fd8a:	f103 001a 	add.w	r0, r3, #26
 800fd8e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800fd92:	edd0 6a00 	vldr	s13, [r0]
 800fd96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fd9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd9e:	f103 000c 	add.w	r0, r3, #12
 800fda2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800fda6:	edc2 7a01 	vstr	s15, [r2, #4]
                } while(idx);
 800fdaa:	b343      	cbz	r3, 800fdfe <gc_execute_block+0x23c6>
                    if(bit_istrue(axis_words.mask, bit(--idx))) {
 800fdac:	fa5f f28b 	uxtb.w	r2, fp
 800fdb0:	3b01      	subs	r3, #1
 800fdb2:	40da      	lsrs	r2, r3
 800fdb4:	f012 0f01 	tst.w	r2, #1
 800fdb8:	d0f7      	beq.n	800fdaa <gc_execute_block+0x2372>
                        gc_state.canned.xyz[idx] = gc_block.values.xyz[idx];
 800fdba:	f103 0020 	add.w	r0, r3, #32
 800fdbe:	4a7e      	ldr	r2, [pc, #504]	@ (800ffb8 <gc_execute_block+0x2580>)
 800fdc0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800fdc4:	edd2 7a01 	vldr	s15, [r2, #4]
 800fdc8:	f103 000c 	add.w	r0, r3, #12
 800fdcc:	4a7b      	ldr	r2, [pc, #492]	@ (800ffbc <gc_execute_block+0x2584>)
 800fdce:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800fdd2:	edc2 7a01 	vstr	s15, [r2, #4]
                        if(idx != plane.axis_linear)
 800fdd6:	f89d 208a 	ldrb.w	r2, [sp, #138]	@ 0x8a
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d0cf      	beq.n	800fd7e <gc_execute_block+0x2346>
                            gc_state.canned.xyz[idx] -= gc_state.position[idx];
 800fdde:	4a77      	ldr	r2, [pc, #476]	@ (800ffbc <gc_execute_block+0x2584>)
 800fde0:	f103 001a 	add.w	r0, r3, #26
 800fde4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800fde8:	ed90 7a00 	vldr	s14, [r0]
 800fdec:	f103 000c 	add.w	r0, r3, #12
 800fdf0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800fdf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fdf8:	edc2 7a01 	vstr	s15, [r2, #4]
 800fdfc:	e7d5      	b.n	800fdaa <gc_execute_block+0x2372>
                if(gc_state.canned.retract_position < gc_state.canned.xyz[plane.axis_linear])
 800fdfe:	4b6f      	ldr	r3, [pc, #444]	@ (800ffbc <gc_execute_block+0x2584>)
 800fe00:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800fe04:	f89d 208a 	ldrb.w	r2, [sp, #138]	@ 0x8a
 800fe08:	320c      	adds	r2, #12
 800fe0a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800fe0e:	ed93 7a01 	vldr	s14, [r3, #4]
 800fe12:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fe16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe1a:	f101 852c 	bmi.w	8011876 <gc_execute_block+0x3e3e>
                gc_block.words.r = gc_block.words.l = Off; // Remove single-meaning value words.
 800fe1e:	4b66      	ldr	r3, [pc, #408]	@ (800ffb8 <gc_execute_block+0x2580>)
 800fe20:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800fe24:	f36f 1204 	bfc	r2, #4, #1
 800fe28:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800fe2c:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800fe30:	f36f 0282 	bfc	r2, #2, #1
 800fe34:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                switch (gc_block.modal.motion) {
 800fe38:	f1a5 0349 	sub.w	r3, r5, #73	@ 0x49
 800fe3c:	2b10      	cmp	r3, #16
 800fe3e:	f63f abb5 	bhi.w	800f5ac <gc_execute_block+0x1b74>
 800fe42:	a201      	add	r2, pc, #4	@ (adr r2, 800fe48 <gc_execute_block+0x2410>)
 800fe44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe48:	0800fef5 	.word	0x0800fef5
 800fe4c:	0800f5ad 	.word	0x0800f5ad
 800fe50:	0800f5ad 	.word	0x0800f5ad
 800fe54:	0800f5ad 	.word	0x0800f5ad
 800fe58:	0800f5ad 	.word	0x0800f5ad
 800fe5c:	0800f5ad 	.word	0x0800f5ad
 800fe60:	0800f5ad 	.word	0x0800f5ad
 800fe64:	0800f5ad 	.word	0x0800f5ad
 800fe68:	0800fed1 	.word	0x0800fed1
 800fe6c:	0800fe9f 	.word	0x0800fe9f
 800fe70:	0800fef5 	.word	0x0800fef5
 800fe74:	0800f5ad 	.word	0x0800f5ad
 800fe78:	0800fed1 	.word	0x0800fed1
 800fe7c:	0800fe8d 	.word	0x0800fe8d
 800fe80:	0800f5ad 	.word	0x0800f5ad
 800fe84:	0800f5ad 	.word	0x0800f5ad
 800fe88:	0800fe8d 	.word	0x0800fe8d
                        gc_state.canned.spindle_off = gc_block.modal.motion == MotionMode_CannedCycle86;
 800fe8c:	2d56      	cmp	r5, #86	@ 0x56
 800fe8e:	bf14      	ite	ne
 800fe90:	2200      	movne	r2, #0
 800fe92:	2201      	moveq	r2, #1
 800fe94:	4b49      	ldr	r3, [pc, #292]	@ (800ffbc <gc_execute_block+0x2584>)
 800fe96:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
                        gc_state.canned.rapid_retract = gc_block.modal.motion == MotionMode_CannedCycle86;
 800fe9a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                        if(gc_block.words.p) {
 800fe9e:	4b46      	ldr	r3, [pc, #280]	@ (800ffb8 <gc_execute_block+0x2580>)
 800fea0:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800fea4:	f013 0f01 	tst.w	r3, #1
 800fea8:	d01f      	beq.n	800feea <gc_execute_block+0x24b2>
                            if(gc_block.values.p < 0.0f)
 800feaa:	4b43      	ldr	r3, [pc, #268]	@ (800ffb8 <gc_execute_block+0x2580>)
 800feac:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 800feb0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800feb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feb8:	f101 84e0 	bmi.w	801187c <gc_execute_block+0x3e44>
                            gc_state.canned.dwell = gc_block.values.p;
 800febc:	4b3f      	ldr	r3, [pc, #252]	@ (800ffbc <gc_execute_block+0x2584>)
 800febe:	edc3 6a11 	vstr	s13, [r3, #68]	@ 0x44
                            gc_block.words.p = Off; // Remove single-meaning value word.
 800fec2:	4b3d      	ldr	r3, [pc, #244]	@ (800ffb8 <gc_execute_block+0x2580>)
 800fec4:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800fec8:	f36f 0200 	bfc	r2, #0, #1
 800fecc:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                        gc_state.canned.delta = - gc_state.canned.xyz[plane.axis_linear] + gc_state.canned.retract_position;
 800fed0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fed4:	4b39      	ldr	r3, [pc, #228]	@ (800ffbc <gc_execute_block+0x2584>)
 800fed6:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
                        if(gc_block.modal.motion == MotionMode_CannedCycle85)
 800feda:	2d55      	cmp	r5, #85	@ 0x55
 800fedc:	f47f ab66 	bne.w	800f5ac <gc_execute_block+0x1b74>
                            gc_state.canned.rapid_retract = Off;
 800fee0:	2200      	movs	r2, #0
 800fee2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 800fee6:	f7ff bb61 	b.w	800f5ac <gc_execute_block+0x1b74>
                        } else if(gc_parser_flags.canned_cycle_change)
 800feea:	2900      	cmp	r1, #0
 800feec:	d0f0      	beq.n	800fed0 <gc_execute_block+0x2498>
                            FAIL(Status_GcodeValueWordMissing);
 800feee:	241c      	movs	r4, #28
 800fef0:	f7fd be7f 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        if(gc_block.words.q) {
 800fef4:	4b30      	ldr	r3, [pc, #192]	@ (800ffb8 <gc_execute_block+0x2580>)
 800fef6:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800fefa:	f013 0f02 	tst.w	r3, #2
 800fefe:	d021      	beq.n	800ff44 <gc_execute_block+0x250c>
                            if(gc_block.values.q <= 0.0f)
 800ff00:	4b2d      	ldr	r3, [pc, #180]	@ (800ffb8 <gc_execute_block+0x2580>)
 800ff02:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800ff06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ff0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff0e:	f241 84b8 	bls.w	8011882 <gc_execute_block+0x3e4a>
                            gc_state.canned.delta = gc_block.values.q * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f);
 800ff12:	7adb      	ldrb	r3, [r3, #11]
 800ff14:	b19b      	cbz	r3, 800ff3e <gc_execute_block+0x2506>
 800ff16:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800ffc4 <gc_execute_block+0x258c>
 800ff1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff1e:	4b27      	ldr	r3, [pc, #156]	@ (800ffbc <gc_execute_block+0x2584>)
 800ff20:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
                            gc_block.words.q = Off; // Remove single-meaning value word.
 800ff24:	4b24      	ldr	r3, [pc, #144]	@ (800ffb8 <gc_execute_block+0x2580>)
 800ff26:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800ff2a:	f36f 0241 	bfc	r2, #1, #1
 800ff2e:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                        gc_state.canned.dwell = 0.25f;
 800ff32:	4b22      	ldr	r3, [pc, #136]	@ (800ffbc <gc_execute_block+0x2584>)
 800ff34:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 800ff38:	645a      	str	r2, [r3, #68]	@ 0x44
                        break;
 800ff3a:	f7ff bb37 	b.w	800f5ac <gc_execute_block+0x1b74>
                            gc_state.canned.delta = gc_block.values.q * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f);
 800ff3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ff42:	e7ea      	b.n	800ff1a <gc_execute_block+0x24e2>
                        } else if(gc_parser_flags.canned_cycle_change)
 800ff44:	2900      	cmp	r1, #0
 800ff46:	d0f4      	beq.n	800ff32 <gc_execute_block+0x24fa>
                            FAIL(Status_GcodeValueWordMissing);
 800ff48:	241c      	movs	r4, #28
 800ff4a:	f7fd be52 	b.w	800dbf2 <gc_execute_block+0x1ba>
            } else switch (gc_block.modal.motion) {
 800ff4e:	2d05      	cmp	r5, #5
 800ff50:	d814      	bhi.n	800ff7c <gc_execute_block+0x2544>
 800ff52:	b22b      	sxth	r3, r5
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	f43f ab29 	beq.w	800f5ac <gc_execute_block+0x1b74>
 800ff5a:	1e6b      	subs	r3, r5, #1
 800ff5c:	2b04      	cmp	r3, #4
 800ff5e:	f63f ab25 	bhi.w	800f5ac <gc_execute_block+0x1b74>
 800ff62:	a201      	add	r2, pc, #4	@ (adr r2, 800ff68 <gc_execute_block+0x2530>)
 800ff64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff68:	0800ffa9 	.word	0x0800ffa9
 800ff6c:	0800ffc9 	.word	0x0800ffc9
 800ff70:	0800ffcd 	.word	0x0800ffcd
 800ff74:	0800f5ad 	.word	0x0800f5ad
 800ff78:	080102e9 	.word	0x080102e9
 800ff7c:	2d33      	cmp	r5, #51	@ 0x33
 800ff7e:	f000 824f 	beq.w	8010420 <gc_execute_block+0x29e8>
 800ff82:	f4ff ab13 	bcc.w	800f5ac <gc_execute_block+0x1b74>
 800ff86:	2d8f      	cmp	r5, #143	@ 0x8f
 800ff88:	f63f ab10 	bhi.w	800f5ac <gc_execute_block+0x1b74>
 800ff8c:	2d8c      	cmp	r5, #140	@ 0x8c
 800ff8e:	f4ff ab0d 	bcc.w	800f5ac <gc_execute_block+0x1b74>
 800ff92:	f1a5 038c 	sub.w	r3, r5, #140	@ 0x8c
 800ff96:	2b03      	cmp	r3, #3
 800ff98:	f63f ab08 	bhi.w	800f5ac <gc_execute_block+0x1b74>
 800ff9c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ffa0:	028d028f 	.word	0x028d028f
 800ffa4:	028d028f 	.word	0x028d028f
                    if (!axis_words.mask)
 800ffa8:	fa5f f38b 	uxtb.w	r3, fp
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	f47f aafd 	bne.w	800f5ac <gc_execute_block+0x1b74>
                        axis_command = AxisCommand_None;
 800ffb2:	469a      	mov	sl, r3
 800ffb4:	f7ff bafa 	b.w	800f5ac <gc_execute_block+0x1b74>
 800ffb8:	2000150c 	.word	0x2000150c
 800ffbc:	20001614 	.word	0x20001614
 800ffc0:	200015e4 	.word	0x200015e4
 800ffc4:	41cb3333 	.word	0x41cb3333
                    gc_parser_flags.arc_is_clockwise = On;
 800ffc8:	f048 0804 	orr.w	r8, r8, #4
                    if (!axis_words.mask)
 800ffcc:	fa5f f18b 	uxtb.w	r1, fp
 800ffd0:	2900      	cmp	r1, #0
 800ffd2:	f001 8459 	beq.w	8011888 <gc_execute_block+0x3e50>
                    if (!(axis_words.mask & (bit(plane.axis_0)|bit(plane.axis_1))))
 800ffd6:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 800ffda:	2201      	movs	r2, #1
 800ffdc:	fa02 f303 	lsl.w	r3, r2, r3
 800ffe0:	f89d 0089 	ldrb.w	r0, [sp, #137]	@ 0x89
 800ffe4:	4082      	lsls	r2, r0
 800ffe6:	4313      	orrs	r3, r2
 800ffe8:	4219      	tst	r1, r3
 800ffea:	f001 8450 	beq.w	801188e <gc_execute_block+0x3e56>
                    if (gc_block.words.p) { // Number of turns
 800ffee:	4bb7      	ldr	r3, [pc, #732]	@ (80102cc <gc_execute_block+0x2894>)
 800fff0:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800fff4:	f013 0f01 	tst.w	r3, #1
 800fff8:	f040 80a8 	bne.w	801014c <gc_execute_block+0x2714>
                        gc_block.arc_turns = 1;
 800fffc:	4bb3      	ldr	r3, [pc, #716]	@ (80102cc <gc_execute_block+0x2894>)
 800fffe:	2201      	movs	r2, #1
 8010000:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
                    x = gc_block.values.xyz[plane.axis_0] - gc_state.position[plane.axis_0]; // Delta x between current position and target
 8010004:	f89d 4088 	ldrb.w	r4, [sp, #136]	@ 0x88
 8010008:	4ab0      	ldr	r2, [pc, #704]	@ (80102cc <gc_execute_block+0x2894>)
 801000a:	f104 0320 	add.w	r3, r4, #32
 801000e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010012:	edd3 7a01 	vldr	s15, [r3, #4]
 8010016:	4bae      	ldr	r3, [pc, #696]	@ (80102d0 <gc_execute_block+0x2898>)
 8010018:	f104 011a 	add.w	r1, r4, #26
 801001c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010020:	ed91 7a00 	vldr	s14, [r1]
 8010024:	ee37 9ac7 	vsub.f32	s18, s15, s14
                    y = gc_block.values.xyz[plane.axis_1] - gc_state.position[plane.axis_1]; // Delta y between current position and target
 8010028:	f89d 5089 	ldrb.w	r5, [sp, #137]	@ 0x89
 801002c:	f105 0120 	add.w	r1, r5, #32
 8010030:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010034:	ed91 8a01 	vldr	s16, [r1, #4]
 8010038:	f105 011a 	add.w	r1, r5, #26
 801003c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8010040:	edd3 7a00 	vldr	s15, [r3]
 8010044:	ee38 8a67 	vsub.f32	s16, s16, s15
                    if (gc_block.words.r) { // Arc Radius Mode
 8010048:	f892 30ba 	ldrb.w	r3, [r2, #186]	@ 0xba
 801004c:	f013 0f04 	tst.w	r3, #4
 8010050:	f000 80a3 	beq.w	801019a <gc_execute_block+0x2762>
                        gc_block.words.r = Off;
 8010054:	4611      	mov	r1, r2
 8010056:	f892 30ba 	ldrb.w	r3, [r2, #186]	@ 0xba
 801005a:	f36f 0382 	bfc	r3, #2, #1
 801005e:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
                        if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 8010062:	220c      	movs	r2, #12
 8010064:	3184      	adds	r1, #132	@ 0x84
 8010066:	489b      	ldr	r0, [pc, #620]	@ (80102d4 <gc_execute_block+0x289c>)
 8010068:	f014 ff33 	bl	8024ed2 <memcmp>
 801006c:	2800      	cmp	r0, #0
 801006e:	f001 8417 	beq.w	80118a0 <gc_execute_block+0x3e68>
                        if (gc_block.modal.units_imperial)
 8010072:	4b96      	ldr	r3, [pc, #600]	@ (80102cc <gc_execute_block+0x2894>)
 8010074:	7adb      	ldrb	r3, [r3, #11]
 8010076:	b143      	cbz	r3, 801008a <gc_execute_block+0x2652>
                            gc_block.values.r *= MM_PER_INCH;
 8010078:	4b94      	ldr	r3, [pc, #592]	@ (80102cc <gc_execute_block+0x2894>)
 801007a:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 801007e:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 80102d8 <gc_execute_block+0x28a0>
 8010082:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010086:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
                        if(gc_state.modal.scaling_active)
 801008a:	4b91      	ldr	r3, [pc, #580]	@ (80102d0 <gc_execute_block+0x2898>)
 801008c:	7f9b      	ldrb	r3, [r3, #30]
 801008e:	b1cb      	cbz	r3, 80100c4 <gc_execute_block+0x268c>
                            gc_block.values.r *= (scale_factor.ijk[plane.axis_0] > scale_factor.ijk[plane.axis_1]
 8010090:	4b8e      	ldr	r3, [pc, #568]	@ (80102cc <gc_execute_block+0x2894>)
 8010092:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8010096:	4b91      	ldr	r3, [pc, #580]	@ (80102dc <gc_execute_block+0x28a4>)
 8010098:	1ca2      	adds	r2, r4, #2
 801009a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801009e:	edd2 6a01 	vldr	s13, [r2, #4]
 80100a2:	1caa      	adds	r2, r5, #2
 80100a4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80100a8:	ed93 7a01 	vldr	s14, [r3, #4]
                                                   : scale_factor.ijk[plane.axis_1]);
 80100ac:	eef4 6ac7 	vcmpe.f32	s13, s14
 80100b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100b4:	dd01      	ble.n	80100ba <gc_execute_block+0x2682>
 80100b6:	eeb0 7a66 	vmov.f32	s14, s13
                            gc_block.values.r *= (scale_factor.ijk[plane.axis_0] > scale_factor.ijk[plane.axis_1]
 80100ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80100be:	4b83      	ldr	r3, [pc, #524]	@ (80102cc <gc_execute_block+0x2894>)
 80100c0:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
                        float h_x2_div_d = 4.0f * gc_block.values.r * gc_block.values.r - x * x - y * y;
 80100c4:	4b81      	ldr	r3, [pc, #516]	@ (80102cc <gc_execute_block+0x2894>)
 80100c6:	edd3 8a19 	vldr	s17, [r3, #100]	@ 0x64
 80100ca:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 80100ce:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80100d2:	ee69 aa09 	vmul.f32	s21, s18, s18
 80100d6:	eeb0 0a6a 	vmov.f32	s0, s21
 80100da:	ee18 0aa7 	vnmls.f32	s0, s17, s15
 80100de:	ee28 aa08 	vmul.f32	s20, s16, s16
 80100e2:	ee30 0a4a 	vsub.f32	s0, s0, s20
                        if (h_x2_div_d < 0.0f)
 80100e6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80100ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ee:	f101 83da 	bmi.w	80118a6 <gc_execute_block+0x3e6e>
                        h_x2_div_d = -sqrtf(h_x2_div_d) / hypot_f(x, y); // == -(h * 2 / d)
 80100f2:	f017 fc79 	bl	80279e8 <sqrtf>
 80100f6:	eef1 9a40 	vneg.f32	s19, s0
    return sqrtf(x * x + y * y);
 80100fa:	ee3a 0a8a 	vadd.f32	s0, s21, s20
 80100fe:	f017 fc73 	bl	80279e8 <sqrtf>
                        h_x2_div_d = -sqrtf(h_x2_div_d) / hypot_f(x, y); // == -(h * 2 / d)
 8010102:	eec9 7a80 	vdiv.f32	s15, s19, s0
                        if (gc_block.modal.motion == MotionMode_CcwArc)
 8010106:	4b71      	ldr	r3, [pc, #452]	@ (80102cc <gc_execute_block+0x2894>)
 8010108:	891b      	ldrh	r3, [r3, #8]
 801010a:	2b03      	cmp	r3, #3
 801010c:	d03a      	beq.n	8010184 <gc_execute_block+0x274c>
                        if (gc_block.values.r < 0.0f) {
 801010e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8010112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010116:	d438      	bmi.n	801018a <gc_execute_block+0x2752>
                        gc_block.values.ijk[plane.axis_0] = 0.5f * (x - (y * h_x2_div_d));
 8010118:	eeb0 7a49 	vmov.f32	s14, s18
 801011c:	ee07 7ac8 	vmls.f32	s14, s15, s16
 8010120:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8010124:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010128:	4b68      	ldr	r3, [pc, #416]	@ (80102cc <gc_execute_block+0x2894>)
 801012a:	f104 0210 	add.w	r2, r4, #16
 801012e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8010132:	ed82 7a02 	vstr	s14, [r2, #8]
                        gc_block.values.ijk[plane.axis_1] = 0.5f * (y + (x * h_x2_div_d));
 8010136:	ee07 8a89 	vmla.f32	s16, s15, s18
 801013a:	ee68 7a26 	vmul.f32	s15, s16, s13
 801013e:	3510      	adds	r5, #16
 8010140:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8010144:	edc3 7a02 	vstr	s15, [r3, #8]
 8010148:	f7ff ba30 	b.w	800f5ac <gc_execute_block+0x1b74>
                        if(!isintf(gc_block.values.p))
 801014c:	4b5f      	ldr	r3, [pc, #380]	@ (80102cc <gc_execute_block+0x2894>)
 801014e:	ed93 0a17 	vldr	s0, [r3, #92]	@ 0x5c
 8010152:	f005 fe8d 	bl	8015e70 <isintf>
 8010156:	2800      	cmp	r0, #0
 8010158:	f001 839c 	beq.w	8011894 <gc_execute_block+0x3e5c>
                        gc_block.arc_turns = (uint32_t)truncf(gc_block.values.p);
 801015c:	4a5b      	ldr	r2, [pc, #364]	@ (80102cc <gc_execute_block+0x2894>)
 801015e:	edd2 7a17 	vldr	s15, [r2, #92]	@ 0x5c
 8010162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010166:	ee17 3a90 	vmov	r3, s15
 801016a:	edc2 7a32 	vstr	s15, [r2, #200]	@ 0xc8
                        if(gc_block.arc_turns == 0)
 801016e:	2b00      	cmp	r3, #0
 8010170:	f001 8393 	beq.w	801189a <gc_execute_block+0x3e62>
                        gc_block.words.p = Off;
 8010174:	4613      	mov	r3, r2
 8010176:	f892 20ba 	ldrb.w	r2, [r2, #186]	@ 0xba
 801017a:	f36f 0200 	bfc	r2, #0, #1
 801017e:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 8010182:	e73f      	b.n	8010004 <gc_execute_block+0x25cc>
                            h_x2_div_d = -h_x2_div_d;
 8010184:	eef1 7a67 	vneg.f32	s15, s15
 8010188:	e7c1      	b.n	801010e <gc_execute_block+0x26d6>
                            h_x2_div_d = -h_x2_div_d;
 801018a:	eef1 7a67 	vneg.f32	s15, s15
                            gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 801018e:	eef1 8a68 	vneg.f32	s17, s17
 8010192:	4b4e      	ldr	r3, [pc, #312]	@ (80102cc <gc_execute_block+0x2894>)
 8010194:	edc3 8a19 	vstr	s17, [r3, #100]	@ 0x64
 8010198:	e7be      	b.n	8010118 <gc_execute_block+0x26e0>
                        if (!(ijk_words.mask & (bit(plane.axis_0)|bit(plane.axis_1))))
 801019a:	9805      	ldr	r0, [sp, #20]
 801019c:	4601      	mov	r1, r0
 801019e:	2301      	movs	r3, #1
 80101a0:	fa03 f204 	lsl.w	r2, r3, r4
 80101a4:	40ab      	lsls	r3, r5
 80101a6:	4313      	orrs	r3, r2
 80101a8:	4218      	tst	r0, r3
 80101aa:	f001 837f 	beq.w	80118ac <gc_execute_block+0x3e74>
                        gc_block.words.i = gc_block.words.j = gc_block.words.k = Off;
 80101ae:	4b47      	ldr	r3, [pc, #284]	@ (80102cc <gc_execute_block+0x2894>)
 80101b0:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 80101b4:	f36f 1286 	bfc	r2, #6, #1
 80101b8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80101bc:	b2d2      	uxtb	r2, r2
 80101be:	f36f 1245 	bfc	r2, #5, #1
 80101c2:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80101c6:	b2d2      	uxtb	r2, r2
 80101c8:	f36f 1204 	bfc	r2, #4, #1
 80101cc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
                        if (gc_block.modal.units_imperial) {
 80101d0:	7adb      	ldrb	r3, [r3, #11]
 80101d2:	b1b3      	cbz	r3, 8010202 <gc_execute_block+0x27ca>
                            idx = 3;
 80101d4:	2303      	movs	r3, #3
 80101d6:	e000      	b.n	80101da <gc_execute_block+0x27a2>
                            } while(idx);
 80101d8:	b19b      	cbz	r3, 8010202 <gc_execute_block+0x27ca>
                                idx--;
 80101da:	3b01      	subs	r3, #1
                                if (ijk_words.mask & bit(idx))
 80101dc:	fa21 f203 	lsr.w	r2, r1, r3
 80101e0:	f012 0f01 	tst.w	r2, #1
 80101e4:	d0f8      	beq.n	80101d8 <gc_execute_block+0x27a0>
                                    gc_block.values.ijk[idx] *= MM_PER_INCH;
 80101e6:	f103 0010 	add.w	r0, r3, #16
 80101ea:	4a38      	ldr	r2, [pc, #224]	@ (80102cc <gc_execute_block+0x2894>)
 80101ec:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80101f0:	edd2 7a02 	vldr	s15, [r2, #8]
 80101f4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80102d8 <gc_execute_block+0x28a0>
 80101f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80101fc:	edc2 7a02 	vstr	s15, [r2, #8]
 8010200:	e7ea      	b.n	80101d8 <gc_execute_block+0x27a0>
                        if(gc_state.modal.scaling_active) {
 8010202:	4b33      	ldr	r3, [pc, #204]	@ (80102d0 <gc_execute_block+0x2898>)
 8010204:	7f9b      	ldrb	r3, [r3, #30]
 8010206:	b1d3      	cbz	r3, 801023e <gc_execute_block+0x2806>
                            idx = 3;
 8010208:	2303      	movs	r3, #3
 801020a:	e000      	b.n	801020e <gc_execute_block+0x27d6>
                            } while(idx);
 801020c:	b1bb      	cbz	r3, 801023e <gc_execute_block+0x2806>
                                if (ijk_words.mask & bit(--idx))
 801020e:	3b01      	subs	r3, #1
 8010210:	fa21 f203 	lsr.w	r2, r1, r3
 8010214:	f012 0f01 	tst.w	r2, #1
 8010218:	d0f8      	beq.n	801020c <gc_execute_block+0x27d4>
                                    gc_block.values.ijk[idx] *= scale_factor.ijk[idx];
 801021a:	f103 0010 	add.w	r0, r3, #16
 801021e:	4a2b      	ldr	r2, [pc, #172]	@ (80102cc <gc_execute_block+0x2894>)
 8010220:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8010224:	edd2 7a02 	vldr	s15, [r2, #8]
 8010228:	1c9e      	adds	r6, r3, #2
 801022a:	482c      	ldr	r0, [pc, #176]	@ (80102dc <gc_execute_block+0x28a4>)
 801022c:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8010230:	ed90 7a01 	vldr	s14, [r0, #4]
 8010234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010238:	edc2 7a02 	vstr	s15, [r2, #8]
 801023c:	e7e6      	b.n	801020c <gc_execute_block+0x27d4>
                        x -= gc_block.values.ijk[plane.axis_0]; // Delta x between circle center and target
 801023e:	4e23      	ldr	r6, [pc, #140]	@ (80102cc <gc_execute_block+0x2894>)
 8010240:	f104 0310 	add.w	r3, r4, #16
 8010244:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010248:	edd3 9a02 	vldr	s19, [r3, #8]
 801024c:	ee79 7a69 	vsub.f32	s15, s18, s19
                        y -= gc_block.values.ijk[plane.axis_1]; // Delta y between circle center and target
 8010250:	f105 0310 	add.w	r3, r5, #16
 8010254:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010258:	edd3 8a02 	vldr	s17, [r3, #8]
 801025c:	ee38 8a68 	vsub.f32	s16, s16, s17
    return sqrtf(x * x + y * y);
 8010260:	ee28 8a08 	vmul.f32	s16, s16, s16
 8010264:	eeb0 0a48 	vmov.f32	s0, s16
 8010268:	ee07 0aa7 	vmla.f32	s0, s15, s15
 801026c:	f017 fbbc 	bl	80279e8 <sqrtf>
 8010270:	eeb0 8a40 	vmov.f32	s16, s0
 8010274:	ee68 8aa8 	vmul.f32	s17, s17, s17
 8010278:	eeb0 0a68 	vmov.f32	s0, s17
 801027c:	ee09 0aa9 	vmla.f32	s0, s19, s19
 8010280:	f017 fbb2 	bl	80279e8 <sqrtf>
                        gc_block.values.r = hypot_f(gc_block.values.ijk[plane.axis_0], gc_block.values.ijk[plane.axis_1]);
 8010284:	ed86 0a19 	vstr	s0, [r6, #100]	@ 0x64
                        float delta_r = fabsf(target_r - gc_block.values.r);
 8010288:	ee78 7a40 	vsub.f32	s15, s16, s0
 801028c:	eef0 7ae7 	vabs.f32	s15, s15
                        if (delta_r > 0.005f) {
 8010290:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80102e0 <gc_execute_block+0x28a8>
 8010294:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801029c:	f77f a986 	ble.w	800f5ac <gc_execute_block+0x1b74>
                            if (delta_r > 0.5f)
 80102a0:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80102a4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80102a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ac:	f301 8301 	bgt.w	80118b2 <gc_execute_block+0x3e7a>
                            if (delta_r > (0.001f * gc_block.values.r))
 80102b0:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80102e4 <gc_execute_block+0x28ac>
 80102b4:	ee20 7a26 	vmul.f32	s14, s0, s13
 80102b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80102bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102c0:	f57f a974 	bpl.w	800f5ac <gc_execute_block+0x1b74>
                                FAIL(Status_GcodeInvalidTarget); // [Arc definition error] > 0.005mm AND 0.1% radius
 80102c4:	2421      	movs	r4, #33	@ 0x21
 80102c6:	f7fd bc94 	b.w	800dbf2 <gc_execute_block+0x1ba>
 80102ca:	bf00      	nop
 80102cc:	2000150c 	.word	0x2000150c
 80102d0:	20001614 	.word	0x20001614
 80102d4:	2000167c 	.word	0x2000167c
 80102d8:	41cb3333 	.word	0x41cb3333
 80102dc:	200001c0 	.word	0x200001c0
 80102e0:	3ba3d70a 	.word	0x3ba3d70a
 80102e4:	3a83126f 	.word	0x3a83126f
                    if(gc_block.modal.plane_select != PlaneSelect_XY)
 80102e8:	4bb5      	ldr	r3, [pc, #724]	@ (80105c0 <gc_execute_block+0x2b88>)
 80102ea:	7b9b      	ldrb	r3, [r3, #14]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	f041 82e3 	bne.w	80118b8 <gc_execute_block+0x3e80>
                    if (axis_words.mask & ~(bit(X_AXIS)|bit(Y_AXIS)))
 80102f2:	fa5f f38b 	uxtb.w	r3, fp
 80102f6:	2b03      	cmp	r3, #3
 80102f8:	f201 82e1 	bhi.w	80118be <gc_execute_block+0x3e86>
                    if((gc_block.words.mask & pq_words.mask) != pq_words.mask)
 80102fc:	4bb0      	ldr	r3, [pc, #704]	@ (80105c0 <gc_execute_block+0x2b88>)
 80102fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010302:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8010306:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 801030a:	f041 82db 	bne.w	80118c4 <gc_execute_block+0x3e8c>
                    if(gc_parser_flags.motion_mode_changed && (gc_block.words.mask & ij_words.mask) != ij_words.mask)
 801030e:	f418 7f00 	tst.w	r8, #512	@ 0x200
 8010312:	d004      	beq.n	801031e <gc_execute_block+0x28e6>
 8010314:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8010318:	2b30      	cmp	r3, #48	@ 0x30
 801031a:	f041 82d6 	bne.w	80118ca <gc_execute_block+0x3e92>
                    if(!(gc_block.words.i || gc_block.words.j)) {
 801031e:	4ba8      	ldr	r3, [pc, #672]	@ (80105c0 <gc_execute_block+0x2b88>)
 8010320:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8010324:	f013 0f30 	tst.w	r3, #48	@ 0x30
 8010328:	d151      	bne.n	80103ce <gc_execute_block+0x2996>
                        gc_block.values.ijk[I_VALUE] = - gc_block.values.p;
 801032a:	4ba5      	ldr	r3, [pc, #660]	@ (80105c0 <gc_execute_block+0x2b88>)
 801032c:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8010330:	eef1 7a67 	vneg.f32	s15, s15
 8010334:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                        gc_block.values.ijk[J_VALUE] = - gc_block.values.q;
 8010338:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 801033c:	eef1 7a67 	vneg.f32	s15, s15
 8010340:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                    if (gc_block.modal.units_imperial) {
 8010344:	4b9e      	ldr	r3, [pc, #632]	@ (80105c0 <gc_execute_block+0x2b88>)
 8010346:	7adb      	ldrb	r3, [r3, #11]
 8010348:	b173      	cbz	r3, 8010368 <gc_execute_block+0x2930>
                        gc_block.values.p *= MM_PER_INCH;
 801034a:	4b9d      	ldr	r3, [pc, #628]	@ (80105c0 <gc_execute_block+0x2b88>)
 801034c:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8010350:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 80105c4 <gc_execute_block+0x2b8c>
 8010354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010358:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
                        gc_block.values.q *= MM_PER_INCH;
 801035c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8010360:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010364:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
                    if(gc_state.modal.scaling_active) {
 8010368:	4b97      	ldr	r3, [pc, #604]	@ (80105c8 <gc_execute_block+0x2b90>)
 801036a:	7f9b      	ldrb	r3, [r3, #30]
 801036c:	b18b      	cbz	r3, 8010392 <gc_execute_block+0x295a>
                        gc_block.values.p *= scale_factor.ijk[X_AXIS];
 801036e:	4b94      	ldr	r3, [pc, #592]	@ (80105c0 <gc_execute_block+0x2b88>)
 8010370:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8010374:	4a95      	ldr	r2, [pc, #596]	@ (80105cc <gc_execute_block+0x2b94>)
 8010376:	ed92 7a03 	vldr	s14, [r2, #12]
 801037a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801037e:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
                        gc_block.values.q *= scale_factor.ijk[Y_AXIS];
 8010382:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8010386:	ed92 7a04 	vldr	s14, [r2, #16]
 801038a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801038e:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
                    gc_state.modal.spline_pq[X_AXIS] = gc_block.values.p;
 8010392:	4b8b      	ldr	r3, [pc, #556]	@ (80105c0 <gc_execute_block+0x2b88>)
 8010394:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8010396:	4a8c      	ldr	r2, [pc, #560]	@ (80105c8 <gc_execute_block+0x2b90>)
 8010398:	6211      	str	r1, [r2, #32]
                    gc_state.modal.spline_pq[Y_AXIS] = gc_block.values.q;
 801039a:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 801039c:	6251      	str	r1, [r2, #36]	@ 0x24
                    gc_block.words.p = gc_block.words.q = gc_block.words.i = gc_block.words.j = Off;
 801039e:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 80103a2:	f36f 1245 	bfc	r2, #5, #1
 80103a6:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80103aa:	b2d2      	uxtb	r2, r2
 80103ac:	f36f 1204 	bfc	r2, #4, #1
 80103b0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80103b4:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 80103b8:	f36f 0241 	bfc	r2, #1, #1
 80103bc:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 80103c0:	b2d2      	uxtb	r2, r2
 80103c2:	f36f 0200 	bfc	r2, #0, #1
 80103c6:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                    break;
 80103ca:	f7ff b8ef 	b.w	800f5ac <gc_execute_block+0x1b74>
                        if (gc_block.modal.units_imperial) {
 80103ce:	4b7c      	ldr	r3, [pc, #496]	@ (80105c0 <gc_execute_block+0x2b88>)
 80103d0:	7adb      	ldrb	r3, [r3, #11]
 80103d2:	b173      	cbz	r3, 80103f2 <gc_execute_block+0x29ba>
                            gc_block.values.ijk[I_VALUE] *= MM_PER_INCH;
 80103d4:	4b7a      	ldr	r3, [pc, #488]	@ (80105c0 <gc_execute_block+0x2b88>)
 80103d6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80103da:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80105c4 <gc_execute_block+0x2b8c>
 80103de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80103e2:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                            gc_block.values.ijk[J_VALUE] *= MM_PER_INCH;
 80103e6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80103ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80103ee:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                        if(gc_state.modal.scaling_active) {
 80103f2:	4b75      	ldr	r3, [pc, #468]	@ (80105c8 <gc_execute_block+0x2b90>)
 80103f4:	7f9b      	ldrb	r3, [r3, #30]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d0a4      	beq.n	8010344 <gc_execute_block+0x290c>
                            gc_block.values.ijk[I_VALUE] *= scale_factor.ijk[X_AXIS];
 80103fa:	4b71      	ldr	r3, [pc, #452]	@ (80105c0 <gc_execute_block+0x2b88>)
 80103fc:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8010400:	4a72      	ldr	r2, [pc, #456]	@ (80105cc <gc_execute_block+0x2b94>)
 8010402:	ed92 7a03 	vldr	s14, [r2, #12]
 8010406:	ee67 7a87 	vmul.f32	s15, s15, s14
 801040a:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                            gc_block.values.ijk[J_VALUE] *= scale_factor.ijk[Y_AXIS];
 801040e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8010412:	ed92 7a04 	vldr	s14, [r2, #16]
 8010416:	ee67 7a87 	vmul.f32	s15, s15, s14
 801041a:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
 801041e:	e791      	b.n	8010344 <gc_execute_block+0x290c>
                    if(gc_block.modal.plane_select != PlaneSelect_XY)
 8010420:	4b67      	ldr	r3, [pc, #412]	@ (80105c0 <gc_execute_block+0x2b88>)
 8010422:	7b9b      	ldrb	r3, [r3, #14]
 8010424:	2b00      	cmp	r3, #0
 8010426:	f041 8253 	bne.w	80118d0 <gc_execute_block+0x3e98>
                    if (axis_words.mask & ~(bit(X_AXIS)|bit(Y_AXIS)))
 801042a:	fa5f f38b 	uxtb.w	r3, fp
 801042e:	2b03      	cmp	r3, #3
 8010430:	f201 8251 	bhi.w	80118d6 <gc_execute_block+0x3e9e>
                    if((gc_block.words.mask & ij_words.mask) != ij_words.mask)
 8010434:	4b62      	ldr	r3, [pc, #392]	@ (80105c0 <gc_execute_block+0x2b88>)
 8010436:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801043a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801043e:	2b30      	cmp	r3, #48	@ 0x30
 8010440:	f041 824c 	bne.w	80118dc <gc_execute_block+0x3ea4>
                    if(gc_block.values.ijk[I_VALUE] == 0.0f && gc_block.values.ijk[I_VALUE] == 0.0f)
 8010444:	4b5e      	ldr	r3, [pc, #376]	@ (80105c0 <gc_execute_block+0x2b88>)
 8010446:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 801044a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801044e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010452:	f001 8246 	beq.w	80118e2 <gc_execute_block+0x3eaa>
                    if (gc_block.modal.units_imperial) {
 8010456:	7adb      	ldrb	r3, [r3, #11]
 8010458:	b163      	cbz	r3, 8010474 <gc_execute_block+0x2a3c>
                        gc_block.values.ijk[I_VALUE] *= MM_PER_INCH;
 801045a:	4b59      	ldr	r3, [pc, #356]	@ (80105c0 <gc_execute_block+0x2b88>)
 801045c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80105c4 <gc_execute_block+0x2b8c>
 8010460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010464:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                        gc_block.values.ijk[J_VALUE] *= MM_PER_INCH;
 8010468:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 801046c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010470:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                    if(gc_state.modal.scaling_active) {
 8010474:	4b54      	ldr	r3, [pc, #336]	@ (80105c8 <gc_execute_block+0x2b90>)
 8010476:	7f9b      	ldrb	r3, [r3, #30]
 8010478:	b18b      	cbz	r3, 801049e <gc_execute_block+0x2a66>
                        gc_block.values.ijk[I_VALUE] *= scale_factor.ijk[X_AXIS];
 801047a:	4b51      	ldr	r3, [pc, #324]	@ (80105c0 <gc_execute_block+0x2b88>)
 801047c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8010480:	4a52      	ldr	r2, [pc, #328]	@ (80105cc <gc_execute_block+0x2b94>)
 8010482:	ed92 7a03 	vldr	s14, [r2, #12]
 8010486:	ee67 7a87 	vmul.f32	s15, s15, s14
 801048a:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                        gc_block.values.ijk[J_VALUE] *= scale_factor.ijk[Y_AXIS];
 801048e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8010492:	ed92 7a04 	vldr	s14, [r2, #16]
 8010496:	ee67 7a87 	vmul.f32	s15, s15, s14
 801049a:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                    gc_block.words.i = gc_block.words.j = Off;
 801049e:	4b48      	ldr	r3, [pc, #288]	@ (80105c0 <gc_execute_block+0x2b88>)
 80104a0:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 80104a4:	f36f 1245 	bfc	r2, #5, #1
 80104a8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80104ac:	b2d2      	uxtb	r2, r2
 80104ae:	f36f 1204 	bfc	r2, #4, #1
 80104b2:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
                    break;
 80104b6:	f7ff b879 	b.w	800f5ac <gc_execute_block+0x1b74>
                    gc_parser_flags.probe_is_no_error = On;
 80104ba:	f048 0810 	orr.w	r8, r8, #16
                    if(gc_block.modal.motion == MotionMode_ProbeAway || gc_block.modal.motion == MotionMode_ProbeAwayNoError)
 80104be:	f1a5 038e 	sub.w	r3, r5, #142	@ 0x8e
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	2b01      	cmp	r3, #1
 80104c6:	d90f      	bls.n	80104e8 <gc_execute_block+0x2ab0>
                    if (!axis_words.mask)
 80104c8:	fa5f f38b 	uxtb.w	r3, fp
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	f001 820b 	beq.w	80118e8 <gc_execute_block+0x3eb0>
                    if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 80104d2:	220c      	movs	r2, #12
 80104d4:	493e      	ldr	r1, [pc, #248]	@ (80105d0 <gc_execute_block+0x2b98>)
 80104d6:	483f      	ldr	r0, [pc, #252]	@ (80105d4 <gc_execute_block+0x2b9c>)
 80104d8:	f014 fcfb 	bl	8024ed2 <memcmp>
 80104dc:	2800      	cmp	r0, #0
 80104de:	f47f a865 	bne.w	800f5ac <gc_execute_block+0x1b74>
                        FAIL(Status_GcodeInvalidTarget); // [Invalid target]
 80104e2:	2421      	movs	r4, #33	@ 0x21
 80104e4:	f7fd bb85 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        gc_parser_flags.probe_is_away = On;
 80104e8:	f048 0808 	orr.w	r8, r8, #8
 80104ec:	e7ec      	b.n	80104c8 <gc_execute_block+0x2a90>
        gc_block.words.n = gc_block.words.f = gc_block.words.s = gc_block.words.t = Off;
 80104ee:	4b34      	ldr	r3, [pc, #208]	@ (80105c0 <gc_execute_block+0x2b88>)
 80104f0:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 80104f4:	f36f 1204 	bfc	r2, #4, #1
 80104f8:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 80104fc:	b2d2      	uxtb	r2, r2
 80104fe:	f36f 02c3 	bfc	r2, #3, #1
 8010502:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 8010506:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 801050a:	f36f 0241 	bfc	r2, #1, #1
 801050e:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 8010512:	b2d2      	uxtb	r2, r2
 8010514:	f36f 1286 	bfc	r2, #6, #1
 8010518:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 801051c:	f7ff b857 	b.w	800f5ce <gc_execute_block+0x1b96>
        plan_data.condition.is_rpm_rate_adjusted = gc_state.is_rpm_rate_adjusted || (gc_state.modal.spindle.state.ccw && gc_state.spindle.hal->cap.laser);
 8010520:	2301      	movs	r3, #1
 8010522:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8010526:	f363 12c7 	bfi	r2, r3, #7, #1
 801052a:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
        if ((status_code_t)(int_value = (uint_fast16_t)mc_jog_execute(&plan_data, &gc_block, gc_state.position)) == Status_OK)
 801052e:	4a29      	ldr	r2, [pc, #164]	@ (80105d4 <gc_execute_block+0x2b9c>)
 8010530:	4923      	ldr	r1, [pc, #140]	@ (80105c0 <gc_execute_block+0x2b88>)
 8010532:	a814      	add	r0, sp, #80	@ 0x50
 8010534:	f004 f9f0 	bl	8014918 <mc_jog_execute>
 8010538:	4604      	mov	r4, r0
 801053a:	2800      	cmp	r0, #0
 801053c:	f47d ab59 	bne.w	800dbf2 <gc_execute_block+0x1ba>
            memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_state.position));
 8010540:	4b24      	ldr	r3, [pc, #144]	@ (80105d4 <gc_execute_block+0x2b9c>)
 8010542:	4a23      	ldr	r2, [pc, #140]	@ (80105d0 <gc_execute_block+0x2b98>)
 8010544:	ca07      	ldmia	r2, {r0, r1, r2}
 8010546:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        return (status_code_t)int_value;
 801054a:	f7fd bb52 	b.w	800dbf2 <gc_execute_block+0x1ba>
        plan_data.condition.is_rpm_rate_adjusted = gc_state.is_rpm_rate_adjusted || (gc_state.modal.spindle.state.ccw && gc_state.spindle.hal->cap.laser);
 801054e:	2300      	movs	r3, #0
 8010550:	e7e7      	b.n	8010522 <gc_execute_block+0x2aea>
 8010552:	2301      	movs	r3, #1
 8010554:	e7e5      	b.n	8010522 <gc_execute_block+0x2aea>
    if(gc_state.spindle.hal->cap.laser) {
 8010556:	4b1c      	ldr	r3, [pc, #112]	@ (80105c8 <gc_execute_block+0x2b90>)
 8010558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801055a:	7a9b      	ldrb	r3, [r3, #10]
 801055c:	f013 0f08 	tst.w	r3, #8
 8010560:	d054      	beq.n	801060c <gc_execute_block+0x2bd4>
        if(!motion_is_lasercut(gc_block.modal.motion))
 8010562:	4b17      	ldr	r3, [pc, #92]	@ (80105c0 <gc_execute_block+0x2b88>)
 8010564:	891b      	ldrh	r3, [r3, #8]
    return motion == MotionMode_Linear || motion == MotionMode_CwArc || motion == MotionMode_CcwArc || motion == MotionMode_CubicSpline || motion == MotionMode_QuadraticSpline;
 8010566:	1e5a      	subs	r2, r3, #1
 8010568:	b292      	uxth	r2, r2
 801056a:	2a02      	cmp	r2, #2
 801056c:	d907      	bls.n	801057e <gc_execute_block+0x2b46>
 801056e:	2b05      	cmp	r3, #5
 8010570:	d020      	beq.n	80105b4 <gc_execute_block+0x2b7c>
 8010572:	2b33      	cmp	r3, #51	@ 0x33
 8010574:	d001      	beq.n	801057a <gc_execute_block+0x2b42>
 8010576:	2300      	movs	r3, #0
 8010578:	e002      	b.n	8010580 <gc_execute_block+0x2b48>
 801057a:	2301      	movs	r3, #1
 801057c:	e000      	b.n	8010580 <gc_execute_block+0x2b48>
 801057e:	2301      	movs	r3, #1
        if(!motion_is_lasercut(gc_block.modal.motion))
 8010580:	b90b      	cbnz	r3, 8010586 <gc_execute_block+0x2b4e>
            gc_parser_flags.laser_disable = On;
 8010582:	f048 0840 	orr.w	r8, r8, #64	@ 0x40
        if(axis_words.mask && (axis_command == AxisCommand_MotionMode))
 8010586:	fa5f f38b 	uxtb.w	r3, fp
 801058a:	b113      	cbz	r3, 8010592 <gc_execute_block+0x2b5a>
 801058c:	f1ba 0f02 	cmp.w	sl, #2
 8010590:	d012      	beq.n	80105b8 <gc_execute_block+0x2b80>
        else if(gc_state.modal.spindle.state.on && !gc_state.modal.spindle.state.ccw) {
 8010592:	4b0d      	ldr	r3, [pc, #52]	@ (80105c8 <gc_execute_block+0x2b90>)
 8010594:	7e9b      	ldrb	r3, [r3, #26]
 8010596:	f003 0303 	and.w	r3, r3, #3
 801059a:	2b01      	cmp	r3, #1
 801059c:	d01c      	beq.n	80105d8 <gc_execute_block+0x2ba0>
        gc_state.is_rpm_rate_adjusted = gc_state.modal.spindle.state.ccw && !gc_parser_flags.laser_disable;
 801059e:	4b0a      	ldr	r3, [pc, #40]	@ (80105c8 <gc_execute_block+0x2b90>)
 80105a0:	7e9b      	ldrb	r3, [r3, #26]
 80105a2:	f013 0f02 	tst.w	r3, #2
 80105a6:	d02d      	beq.n	8010604 <gc_execute_block+0x2bcc>
 80105a8:	f018 0f40 	tst.w	r8, #64	@ 0x40
 80105ac:	f000 80a7 	beq.w	80106fe <gc_execute_block+0x2cc6>
 80105b0:	2300      	movs	r3, #0
 80105b2:	e028      	b.n	8010606 <gc_execute_block+0x2bce>
    return motion == MotionMode_Linear || motion == MotionMode_CwArc || motion == MotionMode_CcwArc || motion == MotionMode_CubicSpline || motion == MotionMode_QuadraticSpline;
 80105b4:	2301      	movs	r3, #1
 80105b6:	e7e3      	b.n	8010580 <gc_execute_block+0x2b48>
            gc_parser_flags.laser_is_motion = On;
 80105b8:	f048 0880 	orr.w	r8, r8, #128	@ 0x80
 80105bc:	e7ef      	b.n	801059e <gc_execute_block+0x2b66>
 80105be:	bf00      	nop
 80105c0:	2000150c 	.word	0x2000150c
 80105c4:	41cb3333 	.word	0x41cb3333
 80105c8:	20001614 	.word	0x20001614
 80105cc:	200001c0 	.word	0x200001c0
 80105d0:	20001590 	.word	0x20001590
 80105d4:	2000167c 	.word	0x2000167c
            if(motion_is_lasercut(gc_state.modal.motion)) {
 80105d8:	4b9b      	ldr	r3, [pc, #620]	@ (8010848 <gc_execute_block+0x2e10>)
 80105da:	881b      	ldrh	r3, [r3, #0]
    return motion == MotionMode_Linear || motion == MotionMode_CwArc || motion == MotionMode_CcwArc || motion == MotionMode_CubicSpline || motion == MotionMode_QuadraticSpline;
 80105dc:	1e5a      	subs	r2, r3, #1
 80105de:	b292      	uxth	r2, r2
 80105e0:	2a02      	cmp	r2, #2
 80105e2:	d909      	bls.n	80105f8 <gc_execute_block+0x2bc0>
 80105e4:	2b05      	cmp	r3, #5
 80105e6:	d007      	beq.n	80105f8 <gc_execute_block+0x2bc0>
 80105e8:	2b33      	cmp	r3, #51	@ 0x33
 80105ea:	d005      	beq.n	80105f8 <gc_execute_block+0x2bc0>
            } else if(!gc_parser_flags.laser_disable) // When changing to a G1 motion mode without axis words from a non-G1/2/3 motion mode.
 80105ec:	f018 0f40 	tst.w	r8, #64	@ 0x40
 80105f0:	d1d5      	bne.n	801059e <gc_execute_block+0x2b66>
                gc_parser_flags.spindle_force_sync = On;
 80105f2:	f048 0820 	orr.w	r8, r8, #32
 80105f6:	e7d2      	b.n	801059e <gc_execute_block+0x2b66>
                if(gc_parser_flags.laser_disable)
 80105f8:	f018 0f40 	tst.w	r8, #64	@ 0x40
 80105fc:	d0cf      	beq.n	801059e <gc_execute_block+0x2b66>
                    gc_parser_flags.spindle_force_sync = On; // Change from G1/2/3 motion mode.
 80105fe:	f048 0820 	orr.w	r8, r8, #32
 8010602:	e7cc      	b.n	801059e <gc_execute_block+0x2b66>
        gc_state.is_rpm_rate_adjusted = gc_state.modal.spindle.state.ccw && !gc_parser_flags.laser_disable;
 8010604:	2300      	movs	r3, #0
 8010606:	4a90      	ldr	r2, [pc, #576]	@ (8010848 <gc_execute_block+0x2e10>)
 8010608:	f882 307e 	strb.w	r3, [r2, #126]	@ 0x7e
    gc_state.line_number = gc_block.values.n;
 801060c:	4b8f      	ldr	r3, [pc, #572]	@ (801084c <gc_execute_block+0x2e14>)
 801060e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010612:	4a8d      	ldr	r2, [pc, #564]	@ (8010848 <gc_execute_block+0x2e10>)
 8010614:	6753      	str	r3, [r2, #116]	@ 0x74
    plan_data.line_number = gc_state.line_number; // Record data for planner use.
 8010616:	931b      	str	r3, [sp, #108]	@ 0x6c
    bool check_mode = state_get() == STATE_CHECK_MODE;
 8010618:	f00e fd76 	bl	801f108 <state_get>
 801061c:	4605      	mov	r5, r0
 801061e:	2802      	cmp	r0, #2
 8010620:	bf14      	ite	ne
 8010622:	2300      	movne	r3, #0
 8010624:	2301      	moveq	r3, #1
 8010626:	930b      	str	r3, [sp, #44]	@ 0x2c
    if(message && !check_mode && (plan_data.message = malloc(strlen(message) + 1)))
 8010628:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 801062a:	b10c      	cbz	r4, 8010630 <gc_execute_block+0x2bf8>
 801062c:	2802      	cmp	r0, #2
 801062e:	d168      	bne.n	8010702 <gc_execute_block+0x2cca>
    gc_state.modal.feed_mode = gc_block.modal.feed_mode;
 8010630:	4b86      	ldr	r3, [pc, #536]	@ (801084c <gc_execute_block+0x2e14>)
 8010632:	7a9b      	ldrb	r3, [r3, #10]
 8010634:	4a84      	ldr	r2, [pc, #528]	@ (8010848 <gc_execute_block+0x2e10>)
 8010636:	7093      	strb	r3, [r2, #2]
    if (gc_state.modal.feed_mode == FeedMode_InverseTime)
 8010638:	2b01      	cmp	r3, #1
 801063a:	d06f      	beq.n	801071c <gc_execute_block+0x2ce4>
    gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 801063c:	4b83      	ldr	r3, [pc, #524]	@ (801084c <gc_execute_block+0x2e14>)
 801063e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010640:	4b81      	ldr	r3, [pc, #516]	@ (8010848 <gc_execute_block+0x2e10>)
 8010642:	661a      	str	r2, [r3, #96]	@ 0x60
    plan_data.feed_rate = gc_state.feed_rate; // Record data for planner use.
 8010644:	9214      	str	r2, [sp, #80]	@ 0x50
    if(gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 8010646:	7edb      	ldrb	r3, [r3, #27]
 8010648:	2b01      	cmp	r3, #1
 801064a:	d06e      	beq.n	801072a <gc_execute_block+0x2cf2>
    if(!user_words.s && ((gc_state.spindle.rpm != gc_block.values.s) || gc_parser_flags.spindle_force_sync)) {
 801064c:	4b80      	ldr	r3, [pc, #512]	@ (8010850 <gc_execute_block+0x2e18>)
 801064e:	789b      	ldrb	r3, [r3, #2]
 8010650:	f013 0f08 	tst.w	r3, #8
 8010654:	d12e      	bne.n	80106b4 <gc_execute_block+0x2c7c>
 8010656:	4b7c      	ldr	r3, [pc, #496]	@ (8010848 <gc_execute_block+0x2e10>)
 8010658:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 801065c:	4b7b      	ldr	r3, [pc, #492]	@ (801084c <gc_execute_block+0x2e14>)
 801065e:	ed93 0a1a 	vldr	s0, [r3, #104]	@ 0x68
 8010662:	eef4 7a40 	vcmp.f32	s15, s0
 8010666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801066a:	d102      	bne.n	8010672 <gc_execute_block+0x2c3a>
 801066c:	f018 0f20 	tst.w	r8, #32
 8010670:	d020      	beq.n	80106b4 <gc_execute_block+0x2c7c>
        if(gc_state.modal.spindle.state.on && !gc_parser_flags.laser_is_motion) {
 8010672:	4b75      	ldr	r3, [pc, #468]	@ (8010848 <gc_execute_block+0x2e10>)
 8010674:	7e9b      	ldrb	r3, [r3, #26]
 8010676:	f013 0f01 	tst.w	r3, #1
 801067a:	d017      	beq.n	80106ac <gc_execute_block+0x2c74>
 801067c:	fa5f f288 	uxtb.w	r2, r8
 8010680:	f018 0f80 	tst.w	r8, #128	@ 0x80
 8010684:	d112      	bne.n	80106ac <gc_execute_block+0x2c74>
            if(gc_block.spindle) {
 8010686:	4b71      	ldr	r3, [pc, #452]	@ (801084c <gc_execute_block+0x2e14>)
 8010688:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 801068c:	b173      	cbz	r3, 80106ac <gc_execute_block+0x2c74>
                gc_block.spindle->param->rpm = gc_block.values.s;
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	ed83 0a00 	vstr	s0, [r3]
                spindle_sync(gc_block.spindle, gc_state.modal.spindle.state, gc_parser_flags.laser_disable ? 0.0f : gc_block.values.s);
 8010694:	4b6d      	ldr	r3, [pc, #436]	@ (801084c <gc_execute_block+0x2e14>)
 8010696:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 801069a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 801069e:	d001      	beq.n	80106a4 <gc_execute_block+0x2c6c>
 80106a0:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 8010854 <gc_execute_block+0x2e1c>
 80106a4:	4b68      	ldr	r3, [pc, #416]	@ (8010848 <gc_execute_block+0x2e10>)
 80106a6:	7e99      	ldrb	r1, [r3, #26]
 80106a8:	f00e fa00 	bl	801eaac <spindle_sync>
        gc_state.spindle.rpm = gc_block.values.s; // Update spindle speed state.
 80106ac:	4b67      	ldr	r3, [pc, #412]	@ (801084c <gc_execute_block+0x2e14>)
 80106ae:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80106b0:	4b65      	ldr	r3, [pc, #404]	@ (8010848 <gc_execute_block+0x2e10>)
 80106b2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (!gc_parser_flags.laser_disable)
 80106b4:	fa5f f388 	uxtb.w	r3, r8
 80106b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80106ba:	f018 0f40 	tst.w	r8, #64	@ 0x40
 80106be:	d17d      	bne.n	80107bc <gc_execute_block+0x2d84>
        memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t)); // Record data for planner use.
 80106c0:	ac15      	add	r4, sp, #84	@ 0x54
 80106c2:	4b65      	ldr	r3, [pc, #404]	@ (8010858 <gc_execute_block+0x2e20>)
 80106c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80106c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(gc_state.tool_pending != gc_block.values.t && !check_mode) {
 80106ca:	4b5f      	ldr	r3, [pc, #380]	@ (8010848 <gc_execute_block+0x2e10>)
 80106cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106ce:	4a5f      	ldr	r2, [pc, #380]	@ (801084c <gc_execute_block+0x2e14>)
 80106d0:	f8d2 00b0 	ldr.w	r0, [r2, #176]	@ 0xb0
 80106d4:	4283      	cmp	r3, r0
 80106d6:	d001      	beq.n	80106dc <gc_execute_block+0x2ca4>
 80106d8:	2d02      	cmp	r5, #2
 80106da:	d173      	bne.n	80107c4 <gc_execute_block+0x2d8c>
    if(port_command) {
 80106dc:	9b06      	ldr	r3, [sp, #24]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	f000 80d1 	beq.w	8010886 <gc_execute_block+0x2e4e>
        switch(port_command) {
 80106e4:	3b3e      	subs	r3, #62	@ 0x3e
 80106e6:	2b06      	cmp	r3, #6
 80106e8:	f200 80cd 	bhi.w	8010886 <gc_execute_block+0x2e4e>
 80106ec:	e8df f013 	tbh	[pc, r3, lsl #1]
 80106f0:	00c800c8 	.word	0x00c800c8
 80106f4:	011f011f 	.word	0x011f011f
 80106f8:	01460132 	.word	0x01460132
 80106fc:	014a      	.short	0x014a
        gc_state.is_rpm_rate_adjusted = gc_state.modal.spindle.state.ccw && !gc_parser_flags.laser_disable;
 80106fe:	2301      	movs	r3, #1
 8010700:	e781      	b.n	8010606 <gc_execute_block+0x2bce>
    if(message && !check_mode && (plan_data.message = malloc(strlen(message) + 1)))
 8010702:	4620      	mov	r0, r4
 8010704:	f7f7 fcfc 	bl	8008100 <strlen>
 8010708:	3001      	adds	r0, #1
 801070a:	f012 fb45 	bl	8022d98 <malloc>
 801070e:	901c      	str	r0, [sp, #112]	@ 0x70
 8010710:	2800      	cmp	r0, #0
 8010712:	d08d      	beq.n	8010630 <gc_execute_block+0x2bf8>
        strcpy(plan_data.message, message);
 8010714:	4621      	mov	r1, r4
 8010716:	f014 fd5e 	bl	80251d6 <strcpy>
 801071a:	e789      	b.n	8010630 <gc_execute_block+0x2bf8>
        plan_data.condition.inverse_time = On; // Set condition flag for planner use.
 801071c:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8010720:	f043 0320 	orr.w	r3, r3, #32
 8010724:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010728:	e788      	b.n	801063c <gc_execute_block+0x2c04>
        if(gc_block.modal.motion != MotionMode_None && gc_block.modal.motion != MotionMode_Seek) {
 801072a:	4b48      	ldr	r3, [pc, #288]	@ (801084c <gc_execute_block+0x2e14>)
 801072c:	891b      	ldrh	r3, [r3, #8]
 801072e:	2b50      	cmp	r3, #80	@ 0x50
 8010730:	d000      	beq.n	8010734 <gc_execute_block+0x2cfc>
 8010732:	b963      	cbnz	r3, 801074e <gc_execute_block+0x2d16>
            if(gc_state.spindle.css) {
 8010734:	4b44      	ldr	r3, [pc, #272]	@ (8010848 <gc_execute_block+0x2e10>)
 8010736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010738:	b123      	cbz	r3, 8010744 <gc_execute_block+0x2d0c>
                gc_state.spindle.css = NULL;
 801073a:	4b43      	ldr	r3, [pc, #268]	@ (8010848 <gc_execute_block+0x2e10>)
 801073c:	2200      	movs	r2, #0
 801073e:	659a      	str	r2, [r3, #88]	@ 0x58
                protocol_buffer_synchronize(); // Empty planner buffer to ensure we get RPM at end of last CSS motion
 8010740:	f007 fc48 	bl	8017fd4 <protocol_buffer_synchronize>
            gc_block.values.s = gc_state.spindle.rpm; //gc_state.spindle.hal->param->rpm; // Keep current RPM
 8010744:	4b40      	ldr	r3, [pc, #256]	@ (8010848 <gc_execute_block+0x2e10>)
 8010746:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010748:	4b40      	ldr	r3, [pc, #256]	@ (801084c <gc_execute_block+0x2e14>)
 801074a:	669a      	str	r2, [r3, #104]	@ 0x68
 801074c:	e77e      	b.n	801064c <gc_execute_block+0x2c14>
            gc_state.spindle.css = &gc_state.spindle.hal->param->css;
 801074e:	4c3e      	ldr	r4, [pc, #248]	@ (8010848 <gc_execute_block+0x2e10>)
 8010750:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8010752:	685b      	ldr	r3, [r3, #4]
 8010754:	3310      	adds	r3, #16
 8010756:	65a3      	str	r3, [r4, #88]	@ 0x58
            gc_state.spindle.css->axis = plane.axis_1;
 8010758:	f89d 2089 	ldrb.w	r2, [sp, #137]	@ 0x89
 801075c:	615a      	str	r2, [r3, #20]
            gc_state.spindle.css->tool_offset = gc_get_offset(gc_state.spindle.css->axis, false);
 801075e:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 8010760:	2100      	movs	r1, #0
 8010762:	6970      	ldr	r0, [r6, #20]
 8010764:	f7fc fed0 	bl	800d508 <gc_get_offset>
 8010768:	ed86 0a04 	vstr	s0, [r6, #16]
            float pos = gc_state.position[gc_state.spindle.css->axis] - gc_state.spindle.css->tool_offset;
 801076c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801076e:	695a      	ldr	r2, [r3, #20]
 8010770:	321a      	adds	r2, #26
 8010772:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8010776:	edd4 7a00 	vldr	s15, [r4]
 801077a:	ed93 7a04 	vldr	s14, [r3, #16]
 801077e:	ee77 7ac7 	vsub.f32	s15, s15, s14
            gc_block.values.s = pos <= 0.0f ? gc_state.spindle.css->max_rpm : min(gc_state.spindle.css->max_rpm, gc_state.spindle.css->surface_speed / (pos * (float)(2.0f * M_PI)));
 8010782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801078a:	d911      	bls.n	80107b0 <gc_execute_block+0x2d78>
 801078c:	edd3 6a03 	vldr	s13, [r3, #12]
 8010790:	ed93 6a00 	vldr	s12, [r3]
 8010794:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801085c <gc_execute_block+0x2e24>
 8010798:	ee67 7a87 	vmul.f32	s15, s15, s14
 801079c:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80107a0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80107a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107a8:	d504      	bpl.n	80107b4 <gc_execute_block+0x2d7c>
 80107aa:	eeb0 7a66 	vmov.f32	s14, s13
 80107ae:	e001      	b.n	80107b4 <gc_execute_block+0x2d7c>
 80107b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80107b4:	4b25      	ldr	r3, [pc, #148]	@ (801084c <gc_execute_block+0x2e14>)
 80107b6:	ed83 7a1a 	vstr	s14, [r3, #104]	@ 0x68
        if(gc_block.modal.motion != MotionMode_None && gc_block.modal.motion != MotionMode_Seek) {
 80107ba:	e747      	b.n	801064c <gc_execute_block+0x2c14>
        plan_data.spindle.hal = gc_state.spindle.hal;
 80107bc:	4b22      	ldr	r3, [pc, #136]	@ (8010848 <gc_execute_block+0x2e10>)
 80107be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80107c0:	9318      	str	r3, [sp, #96]	@ 0x60
 80107c2:	e782      	b.n	80106ca <gc_execute_block+0x2c92>
        tool_data_t *pending_tool = tool_get_pending((gc_state.tool_pending = gc_block.values.t));
 80107c4:	4b20      	ldr	r3, [pc, #128]	@ (8010848 <gc_execute_block+0x2e10>)
 80107c6:	6798      	str	r0, [r3, #120]	@ 0x78
 80107c8:	f7fc fdea 	bl	800d3a0 <tool_get_pending>
 80107cc:	4604      	mov	r4, r0
        if(set_tool || settings.tool_change.mode == ToolChange_Ignore || !(hal.stream.suspend_read || hal.tool.change)) {
 80107ce:	9b07      	ldr	r3, [sp, #28]
 80107d0:	b963      	cbnz	r3, 80107ec <gc_execute_block+0x2db4>
 80107d2:	4b23      	ldr	r3, [pc, #140]	@ (8010860 <gc_execute_block+0x2e28>)
 80107d4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80107d8:	2b04      	cmp	r3, #4
 80107da:	d007      	beq.n	80107ec <gc_execute_block+0x2db4>
 80107dc:	4b21      	ldr	r3, [pc, #132]	@ (8010864 <gc_execute_block+0x2e2c>)
 80107de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80107e2:	bb33      	cbnz	r3, 8010832 <gc_execute_block+0x2dfa>
 80107e4:	4b1f      	ldr	r3, [pc, #124]	@ (8010864 <gc_execute_block+0x2e2c>)
 80107e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80107ea:	bb13      	cbnz	r3, 8010832 <gc_execute_block+0x2dfa>
    if(grbl.tool_table.n_tools)
 80107ec:	4b1e      	ldr	r3, [pc, #120]	@ (8010868 <gc_execute_block+0x2e30>)
 80107ee:	699b      	ldr	r3, [r3, #24]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d03b      	beq.n	801086c <gc_execute_block+0x2e34>
        gc_state.tool = tool;
 80107f4:	4b14      	ldr	r3, [pc, #80]	@ (8010848 <gc_execute_block+0x2e10>)
 80107f6:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
            if(grbl.on_tool_selected) {
 80107fa:	4b1b      	ldr	r3, [pc, #108]	@ (8010868 <gc_execute_block+0x2e30>)
 80107fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010800:	b163      	cbz	r3, 801081c <gc_execute_block+0x2de4>
                spindle_state_t state = gc_state.modal.spindle.state;
 8010802:	4f11      	ldr	r7, [pc, #68]	@ (8010848 <gc_execute_block+0x2e10>)
 8010804:	7ebe      	ldrb	r6, [r7, #26]
                grbl.on_tool_selected(gc_state.tool);
 8010806:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 801080a:	4798      	blx	r3
                if(state.value != gc_state.modal.spindle.state.value)
 801080c:	b2f6      	uxtb	r6, r6
 801080e:	7ebb      	ldrb	r3, [r7, #26]
 8010810:	429e      	cmp	r6, r3
 8010812:	d003      	beq.n	801081c <gc_execute_block+0x2de4>
                    gc_block.modal.spindle.state = gc_state.modal.spindle.state;
 8010814:	7eba      	ldrb	r2, [r7, #26]
 8010816:	4b0d      	ldr	r3, [pc, #52]	@ (801084c <gc_execute_block+0x2e14>)
 8010818:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            if(grbl.on_tool_changed)
 801081c:	4b12      	ldr	r3, [pc, #72]	@ (8010868 <gc_execute_block+0x2e30>)
 801081e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010822:	b11b      	cbz	r3, 801082c <gc_execute_block+0x2df4>
                grbl.on_tool_changed(gc_state.tool);
 8010824:	4a08      	ldr	r2, [pc, #32]	@ (8010848 <gc_execute_block+0x2e10>)
 8010826:	f8d2 00d0 	ldr.w	r0, [r2, #208]	@ 0xd0
 801082a:	4798      	blx	r3
            system_add_rt_report(Report_Tool);
 801082c:	2080      	movs	r0, #128	@ 0x80
 801082e:	f011 fc47 	bl	80220c0 <system_add_rt_report>
        if(hal.tool.select)
 8010832:	4b0c      	ldr	r3, [pc, #48]	@ (8010864 <gc_execute_block+0x2e2c>)
 8010834:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8010838:	b1f3      	cbz	r3, 8010878 <gc_execute_block+0x2e40>
            hal.tool.select(pending_tool, !set_tool);
 801083a:	9a07      	ldr	r2, [sp, #28]
 801083c:	f082 0101 	eor.w	r1, r2, #1
 8010840:	4620      	mov	r0, r4
 8010842:	4798      	blx	r3
 8010844:	e74a      	b.n	80106dc <gc_execute_block+0x2ca4>
 8010846:	bf00      	nop
 8010848:	20001614 	.word	0x20001614
 801084c:	2000150c 	.word	0x2000150c
 8010850:	20001508 	.word	0x20001508
 8010854:	00000000 	.word	0x00000000
 8010858:	20001664 	.word	0x20001664
 801085c:	40c90fdb 	.word	0x40c90fdb
 8010860:	200022f4 	.word	0x200022f4
 8010864:	200018dc 	.word	0x200018dc
 8010868:	20001ac4 	.word	0x20001ac4
        gc_state.tool->tool_id = tool->tool_id;
 801086c:	4ba0      	ldr	r3, [pc, #640]	@ (8010af0 <gc_execute_block+0x30b8>)
 801086e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8010872:	6922      	ldr	r2, [r4, #16]
 8010874:	611a      	str	r2, [r3, #16]
 8010876:	e7c0      	b.n	80107fa <gc_execute_block+0x2dc2>
            system_add_rt_report(Report_Tool);
 8010878:	2080      	movs	r0, #128	@ 0x80
 801087a:	f011 fc21 	bl	80220c0 <system_add_rt_report>
 801087e:	e72d      	b.n	80106dc <gc_execute_block+0x2ca4>
                add_output_command(&gc_block.output_command);
 8010880:	489c      	ldr	r0, [pc, #624]	@ (8010af4 <gc_execute_block+0x30bc>)
 8010882:	f7fc fdcf 	bl	800d424 <add_output_command>
    if (command_words.M6 && !set_tool && !check_mode) {
 8010886:	f019 0f01 	tst.w	r9, #1
 801088a:	d004      	beq.n	8010896 <gc_execute_block+0x2e5e>
 801088c:	9b07      	ldr	r3, [sp, #28]
 801088e:	b913      	cbnz	r3, 8010896 <gc_execute_block+0x2e5e>
 8010890:	2d02      	cmp	r5, #2
 8010892:	f040 8083 	bne.w	801099c <gc_execute_block+0x2f64>
    if(gc_state.modal.spindle.state.value != gc_block.modal.spindle.state.value) {
 8010896:	4b96      	ldr	r3, [pc, #600]	@ (8010af0 <gc_execute_block+0x30b8>)
 8010898:	7e9a      	ldrb	r2, [r3, #26]
 801089a:	4b97      	ldr	r3, [pc, #604]	@ (8010af8 <gc_execute_block+0x30c0>)
 801089c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d021      	beq.n	80108e8 <gc_execute_block+0x2eb0>
        if(gc_block.spindle) {
 80108a4:	4b94      	ldr	r3, [pc, #592]	@ (8010af8 <gc_execute_block+0x30c0>)
 80108a6:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 80108aa:	2800      	cmp	r0, #0
 80108ac:	f000 80e5 	beq.w	8010a7a <gc_execute_block+0x3042>
            if(grbl.on_spindle_programmed)
 80108b0:	4b92      	ldr	r3, [pc, #584]	@ (8010afc <gc_execute_block+0x30c4>)
 80108b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108b4:	b13b      	cbz	r3, 80108c6 <gc_execute_block+0x2e8e>
                grbl.on_spindle_programmed(gc_block.spindle, gc_block.modal.spindle.state,  plan_data.spindle.rpm, gc_block.modal.spindle.rpm_mode);
 80108b6:	4990      	ldr	r1, [pc, #576]	@ (8010af8 <gc_execute_block+0x30c0>)
 80108b8:	f891 2023 	ldrb.w	r2, [r1, #35]	@ 0x23
 80108bc:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 80108c0:	f891 1022 	ldrb.w	r1, [r1, #34]	@ 0x22
 80108c4:	4798      	blx	r3
            if((spindle_ok = spindle_sync(gc_block.spindle, gc_block.modal.spindle.state, plan_data.spindle.rpm)))
 80108c6:	4b8c      	ldr	r3, [pc, #560]	@ (8010af8 <gc_execute_block+0x30c0>)
 80108c8:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 80108cc:	f893 1022 	ldrb.w	r1, [r3, #34]	@ 0x22
 80108d0:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 80108d4:	f00e f8ea 	bl	801eaac <spindle_sync>
 80108d8:	4603      	mov	r3, r0
 80108da:	2800      	cmp	r0, #0
 80108dc:	f040 80bd 	bne.w	8010a5a <gc_execute_block+0x3022>
        if(!(spindle_event = !spindle_ok))
 80108e0:	f080 0301 	eor.w	r3, r0, #1
 80108e4:	b2db      	uxtb	r3, r3
 80108e6:	9308      	str	r3, [sp, #32]
    if(spindle_event && grbl.on_spindle_programmed)
 80108e8:	9b08      	ldr	r3, [sp, #32]
 80108ea:	b14b      	cbz	r3, 8010900 <gc_execute_block+0x2ec8>
 80108ec:	4b83      	ldr	r3, [pc, #524]	@ (8010afc <gc_execute_block+0x30c4>)
 80108ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108f0:	b133      	cbz	r3, 8010900 <gc_execute_block+0x2ec8>
        grbl.on_spindle_programmed(gc_state.spindle.hal, gc_state.modal.spindle.state, gc_state.spindle.rpm, gc_state.modal.spindle.rpm_mode);
 80108f2:	487f      	ldr	r0, [pc, #508]	@ (8010af0 <gc_execute_block+0x30b8>)
 80108f4:	7ec2      	ldrb	r2, [r0, #27]
 80108f6:	ed90 0a14 	vldr	s0, [r0, #80]	@ 0x50
 80108fa:	7e81      	ldrb	r1, [r0, #26]
 80108fc:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 80108fe:	4798      	blx	r3
    plan_data.spindle.state = gc_state.modal.spindle.state; // Set condition flag for planner use.
 8010900:	4b7b      	ldr	r3, [pc, #492]	@ (8010af0 <gc_execute_block+0x30b8>)
 8010902:	7e9a      	ldrb	r2, [r3, #26]
 8010904:	f88d 2058 	strb.w	r2, [sp, #88]	@ 0x58
    plan_data.condition.is_rpm_rate_adjusted = gc_state.is_rpm_rate_adjusted;
 8010908:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 801090c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8010910:	f363 12c7 	bfi	r2, r3, #7, #1
 8010914:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
    plan_data.condition.is_laser_ppi_mode = gc_state.is_rpm_rate_adjusted && gc_state.is_laser_ppi_mode;
 8010918:	2b00      	cmp	r3, #0
 801091a:	f000 80d7 	beq.w	8010acc <gc_execute_block+0x3094>
 801091e:	4b74      	ldr	r3, [pc, #464]	@ (8010af0 <gc_execute_block+0x30b8>)
 8010920:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8010924:	2b00      	cmp	r3, #0
 8010926:	f000 80d2 	beq.w	8010ace <gc_execute_block+0x3096>
 801092a:	2301      	movs	r3, #1
 801092c:	e0cf      	b.n	8010ace <gc_execute_block+0x3096>
                hal.port.digital_out(gc_block.output_command.port, gc_block.output_command.value != 0.0f);
 801092e:	4b74      	ldr	r3, [pc, #464]	@ (8010b00 <gc_execute_block+0x30c8>)
 8010930:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8010934:	4b70      	ldr	r3, [pc, #448]	@ (8010af8 <gc_execute_block+0x30c0>)
 8010936:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 801093a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801093e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010946:	bf14      	ite	ne
 8010948:	2101      	movne	r1, #1
 801094a:	2100      	moveq	r1, #0
 801094c:	f893 00be 	ldrb.w	r0, [r3, #190]	@ 0xbe
 8010950:	4790      	blx	r2
                break;
 8010952:	e798      	b.n	8010886 <gc_execute_block+0x2e4e>
                sys.var5399 = hal.port.wait_on_input((io_port_type_t)gc_block.output_command.is_digital, gc_block.output_command.port, (wait_mode_t)gc_block.values.l, gc_block.values.q);
 8010954:	4b6a      	ldr	r3, [pc, #424]	@ (8010b00 <gc_execute_block+0x30c8>)
 8010956:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801095a:	4867      	ldr	r0, [pc, #412]	@ (8010af8 <gc_execute_block+0x30c0>)
 801095c:	ed90 0a18 	vldr	s0, [r0, #96]	@ 0x60
 8010960:	f890 20b4 	ldrb.w	r2, [r0, #180]	@ 0xb4
 8010964:	f890 10be 	ldrb.w	r1, [r0, #190]	@ 0xbe
 8010968:	f890 00bc 	ldrb.w	r0, [r0, #188]	@ 0xbc
 801096c:	4798      	blx	r3
 801096e:	4b65      	ldr	r3, [pc, #404]	@ (8010b04 <gc_execute_block+0x30cc>)
 8010970:	6518      	str	r0, [r3, #80]	@ 0x50
                system_add_rt_report(Report_M66Result);
 8010972:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8010976:	f011 fba3 	bl	80220c0 <system_add_rt_report>
                break;
 801097a:	e784      	b.n	8010886 <gc_execute_block+0x2e4e>
                add_output_command(&gc_block.output_command);
 801097c:	485d      	ldr	r0, [pc, #372]	@ (8010af4 <gc_execute_block+0x30bc>)
 801097e:	f7fc fd51 	bl	800d424 <add_output_command>
                break;
 8010982:	e780      	b.n	8010886 <gc_execute_block+0x2e4e>
                hal.port.analog_out(gc_block.output_command.port, gc_block.output_command.value);
 8010984:	4b5e      	ldr	r3, [pc, #376]	@ (8010b00 <gc_execute_block+0x30c8>)
 8010986:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 801098a:	4b5b      	ldr	r3, [pc, #364]	@ (8010af8 <gc_execute_block+0x30c0>)
 801098c:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8010990:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8010994:	f893 00be 	ldrb.w	r0, [r3, #190]	@ 0xbe
 8010998:	4790      	blx	r2
                break;
 801099a:	e774      	b.n	8010886 <gc_execute_block+0x2e4e>
        tool_data_t *pending_tool = tool_get_pending(gc_state.tool_pending);
 801099c:	4b54      	ldr	r3, [pc, #336]	@ (8010af0 <gc_execute_block+0x30b8>)
 801099e:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80109a0:	f7fc fcfe 	bl	800d3a0 <tool_get_pending>
 80109a4:	4606      	mov	r6, r0
        protocol_buffer_synchronize();
 80109a6:	f007 fb15 	bl	8017fd4 <protocol_buffer_synchronize>
        if(plan_data.message) {
 80109aa:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80109ac:	b118      	cbz	r0, 80109b6 <gc_execute_block+0x2f7e>
            gc_output_message(plan_data.message);
 80109ae:	f7fc ff2d 	bl	800d80c <gc_output_message>
            plan_data.message = NULL;
 80109b2:	2300      	movs	r3, #0
 80109b4:	931c      	str	r3, [sp, #112]	@ 0x70
        if(pending_tool->tool_id != gc_state.tool->tool_id) {
 80109b6:	6932      	ldr	r2, [r6, #16]
 80109b8:	4b4d      	ldr	r3, [pc, #308]	@ (8010af0 <gc_execute_block+0x30b8>)
 80109ba:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80109be:	691b      	ldr	r3, [r3, #16]
 80109c0:	429a      	cmp	r2, r3
 80109c2:	f43f af68 	beq.w	8010896 <gc_execute_block+0x2e5e>
            if(grbl.on_tool_selected) {
 80109c6:	4b4d      	ldr	r3, [pc, #308]	@ (8010afc <gc_execute_block+0x30c4>)
 80109c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80109cc:	b15b      	cbz	r3, 80109e6 <gc_execute_block+0x2fae>
                spindle_state_t state = gc_state.modal.spindle.state;
 80109ce:	4f48      	ldr	r7, [pc, #288]	@ (8010af0 <gc_execute_block+0x30b8>)
 80109d0:	7ebc      	ldrb	r4, [r7, #26]
                grbl.on_tool_selected(pending_tool);
 80109d2:	4630      	mov	r0, r6
 80109d4:	4798      	blx	r3
                if(state.value != gc_state.modal.spindle.state.value)
 80109d6:	b2e4      	uxtb	r4, r4
 80109d8:	7ebb      	ldrb	r3, [r7, #26]
 80109da:	429c      	cmp	r4, r3
 80109dc:	d003      	beq.n	80109e6 <gc_execute_block+0x2fae>
                    gc_block.modal.spindle.state = gc_state.modal.spindle.state;
 80109de:	7eba      	ldrb	r2, [r7, #26]
 80109e0:	4b45      	ldr	r3, [pc, #276]	@ (8010af8 <gc_execute_block+0x30c0>)
 80109e2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            if(hal.tool.change) { // ATC
 80109e6:	4b46      	ldr	r3, [pc, #280]	@ (8010b00 <gc_execute_block+0x30c8>)
 80109e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80109ec:	b313      	cbz	r3, 8010a34 <gc_execute_block+0x2ffc>
                if((int_value = (uint_fast16_t)hal.tool.change(&gc_state)) != Status_OK) {
 80109ee:	4840      	ldr	r0, [pc, #256]	@ (8010af0 <gc_execute_block+0x30b8>)
 80109f0:	4798      	blx	r3
 80109f2:	4604      	mov	r4, r0
 80109f4:	2800      	cmp	r0, #0
 80109f6:	f47d a8fc 	bne.w	800dbf2 <gc_execute_block+0x1ba>
                system_add_rt_report(Report_Tool);
 80109fa:	2080      	movs	r0, #128	@ 0x80
 80109fc:	f011 fb60 	bl	80220c0 <system_add_rt_report>
    if(grbl.tool_table.n_tools)
 8010a00:	4b3e      	ldr	r3, [pc, #248]	@ (8010afc <gc_execute_block+0x30c4>)
 8010a02:	699b      	ldr	r3, [r3, #24]
 8010a04:	b31b      	cbz	r3, 8010a4e <gc_execute_block+0x3016>
        gc_state.tool = tool;
 8010a06:	4b3a      	ldr	r3, [pc, #232]	@ (8010af0 <gc_execute_block+0x30b8>)
 8010a08:	f8c3 60d0 	str.w	r6, [r3, #208]	@ 0xd0
            if(grbl.on_tool_changed && state_get() != STATE_TOOL_CHANGE)
 8010a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8010afc <gc_execute_block+0x30c4>)
 8010a0e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	f43f af3f 	beq.w	8010896 <gc_execute_block+0x2e5e>
 8010a18:	f00e fb76 	bl	801f108 <state_get>
 8010a1c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8010a20:	f43f af39 	beq.w	8010896 <gc_execute_block+0x2e5e>
                grbl.on_tool_changed(gc_state.tool);
 8010a24:	4b35      	ldr	r3, [pc, #212]	@ (8010afc <gc_execute_block+0x30c4>)
 8010a26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010a2a:	4a31      	ldr	r2, [pc, #196]	@ (8010af0 <gc_execute_block+0x30b8>)
 8010a2c:	f8d2 00d0 	ldr.w	r0, [r2, #208]	@ 0xd0
 8010a30:	4798      	blx	r3
 8010a32:	e730      	b.n	8010896 <gc_execute_block+0x2e5e>
                gc_state.tool_change = true;
 8010a34:	4b2e      	ldr	r3, [pc, #184]	@ (8010af0 <gc_execute_block+0x30b8>)
 8010a36:	2201      	movs	r2, #1
 8010a38:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
                system_set_exec_state_flag(EXEC_TOOL_CHANGE);   // Set up program pause for manual tool change
 8010a3c:	4b30      	ldr	r3, [pc, #192]	@ (8010b00 <gc_execute_block+0x30c8>)
 8010a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010a44:	4830      	ldr	r0, [pc, #192]	@ (8010b08 <gc_execute_block+0x30d0>)
 8010a46:	4798      	blx	r3
                protocol_execute_realtime();                    // Execute...
 8010a48:	f006 fff6 	bl	8017a38 <protocol_execute_realtime>
 8010a4c:	e7d8      	b.n	8010a00 <gc_execute_block+0x2fc8>
        gc_state.tool->tool_id = tool->tool_id;
 8010a4e:	4b28      	ldr	r3, [pc, #160]	@ (8010af0 <gc_execute_block+0x30b8>)
 8010a50:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8010a54:	6932      	ldr	r2, [r6, #16]
 8010a56:	611a      	str	r2, [r3, #16]
 8010a58:	e7d8      	b.n	8010a0c <gc_execute_block+0x2fd4>
                gc_block.spindle->param->state = gc_block.modal.spindle.state;
 8010a5a:	4a27      	ldr	r2, [pc, #156]	@ (8010af8 <gc_execute_block+0x30c0>)
 8010a5c:	f8d2 10cc 	ldr.w	r1, [r2, #204]	@ 0xcc
 8010a60:	6849      	ldr	r1, [r1, #4]
 8010a62:	f892 0022 	ldrb.w	r0, [r2, #34]	@ 0x22
 8010a66:	7208      	strb	r0, [r1, #8]
        if(!(spindle_event = !spindle_ok))
 8010a68:	f083 0301 	eor.w	r3, r3, #1
 8010a6c:	b2db      	uxtb	r3, r3
 8010a6e:	9308      	str	r3, [sp, #32]
            gc_state.modal.spindle.state = gc_block.modal.spindle.state;
 8010a70:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8010a74:	4b1e      	ldr	r3, [pc, #120]	@ (8010af0 <gc_execute_block+0x30b8>)
 8010a76:	769a      	strb	r2, [r3, #26]
 8010a78:	e736      	b.n	80108e8 <gc_execute_block+0x2eb0>
                if(spindle_is_enabled(--idx)) {
 8010a7a:	2000      	movs	r0, #0
 8010a7c:	f00d fe9e 	bl	801e7bc <spindle_is_enabled>
 8010a80:	9008      	str	r0, [sp, #32]
 8010a82:	b910      	cbnz	r0, 8010a8a <gc_execute_block+0x3052>
        if(!(spindle_event = !spindle_ok))
 8010a84:	2301      	movs	r3, #1
 8010a86:	9308      	str	r3, [sp, #32]
 8010a88:	e72e      	b.n	80108e8 <gc_execute_block+0x2eb0>
                    spindle_ptrs_t *spindle = spindle_get(idx);
 8010a8a:	2000      	movs	r0, #0
 8010a8c:	f00d feac 	bl	801e7e8 <spindle_get>
 8010a90:	4604      	mov	r4, r0
                    if(grbl.on_spindle_programmed)
 8010a92:	4b1a      	ldr	r3, [pc, #104]	@ (8010afc <gc_execute_block+0x30c4>)
 8010a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a96:	b13b      	cbz	r3, 8010aa8 <gc_execute_block+0x3070>
                        grbl.on_spindle_programmed(spindle, gc_block.modal.spindle.state,  plan_data.spindle.rpm, gc_block.modal.spindle.rpm_mode);
 8010a98:	4917      	ldr	r1, [pc, #92]	@ (8010af8 <gc_execute_block+0x30c0>)
 8010a9a:	f891 2023 	ldrb.w	r2, [r1, #35]	@ 0x23
 8010a9e:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 8010aa2:	f891 1022 	ldrb.w	r1, [r1, #34]	@ 0x22
 8010aa6:	4798      	blx	r3
                    if(spindle_sync(spindle, gc_block.modal.spindle.state, plan_data.spindle.rpm))
 8010aa8:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 8010aac:	4b12      	ldr	r3, [pc, #72]	@ (8010af8 <gc_execute_block+0x30c0>)
 8010aae:	f893 1022 	ldrb.w	r1, [r3, #34]	@ 0x22
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	f00d fffa 	bl	801eaac <spindle_sync>
 8010ab8:	2800      	cmp	r0, #0
 8010aba:	f43f af15 	beq.w	80108e8 <gc_execute_block+0x2eb0>
                        spindle->param->state = gc_block.modal.spindle.state;
 8010abe:	6862      	ldr	r2, [r4, #4]
 8010ac0:	490d      	ldr	r1, [pc, #52]	@ (8010af8 <gc_execute_block+0x30c0>)
 8010ac2:	f891 1022 	ldrb.w	r1, [r1, #34]	@ 0x22
 8010ac6:	7211      	strb	r1, [r2, #8]
        if(!(spindle_event = !spindle_ok))
 8010ac8:	9008      	str	r0, [sp, #32]
 8010aca:	e70d      	b.n	80108e8 <gc_execute_block+0x2eb0>
    plan_data.condition.is_laser_ppi_mode = gc_state.is_rpm_rate_adjusted && gc_state.is_laser_ppi_mode;
 8010acc:	2300      	movs	r3, #0
 8010ace:	f89d 2065 	ldrb.w	r2, [sp, #101]	@ 0x65
 8010ad2:	f363 0200 	bfi	r2, r3, #0, #1
 8010ad6:	f88d 2065 	strb.w	r2, [sp, #101]	@ 0x65
    switch(gc_block.state_action) {
 8010ada:	4b07      	ldr	r3, [pc, #28]	@ (8010af8 <gc_execute_block+0x30c0>)
 8010adc:	f893 10d0 	ldrb.w	r1, [r3, #208]	@ 0xd0
 8010ae0:	f1a1 0346 	sub.w	r3, r1, #70	@ 0x46
 8010ae4:	2b03      	cmp	r3, #3
 8010ae6:	d822      	bhi.n	8010b2e <gc_execute_block+0x30f6>
 8010ae8:	e8df f003 	tbb	[pc, r3]
 8010aec:	10851f10 	.word	0x10851f10
 8010af0:	20001614 	.word	0x20001614
 8010af4:	200015c8 	.word	0x200015c8
 8010af8:	2000150c 	.word	0x2000150c
 8010afc:	20001ac4 	.word	0x20001ac4
 8010b00:	200018dc 	.word	0x200018dc
 8010b04:	20001bbc 	.word	0x20001bbc
 8010b08:	20001c04 	.word	0x20001c04
            gc_state.modal.rpm = gc_state.spindle.rpm;
 8010b0c:	48b1      	ldr	r0, [pc, #708]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010b0e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8010b10:	6303      	str	r3, [r0, #48]	@ 0x30
            gc_state.modal.feed_rate = gc_state.feed_rate;
 8010b12:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8010b14:	62c3      	str	r3, [r0, #44]	@ 0x2c
            if(!ngc_modal_state_save(&gc_state.modal, gc_block.state_action == ModalState_SaveAutoRestore))
 8010b16:	2949      	cmp	r1, #73	@ 0x49
 8010b18:	bf14      	ite	ne
 8010b1a:	2100      	movne	r1, #0
 8010b1c:	2101      	moveq	r1, #1
 8010b1e:	f004 fdc1 	bl	80156a4 <ngc_modal_state_save>
 8010b22:	b920      	cbnz	r0, 8010b2e <gc_execute_block+0x30f6>
                FAIL(Status_FlowControlOutOfMemory); // [Out of memory] TODO: allocate memory during validation? Static allocation?
 8010b24:	2453      	movs	r4, #83	@ 0x53
 8010b26:	f7fd b864 	b.w	800dbf2 <gc_execute_block+0x1ba>
            ngc_modal_state_invalidate();
 8010b2a:	f004 fdf3 	bl	8015714 <ngc_modal_state_invalidate>
    if (gc_parser_flags.set_coolant && gc_state.modal.coolant.value != gc_block.modal.coolant.value) {
 8010b2e:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010b32:	d006      	beq.n	8010b42 <gc_execute_block+0x310a>
 8010b34:	4ba7      	ldr	r3, [pc, #668]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010b36:	7e5a      	ldrb	r2, [r3, #25]
 8010b38:	4ba7      	ldr	r3, [pc, #668]	@ (8010dd8 <gc_execute_block+0x33a0>)
 8010b3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d15c      	bne.n	8010bfc <gc_execute_block+0x31c4>
    plan_data.condition.coolant = gc_state.modal.coolant; // Set condition flag for planner use.
 8010b42:	4ba4      	ldr	r3, [pc, #656]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010b44:	7e5a      	ldrb	r2, [r3, #25]
 8010b46:	f88d 2066 	strb.w	r2, [sp, #102]	@ 0x66
    sys.override_delay.flags = 0;
 8010b4a:	4aa4      	ldr	r2, [pc, #656]	@ (8010ddc <gc_execute_block+0x33a4>)
 8010b4c:	2100      	movs	r1, #0
 8010b4e:	f882 102c 	strb.w	r1, [r2, #44]	@ 0x2c
    if (gc_state.modal.override_ctrl.value != gc_block.modal.override_ctrl.value) {
 8010b52:	7f1a      	ldrb	r2, [r3, #28]
 8010b54:	4ba0      	ldr	r3, [pc, #640]	@ (8010dd8 <gc_execute_block+0x33a0>)
 8010b56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d01e      	beq.n	8010b9c <gc_execute_block+0x3164>
        gc_state.modal.override_ctrl = gc_block.modal.override_ctrl;
 8010b5e:	4a9d      	ldr	r2, [pc, #628]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010b60:	4b9d      	ldr	r3, [pc, #628]	@ (8010dd8 <gc_execute_block+0x33a0>)
 8010b62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8010b66:	7713      	strb	r3, [r2, #28]
        gc_state.modal.spindle.state.override_disable = gc_state.spindle.hal->param->state.override_disable = gc_state.modal.override_ctrl.spindle_rpm_disable;
 8010b68:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8010b6a:	6859      	ldr	r1, [r3, #4]
 8010b6c:	7f13      	ldrb	r3, [r2, #28]
 8010b6e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010b72:	7a08      	ldrb	r0, [r1, #8]
 8010b74:	f363 1004 	bfi	r0, r3, #4, #1
 8010b78:	7208      	strb	r0, [r1, #8]
 8010b7a:	7e91      	ldrb	r1, [r2, #26]
 8010b7c:	f363 1104 	bfi	r1, r3, #4, #1
 8010b80:	7691      	strb	r1, [r2, #26]
        if(gc_state.modal.override_ctrl.feed_rate_disable)
 8010b82:	7f13      	ldrb	r3, [r2, #28]
 8010b84:	f013 0f01 	tst.w	r3, #1
 8010b88:	d145      	bne.n	8010c16 <gc_execute_block+0x31de>
        if(gc_state.modal.override_ctrl.spindle_rpm_disable)
 8010b8a:	4b92      	ldr	r3, [pc, #584]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010b8c:	7f1b      	ldrb	r3, [r3, #28]
 8010b8e:	f013 0f04 	tst.w	r3, #4
 8010b92:	d145      	bne.n	8010c20 <gc_execute_block+0x31e8>
        mc_override_ctrl_update(gc_state.modal.override_ctrl); // NOTE: must be called last!
 8010b94:	4b8f      	ldr	r3, [pc, #572]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010b96:	7f18      	ldrb	r0, [r3, #28]
 8010b98:	f004 f974 	bl	8014e84 <mc_override_ctrl_update>
    if(gc_block.user_mcode && !check_mode) {
 8010b9c:	4b8e      	ldr	r3, [pc, #568]	@ (8010dd8 <gc_execute_block+0x33a0>)
 8010b9e:	885b      	ldrh	r3, [r3, #2]
 8010ba0:	b1a3      	cbz	r3, 8010bcc <gc_execute_block+0x3194>
 8010ba2:	2d02      	cmp	r5, #2
 8010ba4:	d012      	beq.n	8010bcc <gc_execute_block+0x3194>
        if(gc_block.user_mcode_sync)
 8010ba6:	4b8c      	ldr	r3, [pc, #560]	@ (8010dd8 <gc_execute_block+0x33a0>)
 8010ba8:	791b      	ldrb	r3, [r3, #4]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d13e      	bne.n	8010c2c <gc_execute_block+0x31f4>
        gc_block.words.mask = user_words.mask;
 8010bae:	4b8c      	ldr	r3, [pc, #560]	@ (8010de0 <gc_execute_block+0x33a8>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	4c89      	ldr	r4, [pc, #548]	@ (8010dd8 <gc_execute_block+0x33a0>)
 8010bb4:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
        hal.user_mcode.execute(state_get(), &gc_block);
 8010bb8:	4b8a      	ldr	r3, [pc, #552]	@ (8010de4 <gc_execute_block+0x33ac>)
 8010bba:	f8d3 61c0 	ldr.w	r6, [r3, #448]	@ 0x1c0
 8010bbe:	f00e faa3 	bl	801f108 <state_get>
 8010bc2:	4621      	mov	r1, r4
 8010bc4:	47b0      	blx	r6
        gc_block.words.mask = 0;
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
    if (gc_block.non_modal_command == NonModal_Dwell)
 8010bcc:	4b82      	ldr	r3, [pc, #520]	@ (8010dd8 <gc_execute_block+0x33a0>)
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	2b04      	cmp	r3, #4
 8010bd2:	d02e      	beq.n	8010c32 <gc_execute_block+0x31fa>
    gc_state.modal.plane_select = gc_block.modal.plane_select;
 8010bd4:	4a80      	ldr	r2, [pc, #512]	@ (8010dd8 <gc_execute_block+0x33a0>)
 8010bd6:	7b91      	ldrb	r1, [r2, #14]
 8010bd8:	4b7e      	ldr	r3, [pc, #504]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010bda:	7199      	strb	r1, [r3, #6]
    gc_state.modal.units_imperial = gc_block.modal.units_imperial;
 8010bdc:	7ad2      	ldrb	r2, [r2, #11]
 8010bde:	70da      	strb	r2, [r3, #3]
    if (command_words.G8) { // Indicates a change.
 8010be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	f000 80b0 	beq.w	8010d48 <gc_execute_block+0x3310>
        gc_state.modal.tool_offset_mode = gc_block.modal.tool_offset_mode;
 8010be8:	4b7b      	ldr	r3, [pc, #492]	@ (8010dd8 <gc_execute_block+0x33a0>)
 8010bea:	7bd8      	ldrb	r0, [r3, #15]
 8010bec:	4b79      	ldr	r3, [pc, #484]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010bee:	71d8      	strb	r0, [r3, #7]
        bool tlo_changed = false;
 8010bf0:	2200      	movs	r2, #0
        idx = N_AXIS;
 8010bf2:	2303      	movs	r3, #3
 8010bf4:	e035      	b.n	8010c62 <gc_execute_block+0x322a>
            ngc_modal_state_restore();
 8010bf6:	f004 fda9 	bl	801574c <ngc_modal_state_restore>
            break;
 8010bfa:	e798      	b.n	8010b2e <gc_execute_block+0x30f6>
        if(coolant_sync(gc_block.modal.coolant))
 8010bfc:	4b76      	ldr	r3, [pc, #472]	@ (8010dd8 <gc_execute_block+0x33a0>)
 8010bfe:	f893 0021 	ldrb.w	r0, [r3, #33]	@ 0x21
 8010c02:	f7fc fa97 	bl	800d134 <coolant_sync>
 8010c06:	2800      	cmp	r0, #0
 8010c08:	d09b      	beq.n	8010b42 <gc_execute_block+0x310a>
            gc_state.modal.coolant = gc_block.modal.coolant;
 8010c0a:	4b73      	ldr	r3, [pc, #460]	@ (8010dd8 <gc_execute_block+0x33a0>)
 8010c0c:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8010c10:	4b70      	ldr	r3, [pc, #448]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010c12:	765a      	strb	r2, [r3, #25]
 8010c14:	e795      	b.n	8010b42 <gc_execute_block+0x310a>
            plan_feed_override(0, 0);
 8010c16:	2100      	movs	r1, #0
 8010c18:	4608      	mov	r0, r1
 8010c1a:	f006 fa07 	bl	801702c <plan_feed_override>
 8010c1e:	e7b4      	b.n	8010b8a <gc_execute_block+0x3152>
            spindle_set_override(gc_state.spindle.hal, DEFAULT_SPINDLE_RPM_OVERRIDE);
 8010c20:	2164      	movs	r1, #100	@ 0x64
 8010c22:	4b6c      	ldr	r3, [pc, #432]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010c24:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8010c26:	f00d ffa5 	bl	801eb74 <spindle_set_override>
 8010c2a:	e7b3      	b.n	8010b94 <gc_execute_block+0x315c>
            protocol_buffer_synchronize(); // Ensure user defined mcode is executed when specified in program.
 8010c2c:	f007 f9d2 	bl	8017fd4 <protocol_buffer_synchronize>
 8010c30:	e7bd      	b.n	8010bae <gc_execute_block+0x3176>
        mc_dwell(gc_block.values.p);
 8010c32:	4b69      	ldr	r3, [pc, #420]	@ (8010dd8 <gc_execute_block+0x33a0>)
 8010c34:	ed93 0a17 	vldr	s0, [r3, #92]	@ 0x5c
 8010c38:	f003 fec8 	bl	80149cc <mc_dwell>
 8010c3c:	e7ca      	b.n	8010bd4 <gc_execute_block+0x319c>
                    tlo_changed |= gc_state.tool_length_offset[idx] != 0.0f;
 8010c3e:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8010c42:	4964      	ldr	r1, [pc, #400]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010c44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010c48:	edd1 7a01 	vldr	s15, [r1, #4]
 8010c4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c54:	bf18      	it	ne
 8010c56:	f042 0201 	orrne.w	r2, r2, #1
                    gc_state.tool_length_offset[idx] = 0.0f;
 8010c5a:	2400      	movs	r4, #0
 8010c5c:	604c      	str	r4, [r1, #4]
        } while(idx);
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d070      	beq.n	8010d44 <gc_execute_block+0x330c>
            idx--;
 8010c62:	3b01      	subs	r3, #1
            switch(gc_state.modal.tool_offset_mode) {
 8010c64:	2803      	cmp	r0, #3
 8010c66:	d8fa      	bhi.n	8010c5e <gc_execute_block+0x3226>
 8010c68:	a101      	add	r1, pc, #4	@ (adr r1, 8010c70 <gc_execute_block+0x3238>)
 8010c6a:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8010c6e:	bf00      	nop
 8010c70:	08010c3f 	.word	0x08010c3f
 8010c74:	08010c81 	.word	0x08010c81
 8010c78:	08010d01 	.word	0x08010d01
 8010c7c:	08010cc3 	.word	0x08010cc3
                    if (gc_state.tool_length_offset[idx] != grbl.tool_table.tool[gc_block.values.h].offset[idx]) {
 8010c80:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8010c84:	4953      	ldr	r1, [pc, #332]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010c86:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010c8a:	ed91 7a01 	vldr	s14, [r1, #4]
 8010c8e:	4956      	ldr	r1, [pc, #344]	@ (8010de8 <gc_execute_block+0x33b0>)
 8010c90:	69c9      	ldr	r1, [r1, #28]
 8010c92:	4c51      	ldr	r4, [pc, #324]	@ (8010dd8 <gc_execute_block+0x33a0>)
 8010c94:	f8d4 40ac 	ldr.w	r4, [r4, #172]	@ 0xac
 8010c98:	2614      	movs	r6, #20
 8010c9a:	fb06 1104 	mla	r1, r6, r4, r1
 8010c9e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010ca2:	edd1 7a00 	vldr	s15, [r1]
 8010ca6:	eeb4 7a67 	vcmp.f32	s14, s15
 8010caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cae:	d0d6      	beq.n	8010c5e <gc_execute_block+0x3226>
                        gc_state.tool_length_offset[idx] = grbl.tool_table.tool[gc_block.values.h].offset[idx];
 8010cb0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010cb4:	4a47      	ldr	r2, [pc, #284]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010cb6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010cba:	edc2 7a01 	vstr	s15, [r2, #4]
                        tlo_changed = true;
 8010cbe:	2201      	movs	r2, #1
 8010cc0:	e7cd      	b.n	8010c5e <gc_execute_block+0x3226>
                    tlo_changed |= grbl.tool_table.tool[gc_block.values.h].offset[idx] != 0.0f;
 8010cc2:	4949      	ldr	r1, [pc, #292]	@ (8010de8 <gc_execute_block+0x33b0>)
 8010cc4:	69c9      	ldr	r1, [r1, #28]
 8010cc6:	4c44      	ldr	r4, [pc, #272]	@ (8010dd8 <gc_execute_block+0x33a0>)
 8010cc8:	f8d4 40ac 	ldr.w	r4, [r4, #172]	@ 0xac
 8010ccc:	2614      	movs	r6, #20
 8010cce:	fb06 1104 	mla	r1, r6, r4, r1
 8010cd2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010cd6:	edd1 7a00 	vldr	s15, [r1]
 8010cda:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce2:	bf18      	it	ne
 8010ce4:	f042 0201 	orrne.w	r2, r2, #1
                    gc_state.tool_length_offset[idx] += grbl.tool_table.tool[gc_block.values.h].offset[idx];
 8010ce8:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8010cec:	4939      	ldr	r1, [pc, #228]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010cee:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010cf2:	ed91 7a01 	vldr	s14, [r1, #4]
 8010cf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010cfa:	edc1 7a01 	vstr	s15, [r1, #4]
                    break;
 8010cfe:	e7ae      	b.n	8010c5e <gc_execute_block+0x3226>
                    if (bit_istrue(axis_words.mask, bit(idx)) && gc_state.tool_length_offset[idx] != gc_block.values.xyz[idx]) {
 8010d00:	fa5f f18b 	uxtb.w	r1, fp
 8010d04:	40d9      	lsrs	r1, r3
 8010d06:	f011 0f01 	tst.w	r1, #1
 8010d0a:	d0a8      	beq.n	8010c5e <gc_execute_block+0x3226>
 8010d0c:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8010d10:	4930      	ldr	r1, [pc, #192]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010d12:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010d16:	ed91 7a01 	vldr	s14, [r1, #4]
 8010d1a:	f103 0420 	add.w	r4, r3, #32
 8010d1e:	492e      	ldr	r1, [pc, #184]	@ (8010dd8 <gc_execute_block+0x33a0>)
 8010d20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010d24:	edd1 7a01 	vldr	s15, [r1, #4]
 8010d28:	eeb4 7a67 	vcmp.f32	s14, s15
 8010d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d30:	d095      	beq.n	8010c5e <gc_execute_block+0x3226>
                        gc_state.tool_length_offset[idx] = gc_block.values.xyz[idx];
 8010d32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010d36:	4a27      	ldr	r2, [pc, #156]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010d38:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010d3c:	edc2 7a01 	vstr	s15, [r2, #4]
                        tlo_changed = true;
 8010d40:	2201      	movs	r2, #1
 8010d42:	e78c      	b.n	8010c5e <gc_execute_block+0x3226>
        if(tlo_changed) {
 8010d44:	2a00      	cmp	r2, #0
 8010d46:	d132      	bne.n	8010dae <gc_execute_block+0x3376>
    if (gc_state.modal.coord_system.id != gc_block.modal.coord_system.id) {
 8010d48:	4b22      	ldr	r3, [pc, #136]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010d4a:	7d1a      	ldrb	r2, [r3, #20]
 8010d4c:	4b22      	ldr	r3, [pc, #136]	@ (8010dd8 <gc_execute_block+0x33a0>)
 8010d4e:	7f1b      	ldrb	r3, [r3, #28]
 8010d50:	429a      	cmp	r2, r3
 8010d52:	d133      	bne.n	8010dbc <gc_execute_block+0x3384>
    gc_state.modal.distance_incremental = gc_block.modal.distance_incremental;
 8010d54:	4b20      	ldr	r3, [pc, #128]	@ (8010dd8 <gc_execute_block+0x33a0>)
 8010d56:	7b19      	ldrb	r1, [r3, #12]
 8010d58:	4a1e      	ldr	r2, [pc, #120]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010d5a:	7111      	strb	r1, [r2, #4]
    gc_state.modal.retract_mode = gc_block.modal.retract_mode;
 8010d5c:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
 8010d60:	7751      	strb	r1, [r2, #29]
    switch(gc_block.non_modal_command) {
 8010d62:	781b      	ldrb	r3, [r3, #0]
 8010d64:	2b41      	cmp	r3, #65	@ 0x41
 8010d66:	d872      	bhi.n	8010e4e <gc_execute_block+0x3416>
 8010d68:	2b1c      	cmp	r3, #28
 8010d6a:	d245      	bcs.n	8010df8 <gc_execute_block+0x33c0>
 8010d6c:	2b0a      	cmp	r3, #10
 8010d6e:	f040 80ae 	bne.w	8010ece <gc_execute_block+0x3496>
            if(gc_block.values.l == 2 || gc_block.values.l == 20) {
 8010d72:	4b19      	ldr	r3, [pc, #100]	@ (8010dd8 <gc_execute_block+0x33a0>)
 8010d74:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8010d78:	2b02      	cmp	r3, #2
 8010d7a:	d002      	beq.n	8010d82 <gc_execute_block+0x334a>
 8010d7c:	2b14      	cmp	r3, #20
 8010d7e:	f040 80a6 	bne.w	8010ece <gc_execute_block+0x3496>
                settings_write_coord_data(gc_block.values.coord_data.id, &gc_block.values.coord_data.xyz);
 8010d82:	491a      	ldr	r1, [pc, #104]	@ (8010dec <gc_execute_block+0x33b4>)
 8010d84:	f1a1 0490 	sub.w	r4, r1, #144	@ 0x90
 8010d88:	7b08      	ldrb	r0, [r1, #12]
 8010d8a:	f00c fd3f 	bl	801d80c <settings_write_coord_data>
                if (gc_state.modal.coord_system.id == gc_block.values.coord_data.id) {
 8010d8e:	4b11      	ldr	r3, [pc, #68]	@ (8010dd4 <gc_execute_block+0x339c>)
 8010d90:	7d1a      	ldrb	r2, [r3, #20]
 8010d92:	f894 309c 	ldrb.w	r3, [r4, #156]	@ 0x9c
 8010d96:	429a      	cmp	r2, r3
 8010d98:	f040 8099 	bne.w	8010ece <gc_execute_block+0x3496>
                    memcpy(gc_state.modal.coord_system.xyz, gc_block.values.coord_data.xyz, sizeof(gc_state.modal.coord_system.xyz));
 8010d9c:	4b14      	ldr	r3, [pc, #80]	@ (8010df0 <gc_execute_block+0x33b8>)
 8010d9e:	f104 0290 	add.w	r2, r4, #144	@ 0x90
 8010da2:	ca07      	ldmia	r2, {r0, r1, r2}
 8010da4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                    system_flag_wco_change();
 8010da8:	f011 fa16 	bl	80221d8 <system_flag_wco_change>
 8010dac:	e08f      	b.n	8010ece <gc_execute_block+0x3496>
            system_add_rt_report(Report_ToolOffset);
 8010dae:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8010db2:	f011 f985 	bl	80220c0 <system_add_rt_report>
            system_flag_wco_change();
 8010db6:	f011 fa0f 	bl	80221d8 <system_flag_wco_change>
 8010dba:	e7c5      	b.n	8010d48 <gc_execute_block+0x3310>
        memcpy(&gc_state.modal.coord_system, &gc_block.modal.coord_system, sizeof(gc_state.modal.coord_system));
 8010dbc:	4c0c      	ldr	r4, [pc, #48]	@ (8010df0 <gc_execute_block+0x33b8>)
 8010dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8010df4 <gc_execute_block+0x33bc>)
 8010dc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010dc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        system_add_rt_report(Report_GWCO);
 8010dc6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010dca:	f011 f979 	bl	80220c0 <system_add_rt_report>
        system_flag_wco_change();
 8010dce:	f011 fa03 	bl	80221d8 <system_flag_wco_change>
 8010dd2:	e7bf      	b.n	8010d54 <gc_execute_block+0x331c>
 8010dd4:	20001614 	.word	0x20001614
 8010dd8:	2000150c 	.word	0x2000150c
 8010ddc:	20001bbc 	.word	0x20001bbc
 8010de0:	20001508 	.word	0x20001508
 8010de4:	200018dc 	.word	0x200018dc
 8010de8:	20001ac4 	.word	0x20001ac4
 8010dec:	2000159c 	.word	0x2000159c
 8010df0:	2000161c 	.word	0x2000161c
 8010df4:	2000151c 	.word	0x2000151c
    switch(gc_block.non_modal_command) {
 8010df8:	3b1c      	subs	r3, #28
 8010dfa:	2b25      	cmp	r3, #37	@ 0x25
 8010dfc:	d867      	bhi.n	8010ece <gc_execute_block+0x3496>
 8010dfe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010e02:	004e      	.short	0x004e
 8010e04:	004e0066 	.word	0x004e0066
 8010e08:	00660066 	.word	0x00660066
 8010e0c:	00660066 	.word	0x00660066
 8010e10:	00660066 	.word	0x00660066
 8010e14:	01010066 	.word	0x01010066
 8010e18:	01060066 	.word	0x01060066
 8010e1c:	00660066 	.word	0x00660066
 8010e20:	00660066 	.word	0x00660066
 8010e24:	00660066 	.word	0x00660066
 8010e28:	00660066 	.word	0x00660066
 8010e2c:	00660066 	.word	0x00660066
 8010e30:	00660066 	.word	0x00660066
 8010e34:	00660066 	.word	0x00660066
 8010e38:	00660066 	.word	0x00660066
 8010e3c:	00660066 	.word	0x00660066
 8010e40:	00660066 	.word	0x00660066
 8010e44:	00660066 	.word	0x00660066
 8010e48:	00660066 	.word	0x00660066
 8010e4c:	010b      	.short	0x010b
 8010e4e:	2b7a      	cmp	r3, #122	@ 0x7a
 8010e50:	d83d      	bhi.n	8010ece <gc_execute_block+0x3496>
 8010e52:	2b5c      	cmp	r3, #92	@ 0x5c
 8010e54:	d33b      	bcc.n	8010ece <gc_execute_block+0x3496>
 8010e56:	3b5c      	subs	r3, #92	@ 0x5c
 8010e58:	2b1e      	cmp	r3, #30
 8010e5a:	d838      	bhi.n	8010ece <gc_execute_block+0x3496>
 8010e5c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010e60:	003700fb 	.word	0x003700fb
 8010e64:	00370037 	.word	0x00370037
 8010e68:	00370037 	.word	0x00370037
 8010e6c:	00370037 	.word	0x00370037
 8010e70:	00370037 	.word	0x00370037
 8010e74:	00370112 	.word	0x00370112
 8010e78:	00370037 	.word	0x00370037
 8010e7c:	00370037 	.word	0x00370037
 8010e80:	00370037 	.word	0x00370037
 8010e84:	00370037 	.word	0x00370037
 8010e88:	0037012b 	.word	0x0037012b
 8010e8c:	00370037 	.word	0x00370037
 8010e90:	00370037 	.word	0x00370037
 8010e94:	00370037 	.word	0x00370037
 8010e98:	00370037 	.word	0x00370037
 8010e9c:	0138      	.short	0x0138
            plan_data.condition.rapid_motion = On; // Set rapid motion condition flag.
 8010e9e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8010ea2:	f043 0301 	orr.w	r3, r3, #1
 8010ea6:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
            if(axis_command)
 8010eaa:	f1ba 0f00 	cmp.w	sl, #0
 8010eae:	f040 80a4 	bne.w	8010ffa <gc_execute_block+0x35c2>
            mc_line(gc_block.values.coord_data.xyz, &plan_data);
 8010eb2:	4c8d      	ldr	r4, [pc, #564]	@ (80110e8 <gc_execute_block+0x36b0>)
 8010eb4:	a914      	add	r1, sp, #80	@ 0x50
 8010eb6:	4620      	mov	r0, r4
 8010eb8:	f002 ff8e 	bl	8013dd8 <mc_line>
            memcpy(gc_state.position, gc_block.values.coord_data.xyz, sizeof(gc_state.position));
 8010ebc:	4b8b      	ldr	r3, [pc, #556]	@ (80110ec <gc_execute_block+0x36b4>)
 8010ebe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8010ec2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            set_scaling(1.0f);
 8010ec6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010eca:	f7fc faeb 	bl	800d4a4 <set_scaling>
    gc_state.modal.motion = gc_block.modal.motion;
 8010ece:	4a88      	ldr	r2, [pc, #544]	@ (80110f0 <gc_execute_block+0x36b8>)
 8010ed0:	8910      	ldrh	r0, [r2, #8]
 8010ed2:	4b88      	ldr	r3, [pc, #544]	@ (80110f4 <gc_execute_block+0x36bc>)
 8010ed4:	8018      	strh	r0, [r3, #0]
    gc_state.modal.canned_cycle_active = gc_block.modal.canned_cycle_active;
 8010ed6:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8010eda:	77da      	strb	r2, [r3, #31]
    if(gc_state.modal.motion != MotionMode_None && axis_command == AxisCommand_MotionMode) {
 8010edc:	2850      	cmp	r0, #80	@ 0x50
 8010ede:	d003      	beq.n	8010ee8 <gc_execute_block+0x34b0>
 8010ee0:	f1ba 0f02 	cmp.w	sl, #2
 8010ee4:	f000 8118 	beq.w	8011118 <gc_execute_block+0x36e0>
    if(plan_data.message)
 8010ee8:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8010eea:	b108      	cbz	r0, 8010ef0 <gc_execute_block+0x34b8>
        gc_output_message(plan_data.message);
 8010eec:	f7fc fc8e 	bl	800d80c <gc_output_message>
    gc_state.modal.program_flow = gc_block.modal.program_flow;
 8010ef0:	4b7f      	ldr	r3, [pc, #508]	@ (80110f0 <gc_execute_block+0x36b8>)
 8010ef2:	f893 4020 	ldrb.w	r4, [r3, #32]
 8010ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80110f4 <gc_execute_block+0x36bc>)
 8010ef8:	761c      	strb	r4, [r3, #24]
    if(gc_state.modal.program_flow || sys.flags.single_block) {
 8010efa:	b92c      	cbnz	r4, 8010f08 <gc_execute_block+0x34d0>
 8010efc:	4b7e      	ldr	r3, [pc, #504]	@ (80110f8 <gc_execute_block+0x36c0>)
 8010efe:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	f6bc ae75 	bge.w	800dbf2 <gc_execute_block+0x1ba>
        protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 8010f08:	f007 f864 	bl	8017fd4 <protocol_buffer_synchronize>
        if(gc_state.modal.program_flow == ProgramFlow_Return) {
 8010f0c:	4b79      	ldr	r3, [pc, #484]	@ (80110f4 <gc_execute_block+0x36bc>)
 8010f0e:	7e1b      	ldrb	r3, [r3, #24]
 8010f10:	2b63      	cmp	r3, #99	@ 0x63
 8010f12:	f000 82d1 	beq.w	80114b8 <gc_execute_block+0x3a80>
        } else if(gc_state.modal.program_flow == ProgramFlow_Paused || gc_block.modal.program_flow == ProgramFlow_OptionalStop || gc_block.modal.program_flow == ProgramFlow_CompletedM60 || sys.flags.single_block) {
 8010f16:	2b03      	cmp	r3, #3
 8010f18:	f000 82d4 	beq.w	80114c4 <gc_execute_block+0x3a8c>
 8010f1c:	4b74      	ldr	r3, [pc, #464]	@ (80110f0 <gc_execute_block+0x36b8>)
 8010f1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010f22:	2b01      	cmp	r3, #1
 8010f24:	f000 82ce 	beq.w	80114c4 <gc_execute_block+0x3a8c>
 8010f28:	2b3c      	cmp	r3, #60	@ 0x3c
 8010f2a:	f000 82cb 	beq.w	80114c4 <gc_execute_block+0x3a8c>
 8010f2e:	4a72      	ldr	r2, [pc, #456]	@ (80110f8 <gc_execute_block+0x36c0>)
 8010f30:	f992 2016 	ldrsb.w	r2, [r2, #22]
 8010f34:	2a00      	cmp	r2, #0
 8010f36:	f2c0 82c5 	blt.w	80114c4 <gc_execute_block+0x3a8c>
            if(!check_mode && gc_block.modal.program_flow == ProgramFlow_CompletedM30 && hal.pallet_shuttle)
 8010f3a:	2d02      	cmp	r5, #2
 8010f3c:	d002      	beq.n	8010f44 <gc_execute_block+0x350c>
 8010f3e:	2b1e      	cmp	r3, #30
 8010f40:	f000 82db 	beq.w	80114fa <gc_execute_block+0x3ac2>
            gc_state.file_run = false;
 8010f44:	4b6b      	ldr	r3, [pc, #428]	@ (80110f4 <gc_execute_block+0x36bc>)
 8010f46:	2200      	movs	r2, #0
 8010f48:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            gc_state.modal.motion = MotionMode_Linear;
 8010f4c:	2101      	movs	r1, #1
 8010f4e:	8019      	strh	r1, [r3, #0]
            gc_block.modal.canned_cycle_active = false;
 8010f50:	4967      	ldr	r1, [pc, #412]	@ (80110f0 <gc_execute_block+0x36b8>)
 8010f52:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
            gc_state.modal.plane_select = PlaneSelect_XY;
 8010f56:	719a      	strb	r2, [r3, #6]
            gc_state.modal.spindle.rpm_mode = SpindleSpeedMode_RPM; // NOTE: not compliant with linuxcnc (?)
 8010f58:	76da      	strb	r2, [r3, #27]
            gc_state.modal.distance_incremental = false;
 8010f5a:	711a      	strb	r2, [r3, #4]
            gc_state.modal.feed_mode = FeedMode_UnitsPerMin;
 8010f5c:	709a      	strb	r2, [r3, #2]
            if(gc_state.modal.coord_system.id != CoordinateSystem_G54) {
 8010f5e:	7d1b      	ldrb	r3, [r3, #20]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	f040 82d2 	bne.w	801150a <gc_execute_block+0x3ad2>
            gc_state.modal.spindle.state = (spindle_state_t){0};
 8010f66:	4b63      	ldr	r3, [pc, #396]	@ (80110f4 <gc_execute_block+0x36bc>)
 8010f68:	2000      	movs	r0, #0
 8010f6a:	7698      	strb	r0, [r3, #26]
            gc_state.modal.coolant = (coolant_state_t){0};
 8010f6c:	7658      	strb	r0, [r3, #25]
            gc_state.modal.override_ctrl.feed_rate_disable = Off;
 8010f6e:	7f1a      	ldrb	r2, [r3, #28]
 8010f70:	f360 0200 	bfi	r2, r0, #0, #1
 8010f74:	771a      	strb	r2, [r3, #28]
            gc_state.modal.override_ctrl.spindle_rpm_disable = Off;
 8010f76:	b2d2      	uxtb	r2, r2
 8010f78:	f360 0282 	bfi	r2, r0, #2, #1
 8010f7c:	771a      	strb	r2, [r3, #28]
                if((spindle = spindle_get(--idx))) {
 8010f7e:	f00d fc33 	bl	801e7e8 <spindle_get>
 8010f82:	b168      	cbz	r0, 8010fa0 <gc_execute_block+0x3568>
                    spindle->param->state.override_disable = Off;
 8010f84:	6842      	ldr	r2, [r0, #4]
 8010f86:	7a11      	ldrb	r1, [r2, #8]
 8010f88:	f36f 1104 	bfc	r1, #4, #1
 8010f8c:	7211      	strb	r1, [r2, #8]
                    if(settings.flags.restore_overrides)
 8010f8e:	4a5b      	ldr	r2, [pc, #364]	@ (80110fc <gc_execute_block+0x36c4>)
 8010f90:	f892 20fe 	ldrb.w	r2, [r2, #254]	@ 0xfe
 8010f94:	f012 0f02 	tst.w	r2, #2
 8010f98:	d002      	beq.n	8010fa0 <gc_execute_block+0x3568>
                        spindle->param->override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE;
 8010f9a:	6843      	ldr	r3, [r0, #4]
 8010f9c:	2264      	movs	r2, #100	@ 0x64
 8010f9e:	60da      	str	r2, [r3, #12]
            if(settings.parking.flags.enabled)
 8010fa0:	4b56      	ldr	r3, [pc, #344]	@ (80110fc <gc_execute_block+0x36c4>)
 8010fa2:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 8010fa6:	f013 0f01 	tst.w	r3, #1
 8010faa:	d00a      	beq.n	8010fc2 <gc_execute_block+0x358a>
                gc_state.modal.override_ctrl.parking_disable = settings.parking.flags.enable_override_control &&
 8010fac:	f003 0306 	and.w	r3, r3, #6
 8010fb0:	2b06      	cmp	r3, #6
 8010fb2:	bf14      	ite	ne
 8010fb4:	2300      	movne	r3, #0
 8010fb6:	2301      	moveq	r3, #1
 8010fb8:	4a4e      	ldr	r2, [pc, #312]	@ (80110f4 <gc_execute_block+0x36bc>)
 8010fba:	7f11      	ldrb	r1, [r2, #28]
 8010fbc:	f363 01c3 	bfi	r1, r3, #3, #1
 8010fc0:	7711      	strb	r1, [r2, #28]
            sys.override.control = gc_state.modal.override_ctrl;
 8010fc2:	4b4c      	ldr	r3, [pc, #304]	@ (80110f4 <gc_execute_block+0x36bc>)
 8010fc4:	7f1a      	ldrb	r2, [r3, #28]
 8010fc6:	4b4c      	ldr	r3, [pc, #304]	@ (80110f8 <gc_execute_block+0x36c0>)
 8010fc8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            if(settings.flags.restore_overrides) {
 8010fcc:	4b4b      	ldr	r3, [pc, #300]	@ (80110fc <gc_execute_block+0x36c4>)
 8010fce:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8010fd2:	f013 0f02 	tst.w	r3, #2
 8010fd6:	d003      	beq.n	8010fe0 <gc_execute_block+0x35a8>
                sys.override.feed_rate = DEFAULT_FEED_OVERRIDE;
 8010fd8:	4b47      	ldr	r3, [pc, #284]	@ (80110f8 <gc_execute_block+0x36c0>)
 8010fda:	2264      	movs	r2, #100	@ 0x64
 8010fdc:	61da      	str	r2, [r3, #28]
                sys.override.rapid_rate = DEFAULT_RAPID_OVERRIDE;
 8010fde:	621a      	str	r2, [r3, #32]
            if (!check_mode) {
 8010fe0:	2d02      	cmp	r5, #2
 8010fe2:	f040 8299 	bne.w	8011518 <gc_execute_block+0x3ae0>
            if(grbl.on_program_completed)
 8010fe6:	4b46      	ldr	r3, [pc, #280]	@ (8011100 <gc_execute_block+0x36c8>)
 8010fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	f000 82c1 	beq.w	8011572 <gc_execute_block+0x3b3a>
                grbl.on_program_completed(gc_state.modal.program_flow, check_mode);
 8010ff0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010ff2:	4a40      	ldr	r2, [pc, #256]	@ (80110f4 <gc_execute_block+0x36bc>)
 8010ff4:	7e10      	ldrb	r0, [r2, #24]
 8010ff6:	4798      	blx	r3
 8010ff8:	e2bb      	b.n	8011572 <gc_execute_block+0x3b3a>
                mc_line(gc_block.values.xyz, &plan_data);
 8010ffa:	a914      	add	r1, sp, #80	@ 0x50
 8010ffc:	4841      	ldr	r0, [pc, #260]	@ (8011104 <gc_execute_block+0x36cc>)
 8010ffe:	f002 feeb 	bl	8013dd8 <mc_line>
 8011002:	e756      	b.n	8010eb2 <gc_execute_block+0x347a>
            settings_write_coord_data(CoordinateSystem_G28, &gc_state.position);
 8011004:	4939      	ldr	r1, [pc, #228]	@ (80110ec <gc_execute_block+0x36b4>)
 8011006:	2009      	movs	r0, #9
 8011008:	f00c fc00 	bl	801d80c <settings_write_coord_data>
            break;
 801100c:	e75f      	b.n	8010ece <gc_execute_block+0x3496>
            settings_write_coord_data(CoordinateSystem_G30, &gc_state.position);
 801100e:	4937      	ldr	r1, [pc, #220]	@ (80110ec <gc_execute_block+0x36b4>)
 8011010:	200a      	movs	r0, #10
 8011012:	f00c fbfb 	bl	801d80c <settings_write_coord_data>
            break;
 8011016:	e75a      	b.n	8010ece <gc_execute_block+0x3496>
                ngc_named_param_set("_value", 0.0f);
 8011018:	ed9f 8a3b 	vldr	s16, [pc, #236]	@ 8011108 <gc_execute_block+0x36d0>
 801101c:	eeb0 0a48 	vmov.f32	s0, s16
 8011020:	483a      	ldr	r0, [pc, #232]	@ (801110c <gc_execute_block+0x36d4>)
 8011022:	f004 fad1 	bl	80155c8 <ngc_named_param_set>
                ngc_named_param_set("_value_returned", 0.0f);
 8011026:	eeb0 0a48 	vmov.f32	s0, s16
 801102a:	4839      	ldr	r0, [pc, #228]	@ (8011110 <gc_execute_block+0x36d8>)
 801102c:	f004 facc 	bl	80155c8 <ngc_named_param_set>
                status_code_t status = grbl.on_macro_execute((macro_id_t)gc_block.values.p);
 8011030:	4b33      	ldr	r3, [pc, #204]	@ (8011100 <gc_execute_block+0x36c8>)
 8011032:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011036:	4a2e      	ldr	r2, [pc, #184]	@ (80110f0 <gc_execute_block+0x36b8>)
 8011038:	edd2 7a17 	vldr	s15, [r2, #92]	@ 0x5c
 801103c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011040:	ee17 2a90 	vmov	r2, s15
 8011044:	b290      	uxth	r0, r2
 8011046:	4798      	blx	r3
 8011048:	4604      	mov	r4, r0
                return status == Status_Unhandled ? Status_GcodeValueOutOfRange : status;
 801104a:	2854      	cmp	r0, #84	@ 0x54
 801104c:	f47c add1 	bne.w	800dbf2 <gc_execute_block+0x1ba>
 8011050:	2427      	movs	r4, #39	@ 0x27
 8011052:	f7fc bdce 	b.w	800dbf2 <gc_execute_block+0x1ba>
            gc_state.g92_coord_offset_applied = true; // TODO: check for all zero?
 8011056:	4b27      	ldr	r3, [pc, #156]	@ (80110f4 <gc_execute_block+0x36bc>)
 8011058:	2201      	movs	r2, #1
 801105a:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
            memcpy(gc_state.g92_coord_offset, gc_block.values.xyz, sizeof(gc_state.g92_coord_offset));
 801105e:	33b8      	adds	r3, #184	@ 0xb8
 8011060:	4a28      	ldr	r2, [pc, #160]	@ (8011104 <gc_execute_block+0x36cc>)
 8011062:	ca07      	ldmia	r2, {r0, r1, r2}
 8011064:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            if(!settings.flags.g92_is_volatile)
 8011068:	4b24      	ldr	r3, [pc, #144]	@ (80110fc <gc_execute_block+0x36c4>)
 801106a:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 801106e:	f013 0f02 	tst.w	r3, #2
 8011072:	d002      	beq.n	801107a <gc_execute_block+0x3642>
            add_offset();
 8011074:	f7fc f9b8 	bl	800d3e8 <add_offset>
            break;
 8011078:	e729      	b.n	8010ece <gc_execute_block+0x3496>
                settings_write_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Save G92 offsets to non-volatile storage
 801107a:	4926      	ldr	r1, [pc, #152]	@ (8011114 <gc_execute_block+0x36dc>)
 801107c:	200b      	movs	r0, #11
 801107e:	f00c fbc5 	bl	801d80c <settings_write_coord_data>
 8011082:	e7f7      	b.n	8011074 <gc_execute_block+0x363c>
            gc_state.g92_coord_offset_applied = false;
 8011084:	4a1b      	ldr	r2, [pc, #108]	@ (80110f4 <gc_execute_block+0x36bc>)
 8011086:	2300      	movs	r3, #0
 8011088:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
            clear_vector(gc_state.g92_coord_offset); // Disable G92 offsets by zeroing offset vector.
 801108c:	f102 01b8 	add.w	r1, r2, #184	@ 0xb8
 8011090:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
 8011094:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
 8011098:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            if(!settings.flags.g92_is_volatile)
 801109c:	4b17      	ldr	r3, [pc, #92]	@ (80110fc <gc_execute_block+0x36c4>)
 801109e:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 80110a2:	f013 0f02 	tst.w	r3, #2
 80110a6:	d002      	beq.n	80110ae <gc_execute_block+0x3676>
            add_offset();
 80110a8:	f7fc f99e 	bl	800d3e8 <add_offset>
            break;
 80110ac:	e70f      	b.n	8010ece <gc_execute_block+0x3496>
                settings_write_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Save G92 offsets to non-volatile storage
 80110ae:	200b      	movs	r0, #11
 80110b0:	f00c fbac 	bl	801d80c <settings_write_coord_data>
 80110b4:	e7f8      	b.n	80110a8 <gc_execute_block+0x3670>
            gc_state.g92_coord_offset_applied = false;
 80110b6:	4a0f      	ldr	r2, [pc, #60]	@ (80110f4 <gc_execute_block+0x36bc>)
 80110b8:	2300      	movs	r3, #0
 80110ba:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
            clear_vector(gc_state.g92_coord_offset); // Disable G92 offsets by zeroing offset vector.
 80110be:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
 80110c2:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
 80110c6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            add_offset();
 80110ca:	f7fc f98d 	bl	800d3e8 <add_offset>
            break;
 80110ce:	e6fe      	b.n	8010ece <gc_execute_block+0x3496>
            gc_state.g92_coord_offset_applied = true; // TODO: check for all zero?
 80110d0:	4908      	ldr	r1, [pc, #32]	@ (80110f4 <gc_execute_block+0x36bc>)
 80110d2:	2301      	movs	r3, #1
 80110d4:	f881 30b4 	strb.w	r3, [r1, #180]	@ 0xb4
            settings_read_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Restore G92 offsets from non-volatile storage
 80110d8:	31b8      	adds	r1, #184	@ 0xb8
 80110da:	200b      	movs	r0, #11
 80110dc:	f00c fbba 	bl	801d854 <settings_read_coord_data>
            add_offset();
 80110e0:	f7fc f982 	bl	800d3e8 <add_offset>
            break;
 80110e4:	e6f3      	b.n	8010ece <gc_execute_block+0x3496>
 80110e6:	bf00      	nop
 80110e8:	2000159c 	.word	0x2000159c
 80110ec:	2000167c 	.word	0x2000167c
 80110f0:	2000150c 	.word	0x2000150c
 80110f4:	20001614 	.word	0x20001614
 80110f8:	20001bbc 	.word	0x20001bbc
 80110fc:	200022f4 	.word	0x200022f4
 8011100:	20001ac4 	.word	0x20001ac4
 8011104:	20001590 	.word	0x20001590
 8011108:	00000000 	.word	0x00000000
 801110c:	0802b680 	.word	0x0802b680
 8011110:	0802b688 	.word	0x0802b688
 8011114:	200016cc 	.word	0x200016cc
        plan_data.output_commands = output_commands;
 8011118:	4ba6      	ldr	r3, [pc, #664]	@ (80113b4 <gc_execute_block+0x397c>)
 801111a:	681a      	ldr	r2, [r3, #0]
 801111c:	921d      	str	r2, [sp, #116]	@ 0x74
        output_commands = NULL;
 801111e:	2200      	movs	r2, #0
 8011120:	601a      	str	r2, [r3, #0]
        switch(gc_state.modal.motion) {
 8011122:	2853      	cmp	r0, #83	@ 0x53
 8011124:	d858      	bhi.n	80111d8 <gc_execute_block+0x37a0>
 8011126:	2853      	cmp	r0, #83	@ 0x53
 8011128:	f200 81a5 	bhi.w	8011476 <gc_execute_block+0x3a3e>
 801112c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8011130:	006d0098 	.word	0x006d0098
 8011134:	00a400a4 	.word	0x00a400a4
 8011138:	00d401a3 	.word	0x00d401a3
 801113c:	01a301a3 	.word	0x01a301a3
 8011140:	01a301a3 	.word	0x01a301a3
 8011144:	01a301a3 	.word	0x01a301a3
 8011148:	01a301a3 	.word	0x01a301a3
 801114c:	01a301a3 	.word	0x01a301a3
 8011150:	01a301a3 	.word	0x01a301a3
 8011154:	01a301a3 	.word	0x01a301a3
 8011158:	01a301a3 	.word	0x01a301a3
 801115c:	01a301a3 	.word	0x01a301a3
 8011160:	01a301a3 	.word	0x01a301a3
 8011164:	01a301a3 	.word	0x01a301a3
 8011168:	01a301a3 	.word	0x01a301a3
 801116c:	01a301a3 	.word	0x01a301a3
 8011170:	015001a3 	.word	0x015001a3
 8011174:	01a301a3 	.word	0x01a301a3
 8011178:	01a301a3 	.word	0x01a301a3
 801117c:	01a301a3 	.word	0x01a301a3
 8011180:	01a301a3 	.word	0x01a301a3
 8011184:	01a301a3 	.word	0x01a301a3
 8011188:	01a301a3 	.word	0x01a301a3
 801118c:	01a301a3 	.word	0x01a301a3
 8011190:	01a301a3 	.word	0x01a301a3
 8011194:	010001a3 	.word	0x010001a3
 8011198:	01a301a3 	.word	0x01a301a3
 801119c:	01a301a3 	.word	0x01a301a3
 80111a0:	01a301a3 	.word	0x01a301a3
 80111a4:	01a301a3 	.word	0x01a301a3
 80111a8:	01a301a3 	.word	0x01a301a3
 80111ac:	01a301a3 	.word	0x01a301a3
 80111b0:	01a301a3 	.word	0x01a301a3
 80111b4:	01a301a3 	.word	0x01a301a3
 80111b8:	01a301a3 	.word	0x01a301a3
 80111bc:	01a301a3 	.word	0x01a301a3
 80111c0:	018901a3 	.word	0x018901a3
 80111c4:	01a301a3 	.word	0x01a301a3
 80111c8:	01a3016f 	.word	0x01a3016f
 80111cc:	01a301a3 	.word	0x01a301a3
 80111d0:	018901a3 	.word	0x018901a3
 80111d4:	01890189 	.word	0x01890189
 80111d8:	f1a0 038c 	sub.w	r3, r0, #140	@ 0x8c
 80111dc:	b29b      	uxth	r3, r3
 80111de:	2b03      	cmp	r3, #3
 80111e0:	f200 814f 	bhi.w	8011482 <gc_execute_block+0x3a4a>
                plan_data.condition.no_feed_override = !settings.probe.allow_feed_override;
 80111e4:	4b74      	ldr	r3, [pc, #464]	@ (80113b8 <gc_execute_block+0x3980>)
 80111e6:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 80111ea:	091b      	lsrs	r3, r3, #4
 80111ec:	f083 0301 	eor.w	r3, r3, #1
 80111f0:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80111f4:	f363 1204 	bfi	r2, r3, #4, #1
 80111f8:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
                gc_update_pos = (pos_update_t)mc_probe_cycle(gc_block.values.xyz, &plan_data, gc_parser_flags);
 80111fc:	4642      	mov	r2, r8
 80111fe:	a914      	add	r1, sp, #80	@ 0x50
 8011200:	486e      	ldr	r0, [pc, #440]	@ (80113bc <gc_execute_block+0x3984>)
 8011202:	f003 fcf9 	bl	8014bf8 <mc_probe_cycle>
 8011206:	4604      	mov	r4, r0
                break;
 8011208:	e136      	b.n	8011478 <gc_execute_block+0x3a40>
                if(gc_state.modal.feed_mode == FeedMode_UnitsPerRev) {
 801120a:	4b6d      	ldr	r3, [pc, #436]	@ (80113c0 <gc_execute_block+0x3988>)
 801120c:	789b      	ldrb	r3, [r3, #2]
 801120e:	2b02      	cmp	r3, #2
 8011210:	d005      	beq.n	801121e <gc_execute_block+0x37e6>
                mc_line(gc_block.values.xyz, &plan_data);
 8011212:	a914      	add	r1, sp, #80	@ 0x50
 8011214:	4869      	ldr	r0, [pc, #420]	@ (80113bc <gc_execute_block+0x3984>)
 8011216:	f002 fddf 	bl	8013dd8 <mc_line>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 801121a:	9c05      	ldr	r4, [sp, #20]
                break;
 801121c:	e12c      	b.n	8011478 <gc_execute_block+0x3a40>
                    plan_data.condition.units_per_rev = On;
 801121e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8011222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011226:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
                    plan_data.spindle.state.synchronized = settings.mode != Mode_Lathe || gc_block.values.xyz[Z_AXIS] != gc_state.position[Z_AXIS];
 801122a:	4b63      	ldr	r3, [pc, #396]	@ (80113b8 <gc_execute_block+0x3980>)
 801122c:	7e1b      	ldrb	r3, [r3, #24]
 801122e:	2b02      	cmp	r3, #2
 8011230:	d007      	beq.n	8011242 <gc_execute_block+0x380a>
 8011232:	2301      	movs	r3, #1
 8011234:	f89d 2058 	ldrb.w	r2, [sp, #88]	@ 0x58
 8011238:	f363 12c7 	bfi	r2, r3, #7, #1
 801123c:	f88d 2058 	strb.w	r2, [sp, #88]	@ 0x58
 8011240:	e7e7      	b.n	8011212 <gc_execute_block+0x37da>
 8011242:	4b60      	ldr	r3, [pc, #384]	@ (80113c4 <gc_execute_block+0x398c>)
 8011244:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8011248:	4b5d      	ldr	r3, [pc, #372]	@ (80113c0 <gc_execute_block+0x3988>)
 801124a:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 801124e:	eeb4 7a67 	vcmp.f32	s14, s15
 8011252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011256:	d001      	beq.n	801125c <gc_execute_block+0x3824>
 8011258:	2301      	movs	r3, #1
 801125a:	e7eb      	b.n	8011234 <gc_execute_block+0x37fc>
 801125c:	2300      	movs	r3, #0
 801125e:	e7e9      	b.n	8011234 <gc_execute_block+0x37fc>
                plan_data.condition.rapid_motion = On; // Set rapid motion condition flag.
 8011260:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8011264:	f043 0301 	orr.w	r3, r3, #1
 8011268:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
                mc_line(gc_block.values.xyz, &plan_data);
 801126c:	a914      	add	r1, sp, #80	@ 0x50
 801126e:	4853      	ldr	r0, [pc, #332]	@ (80113bc <gc_execute_block+0x3984>)
 8011270:	f002 fdb2 	bl	8013dd8 <mc_line>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 8011274:	9c05      	ldr	r4, [sp, #20]
                break;
 8011276:	e0ff      	b.n	8011478 <gc_execute_block+0x3a40>
                if(gc_state.modal.feed_mode == FeedMode_UnitsPerRev)
 8011278:	4b51      	ldr	r3, [pc, #324]	@ (80113c0 <gc_execute_block+0x3988>)
 801127a:	789b      	ldrb	r3, [r3, #2]
 801127c:	2b02      	cmp	r3, #2
 801127e:	d01a      	beq.n	80112b6 <gc_execute_block+0x387e>
                mc_arc(gc_block.values.xyz, &plan_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 8011280:	4b50      	ldr	r3, [pc, #320]	@ (80113c4 <gc_execute_block+0x398c>)
 8011282:	ed93 0a19 	vldr	s0, [r3, #100]	@ 0x64
 8011286:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011288:	f013 0f04 	tst.w	r3, #4
 801128c:	d020      	beq.n	80112d0 <gc_execute_block+0x3898>
                        plane, gc_parser_flags.arc_is_clockwise ? -gc_block.arc_turns : gc_block.arc_turns);
 801128e:	4b4d      	ldr	r3, [pc, #308]	@ (80113c4 <gc_execute_block+0x398c>)
 8011290:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8011294:	4252      	negs	r2, r2
                mc_arc(gc_block.values.xyz, &plan_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 8011296:	4b4c      	ldr	r3, [pc, #304]	@ (80113c8 <gc_execute_block+0x3990>)
 8011298:	9201      	str	r2, [sp, #4]
 801129a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801129c:	f8ad 2000 	strh.w	r2, [sp]
 80112a0:	0c12      	lsrs	r2, r2, #16
 80112a2:	f88d 2002 	strb.w	r2, [sp, #2]
 80112a6:	4a49      	ldr	r2, [pc, #292]	@ (80113cc <gc_execute_block+0x3994>)
 80112a8:	a914      	add	r1, sp, #80	@ 0x50
 80112aa:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80112ae:	f002 fddb 	bl	8013e68 <mc_arc>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 80112b2:	9c05      	ldr	r4, [sp, #20]
                break;
 80112b4:	e0e0      	b.n	8011478 <gc_execute_block+0x3a40>
                    plan_data.condition.units_per_rev = plan_data.spindle.state.synchronized = On;
 80112b6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80112ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112be:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 80112c2:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80112c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112ca:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80112ce:	e7d7      	b.n	8011280 <gc_execute_block+0x3848>
                        plane, gc_parser_flags.arc_is_clockwise ? -gc_block.arc_turns : gc_block.arc_turns);
 80112d0:	4b3c      	ldr	r3, [pc, #240]	@ (80113c4 <gc_execute_block+0x398c>)
 80112d2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80112d6:	e7de      	b.n	8011296 <gc_execute_block+0x385e>
                        .x = gc_state.position[X_AXIS] + gc_block.values.ijk[X_AXIS],
 80112d8:	4a39      	ldr	r2, [pc, #228]	@ (80113c0 <gc_execute_block+0x3988>)
 80112da:	edd2 7a1a 	vldr	s15, [r2, #104]	@ 0x68
 80112de:	4839      	ldr	r0, [pc, #228]	@ (80113c4 <gc_execute_block+0x398c>)
 80112e0:	ed90 7a12 	vldr	s14, [r0, #72]	@ 0x48
 80112e4:	ee77 7a87 	vadd.f32	s15, s15, s14
                    point_2d_t cp1 = {
 80112e8:	edcd 7a0f 	vstr	s15, [sp, #60]	@ 0x3c
                        .y = gc_state.position[Y_AXIS] + gc_block.values.ijk[Y_AXIS]
 80112ec:	edd2 7a1b 	vldr	s15, [r2, #108]	@ 0x6c
 80112f0:	ed90 7a13 	vldr	s14, [r0, #76]	@ 0x4c
 80112f4:	ee77 7a87 	vadd.f32	s15, s15, s14
                    point_2d_t cp1 = {
 80112f8:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
                        .x = gc_block.values.xyz[X_AXIS] + gc_state.modal.spline_pq[X_AXIS],
 80112fc:	edd0 7a21 	vldr	s15, [r0, #132]	@ 0x84
 8011300:	ed92 7a08 	vldr	s14, [r2, #32]
 8011304:	ee77 7a87 	vadd.f32	s15, s15, s14
                    point_2d_t cp2 = {
 8011308:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
                        .y = gc_block.values.xyz[Y_AXIS] + gc_state.modal.spline_pq[Y_AXIS]
 801130c:	edd0 7a22 	vldr	s15, [r0, #136]	@ 0x88
 8011310:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 8011314:	ee77 7a87 	vadd.f32	s15, s15, s14
                    point_2d_t cp2 = {
 8011318:	edcd 7a12 	vstr	s15, [sp, #72]	@ 0x48
                    mc_cubic_b_spline(gc_block.values.xyz, &plan_data, gc_state.position, cp1.values, cp2.values);
 801131c:	ab11      	add	r3, sp, #68	@ 0x44
 801131e:	9300      	str	r3, [sp, #0]
 8011320:	ab0f      	add	r3, sp, #60	@ 0x3c
 8011322:	3268      	adds	r2, #104	@ 0x68
 8011324:	a914      	add	r1, sp, #80	@ 0x50
 8011326:	3084      	adds	r0, #132	@ 0x84
 8011328:	f003 f85e 	bl	80143e8 <mc_cubic_b_spline>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 801132c:	9c05      	ldr	r4, [sp, #20]
                break;
 801132e:	e0a3      	b.n	8011478 <gc_execute_block+0x3a40>
                        .x = gc_state.position[X_AXIS] + (gc_block.values.ijk[X_AXIS] * 2.0f) / 3.0f,
 8011330:	4a23      	ldr	r2, [pc, #140]	@ (80113c0 <gc_execute_block+0x3988>)
 8011332:	ed92 7a1a 	vldr	s14, [r2, #104]	@ 0x68
 8011336:	4823      	ldr	r0, [pc, #140]	@ (80113c4 <gc_execute_block+0x398c>)
 8011338:	ed90 5a12 	vldr	s10, [r0, #72]	@ 0x48
 801133c:	ee35 6a05 	vadd.f32	s12, s10, s10
 8011340:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8011344:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8011348:	ee77 7a27 	vadd.f32	s15, s14, s15
                    point_2d_t cp1 = {
 801134c:	edcd 7a0f 	vstr	s15, [sp, #60]	@ 0x3c
                        .y = gc_state.position[Y_AXIS] + (gc_block.values.ijk[Y_AXIS] * 2.0f) / 3.0f
 8011350:	edd2 7a1b 	vldr	s15, [r2, #108]	@ 0x6c
 8011354:	edd0 5a13 	vldr	s11, [r0, #76]	@ 0x4c
 8011358:	ee75 4aa5 	vadd.f32	s9, s11, s11
 801135c:	ee84 6aa6 	vdiv.f32	s12, s9, s13
 8011360:	ee37 6a86 	vadd.f32	s12, s15, s12
                    point_2d_t cp1 = {
 8011364:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
                        .x = gc_block.values.xyz[X_AXIS] + ((gc_state.position[X_AXIS] + gc_block.values.ijk[X_AXIS] - gc_block.values.xyz[X_AXIS]) * 2.0f) / 3.0f,
 8011368:	ed90 6a21 	vldr	s12, [r0, #132]	@ 0x84
 801136c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8011370:	ee37 7a46 	vsub.f32	s14, s14, s12
 8011374:	ee37 7a07 	vadd.f32	s14, s14, s14
 8011378:	ee87 5a26 	vdiv.f32	s10, s14, s13
 801137c:	ee36 6a05 	vadd.f32	s12, s12, s10
                    point_2d_t cp2 = {
 8011380:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
                        .y = gc_block.values.xyz[Y_AXIS] + ((gc_state.position[Y_AXIS] + gc_block.values.ijk[Y_AXIS] - gc_block.values.xyz[Y_AXIS]) * 2.0f) / 3.0f
 8011384:	ed90 7a22 	vldr	s14, [r0, #136]	@ 0x88
 8011388:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801138c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011390:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011394:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8011398:	ee37 7a06 	vadd.f32	s14, s14, s12
                    point_2d_t cp2 = {
 801139c:	ed8d 7a12 	vstr	s14, [sp, #72]	@ 0x48
                    mc_cubic_b_spline(gc_block.values.xyz, &plan_data, gc_state.position, cp1.values, cp2.values);
 80113a0:	ab11      	add	r3, sp, #68	@ 0x44
 80113a2:	9300      	str	r3, [sp, #0]
 80113a4:	ab0f      	add	r3, sp, #60	@ 0x3c
 80113a6:	3268      	adds	r2, #104	@ 0x68
 80113a8:	a914      	add	r1, sp, #80	@ 0x50
 80113aa:	3084      	adds	r0, #132	@ 0x84
 80113ac:	f003 f81c 	bl	80143e8 <mc_cubic_b_spline>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 80113b0:	9c05      	ldr	r4, [sp, #20]
                break;
 80113b2:	e061      	b.n	8011478 <gc_execute_block+0x3a40>
 80113b4:	200015e0 	.word	0x200015e0
 80113b8:	200022f4 	.word	0x200022f4
 80113bc:	20001590 	.word	0x20001590
 80113c0:	20001614 	.word	0x20001614
 80113c4:	2000150c 	.word	0x2000150c
 80113c8:	20001554 	.word	0x20001554
 80113cc:	2000167c 	.word	0x2000167c
                    protocol_buffer_synchronize(); // Wait until any previous moves are finished.
 80113d0:	f006 fe00 	bl	8017fd4 <protocol_buffer_synchronize>
                    gc_override_flags_t overrides = sys.override.control; // Save current override disable status.
 80113d4:	4bc5      	ldr	r3, [pc, #788]	@ (80116ec <gc_execute_block+0x3cb4>)
 80113d6:	f893 6029 	ldrb.w	r6, [r3, #41]	@ 0x29
                    status_code_t status = init_sync_motion(&plan_data, gc_block.values.k);
 80113da:	4bc5      	ldr	r3, [pc, #788]	@ (80116f0 <gc_execute_block+0x3cb8>)
 80113dc:	ed93 0a15 	vldr	s0, [r3, #84]	@ 0x54
 80113e0:	a814      	add	r0, sp, #80	@ 0x50
 80113e2:	f7fb ff7d 	bl	800d2e0 <init_sync_motion>
                    if(status != Status_OK)
 80113e6:	4604      	mov	r4, r0
 80113e8:	2800      	cmp	r0, #0
 80113ea:	f47c ac02 	bne.w	800dbf2 <gc_execute_block+0x1ba>
                    plan_data.spindle.state.synchronized = On;
 80113ee:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80113f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113f6:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
                    mc_line(gc_block.values.xyz, &plan_data);
 80113fa:	a914      	add	r1, sp, #80	@ 0x50
 80113fc:	48bd      	ldr	r0, [pc, #756]	@ (80116f4 <gc_execute_block+0x3cbc>)
 80113fe:	f002 fceb 	bl	8013dd8 <mc_line>
                    protocol_buffer_synchronize();    // Wait until synchronized move is finished,
 8011402:	f006 fde7 	bl	8017fd4 <protocol_buffer_synchronize>
                    sys.override.control = overrides; // then restore previous override disable status.
 8011406:	4bb9      	ldr	r3, [pc, #740]	@ (80116ec <gc_execute_block+0x3cb4>)
 8011408:	f883 6029 	strb.w	r6, [r3, #41]	@ 0x29
                break;
 801140c:	e034      	b.n	8011478 <gc_execute_block+0x3a40>
                    protocol_buffer_synchronize(); // Wait until any previous moves are finished.
 801140e:	f006 fde1 	bl	8017fd4 <protocol_buffer_synchronize>
                    gc_override_flags_t overrides = sys.override.control; // Save current override disable status.
 8011412:	4bb6      	ldr	r3, [pc, #728]	@ (80116ec <gc_execute_block+0x3cb4>)
 8011414:	f893 6029 	ldrb.w	r6, [r3, #41]	@ 0x29
                    status_code_t status = init_sync_motion(&plan_data, thread.pitch);
 8011418:	4bb7      	ldr	r3, [pc, #732]	@ (80116f8 <gc_execute_block+0x3cc0>)
 801141a:	ed93 0a00 	vldr	s0, [r3]
 801141e:	a814      	add	r0, sp, #80	@ 0x50
 8011420:	f7fb ff5e 	bl	800d2e0 <init_sync_motion>
                    if(status != Status_OK)
 8011424:	4604      	mov	r4, r0
 8011426:	2800      	cmp	r0, #0
 8011428:	f47c abe3 	bne.w	800dbf2 <gc_execute_block+0x1ba>
                    mc_thread(&plan_data, gc_state.position, &thread, overrides.feed_hold_disable);
 801142c:	f3c6 0340 	ubfx	r3, r6, #1, #1
 8011430:	4ab1      	ldr	r2, [pc, #708]	@ (80116f8 <gc_execute_block+0x3cc0>)
 8011432:	49b2      	ldr	r1, [pc, #712]	@ (80116fc <gc_execute_block+0x3cc4>)
 8011434:	a814      	add	r0, sp, #80	@ 0x50
 8011436:	f003 f8ef 	bl	8014618 <mc_thread>
                    sys.override.control = overrides; // then restore previous override disable status.
 801143a:	4bac      	ldr	r3, [pc, #688]	@ (80116ec <gc_execute_block+0x3cb4>)
 801143c:	f883 6029 	strb.w	r6, [r3, #41]	@ 0x29
                break;
 8011440:	e01a      	b.n	8011478 <gc_execute_block+0x3a40>
                plan_data.spindle.rpm = gc_block.values.s;
 8011442:	49ab      	ldr	r1, [pc, #684]	@ (80116f0 <gc_execute_block+0x3cb8>)
 8011444:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 8011446:	9315      	str	r3, [sp, #84]	@ 0x54
                gc_state.canned.retract_mode = gc_state.modal.retract_mode;
 8011448:	4bad      	ldr	r3, [pc, #692]	@ (8011700 <gc_execute_block+0x3cc8>)
 801144a:	7f5a      	ldrb	r2, [r3, #29]
 801144c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
                mc_canned_drill(gc_state.modal.motion, gc_block.values.xyz, &plan_data, gc_state.position, plane, gc_block.values.l, &gc_state.canned);
 8011450:	f891 20b4 	ldrb.w	r2, [r1, #180]	@ 0xb4
 8011454:	f103 0434 	add.w	r4, r3, #52	@ 0x34
 8011458:	9402      	str	r4, [sp, #8]
 801145a:	9201      	str	r2, [sp, #4]
 801145c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801145e:	f8ad 2000 	strh.w	r2, [sp]
 8011462:	0c12      	lsrs	r2, r2, #16
 8011464:	f88d 2002 	strb.w	r2, [sp, #2]
 8011468:	3368      	adds	r3, #104	@ 0x68
 801146a:	aa14      	add	r2, sp, #80	@ 0x50
 801146c:	3184      	adds	r1, #132	@ 0x84
 801146e:	f003 fac1 	bl	80149f4 <mc_canned_drill>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 8011472:	9c05      	ldr	r4, [sp, #20]
                break;
 8011474:	e000      	b.n	8011478 <gc_execute_block+0x3a40>
        switch(gc_state.modal.motion) {
 8011476:	9c05      	ldr	r4, [sp, #20]
        if(sys.cancel)
 8011478:	4b9c      	ldr	r3, [pc, #624]	@ (80116ec <gc_execute_block+0x3cb4>)
 801147a:	785b      	ldrb	r3, [r3, #1]
 801147c:	b93b      	cbnz	r3, 801148e <gc_execute_block+0x3a56>
 801147e:	46a2      	mov	sl, r4
 8011480:	e005      	b.n	801148e <gc_execute_block+0x3a56>
        switch(gc_state.modal.motion) {
 8011482:	9c05      	ldr	r4, [sp, #20]
 8011484:	e7f8      	b.n	8011478 <gc_execute_block+0x3a40>
            output_command_t *next = plan_data.output_commands->next;
 8011486:	6884      	ldr	r4, [r0, #8]
            free(plan_data.output_commands);
 8011488:	f011 fc8e 	bl	8022da8 <free>
            plan_data.output_commands = next;
 801148c:	941d      	str	r4, [sp, #116]	@ 0x74
        while(plan_data.output_commands) {
 801148e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8011490:	2800      	cmp	r0, #0
 8011492:	d1f8      	bne.n	8011486 <gc_execute_block+0x3a4e>
        if (gc_update_pos == GCUpdatePos_Target)
 8011494:	f1ba 0f00 	cmp.w	sl, #0
 8011498:	d105      	bne.n	80114a6 <gc_execute_block+0x3a6e>
            memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_state.position)); // gc_state.position[] = gc_block.values.xyz[]
 801149a:	4b98      	ldr	r3, [pc, #608]	@ (80116fc <gc_execute_block+0x3cc4>)
 801149c:	4a95      	ldr	r2, [pc, #596]	@ (80116f4 <gc_execute_block+0x3cbc>)
 801149e:	ca07      	ldmia	r2, {r0, r1, r2}
 80114a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80114a4:	e520      	b.n	8010ee8 <gc_execute_block+0x34b0>
        else if (gc_update_pos == GCUpdatePos_System)
 80114a6:	f1ba 0f01 	cmp.w	sl, #1
 80114aa:	f47f ad1d 	bne.w	8010ee8 <gc_execute_block+0x34b0>
            gc_sync_position(); // gc_state.position[] = sys.position
 80114ae:	4995      	ldr	r1, [pc, #596]	@ (8011704 <gc_execute_block+0x3ccc>)
 80114b0:	4892      	ldr	r0, [pc, #584]	@ (80116fc <gc_execute_block+0x3cc4>)
 80114b2:	f010 fd61 	bl	8021f78 <system_convert_array_steps_to_mpos>
 80114b6:	e517      	b.n	8010ee8 <gc_execute_block+0x34b0>
            if(grbl.on_macro_return)
 80114b8:	4b93      	ldr	r3, [pc, #588]	@ (8011708 <gc_execute_block+0x3cd0>)
 80114ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80114be:	b17b      	cbz	r3, 80114e0 <gc_execute_block+0x3aa8>
                grbl.on_macro_return();
 80114c0:	4798      	blx	r3
 80114c2:	e00d      	b.n	80114e0 <gc_execute_block+0x3aa8>
            if(!check_mode) {
 80114c4:	2d02      	cmp	r5, #2
 80114c6:	d00b      	beq.n	80114e0 <gc_execute_block+0x3aa8>
                if(gc_block.modal.program_flow == ProgramFlow_CompletedM60 && hal.pallet_shuttle)
 80114c8:	4b89      	ldr	r3, [pc, #548]	@ (80116f0 <gc_execute_block+0x3cb8>)
 80114ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80114ce:	2b3c      	cmp	r3, #60	@ 0x3c
 80114d0:	d00c      	beq.n	80114ec <gc_execute_block+0x3ab4>
                system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 80114d2:	4b8e      	ldr	r3, [pc, #568]	@ (801170c <gc_execute_block+0x3cd4>)
 80114d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80114d6:	2108      	movs	r1, #8
 80114d8:	488d      	ldr	r0, [pc, #564]	@ (8011710 <gc_execute_block+0x3cd8>)
 80114da:	4798      	blx	r3
                protocol_execute_realtime(); // Execute suspend.
 80114dc:	f006 faac 	bl	8017a38 <protocol_execute_realtime>
        gc_state.modal.program_flow = ProgramFlow_Running; // Reset program flow.
 80114e0:	4b87      	ldr	r3, [pc, #540]	@ (8011700 <gc_execute_block+0x3cc8>)
 80114e2:	2200      	movs	r2, #0
 80114e4:	761a      	strb	r2, [r3, #24]
    return Status_OK;
 80114e6:	9c05      	ldr	r4, [sp, #20]
 80114e8:	f7fc bb83 	b.w	800dbf2 <gc_execute_block+0x1ba>
                if(gc_block.modal.program_flow == ProgramFlow_CompletedM60 && hal.pallet_shuttle)
 80114ec:	4b87      	ldr	r3, [pc, #540]	@ (801170c <gc_execute_block+0x3cd4>)
 80114ee:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d0ed      	beq.n	80114d2 <gc_execute_block+0x3a9a>
                    hal.pallet_shuttle();
 80114f6:	4798      	blx	r3
 80114f8:	e7eb      	b.n	80114d2 <gc_execute_block+0x3a9a>
            if(!check_mode && gc_block.modal.program_flow == ProgramFlow_CompletedM30 && hal.pallet_shuttle)
 80114fa:	4b84      	ldr	r3, [pc, #528]	@ (801170c <gc_execute_block+0x3cd4>)
 80114fc:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8011500:	2b00      	cmp	r3, #0
 8011502:	f43f ad1f 	beq.w	8010f44 <gc_execute_block+0x350c>
                hal.pallet_shuttle();
 8011506:	4798      	blx	r3
 8011508:	e51c      	b.n	8010f44 <gc_execute_block+0x350c>
                gc_state.modal.coord_system.id = CoordinateSystem_G54;
 801150a:	4b7d      	ldr	r3, [pc, #500]	@ (8011700 <gc_execute_block+0x3cc8>)
 801150c:	751a      	strb	r2, [r3, #20]
                system_add_rt_report(Report_GWCO);
 801150e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8011512:	f010 fdd5 	bl	80220c0 <system_add_rt_report>
 8011516:	e526      	b.n	8010f66 <gc_execute_block+0x352e>
                if (!(settings_read_coord_data(gc_state.modal.coord_system.id, &gc_state.modal.coord_system.xyz)))
 8011518:	497e      	ldr	r1, [pc, #504]	@ (8011714 <gc_execute_block+0x3cdc>)
 801151a:	7b08      	ldrb	r0, [r1, #12]
 801151c:	f00c f99a 	bl	801d854 <settings_read_coord_data>
 8011520:	b1d0      	cbz	r0, 8011558 <gc_execute_block+0x3b20>
                if(settings_read_coord_data(CoordinateSystem_G92, &g92_offset_stored) && !isequal_position_vector(g92_offset_stored, gc_state.g92_coord_offset))
 8011522:	a911      	add	r1, sp, #68	@ 0x44
 8011524:	200b      	movs	r0, #11
 8011526:	f00c f995 	bl	801d854 <settings_read_coord_data>
 801152a:	b128      	cbz	r0, 8011538 <gc_execute_block+0x3b00>
 801152c:	220c      	movs	r2, #12
 801152e:	497a      	ldr	r1, [pc, #488]	@ (8011718 <gc_execute_block+0x3ce0>)
 8011530:	a811      	add	r0, sp, #68	@ 0x44
 8011532:	f013 fcce 	bl	8024ed2 <memcmp>
 8011536:	b990      	cbnz	r0, 801155e <gc_execute_block+0x3b26>
                system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 8011538:	f010 fe4e 	bl	80221d8 <system_flag_wco_change>
                spindle_all_off();
 801153c:	f00d fb60 	bl	801ec00 <spindle_all_off>
                hal.coolant.set_state(gc_state.modal.coolant);
 8011540:	4b72      	ldr	r3, [pc, #456]	@ (801170c <gc_execute_block+0x3cd4>)
 8011542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011544:	4a6e      	ldr	r2, [pc, #440]	@ (8011700 <gc_execute_block+0x3cc8>)
 8011546:	7e50      	ldrb	r0, [r2, #25]
 8011548:	4798      	blx	r3
                system_add_rt_report(Report_Spindle); // Set to report change
 801154a:	2010      	movs	r0, #16
 801154c:	f010 fdb8 	bl	80220c0 <system_add_rt_report>
                system_add_rt_report(Report_Coolant); // immediately.
 8011550:	2020      	movs	r0, #32
 8011552:	f010 fdb5 	bl	80220c0 <system_add_rt_report>
 8011556:	e546      	b.n	8010fe6 <gc_execute_block+0x35ae>
                    FAIL(Status_SettingReadFail);
 8011558:	2407      	movs	r4, #7
 801155a:	f7fc bb4a 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    settings_write_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Save G92 offsets to non-volatile storage
 801155e:	496e      	ldr	r1, [pc, #440]	@ (8011718 <gc_execute_block+0x3ce0>)
 8011560:	200b      	movs	r0, #11
 8011562:	f00c f953 	bl	801d80c <settings_write_coord_data>
 8011566:	e7e7      	b.n	8011538 <gc_execute_block+0x3b00>
                output_command_t *next = output_commands->next;
 8011568:	6884      	ldr	r4, [r0, #8]
                free(output_commands);
 801156a:	f011 fc1d 	bl	8022da8 <free>
                output_commands = next;
 801156e:	4b6b      	ldr	r3, [pc, #428]	@ (801171c <gc_execute_block+0x3ce4>)
 8011570:	601c      	str	r4, [r3, #0]
            while(output_commands) {
 8011572:	4b6a      	ldr	r3, [pc, #424]	@ (801171c <gc_execute_block+0x3ce4>)
 8011574:	6818      	ldr	r0, [r3, #0]
 8011576:	2800      	cmp	r0, #0
 8011578:	d1f6      	bne.n	8011568 <gc_execute_block+0x3b30>
            ngc_modal_state_invalidate();
 801157a:	f004 f8cb 	bl	8015714 <ngc_modal_state_invalidate>
            grbl.report.feedback_message(Message_ProgramEnd);
 801157e:	4b62      	ldr	r3, [pc, #392]	@ (8011708 <gc_execute_block+0x3cd0>)
 8011580:	68db      	ldr	r3, [r3, #12]
 8011582:	2008      	movs	r0, #8
 8011584:	4798      	blx	r3
 8011586:	e7ab      	b.n	80114e0 <gc_execute_block+0x3aa8>
            FAIL(Status_ExpectedCommandLetter); // [Expected word letter]
 8011588:	2401      	movs	r4, #1
 801158a:	f7fc bb32 	b.w	800dbf2 <gc_execute_block+0x1ba>
                FAIL(Status_BadNumberFormat);   // [Expected word value]
 801158e:	2402      	movs	r4, #2
 8011590:	f7fc bb2f 	b.w	800dbf2 <gc_execute_block+0x1ba>
 8011594:	2414      	movs	r4, #20
 8011596:	f7fc bb2c 	b.w	800dbf2 <gc_execute_block+0x1ba>
 801159a:	2414      	movs	r4, #20
 801159c:	f7fc bb29 	b.w	800dbf2 <gc_execute_block+0x1ba>
 80115a0:	2414      	movs	r4, #20
 80115a2:	f7fc bb26 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [G7 & G8 not supported]
 80115a6:	2414      	movs	r4, #20
 80115a8:	f7fc bb23 	b.w	800dbf2 <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 80115ac:	2418      	movs	r4, #24
 80115ae:	f7fc bb20 	b.w	800dbf2 <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeUnsupportedCommand);
 80115b2:	2414      	movs	r4, #20
 80115b4:	f7fc bb1d 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        } else if (int_value == 92) {
 80115b8:	2414      	movs	r4, #20
 80115ba:	f7fc bb1a 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [G33.1 not yet supported]
 80115be:	2414      	movs	r4, #20
 80115c0:	f7fc bb17 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 80115c4:	2418      	movs	r4, #24
 80115c6:	f7fc bb14 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [probing not supported by driver or unsupported G38.x command]
 80115ca:	2414      	movs	r4, #20
 80115cc:	f7fc bb11 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        if(!(hal.probe.get_state && ((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))))
 80115d0:	2414      	movs	r4, #20
 80115d2:	f7fc bb0e 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 80115d6:	2418      	movs	r4, #24
 80115d8:	f7fc bb0b 	b.w	800dbf2 <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeUnsupportedCommand);
 80115dc:	2414      	movs	r4, #20
 80115de:	f7fc bb08 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 80115e2:	2418      	movs	r4, #24
 80115e4:	f7fc bb05 	b.w	800dbf2 <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeUnsupportedCommand); // [G90.1 not supported]
 80115e8:	2414      	movs	r4, #20
 80115ea:	f7fc bb02 	b.w	800dbf2 <gc_execute_block+0x1ba>
 80115ee:	2414      	movs	r4, #20
 80115f0:	f7fc baff 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported G43.x command]
 80115f4:	2414      	movs	r4, #20
 80115f6:	f7fc bafc 	b.w	800dbf2 <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict] }
 80115fa:	2418      	movs	r4, #24
 80115fc:	f7fc baf9 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        if(int_value == 59 && mantissa > 0) {
 8011600:	2414      	movs	r4, #20
 8011602:	f7fc baf6 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand);
 8011606:	2414      	movs	r4, #20
 8011608:	f7fc baf3 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand);
 801160c:	2414      	movs	r4, #20
 801160e:	f7fc baf0 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeCommandValueNotInteger); // [Unsupported or invalid Gxx.x command]
 8011612:	2417      	movs	r4, #23
 8011614:	f7fc baed 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeModalGroupViolation);
 8011618:	2415      	movs	r4, #21
 801161a:	f7fc baea 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeWordRepeated); // [Word repeated]
 801161e:	2419      	movs	r4, #25
 8011620:	f7fc bae7 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeCommandValueNotInteger); // [No Mxx.x commands]
 8011624:	2417      	movs	r4, #23
 8011626:	f7fc bae4 	b.w	800dbf2 <gc_execute_block+0x1ba>
                                    FAIL(Status_GcodeUnsupportedCommand);
 801162a:	2414      	movs	r4, #20
 801162c:	f7fc bae1 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 8011630:	2414      	movs	r4, #20
 8011632:	f7fc bade 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 8011636:	2414      	movs	r4, #20
 8011638:	f7fc badb 	b.w	800dbf2 <gc_execute_block+0x1ba>
 801163c:	2414      	movs	r4, #20
 801163e:	f7fc bad8 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 8011642:	2414      	movs	r4, #20
 8011644:	f7fc bad5 	b.w	800dbf2 <gc_execute_block+0x1ba>
 8011648:	2414      	movs	r4, #20
 801164a:	f7fc bad2 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 801164e:	2414      	movs	r4, #20
 8011650:	f7fc bacf 	b.w	800dbf2 <gc_execute_block+0x1ba>
 8011654:	2414      	movs	r4, #20
 8011656:	f7fc bacc 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand);
 801165a:	2414      	movs	r4, #20
 801165c:	f7fc bac9 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeModalGroupViolation);
 8011660:	2415      	movs	r4, #21
 8011662:	f7fc bac6 	b.w	800dbf2 <gc_execute_block+0x1ba>
 8011666:	2414      	movs	r4, #20
 8011668:	f7fc bac3 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 801166c:	2417      	movs	r4, #23
 801166e:	f7fc bac0 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 8011672:	2417      	movs	r4, #23
 8011674:	f7fc babd 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 8011678:	2417      	movs	r4, #23
 801167a:	f7fc baba 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 801167e:	2417      	movs	r4, #23
 8011680:	f7fc bab7 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeIllegalToolTableEntry);
 8011684:	2426      	movs	r4, #38	@ 0x26
 8011686:	f7fc bab4 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 801168a:	2417      	movs	r4, #23
 801168c:	f7fc bab1 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeWordRepeated); // [Word repeated]
 8011690:	2419      	movs	r4, #25
 8011692:	f7fc baae 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_NegativeValue); // [Word value cannot be negative]
 8011696:	2404      	movs	r4, #4
 8011698:	f7fc baab 	b.w	800dbf2 <gc_execute_block+0x1ba>
        FAIL(Status_GcodeInvalidLineNumber); // [Exceeds max line number]
 801169c:	241b      	movs	r4, #27
 801169e:	f7fc baa8 	b.w	800dbf2 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeUndefinedFeedRate);
 80116a2:	2416      	movs	r4, #22
 80116a4:	f7fc baa5 	b.w	800dbf2 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeValueOutOfRange);
 80116a8:	2427      	movs	r4, #39	@ 0x27
 80116aa:	f7fc baa2 	b.w	800dbf2 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeUnsupportedCommand);
 80116ae:	2414      	movs	r4, #20
 80116b0:	f7fc ba9f 	b.w	800dbf2 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeValueWordMissing);
 80116b4:	241c      	movs	r4, #28
 80116b6:	f7fc ba9c 	b.w	800dbf2 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeValueWordMissing);
 80116ba:	241c      	movs	r4, #28
 80116bc:	f7fc ba99 	b.w	800dbf2 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeCommandValueNotInteger);
 80116c0:	2417      	movs	r4, #23
 80116c2:	f7fc ba96 	b.w	800dbf2 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeIllegalToolTableEntry);
 80116c6:	2426      	movs	r4, #38	@ 0x26
 80116c8:	f7fc ba93 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueWordMissing);
 80116cc:	241c      	movs	r4, #28
 80116ce:	f7fc ba90 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_NegativeValue);
 80116d2:	2404      	movs	r4, #4
 80116d4:	f7fc ba8d 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 80116d8:	2427      	movs	r4, #39	@ 0x27
 80116da:	f7fc ba8a 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueWordMissing);
 80116de:	241c      	movs	r4, #28
 80116e0:	f7fc ba87 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_ValueWordConflict);
 80116e4:	2430      	movs	r4, #48	@ 0x30
 80116e6:	f7fc ba84 	b.w	800dbf2 <gc_execute_block+0x1ba>
 80116ea:	bf00      	nop
 80116ec:	20001bbc 	.word	0x20001bbc
 80116f0:	2000150c 	.word	0x2000150c
 80116f4:	20001590 	.word	0x20001590
 80116f8:	200015e4 	.word	0x200015e4
 80116fc:	2000167c 	.word	0x2000167c
 8011700:	20001614 	.word	0x20001614
 8011704:	20001c44 	.word	0x20001c44
 8011708:	20001ac4 	.word	0x20001ac4
 801170c:	200018dc 	.word	0x200018dc
 8011710:	20001c04 	.word	0x20001c04
 8011714:	2000161c 	.word	0x2000161c
 8011718:	200016cc 	.word	0x200016cc
 801171c:	200015e0 	.word	0x200015e0
                    FAIL(Status_GcodeValueOutOfRange);
 8011720:	2427      	movs	r4, #39	@ 0x27
 8011722:	f7fc ba66 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 8011726:	2427      	movs	r4, #39	@ 0x27
 8011728:	f7fc ba63 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_NegativeValue);
 801172c:	2404      	movs	r4, #4
 801172e:	f7fc ba60 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange);
 8011732:	2427      	movs	r4, #39	@ 0x27
 8011734:	f7fc ba5d 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange);
 8011738:	2427      	movs	r4, #39	@ 0x27
 801173a:	f7fc ba5a 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange);
 801173e:	2427      	movs	r4, #39	@ 0x27
 8011740:	f7fc ba57 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueWordMissing);
 8011744:	241c      	movs	r4, #28
 8011746:	f7fc ba54 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeRPMOutOfRange);
 801174a:	242c      	movs	r4, #44	@ 0x2c
 801174c:	f7fc ba51 	b.w	800dbf2 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeUnsupportedCommand);
 8011750:	2414      	movs	r4, #20
 8011752:	f7fc ba4e 	b.w	800dbf2 <gc_execute_block+0x1ba>
                FAIL(Status_NegativeValue);
 8011756:	2404      	movs	r4, #4
 8011758:	f7fc ba4b 	b.w	800dbf2 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeValueWordMissing); // [P word missing]
 801175c:	241c      	movs	r4, #28
 801175e:	f7fc ba48 	b.w	800dbf2 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeNoAxisWords); // [No axis words]
 8011762:	241a      	movs	r4, #26
 8011764:	f7fc ba45 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnsupportedCommand);
 8011768:	2414      	movs	r4, #20
 801176a:	f7fc ba42 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeIllegalToolTableEntry);
 801176e:	2426      	movs	r4, #38	@ 0x26
 8011770:	f7fc ba3f 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnsupportedCommand);
 8011774:	2414      	movs	r4, #20
 8011776:	f7fc ba3c 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing);
 801177a:	241c      	movs	r4, #28
 801177c:	f7fc ba39 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeIllegalToolTableEntry);
 8011780:	2426      	movs	r4, #38	@ 0x26
 8011782:	f7fc ba36 	b.w	800dbf2 <gc_execute_block+0x1ba>
 8011786:	2426      	movs	r4, #38	@ 0x26
 8011788:	f7fc ba33 	b.w	800dbf2 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeNoAxisWords); // [No axis words (or R word for tool offsets)]
 801178c:	241a      	movs	r4, #26
 801178e:	f7fc ba30 	b.w	800dbf2 <gc_execute_block+0x1ba>
 8011792:	241a      	movs	r4, #26
 8011794:	f7fc ba2d 	b.w	800dbf2 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeValueWordMissing); // [P/L word missing]
 8011798:	241c      	movs	r4, #28
 801179a:	f7fc ba2a 	b.w	800dbf2 <gc_execute_block+0x1ba>
                FAIL(Status_NegativeValue);
 801179e:	2404      	movs	r4, #4
 80117a0:	f7fc ba27 	b.w	800dbf2 <gc_execute_block+0x1ba>
 80117a4:	2414      	movs	r4, #20
 80117a6:	f7fc ba24 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeUnsupportedCommand); // [G10 L2 R not supported]
 80117aa:	2414      	movs	r4, #20
 80117ac:	f7fc ba21 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeUnsupportedCoordSys); // [Greater than N sys]
 80117b0:	241d      	movs	r4, #29
 80117b2:	f7fc ba1e 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_SettingReadFail); // [non-volatile storage read fail]
 80117b6:	2407      	movs	r4, #7
 80117b8:	f7fc ba1b 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GCodeCoordSystemLocked);
 80117bc:	2438      	movs	r4, #56	@ 0x38
 80117be:	f7fc ba18 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeUnsupportedCommand);
 80117c2:	2414      	movs	r4, #20
 80117c4:	f7fc ba15 	b.w	800dbf2 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeNoAxisWords); // [No axis words]
 80117c8:	241a      	movs	r4, #26
 80117ca:	f7fc ba12 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_SettingReadFail);
 80117ce:	2407      	movs	r4, #7
 80117d0:	f7fc ba0f 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing); // [P word missing]
 80117d4:	241c      	movs	r4, #28
 80117d6:	f7fc ba0c 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange); // [P word out of range]
 80117da:	2427      	movs	r4, #39	@ 0x27
 80117dc:	f7fc ba09 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_FlowControlStackOverflow); // [Call level too deep]
 80117e0:	2452      	movs	r4, #82	@ 0x52
 80117e2:	f7fc ba06 	b.w	800dbf2 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeAxisWordsExist);
 80117e6:	241f      	movs	r4, #31
 80117e8:	f7fc ba03 	b.w	800dbf2 <gc_execute_block+0x1ba>
                 FAIL(Status_GcodeSpindleNotRunning);
 80117ec:	2429      	movs	r4, #41	@ 0x29
 80117ee:	f7fc ba00 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnsupportedCommand); // [G33, G33.1]
 80117f2:	2414      	movs	r4, #20
 80117f4:	f7fc b9fd 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange); // [No distance (pitch) given]
 80117f8:	2427      	movs	r4, #39	@ 0x27
 80117fa:	f7fc b9fa 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnsupportedCommand); // [G76 not supported]
 80117fe:	2414      	movs	r4, #20
 8011800:	f7fc b9f7 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeIllegalPlane); // [Plane not ZX]
 8011804:	242a      	movs	r4, #42	@ 0x2a
 8011806:	f7fc b9f4 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnusedWords); // [Only X and Z axis words allowed]
 801180a:	2424      	movs	r4, #36	@ 0x24
 801180c:	f7fc b9f1 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 8011810:	2427      	movs	r4, #39	@ 0x27
 8011812:	f7fc b9ee 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueWordMissing);
 8011816:	241c      	movs	r4, #28
 8011818:	f7fc b9eb 	b.w	800dbf2 <gc_execute_block+0x1ba>
 801181c:	241c      	movs	r4, #28
 801181e:	f7fc b9e8 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_NegativeValue);
 8011822:	2404      	movs	r4, #4
 8011824:	f7fc b9e5 	b.w	800dbf2 <gc_execute_block+0x1ba>
 8011828:	2404      	movs	r4, #4
 801182a:	f7fc b9e2 	b.w	800dbf2 <gc_execute_block+0x1ba>
 801182e:	2404      	movs	r4, #4
 8011830:	f7fc b9df 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 8011834:	2427      	movs	r4, #39	@ 0x27
 8011836:	f7fc b9dc 	b.w	800dbf2 <gc_execute_block+0x1ba>
 801183a:	2427      	movs	r4, #39	@ 0x27
 801183c:	f7fc b9d9 	b.w	800dbf2 <gc_execute_block+0x1ba>
 8011840:	2427      	movs	r4, #39	@ 0x27
 8011842:	f7fc b9d6 	b.w	800dbf2 <gc_execute_block+0x1ba>
 8011846:	2427      	movs	r4, #39	@ 0x27
 8011848:	f7fc b9d3 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeRPMOutOfRange);
 801184c:	242c      	movs	r4, #44	@ 0x2c
 801184e:	f7fc b9d0 	b.w	800dbf2 <gc_execute_block+0x1ba>
 8011852:	242c      	movs	r4, #44	@ 0x2c
 8011854:	f7fc b9cd 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 8011858:	2427      	movs	r4, #39	@ 0x27
 801185a:	f7fc b9ca 	b.w	800dbf2 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeUndefinedFeedRate); // [Feed rate undefined]
 801185e:	2416      	movs	r4, #22
 8011860:	f7fc b9c7 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_InvalidStatement);
 8011864:	2403      	movs	r4, #3
 8011866:	f7fc b9c4 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing);
 801186a:	241c      	movs	r4, #28
 801186c:	f7fc b9c1 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing);
 8011870:	241c      	movs	r4, #28
 8011872:	f7fc b9be 	b.w	800dbf2 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeInvalidRetractPosition);
 8011876:	2436      	movs	r4, #54	@ 0x36
 8011878:	f7fc b9bb 	b.w	800dbf2 <gc_execute_block+0x1ba>
                                FAIL(Status_NegativeValue);
 801187c:	2404      	movs	r4, #4
 801187e:	f7fc b9b8 	b.w	800dbf2 <gc_execute_block+0x1ba>
                                FAIL(Status_NegativeValue); // [Q <= 0]
 8011882:	2404      	movs	r4, #4
 8011884:	f7fc b9b5 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeNoAxisWords); // [No axis words]
 8011888:	241a      	movs	r4, #26
 801188a:	f7fc b9b2 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeNoAxisWordsInPlane); // [No axis words in plane]
 801188e:	2420      	movs	r4, #32
 8011890:	f7fc b9af 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger); // [P word is not an integer]
 8011894:	2417      	movs	r4, #23
 8011896:	f7fc b9ac 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeValueOutOfRange); // [P word is 0]
 801189a:	2427      	movs	r4, #39	@ 0x27
 801189c:	f7fc b9a9 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeInvalidTarget); // [Invalid target]
 80118a0:	2421      	movs	r4, #33	@ 0x21
 80118a2:	f7fc b9a6 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeArcRadiusError); // [Arc radius error] TODO: this will fail due to limited float precision...
 80118a6:	2422      	movs	r4, #34	@ 0x22
 80118a8:	f7fc b9a3 	b.w	800dbf2 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeNoOffsetsInPlane);// [No offsets in plane]
 80118ac:	2423      	movs	r4, #35	@ 0x23
 80118ae:	f7fc b9a0 	b.w	800dbf2 <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeInvalidTarget); // [Arc definition error] > 0.5mm
 80118b2:	2421      	movs	r4, #33	@ 0x21
 80118b4:	f7fc b99d 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeIllegalPlane); // [The active plane is not G17]
 80118b8:	242a      	movs	r4, #42	@ 0x2a
 80118ba:	f7fc b99a 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeAxisCommandConflict); // [An axis other than X or Y is specified]
 80118be:	2418      	movs	r4, #24
 80118c0:	f7fc b997 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing); // [P and Q are not both specified]
 80118c4:	241c      	movs	r4, #28
 80118c6:	f7fc b994 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing); // [I or J are unspecified in the first of a series of G5 commands]
 80118ca:	241c      	movs	r4, #28
 80118cc:	f7fc b991 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeIllegalPlane); // [The active plane is not G17]
 80118d0:	242a      	movs	r4, #42	@ 0x2a
 80118d2:	f7fc b98e 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeAxisCommandConflict); // [An axis other than X or Y is specified]
 80118d6:	2418      	movs	r4, #24
 80118d8:	f7fc b98b 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing); // [I or J are unspecified]
 80118dc:	241c      	movs	r4, #28
 80118de:	f7fc b988 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange); // [I or J are zero]
 80118e2:	2427      	movs	r4, #39	@ 0x27
 80118e4:	f7fc b985 	b.w	800dbf2 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeNoAxisWords); // [No axis words]
 80118e8:	241a      	movs	r4, #26
 80118ea:	f7fc b982 	b.w	800dbf2 <gc_execute_block+0x1ba>
        FAIL(Status_GcodeUnusedWords); // [Unused words]
 80118ee:	2424      	movs	r4, #36	@ 0x24
 80118f0:	f7fc b97f 	b.w	800dbf2 <gc_execute_block+0x1ba>
            FAIL(Status_InvalidJogCommand);
 80118f4:	2410      	movs	r4, #16
 80118f6:	f7fc b97c 	b.w	800dbf2 <gc_execute_block+0x1ba>
            FAIL(Status_InvalidJogCommand);
 80118fa:	2410      	movs	r4, #16
 80118fc:	f7fc b979 	b.w	800dbf2 <gc_execute_block+0x1ba>

08011900 <dummy_bool_handler>:
#endif

void dummy_bool_handler (bool arg)
{
    // NOOP
}
 8011900:	4770      	bx	lr

08011902 <dummy_irq_claim>:
}

static bool dummy_irq_claim (irq_type_t irq, uint_fast8_t id, irq_callback_ptr callback)
{
    return false;
}
 8011902:	2000      	movs	r0, #0
 8011904:	4770      	bx	lr
	...

08011908 <get_homing_status>:
        task_add_delayed(realtime_report_check, NULL, settings.report_interval);
}

// "Wire" homing signals to limit signals, used when max limit inputs not available.
ISR_CODE static home_signals_t ISR_FUNC(get_homing_status)(void)
{
 8011908:	b500      	push	{lr}
 801190a:	b085      	sub	sp, #20
    home_signals_t home;
    limit_signals_t limits = hal.limits.get_state();
 801190c:	4b0d      	ldr	r3, [pc, #52]	@ (8011944 <get_homing_status+0x3c>)
 801190e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011910:	4798      	blx	r3
 8011912:	9001      	str	r0, [sp, #4]

    home.a.value = limits.min.value;
 8011914:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011918:	f88d 3008 	strb.w	r3, [sp, #8]
    home.b.value = limits.min2.value;
 801191c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011920:	f88d 3009 	strb.w	r3, [sp, #9]

    return home;
 8011924:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011928:	f8ad 300c 	strh.w	r3, [sp, #12]
 801192c:	2000      	movs	r0, #0
 801192e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011932:	f363 0007 	bfi	r0, r3, #0, #8
 8011936:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801193a:	f363 200f 	bfi	r0, r3, #8, #8
}
 801193e:	b005      	add	sp, #20
 8011940:	f85d fb04 	ldr.w	pc, [sp], #4
 8011944:	200018dc 	.word	0x200018dc

08011948 <task_alloc>:
static inline core_task_t *task_alloc (void)
{
    core_task_t *task = NULL;
    uint_fast8_t idx = CORE_TASK_POOL_SIZE;

    if(last_freed) {
 8011948:	4b09      	ldr	r3, [pc, #36]	@ (8011970 <task_alloc+0x28>)
 801194a:	6818      	ldr	r0, [r3, #0]
 801194c:	b110      	cbz	r0, 8011954 <task_alloc+0xc>
        task = last_freed;
        last_freed = NULL;
 801194e:	2200      	movs	r2, #0
 8011950:	601a      	str	r2, [r3, #0]
 8011952:	4770      	bx	lr
    uint_fast8_t idx = CORE_TASK_POOL_SIZE;
 8011954:	231e      	movs	r3, #30
    } else do {
        if(task_pool[--idx].fn == NULL)
 8011956:	3b01      	subs	r3, #1
 8011958:	4a06      	ldr	r2, [pc, #24]	@ (8011974 <task_alloc+0x2c>)
 801195a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 801195e:	6852      	ldr	r2, [r2, #4]
 8011960:	b112      	cbz	r2, 8011968 <task_alloc+0x20>
            task = &task_pool[idx];
    } while(task == NULL && idx);
 8011962:	2b00      	cmp	r3, #0
 8011964:	d1f7      	bne.n	8011956 <task_alloc+0xe>

    return task;
}
 8011966:	4770      	bx	lr
            task = &task_pool[idx];
 8011968:	4802      	ldr	r0, [pc, #8]	@ (8011974 <task_alloc+0x2c>)
 801196a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    } while(task == NULL && idx);
 801196e:	4770      	bx	lr
 8011970:	200016ec 	.word	0x200016ec
 8011974:	200016fc 	.word	0x200016fc

08011978 <task_execute>:
    if(last_freed == NULL)
        last_freed = task;
}

static void task_execute (sys_state_t state)
{
 8011978:	b538      	push	{r3, r4, r5, lr}
    static uint32_t last_ms = 0;

    core_task_t *task;

    if(immediate_task && sys.driver_started) {
 801197a:	4b27      	ldr	r3, [pc, #156]	@ (8011a18 <task_execute+0xa0>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	b1db      	cbz	r3, 80119b8 <task_execute+0x40>
 8011980:	4b26      	ldr	r3, [pc, #152]	@ (8011a1c <task_execute+0xa4>)
 8011982:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8011986:	b1bb      	cbz	r3, 80119b8 <task_execute+0x40>

        hal.irq_disable();
 8011988:	4d25      	ldr	r5, [pc, #148]	@ (8011a20 <task_execute+0xa8>)
 801198a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801198c:	4798      	blx	r3
        task = immediate_task;
 801198e:	4b22      	ldr	r3, [pc, #136]	@ (8011a18 <task_execute+0xa0>)
 8011990:	681c      	ldr	r4, [r3, #0]
        immediate_task = NULL;
 8011992:	2200      	movs	r2, #0
 8011994:	601a      	str	r2, [r3, #0]
        hal.irq_enable();
 8011996:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8011998:	4798      	blx	r3
 801199a:	e002      	b.n	80119a2 <task_execute+0x2a>

        do {
            void *data = task->data;
            foreground_task_ptr fn = task->fn;
            task_free(task);
            fn(data);
 801199c:	4798      	blx	r3
        } while((task = task->next));
 801199e:	68e4      	ldr	r4, [r4, #12]
 80119a0:	b154      	cbz	r4, 80119b8 <task_execute+0x40>
            void *data = task->data;
 80119a2:	68a0      	ldr	r0, [r4, #8]
            foreground_task_ptr fn = task->fn;
 80119a4:	6863      	ldr	r3, [r4, #4]
    task->fn = NULL;
 80119a6:	2200      	movs	r2, #0
 80119a8:	6062      	str	r2, [r4, #4]
    if(last_freed == NULL)
 80119aa:	4a1e      	ldr	r2, [pc, #120]	@ (8011a24 <task_execute+0xac>)
 80119ac:	6812      	ldr	r2, [r2, #0]
 80119ae:	2a00      	cmp	r2, #0
 80119b0:	d1f4      	bne.n	801199c <task_execute+0x24>
        last_freed = task;
 80119b2:	4a1c      	ldr	r2, [pc, #112]	@ (8011a24 <task_execute+0xac>)
 80119b4:	6014      	str	r4, [r2, #0]
 80119b6:	e7f1      	b.n	801199c <task_execute+0x24>
    }

    uint32_t now = hal.get_elapsed_ticks();
 80119b8:	4b19      	ldr	r3, [pc, #100]	@ (8011a20 <task_execute+0xa8>)
 80119ba:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 80119be:	4798      	blx	r3
 80119c0:	4605      	mov	r5, r0
    if(now == last_ms || next_task == systick_task)
 80119c2:	4b19      	ldr	r3, [pc, #100]	@ (8011a28 <task_execute+0xb0>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	4283      	cmp	r3, r0
 80119c8:	d025      	beq.n	8011a16 <task_execute+0x9e>
 80119ca:	4b18      	ldr	r3, [pc, #96]	@ (8011a2c <task_execute+0xb4>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	4a18      	ldr	r2, [pc, #96]	@ (8011a30 <task_execute+0xb8>)
 80119d0:	6814      	ldr	r4, [r2, #0]
 80119d2:	42a3      	cmp	r3, r4
 80119d4:	d01f      	beq.n	8011a16 <task_execute+0x9e>
        return;

    last_ms = now;
 80119d6:	4b14      	ldr	r3, [pc, #80]	@ (8011a28 <task_execute+0xb0>)
 80119d8:	6018      	str	r0, [r3, #0]

    if((task = systick_task)) do {
 80119da:	b154      	cbz	r4, 80119f2 <task_execute+0x7a>
        task->fn(task->data);
 80119dc:	6863      	ldr	r3, [r4, #4]
 80119de:	68a0      	ldr	r0, [r4, #8]
 80119e0:	4798      	blx	r3
    } while((task = task->next));
 80119e2:	68e4      	ldr	r4, [r4, #12]
 80119e4:	2c00      	cmp	r4, #0
 80119e6:	d1f9      	bne.n	80119dc <task_execute+0x64>
 80119e8:	e003      	b.n	80119f2 <task_execute+0x7a>
    while(next_task && (int32_t)(next_task->time - now) <= 0) {

        void *data = next_task->data;
        foreground_task_ptr fn = next_task->fn;
        task_free(next_task);
        next_task = next_task->next;
 80119ea:	68d9      	ldr	r1, [r3, #12]
 80119ec:	4b0f      	ldr	r3, [pc, #60]	@ (8011a2c <task_execute+0xb4>)
 80119ee:	6019      	str	r1, [r3, #0]

        fn(data);
 80119f0:	4790      	blx	r2
    while(next_task && (int32_t)(next_task->time - now) <= 0) {
 80119f2:	4b0e      	ldr	r3, [pc, #56]	@ (8011a2c <task_execute+0xb4>)
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	b173      	cbz	r3, 8011a16 <task_execute+0x9e>
 80119f8:	681a      	ldr	r2, [r3, #0]
 80119fa:	1b52      	subs	r2, r2, r5
 80119fc:	2a00      	cmp	r2, #0
 80119fe:	dc0a      	bgt.n	8011a16 <task_execute+0x9e>
        void *data = next_task->data;
 8011a00:	6898      	ldr	r0, [r3, #8]
        foreground_task_ptr fn = next_task->fn;
 8011a02:	685a      	ldr	r2, [r3, #4]
    task->fn = NULL;
 8011a04:	2100      	movs	r1, #0
 8011a06:	6059      	str	r1, [r3, #4]
    if(last_freed == NULL)
 8011a08:	4906      	ldr	r1, [pc, #24]	@ (8011a24 <task_execute+0xac>)
 8011a0a:	6809      	ldr	r1, [r1, #0]
 8011a0c:	2900      	cmp	r1, #0
 8011a0e:	d1ec      	bne.n	80119ea <task_execute+0x72>
        last_freed = task;
 8011a10:	4904      	ldr	r1, [pc, #16]	@ (8011a24 <task_execute+0xac>)
 8011a12:	600b      	str	r3, [r1, #0]
 8011a14:	e7e9      	b.n	80119ea <task_execute+0x72>
    }
}
 8011a16:	bd38      	pop	{r3, r4, r5, pc}
 8011a18:	200016f4 	.word	0x200016f4
 8011a1c:	20001bbc 	.word	0x20001bbc
 8011a20:	200018dc 	.word	0x200018dc
 8011a24:	200016ec 	.word	0x200016ec
 8011a28:	200016e8 	.word	0x200016e8
 8011a2c:	200016f8 	.word	0x200016f8
 8011a30:	200016f0 	.word	0x200016f0

08011a34 <reset_handler>:
{
 8011a34:	b508      	push	{r3, lr}
    report_init_fns();
 8011a36:	f00a fbb3 	bl	801c1a0 <report_init_fns>
    grbl.on_macro_return = NULL;
 8011a3a:	4b02      	ldr	r3, [pc, #8]	@ (8011a44 <reset_handler+0x10>)
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
}
 8011a42:	bd08      	pop	{r3, pc}
 8011a44:	20001ac4 	.word	0x20001ac4

08011a48 <get_homing_status2>:
{
 8011a48:	b500      	push	{lr}
 8011a4a:	b085      	sub	sp, #20
    limit_signals_t source = xbar_get_homing_source(), limits = hal.limits.get_state();
 8011a4c:	f7fb fbc4 	bl	800d1d8 <xbar_get_homing_source>
 8011a50:	9001      	str	r0, [sp, #4]
 8011a52:	4b17      	ldr	r3, [pc, #92]	@ (8011ab0 <get_homing_status2+0x68>)
 8011a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a56:	4798      	blx	r3
 8011a58:	9000      	str	r0, [sp, #0]
    home.a.value = (limits.min.value & source.min.mask) | (limits.max.value & source.max.mask);
 8011a5a:	f89d 3000 	ldrb.w	r3, [sp]
 8011a5e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8011a62:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011a66:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011a6a:	4003      	ands	r3, r0
 8011a6c:	400a      	ands	r2, r1
 8011a6e:	4313      	orrs	r3, r2
 8011a70:	f88d 3008 	strb.w	r3, [sp, #8]
    home.b.value = (limits.min2.value & source.min2.mask) | (limits.max2.value & source.max2.mask);
 8011a74:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011a78:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8011a7c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011a80:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011a84:	4003      	ands	r3, r0
 8011a86:	400a      	ands	r2, r1
 8011a88:	4313      	orrs	r3, r2
 8011a8a:	f88d 3009 	strb.w	r3, [sp, #9]
    return home;
 8011a8e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011a92:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011a96:	2000      	movs	r0, #0
 8011a98:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011a9c:	f363 0007 	bfi	r0, r3, #0, #8
 8011aa0:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8011aa4:	f363 200f 	bfi	r0, r3, #8, #8
}
 8011aa8:	b005      	add	sp, #20
 8011aaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8011aae:	bf00      	nop
 8011ab0:	200018dc 	.word	0x200018dc

08011ab4 <report_driver_error>:
{
 8011ab4:	b510      	push	{r4, lr}
 8011ab6:	b08a      	sub	sp, #40	@ 0x28
    driver.ok = ~driver.ok;
 8011ab8:	4b13      	ldr	r3, [pc, #76]	@ (8011b08 <report_driver_error+0x54>)
 8011aba:	f893 e000 	ldrb.w	lr, [r3]
 8011abe:	ea6f 0e0e 	mvn.w	lr, lr
 8011ac2:	fa5f fe8e 	uxtb.w	lr, lr
 8011ac6:	f883 e000 	strb.w	lr, [r3]
    strcpy(msg, "Fatal: Incompatible driver (");
 8011aca:	46ec      	mov	ip, sp
 8011acc:	4c0f      	ldr	r4, [pc, #60]	@ (8011b0c <report_driver_error+0x58>)
 8011ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011ad0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ad4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011ad8:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8011adc:	f88c 3000 	strb.w	r3, [ip]
    strcat(msg, uitoa(driver.ok));
 8011ae0:	4670      	mov	r0, lr
 8011ae2:	f004 f84d 	bl	8015b80 <uitoa>
 8011ae6:	4601      	mov	r1, r0
 8011ae8:	4668      	mov	r0, sp
 8011aea:	f013 fa24 	bl	8024f36 <strcat>
    strcat(msg, ")");
 8011aee:	4668      	mov	r0, sp
 8011af0:	f7f6 fb06 	bl	8008100 <strlen>
 8011af4:	4b06      	ldr	r3, [pc, #24]	@ (8011b10 <report_driver_error+0x5c>)
 8011af6:	881b      	ldrh	r3, [r3, #0]
 8011af8:	f82d 3000 	strh.w	r3, [sp, r0]
    report_message(msg, Message_Plain);
 8011afc:	2100      	movs	r1, #0
 8011afe:	4668      	mov	r0, sp
 8011b00:	f007 fefa 	bl	80198f8 <report_message>
}
 8011b04:	b00a      	add	sp, #40	@ 0x28
 8011b06:	bd10      	pop	{r4, pc}
 8011b08:	200001d8 	.word	0x200001d8
 8011b0c:	0802b698 	.word	0x0802b698
 8011b10:	0802b6b8 	.word	0x0802b6b8

08011b14 <task_add_delayed>:

ISR_CODE bool ISR_FUNC(task_add_delayed)(foreground_task_ptr fn, void *data, uint32_t delay_ms)
{
 8011b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b16:	4604      	mov	r4, r0
 8011b18:	460e      	mov	r6, r1
 8011b1a:	4617      	mov	r7, r2
    core_task_t *task = NULL;

    hal.irq_disable();
 8011b1c:	4b19      	ldr	r3, [pc, #100]	@ (8011b84 <task_add_delayed+0x70>)
 8011b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011b20:	4798      	blx	r3

    if(fn && (task = task_alloc())) {
 8011b22:	b334      	cbz	r4, 8011b72 <task_add_delayed+0x5e>
 8011b24:	f7ff ff10 	bl	8011948 <task_alloc>
 8011b28:	4605      	mov	r5, r0
 8011b2a:	b318      	cbz	r0, 8011b74 <task_add_delayed+0x60>

        task->time = hal.get_elapsed_ticks() + delay_ms;
 8011b2c:	4b15      	ldr	r3, [pc, #84]	@ (8011b84 <task_add_delayed+0x70>)
 8011b2e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8011b32:	4798      	blx	r3
 8011b34:	4438      	add	r0, r7
 8011b36:	6028      	str	r0, [r5, #0]
        task->fn = fn;
 8011b38:	606c      	str	r4, [r5, #4]
        task->data = data;
 8011b3a:	60ae      	str	r6, [r5, #8]
        task->next = NULL;
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	60eb      	str	r3, [r5, #12]

        if(next_task == NULL)
 8011b40:	4b11      	ldr	r3, [pc, #68]	@ (8011b88 <task_add_delayed+0x74>)
 8011b42:	681c      	ldr	r4, [r3, #0]
 8011b44:	b164      	cbz	r4, 8011b60 <task_add_delayed+0x4c>
            next_task = task;
        else if((int32_t)(task->time - next_task->time) < 0) {
 8011b46:	6823      	ldr	r3, [r4, #0]
 8011b48:	1ac3      	subs	r3, r0, r3
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	db0a      	blt.n	8011b64 <task_add_delayed+0x50>
            task->next = next_task;
            next_task = task;
        } else {
            core_task_t *t = next_task;
            while(t) {
 8011b4e:	b18c      	cbz	r4, 8011b74 <task_add_delayed+0x60>
                if(t->next == NULL || (int32_t)(task->time - t->next->time) < 0) {
 8011b50:	68e3      	ldr	r3, [r4, #12]
 8011b52:	b15b      	cbz	r3, 8011b6c <task_add_delayed+0x58>
 8011b54:	6819      	ldr	r1, [r3, #0]
 8011b56:	1a41      	subs	r1, r0, r1
 8011b58:	2900      	cmp	r1, #0
 8011b5a:	db07      	blt.n	8011b6c <task_add_delayed+0x58>
                    task->next = t->next;
                    t->next = task;
                    break;
                }
                t = t->next;
 8011b5c:	461c      	mov	r4, r3
 8011b5e:	e7f6      	b.n	8011b4e <task_add_delayed+0x3a>
            next_task = task;
 8011b60:	601d      	str	r5, [r3, #0]
 8011b62:	e007      	b.n	8011b74 <task_add_delayed+0x60>
            task->next = next_task;
 8011b64:	60ec      	str	r4, [r5, #12]
            next_task = task;
 8011b66:	4b08      	ldr	r3, [pc, #32]	@ (8011b88 <task_add_delayed+0x74>)
 8011b68:	601d      	str	r5, [r3, #0]
 8011b6a:	e003      	b.n	8011b74 <task_add_delayed+0x60>
                    task->next = t->next;
 8011b6c:	60eb      	str	r3, [r5, #12]
                    t->next = task;
 8011b6e:	60e5      	str	r5, [r4, #12]
                    break;
 8011b70:	e000      	b.n	8011b74 <task_add_delayed+0x60>
    core_task_t *task = NULL;
 8011b72:	2500      	movs	r5, #0
            }
        }
    }

    hal.irq_enable();
 8011b74:	4b03      	ldr	r3, [pc, #12]	@ (8011b84 <task_add_delayed+0x70>)
 8011b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011b78:	4798      	blx	r3

    return task != NULL;
}
 8011b7a:	1e28      	subs	r0, r5, #0
 8011b7c:	bf18      	it	ne
 8011b7e:	2001      	movne	r0, #1
 8011b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b82:	bf00      	nop
 8011b84:	200018dc 	.word	0x200018dc
 8011b88:	200016f8 	.word	0x200016f8

08011b8c <grbl_enter>:
{
 8011b8c:	b570      	push	{r4, r5, r6, lr}
    memset(&grbl, 0, sizeof(grbl_t));
 8011b8e:	4c9e      	ldr	r4, [pc, #632]	@ (8011e08 <grbl_enter+0x27c>)
 8011b90:	22f8      	movs	r2, #248	@ 0xf8
 8011b92:	2100      	movs	r1, #0
 8011b94:	4620      	mov	r0, r4
 8011b96:	f013 f9c6 	bl	8024f26 <memset>
    grbl.on_execute_realtime = grbl.on_execute_delay = task_execute;
 8011b9a:	4b9c      	ldr	r3, [pc, #624]	@ (8011e0c <grbl_enter+0x280>)
 8011b9c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8011b9e:	64a3      	str	r3, [r4, #72]	@ 0x48
    grbl.enqueue_gcode = protocol_enqueue_gcode;
 8011ba0:	4b9b      	ldr	r3, [pc, #620]	@ (8011e10 <grbl_enter+0x284>)
 8011ba2:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
    grbl.enqueue_realtime_command = stream_enqueue_realtime_command;
 8011ba6:	4b9b      	ldr	r3, [pc, #620]	@ (8011e14 <grbl_enter+0x288>)
 8011ba8:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
    grbl.on_report_options = dummy_bool_handler;
 8011bac:	4b9a      	ldr	r3, [pc, #616]	@ (8011e18 <grbl_enter+0x28c>)
 8011bae:	6563      	str	r3, [r4, #84]	@ 0x54
    grbl.on_report_command_help = system_command_help;
 8011bb0:	4b9a      	ldr	r3, [pc, #616]	@ (8011e1c <grbl_enter+0x290>)
 8011bb2:	65e3      	str	r3, [r4, #92]	@ 0x5c
    grbl.on_get_alarms = alarms_get_details;
 8011bb4:	4b9a      	ldr	r3, [pc, #616]	@ (8011e20 <grbl_enter+0x294>)
 8011bb6:	66e3      	str	r3, [r4, #108]	@ 0x6c
    grbl.on_get_errors = errors_get_details;
 8011bb8:	4b9a      	ldr	r3, [pc, #616]	@ (8011e24 <grbl_enter+0x298>)
 8011bba:	6723      	str	r3, [r4, #112]	@ 0x70
    grbl.on_get_settings = settings_get_details;
 8011bbc:	4b9a      	ldr	r3, [pc, #616]	@ (8011e28 <grbl_enter+0x29c>)
 8011bbe:	6763      	str	r3, [r4, #116]	@ 0x74
    memset(&hal, 0, sizeof(grbl_hal_t));
 8011bc0:	4c9a      	ldr	r4, [pc, #616]	@ (8011e2c <grbl_enter+0x2a0>)
 8011bc2:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8011bc6:	2100      	movs	r1, #0
 8011bc8:	4620      	mov	r0, r4
 8011bca:	f013 f9ac 	bl	8024f26 <memset>
    hal.version = HAL_VERSION; // Update when signatures and/or contract is changed - driver_init() should fail
 8011bce:	230a      	movs	r3, #10
 8011bd0:	6023      	str	r3, [r4, #0]
    hal.driver_reset = reset_handler;
 8011bd2:	4b97      	ldr	r3, [pc, #604]	@ (8011e30 <grbl_enter+0x2a4>)
 8011bd4:	f8c4 3170 	str.w	r3, [r4, #368]	@ 0x170
    hal.irq_enable = dummy_handler;
 8011bd8:	4b96      	ldr	r3, [pc, #600]	@ (8011e34 <grbl_enter+0x2a8>)
 8011bda:	64a3      	str	r3, [r4, #72]	@ 0x48
    hal.irq_disable = dummy_handler;
 8011bdc:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hal.irq_claim = dummy_irq_claim;
 8011bde:	4b96      	ldr	r3, [pc, #600]	@ (8011e38 <grbl_enter+0x2ac>)
 8011be0:	6523      	str	r3, [r4, #80]	@ 0x50
    hal.nvs.size = GRBL_NVS_SIZE;
 8011be2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011be6:	f8c4 3178 	str.w	r3, [r4, #376]	@ 0x178
    hal.coolant_cap.flood = On;
 8011bea:	f894 31e4 	ldrb.w	r3, [r4, #484]	@ 0x1e4
 8011bee:	f043 0301 	orr.w	r3, r3, #1
 8011bf2:	f884 31e4 	strb.w	r3, [r4, #484]	@ 0x1e4
    hal.limits.interrupt_callback = limit_interrupt_handler;
 8011bf6:	4b91      	ldr	r3, [pc, #580]	@ (8011e3c <grbl_enter+0x2b0>)
 8011bf8:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hal.control.interrupt_callback = control_interrupt_handler;
 8011bfa:	4b91      	ldr	r3, [pc, #580]	@ (8011e40 <grbl_enter+0x2b4>)
 8011bfc:	66e3      	str	r3, [r4, #108]	@ 0x6c
    hal.stepper.interrupt_callback = stepper_driver_interrupt_handler;
 8011bfe:	4b91      	ldr	r3, [pc, #580]	@ (8011e44 <grbl_enter+0x2b8>)
 8011c00:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
    hal.stream_blocking_callback = stream_tx_blocking;
 8011c04:	4b90      	ldr	r3, [pc, #576]	@ (8011e48 <grbl_enter+0x2bc>)
 8011c06:	f8c4 31d4 	str.w	r3, [r4, #468]	@ 0x1d4
    hal.signals_cap.reset = hal.signals_cap.feed_hold = hal.signals_cap.cycle_start = On;
 8011c0a:	f894 31dc 	ldrb.w	r3, [r4, #476]	@ 0x1dc
 8011c0e:	f043 0304 	orr.w	r3, r3, #4
 8011c12:	f884 31dc 	strb.w	r3, [r4, #476]	@ 0x1dc
 8011c16:	b2db      	uxtb	r3, r3
 8011c18:	f043 0302 	orr.w	r3, r3, #2
 8011c1c:	f884 31dc 	strb.w	r3, [r4, #476]	@ 0x1dc
 8011c20:	b2db      	uxtb	r3, r3
 8011c22:	f043 0301 	orr.w	r3, r3, #1
 8011c26:	f884 31dc 	strb.w	r3, [r4, #476]	@ 0x1dc
    sys.cold_start = true;
 8011c2a:	4e88      	ldr	r6, [pc, #544]	@ (8011e4c <grbl_enter+0x2c0>)
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	f886 307d 	strb.w	r3, [r6, #125]	@ 0x7d
    limits_init();
 8011c32:	f002 f875 	bl	8013d20 <limits_init>
    nvs_buffer_alloc(); // Allocate memory block for NVS buffer
 8011c36:	f004 fb4d 	bl	80162d4 <nvs_buffer_alloc>
    settings_clear();
 8011c3a:	f00c f9e5 	bl	801e008 <settings_clear>
    report_init_fns();
 8011c3e:	f00a faaf 	bl	801c1a0 <report_init_fns>
    driver.init = driver_init();
 8011c42:	f7f9 fb25 	bl	800b290 <driver_init>
 8011c46:	4d82      	ldr	r5, [pc, #520]	@ (8011e50 <grbl_enter+0x2c4>)
 8011c48:	782b      	ldrb	r3, [r5, #0]
 8011c4a:	f360 0300 	bfi	r3, r0, #0, #1
 8011c4e:	702b      	strb	r3, [r5, #0]
    nvs_buffer_init();
 8011c50:	f004 fb54 	bl	80162fc <nvs_buffer_init>
    settings_init(); // Load settings from non-volatile storage
 8011c54:	f00c f9e2 	bl	801e01c <settings_init>
    memset(sys.position, 0, sizeof(sys.position)); // Clear machine position.
 8011c58:	2300      	movs	r3, #0
 8011c5a:	f8c6 3088 	str.w	r3, [r6, #136]	@ 0x88
 8011c5e:	f8c6 308c 	str.w	r3, [r6, #140]	@ 0x8c
 8011c62:	f8c6 3090 	str.w	r3, [r6, #144]	@ 0x90
    driver.amass = hal.driver_cap.amass_level >= MAX_AMASS_LEVEL;
 8011c66:	f894 21d8 	ldrb.w	r2, [r4, #472]	@ 0x1d8
 8011c6a:	f002 0160 	and.w	r1, r2, #96	@ 0x60
 8011c6e:	2960      	cmp	r1, #96	@ 0x60
 8011c70:	bf14      	ite	ne
 8011c72:	2100      	movne	r1, #0
 8011c74:	2101      	moveq	r1, #1
 8011c76:	7828      	ldrb	r0, [r5, #0]
 8011c78:	f361 00c3 	bfi	r0, r1, #3, #1
 8011c7c:	7028      	strb	r0, [r5, #0]
    hal.driver_cap.amass_level = MAX_AMASS_LEVEL;
 8011c7e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8011c82:	f884 21d8 	strb.w	r2, [r4, #472]	@ 0x1d8
    driver.pulse_delay = hal.driver_cap.step_pulse_delay;
 8011c86:	b2d2      	uxtb	r2, r2
 8011c88:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8011c8c:	b2c1      	uxtb	r1, r0
 8011c8e:	f362 1104 	bfi	r1, r2, #4, #1
 8011c92:	7029      	strb	r1, [r5, #0]
    sys.mpg_mode = false;
 8011c94:	f886 307f 	strb.w	r3, [r6, #127]	@ 0x7f
    if(driver.ok == 0xFF)
 8011c98:	b2cb      	uxtb	r3, r1
 8011c9a:	2bff      	cmp	r3, #255	@ 0xff
 8011c9c:	d054      	beq.n	8011d48 <grbl_enter+0x1bc>
    if((driver.spindle = spindle_select(settings.spindle.flags.type))) {
 8011c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8011e54 <grbl_enter+0x2c8>)
 8011ca0:	f893 00e7 	ldrb.w	r0, [r3, #231]	@ 0xe7
 8011ca4:	f3c0 0084 	ubfx	r0, r0, #2, #5
 8011ca8:	f00c fdd8 	bl	801e85c <spindle_select>
 8011cac:	4b68      	ldr	r3, [pc, #416]	@ (8011e50 <grbl_enter+0x2c4>)
 8011cae:	781a      	ldrb	r2, [r3, #0]
 8011cb0:	f360 0282 	bfi	r2, r0, #2, #1
 8011cb4:	701a      	strb	r2, [r3, #0]
 8011cb6:	2800      	cmp	r0, #0
 8011cb8:	d052      	beq.n	8011d60 <grbl_enter+0x1d4>
        spindle_ptrs_t *spindle = spindle_get(0);
 8011cba:	2000      	movs	r0, #0
 8011cbc:	f00c fd94 	bl	801e7e8 <spindle_get>
        driver.spindle = spindle->get_pwm == NULL || spindle->update_pwm != NULL;
 8011cc0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d048      	beq.n	8011d58 <grbl_enter+0x1cc>
 8011cc6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d047      	beq.n	8011d5c <grbl_enter+0x1d0>
 8011ccc:	2101      	movs	r1, #1
 8011cce:	4b60      	ldr	r3, [pc, #384]	@ (8011e50 <grbl_enter+0x2c4>)
 8011cd0:	781a      	ldrb	r2, [r3, #0]
 8011cd2:	f361 0282 	bfi	r2, r1, #2, #1
 8011cd6:	701a      	strb	r2, [r3, #0]
    if(driver.ok != 0xFF) {
 8011cd8:	4b5d      	ldr	r3, [pc, #372]	@ (8011e50 <grbl_enter+0x2c4>)
 8011cda:	781b      	ldrb	r3, [r3, #0]
 8011cdc:	2bff      	cmp	r3, #255	@ 0xff
 8011cde:	d149      	bne.n	8011d74 <grbl_enter+0x1e8>
    hal.stepper.enable(settings.steppers.deenergize);
 8011ce0:	4c52      	ldr	r4, [pc, #328]	@ (8011e2c <grbl_enter+0x2a0>)
 8011ce2:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8011ce6:	4a5b      	ldr	r2, [pc, #364]	@ (8011e54 <grbl_enter+0x2c8>)
 8011ce8:	f892 00ec 	ldrb.w	r0, [r2, #236]	@ 0xec
 8011cec:	4798      	blx	r3
    spindle_all_off();
 8011cee:	f00c ff87 	bl	801ec00 <spindle_all_off>
    hal.coolant.set_state((coolant_state_t){0});
 8011cf2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011cf4:	f04f 0000 	mov.w	r0, #0
 8011cf8:	4798      	blx	r3
    if(hal.get_position)
 8011cfa:	f8d4 31d0 	ldr.w	r3, [r4, #464]	@ 0x1d0
 8011cfe:	b10b      	cbz	r3, 8011d04 <grbl_enter+0x178>
        hal.get_position(&sys.position); // TODO: restore on abort when returns true?
 8011d00:	4855      	ldr	r0, [pc, #340]	@ (8011e58 <grbl_enter+0x2cc>)
 8011d02:	4798      	blx	r3
    sys.driver_started = sys.alarm != Alarm_SelftestFailed;
 8011d04:	4a51      	ldr	r2, [pc, #324]	@ (8011e4c <grbl_enter+0x2c0>)
 8011d06:	f892 307c 	ldrb.w	r3, [r2, #124]	@ 0x7c
 8011d0a:	3b10      	subs	r3, #16
 8011d0c:	bf18      	it	ne
 8011d0e:	2301      	movne	r3, #1
 8011d10:	f882 307e 	strb.w	r3, [r2, #126]	@ 0x7e
    if(hal.homing.get_state == NULL || settings.homing.flags.use_limit_switches)
 8011d14:	4b45      	ldr	r3, [pc, #276]	@ (8011e2c <grbl_enter+0x2a0>)
 8011d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011d18:	b123      	cbz	r3, 8011d24 <grbl_enter+0x198>
 8011d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8011e54 <grbl_enter+0x2c8>)
 8011d1c:	f993 3114 	ldrsb.w	r3, [r3, #276]	@ 0x114
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	da06      	bge.n	8011d32 <grbl_enter+0x1a6>
        hal.homing.get_state = hal.limits_cap.max.mask ? get_homing_status2 : get_homing_status;
 8011d24:	4b41      	ldr	r3, [pc, #260]	@ (8011e2c <grbl_enter+0x2a0>)
 8011d26:	f893 31df 	ldrb.w	r3, [r3, #479]	@ 0x1df
 8011d2a:	b363      	cbz	r3, 8011d86 <grbl_enter+0x1fa>
 8011d2c:	4a4b      	ldr	r2, [pc, #300]	@ (8011e5c <grbl_enter+0x2d0>)
 8011d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8011e2c <grbl_enter+0x2a0>)
 8011d30:	661a      	str	r2, [r3, #96]	@ 0x60
    if(settings.report_interval)
 8011d32:	4b48      	ldr	r3, [pc, #288]	@ (8011e54 <grbl_enter+0x2c8>)
 8011d34:	8a9a      	ldrh	r2, [r3, #20]
 8011d36:	bb42      	cbnz	r2, 8011d8a <grbl_enter+0x1fe>
    if(hal.driver_cap.sd_card || hal.driver_cap.littlefs) {
 8011d38:	4b3c      	ldr	r3, [pc, #240]	@ (8011e2c <grbl_enter+0x2a0>)
 8011d3a:	f893 31d9 	ldrb.w	r3, [r3, #473]	@ 0x1d9
 8011d3e:	f013 0f06 	tst.w	r3, #6
 8011d42:	d127      	bne.n	8011d94 <grbl_enter+0x208>
            looping = hal.driver_release == NULL || hal.driver_release();
 8011d44:	2301      	movs	r3, #1
 8011d46:	e096      	b.n	8011e76 <grbl_enter+0x2ea>
        driver.setup = hal.driver_setup(&settings);
 8011d48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011d4a:	4842      	ldr	r0, [pc, #264]	@ (8011e54 <grbl_enter+0x2c8>)
 8011d4c:	4798      	blx	r3
 8011d4e:	782a      	ldrb	r2, [r5, #0]
 8011d50:	f360 0241 	bfi	r2, r0, #1, #1
 8011d54:	702a      	strb	r2, [r5, #0]
 8011d56:	e7a2      	b.n	8011c9e <grbl_enter+0x112>
        driver.spindle = spindle->get_pwm == NULL || spindle->update_pwm != NULL;
 8011d58:	2101      	movs	r1, #1
 8011d5a:	e7b8      	b.n	8011cce <grbl_enter+0x142>
 8011d5c:	2100      	movs	r1, #0
 8011d5e:	e7b6      	b.n	8011cce <grbl_enter+0x142>
        driver.spindle = spindle_select(spindle_add_null());
 8011d60:	f00c fd58 	bl	801e814 <spindle_add_null>
 8011d64:	f00c fd7a 	bl	801e85c <spindle_select>
 8011d68:	4b39      	ldr	r3, [pc, #228]	@ (8011e50 <grbl_enter+0x2c4>)
 8011d6a:	781a      	ldrb	r2, [r3, #0]
 8011d6c:	f360 0282 	bfi	r2, r0, #2, #1
 8011d70:	701a      	strb	r2, [r3, #0]
 8011d72:	e7b1      	b.n	8011cd8 <grbl_enter+0x14c>
        sys.alarm = Alarm_SelftestFailed;
 8011d74:	4b35      	ldr	r3, [pc, #212]	@ (8011e4c <grbl_enter+0x2c0>)
 8011d76:	2210      	movs	r2, #16
 8011d78:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        protocol_enqueue_foreground_task(report_driver_error, NULL);
 8011d7c:	2100      	movs	r1, #0
 8011d7e:	4838      	ldr	r0, [pc, #224]	@ (8011e60 <grbl_enter+0x2d4>)
 8011d80:	f006 f946 	bl	8018010 <protocol_enqueue_foreground_task>
 8011d84:	e7ac      	b.n	8011ce0 <grbl_enter+0x154>
        hal.homing.get_state = hal.limits_cap.max.mask ? get_homing_status2 : get_homing_status;
 8011d86:	4a37      	ldr	r2, [pc, #220]	@ (8011e64 <grbl_enter+0x2d8>)
 8011d88:	e7d1      	b.n	8011d2e <grbl_enter+0x1a2>
        task_add_delayed(auto_realtime_report, NULL, settings.report_interval);
 8011d8a:	2100      	movs	r1, #0
 8011d8c:	4836      	ldr	r0, [pc, #216]	@ (8011e68 <grbl_enter+0x2dc>)
 8011d8e:	f7ff fec1 	bl	8011b14 <task_add_delayed>
 8011d92:	e7d1      	b.n	8011d38 <grbl_enter+0x1ac>
        fs_options_t fs_options = {0};
 8011d94:	f04f 0100 	mov.w	r1, #0
        fs_options.lfs_hidden = hal.driver_cap.littlefs;
 8011d98:	4b24      	ldr	r3, [pc, #144]	@ (8011e2c <grbl_enter+0x2a0>)
 8011d9a:	f893 31d9 	ldrb.w	r3, [r3, #473]	@ 0x1d9
 8011d9e:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8011da2:	f362 0141 	bfi	r1, r2, #1, #1
        fs_options.sd_mount_on_boot = hal.driver_cap.sd_card;
 8011da6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8011daa:	f363 0100 	bfi	r1, r3, #0, #1
        setting_remove_elements(Setting_FSOptions, fs_options.mask);
 8011dae:	b2c9      	uxtb	r1, r1
 8011db0:	f240 208a 	movw	r0, #650	@ 0x28a
 8011db4:	f00b ffca 	bl	801dd4c <setting_remove_elements>
 8011db8:	e7c4      	b.n	8011d44 <grbl_enter+0x1b8>
            memset(&sys, 0, offsetof(system_t, alarm)); // Clear system variables except state & alarm.
 8011dba:	227c      	movs	r2, #124	@ 0x7c
 8011dbc:	2100      	movs	r1, #0
 8011dbe:	4823      	ldr	r0, [pc, #140]	@ (8011e4c <grbl_enter+0x2c0>)
 8011dc0:	f013 f8b1 	bl	8024f26 <memset>
 8011dc4:	e06a      	b.n	8011e9c <grbl_enter+0x310>
                spindle_get(spindle_num)->param->override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE; // Set to 100%
 8011dc6:	2000      	movs	r0, #0
 8011dc8:	f00c fd0e 	bl	801e7e8 <spindle_get>
 8011dcc:	6843      	ldr	r3, [r0, #4]
 8011dce:	2264      	movs	r2, #100	@ 0x64
 8011dd0:	60da      	str	r2, [r3, #12]
 8011dd2:	e06f      	b.n	8011eb4 <grbl_enter+0x328>
            tc_init();
 8011dd4:	f010 fe66 	bl	8022aa4 <tc_init>
 8011dd8:	e0b2      	b.n	8011f40 <grbl_enter+0x3b4>
        if(!settings.flags.no_unlock_after_estop && state_get() == STATE_ESTOP)
 8011dda:	f00d f995 	bl	801f108 <state_get>
 8011dde:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8011de2:	f040 80b6 	bne.w	8011f52 <grbl_enter+0x3c6>
            state_set(STATE_ALARM);
 8011de6:	2001      	movs	r0, #1
 8011de8:	f00d f994 	bl	801f114 <state_set>
 8011dec:	e0b1      	b.n	8011f52 <grbl_enter+0x3c6>
            protocol_enqueue_realtime_command(sys.mpg_mode ? CMD_STATUS_REPORT_ALL : CMD_STATUS_REPORT);
 8011dee:	4b17      	ldr	r3, [pc, #92]	@ (8011e4c <grbl_enter+0x2c0>)
 8011df0:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8011df4:	b11b      	cbz	r3, 8011dfe <grbl_enter+0x272>
 8011df6:	2087      	movs	r0, #135	@ 0x87
 8011df8:	f006 f930 	bl	801805c <protocol_enqueue_realtime_command>
 8011dfc:	e0af      	b.n	8011f5e <grbl_enter+0x3d2>
 8011dfe:	2080      	movs	r0, #128	@ 0x80
 8011e00:	e7fa      	b.n	8011df8 <grbl_enter+0x26c>
            looping = hal.driver_release == NULL || hal.driver_release();
 8011e02:	2301      	movs	r3, #1
 8011e04:	e033      	b.n	8011e6e <grbl_enter+0x2e2>
 8011e06:	bf00      	nop
 8011e08:	20001ac4 	.word	0x20001ac4
 8011e0c:	08011979 	.word	0x08011979
 8011e10:	08017361 	.word	0x08017361
 8011e14:	08020cd5 	.word	0x08020cd5
 8011e18:	08011901 	.word	0x08011901
 8011e1c:	08021d29 	.word	0x08021d29
 8011e20:	0800d0fd 	.word	0x0800d0fd
 8011e24:	0800d2d9 	.word	0x0800d2d9
 8011e28:	0801d1dd 	.word	0x0801d1dd
 8011e2c:	200018dc 	.word	0x200018dc
 8011e30:	08011a35 	.word	0x08011a35
 8011e34:	080160af 	.word	0x080160af
 8011e38:	08011903 	.word	0x08011903
 8011e3c:	08013461 	.word	0x08013461
 8011e40:	08021955 	.word	0x08021955
 8011e44:	0801fbe5 	.word	0x0801fbe5
 8011e48:	08020c29 	.word	0x08020c29
 8011e4c:	20001bbc 	.word	0x20001bbc
 8011e50:	200001d8 	.word	0x200001d8
 8011e54:	200022f4 	.word	0x200022f4
 8011e58:	20001c44 	.word	0x20001c44
 8011e5c:	08011a49 	.word	0x08011a49
 8011e60:	08011ab5 	.word	0x08011ab5
 8011e64:	08011909 	.word	0x08011909
 8011e68:	08011fa1 	.word	0x08011fa1
 8011e6c:	2301      	movs	r3, #1
        sys.cold_start = false;
 8011e6e:	4a46      	ldr	r2, [pc, #280]	@ (8011f88 <grbl_enter+0x3fc>)
 8011e70:	2100      	movs	r1, #0
 8011e72:	f882 107d 	strb.w	r1, [r2, #125]	@ 0x7d
    while(looping) {
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	f000 8082 	beq.w	8011f80 <grbl_enter+0x3f4>
        report_init_fns();
 8011e7c:	f00a f990 	bl	801c1a0 <report_init_fns>
        if(!sys.position_lost || settings.homing.flags.keep_on_reset)
 8011e80:	4b41      	ldr	r3, [pc, #260]	@ (8011f88 <grbl_enter+0x3fc>)
 8011e82:	78db      	ldrb	r3, [r3, #3]
 8011e84:	b12b      	cbz	r3, 8011e92 <grbl_enter+0x306>
 8011e86:	4b41      	ldr	r3, [pc, #260]	@ (8011f8c <grbl_enter+0x400>)
 8011e88:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8011e8c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8011e90:	d093      	beq.n	8011dba <grbl_enter+0x22e>
            memset(&sys, 0, offsetof(system_t, homed)); // Clear system variables except alarm & homed status.
 8011e92:	2254      	movs	r2, #84	@ 0x54
 8011e94:	2100      	movs	r1, #0
 8011e96:	483c      	ldr	r0, [pc, #240]	@ (8011f88 <grbl_enter+0x3fc>)
 8011e98:	f013 f845 	bl	8024f26 <memset>
        sys.var5399 = -2;                                        // Clear last M66 result
 8011e9c:	4b3a      	ldr	r3, [pc, #232]	@ (8011f88 <grbl_enter+0x3fc>)
 8011e9e:	f06f 0201 	mvn.w	r2, #1
 8011ea2:	651a      	str	r2, [r3, #80]	@ 0x50
        sys.override.feed_rate = DEFAULT_FEED_OVERRIDE;          // Set to 100%
 8011ea4:	2264      	movs	r2, #100	@ 0x64
 8011ea6:	61da      	str	r2, [r3, #28]
        sys.override.rapid_rate = DEFAULT_RAPID_OVERRIDE;        // Set to 100%
 8011ea8:	621a      	str	r2, [r3, #32]
            if(spindle_is_enabled(--spindle_num))
 8011eaa:	2000      	movs	r0, #0
 8011eac:	f00c fc86 	bl	801e7bc <spindle_is_enabled>
 8011eb0:	2800      	cmp	r0, #0
 8011eb2:	d188      	bne.n	8011dc6 <grbl_enter+0x23a>
        sys.flags.auto_reporting = settings.report_interval != 0;
 8011eb4:	4a35      	ldr	r2, [pc, #212]	@ (8011f8c <grbl_enter+0x400>)
 8011eb6:	8a93      	ldrh	r3, [r2, #20]
 8011eb8:	3b00      	subs	r3, #0
 8011eba:	bf18      	it	ne
 8011ebc:	2301      	movne	r3, #1
 8011ebe:	4932      	ldr	r1, [pc, #200]	@ (8011f88 <grbl_enter+0x3fc>)
 8011ec0:	7dc8      	ldrb	r0, [r1, #23]
 8011ec2:	f363 0041 	bfi	r0, r3, #1, #1
 8011ec6:	75c8      	strb	r0, [r1, #23]
        if(settings.parking.flags.enabled)
 8011ec8:	f892 3128 	ldrb.w	r3, [r2, #296]	@ 0x128
 8011ecc:	f013 0f01 	tst.w	r3, #1
 8011ed0:	d00a      	beq.n	8011ee8 <grbl_enter+0x35c>
            sys.override.control.parking_disable = settings.parking.flags.deactivate_upon_init;
 8011ed2:	f892 3128 	ldrb.w	r3, [r2, #296]	@ 0x128
 8011ed6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8011eda:	460a      	mov	r2, r1
 8011edc:	f891 1029 	ldrb.w	r1, [r1, #41]	@ 0x29
 8011ee0:	f363 01c3 	bfi	r1, r3, #3, #1
 8011ee4:	f882 1029 	strb.w	r1, [r2, #41]	@ 0x29
        flush_override_buffers();
 8011ee8:	f004 fc08 	bl	80166fc <flush_override_buffers>
        hal.stream.reset_read_buffer(); // Clear input stream buffer
 8011eec:	4c28      	ldr	r4, [pc, #160]	@ (8011f90 <grbl_enter+0x404>)
 8011eee:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 8011ef2:	4798      	blx	r3
        gc_init();                      // Set g-code parser to default state
 8011ef4:	f7fb fbc6 	bl	800d684 <gc_init>
        hal.limits.enable(settings.limits.flags.hard_enabled, (axes_signals_t){0});
 8011ef8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8011efa:	4a24      	ldr	r2, [pc, #144]	@ (8011f8c <grbl_enter+0x400>)
 8011efc:	f892 0124 	ldrb.w	r0, [r2, #292]	@ 0x124
 8011f00:	f04f 0100 	mov.w	r1, #0
 8011f04:	f000 0001 	and.w	r0, r0, #1
 8011f08:	4798      	blx	r3
        plan_reset();                   // Clear block buffer and planner variables
 8011f0a:	f004 fd25 	bl	8016958 <plan_reset>
        st_reset();                     // Clear stepper subsystem variables.
 8011f0e:	f00d ffdf 	bl	801fed0 <st_reset>
        limits_set_homing_axes();       // Set axes to be homed from settings.
 8011f12:	f001 fec7 	bl	8013ca4 <limits_set_homing_axes>
        system_init_switches();         // Set switches from inputs.
 8011f16:	f00f fd01 	bl	802191c <system_init_switches>
        sync_position();
 8011f1a:	f005 f84b 	bl	8016fb4 <plan_sync_position>
 8011f1e:	491d      	ldr	r1, [pc, #116]	@ (8011f94 <grbl_enter+0x408>)
 8011f20:	481d      	ldr	r0, [pc, #116]	@ (8011f98 <grbl_enter+0x40c>)
 8011f22:	f010 f829 	bl	8021f78 <system_convert_array_steps_to_mpos>
        if(hal.stepper.disable_motors)
 8011f26:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8011f2a:	b113      	cbz	r3, 8011f32 <grbl_enter+0x3a6>
            hal.stepper.disable_motors((axes_signals_t){0}, SquaringMode_Both);
 8011f2c:	2100      	movs	r1, #0
 8011f2e:	4608      	mov	r0, r1
 8011f30:	4798      	blx	r3
        if(!hal.driver_cap.atc)
 8011f32:	4b17      	ldr	r3, [pc, #92]	@ (8011f90 <grbl_enter+0x404>)
 8011f34:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 8011f38:	f013 0f02 	tst.w	r3, #2
 8011f3c:	f43f af4a 	beq.w	8011dd4 <grbl_enter+0x248>
        grbl.report.init_message();
 8011f40:	4b16      	ldr	r3, [pc, #88]	@ (8011f9c <grbl_enter+0x410>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	4798      	blx	r3
        if(!settings.flags.no_unlock_after_estop && state_get() == STATE_ESTOP)
 8011f46:	4b11      	ldr	r3, [pc, #68]	@ (8011f8c <grbl_enter+0x400>)
 8011f48:	f993 30ff 	ldrsb.w	r3, [r3, #255]	@ 0xff
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	f6bf af44 	bge.w	8011dda <grbl_enter+0x24e>
        if(hal.driver_cap.mpg_mode)
 8011f52:	4b0f      	ldr	r3, [pc, #60]	@ (8011f90 <grbl_enter+0x404>)
 8011f54:	f993 31d9 	ldrsb.w	r3, [r3, #473]	@ 0x1d9
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	f6ff af48 	blt.w	8011dee <grbl_enter+0x262>
        if(!(looping = protocol_main_loop()))
 8011f5e:	f005 fd9b 	bl	8017a98 <protocol_main_loop>
 8011f62:	4603      	mov	r3, r0
 8011f64:	2800      	cmp	r0, #0
 8011f66:	d182      	bne.n	8011e6e <grbl_enter+0x2e2>
            looping = hal.driver_release == NULL || hal.driver_release();
 8011f68:	4b09      	ldr	r3, [pc, #36]	@ (8011f90 <grbl_enter+0x404>)
 8011f6a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	f43f af47 	beq.w	8011e02 <grbl_enter+0x276>
 8011f74:	4798      	blx	r3
 8011f76:	2800      	cmp	r0, #0
 8011f78:	f47f af78 	bne.w	8011e6c <grbl_enter+0x2e0>
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	e776      	b.n	8011e6e <grbl_enter+0x2e2>
    nvs_buffer_free();
 8011f80:	f004 fb38 	bl	80165f4 <nvs_buffer_free>
}
 8011f84:	2000      	movs	r0, #0
 8011f86:	bd70      	pop	{r4, r5, r6, pc}
 8011f88:	20001bbc 	.word	0x20001bbc
 8011f8c:	200022f4 	.word	0x200022f4
 8011f90:	200018dc 	.word	0x200018dc
 8011f94:	20001c44 	.word	0x20001c44
 8011f98:	2000167c 	.word	0x2000167c
 8011f9c:	20001ac4 	.word	0x20001ac4

08011fa0 <auto_realtime_report>:
{
 8011fa0:	b508      	push	{r3, lr}
    if(sys.flags.auto_reporting) {
 8011fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8011fd8 <auto_realtime_report+0x38>)
 8011fa4:	7ddb      	ldrb	r3, [r3, #23]
 8011fa6:	f013 0f02 	tst.w	r3, #2
 8011faa:	d00b      	beq.n	8011fc4 <auto_realtime_report+0x24>
        system_set_exec_state_flag(EXEC_STATUS_REPORT);
 8011fac:	4b0b      	ldr	r3, [pc, #44]	@ (8011fdc <auto_realtime_report+0x3c>)
 8011fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011fb0:	2101      	movs	r1, #1
 8011fb2:	480b      	ldr	r0, [pc, #44]	@ (8011fe0 <auto_realtime_report+0x40>)
 8011fb4:	4798      	blx	r3
        task_add_delayed(auto_realtime_report, NULL, settings.report_interval);
 8011fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8011fe4 <auto_realtime_report+0x44>)
 8011fb8:	8a9a      	ldrh	r2, [r3, #20]
 8011fba:	2100      	movs	r1, #0
 8011fbc:	480a      	ldr	r0, [pc, #40]	@ (8011fe8 <auto_realtime_report+0x48>)
 8011fbe:	f7ff fda9 	bl	8011b14 <task_add_delayed>
}
 8011fc2:	bd08      	pop	{r3, pc}
    } else if(settings.report_interval)
 8011fc4:	4b07      	ldr	r3, [pc, #28]	@ (8011fe4 <auto_realtime_report+0x44>)
 8011fc6:	8a9a      	ldrh	r2, [r3, #20]
 8011fc8:	2a00      	cmp	r2, #0
 8011fca:	d0fa      	beq.n	8011fc2 <auto_realtime_report+0x22>
        task_add_delayed(realtime_report_check, NULL, settings.report_interval);
 8011fcc:	2100      	movs	r1, #0
 8011fce:	4807      	ldr	r0, [pc, #28]	@ (8011fec <auto_realtime_report+0x4c>)
 8011fd0:	f7ff fda0 	bl	8011b14 <task_add_delayed>
}
 8011fd4:	e7f5      	b.n	8011fc2 <auto_realtime_report+0x22>
 8011fd6:	bf00      	nop
 8011fd8:	20001bbc 	.word	0x20001bbc
 8011fdc:	200018dc 	.word	0x200018dc
 8011fe0:	20001c04 	.word	0x20001c04
 8011fe4:	200022f4 	.word	0x200022f4
 8011fe8:	08011fa1 	.word	0x08011fa1
 8011fec:	08011ff1 	.word	0x08011ff1

08011ff0 <realtime_report_check>:
{
 8011ff0:	b508      	push	{r3, lr}
    task_add_delayed(sys.flags.auto_reporting ? auto_realtime_report : realtime_report_check, NULL, settings.report_interval);
 8011ff2:	4b07      	ldr	r3, [pc, #28]	@ (8012010 <realtime_report_check+0x20>)
 8011ff4:	7ddb      	ldrb	r3, [r3, #23]
 8011ff6:	f013 0f02 	tst.w	r3, #2
 8011ffa:	d006      	beq.n	801200a <realtime_report_check+0x1a>
 8011ffc:	4805      	ldr	r0, [pc, #20]	@ (8012014 <realtime_report_check+0x24>)
 8011ffe:	4b06      	ldr	r3, [pc, #24]	@ (8012018 <realtime_report_check+0x28>)
 8012000:	8a9a      	ldrh	r2, [r3, #20]
 8012002:	2100      	movs	r1, #0
 8012004:	f7ff fd86 	bl	8011b14 <task_add_delayed>
}
 8012008:	bd08      	pop	{r3, pc}
    task_add_delayed(sys.flags.auto_reporting ? auto_realtime_report : realtime_report_check, NULL, settings.report_interval);
 801200a:	4804      	ldr	r0, [pc, #16]	@ (801201c <realtime_report_check+0x2c>)
 801200c:	e7f7      	b.n	8011ffe <realtime_report_check+0xe>
 801200e:	bf00      	nop
 8012010:	20001bbc 	.word	0x20001bbc
 8012014:	08011fa1 	.word	0x08011fa1
 8012018:	200022f4 	.word	0x200022f4
 801201c:	08011ff1 	.word	0x08011ff1

08012020 <task_delete>:

void task_delete (foreground_task_ptr fn, void *data)
{
    core_task_t *task, *prev = NULL;

    if((task = next_task)) do {
 8012020:	4b12      	ldr	r3, [pc, #72]	@ (801206c <task_delete+0x4c>)
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	b303      	cbz	r3, 8012068 <task_delete+0x48>
{
 8012026:	b410      	push	{r4}
    core_task_t *task, *prev = NULL;
 8012028:	2400      	movs	r4, #0
 801202a:	e00a      	b.n	8012042 <task_delete+0x22>
        if(fn == task->fn && data == task->data) {
            if(prev)
                prev->next = task->next;
            else
                next_task = task->next;
 801202c:	68d9      	ldr	r1, [r3, #12]
 801202e:	4a0f      	ldr	r2, [pc, #60]	@ (801206c <task_delete+0x4c>)
 8012030:	6011      	str	r1, [r2, #0]
 8012032:	e010      	b.n	8012056 <task_delete+0x36>
        last_freed = task;
 8012034:	4a0e      	ldr	r2, [pc, #56]	@ (8012070 <task_delete+0x50>)
 8012036:	6013      	str	r3, [r2, #0]
 8012038:	e013      	b.n	8012062 <task_delete+0x42>
            task_free(task);
            break;
        }
        prev = task;
    } while((task = task->next));
 801203a:	68da      	ldr	r2, [r3, #12]
        prev = task;
 801203c:	461c      	mov	r4, r3
    } while((task = task->next));
 801203e:	b182      	cbz	r2, 8012062 <task_delete+0x42>
 8012040:	4613      	mov	r3, r2
        if(fn == task->fn && data == task->data) {
 8012042:	685a      	ldr	r2, [r3, #4]
 8012044:	4282      	cmp	r2, r0
 8012046:	d1f8      	bne.n	801203a <task_delete+0x1a>
 8012048:	689a      	ldr	r2, [r3, #8]
 801204a:	428a      	cmp	r2, r1
 801204c:	d1f5      	bne.n	801203a <task_delete+0x1a>
            if(prev)
 801204e:	2c00      	cmp	r4, #0
 8012050:	d0ec      	beq.n	801202c <task_delete+0xc>
                prev->next = task->next;
 8012052:	68da      	ldr	r2, [r3, #12]
 8012054:	60e2      	str	r2, [r4, #12]
    task->fn = NULL;
 8012056:	2200      	movs	r2, #0
 8012058:	605a      	str	r2, [r3, #4]
    if(last_freed == NULL)
 801205a:	4a05      	ldr	r2, [pc, #20]	@ (8012070 <task_delete+0x50>)
 801205c:	6812      	ldr	r2, [r2, #0]
 801205e:	2a00      	cmp	r2, #0
 8012060:	d0e8      	beq.n	8012034 <task_delete+0x14>
}
 8012062:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012066:	4770      	bx	lr
 8012068:	4770      	bx	lr
 801206a:	bf00      	nop
 801206c:	200016f8 	.word	0x200016f8
 8012070:	200016ec 	.word	0x200016ec

08012074 <ioports_count>:
static setting_changed_ptr on_setting_changed = NULL;
static io_ports_cfg_t analog, digital;
static int16_t digital_in = -1, digital_out = -1, analog_in = -1, analog_out = -1;

static uint8_t ioports_count (io_port_type_t type, io_port_direction_t dir)
{
 8012074:	b570      	push	{r4, r5, r6, lr}
 8012076:	4606      	mov	r6, r0
 8012078:	460d      	mov	r5, r1
    xbar_t *port;
    uint8_t n_ports = 0;
 801207a:	2400      	movs	r4, #0
 801207c:	e000      	b.n	8012080 <ioports_count+0xc>

    // determine how many ports, including claimed ports, that are available
    do {
        if((port = hal.port.get_pin_info(type, dir, n_ports)))
            n_ports++;
    } while(port != NULL);
 801207e:	b163      	cbz	r3, 801209a <ioports_count+0x26>
        if((port = hal.port.get_pin_info(type, dir, n_ports)))
 8012080:	4b07      	ldr	r3, [pc, #28]	@ (80120a0 <ioports_count+0x2c>)
 8012082:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8012086:	4622      	mov	r2, r4
 8012088:	4629      	mov	r1, r5
 801208a:	4630      	mov	r0, r6
 801208c:	4798      	blx	r3
 801208e:	4603      	mov	r3, r0
 8012090:	2800      	cmp	r0, #0
 8012092:	d0f4      	beq.n	801207e <ioports_count+0xa>
            n_ports++;
 8012094:	3401      	adds	r4, #1
 8012096:	b2e4      	uxtb	r4, r4
 8012098:	e7f1      	b.n	801207e <ioports_count+0xa>

    return n_ports;
}
 801209a:	4620      	mov	r0, r4
 801209c:	bd70      	pop	{r4, r5, r6, pc}
 801209e:	bf00      	nop
 80120a0:	200018dc 	.word	0x200018dc

080120a4 <get_pnum>:

/* experimental code follows */

static char *get_pnum (io_ports_data_t *ports, uint8_t port)
{
    return ports->pnum ? (ports->pnum + (port * 3) + (port > 9 ? port - 10 : 0)) : NULL;
 80120a4:	6800      	ldr	r0, [r0, #0]
 80120a6:	b140      	cbz	r0, 80120ba <get_pnum+0x16>
 80120a8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80120ac:	2909      	cmp	r1, #9
 80120ae:	d901      	bls.n	80120b4 <get_pnum+0x10>
 80120b0:	390a      	subs	r1, #10
 80120b2:	e000      	b.n	80120b6 <get_pnum+0x12>
 80120b4:	2100      	movs	r1, #0
 80120b6:	440b      	add	r3, r1
 80120b8:	4418      	add	r0, r3
}
 80120ba:	4770      	bx	lr

080120bc <is_setting_available>:

static bool is_setting_available (const setting_detail_t *setting)
{
    bool available = false;

    switch(setting->id) {
 80120bc:	8803      	ldrh	r3, [r0, #0]
 80120be:	f5b3 7fba 	cmp.w	r3, #372	@ 0x174
 80120c2:	d30d      	bcc.n	80120e0 <is_setting_available+0x24>
 80120c4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80120c8:	b29b      	uxth	r3, r3
 80120ca:	2b01      	cmp	r3, #1
 80120cc:	d81e      	bhi.n	801210c <is_setting_available+0x50>
            available = digital.in.ports && digital.inx.mask;
            break;

        case Settings_IoPort_InvertOut:
        case Settings_IoPort_OD_Enable:
            available = digital.out.ports && digital.outx.mask;
 80120ce:	4b10      	ldr	r3, [pc, #64]	@ (8012110 <is_setting_available+0x54>)
 80120d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80120d2:	b1bb      	cbz	r3, 8012104 <is_setting_available+0x48>
 80120d4:	4b0e      	ldr	r3, [pc, #56]	@ (8012110 <is_setting_available+0x54>)
 80120d6:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80120da:	b9ab      	cbnz	r3, 8012108 <is_setting_available+0x4c>
 80120dc:	2000      	movs	r0, #0
 80120de:	4770      	bx	lr
    switch(setting->id) {
 80120e0:	f5b3 7fb9 	cmp.w	r3, #370	@ 0x172
 80120e4:	d201      	bcs.n	80120ea <is_setting_available+0x2e>
 80120e6:	2000      	movs	r0, #0
 80120e8:	4770      	bx	lr
            available = digital.in.ports && digital.inx.mask;
 80120ea:	4b09      	ldr	r3, [pc, #36]	@ (8012110 <is_setting_available+0x54>)
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	b12b      	cbz	r3, 80120fc <is_setting_available+0x40>
 80120f0:	4b07      	ldr	r3, [pc, #28]	@ (8012110 <is_setting_available+0x54>)
 80120f2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80120f6:	b91b      	cbnz	r3, 8012100 <is_setting_available+0x44>
 80120f8:	2000      	movs	r0, #0
 80120fa:	4770      	bx	lr
 80120fc:	2000      	movs	r0, #0
 80120fe:	4770      	bx	lr
 8012100:	2001      	movs	r0, #1
            break;
 8012102:	4770      	bx	lr
            available = digital.out.ports && digital.outx.mask;
 8012104:	2000      	movs	r0, #0
 8012106:	4770      	bx	lr
 8012108:	2001      	movs	r0, #1
            break;
 801210a:	4770      	bx	lr
    switch(setting->id) {
 801210c:	2000      	movs	r0, #0
        default:
            break;
    }

    return available;
}
 801210e:	4770      	bx	lr
 8012110:	20001c54 	.word	0x20001c54

08012114 <aux_get_value>:

static uint32_t aux_get_value (setting_id_t id)
{
    uint32_t value = 0;

    switch(id) {
 8012114:	f5a0 70b9 	sub.w	r0, r0, #370	@ 0x172
 8012118:	2803      	cmp	r0, #3
 801211a:	d813      	bhi.n	8012144 <aux_get_value+0x30>
 801211c:	e8df f000 	tbb	[pc, r0]
 8012120:	0e0a0602 	.word	0x0e0a0602

        case Settings_IoPort_InvertIn:
            value = settings.ioport.invert_in.mask;
 8012124:	4b08      	ldr	r3, [pc, #32]	@ (8012148 <aux_get_value+0x34>)
 8012126:	f893 0168 	ldrb.w	r0, [r3, #360]	@ 0x168
            break;
 801212a:	4770      	bx	lr

        case Settings_IoPort_Pullup_Disable:
            value = settings.ioport.pullup_disable_in.mask;
 801212c:	4b06      	ldr	r3, [pc, #24]	@ (8012148 <aux_get_value+0x34>)
 801212e:	f893 0169 	ldrb.w	r0, [r3, #361]	@ 0x169
            break;
 8012132:	4770      	bx	lr

        case Settings_IoPort_InvertOut:
            value = settings.ioport.invert_out.mask;
 8012134:	4b04      	ldr	r3, [pc, #16]	@ (8012148 <aux_get_value+0x34>)
 8012136:	f893 016a 	ldrb.w	r0, [r3, #362]	@ 0x16a
            break;
 801213a:	4770      	bx	lr

        case Settings_IoPort_OD_Enable:
            value = settings.ioport.od_enable_out.mask;
 801213c:	4b02      	ldr	r3, [pc, #8]	@ (8012148 <aux_get_value+0x34>)
 801213e:	f893 016b 	ldrb.w	r0, [r3, #363]	@ 0x16b
            break;
 8012142:	4770      	bx	lr
    switch(id) {
 8012144:	2000      	movs	r0, #0
        default:
            break;
    }

    return value;
}
 8012146:	4770      	bx	lr
 8012148:	200022f4 	.word	0x200022f4

0801214c <ioports_available>:
{
 801214c:	b508      	push	{r3, lr}
    if(hal.port.get_pin_info) {
 801214e:	4b28      	ldr	r3, [pc, #160]	@ (80121f0 <ioports_available+0xa4>)
 8012150:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8012154:	2b00      	cmp	r3, #0
 8012156:	d037      	beq.n	80121c8 <ioports_available+0x7c>
        if(type == Port_Digital) {
 8012158:	2801      	cmp	r0, #1
 801215a:	d008      	beq.n	801216e <ioports_available+0x22>
            if(dir == Port_Input)
 801215c:	bb39      	cbnz	r1, 80121ae <ioports_available+0x62>
                ports = analog_in == -1 ? (analog_in = ioports_count(type, dir)) : (uint8_t)analog_in;
 801215e:	4b25      	ldr	r3, [pc, #148]	@ (80121f4 <ioports_available+0xa8>)
 8012160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012168:	d01c      	beq.n	80121a4 <ioports_available+0x58>
 801216a:	b2d8      	uxtb	r0, r3
}
 801216c:	bd08      	pop	{r3, pc}
            if(dir == Port_Input)
 801216e:	b961      	cbnz	r1, 801218a <ioports_available+0x3e>
                ports = digital_in == -1 ? (digital_in = ioports_count(type, dir)) : (uint8_t)digital_in;
 8012170:	4b21      	ldr	r3, [pc, #132]	@ (80121f8 <ioports_available+0xac>)
 8012172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012176:	f1b3 3fff 	cmp.w	r3, #4294967295
 801217a:	d001      	beq.n	8012180 <ioports_available+0x34>
 801217c:	b2d8      	uxtb	r0, r3
 801217e:	e7f5      	b.n	801216c <ioports_available+0x20>
 8012180:	f7ff ff78 	bl	8012074 <ioports_count>
 8012184:	4b1c      	ldr	r3, [pc, #112]	@ (80121f8 <ioports_available+0xac>)
 8012186:	8018      	strh	r0, [r3, #0]
 8012188:	e7f0      	b.n	801216c <ioports_available+0x20>
                ports = digital_out == -1 ? (digital_out = ioports_count(type, dir)) : (uint8_t)digital_out;
 801218a:	4b1c      	ldr	r3, [pc, #112]	@ (80121fc <ioports_available+0xb0>)
 801218c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012194:	d001      	beq.n	801219a <ioports_available+0x4e>
 8012196:	b2d8      	uxtb	r0, r3
 8012198:	e7e8      	b.n	801216c <ioports_available+0x20>
 801219a:	f7ff ff6b 	bl	8012074 <ioports_count>
 801219e:	4b17      	ldr	r3, [pc, #92]	@ (80121fc <ioports_available+0xb0>)
 80121a0:	8018      	strh	r0, [r3, #0]
 80121a2:	e7e3      	b.n	801216c <ioports_available+0x20>
                ports = analog_in == -1 ? (analog_in = ioports_count(type, dir)) : (uint8_t)analog_in;
 80121a4:	f7ff ff66 	bl	8012074 <ioports_count>
 80121a8:	4b12      	ldr	r3, [pc, #72]	@ (80121f4 <ioports_available+0xa8>)
 80121aa:	8018      	strh	r0, [r3, #0]
 80121ac:	e7de      	b.n	801216c <ioports_available+0x20>
                ports = analog_out == -1 ? (analog_out = ioports_count(type, dir)) : (uint8_t)analog_out;
 80121ae:	4b14      	ldr	r3, [pc, #80]	@ (8012200 <ioports_available+0xb4>)
 80121b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80121b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121b8:	d001      	beq.n	80121be <ioports_available+0x72>
 80121ba:	b2d8      	uxtb	r0, r3
 80121bc:	e7d6      	b.n	801216c <ioports_available+0x20>
 80121be:	f7ff ff59 	bl	8012074 <ioports_count>
 80121c2:	4b0f      	ldr	r3, [pc, #60]	@ (8012200 <ioports_available+0xb4>)
 80121c4:	8018      	strh	r0, [r3, #0]
 80121c6:	e7d1      	b.n	801216c <ioports_available+0x20>
        if(type == Port_Digital)
 80121c8:	2801      	cmp	r0, #1
 80121ca:	d004      	beq.n	80121d6 <ioports_available+0x8a>
            ports = dir == Port_Input ? hal.port.num_analog_in : hal.port.num_analog_out;
 80121cc:	b961      	cbnz	r1, 80121e8 <ioports_available+0x9c>
 80121ce:	4b08      	ldr	r3, [pc, #32]	@ (80121f0 <ioports_available+0xa4>)
 80121d0:	f893 0116 	ldrb.w	r0, [r3, #278]	@ 0x116
 80121d4:	e7ca      	b.n	801216c <ioports_available+0x20>
            ports = dir == Port_Input ? hal.port.num_digital_in : hal.port.num_digital_out;
 80121d6:	b919      	cbnz	r1, 80121e0 <ioports_available+0x94>
 80121d8:	4b05      	ldr	r3, [pc, #20]	@ (80121f0 <ioports_available+0xa4>)
 80121da:	f893 0114 	ldrb.w	r0, [r3, #276]	@ 0x114
 80121de:	e7c5      	b.n	801216c <ioports_available+0x20>
 80121e0:	4b03      	ldr	r3, [pc, #12]	@ (80121f0 <ioports_available+0xa4>)
 80121e2:	f893 0115 	ldrb.w	r0, [r3, #277]	@ 0x115
 80121e6:	e7c1      	b.n	801216c <ioports_available+0x20>
            ports = dir == Port_Input ? hal.port.num_analog_in : hal.port.num_analog_out;
 80121e8:	4b01      	ldr	r3, [pc, #4]	@ (80121f0 <ioports_available+0xa4>)
 80121ea:	f893 0117 	ldrb.w	r0, [r3, #279]	@ 0x117
 80121ee:	e7bd      	b.n	801216c <ioports_available+0x20>
 80121f0:	200018dc 	.word	0x200018dc
 80121f4:	2000020e 	.word	0x2000020e
 80121f8:	20000212 	.word	0x20000212
 80121fc:	20000210 	.word	0x20000210
 8012200:	2000020c 	.word	0x2000020c

08012204 <ioports_add>:
{
 8012204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012208:	4605      	mov	r5, r0
 801220a:	4689      	mov	r9, r1
 801220c:	461c      	mov	r4, r3
    ports->get_pnum = get_pnum;
 801220e:	4b81      	ldr	r3, [pc, #516]	@ (8012414 <ioports_add+0x210>)
 8012210:	6143      	str	r3, [r0, #20]
    if(type == Port_Digital) {
 8012212:	2901      	cmp	r1, #1
 8012214:	d017      	beq.n	8012246 <ioports_add+0x42>
        analog_in = analog_out = -1;
 8012216:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801221a:	497f      	ldr	r1, [pc, #508]	@ (8012418 <ioports_add+0x214>)
 801221c:	800b      	strh	r3, [r1, #0]
 801221e:	497f      	ldr	r1, [pc, #508]	@ (801241c <ioports_add+0x218>)
 8012220:	800b      	strh	r3, [r1, #0]
        if(n_in) {
 8012222:	2a00      	cmp	r2, #0
 8012224:	d140      	bne.n	80122a8 <ioports_add+0xa4>
        if(n_out) {
 8012226:	2c00      	cmp	r4, #0
 8012228:	d150      	bne.n	80122cc <ioports_add+0xc8>
        cfg = &analog;
 801222a:	f8df a204 	ldr.w	sl, [pc, #516]	@ 8012430 <ioports_add+0x22c>
    if((n_ports = max(ports->in.n_ports, ports->out.n_ports)) > 0)  {
 801222e:	7b2f      	ldrb	r7, [r5, #12]
 8012230:	792b      	ldrb	r3, [r5, #4]
 8012232:	429f      	cmp	r7, r3
 8012234:	bf38      	it	cc
 8012236:	461f      	movcc	r7, r3
 8012238:	2f00      	cmp	r7, #0
 801223a:	d15b      	bne.n	80122f4 <ioports_add+0xf0>
}
 801223c:	1e38      	subs	r0, r7, #0
 801223e:	bf18      	it	ne
 8012240:	2001      	movne	r0, #1
 8012242:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        digital_in = digital_out = -1;
 8012246:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801224a:	4975      	ldr	r1, [pc, #468]	@ (8012420 <ioports_add+0x21c>)
 801224c:	800b      	strh	r3, [r1, #0]
 801224e:	4975      	ldr	r1, [pc, #468]	@ (8012424 <ioports_add+0x220>)
 8012250:	800b      	strh	r3, [r1, #0]
        if(n_in) {
 8012252:	b91a      	cbnz	r2, 801225c <ioports_add+0x58>
        if(n_out) {
 8012254:	b9a4      	cbnz	r4, 8012280 <ioports_add+0x7c>
        cfg = &digital;
 8012256:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 801242c <ioports_add+0x228>
 801225a:	e7e8      	b.n	801222e <ioports_add+0x2a>
            ports->in.n_start = hal.port.num_digital_in;
 801225c:	4b72      	ldr	r3, [pc, #456]	@ (8012428 <ioports_add+0x224>)
 801225e:	f893 1114 	ldrb.w	r1, [r3, #276]	@ 0x114
 8012262:	7141      	strb	r1, [r0, #5]
            hal.port.num_digital_in += (ports->in.n_ports = n_in);
 8012264:	7102      	strb	r2, [r0, #4]
 8012266:	f893 1114 	ldrb.w	r1, [r3, #276]	@ 0x114
 801226a:	440a      	add	r2, r1
 801226c:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            ports->in.map = malloc(ports->in.n_ports * sizeof(ports->in.n_ports));
 8012270:	7900      	ldrb	r0, [r0, #4]
 8012272:	f010 fd91 	bl	8022d98 <malloc>
 8012276:	60a8      	str	r0, [r5, #8]
            digital.in.ports = &ports->in;
 8012278:	1d2b      	adds	r3, r5, #4
 801227a:	4a6c      	ldr	r2, [pc, #432]	@ (801242c <ioports_add+0x228>)
 801227c:	6013      	str	r3, [r2, #0]
 801227e:	e7e9      	b.n	8012254 <ioports_add+0x50>
            ports->out.n_start = hal.port.num_digital_out;
 8012280:	4b69      	ldr	r3, [pc, #420]	@ (8012428 <ioports_add+0x224>)
 8012282:	f893 2115 	ldrb.w	r2, [r3, #277]	@ 0x115
 8012286:	736a      	strb	r2, [r5, #13]
            hal.port.num_digital_out += (ports->out.n_ports = n_out);
 8012288:	732c      	strb	r4, [r5, #12]
 801228a:	f893 2115 	ldrb.w	r2, [r3, #277]	@ 0x115
 801228e:	4422      	add	r2, r4
 8012290:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
            ports->out.map = malloc(ports->out.n_ports * sizeof(ports->out.n_ports));
 8012294:	7b28      	ldrb	r0, [r5, #12]
 8012296:	f010 fd7f 	bl	8022d98 <malloc>
 801229a:	6128      	str	r0, [r5, #16]
            digital.out.ports = &ports->out;
 801229c:	f105 030c 	add.w	r3, r5, #12
 80122a0:	4a62      	ldr	r2, [pc, #392]	@ (801242c <ioports_add+0x228>)
 80122a2:	6393      	str	r3, [r2, #56]	@ 0x38
        cfg = &digital;
 80122a4:	4692      	mov	sl, r2
 80122a6:	e7c2      	b.n	801222e <ioports_add+0x2a>
            ports->in.n_start = hal.port.num_analog_in;
 80122a8:	4b5f      	ldr	r3, [pc, #380]	@ (8012428 <ioports_add+0x224>)
 80122aa:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
 80122ae:	7141      	strb	r1, [r0, #5]
            hal.port.num_analog_in += (ports->in.n_ports = n_in);
 80122b0:	7102      	strb	r2, [r0, #4]
 80122b2:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
 80122b6:	440a      	add	r2, r1
 80122b8:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
            ports->in.map = malloc(ports->in.n_ports * sizeof(ports->in.n_ports));
 80122bc:	7900      	ldrb	r0, [r0, #4]
 80122be:	f010 fd6b 	bl	8022d98 <malloc>
 80122c2:	60a8      	str	r0, [r5, #8]
            analog.in.ports = &ports->in;
 80122c4:	1d2b      	adds	r3, r5, #4
 80122c6:	4a5a      	ldr	r2, [pc, #360]	@ (8012430 <ioports_add+0x22c>)
 80122c8:	6013      	str	r3, [r2, #0]
 80122ca:	e7ac      	b.n	8012226 <ioports_add+0x22>
            ports->out.n_start = hal.port.num_analog_out;
 80122cc:	4b56      	ldr	r3, [pc, #344]	@ (8012428 <ioports_add+0x224>)
 80122ce:	f893 2117 	ldrb.w	r2, [r3, #279]	@ 0x117
 80122d2:	736a      	strb	r2, [r5, #13]
            hal.port.num_analog_out += (ports->out.n_ports = n_out);
 80122d4:	732c      	strb	r4, [r5, #12]
 80122d6:	f893 2117 	ldrb.w	r2, [r3, #279]	@ 0x117
 80122da:	4422      	add	r2, r4
 80122dc:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
            ports->out.map = malloc(ports->out.n_ports * sizeof(ports->out.n_ports));
 80122e0:	7b28      	ldrb	r0, [r5, #12]
 80122e2:	f010 fd59 	bl	8022d98 <malloc>
 80122e6:	6128      	str	r0, [r5, #16]
            analog.out.ports = &ports->out;
 80122e8:	f105 030c 	add.w	r3, r5, #12
 80122ec:	4a50      	ldr	r2, [pc, #320]	@ (8012430 <ioports_add+0x22c>)
 80122ee:	6393      	str	r3, [r2, #56]	@ 0x38
        cfg = &analog;
 80122f0:	4692      	mov	sl, r2
 80122f2:	e79c      	b.n	801222e <ioports_add+0x2a>
        if((ports->pnum = pn = malloc((3 * n_ports + (n_ports > 9 ? n_ports - 10 : 0)) + 1)))
 80122f4:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 80122f8:	2f0a      	cmp	r7, #10
 80122fa:	bf2c      	ite	cs
 80122fc:	19c0      	addcs	r0, r0, r7
 80122fe:	300a      	addcc	r0, #10
 8012300:	3809      	subs	r0, #9
 8012302:	f010 fd49 	bl	8022d98 <malloc>
 8012306:	4606      	mov	r6, r0
 8012308:	6028      	str	r0, [r5, #0]
 801230a:	2800      	cmp	r0, #0
 801230c:	d096      	beq.n	801223c <ioports_add+0x38>
          for(i = 0; i < n_ports; i++) {
 801230e:	2400      	movs	r4, #0
 8012310:	e02a      	b.n	8012368 <ioports_add+0x164>
                *pn = type == Port_Digital ? 'P' : 'E';
 8012312:	2350      	movs	r3, #80	@ 0x50
 8012314:	e030      	b.n	8012378 <ioports_add+0x174>
                    cfg->inx.mask = (cfg->inx.mask << 1) + 1;
 8012316:	f89a 3070 	ldrb.w	r3, [sl, #112]	@ 0x70
 801231a:	005b      	lsls	r3, r3, #1
 801231c:	b2db      	uxtb	r3, r3
 801231e:	3301      	adds	r3, #1
 8012320:	f88a 3070 	strb.w	r3, [sl, #112]	@ 0x70
                    strcat(cfg->in.port_names, i == 0 ? "Aux " : ",Aux ");
 8012324:	f10a 0804 	add.w	r8, sl, #4
 8012328:	b15c      	cbz	r4, 8012342 <ioports_add+0x13e>
 801232a:	4942      	ldr	r1, [pc, #264]	@ (8012434 <ioports_add+0x230>)
 801232c:	4640      	mov	r0, r8
 801232e:	f012 fe02 	bl	8024f36 <strcat>
                    strcat(cfg->in.port_names, uitoa(i));
 8012332:	4620      	mov	r0, r4
 8012334:	f003 fc24 	bl	8015b80 <uitoa>
 8012338:	4601      	mov	r1, r0
 801233a:	4640      	mov	r0, r8
 801233c:	f012 fdfb 	bl	8024f36 <strcat>
 8012340:	e03e      	b.n	80123c0 <ioports_add+0x1bc>
                    strcat(cfg->in.port_names, i == 0 ? "Aux " : ",Aux ");
 8012342:	493d      	ldr	r1, [pc, #244]	@ (8012438 <ioports_add+0x234>)
 8012344:	e7f2      	b.n	801232c <ioports_add+0x128>
                    strcat(cfg->out.port_names, i == 0 ? "Aux " : ",Aux ");
 8012346:	493c      	ldr	r1, [pc, #240]	@ (8012438 <ioports_add+0x234>)
 8012348:	4640      	mov	r0, r8
 801234a:	f012 fdf4 	bl	8024f36 <strcat>
                    strcat(cfg->out.port_names, uitoa(i));
 801234e:	4620      	mov	r0, r4
 8012350:	f003 fc16 	bl	8015b80 <uitoa>
 8012354:	4601      	mov	r1, r0
 8012356:	4640      	mov	r0, r8
 8012358:	f012 fded 	bl	8024f36 <strcat>
            if(pn)
 801235c:	b11e      	cbz	r6, 8012366 <ioports_add+0x162>
                pn += i > 9 ? 4 : 3;
 801235e:	2c09      	cmp	r4, #9
 8012360:	d956      	bls.n	8012410 <ioports_add+0x20c>
 8012362:	2304      	movs	r3, #4
 8012364:	441e      	add	r6, r3
          for(i = 0; i < n_ports; i++) {
 8012366:	3401      	adds	r4, #1
 8012368:	42bc      	cmp	r4, r7
 801236a:	f4bf af67 	bcs.w	801223c <ioports_add+0x38>
            if(pn) {
 801236e:	b16e      	cbz	r6, 801238c <ioports_add+0x188>
                *pn = type == Port_Digital ? 'P' : 'E';
 8012370:	f1b9 0f01 	cmp.w	r9, #1
 8012374:	d0cd      	beq.n	8012312 <ioports_add+0x10e>
 8012376:	2345      	movs	r3, #69	@ 0x45
 8012378:	46b0      	mov	r8, r6
 801237a:	f808 3b01 	strb.w	r3, [r8], #1
                strcpy(pn + 1, uitoa(i));
 801237e:	4620      	mov	r0, r4
 8012380:	f003 fbfe 	bl	8015b80 <uitoa>
 8012384:	4601      	mov	r1, r0
 8012386:	4640      	mov	r0, r8
 8012388:	f012 ff25 	bl	80251d6 <strcpy>
            if(ports->in.n_ports && i < ports->in.n_ports) {
 801238c:	792b      	ldrb	r3, [r5, #4]
 801238e:	b1bb      	cbz	r3, 80123c0 <ioports_add+0x1bc>
 8012390:	42a3      	cmp	r3, r4
 8012392:	d915      	bls.n	80123c0 <ioports_add+0x1bc>
                if(ports->in.map)
 8012394:	68ab      	ldr	r3, [r5, #8]
 8012396:	b103      	cbz	r3, 801239a <ioports_add+0x196>
                    ports->in.map[i] = i;
 8012398:	551c      	strb	r4, [r3, r4]
                if(hal.port.set_pin_description)
 801239a:	4b23      	ldr	r3, [pc, #140]	@ (8012428 <ioports_add+0x224>)
 801239c:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 80123a0:	f1b8 0f00 	cmp.w	r8, #0
 80123a4:	d00a      	beq.n	80123bc <ioports_add+0x1b8>
                    hal.port.set_pin_description(type, Port_Input, i, get_pnum(ports, i));
 80123a6:	fa5f fb84 	uxtb.w	fp, r4
 80123aa:	4659      	mov	r1, fp
 80123ac:	4628      	mov	r0, r5
 80123ae:	f7ff fe79 	bl	80120a4 <get_pnum>
 80123b2:	4603      	mov	r3, r0
 80123b4:	465a      	mov	r2, fp
 80123b6:	2100      	movs	r1, #0
 80123b8:	4648      	mov	r0, r9
 80123ba:	47c0      	blx	r8
                if(i < 8) {
 80123bc:	2c07      	cmp	r4, #7
 80123be:	d9aa      	bls.n	8012316 <ioports_add+0x112>
            if(ports->out.n_ports && i < ports->out.n_ports) {
 80123c0:	7b2b      	ldrb	r3, [r5, #12]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d0ca      	beq.n	801235c <ioports_add+0x158>
 80123c6:	42a3      	cmp	r3, r4
 80123c8:	d9c8      	bls.n	801235c <ioports_add+0x158>
                if(ports->out.map)
 80123ca:	692b      	ldr	r3, [r5, #16]
 80123cc:	b103      	cbz	r3, 80123d0 <ioports_add+0x1cc>
                    ports->out.map[i] = i;
 80123ce:	551c      	strb	r4, [r3, r4]
                if(hal.port.set_pin_description)
 80123d0:	4b15      	ldr	r3, [pc, #84]	@ (8012428 <ioports_add+0x224>)
 80123d2:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 80123d6:	f1b8 0f00 	cmp.w	r8, #0
 80123da:	d00a      	beq.n	80123f2 <ioports_add+0x1ee>
                    hal.port.set_pin_description(type, Port_Output, i, get_pnum(ports, i));
 80123dc:	fa5f fb84 	uxtb.w	fp, r4
 80123e0:	4659      	mov	r1, fp
 80123e2:	4628      	mov	r0, r5
 80123e4:	f7ff fe5e 	bl	80120a4 <get_pnum>
 80123e8:	4603      	mov	r3, r0
 80123ea:	465a      	mov	r2, fp
 80123ec:	2101      	movs	r1, #1
 80123ee:	4648      	mov	r0, r9
 80123f0:	47c0      	blx	r8
                if(i < 8) {
 80123f2:	2c07      	cmp	r4, #7
 80123f4:	d8b2      	bhi.n	801235c <ioports_add+0x158>
                    cfg->outx.mask = (cfg->outx.mask << 1) + 1;
 80123f6:	f89a 3071 	ldrb.w	r3, [sl, #113]	@ 0x71
 80123fa:	005b      	lsls	r3, r3, #1
 80123fc:	b2db      	uxtb	r3, r3
 80123fe:	3301      	adds	r3, #1
 8012400:	f88a 3071 	strb.w	r3, [sl, #113]	@ 0x71
                    strcat(cfg->out.port_names, i == 0 ? "Aux " : ",Aux ");
 8012404:	f10a 083c 	add.w	r8, sl, #60	@ 0x3c
 8012408:	2c00      	cmp	r4, #0
 801240a:	d09c      	beq.n	8012346 <ioports_add+0x142>
 801240c:	4909      	ldr	r1, [pc, #36]	@ (8012434 <ioports_add+0x230>)
 801240e:	e79b      	b.n	8012348 <ioports_add+0x144>
                pn += i > 9 ? 4 : 3;
 8012410:	2303      	movs	r3, #3
 8012412:	e7a7      	b.n	8012364 <ioports_add+0x160>
 8012414:	080120a5 	.word	0x080120a5
 8012418:	2000020c 	.word	0x2000020c
 801241c:	2000020e 	.word	0x2000020e
 8012420:	20000210 	.word	0x20000210
 8012424:	20000212 	.word	0x20000212
 8012428:	200018dc 	.word	0x200018dc
 801242c:	20001c54 	.word	0x20001c54
 8012430:	20001cc8 	.word	0x20001cc8
 8012434:	0802b6c4 	.word	0x0802b6c4
 8012438:	0802b6bc 	.word	0x0802b6bc

0801243c <ioports_map_reverse>:
{
 801243c:	4603      	mov	r3, r0
 801243e:	4608      	mov	r0, r1
    if(type->map) {
 8012440:	6859      	ldr	r1, [r3, #4]
 8012442:	b131      	cbz	r1, 8012452 <ioports_map_reverse+0x16>
        uint_fast8_t idx = type->n_ports;
 8012444:	781b      	ldrb	r3, [r3, #0]
            if(type->map[--idx] == port) {
 8012446:	3b01      	subs	r3, #1
 8012448:	5cca      	ldrb	r2, [r1, r3]
 801244a:	4282      	cmp	r2, r0
 801244c:	d002      	beq.n	8012454 <ioports_map_reverse+0x18>
        } while(idx);
 801244e:	2b00      	cmp	r3, #0
 8012450:	d1f9      	bne.n	8012446 <ioports_map_reverse+0xa>
}
 8012452:	4770      	bx	lr
                port = idx;
 8012454:	b2d8      	uxtb	r0, r3
                break;
 8012456:	4770      	bx	lr

08012458 <ioport_settings_load>:
};

#endif

static void ioport_settings_load (void)
{
 8012458:	b530      	push	{r4, r5, lr}
 801245a:	b083      	sub	sp, #12
    uint8_t port;
    xbar_t *xbar;
    gpio_in_config_t in_config = {0};
 801245c:	2300      	movs	r3, #0
 801245e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012462:	f88d 3006 	strb.w	r3, [sp, #6]
    gpio_out_config_t out_config = {0};
 8012466:	f8ad 3000 	strh.w	r3, [sp]
 801246a:	f88d 3002 	strb.w	r3, [sp, #2]

    settings.ioport.invert_in.mask &= digital.inx.mask;
 801246e:	4b5e      	ldr	r3, [pc, #376]	@ (80125e8 <ioport_settings_load+0x190>)
 8012470:	f893 0168 	ldrb.w	r0, [r3, #360]	@ 0x168
 8012474:	495d      	ldr	r1, [pc, #372]	@ (80125ec <ioport_settings_load+0x194>)
 8012476:	f891 2070 	ldrb.w	r2, [r1, #112]	@ 0x70
 801247a:	4010      	ands	r0, r2
 801247c:	f883 0168 	strb.w	r0, [r3, #360]	@ 0x168
    settings.ioport.pullup_disable_in.mask &= digital.inx.mask;
 8012480:	f893 0169 	ldrb.w	r0, [r3, #361]	@ 0x169
 8012484:	4002      	ands	r2, r0
 8012486:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
    settings.ioport.invert_out.mask &= digital.outx.mask;
 801248a:	f893 016a 	ldrb.w	r0, [r3, #362]	@ 0x16a
 801248e:	f891 2071 	ldrb.w	r2, [r1, #113]	@ 0x71
 8012492:	4010      	ands	r0, r2
 8012494:	f883 016a 	strb.w	r0, [r3, #362]	@ 0x16a
    settings.ioport.od_enable_out.mask &= digital.outx.mask;
 8012498:	f893 016b 	ldrb.w	r0, [r3, #363]	@ 0x16b
 801249c:	4002      	ands	r2, r0
 801249e:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b

    if(digital.in.ports && (port = digital.in.ports->n_ports)) do {
 80124a2:	680b      	ldr	r3, [r1, #0]
 80124a4:	b10b      	cbz	r3, 80124aa <ioport_settings_load+0x52>
 80124a6:	781c      	ldrb	r4, [r3, #0]
 80124a8:	bb34      	cbnz	r4, 80124f8 <ioport_settings_load+0xa0>
                xbar->config(xbar, &in_config, false);
            }
        }
    } while(port);

    if(digital.out.ports && (port = digital.out.ports->n_ports)) do {
 80124aa:	4b50      	ldr	r3, [pc, #320]	@ (80125ec <ioport_settings_load+0x194>)
 80124ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124ae:	b113      	cbz	r3, 80124b6 <ioport_settings_load+0x5e>
 80124b0:	781c      	ldrb	r4, [r3, #0]
 80124b2:	2c00      	cmp	r4, #0
 80124b4:	d169      	bne.n	801258a <ioport_settings_load+0x132>
                xbar->config(xbar, &out_config, false);
            }
        }
    } while(port);

    if(on_settings_loaded)
 80124b6:	4b4e      	ldr	r3, [pc, #312]	@ (80125f0 <ioport_settings_load+0x198>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	b103      	cbz	r3, 80124be <ioport_settings_load+0x66>
        on_settings_loaded();
 80124bc:	4798      	blx	r3
}
 80124be:	b003      	add	sp, #12
 80124c0:	bd30      	pop	{r4, r5, pc}
                    in_config.inverted = settings.probe.invert_probe_pin;
 80124c2:	4b49      	ldr	r3, [pc, #292]	@ (80125e8 <ioport_settings_load+0x190>)
 80124c4:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 80124c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80124cc:	f88d 3004 	strb.w	r3, [sp, #4]
                if(in_config.inverted)
 80124d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d04a      	beq.n	801256e <ioport_settings_load+0x116>
                    settings.ioport.invert_in.mask |= (1 << xbar->id);
 80124d8:	4943      	ldr	r1, [pc, #268]	@ (80125e8 <ioport_settings_load+0x190>)
 80124da:	f891 3168 	ldrb.w	r3, [r1, #360]	@ 0x168
 80124de:	7828      	ldrb	r0, [r5, #0]
 80124e0:	2201      	movs	r2, #1
 80124e2:	4082      	lsls	r2, r0
 80124e4:	4313      	orrs	r3, r2
 80124e6:	f881 3168 	strb.w	r3, [r1, #360]	@ 0x168
                xbar->config(xbar, &in_config, false);
 80124ea:	69ab      	ldr	r3, [r5, #24]
 80124ec:	2200      	movs	r2, #0
 80124ee:	a901      	add	r1, sp, #4
 80124f0:	4628      	mov	r0, r5
 80124f2:	4798      	blx	r3
    } while(port);
 80124f4:	2c00      	cmp	r4, #0
 80124f6:	d0d8      	beq.n	80124aa <ioport_settings_load+0x52>
        if((xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, --port)))) {
 80124f8:	4b3e      	ldr	r3, [pc, #248]	@ (80125f4 <ioport_settings_load+0x19c>)
 80124fa:	f8d3 5128 	ldr.w	r5, [r3, #296]	@ 0x128
 80124fe:	3c01      	subs	r4, #1
 8012500:	b2e4      	uxtb	r4, r4
 8012502:	4621      	mov	r1, r4
 8012504:	4b39      	ldr	r3, [pc, #228]	@ (80125ec <ioport_settings_load+0x194>)
 8012506:	6818      	ldr	r0, [r3, #0]
 8012508:	f7ff ff98 	bl	801243c <ioports_map_reverse>
 801250c:	4602      	mov	r2, r0
 801250e:	2100      	movs	r1, #0
 8012510:	2001      	movs	r0, #1
 8012512:	47a8      	blx	r5
 8012514:	4605      	mov	r5, r0
 8012516:	2800      	cmp	r0, #0
 8012518:	d0ec      	beq.n	80124f4 <ioport_settings_load+0x9c>
            if(xbar->config) {
 801251a:	6983      	ldr	r3, [r0, #24]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d0e9      	beq.n	80124f4 <ioport_settings_load+0x9c>
                in_config.debounce = xbar->mode.debounce;
 8012520:	7dc3      	ldrb	r3, [r0, #23]
 8012522:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012526:	f88d 3005 	strb.w	r3, [sp, #5]
                in_config.pull_mode = (pull_mode_t)xbar->mode.pull_mode;
 801252a:	7d83      	ldrb	r3, [r0, #22]
 801252c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8012530:	f88d 3006 	strb.w	r3, [sp, #6]
                in_config.inverted = !!(settings.ioport.invert_in.mask & (1 << xbar->id));
 8012534:	4b2c      	ldr	r3, [pc, #176]	@ (80125e8 <ioport_settings_load+0x190>)
 8012536:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 801253a:	7802      	ldrb	r2, [r0, #0]
 801253c:	4113      	asrs	r3, r2
 801253e:	f003 0301 	and.w	r3, r3, #1
 8012542:	f88d 3004 	strb.w	r3, [sp, #4]
                if(xbar->function == Input_Probe)
 8012546:	7840      	ldrb	r0, [r0, #1]
 8012548:	280e      	cmp	r0, #14
 801254a:	d0ba      	beq.n	80124c2 <ioport_settings_load+0x6a>
                else if(xbar->function < Input_Probe) {
 801254c:	280d      	cmp	r0, #13
 801254e:	d8bf      	bhi.n	80124d0 <ioport_settings_load+0x78>
                    if((ctrl = xbar_fn_to_signals_mask(xbar->function)).mask)
 8012550:	f7fa feb8 	bl	800d2c4 <xbar_fn_to_signals_mask>
 8012554:	b280      	uxth	r0, r0
 8012556:	2800      	cmp	r0, #0
 8012558:	d0ba      	beq.n	80124d0 <ioport_settings_load+0x78>
                        in_config.inverted = !!(settings.control_invert.mask & ctrl.mask);
 801255a:	4b23      	ldr	r3, [pc, #140]	@ (80125e8 <ioport_settings_load+0x190>)
 801255c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8012560:	4218      	tst	r0, r3
 8012562:	bf14      	ite	ne
 8012564:	2301      	movne	r3, #1
 8012566:	2300      	moveq	r3, #0
 8012568:	f88d 3004 	strb.w	r3, [sp, #4]
 801256c:	e7b0      	b.n	80124d0 <ioport_settings_load+0x78>
                    settings.ioport.invert_in.mask &= ~(1 << xbar->id);
 801256e:	491e      	ldr	r1, [pc, #120]	@ (80125e8 <ioport_settings_load+0x190>)
 8012570:	f891 2168 	ldrb.w	r2, [r1, #360]	@ 0x168
 8012574:	7828      	ldrb	r0, [r5, #0]
 8012576:	2301      	movs	r3, #1
 8012578:	4083      	lsls	r3, r0
 801257a:	43db      	mvns	r3, r3
 801257c:	b25b      	sxtb	r3, r3
 801257e:	4013      	ands	r3, r2
 8012580:	f881 3168 	strb.w	r3, [r1, #360]	@ 0x168
 8012584:	e7b1      	b.n	80124ea <ioport_settings_load+0x92>
    } while(port);
 8012586:	2c00      	cmp	r4, #0
 8012588:	d095      	beq.n	80124b6 <ioport_settings_load+0x5e>
        if((xbar = hal.port.get_pin_info(Port_Digital, Port_Output, ioports_map_reverse(digital.out.ports, --port)))) {
 801258a:	4b1a      	ldr	r3, [pc, #104]	@ (80125f4 <ioport_settings_load+0x19c>)
 801258c:	f8d3 5128 	ldr.w	r5, [r3, #296]	@ 0x128
 8012590:	3c01      	subs	r4, #1
 8012592:	b2e4      	uxtb	r4, r4
 8012594:	4621      	mov	r1, r4
 8012596:	4b15      	ldr	r3, [pc, #84]	@ (80125ec <ioport_settings_load+0x194>)
 8012598:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801259a:	f7ff ff4f 	bl	801243c <ioports_map_reverse>
 801259e:	4602      	mov	r2, r0
 80125a0:	2101      	movs	r1, #1
 80125a2:	4608      	mov	r0, r1
 80125a4:	47a8      	blx	r5
 80125a6:	4603      	mov	r3, r0
 80125a8:	2800      	cmp	r0, #0
 80125aa:	d0ec      	beq.n	8012586 <ioport_settings_load+0x12e>
            if(xbar->config && !(xbar->mode.pwm || xbar->mode.servo_pwm)) {
 80125ac:	6985      	ldr	r5, [r0, #24]
 80125ae:	2d00      	cmp	r5, #0
 80125b0:	d0e9      	beq.n	8012586 <ioport_settings_load+0x12e>
 80125b2:	7dc2      	ldrb	r2, [r0, #23]
 80125b4:	f012 0f30 	tst.w	r2, #48	@ 0x30
 80125b8:	d1e5      	bne.n	8012586 <ioport_settings_load+0x12e>
                out_config.inverted = !!(settings.ioport.invert_out.mask & (1 << xbar->id));
 80125ba:	490b      	ldr	r1, [pc, #44]	@ (80125e8 <ioport_settings_load+0x190>)
 80125bc:	f891 216a 	ldrb.w	r2, [r1, #362]	@ 0x16a
 80125c0:	7800      	ldrb	r0, [r0, #0]
 80125c2:	4102      	asrs	r2, r0
 80125c4:	f002 0201 	and.w	r2, r2, #1
 80125c8:	f88d 2000 	strb.w	r2, [sp]
                out_config.open_drain = !!(settings.ioport.od_enable_out.mask & (1 << xbar->id));
 80125cc:	f891 216b 	ldrb.w	r2, [r1, #363]	@ 0x16b
 80125d0:	7819      	ldrb	r1, [r3, #0]
 80125d2:	410a      	asrs	r2, r1
 80125d4:	f002 0201 	and.w	r2, r2, #1
 80125d8:	f88d 2001 	strb.w	r2, [sp, #1]
                xbar->config(xbar, &out_config, false);
 80125dc:	2200      	movs	r2, #0
 80125de:	4669      	mov	r1, sp
 80125e0:	4618      	mov	r0, r3
 80125e2:	47a8      	blx	r5
 80125e4:	e7cf      	b.n	8012586 <ioport_settings_load+0x12e>
 80125e6:	bf00      	nop
 80125e8:	200022f4 	.word	0x200022f4
 80125ec:	20001c54 	.word	0x20001c54
 80125f0:	20001d40 	.word	0x20001d40
 80125f4:	200018dc 	.word	0x200018dc

080125f8 <aux_set_value>:
{
 80125f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125fc:	b082      	sub	sp, #8
 80125fe:	4605      	mov	r5, r0
    switch(id) {
 8012600:	f5a0 73b9 	sub.w	r3, r0, #370	@ 0x172
 8012604:	2b03      	cmp	r3, #3
 8012606:	d84b      	bhi.n	80126a0 <aux_set_value+0xa8>
 8012608:	e8df f013 	tbh	[pc, r3, lsl #1]
 801260c:	004e0004 	.word	0x004e0004
 8012610:	00ea009d 	.word	0x00ea009d
            change.mask = (uint8_t)value & digital.inx.mask;
 8012614:	4b99      	ldr	r3, [pc, #612]	@ (801287c <aux_set_value+0x284>)
 8012616:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 801261a:	ea01 0403 	and.w	r4, r1, r3
            if((changed.mask = settings.ioport.invert_in.mask ^ change.mask)) {
 801261e:	4b98      	ldr	r3, [pc, #608]	@ (8012880 <aux_set_value+0x288>)
 8012620:	f893 2168 	ldrb.w	r2, [r3, #360]	@ 0x168
 8012624:	ea84 0302 	eor.w	r3, r4, r2
 8012628:	4294      	cmp	r4, r2
 801262a:	d031      	beq.n	8012690 <aux_set_value+0x98>
                gpio_in_config_t config = {0};
 801262c:	2600      	movs	r6, #0
 801262e:	f8ad 6004 	strh.w	r6, [sp, #4]
 8012632:	f88d 6006 	strb.w	r6, [sp, #6]
 8012636:	e004      	b.n	8012642 <aux_set_value+0x4a>
                    port++;
 8012638:	3601      	adds	r6, #1
 801263a:	b2f6      	uxtb	r6, r6
                } while(changed.mask >>= 1);
 801263c:	087f      	lsrs	r7, r7, #1
 801263e:	463b      	mov	r3, r7
 8012640:	b337      	cbz	r7, 8012690 <aux_set_value+0x98>
                    if((changed.mask & 0x01) && (xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, port)))) {
 8012642:	b2df      	uxtb	r7, r3
 8012644:	f013 0f01 	tst.w	r3, #1
 8012648:	d0f6      	beq.n	8012638 <aux_set_value+0x40>
 801264a:	4b8e      	ldr	r3, [pc, #568]	@ (8012884 <aux_set_value+0x28c>)
 801264c:	f8d3 8128 	ldr.w	r8, [r3, #296]	@ 0x128
 8012650:	4631      	mov	r1, r6
 8012652:	4b8a      	ldr	r3, [pc, #552]	@ (801287c <aux_set_value+0x284>)
 8012654:	6818      	ldr	r0, [r3, #0]
 8012656:	f7ff fef1 	bl	801243c <ioports_map_reverse>
 801265a:	4602      	mov	r2, r0
 801265c:	2100      	movs	r1, #0
 801265e:	2001      	movs	r0, #1
 8012660:	47c0      	blx	r8
 8012662:	2800      	cmp	r0, #0
 8012664:	d0e8      	beq.n	8012638 <aux_set_value+0x40>
                        if(xbar->config) {
 8012666:	f8d0 8018 	ldr.w	r8, [r0, #24]
 801266a:	f1b8 0f00 	cmp.w	r8, #0
 801266e:	d0e3      	beq.n	8012638 <aux_set_value+0x40>
                            config.pull_mode = (pull_mode_t)xbar->mode.pull_mode;
 8012670:	7d82      	ldrb	r2, [r0, #22]
 8012672:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8012676:	f88d 2006 	strb.w	r2, [sp, #6]
                            config.inverted = !!(change.mask & (1 << xbar->id));
 801267a:	7802      	ldrb	r2, [r0, #0]
 801267c:	fa44 f202 	asr.w	r2, r4, r2
 8012680:	f002 0201 	and.w	r2, r2, #1
 8012684:	f88d 2004 	strb.w	r2, [sp, #4]
                            xbar->config(xbar, &config, false);
 8012688:	2200      	movs	r2, #0
 801268a:	a901      	add	r1, sp, #4
 801268c:	47c0      	blx	r8
 801268e:	e7d3      	b.n	8012638 <aux_set_value+0x40>
            settings.ioport.invert_in.mask = change.mask;
 8012690:	4b7b      	ldr	r3, [pc, #492]	@ (8012880 <aux_set_value+0x288>)
 8012692:	f883 4168 	strb.w	r4, [r3, #360]	@ 0x168
            if(on_setting_changed)
 8012696:	4b7c      	ldr	r3, [pc, #496]	@ (8012888 <aux_set_value+0x290>)
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	b10b      	cbz	r3, 80126a0 <aux_set_value+0xa8>
                on_setting_changed(id);
 801269c:	4628      	mov	r0, r5
 801269e:	4798      	blx	r3
}
 80126a0:	2000      	movs	r0, #0
 80126a2:	b002      	add	sp, #8
 80126a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            change.mask = (uint8_t)value & digital.inx.mask;
 80126a8:	4b74      	ldr	r3, [pc, #464]	@ (801287c <aux_set_value+0x284>)
 80126aa:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80126ae:	ea01 0403 	and.w	r4, r1, r3
            if((changed.mask = settings.ioport.pullup_disable_in.mask ^ change.mask)) {
 80126b2:	4b73      	ldr	r3, [pc, #460]	@ (8012880 <aux_set_value+0x288>)
 80126b4:	f893 2169 	ldrb.w	r2, [r3, #361]	@ 0x169
 80126b8:	ea84 0302 	eor.w	r3, r4, r2
 80126bc:	4294      	cmp	r4, r2
 80126be:	d038      	beq.n	8012732 <aux_set_value+0x13a>
                gpio_in_config_t config = {0};
 80126c0:	2600      	movs	r6, #0
 80126c2:	f8ad 6004 	strh.w	r6, [sp, #4]
 80126c6:	f88d 6006 	strb.w	r6, [sp, #6]
 80126ca:	e012      	b.n	80126f2 <aux_set_value+0xfa>
                            config.pull_mode = change.mask & (1 << xbar->id)  ? PullMode_Down : PullMode_Up;
 80126cc:	2201      	movs	r2, #1
 80126ce:	f88d 2006 	strb.w	r2, [sp, #6]
                            config.inverted = xbar->mode.inverted;
 80126d2:	7dda      	ldrb	r2, [r3, #23]
 80126d4:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80126d8:	f88d 2004 	strb.w	r2, [sp, #4]
                            config.debounce = xbar->mode.inverted;
 80126dc:	f88d 2005 	strb.w	r2, [sp, #5]
                            xbar->config(xbar, &config, false);
 80126e0:	2200      	movs	r2, #0
 80126e2:	a901      	add	r1, sp, #4
 80126e4:	4618      	mov	r0, r3
 80126e6:	47c0      	blx	r8
                    port++;
 80126e8:	3601      	adds	r6, #1
 80126ea:	b2f6      	uxtb	r6, r6
                } while(changed.mask >>= 1);
 80126ec:	087f      	lsrs	r7, r7, #1
 80126ee:	463b      	mov	r3, r7
 80126f0:	b1ff      	cbz	r7, 8012732 <aux_set_value+0x13a>
                    if((changed.mask & 0x01) && (xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, port)))) {
 80126f2:	b2df      	uxtb	r7, r3
 80126f4:	f013 0f01 	tst.w	r3, #1
 80126f8:	d0f6      	beq.n	80126e8 <aux_set_value+0xf0>
 80126fa:	4b62      	ldr	r3, [pc, #392]	@ (8012884 <aux_set_value+0x28c>)
 80126fc:	f8d3 8128 	ldr.w	r8, [r3, #296]	@ 0x128
 8012700:	4631      	mov	r1, r6
 8012702:	4b5e      	ldr	r3, [pc, #376]	@ (801287c <aux_set_value+0x284>)
 8012704:	6818      	ldr	r0, [r3, #0]
 8012706:	f7ff fe99 	bl	801243c <ioports_map_reverse>
 801270a:	4602      	mov	r2, r0
 801270c:	2100      	movs	r1, #0
 801270e:	2001      	movs	r0, #1
 8012710:	47c0      	blx	r8
 8012712:	4603      	mov	r3, r0
 8012714:	2800      	cmp	r0, #0
 8012716:	d0e7      	beq.n	80126e8 <aux_set_value+0xf0>
                        if(xbar->config) {
 8012718:	f8d0 8018 	ldr.w	r8, [r0, #24]
 801271c:	f1b8 0f00 	cmp.w	r8, #0
 8012720:	d0e2      	beq.n	80126e8 <aux_set_value+0xf0>
                            config.pull_mode = change.mask & (1 << xbar->id)  ? PullMode_Down : PullMode_Up;
 8012722:	7802      	ldrb	r2, [r0, #0]
 8012724:	fa44 f202 	asr.w	r2, r4, r2
 8012728:	f012 0f01 	tst.w	r2, #1
 801272c:	d0ce      	beq.n	80126cc <aux_set_value+0xd4>
 801272e:	2202      	movs	r2, #2
 8012730:	e7cd      	b.n	80126ce <aux_set_value+0xd6>
            settings.ioport.pullup_disable_in.mask = change.mask;
 8012732:	4b53      	ldr	r3, [pc, #332]	@ (8012880 <aux_set_value+0x288>)
 8012734:	f883 4169 	strb.w	r4, [r3, #361]	@ 0x169
            if(on_setting_changed)
 8012738:	4b53      	ldr	r3, [pc, #332]	@ (8012888 <aux_set_value+0x290>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d0af      	beq.n	80126a0 <aux_set_value+0xa8>
                on_setting_changed(id);
 8012740:	4628      	mov	r0, r5
 8012742:	4798      	blx	r3
 8012744:	e7ac      	b.n	80126a0 <aux_set_value+0xa8>
            change.mask = (uint8_t)value & digital.outx.mask;
 8012746:	4b4d      	ldr	r3, [pc, #308]	@ (801287c <aux_set_value+0x284>)
 8012748:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 801274c:	ea01 0403 	and.w	r4, r1, r3
            if((changed.mask = settings.ioport.invert_out.mask ^ change.mask)) {
 8012750:	4b4b      	ldr	r3, [pc, #300]	@ (8012880 <aux_set_value+0x288>)
 8012752:	f893 216a 	ldrb.w	r2, [r3, #362]	@ 0x16a
 8012756:	ea84 0302 	eor.w	r3, r4, r2
 801275a:	4294      	cmp	r4, r2
 801275c:	d0a0      	beq.n	80126a0 <aux_set_value+0xa8>
                gpio_out_config_t config = {0};
 801275e:	2600      	movs	r6, #0
 8012760:	f8ad 6004 	strh.w	r6, [sp, #4]
 8012764:	f88d 6006 	strb.w	r6, [sp, #6]
 8012768:	e004      	b.n	8012774 <aux_set_value+0x17c>
                    port++;
 801276a:	3601      	adds	r6, #1
 801276c:	b2f6      	uxtb	r6, r6
                } while(changed.mask >>= 1);
 801276e:	087f      	lsrs	r7, r7, #1
 8012770:	463b      	mov	r3, r7
 8012772:	b357      	cbz	r7, 80127ca <aux_set_value+0x1d2>
                    if((changed.mask & 0x01) && (xbar = hal.port.get_pin_info(Port_Digital, Port_Output, ioports_map_reverse(digital.out.ports, port)))) {
 8012774:	b2df      	uxtb	r7, r3
 8012776:	f013 0f01 	tst.w	r3, #1
 801277a:	d0f6      	beq.n	801276a <aux_set_value+0x172>
 801277c:	4b41      	ldr	r3, [pc, #260]	@ (8012884 <aux_set_value+0x28c>)
 801277e:	f8d3 8128 	ldr.w	r8, [r3, #296]	@ 0x128
 8012782:	4631      	mov	r1, r6
 8012784:	4b3d      	ldr	r3, [pc, #244]	@ (801287c <aux_set_value+0x284>)
 8012786:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012788:	f7ff fe58 	bl	801243c <ioports_map_reverse>
 801278c:	4602      	mov	r2, r0
 801278e:	2101      	movs	r1, #1
 8012790:	4608      	mov	r0, r1
 8012792:	47c0      	blx	r8
 8012794:	2800      	cmp	r0, #0
 8012796:	d0e8      	beq.n	801276a <aux_set_value+0x172>
                        if(xbar->config && !(xbar->mode.pwm || xbar->mode.servo_pwm)) {
 8012798:	f8d0 8018 	ldr.w	r8, [r0, #24]
 801279c:	f1b8 0f00 	cmp.w	r8, #0
 80127a0:	d0e3      	beq.n	801276a <aux_set_value+0x172>
 80127a2:	7dc2      	ldrb	r2, [r0, #23]
 80127a4:	f012 0f30 	tst.w	r2, #48	@ 0x30
 80127a8:	d1df      	bne.n	801276a <aux_set_value+0x172>
                            config.inverted = !!(change.mask & (1 << xbar->id));
 80127aa:	7802      	ldrb	r2, [r0, #0]
 80127ac:	fa44 f202 	asr.w	r2, r4, r2
 80127b0:	f002 0201 	and.w	r2, r2, #1
 80127b4:	f88d 2004 	strb.w	r2, [sp, #4]
                            config.open_drain = xbar->mode.open_drain;
 80127b8:	7d82      	ldrb	r2, [r0, #22]
 80127ba:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80127be:	f88d 2005 	strb.w	r2, [sp, #5]
                            xbar->config(xbar, &config, false);
 80127c2:	2200      	movs	r2, #0
 80127c4:	a901      	add	r1, sp, #4
 80127c6:	47c0      	blx	r8
 80127c8:	e7cf      	b.n	801276a <aux_set_value+0x172>
                settings.ioport.invert_out.mask = change.mask;
 80127ca:	4b2d      	ldr	r3, [pc, #180]	@ (8012880 <aux_set_value+0x288>)
 80127cc:	f883 416a 	strb.w	r4, [r3, #362]	@ 0x16a
                if(on_setting_changed)
 80127d0:	4b2d      	ldr	r3, [pc, #180]	@ (8012888 <aux_set_value+0x290>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	f43f af63 	beq.w	80126a0 <aux_set_value+0xa8>
                    on_setting_changed(id);
 80127da:	4628      	mov	r0, r5
 80127dc:	4798      	blx	r3
 80127de:	e75f      	b.n	80126a0 <aux_set_value+0xa8>
            change.mask = (uint8_t)value & digital.outx.mask;
 80127e0:	4b26      	ldr	r3, [pc, #152]	@ (801287c <aux_set_value+0x284>)
 80127e2:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80127e6:	ea01 0403 	and.w	r4, r1, r3
            if((changed.mask = settings.ioport.od_enable_out.mask ^ change.mask)) {
 80127ea:	4b25      	ldr	r3, [pc, #148]	@ (8012880 <aux_set_value+0x288>)
 80127ec:	f893 216b 	ldrb.w	r2, [r3, #363]	@ 0x16b
 80127f0:	ea84 0302 	eor.w	r3, r4, r2
 80127f4:	4294      	cmp	r4, r2
 80127f6:	f43f af53 	beq.w	80126a0 <aux_set_value+0xa8>
                gpio_out_config_t config = {0};
 80127fa:	2600      	movs	r6, #0
 80127fc:	f8ad 6004 	strh.w	r6, [sp, #4]
 8012800:	f88d 6006 	strb.w	r6, [sp, #6]
 8012804:	e004      	b.n	8012810 <aux_set_value+0x218>
                    port++;
 8012806:	3601      	adds	r6, #1
 8012808:	b2f6      	uxtb	r6, r6
                } while(changed.mask >>= 1);
 801280a:	087f      	lsrs	r7, r7, #1
 801280c:	463b      	mov	r3, r7
 801280e:	b34f      	cbz	r7, 8012864 <aux_set_value+0x26c>
                    if((changed.mask & 0x01) && (xbar = hal.port.get_pin_info(Port_Digital, Port_Output, ioports_map_reverse(digital.out.ports, port)))) {
 8012810:	b2df      	uxtb	r7, r3
 8012812:	f013 0f01 	tst.w	r3, #1
 8012816:	d0f6      	beq.n	8012806 <aux_set_value+0x20e>
 8012818:	4b1a      	ldr	r3, [pc, #104]	@ (8012884 <aux_set_value+0x28c>)
 801281a:	f8d3 8128 	ldr.w	r8, [r3, #296]	@ 0x128
 801281e:	4631      	mov	r1, r6
 8012820:	4b16      	ldr	r3, [pc, #88]	@ (801287c <aux_set_value+0x284>)
 8012822:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012824:	f7ff fe0a 	bl	801243c <ioports_map_reverse>
 8012828:	4602      	mov	r2, r0
 801282a:	2101      	movs	r1, #1
 801282c:	4608      	mov	r0, r1
 801282e:	47c0      	blx	r8
 8012830:	2800      	cmp	r0, #0
 8012832:	d0e8      	beq.n	8012806 <aux_set_value+0x20e>
                        if(xbar->config && !(xbar->mode.pwm || xbar->mode.servo_pwm)) {
 8012834:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8012838:	f1b8 0f00 	cmp.w	r8, #0
 801283c:	d0e3      	beq.n	8012806 <aux_set_value+0x20e>
 801283e:	7dc2      	ldrb	r2, [r0, #23]
 8012840:	f012 0f30 	tst.w	r2, #48	@ 0x30
 8012844:	d1df      	bne.n	8012806 <aux_set_value+0x20e>
                            config.inverted = xbar->mode.inverted;
 8012846:	f3c2 0280 	ubfx	r2, r2, #2, #1
 801284a:	f88d 2004 	strb.w	r2, [sp, #4]
                            config.open_drain = !!(change.mask & (1 << xbar->id));
 801284e:	7802      	ldrb	r2, [r0, #0]
 8012850:	fa44 f202 	asr.w	r2, r4, r2
 8012854:	f002 0201 	and.w	r2, r2, #1
 8012858:	f88d 2005 	strb.w	r2, [sp, #5]
                            xbar->config(xbar, &config, false);
 801285c:	2200      	movs	r2, #0
 801285e:	a901      	add	r1, sp, #4
 8012860:	47c0      	blx	r8
 8012862:	e7d0      	b.n	8012806 <aux_set_value+0x20e>
                settings.ioport.od_enable_out.mask = change.mask;
 8012864:	4b06      	ldr	r3, [pc, #24]	@ (8012880 <aux_set_value+0x288>)
 8012866:	f883 416b 	strb.w	r4, [r3, #363]	@ 0x16b
                if(on_setting_changed)
 801286a:	4b07      	ldr	r3, [pc, #28]	@ (8012888 <aux_set_value+0x290>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	2b00      	cmp	r3, #0
 8012870:	f43f af16 	beq.w	80126a0 <aux_set_value+0xa8>
                    on_setting_changed(id);
 8012874:	4628      	mov	r0, r5
 8012876:	4798      	blx	r3
 8012878:	e712      	b.n	80126a0 <aux_set_value+0xa8>
 801287a:	bf00      	nop
 801287c:	20001c54 	.word	0x20001c54
 8012880:	200022f4 	.word	0x200022f4
 8012884:	200018dc 	.word	0x200018dc
 8012888:	20001d3c 	.word	0x20001d3c

0801288c <ioport_save_input_settings>:
{
 801288c:	b538      	push	{r3, r4, r5, lr}
 801288e:	460c      	mov	r4, r1
    if(digital.inx.mask & (1 << xbar->id)) {
 8012890:	4b22      	ldr	r3, [pc, #136]	@ (801291c <ioport_save_input_settings+0x90>)
 8012892:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8012896:	7802      	ldrb	r2, [r0, #0]
 8012898:	4113      	asrs	r3, r2
 801289a:	f013 0f01 	tst.w	r3, #1
 801289e:	d00a      	beq.n	80128b6 <ioport_save_input_settings+0x2a>
        if(config->inverted)
 80128a0:	780b      	ldrb	r3, [r1, #0]
 80128a2:	b183      	cbz	r3, 80128c6 <ioport_save_input_settings+0x3a>
            settings.ioport.invert_in.mask |= (1 << xbar->id);
 80128a4:	4d1e      	ldr	r5, [pc, #120]	@ (8012920 <ioport_save_input_settings+0x94>)
 80128a6:	f895 3168 	ldrb.w	r3, [r5, #360]	@ 0x168
 80128aa:	2101      	movs	r1, #1
 80128ac:	fa01 f202 	lsl.w	r2, r1, r2
 80128b0:	4313      	orrs	r3, r2
 80128b2:	f885 3168 	strb.w	r3, [r5, #360]	@ 0x168
    if(xbar->function == Input_Probe)
 80128b6:	7840      	ldrb	r0, [r0, #1]
 80128b8:	280e      	cmp	r0, #14
 80128ba:	d00f      	beq.n	80128dc <ioport_save_input_settings+0x50>
    else if(xbar->function < Input_Probe) {
 80128bc:	280d      	cmp	r0, #13
 80128be:	d916      	bls.n	80128ee <ioport_save_input_settings+0x62>
    settings_write_global();
 80128c0:	f00a f868 	bl	801c994 <settings_write_global>
}
 80128c4:	bd38      	pop	{r3, r4, r5, pc}
            settings.ioport.invert_in.mask &= ~(1 << xbar->id);
 80128c6:	4d16      	ldr	r5, [pc, #88]	@ (8012920 <ioport_save_input_settings+0x94>)
 80128c8:	f895 1168 	ldrb.w	r1, [r5, #360]	@ 0x168
 80128cc:	2301      	movs	r3, #1
 80128ce:	4093      	lsls	r3, r2
 80128d0:	43db      	mvns	r3, r3
 80128d2:	b25b      	sxtb	r3, r3
 80128d4:	400b      	ands	r3, r1
 80128d6:	f885 3168 	strb.w	r3, [r5, #360]	@ 0x168
 80128da:	e7ec      	b.n	80128b6 <ioport_save_input_settings+0x2a>
        settings.probe.invert_probe_pin = config->inverted;
 80128dc:	7821      	ldrb	r1, [r4, #0]
 80128de:	4b10      	ldr	r3, [pc, #64]	@ (8012920 <ioport_save_input_settings+0x94>)
 80128e0:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
 80128e4:	f361 0200 	bfi	r2, r1, #0, #1
 80128e8:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 80128ec:	e7e8      	b.n	80128c0 <ioport_save_input_settings+0x34>
        if((ctrl = xbar_fn_to_signals_mask(xbar->function)).mask) {
 80128ee:	f7fa fce9 	bl	800d2c4 <xbar_fn_to_signals_mask>
 80128f2:	b283      	uxth	r3, r0
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d0e3      	beq.n	80128c0 <ioport_save_input_settings+0x34>
            if(config->inverted)
 80128f8:	7822      	ldrb	r2, [r4, #0]
 80128fa:	b132      	cbz	r2, 801290a <ioport_save_input_settings+0x7e>
                settings.control_invert.mask |= ctrl.mask;
 80128fc:	4a08      	ldr	r2, [pc, #32]	@ (8012920 <ioport_save_input_settings+0x94>)
 80128fe:	f8b2 106c 	ldrh.w	r1, [r2, #108]	@ 0x6c
 8012902:	430b      	orrs	r3, r1
 8012904:	f8a2 306c 	strh.w	r3, [r2, #108]	@ 0x6c
 8012908:	e7da      	b.n	80128c0 <ioport_save_input_settings+0x34>
                settings.control_invert.mask &= ~ctrl.mask;
 801290a:	4a05      	ldr	r2, [pc, #20]	@ (8012920 <ioport_save_input_settings+0x94>)
 801290c:	f8b2 306c 	ldrh.w	r3, [r2, #108]	@ 0x6c
 8012910:	43c0      	mvns	r0, r0
 8012912:	b200      	sxth	r0, r0
 8012914:	4003      	ands	r3, r0
 8012916:	f8a2 306c 	strh.w	r3, [r2, #108]	@ 0x6c
 801291a:	e7d1      	b.n	80128c0 <ioport_save_input_settings+0x34>
 801291c:	20001c54 	.word	0x20001c54
 8012920:	200022f4 	.word	0x200022f4

08012924 <ioport_save_output_settings>:
{
 8012924:	b508      	push	{r3, lr}
    if(digital.outx.mask & (1 << xbar->id)) {
 8012926:	4b10      	ldr	r3, [pc, #64]	@ (8012968 <ioport_save_output_settings+0x44>)
 8012928:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 801292c:	7802      	ldrb	r2, [r0, #0]
 801292e:	4113      	asrs	r3, r2
 8012930:	f013 0f01 	tst.w	r3, #1
 8012934:	d00a      	beq.n	801294c <ioport_save_output_settings+0x28>
        if(config->inverted)
 8012936:	780b      	ldrb	r3, [r1, #0]
 8012938:	b15b      	cbz	r3, 8012952 <ioport_save_output_settings+0x2e>
            settings.ioport.invert_out.mask |= (1 << xbar->id);
 801293a:	480c      	ldr	r0, [pc, #48]	@ (801296c <ioport_save_output_settings+0x48>)
 801293c:	f890 316a 	ldrb.w	r3, [r0, #362]	@ 0x16a
 8012940:	2101      	movs	r1, #1
 8012942:	fa01 f202 	lsl.w	r2, r1, r2
 8012946:	4313      	orrs	r3, r2
 8012948:	f880 316a 	strb.w	r3, [r0, #362]	@ 0x16a
    settings_write_global();
 801294c:	f00a f822 	bl	801c994 <settings_write_global>
}
 8012950:	bd08      	pop	{r3, pc}
            settings.ioport.invert_out.mask &= ~(1 << xbar->id);
 8012952:	4806      	ldr	r0, [pc, #24]	@ (801296c <ioport_save_output_settings+0x48>)
 8012954:	f890 116a 	ldrb.w	r1, [r0, #362]	@ 0x16a
 8012958:	2301      	movs	r3, #1
 801295a:	4093      	lsls	r3, r2
 801295c:	43db      	mvns	r3, r3
 801295e:	b25b      	sxtb	r3, r3
 8012960:	400b      	ands	r3, r1
 8012962:	f880 316a 	strb.w	r3, [r0, #362]	@ 0x16a
 8012966:	e7f1      	b.n	801294c <ioport_save_output_settings+0x28>
 8012968:	20001c54 	.word	0x20001c54
 801296c:	200022f4 	.word	0x200022f4

08012970 <ioport_setting_changed>:
    .load = ioport_settings_load,
    .save = settings_write_global
};

void ioport_setting_changed (setting_id_t id)
{
 8012970:	b530      	push	{r4, r5, lr}
 8012972:	b083      	sub	sp, #12
    if(on_setting_changed)
 8012974:	4b70      	ldr	r3, [pc, #448]	@ (8012b38 <ioport_setting_changed+0x1c8>)
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	b113      	cbz	r3, 8012980 <ioport_setting_changed+0x10>
        on_setting_changed(id);
 801297a:	4798      	blx	r3
            break;

        default:
            break;
    }
}
 801297c:	b003      	add	sp, #12
 801297e:	bd30      	pop	{r4, r5, pc}
    else switch(id) {
 8012980:	3806      	subs	r0, #6
 8012982:	280d      	cmp	r0, #13
 8012984:	d8fa      	bhi.n	801297c <ioport_setting_changed+0xc>
 8012986:	a301      	add	r3, pc, #4	@ (adr r3, 801298c <ioport_setting_changed+0x1c>)
 8012988:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 801298c:	080129c5 	.word	0x080129c5
 8012990:	0801297d 	.word	0x0801297d
 8012994:	0801297d 	.word	0x0801297d
 8012998:	0801297d 	.word	0x0801297d
 801299c:	0801297d 	.word	0x0801297d
 80129a0:	0801297d 	.word	0x0801297d
 80129a4:	0801297d 	.word	0x0801297d
 80129a8:	0801297d 	.word	0x0801297d
 80129ac:	08012a65 	.word	0x08012a65
 80129b0:	0801297d 	.word	0x0801297d
 80129b4:	0801297d 	.word	0x0801297d
 80129b8:	08012a65 	.word	0x08012a65
 80129bc:	0801297d 	.word	0x0801297d
 80129c0:	080129c5 	.word	0x080129c5
                gpio_in_config_t in_config = {0};
 80129c4:	2300      	movs	r3, #0
 80129c6:	f8ad 3004 	strh.w	r3, [sp, #4]
 80129ca:	f88d 3006 	strb.w	r3, [sp, #6]
                uint8_t port = digital.in.ports->n_ports;
 80129ce:	4b5b      	ldr	r3, [pc, #364]	@ (8012b3c <ioport_setting_changed+0x1cc>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	781c      	ldrb	r4, [r3, #0]
 80129d4:	e011      	b.n	80129fa <ioport_setting_changed+0x8a>
                                settings.ioport.invert_in.mask &= ~(1 << xbar->id);
 80129d6:	485a      	ldr	r0, [pc, #360]	@ (8012b40 <ioport_setting_changed+0x1d0>)
 80129d8:	f890 1168 	ldrb.w	r1, [r0, #360]	@ 0x168
 80129dc:	781d      	ldrb	r5, [r3, #0]
 80129de:	2201      	movs	r2, #1
 80129e0:	40aa      	lsls	r2, r5
 80129e2:	43d2      	mvns	r2, r2
 80129e4:	b252      	sxtb	r2, r2
 80129e6:	400a      	ands	r2, r1
 80129e8:	f880 2168 	strb.w	r2, [r0, #360]	@ 0x168
                            xbar->config(xbar, &in_config, false);
 80129ec:	699d      	ldr	r5, [r3, #24]
 80129ee:	2200      	movs	r2, #0
 80129f0:	a901      	add	r1, sp, #4
 80129f2:	4618      	mov	r0, r3
 80129f4:	47a8      	blx	r5
                } while(port);
 80129f6:	2c00      	cmp	r4, #0
 80129f8:	d0c0      	beq.n	801297c <ioport_setting_changed+0xc>
                    if((xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, --port)))) {
 80129fa:	4b52      	ldr	r3, [pc, #328]	@ (8012b44 <ioport_setting_changed+0x1d4>)
 80129fc:	f8d3 5128 	ldr.w	r5, [r3, #296]	@ 0x128
 8012a00:	3c01      	subs	r4, #1
 8012a02:	b2e4      	uxtb	r4, r4
 8012a04:	4621      	mov	r1, r4
 8012a06:	4b4d      	ldr	r3, [pc, #308]	@ (8012b3c <ioport_setting_changed+0x1cc>)
 8012a08:	6818      	ldr	r0, [r3, #0]
 8012a0a:	f7ff fd17 	bl	801243c <ioports_map_reverse>
 8012a0e:	4602      	mov	r2, r0
 8012a10:	2100      	movs	r1, #0
 8012a12:	2001      	movs	r0, #1
 8012a14:	47a8      	blx	r5
 8012a16:	4603      	mov	r3, r0
 8012a18:	2800      	cmp	r0, #0
 8012a1a:	d0ec      	beq.n	80129f6 <ioport_setting_changed+0x86>
                        if(xbar->config && xbar->function == Input_Probe) {
 8012a1c:	6982      	ldr	r2, [r0, #24]
 8012a1e:	2a00      	cmp	r2, #0
 8012a20:	d0e9      	beq.n	80129f6 <ioport_setting_changed+0x86>
 8012a22:	7842      	ldrb	r2, [r0, #1]
 8012a24:	2a0e      	cmp	r2, #14
 8012a26:	d1e6      	bne.n	80129f6 <ioport_setting_changed+0x86>
                            in_config.debounce  = Off;
 8012a28:	2200      	movs	r2, #0
 8012a2a:	f88d 2005 	strb.w	r2, [sp, #5]
                            in_config.inverted  = settings.probe.invert_probe_pin;
 8012a2e:	4a44      	ldr	r2, [pc, #272]	@ (8012b40 <ioport_setting_changed+0x1d0>)
 8012a30:	f892 1100 	ldrb.w	r1, [r2, #256]	@ 0x100
 8012a34:	f3c1 0200 	ubfx	r2, r1, #0, #1
 8012a38:	f88d 2004 	strb.w	r2, [sp, #4]
                            in_config.pull_mode = settings.probe.disable_probe_pullup ? PullMode_None : PullMode_Up;
 8012a3c:	084a      	lsrs	r2, r1, #1
 8012a3e:	f082 0201 	eor.w	r2, r2, #1
 8012a42:	f002 0201 	and.w	r2, r2, #1
 8012a46:	f88d 2006 	strb.w	r2, [sp, #6]
                            if(in_config.inverted)
 8012a4a:	f011 0f01 	tst.w	r1, #1
 8012a4e:	d0c2      	beq.n	80129d6 <ioport_setting_changed+0x66>
                                settings.ioport.invert_in.mask |= (1 << xbar->id);
 8012a50:	483b      	ldr	r0, [pc, #236]	@ (8012b40 <ioport_setting_changed+0x1d0>)
 8012a52:	f890 2168 	ldrb.w	r2, [r0, #360]	@ 0x168
 8012a56:	781d      	ldrb	r5, [r3, #0]
 8012a58:	2101      	movs	r1, #1
 8012a5a:	40a9      	lsls	r1, r5
 8012a5c:	430a      	orrs	r2, r1
 8012a5e:	f880 2168 	strb.w	r2, [r0, #360]	@ 0x168
 8012a62:	e7c3      	b.n	80129ec <ioport_setting_changed+0x7c>
                gpio_in_config_t in_config = {0};
 8012a64:	2300      	movs	r3, #0
 8012a66:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012a6a:	f88d 3006 	strb.w	r3, [sp, #6]
                uint8_t port = digital.in.ports->n_ports;
 8012a6e:	4b33      	ldr	r3, [pc, #204]	@ (8012b3c <ioport_setting_changed+0x1cc>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	781c      	ldrb	r4, [r3, #0]
 8012a74:	e012      	b.n	8012a9c <ioport_setting_changed+0x12c>
                                settings.ioport.invert_in.mask &= ~(1 << xbar->id);
 8012a76:	4932      	ldr	r1, [pc, #200]	@ (8012b40 <ioport_setting_changed+0x1d0>)
 8012a78:	f891 2168 	ldrb.w	r2, [r1, #360]	@ 0x168
 8012a7c:	7828      	ldrb	r0, [r5, #0]
 8012a7e:	2301      	movs	r3, #1
 8012a80:	4083      	lsls	r3, r0
 8012a82:	43db      	mvns	r3, r3
 8012a84:	b25b      	sxtb	r3, r3
 8012a86:	4013      	ands	r3, r2
 8012a88:	f881 3168 	strb.w	r3, [r1, #360]	@ 0x168
                            xbar->config(xbar, &in_config, false);
 8012a8c:	69ab      	ldr	r3, [r5, #24]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	a901      	add	r1, sp, #4
 8012a92:	4628      	mov	r0, r5
 8012a94:	4798      	blx	r3
                } while(port);
 8012a96:	2c00      	cmp	r4, #0
 8012a98:	f43f af70 	beq.w	801297c <ioport_setting_changed+0xc>
                    if((xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, --port)))) {
 8012a9c:	4b29      	ldr	r3, [pc, #164]	@ (8012b44 <ioport_setting_changed+0x1d4>)
 8012a9e:	f8d3 5128 	ldr.w	r5, [r3, #296]	@ 0x128
 8012aa2:	3c01      	subs	r4, #1
 8012aa4:	b2e4      	uxtb	r4, r4
 8012aa6:	4621      	mov	r1, r4
 8012aa8:	4b24      	ldr	r3, [pc, #144]	@ (8012b3c <ioport_setting_changed+0x1cc>)
 8012aaa:	6818      	ldr	r0, [r3, #0]
 8012aac:	f7ff fcc6 	bl	801243c <ioports_map_reverse>
 8012ab0:	4602      	mov	r2, r0
 8012ab2:	2100      	movs	r1, #0
 8012ab4:	2001      	movs	r0, #1
 8012ab6:	47a8      	blx	r5
 8012ab8:	4605      	mov	r5, r0
 8012aba:	2800      	cmp	r0, #0
 8012abc:	d0eb      	beq.n	8012a96 <ioport_setting_changed+0x126>
                        if(xbar->config && xbar->function < Input_Probe) {
 8012abe:	6983      	ldr	r3, [r0, #24]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d0e8      	beq.n	8012a96 <ioport_setting_changed+0x126>
 8012ac4:	7843      	ldrb	r3, [r0, #1]
 8012ac6:	2b0d      	cmp	r3, #13
 8012ac8:	d8e5      	bhi.n	8012a96 <ioport_setting_changed+0x126>
                            in_config.debounce = xbar->mode.debounce;
 8012aca:	7dc3      	ldrb	r3, [r0, #23]
 8012acc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012ad0:	f88d 3005 	strb.w	r3, [sp, #5]
                            in_config.inverted = !!(settings.ioport.invert_in.mask & (1 << xbar->id));
 8012ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8012b40 <ioport_setting_changed+0x1d0>)
 8012ad6:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 8012ada:	7802      	ldrb	r2, [r0, #0]
 8012adc:	4113      	asrs	r3, r2
 8012ade:	f003 0301 	and.w	r3, r3, #1
 8012ae2:	f88d 3004 	strb.w	r3, [sp, #4]
                            in_config.pull_mode = (pull_mode_t)xbar->mode.pull_mode;
 8012ae6:	7d83      	ldrb	r3, [r0, #22]
 8012ae8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8012aec:	f88d 3006 	strb.w	r3, [sp, #6]
                            if((ctrl = xbar_fn_to_signals_mask(xbar->function)).mask) {
 8012af0:	7840      	ldrb	r0, [r0, #1]
 8012af2:	f7fa fbe7 	bl	800d2c4 <xbar_fn_to_signals_mask>
 8012af6:	b280      	uxth	r0, r0
 8012af8:	b180      	cbz	r0, 8012b1c <ioport_setting_changed+0x1ac>
                                in_config.inverted = !!(settings.control_invert.mask & ctrl.mask);
 8012afa:	4b11      	ldr	r3, [pc, #68]	@ (8012b40 <ioport_setting_changed+0x1d0>)
 8012afc:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
 8012b00:	4210      	tst	r0, r2
 8012b02:	bf14      	ite	ne
 8012b04:	2201      	movne	r2, #1
 8012b06:	2200      	moveq	r2, #0
 8012b08:	f88d 2004 	strb.w	r2, [sp, #4]
                                in_config.pull_mode = (settings.control_disable_pullup.mask & ctrl.mask) ? PullMode_None : PullMode_Up;
 8012b0c:	f8b3 306e 	ldrh.w	r3, [r3, #110]	@ 0x6e
 8012b10:	4218      	tst	r0, r3
 8012b12:	bf0c      	ite	eq
 8012b14:	2301      	moveq	r3, #1
 8012b16:	2300      	movne	r3, #0
 8012b18:	f88d 3006 	strb.w	r3, [sp, #6]
                            if(in_config.inverted)
 8012b1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d0a8      	beq.n	8012a76 <ioport_setting_changed+0x106>
                                settings.ioport.invert_in.mask |= (1 << xbar->id);
 8012b24:	4906      	ldr	r1, [pc, #24]	@ (8012b40 <ioport_setting_changed+0x1d0>)
 8012b26:	f891 3168 	ldrb.w	r3, [r1, #360]	@ 0x168
 8012b2a:	7828      	ldrb	r0, [r5, #0]
 8012b2c:	2201      	movs	r2, #1
 8012b2e:	4082      	lsls	r2, r0
 8012b30:	4313      	orrs	r3, r2
 8012b32:	f881 3168 	strb.w	r3, [r1, #360]	@ 0x168
 8012b36:	e7a9      	b.n	8012a8c <ioport_setting_changed+0x11c>
 8012b38:	20001d3c 	.word	0x20001d3c
 8012b3c:	20001c54 	.word	0x20001c54
 8012b40:	200022f4 	.word	0x200022f4
 8012b44:	200018dc 	.word	0x200018dc

08012b48 <ioports_add_settings>:

void ioports_add_settings (driver_settings_load_ptr settings_loaded, setting_changed_ptr setting_changed)
{
 8012b48:	b508      	push	{r3, lr}
    if(settings_loaded)
 8012b4a:	b108      	cbz	r0, 8012b50 <ioports_add_settings+0x8>
        on_settings_loaded = settings_loaded;
 8012b4c:	4a04      	ldr	r2, [pc, #16]	@ (8012b60 <ioports_add_settings+0x18>)
 8012b4e:	6010      	str	r0, [r2, #0]

    if(setting_changed)
 8012b50:	b109      	cbz	r1, 8012b56 <ioports_add_settings+0xe>
        on_setting_changed = setting_changed;
 8012b52:	4b04      	ldr	r3, [pc, #16]	@ (8012b64 <ioports_add_settings+0x1c>)
 8012b54:	6019      	str	r1, [r3, #0]

    settings_register(&setting_details);
 8012b56:	4804      	ldr	r0, [pc, #16]	@ (8012b68 <ioports_add_settings+0x20>)
 8012b58:	f00a fb38 	bl	801d1cc <settings_register>
}
 8012b5c:	bd08      	pop	{r3, pc}
 8012b5e:	bf00      	nop
 8012b60:	20001d40 	.word	0x20001d40
 8012b64:	20001d3c 	.word	0x20001d3c
 8012b68:	200001dc 	.word	0x200001dc

08012b6c <homing_signals_select>:
    return state;
}

// Merge (bitwise or) home switch inputs (typically acquired from limits.min and limits.min2).
ISR_CODE static axes_signals_t ISR_FUNC(homing_signals_select)(home_signals_t signals, axes_signals_t auto_square, squaring_mode_t mode)
{
 8012b6c:	b082      	sub	sp, #8
 8012b6e:	f8ad 0004 	strh.w	r0, [sp, #4]
    axes_signals_t state;

    switch(mode) {
 8012b72:	2a01      	cmp	r2, #1
 8012b74:	d008      	beq.n	8012b88 <homing_signals_select+0x1c>
 8012b76:	2a02      	cmp	r2, #2
 8012b78:	d00e      	beq.n	8012b98 <homing_signals_select+0x2c>

        default:
            break;
    }

    state.mask = signals.a.mask | signals.b.mask;
 8012b7a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8012b7e:	f89d 3005 	ldrb.w	r3, [sp, #5]

    return state;
}
 8012b82:	4318      	orrs	r0, r3
 8012b84:	b002      	add	sp, #8
 8012b86:	4770      	bx	lr
            signals.a.mask &= ~auto_square.mask;
 8012b88:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012b8c:	43c9      	mvns	r1, r1
 8012b8e:	b249      	sxtb	r1, r1
 8012b90:	400b      	ands	r3, r1
 8012b92:	f88d 3004 	strb.w	r3, [sp, #4]
            break;
 8012b96:	e7f0      	b.n	8012b7a <homing_signals_select+0xe>
            signals.b.mask &= ~auto_square.mask;
 8012b98:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012b9c:	43c9      	mvns	r1, r1
 8012b9e:	b249      	sxtb	r1, r1
 8012ba0:	400b      	ands	r3, r1
 8012ba2:	f88d 3005 	strb.w	r3, [sp, #5]
            break;
 8012ba6:	e7e8      	b.n	8012b7a <homing_signals_select+0xe>

08012ba8 <get_homing_rate>:
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
}

static float get_homing_rate (axes_signals_t cycle, homing_mode_t mode)
{
    return mode == HomingMode_Locate ? settings.homing.feed_rate : settings.homing.seek_rate;
 8012ba8:	2901      	cmp	r1, #1
 8012baa:	d003      	beq.n	8012bb4 <get_homing_rate+0xc>
 8012bac:	4b03      	ldr	r3, [pc, #12]	@ (8012bbc <get_homing_rate+0x14>)
 8012bae:	ed93 0a42 	vldr	s0, [r3, #264]	@ 0x108
}
 8012bb2:	4770      	bx	lr
    return mode == HomingMode_Locate ? settings.homing.feed_rate : settings.homing.seek_rate;
 8012bb4:	4b01      	ldr	r3, [pc, #4]	@ (8012bbc <get_homing_rate+0x14>)
 8012bb6:	ed93 0a41 	vldr	s0, [r3, #260]	@ 0x104
 8012bba:	4770      	bx	lr
 8012bbc:	200022f4 	.word	0x200022f4

08012bc0 <check_travel_limits>:
static bool check_travel_limits (float *target, axes_signals_t axes, bool is_cartesian)
{
    bool failed = false;
    uint_fast8_t idx = N_AXIS;

    if(is_cartesian && (sys.homed.mask & axes.mask)) do {
 8012bc0:	b3ca      	cbz	r2, 8012c36 <check_travel_limits+0x76>
{
 8012bc2:	b510      	push	{r4, lr}
 8012bc4:	4614      	mov	r4, r2
    if(is_cartesian && (sys.homed.mask & axes.mask)) do {
 8012bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8012c40 <check_travel_limits+0x80>)
 8012bc8:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8012bcc:	fa5f fc81 	uxtb.w	ip, r1
 8012bd0:	420a      	tst	r2, r1
 8012bd2:	d02c      	beq.n	8012c2e <check_travel_limits+0x6e>
    uint_fast8_t idx = N_AXIS;
 8012bd4:	2303      	movs	r3, #3
 8012bd6:	e000      	b.n	8012bda <check_travel_limits+0x1a>
        idx--;
        if(bit_istrue(sys.homed.mask, bit(idx)) && bit_istrue(axes.mask, bit(idx)))
            failed = target[idx] < sys.work_envelope.min.values[idx] || target[idx] > sys.work_envelope.max.values[idx];
    } while(!failed && idx);
 8012bd8:	b33b      	cbz	r3, 8012c2a <check_travel_limits+0x6a>
        idx--;
 8012bda:	3b01      	subs	r3, #1
        if(bit_istrue(sys.homed.mask, bit(idx)) && bit_istrue(axes.mask, bit(idx)))
 8012bdc:	fa22 f103 	lsr.w	r1, r2, r3
 8012be0:	f011 0f01 	tst.w	r1, #1
 8012be4:	d0f8      	beq.n	8012bd8 <check_travel_limits+0x18>
 8012be6:	fa2c f103 	lsr.w	r1, ip, r3
 8012bea:	f011 0f01 	tst.w	r1, #1
 8012bee:	d0f3      	beq.n	8012bd8 <check_travel_limits+0x18>
            failed = target[idx] < sys.work_envelope.min.values[idx] || target[idx] > sys.work_envelope.max.values[idx];
 8012bf0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8012bf4:	edd1 7a00 	vldr	s15, [r1]
 8012bf8:	f103 0e18 	add.w	lr, r3, #24
 8012bfc:	4910      	ldr	r1, [pc, #64]	@ (8012c40 <check_travel_limits+0x80>)
 8012bfe:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8012c02:	ed91 7a01 	vldr	s14, [r1, #4]
 8012c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c0e:	d40f      	bmi.n	8012c30 <check_travel_limits+0x70>
 8012c10:	f103 0e1a 	add.w	lr, r3, #26
 8012c14:	490a      	ldr	r1, [pc, #40]	@ (8012c40 <check_travel_limits+0x80>)
 8012c16:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8012c1a:	ed91 7a02 	vldr	s14, [r1, #8]
 8012c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c26:	ddd7      	ble.n	8012bd8 <check_travel_limits+0x18>
 8012c28:	e002      	b.n	8012c30 <check_travel_limits+0x70>
 8012c2a:	2400      	movs	r4, #0
 8012c2c:	e000      	b.n	8012c30 <check_travel_limits+0x70>
    bool failed = false;
 8012c2e:	2400      	movs	r4, #0

    return is_cartesian && !failed;
 8012c30:	b11c      	cbz	r4, 8012c3a <check_travel_limits+0x7a>
 8012c32:	2000      	movs	r0, #0
}
 8012c34:	bd10      	pop	{r4, pc}
    return is_cartesian && !failed;
 8012c36:	2000      	movs	r0, #0
}
 8012c38:	4770      	bx	lr
    return is_cartesian && !failed;
 8012c3a:	2001      	movs	r0, #1
 8012c3c:	e7fa      	b.n	8012c34 <check_travel_limits+0x74>
 8012c3e:	bf00      	nop
 8012c40:	20001bbc 	.word	0x20001bbc

08012c44 <clip_3d_target>:

// Derived from code by Dimitrios Matthes & Vasileios Drakopoulos
// https://www.mdpi.com/1999-4893/16/4/201
static void clip_3d_target (coord_data_t *position, coord_data_t *target, work_envelope_t *envelope)
{
    float a = target->x - position->x;
 8012c44:	edd1 5a00 	vldr	s11, [r1]
 8012c48:	edd0 4a00 	vldr	s9, [r0]
 8012c4c:	ee35 6ae4 	vsub.f32	s12, s11, s9
    float b = target->y - position->y;
 8012c50:	ed91 7a01 	vldr	s14, [r1, #4]
 8012c54:	edd0 6a01 	vldr	s13, [r0, #4]
 8012c58:	ee37 7a66 	vsub.f32	s14, s14, s13
    float c = target->z - position->z;
 8012c5c:	edd1 7a02 	vldr	s15, [r1, #8]
 8012c60:	ed90 5a02 	vldr	s10, [r0, #8]
 8012c64:	ee77 7ac5 	vsub.f32	s15, s15, s10

    if(target->x < envelope->min.x) {
 8012c68:	ed92 5a00 	vldr	s10, [r2]
 8012c6c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8012c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c74:	d56e      	bpl.n	8012d54 <clip_3d_target+0x110>
        target->y = b / a * (envelope->min.x - position->x) + position->y;
 8012c76:	eec7 5a06 	vdiv.f32	s11, s14, s12
 8012c7a:	ee35 5a64 	vsub.f32	s10, s10, s9
 8012c7e:	ee65 5a85 	vmul.f32	s11, s11, s10
 8012c82:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012c86:	edc1 6a01 	vstr	s13, [r1, #4]
        target->z = c / a * (envelope->min.x - position->x) + position->z;
 8012c8a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8012c8e:	edd2 5a00 	vldr	s11, [r2]
 8012c92:	ed90 5a00 	vldr	s10, [r0]
 8012c96:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012c9a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012c9e:	edd0 5a02 	vldr	s11, [r0, #8]
 8012ca2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012ca6:	edc1 6a02 	vstr	s13, [r1, #8]
        target->x = envelope->min.x;
 8012caa:	6813      	ldr	r3, [r2, #0]
 8012cac:	600b      	str	r3, [r1, #0]
        target->y = b / a * (envelope->max.x - position->x) + position->y;
        target->z = c / a * (envelope->max.x - position->x) + position->z;
        target->x = envelope->max.x;
    }

    if(target->y < envelope->min.y) {
 8012cae:	edd1 6a01 	vldr	s13, [r1, #4]
 8012cb2:	edd2 5a01 	vldr	s11, [r2, #4]
 8012cb6:	eef4 6ae5 	vcmpe.f32	s13, s11
 8012cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cbe:	d56d      	bpl.n	8012d9c <clip_3d_target+0x158>
        target->x = a / b * (envelope->min.y - position->y) + position->x;
 8012cc0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8012cc4:	ed90 5a01 	vldr	s10, [r0, #4]
 8012cc8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012ccc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012cd0:	edd0 5a00 	vldr	s11, [r0]
 8012cd4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012cd8:	edc1 6a00 	vstr	s13, [r1]
        target->z = c / b * (envelope->min.y - position->y) + position->z;
 8012cdc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8012ce0:	edd2 5a01 	vldr	s11, [r2, #4]
 8012ce4:	ed90 5a01 	vldr	s10, [r0, #4]
 8012ce8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012cec:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012cf0:	edd0 5a02 	vldr	s11, [r0, #8]
 8012cf4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012cf8:	edc1 6a02 	vstr	s13, [r1, #8]
        target->y = envelope->min.y;
 8012cfc:	6853      	ldr	r3, [r2, #4]
 8012cfe:	604b      	str	r3, [r1, #4]
        target->x = a / b * (envelope->max.y - position->y) + position->x;
        target->z = c / b * (envelope->max.y - position->y) + position->z;
        target->y = envelope->max.y;
    }

    if(target->z < envelope->min.z) {
 8012d00:	edd1 5a02 	vldr	s11, [r1, #8]
 8012d04:	edd2 6a02 	vldr	s13, [r2, #8]
 8012d08:	eef4 5ae6 	vcmpe.f32	s11, s13
 8012d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d10:	d56c      	bpl.n	8012dec <clip_3d_target+0x1a8>
        target->x = a / c * (envelope->min.z - position->z) + position->x;
 8012d12:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8012d16:	ed90 6a02 	vldr	s12, [r0, #8]
 8012d1a:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8012d1e:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8012d22:	ed90 6a00 	vldr	s12, [r0]
 8012d26:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012d2a:	edc1 6a00 	vstr	s13, [r1]
        target->y = b / c * (envelope->min.z - position->z) + position->y;
 8012d2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012d32:	edd2 7a02 	vldr	s15, [r2, #8]
 8012d36:	ed90 7a02 	vldr	s14, [r0, #8]
 8012d3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012d3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d42:	ed90 7a01 	vldr	s14, [r0, #4]
 8012d46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012d4a:	edc1 7a01 	vstr	s15, [r1, #4]
        target->z = envelope->min.z;
 8012d4e:	6893      	ldr	r3, [r2, #8]
 8012d50:	608b      	str	r3, [r1, #8]
 8012d52:	4770      	bx	lr
    } else if(target->x > envelope->max.x) {
 8012d54:	ed92 5a03 	vldr	s10, [r2, #12]
 8012d58:	eef4 5ac5 	vcmpe.f32	s11, s10
 8012d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d60:	dda5      	ble.n	8012cae <clip_3d_target+0x6a>
        target->y = b / a * (envelope->max.x - position->x) + position->y;
 8012d62:	eec7 5a06 	vdiv.f32	s11, s14, s12
 8012d66:	ee35 5a64 	vsub.f32	s10, s10, s9
 8012d6a:	ee65 5a85 	vmul.f32	s11, s11, s10
 8012d6e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012d72:	edc1 6a01 	vstr	s13, [r1, #4]
        target->z = c / a * (envelope->max.x - position->x) + position->z;
 8012d76:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8012d7a:	edd2 5a03 	vldr	s11, [r2, #12]
 8012d7e:	ed90 5a00 	vldr	s10, [r0]
 8012d82:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012d86:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012d8a:	edd0 5a02 	vldr	s11, [r0, #8]
 8012d8e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012d92:	edc1 6a02 	vstr	s13, [r1, #8]
        target->x = envelope->max.x;
 8012d96:	68d3      	ldr	r3, [r2, #12]
 8012d98:	600b      	str	r3, [r1, #0]
 8012d9a:	e788      	b.n	8012cae <clip_3d_target+0x6a>
    } else if(target->y > envelope->max.y) {
 8012d9c:	edd2 5a04 	vldr	s11, [r2, #16]
 8012da0:	eef4 6ae5 	vcmpe.f32	s13, s11
 8012da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012da8:	ddaa      	ble.n	8012d00 <clip_3d_target+0xbc>
        target->x = a / b * (envelope->max.y - position->y) + position->x;
 8012daa:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8012dae:	ed90 5a01 	vldr	s10, [r0, #4]
 8012db2:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012db6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012dba:	edd0 5a00 	vldr	s11, [r0]
 8012dbe:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012dc2:	edc1 6a00 	vstr	s13, [r1]
        target->z = c / b * (envelope->max.y - position->y) + position->z;
 8012dc6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8012dca:	edd2 5a04 	vldr	s11, [r2, #16]
 8012dce:	ed90 5a01 	vldr	s10, [r0, #4]
 8012dd2:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012dd6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012dda:	edd0 5a02 	vldr	s11, [r0, #8]
 8012dde:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012de2:	edc1 6a02 	vstr	s13, [r1, #8]
        target->y = envelope->max.y;
 8012de6:	6913      	ldr	r3, [r2, #16]
 8012de8:	604b      	str	r3, [r1, #4]
 8012dea:	e789      	b.n	8012d00 <clip_3d_target+0xbc>
    } else if(target->z > envelope->max.z) {
 8012dec:	edd2 6a05 	vldr	s13, [r2, #20]
 8012df0:	eef4 5ae6 	vcmpe.f32	s11, s13
 8012df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012df8:	dd1f      	ble.n	8012e3a <clip_3d_target+0x1f6>
        target->x = a / c * (envelope->max.z - position->z) + position->x;
 8012dfa:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8012dfe:	ed90 6a02 	vldr	s12, [r0, #8]
 8012e02:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8012e06:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8012e0a:	ed90 6a00 	vldr	s12, [r0]
 8012e0e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012e12:	edc1 6a00 	vstr	s13, [r1]
        target->y = b / c * (envelope->max.z - position->z) + position->y;
 8012e16:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012e1a:	edd2 7a05 	vldr	s15, [r2, #20]
 8012e1e:	ed90 7a02 	vldr	s14, [r0, #8]
 8012e22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e2a:	ed90 7a01 	vldr	s14, [r0, #4]
 8012e2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012e32:	edc1 7a01 	vstr	s15, [r1, #4]
        target->z = envelope->max.z;
 8012e36:	6953      	ldr	r3, [r2, #20]
 8012e38:	608b      	str	r3, [r1, #8]
    }
}
 8012e3a:	4770      	bx	lr

08012e3c <apply_jog_limits>:

// Limits jog commands to be within machine limits, homed axes only.
static void apply_jog_limits (float *target, float *position)
{
    if(sys.homed.mask == 0)
 8012e3c:	4b35      	ldr	r3, [pc, #212]	@ (8012f14 <apply_jog_limits+0xd8>)
 8012e3e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d064      	beq.n	8012f10 <apply_jog_limits+0xd4>
{
 8012e46:	b510      	push	{r4, lr}
 8012e48:	4604      	mov	r4, r0
 8012e4a:	4608      	mov	r0, r1
        return;

    uint_fast8_t idx;

    if((sys.homed.mask & 0b111) == 0b111) {
 8012e4c:	f003 0307 	and.w	r3, r3, #7
 8012e50:	2b07      	cmp	r3, #7
 8012e52:	d001      	beq.n	8012e58 <apply_jog_limits+0x1c>

        uint_fast8_t n_axes = 0;

        idx = Z_AXIS + 1;
 8012e54:	2303      	movs	r3, #3
 8012e56:	e025      	b.n	8012ea4 <apply_jog_limits+0x68>
        uint_fast8_t n_axes = 0;
 8012e58:	2200      	movs	r2, #0
        idx = Z_AXIS + 1;
 8012e5a:	2303      	movs	r3, #3
 8012e5c:	e002      	b.n	8012e64 <apply_jog_limits+0x28>
        do {
            idx--;
            if(fabs(target[idx] - position[idx]) > 0.001f)
                n_axes++;
        } while(idx && n_axes < 2);
 8012e5e:	b1bb      	cbz	r3, 8012e90 <apply_jog_limits+0x54>
 8012e60:	2a01      	cmp	r2, #1
 8012e62:	d815      	bhi.n	8012e90 <apply_jog_limits+0x54>
            idx--;
 8012e64:	3b01      	subs	r3, #1
            if(fabs(target[idx] - position[idx]) > 0.001f)
 8012e66:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8012e6a:	edd1 7a00 	vldr	s15, [r1]
 8012e6e:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8012e72:	ed91 7a00 	vldr	s14, [r1]
 8012e76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e7a:	eef0 7ae7 	vabs.f32	s15, s15
 8012e7e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8012f18 <apply_jog_limits+0xdc>
 8012e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e8a:	dde8      	ble.n	8012e5e <apply_jog_limits+0x22>
                n_axes++;
 8012e8c:	3201      	adds	r2, #1
 8012e8e:	e7e6      	b.n	8012e5e <apply_jog_limits+0x22>

        if(n_axes > 1)
 8012e90:	2a01      	cmp	r2, #1
 8012e92:	d9df      	bls.n	8012e54 <apply_jog_limits+0x18>
            clip_3d_target((coord_data_t *)position, (coord_data_t *)target, &sys.work_envelope);
 8012e94:	4a21      	ldr	r2, [pc, #132]	@ (8012f1c <apply_jog_limits+0xe0>)
 8012e96:	4621      	mov	r1, r4
 8012e98:	f7ff fed4 	bl	8012c44 <clip_3d_target>
 8012e9c:	e7da      	b.n	8012e54 <apply_jog_limits+0x18>

    idx = N_AXIS;
    do {
        idx--;
        if(bit_istrue(sys.homed.mask, bit(idx)) && settings.axis[idx].max_travel < -0.0f)
            target[idx] = max(min(target[idx], sys.work_envelope.max.values[idx]), sys.work_envelope.min.values[idx]);
 8012e9e:	edc0 7a00 	vstr	s15, [r0]
    } while(idx);
 8012ea2:	b3a3      	cbz	r3, 8012f0e <apply_jog_limits+0xd2>
        idx--;
 8012ea4:	3b01      	subs	r3, #1
        if(bit_istrue(sys.homed.mask, bit(idx)) && settings.axis[idx].max_travel < -0.0f)
 8012ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8012f14 <apply_jog_limits+0xd8>)
 8012ea8:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8012eac:	40da      	lsrs	r2, r3
 8012eae:	f012 0f01 	tst.w	r2, #1
 8012eb2:	d0f6      	beq.n	8012ea2 <apply_jog_limits+0x66>
 8012eb4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8012eb8:	4a19      	ldr	r2, [pc, #100]	@ (8012f20 <apply_jog_limits+0xe4>)
 8012eba:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012ebe:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 8012ec2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eca:	d5ea      	bpl.n	8012ea2 <apply_jog_limits+0x66>
            target[idx] = max(min(target[idx], sys.work_envelope.max.values[idx]), sys.work_envelope.min.values[idx]);
 8012ecc:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8012ed0:	ed90 7a00 	vldr	s14, [r0]
 8012ed4:	f103 011a 	add.w	r1, r3, #26
 8012ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8012f14 <apply_jog_limits+0xd8>)
 8012eda:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012ede:	edd2 7a02 	vldr	s15, [r2, #8]
 8012ee2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eea:	d501      	bpl.n	8012ef0 <apply_jog_limits+0xb4>
 8012eec:	eef0 7a47 	vmov.f32	s15, s14
 8012ef0:	f103 0118 	add.w	r1, r3, #24
 8012ef4:	4a07      	ldr	r2, [pc, #28]	@ (8012f14 <apply_jog_limits+0xd8>)
 8012ef6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012efa:	ed92 7a01 	vldr	s14, [r2, #4]
 8012efe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f06:	d4ca      	bmi.n	8012e9e <apply_jog_limits+0x62>
 8012f08:	eef0 7a47 	vmov.f32	s15, s14
 8012f0c:	e7c7      	b.n	8012e9e <apply_jog_limits+0x62>
}
 8012f0e:	bd10      	pop	{r4, pc}
 8012f10:	4770      	bx	lr
 8012f12:	bf00      	nop
 8012f14:	20001bbc 	.word	0x20001bbc
 8012f18:	3a83126f 	.word	0x3a83126f
 8012f1c:	20001c20 	.word	0x20001c20
 8012f20:	200022f4 	.word	0x200022f4

08012f24 <limits_pull_off>:
{
 8012f24:	b570      	push	{r4, r5, r6, lr}
 8012f26:	ed2d 8b02 	vpush	{d8}
 8012f2a:	b08e      	sub	sp, #56	@ 0x38
 8012f2c:	4606      	mov	r6, r0
 8012f2e:	eeb0 8a40 	vmov.f32	s16, s0
    coord_data_t target = {0};
 8012f32:	2400      	movs	r4, #0
 8012f34:	940a      	str	r4, [sp, #40]	@ 0x28
 8012f36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012f38:	940c      	str	r4, [sp, #48]	@ 0x30
    plan_data_init(&plan_data);
 8012f3a:	4668      	mov	r0, sp
 8012f3c:	f004 f8b0 	bl	80170a0 <plan_data_init>
    plan_data.condition.system_motion = On;
 8012f40:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8012f44:	f043 0302 	orr.w	r3, r3, #2
 8012f48:	f88d 3014 	strb.w	r3, [sp, #20]
    plan_data.condition.no_feed_override = On;
 8012f4c:	b2db      	uxtb	r3, r3
 8012f4e:	f043 0310 	orr.w	r3, r3, #16
 8012f52:	f88d 3014 	strb.w	r3, [sp, #20]
    plan_data.line_number = DEFAULT_HOMING_CYCLE_LINE_NUMBER;
 8012f56:	9407      	str	r4, [sp, #28]
    system_convert_array_steps_to_mpos(target.values, sys.position);
 8012f58:	494a      	ldr	r1, [pc, #296]	@ (8013084 <limits_pull_off+0x160>)
 8012f5a:	a80a      	add	r0, sp, #40	@ 0x28
 8012f5c:	f00f f80c 	bl	8021f78 <system_convert_array_steps_to_mpos>
    uint_fast8_t n_axis = 0, idx = N_AXIS;
 8012f60:	2303      	movs	r3, #3
 8012f62:	e009      	b.n	8012f78 <limits_pull_off+0x54>
                target.values[idx] -= distance;
 8012f64:	aa0e      	add	r2, sp, #56	@ 0x38
 8012f66:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012f6a:	ed52 7a04 	vldr	s15, [r2, #-16]
 8012f6e:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8012f72:	ed42 7a04 	vstr	s15, [r2, #-16]
    } while(idx);
 8012f76:	b1c3      	cbz	r3, 8012faa <limits_pull_off+0x86>
        idx--;
 8012f78:	3b01      	subs	r3, #1
        if(bit_istrue(axis.mask, bit(idx))) {
 8012f7a:	b2f5      	uxtb	r5, r6
 8012f7c:	fa25 f203 	lsr.w	r2, r5, r3
 8012f80:	f012 0f01 	tst.w	r2, #1
 8012f84:	d0f7      	beq.n	8012f76 <limits_pull_off+0x52>
            n_axis++;
 8012f86:	3401      	adds	r4, #1
            if (bit_istrue(settings.homing.dir_mask.value, bit(idx)))
 8012f88:	4a3f      	ldr	r2, [pc, #252]	@ (8013088 <limits_pull_off+0x164>)
 8012f8a:	f892 2110 	ldrb.w	r2, [r2, #272]	@ 0x110
 8012f8e:	40da      	lsrs	r2, r3
 8012f90:	f012 0f01 	tst.w	r2, #1
 8012f94:	d0e6      	beq.n	8012f64 <limits_pull_off+0x40>
                target.values[idx] += distance;
 8012f96:	aa0e      	add	r2, sp, #56	@ 0x38
 8012f98:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012f9c:	ed52 7a04 	vldr	s15, [r2, #-16]
 8012fa0:	ee77 7a88 	vadd.f32	s15, s15, s16
 8012fa4:	ed42 7a04 	vstr	s15, [r2, #-16]
 8012fa8:	e7e5      	b.n	8012f76 <limits_pull_off+0x52>
    plan_data.feed_rate = settings.homing.seek_rate * sqrtf(n_axis); // Adjust so individual axes all move at pull-off rate.
 8012faa:	4b37      	ldr	r3, [pc, #220]	@ (8013088 <limits_pull_off+0x164>)
 8012fac:	ed93 8a42 	vldr	s16, [r3, #264]	@ 0x108
 8012fb0:	ee07 4a90 	vmov	s15, r4
 8012fb4:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8012fb8:	f014 fd16 	bl	80279e8 <sqrtf>
 8012fbc:	ee28 8a00 	vmul.f32	s16, s16, s0
 8012fc0:	ed8d 8a00 	vstr	s16, [sp]
    plan_data.condition.coolant = gc_state.modal.coolant;
 8012fc4:	4b31      	ldr	r3, [pc, #196]	@ (801308c <limits_pull_off+0x168>)
 8012fc6:	7e5a      	ldrb	r2, [r3, #25]
 8012fc8:	f88d 2016 	strb.w	r2, [sp, #22]
    memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t));
 8012fcc:	ac01      	add	r4, sp, #4
 8012fce:	3350      	adds	r3, #80	@ 0x50
 8012fd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012fd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    plan_buffer_line(target.values, &plan_data);    // Bypass mc_line(). Directly plan homing motion.
 8012fd6:	4669      	mov	r1, sp
 8012fd8:	a80a      	add	r0, sp, #40	@ 0x28
 8012fda:	f003 fe25 	bl	8016c28 <plan_buffer_line>
    sys.step_control.flags = 0;                 // Clear existing flags and
 8012fde:	4b2c      	ldr	r3, [pc, #176]	@ (8013090 <limits_pull_off+0x16c>)
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	761a      	strb	r2, [r3, #24]
    sys.step_control.execute_sys_motion = On;   // set to execute homing motion.
 8012fe4:	2204      	movs	r2, #4
 8012fe6:	761a      	strb	r2, [r3, #24]
    sys.homing_axis_lock.mask = axis.mask;
 8012fe8:	765e      	strb	r6, [r3, #25]
    st_prep_buffer();   // Prep and fill segment buffer from newly planned block.
 8012fea:	f00d f89b 	bl	8020124 <st_prep_buffer>
    st_wake_up();       // Initiate motion.
 8012fee:	f00c fda7 	bl	801fb40 <st_wake_up>
 8012ff2:	e009      	b.n	8013008 <limits_pull_off+0xe4>
                mc_reset(); // Stop motors, if they are running.
 8012ff4:	f001 ff54 	bl	8014ea0 <mc_reset>
                protocol_execute_realtime();
 8012ff8:	f004 fd1e 	bl	8017a38 <protocol_execute_realtime>
                return false;
 8012ffc:	2000      	movs	r0, #0
 8012ffe:	e03d      	b.n	801307c <limits_pull_off+0x158>
        grbl.on_execute_realtime(STATE_HOMING);
 8013000:	4b24      	ldr	r3, [pc, #144]	@ (8013094 <limits_pull_off+0x170>)
 8013002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013004:	2004      	movs	r0, #4
 8013006:	4798      	blx	r3
        st_prep_buffer(); // Check and prep segment buffer.
 8013008:	f00d f88c 	bl	8020124 <st_prep_buffer>
        if (sys.rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_COMPLETE)) {
 801300c:	4b20      	ldr	r3, [pc, #128]	@ (8013090 <limits_pull_off+0x16c>)
 801300e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013010:	f013 0f64 	tst.w	r3, #100	@ 0x64
 8013014:	d0f4      	beq.n	8013000 <limits_pull_off+0xdc>
            uint_fast16_t rt_exec = sys.rt_exec_state;
 8013016:	4b1e      	ldr	r3, [pc, #120]	@ (8013090 <limits_pull_off+0x16c>)
 8013018:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
            if (rt_exec & EXEC_RESET)
 801301a:	f014 0f20 	tst.w	r4, #32
 801301e:	d004      	beq.n	801302a <limits_pull_off+0x106>
                system_set_exec_alarm(Alarm_HomingFailReset);
 8013020:	4b1d      	ldr	r3, [pc, #116]	@ (8013098 <limits_pull_off+0x174>)
 8013022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013024:	2106      	movs	r1, #6
 8013026:	481d      	ldr	r0, [pc, #116]	@ (801309c <limits_pull_off+0x178>)
 8013028:	4798      	blx	r3
            if (rt_exec & EXEC_SAFETY_DOOR)
 801302a:	f014 0f40 	tst.w	r4, #64	@ 0x40
 801302e:	d004      	beq.n	801303a <limits_pull_off+0x116>
                system_set_exec_alarm(Alarm_HomingFailDoor);
 8013030:	4b19      	ldr	r3, [pc, #100]	@ (8013098 <limits_pull_off+0x174>)
 8013032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013034:	2107      	movs	r1, #7
 8013036:	4819      	ldr	r0, [pc, #100]	@ (801309c <limits_pull_off+0x178>)
 8013038:	4798      	blx	r3
            if (homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask & axis.mask)
 801303a:	4b17      	ldr	r3, [pc, #92]	@ (8013098 <limits_pull_off+0x174>)
 801303c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801303e:	4798      	blx	r3
 8013040:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8013044:	2200      	movs	r2, #0
 8013046:	4611      	mov	r1, r2
 8013048:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801304a:	f7ff fd8f 	bl	8012b6c <homing_signals_select>
 801304e:	4205      	tst	r5, r0
 8013050:	d004      	beq.n	801305c <limits_pull_off+0x138>
                system_set_exec_alarm(Alarm_FailPulloff);
 8013052:	4b11      	ldr	r3, [pc, #68]	@ (8013098 <limits_pull_off+0x174>)
 8013054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013056:	2108      	movs	r1, #8
 8013058:	4810      	ldr	r0, [pc, #64]	@ (801309c <limits_pull_off+0x178>)
 801305a:	4798      	blx	r3
            if (sys.rt_exec_alarm) {
 801305c:	4b0c      	ldr	r3, [pc, #48]	@ (8013090 <limits_pull_off+0x16c>)
 801305e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013060:	2b00      	cmp	r3, #0
 8013062:	d1c7      	bne.n	8012ff4 <limits_pull_off+0xd0>
                system_clear_exec_state_flag(EXEC_CYCLE_COMPLETE);
 8013064:	4b0c      	ldr	r3, [pc, #48]	@ (8013098 <limits_pull_off+0x174>)
 8013066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013068:	4c0d      	ldr	r4, [pc, #52]	@ (80130a0 <limits_pull_off+0x17c>)
 801306a:	2104      	movs	r1, #4
 801306c:	4620      	mov	r0, r4
 801306e:	4798      	blx	r3
    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 8013070:	f00c ff2e 	bl	801fed0 <st_reset>
    sys.step_control.flags = 0; // Return step control to normal operation.
 8013074:	2300      	movs	r3, #0
 8013076:	f804 3c30 	strb.w	r3, [r4, #-48]
    return true; // Note: failure is returned above if move fails.
 801307a:	2001      	movs	r0, #1
}
 801307c:	b00e      	add	sp, #56	@ 0x38
 801307e:	ecbd 8b02 	vpop	{d8}
 8013082:	bd70      	pop	{r4, r5, r6, pc}
 8013084:	20001c44 	.word	0x20001c44
 8013088:	200022f4 	.word	0x200022f4
 801308c:	20001614 	.word	0x20001614
 8013090:	20001bbc 	.word	0x20001bbc
 8013094:	20001ac4 	.word	0x20001ac4
 8013098:	200018dc 	.word	0x200018dc
 801309c:	20001c08 	.word	0x20001c08
 80130a0:	20001c04 	.word	0x20001c04

080130a4 <check_arc_travel_limits>:
{
 80130a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80130a8:	ed2d 8b02 	vpush	{d8}
 80130ac:	b08f      	sub	sp, #60	@ 0x3c
 80130ae:	4604      	mov	r4, r0
 80130b0:	9201      	str	r2, [sp, #4]
 80130b2:	461e      	mov	r6, r3
 80130b4:	ed8d 0a02 	vstr	s0, [sp, #8]
 80130b8:	edcd 0a03 	vstr	s1, [sp, #12]
    if((sys.soft_limits.mask & xyz.mask) == 0)
 80130bc:	4bcd      	ldr	r3, [pc, #820]	@ (80133f4 <check_arc_travel_limits+0x350>)
 80130be:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80130c2:	f013 0f07 	tst.w	r3, #7
 80130c6:	f000 8097 	beq.w	80131f8 <check_arc_travel_limits+0x154>
 80130ca:	460d      	mov	r5, r1
 80130cc:	eeb0 8a41 	vmov.f32	s16, s2
    arc_x_t x = {0};
 80130d0:	2700      	movs	r7, #0
    if(turns > 0) { // CCW
 80130d2:	42be      	cmp	r6, r7
 80130d4:	f340 8099 	ble.w	801320a <check_arc_travel_limits+0x166>
        start.x = position->values[plane.axis_0] - center.x;
 80130d8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80130dc:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80130e0:	edd3 7a00 	vldr	s15, [r3]
 80130e4:	eddd 6a02 	vldr	s13, [sp, #8]
 80130e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80130ec:	edcd 7a0c 	vstr	s15, [sp, #48]	@ 0x30
        start.y = position->values[plane.axis_1] - center.y;
 80130f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80130f4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80130f8:	edd1 7a00 	vldr	s15, [r1]
 80130fc:	ed9d 7a03 	vldr	s14, [sp, #12]
 8013100:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013104:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
        end.x = target->values[plane.axis_0] - center.x;
 8013108:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801310c:	edd2 7a00 	vldr	s15, [r2]
 8013110:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013114:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
        end.y = target->values[plane.axis_1] - center.y;
 8013118:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801311c:	edd3 7a00 	vldr	s15, [r3]
 8013120:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013124:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
    if(labs(turns > 1))
 8013128:	2e01      	cmp	r6, #1
 801312a:	f340 8097 	ble.w	801325c <check_arc_travel_limits+0x1b8>
        x.value = 0b1111;                   // Crosses all
 801312e:	270f      	movs	r7, #15
    memcpy(&corner1, turns > 0 ? position : target, sizeof(coord_data_t));
 8013130:	2e00      	cmp	r6, #0
 8013132:	f340 8134 	ble.w	801339e <check_arc_travel_limits+0x2fa>
 8013136:	462a      	mov	r2, r5
 8013138:	ab07      	add	r3, sp, #28
 801313a:	6810      	ldr	r0, [r2, #0]
 801313c:	6851      	ldr	r1, [r2, #4]
 801313e:	6892      	ldr	r2, [r2, #8]
 8013140:	c307      	stmia	r3!, {r0, r1, r2}
    corner1.values[plane.axis_0] = x.neg_x ? center.x - radius : min(position->values[plane.axis_0], target->values[plane.axis_0]);
 8013142:	fa5f f887 	uxtb.w	r8, r7
 8013146:	f017 0f02 	tst.w	r7, #2
 801314a:	f000 812a 	beq.w	80133a2 <check_arc_travel_limits+0x2fe>
 801314e:	eddd 7a02 	vldr	s15, [sp, #8]
 8013152:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8013156:	f89d 9004 	ldrb.w	r9, [sp, #4]
 801315a:	ab0e      	add	r3, sp, #56	@ 0x38
 801315c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8013160:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
    corner1.values[plane.axis_1] = x.neg_y ? center.y - radius : max(position->values[plane.axis_1], target->values[plane.axis_1]);
 8013164:	f018 0f04 	tst.w	r8, #4
 8013168:	f000 812e 	beq.w	80133c8 <check_arc_travel_limits+0x324>
 801316c:	eddd 7a03 	vldr	s15, [sp, #12]
 8013170:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8013174:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8013178:	ab0e      	add	r3, sp, #56	@ 0x38
 801317a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801317e:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
    if(!grbl.check_travel_limits(corner1.values, sys.soft_limits, true))
 8013182:	4b9d      	ldr	r3, [pc, #628]	@ (80133f8 <check_arc_travel_limits+0x354>)
 8013184:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8013188:	2201      	movs	r2, #1
 801318a:	499a      	ldr	r1, [pc, #616]	@ (80133f4 <check_arc_travel_limits+0x350>)
 801318c:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 8013190:	a807      	add	r0, sp, #28
 8013192:	4798      	blx	r3
 8013194:	b358      	cbz	r0, 80131ee <check_arc_travel_limits+0x14a>
    memcpy(&corner2, turns > 0 ? target : position, sizeof(coord_data_t));
 8013196:	2e00      	cmp	r6, #0
 8013198:	f340 8129 	ble.w	80133ee <check_arc_travel_limits+0x34a>
 801319c:	4622      	mov	r2, r4
 801319e:	ab04      	add	r3, sp, #16
 80131a0:	6810      	ldr	r0, [r2, #0]
 80131a2:	6851      	ldr	r1, [r2, #4]
 80131a4:	6892      	ldr	r2, [r2, #8]
 80131a6:	c307      	stmia	r3!, {r0, r1, r2}
    corner2.values[plane.axis_0] = x.pos_x ? center.x + radius : max(position->values[plane.axis_0], target->values[plane.axis_0]);
 80131a8:	f018 0f08 	tst.w	r8, #8
 80131ac:	f000 8126 	beq.w	80133fc <check_arc_travel_limits+0x358>
 80131b0:	eddd 7a02 	vldr	s15, [sp, #8]
 80131b4:	ee77 7a88 	vadd.f32	s15, s15, s16
 80131b8:	ab0e      	add	r3, sp, #56	@ 0x38
 80131ba:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80131be:	ed43 7a0a 	vstr	s15, [r3, #-40]	@ 0xffffffd8
    corner2.values[plane.axis_1] = x.pos_y ? center.y + radius : min(position->values[plane.axis_1], target->values[plane.axis_1]);
 80131c2:	f018 0f01 	tst.w	r8, #1
 80131c6:	f000 812a 	beq.w	801341e <check_arc_travel_limits+0x37a>
 80131ca:	eddd 7a03 	vldr	s15, [sp, #12]
 80131ce:	ee77 7a88 	vadd.f32	s15, s15, s16
 80131d2:	ab0e      	add	r3, sp, #56	@ 0x38
 80131d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80131d8:	ed47 7a0a 	vstr	s15, [r7, #-40]	@ 0xffffffd8
   return grbl.check_travel_limits(corner2.values, sys.soft_limits, true);
 80131dc:	4b86      	ldr	r3, [pc, #536]	@ (80133f8 <check_arc_travel_limits+0x354>)
 80131de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80131e2:	2201      	movs	r2, #1
 80131e4:	4983      	ldr	r1, [pc, #524]	@ (80133f4 <check_arc_travel_limits+0x350>)
 80131e6:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 80131ea:	a804      	add	r0, sp, #16
 80131ec:	4798      	blx	r3
}
 80131ee:	b00f      	add	sp, #60	@ 0x3c
 80131f0:	ecbd 8b02 	vpop	{d8}
 80131f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return grbl.check_travel_limits(target->values, sys.soft_limits, true);
 80131f8:	4b7f      	ldr	r3, [pc, #508]	@ (80133f8 <check_arc_travel_limits+0x354>)
 80131fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80131fe:	2201      	movs	r2, #1
 8013200:	497c      	ldr	r1, [pc, #496]	@ (80133f4 <check_arc_travel_limits+0x350>)
 8013202:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 8013206:	4798      	blx	r3
 8013208:	e7f1      	b.n	80131ee <check_arc_travel_limits+0x14a>
        start.x = target->values[plane.axis_0] - center.x;
 801320a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801320e:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8013212:	edd3 7a00 	vldr	s15, [r3]
 8013216:	eddd 6a02 	vldr	s13, [sp, #8]
 801321a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801321e:	edcd 7a0c 	vstr	s15, [sp, #48]	@ 0x30
        start.y = target->values[plane.axis_1] - center.y;
 8013222:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013226:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801322a:	edd1 7a00 	vldr	s15, [r1]
 801322e:	ed9d 7a03 	vldr	s14, [sp, #12]
 8013232:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013236:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
        end.x = position->values[plane.axis_0] - center.x;
 801323a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 801323e:	edd2 7a00 	vldr	s15, [r2]
 8013242:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013246:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
        end.y = position->values[plane.axis_1] - center.y;
 801324a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801324e:	edd3 7a00 	vldr	s15, [r3]
 8013252:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013256:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 801325a:	e765      	b.n	8013128 <check_arc_travel_limits+0x84>
    else if(start.y >= 0.0f) {
 801325c:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 8013260:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013268:	db4c      	blt.n	8013304 <check_arc_travel_limits+0x260>
        if(start.x > 0.0f) {                // Starts in Q1
 801326a:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 801326e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013276:	dd22      	ble.n	80132be <check_arc_travel_limits+0x21a>
            if(end.y >= 0.0f) {
 8013278:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 801327c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013284:	db10      	blt.n	80132a8 <check_arc_travel_limits+0x204>
                if(end.x <= 0.0f)
 8013286:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 801328a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801328e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013292:	d907      	bls.n	80132a4 <check_arc_travel_limits+0x200>
                else if(end.x >= start.x)
 8013294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801329c:	f63f af48 	bhi.w	8013130 <check_arc_travel_limits+0x8c>
                    x.value = 0b1111;       // Ends in Q1, crosses all
 80132a0:	270f      	movs	r7, #15
 80132a2:	e745      	b.n	8013130 <check_arc_travel_limits+0x8c>
                    x.value = 0b0001;       // Ends in Q2
 80132a4:	2701      	movs	r7, #1
 80132a6:	e743      	b.n	8013130 <check_arc_travel_limits+0x8c>
            } else if(end.x <= 0.0f)
 80132a8:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 80132ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80132b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132b4:	d901      	bls.n	80132ba <check_arc_travel_limits+0x216>
                x.value = 0b0111;           // Ends in Q4
 80132b6:	2707      	movs	r7, #7
 80132b8:	e73a      	b.n	8013130 <check_arc_travel_limits+0x8c>
                x.value = 0b0011;           // Ends in Q3
 80132ba:	2703      	movs	r7, #3
 80132bc:	e738      	b.n	8013130 <check_arc_travel_limits+0x8c>
            if(end.y >= 0.0f) {
 80132be:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 80132c2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80132c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ca:	db10      	blt.n	80132ee <check_arc_travel_limits+0x24a>
                if(end.x > 0.0f)
 80132cc:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 80132d0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80132d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d8:	dd01      	ble.n	80132de <check_arc_travel_limits+0x23a>
                    x.value = 0b1110;       // Ends in Q1
 80132da:	270e      	movs	r7, #14
 80132dc:	e728      	b.n	8013130 <check_arc_travel_limits+0x8c>
                else if(end.x >= start.x)
 80132de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80132e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132e6:	f63f af23 	bhi.w	8013130 <check_arc_travel_limits+0x8c>
                    x.value = 0b1111;       // Ends in Q2, crosses all
 80132ea:	270f      	movs	r7, #15
 80132ec:	e720      	b.n	8013130 <check_arc_travel_limits+0x8c>
            } else if(end.x <= 0.0f)
 80132ee:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 80132f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80132f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132fa:	d901      	bls.n	8013300 <check_arc_travel_limits+0x25c>
                x.value = 0b0110;           // Ends in Q4
 80132fc:	2706      	movs	r7, #6
 80132fe:	e717      	b.n	8013130 <check_arc_travel_limits+0x8c>
                x.value = 0b0010;           // Ends in Q3
 8013300:	2702      	movs	r7, #2
 8013302:	e715      	b.n	8013130 <check_arc_travel_limits+0x8c>
    } else if(start.x < 0.0f) {             // Starts in Q3
 8013304:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8013308:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801330c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013310:	d40f      	bmi.n	8013332 <check_arc_travel_limits+0x28e>
        if(end.y < 0.0f) {
 8013312:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 8013316:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801331a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801331e:	d42b      	bmi.n	8013378 <check_arc_travel_limits+0x2d4>
        } else if(end.x > 0.0f)
 8013320:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 8013324:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801332c:	dd35      	ble.n	801339a <check_arc_travel_limits+0x2f6>
            x.value = 0b1000;               // Ends in Q1
 801332e:	2708      	movs	r7, #8
 8013330:	e6fe      	b.n	8013130 <check_arc_travel_limits+0x8c>
        if(end.y < 0.0f) {
 8013332:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 8013336:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801333a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801333e:	d408      	bmi.n	8013352 <check_arc_travel_limits+0x2ae>
        } else if(end.x > 0.0f)
 8013340:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 8013344:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801334c:	dd12      	ble.n	8013374 <check_arc_travel_limits+0x2d0>
            x.value = 0b1100;               // Ends in Q1
 801334e:	270c      	movs	r7, #12
 8013350:	e6ee      	b.n	8013130 <check_arc_travel_limits+0x8c>
            if(end.x > 0.0f)
 8013352:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 8013356:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801335a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801335e:	dd01      	ble.n	8013364 <check_arc_travel_limits+0x2c0>
                x.value = 0b0100;           // Ends in Q4
 8013360:	2704      	movs	r7, #4
 8013362:	e6e5      	b.n	8013130 <check_arc_travel_limits+0x8c>
            else if(end.x <= start.x)
 8013364:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801336c:	f6ff aee0 	blt.w	8013130 <check_arc_travel_limits+0x8c>
                x.value = 0b1111;           // Ends in Q3, crosses all
 8013370:	270f      	movs	r7, #15
 8013372:	e6dd      	b.n	8013130 <check_arc_travel_limits+0x8c>
            x.value = 0b1101;               // Ends in Q2
 8013374:	270d      	movs	r7, #13
 8013376:	e6db      	b.n	8013130 <check_arc_travel_limits+0x8c>
            if(end.x < 0.0f)
 8013378:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 801337c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013384:	d407      	bmi.n	8013396 <check_arc_travel_limits+0x2f2>
            else if(end.x <= start.x)
 8013386:	eef4 7ac7 	vcmpe.f32	s15, s14
 801338a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801338e:	f6ff aecf 	blt.w	8013130 <check_arc_travel_limits+0x8c>
                x.value = 0b1111;           // Ends in Q4, crosses all
 8013392:	270f      	movs	r7, #15
 8013394:	e6cc      	b.n	8013130 <check_arc_travel_limits+0x8c>
                x.value = 0b1011;           // Ends in Q3
 8013396:	270b      	movs	r7, #11
 8013398:	e6ca      	b.n	8013130 <check_arc_travel_limits+0x8c>
            x.value = 0b1001;               // Ends in Q2
 801339a:	2709      	movs	r7, #9
 801339c:	e6c8      	b.n	8013130 <check_arc_travel_limits+0x8c>
    memcpy(&corner1, turns > 0 ? position : target, sizeof(coord_data_t));
 801339e:	4622      	mov	r2, r4
 80133a0:	e6ca      	b.n	8013138 <check_arc_travel_limits+0x94>
    corner1.values[plane.axis_0] = x.neg_x ? center.x - radius : min(position->values[plane.axis_0], target->values[plane.axis_0]);
 80133a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80133a6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80133aa:	ed92 7a00 	vldr	s14, [r2]
 80133ae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80133b2:	edd3 7a00 	vldr	s15, [r3]
 80133b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80133ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133be:	f57f aeca 	bpl.w	8013156 <check_arc_travel_limits+0xb2>
 80133c2:	eef0 7a47 	vmov.f32	s15, s14
 80133c6:	e6c6      	b.n	8013156 <check_arc_travel_limits+0xb2>
    corner1.values[plane.axis_1] = x.neg_y ? center.y - radius : max(position->values[plane.axis_1], target->values[plane.axis_1]);
 80133c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80133cc:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80133d0:	ed92 7a00 	vldr	s14, [r2]
 80133d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80133d8:	edd3 7a00 	vldr	s15, [r3]
 80133dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80133e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133e4:	f77f aec6 	ble.w	8013174 <check_arc_travel_limits+0xd0>
 80133e8:	eef0 7a47 	vmov.f32	s15, s14
 80133ec:	e6c2      	b.n	8013174 <check_arc_travel_limits+0xd0>
    memcpy(&corner2, turns > 0 ? target : position, sizeof(coord_data_t));
 80133ee:	462a      	mov	r2, r5
 80133f0:	e6d5      	b.n	801319e <check_arc_travel_limits+0xfa>
 80133f2:	bf00      	nop
 80133f4:	20001bbc 	.word	0x20001bbc
 80133f8:	20001ac4 	.word	0x20001ac4
    corner2.values[plane.axis_0] = x.pos_x ? center.x + radius : max(position->values[plane.axis_0], target->values[plane.axis_0]);
 80133fc:	eb05 0389 	add.w	r3, r5, r9, lsl #2
 8013400:	ed93 7a00 	vldr	s14, [r3]
 8013404:	eb04 0389 	add.w	r3, r4, r9, lsl #2
 8013408:	edd3 7a00 	vldr	s15, [r3]
 801340c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013414:	f77f aed0 	ble.w	80131b8 <check_arc_travel_limits+0x114>
 8013418:	eef0 7a47 	vmov.f32	s15, s14
 801341c:	e6cc      	b.n	80131b8 <check_arc_travel_limits+0x114>
    corner2.values[plane.axis_1] = x.pos_y ? center.y + radius : min(position->values[plane.axis_1], target->values[plane.axis_1]);
 801341e:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8013422:	ed95 7a00 	vldr	s14, [r5]
 8013426:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 801342a:	edd4 7a00 	vldr	s15, [r4]
 801342e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013436:	f57f aecc 	bpl.w	80131d2 <check_arc_travel_limits+0x12e>
 801343a:	eef0 7a47 	vmov.f32	s15, s14
 801343e:	e6c8      	b.n	80131d2 <check_arc_travel_limits+0x12e>

08013440 <limit_signals_merge>:
{
 8013440:	b082      	sub	sp, #8
 8013442:	9001      	str	r0, [sp, #4]
    state.mask = signals.min.mask | signals.min2.mask | signals.max.mask | signals.max2.mask;
 8013444:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013448:	f89d 1006 	ldrb.w	r1, [sp, #6]
 801344c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013450:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013454:	430a      	orrs	r2, r1
 8013456:	4313      	orrs	r3, r2
}
 8013458:	4318      	orrs	r0, r3
 801345a:	b002      	add	sp, #8
 801345c:	4770      	bx	lr
	...

08013460 <limit_interrupt_handler>:
{
 8013460:	b500      	push	{lr}
 8013462:	b083      	sub	sp, #12
 8013464:	9001      	str	r0, [sp, #4]
    memcpy(&sys.last_event.limits, &state, sizeof(limit_signals_t));
 8013466:	4b0b      	ldr	r3, [pc, #44]	@ (8013494 <limit_interrupt_handler+0x34>)
 8013468:	f8c3 0082 	str.w	r0, [r3, #130]	@ 0x82
    if (!(state_get() & (STATE_ALARM|STATE_ESTOP)) && !sys.rt_exec_alarm) {
 801346c:	f00b fe4c 	bl	801f108 <state_get>
 8013470:	f240 1301 	movw	r3, #257	@ 0x101
 8013474:	4218      	tst	r0, r3
 8013476:	d102      	bne.n	801347e <limit_interrupt_handler+0x1e>
 8013478:	4b06      	ldr	r3, [pc, #24]	@ (8013494 <limit_interrupt_handler+0x34>)
 801347a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801347c:	b113      	cbz	r3, 8013484 <limit_interrupt_handler+0x24>
}
 801347e:	b003      	add	sp, #12
 8013480:	f85d fb04 	ldr.w	pc, [sp], #4
        mc_reset(); // Initiate system kill.
 8013484:	f001 fd0c 	bl	8014ea0 <mc_reset>
        system_set_exec_alarm(Alarm_HardLimit); // Indicate hard limit critical event
 8013488:	4b03      	ldr	r3, [pc, #12]	@ (8013498 <limit_interrupt_handler+0x38>)
 801348a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801348c:	2101      	movs	r1, #1
 801348e:	4803      	ldr	r0, [pc, #12]	@ (801349c <limit_interrupt_handler+0x3c>)
 8013490:	4798      	blx	r3
}
 8013492:	e7f4      	b.n	801347e <limit_interrupt_handler+0x1e>
 8013494:	20001bbc 	.word	0x20001bbc
 8013498:	200018dc 	.word	0x200018dc
 801349c:	20001c08 	.word	0x20001c08

080134a0 <limits_set_work_envelope>:
    uint_fast8_t idx = N_AXIS;
 80134a0:	2303      	movs	r3, #3
 80134a2:	e067      	b.n	8013574 <limits_set_work_envelope+0xd4>
            float pulloff = settings.limits.flags.hard_enabled && bit_istrue(sys.homing.mask, bit(idx)) ? settings.homing.pulloff : 0.0f;
 80134a4:	eddf 7a40 	vldr	s15, [pc, #256]	@ 80135a8 <limits_set_work_envelope+0x108>
            if(settings.homing.flags.force_set_origin) {
 80134a8:	4a40      	ldr	r2, [pc, #256]	@ (80135ac <limits_set_work_envelope+0x10c>)
 80134aa:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 80134ae:	f012 0f08 	tst.w	r2, #8
 80134b2:	d039      	beq.n	8013528 <limits_set_work_envelope+0x88>
                if(bit_isfalse(settings.homing.dir_mask.value, bit(idx))) {
 80134b4:	4a3d      	ldr	r2, [pc, #244]	@ (80135ac <limits_set_work_envelope+0x10c>)
 80134b6:	f892 2110 	ldrb.w	r2, [r2, #272]	@ 0x110
 80134ba:	40da      	lsrs	r2, r3
 80134bc:	f012 0f01 	tst.w	r2, #1
 80134c0:	d119      	bne.n	80134f6 <limits_set_work_envelope+0x56>
                    sys.work_envelope.min.values[idx] = settings.axis[idx].max_travel + pulloff;
 80134c2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80134c6:	0091      	lsls	r1, r2, #2
 80134c8:	4a38      	ldr	r2, [pc, #224]	@ (80135ac <limits_set_work_envelope+0x10c>)
 80134ca:	440a      	add	r2, r1
 80134cc:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 80134d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134d4:	4a36      	ldr	r2, [pc, #216]	@ (80135b0 <limits_set_work_envelope+0x110>)
 80134d6:	f103 0118 	add.w	r1, r3, #24
 80134da:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80134de:	edc1 7a01 	vstr	s15, [r1, #4]
                    sys.work_envelope.max.values[idx] = 0.0f;
 80134e2:	f103 011a 	add.w	r1, r3, #26
 80134e6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80134ea:	2100      	movs	r1, #0
 80134ec:	6091      	str	r1, [r2, #8]
 80134ee:	e040      	b.n	8013572 <limits_set_work_envelope+0xd2>
            float pulloff = settings.limits.flags.hard_enabled && bit_istrue(sys.homing.mask, bit(idx)) ? settings.homing.pulloff : 0.0f;
 80134f0:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80135a8 <limits_set_work_envelope+0x108>
 80134f4:	e7d8      	b.n	80134a8 <limits_set_work_envelope+0x8>
                    sys.work_envelope.min.values[idx] = 0.0f;
 80134f6:	4a2e      	ldr	r2, [pc, #184]	@ (80135b0 <limits_set_work_envelope+0x110>)
 80134f8:	f103 0118 	add.w	r1, r3, #24
 80134fc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8013500:	2000      	movs	r0, #0
 8013502:	6048      	str	r0, [r1, #4]
                    sys.work_envelope.max.values[idx] = - (settings.axis[idx].max_travel + pulloff);
 8013504:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8013508:	0088      	lsls	r0, r1, #2
 801350a:	4928      	ldr	r1, [pc, #160]	@ (80135ac <limits_set_work_envelope+0x10c>)
 801350c:	4401      	add	r1, r0
 801350e:	ed91 7a0f 	vldr	s14, [r1, #60]	@ 0x3c
 8013512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013516:	eef1 7a67 	vneg.f32	s15, s15
 801351a:	f103 011a 	add.w	r1, r3, #26
 801351e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8013522:	edc2 7a02 	vstr	s15, [r2, #8]
 8013526:	e024      	b.n	8013572 <limits_set_work_envelope+0xd2>
                sys.work_envelope.min.values[idx] = settings.axis[idx].max_travel + pulloff;
 8013528:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801352c:	0091      	lsls	r1, r2, #2
 801352e:	4a1f      	ldr	r2, [pc, #124]	@ (80135ac <limits_set_work_envelope+0x10c>)
 8013530:	440a      	add	r2, r1
 8013532:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 8013536:	ee37 7a27 	vadd.f32	s14, s14, s15
 801353a:	4a1d      	ldr	r2, [pc, #116]	@ (80135b0 <limits_set_work_envelope+0x110>)
 801353c:	f103 0118 	add.w	r1, r3, #24
 8013540:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8013544:	ed81 7a01 	vstr	s14, [r1, #4]
                sys.work_envelope.max.values[idx] = - pulloff;
 8013548:	eef1 7a67 	vneg.f32	s15, s15
 801354c:	f103 011a 	add.w	r1, r3, #26
 8013550:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8013554:	edc2 7a02 	vstr	s15, [r2, #8]
 8013558:	e00b      	b.n	8013572 <limits_set_work_envelope+0xd2>
            sys.work_envelope.min.values[idx] = sys.work_envelope.max.values[idx] = 0.0f;
 801355a:	4a15      	ldr	r2, [pc, #84]	@ (80135b0 <limits_set_work_envelope+0x110>)
 801355c:	f103 011a 	add.w	r1, r3, #26
 8013560:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8013564:	2000      	movs	r0, #0
 8013566:	6088      	str	r0, [r1, #8]
 8013568:	f103 0118 	add.w	r1, r3, #24
 801356c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8013570:	6050      	str	r0, [r2, #4]
    } while(idx);
 8013572:	b1bb      	cbz	r3, 80135a4 <limits_set_work_envelope+0x104>
        if(sys.homed.mask & bit(--idx)) {
 8013574:	4a0e      	ldr	r2, [pc, #56]	@ (80135b0 <limits_set_work_envelope+0x110>)
 8013576:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 801357a:	3b01      	subs	r3, #1
 801357c:	40da      	lsrs	r2, r3
 801357e:	f012 0f01 	tst.w	r2, #1
 8013582:	d0ea      	beq.n	801355a <limits_set_work_envelope+0xba>
            float pulloff = settings.limits.flags.hard_enabled && bit_istrue(sys.homing.mask, bit(idx)) ? settings.homing.pulloff : 0.0f;
 8013584:	4a09      	ldr	r2, [pc, #36]	@ (80135ac <limits_set_work_envelope+0x10c>)
 8013586:	f892 2124 	ldrb.w	r2, [r2, #292]	@ 0x124
 801358a:	f012 0f01 	tst.w	r2, #1
 801358e:	d089      	beq.n	80134a4 <limits_set_work_envelope+0x4>
 8013590:	4a07      	ldr	r2, [pc, #28]	@ (80135b0 <limits_set_work_envelope+0x110>)
 8013592:	7e92      	ldrb	r2, [r2, #26]
 8013594:	40da      	lsrs	r2, r3
 8013596:	f012 0f01 	tst.w	r2, #1
 801359a:	d0a9      	beq.n	80134f0 <limits_set_work_envelope+0x50>
 801359c:	4a03      	ldr	r2, [pc, #12]	@ (80135ac <limits_set_work_envelope+0x10c>)
 801359e:	edd2 7a43 	vldr	s15, [r2, #268]	@ 0x10c
 80135a2:	e781      	b.n	80134a8 <limits_set_work_envelope+0x8>
}
 80135a4:	4770      	bx	lr
 80135a6:	bf00      	nop
 80135a8:	00000000 	.word	0x00000000
 80135ac:	200022f4 	.word	0x200022f4
 80135b0:	20001bbc 	.word	0x20001bbc

080135b4 <limits_set_machine_positions>:
{
 80135b4:	b570      	push	{r4, r5, r6, lr}
 80135b6:	ed2d 8b02 	vpush	{d8}
 80135ba:	4605      	mov	r5, r0
    float pulloff = add_pulloff ? settings.homing.pulloff : -0.0f;
 80135bc:	b119      	cbz	r1, 80135c6 <limits_set_machine_positions+0x12>
 80135be:	4b2b      	ldr	r3, [pc, #172]	@ (801366c <limits_set_machine_positions+0xb8>)
 80135c0:	ed93 8a43 	vldr	s16, [r3, #268]	@ 0x10c
 80135c4:	e001      	b.n	80135ca <limits_set_machine_positions+0x16>
 80135c6:	ed9f 8a2a 	vldr	s16, [pc, #168]	@ 8013670 <limits_set_machine_positions+0xbc>
    if(settings.homing.flags.force_set_origin) {
 80135ca:	4b28      	ldr	r3, [pc, #160]	@ (801366c <limits_set_machine_positions+0xb8>)
 80135cc:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 80135d0:	f013 0f08 	tst.w	r3, #8
 80135d4:	d015      	beq.n	8013602 <limits_set_machine_positions+0x4e>
    uint_fast8_t idx = N_AXIS;
 80135d6:	2203      	movs	r2, #3
 80135d8:	e00c      	b.n	80135f4 <limits_set_machine_positions+0x40>
                sys.position[idx] = 0;
 80135da:	4b26      	ldr	r3, [pc, #152]	@ (8013674 <limits_set_machine_positions+0xc0>)
 80135dc:	f102 0122 	add.w	r1, r2, #34	@ 0x22
 80135e0:	2000      	movs	r0, #0
 80135e2:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
                sys.home_position[idx] = 0.0f;
 80135e6:	f102 0116 	add.w	r1, r2, #22
 80135ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80135ee:	2100      	movs	r1, #0
 80135f0:	6019      	str	r1, [r3, #0]
        } while(idx);
 80135f2:	b3c2      	cbz	r2, 8013666 <limits_set_machine_positions+0xb2>
            if (cycle.mask & bit(--idx)) {
 80135f4:	b2eb      	uxtb	r3, r5
 80135f6:	3a01      	subs	r2, #1
 80135f8:	40d3      	lsrs	r3, r2
 80135fa:	f013 0f01 	tst.w	r3, #1
 80135fe:	d0f8      	beq.n	80135f2 <limits_set_machine_positions+0x3e>
 8013600:	e7eb      	b.n	80135da <limits_set_machine_positions+0x26>
    uint_fast8_t idx = N_AXIS;
 8013602:	2403      	movs	r4, #3
 8013604:	e018      	b.n	8013638 <limits_set_machine_positions+0x84>
                                      : - pulloff;
 8013606:	eef1 7a48 	vneg.f32	s15, s16
            sys.home_position[idx] = bit_istrue(settings.homing.dir_mask.value, bit(idx))
 801360a:	4e1a      	ldr	r6, [pc, #104]	@ (8013674 <limits_set_machine_positions+0xc0>)
 801360c:	f104 0316 	add.w	r3, r4, #22
 8013610:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013614:	edc3 7a00 	vstr	s15, [r3]
            sys.position[idx] = lroundf(sys.home_position[idx] * settings.axis[idx].steps_per_mm);
 8013618:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801361c:	4b13      	ldr	r3, [pc, #76]	@ (801366c <limits_set_machine_positions+0xb8>)
 801361e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013622:	ed93 0a0c 	vldr	s0, [r3, #48]	@ 0x30
 8013626:	ee20 0a27 	vmul.f32	s0, s0, s15
 801362a:	f014 fabb 	bl	8027ba4 <lroundf>
 801362e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 8013632:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
    } while(idx);
 8013636:	b1b4      	cbz	r4, 8013666 <limits_set_machine_positions+0xb2>
        if (cycle.mask & bit(--idx)) {
 8013638:	b2eb      	uxtb	r3, r5
 801363a:	3c01      	subs	r4, #1
 801363c:	40e3      	lsrs	r3, r4
 801363e:	f013 0f01 	tst.w	r3, #1
 8013642:	d0f8      	beq.n	8013636 <limits_set_machine_positions+0x82>
            sys.home_position[idx] = bit_istrue(settings.homing.dir_mask.value, bit(idx))
 8013644:	4b09      	ldr	r3, [pc, #36]	@ (801366c <limits_set_machine_positions+0xb8>)
 8013646:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 801364a:	40e3      	lsrs	r3, r4
                                      : - pulloff;
 801364c:	f013 0f01 	tst.w	r3, #1
 8013650:	d0d9      	beq.n	8013606 <limits_set_machine_positions+0x52>
                                      ? settings.axis[idx].max_travel + pulloff
 8013652:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8013656:	4b05      	ldr	r3, [pc, #20]	@ (801366c <limits_set_machine_positions+0xb8>)
 8013658:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801365c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
                                      : - pulloff;
 8013660:	ee77 7a88 	vadd.f32	s15, s15, s16
 8013664:	e7d1      	b.n	801360a <limits_set_machine_positions+0x56>
}
 8013666:	ecbd 8b02 	vpop	{d8}
 801366a:	bd70      	pop	{r4, r5, r6, pc}
 801366c:	200022f4 	.word	0x200022f4
 8013670:	80000000 	.word	0x80000000
 8013674:	20001bbc 	.word	0x20001bbc

08013678 <homing_cycle>:
{
 8013678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801367c:	ed2d 8b02 	vpush	{d8}
 8013680:	b099      	sub	sp, #100	@ 0x64
 8013682:	f88d 000e 	strb.w	r0, [sp, #14]
 8013686:	f88d 100f 	strb.w	r1, [sp, #15]
    if (ABORTED) // Block if system reset has been issued.
 801368a:	4b92      	ldr	r3, [pc, #584]	@ (80138d4 <homing_cycle+0x25c>)
 801368c:	881b      	ldrh	r3, [r3, #0]
 801368e:	b12b      	cbz	r3, 801369c <homing_cycle+0x24>
        return false;
 8013690:	2000      	movs	r0, #0
}
 8013692:	b019      	add	sp, #100	@ 0x64
 8013694:	ecbd 8b02 	vpop	{d8}
 8013698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint_fast8_t n_cycle = (2 * settings.homing.locate_cycles + 1);
 801369c:	4b8e      	ldr	r3, [pc, #568]	@ (80138d8 <homing_cycle+0x260>)
 801369e:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 80136a2:	005b      	lsls	r3, r3, #1
 80136a4:	3301      	adds	r3, #1
 80136a6:	9302      	str	r3, [sp, #8]
    plan_data_init(&plan_data);
 80136a8:	a806      	add	r0, sp, #24
 80136aa:	f003 fcf9 	bl	80170a0 <plan_data_init>
    plan_data.condition.system_motion = On;
 80136ae:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 80136b2:	f043 0302 	orr.w	r3, r3, #2
 80136b6:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    plan_data.condition.no_feed_override = On;
 80136ba:	b2db      	uxtb	r3, r3
 80136bc:	f043 0310 	orr.w	r3, r3, #16
 80136c0:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    plan_data.line_number = DEFAULT_HOMING_CYCLE_LINE_NUMBER;
 80136c4:	2500      	movs	r5, #0
 80136c6:	950d      	str	r5, [sp, #52]	@ 0x34
    memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t));
 80136c8:	4e84      	ldr	r6, [pc, #528]	@ (80138dc <homing_cycle+0x264>)
 80136ca:	ac07      	add	r4, sp, #28
 80136cc:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 80136d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80136d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    plan_data.condition.coolant = gc_state.modal.coolant;
 80136d6:	7e73      	ldrb	r3, [r6, #25]
 80136d8:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
    uint_fast8_t idx = N_AXIS;
 80136dc:	f04f 0a03 	mov.w	sl, #3
    float max_travel = 0.0f, homing_rate;
 80136e0:	eddf 8a7f 	vldr	s17, [pc, #508]	@ 80138e0 <homing_cycle+0x268>
    uint_fast8_t step_pin[N_AXIS], n_active_axis, dual_motor_axis = 0;
 80136e4:	46a9      	mov	r9, r5
 80136e6:	4653      	mov	r3, sl
 80136e8:	e000      	b.n	80136ec <homing_cycle+0x74>
    } while(idx);
 80136ea:	b343      	cbz	r3, 801373e <homing_cycle+0xc6>
        idx--;
 80136ec:	3b01      	subs	r3, #1
        step_pin[idx] = bit(idx);
 80136ee:	2201      	movs	r2, #1
 80136f0:	409a      	lsls	r2, r3
 80136f2:	a918      	add	r1, sp, #96	@ 0x60
 80136f4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80136f8:	f841 2c10 	str.w	r2, [r1, #-16]
        if(bit_istrue(cycle.mask, bit(idx))) {
 80136fc:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8013700:	fa22 f103 	lsr.w	r1, r2, r3
 8013704:	f011 0f01 	tst.w	r1, #1
 8013708:	d0ef      	beq.n	80136ea <homing_cycle+0x72>
            max_travel = max(max_travel, (-HOMING_AXIS_SEARCH_SCALAR) * settings.axis[idx].max_travel);
 801370a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 801370e:	4972      	ldr	r1, [pc, #456]	@ (80138d8 <homing_cycle+0x260>)
 8013710:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8013714:	edd1 7a0f 	vldr	s15, [r1, #60]	@ 0x3c
 8013718:	eebf 7a08 	vmov.f32	s14, #248	@ 0xbfc00000 -1.5
 801371c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013720:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013728:	d401      	bmi.n	801372e <homing_cycle+0xb6>
 801372a:	eef0 8a67 	vmov.f32	s17, s15
            if(bit_istrue(auto_square.mask, bit(idx)))
 801372e:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8013732:	40d9      	lsrs	r1, r3
 8013734:	f011 0f01 	tst.w	r1, #1
 8013738:	d0d7      	beq.n	80136ea <homing_cycle+0x72>
                dual_motor_axis = idx;
 801373a:	4699      	mov	r9, r3
 801373c:	e7d5      	b.n	80136ea <homing_cycle+0x72>
    if(max_travel == 0.0f)
 801373e:	9204      	str	r2, [sp, #16]
 8013740:	469a      	mov	sl, r3
 8013742:	eef5 8a40 	vcmp.f32	s17, #0.0
 8013746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801374a:	f000 8200 	beq.w	8013b4e <homing_cycle+0x4d6>
    if((homing_rate = hal.homing.get_feedrate(cycle, HomingMode_Seek)) == 0.0f)
 801374e:	4b65      	ldr	r3, [pc, #404]	@ (80138e4 <homing_cycle+0x26c>)
 8013750:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013752:	2100      	movs	r1, #0
 8013754:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8013758:	4798      	blx	r3
 801375a:	eeb0 8a40 	vmov.f32	s16, s0
 801375e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8013762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013766:	f000 81f4 	beq.w	8013b52 <homing_cycle+0x4da>
    if(auto_square.mask) {
 801376a:	f89d b00f 	ldrb.w	fp, [sp, #15]
 801376e:	f1bb 0f00 	cmp.w	fp, #0
 8013772:	d031      	beq.n	80137d8 <homing_cycle+0x160>
        float fail_distance = (-settings.homing.dual_axis.fail_length_percent / 100.0f) * settings.axis[dual_motor_axis].max_travel;
 8013774:	4b58      	ldr	r3, [pc, #352]	@ (80138d8 <homing_cycle+0x260>)
 8013776:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 801377a:	eeb1 7a47 	vneg.f32	s14, s14
 801377e:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 80138e8 <homing_cycle+0x270>
 8013782:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013786:	eb09 0189 	add.w	r1, r9, r9, lsl #2
 801378a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801378e:	ed91 7a0f 	vldr	s14, [r1, #60]	@ 0x3c
 8013792:	ee67 7a87 	vmul.f32	s15, s15, s14
        fail_distance = min(fail_distance, settings.homing.dual_axis.fail_distance_max);
 8013796:	ed93 7a47 	vldr	s14, [r3, #284]	@ 0x11c
 801379a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801379e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137a2:	dd01      	ble.n	80137a8 <homing_cycle+0x130>
 80137a4:	eeb0 7a67 	vmov.f32	s14, s15
        fail_distance = max(fail_distance, settings.homing.dual_axis.fail_distance_min);
 80137a8:	4b4b      	ldr	r3, [pc, #300]	@ (80138d8 <homing_cycle+0x260>)
 80137aa:	edd3 6a48 	vldr	s13, [r3, #288]	@ 0x120
 80137ae:	eef4 6ac7 	vcmpe.f32	s13, s14
 80137b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137b6:	d501      	bpl.n	80137bc <homing_cycle+0x144>
 80137b8:	eef0 6a47 	vmov.f32	s13, s14
        autosquare_fail_distance = truncf(fail_distance * settings.axis[dual_motor_axis].steps_per_mm);
 80137bc:	eb09 0189 	add.w	r1, r9, r9, lsl #2
 80137c0:	4b45      	ldr	r3, [pc, #276]	@ (80138d8 <homing_cycle+0x260>)
 80137c2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80137c6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80137ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80137ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80137d2:	edcd 7a01 	vstr	s15, [sp, #4]
 80137d6:	e001      	b.n	80137dc <homing_cycle+0x164>
    int32_t initial_trigger_position = 0, autosquare_fail_distance = 0;
 80137d8:	2300      	movs	r3, #0
 80137da:	9301      	str	r3, [sp, #4]
 80137dc:	2700      	movs	r7, #0
 80137de:	463e      	mov	r6, r7
 80137e0:	46b8      	mov	r8, r7
 80137e2:	9700      	str	r7, [sp, #0]
 80137e4:	f8cd a014 	str.w	sl, [sp, #20]
 80137e8:	f89d a00f 	ldrb.w	sl, [sp, #15]
 80137ec:	e137      	b.n	8013a5e <homing_cycle+0x3e6>
                    target.values[idx] = mode == HomingMode_Pulloff ? max_travel : - max_travel;
 80137ee:	eef0 7a68 	vmov.f32	s15, s17
 80137f2:	aa18      	add	r2, sp, #96	@ 0x60
 80137f4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80137f8:	ed42 7a08 	vstr	s15, [r2, #-32]	@ 0xffffffe0
                axislock.mask |= step_pin[idx];
 80137fc:	b2e4      	uxtb	r4, r4
 80137fe:	aa18      	add	r2, sp, #96	@ 0x60
 8013800:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013804:	f852 2c10 	ldr.w	r2, [r2, #-16]
 8013808:	4314      	orrs	r4, r2
        } while(idx);
 801380a:	b333      	cbz	r3, 801385a <homing_cycle+0x1e2>
            if (bit_istrue(cycle.mask, bit(--idx))) {
 801380c:	3b01      	subs	r3, #1
 801380e:	fa21 f203 	lsr.w	r2, r1, r3
 8013812:	f012 0f01 	tst.w	r2, #1
 8013816:	d0f8      	beq.n	801380a <homing_cycle+0x192>
                n_active_axis++;
 8013818:	3501      	adds	r5, #1
                sys.position[idx] = 0;
 801381a:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 801381e:	482d      	ldr	r0, [pc, #180]	@ (80138d4 <homing_cycle+0x25c>)
 8013820:	f04f 0c00 	mov.w	ip, #0
 8013824:	f840 c022 	str.w	ip, [r0, r2, lsl #2]
                if (bit_istrue(settings.homing.dir_mask.value, bit(idx)))
 8013828:	4a2b      	ldr	r2, [pc, #172]	@ (80138d8 <homing_cycle+0x260>)
 801382a:	f892 2110 	ldrb.w	r2, [r2, #272]	@ 0x110
 801382e:	40da      	lsrs	r2, r3
 8013830:	f012 0f01 	tst.w	r2, #1
 8013834:	d004      	beq.n	8013840 <homing_cycle+0x1c8>
                    target.values[idx] = mode == HomingMode_Pulloff ? max_travel : - max_travel;
 8013836:	2e02      	cmp	r6, #2
 8013838:	d0d9      	beq.n	80137ee <homing_cycle+0x176>
 801383a:	eef1 7a68 	vneg.f32	s15, s17
 801383e:	e7d8      	b.n	80137f2 <homing_cycle+0x17a>
                    target.values[idx] = mode == HomingMode_Pulloff ? - max_travel : max_travel;
 8013840:	2e02      	cmp	r6, #2
 8013842:	d007      	beq.n	8013854 <homing_cycle+0x1dc>
 8013844:	eef0 7a68 	vmov.f32	s15, s17
 8013848:	aa18      	add	r2, sp, #96	@ 0x60
 801384a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801384e:	ed42 7a08 	vstr	s15, [r2, #-32]	@ 0xffffffe0
 8013852:	e7d3      	b.n	80137fc <homing_cycle+0x184>
 8013854:	eef1 7a68 	vneg.f32	s15, s17
 8013858:	e7f6      	b.n	8013848 <homing_cycle+0x1d0>
        if(grbl.on_homing_rate_set)
 801385a:	4b24      	ldr	r3, [pc, #144]	@ (80138ec <homing_cycle+0x274>)
 801385c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013860:	b12b      	cbz	r3, 801386e <homing_cycle+0x1f6>
            grbl.on_homing_rate_set(cycle, homing_rate, mode);
 8013862:	4631      	mov	r1, r6
 8013864:	eeb0 0a48 	vmov.f32	s0, s16
 8013868:	f89d 000e 	ldrb.w	r0, [sp, #14]
 801386c:	4798      	blx	r3
        homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 801386e:	ee07 5a90 	vmov	s15, r5
 8013872:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8013876:	f014 f8b7 	bl	80279e8 <sqrtf>
 801387a:	ee28 0a00 	vmul.f32	s0, s16, s0
        plan_data.feed_rate = homing_rate;      // Set current homing rate.
 801387e:	ed8d 0a06 	vstr	s0, [sp, #24]
        sys.homing_axis_lock.mask = axislock.mask;
 8013882:	4d14      	ldr	r5, [pc, #80]	@ (80138d4 <homing_cycle+0x25c>)
 8013884:	766c      	strb	r4, [r5, #25]
        plan_buffer_line(target.values, &plan_data);    // Bypass mc_line(). Directly plan homing motion.
 8013886:	a906      	add	r1, sp, #24
 8013888:	a810      	add	r0, sp, #64	@ 0x40
 801388a:	f003 f9cd 	bl	8016c28 <plan_buffer_line>
        sys.step_control.flags = 0;
 801388e:	2300      	movs	r3, #0
 8013890:	762b      	strb	r3, [r5, #24]
        sys.step_control.execute_sys_motion = On; // Set to execute homing motion and clear existing flags.
 8013892:	2304      	movs	r3, #4
 8013894:	762b      	strb	r3, [r5, #24]
        st_prep_buffer();   // Prep and fill segment buffer from newly planned block.
 8013896:	f00c fc45 	bl	8020124 <st_prep_buffer>
        st_wake_up();       // Initiate motion
 801389a:	f00c f951 	bl	801fb40 <st_wake_up>
 801389e:	e045      	b.n	801392c <homing_cycle+0x2b4>
                        squaring_mode = (signals_state.a.mask & auto_square.mask) ? SquaringMode_A : SquaringMode_B;
 80138a0:	f04f 0802 	mov.w	r8, #2
 80138a4:	e071      	b.n	801398a <homing_cycle+0x312>
                } while(idx);
 80138a6:	b31b      	cbz	r3, 80138f0 <homing_cycle+0x278>
                    idx--;
 80138a8:	3b01      	subs	r3, #1
                    if ((axislock.mask & step_pin[idx]) && (homing_state.mask & bit(idx))) {
 80138aa:	b2e2      	uxtb	r2, r4
 80138ac:	a918      	add	r1, sp, #96	@ 0x60
 80138ae:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80138b2:	f851 1c10 	ldr.w	r1, [r1, #-16]
 80138b6:	420a      	tst	r2, r1
 80138b8:	d0f5      	beq.n	80138a6 <homing_cycle+0x22e>
 80138ba:	b2e9      	uxtb	r1, r5
 80138bc:	40d9      	lsrs	r1, r3
 80138be:	f011 0f01 	tst.w	r1, #1
 80138c2:	d0f0      	beq.n	80138a6 <homing_cycle+0x22e>
                        axislock.mask &= ~bit(idx);
 80138c4:	2401      	movs	r4, #1
 80138c6:	409c      	lsls	r4, r3
 80138c8:	ea22 0404 	bic.w	r4, r2, r4
                        if(idx == dual_motor_axis)
 80138cc:	4599      	cmp	r9, r3
 80138ce:	d1ea      	bne.n	80138a6 <homing_cycle+0x22e>
                            autosquare_check = false;
 80138d0:	2700      	movs	r7, #0
 80138d2:	e7e8      	b.n	80138a6 <homing_cycle+0x22e>
 80138d4:	20001bbc 	.word	0x20001bbc
 80138d8:	200022f4 	.word	0x200022f4
 80138dc:	20001614 	.word	0x20001614
 80138e0:	00000000 	.word	0x00000000
 80138e4:	200018dc 	.word	0x200018dc
 80138e8:	42c80000 	.word	0x42c80000
 80138ec:	20001ac4 	.word	0x20001ac4
                sys.homing_axis_lock.mask = axislock.mask;
 80138f0:	4b99      	ldr	r3, [pc, #612]	@ (8013b58 <homing_cycle+0x4e0>)
 80138f2:	765c      	strb	r4, [r3, #25]
                if (autosquare_check && abs(initial_trigger_position - sys.position[dual_motor_axis]) > autosquare_fail_distance) {
 80138f4:	b167      	cbz	r7, 8013910 <homing_cycle+0x298>
 80138f6:	f109 0322 	add.w	r3, r9, #34	@ 0x22
 80138fa:	4a97      	ldr	r2, [pc, #604]	@ (8013b58 <homing_cycle+0x4e0>)
 80138fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013900:	9a00      	ldr	r2, [sp, #0]
 8013902:	1ad3      	subs	r3, r2, r3
 8013904:	2b00      	cmp	r3, #0
 8013906:	bfb8      	it	lt
 8013908:	425b      	neglt	r3, r3
 801390a:	9a01      	ldr	r2, [sp, #4]
 801390c:	4293      	cmp	r3, r2
 801390e:	dc44      	bgt.n	801399a <homing_cycle+0x322>
            st_prep_buffer(); // Check and prep segment buffer.
 8013910:	f00c fc08 	bl	8020124 <st_prep_buffer>
            if (sys.rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_COMPLETE)) {
 8013914:	4b90      	ldr	r3, [pc, #576]	@ (8013b58 <homing_cycle+0x4e0>)
 8013916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013918:	f013 0f64 	tst.w	r3, #100	@ 0x64
 801391c:	d148      	bne.n	80139b0 <homing_cycle+0x338>
            grbl.on_execute_realtime(STATE_HOMING);
 801391e:	4b8f      	ldr	r3, [pc, #572]	@ (8013b5c <homing_cycle+0x4e4>)
 8013920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013922:	2004      	movs	r0, #4
 8013924:	4798      	blx	r3
        } while (axislock.mask & AXES_BITMASK);
 8013926:	f014 0f07 	tst.w	r4, #7
 801392a:	d066      	beq.n	80139fa <homing_cycle+0x382>
            if (mode != HomingMode_Pulloff) {
 801392c:	2e02      	cmp	r6, #2
 801392e:	d0ef      	beq.n	8013910 <homing_cycle+0x298>
                homing_state = homing_signals_select(signals_state = hal.homing.get_state(), auto_square, squaring_mode);
 8013930:	4b8b      	ldr	r3, [pc, #556]	@ (8013b60 <homing_cycle+0x4e8>)
 8013932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013934:	4798      	blx	r3
 8013936:	f8ad 004c 	strh.w	r0, [sp, #76]	@ 0x4c
 801393a:	4642      	mov	r2, r8
 801393c:	4651      	mov	r1, sl
 801393e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8013940:	f7ff f914 	bl	8012b6c <homing_signals_select>
 8013944:	4605      	mov	r5, r0
                if((homing_state.mask & auto_square.mask) && squaring_mode == SquaringMode_Both) {
 8013946:	b2c2      	uxtb	r2, r0
 8013948:	ea1b 0f05 	tst.w	fp, r5
 801394c:	d023      	beq.n	8013996 <homing_cycle+0x31e>
 801394e:	f1b8 0f00 	cmp.w	r8, #0
 8013952:	d120      	bne.n	8013996 <homing_cycle+0x31e>
                    if((autosquare_check = (signals_state.a.mask & auto_square.mask) != (signals_state.b.mask & auto_square.mask))) {
 8013954:	f89d 104c 	ldrb.w	r1, [sp, #76]	@ 0x4c
 8013958:	f89d 304d 	ldrb.w	r3, [sp, #77]	@ 0x4d
 801395c:	404b      	eors	r3, r1
 801395e:	ea0b 0303 	and.w	r3, fp, r3
 8013962:	2b00      	cmp	r3, #0
 8013964:	bf14      	ite	ne
 8013966:	2701      	movne	r7, #1
 8013968:	2700      	moveq	r7, #0
 801396a:	d014      	beq.n	8013996 <homing_cycle+0x31e>
                        initial_trigger_position = sys.position[dual_motor_axis];
 801396c:	f109 0322 	add.w	r3, r9, #34	@ 0x22
 8013970:	4879      	ldr	r0, [pc, #484]	@ (8013b58 <homing_cycle+0x4e0>)
 8013972:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8013976:	9300      	str	r3, [sp, #0]
                        homing_state.mask &= ~auto_square.mask;
 8013978:	ea6f 050b 	mvn.w	r5, fp
 801397c:	b26d      	sxtb	r5, r5
 801397e:	4015      	ands	r5, r2
                        squaring_mode = (signals_state.a.mask & auto_square.mask) ? SquaringMode_A : SquaringMode_B;
 8013980:	ea1b 0f01 	tst.w	fp, r1
 8013984:	d08c      	beq.n	80138a0 <homing_cycle+0x228>
 8013986:	f04f 0801 	mov.w	r8, #1
                        hal.stepper.disable_motors(auto_square, squaring_mode);
 801398a:	4b75      	ldr	r3, [pc, #468]	@ (8013b60 <homing_cycle+0x4e8>)
 801398c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013990:	4641      	mov	r1, r8
 8013992:	4650      	mov	r0, sl
 8013994:	4798      	blx	r3
                idx = N_AXIS;
 8013996:	2303      	movs	r3, #3
 8013998:	e786      	b.n	80138a8 <homing_cycle+0x230>
                    system_set_exec_alarm(Alarm_HomingFailAutoSquaringApproach);
 801399a:	4b71      	ldr	r3, [pc, #452]	@ (8013b60 <homing_cycle+0x4e8>)
 801399c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801399e:	210f      	movs	r1, #15
 80139a0:	4870      	ldr	r0, [pc, #448]	@ (8013b64 <homing_cycle+0x4ec>)
 80139a2:	4798      	blx	r3
                    mc_reset();
 80139a4:	f001 fa7c 	bl	8014ea0 <mc_reset>
                    protocol_execute_realtime();
 80139a8:	f004 f846 	bl	8017a38 <protocol_execute_realtime>
                    return false;
 80139ac:	2000      	movs	r0, #0
 80139ae:	e670      	b.n	8013692 <homing_cycle+0x1a>
                uint_fast16_t rt_exec = sys.rt_exec_state;
 80139b0:	4b69      	ldr	r3, [pc, #420]	@ (8013b58 <homing_cycle+0x4e0>)
 80139b2:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                if (rt_exec & EXEC_RESET)
 80139b4:	f014 0f20 	tst.w	r4, #32
 80139b8:	d004      	beq.n	80139c4 <homing_cycle+0x34c>
                    system_set_exec_alarm(Alarm_HomingFailReset);
 80139ba:	4b69      	ldr	r3, [pc, #420]	@ (8013b60 <homing_cycle+0x4e8>)
 80139bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80139be:	2106      	movs	r1, #6
 80139c0:	4868      	ldr	r0, [pc, #416]	@ (8013b64 <homing_cycle+0x4ec>)
 80139c2:	4798      	blx	r3
                if (rt_exec & EXEC_SAFETY_DOOR)
 80139c4:	f014 0f40 	tst.w	r4, #64	@ 0x40
 80139c8:	d004      	beq.n	80139d4 <homing_cycle+0x35c>
                    system_set_exec_alarm(Alarm_HomingFailDoor);
 80139ca:	4b65      	ldr	r3, [pc, #404]	@ (8013b60 <homing_cycle+0x4e8>)
 80139cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80139ce:	2107      	movs	r1, #7
 80139d0:	4864      	ldr	r0, [pc, #400]	@ (8013b64 <homing_cycle+0x4ec>)
 80139d2:	4798      	blx	r3
                hal.delay_ms(2, NULL);
 80139d4:	4b62      	ldr	r3, [pc, #392]	@ (8013b60 <homing_cycle+0x4e8>)
 80139d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139d8:	2100      	movs	r1, #0
 80139da:	2002      	movs	r0, #2
 80139dc:	4798      	blx	r3
                if (mode == HomingMode_Pulloff && (homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask & cycle.mask))
 80139de:	2e02      	cmp	r6, #2
 80139e0:	d047      	beq.n	8013a72 <homing_cycle+0x3fa>
                if (mode != HomingMode_Pulloff && (rt_exec & EXEC_CYCLE_COMPLETE))
 80139e2:	f014 0f04 	tst.w	r4, #4
 80139e6:	d158      	bne.n	8013a9a <homing_cycle+0x422>
                if (sys.rt_exec_alarm) {
 80139e8:	4b5b      	ldr	r3, [pc, #364]	@ (8013b58 <homing_cycle+0x4e0>)
 80139ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d15a      	bne.n	8013aa6 <homing_cycle+0x42e>
                    system_clear_exec_state_flag(EXEC_CYCLE_COMPLETE);
 80139f0:	4b5b      	ldr	r3, [pc, #364]	@ (8013b60 <homing_cycle+0x4e8>)
 80139f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80139f4:	2104      	movs	r1, #4
 80139f6:	485c      	ldr	r0, [pc, #368]	@ (8013b68 <homing_cycle+0x4f0>)
 80139f8:	4798      	blx	r3
        st_reset(); // Immediately force kill steppers and reset step segment buffer.
 80139fa:	f00c fa69 	bl	801fed0 <st_reset>
        hal.delay_ms(settings.homing.debounce_delay, NULL); // Delay to allow transient dynamics to dissipate.
 80139fe:	4b58      	ldr	r3, [pc, #352]	@ (8013b60 <homing_cycle+0x4e8>)
 8013a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a02:	2100      	movs	r1, #0
 8013a04:	4a59      	ldr	r2, [pc, #356]	@ (8013b6c <homing_cycle+0x4f4>)
 8013a06:	f8b2 0112 	ldrh.w	r0, [r2, #274]	@ 0x112
 8013a0a:	4798      	blx	r3
        mode = mode == HomingMode_Pulloff ? HomingMode_Locate : HomingMode_Pulloff;
 8013a0c:	2e02      	cmp	r6, #2
 8013a0e:	d050      	beq.n	8013ab2 <homing_cycle+0x43a>
 8013a10:	2602      	movs	r6, #2
        homing_rate = hal.homing.get_feedrate(cycle, mode);
 8013a12:	4b53      	ldr	r3, [pc, #332]	@ (8013b60 <homing_cycle+0x4e8>)
 8013a14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013a16:	4631      	mov	r1, r6
 8013a18:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8013a1c:	4798      	blx	r3
 8013a1e:	eeb0 8a40 	vmov.f32	s16, s0
        if (mode == HomingMode_Locate) {
 8013a22:	2e01      	cmp	r6, #1
 8013a24:	d047      	beq.n	8013ab6 <homing_cycle+0x43e>
            max_travel = settings.homing.pulloff;
 8013a26:	4b51      	ldr	r3, [pc, #324]	@ (8013b6c <homing_cycle+0x4f4>)
 8013a28:	edd3 8a43 	vldr	s17, [r3, #268]	@ 0x10c
        if(auto_square.mask) {
 8013a2c:	f1bb 0f00 	cmp.w	fp, #0
 8013a30:	d007      	beq.n	8013a42 <homing_cycle+0x3ca>
            hal.stepper.disable_motors((axes_signals_t){0}, SquaringMode_Both);
 8013a32:	4b4b      	ldr	r3, [pc, #300]	@ (8013b60 <homing_cycle+0x4e8>)
 8013a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013a38:	2700      	movs	r7, #0
 8013a3a:	4639      	mov	r1, r7
 8013a3c:	4638      	mov	r0, r7
 8013a3e:	4798      	blx	r3
            squaring_mode = SquaringMode_Both;
 8013a40:	46b8      	mov	r8, r7
    } while (homing_rate > 0.0f && cycle.mask && n_cycle-- > 0);
 8013a42:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a4a:	dd3c      	ble.n	8013ac6 <homing_cycle+0x44e>
 8013a4c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d038      	beq.n	8013ac6 <homing_cycle+0x44e>
 8013a54:	9a02      	ldr	r2, [sp, #8]
 8013a56:	1e53      	subs	r3, r2, #1
 8013a58:	2a00      	cmp	r2, #0
 8013a5a:	d034      	beq.n	8013ac6 <homing_cycle+0x44e>
 8013a5c:	9302      	str	r3, [sp, #8]
        system_convert_array_steps_to_mpos(target.values, sys.position);
 8013a5e:	4944      	ldr	r1, [pc, #272]	@ (8013b70 <homing_cycle+0x4f8>)
 8013a60:	a810      	add	r0, sp, #64	@ 0x40
 8013a62:	f00e fa89 	bl	8021f78 <system_convert_array_steps_to_mpos>
        axislock = (axes_signals_t){0};
 8013a66:	f04f 0400 	mov.w	r4, #0
        n_active_axis = 0;
 8013a6a:	9d05      	ldr	r5, [sp, #20]
        idx = N_AXIS;
 8013a6c:	2303      	movs	r3, #3
 8013a6e:	9904      	ldr	r1, [sp, #16]
 8013a70:	e6cc      	b.n	801380c <homing_cycle+0x194>
                if (mode == HomingMode_Pulloff && (homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask & cycle.mask))
 8013a72:	4b3b      	ldr	r3, [pc, #236]	@ (8013b60 <homing_cycle+0x4e8>)
 8013a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013a76:	4798      	blx	r3
 8013a78:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	4611      	mov	r1, r2
 8013a80:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013a82:	f7ff f873 	bl	8012b6c <homing_signals_select>
 8013a86:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8013a8a:	4203      	tst	r3, r0
 8013a8c:	d0ac      	beq.n	80139e8 <homing_cycle+0x370>
                    system_set_exec_alarm(Alarm_FailPulloff);
 8013a8e:	4b34      	ldr	r3, [pc, #208]	@ (8013b60 <homing_cycle+0x4e8>)
 8013a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a92:	2108      	movs	r1, #8
 8013a94:	4833      	ldr	r0, [pc, #204]	@ (8013b64 <homing_cycle+0x4ec>)
 8013a96:	4798      	blx	r3
                if (mode != HomingMode_Pulloff && (rt_exec & EXEC_CYCLE_COMPLETE))
 8013a98:	e7a6      	b.n	80139e8 <homing_cycle+0x370>
                    system_set_exec_alarm(Alarm_HomingFailApproach);
 8013a9a:	4b31      	ldr	r3, [pc, #196]	@ (8013b60 <homing_cycle+0x4e8>)
 8013a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a9e:	2109      	movs	r1, #9
 8013aa0:	4830      	ldr	r0, [pc, #192]	@ (8013b64 <homing_cycle+0x4ec>)
 8013aa2:	4798      	blx	r3
 8013aa4:	e7a0      	b.n	80139e8 <homing_cycle+0x370>
                    mc_reset(); // Stop motors, if they are running.
 8013aa6:	f001 f9fb 	bl	8014ea0 <mc_reset>
                    protocol_execute_realtime();
 8013aaa:	f003 ffc5 	bl	8017a38 <protocol_execute_realtime>
                    return false;
 8013aae:	2000      	movs	r0, #0
 8013ab0:	e5ef      	b.n	8013692 <homing_cycle+0x1a>
        mode = mode == HomingMode_Pulloff ? HomingMode_Locate : HomingMode_Pulloff;
 8013ab2:	2601      	movs	r6, #1
 8013ab4:	e7ad      	b.n	8013a12 <homing_cycle+0x39a>
            max_travel = settings.homing.pulloff * HOMING_AXIS_LOCATE_SCALAR;
 8013ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8013b6c <homing_cycle+0x4f4>)
 8013ab8:	edd3 8a43 	vldr	s17, [r3, #268]	@ 0x10c
 8013abc:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8013ac0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013ac4:	e7b2      	b.n	8013a2c <homing_cycle+0x3b4>
    if(auto_square.mask && settings.axis[dual_motor_axis].dual_axis_offset != 0.0f) {
 8013ac6:	f1bb 0f00 	cmp.w	fp, #0
 8013aca:	d02d      	beq.n	8013b28 <homing_cycle+0x4b0>
 8013acc:	eb09 0289 	add.w	r2, r9, r9, lsl #2
 8013ad0:	4b26      	ldr	r3, [pc, #152]	@ (8013b6c <homing_cycle+0x4f4>)
 8013ad2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013ad6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8013ada:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ae2:	d021      	beq.n	8013b28 <homing_cycle+0x4b0>
        hal.stepper.disable_motors(auto_square, settings.axis[dual_motor_axis].dual_axis_offset < 0.0f ? SquaringMode_B : SquaringMode_A);
 8013ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8013b60 <homing_cycle+0x4e8>)
 8013ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013aea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013af2:	d42a      	bmi.n	8013b4a <homing_cycle+0x4d2>
 8013af4:	2101      	movs	r1, #1
 8013af6:	f89d 400f 	ldrb.w	r4, [sp, #15]
 8013afa:	4620      	mov	r0, r4
 8013afc:	4798      	blx	r3
        if(!limits_pull_off(auto_square, fabs(settings.axis[dual_motor_axis].dual_axis_offset)))
 8013afe:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8013b02:	4b1a      	ldr	r3, [pc, #104]	@ (8013b6c <homing_cycle+0x4f4>)
 8013b04:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8013b08:	ed93 0a10 	vldr	s0, [r3, #64]	@ 0x40
 8013b0c:	eeb0 0ac0 	vabs.f32	s0, s0
 8013b10:	4620      	mov	r0, r4
 8013b12:	f7ff fa07 	bl	8012f24 <limits_pull_off>
 8013b16:	2800      	cmp	r0, #0
 8013b18:	f43f adbb 	beq.w	8013692 <homing_cycle+0x1a>
        hal.stepper.disable_motors((axes_signals_t){0}, SquaringMode_Both);
 8013b1c:	4b10      	ldr	r3, [pc, #64]	@ (8013b60 <homing_cycle+0x4e8>)
 8013b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013b22:	2100      	movs	r1, #0
 8013b24:	4608      	mov	r0, r1
 8013b26:	4798      	blx	r3
    limits_set_machine_positions(cycle, true);
 8013b28:	2101      	movs	r1, #1
 8013b2a:	f89d 400e 	ldrb.w	r4, [sp, #14]
 8013b2e:	4620      	mov	r0, r4
 8013b30:	f7ff fd40 	bl	80135b4 <limits_set_machine_positions>
    sys.step_control.flags = 0; // Return step control to normal operation.
 8013b34:	4a08      	ldr	r2, [pc, #32]	@ (8013b58 <homing_cycle+0x4e0>)
 8013b36:	2300      	movs	r3, #0
 8013b38:	7613      	strb	r3, [r2, #24]
    sys.homed.mask |= cycle.mask;
 8013b3a:	f892 1054 	ldrb.w	r1, [r2, #84]	@ 0x54
 8013b3e:	b2e3      	uxtb	r3, r4
 8013b40:	430b      	orrs	r3, r1
 8013b42:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
    return true;
 8013b46:	2001      	movs	r0, #1
 8013b48:	e5a3      	b.n	8013692 <homing_cycle+0x1a>
        hal.stepper.disable_motors(auto_square, settings.axis[dual_motor_axis].dual_axis_offset < 0.0f ? SquaringMode_B : SquaringMode_A);
 8013b4a:	2102      	movs	r1, #2
 8013b4c:	e7d3      	b.n	8013af6 <homing_cycle+0x47e>
        return true;
 8013b4e:	2001      	movs	r0, #1
 8013b50:	e59f      	b.n	8013692 <homing_cycle+0x1a>
        return false;
 8013b52:	2000      	movs	r0, #0
 8013b54:	e59d      	b.n	8013692 <homing_cycle+0x1a>
 8013b56:	bf00      	nop
 8013b58:	20001bbc 	.word	0x20001bbc
 8013b5c:	20001ac4 	.word	0x20001ac4
 8013b60:	200018dc 	.word	0x200018dc
 8013b64:	20001c08 	.word	0x20001c08
 8013b68:	20001c04 	.word	0x20001c04
 8013b6c:	200022f4 	.word	0x200022f4
 8013b70:	20001c44 	.word	0x20001c44

08013b74 <limits_go_home>:
{
 8013b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b76:	b083      	sub	sp, #12
 8013b78:	4607      	mov	r7, r0
    axes_signals_t auto_square = {0}, auto_squared = {0};
 8013b7a:	2600      	movs	r6, #0
 8013b7c:	4634      	mov	r4, r6
    hal.limits.enable(settings.limits.flags.hard_enabled, cycle); // Disable hard limits pin change register for cycle duration
 8013b7e:	4d24      	ldr	r5, [pc, #144]	@ (8013c10 <limits_go_home+0x9c>)
 8013b80:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8013b82:	4a24      	ldr	r2, [pc, #144]	@ (8013c14 <limits_go_home+0xa0>)
 8013b84:	f892 0124 	ldrb.w	r0, [r2, #292]	@ 0x124
 8013b88:	4639      	mov	r1, r7
 8013b8a:	f000 0001 	and.w	r0, r0, #1
 8013b8e:	4798      	blx	r3
    if(hal.stepper.get_ganged)
 8013b90:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8013b94:	b113      	cbz	r3, 8013b9c <limits_go_home+0x28>
        auto_squared = hal.stepper.get_ganged(true);
 8013b96:	2001      	movs	r0, #1
 8013b98:	4798      	blx	r3
 8013b9a:	4606      	mov	r6, r0
    auto_squared.mask &= cycle.mask;
 8013b9c:	b2fd      	uxtb	r5, r7
    if(auto_squared.mask) {
 8013b9e:	4035      	ands	r5, r6
 8013ba0:	d018      	beq.n	8013bd4 <limits_go_home+0x60>
        if(!hal.stepper.disable_motors)
 8013ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8013c10 <limits_go_home+0x9c>)
 8013ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013ba8:	b363      	cbz	r3, 8013c04 <limits_go_home+0x90>
        auto_square.x = On;
 8013baa:	f04f 0401 	mov.w	r4, #1
        while(!(auto_squared.mask & auto_square.mask))
 8013bae:	e000      	b.n	8013bb2 <limits_go_home+0x3e>
            auto_square.mask <<= 1;
 8013bb0:	005c      	lsls	r4, r3, #1
        while(!(auto_squared.mask & auto_square.mask))
 8013bb2:	b2e3      	uxtb	r3, r4
 8013bb4:	4225      	tst	r5, r4
 8013bb6:	d0fb      	beq.n	8013bb0 <limits_go_home+0x3c>
        if(auto_squared.mask != auto_square.mask)
 8013bb8:	429d      	cmp	r5, r3
 8013bba:	d125      	bne.n	8013c08 <limits_go_home+0x94>
        if((auto_squared.mask & homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask) && !limits_pull_off(auto_square, settings.homing.pulloff * HOMING_AXIS_LOCATE_SCALAR))
 8013bbc:	4b14      	ldr	r3, [pc, #80]	@ (8013c10 <limits_go_home+0x9c>)
 8013bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013bc0:	4798      	blx	r3
 8013bc2:	f8ad 0004 	strh.w	r0, [sp, #4]
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	4611      	mov	r1, r2
 8013bca:	9801      	ldr	r0, [sp, #4]
 8013bcc:	f7fe ffce 	bl	8012b6c <homing_signals_select>
 8013bd0:	4205      	tst	r5, r0
 8013bd2:	d109      	bne.n	8013be8 <limits_go_home+0x74>
    return grbl.home_machine(cycle, auto_square) ? Status_OK : Status_Unhandled;
 8013bd4:	4b10      	ldr	r3, [pc, #64]	@ (8013c18 <limits_go_home+0xa4>)
 8013bd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013bda:	4621      	mov	r1, r4
 8013bdc:	4638      	mov	r0, r7
 8013bde:	4798      	blx	r3
 8013be0:	b1a0      	cbz	r0, 8013c0c <limits_go_home+0x98>
 8013be2:	2000      	movs	r0, #0
}
 8013be4:	b003      	add	sp, #12
 8013be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((auto_squared.mask & homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask) && !limits_pull_off(auto_square, settings.homing.pulloff * HOMING_AXIS_LOCATE_SCALAR))
 8013be8:	4b0a      	ldr	r3, [pc, #40]	@ (8013c14 <limits_go_home+0xa0>)
 8013bea:	ed93 0a43 	vldr	s0, [r3, #268]	@ 0x10c
 8013bee:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8013bf2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	f7ff f994 	bl	8012f24 <limits_pull_off>
 8013bfc:	2800      	cmp	r0, #0
 8013bfe:	d1e9      	bne.n	8013bd4 <limits_go_home+0x60>
            return Status_LimitsEngaged; // Auto squaring with limit switch asserted is not allowed.
 8013c00:	202d      	movs	r0, #45	@ 0x2d
 8013c02:	e7ef      	b.n	8013be4 <limits_go_home+0x70>
            return Status_IllegalHomingConfiguration; // Bad driver! - should not happen.
 8013c04:	2037      	movs	r0, #55	@ 0x37
 8013c06:	e7ed      	b.n	8013be4 <limits_go_home+0x70>
            return Status_IllegalHomingConfiguration; // Attempt at squaring more than one auto squared axis at the same time.
 8013c08:	2037      	movs	r0, #55	@ 0x37
 8013c0a:	e7eb      	b.n	8013be4 <limits_go_home+0x70>
    return grbl.home_machine(cycle, auto_square) ? Status_OK : Status_Unhandled;
 8013c0c:	2054      	movs	r0, #84	@ 0x54
 8013c0e:	e7e9      	b.n	8013be4 <limits_go_home+0x70>
 8013c10:	200018dc 	.word	0x200018dc
 8013c14:	200022f4 	.word	0x200022f4
 8013c18:	20001ac4 	.word	0x20001ac4

08013c1c <limits_soft_check>:
{
 8013c1c:	b508      	push	{r3, lr}
    if(condition.target_validated ? !condition.target_valid : !grbl.check_travel_limits(target, sys.soft_limits, true)) {
 8013c1e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8013c22:	f411 6f80 	tst.w	r1, #1024	@ 0x400
 8013c26:	d006      	beq.n	8013c36 <limits_soft_check+0x1a>
 8013c28:	0858      	lsrs	r0, r3, #1
 8013c2a:	f080 0001 	eor.w	r0, r0, #1
 8013c2e:	f000 0001 	and.w	r0, r0, #1
 8013c32:	b960      	cbnz	r0, 8013c4e <limits_soft_check+0x32>
}
 8013c34:	bd08      	pop	{r3, pc}
    if(condition.target_validated ? !condition.target_valid : !grbl.check_travel_limits(target, sys.soft_limits, true)) {
 8013c36:	4b16      	ldr	r3, [pc, #88]	@ (8013c90 <limits_soft_check+0x74>)
 8013c38:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8013c3c:	2201      	movs	r2, #1
 8013c3e:	4915      	ldr	r1, [pc, #84]	@ (8013c94 <limits_soft_check+0x78>)
 8013c40:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 8013c44:	4798      	blx	r3
 8013c46:	f080 0001 	eor.w	r0, r0, #1
 8013c4a:	b2c0      	uxtb	r0, r0
 8013c4c:	e7f1      	b.n	8013c32 <limits_soft_check+0x16>
        sys.flags.soft_limit = On;
 8013c4e:	4a11      	ldr	r2, [pc, #68]	@ (8013c94 <limits_soft_check+0x78>)
 8013c50:	7d93      	ldrb	r3, [r2, #22]
 8013c52:	f043 0304 	orr.w	r3, r3, #4
 8013c56:	7593      	strb	r3, [r2, #22]
        if(state_get() == STATE_CYCLE) {
 8013c58:	f00b fa56 	bl	801f108 <state_get>
 8013c5c:	2808      	cmp	r0, #8
 8013c5e:	d10c      	bne.n	8013c7a <limits_soft_check+0x5e>
            system_set_exec_state_flag(EXEC_FEED_HOLD);
 8013c60:	4b0d      	ldr	r3, [pc, #52]	@ (8013c98 <limits_soft_check+0x7c>)
 8013c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c64:	2108      	movs	r1, #8
 8013c66:	480d      	ldr	r0, [pc, #52]	@ (8013c9c <limits_soft_check+0x80>)
 8013c68:	4798      	blx	r3
                if(!protocol_execute_realtime())
 8013c6a:	f003 fee5 	bl	8017a38 <protocol_execute_realtime>
 8013c6e:	2800      	cmp	r0, #0
 8013c70:	d0e0      	beq.n	8013c34 <limits_soft_check+0x18>
            } while(state_get() != STATE_IDLE);
 8013c72:	f00b fa49 	bl	801f108 <state_get>
 8013c76:	2800      	cmp	r0, #0
 8013c78:	d1f7      	bne.n	8013c6a <limits_soft_check+0x4e>
        mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 8013c7a:	f001 f911 	bl	8014ea0 <mc_reset>
        system_set_exec_alarm(Alarm_SoftLimit); // Indicate soft limit critical event
 8013c7e:	4b06      	ldr	r3, [pc, #24]	@ (8013c98 <limits_soft_check+0x7c>)
 8013c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c82:	2102      	movs	r1, #2
 8013c84:	4806      	ldr	r0, [pc, #24]	@ (8013ca0 <limits_soft_check+0x84>)
 8013c86:	4798      	blx	r3
        protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 8013c88:	f003 fed6 	bl	8017a38 <protocol_execute_realtime>
 8013c8c:	e7d2      	b.n	8013c34 <limits_soft_check+0x18>
 8013c8e:	bf00      	nop
 8013c90:	20001ac4 	.word	0x20001ac4
 8013c94:	20001bbc 	.word	0x20001bbc
 8013c98:	200018dc 	.word	0x200018dc
 8013c9c:	20001c04 	.word	0x20001c04
 8013ca0:	20001c08 	.word	0x20001c08

08013ca4 <limits_set_homing_axes>:
    sys.homing.mask = 0;
 8013ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8013cd0 <limits_set_homing_axes+0x2c>)
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	769a      	strb	r2, [r3, #26]
    uint_fast8_t idx = N_AXIS;
 8013caa:	2203      	movs	r2, #3
        sys.homing.mask |= settings.homing.cycle[--idx].mask;
 8013cac:	3a01      	subs	r2, #1
 8013cae:	4b09      	ldr	r3, [pc, #36]	@ (8013cd4 <limits_set_homing_axes+0x30>)
 8013cb0:	4413      	add	r3, r2
 8013cb2:	f893 0115 	ldrb.w	r0, [r3, #277]	@ 0x115
 8013cb6:	4906      	ldr	r1, [pc, #24]	@ (8013cd0 <limits_set_homing_axes+0x2c>)
 8013cb8:	7e8b      	ldrb	r3, [r1, #26]
 8013cba:	4303      	orrs	r3, r0
 8013cbc:	768b      	strb	r3, [r1, #26]
    } while(idx);
 8013cbe:	2a00      	cmp	r2, #0
 8013cc0:	d1f4      	bne.n	8013cac <limits_set_homing_axes+0x8>
    sys.homed.mask &= sys.homing.mask;
 8013cc2:	460a      	mov	r2, r1
 8013cc4:	f891 1054 	ldrb.w	r1, [r1, #84]	@ 0x54
 8013cc8:	400b      	ands	r3, r1
 8013cca:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
}
 8013cce:	4770      	bx	lr
 8013cd0:	20001bbc 	.word	0x20001bbc
 8013cd4:	200022f4 	.word	0x200022f4

08013cd8 <limits_homing_required>:
    return settings.homing.flags.enabled && settings.homing.flags.init_lock &&
 8013cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8013d18 <limits_homing_required+0x40>)
 8013cda:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8013cde:	f003 0205 	and.w	r2, r3, #5
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 8013ce2:	2a05      	cmp	r2, #5
 8013ce4:	d001      	beq.n	8013cea <limits_homing_required+0x12>
 8013ce6:	2000      	movs	r0, #0
 8013ce8:	4770      	bx	lr
            (sys.cold_start || !settings.homing.flags.override_locks) &&
 8013cea:	4a0c      	ldr	r2, [pc, #48]	@ (8013d1c <limits_homing_required+0x44>)
 8013cec:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
    return settings.homing.flags.enabled && settings.homing.flags.init_lock &&
 8013cf0:	b912      	cbnz	r2, 8013cf8 <limits_homing_required+0x20>
            (sys.cold_start || !settings.homing.flags.override_locks) &&
 8013cf2:	f013 0f20 	tst.w	r3, #32
 8013cf6:	d10b      	bne.n	8013d10 <limits_homing_required+0x38>
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 8013cf8:	4b08      	ldr	r3, [pc, #32]	@ (8013d1c <limits_homing_required+0x44>)
 8013cfa:	7e9b      	ldrb	r3, [r3, #26]
            (sys.cold_start || !settings.homing.flags.override_locks) &&
 8013cfc:	b153      	cbz	r3, 8013d14 <limits_homing_required+0x3c>
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 8013cfe:	4a07      	ldr	r2, [pc, #28]	@ (8013d1c <limits_homing_required+0x44>)
 8013d00:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8013d04:	4393      	bics	r3, r2
 8013d06:	d001      	beq.n	8013d0c <limits_homing_required+0x34>
 8013d08:	2001      	movs	r0, #1
}
 8013d0a:	4770      	bx	lr
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 8013d0c:	2000      	movs	r0, #0
 8013d0e:	4770      	bx	lr
 8013d10:	2000      	movs	r0, #0
 8013d12:	4770      	bx	lr
 8013d14:	2000      	movs	r0, #0
 8013d16:	4770      	bx	lr
 8013d18:	200022f4 	.word	0x200022f4
 8013d1c:	20001bbc 	.word	0x20001bbc

08013d20 <limits_init>:

void limits_init (void)
{
    hal.homing.get_feedrate = get_homing_rate;
 8013d20:	4b08      	ldr	r3, [pc, #32]	@ (8013d44 <limits_init+0x24>)
 8013d22:	4a09      	ldr	r2, [pc, #36]	@ (8013d48 <limits_init+0x28>)
 8013d24:	665a      	str	r2, [r3, #100]	@ 0x64
    grbl.check_travel_limits = check_travel_limits;
 8013d26:	4b09      	ldr	r3, [pc, #36]	@ (8013d4c <limits_init+0x2c>)
 8013d28:	4a09      	ldr	r2, [pc, #36]	@ (8013d50 <limits_init+0x30>)
 8013d2a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    grbl.check_arc_travel_limits = check_arc_travel_limits;
 8013d2e:	4a09      	ldr	r2, [pc, #36]	@ (8013d54 <limits_init+0x34>)
 8013d30:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    grbl.apply_jog_limits = apply_jog_limits;
 8013d34:	4a08      	ldr	r2, [pc, #32]	@ (8013d58 <limits_init+0x38>)
 8013d36:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    grbl.home_machine = homing_cycle;
 8013d3a:	4a08      	ldr	r2, [pc, #32]	@ (8013d5c <limits_init+0x3c>)
 8013d3c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
}
 8013d40:	4770      	bx	lr
 8013d42:	bf00      	nop
 8013d44:	200018dc 	.word	0x200018dc
 8013d48:	08012ba9 	.word	0x08012ba9
 8013d4c:	20001ac4 	.word	0x20001ac4
 8013d50:	08012bc1 	.word	0x08012bc1
 8013d54:	080130a5 	.word	0x080130a5
 8013d58:	08012e3d 	.word	0x08012e3d
 8013d5c:	08013679 	.word	0x08013679

08013d60 <message_get>:
    { .id = Message_Stop, .text = "Stop"}
};

const message_t *message_get (message_code_t id)
{
    uint_fast16_t idx = 0;
 8013d60:	2300      	movs	r3, #0
    const message_t *msg = NULL;

    do {
        if(messages[idx].id == id)
 8013d62:	4a07      	ldr	r2, [pc, #28]	@ (8013d80 <message_get+0x20>)
 8013d64:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8013d68:	4282      	cmp	r2, r0
 8013d6a:	d004      	beq.n	8013d76 <message_get+0x16>
            msg = &messages[idx];
    } while(msg == NULL && ++idx < Message_NextMessage);
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	2b16      	cmp	r3, #22
 8013d70:	d9f7      	bls.n	8013d62 <message_get+0x2>
 8013d72:	2000      	movs	r0, #0

    return msg;
}
 8013d74:	4770      	bx	lr
            msg = &messages[idx];
 8013d76:	4802      	ldr	r0, [pc, #8]	@ (8013d80 <message_get+0x20>)
 8013d78:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    } while(msg == NULL && ++idx < Message_NextMessage);
 8013d7c:	4770      	bx	lr
 8013d7e:	bf00      	nop
 8013d80:	0802b9d4 	.word	0x0802b9d4

08013d84 <eval_bezier>:
// By Giovanni Mascellani - https://github.com/giomasce/Marlin

// Compute the linear interpolation between two real numbers.
static inline float interp (const float a, const float b, const float t)
{
    return (1.0f - t) * a + t * b;
 8013d84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013d88:	ee37 7a42 	vsub.f32	s14, s14, s4
 8013d8c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013d90:	ee60 7a82 	vmul.f32	s15, s1, s4
 8013d94:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013d98:	ee60 0a87 	vmul.f32	s1, s1, s14
 8013d9c:	ee62 7a01 	vmul.f32	s15, s4, s2
 8013da0:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8013da4:	ee21 1a07 	vmul.f32	s2, s2, s14
 8013da8:	ee62 1a21 	vmul.f32	s3, s4, s3
 8013dac:	ee31 1a21 	vadd.f32	s2, s2, s3
 8013db0:	ee67 7a00 	vmul.f32	s15, s14, s0
 8013db4:	ee62 6a20 	vmul.f32	s13, s4, s1
 8013db8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013dbc:	ee60 0a87 	vmul.f32	s1, s1, s14
 8013dc0:	ee22 1a01 	vmul.f32	s2, s4, s2
 8013dc4:	ee70 0a81 	vadd.f32	s1, s1, s2
 8013dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013dcc:	ee22 2a20 	vmul.f32	s4, s4, s1
                icd = interp(c, d, t),
                iabc = interp(iab, ibc, t),
                ibcd = interp(ibc, icd, t);

    return interp(iabc, ibcd, t);
}
 8013dd0:	ee32 0a27 	vadd.f32	s0, s4, s15
 8013dd4:	4770      	bx	lr
	...

08013dd8 <mc_line>:
{
 8013dd8:	b538      	push	{r3, r4, r5, lr}
 8013dda:	4605      	mov	r5, r0
 8013ddc:	460c      	mov	r4, r1
    if(!(pl_data->condition.target_validated && pl_data->condition.target_valid))
 8013dde:	7d4b      	ldrb	r3, [r1, #21]
 8013de0:	f003 0306 	and.w	r3, r3, #6
 8013de4:	2b06      	cmp	r3, #6
 8013de6:	d10b      	bne.n	8013e00 <mc_line+0x28>
    if(state_get() != STATE_CHECK_MODE && protocol_execute_realtime()) {
 8013de8:	f00b f98e 	bl	801f108 <state_get>
 8013dec:	2802      	cmp	r0, #2
 8013dee:	d10b      	bne.n	8013e08 <mc_line+0x30>
    return !ABORTED;
 8013df0:	4b1b      	ldr	r3, [pc, #108]	@ (8013e60 <mc_line+0x88>)
 8013df2:	781b      	ldrb	r3, [r3, #0]
 8013df4:	bb7b      	cbnz	r3, 8013e56 <mc_line+0x7e>
 8013df6:	4b1a      	ldr	r3, [pc, #104]	@ (8013e60 <mc_line+0x88>)
 8013df8:	785b      	ldrb	r3, [r3, #1]
 8013dfa:	b37b      	cbz	r3, 8013e5c <mc_line+0x84>
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	e02b      	b.n	8013e58 <mc_line+0x80>
        limits_soft_check(target, pl_data->condition);
 8013e00:	6949      	ldr	r1, [r1, #20]
 8013e02:	f7ff ff0b 	bl	8013c1c <limits_soft_check>
 8013e06:	e7ef      	b.n	8013de8 <mc_line+0x10>
    if(state_get() != STATE_CHECK_MODE && protocol_execute_realtime()) {
 8013e08:	f003 fe16 	bl	8017a38 <protocol_execute_realtime>
 8013e0c:	2800      	cmp	r0, #0
 8013e0e:	d0ef      	beq.n	8013df0 <mc_line+0x18>
            if(!protocol_execute_realtime())    // Check for any run-time commands
 8013e10:	f003 fe12 	bl	8017a38 <protocol_execute_realtime>
 8013e14:	4603      	mov	r3, r0
 8013e16:	b1f8      	cbz	r0, 8013e58 <mc_line+0x80>
            if(plan_check_full_buffer())
 8013e18:	f002 fe64 	bl	8016ae4 <plan_check_full_buffer>
 8013e1c:	b110      	cbz	r0, 8013e24 <mc_line+0x4c>
                protocol_auto_cycle_start();    // Auto-cycle start when buffer is full.
 8013e1e:	f003 fad5 	bl	80173cc <protocol_auto_cycle_start>
            if(!protocol_execute_realtime())    // Check for any run-time commands
 8013e22:	e7f5      	b.n	8013e10 <mc_line+0x38>
        if(!plan_buffer_line(target, pl_data) && pl_data->spindle.hal->cap.laser && pl_data->spindle.state.on && !pl_data->spindle.state.ccw) {
 8013e24:	4621      	mov	r1, r4
 8013e26:	4628      	mov	r0, r5
 8013e28:	f002 fefe 	bl	8016c28 <plan_buffer_line>
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	d1df      	bne.n	8013df0 <mc_line+0x18>
 8013e30:	6923      	ldr	r3, [r4, #16]
 8013e32:	7a9b      	ldrb	r3, [r3, #10]
 8013e34:	f013 0f08 	tst.w	r3, #8
 8013e38:	d0da      	beq.n	8013df0 <mc_line+0x18>
 8013e3a:	7a23      	ldrb	r3, [r4, #8]
 8013e3c:	f003 0303 	and.w	r3, r3, #3
 8013e40:	2b01      	cmp	r3, #1
 8013e42:	d1d5      	bne.n	8013df0 <mc_line+0x18>
            protocol_buffer_synchronize();
 8013e44:	f004 f8c6 	bl	8017fd4 <protocol_buffer_synchronize>
            pl_data->spindle.hal->set_state(pl_data->spindle.hal, pl_data->spindle.state, pl_data->spindle.rpm);
 8013e48:	6920      	ldr	r0, [r4, #16]
 8013e4a:	6a03      	ldr	r3, [r0, #32]
 8013e4c:	ed94 0a01 	vldr	s0, [r4, #4]
 8013e50:	7a21      	ldrb	r1, [r4, #8]
 8013e52:	4798      	blx	r3
 8013e54:	e7cc      	b.n	8013df0 <mc_line+0x18>
    return !ABORTED;
 8013e56:	2300      	movs	r3, #0
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	bd38      	pop	{r3, r4, r5, pc}
    return !ABORTED;
 8013e5c:	2301      	movs	r3, #1
 8013e5e:	e7fb      	b.n	8013e58 <mc_line+0x80>
 8013e60:	20001bbc 	.word	0x20001bbc
 8013e64:	00000000 	.word	0x00000000

08013e68 <mc_arc>:
{
 8013e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e6c:	ed2d 8b06 	vpush	{d8-d10}
 8013e70:	b0a9      	sub	sp, #164	@ 0xa4
 8013e72:	4606      	mov	r6, r0
 8013e74:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013e76:	9103      	str	r1, [sp, #12]
 8013e78:	4617      	mov	r7, r2
 8013e7a:	461c      	mov	r4, r3
 8013e7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8013e7e:	eeb0 9a40 	vmov.f32	s18, s0
        .x = -(double)offset[plane.axis_0],
 8013e82:	f89d 20e0 	ldrb.w	r2, [sp, #224]	@ 0xe0
 8013e86:	9213      	str	r2, [sp, #76]	@ 0x4c
 8013e88:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8013e8c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013e90:	9310      	str	r3, [sp, #64]	@ 0x40
 8013e92:	6818      	ldr	r0, [r3, #0]
 8013e94:	f7f4 faa0 	bl	80083d8 <__aeabi_f2d>
 8013e98:	4602      	mov	r2, r0
 8013e9a:	460b      	mov	r3, r1
 8013e9c:	4682      	mov	sl, r0
 8013e9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013ea2:	f101 4b00 	add.w	fp, r1, #2147483648	@ 0x80000000
    point_2dd_t rv = {  // Radius vector from center to current location
 8013ea6:	e9cd ab22 	strd	sl, fp, [sp, #136]	@ 0x88
        .y = -(double)offset[plane.axis_1]
 8013eaa:	f89d 30e1 	ldrb.w	r3, [sp, #225]	@ 0xe1
 8013eae:	9314      	str	r3, [sp, #80]	@ 0x50
 8013eb0:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8013eb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013eb8:	9311      	str	r3, [sp, #68]	@ 0x44
 8013eba:	6818      	ldr	r0, [r3, #0]
 8013ebc:	f7f4 fa8c 	bl	80083d8 <__aeabi_f2d>
 8013ec0:	4604      	mov	r4, r0
 8013ec2:	460d      	mov	r5, r1
 8013ec4:	ed9f 7ba8 	vldr	d7, [pc, #672]	@ 8014168 <mc_arc+0x300>
 8013ec8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013ecc:	9004      	str	r0, [sp, #16]
 8013ece:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013ed2:	9305      	str	r3, [sp, #20]
    point_2dd_t rv = {  // Radius vector from center to current location
 8013ed4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013ed8:	ed8d 7b24 	vstr	d7, [sp, #144]	@ 0x90
        .x = (double)position[plane.axis_0] - rv.x,
 8013edc:	eb07 0309 	add.w	r3, r7, r9
 8013ee0:	930a      	str	r3, [sp, #40]	@ 0x28
 8013ee2:	6818      	ldr	r0, [r3, #0]
 8013ee4:	f7f4 fa78 	bl	80083d8 <__aeabi_f2d>
 8013ee8:	4602      	mov	r2, r0
 8013eea:	460b      	mov	r3, r1
 8013eec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013ef0:	f7f4 f914 	bl	800811c <__adddf3>
 8013ef4:	4602      	mov	r2, r0
 8013ef6:	460b      	mov	r3, r1
 8013ef8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    point_2dd_t center = {
 8013efc:	ec43 2b17 	vmov	d7, r2, r3
 8013f00:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
        .y = (double)position[plane.axis_1] - rv.y
 8013f04:	eb07 0308 	add.w	r3, r7, r8
 8013f08:	9312      	str	r3, [sp, #72]	@ 0x48
 8013f0a:	6818      	ldr	r0, [r3, #0]
 8013f0c:	f7f4 fa64 	bl	80083d8 <__aeabi_f2d>
 8013f10:	4602      	mov	r2, r0
 8013f12:	460b      	mov	r3, r1
 8013f14:	4620      	mov	r0, r4
 8013f16:	4629      	mov	r1, r5
 8013f18:	f7f4 f900 	bl	800811c <__adddf3>
 8013f1c:	4603      	mov	r3, r0
 8013f1e:	460c      	mov	r4, r1
 8013f20:	e9cd 3408 	strd	r3, r4, [sp, #32]
    point_2dd_t center = {
 8013f24:	ec44 3b17 	vmov	d7, r3, r4
 8013f28:	ed8d 7b20 	vstr	d7, [sp, #128]	@ 0x80
        .x = (double)target[plane.axis_0] - center.x,
 8013f2c:	44b1      	add	r9, r6
 8013f2e:	f8d9 0000 	ldr.w	r0, [r9]
 8013f32:	f7f4 fa51 	bl	80083d8 <__aeabi_f2d>
 8013f36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f3a:	f7f4 f8ed 	bl	8008118 <__aeabi_dsub>
 8013f3e:	4604      	mov	r4, r0
 8013f40:	460d      	mov	r5, r1
    point_2dd_t rt = {
 8013f42:	e9cd 451a 	strd	r4, r5, [sp, #104]	@ 0x68
        .y = (double)target[plane.axis_1] - center.y
 8013f46:	44b0      	add	r8, r6
 8013f48:	f8d8 0000 	ldr.w	r0, [r8]
 8013f4c:	f7f4 fa44 	bl	80083d8 <__aeabi_f2d>
 8013f50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013f54:	f7f4 f8e0 	bl	8008118 <__aeabi_dsub>
 8013f58:	4680      	mov	r8, r0
 8013f5a:	4689      	mov	r9, r1
    point_2dd_t rt = {
 8013f5c:	e9cd 891c 	strd	r8, r9, [sp, #112]	@ 0x70
    float angular_travel = (float)atan2(rv.x * rt.y - rv.y * rt.x, rv.x * rt.x + rv.y * rt.y);
 8013f60:	4602      	mov	r2, r0
 8013f62:	460b      	mov	r3, r1
 8013f64:	4650      	mov	r0, sl
 8013f66:	4659      	mov	r1, fp
 8013f68:	f7f4 fa8e 	bl	8008488 <__aeabi_dmul>
 8013f6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8013f70:	4622      	mov	r2, r4
 8013f72:	462b      	mov	r3, r5
 8013f74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013f78:	f7f4 fa86 	bl	8008488 <__aeabi_dmul>
 8013f7c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013f80:	4622      	mov	r2, r4
 8013f82:	462b      	mov	r3, r5
 8013f84:	4650      	mov	r0, sl
 8013f86:	4659      	mov	r1, fp
 8013f88:	f7f4 fa7e 	bl	8008488 <__aeabi_dmul>
 8013f8c:	4604      	mov	r4, r0
 8013f8e:	460d      	mov	r5, r1
 8013f90:	4642      	mov	r2, r8
 8013f92:	464b      	mov	r3, r9
 8013f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013f98:	f7f4 fa76 	bl	8008488 <__aeabi_dmul>
 8013f9c:	4602      	mov	r2, r0
 8013f9e:	460b      	mov	r3, r1
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	4629      	mov	r1, r5
 8013fa4:	f7f4 f8ba 	bl	800811c <__adddf3>
 8013fa8:	ec41 0b18 	vmov	d8, r0, r1
 8013fac:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013fb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013fb4:	f7f4 f8b0 	bl	8008118 <__aeabi_dsub>
 8013fb8:	eeb0 1a48 	vmov.f32	s2, s16
 8013fbc:	eef0 1a68 	vmov.f32	s3, s17
 8013fc0:	ec41 0b10 	vmov	d0, r0, r1
 8013fc4:	f013 fcb6 	bl	8027934 <atan2>
 8013fc8:	ec51 0b10 	vmov	r0, r1, d0
 8013fcc:	f7f4 fd54 	bl	8008a78 <__aeabi_d2f>
 8013fd0:	ee08 0a10 	vmov	s16, r0
    if (turns > 0) { // Correct atan2 output per direction
 8013fd4:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	f340 80b1 	ble.w	801413e <mc_arc+0x2d6>
        if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON)
 8013fdc:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8014178 <mc_arc+0x310>
 8013fe0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fe8:	d80a      	bhi.n	8014000 <mc_arc+0x198>
            angular_travel += 2.0f * M_PI;
 8013fea:	f7f4 f9f5 	bl	80083d8 <__aeabi_f2d>
 8013fee:	a360      	add	r3, pc, #384	@ (adr r3, 8014170 <mc_arc+0x308>)
 8013ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ff4:	f7f4 f892 	bl	800811c <__adddf3>
 8013ff8:	f7f4 fd3e 	bl	8008a78 <__aeabi_d2f>
 8013ffc:	ee08 0a10 	vmov	s16, r0
    if(!pl_data->condition.target_validated && grbl.check_arc_travel_limits) {
 8014000:	9d03      	ldr	r5, [sp, #12]
 8014002:	7d6b      	ldrb	r3, [r5, #21]
 8014004:	f013 0f04 	tst.w	r3, #4
 8014008:	d125      	bne.n	8014056 <mc_arc+0x1ee>
 801400a:	4b5c      	ldr	r3, [pc, #368]	@ (801417c <mc_arc+0x314>)
 801400c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014010:	b30b      	cbz	r3, 8014056 <mc_arc+0x1ee>
        pl_data->condition.target_validated = On;
 8014012:	7d6b      	ldrb	r3, [r5, #21]
 8014014:	f043 0304 	orr.w	r3, r3, #4
 8014018:	756b      	strb	r3, [r5, #21]
        pl_data->condition.target_valid = grbl.check_arc_travel_limits((coord_data_t *)target, (coord_data_t *)position,
 801401a:	4b58      	ldr	r3, [pc, #352]	@ (801417c <mc_arc+0x314>)
 801401c:	f8d3 40e0 	ldr.w	r4, [r3, #224]	@ 0xe0
                                                                        (point_2d_t){ .x = (float)center.x, .y = (float)center.y },
 8014020:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014024:	f7f4 fd28 	bl	8008a78 <__aeabi_d2f>
 8014028:	ee08 0a90 	vmov	s17, r0
 801402c:	9026      	str	r0, [sp, #152]	@ 0x98
 801402e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014032:	f7f4 fd21 	bl	8008a78 <__aeabi_d2f>
 8014036:	ee00 0a90 	vmov	s1, r0
 801403a:	9027      	str	r0, [sp, #156]	@ 0x9c
        pl_data->condition.target_valid = grbl.check_arc_travel_limits((coord_data_t *)target, (coord_data_t *)position,
 801403c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 801403e:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8014040:	eeb0 1a49 	vmov.f32	s2, s18
 8014044:	eeb0 0a68 	vmov.f32	s0, s17
 8014048:	4639      	mov	r1, r7
 801404a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801404c:	47a0      	blx	r4
 801404e:	7d6b      	ldrb	r3, [r5, #21]
 8014050:	f360 0341 	bfi	r3, r0, #1, #1
 8014054:	756b      	strb	r3, [r5, #21]
    if(labs(turns) > 1) {
 8014056:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8014058:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
 801405c:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
 8014060:	2e01      	cmp	r6, #1
 8014062:	f300 8093 	bgt.w	801418c <mc_arc+0x324>
    if(2.0f * radius > settings.arc_tolerance)
 8014066:	ee79 7a09 	vadd.f32	s15, s18, s18
 801406a:	4b45      	ldr	r3, [pc, #276]	@ (8014180 <mc_arc+0x318>)
 801406c:	ed93 0a02 	vldr	s0, [r3, #8]
 8014070:	eef4 7ac0 	vcmpe.f32	s15, s0
 8014074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014078:	f340 81a5 	ble.w	80143c6 <mc_arc+0x55e>
        segments = (uint_fast16_t)floorf(fabsf(0.5f * angular_travel * radius) / sqrtf(settings.arc_tolerance * (2.0f * radius - settings.arc_tolerance)));
 801407c:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 8014080:	ee68 8a28 	vmul.f32	s17, s16, s17
 8014084:	ee68 8a89 	vmul.f32	s17, s17, s18
 8014088:	eef0 8ae8 	vabs.f32	s17, s17
 801408c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014090:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014094:	f013 fca8 	bl	80279e8 <sqrtf>
 8014098:	ee88 0a80 	vdiv.f32	s0, s17, s0
 801409c:	f013 fdf4 	bl	8027c88 <floorf>
 80140a0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80140a4:	ee17 9a90 	vmov	r9, s15
    if(segments) {
 80140a8:	f1b9 0f00 	cmp.w	r9, #0
 80140ac:	f000 818b 	beq.w	80143c6 <mc_arc+0x55e>
        if (pl_data->condition.inverse_time) {
 80140b0:	9a03      	ldr	r2, [sp, #12]
 80140b2:	7d13      	ldrb	r3, [r2, #20]
 80140b4:	f013 0f20 	tst.w	r3, #32
 80140b8:	d00b      	beq.n	80140d2 <mc_arc+0x26a>
            pl_data->feed_rate *= segments;
 80140ba:	ed92 7a00 	vldr	s14, [r2]
 80140be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80140c6:	edc2 7a00 	vstr	s15, [r2]
            pl_data->condition.inverse_time = Off; // Force as feed absolute mode over arc segments.
 80140ca:	7d13      	ldrb	r3, [r2, #20]
 80140cc:	f36f 1345 	bfc	r3, #5, #1
 80140d0:	7513      	strb	r3, [r2, #20]
        float theta_per_segment = angular_travel / segments;
 80140d2:	ee07 9a90 	vmov	s15, r9
 80140d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80140da:	eec8 aa07 	vdiv.f32	s21, s16, s14
        float linear_per_segment = (target[plane.axis_linear] - position[plane.axis_linear]) / segments;
 80140de:	f89d 30e2 	ldrb.w	r3, [sp, #226]	@ 0xe2
 80140e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80140e4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80140e8:	edd2 7a00 	vldr	s15, [r2]
 80140ec:	eb07 0683 	add.w	r6, r7, r3, lsl #2
 80140f0:	edd6 6a00 	vldr	s13, [r6]
 80140f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80140f8:	ee87 aa87 	vdiv.f32	s20, s15, s14
        float cos_T = 2.0f - theta_per_segment * theta_per_segment;
 80140fc:	ee2a 7aaa 	vmul.f32	s14, s21, s21
 8014100:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8014104:	ee77 7ac7 	vsub.f32	s15, s15, s14
        float sin_T = theta_per_segment * 0.16666667f * (cos_T + 4.0f);
 8014108:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8014184 <mc_arc+0x31c>
 801410c:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 8014110:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8014114:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014118:	ee26 7a87 	vmul.f32	s14, s13, s14
 801411c:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
        cos_T *= 0.5f;
 8014120:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8014124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014128:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
        uint_fast16_t i, count = 0;
 801412c:	f04f 0b00 	mov.w	fp, #0
        for (i = 1; i < segments; i++) { // Increment (segments-1).
 8014130:	f04f 0a01 	mov.w	sl, #1
 8014134:	46b8      	mov	r8, r7
 8014136:	464f      	mov	r7, r9
 8014138:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 801413c:	e0fb      	b.n	8014336 <mc_arc+0x4ce>
    } else if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON)
 801413e:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8014188 <mc_arc+0x320>
 8014142:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801414a:	f6ff af59 	blt.w	8014000 <mc_arc+0x198>
        angular_travel -= 2.0f * M_PI;
 801414e:	f7f4 f943 	bl	80083d8 <__aeabi_f2d>
 8014152:	a307      	add	r3, pc, #28	@ (adr r3, 8014170 <mc_arc+0x308>)
 8014154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014158:	f7f3 ffde 	bl	8008118 <__aeabi_dsub>
 801415c:	f7f4 fc8c 	bl	8008a78 <__aeabi_d2f>
 8014160:	ee08 0a10 	vmov	s16, r0
 8014164:	e74c      	b.n	8014000 <mc_arc+0x198>
 8014166:	bf00      	nop
	...
 8014170:	54442d18 	.word	0x54442d18
 8014174:	401921fb 	.word	0x401921fb
 8014178:	350637bd 	.word	0x350637bd
 801417c:	20001ac4 	.word	0x20001ac4
 8014180:	200022f4 	.word	0x200022f4
 8014184:	3e2aaaab 	.word	0x3e2aaaab
 8014188:	b50637bd 	.word	0xb50637bd
        uint32_t n_turns = labs(turns) - 1;
 801418c:	3e01      	subs	r6, #1
        float arc_travel = 2.0f * M_PI * n_turns + angular_travel;
 801418e:	4630      	mov	r0, r6
 8014190:	f7f4 f900 	bl	8008394 <__aeabi_ui2d>
 8014194:	a390      	add	r3, pc, #576	@ (adr r3, 80143d8 <mc_arc+0x570>)
 8014196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801419a:	f7f4 f975 	bl	8008488 <__aeabi_dmul>
 801419e:	4604      	mov	r4, r0
 80141a0:	460d      	mov	r5, r1
 80141a2:	ee18 0a10 	vmov	r0, s16
 80141a6:	f7f4 f917 	bl	80083d8 <__aeabi_f2d>
 80141aa:	4622      	mov	r2, r4
 80141ac:	462b      	mov	r3, r5
 80141ae:	f7f3 ffb5 	bl	800811c <__adddf3>
 80141b2:	f7f4 fc61 	bl	8008a78 <__aeabi_d2f>
 80141b6:	ee06 0a90 	vmov	s13, r0
        float linear_per_turn = (target[plane.axis_linear] - position[plane.axis_linear]) / arc_travel * 2.0f * M_PI;
 80141ba:	f89d 40e2 	ldrb.w	r4, [sp, #226]	@ 0xe2
 80141be:	00a5      	lsls	r5, r4, #2
 80141c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80141c2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80141c6:	edd3 7a00 	vldr	s15, [r3]
 80141ca:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 80141ce:	edd3 9a00 	vldr	s19, [r3]
 80141d2:	ee77 7ae9 	vsub.f32	s15, s15, s19
 80141d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80141da:	ee77 7a07 	vadd.f32	s15, s14, s14
 80141de:	ee17 0a90 	vmov	r0, s15
 80141e2:	f7f4 f8f9 	bl	80083d8 <__aeabi_f2d>
 80141e6:	a37e      	add	r3, pc, #504	@ (adr r3, 80143e0 <mc_arc+0x578>)
 80141e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ec:	f7f4 f94c 	bl	8008488 <__aeabi_dmul>
 80141f0:	f7f4 fc42 	bl	8008a78 <__aeabi_d2f>
 80141f4:	ee08 0a90 	vmov	s17, r0
        memcpy(&arc_target, target, sizeof(coord_data_t));
 80141f8:	ab17      	add	r3, sp, #92	@ 0x5c
 80141fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80141fc:	6810      	ldr	r0, [r2, #0]
 80141fe:	6851      	ldr	r1, [r2, #4]
 8014200:	6892      	ldr	r2, [r2, #8]
 8014202:	c307      	stmia	r3!, {r0, r1, r2}
        arc_target.values[plane.axis_0] = position[plane.axis_0];
 8014204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014206:	681a      	ldr	r2, [r3, #0]
 8014208:	a928      	add	r1, sp, #160	@ 0xa0
 801420a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801420c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014210:	f843 2c44 	str.w	r2, [r3, #-68]
        arc_target.values[plane.axis_1] = position[plane.axis_1];
 8014214:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014216:	681a      	ldr	r2, [r3, #0]
 8014218:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801421a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801421e:	f843 2c44 	str.w	r2, [r3, #-68]
        arc_target.values[plane.axis_linear] = position[plane.axis_linear];
 8014222:	f105 03a0 	add.w	r3, r5, #160	@ 0xa0
 8014226:	eb0d 0503 	add.w	r5, sp, r3
 801422a:	ed45 9a11 	vstr	s19, [r5, #-68]	@ 0xffffffbc
        while(n_turns--) {
 801422e:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
 8014232:	f8dd 80e4 	ldr.w	r8, [sp, #228]	@ 0xe4
 8014236:	e016      	b.n	8014266 <mc_arc+0x3fe>
            mc_arc(arc_target.values, pl_data, position, offset, radius, plane, turns > 0 ? 1 : -1);
 8014238:	f04f 33ff 	mov.w	r3, #4294967295
 801423c:	9301      	str	r3, [sp, #4]
 801423e:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8014240:	f8ad 3000 	strh.w	r3, [sp]
 8014244:	0c1b      	lsrs	r3, r3, #16
 8014246:	f88d 3002 	strb.w	r3, [sp, #2]
 801424a:	eeb0 0a49 	vmov.f32	s0, s18
 801424e:	464b      	mov	r3, r9
 8014250:	463a      	mov	r2, r7
 8014252:	9903      	ldr	r1, [sp, #12]
 8014254:	a817      	add	r0, sp, #92	@ 0x5c
 8014256:	f7ff fe07 	bl	8013e68 <mc_arc>
            memcpy(position, arc_target.values, sizeof(coord_data_t));
 801425a:	ab17      	add	r3, sp, #92	@ 0x5c
 801425c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801425e:	6038      	str	r0, [r7, #0]
 8014260:	6079      	str	r1, [r7, #4]
 8014262:	60ba      	str	r2, [r7, #8]
        while(n_turns--) {
 8014264:	462e      	mov	r6, r5
 8014266:	1e75      	subs	r5, r6, #1
 8014268:	2e00      	cmp	r6, #0
 801426a:	f43f aefc 	beq.w	8014066 <mc_arc+0x1fe>
            arc_target.values[plane.axis_linear] += linear_per_turn;
 801426e:	ab28      	add	r3, sp, #160	@ 0xa0
 8014270:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014274:	ed53 7a11 	vldr	s15, [r3, #-68]	@ 0xffffffbc
 8014278:	ee77 7aa8 	vadd.f32	s15, s15, s17
 801427c:	ed43 7a11 	vstr	s15, [r3, #-68]	@ 0xffffffbc
            mc_arc(arc_target.values, pl_data, position, offset, radius, plane, turns > 0 ? 1 : -1);
 8014280:	f1b8 0f00 	cmp.w	r8, #0
 8014284:	ddd8      	ble.n	8014238 <mc_arc+0x3d0>
 8014286:	2301      	movs	r3, #1
 8014288:	e7d8      	b.n	801423c <mc_arc+0x3d4>
                cos_Ti = cosf(i * theta_per_segment);
 801428a:	ee07 aa90 	vmov	s15, sl
 801428e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8014292:	ee28 8a2a 	vmul.f32	s16, s16, s21
 8014296:	eeb0 0a48 	vmov.f32	s0, s16
 801429a:	f013 fbc3 	bl	8027a24 <cosf>
 801429e:	eef0 8a40 	vmov.f32	s17, s0
                sin_Ti = sinf(i * theta_per_segment);
 80142a2:	eeb0 0a48 	vmov.f32	s0, s16
 80142a6:	f013 fc01 	bl	8027aac <sinf>
 80142aa:	eeb0 9a40 	vmov.f32	s18, s0
                rv.x = -offset[plane.axis_0] * cos_Ti + offset[plane.axis_1] * sin_Ti;
 80142ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80142b0:	edd3 7a00 	vldr	s15, [r3]
 80142b4:	eef1 9a67 	vneg.f32	s19, s15
 80142b8:	ee67 7ae8 	vnmul.f32	s15, s15, s17
 80142bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80142be:	ed93 8a00 	vldr	s16, [r3]
 80142c2:	ee28 7a00 	vmul.f32	s14, s16, s0
 80142c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80142ca:	ee17 0a90 	vmov	r0, s15
 80142ce:	f7f4 f883 	bl	80083d8 <__aeabi_f2d>
 80142d2:	e9cd 0122 	strd	r0, r1, [sp, #136]	@ 0x88
                rv.y = -offset[plane.axis_0] * sin_Ti - offset[plane.axis_1] * cos_Ti;
 80142d6:	ee69 9a89 	vmul.f32	s19, s19, s18
 80142da:	ee28 8a28 	vmul.f32	s16, s16, s17
 80142de:	ee79 7ac8 	vsub.f32	s15, s19, s16
 80142e2:	ee17 0a90 	vmov	r0, s15
 80142e6:	f7f4 f877 	bl	80083d8 <__aeabi_f2d>
 80142ea:	e9cd 0124 	strd	r0, r1, [sp, #144]	@ 0x90
                count = 0;
 80142ee:	f04f 0b00 	mov.w	fp, #0
            position[plane.axis_0] = center.x + rv.x;
 80142f2:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	@ 0x88
 80142f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80142fa:	f7f3 ff0f 	bl	800811c <__adddf3>
 80142fe:	f7f4 fbbb 	bl	8008a78 <__aeabi_d2f>
 8014302:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014304:	6018      	str	r0, [r3, #0]
            position[plane.axis_1] = center.y + rv.y;
 8014306:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
 801430a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801430e:	f7f3 ff05 	bl	800811c <__adddf3>
 8014312:	f7f4 fbb1 	bl	8008a78 <__aeabi_d2f>
 8014316:	f8c9 0000 	str.w	r0, [r9]
            position[plane.axis_linear] += linear_per_segment;
 801431a:	edd6 7a00 	vldr	s15, [r6]
 801431e:	ee77 7a8a 	vadd.f32	s15, s15, s20
 8014322:	edc6 7a00 	vstr	s15, [r6]
            if(!mc_line(position, pl_data))
 8014326:	9903      	ldr	r1, [sp, #12]
 8014328:	4640      	mov	r0, r8
 801432a:	f7ff fd55 	bl	8013dd8 <mc_line>
 801432e:	2800      	cmp	r0, #0
 8014330:	d04d      	beq.n	80143ce <mc_arc+0x566>
        for (i = 1; i < segments; i++) { // Increment (segments-1).
 8014332:	f10a 0a01 	add.w	sl, sl, #1
 8014336:	45ba      	cmp	sl, r7
 8014338:	d245      	bcs.n	80143c6 <mc_arc+0x55e>
            if (count < N_ARC_CORRECTION) {
 801433a:	f1bb 0f0b 	cmp.w	fp, #11
 801433e:	d8a4      	bhi.n	801428a <mc_arc+0x422>
                r_axisi = rv.x * sin_T + rv.y * cos_T;
 8014340:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	@ 0x88
 8014344:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8014346:	f7f4 f847 	bl	80083d8 <__aeabi_f2d>
 801434a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801434e:	4602      	mov	r2, r0
 8014350:	460b      	mov	r3, r1
 8014352:	4620      	mov	r0, r4
 8014354:	4629      	mov	r1, r5
 8014356:	f7f4 f897 	bl	8008488 <__aeabi_dmul>
 801435a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801435e:	ed9d 8b24 	vldr	d8, [sp, #144]	@ 0x90
 8014362:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8014364:	f7f4 f838 	bl	80083d8 <__aeabi_f2d>
 8014368:	4602      	mov	r2, r0
 801436a:	460b      	mov	r3, r1
 801436c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8014370:	ec51 0b18 	vmov	r0, r1, d8
 8014374:	f7f4 f888 	bl	8008488 <__aeabi_dmul>
 8014378:	4602      	mov	r2, r0
 801437a:	460b      	mov	r3, r1
 801437c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8014380:	f7f3 fecc 	bl	800811c <__adddf3>
 8014384:	f7f4 fb78 	bl	8008a78 <__aeabi_d2f>
 8014388:	900e      	str	r0, [sp, #56]	@ 0x38
                rv.x = rv.x * cos_T - rv.y * sin_T;
 801438a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801438e:	4620      	mov	r0, r4
 8014390:	4629      	mov	r1, r5
 8014392:	f7f4 f879 	bl	8008488 <__aeabi_dmul>
 8014396:	4604      	mov	r4, r0
 8014398:	460d      	mov	r5, r1
 801439a:	ec53 2b18 	vmov	r2, r3, d8
 801439e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80143a2:	f7f4 f871 	bl	8008488 <__aeabi_dmul>
 80143a6:	4602      	mov	r2, r0
 80143a8:	460b      	mov	r3, r1
 80143aa:	4620      	mov	r0, r4
 80143ac:	4629      	mov	r1, r5
 80143ae:	f7f3 feb3 	bl	8008118 <__aeabi_dsub>
 80143b2:	e9cd 0122 	strd	r0, r1, [sp, #136]	@ 0x88
                rv.y = r_axisi;
 80143b6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80143b8:	f7f4 f80e 	bl	80083d8 <__aeabi_f2d>
 80143bc:	e9cd 0124 	strd	r0, r1, [sp, #144]	@ 0x90
                count++;
 80143c0:	f10b 0b01 	add.w	fp, fp, #1
 80143c4:	e795      	b.n	80142f2 <mc_arc+0x48a>
    mc_line(target, pl_data);
 80143c6:	9903      	ldr	r1, [sp, #12]
 80143c8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80143ca:	f7ff fd05 	bl	8013dd8 <mc_line>
}
 80143ce:	b029      	add	sp, #164	@ 0xa4
 80143d0:	ecbd 8b06 	vpop	{d8-d10}
 80143d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143d8:	54442d18 	.word	0x54442d18
 80143dc:	401921fb 	.word	0x401921fb
 80143e0:	54442d18 	.word	0x54442d18
 80143e4:	400921fb 	.word	0x400921fb

080143e8 <mc_cubic_b_spline>:
 * the mitigation offered by MIN_STEP and the small computational
 * power available on Arduino, I think it is not wise to implement it.
 */

void mc_cubic_b_spline (float *target, plan_line_data_t *pl_data, float *position, float *first, float *second)
{
 80143e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80143ec:	ed2d 8b10 	vpush	{d8-d15}
 80143f0:	b085      	sub	sp, #20
 80143f2:	4607      	mov	r7, r0
 80143f4:	4689      	mov	r9, r1
 80143f6:	4615      	mov	r5, r2
 80143f8:	461e      	mov	r6, r3
 80143fa:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
    float bez_target[N_AXIS];

    memcpy(bez_target, position, sizeof(float) * N_AXIS);
 80143fe:	ab01      	add	r3, sp, #4
 8014400:	6810      	ldr	r0, [r2, #0]
 8014402:	6851      	ldr	r1, [r2, #4]
 8014404:	6892      	ldr	r2, [r2, #8]
 8014406:	c307      	stmia	r3!, {r0, r1, r2}

    float t = 0.0f, step = BEZIER_MAX_STEP;
 8014408:	ed9f 8a80 	vldr	s16, [pc, #512]	@ 801460c <mc_cubic_b_spline+0x224>
 801440c:	eddf 9a80 	vldr	s19, [pc, #512]	@ 8014610 <mc_cubic_b_spline+0x228>

    while (t < 1.0f) {
 8014410:	e011      	b.n	8014436 <mc_cubic_b_spline+0x4e>
            new_pos1 = candidate_pos1;
            did_reduce = true;
        }

        // If we did not reduce the step, maybe we should enlarge it.
        if (!did_reduce) while (new_t - t <= BEZIER_MAX_STEP) {
 8014412:	2c00      	cmp	r4, #0
 8014414:	f000 809e 	beq.w	8014554 <mc_cubic_b_spline+0x16c>
            assert(new_t - t >= (MIN_STEP) / 2.0);
            assert(new_t - t <= (MAX_STEP) * 2.0);
          }
        */

        step = new_t - t;
 8014418:	ee39 8a69 	vsub.f32	s16, s18, s19
        t = new_t;

        bez_target[X_AXIS] = new_pos0;
 801441c:	edcd aa01 	vstr	s21, [sp, #4]
        bez_target[Y_AXIS] = new_pos1;
 8014420:	ed8d aa02 	vstr	s20, [sp, #8]

        // Bail mid-spline on system abort. Runtime command check already performed by mc_line.
        if(!mc_line(bez_target, pl_data))
 8014424:	4649      	mov	r1, r9
 8014426:	a801      	add	r0, sp, #4
 8014428:	f7ff fcd6 	bl	8013dd8 <mc_line>
 801442c:	2800      	cmp	r0, #0
 801442e:	f000 80e8 	beq.w	8014602 <mc_cubic_b_spline+0x21a>
        t = new_t;
 8014432:	eef0 9a49 	vmov.f32	s19, s18
    while (t < 1.0f) {
 8014436:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801443a:	eef4 9ae7 	vcmpe.f32	s19, s15
 801443e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014442:	f140 80de 	bpl.w	8014602 <mc_cubic_b_spline+0x21a>
        float new_t = t + step;
 8014446:	ee39 9a88 	vadd.f32	s18, s19, s16
        if(new_t > 1.0f)
 801444a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801444e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8014452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014456:	dd01      	ble.n	801445c <mc_cubic_b_spline+0x74>
            new_t = 1.0f;
 8014458:	eeb0 9a67 	vmov.f32	s18, s15
        float new_pos0 = eval_bezier(position[X_AXIS], first[X_AXIS], second[X_AXIS], target[X_AXIS], new_t),
 801445c:	ed95 ba00 	vldr	s22, [r5]
 8014460:	edd6 ba00 	vldr	s23, [r6]
 8014464:	ed98 ca00 	vldr	s24, [r8]
 8014468:	edd7 ca00 	vldr	s25, [r7]
 801446c:	eeb0 2a49 	vmov.f32	s4, s18
 8014470:	eef0 1a6c 	vmov.f32	s3, s25
 8014474:	eeb0 1a4c 	vmov.f32	s2, s24
 8014478:	eef0 0a6b 	vmov.f32	s1, s23
 801447c:	eeb0 0a4b 	vmov.f32	s0, s22
 8014480:	f7ff fc80 	bl	8013d84 <eval_bezier>
 8014484:	eef0 aa40 	vmov.f32	s21, s0
              new_pos1 = eval_bezier(position[Y_AXIS], first[Y_AXIS], second[Y_AXIS], target[Y_AXIS], new_t);
 8014488:	ed95 da01 	vldr	s26, [r5, #4]
 801448c:	edd6 da01 	vldr	s27, [r6, #4]
 8014490:	ed98 ea01 	vldr	s28, [r8, #4]
 8014494:	edd7 ea01 	vldr	s29, [r7, #4]
 8014498:	eeb0 2a49 	vmov.f32	s4, s18
 801449c:	eef0 1a6e 	vmov.f32	s3, s29
 80144a0:	eeb0 1a4e 	vmov.f32	s2, s28
 80144a4:	eef0 0a6d 	vmov.f32	s1, s27
 80144a8:	eeb0 0a4d 	vmov.f32	s0, s26
 80144ac:	f7ff fc6a 	bl	8013d84 <eval_bezier>
 80144b0:	eeb0 aa40 	vmov.f32	s20, s0
        bool did_reduce = false;
 80144b4:	2400      	movs	r4, #0
        while(new_t - t >= (BEZIER_MIN_STEP)) {
 80144b6:	ee79 7a69 	vsub.f32	s15, s18, s19
 80144ba:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8014614 <mc_cubic_b_spline+0x22c>
 80144be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80144c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144c6:	dba4      	blt.n	8014412 <mc_cubic_b_spline+0x2a>
            const float candidate_t = 0.5f * (t + new_t),
 80144c8:	ee39 8a89 	vadd.f32	s16, s19, s18
 80144cc:	eeb6 fa00 	vmov.f32	s30, #96	@ 0x3f000000  0.5
 80144d0:	ee28 8a0f 	vmul.f32	s16, s16, s30
                      candidate_pos0 = eval_bezier(position[X_AXIS], first[X_AXIS], second[X_AXIS], target[X_AXIS], candidate_t),
 80144d4:	eeb0 2a48 	vmov.f32	s4, s16
 80144d8:	eef0 1a6c 	vmov.f32	s3, s25
 80144dc:	eeb0 1a4c 	vmov.f32	s2, s24
 80144e0:	eef0 0a6b 	vmov.f32	s1, s23
 80144e4:	eeb0 0a4b 	vmov.f32	s0, s22
 80144e8:	f7ff fc4c 	bl	8013d84 <eval_bezier>
 80144ec:	eef0 8a40 	vmov.f32	s17, s0
                      candidate_pos1 = eval_bezier(position[Y_AXIS], first[Y_AXIS], second[Y_AXIS], target[Y_AXIS], candidate_t),
 80144f0:	eeb0 2a48 	vmov.f32	s4, s16
 80144f4:	eef0 1a6e 	vmov.f32	s3, s29
 80144f8:	eeb0 1a4e 	vmov.f32	s2, s28
 80144fc:	eef0 0a6d 	vmov.f32	s1, s27
 8014500:	eeb0 0a4d 	vmov.f32	s0, s26
 8014504:	f7ff fc3e 	bl	8013d84 <eval_bezier>
                      interp_pos0 = 0.5f * (bez_target[X_AXIS] + new_pos0),
 8014508:	ed9d 7a01 	vldr	s14, [sp, #4]
 801450c:	ee37 7a2a 	vadd.f32	s14, s14, s21
 8014510:	ee27 7a0f 	vmul.f32	s14, s14, s30
                      interp_pos1 = 0.5f * (bez_target[Y_AXIS] + new_pos1);
 8014514:	eddd 7a02 	vldr	s15, [sp, #8]
 8014518:	ee77 7a8a 	vadd.f32	s15, s15, s20
 801451c:	ee67 7a8f 	vmul.f32	s15, s15, s30
    return fabsf(x1 - x2) + fabsf(y1 - y2);
 8014520:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8014524:	eeb0 7ac7 	vabs.f32	s14, s14
 8014528:	ee70 7a67 	vsub.f32	s15, s0, s15
 801452c:	eef0 7ae7 	vabs.f32	s15, s15
 8014530:	ee77 7a87 	vadd.f32	s15, s15, s14
            if (dist1(candidate_pos0, candidate_pos1, interp_pos0, interp_pos1) <= (BEZIER_SIGMA))
 8014534:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 801460c <mc_cubic_b_spline+0x224>
 8014538:	eef4 7ac7 	vcmpe.f32	s15, s14
 801453c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014540:	f67f af67 	bls.w	8014412 <mc_cubic_b_spline+0x2a>
            new_pos1 = candidate_pos1;
 8014544:	eeb0 aa40 	vmov.f32	s20, s0
            new_pos0 = candidate_pos0;
 8014548:	eef0 aa68 	vmov.f32	s21, s17
            new_t = candidate_t;
 801454c:	eeb0 9a48 	vmov.f32	s18, s16
            did_reduce = true;
 8014550:	2401      	movs	r4, #1
 8014552:	e7b0      	b.n	80144b6 <mc_cubic_b_spline+0xce>
        if (!did_reduce) while (new_t - t <= BEZIER_MAX_STEP) {
 8014554:	ee39 8a69 	vsub.f32	s16, s18, s19
 8014558:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 801460c <mc_cubic_b_spline+0x224>
 801455c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014564:	f63f af58 	bhi.w	8014418 <mc_cubic_b_spline+0x30>
            const float candidate_t = t + 2.0f * (new_t - t);
 8014568:	ee38 8a08 	vadd.f32	s16, s16, s16
 801456c:	ee38 8a29 	vadd.f32	s16, s16, s19
            if (candidate_t >= 1.0f)
 8014570:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014574:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801457c:	f6bf af4c 	bge.w	8014418 <mc_cubic_b_spline+0x30>
            const float candidate_pos0 = eval_bezier(position[X_AXIS], first[X_AXIS], second[X_AXIS], target[X_AXIS], candidate_t),
 8014580:	eeb0 2a48 	vmov.f32	s4, s16
 8014584:	eef0 1a6c 	vmov.f32	s3, s25
 8014588:	eeb0 1a4c 	vmov.f32	s2, s24
 801458c:	eef0 0a6b 	vmov.f32	s1, s23
 8014590:	eeb0 0a4b 	vmov.f32	s0, s22
 8014594:	f7ff fbf6 	bl	8013d84 <eval_bezier>
 8014598:	eef0 8a40 	vmov.f32	s17, s0
                      candidate_pos1 = eval_bezier(position[Y_AXIS], first[Y_AXIS], second[Y_AXIS], target[Y_AXIS], candidate_t),
 801459c:	eeb0 2a48 	vmov.f32	s4, s16
 80145a0:	eef0 1a6e 	vmov.f32	s3, s29
 80145a4:	eeb0 1a4e 	vmov.f32	s2, s28
 80145a8:	eef0 0a6d 	vmov.f32	s1, s27
 80145ac:	eeb0 0a4d 	vmov.f32	s0, s26
 80145b0:	f7ff fbe8 	bl	8013d84 <eval_bezier>
                      interp_pos0 = 0.5f * (bez_target[X_AXIS] + candidate_pos0),
 80145b4:	eddd 7a01 	vldr	s15, [sp, #4]
 80145b8:	ee77 7aa8 	vadd.f32	s15, s15, s17
 80145bc:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80145c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
                      interp_pos1 = 0.5f * (bez_target[Y_AXIS] + candidate_pos1);
 80145c4:	ed9d 7a02 	vldr	s14, [sp, #8]
 80145c8:	ee37 7a00 	vadd.f32	s14, s14, s0
 80145cc:	ee27 7a26 	vmul.f32	s14, s14, s13
    return fabsf(x1 - x2) + fabsf(y1 - y2);
 80145d0:	ee7a 7ae7 	vsub.f32	s15, s21, s15
 80145d4:	eef0 7ae7 	vabs.f32	s15, s15
 80145d8:	ee3a 7a47 	vsub.f32	s14, s20, s14
 80145dc:	eeb0 7ac7 	vabs.f32	s14, s14
 80145e0:	ee77 7a87 	vadd.f32	s15, s15, s14
            if (dist1(new_pos0, new_pos1, interp_pos0, interp_pos1) > (BEZIER_SIGMA))
 80145e4:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 801460c <mc_cubic_b_spline+0x224>
 80145e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80145ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145f0:	f73f af12 	bgt.w	8014418 <mc_cubic_b_spline+0x30>
            new_pos1 = candidate_pos1;
 80145f4:	eeb0 aa40 	vmov.f32	s20, s0
            new_pos0 = candidate_pos0;
 80145f8:	eef0 aa68 	vmov.f32	s21, s17
            new_t = candidate_t;
 80145fc:	eeb0 9a48 	vmov.f32	s18, s16
 8014600:	e7a8      	b.n	8014554 <mc_cubic_b_spline+0x16c>
            return;
    }
}
 8014602:	b005      	add	sp, #20
 8014604:	ecbd 8b10 	vpop	{d8-d15}
 8014608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801460c:	3dcccccd 	.word	0x3dcccccd
 8014610:	00000000 	.word	0x00000000
 8014614:	3b03126f 	.word	0x3b03126f

08014618 <mc_thread>:
// R - depth regression, Q - compound slide angle, H - spring passes, E - taper, L - taper end

// TODO: change pitch to follow any tapers

void mc_thread (plan_line_data_t *pl_data, float *position, gc_thread_data *thread, bool feed_hold_disabled)
{
 8014618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801461c:	ed2d 8b08 	vpush	{d8-d11}
 8014620:	b085      	sub	sp, #20
 8014622:	4604      	mov	r4, r0
 8014624:	460f      	mov	r7, r1
 8014626:	4615      	mov	r5, r2
 8014628:	4699      	mov	r9, r3
    uint_fast16_t pass = 1, passes = 0;
    float doc = thread->initial_depth, inv_degression = 1.0f / thread->depth_degression, thread_length;
 801462a:	ed92 8a03 	vldr	s16, [r2, #12]
 801462e:	edd2 7a05 	vldr	s15, [r2, #20]
 8014632:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014636:	eec7 8a27 	vdiv.f32	s17, s14, s15
    float entry_taper_length = thread->end_taper_type & Taper_Entry ? thread->end_taper_length : 0.0f;
 801463a:	f892 a02c 	ldrb.w	sl, [r2, #44]	@ 0x2c
 801463e:	f01a 0b01 	ands.w	fp, sl, #1
 8014642:	d067      	beq.n	8014714 <mc_thread+0xfc>
 8014644:	ed92 aa07 	vldr	s20, [r2, #28]
    float exit_taper_length = thread->end_taper_type & Taper_Exit ? thread->end_taper_length : 0.0f;
 8014648:	f01a 0a02 	ands.w	sl, sl, #2
 801464c:	d065      	beq.n	801471a <mc_thread+0x102>
 801464e:	edd5 aa07 	vldr	s21, [r5, #28]
    float infeed_factor = tanf(thread->infeed_angle * RADDEG);
 8014652:	ed95 0a08 	vldr	s0, [r5, #32]
 8014656:	eddf 7aae 	vldr	s15, [pc, #696]	@ 8014910 <mc_thread+0x2f8>
 801465a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801465e:	f013 fa6b 	bl	8027b38 <tanf>
 8014662:	eeb0 9a40 	vmov.f32	s18, s0
    float target[N_AXIS], start_z = position[Z_AXIS] + thread->depth * infeed_factor;
 8014666:	edd7 9a02 	vldr	s19, [r7, #8]
 801466a:	ed95 ba04 	vldr	s22, [r5, #16]
 801466e:	ee6b 7a00 	vmul.f32	s15, s22, s0
 8014672:	ee79 9aa7 	vadd.f32	s19, s19, s15

    memcpy(target, position, sizeof(float) * N_AXIS);
 8014676:	ab01      	add	r3, sp, #4
 8014678:	6838      	ldr	r0, [r7, #0]
 801467a:	6879      	ldr	r1, [r7, #4]
 801467c:	68ba      	ldr	r2, [r7, #8]
 801467e:	c307      	stmia	r3!, {r0, r1, r2}
    uint_fast16_t pass = 1, passes = 0;
 8014680:	f04f 0800 	mov.w	r8, #0

    // Calculate number of passes
    while(calc_thread_doc(++passes, doc, inv_degression) < thread->depth);
 8014684:	f108 0801 	add.w	r8, r8, #1
    return cut_depth * powf((float)pass, inv_degression);
 8014688:	eef0 0a68 	vmov.f32	s1, s17
 801468c:	ee07 8a90 	vmov	s15, r8
 8014690:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014694:	f013 f950 	bl	8027938 <powf>
 8014698:	ee28 0a00 	vmul.f32	s0, s16, s0
    while(calc_thread_doc(++passes, doc, inv_degression) < thread->depth);
 801469c:	eeb4 bac0 	vcmpe.f32	s22, s0
 80146a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146a4:	dcee      	bgt.n	8014684 <mc_thread+0x6c>

    passes += thread->spring_passes + 1;
 80146a6:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 80146a8:	4446      	add	r6, r8
 80146aa:	3601      	adds	r6, #1

    if((thread_length = thread->z_final - position[Z_AXIS]) > 0.0f) {
 80146ac:	ed95 ba01 	vldr	s22, [r5, #4]
 80146b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80146b4:	ee3b ba67 	vsub.f32	s22, s22, s15
 80146b8:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 80146bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146c0:	dd09      	ble.n	80146d6 <mc_thread+0xbe>
        if(thread->end_taper_type & Taper_Entry)
 80146c2:	f1bb 0f00 	cmp.w	fp, #0
 80146c6:	d001      	beq.n	80146cc <mc_thread+0xb4>
            entry_taper_length = -entry_taper_length;
 80146c8:	eeb1 aa4a 	vneg.f32	s20, s20
        if(thread->end_taper_type & Taper_Exit)
 80146cc:	f1ba 0f00 	cmp.w	sl, #0
 80146d0:	d001      	beq.n	80146d6 <mc_thread+0xbe>
            exit_taper_length = - exit_taper_length;
 80146d2:	eef1 aa6a 	vneg.f32	s21, s21
    }

    thread_length += entry_taper_length + exit_taper_length;
 80146d6:	ee7a 7a2a 	vadd.f32	s15, s20, s21
 80146da:	ee37 ba8b 	vadd.f32	s22, s15, s22

    if(thread->main_taper_height != 0.0f)
 80146de:	ed95 7a06 	vldr	s14, [r5, #24]
 80146e2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80146e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146ea:	d007      	beq.n	80146fc <mc_thread+0xe4>
        thread->main_taper_height = thread->main_taper_height * thread_length / (thread_length - (entry_taper_length + exit_taper_length));
 80146ec:	ee27 7a0b 	vmul.f32	s14, s14, s22
 80146f0:	ee7b 7a67 	vsub.f32	s15, s22, s15
 80146f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80146f8:	edc5 6a06 	vstr	s13, [r5, #24]

    pl_data->condition.rapid_motion = On; // Set rapid motion condition flag.
 80146fc:	7d23      	ldrb	r3, [r4, #20]
 80146fe:	f043 0301 	orr.w	r3, r3, #1
 8014702:	7523      	strb	r3, [r4, #20]
    float acc_distance = pl_data->feed_rate * pl_data->spindle.hal->get_data(SpindleData_RPM)->rpm / settings.acceleration[Z_AXIS];
    acc_distance = acc_distance * acc_distance * settings.acceleration[Z_AXIS] * 0.5f;
     */

    // Initial Z-move for compound slide angle offset.
    if(infeed_factor != 0.0f) {
 8014704:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8014708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801470c:	d108      	bne.n	8014720 <mc_thread+0x108>

            // Restore disable feed hold status for reposition move.
            pl_data->overrides.feed_hold_disable = feed_hold_disabled;

            // 5. Back to start, add compound slide angle offset when commanded.
            target[Z_AXIS] = start_z - (infeed_factor != 0.0f ? doc * infeed_factor : 0.0f);
 801470e:	f04f 0801 	mov.w	r8, #1
 8014712:	e04f      	b.n	80147b4 <mc_thread+0x19c>
    float entry_taper_length = thread->end_taper_type & Taper_Entry ? thread->end_taper_length : 0.0f;
 8014714:	ed9f aa7f 	vldr	s20, [pc, #508]	@ 8014914 <mc_thread+0x2fc>
 8014718:	e796      	b.n	8014648 <mc_thread+0x30>
    float exit_taper_length = thread->end_taper_type & Taper_Exit ? thread->end_taper_length : 0.0f;
 801471a:	eddf aa7e 	vldr	s21, [pc, #504]	@ 8014914 <mc_thread+0x2fc>
 801471e:	e798      	b.n	8014652 <mc_thread+0x3a>
        target[Z_AXIS] = start_z - doc * infeed_factor;
 8014720:	ee68 7a09 	vmul.f32	s15, s16, s18
 8014724:	ee79 7ae7 	vsub.f32	s15, s19, s15
 8014728:	edcd 7a03 	vstr	s15, [sp, #12]
        if(!mc_line(target, pl_data))
 801472c:	4621      	mov	r1, r4
 801472e:	a801      	add	r0, sp, #4
 8014730:	f7ff fb52 	bl	8013dd8 <mc_line>
 8014734:	2800      	cmp	r0, #0
 8014736:	d1ea      	bne.n	801470e <mc_thread+0xf6>
            target[X_AXIS] = position[X_AXIS];
            if(!mc_line(target, pl_data))
                return;
        }
    }
}
 8014738:	b005      	add	sp, #20
 801473a:	ecbd 8b08 	vpop	{d8-d11}
 801473e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            target[X_AXIS] = position[X_AXIS] + (thread->peak + doc) * thread->cut_direction;
 8014742:	ed97 7a00 	vldr	s14, [r7]
 8014746:	edd5 7a02 	vldr	s15, [r5, #8]
 801474a:	ee77 7a88 	vadd.f32	s15, s15, s16
 801474e:	edd5 6a09 	vldr	s13, [r5, #36]	@ 0x24
 8014752:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014756:	ee77 7a27 	vadd.f32	s15, s14, s15
 801475a:	edcd 7a01 	vstr	s15, [sp, #4]
 801475e:	e042      	b.n	80147e6 <mc_thread+0x1ce>
        if(!protocol_buffer_synchronize() && state_get() != STATE_IDLE) // Wait until any previous moves are finished.
 8014760:	f00a fcd2 	bl	801f108 <state_get>
 8014764:	2800      	cmp	r0, #0
 8014766:	d048      	beq.n	80147fa <mc_thread+0x1e2>
 8014768:	e7e6      	b.n	8014738 <mc_thread+0x120>
            target[X_AXIS] -= thread->depth * thread->cut_direction;
 801476a:	ed95 7a04 	vldr	s14, [r5, #16]
 801476e:	edd5 7a09 	vldr	s15, [r5, #36]	@ 0x24
 8014772:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014776:	eddd 7a01 	vldr	s15, [sp, #4]
 801477a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801477e:	edcd 7a01 	vstr	s15, [sp, #4]
            target[Z_AXIS] -= exit_taper_length;
 8014782:	eddd 7a03 	vldr	s15, [sp, #12]
 8014786:	ee77 7aea 	vsub.f32	s15, s15, s21
 801478a:	edcd 7a03 	vstr	s15, [sp, #12]
            if(!mc_line(target, pl_data))
 801478e:	4621      	mov	r1, r4
 8014790:	a801      	add	r0, sp, #4
 8014792:	f7ff fb21 	bl	8013dd8 <mc_line>
 8014796:	2800      	cmp	r0, #0
 8014798:	d16c      	bne.n	8014874 <mc_thread+0x25c>
 801479a:	e7cd      	b.n	8014738 <mc_thread+0x120>
            target[Z_AXIS] = start_z - (infeed_factor != 0.0f ? doc * infeed_factor : 0.0f);
 801479c:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8014914 <mc_thread+0x2fc>
 80147a0:	ee79 7ae7 	vsub.f32	s15, s19, s15
 80147a4:	edcd 7a03 	vstr	s15, [sp, #12]
            if(!mc_line(target, pl_data))
 80147a8:	4621      	mov	r1, r4
 80147aa:	a801      	add	r0, sp, #4
 80147ac:	f7ff fb14 	bl	8013dd8 <mc_line>
 80147b0:	2800      	cmp	r0, #0
 80147b2:	d0c1      	beq.n	8014738 <mc_thread+0x120>
    while(--passes) {
 80147b4:	3e01      	subs	r6, #1
 80147b6:	d0bf      	beq.n	8014738 <mc_thread+0x120>
        if(thread->end_taper_type & Taper_Entry)
 80147b8:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80147bc:	f013 0f01 	tst.w	r3, #1
 80147c0:	d0bf      	beq.n	8014742 <mc_thread+0x12a>
            target[X_AXIS] = position[X_AXIS] + (thread->peak + doc - thread->depth) * thread->cut_direction;
 80147c2:	ed97 7a00 	vldr	s14, [r7]
 80147c6:	edd5 7a02 	vldr	s15, [r5, #8]
 80147ca:	ee77 7a88 	vadd.f32	s15, s15, s16
 80147ce:	edd5 6a04 	vldr	s13, [r5, #16]
 80147d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80147d6:	edd5 6a09 	vldr	s13, [r5, #36]	@ 0x24
 80147da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80147de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80147e2:	edcd 7a01 	vstr	s15, [sp, #4]
        if(!mc_line(target, pl_data))
 80147e6:	4621      	mov	r1, r4
 80147e8:	a801      	add	r0, sp, #4
 80147ea:	f7ff faf5 	bl	8013dd8 <mc_line>
 80147ee:	2800      	cmp	r0, #0
 80147f0:	d0a2      	beq.n	8014738 <mc_thread+0x120>
        if(!protocol_buffer_synchronize() && state_get() != STATE_IDLE) // Wait until any previous moves are finished.
 80147f2:	f003 fbef 	bl	8017fd4 <protocol_buffer_synchronize>
 80147f6:	2800      	cmp	r0, #0
 80147f8:	d0b2      	beq.n	8014760 <mc_thread+0x148>
        pl_data->condition.rapid_motion = Off;      // Clear rapid motion condition flag,
 80147fa:	7d23      	ldrb	r3, [r4, #20]
 80147fc:	f36f 0300 	bfc	r3, #0, #1
 8014800:	7523      	strb	r3, [r4, #20]
        pl_data->spindle.state.synchronized = On;   // enable spindle sync for cut
 8014802:	7a23      	ldrb	r3, [r4, #8]
 8014804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014808:	7223      	strb	r3, [r4, #8]
        pl_data->overrides.feed_hold_disable = On;  // and disable feed hold
 801480a:	7e22      	ldrb	r2, [r4, #24]
 801480c:	f042 0202 	orr.w	r2, r2, #2
 8014810:	7622      	strb	r2, [r4, #24]
        if(thread->end_taper_type & Taper_Entry) {
 8014812:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8014816:	f013 0f01 	tst.w	r3, #1
 801481a:	d018      	beq.n	801484e <mc_thread+0x236>
            target[X_AXIS] += thread->depth * thread->cut_direction;
 801481c:	ed95 7a04 	vldr	s14, [r5, #16]
 8014820:	edd5 7a09 	vldr	s15, [r5, #36]	@ 0x24
 8014824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014828:	eddd 7a01 	vldr	s15, [sp, #4]
 801482c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014830:	edcd 7a01 	vstr	s15, [sp, #4]
            target[Z_AXIS] -= entry_taper_length;
 8014834:	eddd 7a03 	vldr	s15, [sp, #12]
 8014838:	ee77 7aca 	vsub.f32	s15, s15, s20
 801483c:	edcd 7a03 	vstr	s15, [sp, #12]
            if(!mc_line(target, pl_data))
 8014840:	4621      	mov	r1, r4
 8014842:	a801      	add	r0, sp, #4
 8014844:	f7ff fac8 	bl	8013dd8 <mc_line>
 8014848:	2800      	cmp	r0, #0
 801484a:	f43f af75 	beq.w	8014738 <mc_thread+0x120>
        target[Z_AXIS] += thread_length;
 801484e:	eddd 7a03 	vldr	s15, [sp, #12]
 8014852:	ee77 7a8b 	vadd.f32	s15, s15, s22
 8014856:	edcd 7a03 	vstr	s15, [sp, #12]
        if(!mc_line(target, pl_data))
 801485a:	4621      	mov	r1, r4
 801485c:	a801      	add	r0, sp, #4
 801485e:	f7ff fabb 	bl	8013dd8 <mc_line>
 8014862:	2800      	cmp	r0, #0
 8014864:	f43f af68 	beq.w	8014738 <mc_thread+0x120>
        if(thread->end_taper_type & Taper_Exit) {
 8014868:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801486c:	f013 0f02 	tst.w	r3, #2
 8014870:	f47f af7b 	bne.w	801476a <mc_thread+0x152>
        pl_data->condition.rapid_motion = On;       // Set rapid motion condition flag and
 8014874:	7d23      	ldrb	r3, [r4, #20]
 8014876:	f043 0301 	orr.w	r3, r3, #1
 801487a:	7523      	strb	r3, [r4, #20]
        pl_data->spindle.state.synchronized = Off;  // disable spindle sync for retract & reposition
 801487c:	7a23      	ldrb	r3, [r4, #8]
 801487e:	f36f 13c7 	bfc	r3, #7, #1
 8014882:	7223      	strb	r3, [r4, #8]
        if(passes > 1) {
 8014884:	2e01      	cmp	r6, #1
 8014886:	d936      	bls.n	80148f6 <mc_thread+0x2de>
            doc = calc_thread_doc(++pass, thread->initial_depth, inv_degression);
 8014888:	f108 0801 	add.w	r8, r8, #1
 801488c:	ed95 8a03 	vldr	s16, [r5, #12]
    return cut_depth * powf((float)pass, inv_degression);
 8014890:	eef0 0a68 	vmov.f32	s1, s17
 8014894:	ee07 8a90 	vmov	s15, r8
 8014898:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801489c:	f013 f84c 	bl	8027938 <powf>
 80148a0:	ee28 8a00 	vmul.f32	s16, s16, s0
            doc = min(doc, thread->depth);
 80148a4:	edd5 7a04 	vldr	s15, [r5, #16]
 80148a8:	eef4 7ac8 	vcmpe.f32	s15, s16
 80148ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148b0:	dc01      	bgt.n	80148b6 <mc_thread+0x29e>
 80148b2:	eeb0 8a67 	vmov.f32	s16, s15
            target[X_AXIS] = position[X_AXIS] + (doc - thread->depth) * thread->cut_direction;
 80148b6:	ed97 7a00 	vldr	s14, [r7]
 80148ba:	ee78 7a67 	vsub.f32	s15, s16, s15
 80148be:	edd5 6a09 	vldr	s13, [r5, #36]	@ 0x24
 80148c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80148c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80148ca:	edcd 7a01 	vstr	s15, [sp, #4]
            if(!mc_line(target, pl_data))
 80148ce:	4621      	mov	r1, r4
 80148d0:	a801      	add	r0, sp, #4
 80148d2:	f7ff fa81 	bl	8013dd8 <mc_line>
 80148d6:	2800      	cmp	r0, #0
 80148d8:	f43f af2e 	beq.w	8014738 <mc_thread+0x120>
            pl_data->overrides.feed_hold_disable = feed_hold_disabled;
 80148dc:	7e23      	ldrb	r3, [r4, #24]
 80148de:	f369 0341 	bfi	r3, r9, #1, #1
 80148e2:	7623      	strb	r3, [r4, #24]
            target[Z_AXIS] = start_z - (infeed_factor != 0.0f ? doc * infeed_factor : 0.0f);
 80148e4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80148e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148ec:	f43f af56 	beq.w	801479c <mc_thread+0x184>
 80148f0:	ee68 7a09 	vmul.f32	s15, s16, s18
 80148f4:	e754      	b.n	80147a0 <mc_thread+0x188>
            doc = thread->depth;
 80148f6:	ed95 8a04 	vldr	s16, [r5, #16]
            target[X_AXIS] = position[X_AXIS];
 80148fa:	683b      	ldr	r3, [r7, #0]
 80148fc:	9301      	str	r3, [sp, #4]
            if(!mc_line(target, pl_data))
 80148fe:	4621      	mov	r1, r4
 8014900:	a801      	add	r0, sp, #4
 8014902:	f7ff fa69 	bl	8013dd8 <mc_line>
 8014906:	2800      	cmp	r0, #0
 8014908:	f47f af54 	bne.w	80147b4 <mc_thread+0x19c>
 801490c:	e714      	b.n	8014738 <mc_thread+0x120>
 801490e:	bf00      	nop
 8014910:	3c8efa35 	.word	0x3c8efa35
 8014914:	00000000 	.word	0x00000000

08014918 <mc_jog_execute>:

// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
status_code_t mc_jog_execute (plan_line_data_t *pl_data, parser_block_t *gc_block, float *position)
{
 8014918:	b538      	push	{r3, r4, r5, lr}
 801491a:	4604      	mov	r4, r0
 801491c:	460d      	mov	r5, r1
    // Initialize planner data struct for jogging motions.
    // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
    pl_data->feed_rate = gc_block->values.f;
 801491e:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
 8014920:	6003      	str	r3, [r0, #0]
    pl_data->condition.no_feed_override =
    pl_data->condition.jog_motion =
    pl_data->condition.target_valid =
    pl_data->condition.target_validated = On;
 8014922:	7d43      	ldrb	r3, [r0, #21]
 8014924:	f043 0304 	orr.w	r3, r3, #4
 8014928:	7543      	strb	r3, [r0, #21]
    pl_data->condition.target_valid =
 801492a:	b2db      	uxtb	r3, r3
 801492c:	f043 0302 	orr.w	r3, r3, #2
 8014930:	7543      	strb	r3, [r0, #21]
    pl_data->condition.jog_motion =
 8014932:	7d03      	ldrb	r3, [r0, #20]
 8014934:	f043 0304 	orr.w	r3, r3, #4
 8014938:	7503      	strb	r3, [r0, #20]
    pl_data->condition.no_feed_override =
 801493a:	b2db      	uxtb	r3, r3
 801493c:	f043 0310 	orr.w	r3, r3, #16
 8014940:	7503      	strb	r3, [r0, #20]
    pl_data->line_number = gc_block->values.n;
 8014942:	f8d1 30a4 	ldr.w	r3, [r1, #164]	@ 0xa4
 8014946:	61c3      	str	r3, [r0, #28]

    if(settings.limits.flags.jog_soft_limited)
 8014948:	4b1d      	ldr	r3, [pc, #116]	@ (80149c0 <mc_jog_execute+0xa8>)
 801494a:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 801494e:	f013 0f08 	tst.w	r3, #8
 8014952:	d013      	beq.n	801497c <mc_jog_execute+0x64>
 8014954:	4611      	mov	r1, r2
        grbl.apply_jog_limits(gc_block->values.xyz, position);
 8014956:	4b1b      	ldr	r3, [pc, #108]	@ (80149c4 <mc_jog_execute+0xac>)
 8014958:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801495c:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 8014960:	4798      	blx	r3
    else if(sys.soft_limits.mask && !grbl.check_travel_limits(gc_block->values.xyz, sys.soft_limits, true))
        return Status_TravelExceeded;

    // Valid jog command. Plan, set state, and execute.
    mc_line(gc_block->values.xyz, pl_data);
 8014962:	4621      	mov	r1, r4
 8014964:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 8014968:	f7ff fa36 	bl	8013dd8 <mc_line>

#ifndef KINEMATICS_API // kinematics may segment long jog moves triggering auto start (RUN)...
    sys_state_t state = state_get();
 801496c:	f00a fbcc 	bl	801f108 <state_get>
    if ((state == STATE_IDLE || state == STATE_TOOL_CHANGE) && plan_get_current_block() != NULL) { // Check if there is a block to execute.
 8014970:	b1b8      	cbz	r0, 80149a2 <mc_jog_execute+0x8a>
 8014972:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8014976:	d014      	beq.n	80149a2 <mc_jog_execute+0x8a>
        st_prep_buffer();
        st_wake_up();  // NOTE: Manual start. No state machine required.
    }
#endif

    return Status_OK;
 8014978:	2000      	movs	r0, #0
}
 801497a:	bd38      	pop	{r3, r4, r5, pc}
    else if(sys.soft_limits.mask && !grbl.check_travel_limits(gc_block->values.xyz, sys.soft_limits, true))
 801497c:	4b12      	ldr	r3, [pc, #72]	@ (80149c8 <mc_jog_execute+0xb0>)
 801497e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8014982:	2b00      	cmp	r3, #0
 8014984:	d0ed      	beq.n	8014962 <mc_jog_execute+0x4a>
 8014986:	4b0f      	ldr	r3, [pc, #60]	@ (80149c4 <mc_jog_execute+0xac>)
 8014988:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801498c:	2201      	movs	r2, #1
 801498e:	490e      	ldr	r1, [pc, #56]	@ (80149c8 <mc_jog_execute+0xb0>)
 8014990:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 8014994:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 8014998:	4798      	blx	r3
 801499a:	2800      	cmp	r0, #0
 801499c:	d1e1      	bne.n	8014962 <mc_jog_execute+0x4a>
        return Status_TravelExceeded;
 801499e:	200f      	movs	r0, #15
 80149a0:	e7eb      	b.n	801497a <mc_jog_execute+0x62>
    if ((state == STATE_IDLE || state == STATE_TOOL_CHANGE) && plan_get_current_block() != NULL) { // Check if there is a block to execute.
 80149a2:	f002 f87d 	bl	8016aa0 <plan_get_current_block>
 80149a6:	b140      	cbz	r0, 80149ba <mc_jog_execute+0xa2>
        state_set(STATE_JOG);
 80149a8:	2020      	movs	r0, #32
 80149aa:	f00a fbb3 	bl	801f114 <state_set>
        st_prep_buffer();
 80149ae:	f00b fbb9 	bl	8020124 <st_prep_buffer>
        st_wake_up();  // NOTE: Manual start. No state machine required.
 80149b2:	f00b f8c5 	bl	801fb40 <st_wake_up>
    return Status_OK;
 80149b6:	2000      	movs	r0, #0
 80149b8:	e7df      	b.n	801497a <mc_jog_execute+0x62>
 80149ba:	2000      	movs	r0, #0
 80149bc:	e7dd      	b.n	801497a <mc_jog_execute+0x62>
 80149be:	bf00      	nop
 80149c0:	200022f4 	.word	0x200022f4
 80149c4:	20001ac4 	.word	0x20001ac4
 80149c8:	20001bbc 	.word	0x20001bbc

080149cc <mc_dwell>:

// Execute dwell in seconds.
void mc_dwell (float seconds)
{
 80149cc:	b508      	push	{r3, lr}
 80149ce:	ed2d 8b02 	vpush	{d8}
 80149d2:	eeb0 8a40 	vmov.f32	s16, s0
    if (state_get() != STATE_CHECK_MODE) {
 80149d6:	f00a fb97 	bl	801f108 <state_get>
 80149da:	2802      	cmp	r0, #2
 80149dc:	d102      	bne.n	80149e4 <mc_dwell+0x18>
        protocol_buffer_synchronize();
        delay_sec(seconds, DelayMode_Dwell);
    }
}
 80149de:	ecbd 8b02 	vpop	{d8}
 80149e2:	bd08      	pop	{r3, pc}
        protocol_buffer_synchronize();
 80149e4:	f003 faf6 	bl	8017fd4 <protocol_buffer_synchronize>
        delay_sec(seconds, DelayMode_Dwell);
 80149e8:	2000      	movs	r0, #0
 80149ea:	eeb0 0a48 	vmov.f32	s0, s16
 80149ee:	f001 fa59 	bl	8015ea4 <delay_sec>
}
 80149f2:	e7f4      	b.n	80149de <mc_dwell+0x12>

080149f4 <mc_canned_drill>:
{
 80149f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149f8:	ed2d 8b02 	vpush	{d8}
 80149fc:	4681      	mov	r9, r0
 80149fe:	468a      	mov	sl, r1
 8014a00:	4614      	mov	r4, r2
 8014a02:	461f      	mov	r7, r3
 8014a04:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
    pl_data->condition.rapid_motion = On; // Set rapid motion condition flag.
 8014a06:	7d13      	ldrb	r3, [r2, #20]
 8014a08:	f043 0301 	orr.w	r3, r3, #1
 8014a0c:	7513      	strb	r3, [r2, #20]
    if(position[plane.axis_linear] < canned->retract_position) {
 8014a0e:	f89d 8032 	ldrb.w	r8, [sp, #50]	@ 0x32
 8014a12:	eb07 0688 	add.w	r6, r7, r8, lsl #2
 8014a16:	ed96 7a00 	vldr	s14, [r6]
 8014a1a:	edd5 7a05 	vldr	s15, [r5, #20]
 8014a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a26:	d426      	bmi.n	8014a76 <mc_canned_drill+0x82>
    float position_linear = position[plane.axis_linear],
 8014a28:	6833      	ldr	r3, [r6, #0]
          retract_to = canned->retract_mode == CCRetractMode_RPos ? canned->retract_position : position_linear;
 8014a2a:	7eaa      	ldrb	r2, [r5, #26]
 8014a2c:	2a01      	cmp	r2, #1
 8014a2e:	d02e      	beq.n	8014a8e <mc_canned_drill+0x9a>
 8014a30:	ee08 3a90 	vmov	s17, r3
    memcpy(position, target, sizeof(float) * N_AXIS);
 8014a34:	f8da 0000 	ldr.w	r0, [sl]
 8014a38:	f8da 1004 	ldr.w	r1, [sl, #4]
 8014a3c:	f8da 2008 	ldr.w	r2, [sl, #8]
 8014a40:	6038      	str	r0, [r7, #0]
 8014a42:	6079      	str	r1, [r7, #4]
 8014a44:	60ba      	str	r2, [r7, #8]
    position[plane.axis_linear] = position_linear;
 8014a46:	6033      	str	r3, [r6, #0]
    if(!mc_line(position, pl_data))
 8014a48:	4621      	mov	r1, r4
 8014a4a:	4638      	mov	r0, r7
 8014a4c:	f7ff f9c4 	bl	8013dd8 <mc_line>
 8014a50:	b1c8      	cbz	r0, 8014a86 <mc_canned_drill+0x92>
    while(repeats--) {
 8014a52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014a54:	f103 3bff 	add.w	fp, r3, #4294967295
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	f000 80bc 	beq.w	8014bd6 <mc_canned_drill+0x1e2>
        if(position[plane.axis_linear] > canned->retract_position) {
 8014a5e:	ed96 7a00 	vldr	s14, [r6]
 8014a62:	edd5 7a05 	vldr	s15, [r5, #20]
 8014a66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a6e:	dc11      	bgt.n	8014a94 <mc_canned_drill+0xa0>
        position_linear = position[plane.axis_linear];
 8014a70:	edd6 7a00 	vldr	s15, [r6]
        while(position_linear > canned->xyz[plane.axis_linear]) {
 8014a74:	e02f      	b.n	8014ad6 <mc_canned_drill+0xe2>
        position[plane.axis_linear] = canned->retract_position;
 8014a76:	edc6 7a00 	vstr	s15, [r6]
        if(!mc_line(position, pl_data))
 8014a7a:	4611      	mov	r1, r2
 8014a7c:	4638      	mov	r0, r7
 8014a7e:	f7ff f9ab 	bl	8013dd8 <mc_line>
 8014a82:	2800      	cmp	r0, #0
 8014a84:	d1d0      	bne.n	8014a28 <mc_canned_drill+0x34>
}
 8014a86:	ecbd 8b02 	vpop	{d8}
 8014a8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          retract_to = canned->retract_mode == CCRetractMode_RPos ? canned->retract_position : position_linear;
 8014a8e:	edd5 8a05 	vldr	s17, [r5, #20]
 8014a92:	e7cf      	b.n	8014a34 <mc_canned_drill+0x40>
            position[plane.axis_linear] = canned->retract_position;
 8014a94:	edc6 7a00 	vstr	s15, [r6]
            if(!mc_line(position, pl_data))
 8014a98:	4621      	mov	r1, r4
 8014a9a:	4638      	mov	r0, r7
 8014a9c:	f7ff f99c 	bl	8013dd8 <mc_line>
 8014aa0:	2800      	cmp	r0, #0
 8014aa2:	d1e5      	bne.n	8014a70 <mc_canned_drill+0x7c>
 8014aa4:	e7ef      	b.n	8014a86 <mc_canned_drill+0x92>
                mc_dwell(canned->dwell);
 8014aa6:	f7ff ff91 	bl	80149cc <mc_dwell>
 8014aaa:	e03b      	b.n	8014b24 <mc_canned_drill+0x130>
            switch(motion) {
 8014aac:	f1b9 0f49 	cmp.w	r9, #73	@ 0x49
 8014ab0:	d043      	beq.n	8014b3a <mc_canned_drill+0x146>
                    position[plane.axis_linear] = retract_to;
 8014ab2:	edc6 8a00 	vstr	s17, [r6]
            pl_data->condition.rapid_motion = canned->rapid_retract;
 8014ab6:	7e2a      	ldrb	r2, [r5, #24]
 8014ab8:	7d23      	ldrb	r3, [r4, #20]
 8014aba:	f362 0300 	bfi	r3, r2, #0, #1
 8014abe:	7523      	strb	r3, [r4, #20]
            if(!mc_line(position, pl_data))
 8014ac0:	4621      	mov	r1, r4
 8014ac2:	4638      	mov	r0, r7
 8014ac4:	f7ff f988 	bl	8013dd8 <mc_line>
 8014ac8:	2800      	cmp	r0, #0
 8014aca:	d0dc      	beq.n	8014a86 <mc_canned_drill+0x92>
            if(canned->spindle_off)
 8014acc:	7e6b      	ldrb	r3, [r5, #25]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d149      	bne.n	8014b66 <mc_canned_drill+0x172>
                                                   : position[plane.axis_linear] + settings.g73_retract;
 8014ad2:	eef0 7a48 	vmov.f32	s15, s16
        while(position_linear > canned->xyz[plane.axis_linear]) {
 8014ad6:	eb05 0388 	add.w	r3, r5, r8, lsl #2
 8014ada:	ed93 8a00 	vldr	s16, [r3]
 8014ade:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ae6:	d546      	bpl.n	8014b76 <mc_canned_drill+0x182>
            position_linear -= canned->delta;
 8014ae8:	ed95 7a03 	vldr	s14, [r5, #12]
 8014aec:	ee77 7ac7 	vsub.f32	s15, s15, s14
            if(position_linear < canned->xyz[plane.axis_linear])
 8014af0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014af8:	dc01      	bgt.n	8014afe <mc_canned_drill+0x10a>
            position_linear -= canned->delta;
 8014afa:	eeb0 8a67 	vmov.f32	s16, s15
            pl_data->condition.rapid_motion = Off;
 8014afe:	7d23      	ldrb	r3, [r4, #20]
 8014b00:	f36f 0300 	bfc	r3, #0, #1
 8014b04:	7523      	strb	r3, [r4, #20]
            position[plane.axis_linear] = position_linear;
 8014b06:	ed86 8a00 	vstr	s16, [r6]
            if(!mc_line(position, pl_data)) // drill
 8014b0a:	4621      	mov	r1, r4
 8014b0c:	4638      	mov	r0, r7
 8014b0e:	f7ff f963 	bl	8013dd8 <mc_line>
 8014b12:	2800      	cmp	r0, #0
 8014b14:	d0b7      	beq.n	8014a86 <mc_canned_drill+0x92>
            if(canned->dwell > 0.0f)
 8014b16:	ed95 0a04 	vldr	s0, [r5, #16]
 8014b1a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b22:	dcc0      	bgt.n	8014aa6 <mc_canned_drill+0xb2>
            if(canned->spindle_off)
 8014b24:	7e6b      	ldrb	r3, [r5, #25]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d0c0      	beq.n	8014aac <mc_canned_drill+0xb8>
                pl_data->spindle.hal->set_state(pl_data->spindle.hal, (spindle_state_t){0}, 0.0f);
 8014b2a:	6920      	ldr	r0, [r4, #16]
 8014b2c:	6a03      	ldr	r3, [r0, #32]
 8014b2e:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8014bec <mc_canned_drill+0x1f8>
 8014b32:	f04f 0100 	mov.w	r1, #0
 8014b36:	4798      	blx	r3
 8014b38:	e7b8      	b.n	8014aac <mc_canned_drill+0xb8>
                    position[plane.axis_linear] = position[plane.axis_linear] == canned->xyz[plane.axis_linear]
 8014b3a:	edd6 7a00 	vldr	s15, [r6]
 8014b3e:	eb05 0388 	add.w	r3, r5, r8, lsl #2
 8014b42:	ed93 7a00 	vldr	s14, [r3]
                                                   : position[plane.axis_linear] + settings.g73_retract;
 8014b46:	eef4 7a47 	vcmp.f32	s15, s14
 8014b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b4e:	d005      	beq.n	8014b5c <mc_canned_drill+0x168>
 8014b50:	4b27      	ldr	r3, [pc, #156]	@ (8014bf0 <mc_canned_drill+0x1fc>)
 8014b52:	ed93 7a03 	vldr	s14, [r3, #12]
 8014b56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014b5a:	e001      	b.n	8014b60 <mc_canned_drill+0x16c>
 8014b5c:	eef0 7a68 	vmov.f32	s15, s17
                    position[plane.axis_linear] = position[plane.axis_linear] == canned->xyz[plane.axis_linear]
 8014b60:	edc6 7a00 	vstr	s15, [r6]
                    break;
 8014b64:	e7a7      	b.n	8014ab6 <mc_canned_drill+0xc2>
                spindle_sync(pl_data->spindle.hal, gc_state.modal.spindle.state, pl_data->spindle.rpm);
 8014b66:	ed94 0a01 	vldr	s0, [r4, #4]
 8014b6a:	4b22      	ldr	r3, [pc, #136]	@ (8014bf4 <mc_canned_drill+0x200>)
 8014b6c:	7e99      	ldrb	r1, [r3, #26]
 8014b6e:	6920      	ldr	r0, [r4, #16]
 8014b70:	f009 ff9c 	bl	801eaac <spindle_sync>
 8014b74:	e7ad      	b.n	8014ad2 <mc_canned_drill+0xde>
        pl_data->condition.rapid_motion = On; // Set rapid motion condition flag.
 8014b76:	7d23      	ldrb	r3, [r4, #20]
 8014b78:	f043 0301 	orr.w	r3, r3, #1
 8014b7c:	7523      	strb	r3, [r4, #20]
        if(repeats && gc_state.modal.distance_incremental) {
 8014b7e:	f1bb 0f00 	cmp.w	fp, #0
 8014b82:	d002      	beq.n	8014b8a <mc_canned_drill+0x196>
 8014b84:	4b1b      	ldr	r3, [pc, #108]	@ (8014bf4 <mc_canned_drill+0x200>)
 8014b86:	791b      	ldrb	r3, [r3, #4]
 8014b88:	b913      	cbnz	r3, 8014b90 <mc_canned_drill+0x19c>
                                                   : position[plane.axis_linear] + settings.g73_retract;
 8014b8a:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8014b8e:	e760      	b.n	8014a52 <mc_canned_drill+0x5e>
            position[plane.axis_0] += canned->xyz[plane.axis_0];
 8014b90:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8014b94:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 8014b98:	edd2 7a00 	vldr	s15, [r2]
 8014b9c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014ba0:	ed93 7a00 	vldr	s14, [r3]
 8014ba4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014ba8:	edc2 7a00 	vstr	s15, [r2]
            position[plane.axis_1] += canned->xyz[plane.axis_1];
 8014bac:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8014bb0:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 8014bb4:	edd2 7a00 	vldr	s15, [r2]
 8014bb8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014bbc:	ed93 7a00 	vldr	s14, [r3]
 8014bc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014bc4:	edc2 7a00 	vstr	s15, [r2]
            if(!mc_line(position, pl_data))
 8014bc8:	4621      	mov	r1, r4
 8014bca:	4638      	mov	r0, r7
 8014bcc:	f7ff f904 	bl	8013dd8 <mc_line>
 8014bd0:	2800      	cmp	r0, #0
 8014bd2:	d1da      	bne.n	8014b8a <mc_canned_drill+0x196>
 8014bd4:	e757      	b.n	8014a86 <mc_canned_drill+0x92>
    memcpy(target, position, sizeof(float) * N_AXIS);
 8014bd6:	6839      	ldr	r1, [r7, #0]
 8014bd8:	687a      	ldr	r2, [r7, #4]
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	f8ca 1000 	str.w	r1, [sl]
 8014be0:	f8ca 2004 	str.w	r2, [sl, #4]
 8014be4:	f8ca 3008 	str.w	r3, [sl, #8]
 8014be8:	e74d      	b.n	8014a86 <mc_canned_drill+0x92>
 8014bea:	bf00      	nop
 8014bec:	00000000 	.word	0x00000000
 8014bf0:	200022f4 	.word	0x200022f4
 8014bf4:	20001614 	.word	0x20001614

08014bf8 <mc_probe_cycle>:
}

// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
gc_probe_t mc_probe_cycle (float *target, plan_line_data_t *pl_data, gc_parser_flags_t parser_flags)
{
 8014bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bfc:	b084      	sub	sp, #16
 8014bfe:	4605      	mov	r5, r0
 8014c00:	460f      	mov	r7, r1
 8014c02:	4616      	mov	r6, r2
    uint_fast8_t idx = N_AXIS;

    // TODO: Need to update this cycle so it obeys a non-auto cycle start.
    if (state_get() == STATE_CHECK_MODE)
 8014c04:	f00a fa80 	bl	801f108 <state_get>
 8014c08:	2802      	cmp	r0, #2
 8014c0a:	f000 8108 	beq.w	8014e1e <mc_probe_cycle+0x226>
    uint_fast8_t idx = N_AXIS;
 8014c0e:	2403      	movs	r4, #3
        return GCProbe_CheckMode;

    do {
        idx--;
 8014c10:	3c01      	subs	r4, #1
        sys.probe_position[idx] = lroundf(target[idx] * settings.axis[idx].steps_per_mm);
 8014c12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014c16:	ed93 0a00 	vldr	s0, [r3]
 8014c1a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8014c1e:	4b82      	ldr	r3, [pc, #520]	@ (8014e28 <mc_probe_cycle+0x230>)
 8014c20:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014c24:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8014c28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014c2c:	f012 ffba 	bl	8027ba4 <lroundf>
 8014c30:	f104 020e 	add.w	r2, r4, #14
 8014c34:	4b7d      	ldr	r3, [pc, #500]	@ (8014e2c <mc_probe_cycle+0x234>)
 8014c36:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    } while(idx);
 8014c3a:	2c00      	cmp	r4, #0
 8014c3c:	d1e8      	bne.n	8014c10 <mc_probe_cycle+0x18>

    sys.probe_coordsys_id = gc_state.modal.coord_system.id;
 8014c3e:	4b7c      	ldr	r3, [pc, #496]	@ (8014e30 <mc_probe_cycle+0x238>)
 8014c40:	7d1a      	ldrb	r2, [r3, #20]
 8014c42:	4b7a      	ldr	r3, [pc, #488]	@ (8014e2c <mc_probe_cycle+0x234>)
 8014c44:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

    // Finish all queued commands and empty planner buffer before starting probe cycle.
    if (!protocol_buffer_synchronize())
 8014c48:	f003 f9c4 	bl	8017fd4 <protocol_buffer_synchronize>
 8014c4c:	4680      	mov	r8, r0
 8014c4e:	2800      	cmp	r0, #0
 8014c50:	f000 80e7 	beq.w	8014e22 <mc_probe_cycle+0x22a>
        return GCProbe_Abort; // Return if system reset has been issued.

    // Initialize probing control variables
    sys.flags.probe_succeeded = Off; // Re-initialize probe history before beginning cycle.
 8014c54:	4b75      	ldr	r3, [pc, #468]	@ (8014e2c <mc_probe_cycle+0x234>)
 8014c56:	7d9a      	ldrb	r2, [r3, #22]
 8014c58:	f36f 0241 	bfc	r2, #1, #1
 8014c5c:	759a      	strb	r2, [r3, #22]
    hal.probe.configure(parser_flags.probe_is_away, true);
 8014c5e:	4b75      	ldr	r3, [pc, #468]	@ (8014e34 <mc_probe_cycle+0x23c>)
 8014c60:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8014c64:	2101      	movs	r1, #1
 8014c66:	f3c6 00c0 	ubfx	r0, r6, #3, #1
 8014c6a:	4798      	blx	r3

#if COMPATIBILITY_LEVEL <= 1
    bool at_g59_3 = false, probe_toolsetter = grbl.on_probe_toolsetter != NULL && state_get() != STATE_TOOL_CHANGE && (sys.homed.mask & (X_AXIS_BIT|Y_AXIS_BIT));
 8014c6c:	4b72      	ldr	r3, [pc, #456]	@ (8014e38 <mc_probe_cycle+0x240>)
 8014c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8014c72:	b1eb      	cbz	r3, 8014cb0 <mc_probe_cycle+0xb8>
 8014c74:	f00a fa48 	bl	801f108 <state_get>
 8014c78:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8014c7c:	d030      	beq.n	8014ce0 <mc_probe_cycle+0xe8>
 8014c7e:	4b6b      	ldr	r3, [pc, #428]	@ (8014e2c <mc_probe_cycle+0x234>)
 8014c80:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8014c84:	f013 0f03 	tst.w	r3, #3
 8014c88:	d103      	bne.n	8014c92 <mc_probe_cycle+0x9a>
 8014c8a:	f04f 0800 	mov.w	r8, #0
 8014c8e:	46c1      	mov	r9, r8
 8014c90:	e011      	b.n	8014cb6 <mc_probe_cycle+0xbe>

    if(probe_toolsetter)
        grbl.on_probe_toolsetter(NULL, NULL, at_g59_3 = system_xy_at_fixture(CoordinateSystem_G59_3, TOOLSETTER_RADIUS), true);
 8014c92:	4b69      	ldr	r3, [pc, #420]	@ (8014e38 <mc_probe_cycle+0x240>)
 8014c94:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 8014c98:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8014c9c:	2008      	movs	r0, #8
 8014c9e:	f00d f989 	bl	8021fb4 <system_xy_at_fixture>
 8014ca2:	4681      	mov	r9, r0
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	4602      	mov	r2, r0
 8014ca8:	2100      	movs	r1, #0
 8014caa:	4608      	mov	r0, r1
 8014cac:	47a0      	blx	r4
 8014cae:	e002      	b.n	8014cb6 <mc_probe_cycle+0xbe>
    bool at_g59_3 = false, probe_toolsetter = grbl.on_probe_toolsetter != NULL && state_get() != STATE_TOOL_CHANGE && (sys.homed.mask & (X_AXIS_BIT|Y_AXIS_BIT));
 8014cb0:	f04f 0800 	mov.w	r8, #0
 8014cb4:	46c1      	mov	r9, r8
#endif

    // After syncing, check if probe is already triggered or not connected. If so, halt and issue alarm.
    // NOTE: This probe initialization error applies to all probing cycles.
    probe_state_t probe = hal.probe.get_state();
 8014cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8014e34 <mc_probe_cycle+0x23c>)
 8014cb8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8014cbc:	4798      	blx	r3
    if (probe.triggered || !probe.connected) { // Check probe state.
 8014cbe:	f000 0403 	and.w	r4, r0, #3
 8014cc2:	2c02      	cmp	r4, #2
 8014cc4:	d110      	bne.n	8014ce8 <mc_probe_cycle+0xf0>
        protocol_execute_realtime();
        hal.probe.configure(false, false); // Re-initialize invert mask before returning.
        return GCProbe_FailInit; // Nothing else to do but bail.
    }

    if(grbl.on_probe_start) {
 8014cc6:	4b5c      	ldr	r3, [pc, #368]	@ (8014e38 <mc_probe_cycle+0x240>)
 8014cc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d040      	beq.n	8014d52 <mc_probe_cycle+0x15a>

        uint_fast8_t idx = N_AXIS;
        axes_signals_t axes = {0};
 8014cd0:	f04f 0a00 	mov.w	sl, #0
        coord_data_t position;

        system_convert_array_steps_to_mpos(position.values, sys.position);
 8014cd4:	4959      	ldr	r1, [pc, #356]	@ (8014e3c <mc_probe_cycle+0x244>)
 8014cd6:	a801      	add	r0, sp, #4
 8014cd8:	f00d f94e 	bl	8021f78 <system_convert_array_steps_to_mpos>
        uint_fast8_t idx = N_AXIS;
 8014cdc:	2303      	movs	r3, #3
 8014cde:	e015      	b.n	8014d0c <mc_probe_cycle+0x114>
    bool at_g59_3 = false, probe_toolsetter = grbl.on_probe_toolsetter != NULL && state_get() != STATE_TOOL_CHANGE && (sys.homed.mask & (X_AXIS_BIT|Y_AXIS_BIT));
 8014ce0:	f04f 0800 	mov.w	r8, #0
 8014ce4:	46c1      	mov	r9, r8
 8014ce6:	e7e6      	b.n	8014cb6 <mc_probe_cycle+0xbe>
        system_set_exec_alarm(Alarm_ProbeFailInitial);
 8014ce8:	4c52      	ldr	r4, [pc, #328]	@ (8014e34 <mc_probe_cycle+0x23c>)
 8014cea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8014cec:	2104      	movs	r1, #4
 8014cee:	4854      	ldr	r0, [pc, #336]	@ (8014e40 <mc_probe_cycle+0x248>)
 8014cf0:	4798      	blx	r3
        protocol_execute_realtime();
 8014cf2:	f002 fea1 	bl	8017a38 <protocol_execute_realtime>
        hal.probe.configure(false, false); // Re-initialize invert mask before returning.
 8014cf6:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 8014cfa:	2100      	movs	r1, #0
 8014cfc:	4608      	mov	r0, r1
 8014cfe:	4798      	blx	r3
        return GCProbe_FailInit; // Nothing else to do but bail.
 8014d00:	2402      	movs	r4, #2
    if(grbl.on_probe_completed)
        grbl.on_probe_completed();

    // Successful probe cycle or Failed to trigger probe within travel. With or without error.
    return sys.flags.probe_succeeded ? GCProbe_Found : GCProbe_FailEnd;
}
 8014d02:	4620      	mov	r0, r4
 8014d04:	b004      	add	sp, #16
 8014d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } while(idx);
 8014d0a:	b1db      	cbz	r3, 8014d44 <mc_probe_cycle+0x14c>
            idx--;
 8014d0c:	3b01      	subs	r3, #1
            if(fabsf(target[idx] - position.values[idx]) > TOLERANCE_EQUAL)
 8014d0e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8014d12:	edd2 7a00 	vldr	s15, [r2]
 8014d16:	aa04      	add	r2, sp, #16
 8014d18:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014d1c:	ed12 7a03 	vldr	s14, [r2, #-12]
 8014d20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d24:	eef0 7ae7 	vabs.f32	s15, s15
 8014d28:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8014e44 <mc_probe_cycle+0x24c>
 8014d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d34:	dde9      	ble.n	8014d0a <mc_probe_cycle+0x112>
                bit_true(axes.mask, bit(idx));
 8014d36:	fa5f fa8a 	uxtb.w	sl, sl
 8014d3a:	2201      	movs	r2, #1
 8014d3c:	409a      	lsls	r2, r3
 8014d3e:	ea4a 0a02 	orr.w	sl, sl, r2
 8014d42:	e7e2      	b.n	8014d0a <mc_probe_cycle+0x112>
        grbl.on_probe_start(axes, target, pl_data);
 8014d44:	4b3c      	ldr	r3, [pc, #240]	@ (8014e38 <mc_probe_cycle+0x240>)
 8014d46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014d4a:	463a      	mov	r2, r7
 8014d4c:	4629      	mov	r1, r5
 8014d4e:	4650      	mov	r0, sl
 8014d50:	4798      	blx	r3
    if(!mc_line(target, pl_data))
 8014d52:	4639      	mov	r1, r7
 8014d54:	4628      	mov	r0, r5
 8014d56:	f7ff f83f 	bl	8013dd8 <mc_line>
 8014d5a:	2800      	cmp	r0, #0
 8014d5c:	d0d1      	beq.n	8014d02 <mc_probe_cycle+0x10a>
    sys.probing_state = Probing_Active;
 8014d5e:	4833      	ldr	r0, [pc, #204]	@ (8014e2c <mc_probe_cycle+0x234>)
 8014d60:	2301      	movs	r3, #1
 8014d62:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
    system_set_exec_state_flag(EXEC_CYCLE_START);
 8014d66:	4b33      	ldr	r3, [pc, #204]	@ (8014e34 <mc_probe_cycle+0x23c>)
 8014d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014d6a:	2102      	movs	r1, #2
 8014d6c:	3048      	adds	r0, #72	@ 0x48
 8014d6e:	4798      	blx	r3
        if(!protocol_execute_realtime()) // Check for system abort
 8014d70:	f002 fe62 	bl	8017a38 <protocol_execute_realtime>
 8014d74:	2800      	cmp	r0, #0
 8014d76:	d0c4      	beq.n	8014d02 <mc_probe_cycle+0x10a>
    } while (!(state_get() == STATE_IDLE || state_get() == STATE_TOOL_CHANGE));
 8014d78:	f00a f9c6 	bl	801f108 <state_get>
 8014d7c:	b120      	cbz	r0, 8014d88 <mc_probe_cycle+0x190>
 8014d7e:	f00a f9c3 	bl	801f108 <state_get>
 8014d82:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8014d86:	d1f3      	bne.n	8014d70 <mc_probe_cycle+0x178>
    if(sys.probing_state == Probing_Active) {
 8014d88:	4b28      	ldr	r3, [pc, #160]	@ (8014e2c <mc_probe_cycle+0x234>)
 8014d8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014d8e:	b2db      	uxtb	r3, r3
 8014d90:	2b01      	cmp	r3, #1
 8014d92:	d02f      	beq.n	8014df4 <mc_probe_cycle+0x1fc>
        sys.flags.probe_succeeded = On; // Indicate to system the probing cycle completed successfully.
 8014d94:	4a25      	ldr	r2, [pc, #148]	@ (8014e2c <mc_probe_cycle+0x234>)
 8014d96:	7d93      	ldrb	r3, [r2, #22]
 8014d98:	f043 0302 	orr.w	r3, r3, #2
 8014d9c:	7593      	strb	r3, [r2, #22]
    sys.probing_state = Probing_Off;    // Ensure probe state monitor is disabled.
 8014d9e:	2000      	movs	r0, #0
 8014da0:	4b22      	ldr	r3, [pc, #136]	@ (8014e2c <mc_probe_cycle+0x234>)
 8014da2:	f883 0044 	strb.w	r0, [r3, #68]	@ 0x44
    hal.probe.configure(false, false);  // Re-initialize invert mask.
 8014da6:	4b23      	ldr	r3, [pc, #140]	@ (8014e34 <mc_probe_cycle+0x23c>)
 8014da8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8014dac:	4601      	mov	r1, r0
 8014dae:	4798      	blx	r3
    protocol_execute_realtime();        // Check and execute run-time commands
 8014db0:	f002 fe42 	bl	8017a38 <protocol_execute_realtime>
    if(probe_toolsetter)
 8014db4:	f1b8 0f00 	cmp.w	r8, #0
 8014db8:	d007      	beq.n	8014dca <mc_probe_cycle+0x1d2>
        grbl.on_probe_toolsetter(NULL, NULL, at_g59_3, false);
 8014dba:	4b1f      	ldr	r3, [pc, #124]	@ (8014e38 <mc_probe_cycle+0x240>)
 8014dbc:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	464a      	mov	r2, r9
 8014dc4:	4619      	mov	r1, r3
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	47a0      	blx	r4
    st_reset();             // Reset step segment buffer.
 8014dca:	f00b f881 	bl	801fed0 <st_reset>
    plan_reset();           // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 8014dce:	f001 fdc3 	bl	8016958 <plan_reset>
    plan_sync_position();   // Sync planner position to current machine position.
 8014dd2:	f002 f8ef 	bl	8016fb4 <plan_sync_position>
    if(settings.status_report.probe_coordinates)
 8014dd6:	4b14      	ldr	r3, [pc, #80]	@ (8014e28 <mc_probe_cycle+0x230>)
 8014dd8:	f993 30fc 	ldrsb.w	r3, [r3, #252]	@ 0xfc
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	db1b      	blt.n	8014e18 <mc_probe_cycle+0x220>
    if(grbl.on_probe_completed)
 8014de0:	4b15      	ldr	r3, [pc, #84]	@ (8014e38 <mc_probe_cycle+0x240>)
 8014de2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014de6:	b103      	cbz	r3, 8014dea <mc_probe_cycle+0x1f2>
        grbl.on_probe_completed();
 8014de8:	4798      	blx	r3
    return sys.flags.probe_succeeded ? GCProbe_Found : GCProbe_FailEnd;
 8014dea:	4b10      	ldr	r3, [pc, #64]	@ (8014e2c <mc_probe_cycle+0x234>)
 8014dec:	7d9c      	ldrb	r4, [r3, #22]
 8014dee:	f3c4 0440 	ubfx	r4, r4, #1, #1
 8014df2:	e786      	b.n	8014d02 <mc_probe_cycle+0x10a>
        memcpy(sys.probe_position, sys.position, sizeof(sys.position));
 8014df4:	4b0d      	ldr	r3, [pc, #52]	@ (8014e2c <mc_probe_cycle+0x234>)
 8014df6:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 8014dfa:	3388      	adds	r3, #136	@ 0x88
 8014dfc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014e00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        if(!parser_flags.probe_is_no_error)
 8014e04:	f016 0f10 	tst.w	r6, #16
 8014e08:	d1c9      	bne.n	8014d9e <mc_probe_cycle+0x1a6>
            system_set_exec_alarm(Alarm_ProbeFailContact);
 8014e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8014e34 <mc_probe_cycle+0x23c>)
 8014e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e0e:	2105      	movs	r1, #5
 8014e10:	f104 0014 	add.w	r0, r4, #20
 8014e14:	4798      	blx	r3
 8014e16:	e7c2      	b.n	8014d9e <mc_probe_cycle+0x1a6>
        report_probe_parameters();
 8014e18:	f004 fe66 	bl	8019ae8 <report_probe_parameters>
 8014e1c:	e7e0      	b.n	8014de0 <mc_probe_cycle+0x1e8>
        return GCProbe_CheckMode;
 8014e1e:	2400      	movs	r4, #0
 8014e20:	e76f      	b.n	8014d02 <mc_probe_cycle+0x10a>
        return GCProbe_Abort; // Return if system reset has been issued.
 8014e22:	2402      	movs	r4, #2
 8014e24:	e76d      	b.n	8014d02 <mc_probe_cycle+0x10a>
 8014e26:	bf00      	nop
 8014e28:	200022f4 	.word	0x200022f4
 8014e2c:	20001bbc 	.word	0x20001bbc
 8014e30:	20001614 	.word	0x20001614
 8014e34:	200018dc 	.word	0x200018dc
 8014e38:	20001ac4 	.word	0x20001ac4
 8014e3c:	20001c44 	.word	0x20001c44
 8014e40:	20001c08 	.word	0x20001c08
 8014e44:	38d1b717 	.word	0x38d1b717

08014e48 <mc_parking_motion>:


// Plans and executes the single special motion case for parking. Independent of main planner buffer.
// NOTE: Uses the always free planner ring buffer head to store motion parameters for execution.
bool mc_parking_motion (float *parking_target, plan_line_data_t *pl_data)
{
 8014e48:	b510      	push	{r4, lr}
    bool ok;

    if (sys.abort)
 8014e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8014e80 <mc_parking_motion+0x38>)
 8014e4c:	781b      	ldrb	r3, [r3, #0]
 8014e4e:	b113      	cbz	r3, 8014e56 <mc_parking_motion+0xe>
        return false; // Block during abort.
 8014e50:	2400      	movs	r4, #0
        st_prep_buffer();
        st_wake_up();
    }

    return ok;
}
 8014e52:	4620      	mov	r0, r4
 8014e54:	bd10      	pop	{r4, pc}
    if ((ok = plan_buffer_line(parking_target, pl_data))) {
 8014e56:	f001 fee7 	bl	8016c28 <plan_buffer_line>
 8014e5a:	4604      	mov	r4, r0
 8014e5c:	2800      	cmp	r0, #0
 8014e5e:	d0f8      	beq.n	8014e52 <mc_parking_motion+0xa>
        sys.step_control.execute_sys_motion = On;
 8014e60:	4b07      	ldr	r3, [pc, #28]	@ (8014e80 <mc_parking_motion+0x38>)
 8014e62:	7e1a      	ldrb	r2, [r3, #24]
 8014e64:	f042 0204 	orr.w	r2, r2, #4
 8014e68:	761a      	strb	r2, [r3, #24]
        sys.step_control.end_motion = Off;  // Allow parking motion to execute, if feed hold is active.
 8014e6a:	b2d2      	uxtb	r2, r2
 8014e6c:	f36f 0200 	bfc	r2, #0, #1
 8014e70:	761a      	strb	r2, [r3, #24]
        st_parking_setup_buffer();          // Setup step segment buffer for special parking motion case.
 8014e72:	f00b f8d1 	bl	8020018 <st_parking_setup_buffer>
        st_prep_buffer();
 8014e76:	f00b f955 	bl	8020124 <st_prep_buffer>
        st_wake_up();
 8014e7a:	f00a fe61 	bl	801fb40 <st_wake_up>
 8014e7e:	e7e8      	b.n	8014e52 <mc_parking_motion+0xa>
 8014e80:	20001bbc 	.word	0x20001bbc

08014e84 <mc_override_ctrl_update>:

void mc_override_ctrl_update (gc_override_flags_t override_state)
{
 8014e84:	b510      	push	{r4, lr}
 8014e86:	4604      	mov	r4, r0
// Finish all queued commands before altering override control state
    protocol_buffer_synchronize();
 8014e88:	f003 f8a4 	bl	8017fd4 <protocol_buffer_synchronize>
    if (!sys.abort)
 8014e8c:	4b03      	ldr	r3, [pc, #12]	@ (8014e9c <mc_override_ctrl_update+0x18>)
 8014e8e:	781b      	ldrb	r3, [r3, #0]
 8014e90:	b913      	cbnz	r3, 8014e98 <mc_override_ctrl_update+0x14>
        sys.override.control = override_state;
 8014e92:	4b02      	ldr	r3, [pc, #8]	@ (8014e9c <mc_override_ctrl_update+0x18>)
 8014e94:	f883 4029 	strb.w	r4, [r3, #41]	@ 0x29
}
 8014e98:	bd10      	pop	{r4, pc}
 8014e9a:	bf00      	nop
 8014e9c:	20001bbc 	.word	0x20001bbc

08014ea0 <mc_reset>:
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
ISR_CODE void ISR_FUNC(mc_reset)(void)
{
    // Only this function can set the system reset. Helps prevent multiple kill calls.
    if (bit_isfalse(sys.rt_exec_state, EXEC_RESET)) {
 8014ea0:	4b26      	ldr	r3, [pc, #152]	@ (8014f3c <mc_reset+0x9c>)
 8014ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014ea4:	f013 0f20 	tst.w	r3, #32
 8014ea8:	d146      	bne.n	8014f38 <mc_reset+0x98>
{
 8014eaa:	b510      	push	{r4, lr}

        system_set_exec_state_flag(EXEC_RESET);
 8014eac:	4c24      	ldr	r4, [pc, #144]	@ (8014f40 <mc_reset+0xa0>)
 8014eae:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8014eb0:	2120      	movs	r1, #32
 8014eb2:	4824      	ldr	r0, [pc, #144]	@ (8014f44 <mc_reset+0xa4>)
 8014eb4:	4798      	blx	r3

        if(hal.stream.suspend_read)
 8014eb6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8014eba:	b10b      	cbz	r3, 8014ec0 <mc_reset+0x20>
            hal.stream.suspend_read(false);
 8014ebc:	2000      	movs	r0, #0
 8014ebe:	4798      	blx	r3

        // Kill steppers only if in any motion state, i.e. cycle, actively holding, or homing.
        // NOTE: If steppers are kept enabled via the step idle delay setting, this also keeps
        // the steppers enabled by avoiding the go_idle call altogether, unless the motion state is
        // violated, by which, all bets are off.
        if ((state_get() & (STATE_CYCLE|STATE_HOMING|STATE_JOG)) || sys.step_control.execute_hold || sys.step_control.execute_sys_motion) {
 8014ec0:	f00a f922 	bl	801f108 <state_get>
 8014ec4:	f010 0f2c 	tst.w	r0, #44	@ 0x2c
 8014ec8:	d104      	bne.n	8014ed4 <mc_reset+0x34>
 8014eca:	4b1c      	ldr	r3, [pc, #112]	@ (8014f3c <mc_reset+0x9c>)
 8014ecc:	7e1b      	ldrb	r3, [r3, #24]
 8014ece:	f013 0f06 	tst.w	r3, #6
 8014ed2:	d00d      	beq.n	8014ef0 <mc_reset+0x50>

            sys.position_lost = true;
 8014ed4:	4b19      	ldr	r3, [pc, #100]	@ (8014f3c <mc_reset+0x9c>)
 8014ed6:	2201      	movs	r2, #1
 8014ed8:	70da      	strb	r2, [r3, #3]

            if (state_get() != STATE_HOMING)
 8014eda:	f00a f915 	bl	801f108 <state_get>
 8014ede:	2804      	cmp	r0, #4
 8014ee0:	d017      	beq.n	8014f12 <mc_reset+0x72>
                system_set_exec_alarm(Alarm_AbortCycle);
 8014ee2:	4b17      	ldr	r3, [pc, #92]	@ (8014f40 <mc_reset+0xa0>)
 8014ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014ee6:	2103      	movs	r1, #3
 8014ee8:	4817      	ldr	r0, [pc, #92]	@ (8014f48 <mc_reset+0xa8>)
 8014eea:	4798      	blx	r3
            else if (!sys.rt_exec_alarm)
                system_set_exec_alarm(Alarm_HomingFailReset);

            st_go_idle(); // Force kill steppers. Position has likely been lost.
 8014eec:	f00a fe36 	bl	801fb5c <st_go_idle>
        }

        control_signals_t signals = hal.control.get_state();
 8014ef0:	4b13      	ldr	r3, [pc, #76]	@ (8014f40 <mc_reset+0xa0>)
 8014ef2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014ef4:	4798      	blx	r3

        if(signals.e_stop)
 8014ef6:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8014efa:	d014      	beq.n	8014f26 <mc_reset+0x86>
            system_set_exec_alarm(Alarm_EStop);
 8014efc:	4b10      	ldr	r3, [pc, #64]	@ (8014f40 <mc_reset+0xa0>)
 8014efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f00:	210a      	movs	r1, #10
 8014f02:	4811      	ldr	r0, [pc, #68]	@ (8014f48 <mc_reset+0xa8>)
 8014f04:	4798      	blx	r3
        else if(signals.motor_fault)
            system_set_exec_alarm(Alarm_MotorFault);

        if(grbl.on_reset)
 8014f06:	4b11      	ldr	r3, [pc, #68]	@ (8014f4c <mc_reset+0xac>)
 8014f08:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8014f0c:	b103      	cbz	r3, 8014f10 <mc_reset+0x70>
            grbl.on_reset();
 8014f0e:	4798      	blx	r3
    }
}
 8014f10:	bd10      	pop	{r4, pc}
            else if (!sys.rt_exec_alarm)
 8014f12:	4b0a      	ldr	r3, [pc, #40]	@ (8014f3c <mc_reset+0x9c>)
 8014f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d1e8      	bne.n	8014eec <mc_reset+0x4c>
                system_set_exec_alarm(Alarm_HomingFailReset);
 8014f1a:	4b09      	ldr	r3, [pc, #36]	@ (8014f40 <mc_reset+0xa0>)
 8014f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f1e:	2106      	movs	r1, #6
 8014f20:	4809      	ldr	r0, [pc, #36]	@ (8014f48 <mc_reset+0xa8>)
 8014f22:	4798      	blx	r3
 8014f24:	e7e2      	b.n	8014eec <mc_reset+0x4c>
        else if(signals.motor_fault)
 8014f26:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8014f2a:	d0ec      	beq.n	8014f06 <mc_reset+0x66>
            system_set_exec_alarm(Alarm_MotorFault);
 8014f2c:	4b04      	ldr	r3, [pc, #16]	@ (8014f40 <mc_reset+0xa0>)
 8014f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f30:	2111      	movs	r1, #17
 8014f32:	4805      	ldr	r0, [pc, #20]	@ (8014f48 <mc_reset+0xa8>)
 8014f34:	4798      	blx	r3
 8014f36:	e7e6      	b.n	8014f06 <mc_reset+0x66>
 8014f38:	4770      	bx	lr
 8014f3a:	bf00      	nop
 8014f3c:	20001bbc 	.word	0x20001bbc
 8014f40:	200018dc 	.word	0x200018dc
 8014f44:	20001c04 	.word	0x20001c04
 8014f48:	20001c08 	.word	0x20001c08
 8014f4c:	20001ac4 	.word	0x20001ac4

08014f50 <mc_homing_cycle>:
{
 8014f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f52:	b083      	sub	sp, #12
 8014f54:	4604      	mov	r4, r0
    bool home_all = cycle.mask == 0;
 8014f56:	b2c7      	uxtb	r7, r0
    memset(&sys.last_event.limits, 0, sizeof(limit_signals_t));
 8014f58:	4b7c      	ldr	r3, [pc, #496]	@ (801514c <mc_homing_cycle+0x1fc>)
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	601a      	str	r2, [r3, #0]
    if(settings.homing.flags.manual && (home_all ? sys.homing.mask : (cycle.mask & sys.homing.mask)) == 0) {
 8014f5e:	4b7c      	ldr	r3, [pc, #496]	@ (8015150 <mc_homing_cycle+0x200>)
 8014f60:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8014f64:	f013 0f10 	tst.w	r3, #16
 8014f68:	d007      	beq.n	8014f7a <mc_homing_cycle+0x2a>
 8014f6a:	2f00      	cmp	r7, #0
 8014f6c:	f040 8091 	bne.w	8015092 <mc_homing_cycle+0x142>
 8014f70:	4b78      	ldr	r3, [pc, #480]	@ (8015154 <mc_homing_cycle+0x204>)
 8014f72:	7e9b      	ldrb	r3, [r3, #26]
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	f000 8091 	beq.w	801509c <mc_homing_cycle+0x14c>
        if(settings.homing.seek_rate <= 0.0f)
 8014f7a:	4b75      	ldr	r3, [pc, #468]	@ (8015150 <mc_homing_cycle+0x200>)
 8014f7c:	edd3 7a42 	vldr	s15, [r3, #264]	@ 0x108
 8014f80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f88:	f240 80b5 	bls.w	80150f6 <mc_homing_cycle+0x1a6>
        if (settings.limits.flags.two_switches && hal.home_cap.a.mask == 0 && limit_signals_merge(hal.limits.get_state()).value) {
 8014f8c:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 8014f90:	f013 0f10 	tst.w	r3, #16
 8014f94:	d00d      	beq.n	8014fb2 <mc_homing_cycle+0x62>
 8014f96:	4b70      	ldr	r3, [pc, #448]	@ (8015158 <mc_homing_cycle+0x208>)
 8014f98:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 8014f9c:	b94b      	cbnz	r3, 8014fb2 <mc_homing_cycle+0x62>
 8014f9e:	4b6e      	ldr	r3, [pc, #440]	@ (8015158 <mc_homing_cycle+0x208>)
 8014fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014fa2:	4798      	blx	r3
 8014fa4:	9000      	str	r0, [sp, #0]
 8014fa6:	f7fe fa4b 	bl	8013440 <limit_signals_merge>
 8014faa:	b2c0      	uxtb	r0, r0
 8014fac:	2800      	cmp	r0, #0
 8014fae:	f040 8085 	bne.w	80150bc <mc_homing_cycle+0x16c>
        state_set(STATE_HOMING);                        // Set homing system state.
 8014fb2:	2004      	movs	r0, #4
 8014fb4:	f00a f8ae 	bl	801f114 <state_set>
        system_set_exec_state_flag(EXEC_STATUS_REPORT); // Force a status report and
 8014fb8:	4b67      	ldr	r3, [pc, #412]	@ (8015158 <mc_homing_cycle+0x208>)
 8014fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014fbc:	2101      	movs	r1, #1
 8014fbe:	4867      	ldr	r0, [pc, #412]	@ (801515c <mc_homing_cycle+0x20c>)
 8014fc0:	4798      	blx	r3
        delay_sec(0.1f, DelayMode_Dwell);               // delay a bit to get it sent (or perhaps wait a bit for a request?)
 8014fc2:	2000      	movs	r0, #0
 8014fc4:	ed9f 0a66 	vldr	s0, [pc, #408]	@ 8015160 <mc_homing_cycle+0x210>
 8014fc8:	f000 ff6c 	bl	8015ea4 <delay_sec>
        if(spindle_is_on())
 8014fcc:	f009 fe30 	bl	801ec30 <spindle_is_on>
 8014fd0:	2800      	cmp	r0, #0
 8014fd2:	d17c      	bne.n	80150ce <mc_homing_cycle+0x17e>
        if(hal.coolant.get_state().mask)
 8014fd4:	4b60      	ldr	r3, [pc, #384]	@ (8015158 <mc_homing_cycle+0x208>)
 8014fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014fd8:	4798      	blx	r3
 8014fda:	b2c0      	uxtb	r0, r0
 8014fdc:	2800      	cmp	r0, #0
 8014fde:	d179      	bne.n	80150d4 <mc_homing_cycle+0x184>
        if (!home_all) // Perform homing cycle based on mask.
 8014fe0:	2f00      	cmp	r7, #0
 8014fe2:	d17c      	bne.n	80150de <mc_homing_cycle+0x18e>
            sys.homed.mask &= ~sys.homing.mask;
 8014fe4:	4a5b      	ldr	r2, [pc, #364]	@ (8015154 <mc_homing_cycle+0x204>)
 8014fe6:	f892 1054 	ldrb.w	r1, [r2, #84]	@ 0x54
 8014fea:	7e93      	ldrb	r3, [r2, #26]
 8014fec:	43db      	mvns	r3, r3
 8014fee:	b25b      	sxtb	r3, r3
 8014ff0:	400b      	ands	r3, r1
 8014ff2:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
    status_code_t homed_status = Status_OK;
 8014ff6:	463e      	mov	r6, r7
            uint_fast8_t idx = 0;
 8014ff8:	2500      	movs	r5, #0
                if(settings.homing.cycle[idx].mask) {
 8014ffa:	4b55      	ldr	r3, [pc, #340]	@ (8015150 <mc_homing_cycle+0x200>)
 8014ffc:	442b      	add	r3, r5
 8014ffe:	f893 0115 	ldrb.w	r0, [r3, #277]	@ 0x115
 8015002:	2800      	cmp	r0, #0
 8015004:	d170      	bne.n	80150e8 <mc_homing_cycle+0x198>
            } while(++idx < N_AXIS);
 8015006:	3501      	adds	r5, #1
 8015008:	2d02      	cmp	r5, #2
 801500a:	d9f6      	bls.n	8014ffa <mc_homing_cycle+0xaa>
        hal.limits.enable(settings.limits.flags.hard_enabled, (axes_signals_t){0});
 801500c:	4b52      	ldr	r3, [pc, #328]	@ (8015158 <mc_homing_cycle+0x208>)
 801500e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015010:	4a4f      	ldr	r2, [pc, #316]	@ (8015150 <mc_homing_cycle+0x200>)
 8015012:	f892 0124 	ldrb.w	r0, [r2, #292]	@ 0x124
 8015016:	f04f 0100 	mov.w	r1, #0
 801501a:	f000 0001 	and.w	r0, r0, #1
 801501e:	4798      	blx	r3
    if(cycle.mask) {
 8015020:	b2e3      	uxtb	r3, r4
 8015022:	b193      	cbz	r3, 801504a <mc_homing_cycle+0xfa>
        if(!protocol_execute_realtime()) {  // Check for reset and set system abort.
 8015024:	f002 fd08 	bl	8017a38 <protocol_execute_realtime>
 8015028:	2800      	cmp	r0, #0
 801502a:	d066      	beq.n	80150fa <mc_homing_cycle+0x1aa>
        if(homed_status != Status_OK) {
 801502c:	2e00      	cmp	r6, #0
 801502e:	d16d      	bne.n	801510c <mc_homing_cycle+0x1bc>
        if(home_all && settings.homing.flags.manual)
 8015030:	b92f      	cbnz	r7, 801503e <mc_homing_cycle+0xee>
 8015032:	4b47      	ldr	r3, [pc, #284]	@ (8015150 <mc_homing_cycle+0x200>)
 8015034:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8015038:	f013 0f10 	tst.w	r3, #16
 801503c:	d177      	bne.n	801512e <mc_homing_cycle+0x1de>
        sync_position();
 801503e:	f001 ffb9 	bl	8016fb4 <plan_sync_position>
 8015042:	4948      	ldr	r1, [pc, #288]	@ (8015164 <mc_homing_cycle+0x214>)
 8015044:	4848      	ldr	r0, [pc, #288]	@ (8015168 <mc_homing_cycle+0x218>)
 8015046:	f00c ff97 	bl	8021f78 <system_convert_array_steps_to_mpos>
    system_add_rt_report(Report_Homed);
 801504a:	2004      	movs	r0, #4
 801504c:	f00d f838 	bl	80220c0 <system_add_rt_report>
    homed_status = settings.limits.flags.hard_enabled &&
 8015050:	4b3f      	ldr	r3, [pc, #252]	@ (8015150 <mc_homing_cycle+0x200>)
 8015052:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 8015056:	f003 0305 	and.w	r3, r3, #5
                    : Status_OK;
 801505a:	2b05      	cmp	r3, #5
 801505c:	d10a      	bne.n	8015074 <mc_homing_cycle+0x124>
                     (limit_signals_merge(hal.limits.get_state()).value & sys.hard_limits.mask)
 801505e:	4b3e      	ldr	r3, [pc, #248]	@ (8015158 <mc_homing_cycle+0x208>)
 8015060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015062:	4798      	blx	r3
 8015064:	9001      	str	r0, [sp, #4]
 8015066:	f7fe f9eb 	bl	8013440 <limit_signals_merge>
 801506a:	4b3a      	ldr	r3, [pc, #232]	@ (8015154 <mc_homing_cycle+0x204>)
 801506c:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
                    settings.limits.flags.check_at_init &&
 8015070:	4203      	tst	r3, r0
 8015072:	d169      	bne.n	8015148 <mc_homing_cycle+0x1f8>
        limits_set_work_envelope();
 8015074:	f7fe fa14 	bl	80134a0 <limits_set_work_envelope>
                    : Status_OK;
 8015078:	2600      	movs	r6, #0
    if(grbl.on_homing_completed)
 801507a:	4b3c      	ldr	r3, [pc, #240]	@ (801516c <mc_homing_cycle+0x21c>)
 801507c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8015080:	b123      	cbz	r3, 801508c <mc_homing_cycle+0x13c>
        grbl.on_homing_completed(cycle, homed_status == Status_OK);
 8015082:	fab6 f186 	clz	r1, r6
 8015086:	0949      	lsrs	r1, r1, #5
 8015088:	4620      	mov	r0, r4
 801508a:	4798      	blx	r3
}
 801508c:	4630      	mov	r0, r6
 801508e:	b003      	add	sp, #12
 8015090:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(settings.homing.flags.manual && (home_all ? sys.homing.mask : (cycle.mask & sys.homing.mask)) == 0) {
 8015092:	4b30      	ldr	r3, [pc, #192]	@ (8015154 <mc_homing_cycle+0x204>)
 8015094:	7e9b      	ldrb	r3, [r3, #26]
 8015096:	421f      	tst	r7, r3
 8015098:	f47f af6f 	bne.w	8014f7a <mc_homing_cycle+0x2a>
        if(home_all)
 801509c:	b90f      	cbnz	r7, 80150a2 <mc_homing_cycle+0x152>
            cycle.mask = AXES_BITMASK;
 801509e:	f04f 0407 	mov.w	r4, #7
        sys.homed.mask |= cycle.mask;
 80150a2:	4a2c      	ldr	r2, [pc, #176]	@ (8015154 <mc_homing_cycle+0x204>)
 80150a4:	f892 3054 	ldrb.w	r3, [r2, #84]	@ 0x54
 80150a8:	b2e1      	uxtb	r1, r4
 80150aa:	430b      	orrs	r3, r1
 80150ac:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
        limits_set_machine_positions(cycle, false);
 80150b0:	2100      	movs	r1, #0
 80150b2:	4620      	mov	r0, r4
 80150b4:	f7fe fa7e 	bl	80135b4 <limits_set_machine_positions>
    status_code_t homed_status = Status_OK;
 80150b8:	2600      	movs	r6, #0
        limits_set_machine_positions(cycle, false);
 80150ba:	e7b1      	b.n	8015020 <mc_homing_cycle+0xd0>
            mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 80150bc:	f7ff fef0 	bl	8014ea0 <mc_reset>
            system_set_exec_alarm(Alarm_HardLimit);
 80150c0:	4b25      	ldr	r3, [pc, #148]	@ (8015158 <mc_homing_cycle+0x208>)
 80150c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80150c4:	2101      	movs	r1, #1
 80150c6:	482a      	ldr	r0, [pc, #168]	@ (8015170 <mc_homing_cycle+0x220>)
 80150c8:	4798      	blx	r3
            return Status_Unhandled;
 80150ca:	2654      	movs	r6, #84	@ 0x54
 80150cc:	e7de      	b.n	801508c <mc_homing_cycle+0x13c>
            gc_spindle_off();
 80150ce:	f7f8 fb79 	bl	800d7c4 <gc_spindle_off>
 80150d2:	e77f      	b.n	8014fd4 <mc_homing_cycle+0x84>
            gc_coolant((coolant_state_t){0});
 80150d4:	f04f 0000 	mov.w	r0, #0
 80150d8:	f7f8 fb82 	bl	800d7e0 <gc_coolant>
 80150dc:	e780      	b.n	8014fe0 <mc_homing_cycle+0x90>
            homed_status = limits_go_home(cycle);
 80150de:	4620      	mov	r0, r4
 80150e0:	f7fe fd48 	bl	8013b74 <limits_go_home>
 80150e4:	4606      	mov	r6, r0
 80150e6:	e791      	b.n	801500c <mc_homing_cycle+0xbc>
                    cycle.mask = settings.homing.cycle[idx].mask;
 80150e8:	4604      	mov	r4, r0
                    if((homed_status = limits_go_home(cycle)) != Status_OK)
 80150ea:	f7fe fd43 	bl	8013b74 <limits_go_home>
 80150ee:	4606      	mov	r6, r0
 80150f0:	2800      	cmp	r0, #0
 80150f2:	d088      	beq.n	8015006 <mc_homing_cycle+0xb6>
 80150f4:	e78a      	b.n	801500c <mc_homing_cycle+0xbc>
            return Status_HomingDisabled;
 80150f6:	2605      	movs	r6, #5
 80150f8:	e7c8      	b.n	801508c <mc_homing_cycle+0x13c>
            if(grbl.on_homing_completed)
 80150fa:	4b1c      	ldr	r3, [pc, #112]	@ (801516c <mc_homing_cycle+0x21c>)
 80150fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8015100:	b113      	cbz	r3, 8015108 <mc_homing_cycle+0x1b8>
                grbl.on_homing_completed(cycle, false);
 8015102:	2100      	movs	r1, #0
 8015104:	4620      	mov	r0, r4
 8015106:	4798      	blx	r3
            return Status_Unhandled;        // Did not complete. Alarm state set by mc_alarm.
 8015108:	2654      	movs	r6, #84	@ 0x54
 801510a:	e7bf      	b.n	801508c <mc_homing_cycle+0x13c>
            if(state_get() == STATE_HOMING)
 801510c:	f009 fffc 	bl	801f108 <state_get>
 8015110:	2804      	cmp	r0, #4
 8015112:	d008      	beq.n	8015126 <mc_homing_cycle+0x1d6>
            if(grbl.on_homing_completed)
 8015114:	4b15      	ldr	r3, [pc, #84]	@ (801516c <mc_homing_cycle+0x21c>)
 8015116:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801511a:	2b00      	cmp	r3, #0
 801511c:	d0b6      	beq.n	801508c <mc_homing_cycle+0x13c>
                grbl.on_homing_completed(cycle, false);
 801511e:	2100      	movs	r1, #0
 8015120:	4620      	mov	r0, r4
 8015122:	4798      	blx	r3
            return homed_status;
 8015124:	e7b2      	b.n	801508c <mc_homing_cycle+0x13c>
                state_set(STATE_IDLE);
 8015126:	2000      	movs	r0, #0
 8015128:	f009 fff4 	bl	801f114 <state_set>
 801512c:	e7f2      	b.n	8015114 <mc_homing_cycle+0x1c4>
            cycle.mask = AXES_BITMASK & ~sys.homing.mask;
 801512e:	4b09      	ldr	r3, [pc, #36]	@ (8015154 <mc_homing_cycle+0x204>)
 8015130:	7e98      	ldrb	r0, [r3, #26]
 8015132:	43c0      	mvns	r0, r0
 8015134:	f000 0007 	and.w	r0, r0, #7
 8015138:	4604      	mov	r4, r0
            sys.homed.mask = AXES_BITMASK;
 801513a:	2207      	movs	r2, #7
 801513c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            limits_set_machine_positions(cycle, false);
 8015140:	2100      	movs	r1, #0
 8015142:	f7fe fa37 	bl	80135b4 <limits_set_machine_positions>
 8015146:	e77a      	b.n	801503e <mc_homing_cycle+0xee>
                    : Status_OK;
 8015148:	262d      	movs	r6, #45	@ 0x2d
 801514a:	e796      	b.n	801507a <mc_homing_cycle+0x12a>
 801514c:	20001c3e 	.word	0x20001c3e
 8015150:	200022f4 	.word	0x200022f4
 8015154:	20001bbc 	.word	0x20001bbc
 8015158:	200018dc 	.word	0x200018dc
 801515c:	20001c04 	.word	0x20001c04
 8015160:	3dcccccd 	.word	0x3dcccccd
 8015164:	20001c44 	.word	0x20001c44
 8015168:	2000167c 	.word	0x2000167c
 801516c:	20001ac4 	.word	0x20001ac4
 8015170:	20001c08 	.word	0x20001c08

08015174 <probe_result>:
    return axis <= N_AXIS ? factors[axis - 1] : 0.0f;
}

static float probe_result (ngc_param_id_t id)
{
    return sys.flags.probe_succeeded ? 1.0f : 0.0f;
 8015174:	4b05      	ldr	r3, [pc, #20]	@ (801518c <probe_result+0x18>)
 8015176:	7d9b      	ldrb	r3, [r3, #22]
 8015178:	f013 0f02 	tst.w	r3, #2
 801517c:	d002      	beq.n	8015184 <probe_result+0x10>
 801517e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015182:	4770      	bx	lr
 8015184:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8015190 <probe_result+0x1c>
}
 8015188:	4770      	bx	lr
 801518a:	bf00      	nop
 801518c:	20001bbc 	.word	0x20001bbc
 8015190:	00000000 	.word	0x00000000

08015194 <m66_result>:
    return axis <= N_AXIS ? sys.home_position[axis - 1] : 0.0f;
}
*/
static float m66_result (ngc_param_id_t id)
{
    return (float)sys.var5399;
 8015194:	4b02      	ldr	r3, [pc, #8]	@ (80151a0 <m66_result+0xc>)
 8015196:	ed93 0a14 	vldr	s0, [r3, #80]	@ 0x50
}
 801519a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801519e:	4770      	bx	lr
 80151a0:	20001bbc 	.word	0x20001bbc

080151a4 <tool_number>:

static float tool_number (ngc_param_id_t id)
{
    return (float)gc_state.tool->tool_id;
 80151a4:	4b03      	ldr	r3, [pc, #12]	@ (80151b4 <tool_number+0x10>)
 80151a6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80151aa:	ed93 0a04 	vldr	s0, [r3, #16]
}
 80151ae:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80151b2:	4770      	bx	lr
 80151b4:	20001614 	.word	0x20001614

080151b8 <tool_offset>:

static float tool_offset (ngc_param_id_t id)
{
    uint_fast8_t axis = id % 10;
 80151b8:	4b0a      	ldr	r3, [pc, #40]	@ (80151e4 <tool_offset+0x2c>)
 80151ba:	fba3 2300 	umull	r2, r3, r3, r0
 80151be:	08db      	lsrs	r3, r3, #3
 80151c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80151c4:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 80151c8:	b280      	uxth	r0, r0

    return axis <= N_AXIS ? gc_state.tool_length_offset[axis] : 0.0f;
 80151ca:	2803      	cmp	r0, #3
 80151cc:	d806      	bhi.n	80151dc <tool_offset+0x24>
 80151ce:	3030      	adds	r0, #48	@ 0x30
 80151d0:	4b05      	ldr	r3, [pc, #20]	@ (80151e8 <tool_offset+0x30>)
 80151d2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80151d6:	ed93 0a01 	vldr	s0, [r3, #4]
 80151da:	4770      	bx	lr
 80151dc:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80151ec <tool_offset+0x34>
}
 80151e0:	4770      	bx	lr
 80151e2:	bf00      	nop
 80151e4:	cccccccd 	.word	0xcccccccd
 80151e8:	20001614 	.word	0x20001614
 80151ec:	00000000 	.word	0x00000000

080151f0 <coord_system>:
    return value;
}

static float coord_system (ngc_param_id_t id)
{
    return (float)gc_state.modal.coord_system.id + 1;
 80151f0:	4b05      	ldr	r3, [pc, #20]	@ (8015208 <coord_system+0x18>)
 80151f2:	7d1b      	ldrb	r3, [r3, #20]
 80151f4:	ee00 3a10 	vmov	s0, r3
 80151f8:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 80151fc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015200:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015204:	4770      	bx	lr
 8015206:	bf00      	nop
 8015208:	20001614 	.word	0x20001614

0801520c <g92_offset_applied>:
    return value;
}

static float g92_offset_applied (ngc_param_id_t id)
{
    return (float)gc_state.g92_coord_offset_applied;
 801520c:	4b03      	ldr	r3, [pc, #12]	@ (801521c <g92_offset_applied+0x10>)
 801520e:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8015212:	ee00 3a10 	vmov	s0, r3
}
 8015216:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801521a:	4770      	bx	lr
 801521c:	20001614 	.word	0x20001614

08015220 <g92_offset>:

static float g92_offset (ngc_param_id_t id)
{
    uint_fast8_t axis = id % 10;
 8015220:	4b0a      	ldr	r3, [pc, #40]	@ (801524c <g92_offset+0x2c>)
 8015222:	fba3 2300 	umull	r2, r3, r3, r0
 8015226:	08db      	lsrs	r3, r3, #3
 8015228:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801522c:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8015230:	b280      	uxth	r0, r0

    return axis <= N_AXIS ? gc_state.g92_coord_offset [axis - 1] : 0.0f;
 8015232:	2803      	cmp	r0, #3
 8015234:	d806      	bhi.n	8015244 <g92_offset+0x24>
 8015236:	302d      	adds	r0, #45	@ 0x2d
 8015238:	4b05      	ldr	r3, [pc, #20]	@ (8015250 <g92_offset+0x30>)
 801523a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801523e:	ed93 0a00 	vldr	s0, [r3]
 8015242:	4770      	bx	lr
 8015244:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8015254 <g92_offset+0x34>
}
 8015248:	4770      	bx	lr
 801524a:	bf00      	nop
 801524c:	cccccccd 	.word	0xcccccccd
 8015250:	20001614 	.word	0x20001614
 8015254:	00000000 	.word	0x00000000

08015258 <debug_output>:
    return value;
}

static float debug_output (ngc_param_id_t id)
{
    return (float)settings.flags.ngc_debug_out;
 8015258:	4b04      	ldr	r3, [pc, #16]	@ (801526c <debug_output+0x14>)
 801525a:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 801525e:	f003 0301 	and.w	r3, r3, #1
 8015262:	ee00 3a10 	vmov	s0, r3
}
 8015266:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801526a:	4770      	bx	lr
 801526c:	200022f4 	.word	0x200022f4

08015270 <ngc_name_tolower>:
static char *ngc_name_tolower (char *s)
{
    static char name[NGC_MAX_PARAM_LENGTH + 1];

    uint_fast8_t len = 0;
	char c, *s1 = s, *s2 = name;
 8015270:	4a0d      	ldr	r2, [pc, #52]	@ (80152a8 <ngc_name_tolower+0x38>)
    uint_fast8_t len = 0;
 8015272:	2100      	movs	r1, #0

    while((c = *s1++) && len < NGC_MAX_PARAM_LENGTH) {
 8015274:	e002      	b.n	801527c <ngc_name_tolower+0xc>
        if(c > ' ') {
            *s2++ = LCAPS(c);
 8015276:	f802 3b01 	strb.w	r3, [r2], #1
            len++;
 801527a:	3101      	adds	r1, #1
    while((c = *s1++) && len < NGC_MAX_PARAM_LENGTH) {
 801527c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015280:	b16b      	cbz	r3, 801529e <ngc_name_tolower+0x2e>
 8015282:	2913      	cmp	r1, #19
 8015284:	d80b      	bhi.n	801529e <ngc_name_tolower+0x2e>
        if(c > ' ') {
 8015286:	2b20      	cmp	r3, #32
 8015288:	d9f8      	bls.n	801527c <ngc_name_tolower+0xc>
            *s2++ = LCAPS(c);
 801528a:	f1a3 0c41 	sub.w	ip, r3, #65	@ 0x41
 801528e:	fa5f fc8c 	uxtb.w	ip, ip
 8015292:	f1bc 0f19 	cmp.w	ip, #25
 8015296:	d8ee      	bhi.n	8015276 <ngc_name_tolower+0x6>
 8015298:	f043 0320 	orr.w	r3, r3, #32
 801529c:	e7eb      	b.n	8015276 <ngc_name_tolower+0x6>
        }
    }
    *s2 = '\0';
 801529e:	2300      	movs	r3, #0
 80152a0:	7013      	strb	r3, [r2, #0]

	return name;
}
 80152a2:	4801      	ldr	r0, [pc, #4]	@ (80152a8 <ngc_name_tolower+0x38>)
 80152a4:	4770      	bx	lr
 80152a6:	bf00      	nop
 80152a8:	20001d44 	.word	0x20001d44

080152ac <_relative_pos>:
    if(axis < N_AXIS) {
 80152ac:	2802      	cmp	r0, #2
 80152ae:	d902      	bls.n	80152b6 <_relative_pos+0xa>
        value = 0.0f;
 80152b0:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8015304 <_relative_pos+0x58>
}
 80152b4:	4770      	bx	lr
{
 80152b6:	b510      	push	{r4, lr}
 80152b8:	ed2d 8b02 	vpush	{d8}
        value = sys.position[axis] / settings.axis[axis].steps_per_mm - gc_get_offset(axis, false);
 80152bc:	f100 0222 	add.w	r2, r0, #34	@ 0x22
 80152c0:	4b11      	ldr	r3, [pc, #68]	@ (8015308 <_relative_pos+0x5c>)
 80152c2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80152c6:	edd3 7a00 	vldr	s15, [r3]
 80152ca:	4c10      	ldr	r4, [pc, #64]	@ (801530c <_relative_pos+0x60>)
 80152cc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80152d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80152d4:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80152d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80152dc:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80152e0:	2100      	movs	r1, #0
 80152e2:	f7f8 f911 	bl	800d508 <gc_get_offset>
 80152e6:	ee38 0a40 	vsub.f32	s0, s16, s0
        if(settings.flags.report_inches)
 80152ea:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 80152ee:	f013 0f01 	tst.w	r3, #1
 80152f2:	d003      	beq.n	80152fc <_relative_pos+0x50>
            value *= 25.4f;
 80152f4:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8015310 <_relative_pos+0x64>
 80152f8:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 80152fc:	ecbd 8b02 	vpop	{d8}
 8015300:	bd10      	pop	{r4, pc}
 8015302:	bf00      	nop
 8015304:	00000000 	.word	0x00000000
 8015308:	20001bbc 	.word	0x20001bbc
 801530c:	200022f4 	.word	0x200022f4
 8015310:	41cb3333 	.word	0x41cb3333

08015314 <work_position>:
{
 8015314:	b508      	push	{r3, lr}
    uint_fast8_t axis = id % 10;
 8015316:	4b08      	ldr	r3, [pc, #32]	@ (8015338 <work_position+0x24>)
 8015318:	fba3 2300 	umull	r2, r3, r3, r0
 801531c:	08db      	lsrs	r3, r3, #3
 801531e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015322:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8015326:	b280      	uxth	r0, r0
    if(axis < N_AXIS)
 8015328:	2802      	cmp	r0, #2
 801532a:	d902      	bls.n	8015332 <work_position+0x1e>
    float value = 0.0f;
 801532c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 801533c <work_position+0x28>
}
 8015330:	bd08      	pop	{r3, pc}
        value = _relative_pos(axis);
 8015332:	f7ff ffbb 	bl	80152ac <_relative_pos>
 8015336:	e7fb      	b.n	8015330 <work_position+0x1c>
 8015338:	cccccccd 	.word	0xcccccccd
 801533c:	00000000 	.word	0x00000000

08015340 <coord_system_offset>:
{
 8015340:	b510      	push	{r4, lr}
 8015342:	b084      	sub	sp, #16
    uint_fast8_t axis = id % 10;
 8015344:	4b15      	ldr	r3, [pc, #84]	@ (801539c <coord_system_offset+0x5c>)
 8015346:	fba3 2300 	umull	r2, r3, r3, r0
 801534a:	08db      	lsrs	r3, r3, #3
 801534c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015350:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 8015354:	b29b      	uxth	r3, r3
    id = (id - 5220 - axis - (id == 0 ? 10 : 0)) / 20;
 8015356:	1ac2      	subs	r2, r0, r3
 8015358:	b978      	cbnz	r0, 801537a <coord_system_offset+0x3a>
 801535a:	210a      	movs	r1, #10
 801535c:	1a50      	subs	r0, r2, r1
 801535e:	f5a0 50a3 	sub.w	r0, r0, #5216	@ 0x1460
 8015362:	3804      	subs	r0, #4
 8015364:	4a0d      	ldr	r2, [pc, #52]	@ (801539c <coord_system_offset+0x5c>)
 8015366:	fba2 2000 	umull	r2, r0, r2, r0
 801536a:	0900      	lsrs	r0, r0, #4
    if (axis > 0 && axis <= N_AXIS && settings_read_coord_data((coord_system_id_t)id, &data.xyz))
 801536c:	1e5c      	subs	r4, r3, #1
 801536e:	2c02      	cmp	r4, #2
 8015370:	d905      	bls.n	801537e <coord_system_offset+0x3e>
    float value = 0.0f;
 8015372:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80153a0 <coord_system_offset+0x60>
}
 8015376:	b004      	add	sp, #16
 8015378:	bd10      	pop	{r4, pc}
    id = (id - 5220 - axis - (id == 0 ? 10 : 0)) / 20;
 801537a:	2100      	movs	r1, #0
 801537c:	e7ee      	b.n	801535c <coord_system_offset+0x1c>
    if (axis > 0 && axis <= N_AXIS && settings_read_coord_data((coord_system_id_t)id, &data.xyz))
 801537e:	4669      	mov	r1, sp
 8015380:	b2c0      	uxtb	r0, r0
 8015382:	f008 fa67 	bl	801d854 <settings_read_coord_data>
 8015386:	b128      	cbz	r0, 8015394 <coord_system_offset+0x54>
        value = data.xyz[axis - 1];
 8015388:	ab04      	add	r3, sp, #16
 801538a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801538e:	ed13 0a04 	vldr	s0, [r3, #-16]
 8015392:	e7f0      	b.n	8015376 <coord_system_offset+0x36>
    float value = 0.0f;
 8015394:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80153a0 <coord_system_offset+0x60>
    return value;
 8015398:	e7ed      	b.n	8015376 <coord_system_offset+0x36>
 801539a:	bf00      	nop
 801539c:	cccccccd 	.word	0xcccccccd
 80153a0:	00000000 	.word	0x00000000

080153a4 <g30_home>:
{
 80153a4:	b510      	push	{r4, lr}
 80153a6:	b084      	sub	sp, #16
    uint_fast8_t axis = id % 10;
 80153a8:	4b0e      	ldr	r3, [pc, #56]	@ (80153e4 <g30_home+0x40>)
 80153aa:	fba3 2300 	umull	r2, r3, r3, r0
 80153ae:	08db      	lsrs	r3, r3, #3
 80153b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80153b4:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 80153b8:	b284      	uxth	r4, r0
    if (axis <= N_AXIS && settings_read_coord_data(CoordinateSystem_G30, &data.xyz))
 80153ba:	2c03      	cmp	r4, #3
 80153bc:	d903      	bls.n	80153c6 <g30_home+0x22>
    float value = 0.0f;
 80153be:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80153e8 <g30_home+0x44>
}
 80153c2:	b004      	add	sp, #16
 80153c4:	bd10      	pop	{r4, pc}
    if (axis <= N_AXIS && settings_read_coord_data(CoordinateSystem_G30, &data.xyz))
 80153c6:	4669      	mov	r1, sp
 80153c8:	200a      	movs	r0, #10
 80153ca:	f008 fa43 	bl	801d854 <settings_read_coord_data>
 80153ce:	b130      	cbz	r0, 80153de <g30_home+0x3a>
        value = data.xyz[axis - 1];
 80153d0:	3c01      	subs	r4, #1
 80153d2:	ab04      	add	r3, sp, #16
 80153d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80153d8:	ed14 0a04 	vldr	s0, [r4, #-16]
 80153dc:	e7f1      	b.n	80153c2 <g30_home+0x1e>
    float value = 0.0f;
 80153de:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80153e8 <g30_home+0x44>
    return value;
 80153e2:	e7ee      	b.n	80153c2 <g30_home+0x1e>
 80153e4:	cccccccd 	.word	0xcccccccd
 80153e8:	00000000 	.word	0x00000000

080153ec <g28_home>:
{
 80153ec:	b510      	push	{r4, lr}
 80153ee:	b084      	sub	sp, #16
    uint_fast8_t axis = id % 10;
 80153f0:	4b0e      	ldr	r3, [pc, #56]	@ (801542c <g28_home+0x40>)
 80153f2:	fba3 2300 	umull	r2, r3, r3, r0
 80153f6:	08db      	lsrs	r3, r3, #3
 80153f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80153fc:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8015400:	b284      	uxth	r4, r0
    if(axis <= N_AXIS && settings_read_coord_data(CoordinateSystem_G28, &data.xyz))
 8015402:	2c03      	cmp	r4, #3
 8015404:	d903      	bls.n	801540e <g28_home+0x22>
    float value = 0.0f;
 8015406:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8015430 <g28_home+0x44>
}
 801540a:	b004      	add	sp, #16
 801540c:	bd10      	pop	{r4, pc}
    if(axis <= N_AXIS && settings_read_coord_data(CoordinateSystem_G28, &data.xyz))
 801540e:	4669      	mov	r1, sp
 8015410:	2009      	movs	r0, #9
 8015412:	f008 fa1f 	bl	801d854 <settings_read_coord_data>
 8015416:	b130      	cbz	r0, 8015426 <g28_home+0x3a>
        value = data.xyz[axis - 1];
 8015418:	3c01      	subs	r4, #1
 801541a:	ab04      	add	r3, sp, #16
 801541c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015420:	ed14 0a04 	vldr	s0, [r4, #-16]
 8015424:	e7f1      	b.n	801540a <g28_home+0x1e>
    float value = 0.0f;
 8015426:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8015430 <g28_home+0x44>
    return value;
 801542a:	e7ee      	b.n	801540a <g28_home+0x1e>
 801542c:	cccccccd 	.word	0xcccccccd
 8015430:	00000000 	.word	0x00000000

08015434 <probe_coord>:
{
 8015434:	b510      	push	{r4, lr}
 8015436:	b084      	sub	sp, #16
    uint_fast8_t axis = (id % 10) - 1;
 8015438:	4b27      	ldr	r3, [pc, #156]	@ (80154d8 <probe_coord+0xa4>)
 801543a:	fba3 2300 	umull	r2, r3, r3, r0
 801543e:	08db      	lsrs	r3, r3, #3
 8015440:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015444:	eba0 0443 	sub.w	r4, r0, r3, lsl #1
 8015448:	b2a4      	uxth	r4, r4
 801544a:	3c01      	subs	r4, #1
    if(axis < N_AXIS && (sys.probe_coordsys_id == gc_state.modal.coord_system.id || settings_read_coord_data(sys.probe_coordsys_id, &data.xyz))) {
 801544c:	2c02      	cmp	r4, #2
 801544e:	d83f      	bhi.n	80154d0 <probe_coord+0x9c>
 8015450:	4b22      	ldr	r3, [pc, #136]	@ (80154dc <probe_coord+0xa8>)
 8015452:	f893 0036 	ldrb.w	r0, [r3, #54]	@ 0x36
 8015456:	4b22      	ldr	r3, [pc, #136]	@ (80154e0 <probe_coord+0xac>)
 8015458:	7d1b      	ldrb	r3, [r3, #20]
 801545a:	4298      	cmp	r0, r3
 801545c:	d129      	bne.n	80154b2 <probe_coord+0x7e>
        value = sys.probe_position[axis] / settings.axis[axis].steps_per_mm -
 801545e:	491f      	ldr	r1, [pc, #124]	@ (80154dc <probe_coord+0xa8>)
 8015460:	f104 030e 	add.w	r3, r4, #14
 8015464:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015468:	edd3 7a00 	vldr	s15, [r3]
 801546c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8015470:	4b1c      	ldr	r3, [pc, #112]	@ (80154e4 <probe_coord+0xb0>)
 8015472:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015476:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 801547a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801547e:	ee87 0a87 	vdiv.f32	s0, s15, s14
                 (sys.probe_coordsys_id == gc_state.modal.coord_system.id ? gc_state.modal.coord_system.xyz[axis] : data.xyz[axis]);
 8015482:	f891 2036 	ldrb.w	r2, [r1, #54]	@ 0x36
 8015486:	4b16      	ldr	r3, [pc, #88]	@ (80154e0 <probe_coord+0xac>)
 8015488:	7d1b      	ldrb	r3, [r3, #20]
 801548a:	429a      	cmp	r2, r3
 801548c:	d019      	beq.n	80154c2 <probe_coord+0x8e>
 801548e:	ab04      	add	r3, sp, #16
 8015490:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015494:	ed54 7a04 	vldr	s15, [r4, #-16]
        value = sys.probe_position[axis] / settings.axis[axis].steps_per_mm -
 8015498:	ee30 0a67 	vsub.f32	s0, s0, s15
        if(settings.flags.report_inches)
 801549c:	4b11      	ldr	r3, [pc, #68]	@ (80154e4 <probe_coord+0xb0>)
 801549e:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 80154a2:	f013 0f01 	tst.w	r3, #1
 80154a6:	d015      	beq.n	80154d4 <probe_coord+0xa0>
            value *= 25.4f;
 80154a8:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80154e8 <probe_coord+0xb4>
 80154ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80154b0:	e010      	b.n	80154d4 <probe_coord+0xa0>
    if(axis < N_AXIS && (sys.probe_coordsys_id == gc_state.modal.coord_system.id || settings_read_coord_data(sys.probe_coordsys_id, &data.xyz))) {
 80154b2:	4669      	mov	r1, sp
 80154b4:	f008 f9ce 	bl	801d854 <settings_read_coord_data>
 80154b8:	2800      	cmp	r0, #0
 80154ba:	d1d0      	bne.n	801545e <probe_coord+0x2a>
    float value = 0.0f;
 80154bc:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80154ec <probe_coord+0xb8>
    return value;
 80154c0:	e008      	b.n	80154d4 <probe_coord+0xa0>
                 (sys.probe_coordsys_id == gc_state.modal.coord_system.id ? gc_state.modal.coord_system.xyz[axis] : data.xyz[axis]);
 80154c2:	3402      	adds	r4, #2
 80154c4:	4b06      	ldr	r3, [pc, #24]	@ (80154e0 <probe_coord+0xac>)
 80154c6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80154ca:	edd3 7a00 	vldr	s15, [r3]
 80154ce:	e7e3      	b.n	8015498 <probe_coord+0x64>
    float value = 0.0f;
 80154d0:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 80154ec <probe_coord+0xb8>
}
 80154d4:	b004      	add	sp, #16
 80154d6:	bd10      	pop	{r4, pc}
 80154d8:	cccccccd 	.word	0xcccccccd
 80154dc:	20001bbc 	.word	0x20001bbc
 80154e0:	20001614 	.word	0x20001614
 80154e4:	200022f4 	.word	0x200022f4
 80154e8:	41cb3333 	.word	0x41cb3333
 80154ec:	00000000 	.word	0x00000000

080154f0 <scaling_factors>:
{
 80154f0:	b510      	push	{r4, lr}
 80154f2:	4604      	mov	r4, r0
    float *factors = gc_get_scaling();
 80154f4:	f7f7 ffb4 	bl	800d460 <gc_get_scaling>
    uint_fast8_t axis = id % 10;
 80154f8:	4b0a      	ldr	r3, [pc, #40]	@ (8015524 <scaling_factors+0x34>)
 80154fa:	fba3 2304 	umull	r2, r3, r3, r4
 80154fe:	08db      	lsrs	r3, r3, #3
 8015500:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015504:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
 8015508:	b2a4      	uxth	r4, r4
    return axis <= N_AXIS ? factors[axis - 1] : 0.0f;
 801550a:	2c03      	cmp	r4, #3
 801550c:	d807      	bhi.n	801551e <scaling_factors+0x2e>
 801550e:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8015512:	3c01      	subs	r4, #1
 8015514:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8015518:	ed90 0a00 	vldr	s0, [r0]
}
 801551c:	bd10      	pop	{r4, pc}
    return axis <= N_AXIS ? factors[axis - 1] : 0.0f;
 801551e:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8015528 <scaling_factors+0x38>
 8015522:	e7fb      	b.n	801551c <scaling_factors+0x2c>
 8015524:	cccccccd 	.word	0xcccccccd
 8015528:	00000000 	.word	0x00000000

0801552c <ngc_param_get>:
{
 801552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801552e:	460f      	mov	r7, r1
    bool found = id > 0 && id < ngc_ro_params[0].id_min;
 8015530:	4605      	mov	r5, r0
 8015532:	b128      	cbz	r0, 8015540 <ngc_param_get+0x14>
 8015534:	f241 33c4 	movw	r3, #5060	@ 0x13c4
 8015538:	4298      	cmp	r0, r3
 801553a:	d90d      	bls.n	8015558 <ngc_param_get+0x2c>
 801553c:	2300      	movs	r3, #0
 801553e:	e000      	b.n	8015542 <ngc_param_get+0x16>
 8015540:	2300      	movs	r3, #0
    *value = 0.0f;
 8015542:	2200      	movs	r2, #0
 8015544:	603a      	str	r2, [r7, #0]
    if(found) {
 8015546:	461e      	mov	r6, r3
 8015548:	b1c3      	cbz	r3, 801557c <ngc_param_get+0x50>
        void *context = id > (ngc_param_id_t)30 ? NULL : call_context;
 801554a:	2d1e      	cmp	r5, #30
 801554c:	d806      	bhi.n	801555c <ngc_param_get+0x30>
 801554e:	4b1b      	ldr	r3, [pc, #108]	@ (80155bc <ngc_param_get+0x90>)
 8015550:	6819      	ldr	r1, [r3, #0]
        ngc_rw_param_t *rw_param = rw_params;
 8015552:	4b1b      	ldr	r3, [pc, #108]	@ (80155c0 <ngc_param_get+0x94>)
 8015554:	681b      	ldr	r3, [r3, #0]
        while(rw_param) {
 8015556:	e004      	b.n	8015562 <ngc_param_get+0x36>
    bool found = id > 0 && id < ngc_ro_params[0].id_min;
 8015558:	2301      	movs	r3, #1
 801555a:	e7f2      	b.n	8015542 <ngc_param_get+0x16>
        void *context = id > (ngc_param_id_t)30 ? NULL : call_context;
 801555c:	2100      	movs	r1, #0
 801555e:	e7f8      	b.n	8015552 <ngc_param_get+0x26>
                rw_param = rw_param->next;
 8015560:	68db      	ldr	r3, [r3, #12]
        while(rw_param) {
 8015562:	b14b      	cbz	r3, 8015578 <ngc_param_get+0x4c>
            if(rw_param->context == context && rw_param->id == id) {
 8015564:	681a      	ldr	r2, [r3, #0]
 8015566:	428a      	cmp	r2, r1
 8015568:	d1fa      	bne.n	8015560 <ngc_param_get+0x34>
 801556a:	889a      	ldrh	r2, [r3, #4]
 801556c:	42aa      	cmp	r2, r5
 801556e:	d1f7      	bne.n	8015560 <ngc_param_get+0x34>
                *value = rw_param->value;
 8015570:	689b      	ldr	r3, [r3, #8]
 8015572:	603b      	str	r3, [r7, #0]
    bool found = id > 0 && id < ngc_ro_params[0].id_min;
 8015574:	4630      	mov	r0, r6
 8015576:	e000      	b.n	801557a <ngc_param_get+0x4e>
 8015578:	4630      	mov	r0, r6
}
 801557a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint_fast8_t idx = sizeof(ngc_ro_params) / sizeof(ngc_ro_param_t);
 801557c:	2416      	movs	r4, #22
 801557e:	e012      	b.n	80155a6 <ngc_param_get+0x7a>
        if((found = id >= ngc_ro_params[idx].id_min && id <= ngc_ro_params[idx].id_max))
 8015580:	4b10      	ldr	r3, [pc, #64]	@ (80155c4 <ngc_param_get+0x98>)
 8015582:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015586:	885b      	ldrh	r3, [r3, #2]
 8015588:	42ab      	cmp	r3, r5
 801558a:	d314      	bcc.n	80155b6 <ngc_param_get+0x8a>
            *value = ngc_ro_params[idx].get(id);
 801558c:	4b0d      	ldr	r3, [pc, #52]	@ (80155c4 <ngc_param_get+0x98>)
 801558e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015592:	685b      	ldr	r3, [r3, #4]
 8015594:	4628      	mov	r0, r5
 8015596:	4798      	blx	r3
 8015598:	ed87 0a00 	vstr	s0, [r7]
        if((found = id >= ngc_ro_params[idx].id_min && id <= ngc_ro_params[idx].id_max))
 801559c:	2001      	movs	r0, #1
    } while(idx && !found);
 801559e:	2c00      	cmp	r4, #0
 80155a0:	d0eb      	beq.n	801557a <ngc_param_get+0x4e>
 80155a2:	2800      	cmp	r0, #0
 80155a4:	d1e9      	bne.n	801557a <ngc_param_get+0x4e>
        idx--;
 80155a6:	3c01      	subs	r4, #1
        if((found = id >= ngc_ro_params[idx].id_min && id <= ngc_ro_params[idx].id_max))
 80155a8:	4b06      	ldr	r3, [pc, #24]	@ (80155c4 <ngc_param_get+0x98>)
 80155aa:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
 80155ae:	42ab      	cmp	r3, r5
 80155b0:	d9e6      	bls.n	8015580 <ngc_param_get+0x54>
 80155b2:	4630      	mov	r0, r6
 80155b4:	e7f3      	b.n	801559e <ngc_param_get+0x72>
 80155b6:	4630      	mov	r0, r6
 80155b8:	e7f1      	b.n	801559e <ngc_param_get+0x72>
 80155ba:	bf00      	nop
 80155bc:	20001de0 	.word	0x20001de0
 80155c0:	20001d60 	.word	0x20001d60
 80155c4:	0802bee0 	.word	0x0802bee0

080155c8 <ngc_named_param_set>:

    return ok;
}

bool ngc_named_param_set (char *name, float value)
{
 80155c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155cc:	ee10 9a10 	vmov	r9, s0
    bool ok = false;
    uint_fast8_t idx = sizeof(ngc_named_ro_param) / sizeof(ngc_named_ro_param_t);

    name = ngc_name_tolower(name);
 80155d0:	f7ff fe4e 	bl	8015270 <ngc_name_tolower>
 80155d4:	4605      	mov	r5, r0

    // Check if name is supplied, return false if not.
    if((*name == '_' ? *(name + 1) : *name) == '\0')
 80155d6:	7807      	ldrb	r7, [r0, #0]
 80155d8:	2f5f      	cmp	r7, #95	@ 0x5f
 80155da:	d018      	beq.n	801560e <ngc_named_param_set+0x46>
 80155dc:	fab7 f687 	clz	r6, r7
 80155e0:	0976      	lsrs	r6, r6, #5
 80155e2:	2e00      	cmp	r6, #0
 80155e4:	d153      	bne.n	801568e <ngc_named_param_set+0xc6>
        return false;

    // Check if it is a (read only) predefined parameter.
    if(*name == '_') do {
 80155e6:	2f5f      	cmp	r7, #95	@ 0x5f
 80155e8:	d016      	beq.n	8015618 <ngc_named_param_set+0x50>
        idx--;
        ok = !strcmp(name, ngc_named_ro_param[idx].name);
    } while(idx && !ok);

    // If not predefined attempt to set it.
    if(!ok && (ok = strlen(name) < NGC_MAX_PARAM_LENGTH)) {
 80155ea:	4628      	mov	r0, r5
 80155ec:	f7f2 fd88 	bl	8008100 <strlen>
 80155f0:	2813      	cmp	r0, #19
 80155f2:	bf94      	ite	ls
 80155f4:	2001      	movls	r0, #1
 80155f6:	2000      	movhi	r0, #0
 80155f8:	d84a      	bhi.n	8015690 <ngc_named_param_set+0xc8>

        void *context = *name == '_' ? NULL : call_context;
 80155fa:	2f5f      	cmp	r7, #95	@ 0x5f
 80155fc:	d01f      	beq.n	801563e <ngc_named_param_set+0x76>
 80155fe:	4b26      	ldr	r3, [pc, #152]	@ (8015698 <ngc_named_param_set+0xd0>)
 8015600:	681f      	ldr	r7, [r3, #0]
        ngc_named_rw_param_t *rw_param = rw_global_params, *rw_param_last = rw_global_params;
 8015602:	4b26      	ldr	r3, [pc, #152]	@ (801569c <ngc_named_param_set+0xd4>)
 8015604:	f8d3 a000 	ldr.w	sl, [r3]
 8015608:	46d0      	mov	r8, sl
 801560a:	4654      	mov	r4, sl

         while(rw_param) {
 801560c:	e01b      	b.n	8015646 <ngc_named_param_set+0x7e>
    if((*name == '_' ? *(name + 1) : *name) == '\0')
 801560e:	7846      	ldrb	r6, [r0, #1]
 8015610:	fab6 f686 	clz	r6, r6
 8015614:	0976      	lsrs	r6, r6, #5
 8015616:	e7e4      	b.n	80155e2 <ngc_named_param_set+0x1a>
    uint_fast8_t idx = sizeof(ngc_named_ro_param) / sizeof(ngc_named_ro_param_t);
 8015618:	242e      	movs	r4, #46	@ 0x2e
        idx--;
 801561a:	3c01      	subs	r4, #1
        ok = !strcmp(name, ngc_named_ro_param[idx].name);
 801561c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8015620:	4b1f      	ldr	r3, [pc, #124]	@ (80156a0 <ngc_named_param_set+0xd8>)
 8015622:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015626:	4628      	mov	r0, r5
 8015628:	f7f2 fd0a 	bl	8008040 <strcmp>
 801562c:	4603      	mov	r3, r0
 801562e:	fab0 f080 	clz	r0, r0
 8015632:	0940      	lsrs	r0, r0, #5
    } while(idx && !ok);
 8015634:	b10c      	cbz	r4, 801563a <ngc_named_param_set+0x72>
 8015636:	2b00      	cmp	r3, #0
 8015638:	d1ef      	bne.n	801561a <ngc_named_param_set+0x52>
    if(!ok && (ok = strlen(name) < NGC_MAX_PARAM_LENGTH)) {
 801563a:	bb48      	cbnz	r0, 8015690 <ngc_named_param_set+0xc8>
 801563c:	e7d5      	b.n	80155ea <ngc_named_param_set+0x22>
        void *context = *name == '_' ? NULL : call_context;
 801563e:	2700      	movs	r7, #0
 8015640:	e7df      	b.n	8015602 <ngc_named_param_set+0x3a>
             if(rw_param->context == context && !strcmp(rw_param->name, name)) {
                 break;
             } else {
                 rw_param_last = rw_param;
 8015642:	46a0      	mov	r8, r4
                 rw_param = rw_param->next;
 8015644:	6a24      	ldr	r4, [r4, #32]
         while(rw_param) {
 8015646:	b144      	cbz	r4, 801565a <ngc_named_param_set+0x92>
             if(rw_param->context == context && !strcmp(rw_param->name, name)) {
 8015648:	6823      	ldr	r3, [r4, #0]
 801564a:	42bb      	cmp	r3, r7
 801564c:	d1f9      	bne.n	8015642 <ngc_named_param_set+0x7a>
 801564e:	4629      	mov	r1, r5
 8015650:	1d20      	adds	r0, r4, #4
 8015652:	f7f2 fcf5 	bl	8008040 <strcmp>
 8015656:	2800      	cmp	r0, #0
 8015658:	d1f3      	bne.n	8015642 <ngc_named_param_set+0x7a>
             }
         }

         if(rw_param == NULL && (rw_param = malloc(sizeof(ngc_named_rw_param_t)))) {
 801565a:	b11c      	cbz	r4, 8015664 <ngc_named_param_set+0x9c>
             else
                 rw_param_last->next = rw_param;
         }

         if((ok = rw_param != NULL))
             rw_param->value = value;
 801565c:	f8c4 901c 	str.w	r9, [r4, #28]
 8015660:	2001      	movs	r0, #1
 8015662:	e015      	b.n	8015690 <ngc_named_param_set+0xc8>
         if(rw_param == NULL && (rw_param = malloc(sizeof(ngc_named_rw_param_t)))) {
 8015664:	2024      	movs	r0, #36	@ 0x24
 8015666:	f00d fb97 	bl	8022d98 <malloc>
 801566a:	4604      	mov	r4, r0
 801566c:	b190      	cbz	r0, 8015694 <ngc_named_param_set+0xcc>
             strcpy(rw_param->name, name);
 801566e:	4629      	mov	r1, r5
 8015670:	3004      	adds	r0, #4
 8015672:	f00f fdb0 	bl	80251d6 <strcpy>
             rw_param->context = context;
 8015676:	6027      	str	r7, [r4, #0]
             rw_param->next = NULL;
 8015678:	2300      	movs	r3, #0
 801567a:	6223      	str	r3, [r4, #32]
             if(rw_global_params == NULL)
 801567c:	f1ba 0f00 	cmp.w	sl, #0
 8015680:	d002      	beq.n	8015688 <ngc_named_param_set+0xc0>
                 rw_param_last->next = rw_param;
 8015682:	f8c8 4020 	str.w	r4, [r8, #32]
 8015686:	e7e9      	b.n	801565c <ngc_named_param_set+0x94>
                 rw_global_params = rw_param;
 8015688:	4b04      	ldr	r3, [pc, #16]	@ (801569c <ngc_named_param_set+0xd4>)
 801568a:	601c      	str	r4, [r3, #0]
 801568c:	e7e6      	b.n	801565c <ngc_named_param_set+0x94>
        return false;
 801568e:	2000      	movs	r0, #0
     }

    return ok;
}
 8015690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         if((ok = rw_param != NULL))
 8015694:	4630      	mov	r0, r6
 8015696:	e7fb      	b.n	8015690 <ngc_named_param_set+0xc8>
 8015698:	20001de0 	.word	0x20001de0
 801569c:	20001d5c 	.word	0x20001d5c
 80156a0:	0802bcb8 	.word	0x0802bcb8

080156a4 <ngc_modal_state_save>:

bool ngc_modal_state_save (gc_modal_t *state, bool auto_restore)
{
 80156a4:	b538      	push	{r3, r4, r5, lr}
 80156a6:	4605      	mov	r5, r0
    gc_modal_t **saved_state = call_level == -1 ? &modal_state : &call_levels[call_level].modal_state;
 80156a8:	4b17      	ldr	r3, [pc, #92]	@ (8015708 <ngc_modal_state_save+0x64>)
 80156aa:	681c      	ldr	r4, [r3, #0]
 80156ac:	f1b4 3fff 	cmp.w	r4, #4294967295
 80156b0:	d022      	beq.n	80156f8 <ngc_modal_state_save+0x54>
 80156b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80156b6:	00a4      	lsls	r4, r4, #2
 80156b8:	3408      	adds	r4, #8
 80156ba:	4b14      	ldr	r3, [pc, #80]	@ (801570c <ngc_modal_state_save+0x68>)
 80156bc:	441c      	add	r4, r3

    if(*saved_state == NULL)
 80156be:	6823      	ldr	r3, [r4, #0]
 80156c0:	b1e3      	cbz	r3, 80156fc <ngc_modal_state_save+0x58>
        *saved_state = malloc(sizeof(gc_modal_t));

    if(*saved_state)
 80156c2:	6823      	ldr	r3, [r4, #0]
 80156c4:	b19b      	cbz	r3, 80156ee <ngc_modal_state_save+0x4a>
        memcpy(*saved_state, state, sizeof(gc_modal_t));
 80156c6:	462a      	mov	r2, r5
 80156c8:	3530      	adds	r5, #48	@ 0x30
 80156ca:	f8d2 e000 	ldr.w	lr, [r2]
 80156ce:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80156d2:	6890      	ldr	r0, [r2, #8]
 80156d4:	68d1      	ldr	r1, [r2, #12]
 80156d6:	f8c3 e000 	str.w	lr, [r3]
 80156da:	f8c3 c004 	str.w	ip, [r3, #4]
 80156de:	6098      	str	r0, [r3, #8]
 80156e0:	60d9      	str	r1, [r3, #12]
 80156e2:	3210      	adds	r2, #16
 80156e4:	3310      	adds	r3, #16
 80156e6:	42aa      	cmp	r2, r5
 80156e8:	d1ef      	bne.n	80156ca <ngc_modal_state_save+0x26>
 80156ea:	6812      	ldr	r2, [r2, #0]
 80156ec:	601a      	str	r2, [r3, #0]

    return *saved_state != NULL;
 80156ee:	6820      	ldr	r0, [r4, #0]
}
 80156f0:	3800      	subs	r0, #0
 80156f2:	bf18      	it	ne
 80156f4:	2001      	movne	r0, #1
 80156f6:	bd38      	pop	{r3, r4, r5, pc}
    gc_modal_t **saved_state = call_level == -1 ? &modal_state : &call_levels[call_level].modal_state;
 80156f8:	4c05      	ldr	r4, [pc, #20]	@ (8015710 <ngc_modal_state_save+0x6c>)
 80156fa:	e7e0      	b.n	80156be <ngc_modal_state_save+0x1a>
        *saved_state = malloc(sizeof(gc_modal_t));
 80156fc:	2034      	movs	r0, #52	@ 0x34
 80156fe:	f00d fb4b 	bl	8022d98 <malloc>
 8015702:	6020      	str	r0, [r4, #0]
 8015704:	e7dd      	b.n	80156c2 <ngc_modal_state_save+0x1e>
 8015706:	bf00      	nop
 8015708:	20000214 	.word	0x20000214
 801570c:	20001d64 	.word	0x20001d64
 8015710:	20001ddc 	.word	0x20001ddc

08015714 <ngc_modal_state_invalidate>:

void ngc_modal_state_invalidate (void)
{
 8015714:	b510      	push	{r4, lr}
    gc_modal_t **saved_state = call_level == -1 ? &modal_state : &call_levels[call_level].modal_state;
 8015716:	4b0a      	ldr	r3, [pc, #40]	@ (8015740 <ngc_modal_state_invalidate+0x2c>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801571e:	d00c      	beq.n	801573a <ngc_modal_state_invalidate+0x26>
 8015720:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015724:	009c      	lsls	r4, r3, #2
 8015726:	3408      	adds	r4, #8
 8015728:	4b06      	ldr	r3, [pc, #24]	@ (8015744 <ngc_modal_state_invalidate+0x30>)
 801572a:	441c      	add	r4, r3

    if(*saved_state) {
 801572c:	6820      	ldr	r0, [r4, #0]
 801572e:	b118      	cbz	r0, 8015738 <ngc_modal_state_invalidate+0x24>
        free(*saved_state);
 8015730:	f00d fb3a 	bl	8022da8 <free>
        *saved_state = NULL;
 8015734:	2300      	movs	r3, #0
 8015736:	6023      	str	r3, [r4, #0]
    }
}
 8015738:	bd10      	pop	{r4, pc}
    gc_modal_t **saved_state = call_level == -1 ? &modal_state : &call_levels[call_level].modal_state;
 801573a:	4c03      	ldr	r4, [pc, #12]	@ (8015748 <ngc_modal_state_invalidate+0x34>)
 801573c:	e7f6      	b.n	801572c <ngc_modal_state_invalidate+0x18>
 801573e:	bf00      	nop
 8015740:	20000214 	.word	0x20000214
 8015744:	20001d64 	.word	0x20001d64
 8015748:	20001ddc 	.word	0x20001ddc

0801574c <ngc_modal_state_restore>:

bool ngc_modal_state_restore (void)
{
 801574c:	b508      	push	{r3, lr}
    return gc_modal_state_restore(call_level == -1 ? modal_state : call_levels[call_level].modal_state);
 801574e:	4b08      	ldr	r3, [pc, #32]	@ (8015770 <ngc_modal_state_restore+0x24>)
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015756:	d008      	beq.n	801576a <ngc_modal_state_restore+0x1e>
 8015758:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801575c:	009a      	lsls	r2, r3, #2
 801575e:	4b05      	ldr	r3, [pc, #20]	@ (8015774 <ngc_modal_state_restore+0x28>)
 8015760:	4413      	add	r3, r2
 8015762:	6898      	ldr	r0, [r3, #8]
 8015764:	f7f8 f868 	bl	800d838 <gc_modal_state_restore>
}
 8015768:	bd08      	pop	{r3, pc}
    return gc_modal_state_restore(call_level == -1 ? modal_state : call_levels[call_level].modal_state);
 801576a:	4b03      	ldr	r3, [pc, #12]	@ (8015778 <ngc_modal_state_restore+0x2c>)
 801576c:	6818      	ldr	r0, [r3, #0]
 801576e:	e7f9      	b.n	8015764 <ngc_modal_state_restore+0x18>
 8015770:	20000214 	.word	0x20000214
 8015774:	20001d64 	.word	0x20001d64
 8015778:	20001ddc 	.word	0x20001ddc

0801577c <ngc_call_push>:

bool ngc_call_push (void *context)
{
 801577c:	4602      	mov	r2, r0
    bool ok;

    if((ok = call_level < (NGC_MAX_CALL_LEVEL - 1)))
 801577e:	4b09      	ldr	r3, [pc, #36]	@ (80157a4 <ngc_call_push+0x28>)
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	2b08      	cmp	r3, #8
 8015784:	bfd4      	ite	le
 8015786:	2001      	movle	r0, #1
 8015788:	2000      	movgt	r0, #0
 801578a:	dc0a      	bgt.n	80157a2 <ngc_call_push+0x26>
        call_levels[++call_level].context = call_context = context;
 801578c:	4906      	ldr	r1, [pc, #24]	@ (80157a8 <ngc_call_push+0x2c>)
 801578e:	600a      	str	r2, [r1, #0]
 8015790:	3301      	adds	r3, #1
 8015792:	4904      	ldr	r1, [pc, #16]	@ (80157a4 <ngc_call_push+0x28>)
 8015794:	600b      	str	r3, [r1, #0]
 8015796:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801579a:	4904      	ldr	r1, [pc, #16]	@ (80157ac <ngc_call_push+0x30>)
 801579c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80157a0:	605a      	str	r2, [r3, #4]

    return ok;
}
 80157a2:	4770      	bx	lr
 80157a4:	20000214 	.word	0x20000214
 80157a8:	20001de0 	.word	0x20001de0
 80157ac:	20001d64 	.word	0x20001d64

080157b0 <ngc_call_level>:
    return call_level >= 0;
}

uint_fast8_t ngc_call_level (void)
{
    return (uint_fast8_t)(call_level + 1);
 80157b0:	4b01      	ldr	r3, [pc, #4]	@ (80157b8 <ngc_call_level+0x8>)
 80157b2:	6818      	ldr	r0, [r3, #0]
}
 80157b4:	3001      	adds	r0, #1
 80157b6:	4770      	bx	lr
 80157b8:	20000214 	.word	0x20000214

080157bc <ngc_named_param_get_by_id>:
{
 80157bc:	b508      	push	{r3, lr}
    switch(id) {
 80157be:	282d      	cmp	r0, #45	@ 0x2d
 80157c0:	f200 8139 	bhi.w	8015a36 <ngc_named_param_get_by_id+0x27a>
 80157c4:	e8df f010 	tbh	[pc, r0, lsl #1]
 80157c8:	013a002e 	.word	0x013a002e
 80157cc:	00370031 	.word	0x00370031
 80157d0:	004c0041 	.word	0x004c0041
 80157d4:	0057004f 	.word	0x0057004f
 80157d8:	0067005f 	.word	0x0067005f
 80157dc:	0079006f 	.word	0x0079006f
 80157e0:	008b0081 	.word	0x008b0081
 80157e4:	00a4009c 	.word	0x00a4009c
 80157e8:	00b600ac 	.word	0x00b600ac
 80157ec:	013a00be 	.word	0x013a00be
 80157f0:	00d000c8 	.word	0x00d000c8
 80157f4:	00e000d8 	.word	0x00e000d8
 80157f8:	00f000e8 	.word	0x00f000e8
 80157fc:	010000f8 	.word	0x010000f8
 8015800:	0108013a 	.word	0x0108013a
 8015804:	01140110 	.word	0x01140110
 8015808:	01180118 	.word	0x01180118
 801580c:	01180118 	.word	0x01180118
 8015810:	01180118 	.word	0x01180118
 8015814:	01180118 	.word	0x01180118
 8015818:	011c0118 	.word	0x011c0118
 801581c:	0124013a 	.word	0x0124013a
 8015820:	0130013a 	.word	0x0130013a
 8015824:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 8015ab0 <ngc_named_param_get_by_id+0x2f4>
 8015828:	e10a      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = (float)gc_state.line_number;
 801582a:	4ba2      	ldr	r3, [pc, #648]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 801582c:	ed93 0a1d 	vldr	s0, [r3, #116]	@ 0x74
 8015830:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
            break;
 8015834:	e104      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = (float)(gc_state.modal.motion * 10); // TODO: Fix G38.x
 8015836:	4b9f      	ldr	r3, [pc, #636]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 8015838:	881b      	ldrh	r3, [r3, #0]
 801583a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801583e:	005b      	lsls	r3, r3, #1
 8015840:	ee07 3a90 	vmov	s15, r3
 8015844:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
            break;
 8015848:	e0fa      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = (float)(170 + gc_state.modal.plane_select * 10);
 801584a:	4b9a      	ldr	r3, [pc, #616]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 801584c:	799b      	ldrb	r3, [r3, #6]
 801584e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015852:	005b      	lsls	r3, r3, #1
 8015854:	33aa      	adds	r3, #170	@ 0xaa
 8015856:	ee00 3a10 	vmov	s0, r3
 801585a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
            break;
 801585e:	e0ef      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = 400.0f;
 8015860:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8015ab8 <ngc_named_param_get_by_id+0x2fc>
            break;
 8015864:	e0ec      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.units_imperial ? 0.0f : 1.0f;
 8015866:	4b93      	ldr	r3, [pc, #588]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 8015868:	78db      	ldrb	r3, [r3, #3]
 801586a:	2b00      	cmp	r3, #0
 801586c:	f000 80e9 	beq.w	8015a42 <ngc_named_param_get_by_id+0x286>
 8015870:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 8015874:	e0e4      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.units_imperial ? 1.0f : 0.0f;
 8015876:	4b8f      	ldr	r3, [pc, #572]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 8015878:	78db      	ldrb	r3, [r3, #3]
 801587a:	2b00      	cmp	r3, #0
 801587c:	f000 80e4 	beq.w	8015a48 <ngc_named_param_get_by_id+0x28c>
 8015880:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015884:	e0dc      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.distance_incremental ? 0.0f : 1.0f;
 8015886:	4b8b      	ldr	r3, [pc, #556]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 8015888:	791b      	ldrb	r3, [r3, #4]
 801588a:	2b00      	cmp	r3, #0
 801588c:	f000 80df 	beq.w	8015a4e <ngc_named_param_get_by_id+0x292>
 8015890:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 8015894:	e0d4      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.distance_incremental ? 1.0f : 0.0f;
 8015896:	4b87      	ldr	r3, [pc, #540]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 8015898:	791b      	ldrb	r3, [r3, #4]
 801589a:	2b00      	cmp	r3, #0
 801589c:	f000 80da 	beq.w	8015a54 <ngc_named_param_get_by_id+0x298>
 80158a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80158a4:	e0cc      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.feed_mode == FeedMode_InverseTime ? 1.0f : 0.0f;
 80158a6:	4b83      	ldr	r3, [pc, #524]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 80158a8:	789b      	ldrb	r3, [r3, #2]
 80158aa:	2b01      	cmp	r3, #1
 80158ac:	d002      	beq.n	80158b4 <ngc_named_param_get_by_id+0xf8>
 80158ae:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 80158b2:	e0c5      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
 80158b4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80158b8:	e0c2      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.feed_mode == FeedMode_UnitsPerMin ? 1.0f : 0.0f;
 80158ba:	4b7e      	ldr	r3, [pc, #504]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 80158bc:	789b      	ldrb	r3, [r3, #2]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	f040 80cb 	bne.w	8015a5a <ngc_named_param_get_by_id+0x29e>
 80158c4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80158c8:	e0ba      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.feed_mode == FeedMode_UnitsPerRev ? 1.0f : 0.0f;
 80158ca:	4b7a      	ldr	r3, [pc, #488]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 80158cc:	789b      	ldrb	r3, [r3, #2]
 80158ce:	2b02      	cmp	r3, #2
 80158d0:	d002      	beq.n	80158d8 <ngc_named_param_get_by_id+0x11c>
 80158d2:	ed9f 0a7a 	vldr	s0, [pc, #488]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 80158d6:	e0b3      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
 80158d8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80158dc:	e0b0      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
                uint_fast16_t id = gc_state.modal.coord_system.id * 10;
 80158de:	4b75      	ldr	r3, [pc, #468]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 80158e0:	7d19      	ldrb	r1, [r3, #20]
 80158e2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80158e6:	0052      	lsls	r2, r2, #1
 80158e8:	4613      	mov	r3, r2
                if(id > (CoordinateSystem_G59 * 10))
 80158ea:	2a32      	cmp	r2, #50	@ 0x32
 80158ec:	d901      	bls.n	80158f2 <ngc_named_param_get_by_id+0x136>
                    id = (CoordinateSystem_G59 * 10) + gc_state.modal.coord_system.id - CoordinateSystem_G59;
 80158ee:	f101 032d 	add.w	r3, r1, #45	@ 0x2d
                value = (float)(540 + id);
 80158f2:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80158f6:	ee00 3a10 	vmov	s0, r3
 80158fa:	eeb8 0a40 	vcvt.f32.u32	s0, s0
            break;
 80158fe:	e09f      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.tool_offset_mode >= ToolLengthOffset_Enable ? 1.0f : 0.0f;
 8015900:	4b6c      	ldr	r3, [pc, #432]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 8015902:	79db      	ldrb	r3, [r3, #7]
 8015904:	2b00      	cmp	r3, #0
 8015906:	f000 80ab 	beq.w	8015a60 <ngc_named_param_get_by_id+0x2a4>
 801590a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801590e:	e097      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.retract_mode == CCRetractMode_Previous ? 1.0f : 0.0f;
 8015910:	4b68      	ldr	r3, [pc, #416]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 8015912:	7f5b      	ldrb	r3, [r3, #29]
 8015914:	2b00      	cmp	r3, #0
 8015916:	f040 80a6 	bne.w	8015a66 <ngc_named_param_get_by_id+0x2aa>
 801591a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801591e:	e08f      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.retract_mode == CCRetractMode_RPos ? 1.0f : 0.0f;
 8015920:	4b64      	ldr	r3, [pc, #400]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 8015922:	7f5b      	ldrb	r3, [r3, #29]
 8015924:	2b01      	cmp	r3, #1
 8015926:	d002      	beq.n	801592e <ngc_named_param_get_by_id+0x172>
 8015928:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 801592c:	e088      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
 801592e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015932:	e085      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? 1.0f : 0.0f;
 8015934:	4b5f      	ldr	r3, [pc, #380]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 8015936:	7edb      	ldrb	r3, [r3, #27]
 8015938:	2b00      	cmp	r3, #0
 801593a:	f040 8097 	bne.w	8015a6c <ngc_named_param_get_by_id+0x2b0>
 801593e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015942:	e07d      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS ? 1.0f : 0.0f;
 8015944:	4b5b      	ldr	r3, [pc, #364]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 8015946:	7edb      	ldrb	r3, [r3, #27]
 8015948:	2b01      	cmp	r3, #1
 801594a:	d002      	beq.n	8015952 <ngc_named_param_get_by_id+0x196>
 801594c:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 8015950:	e076      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
 8015952:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015956:	e073      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.diameter_mode ? 1.0f : 0.0f;
 8015958:	4b56      	ldr	r3, [pc, #344]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 801595a:	795b      	ldrb	r3, [r3, #5]
 801595c:	2b00      	cmp	r3, #0
 801595e:	f000 8088 	beq.w	8015a72 <ngc_named_param_get_by_id+0x2b6>
 8015962:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015966:	e06b      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.diameter_mode ? 0.0f : 1.0f;
 8015968:	4b52      	ldr	r3, [pc, #328]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 801596a:	795b      	ldrb	r3, [r3, #5]
 801596c:	2b00      	cmp	r3, #0
 801596e:	f000 8083 	beq.w	8015a78 <ngc_named_param_get_by_id+0x2bc>
 8015972:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 8015976:	e063      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.state.on ? 1.0f : 0.0f;
 8015978:	4b4e      	ldr	r3, [pc, #312]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 801597a:	7e9b      	ldrb	r3, [r3, #26]
 801597c:	f013 0f01 	tst.w	r3, #1
 8015980:	d07d      	beq.n	8015a7e <ngc_named_param_get_by_id+0x2c2>
 8015982:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015986:	e05b      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.state.ccw ? 1.0f : 0.0f;
 8015988:	4b4a      	ldr	r3, [pc, #296]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 801598a:	7e9b      	ldrb	r3, [r3, #26]
 801598c:	f013 0f02 	tst.w	r3, #2
 8015990:	d078      	beq.n	8015a84 <ngc_named_param_get_by_id+0x2c8>
 8015992:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015996:	e053      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.coolant.mist ? 1.0f : 0.0f;
 8015998:	4b46      	ldr	r3, [pc, #280]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 801599a:	7e5b      	ldrb	r3, [r3, #25]
 801599c:	f013 0f02 	tst.w	r3, #2
 80159a0:	d073      	beq.n	8015a8a <ngc_named_param_get_by_id+0x2ce>
 80159a2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80159a6:	e04b      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.coolant.flood ? 1.0f : 0.0f;
 80159a8:	4b42      	ldr	r3, [pc, #264]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 80159aa:	7e5b      	ldrb	r3, [r3, #25]
 80159ac:	f013 0f01 	tst.w	r3, #1
 80159b0:	d06e      	beq.n	8015a90 <ngc_named_param_get_by_id+0x2d4>
 80159b2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80159b6:	e043      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.spindle_rpm_disable ? 0.0f : 1.0f;
 80159b8:	4b3e      	ldr	r3, [pc, #248]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 80159ba:	7f1b      	ldrb	r3, [r3, #28]
 80159bc:	f013 0f04 	tst.w	r3, #4
 80159c0:	d069      	beq.n	8015a96 <ngc_named_param_get_by_id+0x2da>
 80159c2:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 80159c6:	e03b      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.feed_rate_disable ? 0.0f : 1.0f;
 80159c8:	4b3a      	ldr	r3, [pc, #232]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 80159ca:	7f1b      	ldrb	r3, [r3, #28]
 80159cc:	f013 0f01 	tst.w	r3, #1
 80159d0:	d064      	beq.n	8015a9c <ngc_named_param_get_by_id+0x2e0>
 80159d2:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 80159d6:	e033      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.feed_hold_disable ? 0.0f : 1.0f;
 80159d8:	4b36      	ldr	r3, [pc, #216]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 80159da:	7f1b      	ldrb	r3, [r3, #28]
 80159dc:	f013 0f02 	tst.w	r3, #2
 80159e0:	d05f      	beq.n	8015aa2 <ngc_named_param_get_by_id+0x2e6>
 80159e2:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 80159e6:	e02b      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.feed_rate;
 80159e8:	4b32      	ldr	r3, [pc, #200]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 80159ea:	ed93 0a18 	vldr	s0, [r3, #96]	@ 0x60
            break;
 80159ee:	e027      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.spindle.rpm;
 80159f0:	4b30      	ldr	r3, [pc, #192]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 80159f2:	ed93 0a14 	vldr	s0, [r3, #80]	@ 0x50
            break;
 80159f6:	e023      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = _relative_pos(id - NGCParam_x);
 80159f8:	3820      	subs	r0, #32
 80159fa:	f7ff fc57 	bl	80152ac <_relative_pos>
            break;
 80159fe:	e01f      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = (float)gc_state.tool->tool_id;
 8015a00:	4b2c      	ldr	r3, [pc, #176]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 8015a02:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8015a06:	ed93 0a04 	vldr	s0, [r3, #16]
 8015a0a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
            break;
 8015a0e:	e017      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.tool_pending != gc_state.tool->tool_id ? (float)gc_state.tool_pending : -1.0f;
 8015a10:	4a28      	ldr	r2, [pc, #160]	@ (8015ab4 <ngc_named_param_get_by_id+0x2f8>)
 8015a12:	6f93      	ldr	r3, [r2, #120]	@ 0x78
 8015a14:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 8015a18:	6912      	ldr	r2, [r2, #16]
 8015a1a:	4293      	cmp	r3, r2
 8015a1c:	d044      	beq.n	8015aa8 <ngc_named_param_get_by_id+0x2ec>
 8015a1e:	ee07 3a90 	vmov	s15, r3
 8015a22:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8015a26:	e00b      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = (float)ngc_call_level();
 8015a28:	f7ff fec2 	bl	80157b0 <ngc_call_level>
 8015a2c:	ee00 0a10 	vmov	s0, r0
 8015a30:	eeb8 0a40 	vcvt.f32.u32	s0, s0
            break;
 8015a34:	e004      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = NAN;
 8015a36:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8015ac0 <ngc_named_param_get_by_id+0x304>
 8015a3a:	e001      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = 0.0f; // TODO: derive from version letter?
 8015a3c:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8015abc <ngc_named_param_get_by_id+0x300>
}
 8015a40:	bd08      	pop	{r3, pc}
            value = gc_state.modal.units_imperial ? 0.0f : 1.0f;
 8015a42:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015a46:	e7fb      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.units_imperial ? 1.0f : 0.0f;
 8015a48:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 8015a4c:	e7f8      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.distance_incremental ? 0.0f : 1.0f;
 8015a4e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015a52:	e7f5      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.distance_incremental ? 1.0f : 0.0f;
 8015a54:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 8015a58:	e7f2      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.feed_mode == FeedMode_UnitsPerMin ? 1.0f : 0.0f;
 8015a5a:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 8015a5e:	e7ef      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.tool_offset_mode >= ToolLengthOffset_Enable ? 1.0f : 0.0f;
 8015a60:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 8015a64:	e7ec      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.retract_mode == CCRetractMode_Previous ? 1.0f : 0.0f;
 8015a66:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 8015a6a:	e7e9      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? 1.0f : 0.0f;
 8015a6c:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 8015a70:	e7e6      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.diameter_mode ? 1.0f : 0.0f;
 8015a72:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 8015a76:	e7e3      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.diameter_mode ? 0.0f : 1.0f;
 8015a78:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015a7c:	e7e0      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.state.on ? 1.0f : 0.0f;
 8015a7e:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 8015a82:	e7dd      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.state.ccw ? 1.0f : 0.0f;
 8015a84:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 8015a88:	e7da      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.coolant.mist ? 1.0f : 0.0f;
 8015a8a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 8015a8e:	e7d7      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.coolant.flood ? 1.0f : 0.0f;
 8015a90:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8015abc <ngc_named_param_get_by_id+0x300>
 8015a94:	e7d4      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.spindle_rpm_disable ? 0.0f : 1.0f;
 8015a96:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015a9a:	e7d1      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.feed_rate_disable ? 0.0f : 1.0f;
 8015a9c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015aa0:	e7ce      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.feed_hold_disable ? 0.0f : 1.0f;
 8015aa2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015aa6:	e7cb      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
            value = gc_state.tool_pending != gc_state.tool->tool_id ? (float)gc_state.tool_pending : -1.0f;
 8015aa8:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
    return value;
 8015aac:	e7c8      	b.n	8015a40 <ngc_named_param_get_by_id+0x284>
 8015aae:	bf00      	nop
 8015ab0:	3f8ccccd 	.word	0x3f8ccccd
 8015ab4:	20001614 	.word	0x20001614
 8015ab8:	43c80000 	.word	0x43c80000
 8015abc:	00000000 	.word	0x00000000
 8015ac0:	7fc00000 	.word	0x7fc00000

08015ac4 <ngc_named_param_get>:
{
 8015ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ac8:	4688      	mov	r8, r1
    name = ngc_name_tolower(name);
 8015aca:	f7ff fbd1 	bl	8015270 <ngc_name_tolower>
 8015ace:	4607      	mov	r7, r0
    *value = 0.0f;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	f8c8 3000 	str.w	r3, [r8]
     if(*name == '_') do {
 8015ad6:	7803      	ldrb	r3, [r0, #0]
 8015ad8:	2b5f      	cmp	r3, #95	@ 0x5f
 8015ada:	d008      	beq.n	8015aee <ngc_named_param_get+0x2a>
    bool found = false;
 8015adc:	2600      	movs	r6, #0
        void *context = *name == '_' ? NULL : call_context;
 8015ade:	783b      	ldrb	r3, [r7, #0]
 8015ae0:	2b5f      	cmp	r3, #95	@ 0x5f
 8015ae2:	d026      	beq.n	8015b32 <ngc_named_param_get+0x6e>
 8015ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8015b5c <ngc_named_param_get+0x98>)
 8015ae6:	681d      	ldr	r5, [r3, #0]
        ngc_named_rw_param_t *rw_param = rw_global_params;
 8015ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8015b60 <ngc_named_param_get+0x9c>)
 8015aea:	681c      	ldr	r4, [r3, #0]
        while(rw_param && !found) {
 8015aec:	e024      	b.n	8015b38 <ngc_named_param_get+0x74>
    uint_fast8_t idx = sizeof(ngc_named_ro_param) / sizeof(ngc_named_ro_param_t);
 8015aee:	242e      	movs	r4, #46	@ 0x2e
 8015af0:	e001      	b.n	8015af6 <ngc_named_param_get+0x32>
    } while(idx && !found);
 8015af2:	b1cc      	cbz	r4, 8015b28 <ngc_named_param_get+0x64>
 8015af4:	b1c5      	cbz	r5, 8015b28 <ngc_named_param_get+0x64>
        idx--;
 8015af6:	3c01      	subs	r4, #1
        if((found = !strcmp(name, ngc_named_ro_param[idx].name)))
 8015af8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8015afc:	4b19      	ldr	r3, [pc, #100]	@ (8015b64 <ngc_named_param_get+0xa0>)
 8015afe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015b02:	4638      	mov	r0, r7
 8015b04:	f7f2 fa9c 	bl	8008040 <strcmp>
 8015b08:	1e05      	subs	r5, r0, #0
 8015b0a:	bf0c      	ite	eq
 8015b0c:	2601      	moveq	r6, #1
 8015b0e:	2600      	movne	r6, #0
 8015b10:	d1ef      	bne.n	8015af2 <ngc_named_param_get+0x2e>
            *value = ngc_named_param_get_by_id(ngc_named_ro_param[idx].id);
 8015b12:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8015b16:	4b13      	ldr	r3, [pc, #76]	@ (8015b64 <ngc_named_param_get+0xa0>)
 8015b18:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015b1c:	7918      	ldrb	r0, [r3, #4]
 8015b1e:	f7ff fe4d 	bl	80157bc <ngc_named_param_get_by_id>
 8015b22:	ed88 0a00 	vstr	s0, [r8]
 8015b26:	e7e4      	b.n	8015af2 <ngc_named_param_get+0x2e>
    if(!found) {
 8015b28:	2e00      	cmp	r6, #0
 8015b2a:	d0d8      	beq.n	8015ade <ngc_named_param_get+0x1a>
}
 8015b2c:	4630      	mov	r0, r6
 8015b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        void *context = *name == '_' ? NULL : call_context;
 8015b32:	2500      	movs	r5, #0
 8015b34:	e7d8      	b.n	8015ae8 <ngc_named_param_get+0x24>
                rw_param = rw_param->next;
 8015b36:	6a24      	ldr	r4, [r4, #32]
        while(rw_param && !found) {
 8015b38:	2c00      	cmp	r4, #0
 8015b3a:	d0f7      	beq.n	8015b2c <ngc_named_param_get+0x68>
 8015b3c:	2e00      	cmp	r6, #0
 8015b3e:	d1f5      	bne.n	8015b2c <ngc_named_param_get+0x68>
            if((found = rw_param->context == context && !strcmp(rw_param->name, name)))
 8015b40:	6823      	ldr	r3, [r4, #0]
 8015b42:	42ab      	cmp	r3, r5
 8015b44:	d1f7      	bne.n	8015b36 <ngc_named_param_get+0x72>
 8015b46:	4639      	mov	r1, r7
 8015b48:	1d20      	adds	r0, r4, #4
 8015b4a:	f7f2 fa79 	bl	8008040 <strcmp>
 8015b4e:	2800      	cmp	r0, #0
 8015b50:	d1f1      	bne.n	8015b36 <ngc_named_param_get+0x72>
                *value = rw_param->value;
 8015b52:	69e3      	ldr	r3, [r4, #28]
 8015b54:	f8c8 3000 	str.w	r3, [r8]
            if((found = rw_param->context == context && !strcmp(rw_param->name, name)))
 8015b58:	2601      	movs	r6, #1
 8015b5a:	e7ed      	b.n	8015b38 <ngc_named_param_get+0x74>
 8015b5c:	20001de0 	.word	0x20001de0
 8015b60:	20001d5c 	.word	0x20001d5c
 8015b64:	0802bcb8 	.word	0x0802bcb8

08015b68 <ngc_float_decimals>:

uint8_t ngc_float_decimals (void)
{
	return settings.flags.report_inches ? N_DECIMAL_COORDVALUE_INCH : N_DECIMAL_COORDVALUE_MM;
 8015b68:	4b04      	ldr	r3, [pc, #16]	@ (8015b7c <ngc_float_decimals+0x14>)
 8015b6a:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8015b6e:	f013 0f01 	tst.w	r3, #1
 8015b72:	d001      	beq.n	8015b78 <ngc_float_decimals+0x10>
 8015b74:	2004      	movs	r0, #4
 8015b76:	4770      	bx	lr
 8015b78:	2003      	movs	r0, #3
}
 8015b7a:	4770      	bx	lr
 8015b7c:	200022f4 	.word	0x200022f4

08015b80 <uitoa>:
// Converts an uint32 variable to string.
char *uitoa (uint32_t n)
{
    char *bptr = buf + sizeof(buf);

    *--bptr = '\0';
 8015b80:	4b0d      	ldr	r3, [pc, #52]	@ (8015bb8 <uitoa+0x38>)
 8015b82:	2200      	movs	r2, #0
 8015b84:	739a      	strb	r2, [r3, #14]

    if (n == 0)
 8015b86:	4602      	mov	r2, r0
 8015b88:	b9a0      	cbnz	r0, 8015bb4 <uitoa+0x34>
        *--bptr = '0';
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	2330      	movs	r3, #48	@ 0x30
 8015b8e:	f800 3f0d 	strb.w	r3, [r0, #13]!
 8015b92:	4770      	bx	lr
    else while (n) {
        *--bptr = '0' + (n % 10);
 8015b94:	4b09      	ldr	r3, [pc, #36]	@ (8015bbc <uitoa+0x3c>)
 8015b96:	fba3 1302 	umull	r1, r3, r3, r2
 8015b9a:	08db      	lsrs	r3, r3, #3
 8015b9c:	4619      	mov	r1, r3
 8015b9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015ba2:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8015ba6:	3330      	adds	r3, #48	@ 0x30
 8015ba8:	f800 3d01 	strb.w	r3, [r0, #-1]!
        n /= 10;
 8015bac:	460a      	mov	r2, r1
    else while (n) {
 8015bae:	2a00      	cmp	r2, #0
 8015bb0:	d1f0      	bne.n	8015b94 <uitoa+0x14>
    }

    return bptr;
}
 8015bb2:	4770      	bx	lr
    *--bptr = '\0';
 8015bb4:	4802      	ldr	r0, [pc, #8]	@ (8015bc0 <uitoa+0x40>)
 8015bb6:	e7fa      	b.n	8015bae <uitoa+0x2e>
 8015bb8:	20001e08 	.word	0x20001e08
 8015bbc:	cccccccd 	.word	0xcccccccd
 8015bc0:	20001e16 	.word	0x20001e16

08015bc4 <ftoa>:

// Convert float to string by immediately converting to integers.
// Number of decimal places, which are tracked by a counter, must be set by the user.
// The integers is then efficiently converted to a string.
char *ftoa (float n, uint8_t decimal_places)
{
 8015bc4:	b410      	push	{r4}
    bool isNegative;
    char *bptr = buf + sizeof(buf);

    *--bptr = '\0';
 8015bc6:	4b38      	ldr	r3, [pc, #224]	@ (8015ca8 <ftoa+0xe4>)
 8015bc8:	2200      	movs	r2, #0
 8015bca:	739a      	strb	r2, [r3, #14]

    if ((isNegative = n < 0.0f))
 8015bcc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bd4:	d413      	bmi.n	8015bfe <ftoa+0x3a>
 8015bd6:	eeb0 7a40 	vmov.f32	s14, s0
        n = -n;

    n += froundvalues[decimal_places];
 8015bda:	4b34      	ldr	r3, [pc, #208]	@ (8015cac <ftoa+0xe8>)
 8015bdc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8015be0:	edd3 7a00 	vldr	s15, [r3]
 8015be4:	ee77 7a87 	vadd.f32	s15, s15, s14

    uint32_t a = (uint32_t)n;
 8015be8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8015bec:	ee17 1a10 	vmov	r1, s14

    if (decimal_places) {
 8015bf0:	b390      	cbz	r0, 8015c58 <ftoa+0x94>

        n -= (float)a;
 8015bf2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8015bf6:	ee77 7ac7 	vsub.f32	s15, s15, s14

        uint_fast8_t decimals = decimal_places;
 8015bfa:	4603      	mov	r3, r0
        while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8015bfc:	e007      	b.n	8015c0e <ftoa+0x4a>
        n = -n;
 8015bfe:	eeb1 7a40 	vneg.f32	s14, s0
 8015c02:	e7ea      	b.n	8015bda <ftoa+0x16>
            n *= 100.0f;
 8015c04:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8015cb0 <ftoa+0xec>
 8015c08:	ee67 7a87 	vmul.f32	s15, s15, s14
            decimals -= 2;
 8015c0c:	3b02      	subs	r3, #2
        while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8015c0e:	2b01      	cmp	r3, #1
 8015c10:	d8f8      	bhi.n	8015c04 <ftoa+0x40>
        }

        if (decimals)
 8015c12:	b11b      	cbz	r3, 8015c1c <ftoa+0x58>
            n *= 10.0f;
 8015c14:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8015c18:	ee67 7a87 	vmul.f32	s15, s15, s14

        uint32_t b = (uint32_t)n;
 8015c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015c20:	ee17 2a90 	vmov	r2, s15
    *--bptr = '\0';
 8015c24:	4c23      	ldr	r4, [pc, #140]	@ (8015cb4 <ftoa+0xf0>)

        while(decimal_places--) {
 8015c26:	e003      	b.n	8015c30 <ftoa+0x6c>
            if(b) {
                *--bptr = (b % 10) + '0'; // Get digit
                b /= 10;
            } else
                *--bptr = '0';
 8015c28:	2330      	movs	r3, #48	@ 0x30
 8015c2a:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8015c2e:	4660      	mov	r0, ip
        while(decimal_places--) {
 8015c30:	1e43      	subs	r3, r0, #1
 8015c32:	fa5f fc83 	uxtb.w	ip, r3
 8015c36:	b180      	cbz	r0, 8015c5a <ftoa+0x96>
            if(b) {
 8015c38:	2a00      	cmp	r2, #0
 8015c3a:	d0f5      	beq.n	8015c28 <ftoa+0x64>
                *--bptr = (b % 10) + '0'; // Get digit
 8015c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8015cb8 <ftoa+0xf4>)
 8015c3e:	fba3 0302 	umull	r0, r3, r3, r2
 8015c42:	08db      	lsrs	r3, r3, #3
 8015c44:	4618      	mov	r0, r3
 8015c46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015c4a:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8015c4e:	3330      	adds	r3, #48	@ 0x30
 8015c50:	f804 3d01 	strb.w	r3, [r4, #-1]!
                b /= 10;
 8015c54:	4602      	mov	r2, r0
 8015c56:	e7ea      	b.n	8015c2e <ftoa+0x6a>
    *--bptr = '\0';
 8015c58:	4c16      	ldr	r4, [pc, #88]	@ (8015cb4 <ftoa+0xf0>)
        }
    }

    *--bptr = '.'; // Always add decimal point (TODO: is this really needed?)
 8015c5a:	1e60      	subs	r0, r4, #1
 8015c5c:	232e      	movs	r3, #46	@ 0x2e
 8015c5e:	f804 3c01 	strb.w	r3, [r4, #-1]

    if(a == 0)
 8015c62:	b9c1      	cbnz	r1, 8015c96 <ftoa+0xd2>
        *--bptr = '0';
 8015c64:	1ea0      	subs	r0, r4, #2
 8015c66:	2330      	movs	r3, #48	@ 0x30
 8015c68:	f804 3c02 	strb.w	r3, [r4, #-2]
    else while(a) {
        *--bptr = (a % 10) + '0'; // Get digit
        a /= 10;
    }

    if(isNegative)
 8015c6c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c74:	d412      	bmi.n	8015c9c <ftoa+0xd8>
        *--bptr = '-';

    return bptr;
}
 8015c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c7a:	4770      	bx	lr
        *--bptr = (a % 10) + '0'; // Get digit
 8015c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8015cb8 <ftoa+0xf4>)
 8015c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8015c82:	08db      	lsrs	r3, r3, #3
 8015c84:	461a      	mov	r2, r3
 8015c86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015c8a:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 8015c8e:	3330      	adds	r3, #48	@ 0x30
 8015c90:	f800 3d01 	strb.w	r3, [r0, #-1]!
        a /= 10;
 8015c94:	4611      	mov	r1, r2
    else while(a) {
 8015c96:	2900      	cmp	r1, #0
 8015c98:	d1f0      	bne.n	8015c7c <ftoa+0xb8>
 8015c9a:	e7e7      	b.n	8015c6c <ftoa+0xa8>
        *--bptr = '-';
 8015c9c:	232d      	movs	r3, #45	@ 0x2d
 8015c9e:	f800 3c01 	strb.w	r3, [r0, #-1]
 8015ca2:	3801      	subs	r0, #1
    return bptr;
 8015ca4:	e7e7      	b.n	8015c76 <ftoa+0xb2>
 8015ca6:	bf00      	nop
 8015ca8:	20001e08 	.word	0x20001e08
 8015cac:	0802bfa8 	.word	0x0802bfa8
 8015cb0:	42c80000 	.word	0x42c80000
 8015cb4:	20001e16 	.word	0x20001e16
 8015cb8:	cccccccd 	.word	0xcccccccd

08015cbc <trim_float>:

// Trim trailing zeros and possibly decimal point
char *trim_float (char *s)
{
 8015cbc:	b510      	push	{r4, lr}
 8015cbe:	4604      	mov	r4, r0
    if(strchr(s, '.')) {
 8015cc0:	212e      	movs	r1, #46	@ 0x2e
 8015cc2:	f00f f947 	bl	8024f54 <strchr>
 8015cc6:	b168      	cbz	r0, 8015ce4 <trim_float+0x28>
        char *s2 = strchr(s, '\0') - 1;
 8015cc8:	4620      	mov	r0, r4
 8015cca:	f7f2 fa19 	bl	8008100 <strlen>
 8015cce:	1e43      	subs	r3, r0, #1
 8015cd0:	4423      	add	r3, r4
        while(*s2 == '0')
 8015cd2:	e002      	b.n	8015cda <trim_float+0x1e>
            *s2-- = '\0';
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	f803 2901 	strb.w	r2, [r3], #-1
        while(*s2 == '0')
 8015cda:	781a      	ldrb	r2, [r3, #0]
 8015cdc:	2a30      	cmp	r2, #48	@ 0x30
 8015cde:	d0f9      	beq.n	8015cd4 <trim_float+0x18>
        if(*s2 == '.')
 8015ce0:	2a2e      	cmp	r2, #46	@ 0x2e
 8015ce2:	d001      	beq.n	8015ce8 <trim_float+0x2c>
            *s2 = '\0';
    }

    return s;
}
 8015ce4:	4620      	mov	r0, r4
 8015ce6:	bd10      	pop	{r4, pc}
            *s2 = '\0';
 8015ce8:	2200      	movs	r2, #0
 8015cea:	701a      	strb	r2, [r3, #0]
 8015cec:	e7fa      	b.n	8015ce4 <trim_float+0x28>
	...

08015cf0 <read_uint>:

// Extracts an unsigned integer value from a string.
status_code_t read_uint (char *line, uint_fast8_t *char_counter, uint32_t *uint_ptr)
{
 8015cf0:	b570      	push	{r4, r5, r6, lr}
    char *ptr = line + *char_counter;
 8015cf2:	680b      	ldr	r3, [r1, #0]
 8015cf4:	18c4      	adds	r4, r0, r3
    uint_fast8_t ndigit = 0, c;
    uint32_t intval = 0;
    bool isdecimal = false, ok = false;

    // Grab first character and increment pointer. No spaces assumed in line.
    c = *ptr++;
 8015cf6:	5cc3      	ldrb	r3, [r0, r3]

    if (c == '-')
 8015cf8:	2b2d      	cmp	r3, #45	@ 0x2d
 8015cfa:	d03b      	beq.n	8015d74 <read_uint+0x84>
 8015cfc:	f104 0c01 	add.w	ip, r4, #1
        return Status_NegativeValue;

    // Skip initial sign character
    if (c == '+')
 8015d00:	2b2b      	cmp	r3, #43	@ 0x2b
 8015d02:	d004      	beq.n	8015d0e <read_uint+0x1e>

    // Extract number into fast integer. Track decimal in terms of exponent value.
    while(c) {
        c -= '0';
        if (c <= 9) {
            ok = true;
 8015d04:	2600      	movs	r6, #0
 8015d06:	4635      	mov	r5, r6
 8015d08:	4634      	mov	r4, r6
 8015d0a:	46b6      	mov	lr, r6
 8015d0c:	e019      	b.n	8015d42 <read_uint+0x52>
        c = *ptr++;
 8015d0e:	f104 0c02 	add.w	ip, r4, #2
 8015d12:	7863      	ldrb	r3, [r4, #1]
 8015d14:	e7f6      	b.n	8015d04 <read_uint+0x14>
            if(!isdecimal && (c != 0 || intval))
                ndigit++;
            if (isdecimal && c != 0)
 8015d16:	bb7b      	cbnz	r3, 8015d78 <read_uint+0x88>
                return Status_GcodeCommandValueNotInteger;

            if ((ndigit <= 9 || c <= 4) && intval <= 429496729) {
 8015d18:	f1be 0f09 	cmp.w	lr, #9
 8015d1c:	d901      	bls.n	8015d22 <read_uint+0x32>
 8015d1e:	2b04      	cmp	r3, #4
 8015d20:	d81b      	bhi.n	8015d5a <read_uint+0x6a>
 8015d22:	4e17      	ldr	r6, [pc, #92]	@ (8015d80 <read_uint+0x90>)
 8015d24:	42b4      	cmp	r4, r6
 8015d26:	d81a      	bhi.n	8015d5e <read_uint+0x6e>
                intval = (((intval << 2) + intval) << 1) + c; // intval * 10 + c
 8015d28:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8015d2c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
            ok = true;
 8015d30:	2601      	movs	r6, #1
                intval = (((intval << 2) + intval) << 1) + c; // intval * 10 + c
 8015d32:	e004      	b.n	8015d3e <read_uint+0x4e>
            } else if (!isdecimal)
                exp++;  // Drop overflow digits
        } else if (c == (uint_fast8_t)('.' - '0') && !isdecimal)
 8015d34:	f113 0f02 	cmn.w	r3, #2
 8015d38:	d113      	bne.n	8015d62 <read_uint+0x72>
 8015d3a:	b995      	cbnz	r5, 8015d62 <read_uint+0x72>
            isdecimal = true;
 8015d3c:	2501      	movs	r5, #1
         else
            break;

        c = *ptr++;
 8015d3e:	f81c 3b01 	ldrb.w	r3, [ip], #1
    while(c) {
 8015d42:	b173      	cbz	r3, 8015d62 <read_uint+0x72>
        c -= '0';
 8015d44:	3b30      	subs	r3, #48	@ 0x30
        if (c <= 9) {
 8015d46:	2b09      	cmp	r3, #9
 8015d48:	d8f4      	bhi.n	8015d34 <read_uint+0x44>
            if(!isdecimal && (c != 0 || intval))
 8015d4a:	2d00      	cmp	r5, #0
 8015d4c:	d1e3      	bne.n	8015d16 <read_uint+0x26>
 8015d4e:	b90b      	cbnz	r3, 8015d54 <read_uint+0x64>
 8015d50:	2c00      	cmp	r4, #0
 8015d52:	d0e1      	beq.n	8015d18 <read_uint+0x28>
                ndigit++;
 8015d54:	f10e 0e01 	add.w	lr, lr, #1
 8015d58:	e7de      	b.n	8015d18 <read_uint+0x28>
            ok = true;
 8015d5a:	2601      	movs	r6, #1
 8015d5c:	e7ef      	b.n	8015d3e <read_uint+0x4e>
 8015d5e:	2601      	movs	r6, #1
 8015d60:	e7ed      	b.n	8015d3e <read_uint+0x4e>
    }

    // Return if no digits have been read.

    if (!ok)
 8015d62:	b15e      	cbz	r6, 8015d7c <read_uint+0x8c>
        return Status_BadNumberFormat;

    *uint_ptr = intval; // Assign value.
 8015d64:	6014      	str	r4, [r2, #0]
    *char_counter = ptr - line - 1; // Set char_counter to next statement
 8015d66:	ebac 0c00 	sub.w	ip, ip, r0
 8015d6a:	f10c 33ff 	add.w	r3, ip, #4294967295
 8015d6e:	600b      	str	r3, [r1, #0]

    return Status_OK;
 8015d70:	2000      	movs	r0, #0
}
 8015d72:	bd70      	pop	{r4, r5, r6, pc}
        return Status_NegativeValue;
 8015d74:	2004      	movs	r0, #4
 8015d76:	e7fc      	b.n	8015d72 <read_uint+0x82>
                return Status_GcodeCommandValueNotInteger;
 8015d78:	2017      	movs	r0, #23
 8015d7a:	e7fa      	b.n	8015d72 <read_uint+0x82>
        return Status_BadNumberFormat;
 8015d7c:	2002      	movs	r0, #2
 8015d7e:	e7f8      	b.n	8015d72 <read_uint+0x82>
 8015d80:	19999999 	.word	0x19999999

08015d84 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
bool read_float (char *line, uint_fast8_t *char_counter, float *float_ptr)
{
 8015d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d88:	4607      	mov	r7, r0
    char *ptr = line + *char_counter;
 8015d8a:	6808      	ldr	r0, [r1, #0]
 8015d8c:	183b      	adds	r3, r7, r0
    uint_fast8_t ndigit = 0, c;
    uint32_t intval = 0;
    bool isnegative, isdecimal = false, ok = false;

    // Grab first character and increment pointer. No spaces assumed in line.
    c = *ptr++;
 8015d8e:	f817 8000 	ldrb.w	r8, [r7, r0]

    // Capture initial sign character
    if ((isnegative = (c == '-')) || c == '+')
 8015d92:	f1b8 0f2d 	cmp.w	r8, #45	@ 0x2d
 8015d96:	d006      	beq.n	8015da6 <read_float+0x22>
 8015d98:	f103 0c01 	add.w	ip, r3, #1
 8015d9c:	f1b8 0f2b 	cmp.w	r8, #43	@ 0x2b
 8015da0:	d001      	beq.n	8015da6 <read_float+0x22>
    c = *ptr++;
 8015da2:	4643      	mov	r3, r8
 8015da4:	e002      	b.n	8015dac <read_float+0x28>
        c = *ptr++;
 8015da6:	f103 0c02 	add.w	ip, r3, #2
 8015daa:	785b      	ldrb	r3, [r3, #1]
    c = *ptr++;
 8015dac:	2000      	movs	r0, #0
 8015dae:	4605      	mov	r5, r0
 8015db0:	4604      	mov	r4, r0
 8015db2:	4606      	mov	r6, r0
 8015db4:	4686      	mov	lr, r0
 8015db6:	e00b      	b.n	8015dd0 <read_float+0x4c>
                ndigit++;
            if (ndigit <= MAX_INT_DIGITS) {
                if (isdecimal)
                    exp--;
                intval = (((intval << 2) + intval) << 1) + c; // intval * 10 + c
            } else if (!isdecimal)
 8015db8:	b9e5      	cbnz	r5, 8015df4 <read_float+0x70>
                exp++;  // Drop overflow digits
 8015dba:	f10e 0e01 	add.w	lr, lr, #1
            ok = true;
 8015dbe:	2001      	movs	r0, #1
 8015dc0:	e004      	b.n	8015dcc <read_float+0x48>
        } else if (c == (uint_fast8_t)('.' - '0') && !isdecimal)
 8015dc2:	f113 0f02 	cmn.w	r3, #2
 8015dc6:	d117      	bne.n	8015df8 <read_float+0x74>
 8015dc8:	b9b5      	cbnz	r5, 8015df8 <read_float+0x74>
            isdecimal = true;
 8015dca:	2501      	movs	r5, #1
         else
            break;

        c = *ptr++;
 8015dcc:	f81c 3b01 	ldrb.w	r3, [ip], #1
    while(c) {
 8015dd0:	b193      	cbz	r3, 8015df8 <read_float+0x74>
        c -= '0';
 8015dd2:	3b30      	subs	r3, #48	@ 0x30
        if (c <= 9) {
 8015dd4:	2b09      	cmp	r3, #9
 8015dd6:	d8f4      	bhi.n	8015dc2 <read_float+0x3e>
            if(c != 0 || intval)
 8015dd8:	b903      	cbnz	r3, 8015ddc <read_float+0x58>
 8015dda:	b104      	cbz	r4, 8015dde <read_float+0x5a>
                ndigit++;
 8015ddc:	3601      	adds	r6, #1
            if (ndigit <= MAX_INT_DIGITS) {
 8015dde:	2e09      	cmp	r6, #9
 8015de0:	d8ea      	bhi.n	8015db8 <read_float+0x34>
                if (isdecimal)
 8015de2:	b10d      	cbz	r5, 8015de8 <read_float+0x64>
                    exp--;
 8015de4:	f10e 3eff 	add.w	lr, lr, #4294967295
                intval = (((intval << 2) + intval) << 1) + c; // intval * 10 + c
 8015de8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8015dec:	eb03 0444 	add.w	r4, r3, r4, lsl #1
            ok = true;
 8015df0:	2001      	movs	r0, #1
 8015df2:	e7eb      	b.n	8015dcc <read_float+0x48>
 8015df4:	4628      	mov	r0, r5
 8015df6:	e7e9      	b.n	8015dcc <read_float+0x48>
    }

    // Return if no digits have been read.
    if (!ok)
 8015df8:	b190      	cbz	r0, 8015e20 <read_float+0x9c>
        return false;

    // Convert integer into floating point.
    float fval = (float)intval;
 8015dfa:	ee07 4a90 	vmov	s15, r4
 8015dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15

    // Apply decimal. Should perform no more than two floating point multiplications for the
    // expected range of E0 to E-4.
    if (fval != 0.0f) {
 8015e02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e0a:	d10b      	bne.n	8015e24 <read_float+0xa0>
            fval *= 10.0f;
        } while (--exp > 0);
    }

    // Assign floating point value with correct sign.
    *float_ptr = isnegative ? - fval : fval;
 8015e0c:	f1b8 0f2d 	cmp.w	r8, #45	@ 0x2d
 8015e10:	d027      	beq.n	8015e62 <read_float+0xde>
 8015e12:	edc2 7a00 	vstr	s15, [r2]
    *char_counter = ptr - line - 1; // Set char_counter to next statement
 8015e16:	ebac 0c07 	sub.w	ip, ip, r7
 8015e1a:	f10c 33ff 	add.w	r3, ip, #4294967295
 8015e1e:	600b      	str	r3, [r1, #0]

    return true;
}
 8015e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (exp <= -2) {
 8015e24:	f1be 3fff 	cmp.w	lr, #4294967295
 8015e28:	da06      	bge.n	8015e38 <read_float+0xb4>
            fval *= 0.01f;
 8015e2a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8015e68 <read_float+0xe4>
 8015e2e:	ee67 7a87 	vmul.f32	s15, s15, s14
            exp += 2;
 8015e32:	f10e 0e02 	add.w	lr, lr, #2
 8015e36:	e7f5      	b.n	8015e24 <read_float+0xa0>
        if (exp < 0)
 8015e38:	f1be 0f00 	cmp.w	lr, #0
 8015e3c:	db0c      	blt.n	8015e58 <read_float+0xd4>
        else if (exp > 0) do {
 8015e3e:	f1be 0f00 	cmp.w	lr, #0
 8015e42:	dde3      	ble.n	8015e0c <read_float+0x88>
            fval *= 10.0f;
 8015e44:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8015e48:	ee67 7a87 	vmul.f32	s15, s15, s14
        } while (--exp > 0);
 8015e4c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015e50:	f1be 0f00 	cmp.w	lr, #0
 8015e54:	dcf6      	bgt.n	8015e44 <read_float+0xc0>
 8015e56:	e7d9      	b.n	8015e0c <read_float+0x88>
            fval *= 0.1f;
 8015e58:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8015e6c <read_float+0xe8>
 8015e5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015e60:	e7d4      	b.n	8015e0c <read_float+0x88>
    *float_ptr = isnegative ? - fval : fval;
 8015e62:	eef1 7a67 	vneg.f32	s15, s15
 8015e66:	e7d4      	b.n	8015e12 <read_float+0x8e>
 8015e68:	3c23d70a 	.word	0x3c23d70a
 8015e6c:	3dcccccd 	.word	0x3dcccccd

08015e70 <isintf>:

// Returns true if float value is a whole number (integer)
bool isintf (float value)
{
 8015e70:	b508      	push	{r3, lr}
 8015e72:	ed2d 8b02 	vpush	{d8}
 8015e76:	eeb0 8a40 	vmov.f32	s16, s0
    return value != NAN && fabsf(value - truncf(value)) < 0.001f;
 8015e7a:	f011 ff6d 	bl	8027d58 <truncf>
 8015e7e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8015e82:	eeb0 8ac8 	vabs.f32	s16, s16
 8015e86:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8015ea0 <isintf+0x30>
 8015e8a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 8015e92:	bf4c      	ite	mi
 8015e94:	2001      	movmi	r0, #1
 8015e96:	2000      	movpl	r0, #0
 8015e98:	ecbd 8b02 	vpop	{d8}
 8015e9c:	bd08      	pop	{r3, pc}
 8015e9e:	bf00      	nop
 8015ea0:	3a83126f 	.word	0x3a83126f

08015ea4 <delay_sec>:

// Non-blocking delay function used for general operation and suspend features.
bool delay_sec (float seconds, delaymode_t mode)
{
 8015ea4:	b570      	push	{r4, r5, r6, lr}
 8015ea6:	4606      	mov	r6, r0
    bool ok = true;

    uint_fast16_t i = (uint_fast16_t)ceilf((1000.0f / DWELL_TIME_STEP) * seconds) + 1;
 8015ea8:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 8015eac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015eb0:	f011 fea8 	bl	8027c04 <ceilf>
 8015eb4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8015eb8:	ee10 5a10 	vmov	r5, s0
 8015ebc:	3501      	adds	r5, #1
    bool ok = true;
 8015ebe:	2401      	movs	r4, #1

    while(--i && ok) {
 8015ec0:	e00d      	b.n	8015ede <delay_sec+0x3a>
        if(mode == DelayMode_Dwell)
            ok = protocol_execute_realtime();
        else // DelayMode_SysSuspende, xecute rt_system() only to avoid nesting suspend loops.
            ok = protocol_exec_rt_system() && !state_door_reopened(); // Bail, if safety door reopens.
 8015ec2:	f001 fa91 	bl	80173e8 <protocol_exec_rt_system>
 8015ec6:	4604      	mov	r4, r0
 8015ec8:	b188      	cbz	r0, 8015eee <delay_sec+0x4a>
 8015eca:	f009 f907 	bl	801f0dc <state_door_reopened>
 8015ece:	b108      	cbz	r0, 8015ed4 <delay_sec+0x30>
 8015ed0:	2400      	movs	r4, #0
 8015ed2:	e00c      	b.n	8015eee <delay_sec+0x4a>
        if(ok)
            hal.delay_ms(DWELL_TIME_STEP, NULL); // Delay DWELL_TIME_STEP increment
 8015ed4:	4b08      	ldr	r3, [pc, #32]	@ (8015ef8 <delay_sec+0x54>)
 8015ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ed8:	2100      	movs	r1, #0
 8015eda:	2032      	movs	r0, #50	@ 0x32
 8015edc:	4798      	blx	r3
    while(--i && ok) {
 8015ede:	3d01      	subs	r5, #1
 8015ee0:	d008      	beq.n	8015ef4 <delay_sec+0x50>
 8015ee2:	b13c      	cbz	r4, 8015ef4 <delay_sec+0x50>
        if(mode == DelayMode_Dwell)
 8015ee4:	2e00      	cmp	r6, #0
 8015ee6:	d1ec      	bne.n	8015ec2 <delay_sec+0x1e>
            ok = protocol_execute_realtime();
 8015ee8:	f001 fda6 	bl	8017a38 <protocol_execute_realtime>
 8015eec:	4604      	mov	r4, r0
        if(ok)
 8015eee:	2c00      	cmp	r4, #0
 8015ef0:	d0f5      	beq.n	8015ede <delay_sec+0x3a>
 8015ef2:	e7ef      	b.n	8015ed4 <delay_sec+0x30>
    }

    return ok;
}
 8015ef4:	4620      	mov	r0, r4
 8015ef6:	bd70      	pop	{r4, r5, r6, pc}
 8015ef8:	200018dc 	.word	0x200018dc

08015efc <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector (float *vector)
{
 8015efc:	b510      	push	{r4, lr}
 8015efe:	4604      	mov	r4, r0
    uint_fast8_t idx = N_AXIS;
    float magnitude = 0.0f, inv_magnitude;
 8015f00:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8015f50 <convert_delta_vector_to_unit_vector+0x54>
    uint_fast8_t idx = N_AXIS;
 8015f04:	2303      	movs	r3, #3
 8015f06:	e004      	b.n	8015f12 <convert_delta_vector_to_unit_vector+0x16>

    do {
        if (vector[--idx] != 0.0f)
            magnitude += vector[idx] * vector[idx];
 8015f08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015f0c:	ee30 0a27 	vadd.f32	s0, s0, s15
    } while(idx);
 8015f10:	b153      	cbz	r3, 8015f28 <convert_delta_vector_to_unit_vector+0x2c>
        if (vector[--idx] != 0.0f)
 8015f12:	3b01      	subs	r3, #1
 8015f14:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015f18:	edd2 7a00 	vldr	s15, [r2]
 8015f1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f24:	d0f4      	beq.n	8015f10 <convert_delta_vector_to_unit_vector+0x14>
 8015f26:	e7ef      	b.n	8015f08 <convert_delta_vector_to_unit_vector+0xc>

    idx = N_AXIS;
    magnitude = sqrtf(magnitude);
 8015f28:	f011 fd5e 	bl	80279e8 <sqrtf>
    inv_magnitude = 1.0f / magnitude;
 8015f2c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015f30:	ee87 7a80 	vdiv.f32	s14, s15, s0
    idx = N_AXIS;
 8015f34:	2303      	movs	r3, #3

    do {
        vector[--idx] *= inv_magnitude;
 8015f36:	3b01      	subs	r3, #1
 8015f38:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015f3c:	edd2 7a00 	vldr	s15, [r2]
 8015f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015f44:	edc2 7a00 	vstr	s15, [r2]
    } while(idx);
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d1f4      	bne.n	8015f36 <convert_delta_vector_to_unit_vector+0x3a>

    return magnitude;
}
 8015f4c:	bd10      	pop	{r4, pc}
 8015f4e:	bf00      	nop
 8015f50:	00000000 	.word	0x00000000

08015f54 <get_datetime>:

// parse ISO8601 datetime: YYYY-MM-DDTHH:MM:SSZxxx
struct tm *get_datetime (const char *s)
{
 8015f54:	b570      	push	{r4, r5, r6, lr}
 8015f56:	4604      	mov	r4, r0
    PROGMEM static const uint8_t mdays[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

    char *s1 = (char *)s, c;
    uint_fast16_t idx = 0, value = 0;

    memset(&dt, 0, sizeof(struct tm));
 8015f58:	4d49      	ldr	r5, [pc, #292]	@ (8016080 <get_datetime+0x12c>)
 8015f5a:	2224      	movs	r2, #36	@ 0x24
 8015f5c:	2100      	movs	r1, #0
 8015f5e:	4628      	mov	r0, r5
 8015f60:	f00e ffe1 	bl	8024f26 <memset>
    dt.tm_year = dt.tm_mon = dt.tm_mday = dt.tm_hour = dt.tm_min = dt.tm_sec = -1;
 8015f64:	f04f 33ff 	mov.w	r3, #4294967295
 8015f68:	602b      	str	r3, [r5, #0]
 8015f6a:	606b      	str	r3, [r5, #4]
 8015f6c:	60ab      	str	r3, [r5, #8]
 8015f6e:	60eb      	str	r3, [r5, #12]
 8015f70:	612b      	str	r3, [r5, #16]
 8015f72:	616b      	str	r3, [r5, #20]
    uint_fast16_t idx = 0, value = 0;
 8015f74:	2200      	movs	r2, #0
 8015f76:	4611      	mov	r1, r2
 8015f78:	e005      	b.n	8015f86 <get_datetime+0x32>

    do {
        c = *s1++;

        if(isdigit(c))
            value = (value * 10) + c - '0';
 8015f7a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8015f7e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8015f82:	3a30      	subs	r2, #48	@ 0x30
                    break;
            }
            idx++;
            value = 0;
        }
    } while(c);
 8015f84:	b1c3      	cbz	r3, 8015fb8 <get_datetime+0x64>
        c = *s1++;
 8015f86:	7823      	ldrb	r3, [r4, #0]
 8015f88:	3401      	adds	r4, #1
        if(isdigit(c))
 8015f8a:	483e      	ldr	r0, [pc, #248]	@ (8016084 <get_datetime+0x130>)
 8015f8c:	5cc0      	ldrb	r0, [r0, r3]
 8015f8e:	f010 0f04 	tst.w	r0, #4
 8015f92:	d1f2      	bne.n	8015f7a <get_datetime+0x26>
        else if(!(c == '-' || c == ':' || c == 'T' || c == 'Z' || c == '\0'))
 8015f94:	2b54      	cmp	r3, #84	@ 0x54
 8015f96:	d004      	beq.n	8015fa2 <get_datetime+0x4e>
 8015f98:	d80a      	bhi.n	8015fb0 <get_datetime+0x5c>
 8015f9a:	2b2d      	cmp	r3, #45	@ 0x2d
 8015f9c:	d001      	beq.n	8015fa2 <get_datetime+0x4e>
 8015f9e:	2b3a      	cmp	r3, #58	@ 0x3a
 8015fa0:	d108      	bne.n	8015fb4 <get_datetime+0x60>
            switch(idx) {
 8015fa2:	2905      	cmp	r1, #5
 8015fa4:	d81a      	bhi.n	8015fdc <get_datetime+0x88>
 8015fa6:	e8df f001 	tbb	[pc, r1]
 8015faa:	2917      	.short	0x2917
 8015fac:	5f585133 	.word	0x5f585133
 8015fb0:	2b5a      	cmp	r3, #90	@ 0x5a
 8015fb2:	d0f6      	beq.n	8015fa2 <get_datetime+0x4e>
        else if(!(c == '-' || c == ':' || c == 'T' || c == 'Z' || c == '\0'))
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d0f4      	beq.n	8015fa2 <get_datetime+0x4e>

    return (dt.tm_year | dt.tm_mon | dt.tm_mday | dt.tm_hour | dt.tm_min | dt.tm_sec) > 0 ? &dt : NULL;
 8015fb8:	4a31      	ldr	r2, [pc, #196]	@ (8016080 <get_datetime+0x12c>)
 8015fba:	6953      	ldr	r3, [r2, #20]
 8015fbc:	6911      	ldr	r1, [r2, #16]
 8015fbe:	430b      	orrs	r3, r1
 8015fc0:	68d1      	ldr	r1, [r2, #12]
 8015fc2:	430b      	orrs	r3, r1
 8015fc4:	6891      	ldr	r1, [r2, #8]
 8015fc6:	430b      	orrs	r3, r1
 8015fc8:	6851      	ldr	r1, [r2, #4]
 8015fca:	430b      	orrs	r3, r1
 8015fcc:	6812      	ldr	r2, [r2, #0]
 8015fce:	4313      	orrs	r3, r2
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	dd52      	ble.n	801607a <get_datetime+0x126>
 8015fd4:	482a      	ldr	r0, [pc, #168]	@ (8016080 <get_datetime+0x12c>)
}
 8015fd6:	bd70      	pop	{r4, r5, r6, pc}
                    if(c == '-' && value >= 1970 && value <= 2099)
 8015fd8:	2b2d      	cmp	r3, #45	@ 0x2d
 8015fda:	d002      	beq.n	8015fe2 <get_datetime+0x8e>
            idx++;
 8015fdc:	3101      	adds	r1, #1
            value = 0;
 8015fde:	2200      	movs	r2, #0
 8015fe0:	e7d0      	b.n	8015f84 <get_datetime+0x30>
                    if(c == '-' && value >= 1970 && value <= 2099)
 8015fe2:	f240 70b1 	movw	r0, #1969	@ 0x7b1
 8015fe6:	4282      	cmp	r2, r0
 8015fe8:	d9f8      	bls.n	8015fdc <get_datetime+0x88>
 8015fea:	f640 0033 	movw	r0, #2099	@ 0x833
 8015fee:	4282      	cmp	r2, r0
 8015ff0:	d8f4      	bhi.n	8015fdc <get_datetime+0x88>
                        dt.tm_year = value - 1900;
 8015ff2:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
 8015ff6:	4822      	ldr	r0, [pc, #136]	@ (8016080 <get_datetime+0x12c>)
 8015ff8:	6142      	str	r2, [r0, #20]
 8015ffa:	e7ef      	b.n	8015fdc <get_datetime+0x88>
                    if(c == '-' && value >= 1 && value <= 12)
 8015ffc:	2b2d      	cmp	r3, #45	@ 0x2d
 8015ffe:	d1ed      	bne.n	8015fdc <get_datetime+0x88>
 8016000:	2a00      	cmp	r2, #0
 8016002:	d0eb      	beq.n	8015fdc <get_datetime+0x88>
 8016004:	2a0c      	cmp	r2, #12
 8016006:	d8e9      	bhi.n	8015fdc <get_datetime+0x88>
                        dt.tm_mon = value - 1;
 8016008:	3a01      	subs	r2, #1
 801600a:	481d      	ldr	r0, [pc, #116]	@ (8016080 <get_datetime+0x12c>)
 801600c:	6102      	str	r2, [r0, #16]
 801600e:	e7e5      	b.n	8015fdc <get_datetime+0x88>
                    if(c == 'T' && value >= 1 && value <= (mdays[dt.tm_mon >= 0 ? dt.tm_mon : 0] + (dt.tm_mon == 1 && dt.tm_year != 100 && (dt.tm_year % 4) == 0 ? 1 : 0)))
 8016010:	2b54      	cmp	r3, #84	@ 0x54
 8016012:	d1e3      	bne.n	8015fdc <get_datetime+0x88>
 8016014:	2a00      	cmp	r2, #0
 8016016:	d0e1      	beq.n	8015fdc <get_datetime+0x88>
 8016018:	4819      	ldr	r0, [pc, #100]	@ (8016080 <get_datetime+0x12c>)
 801601a:	6900      	ldr	r0, [r0, #16]
 801601c:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
 8016020:	4e19      	ldr	r6, [pc, #100]	@ (8016088 <get_datetime+0x134>)
 8016022:	5d75      	ldrb	r5, [r6, r5]
 8016024:	2801      	cmp	r0, #1
 8016026:	d006      	beq.n	8016036 <get_datetime+0xe2>
 8016028:	2000      	movs	r0, #0
 801602a:	4428      	add	r0, r5
 801602c:	4290      	cmp	r0, r2
 801602e:	d3d5      	bcc.n	8015fdc <get_datetime+0x88>
                        dt.tm_mday = value;
 8016030:	4813      	ldr	r0, [pc, #76]	@ (8016080 <get_datetime+0x12c>)
 8016032:	60c2      	str	r2, [r0, #12]
 8016034:	e7d2      	b.n	8015fdc <get_datetime+0x88>
                    if(c == 'T' && value >= 1 && value <= (mdays[dt.tm_mon >= 0 ? dt.tm_mon : 0] + (dt.tm_mon == 1 && dt.tm_year != 100 && (dt.tm_year % 4) == 0 ? 1 : 0)))
 8016036:	4e12      	ldr	r6, [pc, #72]	@ (8016080 <get_datetime+0x12c>)
 8016038:	6976      	ldr	r6, [r6, #20]
 801603a:	2e64      	cmp	r6, #100	@ 0x64
 801603c:	d004      	beq.n	8016048 <get_datetime+0xf4>
 801603e:	f016 0f03 	tst.w	r6, #3
 8016042:	d0f2      	beq.n	801602a <get_datetime+0xd6>
 8016044:	2000      	movs	r0, #0
 8016046:	e7f0      	b.n	801602a <get_datetime+0xd6>
 8016048:	2000      	movs	r0, #0
 801604a:	e7ee      	b.n	801602a <get_datetime+0xd6>
                    if(c == ':' && value <= 23)
 801604c:	2b3a      	cmp	r3, #58	@ 0x3a
 801604e:	d1c5      	bne.n	8015fdc <get_datetime+0x88>
 8016050:	2a17      	cmp	r2, #23
 8016052:	d8c3      	bhi.n	8015fdc <get_datetime+0x88>
                        dt.tm_hour = value;
 8016054:	480a      	ldr	r0, [pc, #40]	@ (8016080 <get_datetime+0x12c>)
 8016056:	6082      	str	r2, [r0, #8]
 8016058:	e7c0      	b.n	8015fdc <get_datetime+0x88>
                    if(c == ':' && value <= 59)
 801605a:	2b3a      	cmp	r3, #58	@ 0x3a
 801605c:	d1be      	bne.n	8015fdc <get_datetime+0x88>
 801605e:	2a3b      	cmp	r2, #59	@ 0x3b
 8016060:	d8bc      	bhi.n	8015fdc <get_datetime+0x88>
                        dt.tm_min = value;
 8016062:	4807      	ldr	r0, [pc, #28]	@ (8016080 <get_datetime+0x12c>)
 8016064:	6042      	str	r2, [r0, #4]
 8016066:	e7b9      	b.n	8015fdc <get_datetime+0x88>
                    if((c == 'Z' || c == '\0') && value <= 59)
 8016068:	2b5a      	cmp	r3, #90	@ 0x5a
 801606a:	d001      	beq.n	8016070 <get_datetime+0x11c>
 801606c:	2b00      	cmp	r3, #0
 801606e:	d1b5      	bne.n	8015fdc <get_datetime+0x88>
 8016070:	2a3b      	cmp	r2, #59	@ 0x3b
 8016072:	d8b3      	bhi.n	8015fdc <get_datetime+0x88>
                        dt.tm_sec = value;
 8016074:	4802      	ldr	r0, [pc, #8]	@ (8016080 <get_datetime+0x12c>)
 8016076:	6002      	str	r2, [r0, #0]
 8016078:	e7b0      	b.n	8015fdc <get_datetime+0x88>
    return (dt.tm_year | dt.tm_mon | dt.tm_mday | dt.tm_hour | dt.tm_min | dt.tm_sec) > 0 ? &dt : NULL;
 801607a:	2000      	movs	r0, #0
 801607c:	e7ab      	b.n	8015fd6 <get_datetime+0x82>
 801607e:	bf00      	nop
 8016080:	20001de4 	.word	0x20001de4
 8016084:	08031821 	.word	0x08031821
 8016088:	0802bf90 	.word	0x0802bf90

0801608c <calc_checksum>:

// calculate checksum byte for data
uint8_t calc_checksum (uint8_t *data, uint32_t size) {
 801608c:	4603      	mov	r3, r0

    uint8_t checksum = 0;
 801608e:	2000      	movs	r0, #0

    while(size--) {
 8016090:	e008      	b.n	80160a4 <calc_checksum+0x18>
        checksum = (checksum << 1) | (checksum >> 7);
 8016092:	09c2      	lsrs	r2, r0, #7
 8016094:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
        checksum += *(data++);
 8016098:	f813 1b01 	ldrb.w	r1, [r3], #1
 801609c:	fa51 f282 	uxtab	r2, r1, r2
 80160a0:	b2d0      	uxtb	r0, r2
    while(size--) {
 80160a2:	4661      	mov	r1, ip
 80160a4:	f101 3cff 	add.w	ip, r1, #4294967295
 80160a8:	2900      	cmp	r1, #0
 80160aa:	d1f2      	bne.n	8016092 <calc_checksum+0x6>
    }

    return checksum;
}
 80160ac:	4770      	bx	lr

080160ae <dummy_handler>:
}

void dummy_handler (void)
{
    // NOOP
}
 80160ae:	4770      	bx	lr

080160b0 <ram_get_byte>:
    {0, 0, 0} // list termination - do not remove
};

inline static uint8_t ram_get_byte (uint32_t addr)
{
    return nvsbuffer[addr];
 80160b0:	4b01      	ldr	r3, [pc, #4]	@ (80160b8 <ram_get_byte+0x8>)
 80160b2:	681b      	ldr	r3, [r3, #0]
}
 80160b4:	5c18      	ldrb	r0, [r3, r0]
 80160b6:	4770      	bx	lr
 80160b8:	20001e50 	.word	0x20001e50

080160bc <ram_put_byte>:

inline static void ram_put_byte (uint32_t addr, uint8_t new_value)
{
    if(addr == 0)
 80160bc:	4603      	mov	r3, r0
 80160be:	b910      	cbnz	r0, 80160c6 <ram_put_byte+0xa>
        settings_dirty.version = true;
 80160c0:	4a0c      	ldr	r2, [pc, #48]	@ (80160f4 <ram_put_byte+0x38>)
 80160c2:	2001      	movs	r0, #1
 80160c4:	7050      	strb	r0, [r2, #1]
    dirty = dirty || nvsbuffer[addr] != new_value || addr == 0;
 80160c6:	4a0c      	ldr	r2, [pc, #48]	@ (80160f8 <ram_put_byte+0x3c>)
 80160c8:	7812      	ldrb	r2, [r2, #0]
 80160ca:	b94a      	cbnz	r2, 80160e0 <ram_put_byte+0x24>
 80160cc:	4a0b      	ldr	r2, [pc, #44]	@ (80160fc <ram_put_byte+0x40>)
 80160ce:	6812      	ldr	r2, [r2, #0]
 80160d0:	5cd2      	ldrb	r2, [r2, r3]
 80160d2:	428a      	cmp	r2, r1
 80160d4:	d001      	beq.n	80160da <ram_put_byte+0x1e>
 80160d6:	2001      	movs	r0, #1
 80160d8:	e003      	b.n	80160e2 <ram_put_byte+0x26>
 80160da:	b943      	cbnz	r3, 80160ee <ram_put_byte+0x32>
 80160dc:	2001      	movs	r0, #1
 80160de:	e000      	b.n	80160e2 <ram_put_byte+0x26>
 80160e0:	2001      	movs	r0, #1
 80160e2:	4a05      	ldr	r2, [pc, #20]	@ (80160f8 <ram_put_byte+0x3c>)
 80160e4:	7010      	strb	r0, [r2, #0]
    nvsbuffer[addr] = new_value;
 80160e6:	4a05      	ldr	r2, [pc, #20]	@ (80160fc <ram_put_byte+0x40>)
 80160e8:	6812      	ldr	r2, [r2, #0]
 80160ea:	54d1      	strb	r1, [r2, r3]
}
 80160ec:	4770      	bx	lr
    dirty = dirty || nvsbuffer[addr] != new_value || addr == 0;
 80160ee:	2000      	movs	r0, #0
 80160f0:	e7f7      	b.n	80160e2 <ram_put_byte+0x26>
 80160f2:	bf00      	nop
 80160f4:	20001e18 	.word	0x20001e18
 80160f8:	20001e20 	.word	0x20001e20
 80160fc:	20001e50 	.word	0x20001e50

08016100 <memcpy_from_ram>:

    return NVS_TransferResult_OK;
}

static nvs_transfer_result_t memcpy_from_ram (uint8_t *destination, uint32_t source, uint32_t size, bool with_checksum)
{
 8016100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016104:	4604      	mov	r4, r0
 8016106:	460d      	mov	r5, r1
 8016108:	4616      	mov	r6, r2
 801610a:	461f      	mov	r7, r3
    if(hal.nvs.driver_area.address && source > hal.nvs.driver_area.address + hal.nvs.driver_area.size)
 801610c:	4b19      	ldr	r3, [pc, #100]	@ (8016174 <memcpy_from_ram+0x74>)
 801610e:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8016112:	b12b      	cbz	r3, 8016120 <memcpy_from_ram+0x20>
 8016114:	4a17      	ldr	r2, [pc, #92]	@ (8016174 <memcpy_from_ram+0x74>)
 8016116:	f8b2 2186 	ldrh.w	r2, [r2, #390]	@ 0x186
 801611a:	4413      	add	r3, r2
 801611c:	428b      	cmp	r3, r1
 801611e:	d302      	bcc.n	8016126 <memcpy_from_ram+0x26>
        return physical_nvs.memcpy_from_nvs(destination, source, size, with_checksum);

    uint8_t checksum = with_checksum ? calc_checksum(&nvsbuffer[source], size) : 0;
 8016120:	b947      	cbnz	r7, 8016134 <memcpy_from_ram+0x34>
 8016122:	2300      	movs	r3, #0

    for(; size > 0; size--)
 8016124:	e017      	b.n	8016156 <memcpy_from_ram+0x56>
        return physical_nvs.memcpy_from_nvs(destination, source, size, with_checksum);
 8016126:	4b14      	ldr	r3, [pc, #80]	@ (8016178 <memcpy_from_ram+0x78>)
 8016128:	f8d3 8020 	ldr.w	r8, [r3, #32]
 801612c:	463b      	mov	r3, r7
 801612e:	4632      	mov	r2, r6
 8016130:	47c0      	blx	r8
 8016132:	e019      	b.n	8016168 <memcpy_from_ram+0x68>
    uint8_t checksum = with_checksum ? calc_checksum(&nvsbuffer[source], size) : 0;
 8016134:	4b11      	ldr	r3, [pc, #68]	@ (801617c <memcpy_from_ram+0x7c>)
 8016136:	6818      	ldr	r0, [r3, #0]
 8016138:	4631      	mov	r1, r6
 801613a:	4428      	add	r0, r5
 801613c:	f7ff ffa6 	bl	801608c <calc_checksum>
 8016140:	4603      	mov	r3, r0
 8016142:	e008      	b.n	8016156 <memcpy_from_ram+0x56>
        *(destination++) = ram_get_byte(source++);
 8016144:	4620      	mov	r0, r4
    return nvsbuffer[addr];
 8016146:	4a0d      	ldr	r2, [pc, #52]	@ (801617c <memcpy_from_ram+0x7c>)
 8016148:	6812      	ldr	r2, [r2, #0]
 801614a:	5d52      	ldrb	r2, [r2, r5]
        *(destination++) = ram_get_byte(source++);
 801614c:	f800 2b01 	strb.w	r2, [r0], #1
    for(; size > 0; size--)
 8016150:	3e01      	subs	r6, #1
        *(destination++) = ram_get_byte(source++);
 8016152:	3501      	adds	r5, #1
 8016154:	4604      	mov	r4, r0
    for(; size > 0; size--)
 8016156:	2e00      	cmp	r6, #0
 8016158:	d1f4      	bne.n	8016144 <memcpy_from_ram+0x44>

    return with_checksum ? (checksum == ram_get_byte(source) ? NVS_TransferResult_OK : NVS_TransferResult_Failed) : NVS_TransferResult_OK;
 801615a:	b14f      	cbz	r7, 8016170 <memcpy_from_ram+0x70>
    return nvsbuffer[addr];
 801615c:	4a07      	ldr	r2, [pc, #28]	@ (801617c <memcpy_from_ram+0x7c>)
 801615e:	6812      	ldr	r2, [r2, #0]
 8016160:	5d52      	ldrb	r2, [r2, r5]
    return with_checksum ? (checksum == ram_get_byte(source) ? NVS_TransferResult_OK : NVS_TransferResult_Failed) : NVS_TransferResult_OK;
 8016162:	4293      	cmp	r3, r2
 8016164:	d002      	beq.n	801616c <memcpy_from_ram+0x6c>
 8016166:	2000      	movs	r0, #0
}
 8016168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return with_checksum ? (checksum == ram_get_byte(source) ? NVS_TransferResult_OK : NVS_TransferResult_Failed) : NVS_TransferResult_OK;
 801616c:	2002      	movs	r0, #2
 801616e:	e7fb      	b.n	8016168 <memcpy_from_ram+0x68>
 8016170:	2002      	movs	r0, #2
 8016172:	e7f9      	b.n	8016168 <memcpy_from_ram+0x68>
 8016174:	200018dc 	.word	0x200018dc
 8016178:	20001e24 	.word	0x20001e24
 801617c:	20001e50 	.word	0x20001e50

08016180 <memcpy_to_ram>:
{
 8016180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016184:	4607      	mov	r7, r0
 8016186:	460c      	mov	r4, r1
 8016188:	4615      	mov	r5, r2
 801618a:	4698      	mov	r8, r3
    if(hal.nvs.driver_area.address && destination > hal.nvs.driver_area.address + hal.nvs.driver_area.size)
 801618c:	4b4c      	ldr	r3, [pc, #304]	@ (80162c0 <memcpy_to_ram+0x140>)
 801618e:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8016192:	b12b      	cbz	r3, 80161a0 <memcpy_to_ram+0x20>
 8016194:	4a4a      	ldr	r2, [pc, #296]	@ (80162c0 <memcpy_to_ram+0x140>)
 8016196:	f8b2 2186 	ldrh.w	r2, [r2, #390]	@ 0x186
 801619a:	4413      	add	r3, r2
 801619c:	4283      	cmp	r3, r0
 801619e:	d309      	bcc.n	80161b4 <memcpy_to_ram+0x34>
    uint8_t checksum = with_checksum ? calc_checksum(source, size) : 0;
 80161a0:	f1b8 0f00 	cmp.w	r8, #0
 80161a4:	d10c      	bne.n	80161c0 <memcpy_to_ram+0x40>
 80161a6:	f04f 0900 	mov.w	r9, #0
    dirty = false;
 80161aa:	4b46      	ldr	r3, [pc, #280]	@ (80162c4 <memcpy_to_ram+0x144>)
 80161ac:	2200      	movs	r2, #0
 80161ae:	701a      	strb	r2, [r3, #0]
    uint32_t dest = destination;
 80161b0:	4638      	mov	r0, r7
    for(; size > 0; size--)
 80161b2:	e012      	b.n	80161da <memcpy_to_ram+0x5a>
        return physical_nvs.memcpy_to_nvs(destination, source, size, with_checksum);
 80161b4:	4b44      	ldr	r3, [pc, #272]	@ (80162c8 <memcpy_to_ram+0x148>)
 80161b6:	69de      	ldr	r6, [r3, #28]
 80161b8:	4643      	mov	r3, r8
 80161ba:	462a      	mov	r2, r5
 80161bc:	47b0      	blx	r6
 80161be:	e077      	b.n	80162b0 <memcpy_to_ram+0x130>
    uint8_t checksum = with_checksum ? calc_checksum(source, size) : 0;
 80161c0:	4629      	mov	r1, r5
 80161c2:	4620      	mov	r0, r4
 80161c4:	f7ff ff62 	bl	801608c <calc_checksum>
 80161c8:	4681      	mov	r9, r0
 80161ca:	e7ee      	b.n	80161aa <memcpy_to_ram+0x2a>
        ram_put_byte(dest++, *(source++));
 80161cc:	1c46      	adds	r6, r0, #1
 80161ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161d2:	f7ff ff73 	bl	80160bc <ram_put_byte>
    for(; size > 0; size--)
 80161d6:	3d01      	subs	r5, #1
        ram_put_byte(dest++, *(source++));
 80161d8:	4630      	mov	r0, r6
    for(; size > 0; size--)
 80161da:	2d00      	cmp	r5, #0
 80161dc:	d1f6      	bne.n	80161cc <memcpy_to_ram+0x4c>
    if(with_checksum)
 80161de:	f1b8 0f00 	cmp.w	r8, #0
 80161e2:	d11d      	bne.n	8016220 <memcpy_to_ram+0xa0>
    if(settings_dirty.version || source == hal.nvs.driver_area.mem_address)
 80161e4:	4b39      	ldr	r3, [pc, #228]	@ (80162cc <memcpy_to_ram+0x14c>)
 80161e6:	785b      	ldrb	r3, [r3, #1]
 80161e8:	b923      	cbnz	r3, 80161f4 <memcpy_to_ram+0x74>
 80161ea:	4b35      	ldr	r3, [pc, #212]	@ (80162c0 <memcpy_to_ram+0x140>)
 80161ec:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80161f0:	42a3      	cmp	r3, r4
 80161f2:	d102      	bne.n	80161fa <memcpy_to_ram+0x7a>
        dirty = true;
 80161f4:	4b33      	ldr	r3, [pc, #204]	@ (80162c4 <memcpy_to_ram+0x144>)
 80161f6:	2201      	movs	r2, #1
 80161f8:	701a      	strb	r2, [r3, #0]
    if(dirty && physical_nvs.type != NVS_None) {
 80161fa:	4b32      	ldr	r3, [pc, #200]	@ (80162c4 <memcpy_to_ram+0x144>)
 80161fc:	781b      	ldrb	r3, [r3, #0]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d055      	beq.n	80162ae <memcpy_to_ram+0x12e>
 8016202:	4b31      	ldr	r3, [pc, #196]	@ (80162c8 <memcpy_to_ram+0x148>)
 8016204:	781b      	ldrb	r3, [r3, #0]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d054      	beq.n	80162b4 <memcpy_to_ram+0x134>
        settings_dirty.is_dirty = true;
 801620a:	4b30      	ldr	r3, [pc, #192]	@ (80162cc <memcpy_to_ram+0x14c>)
 801620c:	2201      	movs	r2, #1
 801620e:	701a      	strb	r2, [r3, #0]
        if(hal.nvs.driver_area.address && destination >= hal.nvs.driver_area.address)
 8016210:	4b2b      	ldr	r3, [pc, #172]	@ (80162c0 <memcpy_to_ram+0x140>)
 8016212:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8016216:	b15b      	cbz	r3, 8016230 <memcpy_to_ram+0xb0>
 8016218:	42bb      	cmp	r3, r7
 801621a:	d905      	bls.n	8016228 <memcpy_to_ram+0xa8>
 801621c:	2300      	movs	r3, #0
 801621e:	e008      	b.n	8016232 <memcpy_to_ram+0xb2>
        ram_put_byte(dest, checksum);
 8016220:	4649      	mov	r1, r9
 8016222:	f7ff ff4b 	bl	80160bc <ram_put_byte>
 8016226:	e7dd      	b.n	80161e4 <memcpy_to_ram+0x64>
            settings_dirty.driver_settings = true;
 8016228:	4b28      	ldr	r3, [pc, #160]	@ (80162cc <memcpy_to_ram+0x14c>)
 801622a:	711a      	strb	r2, [r3, #4]
    return NVS_TransferResult_OK;
 801622c:	2002      	movs	r0, #2
            settings_dirty.driver_settings = true;
 801622e:	e03f      	b.n	80162b0 <memcpy_to_ram+0x130>
 8016230:	2300      	movs	r3, #0
                if(target[idx].addr == destination)
 8016232:	4a27      	ldr	r2, [pc, #156]	@ (80162d0 <memcpy_to_ram+0x150>)
 8016234:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8016238:	42ba      	cmp	r2, r7
 801623a:	d006      	beq.n	801624a <memcpy_to_ram+0xca>
            } while(target[++idx].addr);
 801623c:	3301      	adds	r3, #1
 801623e:	b2db      	uxtb	r3, r3
 8016240:	4a23      	ldr	r2, [pc, #140]	@ (80162d0 <memcpy_to_ram+0x150>)
 8016242:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8016246:	2a00      	cmp	r2, #0
 8016248:	d1f3      	bne.n	8016232 <memcpy_to_ram+0xb2>
            if(target[idx].addr) switch(target[idx].type) {
 801624a:	4619      	mov	r1, r3
 801624c:	4a20      	ldr	r2, [pc, #128]	@ (80162d0 <memcpy_to_ram+0x150>)
 801624e:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8016252:	2a00      	cmp	r2, #0
 8016254:	d030      	beq.n	80162b8 <memcpy_to_ram+0x138>
 8016256:	4a1e      	ldr	r2, [pc, #120]	@ (80162d0 <memcpy_to_ram+0x150>)
 8016258:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801625c:	7898      	ldrb	r0, [r3, #2]
 801625e:	2804      	cmp	r0, #4
 8016260:	d82c      	bhi.n	80162bc <memcpy_to_ram+0x13c>
 8016262:	e8df f000 	tbb	[pc, r0]
 8016266:	2b03      	.short	0x2b03
 8016268:	1308      	.short	0x1308
 801626a:	1f          	.byte	0x1f
 801626b:	00          	.byte	0x00
                    settings_dirty.global_settings = true;
 801626c:	4b17      	ldr	r3, [pc, #92]	@ (80162cc <memcpy_to_ram+0x14c>)
 801626e:	2201      	movs	r2, #1
 8016270:	709a      	strb	r2, [r3, #2]
    return NVS_TransferResult_OK;
 8016272:	2002      	movs	r0, #2
                    break;
 8016274:	e01c      	b.n	80162b0 <memcpy_to_ram+0x130>
                    settings_dirty.coord_data |= (1 << target[idx].offset);
 8016276:	4c15      	ldr	r4, [pc, #84]	@ (80162cc <memcpy_to_ram+0x14c>)
 8016278:	88e3      	ldrh	r3, [r4, #6]
 801627a:	4a15      	ldr	r2, [pc, #84]	@ (80162d0 <memcpy_to_ram+0x150>)
 801627c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016280:	78d1      	ldrb	r1, [r2, #3]
 8016282:	2201      	movs	r2, #1
 8016284:	408a      	lsls	r2, r1
 8016286:	4313      	orrs	r3, r2
 8016288:	80e3      	strh	r3, [r4, #6]
                    break;
 801628a:	e011      	b.n	80162b0 <memcpy_to_ram+0x130>
                    settings_dirty.startup_lines |= (1 << target[idx].offset);
 801628c:	480f      	ldr	r0, [pc, #60]	@ (80162cc <memcpy_to_ram+0x14c>)
 801628e:	7943      	ldrb	r3, [r0, #5]
 8016290:	4a0f      	ldr	r2, [pc, #60]	@ (80162d0 <memcpy_to_ram+0x150>)
 8016292:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016296:	78d1      	ldrb	r1, [r2, #3]
 8016298:	2201      	movs	r2, #1
 801629a:	408a      	lsls	r2, r1
 801629c:	4313      	orrs	r3, r2
 801629e:	7143      	strb	r3, [r0, #5]
    return NVS_TransferResult_OK;
 80162a0:	2002      	movs	r0, #2
                    break;
 80162a2:	e005      	b.n	80162b0 <memcpy_to_ram+0x130>
                    settings_dirty.build_info = true;
 80162a4:	4b09      	ldr	r3, [pc, #36]	@ (80162cc <memcpy_to_ram+0x14c>)
 80162a6:	2201      	movs	r2, #1
 80162a8:	70da      	strb	r2, [r3, #3]
    return NVS_TransferResult_OK;
 80162aa:	2002      	movs	r0, #2
                    break;
 80162ac:	e000      	b.n	80162b0 <memcpy_to_ram+0x130>
    return NVS_TransferResult_OK;
 80162ae:	2002      	movs	r0, #2
}
 80162b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NVS_TransferResult_OK;
 80162b4:	2002      	movs	r0, #2
 80162b6:	e7fb      	b.n	80162b0 <memcpy_to_ram+0x130>
 80162b8:	2002      	movs	r0, #2
 80162ba:	e7f9      	b.n	80162b0 <memcpy_to_ram+0x130>
            if(target[idx].addr) switch(target[idx].type) {
 80162bc:	2002      	movs	r0, #2
 80162be:	e7f7      	b.n	80162b0 <memcpy_to_ram+0x130>
 80162c0:	200018dc 	.word	0x200018dc
 80162c4:	20001e20 	.word	0x20001e20
 80162c8:	20001e24 	.word	0x20001e24
 80162cc:	20001e18 	.word	0x20001e18
 80162d0:	0802c00c 	.word	0x0802c00c

080162d4 <nvs_buffer_alloc>:

// Try to allocate RAM from heap for buffer/emulation.
bool nvs_buffer_alloc (void)
{
 80162d4:	b510      	push	{r4, lr}
    assert(NVS_SIZE >= GRBL_NVS_SIZE);

    if((nvsbuffer = malloc(NVS_SIZE)))
 80162d6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80162da:	f00c fd5d 	bl	8022d98 <malloc>
 80162de:	4604      	mov	r4, r0
 80162e0:	4b05      	ldr	r3, [pc, #20]	@ (80162f8 <nvs_buffer_alloc+0x24>)
 80162e2:	6018      	str	r0, [r3, #0]
 80162e4:	b120      	cbz	r0, 80162f0 <nvs_buffer_alloc+0x1c>
        memset(nvsbuffer, 0xFF, NVS_SIZE);
 80162e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80162ea:	21ff      	movs	r1, #255	@ 0xff
 80162ec:	f00e fe1b 	bl	8024f26 <memset>

    return nvsbuffer != NULL;
}
 80162f0:	1e20      	subs	r0, r4, #0
 80162f2:	bf18      	it	ne
 80162f4:	2001      	movne	r0, #1
 80162f6:	bd10      	pop	{r4, pc}
 80162f8:	20001e50 	.word	0x20001e50

080162fc <nvs_buffer_init>:
}
//
// Switch over to RAM based copy.
// Changes to RAM based copy will be written to physical storage when grblHAL is in IDLE state.
bool nvs_buffer_init (void)
{
 80162fc:	b570      	push	{r4, r5, r6, lr}
    hal.nvs.size = ((hal.nvs.size - 1) | 0x03) + 1; // Ensure NVS area ends on a word boundary
 80162fe:	4a3e      	ldr	r2, [pc, #248]	@ (80163f8 <nvs_buffer_init+0xfc>)
 8016300:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
 8016304:	3b01      	subs	r3, #1
 8016306:	f043 0303 	orr.w	r3, r3, #3
 801630a:	3301      	adds	r3, #1
 801630c:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178

    if(nvsbuffer) {
 8016310:	4b3a      	ldr	r3, [pc, #232]	@ (80163fc <nvs_buffer_init+0x100>)
 8016312:	681d      	ldr	r5, [r3, #0]
 8016314:	2d00      	cmp	r5, #0
 8016316:	d069      	beq.n	80163ec <nvs_buffer_init+0xf0>

        memcpy(&physical_nvs, &hal.nvs, sizeof(nvs_io_t)); // save pointers to physical storage handler functions
 8016318:	4e39      	ldr	r6, [pc, #228]	@ (8016400 <nvs_buffer_init+0x104>)
 801631a:	46b4      	mov	ip, r6
 801631c:	f502 74ba 	add.w	r4, r2, #372	@ 0x174
 8016320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016322:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016328:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801632c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8016330:	e88c 0007 	stmia.w	ip, {r0, r1, r2}

        // Copy physical storage content to RAM when available
        if(physical_nvs.type == NVS_Flash)
 8016334:	7833      	ldrb	r3, [r6, #0]
 8016336:	2b03      	cmp	r3, #3
 8016338:	d00c      	beq.n	8016354 <nvs_buffer_init+0x58>
            physical_nvs.memcpy_from_flash(nvsbuffer);
        else if(physical_nvs.type != NVS_None)
 801633a:	b173      	cbz	r3, 801635a <nvs_buffer_init+0x5e>
            physical_nvs.memcpy_from_nvs(nvsbuffer, 0, GRBL_NVS_SIZE + hal.nvs.driver_area.size, false);
 801633c:	4b30      	ldr	r3, [pc, #192]	@ (8016400 <nvs_buffer_init+0x104>)
 801633e:	6a1c      	ldr	r4, [r3, #32]
 8016340:	4b2d      	ldr	r3, [pc, #180]	@ (80163f8 <nvs_buffer_init+0xfc>)
 8016342:	f8b3 2186 	ldrh.w	r2, [r3, #390]	@ 0x186
 8016346:	2300      	movs	r3, #0
 8016348:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801634c:	4619      	mov	r1, r3
 801634e:	4628      	mov	r0, r5
 8016350:	47a0      	blx	r4
 8016352:	e002      	b.n	801635a <nvs_buffer_init+0x5e>
            physical_nvs.memcpy_from_flash(nvsbuffer);
 8016354:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8016356:	4628      	mov	r0, r5
 8016358:	4798      	blx	r3

        // Switch hal to use RAM version of non-volatile storage data
        hal.nvs.type = NVS_Emulated;
 801635a:	4b27      	ldr	r3, [pc, #156]	@ (80163f8 <nvs_buffer_init+0xfc>)
 801635c:	2204      	movs	r2, #4
 801635e:	f883 2174 	strb.w	r2, [r3, #372]	@ 0x174
        hal.nvs.get_byte = &ram_get_byte;
 8016362:	4a28      	ldr	r2, [pc, #160]	@ (8016404 <nvs_buffer_init+0x108>)
 8016364:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
        hal.nvs.put_byte = &ram_put_byte;
 8016368:	4a27      	ldr	r2, [pc, #156]	@ (8016408 <nvs_buffer_init+0x10c>)
 801636a:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
        hal.nvs.memcpy_to_nvs = &memcpy_to_ram;
 801636e:	4a27      	ldr	r2, [pc, #156]	@ (801640c <nvs_buffer_init+0x110>)
 8016370:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
        hal.nvs.memcpy_from_nvs = &memcpy_from_ram;
 8016374:	4a26      	ldr	r2, [pc, #152]	@ (8016410 <nvs_buffer_init+0x114>)
 8016376:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
        hal.nvs.memcpy_from_flash = NULL;
 801637a:	2200      	movs	r2, #0
 801637c:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
        hal.nvs.memcpy_to_flash = NULL;
 8016380:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

        // If no physical storage available or if NVS import fails copy default settings to RAM
        // and write out to physical storage when available.
        if(physical_nvs.type == NVS_None || ram_get_byte(0) != SETTINGS_VERSION) {
 8016384:	4b1e      	ldr	r3, [pc, #120]	@ (8016400 <nvs_buffer_init+0x104>)
 8016386:	781b      	ldrb	r3, [r3, #0]
 8016388:	b123      	cbz	r3, 8016394 <nvs_buffer_init+0x98>
    return nvsbuffer[addr];
 801638a:	4b1c      	ldr	r3, [pc, #112]	@ (80163fc <nvs_buffer_init+0x100>)
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	781b      	ldrb	r3, [r3, #0]
        if(physical_nvs.type == NVS_None || ram_get_byte(0) != SETTINGS_VERSION) {
 8016390:	2b16      	cmp	r3, #22
 8016392:	d01b      	beq.n	80163cc <nvs_buffer_init+0xd0>
            settings_restore(settings_all);
 8016394:	4b1f      	ldr	r3, [pc, #124]	@ (8016414 <nvs_buffer_init+0x118>)
 8016396:	7818      	ldrb	r0, [r3, #0]
 8016398:	f007 faec 	bl	801d974 <settings_restore>
            if(physical_nvs.type == NVS_Flash)
 801639c:	4b18      	ldr	r3, [pc, #96]	@ (8016400 <nvs_buffer_init+0x104>)
 801639e:	781b      	ldrb	r3, [r3, #0]
 80163a0:	2b03      	cmp	r3, #3
 80163a2:	d01d      	beq.n	80163e0 <nvs_buffer_init+0xe4>
                physical_nvs.memcpy_to_flash(nvsbuffer);
            else if(physical_nvs.memcpy_to_nvs)
 80163a4:	4b16      	ldr	r3, [pc, #88]	@ (8016400 <nvs_buffer_init+0x104>)
 80163a6:	69dc      	ldr	r4, [r3, #28]
 80163a8:	b14c      	cbz	r4, 80163be <nvs_buffer_init+0xc2>
                physical_nvs.memcpy_to_nvs(0, nvsbuffer, GRBL_NVS_SIZE + hal.nvs.driver_area.size, false);
 80163aa:	4b13      	ldr	r3, [pc, #76]	@ (80163f8 <nvs_buffer_init+0xfc>)
 80163ac:	f8b3 2186 	ldrh.w	r2, [r3, #390]	@ 0x186
 80163b0:	2300      	movs	r3, #0
 80163b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80163b6:	4911      	ldr	r1, [pc, #68]	@ (80163fc <nvs_buffer_init+0x100>)
 80163b8:	6809      	ldr	r1, [r1, #0]
 80163ba:	4618      	mov	r0, r3
 80163bc:	47a0      	blx	r4
            if(physical_nvs.type != NVS_None)
 80163be:	4b10      	ldr	r3, [pc, #64]	@ (8016400 <nvs_buffer_init+0x104>)
 80163c0:	781b      	ldrb	r3, [r3, #0]
 80163c2:	b11b      	cbz	r3, 80163cc <nvs_buffer_init+0xd0>
                grbl.report.status_message(Status_SettingReadFail);
 80163c4:	4b14      	ldr	r3, [pc, #80]	@ (8016418 <nvs_buffer_init+0x11c>)
 80163c6:	689b      	ldr	r3, [r3, #8]
 80163c8:	2007      	movs	r0, #7
 80163ca:	4798      	blx	r3
        }
    } else
        protocol_enqueue_foreground_task(report_warning, "Not enough heap for NVS buffer!");

    // Clear settings dirty flags
    memset(&settings_dirty, 0, sizeof(settings_dirty_t));
 80163cc:	4b13      	ldr	r3, [pc, #76]	@ (801641c <nvs_buffer_init+0x120>)
 80163ce:	2200      	movs	r2, #0
 80163d0:	601a      	str	r2, [r3, #0]
 80163d2:	605a      	str	r2, [r3, #4]

    return nvsbuffer != NULL;
 80163d4:	4b09      	ldr	r3, [pc, #36]	@ (80163fc <nvs_buffer_init+0x100>)
 80163d6:	6818      	ldr	r0, [r3, #0]
}
 80163d8:	1a80      	subs	r0, r0, r2
 80163da:	bf18      	it	ne
 80163dc:	2001      	movne	r0, #1
 80163de:	bd70      	pop	{r4, r5, r6, pc}
                physical_nvs.memcpy_to_flash(nvsbuffer);
 80163e0:	4b07      	ldr	r3, [pc, #28]	@ (8016400 <nvs_buffer_init+0x104>)
 80163e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163e4:	4a05      	ldr	r2, [pc, #20]	@ (80163fc <nvs_buffer_init+0x100>)
 80163e6:	6810      	ldr	r0, [r2, #0]
 80163e8:	4798      	blx	r3
 80163ea:	e7e8      	b.n	80163be <nvs_buffer_init+0xc2>
        protocol_enqueue_foreground_task(report_warning, "Not enough heap for NVS buffer!");
 80163ec:	490c      	ldr	r1, [pc, #48]	@ (8016420 <nvs_buffer_init+0x124>)
 80163ee:	480d      	ldr	r0, [pc, #52]	@ (8016424 <nvs_buffer_init+0x128>)
 80163f0:	f001 fe0e 	bl	8018010 <protocol_enqueue_foreground_task>
 80163f4:	e7ea      	b.n	80163cc <nvs_buffer_init+0xd0>
 80163f6:	bf00      	nop
 80163f8:	200018dc 	.word	0x200018dc
 80163fc:	20001e50 	.word	0x20001e50
 8016400:	20001e24 	.word	0x20001e24
 8016404:	080160b1 	.word	0x080160b1
 8016408:	080160bd 	.word	0x080160bd
 801640c:	08016181 	.word	0x08016181
 8016410:	08016101 	.word	0x08016101
 8016414:	08030c08 	.word	0x08030c08
 8016418:	20001ac4 	.word	0x20001ac4
 801641c:	20001e18 	.word	0x20001e18
 8016420:	0802bfd4 	.word	0x0802bfd4
 8016424:	080199af 	.word	0x080199af

08016428 <nvs_buffer_sync_physical>:
}

// Write RAM changes to physical storage
void nvs_buffer_sync_physical (void)
{
    if(!settings_dirty.is_dirty)
 8016428:	4b6d      	ldr	r3, [pc, #436]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 801642a:	781b      	ldrb	r3, [r3, #0]
 801642c:	2b00      	cmp	r3, #0
 801642e:	f000 80d6 	beq.w	80165de <nvs_buffer_sync_physical+0x1b6>
{
 8016432:	b570      	push	{r4, r5, r6, lr}
        return;

    if(physical_nvs.memcpy_to_nvs) {
 8016434:	4b6b      	ldr	r3, [pc, #428]	@ (80165e4 <nvs_buffer_sync_physical+0x1bc>)
 8016436:	69dc      	ldr	r4, [r3, #28]
 8016438:	2c00      	cmp	r4, #0
 801643a:	f000 80b5 	beq.w	80165a8 <nvs_buffer_sync_physical+0x180>

        if(settings_dirty.version)
 801643e:	4b68      	ldr	r3, [pc, #416]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 8016440:	785b      	ldrb	r3, [r3, #1]
 8016442:	b153      	cbz	r3, 801645a <nvs_buffer_sync_physical+0x32>
            settings_dirty.version = physical_nvs.memcpy_to_nvs(0, nvsbuffer, 1, false) != NVS_TransferResult_OK;
 8016444:	2300      	movs	r3, #0
 8016446:	2201      	movs	r2, #1
 8016448:	4967      	ldr	r1, [pc, #412]	@ (80165e8 <nvs_buffer_sync_physical+0x1c0>)
 801644a:	6809      	ldr	r1, [r1, #0]
 801644c:	4618      	mov	r0, r3
 801644e:	47a0      	blx	r4
 8016450:	3802      	subs	r0, #2
 8016452:	bf18      	it	ne
 8016454:	2001      	movne	r0, #1
 8016456:	4b62      	ldr	r3, [pc, #392]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 8016458:	7058      	strb	r0, [r3, #1]

        if(settings_dirty.global_settings)
 801645a:	4b61      	ldr	r3, [pc, #388]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 801645c:	789b      	ldrb	r3, [r3, #2]
 801645e:	b173      	cbz	r3, 801647e <nvs_buffer_sync_physical+0x56>
            settings_dirty.global_settings = physical_nvs.memcpy_to_nvs(NVS_ADDR_GLOBAL, (uint8_t *)(nvsbuffer + NVS_ADDR_GLOBAL), sizeof(settings_t) + NVS_CRC_BYTES, false) != NVS_TransferResult_OK;
 8016460:	4b60      	ldr	r3, [pc, #384]	@ (80165e4 <nvs_buffer_sync_physical+0x1bc>)
 8016462:	69dc      	ldr	r4, [r3, #28]
 8016464:	4b60      	ldr	r3, [pc, #384]	@ (80165e8 <nvs_buffer_sync_physical+0x1c0>)
 8016466:	6819      	ldr	r1, [r3, #0]
 8016468:	2300      	movs	r3, #0
 801646a:	f240 126d 	movw	r2, #365	@ 0x16d
 801646e:	3101      	adds	r1, #1
 8016470:	2001      	movs	r0, #1
 8016472:	47a0      	blx	r4
 8016474:	3802      	subs	r0, #2
 8016476:	bf18      	it	ne
 8016478:	2001      	movne	r0, #1
 801647a:	4b59      	ldr	r3, [pc, #356]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 801647c:	7098      	strb	r0, [r3, #2]

        if(settings_dirty.build_info)
 801647e:	4b58      	ldr	r3, [pc, #352]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 8016480:	78db      	ldrb	r3, [r3, #3]
 8016482:	b17b      	cbz	r3, 80164a4 <nvs_buffer_sync_physical+0x7c>
            settings_dirty.build_info = physical_nvs.memcpy_to_nvs(NVS_ADDR_BUILD_INFO, (uint8_t *)(nvsbuffer + NVS_ADDR_BUILD_INFO), sizeof(stored_line_t) + NVS_CRC_BYTES, false) != NVS_TransferResult_OK;
 8016484:	4b57      	ldr	r3, [pc, #348]	@ (80165e4 <nvs_buffer_sync_physical+0x1bc>)
 8016486:	69dc      	ldr	r4, [r3, #28]
 8016488:	4b57      	ldr	r3, [pc, #348]	@ (80165e8 <nvs_buffer_sync_physical+0x1c0>)
 801648a:	6819      	ldr	r1, [r3, #0]
 801648c:	2300      	movs	r3, #0
 801648e:	2247      	movs	r2, #71	@ 0x47
 8016490:	f201 31ae 	addw	r1, r1, #942	@ 0x3ae
 8016494:	f240 30ae 	movw	r0, #942	@ 0x3ae
 8016498:	47a0      	blx	r4
 801649a:	3802      	subs	r0, #2
 801649c:	bf18      	it	ne
 801649e:	2001      	movne	r0, #1
 80164a0:	4b4f      	ldr	r3, [pc, #316]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 80164a2:	70d8      	strb	r0, [r3, #3]

        uint_fast8_t idx = N_STARTUP_LINE, offset;
        if(settings_dirty.startup_lines) do {
 80164a4:	4b4e      	ldr	r3, [pc, #312]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 80164a6:	795b      	ldrb	r3, [r3, #5]
 80164a8:	b30b      	cbz	r3, 80164ee <nvs_buffer_sync_physical+0xc6>
        uint_fast8_t idx = N_STARTUP_LINE, offset;
 80164aa:	2402      	movs	r4, #2
            idx--;
 80164ac:	3c01      	subs	r4, #1
            if(bit_istrue(settings_dirty.startup_lines, bit(idx))) {
 80164ae:	4b4c      	ldr	r3, [pc, #304]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 80164b0:	795a      	ldrb	r2, [r3, #5]
 80164b2:	fa22 f304 	lsr.w	r3, r2, r4
 80164b6:	f013 0f01 	tst.w	r3, #1
 80164ba:	d016      	beq.n	80164ea <nvs_buffer_sync_physical+0xc2>
                bit_false(settings_dirty.startup_lines, bit(idx));
 80164bc:	2301      	movs	r3, #1
 80164be:	40a3      	lsls	r3, r4
 80164c0:	43db      	mvns	r3, r3
 80164c2:	b2dd      	uxtb	r5, r3
 80164c4:	4013      	ands	r3, r2
 80164c6:	4a46      	ldr	r2, [pc, #280]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 80164c8:	7153      	strb	r3, [r2, #5]
                offset = NVS_ADDR_STARTUP_BLOCK + idx * (sizeof(stored_line_t) + NVS_CRC_BYTES);
 80164ca:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 80164ce:	ebc4 00c0 	rsb	r0, r4, r0, lsl #3
 80164d2:	f200 301f 	addw	r0, r0, #799	@ 0x31f
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(stored_line_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
 80164d6:	4b43      	ldr	r3, [pc, #268]	@ (80165e4 <nvs_buffer_sync_physical+0x1bc>)
 80164d8:	69de      	ldr	r6, [r3, #28]
 80164da:	4b43      	ldr	r3, [pc, #268]	@ (80165e8 <nvs_buffer_sync_physical+0x1c0>)
 80164dc:	6819      	ldr	r1, [r3, #0]
 80164de:	2300      	movs	r3, #0
 80164e0:	2247      	movs	r2, #71	@ 0x47
 80164e2:	4401      	add	r1, r0
 80164e4:	47b0      	blx	r6
 80164e6:	2802      	cmp	r0, #2
 80164e8:	d006      	beq.n	80164f8 <nvs_buffer_sync_physical+0xd0>
                    bit_false(settings_dirty.startup_lines, bit(idx));
            }
        } while(idx);
 80164ea:	2c00      	cmp	r4, #0
 80164ec:	d1de      	bne.n	80164ac <nvs_buffer_sync_physical+0x84>

        idx = N_CoordinateSystems;
        if(settings_dirty.coord_data) do {
 80164ee:	4b3c      	ldr	r3, [pc, #240]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 80164f0:	88db      	ldrh	r3, [r3, #6]
 80164f2:	b33b      	cbz	r3, 8016544 <nvs_buffer_sync_physical+0x11c>
        idx = N_CoordinateSystems;
 80164f4:	240c      	movs	r4, #12
 80164f6:	e007      	b.n	8016508 <nvs_buffer_sync_physical+0xe0>
                    bit_false(settings_dirty.startup_lines, bit(idx));
 80164f8:	4b39      	ldr	r3, [pc, #228]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 80164fa:	795a      	ldrb	r2, [r3, #5]
 80164fc:	4015      	ands	r5, r2
 80164fe:	715d      	strb	r5, [r3, #5]
 8016500:	e7f3      	b.n	80164ea <nvs_buffer_sync_physical+0xc2>
            if(bit_istrue(settings_dirty.coord_data, bit(idx))) {
                offset = NVS_ADDR_PARAMETERS + idx * (sizeof(coord_data_t) + NVS_CRC_BYTES);
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(coord_data_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
                    bit_false(settings_dirty.coord_data, bit(idx));
            }
        } while(idx--);
 8016502:	1e63      	subs	r3, r4, #1
 8016504:	b1f4      	cbz	r4, 8016544 <nvs_buffer_sync_physical+0x11c>
 8016506:	461c      	mov	r4, r3
            if(bit_istrue(settings_dirty.coord_data, bit(idx))) {
 8016508:	4b35      	ldr	r3, [pc, #212]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 801650a:	88db      	ldrh	r3, [r3, #6]
 801650c:	40e3      	lsrs	r3, r4
 801650e:	f013 0f01 	tst.w	r3, #1
 8016512:	d0f6      	beq.n	8016502 <nvs_buffer_sync_physical+0xda>
                offset = NVS_ADDR_PARAMETERS + idx * (sizeof(coord_data_t) + NVS_CRC_BYTES);
 8016514:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8016518:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 801651c:	f500 7000 	add.w	r0, r0, #512	@ 0x200
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(coord_data_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
 8016520:	4b30      	ldr	r3, [pc, #192]	@ (80165e4 <nvs_buffer_sync_physical+0x1bc>)
 8016522:	69dd      	ldr	r5, [r3, #28]
 8016524:	4b30      	ldr	r3, [pc, #192]	@ (80165e8 <nvs_buffer_sync_physical+0x1c0>)
 8016526:	6819      	ldr	r1, [r3, #0]
 8016528:	2300      	movs	r3, #0
 801652a:	220d      	movs	r2, #13
 801652c:	4401      	add	r1, r0
 801652e:	47a8      	blx	r5
 8016530:	2802      	cmp	r0, #2
 8016532:	d1e6      	bne.n	8016502 <nvs_buffer_sync_physical+0xda>
                    bit_false(settings_dirty.coord_data, bit(idx));
 8016534:	492a      	ldr	r1, [pc, #168]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 8016536:	88cb      	ldrh	r3, [r1, #6]
 8016538:	2201      	movs	r2, #1
 801653a:	40a2      	lsls	r2, r4
 801653c:	ea23 0302 	bic.w	r3, r3, r2
 8016540:	80cb      	strh	r3, [r1, #6]
 8016542:	e7de      	b.n	8016502 <nvs_buffer_sync_physical+0xda>

        if(settings_dirty.driver_settings) {
 8016544:	4b26      	ldr	r3, [pc, #152]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 8016546:	791b      	ldrb	r3, [r3, #4]
 8016548:	b193      	cbz	r3, 8016570 <nvs_buffer_sync_physical+0x148>
            if(hal.nvs.driver_area.size > 0)
 801654a:	4b28      	ldr	r3, [pc, #160]	@ (80165ec <nvs_buffer_sync_physical+0x1c4>)
 801654c:	f8b3 2186 	ldrh.w	r2, [r3, #390]	@ 0x186
 8016550:	b1e2      	cbz	r2, 801658c <nvs_buffer_sync_physical+0x164>
                settings_dirty.driver_settings = physical_nvs.memcpy_to_nvs(hal.nvs.driver_area.address, (uint8_t *)(nvsbuffer + hal.nvs.driver_area.address), hal.nvs.driver_area.size, false) != NVS_TransferResult_OK;
 8016552:	4b24      	ldr	r3, [pc, #144]	@ (80165e4 <nvs_buffer_sync_physical+0x1bc>)
 8016554:	69dc      	ldr	r4, [r3, #28]
 8016556:	4b25      	ldr	r3, [pc, #148]	@ (80165ec <nvs_buffer_sync_physical+0x1c4>)
 8016558:	f8b3 0184 	ldrh.w	r0, [r3, #388]	@ 0x184
 801655c:	4b22      	ldr	r3, [pc, #136]	@ (80165e8 <nvs_buffer_sync_physical+0x1c0>)
 801655e:	6819      	ldr	r1, [r3, #0]
 8016560:	2300      	movs	r3, #0
 8016562:	4401      	add	r1, r0
 8016564:	47a0      	blx	r4
 8016566:	3802      	subs	r0, #2
 8016568:	bf18      	it	ne
 801656a:	2001      	movne	r0, #1
 801656c:	4b1c      	ldr	r3, [pc, #112]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 801656e:	7118      	strb	r0, [r3, #4]
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(tool_data_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
                    bit_false(settings_dirty.tool_data, bit(idx));
            }
        } while(idx);
#endif
        settings_dirty.is_dirty = settings_dirty.coord_data ||
 8016570:	4b1b      	ldr	r3, [pc, #108]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 8016572:	88db      	ldrh	r3, [r3, #6]
                                   settings_dirty.global_settings ||
                                    settings_dirty.driver_settings ||
                                     settings_dirty.startup_lines ||
 8016574:	b973      	cbnz	r3, 8016594 <nvs_buffer_sync_physical+0x16c>
                                   settings_dirty.global_settings ||
 8016576:	4b1a      	ldr	r3, [pc, #104]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 8016578:	789b      	ldrb	r3, [r3, #2]
        settings_dirty.is_dirty = settings_dirty.coord_data ||
 801657a:	b97b      	cbnz	r3, 801659c <nvs_buffer_sync_physical+0x174>
                                    settings_dirty.driver_settings ||
 801657c:	4b18      	ldr	r3, [pc, #96]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 801657e:	889b      	ldrh	r3, [r3, #4]
 8016580:	b973      	cbnz	r3, 80165a0 <nvs_buffer_sync_physical+0x178>
#if N_TOOLS
                                      settings_dirty.tool_data ||
#endif
                                       settings_dirty.build_info;
 8016582:	4b17      	ldr	r3, [pc, #92]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 8016584:	78db      	ldrb	r3, [r3, #3]
                                     settings_dirty.startup_lines ||
 8016586:	b16b      	cbz	r3, 80165a4 <nvs_buffer_sync_physical+0x17c>
 8016588:	2201      	movs	r2, #1
 801658a:	e004      	b.n	8016596 <nvs_buffer_sync_physical+0x16e>
                settings_dirty.driver_settings = false;
 801658c:	4b14      	ldr	r3, [pc, #80]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 801658e:	2200      	movs	r2, #0
 8016590:	711a      	strb	r2, [r3, #4]
 8016592:	e7ed      	b.n	8016570 <nvs_buffer_sync_physical+0x148>
                                     settings_dirty.startup_lines ||
 8016594:	2201      	movs	r2, #1
        settings_dirty.is_dirty = settings_dirty.coord_data ||
 8016596:	4b12      	ldr	r3, [pc, #72]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 8016598:	701a      	strb	r2, [r3, #0]
            else if(--retries == 0)
                report_message("Settings write failed!", Message_Warning);
        } while(retries);
        memset(&settings_dirty, 0, sizeof(settings_dirty_t));
    }
}
 801659a:	bd70      	pop	{r4, r5, r6, pc}
                                     settings_dirty.startup_lines ||
 801659c:	2201      	movs	r2, #1
 801659e:	e7fa      	b.n	8016596 <nvs_buffer_sync_physical+0x16e>
 80165a0:	2201      	movs	r2, #1
 80165a2:	e7f8      	b.n	8016596 <nvs_buffer_sync_physical+0x16e>
 80165a4:	2200      	movs	r2, #0
 80165a6:	e7f6      	b.n	8016596 <nvs_buffer_sync_physical+0x16e>
    } else if(physical_nvs.memcpy_to_flash) {
 80165a8:	4b0e      	ldr	r3, [pc, #56]	@ (80165e4 <nvs_buffer_sync_physical+0x1bc>)
 80165aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d0f4      	beq.n	801659a <nvs_buffer_sync_physical+0x172>
        uint_fast8_t retries = 4;
 80165b0:	2404      	movs	r4, #4
 80165b2:	e001      	b.n	80165b8 <nvs_buffer_sync_physical+0x190>
                retries = 0;
 80165b4:	2400      	movs	r4, #0
        } while(retries);
 80165b6:	b16c      	cbz	r4, 80165d4 <nvs_buffer_sync_physical+0x1ac>
            if(physical_nvs.memcpy_to_flash(nvsbuffer))
 80165b8:	4b0a      	ldr	r3, [pc, #40]	@ (80165e4 <nvs_buffer_sync_physical+0x1bc>)
 80165ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80165bc:	4a0a      	ldr	r2, [pc, #40]	@ (80165e8 <nvs_buffer_sync_physical+0x1c0>)
 80165be:	6810      	ldr	r0, [r2, #0]
 80165c0:	4798      	blx	r3
 80165c2:	2800      	cmp	r0, #0
 80165c4:	d1f6      	bne.n	80165b4 <nvs_buffer_sync_physical+0x18c>
            else if(--retries == 0)
 80165c6:	3c01      	subs	r4, #1
 80165c8:	d1f5      	bne.n	80165b6 <nvs_buffer_sync_physical+0x18e>
                report_message("Settings write failed!", Message_Warning);
 80165ca:	2102      	movs	r1, #2
 80165cc:	4808      	ldr	r0, [pc, #32]	@ (80165f0 <nvs_buffer_sync_physical+0x1c8>)
 80165ce:	f003 f993 	bl	80198f8 <report_message>
 80165d2:	e7f0      	b.n	80165b6 <nvs_buffer_sync_physical+0x18e>
        memset(&settings_dirty, 0, sizeof(settings_dirty_t));
 80165d4:	4b02      	ldr	r3, [pc, #8]	@ (80165e0 <nvs_buffer_sync_physical+0x1b8>)
 80165d6:	2200      	movs	r2, #0
 80165d8:	601a      	str	r2, [r3, #0]
 80165da:	605a      	str	r2, [r3, #4]
 80165dc:	e7dd      	b.n	801659a <nvs_buffer_sync_physical+0x172>
 80165de:	4770      	bx	lr
 80165e0:	20001e18 	.word	0x20001e18
 80165e4:	20001e24 	.word	0x20001e24
 80165e8:	20001e50 	.word	0x20001e50
 80165ec:	200018dc 	.word	0x200018dc
 80165f0:	0802bff4 	.word	0x0802bff4

080165f4 <nvs_buffer_free>:
{
 80165f4:	b508      	push	{r3, lr}
    if(nvsbuffer) {
 80165f6:	4b05      	ldr	r3, [pc, #20]	@ (801660c <nvs_buffer_free+0x18>)
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	b12b      	cbz	r3, 8016608 <nvs_buffer_free+0x14>
        nvs_buffer_sync_physical();
 80165fc:	f7ff ff14 	bl	8016428 <nvs_buffer_sync_physical>
        free(nvsbuffer);
 8016600:	4b02      	ldr	r3, [pc, #8]	@ (801660c <nvs_buffer_free+0x18>)
 8016602:	6818      	ldr	r0, [r3, #0]
 8016604:	f00c fbd0 	bl	8022da8 <free>
}
 8016608:	bd08      	pop	{r3, pc}
 801660a:	bf00      	nop
 801660c:	20001e50 	.word	0x20001e50

08016610 <nvs_buffer_get_physical>:

nvs_io_t *nvs_buffer_get_physical (void)
{
    return hal.nvs.type == NVS_Emulated ? &physical_nvs : &hal.nvs;
 8016610:	4b04      	ldr	r3, [pc, #16]	@ (8016624 <nvs_buffer_get_physical+0x14>)
 8016612:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 8016616:	2b04      	cmp	r3, #4
 8016618:	d001      	beq.n	801661e <nvs_buffer_get_physical+0xe>
 801661a:	4803      	ldr	r0, [pc, #12]	@ (8016628 <nvs_buffer_get_physical+0x18>)
}
 801661c:	4770      	bx	lr
    return hal.nvs.type == NVS_Emulated ? &physical_nvs : &hal.nvs;
 801661e:	4803      	ldr	r0, [pc, #12]	@ (801662c <nvs_buffer_get_physical+0x1c>)
 8016620:	4770      	bx	lr
 8016622:	bf00      	nop
 8016624:	200018dc 	.word	0x200018dc
 8016628:	20001a50 	.word	0x20001a50
 801662c:	20001e24 	.word	0x20001e24

08016630 <enqueue_feed_override>:

static override_queue_t feed = {0}, spindle = {0}, coolant = {0};

ISR_CODE void ISR_FUNC(enqueue_feed_override)(uint8_t cmd)
{
    uint_fast8_t bptr = (feed.head + 1) & (OVERRIDE_BUFSIZE - 1);    // Get next head pointer
 8016630:	4a06      	ldr	r2, [pc, #24]	@ (801664c <enqueue_feed_override+0x1c>)
 8016632:	6813      	ldr	r3, [r2, #0]
 8016634:	3301      	adds	r3, #1
 8016636:	f003 030f 	and.w	r3, r3, #15

    if(bptr != feed.tail) {         // If not buffer full
 801663a:	6852      	ldr	r2, [r2, #4]
 801663c:	429a      	cmp	r2, r3
 801663e:	d004      	beq.n	801664a <enqueue_feed_override+0x1a>
        feed.buf[feed.head] = cmd;  // add data to buffer
 8016640:	4a02      	ldr	r2, [pc, #8]	@ (801664c <enqueue_feed_override+0x1c>)
 8016642:	6811      	ldr	r1, [r2, #0]
 8016644:	4411      	add	r1, r2
 8016646:	7208      	strb	r0, [r1, #8]
        feed.head = bptr;           // and update pointer
 8016648:	6013      	str	r3, [r2, #0]
    }
}
 801664a:	4770      	bx	lr
 801664c:	20001e84 	.word	0x20001e84

08016650 <get_feed_override>:

// Returns 0 if no commands enqueued
uint8_t get_feed_override (void)
{
    uint8_t data = 0;
    uint_fast8_t bptr = feed.tail;
 8016650:	4a07      	ldr	r2, [pc, #28]	@ (8016670 <get_feed_override+0x20>)
 8016652:	6853      	ldr	r3, [r2, #4]

    if(bptr != feed.head) {
 8016654:	6812      	ldr	r2, [r2, #0]
 8016656:	429a      	cmp	r2, r3
 8016658:	d007      	beq.n	801666a <get_feed_override+0x1a>
        data = feed.buf[bptr++];                    // Get next character, increment tmp pointer
 801665a:	1c5a      	adds	r2, r3, #1
 801665c:	4904      	ldr	r1, [pc, #16]	@ (8016670 <get_feed_override+0x20>)
 801665e:	440b      	add	r3, r1
 8016660:	7a18      	ldrb	r0, [r3, #8]
        feed.tail = bptr & (OVERRIDE_BUFSIZE - 1);  // and update pointer
 8016662:	f002 020f 	and.w	r2, r2, #15
 8016666:	604a      	str	r2, [r1, #4]
 8016668:	4770      	bx	lr
    uint8_t data = 0;
 801666a:	2000      	movs	r0, #0
    }

    return data;
}
 801666c:	4770      	bx	lr
 801666e:	bf00      	nop
 8016670:	20001e84 	.word	0x20001e84

08016674 <enqueue_spindle_override>:

ISR_CODE void ISR_FUNC(enqueue_spindle_override)(uint8_t cmd)
{
    uint_fast8_t bptr = (spindle.head + 1) & (OVERRIDE_BUFSIZE - 1);    // Get next head pointer
 8016674:	4a06      	ldr	r2, [pc, #24]	@ (8016690 <enqueue_spindle_override+0x1c>)
 8016676:	6813      	ldr	r3, [r2, #0]
 8016678:	3301      	adds	r3, #1
 801667a:	f003 030f 	and.w	r3, r3, #15

    if(bptr != spindle.tail) {              // If not buffer full
 801667e:	6852      	ldr	r2, [r2, #4]
 8016680:	429a      	cmp	r2, r3
 8016682:	d004      	beq.n	801668e <enqueue_spindle_override+0x1a>
        spindle.buf[spindle.head] = cmd;    // add data to buffer
 8016684:	4a02      	ldr	r2, [pc, #8]	@ (8016690 <enqueue_spindle_override+0x1c>)
 8016686:	6811      	ldr	r1, [r2, #0]
 8016688:	4411      	add	r1, r2
 801668a:	7208      	strb	r0, [r1, #8]
        spindle.head = bptr;                // and update pointer
 801668c:	6013      	str	r3, [r2, #0]
    }
}
 801668e:	4770      	bx	lr
 8016690:	20001e6c 	.word	0x20001e6c

08016694 <get_spindle_override>:

// Returns 0 if no commands enqueued
uint8_t get_spindle_override (void)
{
    uint8_t data = 0;
    uint_fast8_t bptr = spindle.tail;
 8016694:	4a07      	ldr	r2, [pc, #28]	@ (80166b4 <get_spindle_override+0x20>)
 8016696:	6853      	ldr	r3, [r2, #4]

    if(bptr != spindle.head) {
 8016698:	6812      	ldr	r2, [r2, #0]
 801669a:	429a      	cmp	r2, r3
 801669c:	d007      	beq.n	80166ae <get_spindle_override+0x1a>
        data = spindle.buf[bptr++];                     // Get next character, increment tmp pointer
 801669e:	1c5a      	adds	r2, r3, #1
 80166a0:	4904      	ldr	r1, [pc, #16]	@ (80166b4 <get_spindle_override+0x20>)
 80166a2:	440b      	add	r3, r1
 80166a4:	7a18      	ldrb	r0, [r3, #8]
        spindle.tail = bptr & (OVERRIDE_BUFSIZE - 1);   // and update pointer
 80166a6:	f002 020f 	and.w	r2, r2, #15
 80166aa:	604a      	str	r2, [r1, #4]
 80166ac:	4770      	bx	lr
    uint8_t data = 0;
 80166ae:	2000      	movs	r0, #0
    }

    return data;
}
 80166b0:	4770      	bx	lr
 80166b2:	bf00      	nop
 80166b4:	20001e6c 	.word	0x20001e6c

080166b8 <enqueue_coolant_override>:

ISR_CODE void ISR_FUNC(enqueue_coolant_override)(uint8_t cmd)
{
    uint_fast8_t bptr = (coolant.head + 1) & (OVERRIDE_BUFSIZE - 1);    // Get next head pointer
 80166b8:	4a06      	ldr	r2, [pc, #24]	@ (80166d4 <enqueue_coolant_override+0x1c>)
 80166ba:	6813      	ldr	r3, [r2, #0]
 80166bc:	3301      	adds	r3, #1
 80166be:	f003 030f 	and.w	r3, r3, #15

    if(bptr != coolant.tail) {              // If not buffer full
 80166c2:	6852      	ldr	r2, [r2, #4]
 80166c4:	429a      	cmp	r2, r3
 80166c6:	d004      	beq.n	80166d2 <enqueue_coolant_override+0x1a>
        coolant.buf[coolant.head] = cmd;    // add data to buffer
 80166c8:	4a02      	ldr	r2, [pc, #8]	@ (80166d4 <enqueue_coolant_override+0x1c>)
 80166ca:	6811      	ldr	r1, [r2, #0]
 80166cc:	4411      	add	r1, r2
 80166ce:	7208      	strb	r0, [r1, #8]
        coolant.head = bptr;                // and update pointer
 80166d0:	6013      	str	r3, [r2, #0]
    }
}
 80166d2:	4770      	bx	lr
 80166d4:	20001e54 	.word	0x20001e54

080166d8 <get_coolant_override>:

// Returns 0 if no commands enqueued
uint8_t get_coolant_override (void)
{
    uint8_t data = 0;
    uint_fast8_t bptr = coolant.tail;
 80166d8:	4a07      	ldr	r2, [pc, #28]	@ (80166f8 <get_coolant_override+0x20>)
 80166da:	6853      	ldr	r3, [r2, #4]

    if(bptr != coolant.head) {
 80166dc:	6812      	ldr	r2, [r2, #0]
 80166de:	429a      	cmp	r2, r3
 80166e0:	d007      	beq.n	80166f2 <get_coolant_override+0x1a>
        data = coolant.buf[bptr++];                   // Get next character, increment tmp pointer
 80166e2:	1c5a      	adds	r2, r3, #1
 80166e4:	4904      	ldr	r1, [pc, #16]	@ (80166f8 <get_coolant_override+0x20>)
 80166e6:	440b      	add	r3, r1
 80166e8:	7a18      	ldrb	r0, [r3, #8]
        coolant.tail = bptr & (OVERRIDE_BUFSIZE - 1); // and update pointer
 80166ea:	f002 020f 	and.w	r2, r2, #15
 80166ee:	604a      	str	r2, [r1, #4]
 80166f0:	4770      	bx	lr
    uint8_t data = 0;
 80166f2:	2000      	movs	r0, #0
    }

    return data;
}
 80166f4:	4770      	bx	lr
 80166f6:	bf00      	nop
 80166f8:	20001e54 	.word	0x20001e54

080166fc <flush_override_buffers>:

void flush_override_buffers (void)
{
    feed.head = feed.tail = spindle.head = spindle.tail = coolant.head = coolant.tail = 0;
 80166fc:	4a05      	ldr	r2, [pc, #20]	@ (8016714 <flush_override_buffers+0x18>)
 80166fe:	2300      	movs	r3, #0
 8016700:	6053      	str	r3, [r2, #4]
 8016702:	6013      	str	r3, [r2, #0]
 8016704:	4a04      	ldr	r2, [pc, #16]	@ (8016718 <flush_override_buffers+0x1c>)
 8016706:	6053      	str	r3, [r2, #4]
 8016708:	6013      	str	r3, [r2, #0]
 801670a:	4a04      	ldr	r2, [pc, #16]	@ (801671c <flush_override_buffers+0x20>)
 801670c:	6053      	str	r3, [r2, #4]
 801670e:	6013      	str	r3, [r2, #0]
}
 8016710:	4770      	bx	lr
 8016712:	bf00      	nop
 8016714:	20001e54 	.word	0x20001e54
 8016718:	20001e6c 	.word	0x20001e6c
 801671c:	20001e84 	.word	0x20001e84

08016720 <limit_acceleration_by_axis_maximum>:
}

static inline float limit_acceleration_by_axis_maximum (float *unit_vec)
{
    uint_fast8_t idx = N_AXIS;
    float limit_value = SOME_LARGE_VALUE;
 8016720:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8016768 <limit_acceleration_by_axis_maximum+0x48>
    uint_fast8_t idx = N_AXIS;
 8016724:	2303      	movs	r3, #3
 8016726:	e000      	b.n	801672a <limit_acceleration_by_axis_maximum+0xa>

    do {
        if (unit_vec[--idx] != 0.0f)  // Avoid divide by zero.
            limit_value = min(limit_value, fabsf(settings.axis[idx].acceleration / unit_vec[idx]));
    } while(idx);
 8016728:	b1e3      	cbz	r3, 8016764 <limit_acceleration_by_axis_maximum+0x44>
        if (unit_vec[--idx] != 0.0f)  // Avoid divide by zero.
 801672a:	3b01      	subs	r3, #1
 801672c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8016730:	edd2 7a00 	vldr	s15, [r2]
 8016734:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801673c:	d0f4      	beq.n	8016728 <limit_acceleration_by_axis_maximum+0x8>
            limit_value = min(limit_value, fabsf(settings.axis[idx].acceleration / unit_vec[idx]));
 801673e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8016742:	4a0a      	ldr	r2, [pc, #40]	@ (801676c <limit_acceleration_by_axis_maximum+0x4c>)
 8016744:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016748:	edd2 6a0e 	vldr	s13, [r2, #56]	@ 0x38
 801674c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016750:	eef0 7ac7 	vabs.f32	s15, s14
 8016754:	eef4 7ac0 	vcmpe.f32	s15, s0
 8016758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801675c:	dce4      	bgt.n	8016728 <limit_acceleration_by_axis_maximum+0x8>
 801675e:	eeb0 0a67 	vmov.f32	s0, s15
 8016762:	e7e1      	b.n	8016728 <limit_acceleration_by_axis_maximum+0x8>

    return limit_value;
}
 8016764:	4770      	bx	lr
 8016766:	bf00      	nop
 8016768:	7e967699 	.word	0x7e967699
 801676c:	200022f4 	.word	0x200022f4

08016770 <limit_max_rate_by_axis_maximum>:

static inline float limit_max_rate_by_axis_maximum (float *unit_vec)
{
    uint_fast8_t idx = N_AXIS;
    float limit_value = SOME_LARGE_VALUE;
 8016770:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80167b8 <limit_max_rate_by_axis_maximum+0x48>
    uint_fast8_t idx = N_AXIS;
 8016774:	2303      	movs	r3, #3
 8016776:	e000      	b.n	801677a <limit_max_rate_by_axis_maximum+0xa>

    do {
        if (unit_vec[--idx] != 0.0f)  // Avoid divide by zero.
            limit_value = min(limit_value, fabsf(settings.axis[idx].max_rate / unit_vec[idx]));
    } while(idx);
 8016778:	b1e3      	cbz	r3, 80167b4 <limit_max_rate_by_axis_maximum+0x44>
        if (unit_vec[--idx] != 0.0f)  // Avoid divide by zero.
 801677a:	3b01      	subs	r3, #1
 801677c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8016780:	edd2 7a00 	vldr	s15, [r2]
 8016784:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801678c:	d0f4      	beq.n	8016778 <limit_max_rate_by_axis_maximum+0x8>
            limit_value = min(limit_value, fabsf(settings.axis[idx].max_rate / unit_vec[idx]));
 801678e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8016792:	4a0a      	ldr	r2, [pc, #40]	@ (80167bc <limit_max_rate_by_axis_maximum+0x4c>)
 8016794:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016798:	edd2 6a0d 	vldr	s13, [r2, #52]	@ 0x34
 801679c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80167a0:	eef0 7ac7 	vabs.f32	s15, s14
 80167a4:	eef4 7ac0 	vcmpe.f32	s15, s0
 80167a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167ac:	dce4      	bgt.n	8016778 <limit_max_rate_by_axis_maximum+0x8>
 80167ae:	eeb0 0a67 	vmov.f32	s0, s15
 80167b2:	e7e1      	b.n	8016778 <limit_max_rate_by_axis_maximum+0x8>

    return limit_value;
}
 80167b4:	4770      	bx	lr
 80167b6:	bf00      	nop
 80167b8:	7e967699 	.word	0x7e967699
 80167bc:	200022f4 	.word	0x200022f4

080167c0 <plan_cleanup>:
{
 80167c0:	b538      	push	{r3, r4, r5, lr}
 80167c2:	4604      	mov	r4, r0
    if(block->message) {
 80167c4:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80167c6:	b140      	cbz	r0, 80167da <plan_cleanup+0x1a>
        free(block->message);
 80167c8:	f00c faee 	bl	8022da8 <free>
        block->message = NULL;
 80167cc:	2300      	movs	r3, #0
 80167ce:	64a3      	str	r3, [r4, #72]	@ 0x48
 80167d0:	e003      	b.n	80167da <plan_cleanup+0x1a>
        output_command_t *next = block->output_commands->next;
 80167d2:	6885      	ldr	r5, [r0, #8]
        free(block->output_commands);
 80167d4:	f00c fae8 	bl	8022da8 <free>
        block->output_commands = next;
 80167d8:	64e5      	str	r5, [r4, #76]	@ 0x4c
    while(block->output_commands) {
 80167da:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80167dc:	2800      	cmp	r0, #0
 80167de:	d1f8      	bne.n	80167d2 <plan_cleanup+0x12>
}
 80167e0:	bd38      	pop	{r3, r4, r5, pc}
	...

080167e4 <plan_reset_buffer>:
{
 80167e4:	b508      	push	{r3, lr}
    if(block_buffer_tail) {
 80167e6:	4b0e      	ldr	r3, [pc, #56]	@ (8016820 <plan_reset_buffer+0x3c>)
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	b933      	cbnz	r3, 80167fa <plan_reset_buffer+0x16>
 80167ec:	e00b      	b.n	8016806 <plan_reset_buffer+0x22>
            plan_cleanup(block_buffer_tail);
 80167ee:	f7ff ffe7 	bl	80167c0 <plan_cleanup>
            block_buffer_tail = block_buffer_tail->next;
 80167f2:	4b0b      	ldr	r3, [pc, #44]	@ (8016820 <plan_reset_buffer+0x3c>)
 80167f4:	681a      	ldr	r2, [r3, #0]
 80167f6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80167f8:	601a      	str	r2, [r3, #0]
        while(block_buffer_tail != block_buffer_head) {
 80167fa:	4b09      	ldr	r3, [pc, #36]	@ (8016820 <plan_reset_buffer+0x3c>)
 80167fc:	6818      	ldr	r0, [r3, #0]
 80167fe:	4b09      	ldr	r3, [pc, #36]	@ (8016824 <plan_reset_buffer+0x40>)
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	4298      	cmp	r0, r3
 8016804:	d1f3      	bne.n	80167ee <plan_reset_buffer+0xa>
    block_buffer_tail = block_buffer_head = block_buffer;   // Empty = tail == head
 8016806:	4b08      	ldr	r3, [pc, #32]	@ (8016828 <plan_reset_buffer+0x44>)
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	4a06      	ldr	r2, [pc, #24]	@ (8016824 <plan_reset_buffer+0x40>)
 801680c:	6013      	str	r3, [r2, #0]
 801680e:	4a04      	ldr	r2, [pc, #16]	@ (8016820 <plan_reset_buffer+0x3c>)
 8016810:	6013      	str	r3, [r2, #0]
    next_buffer_head = block_buffer_head->next;             // = next block
 8016812:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016814:	4a05      	ldr	r2, [pc, #20]	@ (801682c <plan_reset_buffer+0x48>)
 8016816:	6011      	str	r1, [r2, #0]
    block_buffer_planned = block_buffer_tail;               // = block_buffer_tail
 8016818:	4a05      	ldr	r2, [pc, #20]	@ (8016830 <plan_reset_buffer+0x4c>)
 801681a:	6013      	str	r3, [r2, #0]
}
 801681c:	bd08      	pop	{r3, pc}
 801681e:	bf00      	nop
 8016820:	20001ec4 	.word	0x20001ec4
 8016824:	20001ec0 	.word	0x20001ec0
 8016828:	20001ec8 	.word	0x20001ec8
 801682c:	20001ebc 	.word	0x20001ebc
 8016830:	20001eb8 	.word	0x20001eb8

08016834 <planner_recalculate>:
{
 8016834:	b570      	push	{r4, r5, r6, lr}
    plan_block_t *block = block_buffer_head->prev;
 8016836:	4b42      	ldr	r3, [pc, #264]	@ (8016940 <planner_recalculate+0x10c>)
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
    if (block == block_buffer_planned)
 801683c:	4b41      	ldr	r3, [pc, #260]	@ (8016944 <planner_recalculate+0x110>)
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	42b3      	cmp	r3, r6
 8016842:	d07b      	beq.n	801693c <planner_recalculate+0x108>
    current->entry_speed_sqr = min(current->max_entry_speed_sqr, 2.0f * current->acceleration * current->millimeters);
 8016844:	ed96 7a08 	vldr	s14, [r6, #32]
 8016848:	edd6 7a09 	vldr	s15, [r6, #36]	@ 0x24
 801684c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016850:	edd6 6a0a 	vldr	s13, [r6, #40]	@ 0x28
 8016854:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016858:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801685c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016860:	d501      	bpl.n	8016866 <planner_recalculate+0x32>
 8016862:	eef0 7a47 	vmov.f32	s15, s14
 8016866:	edc6 7a07 	vstr	s15, [r6, #28]
    block = block->prev;
 801686a:	6d34      	ldr	r4, [r6, #80]	@ 0x50
    if (block == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 801686c:	42a3      	cmp	r3, r4
 801686e:	d111      	bne.n	8016894 <planner_recalculate+0x60>
        if (block == block_buffer_tail)
 8016870:	4b35      	ldr	r3, [pc, #212]	@ (8016948 <planner_recalculate+0x114>)
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	42a3      	cmp	r3, r4
 8016876:	d003      	beq.n	8016880 <planner_recalculate+0x4c>
    next = block_buffer_planned; // Begin at buffer planned pointer
 8016878:	4b32      	ldr	r3, [pc, #200]	@ (8016944 <planner_recalculate+0x110>)
 801687a:	681a      	ldr	r2, [r3, #0]
    block = block_buffer_planned->next;
 801687c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
    while (block != block_buffer_head) {
 801687e:	e03c      	b.n	80168fa <planner_recalculate+0xc6>
            st_update_plan_block_parameters();
 8016880:	f009 fbb4 	bl	801ffec <st_update_plan_block_parameters>
 8016884:	e7f8      	b.n	8016878 <planner_recalculate+0x44>
            st_update_plan_block_parameters();
 8016886:	f009 fbb1 	bl	801ffec <st_update_plan_block_parameters>
 801688a:	e00c      	b.n	80168a6 <planner_recalculate+0x72>
            current->entry_speed_sqr = entry_speed_sqr < current->max_entry_speed_sqr ? entry_speed_sqr : current->max_entry_speed_sqr;
 801688c:	ed84 7a07 	vstr	s14, [r4, #28]
 8016890:	4626      	mov	r6, r4
 8016892:	462c      	mov	r4, r5
    } else while (block != block_buffer_planned) { // Three or more plan-able blocks
 8016894:	4b2b      	ldr	r3, [pc, #172]	@ (8016944 <planner_recalculate+0x110>)
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	42a3      	cmp	r3, r4
 801689a:	d0ed      	beq.n	8016878 <planner_recalculate+0x44>
        block = block->prev;
 801689c:	6d25      	ldr	r5, [r4, #80]	@ 0x50
        if (block == block_buffer_tail)
 801689e:	4b2a      	ldr	r3, [pc, #168]	@ (8016948 <planner_recalculate+0x114>)
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	42ab      	cmp	r3, r5
 80168a4:	d0ef      	beq.n	8016886 <planner_recalculate+0x52>
        if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 80168a6:	edd4 7a07 	vldr	s15, [r4, #28]
 80168aa:	ed94 7a08 	vldr	s14, [r4, #32]
 80168ae:	eef4 7a47 	vcmp.f32	s15, s14
 80168b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168b6:	d0eb      	beq.n	8016890 <planner_recalculate+0x5c>
            entry_speed_sqr = next->entry_speed_sqr + 2.0f * current->acceleration * current->millimeters;
 80168b8:	edd6 6a07 	vldr	s13, [r6, #28]
 80168bc:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 80168c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80168c4:	ed94 6a0a 	vldr	s12, [r4, #40]	@ 0x28
 80168c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80168cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
            current->entry_speed_sqr = entry_speed_sqr < current->max_entry_speed_sqr ? entry_speed_sqr : current->max_entry_speed_sqr;
 80168d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80168d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168d8:	ddd8      	ble.n	801688c <planner_recalculate+0x58>
 80168da:	eeb0 7a67 	vmov.f32	s14, s15
 80168de:	e7d5      	b.n	801688c <planner_recalculate+0x58>
        if (next->entry_speed_sqr == next->max_entry_speed_sqr)
 80168e0:	ed93 7a07 	vldr	s14, [r3, #28]
 80168e4:	edd3 7a08 	vldr	s15, [r3, #32]
 80168e8:	eeb4 7a67 	vcmp.f32	s14, s15
 80168ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168f0:	d101      	bne.n	80168f6 <planner_recalculate+0xc2>
            block_buffer_planned = block;
 80168f2:	4a14      	ldr	r2, [pc, #80]	@ (8016944 <planner_recalculate+0x110>)
 80168f4:	6013      	str	r3, [r2, #0]
        next = block;
 80168f6:	461a      	mov	r2, r3
        block = block->next;
 80168f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    while (block != block_buffer_head) {
 80168fa:	4911      	ldr	r1, [pc, #68]	@ (8016940 <planner_recalculate+0x10c>)
 80168fc:	6809      	ldr	r1, [r1, #0]
 80168fe:	4299      	cmp	r1, r3
 8016900:	d01c      	beq.n	801693c <planner_recalculate+0x108>
        if (current->entry_speed_sqr < next->entry_speed_sqr) {
 8016902:	edd2 7a07 	vldr	s15, [r2, #28]
 8016906:	edd3 6a07 	vldr	s13, [r3, #28]
 801690a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801690e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016912:	d5e5      	bpl.n	80168e0 <planner_recalculate+0xac>
            entry_speed_sqr = current->entry_speed_sqr + 2.0f * current->acceleration * current->millimeters;
 8016914:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 8016918:	ee37 7a07 	vadd.f32	s14, s14, s14
 801691c:	ed92 6a0a 	vldr	s12, [r2, #40]	@ 0x28
 8016920:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016924:	ee77 7a87 	vadd.f32	s15, s15, s14
            if (entry_speed_sqr < next->entry_speed_sqr) {
 8016928:	eef4 6ae7 	vcmpe.f32	s13, s15
 801692c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016930:	ddd6      	ble.n	80168e0 <planner_recalculate+0xac>
                next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 8016932:	edc3 7a07 	vstr	s15, [r3, #28]
                block_buffer_planned = block; // Set optimal plan pointer.
 8016936:	4a03      	ldr	r2, [pc, #12]	@ (8016944 <planner_recalculate+0x110>)
 8016938:	6013      	str	r3, [r2, #0]
 801693a:	e7d1      	b.n	80168e0 <planner_recalculate+0xac>
}
 801693c:	bd70      	pop	{r4, r5, r6, pc}
 801693e:	bf00      	nop
 8016940:	20001ec0 	.word	0x20001ec0
 8016944:	20001eb8 	.word	0x20001eb8
 8016948:	20001ec4 	.word	0x20001ec4

0801694c <plan_get_buffer_size>:
}
 801694c:	4b01      	ldr	r3, [pc, #4]	@ (8016954 <plan_get_buffer_size+0x8>)
 801694e:	6818      	ldr	r0, [r3, #0]
 8016950:	4770      	bx	lr
 8016952:	bf00      	nop
 8016954:	20001ecc 	.word	0x20001ecc

08016958 <plan_reset>:
{
 8016958:	b510      	push	{r4, lr}
    if(block_buffer == NULL) {
 801695a:	4b37      	ldr	r3, [pc, #220]	@ (8016a38 <plan_reset+0xe0>)
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	b16b      	cbz	r3, 801697c <plan_reset+0x24>
    if(block_buffer_size != settings.planner_buffer_blocks)
 8016960:	4b36      	ldr	r3, [pc, #216]	@ (8016a3c <plan_reset+0xe4>)
 8016962:	8ada      	ldrh	r2, [r3, #22]
 8016964:	4b36      	ldr	r3, [pc, #216]	@ (8016a40 <plan_reset+0xe8>)
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	429a      	cmp	r2, r3
 801696a:	d121      	bne.n	80169b0 <plan_reset+0x58>
    if(block_buffer == NULL)
 801696c:	4b32      	ldr	r3, [pc, #200]	@ (8016a38 <plan_reset+0xe0>)
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	2b00      	cmp	r3, #0
 8016972:	d05e      	beq.n	8016a32 <plan_reset+0xda>
    if(block_buffer_tail) {
 8016974:	4b33      	ldr	r3, [pc, #204]	@ (8016a44 <plan_reset+0xec>)
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	bb2b      	cbnz	r3, 80169c6 <plan_reset+0x6e>
 801697a:	e02d      	b.n	80169d8 <plan_reset+0x80>
        block_buffer_size = settings.planner_buffer_blocks;
 801697c:	4b2f      	ldr	r3, [pc, #188]	@ (8016a3c <plan_reset+0xe4>)
 801697e:	8ada      	ldrh	r2, [r3, #22]
 8016980:	4b2f      	ldr	r3, [pc, #188]	@ (8016a40 <plan_reset+0xe8>)
 8016982:	601a      	str	r2, [r3, #0]
        while((block_buffer = malloc((block_buffer_size + 1) * sizeof(plan_block_t))) == NULL) {
 8016984:	4b2e      	ldr	r3, [pc, #184]	@ (8016a40 <plan_reset+0xe8>)
 8016986:	681c      	ldr	r4, [r3, #0]
 8016988:	2058      	movs	r0, #88	@ 0x58
 801698a:	fb04 0000 	mla	r0, r4, r0, r0
 801698e:	f00c fa03 	bl	8022d98 <malloc>
 8016992:	4b29      	ldr	r3, [pc, #164]	@ (8016a38 <plan_reset+0xe0>)
 8016994:	6018      	str	r0, [r3, #0]
 8016996:	2800      	cmp	r0, #0
 8016998:	d1e2      	bne.n	8016960 <plan_reset+0x8>
            if(block_buffer_size > 40)
 801699a:	2c28      	cmp	r4, #40	@ 0x28
 801699c:	d9e0      	bls.n	8016960 <plan_reset+0x8>
                block_buffer_size -= block_buffer_size >= 250 ? 100 : 10;
 801699e:	2cf9      	cmp	r4, #249	@ 0xf9
 80169a0:	d904      	bls.n	80169ac <plan_reset+0x54>
 80169a2:	2364      	movs	r3, #100	@ 0x64
 80169a4:	1ae4      	subs	r4, r4, r3
 80169a6:	4b26      	ldr	r3, [pc, #152]	@ (8016a40 <plan_reset+0xe8>)
 80169a8:	601c      	str	r4, [r3, #0]
 80169aa:	e7eb      	b.n	8016984 <plan_reset+0x2c>
 80169ac:	230a      	movs	r3, #10
 80169ae:	e7f9      	b.n	80169a4 <plan_reset+0x4c>
        protocol_enqueue_foreground_task(report_plain, "Planner buffer size was reduced!");
 80169b0:	4925      	ldr	r1, [pc, #148]	@ (8016a48 <plan_reset+0xf0>)
 80169b2:	4826      	ldr	r0, [pc, #152]	@ (8016a4c <plan_reset+0xf4>)
 80169b4:	f001 fb2c 	bl	8018010 <protocol_enqueue_foreground_task>
 80169b8:	e7d8      	b.n	801696c <plan_reset+0x14>
            plan_cleanup(block_buffer_tail);
 80169ba:	f7ff ff01 	bl	80167c0 <plan_cleanup>
            block_buffer_tail = block_buffer_tail->next;
 80169be:	4b21      	ldr	r3, [pc, #132]	@ (8016a44 <plan_reset+0xec>)
 80169c0:	681a      	ldr	r2, [r3, #0]
 80169c2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80169c4:	601a      	str	r2, [r3, #0]
        while(block_buffer_tail != block_buffer_head) {
 80169c6:	4b1f      	ldr	r3, [pc, #124]	@ (8016a44 <plan_reset+0xec>)
 80169c8:	6818      	ldr	r0, [r3, #0]
 80169ca:	4b21      	ldr	r3, [pc, #132]	@ (8016a50 <plan_reset+0xf8>)
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	4298      	cmp	r0, r3
 80169d0:	d1f3      	bne.n	80169ba <plan_reset+0x62>
        block_buffer_tail = NULL;
 80169d2:	4b1c      	ldr	r3, [pc, #112]	@ (8016a44 <plan_reset+0xec>)
 80169d4:	2200      	movs	r2, #0
 80169d6:	601a      	str	r2, [r3, #0]
    memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 80169d8:	4a1e      	ldr	r2, [pc, #120]	@ (8016a54 <plan_reset+0xfc>)
 80169da:	2300      	movs	r3, #0
 80169dc:	6013      	str	r3, [r2, #0]
 80169de:	6053      	str	r3, [r2, #4]
 80169e0:	6093      	str	r3, [r2, #8]
 80169e2:	60d3      	str	r3, [r2, #12]
 80169e4:	6113      	str	r3, [r2, #16]
 80169e6:	6153      	str	r3, [r2, #20]
 80169e8:	6193      	str	r3, [r2, #24]
    for(idx = 0 ; idx <= block_buffer_size ; idx++) {
 80169ea:	e010      	b.n	8016a0e <plan_reset+0xb6>
        block_buffer[idx].prev = &block_buffer[idx == 0 ? block_buffer_size : idx - 1];
 80169ec:	2258      	movs	r2, #88	@ 0x58
 80169ee:	fb03 f202 	mul.w	r2, r3, r2
 80169f2:	3a58      	subs	r2, #88	@ 0x58
 80169f4:	2058      	movs	r0, #88	@ 0x58
 80169f6:	fb00 1003 	mla	r0, r0, r3, r1
 80169fa:	440a      	add	r2, r1
 80169fc:	6502      	str	r2, [r0, #80]	@ 0x50
        block_buffer[idx].next = &block_buffer[idx == block_buffer_size ? 0 : idx + 1];
 80169fe:	429c      	cmp	r4, r3
 8016a00:	d011      	beq.n	8016a26 <plan_reset+0xce>
 8016a02:	2258      	movs	r2, #88	@ 0x58
 8016a04:	fb03 2202 	mla	r2, r3, r2, r2
 8016a08:	4411      	add	r1, r2
 8016a0a:	6541      	str	r1, [r0, #84]	@ 0x54
    for(idx = 0 ; idx <= block_buffer_size ; idx++) {
 8016a0c:	3301      	adds	r3, #1
 8016a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8016a40 <plan_reset+0xe8>)
 8016a10:	6814      	ldr	r4, [r2, #0]
 8016a12:	429c      	cmp	r4, r3
 8016a14:	d309      	bcc.n	8016a2a <plan_reset+0xd2>
        block_buffer[idx].prev = &block_buffer[idx == 0 ? block_buffer_size : idx - 1];
 8016a16:	4a08      	ldr	r2, [pc, #32]	@ (8016a38 <plan_reset+0xe0>)
 8016a18:	6811      	ldr	r1, [r2, #0]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d1e6      	bne.n	80169ec <plan_reset+0x94>
 8016a1e:	2258      	movs	r2, #88	@ 0x58
 8016a20:	fb04 f202 	mul.w	r2, r4, r2
 8016a24:	e7e6      	b.n	80169f4 <plan_reset+0x9c>
        block_buffer[idx].next = &block_buffer[idx == block_buffer_size ? 0 : idx + 1];
 8016a26:	2200      	movs	r2, #0
 8016a28:	e7ee      	b.n	8016a08 <plan_reset+0xb0>
    plan_reset_buffer();
 8016a2a:	f7ff fedb 	bl	80167e4 <plan_reset_buffer>
    return true;
 8016a2e:	2001      	movs	r0, #1
}
 8016a30:	bd10      	pop	{r4, pc}
        return false;
 8016a32:	2000      	movs	r0, #0
 8016a34:	e7fc      	b.n	8016a30 <plan_reset+0xd8>
 8016a36:	bf00      	nop
 8016a38:	20001ec8 	.word	0x20001ec8
 8016a3c:	200022f4 	.word	0x200022f4
 8016a40:	20001ecc 	.word	0x20001ecc
 8016a44:	20001ec4 	.word	0x20001ec4
 8016a48:	0802c050 	.word	0x0802c050
 8016a4c:	080199a5 	.word	0x080199a5
 8016a50:	20001ec0 	.word	0x20001ec0
 8016a54:	20001e9c 	.word	0x20001e9c

08016a58 <plan_discard_current_block>:
{
 8016a58:	b508      	push	{r3, lr}
    if (block_buffer_tail != block_buffer_head) { // Discard non-empty buffer.
 8016a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8016a88 <plan_discard_current_block+0x30>)
 8016a5c:	6818      	ldr	r0, [r3, #0]
 8016a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8016a8c <plan_discard_current_block+0x34>)
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	4298      	cmp	r0, r3
 8016a64:	d00a      	beq.n	8016a7c <plan_discard_current_block+0x24>
        plan_cleanup(block_buffer_tail);
 8016a66:	f7ff feab 	bl	80167c0 <plan_cleanup>
        if (block_buffer_tail == block_buffer_planned)
 8016a6a:	4b07      	ldr	r3, [pc, #28]	@ (8016a88 <plan_discard_current_block+0x30>)
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	4a08      	ldr	r2, [pc, #32]	@ (8016a90 <plan_discard_current_block+0x38>)
 8016a70:	6812      	ldr	r2, [r2, #0]
 8016a72:	4293      	cmp	r3, r2
 8016a74:	d003      	beq.n	8016a7e <plan_discard_current_block+0x26>
        block_buffer_tail = block_buffer_tail->next;
 8016a76:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016a78:	4b03      	ldr	r3, [pc, #12]	@ (8016a88 <plan_discard_current_block+0x30>)
 8016a7a:	601a      	str	r2, [r3, #0]
}
 8016a7c:	bd08      	pop	{r3, pc}
            block_buffer_planned = block_buffer_tail->next;
 8016a7e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016a80:	4a03      	ldr	r2, [pc, #12]	@ (8016a90 <plan_discard_current_block+0x38>)
 8016a82:	6011      	str	r1, [r2, #0]
 8016a84:	e7f7      	b.n	8016a76 <plan_discard_current_block+0x1e>
 8016a86:	bf00      	nop
 8016a88:	20001ec4 	.word	0x20001ec4
 8016a8c:	20001ec0 	.word	0x20001ec0
 8016a90:	20001eb8 	.word	0x20001eb8

08016a94 <plan_get_system_motion_block>:
}
 8016a94:	4b01      	ldr	r3, [pc, #4]	@ (8016a9c <plan_get_system_motion_block+0x8>)
 8016a96:	6818      	ldr	r0, [r3, #0]
 8016a98:	4770      	bx	lr
 8016a9a:	bf00      	nop
 8016a9c:	20001ec0 	.word	0x20001ec0

08016aa0 <plan_get_current_block>:
    return block_buffer_head == block_buffer_tail ? NULL : block_buffer_tail;
 8016aa0:	4b04      	ldr	r3, [pc, #16]	@ (8016ab4 <plan_get_current_block+0x14>)
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	4a04      	ldr	r2, [pc, #16]	@ (8016ab8 <plan_get_current_block+0x18>)
 8016aa6:	6810      	ldr	r0, [r2, #0]
 8016aa8:	4283      	cmp	r3, r0
 8016aaa:	d000      	beq.n	8016aae <plan_get_current_block+0xe>
}
 8016aac:	4770      	bx	lr
    return block_buffer_head == block_buffer_tail ? NULL : block_buffer_tail;
 8016aae:	2000      	movs	r0, #0
 8016ab0:	e7fc      	b.n	8016aac <plan_get_current_block+0xc>
 8016ab2:	bf00      	nop
 8016ab4:	20001ec0 	.word	0x20001ec0
 8016ab8:	20001ec4 	.word	0x20001ec4

08016abc <plan_get_exec_block_exit_speed_sqr>:
    plan_block_t *block = block_buffer_tail->next;
 8016abc:	4b06      	ldr	r3, [pc, #24]	@ (8016ad8 <plan_get_exec_block_exit_speed_sqr+0x1c>)
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    return block == block_buffer_head ? 0.0f : block->entry_speed_sqr;
 8016ac2:	4a06      	ldr	r2, [pc, #24]	@ (8016adc <plan_get_exec_block_exit_speed_sqr+0x20>)
 8016ac4:	6812      	ldr	r2, [r2, #0]
 8016ac6:	429a      	cmp	r2, r3
 8016ac8:	d002      	beq.n	8016ad0 <plan_get_exec_block_exit_speed_sqr+0x14>
 8016aca:	ed93 0a07 	vldr	s0, [r3, #28]
 8016ace:	4770      	bx	lr
 8016ad0:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8016ae0 <plan_get_exec_block_exit_speed_sqr+0x24>
}
 8016ad4:	4770      	bx	lr
 8016ad6:	bf00      	nop
 8016ad8:	20001ec4 	.word	0x20001ec4
 8016adc:	20001ec0 	.word	0x20001ec0
 8016ae0:	00000000 	.word	0x00000000

08016ae4 <plan_check_full_buffer>:
    return block_buffer_tail == next_buffer_head;
 8016ae4:	4b04      	ldr	r3, [pc, #16]	@ (8016af8 <plan_check_full_buffer+0x14>)
 8016ae6:	6818      	ldr	r0, [r3, #0]
 8016ae8:	4b04      	ldr	r3, [pc, #16]	@ (8016afc <plan_check_full_buffer+0x18>)
 8016aea:	681b      	ldr	r3, [r3, #0]
}
 8016aec:	4298      	cmp	r0, r3
 8016aee:	bf14      	ite	ne
 8016af0:	2000      	movne	r0, #0
 8016af2:	2001      	moveq	r0, #1
 8016af4:	4770      	bx	lr
 8016af6:	bf00      	nop
 8016af8:	20001ec4 	.word	0x20001ec4
 8016afc:	20001ebc 	.word	0x20001ebc

08016b00 <plan_compute_profile_nominal_speed>:
{
 8016b00:	b510      	push	{r4, lr}
 8016b02:	ed2d 8b02 	vpush	{d8}
 8016b06:	4604      	mov	r4, r0
    float nominal_speed = block->condition.units_per_rev || block->spindle.state.synchronized
 8016b08:	7d03      	ldrb	r3, [r0, #20]
                           : block->programmed_rate;
 8016b0a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8016b0e:	d106      	bne.n	8016b1e <plan_compute_profile_nominal_speed+0x1e>
    float nominal_speed = block->condition.units_per_rev || block->spindle.state.synchronized
 8016b10:	f990 303c 	ldrsb.w	r3, [r0, #60]	@ 0x3c
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	db02      	blt.n	8016b1e <plan_compute_profile_nominal_speed+0x1e>
                           : block->programmed_rate;
 8016b18:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
 8016b1c:	e009      	b.n	8016b32 <plan_compute_profile_nominal_speed+0x32>
                           ? block->programmed_rate * block->spindle.hal->get_data(SpindleData_RPM)->rpm
 8016b1e:	ed94 8a0d 	vldr	s16, [r4, #52]	@ 0x34
 8016b22:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8016b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016b26:	2001      	movs	r0, #1
 8016b28:	4798      	blx	r3
 8016b2a:	edd0 7a00 	vldr	s15, [r0]
                           : block->programmed_rate;
 8016b2e:	ee68 7a27 	vmul.f32	s15, s16, s15
    if(block->condition.rapid_motion)
 8016b32:	7d23      	ldrb	r3, [r4, #20]
 8016b34:	f013 0f01 	tst.w	r3, #1
 8016b38:	d014      	beq.n	8016b64 <plan_compute_profile_nominal_speed+0x64>
        nominal_speed *= (0.01f * (float)sys.override.rapid_rate);
 8016b3a:	4b18      	ldr	r3, [pc, #96]	@ (8016b9c <plan_compute_profile_nominal_speed+0x9c>)
 8016b3c:	ed93 0a08 	vldr	s0, [r3, #32]
 8016b40:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8016b44:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8016ba0 <plan_compute_profile_nominal_speed+0xa0>
 8016b48:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016b4c:	ee20 0a27 	vmul.f32	s0, s0, s15
    return nominal_speed > MINIMUM_FEED_RATE ? nominal_speed : MINIMUM_FEED_RATE;
 8016b50:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8016b54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b5c:	dd1a      	ble.n	8016b94 <plan_compute_profile_nominal_speed+0x94>
}
 8016b5e:	ecbd 8b02 	vpop	{d8}
 8016b62:	bd10      	pop	{r4, pc}
        if(!block->condition.no_feed_override)
 8016b64:	f013 0f10 	tst.w	r3, #16
 8016b68:	d10a      	bne.n	8016b80 <plan_compute_profile_nominal_speed+0x80>
            nominal_speed *= (0.01f * (float)sys.override.feed_rate);
 8016b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8016b9c <plan_compute_profile_nominal_speed+0x9c>)
 8016b6c:	ed93 7a07 	vldr	s14, [r3, #28]
 8016b70:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8016b74:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8016ba0 <plan_compute_profile_nominal_speed+0xa0>
 8016b78:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016b7c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if(nominal_speed > block->rapid_rate)
 8016b80:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 8016b84:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b8c:	d4e0      	bmi.n	8016b50 <plan_compute_profile_nominal_speed+0x50>
 8016b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8016b92:	e7dd      	b.n	8016b50 <plan_compute_profile_nominal_speed+0x50>
    return nominal_speed > MINIMUM_FEED_RATE ? nominal_speed : MINIMUM_FEED_RATE;
 8016b94:	eeb0 0a67 	vmov.f32	s0, s15
 8016b98:	e7e1      	b.n	8016b5e <plan_compute_profile_nominal_speed+0x5e>
 8016b9a:	bf00      	nop
 8016b9c:	20001bbc 	.word	0x20001bbc
 8016ba0:	3c23d70a 	.word	0x3c23d70a

08016ba4 <plan_update_velocity_profile_parameters>:
        planner_recalculate();
}

// Re-calculates buffered motions profile parameters upon a motion-based override change.
static bool plan_update_velocity_profile_parameters (void)
{
 8016ba4:	b510      	push	{r4, lr}
 8016ba6:	ed2d 8b02 	vpush	{d8}
    if(block_buffer_tail != block_buffer_head) {
 8016baa:	4b1b      	ldr	r3, [pc, #108]	@ (8016c18 <plan_update_velocity_profile_parameters+0x74>)
 8016bac:	681c      	ldr	r4, [r3, #0]
 8016bae:	4b1b      	ldr	r3, [pc, #108]	@ (8016c1c <plan_update_velocity_profile_parameters+0x78>)
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	429c      	cmp	r4, r3
 8016bb4:	d025      	beq.n	8016c02 <plan_update_velocity_profile_parameters+0x5e>

        plan_block_t *block = block_buffer_tail;
        float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 8016bb6:	ed9f 8a1a 	vldr	s16, [pc, #104]	@ 8016c20 <plan_update_velocity_profile_parameters+0x7c>
 8016bba:	e005      	b.n	8016bc8 <plan_update_velocity_profile_parameters+0x24>
    block->max_entry_speed_sqr = nominal_speed > prev_nominal_speed ? (prev_nominal_speed * prev_nominal_speed) : (nominal_speed * nominal_speed);
 8016bbc:	ee20 8a00 	vmul.f32	s16, s0, s0
 8016bc0:	e010      	b.n	8016be4 <plan_update_velocity_profile_parameters+0x40>

        while (block != block_buffer_head) {
            prev_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), prev_nominal_speed);
            block = block->next;
 8016bc2:	6d64      	ldr	r4, [r4, #84]	@ 0x54
            prev_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), prev_nominal_speed);
 8016bc4:	eeb0 8a40 	vmov.f32	s16, s0
        while (block != block_buffer_head) {
 8016bc8:	4b14      	ldr	r3, [pc, #80]	@ (8016c1c <plan_update_velocity_profile_parameters+0x78>)
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	42a3      	cmp	r3, r4
 8016bce:	d015      	beq.n	8016bfc <plan_update_velocity_profile_parameters+0x58>
            prev_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), prev_nominal_speed);
 8016bd0:	4620      	mov	r0, r4
 8016bd2:	f7ff ff95 	bl	8016b00 <plan_compute_profile_nominal_speed>
    block->max_entry_speed_sqr = nominal_speed > prev_nominal_speed ? (prev_nominal_speed * prev_nominal_speed) : (nominal_speed * nominal_speed);
 8016bd6:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8016bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bde:	dded      	ble.n	8016bbc <plan_update_velocity_profile_parameters+0x18>
 8016be0:	ee28 8a08 	vmul.f32	s16, s16, s16
 8016be4:	ed84 8a08 	vstr	s16, [r4, #32]
    if (block->max_entry_speed_sqr > block->max_junction_speed_sqr)
 8016be8:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8016bec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bf4:	dde5      	ble.n	8016bc2 <plan_update_velocity_profile_parameters+0x1e>
        block->max_entry_speed_sqr = block->max_junction_speed_sqr;
 8016bf6:	edc4 7a08 	vstr	s15, [r4, #32]
 8016bfa:	e7e2      	b.n	8016bc2 <plan_update_velocity_profile_parameters+0x1e>
        }

        pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 8016bfc:	4b09      	ldr	r3, [pc, #36]	@ (8016c24 <plan_update_velocity_profile_parameters+0x80>)
 8016bfe:	ed83 8a06 	vstr	s16, [r3, #24]
    }

    return block_buffer_tail != block_buffer_head;
 8016c02:	4b05      	ldr	r3, [pc, #20]	@ (8016c18 <plan_update_velocity_profile_parameters+0x74>)
 8016c04:	6818      	ldr	r0, [r3, #0]
 8016c06:	4b05      	ldr	r3, [pc, #20]	@ (8016c1c <plan_update_velocity_profile_parameters+0x78>)
 8016c08:	681b      	ldr	r3, [r3, #0]
}
 8016c0a:	1ac0      	subs	r0, r0, r3
 8016c0c:	bf18      	it	ne
 8016c0e:	2001      	movne	r0, #1
 8016c10:	ecbd 8b02 	vpop	{d8}
 8016c14:	bd10      	pop	{r4, pc}
 8016c16:	bf00      	nop
 8016c18:	20001ec4 	.word	0x20001ec4
 8016c1c:	20001ec0 	.word	0x20001ec0
 8016c20:	7e967699 	.word	0x7e967699
 8016c24:	20001e9c 	.word	0x20001e9c

08016c28 <plan_buffer_line>:
{
 8016c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c2c:	ed2d 8b04 	vpush	{d8-d9}
 8016c30:	b08c      	sub	sp, #48	@ 0x30
 8016c32:	4607      	mov	r7, r0
 8016c34:	460e      	mov	r6, r1
    plan_block_t *block = block_buffer_head;
 8016c36:	4bb6      	ldr	r3, [pc, #728]	@ (8016f10 <plan_buffer_line+0x2e8>)
 8016c38:	681c      	ldr	r4, [r3, #0]
    memset(block, 0, sizeof(plan_block_t) - 2 * sizeof(plan_block_t *));    // Zero all block values (except linked list pointers).
 8016c3a:	2250      	movs	r2, #80	@ 0x50
 8016c3c:	2100      	movs	r1, #0
 8016c3e:	4620      	mov	r0, r4
 8016c40:	f00e f971 	bl	8024f26 <memset>
    memcpy(&block->spindle, &pl_data->spindle, sizeof(spindle_t));          // Copy spindle data (RPM etc)
 8016c44:	6870      	ldr	r0, [r6, #4]
 8016c46:	68b1      	ldr	r1, [r6, #8]
 8016c48:	68f2      	ldr	r2, [r6, #12]
 8016c4a:	6933      	ldr	r3, [r6, #16]
 8016c4c:	63a0      	str	r0, [r4, #56]	@ 0x38
 8016c4e:	63e1      	str	r1, [r4, #60]	@ 0x3c
 8016c50:	6422      	str	r2, [r4, #64]	@ 0x40
 8016c52:	6463      	str	r3, [r4, #68]	@ 0x44
    block->condition = pl_data->condition;
 8016c54:	6973      	ldr	r3, [r6, #20]
 8016c56:	6163      	str	r3, [r4, #20]
    block->overrides = pl_data->overrides;
 8016c58:	7e33      	ldrb	r3, [r6, #24]
 8016c5a:	74a3      	strb	r3, [r4, #18]
    block->line_number = pl_data->line_number;
 8016c5c:	69f3      	ldr	r3, [r6, #28]
 8016c5e:	61a3      	str	r3, [r4, #24]
    block->offset_id = pl_data->offset_id;
 8016c60:	f996 3019 	ldrsb.w	r3, [r6, #25]
 8016c64:	7463      	strb	r3, [r4, #17]
    block->output_commands = pl_data->output_commands;
 8016c66:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8016c68:	64e3      	str	r3, [r4, #76]	@ 0x4c
    block->message = pl_data->message;
 8016c6a:	6a33      	ldr	r3, [r6, #32]
 8016c6c:	64a3      	str	r3, [r4, #72]	@ 0x48
    memcpy(position_steps, block->condition.system_motion ? sys.position : pl.position, sizeof(position_steps));
 8016c6e:	7d23      	ldrb	r3, [r4, #20]
 8016c70:	f013 0f02 	tst.w	r3, #2
 8016c74:	d006      	beq.n	8016c84 <plan_buffer_line+0x5c>
 8016c76:	4aa7      	ldr	r2, [pc, #668]	@ (8016f14 <plan_buffer_line+0x2ec>)
 8016c78:	ab06      	add	r3, sp, #24
 8016c7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8016c7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    idx = N_AXIS;
 8016c80:	2503      	movs	r5, #3
 8016c82:	e021      	b.n	8016cc8 <plan_buffer_line+0xa0>
    memcpy(position_steps, block->condition.system_motion ? sys.position : pl.position, sizeof(position_steps));
 8016c84:	4aa4      	ldr	r2, [pc, #656]	@ (8016f18 <plan_buffer_line+0x2f0>)
 8016c86:	e7f7      	b.n	8016c78 <plan_buffer_line+0x50>
            block->steps[idx] = labs(delta_steps);
 8016c88:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8016c8c:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8016c90:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
            block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8016c94:	68e2      	ldr	r2, [r4, #12]
 8016c96:	4293      	cmp	r3, r2
 8016c98:	bf38      	it	cc
 8016c9a:	4613      	movcc	r3, r2
 8016c9c:	60e3      	str	r3, [r4, #12]
            unit_vec[idx] = (float)delta_steps / settings.axis[idx].steps_per_mm; // Store unit vector numerator
 8016c9e:	ee07 0a90 	vmov	s15, r0
 8016ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ca6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8016caa:	4b9c      	ldr	r3, [pc, #624]	@ (8016f1c <plan_buffer_line+0x2f4>)
 8016cac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8016cb0:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8016cb4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016cb8:	ab0c      	add	r3, sp, #48	@ 0x30
 8016cba:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8016cbe:	ed03 7a09 	vstr	s14, [r3, #-36]	@ 0xffffffdc
        if (delta_steps < 0)
 8016cc2:	2800      	cmp	r0, #0
 8016cc4:	db25      	blt.n	8016d12 <plan_buffer_line+0xea>
    } while(idx);
 8016cc6:	b355      	cbz	r5, 8016d1e <plan_buffer_line+0xf6>
        idx--;
 8016cc8:	3d01      	subs	r5, #1
        target_steps[idx] = lroundf(target[idx] * settings.axis[idx].steps_per_mm);
 8016cca:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8016cce:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8016cd2:	ed93 0a00 	vldr	s0, [r3]
 8016cd6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8016cda:	4b90      	ldr	r3, [pc, #576]	@ (8016f1c <plan_buffer_line+0x2f4>)
 8016cdc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8016ce0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8016ce4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016ce8:	f010 ff5c 	bl	8027ba4 <lroundf>
 8016cec:	f108 0330 	add.w	r3, r8, #48	@ 0x30
 8016cf0:	446b      	add	r3, sp
 8016cf2:	f843 0c0c 	str.w	r0, [r3, #-12]
        if((delta_steps = target_steps[idx] - position_steps[idx])) {
 8016cf6:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8016cfa:	1ac0      	subs	r0, r0, r3
 8016cfc:	d1c4      	bne.n	8016c88 <plan_buffer_line+0x60>
            block->steps[idx] = 0;
 8016cfe:	2300      	movs	r3, #0
 8016d00:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
            unit_vec[idx] = 0.0f; // Store unit vector numerator
 8016d04:	2200      	movs	r2, #0
 8016d06:	ab0c      	add	r3, sp, #48	@ 0x30
 8016d08:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8016d0c:	f843 2c24 	str.w	r2, [r3, #-36]
 8016d10:	e7d7      	b.n	8016cc2 <plan_buffer_line+0x9a>
            block->direction_bits.mask |= bit(idx);
 8016d12:	7c23      	ldrb	r3, [r4, #16]
 8016d14:	2201      	movs	r2, #1
 8016d16:	40aa      	lsls	r2, r5
 8016d18:	4313      	orrs	r3, r2
 8016d1a:	7423      	strb	r3, [r4, #16]
 8016d1c:	e7d3      	b.n	8016cc6 <plan_buffer_line+0x9e>
    if(block->spindle.css) {
 8016d1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d05d      	beq.n	8016de0 <plan_buffer_line+0x1b8>
        if((pos = (float)position_steps[block->spindle.css->axis] / settings.axis[block->spindle.css->axis].steps_per_mm - block->spindle.css->tool_offset) > 0.0f) {
 8016d24:	695a      	ldr	r2, [r3, #20]
 8016d26:	a90c      	add	r1, sp, #48	@ 0x30
 8016d28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016d2c:	ed11 7a06 	vldr	s14, [r1, #-24]	@ 0xffffffe8
 8016d30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016d34:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016d38:	4978      	ldr	r1, [pc, #480]	@ (8016f1c <plan_buffer_line+0x2f4>)
 8016d3a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8016d3e:	edd2 6a0c 	vldr	s13, [r2, #48]	@ 0x30
 8016d42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016d46:	ed93 7a04 	vldr	s14, [r3, #16]
 8016d4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016d4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d56:	dd13      	ble.n	8016d80 <plan_buffer_line+0x158>
            if((block->spindle.rpm = block->spindle.css->surface_speed / (pos * (float)(2.0f * M_PI))) > block->spindle.css->max_rpm)
 8016d58:	edd3 6a00 	vldr	s13, [r3]
 8016d5c:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8016f20 <plan_buffer_line+0x2f8>
 8016d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016d64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016d68:	ed84 7a0e 	vstr	s14, [r4, #56]	@ 0x38
 8016d6c:	edd3 7a03 	vldr	s15, [r3, #12]
 8016d70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d78:	dd04      	ble.n	8016d84 <plan_buffer_line+0x15c>
                block->spindle.rpm = block->spindle.css->max_rpm;
 8016d7a:	edc4 7a0e 	vstr	s15, [r4, #56]	@ 0x38
 8016d7e:	e001      	b.n	8016d84 <plan_buffer_line+0x15c>
            block->spindle.rpm = block->spindle.css->max_rpm;
 8016d80:	68da      	ldr	r2, [r3, #12]
 8016d82:	63a2      	str	r2, [r4, #56]	@ 0x38
        if((pos = target[block->spindle.css->axis] - block->spindle.css->tool_offset) > 0.0f) {
 8016d84:	695a      	ldr	r2, [r3, #20]
 8016d86:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 8016d8a:	edd7 7a00 	vldr	s15, [r7]
 8016d8e:	ed93 7a04 	vldr	s14, [r3, #16]
 8016d92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016d96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d9e:	dd14      	ble.n	8016dca <plan_buffer_line+0x1a2>
            if((block->spindle.css->target_rpm = block->spindle.css->surface_speed / (pos * (float)(2.0f * M_PI))) > block->spindle.css->max_rpm)
 8016da0:	edd3 6a00 	vldr	s13, [r3]
 8016da4:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8016f20 <plan_buffer_line+0x2f8>
 8016da8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016db0:	ed83 7a01 	vstr	s14, [r3, #4]
 8016db4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016db6:	edd3 7a03 	vldr	s15, [r3, #12]
 8016dba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dc2:	dd04      	ble.n	8016dce <plan_buffer_line+0x1a6>
                block->spindle.css->target_rpm = block->spindle.css->max_rpm;
 8016dc4:	edc3 7a01 	vstr	s15, [r3, #4]
 8016dc8:	e001      	b.n	8016dce <plan_buffer_line+0x1a6>
            block->spindle.css->target_rpm = block->spindle.css->max_rpm;
 8016dca:	68da      	ldr	r2, [r3, #12]
 8016dcc:	605a      	str	r2, [r3, #4]
        block->spindle.css->delta_rpm = block->spindle.css->target_rpm - block->spindle.rpm;
 8016dce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016dd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8016dd4:	ed94 7a0e 	vldr	s14, [r4, #56]	@ 0x38
 8016dd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016ddc:	edc3 7a02 	vstr	s15, [r3, #8]
    pl_data->message = NULL;         // Indicate message is already queued for display on execution
 8016de0:	2300      	movs	r3, #0
 8016de2:	6233      	str	r3, [r6, #32]
    pl_data->output_commands = NULL; // Indicate commands are already queued for execution
 8016de4:	6273      	str	r3, [r6, #36]	@ 0x24
    if(block->step_event_count == 0) {
 8016de6:	68e3      	ldr	r3, [r4, #12]
 8016de8:	b363      	cbz	r3, 8016e44 <plan_buffer_line+0x21c>
    block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 8016dea:	a803      	add	r0, sp, #12
 8016dec:	f7ff f886 	bl	8015efc <convert_delta_vector_to_unit_vector>
 8016df0:	eeb0 8a40 	vmov.f32	s16, s0
 8016df4:	ed84 0a0a 	vstr	s0, [r4, #40]	@ 0x28
    block->acceleration = limit_acceleration_by_axis_maximum(unit_vec);
 8016df8:	a803      	add	r0, sp, #12
 8016dfa:	f7ff fc91 	bl	8016720 <limit_acceleration_by_axis_maximum>
 8016dfe:	ed84 0a09 	vstr	s0, [r4, #36]	@ 0x24
    block->rapid_rate = limit_max_rate_by_axis_maximum(unit_vec);
 8016e02:	a803      	add	r0, sp, #12
 8016e04:	f7ff fcb4 	bl	8016770 <limit_max_rate_by_axis_maximum>
 8016e08:	ed84 0a0c 	vstr	s0, [r4, #48]	@ 0x30
    if (block->condition.rapid_motion)
 8016e0c:	7d23      	ldrb	r3, [r4, #20]
 8016e0e:	f013 0f01 	tst.w	r3, #1
 8016e12:	d01c      	beq.n	8016e4e <plan_buffer_line+0x226>
        block->programmed_rate = block->rapid_rate;
 8016e14:	ed84 0a0d 	vstr	s0, [r4, #52]	@ 0x34
    if ((block_buffer_head == block_buffer_tail) || (block->condition.system_motion)) {
 8016e18:	4a3d      	ldr	r2, [pc, #244]	@ (8016f10 <plan_buffer_line+0x2e8>)
 8016e1a:	6811      	ldr	r1, [r2, #0]
 8016e1c:	4a41      	ldr	r2, [pc, #260]	@ (8016f24 <plan_buffer_line+0x2fc>)
 8016e1e:	6812      	ldr	r2, [r2, #0]
 8016e20:	4291      	cmp	r1, r2
 8016e22:	d002      	beq.n	8016e2a <plan_buffer_line+0x202>
 8016e24:	f013 0f02 	tst.w	r3, #2
 8016e28:	d01d      	beq.n	8016e66 <plan_buffer_line+0x23e>
        block->entry_speed_sqr = 0.0f;
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	61e3      	str	r3, [r4, #28]
        block->max_junction_speed_sqr = 0.0f; // Starting from rest. Enforce start from zero velocity.
 8016e2e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (!block->condition.system_motion) {
 8016e30:	7d23      	ldrb	r3, [r4, #20]
 8016e32:	f013 0f02 	tst.w	r3, #2
 8016e36:	d07f      	beq.n	8016f38 <plan_buffer_line+0x310>
    return true;
 8016e38:	2001      	movs	r0, #1
}
 8016e3a:	b00c      	add	sp, #48	@ 0x30
 8016e3c:	ecbd 8b04 	vpop	{d8-d9}
 8016e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        plan_cleanup(block); // TODO: output message and execute output_commands?
 8016e44:	4620      	mov	r0, r4
 8016e46:	f7ff fcbb 	bl	80167c0 <plan_cleanup>
        return false;
 8016e4a:	2000      	movs	r0, #0
 8016e4c:	e7f5      	b.n	8016e3a <plan_buffer_line+0x212>
        block->programmed_rate = pl_data->feed_rate;
 8016e4e:	edd6 7a00 	vldr	s15, [r6]
 8016e52:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
        if (block->condition.inverse_time)
 8016e56:	f013 0f20 	tst.w	r3, #32
 8016e5a:	d0dd      	beq.n	8016e18 <plan_buffer_line+0x1f0>
            block->programmed_rate *= block->millimeters;
 8016e5c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8016e60:	ed84 8a0d 	vstr	s16, [r4, #52]	@ 0x34
 8016e64:	e7d8      	b.n	8016e18 <plan_buffer_line+0x1f0>
        float junction_cos_theta = 0.0f;
 8016e66:	ed9f 8a30 	vldr	s16, [pc, #192]	@ 8016f28 <plan_buffer_line+0x300>
        idx = N_AXIS;
 8016e6a:	2303      	movs	r3, #3
            idx--;
 8016e6c:	3b01      	subs	r3, #1
            junction_cos_theta -= pl.previous_unit_vec[idx] * unit_vec[idx];
 8016e6e:	1c99      	adds	r1, r3, #2
 8016e70:	4a29      	ldr	r2, [pc, #164]	@ (8016f18 <plan_buffer_line+0x2f0>)
 8016e72:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016e76:	ed92 7a01 	vldr	s14, [r2, #4]
 8016e7a:	aa0c      	add	r2, sp, #48	@ 0x30
 8016e7c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8016e80:	ed52 7a09 	vldr	s15, [r2, #-36]	@ 0xffffffdc
 8016e84:	ee67 6a27 	vmul.f32	s13, s14, s15
 8016e88:	ee38 8a66 	vsub.f32	s16, s16, s13
            junction_unit_vec[idx] = unit_vec[idx] - pl.previous_unit_vec[idx];
 8016e8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016e90:	ed42 7a0c 	vstr	s15, [r2, #-48]	@ 0xffffffd0
        } while(idx);
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d1e9      	bne.n	8016e6c <plan_buffer_line+0x244>
        if (junction_cos_theta > 0.999999f)
 8016e98:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8016f2c <plan_buffer_line+0x304>
 8016e9c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ea4:	dd02      	ble.n	8016eac <plan_buffer_line+0x284>
            block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED * MINIMUM_JUNCTION_SPEED;
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016eaa:	e7c1      	b.n	8016e30 <plan_buffer_line+0x208>
        else if (junction_cos_theta < -0.999999f) {
 8016eac:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8016f30 <plan_buffer_line+0x308>
 8016eb0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016eb8:	d502      	bpl.n	8016ec0 <plan_buffer_line+0x298>
            block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 8016eba:	4b1e      	ldr	r3, [pc, #120]	@ (8016f34 <plan_buffer_line+0x30c>)
 8016ebc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016ebe:	e7b7      	b.n	8016e30 <plan_buffer_line+0x208>
            convert_delta_vector_to_unit_vector(junction_unit_vec);
 8016ec0:	4668      	mov	r0, sp
 8016ec2:	f7ff f81b 	bl	8015efc <convert_delta_vector_to_unit_vector>
            float junction_acceleration = limit_acceleration_by_axis_maximum(junction_unit_vec);
 8016ec6:	4668      	mov	r0, sp
 8016ec8:	f7ff fc2a 	bl	8016720 <limit_acceleration_by_axis_maximum>
 8016ecc:	eeb0 9a40 	vmov.f32	s18, s0
            float sin_theta_d2 = sqrtf(0.5f * (1.0f - junction_cos_theta)); // Trig half angle identity. Always positive.
 8016ed0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8016ed4:	ee38 8ac8 	vsub.f32	s16, s17, s16
 8016ed8:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8016edc:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016ee0:	f010 fd82 	bl	80279e8 <sqrtf>
            block->max_junction_speed_sqr = max(MINIMUM_JUNCTION_SPEED * MINIMUM_JUNCTION_SPEED,
 8016ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8016f1c <plan_buffer_line+0x2f4>)
 8016ee6:	edd3 7a01 	vldr	s15, [r3, #4]
 8016eea:	ee67 7a89 	vmul.f32	s15, s15, s18
 8016eee:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016ef2:	ee78 8ac0 	vsub.f32	s17, s17, s0
 8016ef6:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8016efa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f02:	d402      	bmi.n	8016f0a <plan_buffer_line+0x2e2>
 8016f04:	ed84 7a0b 	vstr	s14, [r4, #44]	@ 0x2c
 8016f08:	e792      	b.n	8016e30 <plan_buffer_line+0x208>
 8016f0a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8016f28 <plan_buffer_line+0x300>
 8016f0e:	e7f9      	b.n	8016f04 <plan_buffer_line+0x2dc>
 8016f10:	20001ec0 	.word	0x20001ec0
 8016f14:	20001c44 	.word	0x20001c44
 8016f18:	20001e9c 	.word	0x20001e9c
 8016f1c:	200022f4 	.word	0x200022f4
 8016f20:	40c90fdb 	.word	0x40c90fdb
 8016f24:	20001ec4 	.word	0x20001ec4
 8016f28:	00000000 	.word	0x00000000
 8016f2c:	3f7fffef 	.word	0x3f7fffef
 8016f30:	bf7fffef 	.word	0xbf7fffef
 8016f34:	7e967699 	.word	0x7e967699
        pl.previous_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), pl.previous_nominal_speed);
 8016f38:	4620      	mov	r0, r4
 8016f3a:	f7ff fde1 	bl	8016b00 <plan_compute_profile_nominal_speed>
 8016f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8016fa8 <plan_buffer_line+0x380>)
 8016f40:	edd3 7a06 	vldr	s15, [r3, #24]
    block->max_entry_speed_sqr = nominal_speed > prev_nominal_speed ? (prev_nominal_speed * prev_nominal_speed) : (nominal_speed * nominal_speed);
 8016f44:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f4c:	dd29      	ble.n	8016fa2 <plan_buffer_line+0x37a>
 8016f4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016f52:	edc4 7a08 	vstr	s15, [r4, #32]
    if (block->max_entry_speed_sqr > block->max_junction_speed_sqr)
 8016f56:	ed94 7a0b 	vldr	s14, [r4, #44]	@ 0x2c
 8016f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f62:	dd01      	ble.n	8016f68 <plan_buffer_line+0x340>
        block->max_entry_speed_sqr = block->max_junction_speed_sqr;
 8016f64:	ed84 7a08 	vstr	s14, [r4, #32]
        pl.previous_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), pl.previous_nominal_speed);
 8016f68:	4b0f      	ldr	r3, [pc, #60]	@ (8016fa8 <plan_buffer_line+0x380>)
 8016f6a:	ed83 0a06 	vstr	s0, [r3, #24]
        if(!block->condition.backlash_motion) {
 8016f6e:	7d23      	ldrb	r3, [r4, #20]
 8016f70:	f013 0f08 	tst.w	r3, #8
 8016f74:	d10b      	bne.n	8016f8e <plan_buffer_line+0x366>
            memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8016f76:	4b0c      	ldr	r3, [pc, #48]	@ (8016fa8 <plan_buffer_line+0x380>)
 8016f78:	f103 040c 	add.w	r4, r3, #12
 8016f7c:	aa03      	add	r2, sp, #12
 8016f7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8016f80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8016f84:	aa0c      	add	r2, sp, #48	@ 0x30
 8016f86:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 8016f8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        block_buffer_head = next_buffer_head;
 8016f8e:	4b07      	ldr	r3, [pc, #28]	@ (8016fac <plan_buffer_line+0x384>)
 8016f90:	681a      	ldr	r2, [r3, #0]
 8016f92:	4907      	ldr	r1, [pc, #28]	@ (8016fb0 <plan_buffer_line+0x388>)
 8016f94:	600a      	str	r2, [r1, #0]
        next_buffer_head = block_buffer_head->next;
 8016f96:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8016f98:	601a      	str	r2, [r3, #0]
        planner_recalculate();
 8016f9a:	f7ff fc4b 	bl	8016834 <planner_recalculate>
    return true;
 8016f9e:	2001      	movs	r0, #1
 8016fa0:	e74b      	b.n	8016e3a <plan_buffer_line+0x212>
    block->max_entry_speed_sqr = nominal_speed > prev_nominal_speed ? (prev_nominal_speed * prev_nominal_speed) : (nominal_speed * nominal_speed);
 8016fa2:	ee60 7a00 	vmul.f32	s15, s0, s0
 8016fa6:	e7d4      	b.n	8016f52 <plan_buffer_line+0x32a>
 8016fa8:	20001e9c 	.word	0x20001e9c
 8016fac:	20001ebc 	.word	0x20001ebc
 8016fb0:	20001ec0 	.word	0x20001ec0

08016fb4 <plan_sync_position>:
    memcpy(pl.position, sys.position, sizeof(pl.position));
 8016fb4:	4b02      	ldr	r3, [pc, #8]	@ (8016fc0 <plan_sync_position+0xc>)
 8016fb6:	4a03      	ldr	r2, [pc, #12]	@ (8016fc4 <plan_sync_position+0x10>)
 8016fb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8016fba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8016fbe:	4770      	bx	lr
 8016fc0:	20001e9c 	.word	0x20001e9c
 8016fc4:	20001c44 	.word	0x20001c44

08016fc8 <plan_get_block_buffer_available>:
    return (uint_fast16_t)(block_buffer_head >= block_buffer_tail
 8016fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8016ff4 <plan_get_block_buffer_available+0x2c>)
 8016fca:	681a      	ldr	r2, [r3, #0]
 8016fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8016ff8 <plan_get_block_buffer_available+0x30>)
 8016fce:	6818      	ldr	r0, [r3, #0]
 8016fd0:	4282      	cmp	r2, r0
 8016fd2:	d307      	bcc.n	8016fe4 <plan_get_block_buffer_available+0x1c>
                            ? (block_buffer_size - (block_buffer_head - block_buffer_tail))
 8016fd4:	4909      	ldr	r1, [pc, #36]	@ (8016ffc <plan_get_block_buffer_available+0x34>)
 8016fd6:	6809      	ldr	r1, [r1, #0]
 8016fd8:	1a12      	subs	r2, r2, r0
 8016fda:	10d2      	asrs	r2, r2, #3
    return (uint_fast16_t)(block_buffer_head >= block_buffer_tail
 8016fdc:	4808      	ldr	r0, [pc, #32]	@ (8017000 <plan_get_block_buffer_available+0x38>)
 8016fde:	fb00 1012 	mls	r0, r0, r2, r1
 8016fe2:	4770      	bx	lr
                            : ((block_buffer_tail - block_buffer_head) - 1));
 8016fe4:	1a80      	subs	r0, r0, r2
 8016fe6:	10c0      	asrs	r0, r0, #3
 8016fe8:	4b05      	ldr	r3, [pc, #20]	@ (8017000 <plan_get_block_buffer_available+0x38>)
 8016fea:	fb03 f000 	mul.w	r0, r3, r0
 8016fee:	3801      	subs	r0, #1
}
 8016ff0:	4770      	bx	lr
 8016ff2:	bf00      	nop
 8016ff4:	20001ec0 	.word	0x20001ec0
 8016ff8:	20001ec4 	.word	0x20001ec4
 8016ffc:	20001ecc 	.word	0x20001ecc
 8017000:	ba2e8ba3 	.word	0xba2e8ba3

08017004 <plan_cycle_reinitialize>:
{
 8017004:	b508      	push	{r3, lr}
    st_update_plan_block_parameters();
 8017006:	f008 fff1 	bl	801ffec <st_update_plan_block_parameters>
    if((block_buffer_planned = block_buffer_tail) != block_buffer_head)
 801700a:	4b05      	ldr	r3, [pc, #20]	@ (8017020 <plan_cycle_reinitialize+0x1c>)
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	4a05      	ldr	r2, [pc, #20]	@ (8017024 <plan_cycle_reinitialize+0x20>)
 8017010:	6013      	str	r3, [r2, #0]
 8017012:	4a05      	ldr	r2, [pc, #20]	@ (8017028 <plan_cycle_reinitialize+0x24>)
 8017014:	6812      	ldr	r2, [r2, #0]
 8017016:	4293      	cmp	r3, r2
 8017018:	d001      	beq.n	801701e <plan_cycle_reinitialize+0x1a>
        planner_recalculate();
 801701a:	f7ff fc0b 	bl	8016834 <planner_recalculate>
}
 801701e:	bd08      	pop	{r3, pc}
 8017020:	20001ec4 	.word	0x20001ec4
 8017024:	20001eb8 	.word	0x20001eb8
 8017028:	20001ec0 	.word	0x20001ec0

0801702c <plan_feed_override>:
// Set feed overrides
void plan_feed_override (override_t feed_override, override_t rapid_override)
{
    bool feedrate_changed = false, rapidrate_changed = false;

    if(sys.override.control.feed_rate_disable)
 801702c:	4b1a      	ldr	r3, [pc, #104]	@ (8017098 <plan_feed_override+0x6c>)
 801702e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8017032:	f013 0f01 	tst.w	r3, #1
 8017036:	d12d      	bne.n	8017094 <plan_feed_override+0x68>
{
 8017038:	b570      	push	{r4, r5, r6, lr}
        return;

    feed_override = constrain(feed_override, MIN_FEED_RATE_OVERRIDE, MAX_FEED_RATE_OVERRIDE);
 801703a:	2809      	cmp	r0, #9
 801703c:	d904      	bls.n	8017048 <plan_feed_override+0x1c>
 801703e:	28c8      	cmp	r0, #200	@ 0xc8
 8017040:	bf28      	it	cs
 8017042:	20c8      	movcs	r0, #200	@ 0xc8
 8017044:	4604      	mov	r4, r0
 8017046:	e000      	b.n	801704a <plan_feed_override+0x1e>
 8017048:	240a      	movs	r4, #10

    if((feedrate_changed = feed_override != sys.override.feed_rate) ||
 801704a:	4b13      	ldr	r3, [pc, #76]	@ (8017098 <plan_feed_override+0x6c>)
 801704c:	69dd      	ldr	r5, [r3, #28]
 801704e:	42a5      	cmp	r5, r4
 8017050:	d106      	bne.n	8017060 <plan_feed_override+0x34>
         (rapidrate_changed = rapid_override != sys.override.rapid_rate)) {
 8017052:	6a1b      	ldr	r3, [r3, #32]
 8017054:	428b      	cmp	r3, r1
 8017056:	bf14      	ite	ne
 8017058:	2601      	movne	r6, #1
 801705a:	2600      	moveq	r6, #0
    if((feedrate_changed = feed_override != sys.override.feed_rate) ||
 801705c:	d101      	bne.n	8017062 <plan_feed_override+0x36>
 801705e:	e015      	b.n	801708c <plan_feed_override+0x60>
    bool feedrate_changed = false, rapidrate_changed = false;
 8017060:	2600      	movs	r6, #0
        sys.override.feed_rate = feed_override;
 8017062:	4b0d      	ldr	r3, [pc, #52]	@ (8017098 <plan_feed_override+0x6c>)
 8017064:	61dc      	str	r4, [r3, #28]
        sys.override.rapid_rate = rapid_override;
 8017066:	6219      	str	r1, [r3, #32]
        system_add_rt_report(Report_Overrides); // Set to report change immediately
 8017068:	2040      	movs	r0, #64	@ 0x40
 801706a:	f00b f829 	bl	80220c0 <system_add_rt_report>
        if(plan_update_velocity_profile_parameters())
 801706e:	f7ff fd99 	bl	8016ba4 <plan_update_velocity_profile_parameters>
 8017072:	b960      	cbnz	r0, 801708e <plan_feed_override+0x62>
            plan_cycle_reinitialize();
        if(grbl.on_override_changed) {
 8017074:	4b09      	ldr	r3, [pc, #36]	@ (801709c <plan_feed_override+0x70>)
 8017076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017078:	b143      	cbz	r3, 801708c <plan_feed_override+0x60>
            if(feedrate_changed)
 801707a:	42a5      	cmp	r5, r4
 801707c:	d001      	beq.n	8017082 <plan_feed_override+0x56>
                grbl.on_override_changed(OverrideChanged_FeedRate);
 801707e:	2000      	movs	r0, #0
 8017080:	4798      	blx	r3
            if(rapidrate_changed)
 8017082:	b11e      	cbz	r6, 801708c <plan_feed_override+0x60>
                grbl.on_override_changed(OverrideChanged_RapidRate);
 8017084:	4b05      	ldr	r3, [pc, #20]	@ (801709c <plan_feed_override+0x70>)
 8017086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017088:	2000      	movs	r0, #0
 801708a:	4798      	blx	r3
        }
    }
}
 801708c:	bd70      	pop	{r4, r5, r6, pc}
            plan_cycle_reinitialize();
 801708e:	f7ff ffb9 	bl	8017004 <plan_cycle_reinitialize>
 8017092:	e7ef      	b.n	8017074 <plan_feed_override+0x48>
 8017094:	4770      	bx	lr
 8017096:	bf00      	nop
 8017098:	20001bbc 	.word	0x20001bbc
 801709c:	20001ac4 	.word	0x20001ac4

080170a0 <plan_data_init>:

void plan_data_init (plan_line_data_t *plan_data)
{
 80170a0:	b510      	push	{r4, lr}
 80170a2:	4604      	mov	r4, r0
    memset(plan_data, 0, sizeof(plan_line_data_t));
 80170a4:	2228      	movs	r2, #40	@ 0x28
 80170a6:	2100      	movs	r1, #0
 80170a8:	f00d ff3d 	bl	8024f26 <memset>
    plan_data->offset_id = gc_state.offset_id;
 80170ac:	4b0c      	ldr	r3, [pc, #48]	@ (80170e0 <plan_data_init+0x40>)
 80170ae:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 80170b2:	7662      	strb	r2, [r4, #25]
    plan_data->spindle.hal = gc_state.spindle.hal ? gc_state.spindle.hal : spindle_get(0);
 80170b4:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80170b6:	b178      	cbz	r0, 80170d8 <plan_data_init+0x38>
 80170b8:	6120      	str	r0, [r4, #16]
    plan_data->condition.target_validated = plan_data->condition.target_valid = sys.soft_limits.mask == 0;
 80170ba:	4b0a      	ldr	r3, [pc, #40]	@ (80170e4 <plan_data_init+0x44>)
 80170bc:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80170c0:	fab3 f383 	clz	r3, r3
 80170c4:	095b      	lsrs	r3, r3, #5
 80170c6:	7d62      	ldrb	r2, [r4, #21]
 80170c8:	f363 0241 	bfi	r2, r3, #1, #1
 80170cc:	7562      	strb	r2, [r4, #21]
 80170ce:	b2d2      	uxtb	r2, r2
 80170d0:	f363 0282 	bfi	r2, r3, #2, #1
 80170d4:	7562      	strb	r2, [r4, #21]
#ifdef KINEMATICS_API
    plan_data->rate_multiplier = 1.0f;
#endif
}
 80170d6:	bd10      	pop	{r4, pc}
    plan_data->spindle.hal = gc_state.spindle.hal ? gc_state.spindle.hal : spindle_get(0);
 80170d8:	f007 fb86 	bl	801e7e8 <spindle_get>
 80170dc:	e7ec      	b.n	80170b8 <plan_data_init+0x18>
 80170de:	bf00      	nop
 80170e0:	20001614 	.word	0x20001614
 80170e4:	20001bbc 	.word	0x20001bbc

080170e8 <recheck_line>:

static bool recheck_line (char *line, line_flags_t *flags)
{
    bool keep_rt_commands = false, first_char = true;

    flags->value = 0;
 80170e8:	2300      	movs	r3, #0
 80170ea:	700b      	strb	r3, [r1, #0]

    if(*line != '\0') do {
 80170ec:	7803      	ldrb	r3, [r0, #0]
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d075      	beq.n	80171de <recheck_line+0xf6>
{
 80170f2:	b410      	push	{r4}
 80170f4:	4602      	mov	r2, r0
    bool keep_rt_commands = false, first_char = true;
 80170f6:	2401      	movs	r4, #1
 80170f8:	2000      	movs	r0, #0
 80170fa:	e008      	b.n	801710e <recheck_line+0x26>

        switch(*line) {
 80170fc:	2b5b      	cmp	r3, #91	@ 0x5b
 80170fe:	d101      	bne.n	8017104 <recheck_line+0x1c>

            case '$':
            case '[':
                if(first_char)
 8017100:	2c00      	cmp	r4, #0
 8017102:	d16a      	bne.n	80171da <recheck_line+0xf2>
                break;
        }

        first_char = false;

    } while(*++line != '\0');
 8017104:	f812 3f01 	ldrb.w	r3, [r2, #1]!
        first_char = false;
 8017108:	2400      	movs	r4, #0
    } while(*++line != '\0');
 801710a:	2b00      	cmp	r3, #0
 801710c:	d069      	beq.n	80171e2 <recheck_line+0xfa>
        switch(*line) {
 801710e:	7813      	ldrb	r3, [r2, #0]
 8017110:	2b3b      	cmp	r3, #59	@ 0x3b
 8017112:	d8f3      	bhi.n	80170fc <recheck_line+0x14>
 8017114:	2b24      	cmp	r3, #36	@ 0x24
 8017116:	d3f5      	bcc.n	8017104 <recheck_line+0x1c>
 8017118:	3b24      	subs	r3, #36	@ 0x24
 801711a:	2b17      	cmp	r3, #23
 801711c:	d8f2      	bhi.n	8017104 <recheck_line+0x1c>
 801711e:	f20f 0c08 	addw	ip, pc, #8
 8017122:	f85c f023 	ldr.w	pc, [ip, r3, lsl #2]
 8017126:	bf00      	nop
 8017128:	08017101 	.word	0x08017101
 801712c:	08017105 	.word	0x08017105
 8017130:	08017105 	.word	0x08017105
 8017134:	08017105 	.word	0x08017105
 8017138:	08017189 	.word	0x08017189
 801713c:	080171b5 	.word	0x080171b5
 8017140:	08017105 	.word	0x08017105
 8017144:	08017105 	.word	0x08017105
 8017148:	08017105 	.word	0x08017105
 801714c:	08017105 	.word	0x08017105
 8017150:	08017105 	.word	0x08017105
 8017154:	08017105 	.word	0x08017105
 8017158:	08017105 	.word	0x08017105
 801715c:	08017105 	.word	0x08017105
 8017160:	08017105 	.word	0x08017105
 8017164:	08017105 	.word	0x08017105
 8017168:	08017105 	.word	0x08017105
 801716c:	08017105 	.word	0x08017105
 8017170:	08017105 	.word	0x08017105
 8017174:	08017105 	.word	0x08017105
 8017178:	08017105 	.word	0x08017105
 801717c:	08017105 	.word	0x08017105
 8017180:	08017105 	.word	0x08017105
 8017184:	080171c9 	.word	0x080171c9
                if(!keep_rt_commands && (flags->comment_parentheses = !flags->comment_semicolon))
 8017188:	2800      	cmp	r0, #0
 801718a:	d1bb      	bne.n	8017104 <recheck_line+0x1c>
 801718c:	780c      	ldrb	r4, [r1, #0]
 801718e:	08a3      	lsrs	r3, r4, #2
 8017190:	f083 0301 	eor.w	r3, r3, #1
 8017194:	f003 0301 	and.w	r3, r3, #1
 8017198:	f363 0441 	bfi	r4, r3, #1, #1
 801719c:	700c      	strb	r4, [r1, #0]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d0b0      	beq.n	8017104 <recheck_line+0x1c>
                    keep_rt_commands = !hal.driver_cap.no_gcode_message_handling; // Suspend real-time processing of printable command characters.
 80171a2:	4b11      	ldr	r3, [pc, #68]	@ (80171e8 <recheck_line+0x100>)
 80171a4:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 80171a8:	f013 0f04 	tst.w	r3, #4
 80171ac:	bf0c      	ite	eq
 80171ae:	2001      	moveq	r0, #1
 80171b0:	2000      	movne	r0, #0
 80171b2:	e7a7      	b.n	8017104 <recheck_line+0x1c>
                if(!flags->comment_semicolon)
 80171b4:	780b      	ldrb	r3, [r1, #0]
 80171b6:	f013 0f04 	tst.w	r3, #4
 80171ba:	d1a3      	bne.n	8017104 <recheck_line+0x1c>
                    flags->comment_parentheses = keep_rt_commands = false;
 80171bc:	780b      	ldrb	r3, [r1, #0]
 80171be:	f36f 0341 	bfc	r3, #1, #1
 80171c2:	700b      	strb	r3, [r1, #0]
 80171c4:	2000      	movs	r0, #0
 80171c6:	e79d      	b.n	8017104 <recheck_line+0x1c>
                if(!flags->comment_parentheses) {
 80171c8:	780b      	ldrb	r3, [r1, #0]
 80171ca:	f013 0f02 	tst.w	r3, #2
 80171ce:	d199      	bne.n	8017104 <recheck_line+0x1c>
                    flags->comment_semicolon = On;
 80171d0:	f043 0304 	orr.w	r3, r3, #4
 80171d4:	700b      	strb	r3, [r1, #0]
                    keep_rt_commands = false;
 80171d6:	2000      	movs	r0, #0
 80171d8:	e794      	b.n	8017104 <recheck_line+0x1c>
                    keep_rt_commands = true;
 80171da:	4620      	mov	r0, r4
 80171dc:	e792      	b.n	8017104 <recheck_line+0x1c>
    bool keep_rt_commands = false, first_char = true;
 80171de:	2000      	movs	r0, #0

    return keep_rt_commands;
}
 80171e0:	4770      	bx	lr
 80171e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171e6:	4770      	bx	lr
 80171e8:	200018dc 	.word	0x200018dc

080171ec <protocol_execute_rt_commands>:
    return protocol_enqueue_foreground_task(fn, (void *)&dummy_data);
}

// Execute enqueued functions.
static void protocol_execute_rt_commands (sys_state_t state)
{
 80171ec:	b538      	push	{r3, r4, r5, lr}
    while(realtime_queue.tail != realtime_queue.head) {
 80171ee:	e00d      	b.n	801720c <protocol_execute_rt_commands+0x20>
        uint_fast8_t bptr = realtime_queue.tail;
        if(realtime_queue.task[bptr].task.fn) {
            if(realtime_queue.task[bptr].data == (void *)&dummy_data) {
                on_execute_realtime_ptr call = realtime_queue.task[bptr].task.fn_deprecated;
                realtime_queue.task[bptr].task.fn_deprecated = NULL;
 80171f0:	1c62      	adds	r2, r4, #1
 80171f2:	4b17      	ldr	r3, [pc, #92]	@ (8017250 <protocol_execute_rt_commands+0x64>)
 80171f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80171f8:	2200      	movs	r2, #0
 80171fa:	605a      	str	r2, [r3, #4]
                call(state_get());
 80171fc:	f007 ff84 	bl	801f108 <state_get>
 8017200:	47a8      	blx	r5
                foreground_task_ptr call = realtime_queue.task[bptr].task.fn;
                realtime_queue.task[bptr].task.fn = NULL;
                call(realtime_queue.task[bptr].data);
            }
        }
        realtime_queue.tail = (bptr + 1) & (RT_QUEUE_SIZE - 1);
 8017202:	3401      	adds	r4, #1
 8017204:	f004 040f 	and.w	r4, r4, #15
 8017208:	4b11      	ldr	r3, [pc, #68]	@ (8017250 <protocol_execute_rt_commands+0x64>)
 801720a:	605c      	str	r4, [r3, #4]
    while(realtime_queue.tail != realtime_queue.head) {
 801720c:	4b10      	ldr	r3, [pc, #64]	@ (8017250 <protocol_execute_rt_commands+0x64>)
 801720e:	685a      	ldr	r2, [r3, #4]
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	429a      	cmp	r2, r3
 8017214:	d016      	beq.n	8017244 <protocol_execute_rt_commands+0x58>
        uint_fast8_t bptr = realtime_queue.tail;
 8017216:	4b0e      	ldr	r3, [pc, #56]	@ (8017250 <protocol_execute_rt_commands+0x64>)
 8017218:	685c      	ldr	r4, [r3, #4]
        if(realtime_queue.task[bptr].task.fn) {
 801721a:	1c62      	adds	r2, r4, #1
 801721c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017220:	685d      	ldr	r5, [r3, #4]
 8017222:	2d00      	cmp	r5, #0
 8017224:	d0ed      	beq.n	8017202 <protocol_execute_rt_commands+0x16>
            if(realtime_queue.task[bptr].data == (void *)&dummy_data) {
 8017226:	4613      	mov	r3, r2
 8017228:	4a09      	ldr	r2, [pc, #36]	@ (8017250 <protocol_execute_rt_commands+0x64>)
 801722a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801722e:	4b09      	ldr	r3, [pc, #36]	@ (8017254 <protocol_execute_rt_commands+0x68>)
 8017230:	4298      	cmp	r0, r3
 8017232:	d0dd      	beq.n	80171f0 <protocol_execute_rt_commands+0x4>
                realtime_queue.task[bptr].task.fn = NULL;
 8017234:	1c62      	adds	r2, r4, #1
 8017236:	4b06      	ldr	r3, [pc, #24]	@ (8017250 <protocol_execute_rt_commands+0x64>)
 8017238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801723c:	2200      	movs	r2, #0
 801723e:	605a      	str	r2, [r3, #4]
                call(realtime_queue.task[bptr].data);
 8017240:	47a8      	blx	r5
 8017242:	e7de      	b.n	8017202 <protocol_execute_rt_commands+0x16>
    }

    if(!sys.driver_started)
 8017244:	4b04      	ldr	r3, [pc, #16]	@ (8017258 <protocol_execute_rt_commands+0x6c>)
 8017246:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 801724a:	b903      	cbnz	r3, 801724e <protocol_execute_rt_commands+0x62>
        while(true);
 801724c:	e7fe      	b.n	801724c <protocol_execute_rt_commands+0x60>
}
 801724e:	bd38      	pop	{r3, r4, r5, pc}
 8017250:	20001ed8 	.word	0x20001ed8
 8017254:	0802c078 	.word	0x0802c078
 8017258:	20001bbc 	.word	0x20001bbc

0801725c <protocol_on_execute_delay>:
{
 801725c:	b510      	push	{r4, lr}
 801725e:	4604      	mov	r4, r0
    if(sys.rt_exec_state & EXEC_RT_COMMAND) {
 8017260:	4b09      	ldr	r3, [pc, #36]	@ (8017288 <protocol_on_execute_delay+0x2c>)
 8017262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017264:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8017268:	d008      	beq.n	801727c <protocol_on_execute_delay+0x20>
        system_clear_exec_state_flag(EXEC_RT_COMMAND);
 801726a:	4b08      	ldr	r3, [pc, #32]	@ (801728c <protocol_on_execute_delay+0x30>)
 801726c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801726e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8017272:	4807      	ldr	r0, [pc, #28]	@ (8017290 <protocol_on_execute_delay+0x34>)
 8017274:	4798      	blx	r3
        protocol_execute_rt_commands(0);
 8017276:	2000      	movs	r0, #0
 8017278:	f7ff ffb8 	bl	80171ec <protocol_execute_rt_commands>
    on_execute_delay(state);
 801727c:	4b05      	ldr	r3, [pc, #20]	@ (8017294 <protocol_on_execute_delay+0x38>)
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	4620      	mov	r0, r4
 8017282:	4798      	blx	r3
}
 8017284:	bd10      	pop	{r4, pc}
 8017286:	bf00      	nop
 8017288:	20001bbc 	.word	0x20001bbc
 801728c:	200018dc 	.word	0x200018dc
 8017290:	20001c04 	.word	0x20001c04
 8017294:	20001ed4 	.word	0x20001ed4

08017298 <protocol_poll_cmd>:
{
 8017298:	b508      	push	{r3, lr}
    if((c = hal.stream.read()) != SERIAL_NO_DATA) {
 801729a:	4b2b      	ldr	r3, [pc, #172]	@ (8017348 <protocol_poll_cmd+0xb0>)
 801729c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80172a0:	4798      	blx	r3
 80172a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80172a6:	d04b      	beq.n	8017340 <protocol_poll_cmd+0xa8>
        if ((c == '\n') || (c == '\r')) { // End of line reached
 80172a8:	280a      	cmp	r0, #10
 80172aa:	d014      	beq.n	80172d6 <protocol_poll_cmd+0x3e>
 80172ac:	280d      	cmp	r0, #13
 80172ae:	d012      	beq.n	80172d6 <protocol_poll_cmd+0x3e>
        } else if(c == ASCII_DEL || c == ASCII_BS) {
 80172b0:	287f      	cmp	r0, #127	@ 0x7f
 80172b2:	d032      	beq.n	801731a <protocol_poll_cmd+0x82>
 80172b4:	2808      	cmp	r0, #8
 80172b6:	d030      	beq.n	801731a <protocol_poll_cmd+0x82>
        } else if(char_counter == 0 ? c != ' ' : char_counter < (LINE_BUFFER_SIZE - 1))
 80172b8:	4b24      	ldr	r3, [pc, #144]	@ (801734c <protocol_poll_cmd+0xb4>)
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d137      	bne.n	8017330 <protocol_poll_cmd+0x98>
 80172c0:	f1b0 0220 	subs.w	r2, r0, #32
 80172c4:	bf18      	it	ne
 80172c6:	2201      	movne	r2, #1
 80172c8:	b1d2      	cbz	r2, 8017300 <protocol_poll_cmd+0x68>
            line[char_counter++] = c;
 80172ca:	1c59      	adds	r1, r3, #1
 80172cc:	4a1f      	ldr	r2, [pc, #124]	@ (801734c <protocol_poll_cmd+0xb4>)
 80172ce:	6011      	str	r1, [r2, #0]
 80172d0:	4a1f      	ldr	r2, [pc, #124]	@ (8017350 <protocol_poll_cmd+0xb8>)
 80172d2:	54d0      	strb	r0, [r2, r3]
 80172d4:	e014      	b.n	8017300 <protocol_poll_cmd+0x68>
            line[char_counter] = '\0';
 80172d6:	4b1d      	ldr	r3, [pc, #116]	@ (801734c <protocol_poll_cmd+0xb4>)
 80172d8:	681a      	ldr	r2, [r3, #0]
 80172da:	4b1d      	ldr	r3, [pc, #116]	@ (8017350 <protocol_poll_cmd+0xb8>)
 80172dc:	2100      	movs	r1, #0
 80172de:	5499      	strb	r1, [r3, r2]
            gc_state.last_error = *line == '\0' ? Status_OK : (*line == '$' ? system_execute_line(line) : Status_SystemGClock);
 80172e0:	7818      	ldrb	r0, [r3, #0]
 80172e2:	b110      	cbz	r0, 80172ea <protocol_poll_cmd+0x52>
 80172e4:	2824      	cmp	r0, #36	@ 0x24
 80172e6:	d014      	beq.n	8017312 <protocol_poll_cmd+0x7a>
 80172e8:	2009      	movs	r0, #9
 80172ea:	4b1a      	ldr	r3, [pc, #104]	@ (8017354 <protocol_poll_cmd+0xbc>)
 80172ec:	f883 0081 	strb.w	r0, [r3, #129]	@ 0x81
            char_counter = 0;
 80172f0:	2300      	movs	r3, #0
 80172f2:	4a16      	ldr	r2, [pc, #88]	@ (801734c <protocol_poll_cmd+0xb4>)
 80172f4:	6013      	str	r3, [r2, #0]
            *line = '\0';
 80172f6:	4a16      	ldr	r2, [pc, #88]	@ (8017350 <protocol_poll_cmd+0xb8>)
 80172f8:	7013      	strb	r3, [r2, #0]
            grbl.report.status_message(gc_state.last_error);
 80172fa:	4b17      	ldr	r3, [pc, #92]	@ (8017358 <protocol_poll_cmd+0xc0>)
 80172fc:	689b      	ldr	r3, [r3, #8]
 80172fe:	4798      	blx	r3
        keep_rt_commands = char_counter > 0 && *line == '$';
 8017300:	4b12      	ldr	r3, [pc, #72]	@ (801734c <protocol_poll_cmd+0xb4>)
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	b1cb      	cbz	r3, 801733a <protocol_poll_cmd+0xa2>
 8017306:	4b12      	ldr	r3, [pc, #72]	@ (8017350 <protocol_poll_cmd+0xb8>)
 8017308:	781b      	ldrb	r3, [r3, #0]
 801730a:	2b24      	cmp	r3, #36	@ 0x24
 801730c:	d019      	beq.n	8017342 <protocol_poll_cmd+0xaa>
 801730e:	2200      	movs	r2, #0
 8017310:	e014      	b.n	801733c <protocol_poll_cmd+0xa4>
            gc_state.last_error = *line == '\0' ? Status_OK : (*line == '$' ? system_execute_line(line) : Status_SystemGClock);
 8017312:	4618      	mov	r0, r3
 8017314:	f00a fd1a 	bl	8021d4c <system_execute_line>
 8017318:	e7e7      	b.n	80172ea <protocol_poll_cmd+0x52>
            if(char_counter)
 801731a:	4b0c      	ldr	r3, [pc, #48]	@ (801734c <protocol_poll_cmd+0xb4>)
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	2b00      	cmp	r3, #0
 8017320:	d0ee      	beq.n	8017300 <protocol_poll_cmd+0x68>
                line[--char_counter] = '\0';
 8017322:	3b01      	subs	r3, #1
 8017324:	4a09      	ldr	r2, [pc, #36]	@ (801734c <protocol_poll_cmd+0xb4>)
 8017326:	6013      	str	r3, [r2, #0]
 8017328:	4a09      	ldr	r2, [pc, #36]	@ (8017350 <protocol_poll_cmd+0xb8>)
 801732a:	2100      	movs	r1, #0
 801732c:	54d1      	strb	r1, [r2, r3]
 801732e:	e7e7      	b.n	8017300 <protocol_poll_cmd+0x68>
        } else if(char_counter == 0 ? c != ' ' : char_counter < (LINE_BUFFER_SIZE - 1))
 8017330:	2bff      	cmp	r3, #255	@ 0xff
 8017332:	bf8c      	ite	hi
 8017334:	2200      	movhi	r2, #0
 8017336:	2201      	movls	r2, #1
 8017338:	e7c6      	b.n	80172c8 <protocol_poll_cmd+0x30>
        keep_rt_commands = char_counter > 0 && *line == '$';
 801733a:	2200      	movs	r2, #0
 801733c:	4b07      	ldr	r3, [pc, #28]	@ (801735c <protocol_poll_cmd+0xc4>)
 801733e:	701a      	strb	r2, [r3, #0]
}
 8017340:	bd08      	pop	{r3, pc}
        keep_rt_commands = char_counter > 0 && *line == '$';
 8017342:	2201      	movs	r2, #1
 8017344:	e7fa      	b.n	801733c <protocol_poll_cmd+0xa4>
 8017346:	bf00      	nop
 8017348:	200018dc 	.word	0x200018dc
 801734c:	2000216c 	.word	0x2000216c
 8017350:	20002068 	.word	0x20002068
 8017354:	20001614 	.word	0x20001614
 8017358:	20001ac4 	.word	0x20001ac4
 801735c:	20001f60 	.word	0x20001f60

08017360 <protocol_enqueue_gcode>:
    bool ok = xcommand[0] == '\0' &&
 8017360:	4b16      	ldr	r3, [pc, #88]	@ (80173bc <protocol_enqueue_gcode+0x5c>)
 8017362:	781b      	ldrb	r3, [r3, #0]
               (state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_JOG|STATE_TOOL_CHANGE))) &&
 8017364:	b10b      	cbz	r3, 801736a <protocol_enqueue_gcode+0xa>
    bool ok = xcommand[0] == '\0' &&
 8017366:	2000      	movs	r0, #0
}
 8017368:	4770      	bx	lr
{
 801736a:	b510      	push	{r4, lr}
 801736c:	4604      	mov	r4, r0
               (state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_JOG|STATE_TOOL_CHANGE))) &&
 801736e:	f007 fecb 	bl	801f108 <state_get>
    bool ok = xcommand[0] == '\0' &&
 8017372:	b9b8      	cbnz	r0, 80173a4 <protocol_enqueue_gcode+0x44>
                 bit_isfalse(sys.rt_exec_state, EXEC_MOTION_CANCEL);
 8017374:	4b12      	ldr	r3, [pc, #72]	@ (80173c0 <protocol_enqueue_gcode+0x60>)
 8017376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
               (state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_JOG|STATE_TOOL_CHANGE))) &&
 8017378:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801737c:	d11a      	bne.n	80173b4 <protocol_enqueue_gcode+0x54>
    if(ok && gc_state.file_run)
 801737e:	4b11      	ldr	r3, [pc, #68]	@ (80173c4 <protocol_enqueue_gcode+0x64>)
 8017380:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8017384:	b143      	cbz	r3, 8017398 <protocol_enqueue_gcode+0x38>
        ok = gc_state.modal.program_flow != ProgramFlow_Running || strncmp((char *)gcode, "$J=", 3);
 8017386:	4b0f      	ldr	r3, [pc, #60]	@ (80173c4 <protocol_enqueue_gcode+0x64>)
 8017388:	7e1b      	ldrb	r3, [r3, #24]
 801738a:	b92b      	cbnz	r3, 8017398 <protocol_enqueue_gcode+0x38>
 801738c:	2203      	movs	r2, #3
 801738e:	490e      	ldr	r1, [pc, #56]	@ (80173c8 <protocol_enqueue_gcode+0x68>)
 8017390:	4620      	mov	r0, r4
 8017392:	f00d fdec 	bl	8024f6e <strncmp>
 8017396:	b178      	cbz	r0, 80173b8 <protocol_enqueue_gcode+0x58>
        strcpy(xcommand, gcode);
 8017398:	4621      	mov	r1, r4
 801739a:	4808      	ldr	r0, [pc, #32]	@ (80173bc <protocol_enqueue_gcode+0x5c>)
 801739c:	f00d ff1b 	bl	80251d6 <strcpy>
 80173a0:	2001      	movs	r0, #1
 80173a2:	e008      	b.n	80173b6 <protocol_enqueue_gcode+0x56>
               (state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_JOG|STATE_TOOL_CHANGE))) &&
 80173a4:	f007 feb0 	bl	801f108 <state_get>
 80173a8:	f240 2321 	movw	r3, #545	@ 0x221
 80173ac:	4218      	tst	r0, r3
 80173ae:	d1e1      	bne.n	8017374 <protocol_enqueue_gcode+0x14>
    bool ok = xcommand[0] == '\0' &&
 80173b0:	2000      	movs	r0, #0
 80173b2:	e000      	b.n	80173b6 <protocol_enqueue_gcode+0x56>
 80173b4:	2000      	movs	r0, #0
}
 80173b6:	bd10      	pop	{r4, pc}
        ok = gc_state.modal.program_flow != ProgramFlow_Running || strncmp((char *)gcode, "$J=", 3);
 80173b8:	2000      	movs	r0, #0
 80173ba:	e7fc      	b.n	80173b6 <protocol_enqueue_gcode+0x56>
 80173bc:	20001f64 	.word	0x20001f64
 80173c0:	20001bbc 	.word	0x20001bbc
 80173c4:	20001614 	.word	0x20001614
 80173c8:	0802c074 	.word	0x0802c074

080173cc <protocol_auto_cycle_start>:
{
 80173cc:	b508      	push	{r3, lr}
    if (plan_get_current_block() != NULL) // Check if there are any blocks in the buffer.
 80173ce:	f7ff fb67 	bl	8016aa0 <plan_get_current_block>
 80173d2:	b120      	cbz	r0, 80173de <protocol_auto_cycle_start+0x12>
        system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 80173d4:	4b02      	ldr	r3, [pc, #8]	@ (80173e0 <protocol_auto_cycle_start+0x14>)
 80173d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80173d8:	2102      	movs	r1, #2
 80173da:	4802      	ldr	r0, [pc, #8]	@ (80173e4 <protocol_auto_cycle_start+0x18>)
 80173dc:	4798      	blx	r3
}
 80173de:	bd08      	pop	{r3, pc}
 80173e0:	200018dc 	.word	0x200018dc
 80173e4:	20001c04 	.word	0x20001c04

080173e8 <protocol_exec_rt_system>:
{
 80173e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (sys.rt_exec_alarm && (rt_exec = system_clear_exec_alarm())) { // Enter only if any bit flag is true
 80173ea:	4ba3      	ldr	r3, [pc, #652]	@ (8017678 <protocol_exec_rt_system+0x290>)
 80173ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d078      	beq.n	80174e4 <protocol_exec_rt_system+0xfc>
 80173f2:	4ba2      	ldr	r3, [pc, #648]	@ (801767c <protocol_exec_rt_system+0x294>)
 80173f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80173f6:	2100      	movs	r1, #0
 80173f8:	48a1      	ldr	r0, [pc, #644]	@ (8017680 <protocol_exec_rt_system+0x298>)
 80173fa:	4798      	blx	r3
 80173fc:	4604      	mov	r4, r0
 80173fe:	2800      	cmp	r0, #0
 8017400:	f000 8137 	beq.w	8017672 <protocol_exec_rt_system+0x28a>
        if((sys.reset_pending = !!(sys.rt_exec_state & EXEC_RESET))) {
 8017404:	4b9c      	ldr	r3, [pc, #624]	@ (8017678 <protocol_exec_rt_system+0x290>)
 8017406:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
 8017408:	f3c5 1540 	ubfx	r5, r5, #5, #1
 801740c:	711d      	strb	r5, [r3, #4]
 801740e:	b995      	cbnz	r5, 8017436 <protocol_exec_rt_system+0x4e>
        system_raise_alarm((alarm_code_t)rt_exec);
 8017410:	b2e6      	uxtb	r6, r4
 8017412:	4630      	mov	r0, r6
 8017414:	f00a fe06 	bl	8022024 <system_raise_alarm>
        if(killed) // Tell driver/plugins about reset.
 8017418:	b11d      	cbz	r5, 8017422 <protocol_exec_rt_system+0x3a>
            hal.driver_reset();
 801741a:	4b98      	ldr	r3, [pc, #608]	@ (801767c <protocol_exec_rt_system+0x294>)
 801741c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8017420:	4798      	blx	r3
        if((sys.blocking_event = (alarm_code_t)rt_exec == Alarm_HardLimit ||
 8017422:	1e73      	subs	r3, r6, #1
 8017424:	b2db      	uxtb	r3, r3
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 8017426:	2b01      	cmp	r3, #1
 8017428:	d90f      	bls.n	801744a <protocol_exec_rt_system+0x62>
                                  (alarm_code_t)rt_exec == Alarm_SoftLimit ||
 801742a:	2e0a      	cmp	r6, #10
 801742c:	d022      	beq.n	8017474 <protocol_exec_rt_system+0x8c>
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 801742e:	2e11      	cmp	r6, #17
 8017430:	d009      	beq.n	8017446 <protocol_exec_rt_system+0x5e>
 8017432:	2300      	movs	r3, #0
 8017434:	e00a      	b.n	801744c <protocol_exec_rt_system+0x64>
            spindle_all_off();
 8017436:	f007 fbe3 	bl	801ec00 <spindle_all_off>
            hal.coolant.set_state((coolant_state_t){0});
 801743a:	4b90      	ldr	r3, [pc, #576]	@ (801767c <protocol_exec_rt_system+0x294>)
 801743c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801743e:	f04f 0000 	mov.w	r0, #0
 8017442:	4798      	blx	r3
 8017444:	e7e4      	b.n	8017410 <protocol_exec_rt_system+0x28>
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 8017446:	2301      	movs	r3, #1
 8017448:	e000      	b.n	801744c <protocol_exec_rt_system+0x64>
 801744a:	2301      	movs	r3, #1
        if((sys.blocking_event = (alarm_code_t)rt_exec == Alarm_HardLimit ||
 801744c:	4a8a      	ldr	r2, [pc, #552]	@ (8017678 <protocol_exec_rt_system+0x290>)
 801744e:	7153      	strb	r3, [r2, #5]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d048      	beq.n	80174e6 <protocol_exec_rt_system+0xfe>
            system_set_exec_alarm(rt_exec);
 8017454:	4b89      	ldr	r3, [pc, #548]	@ (801767c <protocol_exec_rt_system+0x294>)
 8017456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017458:	4621      	mov	r1, r4
 801745a:	f102 004c 	add.w	r0, r2, #76	@ 0x4c
 801745e:	4798      	blx	r3
            switch((alarm_code_t)rt_exec) {
 8017460:	b2e4      	uxtb	r4, r4
 8017462:	2c0a      	cmp	r4, #10
 8017464:	d008      	beq.n	8017478 <protocol_exec_rt_system+0x90>
 8017466:	2c11      	cmp	r4, #17
 8017468:	d018      	beq.n	801749c <protocol_exec_rt_system+0xb4>
                    grbl.report.feedback_message(Message_CriticalEvent);
 801746a:	4b86      	ldr	r3, [pc, #536]	@ (8017684 <protocol_exec_rt_system+0x29c>)
 801746c:	68db      	ldr	r3, [r3, #12]
 801746e:	2001      	movs	r0, #1
 8017470:	4798      	blx	r3
                    break;
 8017472:	e005      	b.n	8017480 <protocol_exec_rt_system+0x98>
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 8017474:	2301      	movs	r3, #1
 8017476:	e7e9      	b.n	801744c <protocol_exec_rt_system+0x64>
                    grbl.report.feedback_message(Message_EStop);
 8017478:	4b82      	ldr	r3, [pc, #520]	@ (8017684 <protocol_exec_rt_system+0x29c>)
 801747a:	68db      	ldr	r3, [r3, #12]
 801747c:	200c      	movs	r0, #12
 801747e:	4798      	blx	r3
            system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8017480:	4c7e      	ldr	r4, [pc, #504]	@ (801767c <protocol_exec_rt_system+0x294>)
 8017482:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017484:	2120      	movs	r1, #32
 8017486:	4880      	ldr	r0, [pc, #512]	@ (8017688 <protocol_exec_rt_system+0x2a0>)
 8017488:	4798      	blx	r3
            *line = '\0';
 801748a:	2300      	movs	r3, #0
 801748c:	4a7f      	ldr	r2, [pc, #508]	@ (801768c <protocol_exec_rt_system+0x2a4>)
 801748e:	7013      	strb	r3, [r2, #0]
            char_counter = 0;
 8017490:	4a7f      	ldr	r2, [pc, #508]	@ (8017690 <protocol_exec_rt_system+0x2a8>)
 8017492:	6013      	str	r3, [r2, #0]
            hal.stream.reset_read_buffer();
 8017494:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 8017498:	4798      	blx	r3
            while (bit_isfalse(sys.rt_exec_state, EXEC_RESET)) {
 801749a:	e00b      	b.n	80174b4 <protocol_exec_rt_system+0xcc>
                    grbl.report.feedback_message(Message_MotorFault);
 801749c:	4b79      	ldr	r3, [pc, #484]	@ (8017684 <protocol_exec_rt_system+0x29c>)
 801749e:	68db      	ldr	r3, [r3, #12]
 80174a0:	2010      	movs	r0, #16
 80174a2:	4798      	blx	r3
                    break;
 80174a4:	e7ec      	b.n	8017480 <protocol_exec_rt_system+0x98>
                protocol_poll_cmd();
 80174a6:	f7ff fef7 	bl	8017298 <protocol_poll_cmd>
                grbl.on_execute_realtime(STATE_ESTOP);
 80174aa:	4b76      	ldr	r3, [pc, #472]	@ (8017684 <protocol_exec_rt_system+0x29c>)
 80174ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80174ae:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80174b2:	4798      	blx	r3
            while (bit_isfalse(sys.rt_exec_state, EXEC_RESET)) {
 80174b4:	4b70      	ldr	r3, [pc, #448]	@ (8017678 <protocol_exec_rt_system+0x290>)
 80174b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80174b8:	f013 0f20 	tst.w	r3, #32
 80174bc:	d10c      	bne.n	80174d8 <protocol_exec_rt_system+0xf0>
                if(bit_istrue(sys.rt_exec_state, EXEC_STATUS_REPORT)) {
 80174be:	4b6e      	ldr	r3, [pc, #440]	@ (8017678 <protocol_exec_rt_system+0x290>)
 80174c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80174c2:	f013 0f01 	tst.w	r3, #1
 80174c6:	d0ee      	beq.n	80174a6 <protocol_exec_rt_system+0xbe>
                    system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 80174c8:	4b6c      	ldr	r3, [pc, #432]	@ (801767c <protocol_exec_rt_system+0x294>)
 80174ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80174cc:	2101      	movs	r1, #1
 80174ce:	486e      	ldr	r0, [pc, #440]	@ (8017688 <protocol_exec_rt_system+0x2a0>)
 80174d0:	4798      	blx	r3
                    report_realtime_status();
 80174d2:	f003 fb29 	bl	801ab28 <report_realtime_status>
 80174d6:	e7e6      	b.n	80174a6 <protocol_exec_rt_system+0xbe>
            system_clear_exec_alarm(); // Clear alarm
 80174d8:	4b68      	ldr	r3, [pc, #416]	@ (801767c <protocol_exec_rt_system+0x294>)
 80174da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80174dc:	2100      	movs	r1, #0
 80174de:	4868      	ldr	r0, [pc, #416]	@ (8017680 <protocol_exec_rt_system+0x298>)
 80174e0:	4798      	blx	r3
 80174e2:	e000      	b.n	80174e6 <protocol_exec_rt_system+0xfe>
    bool killed = false;
 80174e4:	2500      	movs	r5, #0
    if (sys.rt_exec_state && (rt_exec = system_clear_exec_states())) { // Get and clear volatile sys.rt_exec_state atomically.
 80174e6:	4b64      	ldr	r3, [pc, #400]	@ (8017678 <protocol_exec_rt_system+0x290>)
 80174e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	f000 8095 	beq.w	801761a <protocol_exec_rt_system+0x232>
 80174f0:	4b62      	ldr	r3, [pc, #392]	@ (801767c <protocol_exec_rt_system+0x294>)
 80174f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80174f4:	2100      	movs	r1, #0
 80174f6:	4864      	ldr	r0, [pc, #400]	@ (8017688 <protocol_exec_rt_system+0x2a0>)
 80174f8:	4798      	blx	r3
 80174fa:	4604      	mov	r4, r0
 80174fc:	2800      	cmp	r0, #0
 80174fe:	f000 808c 	beq.w	801761a <protocol_exec_rt_system+0x232>
        if((sys.reset_pending = !!(rt_exec & EXEC_RESET))) {
 8017502:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8017506:	4a5c      	ldr	r2, [pc, #368]	@ (8017678 <protocol_exec_rt_system+0x290>)
 8017508:	7113      	strb	r3, [r2, #4]
 801750a:	2b00      	cmp	r3, #0
 801750c:	f040 80c8 	bne.w	80176a0 <protocol_exec_rt_system+0x2b8>
        if(rt_exec & EXEC_STOP) { // Experimental for now, must be verified. Do NOT move to interrupt context!
 8017510:	f010 0f10 	tst.w	r0, #16
 8017514:	d058      	beq.n	80175c8 <protocol_exec_rt_system+0x1e0>
            sys.cancel = true;
 8017516:	4b58      	ldr	r3, [pc, #352]	@ (8017678 <protocol_exec_rt_system+0x290>)
 8017518:	2201      	movs	r2, #1
 801751a:	705a      	strb	r2, [r3, #1]
            sys.step_control.flags = 0;
 801751c:	2200      	movs	r2, #0
 801751e:	761a      	strb	r2, [r3, #24]
            sys.flags.feed_hold_pending = Off;
 8017520:	7d99      	ldrb	r1, [r3, #22]
 8017522:	f362 1145 	bfi	r1, r2, #5, #1
 8017526:	7599      	strb	r1, [r3, #22]
            sys.override_delay.flags = 0;
 8017528:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
            if(sys.override.control.sync)
 801752c:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8017530:	4293      	cmp	r3, r2
 8017532:	f2c0 80f4 	blt.w	801771e <protocol_exec_rt_system+0x336>
            gc_state.tool_change = false;
 8017536:	4b57      	ldr	r3, [pc, #348]	@ (8017694 <protocol_exec_rt_system+0x2ac>)
 8017538:	2200      	movs	r2, #0
 801753a:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
            gc_state.modal.spindle.rpm_mode = SpindleSpeedMode_RPM;
 801753e:	76da      	strb	r2, [r3, #27]
            hal.driver_reset();
 8017540:	4b4e      	ldr	r3, [pc, #312]	@ (801767c <protocol_exec_rt_system+0x294>)
 8017542:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8017546:	4798      	blx	r3
            if(!sys.flags.keep_input && hal.stream.suspend_read && hal.stream.suspend_read(false))
 8017548:	4b4b      	ldr	r3, [pc, #300]	@ (8017678 <protocol_exec_rt_system+0x290>)
 801754a:	7ddb      	ldrb	r3, [r3, #23]
 801754c:	f013 0f01 	tst.w	r3, #1
 8017550:	d10a      	bne.n	8017568 <protocol_exec_rt_system+0x180>
 8017552:	4b4a      	ldr	r3, [pc, #296]	@ (801767c <protocol_exec_rt_system+0x294>)
 8017554:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8017558:	b133      	cbz	r3, 8017568 <protocol_exec_rt_system+0x180>
 801755a:	2000      	movs	r0, #0
 801755c:	4798      	blx	r3
 801755e:	b118      	cbz	r0, 8017568 <protocol_exec_rt_system+0x180>
                hal.stream.cancel_read_buffer(); // flush pending blocks (after M6)
 8017560:	4b46      	ldr	r3, [pc, #280]	@ (801767c <protocol_exec_rt_system+0x294>)
 8017562:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8017566:	4798      	blx	r3
            sys.flags.keep_input = Off;
 8017568:	4d43      	ldr	r5, [pc, #268]	@ (8017678 <protocol_exec_rt_system+0x290>)
 801756a:	7deb      	ldrb	r3, [r5, #23]
 801756c:	f36f 0300 	bfc	r3, #0, #1
 8017570:	75eb      	strb	r3, [r5, #23]
            gc_init();
 8017572:	f7f6 f887 	bl	800d684 <gc_init>
            plan_reset();
 8017576:	f7ff f9ef 	bl	8016958 <plan_reset>
            if(sys.alarm_pending == Alarm_ProbeProtect) {
 801757a:	7d2b      	ldrb	r3, [r5, #20]
 801757c:	2b0d      	cmp	r3, #13
 801757e:	f000 80d4 	beq.w	801772a <protocol_exec_rt_system+0x342>
                st_reset();
 8017582:	f008 fca5 	bl	801fed0 <st_reset>
            sync_position();
 8017586:	f7ff fd15 	bl	8016fb4 <plan_sync_position>
 801758a:	4943      	ldr	r1, [pc, #268]	@ (8017698 <protocol_exec_rt_system+0x2b0>)
 801758c:	4843      	ldr	r0, [pc, #268]	@ (801769c <protocol_exec_rt_system+0x2b4>)
 801758e:	f00a fcf3 	bl	8021f78 <system_convert_array_steps_to_mpos>
            gc_spindle_off();
 8017592:	f7f6 f917 	bl	800d7c4 <gc_spindle_off>
            gc_coolant((coolant_state_t){0});
 8017596:	f04f 0000 	mov.w	r0, #0
 801759a:	f7f6 f921 	bl	800d7e0 <gc_coolant>
            flush_override_buffers();
 801759e:	f7ff f8ad 	bl	80166fc <flush_override_buffers>
            if(!((state_get() == STATE_ALARM) && (sys.alarm == Alarm_LimitsEngaged || sys.alarm == Alarm_HomingRequired))) {
 80175a2:	f007 fdb1 	bl	801f108 <state_get>
 80175a6:	2801      	cmp	r0, #1
 80175a8:	f000 80ca 	beq.w	8017740 <protocol_exec_rt_system+0x358>
                state_set(hal.control.get_state().safety_door_ajar ? STATE_SAFETY_DOOR : STATE_IDLE);
 80175ac:	4b33      	ldr	r3, [pc, #204]	@ (801767c <protocol_exec_rt_system+0x294>)
 80175ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80175b0:	4798      	blx	r3
 80175b2:	f010 0f08 	tst.w	r0, #8
 80175b6:	f000 80cc 	beq.w	8017752 <protocol_exec_rt_system+0x36a>
 80175ba:	2040      	movs	r0, #64	@ 0x40
 80175bc:	f007 fdaa 	bl	801f114 <state_set>
                grbl.report.feedback_message(Message_Stop);
 80175c0:	4b30      	ldr	r3, [pc, #192]	@ (8017684 <protocol_exec_rt_system+0x29c>)
 80175c2:	68db      	ldr	r3, [r3, #12]
 80175c4:	2016      	movs	r0, #22
 80175c6:	4798      	blx	r3
        if (rt_exec & EXEC_STATUS_REPORT)
 80175c8:	f014 0f01 	tst.w	r4, #1
 80175cc:	f040 80c3 	bne.w	8017756 <protocol_exec_rt_system+0x36e>
        if(rt_exec & EXEC_GCODE_REPORT)
 80175d0:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 80175d4:	f040 80c2 	bne.w	801775c <protocol_exec_rt_system+0x374>
        if(rt_exec & EXEC_TLO_REPORT)
 80175d8:	f414 5f80 	tst.w	r4, #4096	@ 0x1000
 80175dc:	f040 80c1 	bne.w	8017762 <protocol_exec_rt_system+0x37a>
        if (rt_exec & EXEC_PID_REPORT)
 80175e0:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 80175e4:	f040 80c0 	bne.w	8017768 <protocol_exec_rt_system+0x380>
        if(rt_exec & EXEC_RT_COMMAND)
 80175e8:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 80175ec:	f040 80bf 	bne.w	801776e <protocol_exec_rt_system+0x386>
        rt_exec &= ~(EXEC_STOP|EXEC_STATUS_REPORT|EXEC_GCODE_REPORT|EXEC_PID_REPORT|EXEC_TLO_REPORT|EXEC_RT_COMMAND); // clear requests already processed
 80175f0:	f424 5070 	bic.w	r0, r4, #15360	@ 0x3c00
 80175f4:	f020 0011 	bic.w	r0, r0, #17
        if(sys.flags.feed_hold_pending) {
 80175f8:	4b1f      	ldr	r3, [pc, #124]	@ (8017678 <protocol_exec_rt_system+0x290>)
 80175fa:	7d9b      	ldrb	r3, [r3, #22]
 80175fc:	f013 0f20 	tst.w	r3, #32
 8017600:	d008      	beq.n	8017614 <protocol_exec_rt_system+0x22c>
            if(rt_exec & EXEC_CYCLE_START)
 8017602:	f014 0f02 	tst.w	r4, #2
 8017606:	f000 80b6 	beq.w	8017776 <protocol_exec_rt_system+0x38e>
                sys.flags.feed_hold_pending = Off;
 801760a:	4b1b      	ldr	r3, [pc, #108]	@ (8017678 <protocol_exec_rt_system+0x290>)
 801760c:	7d9a      	ldrb	r2, [r3, #22]
 801760e:	f36f 1245 	bfc	r2, #5, #1
 8017612:	759a      	strb	r2, [r3, #22]
        if(rt_exec)
 8017614:	b108      	cbz	r0, 801761a <protocol_exec_rt_system+0x232>
            state_update(rt_exec);
 8017616:	f007 fed5 	bl	801f3c4 <state_update>
    grbl.on_execute_realtime(state_get());
 801761a:	4b1a      	ldr	r3, [pc, #104]	@ (8017684 <protocol_exec_rt_system+0x29c>)
 801761c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 801761e:	f007 fd73 	bl	801f108 <state_get>
 8017622:	47a0      	blx	r4
    if(!sys.override_delay.feedrate && (rt_exec = get_feed_override())) {
 8017624:	4b14      	ldr	r3, [pc, #80]	@ (8017678 <protocol_exec_rt_system+0x290>)
 8017626:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801762a:	f013 0f01 	tst.w	r3, #1
 801762e:	f000 80ac 	beq.w	801778a <protocol_exec_rt_system+0x3a2>
    if(!sys.override_delay.spindle && (rt_exec = get_spindle_override())) {
 8017632:	4b11      	ldr	r3, [pc, #68]	@ (8017678 <protocol_exec_rt_system+0x290>)
 8017634:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8017638:	f013 0f04 	tst.w	r3, #4
 801763c:	f000 80e5 	beq.w	801780a <protocol_exec_rt_system+0x422>
    if(!sys.override_delay.coolant && (rt_exec = get_coolant_override())) {
 8017640:	4b0d      	ldr	r3, [pc, #52]	@ (8017678 <protocol_exec_rt_system+0x290>)
 8017642:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8017646:	f013 0f02 	tst.w	r3, #2
 801764a:	f000 8145 	beq.w	80178d8 <protocol_exec_rt_system+0x4f0>
    if (state_get() & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG))
 801764e:	f007 fd5b 	bl	801f108 <state_get>
 8017652:	f010 0ffc 	tst.w	r0, #252	@ 0xfc
 8017656:	f040 819a 	bne.w	801798e <protocol_exec_rt_system+0x5a6>
    return !ABORTED;
 801765a:	4b07      	ldr	r3, [pc, #28]	@ (8017678 <protocol_exec_rt_system+0x290>)
 801765c:	781b      	ldrb	r3, [r3, #0]
 801765e:	2b00      	cmp	r3, #0
 8017660:	f040 8198 	bne.w	8017994 <protocol_exec_rt_system+0x5ac>
 8017664:	4b04      	ldr	r3, [pc, #16]	@ (8017678 <protocol_exec_rt_system+0x290>)
 8017666:	785b      	ldrb	r3, [r3, #1]
 8017668:	2b00      	cmp	r3, #0
 801766a:	f000 8195 	beq.w	8017998 <protocol_exec_rt_system+0x5b0>
 801766e:	2000      	movs	r0, #0
 8017670:	e191      	b.n	8017996 <protocol_exec_rt_system+0x5ae>
    bool killed = false;
 8017672:	2500      	movs	r5, #0
 8017674:	e737      	b.n	80174e6 <protocol_exec_rt_system+0xfe>
 8017676:	bf00      	nop
 8017678:	20001bbc 	.word	0x20001bbc
 801767c:	200018dc 	.word	0x200018dc
 8017680:	20001c08 	.word	0x20001c08
 8017684:	20001ac4 	.word	0x20001ac4
 8017688:	20001c04 	.word	0x20001c04
 801768c:	20002068 	.word	0x20002068
 8017690:	2000216c 	.word	0x2000216c
 8017694:	20001614 	.word	0x20001614
 8017698:	20001c44 	.word	0x20001c44
 801769c:	2000167c 	.word	0x2000167c
            if(!killed) {
 80176a0:	b305      	cbz	r5, 80176e4 <protocol_exec_rt_system+0x2fc>
            if(!(sys.abort = !hal.control.get_state().e_stop)) {
 80176a2:	4bae      	ldr	r3, [pc, #696]	@ (801795c <protocol_exec_rt_system+0x574>)
 80176a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80176a6:	4798      	blx	r3
 80176a8:	f3c0 1381 	ubfx	r3, r0, #6, #2
 80176ac:	f083 0301 	eor.w	r3, r3, #1
 80176b0:	f003 0301 	and.w	r3, r3, #1
 80176b4:	4aaa      	ldr	r2, [pc, #680]	@ (8017960 <protocol_exec_rt_system+0x578>)
 80176b6:	7013      	strb	r3, [r2, #0]
 80176b8:	b9e3      	cbnz	r3, 80176f4 <protocol_exec_rt_system+0x30c>
                hal.stream.reset_read_buffer();
 80176ba:	4ba8      	ldr	r3, [pc, #672]	@ (801795c <protocol_exec_rt_system+0x574>)
 80176bc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80176c0:	4798      	blx	r3
                system_raise_alarm(Alarm_EStop);
 80176c2:	200a      	movs	r0, #10
 80176c4:	f00a fcae 	bl	8022024 <system_raise_alarm>
                grbl.report.feedback_message(Message_EStop);
 80176c8:	4ba6      	ldr	r3, [pc, #664]	@ (8017964 <protocol_exec_rt_system+0x57c>)
 80176ca:	68db      	ldr	r3, [r3, #12]
 80176cc:	200c      	movs	r0, #12
 80176ce:	4798      	blx	r3
            if(!killed) // Tell driver/plugins about reset.
 80176d0:	b91d      	cbnz	r5, 80176da <protocol_exec_rt_system+0x2f2>
                hal.driver_reset();
 80176d2:	4ba2      	ldr	r3, [pc, #648]	@ (801795c <protocol_exec_rt_system+0x574>)
 80176d4:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80176d8:	4798      	blx	r3
            return !sys.abort; // Nothing else to do but exit.
 80176da:	4ba1      	ldr	r3, [pc, #644]	@ (8017960 <protocol_exec_rt_system+0x578>)
 80176dc:	7818      	ldrb	r0, [r3, #0]
 80176de:	f080 0001 	eor.w	r0, r0, #1
 80176e2:	e158      	b.n	8017996 <protocol_exec_rt_system+0x5ae>
                spindle_all_off();
 80176e4:	f007 fa8c 	bl	801ec00 <spindle_all_off>
                hal.coolant.set_state((coolant_state_t){0});
 80176e8:	4b9c      	ldr	r3, [pc, #624]	@ (801795c <protocol_exec_rt_system+0x574>)
 80176ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80176ec:	f04f 0000 	mov.w	r0, #0
 80176f0:	4798      	blx	r3
 80176f2:	e7d6      	b.n	80176a2 <protocol_exec_rt_system+0x2ba>
            } else if(hal.control.get_state().motor_fault) {
 80176f4:	4b99      	ldr	r3, [pc, #612]	@ (801795c <protocol_exec_rt_system+0x574>)
 80176f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80176f8:	4798      	blx	r3
 80176fa:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80176fe:	d0e7      	beq.n	80176d0 <protocol_exec_rt_system+0x2e8>
                sys.abort = false;
 8017700:	4b97      	ldr	r3, [pc, #604]	@ (8017960 <protocol_exec_rt_system+0x578>)
 8017702:	2200      	movs	r2, #0
 8017704:	701a      	strb	r2, [r3, #0]
                hal.stream.reset_read_buffer();
 8017706:	4b95      	ldr	r3, [pc, #596]	@ (801795c <protocol_exec_rt_system+0x574>)
 8017708:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801770c:	4798      	blx	r3
                system_raise_alarm(Alarm_MotorFault);
 801770e:	2011      	movs	r0, #17
 8017710:	f00a fc88 	bl	8022024 <system_raise_alarm>
                grbl.report.feedback_message(Message_MotorFault);
 8017714:	4b93      	ldr	r3, [pc, #588]	@ (8017964 <protocol_exec_rt_system+0x57c>)
 8017716:	68db      	ldr	r3, [r3, #12]
 8017718:	2010      	movs	r0, #16
 801771a:	4798      	blx	r3
 801771c:	e7d8      	b.n	80176d0 <protocol_exec_rt_system+0x2e8>
                sys.override.control = gc_state.modal.override_ctrl;
 801771e:	4b92      	ldr	r3, [pc, #584]	@ (8017968 <protocol_exec_rt_system+0x580>)
 8017720:	7f1a      	ldrb	r2, [r3, #28]
 8017722:	4b8f      	ldr	r3, [pc, #572]	@ (8017960 <protocol_exec_rt_system+0x578>)
 8017724:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8017728:	e705      	b.n	8017536 <protocol_exec_rt_system+0x14e>
                st_go_idle();
 801772a:	f008 fa17 	bl	801fb5c <st_go_idle>
                system_set_exec_alarm(sys.alarm_pending);
 801772e:	4b8b      	ldr	r3, [pc, #556]	@ (801795c <protocol_exec_rt_system+0x574>)
 8017730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017732:	7d29      	ldrb	r1, [r5, #20]
 8017734:	f105 004c 	add.w	r0, r5, #76	@ 0x4c
 8017738:	4798      	blx	r3
                sys.alarm_pending = Alarm_None;
 801773a:	2300      	movs	r3, #0
 801773c:	752b      	strb	r3, [r5, #20]
 801773e:	e722      	b.n	8017586 <protocol_exec_rt_system+0x19e>
            if(!((state_get() == STATE_ALARM) && (sys.alarm == Alarm_LimitsEngaged || sys.alarm == Alarm_HomingRequired))) {
 8017740:	4b87      	ldr	r3, [pc, #540]	@ (8017960 <protocol_exec_rt_system+0x578>)
 8017742:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8017746:	3b0b      	subs	r3, #11
 8017748:	b2db      	uxtb	r3, r3
 801774a:	2b01      	cmp	r3, #1
 801774c:	f63f af2e 	bhi.w	80175ac <protocol_exec_rt_system+0x1c4>
 8017750:	e73a      	b.n	80175c8 <protocol_exec_rt_system+0x1e0>
                state_set(hal.control.get_state().safety_door_ajar ? STATE_SAFETY_DOOR : STATE_IDLE);
 8017752:	2000      	movs	r0, #0
 8017754:	e732      	b.n	80175bc <protocol_exec_rt_system+0x1d4>
            report_realtime_status();
 8017756:	f003 f9e7 	bl	801ab28 <report_realtime_status>
 801775a:	e739      	b.n	80175d0 <protocol_exec_rt_system+0x1e8>
            report_gcode_modes();
 801775c:	f002 fbc0 	bl	8019ee0 <report_gcode_modes>
 8017760:	e73a      	b.n	80175d8 <protocol_exec_rt_system+0x1f0>
            report_tool_offsets();
 8017762:	f002 fa1f 	bl	8019ba4 <report_tool_offsets>
 8017766:	e73b      	b.n	80175e0 <protocol_exec_rt_system+0x1f8>
            report_pid_log();
 8017768:	f004 fd12 	bl	801c190 <report_pid_log>
 801776c:	e73c      	b.n	80175e8 <protocol_exec_rt_system+0x200>
            protocol_execute_rt_commands(0);
 801776e:	2000      	movs	r0, #0
 8017770:	f7ff fd3c 	bl	80171ec <protocol_execute_rt_commands>
 8017774:	e73c      	b.n	80175f0 <protocol_exec_rt_system+0x208>
            else if(!sys.override.control.feed_hold_disable)
 8017776:	4b7a      	ldr	r3, [pc, #488]	@ (8017960 <protocol_exec_rt_system+0x578>)
 8017778:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801777c:	f013 0f02 	tst.w	r3, #2
 8017780:	f47f af48 	bne.w	8017614 <protocol_exec_rt_system+0x22c>
                rt_exec |= EXEC_FEED_HOLD;
 8017784:	f040 0008 	orr.w	r0, r0, #8
        if(rt_exec)
 8017788:	e745      	b.n	8017616 <protocol_exec_rt_system+0x22e>
    if(!sys.override_delay.feedrate && (rt_exec = get_feed_override())) {
 801778a:	f7fe ff61 	bl	8016650 <get_feed_override>
 801778e:	4603      	mov	r3, r0
 8017790:	2800      	cmp	r0, #0
 8017792:	f43f af4e 	beq.w	8017632 <protocol_exec_rt_system+0x24a>
        override_t new_f_override = sys.override.feed_rate;
 8017796:	4a72      	ldr	r2, [pc, #456]	@ (8017960 <protocol_exec_rt_system+0x578>)
 8017798:	69d4      	ldr	r4, [r2, #28]
        override_t new_r_override = sys.override.rapid_rate;
 801779a:	6a15      	ldr	r5, [r2, #32]
 801779c:	e015      	b.n	80177ca <protocol_exec_rt_system+0x3e2>
                    new_f_override += FEED_OVERRIDE_COARSE_INCREMENT;
 801779e:	340a      	adds	r4, #10
                    break;
 80177a0:	e00a      	b.n	80177b8 <protocol_exec_rt_system+0x3d0>
                    new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT;
 80177a2:	3c0a      	subs	r4, #10
                    break;
 80177a4:	e008      	b.n	80177b8 <protocol_exec_rt_system+0x3d0>
                    new_f_override += FEED_OVERRIDE_FINE_INCREMENT;
 80177a6:	3401      	adds	r4, #1
                    break;
 80177a8:	e006      	b.n	80177b8 <protocol_exec_rt_system+0x3d0>
                    new_f_override -= FEED_OVERRIDE_FINE_INCREMENT;
 80177aa:	3c01      	subs	r4, #1
                    break;
 80177ac:	e004      	b.n	80177b8 <protocol_exec_rt_system+0x3d0>
                    new_r_override = RAPID_OVERRIDE_MEDIUM;
 80177ae:	2532      	movs	r5, #50	@ 0x32
                    break;
 80177b0:	e002      	b.n	80177b8 <protocol_exec_rt_system+0x3d0>
                    new_r_override = RAPID_OVERRIDE_LOW;
 80177b2:	2519      	movs	r5, #25
                    break;
 80177b4:	e000      	b.n	80177b8 <protocol_exec_rt_system+0x3d0>
                    new_r_override = DEFAULT_RAPID_OVERRIDE;
 80177b6:	2564      	movs	r5, #100	@ 0x64
            new_f_override = constrain(new_f_override, MIN_FEED_RATE_OVERRIDE, MAX_FEED_RATE_OVERRIDE);
 80177b8:	2c09      	cmp	r4, #9
 80177ba:	d91f      	bls.n	80177fc <protocol_exec_rt_system+0x414>
 80177bc:	2cc8      	cmp	r4, #200	@ 0xc8
 80177be:	bf28      	it	cs
 80177c0:	24c8      	movcs	r4, #200	@ 0xc8
        } while((rt_exec = get_feed_override()));
 80177c2:	f7fe ff45 	bl	8016650 <get_feed_override>
 80177c6:	4603      	mov	r3, r0
 80177c8:	b1d0      	cbz	r0, 8017800 <protocol_exec_rt_system+0x418>
            switch(rt_exec) {
 80177ca:	3b90      	subs	r3, #144	@ 0x90
 80177cc:	2b07      	cmp	r3, #7
 80177ce:	d8f3      	bhi.n	80177b8 <protocol_exec_rt_system+0x3d0>
 80177d0:	a201      	add	r2, pc, #4	@ (adr r2, 80177d8 <protocol_exec_rt_system+0x3f0>)
 80177d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80177d6:	bf00      	nop
 80177d8:	080177f9 	.word	0x080177f9
 80177dc:	0801779f 	.word	0x0801779f
 80177e0:	080177a3 	.word	0x080177a3
 80177e4:	080177a7 	.word	0x080177a7
 80177e8:	080177ab 	.word	0x080177ab
 80177ec:	080177b7 	.word	0x080177b7
 80177f0:	080177af 	.word	0x080177af
 80177f4:	080177b3 	.word	0x080177b3
 80177f8:	2464      	movs	r4, #100	@ 0x64
 80177fa:	e7df      	b.n	80177bc <protocol_exec_rt_system+0x3d4>
            new_f_override = constrain(new_f_override, MIN_FEED_RATE_OVERRIDE, MAX_FEED_RATE_OVERRIDE);
 80177fc:	240a      	movs	r4, #10
 80177fe:	e7e0      	b.n	80177c2 <protocol_exec_rt_system+0x3da>
        plan_feed_override(new_f_override, new_r_override);
 8017800:	4629      	mov	r1, r5
 8017802:	4620      	mov	r0, r4
 8017804:	f7ff fc12 	bl	801702c <plan_feed_override>
 8017808:	e713      	b.n	8017632 <protocol_exec_rt_system+0x24a>
    if(!sys.override_delay.spindle && (rt_exec = get_spindle_override())) {
 801780a:	f7fe ff43 	bl	8016694 <get_spindle_override>
 801780e:	4605      	mov	r5, r0
 8017810:	2800      	cmp	r0, #0
 8017812:	f43f af15 	beq.w	8017640 <protocol_exec_rt_system+0x258>
        spindle_ptrs_t *spindle = gc_spindle_get();
 8017816:	f7f5 fff3 	bl	800d800 <gc_spindle_get>
 801781a:	4606      	mov	r6, r0
        override_t last_s_override = spindle->param->override_pct;
 801781c:	6843      	ldr	r3, [r0, #4]
 801781e:	68dc      	ldr	r4, [r3, #12]
        bool spindle_stop = false;
 8017820:	2700      	movs	r7, #0
 8017822:	e009      	b.n	8017838 <protocol_exec_rt_system+0x450>
                    last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT;
 8017824:	340a      	adds	r4, #10
            last_s_override = constrain(last_s_override, MIN_SPINDLE_RPM_OVERRIDE, MAX_SPINDLE_RPM_OVERRIDE);
 8017826:	2c09      	cmp	r4, #9
 8017828:	d92c      	bls.n	8017884 <protocol_exec_rt_system+0x49c>
 801782a:	2cc8      	cmp	r4, #200	@ 0xc8
 801782c:	bf28      	it	cs
 801782e:	24c8      	movcs	r4, #200	@ 0xc8
        } while((rt_exec = get_spindle_override()));
 8017830:	f7fe ff30 	bl	8016694 <get_spindle_override>
 8017834:	4605      	mov	r5, r0
 8017836:	b338      	cbz	r0, 8017888 <protocol_exec_rt_system+0x4a0>
            switch(rt_exec) {
 8017838:	f1a5 0399 	sub.w	r3, r5, #153	@ 0x99
 801783c:	2b05      	cmp	r3, #5
 801783e:	d818      	bhi.n	8017872 <protocol_exec_rt_system+0x48a>
 8017840:	a201      	add	r2, pc, #4	@ (adr r2, 8017848 <protocol_exec_rt_system+0x460>)
 8017842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017846:	bf00      	nop
 8017848:	08017881 	.word	0x08017881
 801784c:	08017825 	.word	0x08017825
 8017850:	08017861 	.word	0x08017861
 8017854:	08017865 	.word	0x08017865
 8017858:	08017869 	.word	0x08017869
 801785c:	0801786d 	.word	0x0801786d
                    last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT;
 8017860:	3c0a      	subs	r4, #10
                    break;
 8017862:	e7e0      	b.n	8017826 <protocol_exec_rt_system+0x43e>
                    last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT;
 8017864:	3401      	adds	r4, #1
                    break;
 8017866:	e7de      	b.n	8017826 <protocol_exec_rt_system+0x43e>
                    last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT;
 8017868:	3c01      	subs	r4, #1
                    break;
 801786a:	e7dc      	b.n	8017826 <protocol_exec_rt_system+0x43e>
                    spindle_stop = !spindle_stop;
 801786c:	f087 0701 	eor.w	r7, r7, #1
                    break;
 8017870:	e7d9      	b.n	8017826 <protocol_exec_rt_system+0x43e>
                    if(grbl.on_unknown_accessory_override)
 8017872:	4b3c      	ldr	r3, [pc, #240]	@ (8017964 <protocol_exec_rt_system+0x57c>)
 8017874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017876:	2b00      	cmp	r3, #0
 8017878:	d0d5      	beq.n	8017826 <protocol_exec_rt_system+0x43e>
                        grbl.on_unknown_accessory_override(rt_exec);
 801787a:	b2e8      	uxtb	r0, r5
 801787c:	4798      	blx	r3
 801787e:	e7d2      	b.n	8017826 <protocol_exec_rt_system+0x43e>
            switch(rt_exec) {
 8017880:	2464      	movs	r4, #100	@ 0x64
 8017882:	e7d2      	b.n	801782a <protocol_exec_rt_system+0x442>
            last_s_override = constrain(last_s_override, MIN_SPINDLE_RPM_OVERRIDE, MAX_SPINDLE_RPM_OVERRIDE);
 8017884:	240a      	movs	r4, #10
 8017886:	e7d3      	b.n	8017830 <protocol_exec_rt_system+0x448>
        spindle_set_override(spindle, last_s_override);
 8017888:	4621      	mov	r1, r4
 801788a:	4630      	mov	r0, r6
 801788c:	f007 f972 	bl	801eb74 <spindle_set_override>
        if (spindle_stop && state_get() == STATE_HOLD && gc_state.modal.spindle.state.on) {
 8017890:	2f00      	cmp	r7, #0
 8017892:	f43f aed5 	beq.w	8017640 <protocol_exec_rt_system+0x258>
 8017896:	f007 fc37 	bl	801f108 <state_get>
 801789a:	2810      	cmp	r0, #16
 801789c:	f47f aed0 	bne.w	8017640 <protocol_exec_rt_system+0x258>
 80178a0:	4b31      	ldr	r3, [pc, #196]	@ (8017968 <protocol_exec_rt_system+0x580>)
 80178a2:	7e9b      	ldrb	r3, [r3, #26]
 80178a4:	f013 0f01 	tst.w	r3, #1
 80178a8:	f43f aeca 	beq.w	8017640 <protocol_exec_rt_system+0x258>
            if (!sys.override.spindle_stop.value)
 80178ac:	4b2c      	ldr	r3, [pc, #176]	@ (8017960 <protocol_exec_rt_system+0x578>)
 80178ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80178b2:	b92b      	cbnz	r3, 80178c0 <protocol_exec_rt_system+0x4d8>
                sys.override.spindle_stop.initiate = On;
 80178b4:	4a2a      	ldr	r2, [pc, #168]	@ (8017960 <protocol_exec_rt_system+0x578>)
 80178b6:	f043 0302 	orr.w	r3, r3, #2
 80178ba:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 80178be:	e6bf      	b.n	8017640 <protocol_exec_rt_system+0x258>
            else if (sys.override.spindle_stop.enabled)
 80178c0:	f013 0f01 	tst.w	r3, #1
 80178c4:	f43f aebc 	beq.w	8017640 <protocol_exec_rt_system+0x258>
                sys.override.spindle_stop.restore = On;
 80178c8:	4a25      	ldr	r2, [pc, #148]	@ (8017960 <protocol_exec_rt_system+0x578>)
 80178ca:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 80178ce:	f043 0304 	orr.w	r3, r3, #4
 80178d2:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 80178d6:	e6b3      	b.n	8017640 <protocol_exec_rt_system+0x258>
    if(!sys.override_delay.coolant && (rt_exec = get_coolant_override())) {
 80178d8:	f7fe fefe 	bl	80166d8 <get_coolant_override>
 80178dc:	4603      	mov	r3, r0
 80178de:	2800      	cmp	r0, #0
 80178e0:	f43f aeb5 	beq.w	801764e <protocol_exec_rt_system+0x266>
        coolant_state_t coolant_state = gc_state.modal.coolant;
 80178e4:	4a20      	ldr	r2, [pc, #128]	@ (8017968 <protocol_exec_rt_system+0x580>)
 80178e6:	7e54      	ldrb	r4, [r2, #25]
 80178e8:	e022      	b.n	8017930 <protocol_exec_rt_system+0x548>
                    if(hal.coolant_cap.mist && ((state_get() == STATE_IDLE) || (state_get() & (STATE_CYCLE | STATE_HOLD))))
 80178ea:	f007 fc0d 	bl	801f108 <state_get>
 80178ee:	f010 0f18 	tst.w	r0, #24
 80178f2:	d019      	beq.n	8017928 <protocol_exec_rt_system+0x540>
 80178f4:	e02a      	b.n	801794c <protocol_exec_rt_system+0x564>
                    if(hal.coolant_cap.flood && ((state_get() == STATE_IDLE) || (state_get() & (STATE_CYCLE | STATE_HOLD))))
 80178f6:	4b19      	ldr	r3, [pc, #100]	@ (801795c <protocol_exec_rt_system+0x574>)
 80178f8:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 80178fc:	f013 0f01 	tst.w	r3, #1
 8017900:	d012      	beq.n	8017928 <protocol_exec_rt_system+0x540>
 8017902:	f007 fc01 	bl	801f108 <state_get>
 8017906:	b920      	cbnz	r0, 8017912 <protocol_exec_rt_system+0x52a>
                        coolant_state.flood = !coolant_state.flood;
 8017908:	f084 0301 	eor.w	r3, r4, #1
 801790c:	f363 0400 	bfi	r4, r3, #0, #1
 8017910:	e00a      	b.n	8017928 <protocol_exec_rt_system+0x540>
                    if(hal.coolant_cap.flood && ((state_get() == STATE_IDLE) || (state_get() & (STATE_CYCLE | STATE_HOLD))))
 8017912:	f007 fbf9 	bl	801f108 <state_get>
 8017916:	f010 0f18 	tst.w	r0, #24
 801791a:	d005      	beq.n	8017928 <protocol_exec_rt_system+0x540>
 801791c:	e7f4      	b.n	8017908 <protocol_exec_rt_system+0x520>
                    if(grbl.on_unknown_accessory_override)
 801791e:	4a11      	ldr	r2, [pc, #68]	@ (8017964 <protocol_exec_rt_system+0x57c>)
 8017920:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8017922:	b10a      	cbz	r2, 8017928 <protocol_exec_rt_system+0x540>
                        grbl.on_unknown_accessory_override(rt_exec);
 8017924:	b2d8      	uxtb	r0, r3
 8017926:	4790      	blx	r2
        } while((rt_exec = get_coolant_override()));
 8017928:	f7fe fed6 	bl	80166d8 <get_coolant_override>
 801792c:	4603      	mov	r3, r0
 801792e:	b1e8      	cbz	r0, 801796c <protocol_exec_rt_system+0x584>
            switch(rt_exec) {
 8017930:	2ba0      	cmp	r3, #160	@ 0xa0
 8017932:	d0e0      	beq.n	80178f6 <protocol_exec_rt_system+0x50e>
 8017934:	2ba1      	cmp	r3, #161	@ 0xa1
 8017936:	d1f2      	bne.n	801791e <protocol_exec_rt_system+0x536>
                    if(hal.coolant_cap.mist && ((state_get() == STATE_IDLE) || (state_get() & (STATE_CYCLE | STATE_HOLD))))
 8017938:	4b08      	ldr	r3, [pc, #32]	@ (801795c <protocol_exec_rt_system+0x574>)
 801793a:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 801793e:	f013 0f02 	tst.w	r3, #2
 8017942:	d0f1      	beq.n	8017928 <protocol_exec_rt_system+0x540>
 8017944:	f007 fbe0 	bl	801f108 <state_get>
 8017948:	2800      	cmp	r0, #0
 801794a:	d1ce      	bne.n	80178ea <protocol_exec_rt_system+0x502>
                        coolant_state.mist = !coolant_state.mist;
 801794c:	f3c4 0346 	ubfx	r3, r4, #1, #7
 8017950:	f083 0301 	eor.w	r3, r3, #1
 8017954:	f363 0441 	bfi	r4, r3, #1, #1
 8017958:	e7e6      	b.n	8017928 <protocol_exec_rt_system+0x540>
 801795a:	bf00      	nop
 801795c:	200018dc 	.word	0x200018dc
 8017960:	20001bbc 	.word	0x20001bbc
 8017964:	20001ac4 	.word	0x20001ac4
 8017968:	20001614 	.word	0x20001614
        if(coolant_state.value != gc_state.modal.coolant.value) {
 801796c:	b2e3      	uxtb	r3, r4
 801796e:	4a0b      	ldr	r2, [pc, #44]	@ (801799c <protocol_exec_rt_system+0x5b4>)
 8017970:	7e52      	ldrb	r2, [r2, #25]
 8017972:	4293      	cmp	r3, r2
 8017974:	f43f ae6b 	beq.w	801764e <protocol_exec_rt_system+0x266>
            gc_coolant(coolant_state); // Report flag set in gc_coolant().
 8017978:	4620      	mov	r0, r4
 801797a:	f7f5 ff31 	bl	800d7e0 <gc_coolant>
            if(grbl.on_override_changed)
 801797e:	4b08      	ldr	r3, [pc, #32]	@ (80179a0 <protocol_exec_rt_system+0x5b8>)
 8017980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017982:	2b00      	cmp	r3, #0
 8017984:	f43f ae63 	beq.w	801764e <protocol_exec_rt_system+0x266>
                grbl.on_override_changed(OverrideChanged_CoolantState);
 8017988:	2000      	movs	r0, #0
 801798a:	4798      	blx	r3
 801798c:	e65f      	b.n	801764e <protocol_exec_rt_system+0x266>
        st_prep_buffer();
 801798e:	f008 fbc9 	bl	8020124 <st_prep_buffer>
 8017992:	e662      	b.n	801765a <protocol_exec_rt_system+0x272>
    return !ABORTED;
 8017994:	2000      	movs	r0, #0
}
 8017996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return !ABORTED;
 8017998:	2001      	movs	r0, #1
 801799a:	e7fc      	b.n	8017996 <protocol_exec_rt_system+0x5ae>
 801799c:	20001614 	.word	0x20001614
 80179a0:	20001ac4 	.word	0x20001ac4

080179a4 <protocol_exec_rt_suspend>:
{
 80179a4:	b508      	push	{r3, lr}
    if((sys.blocking_event = state == STATE_SLEEP)) {
 80179a6:	2880      	cmp	r0, #128	@ 0x80
 80179a8:	bf14      	ite	ne
 80179aa:	2000      	movne	r0, #0
 80179ac:	2001      	moveq	r0, #1
 80179ae:	4b1c      	ldr	r3, [pc, #112]	@ (8017a20 <protocol_exec_rt_suspend+0x7c>)
 80179b0:	7158      	strb	r0, [r3, #5]
 80179b2:	b1a0      	cbz	r0, 80179de <protocol_exec_rt_suspend+0x3a>
        *line = '\0';
 80179b4:	2300      	movs	r3, #0
 80179b6:	4a1b      	ldr	r2, [pc, #108]	@ (8017a24 <protocol_exec_rt_suspend+0x80>)
 80179b8:	7013      	strb	r3, [r2, #0]
        char_counter = 0;
 80179ba:	4a1b      	ldr	r2, [pc, #108]	@ (8017a28 <protocol_exec_rt_suspend+0x84>)
 80179bc:	6013      	str	r3, [r2, #0]
        hal.stream.reset_read_buffer();
 80179be:	4b1b      	ldr	r3, [pc, #108]	@ (8017a2c <protocol_exec_rt_suspend+0x88>)
 80179c0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80179c4:	4798      	blx	r3
 80179c6:	e00a      	b.n	80179de <protocol_exec_rt_suspend+0x3a>
            protocol_poll_cmd();
 80179c8:	f7ff fc66 	bl	8017298 <protocol_poll_cmd>
 80179cc:	e011      	b.n	80179f2 <protocol_exec_rt_suspend+0x4e>
        if(settings.flags.sleep_enable)
 80179ce:	4b18      	ldr	r3, [pc, #96]	@ (8017a30 <protocol_exec_rt_suspend+0x8c>)
 80179d0:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 80179d4:	f013 0f08 	tst.w	r3, #8
 80179d8:	d11e      	bne.n	8017a18 <protocol_exec_rt_suspend+0x74>
        protocol_exec_rt_system();
 80179da:	f7ff fd05 	bl	80173e8 <protocol_exec_rt_system>
    while(sys.suspend) {
 80179de:	4b10      	ldr	r3, [pc, #64]	@ (8017a20 <protocol_exec_rt_suspend+0x7c>)
 80179e0:	789b      	ldrb	r3, [r3, #2]
 80179e2:	b1e3      	cbz	r3, 8017a1e <protocol_exec_rt_suspend+0x7a>
        if(sys.abort)
 80179e4:	4b0e      	ldr	r3, [pc, #56]	@ (8017a20 <protocol_exec_rt_suspend+0x7c>)
 80179e6:	781b      	ldrb	r3, [r3, #0]
 80179e8:	b9cb      	cbnz	r3, 8017a1e <protocol_exec_rt_suspend+0x7a>
        if(sys.blocking_event)
 80179ea:	4b0d      	ldr	r3, [pc, #52]	@ (8017a20 <protocol_exec_rt_suspend+0x7c>)
 80179ec:	795b      	ldrb	r3, [r3, #5]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d1ea      	bne.n	80179c8 <protocol_exec_rt_suspend+0x24>
        state_suspend_manager();
 80179f2:	f008 f80d 	bl	801fa10 <state_suspend_manager>
        if(state_get() == STATE_SAFETY_DOOR && !hal.control.get_state().safety_door_ajar)
 80179f6:	f007 fb87 	bl	801f108 <state_get>
 80179fa:	2840      	cmp	r0, #64	@ 0x40
 80179fc:	d1e7      	bne.n	80179ce <protocol_exec_rt_suspend+0x2a>
 80179fe:	4b0b      	ldr	r3, [pc, #44]	@ (8017a2c <protocol_exec_rt_suspend+0x88>)
 8017a00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017a02:	4798      	blx	r3
 8017a04:	f010 0f08 	tst.w	r0, #8
 8017a08:	d1e1      	bne.n	80179ce <protocol_exec_rt_suspend+0x2a>
            system_set_exec_state_flag(EXEC_DOOR_CLOSED);
 8017a0a:	4b08      	ldr	r3, [pc, #32]	@ (8017a2c <protocol_exec_rt_suspend+0x88>)
 8017a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017a0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8017a12:	4808      	ldr	r0, [pc, #32]	@ (8017a34 <protocol_exec_rt_suspend+0x90>)
 8017a14:	4798      	blx	r3
 8017a16:	e7da      	b.n	80179ce <protocol_exec_rt_suspend+0x2a>
            sleep_check();
 8017a18:	f006 fc38 	bl	801e28c <sleep_check>
 8017a1c:	e7dd      	b.n	80179da <protocol_exec_rt_suspend+0x36>
}
 8017a1e:	bd08      	pop	{r3, pc}
 8017a20:	20001bbc 	.word	0x20001bbc
 8017a24:	20002068 	.word	0x20002068
 8017a28:	2000216c 	.word	0x2000216c
 8017a2c:	200018dc 	.word	0x200018dc
 8017a30:	200022f4 	.word	0x200022f4
 8017a34:	20001c04 	.word	0x20001c04

08017a38 <protocol_execute_realtime>:
{
 8017a38:	b510      	push	{r4, lr}
    if(protocol_exec_rt_system()) {
 8017a3a:	f7ff fcd5 	bl	80173e8 <protocol_exec_rt_system>
 8017a3e:	b938      	cbnz	r0, 8017a50 <protocol_execute_realtime+0x18>
    return !ABORTED;
 8017a40:	4b12      	ldr	r3, [pc, #72]	@ (8017a8c <protocol_execute_realtime+0x54>)
 8017a42:	781b      	ldrb	r3, [r3, #0]
 8017a44:	b9f3      	cbnz	r3, 8017a84 <protocol_execute_realtime+0x4c>
 8017a46:	4b11      	ldr	r3, [pc, #68]	@ (8017a8c <protocol_execute_realtime+0x54>)
 8017a48:	785b      	ldrb	r3, [r3, #1]
 8017a4a:	b1eb      	cbz	r3, 8017a88 <protocol_execute_realtime+0x50>
 8017a4c:	2000      	movs	r0, #0
 8017a4e:	e01a      	b.n	8017a86 <protocol_execute_realtime+0x4e>
        sys_state_t state = state_get();
 8017a50:	f007 fb5a 	bl	801f108 <state_get>
 8017a54:	4604      	mov	r4, r0
        if(sys.suspend)
 8017a56:	4b0d      	ldr	r3, [pc, #52]	@ (8017a8c <protocol_execute_realtime+0x54>)
 8017a58:	789b      	ldrb	r3, [r3, #2]
 8017a5a:	b983      	cbnz	r3, 8017a7e <protocol_execute_realtime+0x46>
        if((state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP))) && settings_dirty.is_dirty && !gc_state.file_run)
 8017a5c:	b11c      	cbz	r4, 8017a66 <protocol_execute_realtime+0x2e>
 8017a5e:	f240 1301 	movw	r3, #257	@ 0x101
 8017a62:	421c      	tst	r4, r3
 8017a64:	d0ec      	beq.n	8017a40 <protocol_execute_realtime+0x8>
 8017a66:	4b0a      	ldr	r3, [pc, #40]	@ (8017a90 <protocol_execute_realtime+0x58>)
 8017a68:	781b      	ldrb	r3, [r3, #0]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d0e8      	beq.n	8017a40 <protocol_execute_realtime+0x8>
 8017a6e:	4b09      	ldr	r3, [pc, #36]	@ (8017a94 <protocol_execute_realtime+0x5c>)
 8017a70:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d1e3      	bne.n	8017a40 <protocol_execute_realtime+0x8>
            nvs_buffer_sync_physical();
 8017a78:	f7fe fcd6 	bl	8016428 <nvs_buffer_sync_physical>
 8017a7c:	e7e0      	b.n	8017a40 <protocol_execute_realtime+0x8>
            protocol_exec_rt_suspend(state);
 8017a7e:	f7ff ff91 	bl	80179a4 <protocol_exec_rt_suspend>
 8017a82:	e7eb      	b.n	8017a5c <protocol_execute_realtime+0x24>
    return !ABORTED;
 8017a84:	2000      	movs	r0, #0
}
 8017a86:	bd10      	pop	{r4, pc}
    return !ABORTED;
 8017a88:	2001      	movs	r0, #1
 8017a8a:	e7fc      	b.n	8017a86 <protocol_execute_realtime+0x4e>
 8017a8c:	20001bbc 	.word	0x20001bbc
 8017a90:	20001e18 	.word	0x20001e18
 8017a94:	20001614 	.word	0x20001614

08017a98 <protocol_main_loop>:
{
 8017a98:	b510      	push	{r4, lr}
 8017a9a:	b082      	sub	sp, #8
    if(sys.alarm == Alarm_SelftestFailed) {
 8017a9c:	4b9f      	ldr	r3, [pc, #636]	@ (8017d1c <protocol_main_loop+0x284>)
 8017a9e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8017aa2:	2b10      	cmp	r3, #16
 8017aa4:	d03c      	beq.n	8017b20 <protocol_main_loop+0x88>
    } else if (hal.control.get_state().e_stop) {
 8017aa6:	4b9e      	ldr	r3, [pc, #632]	@ (8017d20 <protocol_main_loop+0x288>)
 8017aa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017aaa:	4798      	blx	r3
 8017aac:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8017ab0:	d13e      	bne.n	8017b30 <protocol_main_loop+0x98>
    } else if(hal.control.get_state().motor_fault) {
 8017ab2:	4b9b      	ldr	r3, [pc, #620]	@ (8017d20 <protocol_main_loop+0x288>)
 8017ab4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017ab6:	4798      	blx	r3
 8017ab8:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8017abc:	d16b      	bne.n	8017b96 <protocol_main_loop+0xfe>
    } else if(settings.probe.enable_protection && hal.control.get_state().probe_triggered) {
 8017abe:	4b99      	ldr	r3, [pc, #612]	@ (8017d24 <protocol_main_loop+0x28c>)
 8017ac0:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8017ac4:	f013 0f20 	tst.w	r3, #32
 8017ac8:	d005      	beq.n	8017ad6 <protocol_main_loop+0x3e>
 8017aca:	4b95      	ldr	r3, [pc, #596]	@ (8017d20 <protocol_main_loop+0x288>)
 8017acc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017ace:	4798      	blx	r3
 8017ad0:	f410 4f80 	tst.w	r0, #16384	@ 0x4000
 8017ad4:	d167      	bne.n	8017ba6 <protocol_main_loop+0x10e>
    } else if (limits_homing_required()) {
 8017ad6:	f7fc f8ff 	bl	8013cd8 <limits_homing_required>
 8017ada:	2800      	cmp	r0, #0
 8017adc:	d16b      	bne.n	8017bb6 <protocol_main_loop+0x11e>
    } else if (settings.limits.flags.hard_enabled &&
 8017ade:	4b91      	ldr	r3, [pc, #580]	@ (8017d24 <protocol_main_loop+0x28c>)
 8017ae0:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 8017ae4:	f003 0305 	and.w	r3, r3, #5
 8017ae8:	2b05      	cmp	r3, #5
 8017aea:	d06c      	beq.n	8017bc6 <protocol_main_loop+0x12e>
    } else if(sys.cold_start && (settings.flags.force_initialization_alarm || hal.control.get_state().reset)) {
 8017aec:	4b8b      	ldr	r3, [pc, #556]	@ (8017d1c <protocol_main_loop+0x284>)
 8017aee:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	f000 8089 	beq.w	8017c0a <protocol_main_loop+0x172>
 8017af8:	4b8a      	ldr	r3, [pc, #552]	@ (8017d24 <protocol_main_loop+0x28c>)
 8017afa:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8017afe:	f013 0f20 	tst.w	r3, #32
 8017b02:	d105      	bne.n	8017b10 <protocol_main_loop+0x78>
 8017b04:	4b86      	ldr	r3, [pc, #536]	@ (8017d20 <protocol_main_loop+0x288>)
 8017b06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017b08:	4798      	blx	r3
 8017b0a:	f010 0f01 	tst.w	r0, #1
 8017b0e:	d07c      	beq.n	8017c0a <protocol_main_loop+0x172>
        state_set(STATE_ALARM); // Ensure alarm state is set.
 8017b10:	2001      	movs	r0, #1
 8017b12:	f007 faff 	bl	801f114 <state_set>
        grbl.report.feedback_message(Message_AlarmLock);
 8017b16:	4b84      	ldr	r3, [pc, #528]	@ (8017d28 <protocol_main_loop+0x290>)
 8017b18:	68db      	ldr	r3, [r3, #12]
 8017b1a:	2002      	movs	r0, #2
 8017b1c:	4798      	blx	r3
 8017b1e:	e00e      	b.n	8017b3e <protocol_main_loop+0xa6>
        sys.alarm = Alarm_None;
 8017b20:	4b7e      	ldr	r3, [pc, #504]	@ (8017d1c <protocol_main_loop+0x284>)
 8017b22:	2200      	movs	r2, #0
 8017b24:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        system_raise_alarm(Alarm_SelftestFailed);
 8017b28:	2010      	movs	r0, #16
 8017b2a:	f00a fa7b 	bl	8022024 <system_raise_alarm>
 8017b2e:	e006      	b.n	8017b3e <protocol_main_loop+0xa6>
        system_raise_alarm(Alarm_EStop);
 8017b30:	200a      	movs	r0, #10
 8017b32:	f00a fa77 	bl	8022024 <system_raise_alarm>
        grbl.report.feedback_message(Message_EStop);
 8017b36:	4b7c      	ldr	r3, [pc, #496]	@ (8017d28 <protocol_main_loop+0x290>)
 8017b38:	68db      	ldr	r3, [r3, #12]
 8017b3a:	200c      	movs	r0, #12
 8017b3c:	4798      	blx	r3
    if(sys.cold_start) {
 8017b3e:	4b77      	ldr	r3, [pc, #476]	@ (8017d1c <protocol_main_loop+0x284>)
 8017b40:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	f000 8096 	beq.w	8017c76 <protocol_main_loop+0x1de>
        spindle_all_off();
 8017b4a:	f007 f859 	bl	801ec00 <spindle_all_off>
        hal.coolant.set_state((coolant_state_t){0});
 8017b4e:	4b74      	ldr	r3, [pc, #464]	@ (8017d20 <protocol_main_loop+0x288>)
 8017b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017b52:	f04f 0000 	mov.w	r0, #0
 8017b56:	4798      	blx	r3
        if(realtime_queue.head != realtime_queue.tail)
 8017b58:	4b74      	ldr	r3, [pc, #464]	@ (8017d2c <protocol_main_loop+0x294>)
 8017b5a:	681a      	ldr	r2, [r3, #0]
 8017b5c:	685b      	ldr	r3, [r3, #4]
 8017b5e:	429a      	cmp	r2, r3
 8017b60:	d005      	beq.n	8017b6e <protocol_main_loop+0xd6>
            system_set_exec_state_flag(EXEC_RT_COMMAND);  // execute any boot up commands
 8017b62:	4b6f      	ldr	r3, [pc, #444]	@ (8017d20 <protocol_main_loop+0x288>)
 8017b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017b66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8017b6a:	4871      	ldr	r0, [pc, #452]	@ (8017d30 <protocol_main_loop+0x298>)
 8017b6c:	4798      	blx	r3
        on_execute_delay = grbl.on_execute_delay;
 8017b6e:	4b6e      	ldr	r3, [pc, #440]	@ (8017d28 <protocol_main_loop+0x290>)
 8017b70:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8017b72:	4a70      	ldr	r2, [pc, #448]	@ (8017d34 <protocol_main_loop+0x29c>)
 8017b74:	6011      	str	r1, [r2, #0]
        grbl.on_execute_delay = protocol_on_execute_delay;
 8017b76:	4a70      	ldr	r2, [pc, #448]	@ (8017d38 <protocol_main_loop+0x2a0>)
 8017b78:	64da      	str	r2, [r3, #76]	@ 0x4c
        sys.cold_start = false;
 8017b7a:	4b68      	ldr	r3, [pc, #416]	@ (8017d1c <protocol_main_loop+0x284>)
 8017b7c:	2200      	movs	r2, #0
 8017b7e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    line_flags_t line_flags = {0};
 8017b82:	2400      	movs	r4, #0
 8017b84:	f88d 4000 	strb.w	r4, [sp]
    xcommand[0] = '\0';
 8017b88:	4b6c      	ldr	r3, [pc, #432]	@ (8017d3c <protocol_main_loop+0x2a4>)
 8017b8a:	701c      	strb	r4, [r3, #0]
    char_counter = 0;
 8017b8c:	4b6c      	ldr	r3, [pc, #432]	@ (8017d40 <protocol_main_loop+0x2a8>)
 8017b8e:	601c      	str	r4, [r3, #0]
    keep_rt_commands = false;
 8017b90:	4b6c      	ldr	r3, [pc, #432]	@ (8017d44 <protocol_main_loop+0x2ac>)
 8017b92:	701c      	strb	r4, [r3, #0]
 8017b94:	e1c7      	b.n	8017f26 <protocol_main_loop+0x48e>
        system_raise_alarm(Alarm_MotorFault);
 8017b96:	2011      	movs	r0, #17
 8017b98:	f00a fa44 	bl	8022024 <system_raise_alarm>
        grbl.report.feedback_message(Message_MotorFault);
 8017b9c:	4b62      	ldr	r3, [pc, #392]	@ (8017d28 <protocol_main_loop+0x290>)
 8017b9e:	68db      	ldr	r3, [r3, #12]
 8017ba0:	2010      	movs	r0, #16
 8017ba2:	4798      	blx	r3
 8017ba4:	e7cb      	b.n	8017b3e <protocol_main_loop+0xa6>
        system_raise_alarm(Alarm_ProbeProtect);
 8017ba6:	200d      	movs	r0, #13
 8017ba8:	f00a fa3c 	bl	8022024 <system_raise_alarm>
        grbl.report.feedback_message(Message_ProbeProtected);
 8017bac:	4b5e      	ldr	r3, [pc, #376]	@ (8017d28 <protocol_main_loop+0x290>)
 8017bae:	68db      	ldr	r3, [r3, #12]
 8017bb0:	2015      	movs	r0, #21
 8017bb2:	4798      	blx	r3
 8017bb4:	e7c3      	b.n	8017b3e <protocol_main_loop+0xa6>
        system_raise_alarm(Alarm_HomingRequired);
 8017bb6:	200b      	movs	r0, #11
 8017bb8:	f00a fa34 	bl	8022024 <system_raise_alarm>
        grbl.report.feedback_message(Message_HomingCycleRequired);
 8017bbc:	4b5a      	ldr	r3, [pc, #360]	@ (8017d28 <protocol_main_loop+0x290>)
 8017bbe:	68db      	ldr	r3, [r3, #12]
 8017bc0:	200d      	movs	r0, #13
 8017bc2:	4798      	blx	r3
 8017bc4:	e7bb      	b.n	8017b3e <protocol_main_loop+0xa6>
                 (limit_signals_merge(hal.limits.get_state()).value & sys.hard_limits.mask)) {
 8017bc6:	4b56      	ldr	r3, [pc, #344]	@ (8017d20 <protocol_main_loop+0x288>)
 8017bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017bca:	4798      	blx	r3
 8017bcc:	9001      	str	r0, [sp, #4]
 8017bce:	f7fb fc37 	bl	8013440 <limit_signals_merge>
 8017bd2:	4b52      	ldr	r3, [pc, #328]	@ (8017d1c <protocol_main_loop+0x284>)
 8017bd4:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
                settings.limits.flags.check_at_init &&
 8017bd8:	4203      	tst	r3, r0
 8017bda:	d087      	beq.n	8017aec <protocol_main_loop+0x54>
        if(sys.alarm == Alarm_LimitsEngaged && hal.control.get_state().limits_override)
 8017bdc:	4b4f      	ldr	r3, [pc, #316]	@ (8017d1c <protocol_main_loop+0x284>)
 8017bde:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8017be2:	2b0c      	cmp	r3, #12
 8017be4:	d105      	bne.n	8017bf2 <protocol_main_loop+0x15a>
 8017be6:	4b4e      	ldr	r3, [pc, #312]	@ (8017d20 <protocol_main_loop+0x288>)
 8017be8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017bea:	4798      	blx	r3
 8017bec:	f410 6f80 	tst.w	r0, #1024	@ 0x400
 8017bf0:	d107      	bne.n	8017c02 <protocol_main_loop+0x16a>
            system_raise_alarm(Alarm_LimitsEngaged);
 8017bf2:	200c      	movs	r0, #12
 8017bf4:	f00a fa16 	bl	8022024 <system_raise_alarm>
            grbl.report.feedback_message(Message_CheckLimits);
 8017bf8:	4b4b      	ldr	r3, [pc, #300]	@ (8017d28 <protocol_main_loop+0x290>)
 8017bfa:	68db      	ldr	r3, [r3, #12]
 8017bfc:	2007      	movs	r0, #7
 8017bfe:	4798      	blx	r3
 8017c00:	e79d      	b.n	8017b3e <protocol_main_loop+0xa6>
            state_set(STATE_IDLE); // Clear alarm state to enable limit switch pulloff.
 8017c02:	2000      	movs	r0, #0
 8017c04:	f007 fa86 	bl	801f114 <state_set>
 8017c08:	e799      	b.n	8017b3e <protocol_main_loop+0xa6>
    } else if (state_get() & (STATE_ALARM|STATE_SLEEP)) {
 8017c0a:	f007 fa7d 	bl	801f108 <state_get>
 8017c0e:	f010 0f81 	tst.w	r0, #129	@ 0x81
 8017c12:	d011      	beq.n	8017c38 <protocol_main_loop+0x1a0>
        if(sys.alarm == Alarm_HomingRequired)
 8017c14:	4b41      	ldr	r3, [pc, #260]	@ (8017d1c <protocol_main_loop+0x284>)
 8017c16:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8017c1a:	2b0b      	cmp	r3, #11
 8017c1c:	d007      	beq.n	8017c2e <protocol_main_loop+0x196>
        state_set(STATE_ALARM); // Ensure alarm state is set.
 8017c1e:	2001      	movs	r0, #1
 8017c20:	f007 fa78 	bl	801f114 <state_set>
        grbl.report.feedback_message(Message_AlarmLock);
 8017c24:	4b40      	ldr	r3, [pc, #256]	@ (8017d28 <protocol_main_loop+0x290>)
 8017c26:	68db      	ldr	r3, [r3, #12]
 8017c28:	2002      	movs	r0, #2
 8017c2a:	4798      	blx	r3
 8017c2c:	e787      	b.n	8017b3e <protocol_main_loop+0xa6>
            sys.alarm = Alarm_None; // Clear Alarm_HomingRequired as the lock has been overridden by a soft reset.
 8017c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8017d1c <protocol_main_loop+0x284>)
 8017c30:	2200      	movs	r2, #0
 8017c32:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8017c36:	e7f2      	b.n	8017c1e <protocol_main_loop+0x186>
        state_set(STATE_IDLE);
 8017c38:	2000      	movs	r0, #0
 8017c3a:	f007 fa6b 	bl	801f114 <state_set>
        if (hal.signals_cap.safety_door_ajar && !settings.safety_door.flags.ignore_when_idle && hal.control.get_state().safety_door_ajar) {
 8017c3e:	4b38      	ldr	r3, [pc, #224]	@ (8017d20 <protocol_main_loop+0x288>)
 8017c40:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8017c44:	f013 0f08 	tst.w	r3, #8
 8017c48:	d012      	beq.n	8017c70 <protocol_main_loop+0x1d8>
 8017c4a:	4b36      	ldr	r3, [pc, #216]	@ (8017d24 <protocol_main_loop+0x28c>)
 8017c4c:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 8017c50:	f013 0f01 	tst.w	r3, #1
 8017c54:	d10c      	bne.n	8017c70 <protocol_main_loop+0x1d8>
 8017c56:	4b32      	ldr	r3, [pc, #200]	@ (8017d20 <protocol_main_loop+0x288>)
 8017c58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017c5a:	4798      	blx	r3
 8017c5c:	f010 0f08 	tst.w	r0, #8
 8017c60:	d006      	beq.n	8017c70 <protocol_main_loop+0x1d8>
            system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 8017c62:	4b2f      	ldr	r3, [pc, #188]	@ (8017d20 <protocol_main_loop+0x288>)
 8017c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017c66:	2140      	movs	r1, #64	@ 0x40
 8017c68:	4831      	ldr	r0, [pc, #196]	@ (8017d30 <protocol_main_loop+0x298>)
 8017c6a:	4798      	blx	r3
            protocol_execute_realtime(); // Enter safety door mode. Should return as IDLE state.
 8017c6c:	f7ff fee4 	bl	8017a38 <protocol_execute_realtime>
        system_execute_startup(); // Execute startup script.
 8017c70:	f009 ff50 	bl	8021b14 <system_execute_startup>
 8017c74:	e763      	b.n	8017b3e <protocol_main_loop+0xa6>
        memset(&realtime_queue, 0, sizeof(realtime_queue_t));
 8017c76:	2288      	movs	r2, #136	@ 0x88
 8017c78:	2100      	movs	r1, #0
 8017c7a:	482c      	ldr	r0, [pc, #176]	@ (8017d2c <protocol_main_loop+0x294>)
 8017c7c:	f00d f953 	bl	8024f26 <memset>
 8017c80:	e77f      	b.n	8017b82 <protocol_main_loop+0xea>
                eol = xcommand[0] = '\0';
 8017c82:	2300      	movs	r3, #0
 8017c84:	4a2d      	ldr	r2, [pc, #180]	@ (8017d3c <protocol_main_loop+0x2a4>)
 8017c86:	7013      	strb	r3, [r2, #0]
                keep_rt_commands = false;
 8017c88:	4a2e      	ldr	r2, [pc, #184]	@ (8017d44 <protocol_main_loop+0x2ac>)
 8017c8a:	7013      	strb	r3, [r2, #0]
                char_counter = line_flags.value = 0;
 8017c8c:	f88d 3000 	strb.w	r3, [sp]
 8017c90:	4a2b      	ldr	r2, [pc, #172]	@ (8017d40 <protocol_main_loop+0x2a8>)
 8017c92:	6013      	str	r3, [r2, #0]
                gc_state.last_error = Status_OK;
 8017c94:	4a2c      	ldr	r2, [pc, #176]	@ (8017d48 <protocol_main_loop+0x2b0>)
 8017c96:	f882 3081 	strb.w	r3, [r2, #129]	@ 0x81
                if (state_get() == STATE_JOG) // Block all other states from invoking motion cancel.
 8017c9a:	f007 fa35 	bl	801f108 <state_get>
 8017c9e:	2820      	cmp	r0, #32
 8017ca0:	d001      	beq.n	8017ca6 <protocol_main_loop+0x20e>
                eol = xcommand[0] = '\0';
 8017ca2:	2400      	movs	r4, #0
 8017ca4:	e13f      	b.n	8017f26 <protocol_main_loop+0x48e>
                    system_set_exec_state_flag(EXEC_MOTION_CANCEL);
 8017ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8017d20 <protocol_main_loop+0x288>)
 8017ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017caa:	2180      	movs	r1, #128	@ 0x80
 8017cac:	4820      	ldr	r0, [pc, #128]	@ (8017d30 <protocol_main_loop+0x298>)
 8017cae:	4798      	blx	r3
                eol = xcommand[0] = '\0';
 8017cb0:	2400      	movs	r4, #0
 8017cb2:	e138      	b.n	8017f26 <protocol_main_loop+0x48e>
                if(char_counter == 0 && eol && eol != c) {
 8017cb4:	4b22      	ldr	r3, [pc, #136]	@ (8017d40 <protocol_main_loop+0x2a8>)
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	b91b      	cbnz	r3, 8017cc2 <protocol_main_loop+0x22a>
 8017cba:	b114      	cbz	r4, 8017cc2 <protocol_main_loop+0x22a>
 8017cbc:	4284      	cmp	r4, r0
 8017cbe:	f040 810c 	bne.w	8017eda <protocol_main_loop+0x442>
                    eol = (char)c;
 8017cc2:	b2c4      	uxtb	r4, r0
                if(!protocol_execute_realtime()) // Runtime command check point.
 8017cc4:	f7ff feb8 	bl	8017a38 <protocol_execute_realtime>
 8017cc8:	b300      	cbz	r0, 8017d0c <protocol_main_loop+0x274>
                line[char_counter] = '\0'; // Set string termination character.
 8017cca:	4b1d      	ldr	r3, [pc, #116]	@ (8017d40 <protocol_main_loop+0x2a8>)
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	4a1f      	ldr	r2, [pc, #124]	@ (8017d4c <protocol_main_loop+0x2b4>)
 8017cd0:	2100      	movs	r1, #0
 8017cd2:	54d1      	strb	r1, [r2, r3]
                if (line_flags.overflow) // Report line overflow error.
 8017cd4:	f89d 3000 	ldrb.w	r3, [sp]
 8017cd8:	f013 0f01 	tst.w	r3, #1
 8017cdc:	d038      	beq.n	8017d50 <protocol_main_loop+0x2b8>
                    gc_state.last_error = Status_Overflow;
 8017cde:	4b1a      	ldr	r3, [pc, #104]	@ (8017d48 <protocol_main_loop+0x2b0>)
 8017ce0:	220b      	movs	r2, #11
 8017ce2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
                if(ABORTED)
 8017ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8017d1c <protocol_main_loop+0x284>)
 8017ce8:	881b      	ldrh	r3, [r3, #0]
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	f040 80f7 	bne.w	8017ede <protocol_main_loop+0x446>
                    grbl.report.status_message(gc_state.last_error);
 8017cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8017d28 <protocol_main_loop+0x290>)
 8017cf2:	689b      	ldr	r3, [r3, #8]
 8017cf4:	4a14      	ldr	r2, [pc, #80]	@ (8017d48 <protocol_main_loop+0x2b0>)
 8017cf6:	f892 0081 	ldrb.w	r0, [r2, #129]	@ 0x81
 8017cfa:	4798      	blx	r3
                keep_rt_commands = false;
 8017cfc:	2300      	movs	r3, #0
 8017cfe:	4a11      	ldr	r2, [pc, #68]	@ (8017d44 <protocol_main_loop+0x2ac>)
 8017d00:	7013      	strb	r3, [r2, #0]
                char_counter = line_flags.value = 0;
 8017d02:	f88d 3000 	strb.w	r3, [sp]
 8017d06:	4a0e      	ldr	r2, [pc, #56]	@ (8017d40 <protocol_main_loop+0x2a8>)
 8017d08:	6013      	str	r3, [r2, #0]
 8017d0a:	e10c      	b.n	8017f26 <protocol_main_loop+0x48e>
                    return !sys.flags.exit;      // Bail to calling function upon system abort
 8017d0c:	4b03      	ldr	r3, [pc, #12]	@ (8017d1c <protocol_main_loop+0x284>)
 8017d0e:	7d98      	ldrb	r0, [r3, #22]
 8017d10:	08c0      	lsrs	r0, r0, #3
 8017d12:	f080 0001 	eor.w	r0, r0, #1
 8017d16:	f000 0001 	and.w	r0, r0, #1
 8017d1a:	e144      	b.n	8017fa6 <protocol_main_loop+0x50e>
 8017d1c:	20001bbc 	.word	0x20001bbc
 8017d20:	200018dc 	.word	0x200018dc
 8017d24:	200022f4 	.word	0x200022f4
 8017d28:	20001ac4 	.word	0x20001ac4
 8017d2c:	20001ed8 	.word	0x20001ed8
 8017d30:	20001c04 	.word	0x20001c04
 8017d34:	20001ed4 	.word	0x20001ed4
 8017d38:	0801725d 	.word	0x0801725d
 8017d3c:	20001f64 	.word	0x20001f64
 8017d40:	2000216c 	.word	0x2000216c
 8017d44:	20001f60 	.word	0x20001f60
 8017d48:	20001614 	.word	0x20001614
 8017d4c:	20002068 	.word	0x20002068
                else if(*line == '\0') // Empty line. For syncing purposes.
 8017d50:	4b97      	ldr	r3, [pc, #604]	@ (8017fb0 <protocol_main_loop+0x518>)
 8017d52:	781b      	ldrb	r3, [r3, #0]
 8017d54:	b923      	cbnz	r3, 8017d60 <protocol_main_loop+0x2c8>
                    gc_state.last_error = Status_OK;
 8017d56:	4b97      	ldr	r3, [pc, #604]	@ (8017fb4 <protocol_main_loop+0x51c>)
 8017d58:	2200      	movs	r2, #0
 8017d5a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8017d5e:	e7c2      	b.n	8017ce6 <protocol_main_loop+0x24e>
                else if(*line == '$') {// grblHAL '$' system command
 8017d60:	2b24      	cmp	r3, #36	@ 0x24
 8017d62:	d00b      	beq.n	8017d7c <protocol_main_loop+0x2e4>
                } else if(*line == '[' && grbl.on_user_command)
 8017d64:	2b5b      	cmp	r3, #91	@ 0x5b
 8017d66:	d119      	bne.n	8017d9c <protocol_main_loop+0x304>
 8017d68:	4b93      	ldr	r3, [pc, #588]	@ (8017fb8 <protocol_main_loop+0x520>)
 8017d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017d6e:	b1ab      	cbz	r3, 8017d9c <protocol_main_loop+0x304>
                    gc_state.last_error = grbl.on_user_command(line);
 8017d70:	488f      	ldr	r0, [pc, #572]	@ (8017fb0 <protocol_main_loop+0x518>)
 8017d72:	4798      	blx	r3
 8017d74:	4b8f      	ldr	r3, [pc, #572]	@ (8017fb4 <protocol_main_loop+0x51c>)
 8017d76:	f883 0081 	strb.w	r0, [r3, #129]	@ 0x81
 8017d7a:	e7b4      	b.n	8017ce6 <protocol_main_loop+0x24e>
                    if((gc_state.last_error = system_execute_line(line)) == Status_LimitsEngaged) {
 8017d7c:	488c      	ldr	r0, [pc, #560]	@ (8017fb0 <protocol_main_loop+0x518>)
 8017d7e:	f009 ffe5 	bl	8021d4c <system_execute_line>
 8017d82:	4b8c      	ldr	r3, [pc, #560]	@ (8017fb4 <protocol_main_loop+0x51c>)
 8017d84:	f883 0081 	strb.w	r0, [r3, #129]	@ 0x81
 8017d88:	282d      	cmp	r0, #45	@ 0x2d
 8017d8a:	d1ac      	bne.n	8017ce6 <protocol_main_loop+0x24e>
                        system_raise_alarm(Alarm_LimitsEngaged);
 8017d8c:	200c      	movs	r0, #12
 8017d8e:	f00a f949 	bl	8022024 <system_raise_alarm>
                        grbl.report.feedback_message(Message_CheckLimits);
 8017d92:	4b89      	ldr	r3, [pc, #548]	@ (8017fb8 <protocol_main_loop+0x520>)
 8017d94:	68db      	ldr	r3, [r3, #12]
 8017d96:	2007      	movs	r0, #7
 8017d98:	4798      	blx	r3
 8017d9a:	e7a4      	b.n	8017ce6 <protocol_main_loop+0x24e>
                else if (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_JOG)) // Everything else is gcode. Block if in alarm, eStop or jog mode.
 8017d9c:	f007 f9b4 	bl	801f108 <state_get>
 8017da0:	f240 1321 	movw	r3, #289	@ 0x121
 8017da4:	4218      	tst	r0, r3
 8017da6:	d004      	beq.n	8017db2 <protocol_main_loop+0x31a>
                    gc_state.last_error = Status_SystemGClock;
 8017da8:	4b82      	ldr	r3, [pc, #520]	@ (8017fb4 <protocol_main_loop+0x51c>)
 8017daa:	2209      	movs	r2, #9
 8017dac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8017db0:	e799      	b.n	8017ce6 <protocol_main_loop+0x24e>
                else if(gc_state.last_error == Status_OK || gc_state.last_error == Status_GcodeToolChangePending) { // Parse and execute g-code block.
 8017db2:	4b80      	ldr	r3, [pc, #512]	@ (8017fb4 <protocol_main_loop+0x51c>)
 8017db4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8017db8:	b10b      	cbz	r3, 8017dbe <protocol_main_loop+0x326>
 8017dba:	2b28      	cmp	r3, #40	@ 0x28
 8017dbc:	d193      	bne.n	8017ce6 <protocol_main_loop+0x24e>
                    gc_state.last_error = gc_execute_block(line);
 8017dbe:	487c      	ldr	r0, [pc, #496]	@ (8017fb0 <protocol_main_loop+0x518>)
 8017dc0:	f7f5 fe3a 	bl	800da38 <gc_execute_block>
 8017dc4:	4b7b      	ldr	r3, [pc, #492]	@ (8017fb4 <protocol_main_loop+0x51c>)
 8017dc6:	f883 0081 	strb.w	r0, [r3, #129]	@ 0x81
 8017dca:	e78c      	b.n	8017ce6 <protocol_main_loop+0x24e>
            } else if (c != ASCII_BS && c <= (char_counter > 0 ? ' ' - 1 : ' '))
 8017dcc:	4b7b      	ldr	r3, [pc, #492]	@ (8017fbc <protocol_main_loop+0x524>)
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	b1cb      	cbz	r3, 8017e06 <protocol_main_loop+0x36e>
 8017dd2:	221f      	movs	r2, #31
 8017dd4:	4290      	cmp	r0, r2
 8017dd6:	f340 80a6 	ble.w	8017f26 <protocol_main_loop+0x48e>
                switch(c) {
 8017dda:	283b      	cmp	r0, #59	@ 0x3b
 8017ddc:	dc29      	bgt.n	8017e32 <protocol_main_loop+0x39a>
 8017dde:	2824      	cmp	r0, #36	@ 0x24
 8017de0:	db13      	blt.n	8017e0a <protocol_main_loop+0x372>
 8017de2:	f1a0 0224 	sub.w	r2, r0, #36	@ 0x24
 8017de6:	2a17      	cmp	r2, #23
 8017de8:	d811      	bhi.n	8017e0e <protocol_main_loop+0x376>
 8017dea:	e8df f002 	tbb	[pc, r2]
 8017dee:	1036      	.short	0x1036
 8017df0:	583c1010 	.word	0x583c1010
 8017df4:	10101010 	.word	0x10101010
 8017df8:	10101010 	.word	0x10101010
 8017dfc:	10101010 	.word	0x10101010
 8017e00:	10101010 	.word	0x10101010
 8017e04:	6710      	.short	0x6710
            } else if (c != ASCII_BS && c <= (char_counter > 0 ? ' ' - 1 : ' '))
 8017e06:	2220      	movs	r2, #32
 8017e08:	e7e4      	b.n	8017dd4 <protocol_main_loop+0x33c>
                switch(c) {
 8017e0a:	2808      	cmp	r0, #8
 8017e0c:	d015      	beq.n	8017e3a <protocol_main_loop+0x3a2>
                if(!(line_flags.overflow = char_counter >= (LINE_BUFFER_SIZE - 1)))
 8017e0e:	2bff      	cmp	r3, #255	@ 0xff
 8017e10:	bf94      	ite	ls
 8017e12:	2200      	movls	r2, #0
 8017e14:	2201      	movhi	r2, #1
 8017e16:	f89d 1000 	ldrb.w	r1, [sp]
 8017e1a:	f362 0100 	bfi	r1, r2, #0, #1
 8017e1e:	f88d 1000 	strb.w	r1, [sp]
 8017e22:	2a00      	cmp	r2, #0
 8017e24:	d17f      	bne.n	8017f26 <protocol_main_loop+0x48e>
                    line[char_counter++] = c;
 8017e26:	1c59      	adds	r1, r3, #1
 8017e28:	4a64      	ldr	r2, [pc, #400]	@ (8017fbc <protocol_main_loop+0x524>)
 8017e2a:	6011      	str	r1, [r2, #0]
 8017e2c:	4a60      	ldr	r2, [pc, #384]	@ (8017fb0 <protocol_main_loop+0x518>)
 8017e2e:	54d0      	strb	r0, [r2, r3]
 8017e30:	e079      	b.n	8017f26 <protocol_main_loop+0x48e>
                switch(c) {
 8017e32:	285b      	cmp	r0, #91	@ 0x5b
 8017e34:	d011      	beq.n	8017e5a <protocol_main_loop+0x3c2>
 8017e36:	287f      	cmp	r0, #127	@ 0x7f
 8017e38:	d1e9      	bne.n	8017e0e <protocol_main_loop+0x376>
                        if(char_counter) {
 8017e3a:	4b60      	ldr	r3, [pc, #384]	@ (8017fbc <protocol_main_loop+0x524>)
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d071      	beq.n	8017f26 <protocol_main_loop+0x48e>
                            line[--char_counter] = '\0';
 8017e42:	3b01      	subs	r3, #1
 8017e44:	4a5d      	ldr	r2, [pc, #372]	@ (8017fbc <protocol_main_loop+0x524>)
 8017e46:	6013      	str	r3, [r2, #0]
 8017e48:	4859      	ldr	r0, [pc, #356]	@ (8017fb0 <protocol_main_loop+0x518>)
 8017e4a:	2200      	movs	r2, #0
 8017e4c:	54c2      	strb	r2, [r0, r3]
                            keep_rt_commands = recheck_line(line, &line_flags);
 8017e4e:	4669      	mov	r1, sp
 8017e50:	f7ff f94a 	bl	80170e8 <recheck_line>
 8017e54:	4b5a      	ldr	r3, [pc, #360]	@ (8017fc0 <protocol_main_loop+0x528>)
 8017e56:	7018      	strb	r0, [r3, #0]
                        continue;
 8017e58:	e065      	b.n	8017f26 <protocol_main_loop+0x48e>
                        if(char_counter == 0)
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d1d7      	bne.n	8017e0e <protocol_main_loop+0x376>
                            keep_rt_commands = true;
 8017e5e:	4a58      	ldr	r2, [pc, #352]	@ (8017fc0 <protocol_main_loop+0x528>)
 8017e60:	2101      	movs	r1, #1
 8017e62:	7011      	strb	r1, [r2, #0]
 8017e64:	e7d3      	b.n	8017e0e <protocol_main_loop+0x376>
                        if(!keep_rt_commands && (line_flags.comment_parentheses = !line_flags.comment_semicolon))
 8017e66:	4a56      	ldr	r2, [pc, #344]	@ (8017fc0 <protocol_main_loop+0x528>)
 8017e68:	7812      	ldrb	r2, [r2, #0]
 8017e6a:	2a00      	cmp	r2, #0
 8017e6c:	d1cf      	bne.n	8017e0e <protocol_main_loop+0x376>
 8017e6e:	f89d 1000 	ldrb.w	r1, [sp]
 8017e72:	088a      	lsrs	r2, r1, #2
 8017e74:	f082 0201 	eor.w	r2, r2, #1
 8017e78:	f002 0201 	and.w	r2, r2, #1
 8017e7c:	f362 0141 	bfi	r1, r2, #1, #1
 8017e80:	f88d 1000 	strb.w	r1, [sp]
 8017e84:	2a00      	cmp	r2, #0
 8017e86:	d0c2      	beq.n	8017e0e <protocol_main_loop+0x376>
                            keep_rt_commands = !hal.driver_cap.no_gcode_message_handling; // Suspend real-time processing of printable command characters.
 8017e88:	4a4e      	ldr	r2, [pc, #312]	@ (8017fc4 <protocol_main_loop+0x52c>)
 8017e8a:	f892 21da 	ldrb.w	r2, [r2, #474]	@ 0x1da
 8017e8e:	0892      	lsrs	r2, r2, #2
 8017e90:	f082 0201 	eor.w	r2, r2, #1
 8017e94:	f002 0201 	and.w	r2, r2, #1
 8017e98:	4949      	ldr	r1, [pc, #292]	@ (8017fc0 <protocol_main_loop+0x528>)
 8017e9a:	700a      	strb	r2, [r1, #0]
 8017e9c:	e7b7      	b.n	8017e0e <protocol_main_loop+0x376>
                        if(!line_flags.comment_semicolon)
 8017e9e:	f89d 2000 	ldrb.w	r2, [sp]
 8017ea2:	f012 0f04 	tst.w	r2, #4
 8017ea6:	d1b2      	bne.n	8017e0e <protocol_main_loop+0x376>
                            line_flags.comment_parentheses = keep_rt_commands = false;
 8017ea8:	2100      	movs	r1, #0
 8017eaa:	4a45      	ldr	r2, [pc, #276]	@ (8017fc0 <protocol_main_loop+0x528>)
 8017eac:	7011      	strb	r1, [r2, #0]
 8017eae:	f89d 2000 	ldrb.w	r2, [sp]
 8017eb2:	f361 0241 	bfi	r2, r1, #1, #1
 8017eb6:	f88d 2000 	strb.w	r2, [sp]
 8017eba:	e7a8      	b.n	8017e0e <protocol_main_loop+0x376>
                        if(!line_flags.comment_parentheses) {
 8017ebc:	f89d 2000 	ldrb.w	r2, [sp]
 8017ec0:	f012 0f02 	tst.w	r2, #2
 8017ec4:	d1a3      	bne.n	8017e0e <protocol_main_loop+0x376>
                            keep_rt_commands = false;
 8017ec6:	4a3e      	ldr	r2, [pc, #248]	@ (8017fc0 <protocol_main_loop+0x528>)
 8017ec8:	2100      	movs	r1, #0
 8017eca:	7011      	strb	r1, [r2, #0]
                            line_flags.comment_semicolon = On;
 8017ecc:	f89d 2000 	ldrb.w	r2, [sp]
 8017ed0:	f042 0204 	orr.w	r2, r2, #4
 8017ed4:	f88d 2000 	strb.w	r2, [sp]
 8017ed8:	e799      	b.n	8017e0e <protocol_main_loop+0x376>
                    eol = '\0';
 8017eda:	2400      	movs	r4, #0
 8017edc:	e023      	b.n	8017f26 <protocol_main_loop+0x48e>
        if(xcommand[0] != '\0') {
 8017ede:	4b3a      	ldr	r3, [pc, #232]	@ (8017fc8 <protocol_main_loop+0x530>)
 8017ee0:	781b      	ldrb	r3, [r3, #0]
 8017ee2:	b173      	cbz	r3, 8017f02 <protocol_main_loop+0x46a>
            if (xcommand[0] == '$') // grblHAL '$' system command
 8017ee4:	2b24      	cmp	r3, #36	@ 0x24
 8017ee6:	d04f      	beq.n	8017f88 <protocol_main_loop+0x4f0>
            else if (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_JOG)) // Everything else is gcode. Block if in alarm, eStop or jog state.
 8017ee8:	f007 f90e 	bl	801f108 <state_get>
 8017eec:	f240 1321 	movw	r3, #289	@ 0x121
 8017ef0:	4218      	tst	r0, r3
 8017ef2:	d04d      	beq.n	8017f90 <protocol_main_loop+0x4f8>
                grbl.report.status_message(Status_SystemGClock);
 8017ef4:	4b30      	ldr	r3, [pc, #192]	@ (8017fb8 <protocol_main_loop+0x520>)
 8017ef6:	689b      	ldr	r3, [r3, #8]
 8017ef8:	2009      	movs	r0, #9
 8017efa:	4798      	blx	r3
            xcommand[0] = '\0';
 8017efc:	4b32      	ldr	r3, [pc, #200]	@ (8017fc8 <protocol_main_loop+0x530>)
 8017efe:	2200      	movs	r2, #0
 8017f00:	701a      	strb	r2, [r3, #0]
        protocol_auto_cycle_start();
 8017f02:	f7ff fa63 	bl	80173cc <protocol_auto_cycle_start>
        if(!protocol_execute_realtime() && sys.abort) // Runtime command check point.
 8017f06:	f7ff fd97 	bl	8017a38 <protocol_execute_realtime>
 8017f0a:	b918      	cbnz	r0, 8017f14 <protocol_main_loop+0x47c>
 8017f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8017fcc <protocol_main_loop+0x534>)
 8017f0e:	781b      	ldrb	r3, [r3, #0]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d141      	bne.n	8017f98 <protocol_main_loop+0x500>
        sys.cancel = false;
 8017f14:	4b2d      	ldr	r3, [pc, #180]	@ (8017fcc <protocol_main_loop+0x534>)
 8017f16:	2200      	movs	r2, #0
 8017f18:	705a      	strb	r2, [r3, #1]
        if(settings.flags.sleep_enable)
 8017f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8017fd0 <protocol_main_loop+0x538>)
 8017f1c:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8017f20:	f013 0f08 	tst.w	r3, #8
 8017f24:	d141      	bne.n	8017faa <protocol_main_loop+0x512>
        while((c = hal.stream.read()) != SERIAL_NO_DATA) {
 8017f26:	4b27      	ldr	r3, [pc, #156]	@ (8017fc4 <protocol_main_loop+0x52c>)
 8017f28:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8017f2c:	4798      	blx	r3
 8017f2e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017f32:	d0d4      	beq.n	8017ede <protocol_main_loop+0x446>
            if(c == ASCII_CAN) {
 8017f34:	f1a0 0308 	sub.w	r3, r0, #8
 8017f38:	2b10      	cmp	r3, #16
 8017f3a:	f63f af47 	bhi.w	8017dcc <protocol_main_loop+0x334>
 8017f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8017f44 <protocol_main_loop+0x4ac>)
 8017f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f44:	08017e3b 	.word	0x08017e3b
 8017f48:	08017dcd 	.word	0x08017dcd
 8017f4c:	08017cb5 	.word	0x08017cb5
 8017f50:	08017dcd 	.word	0x08017dcd
 8017f54:	08017dcd 	.word	0x08017dcd
 8017f58:	08017cb5 	.word	0x08017cb5
 8017f5c:	08017dcd 	.word	0x08017dcd
 8017f60:	08017dcd 	.word	0x08017dcd
 8017f64:	08017dcd 	.word	0x08017dcd
 8017f68:	08017dcd 	.word	0x08017dcd
 8017f6c:	08017dcd 	.word	0x08017dcd
 8017f70:	08017dcd 	.word	0x08017dcd
 8017f74:	08017dcd 	.word	0x08017dcd
 8017f78:	08017dcd 	.word	0x08017dcd
 8017f7c:	08017dcd 	.word	0x08017dcd
 8017f80:	08017dcd 	.word	0x08017dcd
 8017f84:	08017c83 	.word	0x08017c83
                system_execute_line(xcommand);
 8017f88:	480f      	ldr	r0, [pc, #60]	@ (8017fc8 <protocol_main_loop+0x530>)
 8017f8a:	f009 fedf 	bl	8021d4c <system_execute_line>
 8017f8e:	e7b5      	b.n	8017efc <protocol_main_loop+0x464>
                gc_execute_block(xcommand);
 8017f90:	480d      	ldr	r0, [pc, #52]	@ (8017fc8 <protocol_main_loop+0x530>)
 8017f92:	f7f5 fd51 	bl	800da38 <gc_execute_block>
 8017f96:	e7b1      	b.n	8017efc <protocol_main_loop+0x464>
            return !sys.flags.exit;                   // Bail to main() program loop to reset system.
 8017f98:	4b0c      	ldr	r3, [pc, #48]	@ (8017fcc <protocol_main_loop+0x534>)
 8017f9a:	7d98      	ldrb	r0, [r3, #22]
 8017f9c:	08c0      	lsrs	r0, r0, #3
 8017f9e:	f080 0001 	eor.w	r0, r0, #1
 8017fa2:	f000 0001 	and.w	r0, r0, #1
}
 8017fa6:	b002      	add	sp, #8
 8017fa8:	bd10      	pop	{r4, pc}
            sleep_check();
 8017faa:	f006 f96f 	bl	801e28c <sleep_check>
 8017fae:	e7ba      	b.n	8017f26 <protocol_main_loop+0x48e>
 8017fb0:	20002068 	.word	0x20002068
 8017fb4:	20001614 	.word	0x20001614
 8017fb8:	20001ac4 	.word	0x20001ac4
 8017fbc:	2000216c 	.word	0x2000216c
 8017fc0:	20001f60 	.word	0x20001f60
 8017fc4:	200018dc 	.word	0x200018dc
 8017fc8:	20001f64 	.word	0x20001f64
 8017fcc:	20001bbc 	.word	0x20001bbc
 8017fd0:	200022f4 	.word	0x200022f4

08017fd4 <protocol_buffer_synchronize>:
{
 8017fd4:	b510      	push	{r4, lr}
    protocol_auto_cycle_start();
 8017fd6:	f7ff f9f9 	bl	80173cc <protocol_auto_cycle_start>
    sys.flags.synchronizing = On;
 8017fda:	4a0c      	ldr	r2, [pc, #48]	@ (801800c <protocol_buffer_synchronize+0x38>)
 8017fdc:	7dd3      	ldrb	r3, [r2, #23]
 8017fde:	f043 0304 	orr.w	r3, r3, #4
 8017fe2:	75d3      	strb	r3, [r2, #23]
    while ((ok = protocol_execute_realtime()) && (plan_get_current_block() || state_get() == STATE_CYCLE));
 8017fe4:	f7ff fd28 	bl	8017a38 <protocol_execute_realtime>
 8017fe8:	4604      	mov	r4, r0
 8017fea:	b138      	cbz	r0, 8017ffc <protocol_buffer_synchronize+0x28>
 8017fec:	f7fe fd58 	bl	8016aa0 <plan_get_current_block>
 8017ff0:	2800      	cmp	r0, #0
 8017ff2:	d1f7      	bne.n	8017fe4 <protocol_buffer_synchronize+0x10>
 8017ff4:	f007 f888 	bl	801f108 <state_get>
 8017ff8:	2808      	cmp	r0, #8
 8017ffa:	d0f3      	beq.n	8017fe4 <protocol_buffer_synchronize+0x10>
    sys.flags.synchronizing = Off;
 8017ffc:	4b03      	ldr	r3, [pc, #12]	@ (801800c <protocol_buffer_synchronize+0x38>)
 8017ffe:	7dda      	ldrb	r2, [r3, #23]
 8018000:	f36f 0282 	bfc	r2, #2, #1
 8018004:	75da      	strb	r2, [r3, #23]
}
 8018006:	4620      	mov	r0, r4
 8018008:	bd10      	pop	{r4, pc}
 801800a:	bf00      	nop
 801800c:	20001bbc 	.word	0x20001bbc

08018010 <protocol_enqueue_foreground_task>:
{
 8018010:	b538      	push	{r3, r4, r5, lr}
    uint_fast8_t bptr = (realtime_queue.head + 1) & (RT_QUEUE_SIZE - 1);    // Get next head pointer
 8018012:	4a0f      	ldr	r2, [pc, #60]	@ (8018050 <protocol_enqueue_foreground_task+0x40>)
 8018014:	6813      	ldr	r3, [r2, #0]
 8018016:	3301      	adds	r3, #1
 8018018:	f003 030f 	and.w	r3, r3, #15
    if((ok = bptr != realtime_queue.tail)) {                    // If not buffer full
 801801c:	6852      	ldr	r2, [r2, #4]
 801801e:	429a      	cmp	r2, r3
 8018020:	bf14      	ite	ne
 8018022:	2401      	movne	r4, #1
 8018024:	2400      	moveq	r4, #0
 8018026:	d011      	beq.n	801804c <protocol_enqueue_foreground_task+0x3c>
        realtime_queue.task[realtime_queue.head].data = data;
 8018028:	4a09      	ldr	r2, [pc, #36]	@ (8018050 <protocol_enqueue_foreground_task+0x40>)
 801802a:	6815      	ldr	r5, [r2, #0]
 801802c:	f105 0c01 	add.w	ip, r5, #1
 8018030:	f842 103c 	str.w	r1, [r2, ip, lsl #3]
        realtime_queue.task[realtime_queue.head].task = fn;       // add function pointer to buffer,
 8018034:	6811      	ldr	r1, [r2, #0]
 8018036:	3101      	adds	r1, #1
 8018038:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801803c:	6048      	str	r0, [r1, #4]
        realtime_queue.head = bptr;                             // update pointer and
 801803e:	6013      	str	r3, [r2, #0]
        system_set_exec_state_flag(EXEC_RT_COMMAND);            // flag it for execute
 8018040:	4b04      	ldr	r3, [pc, #16]	@ (8018054 <protocol_enqueue_foreground_task+0x44>)
 8018042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018044:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8018048:	4803      	ldr	r0, [pc, #12]	@ (8018058 <protocol_enqueue_foreground_task+0x48>)
 801804a:	4798      	blx	r3
}
 801804c:	4620      	mov	r0, r4
 801804e:	bd38      	pop	{r3, r4, r5, pc}
 8018050:	20001ed8 	.word	0x20001ed8
 8018054:	200018dc 	.word	0x200018dc
 8018058:	20001c04 	.word	0x20001c04

0801805c <protocol_enqueue_realtime_command>:
{
 801805c:	b538      	push	{r3, r4, r5, lr}
 801805e:	4604      	mov	r4, r0
    switch ((unsigned char)c) {
 8018060:	1ec3      	subs	r3, r0, #3
 8018062:	2ba1      	cmp	r3, #161	@ 0xa1
 8018064:	f200 81b0 	bhi.w	80183c8 <protocol_enqueue_realtime_command+0x36c>
 8018068:	e8df f013 	tbh	[pc, r3, lsl #1]
 801806c:	01ae00cc 	.word	0x01ae00cc
 8018070:	01ae00ef 	.word	0x01ae00ef
 8018074:	01ae01ae 	.word	0x01ae01ae
 8018078:	01c401ae 	.word	0x01c401ae
 801807c:	01ae01ae 	.word	0x01ae01ae
 8018080:	01ae01c4 	.word	0x01ae01c4
 8018084:	01ae01ae 	.word	0x01ae01ae
 8018088:	01ae01ae 	.word	0x01ae01ae
 801808c:	01a301ae 	.word	0x01a301ae
 8018090:	01ae01ae 	.word	0x01ae01ae
 8018094:	00c001ae 	.word	0x00c001ae
 8018098:	01ae00b3 	.word	0x01ae00b3
 801809c:	01ae01ae 	.word	0x01ae01ae
 80180a0:	01ae01ae 	.word	0x01ae01ae
 80180a4:	01ae01ae 	.word	0x01ae01ae
 80180a8:	01ae01ae 	.word	0x01ae01ae
 80180ac:	00a201ae 	.word	0x00a201ae
 80180b0:	01ae01ae 	.word	0x01ae01ae
 80180b4:	01ae01ae 	.word	0x01ae01ae
 80180b8:	01ae01ae 	.word	0x01ae01ae
 80180bc:	01ae01ae 	.word	0x01ae01ae
 80180c0:	01ae01ae 	.word	0x01ae01ae
 80180c4:	01ae01ae 	.word	0x01ae01ae
 80180c8:	01ae01ae 	.word	0x01ae01ae
 80180cc:	01ae01ae 	.word	0x01ae01ae
 80180d0:	01ae01ae 	.word	0x01ae01ae
 80180d4:	01ae01ae 	.word	0x01ae01ae
 80180d8:	01ae01ae 	.word	0x01ae01ae
 80180dc:	01ae01ae 	.word	0x01ae01ae
 80180e0:	01ae01ae 	.word	0x01ae01ae
 80180e4:	01ae01ae 	.word	0x01ae01ae
 80180e8:	01ae01ae 	.word	0x01ae01ae
 80180ec:	01ae01ae 	.word	0x01ae01ae
 80180f0:	01ae01ae 	.word	0x01ae01ae
 80180f4:	01ae01ae 	.word	0x01ae01ae
 80180f8:	01ae01ae 	.word	0x01ae01ae
 80180fc:	01ae01ae 	.word	0x01ae01ae
 8018100:	01ae01ae 	.word	0x01ae01ae
 8018104:	01ae01ae 	.word	0x01ae01ae
 8018108:	01ae01ae 	.word	0x01ae01ae
 801810c:	01ae01ae 	.word	0x01ae01ae
 8018110:	01ae01ae 	.word	0x01ae01ae
 8018114:	01ae01ae 	.word	0x01ae01ae
 8018118:	01ae01ae 	.word	0x01ae01ae
 801811c:	01ae01ae 	.word	0x01ae01ae
 8018120:	01ae01ae 	.word	0x01ae01ae
 8018124:	01ae01ae 	.word	0x01ae01ae
 8018128:	01ae01ae 	.word	0x01ae01ae
 801812c:	01ae01ae 	.word	0x01ae01ae
 8018130:	01ae01ae 	.word	0x01ae01ae
 8018134:	01ae01ae 	.word	0x01ae01ae
 8018138:	01ae01ae 	.word	0x01ae01ae
 801813c:	01ae01ae 	.word	0x01ae01ae
 8018140:	01ae01ae 	.word	0x01ae01ae
 8018144:	01ae01ae 	.word	0x01ae01ae
 8018148:	01ae01ae 	.word	0x01ae01ae
 801814c:	01ae01ae 	.word	0x01ae01ae
 8018150:	01ae01ae 	.word	0x01ae01ae
 8018154:	01ae01ae 	.word	0x01ae01ae
 8018158:	01ae01ae 	.word	0x01ae01ae
 801815c:	01ae01ae 	.word	0x01ae01ae
 8018160:	01ae01ae 	.word	0x01ae01ae
 8018164:	00ef01ae 	.word	0x00ef01ae
 8018168:	010700fc 	.word	0x010700fc
 801816c:	010e012c 	.word	0x010e012c
 8018170:	01ae011a 	.word	0x01ae011a
 8018174:	013d00d5 	.word	0x013d00d5
 8018178:	019f014e 	.word	0x019f014e
 801817c:	01870166 	.word	0x01870166
 8018180:	01ae01ae 	.word	0x01ae01ae
 8018184:	019701ae 	.word	0x019701ae
 8018188:	01970197 	.word	0x01970197
 801818c:	01970197 	.word	0x01970197
 8018190:	01970197 	.word	0x01970197
 8018194:	01ae0197 	.word	0x01ae0197
 8018198:	019b019b 	.word	0x019b019b
 801819c:	019b019b 	.word	0x019b019b
 80181a0:	019b019b 	.word	0x019b019b
 80181a4:	019f01ae 	.word	0x019f01ae
 80181a8:	015e019f 	.word	0x015e019f
 80181ac:	013401ae 	.word	0x013401ae
            if(char_counter == 0)
 80181b0:	4ba3      	ldr	r3, [pc, #652]	@ (8018440 <protocol_enqueue_realtime_command+0x3e4>)
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	f040 811f 	bne.w	80183f8 <protocol_enqueue_realtime_command+0x39c>
                keep_rt_commands = !settings.flags.legacy_rt_commands;
 80181ba:	4ba2      	ldr	r3, [pc, #648]	@ (8018444 <protocol_enqueue_realtime_command+0x3e8>)
 80181bc:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 80181c0:	099b      	lsrs	r3, r3, #6
 80181c2:	f083 0301 	eor.w	r3, r3, #1
 80181c6:	f003 0301 	and.w	r3, r3, #1
 80181ca:	4a9f      	ldr	r2, [pc, #636]	@ (8018448 <protocol_enqueue_realtime_command+0x3ec>)
 80181cc:	7013      	strb	r3, [r2, #0]
    bool drop = false;
 80181ce:	2500      	movs	r5, #0
 80181d0:	e0bc      	b.n	801834c <protocol_enqueue_realtime_command+0x2f0>
            system_set_exec_state_flag(EXEC_STOP);
 80181d2:	4d9e      	ldr	r5, [pc, #632]	@ (801844c <protocol_enqueue_realtime_command+0x3f0>)
 80181d4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80181d6:	2110      	movs	r1, #16
 80181d8:	489d      	ldr	r0, [pc, #628]	@ (8018450 <protocol_enqueue_realtime_command+0x3f4>)
 80181da:	4798      	blx	r3
            char_counter = 0;
 80181dc:	4b98      	ldr	r3, [pc, #608]	@ (8018440 <protocol_enqueue_realtime_command+0x3e4>)
 80181de:	2200      	movs	r2, #0
 80181e0:	601a      	str	r2, [r3, #0]
            hal.stream.cancel_read_buffer();
 80181e2:	f8d5 30cc 	ldr.w	r3, [r5, #204]	@ 0xcc
 80181e6:	4798      	blx	r3
            drop = true;
 80181e8:	2501      	movs	r5, #1
 80181ea:	e120      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
            if(!hal.control.get_state().e_stop)
 80181ec:	4b97      	ldr	r3, [pc, #604]	@ (801844c <protocol_enqueue_realtime_command+0x3f0>)
 80181ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80181f0:	4798      	blx	r3
 80181f2:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80181f6:	d001      	beq.n	80181fc <protocol_enqueue_realtime_command+0x1a0>
            drop = true;
 80181f8:	2501      	movs	r5, #1
 80181fa:	e118      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
                mc_reset();
 80181fc:	f7fc fe50 	bl	8014ea0 <mc_reset>
            drop = true;
 8018200:	2501      	movs	r5, #1
 8018202:	e114      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
            mc_reset();
 8018204:	f7fc fe4c 	bl	8014ea0 <mc_reset>
            sys.flags.exit = On;
 8018208:	4a92      	ldr	r2, [pc, #584]	@ (8018454 <protocol_enqueue_realtime_command+0x3f8>)
 801820a:	7d93      	ldrb	r3, [r2, #22]
 801820c:	f043 0308 	orr.w	r3, r3, #8
 8018210:	7593      	strb	r3, [r2, #22]
            drop = true;
 8018212:	2501      	movs	r5, #1
 8018214:	e10b      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
                report.value = (uint32_t)Report_All;
 8018216:	4890      	ldr	r0, [pc, #576]	@ (8018458 <protocol_enqueue_realtime_command+0x3fc>)
                report.tool_offset = sys.report.tool_offset;
 8018218:	4d8e      	ldr	r5, [pc, #568]	@ (8018454 <protocol_enqueue_realtime_command+0x3f8>)
 801821a:	f895 3031 	ldrb.w	r3, [r5, #49]	@ 0x31
 801821e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018222:	f363 208a 	bfi	r0, r3, #10, #1
                report.m66result = sys.var5399 > -2;
 8018226:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8018228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801822c:	bfb4      	ite	lt
 801822e:	2300      	movlt	r3, #0
 8018230:	2301      	movge	r3, #1
 8018232:	f363 20cb 	bfi	r0, r3, #11, #1
                system_add_rt_report((report_tracking_t)report.value);
 8018236:	f009 ff43 	bl	80220c0 <system_add_rt_report>
            system_set_exec_state_flag(EXEC_STATUS_REPORT);
 801823a:	4b84      	ldr	r3, [pc, #528]	@ (801844c <protocol_enqueue_realtime_command+0x3f0>)
 801823c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801823e:	2101      	movs	r1, #1
 8018240:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8018244:	4798      	blx	r3
            drop = true;
 8018246:	2501      	movs	r5, #1
 8018248:	e0f1      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
            if(!sys.flags.auto_reporting)
 801824a:	4b82      	ldr	r3, [pc, #520]	@ (8018454 <protocol_enqueue_realtime_command+0x3f8>)
 801824c:	7ddb      	ldrb	r3, [r3, #23]
 801824e:	f013 0f02 	tst.w	r3, #2
 8018252:	f040 8133 	bne.w	80184bc <protocol_enqueue_realtime_command+0x460>
                system_set_exec_state_flag(EXEC_STATUS_REPORT);
 8018256:	4b7d      	ldr	r3, [pc, #500]	@ (801844c <protocol_enqueue_realtime_command+0x3f0>)
 8018258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801825a:	2101      	movs	r1, #1
 801825c:	487c      	ldr	r0, [pc, #496]	@ (8018450 <protocol_enqueue_realtime_command+0x3f4>)
 801825e:	4798      	blx	r3
            drop = true;
 8018260:	2501      	movs	r5, #1
 8018262:	e0e4      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
            system_set_exec_state_flag(EXEC_CYCLE_START);
 8018264:	4b79      	ldr	r3, [pc, #484]	@ (801844c <protocol_enqueue_realtime_command+0x3f0>)
 8018266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018268:	2102      	movs	r1, #2
 801826a:	4879      	ldr	r0, [pc, #484]	@ (8018450 <protocol_enqueue_realtime_command+0x3f4>)
 801826c:	4798      	blx	r3
            gc_state.tool_change = false;
 801826e:	4b7b      	ldr	r3, [pc, #492]	@ (801845c <protocol_enqueue_realtime_command+0x400>)
 8018270:	2200      	movs	r2, #0
 8018272:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
            drop = true;
 8018276:	2501      	movs	r5, #1
 8018278:	e0d9      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
            system_set_exec_state_flag(EXEC_FEED_HOLD);
 801827a:	4b74      	ldr	r3, [pc, #464]	@ (801844c <protocol_enqueue_realtime_command+0x3f0>)
 801827c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801827e:	2108      	movs	r1, #8
 8018280:	4873      	ldr	r0, [pc, #460]	@ (8018450 <protocol_enqueue_realtime_command+0x3f4>)
 8018282:	4798      	blx	r3
            drop = true;
 8018284:	2501      	movs	r5, #1
 8018286:	e0d2      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
            if(state_get() != STATE_SAFETY_DOOR) {
 8018288:	f006 ff3e 	bl	801f108 <state_get>
 801828c:	2840      	cmp	r0, #64	@ 0x40
 801828e:	f000 80b5 	beq.w	80183fc <protocol_enqueue_realtime_command+0x3a0>
                system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 8018292:	4b6e      	ldr	r3, [pc, #440]	@ (801844c <protocol_enqueue_realtime_command+0x3f0>)
 8018294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018296:	2140      	movs	r1, #64	@ 0x40
 8018298:	486d      	ldr	r0, [pc, #436]	@ (8018450 <protocol_enqueue_realtime_command+0x3f4>)
 801829a:	4798      	blx	r3
                drop = true;
 801829c:	2501      	movs	r5, #1
 801829e:	e0c6      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
            char_counter = 0;
 80182a0:	4b67      	ldr	r3, [pc, #412]	@ (8018440 <protocol_enqueue_realtime_command+0x3e4>)
 80182a2:	2200      	movs	r2, #0
 80182a4:	601a      	str	r2, [r3, #0]
            hal.stream.cancel_read_buffer();
 80182a6:	4b69      	ldr	r3, [pc, #420]	@ (801844c <protocol_enqueue_realtime_command+0x3f0>)
 80182a8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80182ac:	4798      	blx	r3
            if(grbl.on_jog_cancel)
 80182ae:	4b6c      	ldr	r3, [pc, #432]	@ (8018460 <protocol_enqueue_realtime_command+0x404>)
 80182b0:	f8d3 50c0 	ldr.w	r5, [r3, #192]	@ 0xc0
 80182b4:	2d00      	cmp	r5, #0
 80182b6:	f000 8103 	beq.w	80184c0 <protocol_enqueue_realtime_command+0x464>
                grbl.on_jog_cancel(state_get());
 80182ba:	f006 ff25 	bl	801f108 <state_get>
 80182be:	47a8      	blx	r5
            drop = true;
 80182c0:	2501      	movs	r5, #1
 80182c2:	e0b4      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
            system_set_exec_state_flag(EXEC_GCODE_REPORT);
 80182c4:	4b61      	ldr	r3, [pc, #388]	@ (801844c <protocol_enqueue_realtime_command+0x3f0>)
 80182c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80182c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80182cc:	4860      	ldr	r0, [pc, #384]	@ (8018450 <protocol_enqueue_realtime_command+0x3f4>)
 80182ce:	4798      	blx	r3
            drop = true;
 80182d0:	2501      	movs	r5, #1
 80182d2:	e0ac      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
            if(hal.probe.connected_toggle)
 80182d4:	4b5d      	ldr	r3, [pc, #372]	@ (801844c <protocol_enqueue_realtime_command+0x3f0>)
 80182d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80182da:	2b00      	cmp	r3, #0
 80182dc:	f000 8090 	beq.w	8018400 <protocol_enqueue_realtime_command+0x3a4>
                hal.probe.connected_toggle();
 80182e0:	4798      	blx	r3
    bool drop = false;
 80182e2:	2500      	movs	r5, #0
 80182e4:	e032      	b.n	801834c <protocol_enqueue_realtime_command+0x2f0>
            if(!hal.signals_cap.stop_disable) // Not available as realtime command if HAL supports physical switch
 80182e6:	4b59      	ldr	r3, [pc, #356]	@ (801844c <protocol_enqueue_realtime_command+0x3f0>)
 80182e8:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 80182ec:	f013 0f20 	tst.w	r3, #32
 80182f0:	f040 8088 	bne.w	8018404 <protocol_enqueue_realtime_command+0x3a8>
                sys.flags.optional_stop_disable = !sys.flags.optional_stop_disable;
 80182f4:	4957      	ldr	r1, [pc, #348]	@ (8018454 <protocol_enqueue_realtime_command+0x3f8>)
 80182f6:	7d8b      	ldrb	r3, [r1, #22]
 80182f8:	099a      	lsrs	r2, r3, #6
 80182fa:	f082 0201 	eor.w	r2, r2, #1
 80182fe:	f362 1386 	bfi	r3, r2, #6, #1
 8018302:	758b      	strb	r3, [r1, #22]
    bool drop = false;
 8018304:	2500      	movs	r5, #0
 8018306:	e021      	b.n	801834c <protocol_enqueue_realtime_command+0x2f0>
            if(!hal.signals_cap.single_block) // Not available as realtime command if HAL supports physical switch
 8018308:	4b50      	ldr	r3, [pc, #320]	@ (801844c <protocol_enqueue_realtime_command+0x3f0>)
 801830a:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
 801830e:	f013 0f08 	tst.w	r3, #8
 8018312:	d179      	bne.n	8018408 <protocol_enqueue_realtime_command+0x3ac>
                sys.flags.single_block = !sys.flags.single_block;
 8018314:	494f      	ldr	r1, [pc, #316]	@ (8018454 <protocol_enqueue_realtime_command+0x3f8>)
 8018316:	7d8b      	ldrb	r3, [r1, #22]
 8018318:	43da      	mvns	r2, r3
 801831a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801831e:	f362 13c7 	bfi	r3, r2, #7, #1
 8018322:	758b      	strb	r3, [r1, #22]
    bool drop = false;
 8018324:	2500      	movs	r5, #0
 8018326:	e011      	b.n	801834c <protocol_enqueue_realtime_command+0x2f0>
            system_set_exec_state_flag(EXEC_PID_REPORT);
 8018328:	4b48      	ldr	r3, [pc, #288]	@ (801844c <protocol_enqueue_realtime_command+0x3f0>)
 801832a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801832c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8018330:	4847      	ldr	r0, [pc, #284]	@ (8018450 <protocol_enqueue_realtime_command+0x3f4>)
 8018332:	4798      	blx	r3
            drop = true;
 8018334:	2501      	movs	r5, #1
 8018336:	e07a      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
            if((drop = hal.stream.type == StreamType_MPG))
 8018338:	4b44      	ldr	r3, [pc, #272]	@ (801844c <protocol_enqueue_realtime_command+0x3f0>)
 801833a:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 801833e:	2b01      	cmp	r3, #1
 8018340:	bf0c      	ite	eq
 8018342:	2501      	moveq	r5, #1
 8018344:	2500      	movne	r5, #0
 8018346:	d013      	beq.n	8018370 <protocol_enqueue_realtime_command+0x314>
    if(!drop) switch ((unsigned char)c) {
 8018348:	2d00      	cmp	r5, #0
 801834a:	d170      	bne.n	801842e <protocol_enqueue_realtime_command+0x3d2>
 801834c:	2c3f      	cmp	r4, #63	@ 0x3f
 801834e:	d05f      	beq.n	8018410 <protocol_enqueue_realtime_command+0x3b4>
 8018350:	2c7e      	cmp	r4, #126	@ 0x7e
 8018352:	f000 808b 	beq.w	801846c <protocol_enqueue_realtime_command+0x410>
 8018356:	2c21      	cmp	r4, #33	@ 0x21
 8018358:	f000 809c 	beq.w	8018494 <protocol_enqueue_realtime_command+0x438>
            drop = !(keep_rt_commands || (unsigned char)c < 0x7F);
 801835c:	4b3a      	ldr	r3, [pc, #232]	@ (8018448 <protocol_enqueue_realtime_command+0x3ec>)
 801835e:	781b      	ldrb	r3, [r3, #0]
 8018360:	2b00      	cmp	r3, #0
 8018362:	f040 80a7 	bne.w	80184b4 <protocol_enqueue_realtime_command+0x458>
 8018366:	2c7e      	cmp	r4, #126	@ 0x7e
 8018368:	f200 80a6 	bhi.w	80184b8 <protocol_enqueue_realtime_command+0x45c>
 801836c:	2500      	movs	r5, #0
 801836e:	e05e      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
                protocol_enqueue_foreground_task(stream_mpg_set_mode, NULL);
 8018370:	2100      	movs	r1, #0
 8018372:	483c      	ldr	r0, [pc, #240]	@ (8018464 <protocol_enqueue_realtime_command+0x408>)
 8018374:	f7ff fe4c 	bl	8018010 <protocol_enqueue_foreground_task>
 8018378:	e7e6      	b.n	8018348 <protocol_enqueue_realtime_command+0x2ec>
            if((drop = settings.report_interval != 0))
 801837a:	4b32      	ldr	r3, [pc, #200]	@ (8018444 <protocol_enqueue_realtime_command+0x3e8>)
 801837c:	8a9b      	ldrh	r3, [r3, #20]
 801837e:	2b00      	cmp	r3, #0
 8018380:	bf14      	ite	ne
 8018382:	2501      	movne	r5, #1
 8018384:	2500      	moveq	r5, #0
 8018386:	d0df      	beq.n	8018348 <protocol_enqueue_realtime_command+0x2ec>
                sys.flags.auto_reporting = !sys.flags.auto_reporting;
 8018388:	4932      	ldr	r1, [pc, #200]	@ (8018454 <protocol_enqueue_realtime_command+0x3f8>)
 801838a:	7dcb      	ldrb	r3, [r1, #23]
 801838c:	085a      	lsrs	r2, r3, #1
 801838e:	f082 0201 	eor.w	r2, r2, #1
 8018392:	f362 0341 	bfi	r3, r2, #1, #1
 8018396:	75cb      	strb	r3, [r1, #23]
 8018398:	e7d6      	b.n	8018348 <protocol_enqueue_realtime_command+0x2ec>
            enqueue_feed_override(c);
 801839a:	f7fe f949 	bl	8016630 <enqueue_feed_override>
            drop = true;
 801839e:	2501      	movs	r5, #1
 80183a0:	e045      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
            enqueue_spindle_override((uint8_t)c);
 80183a2:	f7fe f967 	bl	8016674 <enqueue_spindle_override>
            drop = true;
 80183a6:	2501      	movs	r5, #1
 80183a8:	e041      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
            enqueue_coolant_override((uint8_t)c);
 80183aa:	f7fe f985 	bl	80166b8 <enqueue_coolant_override>
            drop = true;
 80183ae:	2501      	movs	r5, #1
 80183b0:	e03d      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
            if(esc && hal.reboot)
 80183b2:	4b2d      	ldr	r3, [pc, #180]	@ (8018468 <protocol_enqueue_realtime_command+0x40c>)
 80183b4:	781d      	ldrb	r5, [r3, #0]
 80183b6:	2d00      	cmp	r5, #0
 80183b8:	d0c8      	beq.n	801834c <protocol_enqueue_realtime_command+0x2f0>
 80183ba:	4b24      	ldr	r3, [pc, #144]	@ (801844c <protocol_enqueue_realtime_command+0x3f0>)
 80183bc:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 80183c0:	b323      	cbz	r3, 801840c <protocol_enqueue_realtime_command+0x3b0>
                hal.reboot(); // Force MCU reboot. This call should never return.
 80183c2:	4798      	blx	r3
    bool drop = false;
 80183c4:	2500      	movs	r5, #0
 80183c6:	e7c1      	b.n	801834c <protocol_enqueue_realtime_command+0x2f0>
            if((c < ' ' && c != ASCII_BS) || (c > ASCII_DEL && c <= 0xBF))
 80183c8:	281f      	cmp	r0, #31
 80183ca:	d80d      	bhi.n	80183e8 <protocol_enqueue_realtime_command+0x38c>
 80183cc:	2808      	cmp	r0, #8
 80183ce:	d009      	beq.n	80183e4 <protocol_enqueue_realtime_command+0x388>
                drop = grbl.on_unknown_realtime_cmd == NULL || grbl.on_unknown_realtime_cmd(c);
 80183d0:	4b23      	ldr	r3, [pc, #140]	@ (8018460 <protocol_enqueue_realtime_command+0x404>)
 80183d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d074      	beq.n	80184c4 <protocol_enqueue_realtime_command+0x468>
 80183da:	4620      	mov	r0, r4
 80183dc:	4798      	blx	r3
 80183de:	4605      	mov	r5, r0
 80183e0:	bb28      	cbnz	r0, 801842e <protocol_enqueue_realtime_command+0x3d2>
 80183e2:	e7b3      	b.n	801834c <protocol_enqueue_realtime_command+0x2f0>
    bool drop = false;
 80183e4:	2500      	movs	r5, #0
 80183e6:	e7af      	b.n	8018348 <protocol_enqueue_realtime_command+0x2ec>
            if((c < ' ' && c != ASCII_BS) || (c > ASCII_DEL && c <= 0xBF))
 80183e8:	f080 0380 	eor.w	r3, r0, #128	@ 0x80
 80183ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80183ee:	d9ef      	bls.n	80183d0 <protocol_enqueue_realtime_command+0x374>
    bool drop = false;
 80183f0:	2500      	movs	r5, #0
 80183f2:	e7ab      	b.n	801834c <protocol_enqueue_realtime_command+0x2f0>
    switch ((unsigned char)c) {
 80183f4:	2500      	movs	r5, #0
 80183f6:	e7a9      	b.n	801834c <protocol_enqueue_realtime_command+0x2f0>
    bool drop = false;
 80183f8:	2500      	movs	r5, #0
 80183fa:	e7a7      	b.n	801834c <protocol_enqueue_realtime_command+0x2f0>
 80183fc:	2500      	movs	r5, #0
 80183fe:	e7a5      	b.n	801834c <protocol_enqueue_realtime_command+0x2f0>
 8018400:	2500      	movs	r5, #0
 8018402:	e7a3      	b.n	801834c <protocol_enqueue_realtime_command+0x2f0>
 8018404:	2500      	movs	r5, #0
 8018406:	e7a1      	b.n	801834c <protocol_enqueue_realtime_command+0x2f0>
 8018408:	2500      	movs	r5, #0
 801840a:	e79f      	b.n	801834c <protocol_enqueue_realtime_command+0x2f0>
 801840c:	2500      	movs	r5, #0
 801840e:	e79d      	b.n	801834c <protocol_enqueue_realtime_command+0x2f0>
            if(!keep_rt_commands || settings.flags.legacy_rt_commands) {
 8018410:	4b0d      	ldr	r3, [pc, #52]	@ (8018448 <protocol_enqueue_realtime_command+0x3ec>)
 8018412:	781b      	ldrb	r3, [r3, #0]
 8018414:	b12b      	cbz	r3, 8018422 <protocol_enqueue_realtime_command+0x3c6>
 8018416:	4b0b      	ldr	r3, [pc, #44]	@ (8018444 <protocol_enqueue_realtime_command+0x3e8>)
 8018418:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 801841c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8018420:	d005      	beq.n	801842e <protocol_enqueue_realtime_command+0x3d2>
                system_set_exec_state_flag(EXEC_STATUS_REPORT);
 8018422:	4b0a      	ldr	r3, [pc, #40]	@ (801844c <protocol_enqueue_realtime_command+0x3f0>)
 8018424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018426:	2101      	movs	r1, #1
 8018428:	4809      	ldr	r0, [pc, #36]	@ (8018450 <protocol_enqueue_realtime_command+0x3f4>)
 801842a:	4798      	blx	r3
                drop = true;
 801842c:	2501      	movs	r5, #1
    esc = c == ASCII_ESC;
 801842e:	2c1b      	cmp	r4, #27
 8018430:	bf14      	ite	ne
 8018432:	2400      	movne	r4, #0
 8018434:	2401      	moveq	r4, #1
 8018436:	4b0c      	ldr	r3, [pc, #48]	@ (8018468 <protocol_enqueue_realtime_command+0x40c>)
 8018438:	701c      	strb	r4, [r3, #0]
}
 801843a:	4628      	mov	r0, r5
 801843c:	bd38      	pop	{r3, r4, r5, pc}
 801843e:	bf00      	nop
 8018440:	2000216c 	.word	0x2000216c
 8018444:	200022f4 	.word	0x200022f4
 8018448:	20001f60 	.word	0x20001f60
 801844c:	200018dc 	.word	0x200018dc
 8018450:	20001c04 	.word	0x20001c04
 8018454:	20001bbc 	.word	0x20001bbc
 8018458:	8003ffff 	.word	0x8003ffff
 801845c:	20001614 	.word	0x20001614
 8018460:	20001ac4 	.word	0x20001ac4
 8018464:	080211bd 	.word	0x080211bd
 8018468:	20001ed0 	.word	0x20001ed0
            if(!keep_rt_commands || settings.flags.legacy_rt_commands) {
 801846c:	4b16      	ldr	r3, [pc, #88]	@ (80184c8 <protocol_enqueue_realtime_command+0x46c>)
 801846e:	781b      	ldrb	r3, [r3, #0]
 8018470:	b12b      	cbz	r3, 801847e <protocol_enqueue_realtime_command+0x422>
 8018472:	4b16      	ldr	r3, [pc, #88]	@ (80184cc <protocol_enqueue_realtime_command+0x470>)
 8018474:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8018478:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801847c:	d0d7      	beq.n	801842e <protocol_enqueue_realtime_command+0x3d2>
                system_set_exec_state_flag(EXEC_CYCLE_START);
 801847e:	4b14      	ldr	r3, [pc, #80]	@ (80184d0 <protocol_enqueue_realtime_command+0x474>)
 8018480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018482:	2102      	movs	r1, #2
 8018484:	4813      	ldr	r0, [pc, #76]	@ (80184d4 <protocol_enqueue_realtime_command+0x478>)
 8018486:	4798      	blx	r3
                gc_state.tool_change = false;
 8018488:	4b13      	ldr	r3, [pc, #76]	@ (80184d8 <protocol_enqueue_realtime_command+0x47c>)
 801848a:	2200      	movs	r2, #0
 801848c:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
                drop = true;
 8018490:	2501      	movs	r5, #1
 8018492:	e7cc      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
            if(!keep_rt_commands || settings.flags.legacy_rt_commands) {
 8018494:	4b0c      	ldr	r3, [pc, #48]	@ (80184c8 <protocol_enqueue_realtime_command+0x46c>)
 8018496:	781b      	ldrb	r3, [r3, #0]
 8018498:	b12b      	cbz	r3, 80184a6 <protocol_enqueue_realtime_command+0x44a>
 801849a:	4b0c      	ldr	r3, [pc, #48]	@ (80184cc <protocol_enqueue_realtime_command+0x470>)
 801849c:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 80184a0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80184a4:	d0c3      	beq.n	801842e <protocol_enqueue_realtime_command+0x3d2>
                system_set_exec_state_flag(EXEC_FEED_HOLD);
 80184a6:	4b0a      	ldr	r3, [pc, #40]	@ (80184d0 <protocol_enqueue_realtime_command+0x474>)
 80184a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80184aa:	2108      	movs	r1, #8
 80184ac:	4809      	ldr	r0, [pc, #36]	@ (80184d4 <protocol_enqueue_realtime_command+0x478>)
 80184ae:	4798      	blx	r3
                drop = true;
 80184b0:	2501      	movs	r5, #1
 80184b2:	e7bc      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
            drop = !(keep_rt_commands || (unsigned char)c < 0x7F);
 80184b4:	2500      	movs	r5, #0
 80184b6:	e7ba      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
 80184b8:	2501      	movs	r5, #1
            break;
 80184ba:	e7b8      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
            drop = true;
 80184bc:	2501      	movs	r5, #1
 80184be:	e7b6      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
            drop = true;
 80184c0:	2501      	movs	r5, #1
 80184c2:	e7b4      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
                drop = grbl.on_unknown_realtime_cmd == NULL || grbl.on_unknown_realtime_cmd(c);
 80184c4:	2501      	movs	r5, #1
 80184c6:	e7b2      	b.n	801842e <protocol_enqueue_realtime_command+0x3d2>
 80184c8:	20001f60 	.word	0x20001f60
 80184cc:	200022f4 	.word	0x200022f4
 80184d0:	200018dc 	.word	0x200018dc
 80184d4:	20001c04 	.word	0x20001c04
 80184d8:	20001614 	.word	0x20001614

080184dc <matchstar>:
    return 0;
}

/* matchstar: search for c*regexp at beginning of text */
int matchstar(int c, char *regexp, char *text)
{
 80184dc:	b570      	push	{r4, r5, r6, lr}
 80184de:	4605      	mov	r5, r0
 80184e0:	460e      	mov	r6, r1
 80184e2:	4614      	mov	r4, r2
    do {    /* a * matches zero or more instances */
        if (matchhere(regexp, text))
 80184e4:	4621      	mov	r1, r4
 80184e6:	4630      	mov	r0, r6
 80184e8:	f000 f80d 	bl	8018506 <matchhere>
 80184ec:	4602      	mov	r2, r0
 80184ee:	b938      	cbnz	r0, 8018500 <matchstar+0x24>
            return 1;
    } while (*text != '\0' && (*text++ == c || c == '.'));
 80184f0:	7823      	ldrb	r3, [r4, #0]
 80184f2:	b133      	cbz	r3, 8018502 <matchstar+0x26>
 80184f4:	3401      	adds	r4, #1
 80184f6:	42ab      	cmp	r3, r5
 80184f8:	d0f4      	beq.n	80184e4 <matchstar+0x8>
 80184fa:	2d2e      	cmp	r5, #46	@ 0x2e
 80184fc:	d0f2      	beq.n	80184e4 <matchstar+0x8>
 80184fe:	e000      	b.n	8018502 <matchstar+0x26>
            return 1;
 8018500:	2201      	movs	r2, #1
    return 0;
}
 8018502:	4610      	mov	r0, r2
 8018504:	bd70      	pop	{r4, r5, r6, pc}

08018506 <matchhere>:
{
 8018506:	b508      	push	{r3, lr}
    if (regexp[0] == '\0')
 8018508:	7803      	ldrb	r3, [r0, #0]
 801850a:	b1f3      	cbz	r3, 801854a <matchhere+0x44>
    if (regexp[1] == '*')
 801850c:	7842      	ldrb	r2, [r0, #1]
 801850e:	2a2a      	cmp	r2, #42	@ 0x2a
 8018510:	d009      	beq.n	8018526 <matchhere+0x20>
    if (regexp[0] == '$' && regexp[1] == '\0')
 8018512:	2b24      	cmp	r3, #36	@ 0x24
 8018514:	d00d      	beq.n	8018532 <matchhere+0x2c>
    if (*text!='\0' && (regexp[0]=='.' || regexp[0]==*text))
 8018516:	780a      	ldrb	r2, [r1, #0]
 8018518:	b1ca      	cbz	r2, 801854e <matchhere+0x48>
 801851a:	2b2e      	cmp	r3, #46	@ 0x2e
 801851c:	d010      	beq.n	8018540 <matchhere+0x3a>
 801851e:	4293      	cmp	r3, r2
 8018520:	d00e      	beq.n	8018540 <matchhere+0x3a>
    return 0;
 8018522:	2000      	movs	r0, #0
 8018524:	e012      	b.n	801854c <matchhere+0x46>
        return matchstar(regexp[0], regexp+2, text);
 8018526:	460a      	mov	r2, r1
 8018528:	1c81      	adds	r1, r0, #2
 801852a:	4618      	mov	r0, r3
 801852c:	f7ff ffd6 	bl	80184dc <matchstar>
 8018530:	e00c      	b.n	801854c <matchhere+0x46>
    if (regexp[0] == '$' && regexp[1] == '\0')
 8018532:	2a00      	cmp	r2, #0
 8018534:	d1ef      	bne.n	8018516 <matchhere+0x10>
        return *text == '\0';
 8018536:	7808      	ldrb	r0, [r1, #0]
 8018538:	fab0 f080 	clz	r0, r0
 801853c:	0940      	lsrs	r0, r0, #5
 801853e:	e005      	b.n	801854c <matchhere+0x46>
        return matchhere(regexp+1, text+1);
 8018540:	3101      	adds	r1, #1
 8018542:	3001      	adds	r0, #1
 8018544:	f7ff ffdf 	bl	8018506 <matchhere>
 8018548:	e000      	b.n	801854c <matchhere+0x46>
        return 1;
 801854a:	2001      	movs	r0, #1
}
 801854c:	bd08      	pop	{r3, pc}
    return 0;
 801854e:	2000      	movs	r0, #0
 8018550:	e7fc      	b.n	801854c <matchhere+0x46>
	...

08018554 <axis_signals_tostring>:
// NOTE: returns pointer to null terminator!
inline static char *axis_signals_tostring (char *buf, axes_signals_t signals)
{
    uint_fast16_t idx = 0;

    signals.mask &= AXES_BITMASK;
 8018554:	f001 0107 	and.w	r1, r1, #7
    uint_fast16_t idx = 0;
 8018558:	2300      	movs	r3, #0

    while(signals.mask) {
 801855a:	e002      	b.n	8018562 <axis_signals_tostring+0xe>
        if(signals.mask & 0x01)
            *buf++ = *axis_letter[idx];
        idx++;
 801855c:	3301      	adds	r3, #1
        signals.mask >>= 1;
 801855e:	f3c1 0147 	ubfx	r1, r1, #1, #8
    while(signals.mask) {
 8018562:	b2c9      	uxtb	r1, r1
 8018564:	b149      	cbz	r1, 801857a <axis_signals_tostring+0x26>
        if(signals.mask & 0x01)
 8018566:	f011 0f01 	tst.w	r1, #1
 801856a:	d0f7      	beq.n	801855c <axis_signals_tostring+0x8>
            *buf++ = *axis_letter[idx];
 801856c:	4a04      	ldr	r2, [pc, #16]	@ (8018580 <axis_signals_tostring+0x2c>)
 801856e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8018572:	7812      	ldrb	r2, [r2, #0]
 8018574:	f800 2b01 	strb.w	r2, [r0], #1
 8018578:	e7f0      	b.n	801855c <axis_signals_tostring+0x8>
    };

    *buf = '\0';
 801857a:	2300      	movs	r3, #0
 801857c:	7003      	strb	r3, [r0, #0]

    return buf;
}
 801857e:	4770      	bx	lr
 8018580:	0802bf9c 	.word	0x0802bf9c

08018584 <control_signals_tostring>:
{
    static const char signals_map[] = "RHSDLTEOFM Q  P ";

    char *map = (char *)signals_map;

    if(!signals.deasserted)
 8018584:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8018588:	d12e      	bne.n	80185e8 <control_signals_tostring+0x64>
    char *map = (char *)signals_map;
 801858a:	4b1a      	ldr	r3, [pc, #104]	@ (80185f4 <control_signals_tostring+0x70>)
 801858c:	e01f      	b.n	80185ce <control_signals_tostring+0x4a>
                    if(hal.signals_cap.safety_door_ajar)
                        *buf++ = *map;
                    break;

                default:
                    *buf++ = *map;
 801858e:	f800 2b01 	strb.w	r2, [r0], #1
                    break;
            }
        }

        map++;
 8018592:	3301      	adds	r3, #1
        signals.mask >>= 1;
 8018594:	f3c1 014f 	ubfx	r1, r1, #1, #16
      while(signals.mask) {
 8018598:	b289      	uxth	r1, r1
 801859a:	b181      	cbz	r1, 80185be <control_signals_tostring+0x3a>
        if(signals.mask & 0x01) {
 801859c:	f011 0f01 	tst.w	r1, #1
 80185a0:	d0f7      	beq.n	8018592 <control_signals_tostring+0xe>
            switch(*map) {
 80185a2:	781a      	ldrb	r2, [r3, #0]
 80185a4:	2a20      	cmp	r2, #32
 80185a6:	d0f4      	beq.n	8018592 <control_signals_tostring+0xe>
 80185a8:	2a44      	cmp	r2, #68	@ 0x44
 80185aa:	d1f0      	bne.n	801858e <control_signals_tostring+0xa>
                    if(hal.signals_cap.safety_door_ajar)
 80185ac:	4c12      	ldr	r4, [pc, #72]	@ (80185f8 <control_signals_tostring+0x74>)
 80185ae:	f894 c1dc 	ldrb.w	ip, [r4, #476]	@ 0x1dc
 80185b2:	f01c 0f08 	tst.w	ip, #8
 80185b6:	d0ec      	beq.n	8018592 <control_signals_tostring+0xe>
                        *buf++ = *map;
 80185b8:	f800 2b01 	strb.w	r2, [r0], #1
 80185bc:	e7e9      	b.n	8018592 <control_signals_tostring+0xe>
    }

    *buf = '\0';
 80185be:	2300      	movs	r3, #0
 80185c0:	7003      	strb	r3, [r0, #0]

    return buf;
}
 80185c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80185c6:	4770      	bx	lr
        map++;
 80185c8:	3301      	adds	r3, #1
        signals.mask >>= 1;
 80185ca:	f3c1 014f 	ubfx	r1, r1, #1, #16
      while(signals.mask) {
 80185ce:	b289      	uxth	r1, r1
 80185d0:	b151      	cbz	r1, 80185e8 <control_signals_tostring+0x64>
        if(signals.mask & 0x01) {
 80185d2:	f011 0f01 	tst.w	r1, #1
 80185d6:	d0f7      	beq.n	80185c8 <control_signals_tostring+0x44>
            switch(*map) {
 80185d8:	781a      	ldrb	r2, [r3, #0]
 80185da:	2a20      	cmp	r2, #32
 80185dc:	d0f4      	beq.n	80185c8 <control_signals_tostring+0x44>
 80185de:	2a44      	cmp	r2, #68	@ 0x44
 80185e0:	d005      	beq.n	80185ee <control_signals_tostring+0x6a>
                    *buf++ = *map;
 80185e2:	f800 2b01 	strb.w	r2, [r0], #1
                    break;
 80185e6:	e7ef      	b.n	80185c8 <control_signals_tostring+0x44>
    *buf = '\0';
 80185e8:	2300      	movs	r3, #0
 80185ea:	7003      	strb	r3, [r0, #0]
}
 80185ec:	4770      	bx	lr
{
 80185ee:	b410      	push	{r4}
 80185f0:	e7dc      	b.n	80185ac <control_signals_tostring+0x28>
 80185f2:	bf00      	nop
 80185f4:	0802c930 	.word	0x0802c930
 80185f8:	200018dc 	.word	0x200018dc

080185fc <report_init_message>:
    return id;
}

// Welcome message
static void report_init_message (void)
{
 80185fc:	b508      	push	{r3, lr}
    override_counter = wco_counter = 0;
 80185fe:	2300      	movs	r3, #0
 8018600:	4a04      	ldr	r2, [pc, #16]	@ (8018614 <report_init_message+0x18>)
 8018602:	7013      	strb	r3, [r2, #0]
 8018604:	4a04      	ldr	r2, [pc, #16]	@ (8018618 <report_init_message+0x1c>)
 8018606:	7013      	strb	r3, [r2, #0]

#if COMPATIBILITY_LEVEL == 0
    hal.stream.write_all(ASCII_EOL "GrblHAL " GRBL_VERSION " ['$' or '$HELP' for help]" ASCII_EOL);
 8018608:	4b04      	ldr	r3, [pc, #16]	@ (801861c <report_init_message+0x20>)
 801860a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801860e:	4804      	ldr	r0, [pc, #16]	@ (8018620 <report_init_message+0x24>)
 8018610:	4798      	blx	r3
#else
    hal.stream.write_all(ASCII_EOL "Grbl " GRBL_VERSION " ['$' for help]" ASCII_EOL);
#endif
}
 8018612:	bd08      	pop	{r3, pc}
 8018614:	200021b5 	.word	0x200021b5
 8018618:	200021b6 	.word	0x200021b6
 801861c:	200018dc 	.word	0x200018dc
 8018620:	0802c07c 	.word	0x0802c07c

08018624 <report_help_message>:

// grblHAL help message
static void report_help_message (void)
{
 8018624:	b508      	push	{r3, lr}
    hal.stream.write("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H $B ~ ! ? ctrl-x]" ASCII_EOL);
 8018626:	4b03      	ldr	r3, [pc, #12]	@ (8018634 <report_help_message+0x10>)
 8018628:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801862c:	4802      	ldr	r0, [pc, #8]	@ (8018638 <report_help_message+0x14>)
 801862e:	4798      	blx	r3
}
 8018630:	bd08      	pop	{r3, pc}
 8018632:	bf00      	nop
 8018634:	200018dc 	.word	0x200018dc
 8018638:	0802c0a8 	.word	0x0802c0a8

0801863c <cmp_settings>:

// grblHAL settings print out.

static int cmp_settings (const void *a, const void *b)
{
  return (*(setting_detail_t **)(a))->id - (*(setting_detail_t **)(b))->id;
 801863c:	6803      	ldr	r3, [r0, #0]
 801863e:	8818      	ldrh	r0, [r3, #0]
 8018640:	680b      	ldr	r3, [r1, #0]
 8018642:	881b      	ldrh	r3, [r3, #0]
}
 8018644:	1ac0      	subs	r0, r0, r3
 8018646:	4770      	bx	lr

08018648 <write_quoted>:
        free(s);
    }
}

static void write_quoted (const char *s, const char *sep)
{
 8018648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801864a:	4606      	mov	r6, r0
 801864c:	460c      	mov	r4, r1
    hal.stream.write("\"");
 801864e:	4d0a      	ldr	r5, [pc, #40]	@ (8018678 <write_quoted+0x30>)
 8018650:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018654:	4f09      	ldr	r7, [pc, #36]	@ (801867c <write_quoted+0x34>)
 8018656:	4638      	mov	r0, r7
 8018658:	4798      	blx	r3
    hal.stream.write(s); // TODO: escape double quoutes
 801865a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801865e:	4630      	mov	r0, r6
 8018660:	4798      	blx	r3
    hal.stream.write("\"");
 8018662:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018666:	4638      	mov	r0, r7
 8018668:	4798      	blx	r3
    if(sep)
 801866a:	b11c      	cbz	r4, 8018674 <write_quoted+0x2c>
        hal.stream.write(sep);
 801866c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018670:	4620      	mov	r0, r4
 8018672:	4798      	blx	r3
}
 8018674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018676:	bf00      	nop
 8018678:	200018dc 	.word	0x200018dc
 801867c:	0802c0f8 	.word	0x0802c0f8

08018680 <cmp_alarms>:

#endif

static int cmp_alarms (const void *a, const void *b)
{
  return (*(alarm_detail_t **)(a))->id - (*(alarm_detail_t **)(b))->id;
 8018680:	6803      	ldr	r3, [r0, #0]
 8018682:	7818      	ldrb	r0, [r3, #0]
 8018684:	680b      	ldr	r3, [r1, #0]
 8018686:	781b      	ldrb	r3, [r3, #0]
}
 8018688:	1ac0      	subs	r0, r0, r3
 801868a:	4770      	bx	lr

0801868c <cmp_errors>:
    return Status_OK;
}

static int cmp_errors (const void *a, const void *b)
{
  return (*(status_detail_t **)(a))->id - (*(status_detail_t **)(b))->id;
 801868c:	6803      	ldr	r3, [r0, #0]
 801868e:	7818      	ldrb	r0, [r3, #0]
 8018690:	680b      	ldr	r3, [r1, #0]
 8018692:	781b      	ldrb	r3, [r3, #0]
}
 8018694:	1ac0      	subs	r0, r0, r3
 8018696:	4770      	bx	lr

08018698 <cmp_setting_group_id>:
    }
}

static int cmp_setting_group_id (const void *a, const void *b)
{
    return (*(setting_group_detail_t **)(a))->id - (*(setting_group_detail_t **)(b))->id;
 8018698:	6803      	ldr	r3, [r0, #0]
 801869a:	7858      	ldrb	r0, [r3, #1]
 801869c:	680b      	ldr	r3, [r1, #0]
 801869e:	785b      	ldrb	r3, [r3, #1]
}
 80186a0:	1ac0      	subs	r0, r0, r3
 80186a2:	4770      	bx	lr

080186a4 <group_is_dup>:
    return strcmp((*(setting_group_detail_t **)(a))->name, (*(setting_group_detail_t **)(b))->name);
}

static bool group_is_dup (setting_group_detail_t **groups, setting_group_t group)
{
    while(*groups) {
 80186a4:	e000      	b.n	80186a8 <group_is_dup+0x4>
        if((*groups)->id == group)
            return true;
        groups++;
 80186a6:	3004      	adds	r0, #4
    while(*groups) {
 80186a8:	6803      	ldr	r3, [r0, #0]
 80186aa:	b123      	cbz	r3, 80186b6 <group_is_dup+0x12>
        if((*groups)->id == group)
 80186ac:	785b      	ldrb	r3, [r3, #1]
 80186ae:	428b      	cmp	r3, r1
 80186b0:	d1f9      	bne.n	80186a6 <group_is_dup+0x2>
            return true;
 80186b2:	2001      	movs	r0, #1
    }

    return false;
}
 80186b4:	4770      	bx	lr
    return false;
 80186b6:	2000      	movs	r0, #0
 80186b8:	4770      	bx	lr

080186ba <add_limits>:

    return Status_OK;
}

static char *add_limits (char *buf, limit_signals_t limits)
{
 80186ba:	b510      	push	{r4, lr}
 80186bc:	b082      	sub	sp, #8
 80186be:	9101      	str	r1, [sp, #4]
    buf = axis_signals_tostring(buf, limits.min);
 80186c0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80186c4:	f7ff ff46 	bl	8018554 <axis_signals_tostring>
    *buf++ = ',';
 80186c8:	242c      	movs	r4, #44	@ 0x2c
 80186ca:	f800 4b01 	strb.w	r4, [r0], #1
    buf = axis_signals_tostring(buf, limits.max);
 80186ce:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80186d2:	f7ff ff3f 	bl	8018554 <axis_signals_tostring>
    *buf++ = ',';
 80186d6:	f800 4b01 	strb.w	r4, [r0], #1
    buf = axis_signals_tostring(buf, limits.min2);
 80186da:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80186de:	f7ff ff39 	bl	8018554 <axis_signals_tostring>
    *buf++ = ',';
 80186e2:	f800 4b01 	strb.w	r4, [r0], #1
    buf = axis_signals_tostring(buf, limits.max2);
 80186e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80186ea:	f7ff ff33 	bl	8018554 <axis_signals_tostring>

    return buf;
}
 80186ee:	b002      	add	sp, #8
 80186f0:	bd10      	pop	{r4, pc}

080186f2 <count_pins>:
    return info;
}

static void count_pins (xbar_t *pin, void *data)
{
    ((pin_data_t *)data)->n_pins++;
 80186f2:	684b      	ldr	r3, [r1, #4]
 80186f4:	3301      	adds	r3, #1
 80186f6:	604b      	str	r3, [r1, #4]
}
 80186f8:	4770      	bx	lr

080186fa <cmp_pins>:
    get_pin_info(pin, &((pin_data_t *)data)->pins[((pin_data_t *)data)->idx++]);
}

static int cmp_pins (const void *a, const void *b)
{
    return ((pin_info_t *)a)->sortkey - ((pin_info_t *)b)->sortkey;
 80186fa:	6940      	ldr	r0, [r0, #20]
 80186fc:	694b      	ldr	r3, [r1, #20]
}
 80186fe:	1ac0      	subs	r0, r0, r3
 8018700:	4770      	bx	lr
	...

08018704 <irq_mode>:

#ifndef NO_SETTINGS_DESCRIPTIONS

static char *irq_mode (pin_irq_mode_t mode)
{
    switch(mode) {
 8018704:	3801      	subs	r0, #1
 8018706:	281e      	cmp	r0, #30
 8018708:	d81f      	bhi.n	801874a <irq_mode+0x46>
 801870a:	e8df f000 	tbb	[pc, r0]
 801870e:	2010      	.short	0x2010
 8018710:	1e1e1412 	.word	0x1e1e1412
 8018714:	1e1e1816 	.word	0x1e1e1816
 8018718:	1e1e1e1e 	.word	0x1e1e1e1e
 801871c:	1e1e1a1e 	.word	0x1e1e1a1e
 8018720:	1e1e1e1e 	.word	0x1e1e1e1e
 8018724:	1e1e1e1e 	.word	0x1e1e1e1e
 8018728:	1e1e1e1e 	.word	0x1e1e1e1e
 801872c:	1c          	.byte	0x1c
 801872d:	00          	.byte	0x00
 801872e:	4809      	ldr	r0, [pc, #36]	@ (8018754 <irq_mode+0x50>)
 8018730:	4770      	bx	lr
        case IRQ_Mode_Rising:
            return "R";
        case IRQ_Mode_Falling:
            return "F";
        case IRQ_Mode_RisingFalling:
            return "T";
 8018732:	4809      	ldr	r0, [pc, #36]	@ (8018758 <irq_mode+0x54>)
 8018734:	4770      	bx	lr
        case IRQ_Mode_Change:
            return "C";
 8018736:	4809      	ldr	r0, [pc, #36]	@ (801875c <irq_mode+0x58>)
 8018738:	4770      	bx	lr
        case IRQ_Mode_Edges:
            return "E";
 801873a:	4809      	ldr	r0, [pc, #36]	@ (8018760 <irq_mode+0x5c>)
 801873c:	4770      	bx	lr
        case IRQ_Mode_High:
            return "H";
 801873e:	4809      	ldr	r0, [pc, #36]	@ (8018764 <irq_mode+0x60>)
 8018740:	4770      	bx	lr
        case IRQ_Mode_Low:
            return "L";
 8018742:	4809      	ldr	r0, [pc, #36]	@ (8018768 <irq_mode+0x64>)
 8018744:	4770      	bx	lr
        case IRQ_Mode_All:
            return "A";
 8018746:	4809      	ldr	r0, [pc, #36]	@ (801876c <irq_mode+0x68>)
 8018748:	4770      	bx	lr
        default:
            break;
    }

    return "-";
 801874a:	4809      	ldr	r0, [pc, #36]	@ (8018770 <irq_mode+0x6c>)
 801874c:	4770      	bx	lr
            return "F";
 801874e:	4809      	ldr	r0, [pc, #36]	@ (8018774 <irq_mode+0x70>)
}
 8018750:	4770      	bx	lr
 8018752:	bf00      	nop
 8018754:	0802a33c 	.word	0x0802a33c
 8018758:	0802c100 	.word	0x0802c100
 801875c:	0802c104 	.word	0x0802c104
 8018760:	0802c108 	.word	0x0802c108
 8018764:	0802c520 	.word	0x0802c520
 8018768:	0802c10c 	.word	0x0802c10c
 801876c:	0802a408 	.word	0x0802a408
 8018770:	0802c110 	.word	0x0802c110
 8018774:	0802c0fc 	.word	0x0802c0fc

08018778 <pull_mode>:

static char *pull_mode (pull_mode_t mode)
{
    switch(mode) {
 8018778:	2802      	cmp	r0, #2
 801877a:	d007      	beq.n	801878c <pull_mode+0x14>
 801877c:	2803      	cmp	r0, #3
 801877e:	d007      	beq.n	8018790 <pull_mode+0x18>
 8018780:	2801      	cmp	r0, #1
 8018782:	d001      	beq.n	8018788 <pull_mode+0x10>
            return "B";
        default:
            break;
    }

    return "-";
 8018784:	4803      	ldr	r0, [pc, #12]	@ (8018794 <pull_mode+0x1c>)
}
 8018786:	4770      	bx	lr
    switch(mode) {
 8018788:	4803      	ldr	r0, [pc, #12]	@ (8018798 <pull_mode+0x20>)
 801878a:	4770      	bx	lr
            return "D";
 801878c:	4803      	ldr	r0, [pc, #12]	@ (801879c <pull_mode+0x24>)
 801878e:	4770      	bx	lr
            return "B";
 8018790:	4803      	ldr	r0, [pc, #12]	@ (80187a0 <pull_mode+0x28>)
 8018792:	4770      	bx	lr
 8018794:	0802c110 	.word	0x0802c110
 8018798:	0802c114 	.word	0x0802c114
 801879c:	0802c118 	.word	0x0802c118
 80187a0:	0802a34c 	.word	0x0802a34c

080187a4 <get_rate_value_mm>:
{
 80187a4:	b508      	push	{r3, lr}
    return uitoa((uint32_t)value);
 80187a6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80187aa:	ee17 0a90 	vmov	r0, s15
 80187ae:	f7fd f9e7 	bl	8015b80 <uitoa>
}
 80187b2:	bd08      	pop	{r3, pc}

080187b4 <get_rate_value_inch>:
{
 80187b4:	b508      	push	{r3, lr}
    return uitoa((uint32_t)(value * INCH_PER_MM));
 80187b6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80187cc <get_rate_value_inch+0x18>
 80187ba:	ee20 0a27 	vmul.f32	s0, s0, s15
 80187be:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80187c2:	ee17 0a90 	vmov	r0, s15
 80187c6:	f7fd f9db 	bl	8015b80 <uitoa>
}
 80187ca:	bd08      	pop	{r3, pc}
 80187cc:	3d21428b 	.word	0x3d21428b

080187d0 <print_setting>:
{
 80187d0:	b570      	push	{r4, r5, r6, lr}
 80187d2:	4604      	mov	r4, r0
    if(setting->value != NULL)
 80187d4:	6a03      	ldr	r3, [r0, #32]
 80187d6:	b123      	cbz	r3, 80187e2 <print_setting+0x12>
        grbl.report.setting(setting, offset, data);
 80187d8:	4b0a      	ldr	r3, [pc, #40]	@ (8018804 <print_setting+0x34>)
 80187da:	695b      	ldr	r3, [r3, #20]
 80187dc:	4798      	blx	r3
}
 80187de:	2001      	movs	r0, #1
 80187e0:	bd70      	pop	{r4, r5, r6, pc}
        hal.stream.write("$");
 80187e2:	4d09      	ldr	r5, [pc, #36]	@ (8018808 <print_setting+0x38>)
 80187e4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80187e8:	4808      	ldr	r0, [pc, #32]	@ (801880c <print_setting+0x3c>)
 80187ea:	4798      	blx	r3
        hal.stream.write(uitoa(setting->id));
 80187ec:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 80187f0:	8820      	ldrh	r0, [r4, #0]
 80187f2:	f7fd f9c5 	bl	8015b80 <uitoa>
 80187f6:	47b0      	blx	r6
        hal.stream.write("=N/A" ASCII_EOL);
 80187f8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80187fc:	4804      	ldr	r0, [pc, #16]	@ (8018810 <print_setting+0x40>)
 80187fe:	4798      	blx	r3
 8018800:	e7ed      	b.n	80187de <print_setting+0xe>
 8018802:	bf00      	nop
 8018804:	20001ac4 	.word	0x20001ac4
 8018808:	200018dc 	.word	0x200018dc
 801880c:	0802c11c 	.word	0x0802c11c
 8018810:	0802c120 	.word	0x0802c120

08018814 <print_alarm>:
{
 8018814:	b570      	push	{r4, r5, r6, lr}
 8018816:	4604      	mov	r4, r0
    if(grbl_format) {
 8018818:	b9f1      	cbnz	r1, 8018858 <print_alarm+0x44>
        hal.stream.write("[ALARMCODE:");
 801881a:	4d1b      	ldr	r5, [pc, #108]	@ (8018888 <print_alarm+0x74>)
 801881c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018820:	481a      	ldr	r0, [pc, #104]	@ (801888c <print_alarm+0x78>)
 8018822:	4798      	blx	r3
        hal.stream.write(uitoa(alarm->id));
 8018824:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8018828:	7820      	ldrb	r0, [r4, #0]
 801882a:	f7fd f9a9 	bl	8015b80 <uitoa>
 801882e:	47b0      	blx	r6
        hal.stream.write(vbar);
 8018830:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018834:	4e16      	ldr	r6, [pc, #88]	@ (8018890 <print_alarm+0x7c>)
 8018836:	4630      	mov	r0, r6
 8018838:	4798      	blx	r3
        hal.stream.write(vbar);
 801883a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801883e:	4630      	mov	r0, r6
 8018840:	4798      	blx	r3
        if(alarm->description)
 8018842:	6860      	ldr	r0, [r4, #4]
 8018844:	b110      	cbz	r0, 801884c <print_alarm+0x38>
            hal.stream.write(alarm->description);
 8018846:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801884a:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 801884c:	4b0e      	ldr	r3, [pc, #56]	@ (8018888 <print_alarm+0x74>)
 801884e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018852:	4810      	ldr	r0, [pc, #64]	@ (8018894 <print_alarm+0x80>)
 8018854:	4798      	blx	r3
}
 8018856:	bd70      	pop	{r4, r5, r6, pc}
        write_quoted(uitoa(alarm->id), ",");
 8018858:	7800      	ldrb	r0, [r0, #0]
 801885a:	f7fd f991 	bl	8015b80 <uitoa>
 801885e:	4d0e      	ldr	r5, [pc, #56]	@ (8018898 <print_alarm+0x84>)
 8018860:	4629      	mov	r1, r5
 8018862:	f7ff fef1 	bl	8018648 <write_quoted>
        write_quoted("N/A", ",");
 8018866:	4629      	mov	r1, r5
 8018868:	480c      	ldr	r0, [pc, #48]	@ (801889c <print_alarm+0x88>)
 801886a:	f7ff feed 	bl	8018648 <write_quoted>
        write_quoted(alarm->description ? alarm->description : "", NULL);
 801886e:	6860      	ldr	r0, [r4, #4]
 8018870:	b140      	cbz	r0, 8018884 <print_alarm+0x70>
 8018872:	2100      	movs	r1, #0
 8018874:	f7ff fee8 	bl	8018648 <write_quoted>
        hal.stream.write(ASCII_EOL);
 8018878:	4b03      	ldr	r3, [pc, #12]	@ (8018888 <print_alarm+0x74>)
 801887a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801887e:	4808      	ldr	r0, [pc, #32]	@ (80188a0 <print_alarm+0x8c>)
 8018880:	4798      	blx	r3
 8018882:	e7e8      	b.n	8018856 <print_alarm+0x42>
        write_quoted(alarm->description ? alarm->description : "", NULL);
 8018884:	4807      	ldr	r0, [pc, #28]	@ (80188a4 <print_alarm+0x90>)
 8018886:	e7f4      	b.n	8018872 <print_alarm+0x5e>
 8018888:	200018dc 	.word	0x200018dc
 801888c:	0802c128 	.word	0x0802c128
 8018890:	0802c95c 	.word	0x0802c95c
 8018894:	0802c134 	.word	0x0802c134
 8018898:	0802c560 	.word	0x0802c560
 801889c:	08029db8 	.word	0x08029db8
 80188a0:	0802c7e0 	.word	0x0802c7e0
 80188a4:	0802c29c 	.word	0x0802c29c

080188a8 <print_error>:
{
 80188a8:	b570      	push	{r4, r5, r6, lr}
 80188aa:	4604      	mov	r4, r0
    if(grbl_format) {
 80188ac:	b9f1      	cbnz	r1, 80188ec <print_error+0x44>
        hal.stream.write("[ERRORCODE:");
 80188ae:	4d1b      	ldr	r5, [pc, #108]	@ (801891c <print_error+0x74>)
 80188b0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80188b4:	481a      	ldr	r0, [pc, #104]	@ (8018920 <print_error+0x78>)
 80188b6:	4798      	blx	r3
        hal.stream.write(uitoa(error->id));
 80188b8:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 80188bc:	7820      	ldrb	r0, [r4, #0]
 80188be:	f7fd f95f 	bl	8015b80 <uitoa>
 80188c2:	47b0      	blx	r6
        hal.stream.write(vbar);
 80188c4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80188c8:	4e16      	ldr	r6, [pc, #88]	@ (8018924 <print_error+0x7c>)
 80188ca:	4630      	mov	r0, r6
 80188cc:	4798      	blx	r3
        hal.stream.write(vbar);
 80188ce:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80188d2:	4630      	mov	r0, r6
 80188d4:	4798      	blx	r3
        if(error->description)
 80188d6:	6860      	ldr	r0, [r4, #4]
 80188d8:	b110      	cbz	r0, 80188e0 <print_error+0x38>
            hal.stream.write(error->description);
 80188da:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80188de:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 80188e0:	4b0e      	ldr	r3, [pc, #56]	@ (801891c <print_error+0x74>)
 80188e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80188e6:	4810      	ldr	r0, [pc, #64]	@ (8018928 <print_error+0x80>)
 80188e8:	4798      	blx	r3
}
 80188ea:	bd70      	pop	{r4, r5, r6, pc}
        write_quoted(uitoa(error->id), ",");
 80188ec:	7800      	ldrb	r0, [r0, #0]
 80188ee:	f7fd f947 	bl	8015b80 <uitoa>
 80188f2:	4d0e      	ldr	r5, [pc, #56]	@ (801892c <print_error+0x84>)
 80188f4:	4629      	mov	r1, r5
 80188f6:	f7ff fea7 	bl	8018648 <write_quoted>
        write_quoted("N/A", ",");
 80188fa:	4629      	mov	r1, r5
 80188fc:	480c      	ldr	r0, [pc, #48]	@ (8018930 <print_error+0x88>)
 80188fe:	f7ff fea3 	bl	8018648 <write_quoted>
        write_quoted(error->description ? error->description : "", NULL);
 8018902:	6860      	ldr	r0, [r4, #4]
 8018904:	b140      	cbz	r0, 8018918 <print_error+0x70>
 8018906:	2100      	movs	r1, #0
 8018908:	f7ff fe9e 	bl	8018648 <write_quoted>
        hal.stream.write(ASCII_EOL);
 801890c:	4b03      	ldr	r3, [pc, #12]	@ (801891c <print_error+0x74>)
 801890e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018912:	4808      	ldr	r0, [pc, #32]	@ (8018934 <print_error+0x8c>)
 8018914:	4798      	blx	r3
 8018916:	e7e8      	b.n	80188ea <print_error+0x42>
        write_quoted(error->description ? error->description : "", NULL);
 8018918:	4807      	ldr	r0, [pc, #28]	@ (8018938 <print_error+0x90>)
 801891a:	e7f4      	b.n	8018906 <print_error+0x5e>
 801891c:	200018dc 	.word	0x200018dc
 8018920:	0802c138 	.word	0x0802c138
 8018924:	0802c95c 	.word	0x0802c95c
 8018928:	0802c134 	.word	0x0802c134
 801892c:	0802c560 	.word	0x0802c560
 8018930:	08029db8 	.word	0x08029db8
 8018934:	0802c7e0 	.word	0x0802c7e0
 8018938:	0802c29c 	.word	0x0802c29c

0801893c <print_uito2a>:
}

#endif

static void print_uito2a (char *prefix, uint32_t v)
{
 801893c:	b538      	push	{r3, r4, r5, lr}
 801893e:	460c      	mov	r4, r1
    hal.stream.write(prefix);
 8018940:	4b09      	ldr	r3, [pc, #36]	@ (8018968 <print_uito2a+0x2c>)
 8018942:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018946:	4798      	blx	r3
    if(v < 10)
 8018948:	2c09      	cmp	r4, #9
 801894a:	d804      	bhi.n	8018956 <print_uito2a+0x1a>
        hal.stream.write("0");
 801894c:	4b06      	ldr	r3, [pc, #24]	@ (8018968 <print_uito2a+0x2c>)
 801894e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018952:	4806      	ldr	r0, [pc, #24]	@ (801896c <print_uito2a+0x30>)
 8018954:	4798      	blx	r3
    hal.stream.write(uitoa(v));
 8018956:	4b04      	ldr	r3, [pc, #16]	@ (8018968 <print_uito2a+0x2c>)
 8018958:	f8d3 50b4 	ldr.w	r5, [r3, #180]	@ 0xb4
 801895c:	4620      	mov	r0, r4
 801895e:	f7fd f90f 	bl	8015b80 <uitoa>
 8018962:	47a8      	blx	r5
}
 8018964:	bd38      	pop	{r3, r4, r5, pc}
 8018966:	bf00      	nop
 8018968:	200018dc 	.word	0x200018dc
 801896c:	0802a20c 	.word	0x0802a20c

08018970 <report_spindle>:

    return ok ? Status_OK : Status_InvalidStatement;
}

static void report_spindle (spindle_info_t *spindle, void *data)
{
 8018970:	b570      	push	{r4, r5, r6, lr}
 8018972:	4604      	mov	r4, r0
    if(data) {
 8018974:	2900      	cmp	r1, #0
 8018976:	f000 80bc 	beq.w	8018af2 <report_spindle+0x182>
        char *caps = buf;
        hal.stream.write("[SPINDLE:");
 801897a:	4d68      	ldr	r5, [pc, #416]	@ (8018b1c <report_spindle+0x1ac>)
 801897c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018980:	4867      	ldr	r0, [pc, #412]	@ (8018b20 <report_spindle+0x1b0>)
 8018982:	4798      	blx	r3
        hal.stream.write(uitoa(spindle->id));
 8018984:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8018988:	f994 0000 	ldrsb.w	r0, [r4]
 801898c:	f7fd f8f8 	bl	8015b80 <uitoa>
 8018990:	47b0      	blx	r6
        hal.stream.write("|");
 8018992:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018996:	4863      	ldr	r0, [pc, #396]	@ (8018b24 <report_spindle+0x1b4>)
 8018998:	4798      	blx	r3
        hal.stream.write(spindle->enabled ? uitoa(spindle->num) : "-");
 801899a:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 801899e:	7a23      	ldrb	r3, [r4, #8]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	f040 809b 	bne.w	8018adc <report_spindle+0x16c>
 80189a6:	4860      	ldr	r0, [pc, #384]	@ (8018b28 <report_spindle+0x1b8>)
 80189a8:	47a8      	blx	r5
        hal.stream.write("|");
 80189aa:	4d5c      	ldr	r5, [pc, #368]	@ (8018b1c <report_spindle+0x1ac>)
 80189ac:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80189b0:	485c      	ldr	r0, [pc, #368]	@ (8018b24 <report_spindle+0x1b4>)
 80189b2:	4798      	blx	r3
        hal.stream.write(uitoa(spindle->hal->type));
 80189b4:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 80189b8:	68e3      	ldr	r3, [r4, #12]
 80189ba:	7a18      	ldrb	r0, [r3, #8]
 80189bc:	f7fd f8e0 	bl	8015b80 <uitoa>
 80189c0:	47a8      	blx	r5
        *caps++ = '|';
 80189c2:	4b5a      	ldr	r3, [pc, #360]	@ (8018b2c <report_spindle+0x1bc>)
 80189c4:	227c      	movs	r2, #124	@ 0x7c
 80189c6:	701a      	strb	r2, [r3, #0]
#if N_SYS_SPINDLE == 1
        if(spindle->is_current)
 80189c8:	7a63      	ldrb	r3, [r4, #9]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	f000 808b 	beq.w	8018ae6 <report_spindle+0x176>
            *caps++ = '*';
 80189d0:	4b56      	ldr	r3, [pc, #344]	@ (8018b2c <report_spindle+0x1bc>)
 80189d2:	222a      	movs	r2, #42	@ 0x2a
 80189d4:	705a      	strb	r2, [r3, #1]
 80189d6:	3302      	adds	r3, #2
#endif
        if(spindle->hal->cap.at_speed)
 80189d8:	68e2      	ldr	r2, [r4, #12]
 80189da:	7a92      	ldrb	r2, [r2, #10]
 80189dc:	f012 0f04 	tst.w	r2, #4
 80189e0:	d002      	beq.n	80189e8 <report_spindle+0x78>
            *caps++ = 'S';
 80189e2:	2253      	movs	r2, #83	@ 0x53
 80189e4:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.direction)
 80189e8:	68e2      	ldr	r2, [r4, #12]
 80189ea:	7a92      	ldrb	r2, [r2, #10]
 80189ec:	f012 0f02 	tst.w	r2, #2
 80189f0:	d002      	beq.n	80189f8 <report_spindle+0x88>
            *caps++ = 'D';
 80189f2:	2244      	movs	r2, #68	@ 0x44
 80189f4:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.laser)
 80189f8:	68e2      	ldr	r2, [r4, #12]
 80189fa:	7a92      	ldrb	r2, [r2, #10]
 80189fc:	f012 0f08 	tst.w	r2, #8
 8018a00:	d002      	beq.n	8018a08 <report_spindle+0x98>
            *caps++ = 'L';
 8018a02:	224c      	movs	r2, #76	@ 0x4c
 8018a04:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.laser && spindle->hal->pulse_on)
 8018a08:	68e2      	ldr	r2, [r4, #12]
 8018a0a:	7a91      	ldrb	r1, [r2, #10]
 8018a0c:	f011 0f08 	tst.w	r1, #8
 8018a10:	d004      	beq.n	8018a1c <report_spindle+0xac>
 8018a12:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8018a14:	b112      	cbz	r2, 8018a1c <report_spindle+0xac>
            *caps++ = 'A';
 8018a16:	2241      	movs	r2, #65	@ 0x41
 8018a18:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.pid)
 8018a1c:	68e2      	ldr	r2, [r4, #12]
 8018a1e:	7a92      	ldrb	r2, [r2, #10]
 8018a20:	f012 0f20 	tst.w	r2, #32
 8018a24:	d002      	beq.n	8018a2c <report_spindle+0xbc>
            *caps++ = 'P';
 8018a26:	2250      	movs	r2, #80	@ 0x50
 8018a28:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.pwm_invert)
 8018a2c:	68e2      	ldr	r2, [r4, #12]
 8018a2e:	7a92      	ldrb	r2, [r2, #10]
 8018a30:	f012 0f10 	tst.w	r2, #16
 8018a34:	d002      	beq.n	8018a3c <report_spindle+0xcc>
            *caps++ = 'I';
 8018a36:	2249      	movs	r2, #73	@ 0x49
 8018a38:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.pwm_linearization)
 8018a3c:	68e2      	ldr	r2, [r4, #12]
 8018a3e:	7a92      	ldrb	r2, [r2, #10]
 8018a40:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8018a44:	d002      	beq.n	8018a4c <report_spindle+0xdc>
            *caps++ = 'N';
 8018a46:	224e      	movs	r2, #78	@ 0x4e
 8018a48:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.rpm_range_locked)
 8018a4c:	68e2      	ldr	r2, [r4, #12]
 8018a4e:	f992 200a 	ldrsb.w	r2, [r2, #10]
 8018a52:	2a00      	cmp	r2, #0
 8018a54:	db49      	blt.n	8018aea <report_spindle+0x17a>
            *caps++ = 'R';
        if(spindle->hal->cap.variable)
 8018a56:	68e2      	ldr	r2, [r4, #12]
 8018a58:	7a92      	ldrb	r2, [r2, #10]
 8018a5a:	f012 0f01 	tst.w	r2, #1
 8018a5e:	d002      	beq.n	8018a66 <report_spindle+0xf6>
            *caps++ = 'V';
 8018a60:	2256      	movs	r2, #86	@ 0x56
 8018a62:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->get_data)
 8018a66:	68e2      	ldr	r2, [r4, #12]
 8018a68:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8018a6a:	b112      	cbz	r2, 8018a72 <report_spindle+0x102>
            *caps++ = 'E';
 8018a6c:	2245      	movs	r2, #69	@ 0x45
 8018a6e:	f803 2b01 	strb.w	r2, [r3], #1
        *caps++ = '|';
 8018a72:	227c      	movs	r2, #124	@ 0x7c
 8018a74:	701a      	strb	r2, [r3, #0]
        *caps = '\0';
 8018a76:	2200      	movs	r2, #0
 8018a78:	705a      	strb	r2, [r3, #1]
        hal.stream.write(buf);
 8018a7a:	4d28      	ldr	r5, [pc, #160]	@ (8018b1c <report_spindle+0x1ac>)
 8018a7c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018a80:	482a      	ldr	r0, [pc, #168]	@ (8018b2c <report_spindle+0x1bc>)
 8018a82:	4798      	blx	r3
        hal.stream.write(spindle->name);
 8018a84:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018a88:	6860      	ldr	r0, [r4, #4]
 8018a8a:	4798      	blx	r3
        if(spindle->hal->rpm_max > 0.0f) {
 8018a8c:	68e3      	ldr	r3, [r4, #12]
 8018a8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8018a92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a9a:	dd19      	ble.n	8018ad0 <report_spindle+0x160>
            hal.stream.write("|");
 8018a9c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018aa0:	4820      	ldr	r0, [pc, #128]	@ (8018b24 <report_spindle+0x1b4>)
 8018aa2:	4798      	blx	r3
            hal.stream.write(ftoa(spindle->hal->rpm_min, 1));
 8018aa4:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8018aa8:	68e3      	ldr	r3, [r4, #12]
 8018aaa:	2001      	movs	r0, #1
 8018aac:	ed93 0a05 	vldr	s0, [r3, #20]
 8018ab0:	f7fd f888 	bl	8015bc4 <ftoa>
 8018ab4:	47b0      	blx	r6
            hal.stream.write(",");
 8018ab6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018aba:	481d      	ldr	r0, [pc, #116]	@ (8018b30 <report_spindle+0x1c0>)
 8018abc:	4798      	blx	r3
            hal.stream.write(ftoa(spindle->hal->rpm_max, 1));
 8018abe:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 8018ac2:	68e3      	ldr	r3, [r4, #12]
 8018ac4:	2001      	movs	r0, #1
 8018ac6:	ed93 0a06 	vldr	s0, [r3, #24]
 8018aca:	f7fd f87b 	bl	8015bc4 <ftoa>
 8018ace:	47a8      	blx	r5
        }
        hal.stream.write("]" ASCII_EOL);
 8018ad0:	4b12      	ldr	r3, [pc, #72]	@ (8018b1c <report_spindle+0x1ac>)
 8018ad2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018ad6:	4817      	ldr	r0, [pc, #92]	@ (8018b34 <report_spindle+0x1c4>)
 8018ad8:	4798      	blx	r3
 #endif
#endif
        }
        hal.stream.write(ASCII_EOL);
    }
}
 8018ada:	bd70      	pop	{r4, r5, r6, pc}
        hal.stream.write(spindle->enabled ? uitoa(spindle->num) : "-");
 8018adc:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8018ae0:	f7fd f84e 	bl	8015b80 <uitoa>
 8018ae4:	e760      	b.n	80189a8 <report_spindle+0x38>
        *caps++ = '|';
 8018ae6:	4b14      	ldr	r3, [pc, #80]	@ (8018b38 <report_spindle+0x1c8>)
 8018ae8:	e776      	b.n	80189d8 <report_spindle+0x68>
            *caps++ = 'R';
 8018aea:	2252      	movs	r2, #82	@ 0x52
 8018aec:	f803 2b01 	strb.w	r2, [r3], #1
 8018af0:	e7b1      	b.n	8018a56 <report_spindle+0xe6>
        hal.stream.write(uitoa(spindle->id));
 8018af2:	4d0a      	ldr	r5, [pc, #40]	@ (8018b1c <report_spindle+0x1ac>)
 8018af4:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8018af8:	f990 0000 	ldrsb.w	r0, [r0]
 8018afc:	f7fd f840 	bl	8015b80 <uitoa>
 8018b00:	47b0      	blx	r6
        hal.stream.write(" - ");
 8018b02:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018b06:	480d      	ldr	r0, [pc, #52]	@ (8018b3c <report_spindle+0x1cc>)
 8018b08:	4798      	blx	r3
        hal.stream.write(spindle->name);
 8018b0a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018b0e:	6860      	ldr	r0, [r4, #4]
 8018b10:	4798      	blx	r3
        hal.stream.write(ASCII_EOL);
 8018b12:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018b16:	480a      	ldr	r0, [pc, #40]	@ (8018b40 <report_spindle+0x1d0>)
 8018b18:	4798      	blx	r3
}
 8018b1a:	e7de      	b.n	8018ada <report_spindle+0x16a>
 8018b1c:	200018dc 	.word	0x200018dc
 8018b20:	0802c144 	.word	0x0802c144
 8018b24:	0802c150 	.word	0x0802c150
 8018b28:	0802c110 	.word	0x0802c110
 8018b2c:	200021c4 	.word	0x200021c4
 8018b30:	0802c560 	.word	0x0802c560
 8018b34:	0802c134 	.word	0x0802c134
 8018b38:	200021c5 	.word	0x200021c5
 8018b3c:	0802c154 	.word	0x0802c154
 8018b40:	0802c7e0 	.word	0x0802c7e0

08018b44 <get_axis_values_mm>:
{
 8018b44:	b570      	push	{r4, r5, r6, lr}
 8018b46:	4605      	mov	r5, r0
    buf[0] = '\0';
 8018b48:	2400      	movs	r4, #0
 8018b4a:	4b18      	ldr	r3, [pc, #96]	@ (8018bac <get_axis_values_mm+0x68>)
 8018b4c:	701c      	strb	r4, [r3, #0]
    for (idx = 0; idx < N_AXIS; idx++) {
 8018b4e:	e014      	b.n	8018b7a <get_axis_values_mm+0x36>
            strcat(buf, ftoa(axis_values[idx], N_DECIMAL_COORDVALUE_MM));
 8018b50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018b54:	2003      	movs	r0, #3
 8018b56:	ed93 0a00 	vldr	s0, [r3]
 8018b5a:	f7fd f833 	bl	8015bc4 <ftoa>
 8018b5e:	4601      	mov	r1, r0
 8018b60:	4812      	ldr	r0, [pc, #72]	@ (8018bac <get_axis_values_mm+0x68>)
 8018b62:	f00c f9e8 	bl	8024f36 <strcat>
        if (idx < (N_AXIS - 1))
 8018b66:	2c01      	cmp	r4, #1
 8018b68:	d806      	bhi.n	8018b78 <get_axis_values_mm+0x34>
            strcat(buf, ",");
 8018b6a:	4e10      	ldr	r6, [pc, #64]	@ (8018bac <get_axis_values_mm+0x68>)
 8018b6c:	4630      	mov	r0, r6
 8018b6e:	f7ef fac7 	bl	8008100 <strlen>
 8018b72:	4b0f      	ldr	r3, [pc, #60]	@ (8018bb0 <get_axis_values_mm+0x6c>)
 8018b74:	881b      	ldrh	r3, [r3, #0]
 8018b76:	5233      	strh	r3, [r6, r0]
    for (idx = 0; idx < N_AXIS; idx++) {
 8018b78:	3401      	adds	r4, #1
 8018b7a:	2c02      	cmp	r4, #2
 8018b7c:	d813      	bhi.n	8018ba6 <get_axis_values_mm+0x62>
        if(idx == X_AXIS && gc_state.modal.diameter_mode)
 8018b7e:	2c00      	cmp	r4, #0
 8018b80:	d1e6      	bne.n	8018b50 <get_axis_values_mm+0xc>
 8018b82:	4b0c      	ldr	r3, [pc, #48]	@ (8018bb4 <get_axis_values_mm+0x70>)
 8018b84:	795b      	ldrb	r3, [r3, #5]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d0e2      	beq.n	8018b50 <get_axis_values_mm+0xc>
            strcat(buf, ftoa(axis_values[idx] * 2.0f, N_DECIMAL_COORDVALUE_MM));
 8018b8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018b8e:	ed93 0a00 	vldr	s0, [r3]
 8018b92:	2003      	movs	r0, #3
 8018b94:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018b98:	f7fd f814 	bl	8015bc4 <ftoa>
 8018b9c:	4601      	mov	r1, r0
 8018b9e:	4803      	ldr	r0, [pc, #12]	@ (8018bac <get_axis_values_mm+0x68>)
 8018ba0:	f00c f9c9 	bl	8024f36 <strcat>
 8018ba4:	e7df      	b.n	8018b66 <get_axis_values_mm+0x22>
}
 8018ba6:	4801      	ldr	r0, [pc, #4]	@ (8018bac <get_axis_values_mm+0x68>)
 8018ba8:	bd70      	pop	{r4, r5, r6, pc}
 8018baa:	bf00      	nop
 8018bac:	200021c4 	.word	0x200021c4
 8018bb0:	0802c560 	.word	0x0802c560
 8018bb4:	20001614 	.word	0x20001614

08018bb8 <get_axis_values_inches>:
{
 8018bb8:	b570      	push	{r4, r5, r6, lr}
 8018bba:	4605      	mov	r5, r0
    buf[0] = '\0';
 8018bbc:	2400      	movs	r4, #0
 8018bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8018c30 <get_axis_values_inches+0x78>)
 8018bc0:	701c      	strb	r4, [r3, #0]
    for (idx = 0; idx < N_AXIS; idx++) {
 8018bc2:	e018      	b.n	8018bf6 <get_axis_values_inches+0x3e>
             strcat(buf, ftoa(axis_values[idx] * INCH_PER_MM, N_DECIMAL_COORDVALUE_INCH));
 8018bc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018bc8:	ed93 0a00 	vldr	s0, [r3]
 8018bcc:	2004      	movs	r0, #4
 8018bce:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018c34 <get_axis_values_inches+0x7c>
 8018bd2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018bd6:	f7fc fff5 	bl	8015bc4 <ftoa>
 8018bda:	4601      	mov	r1, r0
 8018bdc:	4814      	ldr	r0, [pc, #80]	@ (8018c30 <get_axis_values_inches+0x78>)
 8018bde:	f00c f9aa 	bl	8024f36 <strcat>
        if (idx < (N_AXIS - 1))
 8018be2:	2c01      	cmp	r4, #1
 8018be4:	d806      	bhi.n	8018bf4 <get_axis_values_inches+0x3c>
            strcat(buf, ",");
 8018be6:	4e12      	ldr	r6, [pc, #72]	@ (8018c30 <get_axis_values_inches+0x78>)
 8018be8:	4630      	mov	r0, r6
 8018bea:	f7ef fa89 	bl	8008100 <strlen>
 8018bee:	4b12      	ldr	r3, [pc, #72]	@ (8018c38 <get_axis_values_inches+0x80>)
 8018bf0:	881b      	ldrh	r3, [r3, #0]
 8018bf2:	5233      	strh	r3, [r6, r0]
    for (idx = 0; idx < N_AXIS; idx++) {
 8018bf4:	3401      	adds	r4, #1
 8018bf6:	2c02      	cmp	r4, #2
 8018bf8:	d817      	bhi.n	8018c2a <get_axis_values_inches+0x72>
        if(idx == X_AXIS && gc_state.modal.diameter_mode)
 8018bfa:	2c00      	cmp	r4, #0
 8018bfc:	d1e2      	bne.n	8018bc4 <get_axis_values_inches+0xc>
 8018bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8018c3c <get_axis_values_inches+0x84>)
 8018c00:	795b      	ldrb	r3, [r3, #5]
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d0de      	beq.n	8018bc4 <get_axis_values_inches+0xc>
            strcat(buf, ftoa(axis_values[idx] * INCH_PER_MM * 2.0f, N_DECIMAL_COORDVALUE_INCH));
 8018c06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018c0a:	ed93 0a00 	vldr	s0, [r3]
 8018c0e:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8018c34 <get_axis_values_inches+0x7c>
 8018c12:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018c16:	2004      	movs	r0, #4
 8018c18:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018c1c:	f7fc ffd2 	bl	8015bc4 <ftoa>
 8018c20:	4601      	mov	r1, r0
 8018c22:	4803      	ldr	r0, [pc, #12]	@ (8018c30 <get_axis_values_inches+0x78>)
 8018c24:	f00c f987 	bl	8024f36 <strcat>
 8018c28:	e7db      	b.n	8018be2 <get_axis_values_inches+0x2a>
}
 8018c2a:	4801      	ldr	r0, [pc, #4]	@ (8018c30 <get_axis_values_inches+0x78>)
 8018c2c:	bd70      	pop	{r4, r5, r6, pc}
 8018c2e:	bf00      	nop
 8018c30:	200021c4 	.word	0x200021c4
 8018c34:	3d21428b 	.word	0x3d21428b
 8018c38:	0802c560 	.word	0x0802c560
 8018c3c:	20001614 	.word	0x20001614

08018c40 <get_axis_value_mm>:
{
 8018c40:	b508      	push	{r3, lr}
    return strcpy(buf, ftoa(value, N_DECIMAL_COORDVALUE_MM));
 8018c42:	2003      	movs	r0, #3
 8018c44:	f7fc ffbe 	bl	8015bc4 <ftoa>
 8018c48:	4601      	mov	r1, r0
 8018c4a:	4802      	ldr	r0, [pc, #8]	@ (8018c54 <get_axis_value_mm+0x14>)
 8018c4c:	f00c fac3 	bl	80251d6 <strcpy>
}
 8018c50:	bd08      	pop	{r3, pc}
 8018c52:	bf00      	nop
 8018c54:	200021c4 	.word	0x200021c4

08018c58 <get_axis_value_inches>:
{
 8018c58:	b508      	push	{r3, lr}
    return strcpy(buf, ftoa(value * INCH_PER_MM, N_DECIMAL_COORDVALUE_INCH));
 8018c5a:	2004      	movs	r0, #4
 8018c5c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8018c74 <get_axis_value_inches+0x1c>
 8018c60:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018c64:	f7fc ffae 	bl	8015bc4 <ftoa>
 8018c68:	4601      	mov	r1, r0
 8018c6a:	4803      	ldr	r0, [pc, #12]	@ (8018c78 <get_axis_value_inches+0x20>)
 8018c6c:	f00c fab3 	bl	80251d6 <strcpy>
}
 8018c70:	bd08      	pop	{r3, pc}
 8018c72:	bf00      	nop
 8018c74:	3d21428b 	.word	0x3d21428b
 8018c78:	200021c4 	.word	0x200021c4

08018c7c <map_coord_system>:
{
 8018c7c:	b538      	push	{r3, r4, r5, lr}
    uint8_t g5x = id + 54;
 8018c7e:	f100 0436 	add.w	r4, r0, #54	@ 0x36
 8018c82:	b2e4      	uxtb	r4, r4
    strcpy(buf, uitoa((uint32_t)(g5x > 59 ? 59 : g5x)));
 8018c84:	4620      	mov	r0, r4
 8018c86:	2c3b      	cmp	r4, #59	@ 0x3b
 8018c88:	bf28      	it	cs
 8018c8a:	203b      	movcs	r0, #59	@ 0x3b
 8018c8c:	f7fc ff78 	bl	8015b80 <uitoa>
 8018c90:	4601      	mov	r1, r0
 8018c92:	480b      	ldr	r0, [pc, #44]	@ (8018cc0 <map_coord_system+0x44>)
 8018c94:	f00c fa9f 	bl	80251d6 <strcpy>
    if(g5x > 59) {
 8018c98:	2c3b      	cmp	r4, #59	@ 0x3b
 8018c9a:	d801      	bhi.n	8018ca0 <map_coord_system+0x24>
}
 8018c9c:	4808      	ldr	r0, [pc, #32]	@ (8018cc0 <map_coord_system+0x44>)
 8018c9e:	bd38      	pop	{r3, r4, r5, pc}
        strcat(buf, ".");
 8018ca0:	4d07      	ldr	r5, [pc, #28]	@ (8018cc0 <map_coord_system+0x44>)
 8018ca2:	4628      	mov	r0, r5
 8018ca4:	f7ef fa2c 	bl	8008100 <strlen>
 8018ca8:	4b06      	ldr	r3, [pc, #24]	@ (8018cc4 <map_coord_system+0x48>)
 8018caa:	881b      	ldrh	r3, [r3, #0]
 8018cac:	522b      	strh	r3, [r5, r0]
        strcat(buf, uitoa((uint32_t)(g5x - 59)));
 8018cae:	f1a4 003b 	sub.w	r0, r4, #59	@ 0x3b
 8018cb2:	f7fc ff65 	bl	8015b80 <uitoa>
 8018cb6:	4601      	mov	r1, r0
 8018cb8:	4628      	mov	r0, r5
 8018cba:	f00c f93c 	bl	8024f36 <strcat>
 8018cbe:	e7ed      	b.n	8018c9c <map_coord_system+0x20>
 8018cc0:	200021c4 	.word	0x200021c4
 8018cc4:	080299cc 	.word	0x080299cc

08018cc8 <get_pin_info>:
{
 8018cc8:	b510      	push	{r4, lr}
 8018cca:	460c      	mov	r4, r1
    info->function = pin->function;
 8018ccc:	7843      	ldrb	r3, [r0, #1]
 8018cce:	704b      	strb	r3, [r1, #1]
    info->pin = pin->pin;
 8018cd0:	6903      	ldr	r3, [r0, #16]
 8018cd2:	700b      	strb	r3, [r1, #0]
    info->description = pin->description;
 8018cd4:	68c3      	ldr	r3, [r0, #12]
 8018cd6:	610b      	str	r3, [r1, #16]
    info->sortkey = (pin->function << 8) | pin->id | (pin->group >= PinGroup_UART1 && pin->group <= PinGroup_UART4 ? pin->group << 16 : 0);
 8018cd8:	7842      	ldrb	r2, [r0, #1]
 8018cda:	7803      	ldrb	r3, [r0, #0]
 8018cdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018ce0:	6842      	ldr	r2, [r0, #4]
 8018ce2:	f1a2 0111 	sub.w	r1, r2, #17
 8018ce6:	2903      	cmp	r1, #3
 8018ce8:	d809      	bhi.n	8018cfe <get_pin_info+0x36>
 8018cea:	0412      	lsls	r2, r2, #16
 8018cec:	4313      	orrs	r3, r2
 8018cee:	6163      	str	r3, [r4, #20]
    if(pin->port)
 8018cf0:	6881      	ldr	r1, [r0, #8]
 8018cf2:	b131      	cbz	r1, 8018d02 <get_pin_info+0x3a>
        strcpy(info->port, (char *)pin->port);
 8018cf4:	1ca0      	adds	r0, r4, #2
 8018cf6:	f00c fa6e 	bl	80251d6 <strcpy>
}
 8018cfa:	4620      	mov	r0, r4
 8018cfc:	bd10      	pop	{r4, pc}
    info->sortkey = (pin->function << 8) | pin->id | (pin->group >= PinGroup_UART1 && pin->group <= PinGroup_UART4 ? pin->group << 16 : 0);
 8018cfe:	2200      	movs	r2, #0
 8018d00:	e7f4      	b.n	8018cec <get_pin_info+0x24>
        *info->port = '\0';
 8018d02:	2300      	movs	r3, #0
 8018d04:	70a3      	strb	r3, [r4, #2]
 8018d06:	e7f8      	b.n	8018cfa <get_pin_info+0x32>

08018d08 <get_pins>:
{
 8018d08:	b510      	push	{r4, lr}
    get_pin_info(pin, &((pin_data_t *)data)->pins[((pin_data_t *)data)->idx++]);
 8018d0a:	688a      	ldr	r2, [r1, #8]
 8018d0c:	680b      	ldr	r3, [r1, #0]
 8018d0e:	1c5c      	adds	r4, r3, #1
 8018d10:	600c      	str	r4, [r1, #0]
 8018d12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018d16:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8018d1a:	f7ff ffd5 	bl	8018cc8 <get_pin_info>
}
 8018d1e:	bd10      	pop	{r4, pc}

08018d20 <appendbuf>:
{
 8018d20:	b40f      	push	{r0, r1, r2, r3}
 8018d22:	b410      	push	{r4}
 8018d24:	b083      	sub	sp, #12
 8018d26:	ab04      	add	r3, sp, #16
 8018d28:	f853 4b04 	ldr.w	r4, [r3], #4
    va_start(list, argc);
 8018d2c:	9301      	str	r3, [sp, #4]
    char c, *s = buf, *arg;
 8018d2e:	480c      	ldr	r0, [pc, #48]	@ (8018d60 <appendbuf+0x40>)
    while(argc--) {
 8018d30:	e00b      	b.n	8018d4a <appendbuf+0x2a>
        arg = va_arg(list, char *);
 8018d32:	9b01      	ldr	r3, [sp, #4]
 8018d34:	1d1a      	adds	r2, r3, #4
 8018d36:	9201      	str	r2, [sp, #4]
 8018d38:	6819      	ldr	r1, [r3, #0]
 8018d3a:	4602      	mov	r2, r0
            c = *s++ = *arg++;
 8018d3c:	4610      	mov	r0, r2
 8018d3e:	3201      	adds	r2, #1
 8018d40:	780b      	ldrb	r3, [r1, #0]
 8018d42:	3101      	adds	r1, #1
 8018d44:	7003      	strb	r3, [r0, #0]
        } while(c);
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d1f8      	bne.n	8018d3c <appendbuf+0x1c>
    while(argc--) {
 8018d4a:	4623      	mov	r3, r4
 8018d4c:	3c01      	subs	r4, #1
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d1ef      	bne.n	8018d32 <appendbuf+0x12>
}
 8018d52:	4803      	ldr	r0, [pc, #12]	@ (8018d60 <appendbuf+0x40>)
 8018d54:	b003      	add	sp, #12
 8018d56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d5a:	b004      	add	sp, #16
 8018d5c:	4770      	bx	lr
 8018d5e:	bf00      	nop
 8018d60:	200021c4 	.word	0x200021c4

08018d64 <report_alarm_message>:
{
 8018d64:	b570      	push	{r4, r5, r6, lr}
 8018d66:	4604      	mov	r4, r0
    hal.stream.write_all(appendbuf(3, "ALARM:", uitoa((uint32_t)alarm_code), ASCII_EOL));
 8018d68:	4d08      	ldr	r5, [pc, #32]	@ (8018d8c <report_alarm_message+0x28>)
 8018d6a:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 8018d6e:	f7fc ff07 	bl	8015b80 <uitoa>
 8018d72:	4602      	mov	r2, r0
 8018d74:	4b06      	ldr	r3, [pc, #24]	@ (8018d90 <report_alarm_message+0x2c>)
 8018d76:	4907      	ldr	r1, [pc, #28]	@ (8018d94 <report_alarm_message+0x30>)
 8018d78:	2003      	movs	r0, #3
 8018d7a:	f7ff ffd1 	bl	8018d20 <appendbuf>
 8018d7e:	47b0      	blx	r6
    hal.delay_ms(100, NULL); // Force delay to ensure message clears output stream buffer.
 8018d80:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8018d82:	2100      	movs	r1, #0
 8018d84:	2064      	movs	r0, #100	@ 0x64
 8018d86:	4798      	blx	r3
}
 8018d88:	4620      	mov	r0, r4
 8018d8a:	bd70      	pop	{r4, r5, r6, pc}
 8018d8c:	200018dc 	.word	0x200018dc
 8018d90:	0802c7e0 	.word	0x0802c7e0
 8018d94:	0802c158 	.word	0x0802c158

08018d98 <report_status_message>:
{
 8018d98:	b538      	push	{r3, r4, r5, lr}
    switch(status_code) {
 8018d9a:	4604      	mov	r4, r0
 8018d9c:	b930      	cbnz	r0, 8018dac <report_status_message+0x14>
            hal.stream.write("ok" ASCII_EOL);
 8018d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8018dc8 <report_status_message+0x30>)
 8018da0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018da4:	4809      	ldr	r0, [pc, #36]	@ (8018dcc <report_status_message+0x34>)
 8018da6:	4798      	blx	r3
}
 8018da8:	4620      	mov	r0, r4
 8018daa:	bd38      	pop	{r3, r4, r5, pc}
            hal.stream.write(appendbuf(3, "error:", uitoa((uint32_t)status_code), ASCII_EOL));
 8018dac:	4b06      	ldr	r3, [pc, #24]	@ (8018dc8 <report_status_message+0x30>)
 8018dae:	f8d3 50b4 	ldr.w	r5, [r3, #180]	@ 0xb4
 8018db2:	f7fc fee5 	bl	8015b80 <uitoa>
 8018db6:	4602      	mov	r2, r0
 8018db8:	4b05      	ldr	r3, [pc, #20]	@ (8018dd0 <report_status_message+0x38>)
 8018dba:	4906      	ldr	r1, [pc, #24]	@ (8018dd4 <report_status_message+0x3c>)
 8018dbc:	2003      	movs	r0, #3
 8018dbe:	f7ff ffaf 	bl	8018d20 <appendbuf>
 8018dc2:	47a8      	blx	r5
            break;
 8018dc4:	e7f0      	b.n	8018da8 <report_status_message+0x10>
 8018dc6:	bf00      	nop
 8018dc8:	200018dc 	.word	0x200018dc
 8018dcc:	0802c160 	.word	0x0802c160
 8018dd0:	0802c7e0 	.word	0x0802c7e0
 8018dd4:	0802c168 	.word	0x0802c168

08018dd8 <report_bitfield>:
{
 8018dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ddc:	4604      	mov	r4, r0
 8018dde:	4688      	mov	r8, r1
    if((s = (char *)malloc(strlen(format) + 1))) {
 8018de0:	f7ef f98e 	bl	8008100 <strlen>
 8018de4:	3001      	adds	r0, #1
 8018de6:	f009 ffd7 	bl	8022d98 <malloc>
 8018dea:	2800      	cmp	r0, #0
 8018dec:	d049      	beq.n	8018e82 <report_bitfield+0xaa>
 8018dee:	4681      	mov	r9, r0
        strcpy(s, format);
 8018df0:	4621      	mov	r1, r4
 8018df2:	f00c f9f0 	bl	80251d6 <strcpy>
        char *element = strtok(s, ",");
 8018df6:	4924      	ldr	r1, [pc, #144]	@ (8018e88 <report_bitfield+0xb0>)
 8018df8:	4648      	mov	r0, r9
 8018dfa:	f00c f8f3 	bl	8024fe4 <strtok>
 8018dfe:	4604      	mov	r4, r0
    uint_fast16_t val = 1;
 8018e00:	2701      	movs	r7, #1
    uint_fast8_t bit = 0;
 8018e02:	2600      	movs	r6, #0
        while(element) {
 8018e04:	e006      	b.n	8018e14 <report_bitfield+0x3c>
            bit++;
 8018e06:	3601      	adds	r6, #1
            val <<= 1;
 8018e08:	007f      	lsls	r7, r7, #1
            element = strtok(NULL, ",");
 8018e0a:	491f      	ldr	r1, [pc, #124]	@ (8018e88 <report_bitfield+0xb0>)
 8018e0c:	2000      	movs	r0, #0
 8018e0e:	f00c f8e9 	bl	8024fe4 <strtok>
 8018e12:	4604      	mov	r4, r0
        while(element) {
 8018e14:	2c00      	cmp	r4, #0
 8018e16:	d031      	beq.n	8018e7c <report_bitfield+0xa4>
            if(strcmp(element, "N/A")) {
 8018e18:	491c      	ldr	r1, [pc, #112]	@ (8018e8c <report_bitfield+0xb4>)
 8018e1a:	4620      	mov	r0, r4
 8018e1c:	f7ef f910 	bl	8008040 <strcmp>
 8018e20:	2800      	cmp	r0, #0
 8018e22:	d0f0      	beq.n	8018e06 <report_bitfield+0x2e>
                hal.stream.write(ASCII_EOL);
 8018e24:	4d1a      	ldr	r5, [pc, #104]	@ (8018e90 <report_bitfield+0xb8>)
 8018e26:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018e2a:	481a      	ldr	r0, [pc, #104]	@ (8018e94 <report_bitfield+0xbc>)
 8018e2c:	4798      	blx	r3
                hal.stream.write("    ");
 8018e2e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018e32:	4819      	ldr	r0, [pc, #100]	@ (8018e98 <report_bitfield+0xc0>)
 8018e34:	4798      	blx	r3
                hal.stream.write(uitoa(bit));
 8018e36:	f8d5 a0b4 	ldr.w	sl, [r5, #180]	@ 0xb4
 8018e3a:	4630      	mov	r0, r6
 8018e3c:	f7fc fea0 	bl	8015b80 <uitoa>
 8018e40:	47d0      	blx	sl
                hal.stream.write(" - ");
 8018e42:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018e46:	4815      	ldr	r0, [pc, #84]	@ (8018e9c <report_bitfield+0xc4>)
 8018e48:	4798      	blx	r3
                if(*element)
 8018e4a:	7823      	ldrb	r3, [r4, #0]
 8018e4c:	b11b      	cbz	r3, 8018e56 <report_bitfield+0x7e>
                hal.stream.write(element);
 8018e4e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018e52:	4620      	mov	r0, r4
 8018e54:	4798      	blx	r3
                if(bitmap) {
 8018e56:	f1b8 0f00 	cmp.w	r8, #0
 8018e5a:	d0d4      	beq.n	8018e06 <report_bitfield+0x2e>
                    hal.stream.write(" (");
 8018e5c:	4c0c      	ldr	r4, [pc, #48]	@ (8018e90 <report_bitfield+0xb8>)
 8018e5e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8018e62:	480f      	ldr	r0, [pc, #60]	@ (8018ea0 <report_bitfield+0xc8>)
 8018e64:	4798      	blx	r3
                    hal.stream.write(uitoa(val));
 8018e66:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8018e6a:	4638      	mov	r0, r7
 8018e6c:	f7fc fe88 	bl	8015b80 <uitoa>
 8018e70:	47a8      	blx	r5
                    hal.stream.write(")");
 8018e72:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8018e76:	480b      	ldr	r0, [pc, #44]	@ (8018ea4 <report_bitfield+0xcc>)
 8018e78:	4798      	blx	r3
 8018e7a:	e7c4      	b.n	8018e06 <report_bitfield+0x2e>
        free(s);
 8018e7c:	4648      	mov	r0, r9
 8018e7e:	f009 ff93 	bl	8022da8 <free>
}
 8018e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e86:	bf00      	nop
 8018e88:	0802c560 	.word	0x0802c560
 8018e8c:	08029db8 	.word	0x08029db8
 8018e90:	200018dc 	.word	0x200018dc
 8018e94:	0802c7e0 	.word	0x0802c7e0
 8018e98:	0802c170 	.word	0x0802c170
 8018e9c:	0802c154 	.word	0x0802c154
 8018ea0:	0802c178 	.word	0x0802c178
 8018ea4:	0802b6b8 	.word	0x0802b6b8

08018ea8 <cmp_setting_group_name>:
{
 8018ea8:	b508      	push	{r3, lr}
    return strcmp((*(setting_group_detail_t **)(a))->name, (*(setting_group_detail_t **)(b))->name);
 8018eaa:	6803      	ldr	r3, [r0, #0]
 8018eac:	680a      	ldr	r2, [r1, #0]
 8018eae:	6851      	ldr	r1, [r2, #4]
 8018eb0:	6858      	ldr	r0, [r3, #4]
 8018eb2:	f7ef f8c5 	bl	8008040 <strcmp>
}
 8018eb6:	bd08      	pop	{r3, pc}

08018eb8 <write_name>:
{
 8018eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eba:	4604      	mov	r4, r0
    char *q = hal.stream.write_n ? strchr(s, '?') : NULL;
 8018ebc:	4b10      	ldr	r3, [pc, #64]	@ (8018f00 <write_name+0x48>)
 8018ebe:	f8d3 50d8 	ldr.w	r5, [r3, #216]	@ 0xd8
 8018ec2:	b1bd      	cbz	r5, 8018ef4 <write_name+0x3c>
 8018ec4:	460f      	mov	r7, r1
 8018ec6:	213f      	movs	r1, #63	@ 0x3f
 8018ec8:	f00c f844 	bl	8024f54 <strchr>
    if(q) {
 8018ecc:	4606      	mov	r6, r0
 8018ece:	b188      	cbz	r0, 8018ef4 <write_name+0x3c>
        if(q != s)
 8018ed0:	4284      	cmp	r4, r0
 8018ed2:	d003      	beq.n	8018edc <write_name+0x24>
            hal.stream.write_n(s, q - s);
 8018ed4:	1b01      	subs	r1, r0, r4
 8018ed6:	b289      	uxth	r1, r1
 8018ed8:	4620      	mov	r0, r4
 8018eda:	47a8      	blx	r5
        hal.stream.write(uitoa(offset + 1));
 8018edc:	4c08      	ldr	r4, [pc, #32]	@ (8018f00 <write_name+0x48>)
 8018ede:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8018ee2:	1c78      	adds	r0, r7, #1
 8018ee4:	f7fc fe4c 	bl	8015b80 <uitoa>
 8018ee8:	47a8      	blx	r5
        hal.stream.write(q + 1);
 8018eea:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8018eee:	1c70      	adds	r0, r6, #1
 8018ef0:	4798      	blx	r3
 8018ef2:	e004      	b.n	8018efe <write_name+0x46>
        hal.stream.write(s);
 8018ef4:	4b02      	ldr	r3, [pc, #8]	@ (8018f00 <write_name+0x48>)
 8018ef6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018efa:	4620      	mov	r0, r4
 8018efc:	4798      	blx	r3
}
 8018efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f00:	200018dc 	.word	0x200018dc

08018f04 <report_settings_detail>:
{
 8018f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f08:	460c      	mov	r4, r1
 8018f0a:	4615      	mov	r5, r2
    uint_fast8_t suboffset = setting->flags.subgroups ? offset / setting->flags.increment : offset;
 8018f0c:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8018f10:	f013 0f04 	tst.w	r3, #4
 8018f14:	d004      	beq.n	8018f20 <report_settings_detail+0x1c>
 8018f16:	f3c3 06c3 	ubfx	r6, r3, #3, #4
 8018f1a:	fbb2 f6f6 	udiv	r6, r2, r6
 8018f1e:	e000      	b.n	8018f22 <report_settings_detail+0x1e>
 8018f20:	4616      	mov	r6, r2
    switch(format)
 8018f22:	2803      	cmp	r0, #3
 8018f24:	f200 82d3 	bhi.w	80194ce <report_settings_detail+0x5ca>
 8018f28:	e8df f010 	tbh	[pc, r0, lsl #1]
 8018f2c:	00040132 	.word	0x00040132
 8018f30:	01fa01c3 	.word	0x01fa01c3
                hal.stream.write(ASCII_EOL "$");
 8018f34:	4f81      	ldr	r7, [pc, #516]	@ (801913c <report_settings_detail+0x238>)
 8018f36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018f3a:	4881      	ldr	r0, [pc, #516]	@ (8019140 <report_settings_detail+0x23c>)
 8018f3c:	4798      	blx	r3
                hal.stream.write(uitoa(setting->id + offset));
 8018f3e:	f8d7 80b4 	ldr.w	r8, [r7, #180]	@ 0xb4
 8018f42:	8820      	ldrh	r0, [r4, #0]
 8018f44:	4428      	add	r0, r5
 8018f46:	f7fc fe1b 	bl	8015b80 <uitoa>
 8018f4a:	47c0      	blx	r8
                hal.stream.write(": ");
 8018f4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018f50:	487c      	ldr	r0, [pc, #496]	@ (8019144 <report_settings_detail+0x240>)
 8018f52:	4798      	blx	r3
                if(setting->group == Group_Axis0)
 8018f54:	78a3      	ldrb	r3, [r4, #2]
 8018f56:	2b2b      	cmp	r3, #43	@ 0x2b
 8018f58:	d010      	beq.n	8018f7c <report_settings_detail+0x78>
                write_name(setting->name, suboffset);
 8018f5a:	4631      	mov	r1, r6
 8018f5c:	6860      	ldr	r0, [r4, #4]
 8018f5e:	f7ff ffab 	bl	8018eb8 <write_name>
                switch(setting_datatype_to_external(setting->datatype)) {
 8018f62:	7b20      	ldrb	r0, [r4, #12]
 8018f64:	f004 fed3 	bl	801dd0e <setting_datatype_to_external>
 8018f68:	2809      	cmp	r0, #9
 8018f6a:	f200 8087 	bhi.w	801907c <report_settings_detail+0x178>
 8018f6e:	e8df f000 	tbb	[pc, r0]
 8018f72:	5d56      	.short	0x5d56
 8018f74:	850c7368 	.word	0x850c7368
 8018f78:	7e858585 	.word	0x7e858585
                    hal.stream.write(axis_letter[offset]);
 8018f7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018f80:	4a71      	ldr	r2, [pc, #452]	@ (8019148 <report_settings_detail+0x244>)
 8018f82:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018f86:	4798      	blx	r3
 8018f88:	e7e7      	b.n	8018f5a <report_settings_detail+0x56>
                        hal.stream.write(" as axismask");
 8018f8a:	4b6c      	ldr	r3, [pc, #432]	@ (801913c <report_settings_detail+0x238>)
 8018f8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018f90:	486e      	ldr	r0, [pc, #440]	@ (801914c <report_settings_detail+0x248>)
 8018f92:	4798      	blx	r3
                bool reboot_newline = false;
 8018f94:	2700      	movs	r7, #0
                if(setting->min_value && setting->max_value) {
 8018f96:	6963      	ldr	r3, [r4, #20]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d07e      	beq.n	801909a <report_settings_detail+0x196>
 8018f9c:	69a3      	ldr	r3, [r4, #24]
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d07b      	beq.n	801909a <report_settings_detail+0x196>
                    hal.stream.write(", range: ");
 8018fa2:	4e66      	ldr	r6, [pc, #408]	@ (801913c <report_settings_detail+0x238>)
 8018fa4:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018fa8:	4869      	ldr	r0, [pc, #420]	@ (8019150 <report_settings_detail+0x24c>)
 8018faa:	4798      	blx	r3
                    hal.stream.write(setting->min_value);
 8018fac:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018fb0:	6960      	ldr	r0, [r4, #20]
 8018fb2:	4798      	blx	r3
                    hal.stream.write(" - ");
 8018fb4:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018fb8:	4866      	ldr	r0, [pc, #408]	@ (8019154 <report_settings_detail+0x250>)
 8018fba:	4798      	blx	r3
                    hal.stream.write(setting->max_value);
 8018fbc:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018fc0:	69a0      	ldr	r0, [r4, #24]
 8018fc2:	4798      	blx	r3
                if(setting->flags.reboot_required)
 8018fc4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018fc8:	f013 0f01 	tst.w	r3, #1
 8018fcc:	d006      	beq.n	8018fdc <report_settings_detail+0xd8>
                    hal.stream.write(reboot_newline ? ASCII_EOL ASCII_EOL "Reboot required." : ", reboot required");
 8018fce:	4b5b      	ldr	r3, [pc, #364]	@ (801913c <report_settings_detail+0x238>)
 8018fd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018fd4:	2f00      	cmp	r7, #0
 8018fd6:	d07d      	beq.n	80190d4 <report_settings_detail+0x1d0>
 8018fd8:	485f      	ldr	r0, [pc, #380]	@ (8019158 <report_settings_detail+0x254>)
 8018fda:	4798      	blx	r3
                if(hal.stream.write_n) {
 8018fdc:	4b57      	ldr	r3, [pc, #348]	@ (801913c <report_settings_detail+0x238>)
 8018fde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	f000 8273 	beq.w	80194ce <report_settings_detail+0x5ca>
                    const char *description = setting_get_description((setting_id_t)(setting->id + offset));
 8018fe8:	8820      	ldrh	r0, [r4, #0]
 8018fea:	fa10 f085 	uxtah	r0, r0, r5
 8018fee:	b280      	uxth	r0, r0
 8018ff0:	f004 fdde 	bl	801dbb0 <setting_get_description>
                    if(description && *description != '\0') {
 8018ff4:	4606      	mov	r6, r0
 8018ff6:	2800      	cmp	r0, #0
 8018ff8:	f000 808c 	beq.w	8019114 <report_settings_detail+0x210>
 8018ffc:	7803      	ldrb	r3, [r0, #0]
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	f000 8088 	beq.w	8019114 <report_settings_detail+0x210>
                        hal.stream.write(ASCII_EOL);
 8019004:	4b4d      	ldr	r3, [pc, #308]	@ (801913c <report_settings_detail+0x238>)
 8019006:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801900a:	4854      	ldr	r0, [pc, #336]	@ (801915c <report_settings_detail+0x258>)
 801900c:	4798      	blx	r3
                        if((lf = strstr(description, "\\n"))) while(lf) {
 801900e:	4954      	ldr	r1, [pc, #336]	@ (8019160 <report_settings_detail+0x25c>)
 8019010:	4630      	mov	r0, r6
 8019012:	f00c f843 	bl	802509c <strstr>
 8019016:	4605      	mov	r5, r0
 8019018:	2800      	cmp	r0, #0
 801901a:	d16e      	bne.n	80190fa <report_settings_detail+0x1f6>
 801901c:	e06f      	b.n	80190fe <report_settings_detail+0x1fa>
                        hal.stream.write(" as boolean");
 801901e:	4b47      	ldr	r3, [pc, #284]	@ (801913c <report_settings_detail+0x238>)
 8019020:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019024:	484f      	ldr	r0, [pc, #316]	@ (8019164 <report_settings_detail+0x260>)
 8019026:	4798      	blx	r3
                bool reboot_newline = false;
 8019028:	2700      	movs	r7, #0
                        break;
 801902a:	e7b4      	b.n	8018f96 <report_settings_detail+0x92>
                        hal.stream.write(" as bitfield:");
 801902c:	4b43      	ldr	r3, [pc, #268]	@ (801913c <report_settings_detail+0x238>)
 801902e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019032:	484d      	ldr	r0, [pc, #308]	@ (8019168 <report_settings_detail+0x264>)
 8019034:	4798      	blx	r3
                        report_bitfield(setting->format, true);
 8019036:	2101      	movs	r1, #1
 8019038:	6920      	ldr	r0, [r4, #16]
 801903a:	f7ff fecd 	bl	8018dd8 <report_bitfield>
                        reboot_newline = true;
 801903e:	2701      	movs	r7, #1
                        break;
 8019040:	e7a9      	b.n	8018f96 <report_settings_detail+0x92>
                        hal.stream.write(" as bitfield where setting bit 0 enables the rest:");
 8019042:	4b3e      	ldr	r3, [pc, #248]	@ (801913c <report_settings_detail+0x238>)
 8019044:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019048:	4848      	ldr	r0, [pc, #288]	@ (801916c <report_settings_detail+0x268>)
 801904a:	4798      	blx	r3
                        report_bitfield(setting->format, true);
 801904c:	2101      	movs	r1, #1
 801904e:	6920      	ldr	r0, [r4, #16]
 8019050:	f7ff fec2 	bl	8018dd8 <report_bitfield>
                        reboot_newline = true;
 8019054:	2701      	movs	r7, #1
                        break;
 8019056:	e79e      	b.n	8018f96 <report_settings_detail+0x92>
                        hal.stream.write(":");
 8019058:	4b38      	ldr	r3, [pc, #224]	@ (801913c <report_settings_detail+0x238>)
 801905a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801905e:	4844      	ldr	r0, [pc, #272]	@ (8019170 <report_settings_detail+0x26c>)
 8019060:	4798      	blx	r3
                        report_bitfield(setting->format, false);
 8019062:	2100      	movs	r1, #0
 8019064:	6920      	ldr	r0, [r4, #16]
 8019066:	f7ff feb7 	bl	8018dd8 <report_bitfield>
                        reboot_newline = true;
 801906a:	2701      	movs	r7, #1
                        break;
 801906c:	e793      	b.n	8018f96 <report_settings_detail+0x92>
                        hal.stream.write(" as IP address");
 801906e:	4b33      	ldr	r3, [pc, #204]	@ (801913c <report_settings_detail+0x238>)
 8019070:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019074:	483f      	ldr	r0, [pc, #252]	@ (8019174 <report_settings_detail+0x270>)
 8019076:	4798      	blx	r3
                bool reboot_newline = false;
 8019078:	2700      	movs	r7, #0
                        break;
 801907a:	e78c      	b.n	8018f96 <report_settings_detail+0x92>
                        if(setting->unit) {
 801907c:	68a3      	ldr	r3, [r4, #8]
 801907e:	b153      	cbz	r3, 8019096 <report_settings_detail+0x192>
                            hal.stream.write(" in ");
 8019080:	4e2e      	ldr	r6, [pc, #184]	@ (801913c <report_settings_detail+0x238>)
 8019082:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8019086:	483c      	ldr	r0, [pc, #240]	@ (8019178 <report_settings_detail+0x274>)
 8019088:	4798      	blx	r3
                            hal.stream.write(setting->unit);
 801908a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801908e:	68a0      	ldr	r0, [r4, #8]
 8019090:	4798      	blx	r3
                bool reboot_newline = false;
 8019092:	2700      	movs	r7, #0
 8019094:	e77f      	b.n	8018f96 <report_settings_detail+0x92>
 8019096:	2700      	movs	r7, #0
 8019098:	e77d      	b.n	8018f96 <report_settings_detail+0x92>
                } else if(!setting_is_list(setting)) {
 801909a:	4620      	mov	r0, r4
 801909c:	f004 fe3e 	bl	801dd1c <setting_is_list>
 80190a0:	2800      	cmp	r0, #0
 80190a2:	d18f      	bne.n	8018fc4 <report_settings_detail+0xc0>
                    if(setting->min_value) {
 80190a4:	6963      	ldr	r3, [r4, #20]
 80190a6:	b143      	cbz	r3, 80190ba <report_settings_detail+0x1b6>
                        hal.stream.write(", min: ");
 80190a8:	4e24      	ldr	r6, [pc, #144]	@ (801913c <report_settings_detail+0x238>)
 80190aa:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80190ae:	4833      	ldr	r0, [pc, #204]	@ (801917c <report_settings_detail+0x278>)
 80190b0:	4798      	blx	r3
                        hal.stream.write(setting->min_value);
 80190b2:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80190b6:	6960      	ldr	r0, [r4, #20]
 80190b8:	4798      	blx	r3
                    if(setting->max_value) {
 80190ba:	69a3      	ldr	r3, [r4, #24]
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d081      	beq.n	8018fc4 <report_settings_detail+0xc0>
                        hal.stream.write(", max: ");
 80190c0:	4e1e      	ldr	r6, [pc, #120]	@ (801913c <report_settings_detail+0x238>)
 80190c2:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80190c6:	482e      	ldr	r0, [pc, #184]	@ (8019180 <report_settings_detail+0x27c>)
 80190c8:	4798      	blx	r3
                        hal.stream.write(setting->max_value);
 80190ca:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80190ce:	69a0      	ldr	r0, [r4, #24]
 80190d0:	4798      	blx	r3
 80190d2:	e777      	b.n	8018fc4 <report_settings_detail+0xc0>
                    hal.stream.write(reboot_newline ? ASCII_EOL ASCII_EOL "Reboot required." : ", reboot required");
 80190d4:	482b      	ldr	r0, [pc, #172]	@ (8019184 <report_settings_detail+0x280>)
 80190d6:	e780      	b.n	8018fda <report_settings_detail+0xd6>
                            hal.stream.write(ASCII_EOL);
 80190d8:	4f18      	ldr	r7, [pc, #96]	@ (801913c <report_settings_detail+0x238>)
 80190da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80190de:	481f      	ldr	r0, [pc, #124]	@ (801915c <report_settings_detail+0x258>)
 80190e0:	4798      	blx	r3
                            hal.stream.write_n(description, lf - description);
 80190e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80190e6:	1ba9      	subs	r1, r5, r6
 80190e8:	b289      	uxth	r1, r1
 80190ea:	4630      	mov	r0, r6
 80190ec:	4798      	blx	r3
                            description = lf + 2;
 80190ee:	1cae      	adds	r6, r5, #2
                            lf = strstr(description, "\\n");
 80190f0:	491b      	ldr	r1, [pc, #108]	@ (8019160 <report_settings_detail+0x25c>)
 80190f2:	4630      	mov	r0, r6
 80190f4:	f00b ffd2 	bl	802509c <strstr>
 80190f8:	4605      	mov	r5, r0
                        if((lf = strstr(description, "\\n"))) while(lf) {
 80190fa:	2d00      	cmp	r5, #0
 80190fc:	d1ec      	bne.n	80190d8 <report_settings_detail+0x1d4>
                        if(*description != '\0') {
 80190fe:	7833      	ldrb	r3, [r6, #0]
 8019100:	b143      	cbz	r3, 8019114 <report_settings_detail+0x210>
                            hal.stream.write(ASCII_EOL);
 8019102:	4d0e      	ldr	r5, [pc, #56]	@ (801913c <report_settings_detail+0x238>)
 8019104:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019108:	4814      	ldr	r0, [pc, #80]	@ (801915c <report_settings_detail+0x258>)
 801910a:	4798      	blx	r3
                            hal.stream.write(description);
 801910c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019110:	4630      	mov	r0, r6
 8019112:	4798      	blx	r3
                    if(setting->flags.reboot_required) {
 8019114:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019118:	f013 0f01 	tst.w	r3, #1
 801911c:	f000 81d7 	beq.w	80194ce <report_settings_detail+0x5ca>
                        if(description && *description != '\0')
 8019120:	b136      	cbz	r6, 8019130 <report_settings_detail+0x22c>
 8019122:	7833      	ldrb	r3, [r6, #0]
 8019124:	b123      	cbz	r3, 8019130 <report_settings_detail+0x22c>
                            hal.stream.write(ASCII_EOL ASCII_EOL);
 8019126:	4b05      	ldr	r3, [pc, #20]	@ (801913c <report_settings_detail+0x238>)
 8019128:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801912c:	4816      	ldr	r0, [pc, #88]	@ (8019188 <report_settings_detail+0x284>)
 801912e:	4798      	blx	r3
                        hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + 4);
 8019130:	4b02      	ldr	r3, [pc, #8]	@ (801913c <report_settings_detail+0x238>)
 8019132:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019136:	4815      	ldr	r0, [pc, #84]	@ (801918c <report_settings_detail+0x288>)
 8019138:	4798      	blx	r3
 801913a:	e1c8      	b.n	80194ce <report_settings_detail+0x5ca>
 801913c:	200018dc 	.word	0x200018dc
 8019140:	0802c1fc 	.word	0x0802c1fc
 8019144:	0802c3bc 	.word	0x0802c3bc
 8019148:	0802bf9c 	.word	0x0802bf9c
 801914c:	0802c200 	.word	0x0802c200
 8019150:	0802c278 	.word	0x0802c278
 8019154:	0802c154 	.word	0x0802c154
 8019158:	0802c17c 	.word	0x0802c17c
 801915c:	0802c7e0 	.word	0x0802c7e0
 8019160:	0802c294 	.word	0x0802c294
 8019164:	0802c210 	.word	0x0802c210
 8019168:	0802c21c 	.word	0x0802c21c
 801916c:	0802c22c 	.word	0x0802c22c
 8019170:	0802c49c 	.word	0x0802c49c
 8019174:	0802c260 	.word	0x0802c260
 8019178:	0802c270 	.word	0x0802c270
 801917c:	0802c284 	.word	0x0802c284
 8019180:	0802c28c 	.word	0x0802c28c
 8019184:	0802c194 	.word	0x0802c194
 8019188:	0802c298 	.word	0x0802c298
 801918c:	0802c1ac 	.word	0x0802c1ac
            hal.stream.write("[SETTING:");
 8019190:	4f8f      	ldr	r7, [pc, #572]	@ (80193d0 <report_settings_detail+0x4cc>)
 8019192:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019196:	488f      	ldr	r0, [pc, #572]	@ (80193d4 <report_settings_detail+0x4d0>)
 8019198:	4798      	blx	r3
            hal.stream.write(uitoa(setting->id + offset));
 801919a:	f8d7 80b4 	ldr.w	r8, [r7, #180]	@ 0xb4
 801919e:	8820      	ldrh	r0, [r4, #0]
 80191a0:	4428      	add	r0, r5
 80191a2:	f7fc fced 	bl	8015b80 <uitoa>
 80191a6:	47c0      	blx	r8
            hal.stream.write(vbar);
 80191a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80191ac:	488a      	ldr	r0, [pc, #552]	@ (80193d8 <report_settings_detail+0x4d4>)
 80191ae:	4798      	blx	r3
            hal.stream.write(uitoa(setting->group + (setting->flags.subgroups ? suboffset : 0)));
 80191b0:	f8d7 70b4 	ldr.w	r7, [r7, #180]	@ 0xb4
 80191b4:	78a0      	ldrb	r0, [r4, #2]
 80191b6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80191ba:	f013 0f04 	tst.w	r3, #4
 80191be:	d06e      	beq.n	801929e <report_settings_detail+0x39a>
 80191c0:	4633      	mov	r3, r6
 80191c2:	4418      	add	r0, r3
 80191c4:	f7fc fcdc 	bl	8015b80 <uitoa>
 80191c8:	47b8      	blx	r7
            hal.stream.write(vbar);
 80191ca:	4b81      	ldr	r3, [pc, #516]	@ (80193d0 <report_settings_detail+0x4cc>)
 80191cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80191d0:	4881      	ldr	r0, [pc, #516]	@ (80193d8 <report_settings_detail+0x4d4>)
 80191d2:	4798      	blx	r3
            if(setting->group == Group_Axis0)
 80191d4:	78a3      	ldrb	r3, [r4, #2]
 80191d6:	2b2b      	cmp	r3, #43	@ 0x2b
 80191d8:	d063      	beq.n	80192a2 <report_settings_detail+0x39e>
            write_name(setting->name, suboffset);
 80191da:	4631      	mov	r1, r6
 80191dc:	6860      	ldr	r0, [r4, #4]
 80191de:	f7ff fe6b 	bl	8018eb8 <write_name>
            hal.stream.write(vbar);
 80191e2:	4b7b      	ldr	r3, [pc, #492]	@ (80193d0 <report_settings_detail+0x4cc>)
 80191e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80191e8:	487b      	ldr	r0, [pc, #492]	@ (80193d8 <report_settings_detail+0x4d4>)
 80191ea:	4798      	blx	r3
            if(setting->unit)
 80191ec:	68a0      	ldr	r0, [r4, #8]
 80191ee:	b118      	cbz	r0, 80191f8 <report_settings_detail+0x2f4>
                hal.stream.write(setting->unit);
 80191f0:	4b77      	ldr	r3, [pc, #476]	@ (80193d0 <report_settings_detail+0x4cc>)
 80191f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80191f6:	4798      	blx	r3
            hal.stream.write(vbar);
 80191f8:	4d75      	ldr	r5, [pc, #468]	@ (80193d0 <report_settings_detail+0x4cc>)
 80191fa:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80191fe:	4e76      	ldr	r6, [pc, #472]	@ (80193d8 <report_settings_detail+0x4d4>)
 8019200:	4630      	mov	r0, r6
 8019202:	4798      	blx	r3
            hal.stream.write(uitoa(setting_datatype_to_external(setting->datatype)));
 8019204:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 8019208:	7b20      	ldrb	r0, [r4, #12]
 801920a:	f004 fd80 	bl	801dd0e <setting_datatype_to_external>
 801920e:	f7fc fcb7 	bl	8015b80 <uitoa>
 8019212:	47b8      	blx	r7
            hal.stream.write(vbar);
 8019214:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019218:	4630      	mov	r0, r6
 801921a:	4798      	blx	r3
            if(setting->format)
 801921c:	6920      	ldr	r0, [r4, #16]
 801921e:	b110      	cbz	r0, 8019226 <report_settings_detail+0x322>
                hal.stream.write(setting->format);
 8019220:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019224:	4798      	blx	r3
            hal.stream.write(vbar);
 8019226:	4b6a      	ldr	r3, [pc, #424]	@ (80193d0 <report_settings_detail+0x4cc>)
 8019228:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801922c:	486a      	ldr	r0, [pc, #424]	@ (80193d8 <report_settings_detail+0x4d4>)
 801922e:	4798      	blx	r3
            if(setting->min_value && !setting_is_list(setting))
 8019230:	6963      	ldr	r3, [r4, #20]
 8019232:	b143      	cbz	r3, 8019246 <report_settings_detail+0x342>
 8019234:	4620      	mov	r0, r4
 8019236:	f004 fd71 	bl	801dd1c <setting_is_list>
 801923a:	b920      	cbnz	r0, 8019246 <report_settings_detail+0x342>
                hal.stream.write(setting->min_value);
 801923c:	4b64      	ldr	r3, [pc, #400]	@ (80193d0 <report_settings_detail+0x4cc>)
 801923e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019242:	6960      	ldr	r0, [r4, #20]
 8019244:	4798      	blx	r3
            hal.stream.write(vbar);
 8019246:	4b62      	ldr	r3, [pc, #392]	@ (80193d0 <report_settings_detail+0x4cc>)
 8019248:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801924c:	4862      	ldr	r0, [pc, #392]	@ (80193d8 <report_settings_detail+0x4d4>)
 801924e:	4798      	blx	r3
            if(setting->max_value)
 8019250:	69a0      	ldr	r0, [r4, #24]
 8019252:	b118      	cbz	r0, 801925c <report_settings_detail+0x358>
                hal.stream.write(setting->max_value);
 8019254:	4b5e      	ldr	r3, [pc, #376]	@ (80193d0 <report_settings_detail+0x4cc>)
 8019256:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801925a:	4798      	blx	r3
            hal.stream.write(vbar);
 801925c:	4d5c      	ldr	r5, [pc, #368]	@ (80193d0 <report_settings_detail+0x4cc>)
 801925e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019262:	4e5d      	ldr	r6, [pc, #372]	@ (80193d8 <report_settings_detail+0x4d4>)
 8019264:	4630      	mov	r0, r6
 8019266:	4798      	blx	r3
            hal.stream.write(uitoa(setting->flags.reboot_required));
 8019268:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 801926c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8019270:	f000 0001 	and.w	r0, r0, #1
 8019274:	f7fc fc84 	bl	8015b80 <uitoa>
 8019278:	47b8      	blx	r7
            hal.stream.write(vbar);
 801927a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801927e:	4630      	mov	r0, r6
 8019280:	4798      	blx	r3
            hal.stream.write(uitoa(setting->flags.allow_null));
 8019282:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8019286:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801928a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 801928e:	f7fc fc77 	bl	8015b80 <uitoa>
 8019292:	47b0      	blx	r6
            hal.stream.write("]");
 8019294:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019298:	4850      	ldr	r0, [pc, #320]	@ (80193dc <report_settings_detail+0x4d8>)
 801929a:	4798      	blx	r3
            break;
 801929c:	e117      	b.n	80194ce <report_settings_detail+0x5ca>
            hal.stream.write(uitoa(setting->group + (setting->flags.subgroups ? suboffset : 0)));
 801929e:	2300      	movs	r3, #0
 80192a0:	e78f      	b.n	80191c2 <report_settings_detail+0x2be>
                hal.stream.write(axis_letter[offset]);
 80192a2:	4b4b      	ldr	r3, [pc, #300]	@ (80193d0 <report_settings_detail+0x4cc>)
 80192a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80192a8:	4a4d      	ldr	r2, [pc, #308]	@ (80193e0 <report_settings_detail+0x4dc>)
 80192aa:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80192ae:	4798      	blx	r3
 80192b0:	e793      	b.n	80191da <report_settings_detail+0x2d6>
                write_quoted(uitoa(setting->id + offset), ",");
 80192b2:	8820      	ldrh	r0, [r4, #0]
 80192b4:	4428      	add	r0, r5
 80192b6:	f7fc fc63 	bl	8015b80 <uitoa>
 80192ba:	494a      	ldr	r1, [pc, #296]	@ (80193e4 <report_settings_detail+0x4e0>)
 80192bc:	f7ff f9c4 	bl	8018648 <write_quoted>
                hal.stream.write("\"");
 80192c0:	4b43      	ldr	r3, [pc, #268]	@ (80193d0 <report_settings_detail+0x4cc>)
 80192c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80192c6:	4848      	ldr	r0, [pc, #288]	@ (80193e8 <report_settings_detail+0x4e4>)
 80192c8:	4798      	blx	r3
                if(setting->group == Group_Axis0)
 80192ca:	78a3      	ldrb	r3, [r4, #2]
 80192cc:	2b2b      	cmp	r3, #43	@ 0x2b
 80192ce:	d018      	beq.n	8019302 <report_settings_detail+0x3fe>
                write_name(setting->name, suboffset);
 80192d0:	4631      	mov	r1, r6
 80192d2:	6860      	ldr	r0, [r4, #4]
 80192d4:	f7ff fdf0 	bl	8018eb8 <write_name>
                hal.stream.write("\",");
 80192d8:	4b3d      	ldr	r3, [pc, #244]	@ (80193d0 <report_settings_detail+0x4cc>)
 80192da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80192de:	4843      	ldr	r0, [pc, #268]	@ (80193ec <report_settings_detail+0x4e8>)
 80192e0:	4798      	blx	r3
                if(setting->unit) {
 80192e2:	68a0      	ldr	r0, [r4, #8]
 80192e4:	b1a8      	cbz	r0, 8019312 <report_settings_detail+0x40e>
                    write_quoted(setting->unit, ",");
 80192e6:	493f      	ldr	r1, [pc, #252]	@ (80193e4 <report_settings_detail+0x4e0>)
 80192e8:	f7ff f9ae 	bl	8018648 <write_quoted>
                const char *description = setting_get_description((setting_id_t)(setting->id + offset));
 80192ec:	8820      	ldrh	r0, [r4, #0]
 80192ee:	fa10 f085 	uxtah	r0, r0, r5
 80192f2:	b280      	uxth	r0, r0
 80192f4:	f004 fc5c 	bl	801dbb0 <setting_get_description>
                write_quoted(description ? description : "", ",");
 80192f8:	b180      	cbz	r0, 801931c <report_settings_detail+0x418>
 80192fa:	493a      	ldr	r1, [pc, #232]	@ (80193e4 <report_settings_detail+0x4e0>)
 80192fc:	f7ff f9a4 	bl	8018648 <write_quoted>
            break;
 8019300:	e0e5      	b.n	80194ce <report_settings_detail+0x5ca>
                    hal.stream.write(axis_letter[offset]);
 8019302:	4b33      	ldr	r3, [pc, #204]	@ (80193d0 <report_settings_detail+0x4cc>)
 8019304:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019308:	4a35      	ldr	r2, [pc, #212]	@ (80193e0 <report_settings_detail+0x4dc>)
 801930a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801930e:	4798      	blx	r3
 8019310:	e7de      	b.n	80192d0 <report_settings_detail+0x3cc>
                    write_quoted("", ",");
 8019312:	4934      	ldr	r1, [pc, #208]	@ (80193e4 <report_settings_detail+0x4e0>)
 8019314:	4836      	ldr	r0, [pc, #216]	@ (80193f0 <report_settings_detail+0x4ec>)
 8019316:	f7ff f997 	bl	8018648 <write_quoted>
 801931a:	e7e7      	b.n	80192ec <report_settings_detail+0x3e8>
                write_quoted(description ? description : "", ",");
 801931c:	4834      	ldr	r0, [pc, #208]	@ (80193f0 <report_settings_detail+0x4ec>)
 801931e:	e7ec      	b.n	80192fa <report_settings_detail+0x3f6>
                hal.stream.write(uitoa(setting->id + offset));
 8019320:	4f2b      	ldr	r7, [pc, #172]	@ (80193d0 <report_settings_detail+0x4cc>)
 8019322:	f8d7 80b4 	ldr.w	r8, [r7, #180]	@ 0xb4
 8019326:	8820      	ldrh	r0, [r4, #0]
 8019328:	4428      	add	r0, r5
 801932a:	f7fc fc29 	bl	8015b80 <uitoa>
 801932e:	47c0      	blx	r8
                hal.stream.write("\t");
 8019330:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019334:	482f      	ldr	r0, [pc, #188]	@ (80193f4 <report_settings_detail+0x4f0>)
 8019336:	4798      	blx	r3
                if(setting->group == Group_Axis0)
 8019338:	78a3      	ldrb	r3, [r4, #2]
 801933a:	2b2b      	cmp	r3, #43	@ 0x2b
 801933c:	d024      	beq.n	8019388 <report_settings_detail+0x484>
                write_name(setting->name, suboffset);
 801933e:	4631      	mov	r1, r6
 8019340:	6860      	ldr	r0, [r4, #4]
 8019342:	f7ff fdb9 	bl	8018eb8 <write_name>
                hal.stream.write("\t");
 8019346:	4b22      	ldr	r3, [pc, #136]	@ (80193d0 <report_settings_detail+0x4cc>)
 8019348:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801934c:	4829      	ldr	r0, [pc, #164]	@ (80193f4 <report_settings_detail+0x4f0>)
 801934e:	4798      	blx	r3
                if(setting->unit)
 8019350:	68a0      	ldr	r0, [r4, #8]
 8019352:	b300      	cbz	r0, 8019396 <report_settings_detail+0x492>
                    hal.stream.write(setting->unit);
 8019354:	4b1e      	ldr	r3, [pc, #120]	@ (80193d0 <report_settings_detail+0x4cc>)
 8019356:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801935a:	4798      	blx	r3
                hal.stream.write("\t");
 801935c:	4b1c      	ldr	r3, [pc, #112]	@ (80193d0 <report_settings_detail+0x4cc>)
 801935e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019362:	4824      	ldr	r0, [pc, #144]	@ (80193f4 <report_settings_detail+0x4f0>)
 8019364:	4798      	blx	r3
                switch(setting_datatype_to_external(setting->datatype)) {
 8019366:	7b20      	ldrb	r0, [r4, #12]
 8019368:	f004 fcd1 	bl	801dd0e <setting_datatype_to_external>
 801936c:	2809      	cmp	r0, #9
 801936e:	d84e      	bhi.n	801940e <report_settings_detail+0x50a>
 8019370:	e8df f010 	tbh	[pc, r0, lsl #1]
 8019374:	00c000ba 	.word	0x00c000ba
 8019378:	00cc00c6 	.word	0x00cc00c6
 801937c:	004800c0 	.word	0x004800c0
 8019380:	00d800b4 	.word	0x00d800b4
 8019384:	00d200de 	.word	0x00d200de
                    hal.stream.write(axis_letter[offset]);
 8019388:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801938c:	4a14      	ldr	r2, [pc, #80]	@ (80193e0 <report_settings_detail+0x4dc>)
 801938e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8019392:	4798      	blx	r3
 8019394:	e7d3      	b.n	801933e <report_settings_detail+0x43a>
                else if(setting->datatype == Format_AxisMask || setting->datatype == Format_Bitfield || setting->datatype == Format_XBitfield)
 8019396:	7b23      	ldrb	r3, [r4, #12]
 8019398:	2b04      	cmp	r3, #4
 801939a:	d00a      	beq.n	80193b2 <report_settings_detail+0x4ae>
 801939c:	2b01      	cmp	r3, #1
 801939e:	d008      	beq.n	80193b2 <report_settings_detail+0x4ae>
 80193a0:	2b02      	cmp	r3, #2
 80193a2:	d006      	beq.n	80193b2 <report_settings_detail+0x4ae>
                else if(setting->datatype == Format_Bool)
 80193a4:	b95b      	cbnz	r3, 80193be <report_settings_detail+0x4ba>
                    hal.stream.write("boolean");
 80193a6:	4b0a      	ldr	r3, [pc, #40]	@ (80193d0 <report_settings_detail+0x4cc>)
 80193a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80193ac:	4812      	ldr	r0, [pc, #72]	@ (80193f8 <report_settings_detail+0x4f4>)
 80193ae:	4798      	blx	r3
 80193b0:	e7d4      	b.n	801935c <report_settings_detail+0x458>
                    hal.stream.write("mask");
 80193b2:	4b07      	ldr	r3, [pc, #28]	@ (80193d0 <report_settings_detail+0x4cc>)
 80193b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80193b8:	4810      	ldr	r0, [pc, #64]	@ (80193fc <report_settings_detail+0x4f8>)
 80193ba:	4798      	blx	r3
 80193bc:	e7ce      	b.n	801935c <report_settings_detail+0x458>
                else if(setting->datatype == Format_RadioButtons)
 80193be:	2b03      	cmp	r3, #3
 80193c0:	d1cc      	bne.n	801935c <report_settings_detail+0x458>
                    hal.stream.write("integer");
 80193c2:	4b03      	ldr	r3, [pc, #12]	@ (80193d0 <report_settings_detail+0x4cc>)
 80193c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80193c8:	480d      	ldr	r0, [pc, #52]	@ (8019400 <report_settings_detail+0x4fc>)
 80193ca:	4798      	blx	r3
 80193cc:	e7c6      	b.n	801935c <report_settings_detail+0x458>
 80193ce:	bf00      	nop
 80193d0:	200018dc 	.word	0x200018dc
 80193d4:	0802c2a0 	.word	0x0802c2a0
 80193d8:	0802c95c 	.word	0x0802c95c
 80193dc:	0802c2ac 	.word	0x0802c2ac
 80193e0:	0802bf9c 	.word	0x0802bf9c
 80193e4:	0802c560 	.word	0x0802c560
 80193e8:	0802c0f8 	.word	0x0802c0f8
 80193ec:	0802c2b0 	.word	0x0802c2b0
 80193f0:	0802c29c 	.word	0x0802c29c
 80193f4:	0802c2b4 	.word	0x0802c2b4
 80193f8:	0802c214 	.word	0x0802c214
 80193fc:	0802c208 	.word	0x0802c208
 8019400:	0802c2b8 	.word	0x0802c2b8
                        hal.stream.write("integer");
 8019404:	4b55      	ldr	r3, [pc, #340]	@ (801955c <report_settings_detail+0x658>)
 8019406:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801940a:	4855      	ldr	r0, [pc, #340]	@ (8019560 <report_settings_detail+0x65c>)
 801940c:	4798      	blx	r3
                hal.stream.write("\t");
 801940e:	4b53      	ldr	r3, [pc, #332]	@ (801955c <report_settings_detail+0x658>)
 8019410:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019414:	4853      	ldr	r0, [pc, #332]	@ (8019564 <report_settings_detail+0x660>)
 8019416:	4798      	blx	r3
                if(setting->format)
 8019418:	6920      	ldr	r0, [r4, #16]
 801941a:	2800      	cmp	r0, #0
 801941c:	f000 808e 	beq.w	801953c <report_settings_detail+0x638>
                    hal.stream.write(setting->format);
 8019420:	4b4e      	ldr	r3, [pc, #312]	@ (801955c <report_settings_detail+0x658>)
 8019422:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019426:	4798      	blx	r3
                hal.stream.write("\t");
 8019428:	4e4c      	ldr	r6, [pc, #304]	@ (801955c <report_settings_detail+0x658>)
 801942a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801942e:	484d      	ldr	r0, [pc, #308]	@ (8019564 <report_settings_detail+0x660>)
 8019430:	4798      	blx	r3
                const char *description = setting_get_description((setting_id_t)(setting->id + offset));
 8019432:	8823      	ldrh	r3, [r4, #0]
 8019434:	fa13 f085 	uxtah	r0, r3, r5
 8019438:	b280      	uxth	r0, r0
 801943a:	f004 fbb9 	bl	801dbb0 <setting_get_description>
                hal.stream.write(description ? description : "");
 801943e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8019442:	4605      	mov	r5, r0
 8019444:	2800      	cmp	r0, #0
 8019446:	f000 8083 	beq.w	8019550 <report_settings_detail+0x64c>
 801944a:	4798      	blx	r3
                if(setting->flags.reboot_required)
 801944c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019450:	f013 0f01 	tst.w	r3, #1
 8019454:	d009      	beq.n	801946a <report_settings_detail+0x566>
                    hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + (description && *description != '\0' ? 0 : 4));
 8019456:	4b41      	ldr	r3, [pc, #260]	@ (801955c <report_settings_detail+0x658>)
 8019458:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801945c:	2d00      	cmp	r5, #0
 801945e:	d079      	beq.n	8019554 <report_settings_detail+0x650>
 8019460:	782a      	ldrb	r2, [r5, #0]
 8019462:	2a00      	cmp	r2, #0
 8019464:	d178      	bne.n	8019558 <report_settings_detail+0x654>
 8019466:	4840      	ldr	r0, [pc, #256]	@ (8019568 <report_settings_detail+0x664>)
 8019468:	4798      	blx	r3
                hal.stream.write("\t");
 801946a:	4b3c      	ldr	r3, [pc, #240]	@ (801955c <report_settings_detail+0x658>)
 801946c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019470:	483c      	ldr	r0, [pc, #240]	@ (8019564 <report_settings_detail+0x660>)
 8019472:	4798      	blx	r3
                if(setting->min_value)
 8019474:	6960      	ldr	r0, [r4, #20]
 8019476:	b118      	cbz	r0, 8019480 <report_settings_detail+0x57c>
                    hal.stream.write(setting->min_value);
 8019478:	4b38      	ldr	r3, [pc, #224]	@ (801955c <report_settings_detail+0x658>)
 801947a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801947e:	4798      	blx	r3
                hal.stream.write("\t");
 8019480:	4b36      	ldr	r3, [pc, #216]	@ (801955c <report_settings_detail+0x658>)
 8019482:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019486:	4837      	ldr	r0, [pc, #220]	@ (8019564 <report_settings_detail+0x660>)
 8019488:	4798      	blx	r3
                if(setting->max_value)
 801948a:	69a0      	ldr	r0, [r4, #24]
 801948c:	b118      	cbz	r0, 8019496 <report_settings_detail+0x592>
                    hal.stream.write(setting->max_value);
 801948e:	4b33      	ldr	r3, [pc, #204]	@ (801955c <report_settings_detail+0x658>)
 8019490:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019494:	4798      	blx	r3
                hal.stream.write("\t");
 8019496:	4d31      	ldr	r5, [pc, #196]	@ (801955c <report_settings_detail+0x658>)
 8019498:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801949c:	4e31      	ldr	r6, [pc, #196]	@ (8019564 <report_settings_detail+0x660>)
 801949e:	4630      	mov	r0, r6
 80194a0:	4798      	blx	r3
                hal.stream.write(uitoa(setting->flags.reboot_required));
 80194a2:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 80194a6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80194aa:	f000 0001 	and.w	r0, r0, #1
 80194ae:	f7fc fb67 	bl	8015b80 <uitoa>
 80194b2:	47b8      	blx	r7
                hal.stream.write("\t");
 80194b4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80194b8:	4630      	mov	r0, r6
 80194ba:	4798      	blx	r3
                hal.stream.write(uitoa(setting->flags.allow_null));
 80194bc:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 80194c0:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80194c4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80194c8:	f7fc fb5a 	bl	8015b80 <uitoa>
 80194cc:	47a8      	blx	r5
    hal.stream.write(ASCII_EOL);
 80194ce:	4b23      	ldr	r3, [pc, #140]	@ (801955c <report_settings_detail+0x658>)
 80194d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80194d4:	4825      	ldr	r0, [pc, #148]	@ (801956c <report_settings_detail+0x668>)
 80194d6:	4798      	blx	r3
}
 80194d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        hal.stream.write("float");
 80194dc:	4b1f      	ldr	r3, [pc, #124]	@ (801955c <report_settings_detail+0x658>)
 80194de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80194e2:	4823      	ldr	r0, [pc, #140]	@ (8019570 <report_settings_detail+0x66c>)
 80194e4:	4798      	blx	r3
                        break;
 80194e6:	e792      	b.n	801940e <report_settings_detail+0x50a>
                        hal.stream.write("bool");
 80194e8:	4b1c      	ldr	r3, [pc, #112]	@ (801955c <report_settings_detail+0x658>)
 80194ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80194ee:	4821      	ldr	r0, [pc, #132]	@ (8019574 <report_settings_detail+0x670>)
 80194f0:	4798      	blx	r3
                        break;
 80194f2:	e78c      	b.n	801940e <report_settings_detail+0x50a>
                        hal.stream.write("bitfield");
 80194f4:	4b19      	ldr	r3, [pc, #100]	@ (801955c <report_settings_detail+0x658>)
 80194f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80194fa:	481f      	ldr	r0, [pc, #124]	@ (8019578 <report_settings_detail+0x674>)
 80194fc:	4798      	blx	r3
                        break;
 80194fe:	e786      	b.n	801940e <report_settings_detail+0x50a>
                        hal.stream.write("xbitfield");
 8019500:	4b16      	ldr	r3, [pc, #88]	@ (801955c <report_settings_detail+0x658>)
 8019502:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019506:	481d      	ldr	r0, [pc, #116]	@ (801957c <report_settings_detail+0x678>)
 8019508:	4798      	blx	r3
                        break;
 801950a:	e780      	b.n	801940e <report_settings_detail+0x50a>
                        hal.stream.write("radiobuttons");
 801950c:	4b13      	ldr	r3, [pc, #76]	@ (801955c <report_settings_detail+0x658>)
 801950e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019512:	481b      	ldr	r0, [pc, #108]	@ (8019580 <report_settings_detail+0x67c>)
 8019514:	4798      	blx	r3
                        break;
 8019516:	e77a      	b.n	801940e <report_settings_detail+0x50a>
                        hal.stream.write("ipv4");
 8019518:	4b10      	ldr	r3, [pc, #64]	@ (801955c <report_settings_detail+0x658>)
 801951a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801951e:	4819      	ldr	r0, [pc, #100]	@ (8019584 <report_settings_detail+0x680>)
 8019520:	4798      	blx	r3
                        break;
 8019522:	e774      	b.n	801940e <report_settings_detail+0x50a>
                        hal.stream.write("string");
 8019524:	4b0d      	ldr	r3, [pc, #52]	@ (801955c <report_settings_detail+0x658>)
 8019526:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801952a:	4817      	ldr	r0, [pc, #92]	@ (8019588 <report_settings_detail+0x684>)
 801952c:	4798      	blx	r3
                        break;
 801952e:	e76e      	b.n	801940e <report_settings_detail+0x50a>
                        hal.stream.write("password");
 8019530:	4b0a      	ldr	r3, [pc, #40]	@ (801955c <report_settings_detail+0x658>)
 8019532:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019536:	4815      	ldr	r0, [pc, #84]	@ (801958c <report_settings_detail+0x688>)
 8019538:	4798      	blx	r3
                        break;
 801953a:	e768      	b.n	801940e <report_settings_detail+0x50a>
                else if (setting->datatype == Format_AxisMask)
 801953c:	7b23      	ldrb	r3, [r4, #12]
 801953e:	2b04      	cmp	r3, #4
 8019540:	f47f af72 	bne.w	8019428 <report_settings_detail+0x524>
                    hal.stream.write("axes");
 8019544:	4b05      	ldr	r3, [pc, #20]	@ (801955c <report_settings_detail+0x658>)
 8019546:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801954a:	4811      	ldr	r0, [pc, #68]	@ (8019590 <report_settings_detail+0x68c>)
 801954c:	4798      	blx	r3
 801954e:	e76b      	b.n	8019428 <report_settings_detail+0x524>
                hal.stream.write(description ? description : "");
 8019550:	4810      	ldr	r0, [pc, #64]	@ (8019594 <report_settings_detail+0x690>)
 8019552:	e77a      	b.n	801944a <report_settings_detail+0x546>
                    hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + (description && *description != '\0' ? 0 : 4));
 8019554:	4804      	ldr	r0, [pc, #16]	@ (8019568 <report_settings_detail+0x664>)
 8019556:	e787      	b.n	8019468 <report_settings_detail+0x564>
 8019558:	480f      	ldr	r0, [pc, #60]	@ (8019598 <report_settings_detail+0x694>)
 801955a:	e785      	b.n	8019468 <report_settings_detail+0x564>
 801955c:	200018dc 	.word	0x200018dc
 8019560:	0802c2b8 	.word	0x0802c2b8
 8019564:	0802c2b4 	.word	0x0802c2b4
 8019568:	0802c1ac 	.word	0x0802c1ac
 801956c:	0802c7e0 	.word	0x0802c7e0
 8019570:	0802c2c0 	.word	0x0802c2c0
 8019574:	0802c2c8 	.word	0x0802c2c8
 8019578:	0802c2d0 	.word	0x0802c2d0
 801957c:	0802c2dc 	.word	0x0802c2dc
 8019580:	0802c2e8 	.word	0x0802c2e8
 8019584:	0802c2f8 	.word	0x0802c2f8
 8019588:	08031290 	.word	0x08031290
 801958c:	0802c300 	.word	0x0802c300
 8019590:	0802c30c 	.word	0x0802c30c
 8019594:	0802c29c 	.word	0x0802c29c
 8019598:	0802c1a8 	.word	0x0802c1a8

0801959c <print_unsorted>:
{
 801959c:	b570      	push	{r4, r5, r6, lr}
 801959e:	4604      	mov	r4, r0
 80195a0:	460e      	mov	r6, r1
 80195a2:	4615      	mov	r5, r2
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset) &&
 80195a4:	7850      	ldrb	r0, [r2, #1]
 80195a6:	78a3      	ldrb	r3, [r4, #2]
 80195a8:	4298      	cmp	r0, r3
 80195aa:	d00b      	beq.n	80195c4 <print_unsorted+0x28>
       (setting->is_available == NULL ||setting->is_available(setting)))
 80195ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset) &&
 80195ae:	b113      	cbz	r3, 80195b6 <print_unsorted+0x1a>
       (setting->is_available == NULL ||setting->is_available(setting)))
 80195b0:	4620      	mov	r0, r4
 80195b2:	4798      	blx	r3
 80195b4:	b120      	cbz	r0, 80195c0 <print_unsorted+0x24>
        report_settings_detail(((report_args_t *)args)->format, setting, offset);
 80195b6:	4632      	mov	r2, r6
 80195b8:	4621      	mov	r1, r4
 80195ba:	7828      	ldrb	r0, [r5, #0]
 80195bc:	f7ff fca2 	bl	8018f04 <report_settings_detail>
}
 80195c0:	2001      	movs	r0, #1
 80195c2:	bd70      	pop	{r4, r5, r6, pc}
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset) &&
 80195c4:	6853      	ldr	r3, [r2, #4]
 80195c6:	428b      	cmp	r3, r1
 80195c8:	d1fa      	bne.n	80195c0 <print_unsorted+0x24>
 80195ca:	e7ef      	b.n	80195ac <print_unsorted+0x10>

080195cc <print_sorted>:
{
 80195cc:	b508      	push	{r3, lr}
 80195ce:	4613      	mov	r3, r2
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset))
 80195d0:	f892 c001 	ldrb.w	ip, [r2, #1]
 80195d4:	7882      	ldrb	r2, [r0, #2]
 80195d6:	4594      	cmp	ip, r2
 80195d8:	d102      	bne.n	80195e0 <print_sorted+0x14>
 80195da:	685a      	ldr	r2, [r3, #4]
 80195dc:	428a      	cmp	r2, r1
 80195de:	d104      	bne.n	80195ea <print_sorted+0x1e>
        report_settings_detail (((report_args_t *)args)->format, setting, offset);
 80195e0:	460a      	mov	r2, r1
 80195e2:	4601      	mov	r1, r0
 80195e4:	7818      	ldrb	r0, [r3, #0]
 80195e6:	f7ff fc8d 	bl	8018f04 <report_settings_detail>
}
 80195ea:	2001      	movs	r0, #1
 80195ec:	bd08      	pop	{r3, pc}
	...

080195f0 <print_settings_details>:
{
 80195f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195f4:	b083      	sub	sp, #12
 80195f6:	4606      	mov	r6, r0
    bool reported = group == Group_All;
 80195f8:	4688      	mov	r8, r1
 80195fa:	fab1 fb81 	clz	fp, r1
 80195fe:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    setting_details_t *details = settings_get_details();
 8019602:	f003 fdeb 	bl	801d1dc <settings_get_details>
 8019606:	4604      	mov	r4, r0
    args.group = settings_normalize_group(group);
 8019608:	4640      	mov	r0, r8
 801960a:	f004 fa33 	bl	801da74 <settings_normalize_group>
 801960e:	f88d 0001 	strb.w	r0, [sp, #1]
    args.offset = group - args.group;
 8019612:	eba8 0000 	sub.w	r0, r8, r0
 8019616:	9001      	str	r0, [sp, #4]
    args.format = format;
 8019618:	f88d 6000 	strb.w	r6, [sp]
    uint_fast16_t idx, n_settings = 0;
 801961c:	2500      	movs	r5, #0
        n_settings += details->n_settings;
 801961e:	8923      	ldrh	r3, [r4, #8]
 8019620:	441d      	add	r5, r3
    } while((details = details->next));
 8019622:	69a4      	ldr	r4, [r4, #24]
 8019624:	2c00      	cmp	r4, #0
 8019626:	d1fa      	bne.n	801961e <print_settings_details+0x2e>
    if(format == SettingsFormat_Grbl)
 8019628:	2e02      	cmp	r6, #2
 801962a:	d00f      	beq.n	801964c <print_settings_details+0x5c>
    else if(format == SettingsFormat_grblHAL)
 801962c:	2e03      	cmp	r6, #3
 801962e:	d013      	beq.n	8019658 <print_settings_details+0x68>
    details = settings_get_details();
 8019630:	f003 fdd4 	bl	801d1dc <settings_get_details>
 8019634:	4607      	mov	r7, r0
    if((all_settings = psetting = calloc(n_settings, sizeof(setting_detail_t *)))) {
 8019636:	2104      	movs	r1, #4
 8019638:	4628      	mov	r0, r5
 801963a:	f009 fb91 	bl	8022d60 <calloc>
 801963e:	4682      	mov	sl, r0
 8019640:	2800      	cmp	r0, #0
 8019642:	d068      	beq.n	8019716 <print_settings_details+0x126>
 8019644:	4606      	mov	r6, r0
        n_settings = 0;
 8019646:	f04f 0900 	mov.w	r9, #0
 801964a:	e028      	b.n	801969e <print_settings_details+0xae>
        hal.stream.write("\"$-Code\",\" Setting\",\" Units\",\" Setting Description\"" ASCII_EOL);
 801964c:	4b34      	ldr	r3, [pc, #208]	@ (8019720 <print_settings_details+0x130>)
 801964e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019652:	4834      	ldr	r0, [pc, #208]	@ (8019724 <print_settings_details+0x134>)
 8019654:	4798      	blx	r3
 8019656:	e7eb      	b.n	8019630 <print_settings_details+0x40>
        hal.stream.write("$-Code\tSetting\tUnits\tDatatype\tData format\tSetting Description\tMin\tMax" ASCII_EOL);
 8019658:	4b31      	ldr	r3, [pc, #196]	@ (8019720 <print_settings_details+0x130>)
 801965a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801965e:	4832      	ldr	r0, [pc, #200]	@ (8019728 <print_settings_details+0x138>)
 8019660:	4798      	blx	r3
 8019662:	e7e5      	b.n	8019630 <print_settings_details+0x40>
                if((group == Group_All || setting->group == args.group) && (setting->is_available == NULL || setting->is_available(setting))) {
 8019664:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8019666:	b113      	cbz	r3, 801966e <print_settings_details+0x7e>
 8019668:	4628      	mov	r0, r5
 801966a:	4798      	blx	r3
 801966c:	b118      	cbz	r0, 8019676 <print_settings_details+0x86>
                    *psetting++ = (setting_detail_t *)setting;
 801966e:	f846 5b04 	str.w	r5, [r6], #4
                    n_settings++;
 8019672:	f109 0901 	add.w	r9, r9, #1
            for(idx = 0; idx < details->n_settings; idx++) {
 8019676:	3401      	adds	r4, #1
 8019678:	893b      	ldrh	r3, [r7, #8]
 801967a:	42a3      	cmp	r3, r4
 801967c:	d90d      	bls.n	801969a <print_settings_details+0xaa>
                setting = &details->settings[idx];
 801967e:	68fd      	ldr	r5, [r7, #12]
 8019680:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8019684:	eb05 1503 	add.w	r5, r5, r3, lsl #4
                if((group == Group_All || setting->group == args.group) && (setting->is_available == NULL || setting->is_available(setting))) {
 8019688:	f1b8 0f00 	cmp.w	r8, #0
 801968c:	d0ea      	beq.n	8019664 <print_settings_details+0x74>
 801968e:	78aa      	ldrb	r2, [r5, #2]
 8019690:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8019694:	429a      	cmp	r2, r3
 8019696:	d1ee      	bne.n	8019676 <print_settings_details+0x86>
 8019698:	e7e4      	b.n	8019664 <print_settings_details+0x74>
        } while((details = details->next));
 801969a:	69bf      	ldr	r7, [r7, #24]
 801969c:	b10f      	cbz	r7, 80196a2 <print_settings_details+0xb2>
            for(idx = 0; idx < details->n_settings; idx++) {
 801969e:	2400      	movs	r4, #0
 80196a0:	e7ea      	b.n	8019678 <print_settings_details+0x88>
        qsort(all_settings, n_settings, sizeof(setting_detail_t *), cmp_settings);
 80196a2:	4b22      	ldr	r3, [pc, #136]	@ (801972c <print_settings_details+0x13c>)
 80196a4:	2204      	movs	r2, #4
 80196a6:	4649      	mov	r1, r9
 80196a8:	4650      	mov	r0, sl
 80196aa:	f00a fb28 	bl	8023cfe <qsort>
        for(idx = 0; idx < n_settings; idx++) {
 80196ae:	2400      	movs	r4, #0
 80196b0:	e000      	b.n	80196b4 <print_settings_details+0xc4>
 80196b2:	3401      	adds	r4, #1
 80196b4:	454c      	cmp	r4, r9
 80196b6:	d209      	bcs.n	80196cc <print_settings_details+0xdc>
            if(settings_iterator(all_settings[idx], print_sorted, &args))
 80196b8:	466a      	mov	r2, sp
 80196ba:	491d      	ldr	r1, [pc, #116]	@ (8019730 <print_settings_details+0x140>)
 80196bc:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 80196c0:	f004 fa3a 	bl	801db38 <settings_iterator>
 80196c4:	2800      	cmp	r0, #0
 80196c6:	d0f4      	beq.n	80196b2 <print_settings_details+0xc2>
                reported = true;
 80196c8:	4683      	mov	fp, r0
 80196ca:	e7f2      	b.n	80196b2 <print_settings_details+0xc2>
        free(all_settings);
 80196cc:	4650      	mov	r0, sl
 80196ce:	f009 fb6b 	bl	8022da8 <free>
    return reported ? Status_OK : Status_SettingDisabled;
 80196d2:	f1bb 0f00 	cmp.w	fp, #0
 80196d6:	d020      	beq.n	801971a <print_settings_details+0x12a>
 80196d8:	2000      	movs	r0, #0
}
 80196da:	b003      	add	sp, #12
 80196dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(settings_iterator(setting, print_unsorted, &args))
 80196e0:	466a      	mov	r2, sp
 80196e2:	4914      	ldr	r1, [pc, #80]	@ (8019734 <print_settings_details+0x144>)
 80196e4:	f004 fa28 	bl	801db38 <settings_iterator>
 80196e8:	b100      	cbz	r0, 80196ec <print_settings_details+0xfc>
                    reported = true;
 80196ea:	4683      	mov	fp, r0
        for(idx = 0; idx < details->n_settings; idx++) {
 80196ec:	3401      	adds	r4, #1
 80196ee:	893b      	ldrh	r3, [r7, #8]
 80196f0:	42a3      	cmp	r3, r4
 80196f2:	d90d      	bls.n	8019710 <print_settings_details+0x120>
            setting = &details->settings[idx];
 80196f4:	68f8      	ldr	r0, [r7, #12]
 80196f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80196fa:	eb00 1003 	add.w	r0, r0, r3, lsl #4
            if(group == Group_All || setting->group == args.group) {
 80196fe:	f1b8 0f00 	cmp.w	r8, #0
 8019702:	d0ed      	beq.n	80196e0 <print_settings_details+0xf0>
 8019704:	7882      	ldrb	r2, [r0, #2]
 8019706:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801970a:	429a      	cmp	r2, r3
 801970c:	d1ee      	bne.n	80196ec <print_settings_details+0xfc>
 801970e:	e7e7      	b.n	80196e0 <print_settings_details+0xf0>
    } while((details = details->next));
 8019710:	69bf      	ldr	r7, [r7, #24]
 8019712:	2f00      	cmp	r7, #0
 8019714:	d0dd      	beq.n	80196d2 <print_settings_details+0xe2>
        for(idx = 0; idx < details->n_settings; idx++) {
 8019716:	2400      	movs	r4, #0
 8019718:	e7e9      	b.n	80196ee <print_settings_details+0xfe>
    return reported ? Status_OK : Status_SettingDisabled;
 801971a:	2035      	movs	r0, #53	@ 0x35
 801971c:	e7dd      	b.n	80196da <print_settings_details+0xea>
 801971e:	bf00      	nop
 8019720:	200018dc 	.word	0x200018dc
 8019724:	0802c314 	.word	0x0802c314
 8019728:	0802c34c 	.word	0x0802c34c
 801972c:	0801863d 	.word	0x0801863d
 8019730:	080195cd 	.word	0x080195cd
 8019734:	0801959d 	.word	0x0801959d

08019738 <print_setting_group>:
{
 8019738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801973a:	4604      	mov	r4, r0
 801973c:	460d      	mov	r5, r1
    if(settings_is_group_available(group->id)) {
 801973e:	7840      	ldrb	r0, [r0, #1]
 8019740:	f004 fa80 	bl	801dc44 <settings_is_group_available>
 8019744:	b178      	cbz	r0, 8019766 <print_setting_group+0x2e>
        if(!prefix) {
 8019746:	b17d      	cbz	r5, 8019768 <print_setting_group+0x30>
        } else if(group->id != Group_Root) {
 8019748:	7863      	ldrb	r3, [r4, #1]
 801974a:	b163      	cbz	r3, 8019766 <print_setting_group+0x2e>
            hal.stream.write(prefix);
 801974c:	4e18      	ldr	r6, [pc, #96]	@ (80197b0 <print_setting_group+0x78>)
 801974e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8019752:	4628      	mov	r0, r5
 8019754:	4798      	blx	r3
            hal.stream.write(group->name);
 8019756:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801975a:	6860      	ldr	r0, [r4, #4]
 801975c:	4798      	blx	r3
            hal.stream.write(ASCII_EOL);
 801975e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8019762:	4814      	ldr	r0, [pc, #80]	@ (80197b4 <print_setting_group+0x7c>)
 8019764:	4798      	blx	r3
}
 8019766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            hal.stream.write("[SETTINGGROUP:");
 8019768:	4d11      	ldr	r5, [pc, #68]	@ (80197b0 <print_setting_group+0x78>)
 801976a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801976e:	4812      	ldr	r0, [pc, #72]	@ (80197b8 <print_setting_group+0x80>)
 8019770:	4798      	blx	r3
            hal.stream.write(uitoa(group->id));
 8019772:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8019776:	7860      	ldrb	r0, [r4, #1]
 8019778:	f7fc fa02 	bl	8015b80 <uitoa>
 801977c:	47b0      	blx	r6
            hal.stream.write(vbar);
 801977e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019782:	4e0e      	ldr	r6, [pc, #56]	@ (80197bc <print_setting_group+0x84>)
 8019784:	4630      	mov	r0, r6
 8019786:	4798      	blx	r3
            hal.stream.write(uitoa(group->parent));
 8019788:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 801978c:	7820      	ldrb	r0, [r4, #0]
 801978e:	f7fc f9f7 	bl	8015b80 <uitoa>
 8019792:	47b8      	blx	r7
            hal.stream.write(vbar);
 8019794:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019798:	4630      	mov	r0, r6
 801979a:	4798      	blx	r3
            hal.stream.write(group->name);
 801979c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80197a0:	6860      	ldr	r0, [r4, #4]
 80197a2:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 80197a4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80197a8:	4805      	ldr	r0, [pc, #20]	@ (80197c0 <print_setting_group+0x88>)
 80197aa:	4798      	blx	r3
 80197ac:	e7db      	b.n	8019766 <print_setting_group+0x2e>
 80197ae:	bf00      	nop
 80197b0:	200018dc 	.word	0x200018dc
 80197b4:	0802c7e0 	.word	0x0802c7e0
 80197b8:	0802c394 	.word	0x0802c394
 80197bc:	0802c95c 	.word	0x0802c95c
 80197c0:	0802c134 	.word	0x0802c134

080197c4 <report_pin_info>:
{
 80197c4:	b570      	push	{r4, r5, r6, lr}
 80197c6:	4604      	mov	r4, r0
    hal.stream.write("[PIN:");
 80197c8:	4b16      	ldr	r3, [pc, #88]	@ (8019824 <report_pin_info+0x60>)
 80197ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80197ce:	4816      	ldr	r0, [pc, #88]	@ (8019828 <report_pin_info+0x64>)
 80197d0:	4798      	blx	r3
    if(*pin->port)
 80197d2:	78a3      	ldrb	r3, [r4, #2]
 80197d4:	b123      	cbz	r3, 80197e0 <report_pin_info+0x1c>
        hal.stream.write(pin->port);
 80197d6:	4b13      	ldr	r3, [pc, #76]	@ (8019824 <report_pin_info+0x60>)
 80197d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80197dc:	1ca0      	adds	r0, r4, #2
 80197de:	4798      	blx	r3
    hal.stream.write(uitoa(pin->pin));
 80197e0:	4d10      	ldr	r5, [pc, #64]	@ (8019824 <report_pin_info+0x60>)
 80197e2:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 80197e6:	7820      	ldrb	r0, [r4, #0]
 80197e8:	f7fc f9ca 	bl	8015b80 <uitoa>
 80197ec:	47b0      	blx	r6
    hal.stream.write(",");
 80197ee:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80197f2:	480e      	ldr	r0, [pc, #56]	@ (801982c <report_pin_info+0x68>)
 80197f4:	4798      	blx	r3
    hal.stream.write(xbar_fn_to_pinname(pin->function));
 80197f6:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 80197fa:	7860      	ldrb	r0, [r4, #1]
 80197fc:	f7f3 fd48 	bl	800d290 <xbar_fn_to_pinname>
 8019800:	47a8      	blx	r5
    if(pin->description) {
 8019802:	6923      	ldr	r3, [r4, #16]
 8019804:	b143      	cbz	r3, 8019818 <report_pin_info+0x54>
        hal.stream.write(",");
 8019806:	4d07      	ldr	r5, [pc, #28]	@ (8019824 <report_pin_info+0x60>)
 8019808:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801980c:	4807      	ldr	r0, [pc, #28]	@ (801982c <report_pin_info+0x68>)
 801980e:	4798      	blx	r3
        hal.stream.write(pin->description);
 8019810:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019814:	6920      	ldr	r0, [r4, #16]
 8019816:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 8019818:	4b02      	ldr	r3, [pc, #8]	@ (8019824 <report_pin_info+0x60>)
 801981a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801981e:	4804      	ldr	r0, [pc, #16]	@ (8019830 <report_pin_info+0x6c>)
 8019820:	4798      	blx	r3
}
 8019822:	bd70      	pop	{r4, r5, r6, pc}
 8019824:	200018dc 	.word	0x200018dc
 8019828:	0802c3a4 	.word	0x0802c3a4
 801982c:	0802c560 	.word	0x0802c560
 8019830:	0802c134 	.word	0x0802c134

08019834 <report_pin>:
{
 8019834:	b500      	push	{lr}
 8019836:	b087      	sub	sp, #28
    report_pin_info(get_pin_info(pin, &info));
 8019838:	4669      	mov	r1, sp
 801983a:	f7ff fa45 	bl	8018cc8 <get_pin_info>
 801983e:	f7ff ffc1 	bl	80197c4 <report_pin_info>
}
 8019842:	b007      	add	sp, #28
 8019844:	f85d fb04 	ldr.w	pc, [sp], #4

08019848 <report_setting>:
{
 8019848:	b538      	push	{r3, r4, r5, lr}
 801984a:	4604      	mov	r4, r0
 801984c:	460d      	mov	r5, r1
    appendbuf(3, "$", uitoa(setting->id + offset), "=");
 801984e:	8800      	ldrh	r0, [r0, #0]
 8019850:	4408      	add	r0, r1
 8019852:	f7fc f995 	bl	8015b80 <uitoa>
 8019856:	4602      	mov	r2, r0
 8019858:	4b0c      	ldr	r3, [pc, #48]	@ (801988c <report_setting+0x44>)
 801985a:	490d      	ldr	r1, [pc, #52]	@ (8019890 <report_setting+0x48>)
 801985c:	2003      	movs	r0, #3
 801985e:	f7ff fa5f 	bl	8018d20 <appendbuf>
    char *value = setting_get_value(setting, offset);
 8019862:	4629      	mov	r1, r5
 8019864:	4620      	mov	r0, r4
 8019866:	f003 fe9b 	bl	801d5a0 <setting_get_value>
    if(value) {
 801986a:	b168      	cbz	r0, 8019888 <report_setting+0x40>
 801986c:	4605      	mov	r5, r0
        hal.stream.write(buf);
 801986e:	4c09      	ldr	r4, [pc, #36]	@ (8019894 <report_setting+0x4c>)
 8019870:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019874:	4808      	ldr	r0, [pc, #32]	@ (8019898 <report_setting+0x50>)
 8019876:	4798      	blx	r3
        hal.stream.write(value);
 8019878:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801987c:	4628      	mov	r0, r5
 801987e:	4798      	blx	r3
        hal.stream.write(ASCII_EOL);
 8019880:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019884:	4805      	ldr	r0, [pc, #20]	@ (801989c <report_setting+0x54>)
 8019886:	4798      	blx	r3
}
 8019888:	2001      	movs	r0, #1
 801988a:	bd38      	pop	{r3, r4, r5, pc}
 801988c:	0802c3ac 	.word	0x0802c3ac
 8019890:	0802c11c 	.word	0x0802c11c
 8019894:	200018dc 	.word	0x200018dc
 8019898:	200021c4 	.word	0x200021c4
 801989c:	0802c7e0 	.word	0x0802c7e0

080198a0 <report_init>:
    get_axis_value = settings.flags.report_inches ? get_axis_value_inches : get_axis_value_mm;
 80198a0:	4b0b      	ldr	r3, [pc, #44]	@ (80198d0 <report_init+0x30>)
 80198a2:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 80198a6:	f013 0301 	ands.w	r3, r3, #1
 80198aa:	d00b      	beq.n	80198c4 <report_init+0x24>
 80198ac:	4909      	ldr	r1, [pc, #36]	@ (80198d4 <report_init+0x34>)
 80198ae:	4a0a      	ldr	r2, [pc, #40]	@ (80198d8 <report_init+0x38>)
 80198b0:	6011      	str	r1, [r2, #0]
    get_axis_values = settings.flags.report_inches ? get_axis_values_inches : get_axis_values_mm;
 80198b2:	b14b      	cbz	r3, 80198c8 <report_init+0x28>
 80198b4:	4909      	ldr	r1, [pc, #36]	@ (80198dc <report_init+0x3c>)
 80198b6:	4a0a      	ldr	r2, [pc, #40]	@ (80198e0 <report_init+0x40>)
 80198b8:	6011      	str	r1, [r2, #0]
    get_rate_value = settings.flags.report_inches ? get_rate_value_inch : get_rate_value_mm;
 80198ba:	b13b      	cbz	r3, 80198cc <report_init+0x2c>
 80198bc:	4a09      	ldr	r2, [pc, #36]	@ (80198e4 <report_init+0x44>)
 80198be:	4b0a      	ldr	r3, [pc, #40]	@ (80198e8 <report_init+0x48>)
 80198c0:	601a      	str	r2, [r3, #0]
}
 80198c2:	4770      	bx	lr
    get_axis_value = settings.flags.report_inches ? get_axis_value_inches : get_axis_value_mm;
 80198c4:	4909      	ldr	r1, [pc, #36]	@ (80198ec <report_init+0x4c>)
 80198c6:	e7f2      	b.n	80198ae <report_init+0xe>
    get_axis_values = settings.flags.report_inches ? get_axis_values_inches : get_axis_values_mm;
 80198c8:	4909      	ldr	r1, [pc, #36]	@ (80198f0 <report_init+0x50>)
 80198ca:	e7f4      	b.n	80198b6 <report_init+0x16>
    get_rate_value = settings.flags.report_inches ? get_rate_value_inch : get_rate_value_mm;
 80198cc:	4a09      	ldr	r2, [pc, #36]	@ (80198f4 <report_init+0x54>)
 80198ce:	e7f6      	b.n	80198be <report_init+0x1e>
 80198d0:	200022f4 	.word	0x200022f4
 80198d4:	08018c59 	.word	0x08018c59
 80198d8:	200021bc 	.word	0x200021bc
 80198dc:	08018bb9 	.word	0x08018bb9
 80198e0:	200021c0 	.word	0x200021c0
 80198e4:	080187b5 	.word	0x080187b5
 80198e8:	200021b8 	.word	0x200021b8
 80198ec:	08018c41 	.word	0x08018c41
 80198f0:	08018b45 	.word	0x08018b45
 80198f4:	080187a5 	.word	0x080187a5

080198f8 <report_message>:
{
 80198f8:	b538      	push	{r3, r4, r5, lr}
 80198fa:	4605      	mov	r5, r0
 80198fc:	460c      	mov	r4, r1
    if(hal.stream.is_connected()) {
 80198fe:	4b16      	ldr	r3, [pc, #88]	@ (8019958 <report_message+0x60>)
 8019900:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8019904:	4798      	blx	r3
 8019906:	b198      	cbz	r0, 8019930 <report_message+0x38>
        hal.stream.write("[MSG:");
 8019908:	4b13      	ldr	r3, [pc, #76]	@ (8019958 <report_message+0x60>)
 801990a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801990e:	4813      	ldr	r0, [pc, #76]	@ (801995c <report_message+0x64>)
 8019910:	4798      	blx	r3
        switch(type) {
 8019912:	2c02      	cmp	r4, #2
 8019914:	d013      	beq.n	801993e <report_message+0x46>
 8019916:	2c03      	cmp	r4, #3
 8019918:	d017      	beq.n	801994a <report_message+0x52>
 801991a:	2c01      	cmp	r4, #1
 801991c:	d009      	beq.n	8019932 <report_message+0x3a>
        hal.stream.write(msg);
 801991e:	4c0e      	ldr	r4, [pc, #56]	@ (8019958 <report_message+0x60>)
 8019920:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019924:	4628      	mov	r0, r5
 8019926:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 8019928:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801992c:	480c      	ldr	r0, [pc, #48]	@ (8019960 <report_message+0x68>)
 801992e:	4798      	blx	r3
}
 8019930:	bd38      	pop	{r3, r4, r5, pc}
                hal.stream.write("Info: ");
 8019932:	4b09      	ldr	r3, [pc, #36]	@ (8019958 <report_message+0x60>)
 8019934:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019938:	480a      	ldr	r0, [pc, #40]	@ (8019964 <report_message+0x6c>)
 801993a:	4798      	blx	r3
                break;
 801993c:	e7ef      	b.n	801991e <report_message+0x26>
                hal.stream.write("Warning: ");
 801993e:	4b06      	ldr	r3, [pc, #24]	@ (8019958 <report_message+0x60>)
 8019940:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019944:	4808      	ldr	r0, [pc, #32]	@ (8019968 <report_message+0x70>)
 8019946:	4798      	blx	r3
                break;
 8019948:	e7e9      	b.n	801991e <report_message+0x26>
                hal.stream.write("Debug: ");
 801994a:	4b03      	ldr	r3, [pc, #12]	@ (8019958 <report_message+0x60>)
 801994c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019950:	4806      	ldr	r0, [pc, #24]	@ (801996c <report_message+0x74>)
 8019952:	4798      	blx	r3
                break;
 8019954:	e7e3      	b.n	801991e <report_message+0x26>
 8019956:	bf00      	nop
 8019958:	200018dc 	.word	0x200018dc
 801995c:	0802c3b0 	.word	0x0802c3b0
 8019960:	0802c134 	.word	0x0802c134
 8019964:	0802c3b8 	.word	0x0802c3b8
 8019968:	0802c3c0 	.word	0x0802c3c0
 801996c:	0802c3cc 	.word	0x0802c3cc

08019970 <report_feedback_message>:
{
 8019970:	b510      	push	{r4, lr}
 8019972:	4604      	mov	r4, r0
    const message_t *msg = message_get(id);
 8019974:	f7fa f9f4 	bl	8013d60 <message_get>
    report_message(msg ? msg->text : "", msg ? msg->type : Message_Plain);
 8019978:	b168      	cbz	r0, 8019996 <report_feedback_message+0x26>
 801997a:	4603      	mov	r3, r0
 801997c:	6840      	ldr	r0, [r0, #4]
 801997e:	7859      	ldrb	r1, [r3, #1]
 8019980:	f7ff ffba 	bl	80198f8 <report_message>
    if(id == Message_None && grbl.on_gcode_message)
 8019984:	b92c      	cbnz	r4, 8019992 <report_feedback_message+0x22>
 8019986:	4b05      	ldr	r3, [pc, #20]	@ (801999c <report_feedback_message+0x2c>)
 8019988:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801998c:	b10b      	cbz	r3, 8019992 <report_feedback_message+0x22>
        grbl.on_gcode_message("");
 801998e:	4804      	ldr	r0, [pc, #16]	@ (80199a0 <report_feedback_message+0x30>)
 8019990:	4798      	blx	r3
}
 8019992:	4620      	mov	r0, r4
 8019994:	bd10      	pop	{r4, pc}
    report_message(msg ? msg->text : "", msg ? msg->type : Message_Plain);
 8019996:	4802      	ldr	r0, [pc, #8]	@ (80199a0 <report_feedback_message+0x30>)
 8019998:	2100      	movs	r1, #0
 801999a:	e7f1      	b.n	8019980 <report_feedback_message+0x10>
 801999c:	20001ac4 	.word	0x20001ac4
 80199a0:	0802c29c 	.word	0x0802c29c

080199a4 <report_plain>:
{
 80199a4:	b508      	push	{r3, lr}
    report_message((char *)message, Message_Plain);
 80199a6:	2100      	movs	r1, #0
 80199a8:	f7ff ffa6 	bl	80198f8 <report_message>
}
 80199ac:	bd08      	pop	{r3, pc}

080199ae <report_warning>:
{
 80199ae:	b508      	push	{r3, lr}
    report_message((char *)message, Message_Warning);
 80199b0:	2102      	movs	r1, #2
 80199b2:	f7ff ffa1 	bl	80198f8 <report_message>
}
 80199b6:	bd08      	pop	{r3, pc}

080199b8 <report_grbl_setting>:
{
 80199b8:	b570      	push	{r4, r5, r6, lr}
 80199ba:	4604      	mov	r4, r0
 80199bc:	460d      	mov	r5, r1
    const setting_detail_t *setting = setting_get_details(id, NULL);
 80199be:	2100      	movs	r1, #0
 80199c0:	f004 f860 	bl	801da84 <setting_get_details>
    if(setting)
 80199c4:	b138      	cbz	r0, 80199d6 <report_grbl_setting+0x1e>
        grbl.report.setting(setting, id - setting->id, data);
 80199c6:	4a05      	ldr	r2, [pc, #20]	@ (80199dc <report_grbl_setting+0x24>)
 80199c8:	6956      	ldr	r6, [r2, #20]
 80199ca:	8801      	ldrh	r1, [r0, #0]
 80199cc:	462a      	mov	r2, r5
 80199ce:	1a61      	subs	r1, r4, r1
 80199d0:	47b0      	blx	r6
    status_code_t status = Status_OK;
 80199d2:	2000      	movs	r0, #0
}
 80199d4:	bd70      	pop	{r4, r5, r6, pc}
        status = Status_SettingDisabled;
 80199d6:	2035      	movs	r0, #53	@ 0x35
 80199d8:	e7fc      	b.n	80199d4 <report_grbl_setting+0x1c>
 80199da:	bf00      	nop
 80199dc:	20001ac4 	.word	0x20001ac4

080199e0 <report_grbl_settings>:
{
 80199e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199e4:	4606      	mov	r6, r0
 80199e6:	4689      	mov	r9, r1
    setting_details_t *details = settings_get_details();
 80199e8:	f003 fbf8 	bl	801d1dc <settings_get_details>
    uint_fast16_t idx, n_settings = 0;
 80199ec:	2400      	movs	r4, #0
        n_settings += details->n_settings;
 80199ee:	8903      	ldrh	r3, [r0, #8]
 80199f0:	441c      	add	r4, r3
    } while((details = details->next));
 80199f2:	6980      	ldr	r0, [r0, #24]
 80199f4:	2800      	cmp	r0, #0
 80199f6:	d1fa      	bne.n	80199ee <report_grbl_settings+0xe>
    details = settings_get_details();
 80199f8:	f003 fbf0 	bl	801d1dc <settings_get_details>
 80199fc:	4683      	mov	fp, r0
    if((all_settings = psetting = calloc(n_settings, sizeof(setting_detail_t *)))) {
 80199fe:	2104      	movs	r1, #4
 8019a00:	4620      	mov	r0, r4
 8019a02:	f009 f9ad 	bl	8022d60 <calloc>
 8019a06:	4680      	mov	r8, r0
 8019a08:	2800      	cmp	r0, #0
 8019a0a:	d067      	beq.n	8019adc <report_grbl_settings+0xfc>
 8019a0c:	4682      	mov	sl, r0
        n_settings = 0;
 8019a0e:	2700      	movs	r7, #0
        for(idx = 0; idx < details->n_settings; idx++) {
 8019a10:	463d      	mov	r5, r7
 8019a12:	e00a      	b.n	8019a2a <report_grbl_settings+0x4a>
                  (setting->is_available == NULL ||setting->is_available(setting))) {
 8019a14:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            if((all || setting->type == Setting_IsLegacy || setting->type == Setting_IsLegacyFn) &&
 8019a16:	b113      	cbz	r3, 8019a1e <report_grbl_settings+0x3e>
                  (setting->is_available == NULL ||setting->is_available(setting))) {
 8019a18:	4620      	mov	r0, r4
 8019a1a:	4798      	blx	r3
 8019a1c:	b120      	cbz	r0, 8019a28 <report_grbl_settings+0x48>
                *psetting++ = (setting_detail_t *)setting;
 8019a1e:	4653      	mov	r3, sl
 8019a20:	f843 4b04 	str.w	r4, [r3], #4
                n_settings++;
 8019a24:	3701      	adds	r7, #1
                *psetting++ = (setting_detail_t *)setting;
 8019a26:	469a      	mov	sl, r3
        for(idx = 0; idx < details->n_settings; idx++) {
 8019a28:	3501      	adds	r5, #1
 8019a2a:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 8019a2e:	42ab      	cmp	r3, r5
 8019a30:	d90d      	bls.n	8019a4e <report_grbl_settings+0x6e>
            setting = &details->settings[idx];
 8019a32:	f8db 400c 	ldr.w	r4, [fp, #12]
 8019a36:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8019a3a:	eb04 1403 	add.w	r4, r4, r3, lsl #4
            if((all || setting->type == Setting_IsLegacy || setting->type == Setting_IsLegacyFn) &&
 8019a3e:	2e00      	cmp	r6, #0
 8019a40:	d1e8      	bne.n	8019a14 <report_grbl_settings+0x34>
 8019a42:	7f23      	ldrb	r3, [r4, #28]
 8019a44:	2b04      	cmp	r3, #4
 8019a46:	d0e5      	beq.n	8019a14 <report_grbl_settings+0x34>
 8019a48:	2b05      	cmp	r3, #5
 8019a4a:	d1ed      	bne.n	8019a28 <report_grbl_settings+0x48>
 8019a4c:	e7e2      	b.n	8019a14 <report_grbl_settings+0x34>
        if(all && (details = details->next)) do {
 8019a4e:	b116      	cbz	r6, 8019a56 <report_grbl_settings+0x76>
 8019a50:	f8db 6018 	ldr.w	r6, [fp, #24]
 8019a54:	bb06      	cbnz	r6, 8019a98 <report_grbl_settings+0xb8>
        qsort(all_settings, n_settings, sizeof(setting_detail_t *), cmp_settings);
 8019a56:	4b22      	ldr	r3, [pc, #136]	@ (8019ae0 <report_grbl_settings+0x100>)
 8019a58:	2204      	movs	r2, #4
 8019a5a:	4639      	mov	r1, r7
 8019a5c:	4640      	mov	r0, r8
 8019a5e:	f00a f94e 	bl	8023cfe <qsort>
        for(idx = 0; idx < n_settings; idx++)
 8019a62:	2400      	movs	r4, #0
 8019a64:	e021      	b.n	8019aaa <report_grbl_settings+0xca>
                    *psetting++ = (setting_detail_t *)setting;
 8019a66:	4653      	mov	r3, sl
 8019a68:	f843 4b04 	str.w	r4, [r3], #4
                    n_settings++;
 8019a6c:	3701      	adds	r7, #1
                    *psetting++ = (setting_detail_t *)setting;
 8019a6e:	469a      	mov	sl, r3
            for(idx = 0; idx < details->n_settings; idx++) {
 8019a70:	3501      	adds	r5, #1
 8019a72:	8933      	ldrh	r3, [r6, #8]
 8019a74:	42ab      	cmp	r3, r5
 8019a76:	d90c      	bls.n	8019a92 <report_grbl_settings+0xb2>
                setting = &details->settings[idx];
 8019a78:	68f4      	ldr	r4, [r6, #12]
 8019a7a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8019a7e:	eb04 1403 	add.w	r4, r4, r3, lsl #4
                if(setting->is_available == NULL ||setting->is_available(setting)) {
 8019a82:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d0ee      	beq.n	8019a66 <report_grbl_settings+0x86>
 8019a88:	4620      	mov	r0, r4
 8019a8a:	4798      	blx	r3
 8019a8c:	2800      	cmp	r0, #0
 8019a8e:	d0ef      	beq.n	8019a70 <report_grbl_settings+0x90>
 8019a90:	e7e9      	b.n	8019a66 <report_grbl_settings+0x86>
        } while((details = details->next));
 8019a92:	69b6      	ldr	r6, [r6, #24]
 8019a94:	2e00      	cmp	r6, #0
 8019a96:	d0de      	beq.n	8019a56 <report_grbl_settings+0x76>
            for(idx = 0; idx < details->n_settings; idx++) {
 8019a98:	2500      	movs	r5, #0
 8019a9a:	e7ea      	b.n	8019a72 <report_grbl_settings+0x92>
            settings_iterator(all_settings[idx], print_setting, data);
 8019a9c:	464a      	mov	r2, r9
 8019a9e:	4911      	ldr	r1, [pc, #68]	@ (8019ae4 <report_grbl_settings+0x104>)
 8019aa0:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8019aa4:	f004 f848 	bl	801db38 <settings_iterator>
        for(idx = 0; idx < n_settings; idx++)
 8019aa8:	3401      	adds	r4, #1
 8019aaa:	42bc      	cmp	r4, r7
 8019aac:	d3f6      	bcc.n	8019a9c <report_grbl_settings+0xbc>
        free(all_settings);
 8019aae:	4640      	mov	r0, r8
 8019ab0:	f009 f97a 	bl	8022da8 <free>
}
 8019ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            settings_iterator(&details->settings[idx], print_setting, data);
 8019ab8:	f8db 300c 	ldr.w	r3, [fp, #12]
 8019abc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8019ac0:	464a      	mov	r2, r9
 8019ac2:	4908      	ldr	r1, [pc, #32]	@ (8019ae4 <report_grbl_settings+0x104>)
 8019ac4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8019ac8:	f004 f836 	bl	801db38 <settings_iterator>
        for(idx = 0; idx < n_settings; idx++)
 8019acc:	3501      	adds	r5, #1
 8019ace:	42a5      	cmp	r5, r4
 8019ad0:	d3f2      	bcc.n	8019ab8 <report_grbl_settings+0xd8>
    } while((details = details->next));
 8019ad2:	f8db b018 	ldr.w	fp, [fp, #24]
 8019ad6:	f1bb 0f00 	cmp.w	fp, #0
 8019ada:	d0eb      	beq.n	8019ab4 <report_grbl_settings+0xd4>
        for(idx = 0; idx < n_settings; idx++)
 8019adc:	2500      	movs	r5, #0
 8019ade:	e7f6      	b.n	8019ace <report_grbl_settings+0xee>
 8019ae0:	0801863d 	.word	0x0801863d
 8019ae4:	080187d1 	.word	0x080187d1

08019ae8 <report_probe_parameters>:
{
 8019ae8:	b570      	push	{r4, r5, r6, lr}
 8019aea:	b084      	sub	sp, #16
    system_convert_array_steps_to_mpos(print_position, sys.probe_position);
 8019aec:	4d11      	ldr	r5, [pc, #68]	@ (8019b34 <report_probe_parameters+0x4c>)
 8019aee:	4629      	mov	r1, r5
 8019af0:	a801      	add	r0, sp, #4
 8019af2:	f008 fa41 	bl	8021f78 <system_convert_array_steps_to_mpos>
    hal.stream.write("[PRB:");
 8019af6:	4c10      	ldr	r4, [pc, #64]	@ (8019b38 <report_probe_parameters+0x50>)
 8019af8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019afc:	480f      	ldr	r0, [pc, #60]	@ (8019b3c <report_probe_parameters+0x54>)
 8019afe:	4798      	blx	r3
    hal.stream.write(get_axis_values(print_position));
 8019b00:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8019b04:	4b0e      	ldr	r3, [pc, #56]	@ (8019b40 <report_probe_parameters+0x58>)
 8019b06:	681b      	ldr	r3, [r3, #0]
 8019b08:	a801      	add	r0, sp, #4
 8019b0a:	4798      	blx	r3
 8019b0c:	47b0      	blx	r6
    hal.stream.write(sys.flags.probe_succeeded ? ":1" : ":0");
 8019b0e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019b12:	f815 2c22 	ldrb.w	r2, [r5, #-34]
 8019b16:	f012 0f02 	tst.w	r2, #2
 8019b1a:	d008      	beq.n	8019b2e <report_probe_parameters+0x46>
 8019b1c:	4809      	ldr	r0, [pc, #36]	@ (8019b44 <report_probe_parameters+0x5c>)
 8019b1e:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 8019b20:	4b05      	ldr	r3, [pc, #20]	@ (8019b38 <report_probe_parameters+0x50>)
 8019b22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019b26:	4808      	ldr	r0, [pc, #32]	@ (8019b48 <report_probe_parameters+0x60>)
 8019b28:	4798      	blx	r3
}
 8019b2a:	b004      	add	sp, #16
 8019b2c:	bd70      	pop	{r4, r5, r6, pc}
    hal.stream.write(sys.flags.probe_succeeded ? ":1" : ":0");
 8019b2e:	4807      	ldr	r0, [pc, #28]	@ (8019b4c <report_probe_parameters+0x64>)
 8019b30:	e7f5      	b.n	8019b1e <report_probe_parameters+0x36>
 8019b32:	bf00      	nop
 8019b34:	20001bf4 	.word	0x20001bf4
 8019b38:	200018dc 	.word	0x200018dc
 8019b3c:	0802c3d4 	.word	0x0802c3d4
 8019b40:	200021c0 	.word	0x200021c0
 8019b44:	0802c690 	.word	0x0802c690
 8019b48:	0802c134 	.word	0x0802c134
 8019b4c:	0802c698 	.word	0x0802c698

08019b50 <report_home_position>:
{
 8019b50:	b570      	push	{r4, r5, r6, lr}
    hal.stream.write("[HOME:");
 8019b52:	4c0e      	ldr	r4, [pc, #56]	@ (8019b8c <report_home_position+0x3c>)
 8019b54:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019b58:	480d      	ldr	r0, [pc, #52]	@ (8019b90 <report_home_position+0x40>)
 8019b5a:	4798      	blx	r3
    hal.stream.write(get_axis_values(sys.home_position));
 8019b5c:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8019b60:	4b0c      	ldr	r3, [pc, #48]	@ (8019b94 <report_home_position+0x44>)
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	4d0c      	ldr	r5, [pc, #48]	@ (8019b98 <report_home_position+0x48>)
 8019b66:	4628      	mov	r0, r5
 8019b68:	4798      	blx	r3
 8019b6a:	47b0      	blx	r6
    hal.stream.write(":");
 8019b6c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019b70:	480a      	ldr	r0, [pc, #40]	@ (8019b9c <report_home_position+0x4c>)
 8019b72:	4798      	blx	r3
    hal.stream.write(uitoa(sys.homed.mask));
 8019b74:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8019b78:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 8019b7c:	f7fc f800 	bl	8015b80 <uitoa>
 8019b80:	47b0      	blx	r6
    hal.stream.write("]" ASCII_EOL);
 8019b82:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019b86:	4806      	ldr	r0, [pc, #24]	@ (8019ba0 <report_home_position+0x50>)
 8019b88:	4798      	blx	r3
}
 8019b8a:	bd70      	pop	{r4, r5, r6, pc}
 8019b8c:	200018dc 	.word	0x200018dc
 8019b90:	0802c3dc 	.word	0x0802c3dc
 8019b94:	200021c0 	.word	0x200021c0
 8019b98:	20001c14 	.word	0x20001c14
 8019b9c:	0802c49c 	.word	0x0802c49c
 8019ba0:	0802c134 	.word	0x0802c134

08019ba4 <report_tool_offsets>:
{
 8019ba4:	b538      	push	{r3, r4, r5, lr}
    hal.stream.write("[TLO:");
 8019ba6:	4c08      	ldr	r4, [pc, #32]	@ (8019bc8 <report_tool_offsets+0x24>)
 8019ba8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019bac:	4807      	ldr	r0, [pc, #28]	@ (8019bcc <report_tool_offsets+0x28>)
 8019bae:	4798      	blx	r3
    hal.stream.write(get_axis_values(gc_state.tool_length_offset));
 8019bb0:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8019bb4:	4b06      	ldr	r3, [pc, #24]	@ (8019bd0 <report_tool_offsets+0x2c>)
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	4806      	ldr	r0, [pc, #24]	@ (8019bd4 <report_tool_offsets+0x30>)
 8019bba:	4798      	blx	r3
 8019bbc:	47a8      	blx	r5
    hal.stream.write("]" ASCII_EOL);
 8019bbe:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019bc2:	4805      	ldr	r0, [pc, #20]	@ (8019bd8 <report_tool_offsets+0x34>)
 8019bc4:	4798      	blx	r3
}
 8019bc6:	bd38      	pop	{r3, r4, r5, pc}
 8019bc8:	200018dc 	.word	0x200018dc
 8019bcc:	0802c3e4 	.word	0x0802c3e4
 8019bd0:	200021c0 	.word	0x200021c0
 8019bd4:	200016d8 	.word	0x200016d8
 8019bd8:	0802c134 	.word	0x0802c134

08019bdc <report_ngc_parameter>:
{
 8019bdc:	b530      	push	{r4, r5, lr}
 8019bde:	ed2d 8b02 	vpush	{d8}
 8019be2:	b083      	sub	sp, #12
 8019be4:	4604      	mov	r4, r0
    hal.stream.write("[PARAM:");
 8019be6:	4d19      	ldr	r5, [pc, #100]	@ (8019c4c <report_ngc_parameter+0x70>)
 8019be8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019bec:	4818      	ldr	r0, [pc, #96]	@ (8019c50 <report_ngc_parameter+0x74>)
 8019bee:	4798      	blx	r3
    hal.stream.write(uitoa(id));
 8019bf0:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 8019bf4:	4620      	mov	r0, r4
 8019bf6:	f7fb ffc3 	bl	8015b80 <uitoa>
 8019bfa:	47a8      	blx	r5
    if(ngc_param_get(id, &value)) {
 8019bfc:	a901      	add	r1, sp, #4
 8019bfe:	4620      	mov	r0, r4
 8019c00:	f7fb fc94 	bl	801552c <ngc_param_get>
 8019c04:	b1d8      	cbz	r0, 8019c3e <report_ngc_parameter+0x62>
        hal.stream.write("=");
 8019c06:	4c11      	ldr	r4, [pc, #68]	@ (8019c4c <report_ngc_parameter+0x70>)
 8019c08:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019c0c:	4811      	ldr	r0, [pc, #68]	@ (8019c54 <report_ngc_parameter+0x78>)
 8019c0e:	4798      	blx	r3
        hal.stream.write(trim_float(ftoa(value, ngc_float_decimals())));
 8019c10:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 8019c14:	ed9d 8a01 	vldr	s16, [sp, #4]
 8019c18:	f7fb ffa6 	bl	8015b68 <ngc_float_decimals>
 8019c1c:	eeb0 0a48 	vmov.f32	s0, s16
 8019c20:	f7fb ffd0 	bl	8015bc4 <ftoa>
 8019c24:	f7fc f84a 	bl	8015cbc <trim_float>
 8019c28:	47a0      	blx	r4
    hal.stream.write("]" ASCII_EOL);
 8019c2a:	4b08      	ldr	r3, [pc, #32]	@ (8019c4c <report_ngc_parameter+0x70>)
 8019c2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019c30:	4809      	ldr	r0, [pc, #36]	@ (8019c58 <report_ngc_parameter+0x7c>)
 8019c32:	4798      	blx	r3
}
 8019c34:	2000      	movs	r0, #0
 8019c36:	b003      	add	sp, #12
 8019c38:	ecbd 8b02 	vpop	{d8}
 8019c3c:	bd30      	pop	{r4, r5, pc}
        hal.stream.write("=N/A");
 8019c3e:	4b03      	ldr	r3, [pc, #12]	@ (8019c4c <report_ngc_parameter+0x70>)
 8019c40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019c44:	4805      	ldr	r0, [pc, #20]	@ (8019c5c <report_ngc_parameter+0x80>)
 8019c46:	4798      	blx	r3
 8019c48:	e7ef      	b.n	8019c2a <report_ngc_parameter+0x4e>
 8019c4a:	bf00      	nop
 8019c4c:	200018dc 	.word	0x200018dc
 8019c50:	0802c3ec 	.word	0x0802c3ec
 8019c54:	0802c3ac 	.word	0x0802c3ac
 8019c58:	0802c134 	.word	0x0802c134
 8019c5c:	0802c3f4 	.word	0x0802c3f4

08019c60 <report_named_ngc_parameter>:
{
 8019c60:	b530      	push	{r4, r5, lr}
 8019c62:	ed2d 8b02 	vpush	{d8}
 8019c66:	b083      	sub	sp, #12
 8019c68:	4604      	mov	r4, r0
    hal.stream.write("[PARAM:");
 8019c6a:	4d17      	ldr	r5, [pc, #92]	@ (8019cc8 <report_named_ngc_parameter+0x68>)
 8019c6c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019c70:	4816      	ldr	r0, [pc, #88]	@ (8019ccc <report_named_ngc_parameter+0x6c>)
 8019c72:	4798      	blx	r3
    hal.stream.write(arg);
 8019c74:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019c78:	4620      	mov	r0, r4
 8019c7a:	4798      	blx	r3
    if(ngc_named_param_get(arg, &value)) {
 8019c7c:	a901      	add	r1, sp, #4
 8019c7e:	4620      	mov	r0, r4
 8019c80:	f7fb ff20 	bl	8015ac4 <ngc_named_param_get>
 8019c84:	b1d0      	cbz	r0, 8019cbc <report_named_ngc_parameter+0x5c>
        hal.stream.write("=");
 8019c86:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019c8a:	4811      	ldr	r0, [pc, #68]	@ (8019cd0 <report_named_ngc_parameter+0x70>)
 8019c8c:	4798      	blx	r3
        hal.stream.write(trim_float(ftoa(value, ngc_float_decimals())));
 8019c8e:	f8d5 40b4 	ldr.w	r4, [r5, #180]	@ 0xb4
 8019c92:	ed9d 8a01 	vldr	s16, [sp, #4]
 8019c96:	f7fb ff67 	bl	8015b68 <ngc_float_decimals>
 8019c9a:	eeb0 0a48 	vmov.f32	s0, s16
 8019c9e:	f7fb ff91 	bl	8015bc4 <ftoa>
 8019ca2:	f7fc f80b 	bl	8015cbc <trim_float>
 8019ca6:	47a0      	blx	r4
    hal.stream.write("]" ASCII_EOL);
 8019ca8:	4b07      	ldr	r3, [pc, #28]	@ (8019cc8 <report_named_ngc_parameter+0x68>)
 8019caa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019cae:	4809      	ldr	r0, [pc, #36]	@ (8019cd4 <report_named_ngc_parameter+0x74>)
 8019cb0:	4798      	blx	r3
}
 8019cb2:	2000      	movs	r0, #0
 8019cb4:	b003      	add	sp, #12
 8019cb6:	ecbd 8b02 	vpop	{d8}
 8019cba:	bd30      	pop	{r4, r5, pc}
        hal.stream.write("=N/A");
 8019cbc:	4b02      	ldr	r3, [pc, #8]	@ (8019cc8 <report_named_ngc_parameter+0x68>)
 8019cbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019cc2:	4805      	ldr	r0, [pc, #20]	@ (8019cd8 <report_named_ngc_parameter+0x78>)
 8019cc4:	4798      	blx	r3
 8019cc6:	e7ef      	b.n	8019ca8 <report_named_ngc_parameter+0x48>
 8019cc8:	200018dc 	.word	0x200018dc
 8019ccc:	0802c3ec 	.word	0x0802c3ec
 8019cd0:	0802c3ac 	.word	0x0802c3ac
 8019cd4:	0802c134 	.word	0x0802c134
 8019cd8:	0802c3f4 	.word	0x0802c3f4

08019cdc <report_ngc_parameters>:
{
 8019cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019ce0:	b085      	sub	sp, #20
    if(gc_state.modal.scaling_active) {
 8019ce2:	4b6d      	ldr	r3, [pc, #436]	@ (8019e98 <report_ngc_parameters+0x1bc>)
 8019ce4:	7f9b      	ldrb	r3, [r3, #30]
 8019ce6:	b183      	cbz	r3, 8019d0a <report_ngc_parameters+0x2e>
        hal.stream.write("[G51:");
 8019ce8:	4c6c      	ldr	r4, [pc, #432]	@ (8019e9c <report_ngc_parameters+0x1c0>)
 8019cea:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019cee:	486c      	ldr	r0, [pc, #432]	@ (8019ea0 <report_ngc_parameters+0x1c4>)
 8019cf0:	4798      	blx	r3
        hal.stream.write(get_axis_values(gc_get_scaling()));
 8019cf2:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8019cf6:	4b6b      	ldr	r3, [pc, #428]	@ (8019ea4 <report_ngc_parameters+0x1c8>)
 8019cf8:	681e      	ldr	r6, [r3, #0]
 8019cfa:	f7f3 fbb1 	bl	800d460 <gc_get_scaling>
 8019cfe:	47b0      	blx	r6
 8019d00:	47a8      	blx	r5
        hal.stream.write("]" ASCII_EOL);
 8019d02:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019d06:	4868      	ldr	r0, [pc, #416]	@ (8019ea8 <report_ngc_parameters+0x1cc>)
 8019d08:	4798      	blx	r3
{
 8019d0a:	2400      	movs	r4, #0
 8019d0c:	e01c      	b.n	8019d48 <report_ngc_parameters+0x6c>
            grbl.report.status_message(Status_SettingReadFail);
 8019d0e:	4b67      	ldr	r3, [pc, #412]	@ (8019eac <report_ngc_parameters+0x1d0>)
 8019d10:	689b      	ldr	r3, [r3, #8]
 8019d12:	2007      	movs	r0, #7
 8019d14:	4798      	blx	r3
            return;
 8019d16:	e091      	b.n	8019e3c <report_ngc_parameters+0x160>
                hal.stream.write("28");
 8019d18:	4b60      	ldr	r3, [pc, #384]	@ (8019e9c <report_ngc_parameters+0x1c0>)
 8019d1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019d1e:	4864      	ldr	r0, [pc, #400]	@ (8019eb0 <report_ngc_parameters+0x1d4>)
 8019d20:	4798      	blx	r3
        if(idx != CoordinateSystem_G92) {
 8019d22:	2c0b      	cmp	r4, #11
 8019d24:	d00f      	beq.n	8019d46 <report_ngc_parameters+0x6a>
            hal.stream.write(":");
 8019d26:	4d5d      	ldr	r5, [pc, #372]	@ (8019e9c <report_ngc_parameters+0x1c0>)
 8019d28:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019d2c:	4861      	ldr	r0, [pc, #388]	@ (8019eb4 <report_ngc_parameters+0x1d8>)
 8019d2e:	4798      	blx	r3
            hal.stream.write(get_axis_values(coord_data));
 8019d30:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8019d34:	4b5b      	ldr	r3, [pc, #364]	@ (8019ea4 <report_ngc_parameters+0x1c8>)
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	a801      	add	r0, sp, #4
 8019d3a:	4798      	blx	r3
 8019d3c:	47b0      	blx	r6
            hal.stream.write("]" ASCII_EOL);
 8019d3e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019d42:	4859      	ldr	r0, [pc, #356]	@ (8019ea8 <report_ngc_parameters+0x1cc>)
 8019d44:	4798      	blx	r3
    for (idx = 0; idx < N_CoordinateSystems; idx++) {
 8019d46:	3401      	adds	r4, #1
 8019d48:	2c0b      	cmp	r4, #11
 8019d4a:	d81f      	bhi.n	8019d8c <report_ngc_parameters+0xb0>
        if (!(settings_read_coord_data((coord_system_id_t)idx, &coord_data))) {
 8019d4c:	b2e5      	uxtb	r5, r4
 8019d4e:	a901      	add	r1, sp, #4
 8019d50:	4628      	mov	r0, r5
 8019d52:	f003 fd7f 	bl	801d854 <settings_read_coord_data>
 8019d56:	2800      	cmp	r0, #0
 8019d58:	d0d9      	beq.n	8019d0e <report_ngc_parameters+0x32>
        hal.stream.write("[G");
 8019d5a:	4b50      	ldr	r3, [pc, #320]	@ (8019e9c <report_ngc_parameters+0x1c0>)
 8019d5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019d60:	4855      	ldr	r0, [pc, #340]	@ (8019eb8 <report_ngc_parameters+0x1dc>)
 8019d62:	4798      	blx	r3
        switch (idx) {
 8019d64:	2c0a      	cmp	r4, #10
 8019d66:	d00b      	beq.n	8019d80 <report_ngc_parameters+0xa4>
 8019d68:	2c0b      	cmp	r4, #11
 8019d6a:	d0ec      	beq.n	8019d46 <report_ngc_parameters+0x6a>
 8019d6c:	2c09      	cmp	r4, #9
 8019d6e:	d0d3      	beq.n	8019d18 <report_ngc_parameters+0x3c>
                hal.stream.write(map_coord_system((coord_system_id_t)idx));
 8019d70:	4b4a      	ldr	r3, [pc, #296]	@ (8019e9c <report_ngc_parameters+0x1c0>)
 8019d72:	f8d3 60b4 	ldr.w	r6, [r3, #180]	@ 0xb4
 8019d76:	4628      	mov	r0, r5
 8019d78:	f7fe ff80 	bl	8018c7c <map_coord_system>
 8019d7c:	47b0      	blx	r6
                break;
 8019d7e:	e7d0      	b.n	8019d22 <report_ngc_parameters+0x46>
                hal.stream.write("30");
 8019d80:	4b46      	ldr	r3, [pc, #280]	@ (8019e9c <report_ngc_parameters+0x1c0>)
 8019d82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019d86:	484d      	ldr	r0, [pc, #308]	@ (8019ebc <report_ngc_parameters+0x1e0>)
 8019d88:	4798      	blx	r3
                break;
 8019d8a:	e7ca      	b.n	8019d22 <report_ngc_parameters+0x46>
    hal.stream.write("92:");
 8019d8c:	4c43      	ldr	r4, [pc, #268]	@ (8019e9c <report_ngc_parameters+0x1c0>)
 8019d8e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019d92:	484b      	ldr	r0, [pc, #300]	@ (8019ec0 <report_ngc_parameters+0x1e4>)
 8019d94:	4798      	blx	r3
    hal.stream.write(get_axis_values(gc_state.g92_coord_offset));
 8019d96:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8019d9a:	4b42      	ldr	r3, [pc, #264]	@ (8019ea4 <report_ngc_parameters+0x1c8>)
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	4849      	ldr	r0, [pc, #292]	@ (8019ec4 <report_ngc_parameters+0x1e8>)
 8019da0:	4798      	blx	r3
 8019da2:	47a8      	blx	r5
    hal.stream.write("]" ASCII_EOL);
 8019da4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019da8:	483f      	ldr	r0, [pc, #252]	@ (8019ea8 <report_ngc_parameters+0x1cc>)
 8019daa:	4798      	blx	r3
    for (idx = 1; idx <= grbl.tool_table.n_tools; idx++) {
 8019dac:	2501      	movs	r5, #1
 8019dae:	e030      	b.n	8019e12 <report_ngc_parameters+0x136>
        hal.stream.write("[T:");
 8019db0:	4c3a      	ldr	r4, [pc, #232]	@ (8019e9c <report_ngc_parameters+0x1c0>)
 8019db2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019db6:	4844      	ldr	r0, [pc, #272]	@ (8019ec8 <report_ngc_parameters+0x1ec>)
 8019db8:	4798      	blx	r3
        hal.stream.write(uitoa((uint32_t)idx));
 8019dba:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8019dbe:	4628      	mov	r0, r5
 8019dc0:	f7fb fede 	bl	8015b80 <uitoa>
 8019dc4:	47b0      	blx	r6
        hal.stream.write("|");
 8019dc6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019dca:	4f40      	ldr	r7, [pc, #256]	@ (8019ecc <report_ngc_parameters+0x1f0>)
 8019dcc:	4638      	mov	r0, r7
 8019dce:	4798      	blx	r3
        hal.stream.write(get_axis_values(grbl.tool_table.tool[idx].offset));
 8019dd0:	f8d4 90b4 	ldr.w	r9, [r4, #180]	@ 0xb4
 8019dd4:	4b33      	ldr	r3, [pc, #204]	@ (8019ea4 <report_ngc_parameters+0x1c8>)
 8019dd6:	681a      	ldr	r2, [r3, #0]
 8019dd8:	4e34      	ldr	r6, [pc, #208]	@ (8019eac <report_ngc_parameters+0x1d0>)
 8019dda:	69f0      	ldr	r0, [r6, #28]
 8019ddc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8019de0:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8019de4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8019de8:	4790      	blx	r2
 8019dea:	47c8      	blx	r9
        hal.stream.write("|");
 8019dec:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019df0:	4638      	mov	r0, r7
 8019df2:	4798      	blx	r3
        hal.stream.write(get_axis_value(grbl.tool_table.tool[idx].radius));
 8019df4:	f8d4 70b4 	ldr.w	r7, [r4, #180]	@ 0xb4
 8019df8:	4b35      	ldr	r3, [pc, #212]	@ (8019ed0 <report_ngc_parameters+0x1f4>)
 8019dfa:	681a      	ldr	r2, [r3, #0]
 8019dfc:	69f3      	ldr	r3, [r6, #28]
 8019dfe:	4443      	add	r3, r8
 8019e00:	ed93 0a03 	vldr	s0, [r3, #12]
 8019e04:	4790      	blx	r2
 8019e06:	47b8      	blx	r7
        hal.stream.write("]" ASCII_EOL);
 8019e08:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019e0c:	4826      	ldr	r0, [pc, #152]	@ (8019ea8 <report_ngc_parameters+0x1cc>)
 8019e0e:	4798      	blx	r3
    for (idx = 1; idx <= grbl.tool_table.n_tools; idx++) {
 8019e10:	3501      	adds	r5, #1
 8019e12:	4b26      	ldr	r3, [pc, #152]	@ (8019eac <report_ngc_parameters+0x1d0>)
 8019e14:	699b      	ldr	r3, [r3, #24]
 8019e16:	42ab      	cmp	r3, r5
 8019e18:	d2ca      	bcs.n	8019db0 <report_ngc_parameters+0xd4>
    if(settings.homing.flags.enabled)
 8019e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8019ed4 <report_ngc_parameters+0x1f8>)
 8019e1c:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8019e20:	f013 0f01 	tst.w	r3, #1
 8019e24:	d10d      	bne.n	8019e42 <report_ngc_parameters+0x166>
    report_tool_offsets();      // Print tool length offset value.
 8019e26:	f7ff febd 	bl	8019ba4 <report_tool_offsets>
    report_probe_parameters();  // Print probe parameters. Not persistent in memory.
 8019e2a:	f7ff fe5d 	bl	8019ae8 <report_probe_parameters>
    if(sys.tlo_reference_set.mask) { // Print tool length reference offset. Not persistent in memory.
 8019e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8019ed8 <report_ngc_parameters+0x1fc>)
 8019e30:	79db      	ldrb	r3, [r3, #7]
 8019e32:	b94b      	cbnz	r3, 8019e48 <report_ngc_parameters+0x16c>
    if(grbl.on_report_ngc_parameters)
 8019e34:	4b1d      	ldr	r3, [pc, #116]	@ (8019eac <report_ngc_parameters+0x1d0>)
 8019e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019e38:	b103      	cbz	r3, 8019e3c <report_ngc_parameters+0x160>
        grbl.on_report_ngc_parameters();
 8019e3a:	4798      	blx	r3
}
 8019e3c:	b005      	add	sp, #20
 8019e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        report_home_position();
 8019e42:	f7ff fe85 	bl	8019b50 <report_home_position>
 8019e46:	e7ee      	b.n	8019e26 <report_ngc_parameters+0x14a>
        gc_get_plane_data(&plane, gc_state.modal.plane_select);
 8019e48:	4b13      	ldr	r3, [pc, #76]	@ (8019e98 <report_ngc_parameters+0x1bc>)
 8019e4a:	7999      	ldrb	r1, [r3, #6]
 8019e4c:	4668      	mov	r0, sp
 8019e4e:	f7f3 fc01 	bl	800d654 <gc_get_plane_data>
        hal.stream.write("[TLR:");
 8019e52:	4c12      	ldr	r4, [pc, #72]	@ (8019e9c <report_ngc_parameters+0x1c0>)
 8019e54:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019e58:	4820      	ldr	r0, [pc, #128]	@ (8019edc <report_ngc_parameters+0x200>)
 8019e5a:	4798      	blx	r3
        hal.stream.write(get_axis_value(sys.tlo_reference[plane.axis_linear] / settings.axis[plane.axis_linear].steps_per_mm));
 8019e5c:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8019e60:	4b1b      	ldr	r3, [pc, #108]	@ (8019ed0 <report_ngc_parameters+0x1f4>)
 8019e62:	6819      	ldr	r1, [r3, #0]
 8019e64:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8019e68:	1c98      	adds	r0, r3, #2
 8019e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8019ed8 <report_ngc_parameters+0x1fc>)
 8019e6c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8019e70:	edd2 7a00 	vldr	s15, [r2]
 8019e74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019e78:	4a16      	ldr	r2, [pc, #88]	@ (8019ed4 <report_ngc_parameters+0x1f8>)
 8019e7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019e7e:	ed93 0a0c 	vldr	s0, [r3, #48]	@ 0x30
 8019e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e86:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8019e8a:	4788      	blx	r1
 8019e8c:	47a8      	blx	r5
        hal.stream.write("]" ASCII_EOL);
 8019e8e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019e92:	4805      	ldr	r0, [pc, #20]	@ (8019ea8 <report_ngc_parameters+0x1cc>)
 8019e94:	4798      	blx	r3
 8019e96:	e7cd      	b.n	8019e34 <report_ngc_parameters+0x158>
 8019e98:	20001614 	.word	0x20001614
 8019e9c:	200018dc 	.word	0x200018dc
 8019ea0:	0802c3fc 	.word	0x0802c3fc
 8019ea4:	200021c0 	.word	0x200021c0
 8019ea8:	0802c134 	.word	0x0802c134
 8019eac:	20001ac4 	.word	0x20001ac4
 8019eb0:	0802c408 	.word	0x0802c408
 8019eb4:	0802c49c 	.word	0x0802c49c
 8019eb8:	0802c404 	.word	0x0802c404
 8019ebc:	0802c40c 	.word	0x0802c40c
 8019ec0:	0802c410 	.word	0x0802c410
 8019ec4:	200016cc 	.word	0x200016cc
 8019ec8:	0802c414 	.word	0x0802c414
 8019ecc:	0802c150 	.word	0x0802c150
 8019ed0:	200021bc 	.word	0x200021bc
 8019ed4:	200022f4 	.word	0x200022f4
 8019ed8:	20001bbc 	.word	0x20001bbc
 8019edc:	0802c418 	.word	0x0802c418

08019ee0 <report_gcode_modes>:
{
 8019ee0:	b570      	push	{r4, r5, r6, lr}
    hal.stream.write("[GC:G");
 8019ee2:	4b8c      	ldr	r3, [pc, #560]	@ (801a114 <report_gcode_modes+0x234>)
 8019ee4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019ee8:	488b      	ldr	r0, [pc, #556]	@ (801a118 <report_gcode_modes+0x238>)
 8019eea:	4798      	blx	r3
    if (gc_state.modal.motion >= MotionMode_ProbeToward) {
 8019eec:	4b8b      	ldr	r3, [pc, #556]	@ (801a11c <report_gcode_modes+0x23c>)
 8019eee:	8818      	ldrh	r0, [r3, #0]
 8019ef0:	288b      	cmp	r0, #139	@ 0x8b
 8019ef2:	f240 80ab 	bls.w	801a04c <report_gcode_modes+0x16c>
        hal.stream.write("38.");
 8019ef6:	4c87      	ldr	r4, [pc, #540]	@ (801a114 <report_gcode_modes+0x234>)
 8019ef8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019efc:	4888      	ldr	r0, [pc, #544]	@ (801a120 <report_gcode_modes+0x240>)
 8019efe:	4798      	blx	r3
        hal.stream.write(uitoa((uint32_t)(gc_state.modal.motion - (MotionMode_ProbeToward - 2))));
 8019f00:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 8019f04:	4b85      	ldr	r3, [pc, #532]	@ (801a11c <report_gcode_modes+0x23c>)
 8019f06:	8818      	ldrh	r0, [r3, #0]
 8019f08:	388a      	subs	r0, #138	@ 0x8a
 8019f0a:	f7fb fe39 	bl	8015b80 <uitoa>
 8019f0e:	47a0      	blx	r4
    hal.stream.write(" G");
 8019f10:	4c80      	ldr	r4, [pc, #512]	@ (801a114 <report_gcode_modes+0x234>)
 8019f12:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f16:	4883      	ldr	r0, [pc, #524]	@ (801a124 <report_gcode_modes+0x244>)
 8019f18:	4798      	blx	r3
    hal.stream.write(map_coord_system(gc_state.modal.coord_system.id));
 8019f1a:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 8019f1e:	4b7f      	ldr	r3, [pc, #508]	@ (801a11c <report_gcode_modes+0x23c>)
 8019f20:	7d18      	ldrb	r0, [r3, #20]
 8019f22:	f7fe feab 	bl	8018c7c <map_coord_system>
 8019f26:	47a0      	blx	r4
    uint_fast32_t idx = N_AXIS;
 8019f28:	2303      	movs	r3, #3
        idx--;
 8019f2a:	3b01      	subs	r3, #1
        active = !(gc_state.g92_coord_offset[idx] == 0.0f || gc_state.g92_coord_offset[idx] == -0.0f);
 8019f2c:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 8019f30:	4a7a      	ldr	r2, [pc, #488]	@ (801a11c <report_gcode_modes+0x23c>)
 8019f32:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8019f36:	edd2 7a00 	vldr	s15, [r2]
    } while(idx && !active);
 8019f3a:	b123      	cbz	r3, 8019f46 <report_gcode_modes+0x66>
 8019f3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f44:	d0f1      	beq.n	8019f2a <report_gcode_modes+0x4a>
    if(is_g92_active())
 8019f46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f4e:	d004      	beq.n	8019f5a <report_gcode_modes+0x7a>
        hal.stream.write(" G92");
 8019f50:	4b70      	ldr	r3, [pc, #448]	@ (801a114 <report_gcode_modes+0x234>)
 8019f52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019f56:	4874      	ldr	r0, [pc, #464]	@ (801a128 <report_gcode_modes+0x248>)
 8019f58:	4798      	blx	r3
    if(settings.mode == Mode_Lathe)
 8019f5a:	4b74      	ldr	r3, [pc, #464]	@ (801a12c <report_gcode_modes+0x24c>)
 8019f5c:	7e1b      	ldrb	r3, [r3, #24]
 8019f5e:	2b02      	cmp	r3, #2
 8019f60:	d07b      	beq.n	801a05a <report_gcode_modes+0x17a>
    hal.stream.write(" G");
 8019f62:	4c6c      	ldr	r4, [pc, #432]	@ (801a114 <report_gcode_modes+0x234>)
 8019f64:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f68:	486e      	ldr	r0, [pc, #440]	@ (801a124 <report_gcode_modes+0x244>)
 8019f6a:	4798      	blx	r3
    hal.stream.write(uitoa((uint32_t)(gc_state.modal.plane_select + 17)));
 8019f6c:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8019f70:	4d6a      	ldr	r5, [pc, #424]	@ (801a11c <report_gcode_modes+0x23c>)
 8019f72:	79a8      	ldrb	r0, [r5, #6]
 8019f74:	3011      	adds	r0, #17
 8019f76:	f7fb fe03 	bl	8015b80 <uitoa>
 8019f7a:	47b0      	blx	r6
    hal.stream.write(gc_state.modal.units_imperial ? " G20" : " G21");
 8019f7c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f80:	78ea      	ldrb	r2, [r5, #3]
 8019f82:	2a00      	cmp	r2, #0
 8019f84:	d074      	beq.n	801a070 <report_gcode_modes+0x190>
 8019f86:	486a      	ldr	r0, [pc, #424]	@ (801a130 <report_gcode_modes+0x250>)
 8019f88:	4798      	blx	r3
    hal.stream.write(gc_state.modal.distance_incremental ? " G91" : " G90");
 8019f8a:	4b62      	ldr	r3, [pc, #392]	@ (801a114 <report_gcode_modes+0x234>)
 8019f8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019f90:	4a62      	ldr	r2, [pc, #392]	@ (801a11c <report_gcode_modes+0x23c>)
 8019f92:	7912      	ldrb	r2, [r2, #4]
 8019f94:	2a00      	cmp	r2, #0
 8019f96:	d06d      	beq.n	801a074 <report_gcode_modes+0x194>
 8019f98:	4866      	ldr	r0, [pc, #408]	@ (801a134 <report_gcode_modes+0x254>)
 8019f9a:	4798      	blx	r3
    hal.stream.write(" G");
 8019f9c:	4c5d      	ldr	r4, [pc, #372]	@ (801a114 <report_gcode_modes+0x234>)
 8019f9e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019fa2:	4860      	ldr	r0, [pc, #384]	@ (801a124 <report_gcode_modes+0x244>)
 8019fa4:	4798      	blx	r3
    hal.stream.write(uitoa((uint32_t)(93 + (gc_state.modal.feed_mode == FeedMode_UnitsPerRev ? 2 : gc_state.modal.feed_mode ^ 1))));
 8019fa6:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 8019faa:	4b5c      	ldr	r3, [pc, #368]	@ (801a11c <report_gcode_modes+0x23c>)
 8019fac:	7898      	ldrb	r0, [r3, #2]
 8019fae:	2802      	cmp	r0, #2
 8019fb0:	d062      	beq.n	801a078 <report_gcode_modes+0x198>
 8019fb2:	f080 0001 	eor.w	r0, r0, #1
 8019fb6:	305d      	adds	r0, #93	@ 0x5d
 8019fb8:	f7fb fde2 	bl	8015b80 <uitoa>
 8019fbc:	47a0      	blx	r4
    if(settings.mode == Mode_Lathe && gc_spindle_get()->cap.variable)
 8019fbe:	4b5b      	ldr	r3, [pc, #364]	@ (801a12c <report_gcode_modes+0x24c>)
 8019fc0:	7e1b      	ldrb	r3, [r3, #24]
 8019fc2:	2b02      	cmp	r3, #2
 8019fc4:	d05a      	beq.n	801a07c <report_gcode_modes+0x19c>
    if(gc_state.modal.tool_offset_mode == ToolLengthOffset_Cancel)
 8019fc6:	4b55      	ldr	r3, [pc, #340]	@ (801a11c <report_gcode_modes+0x23c>)
 8019fc8:	79db      	ldrb	r3, [r3, #7]
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	d167      	bne.n	801a09e <report_gcode_modes+0x1be>
        hal.stream.write(" G49");
 8019fce:	4b51      	ldr	r3, [pc, #324]	@ (801a114 <report_gcode_modes+0x234>)
 8019fd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019fd4:	4858      	ldr	r0, [pc, #352]	@ (801a138 <report_gcode_modes+0x258>)
 8019fd6:	4798      	blx	r3
    hal.stream.write(gc_state.modal.retract_mode == CCRetractMode_RPos ? " G99" : " G98");
 8019fd8:	4b4e      	ldr	r3, [pc, #312]	@ (801a114 <report_gcode_modes+0x234>)
 8019fda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019fde:	4a4f      	ldr	r2, [pc, #316]	@ (801a11c <report_gcode_modes+0x23c>)
 8019fe0:	7f52      	ldrb	r2, [r2, #29]
 8019fe2:	2a01      	cmp	r2, #1
 8019fe4:	d06e      	beq.n	801a0c4 <report_gcode_modes+0x1e4>
 8019fe6:	4855      	ldr	r0, [pc, #340]	@ (801a13c <report_gcode_modes+0x25c>)
 8019fe8:	4798      	blx	r3
    if(gc_state.modal.scaling_active) {
 8019fea:	4b4c      	ldr	r3, [pc, #304]	@ (801a11c <report_gcode_modes+0x23c>)
 8019fec:	7f9b      	ldrb	r3, [r3, #30]
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d06a      	beq.n	801a0c8 <report_gcode_modes+0x1e8>
        hal.stream.write(" G51:");
 8019ff2:	4d48      	ldr	r5, [pc, #288]	@ (801a114 <report_gcode_modes+0x234>)
 8019ff4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019ff8:	4851      	ldr	r0, [pc, #324]	@ (801a140 <report_gcode_modes+0x260>)
 8019ffa:	4798      	blx	r3
        axis_signals_tostring(buf, gc_get_g51_state());
 8019ffc:	f7f3 fa34 	bl	800d468 <gc_get_g51_state>
 801a000:	4601      	mov	r1, r0
 801a002:	4c50      	ldr	r4, [pc, #320]	@ (801a144 <report_gcode_modes+0x264>)
 801a004:	4620      	mov	r0, r4
 801a006:	f7fe faa5 	bl	8018554 <axis_signals_tostring>
        hal.stream.write(buf);
 801a00a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801a00e:	4620      	mov	r0, r4
 801a010:	4798      	blx	r3
    if (gc_state.modal.program_flow) {
 801a012:	4b42      	ldr	r3, [pc, #264]	@ (801a11c <report_gcode_modes+0x23c>)
 801a014:	7e1b      	ldrb	r3, [r3, #24]
 801a016:	2b00      	cmp	r3, #0
 801a018:	d069      	beq.n	801a0ee <report_gcode_modes+0x20e>
        switch (gc_state.modal.program_flow) {
 801a01a:	2b1e      	cmp	r3, #30
 801a01c:	d85a      	bhi.n	801a0d4 <report_gcode_modes+0x1f4>
 801a01e:	b25a      	sxtb	r2, r3
 801a020:	2a00      	cmp	r2, #0
 801a022:	d064      	beq.n	801a0ee <report_gcode_modes+0x20e>
 801a024:	3b01      	subs	r3, #1
 801a026:	2b1d      	cmp	r3, #29
 801a028:	d861      	bhi.n	801a0ee <report_gcode_modes+0x20e>
 801a02a:	e8df f003 	tbb	[pc, r3]
 801a02e:	ab6d      	.short	0xab6d
 801a030:	6060605b 	.word	0x6060605b
 801a034:	60606060 	.word	0x60606060
 801a038:	60606060 	.word	0x60606060
 801a03c:	60606060 	.word	0x60606060
 801a040:	60606060 	.word	0x60606060
 801a044:	60606060 	.word	0x60606060
 801a048:	b1606060 	.word	0xb1606060
        hal.stream.write(uitoa((uint32_t)gc_state.modal.motion));
 801a04c:	4b31      	ldr	r3, [pc, #196]	@ (801a114 <report_gcode_modes+0x234>)
 801a04e:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 801a052:	f7fb fd95 	bl	8015b80 <uitoa>
 801a056:	47a0      	blx	r4
 801a058:	e75a      	b.n	8019f10 <report_gcode_modes+0x30>
        hal.stream.write(gc_state.modal.diameter_mode ? " G7" : " G8");
 801a05a:	4b2e      	ldr	r3, [pc, #184]	@ (801a114 <report_gcode_modes+0x234>)
 801a05c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a060:	4a2e      	ldr	r2, [pc, #184]	@ (801a11c <report_gcode_modes+0x23c>)
 801a062:	7952      	ldrb	r2, [r2, #5]
 801a064:	b112      	cbz	r2, 801a06c <report_gcode_modes+0x18c>
 801a066:	4838      	ldr	r0, [pc, #224]	@ (801a148 <report_gcode_modes+0x268>)
 801a068:	4798      	blx	r3
 801a06a:	e77a      	b.n	8019f62 <report_gcode_modes+0x82>
 801a06c:	4837      	ldr	r0, [pc, #220]	@ (801a14c <report_gcode_modes+0x26c>)
 801a06e:	e7fb      	b.n	801a068 <report_gcode_modes+0x188>
    hal.stream.write(gc_state.modal.units_imperial ? " G20" : " G21");
 801a070:	4837      	ldr	r0, [pc, #220]	@ (801a150 <report_gcode_modes+0x270>)
 801a072:	e789      	b.n	8019f88 <report_gcode_modes+0xa8>
    hal.stream.write(gc_state.modal.distance_incremental ? " G91" : " G90");
 801a074:	4837      	ldr	r0, [pc, #220]	@ (801a154 <report_gcode_modes+0x274>)
 801a076:	e790      	b.n	8019f9a <report_gcode_modes+0xba>
    hal.stream.write(uitoa((uint32_t)(93 + (gc_state.modal.feed_mode == FeedMode_UnitsPerRev ? 2 : gc_state.modal.feed_mode ^ 1))));
 801a078:	205f      	movs	r0, #95	@ 0x5f
 801a07a:	e79d      	b.n	8019fb8 <report_gcode_modes+0xd8>
    if(settings.mode == Mode_Lathe && gc_spindle_get()->cap.variable)
 801a07c:	f7f3 fbc0 	bl	800d800 <gc_spindle_get>
 801a080:	7a83      	ldrb	r3, [r0, #10]
 801a082:	f013 0f01 	tst.w	r3, #1
 801a086:	d09e      	beq.n	8019fc6 <report_gcode_modes+0xe6>
        hal.stream.write(gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? " G97" : " G96");
 801a088:	4b22      	ldr	r3, [pc, #136]	@ (801a114 <report_gcode_modes+0x234>)
 801a08a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a08e:	4a23      	ldr	r2, [pc, #140]	@ (801a11c <report_gcode_modes+0x23c>)
 801a090:	7ed2      	ldrb	r2, [r2, #27]
 801a092:	b912      	cbnz	r2, 801a09a <report_gcode_modes+0x1ba>
 801a094:	4830      	ldr	r0, [pc, #192]	@ (801a158 <report_gcode_modes+0x278>)
 801a096:	4798      	blx	r3
 801a098:	e795      	b.n	8019fc6 <report_gcode_modes+0xe6>
 801a09a:	4830      	ldr	r0, [pc, #192]	@ (801a15c <report_gcode_modes+0x27c>)
 801a09c:	e7fb      	b.n	801a096 <report_gcode_modes+0x1b6>
        hal.stream.write(" G43");
 801a09e:	4b1d      	ldr	r3, [pc, #116]	@ (801a114 <report_gcode_modes+0x234>)
 801a0a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a0a4:	482e      	ldr	r0, [pc, #184]	@ (801a160 <report_gcode_modes+0x280>)
 801a0a6:	4798      	blx	r3
        if(gc_state.modal.tool_offset_mode != ToolLengthOffset_Enable)
 801a0a8:	4b1c      	ldr	r3, [pc, #112]	@ (801a11c <report_gcode_modes+0x23c>)
 801a0aa:	79db      	ldrb	r3, [r3, #7]
 801a0ac:	2b01      	cmp	r3, #1
 801a0ae:	d093      	beq.n	8019fd8 <report_gcode_modes+0xf8>
            hal.stream.write(gc_state.modal.tool_offset_mode == ToolLengthOffset_EnableDynamic ? ".1" : ".2");
 801a0b0:	4a18      	ldr	r2, [pc, #96]	@ (801a114 <report_gcode_modes+0x234>)
 801a0b2:	f8d2 20b4 	ldr.w	r2, [r2, #180]	@ 0xb4
 801a0b6:	2b02      	cmp	r3, #2
 801a0b8:	d002      	beq.n	801a0c0 <report_gcode_modes+0x1e0>
 801a0ba:	482a      	ldr	r0, [pc, #168]	@ (801a164 <report_gcode_modes+0x284>)
 801a0bc:	4790      	blx	r2
 801a0be:	e78b      	b.n	8019fd8 <report_gcode_modes+0xf8>
 801a0c0:	4829      	ldr	r0, [pc, #164]	@ (801a168 <report_gcode_modes+0x288>)
 801a0c2:	e7fb      	b.n	801a0bc <report_gcode_modes+0x1dc>
    hal.stream.write(gc_state.modal.retract_mode == CCRetractMode_RPos ? " G99" : " G98");
 801a0c4:	4829      	ldr	r0, [pc, #164]	@ (801a16c <report_gcode_modes+0x28c>)
 801a0c6:	e78f      	b.n	8019fe8 <report_gcode_modes+0x108>
        hal.stream.write(" G50");
 801a0c8:	4b12      	ldr	r3, [pc, #72]	@ (801a114 <report_gcode_modes+0x234>)
 801a0ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a0ce:	4828      	ldr	r0, [pc, #160]	@ (801a170 <report_gcode_modes+0x290>)
 801a0d0:	4798      	blx	r3
 801a0d2:	e79e      	b.n	801a012 <report_gcode_modes+0x132>
        switch (gc_state.modal.program_flow) {
 801a0d4:	2b3c      	cmp	r3, #60	@ 0x3c
 801a0d6:	d10a      	bne.n	801a0ee <report_gcode_modes+0x20e>
                hal.stream.write(" M60");
 801a0d8:	4b0e      	ldr	r3, [pc, #56]	@ (801a114 <report_gcode_modes+0x234>)
 801a0da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a0de:	4825      	ldr	r0, [pc, #148]	@ (801a174 <report_gcode_modes+0x294>)
 801a0e0:	4798      	blx	r3
                break;
 801a0e2:	e004      	b.n	801a0ee <report_gcode_modes+0x20e>
                hal.stream.write(" M0");
 801a0e4:	4b0b      	ldr	r3, [pc, #44]	@ (801a114 <report_gcode_modes+0x234>)
 801a0e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a0ea:	4823      	ldr	r0, [pc, #140]	@ (801a178 <report_gcode_modes+0x298>)
 801a0ec:	4798      	blx	r3
    hal.stream.write(gc_state.modal.spindle.state.on ? (gc_state.modal.spindle.state.ccw ? " M4" : " M3") : " M5");
 801a0ee:	4b09      	ldr	r3, [pc, #36]	@ (801a114 <report_gcode_modes+0x234>)
 801a0f0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 801a0f4:	4b09      	ldr	r3, [pc, #36]	@ (801a11c <report_gcode_modes+0x23c>)
 801a0f6:	7e9b      	ldrb	r3, [r3, #26]
 801a0f8:	f013 0f01 	tst.w	r3, #1
 801a0fc:	d04e      	beq.n	801a19c <report_gcode_modes+0x2bc>
 801a0fe:	f013 0f02 	tst.w	r3, #2
 801a102:	d06c      	beq.n	801a1de <report_gcode_modes+0x2fe>
 801a104:	481d      	ldr	r0, [pc, #116]	@ (801a17c <report_gcode_modes+0x29c>)
 801a106:	e04a      	b.n	801a19e <report_gcode_modes+0x2be>
                hal.stream.write(" M1");
 801a108:	4b02      	ldr	r3, [pc, #8]	@ (801a114 <report_gcode_modes+0x234>)
 801a10a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a10e:	481c      	ldr	r0, [pc, #112]	@ (801a180 <report_gcode_modes+0x2a0>)
 801a110:	4798      	blx	r3
                break;
 801a112:	e7ec      	b.n	801a0ee <report_gcode_modes+0x20e>
 801a114:	200018dc 	.word	0x200018dc
 801a118:	0802c470 	.word	0x0802c470
 801a11c:	20001614 	.word	0x20001614
 801a120:	0802c478 	.word	0x0802c478
 801a124:	0802c47c 	.word	0x0802c47c
 801a128:	0802c480 	.word	0x0802c480
 801a12c:	200022f4 	.word	0x200022f4
 801a130:	0802c428 	.word	0x0802c428
 801a134:	0802c438 	.word	0x0802c438
 801a138:	0802c488 	.word	0x0802c488
 801a13c:	0802c468 	.word	0x0802c468
 801a140:	0802c498 	.word	0x0802c498
 801a144:	200021c4 	.word	0x200021c4
 801a148:	0802c420 	.word	0x0802c420
 801a14c:	0802c424 	.word	0x0802c424
 801a150:	0802c430 	.word	0x0802c430
 801a154:	0802c440 	.word	0x0802c440
 801a158:	0802c448 	.word	0x0802c448
 801a15c:	0802c450 	.word	0x0802c450
 801a160:	0802c490 	.word	0x0802c490
 801a164:	0802c45c 	.word	0x0802c45c
 801a168:	0802c458 	.word	0x0802c458
 801a16c:	0802c460 	.word	0x0802c460
 801a170:	0802c4a0 	.word	0x0802c4a0
 801a174:	0802c4bc 	.word	0x0802c4bc
 801a178:	0802c4a8 	.word	0x0802c4a8
 801a17c:	0802a450 	.word	0x0802a450
 801a180:	0802c4ac 	.word	0x0802c4ac
                hal.stream.write(" M2");
 801a184:	4b4e      	ldr	r3, [pc, #312]	@ (801a2c0 <report_gcode_modes+0x3e0>)
 801a186:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a18a:	484e      	ldr	r0, [pc, #312]	@ (801a2c4 <report_gcode_modes+0x3e4>)
 801a18c:	4798      	blx	r3
                break;
 801a18e:	e7ae      	b.n	801a0ee <report_gcode_modes+0x20e>
                hal.stream.write(" M30");
 801a190:	4b4b      	ldr	r3, [pc, #300]	@ (801a2c0 <report_gcode_modes+0x3e0>)
 801a192:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a196:	484c      	ldr	r0, [pc, #304]	@ (801a2c8 <report_gcode_modes+0x3e8>)
 801a198:	4798      	blx	r3
                break;
 801a19a:	e7a8      	b.n	801a0ee <report_gcode_modes+0x20e>
    hal.stream.write(gc_state.modal.spindle.state.on ? (gc_state.modal.spindle.state.ccw ? " M4" : " M3") : " M5");
 801a19c:	484b      	ldr	r0, [pc, #300]	@ (801a2cc <report_gcode_modes+0x3ec>)
 801a19e:	4790      	blx	r2
    if(gc_state.tool_change)
 801a1a0:	4b4b      	ldr	r3, [pc, #300]	@ (801a2d0 <report_gcode_modes+0x3f0>)
 801a1a2:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801a1a6:	b123      	cbz	r3, 801a1b2 <report_gcode_modes+0x2d2>
        hal.stream.write(" M6");
 801a1a8:	4b45      	ldr	r3, [pc, #276]	@ (801a2c0 <report_gcode_modes+0x3e0>)
 801a1aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a1ae:	4849      	ldr	r0, [pc, #292]	@ (801a2d4 <report_gcode_modes+0x3f4>)
 801a1b0:	4798      	blx	r3
    if (gc_state.modal.coolant.value) {
 801a1b2:	4b47      	ldr	r3, [pc, #284]	@ (801a2d0 <report_gcode_modes+0x3f0>)
 801a1b4:	7e5b      	ldrb	r3, [r3, #25]
 801a1b6:	b1a3      	cbz	r3, 801a1e2 <report_gcode_modes+0x302>
        if (gc_state.modal.coolant.mist)
 801a1b8:	f013 0f02 	tst.w	r3, #2
 801a1bc:	d004      	beq.n	801a1c8 <report_gcode_modes+0x2e8>
             hal.stream.write(" M7");
 801a1be:	4b40      	ldr	r3, [pc, #256]	@ (801a2c0 <report_gcode_modes+0x3e0>)
 801a1c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a1c4:	4844      	ldr	r0, [pc, #272]	@ (801a2d8 <report_gcode_modes+0x3f8>)
 801a1c6:	4798      	blx	r3
        if (gc_state.modal.coolant.flood)
 801a1c8:	4b41      	ldr	r3, [pc, #260]	@ (801a2d0 <report_gcode_modes+0x3f0>)
 801a1ca:	7e5b      	ldrb	r3, [r3, #25]
 801a1cc:	f013 0f01 	tst.w	r3, #1
 801a1d0:	d00c      	beq.n	801a1ec <report_gcode_modes+0x30c>
            hal.stream.write(" M8");
 801a1d2:	4b3b      	ldr	r3, [pc, #236]	@ (801a2c0 <report_gcode_modes+0x3e0>)
 801a1d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a1d8:	4840      	ldr	r0, [pc, #256]	@ (801a2dc <report_gcode_modes+0x3fc>)
 801a1da:	4798      	blx	r3
 801a1dc:	e006      	b.n	801a1ec <report_gcode_modes+0x30c>
    hal.stream.write(gc_state.modal.spindle.state.on ? (gc_state.modal.spindle.state.ccw ? " M4" : " M3") : " M5");
 801a1de:	4840      	ldr	r0, [pc, #256]	@ (801a2e0 <report_gcode_modes+0x400>)
 801a1e0:	e7dd      	b.n	801a19e <report_gcode_modes+0x2be>
        hal.stream.write(" M9");
 801a1e2:	4b37      	ldr	r3, [pc, #220]	@ (801a2c0 <report_gcode_modes+0x3e0>)
 801a1e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a1e8:	483e      	ldr	r0, [pc, #248]	@ (801a2e4 <report_gcode_modes+0x404>)
 801a1ea:	4798      	blx	r3
    if (sys.override.control.feed_rate_disable)
 801a1ec:	4b3e      	ldr	r3, [pc, #248]	@ (801a2e8 <report_gcode_modes+0x408>)
 801a1ee:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801a1f2:	f013 0f01 	tst.w	r3, #1
 801a1f6:	d004      	beq.n	801a202 <report_gcode_modes+0x322>
        hal.stream.write(" M50");
 801a1f8:	4b31      	ldr	r3, [pc, #196]	@ (801a2c0 <report_gcode_modes+0x3e0>)
 801a1fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a1fe:	483b      	ldr	r0, [pc, #236]	@ (801a2ec <report_gcode_modes+0x40c>)
 801a200:	4798      	blx	r3
    if (sys.override.control.spindle_rpm_disable)
 801a202:	4b39      	ldr	r3, [pc, #228]	@ (801a2e8 <report_gcode_modes+0x408>)
 801a204:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801a208:	f013 0f04 	tst.w	r3, #4
 801a20c:	d004      	beq.n	801a218 <report_gcode_modes+0x338>
        hal.stream.write(" M51");
 801a20e:	4b2c      	ldr	r3, [pc, #176]	@ (801a2c0 <report_gcode_modes+0x3e0>)
 801a210:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a214:	4836      	ldr	r0, [pc, #216]	@ (801a2f0 <report_gcode_modes+0x410>)
 801a216:	4798      	blx	r3
    if (sys.override.control.feed_hold_disable)
 801a218:	4b33      	ldr	r3, [pc, #204]	@ (801a2e8 <report_gcode_modes+0x408>)
 801a21a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801a21e:	f013 0f02 	tst.w	r3, #2
 801a222:	d004      	beq.n	801a22e <report_gcode_modes+0x34e>
        hal.stream.write(" M53");
 801a224:	4b26      	ldr	r3, [pc, #152]	@ (801a2c0 <report_gcode_modes+0x3e0>)
 801a226:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a22a:	4832      	ldr	r0, [pc, #200]	@ (801a2f4 <report_gcode_modes+0x414>)
 801a22c:	4798      	blx	r3
    if (settings.parking.flags.enable_override_control && sys.override.control.parking_disable)
 801a22e:	4b32      	ldr	r3, [pc, #200]	@ (801a2f8 <report_gcode_modes+0x418>)
 801a230:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801a234:	f013 0f04 	tst.w	r3, #4
 801a238:	d00a      	beq.n	801a250 <report_gcode_modes+0x370>
 801a23a:	4b2b      	ldr	r3, [pc, #172]	@ (801a2e8 <report_gcode_modes+0x408>)
 801a23c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801a240:	f013 0f08 	tst.w	r3, #8
 801a244:	d004      	beq.n	801a250 <report_gcode_modes+0x370>
        hal.stream.write(" M56");
 801a246:	4b1e      	ldr	r3, [pc, #120]	@ (801a2c0 <report_gcode_modes+0x3e0>)
 801a248:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a24c:	482b      	ldr	r0, [pc, #172]	@ (801a2fc <report_gcode_modes+0x41c>)
 801a24e:	4798      	blx	r3
    hal.stream.write(appendbuf(2, " T", uitoa((uint32_t)gc_state.tool->tool_id)));
 801a250:	4d1b      	ldr	r5, [pc, #108]	@ (801a2c0 <report_gcode_modes+0x3e0>)
 801a252:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 801a256:	4c1e      	ldr	r4, [pc, #120]	@ (801a2d0 <report_gcode_modes+0x3f0>)
 801a258:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 801a25c:	6918      	ldr	r0, [r3, #16]
 801a25e:	f7fb fc8f 	bl	8015b80 <uitoa>
 801a262:	4602      	mov	r2, r0
 801a264:	4926      	ldr	r1, [pc, #152]	@ (801a300 <report_gcode_modes+0x420>)
 801a266:	2002      	movs	r0, #2
 801a268:	f7fe fd5a 	bl	8018d20 <appendbuf>
 801a26c:	47b0      	blx	r6
    hal.stream.write(appendbuf(2, " F", get_rate_value(gc_state.feed_rate)));
 801a26e:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 801a272:	4b24      	ldr	r3, [pc, #144]	@ (801a304 <report_gcode_modes+0x424>)
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	ed94 0a18 	vldr	s0, [r4, #96]	@ 0x60
 801a27a:	4798      	blx	r3
 801a27c:	4602      	mov	r2, r0
 801a27e:	4922      	ldr	r1, [pc, #136]	@ (801a308 <report_gcode_modes+0x428>)
 801a280:	2002      	movs	r0, #2
 801a282:	f7fe fd4d 	bl	8018d20 <appendbuf>
 801a286:	47a8      	blx	r5
    if(gc_spindle_get()->cap.variable)
 801a288:	f7f3 faba 	bl	800d800 <gc_spindle_get>
 801a28c:	7a83      	ldrb	r3, [r0, #10]
 801a28e:	f013 0f01 	tst.w	r3, #1
 801a292:	d105      	bne.n	801a2a0 <report_gcode_modes+0x3c0>
    hal.stream.write("]" ASCII_EOL);
 801a294:	4b0a      	ldr	r3, [pc, #40]	@ (801a2c0 <report_gcode_modes+0x3e0>)
 801a296:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a29a:	481c      	ldr	r0, [pc, #112]	@ (801a30c <report_gcode_modes+0x42c>)
 801a29c:	4798      	blx	r3
}
 801a29e:	bd70      	pop	{r4, r5, r6, pc}
        hal.stream.write(appendbuf(2, " S", ftoa(gc_state.spindle.rpm, N_DECIMAL_RPMVALUE)));
 801a2a0:	4b07      	ldr	r3, [pc, #28]	@ (801a2c0 <report_gcode_modes+0x3e0>)
 801a2a2:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 801a2a6:	2000      	movs	r0, #0
 801a2a8:	4b09      	ldr	r3, [pc, #36]	@ (801a2d0 <report_gcode_modes+0x3f0>)
 801a2aa:	ed93 0a14 	vldr	s0, [r3, #80]	@ 0x50
 801a2ae:	f7fb fc89 	bl	8015bc4 <ftoa>
 801a2b2:	4602      	mov	r2, r0
 801a2b4:	4916      	ldr	r1, [pc, #88]	@ (801a310 <report_gcode_modes+0x430>)
 801a2b6:	2002      	movs	r0, #2
 801a2b8:	f7fe fd32 	bl	8018d20 <appendbuf>
 801a2bc:	47a0      	blx	r4
 801a2be:	e7e9      	b.n	801a294 <report_gcode_modes+0x3b4>
 801a2c0:	200018dc 	.word	0x200018dc
 801a2c4:	0802c4b0 	.word	0x0802c4b0
 801a2c8:	0802c4b4 	.word	0x0802c4b4
 801a2cc:	0802a458 	.word	0x0802a458
 801a2d0:	20001614 	.word	0x20001614
 801a2d4:	0802a460 	.word	0x0802a460
 801a2d8:	0802a468 	.word	0x0802a468
 801a2dc:	0802c4c4 	.word	0x0802c4c4
 801a2e0:	0802a448 	.word	0x0802a448
 801a2e4:	0802c4c8 	.word	0x0802c4c8
 801a2e8:	20001bbc 	.word	0x20001bbc
 801a2ec:	0802c4cc 	.word	0x0802c4cc
 801a2f0:	0802c4d4 	.word	0x0802c4d4
 801a2f4:	0802c4dc 	.word	0x0802c4dc
 801a2f8:	200022f4 	.word	0x200022f4
 801a2fc:	0802c4e4 	.word	0x0802c4e4
 801a300:	0802c4ec 	.word	0x0802c4ec
 801a304:	200021b8 	.word	0x200021b8
 801a308:	0802c4f0 	.word	0x0802c4f0
 801a30c:	0802c134 	.word	0x0802c134
 801a310:	0802c4f4 	.word	0x0802c4f4

0801a314 <report_startup_line>:
{
 801a314:	b570      	push	{r4, r5, r6, lr}
 801a316:	460d      	mov	r5, r1
    hal.stream.write(appendbuf(3, "$N", uitoa((uint32_t)n), "="));
 801a318:	4c0a      	ldr	r4, [pc, #40]	@ (801a344 <report_startup_line+0x30>)
 801a31a:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 801a31e:	f7fb fc2f 	bl	8015b80 <uitoa>
 801a322:	4602      	mov	r2, r0
 801a324:	4b08      	ldr	r3, [pc, #32]	@ (801a348 <report_startup_line+0x34>)
 801a326:	4909      	ldr	r1, [pc, #36]	@ (801a34c <report_startup_line+0x38>)
 801a328:	2003      	movs	r0, #3
 801a32a:	f7fe fcf9 	bl	8018d20 <appendbuf>
 801a32e:	47b0      	blx	r6
    hal.stream.write(line);
 801a330:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a334:	4628      	mov	r0, r5
 801a336:	4798      	blx	r3
    hal.stream.write(ASCII_EOL);
 801a338:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a33c:	4804      	ldr	r0, [pc, #16]	@ (801a350 <report_startup_line+0x3c>)
 801a33e:	4798      	blx	r3
}
 801a340:	bd70      	pop	{r4, r5, r6, pc}
 801a342:	bf00      	nop
 801a344:	200018dc 	.word	0x200018dc
 801a348:	0802c3ac 	.word	0x0802c3ac
 801a34c:	0802c4f8 	.word	0x0802c4f8
 801a350:	0802c7e0 	.word	0x0802c7e0

0801a354 <report_execute_startup_message>:
{
 801a354:	b570      	push	{r4, r5, r6, lr}
 801a356:	4606      	mov	r6, r0
 801a358:	460c      	mov	r4, r1
    hal.stream.write(">");
 801a35a:	4d09      	ldr	r5, [pc, #36]	@ (801a380 <report_execute_startup_message+0x2c>)
 801a35c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801a360:	4808      	ldr	r0, [pc, #32]	@ (801a384 <report_execute_startup_message+0x30>)
 801a362:	4798      	blx	r3
    hal.stream.write(line);
 801a364:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801a368:	4630      	mov	r0, r6
 801a36a:	4798      	blx	r3
    hal.stream.write(":");
 801a36c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801a370:	4805      	ldr	r0, [pc, #20]	@ (801a388 <report_execute_startup_message+0x34>)
 801a372:	4798      	blx	r3
    grbl.report.status_message(status_code);
 801a374:	4b05      	ldr	r3, [pc, #20]	@ (801a38c <report_execute_startup_message+0x38>)
 801a376:	689b      	ldr	r3, [r3, #8]
 801a378:	4620      	mov	r0, r4
 801a37a:	4798      	blx	r3
}
 801a37c:	bd70      	pop	{r4, r5, r6, pc}
 801a37e:	bf00      	nop
 801a380:	200018dc 	.word	0x200018dc
 801a384:	0802c4fc 	.word	0x0802c4fc
 801a388:	0802c49c 	.word	0x0802c49c
 801a38c:	20001ac4 	.word	0x20001ac4

0801a390 <report_build_info>:
{
 801a390:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a392:	b09b      	sub	sp, #108	@ 0x6c
 801a394:	4605      	mov	r5, r0
    hal.stream.write("[VER:" GRBL_VERSION ".");
 801a396:	4c7f      	ldr	r4, [pc, #508]	@ (801a594 <report_build_info+0x204>)
 801a398:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a39c:	487e      	ldr	r0, [pc, #504]	@ (801a598 <report_build_info+0x208>)
 801a39e:	4798      	blx	r3
    hal.stream.write(uitoa(GRBL_BUILD));
 801a3a0:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 801a3a4:	487d      	ldr	r0, [pc, #500]	@ (801a59c <report_build_info+0x20c>)
 801a3a6:	f7fb fbeb 	bl	8015b80 <uitoa>
 801a3aa:	47b0      	blx	r6
    hal.stream.write(":");
 801a3ac:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a3b0:	487b      	ldr	r0, [pc, #492]	@ (801a5a0 <report_build_info+0x210>)
 801a3b2:	4798      	blx	r3
    hal.stream.write(line);
 801a3b4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a3b8:	4628      	mov	r0, r5
 801a3ba:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 801a3bc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a3c0:	4878      	ldr	r0, [pc, #480]	@ (801a5a4 <report_build_info+0x214>)
 801a3c2:	4798      	blx	r3
    spindle_ptrs_t *spindle = spindle_get(0);
 801a3c4:	2000      	movs	r0, #0
 801a3c6:	f004 fa0f 	bl	801e7e8 <spindle_get>
 801a3ca:	4603      	mov	r3, r0
    strcpy(buf, "[OPT:");
 801a3cc:	4a76      	ldr	r2, [pc, #472]	@ (801a5a8 <report_build_info+0x218>)
 801a3ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a3d2:	9001      	str	r0, [sp, #4]
 801a3d4:	f8ad 1008 	strh.w	r1, [sp, #8]
    if(spindle && spindle->cap.variable)
 801a3d8:	461a      	mov	r2, r3
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	f000 80d4 	beq.w	801a588 <report_build_info+0x1f8>
 801a3e0:	7a9b      	ldrb	r3, [r3, #10]
 801a3e2:	f013 0f01 	tst.w	r3, #1
 801a3e6:	f000 80d2 	beq.w	801a58e <report_build_info+0x1fe>
        *append++ = 'V';
 801a3ea:	2356      	movs	r3, #86	@ 0x56
 801a3ec:	f88d 3009 	strb.w	r3, [sp, #9]
 801a3f0:	f10d 010a 	add.w	r1, sp, #10
    *append++ = 'N';
 801a3f4:	460b      	mov	r3, r1
 801a3f6:	204e      	movs	r0, #78	@ 0x4e
 801a3f8:	f803 0b01 	strb.w	r0, [r3], #1
    if(hal.coolant_cap.mist)
 801a3fc:	4865      	ldr	r0, [pc, #404]	@ (801a594 <report_build_info+0x204>)
 801a3fe:	f890 01e4 	ldrb.w	r0, [r0, #484]	@ 0x1e4
 801a402:	f010 0f02 	tst.w	r0, #2
 801a406:	d002      	beq.n	801a40e <report_build_info+0x7e>
        *append++ = 'M';
 801a408:	1c8b      	adds	r3, r1, #2
 801a40a:	204d      	movs	r0, #77	@ 0x4d
 801a40c:	7048      	strb	r0, [r1, #1]
    if(settings.parking.flags.enabled)
 801a40e:	4967      	ldr	r1, [pc, #412]	@ (801a5ac <report_build_info+0x21c>)
 801a410:	f891 1128 	ldrb.w	r1, [r1, #296]	@ 0x128
 801a414:	f011 0f01 	tst.w	r1, #1
 801a418:	d002      	beq.n	801a420 <report_build_info+0x90>
        *append++ = 'P';
 801a41a:	2150      	movs	r1, #80	@ 0x50
 801a41c:	f803 1b01 	strb.w	r1, [r3], #1
    if(settings.homing.flags.force_set_origin)
 801a420:	4962      	ldr	r1, [pc, #392]	@ (801a5ac <report_build_info+0x21c>)
 801a422:	f891 1114 	ldrb.w	r1, [r1, #276]	@ 0x114
 801a426:	f011 0f08 	tst.w	r1, #8
 801a42a:	d002      	beq.n	801a432 <report_build_info+0xa2>
        *append++ = 'Z';
 801a42c:	215a      	movs	r1, #90	@ 0x5a
 801a42e:	f803 1b01 	strb.w	r1, [r3], #1
    if(settings.homing.flags.single_axis_commands)
 801a432:	495e      	ldr	r1, [pc, #376]	@ (801a5ac <report_build_info+0x21c>)
 801a434:	f891 1114 	ldrb.w	r1, [r1, #276]	@ 0x114
 801a438:	f011 0f02 	tst.w	r1, #2
 801a43c:	d002      	beq.n	801a444 <report_build_info+0xb4>
        *append++ = 'H';
 801a43e:	2148      	movs	r1, #72	@ 0x48
 801a440:	f803 1b01 	strb.w	r1, [r3], #1
    if(settings.limits.flags.two_switches)
 801a444:	4959      	ldr	r1, [pc, #356]	@ (801a5ac <report_build_info+0x21c>)
 801a446:	f891 1124 	ldrb.w	r1, [r1, #292]	@ 0x124
 801a44a:	f011 0f10 	tst.w	r1, #16
 801a44e:	d002      	beq.n	801a456 <report_build_info+0xc6>
        *append++ = 'T';
 801a450:	2154      	movs	r1, #84	@ 0x54
 801a452:	f803 1b01 	strb.w	r1, [r3], #1
    if(settings.probe.allow_feed_override)
 801a456:	4955      	ldr	r1, [pc, #340]	@ (801a5ac <report_build_info+0x21c>)
 801a458:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
 801a45c:	f011 0f10 	tst.w	r1, #16
 801a460:	d002      	beq.n	801a468 <report_build_info+0xd8>
        *append++ = 'A';
 801a462:	2141      	movs	r1, #65	@ 0x41
 801a464:	f803 1b01 	strb.w	r1, [r3], #1
    if(spindle && !spindle->cap.direction) // NOTE: Shown when disabled.
 801a468:	b132      	cbz	r2, 801a478 <report_build_info+0xe8>
 801a46a:	7a92      	ldrb	r2, [r2, #10]
 801a46c:	f012 0f02 	tst.w	r2, #2
 801a470:	d102      	bne.n	801a478 <report_build_info+0xe8>
        *append++ = 'D';
 801a472:	2244      	movs	r2, #68	@ 0x44
 801a474:	f803 2b01 	strb.w	r2, [r3], #1
    if(settings.spindle.flags.enable_rpm_controlled)
 801a478:	4a4c      	ldr	r2, [pc, #304]	@ (801a5ac <report_build_info+0x21c>)
 801a47a:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 801a47e:	f012 0f01 	tst.w	r2, #1
 801a482:	d002      	beq.n	801a48a <report_build_info+0xfa>
        *append++ = '0';
 801a484:	2230      	movs	r2, #48	@ 0x30
 801a486:	f803 2b01 	strb.w	r2, [r3], #1
    if(hal.driver_cap.software_debounce)
 801a48a:	4a42      	ldr	r2, [pc, #264]	@ (801a594 <report_build_info+0x204>)
 801a48c:	f892 21d8 	ldrb.w	r2, [r2, #472]	@ 0x1d8
 801a490:	f012 0f01 	tst.w	r2, #1
 801a494:	d002      	beq.n	801a49c <report_build_info+0x10c>
        *append++ = 'S';
 801a496:	2253      	movs	r2, #83	@ 0x53
 801a498:	f803 2b01 	strb.w	r2, [r3], #1
    if(settings.parking.flags.enable_override_control)
 801a49c:	4a43      	ldr	r2, [pc, #268]	@ (801a5ac <report_build_info+0x21c>)
 801a49e:	f892 2128 	ldrb.w	r2, [r2, #296]	@ 0x128
 801a4a2:	f012 0f04 	tst.w	r2, #4
 801a4a6:	d002      	beq.n	801a4ae <report_build_info+0x11e>
        *append++ = 'R';
 801a4a8:	2252      	movs	r2, #82	@ 0x52
 801a4aa:	f803 2b01 	strb.w	r2, [r3], #1
    if(!settings.homing.flags.init_lock)
 801a4ae:	4a3f      	ldr	r2, [pc, #252]	@ (801a5ac <report_build_info+0x21c>)
 801a4b0:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 801a4b4:	f012 0f04 	tst.w	r2, #4
 801a4b8:	d102      	bne.n	801a4c0 <report_build_info+0x130>
        *append++ = 'L';
 801a4ba:	224c      	movs	r2, #76	@ 0x4c
 801a4bc:	f803 2b01 	strb.w	r2, [r3], #1
    if(hal.signals_cap.safety_door_ajar)
 801a4c0:	4a34      	ldr	r2, [pc, #208]	@ (801a594 <report_build_info+0x204>)
 801a4c2:	f892 21dc 	ldrb.w	r2, [r2, #476]	@ 0x1dc
 801a4c6:	f012 0f08 	tst.w	r2, #8
 801a4ca:	d002      	beq.n	801a4d2 <report_build_info+0x142>
        *append++ = '+';
 801a4cc:	222b      	movs	r2, #43	@ 0x2b
 801a4ce:	f803 2b01 	strb.w	r2, [r3], #1
    if(!settings.status_report.sync_on_wco_change) // NOTE: Shown when disabled.
 801a4d2:	4a36      	ldr	r2, [pc, #216]	@ (801a5ac <report_build_info+0x21c>)
 801a4d4:	f892 20fd 	ldrb.w	r2, [r2, #253]	@ 0xfd
 801a4d8:	f012 0f01 	tst.w	r2, #1
 801a4dc:	d102      	bne.n	801a4e4 <report_build_info+0x154>
        *append++ = 'W';
 801a4de:	2257      	movs	r2, #87	@ 0x57
 801a4e0:	f803 2b01 	strb.w	r2, [r3], #1
    if(hal.stepper.get_ganged)
 801a4e4:	4a2b      	ldr	r2, [pc, #172]	@ (801a594 <report_build_info+0x204>)
 801a4e6:	f8d2 209c 	ldr.w	r2, [r2, #156]	@ 0x9c
 801a4ea:	b112      	cbz	r2, 801a4f2 <report_build_info+0x162>
        *append++ = '2';
 801a4ec:	2232      	movs	r2, #50	@ 0x32
 801a4ee:	f803 2b01 	strb.w	r2, [r3], #1
    *append++ = ',';
 801a4f2:	222c      	movs	r2, #44	@ 0x2c
 801a4f4:	701a      	strb	r2, [r3, #0]
    *append = '\0';
 801a4f6:	2400      	movs	r4, #0
 801a4f8:	705c      	strb	r4, [r3, #1]
    hal.stream.write(buf);
 801a4fa:	4d26      	ldr	r5, [pc, #152]	@ (801a594 <report_build_info+0x204>)
 801a4fc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801a500:	a801      	add	r0, sp, #4
 801a502:	4798      	blx	r3
    hal.stream.write(uitoa((uint32_t)plan_get_buffer_size()));
 801a504:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 801a508:	f7fc fa20 	bl	801694c <plan_get_buffer_size>
 801a50c:	f7fb fb38 	bl	8015b80 <uitoa>
 801a510:	47b0      	blx	r6
    hal.stream.write(",");
 801a512:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801a516:	4e26      	ldr	r6, [pc, #152]	@ (801a5b0 <report_build_info+0x220>)
 801a518:	4630      	mov	r0, r6
 801a51a:	4798      	blx	r3
    hal.stream.write(uitoa(hal.rx_buffer_size));
 801a51c:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 801a520:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 801a522:	f7fb fb2d 	bl	8015b80 <uitoa>
 801a526:	47b8      	blx	r7
        hal.stream.write(",");
 801a528:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801a52c:	4630      	mov	r0, r6
 801a52e:	4798      	blx	r3
        hal.stream.write(uitoa((uint32_t)N_AXIS));
 801a530:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 801a534:	2003      	movs	r0, #3
 801a536:	f7fb fb23 	bl	8015b80 <uitoa>
 801a53a:	47b8      	blx	r7
        hal.stream.write(",");
 801a53c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801a540:	4630      	mov	r0, r6
 801a542:	4798      	blx	r3
        hal.stream.write(uitoa(grbl.tool_table.n_tools));
 801a544:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 801a548:	4b1a      	ldr	r3, [pc, #104]	@ (801a5b4 <report_build_info+0x224>)
 801a54a:	6998      	ldr	r0, [r3, #24]
 801a54c:	f7fb fb18 	bl	8015b80 <uitoa>
 801a550:	47b0      	blx	r6
    hal.stream.write("]" ASCII_EOL);
 801a552:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801a556:	4813      	ldr	r0, [pc, #76]	@ (801a5a4 <report_build_info+0x214>)
 801a558:	4798      	blx	r3
        nvs_io_t *nvs = nvs_buffer_get_physical();
 801a55a:	f7fc f859 	bl	8016610 <nvs_buffer_get_physical>
 801a55e:	4605      	mov	r5, r0
        strcat(strcpy(buf, "[AXS:"), uitoa(N_AXIS));
 801a560:	4b15      	ldr	r3, [pc, #84]	@ (801a5b8 <report_build_info+0x228>)
 801a562:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a566:	9001      	str	r0, [sp, #4]
 801a568:	f8ad 1008 	strh.w	r1, [sp, #8]
 801a56c:	2003      	movs	r0, #3
 801a56e:	f7fb fb07 	bl	8015b80 <uitoa>
 801a572:	4601      	mov	r1, r0
 801a574:	a801      	add	r0, sp, #4
 801a576:	f00a fcde 	bl	8024f36 <strcat>
        *append++ = ':';
 801a57a:	233a      	movs	r3, #58	@ 0x3a
 801a57c:	f88d 300a 	strb.w	r3, [sp, #10]
        for(idx = 0; idx < N_AXIS; idx++)
 801a580:	4622      	mov	r2, r4
        *append++ = ':';
 801a582:	f10d 030b 	add.w	r3, sp, #11
        for(idx = 0; idx < N_AXIS; idx++)
 801a586:	e020      	b.n	801a5ca <report_build_info+0x23a>
    char *append = &buf[5];
 801a588:	f10d 0109 	add.w	r1, sp, #9
 801a58c:	e732      	b.n	801a3f4 <report_build_info+0x64>
 801a58e:	f10d 0109 	add.w	r1, sp, #9
 801a592:	e72f      	b.n	801a3f4 <report_build_info+0x64>
 801a594:	200018dc 	.word	0x200018dc
 801a598:	0802c52c 	.word	0x0802c52c
 801a59c:	0134d94f 	.word	0x0134d94f
 801a5a0:	0802c49c 	.word	0x0802c49c
 801a5a4:	0802c134 	.word	0x0802c134
 801a5a8:	0802c538 	.word	0x0802c538
 801a5ac:	200022f4 	.word	0x200022f4
 801a5b0:	0802c560 	.word	0x0802c560
 801a5b4:	20001ac4 	.word	0x20001ac4
 801a5b8:	0802c540 	.word	0x0802c540
            *append++ = *axis_letter[idx];
 801a5bc:	49ab      	ldr	r1, [pc, #684]	@ (801a86c <report_build_info+0x4dc>)
 801a5be:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a5c2:	7809      	ldrb	r1, [r1, #0]
 801a5c4:	f803 1b01 	strb.w	r1, [r3], #1
        for(idx = 0; idx < N_AXIS; idx++)
 801a5c8:	3201      	adds	r2, #1
 801a5ca:	2a02      	cmp	r2, #2
 801a5cc:	d9f6      	bls.n	801a5bc <report_build_info+0x22c>
        *append = '\0';
 801a5ce:	2200      	movs	r2, #0
 801a5d0:	701a      	strb	r2, [r3, #0]
        hal.stream.write(strcat(buf, "]" ASCII_EOL));
 801a5d2:	4ba7      	ldr	r3, [pc, #668]	@ (801a870 <report_build_info+0x4e0>)
 801a5d4:	f8d3 60b4 	ldr.w	r6, [r3, #180]	@ 0xb4
 801a5d8:	ac01      	add	r4, sp, #4
 801a5da:	4620      	mov	r0, r4
 801a5dc:	f7ed fd90 	bl	8008100 <strlen>
 801a5e0:	4603      	mov	r3, r0
 801a5e2:	4aa4      	ldr	r2, [pc, #656]	@ (801a874 <report_build_info+0x4e4>)
 801a5e4:	6810      	ldr	r0, [r2, #0]
 801a5e6:	50e0      	str	r0, [r4, r3]
 801a5e8:	4620      	mov	r0, r4
 801a5ea:	47b0      	blx	r6
        strcpy(buf, "[NEWOPT:ENUMS,RT");
 801a5ec:	4ea2      	ldr	r6, [pc, #648]	@ (801a878 <report_build_info+0x4e8>)
 801a5ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a5f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a5f2:	6833      	ldr	r3, [r6, #0]
 801a5f4:	7023      	strb	r3, [r4, #0]
        strcat(buf, settings.flags.legacy_rt_commands ? "+," : "-,");
 801a5f6:	4ba1      	ldr	r3, [pc, #644]	@ (801a87c <report_build_info+0x4ec>)
 801a5f8:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 801a5fc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801a600:	f000 81b7 	beq.w	801a972 <report_build_info+0x5e2>
 801a604:	4e9e      	ldr	r6, [pc, #632]	@ (801a880 <report_build_info+0x4f0>)
 801a606:	ac01      	add	r4, sp, #4
 801a608:	4620      	mov	r0, r4
 801a60a:	f7ed fd79 	bl	8008100 <strlen>
 801a60e:	1823      	adds	r3, r4, r0
 801a610:	8831      	ldrh	r1, [r6, #0]
 801a612:	78b2      	ldrb	r2, [r6, #2]
 801a614:	5221      	strh	r1, [r4, r0]
 801a616:	709a      	strb	r2, [r3, #2]
        if(settings.homing.flags.enabled)
 801a618:	4b98      	ldr	r3, [pc, #608]	@ (801a87c <report_build_info+0x4ec>)
 801a61a:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 801a61e:	f013 0f01 	tst.w	r3, #1
 801a622:	f040 81a8 	bne.w	801a976 <report_build_info+0x5e6>
        if(!hal.probe.get_state)
 801a626:	4b92      	ldr	r3, [pc, #584]	@ (801a870 <report_build_info+0x4e0>)
 801a628:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	f000 81ad 	beq.w	801a98c <report_build_info+0x5fc>
        else if(hal.signals_cap.probe_disconnected)
 801a632:	4b8f      	ldr	r3, [pc, #572]	@ (801a870 <report_build_info+0x4e0>)
 801a634:	f993 31dc 	ldrsb.w	r3, [r3, #476]	@ 0x1dc
 801a638:	2b00      	cmp	r3, #0
 801a63a:	f2c0 81b4 	blt.w	801a9a6 <report_build_info+0x616>
        if(hal.signals_cap.stop_disable)
 801a63e:	4b8c      	ldr	r3, [pc, #560]	@ (801a870 <report_build_info+0x4e0>)
 801a640:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801a644:	f013 0f20 	tst.w	r3, #32
 801a648:	f040 81b6 	bne.w	801a9b8 <report_build_info+0x628>
        if(hal.signals_cap.block_delete)
 801a64c:	4b88      	ldr	r3, [pc, #544]	@ (801a870 <report_build_info+0x4e0>)
 801a64e:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801a652:	f013 0f10 	tst.w	r3, #16
 801a656:	f040 81b8 	bne.w	801a9ca <report_build_info+0x63a>
        if(hal.signals_cap.e_stop)
 801a65a:	4b85      	ldr	r3, [pc, #532]	@ (801a870 <report_build_info+0x4e0>)
 801a65c:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801a660:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801a664:	f040 81ba 	bne.w	801a9dc <report_build_info+0x64c>
        if(hal.driver_cap.mpg_mode)
 801a668:	4b81      	ldr	r3, [pc, #516]	@ (801a870 <report_build_info+0x4e0>)
 801a66a:	f993 31d9 	ldrsb.w	r3, [r3, #473]	@ 0x1d9
 801a66e:	2b00      	cmp	r3, #0
 801a670:	f2c0 81bd 	blt.w	801a9ee <report_build_info+0x65e>
        if(settings.mode == Mode_Lathe)
 801a674:	4b81      	ldr	r3, [pc, #516]	@ (801a87c <report_build_info+0x4ec>)
 801a676:	7e1b      	ldrb	r3, [r3, #24]
 801a678:	2b02      	cmp	r3, #2
 801a67a:	f000 81c4 	beq.w	801aa06 <report_build_info+0x676>
        if(hal.driver_cap.laser_ppi_mode)
 801a67e:	4b7c      	ldr	r3, [pc, #496]	@ (801a870 <report_build_info+0x4e0>)
 801a680:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 801a684:	f013 0f01 	tst.w	r3, #1
 801a688:	f040 81cb 	bne.w	801aa22 <report_build_info+0x692>
        if(hal.reboot)
 801a68c:	4b78      	ldr	r3, [pc, #480]	@ (801a870 <report_build_info+0x4e0>)
 801a68e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 801a692:	b14b      	cbz	r3, 801a6a8 <report_build_info+0x318>
            strcat(buf, "REBOOT,");
 801a694:	ac01      	add	r4, sp, #4
 801a696:	4620      	mov	r0, r4
 801a698:	f7ed fd32 	bl	8008100 <strlen>
 801a69c:	4603      	mov	r3, r0
 801a69e:	1826      	adds	r6, r4, r0
 801a6a0:	4a78      	ldr	r2, [pc, #480]	@ (801a884 <report_build_info+0x4f4>)
 801a6a2:	ca03      	ldmia	r2!, {r0, r1}
 801a6a4:	50e0      	str	r0, [r4, r3]
 801a6a6:	6071      	str	r1, [r6, #4]
        if(hal.tool.change)
 801a6a8:	4b71      	ldr	r3, [pc, #452]	@ (801a870 <report_build_info+0x4e0>)
 801a6aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801a6ae:	b153      	cbz	r3, 801a6c6 <report_build_info+0x336>
            strcat(buf, hal.driver_cap.atc ? "ATC," : "TC,"); // Tool change supported (M6)
 801a6b0:	4b6f      	ldr	r3, [pc, #444]	@ (801a870 <report_build_info+0x4e0>)
 801a6b2:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 801a6b6:	f013 0f02 	tst.w	r3, #2
 801a6ba:	f000 81be 	beq.w	801aa3a <report_build_info+0x6aa>
 801a6be:	4972      	ldr	r1, [pc, #456]	@ (801a888 <report_build_info+0x4f8>)
 801a6c0:	a801      	add	r0, sp, #4
 801a6c2:	f00a fc38 	bl	8024f36 <strcat>
        if(hal.driver_cap.spindle_sync)
 801a6c6:	4b6a      	ldr	r3, [pc, #424]	@ (801a870 <report_build_info+0x4e0>)
 801a6c8:	f893 31d9 	ldrb.w	r3, [r3, #473]	@ 0x1d9
 801a6cc:	f013 0f01 	tst.w	r3, #1
 801a6d0:	f040 81b5 	bne.w	801aa3e <report_build_info+0x6ae>
        strcat(buf, "SED,");
 801a6d4:	ac01      	add	r4, sp, #4
 801a6d6:	4620      	mov	r0, r4
 801a6d8:	f7ed fd12 	bl	8008100 <strlen>
 801a6dc:	4603      	mov	r3, r0
 801a6de:	1821      	adds	r1, r4, r0
 801a6e0:	4a6a      	ldr	r2, [pc, #424]	@ (801a88c <report_build_info+0x4fc>)
 801a6e2:	6810      	ldr	r0, [r2, #0]
 801a6e4:	50e0      	str	r0, [r4, r3]
 801a6e6:	7913      	ldrb	r3, [r2, #4]
 801a6e8:	710b      	strb	r3, [r1, #4]
        if(hal.rtc.get_datetime)
 801a6ea:	4b61      	ldr	r3, [pc, #388]	@ (801a870 <report_build_info+0x4e0>)
 801a6ec:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801a6f0:	b14b      	cbz	r3, 801a706 <report_build_info+0x376>
            strcat(buf, "RTC,");
 801a6f2:	4620      	mov	r0, r4
 801a6f4:	f7ed fd04 	bl	8008100 <strlen>
 801a6f8:	4603      	mov	r3, r0
 801a6fa:	1821      	adds	r1, r4, r0
 801a6fc:	4a64      	ldr	r2, [pc, #400]	@ (801a890 <report_build_info+0x500>)
 801a6fe:	6810      	ldr	r0, [r2, #0]
 801a700:	50e0      	str	r0, [r4, r3]
 801a702:	7913      	ldrb	r3, [r2, #4]
 801a704:	710b      	strb	r3, [r1, #4]
        if(canbus_enabled())
 801a706:	f7f2 fcfd 	bl	800d104 <canbus_enabled>
 801a70a:	2800      	cmp	r0, #0
 801a70c:	f040 81a0 	bne.w	801aa50 <report_build_info+0x6c0>
        append = &buf[strlen(buf) - 1];
 801a710:	a801      	add	r0, sp, #4
 801a712:	f7ed fcf5 	bl	8008100 <strlen>
        if(*append == ',')
 801a716:	f100 0367 	add.w	r3, r0, #103	@ 0x67
        append = &buf[strlen(buf) - 1];
 801a71a:	3801      	subs	r0, #1
        if(*append == ',')
 801a71c:	446b      	add	r3, sp
 801a71e:	f813 3c64 	ldrb.w	r3, [r3, #-100]
 801a722:	2b2c      	cmp	r3, #44	@ 0x2c
 801a724:	f000 81a0 	beq.w	801aa68 <report_build_info+0x6d8>
        hal.stream.write(buf);
 801a728:	4c51      	ldr	r4, [pc, #324]	@ (801a870 <report_build_info+0x4e0>)
 801a72a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a72e:	a801      	add	r0, sp, #4
 801a730:	4798      	blx	r3
        grbl.on_report_options(true);
 801a732:	4b58      	ldr	r3, [pc, #352]	@ (801a894 <report_build_info+0x504>)
 801a734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a736:	2001      	movs	r0, #1
 801a738:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 801a73a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a73e:	4e4d      	ldr	r6, [pc, #308]	@ (801a874 <report_build_info+0x4e4>)
 801a740:	4630      	mov	r0, r6
 801a742:	4798      	blx	r3
        hal.stream.write("[FIRMWARE:grblHAL]" ASCII_EOL);
 801a744:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a748:	4853      	ldr	r0, [pc, #332]	@ (801a898 <report_build_info+0x508>)
 801a74a:	4798      	blx	r3
        hal.stream.write("[SIGNALS:");
 801a74c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a750:	4852      	ldr	r0, [pc, #328]	@ (801a89c <report_build_info+0x50c>)
 801a752:	4798      	blx	r3
        control_signals_tostring(buf, hal.signals_cap);
 801a754:	f8b4 11dc 	ldrh.w	r1, [r4, #476]	@ 0x1dc
 801a758:	a801      	add	r0, sp, #4
 801a75a:	f7fd ff13 	bl	8018584 <control_signals_tostring>
        hal.stream.write(buf);
 801a75e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a762:	a801      	add	r0, sp, #4
 801a764:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 801a766:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a76a:	4630      	mov	r0, r6
 801a76c:	4798      	blx	r3
        if(!(nvs->type == NVS_None || nvs->type == NVS_Emulated)) {
 801a76e:	782b      	ldrb	r3, [r5, #0]
 801a770:	b33b      	cbz	r3, 801a7c2 <report_build_info+0x432>
 801a772:	2b04      	cmp	r3, #4
 801a774:	d025      	beq.n	801a7c2 <report_build_info+0x432>
            hal.stream.write("[NVS STORAGE:");
 801a776:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a77a:	4849      	ldr	r0, [pc, #292]	@ (801a8a0 <report_build_info+0x510>)
 801a77c:	4798      	blx	r3
            *buf = '\0';
 801a77e:	2300      	movs	r3, #0
 801a780:	f88d 3004 	strb.w	r3, [sp, #4]
            if(hal.nvs.type == NVS_Emulated)
 801a784:	f894 3174 	ldrb.w	r3, [r4, #372]	@ 0x174
 801a788:	2b04      	cmp	r3, #4
 801a78a:	f000 8175 	beq.w	801aa78 <report_build_info+0x6e8>
            strcat(buf, nvs->type == NVS_Flash ? "FLASH" : (nvs->type == NVS_FRAM ? "FRAM" : "EEPROM"));
 801a78e:	782b      	ldrb	r3, [r5, #0]
 801a790:	2b03      	cmp	r3, #3
 801a792:	f000 817b 	beq.w	801aa8c <report_build_info+0x6fc>
 801a796:	2b02      	cmp	r3, #2
 801a798:	f000 8176 	beq.w	801aa88 <report_build_info+0x6f8>
 801a79c:	4941      	ldr	r1, [pc, #260]	@ (801a8a4 <report_build_info+0x514>)
 801a79e:	a801      	add	r0, sp, #4
 801a7a0:	f00a fbc9 	bl	8024f36 <strcat>
            if(hal.nvs.size_max) {
 801a7a4:	4b32      	ldr	r3, [pc, #200]	@ (801a870 <report_build_info+0x4e0>)
 801a7a6:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	f040 8170 	bne.w	801aa90 <report_build_info+0x700>
            hal.stream.write(buf);
 801a7b0:	4c2f      	ldr	r4, [pc, #188]	@ (801a870 <report_build_info+0x4e0>)
 801a7b2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a7b6:	a801      	add	r0, sp, #4
 801a7b8:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 801a7ba:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a7be:	482d      	ldr	r0, [pc, #180]	@ (801a874 <report_build_info+0x4e4>)
 801a7c0:	4798      	blx	r3
        if(hal.get_free_mem) {
 801a7c2:	4b2b      	ldr	r3, [pc, #172]	@ (801a870 <report_build_info+0x4e0>)
 801a7c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a7c6:	b183      	cbz	r3, 801a7ea <report_build_info+0x45a>
            hal.stream.write("[FREE MEMORY:");
 801a7c8:	4c29      	ldr	r4, [pc, #164]	@ (801a870 <report_build_info+0x4e0>)
 801a7ca:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a7ce:	4836      	ldr	r0, [pc, #216]	@ (801a8a8 <report_build_info+0x518>)
 801a7d0:	4798      	blx	r3
            hal.stream.write(uitoa(hal.get_free_mem() / 1024));
 801a7d2:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 801a7d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a7d8:	4798      	blx	r3
 801a7da:	0a80      	lsrs	r0, r0, #10
 801a7dc:	f7fb f9d0 	bl	8015b80 <uitoa>
 801a7e0:	47a8      	blx	r5
            hal.stream.write("K]" ASCII_EOL);
 801a7e2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a7e6:	4831      	ldr	r0, [pc, #196]	@ (801a8ac <report_build_info+0x51c>)
 801a7e8:	4798      	blx	r3
        if(hal.info) {
 801a7ea:	4b21      	ldr	r3, [pc, #132]	@ (801a870 <report_build_info+0x4e0>)
 801a7ec:	685b      	ldr	r3, [r3, #4]
 801a7ee:	b163      	cbz	r3, 801a80a <report_build_info+0x47a>
            hal.stream.write("[DRIVER:");
 801a7f0:	4c1f      	ldr	r4, [pc, #124]	@ (801a870 <report_build_info+0x4e0>)
 801a7f2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a7f6:	482e      	ldr	r0, [pc, #184]	@ (801a8b0 <report_build_info+0x520>)
 801a7f8:	4798      	blx	r3
            hal.stream.write(hal.info);
 801a7fa:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a7fe:	6860      	ldr	r0, [r4, #4]
 801a800:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 801a802:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a806:	481b      	ldr	r0, [pc, #108]	@ (801a874 <report_build_info+0x4e4>)
 801a808:	4798      	blx	r3
        if(hal.driver_version) {
 801a80a:	4b19      	ldr	r3, [pc, #100]	@ (801a870 <report_build_info+0x4e0>)
 801a80c:	689b      	ldr	r3, [r3, #8]
 801a80e:	b163      	cbz	r3, 801a82a <report_build_info+0x49a>
            hal.stream.write("[DRIVER VERSION:");
 801a810:	4c17      	ldr	r4, [pc, #92]	@ (801a870 <report_build_info+0x4e0>)
 801a812:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a816:	4827      	ldr	r0, [pc, #156]	@ (801a8b4 <report_build_info+0x524>)
 801a818:	4798      	blx	r3
            hal.stream.write(hal.driver_version);
 801a81a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a81e:	68a0      	ldr	r0, [r4, #8]
 801a820:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 801a822:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a826:	4813      	ldr	r0, [pc, #76]	@ (801a874 <report_build_info+0x4e4>)
 801a828:	4798      	blx	r3
        if(hal.driver_options) {
 801a82a:	4b11      	ldr	r3, [pc, #68]	@ (801a870 <report_build_info+0x4e0>)
 801a82c:	68db      	ldr	r3, [r3, #12]
 801a82e:	b163      	cbz	r3, 801a84a <report_build_info+0x4ba>
            hal.stream.write("[DRIVER OPTIONS:");
 801a830:	4c0f      	ldr	r4, [pc, #60]	@ (801a870 <report_build_info+0x4e0>)
 801a832:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a836:	4820      	ldr	r0, [pc, #128]	@ (801a8b8 <report_build_info+0x528>)
 801a838:	4798      	blx	r3
            hal.stream.write(hal.driver_options);
 801a83a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a83e:	68e0      	ldr	r0, [r4, #12]
 801a840:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 801a842:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a846:	480b      	ldr	r0, [pc, #44]	@ (801a874 <report_build_info+0x4e4>)
 801a848:	4798      	blx	r3
        if(hal.board) {
 801a84a:	4b09      	ldr	r3, [pc, #36]	@ (801a870 <report_build_info+0x4e0>)
 801a84c:	695b      	ldr	r3, [r3, #20]
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d038      	beq.n	801a8c4 <report_build_info+0x534>
            hal.stream.write("[BOARD:");
 801a852:	4c07      	ldr	r4, [pc, #28]	@ (801a870 <report_build_info+0x4e0>)
 801a854:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a858:	4818      	ldr	r0, [pc, #96]	@ (801a8bc <report_build_info+0x52c>)
 801a85a:	4798      	blx	r3
            hal.stream.write(hal.board);
 801a85c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a860:	6960      	ldr	r0, [r4, #20]
 801a862:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 801a864:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a868:	e02a      	b.n	801a8c0 <report_build_info+0x530>
 801a86a:	bf00      	nop
 801a86c:	0802bf9c 	.word	0x0802bf9c
 801a870:	200018dc 	.word	0x200018dc
 801a874:	0802c134 	.word	0x0802c134
 801a878:	0802c548 	.word	0x0802c548
 801a87c:	200022f4 	.word	0x200022f4
 801a880:	0802c500 	.word	0x0802c500
 801a884:	0802c598 	.word	0x0802c598
 801a888:	0802c508 	.word	0x0802c508
 801a88c:	0802c5a4 	.word	0x0802c5a4
 801a890:	0802c5ac 	.word	0x0802c5ac
 801a894:	20001ac4 	.word	0x20001ac4
 801a898:	0802c5bc 	.word	0x0802c5bc
 801a89c:	0802c5d4 	.word	0x0802c5d4
 801a8a0:	0802c5e0 	.word	0x0802c5e0
 801a8a4:	0802c514 	.word	0x0802c514
 801a8a8:	0802c5f8 	.word	0x0802c5f8
 801a8ac:	0802c608 	.word	0x0802c608
 801a8b0:	0802c610 	.word	0x0802c610
 801a8b4:	0802c61c 	.word	0x0802c61c
 801a8b8:	0802c630 	.word	0x0802c630
 801a8bc:	0802c644 	.word	0x0802c644
 801a8c0:	4880      	ldr	r0, [pc, #512]	@ (801aac4 <report_build_info+0x734>)
 801a8c2:	4798      	blx	r3
        if(hal.max_step_rate) {
 801a8c4:	4b80      	ldr	r3, [pc, #512]	@ (801aac8 <report_build_info+0x738>)
 801a8c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a8c8:	b173      	cbz	r3, 801a8e8 <report_build_info+0x558>
            hal.stream.write("[MAX STEP RATE:");
 801a8ca:	4c7f      	ldr	r4, [pc, #508]	@ (801aac8 <report_build_info+0x738>)
 801a8cc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a8d0:	487e      	ldr	r0, [pc, #504]	@ (801aacc <report_build_info+0x73c>)
 801a8d2:	4798      	blx	r3
            hal.stream.write(uitoa(hal.max_step_rate));
 801a8d4:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 801a8d8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801a8da:	f7fb f951 	bl	8015b80 <uitoa>
 801a8de:	47a8      	blx	r5
            hal.stream.write(" Hz]" ASCII_EOL);
 801a8e0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a8e4:	487a      	ldr	r0, [pc, #488]	@ (801aad0 <report_build_info+0x740>)
 801a8e6:	4798      	blx	r3
        if(hal.port.num_digital_in + hal.port.num_digital_out + hal.port.num_analog_in + hal.port.num_analog_out > 0) {
 801a8e8:	4a77      	ldr	r2, [pc, #476]	@ (801aac8 <report_build_info+0x738>)
 801a8ea:	f892 3114 	ldrb.w	r3, [r2, #276]	@ 0x114
 801a8ee:	f892 1115 	ldrb.w	r1, [r2, #277]	@ 0x115
 801a8f2:	440b      	add	r3, r1
 801a8f4:	f892 1116 	ldrb.w	r1, [r2, #278]	@ 0x116
 801a8f8:	440b      	add	r3, r1
 801a8fa:	f892 2117 	ldrb.w	r2, [r2, #279]	@ 0x117
 801a8fe:	42d3      	cmn	r3, r2
 801a900:	d031      	beq.n	801a966 <report_build_info+0x5d6>
            hal.stream.write("[AUX IO:");
 801a902:	4c71      	ldr	r4, [pc, #452]	@ (801aac8 <report_build_info+0x738>)
 801a904:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a908:	4872      	ldr	r0, [pc, #456]	@ (801aad4 <report_build_info+0x744>)
 801a90a:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_digital_in));
 801a90c:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 801a910:	f894 0114 	ldrb.w	r0, [r4, #276]	@ 0x114
 801a914:	f7fb f934 	bl	8015b80 <uitoa>
 801a918:	47a8      	blx	r5
            hal.stream.write(",");
 801a91a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a91e:	4d6e      	ldr	r5, [pc, #440]	@ (801aad8 <report_build_info+0x748>)
 801a920:	4628      	mov	r0, r5
 801a922:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_digital_out));
 801a924:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 801a928:	f894 0115 	ldrb.w	r0, [r4, #277]	@ 0x115
 801a92c:	f7fb f928 	bl	8015b80 <uitoa>
 801a930:	47b0      	blx	r6
            hal.stream.write(",");
 801a932:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a936:	4628      	mov	r0, r5
 801a938:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_analog_in));
 801a93a:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 801a93e:	f894 0116 	ldrb.w	r0, [r4, #278]	@ 0x116
 801a942:	f7fb f91d 	bl	8015b80 <uitoa>
 801a946:	47b0      	blx	r6
            hal.stream.write(",");
 801a948:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a94c:	4628      	mov	r0, r5
 801a94e:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_analog_out));
 801a950:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 801a954:	f894 0117 	ldrb.w	r0, [r4, #279]	@ 0x117
 801a958:	f7fb f912 	bl	8015b80 <uitoa>
 801a95c:	47a8      	blx	r5
            hal.stream.write("]" ASCII_EOL);
 801a95e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a962:	4858      	ldr	r0, [pc, #352]	@ (801aac4 <report_build_info+0x734>)
 801a964:	4798      	blx	r3
        grbl.on_report_options(false);
 801a966:	4b5d      	ldr	r3, [pc, #372]	@ (801aadc <report_build_info+0x74c>)
 801a968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a96a:	2000      	movs	r0, #0
 801a96c:	4798      	blx	r3
}
 801a96e:	b01b      	add	sp, #108	@ 0x6c
 801a970:	bdf0      	pop	{r4, r5, r6, r7, pc}
        strcat(buf, settings.flags.legacy_rt_commands ? "+," : "-,");
 801a972:	4e5b      	ldr	r6, [pc, #364]	@ (801aae0 <report_build_info+0x750>)
 801a974:	e647      	b.n	801a606 <report_build_info+0x276>
            strcat(buf, "HOME,");
 801a976:	4620      	mov	r0, r4
 801a978:	f7ed fbc2 	bl	8008100 <strlen>
 801a97c:	4603      	mov	r3, r0
 801a97e:	1821      	adds	r1, r4, r0
 801a980:	4a58      	ldr	r2, [pc, #352]	@ (801aae4 <report_build_info+0x754>)
 801a982:	6810      	ldr	r0, [r2, #0]
 801a984:	50e0      	str	r0, [r4, r3]
 801a986:	8893      	ldrh	r3, [r2, #4]
 801a988:	808b      	strh	r3, [r1, #4]
 801a98a:	e64c      	b.n	801a626 <report_build_info+0x296>
            strcat(buf, "NOPROBE,");
 801a98c:	ac01      	add	r4, sp, #4
 801a98e:	4620      	mov	r0, r4
 801a990:	f7ed fbb6 	bl	8008100 <strlen>
 801a994:	4602      	mov	r2, r0
 801a996:	1826      	adds	r6, r4, r0
 801a998:	4b53      	ldr	r3, [pc, #332]	@ (801aae8 <report_build_info+0x758>)
 801a99a:	cb03      	ldmia	r3!, {r0, r1}
 801a99c:	50a0      	str	r0, [r4, r2]
 801a99e:	6071      	str	r1, [r6, #4]
 801a9a0:	781b      	ldrb	r3, [r3, #0]
 801a9a2:	7233      	strb	r3, [r6, #8]
 801a9a4:	e64b      	b.n	801a63e <report_build_info+0x2ae>
            strcat(buf, "PC,");
 801a9a6:	ac01      	add	r4, sp, #4
 801a9a8:	4620      	mov	r0, r4
 801a9aa:	f7ed fba9 	bl	8008100 <strlen>
 801a9ae:	4603      	mov	r3, r0
 801a9b0:	4a4e      	ldr	r2, [pc, #312]	@ (801aaec <report_build_info+0x75c>)
 801a9b2:	6810      	ldr	r0, [r2, #0]
 801a9b4:	50e0      	str	r0, [r4, r3]
 801a9b6:	e642      	b.n	801a63e <report_build_info+0x2ae>
            strcat(buf, "OS,");
 801a9b8:	ac01      	add	r4, sp, #4
 801a9ba:	4620      	mov	r0, r4
 801a9bc:	f7ed fba0 	bl	8008100 <strlen>
 801a9c0:	4603      	mov	r3, r0
 801a9c2:	4a4b      	ldr	r2, [pc, #300]	@ (801aaf0 <report_build_info+0x760>)
 801a9c4:	6810      	ldr	r0, [r2, #0]
 801a9c6:	50e0      	str	r0, [r4, r3]
 801a9c8:	e640      	b.n	801a64c <report_build_info+0x2bc>
            strcat(buf, "BD,");
 801a9ca:	ac01      	add	r4, sp, #4
 801a9cc:	4620      	mov	r0, r4
 801a9ce:	f7ed fb97 	bl	8008100 <strlen>
 801a9d2:	4603      	mov	r3, r0
 801a9d4:	4a47      	ldr	r2, [pc, #284]	@ (801aaf4 <report_build_info+0x764>)
 801a9d6:	6810      	ldr	r0, [r2, #0]
 801a9d8:	50e0      	str	r0, [r4, r3]
 801a9da:	e63e      	b.n	801a65a <report_build_info+0x2ca>
            strcat(buf, "ES,");
 801a9dc:	ac01      	add	r4, sp, #4
 801a9de:	4620      	mov	r0, r4
 801a9e0:	f7ed fb8e 	bl	8008100 <strlen>
 801a9e4:	4603      	mov	r3, r0
 801a9e6:	4a44      	ldr	r2, [pc, #272]	@ (801aaf8 <report_build_info+0x768>)
 801a9e8:	6810      	ldr	r0, [r2, #0]
 801a9ea:	50e0      	str	r0, [r4, r3]
 801a9ec:	e63c      	b.n	801a668 <report_build_info+0x2d8>
            strcat(buf, "MPG,");
 801a9ee:	ac01      	add	r4, sp, #4
 801a9f0:	4620      	mov	r0, r4
 801a9f2:	f7ed fb85 	bl	8008100 <strlen>
 801a9f6:	4603      	mov	r3, r0
 801a9f8:	1821      	adds	r1, r4, r0
 801a9fa:	4a40      	ldr	r2, [pc, #256]	@ (801aafc <report_build_info+0x76c>)
 801a9fc:	6810      	ldr	r0, [r2, #0]
 801a9fe:	50e0      	str	r0, [r4, r3]
 801aa00:	7913      	ldrb	r3, [r2, #4]
 801aa02:	710b      	strb	r3, [r1, #4]
 801aa04:	e636      	b.n	801a674 <report_build_info+0x2e4>
            strcat(buf, "LATHE,");
 801aa06:	ac01      	add	r4, sp, #4
 801aa08:	4620      	mov	r0, r4
 801aa0a:	f7ed fb79 	bl	8008100 <strlen>
 801aa0e:	4603      	mov	r3, r0
 801aa10:	1821      	adds	r1, r4, r0
 801aa12:	4a3b      	ldr	r2, [pc, #236]	@ (801ab00 <report_build_info+0x770>)
 801aa14:	6810      	ldr	r0, [r2, #0]
 801aa16:	50e0      	str	r0, [r4, r3]
 801aa18:	8890      	ldrh	r0, [r2, #4]
 801aa1a:	7993      	ldrb	r3, [r2, #6]
 801aa1c:	8088      	strh	r0, [r1, #4]
 801aa1e:	718b      	strb	r3, [r1, #6]
 801aa20:	e62d      	b.n	801a67e <report_build_info+0x2ee>
            strcat(buf, "PPI,");
 801aa22:	ac01      	add	r4, sp, #4
 801aa24:	4620      	mov	r0, r4
 801aa26:	f7ed fb6b 	bl	8008100 <strlen>
 801aa2a:	4603      	mov	r3, r0
 801aa2c:	1821      	adds	r1, r4, r0
 801aa2e:	4a35      	ldr	r2, [pc, #212]	@ (801ab04 <report_build_info+0x774>)
 801aa30:	6810      	ldr	r0, [r2, #0]
 801aa32:	50e0      	str	r0, [r4, r3]
 801aa34:	7913      	ldrb	r3, [r2, #4]
 801aa36:	710b      	strb	r3, [r1, #4]
 801aa38:	e628      	b.n	801a68c <report_build_info+0x2fc>
            strcat(buf, hal.driver_cap.atc ? "ATC," : "TC,"); // Tool change supported (M6)
 801aa3a:	4933      	ldr	r1, [pc, #204]	@ (801ab08 <report_build_info+0x778>)
 801aa3c:	e640      	b.n	801a6c0 <report_build_info+0x330>
            strcat(buf, "SS,");
 801aa3e:	ac01      	add	r4, sp, #4
 801aa40:	4620      	mov	r0, r4
 801aa42:	f7ed fb5d 	bl	8008100 <strlen>
 801aa46:	4603      	mov	r3, r0
 801aa48:	4a30      	ldr	r2, [pc, #192]	@ (801ab0c <report_build_info+0x77c>)
 801aa4a:	6810      	ldr	r0, [r2, #0]
 801aa4c:	50e0      	str	r0, [r4, r3]
 801aa4e:	e641      	b.n	801a6d4 <report_build_info+0x344>
            strcat(buf, "CAN,");
 801aa50:	ac01      	add	r4, sp, #4
 801aa52:	4620      	mov	r0, r4
 801aa54:	f7ed fb54 	bl	8008100 <strlen>
 801aa58:	4603      	mov	r3, r0
 801aa5a:	1821      	adds	r1, r4, r0
 801aa5c:	4a2c      	ldr	r2, [pc, #176]	@ (801ab10 <report_build_info+0x780>)
 801aa5e:	6810      	ldr	r0, [r2, #0]
 801aa60:	50e0      	str	r0, [r4, r3]
 801aa62:	7913      	ldrb	r3, [r2, #4]
 801aa64:	710b      	strb	r3, [r1, #4]
 801aa66:	e653      	b.n	801a710 <report_build_info+0x380>
            *append = '\0';
 801aa68:	f100 0368 	add.w	r3, r0, #104	@ 0x68
 801aa6c:	eb0d 0003 	add.w	r0, sp, r3
 801aa70:	2300      	movs	r3, #0
 801aa72:	f800 3c64 	strb.w	r3, [r0, #-100]
 801aa76:	e657      	b.n	801a728 <report_build_info+0x398>
                strcat(buf, "*");
 801aa78:	ac01      	add	r4, sp, #4
 801aa7a:	4620      	mov	r0, r4
 801aa7c:	f7ed fb40 	bl	8008100 <strlen>
 801aa80:	4b24      	ldr	r3, [pc, #144]	@ (801ab14 <report_build_info+0x784>)
 801aa82:	881b      	ldrh	r3, [r3, #0]
 801aa84:	5223      	strh	r3, [r4, r0]
 801aa86:	e682      	b.n	801a78e <report_build_info+0x3fe>
            strcat(buf, nvs->type == NVS_Flash ? "FLASH" : (nvs->type == NVS_FRAM ? "FRAM" : "EEPROM"));
 801aa88:	4923      	ldr	r1, [pc, #140]	@ (801ab18 <report_build_info+0x788>)
 801aa8a:	e688      	b.n	801a79e <report_build_info+0x40e>
 801aa8c:	4923      	ldr	r1, [pc, #140]	@ (801ab1c <report_build_info+0x78c>)
 801aa8e:	e686      	b.n	801a79e <report_build_info+0x40e>
                strcat(buf, " ");
 801aa90:	a801      	add	r0, sp, #4
 801aa92:	f7ed fb35 	bl	8008100 <strlen>
 801aa96:	4b22      	ldr	r3, [pc, #136]	@ (801ab20 <report_build_info+0x790>)
 801aa98:	881b      	ldrh	r3, [r3, #0]
 801aa9a:	aa01      	add	r2, sp, #4
 801aa9c:	5213      	strh	r3, [r2, r0]
                strcat(buf, uitoa(hal.nvs.size_max / 1024));
 801aa9e:	4b0a      	ldr	r3, [pc, #40]	@ (801aac8 <report_build_info+0x738>)
 801aaa0:	f8d3 017c 	ldr.w	r0, [r3, #380]	@ 0x17c
 801aaa4:	0a80      	lsrs	r0, r0, #10
 801aaa6:	f7fb f86b 	bl	8015b80 <uitoa>
 801aaaa:	4601      	mov	r1, r0
 801aaac:	a801      	add	r0, sp, #4
 801aaae:	f00a fa42 	bl	8024f36 <strcat>
                strcat(buf, "K");
 801aab2:	a801      	add	r0, sp, #4
 801aab4:	f7ed fb24 	bl	8008100 <strlen>
 801aab8:	4b1a      	ldr	r3, [pc, #104]	@ (801ab24 <report_build_info+0x794>)
 801aaba:	881b      	ldrh	r3, [r3, #0]
 801aabc:	aa01      	add	r2, sp, #4
 801aabe:	5213      	strh	r3, [r2, r0]
 801aac0:	e676      	b.n	801a7b0 <report_build_info+0x420>
 801aac2:	bf00      	nop
 801aac4:	0802c134 	.word	0x0802c134
 801aac8:	200018dc 	.word	0x200018dc
 801aacc:	0802c64c 	.word	0x0802c64c
 801aad0:	0802c65c 	.word	0x0802c65c
 801aad4:	0802c664 	.word	0x0802c664
 801aad8:	0802c560 	.word	0x0802c560
 801aadc:	20001ac4 	.word	0x20001ac4
 801aae0:	0802c504 	.word	0x0802c504
 801aae4:	0802c55c 	.word	0x0802c55c
 801aae8:	0802c564 	.word	0x0802c564
 801aaec:	0802c570 	.word	0x0802c570
 801aaf0:	0802c574 	.word	0x0802c574
 801aaf4:	0802c578 	.word	0x0802c578
 801aaf8:	0802c57c 	.word	0x0802c57c
 801aafc:	0802c580 	.word	0x0802c580
 801ab00:	0802c588 	.word	0x0802c588
 801ab04:	0802c590 	.word	0x0802c590
 801ab08:	0802c510 	.word	0x0802c510
 801ab0c:	0802c5a0 	.word	0x0802c5a0
 801ab10:	0802c5b4 	.word	0x0802c5b4
 801ab14:	0802c5f0 	.word	0x0802c5f0
 801ab18:	0802c524 	.word	0x0802c524
 801ab1c:	0802c51c 	.word	0x0802c51c
 801ab20:	0802c280 	.word	0x0802c280
 801ab24:	0802c5f4 	.word	0x0802c5f4

0801ab28 <report_realtime_status>:
{
 801ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab2c:	b08b      	sub	sp, #44	@ 0x2c
    report_tracking_flags_t report = system_get_rt_report_flags();
 801ab2e:	f007 fac1 	bl	80220b4 <system_get_rt_report_flags>
 801ab32:	4604      	mov	r4, r0
    probe_state_t probe_state = {
 801ab34:	f04f 0902 	mov.w	r9, #2
    system_convert_array_steps_to_mpos(print_position, sys.position);
 801ab38:	49a2      	ldr	r1, [pc, #648]	@ (801adc4 <report_realtime_status+0x29c>)
 801ab3a:	a806      	add	r0, sp, #24
 801ab3c:	f007 fa1c 	bl	8021f78 <system_convert_array_steps_to_mpos>
    if(hal.probe.get_state)
 801ab40:	4ba1      	ldr	r3, [pc, #644]	@ (801adc8 <report_realtime_status+0x2a0>)
 801ab42:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 801ab46:	b10b      	cbz	r3, 801ab4c <report_realtime_status+0x24>
        probe_state = hal.probe.get_state();
 801ab48:	4798      	blx	r3
 801ab4a:	4681      	mov	r9, r0
    hal.stream.write_all("<");
 801ab4c:	4b9e      	ldr	r3, [pc, #632]	@ (801adc8 <report_realtime_status+0x2a0>)
 801ab4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ab52:	489e      	ldr	r0, [pc, #632]	@ (801adcc <report_realtime_status+0x2a4>)
 801ab54:	4798      	blx	r3
    sys_state_t state = state_get();
 801ab56:	f004 fad7 	bl	801f108 <state_get>
 801ab5a:	4680      	mov	r8, r0
    switch (gc_state.tool_change && state == STATE_CYCLE ? STATE_TOOL_CHANGE : state) {
 801ab5c:	4b9c      	ldr	r3, [pc, #624]	@ (801add0 <report_realtime_status+0x2a8>)
 801ab5e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801ab62:	b10b      	cbz	r3, 801ab68 <report_realtime_status+0x40>
 801ab64:	2808      	cmp	r0, #8
 801ab66:	d035      	beq.n	801abd4 <report_realtime_status+0xac>
 801ab68:	f1b8 0f20 	cmp.w	r8, #32
 801ab6c:	d825      	bhi.n	801abba <report_realtime_status+0x92>
 801ab6e:	f1b8 0f20 	cmp.w	r8, #32
 801ab72:	d834      	bhi.n	801abde <report_realtime_status+0xb6>
 801ab74:	e8df f018 	tbh	[pc, r8, lsl #1]
 801ab78:	015200d1 	.word	0x015200d1
 801ab7c:	00330170 	.word	0x00330170
 801ab80:	0033011f 	.word	0x0033011f
 801ab84:	00330033 	.word	0x00330033
 801ab88:	003300d7 	.word	0x003300d7
 801ab8c:	00330033 	.word	0x00330033
 801ab90:	00330033 	.word	0x00330033
 801ab94:	00330033 	.word	0x00330033
 801ab98:	00330109 	.word	0x00330109
 801ab9c:	00330033 	.word	0x00330033
 801aba0:	00330033 	.word	0x00330033
 801aba4:	00330033 	.word	0x00330033
 801aba8:	00330033 	.word	0x00330033
 801abac:	00330033 	.word	0x00330033
 801abb0:	00330033 	.word	0x00330033
 801abb4:	00330033 	.word	0x00330033
 801abb8:	0119      	.short	0x0119
 801abba:	f1b8 0f80 	cmp.w	r8, #128	@ 0x80
 801abbe:	f000 8151 	beq.w	801ae64 <report_realtime_status+0x33c>
 801abc2:	f240 8097 	bls.w	801acf4 <report_realtime_status+0x1cc>
 801abc6:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 801abca:	f000 8127 	beq.w	801ae1c <report_realtime_status+0x2f4>
 801abce:	f5b8 7f00 	cmp.w	r8, #512	@ 0x200
 801abd2:	d104      	bne.n	801abde <report_realtime_status+0xb6>
            hal.stream.write_all("Tool");
 801abd4:	4b7c      	ldr	r3, [pc, #496]	@ (801adc8 <report_realtime_status+0x2a0>)
 801abd6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801abda:	487e      	ldr	r0, [pc, #504]	@ (801add4 <report_realtime_status+0x2ac>)
 801abdc:	4798      	blx	r3
    if(!settings.status_report.machine_position || report.wco) {
 801abde:	4b7e      	ldr	r3, [pc, #504]	@ (801add8 <report_realtime_status+0x2b0>)
 801abe0:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801abe4:	f013 0f01 	tst.w	r3, #1
 801abe8:	f000 815f 	beq.w	801aeaa <report_realtime_status+0x382>
 801abec:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801abf0:	f040 815d 	bne.w	801aeae <report_realtime_status+0x386>
    hal.stream.write_all(settings.status_report.machine_position ? "|MPos:" : "|WPos:");
 801abf4:	4b74      	ldr	r3, [pc, #464]	@ (801adc8 <report_realtime_status+0x2a0>)
 801abf6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801abfa:	4a77      	ldr	r2, [pc, #476]	@ (801add8 <report_realtime_status+0x2b0>)
 801abfc:	f892 20fc 	ldrb.w	r2, [r2, #252]	@ 0xfc
 801ac00:	f012 0f01 	tst.w	r2, #1
 801ac04:	f000 8155 	beq.w	801aeb2 <report_realtime_status+0x38a>
 801ac08:	4874      	ldr	r0, [pc, #464]	@ (801addc <report_realtime_status+0x2b4>)
 801ac0a:	4798      	blx	r3
    hal.stream.write_all(get_axis_values(print_position));
 801ac0c:	4b6e      	ldr	r3, [pc, #440]	@ (801adc8 <report_realtime_status+0x2a0>)
 801ac0e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801ac12:	4b73      	ldr	r3, [pc, #460]	@ (801ade0 <report_realtime_status+0x2b8>)
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	a806      	add	r0, sp, #24
 801ac18:	4798      	blx	r3
 801ac1a:	47a8      	blx	r5
    if (settings.status_report.buffer_state) {
 801ac1c:	4b6e      	ldr	r3, [pc, #440]	@ (801add8 <report_realtime_status+0x2b0>)
 801ac1e:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801ac22:	f013 0f02 	tst.w	r3, #2
 801ac26:	d017      	beq.n	801ac58 <report_realtime_status+0x130>
        hal.stream.write_all("|Bf:");
 801ac28:	4d67      	ldr	r5, [pc, #412]	@ (801adc8 <report_realtime_status+0x2a0>)
 801ac2a:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 801ac2e:	486d      	ldr	r0, [pc, #436]	@ (801ade4 <report_realtime_status+0x2bc>)
 801ac30:	4798      	blx	r3
        hal.stream.write_all(uitoa((uint32_t)plan_get_block_buffer_available()));
 801ac32:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 801ac36:	f7fc f9c7 	bl	8016fc8 <plan_get_block_buffer_available>
 801ac3a:	f7fa ffa1 	bl	8015b80 <uitoa>
 801ac3e:	47b0      	blx	r6
        hal.stream.write_all(",");
 801ac40:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 801ac44:	4868      	ldr	r0, [pc, #416]	@ (801ade8 <report_realtime_status+0x2c0>)
 801ac46:	4798      	blx	r3
        hal.stream.write_all(uitoa(hal.stream.get_rx_buffer_free()));
 801ac48:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 801ac4c:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 801ac50:	4798      	blx	r3
 801ac52:	f7fa ff95 	bl	8015b80 <uitoa>
 801ac56:	47b0      	blx	r6
    if(settings.status_report.line_numbers) {
 801ac58:	4b5f      	ldr	r3, [pc, #380]	@ (801add8 <report_realtime_status+0x2b0>)
 801ac5a:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801ac5e:	f013 0f04 	tst.w	r3, #4
 801ac62:	f040 8128 	bne.w	801aeb6 <report_realtime_status+0x38e>
    spindle_0 = spindle_get(0);
 801ac66:	2000      	movs	r0, #0
 801ac68:	f003 fdbe 	bl	801e7e8 <spindle_get>
 801ac6c:	4606      	mov	r6, r0
    spindle_0_state = spindle_0->get_state(spindle_0);
 801ac6e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801ac70:	4798      	blx	r3
 801ac72:	4607      	mov	r7, r0
    if(settings.status_report.feed_speed) {
 801ac74:	4b58      	ldr	r3, [pc, #352]	@ (801add8 <report_realtime_status+0x2b0>)
 801ac76:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801ac7a:	f013 0f08 	tst.w	r3, #8
 801ac7e:	f000 8144 	beq.w	801af0a <report_realtime_status+0x3e2>
        if(spindle_0->cap.variable) {
 801ac82:	7ab3      	ldrb	r3, [r6, #10]
 801ac84:	f013 0f01 	tst.w	r3, #1
 801ac88:	f000 8130 	beq.w	801aeec <report_realtime_status+0x3c4>
            hal.stream.write_all(appendbuf(2, "|FS:", get_rate_value(st_get_realtime_rate())));
 801ac8c:	4d4e      	ldr	r5, [pc, #312]	@ (801adc8 <report_realtime_status+0x2a0>)
 801ac8e:	f8d5 a0b8 	ldr.w	sl, [r5, #184]	@ 0xb8
 801ac92:	4b56      	ldr	r3, [pc, #344]	@ (801adec <report_realtime_status+0x2c4>)
 801ac94:	f8d3 b000 	ldr.w	fp, [r3]
 801ac98:	f005 fe8a 	bl	80209b0 <st_get_realtime_rate>
 801ac9c:	47d8      	blx	fp
 801ac9e:	4602      	mov	r2, r0
 801aca0:	4953      	ldr	r1, [pc, #332]	@ (801adf0 <report_realtime_status+0x2c8>)
 801aca2:	2002      	movs	r0, #2
 801aca4:	f7fe f83c 	bl	8018d20 <appendbuf>
 801aca8:	47d0      	blx	sl
            hal.stream.write_all(appendbuf(2, ",", uitoa(spindle_0_state.on ? lroundf(spindle_0->param->rpm_overridden) : 0)));
 801acaa:	f8d5 50b8 	ldr.w	r5, [r5, #184]	@ 0xb8
 801acae:	f017 0f01 	tst.w	r7, #1
 801acb2:	f040 8115 	bne.w	801aee0 <report_realtime_status+0x3b8>
 801acb6:	2000      	movs	r0, #0
 801acb8:	f7fa ff62 	bl	8015b80 <uitoa>
 801acbc:	4602      	mov	r2, r0
 801acbe:	494a      	ldr	r1, [pc, #296]	@ (801ade8 <report_realtime_status+0x2c0>)
 801acc0:	2002      	movs	r0, #2
 801acc2:	f7fe f82d 	bl	8018d20 <appendbuf>
 801acc6:	47a8      	blx	r5
            if(spindle_0->get_data /* && sys.mpg_mode */)
 801acc8:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 801acca:	2b00      	cmp	r3, #0
 801accc:	f000 811d 	beq.w	801af0a <report_realtime_status+0x3e2>
                hal.stream.write_all(appendbuf(2, ",", uitoa(lroundf(spindle_0->get_data(SpindleData_RPM)->rpm))));
 801acd0:	4a3d      	ldr	r2, [pc, #244]	@ (801adc8 <report_realtime_status+0x2a0>)
 801acd2:	f8d2 50b8 	ldr.w	r5, [r2, #184]	@ 0xb8
 801acd6:	2001      	movs	r0, #1
 801acd8:	4798      	blx	r3
 801acda:	ed90 0a00 	vldr	s0, [r0]
 801acde:	f00c ff61 	bl	8027ba4 <lroundf>
 801ace2:	f7fa ff4d 	bl	8015b80 <uitoa>
 801ace6:	4602      	mov	r2, r0
 801ace8:	493f      	ldr	r1, [pc, #252]	@ (801ade8 <report_realtime_status+0x2c0>)
 801acea:	2002      	movs	r0, #2
 801acec:	f7fe f818 	bl	8018d20 <appendbuf>
 801acf0:	47a8      	blx	r5
 801acf2:	e10a      	b.n	801af0a <report_realtime_status+0x3e2>
    switch (gc_state.tool_change && state == STATE_CYCLE ? STATE_TOOL_CHANGE : state) {
 801acf4:	f1b8 0f40 	cmp.w	r8, #64	@ 0x40
 801acf8:	f47f af71 	bne.w	801abde <report_realtime_status+0xb6>
            hal.stream.write_all(appendbuf(2, "Door:", uitoa((uint32_t)sys.parking_state)));
 801acfc:	4b32      	ldr	r3, [pc, #200]	@ (801adc8 <report_realtime_status+0x2a0>)
 801acfe:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801ad02:	4b3c      	ldr	r3, [pc, #240]	@ (801adf4 <report_realtime_status+0x2cc>)
 801ad04:	f893 0034 	ldrb.w	r0, [r3, #52]	@ 0x34
 801ad08:	f7fa ff3a 	bl	8015b80 <uitoa>
 801ad0c:	4602      	mov	r2, r0
 801ad0e:	493a      	ldr	r1, [pc, #232]	@ (801adf8 <report_realtime_status+0x2d0>)
 801ad10:	2002      	movs	r0, #2
 801ad12:	f7fe f805 	bl	8018d20 <appendbuf>
 801ad16:	47a8      	blx	r5
            break;
 801ad18:	e761      	b.n	801abde <report_realtime_status+0xb6>
            hal.stream.write_all("Idle");
 801ad1a:	4b2b      	ldr	r3, [pc, #172]	@ (801adc8 <report_realtime_status+0x2a0>)
 801ad1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ad20:	4836      	ldr	r0, [pc, #216]	@ (801adfc <report_realtime_status+0x2d4>)
 801ad22:	4798      	blx	r3
            break;
 801ad24:	e75b      	b.n	801abde <report_realtime_status+0xb6>
            hal.stream.write_all("Run");
 801ad26:	4b28      	ldr	r3, [pc, #160]	@ (801adc8 <report_realtime_status+0x2a0>)
 801ad28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ad2c:	4834      	ldr	r0, [pc, #208]	@ (801ae00 <report_realtime_status+0x2d8>)
 801ad2e:	4798      	blx	r3
            if(sys.probing_state == Probing_Active && settings.status_report.run_substate)
 801ad30:	4b30      	ldr	r3, [pc, #192]	@ (801adf4 <report_realtime_status+0x2cc>)
 801ad32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801ad36:	b2db      	uxtb	r3, r3
 801ad38:	2b01      	cmp	r3, #1
 801ad3a:	d011      	beq.n	801ad60 <report_realtime_status+0x238>
            else if (probing)
 801ad3c:	4b31      	ldr	r3, [pc, #196]	@ (801ae04 <report_realtime_status+0x2dc>)
 801ad3e:	781b      	ldrb	r3, [r3, #0]
 801ad40:	b11b      	cbz	r3, 801ad4a <report_realtime_status+0x222>
                probing = probe_state.triggered;
 801ad42:	f3c9 0200 	ubfx	r2, r9, #0, #1
 801ad46:	4b2f      	ldr	r3, [pc, #188]	@ (801ae04 <report_realtime_status+0x2dc>)
 801ad48:	701a      	strb	r2, [r3, #0]
            if(sys.flags.feed_hold_pending)
 801ad4a:	4b2a      	ldr	r3, [pc, #168]	@ (801adf4 <report_realtime_status+0x2cc>)
 801ad4c:	7d9b      	ldrb	r3, [r3, #22]
 801ad4e:	f013 0f20 	tst.w	r3, #32
 801ad52:	d00f      	beq.n	801ad74 <report_realtime_status+0x24c>
                hal.stream.write_all(":1");
 801ad54:	4b1c      	ldr	r3, [pc, #112]	@ (801adc8 <report_realtime_status+0x2a0>)
 801ad56:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ad5a:	482b      	ldr	r0, [pc, #172]	@ (801ae08 <report_realtime_status+0x2e0>)
 801ad5c:	4798      	blx	r3
 801ad5e:	e73e      	b.n	801abde <report_realtime_status+0xb6>
            if(sys.probing_state == Probing_Active && settings.status_report.run_substate)
 801ad60:	4b1d      	ldr	r3, [pc, #116]	@ (801add8 <report_realtime_status+0x2b0>)
 801ad62:	f893 30fd 	ldrb.w	r3, [r3, #253]	@ 0xfd
 801ad66:	f013 0f08 	tst.w	r3, #8
 801ad6a:	d0e7      	beq.n	801ad3c <report_realtime_status+0x214>
                probing = true;
 801ad6c:	4b25      	ldr	r3, [pc, #148]	@ (801ae04 <report_realtime_status+0x2dc>)
 801ad6e:	2201      	movs	r2, #1
 801ad70:	701a      	strb	r2, [r3, #0]
 801ad72:	e7ea      	b.n	801ad4a <report_realtime_status+0x222>
            else if(probing)
 801ad74:	4b23      	ldr	r3, [pc, #140]	@ (801ae04 <report_realtime_status+0x2dc>)
 801ad76:	781b      	ldrb	r3, [r3, #0]
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	f43f af30 	beq.w	801abde <report_realtime_status+0xb6>
                hal.stream.write_all(":2");
 801ad7e:	4b12      	ldr	r3, [pc, #72]	@ (801adc8 <report_realtime_status+0x2a0>)
 801ad80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ad84:	4821      	ldr	r0, [pc, #132]	@ (801ae0c <report_realtime_status+0x2e4>)
 801ad86:	4798      	blx	r3
 801ad88:	e729      	b.n	801abde <report_realtime_status+0xb6>
            hal.stream.write_all(appendbuf(2, "Hold:", uitoa((uint32_t)(sys.holding_state - 1))));
 801ad8a:	4b0f      	ldr	r3, [pc, #60]	@ (801adc8 <report_realtime_status+0x2a0>)
 801ad8c:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801ad90:	4b18      	ldr	r3, [pc, #96]	@ (801adf4 <report_realtime_status+0x2cc>)
 801ad92:	f893 0035 	ldrb.w	r0, [r3, #53]	@ 0x35
 801ad96:	3801      	subs	r0, #1
 801ad98:	f7fa fef2 	bl	8015b80 <uitoa>
 801ad9c:	4602      	mov	r2, r0
 801ad9e:	491c      	ldr	r1, [pc, #112]	@ (801ae10 <report_realtime_status+0x2e8>)
 801ada0:	2002      	movs	r0, #2
 801ada2:	f7fd ffbd 	bl	8018d20 <appendbuf>
 801ada6:	47a8      	blx	r5
            break;
 801ada8:	e719      	b.n	801abde <report_realtime_status+0xb6>
            hal.stream.write_all("Jog");
 801adaa:	4b07      	ldr	r3, [pc, #28]	@ (801adc8 <report_realtime_status+0x2a0>)
 801adac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801adb0:	4818      	ldr	r0, [pc, #96]	@ (801ae14 <report_realtime_status+0x2ec>)
 801adb2:	4798      	blx	r3
            break;
 801adb4:	e713      	b.n	801abde <report_realtime_status+0xb6>
            hal.stream.write_all("Home");
 801adb6:	4b04      	ldr	r3, [pc, #16]	@ (801adc8 <report_realtime_status+0x2a0>)
 801adb8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801adbc:	4816      	ldr	r0, [pc, #88]	@ (801ae18 <report_realtime_status+0x2f0>)
 801adbe:	4798      	blx	r3
            break;
 801adc0:	e70d      	b.n	801abde <report_realtime_status+0xb6>
 801adc2:	bf00      	nop
 801adc4:	20001c44 	.word	0x20001c44
 801adc8:	200018dc 	.word	0x200018dc
 801adcc:	0802c6ac 	.word	0x0802c6ac
 801add0:	20001614 	.word	0x20001614
 801add4:	0802c6fc 	.word	0x0802c6fc
 801add8:	200022f4 	.word	0x200022f4
 801addc:	0802c670 	.word	0x0802c670
 801ade0:	200021c0 	.word	0x200021c0
 801ade4:	0802c704 	.word	0x0802c704
 801ade8:	0802c560 	.word	0x0802c560
 801adec:	200021b8 	.word	0x200021b8
 801adf0:	0802c714 	.word	0x0802c714
 801adf4:	20001bbc 	.word	0x20001bbc
 801adf8:	0802c6ec 	.word	0x0802c6ec
 801adfc:	0802c6b0 	.word	0x0802c6b0
 801ae00:	0802c6b8 	.word	0x0802c6b8
 801ae04:	200021b4 	.word	0x200021b4
 801ae08:	0802c690 	.word	0x0802c690
 801ae0c:	0802c6bc 	.word	0x0802c6bc
 801ae10:	0802c6c0 	.word	0x0802c6c0
 801ae14:	0802c6c8 	.word	0x0802c6c8
 801ae18:	0802c6cc 	.word	0x0802c6cc
            if((report.all || settings.status_report.alarm_substate) && sys.alarm)
 801ae1c:	2c00      	cmp	r4, #0
 801ae1e:	db05      	blt.n	801ae2c <report_realtime_status+0x304>
 801ae20:	4ba0      	ldr	r3, [pc, #640]	@ (801b0a4 <report_realtime_status+0x57c>)
 801ae22:	f893 30fd 	ldrb.w	r3, [r3, #253]	@ 0xfd
 801ae26:	f013 0f04 	tst.w	r3, #4
 801ae2a:	d003      	beq.n	801ae34 <report_realtime_status+0x30c>
 801ae2c:	4b9e      	ldr	r3, [pc, #632]	@ (801b0a8 <report_realtime_status+0x580>)
 801ae2e:	f893 007c 	ldrb.w	r0, [r3, #124]	@ 0x7c
 801ae32:	b928      	cbnz	r0, 801ae40 <report_realtime_status+0x318>
                hal.stream.write_all("Alarm");
 801ae34:	4b9d      	ldr	r3, [pc, #628]	@ (801b0ac <report_realtime_status+0x584>)
 801ae36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ae3a:	489d      	ldr	r0, [pc, #628]	@ (801b0b0 <report_realtime_status+0x588>)
 801ae3c:	4798      	blx	r3
 801ae3e:	e6ce      	b.n	801abde <report_realtime_status+0xb6>
                hal.stream.write_all(appendbuf(2, "Alarm:", uitoa((uint32_t)sys.alarm)));
 801ae40:	4b9a      	ldr	r3, [pc, #616]	@ (801b0ac <report_realtime_status+0x584>)
 801ae42:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801ae46:	f7fa fe9b 	bl	8015b80 <uitoa>
 801ae4a:	4602      	mov	r2, r0
 801ae4c:	4999      	ldr	r1, [pc, #612]	@ (801b0b4 <report_realtime_status+0x58c>)
 801ae4e:	2002      	movs	r0, #2
 801ae50:	f7fd ff66 	bl	8018d20 <appendbuf>
 801ae54:	47a8      	blx	r5
 801ae56:	e6c2      	b.n	801abde <report_realtime_status+0xb6>
            hal.stream.write_all("Check");
 801ae58:	4b94      	ldr	r3, [pc, #592]	@ (801b0ac <report_realtime_status+0x584>)
 801ae5a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ae5e:	4896      	ldr	r0, [pc, #600]	@ (801b0b8 <report_realtime_status+0x590>)
 801ae60:	4798      	blx	r3
            break;
 801ae62:	e6bc      	b.n	801abde <report_realtime_status+0xb6>
            hal.stream.write_all("Sleep");
 801ae64:	4b91      	ldr	r3, [pc, #580]	@ (801b0ac <report_realtime_status+0x584>)
 801ae66:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ae6a:	4894      	ldr	r0, [pc, #592]	@ (801b0bc <report_realtime_status+0x594>)
 801ae6c:	4798      	blx	r3
            break;
 801ae6e:	e6b6      	b.n	801abde <report_realtime_status+0xb6>
        for(idx = 0; idx < N_AXIS; idx++) {
 801ae70:	3501      	adds	r5, #1
 801ae72:	2d02      	cmp	r5, #2
 801ae74:	f63f aebe 	bhi.w	801abf4 <report_realtime_status+0xcc>
            wco[idx] = gc_get_offset(idx, true);
 801ae78:	2101      	movs	r1, #1
 801ae7a:	4628      	mov	r0, r5
 801ae7c:	f7f2 fb44 	bl	800d508 <gc_get_offset>
 801ae80:	ab0a      	add	r3, sp, #40	@ 0x28
 801ae82:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801ae86:	ed03 0a07 	vstr	s0, [r3, #-28]	@ 0xffffffe4
            if(!settings.status_report.machine_position)
 801ae8a:	4b86      	ldr	r3, [pc, #536]	@ (801b0a4 <report_realtime_status+0x57c>)
 801ae8c:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801ae90:	f013 0f01 	tst.w	r3, #1
 801ae94:	d1ec      	bne.n	801ae70 <report_realtime_status+0x348>
                print_position[idx] -= wco[idx];
 801ae96:	ab0a      	add	r3, sp, #40	@ 0x28
 801ae98:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801ae9c:	ed53 7a04 	vldr	s15, [r3, #-16]
 801aea0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801aea4:	ed43 7a04 	vstr	s15, [r3, #-16]
 801aea8:	e7e2      	b.n	801ae70 <report_realtime_status+0x348>
 801aeaa:	2500      	movs	r5, #0
 801aeac:	e7e1      	b.n	801ae72 <report_realtime_status+0x34a>
 801aeae:	2500      	movs	r5, #0
 801aeb0:	e7df      	b.n	801ae72 <report_realtime_status+0x34a>
    hal.stream.write_all(settings.status_report.machine_position ? "|MPos:" : "|WPos:");
 801aeb2:	4883      	ldr	r0, [pc, #524]	@ (801b0c0 <report_realtime_status+0x598>)
 801aeb4:	e6a9      	b.n	801ac0a <report_realtime_status+0xe2>
        plan_block_t *cur_block = plan_get_current_block();
 801aeb6:	f7fb fdf3 	bl	8016aa0 <plan_get_current_block>
        if (cur_block != NULL && cur_block->line_number > 0)
 801aeba:	2800      	cmp	r0, #0
 801aebc:	f43f aed3 	beq.w	801ac66 <report_realtime_status+0x13e>
 801aec0:	6980      	ldr	r0, [r0, #24]
 801aec2:	2800      	cmp	r0, #0
 801aec4:	f77f aecf 	ble.w	801ac66 <report_realtime_status+0x13e>
            hal.stream.write_all(appendbuf(2, "|Ln:", uitoa((uint32_t)cur_block->line_number)));
 801aec8:	4b78      	ldr	r3, [pc, #480]	@ (801b0ac <report_realtime_status+0x584>)
 801aeca:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801aece:	f7fa fe57 	bl	8015b80 <uitoa>
 801aed2:	4602      	mov	r2, r0
 801aed4:	497b      	ldr	r1, [pc, #492]	@ (801b0c4 <report_realtime_status+0x59c>)
 801aed6:	2002      	movs	r0, #2
 801aed8:	f7fd ff22 	bl	8018d20 <appendbuf>
 801aedc:	47a8      	blx	r5
 801aede:	e6c2      	b.n	801ac66 <report_realtime_status+0x13e>
            hal.stream.write_all(appendbuf(2, ",", uitoa(spindle_0_state.on ? lroundf(spindle_0->param->rpm_overridden) : 0)));
 801aee0:	6873      	ldr	r3, [r6, #4]
 801aee2:	ed93 0a01 	vldr	s0, [r3, #4]
 801aee6:	f00c fe5d 	bl	8027ba4 <lroundf>
 801aeea:	e6e5      	b.n	801acb8 <report_realtime_status+0x190>
            hal.stream.write_all(appendbuf(2, "|F:", get_rate_value(st_get_realtime_rate())));
 801aeec:	4b6f      	ldr	r3, [pc, #444]	@ (801b0ac <report_realtime_status+0x584>)
 801aeee:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801aef2:	4b75      	ldr	r3, [pc, #468]	@ (801b0c8 <report_realtime_status+0x5a0>)
 801aef4:	f8d3 a000 	ldr.w	sl, [r3]
 801aef8:	f005 fd5a 	bl	80209b0 <st_get_realtime_rate>
 801aefc:	47d0      	blx	sl
 801aefe:	4602      	mov	r2, r0
 801af00:	4972      	ldr	r1, [pc, #456]	@ (801b0cc <report_realtime_status+0x5a4>)
 801af02:	2002      	movs	r0, #2
 801af04:	f7fd ff0c 	bl	8018d20 <appendbuf>
 801af08:	47a8      	blx	r5
    if(settings.status_report.pin_state) {
 801af0a:	4b66      	ldr	r3, [pc, #408]	@ (801b0a4 <report_realtime_status+0x57c>)
 801af0c:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801af10:	f013 0f10 	tst.w	r3, #16
 801af14:	d045      	beq.n	801afa2 <report_realtime_status+0x47a>
        axes_signals_t lim_pin_state = limit_signals_merge(hal.limits.get_state());
 801af16:	4d65      	ldr	r5, [pc, #404]	@ (801b0ac <report_realtime_status+0x584>)
 801af18:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 801af1a:	4798      	blx	r3
 801af1c:	9009      	str	r0, [sp, #36]	@ 0x24
 801af1e:	f7f8 fa8f 	bl	8013440 <limit_signals_merge>
 801af22:	4682      	mov	sl, r0
        control_signals_t ctrl_pin_state = hal.control.get_state();
 801af24:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801af26:	4798      	blx	r3
 801af28:	4605      	mov	r5, r0
        ctrl_pin_state.probe_triggered = probe_state.triggered;
 801af2a:	f369 358e 	bfi	r5, r9, #14, #1
        ctrl_pin_state.probe_disconnected = !probe_state.connected;
 801af2e:	f3c9 0946 	ubfx	r9, r9, #1, #7
 801af32:	f089 0901 	eor.w	r9, r9, #1
 801af36:	f369 15c7 	bfi	r5, r9, #7, #1
        ctrl_pin_state.cycle_start |= sys.report.cycle_start;
 801af3a:	f3c5 0380 	ubfx	r3, r5, #2, #1
 801af3e:	495a      	ldr	r1, [pc, #360]	@ (801b0a8 <report_realtime_status+0x580>)
 801af40:	f891 2033 	ldrb.w	r2, [r1, #51]	@ 0x33
 801af44:	f3c2 1280 	ubfx	r2, r2, #6, #1
 801af48:	4313      	orrs	r3, r2
 801af4a:	f363 0582 	bfi	r5, r3, #2, #1
        if(sys.flags.value & sys_switches.value) {
 801af4e:	8acb      	ldrh	r3, [r1, #22]
 801af50:	f013 0fd0 	tst.w	r3, #208	@ 0xd0
 801af54:	d01e      	beq.n	801af94 <report_realtime_status+0x46c>
            if(!hal.signals_cap.stop_disable)
 801af56:	4b55      	ldr	r3, [pc, #340]	@ (801b0ac <report_realtime_status+0x584>)
 801af58:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801af5c:	f013 0f20 	tst.w	r3, #32
 801af60:	d104      	bne.n	801af6c <report_realtime_status+0x444>
                ctrl_pin_state.stop_disable = sys.flags.optional_stop_disable;
 801af62:	7d8a      	ldrb	r2, [r1, #22]
 801af64:	f3c2 1280 	ubfx	r2, r2, #6, #1
 801af68:	f362 1545 	bfi	r5, r2, #5, #1
            if(!hal.signals_cap.block_delete)
 801af6c:	f013 0f10 	tst.w	r3, #16
 801af70:	d105      	bne.n	801af7e <report_realtime_status+0x456>
                ctrl_pin_state.block_delete = sys.flags.block_delete_enabled;
 801af72:	4b4d      	ldr	r3, [pc, #308]	@ (801b0a8 <report_realtime_status+0x580>)
 801af74:	7d9b      	ldrb	r3, [r3, #22]
 801af76:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801af7a:	f363 1504 	bfi	r5, r3, #4, #1
            if(!hal.signals_cap.single_block)
 801af7e:	4b4b      	ldr	r3, [pc, #300]	@ (801b0ac <report_realtime_status+0x584>)
 801af80:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
 801af84:	f013 0f08 	tst.w	r3, #8
 801af88:	d104      	bne.n	801af94 <report_realtime_status+0x46c>
                ctrl_pin_state.single_block = sys.flags.single_block;
 801af8a:	4b47      	ldr	r3, [pc, #284]	@ (801b0a8 <report_realtime_status+0x580>)
 801af8c:	7d9b      	ldrb	r3, [r3, #22]
 801af8e:	09db      	lsrs	r3, r3, #7
 801af90:	f363 25cb 	bfi	r5, r3, #11, #1
        if(lim_pin_state.value | ctrl_pin_state.value) {
 801af94:	fa5f f38a 	uxtb.w	r3, sl
 801af98:	fa1f f985 	uxth.w	r9, r5
 801af9c:	ea53 0209 	orrs.w	r2, r3, r9
 801afa0:	d118      	bne.n	801afd4 <report_realtime_status+0x4ac>
    if(settings.status_report.work_coord_offset) {
 801afa2:	4b40      	ldr	r3, [pc, #256]	@ (801b0a4 <report_realtime_status+0x57c>)
 801afa4:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801afa8:	f013 0f20 	tst.w	r3, #32
 801afac:	d03b      	beq.n	801b026 <report_realtime_status+0x4fe>
        if(wco_counter > 0 && !report.wco) {
 801afae:	4a48      	ldr	r2, [pc, #288]	@ (801b0d0 <report_realtime_status+0x5a8>)
 801afb0:	7812      	ldrb	r2, [r2, #0]
 801afb2:	b37a      	cbz	r2, 801b014 <report_realtime_status+0x4ec>
 801afb4:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801afb8:	d12c      	bne.n	801b014 <report_realtime_status+0x4ec>
            if(wco_counter > (REPORT_WCO_REFRESH_IDLE_COUNT - 1) && state == STATE_IDLE)
 801afba:	2a09      	cmp	r2, #9
 801afbc:	d905      	bls.n	801afca <report_realtime_status+0x4a2>
 801afbe:	f1b8 0f00 	cmp.w	r8, #0
 801afc2:	d102      	bne.n	801afca <report_realtime_status+0x4a2>
                wco_counter = REPORT_WCO_REFRESH_IDLE_COUNT - 1;
 801afc4:	4a42      	ldr	r2, [pc, #264]	@ (801b0d0 <report_realtime_status+0x5a8>)
 801afc6:	2109      	movs	r1, #9
 801afc8:	7011      	strb	r1, [r2, #0]
            wco_counter--;
 801afca:	4941      	ldr	r1, [pc, #260]	@ (801b0d0 <report_realtime_status+0x5a8>)
 801afcc:	780a      	ldrb	r2, [r1, #0]
 801afce:	3a01      	subs	r2, #1
 801afd0:	700a      	strb	r2, [r1, #0]
 801afd2:	e02a      	b.n	801b02a <report_realtime_status+0x502>
            strcpy(buf, "|Pn:");
 801afd4:	4a3f      	ldr	r2, [pc, #252]	@ (801b0d4 <report_realtime_status+0x5ac>)
 801afd6:	4940      	ldr	r1, [pc, #256]	@ (801b0d8 <report_realtime_status+0x5b0>)
 801afd8:	c903      	ldmia	r1, {r0, r1}
 801afda:	6010      	str	r0, [r2, #0]
 801afdc:	7111      	strb	r1, [r2, #4]
            if(lim_pin_state.value && !ctrl_pin_state.limits_override)
 801afde:	b14b      	cbz	r3, 801aff4 <report_realtime_status+0x4cc>
 801afe0:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 801afe4:	d001      	beq.n	801afea <report_realtime_status+0x4c2>
            char *append = &buf[4];
 801afe6:	483d      	ldr	r0, [pc, #244]	@ (801b0dc <report_realtime_status+0x5b4>)
 801afe8:	e005      	b.n	801aff6 <report_realtime_status+0x4ce>
                append = axis_signals_tostring(append, lim_pin_state);
 801afea:	4651      	mov	r1, sl
 801afec:	1d10      	adds	r0, r2, #4
 801afee:	f7fd fab1 	bl	8018554 <axis_signals_tostring>
 801aff2:	e000      	b.n	801aff6 <report_realtime_status+0x4ce>
            char *append = &buf[4];
 801aff4:	4839      	ldr	r0, [pc, #228]	@ (801b0dc <report_realtime_status+0x5b4>)
            if(ctrl_pin_state.value)
 801aff6:	f1b9 0f00 	cmp.w	r9, #0
 801affa:	d107      	bne.n	801b00c <report_realtime_status+0x4e4>
            *append = '\0';
 801affc:	2300      	movs	r3, #0
 801affe:	7003      	strb	r3, [r0, #0]
            hal.stream.write_all(buf);
 801b000:	4b2a      	ldr	r3, [pc, #168]	@ (801b0ac <report_realtime_status+0x584>)
 801b002:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b006:	4833      	ldr	r0, [pc, #204]	@ (801b0d4 <report_realtime_status+0x5ac>)
 801b008:	4798      	blx	r3
 801b00a:	e7ca      	b.n	801afa2 <report_realtime_status+0x47a>
                append = control_signals_tostring(append, ctrl_pin_state);
 801b00c:	4629      	mov	r1, r5
 801b00e:	f7fd fab9 	bl	8018584 <control_signals_tostring>
 801b012:	e7f3      	b.n	801affc <report_realtime_status+0x4d4>
            wco_counter = state & (STATE_HOMING|STATE_CYCLE|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 801b014:	f018 0f7c 	tst.w	r8, #124	@ 0x7c
 801b018:	d003      	beq.n	801b022 <report_realtime_status+0x4fa>
 801b01a:	211d      	movs	r1, #29
 801b01c:	4a2c      	ldr	r2, [pc, #176]	@ (801b0d0 <report_realtime_status+0x5a8>)
 801b01e:	7011      	strb	r1, [r2, #0]
 801b020:	e003      	b.n	801b02a <report_realtime_status+0x502>
 801b022:	2109      	movs	r1, #9
 801b024:	e7fa      	b.n	801b01c <report_realtime_status+0x4f4>
        report.wco = Off;
 801b026:	f36f 2408 	bfc	r4, #8, #1
    if(settings.status_report.overrides) {
 801b02a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801b02e:	d059      	beq.n	801b0e4 <report_realtime_status+0x5bc>
        if (override_counter > 0 && !report.overrides)
 801b030:	4b2b      	ldr	r3, [pc, #172]	@ (801b0e0 <report_realtime_status+0x5b8>)
 801b032:	781b      	ldrb	r3, [r3, #0]
 801b034:	b133      	cbz	r3, 801b044 <report_realtime_status+0x51c>
 801b036:	f014 0f40 	tst.w	r4, #64	@ 0x40
 801b03a:	d103      	bne.n	801b044 <report_realtime_status+0x51c>
            override_counter--;
 801b03c:	3b01      	subs	r3, #1
 801b03e:	4a28      	ldr	r2, [pc, #160]	@ (801b0e0 <report_realtime_status+0x5b8>)
 801b040:	7013      	strb	r3, [r2, #0]
 801b042:	e051      	b.n	801b0e8 <report_realtime_status+0x5c0>
        else if((report.overrides = !report.wco)) {
 801b044:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801b048:	f083 0301 	eor.w	r3, r3, #1
 801b04c:	f003 0301 	and.w	r3, r3, #1
 801b050:	f363 1486 	bfi	r4, r3, #6, #1
 801b054:	2b00      	cmp	r3, #0
 801b056:	d047      	beq.n	801b0e8 <report_realtime_status+0x5c0>
            report.spindle = report.spindle || spindle_0_state.on;
 801b058:	f014 0f10 	tst.w	r4, #16
 801b05c:	d104      	bne.n	801b068 <report_realtime_status+0x540>
 801b05e:	f017 0f01 	tst.w	r7, #1
 801b062:	d00e      	beq.n	801b082 <report_realtime_status+0x55a>
 801b064:	2301      	movs	r3, #1
 801b066:	e000      	b.n	801b06a <report_realtime_status+0x542>
 801b068:	2301      	movs	r3, #1
 801b06a:	f363 1404 	bfi	r4, r3, #4, #1
            report.coolant = report.coolant || hal.coolant.get_state().value != 0;
 801b06e:	f014 0f20 	tst.w	r4, #32
 801b072:	d108      	bne.n	801b086 <report_realtime_status+0x55e>
 801b074:	4b0d      	ldr	r3, [pc, #52]	@ (801b0ac <report_realtime_status+0x584>)
 801b076:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b078:	4798      	blx	r3
 801b07a:	b2c0      	uxtb	r0, r0
 801b07c:	b968      	cbnz	r0, 801b09a <report_realtime_status+0x572>
 801b07e:	2300      	movs	r3, #0
 801b080:	e002      	b.n	801b088 <report_realtime_status+0x560>
            report.spindle = report.spindle || spindle_0_state.on;
 801b082:	2300      	movs	r3, #0
 801b084:	e7f1      	b.n	801b06a <report_realtime_status+0x542>
            report.coolant = report.coolant || hal.coolant.get_state().value != 0;
 801b086:	2301      	movs	r3, #1
 801b088:	f363 1445 	bfi	r4, r3, #5, #1
            override_counter = state & (STATE_HOMING|STATE_CYCLE|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 801b08c:	f018 0f7c 	tst.w	r8, #124	@ 0x7c
 801b090:	d005      	beq.n	801b09e <report_realtime_status+0x576>
 801b092:	2213      	movs	r2, #19
 801b094:	4b12      	ldr	r3, [pc, #72]	@ (801b0e0 <report_realtime_status+0x5b8>)
 801b096:	701a      	strb	r2, [r3, #0]
 801b098:	e026      	b.n	801b0e8 <report_realtime_status+0x5c0>
            report.coolant = report.coolant || hal.coolant.get_state().value != 0;
 801b09a:	2301      	movs	r3, #1
 801b09c:	e7f4      	b.n	801b088 <report_realtime_status+0x560>
            override_counter = state & (STATE_HOMING|STATE_CYCLE|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 801b09e:	2209      	movs	r2, #9
 801b0a0:	e7f8      	b.n	801b094 <report_realtime_status+0x56c>
 801b0a2:	bf00      	nop
 801b0a4:	200022f4 	.word	0x200022f4
 801b0a8:	20001bbc 	.word	0x20001bbc
 801b0ac:	200018dc 	.word	0x200018dc
 801b0b0:	0802c6dc 	.word	0x0802c6dc
 801b0b4:	0802c6d4 	.word	0x0802c6d4
 801b0b8:	0802c6e4 	.word	0x0802c6e4
 801b0bc:	0802c6f4 	.word	0x0802c6f4
 801b0c0:	0802c678 	.word	0x0802c678
 801b0c4:	0802c70c 	.word	0x0802c70c
 801b0c8:	200021b8 	.word	0x200021b8
 801b0cc:	0802c71c 	.word	0x0802c71c
 801b0d0:	200021b5 	.word	0x200021b5
 801b0d4:	200021c4 	.word	0x200021c4
 801b0d8:	0802c720 	.word	0x0802c720
 801b0dc:	200021c8 	.word	0x200021c8
 801b0e0:	200021b6 	.word	0x200021b6
        report.overrides = Off;
 801b0e4:	f36f 1486 	bfc	r4, #6, #1
    if(report.value || gc_state.tool_change) {
 801b0e8:	9400      	str	r4, [sp, #0]
 801b0ea:	b92c      	cbnz	r4, 801b0f8 <report_realtime_status+0x5d0>
 801b0ec:	4b9e      	ldr	r3, [pc, #632]	@ (801b368 <report_realtime_status+0x840>)
 801b0ee:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	f000 80e2 	beq.w	801b2bc <report_realtime_status+0x794>
        if(report.wco) {
 801b0f8:	f3c4 2907 	ubfx	r9, r4, #8, #8
 801b0fc:	46c8      	mov	r8, r9
 801b0fe:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801b102:	d014      	beq.n	801b12e <report_realtime_status+0x606>
            if(report.force_wco || !sys.flags.synchronizing) {
 801b104:	f014 5f00 	tst.w	r4, #536870912	@ 0x20000000
 801b108:	d105      	bne.n	801b116 <report_realtime_status+0x5ee>
 801b10a:	4b98      	ldr	r3, [pc, #608]	@ (801b36c <report_realtime_status+0x844>)
 801b10c:	7ddb      	ldrb	r3, [r3, #23]
 801b10e:	f013 0f04 	tst.w	r3, #4
 801b112:	f040 8124 	bne.w	801b35e <report_realtime_status+0x836>
                hal.stream.write_all("|WCO:");
 801b116:	4d96      	ldr	r5, [pc, #600]	@ (801b370 <report_realtime_status+0x848>)
 801b118:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 801b11c:	4895      	ldr	r0, [pc, #596]	@ (801b374 <report_realtime_status+0x84c>)
 801b11e:	4798      	blx	r3
                hal.stream.write_all(get_axis_values(wco));
 801b120:	f8d5 50b8 	ldr.w	r5, [r5, #184]	@ 0xb8
 801b124:	4b94      	ldr	r3, [pc, #592]	@ (801b378 <report_realtime_status+0x850>)
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	a803      	add	r0, sp, #12
 801b12a:	4798      	blx	r3
 801b12c:	47a8      	blx	r5
        if(report.gwco) {
 801b12e:	f018 0f02 	tst.w	r8, #2
 801b132:	d00b      	beq.n	801b14c <report_realtime_status+0x624>
            hal.stream.write_all("|WCS:G");
 801b134:	4d8e      	ldr	r5, [pc, #568]	@ (801b370 <report_realtime_status+0x848>)
 801b136:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 801b13a:	4890      	ldr	r0, [pc, #576]	@ (801b37c <report_realtime_status+0x854>)
 801b13c:	4798      	blx	r3
            hal.stream.write_all(map_coord_system(gc_state.modal.coord_system.id));
 801b13e:	f8d5 50b8 	ldr.w	r5, [r5, #184]	@ 0xb8
 801b142:	4b89      	ldr	r3, [pc, #548]	@ (801b368 <report_realtime_status+0x840>)
 801b144:	7d18      	ldrb	r0, [r3, #20]
 801b146:	f7fd fd99 	bl	8018c7c <map_coord_system>
 801b14a:	47a8      	blx	r5
        if(report.overrides) {
 801b14c:	b2e5      	uxtb	r5, r4
 801b14e:	f014 0f40 	tst.w	r4, #64	@ 0x40
 801b152:	f040 8133 	bne.w	801b3bc <report_realtime_status+0x894>
        if(report.spindle || report.coolant || report.tool || gc_state.tool_change) {
 801b156:	f015 0fb0 	tst.w	r5, #176	@ 0xb0
 801b15a:	d104      	bne.n	801b166 <report_realtime_status+0x63e>
 801b15c:	4b82      	ldr	r3, [pc, #520]	@ (801b368 <report_realtime_status+0x840>)
 801b15e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801b162:	2b00      	cmp	r3, #0
 801b164:	d03c      	beq.n	801b1e0 <report_realtime_status+0x6b8>
            coolant_state_t cl_state = hal.coolant.get_state();
 801b166:	4b82      	ldr	r3, [pc, #520]	@ (801b370 <report_realtime_status+0x848>)
 801b168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b16a:	4798      	blx	r3
            strcpy(buf, "|A:");
 801b16c:	4b84      	ldr	r3, [pc, #528]	@ (801b380 <report_realtime_status+0x858>)
 801b16e:	4a85      	ldr	r2, [pc, #532]	@ (801b384 <report_realtime_status+0x85c>)
 801b170:	601a      	str	r2, [r3, #0]
            if (spindle_0_state.on)
 801b172:	b2fa      	uxtb	r2, r7
 801b174:	f017 0f01 	tst.w	r7, #1
 801b178:	f000 8151 	beq.w	801b41e <report_realtime_status+0x8f6>
                *append++ = spindle_0_state.ccw ? 'C' : 'S';
 801b17c:	f012 0f02 	tst.w	r2, #2
 801b180:	f000 814b 	beq.w	801b41a <report_realtime_status+0x8f2>
 801b184:	2143      	movs	r1, #67	@ 0x43
 801b186:	4b7e      	ldr	r3, [pc, #504]	@ (801b380 <report_realtime_status+0x858>)
 801b188:	70d9      	strb	r1, [r3, #3]
 801b18a:	3304      	adds	r3, #4
            if(spindle_0_state.encoder_error && hal.driver_cap.spindle_sync)
 801b18c:	f012 0f20 	tst.w	r2, #32
 801b190:	d008      	beq.n	801b1a4 <report_realtime_status+0x67c>
 801b192:	4a77      	ldr	r2, [pc, #476]	@ (801b370 <report_realtime_status+0x848>)
 801b194:	f892 21d9 	ldrb.w	r2, [r2, #473]	@ 0x1d9
 801b198:	f012 0f01 	tst.w	r2, #1
 801b19c:	d002      	beq.n	801b1a4 <report_realtime_status+0x67c>
                *append++ = 'E';
 801b19e:	2245      	movs	r2, #69	@ 0x45
 801b1a0:	f803 2b01 	strb.w	r2, [r3], #1
            if (cl_state.flood)
 801b1a4:	b2c2      	uxtb	r2, r0
 801b1a6:	f010 0f01 	tst.w	r0, #1
 801b1aa:	d002      	beq.n	801b1b2 <report_realtime_status+0x68a>
                *append++ = 'F';
 801b1ac:	2146      	movs	r1, #70	@ 0x46
 801b1ae:	f803 1b01 	strb.w	r1, [r3], #1
            if (cl_state.mist)
 801b1b2:	f012 0f02 	tst.w	r2, #2
 801b1b6:	d002      	beq.n	801b1be <report_realtime_status+0x696>
                *append++ = 'M';
 801b1b8:	224d      	movs	r2, #77	@ 0x4d
 801b1ba:	f803 2b01 	strb.w	r2, [r3], #1
            if(gc_state.tool_change && !report.tool)
 801b1be:	4a6a      	ldr	r2, [pc, #424]	@ (801b368 <report_realtime_status+0x840>)
 801b1c0:	f892 207f 	ldrb.w	r2, [r2, #127]	@ 0x7f
 801b1c4:	b12a      	cbz	r2, 801b1d2 <report_realtime_status+0x6aa>
 801b1c6:	f015 0f80 	tst.w	r5, #128	@ 0x80
 801b1ca:	d102      	bne.n	801b1d2 <report_realtime_status+0x6aa>
                *append++ = 'T';
 801b1cc:	2254      	movs	r2, #84	@ 0x54
 801b1ce:	f803 2b01 	strb.w	r2, [r3], #1
            *append = '\0';
 801b1d2:	2200      	movs	r2, #0
 801b1d4:	701a      	strb	r2, [r3, #0]
            hal.stream.write_all(buf);
 801b1d6:	4b66      	ldr	r3, [pc, #408]	@ (801b370 <report_realtime_status+0x848>)
 801b1d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b1dc:	4868      	ldr	r0, [pc, #416]	@ (801b380 <report_realtime_status+0x858>)
 801b1de:	4798      	blx	r3
        if(report.scaling) {
 801b1e0:	f015 0f02 	tst.w	r5, #2
 801b1e4:	f040 811d 	bne.w	801b422 <report_realtime_status+0x8fa>
        if((report.all || report.mpg_mode) && settings.report_interval) {
 801b1e8:	4b67      	ldr	r3, [pc, #412]	@ (801b388 <report_realtime_status+0x860>)
 801b1ea:	9a00      	ldr	r2, [sp, #0]
 801b1ec:	421a      	tst	r2, r3
 801b1ee:	d013      	beq.n	801b218 <report_realtime_status+0x6f0>
 801b1f0:	4b66      	ldr	r3, [pc, #408]	@ (801b38c <report_realtime_status+0x864>)
 801b1f2:	8a9b      	ldrh	r3, [r3, #20]
 801b1f4:	b183      	cbz	r3, 801b218 <report_realtime_status+0x6f0>
            hal.stream.write_all(sys.flags.auto_reporting ? "|AR:" : "|AR");
 801b1f6:	4b5e      	ldr	r3, [pc, #376]	@ (801b370 <report_realtime_status+0x848>)
 801b1f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b1fc:	4a5b      	ldr	r2, [pc, #364]	@ (801b36c <report_realtime_status+0x844>)
 801b1fe:	7dd2      	ldrb	r2, [r2, #23]
 801b200:	f012 0f02 	tst.w	r2, #2
 801b204:	f000 811e 	beq.w	801b444 <report_realtime_status+0x91c>
 801b208:	4861      	ldr	r0, [pc, #388]	@ (801b390 <report_realtime_status+0x868>)
 801b20a:	4798      	blx	r3
            if(sys.flags.auto_reporting)
 801b20c:	4b57      	ldr	r3, [pc, #348]	@ (801b36c <report_realtime_status+0x844>)
 801b20e:	7ddb      	ldrb	r3, [r3, #23]
 801b210:	f013 0f02 	tst.w	r3, #2
 801b214:	f040 8118 	bne.w	801b448 <report_realtime_status+0x920>
        if(report.mpg_mode)
 801b218:	f015 0f01 	tst.w	r5, #1
 801b21c:	d00a      	beq.n	801b234 <report_realtime_status+0x70c>
            hal.stream.write_all(sys.mpg_mode ? "|MPG:1" : "|MPG:0");
 801b21e:	4b54      	ldr	r3, [pc, #336]	@ (801b370 <report_realtime_status+0x848>)
 801b220:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b224:	4a51      	ldr	r2, [pc, #324]	@ (801b36c <report_realtime_status+0x844>)
 801b226:	f892 207f 	ldrb.w	r2, [r2, #127]	@ 0x7f
 801b22a:	2a00      	cmp	r2, #0
 801b22c:	f000 8115 	beq.w	801b45a <report_realtime_status+0x932>
 801b230:	4858      	ldr	r0, [pc, #352]	@ (801b394 <report_realtime_status+0x86c>)
 801b232:	4798      	blx	r3
        if(report.homed && (sys.homing.mask || settings.homing.flags.single_axis_commands || settings.homing.flags.manual)) {
 801b234:	f015 0f04 	tst.w	r5, #4
 801b238:	d020      	beq.n	801b27c <report_realtime_status+0x754>
 801b23a:	4b4c      	ldr	r3, [pc, #304]	@ (801b36c <report_realtime_status+0x844>)
 801b23c:	7e9b      	ldrb	r3, [r3, #26]
 801b23e:	b92b      	cbnz	r3, 801b24c <report_realtime_status+0x724>
 801b240:	4a52      	ldr	r2, [pc, #328]	@ (801b38c <report_realtime_status+0x864>)
 801b242:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 801b246:	f012 0f12 	tst.w	r2, #18
 801b24a:	d017      	beq.n	801b27c <report_realtime_status+0x754>
            axes_signals_t homing = {sys.homing.mask ? sys.homing.mask : AXES_BITMASK};
 801b24c:	b903      	cbnz	r3, 801b250 <report_realtime_status+0x728>
 801b24e:	2307      	movs	r3, #7
            hal.stream.write_all(appendbuf(2, "|H:", (homing.mask & sys.homed.mask) == homing.mask ? "1" : "0"));
 801b250:	4a47      	ldr	r2, [pc, #284]	@ (801b370 <report_realtime_status+0x848>)
 801b252:	f8d2 60b8 	ldr.w	r6, [r2, #184]	@ 0xb8
 801b256:	4a45      	ldr	r2, [pc, #276]	@ (801b36c <report_realtime_status+0x844>)
 801b258:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 801b25c:	4393      	bics	r3, r2
 801b25e:	f000 80fe 	beq.w	801b45e <report_realtime_status+0x936>
 801b262:	4a4d      	ldr	r2, [pc, #308]	@ (801b398 <report_realtime_status+0x870>)
 801b264:	494d      	ldr	r1, [pc, #308]	@ (801b39c <report_realtime_status+0x874>)
 801b266:	2002      	movs	r0, #2
 801b268:	f7fd fd5a 	bl	8018d20 <appendbuf>
 801b26c:	47b0      	blx	r6
            if(settings.homing.flags.single_axis_commands)
 801b26e:	4b47      	ldr	r3, [pc, #284]	@ (801b38c <report_realtime_status+0x864>)
 801b270:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 801b274:	f013 0f02 	tst.w	r3, #2
 801b278:	f040 80f3 	bne.w	801b462 <report_realtime_status+0x93a>
        if(report.xmode && settings.mode == Mode_Lathe)
 801b27c:	f015 0f08 	tst.w	r5, #8
 801b280:	d004      	beq.n	801b28c <report_realtime_status+0x764>
 801b282:	4b42      	ldr	r3, [pc, #264]	@ (801b38c <report_realtime_status+0x864>)
 801b284:	7e1b      	ldrb	r3, [r3, #24]
 801b286:	2b02      	cmp	r3, #2
 801b288:	f000 80fa 	beq.w	801b480 <report_realtime_status+0x958>
        if(report.tool)
 801b28c:	f015 0f80 	tst.w	r5, #128	@ 0x80
 801b290:	f040 8101 	bne.w	801b496 <report_realtime_status+0x96e>
        if(report.tlo_reference)
 801b294:	f019 0f80 	tst.w	r9, #128	@ 0x80
 801b298:	f040 810d 	bne.w	801b4b6 <report_realtime_status+0x98e>
        if(report.m66result && sys.var5399 > -2) { // M66 result
 801b29c:	f018 0f08 	tst.w	r8, #8
 801b2a0:	d00c      	beq.n	801b2bc <report_realtime_status+0x794>
 801b2a2:	4b32      	ldr	r3, [pc, #200]	@ (801b36c <report_realtime_status+0x844>)
 801b2a4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801b2a6:	f1b0 3fff 	cmp.w	r0, #4294967295
 801b2aa:	db07      	blt.n	801b2bc <report_realtime_status+0x794>
            if(sys.var5399 >= 0)
 801b2ac:	2800      	cmp	r0, #0
 801b2ae:	f280 8113 	bge.w	801b4d8 <report_realtime_status+0x9b0>
                hal.stream.write_all("|In:-1");
 801b2b2:	4b2f      	ldr	r3, [pc, #188]	@ (801b370 <report_realtime_status+0x848>)
 801b2b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b2b8:	4839      	ldr	r0, [pc, #228]	@ (801b3a0 <report_realtime_status+0x878>)
 801b2ba:	4798      	blx	r3
    if(grbl.on_realtime_report)
 801b2bc:	4b39      	ldr	r3, [pc, #228]	@ (801b3a4 <report_realtime_status+0x87c>)
 801b2be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b2c0:	b12b      	cbz	r3, 801b2ce <report_realtime_status+0x7a6>
        grbl.on_realtime_report(hal.stream.write_all, sys.report);
 801b2c2:	4a2a      	ldr	r2, [pc, #168]	@ (801b36c <report_realtime_status+0x844>)
 801b2c4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 801b2c6:	4a2a      	ldr	r2, [pc, #168]	@ (801b370 <report_realtime_status+0x848>)
 801b2c8:	f8d2 00b8 	ldr.w	r0, [r2, #184]	@ 0xb8
 801b2cc:	4798      	blx	r3
    if(report.all) {
 801b2ce:	2c00      	cmp	r4, #0
 801b2d0:	f2c0 810e 	blt.w	801b4f0 <report_realtime_status+0x9c8>
    if(settings.status_report.parser_state) {
 801b2d4:	4b2d      	ldr	r3, [pc, #180]	@ (801b38c <report_realtime_status+0x864>)
 801b2d6:	f893 30fd 	ldrb.w	r3, [r3, #253]	@ 0xfd
 801b2da:	f013 0f02 	tst.w	r3, #2
 801b2de:	f000 8114 	beq.w	801b50a <report_realtime_status+0x9e2>
        bool is_changed = feed_rate != gc_state.feed_rate || spindle_rpm != gc_state.spindle.rpm || tool_id != gc_state.tool->tool_id;
 801b2e2:	4b21      	ldr	r3, [pc, #132]	@ (801b368 <report_realtime_status+0x840>)
 801b2e4:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 801b2e8:	4b2f      	ldr	r3, [pc, #188]	@ (801b3a8 <report_realtime_status+0x880>)
 801b2ea:	ed93 7a00 	vldr	s14, [r3]
 801b2ee:	eef4 7a47 	vcmp.f32	s15, s14
 801b2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2f6:	d113      	bne.n	801b320 <report_realtime_status+0x7f8>
 801b2f8:	4b1b      	ldr	r3, [pc, #108]	@ (801b368 <report_realtime_status+0x840>)
 801b2fa:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 801b2fe:	4b2b      	ldr	r3, [pc, #172]	@ (801b3ac <report_realtime_status+0x884>)
 801b300:	ed93 7a00 	vldr	s14, [r3]
 801b304:	eef4 6a47 	vcmp.f32	s13, s14
 801b308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b30c:	d108      	bne.n	801b320 <report_realtime_status+0x7f8>
 801b30e:	4b16      	ldr	r3, [pc, #88]	@ (801b368 <report_realtime_status+0x840>)
 801b310:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801b314:	691a      	ldr	r2, [r3, #16]
 801b316:	4b26      	ldr	r3, [pc, #152]	@ (801b3b0 <report_realtime_status+0x888>)
 801b318:	681b      	ldr	r3, [r3, #0]
 801b31a:	429a      	cmp	r2, r3
 801b31c:	f000 810a 	beq.w	801b534 <report_realtime_status+0xa0c>
            feed_rate = gc_state.feed_rate;
 801b320:	4b21      	ldr	r3, [pc, #132]	@ (801b3a8 <report_realtime_status+0x880>)
 801b322:	edc3 7a00 	vstr	s15, [r3]
            tool_id = gc_state.tool->tool_id;
 801b326:	4b10      	ldr	r3, [pc, #64]	@ (801b368 <report_realtime_status+0x840>)
 801b328:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 801b32c:	6911      	ldr	r1, [r2, #16]
 801b32e:	4a20      	ldr	r2, [pc, #128]	@ (801b3b0 <report_realtime_status+0x888>)
 801b330:	6011      	str	r1, [r2, #0]
            spindle_rpm = gc_state.spindle.rpm;
 801b332:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b334:	4b1d      	ldr	r3, [pc, #116]	@ (801b3ac <report_realtime_status+0x884>)
 801b336:	601a      	str	r2, [r3, #0]
 801b338:	2501      	movs	r5, #1
        if (is_changed)
 801b33a:	b12d      	cbz	r5, 801b348 <report_realtime_status+0x820>
            system_set_exec_state_flag(EXEC_GCODE_REPORT);
 801b33c:	4b0c      	ldr	r3, [pc, #48]	@ (801b370 <report_realtime_status+0x848>)
 801b33e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b340:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801b344:	481b      	ldr	r0, [pc, #108]	@ (801b3b4 <report_realtime_status+0x88c>)
 801b346:	4798      	blx	r3
        if(report.tool_offset)
 801b348:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 801b34c:	f000 80dd 	beq.w	801b50a <report_realtime_status+0x9e2>
            system_set_exec_state_flag(EXEC_TLO_REPORT);
 801b350:	4b07      	ldr	r3, [pc, #28]	@ (801b370 <report_realtime_status+0x848>)
 801b352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b354:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801b358:	4816      	ldr	r0, [pc, #88]	@ (801b3b4 <report_realtime_status+0x88c>)
 801b35a:	4798      	blx	r3
 801b35c:	e0d5      	b.n	801b50a <report_realtime_status+0x9e2>
                wco_counter = 0;
 801b35e:	4b16      	ldr	r3, [pc, #88]	@ (801b3b8 <report_realtime_status+0x890>)
 801b360:	2200      	movs	r2, #0
 801b362:	701a      	strb	r2, [r3, #0]
 801b364:	e6e3      	b.n	801b12e <report_realtime_status+0x606>
 801b366:	bf00      	nop
 801b368:	20001614 	.word	0x20001614
 801b36c:	20001bbc 	.word	0x20001bbc
 801b370:	200018dc 	.word	0x200018dc
 801b374:	0802c728 	.word	0x0802c728
 801b378:	200021c0 	.word	0x200021c0
 801b37c:	0802c730 	.word	0x0802c730
 801b380:	200021c4 	.word	0x200021c4
 801b384:	003a417c 	.word	0x003a417c
 801b388:	80000001 	.word	0x80000001
 801b38c:	200022f4 	.word	0x200022f4
 801b390:	0802c680 	.word	0x0802c680
 801b394:	0802c68c 	.word	0x0802c68c
 801b398:	0802a20c 	.word	0x0802a20c
 801b39c:	0802c748 	.word	0x0802c748
 801b3a0:	0802c760 	.word	0x0802c760
 801b3a4:	20001ac4 	.word	0x20001ac4
 801b3a8:	200021b0 	.word	0x200021b0
 801b3ac:	200021ac 	.word	0x200021ac
 801b3b0:	200021a8 	.word	0x200021a8
 801b3b4:	20001c04 	.word	0x20001c04
 801b3b8:	200021b5 	.word	0x200021b5
            hal.stream.write_all(appendbuf(2, "|Ov:", uitoa((uint32_t)sys.override.feed_rate)));
 801b3bc:	f8df a1f4 	ldr.w	sl, [pc, #500]	@ 801b5b4 <report_realtime_status+0xa8c>
 801b3c0:	f8da 30b8 	ldr.w	r3, [sl, #184]	@ 0xb8
 801b3c4:	9301      	str	r3, [sp, #4]
 801b3c6:	f8df b204 	ldr.w	fp, [pc, #516]	@ 801b5cc <report_realtime_status+0xaa4>
 801b3ca:	f8db 001c 	ldr.w	r0, [fp, #28]
 801b3ce:	f7fa fbd7 	bl	8015b80 <uitoa>
 801b3d2:	4602      	mov	r2, r0
 801b3d4:	4974      	ldr	r1, [pc, #464]	@ (801b5a8 <report_realtime_status+0xa80>)
 801b3d6:	2002      	movs	r0, #2
 801b3d8:	f7fd fca2 	bl	8018d20 <appendbuf>
 801b3dc:	9b01      	ldr	r3, [sp, #4]
 801b3de:	4798      	blx	r3
            hal.stream.write_all(appendbuf(2, ",", uitoa((uint32_t)sys.override.rapid_rate)));
 801b3e0:	f8da 30b8 	ldr.w	r3, [sl, #184]	@ 0xb8
 801b3e4:	9301      	str	r3, [sp, #4]
 801b3e6:	f8db 0020 	ldr.w	r0, [fp, #32]
 801b3ea:	f7fa fbc9 	bl	8015b80 <uitoa>
 801b3ee:	4602      	mov	r2, r0
 801b3f0:	f8df b1dc 	ldr.w	fp, [pc, #476]	@ 801b5d0 <report_realtime_status+0xaa8>
 801b3f4:	4659      	mov	r1, fp
 801b3f6:	2002      	movs	r0, #2
 801b3f8:	f7fd fc92 	bl	8018d20 <appendbuf>
 801b3fc:	9b01      	ldr	r3, [sp, #4]
 801b3fe:	4798      	blx	r3
            hal.stream.write_all(appendbuf(2, ",", uitoa((uint32_t)spindle_0->param->override_pct)));
 801b400:	f8da a0b8 	ldr.w	sl, [sl, #184]	@ 0xb8
 801b404:	6873      	ldr	r3, [r6, #4]
 801b406:	68d8      	ldr	r0, [r3, #12]
 801b408:	f7fa fbba 	bl	8015b80 <uitoa>
 801b40c:	4602      	mov	r2, r0
 801b40e:	4659      	mov	r1, fp
 801b410:	2002      	movs	r0, #2
 801b412:	f7fd fc85 	bl	8018d20 <appendbuf>
 801b416:	47d0      	blx	sl
 801b418:	e69d      	b.n	801b156 <report_realtime_status+0x62e>
                *append++ = spindle_0_state.ccw ? 'C' : 'S';
 801b41a:	2153      	movs	r1, #83	@ 0x53
 801b41c:	e6b3      	b.n	801b186 <report_realtime_status+0x65e>
            char *append = &buf[3];
 801b41e:	4b63      	ldr	r3, [pc, #396]	@ (801b5ac <report_realtime_status+0xa84>)
 801b420:	e6b4      	b.n	801b18c <report_realtime_status+0x664>
            axis_signals_tostring(buf, gc_get_g51_state());
 801b422:	f7f2 f821 	bl	800d468 <gc_get_g51_state>
 801b426:	4601      	mov	r1, r0
 801b428:	4e61      	ldr	r6, [pc, #388]	@ (801b5b0 <report_realtime_status+0xa88>)
 801b42a:	4630      	mov	r0, r6
 801b42c:	f7fd f892 	bl	8018554 <axis_signals_tostring>
            hal.stream.write_all("|Sc:");
 801b430:	4f60      	ldr	r7, [pc, #384]	@ (801b5b4 <report_realtime_status+0xa8c>)
 801b432:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b436:	4860      	ldr	r0, [pc, #384]	@ (801b5b8 <report_realtime_status+0xa90>)
 801b438:	4798      	blx	r3
            hal.stream.write_all(buf);
 801b43a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b43e:	4630      	mov	r0, r6
 801b440:	4798      	blx	r3
 801b442:	e6d1      	b.n	801b1e8 <report_realtime_status+0x6c0>
            hal.stream.write_all(sys.flags.auto_reporting ? "|AR:" : "|AR");
 801b444:	485d      	ldr	r0, [pc, #372]	@ (801b5bc <report_realtime_status+0xa94>)
 801b446:	e6e0      	b.n	801b20a <report_realtime_status+0x6e2>
                hal.stream.write_all(uitoa(settings.report_interval));
 801b448:	4b5a      	ldr	r3, [pc, #360]	@ (801b5b4 <report_realtime_status+0xa8c>)
 801b44a:	f8d3 60b8 	ldr.w	r6, [r3, #184]	@ 0xb8
 801b44e:	4b5c      	ldr	r3, [pc, #368]	@ (801b5c0 <report_realtime_status+0xa98>)
 801b450:	8a98      	ldrh	r0, [r3, #20]
 801b452:	f7fa fb95 	bl	8015b80 <uitoa>
 801b456:	47b0      	blx	r6
 801b458:	e6de      	b.n	801b218 <report_realtime_status+0x6f0>
            hal.stream.write_all(sys.mpg_mode ? "|MPG:1" : "|MPG:0");
 801b45a:	485a      	ldr	r0, [pc, #360]	@ (801b5c4 <report_realtime_status+0xa9c>)
 801b45c:	e6e9      	b.n	801b232 <report_realtime_status+0x70a>
            hal.stream.write_all(appendbuf(2, "|H:", (homing.mask & sys.homed.mask) == homing.mask ? "1" : "0"));
 801b45e:	4a5a      	ldr	r2, [pc, #360]	@ (801b5c8 <report_realtime_status+0xaa0>)
 801b460:	e700      	b.n	801b264 <report_realtime_status+0x73c>
                hal.stream.write_all(appendbuf(2, ",", uitoa(sys.homed.mask)));
 801b462:	4b54      	ldr	r3, [pc, #336]	@ (801b5b4 <report_realtime_status+0xa8c>)
 801b464:	f8d3 60b8 	ldr.w	r6, [r3, #184]	@ 0xb8
 801b468:	4b58      	ldr	r3, [pc, #352]	@ (801b5cc <report_realtime_status+0xaa4>)
 801b46a:	f893 0054 	ldrb.w	r0, [r3, #84]	@ 0x54
 801b46e:	f7fa fb87 	bl	8015b80 <uitoa>
 801b472:	4602      	mov	r2, r0
 801b474:	4956      	ldr	r1, [pc, #344]	@ (801b5d0 <report_realtime_status+0xaa8>)
 801b476:	2002      	movs	r0, #2
 801b478:	f7fd fc52 	bl	8018d20 <appendbuf>
 801b47c:	47b0      	blx	r6
 801b47e:	e6fd      	b.n	801b27c <report_realtime_status+0x754>
            hal.stream.write_all(gc_state.modal.diameter_mode ? "|D:1" : "|D:0");
 801b480:	4b4c      	ldr	r3, [pc, #304]	@ (801b5b4 <report_realtime_status+0xa8c>)
 801b482:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b486:	4a53      	ldr	r2, [pc, #332]	@ (801b5d4 <report_realtime_status+0xaac>)
 801b488:	7952      	ldrb	r2, [r2, #5]
 801b48a:	b112      	cbz	r2, 801b492 <report_realtime_status+0x96a>
 801b48c:	4852      	ldr	r0, [pc, #328]	@ (801b5d8 <report_realtime_status+0xab0>)
 801b48e:	4798      	blx	r3
 801b490:	e6fc      	b.n	801b28c <report_realtime_status+0x764>
 801b492:	4852      	ldr	r0, [pc, #328]	@ (801b5dc <report_realtime_status+0xab4>)
 801b494:	e7fb      	b.n	801b48e <report_realtime_status+0x966>
            hal.stream.write_all(appendbuf(2, "|T:", uitoa((uint32_t)gc_state.tool->tool_id)));
 801b496:	4b47      	ldr	r3, [pc, #284]	@ (801b5b4 <report_realtime_status+0xa8c>)
 801b498:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801b49c:	4b4d      	ldr	r3, [pc, #308]	@ (801b5d4 <report_realtime_status+0xaac>)
 801b49e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801b4a2:	6918      	ldr	r0, [r3, #16]
 801b4a4:	f7fa fb6c 	bl	8015b80 <uitoa>
 801b4a8:	4602      	mov	r2, r0
 801b4aa:	494d      	ldr	r1, [pc, #308]	@ (801b5e0 <report_realtime_status+0xab8>)
 801b4ac:	2002      	movs	r0, #2
 801b4ae:	f7fd fc37 	bl	8018d20 <appendbuf>
 801b4b2:	47a8      	blx	r5
 801b4b4:	e6ee      	b.n	801b294 <report_realtime_status+0x76c>
            hal.stream.write_all(appendbuf(2, "|TLR:", uitoa(sys.tlo_reference_set.mask != 0)));
 801b4b6:	4b3f      	ldr	r3, [pc, #252]	@ (801b5b4 <report_realtime_status+0xa8c>)
 801b4b8:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801b4bc:	4b43      	ldr	r3, [pc, #268]	@ (801b5cc <report_realtime_status+0xaa4>)
 801b4be:	79d8      	ldrb	r0, [r3, #7]
 801b4c0:	3800      	subs	r0, #0
 801b4c2:	bf18      	it	ne
 801b4c4:	2001      	movne	r0, #1
 801b4c6:	f7fa fb5b 	bl	8015b80 <uitoa>
 801b4ca:	4602      	mov	r2, r0
 801b4cc:	4945      	ldr	r1, [pc, #276]	@ (801b5e4 <report_realtime_status+0xabc>)
 801b4ce:	2002      	movs	r0, #2
 801b4d0:	f7fd fc26 	bl	8018d20 <appendbuf>
 801b4d4:	47a8      	blx	r5
 801b4d6:	e6e1      	b.n	801b29c <report_realtime_status+0x774>
                hal.stream.write_all(appendbuf(2, "|In:", uitoa(sys.var5399)));
 801b4d8:	4b36      	ldr	r3, [pc, #216]	@ (801b5b4 <report_realtime_status+0xa8c>)
 801b4da:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801b4de:	f7fa fb4f 	bl	8015b80 <uitoa>
 801b4e2:	4602      	mov	r2, r0
 801b4e4:	4940      	ldr	r1, [pc, #256]	@ (801b5e8 <report_realtime_status+0xac0>)
 801b4e6:	2002      	movs	r0, #2
 801b4e8:	f7fd fc1a 	bl	8018d20 <appendbuf>
 801b4ec:	47a8      	blx	r5
 801b4ee:	e6e5      	b.n	801b2bc <report_realtime_status+0x794>
        hal.stream.write_all("|FW:grblHAL");
 801b4f0:	4b30      	ldr	r3, [pc, #192]	@ (801b5b4 <report_realtime_status+0xa8c>)
 801b4f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b4f6:	483d      	ldr	r0, [pc, #244]	@ (801b5ec <report_realtime_status+0xac4>)
 801b4f8:	4798      	blx	r3
        if(sys.blocking_event)
 801b4fa:	4b34      	ldr	r3, [pc, #208]	@ (801b5cc <report_realtime_status+0xaa4>)
 801b4fc:	795b      	ldrb	r3, [r3, #5]
 801b4fe:	b123      	cbz	r3, 801b50a <report_realtime_status+0x9e2>
            hal.stream.write_all("|$C:1");
 801b500:	4b2c      	ldr	r3, [pc, #176]	@ (801b5b4 <report_realtime_status+0xa8c>)
 801b502:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b506:	483a      	ldr	r0, [pc, #232]	@ (801b5f0 <report_realtime_status+0xac8>)
 801b508:	4798      	blx	r3
    hal.stream.write_all(">" ASCII_EOL);
 801b50a:	4b2a      	ldr	r3, [pc, #168]	@ (801b5b4 <report_realtime_status+0xa8c>)
 801b50c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b510:	4838      	ldr	r0, [pc, #224]	@ (801b5f4 <report_realtime_status+0xacc>)
 801b512:	4798      	blx	r3
    system_add_rt_report(Report_ClearAll);
 801b514:	2000      	movs	r0, #0
 801b516:	f006 fdd3 	bl	80220c0 <system_add_rt_report>
    if(settings.status_report.work_coord_offset && wco_counter == 0)
 801b51a:	4b29      	ldr	r3, [pc, #164]	@ (801b5c0 <report_realtime_status+0xa98>)
 801b51c:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801b520:	f013 0f20 	tst.w	r3, #32
 801b524:	d003      	beq.n	801b52e <report_realtime_status+0xa06>
 801b526:	4b34      	ldr	r3, [pc, #208]	@ (801b5f8 <report_realtime_status+0xad0>)
 801b528:	781b      	ldrb	r3, [r3, #0]
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d037      	beq.n	801b59e <report_realtime_status+0xa76>
}
 801b52e:	b00b      	add	sp, #44	@ 0x2c
 801b530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint_fast32_t idx = N_AXIS;
 801b534:	2303      	movs	r3, #3
        idx--;
 801b536:	3b01      	subs	r3, #1
        active = !(gc_state.g92_coord_offset[idx] == 0.0f || gc_state.g92_coord_offset[idx] == -0.0f);
 801b538:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 801b53c:	4a25      	ldr	r2, [pc, #148]	@ (801b5d4 <report_realtime_status+0xaac>)
 801b53e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801b542:	edd2 7a00 	vldr	s15, [r2]
 801b546:	eef5 7a40 	vcmp.f32	s15, #0.0
 801b54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b54e:	bf14      	ite	ne
 801b550:	2201      	movne	r2, #1
 801b552:	2200      	moveq	r2, #0
    } while(idx && !active);
 801b554:	b123      	cbz	r3, 801b560 <report_realtime_status+0xa38>
 801b556:	eef5 7a40 	vcmp.f32	s15, #0.0
 801b55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b55e:	d0ea      	beq.n	801b536 <report_realtime_status+0xa0e>
        } else if ((is_changed = g92_active != is_g92_active()))
 801b560:	4b26      	ldr	r3, [pc, #152]	@ (801b5fc <report_realtime_status+0xad4>)
 801b562:	781b      	ldrb	r3, [r3, #0]
 801b564:	4293      	cmp	r3, r2
 801b566:	bf14      	ite	ne
 801b568:	2501      	movne	r5, #1
 801b56a:	2500      	moveq	r5, #0
 801b56c:	d004      	beq.n	801b578 <report_realtime_status+0xa50>
            g92_active = !g92_active;
 801b56e:	f083 0301 	eor.w	r3, r3, #1
 801b572:	4a22      	ldr	r2, [pc, #136]	@ (801b5fc <report_realtime_status+0xad4>)
 801b574:	7013      	strb	r3, [r2, #0]
 801b576:	e6e0      	b.n	801b33a <report_realtime_status+0x812>
        else if(memcmp(&last_state, &gc_state.modal, sizeof(gc_modal_t))) {
 801b578:	2234      	movs	r2, #52	@ 0x34
 801b57a:	4916      	ldr	r1, [pc, #88]	@ (801b5d4 <report_realtime_status+0xaac>)
 801b57c:	4820      	ldr	r0, [pc, #128]	@ (801b600 <report_realtime_status+0xad8>)
 801b57e:	f009 fca8 	bl	8024ed2 <memcmp>
 801b582:	2800      	cmp	r0, #0
 801b584:	f43f aed9 	beq.w	801b33a <report_realtime_status+0x812>
            last_state = gc_state.modal;
 801b588:	4d1d      	ldr	r5, [pc, #116]	@ (801b600 <report_realtime_status+0xad8>)
 801b58a:	4e12      	ldr	r6, [pc, #72]	@ (801b5d4 <report_realtime_status+0xaac>)
 801b58c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801b58e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b590:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801b592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b594:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801b596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b598:	6833      	ldr	r3, [r6, #0]
 801b59a:	602b      	str	r3, [r5, #0]
        if (is_changed)
 801b59c:	e6ce      	b.n	801b33c <report_realtime_status+0x814>
        system_add_rt_report(Report_WCO); // Set to report on next request
 801b59e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b5a2:	f006 fd8d 	bl	80220c0 <system_add_rt_report>
}
 801b5a6:	e7c2      	b.n	801b52e <report_realtime_status+0xa06>
 801b5a8:	0802c738 	.word	0x0802c738
 801b5ac:	200021c7 	.word	0x200021c7
 801b5b0:	200021c4 	.word	0x200021c4
 801b5b4:	200018dc 	.word	0x200018dc
 801b5b8:	0802c740 	.word	0x0802c740
 801b5bc:	0802c688 	.word	0x0802c688
 801b5c0:	200022f4 	.word	0x200022f4
 801b5c4:	0802c694 	.word	0x0802c694
 801b5c8:	0802a218 	.word	0x0802a218
 801b5cc:	20001bbc 	.word	0x20001bbc
 801b5d0:	0802c560 	.word	0x0802c560
 801b5d4:	20001614 	.word	0x20001614
 801b5d8:	0802c69c 	.word	0x0802c69c
 801b5dc:	0802c6a4 	.word	0x0802c6a4
 801b5e0:	0802c74c 	.word	0x0802c74c
 801b5e4:	0802c750 	.word	0x0802c750
 801b5e8:	0802c758 	.word	0x0802c758
 801b5ec:	0802c768 	.word	0x0802c768
 801b5f0:	0802c774 	.word	0x0802c774
 801b5f4:	0802c77c 	.word	0x0802c77c
 801b5f8:	200021b5 	.word	0x200021b5
 801b5fc:	200021a4 	.word	0x200021a4
 801b600:	20002170 	.word	0x20002170

0801b604 <report_settings_details>:
{
 801b604:	b538      	push	{r3, r4, r5, lr}
 801b606:	4605      	mov	r5, r0
    if(id != Setting_SettingsAll) {
 801b608:	f240 23e5 	movw	r3, #741	@ 0x2e5
 801b60c:	4299      	cmp	r1, r3
 801b60e:	d00f      	beq.n	801b630 <report_settings_details+0x2c>
 801b610:	460c      	mov	r4, r1
        const setting_detail_t *setting = setting_get_details(id, NULL);
 801b612:	2100      	movs	r1, #0
 801b614:	4620      	mov	r0, r4
 801b616:	f002 fa35 	bl	801da84 <setting_get_details>
        if(setting)
 801b61a:	4601      	mov	r1, r0
 801b61c:	b130      	cbz	r0, 801b62c <report_settings_details+0x28>
            report_settings_detail(format, setting, id - setting->id);
 801b61e:	8802      	ldrh	r2, [r0, #0]
 801b620:	1aa2      	subs	r2, r4, r2
 801b622:	4628      	mov	r0, r5
 801b624:	f7fd fc6e 	bl	8018f04 <report_settings_detail>
        status_code_t status = Status_OK;
 801b628:	2000      	movs	r0, #0
 801b62a:	e004      	b.n	801b636 <report_settings_details+0x32>
            status = Status_SettingDisabled;
 801b62c:	2035      	movs	r0, #53	@ 0x35
        return status;
 801b62e:	e002      	b.n	801b636 <report_settings_details+0x32>
    return print_settings_details(format, group);
 801b630:	4611      	mov	r1, r2
 801b632:	f7fd ffdd 	bl	80195f0 <print_settings_details>
}
 801b636:	bd38      	pop	{r3, r4, r5, pc}

0801b638 <report_group_settings>:
{
 801b638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b63c:	b089      	sub	sp, #36	@ 0x24
 801b63e:	4680      	mov	r8, r0
 801b640:	460e      	mov	r6, r1
 801b642:	4617      	mov	r7, r2
    for(idx = 0; idx < n_groups; idx++) {
 801b644:	2400      	movs	r4, #0
    bool found = false;
 801b646:	46a1      	mov	r9, r4
    for(idx = 0; idx < n_groups; idx++) {
 801b648:	e017      	b.n	801b67a <report_group_settings+0x42>
            *s++ = CAPS(c);
 801b64a:	f803 2b01 	strb.w	r2, [r3], #1
        while((c = *s))
 801b64e:	781a      	ldrb	r2, [r3, #0]
 801b650:	b13a      	cbz	r2, 801b662 <report_group_settings+0x2a>
            *s++ = CAPS(c);
 801b652:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 801b656:	b2c9      	uxtb	r1, r1
 801b658:	2919      	cmp	r1, #25
 801b65a:	d8f6      	bhi.n	801b64a <report_group_settings+0x12>
 801b65c:	f002 025f 	and.w	r2, r2, #95	@ 0x5f
 801b660:	e7f3      	b.n	801b64a <report_group_settings+0x12>
        if((found = matchhere(args, group))) {
 801b662:	a901      	add	r1, sp, #4
 801b664:	4638      	mov	r0, r7
 801b666:	f7fc ff4e 	bl	8018506 <matchhere>
 801b66a:	2800      	cmp	r0, #0
 801b66c:	bf14      	ite	ne
 801b66e:	f04f 0901 	movne.w	r9, #1
 801b672:	f04f 0900 	moveq.w	r9, #0
 801b676:	d10d      	bne.n	801b694 <report_group_settings+0x5c>
    for(idx = 0; idx < n_groups; idx++) {
 801b678:	3401      	adds	r4, #1
 801b67a:	42b4      	cmp	r4, r6
 801b67c:	d21d      	bcs.n	801b6ba <report_group_settings+0x82>
        strncpy(group, groups[idx].name, sizeof(group) - 1);
 801b67e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801b682:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801b686:	2219      	movs	r2, #25
 801b688:	6869      	ldr	r1, [r5, #4]
 801b68a:	a801      	add	r0, sp, #4
 801b68c:	f009 fc81 	bl	8024f92 <strncpy>
        s = group;
 801b690:	ab01      	add	r3, sp, #4
        while((c = *s))
 801b692:	e7dc      	b.n	801b64e <report_group_settings+0x16>
            hal.stream.write(ASCII_EOL "---- ");
 801b694:	4c0b      	ldr	r4, [pc, #44]	@ (801b6c4 <report_group_settings+0x8c>)
 801b696:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b69a:	480b      	ldr	r0, [pc, #44]	@ (801b6c8 <report_group_settings+0x90>)
 801b69c:	4798      	blx	r3
            hal.stream.write(groups[idx].name);
 801b69e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b6a2:	6868      	ldr	r0, [r5, #4]
 801b6a4:	4798      	blx	r3
            hal.stream.write(":" ASCII_EOL);
 801b6a6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b6aa:	4808      	ldr	r0, [pc, #32]	@ (801b6cc <report_group_settings+0x94>)
 801b6ac:	4798      	blx	r3
            report_settings_details(SettingsFormat_HumanReadable, Setting_SettingsAll, groups[idx].id);
 801b6ae:	786a      	ldrb	r2, [r5, #1]
 801b6b0:	f240 21e5 	movw	r1, #741	@ 0x2e5
 801b6b4:	2001      	movs	r0, #1
 801b6b6:	f7ff ffa5 	bl	801b604 <report_settings_details>
}
 801b6ba:	4648      	mov	r0, r9
 801b6bc:	b009      	add	sp, #36	@ 0x24
 801b6be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b6c2:	bf00      	nop
 801b6c4:	200018dc 	.word	0x200018dc
 801b6c8:	0802c780 	.word	0x0802c780
 801b6cc:	0802c788 	.word	0x0802c788

0801b6d0 <report_setting_description>:
{
 801b6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b6d4:	4606      	mov	r6, r0
 801b6d6:	460c      	mov	r4, r1
    const setting_detail_t *setting = setting_get_details(id, NULL);
 801b6d8:	2100      	movs	r1, #0
 801b6da:	4620      	mov	r0, r4
 801b6dc:	f002 f9d2 	bl	801da84 <setting_get_details>
 801b6e0:	4607      	mov	r7, r0
    const char *description = setting_get_description(id);
 801b6e2:	4620      	mov	r0, r4
 801b6e4:	f002 fa64 	bl	801dbb0 <setting_get_description>
 801b6e8:	4680      	mov	r8, r0
    if(format == SettingsFormat_MachineReadable) {
 801b6ea:	b976      	cbnz	r6, 801b70a <report_setting_description+0x3a>
        hal.stream.write("[SETTINGDESCR:");
 801b6ec:	4d1c      	ldr	r5, [pc, #112]	@ (801b760 <report_setting_description+0x90>)
 801b6ee:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801b6f2:	481c      	ldr	r0, [pc, #112]	@ (801b764 <report_setting_description+0x94>)
 801b6f4:	4798      	blx	r3
        hal.stream.write(uitoa(id));
 801b6f6:	f8d5 90b4 	ldr.w	r9, [r5, #180]	@ 0xb4
 801b6fa:	4620      	mov	r0, r4
 801b6fc:	f7fa fa40 	bl	8015b80 <uitoa>
 801b700:	47c8      	blx	r9
        hal.stream.write(vbar);
 801b702:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801b706:	4818      	ldr	r0, [pc, #96]	@ (801b768 <report_setting_description+0x98>)
 801b708:	4798      	blx	r3
    hal.stream.write(description ? description : (setting ? "" : "N/A"));
 801b70a:	4b15      	ldr	r3, [pc, #84]	@ (801b760 <report_setting_description+0x90>)
 801b70c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b710:	f1b8 0f00 	cmp.w	r8, #0
 801b714:	d01b      	beq.n	801b74e <report_setting_description+0x7e>
 801b716:	4640      	mov	r0, r8
 801b718:	4798      	blx	r3
    if(setting && setting->flags.reboot_required)
 801b71a:	b17f      	cbz	r7, 801b73c <report_setting_description+0x6c>
 801b71c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801b720:	f013 0f01 	tst.w	r3, #1
 801b724:	d00a      	beq.n	801b73c <report_setting_description+0x6c>
        hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + (description && *description != '\0' ? 0 : 4));
 801b726:	4b0e      	ldr	r3, [pc, #56]	@ (801b760 <report_setting_description+0x90>)
 801b728:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b72c:	f1b8 0f00 	cmp.w	r8, #0
 801b730:	d012      	beq.n	801b758 <report_setting_description+0x88>
 801b732:	f898 2000 	ldrb.w	r2, [r8]
 801b736:	b98a      	cbnz	r2, 801b75c <report_setting_description+0x8c>
 801b738:	480c      	ldr	r0, [pc, #48]	@ (801b76c <report_setting_description+0x9c>)
 801b73a:	4798      	blx	r3
    if(format == SettingsFormat_MachineReadable)
 801b73c:	b926      	cbnz	r6, 801b748 <report_setting_description+0x78>
        hal.stream.write("]" ASCII_EOL);
 801b73e:	4b08      	ldr	r3, [pc, #32]	@ (801b760 <report_setting_description+0x90>)
 801b740:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b744:	480a      	ldr	r0, [pc, #40]	@ (801b770 <report_setting_description+0xa0>)
 801b746:	4798      	blx	r3
}
 801b748:	2000      	movs	r0, #0
 801b74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hal.stream.write(description ? description : (setting ? "" : "N/A"));
 801b74e:	b10f      	cbz	r7, 801b754 <report_setting_description+0x84>
 801b750:	4808      	ldr	r0, [pc, #32]	@ (801b774 <report_setting_description+0xa4>)
 801b752:	e7e1      	b.n	801b718 <report_setting_description+0x48>
 801b754:	4808      	ldr	r0, [pc, #32]	@ (801b778 <report_setting_description+0xa8>)
 801b756:	e7df      	b.n	801b718 <report_setting_description+0x48>
        hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + (description && *description != '\0' ? 0 : 4));
 801b758:	4804      	ldr	r0, [pc, #16]	@ (801b76c <report_setting_description+0x9c>)
 801b75a:	e7ee      	b.n	801b73a <report_setting_description+0x6a>
 801b75c:	4807      	ldr	r0, [pc, #28]	@ (801b77c <report_setting_description+0xac>)
 801b75e:	e7ec      	b.n	801b73a <report_setting_description+0x6a>
 801b760:	200018dc 	.word	0x200018dc
 801b764:	0802c78c 	.word	0x0802c78c
 801b768:	0802c95c 	.word	0x0802c95c
 801b76c:	0802c1ac 	.word	0x0802c1ac
 801b770:	0802c134 	.word	0x0802c134
 801b774:	0802c29c 	.word	0x0802c29c
 801b778:	08029db8 	.word	0x08029db8
 801b77c:	0802c1a8 	.word	0x0802c1a8

0801b780 <report_alarm_details>:
{
 801b780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b782:	4606      	mov	r6, r0
    alarm_details_t *details = grbl.on_get_alarms();
 801b784:	4b25      	ldr	r3, [pc, #148]	@ (801b81c <report_alarm_details+0x9c>)
 801b786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b788:	4798      	blx	r3
 801b78a:	4604      	mov	r4, r0
    if(grbl_format)
 801b78c:	b126      	cbz	r6, 801b798 <report_alarm_details+0x18>
        hal.stream.write("\"Alarm Code in v1.1+\",\" Alarm Message in v1.0-\",\" Alarm Description\"" ASCII_EOL);
 801b78e:	4b24      	ldr	r3, [pc, #144]	@ (801b820 <report_alarm_details+0xa0>)
 801b790:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b794:	4823      	ldr	r0, [pc, #140]	@ (801b824 <report_alarm_details+0xa4>)
 801b796:	4798      	blx	r3
{
 801b798:	2500      	movs	r5, #0
        n_alarms += details->n_alarms;
 801b79a:	8823      	ldrh	r3, [r4, #0]
 801b79c:	441d      	add	r5, r3
    } while((details = details->next));
 801b79e:	68a4      	ldr	r4, [r4, #8]
 801b7a0:	2c00      	cmp	r4, #0
 801b7a2:	d1fa      	bne.n	801b79a <report_alarm_details+0x1a>
    details = grbl.on_get_alarms();
 801b7a4:	4b1d      	ldr	r3, [pc, #116]	@ (801b81c <report_alarm_details+0x9c>)
 801b7a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b7a8:	4798      	blx	r3
 801b7aa:	4604      	mov	r4, r0
    if((all_alarms = palarm = calloc(n_alarms, sizeof(alarm_detail_t *)))) {
 801b7ac:	2104      	movs	r1, #4
 801b7ae:	4628      	mov	r0, r5
 801b7b0:	f007 fad6 	bl	8022d60 <calloc>
 801b7b4:	4607      	mov	r7, r0
 801b7b6:	b328      	cbz	r0, 801b804 <report_alarm_details+0x84>
 801b7b8:	4603      	mov	r3, r0
 801b7ba:	e00a      	b.n	801b7d2 <report_alarm_details+0x52>
                *palarm++ = (alarm_detail_t *)&(details->alarms[idx]);
 801b7bc:	6861      	ldr	r1, [r4, #4]
 801b7be:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801b7c2:	f843 1b04 	str.w	r1, [r3], #4
            for(idx = 0; idx < details->n_alarms; idx++)
 801b7c6:	3201      	adds	r2, #1
 801b7c8:	8821      	ldrh	r1, [r4, #0]
 801b7ca:	4291      	cmp	r1, r2
 801b7cc:	d8f6      	bhi.n	801b7bc <report_alarm_details+0x3c>
        } while((details = details->next));
 801b7ce:	68a4      	ldr	r4, [r4, #8]
 801b7d0:	b10c      	cbz	r4, 801b7d6 <report_alarm_details+0x56>
            for(idx = 0; idx < details->n_alarms; idx++)
 801b7d2:	2200      	movs	r2, #0
 801b7d4:	e7f8      	b.n	801b7c8 <report_alarm_details+0x48>
        qsort(all_alarms, n_alarms, sizeof(alarm_detail_t *), cmp_alarms);
 801b7d6:	4b14      	ldr	r3, [pc, #80]	@ (801b828 <report_alarm_details+0xa8>)
 801b7d8:	2204      	movs	r2, #4
 801b7da:	4629      	mov	r1, r5
 801b7dc:	4638      	mov	r0, r7
 801b7de:	f008 fa8e 	bl	8023cfe <qsort>
        for(idx = 0; idx < n_alarms; idx++)
 801b7e2:	e005      	b.n	801b7f0 <report_alarm_details+0x70>
            print_alarm(all_alarms[idx], grbl_format);
 801b7e4:	4631      	mov	r1, r6
 801b7e6:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 801b7ea:	f7fd f813 	bl	8018814 <print_alarm>
        for(idx = 0; idx < n_alarms; idx++)
 801b7ee:	3401      	adds	r4, #1
 801b7f0:	42ac      	cmp	r4, r5
 801b7f2:	d3f7      	bcc.n	801b7e4 <report_alarm_details+0x64>
        free(all_alarms);
 801b7f4:	4638      	mov	r0, r7
 801b7f6:	f007 fad7 	bl	8022da8 <free>
}
 801b7fa:	2000      	movs	r0, #0
 801b7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while((details = details->next));
 801b7fe:	68a4      	ldr	r4, [r4, #8]
 801b800:	2c00      	cmp	r4, #0
 801b802:	d0fa      	beq.n	801b7fa <report_alarm_details+0x7a>
        for(idx = 0; idx < details->n_alarms; idx++)
 801b804:	2500      	movs	r5, #0
 801b806:	8823      	ldrh	r3, [r4, #0]
 801b808:	42ab      	cmp	r3, r5
 801b80a:	d9f8      	bls.n	801b7fe <report_alarm_details+0x7e>
            print_alarm(&details->alarms[idx], grbl_format);
 801b80c:	6860      	ldr	r0, [r4, #4]
 801b80e:	4631      	mov	r1, r6
 801b810:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 801b814:	f7fc fffe 	bl	8018814 <print_alarm>
        for(idx = 0; idx < details->n_alarms; idx++)
 801b818:	3501      	adds	r5, #1
 801b81a:	e7f4      	b.n	801b806 <report_alarm_details+0x86>
 801b81c:	20001ac4 	.word	0x20001ac4
 801b820:	200018dc 	.word	0x200018dc
 801b824:	0802c79c 	.word	0x0802c79c
 801b828:	08018681 	.word	0x08018681

0801b82c <report_error_details>:
{
 801b82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b82e:	4606      	mov	r6, r0
    error_details_t *details = grbl.on_get_errors();
 801b830:	4b25      	ldr	r3, [pc, #148]	@ (801b8c8 <report_error_details+0x9c>)
 801b832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b834:	4798      	blx	r3
 801b836:	4604      	mov	r4, r0
    if(grbl_format)
 801b838:	b126      	cbz	r6, 801b844 <report_error_details+0x18>
        hal.stream.write("\"Error Code in v1.1+\",\"Error Message in v1.0-\",\"Error Description\"" ASCII_EOL);
 801b83a:	4b24      	ldr	r3, [pc, #144]	@ (801b8cc <report_error_details+0xa0>)
 801b83c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b840:	4823      	ldr	r0, [pc, #140]	@ (801b8d0 <report_error_details+0xa4>)
 801b842:	4798      	blx	r3
{
 801b844:	2500      	movs	r5, #0
        n_errors += details->n_errors;
 801b846:	8823      	ldrh	r3, [r4, #0]
 801b848:	441d      	add	r5, r3
    } while((details = details->next));
 801b84a:	68a4      	ldr	r4, [r4, #8]
 801b84c:	2c00      	cmp	r4, #0
 801b84e:	d1fa      	bne.n	801b846 <report_error_details+0x1a>
    details = grbl.on_get_errors();
 801b850:	4b1d      	ldr	r3, [pc, #116]	@ (801b8c8 <report_error_details+0x9c>)
 801b852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b854:	4798      	blx	r3
 801b856:	4604      	mov	r4, r0
    if((all_errors = perror = calloc(n_errors, sizeof(status_detail_t *)))) {
 801b858:	2104      	movs	r1, #4
 801b85a:	4628      	mov	r0, r5
 801b85c:	f007 fa80 	bl	8022d60 <calloc>
 801b860:	4607      	mov	r7, r0
 801b862:	b328      	cbz	r0, 801b8b0 <report_error_details+0x84>
 801b864:	4603      	mov	r3, r0
 801b866:	e00a      	b.n	801b87e <report_error_details+0x52>
                *perror++ = (status_detail_t *)&(details->errors[idx]);
 801b868:	6861      	ldr	r1, [r4, #4]
 801b86a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801b86e:	f843 1b04 	str.w	r1, [r3], #4
            for(idx = 0; idx < details->n_errors; idx++)
 801b872:	3201      	adds	r2, #1
 801b874:	8821      	ldrh	r1, [r4, #0]
 801b876:	4291      	cmp	r1, r2
 801b878:	d8f6      	bhi.n	801b868 <report_error_details+0x3c>
        } while((details = details->next));
 801b87a:	68a4      	ldr	r4, [r4, #8]
 801b87c:	b10c      	cbz	r4, 801b882 <report_error_details+0x56>
            for(idx = 0; idx < details->n_errors; idx++)
 801b87e:	2200      	movs	r2, #0
 801b880:	e7f8      	b.n	801b874 <report_error_details+0x48>
        qsort(all_errors, n_errors, sizeof(status_detail_t *), cmp_errors);
 801b882:	4b14      	ldr	r3, [pc, #80]	@ (801b8d4 <report_error_details+0xa8>)
 801b884:	2204      	movs	r2, #4
 801b886:	4629      	mov	r1, r5
 801b888:	4638      	mov	r0, r7
 801b88a:	f008 fa38 	bl	8023cfe <qsort>
        for(idx = 0; idx < n_errors; idx++)
 801b88e:	e005      	b.n	801b89c <report_error_details+0x70>
            print_error(all_errors[idx], grbl_format);
 801b890:	4631      	mov	r1, r6
 801b892:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 801b896:	f7fd f807 	bl	80188a8 <print_error>
        for(idx = 0; idx < n_errors; idx++)
 801b89a:	3401      	adds	r4, #1
 801b89c:	42ac      	cmp	r4, r5
 801b89e:	d3f7      	bcc.n	801b890 <report_error_details+0x64>
        free(all_errors);
 801b8a0:	4638      	mov	r0, r7
 801b8a2:	f007 fa81 	bl	8022da8 <free>
}
 801b8a6:	2000      	movs	r0, #0
 801b8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while((details = details->next));
 801b8aa:	68a4      	ldr	r4, [r4, #8]
 801b8ac:	2c00      	cmp	r4, #0
 801b8ae:	d0fa      	beq.n	801b8a6 <report_error_details+0x7a>
        for(idx = 0; idx < details->n_errors; idx++)
 801b8b0:	2500      	movs	r5, #0
 801b8b2:	8823      	ldrh	r3, [r4, #0]
 801b8b4:	42ab      	cmp	r3, r5
 801b8b6:	d9f8      	bls.n	801b8aa <report_error_details+0x7e>
            print_error(&details->errors[idx], grbl_format);
 801b8b8:	6860      	ldr	r0, [r4, #4]
 801b8ba:	4631      	mov	r1, r6
 801b8bc:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 801b8c0:	f7fc fff2 	bl	80188a8 <print_error>
        for(idx = 0; idx < details->n_errors; idx++)
 801b8c4:	3501      	adds	r5, #1
 801b8c6:	e7f4      	b.n	801b8b2 <report_error_details+0x86>
 801b8c8:	20001ac4 	.word	0x20001ac4
 801b8cc:	200018dc 	.word	0x200018dc
 801b8d0:	0802c7e4 	.word	0x0802c7e4
 801b8d4:	0801868d 	.word	0x0801868d

0801b8d8 <report_setting_group_details>:
{
 801b8d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8dc:	4683      	mov	fp, r0
 801b8de:	468a      	mov	sl, r1
    setting_details_t *details = settings_get_details();
 801b8e0:	f001 fc7c 	bl	801d1dc <settings_get_details>
    uint_fast16_t idx, n_groups = 0;
 801b8e4:	f04f 0800 	mov.w	r8, #0
        n_groups += details->n_groups;
 801b8e8:	7803      	ldrb	r3, [r0, #0]
 801b8ea:	4498      	add	r8, r3
    } while((details = details->next));
 801b8ec:	6980      	ldr	r0, [r0, #24]
 801b8ee:	2800      	cmp	r0, #0
 801b8f0:	d1fa      	bne.n	801b8e8 <report_setting_group_details+0x10>
    details = settings_get_details();
 801b8f2:	f001 fc73 	bl	801d1dc <settings_get_details>
 801b8f6:	4607      	mov	r7, r0
    if((all_groups = group = calloc(n_groups, sizeof(setting_group_detail_t *)))) {
 801b8f8:	2104      	movs	r1, #4
 801b8fa:	4640      	mov	r0, r8
 801b8fc:	f007 fa30 	bl	8022d60 <calloc>
 801b900:	4681      	mov	r9, r0
 801b902:	2800      	cmp	r0, #0
 801b904:	d037      	beq.n	801b976 <report_setting_group_details+0x9e>
 801b906:	4606      	mov	r6, r0
 801b908:	e015      	b.n	801b936 <report_setting_group_details+0x5e>
                    *group++ = (setting_group_detail_t *)&details->groups[idx];
 801b90a:	f846 5b04 	str.w	r5, [r6], #4
            for(idx = 0; idx < details->n_groups; idx++) {
 801b90e:	3401      	adds	r4, #1
 801b910:	783b      	ldrb	r3, [r7, #0]
 801b912:	42a3      	cmp	r3, r4
 801b914:	d90d      	bls.n	801b932 <report_setting_group_details+0x5a>
                if(group_is_dup(all_groups, details->groups[idx].id))
 801b916:	687d      	ldr	r5, [r7, #4]
 801b918:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801b91c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801b920:	7869      	ldrb	r1, [r5, #1]
 801b922:	4648      	mov	r0, r9
 801b924:	f7fc febe 	bl	80186a4 <group_is_dup>
 801b928:	2800      	cmp	r0, #0
 801b92a:	d0ee      	beq.n	801b90a <report_setting_group_details+0x32>
                    n_groups--;
 801b92c:	f108 38ff 	add.w	r8, r8, #4294967295
 801b930:	e7ed      	b.n	801b90e <report_setting_group_details+0x36>
        } while((details = details->next));
 801b932:	69bf      	ldr	r7, [r7, #24]
 801b934:	b10f      	cbz	r7, 801b93a <report_setting_group_details+0x62>
            for(idx = 0; idx < details->n_groups; idx++) {
 801b936:	2400      	movs	r4, #0
 801b938:	e7ea      	b.n	801b910 <report_setting_group_details+0x38>
        qsort(all_groups, n_groups, sizeof(setting_group_detail_t *), by_id ? cmp_setting_group_id : cmp_setting_group_name);
 801b93a:	f1bb 0f00 	cmp.w	fp, #0
 801b93e:	d007      	beq.n	801b950 <report_setting_group_details+0x78>
 801b940:	4b14      	ldr	r3, [pc, #80]	@ (801b994 <report_setting_group_details+0xbc>)
 801b942:	2204      	movs	r2, #4
 801b944:	4641      	mov	r1, r8
 801b946:	4648      	mov	r0, r9
 801b948:	f008 f9d9 	bl	8023cfe <qsort>
        for(idx = 0; idx < n_groups; idx++)
 801b94c:	2400      	movs	r4, #0
 801b94e:	e007      	b.n	801b960 <report_setting_group_details+0x88>
        qsort(all_groups, n_groups, sizeof(setting_group_detail_t *), by_id ? cmp_setting_group_id : cmp_setting_group_name);
 801b950:	4b11      	ldr	r3, [pc, #68]	@ (801b998 <report_setting_group_details+0xc0>)
 801b952:	e7f6      	b.n	801b942 <report_setting_group_details+0x6a>
            print_setting_group(all_groups[idx], prefix);
 801b954:	4651      	mov	r1, sl
 801b956:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
 801b95a:	f7fd feed 	bl	8019738 <print_setting_group>
        for(idx = 0; idx < n_groups; idx++)
 801b95e:	3401      	adds	r4, #1
 801b960:	45a0      	cmp	r8, r4
 801b962:	d8f7      	bhi.n	801b954 <report_setting_group_details+0x7c>
        free(all_groups);
 801b964:	4648      	mov	r0, r9
 801b966:	f007 fa1f 	bl	8022da8 <free>
}
 801b96a:	2000      	movs	r0, #0
 801b96c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } while((details = details->next));
 801b970:	69bf      	ldr	r7, [r7, #24]
 801b972:	2f00      	cmp	r7, #0
 801b974:	d0f9      	beq.n	801b96a <report_setting_group_details+0x92>
        for(idx = 0; idx < details->n_groups; idx++)
 801b976:	2400      	movs	r4, #0
 801b978:	783b      	ldrb	r3, [r7, #0]
 801b97a:	42a3      	cmp	r3, r4
 801b97c:	d9f8      	bls.n	801b970 <report_setting_group_details+0x98>
            print_setting_group(&details->groups[idx], prefix);
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 801b984:	4651      	mov	r1, sl
 801b986:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b98a:	f7fd fed5 	bl	8019738 <print_setting_group>
        for(idx = 0; idx < details->n_groups; idx++)
 801b98e:	3401      	adds	r4, #1
 801b990:	e7f2      	b.n	801b978 <report_setting_group_details+0xa0>
 801b992:	bf00      	nop
 801b994:	08018699 	.word	0x08018699
 801b998:	08018ea9 	.word	0x08018ea9

0801b99c <report_help>:
{
 801b99c:	b538      	push	{r3, r4, r5, lr}
 801b99e:	4604      	mov	r4, r0
    while(*args == ' ')
 801b9a0:	e000      	b.n	801b9a4 <report_help+0x8>
        args++;
 801b9a2:	3401      	adds	r4, #1
    while(*args == ' ')
 801b9a4:	7823      	ldrb	r3, [r4, #0]
 801b9a6:	2b20      	cmp	r3, #32
 801b9a8:	d0fb      	beq.n	801b9a2 <report_help+0x6>
    if(*args == '\0') {
 801b9aa:	b9f3      	cbnz	r3, 801b9ea <report_help+0x4e>
        hal.stream.write("Help topics:" ASCII_EOL);
 801b9ac:	4c2d      	ldr	r4, [pc, #180]	@ (801ba64 <report_help+0xc8>)
 801b9ae:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b9b2:	482d      	ldr	r0, [pc, #180]	@ (801ba68 <report_help+0xcc>)
 801b9b4:	4798      	blx	r3
        hal.stream.write(" Commands" ASCII_EOL);
 801b9b6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b9ba:	482c      	ldr	r0, [pc, #176]	@ (801ba6c <report_help+0xd0>)
 801b9bc:	4798      	blx	r3
        hal.stream.write(" Settings" ASCII_EOL);
 801b9be:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b9c2:	482b      	ldr	r0, [pc, #172]	@ (801ba70 <report_help+0xd4>)
 801b9c4:	4798      	blx	r3
        report_setting_group_details(false, " ");
 801b9c6:	492b      	ldr	r1, [pc, #172]	@ (801ba74 <report_help+0xd8>)
 801b9c8:	2000      	movs	r0, #0
 801b9ca:	f7ff ff85 	bl	801b8d8 <report_setting_group_details>
}
 801b9ce:	2000      	movs	r0, #0
 801b9d0:	bd38      	pop	{r3, r4, r5, pc}
            *s++ = CAPS(c);
 801b9d2:	f803 2b01 	strb.w	r2, [r3], #1
        while((c = *s))
 801b9d6:	781a      	ldrb	r2, [r3, #0]
 801b9d8:	b14a      	cbz	r2, 801b9ee <report_help+0x52>
            *s++ = CAPS(c);
 801b9da:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 801b9de:	b2c9      	uxtb	r1, r1
 801b9e0:	2919      	cmp	r1, #25
 801b9e2:	d8f6      	bhi.n	801b9d2 <report_help+0x36>
 801b9e4:	f002 025f 	and.w	r2, r2, #95	@ 0x5f
 801b9e8:	e7f3      	b.n	801b9d2 <report_help+0x36>
        char c, *s = args;
 801b9ea:	4623      	mov	r3, r4
 801b9ec:	e7f3      	b.n	801b9d6 <report_help+0x3a>
        if(matchhere(args, "COMMANDS")) {
 801b9ee:	4922      	ldr	r1, [pc, #136]	@ (801ba78 <report_help+0xdc>)
 801b9f0:	4620      	mov	r0, r4
 801b9f2:	f7fc fd88 	bl	8018506 <matchhere>
 801b9f6:	b128      	cbz	r0, 801ba04 <report_help+0x68>
            if(grbl.on_report_command_help)
 801b9f8:	4b20      	ldr	r3, [pc, #128]	@ (801ba7c <report_help+0xe0>)
 801b9fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	d0e6      	beq.n	801b9ce <report_help+0x32>
                grbl.on_report_command_help();
 801ba00:	4798      	blx	r3
 801ba02:	e7e4      	b.n	801b9ce <report_help+0x32>
        } else if(matchhere(args, "SETTINGS"))
 801ba04:	491e      	ldr	r1, [pc, #120]	@ (801ba80 <report_help+0xe4>)
 801ba06:	4620      	mov	r0, r4
 801ba08:	f7fc fd7d 	bl	8018506 <matchhere>
 801ba0c:	b130      	cbz	r0, 801ba1c <report_help+0x80>
            report_settings_details(SettingsFormat_HumanReadable, Setting_SettingsAll, Group_All);
 801ba0e:	2200      	movs	r2, #0
 801ba10:	f240 21e5 	movw	r1, #741	@ 0x2e5
 801ba14:	2001      	movs	r0, #1
 801ba16:	f7ff fdf5 	bl	801b604 <report_settings_details>
 801ba1a:	e7d8      	b.n	801b9ce <report_help+0x32>
            setting_details_t *settings_info = settings_get_details();
 801ba1c:	f001 fbde 	bl	801d1dc <settings_get_details>
 801ba20:	4605      	mov	r5, r0
            found = report_group_settings(settings_info->groups, settings_info->n_groups, args);
 801ba22:	4622      	mov	r2, r4
 801ba24:	7801      	ldrb	r1, [r0, #0]
 801ba26:	6840      	ldr	r0, [r0, #4]
 801ba28:	f7ff fe06 	bl	801b638 <report_group_settings>
            if(!found && (settings_info = settings_info->next)) do {
 801ba2c:	4603      	mov	r3, r0
 801ba2e:	2800      	cmp	r0, #0
 801ba30:	d1cd      	bne.n	801b9ce <report_help+0x32>
 801ba32:	69ad      	ldr	r5, [r5, #24]
 801ba34:	b955      	cbnz	r5, 801ba4c <report_help+0xb0>
            if(!found)
 801ba36:	2b00      	cmp	r3, #0
 801ba38:	d1c9      	bne.n	801b9ce <report_help+0x32>
                hal.stream.write( ASCII_EOL "N/A" ASCII_EOL);
 801ba3a:	4b0a      	ldr	r3, [pc, #40]	@ (801ba64 <report_help+0xc8>)
 801ba3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ba40:	4810      	ldr	r0, [pc, #64]	@ (801ba84 <report_help+0xe8>)
 801ba42:	4798      	blx	r3
 801ba44:	e7c3      	b.n	801b9ce <report_help+0x32>
            } while((settings_info = settings_info->next));
 801ba46:	69ad      	ldr	r5, [r5, #24]
 801ba48:	2d00      	cmp	r5, #0
 801ba4a:	d0f4      	beq.n	801ba36 <report_help+0x9a>
                if(settings_info->groups && (found = report_group_settings(settings_info->groups, settings_info->n_groups, args)))
 801ba4c:	6868      	ldr	r0, [r5, #4]
 801ba4e:	2800      	cmp	r0, #0
 801ba50:	d0f9      	beq.n	801ba46 <report_help+0xaa>
 801ba52:	4622      	mov	r2, r4
 801ba54:	7829      	ldrb	r1, [r5, #0]
 801ba56:	f7ff fdef 	bl	801b638 <report_group_settings>
 801ba5a:	4603      	mov	r3, r0
 801ba5c:	2800      	cmp	r0, #0
 801ba5e:	d0f2      	beq.n	801ba46 <report_help+0xaa>
 801ba60:	e7e9      	b.n	801ba36 <report_help+0x9a>
 801ba62:	bf00      	nop
 801ba64:	200018dc 	.word	0x200018dc
 801ba68:	0802c82c 	.word	0x0802c82c
 801ba6c:	0802c83c 	.word	0x0802c83c
 801ba70:	0802c848 	.word	0x0802c848
 801ba74:	0802c280 	.word	0x0802c280
 801ba78:	0802c854 	.word	0x0802c854
 801ba7c:	20001ac4 	.word	0x20001ac4
 801ba80:	0802c860 	.word	0x0802c860
 801ba84:	0802c86c 	.word	0x0802c86c

0801ba88 <report_last_signals_event>:
{
 801ba88:	b538      	push	{r3, r4, r5, lr}
    strcpy(buf, "[LASTEVENTS:");
 801ba8a:	4d10      	ldr	r5, [pc, #64]	@ (801bacc <report_last_signals_event+0x44>)
 801ba8c:	4b10      	ldr	r3, [pc, #64]	@ (801bad0 <report_last_signals_event+0x48>)
 801ba8e:	46ac      	mov	ip, r5
 801ba90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ba92:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 801ba96:	f88c 3000 	strb.w	r3, [ip]
    append = control_signals_tostring(append, sys.last_event.control);
 801ba9a:	4c0e      	ldr	r4, [pc, #56]	@ (801bad4 <report_last_signals_event+0x4c>)
 801ba9c:	f8b4 1080 	ldrh.w	r1, [r4, #128]	@ 0x80
 801baa0:	4660      	mov	r0, ip
 801baa2:	f7fc fd6f 	bl	8018584 <control_signals_tostring>
    *append++ = ',';
 801baa6:	232c      	movs	r3, #44	@ 0x2c
 801baa8:	f800 3b01 	strb.w	r3, [r0], #1
    append = add_limits(append, sys.last_event.limits);
 801baac:	f8d4 1082 	ldr.w	r1, [r4, #130]	@ 0x82
 801bab0:	f7fc fe03 	bl	80186ba <add_limits>
    hal.stream.write(buf);
 801bab4:	4c08      	ldr	r4, [pc, #32]	@ (801bad8 <report_last_signals_event+0x50>)
 801bab6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801baba:	4628      	mov	r0, r5
 801babc:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 801babe:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801bac2:	4806      	ldr	r0, [pc, #24]	@ (801badc <report_last_signals_event+0x54>)
 801bac4:	4798      	blx	r3
}
 801bac6:	2000      	movs	r0, #0
 801bac8:	bd38      	pop	{r3, r4, r5, pc}
 801baca:	bf00      	nop
 801bacc:	200021c4 	.word	0x200021c4
 801bad0:	0802c874 	.word	0x0802c874
 801bad4:	20001bbc 	.word	0x20001bbc
 801bad8:	200018dc 	.word	0x200018dc
 801badc:	0802c134 	.word	0x0802c134

0801bae0 <report_current_limit_state>:
{
 801bae0:	b570      	push	{r4, r5, r6, lr}
 801bae2:	b082      	sub	sp, #8
    strcpy(buf, "[LIMITS:");
 801bae4:	4e0c      	ldr	r6, [pc, #48]	@ (801bb18 <report_current_limit_state+0x38>)
 801bae6:	4b0d      	ldr	r3, [pc, #52]	@ (801bb1c <report_current_limit_state+0x3c>)
 801bae8:	4634      	mov	r4, r6
 801baea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801baee:	c403      	stmia	r4!, {r0, r1}
 801baf0:	7022      	strb	r2, [r4, #0]
    append = add_limits(append, hal.limits.get_state());
 801baf2:	4d0b      	ldr	r5, [pc, #44]	@ (801bb20 <report_current_limit_state+0x40>)
 801baf4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 801baf6:	4798      	blx	r3
 801baf8:	4601      	mov	r1, r0
 801bafa:	9001      	str	r0, [sp, #4]
 801bafc:	4620      	mov	r0, r4
 801bafe:	f7fc fddc 	bl	80186ba <add_limits>
    hal.stream.write(buf);
 801bb02:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801bb06:	4630      	mov	r0, r6
 801bb08:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 801bb0a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801bb0e:	4805      	ldr	r0, [pc, #20]	@ (801bb24 <report_current_limit_state+0x44>)
 801bb10:	4798      	blx	r3
}
 801bb12:	2000      	movs	r0, #0
 801bb14:	b002      	add	sp, #8
 801bb16:	bd70      	pop	{r4, r5, r6, pc}
 801bb18:	200021c4 	.word	0x200021c4
 801bb1c:	0802c884 	.word	0x0802c884
 801bb20:	200018dc 	.word	0x200018dc
 801bb24:	0802c134 	.word	0x0802c134

0801bb28 <report_current_home_signal_state>:
{
 801bb28:	b530      	push	{r4, r5, lr}
 801bb2a:	b083      	sub	sp, #12
    home_signals_t home = hal.homing.get_state();
 801bb2c:	4d18      	ldr	r5, [pc, #96]	@ (801bb90 <report_current_home_signal_state+0x68>)
 801bb2e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 801bb30:	4798      	blx	r3
 801bb32:	f8ad 0004 	strh.w	r0, [sp, #4]
    strcpy(buf, "[HOMES:");
 801bb36:	4b17      	ldr	r3, [pc, #92]	@ (801bb94 <report_current_home_signal_state+0x6c>)
 801bb38:	4a17      	ldr	r2, [pc, #92]	@ (801bb98 <report_current_home_signal_state+0x70>)
 801bb3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bb3e:	e883 0003 	stmia.w	r3, {r0, r1}
    append = axis_signals_tostring(append, home.a);
 801bb42:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801bb46:	1dd8      	adds	r0, r3, #7
 801bb48:	f7fc fd04 	bl	8018554 <axis_signals_tostring>
    *append++ = ',';
 801bb4c:	232c      	movs	r3, #44	@ 0x2c
 801bb4e:	f800 3b01 	strb.w	r3, [r0], #1
    append = axis_signals_tostring(append, home.b);
 801bb52:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801bb56:	f7fc fcfd 	bl	8018554 <axis_signals_tostring>
 801bb5a:	4604      	mov	r4, r0
    strcat(append, hal.home_cap.a.mask ? ":H" : ":L");
 801bb5c:	f895 31e2 	ldrb.w	r3, [r5, #482]	@ 0x1e2
 801bb60:	b1a3      	cbz	r3, 801bb8c <report_current_home_signal_state+0x64>
 801bb62:	4d0e      	ldr	r5, [pc, #56]	@ (801bb9c <report_current_home_signal_state+0x74>)
 801bb64:	4620      	mov	r0, r4
 801bb66:	f7ec facb 	bl	8008100 <strlen>
 801bb6a:	1823      	adds	r3, r4, r0
 801bb6c:	8829      	ldrh	r1, [r5, #0]
 801bb6e:	78aa      	ldrb	r2, [r5, #2]
 801bb70:	5221      	strh	r1, [r4, r0]
 801bb72:	709a      	strb	r2, [r3, #2]
    hal.stream.write(buf);
 801bb74:	4c06      	ldr	r4, [pc, #24]	@ (801bb90 <report_current_home_signal_state+0x68>)
 801bb76:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801bb7a:	4806      	ldr	r0, [pc, #24]	@ (801bb94 <report_current_home_signal_state+0x6c>)
 801bb7c:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 801bb7e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801bb82:	4807      	ldr	r0, [pc, #28]	@ (801bba0 <report_current_home_signal_state+0x78>)
 801bb84:	4798      	blx	r3
}
 801bb86:	2000      	movs	r0, #0
 801bb88:	b003      	add	sp, #12
 801bb8a:	bd30      	pop	{r4, r5, pc}
    strcat(append, hal.home_cap.a.mask ? ":H" : ":L");
 801bb8c:	4d05      	ldr	r5, [pc, #20]	@ (801bba4 <report_current_home_signal_state+0x7c>)
 801bb8e:	e7e9      	b.n	801bb64 <report_current_home_signal_state+0x3c>
 801bb90:	200018dc 	.word	0x200018dc
 801bb94:	200021c4 	.word	0x200021c4
 801bb98:	0802c898 	.word	0x0802c898
 801bb9c:	0802c890 	.word	0x0802c890
 801bba0:	0802c134 	.word	0x0802c134
 801bba4:	0802c894 	.word	0x0802c894

0801bba8 <report_spindle_data>:
{
 801bba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbac:	ed2d 8b02 	vpush	{d8}
    spindle_ptrs_t *spindle = gc_spindle_get();
 801bbb0:	f7f1 fe26 	bl	800d800 <gc_spindle_get>
 801bbb4:	4605      	mov	r5, r0
    if(spindle->get_data) {
 801bbb6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d037      	beq.n	801bc2c <report_spindle_data+0x84>
        float apos = spindle->get_data(SpindleData_AngularPosition)->angular_position;
 801bbbc:	2002      	movs	r0, #2
 801bbbe:	4798      	blx	r3
 801bbc0:	ed90 8a03 	vldr	s16, [r0, #12]
        spindle_data_t *data = spindle->get_data(SpindleData_Counters);
 801bbc4:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 801bbc6:	2000      	movs	r0, #0
 801bbc8:	4798      	blx	r3
 801bbca:	4606      	mov	r6, r0
        hal.stream.write("[SPINDLEENCODER:");
 801bbcc:	4c1c      	ldr	r4, [pc, #112]	@ (801bc40 <report_spindle_data+0x98>)
 801bbce:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801bbd2:	481c      	ldr	r0, [pc, #112]	@ (801bc44 <report_spindle_data+0x9c>)
 801bbd4:	4798      	blx	r3
        hal.stream.write(uitoa(data->index_count));
 801bbd6:	f8d4 70b4 	ldr.w	r7, [r4, #180]	@ 0xb4
 801bbda:	6970      	ldr	r0, [r6, #20]
 801bbdc:	f7f9 ffd0 	bl	8015b80 <uitoa>
 801bbe0:	47b8      	blx	r7
        hal.stream.write(",");
 801bbe2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801bbe6:	4f18      	ldr	r7, [pc, #96]	@ (801bc48 <report_spindle_data+0xa0>)
 801bbe8:	4638      	mov	r0, r7
 801bbea:	4798      	blx	r3
        hal.stream.write(uitoa(data->pulse_count));
 801bbec:	f8d4 80b4 	ldr.w	r8, [r4, #180]	@ 0xb4
 801bbf0:	69b0      	ldr	r0, [r6, #24]
 801bbf2:	f7f9 ffc5 	bl	8015b80 <uitoa>
 801bbf6:	47c0      	blx	r8
        hal.stream.write(",");
 801bbf8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801bbfc:	4638      	mov	r0, r7
 801bbfe:	4798      	blx	r3
        hal.stream.write(uitoa(data->error_count));
 801bc00:	f8d4 80b4 	ldr.w	r8, [r4, #180]	@ 0xb4
 801bc04:	69f0      	ldr	r0, [r6, #28]
 801bc06:	f7f9 ffbb 	bl	8015b80 <uitoa>
 801bc0a:	47c0      	blx	r8
        hal.stream.write(",");
 801bc0c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801bc10:	4638      	mov	r0, r7
 801bc12:	4798      	blx	r3
        hal.stream.write(ftoa(apos, 3));
 801bc14:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 801bc18:	2003      	movs	r0, #3
 801bc1a:	eeb0 0a48 	vmov.f32	s0, s16
 801bc1e:	f7f9 ffd1 	bl	8015bc4 <ftoa>
 801bc22:	47b0      	blx	r6
        hal.stream.write("]" ASCII_EOL);
 801bc24:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801bc28:	4808      	ldr	r0, [pc, #32]	@ (801bc4c <report_spindle_data+0xa4>)
 801bc2a:	4798      	blx	r3
    return spindle->get_data ? Status_OK : Status_InvalidStatement;
 801bc2c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 801bc2e:	b123      	cbz	r3, 801bc3a <report_spindle_data+0x92>
 801bc30:	2000      	movs	r0, #0
}
 801bc32:	ecbd 8b02 	vpop	{d8}
 801bc36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return spindle->get_data ? Status_OK : Status_InvalidStatement;
 801bc3a:	2003      	movs	r0, #3
 801bc3c:	e7f9      	b.n	801bc32 <report_spindle_data+0x8a>
 801bc3e:	bf00      	nop
 801bc40:	200018dc 	.word	0x200018dc
 801bc44:	0802c8a0 	.word	0x0802c8a0
 801bc48:	0802c560 	.word	0x0802c560
 801bc4c:	0802c134 	.word	0x0802c134

0801bc50 <report_pins>:
{
 801bc50:	b500      	push	{lr}
 801bc52:	b085      	sub	sp, #20
    pin_data_t pin_data = {0};
 801bc54:	2300      	movs	r3, #0
 801bc56:	9301      	str	r3, [sp, #4]
 801bc58:	9302      	str	r3, [sp, #8]
 801bc5a:	9303      	str	r3, [sp, #12]
    if(hal.enumerate_pins) {
 801bc5c:	4b1e      	ldr	r3, [pc, #120]	@ (801bcd8 <report_pins+0x88>)
 801bc5e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 801bc62:	b363      	cbz	r3, 801bcbe <report_pins+0x6e>
        hal.enumerate_pins(false, count_pins, (void *)&pin_data);
 801bc64:	aa01      	add	r2, sp, #4
 801bc66:	491d      	ldr	r1, [pc, #116]	@ (801bcdc <report_pins+0x8c>)
 801bc68:	2000      	movs	r0, #0
 801bc6a:	4798      	blx	r3
        if((pin_data.pins = malloc(pin_data.n_pins * sizeof(pin_info_t)))) {
 801bc6c:	9802      	ldr	r0, [sp, #8]
 801bc6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bc72:	00c0      	lsls	r0, r0, #3
 801bc74:	f007 f890 	bl	8022d98 <malloc>
 801bc78:	9003      	str	r0, [sp, #12]
 801bc7a:	b320      	cbz	r0, 801bcc6 <report_pins+0x76>
            hal.enumerate_pins(false, get_pins, (void *)&pin_data);
 801bc7c:	4b16      	ldr	r3, [pc, #88]	@ (801bcd8 <report_pins+0x88>)
 801bc7e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 801bc82:	aa01      	add	r2, sp, #4
 801bc84:	4916      	ldr	r1, [pc, #88]	@ (801bce0 <report_pins+0x90>)
 801bc86:	2000      	movs	r0, #0
 801bc88:	4798      	blx	r3
            qsort(pin_data.pins, pin_data.n_pins, sizeof(pin_info_t), cmp_pins);
 801bc8a:	4b16      	ldr	r3, [pc, #88]	@ (801bce4 <report_pins+0x94>)
 801bc8c:	2218      	movs	r2, #24
 801bc8e:	9902      	ldr	r1, [sp, #8]
 801bc90:	9803      	ldr	r0, [sp, #12]
 801bc92:	f008 f834 	bl	8023cfe <qsort>
            for(pin_data.idx = 0; pin_data.idx < pin_data.n_pins; pin_data.idx++)
 801bc96:	2300      	movs	r3, #0
 801bc98:	9301      	str	r3, [sp, #4]
 801bc9a:	e009      	b.n	801bcb0 <report_pins+0x60>
                report_pin_info(&pin_data.pins[pin_data.idx]);
 801bc9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bca0:	9b03      	ldr	r3, [sp, #12]
 801bca2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801bca6:	f7fd fd8d 	bl	80197c4 <report_pin_info>
            for(pin_data.idx = 0; pin_data.idx < pin_data.n_pins; pin_data.idx++)
 801bcaa:	9b01      	ldr	r3, [sp, #4]
 801bcac:	3301      	adds	r3, #1
 801bcae:	9301      	str	r3, [sp, #4]
 801bcb0:	9801      	ldr	r0, [sp, #4]
 801bcb2:	9b02      	ldr	r3, [sp, #8]
 801bcb4:	4298      	cmp	r0, r3
 801bcb6:	d3f1      	bcc.n	801bc9c <report_pins+0x4c>
            free(pin_data.pins);
 801bcb8:	9803      	ldr	r0, [sp, #12]
 801bcba:	f007 f875 	bl	8022da8 <free>
}
 801bcbe:	2000      	movs	r0, #0
 801bcc0:	b005      	add	sp, #20
 801bcc2:	f85d fb04 	ldr.w	pc, [sp], #4
            hal.enumerate_pins(false, report_pin, NULL);
 801bcc6:	4b04      	ldr	r3, [pc, #16]	@ (801bcd8 <report_pins+0x88>)
 801bcc8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 801bccc:	2200      	movs	r2, #0
 801bcce:	4906      	ldr	r1, [pc, #24]	@ (801bce8 <report_pins+0x98>)
 801bcd0:	4610      	mov	r0, r2
 801bcd2:	4798      	blx	r3
 801bcd4:	e7f3      	b.n	801bcbe <report_pins+0x6e>
 801bcd6:	bf00      	nop
 801bcd8:	200018dc 	.word	0x200018dc
 801bcdc:	080186f3 	.word	0x080186f3
 801bce0:	08018d09 	.word	0x08018d09
 801bce4:	080186fb 	.word	0x080186fb
 801bce8:	08019835 	.word	0x08019835

0801bcec <report_pin_states>:
{
 801bcec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if((ports = ioports_available(Port_Digital, Port_Input))) {
 801bcf0:	2100      	movs	r1, #0
 801bcf2:	2001      	movs	r0, #1
 801bcf4:	f7f6 fa2a 	bl	801214c <ioports_available>
 801bcf8:	2800      	cmp	r0, #0
 801bcfa:	f040 80b3 	bne.w	801be64 <report_pin_states+0x178>
    if((ports = ioports_available(Port_Digital, Port_Output))) {
 801bcfe:	2101      	movs	r1, #1
 801bd00:	4608      	mov	r0, r1
 801bd02:	f7f6 fa23 	bl	801214c <ioports_available>
 801bd06:	4607      	mov	r7, r0
 801bd08:	2800      	cmp	r0, #0
 801bd0a:	f040 8110 	bne.w	801bf2e <report_pin_states+0x242>
    if((ports = ioports_available(Port_Analog, Port_Input))) {
 801bd0e:	2100      	movs	r1, #0
 801bd10:	4608      	mov	r0, r1
 801bd12:	f7f6 fa1b 	bl	801214c <ioports_available>
 801bd16:	4607      	mov	r7, r0
 801bd18:	2800      	cmp	r0, #0
 801bd1a:	f040 8146 	bne.w	801bfaa <report_pin_states+0x2be>
    if((ports = ioports_available(Port_Analog, Port_Output))) {
 801bd1e:	2101      	movs	r1, #1
 801bd20:	2000      	movs	r0, #0
 801bd22:	f7f6 fa13 	bl	801214c <ioports_available>
 801bd26:	4607      	mov	r7, r0
 801bd28:	2800      	cmp	r0, #0
 801bd2a:	f040 81c3 	bne.w	801c0b4 <report_pin_states+0x3c8>
}
 801bd2e:	2000      	movs	r0, #0
 801bd30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                hal.stream.write(port->description ? port->description : xbar_fn_to_pinname(port->function));
 801bd34:	7860      	ldrb	r0, [r4, #1]
 801bd36:	f7f1 faab 	bl	800d290 <xbar_fn_to_pinname>
 801bd3a:	e04e      	b.n	801bdda <report_pin_states+0xee>
                hal.stream.write(port->mode.inverted ? "I" : "N");
 801bd3c:	48a6      	ldr	r0, [pc, #664]	@ (801bfd8 <report_pin_states+0x2ec>)
 801bd3e:	e065      	b.n	801be0c <report_pin_states+0x120>
                hal.stream.write(port->mode.debounce ? "D" : "-");
 801bd40:	48a6      	ldr	r0, [pc, #664]	@ (801bfdc <report_pin_states+0x2f0>)
 801bd42:	e07c      	b.n	801be3e <report_pin_states+0x152>
                hal.stream.write(port->cap.invert ? "I" : "-");
 801bd44:	48a6      	ldr	r0, [pc, #664]	@ (801bfe0 <report_pin_states+0x2f4>)
 801bd46:	4798      	blx	r3
                hal.stream.write(pull_mode((pull_mode_t)port->cap.pull_mode));
 801bd48:	4ea6      	ldr	r6, [pc, #664]	@ (801bfe4 <report_pin_states+0x2f8>)
 801bd4a:	f8d6 80b4 	ldr.w	r8, [r6, #180]	@ 0xb4
 801bd4e:	7d20      	ldrb	r0, [r4, #20]
 801bd50:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 801bd54:	f7fc fd10 	bl	8018778 <pull_mode>
 801bd58:	47c0      	blx	r8
                hal.stream.write(irq_mode((pin_irq_mode_t)port->cap.irq_mode));
 801bd5a:	f8d6 80b4 	ldr.w	r8, [r6, #180]	@ 0xb4
 801bd5e:	8aa0      	ldrh	r0, [r4, #20]
 801bd60:	f3c0 1044 	ubfx	r0, r0, #5, #5
 801bd64:	f7fc fcce 	bl	8018704 <irq_mode>
 801bd68:	47c0      	blx	r8
                hal.stream.write(port->cap.debounce ? "D" : "-");
 801bd6a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bd6e:	f994 2015 	ldrsb.w	r2, [r4, #21]
 801bd72:	2a00      	cmp	r2, #0
 801bd74:	db72      	blt.n	801be5c <report_pin_states+0x170>
 801bd76:	489a      	ldr	r0, [pc, #616]	@ (801bfe0 <report_pin_states+0x2f4>)
 801bd78:	4798      	blx	r3
                hal.stream.write("|");
 801bd7a:	4e9a      	ldr	r6, [pc, #616]	@ (801bfe4 <report_pin_states+0x2f8>)
 801bd7c:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bd80:	4899      	ldr	r0, [pc, #612]	@ (801bfe8 <report_pin_states+0x2fc>)
 801bd82:	4798      	blx	r3
                hal.stream.write(port->get_value ? uitoa((uint32_t)port->get_value(port)) : "?");
 801bd84:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801bd88:	69e3      	ldr	r3, [r4, #28]
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d068      	beq.n	801be60 <report_pin_states+0x174>
 801bd8e:	4620      	mov	r0, r4
 801bd90:	4798      	blx	r3
 801bd92:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801bd96:	ee17 0a90 	vmov	r0, s15
 801bd9a:	f7f9 fef1 	bl	8015b80 <uitoa>
 801bd9e:	47b0      	blx	r6
                hal.stream.write("]" ASCII_EOL);
 801bda0:	4b90      	ldr	r3, [pc, #576]	@ (801bfe4 <report_pin_states+0x2f8>)
 801bda2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801bda6:	4891      	ldr	r0, [pc, #580]	@ (801bfec <report_pin_states+0x300>)
 801bda8:	4798      	blx	r3
        for(idx = 0; idx < ports; idx++) {
 801bdaa:	3501      	adds	r5, #1
 801bdac:	b2ed      	uxtb	r5, r5
 801bdae:	42bd      	cmp	r5, r7
 801bdb0:	d2a5      	bcs.n	801bcfe <report_pin_states+0x12>
            if((port = hal.port.get_pin_info(Port_Digital, Port_Input, idx))) {
 801bdb2:	4b8c      	ldr	r3, [pc, #560]	@ (801bfe4 <report_pin_states+0x2f8>)
 801bdb4:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801bdb8:	462a      	mov	r2, r5
 801bdba:	2100      	movs	r1, #0
 801bdbc:	2001      	movs	r0, #1
 801bdbe:	4798      	blx	r3
 801bdc0:	4604      	mov	r4, r0
 801bdc2:	2800      	cmp	r0, #0
 801bdc4:	d0f1      	beq.n	801bdaa <report_pin_states+0xbe>
                hal.stream.write("[PINSTATE:DIN|");
 801bdc6:	4e87      	ldr	r6, [pc, #540]	@ (801bfe4 <report_pin_states+0x2f8>)
 801bdc8:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bdcc:	4888      	ldr	r0, [pc, #544]	@ (801bff0 <report_pin_states+0x304>)
 801bdce:	4798      	blx	r3
                hal.stream.write(port->description ? port->description : xbar_fn_to_pinname(port->function));
 801bdd0:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801bdd4:	68e0      	ldr	r0, [r4, #12]
 801bdd6:	2800      	cmp	r0, #0
 801bdd8:	d0ac      	beq.n	801bd34 <report_pin_states+0x48>
 801bdda:	47b0      	blx	r6
                hal.stream.write("|");
 801bddc:	4e81      	ldr	r6, [pc, #516]	@ (801bfe4 <report_pin_states+0x2f8>)
 801bdde:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bde2:	f8df 8204 	ldr.w	r8, [pc, #516]	@ 801bfe8 <report_pin_states+0x2fc>
 801bde6:	4640      	mov	r0, r8
 801bde8:	4798      	blx	r3
                hal.stream.write(uitoa(port->id));
 801bdea:	f8d6 90b4 	ldr.w	r9, [r6, #180]	@ 0xb4
 801bdee:	7820      	ldrb	r0, [r4, #0]
 801bdf0:	f7f9 fec6 	bl	8015b80 <uitoa>
 801bdf4:	47c8      	blx	r9
                hal.stream.write("|");
 801bdf6:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bdfa:	4640      	mov	r0, r8
 801bdfc:	4798      	blx	r3
                hal.stream.write(port->mode.inverted ? "I" : "N");
 801bdfe:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801be02:	7de2      	ldrb	r2, [r4, #23]
 801be04:	f012 0f04 	tst.w	r2, #4
 801be08:	d098      	beq.n	801bd3c <report_pin_states+0x50>
 801be0a:	487a      	ldr	r0, [pc, #488]	@ (801bff4 <report_pin_states+0x308>)
 801be0c:	4798      	blx	r3
                hal.stream.write(pull_mode((pull_mode_t)port->mode.pull_mode));
 801be0e:	4e75      	ldr	r6, [pc, #468]	@ (801bfe4 <report_pin_states+0x2f8>)
 801be10:	f8d6 80b4 	ldr.w	r8, [r6, #180]	@ 0xb4
 801be14:	7da0      	ldrb	r0, [r4, #22]
 801be16:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 801be1a:	f7fc fcad 	bl	8018778 <pull_mode>
 801be1e:	47c0      	blx	r8
                hal.stream.write(irq_mode((pin_irq_mode_t)port->mode.irq_mode));
 801be20:	f8d6 80b4 	ldr.w	r8, [r6, #180]	@ 0xb4
 801be24:	8ae0      	ldrh	r0, [r4, #22]
 801be26:	f3c0 1044 	ubfx	r0, r0, #5, #5
 801be2a:	f7fc fc6b 	bl	8018704 <irq_mode>
 801be2e:	47c0      	blx	r8
                hal.stream.write(port->mode.debounce ? "D" : "-");
 801be30:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801be34:	f994 2017 	ldrsb.w	r2, [r4, #23]
 801be38:	2a00      	cmp	r2, #0
 801be3a:	db81      	blt.n	801bd40 <report_pin_states+0x54>
 801be3c:	4868      	ldr	r0, [pc, #416]	@ (801bfe0 <report_pin_states+0x2f4>)
 801be3e:	4798      	blx	r3
                hal.stream.write("|");
 801be40:	4e68      	ldr	r6, [pc, #416]	@ (801bfe4 <report_pin_states+0x2f8>)
 801be42:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801be46:	4868      	ldr	r0, [pc, #416]	@ (801bfe8 <report_pin_states+0x2fc>)
 801be48:	4798      	blx	r3
                hal.stream.write(port->cap.invert ? "I" : "-");
 801be4a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801be4e:	7d62      	ldrb	r2, [r4, #21]
 801be50:	f012 0f04 	tst.w	r2, #4
 801be54:	f43f af76 	beq.w	801bd44 <report_pin_states+0x58>
 801be58:	4866      	ldr	r0, [pc, #408]	@ (801bff4 <report_pin_states+0x308>)
 801be5a:	e774      	b.n	801bd46 <report_pin_states+0x5a>
                hal.stream.write(port->cap.debounce ? "D" : "-");
 801be5c:	485f      	ldr	r0, [pc, #380]	@ (801bfdc <report_pin_states+0x2f0>)
 801be5e:	e78b      	b.n	801bd78 <report_pin_states+0x8c>
                hal.stream.write(port->get_value ? uitoa((uint32_t)port->get_value(port)) : "?");
 801be60:	4865      	ldr	r0, [pc, #404]	@ (801bff8 <report_pin_states+0x30c>)
 801be62:	e79c      	b.n	801bd9e <report_pin_states+0xb2>
 801be64:	4607      	mov	r7, r0
        for(idx = 0; idx < ports; idx++) {
 801be66:	2500      	movs	r5, #0
 801be68:	e7a1      	b.n	801bdae <report_pin_states+0xc2>
                hal.stream.write(port->description ? port->description : xbar_fn_to_pinname(port->function));
 801be6a:	7868      	ldrb	r0, [r5, #1]
 801be6c:	f7f1 fa10 	bl	800d290 <xbar_fn_to_pinname>
 801be70:	e034      	b.n	801bedc <report_pin_states+0x1f0>
                hal.stream.write(port->mode.inverted ? "I" : "N");
 801be72:	4859      	ldr	r0, [pc, #356]	@ (801bfd8 <report_pin_states+0x2ec>)
 801be74:	e04b      	b.n	801bf0e <report_pin_states+0x222>
                hal.stream.write(port->cap.invert ? "I" : "-");
 801be76:	485a      	ldr	r0, [pc, #360]	@ (801bfe0 <report_pin_states+0x2f4>)
 801be78:	4798      	blx	r3
                hal.stream.write("|");
 801be7a:	4e5a      	ldr	r6, [pc, #360]	@ (801bfe4 <report_pin_states+0x2f8>)
 801be7c:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801be80:	4859      	ldr	r0, [pc, #356]	@ (801bfe8 <report_pin_states+0x2fc>)
 801be82:	4798      	blx	r3
                hal.stream.write(port->get_value ? uitoa((uint32_t)port->get_value(port)) : "?");
 801be84:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801be88:	69eb      	ldr	r3, [r5, #28]
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d04d      	beq.n	801bf2a <report_pin_states+0x23e>
 801be8e:	4628      	mov	r0, r5
 801be90:	4798      	blx	r3
 801be92:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801be96:	ee17 0a90 	vmov	r0, s15
 801be9a:	f7f9 fe71 	bl	8015b80 <uitoa>
 801be9e:	47b0      	blx	r6
                hal.stream.write("]" ASCII_EOL);
 801bea0:	4b50      	ldr	r3, [pc, #320]	@ (801bfe4 <report_pin_states+0x2f8>)
 801bea2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801bea6:	4851      	ldr	r0, [pc, #324]	@ (801bfec <report_pin_states+0x300>)
 801bea8:	4798      	blx	r3
        for(idx = 0; idx < ports; idx++) {
 801beaa:	3401      	adds	r4, #1
 801beac:	b2e4      	uxtb	r4, r4
 801beae:	42bc      	cmp	r4, r7
 801beb0:	f4bf af2d 	bcs.w	801bd0e <report_pin_states+0x22>
            if((port = hal.port.get_pin_info(Port_Digital, Port_Output, idx))) {
 801beb4:	4b4b      	ldr	r3, [pc, #300]	@ (801bfe4 <report_pin_states+0x2f8>)
 801beb6:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801beba:	4622      	mov	r2, r4
 801bebc:	2101      	movs	r1, #1
 801bebe:	4608      	mov	r0, r1
 801bec0:	4798      	blx	r3
 801bec2:	4605      	mov	r5, r0
 801bec4:	2800      	cmp	r0, #0
 801bec6:	d0f0      	beq.n	801beaa <report_pin_states+0x1be>
                hal.stream.write("[PINSTATE:DOUT|");
 801bec8:	4e46      	ldr	r6, [pc, #280]	@ (801bfe4 <report_pin_states+0x2f8>)
 801beca:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bece:	484b      	ldr	r0, [pc, #300]	@ (801bffc <report_pin_states+0x310>)
 801bed0:	4798      	blx	r3
                hal.stream.write(port->description ? port->description : xbar_fn_to_pinname(port->function));
 801bed2:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801bed6:	68e8      	ldr	r0, [r5, #12]
 801bed8:	2800      	cmp	r0, #0
 801beda:	d0c6      	beq.n	801be6a <report_pin_states+0x17e>
 801bedc:	47b0      	blx	r6
                hal.stream.write("|");
 801bede:	4e41      	ldr	r6, [pc, #260]	@ (801bfe4 <report_pin_states+0x2f8>)
 801bee0:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bee4:	f8df 8100 	ldr.w	r8, [pc, #256]	@ 801bfe8 <report_pin_states+0x2fc>
 801bee8:	4640      	mov	r0, r8
 801beea:	4798      	blx	r3
                hal.stream.write(uitoa(port->id));
 801beec:	f8d6 90b4 	ldr.w	r9, [r6, #180]	@ 0xb4
 801bef0:	7828      	ldrb	r0, [r5, #0]
 801bef2:	f7f9 fe45 	bl	8015b80 <uitoa>
 801bef6:	47c8      	blx	r9
                hal.stream.write("|");
 801bef8:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801befc:	4640      	mov	r0, r8
 801befe:	4798      	blx	r3
                hal.stream.write(port->mode.inverted ? "I" : "N");
 801bf00:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bf04:	7dea      	ldrb	r2, [r5, #23]
 801bf06:	f012 0f04 	tst.w	r2, #4
 801bf0a:	d0b2      	beq.n	801be72 <report_pin_states+0x186>
 801bf0c:	4839      	ldr	r0, [pc, #228]	@ (801bff4 <report_pin_states+0x308>)
 801bf0e:	4798      	blx	r3
                hal.stream.write("|");
 801bf10:	4e34      	ldr	r6, [pc, #208]	@ (801bfe4 <report_pin_states+0x2f8>)
 801bf12:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bf16:	4834      	ldr	r0, [pc, #208]	@ (801bfe8 <report_pin_states+0x2fc>)
 801bf18:	4798      	blx	r3
                hal.stream.write(port->cap.invert ? "I" : "-");
 801bf1a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bf1e:	7d6a      	ldrb	r2, [r5, #21]
 801bf20:	f012 0f04 	tst.w	r2, #4
 801bf24:	d0a7      	beq.n	801be76 <report_pin_states+0x18a>
 801bf26:	4833      	ldr	r0, [pc, #204]	@ (801bff4 <report_pin_states+0x308>)
 801bf28:	e7a6      	b.n	801be78 <report_pin_states+0x18c>
                hal.stream.write(port->get_value ? uitoa((uint32_t)port->get_value(port)) : "?");
 801bf2a:	4833      	ldr	r0, [pc, #204]	@ (801bff8 <report_pin_states+0x30c>)
 801bf2c:	e7b7      	b.n	801be9e <report_pin_states+0x1b2>
        for(idx = 0; idx < ports; idx++) {
 801bf2e:	2400      	movs	r4, #0
 801bf30:	e7bd      	b.n	801beae <report_pin_states+0x1c2>
                hal.stream.write(port->get_value ? ftoa((uint32_t)port->get_value(port), 2) : "?");
 801bf32:	4831      	ldr	r0, [pc, #196]	@ (801bff8 <report_pin_states+0x30c>)
 801bf34:	47a8      	blx	r5
                hal.stream.write("]" ASCII_EOL);
 801bf36:	4b2b      	ldr	r3, [pc, #172]	@ (801bfe4 <report_pin_states+0x2f8>)
 801bf38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801bf3c:	482b      	ldr	r0, [pc, #172]	@ (801bfec <report_pin_states+0x300>)
 801bf3e:	4798      	blx	r3
        for(idx = 0; idx < ports; idx++) {
 801bf40:	3401      	adds	r4, #1
 801bf42:	b2e4      	uxtb	r4, r4
 801bf44:	42bc      	cmp	r4, r7
 801bf46:	f4bf aeea 	bcs.w	801bd1e <report_pin_states+0x32>
            if((port = hal.port.get_pin_info(Port_Analog, Port_Input, idx))) {
 801bf4a:	4b26      	ldr	r3, [pc, #152]	@ (801bfe4 <report_pin_states+0x2f8>)
 801bf4c:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801bf50:	4622      	mov	r2, r4
 801bf52:	2100      	movs	r1, #0
 801bf54:	4608      	mov	r0, r1
 801bf56:	4798      	blx	r3
 801bf58:	4606      	mov	r6, r0
 801bf5a:	2800      	cmp	r0, #0
 801bf5c:	d0f0      	beq.n	801bf40 <report_pin_states+0x254>
                hal.stream.write("[PINSTATE:AIN|");
 801bf5e:	4d21      	ldr	r5, [pc, #132]	@ (801bfe4 <report_pin_states+0x2f8>)
 801bf60:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801bf64:	4826      	ldr	r0, [pc, #152]	@ (801c000 <report_pin_states+0x314>)
 801bf66:	4798      	blx	r3
                hal.stream.write(port->description);
 801bf68:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801bf6c:	68f0      	ldr	r0, [r6, #12]
 801bf6e:	4798      	blx	r3
                hal.stream.write("|");
 801bf70:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801bf74:	481c      	ldr	r0, [pc, #112]	@ (801bfe8 <report_pin_states+0x2fc>)
 801bf76:	4798      	blx	r3
                hal.stream.write(uitoa(port->id));
 801bf78:	f8d5 80b4 	ldr.w	r8, [r5, #180]	@ 0xb4
 801bf7c:	7830      	ldrb	r0, [r6, #0]
 801bf7e:	f7f9 fdff 	bl	8015b80 <uitoa>
 801bf82:	47c0      	blx	r8
                hal.stream.write("|||");
 801bf84:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801bf88:	481e      	ldr	r0, [pc, #120]	@ (801c004 <report_pin_states+0x318>)
 801bf8a:	4798      	blx	r3
                hal.stream.write(port->get_value ? ftoa((uint32_t)port->get_value(port), 2) : "?");
 801bf8c:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 801bf90:	69f3      	ldr	r3, [r6, #28]
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d0cd      	beq.n	801bf32 <report_pin_states+0x246>
 801bf96:	4630      	mov	r0, r6
 801bf98:	4798      	blx	r3
 801bf9a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801bf9e:	2002      	movs	r0, #2
 801bfa0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801bfa4:	f7f9 fe0e 	bl	8015bc4 <ftoa>
 801bfa8:	e7c4      	b.n	801bf34 <report_pin_states+0x248>
        for(idx = 0; idx < ports; idx++) {
 801bfaa:	2400      	movs	r4, #0
 801bfac:	e7ca      	b.n	801bf44 <report_pin_states+0x258>
                hal.stream.write(port->mode.pwm ? "P" : (port->mode.servo_pwm ? "S" : "N"));
 801bfae:	4816      	ldr	r0, [pc, #88]	@ (801c008 <report_pin_states+0x31c>)
 801bfb0:	4790      	blx	r2
                hal.stream.write("|");
 801bfb2:	4e0c      	ldr	r6, [pc, #48]	@ (801bfe4 <report_pin_states+0x2f8>)
 801bfb4:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801bfb8:	480b      	ldr	r0, [pc, #44]	@ (801bfe8 <report_pin_states+0x2fc>)
 801bfba:	4798      	blx	r3
                hal.stream.write(port->cap.pwm ? "P" : (port->cap.servo_pwm ? "S" : "N"));
 801bfbc:	f8d6 20b4 	ldr.w	r2, [r6, #180]	@ 0xb4
 801bfc0:	7d6b      	ldrb	r3, [r5, #21]
 801bfc2:	f013 0f10 	tst.w	r3, #16
 801bfc6:	d123      	bne.n	801c010 <report_pin_states+0x324>
 801bfc8:	f013 0f20 	tst.w	r3, #32
 801bfcc:	d06e      	beq.n	801c0ac <report_pin_states+0x3c0>
 801bfce:	480f      	ldr	r0, [pc, #60]	@ (801c00c <report_pin_states+0x320>)
 801bfd0:	e01f      	b.n	801c012 <report_pin_states+0x326>
                hal.stream.write(port->mode.pwm ? "P" : (port->mode.servo_pwm ? "S" : "N"));
 801bfd2:	4801      	ldr	r0, [pc, #4]	@ (801bfd8 <report_pin_states+0x2ec>)
 801bfd4:	e7ec      	b.n	801bfb0 <report_pin_states+0x2c4>
 801bfd6:	bf00      	nop
 801bfd8:	0802c8b8 	.word	0x0802c8b8
 801bfdc:	0802c118 	.word	0x0802c118
 801bfe0:	0802c110 	.word	0x0802c110
 801bfe4:	200018dc 	.word	0x200018dc
 801bfe8:	0802c150 	.word	0x0802c150
 801bfec:	0802c134 	.word	0x0802c134
 801bff0:	0802c8c8 	.word	0x0802c8c8
 801bff4:	0802c8b4 	.word	0x0802c8b4
 801bff8:	0802c8bc 	.word	0x0802c8bc
 801bffc:	0802c8d8 	.word	0x0802c8d8
 801c000:	0802c8e8 	.word	0x0802c8e8
 801c004:	0802c8f8 	.word	0x0802c8f8
 801c008:	0802c8c0 	.word	0x0802c8c0
 801c00c:	0802c8c4 	.word	0x0802c8c4
                hal.stream.write(port->cap.pwm ? "P" : (port->cap.servo_pwm ? "S" : "N"));
 801c010:	4829      	ldr	r0, [pc, #164]	@ (801c0b8 <report_pin_states+0x3cc>)
 801c012:	4790      	blx	r2
                hal.stream.write("|");
 801c014:	4e29      	ldr	r6, [pc, #164]	@ (801c0bc <report_pin_states+0x3d0>)
 801c016:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801c01a:	4829      	ldr	r0, [pc, #164]	@ (801c0c0 <report_pin_states+0x3d4>)
 801c01c:	4798      	blx	r3
                hal.stream.write(port->get_value ? ftoa((uint32_t)port->get_value(port), 2) : "?");
 801c01e:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801c022:	69eb      	ldr	r3, [r5, #28]
 801c024:	2b00      	cmp	r3, #0
 801c026:	d043      	beq.n	801c0b0 <report_pin_states+0x3c4>
 801c028:	4628      	mov	r0, r5
 801c02a:	4798      	blx	r3
 801c02c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801c030:	2002      	movs	r0, #2
 801c032:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801c036:	f7f9 fdc5 	bl	8015bc4 <ftoa>
 801c03a:	47b0      	blx	r6
                hal.stream.write("]" ASCII_EOL);
 801c03c:	4b1f      	ldr	r3, [pc, #124]	@ (801c0bc <report_pin_states+0x3d0>)
 801c03e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801c042:	4820      	ldr	r0, [pc, #128]	@ (801c0c4 <report_pin_states+0x3d8>)
 801c044:	4798      	blx	r3
        for(idx = 0; idx < ports; idx++) {
 801c046:	3401      	adds	r4, #1
 801c048:	b2e4      	uxtb	r4, r4
 801c04a:	42bc      	cmp	r4, r7
 801c04c:	f4bf ae6f 	bcs.w	801bd2e <report_pin_states+0x42>
            if((port = hal.port.get_pin_info(Port_Analog, Port_Output, idx))) {
 801c050:	4b1a      	ldr	r3, [pc, #104]	@ (801c0bc <report_pin_states+0x3d0>)
 801c052:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801c056:	4622      	mov	r2, r4
 801c058:	2101      	movs	r1, #1
 801c05a:	2000      	movs	r0, #0
 801c05c:	4798      	blx	r3
 801c05e:	4605      	mov	r5, r0
 801c060:	2800      	cmp	r0, #0
 801c062:	d0f0      	beq.n	801c046 <report_pin_states+0x35a>
                hal.stream.write("[PINSTATE:AOUT|");
 801c064:	4e15      	ldr	r6, [pc, #84]	@ (801c0bc <report_pin_states+0x3d0>)
 801c066:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801c06a:	4817      	ldr	r0, [pc, #92]	@ (801c0c8 <report_pin_states+0x3dc>)
 801c06c:	4798      	blx	r3
                hal.stream.write(port->description);
 801c06e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801c072:	68e8      	ldr	r0, [r5, #12]
 801c074:	4798      	blx	r3
                hal.stream.write("|");
 801c076:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801c07a:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 801c0c0 <report_pin_states+0x3d4>
 801c07e:	4640      	mov	r0, r8
 801c080:	4798      	blx	r3
                hal.stream.write(uitoa(port->id));
 801c082:	f8d6 90b4 	ldr.w	r9, [r6, #180]	@ 0xb4
 801c086:	7828      	ldrb	r0, [r5, #0]
 801c088:	f7f9 fd7a 	bl	8015b80 <uitoa>
 801c08c:	47c8      	blx	r9
                hal.stream.write("|");
 801c08e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801c092:	4640      	mov	r0, r8
 801c094:	4798      	blx	r3
                hal.stream.write(port->mode.pwm ? "P" : (port->mode.servo_pwm ? "S" : "N"));
 801c096:	f8d6 20b4 	ldr.w	r2, [r6, #180]	@ 0xb4
 801c09a:	7deb      	ldrb	r3, [r5, #23]
 801c09c:	f013 0f10 	tst.w	r3, #16
 801c0a0:	d185      	bne.n	801bfae <report_pin_states+0x2c2>
 801c0a2:	f013 0f20 	tst.w	r3, #32
 801c0a6:	d094      	beq.n	801bfd2 <report_pin_states+0x2e6>
 801c0a8:	4808      	ldr	r0, [pc, #32]	@ (801c0cc <report_pin_states+0x3e0>)
 801c0aa:	e781      	b.n	801bfb0 <report_pin_states+0x2c4>
                hal.stream.write(port->cap.pwm ? "P" : (port->cap.servo_pwm ? "S" : "N"));
 801c0ac:	4808      	ldr	r0, [pc, #32]	@ (801c0d0 <report_pin_states+0x3e4>)
 801c0ae:	e7b0      	b.n	801c012 <report_pin_states+0x326>
                hal.stream.write(port->get_value ? ftoa((uint32_t)port->get_value(port), 2) : "?");
 801c0b0:	4808      	ldr	r0, [pc, #32]	@ (801c0d4 <report_pin_states+0x3e8>)
 801c0b2:	e7c2      	b.n	801c03a <report_pin_states+0x34e>
        for(idx = 0; idx < ports; idx++) {
 801c0b4:	2400      	movs	r4, #0
 801c0b6:	e7c8      	b.n	801c04a <report_pin_states+0x35e>
 801c0b8:	0802c8c0 	.word	0x0802c8c0
 801c0bc:	200018dc 	.word	0x200018dc
 801c0c0:	0802c150 	.word	0x0802c150
 801c0c4:	0802c134 	.word	0x0802c134
 801c0c8:	0802c8fc 	.word	0x0802c8fc
 801c0cc:	0802c8c4 	.word	0x0802c8c4
 801c0d0:	0802c8b8 	.word	0x0802c8b8
 801c0d4:	0802c8bc 	.word	0x0802c8bc

0801c0d8 <report_time>:
    if(hal.rtc.get_datetime) {
 801c0d8:	4b1c      	ldr	r3, [pc, #112]	@ (801c14c <report_time+0x74>)
 801c0da:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	d031      	beq.n	801c146 <report_time+0x6e>
{
 801c0e2:	b530      	push	{r4, r5, lr}
 801c0e4:	b08b      	sub	sp, #44	@ 0x2c
        if((ok = !!hal.rtc.get_datetime(&time))) {
 801c0e6:	a801      	add	r0, sp, #4
 801c0e8:	4798      	blx	r3
 801c0ea:	b350      	cbz	r0, 801c142 <report_time+0x6a>
            hal.stream.write("[RTC:");
 801c0ec:	4c17      	ldr	r4, [pc, #92]	@ (801c14c <report_time+0x74>)
 801c0ee:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801c0f2:	4817      	ldr	r0, [pc, #92]	@ (801c150 <report_time+0x78>)
 801c0f4:	4798      	blx	r3
            hal.stream.write(uitoa(time.tm_year + 1900));
 801c0f6:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 801c0fa:	9806      	ldr	r0, [sp, #24]
 801c0fc:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 801c100:	f7f9 fd3e 	bl	8015b80 <uitoa>
 801c104:	47a8      	blx	r5
            print_uito2a("-", time.tm_mon + 1);
 801c106:	4d13      	ldr	r5, [pc, #76]	@ (801c154 <report_time+0x7c>)
 801c108:	9905      	ldr	r1, [sp, #20]
 801c10a:	3101      	adds	r1, #1
 801c10c:	4628      	mov	r0, r5
 801c10e:	f7fc fc15 	bl	801893c <print_uito2a>
            print_uito2a("-", time.tm_mday);
 801c112:	9904      	ldr	r1, [sp, #16]
 801c114:	4628      	mov	r0, r5
 801c116:	f7fc fc11 	bl	801893c <print_uito2a>
            print_uito2a("T", time.tm_hour);
 801c11a:	9903      	ldr	r1, [sp, #12]
 801c11c:	480e      	ldr	r0, [pc, #56]	@ (801c158 <report_time+0x80>)
 801c11e:	f7fc fc0d 	bl	801893c <print_uito2a>
            print_uito2a(":", time.tm_min);
 801c122:	4d0e      	ldr	r5, [pc, #56]	@ (801c15c <report_time+0x84>)
 801c124:	9902      	ldr	r1, [sp, #8]
 801c126:	4628      	mov	r0, r5
 801c128:	f7fc fc08 	bl	801893c <print_uito2a>
            print_uito2a(":", time.tm_sec);
 801c12c:	9901      	ldr	r1, [sp, #4]
 801c12e:	4628      	mov	r0, r5
 801c130:	f7fc fc04 	bl	801893c <print_uito2a>
            hal.stream.write("]" ASCII_EOL);
 801c134:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801c138:	4809      	ldr	r0, [pc, #36]	@ (801c160 <report_time+0x88>)
 801c13a:	4798      	blx	r3
    return ok ? Status_OK : Status_InvalidStatement;
 801c13c:	2000      	movs	r0, #0
}
 801c13e:	b00b      	add	sp, #44	@ 0x2c
 801c140:	bd30      	pop	{r4, r5, pc}
    return ok ? Status_OK : Status_InvalidStatement;
 801c142:	2003      	movs	r0, #3
 801c144:	e7fb      	b.n	801c13e <report_time+0x66>
 801c146:	2003      	movs	r0, #3
}
 801c148:	4770      	bx	lr
 801c14a:	bf00      	nop
 801c14c:	200018dc 	.word	0x200018dc
 801c150:	0802c90c 	.word	0x0802c90c
 801c154:	0802c110 	.word	0x0802c110
 801c158:	0802c100 	.word	0x0802c100
 801c15c:	0802c49c 	.word	0x0802c49c
 801c160:	0802c134 	.word	0x0802c134

0801c164 <report_spindles>:

status_code_t report_spindles (bool machine_readable)
{
 801c164:	b510      	push	{r4, lr}
 801c166:	4604      	mov	r4, r0
    if(!spindle_enumerate_spindles(report_spindle, (void *)machine_readable) && !machine_readable)
 801c168:	4601      	mov	r1, r0
 801c16a:	4806      	ldr	r0, [pc, #24]	@ (801c184 <report_spindles+0x20>)
 801c16c:	f002 facc 	bl	801e708 <spindle_enumerate_spindles>
 801c170:	b928      	cbnz	r0, 801c17e <report_spindles+0x1a>
 801c172:	b924      	cbnz	r4, 801c17e <report_spindles+0x1a>
        hal.stream.write("No spindles registered." ASCII_EOL);
 801c174:	4b04      	ldr	r3, [pc, #16]	@ (801c188 <report_spindles+0x24>)
 801c176:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801c17a:	4804      	ldr	r0, [pc, #16]	@ (801c18c <report_spindles+0x28>)
 801c17c:	4798      	blx	r3

    return Status_OK;
}
 801c17e:	2000      	movs	r0, #0
 801c180:	bd10      	pop	{r4, pc}
 801c182:	bf00      	nop
 801c184:	08018971 	.word	0x08018971
 801c188:	200018dc 	.word	0x200018dc
 801c18c:	0802c914 	.word	0x0802c914

0801c190 <report_pid_log>:

void report_pid_log (void)
{
 801c190:	b508      	push	{r3, lr}
    } while(idx != sys.pid_log.idx);

    hal.stream.write("]" ASCII_EOL);
    grbl.report.status_message(Status_OK);
#else
    grbl.report.status_message(Status_GcodeUnsupportedCommand);
 801c192:	4b02      	ldr	r3, [pc, #8]	@ (801c19c <report_pid_log+0xc>)
 801c194:	689b      	ldr	r3, [r3, #8]
 801c196:	2014      	movs	r0, #20
 801c198:	4798      	blx	r3
#endif
}
 801c19a:	bd08      	pop	{r3, pc}
 801c19c:	20001ac4 	.word	0x20001ac4

0801c1a0 <report_init_fns>:
    .alarm_message = report_alarm_message,
    .setting = report_setting
};

void report_init_fns (void)
{
 801c1a0:	b538      	push	{r3, r4, r5, lr}
    memcpy(&grbl.report, &report_fns, sizeof(report_t));
 801c1a2:	4d07      	ldr	r5, [pc, #28]	@ (801c1c0 <report_init_fns+0x20>)
 801c1a4:	46ac      	mov	ip, r5
 801c1a6:	4c07      	ldr	r4, [pc, #28]	@ (801c1c4 <report_init_fns+0x24>)
 801c1a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c1aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c1ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 801c1b2:	e88c 0003 	stmia.w	ip, {r0, r1}

    if(grbl.on_report_handlers_init)
 801c1b6:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 801c1b8:	b103      	cbz	r3, 801c1bc <report_init_fns+0x1c>
        grbl.on_report_handlers_init();
 801c1ba:	4798      	blx	r3
}
 801c1bc:	bd38      	pop	{r3, r4, r5, pc}
 801c1be:	bf00      	nop
 801c1c0:	20001ac4 	.word	0x20001ac4
 801c1c4:	0802c944 	.word	0x0802c944

0801c1c8 <group_is_available>:
};

static bool group_is_available (const setting_group_detail_t *group)
{
    return true;
}
 801c1c8:	2001      	movs	r0, #1
 801c1ca:	4770      	bx	lr

0801c1cc <restore_override_backup>:

static void restore_override_backup (void)
{
    uint_fast8_t idx = N_AXIS;

    if(override_backup.valid) do {
 801c1cc:	4b08      	ldr	r3, [pc, #32]	@ (801c1f0 <restore_override_backup+0x24>)
 801c1ce:	781b      	ldrb	r3, [r3, #0]
 801c1d0:	b16b      	cbz	r3, 801c1ee <restore_override_backup+0x22>
    uint_fast8_t idx = N_AXIS;
 801c1d2:	2303      	movs	r3, #3
        idx--;
 801c1d4:	3b01      	subs	r3, #1
        settings.axis[idx].acceleration = override_backup.acceleration[idx];
 801c1d6:	4a06      	ldr	r2, [pc, #24]	@ (801c1f0 <restore_override_backup+0x24>)
 801c1d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801c1dc:	6850      	ldr	r0, [r2, #4]
 801c1de:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801c1e2:	0091      	lsls	r1, r2, #2
 801c1e4:	4a03      	ldr	r2, [pc, #12]	@ (801c1f4 <restore_override_backup+0x28>)
 801c1e6:	440a      	add	r2, r1
 801c1e8:	6390      	str	r0, [r2, #56]	@ 0x38
    } while(idx);
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d1f2      	bne.n	801c1d4 <restore_override_backup+0x8>
}
 801c1ee:	4770      	bx	lr
 801c1f0:	2000227c 	.word	0x2000227c
 801c1f4:	200022f4 	.word	0x200022f4

0801c1f8 <set_ganged_dir_invert>:
    return Status_OK;
}

static status_code_t set_ganged_dir_invert (setting_id_t id, uint_fast16_t int_value)
{
    if(!hal.stepper.get_ganged)
 801c1f8:	4b08      	ldr	r3, [pc, #32]	@ (801c21c <set_ganged_dir_invert+0x24>)
 801c1fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801c1fe:	b15b      	cbz	r3, 801c218 <set_ganged_dir_invert+0x20>
{
 801c200:	b510      	push	{r4, lr}
 801c202:	460c      	mov	r4, r1
        return Status_SettingDisabled;

    settings.steppers.ganged_dir_invert.mask = int_value & hal.stepper.get_ganged(false).mask;
 801c204:	2000      	movs	r0, #0
 801c206:	4798      	blx	r3
 801c208:	b2c0      	uxtb	r0, r0
 801c20a:	ea00 0104 	and.w	r1, r0, r4
 801c20e:	4b04      	ldr	r3, [pc, #16]	@ (801c220 <set_ganged_dir_invert+0x28>)
 801c210:	f883 10ea 	strb.w	r1, [r3, #234]	@ 0xea

    return Status_OK;
 801c214:	2000      	movs	r0, #0
}
 801c216:	bd10      	pop	{r4, pc}
        return Status_SettingDisabled;
 801c218:	2035      	movs	r0, #53	@ 0x35
}
 801c21a:	4770      	bx	lr
 801c21c:	200018dc 	.word	0x200018dc
 801c220:	200022f4 	.word	0x200022f4

0801c224 <set_stepper_deenergize_mask>:

static status_code_t set_stepper_deenergize_mask (setting_id_t id, uint_fast16_t int_value)
{
 801c224:	b508      	push	{r3, lr}
    settings.steppers.deenergize.mask = int_value;
 801c226:	4b05      	ldr	r3, [pc, #20]	@ (801c23c <set_stepper_deenergize_mask+0x18>)
 801c228:	f883 10ec 	strb.w	r1, [r3, #236]	@ 0xec

    hal.stepper.enable(settings.steppers.deenergize);
 801c22c:	4a04      	ldr	r2, [pc, #16]	@ (801c240 <set_stepper_deenergize_mask+0x1c>)
 801c22e:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801c232:	b2c8      	uxtb	r0, r1
 801c234:	4790      	blx	r2

    return Status_OK;
}
 801c236:	2000      	movs	r0, #0
 801c238:	bd08      	pop	{r3, pc}
 801c23a:	bf00      	nop
 801c23c:	200022f4 	.word	0x200022f4
 801c240:	200018dc 	.word	0x200018dc

0801c244 <set_report_interval>:

static status_code_t set_report_interval (setting_id_t setting, uint_fast16_t int_value)
{
    if((settings.report_interval = int_value) == 0)
 801c244:	b289      	uxth	r1, r1
 801c246:	4b05      	ldr	r3, [pc, #20]	@ (801c25c <set_report_interval+0x18>)
 801c248:	8299      	strh	r1, [r3, #20]
 801c24a:	b921      	cbnz	r1, 801c256 <set_report_interval+0x12>
        sys.flags.auto_reporting = Off;
 801c24c:	4b04      	ldr	r3, [pc, #16]	@ (801c260 <set_report_interval+0x1c>)
 801c24e:	7dda      	ldrb	r2, [r3, #23]
 801c250:	f36f 0241 	bfc	r2, #1, #1
 801c254:	75da      	strb	r2, [r3, #23]

    return Status_OK;
}
 801c256:	2000      	movs	r0, #0
 801c258:	4770      	bx	lr
 801c25a:	bf00      	nop
 801c25c:	200022f4 	.word	0x200022f4
 801c260:	20001bbc 	.word	0x20001bbc

0801c264 <set_report_mask>:

static status_code_t set_report_mask (setting_id_t id, uint_fast16_t int_value)
{
#if COMPATIBILITY_LEVEL <= 1
    settings.status_report.mask = int_value;
 801c264:	4b02      	ldr	r3, [pc, #8]	@ (801c270 <set_report_mask+0xc>)
 801c266:	f8a3 10fc 	strh.w	r1, [r3, #252]	@ 0xfc
    int_value &= 0b11;
    settings.status_report.mask = (settings.status_report.mask & ~0b11) | int_value;
#endif

    return Status_OK;
}
 801c26a:	2000      	movs	r0, #0
 801c26c:	4770      	bx	lr
 801c26e:	bf00      	nop
 801c270:	200022f4 	.word	0x200022f4

0801c274 <set_pwm_mode>:
    return Status_OK;
}

static status_code_t set_pwm_mode (setting_id_t id, uint_fast16_t int_value)
{
    settings.spindle.flags.enable_rpm_controlled = int_value != 0;
 801c274:	3900      	subs	r1, #0
 801c276:	bf18      	it	ne
 801c278:	2101      	movne	r1, #1
 801c27a:	4b04      	ldr	r3, [pc, #16]	@ (801c28c <set_pwm_mode+0x18>)
 801c27c:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801c280:	f361 0200 	bfi	r2, r1, #0, #1
 801c284:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7

    return Status_OK;
}
 801c288:	2000      	movs	r0, #0
 801c28a:	4770      	bx	lr
 801c28c:	200022f4 	.word	0x200022f4

0801c290 <set_pwm_options>:

static status_code_t set_pwm_options (setting_id_t id, uint_fast16_t int_value)
{
    if(int_value & 0x001) {
 801c290:	f011 0f01 	tst.w	r1, #1
 801c294:	d018      	beq.n	801c2c8 <set_pwm_options+0x38>
        if(int_value > 0b111)
 801c296:	2907      	cmp	r1, #7
 801c298:	d829      	bhi.n	801c2ee <set_pwm_options+0x5e>
            return Status_SettingValueOutOfRange;
        settings.spindle.flags.pwm_disable = Off;
 801c29a:	4b16      	ldr	r3, [pc, #88]	@ (801c2f4 <set_pwm_options+0x64>)
 801c29c:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801c2a0:	f36f 12c7 	bfc	r2, #7, #1
 801c2a4:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        settings.spindle.flags.enable_rpm_controlled = !!(int_value & 0b010);
 801c2a8:	f3c1 0040 	ubfx	r0, r1, #1, #1
 801c2ac:	b2d2      	uxtb	r2, r2
 801c2ae:	f360 0200 	bfi	r2, r0, #0, #1
 801c2b2:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        settings.spindle.flags.laser_mode_disable = !!(int_value & 0b100);
 801c2b6:	f3c1 0180 	ubfx	r1, r1, #2, #1
 801c2ba:	b2d2      	uxtb	r2, r2
 801c2bc:	f361 0241 	bfi	r2, r1, #1, #1
 801c2c0:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    } else {
        settings.spindle.flags.pwm_disable = On;
        settings.spindle.flags.enable_rpm_controlled = settings.spindle.flags.laser_mode_disable = Off;
    }

    return Status_OK;
 801c2c4:	2000      	movs	r0, #0
 801c2c6:	4770      	bx	lr
        settings.spindle.flags.pwm_disable = On;
 801c2c8:	4b0a      	ldr	r3, [pc, #40]	@ (801c2f4 <set_pwm_options+0x64>)
 801c2ca:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801c2ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801c2d2:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        settings.spindle.flags.enable_rpm_controlled = settings.spindle.flags.laser_mode_disable = Off;
 801c2d6:	b2d2      	uxtb	r2, r2
 801c2d8:	f36f 0241 	bfc	r2, #1, #1
 801c2dc:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
 801c2e0:	b2d2      	uxtb	r2, r2
 801c2e2:	f36f 0200 	bfc	r2, #0, #1
 801c2e6:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    return Status_OK;
 801c2ea:	2000      	movs	r0, #0
 801c2ec:	4770      	bx	lr
            return Status_SettingValueOutOfRange;
 801c2ee:	2034      	movs	r0, #52	@ 0x34
}
 801c2f0:	4770      	bx	lr
 801c2f2:	bf00      	nop
 801c2f4:	200022f4 	.word	0x200022f4

0801c2f8 <tmp_set_soft_limits>:
    return Status_OK;
}

static void tmp_set_soft_limits (void)
{
    sys.soft_limits.mask = 0;
 801c2f8:	4b11      	ldr	r3, [pc, #68]	@ (801c340 <tmp_set_soft_limits+0x48>)
 801c2fa:	2200      	movs	r2, #0
 801c2fc:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95

    if(settings.limits.flags.soft_enabled) {
 801c300:	4b10      	ldr	r3, [pc, #64]	@ (801c344 <tmp_set_soft_limits+0x4c>)
 801c302:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 801c306:	f013 0f02 	tst.w	r3, #2
 801c30a:	d018      	beq.n	801c33e <tmp_set_soft_limits+0x46>
        uint_fast8_t idx = N_AXIS;
 801c30c:	2303      	movs	r3, #3
 801c30e:	e000      	b.n	801c312 <tmp_set_soft_limits+0x1a>
        do {
            if(settings.axis[--idx].max_travel < -0.0f)
                bit_true(sys.soft_limits.mask, bit(idx));
        } while(idx);
 801c310:	b1ab      	cbz	r3, 801c33e <tmp_set_soft_limits+0x46>
            if(settings.axis[--idx].max_travel < -0.0f)
 801c312:	3b01      	subs	r3, #1
 801c314:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801c318:	0091      	lsls	r1, r2, #2
 801c31a:	4a0a      	ldr	r2, [pc, #40]	@ (801c344 <tmp_set_soft_limits+0x4c>)
 801c31c:	440a      	add	r2, r1
 801c31e:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 801c322:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c32a:	d5f1      	bpl.n	801c310 <tmp_set_soft_limits+0x18>
                bit_true(sys.soft_limits.mask, bit(idx));
 801c32c:	4804      	ldr	r0, [pc, #16]	@ (801c340 <tmp_set_soft_limits+0x48>)
 801c32e:	f890 2095 	ldrb.w	r2, [r0, #149]	@ 0x95
 801c332:	2101      	movs	r1, #1
 801c334:	4099      	lsls	r1, r3
 801c336:	430a      	orrs	r2, r1
 801c338:	f880 2095 	strb.w	r2, [r0, #149]	@ 0x95
 801c33c:	e7e8      	b.n	801c310 <tmp_set_soft_limits+0x18>
    }
}
 801c33e:	4770      	bx	lr
 801c340:	20001bbc 	.word	0x20001bbc
 801c344:	200022f4 	.word	0x200022f4

0801c348 <set_soft_limits_enable>:

static status_code_t set_soft_limits_enable (setting_id_t id, uint_fast16_t int_value)
{
 801c348:	b508      	push	{r3, lr}
    if(int_value && !settings.homing.flags.enabled)
 801c34a:	460b      	mov	r3, r1
 801c34c:	b129      	cbz	r1, 801c35a <set_soft_limits_enable+0x12>
 801c34e:	4a0b      	ldr	r2, [pc, #44]	@ (801c37c <set_soft_limits_enable+0x34>)
 801c350:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 801c354:	f012 0f01 	tst.w	r2, #1
 801c358:	d00d      	beq.n	801c376 <set_soft_limits_enable+0x2e>
        return Status_SoftLimitError;

    settings.limits.flags.soft_enabled = int_value != 0;
 801c35a:	3b00      	subs	r3, #0
 801c35c:	bf18      	it	ne
 801c35e:	2301      	movne	r3, #1
 801c360:	4a06      	ldr	r2, [pc, #24]	@ (801c37c <set_soft_limits_enable+0x34>)
 801c362:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 801c366:	f363 0141 	bfi	r1, r3, #1, #1
 801c36a:	f882 1124 	strb.w	r1, [r2, #292]	@ 0x124

    tmp_set_soft_limits();
 801c36e:	f7ff ffc3 	bl	801c2f8 <tmp_set_soft_limits>

    return Status_OK;
 801c372:	2000      	movs	r0, #0
}
 801c374:	bd08      	pop	{r3, pc}
        return Status_SoftLimitError;
 801c376:	200a      	movs	r0, #10
 801c378:	e7fc      	b.n	801c374 <set_soft_limits_enable+0x2c>
 801c37a:	bf00      	nop
 801c37c:	200022f4 	.word	0x200022f4

0801c380 <set_estop_unlock>:

static status_code_t set_estop_unlock (setting_id_t id, uint_fast16_t int_value)
{
    if(!hal.signals_cap.e_stop)
 801c380:	4b09      	ldr	r3, [pc, #36]	@ (801c3a8 <set_estop_unlock+0x28>)
 801c382:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801c386:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801c38a:	d00b      	beq.n	801c3a4 <set_estop_unlock+0x24>
        return Status_SettingDisabled;

    settings.flags.no_unlock_after_estop = int_value == 0;
 801c38c:	fab1 f181 	clz	r1, r1
 801c390:	0949      	lsrs	r1, r1, #5
 801c392:	4b06      	ldr	r3, [pc, #24]	@ (801c3ac <set_estop_unlock+0x2c>)
 801c394:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 801c398:	f361 12c7 	bfi	r2, r1, #7, #1
 801c39c:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    return Status_OK;
 801c3a0:	2000      	movs	r0, #0
 801c3a2:	4770      	bx	lr
        return Status_SettingDisabled;
 801c3a4:	2035      	movs	r0, #53	@ 0x35
}
 801c3a6:	4770      	bx	lr
 801c3a8:	200018dc 	.word	0x200018dc
 801c3ac:	200022f4 	.word	0x200022f4

0801c3b0 <set_offset_lock>:

#if COMPATIBILITY_LEVEL <= 1

static status_code_t set_offset_lock (setting_id_t id, uint_fast16_t int_value)
{
    settings.parking.flags.offset_lock = int_value & 0b111; // TODO: remove
 801c3b0:	f001 0107 	and.w	r1, r1, #7
 801c3b4:	4a08      	ldr	r2, [pc, #32]	@ (801c3d8 <set_offset_lock+0x28>)
 801c3b6:	f892 3128 	ldrb.w	r3, [r2, #296]	@ 0x128
 801c3ba:	f361 1347 	bfi	r3, r1, #5, #3
 801c3be:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
    settings.offset_lock.mask &= ~0b111; // TODO: remove
 801c3c2:	f892 3102 	ldrb.w	r3, [r2, #258]	@ 0x102
 801c3c6:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801c3ca:	f882 3102 	strb.w	r3, [r2, #258]	@ 0x102
    settings.offset_lock.mask |= settings.parking.flags.offset_lock;
 801c3ce:	430b      	orrs	r3, r1
 801c3d0:	f882 3102 	strb.w	r3, [r2, #258]	@ 0x102

    return Status_OK;
}
 801c3d4:	2000      	movs	r0, #0
 801c3d6:	4770      	bx	lr
 801c3d8:	200022f4 	.word	0x200022f4

0801c3dc <set_hard_limits_enable>:
        sys.hard_limits.mask &= ~settings.steppers.is_rotary.mask;
  #endif
}

static status_code_t set_hard_limits_enable (setting_id_t id, uint_fast16_t int_value)
{
 801c3dc:	b510      	push	{r4, lr}
    if((settings.limits.flags.hard_enabled = bit_istrue(int_value, bit(0)))) {
 801c3de:	f001 0001 	and.w	r0, r1, #1
 801c3e2:	4b16      	ldr	r3, [pc, #88]	@ (801c43c <set_hard_limits_enable+0x60>)
 801c3e4:	f893 2124 	ldrb.w	r2, [r3, #292]	@ 0x124
 801c3e8:	f360 0200 	bfi	r2, r0, #0, #1
 801c3ec:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
 801c3f0:	b1b8      	cbz	r0, 801c422 <set_hard_limits_enable+0x46>
#if COMPATIBILITY_LEVEL <= 1
        settings.limits.flags.check_at_init = bit_istrue(int_value, bit(1));
 801c3f2:	f3c1 0140 	ubfx	r1, r1, #1, #1
 801c3f6:	b2d2      	uxtb	r2, r2
 801c3f8:	f361 0282 	bfi	r2, r1, #2, #1
 801c3fc:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
    sys.hard_limits.mask = settings.limits.flags.hard_enabled ? AXES_BITMASK : 0;
 801c400:	4b0e      	ldr	r3, [pc, #56]	@ (801c43c <set_hard_limits_enable+0x60>)
 801c402:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 801c406:	f013 0301 	ands.w	r3, r3, #1
 801c40a:	d000      	beq.n	801c40e <set_hard_limits_enable+0x32>
 801c40c:	2307      	movs	r3, #7
 801c40e:	4a0c      	ldr	r2, [pc, #48]	@ (801c440 <set_hard_limits_enable+0x64>)
 801c410:	f882 3094 	strb.w	r3, [r2, #148]	@ 0x94
#endif
    } else
        settings.limits.flags.check_at_init = settings.limits.flags.hard_disabled_rotary = Off;

    tmp_set_hard_limits();
    hal.limits.enable(settings.limits.flags.hard_enabled, (axes_signals_t){0}); // Change immediately. NOTE: Nice to have but could be problematic later.
 801c414:	4b0b      	ldr	r3, [pc, #44]	@ (801c444 <set_hard_limits_enable+0x68>)
 801c416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c418:	2400      	movs	r4, #0
 801c41a:	4621      	mov	r1, r4
 801c41c:	4798      	blx	r3

    return Status_OK;
}
 801c41e:	4620      	mov	r0, r4
 801c420:	bd10      	pop	{r4, pc}
        settings.limits.flags.check_at_init = settings.limits.flags.hard_disabled_rotary = Off;
 801c422:	4b06      	ldr	r3, [pc, #24]	@ (801c43c <set_hard_limits_enable+0x60>)
 801c424:	f893 2124 	ldrb.w	r2, [r3, #292]	@ 0x124
 801c428:	f36f 1245 	bfc	r2, #5, #1
 801c42c:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
 801c430:	b2d2      	uxtb	r2, r2
 801c432:	f36f 0282 	bfc	r2, #2, #1
 801c436:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
 801c43a:	e7e1      	b.n	801c400 <set_hard_limits_enable+0x24>
 801c43c:	200022f4 	.word	0x200022f4
 801c440:	20001bbc 	.word	0x20001bbc
 801c444:	200018dc 	.word	0x200018dc

0801c448 <set_jog_soft_limited>:

static status_code_t set_jog_soft_limited (setting_id_t id, uint_fast16_t int_value)
{
    if (int_value && !settings.homing.flags.enabled)
 801c448:	460b      	mov	r3, r1
 801c44a:	b129      	cbz	r1, 801c458 <set_jog_soft_limited+0x10>
 801c44c:	4a09      	ldr	r2, [pc, #36]	@ (801c474 <set_jog_soft_limited+0x2c>)
 801c44e:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 801c452:	f012 0f01 	tst.w	r2, #1
 801c456:	d00b      	beq.n	801c470 <set_jog_soft_limited+0x28>
        return Status_SoftLimitError;

    settings.limits.flags.jog_soft_limited = int_value != 0;
 801c458:	3b00      	subs	r3, #0
 801c45a:	bf18      	it	ne
 801c45c:	2301      	movne	r3, #1
 801c45e:	4a05      	ldr	r2, [pc, #20]	@ (801c474 <set_jog_soft_limited+0x2c>)
 801c460:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 801c464:	f363 01c3 	bfi	r1, r3, #3, #1
 801c468:	f882 1124 	strb.w	r1, [r2, #292]	@ 0x124

    return Status_OK;
 801c46c:	2000      	movs	r0, #0
 801c46e:	4770      	bx	lr
        return Status_SoftLimitError;
 801c470:	200a      	movs	r0, #10
}
 801c472:	4770      	bx	lr
 801c474:	200022f4 	.word	0x200022f4

0801c478 <set_homing_enable>:

static status_code_t set_homing_enable (setting_id_t id, uint_fast16_t int_value)
{
    homing_flags_t homing;

    homing.value = int_value;
 801c478:	b28a      	uxth	r2, r1

    if(homing.enabled) {
 801c47a:	f011 0f01 	tst.w	r1, #1
 801c47e:	d02b      	beq.n	801c4d8 <set_homing_enable+0x60>
        settings.homing.flags.override_locks = DEFAULT_HOMING_OVERRIDE_LOCKS;
        settings.homing.flags.keep_on_reset = DEFAULT_HOMING_KEEP_STATUS_ON_RESET;
        settings.homing.flags.use_limit_switches = DEFAULT_HOMING_USE_LIMIT_SWITCHES;
        settings.limits.flags.two_switches = DEFAULT_LIMITS_TWO_SWITCHES_ON_AXES;
#else
        settings.homing.flags.value = int_value & 0b1111;
 801c480:	f001 010f 	and.w	r1, r1, #15
 801c484:	4b1c      	ldr	r3, [pc, #112]	@ (801c4f8 <set_homing_enable+0x80>)
 801c486:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.limits.flags.two_switches = homing.two_switches;
 801c48a:	f3c2 1000 	ubfx	r0, r2, #4, #1
 801c48e:	f893 1124 	ldrb.w	r1, [r3, #292]	@ 0x124
 801c492:	f360 1104 	bfi	r1, r0, #4, #1
 801c496:	f883 1124 	strb.w	r1, [r3, #292]	@ 0x124
        settings.homing.flags.manual = homing.manual;
 801c49a:	f3c2 1040 	ubfx	r0, r2, #5, #1
 801c49e:	f893 1114 	ldrb.w	r1, [r3, #276]	@ 0x114
 801c4a2:	f360 1104 	bfi	r1, r0, #4, #1
 801c4a6:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.homing.flags.override_locks = homing.override_locks;
 801c4aa:	f3c2 1080 	ubfx	r0, r2, #6, #1
 801c4ae:	b2c9      	uxtb	r1, r1
 801c4b0:	f360 1145 	bfi	r1, r0, #5, #1
 801c4b4:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.homing.flags.keep_on_reset = homing.keep_on_reset;
 801c4b8:	f3c2 10c0 	ubfx	r0, r2, #7, #1
 801c4bc:	b2c9      	uxtb	r1, r1
 801c4be:	f360 1186 	bfi	r1, r0, #6, #1
 801c4c2:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.homing.flags.use_limit_switches = homing.use_limit_switches;
 801c4c6:	f3c2 2200 	ubfx	r2, r2, #8, #1
 801c4ca:	b2c9      	uxtb	r1, r1
 801c4cc:	f362 11c7 	bfi	r1, r2, #7, #1
 801c4d0:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.limits.flags.soft_enabled = Off; // Force disable soft-limits.
        settings.limits.flags.jog_soft_limited = Off;
    }

    return Status_OK;
}
 801c4d4:	2000      	movs	r0, #0
 801c4d6:	4770      	bx	lr
        settings.homing.flags.value = 0;
 801c4d8:	4b07      	ldr	r3, [pc, #28]	@ (801c4f8 <set_homing_enable+0x80>)
 801c4da:	2200      	movs	r2, #0
 801c4dc:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
        settings.limits.flags.soft_enabled = Off; // Force disable soft-limits.
 801c4e0:	f893 1124 	ldrb.w	r1, [r3, #292]	@ 0x124
 801c4e4:	f362 0141 	bfi	r1, r2, #1, #1
 801c4e8:	f883 1124 	strb.w	r1, [r3, #292]	@ 0x124
        settings.limits.flags.jog_soft_limited = Off;
 801c4ec:	b2c9      	uxtb	r1, r1
 801c4ee:	f362 01c3 	bfi	r1, r2, #3, #1
 801c4f2:	f883 1124 	strb.w	r1, [r3, #292]	@ 0x124
 801c4f6:	e7ed      	b.n	801c4d4 <set_homing_enable+0x5c>
 801c4f8:	200022f4 	.word	0x200022f4

0801c4fc <set_enable_legacy_rt_commands>:

static status_code_t set_enable_legacy_rt_commands (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.legacy_rt_commands = int_value != 0;
 801c4fc:	3900      	subs	r1, #0
 801c4fe:	bf18      	it	ne
 801c500:	2101      	movne	r1, #1
 801c502:	4b04      	ldr	r3, [pc, #16]	@ (801c514 <set_enable_legacy_rt_commands+0x18>)
 801c504:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801c508:	f361 1286 	bfi	r2, r1, #6, #1
 801c50c:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801c510:	2000      	movs	r0, #0
 801c512:	4770      	bx	lr
 801c514:	200022f4 	.word	0x200022f4

0801c518 <set_parking_enable>:

#ifndef NO_SAFETY_DOOR_SUPPORT

static status_code_t set_parking_enable (setting_id_t id, uint_fast16_t int_value)
{
    settings.parking.flags.value = bit_istrue(int_value, bit(0)) ? (int_value & 0x07) : 0;
 801c518:	f011 0f01 	tst.w	r1, #1
 801c51c:	d006      	beq.n	801c52c <set_parking_enable+0x14>
 801c51e:	f001 0107 	and.w	r1, r1, #7
 801c522:	4b03      	ldr	r3, [pc, #12]	@ (801c530 <set_parking_enable+0x18>)
 801c524:	f883 1128 	strb.w	r1, [r3, #296]	@ 0x128

    return Status_OK;
}
 801c528:	2000      	movs	r0, #0
 801c52a:	4770      	bx	lr
    settings.parking.flags.value = bit_istrue(int_value, bit(0)) ? (int_value & 0x07) : 0;
 801c52c:	2100      	movs	r1, #0
 801c52e:	e7f8      	b.n	801c522 <set_parking_enable+0xa>
 801c530:	200022f4 	.word	0x200022f4

0801c534 <set_restore_overrides>:

static status_code_t set_restore_overrides (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.restore_overrides = int_value != 0;
 801c534:	3900      	subs	r1, #0
 801c536:	bf18      	it	ne
 801c538:	2101      	movne	r1, #1
 801c53a:	4b04      	ldr	r3, [pc, #16]	@ (801c54c <set_restore_overrides+0x18>)
 801c53c:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801c540:	f361 0241 	bfi	r2, r1, #1, #1
 801c544:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801c548:	2000      	movs	r0, #0
 801c54a:	4770      	bx	lr
 801c54c:	200022f4 	.word	0x200022f4

0801c550 <set_sleep_enable>:

#endif // NO_SAFETY_DOOR_SUPPORT

static status_code_t set_sleep_enable (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.sleep_enable = int_value != 0;
 801c550:	3900      	subs	r1, #0
 801c552:	bf18      	it	ne
 801c554:	2101      	movne	r1, #1
 801c556:	4b04      	ldr	r3, [pc, #16]	@ (801c568 <set_sleep_enable+0x18>)
 801c558:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801c55c:	f361 02c3 	bfi	r2, r1, #3, #1
 801c560:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801c564:	2000      	movs	r0, #0
 801c566:	4770      	bx	lr
 801c568:	200022f4 	.word	0x200022f4

0801c56c <set_hold_actions>:

static status_code_t set_hold_actions (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.disable_laser_during_hold = bit_istrue(int_value, bit(0));
 801c56c:	4b07      	ldr	r3, [pc, #28]	@ (801c58c <set_hold_actions+0x20>)
 801c56e:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801c572:	f361 1204 	bfi	r2, r1, #4, #1
 801c576:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
    settings.flags.restore_after_feed_hold = bit_istrue(int_value, bit(1));
 801c57a:	f3c1 0140 	ubfx	r1, r1, #1, #1
 801c57e:	b2d2      	uxtb	r2, r2
 801c580:	f361 12c7 	bfi	r2, r1, #7, #1
 801c584:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801c588:	2000      	movs	r0, #0
 801c58a:	4770      	bx	lr
 801c58c:	200022f4 	.word	0x200022f4

0801c590 <set_g92_disable_persistence>:

#if COMPATIBILITY_LEVEL <= 1
static status_code_t set_g92_disable_persistence (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.g92_is_volatile = int_value != 0;
 801c590:	3900      	subs	r1, #0
 801c592:	bf18      	it	ne
 801c594:	2101      	movne	r1, #1
 801c596:	4b04      	ldr	r3, [pc, #16]	@ (801c5a8 <set_g92_disable_persistence+0x18>)
 801c598:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 801c59c:	f361 0241 	bfi	r2, r1, #1, #1
 801c5a0:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    return Status_OK;
}
 801c5a4:	2000      	movs	r0, #0
 801c5a6:	4770      	bx	lr
 801c5a8:	200022f4 	.word	0x200022f4

0801c5ac <set_force_initialization_alarm>:
#endif

static status_code_t set_force_initialization_alarm (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.force_initialization_alarm = int_value != 0;
 801c5ac:	3900      	subs	r1, #0
 801c5ae:	bf18      	it	ne
 801c5b0:	2101      	movne	r1, #1
 801c5b2:	4b04      	ldr	r3, [pc, #16]	@ (801c5c4 <set_force_initialization_alarm+0x18>)
 801c5b4:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801c5b8:	f361 1245 	bfi	r2, r1, #5, #1
 801c5bc:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801c5c0:	2000      	movs	r0, #0
 801c5c2:	4770      	bx	lr
 801c5c4:	200022f4 	.word	0x200022f4

0801c5c8 <set_probe_allow_feed_override>:

static status_code_t set_probe_allow_feed_override (setting_id_t id, uint_fast16_t int_value)
{
    settings.probe.allow_feed_override = int_value != 0;
 801c5c8:	3900      	subs	r1, #0
 801c5ca:	bf18      	it	ne
 801c5cc:	2101      	movne	r1, #1
 801c5ce:	4b04      	ldr	r3, [pc, #16]	@ (801c5e0 <set_probe_allow_feed_override+0x18>)
 801c5d0:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
 801c5d4:	f361 1204 	bfi	r2, r1, #4, #1
 801c5d8:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

    return Status_OK;
}
 801c5dc:	2000      	movs	r0, #0
 801c5de:	4770      	bx	lr
 801c5e0:	200022f4 	.word	0x200022f4

0801c5e4 <set_tool_change_probing_distance>:
    return Status_OK;
}

static status_code_t set_tool_change_probing_distance (setting_id_t id, float value)
{
    if(hal.driver_cap.atc)
 801c5e4:	4b05      	ldr	r3, [pc, #20]	@ (801c5fc <set_tool_change_probing_distance+0x18>)
 801c5e6:	f893 01da 	ldrb.w	r0, [r3, #474]	@ 0x1da
 801c5ea:	f010 0002 	ands.w	r0, r0, #2
 801c5ee:	d103      	bne.n	801c5f8 <set_tool_change_probing_distance+0x14>
        return Status_InvalidStatement;

    settings.tool_change.probing_distance = value;
 801c5f0:	4b03      	ldr	r3, [pc, #12]	@ (801c600 <set_tool_change_probing_distance+0x1c>)
 801c5f2:	ed83 0a0a 	vstr	s0, [r3, #40]	@ 0x28

    return Status_OK;
 801c5f6:	4770      	bx	lr
        return Status_InvalidStatement;
 801c5f8:	2003      	movs	r0, #3
}
 801c5fa:	4770      	bx	lr
 801c5fc:	200018dc 	.word	0x200018dc
 801c600:	200022f4 	.word	0x200022f4

0801c604 <set_tool_restore_pos>:

static status_code_t set_tool_restore_pos (setting_id_t id, uint_fast16_t int_value)
{
    if(hal.driver_cap.atc)
 801c604:	4b09      	ldr	r3, [pc, #36]	@ (801c62c <set_tool_restore_pos+0x28>)
 801c606:	f893 01da 	ldrb.w	r0, [r3, #474]	@ 0x1da
 801c60a:	f010 0002 	ands.w	r0, r0, #2
 801c60e:	d10a      	bne.n	801c626 <set_tool_restore_pos+0x22>
        return Status_InvalidStatement;

    settings.flags.no_restore_position_after_M6 = int_value == 0;
 801c610:	fab1 f181 	clz	r1, r1
 801c614:	0949      	lsrs	r1, r1, #5
 801c616:	4b06      	ldr	r3, [pc, #24]	@ (801c630 <set_tool_restore_pos+0x2c>)
 801c618:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 801c61c:	f361 1286 	bfi	r2, r1, #6, #1
 801c620:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    return Status_OK;
 801c624:	4770      	bx	lr
        return Status_InvalidStatement;
 801c626:	2003      	movs	r0, #3
}
 801c628:	4770      	bx	lr
 801c62a:	bf00      	nop
 801c62c:	200018dc 	.word	0x200018dc
 801c630:	200022f4 	.word	0x200022f4

0801c634 <normalize_id>:

#endif

inline static setting_id_t normalize_id (setting_id_t id)
{
    if((id > Setting_AxisSettingsBase && id <= Setting_AxisSettingsMax) ||
 801c634:	f1a0 0365 	sub.w	r3, r0, #101	@ 0x65
 801c638:	b29b      	uxth	r3, r3
 801c63a:	2b5c      	cmp	r3, #92	@ 0x5c
 801c63c:	d904      	bls.n	801c648 <normalize_id+0x14>
       (id > Setting_AxisSettingsBase2 && id <= Setting_AxisSettingsMax2))
 801c63e:	f1a0 03c9 	sub.w	r3, r0, #201	@ 0xc9
 801c642:	b29b      	uxth	r3, r3
    if((id > Setting_AxisSettingsBase && id <= Setting_AxisSettingsMax) ||
 801c644:	2b5c      	cmp	r3, #92	@ 0x5c
 801c646:	d80b      	bhi.n	801c660 <normalize_id+0x2c>
        id -= id % AXIS_SETTINGS_INCREMENT;
 801c648:	4b24      	ldr	r3, [pc, #144]	@ (801c6dc <normalize_id+0xa8>)
 801c64a:	fba3 2300 	umull	r2, r3, r3, r0
 801c64e:	08db      	lsrs	r3, r3, #3
 801c650:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c654:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 801c658:	b29b      	uxth	r3, r3
 801c65a:	1ac0      	subs	r0, r0, r3
 801c65c:	b280      	uxth	r0, r0
 801c65e:	4770      	bx	lr
    else if(id > Setting_EncoderSettingsBase && id <= Setting_EncoderSettingsMax)
 801c660:	f2a0 1391 	subw	r3, r0, #401	@ 0x191
 801c664:	b29b      	uxth	r3, r3
 801c666:	2b30      	cmp	r3, #48	@ 0x30
 801c668:	d80c      	bhi.n	801c684 <normalize_id+0x50>
        id = (setting_id_t)(Setting_EncoderSettingsBase + (id % ENCODER_SETTINGS_INCREMENT));
 801c66a:	4b1c      	ldr	r3, [pc, #112]	@ (801c6dc <normalize_id+0xa8>)
 801c66c:	fba3 2300 	umull	r2, r3, r3, r0
 801c670:	08db      	lsrs	r3, r3, #3
 801c672:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c676:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 801c67a:	b280      	uxth	r0, r0
 801c67c:	f500 70c8 	add.w	r0, r0, #400	@ 0x190
 801c680:	b280      	uxth	r0, r0
 801c682:	4770      	bx	lr
    else if(id > Setting_ModbusTCPBase && id <= Setting_ModbusTCPMax)
 801c684:	f2a0 2359 	subw	r3, r0, #601	@ 0x259
 801c688:	b29b      	uxth	r3, r3
 801c68a:	2b26      	cmp	r3, #38	@ 0x26
 801c68c:	d80b      	bhi.n	801c6a6 <normalize_id+0x72>
        id = (setting_id_t)(Setting_ModbusTCPBase + (id % MODBUS_TCP_SETTINGS_INCREMENT));
 801c68e:	4b13      	ldr	r3, [pc, #76]	@ (801c6dc <normalize_id+0xa8>)
 801c690:	fba3 2300 	umull	r2, r3, r3, r0
 801c694:	089b      	lsrs	r3, r3, #2
 801c696:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c69a:	1ac0      	subs	r0, r0, r3
 801c69c:	b280      	uxth	r0, r0
 801c69e:	f500 7016 	add.w	r0, r0, #600	@ 0x258
 801c6a2:	b280      	uxth	r0, r0
 801c6a4:	4770      	bx	lr
    else if((id > Setting_Macro0 && id <= Setting_Macro9) || (id > Setting_MacroPort0 && id <= Setting_MacroPort9) || (id > Setting_ButtonAction0 && id <= Setting_ButtonAction9))
 801c6a6:	f2a0 13eb 	subw	r3, r0, #491	@ 0x1eb
 801c6aa:	b29b      	uxth	r3, r3
 801c6ac:	2b08      	cmp	r3, #8
 801c6ae:	d909      	bls.n	801c6c4 <normalize_id+0x90>
 801c6b0:	f2a0 13f5 	subw	r3, r0, #501	@ 0x1f5
 801c6b4:	b29b      	uxth	r3, r3
 801c6b6:	2b08      	cmp	r3, #8
 801c6b8:	d904      	bls.n	801c6c4 <normalize_id+0x90>
 801c6ba:	f2a0 234f 	subw	r3, r0, #591	@ 0x24f
 801c6be:	b29b      	uxth	r3, r3
 801c6c0:	2b08      	cmp	r3, #8
 801c6c2:	d80a      	bhi.n	801c6da <normalize_id+0xa6>
        id = (setting_id_t)(id - (id % 10));
 801c6c4:	4b05      	ldr	r3, [pc, #20]	@ (801c6dc <normalize_id+0xa8>)
 801c6c6:	fba3 2300 	umull	r2, r3, r3, r0
 801c6ca:	08db      	lsrs	r3, r3, #3
 801c6cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c6d0:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 801c6d4:	b29b      	uxth	r3, r3
 801c6d6:	1ac0      	subs	r0, r0, r3
 801c6d8:	b280      	uxth	r0, r0

    return id;
}
 801c6da:	4770      	bx	lr
 801c6dc:	cccccccd 	.word	0xcccccccd

0801c6e0 <get_int>:

static uint32_t get_int (setting_id_t id)
{
    uint32_t value = 0;

    switch(id) {
 801c6e0:	2841      	cmp	r0, #65	@ 0x41
 801c6e2:	d844      	bhi.n	801c76e <get_int+0x8e>
 801c6e4:	2806      	cmp	r0, #6
 801c6e6:	f0c0 8148 	bcc.w	801c97a <get_int+0x29a>
 801c6ea:	1f83      	subs	r3, r0, #6
 801c6ec:	2b3b      	cmp	r3, #59	@ 0x3b
 801c6ee:	f200 8146 	bhi.w	801c97e <get_int+0x29e>
 801c6f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 801c6f6:	0095      	.short	0x0095
 801c6f8:	009b0144 	.word	0x009b0144
 801c6fc:	009f0081 	.word	0x009f0081
 801c700:	01440144 	.word	0x01440144
 801c704:	00a900a3 	.word	0x00a900a3
 801c708:	00b30144 	.word	0x00b30144
 801c70c:	014400b7 	.word	0x014400b7
 801c710:	00c100bb 	.word	0x00c100bb
 801c714:	00dd00c7 	.word	0x00dd00c7
 801c718:	01440144 	.word	0x01440144
 801c71c:	01440144 	.word	0x01440144
 801c720:	01440144 	.word	0x01440144
 801c724:	01440144 	.word	0x01440144
 801c728:	00920144 	.word	0x00920144
 801c72c:	01440144 	.word	0x01440144
 801c730:	01440144 	.word	0x01440144
 801c734:	014400f9 	.word	0x014400f9
 801c738:	00d700fd 	.word	0x00d700fd
 801c73c:	01440103 	.word	0x01440103
 801c740:	01070144 	.word	0x01070144
 801c744:	01070107 	.word	0x01070107
 801c748:	01070107 	.word	0x01070107
 801c74c:	01440107 	.word	0x01440107
 801c750:	01440144 	.word	0x01440144
 801c754:	01440144 	.word	0x01440144
 801c758:	01440144 	.word	0x01440144
 801c75c:	01440144 	.word	0x01440144
 801c760:	010d0144 	.word	0x010d0144
 801c764:	01130144 	.word	0x01130144
 801c768:	01230119 	.word	0x01230119
 801c76c:	0129      	.short	0x0129
 801c76e:	f240 13e1 	movw	r3, #481	@ 0x1e1
 801c772:	4298      	cmp	r0, r3
 801c774:	f000 80f8 	beq.w	801c968 <get_int+0x288>
 801c778:	f5b0 7ff1 	cmp.w	r0, #482	@ 0x1e2
 801c77c:	d30c      	bcc.n	801c798 <get_int+0xb8>
 801c77e:	f5b0 7ff3 	cmp.w	r0, #486	@ 0x1e6
 801c782:	f000 80f4 	beq.w	801c96e <get_int+0x28e>
 801c786:	f240 2307 	movw	r3, #519	@ 0x207
 801c78a:	4298      	cmp	r0, r3
 801c78c:	d128      	bne.n	801c7e0 <get_int+0x100>
        case Setting_OffsetLock:
            value = settings.offset_lock.mask & 0b111;
            break;

        case Setting_EncoderSpindle:
            value = settings.offset_lock.encoder_spindle;
 801c78e:	4b7f      	ldr	r3, [pc, #508]	@ (801c98c <get_int+0x2ac>)
 801c790:	f893 0102 	ldrb.w	r0, [r3, #258]	@ 0x102
 801c794:	08c0      	lsrs	r0, r0, #3
            break;
 801c796:	4770      	bx	lr
    switch(id) {
 801c798:	f5b0 7fc0 	cmp.w	r0, #384	@ 0x180
 801c79c:	f000 80de 	beq.w	801c95c <get_int+0x27c>
 801c7a0:	d909      	bls.n	801c7b6 <get_int+0xd6>
 801c7a2:	f240 138b 	movw	r3, #395	@ 0x18b
 801c7a6:	4298      	cmp	r0, r3
 801c7a8:	d118      	bne.n	801c7dc <get_int+0xfc>
            value = settings.spindle.flags.type;
 801c7aa:	4b78      	ldr	r3, [pc, #480]	@ (801c98c <get_int+0x2ac>)
 801c7ac:	f893 00e7 	ldrb.w	r0, [r3, #231]	@ 0xe7
 801c7b0:	f3c0 0084 	ubfx	r0, r0, #2, #5
            break;
 801c7b4:	4770      	bx	lr
    switch(id) {
 801c7b6:	f240 1355 	movw	r3, #341	@ 0x155
 801c7ba:	4298      	cmp	r0, r3
 801c7bc:	f000 80ca 	beq.w	801c954 <get_int+0x274>
 801c7c0:	f5b0 7fad 	cmp.w	r0, #346	@ 0x15a
 801c7c4:	d108      	bne.n	801c7d8 <get_int+0xf8>
            value = settings.flags.no_restore_position_after_M6 ? 0 : 1;
 801c7c6:	4b71      	ldr	r3, [pc, #452]	@ (801c98c <get_int+0x2ac>)
 801c7c8:	f893 00ff 	ldrb.w	r0, [r3, #255]	@ 0xff
 801c7cc:	0980      	lsrs	r0, r0, #6
 801c7ce:	f080 0001 	eor.w	r0, r0, #1
 801c7d2:	f000 0001 	and.w	r0, r0, #1
            break;
 801c7d6:	4770      	bx	lr
    switch(id) {
 801c7d8:	2000      	movs	r0, #0
 801c7da:	4770      	bx	lr
 801c7dc:	2000      	movs	r0, #0
 801c7de:	4770      	bx	lr
 801c7e0:	f5b0 7ff2 	cmp.w	r0, #484	@ 0x1e4
 801c7e4:	d106      	bne.n	801c7f4 <get_int+0x114>
            value = settings.flags.no_unlock_after_estop ? 0 : 1;
 801c7e6:	4b69      	ldr	r3, [pc, #420]	@ (801c98c <get_int+0x2ac>)
 801c7e8:	f893 00ff 	ldrb.w	r0, [r3, #255]	@ 0xff
 801c7ec:	43c0      	mvns	r0, r0
 801c7ee:	f3c0 10c0 	ubfx	r0, r0, #7, #1
            break;
 801c7f2:	4770      	bx	lr
    switch(id) {
 801c7f4:	2000      	movs	r0, #0
 801c7f6:	4770      	bx	lr
            value = settings.spindle.flags.pwm_disable ? 0 : (0b001 |
 801c7f8:	4a64      	ldr	r2, [pc, #400]	@ (801c98c <get_int+0x2ac>)
 801c7fa:	f892 30e7 	ldrb.w	r3, [r2, #231]	@ 0xe7
 801c7fe:	f992 20e7 	ldrsb.w	r2, [r2, #231]	@ 0xe7
 801c802:	2a00      	cmp	r2, #0
 801c804:	f2c0 80bd 	blt.w	801c982 <get_int+0x2a2>
                                                              (settings.spindle.flags.enable_rpm_controlled ? 0b010 : 0) |
 801c808:	005b      	lsls	r3, r3, #1
 801c80a:	f003 0002 	and.w	r0, r3, #2
            value = settings.spindle.flags.pwm_disable ? 0 : (0b001 |
 801c80e:	f040 0001 	orr.w	r0, r0, #1
                                                               (settings.spindle.flags.laser_mode_disable ? 0b100 : 0));
 801c812:	f003 0304 	and.w	r3, r3, #4
                                                              (settings.spindle.flags.enable_rpm_controlled ? 0b010 : 0) |
 801c816:	4318      	orrs	r0, r3
 801c818:	4770      	bx	lr
            value = settings.mode;
 801c81a:	4b5c      	ldr	r3, [pc, #368]	@ (801c98c <get_int+0x2ac>)
 801c81c:	7e18      	ldrb	r0, [r3, #24]
            break;
 801c81e:	4770      	bx	lr
            value = settings.probe.invert_probe_pin;
 801c820:	4b5a      	ldr	r3, [pc, #360]	@ (801c98c <get_int+0x2ac>)
 801c822:	f893 0100 	ldrb.w	r0, [r3, #256]	@ 0x100
 801c826:	f000 0001 	and.w	r0, r0, #1
            break;
 801c82a:	4770      	bx	lr
            value = settings.steppers.ganged_dir_invert.mask;
 801c82c:	4b57      	ldr	r3, [pc, #348]	@ (801c98c <get_int+0x2ac>)
 801c82e:	f893 00ea 	ldrb.w	r0, [r3, #234]	@ 0xea
            break;
 801c832:	4770      	bx	lr
            value = settings.status_report.mask;
 801c834:	4b55      	ldr	r3, [pc, #340]	@ (801c98c <get_int+0x2ac>)
 801c836:	f8b3 00fc 	ldrh.w	r0, [r3, #252]	@ 0xfc
            break;
 801c83a:	4770      	bx	lr
            value = settings.flags.report_inches;
 801c83c:	4b53      	ldr	r3, [pc, #332]	@ (801c98c <get_int+0x2ac>)
 801c83e:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801c842:	f000 0001 	and.w	r0, r0, #1
            break;
 801c846:	4770      	bx	lr
            value = settings.control_invert.mask & (hal.signals_cap.mask & ~limits_override.mask);
 801c848:	4b50      	ldr	r3, [pc, #320]	@ (801c98c <get_int+0x2ac>)
 801c84a:	f8b3 006c 	ldrh.w	r0, [r3, #108]	@ 0x6c
 801c84e:	4b50      	ldr	r3, [pc, #320]	@ (801c990 <get_int+0x2b0>)
 801c850:	f8b3 31dc 	ldrh.w	r3, [r3, #476]	@ 0x1dc
 801c854:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801c858:	4018      	ands	r0, r3
            break;
 801c85a:	4770      	bx	lr
            value = settings.spindle.invert.mask;
 801c85c:	4b4b      	ldr	r3, [pc, #300]	@ (801c98c <get_int+0x2ac>)
 801c85e:	f893 00e6 	ldrb.w	r0, [r3, #230]	@ 0xe6
            break;
 801c862:	4770      	bx	lr
            value = settings.control_disable_pullup.mask;
 801c864:	4b49      	ldr	r3, [pc, #292]	@ (801c98c <get_int+0x2ac>)
 801c866:	f8b3 006e 	ldrh.w	r0, [r3, #110]	@ 0x6e
            break;
 801c86a:	4770      	bx	lr
            value = settings.probe.disable_probe_pullup;
 801c86c:	4b47      	ldr	r3, [pc, #284]	@ (801c98c <get_int+0x2ac>)
 801c86e:	f893 0100 	ldrb.w	r0, [r3, #256]	@ 0x100
 801c872:	f3c0 0040 	ubfx	r0, r0, #1, #1
            break;
 801c876:	4770      	bx	lr
            value = settings.limits.flags.soft_enabled;
 801c878:	4b44      	ldr	r3, [pc, #272]	@ (801c98c <get_int+0x2ac>)
 801c87a:	f893 0124 	ldrb.w	r0, [r3, #292]	@ 0x124
 801c87e:	f3c0 0040 	ubfx	r0, r0, #1, #1
            break;
 801c882:	4770      	bx	lr
            value = ((settings.limits.flags.hard_enabled & bit(0)) ? bit(0) |
 801c884:	4b41      	ldr	r3, [pc, #260]	@ (801c98c <get_int+0x2ac>)
 801c886:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
                      (settings.limits.flags.hard_disabled_rotary ? bit(2) : 0) : 0);
 801c88a:	f013 0f01 	tst.w	r3, #1
 801c88e:	d07a      	beq.n	801c986 <get_int+0x2a6>
                     (settings.limits.flags.check_at_init ? bit(1) : 0) |
 801c890:	0858      	lsrs	r0, r3, #1
                      (settings.limits.flags.hard_disabled_rotary ? bit(2) : 0) : 0);
 801c892:	08db      	lsrs	r3, r3, #3
 801c894:	f000 0002 	and.w	r0, r0, #2
 801c898:	f003 0304 	and.w	r3, r3, #4
 801c89c:	4318      	orrs	r0, r3
 801c89e:	f040 0001 	orr.w	r0, r0, #1
 801c8a2:	4770      	bx	lr
            value = settings.limits.flags.jog_soft_limited;
 801c8a4:	4b39      	ldr	r3, [pc, #228]	@ (801c98c <get_int+0x2ac>)
 801c8a6:	f893 0124 	ldrb.w	r0, [r3, #292]	@ 0x124
 801c8aa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
            break;
 801c8ae:	4770      	bx	lr
            homing.value = settings.homing.flags.value & 0b1111;
 801c8b0:	4a36      	ldr	r2, [pc, #216]	@ (801c98c <get_int+0x2ac>)
 801c8b2:	f892 3114 	ldrb.w	r3, [r2, #276]	@ 0x114
 801c8b6:	f003 000f 	and.w	r0, r3, #15
            homing.two_switches = settings.limits.flags.two_switches;
 801c8ba:	f892 2124 	ldrb.w	r2, [r2, #292]	@ 0x124
 801c8be:	f3c2 1200 	ubfx	r2, r2, #4, #1
 801c8c2:	f362 1004 	bfi	r0, r2, #4, #1
            homing.manual = settings.homing.flags.manual;
 801c8c6:	f3c3 1200 	ubfx	r2, r3, #4, #1
 801c8ca:	f362 1045 	bfi	r0, r2, #5, #1
            homing.override_locks = settings.homing.flags.override_locks;
 801c8ce:	f3c3 1240 	ubfx	r2, r3, #5, #1
 801c8d2:	f362 1086 	bfi	r0, r2, #6, #1
            homing.keep_on_reset = settings.homing.flags.keep_on_reset;
 801c8d6:	f3c3 1280 	ubfx	r2, r3, #6, #1
 801c8da:	f362 10c7 	bfi	r0, r2, #7, #1
            homing.use_limit_switches = settings.homing.flags.use_limit_switches;
 801c8de:	09db      	lsrs	r3, r3, #7
 801c8e0:	f363 2008 	bfi	r0, r3, #8, #1
            value = homing.value;
 801c8e4:	b280      	uxth	r0, r0
            break;
 801c8e6:	4770      	bx	lr
            value = settings.steppers.deenergize.mask;
 801c8e8:	4b28      	ldr	r3, [pc, #160]	@ (801c98c <get_int+0x2ac>)
 801c8ea:	f893 00ec 	ldrb.w	r0, [r3, #236]	@ 0xec
            break;
 801c8ee:	4770      	bx	lr
            value = settings.flags.legacy_rt_commands;
 801c8f0:	4b26      	ldr	r3, [pc, #152]	@ (801c98c <get_int+0x2ac>)
 801c8f2:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801c8f6:	f3c0 1080 	ubfx	r0, r0, #6, #1
            break;
 801c8fa:	4770      	bx	lr
            value = settings.parking.flags.value;
 801c8fc:	4b23      	ldr	r3, [pc, #140]	@ (801c98c <get_int+0x2ac>)
 801c8fe:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
            break;
 801c902:	4770      	bx	lr
            value = settings.homing.cycle[id - Setting_HomingCycle_1].mask;
 801c904:	382c      	subs	r0, #44	@ 0x2c
 801c906:	4b21      	ldr	r3, [pc, #132]	@ (801c98c <get_int+0x2ac>)
 801c908:	4403      	add	r3, r0
 801c90a:	f893 0115 	ldrb.w	r0, [r3, #277]	@ 0x115
            break;
 801c90e:	4770      	bx	lr
            value = settings.flags.restore_overrides;
 801c910:	4b1e      	ldr	r3, [pc, #120]	@ (801c98c <get_int+0x2ac>)
 801c912:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801c916:	f3c0 0040 	ubfx	r0, r0, #1, #1
            break;
 801c91a:	4770      	bx	lr
            value = settings.flags.sleep_enable;
 801c91c:	4b1b      	ldr	r3, [pc, #108]	@ (801c98c <get_int+0x2ac>)
 801c91e:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801c922:	f3c0 00c0 	ubfx	r0, r0, #3, #1
            break;
 801c926:	4770      	bx	lr
            value = (settings.flags.disable_laser_during_hold ? bit(0) : 0) | (settings.flags.restore_after_feed_hold ? bit(1) : 0);
 801c928:	4b18      	ldr	r3, [pc, #96]	@ (801c98c <get_int+0x2ac>)
 801c92a:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801c92e:	0983      	lsrs	r3, r0, #6
 801c930:	f3c0 1000 	ubfx	r0, r0, #4, #1
 801c934:	f003 0302 	and.w	r3, r3, #2
 801c938:	4318      	orrs	r0, r3
            break;
 801c93a:	4770      	bx	lr
            value = settings.flags.force_initialization_alarm;
 801c93c:	4b13      	ldr	r3, [pc, #76]	@ (801c98c <get_int+0x2ac>)
 801c93e:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801c942:	f3c0 1040 	ubfx	r0, r0, #5, #1
            break;
 801c946:	4770      	bx	lr
            value = settings.probe.allow_feed_override;
 801c948:	4b10      	ldr	r3, [pc, #64]	@ (801c98c <get_int+0x2ac>)
 801c94a:	f893 0100 	ldrb.w	r0, [r3, #256]	@ 0x100
 801c94e:	f3c0 1000 	ubfx	r0, r0, #4, #1
            break;
 801c952:	4770      	bx	lr
            value = settings.tool_change.mode;
 801c954:	4b0d      	ldr	r3, [pc, #52]	@ (801c98c <get_int+0x2ac>)
 801c956:	f893 002c 	ldrb.w	r0, [r3, #44]	@ 0x2c
            break;
 801c95a:	4770      	bx	lr
            value = settings.flags.g92_is_volatile;
 801c95c:	4b0b      	ldr	r3, [pc, #44]	@ (801c98c <get_int+0x2ac>)
 801c95e:	f893 00ff 	ldrb.w	r0, [r3, #255]	@ 0xff
 801c962:	f3c0 0040 	ubfx	r0, r0, #1, #1
            break;
 801c966:	4770      	bx	lr
            value = settings.report_interval;
 801c968:	4b08      	ldr	r3, [pc, #32]	@ (801c98c <get_int+0x2ac>)
 801c96a:	8a98      	ldrh	r0, [r3, #20]
            break;
 801c96c:	4770      	bx	lr
            value = settings.offset_lock.mask & 0b111;
 801c96e:	4b07      	ldr	r3, [pc, #28]	@ (801c98c <get_int+0x2ac>)
 801c970:	f893 0102 	ldrb.w	r0, [r3, #258]	@ 0x102
 801c974:	f000 0007 	and.w	r0, r0, #7
            break;
 801c978:	4770      	bx	lr
    switch(id) {
 801c97a:	2000      	movs	r0, #0
 801c97c:	4770      	bx	lr
 801c97e:	2000      	movs	r0, #0
 801c980:	4770      	bx	lr
            value = settings.spindle.flags.pwm_disable ? 0 : (0b001 |
 801c982:	2000      	movs	r0, #0
 801c984:	4770      	bx	lr
                      (settings.limits.flags.hard_disabled_rotary ? bit(2) : 0) : 0);
 801c986:	2000      	movs	r0, #0
        default:
            break;
    }

    return value;
}
 801c988:	4770      	bx	lr
 801c98a:	bf00      	nop
 801c98c:	200022f4 	.word	0x200022f4
 801c990:	200018dc 	.word	0x200018dc

0801c994 <settings_write_global>:
}


// Write global settings to persistent storage
void settings_write_global (void)
{
 801c994:	b510      	push	{r4, lr}
    if(override_backup.valid)
 801c996:	4b0d      	ldr	r3, [pc, #52]	@ (801c9cc <settings_write_global+0x38>)
 801c998:	781b      	ldrb	r3, [r3, #0]
 801c99a:	b9a3      	cbnz	r3, 801c9c6 <settings_write_global+0x32>
        restore_override_backup();

    settings.flags.compatibility_level = COMPATIBILITY_LEVEL;
 801c99c:	4b0c      	ldr	r3, [pc, #48]	@ (801c9d0 <settings_write_global+0x3c>)
 801c99e:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 801c9a2:	f36f 0285 	bfc	r2, #2, #4
 801c9a6:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    if(hal.nvs.type != NVS_None)
 801c9aa:	4b0a      	ldr	r3, [pc, #40]	@ (801c9d4 <settings_write_global+0x40>)
 801c9ac:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801c9b0:	b143      	cbz	r3, 801c9c4 <settings_write_global+0x30>
        hal.nvs.memcpy_to_nvs(NVS_ADDR_GLOBAL, (uint8_t *)&settings, sizeof(settings_t), true);
 801c9b2:	4b08      	ldr	r3, [pc, #32]	@ (801c9d4 <settings_write_global+0x40>)
 801c9b4:	f8d3 4190 	ldr.w	r4, [r3, #400]	@ 0x190
 801c9b8:	2301      	movs	r3, #1
 801c9ba:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801c9be:	4904      	ldr	r1, [pc, #16]	@ (801c9d0 <settings_write_global+0x3c>)
 801c9c0:	4618      	mov	r0, r3
 801c9c2:	47a0      	blx	r4
}
 801c9c4:	bd10      	pop	{r4, pc}
        restore_override_backup();
 801c9c6:	f7ff fc01 	bl	801c1cc <restore_override_backup>
 801c9ca:	e7e7      	b.n	801c99c <settings_write_global+0x8>
 801c9cc:	2000227c 	.word	0x2000227c
 801c9d0:	200022f4 	.word	0x200022f4
 801c9d4:	200018dc 	.word	0x200018dc

0801c9d8 <is_available>:

    nvs_buffer_sync_physical();
}

inline static bool is_available (const setting_detail_t *setting)
{
 801c9d8:	b508      	push	{r3, lr}
    return setting->is_available == NULL || setting->is_available(setting);
 801c9da:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801c9dc:	b113      	cbz	r3, 801c9e4 <is_available+0xc>
 801c9de:	4798      	blx	r3
 801c9e0:	b910      	cbnz	r0, 801c9e8 <is_available+0x10>
}
 801c9e2:	bd08      	pop	{r3, pc}
    return setting->is_available == NULL || setting->is_available(setting);
 801c9e4:	2001      	movs	r0, #1
 801c9e6:	e7fc      	b.n	801c9e2 <is_available+0xa>
 801c9e8:	2001      	movs	r0, #1
 801c9ea:	e7fa      	b.n	801c9e2 <is_available+0xa>

0801c9ec <remove_element>:
    return setting->datatype == Format_Integer || setting->datatype == Format_Int8 || setting->datatype == Format_Int16;
}

static char *remove_element (char *s, uint_fast8_t entry)
{
    while(entry && *s) {
 801c9ec:	e000      	b.n	801c9f0 <remove_element+0x4>
        if(*s == ',')
            entry--;
        s++;
 801c9ee:	3001      	adds	r0, #1
    while(entry && *s) {
 801c9f0:	b129      	cbz	r1, 801c9fe <remove_element+0x12>
 801c9f2:	7803      	ldrb	r3, [r0, #0]
 801c9f4:	b11b      	cbz	r3, 801c9fe <remove_element+0x12>
        if(*s == ',')
 801c9f6:	2b2c      	cmp	r3, #44	@ 0x2c
 801c9f8:	d1f9      	bne.n	801c9ee <remove_element+0x2>
            entry--;
 801c9fa:	3901      	subs	r1, #1
 801c9fc:	e7f7      	b.n	801c9ee <remove_element+0x2>
    }

    if(entry == 0) {
 801c9fe:	b9b9      	cbnz	r1, 801ca30 <remove_element+0x44>
        *s++ = 'N';
 801ca00:	234e      	movs	r3, #78	@ 0x4e
 801ca02:	7003      	strb	r3, [r0, #0]
        *s++ = '/';
 801ca04:	232f      	movs	r3, #47	@ 0x2f
 801ca06:	7043      	strb	r3, [r0, #1]
        *s++ = 'A';
 801ca08:	1cc3      	adds	r3, r0, #3
 801ca0a:	2241      	movs	r2, #65	@ 0x41
 801ca0c:	7082      	strb	r2, [r0, #2]
        char *s2 = s;
 801ca0e:	461a      	mov	r2, r3
        while(*s2 && *s2 != ',')
 801ca10:	e000      	b.n	801ca14 <remove_element+0x28>
            s2++;
 801ca12:	3201      	adds	r2, #1
        while(*s2 && *s2 != ',')
 801ca14:	7811      	ldrb	r1, [r2, #0]
 801ca16:	b129      	cbz	r1, 801ca24 <remove_element+0x38>
 801ca18:	292c      	cmp	r1, #44	@ 0x2c
 801ca1a:	d1fa      	bne.n	801ca12 <remove_element+0x26>
 801ca1c:	e002      	b.n	801ca24 <remove_element+0x38>
        while(*s2)
            *s++ = *s2++;
 801ca1e:	3201      	adds	r2, #1
 801ca20:	f803 1b01 	strb.w	r1, [r3], #1
        while(*s2)
 801ca24:	7811      	ldrb	r1, [r2, #0]
 801ca26:	2900      	cmp	r1, #0
 801ca28:	d1f9      	bne.n	801ca1e <remove_element+0x32>
        *s = '\0';
 801ca2a:	2200      	movs	r2, #0
 801ca2c:	701a      	strb	r2, [r3, #0]
 801ca2e:	4618      	mov	r0, r3
    }

    return s;
}
 801ca30:	4770      	bx	lr
	...

0801ca34 <set_encoder_spindle>:
{
 801ca34:	b510      	push	{r4, lr}
 801ca36:	460c      	mov	r4, r1
    if(spindle_get_count() < 2)
 801ca38:	f001 ff30 	bl	801e89c <spindle_get_count>
 801ca3c:	2801      	cmp	r0, #1
 801ca3e:	d90c      	bls.n	801ca5a <set_encoder_spindle+0x26>
    else if(int_value >= spindle_get_count())
 801ca40:	f001 ff2c 	bl	801e89c <spindle_get_count>
 801ca44:	42a0      	cmp	r0, r4
 801ca46:	d90a      	bls.n	801ca5e <set_encoder_spindle+0x2a>
    settings.offset_lock.encoder_spindle = int_value;
 801ca48:	4b06      	ldr	r3, [pc, #24]	@ (801ca64 <set_encoder_spindle+0x30>)
 801ca4a:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 801ca4e:	f364 02c7 	bfi	r2, r4, #3, #5
 801ca52:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
    return Status_OK;
 801ca56:	2000      	movs	r0, #0
}
 801ca58:	bd10      	pop	{r4, pc}
        return Status_SettingDisabled;
 801ca5a:	2035      	movs	r0, #53	@ 0x35
 801ca5c:	e7fc      	b.n	801ca58 <set_encoder_spindle+0x24>
        return Status_SettingValueOutOfRange;
 801ca5e:	2034      	movs	r0, #52	@ 0x34
 801ca60:	e7fa      	b.n	801ca58 <set_encoder_spindle+0x24>
 801ca62:	bf00      	nop
 801ca64:	200022f4 	.word	0x200022f4

0801ca68 <set_spindle_type>:
{
 801ca68:	b510      	push	{r4, lr}
 801ca6a:	460c      	mov	r4, r1
    if(spindle_get_count() < 2)
 801ca6c:	f001 ff16 	bl	801e89c <spindle_get_count>
 801ca70:	2801      	cmp	r0, #1
 801ca72:	d910      	bls.n	801ca96 <set_spindle_type+0x2e>
    else if(int_value >= spindle_get_count())
 801ca74:	f001 ff12 	bl	801e89c <spindle_get_count>
 801ca78:	42a0      	cmp	r0, r4
 801ca7a:	d90e      	bls.n	801ca9a <set_spindle_type+0x32>
    settings.spindle.flags.type = int_value;
 801ca7c:	f004 001f 	and.w	r0, r4, #31
 801ca80:	4b07      	ldr	r3, [pc, #28]	@ (801caa0 <set_spindle_type+0x38>)
 801ca82:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801ca86:	f360 0286 	bfi	r2, r0, #2, #5
 801ca8a:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    spindle_select(settings.spindle.flags.type);
 801ca8e:	f001 fee5 	bl	801e85c <spindle_select>
    return Status_OK;
 801ca92:	2000      	movs	r0, #0
}
 801ca94:	bd10      	pop	{r4, pc}
        return Status_SettingDisabled;
 801ca96:	2035      	movs	r0, #53	@ 0x35
 801ca98:	e7fc      	b.n	801ca94 <set_spindle_type+0x2c>
        return Status_SettingValueOutOfRange;
 801ca9a:	2034      	movs	r0, #52	@ 0x34
 801ca9c:	e7fa      	b.n	801ca94 <set_spindle_type+0x2c>
 801ca9e:	bf00      	nop
 801caa0:	200022f4 	.word	0x200022f4

0801caa4 <set_tool_change_mode>:
{
 801caa4:	b510      	push	{r4, lr}
    if(!hal.driver_cap.atc && hal.stream.suspend_read && int_value <= ToolChange_Ignore) {
 801caa6:	4b0c      	ldr	r3, [pc, #48]	@ (801cad8 <set_tool_change_mode+0x34>)
 801caa8:	f893 01da 	ldrb.w	r0, [r3, #474]	@ 0x1da
 801caac:	f010 0402 	ands.w	r4, r0, #2
 801cab0:	d10b      	bne.n	801caca <set_tool_change_mode+0x26>
 801cab2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801cab6:	b153      	cbz	r3, 801cace <set_tool_change_mode+0x2a>
 801cab8:	2904      	cmp	r1, #4
 801caba:	d80a      	bhi.n	801cad2 <set_tool_change_mode+0x2e>
        settings.tool_change.mode = (toolchange_mode_t)int_value;
 801cabc:	4b07      	ldr	r3, [pc, #28]	@ (801cadc <set_tool_change_mode+0x38>)
 801cabe:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
        tc_init();
 801cac2:	f005 ffef 	bl	8022aa4 <tc_init>
}
 801cac6:	4620      	mov	r0, r4
 801cac8:	bd10      	pop	{r4, pc}
        return Status_InvalidStatement;
 801caca:	2403      	movs	r4, #3
 801cacc:	e7fb      	b.n	801cac6 <set_tool_change_mode+0x22>
 801cace:	2403      	movs	r4, #3
 801cad0:	e7f9      	b.n	801cac6 <set_tool_change_mode+0x22>
 801cad2:	2403      	movs	r4, #3
 801cad4:	e7f7      	b.n	801cac6 <set_tool_change_mode+0x22>
 801cad6:	bf00      	nop
 801cad8:	200018dc 	.word	0x200018dc
 801cadc:	200022f4 	.word	0x200022f4

0801cae0 <set_homing_cycle>:
{
 801cae0:	b508      	push	{r3, lr}
    settings.homing.cycle[id - Setting_HomingCycle_1].mask = int_value;
 801cae2:	382c      	subs	r0, #44	@ 0x2c
 801cae4:	4b03      	ldr	r3, [pc, #12]	@ (801caf4 <set_homing_cycle+0x14>)
 801cae6:	4403      	add	r3, r0
 801cae8:	f883 1115 	strb.w	r1, [r3, #277]	@ 0x115
    limits_set_homing_axes();
 801caec:	f7f7 f8da 	bl	8013ca4 <limits_set_homing_axes>
}
 801caf0:	2000      	movs	r0, #0
 801caf2:	bd08      	pop	{r3, pc}
 801caf4:	200022f4 	.word	0x200022f4

0801caf8 <set_mode>:
{
 801caf8:	b510      	push	{r4, lr}
    switch((machine_mode_t)int_value) {
 801cafa:	b2cc      	uxtb	r4, r1
 801cafc:	2c01      	cmp	r4, #1
 801cafe:	d00e      	beq.n	801cb1e <set_mode+0x26>
 801cb00:	2c02      	cmp	r4, #2
 801cb02:	d005      	beq.n	801cb10 <set_mode+0x18>
 801cb04:	b10c      	cbz	r4, 801cb0a <set_mode+0x12>
 801cb06:	2003      	movs	r0, #3
 801cb08:	e008      	b.n	801cb1c <set_mode+0x24>
           gc_state.modal.diameter_mode = false;
 801cb0a:	4b0b      	ldr	r3, [pc, #44]	@ (801cb38 <set_mode+0x40>)
 801cb0c:	2200      	movs	r2, #0
 801cb0e:	715a      	strb	r2, [r3, #5]
    machine_mode_changed = true;
 801cb10:	4b0a      	ldr	r3, [pc, #40]	@ (801cb3c <set_mode+0x44>)
 801cb12:	2201      	movs	r2, #1
 801cb14:	701a      	strb	r2, [r3, #0]
    settings.mode = (machine_mode_t)int_value;
 801cb16:	4b0a      	ldr	r3, [pc, #40]	@ (801cb40 <set_mode+0x48>)
 801cb18:	761c      	strb	r4, [r3, #24]
    return Status_OK;
 801cb1a:	2000      	movs	r0, #0
}
 801cb1c:	bd10      	pop	{r4, pc}
            if(!spindle_get_caps(false).laser)
 801cb1e:	2000      	movs	r0, #0
 801cb20:	f001 fdce 	bl	801e6c0 <spindle_get_caps>
 801cb24:	f010 0f08 	tst.w	r0, #8
 801cb28:	d003      	beq.n	801cb32 <set_mode+0x3a>
            gc_state.modal.diameter_mode = false;
 801cb2a:	4b03      	ldr	r3, [pc, #12]	@ (801cb38 <set_mode+0x40>)
 801cb2c:	2200      	movs	r2, #0
 801cb2e:	715a      	strb	r2, [r3, #5]
            break;
 801cb30:	e7ee      	b.n	801cb10 <set_mode+0x18>
                return Status_SettingDisabledLaser;
 801cb32:	2011      	movs	r0, #17
 801cb34:	e7f2      	b.n	801cb1c <set_mode+0x24>
 801cb36:	bf00      	nop
 801cb38:	20001614 	.word	0x20001614
 801cb3c:	200022f0 	.word	0x200022f0
 801cb40:	200022f4 	.word	0x200022f4

0801cb44 <set_spindle_invert>:
{
 801cb44:	b508      	push	{r3, lr}
    settings.spindle.invert.mask = int_value;
 801cb46:	b2c9      	uxtb	r1, r1
 801cb48:	4b0b      	ldr	r3, [pc, #44]	@ (801cb78 <set_spindle_invert+0x34>)
 801cb4a:	f883 10e6 	strb.w	r1, [r3, #230]	@ 0xe6
    if(settings.spindle.invert.pwm && !spindle_get_caps(false).pwm_invert) {
 801cb4e:	f011 0004 	ands.w	r0, r1, #4
 801cb52:	d100      	bne.n	801cb56 <set_spindle_invert+0x12>
}
 801cb54:	bd08      	pop	{r3, pc}
    if(settings.spindle.invert.pwm && !spindle_get_caps(false).pwm_invert) {
 801cb56:	2000      	movs	r0, #0
 801cb58:	f001 fdb2 	bl	801e6c0 <spindle_get_caps>
 801cb5c:	f010 0f10 	tst.w	r0, #16
 801cb60:	d001      	beq.n	801cb66 <set_spindle_invert+0x22>
    return Status_OK;
 801cb62:	2000      	movs	r0, #0
 801cb64:	e7f6      	b.n	801cb54 <set_spindle_invert+0x10>
        settings.spindle.invert.pwm = Off;
 801cb66:	4b04      	ldr	r3, [pc, #16]	@ (801cb78 <set_spindle_invert+0x34>)
 801cb68:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 801cb6c:	f36f 0282 	bfc	r2, #2, #1
 801cb70:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        return Status_SettingDisabled;
 801cb74:	2035      	movs	r0, #53	@ 0x35
 801cb76:	e7ed      	b.n	801cb54 <set_spindle_invert+0x10>
 801cb78:	200022f4 	.word	0x200022f4

0801cb7c <is_setting_available>:
    if(setting) switch(normalize_id(setting->id)) {
 801cb7c:	2800      	cmp	r0, #0
 801cb7e:	f000 81b4 	beq.w	801ceea <is_setting_available+0x36e>
{
 801cb82:	b508      	push	{r3, lr}
    if(setting) switch(normalize_id(setting->id)) {
 801cb84:	8800      	ldrh	r0, [r0, #0]
 801cb86:	f7ff fd55 	bl	801c634 <normalize_id>
 801cb8a:	f5b0 7fc6 	cmp.w	r0, #396	@ 0x18c
 801cb8e:	f080 809e 	bcs.w	801ccce <is_setting_available+0x152>
 801cb92:	f5b0 7faa 	cmp.w	r0, #340	@ 0x154
 801cb96:	d247      	bcs.n	801cc28 <is_setting_available+0xac>
 801cb98:	2841      	cmp	r0, #65	@ 0x41
 801cb9a:	f200 8086 	bhi.w	801ccaa <is_setting_available+0x12e>
 801cb9e:	2806      	cmp	r0, #6
 801cba0:	d340      	bcc.n	801cc24 <is_setting_available+0xa8>
 801cba2:	3806      	subs	r0, #6
 801cba4:	283b      	cmp	r0, #59	@ 0x3b
 801cba6:	d87e      	bhi.n	801cca6 <is_setting_available+0x12a>
 801cba8:	e8df f010 	tbh	[pc, r0, lsl #1]
 801cbac:	007d00e8 	.word	0x007d00e8
 801cbb0:	00ef00da 	.word	0x00ef00da
 801cbb4:	007d007d 	.word	0x007d007d
 801cbb8:	007d007d 	.word	0x007d007d
 801cbbc:	007d007d 	.word	0x007d007d
 801cbc0:	007d0101 	.word	0x007d0101
 801cbc4:	00e8007d 	.word	0x00e8007d
 801cbc8:	007d007d 	.word	0x007d007d
 801cbcc:	007d007d 	.word	0x007d007d
 801cbd0:	007d007d 	.word	0x007d007d
 801cbd4:	007d007d 	.word	0x007d007d
 801cbd8:	007d007d 	.word	0x007d007d
 801cbdc:	01190119 	.word	0x01190119
 801cbe0:	0107007d 	.word	0x0107007d
 801cbe4:	01070107 	.word	0x01070107
 801cbe8:	007d0107 	.word	0x007d0107
 801cbec:	007d0114 	.word	0x007d0114
 801cbf0:	0123007d 	.word	0x0123007d
 801cbf4:	007d0123 	.word	0x007d0123
 801cbf8:	007d007d 	.word	0x007d007d
 801cbfc:	007d007d 	.word	0x007d007d
 801cc00:	007d007d 	.word	0x007d007d
 801cc04:	007d007d 	.word	0x007d007d
 801cc08:	007d007d 	.word	0x007d007d
 801cc0c:	007d007d 	.word	0x007d007d
 801cc10:	01230123 	.word	0x01230123
 801cc14:	01230123 	.word	0x01230123
 801cc18:	01230123 	.word	0x01230123
 801cc1c:	007d01a3 	.word	0x007d01a3
 801cc20:	00e8007d 	.word	0x00e8007d
 801cc24:	2000      	movs	r0, #0
 801cc26:	e163      	b.n	801cef0 <is_setting_available+0x374>
 801cc28:	f5a0 70aa 	sub.w	r0, r0, #340	@ 0x154
 801cc2c:	2837      	cmp	r0, #55	@ 0x37
 801cc2e:	f200 815e 	bhi.w	801ceee <is_setting_available+0x372>
 801cc32:	e8df f010 	tbh	[pc, r0, lsl #1]
 801cc36:	010b      	.short	0x010b
 801cc38:	015c015c 	.word	0x015c015c
 801cc3c:	015c015c 	.word	0x015c015c
 801cc40:	015c015c 	.word	0x015c015c
 801cc44:	003c003c 	.word	0x003c003c
 801cc48:	015c003c 	.word	0x015c003c
 801cc4c:	015c015c 	.word	0x015c015c
 801cc50:	015c015c 	.word	0x015c015c
 801cc54:	015c015c 	.word	0x015c015c
 801cc58:	015c015c 	.word	0x015c015c
 801cc5c:	015c015c 	.word	0x015c015c
 801cc60:	015c015c 	.word	0x015c015c
 801cc64:	015c015c 	.word	0x015c015c
 801cc68:	015c015c 	.word	0x015c015c
 801cc6c:	015c015c 	.word	0x015c015c
 801cc70:	015c015c 	.word	0x015c015c
 801cc74:	015c015c 	.word	0x015c015c
 801cc78:	015c015c 	.word	0x015c015c
 801cc7c:	015c015c 	.word	0x015c015c
 801cc80:	015c015c 	.word	0x015c015c
 801cc84:	015c015c 	.word	0x015c015c
 801cc88:	015c015c 	.word	0x015c015c
 801cc8c:	015c015c 	.word	0x015c015c
 801cc90:	015c015c 	.word	0x015c015c
 801cc94:	015c015c 	.word	0x015c015c
 801cc98:	015c015c 	.word	0x015c015c
 801cc9c:	00e4015c 	.word	0x00e4015c
 801cca0:	011c00fb 	.word	0x011c00fb
 801cca4:	00c8      	.short	0x00c8
 801cca6:	2000      	movs	r0, #0
 801cca8:	e122      	b.n	801cef0 <is_setting_available+0x374>
 801ccaa:	28aa      	cmp	r0, #170	@ 0xaa
 801ccac:	d10d      	bne.n	801ccca <is_setting_available+0x14e>
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(true).mask != 0;
 801ccae:	4b92      	ldr	r3, [pc, #584]	@ (801cef8 <is_setting_available+0x37c>)
 801ccb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	f000 8098 	beq.w	801cdea <is_setting_available+0x26e>
 801ccba:	2001      	movs	r0, #1
 801ccbc:	4798      	blx	r3
 801ccbe:	b2c0      	uxtb	r0, r0
 801ccc0:	2800      	cmp	r0, #0
 801ccc2:	f000 8094 	beq.w	801cdee <is_setting_available+0x272>
 801ccc6:	2001      	movs	r0, #1
 801ccc8:	e112      	b.n	801cef0 <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801ccca:	2000      	movs	r0, #0
 801cccc:	e110      	b.n	801cef0 <is_setting_available+0x374>
 801ccce:	f240 2307 	movw	r3, #519	@ 0x207
 801ccd2:	4298      	cmp	r0, r3
 801ccd4:	f000 80e9 	beq.w	801ceaa <is_setting_available+0x32e>
 801ccd8:	f5b0 7f02 	cmp.w	r0, #520	@ 0x208
 801ccdc:	d317      	bcc.n	801cd0e <is_setting_available+0x192>
 801ccde:	f240 239f 	movw	r3, #671	@ 0x29f
 801cce2:	4298      	cmp	r0, r3
 801cce4:	f000 80f0 	beq.w	801cec8 <is_setting_available+0x34c>
 801cce8:	f240 23a1 	movw	r3, #673	@ 0x2a1
 801ccec:	4298      	cmp	r0, r3
 801ccee:	d128      	bne.n	801cd42 <is_setting_available+0x1c6>
            available = !hal.signals_cap.safety_door_ajar && hal.coolant_cap.mask;
 801ccf0:	4b81      	ldr	r3, [pc, #516]	@ (801cef8 <is_setting_available+0x37c>)
 801ccf2:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801ccf6:	f013 0f08 	tst.w	r3, #8
 801ccfa:	f040 80f2 	bne.w	801cee2 <is_setting_available+0x366>
 801ccfe:	4b7e      	ldr	r3, [pc, #504]	@ (801cef8 <is_setting_available+0x37c>)
 801cd00:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	f040 80ee 	bne.w	801cee6 <is_setting_available+0x36a>
 801cd0a:	2000      	movs	r0, #0
 801cd0c:	e0f0      	b.n	801cef0 <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801cd0e:	f5b0 7ff1 	cmp.w	r0, #482	@ 0x1e2
 801cd12:	f000 80c3 	beq.w	801ce9c <is_setting_available+0x320>
 801cd16:	f5b0 7ff2 	cmp.w	r0, #484	@ 0x1e4
 801cd1a:	d105      	bne.n	801cd28 <is_setting_available+0x1ac>
            available = hal.signals_cap.e_stop;
 801cd1c:	4b76      	ldr	r3, [pc, #472]	@ (801cef8 <is_setting_available+0x37c>)
 801cd1e:	f893 01dc 	ldrb.w	r0, [r3, #476]	@ 0x1dc
 801cd22:	f3c0 1080 	ubfx	r0, r0, #6, #1
            break;
 801cd26:	e0e3      	b.n	801cef0 <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801cd28:	f240 13e1 	movw	r3, #481	@ 0x1e1
 801cd2c:	4298      	cmp	r0, r3
 801cd2e:	d106      	bne.n	801cd3e <is_setting_available+0x1c2>
            available = hal.get_elapsed_ticks != NULL;
 801cd30:	4b71      	ldr	r3, [pc, #452]	@ (801cef8 <is_setting_available+0x37c>)
 801cd32:	f8d3 01a8 	ldr.w	r0, [r3, #424]	@ 0x1a8
 801cd36:	3800      	subs	r0, #0
 801cd38:	bf18      	it	ne
 801cd3a:	2001      	movne	r0, #1
            break;
 801cd3c:	e0d8      	b.n	801cef0 <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801cd3e:	2000      	movs	r0, #0
 801cd40:	e0d6      	b.n	801cef0 <is_setting_available+0x374>
 801cd42:	f240 238a 	movw	r3, #650	@ 0x28a
 801cd46:	4298      	cmp	r0, r3
 801cd48:	d108      	bne.n	801cd5c <is_setting_available+0x1e0>
            available = hal.driver_cap.sd_card || hal.driver_cap.littlefs;
 801cd4a:	4b6b      	ldr	r3, [pc, #428]	@ (801cef8 <is_setting_available+0x37c>)
 801cd4c:	f893 31d9 	ldrb.w	r3, [r3, #473]	@ 0x1d9
 801cd50:	f013 0f06 	tst.w	r3, #6
 801cd54:	bf14      	ite	ne
 801cd56:	2001      	movne	r0, #1
 801cd58:	2000      	moveq	r0, #0
            break;
 801cd5a:	e0c9      	b.n	801cef0 <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801cd5c:	2000      	movs	r0, #0
 801cd5e:	e0c7      	b.n	801cef0 <is_setting_available+0x374>
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(false).mask != 0;
 801cd60:	4b65      	ldr	r3, [pc, #404]	@ (801cef8 <is_setting_available+0x37c>)
 801cd62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801cd66:	b12b      	cbz	r3, 801cd74 <is_setting_available+0x1f8>
 801cd68:	2000      	movs	r0, #0
 801cd6a:	4798      	blx	r3
 801cd6c:	b2c0      	uxtb	r0, r0
 801cd6e:	b118      	cbz	r0, 801cd78 <is_setting_available+0x1fc>
 801cd70:	2001      	movs	r0, #1
 801cd72:	e0bd      	b.n	801cef0 <is_setting_available+0x374>
 801cd74:	2000      	movs	r0, #0
 801cd76:	e0bb      	b.n	801cef0 <is_setting_available+0x374>
 801cd78:	2000      	movs	r0, #0
            break;
 801cd7a:	e0b9      	b.n	801cef0 <is_setting_available+0x374>
            available = hal.probe.get_state != NULL;
 801cd7c:	4b5e      	ldr	r3, [pc, #376]	@ (801cef8 <is_setting_available+0x37c>)
 801cd7e:	f8d3 00fc 	ldr.w	r0, [r3, #252]	@ 0xfc
 801cd82:	3800      	subs	r0, #0
 801cd84:	bf18      	it	ne
 801cd86:	2001      	movne	r0, #1
            break;
 801cd88:	e0b2      	b.n	801cef0 <is_setting_available+0x374>
            available = hal.driver_cap.pwm_spindle && spindle_get_caps(false).laser;
 801cd8a:	4b5b      	ldr	r3, [pc, #364]	@ (801cef8 <is_setting_available+0x37c>)
 801cd8c:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 801cd90:	f013 0f10 	tst.w	r3, #16
 801cd94:	d101      	bne.n	801cd9a <is_setting_available+0x21e>
 801cd96:	2000      	movs	r0, #0
 801cd98:	e0aa      	b.n	801cef0 <is_setting_available+0x374>
 801cd9a:	2000      	movs	r0, #0
 801cd9c:	f001 fc90 	bl	801e6c0 <spindle_get_caps>
 801cda0:	f010 0f08 	tst.w	r0, #8
 801cda4:	d001      	beq.n	801cdaa <is_setting_available+0x22e>
 801cda6:	2001      	movs	r0, #1
 801cda8:	e0a2      	b.n	801cef0 <is_setting_available+0x374>
 801cdaa:	2000      	movs	r0, #0
            break;
 801cdac:	e0a0      	b.n	801cef0 <is_setting_available+0x374>
            available = spindle_get_caps(false).gpio_controlled;
 801cdae:	2000      	movs	r0, #0
 801cdb0:	f001 fc86 	bl	801e6c0 <spindle_get_caps>
 801cdb4:	f3c0 2000 	ubfx	r0, r0, #8, #1
            break;
 801cdb8:	e09a      	b.n	801cef0 <is_setting_available+0x374>
            available = hal.driver_cap.pwm_spindle;
 801cdba:	4b4f      	ldr	r3, [pc, #316]	@ (801cef8 <is_setting_available+0x37c>)
 801cdbc:	f893 01da 	ldrb.w	r0, [r3, #474]	@ 0x1da
 801cdc0:	f3c0 1000 	ubfx	r0, r0, #4, #1
            break;
 801cdc4:	e094      	b.n	801cef0 <is_setting_available+0x374>
            available = spindle_get_count() > 1;
 801cdc6:	f001 fd69 	bl	801e89c <spindle_get_count>
 801cdca:	2801      	cmp	r0, #1
 801cdcc:	bf94      	ite	ls
 801cdce:	2000      	movls	r0, #0
 801cdd0:	2001      	movhi	r0, #1
            break;
 801cdd2:	e08d      	b.n	801cef0 <is_setting_available+0x374>
            available = hal.driver_cap.spindle_encoder;
 801cdd4:	4b48      	ldr	r3, [pc, #288]	@ (801cef8 <is_setting_available+0x37c>)
 801cdd6:	f893 01d8 	ldrb.w	r0, [r3, #472]	@ 0x1d8
 801cdda:	09c0      	lsrs	r0, r0, #7
            break;
 801cddc:	e088      	b.n	801cef0 <is_setting_available+0x374>
            available = spindle_get_caps(false).variable;
 801cdde:	2000      	movs	r0, #0
 801cde0:	f001 fc6e 	bl	801e6c0 <spindle_get_caps>
 801cde4:	f000 0001 	and.w	r0, r0, #1
            break;
 801cde8:	e082      	b.n	801cef0 <is_setting_available+0x374>
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(true).mask != 0;
 801cdea:	2000      	movs	r0, #0
 801cdec:	e080      	b.n	801cef0 <is_setting_available+0x374>
 801cdee:	2000      	movs	r0, #0
            break;
 801cdf0:	e07e      	b.n	801cef0 <is_setting_available+0x374>
            available = hal.signals_cap.safety_door_ajar;
 801cdf2:	4b41      	ldr	r3, [pc, #260]	@ (801cef8 <is_setting_available+0x37c>)
 801cdf4:	f893 01dc 	ldrb.w	r0, [r3, #476]	@ 0x1dc
 801cdf8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
            break;
 801cdfc:	e078      	b.n	801cef0 <is_setting_available+0x374>
            available = hal.signals_cap.safety_door_ajar && spindle_get_count() && !spindle_get_caps(true).at_speed;
 801cdfe:	4b3e      	ldr	r3, [pc, #248]	@ (801cef8 <is_setting_available+0x37c>)
 801ce00:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801ce04:	f013 0f08 	tst.w	r3, #8
 801ce08:	d101      	bne.n	801ce0e <is_setting_available+0x292>
 801ce0a:	2000      	movs	r0, #0
 801ce0c:	e070      	b.n	801cef0 <is_setting_available+0x374>
 801ce0e:	f001 fd45 	bl	801e89c <spindle_get_count>
 801ce12:	b908      	cbnz	r0, 801ce18 <is_setting_available+0x29c>
 801ce14:	2000      	movs	r0, #0
 801ce16:	e06b      	b.n	801cef0 <is_setting_available+0x374>
 801ce18:	2001      	movs	r0, #1
 801ce1a:	f001 fc51 	bl	801e6c0 <spindle_get_caps>
 801ce1e:	f010 0f04 	tst.w	r0, #4
 801ce22:	d101      	bne.n	801ce28 <is_setting_available+0x2ac>
 801ce24:	2001      	movs	r0, #1
 801ce26:	e063      	b.n	801cef0 <is_setting_available+0x374>
 801ce28:	2000      	movs	r0, #0
            break;
 801ce2a:	e061      	b.n	801cef0 <is_setting_available+0x374>
            available = hal.signals_cap.safety_door_ajar && hal.coolant_cap.mask;
 801ce2c:	4b32      	ldr	r3, [pc, #200]	@ (801cef8 <is_setting_available+0x37c>)
 801ce2e:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801ce32:	f013 0f08 	tst.w	r3, #8
 801ce36:	d005      	beq.n	801ce44 <is_setting_available+0x2c8>
 801ce38:	4b2f      	ldr	r3, [pc, #188]	@ (801cef8 <is_setting_available+0x37c>)
 801ce3a:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 801ce3e:	b91b      	cbnz	r3, 801ce48 <is_setting_available+0x2cc>
 801ce40:	2000      	movs	r0, #0
 801ce42:	e055      	b.n	801cef0 <is_setting_available+0x374>
 801ce44:	2000      	movs	r0, #0
 801ce46:	e053      	b.n	801cef0 <is_setting_available+0x374>
 801ce48:	2001      	movs	r0, #1
            break;
 801ce4a:	e051      	b.n	801cef0 <is_setting_available+0x374>
            available = spindle_get_caps(true).at_speed || hal.driver_cap.spindle_encoder;
 801ce4c:	2001      	movs	r0, #1
 801ce4e:	f001 fc37 	bl	801e6c0 <spindle_get_caps>
 801ce52:	f010 0f04 	tst.w	r0, #4
 801ce56:	d108      	bne.n	801ce6a <is_setting_available+0x2ee>
 801ce58:	4b27      	ldr	r3, [pc, #156]	@ (801cef8 <is_setting_available+0x37c>)
 801ce5a:	f993 31d8 	ldrsb.w	r3, [r3, #472]	@ 0x1d8
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	db01      	blt.n	801ce66 <is_setting_available+0x2ea>
 801ce62:	2000      	movs	r0, #0
            break;
 801ce64:	e044      	b.n	801cef0 <is_setting_available+0x374>
            available = spindle_get_caps(true).at_speed || hal.driver_cap.spindle_encoder;
 801ce66:	2001      	movs	r0, #1
 801ce68:	e042      	b.n	801cef0 <is_setting_available+0x374>
 801ce6a:	2001      	movs	r0, #1
 801ce6c:	e040      	b.n	801cef0 <is_setting_available+0x374>
            available = !hal.signals_cap.safety_door_ajar && spindle_get_count() && !spindle_get_caps(true).at_speed;
 801ce6e:	4b22      	ldr	r3, [pc, #136]	@ (801cef8 <is_setting_available+0x37c>)
 801ce70:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801ce74:	f013 0f08 	tst.w	r3, #8
 801ce78:	d001      	beq.n	801ce7e <is_setting_available+0x302>
 801ce7a:	2000      	movs	r0, #0
 801ce7c:	e038      	b.n	801cef0 <is_setting_available+0x374>
 801ce7e:	f001 fd0d 	bl	801e89c <spindle_get_count>
 801ce82:	b908      	cbnz	r0, 801ce88 <is_setting_available+0x30c>
 801ce84:	2000      	movs	r0, #0
 801ce86:	e033      	b.n	801cef0 <is_setting_available+0x374>
 801ce88:	2001      	movs	r0, #1
 801ce8a:	f001 fc19 	bl	801e6c0 <spindle_get_caps>
 801ce8e:	f010 0f04 	tst.w	r0, #4
 801ce92:	d101      	bne.n	801ce98 <is_setting_available+0x31c>
 801ce94:	2001      	movs	r0, #1
 801ce96:	e02b      	b.n	801cef0 <is_setting_available+0x374>
 801ce98:	2000      	movs	r0, #0
            break;
 801ce9a:	e029      	b.n	801cef0 <is_setting_available+0x374>
            available = hal.rtc.set_datetime != NULL;
 801ce9c:	4b16      	ldr	r3, [pc, #88]	@ (801cef8 <is_setting_available+0x37c>)
 801ce9e:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
 801cea2:	3800      	subs	r0, #0
 801cea4:	bf18      	it	ne
 801cea6:	2001      	movne	r0, #1
            break;
 801cea8:	e022      	b.n	801cef0 <is_setting_available+0x374>
            available = hal.driver_cap.spindle_encoder && spindle_get_count() > 1;
 801ceaa:	4b13      	ldr	r3, [pc, #76]	@ (801cef8 <is_setting_available+0x37c>)
 801ceac:	f993 31d8 	ldrsb.w	r3, [r3, #472]	@ 0x1d8
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	db01      	blt.n	801ceb8 <is_setting_available+0x33c>
 801ceb4:	2000      	movs	r0, #0
 801ceb6:	e01b      	b.n	801cef0 <is_setting_available+0x374>
 801ceb8:	f001 fcf0 	bl	801e89c <spindle_get_count>
 801cebc:	2801      	cmp	r0, #1
 801cebe:	d901      	bls.n	801cec4 <is_setting_available+0x348>
 801cec0:	2001      	movs	r0, #1
 801cec2:	e015      	b.n	801cef0 <is_setting_available+0x374>
 801cec4:	2000      	movs	r0, #0
            break;
 801cec6:	e013      	b.n	801cef0 <is_setting_available+0x374>
            available = hal.homing.get_state != NULL && hal.home_cap.a.mask != 0;
 801cec8:	4b0b      	ldr	r3, [pc, #44]	@ (801cef8 <is_setting_available+0x37c>)
 801ceca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801cecc:	b12b      	cbz	r3, 801ceda <is_setting_available+0x35e>
 801cece:	4b0a      	ldr	r3, [pc, #40]	@ (801cef8 <is_setting_available+0x37c>)
 801ced0:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 801ced4:	b91b      	cbnz	r3, 801cede <is_setting_available+0x362>
 801ced6:	2000      	movs	r0, #0
 801ced8:	e00a      	b.n	801cef0 <is_setting_available+0x374>
 801ceda:	2000      	movs	r0, #0
 801cedc:	e008      	b.n	801cef0 <is_setting_available+0x374>
 801cede:	2001      	movs	r0, #1
            break;
 801cee0:	e006      	b.n	801cef0 <is_setting_available+0x374>
            available = !hal.signals_cap.safety_door_ajar && hal.coolant_cap.mask;
 801cee2:	2000      	movs	r0, #0
 801cee4:	e004      	b.n	801cef0 <is_setting_available+0x374>
 801cee6:	2001      	movs	r0, #1
            break;
 801cee8:	e002      	b.n	801cef0 <is_setting_available+0x374>
    bool available = false;
 801ceea:	2000      	movs	r0, #0
}
 801ceec:	4770      	bx	lr
    if(setting) switch(normalize_id(setting->id)) {
 801ceee:	2000      	movs	r0, #0
}
 801cef0:	bd08      	pop	{r3, pc}
            available = SLEEP_DURATION > 0.0f;
 801cef2:	2001      	movs	r0, #1
 801cef4:	e7fc      	b.n	801cef0 <is_setting_available+0x374>
 801cef6:	bf00      	nop
 801cef8:	200018dc 	.word	0x200018dc

0801cefc <set_probe_disable_pullup>:
{
 801cefc:	b508      	push	{r3, lr}
    if(!hal.probe.configure)
 801cefe:	4b0a      	ldr	r3, [pc, #40]	@ (801cf28 <set_probe_disable_pullup+0x2c>)
 801cf00:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801cf04:	b16b      	cbz	r3, 801cf22 <set_probe_disable_pullup+0x26>
    settings.probe.disable_probe_pullup = int_value != 0;
 801cf06:	3900      	subs	r1, #0
 801cf08:	bf18      	it	ne
 801cf0a:	2101      	movne	r1, #1
 801cf0c:	4b07      	ldr	r3, [pc, #28]	@ (801cf2c <set_probe_disable_pullup+0x30>)
 801cf0e:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
 801cf12:	f361 0241 	bfi	r2, r1, #1, #1
 801cf16:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
    ioport_setting_changed(id);
 801cf1a:	f7f5 fd29 	bl	8012970 <ioport_setting_changed>
    return Status_OK;
 801cf1e:	2000      	movs	r0, #0
}
 801cf20:	bd08      	pop	{r3, pc}
        return Status_SettingDisabled;
 801cf22:	2035      	movs	r0, #53	@ 0x35
 801cf24:	e7fc      	b.n	801cf20 <set_probe_disable_pullup+0x24>
 801cf26:	bf00      	nop
 801cf28:	200018dc 	.word	0x200018dc
 801cf2c:	200022f4 	.word	0x200022f4

0801cf30 <set_control_disable_pullup>:
{
 801cf30:	b508      	push	{r3, lr}
    settings.control_disable_pullup.mask = int_value & (hal.signals_cap.mask & ~limits_override.mask);
 801cf32:	4b06      	ldr	r3, [pc, #24]	@ (801cf4c <set_control_disable_pullup+0x1c>)
 801cf34:	f8b3 31dc 	ldrh.w	r3, [r3, #476]	@ 0x1dc
 801cf38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801cf3c:	400b      	ands	r3, r1
 801cf3e:	4a04      	ldr	r2, [pc, #16]	@ (801cf50 <set_control_disable_pullup+0x20>)
 801cf40:	f8a2 306e 	strh.w	r3, [r2, #110]	@ 0x6e
    ioport_setting_changed(id);
 801cf44:	f7f5 fd14 	bl	8012970 <ioport_setting_changed>
}
 801cf48:	2000      	movs	r0, #0
 801cf4a:	bd08      	pop	{r3, pc}
 801cf4c:	200018dc 	.word	0x200018dc
 801cf50:	200022f4 	.word	0x200022f4

0801cf54 <set_probe_invert>:
{
 801cf54:	b508      	push	{r3, lr}
    if(!hal.probe.configure)
 801cf56:	4b0d      	ldr	r3, [pc, #52]	@ (801cf8c <set_probe_invert+0x38>)
 801cf58:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801cf5c:	b19b      	cbz	r3, 801cf86 <set_probe_invert+0x32>
    settings.probe.invert_probe_pin = int_value != 0;
 801cf5e:	3900      	subs	r1, #0
 801cf60:	bf18      	it	ne
 801cf62:	2101      	movne	r1, #1
 801cf64:	4b0a      	ldr	r3, [pc, #40]	@ (801cf90 <set_probe_invert+0x3c>)
 801cf66:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
 801cf6a:	f361 0200 	bfi	r2, r1, #0, #1
 801cf6e:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
    ioport_setting_changed(id);
 801cf72:	f7f5 fcfd 	bl	8012970 <ioport_setting_changed>
    hal.probe.configure(false, false);
 801cf76:	4b05      	ldr	r3, [pc, #20]	@ (801cf8c <set_probe_invert+0x38>)
 801cf78:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801cf7c:	2100      	movs	r1, #0
 801cf7e:	4608      	mov	r0, r1
 801cf80:	4798      	blx	r3
    return Status_OK;
 801cf82:	2000      	movs	r0, #0
}
 801cf84:	bd08      	pop	{r3, pc}
        return Status_SettingDisabled;
 801cf86:	2035      	movs	r0, #53	@ 0x35
 801cf88:	e7fc      	b.n	801cf84 <set_probe_invert+0x30>
 801cf8a:	bf00      	nop
 801cf8c:	200018dc 	.word	0x200018dc
 801cf90:	200022f4 	.word	0x200022f4

0801cf94 <set_control_invert>:
{
 801cf94:	b508      	push	{r3, lr}
    settings.control_invert.mask = (int_value & hal.signals_cap.mask) | limits_override.mask;
 801cf96:	4b07      	ldr	r3, [pc, #28]	@ (801cfb4 <set_control_invert+0x20>)
 801cf98:	f8b3 31dc 	ldrh.w	r3, [r3, #476]	@ 0x1dc
 801cf9c:	400b      	ands	r3, r1
 801cf9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801cfa2:	4a05      	ldr	r2, [pc, #20]	@ (801cfb8 <set_control_invert+0x24>)
 801cfa4:	f8a2 306c 	strh.w	r3, [r2, #108]	@ 0x6c
    ioport_setting_changed(id);
 801cfa8:	f7f5 fce2 	bl	8012970 <ioport_setting_changed>
    system_init_switches();
 801cfac:	f004 fcb6 	bl	802191c <system_init_switches>
}
 801cfb0:	2000      	movs	r0, #0
 801cfb2:	bd08      	pop	{r3, pc}
 801cfb4:	200018dc 	.word	0x200018dc
 801cfb8:	200022f4 	.word	0x200022f4

0801cfbc <set_report_inches>:
{
 801cfbc:	b508      	push	{r3, lr}
    settings.flags.report_inches = int_value != 0;
 801cfbe:	3900      	subs	r1, #0
 801cfc0:	bf18      	it	ne
 801cfc2:	2101      	movne	r1, #1
 801cfc4:	4b06      	ldr	r3, [pc, #24]	@ (801cfe0 <set_report_inches+0x24>)
 801cfc6:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801cfca:	f361 0200 	bfi	r2, r1, #0, #1
 801cfce:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
    report_init();
 801cfd2:	f7fc fc65 	bl	80198a0 <report_init>
    system_flag_wco_change(); // Make sure WCO is immediately updated.
 801cfd6:	f005 f8ff 	bl	80221d8 <system_flag_wco_change>
}
 801cfda:	2000      	movs	r0, #0
 801cfdc:	bd08      	pop	{r3, pc}
 801cfde:	bf00      	nop
 801cfe0:	200022f4 	.word	0x200022f4

0801cfe4 <strnumentries>:
{
 801cfe4:	b538      	push	{r3, r4, r5, lr}
    if(s == NULL || *s == '\0')
 801cfe6:	b170      	cbz	r0, 801d006 <strnumentries+0x22>
 801cfe8:	460d      	mov	r5, r1
 801cfea:	7803      	ldrb	r3, [r0, #0]
 801cfec:	b16b      	cbz	r3, 801d00a <strnumentries+0x26>
    uint32_t entries = 1;
 801cfee:	2401      	movs	r4, #1
 801cff0:	e001      	b.n	801cff6 <strnumentries+0x12>
        p++;
 801cff2:	1c58      	adds	r0, r3, #1
        entries++;
 801cff4:	3401      	adds	r4, #1
    while((p = strchr(p, delimiter))) {
 801cff6:	4629      	mov	r1, r5
 801cff8:	f007 ffac 	bl	8024f54 <strchr>
 801cffc:	4603      	mov	r3, r0
 801cffe:	2800      	cmp	r0, #0
 801d000:	d1f7      	bne.n	801cff2 <strnumentries+0xe>
}
 801d002:	4620      	mov	r0, r4
 801d004:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
 801d006:	2400      	movs	r4, #0
 801d008:	e7fb      	b.n	801d002 <strnumentries+0x1e>
 801d00a:	2400      	movs	r4, #0
 801d00c:	e7f9      	b.n	801d002 <strnumentries+0x1e>

0801d00e <get_decimal_places>:
    char *dp = format == NULL ? NULL : strchr(format, '.');
 801d00e:	b178      	cbz	r0, 801d030 <get_decimal_places+0x22>
{
 801d010:	b538      	push	{r3, r4, r5, lr}
 801d012:	4604      	mov	r4, r0
    char *dp = format == NULL ? NULL : strchr(format, '.');
 801d014:	212e      	movs	r1, #46	@ 0x2e
 801d016:	f007 ff9d 	bl	8024f54 <strchr>
    return dp ? strchr(format, '\0') - dp - 1 : 1;
 801d01a:	4605      	mov	r5, r0
 801d01c:	b150      	cbz	r0, 801d034 <get_decimal_places+0x26>
 801d01e:	4620      	mov	r0, r4
 801d020:	f7eb f86e 	bl	8008100 <strlen>
 801d024:	4420      	add	r0, r4
 801d026:	1b40      	subs	r0, r0, r5
 801d028:	b2c0      	uxtb	r0, r0
 801d02a:	3801      	subs	r0, #1
 801d02c:	b2c0      	uxtb	r0, r0
}
 801d02e:	bd38      	pop	{r3, r4, r5, pc}
    return dp ? strchr(format, '\0') - dp - 1 : 1;
 801d030:	2001      	movs	r0, #1
}
 801d032:	4770      	bx	lr
    return dp ? strchr(format, '\0') - dp - 1 : 1;
 801d034:	2001      	movs	r0, #1
 801d036:	e7fa      	b.n	801d02e <get_decimal_places+0x20>

0801d038 <validate_uint_value>:
{
 801d038:	b530      	push	{r4, r5, lr}
 801d03a:	b083      	sub	sp, #12
 801d03c:	4604      	mov	r4, r0
 801d03e:	460d      	mov	r5, r1
    uint_fast8_t set_idx = 0;
 801d040:	2300      	movs	r3, #0
 801d042:	9300      	str	r3, [sp, #0]
    if(setting->min_value) {
 801d044:	6940      	ldr	r0, [r0, #20]
 801d046:	b168      	cbz	r0, 801d064 <validate_uint_value+0x2c>
        if((status = read_uint((char *)setting->min_value, &set_idx, &val)) != Status_OK)
 801d048:	aa01      	add	r2, sp, #4
 801d04a:	4669      	mov	r1, sp
 801d04c:	f7f8 fe50 	bl	8015cf0 <read_uint>
 801d050:	b9d8      	cbnz	r0, 801d08a <validate_uint_value+0x52>
        if(!(value >= val || (setting->flags.allow_null && value == 0)))
 801d052:	9b01      	ldr	r3, [sp, #4]
 801d054:	42ab      	cmp	r3, r5
 801d056:	d905      	bls.n	801d064 <validate_uint_value+0x2c>
 801d058:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801d05c:	f013 0f02 	tst.w	r3, #2
 801d060:	d00e      	beq.n	801d080 <validate_uint_value+0x48>
 801d062:	b97d      	cbnz	r5, 801d084 <validate_uint_value+0x4c>
    if(setting->max_value) {
 801d064:	69a0      	ldr	r0, [r4, #24]
 801d066:	b178      	cbz	r0, 801d088 <validate_uint_value+0x50>
        set_idx = 0;
 801d068:	2300      	movs	r3, #0
 801d06a:	9300      	str	r3, [sp, #0]
        if((status = read_uint((char *)setting->max_value, &set_idx, &val)) != Status_OK)
 801d06c:	aa01      	add	r2, sp, #4
 801d06e:	4669      	mov	r1, sp
 801d070:	f7f8 fe3e 	bl	8015cf0 <read_uint>
 801d074:	b958      	cbnz	r0, 801d08e <validate_uint_value+0x56>
        if(value > val)
 801d076:	9b01      	ldr	r3, [sp, #4]
 801d078:	42ab      	cmp	r3, r5
 801d07a:	d206      	bcs.n	801d08a <validate_uint_value+0x52>
            return Status_SettingValueOutOfRange;
 801d07c:	2034      	movs	r0, #52	@ 0x34
 801d07e:	e004      	b.n	801d08a <validate_uint_value+0x52>
            return Status_SettingValueOutOfRange;
 801d080:	2034      	movs	r0, #52	@ 0x34
 801d082:	e002      	b.n	801d08a <validate_uint_value+0x52>
 801d084:	2034      	movs	r0, #52	@ 0x34
 801d086:	e000      	b.n	801d08a <validate_uint_value+0x52>
    return Status_OK;
 801d088:	2000      	movs	r0, #0
}
 801d08a:	b003      	add	sp, #12
 801d08c:	bd30      	pop	{r4, r5, pc}
            return Status_BadNumberFormat;
 801d08e:	2002      	movs	r0, #2
 801d090:	e7fb      	b.n	801d08a <validate_uint_value+0x52>

0801d092 <setting_validate_me_uint>:
{
    return !(type == Setting_NonCore || type == Setting_NonCoreFn);
}

static status_code_t setting_validate_me_uint (const setting_detail_t *setting, char *svalue)
{
 801d092:	b530      	push	{r4, r5, lr}
 801d094:	b083      	sub	sp, #12
 801d096:	4604      	mov	r4, r0
 801d098:	4608      	mov	r0, r1
    uint_fast8_t idx = 0;
 801d09a:	2300      	movs	r3, #0
 801d09c:	9301      	str	r3, [sp, #4]
    uint32_t value;
    status_code_t status;

    if((status = read_uint(svalue, &idx, &value)) != Status_OK)
 801d09e:	466a      	mov	r2, sp
 801d0a0:	a901      	add	r1, sp, #4
 801d0a2:	f7f8 fe25 	bl	8015cf0 <read_uint>
 801d0a6:	4605      	mov	r5, r0
 801d0a8:	bb68      	cbnz	r0, 801d106 <setting_validate_me_uint+0x74>
        return status;

    switch(setting->datatype) {
 801d0aa:	7b23      	ldrb	r3, [r4, #12]
 801d0ac:	2b0b      	cmp	r3, #11
 801d0ae:	d82a      	bhi.n	801d106 <setting_validate_me_uint+0x74>
 801d0b0:	e8df f003 	tbb	[pc, r3]
 801d0b4:	160b0b06 	.word	0x160b0b06
 801d0b8:	2929241f 	.word	0x2929241f
 801d0bc:	24242929 	.word	0x24242929

        case Format_Bool:
            if(!(value == 0 || value == 1))
 801d0c0:	9b00      	ldr	r3, [sp, #0]
 801d0c2:	2b01      	cmp	r3, #1
 801d0c4:	d91f      	bls.n	801d106 <setting_validate_me_uint+0x74>
                status = Status_SettingValueOutOfRange;
 801d0c6:	2534      	movs	r5, #52	@ 0x34
 801d0c8:	e01d      	b.n	801d106 <setting_validate_me_uint+0x74>
            break;

        case Format_Bitfield:
        case Format_XBitfield:;
            if(value >= (1UL << strnumentries(setting->format, ',')))
 801d0ca:	212c      	movs	r1, #44	@ 0x2c
 801d0cc:	6920      	ldr	r0, [r4, #16]
 801d0ce:	f7ff ff89 	bl	801cfe4 <strnumentries>
 801d0d2:	2301      	movs	r3, #1
 801d0d4:	4083      	lsls	r3, r0
 801d0d6:	9a00      	ldr	r2, [sp, #0]
 801d0d8:	4293      	cmp	r3, r2
 801d0da:	d814      	bhi.n	801d106 <setting_validate_me_uint+0x74>
                status = Status_SettingValueOutOfRange;
 801d0dc:	2534      	movs	r5, #52	@ 0x34
 801d0de:	e012      	b.n	801d106 <setting_validate_me_uint+0x74>
            break;

        case Format_RadioButtons:
            if(value >= strnumentries(setting->format, ','))
 801d0e0:	212c      	movs	r1, #44	@ 0x2c
 801d0e2:	6920      	ldr	r0, [r4, #16]
 801d0e4:	f7ff ff7e 	bl	801cfe4 <strnumentries>
 801d0e8:	9b00      	ldr	r3, [sp, #0]
 801d0ea:	4298      	cmp	r0, r3
 801d0ec:	d80b      	bhi.n	801d106 <setting_validate_me_uint+0x74>
                status = Status_SettingValueOutOfRange;
 801d0ee:	2534      	movs	r5, #52	@ 0x34
 801d0f0:	e009      	b.n	801d106 <setting_validate_me_uint+0x74>
            break;

        case Format_AxisMask:
            if(value >= (1 << N_AXIS))
 801d0f2:	9b00      	ldr	r3, [sp, #0]
 801d0f4:	2b07      	cmp	r3, #7
 801d0f6:	d906      	bls.n	801d106 <setting_validate_me_uint+0x74>
                status = Status_SettingValueOutOfRange;
 801d0f8:	2534      	movs	r5, #52	@ 0x34
 801d0fa:	e004      	b.n	801d106 <setting_validate_me_uint+0x74>
            break;

        case Format_Int8:
        case Format_Int16:
        case Format_Integer:
            status = validate_uint_value(setting, value);
 801d0fc:	9900      	ldr	r1, [sp, #0]
 801d0fe:	4620      	mov	r0, r4
 801d100:	f7ff ff9a 	bl	801d038 <validate_uint_value>
 801d104:	4605      	mov	r5, r0
        default:
            break;
    }

    return status;
}
 801d106:	4628      	mov	r0, r5
 801d108:	b003      	add	sp, #12
 801d10a:	bd30      	pop	{r4, r5, pc}

0801d10c <validate_value>:
{
 801d10c:	b510      	push	{r4, lr}
 801d10e:	ed2d 8b02 	vpush	{d8}
 801d112:	b082      	sub	sp, #8
 801d114:	4604      	mov	r4, r0
 801d116:	eeb0 8a40 	vmov.f32	s16, s0
    uint_fast8_t set_idx = 0;
 801d11a:	2300      	movs	r3, #0
 801d11c:	9300      	str	r3, [sp, #0]
    if(setting->min_value) {
 801d11e:	6940      	ldr	r0, [r0, #20]
 801d120:	b1b8      	cbz	r0, 801d152 <validate_value+0x46>
        if(!read_float((char *)setting->min_value, &set_idx, &val))
 801d122:	aa01      	add	r2, sp, #4
 801d124:	4669      	mov	r1, sp
 801d126:	f7f8 fe2d 	bl	8015d84 <read_float>
 801d12a:	b348      	cbz	r0, 801d180 <validate_value+0x74>
        if(!(value >= val || (setting->flags.allow_null && value == 0.0f)))
 801d12c:	eddd 7a01 	vldr	s15, [sp, #4]
 801d130:	eef4 7ac8 	vcmpe.f32	s15, s16
 801d134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d138:	d910      	bls.n	801d15c <validate_value+0x50>
 801d13a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801d13e:	f013 0f02 	tst.w	r3, #2
 801d142:	d01f      	beq.n	801d184 <validate_value+0x78>
 801d144:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801d148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d14c:	d006      	beq.n	801d15c <validate_value+0x50>
            return Status_SettingValueOutOfRange;
 801d14e:	2034      	movs	r0, #52	@ 0x34
 801d150:	e01d      	b.n	801d18e <validate_value+0x82>
    } else if(value < 0.0f)
 801d152:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801d156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d15a:	d415      	bmi.n	801d188 <validate_value+0x7c>
    if(setting->max_value) {
 801d15c:	69a0      	ldr	r0, [r4, #24]
 801d15e:	b1a8      	cbz	r0, 801d18c <validate_value+0x80>
        set_idx = 0;
 801d160:	2300      	movs	r3, #0
 801d162:	9300      	str	r3, [sp, #0]
        if(!read_float((char *)setting->max_value, &set_idx, &val))
 801d164:	aa01      	add	r2, sp, #4
 801d166:	4669      	mov	r1, sp
 801d168:	f7f8 fe0c 	bl	8015d84 <read_float>
 801d16c:	b198      	cbz	r0, 801d196 <validate_value+0x8a>
        if(value > val)
 801d16e:	eddd 7a01 	vldr	s15, [sp, #4]
 801d172:	eef4 7ac8 	vcmpe.f32	s15, s16
 801d176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d17a:	d40e      	bmi.n	801d19a <validate_value+0x8e>
    return Status_OK;
 801d17c:	2000      	movs	r0, #0
 801d17e:	e006      	b.n	801d18e <validate_value+0x82>
            return Status_BadNumberFormat;
 801d180:	2002      	movs	r0, #2
 801d182:	e004      	b.n	801d18e <validate_value+0x82>
            return Status_SettingValueOutOfRange;
 801d184:	2034      	movs	r0, #52	@ 0x34
 801d186:	e002      	b.n	801d18e <validate_value+0x82>
        return Status_NegativeValue;
 801d188:	2004      	movs	r0, #4
 801d18a:	e000      	b.n	801d18e <validate_value+0x82>
    return Status_OK;
 801d18c:	2000      	movs	r0, #0
}
 801d18e:	b002      	add	sp, #8
 801d190:	ecbd 8b02 	vpop	{d8}
 801d194:	bd10      	pop	{r4, pc}
            return Status_BadNumberFormat;
 801d196:	2002      	movs	r0, #2
 801d198:	e7f9      	b.n	801d18e <validate_value+0x82>
            return Status_SettingValueOutOfRange;
 801d19a:	2034      	movs	r0, #52	@ 0x34
 801d19c:	e7f7      	b.n	801d18e <validate_value+0x82>
	...

0801d1a0 <settings_changed_spindle>:
    // If no details available setting could nevertheless be a valid setting id.
    return setting == NULL ? Status_OK : setting_validate_me(setting, value, svalue);
}

static bool settings_changed_spindle (void)
{
 801d1a0:	b510      	push	{r4, lr}
    static spindle_settings_t spindle_settings = {0};

    bool changed;

    if((changed = memcmp(&spindle_settings, &settings.spindle, sizeof(spindle_settings_t))) != 0)
 801d1a2:	2274      	movs	r2, #116	@ 0x74
 801d1a4:	4907      	ldr	r1, [pc, #28]	@ (801d1c4 <settings_changed_spindle+0x24>)
 801d1a6:	4808      	ldr	r0, [pc, #32]	@ (801d1c8 <settings_changed_spindle+0x28>)
 801d1a8:	f007 fe93 	bl	8024ed2 <memcmp>
 801d1ac:	2800      	cmp	r0, #0
 801d1ae:	bf14      	ite	ne
 801d1b0:	2401      	movne	r4, #1
 801d1b2:	2400      	moveq	r4, #0
 801d1b4:	d004      	beq.n	801d1c0 <settings_changed_spindle+0x20>
        memcpy(&spindle_settings, &settings.spindle, sizeof(spindle_settings_t));
 801d1b6:	2274      	movs	r2, #116	@ 0x74
 801d1b8:	4902      	ldr	r1, [pc, #8]	@ (801d1c4 <settings_changed_spindle+0x24>)
 801d1ba:	4803      	ldr	r0, [pc, #12]	@ (801d1c8 <settings_changed_spindle+0x28>)
 801d1bc:	f008 f813 	bl	80251e6 <memcpy>

    return changed;
}
 801d1c0:	4620      	mov	r0, r4
 801d1c2:	bd10      	pop	{r4, pc}
 801d1c4:	20002368 	.word	0x20002368
 801d1c8:	20002208 	.word	0x20002208

0801d1cc <settings_register>:
    settingsd->next = details;
 801d1cc:	4b02      	ldr	r3, [pc, #8]	@ (801d1d8 <settings_register+0xc>)
 801d1ce:	681a      	ldr	r2, [r3, #0]
 801d1d0:	6190      	str	r0, [r2, #24]
    settingsd = details;
 801d1d2:	6018      	str	r0, [r3, #0]
}
 801d1d4:	4770      	bx	lr
 801d1d6:	bf00      	nop
 801d1d8:	20000218 	.word	0x20000218

0801d1dc <settings_get_details>:
}
 801d1dc:	4800      	ldr	r0, [pc, #0]	@ (801d1e0 <settings_get_details+0x4>)
 801d1de:	4770      	bx	lr
 801d1e0:	2000021c 	.word	0x2000021c

0801d1e4 <settings_get_axis_base>:
{
 801d1e4:	b538      	push	{r3, r4, r5, lr}
 801d1e6:	4604      	mov	r4, r0
 801d1e8:	460d      	mov	r5, r1
    setting_id_t base = normalize_id(id);
 801d1ea:	f7ff fa23 	bl	801c634 <normalize_id>
    *idx = id - base;
 801d1ee:	1a24      	subs	r4, r4, r0
 801d1f0:	602c      	str	r4, [r5, #0]
    return *idx < N_AXIS ? base : Setting_SettingsMax;
 801d1f2:	2c02      	cmp	r4, #2
 801d1f4:	d800      	bhi.n	801d1f8 <settings_get_axis_base+0x14>
}
 801d1f6:	bd38      	pop	{r3, r4, r5, pc}
    return *idx < N_AXIS ? base : Setting_SettingsMax;
 801d1f8:	f240 20e5 	movw	r0, #741	@ 0x2e5
 801d1fc:	e7fb      	b.n	801d1f6 <settings_get_axis_base+0x12>
	...

0801d200 <get_float>:
    if (setting >= Setting_AxisSettingsBase && setting <= Setting_AxisSettingsMax) {
 801d200:	f1a0 0364 	sub.w	r3, r0, #100	@ 0x64
 801d204:	b29b      	uxth	r3, r3
 801d206:	2b5d      	cmp	r3, #93	@ 0x5d
 801d208:	d905      	bls.n	801d216 <get_float+0x16>
    } else switch(setting) {
 801d20a:	f5b0 7fab 	cmp.w	r0, #342	@ 0x156
 801d20e:	d060      	beq.n	801d2d2 <get_float+0xd2>
    float value = 0.0f;
 801d210:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 801d2dc <get_float+0xdc>
}
 801d214:	4770      	bx	lr
{
 801d216:	b500      	push	{lr}
 801d218:	b083      	sub	sp, #12
        switch(settings_get_axis_base(setting, &idx)) {
 801d21a:	a901      	add	r1, sp, #4
 801d21c:	f7ff ffe2 	bl	801d1e4 <settings_get_axis_base>
 801d220:	2882      	cmp	r0, #130	@ 0x82
 801d222:	d816      	bhi.n	801d252 <get_float+0x52>
 801d224:	2864      	cmp	r0, #100	@ 0x64
 801d226:	d34c      	bcc.n	801d2c2 <get_float+0xc2>
 801d228:	3864      	subs	r0, #100	@ 0x64
 801d22a:	281e      	cmp	r0, #30
 801d22c:	d84c      	bhi.n	801d2c8 <get_float+0xc8>
 801d22e:	e8df f000 	tbb	[pc, r0]
 801d232:	4b1e      	.short	0x4b1e
 801d234:	4b4b4b4b 	.word	0x4b4b4b4b
 801d238:	4b4b4b4b 	.word	0x4b4b4b4b
 801d23c:	4b4b4b27 	.word	0x4b4b4b27
 801d240:	4b4b4b4b 	.word	0x4b4b4b4b
 801d244:	4b304b4b 	.word	0x4b304b4b
 801d248:	4b4b4b4b 	.word	0x4b4b4b4b
 801d24c:	4b4b4b4b 	.word	0x4b4b4b4b
 801d250:	3d          	.byte	0x3d
 801d251:	00          	.byte	0x00
 801d252:	28aa      	cmp	r0, #170	@ 0xaa
 801d254:	d108      	bne.n	801d268 <get_float+0x68>
                value = settings.axis[idx].dual_axis_offset;
 801d256:	9b01      	ldr	r3, [sp, #4]
 801d258:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d25c:	4a20      	ldr	r2, [pc, #128]	@ (801d2e0 <get_float+0xe0>)
 801d25e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d262:	ed93 0a10 	vldr	s0, [r3, #64]	@ 0x40
                break;
 801d266:	e031      	b.n	801d2cc <get_float+0xcc>
        switch(settings_get_axis_base(setting, &idx)) {
 801d268:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 801d2dc <get_float+0xdc>
 801d26c:	e02e      	b.n	801d2cc <get_float+0xcc>
                value = settings.axis[idx].steps_per_mm;
 801d26e:	9b01      	ldr	r3, [sp, #4]
 801d270:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d274:	4a1a      	ldr	r2, [pc, #104]	@ (801d2e0 <get_float+0xe0>)
 801d276:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d27a:	ed93 0a0c 	vldr	s0, [r3, #48]	@ 0x30
                break;
 801d27e:	e025      	b.n	801d2cc <get_float+0xcc>
                value = settings.axis[idx].max_rate;
 801d280:	9b01      	ldr	r3, [sp, #4]
 801d282:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d286:	4a16      	ldr	r2, [pc, #88]	@ (801d2e0 <get_float+0xe0>)
 801d288:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d28c:	ed93 0a0d 	vldr	s0, [r3, #52]	@ 0x34
                break;
 801d290:	e01c      	b.n	801d2cc <get_float+0xcc>
                value = settings.axis[idx].acceleration / (60.0f * 60.0f); // Convert from mm/min^2 to mm/sec^2.
 801d292:	9b01      	ldr	r3, [sp, #4]
 801d294:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d298:	4a11      	ldr	r2, [pc, #68]	@ (801d2e0 <get_float+0xe0>)
 801d29a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d29e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 801d2a2:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801d2e4 <get_float+0xe4>
 801d2a6:	ee87 0a27 	vdiv.f32	s0, s14, s15
                break;
 801d2aa:	e00f      	b.n	801d2cc <get_float+0xcc>
                value = -settings.axis[idx].max_travel; // Store as negative for grbl internal use.
 801d2ac:	9b01      	ldr	r3, [sp, #4]
 801d2ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d2b2:	4a0b      	ldr	r2, [pc, #44]	@ (801d2e0 <get_float+0xe0>)
 801d2b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d2b8:	ed93 0a0f 	vldr	s0, [r3, #60]	@ 0x3c
 801d2bc:	eeb1 0a40 	vneg.f32	s0, s0
                break;
 801d2c0:	e004      	b.n	801d2cc <get_float+0xcc>
        switch(settings_get_axis_base(setting, &idx)) {
 801d2c2:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 801d2dc <get_float+0xdc>
 801d2c6:	e001      	b.n	801d2cc <get_float+0xcc>
 801d2c8:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 801d2dc <get_float+0xdc>
}
 801d2cc:	b003      	add	sp, #12
 801d2ce:	f85d fb04 	ldr.w	pc, [sp], #4
            value = settings.tool_change.probing_distance;
 801d2d2:	4b03      	ldr	r3, [pc, #12]	@ (801d2e0 <get_float+0xe0>)
 801d2d4:	ed93 0a0a 	vldr	s0, [r3, #40]	@ 0x28
            break;
 801d2d8:	4770      	bx	lr
 801d2da:	bf00      	nop
 801d2dc:	00000000 	.word	0x00000000
 801d2e0:	200022f4 	.word	0x200022f4
 801d2e4:	45610000 	.word	0x45610000

0801d2e8 <set_axis_setting>:
{
 801d2e8:	b510      	push	{r4, lr}
 801d2ea:	ed2d 8b02 	vpush	{d8}
 801d2ee:	b082      	sub	sp, #8
 801d2f0:	eeb0 8a40 	vmov.f32	s16, s0
    switch(settings_get_axis_base(setting, &idx)) {
 801d2f4:	a901      	add	r1, sp, #4
 801d2f6:	f7ff ff75 	bl	801d1e4 <settings_get_axis_base>
 801d2fa:	2882      	cmp	r0, #130	@ 0x82
 801d2fc:	d827      	bhi.n	801d34e <set_axis_setting+0x66>
 801d2fe:	2864      	cmp	r0, #100	@ 0x64
 801d300:	f0c0 8131 	bcc.w	801d566 <set_axis_setting+0x27e>
 801d304:	3864      	subs	r0, #100	@ 0x64
 801d306:	281e      	cmp	r0, #30
 801d308:	f200 812f 	bhi.w	801d56a <set_axis_setting+0x282>
 801d30c:	e8df f010 	tbh	[pc, r0, lsl #1]
 801d310:	012d003b 	.word	0x012d003b
 801d314:	012d012d 	.word	0x012d012d
 801d318:	012d012d 	.word	0x012d012d
 801d31c:	012d012d 	.word	0x012d012d
 801d320:	012d012d 	.word	0x012d012d
 801d324:	012d00b6 	.word	0x012d00b6
 801d328:	012d012d 	.word	0x012d012d
 801d32c:	012d012d 	.word	0x012d012d
 801d330:	012d012d 	.word	0x012d012d
 801d334:	012d012d 	.word	0x012d012d
 801d338:	012d00da 	.word	0x012d00da
 801d33c:	012d012d 	.word	0x012d012d
 801d340:	012d012d 	.word	0x012d012d
 801d344:	012d012d 	.word	0x012d012d
 801d348:	012d012d 	.word	0x012d012d
 801d34c:	00ef      	.short	0x00ef
 801d34e:	28aa      	cmp	r0, #170	@ 0xaa
 801d350:	d117      	bne.n	801d382 <set_axis_setting+0x9a>
            if(hal.stepper.get_ganged && bit_istrue(hal.stepper.get_ganged(true).mask, bit(idx)))
 801d352:	4b8c      	ldr	r3, [pc, #560]	@ (801d584 <set_axis_setting+0x29c>)
 801d354:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801d358:	2b00      	cmp	r3, #0
 801d35a:	f000 810f 	beq.w	801d57c <set_axis_setting+0x294>
 801d35e:	2001      	movs	r0, #1
 801d360:	4798      	blx	r3
 801d362:	b2c0      	uxtb	r0, r0
 801d364:	9b01      	ldr	r3, [sp, #4]
 801d366:	40d8      	lsrs	r0, r3
 801d368:	f010 0f01 	tst.w	r0, #1
 801d36c:	f000 8108 	beq.w	801d580 <set_axis_setting+0x298>
                settings.axis[idx].dual_axis_offset = value;
 801d370:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d374:	4a84      	ldr	r2, [pc, #528]	@ (801d588 <set_axis_setting+0x2a0>)
 801d376:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d37a:	ed83 8a10 	vstr	s16, [r3, #64]	@ 0x40
    status_code_t status = Status_OK;
 801d37e:	2000      	movs	r0, #0
                settings.axis[idx].dual_axis_offset = value;
 801d380:	e0f4      	b.n	801d56c <set_axis_setting+0x284>
    switch(settings_get_axis_base(setting, &idx)) {
 801d382:	2035      	movs	r0, #53	@ 0x35
 801d384:	e0f2      	b.n	801d56c <set_axis_setting+0x284>
            if (hal.max_step_rate && value * settings.axis[idx].max_rate > (float)hal.max_step_rate * 60.0f)
 801d386:	4b7f      	ldr	r3, [pc, #508]	@ (801d584 <set_axis_setting+0x29c>)
 801d388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d38a:	b1bb      	cbz	r3, 801d3bc <set_axis_setting+0xd4>
 801d38c:	9a01      	ldr	r2, [sp, #4]
 801d38e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d392:	497d      	ldr	r1, [pc, #500]	@ (801d588 <set_axis_setting+0x2a0>)
 801d394:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801d398:	ed92 7a0d 	vldr	s14, [r2, #52]	@ 0x34
 801d39c:	ee27 7a08 	vmul.f32	s14, s14, s16
 801d3a0:	ee07 3a90 	vmov	s15, r3
 801d3a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d3a8:	eddf 6a78 	vldr	s13, [pc, #480]	@ 801d58c <set_axis_setting+0x2a4>
 801d3ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d3b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3b8:	f300 80dc 	bgt.w	801d574 <set_axis_setting+0x28c>
                if(settings.axis[idx].steps_per_mm > 0.0f && settings.axis[idx].steps_per_mm != value) {
 801d3bc:	9b01      	ldr	r3, [sp, #4]
 801d3be:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801d3c2:	4a71      	ldr	r2, [pc, #452]	@ (801d588 <set_axis_setting+0x2a0>)
 801d3c4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801d3c8:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 801d3cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3d4:	dd04      	ble.n	801d3e0 <set_axis_setting+0xf8>
 801d3d6:	eef4 7a48 	vcmp.f32	s15, s16
 801d3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3de:	d109      	bne.n	801d3f4 <set_axis_setting+0x10c>
                settings.axis[idx].steps_per_mm = value;
 801d3e0:	9b01      	ldr	r3, [sp, #4]
 801d3e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d3e6:	4a68      	ldr	r2, [pc, #416]	@ (801d588 <set_axis_setting+0x2a0>)
 801d3e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d3ec:	ed83 8a0c 	vstr	s16, [r3, #48]	@ 0x30
    status_code_t status = Status_OK;
 801d3f0:	2000      	movs	r0, #0
 801d3f2:	e0bb      	b.n	801d56c <set_axis_setting+0x284>
                    float comp = value / settings.axis[idx].steps_per_mm;
 801d3f4:	ee88 7a27 	vdiv.f32	s14, s16, s15
                    sys.position[idx] *= comp;
 801d3f8:	4c65      	ldr	r4, [pc, #404]	@ (801d590 <set_axis_setting+0x2a8>)
 801d3fa:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 801d3fe:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 801d402:	ee07 1a90 	vmov	s15, r1
 801d406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d40a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d40e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d412:	ee17 1a90 	vmov	r1, s15
 801d416:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
                    sys.home_position[idx] *= comp;
 801d41a:	f103 0216 	add.w	r2, r3, #22
 801d41e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d422:	edd2 7a00 	vldr	s15, [r2]
 801d426:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d42a:	edc2 7a00 	vstr	s15, [r2]
                    sys.probe_position[idx] *= comp;
 801d42e:	f103 020e 	add.w	r2, r3, #14
 801d432:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 801d436:	ee07 1a90 	vmov	s15, r1
 801d43a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d43e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d446:	ee17 1a90 	vmov	r1, s15
 801d44a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
                    sys.tlo_reference[idx] *= comp;
 801d44e:	3302      	adds	r3, #2
 801d450:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 801d454:	ee07 2a90 	vmov	s15, r2
 801d458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d45c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d464:	ee17 2a90 	vmov	r2, s15
 801d468:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                    sync_position();
 801d46c:	f7f9 fda2 	bl	8016fb4 <plan_sync_position>
 801d470:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 801d474:	4847      	ldr	r0, [pc, #284]	@ (801d594 <set_axis_setting+0x2ac>)
 801d476:	f004 fd7f 	bl	8021f78 <system_convert_array_steps_to_mpos>
 801d47a:	e7b1      	b.n	801d3e0 <set_axis_setting+0xf8>
            if (hal.max_step_rate && value * settings.axis[idx].steps_per_mm > (float)hal.max_step_rate * 60.0f)
 801d47c:	4b41      	ldr	r3, [pc, #260]	@ (801d584 <set_axis_setting+0x29c>)
 801d47e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d480:	b1b3      	cbz	r3, 801d4b0 <set_axis_setting+0x1c8>
 801d482:	9a01      	ldr	r2, [sp, #4]
 801d484:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d488:	493f      	ldr	r1, [pc, #252]	@ (801d588 <set_axis_setting+0x2a0>)
 801d48a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801d48e:	ed92 7a0c 	vldr	s14, [r2, #48]	@ 0x30
 801d492:	ee27 7a08 	vmul.f32	s14, s14, s16
 801d496:	ee07 3a90 	vmov	s15, r3
 801d49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d49e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801d58c <set_axis_setting+0x2a4>
 801d4a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d4a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4ae:	dc63      	bgt.n	801d578 <set_axis_setting+0x290>
                settings.axis[idx].max_rate = value;
 801d4b0:	9b01      	ldr	r3, [sp, #4]
 801d4b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d4b6:	4a34      	ldr	r2, [pc, #208]	@ (801d588 <set_axis_setting+0x2a0>)
 801d4b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d4bc:	ed83 8a0d 	vstr	s16, [r3, #52]	@ 0x34
    status_code_t status = Status_OK;
 801d4c0:	2000      	movs	r0, #0
 801d4c2:	e053      	b.n	801d56c <set_axis_setting+0x284>
            settings.axis[idx].acceleration = override_backup.acceleration[idx] = value * 60.0f * 60.0f; // Convert to mm/min^2 for grbl internal use.
 801d4c4:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801d58c <set_axis_setting+0x2a4>
 801d4c8:	ee28 0a27 	vmul.f32	s0, s16, s15
 801d4cc:	9b01      	ldr	r3, [sp, #4]
 801d4ce:	ee20 0a27 	vmul.f32	s0, s0, s15
 801d4d2:	4a31      	ldr	r2, [pc, #196]	@ (801d598 <set_axis_setting+0x2b0>)
 801d4d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d4d8:	ed82 0a01 	vstr	s0, [r2, #4]
 801d4dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d4e0:	4a29      	ldr	r2, [pc, #164]	@ (801d588 <set_axis_setting+0x2a0>)
 801d4e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d4e6:	ed83 0a0e 	vstr	s0, [r3, #56]	@ 0x38
    status_code_t status = Status_OK;
 801d4ea:	2000      	movs	r0, #0
            break;
 801d4ec:	e03e      	b.n	801d56c <set_axis_setting+0x284>
            if(settings.axis[idx].max_travel != -value) {
 801d4ee:	9a01      	ldr	r2, [sp, #4]
 801d4f0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 801d4f4:	4b24      	ldr	r3, [pc, #144]	@ (801d588 <set_axis_setting+0x2a0>)
 801d4f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801d4fa:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 801d4fe:	eeb1 8a48 	vneg.f32	s16, s16
 801d502:	eef4 7a48 	vcmp.f32	s15, s16
 801d506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d50a:	d116      	bne.n	801d53a <set_axis_setting+0x252>
            settings.axis[idx].max_travel = -value; // Store as negative for grbl internal use.
 801d50c:	9b01      	ldr	r3, [sp, #4]
 801d50e:	4a1e      	ldr	r2, [pc, #120]	@ (801d588 <set_axis_setting+0x2a0>)
 801d510:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d514:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d518:	ed83 8a0f 	vstr	s16, [r3, #60]	@ 0x3c
            if(settings.homing.flags.init_lock && (sys.homing.mask & sys.homed.mask) != sys.homing.mask) {
 801d51c:	f892 3114 	ldrb.w	r3, [r2, #276]	@ 0x114
 801d520:	f013 0f04 	tst.w	r3, #4
 801d524:	d005      	beq.n	801d532 <set_axis_setting+0x24a>
 801d526:	4a1a      	ldr	r2, [pc, #104]	@ (801d590 <set_axis_setting+0x2a8>)
 801d528:	7e93      	ldrb	r3, [r2, #26]
 801d52a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 801d52e:	4393      	bics	r3, r2
 801d530:	d111      	bne.n	801d556 <set_axis_setting+0x26e>
            tmp_set_soft_limits();
 801d532:	f7fe fee1 	bl	801c2f8 <tmp_set_soft_limits>
    status_code_t status = Status_OK;
 801d536:	2000      	movs	r0, #0
            break;
 801d538:	e018      	b.n	801d56c <set_axis_setting+0x284>
                bit_false(sys.homed.mask, bit(idx));
 801d53a:	4815      	ldr	r0, [pc, #84]	@ (801d590 <set_axis_setting+0x2a8>)
 801d53c:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 801d540:	2101      	movs	r1, #1
 801d542:	fa01 f202 	lsl.w	r2, r1, r2
 801d546:	ea23 0302 	bic.w	r3, r3, r2
 801d54a:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
                system_add_rt_report(Report_Homed);
 801d54e:	2004      	movs	r0, #4
 801d550:	f004 fdb6 	bl	80220c0 <system_add_rt_report>
 801d554:	e7da      	b.n	801d50c <set_axis_setting+0x224>
                system_raise_alarm(Alarm_HomingRequired);
 801d556:	200b      	movs	r0, #11
 801d558:	f004 fd64 	bl	8022024 <system_raise_alarm>
                grbl.report.feedback_message(Message_HomingCycleRequired);
 801d55c:	4b0f      	ldr	r3, [pc, #60]	@ (801d59c <set_axis_setting+0x2b4>)
 801d55e:	68db      	ldr	r3, [r3, #12]
 801d560:	200d      	movs	r0, #13
 801d562:	4798      	blx	r3
 801d564:	e7e5      	b.n	801d532 <set_axis_setting+0x24a>
    switch(settings_get_axis_base(setting, &idx)) {
 801d566:	2035      	movs	r0, #53	@ 0x35
 801d568:	e000      	b.n	801d56c <set_axis_setting+0x284>
 801d56a:	2035      	movs	r0, #53	@ 0x35
}
 801d56c:	b002      	add	sp, #8
 801d56e:	ecbd 8b02 	vpop	{d8}
 801d572:	bd10      	pop	{r4, pc}
                status = Status_MaxStepRateExceeded;
 801d574:	200c      	movs	r0, #12
 801d576:	e7f9      	b.n	801d56c <set_axis_setting+0x284>
                status = Status_MaxStepRateExceeded;
 801d578:	200c      	movs	r0, #12
 801d57a:	e7f7      	b.n	801d56c <set_axis_setting+0x284>
                status = Status_SettingDisabled;
 801d57c:	2035      	movs	r0, #53	@ 0x35
 801d57e:	e7f5      	b.n	801d56c <set_axis_setting+0x284>
 801d580:	2035      	movs	r0, #53	@ 0x35
 801d582:	e7f3      	b.n	801d56c <set_axis_setting+0x284>
 801d584:	200018dc 	.word	0x200018dc
 801d588:	200022f4 	.word	0x200022f4
 801d58c:	42700000 	.word	0x42700000
 801d590:	20001bbc 	.word	0x20001bbc
 801d594:	2000167c 	.word	0x2000167c
 801d598:	2000227c 	.word	0x2000227c
 801d59c:	20001ac4 	.word	0x20001ac4

0801d5a0 <setting_get_value>:
{
 801d5a0:	b510      	push	{r4, lr}
 801d5a2:	ed2d 8b02 	vpush	{d8}
    if(setting == NULL)
 801d5a6:	4604      	mov	r4, r0
 801d5a8:	2800      	cmp	r0, #0
 801d5aa:	d063      	beq.n	801d674 <setting_get_value+0xd4>
    switch(setting->type) {
 801d5ac:	7f02      	ldrb	r2, [r0, #28]
 801d5ae:	2a07      	cmp	r2, #7
 801d5b0:	d85f      	bhi.n	801d672 <setting_get_value+0xd2>
 801d5b2:	2301      	movs	r3, #1
 801d5b4:	4093      	lsls	r3, r2
 801d5b6:	f013 0faa 	tst.w	r3, #170	@ 0xaa
 801d5ba:	d131      	bne.n	801d620 <setting_get_value+0x80>
 801d5bc:	f013 0f55 	tst.w	r3, #85	@ 0x55
 801d5c0:	d05b      	beq.n	801d67a <setting_get_value+0xda>
            switch(setting->datatype) {
 801d5c2:	7b03      	ldrb	r3, [r0, #12]
 801d5c4:	2b0b      	cmp	r3, #11
 801d5c6:	d85a      	bhi.n	801d67e <setting_get_value+0xde>
 801d5c8:	e8df f003 	tbb	[pc, r3]
 801d5cc:	11111111 	.word	0x11111111
 801d5d0:	28061b11 	.word	0x28061b11
 801d5d4:	16112820 	.word	0x16112820
                    value = ftoa(*((float *)(setting->value)), get_decimal_places(setting->format));
 801d5d8:	6a03      	ldr	r3, [r0, #32]
 801d5da:	ed93 8a00 	vldr	s16, [r3]
 801d5de:	6900      	ldr	r0, [r0, #16]
 801d5e0:	f7ff fd15 	bl	801d00e <get_decimal_places>
 801d5e4:	eeb0 0a48 	vmov.f32	s0, s16
 801d5e8:	f7f8 faec 	bl	8015bc4 <ftoa>
                    break;
 801d5ec:	e042      	b.n	801d674 <setting_get_value+0xd4>
                    value = uitoa(*((uint8_t *)(setting->value)));
 801d5ee:	6a03      	ldr	r3, [r0, #32]
 801d5f0:	7818      	ldrb	r0, [r3, #0]
 801d5f2:	f7f8 fac5 	bl	8015b80 <uitoa>
                    break;
 801d5f6:	e03d      	b.n	801d674 <setting_get_value+0xd4>
                    value = uitoa(*((uint16_t *)(setting->value)));
 801d5f8:	6a03      	ldr	r3, [r0, #32]
 801d5fa:	8818      	ldrh	r0, [r3, #0]
 801d5fc:	f7f8 fac0 	bl	8015b80 <uitoa>
                    break;
 801d600:	e038      	b.n	801d674 <setting_get_value+0xd4>
                    value = uitoa(*((uint32_t *)(setting->value)));
 801d602:	6a03      	ldr	r3, [r0, #32]
 801d604:	6818      	ldr	r0, [r3, #0]
 801d606:	f7f8 fabb 	bl	8015b80 <uitoa>
                    break;
 801d60a:	e033      	b.n	801d674 <setting_get_value+0xd4>
                    value = hal.stream.state.webui_connected ? PASSWORD_MASK : ((char *)(setting->value));
 801d60c:	4b1f      	ldr	r3, [pc, #124]	@ (801d68c <setting_get_value+0xec>)
 801d60e:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 801d612:	f013 0f02 	tst.w	r3, #2
 801d616:	d134      	bne.n	801d682 <setting_get_value+0xe2>
 801d618:	6a00      	ldr	r0, [r0, #32]
 801d61a:	e02b      	b.n	801d674 <setting_get_value+0xd4>
                    value = ((char *)(setting->value));
 801d61c:	6a00      	ldr	r0, [r0, #32]
                    break;
 801d61e:	e029      	b.n	801d674 <setting_get_value+0xd4>
            setting_id_t id = (setting_id_t)(setting->id + offset);
 801d620:	8803      	ldrh	r3, [r0, #0]
 801d622:	fa13 f181 	uxtah	r1, r3, r1
 801d626:	b288      	uxth	r0, r1
            switch(setting->datatype) {
 801d628:	7b23      	ldrb	r3, [r4, #12]
 801d62a:	3b06      	subs	r3, #6
 801d62c:	2b03      	cmp	r3, #3
 801d62e:	d81b      	bhi.n	801d668 <setting_get_value+0xc8>
 801d630:	e8df f003 	tbb	[pc, r3]
 801d634:	170e1702 	.word	0x170e1702
                    value = ftoa(((setting_get_float_ptr)(setting->get_value))(id), get_decimal_places(setting->format));
 801d638:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801d63a:	4798      	blx	r3
 801d63c:	eeb0 8a40 	vmov.f32	s16, s0
 801d640:	6920      	ldr	r0, [r4, #16]
 801d642:	f7ff fce4 	bl	801d00e <get_decimal_places>
 801d646:	eeb0 0a48 	vmov.f32	s0, s16
 801d64a:	f7f8 fabb 	bl	8015bc4 <ftoa>
                    break;
 801d64e:	e011      	b.n	801d674 <setting_get_value+0xd4>
                    value = hal.stream.state.webui_connected ? "********" : ((setting_get_string_ptr)(setting->get_value))(id);
 801d650:	4b0e      	ldr	r3, [pc, #56]	@ (801d68c <setting_get_value+0xec>)
 801d652:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 801d656:	f013 0f02 	tst.w	r3, #2
 801d65a:	d114      	bne.n	801d686 <setting_get_value+0xe6>
 801d65c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801d65e:	4798      	blx	r3
 801d660:	e008      	b.n	801d674 <setting_get_value+0xd4>
                    value = ((setting_get_string_ptr)(setting->get_value))(id);
 801d662:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801d664:	4798      	blx	r3
                    break;
 801d666:	e005      	b.n	801d674 <setting_get_value+0xd4>
                    value = uitoa(((setting_get_int_ptr)(setting->get_value))(id));
 801d668:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801d66a:	4798      	blx	r3
 801d66c:	f7f8 fa88 	bl	8015b80 <uitoa>
                    break;
 801d670:	e000      	b.n	801d674 <setting_get_value+0xd4>
    switch(setting->type) {
 801d672:	2000      	movs	r0, #0
}
 801d674:	ecbd 8b02 	vpop	{d8}
 801d678:	bd10      	pop	{r4, pc}
    switch(setting->type) {
 801d67a:	2000      	movs	r0, #0
 801d67c:	e7fa      	b.n	801d674 <setting_get_value+0xd4>
 801d67e:	2000      	movs	r0, #0
 801d680:	e7f8      	b.n	801d674 <setting_get_value+0xd4>
                    value = hal.stream.state.webui_connected ? PASSWORD_MASK : ((char *)(setting->value));
 801d682:	4803      	ldr	r0, [pc, #12]	@ (801d690 <setting_get_value+0xf0>)
 801d684:	e7f6      	b.n	801d674 <setting_get_value+0xd4>
                    value = hal.stream.state.webui_connected ? "********" : ((setting_get_string_ptr)(setting->get_value))(id);
 801d686:	4802      	ldr	r0, [pc, #8]	@ (801d690 <setting_get_value+0xf0>)
 801d688:	e7f4      	b.n	801d674 <setting_get_value+0xd4>
 801d68a:	bf00      	nop
 801d68c:	200018dc 	.word	0x200018dc
 801d690:	0802c960 	.word	0x0802c960

0801d694 <setting_get_int_value>:
    if(setting) switch(setting->type) {
 801d694:	b358      	cbz	r0, 801d6ee <setting_get_int_value+0x5a>
{
 801d696:	b508      	push	{r3, lr}
 801d698:	4603      	mov	r3, r0
    if(setting) switch(setting->type) {
 801d69a:	7f00      	ldrb	r0, [r0, #28]
 801d69c:	2807      	cmp	r0, #7
 801d69e:	d828      	bhi.n	801d6f2 <setting_get_int_value+0x5e>
 801d6a0:	2201      	movs	r2, #1
 801d6a2:	4082      	lsls	r2, r0
 801d6a4:	f012 0faa 	tst.w	r2, #170	@ 0xaa
 801d6a8:	d116      	bne.n	801d6d8 <setting_get_int_value+0x44>
 801d6aa:	f012 0f55 	tst.w	r2, #85	@ 0x55
 801d6ae:	d022      	beq.n	801d6f6 <setting_get_int_value+0x62>
            switch(setting->datatype) {
 801d6b0:	7b1a      	ldrb	r2, [r3, #12]
 801d6b2:	2a0b      	cmp	r2, #11
 801d6b4:	d821      	bhi.n	801d6fa <setting_get_int_value+0x66>
 801d6b6:	e8df f002 	tbb	[pc, r2]
 801d6ba:	0606      	.short	0x0606
 801d6bc:	0c060606 	.word	0x0c060606
 801d6c0:	20202020 	.word	0x20202020
 801d6c4:	0906      	.short	0x0906
                    value = *((uint8_t *)(setting->value));
 801d6c6:	6a1b      	ldr	r3, [r3, #32]
 801d6c8:	7818      	ldrb	r0, [r3, #0]
                    break;
 801d6ca:	e013      	b.n	801d6f4 <setting_get_int_value+0x60>
                    value = *((uint16_t *)(setting->value));
 801d6cc:	6a1b      	ldr	r3, [r3, #32]
 801d6ce:	8818      	ldrh	r0, [r3, #0]
                    break;
 801d6d0:	e010      	b.n	801d6f4 <setting_get_int_value+0x60>
                    value = *((uint32_t *)(setting->value));
 801d6d2:	6a1b      	ldr	r3, [r3, #32]
 801d6d4:	6818      	ldr	r0, [r3, #0]
                    break;
 801d6d6:	e00d      	b.n	801d6f4 <setting_get_int_value+0x60>
            switch(setting->datatype) {
 801d6d8:	7b1a      	ldrb	r2, [r3, #12]
 801d6da:	3a06      	subs	r2, #6
 801d6dc:	2a03      	cmp	r2, #3
 801d6de:	d90e      	bls.n	801d6fe <setting_get_int_value+0x6a>
                    value = ((setting_get_int_ptr)(setting->get_value))((setting_id_t)(setting->id + offset));
 801d6e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d6e2:	881b      	ldrh	r3, [r3, #0]
 801d6e4:	fa13 f181 	uxtah	r1, r3, r1
 801d6e8:	b288      	uxth	r0, r1
 801d6ea:	4790      	blx	r2
                    break;
 801d6ec:	e002      	b.n	801d6f4 <setting_get_int_value+0x60>
    uint32_t value = 0;
 801d6ee:	2000      	movs	r0, #0
}
 801d6f0:	4770      	bx	lr
    if(setting) switch(setting->type) {
 801d6f2:	2000      	movs	r0, #0
}
 801d6f4:	bd08      	pop	{r3, pc}
    if(setting) switch(setting->type) {
 801d6f6:	2000      	movs	r0, #0
 801d6f8:	e7fc      	b.n	801d6f4 <setting_get_int_value+0x60>
 801d6fa:	2000      	movs	r0, #0
 801d6fc:	e7fa      	b.n	801d6f4 <setting_get_int_value+0x60>
    uint32_t value = 0;
 801d6fe:	2000      	movs	r0, #0
    return value;
 801d700:	e7f8      	b.n	801d6f4 <setting_get_int_value+0x60>
	...

0801d704 <settings_write_build_info>:
    if(hal.nvs.type != NVS_None)
 801d704:	4b07      	ldr	r3, [pc, #28]	@ (801d724 <settings_write_build_info+0x20>)
 801d706:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801d70a:	b153      	cbz	r3, 801d722 <settings_write_build_info+0x1e>
{
 801d70c:	b510      	push	{r4, lr}
 801d70e:	4601      	mov	r1, r0
        hal.nvs.memcpy_to_nvs(NVS_ADDR_BUILD_INFO, (uint8_t *)line, sizeof(stored_line_t), true);
 801d710:	4b04      	ldr	r3, [pc, #16]	@ (801d724 <settings_write_build_info+0x20>)
 801d712:	f8d3 4190 	ldr.w	r4, [r3, #400]	@ 0x190
 801d716:	2301      	movs	r3, #1
 801d718:	2246      	movs	r2, #70	@ 0x46
 801d71a:	f240 30ae 	movw	r0, #942	@ 0x3ae
 801d71e:	47a0      	blx	r4
}
 801d720:	bd10      	pop	{r4, pc}
 801d722:	4770      	bx	lr
 801d724:	200018dc 	.word	0x200018dc

0801d728 <settings_read_build_info>:
{
 801d728:	b538      	push	{r3, r4, r5, lr}
 801d72a:	4604      	mov	r4, r0
    if (!(hal.nvs.type != NVS_None && hal.nvs.memcpy_from_nvs((uint8_t *)line, NVS_ADDR_BUILD_INFO, sizeof(stored_line_t), true) == NVS_TransferResult_OK)) {
 801d72c:	4b0b      	ldr	r3, [pc, #44]	@ (801d75c <settings_read_build_info+0x34>)
 801d72e:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801d732:	b14b      	cbz	r3, 801d748 <settings_read_build_info+0x20>
 801d734:	4b09      	ldr	r3, [pc, #36]	@ (801d75c <settings_read_build_info+0x34>)
 801d736:	f8d3 5194 	ldr.w	r5, [r3, #404]	@ 0x194
 801d73a:	2301      	movs	r3, #1
 801d73c:	2246      	movs	r2, #70	@ 0x46
 801d73e:	f240 31ae 	movw	r1, #942	@ 0x3ae
 801d742:	47a8      	blx	r5
 801d744:	2802      	cmp	r0, #2
 801d746:	d006      	beq.n	801d756 <settings_read_build_info+0x2e>
        line[0] = 0; // Empty line
 801d748:	2500      	movs	r5, #0
 801d74a:	7025      	strb	r5, [r4, #0]
        settings_write_build_info(line);
 801d74c:	4620      	mov	r0, r4
 801d74e:	f7ff ffd9 	bl	801d704 <settings_write_build_info>
        return false;
 801d752:	4628      	mov	r0, r5
}
 801d754:	bd38      	pop	{r3, r4, r5, pc}
    return true;
 801d756:	2001      	movs	r0, #1
 801d758:	e7fc      	b.n	801d754 <settings_read_build_info+0x2c>
 801d75a:	bf00      	nop
 801d75c:	200018dc 	.word	0x200018dc

0801d760 <settings_write_startup_line>:
{
 801d760:	b510      	push	{r4, lr}
    assert(idx < N_STARTUP_LINE);
 801d762:	2801      	cmp	r0, #1
 801d764:	d810      	bhi.n	801d788 <settings_write_startup_line+0x28>
    if(hal.nvs.type != NVS_None)
 801d766:	4b0c      	ldr	r3, [pc, #48]	@ (801d798 <settings_write_startup_line+0x38>)
 801d768:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801d76c:	b15b      	cbz	r3, 801d786 <settings_write_startup_line+0x26>
        hal.nvs.memcpy_to_nvs(NVS_ADDR_STARTUP_BLOCK + idx * (sizeof(stored_line_t) + NVS_CRC_BYTES), (uint8_t *)line, sizeof(stored_line_t), true);
 801d76e:	4b0a      	ldr	r3, [pc, #40]	@ (801d798 <settings_write_startup_line+0x38>)
 801d770:	f8d3 4190 	ldr.w	r4, [r3, #400]	@ 0x190
 801d774:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 801d778:	ebc0 00c3 	rsb	r0, r0, r3, lsl #3
 801d77c:	2301      	movs	r3, #1
 801d77e:	2246      	movs	r2, #70	@ 0x46
 801d780:	f200 301f 	addw	r0, r0, #799	@ 0x31f
 801d784:	47a0      	blx	r4
}
 801d786:	bd10      	pop	{r4, pc}
    assert(idx < N_STARTUP_LINE);
 801d788:	4b04      	ldr	r3, [pc, #16]	@ (801d79c <settings_write_startup_line+0x3c>)
 801d78a:	4a05      	ldr	r2, [pc, #20]	@ (801d7a0 <settings_write_startup_line+0x40>)
 801d78c:	f640 0143 	movw	r1, #2115	@ 0x843
 801d790:	4804      	ldr	r0, [pc, #16]	@ (801d7a4 <settings_write_startup_line+0x44>)
 801d792:	f005 fac7 	bl	8022d24 <__assert_func>
 801d796:	bf00      	nop
 801d798:	200018dc 	.word	0x200018dc
 801d79c:	0802c96c 	.word	0x0802c96c
 801d7a0:	0802ca10 	.word	0x0802ca10
 801d7a4:	0802c984 	.word	0x0802c984

0801d7a8 <settings_read_startup_line>:
{
 801d7a8:	b570      	push	{r4, r5, r6, lr}
    assert(idx < N_STARTUP_LINE);
 801d7aa:	2801      	cmp	r0, #1
 801d7ac:	d81c      	bhi.n	801d7e8 <settings_read_startup_line+0x40>
 801d7ae:	4604      	mov	r4, r0
 801d7b0:	460d      	mov	r5, r1
    if (!(hal.nvs.type != NVS_None && hal.nvs.memcpy_from_nvs((uint8_t *)line, NVS_ADDR_STARTUP_BLOCK + idx * (sizeof(stored_line_t) + NVS_CRC_BYTES), sizeof(stored_line_t), true) == NVS_TransferResult_OK)) {
 801d7b2:	4b12      	ldr	r3, [pc, #72]	@ (801d7fc <settings_read_startup_line+0x54>)
 801d7b4:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801d7b8:	b173      	cbz	r3, 801d7d8 <settings_read_startup_line+0x30>
 801d7ba:	4b10      	ldr	r3, [pc, #64]	@ (801d7fc <settings_read_startup_line+0x54>)
 801d7bc:	f8d3 6194 	ldr.w	r6, [r3, #404]	@ 0x194
 801d7c0:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 801d7c4:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
 801d7c8:	2301      	movs	r3, #1
 801d7ca:	2246      	movs	r2, #70	@ 0x46
 801d7cc:	f201 311f 	addw	r1, r1, #799	@ 0x31f
 801d7d0:	4628      	mov	r0, r5
 801d7d2:	47b0      	blx	r6
 801d7d4:	2802      	cmp	r0, #2
 801d7d6:	d00e      	beq.n	801d7f6 <settings_read_startup_line+0x4e>
        *line = '\0'; // Empty line
 801d7d8:	2600      	movs	r6, #0
 801d7da:	702e      	strb	r6, [r5, #0]
        settings_write_startup_line(idx, line);
 801d7dc:	4629      	mov	r1, r5
 801d7de:	4620      	mov	r0, r4
 801d7e0:	f7ff ffbe 	bl	801d760 <settings_write_startup_line>
        return false;
 801d7e4:	4630      	mov	r0, r6
}
 801d7e6:	bd70      	pop	{r4, r5, r6, pc}
    assert(idx < N_STARTUP_LINE);
 801d7e8:	4b05      	ldr	r3, [pc, #20]	@ (801d800 <settings_read_startup_line+0x58>)
 801d7ea:	4a06      	ldr	r2, [pc, #24]	@ (801d804 <settings_read_startup_line+0x5c>)
 801d7ec:	f44f 6105 	mov.w	r1, #2128	@ 0x850
 801d7f0:	4805      	ldr	r0, [pc, #20]	@ (801d808 <settings_read_startup_line+0x60>)
 801d7f2:	f005 fa97 	bl	8022d24 <__assert_func>
    return true;
 801d7f6:	2001      	movs	r0, #1
 801d7f8:	e7f5      	b.n	801d7e6 <settings_read_startup_line+0x3e>
 801d7fa:	bf00      	nop
 801d7fc:	200018dc 	.word	0x200018dc
 801d800:	0802c96c 	.word	0x0802c96c
 801d804:	0802c9f4 	.word	0x0802c9f4
 801d808:	0802c984 	.word	0x0802c984

0801d80c <settings_write_coord_data>:
{
 801d80c:	b510      	push	{r4, lr}
    assert(id <= N_CoordinateSystems);
 801d80e:	280c      	cmp	r0, #12
 801d810:	d810      	bhi.n	801d834 <settings_write_coord_data+0x28>
    if(hal.nvs.type != NVS_None)
 801d812:	4b0c      	ldr	r3, [pc, #48]	@ (801d844 <settings_write_coord_data+0x38>)
 801d814:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801d818:	b15b      	cbz	r3, 801d832 <settings_write_coord_data+0x26>
        hal.nvs.memcpy_to_nvs(NVS_ADDR_PARAMETERS + id * (sizeof(coord_data_t) + NVS_CRC_BYTES), (uint8_t *)coord_data, sizeof(coord_data_t), true);
 801d81a:	4b0a      	ldr	r3, [pc, #40]	@ (801d844 <settings_write_coord_data+0x38>)
 801d81c:	f8d3 4190 	ldr.w	r4, [r3, #400]	@ 0x190
 801d820:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801d824:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801d828:	2301      	movs	r3, #1
 801d82a:	220c      	movs	r2, #12
 801d82c:	f500 7000 	add.w	r0, r0, #512	@ 0x200
 801d830:	47a0      	blx	r4
}
 801d832:	bd10      	pop	{r4, pc}
    assert(id <= N_CoordinateSystems);
 801d834:	4b04      	ldr	r3, [pc, #16]	@ (801d848 <settings_write_coord_data+0x3c>)
 801d836:	4a05      	ldr	r2, [pc, #20]	@ (801d84c <settings_write_coord_data+0x40>)
 801d838:	f640 015e 	movw	r1, #2142	@ 0x85e
 801d83c:	4804      	ldr	r0, [pc, #16]	@ (801d850 <settings_write_coord_data+0x44>)
 801d83e:	f005 fa71 	bl	8022d24 <__assert_func>
 801d842:	bf00      	nop
 801d844:	200018dc 	.word	0x200018dc
 801d848:	0802c998 	.word	0x0802c998
 801d84c:	0802c9d8 	.word	0x0802c9d8
 801d850:	0802c984 	.word	0x0802c984

0801d854 <settings_read_coord_data>:
{
 801d854:	b570      	push	{r4, r5, r6, lr}
    assert(id <= N_CoordinateSystems);
 801d856:	280c      	cmp	r0, #12
 801d858:	d81e      	bhi.n	801d898 <settings_read_coord_data+0x44>
 801d85a:	4604      	mov	r4, r0
 801d85c:	460d      	mov	r5, r1
    if (!(hal.nvs.type != NVS_None && hal.nvs.memcpy_from_nvs((uint8_t *)coord_data, NVS_ADDR_PARAMETERS + id * (sizeof(coord_data_t) + NVS_CRC_BYTES), sizeof(coord_data_t), true) == NVS_TransferResult_OK)) {
 801d85e:	4b13      	ldr	r3, [pc, #76]	@ (801d8ac <settings_read_coord_data+0x58>)
 801d860:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801d864:	b173      	cbz	r3, 801d884 <settings_read_coord_data+0x30>
 801d866:	4b11      	ldr	r3, [pc, #68]	@ (801d8ac <settings_read_coord_data+0x58>)
 801d868:	f8d3 6194 	ldr.w	r6, [r3, #404]	@ 0x194
 801d86c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 801d870:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d874:	2301      	movs	r3, #1
 801d876:	220c      	movs	r2, #12
 801d878:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 801d87c:	4628      	mov	r0, r5
 801d87e:	47b0      	blx	r6
 801d880:	2802      	cmp	r0, #2
 801d882:	d010      	beq.n	801d8a6 <settings_read_coord_data+0x52>
        memset(coord_data, 0, sizeof(coord_data_t));
 801d884:	2600      	movs	r6, #0
 801d886:	602e      	str	r6, [r5, #0]
 801d888:	606e      	str	r6, [r5, #4]
 801d88a:	60ae      	str	r6, [r5, #8]
        settings_write_coord_data(id, coord_data);
 801d88c:	4629      	mov	r1, r5
 801d88e:	4620      	mov	r0, r4
 801d890:	f7ff ffbc 	bl	801d80c <settings_write_coord_data>
        return false;
 801d894:	4630      	mov	r0, r6
}
 801d896:	bd70      	pop	{r4, r5, r6, pc}
    assert(id <= N_CoordinateSystems);
 801d898:	4b05      	ldr	r3, [pc, #20]	@ (801d8b0 <settings_read_coord_data+0x5c>)
 801d89a:	4a06      	ldr	r2, [pc, #24]	@ (801d8b4 <settings_read_coord_data+0x60>)
 801d89c:	f640 016b 	movw	r1, #2155	@ 0x86b
 801d8a0:	4805      	ldr	r0, [pc, #20]	@ (801d8b8 <settings_read_coord_data+0x64>)
 801d8a2:	f005 fa3f 	bl	8022d24 <__assert_func>
    return true;
 801d8a6:	2001      	movs	r0, #1
 801d8a8:	e7f5      	b.n	801d896 <settings_read_coord_data+0x42>
 801d8aa:	bf00      	nop
 801d8ac:	200018dc 	.word	0x200018dc
 801d8b0:	0802c998 	.word	0x0802c998
 801d8b4:	0802c9bc 	.word	0x0802c9bc
 801d8b8:	0802c984 	.word	0x0802c984

0801d8bc <read_global_settings>:
{
 801d8bc:	b510      	push	{r4, lr}
    bool ok = hal.nvs.type != NVS_None && SETTINGS_VERSION == hal.nvs.get_byte(0) && hal.nvs.memcpy_from_nvs((uint8_t *)&settings, NVS_ADDR_GLOBAL, sizeof(settings_t), true) == NVS_TransferResult_OK;
 801d8be:	4b2b      	ldr	r3, [pc, #172]	@ (801d96c <read_global_settings+0xb0>)
 801d8c0:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801d8c4:	b1bb      	cbz	r3, 801d8f6 <read_global_settings+0x3a>
 801d8c6:	4b29      	ldr	r3, [pc, #164]	@ (801d96c <read_global_settings+0xb0>)
 801d8c8:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 801d8cc:	2000      	movs	r0, #0
 801d8ce:	4798      	blx	r3
 801d8d0:	2816      	cmp	r0, #22
 801d8d2:	d001      	beq.n	801d8d8 <read_global_settings+0x1c>
 801d8d4:	2400      	movs	r4, #0
 801d8d6:	e00f      	b.n	801d8f8 <read_global_settings+0x3c>
 801d8d8:	4b24      	ldr	r3, [pc, #144]	@ (801d96c <read_global_settings+0xb0>)
 801d8da:	f8d3 4194 	ldr.w	r4, [r3, #404]	@ 0x194
 801d8de:	2301      	movs	r3, #1
 801d8e0:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801d8e4:	4619      	mov	r1, r3
 801d8e6:	4822      	ldr	r0, [pc, #136]	@ (801d970 <read_global_settings+0xb4>)
 801d8e8:	47a0      	blx	r4
 801d8ea:	2802      	cmp	r0, #2
 801d8ec:	d001      	beq.n	801d8f2 <read_global_settings+0x36>
 801d8ee:	2400      	movs	r4, #0
 801d8f0:	e002      	b.n	801d8f8 <read_global_settings+0x3c>
 801d8f2:	2401      	movs	r4, #1
 801d8f4:	e000      	b.n	801d8f8 <read_global_settings+0x3c>
 801d8f6:	2400      	movs	r4, #0
    if(settings.mode == Mode_Laser && !spindle_get_caps(false).laser)
 801d8f8:	4b1d      	ldr	r3, [pc, #116]	@ (801d970 <read_global_settings+0xb4>)
 801d8fa:	7e1b      	ldrb	r3, [r3, #24]
 801d8fc:	2b01      	cmp	r3, #1
 801d8fe:	d026      	beq.n	801d94e <read_global_settings+0x92>
    if(settings.planner_buffer_blocks < 30 || settings.planner_buffer_blocks > 1000)
 801d900:	4b1b      	ldr	r3, [pc, #108]	@ (801d970 <read_global_settings+0xb4>)
 801d902:	8adb      	ldrh	r3, [r3, #22]
 801d904:	3b1e      	subs	r3, #30
 801d906:	b29b      	uxth	r3, r3
 801d908:	f240 32ca 	movw	r2, #970	@ 0x3ca
 801d90c:	4293      	cmp	r3, r2
 801d90e:	d902      	bls.n	801d916 <read_global_settings+0x5a>
        settings.planner_buffer_blocks = 35;
 801d910:	4b17      	ldr	r3, [pc, #92]	@ (801d970 <read_global_settings+0xb4>)
 801d912:	2223      	movs	r2, #35	@ 0x23
 801d914:	82da      	strh	r2, [r3, #22]
    if(!hal.driver_cap.spindle_encoder)
 801d916:	4b15      	ldr	r3, [pc, #84]	@ (801d96c <read_global_settings+0xb0>)
 801d918:	f993 31d8 	ldrsb.w	r3, [r3, #472]	@ 0x1d8
 801d91c:	2b00      	cmp	r3, #0
 801d91e:	db03      	blt.n	801d928 <read_global_settings+0x6c>
        settings.spindle.ppr = 0;
 801d920:	4b13      	ldr	r3, [pc, #76]	@ (801d970 <read_global_settings+0xb4>)
 801d922:	2200      	movs	r2, #0
 801d924:	f8a3 20e4 	strh.w	r2, [r3, #228]	@ 0xe4
    settings.control_invert.mask |= limits_override.mask;
 801d928:	4b11      	ldr	r3, [pc, #68]	@ (801d970 <read_global_settings+0xb4>)
 801d92a:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
 801d92e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801d932:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
    settings.control_disable_pullup.mask &= ~limits_override.mask;
 801d936:	f8b3 206e 	ldrh.w	r2, [r3, #110]	@ 0x6e
 801d93a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801d93e:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
    return ok && settings.version == SETTINGS_VERSION;
 801d942:	b174      	cbz	r4, 801d962 <read_global_settings+0xa6>
 801d944:	681b      	ldr	r3, [r3, #0]
 801d946:	2b16      	cmp	r3, #22
 801d948:	d00d      	beq.n	801d966 <read_global_settings+0xaa>
 801d94a:	2000      	movs	r0, #0
 801d94c:	e00a      	b.n	801d964 <read_global_settings+0xa8>
    if(settings.mode == Mode_Laser && !spindle_get_caps(false).laser)
 801d94e:	2000      	movs	r0, #0
 801d950:	f000 feb6 	bl	801e6c0 <spindle_get_caps>
 801d954:	f010 0f08 	tst.w	r0, #8
 801d958:	d1d2      	bne.n	801d900 <read_global_settings+0x44>
        settings.mode = Mode_Standard;
 801d95a:	4b05      	ldr	r3, [pc, #20]	@ (801d970 <read_global_settings+0xb4>)
 801d95c:	2200      	movs	r2, #0
 801d95e:	761a      	strb	r2, [r3, #24]
 801d960:	e7ce      	b.n	801d900 <read_global_settings+0x44>
    return ok && settings.version == SETTINGS_VERSION;
 801d962:	2000      	movs	r0, #0
}
 801d964:	bd10      	pop	{r4, pc}
    return ok && settings.version == SETTINGS_VERSION;
 801d966:	2001      	movs	r0, #1
 801d968:	e7fc      	b.n	801d964 <read_global_settings+0xa8>
 801d96a:	bf00      	nop
 801d96c:	200018dc 	.word	0x200018dc
 801d970:	200022f4 	.word	0x200022f4

0801d974 <settings_restore>:
{
 801d974:	b530      	push	{r4, r5, lr}
 801d976:	b097      	sub	sp, #92	@ 0x5c
 801d978:	4604      	mov	r4, r0
    memset(empty_line, 0xFF, sizeof(stored_line_t));
 801d97a:	2246      	movs	r2, #70	@ 0x46
 801d97c:	21ff      	movs	r1, #255	@ 0xff
 801d97e:	a804      	add	r0, sp, #16
 801d980:	f007 fad1 	bl	8024f26 <memset>
    *empty_line = '\0';
 801d984:	2000      	movs	r0, #0
 801d986:	f88d 0010 	strb.w	r0, [sp, #16]
    hal.nvs.put_byte(0, SETTINGS_VERSION); // Forces write to physical storage
 801d98a:	4b35      	ldr	r3, [pc, #212]	@ (801da60 <settings_restore+0xec>)
 801d98c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 801d990:	2116      	movs	r1, #22
 801d992:	4798      	blx	r3
    if (restore.defaults) {
 801d994:	b2e5      	uxtb	r5, r4
 801d996:	f014 0f01 	tst.w	r4, #1
 801d99a:	d110      	bne.n	801d9be <settings_restore+0x4a>
    if (restore.parameters) {
 801d99c:	f015 0f02 	tst.w	r5, #2
 801d9a0:	d135      	bne.n	801da0e <settings_restore+0x9a>
    if (restore.startup_lines) {
 801d9a2:	f015 0f04 	tst.w	r5, #4
 801d9a6:	d143      	bne.n	801da30 <settings_restore+0xbc>
    if (restore.build_info) {
 801d9a8:	f015 0f08 	tst.w	r5, #8
 801d9ac:	d149      	bne.n	801da42 <settings_restore+0xce>
    setting_details_t *details = setting_details.next;
 801d9ae:	4b2d      	ldr	r3, [pc, #180]	@ (801da64 <settings_restore+0xf0>)
 801d9b0:	699c      	ldr	r4, [r3, #24]
    if(details) do {
 801d9b2:	2c00      	cmp	r4, #0
 801d9b4:	d150      	bne.n	801da58 <settings_restore+0xe4>
    nvs_buffer_sync_physical();
 801d9b6:	f7f8 fd37 	bl	8016428 <nvs_buffer_sync_physical>
}
 801d9ba:	b017      	add	sp, #92	@ 0x5c
 801d9bc:	bd30      	pop	{r4, r5, pc}
        memcpy(&settings, &defaults, sizeof(settings_t));
 801d9be:	4c2a      	ldr	r4, [pc, #168]	@ (801da68 <settings_restore+0xf4>)
 801d9c0:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801d9c4:	4929      	ldr	r1, [pc, #164]	@ (801da6c <settings_restore+0xf8>)
 801d9c6:	4620      	mov	r0, r4
 801d9c8:	f007 fc0d 	bl	80251e6 <memcpy>
        settings.control_invert.mask = (settings.control_invert.mask & hal.signals_cap.mask) | limits_override.mask;
 801d9cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d9d0:	f8a4 306c 	strh.w	r3, [r4, #108]	@ 0x6c
        settings.spindle.invert.ccw &= spindle_get_caps(false).direction;
 801d9d4:	2000      	movs	r0, #0
 801d9d6:	f000 fe73 	bl	801e6c0 <spindle_get_caps>
 801d9da:	f894 30e6 	ldrb.w	r3, [r4, #230]	@ 0xe6
 801d9de:	f3c3 0240 	ubfx	r2, r3, #1, #1
 801d9e2:	ea02 0250 	and.w	r2, r2, r0, lsr #1
 801d9e6:	f362 0341 	bfi	r3, r2, #1, #1
 801d9ea:	f884 30e6 	strb.w	r3, [r4, #230]	@ 0xe6
        settings.spindle.invert.pwm &= spindle_get_caps(false).pwm_invert;
 801d9ee:	2000      	movs	r0, #0
 801d9f0:	f000 fe66 	bl	801e6c0 <spindle_get_caps>
 801d9f4:	f894 30e6 	ldrb.w	r3, [r4, #230]	@ 0xe6
 801d9f8:	f3c3 0280 	ubfx	r2, r3, #2, #1
 801d9fc:	ea02 1210 	and.w	r2, r2, r0, lsr #4
 801da00:	f362 0382 	bfi	r3, r2, #2, #1
 801da04:	f884 30e6 	strb.w	r3, [r4, #230]	@ 0xe6
        settings_write_global();
 801da08:	f7fe ffc4 	bl	801c994 <settings_write_global>
 801da0c:	e7c6      	b.n	801d99c <settings_restore+0x28>
        memset(coord_data, 0, sizeof(coord_data));
 801da0e:	2400      	movs	r4, #0
 801da10:	9401      	str	r4, [sp, #4]
 801da12:	9402      	str	r4, [sp, #8]
 801da14:	9403      	str	r4, [sp, #12]
        for (idx = 0; idx <= N_WorkCoordinateSystems; idx++)
 801da16:	e004      	b.n	801da22 <settings_restore+0xae>
            settings_write_coord_data((coord_system_id_t)idx, &coord_data);
 801da18:	a901      	add	r1, sp, #4
 801da1a:	b2e0      	uxtb	r0, r4
 801da1c:	f7ff fef6 	bl	801d80c <settings_write_coord_data>
        for (idx = 0; idx <= N_WorkCoordinateSystems; idx++)
 801da20:	3401      	adds	r4, #1
 801da22:	2c09      	cmp	r4, #9
 801da24:	d9f8      	bls.n	801da18 <settings_restore+0xa4>
        settings_write_coord_data(CoordinateSystem_G92, &coord_data); // Clear G92 offsets
 801da26:	a901      	add	r1, sp, #4
 801da28:	200b      	movs	r0, #11
 801da2a:	f7ff feef 	bl	801d80c <settings_write_coord_data>
 801da2e:	e7b8      	b.n	801d9a2 <settings_restore+0x2e>
        for (idx = 0; idx < N_STARTUP_LINE; idx++)
 801da30:	2400      	movs	r4, #0
 801da32:	2c01      	cmp	r4, #1
 801da34:	d8b8      	bhi.n	801d9a8 <settings_restore+0x34>
            settings_write_startup_line(idx, empty_line);
 801da36:	a904      	add	r1, sp, #16
 801da38:	b2e0      	uxtb	r0, r4
 801da3a:	f7ff fe91 	bl	801d760 <settings_write_startup_line>
        for (idx = 0; idx < N_STARTUP_LINE; idx++)
 801da3e:	3401      	adds	r4, #1
 801da40:	e7f7      	b.n	801da32 <settings_restore+0xbe>
        settings_write_build_info(empty_line);
 801da42:	a804      	add	r0, sp, #16
 801da44:	f7ff fe5e 	bl	801d704 <settings_write_build_info>
        settings_write_build_info(BUILD_INFO);
 801da48:	4809      	ldr	r0, [pc, #36]	@ (801da70 <settings_restore+0xfc>)
 801da4a:	f7ff fe5b 	bl	801d704 <settings_write_build_info>
 801da4e:	e7ae      	b.n	801d9ae <settings_restore+0x3a>
            details->restore();
 801da50:	4798      	blx	r3
    } while((details = details->next));
 801da52:	69a4      	ldr	r4, [r4, #24]
 801da54:	2c00      	cmp	r4, #0
 801da56:	d0ae      	beq.n	801d9b6 <settings_restore+0x42>
        if(details->restore)
 801da58:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801da5a:	2b00      	cmp	r3, #0
 801da5c:	d1f8      	bne.n	801da50 <settings_restore+0xdc>
 801da5e:	e7f8      	b.n	801da52 <settings_restore+0xde>
 801da60:	200018dc 	.word	0x200018dc
 801da64:	2000021c 	.word	0x2000021c
 801da68:	200022f4 	.word	0x200022f4
 801da6c:	08030a9c 	.word	0x08030a9c
 801da70:	0802c29c 	.word	0x0802c29c

0801da74 <settings_normalize_group>:
    return (group > Group_Axis0 && group < Group_Axis0 + N_AXIS) ? Group_Axis0 : group;
 801da74:	f1a0 032c 	sub.w	r3, r0, #44	@ 0x2c
 801da78:	b2db      	uxtb	r3, r3
 801da7a:	2b01      	cmp	r3, #1
 801da7c:	d900      	bls.n	801da80 <settings_normalize_group+0xc>
}
 801da7e:	4770      	bx	lr
    return (group > Group_Axis0 && group < Group_Axis0 + N_AXIS) ? Group_Axis0 : group;
 801da80:	202b      	movs	r0, #43	@ 0x2b
 801da82:	e7fc      	b.n	801da7e <settings_normalize_group+0xa>

0801da84 <setting_get_details>:
{
 801da84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801da88:	4680      	mov	r8, r0
 801da8a:	4689      	mov	r9, r1
    uint_fast16_t idx, offset = id - normalize_id(id);
 801da8c:	f7fe fdd2 	bl	801c634 <normalize_id>
 801da90:	4607      	mov	r7, r0
 801da92:	eba8 0800 	sub.w	r8, r8, r0
    setting_details_t *details = settings_get_details();
 801da96:	f7ff fba1 	bl	801d1dc <settings_get_details>
 801da9a:	4605      	mov	r5, r0
    id -= offset;
 801da9c:	e045      	b.n	801db2a <setting_get_details+0xa6>
                if(details->settings[idx].group == Group_Axis0 && grbl.on_set_axis_setting_unit)
 801da9e:	4a24      	ldr	r2, [pc, #144]	@ (801db30 <setting_get_details+0xac>)
 801daa0:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 801daa4:	b372      	cbz	r2, 801db04 <setting_get_details+0x80>
                    set_axis_unit(&details->settings[idx], grbl.on_set_axis_setting_unit(details->settings[idx].id, offset));
 801daa6:	4641      	mov	r1, r8
 801daa8:	5b98      	ldrh	r0, [r3, r6]
 801daaa:	4790      	blx	r2
    if(unit)
 801daac:	4601      	mov	r1, r0
 801daae:	b348      	cbz	r0, 801db04 <setting_get_details+0x80>
        strcpy((char *)setting->unit, unit);
 801dab0:	68a0      	ldr	r0, [r4, #8]
 801dab2:	f007 fb90 	bl	80251d6 <strcpy>
 801dab6:	e025      	b.n	801db04 <setting_get_details+0x80>
                if(offset && details->iterator == NULL && offset >= (details->settings[idx].group == Group_Encoder0 ? hal.encoder.get_n_encoders() : N_AXIS))
 801dab8:	68eb      	ldr	r3, [r5, #12]
 801daba:	4433      	add	r3, r6
 801dabc:	789b      	ldrb	r3, [r3, #2]
 801dabe:	2b1d      	cmp	r3, #29
 801dac0:	d004      	beq.n	801dacc <setting_get_details+0x48>
 801dac2:	2303      	movs	r3, #3
 801dac4:	4543      	cmp	r3, r8
 801dac6:	d823      	bhi.n	801db10 <setting_get_details+0x8c>
                    return NULL;
 801dac8:	2500      	movs	r5, #0
 801daca:	e028      	b.n	801db1e <setting_get_details+0x9a>
                if(offset && details->iterator == NULL && offset >= (details->settings[idx].group == Group_Encoder0 ? hal.encoder.get_n_encoders() : N_AXIS))
 801dacc:	4b19      	ldr	r3, [pc, #100]	@ (801db34 <setting_get_details+0xb0>)
 801dace:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801dad2:	4798      	blx	r3
 801dad4:	4603      	mov	r3, r0
 801dad6:	e7f5      	b.n	801dac4 <setting_get_details+0x40>
        for(idx = 0; idx < details->n_settings; idx++) {
 801dad8:	3401      	adds	r4, #1
 801dada:	892b      	ldrh	r3, [r5, #8]
 801dadc:	42a3      	cmp	r3, r4
 801dade:	d921      	bls.n	801db24 <setting_get_details+0xa0>
            if(details->settings[idx].id == id && is_available(&details->settings[idx])) {
 801dae0:	68eb      	ldr	r3, [r5, #12]
 801dae2:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 801dae6:	0106      	lsls	r6, r0, #4
 801dae8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 801daec:	5b9b      	ldrh	r3, [r3, r6]
 801daee:	429f      	cmp	r7, r3
 801daf0:	d1f2      	bne.n	801dad8 <setting_get_details+0x54>
 801daf2:	f7fe ff71 	bl	801c9d8 <is_available>
 801daf6:	2800      	cmp	r0, #0
 801daf8:	d0ee      	beq.n	801dad8 <setting_get_details+0x54>
                if(details->settings[idx].group == Group_Axis0 && grbl.on_set_axis_setting_unit)
 801dafa:	68eb      	ldr	r3, [r5, #12]
 801dafc:	199c      	adds	r4, r3, r6
 801dafe:	78a2      	ldrb	r2, [r4, #2]
 801db00:	2a2b      	cmp	r2, #43	@ 0x2b
 801db02:	d0cc      	beq.n	801da9e <setting_get_details+0x1a>
                if(offset && details->iterator == NULL && offset >= (details->settings[idx].group == Group_Encoder0 ? hal.encoder.get_n_encoders() : N_AXIS))
 801db04:	f1b8 0f00 	cmp.w	r8, #0
 801db08:	d002      	beq.n	801db10 <setting_get_details+0x8c>
 801db0a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801db0c:	2b00      	cmp	r3, #0
 801db0e:	d0d3      	beq.n	801dab8 <setting_get_details+0x34>
                if(set)
 801db10:	f1b9 0f00 	cmp.w	r9, #0
 801db14:	d001      	beq.n	801db1a <setting_get_details+0x96>
                    *set = details;
 801db16:	f8c9 5000 	str.w	r5, [r9]
                return &details->settings[idx];
 801db1a:	68ed      	ldr	r5, [r5, #12]
 801db1c:	4435      	add	r5, r6
}
 801db1e:	4628      	mov	r0, r5
 801db20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    } while((details = details->next));
 801db24:	69ad      	ldr	r5, [r5, #24]
 801db26:	2d00      	cmp	r5, #0
 801db28:	d0f9      	beq.n	801db1e <setting_get_details+0x9a>
        for(idx = 0; idx < details->n_settings; idx++) {
 801db2a:	2400      	movs	r4, #0
 801db2c:	e7d5      	b.n	801dada <setting_get_details+0x56>
 801db2e:	bf00      	nop
 801db30:	20001ac4 	.word	0x20001ac4
 801db34:	200018dc 	.word	0x200018dc

0801db38 <settings_iterator>:
{
 801db38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db3a:	b083      	sub	sp, #12
 801db3c:	4604      	mov	r4, r0
 801db3e:	460e      	mov	r6, r1
 801db40:	4617      	mov	r7, r2
    if(setting->group == Group_Axis0) {
 801db42:	7883      	ldrb	r3, [r0, #2]
 801db44:	2b2b      	cmp	r3, #43	@ 0x2b
 801db46:	d020      	beq.n	801db8a <settings_iterator+0x52>
    } else if(setting->flags.increment) {
 801db48:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801db4c:	f013 0f78 	tst.w	r3, #120	@ 0x78
 801db50:	d11e      	bne.n	801db90 <settings_iterator+0x58>
        ok = callback(setting, 0, data);
 801db52:	2100      	movs	r1, #0
 801db54:	47b0      	blx	r6
}
 801db56:	b003      	add	sp, #12
 801db58:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(!(ok = callback(setting, axis_idx, data)))
 801db5a:	463a      	mov	r2, r7
 801db5c:	4629      	mov	r1, r5
 801db5e:	4620      	mov	r0, r4
 801db60:	47b0      	blx	r6
 801db62:	2800      	cmp	r0, #0
 801db64:	d0f7      	beq.n	801db56 <settings_iterator+0x1e>
        for(axis_idx = 0; axis_idx < N_AXIS; axis_idx++) {
 801db66:	3501      	adds	r5, #1
 801db68:	2d02      	cmp	r5, #2
 801db6a:	d8f4      	bhi.n	801db56 <settings_iterator+0x1e>
            if(grbl.on_set_axis_setting_unit)
 801db6c:	4b0f      	ldr	r3, [pc, #60]	@ (801dbac <settings_iterator+0x74>)
 801db6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801db72:	2b00      	cmp	r3, #0
 801db74:	d0f1      	beq.n	801db5a <settings_iterator+0x22>
                set_axis_unit(setting, grbl.on_set_axis_setting_unit(setting->id, axis_idx));
 801db76:	4629      	mov	r1, r5
 801db78:	8820      	ldrh	r0, [r4, #0]
 801db7a:	4798      	blx	r3
    if(unit)
 801db7c:	4601      	mov	r1, r0
 801db7e:	2800      	cmp	r0, #0
 801db80:	d0eb      	beq.n	801db5a <settings_iterator+0x22>
        strcpy((char *)setting->unit, unit);
 801db82:	68a0      	ldr	r0, [r4, #8]
 801db84:	f007 fb27 	bl	80251d6 <strcpy>
 801db88:	e7e7      	b.n	801db5a <settings_iterator+0x22>
        for(axis_idx = 0; axis_idx < N_AXIS; axis_idx++) {
 801db8a:	2500      	movs	r5, #0
    bool ok = false;
 801db8c:	4628      	mov	r0, r5
 801db8e:	e7eb      	b.n	801db68 <settings_iterator+0x30>
        setting = setting_get_details(setting->id, &set);
 801db90:	a901      	add	r1, sp, #4
 801db92:	8800      	ldrh	r0, [r0, #0]
 801db94:	f7ff ff76 	bl	801da84 <setting_get_details>
        if(set->iterator)
 801db98:	9b01      	ldr	r3, [sp, #4]
 801db9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801db9c:	b11b      	cbz	r3, 801dba6 <settings_iterator+0x6e>
            ok = set->iterator(setting, callback, data);
 801db9e:	463a      	mov	r2, r7
 801dba0:	4631      	mov	r1, r6
 801dba2:	4798      	blx	r3
 801dba4:	e7d7      	b.n	801db56 <settings_iterator+0x1e>
    bool ok = false;
 801dba6:	2000      	movs	r0, #0
 801dba8:	e7d5      	b.n	801db56 <settings_iterator+0x1e>
 801dbaa:	bf00      	nop
 801dbac:	20001ac4 	.word	0x20001ac4

0801dbb0 <setting_get_description>:
{
 801dbb0:	b570      	push	{r4, r5, r6, lr}
 801dbb2:	4606      	mov	r6, r0
    if(grbl.on_setting_get_description == NULL || (description = grbl.on_setting_get_description(id)) == NULL) {
 801dbb4:	4b14      	ldr	r3, [pc, #80]	@ (801dc08 <setting_get_description+0x58>)
 801dbb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801dbb8:	b123      	cbz	r3, 801dbc4 <setting_get_description+0x14>
 801dbba:	4798      	blx	r3
 801dbbc:	4604      	mov	r4, r0
 801dbbe:	b110      	cbz	r0, 801dbc6 <setting_get_description+0x16>
}
 801dbc0:	4620      	mov	r0, r4
 801dbc2:	bd70      	pop	{r4, r5, r6, pc}
    const char *description = NULL;
 801dbc4:	2400      	movs	r4, #0
        setting_details_t *settings = settings_get_details();
 801dbc6:	f7ff fb09 	bl	801d1dc <settings_get_details>
 801dbca:	4605      	mov	r5, r0
        const setting_detail_t *setting = setting_get_details(id, NULL);
 801dbcc:	2100      	movs	r1, #0
 801dbce:	4630      	mov	r0, r6
 801dbd0:	f7ff ff58 	bl	801da84 <setting_get_details>
        if(setting) do {
 801dbd4:	4606      	mov	r6, r0
 801dbd6:	b990      	cbnz	r0, 801dbfe <setting_get_description+0x4e>
 801dbd8:	e7f2      	b.n	801dbc0 <setting_get_description+0x10>
                        description = settings->descriptions[idx].description;
 801dbda:	f8de 4004 	ldr.w	r4, [lr, #4]
                } while(idx && description == NULL);
 801dbde:	b14b      	cbz	r3, 801dbf4 <setting_get_description+0x44>
 801dbe0:	b944      	cbnz	r4, 801dbf4 <setting_get_description+0x44>
                    if(settings->descriptions[--idx].id == setting->id) {
 801dbe2:	3b01      	subs	r3, #1
 801dbe4:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801dbe8:	f832 c033 	ldrh.w	ip, [r2, r3, lsl #3]
 801dbec:	8831      	ldrh	r1, [r6, #0]
 801dbee:	458c      	cmp	ip, r1
 801dbf0:	d1f5      	bne.n	801dbde <setting_get_description+0x2e>
 801dbf2:	e7f2      	b.n	801dbda <setting_get_description+0x2a>
        } while(description == NULL && (settings = settings->next));
 801dbf4:	2c00      	cmp	r4, #0
 801dbf6:	d1e3      	bne.n	801dbc0 <setting_get_description+0x10>
 801dbf8:	69ad      	ldr	r5, [r5, #24]
 801dbfa:	2d00      	cmp	r5, #0
 801dbfc:	d0e0      	beq.n	801dbc0 <setting_get_description+0x10>
            if(settings->descriptions) {
 801dbfe:	696a      	ldr	r2, [r5, #20]
 801dc00:	2a00      	cmp	r2, #0
 801dc02:	d0f7      	beq.n	801dbf4 <setting_get_description+0x44>
                idx = settings->n_descriptions;
 801dc04:	8a2b      	ldrh	r3, [r5, #16]
 801dc06:	e7ec      	b.n	801dbe2 <setting_get_description+0x32>
 801dc08:	20001ac4 	.word	0x20001ac4

0801dc0c <setting_get_group_details>:
{
 801dc0c:	b510      	push	{r4, lr}
 801dc0e:	4604      	mov	r4, r0
    setting_details_t *details = settings_get_details();
 801dc10:	f7ff fae4 	bl	801d1dc <settings_get_details>
 801dc14:	4601      	mov	r1, r0
    const setting_group_detail_t *detail = NULL;
 801dc16:	2000      	movs	r0, #0
 801dc18:	e011      	b.n	801dc3e <setting_get_group_details+0x32>
        for(idx = 0; idx < details->n_groups; idx++) {
 801dc1a:	3301      	adds	r3, #1
 801dc1c:	780a      	ldrb	r2, [r1, #0]
 801dc1e:	429a      	cmp	r2, r3
 801dc20:	d90a      	bls.n	801dc38 <setting_get_group_details+0x2c>
            if(details->groups[idx].id == id)
 801dc22:	684a      	ldr	r2, [r1, #4]
 801dc24:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 801dc28:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 801dc2c:	f892 c001 	ldrb.w	ip, [r2, #1]
 801dc30:	45a4      	cmp	ip, r4
 801dc32:	d1f2      	bne.n	801dc1a <setting_get_group_details+0xe>
                detail = &details->groups[idx];
 801dc34:	4610      	mov	r0, r2
 801dc36:	e7f0      	b.n	801dc1a <setting_get_group_details+0xe>
    } while(detail == NULL && (details = details->next));
 801dc38:	b918      	cbnz	r0, 801dc42 <setting_get_group_details+0x36>
 801dc3a:	6989      	ldr	r1, [r1, #24]
 801dc3c:	b109      	cbz	r1, 801dc42 <setting_get_group_details+0x36>
        for(idx = 0; idx < details->n_groups; idx++) {
 801dc3e:	2300      	movs	r3, #0
 801dc40:	e7ec      	b.n	801dc1c <setting_get_group_details+0x10>
}
 801dc42:	bd10      	pop	{r4, pc}

0801dc44 <settings_is_group_available>:
{
 801dc44:	b570      	push	{r4, r5, r6, lr}
 801dc46:	4606      	mov	r6, r0
    const setting_group_detail_t *group = setting_get_group_details(id);
 801dc48:	f7ff ffe0 	bl	801dc0c <setting_get_group_details>
    if(!group)
 801dc4c:	2800      	cmp	r0, #0
 801dc4e:	d050      	beq.n	801dcf2 <settings_is_group_available+0xae>
 801dc50:	4604      	mov	r4, r0
    bool available = group->is_available ? group->is_available(group) : false;
 801dc52:	6883      	ldr	r3, [r0, #8]
 801dc54:	b11b      	cbz	r3, 801dc5e <settings_is_group_available+0x1a>
 801dc56:	4798      	blx	r3
 801dc58:	4601      	mov	r1, r0
 801dc5a:	2800      	cmp	r0, #0
 801dc5c:	d14c      	bne.n	801dcf8 <settings_is_group_available+0xb4>
    if(!available) switch(group->id) {
 801dc5e:	7863      	ldrb	r3, [r4, #1]
 801dc60:	3b02      	subs	r3, #2
 801dc62:	2b0c      	cmp	r3, #12
 801dc64:	d829      	bhi.n	801dcba <settings_is_group_available+0x76>
 801dc66:	e8df f003 	tbb	[pc, r3]
 801dc6a:	4646      	.short	0x4646
 801dc6c:	0e46281a 	.word	0x0e46281a
 801dc70:	46282814 	.word	0x46282814
 801dc74:	2807      	.short	0x2807
 801dc76:	46          	.byte	0x46
 801dc77:	00          	.byte	0x00
            available = hal.probe.get_state != NULL;
 801dc78:	4b20      	ldr	r3, [pc, #128]	@ (801dcfc <settings_is_group_available+0xb8>)
 801dc7a:	f8d3 10fc 	ldr.w	r1, [r3, #252]	@ 0xfc
 801dc7e:	3900      	subs	r1, #0
 801dc80:	bf18      	it	ne
 801dc82:	2101      	movne	r1, #1
            break;
 801dc84:	e038      	b.n	801dcf8 <settings_is_group_available+0xb4>
            available = hal.driver_cap.spindle_sync;
 801dc86:	4b1d      	ldr	r3, [pc, #116]	@ (801dcfc <settings_is_group_available+0xb8>)
 801dc88:	f893 11d9 	ldrb.w	r1, [r3, #473]	@ 0x1d9
 801dc8c:	f001 0101 	and.w	r1, r1, #1
            break;
 801dc90:	e032      	b.n	801dcf8 <settings_is_group_available+0xb4>
            available = hal.driver_cap.spindle_pid;
 801dc92:	4b1a      	ldr	r3, [pc, #104]	@ (801dcfc <settings_is_group_available+0xb8>)
 801dc94:	f893 11d9 	ldrb.w	r1, [r3, #473]	@ 0x1d9
 801dc98:	f3c1 1180 	ubfx	r1, r1, #6, #1
            break;
 801dc9c:	e02c      	b.n	801dcf8 <settings_is_group_available+0xb4>
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(true).mask != 0;
 801dc9e:	4b17      	ldr	r3, [pc, #92]	@ (801dcfc <settings_is_group_available+0xb8>)
 801dca0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801dca4:	b12b      	cbz	r3, 801dcb2 <settings_is_group_available+0x6e>
 801dca6:	2001      	movs	r0, #1
 801dca8:	4798      	blx	r3
 801dcaa:	b2c0      	uxtb	r0, r0
 801dcac:	b118      	cbz	r0, 801dcb6 <settings_is_group_available+0x72>
 801dcae:	2101      	movs	r1, #1
 801dcb0:	e022      	b.n	801dcf8 <settings_is_group_available+0xb4>
 801dcb2:	2100      	movs	r1, #0
 801dcb4:	e020      	b.n	801dcf8 <settings_is_group_available+0xb4>
 801dcb6:	2100      	movs	r1, #0
            break;
 801dcb8:	e01e      	b.n	801dcf8 <settings_is_group_available+0xb4>
    if(!available) switch(group->id) {
 801dcba:	4d11      	ldr	r5, [pc, #68]	@ (801dd00 <settings_is_group_available+0xbc>)
 801dcbc:	2100      	movs	r1, #0
 801dcbe:	e013      	b.n	801dce8 <settings_is_group_available+0xa4>
                        for(idx = 0; idx < details->n_settings; idx++) {
 801dcc0:	3401      	adds	r4, #1
 801dcc2:	892b      	ldrh	r3, [r5, #8]
 801dcc4:	42a3      	cmp	r3, r4
 801dcc6:	d90c      	bls.n	801dce2 <settings_is_group_available+0x9e>
                            if(details->settings[idx].group == id && (available = is_available(&details->settings[idx])))
 801dcc8:	68eb      	ldr	r3, [r5, #12]
 801dcca:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801dcce:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801dcd2:	7883      	ldrb	r3, [r0, #2]
 801dcd4:	42b3      	cmp	r3, r6
 801dcd6:	d1f3      	bne.n	801dcc0 <settings_is_group_available+0x7c>
 801dcd8:	f7fe fe7e 	bl	801c9d8 <is_available>
 801dcdc:	4601      	mov	r1, r0
 801dcde:	2800      	cmp	r0, #0
 801dce0:	d0ee      	beq.n	801dcc0 <settings_is_group_available+0x7c>
                } while(!available && (details = details->next));
 801dce2:	b949      	cbnz	r1, 801dcf8 <settings_is_group_available+0xb4>
 801dce4:	69ad      	ldr	r5, [r5, #24]
 801dce6:	b13d      	cbz	r5, 801dcf8 <settings_is_group_available+0xb4>
                    if(details->settings) {
 801dce8:	68eb      	ldr	r3, [r5, #12]
 801dcea:	2b00      	cmp	r3, #0
 801dcec:	d0f9      	beq.n	801dce2 <settings_is_group_available+0x9e>
                        for(idx = 0; idx < details->n_settings; idx++) {
 801dcee:	2400      	movs	r4, #0
 801dcf0:	e7e7      	b.n	801dcc2 <settings_is_group_available+0x7e>
        return false;
 801dcf2:	2100      	movs	r1, #0
 801dcf4:	e000      	b.n	801dcf8 <settings_is_group_available+0xb4>
    if(!available) switch(group->id) {
 801dcf6:	2101      	movs	r1, #1
}
 801dcf8:	4608      	mov	r0, r1
 801dcfa:	bd70      	pop	{r4, r5, r6, pc}
 801dcfc:	200018dc 	.word	0x200018dc
 801dd00:	2000021c 	.word	0x2000021c

0801dd04 <is_group_available>:
{
 801dd04:	b508      	push	{r3, lr}
    return settings_is_group_available(setting->group);
 801dd06:	7880      	ldrb	r0, [r0, #2]
 801dd08:	f7ff ff9c 	bl	801dc44 <settings_is_group_available>
}
 801dd0c:	bd08      	pop	{r3, pc}

0801dd0e <setting_datatype_to_external>:
    switch(datatype) {
 801dd0e:	f1a0 030a 	sub.w	r3, r0, #10
 801dd12:	2b01      	cmp	r3, #1
 801dd14:	d900      	bls.n	801dd18 <setting_datatype_to_external+0xa>
}
 801dd16:	4770      	bx	lr
            datatype = Format_Integer;
 801dd18:	2005      	movs	r0, #5
 801dd1a:	e7fc      	b.n	801dd16 <setting_datatype_to_external+0x8>

0801dd1c <setting_is_list>:
    return setting->datatype == Format_Bitfield || setting->datatype == Format_XBitfield || setting->datatype == Format_RadioButtons;
 801dd1c:	7b00      	ldrb	r0, [r0, #12]
 801dd1e:	3801      	subs	r0, #1
 801dd20:	b2c0      	uxtb	r0, r0
}
 801dd22:	2802      	cmp	r0, #2
 801dd24:	bf8c      	ite	hi
 801dd26:	2000      	movhi	r0, #0
 801dd28:	2001      	movls	r0, #1
 801dd2a:	4770      	bx	lr

0801dd2c <setting_remove_element>:
{
 801dd2c:	b538      	push	{r3, r4, r5, lr}
 801dd2e:	460c      	mov	r4, r1
    const setting_detail_t *setting = setting_get_details(id, NULL);
 801dd30:	2100      	movs	r1, #0
 801dd32:	f7ff fea7 	bl	801da84 <setting_get_details>
    if(setting && setting_is_list(setting))
 801dd36:	b118      	cbz	r0, 801dd40 <setting_remove_element+0x14>
 801dd38:	4605      	mov	r5, r0
 801dd3a:	f7ff ffef 	bl	801dd1c <setting_is_list>
 801dd3e:	b900      	cbnz	r0, 801dd42 <setting_remove_element+0x16>
}
 801dd40:	bd38      	pop	{r3, r4, r5, pc}
        remove_element((char *)setting->format, pos);
 801dd42:	4621      	mov	r1, r4
 801dd44:	6928      	ldr	r0, [r5, #16]
 801dd46:	f7fe fe51 	bl	801c9ec <remove_element>
}
 801dd4a:	e7f9      	b.n	801dd40 <setting_remove_element+0x14>

0801dd4c <setting_remove_elements>:
{
 801dd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd50:	4680      	mov	r8, r0
 801dd52:	460c      	mov	r4, r1
    if((setting = setting_get_details(id, NULL))) {
 801dd54:	2100      	movs	r1, #0
 801dd56:	f7ff fe95 	bl	801da84 <setting_get_details>
 801dd5a:	b310      	cbz	r0, 801dda2 <setting_remove_elements+0x56>
        char *format = (char *)setting->format, *s;
 801dd5c:	6907      	ldr	r7, [r0, #16]
        uint_fast8_t idx, entries = strnumentries(format, ',');
 801dd5e:	212c      	movs	r1, #44	@ 0x2c
 801dd60:	4638      	mov	r0, r7
 801dd62:	f7ff f93f 	bl	801cfe4 <strnumentries>
 801dd66:	4606      	mov	r6, r0
        for(idx = 0; idx < entries; idx++ ) {
 801dd68:	2500      	movs	r5, #0
 801dd6a:	e001      	b.n	801dd70 <setting_remove_elements+0x24>
            mask >>= 1;
 801dd6c:	0864      	lsrs	r4, r4, #1
        for(idx = 0; idx < entries; idx++ ) {
 801dd6e:	3501      	adds	r5, #1
 801dd70:	42b5      	cmp	r5, r6
 801dd72:	d209      	bcs.n	801dd88 <setting_remove_elements+0x3c>
            if(!(mask & 0x1))
 801dd74:	f014 0f01 	tst.w	r4, #1
 801dd78:	d1f8      	bne.n	801dd6c <setting_remove_elements+0x20>
                setting_remove_element(id, idx);
 801dd7a:	4629      	mov	r1, r5
 801dd7c:	4640      	mov	r0, r8
 801dd7e:	f7ff ffd5 	bl	801dd2c <setting_remove_element>
 801dd82:	e7f3      	b.n	801dd6c <setting_remove_elements+0x20>
            *s = '\0';
 801dd84:	2300      	movs	r3, #0
 801dd86:	7023      	strb	r3, [r4, #0]
        while((s = strrchr(format, ','))) {
 801dd88:	212c      	movs	r1, #44	@ 0x2c
 801dd8a:	4638      	mov	r0, r7
 801dd8c:	f007 f914 	bl	8024fb8 <strrchr>
 801dd90:	4604      	mov	r4, r0
 801dd92:	b130      	cbz	r0, 801dda2 <setting_remove_elements+0x56>
            if(strncmp(s, ",N/A", 4))
 801dd94:	2204      	movs	r2, #4
 801dd96:	4904      	ldr	r1, [pc, #16]	@ (801dda8 <setting_remove_elements+0x5c>)
 801dd98:	4620      	mov	r0, r4
 801dd9a:	f007 f8e8 	bl	8024f6e <strncmp>
 801dd9e:	2800      	cmp	r0, #0
 801dda0:	d0f0      	beq.n	801dd84 <setting_remove_elements+0x38>
}
 801dda2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dda6:	bf00      	nop
 801dda8:	0802c9b4 	.word	0x0802c9b4

0801ddac <setting_validate_me>:
{
 801ddac:	b570      	push	{r4, r5, r6, lr}
 801ddae:	4604      	mov	r4, r0
 801ddb0:	460d      	mov	r5, r1
    switch(setting->datatype) {
 801ddb2:	7b03      	ldrb	r3, [r0, #12]
 801ddb4:	2b0b      	cmp	r3, #11
 801ddb6:	d834      	bhi.n	801de22 <setting_validate_me+0x76>
 801ddb8:	e8df f003 	tbb	[pc, r3]
 801ddbc:	06060606 	.word	0x06060606
 801ddc0:	28090606 	.word	0x28090606
 801ddc4:	0606330c 	.word	0x0606330c
            status = setting_validate_me_uint(setting, svalue);
 801ddc8:	f7ff f963 	bl	801d092 <setting_validate_me_uint>
}
 801ddcc:	bd70      	pop	{r4, r5, r6, pc}
            status = validate_value(setting, value);
 801ddce:	f7ff f99d 	bl	801d10c <validate_value>
            break;
 801ddd2:	e7fb      	b.n	801ddcc <setting_validate_me+0x20>
                uint_fast16_t len = strlen(svalue);
 801ddd4:	4608      	mov	r0, r1
 801ddd6:	f7ea f993 	bl	8008100 <strlen>
 801ddda:	4606      	mov	r6, r0
                if(hal.stream.state.webui_connected && len == strlen(PASSWORD_MASK) && !strcmp(PASSWORD_MASK, svalue))
 801dddc:	4b12      	ldr	r3, [pc, #72]	@ (801de28 <setting_validate_me+0x7c>)
 801ddde:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 801dde2:	f013 0f02 	tst.w	r3, #2
 801dde6:	d001      	beq.n	801ddec <setting_validate_me+0x40>
 801dde8:	2808      	cmp	r0, #8
 801ddea:	d007      	beq.n	801ddfc <setting_validate_me+0x50>
                    status = validate_value(setting, (float)len);
 801ddec:	ee07 6a90 	vmov	s15, r6
 801ddf0:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801ddf4:	4620      	mov	r0, r4
 801ddf6:	f7ff f989 	bl	801d10c <validate_value>
 801ddfa:	e7e7      	b.n	801ddcc <setting_validate_me+0x20>
                if(hal.stream.state.webui_connected && len == strlen(PASSWORD_MASK) && !strcmp(PASSWORD_MASK, svalue))
 801ddfc:	4629      	mov	r1, r5
 801ddfe:	480b      	ldr	r0, [pc, #44]	@ (801de2c <setting_validate_me+0x80>)
 801de00:	f7ea f91e 	bl	8008040 <strcmp>
 801de04:	2800      	cmp	r0, #0
 801de06:	d1f1      	bne.n	801ddec <setting_validate_me+0x40>
                    status = Status_InvalidStatement;
 801de08:	2003      	movs	r0, #3
 801de0a:	e7df      	b.n	801ddcc <setting_validate_me+0x20>
                uint_fast16_t len = strlen(svalue);
 801de0c:	4608      	mov	r0, r1
 801de0e:	f7ea f977 	bl	8008100 <strlen>
 801de12:	ee00 0a10 	vmov	s0, r0
                status = validate_value(setting, (float)len);
 801de16:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801de1a:	4620      	mov	r0, r4
 801de1c:	f7ff f976 	bl	801d10c <validate_value>
            break;
 801de20:	e7d4      	b.n	801ddcc <setting_validate_me+0x20>
    switch(setting->datatype) {
 801de22:	2000      	movs	r0, #0
 801de24:	e7d2      	b.n	801ddcc <setting_validate_me+0x20>
 801de26:	bf00      	nop
 801de28:	200018dc 	.word	0x200018dc
 801de2c:	0802c960 	.word	0x0802c960

0801de30 <settings_store_setting>:

// A helper method to set settings from command line
status_code_t settings_store_setting (setting_id_t id, char *svalue)
{
 801de30:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de32:	b085      	sub	sp, #20
 801de34:	4606      	mov	r6, r0
 801de36:	460c      	mov	r4, r1
    uint_fast8_t set_idx = 0;
 801de38:	2300      	movs	r3, #0
 801de3a:	9303      	str	r3, [sp, #12]
    uint32_t int_value = 0;
 801de3c:	9302      	str	r3, [sp, #8]
    float value = NAN;
 801de3e:	4b5c      	ldr	r3, [pc, #368]	@ (801dfb0 <settings_store_setting+0x180>)
 801de40:	9301      	str	r3, [sp, #4]
    status_code_t status = Status_OK;
    setting_details_t *set;
    const setting_detail_t *setting = setting_get_details(id, &set);
 801de42:	4669      	mov	r1, sp
 801de44:	f7ff fe1e 	bl	801da84 <setting_get_details>

    if(setting == NULL) {
 801de48:	4605      	mov	r5, r0
 801de4a:	b938      	cbnz	r0, 801de5c <settings_store_setting+0x2c>
        if(id == Setting_SpindlePWMBehaviour) {
 801de4c:	2e07      	cmp	r6, #7
 801de4e:	f040 80aa 	bne.w	801dfa6 <settings_store_setting+0x176>
            set = &setting_details;
 801de52:	4b58      	ldr	r3, [pc, #352]	@ (801dfb4 <settings_store_setting+0x184>)
 801de54:	9300      	str	r3, [sp, #0]
            setting = &setting_detail[Setting_SpindlePWMBehaviour];
 801de56:	4d58      	ldr	r5, [pc, #352]	@ (801dfb8 <settings_store_setting+0x188>)
 801de58:	e000      	b.n	801de5c <settings_store_setting+0x2c>
            return Status_SettingDisabled;
    }

    // Trim leading spaces
    while(*svalue == ' ')
        svalue++;
 801de5a:	3401      	adds	r4, #1
    while(*svalue == ' ')
 801de5c:	7823      	ldrb	r3, [r4, #0]
 801de5e:	2b20      	cmp	r3, #32
 801de60:	d0fb      	beq.n	801de5a <settings_store_setting+0x2a>

    if(setting->datatype == Format_Decimal)  {
 801de62:	7b2b      	ldrb	r3, [r5, #12]
 801de64:	2b06      	cmp	r3, #6
 801de66:	d022      	beq.n	801deae <settings_store_setting+0x7e>
    return datatype == Format_String || datatype == Format_Password || datatype == Format_IPv4;
 801de68:	3b07      	subs	r3, #7
 801de6a:	b2db      	uxtb	r3, r3
        if(!read_float(svalue, &set_idx, &value) && setting_is_core(setting->type))
            return Status_BadNumberFormat;
    } else if(!setting_is_string(setting->datatype) && read_uint(svalue, &set_idx, &int_value) != Status_OK && setting_is_core(setting->type))
 801de6c:	2b02      	cmp	r3, #2
 801de6e:	d82a      	bhi.n	801dec6 <settings_store_setting+0x96>
        return Status_BadNumberFormat;

    if((status = setting_validate_me(setting, value, svalue)) != Status_OK) {
 801de70:	4621      	mov	r1, r4
 801de72:	ed9d 0a01 	vldr	s0, [sp, #4]
 801de76:	4628      	mov	r0, r5
 801de78:	f7ff ff98 	bl	801ddac <setting_validate_me>
 801de7c:	4607      	mov	r7, r0
 801de7e:	bb70      	cbnz	r0, 801dede <settings_store_setting+0xae>
            status =  Status_SettingStepPulseMin;

        return status;
    }

    switch(setting->type) {
 801de80:	7f2a      	ldrb	r2, [r5, #28]
 801de82:	2a07      	cmp	r2, #7
 801de84:	d863      	bhi.n	801df4e <settings_store_setting+0x11e>
 801de86:	2301      	movs	r3, #1
 801de88:	4093      	lsls	r3, r2
 801de8a:	f013 0faa 	tst.w	r3, #170	@ 0xaa
 801de8e:	d14a      	bne.n	801df26 <settings_store_setting+0xf6>
 801de90:	f013 0f55 	tst.w	r3, #85	@ 0x55
 801de94:	d05b      	beq.n	801df4e <settings_store_setting+0x11e>

        case Setting_NonCore:
        case Setting_IsExtended:
        case Setting_IsLegacy:
        case Setting_IsExpanded:
            switch(setting->datatype) {
 801de96:	7b2b      	ldrb	r3, [r5, #12]
 801de98:	2b0b      	cmp	r3, #11
 801de9a:	f200 8086 	bhi.w	801dfaa <settings_store_setting+0x17a>
 801de9e:	e8df f003 	tbb	[pc, r3]
 801dea2:	3434      	.short	0x3434
 801dea4:	3e2d3434 	.word	0x3e2d3434
 801dea8:	84282824 	.word	0x84282824
 801deac:	3934      	.short	0x3934
        if(!read_float(svalue, &set_idx, &value) && setting_is_core(setting->type))
 801deae:	aa01      	add	r2, sp, #4
 801deb0:	a903      	add	r1, sp, #12
 801deb2:	4620      	mov	r0, r4
 801deb4:	f7f7 ff66 	bl	8015d84 <read_float>
 801deb8:	2800      	cmp	r0, #0
 801deba:	d1d9      	bne.n	801de70 <settings_store_setting+0x40>
 801debc:	7f2b      	ldrb	r3, [r5, #28]
 801debe:	2b01      	cmp	r3, #1
 801dec0:	d9d6      	bls.n	801de70 <settings_store_setting+0x40>
            return Status_BadNumberFormat;
 801dec2:	2702      	movs	r7, #2
 801dec4:	e044      	b.n	801df50 <settings_store_setting+0x120>
    } else if(!setting_is_string(setting->datatype) && read_uint(svalue, &set_idx, &int_value) != Status_OK && setting_is_core(setting->type))
 801dec6:	aa02      	add	r2, sp, #8
 801dec8:	a903      	add	r1, sp, #12
 801deca:	4620      	mov	r0, r4
 801decc:	f7f7 ff10 	bl	8015cf0 <read_uint>
 801ded0:	2800      	cmp	r0, #0
 801ded2:	d0cd      	beq.n	801de70 <settings_store_setting+0x40>
 801ded4:	7f2b      	ldrb	r3, [r5, #28]
 801ded6:	2b01      	cmp	r3, #1
 801ded8:	d9ca      	bls.n	801de70 <settings_store_setting+0x40>
        return Status_BadNumberFormat;
 801deda:	2702      	movs	r7, #2
 801dedc:	e038      	b.n	801df50 <settings_store_setting+0x120>
        if(setting == Setting_PulseMicroseconds && status == Status_SettingValueOutOfRange)
 801dede:	2d00      	cmp	r5, #0
 801dee0:	d136      	bne.n	801df50 <settings_store_setting+0x120>
 801dee2:	2834      	cmp	r0, #52	@ 0x34
 801dee4:	d134      	bne.n	801df50 <settings_store_setting+0x120>
            status =  Status_SettingStepPulseMin;
 801dee6:	2706      	movs	r7, #6
        return status;
 801dee8:	e032      	b.n	801df50 <settings_store_setting+0x120>

                case Format_Decimal:
                    *((float *)(setting->value)) = value;
 801deea:	6a2b      	ldr	r3, [r5, #32]
 801deec:	9a01      	ldr	r2, [sp, #4]
 801deee:	601a      	str	r2, [r3, #0]
                    break;
 801def0:	e02d      	b.n	801df4e <settings_store_setting+0x11e>

                case Format_String:
                case Format_Password:
                    strcpy(((char *)(setting->value)), svalue);
 801def2:	4621      	mov	r1, r4
 801def4:	6a28      	ldr	r0, [r5, #32]
 801def6:	f007 f96e 	bl	80251d6 <strcpy>
                    break;
 801defa:	e028      	b.n	801df4e <settings_store_setting+0x11e>

                case Format_AxisMask:
                    *((uint8_t *)(setting->value)) = (uint8_t)int_value & AXES_BITMASK;
 801defc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801df00:	6a2a      	ldr	r2, [r5, #32]
 801df02:	f003 0307 	and.w	r3, r3, #7
 801df06:	7013      	strb	r3, [r2, #0]
                    break;
 801df08:	e021      	b.n	801df4e <settings_store_setting+0x11e>
                case Format_Bool:
                case Format_Bitfield:
                case Format_XBitfield:
                case Format_RadioButtons:
                case Format_Int8:
                    *((uint8_t *)(setting->value)) = (uint8_t)int_value;
 801df0a:	6a2b      	ldr	r3, [r5, #32]
 801df0c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801df10:	701a      	strb	r2, [r3, #0]
                    break;
 801df12:	e01c      	b.n	801df4e <settings_store_setting+0x11e>

                case Format_Int16:
                    *((uint16_t *)(setting->value)) = (uint16_t)int_value;
 801df14:	6a2b      	ldr	r3, [r5, #32]
 801df16:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801df1a:	801a      	strh	r2, [r3, #0]
                    break;
 801df1c:	e017      	b.n	801df4e <settings_store_setting+0x11e>

                case Format_Integer:
                    *((uint32_t *)(setting->value)) = (uint32_t)int_value;
 801df1e:	6a2b      	ldr	r3, [r5, #32]
 801df20:	9a02      	ldr	r2, [sp, #8]
 801df22:	601a      	str	r2, [r3, #0]
                    break;
 801df24:	e013      	b.n	801df4e <settings_store_setting+0x11e>

        case Setting_NonCoreFn:
        case Setting_IsExtendedFn:
        case Setting_IsLegacyFn:
        case Setting_IsExpandedFn:
            switch(setting->datatype) {
 801df26:	7b2b      	ldrb	r3, [r5, #12]
 801df28:	2b06      	cmp	r3, #6
 801df2a:	d00a      	beq.n	801df42 <settings_store_setting+0x112>
 801df2c:	d313      	bcc.n	801df56 <settings_store_setting+0x126>
 801df2e:	3b07      	subs	r3, #7
 801df30:	b2db      	uxtb	r3, r3
 801df32:	2b02      	cmp	r3, #2
 801df34:	d80f      	bhi.n	801df56 <settings_store_setting+0x126>
                    break;

                case Format_String:
                case Format_Password:
                case Format_IPv4:
                    status = ((setting_set_string_ptr)(setting->value))(id, svalue);
 801df36:	6a2b      	ldr	r3, [r5, #32]
 801df38:	4621      	mov	r1, r4
 801df3a:	4630      	mov	r0, r6
 801df3c:	4798      	blx	r3
 801df3e:	4607      	mov	r7, r0
                    break;
 801df40:	e005      	b.n	801df4e <settings_store_setting+0x11e>
                    status = ((setting_set_float_ptr)(setting->value))(id, value);
 801df42:	6a2b      	ldr	r3, [r5, #32]
 801df44:	ed9d 0a01 	vldr	s0, [sp, #4]
 801df48:	4630      	mov	r0, r6
 801df4a:	4798      	blx	r3
 801df4c:	4607      	mov	r7, r0
                    break;
            }
            break;
    }

    if(status == Status_OK) {
 801df4e:	b147      	cbz	r7, 801df62 <settings_store_setting+0x132>
            set->on_changed(&settings, changed);
        }
    }

    return status;
}
 801df50:	4638      	mov	r0, r7
 801df52:	b005      	add	sp, #20
 801df54:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    status = ((setting_set_int_ptr)(setting->value))(id, (uint_fast16_t)int_value);
 801df56:	6a2b      	ldr	r3, [r5, #32]
 801df58:	9902      	ldr	r1, [sp, #8]
 801df5a:	4630      	mov	r0, r6
 801df5c:	4798      	blx	r3
 801df5e:	4607      	mov	r7, r0
                    break;
 801df60:	e7f5      	b.n	801df4e <settings_store_setting+0x11e>
        xbar_set_homing_source();
 801df62:	f7ef f913 	bl	800d18c <xbar_set_homing_source>
        if(set->save)
 801df66:	9b00      	ldr	r3, [sp, #0]
 801df68:	6a1b      	ldr	r3, [r3, #32]
 801df6a:	b103      	cbz	r3, 801df6e <settings_store_setting+0x13e>
            set->save();
 801df6c:	4798      	blx	r3
        if(set->on_changed) {
 801df6e:	9b00      	ldr	r3, [sp, #0]
 801df70:	69db      	ldr	r3, [r3, #28]
 801df72:	2b00      	cmp	r3, #0
 801df74:	d0ec      	beq.n	801df50 <settings_store_setting+0x120>
            settings_changed_flags_t changed = {0};
 801df76:	f04f 0400 	mov.w	r4, #0
            changed.spindle = settings_changed_spindle() || machine_mode_changed;
 801df7a:	f7ff f911 	bl	801d1a0 <settings_changed_spindle>
 801df7e:	b920      	cbnz	r0, 801df8a <settings_store_setting+0x15a>
 801df80:	4b0e      	ldr	r3, [pc, #56]	@ (801dfbc <settings_store_setting+0x18c>)
 801df82:	781b      	ldrb	r3, [r3, #0]
 801df84:	b16b      	cbz	r3, 801dfa2 <settings_store_setting+0x172>
 801df86:	2301      	movs	r3, #1
 801df88:	e000      	b.n	801df8c <settings_store_setting+0x15c>
 801df8a:	2301      	movs	r3, #1
 801df8c:	f363 0400 	bfi	r4, r3, #0, #1
            machine_mode_changed = false;
 801df90:	4b0a      	ldr	r3, [pc, #40]	@ (801dfbc <settings_store_setting+0x18c>)
 801df92:	2200      	movs	r2, #0
 801df94:	701a      	strb	r2, [r3, #0]
            set->on_changed(&settings, changed);
 801df96:	9b00      	ldr	r3, [sp, #0]
 801df98:	69db      	ldr	r3, [r3, #28]
 801df9a:	4621      	mov	r1, r4
 801df9c:	4808      	ldr	r0, [pc, #32]	@ (801dfc0 <settings_store_setting+0x190>)
 801df9e:	4798      	blx	r3
 801dfa0:	e7d6      	b.n	801df50 <settings_store_setting+0x120>
            changed.spindle = settings_changed_spindle() || machine_mode_changed;
 801dfa2:	2300      	movs	r3, #0
 801dfa4:	e7f2      	b.n	801df8c <settings_store_setting+0x15c>
            return Status_SettingDisabled;
 801dfa6:	2735      	movs	r7, #53	@ 0x35
 801dfa8:	e7d2      	b.n	801df50 <settings_store_setting+0x120>
 801dfaa:	2702      	movs	r7, #2
 801dfac:	e7d0      	b.n	801df50 <settings_store_setting+0x120>
 801dfae:	bf00      	nop
 801dfb0:	7fc00000 	.word	0x7fc00000
 801dfb4:	2000021c 	.word	0x2000021c
 801dfb8:	0802f968 	.word	0x0802f968
 801dfbc:	200022f0 	.word	0x200022f0
 801dfc0:	200022f4 	.word	0x200022f4

0801dfc4 <settings_add_spindle_type>:

bool settings_add_spindle_type (const char *type)
{
 801dfc4:	b570      	push	{r4, r5, r6, lr}
 801dfc6:	4604      	mov	r4, r0
    bool ok;

    if((ok = strlen(spindle_types) + strlen(type) + 1 < sizeof(spindle_types))) {
 801dfc8:	480d      	ldr	r0, [pc, #52]	@ (801e000 <settings_add_spindle_type+0x3c>)
 801dfca:	f7ea f899 	bl	8008100 <strlen>
 801dfce:	4605      	mov	r5, r0
 801dfd0:	4620      	mov	r0, r4
 801dfd2:	f7ea f895 	bl	8008100 <strlen>
 801dfd6:	182b      	adds	r3, r5, r0
 801dfd8:	3301      	adds	r3, #1
 801dfda:	2b63      	cmp	r3, #99	@ 0x63
 801dfdc:	bf94      	ite	ls
 801dfde:	2601      	movls	r6, #1
 801dfe0:	2600      	movhi	r6, #0
 801dfe2:	d806      	bhi.n	801dff2 <settings_add_spindle_type+0x2e>
        if(*spindle_types != '\0')
 801dfe4:	4b06      	ldr	r3, [pc, #24]	@ (801e000 <settings_add_spindle_type+0x3c>)
 801dfe6:	781b      	ldrb	r3, [r3, #0]
 801dfe8:	b92b      	cbnz	r3, 801dff6 <settings_add_spindle_type+0x32>
            strcat(spindle_types, ",");
        strcat(spindle_types, type);
 801dfea:	4621      	mov	r1, r4
 801dfec:	4804      	ldr	r0, [pc, #16]	@ (801e000 <settings_add_spindle_type+0x3c>)
 801dfee:	f006 ffa2 	bl	8024f36 <strcat>
    }

    return ok;
}
 801dff2:	4630      	mov	r0, r6
 801dff4:	bd70      	pop	{r4, r5, r6, pc}
            strcat(spindle_types, ",");
 801dff6:	4b03      	ldr	r3, [pc, #12]	@ (801e004 <settings_add_spindle_type+0x40>)
 801dff8:	881a      	ldrh	r2, [r3, #0]
 801dffa:	4b01      	ldr	r3, [pc, #4]	@ (801e000 <settings_add_spindle_type+0x3c>)
 801dffc:	535a      	strh	r2, [r3, r5]
 801dffe:	e7f4      	b.n	801dfea <settings_add_spindle_type+0x26>
 801e000:	2000228c 	.word	0x2000228c
 801e004:	0802c560 	.word	0x0802c560

0801e008 <settings_clear>:

// Clear settings chain
void settings_clear (void)
{
    setting_details.next = NULL;
 801e008:	4b02      	ldr	r3, [pc, #8]	@ (801e014 <settings_clear+0xc>)
 801e00a:	2200      	movs	r2, #0
 801e00c:	619a      	str	r2, [r3, #24]
    settingsd = &setting_details;
 801e00e:	4a02      	ldr	r2, [pc, #8]	@ (801e018 <settings_clear+0x10>)
 801e010:	6013      	str	r3, [r2, #0]
}
 801e012:	4770      	bx	lr
 801e014:	2000021c 	.word	0x2000021c
 801e018:	20000218 	.word	0x20000218

0801e01c <settings_init>:

// Initialize the config subsystem
void settings_init (void)
{
 801e01c:	b538      	push	{r3, r4, r5, lr}
    settings_changed_flags_t changed = {0};
 801e01e:	f04f 0500 	mov.w	r5, #0
    grbl.tool_table.read = settings_read_tool_data;
    grbl.tool_table.write = settings_write_tool_data;
    grbl.tool_table.clear = settings_clear_tool_data;
#else
    static tool_data_t tools;
    if(grbl.tool_table.tool == NULL) {
 801e022:	4b71      	ldr	r3, [pc, #452]	@ (801e1e8 <settings_init+0x1cc>)
 801e024:	69db      	ldr	r3, [r3, #28]
 801e026:	2b00      	cmp	r3, #0
 801e028:	f000 8082 	beq.w	801e130 <settings_init+0x114>
        grbl.tool_table.n_tools = 0;
        grbl.tool_table.tool = &tools;
    }
#endif

    if(!read_global_settings()) {
 801e02c:	f7ff fc46 	bl	801d8bc <read_global_settings>
 801e030:	2800      	cmp	r0, #0
 801e032:	f040 8083 	bne.w	801e13c <settings_init+0x120>

        settings_restore_t settings = settings_all;
        settings.defaults = 1; // Ensure global settings get restored

        if(hal.nvs.type != NVS_None)
 801e036:	4b6d      	ldr	r3, [pc, #436]	@ (801e1ec <settings_init+0x1d0>)
 801e038:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801e03c:	b11b      	cbz	r3, 801e046 <settings_init+0x2a>
            grbl.report.status_message(Status_SettingReadFail);
 801e03e:	4b6a      	ldr	r3, [pc, #424]	@ (801e1e8 <settings_init+0x1cc>)
 801e040:	689b      	ldr	r3, [r3, #8]
 801e042:	2007      	movs	r0, #7
 801e044:	4798      	blx	r3

        settings_restore(settings); // Force restore all non-volatile storage data.
 801e046:	f04f 001f 	mov.w	r0, #31
 801e04a:	f7ff fc93 	bl	801d974 <settings_restore>
        report_init();
 801e04e:	f7fb fc27 	bl	80198a0 <report_init>
#if COMPATIBILITY_LEVEL <= 1
        report_grbl_settings(true, NULL);
 801e052:	2100      	movs	r1, #0
 801e054:	2001      	movs	r0, #1
 801e056:	f7fb fcc3 	bl	80199e0 <report_grbl_settings>
#else
        report_grbl_settings(false, NULL);
#endif
        changed.spindle = settings_changed_spindle();
 801e05a:	f7ff f8a1 	bl	801d1a0 <settings_changed_spindle>
 801e05e:	f360 0500 	bfi	r5, r0, #0, #1

        if(hal.probe.configure) // Initialize probe invert mask.
            hal.probe.configure(false, false);
    }

    settings.offset_lock.mask &= ~0b111; // TODO: remove
 801e062:	4c63      	ldr	r4, [pc, #396]	@ (801e1f0 <settings_init+0x1d4>)
 801e064:	f894 3102 	ldrb.w	r3, [r4, #258]	@ 0x102
 801e068:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801e06c:	f884 3102 	strb.w	r3, [r4, #258]	@ 0x102
    settings.offset_lock.mask |= settings.parking.flags.offset_lock; // TODO: remove
 801e070:	f894 2128 	ldrb.w	r2, [r4, #296]	@ 0x128
 801e074:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 801e078:	f884 3102 	strb.w	r3, [r4, #258]	@ 0x102

    xbar_set_homing_source();
 801e07c:	f7ef f886 	bl	800d18c <xbar_set_homing_source>

    tmp_set_soft_limits();
 801e080:	f7fe f93a 	bl	801c2f8 <tmp_set_soft_limits>
    sys.hard_limits.mask = settings.limits.flags.hard_enabled ? AXES_BITMASK : 0;
 801e084:	f894 3124 	ldrb.w	r3, [r4, #292]	@ 0x124
 801e088:	f013 0301 	ands.w	r3, r3, #1
 801e08c:	d000      	beq.n	801e090 <settings_init+0x74>
 801e08e:	2307      	movs	r3, #7
 801e090:	4a58      	ldr	r2, [pc, #352]	@ (801e1f4 <settings_init+0x1d8>)
 801e092:	f882 3094 	strb.w	r3, [r2, #148]	@ 0x94
    tmp_set_hard_limits();

    if(spindle_get_count() == 0)
 801e096:	f000 fc01 	bl	801e89c <spindle_get_count>
 801e09a:	2800      	cmp	r0, #0
 801e09c:	d07e      	beq.n	801e19c <settings_init+0x180>
        spindle_add_null();

    spindle_cap_t spindle_cap = spindle_get_caps(false);
 801e09e:	2000      	movs	r0, #0
 801e0a0:	f000 fb0e 	bl	801e6c0 <spindle_get_caps>
    if(spindle_cap.gpio_controlled) {
 801e0a4:	f410 7f80 	tst.w	r0, #256	@ 0x100
 801e0a8:	d17b      	bne.n	801e1a2 <settings_init+0x186>
        spindle_state.pwm = spindle_cap.pwm_invert;

        setting_remove_elements(Setting_SpindleInvertMask, spindle_state.mask);
    }

    setting_remove_elements(Setting_ControlInvertMask, hal.signals_cap.mask & ~limits_override.mask);
 801e0aa:	4c50      	ldr	r4, [pc, #320]	@ (801e1ec <settings_init+0x1d0>)
 801e0ac:	f8b4 11dc 	ldrh.w	r1, [r4, #476]	@ 0x1dc
 801e0b0:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 801e0b4:	200e      	movs	r0, #14
 801e0b6:	f7ff fe49 	bl	801dd4c <setting_remove_elements>

    if(hal.stepper.get_ganged)
 801e0ba:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 801e0be:	b12b      	cbz	r3, 801e0cc <settings_init+0xb0>
        setting_remove_elements(Setting_GangedDirInvertMask, hal.stepper.get_ganged(false).mask);
 801e0c0:	2000      	movs	r0, #0
 801e0c2:	4798      	blx	r3
 801e0c4:	b2c1      	uxtb	r1, r0
 801e0c6:	2008      	movs	r0, #8
 801e0c8:	f7ff fe40 	bl	801dd4c <setting_remove_elements>

    setting_remove_elements(Setting_CoolantInvertMask, hal.coolant_cap.mask);
 801e0cc:	4c47      	ldr	r4, [pc, #284]	@ (801e1ec <settings_init+0x1d0>)
 801e0ce:	f894 11e4 	ldrb.w	r1, [r4, #484]	@ 0x1e4
 801e0d2:	200f      	movs	r0, #15
 801e0d4:	f7ff fe3a 	bl	801dd4c <setting_remove_elements>

#if COMPATIBILITY_LEVEL <= 1
    if(hal.homing.get_state == NULL) {
 801e0d8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	d070      	beq.n	801e1c0 <settings_init+0x1a4>
        homing.use_limit_switches = Off;
        setting_remove_elements(Setting_HomingEnable, homing.value);
    }
#endif

    setting_details_t *details = setting_details.next;
 801e0de:	4b46      	ldr	r3, [pc, #280]	@ (801e1f8 <settings_init+0x1dc>)
 801e0e0:	699c      	ldr	r4, [r3, #24]

    if(details) do {
 801e0e2:	2c00      	cmp	r4, #0
 801e0e4:	d178      	bne.n	801e1d8 <settings_init+0x1bc>
            details->load();
        if(details->on_changed)
            details->on_changed(&settings, changed);
    } while((details = details->next));

    setting_details.on_changed = hal.settings_changed;
 801e0e6:	4b41      	ldr	r3, [pc, #260]	@ (801e1ec <settings_init+0x1d0>)
 801e0e8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 801e0ec:	4b42      	ldr	r3, [pc, #264]	@ (801e1f8 <settings_init+0x1dc>)
 801e0ee:	61da      	str	r2, [r3, #28]

    // Sanity checks for spindle configuration
    if(settings.spindle.flags.type >= spindle_get_count())
 801e0f0:	4b3f      	ldr	r3, [pc, #252]	@ (801e1f0 <settings_init+0x1d4>)
 801e0f2:	f893 40e7 	ldrb.w	r4, [r3, #231]	@ 0xe7
 801e0f6:	f3c4 0484 	ubfx	r4, r4, #2, #5
 801e0fa:	f000 fbcf 	bl	801e89c <spindle_get_count>
 801e0fe:	4284      	cmp	r4, r0
 801e100:	db06      	blt.n	801e110 <settings_init+0xf4>
        settings.spindle.flags.type = 0;
 801e102:	4b3b      	ldr	r3, [pc, #236]	@ (801e1f0 <settings_init+0x1d4>)
 801e104:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801e108:	f36f 0286 	bfc	r2, #2, #5
 801e10c:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    if(settings.offset_lock.encoder_spindle >= spindle_get_count())
 801e110:	4b37      	ldr	r3, [pc, #220]	@ (801e1f0 <settings_init+0x1d4>)
 801e112:	f893 4102 	ldrb.w	r4, [r3, #258]	@ 0x102
 801e116:	08e4      	lsrs	r4, r4, #3
 801e118:	f000 fbc0 	bl	801e89c <spindle_get_count>
 801e11c:	4284      	cmp	r4, r0
 801e11e:	db06      	blt.n	801e12e <settings_init+0x112>
        settings.offset_lock.encoder_spindle = 0;
 801e120:	4b33      	ldr	r3, [pc, #204]	@ (801e1f0 <settings_init+0x1d4>)
 801e122:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 801e126:	f36f 02c7 	bfc	r2, #3, #5
 801e12a:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
}
 801e12e:	bd38      	pop	{r3, r4, r5, pc}
        grbl.tool_table.n_tools = 0;
 801e130:	4b2d      	ldr	r3, [pc, #180]	@ (801e1e8 <settings_init+0x1cc>)
 801e132:	2200      	movs	r2, #0
 801e134:	619a      	str	r2, [r3, #24]
        grbl.tool_table.tool = &tools;
 801e136:	4a31      	ldr	r2, [pc, #196]	@ (801e1fc <settings_init+0x1e0>)
 801e138:	61da      	str	r2, [r3, #28]
 801e13a:	e777      	b.n	801e02c <settings_init+0x10>
        memset(grbl.tool_table.tool, 0, sizeof(tool_data_t)); // First entry is for tools not in tool table
 801e13c:	492a      	ldr	r1, [pc, #168]	@ (801e1e8 <settings_init+0x1cc>)
 801e13e:	69cb      	ldr	r3, [r1, #28]
 801e140:	2200      	movs	r2, #0
 801e142:	601a      	str	r2, [r3, #0]
 801e144:	605a      	str	r2, [r3, #4]
 801e146:	609a      	str	r2, [r3, #8]
 801e148:	60da      	str	r2, [r3, #12]
 801e14a:	611a      	str	r2, [r3, #16]
        if(grbl.tool_table.n_tools) {
 801e14c:	698b      	ldr	r3, [r1, #24]
 801e14e:	bb1b      	cbnz	r3, 801e198 <settings_init+0x17c>
        report_init();
 801e150:	f7fb fba6 	bl	80198a0 <report_init>
        changed.spindle = settings_changed_spindle();
 801e154:	f7ff f824 	bl	801d1a0 <settings_changed_spindle>
 801e158:	f360 0500 	bfi	r5, r0, #0, #1
        hal.settings_changed(&settings, changed);
 801e15c:	4c23      	ldr	r4, [pc, #140]	@ (801e1ec <settings_init+0x1d0>)
 801e15e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 801e162:	4629      	mov	r1, r5
 801e164:	4822      	ldr	r0, [pc, #136]	@ (801e1f0 <settings_init+0x1d4>)
 801e166:	4798      	blx	r3
        if(hal.probe.configure) // Initialize probe invert mask.
 801e168:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 801e16c:	2b00      	cmp	r3, #0
 801e16e:	f43f af78 	beq.w	801e062 <settings_init+0x46>
            hal.probe.configure(false, false);
 801e172:	2100      	movs	r1, #0
 801e174:	4608      	mov	r0, r1
 801e176:	4798      	blx	r3
 801e178:	e773      	b.n	801e062 <settings_init+0x46>
                grbl.tool_table.read(idx, &grbl.tool_table.tool[idx]);
 801e17a:	4b1b      	ldr	r3, [pc, #108]	@ (801e1e8 <settings_init+0x1cc>)
 801e17c:	6a1a      	ldr	r2, [r3, #32]
 801e17e:	69db      	ldr	r3, [r3, #28]
 801e180:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 801e184:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801e188:	4620      	mov	r0, r4
 801e18a:	4790      	blx	r2
            for(idx = 1; idx <= grbl.tool_table.n_tools; idx++)
 801e18c:	3401      	adds	r4, #1
 801e18e:	4b16      	ldr	r3, [pc, #88]	@ (801e1e8 <settings_init+0x1cc>)
 801e190:	699b      	ldr	r3, [r3, #24]
 801e192:	42a3      	cmp	r3, r4
 801e194:	d2f1      	bcs.n	801e17a <settings_init+0x15e>
 801e196:	e7db      	b.n	801e150 <settings_init+0x134>
 801e198:	2401      	movs	r4, #1
 801e19a:	e7f8      	b.n	801e18e <settings_init+0x172>
        spindle_add_null();
 801e19c:	f000 fb3a 	bl	801e814 <spindle_add_null>
 801e1a0:	e77d      	b.n	801e09e <settings_init+0x82>
        spindle_state_t spindle_state = { .on = On };
 801e1a2:	f04f 0101 	mov.w	r1, #1
        spindle_state.ccw = spindle_cap.direction;
 801e1a6:	f3c0 0340 	ubfx	r3, r0, #1, #1
 801e1aa:	f363 0141 	bfi	r1, r3, #1, #1
        spindle_state.pwm = spindle_cap.pwm_invert;
 801e1ae:	f3c0 1000 	ubfx	r0, r0, #4, #1
 801e1b2:	f360 0182 	bfi	r1, r0, #2, #1
        setting_remove_elements(Setting_SpindleInvertMask, spindle_state.mask);
 801e1b6:	b2c9      	uxtb	r1, r1
 801e1b8:	2010      	movs	r0, #16
 801e1ba:	f7ff fdc7 	bl	801dd4c <setting_remove_elements>
 801e1be:	e774      	b.n	801e0aa <settings_init+0x8e>
        setting_remove_elements(Setting_HomingEnable, homing.value);
 801e1c0:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
 801e1c4:	2016      	movs	r0, #22
 801e1c6:	f7ff fdc1 	bl	801dd4c <setting_remove_elements>
 801e1ca:	e788      	b.n	801e0de <settings_init+0xc2>
            details->on_changed(&settings, changed);
 801e1cc:	4629      	mov	r1, r5
 801e1ce:	4808      	ldr	r0, [pc, #32]	@ (801e1f0 <settings_init+0x1d4>)
 801e1d0:	4798      	blx	r3
    } while((details = details->next));
 801e1d2:	69a4      	ldr	r4, [r4, #24]
 801e1d4:	2c00      	cmp	r4, #0
 801e1d6:	d086      	beq.n	801e0e6 <settings_init+0xca>
        if(details->load)
 801e1d8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801e1da:	b103      	cbz	r3, 801e1de <settings_init+0x1c2>
            details->load();
 801e1dc:	4798      	blx	r3
        if(details->on_changed)
 801e1de:	69e3      	ldr	r3, [r4, #28]
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	d1f3      	bne.n	801e1cc <settings_init+0x1b0>
 801e1e4:	e7f5      	b.n	801e1d2 <settings_init+0x1b6>
 801e1e6:	bf00      	nop
 801e1e8:	20001ac4 	.word	0x20001ac4
 801e1ec:	200018dc 	.word	0x200018dc
 801e1f0:	200022f4 	.word	0x200022f4
 801e1f4:	20001bbc 	.word	0x20001bbc
 801e1f8:	2000021c 	.word	0x2000021c
 801e1fc:	200021f4 	.word	0x200021f4

0801e200 <fall_asleep>:

static volatile bool slumber;

static void fall_asleep (void *data)
{
    slumber = false;
 801e200:	4b01      	ldr	r3, [pc, #4]	@ (801e208 <fall_asleep+0x8>)
 801e202:	2200      	movs	r2, #0
 801e204:	701a      	strb	r2, [r3, #0]
}
 801e206:	4770      	bx	lr
 801e208:	20002464 	.word	0x20002464

0801e20c <sleep_execute>:

// Starts sleep timer if running conditions are satisfied. When elapsed, sleep mode is executed.
static void sleep_execute (void)
{
 801e20c:	b538      	push	{r3, r4, r5, lr}
    // Enable sleep timeout
    if(!(slumber = task_add_delayed(fall_asleep, NULL, (uint32_t)(SLEEP_DURATION * 1000.0f * 60.0f))))
 801e20e:	4a18      	ldr	r2, [pc, #96]	@ (801e270 <sleep_execute+0x64>)
 801e210:	2100      	movs	r1, #0
 801e212:	4818      	ldr	r0, [pc, #96]	@ (801e274 <sleep_execute+0x68>)
 801e214:	f7f3 fc7e 	bl	8011b14 <task_add_delayed>
 801e218:	4b17      	ldr	r3, [pc, #92]	@ (801e278 <sleep_execute+0x6c>)
 801e21a:	7018      	strb	r0, [r3, #0]
 801e21c:	b330      	cbz	r0, 801e26c <sleep_execute+0x60>
        return;

    // Fetch current number of buffered characters in input stream buffer.
    uint16_t rx_initial = hal.stream.get_rx_buffer_free();
 801e21e:	4b17      	ldr	r3, [pc, #92]	@ (801e27c <sleep_execute+0x70>)
 801e220:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801e224:	4798      	blx	r3
 801e226:	4605      	mov	r5, r0

    do {
        grbl.on_execute_realtime(state_get());
 801e228:	4b15      	ldr	r3, [pc, #84]	@ (801e280 <sleep_execute+0x74>)
 801e22a:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 801e22c:	f000 ff6c 	bl	801f108 <state_get>
 801e230:	47a0      	blx	r4
        // Monitor for any new input stream data or external events (queries, buttons, alarms) to exit.
        if((hal.stream.get_rx_buffer_free() != rx_initial) || sys.rt_exec_state || sys.rt_exec_alarm ) {
 801e232:	4b12      	ldr	r3, [pc, #72]	@ (801e27c <sleep_execute+0x70>)
 801e234:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801e238:	4798      	blx	r3
 801e23a:	42a8      	cmp	r0, r5
 801e23c:	d110      	bne.n	801e260 <sleep_execute+0x54>
 801e23e:	4b11      	ldr	r3, [pc, #68]	@ (801e284 <sleep_execute+0x78>)
 801e240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e242:	b96b      	cbnz	r3, 801e260 <sleep_execute+0x54>
 801e244:	4b0f      	ldr	r3, [pc, #60]	@ (801e284 <sleep_execute+0x78>)
 801e246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e248:	b953      	cbnz	r3, 801e260 <sleep_execute+0x54>
            // Disable sleep timeout and return to normal operation.
            slumber = false;
            task_delete(fall_asleep, NULL);
            return;
        }
    } while(slumber);
 801e24a:	4b0b      	ldr	r3, [pc, #44]	@ (801e278 <sleep_execute+0x6c>)
 801e24c:	781b      	ldrb	r3, [r3, #0]
 801e24e:	2b00      	cmp	r3, #0
 801e250:	d1ea      	bne.n	801e228 <sleep_execute+0x1c>

    // If reached, sleep counter has expired. Execute sleep procedures.
    // Notify user that Grbl has timed out and will be parking.
    // To exit sleep, resume or reset. Either way, the job will not be recoverable.
    system_set_exec_state_flag(EXEC_SLEEP);
 801e252:	4b0a      	ldr	r3, [pc, #40]	@ (801e27c <sleep_execute+0x70>)
 801e254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e256:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801e25a:	480b      	ldr	r0, [pc, #44]	@ (801e288 <sleep_execute+0x7c>)
 801e25c:	4798      	blx	r3
 801e25e:	e005      	b.n	801e26c <sleep_execute+0x60>
            slumber = false;
 801e260:	2100      	movs	r1, #0
 801e262:	4b05      	ldr	r3, [pc, #20]	@ (801e278 <sleep_execute+0x6c>)
 801e264:	7019      	strb	r1, [r3, #0]
            task_delete(fall_asleep, NULL);
 801e266:	4803      	ldr	r0, [pc, #12]	@ (801e274 <sleep_execute+0x68>)
 801e268:	f7f3 feda 	bl	8012020 <task_delete>
}
 801e26c:	bd38      	pop	{r3, r4, r5, pc}
 801e26e:	bf00      	nop
 801e270:	000493e0 	.word	0x000493e0
 801e274:	0801e201 	.word	0x0801e201
 801e278:	20002464 	.word	0x20002464
 801e27c:	200018dc 	.word	0x200018dc
 801e280:	20001ac4 	.word	0x20001ac4
 801e284:	20001bbc 	.word	0x20001bbc
 801e288:	20001c04 	.word	0x20001c04

0801e28c <sleep_check>:
// Checks running conditions for sleep. If satisfied, enables sleep timeout and executes
// sleep mode upon elapse.
// NOTE: Sleep procedures can be blocking, since grblHAL isn't receiving any commands, nor moving.
// Hence, make sure any valid running state that executes the sleep timer is not one that is moving.
void sleep_check (void)
{
 801e28c:	b508      	push	{r3, lr}
    static uint32_t last_check = 0;

    if(hal.get_elapsed_ticks() - last_check < 50)
 801e28e:	4b1e      	ldr	r3, [pc, #120]	@ (801e308 <sleep_check+0x7c>)
 801e290:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 801e294:	4798      	blx	r3
 801e296:	4b1d      	ldr	r3, [pc, #116]	@ (801e30c <sleep_check+0x80>)
 801e298:	681b      	ldr	r3, [r3, #0]
 801e29a:	1ac0      	subs	r0, r0, r3
 801e29c:	2831      	cmp	r0, #49	@ 0x31
 801e29e:	d917      	bls.n	801e2d0 <sleep_check+0x44>
        return;

    last_check = hal.get_elapsed_ticks();
 801e2a0:	4b19      	ldr	r3, [pc, #100]	@ (801e308 <sleep_check+0x7c>)
 801e2a2:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 801e2a6:	4798      	blx	r3
 801e2a8:	4b18      	ldr	r3, [pc, #96]	@ (801e30c <sleep_check+0x80>)
 801e2aa:	6018      	str	r0, [r3, #0]

    // The sleep execution feature will continue only if the machine is in an IDLE or HOLD state and
    // has any powered components enabled.
    // NOTE: With overrides or in laser mode, modal spindle and coolant state are not guaranteed. Need
    // to directly monitor and record running state during parking to ensure proper function.
    if (!(slumber || sys.steppers_deenergize || sys.flags.auto_reporting) && (gc_state.modal.spindle.state.value || gc_state.modal.coolant.value)) {
 801e2ac:	4b18      	ldr	r3, [pc, #96]	@ (801e310 <sleep_check+0x84>)
 801e2ae:	781b      	ldrb	r3, [r3, #0]
 801e2b0:	b973      	cbnz	r3, 801e2d0 <sleep_check+0x44>
 801e2b2:	4b18      	ldr	r3, [pc, #96]	@ (801e314 <sleep_check+0x88>)
 801e2b4:	799b      	ldrb	r3, [r3, #6]
 801e2b6:	b95b      	cbnz	r3, 801e2d0 <sleep_check+0x44>
 801e2b8:	4b16      	ldr	r3, [pc, #88]	@ (801e314 <sleep_check+0x88>)
 801e2ba:	7ddb      	ldrb	r3, [r3, #23]
 801e2bc:	f013 0f02 	tst.w	r3, #2
 801e2c0:	d106      	bne.n	801e2d0 <sleep_check+0x44>
 801e2c2:	4b15      	ldr	r3, [pc, #84]	@ (801e318 <sleep_check+0x8c>)
 801e2c4:	699b      	ldr	r3, [r3, #24]
 801e2c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801e2ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801e2ce:	b903      	cbnz	r3, 801e2d2 <sleep_check+0x46>
                if(sys.parking_state == Parking_DoorAjar)
                    sleep_execute();
                break;
        }
    }
}
 801e2d0:	bd08      	pop	{r3, pc}
        switch(state_get()) {
 801e2d2:	f000 ff19 	bl	801f108 <state_get>
 801e2d6:	2810      	cmp	r0, #16
 801e2d8:	d006      	beq.n	801e2e8 <sleep_check+0x5c>
 801e2da:	2840      	cmp	r0, #64	@ 0x40
 801e2dc:	d00c      	beq.n	801e2f8 <sleep_check+0x6c>
 801e2de:	2800      	cmp	r0, #0
 801e2e0:	d1f6      	bne.n	801e2d0 <sleep_check+0x44>
                sleep_execute();
 801e2e2:	f7ff ff93 	bl	801e20c <sleep_execute>
                break;
 801e2e6:	e7f3      	b.n	801e2d0 <sleep_check+0x44>
                if(sys.holding_state == Hold_Complete)
 801e2e8:	4b0a      	ldr	r3, [pc, #40]	@ (801e314 <sleep_check+0x88>)
 801e2ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801e2ee:	2b01      	cmp	r3, #1
 801e2f0:	d1ee      	bne.n	801e2d0 <sleep_check+0x44>
                    sleep_execute();
 801e2f2:	f7ff ff8b 	bl	801e20c <sleep_execute>
 801e2f6:	e7eb      	b.n	801e2d0 <sleep_check+0x44>
                if(sys.parking_state == Parking_DoorAjar)
 801e2f8:	4b06      	ldr	r3, [pc, #24]	@ (801e314 <sleep_check+0x88>)
 801e2fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801e2fe:	2b01      	cmp	r3, #1
 801e300:	d1e6      	bne.n	801e2d0 <sleep_check+0x44>
                    sleep_execute();
 801e302:	f7ff ff83 	bl	801e20c <sleep_execute>
 801e306:	e7e3      	b.n	801e2d0 <sleep_check+0x44>
 801e308:	200018dc 	.word	0x200018dc
 801e30c:	20002460 	.word	0x20002460
 801e310:	20002464 	.word	0x20002464
 801e314:	20001bbc 	.word	0x20001bbc
 801e318:	20001614 	.word	0x20001614

0801e31c <null_set_state>:
static void null_set_state (spindle_ptrs_t *spindle, spindle_state_t state, float rpm)
{
    UNUSED(spindle);
    UNUSED(state);
    UNUSED(rpm);
}
 801e31c:	4770      	bx	lr

0801e31e <null_get_state>:
static spindle_state_t null_get_state (spindle_ptrs_t *spindle)
{
    UNUSED(spindle);

    return (spindle_state_t){0};
}
 801e31e:	f04f 0000 	mov.w	r0, #0
 801e322:	4770      	bx	lr

0801e324 <null_update_pwm>:
// Sets spindle speed
static void null_update_pwm (spindle_ptrs_t *spindle, uint_fast16_t pwm_value)
{
    UNUSED(spindle);
    UNUSED(pwm_value);
}
 801e324:	4770      	bx	lr

0801e326 <null_get_pwm>:
{
    UNUSED(spindle);
    UNUSED(rpm);

    return 0;
}
 801e326:	2000      	movs	r0, #0
 801e328:	4770      	bx	lr

0801e32a <null_update_rpm>:

static void null_update_rpm (spindle_ptrs_t *spindle, float rpm)
{
    UNUSED(spindle);
    UNUSED(rpm);
}
 801e32a:	4770      	bx	lr

0801e32c <spindle_activate>:
{
 801e32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e330:	b090      	sub	sp, #64	@ 0x40
 801e332:	4604      	mov	r4, r0
 801e334:	460e      	mov	r6, r1
    if(pwm_spindle && pwm_spindle->cfg->config && pwm_spindle != &spindles[spindle_id]) {
 801e336:	4b95      	ldr	r3, [pc, #596]	@ (801e58c <spindle_activate+0x260>)
 801e338:	6818      	ldr	r0, [r3, #0]
 801e33a:	b338      	cbz	r0, 801e38c <spindle_activate+0x60>
 801e33c:	6803      	ldr	r3, [r0, #0]
 801e33e:	69db      	ldr	r3, [r3, #28]
 801e340:	b323      	cbz	r3, 801e38c <spindle_activate+0x60>
 801e342:	224c      	movs	r2, #76	@ 0x4c
 801e344:	4b92      	ldr	r3, [pc, #584]	@ (801e590 <spindle_activate+0x264>)
 801e346:	fb02 3304 	mla	r3, r2, r4, r3
 801e34a:	4298      	cmp	r0, r3
 801e34c:	d01e      	beq.n	801e38c <spindle_activate+0x60>
        if(!pwm_spindle->hal.cap.rpm_range_locked) {
 801e34e:	f990 300e 	ldrsb.w	r3, [r0, #14]
 801e352:	2b00      	cmp	r3, #0
 801e354:	db04      	blt.n	801e360 <spindle_activate+0x34>
            pwm_spindle->hal.rpm_min = settings.spindle.rpm_min;
 801e356:	4b8f      	ldr	r3, [pc, #572]	@ (801e594 <spindle_activate+0x268>)
 801e358:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801e35a:	6182      	str	r2, [r0, #24]
            pwm_spindle->hal.rpm_max = settings.spindle.rpm_max;
 801e35c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e35e:	61c3      	str	r3, [r0, #28]
        if((pwm_spindle->init_ok = pwm_spindle->hal.config == NULL || pwm_spindle->hal.config(&pwm_spindle->hal)))
 801e360:	6a03      	ldr	r3, [r0, #32]
 801e362:	2b00      	cmp	r3, #0
 801e364:	f000 80da 	beq.w	801e51c <spindle_activate+0x1f0>
 801e368:	3004      	adds	r0, #4
 801e36a:	4798      	blx	r3
 801e36c:	2800      	cmp	r0, #0
 801e36e:	f040 80d7 	bne.w	801e520 <spindle_activate+0x1f4>
 801e372:	2300      	movs	r3, #0
 801e374:	4a85      	ldr	r2, [pc, #532]	@ (801e58c <spindle_activate+0x260>)
 801e376:	6810      	ldr	r0, [r2, #0]
 801e378:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
 801e37c:	b133      	cbz	r3, 801e38c <spindle_activate+0x60>
            pwm_spindle->hal.set_state(&pwm_spindle->hal, (spindle_state_t){0}, 0.0f);
 801e37e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801e380:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 801e598 <spindle_activate+0x26c>
 801e384:	f04f 0100 	mov.w	r1, #0
 801e388:	3004      	adds	r0, #4
 801e38a:	4798      	blx	r3
    pwm_spindle = NULL;
 801e38c:	4b7f      	ldr	r3, [pc, #508]	@ (801e58c <spindle_activate+0x260>)
 801e38e:	2200      	movs	r2, #0
 801e390:	601a      	str	r2, [r3, #0]
    if((ok = spindle_id >= 0 && spindle_id < n_spindle && !!spindles[spindle_id].cfg)) {
 801e392:	4294      	cmp	r4, r2
 801e394:	f2c0 80f1 	blt.w	801e57a <spindle_activate+0x24e>
 801e398:	4b80      	ldr	r3, [pc, #512]	@ (801e59c <spindle_activate+0x270>)
 801e39a:	781b      	ldrb	r3, [r3, #0]
 801e39c:	429c      	cmp	r4, r3
 801e39e:	f280 80f1 	bge.w	801e584 <spindle_activate+0x258>
 801e3a2:	234c      	movs	r3, #76	@ 0x4c
 801e3a4:	fb04 f303 	mul.w	r3, r4, r3
 801e3a8:	4a79      	ldr	r2, [pc, #484]	@ (801e590 <spindle_activate+0x264>)
 801e3aa:	58d3      	ldr	r3, [r2, r3]
 801e3ac:	2b00      	cmp	r3, #0
 801e3ae:	f000 80eb 	beq.w	801e588 <spindle_activate+0x25c>
        if(sys_spindle[spindle_num].enabled && sys_spindle[spindle_num].hal.id != spindle_id && sys_spindle[spindle_num].hal.set_state)
 801e3b2:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
 801e3b6:	4b7a      	ldr	r3, [pc, #488]	@ (801e5a0 <spindle_activate+0x274>)
 801e3b8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801e3bc:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 801e3c0:	b16b      	cbz	r3, 801e3de <spindle_activate+0xb2>
 801e3c2:	4b77      	ldr	r3, [pc, #476]	@ (801e5a0 <spindle_activate+0x274>)
 801e3c4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801e3c8:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 801e3cc:	42a3      	cmp	r3, r4
 801e3ce:	d006      	beq.n	801e3de <spindle_activate+0xb2>
 801e3d0:	4b73      	ldr	r3, [pc, #460]	@ (801e5a0 <spindle_activate+0x274>)
 801e3d2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801e3d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e3d8:	b10b      	cbz	r3, 801e3de <spindle_activate+0xb2>
            gc_spindle_off(); // TODO: switch off only the default spindle?
 801e3da:	f7ef f9f3 	bl	800d7c4 <gc_spindle_off>
        if(!spindle->hal.cap.rpm_range_locked) {
 801e3de:	4b6c      	ldr	r3, [pc, #432]	@ (801e590 <spindle_activate+0x264>)
 801e3e0:	224c      	movs	r2, #76	@ 0x4c
 801e3e2:	fb02 3304 	mla	r3, r2, r4, r3
 801e3e6:	f993 300e 	ldrsb.w	r3, [r3, #14]
 801e3ea:	2b00      	cmp	r3, #0
 801e3ec:	db08      	blt.n	801e400 <spindle_activate+0xd4>
            spindle->hal.rpm_min = settings.spindle.rpm_min;
 801e3ee:	4a69      	ldr	r2, [pc, #420]	@ (801e594 <spindle_activate+0x268>)
 801e3f0:	6f91      	ldr	r1, [r2, #120]	@ 0x78
 801e3f2:	4b67      	ldr	r3, [pc, #412]	@ (801e590 <spindle_activate+0x264>)
 801e3f4:	204c      	movs	r0, #76	@ 0x4c
 801e3f6:	fb00 3304 	mla	r3, r0, r4, r3
 801e3fa:	6199      	str	r1, [r3, #24]
            spindle->hal.rpm_max = settings.spindle.rpm_max;
 801e3fc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801e3fe:	61da      	str	r2, [r3, #28]
        if(!spindle->init_ok)
 801e400:	4b63      	ldr	r3, [pc, #396]	@ (801e590 <spindle_activate+0x264>)
 801e402:	224c      	movs	r2, #76	@ 0x4c
 801e404:	fb02 3304 	mla	r3, r2, r4, r3
 801e408:	f893 5048 	ldrb.w	r5, [r3, #72]	@ 0x48
 801e40c:	b99d      	cbnz	r5, 801e436 <spindle_activate+0x10a>
            ok = spindle->init_ok = spindle->hal.config == NULL || spindle->hal.config(&spindle->hal);
 801e40e:	4b60      	ldr	r3, [pc, #384]	@ (801e590 <spindle_activate+0x264>)
 801e410:	fb02 3304 	mla	r3, r2, r4, r3
 801e414:	6a1b      	ldr	r3, [r3, #32]
 801e416:	2b00      	cmp	r3, #0
 801e418:	f000 8084 	beq.w	801e524 <spindle_activate+0x1f8>
 801e41c:	485c      	ldr	r0, [pc, #368]	@ (801e590 <spindle_activate+0x264>)
 801e41e:	fb02 0004 	mla	r0, r2, r4, r0
 801e422:	3004      	adds	r0, #4
 801e424:	4798      	blx	r3
 801e426:	2800      	cmp	r0, #0
 801e428:	d17e      	bne.n	801e528 <spindle_activate+0x1fc>
 801e42a:	4b59      	ldr	r3, [pc, #356]	@ (801e590 <spindle_activate+0x264>)
 801e42c:	224c      	movs	r2, #76	@ 0x4c
 801e42e:	fb02 3304 	mla	r3, r2, r4, r3
 801e432:	f883 5048 	strb.w	r5, [r3, #72]	@ 0x48
        if(ok) {
 801e436:	2d00      	cmp	r5, #0
 801e438:	f000 80a0 	beq.w	801e57c <spindle_activate+0x250>
            memcpy(&spindle_hal, &spindle->hal, sizeof(spindle_ptrs_t));
 801e43c:	224c      	movs	r2, #76	@ 0x4c
 801e43e:	4b54      	ldr	r3, [pc, #336]	@ (801e590 <spindle_activate+0x264>)
 801e440:	fb02 3804 	mla	r8, r2, r4, r3
 801e444:	f108 0c04 	add.w	ip, r8, #4
 801e448:	466f      	mov	r7, sp
 801e44a:	f108 0844 	add.w	r8, r8, #68	@ 0x44
 801e44e:	46be      	mov	lr, r7
 801e450:	f8dc 0000 	ldr.w	r0, [ip]
 801e454:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801e458:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801e45c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 801e460:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801e464:	f10c 0c10 	add.w	ip, ip, #16
 801e468:	4677      	mov	r7, lr
 801e46a:	45c4      	cmp	ip, r8
 801e46c:	d1ef      	bne.n	801e44e <spindle_activate+0x122>
            if(spindle->cfg->get_data == NULL) {
 801e46e:	234c      	movs	r3, #76	@ 0x4c
 801e470:	fb04 f303 	mul.w	r3, r4, r3
 801e474:	4a46      	ldr	r2, [pc, #280]	@ (801e590 <spindle_activate+0x264>)
 801e476:	58d3      	ldr	r3, [r2, r3]
 801e478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e47a:	2a00      	cmp	r2, #0
 801e47c:	d056      	beq.n	801e52c <spindle_activate+0x200>
            spindle_hal.cap.laser &= settings.mode == Mode_Laser;
 801e47e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 801e482:	4a44      	ldr	r2, [pc, #272]	@ (801e594 <spindle_activate+0x268>)
 801e484:	7e12      	ldrb	r2, [r2, #24]
 801e486:	2a01      	cmp	r2, #1
 801e488:	bf14      	ite	ne
 801e48a:	2200      	movne	r2, #0
 801e48c:	2201      	moveq	r2, #1
 801e48e:	ea02 02d3 	and.w	r2, r2, r3, lsr #3
 801e492:	f362 03c3 	bfi	r3, r2, #3, #1
 801e496:	f88d 300a 	strb.w	r3, [sp, #10]
            if(grbl.on_spindle_select)
 801e49a:	4b42      	ldr	r3, [pc, #264]	@ (801e5a4 <spindle_activate+0x278>)
 801e49c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801e4a0:	b113      	cbz	r3, 801e4a8 <spindle_activate+0x17c>
                ok = grbl.on_spindle_select(&spindle_hal);
 801e4a2:	4668      	mov	r0, sp
 801e4a4:	4798      	blx	r3
 801e4a6:	4605      	mov	r5, r0
            if(ok) {
 801e4a8:	2d00      	cmp	r5, #0
 801e4aa:	d067      	beq.n	801e57c <spindle_activate+0x250>
                sys_spindle[spindle_num].enabled = true;
 801e4ac:	4a3c      	ldr	r2, [pc, #240]	@ (801e5a0 <spindle_activate+0x274>)
 801e4ae:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 801e4b2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801e4b6:	2101      	movs	r1, #1
 801e4b8:	f883 106c 	strb.w	r1, [r3, #108]	@ 0x6c
                sys_spindle[spindle_num].param.hal = &sys_spindle[spindle_num].hal;
 801e4bc:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 801e4c0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801e4c4:	f10c 0c28 	add.w	ip, ip, #40	@ 0x28
 801e4c8:	4494      	add	ip, r2
 801e4ca:	f10c 0c04 	add.w	ip, ip, #4
 801e4ce:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
                if(sys_spindle[spindle_num].param.override_pct == 0)
 801e4d2:	68db      	ldr	r3, [r3, #12]
 801e4d4:	b933      	cbnz	r3, 801e4e4 <spindle_activate+0x1b8>
                    sys_spindle[spindle_num].param.override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE;
 801e4d6:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
 801e4da:	4b31      	ldr	r3, [pc, #196]	@ (801e5a0 <spindle_activate+0x274>)
 801e4dc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801e4e0:	2264      	movs	r2, #100	@ 0x64
 801e4e2:	60da      	str	r2, [r3, #12]
                spindle_hal.param = &sys_spindle[spindle_num].param;
 801e4e4:	ebc6 01c6 	rsb	r1, r6, r6, lsl #3
 801e4e8:	4b2d      	ldr	r3, [pc, #180]	@ (801e5a0 <spindle_activate+0x274>)
 801e4ea:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 801e4ee:	9301      	str	r3, [sp, #4]
                memcpy(&sys_spindle[spindle_num].hal, &spindle_hal, sizeof(spindle_ptrs_t));
 801e4f0:	466f      	mov	r7, sp
 801e4f2:	4666      	mov	r6, ip
 801e4f4:	f10d 0e40 	add.w	lr, sp, #64	@ 0x40
 801e4f8:	463c      	mov	r4, r7
 801e4fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e4fc:	6030      	str	r0, [r6, #0]
 801e4fe:	6071      	str	r1, [r6, #4]
 801e500:	60b2      	str	r2, [r6, #8]
 801e502:	60f3      	str	r3, [r6, #12]
 801e504:	4627      	mov	r7, r4
 801e506:	3610      	adds	r6, #16
 801e508:	4574      	cmp	r4, lr
 801e50a:	d1f5      	bne.n	801e4f8 <spindle_activate+0x1cc>
                if(grbl.on_spindle_selected)
 801e50c:	4b25      	ldr	r3, [pc, #148]	@ (801e5a4 <spindle_activate+0x278>)
 801e50e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 801e512:	2b00      	cmp	r3, #0
 801e514:	d032      	beq.n	801e57c <spindle_activate+0x250>
                    grbl.on_spindle_selected(&sys_spindle[spindle_num].hal);
 801e516:	4660      	mov	r0, ip
 801e518:	4798      	blx	r3
 801e51a:	e02f      	b.n	801e57c <spindle_activate+0x250>
        if((pwm_spindle->init_ok = pwm_spindle->hal.config == NULL || pwm_spindle->hal.config(&pwm_spindle->hal)))
 801e51c:	2301      	movs	r3, #1
 801e51e:	e729      	b.n	801e374 <spindle_activate+0x48>
 801e520:	2301      	movs	r3, #1
 801e522:	e727      	b.n	801e374 <spindle_activate+0x48>
            ok = spindle->init_ok = spindle->hal.config == NULL || spindle->hal.config(&spindle->hal);
 801e524:	2501      	movs	r5, #1
 801e526:	e780      	b.n	801e42a <spindle_activate+0xfe>
 801e528:	2501      	movs	r5, #1
 801e52a:	e77e      	b.n	801e42a <spindle_activate+0xfe>
                if(settings.offset_lock.encoder_spindle == spindle_id) {
 801e52c:	4a19      	ldr	r2, [pc, #100]	@ (801e594 <spindle_activate+0x268>)
 801e52e:	f892 2102 	ldrb.w	r2, [r2, #258]	@ 0x102
 801e532:	ebb4 0fd2 	cmp.w	r4, r2, lsr #3
 801e536:	d00d      	beq.n	801e554 <spindle_activate+0x228>
                    spindle_hal.get_data = NULL;
 801e538:	2200      	movs	r2, #0
 801e53a:	920e      	str	r2, [sp, #56]	@ 0x38
                    spindle_hal.reset_data = NULL;
 801e53c:	920f      	str	r2, [sp, #60]	@ 0x3c
                    if(!spindle->cfg->cap.at_speed)
 801e53e:	7a9b      	ldrb	r3, [r3, #10]
 801e540:	f013 0f04 	tst.w	r3, #4
 801e544:	d19b      	bne.n	801e47e <spindle_activate+0x152>
                        spindle_hal.cap.at_speed = Off;
 801e546:	f89d 300a 	ldrb.w	r3, [sp, #10]
 801e54a:	f36f 0382 	bfc	r3, #2, #1
 801e54e:	f88d 300a 	strb.w	r3, [sp, #10]
 801e552:	e794      	b.n	801e47e <spindle_activate+0x152>
                    spindle_hal.get_data = hal.spindle_data.get;
 801e554:	4914      	ldr	r1, [pc, #80]	@ (801e5a8 <spindle_activate+0x27c>)
 801e556:	6f8a      	ldr	r2, [r1, #120]	@ 0x78
 801e558:	920e      	str	r2, [sp, #56]	@ 0x38
                    spindle_hal.reset_data = hal.spindle_data.reset;
 801e55a:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 801e55c:	910f      	str	r1, [sp, #60]	@ 0x3c
                    if(!spindle->cfg->cap.at_speed)
 801e55e:	7a9b      	ldrb	r3, [r3, #10]
 801e560:	f013 0f04 	tst.w	r3, #4
 801e564:	d18b      	bne.n	801e47e <spindle_activate+0x152>
                        spindle_hal.cap.at_speed = !!spindle_hal.get_data;
 801e566:	3a00      	subs	r2, #0
 801e568:	bf18      	it	ne
 801e56a:	2201      	movne	r2, #1
 801e56c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 801e570:	f362 0382 	bfi	r3, r2, #2, #1
 801e574:	f88d 300a 	strb.w	r3, [sp, #10]
 801e578:	e781      	b.n	801e47e <spindle_activate+0x152>
    if((ok = spindle_id >= 0 && spindle_id < n_spindle && !!spindles[spindle_id].cfg)) {
 801e57a:	2500      	movs	r5, #0
}
 801e57c:	4628      	mov	r0, r5
 801e57e:	b010      	add	sp, #64	@ 0x40
 801e580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((ok = spindle_id >= 0 && spindle_id < n_spindle && !!spindles[spindle_id].cfg)) {
 801e584:	2500      	movs	r5, #0
 801e586:	e7f9      	b.n	801e57c <spindle_activate+0x250>
 801e588:	2500      	movs	r5, #0
 801e58a:	e7f7      	b.n	801e57c <spindle_activate+0x250>
 801e58c:	20002468 	.word	0x20002468
 801e590:	2000246c 	.word	0x2000246c
 801e594:	200022f4 	.word	0x200022f4
 801e598:	00000000 	.word	0x00000000
 801e59c:	20002528 	.word	0x20002528
 801e5a0:	200024b8 	.word	0x200024b8
 801e5a4:	20001ac4 	.word	0x20001ac4
 801e5a8:	200018dc 	.word	0x200018dc

0801e5ac <spindle_get_num>:
{
 801e5ac:	b510      	push	{r4, lr}
 801e5ae:	4604      	mov	r4, r0
        if((setting = setting_get_details(idx == 0 ? Setting_SpindleType : (setting_id_t)(Setting_SpindleEnable0 + idx), NULL))) {
 801e5b0:	2100      	movs	r1, #0
 801e5b2:	f240 108b 	movw	r0, #395	@ 0x18b
 801e5b6:	f7ff fa65 	bl	801da84 <setting_get_details>
 801e5ba:	b148      	cbz	r0, 801e5d0 <spindle_get_num+0x24>
            if(setting_get_int_value(setting, 0) == spindle_id)
 801e5bc:	2100      	movs	r1, #0
 801e5be:	f7ff f869 	bl	801d694 <setting_get_int_value>
 801e5c2:	42a0      	cmp	r0, r4
 801e5c4:	d101      	bne.n	801e5ca <spindle_get_num+0x1e>
                spindle_num = idx;
 801e5c6:	2000      	movs	r0, #0
}
 801e5c8:	bd10      	pop	{r4, pc}
            if(setting_get_int_value(setting, 0) == spindle_id)
 801e5ca:	f04f 30ff 	mov.w	r0, #4294967295
 801e5ce:	e7fb      	b.n	801e5c8 <spindle_get_num+0x1c>
 801e5d0:	f04f 30ff 	mov.w	r0, #4294967295
 801e5d4:	e7f8      	b.n	801e5c8 <spindle_get_num+0x1c>
	...

0801e5d8 <spindle_register>:
{
 801e5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5da:	4604      	mov	r4, r0
 801e5dc:	460e      	mov	r6, r1
    if(n_spindle == 1 && spindles[0].cfg->type == SpindleType_Null)
 801e5de:	4b33      	ldr	r3, [pc, #204]	@ (801e6ac <spindle_register+0xd4>)
 801e5e0:	781b      	ldrb	r3, [r3, #0]
 801e5e2:	2b01      	cmp	r3, #1
 801e5e4:	d032      	beq.n	801e64c <spindle_register+0x74>
    if(n_spindle < N_SPINDLE && settings_add_spindle_type(name)) {
 801e5e6:	4b31      	ldr	r3, [pc, #196]	@ (801e6ac <spindle_register+0xd4>)
 801e5e8:	781b      	ldrb	r3, [r3, #0]
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	d158      	bne.n	801e6a0 <spindle_register+0xc8>
 801e5ee:	4630      	mov	r0, r6
 801e5f0:	f7ff fce8 	bl	801dfc4 <settings_add_spindle_type>
 801e5f4:	2800      	cmp	r0, #0
 801e5f6:	d056      	beq.n	801e6a6 <spindle_register+0xce>
        spindles[n_spindle].cfg = spindle;
 801e5f8:	4b2c      	ldr	r3, [pc, #176]	@ (801e6ac <spindle_register+0xd4>)
 801e5fa:	781d      	ldrb	r5, [r3, #0]
 801e5fc:	492c      	ldr	r1, [pc, #176]	@ (801e6b0 <spindle_register+0xd8>)
 801e5fe:	224c      	movs	r2, #76	@ 0x4c
 801e600:	fb05 f202 	mul.w	r2, r5, r2
 801e604:	188b      	adds	r3, r1, r2
 801e606:	508c      	str	r4, [r1, r2]
        spindles[n_spindle].name = name;
 801e608:	645e      	str	r6, [r3, #68]	@ 0x44
        memcpy(&spindles[n_spindle].hal, spindles[n_spindle].cfg, sizeof(spindle_ptrs_t));
 801e60a:	4622      	mov	r2, r4
 801e60c:	3304      	adds	r3, #4
 801e60e:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 801e612:	6817      	ldr	r7, [r2, #0]
 801e614:	6856      	ldr	r6, [r2, #4]
 801e616:	6890      	ldr	r0, [r2, #8]
 801e618:	68d1      	ldr	r1, [r2, #12]
 801e61a:	601f      	str	r7, [r3, #0]
 801e61c:	605e      	str	r6, [r3, #4]
 801e61e:	6098      	str	r0, [r3, #8]
 801e620:	60d9      	str	r1, [r3, #12]
 801e622:	3210      	adds	r2, #16
 801e624:	3310      	adds	r3, #16
 801e626:	4562      	cmp	r2, ip
 801e628:	d1f3      	bne.n	801e612 <spindle_register+0x3a>
        spindles[n_spindle].hal.id = n_spindle;
 801e62a:	b26f      	sxtb	r7, r5
 801e62c:	4b20      	ldr	r3, [pc, #128]	@ (801e6b0 <spindle_register+0xd8>)
 801e62e:	224c      	movs	r2, #76	@ 0x4c
 801e630:	fb02 3305 	mla	r3, r2, r5, r3
 801e634:	711f      	strb	r7, [r3, #4]
        if(spindle->type == SpindleType_PWM && pwm_spindle == NULL) {
 801e636:	7a23      	ldrb	r3, [r4, #8]
 801e638:	b913      	cbnz	r3, 801e640 <spindle_register+0x68>
 801e63a:	4b1e      	ldr	r3, [pc, #120]	@ (801e6b4 <spindle_register+0xdc>)
 801e63c:	681b      	ldr	r3, [r3, #0]
 801e63e:	b173      	cbz	r3, 801e65e <spindle_register+0x86>
        if(n_spindle == 0)
 801e640:	b1d5      	cbz	r5, 801e678 <spindle_register+0xa0>
        return n_spindle++;
 801e642:	3501      	adds	r5, #1
 801e644:	4b19      	ldr	r3, [pc, #100]	@ (801e6ac <spindle_register+0xd4>)
 801e646:	701d      	strb	r5, [r3, #0]
}
 801e648:	4638      	mov	r0, r7
 801e64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(n_spindle == 1 && spindles[0].cfg->type == SpindleType_Null)
 801e64c:	4b18      	ldr	r3, [pc, #96]	@ (801e6b0 <spindle_register+0xd8>)
 801e64e:	681b      	ldr	r3, [r3, #0]
 801e650:	7a1b      	ldrb	r3, [r3, #8]
 801e652:	2b05      	cmp	r3, #5
 801e654:	d1c7      	bne.n	801e5e6 <spindle_register+0xe>
        n_spindle = 0;
 801e656:	4b15      	ldr	r3, [pc, #84]	@ (801e6ac <spindle_register+0xd4>)
 801e658:	2200      	movs	r2, #0
 801e65a:	701a      	strb	r2, [r3, #0]
 801e65c:	e7c3      	b.n	801e5e6 <spindle_register+0xe>
            pwm_spindle = &spindles[n_spindle];
 801e65e:	4b14      	ldr	r3, [pc, #80]	@ (801e6b0 <spindle_register+0xd8>)
 801e660:	fb02 3305 	mla	r3, r2, r5, r3
 801e664:	4a13      	ldr	r2, [pc, #76]	@ (801e6b4 <spindle_register+0xdc>)
 801e666:	6013      	str	r3, [r2, #0]
            hal.driver_cap.pwm_spindle = On;
 801e668:	4a13      	ldr	r2, [pc, #76]	@ (801e6b8 <spindle_register+0xe0>)
 801e66a:	f892 31da 	ldrb.w	r3, [r2, #474]	@ 0x1da
 801e66e:	f043 0310 	orr.w	r3, r3, #16
 801e672:	f882 31da 	strb.w	r3, [r2, #474]	@ 0x1da
 801e676:	e7e3      	b.n	801e640 <spindle_register+0x68>
            memcpy(&sys_spindle[0].hal, spindle, sizeof(spindle_ptrs_t));
 801e678:	46a4      	mov	ip, r4
 801e67a:	4e10      	ldr	r6, [pc, #64]	@ (801e6bc <spindle_register+0xe4>)
 801e67c:	3440      	adds	r4, #64	@ 0x40
 801e67e:	46b6      	mov	lr, r6
 801e680:	f8dc 0000 	ldr.w	r0, [ip]
 801e684:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801e688:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801e68c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 801e690:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801e694:	f10c 0c10 	add.w	ip, ip, #16
 801e698:	4676      	mov	r6, lr
 801e69a:	45a4      	cmp	ip, r4
 801e69c:	d1ef      	bne.n	801e67e <spindle_register+0xa6>
 801e69e:	e7d0      	b.n	801e642 <spindle_register+0x6a>
    return -1;
 801e6a0:	f04f 37ff 	mov.w	r7, #4294967295
 801e6a4:	e7d0      	b.n	801e648 <spindle_register+0x70>
 801e6a6:	f04f 37ff 	mov.w	r7, #4294967295
 801e6aa:	e7cd      	b.n	801e648 <spindle_register+0x70>
 801e6ac:	20002528 	.word	0x20002528
 801e6b0:	2000246c 	.word	0x2000246c
 801e6b4:	20002468 	.word	0x20002468
 801e6b8:	200018dc 	.word	0x200018dc
 801e6bc:	200024e4 	.word	0x200024e4

0801e6c0 <spindle_get_caps>:
{
 801e6c0:	4601      	mov	r1, r0
    spindle_cap_t caps = {0};
 801e6c2:	f04f 0000 	mov.w	r0, #0
    uint_fast8_t idx = n_spindle;
 801e6c6:	4b0e      	ldr	r3, [pc, #56]	@ (801e700 <spindle_get_caps+0x40>)
 801e6c8:	781b      	ldrb	r3, [r3, #0]
    if(n_spindle) do {
 801e6ca:	b1c3      	cbz	r3, 801e6fe <spindle_get_caps+0x3e>
{
 801e6cc:	b410      	push	{r4}
 801e6ce:	e007      	b.n	801e6e0 <spindle_get_caps+0x20>
        caps.value |= (active ? spindles[idx].hal.cap.value : spindles[idx].cfg->cap.value);
 801e6d0:	4a0c      	ldr	r2, [pc, #48]	@ (801e704 <spindle_get_caps+0x44>)
 801e6d2:	244c      	movs	r4, #76	@ 0x4c
 801e6d4:	fb04 2203 	mla	r2, r4, r3, r2
 801e6d8:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 801e6dc:	4310      	orrs	r0, r2
    } while(idx);
 801e6de:	b15b      	cbz	r3, 801e6f8 <spindle_get_caps+0x38>
        --idx;
 801e6e0:	3b01      	subs	r3, #1
        caps.value |= (active ? spindles[idx].hal.cap.value : spindles[idx].cfg->cap.value);
 801e6e2:	b280      	uxth	r0, r0
 801e6e4:	2900      	cmp	r1, #0
 801e6e6:	d1f3      	bne.n	801e6d0 <spindle_get_caps+0x10>
 801e6e8:	224c      	movs	r2, #76	@ 0x4c
 801e6ea:	fb03 f202 	mul.w	r2, r3, r2
 801e6ee:	4c05      	ldr	r4, [pc, #20]	@ (801e704 <spindle_get_caps+0x44>)
 801e6f0:	58a2      	ldr	r2, [r4, r2]
 801e6f2:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801e6f6:	e7f1      	b.n	801e6dc <spindle_get_caps+0x1c>
}
 801e6f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e6fc:	4770      	bx	lr
 801e6fe:	4770      	bx	lr
 801e700:	20002528 	.word	0x20002528
 801e704:	2000246c 	.word	0x2000246c

0801e708 <spindle_enumerate_spindles>:
    if(callback == NULL || n_spindle == 0)
 801e708:	2800      	cmp	r0, #0
 801e70a:	d04d      	beq.n	801e7a8 <spindle_enumerate_spindles+0xa0>
{
 801e70c:	b570      	push	{r4, r5, r6, lr}
 801e70e:	b084      	sub	sp, #16
 801e710:	460d      	mov	r5, r1
 801e712:	4606      	mov	r6, r0
    if(callback == NULL || n_spindle == 0)
 801e714:	4b26      	ldr	r3, [pc, #152]	@ (801e7b0 <spindle_enumerate_spindles+0xa8>)
 801e716:	781b      	ldrb	r3, [r3, #0]
 801e718:	2b00      	cmp	r3, #0
 801e71a:	d047      	beq.n	801e7ac <spindle_enumerate_spindles+0xa4>
    for(idx = 0; idx < n_spindle; idx++) {
 801e71c:	2400      	movs	r4, #0
 801e71e:	e03a      	b.n	801e796 <spindle_enumerate_spindles+0x8e>
        spindle.id = idx;
 801e720:	b260      	sxtb	r0, r4
 801e722:	f88d 0000 	strb.w	r0, [sp]
        spindle.name = spindles[idx].name;
 801e726:	4b23      	ldr	r3, [pc, #140]	@ (801e7b4 <spindle_enumerate_spindles+0xac>)
 801e728:	224c      	movs	r2, #76	@ 0x4c
 801e72a:	fb02 3304 	mla	r3, r2, r4, r3
 801e72e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e730:	9301      	str	r3, [sp, #4]
        spindle.num = spindle_get_num(idx);
 801e732:	f7ff ff3b 	bl	801e5ac <spindle_get_num>
 801e736:	f88d 0001 	strb.w	r0, [sp, #1]
        spindle.enabled = spindle.num != -1;
 801e73a:	1c42      	adds	r2, r0, #1
 801e73c:	bf18      	it	ne
 801e73e:	2201      	movne	r2, #1
 801e740:	f88d 2008 	strb.w	r2, [sp, #8]
        spindle.hal = spindle.enabled && sys_spindle[spindle.num].hal.id == spindle.id ? &sys_spindle[spindle.num].hal : &spindles[idx].hal;
 801e744:	b152      	cbz	r2, 801e75c <spindle_enumerate_spindles+0x54>
 801e746:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 801e74a:	4b1b      	ldr	r3, [pc, #108]	@ (801e7b8 <spindle_enumerate_spindles+0xb0>)
 801e74c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 801e750:	f993 102c 	ldrsb.w	r1, [r3, #44]	@ 0x2c
 801e754:	f99d 3000 	ldrsb.w	r3, [sp]
 801e758:	4299      	cmp	r1, r3
 801e75a:	d00d      	beq.n	801e778 <spindle_enumerate_spindles+0x70>
 801e75c:	214c      	movs	r1, #76	@ 0x4c
 801e75e:	4b15      	ldr	r3, [pc, #84]	@ (801e7b4 <spindle_enumerate_spindles+0xac>)
 801e760:	fb01 3304 	mla	r3, r1, r4, r3
 801e764:	3304      	adds	r3, #4
 801e766:	9303      	str	r3, [sp, #12]
        spindle.is_current = spindle.enabled && sys_spindle[0].hal.id == idx;
 801e768:	b172      	cbz	r2, 801e788 <spindle_enumerate_spindles+0x80>
 801e76a:	4b13      	ldr	r3, [pc, #76]	@ (801e7b8 <spindle_enumerate_spindles+0xb0>)
 801e76c:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 801e770:	42a3      	cmp	r3, r4
 801e772:	d017      	beq.n	801e7a4 <spindle_enumerate_spindles+0x9c>
 801e774:	2300      	movs	r3, #0
 801e776:	e008      	b.n	801e78a <spindle_enumerate_spindles+0x82>
        spindle.hal = spindle.enabled && sys_spindle[spindle.num].hal.id == spindle.id ? &sys_spindle[spindle.num].hal : &spindles[idx].hal;
 801e778:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 801e77c:	011b      	lsls	r3, r3, #4
 801e77e:	3328      	adds	r3, #40	@ 0x28
 801e780:	490d      	ldr	r1, [pc, #52]	@ (801e7b8 <spindle_enumerate_spindles+0xb0>)
 801e782:	440b      	add	r3, r1
 801e784:	3304      	adds	r3, #4
 801e786:	e7ee      	b.n	801e766 <spindle_enumerate_spindles+0x5e>
        spindle.is_current = spindle.enabled && sys_spindle[0].hal.id == idx;
 801e788:	2300      	movs	r3, #0
 801e78a:	f88d 3009 	strb.w	r3, [sp, #9]
        callback(&spindle, data);
 801e78e:	4629      	mov	r1, r5
 801e790:	4668      	mov	r0, sp
 801e792:	47b0      	blx	r6
    for(idx = 0; idx < n_spindle; idx++) {
 801e794:	3401      	adds	r4, #1
 801e796:	4b06      	ldr	r3, [pc, #24]	@ (801e7b0 <spindle_enumerate_spindles+0xa8>)
 801e798:	781b      	ldrb	r3, [r3, #0]
 801e79a:	42a3      	cmp	r3, r4
 801e79c:	d8c0      	bhi.n	801e720 <spindle_enumerate_spindles+0x18>
    return true;
 801e79e:	2001      	movs	r0, #1
}
 801e7a0:	b004      	add	sp, #16
 801e7a2:	bd70      	pop	{r4, r5, r6, pc}
        spindle.is_current = spindle.enabled && sys_spindle[0].hal.id == idx;
 801e7a4:	2301      	movs	r3, #1
 801e7a6:	e7f0      	b.n	801e78a <spindle_enumerate_spindles+0x82>
        return false;
 801e7a8:	2000      	movs	r0, #0
}
 801e7aa:	4770      	bx	lr
        return false;
 801e7ac:	2000      	movs	r0, #0
 801e7ae:	e7f7      	b.n	801e7a0 <spindle_enumerate_spindles+0x98>
 801e7b0:	20002528 	.word	0x20002528
 801e7b4:	2000246c 	.word	0x2000246c
 801e7b8:	200024b8 	.word	0x200024b8

0801e7bc <spindle_is_enabled>:
    if(spindle_num == -1)
 801e7bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 801e7c0:	d002      	beq.n	801e7c8 <spindle_is_enabled+0xc>
    return spindle_num >= 0 && spindle_num < N_SYS_SPINDLE && sys_spindle[spindle_num].enabled;
 801e7c2:	b110      	cbz	r0, 801e7ca <spindle_is_enabled+0xe>
 801e7c4:	2000      	movs	r0, #0
 801e7c6:	4770      	bx	lr
        spindle_num = 0;
 801e7c8:	2000      	movs	r0, #0
    return spindle_num >= 0 && spindle_num < N_SYS_SPINDLE && sys_spindle[spindle_num].enabled;
 801e7ca:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801e7ce:	4b05      	ldr	r3, [pc, #20]	@ (801e7e4 <spindle_is_enabled+0x28>)
 801e7d0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801e7d4:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 801e7d8:	b90b      	cbnz	r3, 801e7de <spindle_is_enabled+0x22>
 801e7da:	2000      	movs	r0, #0
 801e7dc:	4770      	bx	lr
 801e7de:	2001      	movs	r0, #1
}
 801e7e0:	4770      	bx	lr
 801e7e2:	bf00      	nop
 801e7e4:	200024b8 	.word	0x200024b8

0801e7e8 <spindle_get>:
    return spindle_num >= 0 && spindle_num < N_SYS_SPINDLE && sys_spindle[spindle_num].enabled ? &sys_spindle[spindle_num].hal : NULL;
 801e7e8:	b968      	cbnz	r0, 801e806 <spindle_get+0x1e>
 801e7ea:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 801e7ee:	4a08      	ldr	r2, [pc, #32]	@ (801e810 <spindle_get+0x28>)
 801e7f0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801e7f4:	f892 206c 	ldrb.w	r2, [r2, #108]	@ 0x6c
 801e7f8:	b13a      	cbz	r2, 801e80a <spindle_get+0x22>
 801e7fa:	0108      	lsls	r0, r1, #4
 801e7fc:	3028      	adds	r0, #40	@ 0x28
 801e7fe:	4b04      	ldr	r3, [pc, #16]	@ (801e810 <spindle_get+0x28>)
 801e800:	4418      	add	r0, r3
 801e802:	3004      	adds	r0, #4
 801e804:	4770      	bx	lr
 801e806:	2000      	movs	r0, #0
 801e808:	4770      	bx	lr
 801e80a:	2000      	movs	r0, #0
}
 801e80c:	4770      	bx	lr
 801e80e:	bf00      	nop
 801e810:	200024b8 	.word	0x200024b8

0801e814 <spindle_add_null>:
/*! \brief Register a null spindle that has no connection to the outside world.
This is done automatically on startup if no spindle can be succesfully enabled.
\returns assigned spindle id as a \ref spindle_id_t if successful, \a -1 if not.
*/
spindle_id_t spindle_add_null (void)
{
 801e814:	b508      	push	{r3, lr}
        .update_pwm = null_update_pwm,
        .update_rpm = null_update_rpm
    };

    bool registered = false;
    uint_fast8_t idx = n_spindle;
 801e816:	4b0d      	ldr	r3, [pc, #52]	@ (801e84c <spindle_add_null+0x38>)
 801e818:	7818      	ldrb	r0, [r3, #0]

    if(idx) do {
 801e81a:	b168      	cbz	r0, 801e838 <spindle_add_null+0x24>
        if((registered = spindles[--idx].hal.type == SpindleType_Null))
 801e81c:	3801      	subs	r0, #1
 801e81e:	4b0c      	ldr	r3, [pc, #48]	@ (801e850 <spindle_add_null+0x3c>)
 801e820:	224c      	movs	r2, #76	@ 0x4c
 801e822:	fb02 3300 	mla	r3, r2, r0, r3
 801e826:	7b1b      	ldrb	r3, [r3, #12]
 801e828:	2b05      	cmp	r3, #5
 801e82a:	bf0c      	ite	eq
 801e82c:	2301      	moveq	r3, #1
 801e82e:	2300      	movne	r3, #0
 801e830:	d003      	beq.n	801e83a <spindle_add_null+0x26>
            break;
    } while(idx);
 801e832:	2800      	cmp	r0, #0
 801e834:	d1f2      	bne.n	801e81c <spindle_add_null+0x8>
 801e836:	e000      	b.n	801e83a <spindle_add_null+0x26>
    bool registered = false;
 801e838:	2300      	movs	r3, #0

    if(!registered)
 801e83a:	b10b      	cbz	r3, 801e840 <spindle_add_null+0x2c>
        return spindle_register(&spindle, "NULL");

    return idx;
 801e83c:	b240      	sxtb	r0, r0
}
 801e83e:	bd08      	pop	{r3, pc}
        return spindle_register(&spindle, "NULL");
 801e840:	4904      	ldr	r1, [pc, #16]	@ (801e854 <spindle_add_null+0x40>)
 801e842:	4805      	ldr	r0, [pc, #20]	@ (801e858 <spindle_add_null+0x44>)
 801e844:	f7ff fec8 	bl	801e5d8 <spindle_register>
 801e848:	e7f9      	b.n	801e83e <spindle_add_null+0x2a>
 801e84a:	bf00      	nop
 801e84c:	20002528 	.word	0x20002528
 801e850:	2000246c 	.word	0x2000246c
 801e854:	08030c0c 	.word	0x08030c0c
 801e858:	08030c14 	.word	0x08030c14

0801e85c <spindle_select>:
{
 801e85c:	b508      	push	{r3, lr}
    if(n_spindle == 0 && spindle_id >= 0) {
 801e85e:	4b0d      	ldr	r3, [pc, #52]	@ (801e894 <spindle_select+0x38>)
 801e860:	781b      	ldrb	r3, [r3, #0]
 801e862:	b90b      	cbnz	r3, 801e868 <spindle_select+0xc>
 801e864:	2800      	cmp	r0, #0
 801e866:	da0d      	bge.n	801e884 <spindle_select+0x28>
    return (sys_spindle[0].enabled && sys_spindle[0].hal.id == spindle_id) || spindle_activate(spindle_id, 0);
 801e868:	4b0b      	ldr	r3, [pc, #44]	@ (801e898 <spindle_select+0x3c>)
 801e86a:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 801e86e:	b123      	cbz	r3, 801e87a <spindle_select+0x1e>
 801e870:	4b09      	ldr	r3, [pc, #36]	@ (801e898 <spindle_select+0x3c>)
 801e872:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 801e876:	4283      	cmp	r3, r0
 801e878:	d008      	beq.n	801e88c <spindle_select+0x30>
 801e87a:	2100      	movs	r1, #0
 801e87c:	f7ff fd56 	bl	801e32c <spindle_activate>
 801e880:	b930      	cbnz	r0, 801e890 <spindle_select+0x34>
}
 801e882:	bd08      	pop	{r3, pc}
        spindle_add_null();
 801e884:	f7ff ffc6 	bl	801e814 <spindle_add_null>
        spindle_id = 0;
 801e888:	2000      	movs	r0, #0
 801e88a:	e7ed      	b.n	801e868 <spindle_select+0xc>
    return (sys_spindle[0].enabled && sys_spindle[0].hal.id == spindle_id) || spindle_activate(spindle_id, 0);
 801e88c:	2001      	movs	r0, #1
 801e88e:	e7f8      	b.n	801e882 <spindle_select+0x26>
 801e890:	2001      	movs	r0, #1
 801e892:	e7f6      	b.n	801e882 <spindle_select+0x26>
 801e894:	20002528 	.word	0x20002528
 801e898:	200024b8 	.word	0x200024b8

0801e89c <spindle_get_count>:
{
 801e89c:	b508      	push	{r3, lr}
    if(n_spindle == 0)
 801e89e:	4b09      	ldr	r3, [pc, #36]	@ (801e8c4 <spindle_get_count+0x28>)
 801e8a0:	781b      	ldrb	r3, [r3, #0]
 801e8a2:	b123      	cbz	r3, 801e8ae <spindle_get_count+0x12>
    return n_spindle == 1 && spindles[0].cfg->type == SpindleType_Null ? 0 : n_spindle;
 801e8a4:	4b07      	ldr	r3, [pc, #28]	@ (801e8c4 <spindle_get_count+0x28>)
 801e8a6:	7818      	ldrb	r0, [r3, #0]
 801e8a8:	2801      	cmp	r0, #1
 801e8aa:	d004      	beq.n	801e8b6 <spindle_get_count+0x1a>
}
 801e8ac:	bd08      	pop	{r3, pc}
        spindle_select(0);
 801e8ae:	2000      	movs	r0, #0
 801e8b0:	f7ff ffd4 	bl	801e85c <spindle_select>
 801e8b4:	e7f6      	b.n	801e8a4 <spindle_get_count+0x8>
    return n_spindle == 1 && spindles[0].cfg->type == SpindleType_Null ? 0 : n_spindle;
 801e8b6:	4b04      	ldr	r3, [pc, #16]	@ (801e8c8 <spindle_get_count+0x2c>)
 801e8b8:	681b      	ldr	r3, [r3, #0]
 801e8ba:	7a1b      	ldrb	r3, [r3, #8]
 801e8bc:	2b05      	cmp	r3, #5
 801e8be:	d1f5      	bne.n	801e8ac <spindle_get_count+0x10>
 801e8c0:	2000      	movs	r0, #0
 801e8c2:	e7f3      	b.n	801e8ac <spindle_get_count+0x10>
 801e8c4:	20002528 	.word	0x20002528
 801e8c8:	2000246c 	.word	0x2000246c

0801e8cc <spindle_set_rpm>:
\param rpm the programmed RPM.
\param override_pct override value in percent.
\returns the calulated RPM.
*/
float spindle_set_rpm (spindle_ptrs_t *spindle, float rpm, override_t override_pct)
{
 801e8cc:	eef0 7a40 	vmov.f32	s15, s0
    if(override_pct != 100)
 801e8d0:	2964      	cmp	r1, #100	@ 0x64
 801e8d2:	d009      	beq.n	801e8e8 <spindle_set_rpm+0x1c>
        rpm *= 0.01f * (float)override_pct; // Scale RPM by override value.
 801e8d4:	ee07 1a10 	vmov	s14, r1
 801e8d8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801e8dc:	eddf 6a11 	vldr	s13, [pc, #68]	@ 801e924 <spindle_set_rpm+0x58>
 801e8e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e8e4:	ee60 7a07 	vmul.f32	s15, s0, s14

    // Apply RPM limits
    if (rpm <= 0.0f) // TODO: remove this test?
 801e8e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8f0:	d910      	bls.n	801e914 <spindle_set_rpm+0x48>
        rpm = 0.0f;
    else if (rpm > spindle->rpm_max)
 801e8f2:	ed90 0a06 	vldr	s0, [r0, #24]
 801e8f6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801e8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8fe:	d40b      	bmi.n	801e918 <spindle_set_rpm+0x4c>
        rpm = spindle->rpm_max;
    else if (rpm < spindle->rpm_min)
 801e900:	ed90 0a05 	vldr	s0, [r0, #20]
 801e904:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801e908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e90c:	dc04      	bgt.n	801e918 <spindle_set_rpm+0x4c>
 801e90e:	eeb0 0a67 	vmov.f32	s0, s15
 801e912:	e001      	b.n	801e918 <spindle_set_rpm+0x4c>
        rpm = 0.0f;
 801e914:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 801e928 <spindle_set_rpm+0x5c>
        rpm = spindle->rpm_min;

    spindle->param->rpm_overridden = rpm;
 801e918:	6843      	ldr	r3, [r0, #4]
 801e91a:	ed83 0a01 	vstr	s0, [r3, #4]
    spindle->param->override_pct = override_pct;
 801e91e:	6843      	ldr	r3, [r0, #4]
 801e920:	60d9      	str	r1, [r3, #12]

    return rpm;
}
 801e922:	4770      	bx	lr
 801e924:	3c23d70a 	.word	0x3c23d70a
 801e928:	00000000 	.word	0x00000000

0801e92c <set_state>:
    if (!ABORTED) { // Block during abort.
 801e92c:	4b29      	ldr	r3, [pc, #164]	@ (801e9d4 <set_state+0xa8>)
 801e92e:	781b      	ldrb	r3, [r3, #0]
 801e930:	2b00      	cmp	r3, #0
 801e932:	d142      	bne.n	801e9ba <set_state+0x8e>
{
 801e934:	b570      	push	{r4, r5, r6, lr}
 801e936:	ed2d 8b02 	vpush	{d8}
 801e93a:	4604      	mov	r4, r0
 801e93c:	460d      	mov	r5, r1
 801e93e:	eeb0 8a40 	vmov.f32	s16, s0
    if (!ABORTED) { // Block during abort.
 801e942:	4b24      	ldr	r3, [pc, #144]	@ (801e9d4 <set_state+0xa8>)
 801e944:	785b      	ldrb	r3, [r3, #1]
 801e946:	b9ab      	cbnz	r3, 801e974 <set_state+0x48>
        if (!state.on) { // Halt or set spindle direction and rpm.
 801e948:	b2cb      	uxtb	r3, r1
 801e94a:	f015 0f01 	tst.w	r5, #1
 801e94e:	d119      	bne.n	801e984 <set_state+0x58>
            spindle->param->rpm = rpm = 0.0f;
 801e950:	6843      	ldr	r3, [r0, #4]
 801e952:	ed9f 8a21 	vldr	s16, [pc, #132]	@ 801e9d8 <set_state+0xac>
 801e956:	ed83 8a00 	vstr	s16, [r3]
            spindle->set_state(spindle, (spindle_state_t){0}, 0.0f);
 801e95a:	6a03      	ldr	r3, [r0, #32]
 801e95c:	eeb0 0a48 	vmov.f32	s0, s16
 801e960:	f04f 0100 	mov.w	r1, #0
 801e964:	4798      	blx	r3
        system_add_rt_report(Report_Spindle); // Set to report change immediately
 801e966:	2010      	movs	r0, #16
 801e968:	f003 fbaa 	bl	80220c0 <system_add_rt_report>
        st_rpm_changed(rpm);
 801e96c:	eeb0 0a48 	vmov.f32	s0, s16
 801e970:	f001 fb36 	bl	801ffe0 <st_rpm_changed>
    return !ABORTED;
 801e974:	4b17      	ldr	r3, [pc, #92]	@ (801e9d4 <set_state+0xa8>)
 801e976:	781b      	ldrb	r3, [r3, #0]
 801e978:	b9cb      	cbnz	r3, 801e9ae <set_state+0x82>
 801e97a:	4b16      	ldr	r3, [pc, #88]	@ (801e9d4 <set_state+0xa8>)
 801e97c:	785b      	ldrb	r3, [r3, #1]
 801e97e:	b1d3      	cbz	r3, 801e9b6 <set_state+0x8a>
 801e980:	2000      	movs	r0, #0
 801e982:	e015      	b.n	801e9b0 <set_state+0x84>
            if (spindle->cap.laser && state.ccw)
 801e984:	7a82      	ldrb	r2, [r0, #10]
 801e986:	f012 0f08 	tst.w	r2, #8
 801e98a:	d004      	beq.n	801e996 <set_state+0x6a>
 801e98c:	f013 0f02 	tst.w	r3, #2
 801e990:	d001      	beq.n	801e996 <set_state+0x6a>
                rpm = 0.0f; // TODO: May need to be rpm_min*(100/MAX_SPINDLE_RPM_OVERRIDE);
 801e992:	ed9f 8a11 	vldr	s16, [pc, #68]	@ 801e9d8 <set_state+0xac>
            spindle->set_state(spindle, state, spindle_set_rpm(spindle, rpm, spindle->param->override_pct));
 801e996:	6a26      	ldr	r6, [r4, #32]
 801e998:	6863      	ldr	r3, [r4, #4]
 801e99a:	68d9      	ldr	r1, [r3, #12]
 801e99c:	eeb0 0a48 	vmov.f32	s0, s16
 801e9a0:	4620      	mov	r0, r4
 801e9a2:	f7ff ff93 	bl	801e8cc <spindle_set_rpm>
 801e9a6:	4629      	mov	r1, r5
 801e9a8:	4620      	mov	r0, r4
 801e9aa:	47b0      	blx	r6
 801e9ac:	e7db      	b.n	801e966 <set_state+0x3a>
    return !ABORTED;
 801e9ae:	2000      	movs	r0, #0
}
 801e9b0:	ecbd 8b02 	vpop	{d8}
 801e9b4:	bd70      	pop	{r4, r5, r6, pc}
    return !ABORTED;
 801e9b6:	2001      	movs	r0, #1
 801e9b8:	e7fa      	b.n	801e9b0 <set_state+0x84>
 801e9ba:	4b06      	ldr	r3, [pc, #24]	@ (801e9d4 <set_state+0xa8>)
 801e9bc:	781b      	ldrb	r3, [r3, #0]
 801e9be:	b923      	cbnz	r3, 801e9ca <set_state+0x9e>
 801e9c0:	4b04      	ldr	r3, [pc, #16]	@ (801e9d4 <set_state+0xa8>)
 801e9c2:	785b      	ldrb	r3, [r3, #1]
 801e9c4:	b11b      	cbz	r3, 801e9ce <set_state+0xa2>
 801e9c6:	2000      	movs	r0, #0
 801e9c8:	4770      	bx	lr
 801e9ca:	2000      	movs	r0, #0
 801e9cc:	4770      	bx	lr
 801e9ce:	2001      	movs	r0, #1
}
 801e9d0:	4770      	bx	lr
 801e9d2:	bf00      	nop
 801e9d4:	20001bbc 	.word	0x20001bbc
 801e9d8:	00000000 	.word	0x00000000

0801e9dc <spindle_set_state>:
{
 801e9dc:	b508      	push	{r3, lr}
    return set_state(spindle, state, rpm);
 801e9de:	f7ff ffa5 	bl	801e92c <set_state>
}
 801e9e2:	bd08      	pop	{r3, pc}

0801e9e4 <spindle_restore>:
{
 801e9e4:	b538      	push	{r3, r4, r5, lr}
 801e9e6:	ed2d 8b02 	vpush	{d8}
    if(spindle->cap.laser) // When in laser mode, ignore spindle spin-up delay. Set to turn on laser when cycle starts.
 801e9ea:	7a83      	ldrb	r3, [r0, #10]
 801e9ec:	f013 0f08 	tst.w	r3, #8
 801e9f0:	d009      	beq.n	801ea06 <spindle_restore+0x22>
        sys.step_control.update_spindle_rpm = On;
 801e9f2:	4a2a      	ldr	r2, [pc, #168]	@ (801ea9c <spindle_restore+0xb8>)
 801e9f4:	7e13      	ldrb	r3, [r2, #24]
 801e9f6:	f043 0308 	orr.w	r3, r3, #8
 801e9fa:	7613      	strb	r3, [r2, #24]
    bool ok = true;
 801e9fc:	2501      	movs	r5, #1
}
 801e9fe:	4628      	mov	r0, r5
 801ea00:	ecbd 8b02 	vpop	{d8}
 801ea04:	bd38      	pop	{r3, r4, r5, pc}
 801ea06:	4604      	mov	r4, r0
 801ea08:	460d      	mov	r5, r1
        spindle_set_state(spindle, state, rpm);
 801ea0a:	f7ff ffe7 	bl	801e9dc <spindle_set_state>
        if(state.on) {
 801ea0e:	f015 0f01 	tst.w	r5, #1
 801ea12:	d040      	beq.n	801ea96 <spindle_restore+0xb2>
            if((ok = !spindle->cap.at_speed))
 801ea14:	7aa3      	ldrb	r3, [r4, #10]
 801ea16:	f003 0304 	and.w	r3, r3, #4
 801ea1a:	2b00      	cmp	r3, #0
 801ea1c:	bf0c      	ite	eq
 801ea1e:	2501      	moveq	r5, #1
 801ea20:	2500      	movne	r5, #0
 801ea22:	d030      	beq.n	801ea86 <spindle_restore+0xa2>
            else if((ok == (settings.spindle.at_speed_tolerance <= 0.0f))) {
 801ea24:	4b1e      	ldr	r3, [pc, #120]	@ (801eaa0 <spindle_restore+0xbc>)
 801ea26:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 801ea2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ea2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea32:	bf94      	ite	ls
 801ea34:	2301      	movls	r3, #1
 801ea36:	2300      	movhi	r3, #0
 801ea38:	42ab      	cmp	r3, r5
 801ea3a:	d1e0      	bne.n	801e9fe <spindle_restore+0x1a>
                float delay = 0.0f;
 801ea3c:	ed9f 8a19 	vldr	s16, [pc, #100]	@ 801eaa4 <spindle_restore+0xc0>
                while(!(ok = spindle->get_state(spindle).at_speed)) {
 801ea40:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801ea42:	4620      	mov	r0, r4
 801ea44:	4798      	blx	r3
 801ea46:	f3c0 1580 	ubfx	r5, r0, #6, #1
 801ea4a:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801ea4e:	d1d6      	bne.n	801e9fe <spindle_restore+0x1a>
                    if(!(ok = delay_sec(0.1f, DelayMode_SysSuspend)))
 801ea50:	2001      	movs	r0, #1
 801ea52:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 801eaa8 <spindle_restore+0xc4>
 801ea56:	f7f7 fa25 	bl	8015ea4 <delay_sec>
 801ea5a:	4605      	mov	r5, r0
 801ea5c:	2800      	cmp	r0, #0
 801ea5e:	d0ce      	beq.n	801e9fe <spindle_restore+0x1a>
                    delay += 0.1f;
 801ea60:	eddf 7a11 	vldr	s15, [pc, #68]	@ 801eaa8 <spindle_restore+0xc4>
 801ea64:	ee38 8a27 	vadd.f32	s16, s16, s15
                    if(!(ok = delay < settings.safety_door.spindle_on_delay)) {
 801ea68:	4b0d      	ldr	r3, [pc, #52]	@ (801eaa0 <spindle_restore+0xbc>)
 801ea6a:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 801ea6e:	eef4 7ac8 	vcmpe.f32	s15, s16
 801ea72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea76:	bfcc      	ite	gt
 801ea78:	2501      	movgt	r5, #1
 801ea7a:	2500      	movle	r5, #0
 801ea7c:	dce0      	bgt.n	801ea40 <spindle_restore+0x5c>
                        system_raise_alarm(Alarm_Spindle);
 801ea7e:	200e      	movs	r0, #14
 801ea80:	f003 fad0 	bl	8022024 <system_raise_alarm>
                        break;
 801ea84:	e7bb      	b.n	801e9fe <spindle_restore+0x1a>
                ok = delay_sec(settings.safety_door.spindle_on_delay, DelayMode_SysSuspend);
 801ea86:	2001      	movs	r0, #1
 801ea88:	4b05      	ldr	r3, [pc, #20]	@ (801eaa0 <spindle_restore+0xbc>)
 801ea8a:	ed93 0a50 	vldr	s0, [r3, #320]	@ 0x140
 801ea8e:	f7f7 fa09 	bl	8015ea4 <delay_sec>
 801ea92:	4605      	mov	r5, r0
 801ea94:	e7b3      	b.n	801e9fe <spindle_restore+0x1a>
    bool ok = true;
 801ea96:	2501      	movs	r5, #1
 801ea98:	e7b1      	b.n	801e9fe <spindle_restore+0x1a>
 801ea9a:	bf00      	nop
 801ea9c:	20001bbc 	.word	0x20001bbc
 801eaa0:	200022f4 	.word	0x200022f4
 801eaa4:	00000000 	.word	0x00000000
 801eaa8:	3dcccccd 	.word	0x3dcccccd

0801eaac <spindle_sync>:
{
 801eaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eaae:	ed2d 8b02 	vpush	{d8}
 801eab2:	4605      	mov	r5, r0
 801eab4:	460f      	mov	r7, r1
 801eab6:	eeb0 8a40 	vmov.f32	s16, s0
    if (!(ok = state_get() == STATE_CHECK_MODE)) {
 801eaba:	f000 fb25 	bl	801f108 <state_get>
 801eabe:	2802      	cmp	r0, #2
 801eac0:	bf0c      	ite	eq
 801eac2:	2001      	moveq	r0, #1
 801eac4:	2000      	movne	r0, #0
 801eac6:	d019      	beq.n	801eafc <spindle_sync+0x50>
        bool at_speed = !state.on || !spindle->cap.at_speed || settings.spindle.at_speed_tolerance <= 0.0f;
 801eac8:	f017 0f01 	tst.w	r7, #1
 801eacc:	d00f      	beq.n	801eaee <spindle_sync+0x42>
 801eace:	7aab      	ldrb	r3, [r5, #10]
 801ead0:	f013 0f04 	tst.w	r3, #4
 801ead4:	d015      	beq.n	801eb02 <spindle_sync+0x56>
 801ead6:	4b24      	ldr	r3, [pc, #144]	@ (801eb68 <spindle_sync+0xbc>)
 801ead8:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 801eadc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801eae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eae4:	d901      	bls.n	801eaea <spindle_sync+0x3e>
 801eae6:	2600      	movs	r6, #0
 801eae8:	e002      	b.n	801eaf0 <spindle_sync+0x44>
 801eaea:	2601      	movs	r6, #1
 801eaec:	e000      	b.n	801eaf0 <spindle_sync+0x44>
 801eaee:	2601      	movs	r6, #1
        if((ok = protocol_buffer_synchronize()) && set_state(spindle, state, rpm) && !at_speed) {
 801eaf0:	f7f9 fa70 	bl	8017fd4 <protocol_buffer_synchronize>
 801eaf4:	4604      	mov	r4, r0
 801eaf6:	b930      	cbnz	r0, 801eb06 <spindle_sync+0x5a>
        ok &= at_speed;
 801eaf8:	ea04 0006 	and.w	r0, r4, r6
}
 801eafc:	ecbd 8b02 	vpop	{d8}
 801eb00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        bool at_speed = !state.on || !spindle->cap.at_speed || settings.spindle.at_speed_tolerance <= 0.0f;
 801eb02:	2601      	movs	r6, #1
 801eb04:	e7f4      	b.n	801eaf0 <spindle_sync+0x44>
        if((ok = protocol_buffer_synchronize()) && set_state(spindle, state, rpm) && !at_speed) {
 801eb06:	eeb0 0a48 	vmov.f32	s0, s16
 801eb0a:	4639      	mov	r1, r7
 801eb0c:	4628      	mov	r0, r5
 801eb0e:	f7ff ff0d 	bl	801e92c <set_state>
 801eb12:	2800      	cmp	r0, #0
 801eb14:	d0f0      	beq.n	801eaf8 <spindle_sync+0x4c>
 801eb16:	2e00      	cmp	r6, #0
 801eb18:	d1ee      	bne.n	801eaf8 <spindle_sync+0x4c>
            float on_delay = 0.0f;
 801eb1a:	ed9f 8a14 	vldr	s16, [pc, #80]	@ 801eb6c <spindle_sync+0xc0>
            while(!(at_speed = spindle->get_state(spindle).at_speed)) {
 801eb1e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801eb20:	4628      	mov	r0, r5
 801eb22:	4798      	blx	r3
 801eb24:	f3c0 1680 	ubfx	r6, r0, #6, #1
 801eb28:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801eb2c:	d1e4      	bne.n	801eaf8 <spindle_sync+0x4c>
                if(!(ok = delay_sec(0.2f, DelayMode_Dwell)))
 801eb2e:	2000      	movs	r0, #0
 801eb30:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 801eb70 <spindle_sync+0xc4>
 801eb34:	f7f7 f9b6 	bl	8015ea4 <delay_sec>
 801eb38:	4604      	mov	r4, r0
 801eb3a:	2800      	cmp	r0, #0
 801eb3c:	d0dc      	beq.n	801eaf8 <spindle_sync+0x4c>
                on_delay += 0.2f;
 801eb3e:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801eb70 <spindle_sync+0xc4>
 801eb42:	ee38 8a27 	vadd.f32	s16, s16, s15
                if(!(ok = on_delay < settings.safety_door.spindle_on_delay)) {
 801eb46:	4b08      	ldr	r3, [pc, #32]	@ (801eb68 <spindle_sync+0xbc>)
 801eb48:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 801eb4c:	eef4 7ac8 	vcmpe.f32	s15, s16
 801eb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb54:	bfcc      	ite	gt
 801eb56:	2401      	movgt	r4, #1
 801eb58:	2400      	movle	r4, #0
 801eb5a:	dce0      	bgt.n	801eb1e <spindle_sync+0x72>
                    gc_spindle_off();
 801eb5c:	f7ee fe32 	bl	800d7c4 <gc_spindle_off>
                    system_raise_alarm(Alarm_Spindle);
 801eb60:	200e      	movs	r0, #14
 801eb62:	f003 fa5f 	bl	8022024 <system_raise_alarm>
                    break;
 801eb66:	e7c7      	b.n	801eaf8 <spindle_sync+0x4c>
 801eb68:	200022f4 	.word	0x200022f4
 801eb6c:	00000000 	.word	0x00000000
 801eb70:	3e4ccccd 	.word	0x3e4ccccd

0801eb74 <spindle_set_override>:
{
 801eb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb76:	4605      	mov	r5, r0
    if(speed_override != 100 && spindle->param->state.override_disable)
 801eb78:	2964      	cmp	r1, #100	@ 0x64
 801eb7a:	d006      	beq.n	801eb8a <spindle_set_override+0x16>
 801eb7c:	6843      	ldr	r3, [r0, #4]
 801eb7e:	7a1b      	ldrb	r3, [r3, #8]
 801eb80:	f013 0f10 	tst.w	r3, #16
 801eb84:	d10a      	bne.n	801eb9c <spindle_set_override+0x28>
    speed_override = constrain(speed_override, MIN_SPINDLE_RPM_OVERRIDE, MAX_SPINDLE_RPM_OVERRIDE);
 801eb86:	2909      	cmp	r1, #9
 801eb88:	d909      	bls.n	801eb9e <spindle_set_override+0x2a>
 801eb8a:	29c8      	cmp	r1, #200	@ 0xc8
 801eb8c:	bf28      	it	cs
 801eb8e:	21c8      	movcs	r1, #200	@ 0xc8
 801eb90:	460c      	mov	r4, r1
    if ((uint8_t)speed_override != spindle->param->override_pct) {
 801eb92:	686b      	ldr	r3, [r5, #4]
 801eb94:	68d9      	ldr	r1, [r3, #12]
 801eb96:	b2e2      	uxtb	r2, r4
 801eb98:	4291      	cmp	r1, r2
 801eb9a:	d102      	bne.n	801eba2 <spindle_set_override+0x2e>
}
 801eb9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    speed_override = constrain(speed_override, MIN_SPINDLE_RPM_OVERRIDE, MAX_SPINDLE_RPM_OVERRIDE);
 801eb9e:	240a      	movs	r4, #10
 801eba0:	e7f7      	b.n	801eb92 <spindle_set_override+0x1e>
        spindle->param->override_pct = speed_override;
 801eba2:	60dc      	str	r4, [r3, #12]
        if(state_get() == STATE_IDLE)
 801eba4:	f000 fab0 	bl	801f108 <state_get>
 801eba8:	b1e0      	cbz	r0, 801ebe4 <spindle_set_override+0x70>
            sys.step_control.update_spindle_rpm = On;
 801ebaa:	4a12      	ldr	r2, [pc, #72]	@ (801ebf4 <spindle_set_override+0x80>)
 801ebac:	7e13      	ldrb	r3, [r2, #24]
 801ebae:	f043 0308 	orr.w	r3, r3, #8
 801ebb2:	7613      	strb	r3, [r2, #24]
        system_add_rt_report(Report_Overrides); // Set to report change immediately
 801ebb4:	2040      	movs	r0, #64	@ 0x40
 801ebb6:	f003 fa83 	bl	80220c0 <system_add_rt_report>
       if(grbl.on_spindle_programmed)
 801ebba:	4b0f      	ldr	r3, [pc, #60]	@ (801ebf8 <spindle_set_override+0x84>)
 801ebbc:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801ebbe:	b156      	cbz	r6, 801ebd6 <spindle_set_override+0x62>
           grbl.on_spindle_programmed(spindle, gc_state.modal.spindle.state, spindle_set_rpm(spindle, gc_state.spindle.rpm, speed_override), gc_state.modal.spindle.rpm_mode);
 801ebc0:	4f0e      	ldr	r7, [pc, #56]	@ (801ebfc <spindle_set_override+0x88>)
 801ebc2:	4621      	mov	r1, r4
 801ebc4:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 801ebc8:	4628      	mov	r0, r5
 801ebca:	f7ff fe7f 	bl	801e8cc <spindle_set_rpm>
 801ebce:	7efa      	ldrb	r2, [r7, #27]
 801ebd0:	7eb9      	ldrb	r1, [r7, #26]
 801ebd2:	4628      	mov	r0, r5
 801ebd4:	47b0      	blx	r6
       if(grbl.on_override_changed)
 801ebd6:	4b08      	ldr	r3, [pc, #32]	@ (801ebf8 <spindle_set_override+0x84>)
 801ebd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ebda:	2b00      	cmp	r3, #0
 801ebdc:	d0de      	beq.n	801eb9c <spindle_set_override+0x28>
           grbl.on_override_changed(OverrideChanged_SpindleRPM);
 801ebde:	2000      	movs	r0, #0
 801ebe0:	4798      	blx	r3
 801ebe2:	e7db      	b.n	801eb9c <spindle_set_override+0x28>
            spindle_set_state(spindle, gc_state.modal.spindle.state, gc_state.spindle.rpm);
 801ebe4:	4b05      	ldr	r3, [pc, #20]	@ (801ebfc <spindle_set_override+0x88>)
 801ebe6:	ed93 0a14 	vldr	s0, [r3, #80]	@ 0x50
 801ebea:	7e99      	ldrb	r1, [r3, #26]
 801ebec:	4628      	mov	r0, r5
 801ebee:	f7ff fef5 	bl	801e9dc <spindle_set_state>
 801ebf2:	e7df      	b.n	801ebb4 <spindle_set_override+0x40>
 801ebf4:	20001bbc 	.word	0x20001bbc
 801ebf8:	20001ac4 	.word	0x20001ac4
 801ebfc:	20001614 	.word	0x20001614

0801ec00 <spindle_all_off>:

/*! \brief Turn off all enabled spindles.
*/
void spindle_all_off (void)
{
 801ec00:	b508      	push	{r3, lr}
    spindle_ptrs_t *spindle;
    uint_fast8_t spindle_num = N_SYS_SPINDLE;

    do {
        if((spindle = spindle_get(--spindle_num))) {
 801ec02:	2000      	movs	r0, #0
 801ec04:	f7ff fdf0 	bl	801e7e8 <spindle_get>
 801ec08:	b160      	cbz	r0, 801ec24 <spindle_all_off+0x24>
            spindle->param->rpm = spindle->param->rpm_overridden = 0.0f;
 801ec0a:	6842      	ldr	r2, [r0, #4]
 801ec0c:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 801ec2c <spindle_all_off+0x2c>
 801ec10:	ed82 0a01 	vstr	s0, [r2, #4]
 801ec14:	6842      	ldr	r2, [r0, #4]
 801ec16:	ed82 0a00 	vstr	s0, [r2]
            spindle->param->state.value = 0;
 801ec1a:	6842      	ldr	r2, [r0, #4]
 801ec1c:	2100      	movs	r1, #0
 801ec1e:	7211      	strb	r1, [r2, #8]
#ifdef GRBL_ESP32
            spindle->esp32_off(spindle);
#else
            spindle->set_state(spindle, (spindle_state_t){0}, 0.0f);
 801ec20:	6a02      	ldr	r2, [r0, #32]
 801ec22:	4790      	blx	r2
#endif
        }
    } while(spindle_num);

    system_add_rt_report(Report_Spindle);
 801ec24:	2010      	movs	r0, #16
 801ec26:	f003 fa4b 	bl	80220c0 <system_add_rt_report>
}
 801ec2a:	bd08      	pop	{r3, pc}
 801ec2c:	00000000 	.word	0x00000000

0801ec30 <spindle_is_on>:

/*! \brief Check if any of the enabled spindles is running.
\returns \a true if a spindle is running, \a false otherwise.
*/
bool spindle_is_on (void)
{
 801ec30:	b508      	push	{r3, lr}
    bool on = false;

    spindle_ptrs_t *spindle;
    uint_fast8_t spindle_num = N_SYS_SPINDLE;
    do {
        if((spindle = spindle_get(--spindle_num)))
 801ec32:	2000      	movs	r0, #0
 801ec34:	f7ff fdd8 	bl	801e7e8 <spindle_get>
 801ec38:	b120      	cbz	r0, 801ec44 <spindle_is_on+0x14>
            on = spindle->get_state(spindle).on;
 801ec3a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 801ec3c:	4790      	blx	r2
 801ec3e:	f000 0001 	and.w	r0, r0, #1
    } while(spindle_num && !on);

    return on;
}
 801ec42:	bd08      	pop	{r3, pc}
 801ec44:	2000      	movs	r0, #0
 801ec46:	e7fc      	b.n	801ec42 <spindle_is_on+0x12>

0801ec48 <state_noop>:
/*! /brief No operation handler.
 */
static void state_noop (uint_fast16_t rt_exec)
{
    // Do nothing - state change requests are handled elsewhere or ignored.
}
 801ec48:	4770      	bx	lr
	...

0801ec4c <state_await_restart_retract>:
/*! /brief Waits until plunge motion abort is completed then calls state_await_hold() to restart retraction.
state_await_hold() is set to handle the cycle complete event.
 */
static void state_await_restart_retract (uint_fast16_t rt_exec)
{
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801ec4c:	f010 0f04 	tst.w	r0, #4
 801ec50:	d014      	beq.n	801ec7c <state_await_restart_retract+0x30>
{
 801ec52:	b508      	push	{r3, lr}

        if (sys.step_control.execute_sys_motion) {
 801ec54:	4b0a      	ldr	r3, [pc, #40]	@ (801ec80 <state_await_restart_retract+0x34>)
 801ec56:	7e1b      	ldrb	r3, [r3, #24]
 801ec58:	f013 0f04 	tst.w	r3, #4
 801ec5c:	d106      	bne.n	801ec6c <state_await_restart_retract+0x20>
            sys.step_control.execute_sys_motion = Off;
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
        }

        stateHandler = state_await_hold;
 801ec5e:	4b09      	ldr	r3, [pc, #36]	@ (801ec84 <state_await_restart_retract+0x38>)
 801ec60:	4a09      	ldr	r2, [pc, #36]	@ (801ec88 <state_await_restart_retract+0x3c>)
 801ec62:	601a      	str	r2, [r3, #0]
        stateHandler(EXEC_CYCLE_COMPLETE);
 801ec64:	681b      	ldr	r3, [r3, #0]
 801ec66:	2004      	movs	r0, #4
 801ec68:	4798      	blx	r3
    }
}
 801ec6a:	bd08      	pop	{r3, pc}
            sys.step_control.execute_sys_motion = Off;
 801ec6c:	4b04      	ldr	r3, [pc, #16]	@ (801ec80 <state_await_restart_retract+0x34>)
 801ec6e:	7e1a      	ldrb	r2, [r3, #24]
 801ec70:	f36f 0282 	bfc	r2, #2, #1
 801ec74:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801ec76:	f001 fa0f 	bl	8020098 <st_parking_restore_buffer>
 801ec7a:	e7f0      	b.n	801ec5e <state_await_restart_retract+0x12>
 801ec7c:	4770      	bx	lr
 801ec7e:	bf00      	nop
 801ec80:	20001bbc 	.word	0x20001bbc
 801ec84:	2000043c 	.word	0x2000043c
 801ec88:	0801f7c5 	.word	0x0801f7c5

0801ec8c <state_await_waypoint_retract>:
/*! /brief Waits until slow plunge motion is completed then deenergize spindle and coolant and execute fast retract motion.
state_await_resume() is set to handle the cycle complete event.
 */
static void state_await_waypoint_retract (uint_fast16_t rt_exec)
{
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801ec8c:	f010 0f04 	tst.w	r0, #4
 801ec90:	d05c      	beq.n	801ed4c <state_await_waypoint_retract+0xc0>
{
 801ec92:	b500      	push	{lr}
 801ec94:	b085      	sub	sp, #20

        bool await_motion = false;

        if (sys.step_control.execute_sys_motion) {
 801ec96:	4b2e      	ldr	r3, [pc, #184]	@ (801ed50 <state_await_waypoint_retract+0xc4>)
 801ec98:	7e1b      	ldrb	r3, [r3, #24]
 801ec9a:	f013 0f04 	tst.w	r3, #4
 801ec9e:	d135      	bne.n	801ed0c <state_await_waypoint_retract+0x80>
            sys.step_control.execute_sys_motion = Off;
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
        }

        // NOTE: Clear accessory state after retract and after an aborted restore motion.
        park.plan_data.spindle.state.value = 0;
 801eca0:	4b2c      	ldr	r3, [pc, #176]	@ (801ed54 <state_await_waypoint_retract+0xc8>)
 801eca2:	2100      	movs	r1, #0
 801eca4:	f883 1028 	strb.w	r1, [r3, #40]	@ 0x28
        park.plan_data.spindle.rpm = 0.0f;
 801eca8:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 801ed58 <state_await_waypoint_retract+0xcc>
 801ecac:	ed83 0a09 	vstr	s0, [r3, #36]	@ 0x24
        park.plan_data.spindle.hal->set_state(park.plan_data.spindle.hal, park.plan_data.spindle.state, 0.0f); // De-energize
 801ecb0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801ecb2:	6a03      	ldr	r3, [r0, #32]
 801ecb4:	4798      	blx	r3

        if (!settings.safety_door.flags.keep_coolant_on) {
 801ecb6:	4b29      	ldr	r3, [pc, #164]	@ (801ed5c <state_await_waypoint_retract+0xd0>)
 801ecb8:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 801ecbc:	f013 0f02 	tst.w	r3, #2
 801ecc0:	d106      	bne.n	801ecd0 <state_await_waypoint_retract+0x44>
            park.plan_data.condition.coolant.value = 0;
 801ecc2:	2000      	movs	r0, #0
 801ecc4:	4b23      	ldr	r3, [pc, #140]	@ (801ed54 <state_await_waypoint_retract+0xc8>)
 801ecc6:	f883 0036 	strb.w	r0, [r3, #54]	@ 0x36
            hal.coolant.set_state(park.plan_data.condition.coolant); // De-energize
 801ecca:	4b25      	ldr	r3, [pc, #148]	@ (801ed60 <state_await_waypoint_retract+0xd4>)
 801eccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ecce:	4798      	blx	r3
        }

        stateHandler = state_await_resume;
 801ecd0:	4b24      	ldr	r3, [pc, #144]	@ (801ed64 <state_await_waypoint_retract+0xd8>)
 801ecd2:	4a25      	ldr	r2, [pc, #148]	@ (801ed68 <state_await_waypoint_retract+0xdc>)
 801ecd4:	601a      	str	r2, [r3, #0]

        // Execute fast parking retract motion to parking target location.
        if (park.flags.motion && park.target[settings.parking.axis] < settings.parking.target) {
 801ecd6:	4b1f      	ldr	r3, [pc, #124]	@ (801ed54 <state_await_waypoint_retract+0xc8>)
 801ecd8:	7f1b      	ldrb	r3, [r3, #28]
 801ecda:	f013 0f02 	tst.w	r3, #2
 801ecde:	d00e      	beq.n	801ecfe <state_await_waypoint_retract+0x72>
 801ece0:	4a1e      	ldr	r2, [pc, #120]	@ (801ed5c <state_await_waypoint_retract+0xd0>)
 801ece2:	f892 c129 	ldrb.w	ip, [r2, #297]	@ 0x129
 801ece6:	4b1b      	ldr	r3, [pc, #108]	@ (801ed54 <state_await_waypoint_retract+0xc8>)
 801ece8:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801ecec:	ed93 7a00 	vldr	s14, [r3]
 801ecf0:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 801ecf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ecf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ecfc:	d40e      	bmi.n	801ed1c <state_await_waypoint_retract+0x90>
            park.plan_data.feed_rate = settings.parking.rate;
            await_motion = mc_parking_motion(target, &park.plan_data);
        }

        if (!await_motion)
            stateHandler(EXEC_CYCLE_COMPLETE);
 801ecfe:	4b19      	ldr	r3, [pc, #100]	@ (801ed64 <state_await_waypoint_retract+0xd8>)
 801ed00:	681b      	ldr	r3, [r3, #0]
 801ed02:	2004      	movs	r0, #4
 801ed04:	4798      	blx	r3
    }
}
 801ed06:	b005      	add	sp, #20
 801ed08:	f85d fb04 	ldr.w	pc, [sp], #4
            sys.step_control.execute_sys_motion = Off;
 801ed0c:	4b10      	ldr	r3, [pc, #64]	@ (801ed50 <state_await_waypoint_retract+0xc4>)
 801ed0e:	7e1a      	ldrb	r2, [r3, #24]
 801ed10:	f36f 0282 	bfc	r2, #2, #1
 801ed14:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801ed16:	f001 f9bf 	bl	8020098 <st_parking_restore_buffer>
 801ed1a:	e7c1      	b.n	801eca0 <state_await_waypoint_retract+0x14>
            memcpy(target, park.target, sizeof(target));
 801ed1c:	4b0d      	ldr	r3, [pc, #52]	@ (801ed54 <state_await_waypoint_retract+0xc8>)
 801ed1e:	f10d 0e04 	add.w	lr, sp, #4
 801ed22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ed26:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
            target[settings.parking.axis] = settings.parking.target;
 801ed2a:	aa04      	add	r2, sp, #16
 801ed2c:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 801ed30:	ed4c 7a03 	vstr	s15, [ip, #-12]
            park.plan_data.feed_rate = settings.parking.rate;
 801ed34:	4a09      	ldr	r2, [pc, #36]	@ (801ed5c <state_await_waypoint_retract+0xd0>)
 801ed36:	f8d2 2130 	ldr.w	r2, [r2, #304]	@ 0x130
 801ed3a:	4619      	mov	r1, r3
 801ed3c:	f841 2f20 	str.w	r2, [r1, #32]!
            await_motion = mc_parking_motion(target, &park.plan_data);
 801ed40:	4670      	mov	r0, lr
 801ed42:	f7f6 f881 	bl	8014e48 <mc_parking_motion>
        if (!await_motion)
 801ed46:	2800      	cmp	r0, #0
 801ed48:	d1dd      	bne.n	801ed06 <state_await_waypoint_retract+0x7a>
 801ed4a:	e7d8      	b.n	801ecfe <state_await_waypoint_retract+0x72>
 801ed4c:	4770      	bx	lr
 801ed4e:	bf00      	nop
 801ed50:	20001bbc 	.word	0x20001bbc
 801ed54:	2000252c 	.word	0x2000252c
 801ed58:	00000000 	.word	0x00000000
 801ed5c:	200022f4 	.word	0x200022f4
 801ed60:	200018dc 	.word	0x200018dc
 801ed64:	2000043c 	.word	0x2000043c
 801ed68:	0801f3f1 	.word	0x0801f3f1

0801ed6c <restart_retract>:
{
 801ed6c:	b508      	push	{r3, lr}
    grbl.report.feedback_message(Message_SafetyDoorAjar);
 801ed6e:	4b12      	ldr	r3, [pc, #72]	@ (801edb8 <restart_retract+0x4c>)
 801ed70:	68db      	ldr	r3, [r3, #12]
 801ed72:	2006      	movs	r0, #6
 801ed74:	4798      	blx	r3
    stateHandler = state_await_restart_retract;
 801ed76:	4b11      	ldr	r3, [pc, #68]	@ (801edbc <restart_retract+0x50>)
 801ed78:	4a11      	ldr	r2, [pc, #68]	@ (801edc0 <restart_retract+0x54>)
 801ed7a:	601a      	str	r2, [r3, #0]
    park.flags.restart = On;
 801ed7c:	4a11      	ldr	r2, [pc, #68]	@ (801edc4 <restart_retract+0x58>)
 801ed7e:	7f13      	ldrb	r3, [r2, #28]
 801ed80:	f043 0304 	orr.w	r3, r3, #4
 801ed84:	7713      	strb	r3, [r2, #28]
    sys.parking_state = Parking_Retracting;
 801ed86:	4b10      	ldr	r3, [pc, #64]	@ (801edc8 <restart_retract+0x5c>)
 801ed88:	2202      	movs	r2, #2
 801ed8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    if (sys.step_control.execute_sys_motion) {
 801ed8e:	7e1b      	ldrb	r3, [r3, #24]
 801ed90:	f013 0f04 	tst.w	r3, #4
 801ed94:	d104      	bne.n	801eda0 <restart_retract+0x34>
        stateHandler(EXEC_CYCLE_COMPLETE);
 801ed96:	4b09      	ldr	r3, [pc, #36]	@ (801edbc <restart_retract+0x50>)
 801ed98:	681b      	ldr	r3, [r3, #0]
 801ed9a:	2004      	movs	r0, #4
 801ed9c:	4798      	blx	r3
}
 801ed9e:	bd08      	pop	{r3, pc}
        st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 801eda0:	f001 f924 	bl	801ffec <st_update_plan_block_parameters>
        sys.step_control.execute_hold = On;
 801eda4:	4b08      	ldr	r3, [pc, #32]	@ (801edc8 <restart_retract+0x5c>)
 801eda6:	7e1a      	ldrb	r2, [r3, #24]
 801eda8:	f042 0202 	orr.w	r2, r2, #2
 801edac:	761a      	strb	r2, [r3, #24]
        sys.step_control.execute_sys_motion = On;
 801edae:	b2d2      	uxtb	r2, r2
 801edb0:	f042 0204 	orr.w	r2, r2, #4
 801edb4:	761a      	strb	r2, [r3, #24]
 801edb6:	e7f2      	b.n	801ed9e <restart_retract+0x32>
 801edb8:	20001ac4 	.word	0x20001ac4
 801edbc:	2000043c 	.word	0x2000043c
 801edc0:	0801ec4d 	.word	0x0801ec4d
 801edc4:	2000252c 	.word	0x2000252c
 801edc8:	20001bbc 	.word	0x20001bbc

0801edcc <state_spindle_restore>:
{
 801edcc:	b508      	push	{r3, lr}
 801edce:	4603      	mov	r3, r0
    if(spindle->hal)
 801edd0:	68c0      	ldr	r0, [r0, #12]
 801edd2:	b120      	cbz	r0, 801edde <state_spindle_restore+0x12>
        spindle_restore(spindle->hal, spindle->state, spindle->rpm);
 801edd4:	ed93 0a00 	vldr	s0, [r3]
 801edd8:	7919      	ldrb	r1, [r3, #4]
 801edda:	f7ff fe03 	bl	801e9e4 <spindle_restore>
}
 801edde:	bd08      	pop	{r3, pc}

0801ede0 <state_restore_conditions>:
{
 801ede0:	b538      	push	{r3, r4, r5, lr}
 801ede2:	4604      	mov	r4, r0
    if (!settings.parking.flags.enabled || !park.flags.restart) {
 801ede4:	4b17      	ldr	r3, [pc, #92]	@ (801ee44 <state_restore_conditions+0x64>)
 801ede6:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801edea:	f013 0f01 	tst.w	r3, #1
 801edee:	d004      	beq.n	801edfa <state_restore_conditions+0x1a>
 801edf0:	4b15      	ldr	r3, [pc, #84]	@ (801ee48 <state_restore_conditions+0x68>)
 801edf2:	7f1b      	ldrb	r3, [r3, #28]
 801edf4:	f013 0f04 	tst.w	r3, #4
 801edf8:	d118      	bne.n	801ee2c <state_restore_conditions+0x4c>
        park.flags.restoring = On; //
 801edfa:	4a13      	ldr	r2, [pc, #76]	@ (801ee48 <state_restore_conditions+0x68>)
 801edfc:	7f13      	ldrb	r3, [r2, #28]
 801edfe:	f043 0308 	orr.w	r3, r3, #8
 801ee02:	7713      	strb	r3, [r2, #28]
            state_spindle_restore(&condition->spindle[--spindle_num]);
 801ee04:	1d20      	adds	r0, r4, #4
 801ee06:	f7ff ffe1 	bl	801edcc <state_spindle_restore>
        if (gc_state.modal.coolant.value != hal.coolant.get_state().value) {
 801ee0a:	4b10      	ldr	r3, [pc, #64]	@ (801ee4c <state_restore_conditions+0x6c>)
 801ee0c:	7e5d      	ldrb	r5, [r3, #25]
 801ee0e:	4b10      	ldr	r3, [pc, #64]	@ (801ee50 <state_restore_conditions+0x70>)
 801ee10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ee12:	4798      	blx	r3
 801ee14:	b2c3      	uxtb	r3, r0
 801ee16:	429d      	cmp	r5, r3
 801ee18:	d109      	bne.n	801ee2e <state_restore_conditions+0x4e>
        park.flags.restoring = Off;
 801ee1a:	4a0b      	ldr	r2, [pc, #44]	@ (801ee48 <state_restore_conditions+0x68>)
 801ee1c:	7f13      	ldrb	r3, [r2, #28]
 801ee1e:	f36f 03c3 	bfc	r3, #3, #1
 801ee22:	7713      	strb	r3, [r2, #28]
        sys.override.spindle_stop.value = 0; // Clear spindle stop override states
 801ee24:	4b0b      	ldr	r3, [pc, #44]	@ (801ee54 <state_restore_conditions+0x74>)
 801ee26:	2200      	movs	r2, #0
 801ee28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 801ee2c:	bd38      	pop	{r3, r4, r5, pc}
            gc_coolant(condition->coolant);;
 801ee2e:	7820      	ldrb	r0, [r4, #0]
 801ee30:	f7ee fcd6 	bl	800d7e0 <gc_coolant>
            delay_sec(settings.safety_door.coolant_on_delay, DelayMode_SysSuspend);
 801ee34:	2001      	movs	r0, #1
 801ee36:	4b03      	ldr	r3, [pc, #12]	@ (801ee44 <state_restore_conditions+0x64>)
 801ee38:	ed93 0a51 	vldr	s0, [r3, #324]	@ 0x144
 801ee3c:	f7f7 f832 	bl	8015ea4 <delay_sec>
 801ee40:	e7eb      	b.n	801ee1a <state_restore_conditions+0x3a>
 801ee42:	bf00      	nop
 801ee44:	200022f4 	.word	0x200022f4
 801ee48:	2000252c 	.word	0x2000252c
 801ee4c:	20001614 	.word	0x20001614
 801ee50:	200018dc 	.word	0x200018dc
 801ee54:	20001bbc 	.word	0x20001bbc

0801ee58 <state_restore>:
/*! /brief Waits until fast plunge motion is completed then restore spindle and coolant and execute slow plunge motion.
state_await_resumed() is set to handle the cycle complete event.
Note: A safety door event during restoration or motion will halt it and restart the retract sequence.
 */
static void state_restore (uint_fast16_t rt_exec)
{
 801ee58:	b510      	push	{r4, lr}
    if (rt_exec & EXEC_SAFETY_DOOR) {
 801ee5a:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801ee5e:	d00d      	beq.n	801ee7c <state_restore+0x24>
        if(park.flags.restoring)
 801ee60:	4b2b      	ldr	r3, [pc, #172]	@ (801ef10 <state_restore+0xb8>)
 801ee62:	7f1b      	ldrb	r3, [r3, #28]
 801ee64:	f013 0f08 	tst.w	r3, #8
 801ee68:	d005      	beq.n	801ee76 <state_restore+0x1e>
            park.flags.restart = On;
 801ee6a:	4a29      	ldr	r2, [pc, #164]	@ (801ef10 <state_restore+0xb8>)
 801ee6c:	7f13      	ldrb	r3, [r2, #28]
 801ee6e:	f043 0304 	orr.w	r3, r3, #4
 801ee72:	7713      	strb	r3, [r2, #28]
        }

        if (!await_motion)
            stateHandler(EXEC_CYCLE_COMPLETE); // No motion, proceed to next step immediately.
    }
}
 801ee74:	bd10      	pop	{r4, pc}
            restart_retract();
 801ee76:	f7ff ff79 	bl	801ed6c <restart_retract>
 801ee7a:	e7fb      	b.n	801ee74 <state_restore+0x1c>
    else if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801ee7c:	f010 0f04 	tst.w	r0, #4
 801ee80:	d0f8      	beq.n	801ee74 <state_restore+0x1c>
        if (sys.step_control.execute_sys_motion) {
 801ee82:	4b24      	ldr	r3, [pc, #144]	@ (801ef14 <state_restore+0xbc>)
 801ee84:	7e1b      	ldrb	r3, [r3, #24]
 801ee86:	f013 0f04 	tst.w	r3, #4
 801ee8a:	d118      	bne.n	801eebe <state_restore+0x66>
        park.flags.restart = Off;
 801ee8c:	4c20      	ldr	r4, [pc, #128]	@ (801ef10 <state_restore+0xb8>)
 801ee8e:	7f23      	ldrb	r3, [r4, #28]
 801ee90:	f36f 0382 	bfc	r3, #2, #1
 801ee94:	7723      	strb	r3, [r4, #28]
        stateHandler = state_await_resumed;
 801ee96:	4b20      	ldr	r3, [pc, #128]	@ (801ef18 <state_restore+0xc0>)
 801ee98:	4a20      	ldr	r2, [pc, #128]	@ (801ef1c <state_restore+0xc4>)
 801ee9a:	601a      	str	r2, [r3, #0]
        state_restore_conditions(&restore_condition);
 801ee9c:	4820      	ldr	r0, [pc, #128]	@ (801ef20 <state_restore+0xc8>)
 801ee9e:	f7ff ff9f 	bl	801ede0 <state_restore_conditions>
        if(park.flags.restart) {
 801eea2:	7f23      	ldrb	r3, [r4, #28]
 801eea4:	f013 0f04 	tst.w	r3, #4
 801eea8:	d111      	bne.n	801eece <state_restore+0x76>
        if (park.flags.motion) {
 801eeaa:	4b19      	ldr	r3, [pc, #100]	@ (801ef10 <state_restore+0xb8>)
 801eeac:	7f1b      	ldrb	r3, [r3, #28]
 801eeae:	f013 0f02 	tst.w	r3, #2
 801eeb2:	d10f      	bne.n	801eed4 <state_restore+0x7c>
            stateHandler(EXEC_CYCLE_COMPLETE); // No motion, proceed to next step immediately.
 801eeb4:	4b18      	ldr	r3, [pc, #96]	@ (801ef18 <state_restore+0xc0>)
 801eeb6:	681b      	ldr	r3, [r3, #0]
 801eeb8:	2004      	movs	r0, #4
 801eeba:	4798      	blx	r3
 801eebc:	e7da      	b.n	801ee74 <state_restore+0x1c>
            sys.step_control.execute_sys_motion = Off;
 801eebe:	4b15      	ldr	r3, [pc, #84]	@ (801ef14 <state_restore+0xbc>)
 801eec0:	7e1a      	ldrb	r2, [r3, #24]
 801eec2:	f36f 0282 	bfc	r2, #2, #1
 801eec6:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801eec8:	f001 f8e6 	bl	8020098 <st_parking_restore_buffer>
 801eecc:	e7de      	b.n	801ee8c <state_restore+0x34>
            restart_retract();
 801eece:	f7ff ff4d 	bl	801ed6c <restart_retract>
            return;
 801eed2:	e7cf      	b.n	801ee74 <state_restore+0x1c>
            sys.parking_state = Parking_Resuming;
 801eed4:	4b0f      	ldr	r3, [pc, #60]	@ (801ef14 <state_restore+0xbc>)
 801eed6:	2204      	movs	r2, #4
 801eed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            park.plan_data.feed_rate = settings.parking.pullout_rate;
 801eedc:	4b11      	ldr	r3, [pc, #68]	@ (801ef24 <state_restore+0xcc>)
 801eede:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801eee2:	480b      	ldr	r0, [pc, #44]	@ (801ef10 <state_restore+0xb8>)
 801eee4:	6203      	str	r3, [r0, #32]
            park.plan_data.condition.coolant = restore_condition.coolant;
 801eee6:	4b0e      	ldr	r3, [pc, #56]	@ (801ef20 <state_restore+0xc8>)
 801eee8:	781a      	ldrb	r2, [r3, #0]
 801eeea:	f880 2036 	strb.w	r2, [r0, #54]	@ 0x36
            park.plan_data.spindle.state = restore_condition.spindle[restore_condition.spindle_num].state;
 801eeee:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801eef2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801eef6:	7a1a      	ldrb	r2, [r3, #8]
 801eef8:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
            park.plan_data.spindle.rpm = restore_condition.spindle[restore_condition.spindle_num].rpm;
 801eefc:	685b      	ldr	r3, [r3, #4]
 801eefe:	6243      	str	r3, [r0, #36]	@ 0x24
            await_motion = mc_parking_motion(park.restore_target, &park.plan_data);
 801ef00:	f100 0120 	add.w	r1, r0, #32
 801ef04:	300c      	adds	r0, #12
 801ef06:	f7f5 ff9f 	bl	8014e48 <mc_parking_motion>
        if (!await_motion)
 801ef0a:	2800      	cmp	r0, #0
 801ef0c:	d1b2      	bne.n	801ee74 <state_restore+0x1c>
 801ef0e:	e7d1      	b.n	801eeb4 <state_restore+0x5c>
 801ef10:	2000252c 	.word	0x2000252c
 801ef14:	20001bbc 	.word	0x20001bbc
 801ef18:	2000043c 	.word	0x2000043c
 801ef1c:	0801f62d 	.word	0x0801f62d
 801ef20:	2000257c 	.word	0x2000257c
 801ef24:	200022f4 	.word	0x200022f4

0801ef28 <initiate_hold>:
{
 801ef28:	b538      	push	{r3, r4, r5, lr}
 801ef2a:	4605      	mov	r5, r0
    if (settings.parking.flags.enabled) {
 801ef2c:	4b4e      	ldr	r3, [pc, #312]	@ (801f068 <initiate_hold+0x140>)
 801ef2e:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801ef32:	f013 0f01 	tst.w	r3, #1
 801ef36:	d151      	bne.n	801efdc <initiate_hold+0xb4>
    plan_block_t *block = plan_get_current_block();
 801ef38:	f7f7 fdb2 	bl	8016aa0 <plan_get_current_block>
 801ef3c:	4604      	mov	r4, r0
    restore_condition.spindle_num = 0;
 801ef3e:	2000      	movs	r0, #0
 801ef40:	4b4a      	ldr	r3, [pc, #296]	@ (801f06c <initiate_hold+0x144>)
 801ef42:	7058      	strb	r0, [r3, #1]
        if((spindle = spindle_get(--spindle_num))) {
 801ef44:	f7ff fc50 	bl	801e7e8 <spindle_get>
 801ef48:	4603      	mov	r3, r0
 801ef4a:	2800      	cmp	r0, #0
 801ef4c:	d069      	beq.n	801f022 <initiate_hold+0xfa>
            if(block && block->spindle.hal == spindle) {
 801ef4e:	b114      	cbz	r4, 801ef56 <initiate_hold+0x2e>
 801ef50:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801ef52:	4282      	cmp	r2, r0
 801ef54:	d051      	beq.n	801effa <initiate_hold+0xd2>
            } else if(gc_state.spindle.hal == spindle) {
 801ef56:	4a46      	ldr	r2, [pc, #280]	@ (801f070 <initiate_hold+0x148>)
 801ef58:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 801ef5a:	429a      	cmp	r2, r3
 801ef5c:	d057      	beq.n	801f00e <initiate_hold+0xe6>
                restore_condition.spindle[spindle_num].hal = spindle;
 801ef5e:	4a43      	ldr	r2, [pc, #268]	@ (801f06c <initiate_hold+0x144>)
 801ef60:	6113      	str	r3, [r2, #16]
                restore_condition.spindle[spindle_num].rpm = spindle->param->rpm;
 801ef62:	6859      	ldr	r1, [r3, #4]
 801ef64:	6809      	ldr	r1, [r1, #0]
 801ef66:	6051      	str	r1, [r2, #4]
                restore_condition.spindle[spindle_num].state = spindle->param->state;
 801ef68:	685b      	ldr	r3, [r3, #4]
 801ef6a:	7a1b      	ldrb	r3, [r3, #8]
 801ef6c:	7213      	strb	r3, [r2, #8]
    if (block)
 801ef6e:	2c00      	cmp	r4, #0
 801ef70:	d05b      	beq.n	801f02a <initiate_hold+0x102>
        restore_condition.coolant.mask = block->condition.coolant.mask;
 801ef72:	7da2      	ldrb	r2, [r4, #22]
 801ef74:	4b3d      	ldr	r3, [pc, #244]	@ (801f06c <initiate_hold+0x144>)
 801ef76:	701a      	strb	r2, [r3, #0]
    if (restore_condition.spindle[restore_condition.spindle_num].hal->cap.laser && settings.flags.disable_laser_during_hold)
 801ef78:	4b3c      	ldr	r3, [pc, #240]	@ (801f06c <initiate_hold+0x144>)
 801ef7a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801ef7e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801ef82:	691b      	ldr	r3, [r3, #16]
 801ef84:	7a9b      	ldrb	r3, [r3, #10]
 801ef86:	f013 0f08 	tst.w	r3, #8
 801ef8a:	d005      	beq.n	801ef98 <initiate_hold+0x70>
 801ef8c:	4b36      	ldr	r3, [pc, #216]	@ (801f068 <initiate_hold+0x140>)
 801ef8e:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 801ef92:	f013 0f10 	tst.w	r3, #16
 801ef96:	d152      	bne.n	801f03e <initiate_hold+0x116>
    if (sys_state & (STATE_CYCLE|STATE_JOG)) {
 801ef98:	4b36      	ldr	r3, [pc, #216]	@ (801f074 <initiate_hold+0x14c>)
 801ef9a:	681b      	ldr	r3, [r3, #0]
 801ef9c:	f013 0f28 	tst.w	r3, #40	@ 0x28
 801efa0:	d151      	bne.n	801f046 <initiate_hold+0x11e>
    if (new_state == STATE_HOLD)
 801efa2:	2d10      	cmp	r5, #16
 801efa4:	d05a      	beq.n	801f05c <initiate_hold+0x134>
        sys.parking_state = Parking_Retracting;
 801efa6:	4b34      	ldr	r3, [pc, #208]	@ (801f078 <initiate_hold+0x150>)
 801efa8:	2202      	movs	r2, #2
 801efaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        park.flags.value = 0;
 801efae:	4b33      	ldr	r3, [pc, #204]	@ (801f07c <initiate_hold+0x154>)
 801efb0:	2200      	movs	r2, #0
 801efb2:	771a      	strb	r2, [r3, #28]
    sys.suspend = !sys.flags.soft_limit;
 801efb4:	4a30      	ldr	r2, [pc, #192]	@ (801f078 <initiate_hold+0x150>)
 801efb6:	7d93      	ldrb	r3, [r2, #22]
 801efb8:	089b      	lsrs	r3, r3, #2
 801efba:	f083 0301 	eor.w	r3, r3, #1
 801efbe:	f003 0301 	and.w	r3, r3, #1
 801efc2:	7093      	strb	r3, [r2, #2]
    pending_state = sys_state == STATE_JOG ? new_state : STATE_IDLE;
 801efc4:	4b2b      	ldr	r3, [pc, #172]	@ (801f074 <initiate_hold+0x14c>)
 801efc6:	6818      	ldr	r0, [r3, #0]
 801efc8:	2820      	cmp	r0, #32
 801efca:	d000      	beq.n	801efce <initiate_hold+0xa6>
 801efcc:	2500      	movs	r5, #0
 801efce:	4b2c      	ldr	r3, [pc, #176]	@ (801f080 <initiate_hold+0x158>)
 801efd0:	601d      	str	r5, [r3, #0]
}
 801efd2:	2808      	cmp	r0, #8
 801efd4:	bf14      	ite	ne
 801efd6:	2000      	movne	r0, #0
 801efd8:	2001      	moveq	r0, #1
 801efda:	bd38      	pop	{r3, r4, r5, pc}
        plan_data_init(&park.plan_data);
 801efdc:	4c29      	ldr	r4, [pc, #164]	@ (801f084 <initiate_hold+0x15c>)
 801efde:	4620      	mov	r0, r4
 801efe0:	f7f8 f85e 	bl	80170a0 <plan_data_init>
        park.plan_data.condition.system_motion = On;
 801efe4:	7d22      	ldrb	r2, [r4, #20]
 801efe6:	f042 0202 	orr.w	r2, r2, #2
 801efea:	7522      	strb	r2, [r4, #20]
        park.plan_data.condition.no_feed_override = On;
 801efec:	b2d2      	uxtb	r2, r2
 801efee:	f042 0210 	orr.w	r2, r2, #16
 801eff2:	7522      	strb	r2, [r4, #20]
        park.plan_data.line_number = PARKING_MOTION_LINE_NUMBER;
 801eff4:	2200      	movs	r2, #0
 801eff6:	61e2      	str	r2, [r4, #28]
 801eff8:	e79e      	b.n	801ef38 <initiate_hold+0x10>
                restore_condition.spindle_num = spindle_num;
 801effa:	4b1c      	ldr	r3, [pc, #112]	@ (801f06c <initiate_hold+0x144>)
 801effc:	2100      	movs	r1, #0
 801effe:	7059      	strb	r1, [r3, #1]
                restore_condition.spindle[spindle_num].hal = block->spindle.hal;
 801f000:	611a      	str	r2, [r3, #16]
                restore_condition.spindle[spindle_num].rpm = block->spindle.rpm;
 801f002:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801f004:	605a      	str	r2, [r3, #4]
                restore_condition.spindle[spindle_num].state = block->spindle.state;
 801f006:	f894 203c 	ldrb.w	r2, [r4, #60]	@ 0x3c
 801f00a:	721a      	strb	r2, [r3, #8]
    if (block)
 801f00c:	e7b1      	b.n	801ef72 <initiate_hold+0x4a>
                restore_condition.spindle_num = spindle_num;
 801f00e:	4b17      	ldr	r3, [pc, #92]	@ (801f06c <initiate_hold+0x144>)
 801f010:	2100      	movs	r1, #0
 801f012:	7059      	strb	r1, [r3, #1]
                restore_condition.spindle[spindle_num].hal = gc_state.spindle.hal;
 801f014:	611a      	str	r2, [r3, #16]
                restore_condition.spindle[spindle_num].rpm = gc_state.spindle.rpm;
 801f016:	4a16      	ldr	r2, [pc, #88]	@ (801f070 <initiate_hold+0x148>)
 801f018:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 801f01a:	6059      	str	r1, [r3, #4]
                restore_condition.spindle[spindle_num].state = gc_state.modal.spindle.state;
 801f01c:	7e92      	ldrb	r2, [r2, #26]
 801f01e:	721a      	strb	r2, [r3, #8]
 801f020:	e7a5      	b.n	801ef6e <initiate_hold+0x46>
            restore_condition.spindle[spindle_num].hal = NULL;
 801f022:	4b12      	ldr	r3, [pc, #72]	@ (801f06c <initiate_hold+0x144>)
 801f024:	2200      	movs	r2, #0
 801f026:	611a      	str	r2, [r3, #16]
 801f028:	e7a1      	b.n	801ef6e <initiate_hold+0x46>
        restore_condition.coolant.mask = gc_state.modal.coolant.mask | hal.coolant.get_state().mask;
 801f02a:	4b11      	ldr	r3, [pc, #68]	@ (801f070 <initiate_hold+0x148>)
 801f02c:	7e5c      	ldrb	r4, [r3, #25]
 801f02e:	4b16      	ldr	r3, [pc, #88]	@ (801f088 <initiate_hold+0x160>)
 801f030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f032:	4798      	blx	r3
 801f034:	b2c0      	uxtb	r0, r0
 801f036:	4304      	orrs	r4, r0
 801f038:	4b0c      	ldr	r3, [pc, #48]	@ (801f06c <initiate_hold+0x144>)
 801f03a:	701c      	strb	r4, [r3, #0]
 801f03c:	e79c      	b.n	801ef78 <initiate_hold+0x50>
        enqueue_spindle_override(CMD_OVERRIDE_SPINDLE_STOP);
 801f03e:	209e      	movs	r0, #158	@ 0x9e
 801f040:	f7f7 fb18 	bl	8016674 <enqueue_spindle_override>
 801f044:	e7a8      	b.n	801ef98 <initiate_hold+0x70>
        st_update_plan_block_parameters();  // Notify stepper module to recompute for hold deceleration.
 801f046:	f000 ffd1 	bl	801ffec <st_update_plan_block_parameters>
        sys.step_control.execute_hold = On; // Initiate suspend state with active flag.
 801f04a:	4a0b      	ldr	r2, [pc, #44]	@ (801f078 <initiate_hold+0x150>)
 801f04c:	7e13      	ldrb	r3, [r2, #24]
 801f04e:	f043 0302 	orr.w	r3, r3, #2
 801f052:	7613      	strb	r3, [r2, #24]
        stateHandler = state_await_hold;
 801f054:	4b0d      	ldr	r3, [pc, #52]	@ (801f08c <initiate_hold+0x164>)
 801f056:	4a0e      	ldr	r2, [pc, #56]	@ (801f090 <initiate_hold+0x168>)
 801f058:	601a      	str	r2, [r3, #0]
 801f05a:	e7a2      	b.n	801efa2 <initiate_hold+0x7a>
        sys.holding_state = Hold_Pending;
 801f05c:	4b06      	ldr	r3, [pc, #24]	@ (801f078 <initiate_hold+0x150>)
 801f05e:	2202      	movs	r2, #2
 801f060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801f064:	e7a6      	b.n	801efb4 <initiate_hold+0x8c>
 801f066:	bf00      	nop
 801f068:	200022f4 	.word	0x200022f4
 801f06c:	2000257c 	.word	0x2000257c
 801f070:	20001614 	.word	0x20001614
 801f074:	20002574 	.word	0x20002574
 801f078:	20001bbc 	.word	0x20001bbc
 801f07c:	2000252c 	.word	0x2000252c
 801f080:	20002578 	.word	0x20002578
 801f084:	2000254c 	.word	0x2000254c
 801f088:	200018dc 	.word	0x200018dc
 801f08c:	2000043c 	.word	0x2000043c
 801f090:	0801f7c5 	.word	0x0801f7c5

0801f094 <enter_sleep>:
{
 801f094:	b508      	push	{r3, lr}
    st_go_idle();
 801f096:	f000 fd61 	bl	801fb5c <st_go_idle>
    spindle_all_off();
 801f09a:	f7ff fdb1 	bl	801ec00 <spindle_all_off>
    hal.coolant.set_state((coolant_state_t){0});
 801f09e:	4b06      	ldr	r3, [pc, #24]	@ (801f0b8 <enter_sleep+0x24>)
 801f0a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f0a2:	f04f 0000 	mov.w	r0, #0
 801f0a6:	4798      	blx	r3
    grbl.report.feedback_message(Message_SleepMode);
 801f0a8:	4b04      	ldr	r3, [pc, #16]	@ (801f0bc <enter_sleep+0x28>)
 801f0aa:	68db      	ldr	r3, [r3, #12]
 801f0ac:	200b      	movs	r0, #11
 801f0ae:	4798      	blx	r3
    stateHandler = state_noop;
 801f0b0:	4b03      	ldr	r3, [pc, #12]	@ (801f0c0 <enter_sleep+0x2c>)
 801f0b2:	4a04      	ldr	r2, [pc, #16]	@ (801f0c4 <enter_sleep+0x30>)
 801f0b4:	601a      	str	r2, [r3, #0]
}
 801f0b6:	bd08      	pop	{r3, pc}
 801f0b8:	200018dc 	.word	0x200018dc
 801f0bc:	20001ac4 	.word	0x20001ac4
 801f0c0:	2000043c 	.word	0x2000043c
 801f0c4:	0801ec49 	.word	0x0801ec49

0801f0c8 <state_spindle_set_state>:
{
 801f0c8:	b508      	push	{r3, lr}
 801f0ca:	4603      	mov	r3, r0
    if(spindle->hal)
 801f0cc:	68c0      	ldr	r0, [r0, #12]
 801f0ce:	b120      	cbz	r0, 801f0da <state_spindle_set_state+0x12>
        spindle_set_state(spindle->hal, spindle->state, spindle->rpm);
 801f0d0:	ed93 0a00 	vldr	s0, [r3]
 801f0d4:	7919      	ldrb	r1, [r3, #4]
 801f0d6:	f7ff fc81 	bl	801e9dc <spindle_set_state>
}
 801f0da:	bd08      	pop	{r3, pc}

0801f0dc <state_door_reopened>:
    return settings.parking.flags.enabled && park.flags.restart;
 801f0dc:	4b08      	ldr	r3, [pc, #32]	@ (801f100 <state_door_reopened+0x24>)
 801f0de:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801f0e2:	f013 0f01 	tst.w	r3, #1
 801f0e6:	d006      	beq.n	801f0f6 <state_door_reopened+0x1a>
 801f0e8:	4b06      	ldr	r3, [pc, #24]	@ (801f104 <state_door_reopened+0x28>)
 801f0ea:	7f1b      	ldrb	r3, [r3, #28]
 801f0ec:	f013 0f04 	tst.w	r3, #4
 801f0f0:	d103      	bne.n	801f0fa <state_door_reopened+0x1e>
 801f0f2:	2000      	movs	r0, #0
 801f0f4:	4770      	bx	lr
 801f0f6:	2000      	movs	r0, #0
 801f0f8:	4770      	bx	lr
 801f0fa:	2001      	movs	r0, #1
}
 801f0fc:	4770      	bx	lr
 801f0fe:	bf00      	nop
 801f100:	200022f4 	.word	0x200022f4
 801f104:	2000252c 	.word	0x2000252c

0801f108 <state_get>:
}
 801f108:	4b01      	ldr	r3, [pc, #4]	@ (801f110 <state_get+0x8>)
 801f10a:	6818      	ldr	r0, [r3, #0]
 801f10c:	4770      	bx	lr
 801f10e:	bf00      	nop
 801f110:	20002574 	.word	0x20002574

0801f114 <state_set>:
{
 801f114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(new_state != sys_state) {
 801f116:	4b8a      	ldr	r3, [pc, #552]	@ (801f340 <state_set+0x22c>)
 801f118:	681d      	ldr	r5, [r3, #0]
 801f11a:	4285      	cmp	r5, r0
 801f11c:	f000 80fd 	beq.w	801f31a <state_set+0x206>
 801f120:	4604      	mov	r4, r0
        switch(new_state) {    // Set up new state and handler
 801f122:	2820      	cmp	r0, #32
 801f124:	d825      	bhi.n	801f172 <state_set+0x5e>
 801f126:	2820      	cmp	r0, #32
 801f128:	f200 80e7 	bhi.w	801f2fa <state_set+0x1e6>
 801f12c:	e8df f010 	tbh	[pc, r0, lsl #1]
 801f130:	00fe0053 	.word	0x00fe0053
 801f134:	00e500fe 	.word	0x00e500fe
 801f138:	00e500fe 	.word	0x00e500fe
 801f13c:	00e500e5 	.word	0x00e500e5
 801f140:	00e50065 	.word	0x00e50065
 801f144:	00e500e5 	.word	0x00e500e5
 801f148:	00e500e5 	.word	0x00e500e5
 801f14c:	00e500e5 	.word	0x00e500e5
 801f150:	00e500b9 	.word	0x00e500b9
 801f154:	00e500e5 	.word	0x00e500e5
 801f158:	00e500e5 	.word	0x00e500e5
 801f15c:	00e500e5 	.word	0x00e500e5
 801f160:	00e500e5 	.word	0x00e500e5
 801f164:	00e500e5 	.word	0x00e500e5
 801f168:	00e500e5 	.word	0x00e500e5
 801f16c:	00e500e5 	.word	0x00e500e5
 801f170:	00ab      	.short	0x00ab
 801f172:	2880      	cmp	r0, #128	@ 0x80
 801f174:	d01a      	beq.n	801f1ac <state_set+0x98>
 801f176:	d90d      	bls.n	801f194 <state_set+0x80>
 801f178:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 801f17c:	f000 80d6 	beq.w	801f32c <state_set+0x218>
 801f180:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 801f184:	f040 80b9 	bne.w	801f2fa <state_set+0x1e6>
                sys_state = new_state;
 801f188:	4b6d      	ldr	r3, [pc, #436]	@ (801f340 <state_set+0x22c>)
 801f18a:	6018      	str	r0, [r3, #0]
                stateHandler = state_await_toolchanged;
 801f18c:	4b6d      	ldr	r3, [pc, #436]	@ (801f344 <state_set+0x230>)
 801f18e:	4a6e      	ldr	r2, [pc, #440]	@ (801f348 <state_set+0x234>)
 801f190:	601a      	str	r2, [r3, #0]
                break;
 801f192:	e0b2      	b.n	801f2fa <state_set+0x1e6>
        switch(new_state) {    // Set up new state and handler
 801f194:	2840      	cmp	r0, #64	@ 0x40
 801f196:	f040 80b0 	bne.w	801f2fa <state_set+0x1e6>
                if ((sys_state & (STATE_ALARM|STATE_ESTOP|STATE_SLEEP|STATE_CHECK_MODE)))
 801f19a:	f240 1383 	movw	r3, #387	@ 0x183
 801f19e:	421d      	tst	r5, r3
 801f1a0:	f040 80bb 	bne.w	801f31a <state_set+0x206>
                grbl.report.feedback_message(Message_SafetyDoorAjar);
 801f1a4:	4b69      	ldr	r3, [pc, #420]	@ (801f34c <state_set+0x238>)
 801f1a6:	68db      	ldr	r3, [r3, #12]
 801f1a8:	2006      	movs	r0, #6
 801f1aa:	4798      	blx	r3
                sys.parking_state = Parking_Retracting;
 801f1ac:	4b68      	ldr	r3, [pc, #416]	@ (801f350 <state_set+0x23c>)
 801f1ae:	2202      	movs	r2, #2
 801f1b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                if (!initiate_hold(new_state)) {
 801f1b4:	4620      	mov	r0, r4
 801f1b6:	f7ff feb7 	bl	801ef28 <initiate_hold>
 801f1ba:	2800      	cmp	r0, #0
 801f1bc:	f040 8097 	bne.w	801f2ee <state_set+0x1da>
                    if (pending_state != new_state) {
 801f1c0:	4b64      	ldr	r3, [pc, #400]	@ (801f354 <state_set+0x240>)
 801f1c2:	681b      	ldr	r3, [r3, #0]
 801f1c4:	42a3      	cmp	r3, r4
 801f1c6:	f000 8094 	beq.w	801f2f2 <state_set+0x1de>
                        sys_state = new_state;
 801f1ca:	4b5d      	ldr	r3, [pc, #372]	@ (801f340 <state_set+0x22c>)
 801f1cc:	601c      	str	r4, [r3, #0]
                        state_await_hold(EXEC_CYCLE_COMPLETE); // "Simulate" a cycle stop
 801f1ce:	2004      	movs	r0, #4
 801f1d0:	f000 faf8 	bl	801f7c4 <state_await_hold>
 801f1d4:	e08d      	b.n	801f2f2 <state_set+0x1de>
                sys.suspend = false;        // Break suspend state.
 801f1d6:	4a5e      	ldr	r2, [pc, #376]	@ (801f350 <state_set+0x23c>)
 801f1d8:	2300      	movs	r3, #0
 801f1da:	7093      	strb	r3, [r2, #2]
                sys.step_control.flags = 0; // Restore step control to normal operation.
 801f1dc:	7613      	strb	r3, [r2, #24]
                sys.parking_state = Parking_DoorClosed;
 801f1de:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                sys.holding_state = Hold_NotHolding;
 801f1e2:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
                sys_state = pending_state = new_state;
 801f1e6:	4a5b      	ldr	r2, [pc, #364]	@ (801f354 <state_set+0x240>)
 801f1e8:	6010      	str	r0, [r2, #0]
 801f1ea:	4a55      	ldr	r2, [pc, #340]	@ (801f340 <state_set+0x22c>)
 801f1ec:	6010      	str	r0, [r2, #0]
                park.flags.value = 0;
 801f1ee:	4a5a      	ldr	r2, [pc, #360]	@ (801f358 <state_set+0x244>)
 801f1f0:	7713      	strb	r3, [r2, #28]
                stateHandler = state_idle;
 801f1f2:	4b54      	ldr	r3, [pc, #336]	@ (801f344 <state_set+0x230>)
 801f1f4:	4a59      	ldr	r2, [pc, #356]	@ (801f35c <state_set+0x248>)
 801f1f6:	601a      	str	r2, [r3, #0]
                break;
 801f1f8:	e07f      	b.n	801f2fa <state_set+0x1e6>
                if (sys_state == STATE_IDLE) {
 801f1fa:	2d00      	cmp	r5, #0
 801f1fc:	d17d      	bne.n	801f2fa <state_set+0x1e6>
                    if ((block = plan_get_current_block())) {
 801f1fe:	f7f7 fc4f 	bl	8016aa0 <plan_get_current_block>
 801f202:	4606      	mov	r6, r0
 801f204:	2800      	cmp	r0, #0
 801f206:	d078      	beq.n	801f2fa <state_set+0x1e6>
                        sys_state = new_state;
 801f208:	4b4d      	ldr	r3, [pc, #308]	@ (801f340 <state_set+0x22c>)
 801f20a:	601c      	str	r4, [r3, #0]
                        sys.steppers_deenergize = false;    // Cancel stepper deenergize if pending.
 801f20c:	4b50      	ldr	r3, [pc, #320]	@ (801f350 <state_set+0x23c>)
 801f20e:	2200      	movs	r2, #0
 801f210:	719a      	strb	r2, [r3, #6]
                        st_prep_buffer();                   // Initialize step segment buffer before beginning cycle.
 801f212:	f000 ff87 	bl	8020124 <st_prep_buffer>
                        if (block->spindle.state.synchronized) {
 801f216:	f996 303c 	ldrsb.w	r3, [r6, #60]	@ 0x3c
 801f21a:	2b00      	cmp	r3, #0
 801f21c:	da2d      	bge.n	801f27a <state_set+0x166>
                            uint32_t ms = hal.get_elapsed_ticks();
 801f21e:	4b50      	ldr	r3, [pc, #320]	@ (801f360 <state_set+0x24c>)
 801f220:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 801f224:	4798      	blx	r3
 801f226:	4607      	mov	r7, r0
                            if (block->spindle.hal->reset_data)
 801f228:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 801f22a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f22c:	b103      	cbz	r3, 801f230 <state_set+0x11c>
                                block->spindle.hal->reset_data();
 801f22e:	4798      	blx	r3
                            uint32_t index = block->spindle.hal->get_data(SpindleData_Counters)->index_count + 2;
 801f230:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 801f232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f234:	2000      	movs	r0, #0
 801f236:	4798      	blx	r3
 801f238:	6944      	ldr	r4, [r0, #20]
 801f23a:	3402      	adds	r4, #2
                            while(index != block->spindle.hal->get_data(SpindleData_Counters)->index_count) {
 801f23c:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 801f23e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f240:	2000      	movs	r0, #0
 801f242:	4798      	blx	r3
 801f244:	6943      	ldr	r3, [r0, #20]
 801f246:	42a3      	cmp	r3, r4
 801f248:	d017      	beq.n	801f27a <state_set+0x166>
                                if(hal.get_elapsed_ticks() - ms > 5000) {
 801f24a:	4b45      	ldr	r3, [pc, #276]	@ (801f360 <state_set+0x24c>)
 801f24c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 801f250:	4798      	blx	r3
 801f252:	1bc0      	subs	r0, r0, r7
 801f254:	f241 3388 	movw	r3, #5000	@ 0x1388
 801f258:	4298      	cmp	r0, r3
 801f25a:	d80a      	bhi.n	801f272 <state_set+0x15e>
                                if(sys.rt_exec_state & (EXEC_RESET|EXEC_STOP)) {
 801f25c:	4b3c      	ldr	r3, [pc, #240]	@ (801f350 <state_set+0x23c>)
 801f25e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801f260:	f013 0f30 	tst.w	r3, #48	@ 0x30
 801f264:	d0ea      	beq.n	801f23c <state_set+0x128>
                                    system_set_exec_state_flag(EXEC_RESET);
 801f266:	4b3e      	ldr	r3, [pc, #248]	@ (801f360 <state_set+0x24c>)
 801f268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f26a:	2120      	movs	r1, #32
 801f26c:	483d      	ldr	r0, [pc, #244]	@ (801f364 <state_set+0x250>)
 801f26e:	4798      	blx	r3
                                    return;
 801f270:	e053      	b.n	801f31a <state_set+0x206>
                                    system_raise_alarm(Alarm_Spindle);
 801f272:	200e      	movs	r0, #14
 801f274:	f002 fed6 	bl	8022024 <system_raise_alarm>
                                    return;
 801f278:	e04f      	b.n	801f31a <state_set+0x206>
                        st_wake_up();
 801f27a:	f000 fc61 	bl	801fb40 <st_wake_up>
                        stateHandler = state_cycle;
 801f27e:	4b31      	ldr	r3, [pc, #196]	@ (801f344 <state_set+0x230>)
 801f280:	4a39      	ldr	r2, [pc, #228]	@ (801f368 <state_set+0x254>)
 801f282:	601a      	str	r2, [r3, #0]
 801f284:	e039      	b.n	801f2fa <state_set+0x1e6>
                if (sys_state == STATE_TOOL_CHANGE)
 801f286:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 801f28a:	d005      	beq.n	801f298 <state_set+0x184>
                sys_state = new_state;
 801f28c:	4b2c      	ldr	r3, [pc, #176]	@ (801f340 <state_set+0x22c>)
 801f28e:	601c      	str	r4, [r3, #0]
                stateHandler = state_cycle;
 801f290:	4b2c      	ldr	r3, [pc, #176]	@ (801f344 <state_set+0x230>)
 801f292:	4a35      	ldr	r2, [pc, #212]	@ (801f368 <state_set+0x254>)
 801f294:	601a      	str	r2, [r3, #0]
                break;
 801f296:	e030      	b.n	801f2fa <state_set+0x1e6>
                    pending_state = STATE_TOOL_CHANGE;
 801f298:	4b2e      	ldr	r3, [pc, #184]	@ (801f354 <state_set+0x240>)
 801f29a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801f29e:	601a      	str	r2, [r3, #0]
 801f2a0:	e7f4      	b.n	801f28c <state_set+0x178>
                if (sys.override.control.sync && sys.override.control.feed_hold_disable)
 801f2a2:	4b2b      	ldr	r3, [pc, #172]	@ (801f350 <state_set+0x23c>)
 801f2a4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801f2a8:	f003 0282 	and.w	r2, r3, #130	@ 0x82
 801f2ac:	2a82      	cmp	r2, #130	@ 0x82
 801f2ae:	d018      	beq.n	801f2e2 <state_set+0x1ce>
                if (!((sys_state & STATE_JOG) || sys.override.control.feed_hold_disable)) {
 801f2b0:	f015 0f20 	tst.w	r5, #32
 801f2b4:	d121      	bne.n	801f2fa <state_set+0x1e6>
 801f2b6:	f013 0f02 	tst.w	r3, #2
 801f2ba:	d11e      	bne.n	801f2fa <state_set+0x1e6>
                    if (!initiate_hold(new_state)) {
 801f2bc:	4620      	mov	r0, r4
 801f2be:	f7ff fe33 	bl	801ef28 <initiate_hold>
 801f2c2:	b930      	cbnz	r0, 801f2d2 <state_set+0x1be>
                        sys.holding_state = Hold_Complete;
 801f2c4:	4b22      	ldr	r3, [pc, #136]	@ (801f350 <state_set+0x23c>)
 801f2c6:	2201      	movs	r2, #1
 801f2c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                        stateHandler = state_await_resume;
 801f2cc:	4b1d      	ldr	r3, [pc, #116]	@ (801f344 <state_set+0x230>)
 801f2ce:	4a27      	ldr	r2, [pc, #156]	@ (801f36c <state_set+0x258>)
 801f2d0:	601a      	str	r2, [r3, #0]
                    sys_state = new_state;
 801f2d2:	4b1b      	ldr	r3, [pc, #108]	@ (801f340 <state_set+0x22c>)
 801f2d4:	601c      	str	r4, [r3, #0]
                    sys.flags.feed_hold_pending = Off;
 801f2d6:	4b1e      	ldr	r3, [pc, #120]	@ (801f350 <state_set+0x23c>)
 801f2d8:	7d9a      	ldrb	r2, [r3, #22]
 801f2da:	f36f 1245 	bfc	r2, #5, #1
 801f2de:	759a      	strb	r2, [r3, #22]
 801f2e0:	e00b      	b.n	801f2fa <state_set+0x1e6>
                    sys.flags.feed_hold_pending = On;
 801f2e2:	491b      	ldr	r1, [pc, #108]	@ (801f350 <state_set+0x23c>)
 801f2e4:	7d8a      	ldrb	r2, [r1, #22]
 801f2e6:	f042 0220 	orr.w	r2, r2, #32
 801f2ea:	758a      	strb	r2, [r1, #22]
 801f2ec:	e7e0      	b.n	801f2b0 <state_set+0x19c>
                    sys_state = new_state;
 801f2ee:	4b14      	ldr	r3, [pc, #80]	@ (801f340 <state_set+0x22c>)
 801f2f0:	601c      	str	r4, [r3, #0]
                if(sys_state == STATE_SLEEP && stateHandler != state_await_waypoint_retract)
 801f2f2:	4b13      	ldr	r3, [pc, #76]	@ (801f340 <state_set+0x22c>)
 801f2f4:	681b      	ldr	r3, [r3, #0]
 801f2f6:	2b80      	cmp	r3, #128	@ 0x80
 801f2f8:	d010      	beq.n	801f31c <state_set+0x208>
        if(!(sys_state & (STATE_ALARM|STATE_ESTOP)))
 801f2fa:	4b11      	ldr	r3, [pc, #68]	@ (801f340 <state_set+0x22c>)
 801f2fc:	6818      	ldr	r0, [r3, #0]
 801f2fe:	f240 1301 	movw	r3, #257	@ 0x101
 801f302:	4218      	tst	r0, r3
 801f304:	d103      	bne.n	801f30e <state_set+0x1fa>
            sys.alarm = Alarm_None;
 801f306:	4b12      	ldr	r3, [pc, #72]	@ (801f350 <state_set+0x23c>)
 801f308:	2200      	movs	r2, #0
 801f30a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        if(sys_state != org_state && grbl.on_state_change)
 801f30e:	4285      	cmp	r5, r0
 801f310:	d003      	beq.n	801f31a <state_set+0x206>
 801f312:	4b0e      	ldr	r3, [pc, #56]	@ (801f34c <state_set+0x238>)
 801f314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f316:	b103      	cbz	r3, 801f31a <state_set+0x206>
            grbl.on_state_change(sys_state);
 801f318:	4798      	blx	r3
}
 801f31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(sys_state == STATE_SLEEP && stateHandler != state_await_waypoint_retract)
 801f31c:	4b09      	ldr	r3, [pc, #36]	@ (801f344 <state_set+0x230>)
 801f31e:	681a      	ldr	r2, [r3, #0]
 801f320:	4b13      	ldr	r3, [pc, #76]	@ (801f370 <state_set+0x25c>)
 801f322:	429a      	cmp	r2, r3
 801f324:	d0e9      	beq.n	801f2fa <state_set+0x1e6>
                    enter_sleep();
 801f326:	f7ff feb5 	bl	801f094 <enter_sleep>
 801f32a:	e7e6      	b.n	801f2fa <state_set+0x1e6>
                sys_state = new_state;
 801f32c:	4b04      	ldr	r3, [pc, #16]	@ (801f340 <state_set+0x22c>)
 801f32e:	601c      	str	r4, [r3, #0]
                sys.suspend = false;
 801f330:	4b07      	ldr	r3, [pc, #28]	@ (801f350 <state_set+0x23c>)
 801f332:	2200      	movs	r2, #0
 801f334:	709a      	strb	r2, [r3, #2]
                stateHandler = state_noop;
 801f336:	4b03      	ldr	r3, [pc, #12]	@ (801f344 <state_set+0x230>)
 801f338:	4a0e      	ldr	r2, [pc, #56]	@ (801f374 <state_set+0x260>)
 801f33a:	601a      	str	r2, [r3, #0]
                break;
 801f33c:	e7dd      	b.n	801f2fa <state_set+0x1e6>
 801f33e:	bf00      	nop
 801f340:	20002574 	.word	0x20002574
 801f344:	2000043c 	.word	0x2000043c
 801f348:	0801f675 	.word	0x0801f675
 801f34c:	20001ac4 	.word	0x20001ac4
 801f350:	20001bbc 	.word	0x20001bbc
 801f354:	20002578 	.word	0x20002578
 801f358:	2000252c 	.word	0x2000252c
 801f35c:	0801f379 	.word	0x0801f379
 801f360:	200018dc 	.word	0x200018dc
 801f364:	20001c04 	.word	0x20001c04
 801f368:	0801f6e9 	.word	0x0801f6e9
 801f36c:	0801f3f1 	.word	0x0801f3f1
 801f370:	0801ec8d 	.word	0x0801ec8d
 801f374:	0801ec49 	.word	0x0801ec49

0801f378 <state_idle>:
{
 801f378:	b510      	push	{r4, lr}
 801f37a:	4604      	mov	r4, r0
    if ((rt_exec & EXEC_CYCLE_START))
 801f37c:	f010 0f02 	tst.w	r0, #2
 801f380:	d112      	bne.n	801f3a8 <state_idle+0x30>
    if (rt_exec & EXEC_FEED_HOLD)
 801f382:	f014 0f08 	tst.w	r4, #8
 801f386:	d113      	bne.n	801f3b0 <state_idle+0x38>
    if ((rt_exec & EXEC_TOOL_CHANGE)) {
 801f388:	f414 7f00 	tst.w	r4, #512	@ 0x200
 801f38c:	d008      	beq.n	801f3a0 <state_idle+0x28>
        hal.stream.suspend_read(true); // Block reading from input stream until tool change state is acknowledged
 801f38e:	4b0c      	ldr	r3, [pc, #48]	@ (801f3c0 <state_idle+0x48>)
 801f390:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801f394:	2001      	movs	r0, #1
 801f396:	4798      	blx	r3
        state_set(STATE_TOOL_CHANGE);
 801f398:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801f39c:	f7ff feba 	bl	801f114 <state_set>
    if (rt_exec & EXEC_SLEEP)
 801f3a0:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801f3a4:	d108      	bne.n	801f3b8 <state_idle+0x40>
}
 801f3a6:	bd10      	pop	{r4, pc}
        state_set(STATE_CYCLE);
 801f3a8:	2008      	movs	r0, #8
 801f3aa:	f7ff feb3 	bl	801f114 <state_set>
 801f3ae:	e7e8      	b.n	801f382 <state_idle+0xa>
        state_set(STATE_HOLD);
 801f3b0:	2010      	movs	r0, #16
 801f3b2:	f7ff feaf 	bl	801f114 <state_set>
 801f3b6:	e7e7      	b.n	801f388 <state_idle+0x10>
        state_set(STATE_SLEEP);
 801f3b8:	2080      	movs	r0, #128	@ 0x80
 801f3ba:	f7ff feab 	bl	801f114 <state_set>
}
 801f3be:	e7f2      	b.n	801f3a6 <state_idle+0x2e>
 801f3c0:	200018dc 	.word	0x200018dc

0801f3c4 <state_update>:
{
 801f3c4:	b510      	push	{r4, lr}
 801f3c6:	4604      	mov	r4, r0
    if((rt_exec & EXEC_SAFETY_DOOR) && sys_state != STATE_SAFETY_DOOR)
 801f3c8:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801f3cc:	d003      	beq.n	801f3d6 <state_update+0x12>
 801f3ce:	4b06      	ldr	r3, [pc, #24]	@ (801f3e8 <state_update+0x24>)
 801f3d0:	681b      	ldr	r3, [r3, #0]
 801f3d2:	2b40      	cmp	r3, #64	@ 0x40
 801f3d4:	d104      	bne.n	801f3e0 <state_update+0x1c>
    stateHandler(rt_exec);
 801f3d6:	4b05      	ldr	r3, [pc, #20]	@ (801f3ec <state_update+0x28>)
 801f3d8:	681b      	ldr	r3, [r3, #0]
 801f3da:	4620      	mov	r0, r4
 801f3dc:	4798      	blx	r3
}
 801f3de:	bd10      	pop	{r4, pc}
        state_set(STATE_SAFETY_DOOR);
 801f3e0:	2040      	movs	r0, #64	@ 0x40
 801f3e2:	f7ff fe97 	bl	801f114 <state_set>
 801f3e6:	e7f6      	b.n	801f3d6 <state_update+0x12>
 801f3e8:	20002574 	.word	0x20002574
 801f3ec:	2000043c 	.word	0x2000043c

0801f3f0 <state_await_resume>:
{
 801f3f0:	b530      	push	{r4, r5, lr}
 801f3f2:	b085      	sub	sp, #20
 801f3f4:	4604      	mov	r4, r0
    if ((rt_exec & EXEC_CYCLE_COMPLETE) && settings.parking.flags.enabled) {
 801f3f6:	f010 0f04 	tst.w	r0, #4
 801f3fa:	d016      	beq.n	801f42a <state_await_resume+0x3a>
 801f3fc:	4b82      	ldr	r3, [pc, #520]	@ (801f608 <state_await_resume+0x218>)
 801f3fe:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801f402:	f013 0f01 	tst.w	r3, #1
 801f406:	d010      	beq.n	801f42a <state_await_resume+0x3a>
        if (sys.step_control.execute_sys_motion) {
 801f408:	4b80      	ldr	r3, [pc, #512]	@ (801f60c <state_await_resume+0x21c>)
 801f40a:	7e1b      	ldrb	r3, [r3, #24]
 801f40c:	f013 0f04 	tst.w	r3, #4
 801f410:	d11b      	bne.n	801f44a <state_await_resume+0x5a>
        sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801f412:	4b7f      	ldr	r3, [pc, #508]	@ (801f610 <state_await_resume+0x220>)
 801f414:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f416:	4798      	blx	r3
 801f418:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801f41c:	4b7b      	ldr	r3, [pc, #492]	@ (801f60c <state_await_resume+0x21c>)
 801f41e:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
        if(sys_state == STATE_SLEEP) {
 801f422:	4b7c      	ldr	r3, [pc, #496]	@ (801f614 <state_await_resume+0x224>)
 801f424:	681b      	ldr	r3, [r3, #0]
 801f426:	2b80      	cmp	r3, #128	@ 0x80
 801f428:	d017      	beq.n	801f45a <state_await_resume+0x6a>
    if (rt_exec & EXEC_SLEEP)
 801f42a:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801f42e:	d117      	bne.n	801f460 <state_await_resume+0x70>
    if (rt_exec & EXEC_SAFETY_DOOR)
 801f430:	f014 0f40 	tst.w	r4, #64	@ 0x40
 801f434:	d018      	beq.n	801f468 <state_await_resume+0x78>
        sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801f436:	4b76      	ldr	r3, [pc, #472]	@ (801f610 <state_await_resume+0x220>)
 801f438:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f43a:	4798      	blx	r3
 801f43c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801f440:	4b72      	ldr	r3, [pc, #456]	@ (801f60c <state_await_resume+0x21c>)
 801f442:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
}
 801f446:	b005      	add	sp, #20
 801f448:	bd30      	pop	{r4, r5, pc}
            sys.step_control.execute_sys_motion = Off;
 801f44a:	4b70      	ldr	r3, [pc, #448]	@ (801f60c <state_await_resume+0x21c>)
 801f44c:	7e1a      	ldrb	r2, [r3, #24]
 801f44e:	f36f 0282 	bfc	r2, #2, #1
 801f452:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801f454:	f000 fe20 	bl	8020098 <st_parking_restore_buffer>
 801f458:	e7db      	b.n	801f412 <state_await_resume+0x22>
            enter_sleep();
 801f45a:	f7ff fe1b 	bl	801f094 <enter_sleep>
            return;
 801f45e:	e7f2      	b.n	801f446 <state_await_resume+0x56>
        state_set(STATE_SLEEP);
 801f460:	2080      	movs	r0, #128	@ 0x80
 801f462:	f7ff fe57 	bl	801f114 <state_set>
 801f466:	e7e3      	b.n	801f430 <state_await_resume+0x40>
    else if (rt_exec & EXEC_CYCLE_START) {
 801f468:	f014 0f02 	tst.w	r4, #2
 801f46c:	f000 80bb 	beq.w	801f5e6 <state_await_resume+0x1f6>
        if (sys_state == STATE_HOLD && !sys.override.spindle_stop.value)
 801f470:	4b68      	ldr	r3, [pc, #416]	@ (801f614 <state_await_resume+0x224>)
 801f472:	681b      	ldr	r3, [r3, #0]
 801f474:	2b10      	cmp	r3, #16
 801f476:	d01b      	beq.n	801f4b0 <state_await_resume+0xc0>
        switch (sys_state) {
 801f478:	2b80      	cmp	r3, #128	@ 0x80
 801f47a:	d053      	beq.n	801f524 <state_await_resume+0x134>
 801f47c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f480:	d050      	beq.n	801f524 <state_await_resume+0x134>
 801f482:	2b40      	cmp	r3, #64	@ 0x40
 801f484:	d01f      	beq.n	801f4c6 <state_await_resume+0xd6>
                if (!settings.flags.restore_after_feed_hold) {
 801f486:	4b60      	ldr	r3, [pc, #384]	@ (801f608 <state_await_resume+0x218>)
 801f488:	f993 30fe 	ldrsb.w	r3, [r3, #254]	@ 0xfe
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	db74      	blt.n	801f57a <state_await_resume+0x18a>
                    if (!restore_condition.spindle[restore_condition.spindle_num].hal->get_state(restore_condition.spindle[restore_condition.spindle_num].hal).on)
 801f490:	4b61      	ldr	r3, [pc, #388]	@ (801f618 <state_await_resume+0x228>)
 801f492:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801f496:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801f49a:	6918      	ldr	r0, [r3, #16]
 801f49c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801f49e:	4798      	blx	r3
 801f4a0:	f010 0f01 	tst.w	r0, #1
 801f4a4:	d066      	beq.n	801f574 <state_await_resume+0x184>
                    sys.override.spindle_stop.value = 0; // Clear spindle stop override states
 801f4a6:	4b59      	ldr	r3, [pc, #356]	@ (801f60c <state_await_resume+0x21c>)
 801f4a8:	2200      	movs	r2, #0
 801f4aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 801f4ae:	e039      	b.n	801f524 <state_await_resume+0x134>
        if (sys_state == STATE_HOLD && !sys.override.spindle_stop.value)
 801f4b0:	4a56      	ldr	r2, [pc, #344]	@ (801f60c <state_await_resume+0x21c>)
 801f4b2:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 801f4b6:	2a00      	cmp	r2, #0
 801f4b8:	d1de      	bne.n	801f478 <state_await_resume+0x88>
            sys.override.spindle_stop.restore_cycle = On;
 801f4ba:	4954      	ldr	r1, [pc, #336]	@ (801f60c <state_await_resume+0x21c>)
 801f4bc:	f042 0208 	orr.w	r2, r2, #8
 801f4c0:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
 801f4c4:	e7d8      	b.n	801f478 <state_await_resume+0x88>
                if (park.flags.restart || !hal.control.get_state().safety_door_ajar) {
 801f4c6:	4b55      	ldr	r3, [pc, #340]	@ (801f61c <state_await_resume+0x22c>)
 801f4c8:	7f1b      	ldrb	r3, [r3, #28]
 801f4ca:	f013 0f04 	tst.w	r3, #4
 801f4ce:	d105      	bne.n	801f4dc <state_await_resume+0xec>
 801f4d0:	4b4f      	ldr	r3, [pc, #316]	@ (801f610 <state_await_resume+0x220>)
 801f4d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f4d4:	4798      	blx	r3
 801f4d6:	f010 0f08 	tst.w	r0, #8
 801f4da:	d123      	bne.n	801f524 <state_await_resume+0x134>
                    stateHandler = state_restore;
 801f4dc:	4b50      	ldr	r3, [pc, #320]	@ (801f620 <state_await_resume+0x230>)
 801f4de:	4a51      	ldr	r2, [pc, #324]	@ (801f624 <state_await_resume+0x234>)
 801f4e0:	601a      	str	r2, [r3, #0]
                    sys.parking_state = Parking_Resuming;
 801f4e2:	4b4a      	ldr	r3, [pc, #296]	@ (801f60c <state_await_resume+0x21c>)
 801f4e4:	2204      	movs	r2, #4
 801f4e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                    if (park.flags.motion) {
 801f4ea:	4b4c      	ldr	r3, [pc, #304]	@ (801f61c <state_await_resume+0x22c>)
 801f4ec:	7f1b      	ldrb	r3, [r3, #28]
 801f4ee:	f013 0f02 	tst.w	r3, #2
 801f4f2:	d013      	beq.n	801f51c <state_await_resume+0x12c>
                        park.flags.restart = Off;
 801f4f4:	4b49      	ldr	r3, [pc, #292]	@ (801f61c <state_await_resume+0x22c>)
 801f4f6:	7f1a      	ldrb	r2, [r3, #28]
 801f4f8:	f36f 0282 	bfc	r2, #2, #1
 801f4fc:	771a      	strb	r2, [r3, #28]
                        if (park.restore_target[settings.parking.axis] <= settings.parking.target) {
 801f4fe:	4a42      	ldr	r2, [pc, #264]	@ (801f608 <state_await_resume+0x218>)
 801f500:	f892 4129 	ldrb.w	r4, [r2, #297]	@ 0x129
 801f504:	1ca1      	adds	r1, r4, #2
 801f506:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801f50a:	ed93 7a01 	vldr	s14, [r3, #4]
 801f50e:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 801f512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f51a:	d912      	bls.n	801f542 <state_await_resume+0x152>
                        stateHandler(EXEC_CYCLE_COMPLETE);
 801f51c:	4b40      	ldr	r3, [pc, #256]	@ (801f620 <state_await_resume+0x230>)
 801f51e:	681b      	ldr	r3, [r3, #0]
 801f520:	2004      	movs	r0, #4
 801f522:	4798      	blx	r3
        if (!(sys_state & (STATE_SLEEP|STATE_SAFETY_DOOR))) {
 801f524:	4b3b      	ldr	r3, [pc, #236]	@ (801f614 <state_await_resume+0x224>)
 801f526:	681b      	ldr	r3, [r3, #0]
 801f528:	f013 0fc0 	tst.w	r3, #192	@ 0xc0
 801f52c:	d18b      	bne.n	801f446 <state_await_resume+0x56>
            step_control_t step_control = sys.step_control;
 801f52e:	4c37      	ldr	r4, [pc, #220]	@ (801f60c <state_await_resume+0x21c>)
 801f530:	7e25      	ldrb	r5, [r4, #24]
            state_set(STATE_IDLE);
 801f532:	2000      	movs	r0, #0
 801f534:	f7ff fdee 	bl	801f114 <state_set>
            sys.step_control = step_control;
 801f538:	7625      	strb	r5, [r4, #24]
            state_set(STATE_CYCLE);
 801f53a:	2008      	movs	r0, #8
 801f53c:	f7ff fdea 	bl	801f114 <state_set>
 801f540:	e781      	b.n	801f446 <state_await_resume+0x56>
                            memcpy(target, park.restore_target, sizeof(target));
 801f542:	4b36      	ldr	r3, [pc, #216]	@ (801f61c <state_await_resume+0x22c>)
 801f544:	ad01      	add	r5, sp, #4
 801f546:	f103 020c 	add.w	r2, r3, #12
 801f54a:	ca07      	ldmia	r2, {r0, r1, r2}
 801f54c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                            target[settings.parking.axis] = park.retract_waypoint;
 801f550:	699a      	ldr	r2, [r3, #24]
 801f552:	a904      	add	r1, sp, #16
 801f554:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801f558:	f844 2c0c 	str.w	r2, [r4, #-12]
                            park.plan_data.feed_rate = settings.parking.rate;
 801f55c:	4a2a      	ldr	r2, [pc, #168]	@ (801f608 <state_await_resume+0x218>)
 801f55e:	f8d2 2130 	ldr.w	r2, [r2, #304]	@ 0x130
 801f562:	4619      	mov	r1, r3
 801f564:	f841 2f20 	str.w	r2, [r1, #32]!
                            await_motion = mc_parking_motion(target, &park.plan_data);
 801f568:	4628      	mov	r0, r5
 801f56a:	f7f5 fc6d 	bl	8014e48 <mc_parking_motion>
                    if (!await_motion) // No motion, proceed to next step immediately.
 801f56e:	2800      	cmp	r0, #0
 801f570:	d1d8      	bne.n	801f524 <state_await_resume+0x134>
 801f572:	e7d3      	b.n	801f51c <state_await_resume+0x12c>
                        gc_spindle_off();
 801f574:	f7ee f926 	bl	800d7c4 <gc_spindle_off>
 801f578:	e795      	b.n	801f4a6 <state_await_resume+0xb6>
                    if (restore_condition.spindle[restore_condition.spindle_num].state.on != restore_condition.spindle[restore_condition.spindle_num].hal->get_state(restore_condition.spindle[restore_condition.spindle_num].hal).on) {
 801f57a:	4b27      	ldr	r3, [pc, #156]	@ (801f618 <state_await_resume+0x228>)
 801f57c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801f580:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801f584:	7a1c      	ldrb	r4, [r3, #8]
 801f586:	f004 0401 	and.w	r4, r4, #1
 801f58a:	6918      	ldr	r0, [r3, #16]
 801f58c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801f58e:	4798      	blx	r3
 801f590:	f000 0001 	and.w	r0, r0, #1
 801f594:	4284      	cmp	r4, r0
 801f596:	d00b      	beq.n	801f5b0 <state_await_resume+0x1c0>
                        grbl.report.feedback_message(Message_SpindleRestore);
 801f598:	4b23      	ldr	r3, [pc, #140]	@ (801f628 <state_await_resume+0x238>)
 801f59a:	68db      	ldr	r3, [r3, #12]
 801f59c:	200a      	movs	r0, #10
 801f59e:	4798      	blx	r3
                        state_spindle_restore(&restore_condition.spindle[restore_condition.spindle_num]);
 801f5a0:	481d      	ldr	r0, [pc, #116]	@ (801f618 <state_await_resume+0x228>)
 801f5a2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801f5a6:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 801f5aa:	3004      	adds	r0, #4
 801f5ac:	f7ff fc0e 	bl	801edcc <state_spindle_restore>
                    if (restore_condition.coolant.value != hal.coolant.get_state().value) {
 801f5b0:	4b19      	ldr	r3, [pc, #100]	@ (801f618 <state_await_resume+0x228>)
 801f5b2:	781c      	ldrb	r4, [r3, #0]
 801f5b4:	4b16      	ldr	r3, [pc, #88]	@ (801f610 <state_await_resume+0x220>)
 801f5b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f5b8:	4798      	blx	r3
 801f5ba:	b2c0      	uxtb	r0, r0
 801f5bc:	4284      	cmp	r4, r0
 801f5be:	d107      	bne.n	801f5d0 <state_await_resume+0x1e0>
                    sys.override.spindle_stop.value = 0; // Clear spindle stop override states
 801f5c0:	2000      	movs	r0, #0
 801f5c2:	4b12      	ldr	r3, [pc, #72]	@ (801f60c <state_await_resume+0x21c>)
 801f5c4:	f883 0028 	strb.w	r0, [r3, #40]	@ 0x28
                    grbl.report.feedback_message(Message_None);
 801f5c8:	4b17      	ldr	r3, [pc, #92]	@ (801f628 <state_await_resume+0x238>)
 801f5ca:	68db      	ldr	r3, [r3, #12]
 801f5cc:	4798      	blx	r3
 801f5ce:	e7a9      	b.n	801f524 <state_await_resume+0x134>
                        gc_coolant(restore_condition.coolant);
 801f5d0:	4b11      	ldr	r3, [pc, #68]	@ (801f618 <state_await_resume+0x228>)
 801f5d2:	7818      	ldrb	r0, [r3, #0]
 801f5d4:	f7ee f904 	bl	800d7e0 <gc_coolant>
                        delay_sec(settings.safety_door.coolant_on_delay, DelayMode_SysSuspend);
 801f5d8:	2001      	movs	r0, #1
 801f5da:	4b0b      	ldr	r3, [pc, #44]	@ (801f608 <state_await_resume+0x218>)
 801f5dc:	ed93 0a51 	vldr	s0, [r3, #324]	@ 0x144
 801f5e0:	f7f6 fc60 	bl	8015ea4 <delay_sec>
 801f5e4:	e7ec      	b.n	801f5c0 <state_await_resume+0x1d0>
    } else if ((rt_exec & EXEC_DOOR_CLOSED) && !hal.control.get_state().safety_door_ajar)
 801f5e6:	f414 4f80 	tst.w	r4, #16384	@ 0x4000
 801f5ea:	f43f af2c 	beq.w	801f446 <state_await_resume+0x56>
 801f5ee:	4b08      	ldr	r3, [pc, #32]	@ (801f610 <state_await_resume+0x220>)
 801f5f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f5f2:	4798      	blx	r3
 801f5f4:	f010 0f08 	tst.w	r0, #8
 801f5f8:	f47f af25 	bne.w	801f446 <state_await_resume+0x56>
        sys.parking_state = Parking_DoorClosed;
 801f5fc:	4b03      	ldr	r3, [pc, #12]	@ (801f60c <state_await_resume+0x21c>)
 801f5fe:	2200      	movs	r2, #0
 801f600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 801f604:	e71f      	b.n	801f446 <state_await_resume+0x56>
 801f606:	bf00      	nop
 801f608:	200022f4 	.word	0x200022f4
 801f60c:	20001bbc 	.word	0x20001bbc
 801f610:	200018dc 	.word	0x200018dc
 801f614:	20002574 	.word	0x20002574
 801f618:	2000257c 	.word	0x2000257c
 801f61c:	2000252c 	.word	0x2000252c
 801f620:	2000043c 	.word	0x2000043c
 801f624:	0801ee59 	.word	0x0801ee59
 801f628:	20001ac4 	.word	0x20001ac4

0801f62c <state_await_resumed>:

/*! /brief Waits until slow plunge motion is complete then restart the cycle.
Note: A safety door event during the motion will halt it and restart the retract sequence.
 */
static void state_await_resumed (uint_fast16_t rt_exec)
{
 801f62c:	b508      	push	{r3, lr}
    if (rt_exec & EXEC_SAFETY_DOOR)
 801f62e:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801f632:	d113      	bne.n	801f65c <state_await_resumed+0x30>
        restart_retract();

    else if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801f634:	f010 0f04 	tst.w	r0, #4
 801f638:	d00f      	beq.n	801f65a <state_await_resumed+0x2e>
        sys.parking_state = Parking_DoorClosed;
 801f63a:	4b0c      	ldr	r3, [pc, #48]	@ (801f66c <state_await_resumed+0x40>)
 801f63c:	2200      	movs	r2, #0
 801f63e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        park.flags.value = 0;
 801f642:	490b      	ldr	r1, [pc, #44]	@ (801f670 <state_await_resumed+0x44>)
 801f644:	770a      	strb	r2, [r1, #28]
        if (sys.step_control.execute_sys_motion) {
 801f646:	7e1b      	ldrb	r3, [r3, #24]
 801f648:	f013 0f04 	tst.w	r3, #4
 801f64c:	d109      	bne.n	801f662 <state_await_resumed+0x36>
            sys.step_control.flags = 0;
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
        }
        state_set(STATE_IDLE);
 801f64e:	2000      	movs	r0, #0
 801f650:	f7ff fd60 	bl	801f114 <state_set>
        state_set(STATE_CYCLE);
 801f654:	2008      	movs	r0, #8
 801f656:	f7ff fd5d 	bl	801f114 <state_set>
    }
}
 801f65a:	bd08      	pop	{r3, pc}
        restart_retract();
 801f65c:	f7ff fb86 	bl	801ed6c <restart_retract>
 801f660:	e7fb      	b.n	801f65a <state_await_resumed+0x2e>
            sys.step_control.flags = 0;
 801f662:	4b02      	ldr	r3, [pc, #8]	@ (801f66c <state_await_resumed+0x40>)
 801f664:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801f666:	f000 fd17 	bl	8020098 <st_parking_restore_buffer>
 801f66a:	e7f0      	b.n	801f64e <state_await_resumed+0x22>
 801f66c:	20001bbc 	.word	0x20001bbc
 801f670:	2000252c 	.word	0x2000252c

0801f674 <state_await_toolchanged>:
    if (rt_exec & EXEC_CYCLE_START) {
 801f674:	f010 0f02 	tst.w	r0, #2
 801f678:	d02b      	beq.n	801f6d2 <state_await_toolchanged+0x5e>
{
 801f67a:	b508      	push	{r3, lr}
        if (!gc_state.tool_change) {
 801f67c:	4b15      	ldr	r3, [pc, #84]	@ (801f6d4 <state_await_toolchanged+0x60>)
 801f67e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801f682:	b983      	cbnz	r3, 801f6a6 <state_await_toolchanged+0x32>
            if (hal.stream.suspend_read)
 801f684:	4b14      	ldr	r3, [pc, #80]	@ (801f6d8 <state_await_toolchanged+0x64>)
 801f686:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801f68a:	b10b      	cbz	r3, 801f690 <state_await_toolchanged+0x1c>
                hal.stream.suspend_read(false); // Tool change complete, restore "normal" stream input.
 801f68c:	2000      	movs	r0, #0
 801f68e:	4798      	blx	r3
            if(grbl.on_tool_changed)
 801f690:	4b12      	ldr	r3, [pc, #72]	@ (801f6dc <state_await_toolchanged+0x68>)
 801f692:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801f696:	b11b      	cbz	r3, 801f6a0 <state_await_toolchanged+0x2c>
                grbl.on_tool_changed(gc_state.tool);
 801f698:	4a0e      	ldr	r2, [pc, #56]	@ (801f6d4 <state_await_toolchanged+0x60>)
 801f69a:	f8d2 00d0 	ldr.w	r0, [r2, #208]	@ 0xd0
 801f69e:	4798      	blx	r3
            system_add_rt_report(Report_Tool);
 801f6a0:	2080      	movs	r0, #128	@ 0x80
 801f6a2:	f002 fd0d 	bl	80220c0 <system_add_rt_report>
        pending_state = gc_state.tool_change ? STATE_TOOL_CHANGE : STATE_IDLE;
 801f6a6:	4b0b      	ldr	r3, [pc, #44]	@ (801f6d4 <state_await_toolchanged+0x60>)
 801f6a8:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801f6ac:	b17b      	cbz	r3, 801f6ce <state_await_toolchanged+0x5a>
 801f6ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801f6b2:	4b0b      	ldr	r3, [pc, #44]	@ (801f6e0 <state_await_toolchanged+0x6c>)
 801f6b4:	601a      	str	r2, [r3, #0]
        state_set(STATE_IDLE);
 801f6b6:	2000      	movs	r0, #0
 801f6b8:	f7ff fd2c 	bl	801f114 <state_set>
        state_set(STATE_CYCLE);
 801f6bc:	2008      	movs	r0, #8
 801f6be:	f7ff fd29 	bl	801f114 <state_set>
        system_set_exec_state_flag(EXEC_STATUS_REPORT);
 801f6c2:	4b05      	ldr	r3, [pc, #20]	@ (801f6d8 <state_await_toolchanged+0x64>)
 801f6c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f6c6:	2101      	movs	r1, #1
 801f6c8:	4806      	ldr	r0, [pc, #24]	@ (801f6e4 <state_await_toolchanged+0x70>)
 801f6ca:	4798      	blx	r3
}
 801f6cc:	bd08      	pop	{r3, pc}
        pending_state = gc_state.tool_change ? STATE_TOOL_CHANGE : STATE_IDLE;
 801f6ce:	2200      	movs	r2, #0
 801f6d0:	e7ef      	b.n	801f6b2 <state_await_toolchanged+0x3e>
 801f6d2:	4770      	bx	lr
 801f6d4:	20001614 	.word	0x20001614
 801f6d8:	200018dc 	.word	0x200018dc
 801f6dc:	20001ac4 	.word	0x20001ac4
 801f6e0:	20002578 	.word	0x20002578
 801f6e4:	20001c04 	.word	0x20001c04

0801f6e8 <state_cycle>:
    if (rt_exec == EXEC_CYCLE_START)
 801f6e8:	2802      	cmp	r0, #2
 801f6ea:	d02e      	beq.n	801f74a <state_cycle+0x62>
{
 801f6ec:	b510      	push	{r4, lr}
 801f6ee:	4604      	mov	r4, r0
    if ((rt_exec & EXEC_TOOL_CHANGE))
 801f6f0:	f410 7f00 	tst.w	r0, #512	@ 0x200
 801f6f4:	d004      	beq.n	801f700 <state_cycle+0x18>
        hal.stream.suspend_read(true); // Block reading from input stream until tool change state is acknowledged
 801f6f6:	4b15      	ldr	r3, [pc, #84]	@ (801f74c <state_cycle+0x64>)
 801f6f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801f6fc:	2001      	movs	r0, #1
 801f6fe:	4798      	blx	r3
    if (rt_exec & EXEC_CYCLE_COMPLETE)
 801f700:	f014 0f04 	tst.w	r4, #4
 801f704:	d007      	beq.n	801f716 <state_cycle+0x2e>
        state_set(gc_state.tool_change ? STATE_TOOL_CHANGE : STATE_IDLE);
 801f706:	4b12      	ldr	r3, [pc, #72]	@ (801f750 <state_cycle+0x68>)
 801f708:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801f70c:	b153      	cbz	r3, 801f724 <state_cycle+0x3c>
 801f70e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801f712:	f7ff fcff 	bl	801f114 <state_set>
    if (rt_exec & EXEC_MOTION_CANCEL) {
 801f716:	f014 0f80 	tst.w	r4, #128	@ 0x80
 801f71a:	d105      	bne.n	801f728 <state_cycle+0x40>
    if ((rt_exec & EXEC_FEED_HOLD))
 801f71c:	f014 0f08 	tst.w	r4, #8
 801f720:	d10f      	bne.n	801f742 <state_cycle+0x5a>
}
 801f722:	bd10      	pop	{r4, pc}
        state_set(gc_state.tool_change ? STATE_TOOL_CHANGE : STATE_IDLE);
 801f724:	2000      	movs	r0, #0
 801f726:	e7f4      	b.n	801f712 <state_cycle+0x2a>
        st_update_plan_block_parameters();  // Notify stepper module to recompute for hold deceleration.
 801f728:	f000 fc60 	bl	801ffec <st_update_plan_block_parameters>
        sys.suspend = true;
 801f72c:	4b09      	ldr	r3, [pc, #36]	@ (801f754 <state_cycle+0x6c>)
 801f72e:	2201      	movs	r2, #1
 801f730:	709a      	strb	r2, [r3, #2]
        sys.step_control.execute_hold = On; // Initiate suspend state with active flag.
 801f732:	7e1a      	ldrb	r2, [r3, #24]
 801f734:	f042 0202 	orr.w	r2, r2, #2
 801f738:	761a      	strb	r2, [r3, #24]
        stateHandler = state_await_motion_cancel;
 801f73a:	4b07      	ldr	r3, [pc, #28]	@ (801f758 <state_cycle+0x70>)
 801f73c:	4a07      	ldr	r2, [pc, #28]	@ (801f75c <state_cycle+0x74>)
 801f73e:	601a      	str	r2, [r3, #0]
 801f740:	e7ec      	b.n	801f71c <state_cycle+0x34>
        state_set(STATE_HOLD);
 801f742:	2010      	movs	r0, #16
 801f744:	f7ff fce6 	bl	801f114 <state_set>
 801f748:	e7eb      	b.n	801f722 <state_cycle+0x3a>
 801f74a:	4770      	bx	lr
 801f74c:	200018dc 	.word	0x200018dc
 801f750:	20001614 	.word	0x20001614
 801f754:	20001bbc 	.word	0x20001bbc
 801f758:	2000043c 	.word	0x2000043c
 801f75c:	0801f761 	.word	0x0801f761

0801f760 <state_await_motion_cancel>:
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801f760:	f010 0f04 	tst.w	r0, #4
 801f764:	d022      	beq.n	801f7ac <state_await_motion_cancel+0x4c>
{
 801f766:	b538      	push	{r3, r4, r5, lr}
        if (sys_state == STATE_JOG) {
 801f768:	4b11      	ldr	r3, [pc, #68]	@ (801f7b0 <state_await_motion_cancel+0x50>)
 801f76a:	681b      	ldr	r3, [r3, #0]
 801f76c:	2b20      	cmp	r3, #32
 801f76e:	d008      	beq.n	801f782 <state_await_motion_cancel+0x22>
        state_set(pending_state);
 801f770:	4b10      	ldr	r3, [pc, #64]	@ (801f7b4 <state_await_motion_cancel+0x54>)
 801f772:	6818      	ldr	r0, [r3, #0]
 801f774:	f7ff fcce 	bl	801f114 <state_set>
        if (gc_state.tool_change)
 801f778:	4b0f      	ldr	r3, [pc, #60]	@ (801f7b8 <state_await_motion_cancel+0x58>)
 801f77a:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801f77e:	b983      	cbnz	r3, 801f7a2 <state_await_motion_cancel+0x42>
}
 801f780:	bd38      	pop	{r3, r4, r5, pc}
            sys.step_control.flags = 0;
 801f782:	4c0e      	ldr	r4, [pc, #56]	@ (801f7bc <state_await_motion_cancel+0x5c>)
 801f784:	2500      	movs	r5, #0
 801f786:	7625      	strb	r5, [r4, #24]
            plan_reset();
 801f788:	f7f7 f8e6 	bl	8016958 <plan_reset>
            st_reset();
 801f78c:	f000 fba0 	bl	801fed0 <st_reset>
            sync_position();
 801f790:	f7f7 fc10 	bl	8016fb4 <plan_sync_position>
 801f794:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 801f798:	4809      	ldr	r0, [pc, #36]	@ (801f7c0 <state_await_motion_cancel+0x60>)
 801f79a:	f002 fbed 	bl	8021f78 <system_convert_array_steps_to_mpos>
            sys.suspend = false;
 801f79e:	70a5      	strb	r5, [r4, #2]
 801f7a0:	e7e6      	b.n	801f770 <state_await_motion_cancel+0x10>
            state_set(STATE_TOOL_CHANGE);
 801f7a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801f7a6:	f7ff fcb5 	bl	801f114 <state_set>
}
 801f7aa:	e7e9      	b.n	801f780 <state_await_motion_cancel+0x20>
 801f7ac:	4770      	bx	lr
 801f7ae:	bf00      	nop
 801f7b0:	20002574 	.word	0x20002574
 801f7b4:	20002578 	.word	0x20002578
 801f7b8:	20001614 	.word	0x20001614
 801f7bc:	20001bbc 	.word	0x20001bbc
 801f7c0:	2000167c 	.word	0x2000167c

0801f7c4 <state_await_hold>:
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801f7c4:	f010 0f04 	tst.w	r0, #4
 801f7c8:	d100      	bne.n	801f7cc <state_await_hold+0x8>
 801f7ca:	4770      	bx	lr
{
 801f7cc:	b510      	push	{r4, lr}
        plan_cycle_reinitialize();
 801f7ce:	f7f7 fc19 	bl	8017004 <plan_cycle_reinitialize>
        sys.step_control.flags = 0;
 801f7d2:	4b84      	ldr	r3, [pc, #528]	@ (801f9e4 <state_await_hold+0x220>)
 801f7d4:	2200      	movs	r2, #0
 801f7d6:	761a      	strb	r2, [r3, #24]
        if (sys.alarm_pending) {
 801f7d8:	7d19      	ldrb	r1, [r3, #20]
 801f7da:	b139      	cbz	r1, 801f7ec <state_await_hold+0x28>
            system_set_exec_alarm(sys.alarm_pending);
 801f7dc:	4b82      	ldr	r3, [pc, #520]	@ (801f9e8 <state_await_hold+0x224>)
 801f7de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f7e0:	4c82      	ldr	r4, [pc, #520]	@ (801f9ec <state_await_hold+0x228>)
 801f7e2:	4620      	mov	r0, r4
 801f7e4:	4798      	blx	r3
            sys.alarm_pending = Alarm_None;
 801f7e6:	2300      	movs	r3, #0
 801f7e8:	f804 3c38 	strb.w	r3, [r4, #-56]
        switch (sys_state) {
 801f7ec:	4b80      	ldr	r3, [pc, #512]	@ (801f9f0 <state_await_hold+0x22c>)
 801f7ee:	681b      	ldr	r3, [r3, #0]
 801f7f0:	2b80      	cmp	r3, #128	@ 0x80
 801f7f2:	d01a      	beq.n	801f82a <state_await_hold+0x66>
 801f7f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f7f8:	d00f      	beq.n	801f81a <state_await_hold+0x56>
 801f7fa:	2b40      	cmp	r3, #64	@ 0x40
 801f7fc:	d015      	beq.n	801f82a <state_await_hold+0x66>
            if(sys.flags.soft_limit)
 801f7fe:	4b79      	ldr	r3, [pc, #484]	@ (801f9e4 <state_await_hold+0x220>)
 801f800:	7d9b      	ldrb	r3, [r3, #22]
 801f802:	f013 0f04 	tst.w	r3, #4
 801f806:	f040 80e8 	bne.w	801f9da <state_await_hold+0x216>
                sys.holding_state = Hold_Complete;
 801f80a:	4b76      	ldr	r3, [pc, #472]	@ (801f9e4 <state_await_hold+0x220>)
 801f80c:	2201      	movs	r2, #1
 801f80e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                stateHandler = state_await_resume;
 801f812:	4b78      	ldr	r3, [pc, #480]	@ (801f9f4 <state_await_hold+0x230>)
 801f814:	4a78      	ldr	r2, [pc, #480]	@ (801f9f8 <state_await_hold+0x234>)
 801f816:	601a      	str	r2, [r3, #0]
}
 801f818:	bd10      	pop	{r4, pc}
                spindle_all_off(); // De-energize
 801f81a:	f7ff f9f1 	bl	801ec00 <spindle_all_off>
                hal.coolant.set_state((coolant_state_t){0}); // De-energize
 801f81e:	4b72      	ldr	r3, [pc, #456]	@ (801f9e8 <state_await_hold+0x224>)
 801f820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f822:	f04f 0000 	mov.w	r0, #0
 801f826:	4798      	blx	r3
        if (!handler_changed) {
 801f828:	e7e9      	b.n	801f7fe <state_await_hold+0x3a>
                sys.override.spindle_stop.value = 0;
 801f82a:	4b6e      	ldr	r3, [pc, #440]	@ (801f9e4 <state_await_hold+0x220>)
 801f82c:	2200      	movs	r2, #0
 801f82e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                if (settings.parking.flags.enabled && !sys.override.control.parking_disable && settings.mode != Mode_Laser) {
 801f832:	4b72      	ldr	r3, [pc, #456]	@ (801f9fc <state_await_hold+0x238>)
 801f834:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801f838:	f013 0f01 	tst.w	r3, #1
 801f83c:	f000 80b3 	beq.w	801f9a6 <state_await_hold+0x1e2>
 801f840:	4b68      	ldr	r3, [pc, #416]	@ (801f9e4 <state_await_hold+0x220>)
 801f842:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801f846:	f013 0f08 	tst.w	r3, #8
 801f84a:	f040 80ac 	bne.w	801f9a6 <state_await_hold+0x1e2>
 801f84e:	4b6b      	ldr	r3, [pc, #428]	@ (801f9fc <state_await_hold+0x238>)
 801f850:	7e1b      	ldrb	r3, [r3, #24]
 801f852:	2b01      	cmp	r3, #1
 801f854:	f000 80a7 	beq.w	801f9a6 <state_await_hold+0x1e2>
                    if (!park.flags.active) {
 801f858:	4b69      	ldr	r3, [pc, #420]	@ (801fa00 <state_await_hold+0x23c>)
 801f85a:	7f1b      	ldrb	r3, [r3, #28]
 801f85c:	f013 0f01 	tst.w	r3, #1
 801f860:	d05d      	beq.n	801f91e <state_await_hold+0x15a>
                    if (bit_istrue(sys.homed.mask, bit(settings.parking.axis)) && (park.restore_target[settings.parking.axis] < settings.parking.target)) {
 801f862:	4b60      	ldr	r3, [pc, #384]	@ (801f9e4 <state_await_hold+0x220>)
 801f864:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 801f868:	4a64      	ldr	r2, [pc, #400]	@ (801f9fc <state_await_hold+0x238>)
 801f86a:	f892 4129 	ldrb.w	r4, [r2, #297]	@ 0x129
 801f86e:	40e3      	lsrs	r3, r4
 801f870:	f013 0f01 	tst.w	r3, #1
 801f874:	d07d      	beq.n	801f972 <state_await_hold+0x1ae>
 801f876:	1ca2      	adds	r2, r4, #2
 801f878:	4b61      	ldr	r3, [pc, #388]	@ (801fa00 <state_await_hold+0x23c>)
 801f87a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801f87e:	ed93 7a01 	vldr	s14, [r3, #4]
 801f882:	4b5e      	ldr	r3, [pc, #376]	@ (801f9fc <state_await_hold+0x238>)
 801f884:	edd3 7a4b 	vldr	s15, [r3, #300]	@ 0x12c
 801f888:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f890:	d56f      	bpl.n	801f972 <state_await_hold+0x1ae>
                        stateHandler = state_await_waypoint_retract;
 801f892:	4b58      	ldr	r3, [pc, #352]	@ (801f9f4 <state_await_hold+0x230>)
 801f894:	4a5b      	ldr	r2, [pc, #364]	@ (801fa04 <state_await_hold+0x240>)
 801f896:	601a      	str	r2, [r3, #0]
                        if(park.flags.restart)
 801f898:	4b59      	ldr	r3, [pc, #356]	@ (801fa00 <state_await_hold+0x23c>)
 801f89a:	7f1b      	ldrb	r3, [r3, #28]
 801f89c:	f013 0f04 	tst.w	r3, #4
 801f8a0:	d147      	bne.n	801f932 <state_await_hold+0x16e>
                            memcpy(park.target, park.restore_target, sizeof(park.target));
 801f8a2:	4b57      	ldr	r3, [pc, #348]	@ (801fa00 <state_await_hold+0x23c>)
 801f8a4:	f103 020c 	add.w	r2, r3, #12
 801f8a8:	ca07      	ldmia	r2, {r0, r1, r2}
 801f8aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                            park.retract_waypoint = settings.parking.pullout_increment + park.target[settings.parking.axis];
 801f8ae:	4a53      	ldr	r2, [pc, #332]	@ (801f9fc <state_await_hold+0x238>)
 801f8b0:	ed92 7a4e 	vldr	s14, [r2, #312]	@ 0x138
 801f8b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f8b8:	edd4 6a00 	vldr	s13, [r4]
 801f8bc:	ee37 7a26 	vadd.f32	s14, s14, s13
 801f8c0:	ed83 7a06 	vstr	s14, [r3, #24]
                            park.retract_waypoint = min(park.retract_waypoint, settings.parking.target);
 801f8c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8cc:	dd01      	ble.n	801f8d2 <state_await_hold+0x10e>
 801f8ce:	eef0 7a47 	vmov.f32	s15, s14
 801f8d2:	4b4b      	ldr	r3, [pc, #300]	@ (801fa00 <state_await_hold+0x23c>)
 801f8d4:	edc3 7a06 	vstr	s15, [r3, #24]
                        if ((await_motion = park.target[settings.parking.axis] < park.retract_waypoint)) {
 801f8d8:	4b48      	ldr	r3, [pc, #288]	@ (801f9fc <state_await_hold+0x238>)
 801f8da:	f893 2129 	ldrb.w	r2, [r3, #297]	@ 0x129
 801f8de:	4b48      	ldr	r3, [pc, #288]	@ (801fa00 <state_await_hold+0x23c>)
 801f8e0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801f8e4:	ed91 7a00 	vldr	s14, [r1]
 801f8e8:	edd3 7a06 	vldr	s15, [r3, #24]
 801f8ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8f4:	bf4c      	ite	mi
 801f8f6:	2001      	movmi	r0, #1
 801f8f8:	2000      	movpl	r0, #0
 801f8fa:	d41f      	bmi.n	801f93c <state_await_hold+0x178>
                        if(!park.flags.restart)
 801f8fc:	4b40      	ldr	r3, [pc, #256]	@ (801fa00 <state_await_hold+0x23c>)
 801f8fe:	7f1b      	ldrb	r3, [r3, #28]
 801f900:	f013 0f04 	tst.w	r3, #4
 801f904:	d104      	bne.n	801f910 <state_await_hold+0x14c>
                            park.flags.motion = await_motion;
 801f906:	4a3e      	ldr	r2, [pc, #248]	@ (801fa00 <state_await_hold+0x23c>)
 801f908:	7f13      	ldrb	r3, [r2, #28]
 801f90a:	f360 0341 	bfi	r3, r0, #1, #1
 801f90e:	7713      	strb	r3, [r2, #28]
                        if (!await_motion)
 801f910:	2800      	cmp	r0, #0
 801f912:	d181      	bne.n	801f818 <state_await_hold+0x54>
                            stateHandler(EXEC_CYCLE_COMPLETE); // No motion, proceed to next step immediately.
 801f914:	4b37      	ldr	r3, [pc, #220]	@ (801f9f4 <state_await_hold+0x230>)
 801f916:	681b      	ldr	r3, [r3, #0]
 801f918:	2004      	movs	r0, #4
 801f91a:	4798      	blx	r3
        if (!handler_changed) {
 801f91c:	e77c      	b.n	801f818 <state_await_hold+0x54>
                        park.flags.active = On;
 801f91e:	4838      	ldr	r0, [pc, #224]	@ (801fa00 <state_await_hold+0x23c>)
 801f920:	7f03      	ldrb	r3, [r0, #28]
 801f922:	f043 0301 	orr.w	r3, r3, #1
 801f926:	7703      	strb	r3, [r0, #28]
                        system_convert_array_steps_to_mpos(park.restore_target, sys.position);
 801f928:	4937      	ldr	r1, [pc, #220]	@ (801fa08 <state_await_hold+0x244>)
 801f92a:	300c      	adds	r0, #12
 801f92c:	f002 fb24 	bl	8021f78 <system_convert_array_steps_to_mpos>
 801f930:	e797      	b.n	801f862 <state_await_hold+0x9e>
                            system_convert_array_steps_to_mpos(park.target, sys.position);
 801f932:	4935      	ldr	r1, [pc, #212]	@ (801fa08 <state_await_hold+0x244>)
 801f934:	4832      	ldr	r0, [pc, #200]	@ (801fa00 <state_await_hold+0x23c>)
 801f936:	f002 fb1f 	bl	8021f78 <system_convert_array_steps_to_mpos>
 801f93a:	e7cd      	b.n	801f8d8 <state_await_hold+0x114>
                            park.target[settings.parking.axis] = park.retract_waypoint;
 801f93c:	4618      	mov	r0, r3
 801f93e:	edc1 7a00 	vstr	s15, [r1]
                            park.plan_data.feed_rate = settings.parking.pullout_rate;
 801f942:	4b2e      	ldr	r3, [pc, #184]	@ (801f9fc <state_await_hold+0x238>)
 801f944:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801f948:	6203      	str	r3, [r0, #32]
                            park.plan_data.condition.coolant = restore_condition.coolant; // Retain coolant state
 801f94a:	4b30      	ldr	r3, [pc, #192]	@ (801fa0c <state_await_hold+0x248>)
 801f94c:	781a      	ldrb	r2, [r3, #0]
 801f94e:	f880 2036 	strb.w	r2, [r0, #54]	@ 0x36
                            park.plan_data.spindle.state = restore_condition.spindle[restore_condition.spindle_num].state; // Retain spindle state
 801f952:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801f956:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801f95a:	7a1a      	ldrb	r2, [r3, #8]
 801f95c:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
                            park.plan_data.spindle.hal = restore_condition.spindle[restore_condition.spindle_num].hal;
 801f960:	691a      	ldr	r2, [r3, #16]
 801f962:	6302      	str	r2, [r0, #48]	@ 0x30
                            park.plan_data.spindle.rpm = restore_condition.spindle[restore_condition.spindle_num].rpm;
 801f964:	685b      	ldr	r3, [r3, #4]
 801f966:	6243      	str	r3, [r0, #36]	@ 0x24
                            await_motion = mc_parking_motion(park.target, &park.plan_data);
 801f968:	f100 0120 	add.w	r1, r0, #32
 801f96c:	f7f5 fa6c 	bl	8014e48 <mc_parking_motion>
 801f970:	e7c4      	b.n	801f8fc <state_await_hold+0x138>
                        spindle_all_off(); // De-energize
 801f972:	f7ff f945 	bl	801ec00 <spindle_all_off>
                        if (!settings.safety_door.flags.keep_coolant_on || sys_state == STATE_SLEEP)
 801f976:	4b21      	ldr	r3, [pc, #132]	@ (801f9fc <state_await_hold+0x238>)
 801f978:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 801f97c:	f013 0f02 	tst.w	r3, #2
 801f980:	d003      	beq.n	801f98a <state_await_hold+0x1c6>
 801f982:	4b1b      	ldr	r3, [pc, #108]	@ (801f9f0 <state_await_hold+0x22c>)
 801f984:	681b      	ldr	r3, [r3, #0]
 801f986:	2b80      	cmp	r3, #128	@ 0x80
 801f988:	d104      	bne.n	801f994 <state_await_hold+0x1d0>
                            hal.coolant.set_state((coolant_state_t){0}); // De-energize
 801f98a:	4b17      	ldr	r3, [pc, #92]	@ (801f9e8 <state_await_hold+0x224>)
 801f98c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f98e:	f04f 0000 	mov.w	r0, #0
 801f992:	4798      	blx	r3
                        sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801f994:	4b14      	ldr	r3, [pc, #80]	@ (801f9e8 <state_await_hold+0x224>)
 801f996:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f998:	4798      	blx	r3
 801f99a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801f99e:	4b11      	ldr	r3, [pc, #68]	@ (801f9e4 <state_await_hold+0x220>)
 801f9a0:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
        if (!handler_changed) {
 801f9a4:	e72b      	b.n	801f7fe <state_await_hold+0x3a>
                    spindle_all_off(); // De-energize
 801f9a6:	f7ff f92b 	bl	801ec00 <spindle_all_off>
                    if (!settings.safety_door.flags.keep_coolant_on || sys_state == STATE_SLEEP)
 801f9aa:	4b14      	ldr	r3, [pc, #80]	@ (801f9fc <state_await_hold+0x238>)
 801f9ac:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 801f9b0:	f013 0f02 	tst.w	r3, #2
 801f9b4:	d003      	beq.n	801f9be <state_await_hold+0x1fa>
 801f9b6:	4b0e      	ldr	r3, [pc, #56]	@ (801f9f0 <state_await_hold+0x22c>)
 801f9b8:	681b      	ldr	r3, [r3, #0]
 801f9ba:	2b80      	cmp	r3, #128	@ 0x80
 801f9bc:	d104      	bne.n	801f9c8 <state_await_hold+0x204>
                        hal.coolant.set_state((coolant_state_t){0}); // De-energize
 801f9be:	4b0a      	ldr	r3, [pc, #40]	@ (801f9e8 <state_await_hold+0x224>)
 801f9c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f9c2:	f04f 0000 	mov.w	r0, #0
 801f9c6:	4798      	blx	r3
                    sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801f9c8:	4b07      	ldr	r3, [pc, #28]	@ (801f9e8 <state_await_hold+0x224>)
 801f9ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f9cc:	4798      	blx	r3
 801f9ce:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801f9d2:	4b04      	ldr	r3, [pc, #16]	@ (801f9e4 <state_await_hold+0x220>)
 801f9d4:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
        if (!handler_changed) {
 801f9d8:	e711      	b.n	801f7fe <state_await_hold+0x3a>
                state_set(STATE_IDLE);
 801f9da:	2000      	movs	r0, #0
 801f9dc:	f7ff fb9a 	bl	801f114 <state_set>
 801f9e0:	e71a      	b.n	801f818 <state_await_hold+0x54>
 801f9e2:	bf00      	nop
 801f9e4:	20001bbc 	.word	0x20001bbc
 801f9e8:	200018dc 	.word	0x200018dc
 801f9ec:	20001c08 	.word	0x20001c08
 801f9f0:	20002574 	.word	0x20002574
 801f9f4:	2000043c 	.word	0x2000043c
 801f9f8:	0801f3f1 	.word	0x0801f3f1
 801f9fc:	200022f4 	.word	0x200022f4
 801fa00:	2000252c 	.word	0x2000252c
 801fa04:	0801ec8d 	.word	0x0801ec8d
 801fa08:	20001c44 	.word	0x20001c44
 801fa0c:	2000257c 	.word	0x2000257c

0801fa10 <state_suspend_manager>:
    if (stateHandler != state_await_resume || !gc_state.modal.spindle.state.on)
 801fa10:	4b39      	ldr	r3, [pc, #228]	@ (801faf8 <state_suspend_manager+0xe8>)
 801fa12:	681a      	ldr	r2, [r3, #0]
 801fa14:	4b39      	ldr	r3, [pc, #228]	@ (801fafc <state_suspend_manager+0xec>)
 801fa16:	429a      	cmp	r2, r3
 801fa18:	d000      	beq.n	801fa1c <state_suspend_manager+0xc>
 801fa1a:	4770      	bx	lr
 801fa1c:	4b38      	ldr	r3, [pc, #224]	@ (801fb00 <state_suspend_manager+0xf0>)
 801fa1e:	7e9b      	ldrb	r3, [r3, #26]
 801fa20:	f013 0f01 	tst.w	r3, #1
 801fa24:	d0f9      	beq.n	801fa1a <state_suspend_manager+0xa>
{
 801fa26:	b510      	push	{r4, lr}
    if (sys.override.spindle_stop.value) {
 801fa28:	4b36      	ldr	r3, [pc, #216]	@ (801fb04 <state_suspend_manager+0xf4>)
 801fa2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801fa2e:	2b00      	cmp	r3, #0
 801fa30:	d047      	beq.n	801fac2 <state_suspend_manager+0xb2>
        if (sys.override.spindle_stop.initiate) {
 801fa32:	f013 0f02 	tst.w	r3, #2
 801fa36:	d122      	bne.n	801fa7e <state_suspend_manager+0x6e>
        if (sys.override.spindle_stop.restore) {
 801fa38:	4b32      	ldr	r3, [pc, #200]	@ (801fb04 <state_suspend_manager+0xf4>)
 801fa3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801fa3e:	f013 0f04 	tst.w	r3, #4
 801fa42:	d01b      	beq.n	801fa7c <state_suspend_manager+0x6c>
            grbl.report.feedback_message(Message_SpindleRestore);
 801fa44:	4b30      	ldr	r3, [pc, #192]	@ (801fb08 <state_suspend_manager+0xf8>)
 801fa46:	68db      	ldr	r3, [r3, #12]
 801fa48:	200a      	movs	r0, #10
 801fa4a:	4798      	blx	r3
            if (restore_condition.spindle[restore_condition.spindle_num].hal->cap.laser) // When in laser mode, ignore spindle spin-up delay. Set to turn on laser when cycle starts.
 801fa4c:	4b2f      	ldr	r3, [pc, #188]	@ (801fb0c <state_suspend_manager+0xfc>)
 801fa4e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801fa52:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801fa56:	691b      	ldr	r3, [r3, #16]
 801fa58:	7a9b      	ldrb	r3, [r3, #10]
 801fa5a:	f013 0f08 	tst.w	r3, #8
 801fa5e:	d029      	beq.n	801fab4 <state_suspend_manager+0xa4>
                sys.step_control.update_spindle_rpm = On;
 801fa60:	4a28      	ldr	r2, [pc, #160]	@ (801fb04 <state_suspend_manager+0xf4>)
 801fa62:	7e13      	ldrb	r3, [r2, #24]
 801fa64:	f043 0308 	orr.w	r3, r3, #8
 801fa68:	7613      	strb	r3, [r2, #24]
            sys.override.spindle_stop.value = 0; // Clear stop override state
 801fa6a:	4b26      	ldr	r3, [pc, #152]	@ (801fb04 <state_suspend_manager+0xf4>)
 801fa6c:	2200      	movs	r2, #0
 801fa6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            if(grbl.on_override_changed)
 801fa72:	4b25      	ldr	r3, [pc, #148]	@ (801fb08 <state_suspend_manager+0xf8>)
 801fa74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fa76:	b10b      	cbz	r3, 801fa7c <state_suspend_manager+0x6c>
                grbl.on_override_changed(OverrideChanged_SpindleState);
 801fa78:	4610      	mov	r0, r2
 801fa7a:	4798      	blx	r3
}
 801fa7c:	bd10      	pop	{r4, pc}
            sys.override.spindle_stop.value = 0; // Clear stop override state
 801fa7e:	4c21      	ldr	r4, [pc, #132]	@ (801fb04 <state_suspend_manager+0xf4>)
 801fa80:	2100      	movs	r1, #0
 801fa82:	f884 1028 	strb.w	r1, [r4, #40]	@ 0x28
            spindle_set_state(restore_condition.spindle[restore_condition.spindle_num].hal, (spindle_state_t){0}, 0.0f); // De-energize
 801fa86:	4b21      	ldr	r3, [pc, #132]	@ (801fb0c <state_suspend_manager+0xfc>)
 801fa88:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801fa8c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801fa90:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 801fb10 <state_suspend_manager+0x100>
 801fa94:	6918      	ldr	r0, [r3, #16]
 801fa96:	f7fe ffa1 	bl	801e9dc <spindle_set_state>
            sys.override.spindle_stop.enabled = On; // Set stop override state to enabled, if de-energized.
 801fa9a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801fa9e:	f043 0301 	orr.w	r3, r3, #1
 801faa2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
            if(grbl.on_override_changed)
 801faa6:	4b18      	ldr	r3, [pc, #96]	@ (801fb08 <state_suspend_manager+0xf8>)
 801faa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801faaa:	2b00      	cmp	r3, #0
 801faac:	d0c4      	beq.n	801fa38 <state_suspend_manager+0x28>
                grbl.on_override_changed(OverrideChanged_SpindleState);
 801faae:	2000      	movs	r0, #0
 801fab0:	4798      	blx	r3
 801fab2:	e7c1      	b.n	801fa38 <state_suspend_manager+0x28>
                state_spindle_set_state(&restore_condition.spindle[restore_condition.spindle_num]);
 801fab4:	4815      	ldr	r0, [pc, #84]	@ (801fb0c <state_suspend_manager+0xfc>)
 801fab6:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801faba:	3004      	adds	r0, #4
 801fabc:	f7ff fb04 	bl	801f0c8 <state_spindle_set_state>
 801fac0:	e7d3      	b.n	801fa6a <state_suspend_manager+0x5a>
    } else if (sys.step_control.update_spindle_rpm && restore_condition.spindle[0].hal->get_state(restore_condition.spindle[0].hal).on) {
 801fac2:	4b10      	ldr	r3, [pc, #64]	@ (801fb04 <state_suspend_manager+0xf4>)
 801fac4:	7e1b      	ldrb	r3, [r3, #24]
 801fac6:	f013 0f08 	tst.w	r3, #8
 801faca:	d0d7      	beq.n	801fa7c <state_suspend_manager+0x6c>
 801facc:	4b0f      	ldr	r3, [pc, #60]	@ (801fb0c <state_suspend_manager+0xfc>)
 801face:	6918      	ldr	r0, [r3, #16]
 801fad0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801fad2:	4798      	blx	r3
 801fad4:	f010 0f01 	tst.w	r0, #1
 801fad8:	d0d0      	beq.n	801fa7c <state_suspend_manager+0x6c>
        state_spindle_set_state(&restore_condition.spindle[restore_condition.spindle_num]);
 801fada:	480c      	ldr	r0, [pc, #48]	@ (801fb0c <state_suspend_manager+0xfc>)
 801fadc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801fae0:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 801fae4:	3004      	adds	r0, #4
 801fae6:	f7ff faef 	bl	801f0c8 <state_spindle_set_state>
        sys.step_control.update_spindle_rpm = Off;
 801faea:	4b06      	ldr	r3, [pc, #24]	@ (801fb04 <state_suspend_manager+0xf4>)
 801faec:	7e1a      	ldrb	r2, [r3, #24]
 801faee:	f36f 02c3 	bfc	r2, #3, #1
 801faf2:	761a      	strb	r2, [r3, #24]
 801faf4:	e7c2      	b.n	801fa7c <state_suspend_manager+0x6c>
 801faf6:	bf00      	nop
 801faf8:	2000043c 	.word	0x2000043c
 801fafc:	0801f3f1 	.word	0x0801f3f1
 801fb00:	20001614 	.word	0x20001614
 801fb04:	20001bbc 	.word	0x20001bbc
 801fb08:	20001ac4 	.word	0x20001ac4
 801fb0c:	2000257c 	.word	0x2000257c
 801fb10:	00000000 	.word	0x00000000

0801fb14 <st_deenergize>:

//

// Callback from delay to deenergize steppers after movement, might been cancelled
void st_deenergize (void *data)
{
 801fb14:	b508      	push	{r3, lr}
    if(sys.steppers_deenergize) {
 801fb16:	4b07      	ldr	r3, [pc, #28]	@ (801fb34 <st_deenergize+0x20>)
 801fb18:	799b      	ldrb	r3, [r3, #6]
 801fb1a:	b14b      	cbz	r3, 801fb30 <st_deenergize+0x1c>
        hal.stepper.enable(settings.steppers.deenergize);
 801fb1c:	4b06      	ldr	r3, [pc, #24]	@ (801fb38 <st_deenergize+0x24>)
 801fb1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801fb22:	4a06      	ldr	r2, [pc, #24]	@ (801fb3c <st_deenergize+0x28>)
 801fb24:	f892 00ec 	ldrb.w	r0, [r2, #236]	@ 0xec
 801fb28:	4798      	blx	r3
        sys.steppers_deenergize = false;
 801fb2a:	4b02      	ldr	r3, [pc, #8]	@ (801fb34 <st_deenergize+0x20>)
 801fb2c:	2200      	movs	r2, #0
 801fb2e:	719a      	strb	r2, [r3, #6]
    }
}
 801fb30:	bd08      	pop	{r3, pc}
 801fb32:	bf00      	nop
 801fb34:	20001bbc 	.word	0x20001bbc
 801fb38:	200018dc 	.word	0x200018dc
 801fb3c:	200022f4 	.word	0x200022f4

0801fb40 <st_wake_up>:

// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up (void)
{
 801fb40:	b508      	push	{r3, lr}
    // Initialize stepper data to ensure first ISR call does not step and
    // cancel any pending steppers deenergize
    //st.exec_block = NULL;
    sys.steppers_deenergize = false;
 801fb42:	4b04      	ldr	r3, [pc, #16]	@ (801fb54 <st_wake_up+0x14>)
 801fb44:	2200      	movs	r2, #0
 801fb46:	719a      	strb	r2, [r3, #6]
    hal.stepper.wake_up();
 801fb48:	4b03      	ldr	r3, [pc, #12]	@ (801fb58 <st_wake_up+0x18>)
 801fb4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fb4e:	4798      	blx	r3
}
 801fb50:	bd08      	pop	{r3, pc}
 801fb52:	bf00      	nop
 801fb54:	20001bbc 	.word	0x20001bbc
 801fb58:	200018dc 	.word	0x200018dc

0801fb5c <st_go_idle>:

// Stepper shutdown
ISR_CODE void ISR_FUNC(st_go_idle)(void)
{
 801fb5c:	b510      	push	{r4, lr}
    // Disable Stepper Driver Interrupt. Allow Stepper Port Reset Interrupt to finish, if active.

    sys_state_t state = state_get();
 801fb5e:	f7ff fad3 	bl	801f108 <state_get>
 801fb62:	4604      	mov	r4, r0

    hal.stepper.go_idle(false);
 801fb64:	4b1b      	ldr	r3, [pc, #108]	@ (801fbd4 <st_go_idle+0x78>)
 801fb66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fb6a:	2000      	movs	r0, #0
 801fb6c:	4798      	blx	r3

    // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
    if(((settings.steppers.idle_lock_time != 255) || sys.rt_exec_alarm || state == STATE_SLEEP) && state != STATE_HOMING) {
 801fb6e:	4b1a      	ldr	r3, [pc, #104]	@ (801fbd8 <st_go_idle+0x7c>)
 801fb70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801fb74:	2bff      	cmp	r3, #255	@ 0xff
 801fb76:	d00b      	beq.n	801fb90 <st_go_idle+0x34>
 801fb78:	2c04      	cmp	r4, #4
 801fb7a:	d00f      	beq.n	801fb9c <st_go_idle+0x40>
        if(settings.steppers.idle_lock_time == 0 || state == STATE_SLEEP)
 801fb7c:	b10b      	cbz	r3, 801fb82 <st_go_idle+0x26>
 801fb7e:	2c80      	cmp	r4, #128	@ 0x80
 801fb80:	d116      	bne.n	801fbb0 <st_go_idle+0x54>
            hal.stepper.enable((axes_signals_t){0});
 801fb82:	4b14      	ldr	r3, [pc, #80]	@ (801fbd4 <st_go_idle+0x78>)
 801fb84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801fb88:	f04f 0000 	mov.w	r0, #0
 801fb8c:	4798      	blx	r3
            task_delete(st_deenergize, NULL); // Cancel any pending steppers deenergize task
            sys.steppers_deenergize = task_add_delayed(st_deenergize, NULL, settings.steppers.idle_lock_time);
        }
    } else
        hal.stepper.enable(settings.steppers.idle_lock_time == 255 ? (axes_signals_t){AXES_BITMASK} : settings.steppers.deenergize);
}
 801fb8e:	bd10      	pop	{r4, pc}
    if(((settings.steppers.idle_lock_time != 255) || sys.rt_exec_alarm || state == STATE_SLEEP) && state != STATE_HOMING) {
 801fb90:	4a12      	ldr	r2, [pc, #72]	@ (801fbdc <st_go_idle+0x80>)
 801fb92:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 801fb94:	2a00      	cmp	r2, #0
 801fb96:	d1ef      	bne.n	801fb78 <st_go_idle+0x1c>
 801fb98:	2c80      	cmp	r4, #128	@ 0x80
 801fb9a:	d0ef      	beq.n	801fb7c <st_go_idle+0x20>
        hal.stepper.enable(settings.steppers.idle_lock_time == 255 ? (axes_signals_t){AXES_BITMASK} : settings.steppers.deenergize);
 801fb9c:	4a0d      	ldr	r2, [pc, #52]	@ (801fbd4 <st_go_idle+0x78>)
 801fb9e:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801fba2:	2bff      	cmp	r3, #255	@ 0xff
 801fba4:	d013      	beq.n	801fbce <st_go_idle+0x72>
 801fba6:	4b0c      	ldr	r3, [pc, #48]	@ (801fbd8 <st_go_idle+0x7c>)
 801fba8:	f893 00ec 	ldrb.w	r0, [r3, #236]	@ 0xec
 801fbac:	4790      	blx	r2
}
 801fbae:	e7ee      	b.n	801fb8e <st_go_idle+0x32>
            task_delete(st_deenergize, NULL); // Cancel any pending steppers deenergize task
 801fbb0:	4c0b      	ldr	r4, [pc, #44]	@ (801fbe0 <st_go_idle+0x84>)
 801fbb2:	2100      	movs	r1, #0
 801fbb4:	4620      	mov	r0, r4
 801fbb6:	f7f2 fa33 	bl	8012020 <task_delete>
            sys.steppers_deenergize = task_add_delayed(st_deenergize, NULL, settings.steppers.idle_lock_time);
 801fbba:	4b07      	ldr	r3, [pc, #28]	@ (801fbd8 <st_go_idle+0x7c>)
 801fbbc:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	@ 0xf8
 801fbc0:	2100      	movs	r1, #0
 801fbc2:	4620      	mov	r0, r4
 801fbc4:	f7f1 ffa6 	bl	8011b14 <task_add_delayed>
 801fbc8:	4b04      	ldr	r3, [pc, #16]	@ (801fbdc <st_go_idle+0x80>)
 801fbca:	7198      	strb	r0, [r3, #6]
 801fbcc:	e7df      	b.n	801fb8e <st_go_idle+0x32>
        hal.stepper.enable(settings.steppers.idle_lock_time == 255 ? (axes_signals_t){AXES_BITMASK} : settings.steppers.deenergize);
 801fbce:	f04f 0007 	mov.w	r0, #7
 801fbd2:	e7eb      	b.n	801fbac <st_go_idle+0x50>
 801fbd4:	200018dc 	.word	0x200018dc
 801fbd8:	200022f4 	.word	0x200022f4
 801fbdc:	20001bbc 	.word	0x20001bbc
 801fbe0:	0801fb15 	.word	0x0801fb15

0801fbe4 <stepper_driver_interrupt_handler>:
*/

//! \cond

ISR_CODE void ISR_FUNC(stepper_driver_interrupt_handler)(void)
{
 801fbe4:	b510      	push	{r4, lr}
#if ENABLE_BACKLASH_COMPENSATION
    static bool backlash_motion;
#endif

    // Start a step pulse when there is a block to execute.
    if(st.exec_block) {
 801fbe6:	4b91      	ldr	r3, [pc, #580]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fbe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fbea:	b163      	cbz	r3, 801fc06 <stepper_driver_interrupt_handler+0x22>

        hal.stepper.pulse_start(&st);
 801fbec:	4b90      	ldr	r3, [pc, #576]	@ (801fe30 <stepper_driver_interrupt_handler+0x24c>)
 801fbee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801fbf2:	4c8e      	ldr	r4, [pc, #568]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fbf4:	4620      	mov	r0, r4
 801fbf6:	4798      	blx	r3

        st.new_block = st.dir_change = false;
 801fbf8:	2300      	movs	r3, #0
 801fbfa:	7363      	strb	r3, [r4, #13]
 801fbfc:	7323      	strb	r3, [r4, #12]

        if (st.step_count == 0) // Segment is complete. Discard current segment.
 801fbfe:	6a23      	ldr	r3, [r4, #32]
 801fc00:	b90b      	cbnz	r3, 801fc06 <stepper_driver_interrupt_handler+0x22>
            st.exec_segment = NULL;
 801fc02:	2200      	movs	r2, #0
 801fc04:	62e2      	str	r2, [r4, #44]	@ 0x2c
    }

    // If there is no step segment, attempt to pop one from the stepper buffer
    if (st.exec_segment == NULL) {
 801fc06:	4b89      	ldr	r3, [pc, #548]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fc08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc0a:	2b00      	cmp	r3, #0
 801fc0c:	d068      	beq.n	801fce0 <stepper_driver_interrupt_handler+0xfc>
    }

    // Check probing state.
    // Monitors probe pin state and records the system position when detected.
    // NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
    if (sys.probing_state == Probing_Active && hal.probe.get_state().triggered) {
 801fc0e:	4b89      	ldr	r3, [pc, #548]	@ (801fe34 <stepper_driver_interrupt_handler+0x250>)
 801fc10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801fc14:	b2db      	uxtb	r3, r3
 801fc16:	2b01      	cmp	r3, #1
 801fc18:	f000 812c 	beq.w	801fe74 <stepper_driver_interrupt_handler+0x290>
            segment_next_head = segment_next_head->next;
        }
#endif
    }

    register axes_signals_t step_outbits = (axes_signals_t){0};
 801fc1c:	f04f 0100 	mov.w	r1, #0

    // Execute step displacement profile by Bresenham line algorithm

    st.counter_x += st.steps[X_AXIS];
 801fc20:	4a82      	ldr	r2, [pc, #520]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fc22:	6813      	ldr	r3, [r2, #0]
 801fc24:	6910      	ldr	r0, [r2, #16]
 801fc26:	4403      	add	r3, r0
 801fc28:	6013      	str	r3, [r2, #0]
    if (st.counter_x > st.step_event_count) {
 801fc2a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801fc2c:	4293      	cmp	r3, r2
 801fc2e:	d912      	bls.n	801fc56 <stepper_driver_interrupt_handler+0x72>
        step_outbits.x = On;
 801fc30:	f04f 0101 	mov.w	r1, #1
        st.counter_x -= st.step_event_count;
 801fc34:	487d      	ldr	r0, [pc, #500]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fc36:	1a9b      	subs	r3, r3, r2
 801fc38:	6003      	str	r3, [r0, #0]
#if ENABLE_BACKLASH_COMPENSATION
        if(!backlash_motion)
#endif
            sys.position[X_AXIS] = sys.position[X_AXIS] + (st.dir_outbits.x ? -1 : 1);
 801fc3a:	4b7e      	ldr	r3, [pc, #504]	@ (801fe34 <stepper_driver_interrupt_handler+0x250>)
 801fc3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801fc40:	7bc0      	ldrb	r0, [r0, #15]
 801fc42:	f010 0f01 	tst.w	r0, #1
 801fc46:	f000 812d 	beq.w	801fea4 <stepper_driver_interrupt_handler+0x2c0>
 801fc4a:	f04f 30ff 	mov.w	r0, #4294967295
 801fc4e:	4403      	add	r3, r0
 801fc50:	4878      	ldr	r0, [pc, #480]	@ (801fe34 <stepper_driver_interrupt_handler+0x250>)
 801fc52:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    }

    st.counter_y += st.steps[Y_AXIS];
 801fc56:	4875      	ldr	r0, [pc, #468]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fc58:	6843      	ldr	r3, [r0, #4]
 801fc5a:	6944      	ldr	r4, [r0, #20]
 801fc5c:	4423      	add	r3, r4
 801fc5e:	6043      	str	r3, [r0, #4]
    if (st.counter_y > st.step_event_count) {
 801fc60:	429a      	cmp	r2, r3
 801fc62:	d211      	bcs.n	801fc88 <stepper_driver_interrupt_handler+0xa4>
        step_outbits.y = On;
 801fc64:	f041 0102 	orr.w	r1, r1, #2
        st.counter_y -= st.step_event_count;
 801fc68:	1a9b      	subs	r3, r3, r2
 801fc6a:	6043      	str	r3, [r0, #4]
#if ENABLE_BACKLASH_COMPENSATION
        if(!backlash_motion)
#endif
            sys.position[Y_AXIS] = sys.position[Y_AXIS] + (st.dir_outbits.y ? -1 : 1);
 801fc6c:	4b71      	ldr	r3, [pc, #452]	@ (801fe34 <stepper_driver_interrupt_handler+0x250>)
 801fc6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801fc72:	7bc0      	ldrb	r0, [r0, #15]
 801fc74:	f010 0f02 	tst.w	r0, #2
 801fc78:	f000 8116 	beq.w	801fea8 <stepper_driver_interrupt_handler+0x2c4>
 801fc7c:	f04f 30ff 	mov.w	r0, #4294967295
 801fc80:	4403      	add	r3, r0
 801fc82:	486c      	ldr	r0, [pc, #432]	@ (801fe34 <stepper_driver_interrupt_handler+0x250>)
 801fc84:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
    }

    st.counter_z += st.steps[Z_AXIS];
 801fc88:	4868      	ldr	r0, [pc, #416]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fc8a:	6883      	ldr	r3, [r0, #8]
 801fc8c:	6984      	ldr	r4, [r0, #24]
 801fc8e:	4423      	add	r3, r4
 801fc90:	6083      	str	r3, [r0, #8]
    if (st.counter_z > st.step_event_count) {
 801fc92:	429a      	cmp	r2, r3
 801fc94:	d211      	bcs.n	801fcba <stepper_driver_interrupt_handler+0xd6>
        step_outbits.z = On;
 801fc96:	f041 0104 	orr.w	r1, r1, #4
        st.counter_z -= st.step_event_count;
 801fc9a:	1a9b      	subs	r3, r3, r2
 801fc9c:	6083      	str	r3, [r0, #8]
#if ENABLE_BACKLASH_COMPENSATION
        if(!backlash_motion)
#endif
            sys.position[Z_AXIS] = sys.position[Z_AXIS] + (st.dir_outbits.z ? -1 : 1);
 801fc9e:	4b65      	ldr	r3, [pc, #404]	@ (801fe34 <stepper_driver_interrupt_handler+0x250>)
 801fca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801fca4:	7bc2      	ldrb	r2, [r0, #15]
 801fca6:	f012 0f04 	tst.w	r2, #4
 801fcaa:	f000 80ff 	beq.w	801feac <stepper_driver_interrupt_handler+0x2c8>
 801fcae:	f04f 32ff 	mov.w	r2, #4294967295
 801fcb2:	4413      	add	r3, r2
 801fcb4:	4a5f      	ldr	r2, [pc, #380]	@ (801fe34 <stepper_driver_interrupt_handler+0x250>)
 801fcb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif
            sys.position[V_AXIS] = sys.position[V_AXIS] + (st.dir_outbits.v ? -1 : 1);
    }
  #endif

    st.step_outbits.value = step_outbits.value;
 801fcba:	4b5c      	ldr	r3, [pc, #368]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fcbc:	7399      	strb	r1, [r3, #14]

    // During a homing cycle, lock out and prevent desired axes from moving.
    if (state_get() == STATE_HOMING)
 801fcbe:	f7ff fa23 	bl	801f108 <state_get>
 801fcc2:	2804      	cmp	r0, #4
 801fcc4:	f000 80f4 	beq.w	801feb0 <stepper_driver_interrupt_handler+0x2cc>
        st.step_outbits.value &= sys.homing_axis_lock.mask;

    if (st.step_count == 0 || --st.step_count == 0) {
 801fcc8:	4b58      	ldr	r3, [pc, #352]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fcca:	6a1b      	ldr	r3, [r3, #32]
 801fccc:	b11b      	cbz	r3, 801fcd6 <stepper_driver_interrupt_handler+0xf2>
 801fcce:	3b01      	subs	r3, #1
 801fcd0:	4a56      	ldr	r2, [pc, #344]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fcd2:	6213      	str	r3, [r2, #32]
 801fcd4:	b91b      	cbnz	r3, 801fcde <stepper_driver_interrupt_handler+0xfa>
        // Segment is complete. Advance segment tail pointer.
        segment_buffer_tail = segment_buffer_tail->next;
 801fcd6:	4b58      	ldr	r3, [pc, #352]	@ (801fe38 <stepper_driver_interrupt_handler+0x254>)
 801fcd8:	681a      	ldr	r2, [r3, #0]
 801fcda:	6852      	ldr	r2, [r2, #4]
 801fcdc:	601a      	str	r2, [r3, #0]
    }
}
 801fcde:	bd10      	pop	{r4, pc}
        if (segment_buffer_tail != segment_buffer_head) {
 801fce0:	4b55      	ldr	r3, [pc, #340]	@ (801fe38 <stepper_driver_interrupt_handler+0x254>)
 801fce2:	681b      	ldr	r3, [r3, #0]
 801fce4:	4a55      	ldr	r2, [pc, #340]	@ (801fe3c <stepper_driver_interrupt_handler+0x258>)
 801fce6:	6812      	ldr	r2, [r2, #0]
 801fce8:	4293      	cmp	r3, r2
 801fcea:	f000 80ab 	beq.w	801fe44 <stepper_driver_interrupt_handler+0x260>
            st.exec_segment = (segment_t *)segment_buffer_tail;
 801fcee:	4c4f      	ldr	r4, [pc, #316]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fcf0:	62e3      	str	r3, [r4, #44]	@ 0x2c
            hal.stepper.cycles_per_tick(st.exec_segment->cycles_per_tick);
 801fcf2:	4a4f      	ldr	r2, [pc, #316]	@ (801fe30 <stepper_driver_interrupt_handler+0x24c>)
 801fcf4:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 801fcf8:	68d8      	ldr	r0, [r3, #12]
 801fcfa:	4790      	blx	r2
            st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 801fcfc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801fcfe:	699a      	ldr	r2, [r3, #24]
 801fd00:	6222      	str	r2, [r4, #32]
            if (st.exec_block != st.exec_segment->exec_block) {
 801fd02:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801fd04:	6899      	ldr	r1, [r3, #8]
 801fd06:	428a      	cmp	r2, r1
 801fd08:	d06c      	beq.n	801fde4 <stepper_driver_interrupt_handler+0x200>
                if((st.dir_change = st.exec_block == NULL || st.dir_outbits.value != st.exec_segment->exec_block->direction_bits.value))
 801fd0a:	b382      	cbz	r2, 801fd6e <stepper_driver_interrupt_handler+0x18a>
 801fd0c:	7be0      	ldrb	r0, [r4, #15]
 801fd0e:	7e09      	ldrb	r1, [r1, #24]
 801fd10:	4288      	cmp	r0, r1
 801fd12:	d02e      	beq.n	801fd72 <stepper_driver_interrupt_handler+0x18e>
 801fd14:	2101      	movs	r1, #1
 801fd16:	4845      	ldr	r0, [pc, #276]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fd18:	7341      	strb	r1, [r0, #13]
 801fd1a:	b119      	cbz	r1, 801fd24 <stepper_driver_interrupt_handler+0x140>
                    st.dir_outbits = st.exec_segment->exec_block->direction_bits;
 801fd1c:	6899      	ldr	r1, [r3, #8]
 801fd1e:	7e08      	ldrb	r0, [r1, #24]
 801fd20:	4942      	ldr	r1, [pc, #264]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fd22:	73c8      	strb	r0, [r1, #15]
                if(st.exec_block != NULL && st.exec_block->offset_id != st.exec_segment->exec_block->offset_id)
 801fd24:	b19a      	cbz	r2, 801fd4e <stepper_driver_interrupt_handler+0x16a>
 801fd26:	f992 1032 	ldrsb.w	r1, [r2, #50]	@ 0x32
 801fd2a:	689a      	ldr	r2, [r3, #8]
 801fd2c:	f992 2032 	ldrsb.w	r2, [r2, #50]	@ 0x32
 801fd30:	4291      	cmp	r1, r2
 801fd32:	d00c      	beq.n	801fd4e <stepper_driver_interrupt_handler+0x16a>
                    sys.report.wco = sys.report.force_wco = On; // Do not generate grbl.on_rt_reports_added event!
 801fd34:	4a3f      	ldr	r2, [pc, #252]	@ (801fe34 <stepper_driver_interrupt_handler+0x250>)
 801fd36:	f892 1033 	ldrb.w	r1, [r2, #51]	@ 0x33
 801fd3a:	f041 0120 	orr.w	r1, r1, #32
 801fd3e:	f882 1033 	strb.w	r1, [r2, #51]	@ 0x33
 801fd42:	f892 1031 	ldrb.w	r1, [r2, #49]	@ 0x31
 801fd46:	f041 0101 	orr.w	r1, r1, #1
 801fd4a:	f882 1031 	strb.w	r1, [r2, #49]	@ 0x31
                st.exec_block = st.exec_segment->exec_block;
 801fd4e:	689b      	ldr	r3, [r3, #8]
 801fd50:	4a36      	ldr	r2, [pc, #216]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fd52:	6293      	str	r3, [r2, #40]	@ 0x28
                st.step_event_count = st.exec_block->step_event_count;
 801fd54:	6959      	ldr	r1, [r3, #20]
 801fd56:	6251      	str	r1, [r2, #36]	@ 0x24
                st.new_block = true;
 801fd58:	2101      	movs	r1, #1
 801fd5a:	7311      	strb	r1, [r2, #12]
                if(st.exec_block->overrides.sync)
 801fd5c:	f993 2019 	ldrsb.w	r2, [r3, #25]
 801fd60:	2a00      	cmp	r2, #0
 801fd62:	da15      	bge.n	801fd90 <stepper_driver_interrupt_handler+0x1ac>
                    sys.override.control = st.exec_block->overrides;
 801fd64:	7e5a      	ldrb	r2, [r3, #25]
 801fd66:	4b33      	ldr	r3, [pc, #204]	@ (801fe34 <stepper_driver_interrupt_handler+0x250>)
 801fd68:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 801fd6c:	e010      	b.n	801fd90 <stepper_driver_interrupt_handler+0x1ac>
                if((st.dir_change = st.exec_block == NULL || st.dir_outbits.value != st.exec_segment->exec_block->direction_bits.value))
 801fd6e:	2101      	movs	r1, #1
 801fd70:	e7d1      	b.n	801fd16 <stepper_driver_interrupt_handler+0x132>
 801fd72:	2100      	movs	r1, #0
 801fd74:	e7cf      	b.n	801fd16 <stepper_driver_interrupt_handler+0x132>
                        hal.port.analog_out(cmd->port, cmd->value);
 801fd76:	4b2e      	ldr	r3, [pc, #184]	@ (801fe30 <stepper_driver_interrupt_handler+0x24c>)
 801fd78:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801fd7c:	edd4 7a01 	vldr	s15, [r4, #4]
 801fd80:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801fd84:	78a0      	ldrb	r0, [r4, #2]
 801fd86:	4798      	blx	r3
                    st.exec_block->output_commands = cmd->next;
 801fd88:	4b28      	ldr	r3, [pc, #160]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fd8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd8c:	68a2      	ldr	r2, [r4, #8]
 801fd8e:	62da      	str	r2, [r3, #44]	@ 0x2c
                while(st.exec_block->output_commands) {
 801fd90:	4b26      	ldr	r3, [pc, #152]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fd92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd94:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801fd96:	b1ac      	cbz	r4, 801fdc4 <stepper_driver_interrupt_handler+0x1e0>
                    cmd->is_executed = true;
 801fd98:	2301      	movs	r3, #1
 801fd9a:	7063      	strb	r3, [r4, #1]
                    if(cmd->is_digital)
 801fd9c:	7823      	ldrb	r3, [r4, #0]
 801fd9e:	2b00      	cmp	r3, #0
 801fda0:	d0e9      	beq.n	801fd76 <stepper_driver_interrupt_handler+0x192>
                        hal.port.digital_out(cmd->port, cmd->value != 0.0f);
 801fda2:	4b23      	ldr	r3, [pc, #140]	@ (801fe30 <stepper_driver_interrupt_handler+0x24c>)
 801fda4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801fda8:	edd4 7a01 	vldr	s15, [r4, #4]
 801fdac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fdb0:	eef5 7a40 	vcmp.f32	s15, #0.0
 801fdb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdb8:	bf14      	ite	ne
 801fdba:	2101      	movne	r1, #1
 801fdbc:	2100      	moveq	r1, #0
 801fdbe:	78a0      	ldrb	r0, [r4, #2]
 801fdc0:	4798      	blx	r3
 801fdc2:	e7e1      	b.n	801fd88 <stepper_driver_interrupt_handler+0x1a4>
                if(st.exec_block->message) {
 801fdc4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 801fdc6:	b139      	cbz	r1, 801fdd8 <stepper_driver_interrupt_handler+0x1f4>
                    if(!protocol_enqueue_foreground_task((foreground_task_ptr)gc_output_message, st.exec_block->message))
 801fdc8:	481d      	ldr	r0, [pc, #116]	@ (801fe40 <stepper_driver_interrupt_handler+0x25c>)
 801fdca:	f7f8 f921 	bl	8018010 <protocol_enqueue_foreground_task>
 801fdce:	b1e8      	cbz	r0, 801fe0c <stepper_driver_interrupt_handler+0x228>
                    st.exec_block->message = NULL;
 801fdd0:	4b16      	ldr	r3, [pc, #88]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fdd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fdd4:	2200      	movs	r2, #0
 801fdd6:	629a      	str	r2, [r3, #40]	@ 0x28
                  = st.step_event_count >> 1;
 801fdd8:	4a14      	ldr	r2, [pc, #80]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fdda:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801fddc:	085b      	lsrs	r3, r3, #1
 801fdde:	6093      	str	r3, [r2, #8]
                st.counter_x = st.counter_y = st.counter_z
 801fde0:	6053      	str	r3, [r2, #4]
 801fde2:	6013      	str	r3, [r2, #0]
            st.amass_level = st.exec_segment->amass_level;
 801fde4:	4b11      	ldr	r3, [pc, #68]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fde6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801fde8:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 801fdea:	61da      	str	r2, [r3, #28]
            st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.amass_level;
 801fdec:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801fdee:	6884      	ldr	r4, [r0, #8]
 801fdf0:	40d4      	lsrs	r4, r2
 801fdf2:	611c      	str	r4, [r3, #16]
            st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.amass_level;
 801fdf4:	68c4      	ldr	r4, [r0, #12]
 801fdf6:	40d4      	lsrs	r4, r2
 801fdf8:	615c      	str	r4, [r3, #20]
            st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.amass_level;
 801fdfa:	6904      	ldr	r4, [r0, #16]
 801fdfc:	40d4      	lsrs	r4, r2
 801fdfe:	619c      	str	r4, [r3, #24]
            if(st.exec_segment->update_pwm)
 801fe00:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801fe02:	b14b      	cbz	r3, 801fe18 <stepper_driver_interrupt_handler+0x234>
                st.exec_segment->update_pwm(st.exec_block->spindle, st.exec_segment->spindle_pwm);
 801fe04:	69c9      	ldr	r1, [r1, #28]
 801fe06:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801fe08:	4798      	blx	r3
 801fe0a:	e700      	b.n	801fc0e <stepper_driver_interrupt_handler+0x2a>
                        free(st.exec_block->message);
 801fe0c:	4b07      	ldr	r3, [pc, #28]	@ (801fe2c <stepper_driver_interrupt_handler+0x248>)
 801fe0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fe10:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801fe12:	f002 ffc9 	bl	8022da8 <free>
 801fe16:	e7db      	b.n	801fdd0 <stepper_driver_interrupt_handler+0x1ec>
            else if(st.exec_segment->update_rpm)
 801fe18:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	f43f aef7 	beq.w	801fc0e <stepper_driver_interrupt_handler+0x2a>
                st.exec_segment->update_rpm(st.exec_block->spindle, st.exec_segment->spindle_rpm);
 801fe20:	ed91 0a08 	vldr	s0, [r1, #32]
 801fe24:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801fe26:	4798      	blx	r3
 801fe28:	e6f1      	b.n	801fc0e <stepper_driver_interrupt_handler+0x2a>
 801fe2a:	bf00      	nop
 801fe2c:	20002640 	.word	0x20002640
 801fe30:	200018dc 	.word	0x200018dc
 801fe34:	20001bbc 	.word	0x20001bbc
 801fe38:	20002628 	.word	0x20002628
 801fe3c:	20002624 	.word	0x20002624
 801fe40:	0800d80d 	.word	0x0800d80d
            st_go_idle();
 801fe44:	f7ff fe8a 	bl	801fb5c <st_go_idle>
            if (st.exec_block->dynamic_rpm && st.exec_block->spindle->cap.laser)
 801fe48:	4b1d      	ldr	r3, [pc, #116]	@ (801fec0 <stepper_driver_interrupt_handler+0x2dc>)
 801fe4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fe4c:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 801fe50:	b13a      	cbz	r2, 801fe62 <stepper_driver_interrupt_handler+0x27e>
 801fe52:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801fe54:	7a83      	ldrb	r3, [r0, #10]
 801fe56:	f013 0f08 	tst.w	r3, #8
 801fe5a:	d002      	beq.n	801fe62 <stepper_driver_interrupt_handler+0x27e>
                st.exec_block->spindle->update_pwm(st.exec_block->spindle, st.exec_block->spindle->pwm_off_value);
 801fe5c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801fe5e:	6901      	ldr	r1, [r0, #16]
 801fe60:	4798      	blx	r3
            st.exec_block = NULL;
 801fe62:	4b17      	ldr	r3, [pc, #92]	@ (801fec0 <stepper_driver_interrupt_handler+0x2dc>)
 801fe64:	2200      	movs	r2, #0
 801fe66:	629a      	str	r2, [r3, #40]	@ 0x28
            system_set_exec_state_flag(EXEC_CYCLE_COMPLETE); // Flag main program for cycle complete
 801fe68:	4b16      	ldr	r3, [pc, #88]	@ (801fec4 <stepper_driver_interrupt_handler+0x2e0>)
 801fe6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fe6c:	2104      	movs	r1, #4
 801fe6e:	4816      	ldr	r0, [pc, #88]	@ (801fec8 <stepper_driver_interrupt_handler+0x2e4>)
 801fe70:	4798      	blx	r3
            return; // Nothing to do but exit.
 801fe72:	e734      	b.n	801fcde <stepper_driver_interrupt_handler+0xfa>
    if (sys.probing_state == Probing_Active && hal.probe.get_state().triggered) {
 801fe74:	4b13      	ldr	r3, [pc, #76]	@ (801fec4 <stepper_driver_interrupt_handler+0x2e0>)
 801fe76:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 801fe7a:	4798      	blx	r3
 801fe7c:	f010 0f01 	tst.w	r0, #1
 801fe80:	f43f aecc 	beq.w	801fc1c <stepper_driver_interrupt_handler+0x38>
        sys.probing_state = Probing_Off;
 801fe84:	4b11      	ldr	r3, [pc, #68]	@ (801fecc <stepper_driver_interrupt_handler+0x2e8>)
 801fe86:	2200      	movs	r2, #0
 801fe88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        memcpy(sys.probe_position, sys.position, sizeof(sys.position));
 801fe8c:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 801fe90:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 801fe94:	ca07      	ldmia	r2, {r0, r1, r2}
 801fe96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        bit_true(sys.rt_exec_state, EXEC_MOTION_CANCEL);
 801fe9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801fe9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801fea0:	649a      	str	r2, [r3, #72]	@ 0x48
 801fea2:	e6bb      	b.n	801fc1c <stepper_driver_interrupt_handler+0x38>
            sys.position[X_AXIS] = sys.position[X_AXIS] + (st.dir_outbits.x ? -1 : 1);
 801fea4:	2001      	movs	r0, #1
 801fea6:	e6d2      	b.n	801fc4e <stepper_driver_interrupt_handler+0x6a>
            sys.position[Y_AXIS] = sys.position[Y_AXIS] + (st.dir_outbits.y ? -1 : 1);
 801fea8:	2001      	movs	r0, #1
 801feaa:	e6e9      	b.n	801fc80 <stepper_driver_interrupt_handler+0x9c>
            sys.position[Z_AXIS] = sys.position[Z_AXIS] + (st.dir_outbits.z ? -1 : 1);
 801feac:	2201      	movs	r2, #1
 801feae:	e700      	b.n	801fcb2 <stepper_driver_interrupt_handler+0xce>
        st.step_outbits.value &= sys.homing_axis_lock.mask;
 801feb0:	4a03      	ldr	r2, [pc, #12]	@ (801fec0 <stepper_driver_interrupt_handler+0x2dc>)
 801feb2:	7b93      	ldrb	r3, [r2, #14]
 801feb4:	4905      	ldr	r1, [pc, #20]	@ (801fecc <stepper_driver_interrupt_handler+0x2e8>)
 801feb6:	7e49      	ldrb	r1, [r1, #25]
 801feb8:	400b      	ands	r3, r1
 801feba:	7393      	strb	r3, [r2, #14]
 801febc:	e704      	b.n	801fcc8 <stepper_driver_interrupt_handler+0xe4>
 801febe:	bf00      	nop
 801fec0:	20002640 	.word	0x20002640
 801fec4:	200018dc 	.word	0x200018dc
 801fec8:	20001c04 	.word	0x20001c04
 801fecc:	20001bbc 	.word	0x20001bbc

0801fed0 <st_reset>:

//! \endcond

// Reset and clear stepper subsystem variables
void st_reset (void)
{
 801fed0:	b510      	push	{r4, lr}
    if(hal.probe.configure)
 801fed2:	4b35      	ldr	r3, [pc, #212]	@ (801ffa8 <st_reset+0xd8>)
 801fed4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801fed8:	b113      	cbz	r3, 801fee0 <st_reset+0x10>
        hal.probe.configure(false, false);
 801feda:	2100      	movs	r1, #0
 801fedc:	4608      	mov	r0, r1
 801fede:	4798      	blx	r3

    // Initialize stepper driver idle state, clear step and direction port pins.
    st_go_idle();
 801fee0:	f7ff fe3c 	bl	801fb5c <st_go_idle>

    // NOTE: buffer indices starts from 1 for simpler driver coding!

    // Set up stepper block ringbuffer as circular linked list and add id
    uint_fast8_t idx, idx_max = (sizeof(st_block_buffer) / sizeof(st_block_t)) - 1;
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801fee4:	2300      	movs	r3, #0
 801fee6:	e010      	b.n	801ff0a <st_reset+0x3a>
        st_block_buffer[idx].next = &st_block_buffer[idx == idx_max ? 0 : idx + 1];
 801fee8:	2200      	movs	r2, #0
 801feea:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801feee:	00d1      	lsls	r1, r2, #3
 801fef0:	482e      	ldr	r0, [pc, #184]	@ (801ffac <st_reset+0xdc>)
 801fef2:	4401      	add	r1, r0
 801fef4:	ebc3 0cc3 	rsb	ip, r3, r3, lsl #3
 801fef8:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801fefc:	4402      	add	r2, r0
 801fefe:	6051      	str	r1, [r2, #4]
        st_block_buffer[idx].id = idx + 1;
 801ff00:	1c5a      	adds	r2, r3, #1
 801ff02:	4663      	mov	r3, ip
 801ff04:	00d9      	lsls	r1, r3, #3
 801ff06:	5042      	str	r2, [r0, r1]
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801ff08:	4613      	mov	r3, r2
 801ff0a:	2b08      	cmp	r3, #8
 801ff0c:	d803      	bhi.n	801ff16 <st_reset+0x46>
        st_block_buffer[idx].next = &st_block_buffer[idx == idx_max ? 0 : idx + 1];
 801ff0e:	2b08      	cmp	r3, #8
 801ff10:	d0ea      	beq.n	801fee8 <st_reset+0x18>
 801ff12:	1c5a      	adds	r2, r3, #1
 801ff14:	e7e9      	b.n	801feea <st_reset+0x1a>
    }

    // Set up segments ringbuffer as circular linked list, add id and clear AMASS level
    idx_max = (sizeof(segment_buffer) / sizeof(segment_t)) - 1;
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801ff16:	2300      	movs	r3, #0
 801ff18:	e00f      	b.n	801ff3a <st_reset+0x6a>
        segment_buffer[idx].next = &segment_buffer[idx == idx_max ? 0 : idx + 1];
 801ff1a:	2000      	movs	r0, #0
 801ff1c:	2234      	movs	r2, #52	@ 0x34
 801ff1e:	4924      	ldr	r1, [pc, #144]	@ (801ffb0 <st_reset+0xe0>)
 801ff20:	fb02 1000 	mla	r0, r2, r0, r1
 801ff24:	fb03 f202 	mul.w	r2, r3, r2
 801ff28:	eb01 0c02 	add.w	ip, r1, r2
 801ff2c:	f8cc 0004 	str.w	r0, [ip, #4]
        segment_buffer[idx].id = idx + 1;
 801ff30:	3301      	adds	r3, #1
 801ff32:	508b      	str	r3, [r1, r2]
        segment_buffer[idx].amass_level = 0;
 801ff34:	2200      	movs	r2, #0
 801ff36:	f8cc 2028 	str.w	r2, [ip, #40]	@ 0x28
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801ff3a:	2b09      	cmp	r3, #9
 801ff3c:	d803      	bhi.n	801ff46 <st_reset+0x76>
        segment_buffer[idx].next = &segment_buffer[idx == idx_max ? 0 : idx + 1];
 801ff3e:	2b09      	cmp	r3, #9
 801ff40:	d0eb      	beq.n	801ff1a <st_reset+0x4a>
 801ff42:	1c58      	adds	r0, r3, #1
 801ff44:	e7ea      	b.n	801ff1c <st_reset+0x4c>
    }

    st_prep_block = &st_block_buffer[0];
 801ff46:	4b1b      	ldr	r3, [pc, #108]	@ (801ffb4 <st_reset+0xe4>)
 801ff48:	4a18      	ldr	r2, [pc, #96]	@ (801ffac <st_reset+0xdc>)
 801ff4a:	601a      	str	r2, [r3, #0]

    // Initialize stepper algorithm variables.
    pl_block = NULL;  // Planner block pointer used by segment buffer
 801ff4c:	2400      	movs	r4, #0
 801ff4e:	4b1a      	ldr	r3, [pc, #104]	@ (801ffb8 <st_reset+0xe8>)
 801ff50:	601c      	str	r4, [r3, #0]
    segment_buffer_tail = segment_buffer_head = &segment_buffer[0]; // empty = tail
 801ff52:	4b17      	ldr	r3, [pc, #92]	@ (801ffb0 <st_reset+0xe0>)
 801ff54:	4a19      	ldr	r2, [pc, #100]	@ (801ffbc <st_reset+0xec>)
 801ff56:	6013      	str	r3, [r2, #0]
 801ff58:	4a19      	ldr	r2, [pc, #100]	@ (801ffc0 <st_reset+0xf0>)
 801ff5a:	6013      	str	r3, [r2, #0]
    segment_next_head = segment_buffer_head->next;
 801ff5c:	685a      	ldr	r2, [r3, #4]
 801ff5e:	4b19      	ldr	r3, [pc, #100]	@ (801ffc4 <st_reset+0xf4>)
 801ff60:	601a      	str	r2, [r3, #0]

    memset(&prep, 0, sizeof(st_prep_t));
 801ff62:	2250      	movs	r2, #80	@ 0x50
 801ff64:	4621      	mov	r1, r4
 801ff66:	4818      	ldr	r0, [pc, #96]	@ (801ffc8 <st_reset+0xf8>)
 801ff68:	f004 ffdd 	bl	8024f26 <memset>
    memset(&st, 0, sizeof(stepper_t));
 801ff6c:	2230      	movs	r2, #48	@ 0x30
 801ff6e:	4621      	mov	r1, r4
 801ff70:	4816      	ldr	r0, [pc, #88]	@ (801ffcc <st_reset+0xfc>)
 801ff72:	f004 ffd8 	bl	8024f26 <memset>

#ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    // TODO: move to driver?
    // AMASS_LEVEL0: Normal operation. No AMASS. No upper cutoff frequency. Starts at LEVEL1 cutoff frequency.
    // Defined as step timer frequency / Cutoff frequency in Hz
    amass.level_1 = hal.f_step_timer / 8000;
 801ff76:	4b0c      	ldr	r3, [pc, #48]	@ (801ffa8 <st_reset+0xd8>)
 801ff78:	69da      	ldr	r2, [r3, #28]
 801ff7a:	4b15      	ldr	r3, [pc, #84]	@ (801ffd0 <st_reset+0x100>)
 801ff7c:	fba3 1302 	umull	r1, r3, r3, r2
 801ff80:	0a58      	lsrs	r0, r3, #9
 801ff82:	4914      	ldr	r1, [pc, #80]	@ (801ffd4 <st_reset+0x104>)
 801ff84:	6008      	str	r0, [r1, #0]
    amass.level_2 = hal.f_step_timer / 4000;
 801ff86:	0a18      	lsrs	r0, r3, #8
 801ff88:	6048      	str	r0, [r1, #4]
    amass.level_3 = hal.f_step_timer / 2000;
 801ff8a:	09db      	lsrs	r3, r3, #7
 801ff8c:	608b      	str	r3, [r1, #8]
#endif

    cycles_per_min = (float)hal.f_step_timer * 60.0f;
 801ff8e:	ee07 2a90 	vmov	s15, r2
 801ff92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ff96:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 801ffd8 <st_reset+0x108>
 801ff9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ff9e:	4b0f      	ldr	r3, [pc, #60]	@ (801ffdc <st_reset+0x10c>)
 801ffa0:	edc3 7a00 	vstr	s15, [r3]
}
 801ffa4:	bd10      	pop	{r4, pc}
 801ffa6:	bf00      	nop
 801ffa8:	200018dc 	.word	0x200018dc
 801ffac:	20002878 	.word	0x20002878
 801ffb0:	20002670 	.word	0x20002670
 801ffb4:	20002618 	.word	0x20002618
 801ffb8:	2000261c 	.word	0x2000261c
 801ffbc:	20002624 	.word	0x20002624
 801ffc0:	20002628 	.word	0x20002628
 801ffc4:	20002620 	.word	0x20002620
 801ffc8:	20002590 	.word	0x20002590
 801ffcc:	20002640 	.word	0x20002640
 801ffd0:	10624dd3 	.word	0x10624dd3
 801ffd4:	20002634 	.word	0x20002634
 801ffd8:	42700000 	.word	0x42700000
 801ffdc:	2000262c 	.word	0x2000262c

0801ffe0 <st_rpm_changed>:

// Called by spindle_set_state() to inform about RPM changes.
// Used by st_prep_buffer() to determine if spindle needs update when dynamic RPM is called for.
void st_rpm_changed (float rpm)
{
    prep.current_spindle_rpm = rpm;
 801ffe0:	4b01      	ldr	r3, [pc, #4]	@ (801ffe8 <st_rpm_changed+0x8>)
 801ffe2:	ed83 0a13 	vstr	s0, [r3, #76]	@ 0x4c
}
 801ffe6:	4770      	bx	lr
 801ffe8:	20002590 	.word	0x20002590

0801ffec <st_update_plan_block_parameters>:

// Called by planner_recalculate() when the executing block is updated by the new plan.
void st_update_plan_block_parameters (void)
{
    if (pl_block != NULL) { // Ignore if at start of a new block.
 801ffec:	4b08      	ldr	r3, [pc, #32]	@ (8020010 <st_update_plan_block_parameters+0x24>)
 801ffee:	6819      	ldr	r1, [r3, #0]
 801fff0:	b169      	cbz	r1, 802000e <st_update_plan_block_parameters+0x22>
        prep.recalculate.velocity_profile = On;
 801fff2:	4b08      	ldr	r3, [pc, #32]	@ (8020014 <st_update_plan_block_parameters+0x28>)
 801fff4:	781a      	ldrb	r2, [r3, #0]
 801fff6:	f042 0201 	orr.w	r2, r2, #1
 801fffa:	701a      	strb	r2, [r3, #0]
        pl_block->entry_speed_sqr = prep.current_speed * prep.current_speed; // Update entry speed.
 801fffc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8020000:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8020004:	edc1 7a07 	vstr	s15, [r1, #28]
        pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 8020008:	4b01      	ldr	r3, [pc, #4]	@ (8020010 <st_update_plan_block_parameters+0x24>)
 802000a:	2200      	movs	r2, #0
 802000c:	601a      	str	r2, [r3, #0]
    }
}
 802000e:	4770      	bx	lr
 8020010:	2000261c 	.word	0x2000261c
 8020014:	20002590 	.word	0x20002590

08020018 <st_parking_setup_buffer>:

// Changes the run state of the step segment buffer to execute the special parking motion.
void st_parking_setup_buffer (void)
{
 8020018:	b530      	push	{r4, r5, lr}
    // Store step execution data of partially completed block, if necessary.
    if (prep.recalculate.hold_partial_block && !prep.recalculate.parking) {
 802001a:	4b1b      	ldr	r3, [pc, #108]	@ (8020088 <st_parking_setup_buffer+0x70>)
 802001c:	781b      	ldrb	r3, [r3, #0]
 802001e:	f003 0306 	and.w	r3, r3, #6
 8020022:	2b02      	cmp	r3, #2
 8020024:	d00c      	beq.n	8020040 <st_parking_setup_buffer+0x28>
        prep.last_steps_remaining = prep.steps_remaining;
        prep.last_dt_remainder = prep.dt_remainder;
        prep.last_steps_per_mm = prep.steps_per_mm;
    }
    // Set flags to execute a parking motion
    prep.recalculate.parking = On;
 8020026:	4b18      	ldr	r3, [pc, #96]	@ (8020088 <st_parking_setup_buffer+0x70>)
 8020028:	781a      	ldrb	r2, [r3, #0]
 802002a:	f042 0204 	orr.w	r2, r2, #4
 802002e:	701a      	strb	r2, [r3, #0]
    prep.recalculate.velocity_profile = Off;
 8020030:	b2d2      	uxtb	r2, r2
 8020032:	f36f 0200 	bfc	r2, #0, #1
 8020036:	701a      	strb	r2, [r3, #0]
    pl_block = NULL; // Always reset parking motion to reload new block.
 8020038:	4b14      	ldr	r3, [pc, #80]	@ (802008c <st_parking_setup_buffer+0x74>)
 802003a:	2200      	movs	r2, #0
 802003c:	601a      	str	r2, [r3, #0]
}
 802003e:	bd30      	pop	{r4, r5, pc}
        prep.last_st_block = st_prep_block;
 8020040:	4b13      	ldr	r3, [pc, #76]	@ (8020090 <st_parking_setup_buffer+0x78>)
 8020042:	681d      	ldr	r5, [r3, #0]
 8020044:	4b10      	ldr	r3, [pc, #64]	@ (8020088 <st_parking_setup_buffer+0x70>)
 8020046:	615d      	str	r5, [r3, #20]
        memcpy(&st_hold_block, st_prep_block, sizeof(st_block_t));
 8020048:	46ac      	mov	ip, r5
 802004a:	4c12      	ldr	r4, [pc, #72]	@ (8020094 <st_parking_setup_buffer+0x7c>)
 802004c:	3530      	adds	r5, #48	@ 0x30
 802004e:	46a6      	mov	lr, r4
 8020050:	f8dc 0000 	ldr.w	r0, [ip]
 8020054:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8020058:	f8dc 2008 	ldr.w	r2, [ip, #8]
 802005c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8020060:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8020064:	f10c 0c10 	add.w	ip, ip, #16
 8020068:	4674      	mov	r4, lr
 802006a:	45ac      	cmp	ip, r5
 802006c:	d1ef      	bne.n	802004e <st_parking_setup_buffer+0x36>
 802006e:	f8dc 0000 	ldr.w	r0, [ip]
 8020072:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8020076:	c403      	stmia	r4!, {r0, r1}
        prep.last_steps_remaining = prep.steps_remaining;
 8020078:	4b03      	ldr	r3, [pc, #12]	@ (8020088 <st_parking_setup_buffer+0x70>)
 802007a:	689a      	ldr	r2, [r3, #8]
 802007c:	619a      	str	r2, [r3, #24]
        prep.last_dt_remainder = prep.dt_remainder;
 802007e:	685a      	ldr	r2, [r3, #4]
 8020080:	621a      	str	r2, [r3, #32]
        prep.last_steps_per_mm = prep.steps_per_mm;
 8020082:	68da      	ldr	r2, [r3, #12]
 8020084:	61da      	str	r2, [r3, #28]
 8020086:	e7ce      	b.n	8020026 <st_parking_setup_buffer+0xe>
 8020088:	20002590 	.word	0x20002590
 802008c:	2000261c 	.word	0x2000261c
 8020090:	20002618 	.word	0x20002618
 8020094:	200025e0 	.word	0x200025e0

08020098 <st_parking_restore_buffer>:

// Restores the step segment buffer to the normal run state after a parking motion.
void st_parking_restore_buffer (void)
{
    // Restore step execution data and flags of partially completed block, if necessary.
    if (prep.recalculate.hold_partial_block) {
 8020098:	4b1e      	ldr	r3, [pc, #120]	@ (8020114 <st_parking_restore_buffer+0x7c>)
 802009a:	781b      	ldrb	r3, [r3, #0]
 802009c:	f013 0f02 	tst.w	r3, #2
 80200a0:	d106      	bne.n	80200b0 <st_parking_restore_buffer+0x18>
        prep.steps_per_mm = prep.last_steps_per_mm;
        prep.recalculate.flags = 0;
        prep.recalculate.hold_partial_block = prep.recalculate.velocity_profile = On;
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR / prep.steps_per_mm; // Recompute this value.
    } else
        prep.recalculate.flags = 0;
 80200a2:	4b1c      	ldr	r3, [pc, #112]	@ (8020114 <st_parking_restore_buffer+0x7c>)
 80200a4:	2200      	movs	r2, #0
 80200a6:	701a      	strb	r2, [r3, #0]

    pl_block = NULL; // Set to reload next block.
 80200a8:	4b1b      	ldr	r3, [pc, #108]	@ (8020118 <st_parking_restore_buffer+0x80>)
 80200aa:	2200      	movs	r2, #0
 80200ac:	601a      	str	r2, [r3, #0]
 80200ae:	4770      	bx	lr
{
 80200b0:	b530      	push	{r4, r5, lr}
        memcpy(prep.last_st_block, &st_hold_block, sizeof(st_block_t));
 80200b2:	4d1a      	ldr	r5, [pc, #104]	@ (802011c <st_parking_restore_buffer+0x84>)
 80200b4:	4b17      	ldr	r3, [pc, #92]	@ (8020114 <st_parking_restore_buffer+0x7c>)
 80200b6:	695c      	ldr	r4, [r3, #20]
 80200b8:	f105 0e30 	add.w	lr, r5, #48	@ 0x30
 80200bc:	46ac      	mov	ip, r5
 80200be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80200c2:	6020      	str	r0, [r4, #0]
 80200c4:	6061      	str	r1, [r4, #4]
 80200c6:	60a2      	str	r2, [r4, #8]
 80200c8:	60e3      	str	r3, [r4, #12]
 80200ca:	4665      	mov	r5, ip
 80200cc:	3410      	adds	r4, #16
 80200ce:	45f4      	cmp	ip, lr
 80200d0:	d1f4      	bne.n	80200bc <st_parking_restore_buffer+0x24>
 80200d2:	cd03      	ldmia	r5!, {r0, r1}
 80200d4:	6020      	str	r0, [r4, #0]
 80200d6:	6061      	str	r1, [r4, #4]
        st_prep_block = prep.last_st_block;
 80200d8:	4b0e      	ldr	r3, [pc, #56]	@ (8020114 <st_parking_restore_buffer+0x7c>)
 80200da:	6959      	ldr	r1, [r3, #20]
 80200dc:	4a10      	ldr	r2, [pc, #64]	@ (8020120 <st_parking_restore_buffer+0x88>)
 80200de:	6011      	str	r1, [r2, #0]
        prep.steps_remaining = prep.last_steps_remaining;
 80200e0:	699a      	ldr	r2, [r3, #24]
 80200e2:	609a      	str	r2, [r3, #8]
        prep.dt_remainder = prep.last_dt_remainder;
 80200e4:	6a1a      	ldr	r2, [r3, #32]
 80200e6:	605a      	str	r2, [r3, #4]
        prep.steps_per_mm = prep.last_steps_per_mm;
 80200e8:	edd3 7a07 	vldr	s15, [r3, #28]
 80200ec:	edc3 7a03 	vstr	s15, [r3, #12]
        prep.recalculate.flags = 0;
 80200f0:	2200      	movs	r2, #0
 80200f2:	701a      	strb	r2, [r3, #0]
        prep.recalculate.hold_partial_block = prep.recalculate.velocity_profile = On;
 80200f4:	2201      	movs	r2, #1
 80200f6:	701a      	strb	r2, [r3, #0]
 80200f8:	b2d2      	uxtb	r2, r2
 80200fa:	f042 0202 	orr.w	r2, r2, #2
 80200fe:	701a      	strb	r2, [r3, #0]
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR / prep.steps_per_mm; // Recompute this value.
 8020100:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 8020104:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8020108:	ed83 7a04 	vstr	s14, [r3, #16]
    pl_block = NULL; // Set to reload next block.
 802010c:	4b02      	ldr	r3, [pc, #8]	@ (8020118 <st_parking_restore_buffer+0x80>)
 802010e:	2200      	movs	r2, #0
 8020110:	601a      	str	r2, [r3, #0]
}
 8020112:	bd30      	pop	{r4, r5, pc}
 8020114:	20002590 	.word	0x20002590
 8020118:	2000261c 	.word	0x2000261c
 802011c:	200025e0 	.word	0x200025e0
 8020120:	20002618 	.word	0x20002618

08020124 <st_prep_buffer>:
   NOTE: Computation units are in steps, millimeters, and minutes.
*/
void st_prep_buffer (void)
{
    // Block step prep buffer, while in a suspend state and there is no suspend motion to execute.
    if (sys.step_control.end_motion)
 8020124:	4bba      	ldr	r3, [pc, #744]	@ (8020410 <st_prep_buffer+0x2ec>)
 8020126:	7e1b      	ldrb	r3, [r3, #24]
 8020128:	f013 0f01 	tst.w	r3, #1
 802012c:	d103      	bne.n	8020136 <st_prep_buffer+0x12>
{
 802012e:	b570      	push	{r4, r5, r6, lr}
 8020130:	ed2d 8b04 	vpush	{d8-d9}
 8020134:	e39a      	b.n	802086c <st_prep_buffer+0x748>
 8020136:	4770      	bx	lr
        // Determine if we need to load a new planner block or if the block needs to be recomputed.
        if (pl_block == NULL) {

            // Query planner for a queued block

            pl_block = sys.step_control.execute_sys_motion ? plan_get_system_motion_block() : plan_get_current_block();
 8020138:	4bb5      	ldr	r3, [pc, #724]	@ (8020410 <st_prep_buffer+0x2ec>)
 802013a:	7e1b      	ldrb	r3, [r3, #24]
 802013c:	f013 0f04 	tst.w	r3, #4
 8020140:	d01b      	beq.n	802017a <st_prep_buffer+0x56>
 8020142:	f7f6 fca7 	bl	8016a94 <plan_get_system_motion_block>
 8020146:	4604      	mov	r4, r0
 8020148:	4bb2      	ldr	r3, [pc, #712]	@ (8020414 <st_prep_buffer+0x2f0>)
 802014a:	601c      	str	r4, [r3, #0]

            if (pl_block == NULL)
 802014c:	2c00      	cmp	r4, #0
 802014e:	f000 83d4 	beq.w	80208fa <st_prep_buffer+0x7d6>
                return; // No planner blocks. Exit.

            // Check if we need to only recompute the velocity profile or load a new block.
            if (prep.recalculate.velocity_profile) {
 8020152:	4bb1      	ldr	r3, [pc, #708]	@ (8020418 <st_prep_buffer+0x2f4>)
 8020154:	7819      	ldrb	r1, [r3, #0]
 8020156:	f011 0f01 	tst.w	r1, #1
 802015a:	d060      	beq.n	802021e <st_prep_buffer+0xfa>
                if(settings.parking.flags.enabled) {
 802015c:	4baf      	ldr	r3, [pc, #700]	@ (802041c <st_prep_buffer+0x2f8>)
 802015e:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 8020162:	f013 0f01 	tst.w	r3, #1
 8020166:	d010      	beq.n	802018a <st_prep_buffer+0x66>
                    if (prep.recalculate.parking)
 8020168:	f011 0f04 	tst.w	r1, #4
 802016c:	d009      	beq.n	8020182 <st_prep_buffer+0x5e>
                        prep.recalculate.velocity_profile = Off;
 802016e:	4baa      	ldr	r3, [pc, #680]	@ (8020418 <st_prep_buffer+0x2f4>)
 8020170:	781a      	ldrb	r2, [r3, #0]
 8020172:	f36f 0200 	bfc	r2, #0, #1
 8020176:	701a      	strb	r2, [r3, #0]
 8020178:	e00a      	b.n	8020190 <st_prep_buffer+0x6c>
            pl_block = sys.step_control.execute_sys_motion ? plan_get_system_motion_block() : plan_get_current_block();
 802017a:	f7f6 fc91 	bl	8016aa0 <plan_get_current_block>
 802017e:	4604      	mov	r4, r0
 8020180:	e7e2      	b.n	8020148 <st_prep_buffer+0x24>
                    else
                        prep.recalculate.flags = 0;
 8020182:	4ba5      	ldr	r3, [pc, #660]	@ (8020418 <st_prep_buffer+0x2f4>)
 8020184:	2200      	movs	r2, #0
 8020186:	701a      	strb	r2, [r3, #0]
 8020188:	e002      	b.n	8020190 <st_prep_buffer+0x6c>
                } else
                    prep.recalculate.flags = 0;
 802018a:	4ba3      	ldr	r3, [pc, #652]	@ (8020418 <st_prep_buffer+0x2f4>)
 802018c:	2200      	movs	r2, #0
 802018e:	701a      	strb	r2, [r3, #0]
             Compute the velocity profile of a new planner block based on its entry and exit
             speeds, or recompute the profile of a partially-completed planner block if the
             planner has updated it. For a commanded forced-deceleration, such as from a feed
             hold, override the planner velocities and decelerate to the target exit speed.
            */
            prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8020190:	4ba1      	ldr	r3, [pc, #644]	@ (8020418 <st_prep_buffer+0x2f4>)
 8020192:	2200      	movs	r2, #0
 8020194:	629a      	str	r2, [r3, #40]	@ 0x28
            float inv_2_accel = 0.5f / pl_block->acceleration;
 8020196:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 802019a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 802019e:	ee87 8a27 	vdiv.f32	s16, s14, s15

            if (sys.step_control.execute_hold) { // [Forced Deceleration to Zero Velocity]
 80201a2:	4b9b      	ldr	r3, [pc, #620]	@ (8020410 <st_prep_buffer+0x2ec>)
 80201a4:	7e1b      	ldrb	r3, [r3, #24]
 80201a6:	f013 0f02 	tst.w	r3, #2
 80201aa:	f000 80c6 	beq.w	802033a <st_prep_buffer+0x216>
                // Compute velocity profile parameters for a feed hold in-progress. This profile overrides
                // the planner block profile, enforcing a deceleration to zero speed.
                prep.ramp_type = Ramp_Decel;
 80201ae:	4b9a      	ldr	r3, [pc, #616]	@ (8020418 <st_prep_buffer+0x2f4>)
 80201b0:	2202      	movs	r2, #2
 80201b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                // Compute decelerate distance relative to end of block.
                float decel_dist = pl_block->millimeters - inv_2_accel * pl_block->entry_speed_sqr;
 80201b6:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80201ba:	ed94 0a07 	vldr	s0, [r4, #28]
 80201be:	ee60 7a08 	vmul.f32	s15, s0, s16
 80201c2:	ee77 7a67 	vsub.f32	s15, s14, s15
                if(decel_dist < -0.0001f) {
 80201c6:	eddf 6a96 	vldr	s13, [pc, #600]	@ 8020420 <st_prep_buffer+0x2fc>
 80201ca:	eef4 7ae6 	vcmpe.f32	s15, s13
 80201ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201d2:	f100 80a4 	bmi.w	802031e <st_prep_buffer+0x1fa>
                    // Deceleration through entire planner block. End of feed hold is not in this block.
                    prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2.0f * pl_block->acceleration * pl_block->millimeters);
                } else {
                    prep.mm_complete = decel_dist < 0.0001f ? 0.0f : decel_dist; // End of feed hold.
 80201d6:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8020424 <st_prep_buffer+0x300>
 80201da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80201de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201e2:	d501      	bpl.n	80201e8 <st_prep_buffer+0xc4>
 80201e4:	eddf 7a90 	vldr	s15, [pc, #576]	@ 8020428 <st_prep_buffer+0x304>
 80201e8:	4b8b      	ldr	r3, [pc, #556]	@ (8020418 <st_prep_buffer+0x2f4>)
 80201ea:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
                    prep.exit_speed = 0.0f;
 80201ee:	2200      	movs	r2, #0
 80201f0:	635a      	str	r2, [r3, #52]	@ 0x34
                    // prep.decelerate_after = 0.0f;
                    prep.maximum_speed = prep.exit_speed;
                }
            }

            if(state_get() != STATE_HOMING)
 80201f2:	f7fe ff89 	bl	801f108 <state_get>
 80201f6:	2804      	cmp	r0, #4
 80201f8:	d00d      	beq.n	8020216 <st_prep_buffer+0xf2>
                sys.step_control.update_spindle_rpm |= pl_block->spindle.hal->cap.laser; // Force update whenever updating block in laser mode.
 80201fa:	4885      	ldr	r0, [pc, #532]	@ (8020410 <st_prep_buffer+0x2ec>)
 80201fc:	7e03      	ldrb	r3, [r0, #24]
 80201fe:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8020202:	4984      	ldr	r1, [pc, #528]	@ (8020414 <st_prep_buffer+0x2f0>)
 8020204:	6809      	ldr	r1, [r1, #0]
 8020206:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8020208:	7a89      	ldrb	r1, [r1, #10]
 802020a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 802020e:	430a      	orrs	r2, r1
 8020210:	f362 03c3 	bfi	r3, r2, #3, #1
 8020214:	7603      	strb	r3, [r0, #24]

            probe_asserted = false;
 8020216:	4b85      	ldr	r3, [pc, #532]	@ (802042c <st_prep_buffer+0x308>)
 8020218:	2200      	movs	r2, #0
 802021a:	701a      	strb	r2, [r3, #0]
 802021c:	e331      	b.n	8020882 <st_prep_buffer+0x75e>
                st_prep_block = st_prep_block->next;
 802021e:	4b84      	ldr	r3, [pc, #528]	@ (8020430 <st_prep_buffer+0x30c>)
 8020220:	681a      	ldr	r2, [r3, #0]
 8020222:	6855      	ldr	r5, [r2, #4]
 8020224:	601d      	str	r5, [r3, #0]
                uint_fast8_t idx = N_AXIS;
 8020226:	2303      	movs	r3, #3
                    idx--;
 8020228:	3b01      	subs	r3, #1
                    st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL;
 802022a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 802022e:	00d2      	lsls	r2, r2, #3
 8020230:	1c98      	adds	r0, r3, #2
 8020232:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
                } while(idx);
 8020236:	2b00      	cmp	r3, #0
 8020238:	d1f6      	bne.n	8020228 <st_prep_buffer+0x104>
                st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 802023a:	68e3      	ldr	r3, [r4, #12]
 802023c:	00db      	lsls	r3, r3, #3
 802023e:	616b      	str	r3, [r5, #20]
                st_prep_block->direction_bits = pl_block->direction_bits;
 8020240:	7c23      	ldrb	r3, [r4, #16]
 8020242:	762b      	strb	r3, [r5, #24]
                st_prep_block->programmed_rate = pl_block->programmed_rate;
 8020244:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020246:	626b      	str	r3, [r5, #36]	@ 0x24
                st_prep_block->millimeters = pl_block->millimeters;
 8020248:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 802024c:	ed85 7a08 	vstr	s14, [r5, #32]
                st_prep_block->steps_per_mm = (float)pl_block->step_event_count / pl_block->millimeters;
 8020250:	edd4 7a03 	vldr	s15, [r4, #12]
 8020254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020258:	eec7 6a87 	vdiv.f32	s13, s15, s14
 802025c:	edc5 6a07 	vstr	s13, [r5, #28]
                st_prep_block->spindle = pl_block->spindle.hal;
 8020260:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8020262:	636b      	str	r3, [r5, #52]	@ 0x34
                st_prep_block->output_commands = pl_block->output_commands;
 8020264:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8020266:	62eb      	str	r3, [r5, #44]	@ 0x2c
                st_prep_block->overrides = pl_block->overrides;
 8020268:	7ca3      	ldrb	r3, [r4, #18]
 802026a:	766b      	strb	r3, [r5, #25]
                st_prep_block->offset_id = pl_block->offset_id;
 802026c:	f994 3011 	ldrsb.w	r3, [r4, #17]
 8020270:	f885 3032 	strb.w	r3, [r5, #50]	@ 0x32
                st_prep_block->backlash_motion = pl_block->condition.backlash_motion;
 8020274:	7d23      	ldrb	r3, [r4, #20]
 8020276:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 802027a:	f885 3030 	strb.w	r3, [r5, #48]	@ 0x30
                st_prep_block->message = pl_block->message;
 802027e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8020280:	62ab      	str	r3, [r5, #40]	@ 0x28
                pl_block->message = NULL;
 8020282:	2300      	movs	r3, #0
 8020284:	64a3      	str	r3, [r4, #72]	@ 0x48
                prep.steps_per_mm = st_prep_block->steps_per_mm;
 8020286:	edd5 7a07 	vldr	s15, [r5, #28]
 802028a:	4b63      	ldr	r3, [pc, #396]	@ (8020418 <st_prep_buffer+0x2f4>)
 802028c:	edc3 7a03 	vstr	s15, [r3, #12]
                prep.steps_remaining = pl_block->step_event_count;
 8020290:	68e2      	ldr	r2, [r4, #12]
 8020292:	609a      	str	r2, [r3, #8]
                prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR / prep.steps_per_mm;
 8020294:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 8020298:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802029c:	ed83 7a04 	vstr	s14, [r3, #16]
                prep.dt_remainder = prep.target_position = 0.0f; // Reset for new segment block
 80202a0:	2200      	movs	r2, #0
 80202a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80202a4:	605a      	str	r2, [r3, #4]
                if (sys.step_control.execute_hold || prep.recalculate.decel_override) {
 80202a6:	4b5a      	ldr	r3, [pc, #360]	@ (8020410 <st_prep_buffer+0x2ec>)
 80202a8:	7e1b      	ldrb	r3, [r3, #24]
 80202aa:	f013 0f02 	tst.w	r3, #2
 80202ae:	d102      	bne.n	80202b6 <st_prep_buffer+0x192>
 80202b0:	f011 0f08 	tst.w	r1, #8
 80202b4:	d021      	beq.n	80202fa <st_prep_buffer+0x1d6>
                    prep.current_speed = prep.exit_speed;
 80202b6:	4b58      	ldr	r3, [pc, #352]	@ (8020418 <st_prep_buffer+0x2f4>)
 80202b8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80202bc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
                    pl_block->entry_speed_sqr = prep.exit_speed * prep.exit_speed;
 80202c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80202c4:	edc4 7a07 	vstr	s15, [r4, #28]
                    prep.recalculate.decel_override = Off;
 80202c8:	781a      	ldrb	r2, [r3, #0]
 80202ca:	f36f 02c3 	bfc	r2, #3, #1
 80202ce:	701a      	strb	r2, [r3, #0]
                if ((st_prep_block->dynamic_rpm = pl_block->condition.is_rpm_rate_adjusted)) {
 80202d0:	7d23      	ldrb	r3, [r4, #20]
 80202d2:	f3c3 12c0 	ubfx	r2, r3, #7, #1
 80202d6:	f885 2031 	strb.w	r2, [r5, #49]	@ 0x31
 80202da:	09db      	lsrs	r3, r3, #7
 80202dc:	d018      	beq.n	8020310 <st_prep_buffer+0x1ec>
                    prep.inv_feedrate = pl_block->condition.is_laser_ppi_mode ? 1.0f : 1.0f / pl_block->programmed_rate;
 80202de:	7d63      	ldrb	r3, [r4, #21]
 80202e0:	f013 0f01 	tst.w	r3, #1
 80202e4:	d111      	bne.n	802030a <st_prep_buffer+0x1e6>
 80202e6:	ed94 7a0d 	vldr	s14, [r4, #52]	@ 0x34
 80202ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80202ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80202f2:	4b49      	ldr	r3, [pc, #292]	@ (8020418 <st_prep_buffer+0x2f4>)
 80202f4:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
 80202f8:	e74a      	b.n	8020190 <st_prep_buffer+0x6c>
                    prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 80202fa:	ed94 0a07 	vldr	s0, [r4, #28]
 80202fe:	f007 fb73 	bl	80279e8 <sqrtf>
 8020302:	4b45      	ldr	r3, [pc, #276]	@ (8020418 <st_prep_buffer+0x2f4>)
 8020304:	ed83 0a0b 	vstr	s0, [r3, #44]	@ 0x2c
 8020308:	e7e2      	b.n	80202d0 <st_prep_buffer+0x1ac>
                    prep.inv_feedrate = pl_block->condition.is_laser_ppi_mode ? 1.0f : 1.0f / pl_block->programmed_rate;
 802030a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802030e:	e7f0      	b.n	80202f2 <st_prep_buffer+0x1ce>
                    st_prep_block->dynamic_rpm = !!pl_block->spindle.css;
 8020310:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020312:	3b00      	subs	r3, #0
 8020314:	bf18      	it	ne
 8020316:	2301      	movne	r3, #1
 8020318:	f885 3031 	strb.w	r3, [r5, #49]	@ 0x31
 802031c:	e738      	b.n	8020190 <st_prep_buffer+0x6c>
                    prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2.0f * pl_block->acceleration * pl_block->millimeters);
 802031e:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 8020322:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8020326:	ee27 7a27 	vmul.f32	s14, s14, s15
 802032a:	ee30 0a47 	vsub.f32	s0, s0, s14
 802032e:	f007 fb5b 	bl	80279e8 <sqrtf>
 8020332:	4b39      	ldr	r3, [pc, #228]	@ (8020418 <st_prep_buffer+0x2f4>)
 8020334:	ed83 0a0d 	vstr	s0, [r3, #52]	@ 0x34
 8020338:	e75b      	b.n	80201f2 <st_prep_buffer+0xce>
                prep.ramp_type = Ramp_Accel; // Initialize as acceleration ramp.
 802033a:	4a37      	ldr	r2, [pc, #220]	@ (8020418 <st_prep_buffer+0x2f4>)
 802033c:	2100      	movs	r1, #0
 802033e:	f882 1024 	strb.w	r1, [r2, #36]	@ 0x24
                prep.accelerate_until = pl_block->millimeters;
 8020342:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8020344:	6391      	str	r1, [r2, #56]	@ 0x38
                if (sys.step_control.execute_sys_motion)
 8020346:	f013 0f04 	tst.w	r3, #4
 802034a:	d03e      	beq.n	80203ca <st_prep_buffer+0x2a6>
                    prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 802034c:	eddf 8a36 	vldr	s17, [pc, #216]	@ 8020428 <st_prep_buffer+0x304>
 8020350:	edc2 8a0d 	vstr	s17, [r2, #52]	@ 0x34
                float nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8020354:	4c2f      	ldr	r4, [pc, #188]	@ (8020414 <st_prep_buffer+0x2f0>)
 8020356:	6820      	ldr	r0, [r4, #0]
 8020358:	f7f6 fbd2 	bl	8016b00 <plan_compute_profile_nominal_speed>
                float nominal_speed_sqr = nominal_speed * nominal_speed;
 802035c:	ee60 6a00 	vmul.f32	s13, s0, s0
                float intersect_distance = 0.5f * (pl_block->millimeters + inv_2_accel * (pl_block->entry_speed_sqr - exit_speed_sqr));
 8020360:	6823      	ldr	r3, [r4, #0]
 8020362:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8020366:	ed93 7a07 	vldr	s14, [r3, #28]
 802036a:	ee37 7a68 	vsub.f32	s14, s14, s17
 802036e:	ee27 7a08 	vmul.f32	s14, s14, s16
 8020372:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020376:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 802037a:	ee67 7a87 	vmul.f32	s15, s15, s14
                prep.target_feed = nominal_speed;
 802037e:	4a26      	ldr	r2, [pc, #152]	@ (8020418 <st_prep_buffer+0x2f4>)
 8020380:	ed82 0a11 	vstr	s0, [r2, #68]	@ 0x44
                if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 8020384:	ed93 7a07 	vldr	s14, [r3, #28]
 8020388:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802038c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020390:	dd50      	ble.n	8020434 <st_prep_buffer+0x310>
                    prep.accelerate_until = pl_block->millimeters - inv_2_accel * (pl_block->entry_speed_sqr - nominal_speed_sqr);
 8020392:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 8020396:	ee77 7a66 	vsub.f32	s15, s14, s13
 802039a:	ee67 7a88 	vmul.f32	s15, s15, s16
 802039e:	ee76 7a67 	vsub.f32	s15, s12, s15
 80203a2:	edc2 7a0e 	vstr	s15, [r2, #56]	@ 0x38
                    if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 80203a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80203aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203ae:	d916      	bls.n	80203de <st_prep_buffer+0x2ba>
                        prep.decelerate_after = inv_2_accel * (nominal_speed_sqr - exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 80203b0:	ee76 7ae8 	vsub.f32	s15, s13, s17
 80203b4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80203b8:	4b17      	ldr	r3, [pc, #92]	@ (8020418 <st_prep_buffer+0x2f4>)
 80203ba:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                        prep.maximum_speed = nominal_speed;
 80203be:	ed83 0a0c 	vstr	s0, [r3, #48]	@ 0x30
                        prep.ramp_type = Ramp_DecelOverride;
 80203c2:	2203      	movs	r2, #3
 80203c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80203c8:	e713      	b.n	80201f2 <st_prep_buffer+0xce>
                    exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 80203ca:	f7f6 fb77 	bl	8016abc <plan_get_exec_block_exit_speed_sqr>
 80203ce:	eef0 8a40 	vmov.f32	s17, s0
                    prep.exit_speed = sqrtf(exit_speed_sqr);
 80203d2:	f007 fb09 	bl	80279e8 <sqrtf>
 80203d6:	4b10      	ldr	r3, [pc, #64]	@ (8020418 <st_prep_buffer+0x2f4>)
 80203d8:	ed83 0a0d 	vstr	s0, [r3, #52]	@ 0x34
 80203dc:	e7ba      	b.n	8020354 <st_prep_buffer+0x230>
                        prep.ramp_type = Ramp_Decel;
 80203de:	4614      	mov	r4, r2
 80203e0:	2202      	movs	r2, #2
 80203e2:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
                        prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2.0f * pl_block->acceleration * pl_block->millimeters);
 80203e6:	ed93 0a07 	vldr	s0, [r3, #28]
 80203ea:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80203ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80203f2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80203f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80203fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80203fe:	f007 faf3 	bl	80279e8 <sqrtf>
 8020402:	ed84 0a0d 	vstr	s0, [r4, #52]	@ 0x34
                        prep.recalculate.decel_override = On; // Flag to load next block as deceleration override.
 8020406:	7823      	ldrb	r3, [r4, #0]
 8020408:	f043 0308 	orr.w	r3, r3, #8
 802040c:	7023      	strb	r3, [r4, #0]
 802040e:	e6f0      	b.n	80201f2 <st_prep_buffer+0xce>
 8020410:	20001bbc 	.word	0x20001bbc
 8020414:	2000261c 	.word	0x2000261c
 8020418:	20002590 	.word	0x20002590
 802041c:	200022f4 	.word	0x200022f4
 8020420:	b8d1b717 	.word	0xb8d1b717
 8020424:	38d1b717 	.word	0x38d1b717
 8020428:	00000000 	.word	0x00000000
 802042c:	20002630 	.word	0x20002630
 8020430:	20002618 	.word	0x20002618
                } else if (intersect_distance > 0.0f) {
 8020434:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802043c:	dd43      	ble.n	80204c6 <st_prep_buffer+0x3a2>
                    if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 802043e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8020442:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802044a:	dd37      	ble.n	80204bc <st_prep_buffer+0x398>
                        prep.decelerate_after = inv_2_accel * (nominal_speed_sqr - exit_speed_sqr);
 802044c:	ee36 7ae8 	vsub.f32	s14, s13, s17
 8020450:	ee27 7a08 	vmul.f32	s14, s14, s16
 8020454:	4ab6      	ldr	r2, [pc, #728]	@ (8020730 <st_prep_buffer+0x60c>)
 8020456:	ed82 7a0f 	vstr	s14, [r2, #60]	@ 0x3c
                        if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 802045a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802045e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020462:	d519      	bpl.n	8020498 <st_prep_buffer+0x374>
                            prep.maximum_speed = nominal_speed;
 8020464:	ed82 0a0c 	vstr	s0, [r2, #48]	@ 0x30
                            if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 8020468:	edd3 7a07 	vldr	s15, [r3, #28]
 802046c:	eef4 7a66 	vcmp.f32	s15, s13
 8020470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020474:	d104      	bne.n	8020480 <st_prep_buffer+0x35c>
                                prep.ramp_type = Ramp_Cruise;
 8020476:	4613      	mov	r3, r2
 8020478:	2201      	movs	r2, #1
 802047a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 802047e:	e6b8      	b.n	80201f2 <st_prep_buffer+0xce>
                                prep.accelerate_until -= inv_2_accel * (nominal_speed_sqr - pl_block->entry_speed_sqr);
 8020480:	4bab      	ldr	r3, [pc, #684]	@ (8020730 <st_prep_buffer+0x60c>)
 8020482:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8020486:	ee76 7ae7 	vsub.f32	s15, s13, s15
 802048a:	ee67 7a88 	vmul.f32	s15, s15, s16
 802048e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020492:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
 8020496:	e6ac      	b.n	80201f2 <st_prep_buffer+0xce>
                            prep.accelerate_until = prep.decelerate_after = intersect_distance;
 8020498:	4ca5      	ldr	r4, [pc, #660]	@ (8020730 <st_prep_buffer+0x60c>)
 802049a:	edc4 7a0f 	vstr	s15, [r4, #60]	@ 0x3c
 802049e:	edc4 7a0e 	vstr	s15, [r4, #56]	@ 0x38
                            prep.maximum_speed = sqrtf(2.0f * pl_block->acceleration * intersect_distance + exit_speed_sqr);
 80204a2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80204a6:	ee37 7a07 	vadd.f32	s14, s14, s14
 80204aa:	ee27 0a27 	vmul.f32	s0, s14, s15
 80204ae:	ee30 0a28 	vadd.f32	s0, s0, s17
 80204b2:	f007 fa99 	bl	80279e8 <sqrtf>
 80204b6:	ed84 0a0c 	vstr	s0, [r4, #48]	@ 0x30
 80204ba:	e69a      	b.n	80201f2 <st_prep_buffer+0xce>
                        prep.ramp_type = Ramp_Decel;
 80204bc:	4b9c      	ldr	r3, [pc, #624]	@ (8020730 <st_prep_buffer+0x60c>)
 80204be:	2202      	movs	r2, #2
 80204c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80204c4:	e695      	b.n	80201f2 <st_prep_buffer+0xce>
                    prep.accelerate_until = 0.0f;
 80204c6:	4b9a      	ldr	r3, [pc, #616]	@ (8020730 <st_prep_buffer+0x60c>)
 80204c8:	2200      	movs	r2, #0
 80204ca:	639a      	str	r2, [r3, #56]	@ 0x38
                    prep.maximum_speed = prep.exit_speed;
 80204cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80204ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80204d0:	e68f      	b.n	80201f2 <st_prep_buffer+0xce>
        float speed_var; // Speed worker variable
        float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
        float minimum_mm = mm_remaining - prep.req_mm_increment; // Guarantee at least one step.

        if (minimum_mm < 0.0f)
            minimum_mm = 0.0f;
 80204d2:	ed9f 5a9a 	vldr	s10, [pc, #616]	@ 802073c <st_prep_buffer+0x618>
 80204d6:	e1ef      	b.n	80208b8 <st_prep_buffer+0x794>
        do {

            switch (prep.ramp_type) {

                case Ramp_DecelOverride:
                    speed_var = pl_block->acceleration * time_var;
 80204d8:	ed92 6a09 	vldr	s12, [r2, #36]	@ 0x24
 80204dc:	ee26 6a27 	vmul.f32	s12, s12, s15
                    if ((prep.current_speed - prep.maximum_speed) <= speed_var) {
 80204e0:	4b93      	ldr	r3, [pc, #588]	@ (8020730 <st_prep_buffer+0x60c>)
 80204e2:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80204e6:	edd3 5a0c 	vldr	s11, [r3, #48]	@ 0x30
 80204ea:	ee76 4ae5 	vsub.f32	s9, s13, s11
 80204ee:	eef4 4ac6 	vcmpe.f32	s9, s12
 80204f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204f6:	d811      	bhi.n	802051c <st_prep_buffer+0x3f8>
                        // Cruise or cruise-deceleration types only for deceleration override.
                        mm_remaining = prep.accelerate_until;
 80204f8:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
                        time_var = 2.0f * (pl_block->millimeters - mm_remaining) / (prep.current_speed + prep.maximum_speed);
 80204fc:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 8020500:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8020504:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8020508:	ee76 6aa5 	vadd.f32	s13, s13, s11
 802050c:	eec6 7a26 	vdiv.f32	s15, s12, s13
                        prep.ramp_type = Ramp_Cruise;
 8020510:	2001      	movs	r0, #1
 8020512:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
                        prep.current_speed = prep.maximum_speed;
 8020516:	edc3 5a0b 	vstr	s11, [r3, #44]	@ 0x2c
 802051a:	e074      	b.n	8020606 <st_prep_buffer+0x4e2>
                    } else {// Mid-deceleration override ramp.
                        mm_remaining -= time_var * (prep.current_speed - 0.5f * speed_var);
 802051c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8020520:	ee66 5a25 	vmul.f32	s11, s12, s11
 8020524:	ee76 5ae5 	vsub.f32	s11, s13, s11
 8020528:	ee65 5aa7 	vmul.f32	s11, s11, s15
 802052c:	ee38 8a65 	vsub.f32	s16, s16, s11
                        prep.current_speed -= speed_var;
 8020530:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8020534:	4b7e      	ldr	r3, [pc, #504]	@ (8020730 <st_prep_buffer+0x60c>)
 8020536:	edc3 6a0b 	vstr	s13, [r3, #44]	@ 0x2c
 802053a:	e064      	b.n	8020606 <st_prep_buffer+0x4e2>
                    }
                    break;

                case Ramp_Accel:
                    // NOTE: Acceleration ramp only computes during first do-while loop.
                    speed_var = pl_block->acceleration * time_var;
 802053c:	edd2 5a09 	vldr	s11, [r2, #36]	@ 0x24
 8020540:	ee65 5aa7 	vmul.f32	s11, s11, s15
                    mm_remaining -= time_var * (prep.current_speed + 0.5f * speed_var);
 8020544:	4b7a      	ldr	r3, [pc, #488]	@ (8020730 <st_prep_buffer+0x60c>)
 8020546:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 802054a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 802054e:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8020552:	ee76 6a26 	vadd.f32	s13, s12, s13
 8020556:	ee66 6aa7 	vmul.f32	s13, s13, s15
 802055a:	ee38 8a66 	vsub.f32	s16, s16, s13
                    if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 802055e:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8020562:	eef4 6ac8 	vcmpe.f32	s13, s16
 8020566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802056a:	dd1d      	ble.n	80205a8 <st_prep_buffer+0x484>
                        // Acceleration-cruise, acceleration-deceleration ramp junction, or end of block.
                        mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
                        time_var = 2.0f * (pl_block->millimeters - mm_remaining) / (prep.current_speed + prep.maximum_speed);
 802056c:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 8020570:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8020574:	ee77 5aa7 	vadd.f32	s11, s15, s15
 8020578:	edd3 4a0c 	vldr	s9, [r3, #48]	@ 0x30
 802057c:	ee36 6a24 	vadd.f32	s12, s12, s9
 8020580:	eec5 7a86 	vdiv.f32	s15, s11, s12
                        prep.ramp_type = mm_remaining == prep.decelerate_after ? Ramp_Decel : Ramp_Cruise;
 8020584:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 8020588:	eef4 6a46 	vcmp.f32	s13, s12
 802058c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020590:	d108      	bne.n	80205a4 <st_prep_buffer+0x480>
 8020592:	2002      	movs	r0, #2
 8020594:	4b66      	ldr	r3, [pc, #408]	@ (8020730 <st_prep_buffer+0x60c>)
 8020596:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
                        prep.current_speed = prep.maximum_speed;
 802059a:	edc3 4a0b 	vstr	s9, [r3, #44]	@ 0x2c
                        mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 802059e:	eeb0 8a66 	vmov.f32	s16, s13
 80205a2:	e030      	b.n	8020606 <st_prep_buffer+0x4e2>
                        prep.ramp_type = mm_remaining == prep.decelerate_after ? Ramp_Decel : Ramp_Cruise;
 80205a4:	2001      	movs	r0, #1
 80205a6:	e7f5      	b.n	8020594 <st_prep_buffer+0x470>
                    } else // Acceleration only.
                        prep.current_speed += speed_var;
 80205a8:	ee36 6a25 	vadd.f32	s12, s12, s11
 80205ac:	4b60      	ldr	r3, [pc, #384]	@ (8020730 <st_prep_buffer+0x60c>)
 80205ae:	ed83 6a0b 	vstr	s12, [r3, #44]	@ 0x2c
 80205b2:	e028      	b.n	8020606 <st_prep_buffer+0x4e2>

                case Ramp_Cruise:
                    // NOTE: mm_var used to retain the last mm_remaining for incomplete segment time_var calculations.
                    // NOTE: If maximum_speed*time_var value is too low, round-off can cause mm_var to not change. To
                    //   prevent this, simply enforce a minimum speed threshold in the planner.
                    mm_var = mm_remaining - prep.maximum_speed * time_var;
 80205b4:	4b5e      	ldr	r3, [pc, #376]	@ (8020730 <st_prep_buffer+0x60c>)
 80205b6:	edd3 5a0c 	vldr	s11, [r3, #48]	@ 0x30
 80205ba:	ee65 6aa7 	vmul.f32	s13, s11, s15
 80205be:	ee78 6a66 	vsub.f32	s13, s16, s13
                    if (mm_var < prep.decelerate_after) { // End of cruise.
 80205c2:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 80205c6:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80205ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80205ce:	dd5a      	ble.n	8020686 <st_prep_buffer+0x562>
                        // Cruise-deceleration junction or end of block.
                        time_var = (mm_remaining - prep.decelerate_after) / prep.maximum_speed;
 80205d0:	ee38 8a46 	vsub.f32	s16, s16, s12
 80205d4:	eec8 7a25 	vdiv.f32	s15, s16, s11
                        mm_remaining = prep.decelerate_after; // NOTE: 0.0 at EOB
                        prep.ramp_type = Ramp_Decel;
 80205d8:	2002      	movs	r0, #2
 80205da:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
                        mm_remaining = prep.decelerate_after; // NOTE: 0.0 at EOB
 80205de:	eeb0 8a46 	vmov.f32	s16, s12
 80205e2:	e010      	b.n	8020606 <st_prep_buffer+0x4e2>
                            prep.current_speed -= speed_var;
                            break; // Segment complete. Exit switch-case statement. Continue do-while loop.
                        }
                    }
                    // Otherwise, at end of block or end of forced-deceleration.
                    time_var = 2.0f * (mm_remaining - prep.mm_complete) / (prep.current_speed + prep.exit_speed);
 80205e4:	4b52      	ldr	r3, [pc, #328]	@ (8020730 <st_prep_buffer+0x60c>)
 80205e6:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 80205ea:	ee38 8a46 	vsub.f32	s16, s16, s12
 80205ee:	ee38 8a08 	vadd.f32	s16, s16, s16
 80205f2:	edd3 5a0d 	vldr	s11, [r3, #52]	@ 0x34
 80205f6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80205fa:	eec8 7a26 	vdiv.f32	s15, s16, s13
                    mm_remaining = prep.mm_complete;
                    prep.current_speed = prep.exit_speed;
 80205fe:	edc3 5a0b 	vstr	s11, [r3, #44]	@ 0x2c
                    mm_remaining = prep.mm_complete;
 8020602:	eeb0 8a46 	vmov.f32	s16, s12
            }

            dt += time_var; // Add computed ramp time to total segment time.
 8020606:	ee78 8aa7 	vadd.f32	s17, s17, s15

            if (dt < dt_max)
 802060a:	eeb4 7ae8 	vcmpe.f32	s14, s17
 802060e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020612:	dd3b      	ble.n	802068c <st_prep_buffer+0x568>
                time_var = dt_max - dt;// **Incomplete** At ramp junction.
 8020614:	ee77 7a68 	vsub.f32	s15, s14, s17
                    time_var = dt_max - dt;
                } else
                    break; // **Complete** Exit loop. Segment execution time maxed.
            }

        } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8020618:	4b45      	ldr	r3, [pc, #276]	@ (8020730 <st_prep_buffer+0x60c>)
 802061a:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 802061e:	eef4 6ac8 	vcmpe.f32	s13, s16
 8020622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020626:	d53d      	bpl.n	80206a4 <st_prep_buffer+0x580>
            switch (prep.ramp_type) {
 8020628:	4b41      	ldr	r3, [pc, #260]	@ (8020730 <st_prep_buffer+0x60c>)
 802062a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 802062e:	2b01      	cmp	r3, #1
 8020630:	d0c0      	beq.n	80205b4 <st_prep_buffer+0x490>
 8020632:	2b03      	cmp	r3, #3
 8020634:	f43f af50 	beq.w	80204d8 <st_prep_buffer+0x3b4>
 8020638:	2b00      	cmp	r3, #0
 802063a:	f43f af7f 	beq.w	802053c <st_prep_buffer+0x418>
                    speed_var = pl_block->acceleration * time_var; // Used as delta speed (mm/min)
 802063e:	edd2 5a09 	vldr	s11, [r2, #36]	@ 0x24
 8020642:	ee65 5aa7 	vmul.f32	s11, s11, s15
                    if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8020646:	4b3a      	ldr	r3, [pc, #232]	@ (8020730 <st_prep_buffer+0x60c>)
 8020648:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 802064c:	eef4 6ae5 	vcmpe.f32	s13, s11
 8020650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020654:	ddc6      	ble.n	80205e4 <st_prep_buffer+0x4c0>
                        mm_var = mm_remaining - time_var * (prep.current_speed - 0.5f * speed_var); // (mm)
 8020656:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 802065a:	ee25 6a86 	vmul.f32	s12, s11, s12
 802065e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8020662:	ee26 6a27 	vmul.f32	s12, s12, s15
 8020666:	ee38 6a46 	vsub.f32	s12, s16, s12
                        if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 802066a:	edd3 4a0a 	vldr	s9, [r3, #40]	@ 0x28
 802066e:	eef4 4ac6 	vcmpe.f32	s9, s12
 8020672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020676:	d5b5      	bpl.n	80205e4 <st_prep_buffer+0x4c0>
                            prep.current_speed -= speed_var;
 8020678:	ee76 6ae5 	vsub.f32	s13, s13, s11
 802067c:	edc3 6a0b 	vstr	s13, [r3, #44]	@ 0x2c
                            mm_remaining = mm_var;
 8020680:	eeb0 8a46 	vmov.f32	s16, s12
                            break; // Segment complete. Exit switch-case statement. Continue do-while loop.
 8020684:	e7bf      	b.n	8020606 <st_prep_buffer+0x4e2>
                        mm_remaining = mm_var;
 8020686:	eeb0 8a66 	vmov.f32	s16, s13
 802068a:	e7bc      	b.n	8020606 <st_prep_buffer+0x4e2>
                if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 802068c:	eeb4 8ac5 	vcmpe.f32	s16, s10
 8020690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020694:	dd06      	ble.n	80206a4 <st_prep_buffer+0x580>
                    dt_max += DT_SEGMENT;
 8020696:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8020734 <st_prep_buffer+0x610>
 802069a:	ee37 7a27 	vadd.f32	s14, s14, s15
                    time_var = dt_max - dt;
 802069e:	ee77 7a68 	vsub.f32	s15, s14, s17
 80206a2:	e7b9      	b.n	8020618 <st_prep_buffer+0x4f4>

        /* -----------------------------------------------------------------------------------
           Compute spindle spindle speed for step segment
        */

        if (sys.step_control.update_spindle_rpm || st_prep_block->dynamic_rpm) {
 80206a4:	4b24      	ldr	r3, [pc, #144]	@ (8020738 <st_prep_buffer+0x614>)
 80206a6:	7e1b      	ldrb	r3, [r3, #24]
 80206a8:	f013 0f08 	tst.w	r3, #8
 80206ac:	d103      	bne.n	80206b6 <st_prep_buffer+0x592>
 80206ae:	f891 3031 	ldrb.w	r3, [r1, #49]	@ 0x31
 80206b2:	2b00      	cmp	r3, #0
 80206b4:	d068      	beq.n	8020788 <st_prep_buffer+0x664>

            float rpm;

            if (pl_block->spindle.state.on) {
 80206b6:	f892 303c 	ldrb.w	r3, [r2, #60]	@ 0x3c
 80206ba:	f013 0f01 	tst.w	r3, #1
 80206be:	d03f      	beq.n	8020740 <st_prep_buffer+0x61c>
                if(pl_block->spindle.css) {
 80206c0:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80206c2:	b1d9      	cbz	r1, 80206fc <st_prep_buffer+0x5d8>
                    float npos = (float)(pl_block->step_event_count - prep.steps_remaining) / (float)pl_block->step_event_count;
 80206c4:	4b1a      	ldr	r3, [pc, #104]	@ (8020730 <st_prep_buffer+0x60c>)
 80206c6:	689b      	ldr	r3, [r3, #8]
 80206c8:	68d0      	ldr	r0, [r2, #12]
 80206ca:	1ac3      	subs	r3, r0, r3
 80206cc:	ee07 3a90 	vmov	s15, r3
 80206d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80206d4:	ee07 0a10 	vmov	s14, r0
 80206d8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80206dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 80206e0:	6c50      	ldr	r0, [r2, #68]	@ 0x44
                                           pl_block->spindle.rpm + pl_block->spindle.css->delta_rpm * npos,
 80206e2:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
 80206e6:	edd1 7a02 	vldr	s15, [r1, #8]
 80206ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
                                            pl_block->spindle.hal->param->override_pct);
 80206ee:	6843      	ldr	r3, [r0, #4]
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 80206f0:	68d9      	ldr	r1, [r3, #12]
 80206f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80206f6:	f7fe f8e9 	bl	801e8cc <spindle_set_rpm>
 80206fa:	e027      	b.n	802074c <st_prep_buffer+0x628>
                } else {
                    // NOTE: Feed and rapid overrides are independent of PWM value and do not alter laser power/rate.
                    // If current_speed is zero, then may need to be rpm_min*(100/MAX_SPINDLE_RPM_OVERRIDE)
                    // but this would be instantaneous only and during a motion. May not matter at all.
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 80206fc:	6c50      	ldr	r0, [r2, #68]	@ 0x44
                                           pl_block->condition.is_rpm_rate_adjusted && !pl_block->condition.is_laser_ppi_mode
 80206fe:	8a93      	ldrh	r3, [r2, #20]
 8020700:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 8020704:	2b80      	cmp	r3, #128	@ 0x80
 8020706:	d006      	beq.n	8020716 <st_prep_buffer+0x5f2>
 8020708:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
                                            ? pl_block->spindle.rpm * prep.current_speed * prep.inv_feedrate
                                            : pl_block->spindle.rpm, pl_block->spindle.hal->param->override_pct);
 802070c:	6843      	ldr	r3, [r0, #4]
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 802070e:	68d9      	ldr	r1, [r3, #12]
 8020710:	f7fe f8dc 	bl	801e8cc <spindle_set_rpm>
 8020714:	e01a      	b.n	802074c <st_prep_buffer+0x628>
                                            ? pl_block->spindle.rpm * prep.current_speed * prep.inv_feedrate
 8020716:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
 802071a:	4b05      	ldr	r3, [pc, #20]	@ (8020730 <st_prep_buffer+0x60c>)
 802071c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8020720:	ee20 0a27 	vmul.f32	s0, s0, s15
 8020724:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 8020728:	ee20 0a27 	vmul.f32	s0, s0, s15
 802072c:	e7ee      	b.n	802070c <st_prep_buffer+0x5e8>
 802072e:	bf00      	nop
 8020730:	20002590 	.word	0x20002590
 8020734:	392ec33e 	.word	0x392ec33e
 8020738:	20001bbc 	.word	0x20001bbc
 802073c:	00000000 	.word	0x00000000
                }
            } else
                pl_block->spindle.hal->param->rpm = rpm = 0.0f;
 8020740:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8020742:	685b      	ldr	r3, [r3, #4]
 8020744:	ed1f 0a03 	vldr	s0, [pc, #-12]	@ 802073c <st_prep_buffer+0x618>
 8020748:	ed83 0a00 	vstr	s0, [r3]

            if(rpm != prep.current_spindle_rpm) {
 802074c:	4b8b      	ldr	r3, [pc, #556]	@ (802097c <st_prep_buffer+0x858>)
 802074e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8020752:	eef4 7a40 	vcmp.f32	s15, s0
 8020756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802075a:	d015      	beq.n	8020788 <st_prep_buffer+0x664>
                if(pl_block->spindle.hal->get_pwm != NULL) {
 802075c:	4b88      	ldr	r3, [pc, #544]	@ (8020980 <st_prep_buffer+0x85c>)
 802075e:	681b      	ldr	r3, [r3, #0]
 8020760:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8020762:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8020764:	2900      	cmp	r1, #0
 8020766:	f000 80ae 	beq.w	80208c6 <st_prep_buffer+0x7a2>
                    prep.current_spindle_rpm = rpm;
 802076a:	4a84      	ldr	r2, [pc, #528]	@ (802097c <st_prep_buffer+0x858>)
 802076c:	ed82 0a13 	vstr	s0, [r2, #76]	@ 0x4c
                    prep_segment->update_pwm = pl_block->spindle.hal->update_pwm;
 8020770:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8020772:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8020774:	62ea      	str	r2, [r5, #44]	@ 0x2c
                    prep_segment->spindle_pwm = pl_block->spindle.hal->get_pwm(pl_block->spindle.hal, rpm);
 8020776:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8020778:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 802077a:	4798      	blx	r3
 802077c:	61e8      	str	r0, [r5, #28]
                } else {
                    prep_segment->update_rpm = pl_block->spindle.hal->update_rpm;
                    prep.current_spindle_rpm = prep_segment->spindle_rpm = rpm;
                }
                sys.step_control.update_spindle_rpm = Off;
 802077e:	4b81      	ldr	r3, [pc, #516]	@ (8020984 <st_prep_buffer+0x860>)
 8020780:	7e1a      	ldrb	r2, [r3, #24]
 8020782:	f36f 02c3 	bfc	r2, #3, #1
 8020786:	761a      	strb	r2, [r3, #24]
           However, since floats have only 7.2 significant digits, long moves with extremely
           high step counts can exceed the precision of floats, which can lead to lost steps.
           Fortunately, this scenario is highly unlikely and unrealistic in CNC machines
           supported by Grbl (i.e. exceeding 10 meters axis travel at 200 step/mm).
        */
        float step_dist_remaining = prep.steps_per_mm * mm_remaining; // Convert mm_remaining to steps
 8020788:	4e7c      	ldr	r6, [pc, #496]	@ (802097c <st_prep_buffer+0x858>)
 802078a:	edd6 9a03 	vldr	s19, [r6, #12]
 802078e:	ee69 9a88 	vmul.f32	s19, s19, s16
        uint32_t n_steps_remaining = (uint32_t)ceilf(step_dist_remaining); // Round-up current steps remaining
 8020792:	eeb0 0a69 	vmov.f32	s0, s19
 8020796:	f007 fa35 	bl	8027c04 <ceilf>
 802079a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 802079e:	ee17 4a90 	vmov	r4, s15

        prep_segment->n_step = (uint_fast16_t)(prep.steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 80207a2:	68b3      	ldr	r3, [r6, #8]
 80207a4:	1b1a      	subs	r2, r3, r4
 80207a6:	61aa      	str	r2, [r5, #24]

        // Bail if we are at the end of a feed hold and don't have a step to execute.
        if (prep_segment->n_step == 0 && sys.step_control.execute_hold) {
 80207a8:	b92a      	cbnz	r2, 80207b6 <st_prep_buffer+0x692>
 80207aa:	4a76      	ldr	r2, [pc, #472]	@ (8020984 <st_prep_buffer+0x860>)
 80207ac:	7e12      	ldrb	r2, [r2, #24]
 80207ae:	f012 0f02 	tst.w	r2, #2
 80207b2:	f040 8090 	bne.w	80208d6 <st_prep_buffer+0x7b2>
        // compensate, we track the time to execute the previous segment's partial step and simply
        // apply it with the partial step distance to the current segment, so that it minutely
        // adjusts the whole segment rate to keep step output exact. These rate adjustments are
        // typically very small and do not adversely effect performance, but ensures that Grbl
        // outputs the exact acceleration and velocity profiles as computed by the planner.
        dt += prep.dt_remainder; // Apply previous segment partial step execute time
 80207b6:	4a71      	ldr	r2, [pc, #452]	@ (802097c <st_prep_buffer+0x858>)
 80207b8:	edd2 7a01 	vldr	s15, [r2, #4]
 80207bc:	ee77 8aa8 	vadd.f32	s17, s15, s17
        float inv_rate = dt / ((float)prep.steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 80207c0:	ee07 3a90 	vmov	s15, r3
 80207c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80207c8:	ee77 7ae9 	vsub.f32	s15, s15, s19
 80207cc:	ee88 9aa7 	vdiv.f32	s18, s17, s15

        // Compute timer ticks per step for the prepped segment.
        uint32_t cycles = (uint32_t)ceilf(cycles_per_min * inv_rate); // (cycles/step)
 80207d0:	4b6d      	ldr	r3, [pc, #436]	@ (8020988 <st_prep_buffer+0x864>)
 80207d2:	ed93 0a00 	vldr	s0, [r3]
 80207d6:	ee29 0a00 	vmul.f32	s0, s18, s0
 80207da:	f007 fa13 	bl	8027c04 <ceilf>
 80207de:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80207e2:	ee17 2a90 	vmov	r2, s15

        // Record end position of segment relative to block if spindle synchronized motion
        if((prep_segment->spindle_sync = pl_block->spindle.state.synchronized)) {
 80207e6:	4b66      	ldr	r3, [pc, #408]	@ (8020980 <st_prep_buffer+0x85c>)
 80207e8:	6818      	ldr	r0, [r3, #0]
 80207ea:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80207ee:	f3c3 11c0 	ubfx	r1, r3, #7, #1
 80207f2:	f885 1024 	strb.w	r1, [r5, #36]	@ 0x24
 80207f6:	09db      	lsrs	r3, r3, #7
 80207f8:	d014      	beq.n	8020824 <st_prep_buffer+0x700>
            prep.target_position += dt * prep.target_feed;
 80207fa:	4b60      	ldr	r3, [pc, #384]	@ (802097c <st_prep_buffer+0x858>)
 80207fc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8020800:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8020804:	ee27 7a28 	vmul.f32	s14, s14, s17
 8020808:	ee77 7a87 	vadd.f32	s15, s15, s14
 802080c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
            prep_segment->cruising = prep.ramp_type == Ramp_Cruise;
 8020810:	f893 1024 	ldrb.w	r1, [r3, #36]	@ 0x24
 8020814:	2901      	cmp	r1, #1
 8020816:	bf14      	ite	ne
 8020818:	2100      	movne	r1, #0
 802081a:	2101      	moveq	r1, #1
 802081c:	f885 1025 	strb.w	r1, [r5, #37]	@ 0x25
            prep_segment->target_position = prep.target_position; //st_prep_block->millimeters - pl_block->millimeters;
 8020820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020822:	616b      	str	r3, [r5, #20]
        }

      #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
        // Compute step timing and multi-axis smoothing level.
        // NOTE: AMASS overdrives the timer with each level, so only one prescalar is required.
        if (cycles < amass.level_1)
 8020824:	4b59      	ldr	r3, [pc, #356]	@ (802098c <st_prep_buffer+0x868>)
 8020826:	681b      	ldr	r3, [r3, #0]
 8020828:	4293      	cmp	r3, r2
 802082a:	d969      	bls.n	8020900 <st_prep_buffer+0x7dc>
            prep_segment->amass_level = 0;
 802082c:	2300      	movs	r3, #0
 802082e:	62ab      	str	r3, [r5, #40]	@ 0x28
            cycles >>= prep_segment->amass_level;
            prep_segment->n_step <<= prep_segment->amass_level;
        }
      #endif

        prep_segment->cycles_per_tick = cycles;
 8020830:	60ea      	str	r2, [r5, #12]
        prep_segment->current_rate = prep.current_speed;
 8020832:	4b52      	ldr	r3, [pc, #328]	@ (802097c <st_prep_buffer+0x858>)
 8020834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020836:	612a      	str	r2, [r5, #16]

        // Segment complete! Increment segment pointers, so stepper ISR can immediately execute it.
        segment_buffer_head = segment_next_head;
 8020838:	4a55      	ldr	r2, [pc, #340]	@ (8020990 <st_prep_buffer+0x86c>)
 802083a:	6811      	ldr	r1, [r2, #0]
 802083c:	4d55      	ldr	r5, [pc, #340]	@ (8020994 <st_prep_buffer+0x870>)
 802083e:	6029      	str	r1, [r5, #0]
        segment_next_head = segment_next_head->next;
 8020840:	6849      	ldr	r1, [r1, #4]
 8020842:	6011      	str	r1, [r2, #0]

        // Update the appropriate planner and segment data.
        pl_block->millimeters = mm_remaining;
 8020844:	ed80 8a0a 	vstr	s16, [r0, #40]	@ 0x28
        prep.steps_remaining = n_steps_remaining;
 8020848:	609c      	str	r4, [r3, #8]
        prep.dt_remainder = ((float)n_steps_remaining - step_dist_remaining) * inv_rate;
 802084a:	ee07 4a90 	vmov	s15, r4
 802084e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020852:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8020856:	ee67 7a89 	vmul.f32	s15, s15, s18
 802085a:	edc3 7a01 	vstr	s15, [r3, #4]

        // Check for exit conditions and flag to load next planner block.
        if (mm_remaining <= prep.mm_complete) {
 802085e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8020862:	eef4 7ac8 	vcmpe.f32	s15, s16
 8020866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802086a:	da5c      	bge.n	8020926 <st_prep_buffer+0x802>
    while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 802086c:	4b4a      	ldr	r3, [pc, #296]	@ (8020998 <st_prep_buffer+0x874>)
 802086e:	681a      	ldr	r2, [r3, #0]
 8020870:	4b47      	ldr	r3, [pc, #284]	@ (8020990 <st_prep_buffer+0x86c>)
 8020872:	681b      	ldr	r3, [r3, #0]
 8020874:	429a      	cmp	r2, r3
 8020876:	d040      	beq.n	80208fa <st_prep_buffer+0x7d6>
        if (pl_block == NULL) {
 8020878:	4b41      	ldr	r3, [pc, #260]	@ (8020980 <st_prep_buffer+0x85c>)
 802087a:	681b      	ldr	r3, [r3, #0]
 802087c:	2b00      	cmp	r3, #0
 802087e:	f43f ac5b 	beq.w	8020138 <st_prep_buffer+0x14>
        if(probe_asserted)
 8020882:	4b46      	ldr	r3, [pc, #280]	@ (802099c <st_prep_buffer+0x878>)
 8020884:	781b      	ldrb	r3, [r3, #0]
 8020886:	2b00      	cmp	r3, #0
 8020888:	d137      	bne.n	80208fa <st_prep_buffer+0x7d6>
        segment_t *prep_segment = segment_buffer_head;
 802088a:	4b42      	ldr	r3, [pc, #264]	@ (8020994 <st_prep_buffer+0x870>)
 802088c:	681d      	ldr	r5, [r3, #0]
        prep_segment->exec_block = st_prep_block;
 802088e:	4b44      	ldr	r3, [pc, #272]	@ (80209a0 <st_prep_buffer+0x87c>)
 8020890:	6819      	ldr	r1, [r3, #0]
 8020892:	60a9      	str	r1, [r5, #8]
        prep_segment->update_rpm = NULL;
 8020894:	2300      	movs	r3, #0
 8020896:	632b      	str	r3, [r5, #48]	@ 0x30
        prep_segment->update_pwm = NULL;
 8020898:	62eb      	str	r3, [r5, #44]	@ 0x2c
        float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
 802089a:	4b39      	ldr	r3, [pc, #228]	@ (8020980 <st_prep_buffer+0x85c>)
 802089c:	681a      	ldr	r2, [r3, #0]
 802089e:	ed92 8a0a 	vldr	s16, [r2, #40]	@ 0x28
        float minimum_mm = mm_remaining - prep.req_mm_increment; // Guarantee at least one step.
 80208a2:	4b36      	ldr	r3, [pc, #216]	@ (802097c <st_prep_buffer+0x858>)
 80208a4:	ed93 5a04 	vldr	s10, [r3, #16]
 80208a8:	ee38 5a45 	vsub.f32	s10, s16, s10
        if (minimum_mm < 0.0f)
 80208ac:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 80208b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80208b4:	f53f ae0d 	bmi.w	80204d2 <st_prep_buffer+0x3ae>
            minimum_mm = 0.0f;
 80208b8:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 80209a4 <st_prep_buffer+0x880>
 80208bc:	eddf 8a3a 	vldr	s17, [pc, #232]	@ 80209a8 <st_prep_buffer+0x884>
 80208c0:	eeb0 7a67 	vmov.f32	s14, s15
 80208c4:	e6b0      	b.n	8020628 <st_prep_buffer+0x504>
                    prep_segment->update_rpm = pl_block->spindle.hal->update_rpm;
 80208c6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80208c8:	632b      	str	r3, [r5, #48]	@ 0x30
                    prep.current_spindle_rpm = prep_segment->spindle_rpm = rpm;
 80208ca:	ed85 0a08 	vstr	s0, [r5, #32]
 80208ce:	4b2b      	ldr	r3, [pc, #172]	@ (802097c <st_prep_buffer+0x858>)
 80208d0:	ed83 0a13 	vstr	s0, [r3, #76]	@ 0x4c
 80208d4:	e753      	b.n	802077e <st_prep_buffer+0x65a>
            sys.step_control.end_motion = On;
 80208d6:	4a2b      	ldr	r2, [pc, #172]	@ (8020984 <st_prep_buffer+0x860>)
 80208d8:	7e13      	ldrb	r3, [r2, #24]
 80208da:	f043 0301 	orr.w	r3, r3, #1
 80208de:	7613      	strb	r3, [r2, #24]
            if (settings.parking.flags.enabled && !prep.recalculate.parking)
 80208e0:	4b32      	ldr	r3, [pc, #200]	@ (80209ac <st_prep_buffer+0x888>)
 80208e2:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 80208e6:	f013 0f01 	tst.w	r3, #1
 80208ea:	d006      	beq.n	80208fa <st_prep_buffer+0x7d6>
 80208ec:	7833      	ldrb	r3, [r6, #0]
 80208ee:	f013 0f04 	tst.w	r3, #4
 80208f2:	d102      	bne.n	80208fa <st_prep_buffer+0x7d6>
                prep.recalculate.hold_partial_block = On;
 80208f4:	f043 0302 	orr.w	r3, r3, #2
 80208f8:	7033      	strb	r3, [r6, #0]
                pl_block = NULL; // Set pointer to indicate check and load next planner block.
                plan_discard_current_block();
            }
        }
    }
}
 80208fa:	ecbd 8b04 	vpop	{d8-d9}
 80208fe:	bd70      	pop	{r4, r5, r6, pc}
            prep_segment->amass_level = cycles < amass.level_2 ? 1 : (cycles < amass.level_3 ? 2 : 3);
 8020900:	4b22      	ldr	r3, [pc, #136]	@ (802098c <st_prep_buffer+0x868>)
 8020902:	685b      	ldr	r3, [r3, #4]
 8020904:	4293      	cmp	r3, r2
 8020906:	d805      	bhi.n	8020914 <st_prep_buffer+0x7f0>
 8020908:	4b20      	ldr	r3, [pc, #128]	@ (802098c <st_prep_buffer+0x868>)
 802090a:	689b      	ldr	r3, [r3, #8]
 802090c:	4293      	cmp	r3, r2
 802090e:	d908      	bls.n	8020922 <st_prep_buffer+0x7fe>
 8020910:	2102      	movs	r1, #2
 8020912:	e000      	b.n	8020916 <st_prep_buffer+0x7f2>
 8020914:	2101      	movs	r1, #1
 8020916:	62a9      	str	r1, [r5, #40]	@ 0x28
            cycles >>= prep_segment->amass_level;
 8020918:	40ca      	lsrs	r2, r1
            prep_segment->n_step <<= prep_segment->amass_level;
 802091a:	69ab      	ldr	r3, [r5, #24]
 802091c:	408b      	lsls	r3, r1
 802091e:	61ab      	str	r3, [r5, #24]
 8020920:	e786      	b.n	8020830 <st_prep_buffer+0x70c>
            prep_segment->amass_level = cycles < amass.level_2 ? 1 : (cycles < amass.level_3 ? 2 : 3);
 8020922:	2103      	movs	r1, #3
 8020924:	e7f7      	b.n	8020916 <st_prep_buffer+0x7f2>
            if (mm_remaining > 0.0f) { // At end of forced-termination.
 8020926:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802092a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802092e:	dc0a      	bgt.n	8020946 <st_prep_buffer+0x822>
                if (sys.step_control.execute_sys_motion) {
 8020930:	4b14      	ldr	r3, [pc, #80]	@ (8020984 <st_prep_buffer+0x860>)
 8020932:	7e1b      	ldrb	r3, [r3, #24]
 8020934:	f013 0f04 	tst.w	r3, #4
 8020938:	d11a      	bne.n	8020970 <st_prep_buffer+0x84c>
                pl_block = NULL; // Set pointer to indicate check and load next planner block.
 802093a:	4b11      	ldr	r3, [pc, #68]	@ (8020980 <st_prep_buffer+0x85c>)
 802093c:	2200      	movs	r2, #0
 802093e:	601a      	str	r2, [r3, #0]
                plan_discard_current_block();
 8020940:	f7f6 f88a 	bl	8016a58 <plan_discard_current_block>
 8020944:	e792      	b.n	802086c <st_prep_buffer+0x748>
                sys.step_control.end_motion = On;
 8020946:	4a0f      	ldr	r2, [pc, #60]	@ (8020984 <st_prep_buffer+0x860>)
 8020948:	7e13      	ldrb	r3, [r2, #24]
 802094a:	f043 0301 	orr.w	r3, r3, #1
 802094e:	7613      	strb	r3, [r2, #24]
                if (settings.parking.flags.enabled && !prep.recalculate.parking)
 8020950:	4b16      	ldr	r3, [pc, #88]	@ (80209ac <st_prep_buffer+0x888>)
 8020952:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 8020956:	f013 0f01 	tst.w	r3, #1
 802095a:	d0ce      	beq.n	80208fa <st_prep_buffer+0x7d6>
 802095c:	4b07      	ldr	r3, [pc, #28]	@ (802097c <st_prep_buffer+0x858>)
 802095e:	781b      	ldrb	r3, [r3, #0]
 8020960:	f013 0f04 	tst.w	r3, #4
 8020964:	d1c9      	bne.n	80208fa <st_prep_buffer+0x7d6>
                    prep.recalculate.hold_partial_block = On;
 8020966:	4a05      	ldr	r2, [pc, #20]	@ (802097c <st_prep_buffer+0x858>)
 8020968:	f043 0302 	orr.w	r3, r3, #2
 802096c:	7013      	strb	r3, [r2, #0]
                return; // Bail!
 802096e:	e7c4      	b.n	80208fa <st_prep_buffer+0x7d6>
                    sys.step_control.end_motion = On;
 8020970:	4a04      	ldr	r2, [pc, #16]	@ (8020984 <st_prep_buffer+0x860>)
 8020972:	f043 0301 	orr.w	r3, r3, #1
 8020976:	7613      	strb	r3, [r2, #24]
                    return;
 8020978:	e7bf      	b.n	80208fa <st_prep_buffer+0x7d6>
 802097a:	bf00      	nop
 802097c:	20002590 	.word	0x20002590
 8020980:	2000261c 	.word	0x2000261c
 8020984:	20001bbc 	.word	0x20001bbc
 8020988:	2000262c 	.word	0x2000262c
 802098c:	20002634 	.word	0x20002634
 8020990:	20002620 	.word	0x20002620
 8020994:	20002624 	.word	0x20002624
 8020998:	20002628 	.word	0x20002628
 802099c:	20002630 	.word	0x20002630
 80209a0:	20002618 	.word	0x20002618
 80209a4:	392ec33e 	.word	0x392ec33e
 80209a8:	00000000 	.word	0x00000000
 80209ac:	200022f4 	.word	0x200022f4

080209b0 <st_get_realtime_rate>:
// Called by realtime status reporting to fetch the current speed being executed. This value
// however is not exactly the current speed, but the speed computed in the last step segment
// in the segment buffer. It will always be behind by up to the number of segment blocks (-1)
// divided by the ACCELERATION TICKS PER SECOND in seconds.
float st_get_realtime_rate (void)
{
 80209b0:	b508      	push	{r3, lr}
    return state_get() & (STATE_CYCLE|STATE_HOMING|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 80209b2:	f7fe fba9 	bl	801f108 <state_get>
#ifdef KINEMATICS_API
            ? prep.current_speed * prep.rate_multiplier
#else
            ? prep.current_speed
#endif
            : 0.0f;
 80209b6:	f010 0f7c 	tst.w	r0, #124	@ 0x7c
 80209ba:	d003      	beq.n	80209c4 <st_get_realtime_rate+0x14>
 80209bc:	4b03      	ldr	r3, [pc, #12]	@ (80209cc <st_get_realtime_rate+0x1c>)
 80209be:	ed93 0a0b 	vldr	s0, [r3, #44]	@ 0x2c
}
 80209c2:	bd08      	pop	{r3, pc}
            : 0.0f;
 80209c4:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80209d0 <st_get_realtime_rate+0x20>
 80209c8:	e7fb      	b.n	80209c2 <st_get_realtime_rate+0x12>
 80209ca:	bf00      	nop
 80209cc:	20002590 	.word	0x20002590
 80209d0:	00000000 	.word	0x00000000

080209d4 <st_get_offset_id>:

offset_id_t st_get_offset_id (void)
{
 80209d4:	b508      	push	{r3, lr}
    plan_block_t *pl_block;

    return st.exec_block
 80209d6:	4b0b      	ldr	r3, [pc, #44]	@ (8020a04 <st_get_offset_id+0x30>)
 80209d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            ? st.exec_block->offset_id
            : (sys.holding_state == Hold_Complete && (pl_block = plan_get_current_block())
 80209da:	b113      	cbz	r3, 80209e2 <st_get_offset_id+0xe>
 80209dc:	f993 0032 	ldrsb.w	r0, [r3, #50]	@ 0x32
                ? pl_block->offset_id
                : -1);
}
 80209e0:	bd08      	pop	{r3, pc}
            : (sys.holding_state == Hold_Complete && (pl_block = plan_get_current_block())
 80209e2:	4b09      	ldr	r3, [pc, #36]	@ (8020a08 <st_get_offset_id+0x34>)
 80209e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80209e8:	2b01      	cmp	r3, #1
 80209ea:	d105      	bne.n	80209f8 <st_get_offset_id+0x24>
 80209ec:	f7f6 f858 	bl	8016aa0 <plan_get_current_block>
 80209f0:	b128      	cbz	r0, 80209fe <st_get_offset_id+0x2a>
 80209f2:	f990 0011 	ldrsb.w	r0, [r0, #17]
 80209f6:	e7f3      	b.n	80209e0 <st_get_offset_id+0xc>
 80209f8:	f04f 30ff 	mov.w	r0, #4294967295
 80209fc:	e7f0      	b.n	80209e0 <st_get_offset_id+0xc>
 80209fe:	f04f 30ff 	mov.w	r0, #4294967295
 8020a02:	e7ed      	b.n	80209e0 <st_get_offset_id+0xc>
 8020a04:	20002640 	.word	0x20002640
 8020a08:	20001bbc 	.word	0x20001bbc

08020a0c <stream_get_null>:

// "dummy" version of serialGetC
int16_t stream_get_null (void)
{
    return SERIAL_NO_DATA;
}
 8020a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8020a10:	4770      	bx	lr

08020a12 <stream_connected>:
// helper function for (UART) stream implementations.

bool stream_connected (void)
{
    return true;
}
 8020a12:	2001      	movs	r0, #1
 8020a14:	4770      	bx	lr

08020a16 <is_not_connected>:

static bool is_not_connected (void)
{
    return false;
}
 8020a16:	2000      	movs	r0, #0
 8020a18:	4770      	bx	lr
	...

08020a1c <connection_is_up>:

static bool connection_is_up (io_stream_t *stream)
{
 8020a1c:	b508      	push	{r3, lr}
    if(stream->is_connected)
 8020a1e:	6843      	ldr	r3, [r0, #4]
 8020a20:	b1bb      	cbz	r3, 8020a52 <connection_is_up+0x36>
        return stream->is_connected();
 8020a22:	4798      	blx	r3
        }
        connection = connection->next;
    }

    return false;
}
 8020a24:	bd08      	pop	{r3, pc}
        connection = connection->next;
 8020a26:	68db      	ldr	r3, [r3, #12]
    while(connection) {
 8020a28:	b1ab      	cbz	r3, 8020a56 <connection_is_up+0x3a>
        if(connection->stream->type == stream->type &&
 8020a2a:	681a      	ldr	r2, [r3, #0]
 8020a2c:	f8b2 c000 	ldrh.w	ip, [r2]
 8020a30:	8801      	ldrh	r1, [r0, #0]
 8020a32:	458c      	cmp	ip, r1
 8020a34:	d1f7      	bne.n	8020a26 <connection_is_up+0xa>
             connection->stream->state.is_usb == stream->state.is_usb) {
 8020a36:	7891      	ldrb	r1, [r2, #2]
 8020a38:	7882      	ldrb	r2, [r0, #2]
 8020a3a:	404a      	eors	r2, r1
            connection->stream->instance == stream->instance &&
 8020a3c:	f012 0f04 	tst.w	r2, #4
 8020a40:	d1f1      	bne.n	8020a26 <connection_is_up+0xa>
            if(connection->stream->state.is_usb)
 8020a42:	f011 0f04 	tst.w	r1, #4
 8020a46:	d001      	beq.n	8020a4c <connection_is_up+0x30>
                connection->is_up = is_not_connected;
 8020a48:	4a04      	ldr	r2, [pc, #16]	@ (8020a5c <connection_is_up+0x40>)
 8020a4a:	605a      	str	r2, [r3, #4]
            return connection->is_up();
 8020a4c:	685b      	ldr	r3, [r3, #4]
 8020a4e:	4798      	blx	r3
 8020a50:	e7e8      	b.n	8020a24 <connection_is_up+0x8>
    stream_connection_t *connection = connections;
 8020a52:	4b03      	ldr	r3, [pc, #12]	@ (8020a60 <connection_is_up+0x44>)
 8020a54:	e7e8      	b.n	8020a28 <connection_is_up+0xc>
    return false;
 8020a56:	2000      	movs	r0, #0
 8020a58:	e7e4      	b.n	8020a24 <connection_is_up+0x8>
 8020a5a:	bf00      	nop
 8020a5c:	08020a17 	.word	0x08020a17
 8020a60:	20002a98 	.word	0x20002a98

08020a64 <stream_write_all>:

static void stream_write_all (const char *s)
{
 8020a64:	b538      	push	{r3, r4, r5, lr}
 8020a66:	4605      	mov	r5, r0
    stream_connection_t *connection = connections;
 8020a68:	4c06      	ldr	r4, [pc, #24]	@ (8020a84 <stream_write_all+0x20>)

    while(connection) {
 8020a6a:	e000      	b.n	8020a6e <stream_write_all+0xa>
        if(connection->is_up())
            connection->stream->write(s);
        connection = connection->next;
 8020a6c:	68e4      	ldr	r4, [r4, #12]
    while(connection) {
 8020a6e:	b144      	cbz	r4, 8020a82 <stream_write_all+0x1e>
        if(connection->is_up())
 8020a70:	6863      	ldr	r3, [r4, #4]
 8020a72:	4798      	blx	r3
 8020a74:	2800      	cmp	r0, #0
 8020a76:	d0f9      	beq.n	8020a6c <stream_write_all+0x8>
            connection->stream->write(s);
 8020a78:	6823      	ldr	r3, [r4, #0]
 8020a7a:	68db      	ldr	r3, [r3, #12]
 8020a7c:	4628      	mov	r0, r5
 8020a7e:	4798      	blx	r3
 8020a80:	e7f4      	b.n	8020a6c <stream_write_all+0x8>
    }
}
 8020a82:	bd38      	pop	{r3, r4, r5, pc}
 8020a84:	20002a98 	.word	0x20002a98

08020a88 <_open_instance>:
    uint32_t baud_rate;
    io_stream_t const *stream;
} connection;

static bool _open_instance (io_stream_properties_t const *stream)
{
 8020a88:	b510      	push	{r4, lr}
    if(stream->type == StreamType_Serial && (connection.instance == 255 || stream->instance == connection.instance) && stream->flags.claimable && !stream->flags.claimed)
 8020a8a:	7803      	ldrb	r3, [r0, #0]
 8020a8c:	b933      	cbnz	r3, 8020a9c <_open_instance+0x14>
 8020a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8020ac0 <_open_instance+0x38>)
 8020a90:	781b      	ldrb	r3, [r3, #0]
 8020a92:	2bff      	cmp	r3, #255	@ 0xff
 8020a94:	d008      	beq.n	8020aa8 <_open_instance+0x20>
 8020a96:	7842      	ldrb	r2, [r0, #1]
 8020a98:	4293      	cmp	r3, r2
 8020a9a:	d005      	beq.n	8020aa8 <_open_instance+0x20>
        connection.stream = stream->claim(connection.baud_rate);

    return connection.stream != NULL;
 8020a9c:	4b08      	ldr	r3, [pc, #32]	@ (8020ac0 <_open_instance+0x38>)
 8020a9e:	6898      	ldr	r0, [r3, #8]
}
 8020aa0:	3800      	subs	r0, #0
 8020aa2:	bf18      	it	ne
 8020aa4:	2001      	movne	r0, #1
 8020aa6:	bd10      	pop	{r4, pc}
    if(stream->type == StreamType_Serial && (connection.instance == 255 || stream->instance == connection.instance) && stream->flags.claimable && !stream->flags.claimed)
 8020aa8:	7883      	ldrb	r3, [r0, #2]
 8020aaa:	f003 0306 	and.w	r3, r3, #6
 8020aae:	2b02      	cmp	r3, #2
 8020ab0:	d1f4      	bne.n	8020a9c <_open_instance+0x14>
        connection.stream = stream->claim(connection.baud_rate);
 8020ab2:	6843      	ldr	r3, [r0, #4]
 8020ab4:	4c02      	ldr	r4, [pc, #8]	@ (8020ac0 <_open_instance+0x38>)
 8020ab6:	6860      	ldr	r0, [r4, #4]
 8020ab8:	4798      	blx	r3
 8020aba:	60a0      	str	r0, [r4, #8]
 8020abc:	e7ee      	b.n	8020a9c <_open_instance+0x14>
 8020abe:	bf00      	nop
 8020ac0:	20002a74 	.word	0x20002a74

08020ac4 <null_rx_free>:
static enqueue_realtime_command_ptr enqueue_realtime_command = protocol_enqueue_realtime_command;

static uint16_t null_rx_free (void)
{
    return RX_BUFFER_SIZE;
}
 8020ac4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8020ac8:	4770      	bx	lr

08020aca <null_count>:

static uint16_t null_count (void)
{
    return 0;
}
 8020aca:	2000      	movs	r0, #0
 8020acc:	4770      	bx	lr

08020ace <null_put_c>:

static bool null_put_c (const char c)
{
    return true;
}
 8020ace:	2001      	movs	r0, #1
 8020ad0:	4770      	bx	lr

08020ad2 <null_write_string>:

static void null_write_string (const char *s)
{
}
 8020ad2:	4770      	bx	lr

08020ad4 <null_write>:

static void null_write(const char *s, uint16_t length)
{
}
 8020ad4:	4770      	bx	lr

08020ad6 <null_suspend_disable>:

static bool null_suspend_disable (bool suspend)
{
    return true;
}
 8020ad6:	2001      	movs	r0, #1
 8020ad8:	4770      	bx	lr

08020ada <null_set_baudrate>:

static bool null_set_baudrate (uint32_t baud_rate)
{
    return true;
}
 8020ada:	2001      	movs	r0, #1
 8020adc:	4770      	bx	lr
	...

08020ae0 <null_enqueue_rt_command>:

static bool null_enqueue_rt_command (char c)
{
 8020ae0:	b508      	push	{r3, lr}
    return enqueue_realtime_command(c);
 8020ae2:	4b02      	ldr	r3, [pc, #8]	@ (8020aec <null_enqueue_rt_command+0xc>)
 8020ae4:	681b      	ldr	r3, [r3, #0]
 8020ae6:	4798      	blx	r3
}
 8020ae8:	bd08      	pop	{r3, pc}
 8020aea:	bf00      	nop
 8020aec:	2000048c 	.word	0x2000048c

08020af0 <null_set_rt_handler>:

static enqueue_realtime_command_ptr null_set_rt_handler (enqueue_realtime_command_ptr handler)
{
 8020af0:	4603      	mov	r3, r0
    enqueue_realtime_command_ptr prev = enqueue_realtime_command;
 8020af2:	4a03      	ldr	r2, [pc, #12]	@ (8020b00 <null_set_rt_handler+0x10>)
 8020af4:	6810      	ldr	r0, [r2, #0]

    if(handler)
 8020af6:	461a      	mov	r2, r3
 8020af8:	b10b      	cbz	r3, 8020afe <null_set_rt_handler+0xe>
        enqueue_realtime_command = handler;
 8020afa:	4b01      	ldr	r3, [pc, #4]	@ (8020b00 <null_set_rt_handler+0x10>)
 8020afc:	601a      	str	r2, [r3, #0]

    return prev;
}
 8020afe:	4770      	bx	lr
 8020b00:	2000048c 	.word	0x2000048c

08020b04 <stream_null_init>:
        .set_baud_rate = null_set_baudrate,
        .set_enqueue_rt_handler = null_set_rt_handler
    };

    return &stream;
}
 8020b04:	4800      	ldr	r0, [pc, #0]	@ (8020b08 <stream_null_init+0x4>)
 8020b06:	4770      	bx	lr
 8020b08:	08030cc4 	.word	0x08030cc4

08020b0c <await_toolchange_ack>:
{
 8020b0c:	b510      	push	{r4, lr}
    if(c == CMD_TOOL_ACK && !stream.rxbuffer->backup) {
 8020b0e:	28a3      	cmp	r0, #163	@ 0xa3
 8020b10:	d103      	bne.n	8020b1a <await_toolchange_ack+0xe>
 8020b12:	4b13      	ldr	r3, [pc, #76]	@ (8020b60 <await_toolchange_ack+0x54>)
 8020b14:	689c      	ldr	r4, [r3, #8]
 8020b16:	7aa3      	ldrb	r3, [r4, #10]
 8020b18:	b11b      	cbz	r3, 8020b22 <await_toolchange_ack+0x16>
        return stream.enqueue_realtime_command(c);
 8020b1a:	4b11      	ldr	r3, [pc, #68]	@ (8020b60 <await_toolchange_ack+0x54>)
 8020b1c:	681b      	ldr	r3, [r3, #0]
 8020b1e:	4798      	blx	r3
}
 8020b20:	bd10      	pop	{r4, pc}
        memcpy(&rxbackup, stream.rxbuffer, sizeof(stream_rx_buffer_t));
 8020b22:	f240 420c 	movw	r2, #1036	@ 0x40c
 8020b26:	4621      	mov	r1, r4
 8020b28:	480e      	ldr	r0, [pc, #56]	@ (8020b64 <await_toolchange_ack+0x58>)
 8020b2a:	f004 fb5c 	bl	80251e6 <memcpy>
        stream.rxbuffer->backup = true;
 8020b2e:	2301      	movs	r3, #1
 8020b30:	72a3      	strb	r3, [r4, #10]
        stream.rxbuffer->tail = stream.rxbuffer->head;
 8020b32:	6823      	ldr	r3, [r4, #0]
 8020b34:	6063      	str	r3, [r4, #4]
        hal.stream.read = stream.read; // restore normal input
 8020b36:	4c0a      	ldr	r4, [pc, #40]	@ (8020b60 <await_toolchange_ack+0x54>)
 8020b38:	6862      	ldr	r2, [r4, #4]
 8020b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8020b68 <await_toolchange_ack+0x5c>)
 8020b3c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        hal.stream.set_enqueue_rt_handler(stream.enqueue_realtime_command);
 8020b40:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8020b44:	6820      	ldr	r0, [r4, #0]
 8020b46:	4798      	blx	r3
        stream.enqueue_realtime_command = NULL;
 8020b48:	2300      	movs	r3, #0
 8020b4a:	6023      	str	r3, [r4, #0]
        if(grbl.on_toolchange_ack)
 8020b4c:	4b07      	ldr	r3, [pc, #28]	@ (8020b6c <await_toolchange_ack+0x60>)
 8020b4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8020b52:	b113      	cbz	r3, 8020b5a <await_toolchange_ack+0x4e>
            grbl.on_toolchange_ack();
 8020b54:	4798      	blx	r3
    return true;
 8020b56:	2001      	movs	r0, #1
 8020b58:	e7e2      	b.n	8020b20 <await_toolchange_ack+0x14>
 8020b5a:	2001      	movs	r0, #1
 8020b5c:	e7e0      	b.n	8020b20 <await_toolchange_ack+0x14>
 8020b5e:	bf00      	nop
 8020b60:	20002aac 	.word	0x20002aac
 8020b64:	20002ab8 	.word	0x20002ab8
 8020b68:	200018dc 	.word	0x200018dc
 8020b6c:	20001ac4 	.word	0x20001ac4

08020b70 <add_connection>:
{
 8020b70:	b510      	push	{r4, lr}
 8020b72:	4604      	mov	r4, r0
    if(base.stream == NULL) {
 8020b74:	4b15      	ldr	r3, [pc, #84]	@ (8020bcc <add_connection+0x5c>)
 8020b76:	681b      	ldr	r3, [r3, #0]
 8020b78:	b18b      	cbz	r3, 8020b9e <add_connection+0x2e>
    } else if((connection = malloc(sizeof(stream_connection_t)))) {
 8020b7a:	2014      	movs	r0, #20
 8020b7c:	f002 f90c 	bl	8022d98 <malloc>
 8020b80:	b178      	cbz	r0, 8020ba2 <add_connection+0x32>
        connection->stream = stream;
 8020b82:	6004      	str	r4, [r0, #0]
        connection->next = NULL;
 8020b84:	2300      	movs	r3, #0
 8020b86:	60c3      	str	r3, [r0, #12]
    stream_connection_t *connection, *last = connections;
 8020b88:	4b10      	ldr	r3, [pc, #64]	@ (8020bcc <add_connection+0x5c>)
        while(last->next) {
 8020b8a:	461a      	mov	r2, r3
 8020b8c:	68db      	ldr	r3, [r3, #12]
 8020b8e:	b163      	cbz	r3, 8020baa <add_connection+0x3a>
            if(last->stream == stream) {
 8020b90:	681a      	ldr	r2, [r3, #0]
 8020b92:	42a2      	cmp	r2, r4
 8020b94:	d1f9      	bne.n	8020b8a <add_connection+0x1a>
                free(connection);
 8020b96:	f002 f907 	bl	8022da8 <free>
                return NULL;
 8020b9a:	2000      	movs	r0, #0
 8020b9c:	e004      	b.n	8020ba8 <add_connection+0x38>
        base.stream = stream;
 8020b9e:	480b      	ldr	r0, [pc, #44]	@ (8020bcc <add_connection+0x5c>)
 8020ba0:	6004      	str	r4, [r0, #0]
    connection->is_up = stream->is_connected ?
 8020ba2:	6863      	ldr	r3, [r4, #4]
                         stream->is_connected :
 8020ba4:	b123      	cbz	r3, 8020bb0 <add_connection+0x40>
    connection->is_up = stream->is_connected ?
 8020ba6:	6043      	str	r3, [r0, #4]
}
 8020ba8:	bd10      	pop	{r4, pc}
        connection->prev = last;
 8020baa:	6102      	str	r2, [r0, #16]
        last->next = connection;
 8020bac:	60d0      	str	r0, [r2, #12]
 8020bae:	e7f8      	b.n	8020ba2 <add_connection+0x32>
                          (stream->state.is_usb && base.stream != stream ? is_not_connected : stream_connected);
 8020bb0:	78a3      	ldrb	r3, [r4, #2]
 8020bb2:	f013 0f04 	tst.w	r3, #4
 8020bb6:	d007      	beq.n	8020bc8 <add_connection+0x58>
 8020bb8:	4b04      	ldr	r3, [pc, #16]	@ (8020bcc <add_connection+0x5c>)
 8020bba:	681b      	ldr	r3, [r3, #0]
 8020bbc:	42a3      	cmp	r3, r4
 8020bbe:	d001      	beq.n	8020bc4 <add_connection+0x54>
 8020bc0:	4b03      	ldr	r3, [pc, #12]	@ (8020bd0 <add_connection+0x60>)
 8020bc2:	e7f0      	b.n	8020ba6 <add_connection+0x36>
 8020bc4:	4b03      	ldr	r3, [pc, #12]	@ (8020bd4 <add_connection+0x64>)
 8020bc6:	e7ee      	b.n	8020ba6 <add_connection+0x36>
 8020bc8:	4b02      	ldr	r3, [pc, #8]	@ (8020bd4 <add_connection+0x64>)
 8020bca:	e7ec      	b.n	8020ba6 <add_connection+0x36>
 8020bcc:	20002a98 	.word	0x20002a98
 8020bd0:	08020a17 	.word	0x08020a17
 8020bd4:	08020a13 	.word	0x08020a13

08020bd8 <stream_register_streams>:
    if(details->n_streams) {
 8020bd8:	7803      	ldrb	r3, [r0, #0]
 8020bda:	b11b      	cbz	r3, 8020be4 <stream_register_streams+0xc>
        details->next = streams;
 8020bdc:	4b02      	ldr	r3, [pc, #8]	@ (8020be8 <stream_register_streams+0x10>)
 8020bde:	681a      	ldr	r2, [r3, #0]
 8020be0:	6082      	str	r2, [r0, #8]
        streams = details;
 8020be2:	6018      	str	r0, [r3, #0]
}
 8020be4:	4770      	bx	lr
 8020be6:	bf00      	nop
 8020be8:	20000490 	.word	0x20000490

08020bec <stream_enumerate_streams>:
    if(callback == NULL)
 8020bec:	b1a8      	cbz	r0, 8020c1a <stream_enumerate_streams+0x2e>
{
 8020bee:	b570      	push	{r4, r5, r6, lr}
 8020bf0:	4606      	mov	r6, r0
    io_stream_details_t *details = streams;
 8020bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8020c24 <stream_enumerate_streams+0x38>)
 8020bf4:	681d      	ldr	r5, [r3, #0]
    bool claimed = false;
 8020bf6:	2200      	movs	r2, #0
    while(details && !claimed) {
 8020bf8:	e000      	b.n	8020bfc <stream_enumerate_streams+0x10>
        details = details->next;
 8020bfa:	68ad      	ldr	r5, [r5, #8]
    while(details && !claimed) {
 8020bfc:	b185      	cbz	r5, 8020c20 <stream_enumerate_streams+0x34>
 8020bfe:	b97a      	cbnz	r2, 8020c20 <stream_enumerate_streams+0x34>
        for(idx = 0; idx < details->n_streams; idx++) {
 8020c00:	2400      	movs	r4, #0
 8020c02:	782b      	ldrb	r3, [r5, #0]
 8020c04:	42a3      	cmp	r3, r4
 8020c06:	d9f8      	bls.n	8020bfa <stream_enumerate_streams+0xe>
            if((claimed = callback(&details->streams[idx])))
 8020c08:	6868      	ldr	r0, [r5, #4]
 8020c0a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8020c0e:	47b0      	blx	r6
 8020c10:	4602      	mov	r2, r0
 8020c12:	2800      	cmp	r0, #0
 8020c14:	d1f1      	bne.n	8020bfa <stream_enumerate_streams+0xe>
        for(idx = 0; idx < details->n_streams; idx++) {
 8020c16:	3401      	adds	r4, #1
 8020c18:	e7f3      	b.n	8020c02 <stream_enumerate_streams+0x16>
        return false;
 8020c1a:	2200      	movs	r2, #0
}
 8020c1c:	4610      	mov	r0, r2
 8020c1e:	4770      	bx	lr
 8020c20:	4610      	mov	r0, r2
 8020c22:	bd70      	pop	{r4, r5, r6, pc}
 8020c24:	20000490 	.word	0x20000490

08020c28 <stream_tx_blocking>:
{
 8020c28:	b510      	push	{r4, lr}
    grbl.on_execute_realtime(state_get());
 8020c2a:	4b06      	ldr	r3, [pc, #24]	@ (8020c44 <stream_tx_blocking+0x1c>)
 8020c2c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8020c2e:	f7fe fa6b 	bl	801f108 <state_get>
 8020c32:	47a0      	blx	r4
    return !(sys.rt_exec_state & EXEC_RESET);
 8020c34:	4b04      	ldr	r3, [pc, #16]	@ (8020c48 <stream_tx_blocking+0x20>)
 8020c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8020c38:	f013 0f20 	tst.w	r3, #32
}
 8020c3c:	bf0c      	ite	eq
 8020c3e:	2001      	moveq	r0, #1
 8020c40:	2000      	movne	r0, #0
 8020c42:	bd10      	pop	{r4, pc}
 8020c44:	20001ac4 	.word	0x20001ac4
 8020c48:	20001bbc 	.word	0x20001bbc

08020c4c <stream_rx_suspend>:
{
 8020c4c:	b570      	push	{r4, r5, r6, lr}
 8020c4e:	4604      	mov	r4, r0
    if(suspend) {
 8020c50:	b1b9      	cbz	r1, 8020c82 <stream_rx_suspend+0x36>
        if(stream.rxbuffer == NULL) {
 8020c52:	4b1a      	ldr	r3, [pc, #104]	@ (8020cbc <stream_rx_suspend+0x70>)
 8020c54:	689b      	ldr	r3, [r3, #8]
 8020c56:	b12b      	cbz	r3, 8020c64 <stream_rx_suspend+0x18>
    return rxbuffer->tail != rxbuffer->head;
 8020c58:	6860      	ldr	r0, [r4, #4]
 8020c5a:	6823      	ldr	r3, [r4, #0]
}
 8020c5c:	1ac0      	subs	r0, r0, r3
 8020c5e:	bf18      	it	ne
 8020c60:	2001      	movne	r0, #1
 8020c62:	bd70      	pop	{r4, r5, r6, pc}
            stream.rxbuffer = rxbuffer;
 8020c64:	4e15      	ldr	r6, [pc, #84]	@ (8020cbc <stream_rx_suspend+0x70>)
 8020c66:	60b0      	str	r0, [r6, #8]
            stream.read = hal.stream.read;
 8020c68:	4d15      	ldr	r5, [pc, #84]	@ (8020cc0 <stream_rx_suspend+0x74>)
 8020c6a:	f8d5 30c4 	ldr.w	r3, [r5, #196]	@ 0xc4
 8020c6e:	6073      	str	r3, [r6, #4]
            stream.enqueue_realtime_command = hal.stream.set_enqueue_rt_handler(await_toolchange_ack);
 8020c70:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 8020c74:	4813      	ldr	r0, [pc, #76]	@ (8020cc4 <stream_rx_suspend+0x78>)
 8020c76:	4798      	blx	r3
 8020c78:	6030      	str	r0, [r6, #0]
            hal.stream.read = stream_get_null;
 8020c7a:	4b13      	ldr	r3, [pc, #76]	@ (8020cc8 <stream_rx_suspend+0x7c>)
 8020c7c:	f8c5 30c4 	str.w	r3, [r5, #196]	@ 0xc4
 8020c80:	e7ea      	b.n	8020c58 <stream_rx_suspend+0xc>
    } else if(stream.rxbuffer) {
 8020c82:	4b0e      	ldr	r3, [pc, #56]	@ (8020cbc <stream_rx_suspend+0x70>)
 8020c84:	689b      	ldr	r3, [r3, #8]
 8020c86:	2b00      	cmp	r3, #0
 8020c88:	d0e6      	beq.n	8020c58 <stream_rx_suspend+0xc>
        if(rxbuffer->backup)
 8020c8a:	7a83      	ldrb	r3, [r0, #10]
 8020c8c:	b983      	cbnz	r3, 8020cb0 <stream_rx_suspend+0x64>
        if(stream.enqueue_realtime_command) {
 8020c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8020cbc <stream_rx_suspend+0x70>)
 8020c90:	6818      	ldr	r0, [r3, #0]
 8020c92:	b148      	cbz	r0, 8020ca8 <stream_rx_suspend+0x5c>
            hal.stream.read = stream.read; // restore normal input
 8020c94:	461d      	mov	r5, r3
 8020c96:	685a      	ldr	r2, [r3, #4]
 8020c98:	4b09      	ldr	r3, [pc, #36]	@ (8020cc0 <stream_rx_suspend+0x74>)
 8020c9a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
            hal.stream.set_enqueue_rt_handler(stream.enqueue_realtime_command);
 8020c9e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8020ca2:	4798      	blx	r3
            stream.enqueue_realtime_command = NULL;
 8020ca4:	2300      	movs	r3, #0
 8020ca6:	602b      	str	r3, [r5, #0]
        stream.rxbuffer = NULL;
 8020ca8:	4b04      	ldr	r3, [pc, #16]	@ (8020cbc <stream_rx_suspend+0x70>)
 8020caa:	2200      	movs	r2, #0
 8020cac:	609a      	str	r2, [r3, #8]
 8020cae:	e7d3      	b.n	8020c58 <stream_rx_suspend+0xc>
            memcpy(rxbuffer, &rxbackup, sizeof(stream_rx_buffer_t));
 8020cb0:	f240 420c 	movw	r2, #1036	@ 0x40c
 8020cb4:	4905      	ldr	r1, [pc, #20]	@ (8020ccc <stream_rx_suspend+0x80>)
 8020cb6:	f004 fa96 	bl	80251e6 <memcpy>
 8020cba:	e7e8      	b.n	8020c8e <stream_rx_suspend+0x42>
 8020cbc:	20002aac 	.word	0x20002aac
 8020cc0:	200018dc 	.word	0x200018dc
 8020cc4:	08020b0d 	.word	0x08020b0d
 8020cc8:	08020a0d 	.word	0x08020a0d
 8020ccc:	20002ab8 	.word	0x20002ab8

08020cd0 <stream_buffer_all>:
}
 8020cd0:	2000      	movs	r0, #0
 8020cd2:	4770      	bx	lr

08020cd4 <stream_enqueue_realtime_command>:
{
 8020cd4:	b510      	push	{r4, lr}
 8020cd6:	4604      	mov	r4, r0
	bool drop = hal.stream.enqueue_rt_command ? hal.stream.enqueue_rt_command(c) : protocol_enqueue_realtime_command(c);
 8020cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8020d0c <stream_enqueue_realtime_command+0x38>)
 8020cda:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8020cde:	b193      	cbz	r3, 8020d06 <stream_enqueue_realtime_command+0x32>
 8020ce0:	4798      	blx	r3
    if(drop && (c == CMD_CYCLE_START || c == CMD_CYCLE_START_LEGACY))
 8020ce2:	b178      	cbz	r0, 8020d04 <stream_enqueue_realtime_command+0x30>
 8020ce4:	2c81      	cmp	r4, #129	@ 0x81
 8020ce6:	d001      	beq.n	8020cec <stream_enqueue_realtime_command+0x18>
 8020ce8:	2c7e      	cmp	r4, #126	@ 0x7e
 8020cea:	d10b      	bne.n	8020d04 <stream_enqueue_realtime_command+0x30>
        sys.report.cycle_start = settings.status_report.pin_state;
 8020cec:	4b08      	ldr	r3, [pc, #32]	@ (8020d10 <stream_enqueue_realtime_command+0x3c>)
 8020cee:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8020cf2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8020cf6:	4a07      	ldr	r2, [pc, #28]	@ (8020d14 <stream_enqueue_realtime_command+0x40>)
 8020cf8:	f892 1033 	ldrb.w	r1, [r2, #51]	@ 0x33
 8020cfc:	f363 1186 	bfi	r1, r3, #6, #1
 8020d00:	f882 1033 	strb.w	r1, [r2, #51]	@ 0x33
}
 8020d04:	bd10      	pop	{r4, pc}
	bool drop = hal.stream.enqueue_rt_command ? hal.stream.enqueue_rt_command(c) : protocol_enqueue_realtime_command(c);
 8020d06:	f7f7 f9a9 	bl	801805c <protocol_enqueue_realtime_command>
 8020d0a:	e7ea      	b.n	8020ce2 <stream_enqueue_realtime_command+0xe>
 8020d0c:	200018dc 	.word	0x200018dc
 8020d10:	200022f4 	.word	0x200022f4
 8020d14:	20001bbc 	.word	0x20001bbc

08020d18 <stream_set_description>:
{
 8020d18:	b538      	push	{r3, r4, r5, lr}
    if((ok = stream->type == StreamType_Serial && !stream->state.is_usb && hal.periph_port.set_pin_description)) {
 8020d1a:	6803      	ldr	r3, [r0, #0]
 8020d1c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020d20:	f423 037b 	bic.w	r3, r3, #16449536	@ 0xfb0000
 8020d24:	b9a3      	cbnz	r3, 8020d50 <stream_set_description+0x38>
 8020d26:	4604      	mov	r4, r0
 8020d28:	460d      	mov	r5, r1
 8020d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8020d58 <stream_set_description+0x40>)
 8020d2c:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8020d30:	b183      	cbz	r3, 8020d54 <stream_set_description+0x3c>
        hal.periph_port.set_pin_description(Output_TX, (pin_group_t)(PinGroup_UART + stream->instance), description);
 8020d32:	7841      	ldrb	r1, [r0, #1]
 8020d34:	462a      	mov	r2, r5
 8020d36:	3111      	adds	r1, #17
 8020d38:	209f      	movs	r0, #159	@ 0x9f
 8020d3a:	4798      	blx	r3
        hal.periph_port.set_pin_description(Input_RX, (pin_group_t)(PinGroup_UART + stream->instance), description);
 8020d3c:	4b06      	ldr	r3, [pc, #24]	@ (8020d58 <stream_set_description+0x40>)
 8020d3e:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8020d42:	7861      	ldrb	r1, [r4, #1]
 8020d44:	462a      	mov	r2, r5
 8020d46:	3111      	adds	r1, #17
 8020d48:	209e      	movs	r0, #158	@ 0x9e
 8020d4a:	4798      	blx	r3
    if((ok = stream->type == StreamType_Serial && !stream->state.is_usb && hal.periph_port.set_pin_description)) {
 8020d4c:	2001      	movs	r0, #1
 8020d4e:	e000      	b.n	8020d52 <stream_set_description+0x3a>
 8020d50:	2000      	movs	r0, #0
}
 8020d52:	bd38      	pop	{r3, r4, r5, pc}
    if((ok = stream->type == StreamType_Serial && !stream->state.is_usb && hal.periph_port.set_pin_description)) {
 8020d54:	2000      	movs	r0, #0
 8020d56:	e7fc      	b.n	8020d52 <stream_set_description+0x3a>
 8020d58:	200018dc 	.word	0x200018dc

08020d5c <stream_open_instance>:
{
 8020d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d5e:	4617      	mov	r7, r2
 8020d60:	461e      	mov	r6, r3
    connection.instance = instance;
 8020d62:	4c0a      	ldr	r4, [pc, #40]	@ (8020d8c <stream_open_instance+0x30>)
 8020d64:	7020      	strb	r0, [r4, #0]
    connection.baud_rate = baud_rate;
 8020d66:	6061      	str	r1, [r4, #4]
    connection.stream = NULL;
 8020d68:	2500      	movs	r5, #0
 8020d6a:	60a5      	str	r5, [r4, #8]
    if(stream_enumerate_streams(_open_instance)) {
 8020d6c:	4808      	ldr	r0, [pc, #32]	@ (8020d90 <stream_open_instance+0x34>)
 8020d6e:	f7ff ff3d 	bl	8020bec <stream_enumerate_streams>
 8020d72:	b140      	cbz	r0, 8020d86 <stream_open_instance+0x2a>
        connection.stream->set_enqueue_rt_handler(rx_handler);
 8020d74:	68a3      	ldr	r3, [r4, #8]
 8020d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020d78:	4638      	mov	r0, r7
 8020d7a:	4798      	blx	r3
        if(description)
 8020d7c:	b11e      	cbz	r6, 8020d86 <stream_open_instance+0x2a>
            stream_set_description(connection.stream, description);
 8020d7e:	4631      	mov	r1, r6
 8020d80:	68a0      	ldr	r0, [r4, #8]
 8020d82:	f7ff ffc9 	bl	8020d18 <stream_set_description>
}
 8020d86:	4b01      	ldr	r3, [pc, #4]	@ (8020d8c <stream_open_instance+0x30>)
 8020d88:	6898      	ldr	r0, [r3, #8]
 8020d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020d8c:	20002a74 	.word	0x20002a74
 8020d90:	08020a89 	.word	0x08020a89

08020d94 <stream_mpg_enable>:
    if(mpg.stream == NULL)
 8020d94:	4b47      	ldr	r3, [pc, #284]	@ (8020eb4 <stream_mpg_enable+0x120>)
 8020d96:	681b      	ldr	r3, [r3, #0]
 8020d98:	2b00      	cmp	r3, #0
 8020d9a:	f000 8088 	beq.w	8020eae <stream_mpg_enable+0x11a>
{
 8020d9e:	b570      	push	{r4, r5, r6, lr}
 8020da0:	4604      	mov	r4, r0
    sys_state_t state = state_get();
 8020da2:	f7fe f9b1 	bl	801f108 <state_get>
    if(on == sys.mpg_mode || (on && (gc_state.file_run || !(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP)))))) {
 8020da6:	4b44      	ldr	r3, [pc, #272]	@ (8020eb8 <stream_mpg_enable+0x124>)
 8020da8:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8020dac:	42a3      	cmp	r3, r4
 8020dae:	d042      	beq.n	8020e36 <stream_mpg_enable+0xa2>
 8020db0:	2c00      	cmp	r4, #0
 8020db2:	d045      	beq.n	8020e40 <stream_mpg_enable+0xac>
 8020db4:	4b41      	ldr	r3, [pc, #260]	@ (8020ebc <stream_mpg_enable+0x128>)
 8020db6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8020dba:	2b00      	cmp	r3, #0
 8020dbc:	d13b      	bne.n	8020e36 <stream_mpg_enable+0xa2>
 8020dbe:	b118      	cbz	r0, 8020dc8 <stream_mpg_enable+0x34>
 8020dc0:	f240 1301 	movw	r3, #257	@ 0x101
 8020dc4:	4218      	tst	r0, r3
 8020dc6:	d036      	beq.n	8020e36 <stream_mpg_enable+0xa2>
        if(org_stream.type == StreamType_Redirected) {
 8020dc8:	4b3d      	ldr	r3, [pc, #244]	@ (8020ec0 <stream_mpg_enable+0x12c>)
 8020dca:	781b      	ldrb	r3, [r3, #0]
 8020dcc:	2b06      	cmp	r3, #6
 8020dce:	d151      	bne.n	8020e74 <stream_mpg_enable+0xe0>
            memcpy(&org_stream, &hal.stream, sizeof(io_stream_t));
 8020dd0:	4d3c      	ldr	r5, [pc, #240]	@ (8020ec4 <stream_mpg_enable+0x130>)
 8020dd2:	224c      	movs	r2, #76	@ 0x4c
 8020dd4:	f105 01a8 	add.w	r1, r5, #168	@ 0xa8
 8020dd8:	4839      	ldr	r0, [pc, #228]	@ (8020ec0 <stream_mpg_enable+0x12c>)
 8020dda:	f004 fa04 	bl	80251e6 <memcpy>
            if(hal.stream.disable_rx)
 8020dde:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
 8020de2:	b10b      	cbz	r3, 8020de8 <stream_mpg_enable+0x54>
                hal.stream.disable_rx(true);
 8020de4:	2001      	movs	r0, #1
 8020de6:	4798      	blx	r3
            mpg.stream->disable_rx(false);
 8020de8:	4d32      	ldr	r5, [pc, #200]	@ (8020eb4 <stream_mpg_enable+0x120>)
 8020dea:	682b      	ldr	r3, [r5, #0]
 8020dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020dee:	2000      	movs	r0, #0
 8020df0:	4798      	blx	r3
            mpg.stream->set_enqueue_rt_handler(org_stream.set_enqueue_rt_handler(NULL));
 8020df2:	682b      	ldr	r3, [r5, #0]
 8020df4:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 8020df6:	4b32      	ldr	r3, [pc, #200]	@ (8020ec0 <stream_mpg_enable+0x12c>)
 8020df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020dfa:	2000      	movs	r0, #0
 8020dfc:	4798      	blx	r3
 8020dfe:	47b0      	blx	r6
            hal.stream.type = StreamType_MPG;
 8020e00:	4a30      	ldr	r2, [pc, #192]	@ (8020ec4 <stream_mpg_enable+0x130>)
 8020e02:	2301      	movs	r3, #1
 8020e04:	f882 30a8 	strb.w	r3, [r2, #168]	@ 0xa8
            hal.stream.read = mpg.stream->read;
 8020e08:	682b      	ldr	r3, [r5, #0]
 8020e0a:	69d9      	ldr	r1, [r3, #28]
 8020e0c:	f8c2 10c4 	str.w	r1, [r2, #196]	@ 0xc4
            if(mpg.flags.is_mpg_tx)
 8020e10:	7a2a      	ldrb	r2, [r5, #8]
 8020e12:	f012 0f02 	tst.w	r2, #2
 8020e16:	d003      	beq.n	8020e20 <stream_mpg_enable+0x8c>
                hal.stream.write = mpg.stream->write;
 8020e18:	68d9      	ldr	r1, [r3, #12]
 8020e1a:	4a2a      	ldr	r2, [pc, #168]	@ (8020ec4 <stream_mpg_enable+0x130>)
 8020e1c:	f8c2 10b4 	str.w	r1, [r2, #180]	@ 0xb4
            hal.stream.get_rx_buffer_free = mpg.stream->get_rx_buffer_free;
 8020e20:	6899      	ldr	r1, [r3, #8]
 8020e22:	4a28      	ldr	r2, [pc, #160]	@ (8020ec4 <stream_mpg_enable+0x130>)
 8020e24:	f8c2 10b0 	str.w	r1, [r2, #176]	@ 0xb0
            hal.stream.cancel_read_buffer = mpg.stream->cancel_read_buffer;
 8020e28:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8020e2a:	f8c2 10cc 	str.w	r1, [r2, #204]	@ 0xcc
            hal.stream.reset_read_buffer = mpg.stream->reset_read_buffer;
 8020e2e:	6a1b      	ldr	r3, [r3, #32]
 8020e30:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
 8020e34:	e01e      	b.n	8020e74 <stream_mpg_enable+0xe0>
        protocol_enqueue_realtime_command(CMD_STATUS_REPORT_ALL);
 8020e36:	2087      	movs	r0, #135	@ 0x87
 8020e38:	f7f7 f910 	bl	801805c <protocol_enqueue_realtime_command>
        return false;
 8020e3c:	2000      	movs	r0, #0
 8020e3e:	e02d      	b.n	8020e9c <stream_mpg_enable+0x108>
    } else if(org_stream.type != StreamType_Redirected) {
 8020e40:	4b1f      	ldr	r3, [pc, #124]	@ (8020ec0 <stream_mpg_enable+0x12c>)
 8020e42:	781b      	ldrb	r3, [r3, #0]
 8020e44:	2b06      	cmp	r3, #6
 8020e46:	d015      	beq.n	8020e74 <stream_mpg_enable+0xe0>
        if(mpg_write_char)
 8020e48:	4b1f      	ldr	r3, [pc, #124]	@ (8020ec8 <stream_mpg_enable+0x134>)
 8020e4a:	6818      	ldr	r0, [r3, #0]
 8020e4c:	b338      	cbz	r0, 8020e9e <stream_mpg_enable+0x10a>
            mpg.stream->set_enqueue_rt_handler(mpg_write_char);
 8020e4e:	4b19      	ldr	r3, [pc, #100]	@ (8020eb4 <stream_mpg_enable+0x120>)
 8020e50:	681b      	ldr	r3, [r3, #0]
 8020e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020e54:	4798      	blx	r3
        memcpy(&hal.stream, &org_stream, sizeof(io_stream_t));
 8020e56:	4d1b      	ldr	r5, [pc, #108]	@ (8020ec4 <stream_mpg_enable+0x130>)
 8020e58:	4e19      	ldr	r6, [pc, #100]	@ (8020ec0 <stream_mpg_enable+0x12c>)
 8020e5a:	224c      	movs	r2, #76	@ 0x4c
 8020e5c:	4631      	mov	r1, r6
 8020e5e:	f105 00a8 	add.w	r0, r5, #168	@ 0xa8
 8020e62:	f004 f9c0 	bl	80251e6 <memcpy>
        org_stream.type = StreamType_Redirected;
 8020e66:	2306      	movs	r3, #6
 8020e68:	7033      	strb	r3, [r6, #0]
        if(hal.stream.disable_rx)
 8020e6a:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
 8020e6e:	b10b      	cbz	r3, 8020e74 <stream_mpg_enable+0xe0>
            hal.stream.disable_rx(false);
 8020e70:	2000      	movs	r0, #0
 8020e72:	4798      	blx	r3
    hal.stream.reset_read_buffer();
 8020e74:	4b13      	ldr	r3, [pc, #76]	@ (8020ec4 <stream_mpg_enable+0x130>)
 8020e76:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8020e7a:	4798      	blx	r3
    sys.mpg_mode = on;
 8020e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8020eb8 <stream_mpg_enable+0x124>)
 8020e7e:	f883 407f 	strb.w	r4, [r3, #127]	@ 0x7f
    mpg.flags.mpg_control = Off;
 8020e82:	4b0c      	ldr	r3, [pc, #48]	@ (8020eb4 <stream_mpg_enable+0x120>)
 8020e84:	7a1a      	ldrb	r2, [r3, #8]
 8020e86:	f36f 0200 	bfc	r2, #0, #1
 8020e8a:	721a      	strb	r2, [r3, #8]
    system_add_rt_report(Report_MPGMode);
 8020e8c:	2001      	movs	r0, #1
 8020e8e:	f001 f917 	bl	80220c0 <system_add_rt_report>
    protocol_enqueue_realtime_command(on ? CMD_STATUS_REPORT_ALL : CMD_STATUS_REPORT);
 8020e92:	b154      	cbz	r4, 8020eaa <stream_mpg_enable+0x116>
 8020e94:	2087      	movs	r0, #135	@ 0x87
 8020e96:	f7f7 f8e1 	bl	801805c <protocol_enqueue_realtime_command>
    return true;
 8020e9a:	2001      	movs	r0, #1
}
 8020e9c:	bd70      	pop	{r4, r5, r6, pc}
            mpg.stream->disable_rx(true);
 8020e9e:	4b05      	ldr	r3, [pc, #20]	@ (8020eb4 <stream_mpg_enable+0x120>)
 8020ea0:	681b      	ldr	r3, [r3, #0]
 8020ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020ea4:	2001      	movs	r0, #1
 8020ea6:	4798      	blx	r3
 8020ea8:	e7d5      	b.n	8020e56 <stream_mpg_enable+0xc2>
    protocol_enqueue_realtime_command(on ? CMD_STATUS_REPORT_ALL : CMD_STATUS_REPORT);
 8020eaa:	2080      	movs	r0, #128	@ 0x80
 8020eac:	e7f3      	b.n	8020e96 <stream_mpg_enable+0x102>
        return false;
 8020eae:	2000      	movs	r0, #0
}
 8020eb0:	4770      	bx	lr
 8020eb2:	bf00      	nop
 8020eb4:	20002a84 	.word	0x20002a84
 8020eb8:	20001bbc 	.word	0x20001bbc
 8020ebc:	20001614 	.word	0x20001614
 8020ec0:	20000440 	.word	0x20000440
 8020ec4:	200018dc 	.word	0x200018dc
 8020ec8:	20002a80 	.word	0x20002a80

08020ecc <stream_select>:
{
 8020ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ece:	4604      	mov	r4, r0
 8020ed0:	460d      	mov	r5, r1
    if(stream == base.stream) {
 8020ed2:	4b8e      	ldr	r3, [pc, #568]	@ (802110c <stream_select+0x240>)
 8020ed4:	681b      	ldr	r3, [r3, #0]
 8020ed6:	4283      	cmp	r3, r0
 8020ed8:	d00b      	beq.n	8020ef2 <stream_select+0x26>
    if(!add) { // disconnect
 8020eda:	2900      	cmp	r1, #0
 8020edc:	d144      	bne.n	8020f68 <stream_select+0x9c>
        if(stream == base.stream || stream == mpg.stream)
 8020ede:	4b8c      	ldr	r3, [pc, #560]	@ (8021110 <stream_select+0x244>)
 8020ee0:	681b      	ldr	r3, [r3, #0]
 8020ee2:	4283      	cmp	r3, r0
 8020ee4:	f000 813a 	beq.w	802115c <stream_select+0x290>
        stream_connection_t *connection = connections->next;
 8020ee8:	4b88      	ldr	r3, [pc, #544]	@ (802110c <stream_select+0x240>)
 8020eea:	68db      	ldr	r3, [r3, #12]
        bool disconnected = false;
 8020eec:	4608      	mov	r0, r1
    bool send_init_message = false, mpg_enable = false;
 8020eee:	460e      	mov	r6, r1
        while(connection) {
 8020ef0:	e014      	b.n	8020f1c <stream_select+0x50>
        base.is_up = add ? (stream->is_connected ? stream->is_connected : stream_connected) : is_not_connected;
 8020ef2:	b119      	cbz	r1, 8020efc <stream_select+0x30>
 8020ef4:	6843      	ldr	r3, [r0, #4]
 8020ef6:	b913      	cbnz	r3, 8020efe <stream_select+0x32>
 8020ef8:	4b86      	ldr	r3, [pc, #536]	@ (8021114 <stream_select+0x248>)
 8020efa:	e000      	b.n	8020efe <stream_select+0x32>
 8020efc:	4b86      	ldr	r3, [pc, #536]	@ (8021118 <stream_select+0x24c>)
 8020efe:	4a83      	ldr	r2, [pc, #524]	@ (802110c <stream_select+0x240>)
 8020f00:	6053      	str	r3, [r2, #4]
        return true;
 8020f02:	2001      	movs	r0, #1
 8020f04:	e0de      	b.n	80210c4 <stream_select+0x1f8>
                	mpg_enable = mpg.flags.mpg_control;
 8020f06:	4982      	ldr	r1, [pc, #520]	@ (8021110 <stream_select+0x244>)
 8020f08:	7a0e      	ldrb	r6, [r1, #8]
 8020f0a:	f006 0601 	and.w	r6, r6, #1
                	if((stream = connection->prev->prev->stream) == NULL)
 8020f0e:	6912      	ldr	r2, [r2, #16]
 8020f10:	6814      	ldr	r4, [r2, #0]
 8020f12:	b99c      	cbnz	r4, 8020f3c <stream_select+0x70>
                		stream = base.stream;
 8020f14:	4a7d      	ldr	r2, [pc, #500]	@ (802110c <stream_select+0x240>)
 8020f16:	6814      	ldr	r4, [r2, #0]
 8020f18:	e010      	b.n	8020f3c <stream_select+0x70>
        		connection = connection->next;
 8020f1a:	68db      	ldr	r3, [r3, #12]
        while(connection) {
 8020f1c:	b1a3      	cbz	r3, 8020f48 <stream_select+0x7c>
        	if(stream == connection->stream) {
 8020f1e:	681a      	ldr	r2, [r3, #0]
 8020f20:	42a2      	cmp	r2, r4
 8020f22:	d1fa      	bne.n	8020f1a <stream_select+0x4e>
        		if((connection->prev->next = connection->next))
 8020f24:	6919      	ldr	r1, [r3, #16]
 8020f26:	68da      	ldr	r2, [r3, #12]
 8020f28:	60ca      	str	r2, [r1, #12]
 8020f2a:	b10a      	cbz	r2, 8020f30 <stream_select+0x64>
        			connection->next->prev = connection->prev;
 8020f2c:	6919      	ldr	r1, [r3, #16]
 8020f2e:	6111      	str	r1, [r2, #16]
                if((stream = connection->prev->stream) == mpg.stream) {
 8020f30:	691a      	ldr	r2, [r3, #16]
 8020f32:	6814      	ldr	r4, [r2, #0]
 8020f34:	4976      	ldr	r1, [pc, #472]	@ (8021110 <stream_select+0x244>)
 8020f36:	6809      	ldr	r1, [r1, #0]
 8020f38:	42a1      	cmp	r1, r4
 8020f3a:	d0e4      	beq.n	8020f06 <stream_select+0x3a>
                free(connection);
 8020f3c:	4618      	mov	r0, r3
 8020f3e:	f001 ff33 	bl	8022da8 <free>
        		connection = NULL;
 8020f42:	2300      	movs	r3, #0
        		disconnected = true;
 8020f44:	2001      	movs	r0, #1
 8020f46:	e7e9      	b.n	8020f1c <stream_select+0x50>
        if(!disconnected)
 8020f48:	2800      	cmp	r0, #0
 8020f4a:	f000 80bb 	beq.w	80210c4 <stream_select+0x1f8>
    bool webui_connected = hal.stream.state.webui_connected;
 8020f4e:	4b73      	ldr	r3, [pc, #460]	@ (802111c <stream_select+0x250>)
 8020f50:	f893 70aa 	ldrb.w	r7, [r3, #170]	@ 0xaa
 8020f54:	f3c7 0740 	ubfx	r7, r7, #1, #1
    switch(stream->type) {
 8020f58:	7823      	ldrb	r3, [r4, #0]
 8020f5a:	2b04      	cmp	r3, #4
 8020f5c:	d875      	bhi.n	802104a <stream_select+0x17e>
 8020f5e:	e8df f003 	tbb	[pc, r3]
 8020f62:	740a      	.short	0x740a
 8020f64:	3060      	.short	0x3060
 8020f66:	44          	.byte	0x44
 8020f67:	00          	.byte	0x00
	} else if(add_connection(stream) == NULL)
 8020f68:	f7ff fe02 	bl	8020b70 <add_connection>
 8020f6c:	2800      	cmp	r0, #0
 8020f6e:	f000 80f7 	beq.w	8021160 <stream_select+0x294>
    bool send_init_message = false, mpg_enable = false;
 8020f72:	2600      	movs	r6, #0
 8020f74:	e7eb      	b.n	8020f4e <stream_select+0x82>
            if(active_stream && active_stream->type != StreamType_Serial && connection_is_up((io_stream_t *)stream)) {
 8020f76:	4b6a      	ldr	r3, [pc, #424]	@ (8021120 <stream_select+0x254>)
 8020f78:	681b      	ldr	r3, [r3, #0]
 8020f7a:	2b00      	cmp	r3, #0
 8020f7c:	f000 80a3 	beq.w	80210c6 <stream_select+0x1fa>
 8020f80:	781b      	ldrb	r3, [r3, #0]
 8020f82:	b90b      	cbnz	r3, 8020f88 <stream_select+0xbc>
    bool send_init_message = false, mpg_enable = false;
 8020f84:	2500      	movs	r5, #0
 8020f86:	e061      	b.n	802104c <stream_select+0x180>
            if(active_stream && active_stream->type != StreamType_Serial && connection_is_up((io_stream_t *)stream)) {
 8020f88:	4620      	mov	r0, r4
 8020f8a:	f7ff fd47 	bl	8020a1c <connection_is_up>
 8020f8e:	4605      	mov	r5, r0
 8020f90:	2800      	cmp	r0, #0
 8020f92:	d05b      	beq.n	802104c <stream_select+0x180>
                hal.stream.write = stream->write;
 8020f94:	68e2      	ldr	r2, [r4, #12]
 8020f96:	4b61      	ldr	r3, [pc, #388]	@ (802111c <stream_select+0x250>)
 8020f98:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
                report_message("SERIAL STREAM ACTIVE", Message_Plain);
 8020f9c:	2100      	movs	r1, #0
 8020f9e:	4861      	ldr	r0, [pc, #388]	@ (8021124 <stream_select+0x258>)
 8020fa0:	f7f8 fcaa 	bl	80198f8 <report_message>
                if(stream->get_tx_buffer_count)
 8020fa4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8020fa6:	b12b      	cbz	r3, 8020fb4 <stream_select+0xe8>
                    while(stream->get_tx_buffer_count());
 8020fa8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8020faa:	4798      	blx	r3
 8020fac:	2800      	cmp	r0, #0
 8020fae:	d1fb      	bne.n	8020fa8 <stream_select+0xdc>
    bool send_init_message = false, mpg_enable = false;
 8020fb0:	2500      	movs	r5, #0
 8020fb2:	e04b      	b.n	802104c <stream_select+0x180>
                    hal.delay_ms(100, NULL);
 8020fb4:	4b59      	ldr	r3, [pc, #356]	@ (802111c <stream_select+0x250>)
 8020fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020fb8:	2100      	movs	r1, #0
 8020fba:	2064      	movs	r0, #100	@ 0x64
 8020fbc:	4798      	blx	r3
    bool send_init_message = false, mpg_enable = false;
 8020fbe:	2500      	movs	r5, #0
 8020fc0:	e044      	b.n	802104c <stream_select+0x180>
            if(connection_is_up(&hal.stream))
 8020fc2:	4859      	ldr	r0, [pc, #356]	@ (8021128 <stream_select+0x25c>)
 8020fc4:	f7ff fd2a 	bl	8020a1c <connection_is_up>
 8020fc8:	b930      	cbnz	r0, 8020fd8 <stream_select+0x10c>
            send_init_message = add && sys.driver_started;
 8020fca:	b155      	cbz	r5, 8020fe2 <stream_select+0x116>
 8020fcc:	4b57      	ldr	r3, [pc, #348]	@ (802112c <stream_select+0x260>)
 8020fce:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8020fd2:	b943      	cbnz	r3, 8020fe6 <stream_select+0x11a>
 8020fd4:	2500      	movs	r5, #0
 8020fd6:	e039      	b.n	802104c <stream_select+0x180>
                report_message("TELNET STREAM ACTIVE", Message_Plain);
 8020fd8:	2100      	movs	r1, #0
 8020fda:	4855      	ldr	r0, [pc, #340]	@ (8021130 <stream_select+0x264>)
 8020fdc:	f7f8 fc8c 	bl	80198f8 <report_message>
 8020fe0:	e7f3      	b.n	8020fca <stream_select+0xfe>
            send_init_message = add && sys.driver_started;
 8020fe2:	2500      	movs	r5, #0
 8020fe4:	e032      	b.n	802104c <stream_select+0x180>
 8020fe6:	2501      	movs	r5, #1
            break;
 8020fe8:	e030      	b.n	802104c <stream_select+0x180>
            if(connection_is_up(&hal.stream))
 8020fea:	484f      	ldr	r0, [pc, #316]	@ (8021128 <stream_select+0x25c>)
 8020fec:	f7ff fd16 	bl	8020a1c <connection_is_up>
 8020ff0:	b960      	cbnz	r0, 802100c <stream_select+0x140>
            send_init_message = add && sys.driver_started && !hal.stream.state.webui_connected;
 8020ff2:	b185      	cbz	r5, 8021016 <stream_select+0x14a>
 8020ff4:	4b4d      	ldr	r3, [pc, #308]	@ (802112c <stream_select+0x260>)
 8020ff6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8020ffa:	b173      	cbz	r3, 802101a <stream_select+0x14e>
 8020ffc:	4b47      	ldr	r3, [pc, #284]	@ (802111c <stream_select+0x250>)
 8020ffe:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 8021002:	f013 0f02 	tst.w	r3, #2
 8021006:	d00a      	beq.n	802101e <stream_select+0x152>
 8021008:	2500      	movs	r5, #0
 802100a:	e01f      	b.n	802104c <stream_select+0x180>
                report_message("WEBSOCKET STREAM ACTIVE", Message_Plain);
 802100c:	2100      	movs	r1, #0
 802100e:	4849      	ldr	r0, [pc, #292]	@ (8021134 <stream_select+0x268>)
 8021010:	f7f8 fc72 	bl	80198f8 <report_message>
 8021014:	e7ed      	b.n	8020ff2 <stream_select+0x126>
            send_init_message = add && sys.driver_started && !hal.stream.state.webui_connected;
 8021016:	2500      	movs	r5, #0
 8021018:	e018      	b.n	802104c <stream_select+0x180>
 802101a:	2500      	movs	r5, #0
 802101c:	e016      	b.n	802104c <stream_select+0x180>
 802101e:	2501      	movs	r5, #1
            break;
 8021020:	e014      	b.n	802104c <stream_select+0x180>
            if(connection_is_up(&hal.stream))
 8021022:	4841      	ldr	r0, [pc, #260]	@ (8021128 <stream_select+0x25c>)
 8021024:	f7ff fcfa 	bl	8020a1c <connection_is_up>
 8021028:	b930      	cbnz	r0, 8021038 <stream_select+0x16c>
            send_init_message = add && sys.driver_started;
 802102a:	b155      	cbz	r5, 8021042 <stream_select+0x176>
 802102c:	4b3f      	ldr	r3, [pc, #252]	@ (802112c <stream_select+0x260>)
 802102e:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8021032:	b943      	cbnz	r3, 8021046 <stream_select+0x17a>
 8021034:	2500      	movs	r5, #0
 8021036:	e009      	b.n	802104c <stream_select+0x180>
                report_message("BLUETOOTH STREAM ACTIVE", Message_Plain);
 8021038:	2100      	movs	r1, #0
 802103a:	483f      	ldr	r0, [pc, #252]	@ (8021138 <stream_select+0x26c>)
 802103c:	f7f8 fc5c 	bl	80198f8 <report_message>
 8021040:	e7f3      	b.n	802102a <stream_select+0x15e>
            send_init_message = add && sys.driver_started;
 8021042:	2500      	movs	r5, #0
 8021044:	e002      	b.n	802104c <stream_select+0x180>
 8021046:	2501      	movs	r5, #1
            break;
 8021048:	e000      	b.n	802104c <stream_select+0x180>
    switch(stream->type) {
 802104a:	2500      	movs	r5, #0
    if(hal.stream.type == StreamType_MPG) {
 802104c:	4b33      	ldr	r3, [pc, #204]	@ (802111c <stream_select+0x250>)
 802104e:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8021052:	2b01      	cmp	r3, #1
 8021054:	d039      	beq.n	80210ca <stream_select+0x1fe>
    } else if(mpg_enable)
 8021056:	2e00      	cmp	r6, #0
 8021058:	d140      	bne.n	80210dc <stream_select+0x210>
    memcpy(&hal.stream, stream, sizeof(io_stream_t));
 802105a:	224c      	movs	r2, #76	@ 0x4c
 802105c:	4621      	mov	r1, r4
 802105e:	4832      	ldr	r0, [pc, #200]	@ (8021128 <stream_select+0x25c>)
 8021060:	f004 f8c1 	bl	80251e6 <memcpy>
    if(stream == base.stream && base.is_up == is_not_connected)
 8021064:	4b29      	ldr	r3, [pc, #164]	@ (802110c <stream_select+0x240>)
 8021066:	681b      	ldr	r3, [r3, #0]
 8021068:	42a3      	cmp	r3, r4
 802106a:	d03c      	beq.n	80210e6 <stream_select+0x21a>
    if(hal.stream.is_connected == NULL)
 802106c:	4a2b      	ldr	r2, [pc, #172]	@ (802111c <stream_select+0x250>)
 802106e:	f8d2 20ac 	ldr.w	r2, [r2, #172]	@ 0xac
 8021072:	2a00      	cmp	r2, #0
 8021074:	d040      	beq.n	80210f8 <stream_select+0x22c>
    if(stream->type == StreamType_WebSocket && !stream->state.webui_connected)
 8021076:	6823      	ldr	r3, [r4, #0]
 8021078:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802107c:	f423 037d 	bic.w	r3, r3, #16580608	@ 0xfd0000
 8021080:	2b04      	cmp	r3, #4
 8021082:	d063      	beq.n	802114c <stream_select+0x280>
    if(send_init_message) {
 8021084:	b135      	cbz	r5, 8021094 <stream_select+0x1c8>
        hal.stream.write_all = stream->write;
 8021086:	68e2      	ldr	r2, [r4, #12]
 8021088:	4b24      	ldr	r3, [pc, #144]	@ (802111c <stream_select+0x250>)
 802108a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        grbl.report.init_message();
 802108e:	4b2b      	ldr	r3, [pc, #172]	@ (802113c <stream_select+0x270>)
 8021090:	681b      	ldr	r3, [r3, #0]
 8021092:	4798      	blx	r3
    hal.stream.write_all = stream_write_all;
 8021094:	4d21      	ldr	r5, [pc, #132]	@ (802111c <stream_select+0x250>)
 8021096:	4b2a      	ldr	r3, [pc, #168]	@ (8021140 <stream_select+0x274>)
 8021098:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
    hal.stream.set_enqueue_rt_handler(protocol_enqueue_realtime_command);
 802109c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 80210a0:	4828      	ldr	r0, [pc, #160]	@ (8021144 <stream_select+0x278>)
 80210a2:	4798      	blx	r3
    if(hal.stream.disable_rx)
 80210a4:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
 80210a8:	b10b      	cbz	r3, 80210ae <stream_select+0x1e2>
        hal.stream.disable_rx(false);
 80210aa:	2000      	movs	r0, #0
 80210ac:	4798      	blx	r3
    if(grbl.on_stream_changed)
 80210ae:	4b23      	ldr	r3, [pc, #140]	@ (802113c <stream_select+0x270>)
 80210b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80210b4:	b11b      	cbz	r3, 80210be <stream_select+0x1f2>
        grbl.on_stream_changed(hal.stream.type);
 80210b6:	4a19      	ldr	r2, [pc, #100]	@ (802111c <stream_select+0x250>)
 80210b8:	f892 00a8 	ldrb.w	r0, [r2, #168]	@ 0xa8
 80210bc:	4798      	blx	r3
    active_stream = stream;
 80210be:	4b18      	ldr	r3, [pc, #96]	@ (8021120 <stream_select+0x254>)
 80210c0:	601c      	str	r4, [r3, #0]
    return true;
 80210c2:	2001      	movs	r0, #1
}
 80210c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool send_init_message = false, mpg_enable = false;
 80210c6:	2500      	movs	r5, #0
 80210c8:	e7c0      	b.n	802104c <stream_select+0x180>
        stream_mpg_enable(false);
 80210ca:	2000      	movs	r0, #0
 80210cc:	f7ff fe62 	bl	8020d94 <stream_mpg_enable>
        mpg.flags.mpg_control = On;
 80210d0:	4a0f      	ldr	r2, [pc, #60]	@ (8021110 <stream_select+0x244>)
 80210d2:	7a13      	ldrb	r3, [r2, #8]
 80210d4:	f043 0301 	orr.w	r3, r3, #1
 80210d8:	7213      	strb	r3, [r2, #8]
 80210da:	e7be      	b.n	802105a <stream_select+0x18e>
		protocol_enqueue_foreground_task(stream_mpg_set_mode, (void *)1);
 80210dc:	2101      	movs	r1, #1
 80210de:	481a      	ldr	r0, [pc, #104]	@ (8021148 <stream_select+0x27c>)
 80210e0:	f7f6 ff96 	bl	8018010 <protocol_enqueue_foreground_task>
 80210e4:	e7b9      	b.n	802105a <stream_select+0x18e>
    if(stream == base.stream && base.is_up == is_not_connected)
 80210e6:	4a09      	ldr	r2, [pc, #36]	@ (802110c <stream_select+0x240>)
 80210e8:	6851      	ldr	r1, [r2, #4]
 80210ea:	4a0b      	ldr	r2, [pc, #44]	@ (8021118 <stream_select+0x24c>)
 80210ec:	4291      	cmp	r1, r2
 80210ee:	d1bd      	bne.n	802106c <stream_select+0x1a0>
        base.is_up = stream_connected;
 80210f0:	4a06      	ldr	r2, [pc, #24]	@ (802110c <stream_select+0x240>)
 80210f2:	4908      	ldr	r1, [pc, #32]	@ (8021114 <stream_select+0x248>)
 80210f4:	6051      	str	r1, [r2, #4]
 80210f6:	e7b9      	b.n	802106c <stream_select+0x1a0>
        hal.stream.is_connected = stream == base.stream ? base.is_up : stream_connected;
 80210f8:	42a3      	cmp	r3, r4
 80210fa:	d004      	beq.n	8021106 <stream_select+0x23a>
 80210fc:	4a05      	ldr	r2, [pc, #20]	@ (8021114 <stream_select+0x248>)
 80210fe:	4b07      	ldr	r3, [pc, #28]	@ (802111c <stream_select+0x250>)
 8021100:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8021104:	e7b7      	b.n	8021076 <stream_select+0x1aa>
 8021106:	4b01      	ldr	r3, [pc, #4]	@ (802110c <stream_select+0x240>)
 8021108:	685a      	ldr	r2, [r3, #4]
 802110a:	e7f8      	b.n	80210fe <stream_select+0x232>
 802110c:	20002a98 	.word	0x20002a98
 8021110:	20002a84 	.word	0x20002a84
 8021114:	08020a13 	.word	0x08020a13
 8021118:	08020a17 	.word	0x08020a17
 802111c:	200018dc 	.word	0x200018dc
 8021120:	20002a70 	.word	0x20002a70
 8021124:	08030c54 	.word	0x08030c54
 8021128:	20001984 	.word	0x20001984
 802112c:	20001bbc 	.word	0x20001bbc
 8021130:	08030c6c 	.word	0x08030c6c
 8021134:	08030c84 	.word	0x08030c84
 8021138:	08030c9c 	.word	0x08030c9c
 802113c:	20001ac4 	.word	0x20001ac4
 8021140:	08020a65 	.word	0x08020a65
 8021144:	0801805d 	.word	0x0801805d
 8021148:	080211bd 	.word	0x080211bd
        hal.stream.state.webui_connected = webui_connected;
 802114c:	4b05      	ldr	r3, [pc, #20]	@ (8021164 <stream_select+0x298>)
 802114e:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8021152:	f367 0241 	bfi	r2, r7, #1, #1
 8021156:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
 802115a:	e793      	b.n	8021084 <stream_select+0x1b8>
        	return false;
 802115c:	4608      	mov	r0, r1
 802115e:	e7b1      	b.n	80210c4 <stream_select+0x1f8>
        return false;
 8021160:	2000      	movs	r0, #0
 8021162:	e7af      	b.n	80210c4 <stream_select+0x1f8>
 8021164:	200018dc 	.word	0x200018dc

08021168 <stream_connect>:
{
 8021168:	b538      	push	{r3, r4, r5, lr}
 802116a:	4604      	mov	r4, r0
    if((ok = stream_select(stream, true)))
 802116c:	2101      	movs	r1, #1
 802116e:	f7ff fead 	bl	8020ecc <stream_select>
 8021172:	4605      	mov	r5, r0
 8021174:	b908      	cbnz	r0, 802117a <stream_connect+0x12>
}
 8021176:	4628      	mov	r0, r5
 8021178:	bd38      	pop	{r3, r4, r5, pc}
        stream_set_description(stream, "Primary UART");
 802117a:	4902      	ldr	r1, [pc, #8]	@ (8021184 <stream_connect+0x1c>)
 802117c:	4620      	mov	r0, r4
 802117e:	f7ff fdcb 	bl	8020d18 <stream_set_description>
 8021182:	e7f8      	b.n	8021176 <stream_connect+0xe>
 8021184:	08030cb4 	.word	0x08030cb4

08021188 <stream_connect_instance>:
{
 8021188:	b508      	push	{r3, lr}
    connection.instance = instance;
 802118a:	4b0a      	ldr	r3, [pc, #40]	@ (80211b4 <stream_connect_instance+0x2c>)
 802118c:	7018      	strb	r0, [r3, #0]
    connection.baud_rate = baud_rate;
 802118e:	6059      	str	r1, [r3, #4]
    connection.stream = NULL;
 8021190:	2200      	movs	r2, #0
 8021192:	609a      	str	r2, [r3, #8]
    return stream_enumerate_streams(_open_instance) && stream_connect(connection.stream);
 8021194:	4808      	ldr	r0, [pc, #32]	@ (80211b8 <stream_connect_instance+0x30>)
 8021196:	f7ff fd29 	bl	8020bec <stream_enumerate_streams>
 802119a:	b908      	cbnz	r0, 80211a0 <stream_connect_instance+0x18>
 802119c:	2000      	movs	r0, #0
}
 802119e:	bd08      	pop	{r3, pc}
    return stream_enumerate_streams(_open_instance) && stream_connect(connection.stream);
 80211a0:	4b04      	ldr	r3, [pc, #16]	@ (80211b4 <stream_connect_instance+0x2c>)
 80211a2:	6898      	ldr	r0, [r3, #8]
 80211a4:	f7ff ffe0 	bl	8021168 <stream_connect>
 80211a8:	b108      	cbz	r0, 80211ae <stream_connect_instance+0x26>
 80211aa:	2001      	movs	r0, #1
 80211ac:	e7f7      	b.n	802119e <stream_connect_instance+0x16>
 80211ae:	2000      	movs	r0, #0
 80211b0:	e7f5      	b.n	802119e <stream_connect_instance+0x16>
 80211b2:	bf00      	nop
 80211b4:	20002a74 	.word	0x20002a74
 80211b8:	08020a89 	.word	0x08020a89

080211bc <stream_mpg_set_mode>:
{
 80211bc:	b508      	push	{r3, lr}
    stream_mpg_enable(data != NULL);
 80211be:	3800      	subs	r0, #0
 80211c0:	bf18      	it	ne
 80211c2:	2001      	movne	r0, #1
 80211c4:	f7ff fde6 	bl	8020d94 <stream_mpg_enable>
}
 80211c8:	bd08      	pop	{r3, pc}
	...

080211cc <toggle_single_block>:

    return Status_OK;
}

static status_code_t toggle_single_block (sys_state_t state, char *args)
{
 80211cc:	b508      	push	{r3, lr}
    if(!hal.signals_cap.single_block) {
 80211ce:	4b10      	ldr	r3, [pc, #64]	@ (8021210 <toggle_single_block+0x44>)
 80211d0:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
 80211d4:	f013 0f08 	tst.w	r3, #8
 80211d8:	d10f      	bne.n	80211fa <toggle_single_block+0x2e>
        sys.flags.single_block = !sys.flags.single_block;
 80211da:	4a0e      	ldr	r2, [pc, #56]	@ (8021214 <toggle_single_block+0x48>)
 80211dc:	7d93      	ldrb	r3, [r2, #22]
 80211de:	43d9      	mvns	r1, r3
 80211e0:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 80211e4:	f361 13c7 	bfi	r3, r1, #7, #1
 80211e8:	7593      	strb	r3, [r2, #22]
        grbl.report.feedback_message(sys.flags.single_block ? Message_Enabled : Message_Disabled);
 80211ea:	4b0b      	ldr	r3, [pc, #44]	@ (8021218 <toggle_single_block+0x4c>)
 80211ec:	68db      	ldr	r3, [r3, #12]
 80211ee:	f992 2016 	ldrsb.w	r2, [r2, #22]
 80211f2:	2a00      	cmp	r2, #0
 80211f4:	db08      	blt.n	8021208 <toggle_single_block+0x3c>
 80211f6:	2005      	movs	r0, #5
 80211f8:	4798      	blx	r3
    }

    return hal.signals_cap.single_block ? Status_InvalidStatement : Status_OK;
 80211fa:	4b05      	ldr	r3, [pc, #20]	@ (8021210 <toggle_single_block+0x44>)
 80211fc:	f893 01dd 	ldrb.w	r0, [r3, #477]	@ 0x1dd
 8021200:	f010 0008 	ands.w	r0, r0, #8
 8021204:	d102      	bne.n	802120c <toggle_single_block+0x40>
}
 8021206:	bd08      	pop	{r3, pc}
        grbl.report.feedback_message(sys.flags.single_block ? Message_Enabled : Message_Disabled);
 8021208:	2004      	movs	r0, #4
 802120a:	e7f5      	b.n	80211f8 <toggle_single_block+0x2c>
    return hal.signals_cap.single_block ? Status_InvalidStatement : Status_OK;
 802120c:	2003      	movs	r0, #3
 802120e:	e7fa      	b.n	8021206 <toggle_single_block+0x3a>
 8021210:	200018dc 	.word	0x200018dc
 8021214:	20001bbc 	.word	0x20001bbc
 8021218:	20001ac4 	.word	0x20001ac4

0802121c <toggle_block_delete>:

static status_code_t toggle_block_delete (sys_state_t state, char *args)
{
 802121c:	b508      	push	{r3, lr}
    if(!hal.signals_cap.block_delete) {
 802121e:	4b10      	ldr	r3, [pc, #64]	@ (8021260 <toggle_block_delete+0x44>)
 8021220:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8021224:	f013 0f10 	tst.w	r3, #16
 8021228:	d10f      	bne.n	802124a <toggle_block_delete+0x2e>
        sys.flags.block_delete_enabled = !sys.flags.block_delete_enabled;
 802122a:	4a0e      	ldr	r2, [pc, #56]	@ (8021264 <toggle_block_delete+0x48>)
 802122c:	7d93      	ldrb	r3, [r2, #22]
 802122e:	0919      	lsrs	r1, r3, #4
 8021230:	f081 0101 	eor.w	r1, r1, #1
 8021234:	f361 1304 	bfi	r3, r1, #4, #1
 8021238:	7593      	strb	r3, [r2, #22]
        grbl.report.feedback_message(sys.flags.block_delete_enabled ? Message_Enabled : Message_Disabled);
 802123a:	4b0b      	ldr	r3, [pc, #44]	@ (8021268 <toggle_block_delete+0x4c>)
 802123c:	68db      	ldr	r3, [r3, #12]
 802123e:	7d92      	ldrb	r2, [r2, #22]
 8021240:	f012 0f10 	tst.w	r2, #16
 8021244:	d008      	beq.n	8021258 <toggle_block_delete+0x3c>
 8021246:	2004      	movs	r0, #4
 8021248:	4798      	blx	r3
    }

    return hal.signals_cap.block_delete ? Status_InvalidStatement : Status_OK;
 802124a:	4b05      	ldr	r3, [pc, #20]	@ (8021260 <toggle_block_delete+0x44>)
 802124c:	f893 01dc 	ldrb.w	r0, [r3, #476]	@ 0x1dc
 8021250:	f010 0010 	ands.w	r0, r0, #16
 8021254:	d102      	bne.n	802125c <toggle_block_delete+0x40>
}
 8021256:	bd08      	pop	{r3, pc}
        grbl.report.feedback_message(sys.flags.block_delete_enabled ? Message_Enabled : Message_Disabled);
 8021258:	2005      	movs	r0, #5
 802125a:	e7f5      	b.n	8021248 <toggle_block_delete+0x2c>
    return hal.signals_cap.block_delete ? Status_InvalidStatement : Status_OK;
 802125c:	2003      	movs	r0, #3
 802125e:	e7fa      	b.n	8021256 <toggle_block_delete+0x3a>
 8021260:	200018dc 	.word	0x200018dc
 8021264:	20001bbc 	.word	0x20001bbc
 8021268:	20001ac4 	.word	0x20001ac4

0802126c <toggle_optional_stop>:

static status_code_t toggle_optional_stop (sys_state_t state, char *args)
{
 802126c:	b508      	push	{r3, lr}
    if(!hal.signals_cap.stop_disable) {
 802126e:	4b10      	ldr	r3, [pc, #64]	@ (80212b0 <toggle_optional_stop+0x44>)
 8021270:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8021274:	f013 0f20 	tst.w	r3, #32
 8021278:	d10f      	bne.n	802129a <toggle_optional_stop+0x2e>
        sys.flags.optional_stop_disable = !sys.flags.optional_stop_disable;
 802127a:	4a0e      	ldr	r2, [pc, #56]	@ (80212b4 <toggle_optional_stop+0x48>)
 802127c:	7d93      	ldrb	r3, [r2, #22]
 802127e:	0999      	lsrs	r1, r3, #6
 8021280:	f081 0101 	eor.w	r1, r1, #1
 8021284:	f361 1386 	bfi	r3, r1, #6, #1
 8021288:	7593      	strb	r3, [r2, #22]
        grbl.report.feedback_message(sys.flags.block_delete_enabled ? Message_Enabled : Message_Disabled);
 802128a:	4b0b      	ldr	r3, [pc, #44]	@ (80212b8 <toggle_optional_stop+0x4c>)
 802128c:	68db      	ldr	r3, [r3, #12]
 802128e:	7d92      	ldrb	r2, [r2, #22]
 8021290:	f012 0f10 	tst.w	r2, #16
 8021294:	d008      	beq.n	80212a8 <toggle_optional_stop+0x3c>
 8021296:	2004      	movs	r0, #4
 8021298:	4798      	blx	r3
    }

    return hal.signals_cap.stop_disable ? Status_InvalidStatement : Status_OK;
 802129a:	4b05      	ldr	r3, [pc, #20]	@ (80212b0 <toggle_optional_stop+0x44>)
 802129c:	f893 01dc 	ldrb.w	r0, [r3, #476]	@ 0x1dc
 80212a0:	f010 0020 	ands.w	r0, r0, #32
 80212a4:	d102      	bne.n	80212ac <toggle_optional_stop+0x40>
}
 80212a6:	bd08      	pop	{r3, pc}
        grbl.report.feedback_message(sys.flags.block_delete_enabled ? Message_Enabled : Message_Disabled);
 80212a8:	2005      	movs	r0, #5
 80212aa:	e7f5      	b.n	8021298 <toggle_optional_stop+0x2c>
    return hal.signals_cap.stop_disable ? Status_InvalidStatement : Status_OK;
 80212ac:	2003      	movs	r0, #3
 80212ae:	e7fa      	b.n	80212a6 <toggle_optional_stop+0x3a>
 80212b0:	200018dc 	.word	0x200018dc
 80212b4:	20001bbc 	.word	0x20001bbc
 80212b8:	20001ac4 	.word	0x20001ac4

080212bc <enter_sleep>:
    return go_home(state, (axes_signals_t){V_AXIS_BIT});
}
#endif

static status_code_t enter_sleep (sys_state_t state, char *args)
{
 80212bc:	b508      	push	{r3, lr}
    if(!settings.flags.sleep_enable)
 80212be:	4b0a      	ldr	r3, [pc, #40]	@ (80212e8 <enter_sleep+0x2c>)
 80212c0:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 80212c4:	f013 0f08 	tst.w	r3, #8
 80212c8:	d009      	beq.n	80212de <enter_sleep+0x22>
        return Status_InvalidStatement;
    else if(!(state == STATE_IDLE || state == STATE_ALARM))
 80212ca:	2801      	cmp	r0, #1
 80212cc:	d809      	bhi.n	80212e2 <enter_sleep+0x26>
        return Status_IdleError;
    else
        system_set_exec_state_flag(EXEC_SLEEP); // Set to execute enter_sleep mode immediately
 80212ce:	4b07      	ldr	r3, [pc, #28]	@ (80212ec <enter_sleep+0x30>)
 80212d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80212d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80212d6:	4806      	ldr	r0, [pc, #24]	@ (80212f0 <enter_sleep+0x34>)
 80212d8:	4798      	blx	r3

    return Status_OK;
 80212da:	2000      	movs	r0, #0
}
 80212dc:	bd08      	pop	{r3, pc}
        return Status_InvalidStatement;
 80212de:	2003      	movs	r0, #3
 80212e0:	e7fc      	b.n	80212dc <enter_sleep+0x20>
        return Status_IdleError;
 80212e2:	2008      	movs	r0, #8
 80212e4:	e7fa      	b.n	80212dc <enter_sleep+0x20>
 80212e6:	bf00      	nop
 80212e8:	200022f4 	.word	0x200022f4
 80212ec:	200018dc 	.word	0x200018dc
 80212f0:	20001c04 	.word	0x20001c04

080212f4 <help_rtc>:
    return NULL;
}

const char *help_rtc (const char *cmd)
{
    if(hal.rtc.get_datetime) {
 80212f4:	4b08      	ldr	r3, [pc, #32]	@ (8021318 <help_rtc+0x24>)
 80212f6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80212fa:	b15b      	cbz	r3, 8021314 <help_rtc+0x20>
{
 80212fc:	b510      	push	{r4, lr}
        hal.stream.write("$RTC - output current time." ASCII_EOL);
 80212fe:	4c06      	ldr	r4, [pc, #24]	@ (8021318 <help_rtc+0x24>)
 8021300:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8021304:	4805      	ldr	r0, [pc, #20]	@ (802131c <help_rtc+0x28>)
 8021306:	4798      	blx	r3
        hal.stream.write("$RTC=<ISO8601 datetime> - set current time." ASCII_EOL);
 8021308:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 802130c:	4804      	ldr	r0, [pc, #16]	@ (8021320 <help_rtc+0x2c>)
 802130e:	4798      	blx	r3
    }

    return NULL;
}
 8021310:	2000      	movs	r0, #0
 8021312:	bd10      	pop	{r4, pc}
 8021314:	2000      	movs	r0, #0
 8021316:	4770      	bx	lr
 8021318:	200018dc 	.word	0x200018dc
 802131c:	08030d18 	.word	0x08030d18
 8021320:	08030d38 	.word	0x08030d38

08021324 <help_pins>:
    return NULL;
}

const char *help_pins (const char *cmd)
{
    return hal.enumerate_pins ? "enumerate pin bindings" : NULL;
 8021324:	4b03      	ldr	r3, [pc, #12]	@ (8021334 <help_pins+0x10>)
 8021326:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 802132a:	b10b      	cbz	r3, 8021330 <help_pins+0xc>
 802132c:	4802      	ldr	r0, [pc, #8]	@ (8021338 <help_pins+0x14>)
 802132e:	4770      	bx	lr
 8021330:	2000      	movs	r0, #0
}
 8021332:	4770      	bx	lr
 8021334:	200018dc 	.word	0x200018dc
 8021338:	08030d68 	.word	0x08030d68

0802133c <help_pin_state>:

#ifndef NO_SETTINGS_DESCRIPTIONS

const char *help_pin_state (const char *cmd)
{
    return hal.port.get_pin_info ? "output auxillary pin states" : NULL;
 802133c:	4b03      	ldr	r3, [pc, #12]	@ (802134c <help_pin_state+0x10>)
 802133e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8021342:	b10b      	cbz	r3, 8021348 <help_pin_state+0xc>
 8021344:	4802      	ldr	r0, [pc, #8]	@ (8021350 <help_pin_state+0x14>)
 8021346:	4770      	bx	lr
 8021348:	2000      	movs	r0, #0
}
 802134a:	4770      	bx	lr
 802134c:	200018dc 	.word	0x200018dc
 8021350:	08030d80 	.word	0x08030d80

08021354 <help_switches>:

const char *help_switches (const char *cmd)
{
    const char *help = NULL;

    switch(*cmd) {
 8021354:	7803      	ldrb	r3, [r0, #0]
 8021356:	2b4f      	cmp	r3, #79	@ 0x4f
 8021358:	d00f      	beq.n	802137a <help_switches+0x26>
 802135a:	2b53      	cmp	r3, #83	@ 0x53
 802135c:	d017      	beq.n	802138e <help_switches+0x3a>
 802135e:	2b42      	cmp	r3, #66	@ 0x42
 8021360:	d001      	beq.n	8021366 <help_switches+0x12>
 8021362:	2000      	movs	r0, #0
 8021364:	4770      	bx	lr

        case 'B':
            if(!hal.signals_cap.block_delete)
 8021366:	4b0f      	ldr	r3, [pc, #60]	@ (80213a4 <help_switches+0x50>)
 8021368:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 802136c:	f013 0f10 	tst.w	r3, #16
 8021370:	d101      	bne.n	8021376 <help_switches+0x22>
                help = "toggle block delete switch";
 8021372:	480d      	ldr	r0, [pc, #52]	@ (80213a8 <help_switches+0x54>)
 8021374:	4770      	bx	lr
    const char *help = NULL;
 8021376:	2000      	movs	r0, #0
 8021378:	4770      	bx	lr
            break;

        case 'O':
            if(!hal.signals_cap.stop_disable)
 802137a:	4b0a      	ldr	r3, [pc, #40]	@ (80213a4 <help_switches+0x50>)
 802137c:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8021380:	f013 0f20 	tst.w	r3, #32
 8021384:	d101      	bne.n	802138a <help_switches+0x36>
                help = "toggle optional stop switch (M1)";
 8021386:	4809      	ldr	r0, [pc, #36]	@ (80213ac <help_switches+0x58>)
 8021388:	4770      	bx	lr
    const char *help = NULL;
 802138a:	2000      	movs	r0, #0
 802138c:	4770      	bx	lr
            break;

        case 'S':
            if(!hal.signals_cap.single_block)
 802138e:	4b05      	ldr	r3, [pc, #20]	@ (80213a4 <help_switches+0x50>)
 8021390:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
 8021394:	f013 0f08 	tst.w	r3, #8
 8021398:	d101      	bne.n	802139e <help_switches+0x4a>
                help = "toggle single stepping switch";
 802139a:	4805      	ldr	r0, [pc, #20]	@ (80213b0 <help_switches+0x5c>)
            break;
    }

    return help;
}
 802139c:	4770      	bx	lr
    const char *help = NULL;
 802139e:	2000      	movs	r0, #0
 80213a0:	4770      	bx	lr
 80213a2:	bf00      	nop
 80213a4:	200018dc 	.word	0x200018dc
 80213a8:	08030d9c 	.word	0x08030d9c
 80213ac:	08030db8 	.word	0x08030db8
 80213b0:	08030ddc 	.word	0x08030ddc

080213b4 <help_homing>:

const char *help_homing (const char *cmd)
{
 80213b4:	b508      	push	{r3, lr}
    if(settings.homing.flags.enabled)
 80213b6:	4b0c      	ldr	r3, [pc, #48]	@ (80213e8 <help_homing+0x34>)
 80213b8:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 80213bc:	f013 0f01 	tst.w	r3, #1
 80213c0:	d004      	beq.n	80213cc <help_homing+0x18>
        hal.stream.write("$H - home configured axes." ASCII_EOL);
 80213c2:	4b0a      	ldr	r3, [pc, #40]	@ (80213ec <help_homing+0x38>)
 80213c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80213c8:	4809      	ldr	r0, [pc, #36]	@ (80213f0 <help_homing+0x3c>)
 80213ca:	4798      	blx	r3

    if(settings.homing.flags.single_axis_commands)
 80213cc:	4b06      	ldr	r3, [pc, #24]	@ (80213e8 <help_homing+0x34>)
 80213ce:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 80213d2:	f013 0f02 	tst.w	r3, #2
 80213d6:	d004      	beq.n	80213e2 <help_homing+0x2e>
        hal.stream.write("$H<axisletter> - home single axis." ASCII_EOL);
 80213d8:	4b04      	ldr	r3, [pc, #16]	@ (80213ec <help_homing+0x38>)
 80213da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80213de:	4805      	ldr	r0, [pc, #20]	@ (80213f4 <help_homing+0x40>)
 80213e0:	4798      	blx	r3

    return NULL;
}
 80213e2:	2000      	movs	r0, #0
 80213e4:	bd08      	pop	{r3, pc}
 80213e6:	bf00      	nop
 80213e8:	200022f4 	.word	0x200022f4
 80213ec:	200018dc 	.word	0x200018dc
 80213f0:	08030dfc 	.word	0x08030dfc
 80213f4:	08030e1c 	.word	0x08030e1c

080213f8 <jog>:
{
 80213f8:	b508      	push	{r3, lr}
    if(!(state == STATE_IDLE || (state & (STATE_JOG|STATE_TOOL_CHANGE))))
 80213fa:	b110      	cbz	r0, 8021402 <jog+0xa>
 80213fc:	f410 7f08 	tst.w	r0, #544	@ 0x220
 8021400:	d007      	beq.n	8021412 <jog+0x1a>
    if(args != NULL) {
 8021402:	b141      	cbz	r1, 8021416 <jog+0x1e>
        *(--args) = '=';
 8021404:	233d      	movs	r3, #61	@ 0x3d
 8021406:	f801 3c01 	strb.w	r3, [r1, #-1]
    return args == NULL ? Status_InvalidStatement : gc_execute_block(args); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 802140a:	1ec8      	subs	r0, r1, #3
 802140c:	f7ec fb14 	bl	800da38 <gc_execute_block>
}
 8021410:	bd08      	pop	{r3, pc}
         return Status_IdleError;
 8021412:	2008      	movs	r0, #8
 8021414:	e7fc      	b.n	8021410 <jog+0x18>
    return args == NULL ? Status_InvalidStatement : gc_execute_block(args); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 8021416:	2003      	movs	r0, #3
 8021418:	e7fa      	b.n	8021410 <jog+0x18>
	...

0802141c <help_rst>:
{
 802141c:	b510      	push	{r4, lr}
    hal.stream.write("$RST=* - restore/reset all settings." ASCII_EOL);
 802141e:	4c10      	ldr	r4, [pc, #64]	@ (8021460 <help_rst+0x44>)
 8021420:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8021424:	480f      	ldr	r0, [pc, #60]	@ (8021464 <help_rst+0x48>)
 8021426:	4798      	blx	r3
    hal.stream.write("$RST=$ - restore default settings." ASCII_EOL);
 8021428:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 802142c:	480e      	ldr	r0, [pc, #56]	@ (8021468 <help_rst+0x4c>)
 802142e:	4798      	blx	r3
    if(settings_get_details()->next)
 8021430:	f7fb fed4 	bl	801d1dc <settings_get_details>
 8021434:	6983      	ldr	r3, [r0, #24]
 8021436:	b11b      	cbz	r3, 8021440 <help_rst+0x24>
        hal.stream.write("$RST=& - restore driver and plugin default settings." ASCII_EOL);
 8021438:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 802143c:	480b      	ldr	r0, [pc, #44]	@ (802146c <help_rst+0x50>)
 802143e:	4798      	blx	r3
    if(grbl.tool_table.n_tools)
 8021440:	4b0b      	ldr	r3, [pc, #44]	@ (8021470 <help_rst+0x54>)
 8021442:	699b      	ldr	r3, [r3, #24]
 8021444:	b133      	cbz	r3, 8021454 <help_rst+0x38>
        hal.stream.write("$RST=# - reset offsets and tool data." ASCII_EOL);
 8021446:	4b06      	ldr	r3, [pc, #24]	@ (8021460 <help_rst+0x44>)
 8021448:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 802144c:	4809      	ldr	r0, [pc, #36]	@ (8021474 <help_rst+0x58>)
 802144e:	4798      	blx	r3
}
 8021450:	2000      	movs	r0, #0
 8021452:	bd10      	pop	{r4, pc}
        hal.stream.write("$RST=# - reset offsets." ASCII_EOL);
 8021454:	4b02      	ldr	r3, [pc, #8]	@ (8021460 <help_rst+0x44>)
 8021456:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 802145a:	4807      	ldr	r0, [pc, #28]	@ (8021478 <help_rst+0x5c>)
 802145c:	4798      	blx	r3
 802145e:	e7f7      	b.n	8021450 <help_rst+0x34>
 8021460:	200018dc 	.word	0x200018dc
 8021464:	08030e44 	.word	0x08030e44
 8021468:	08030e6c 	.word	0x08030e6c
 802146c:	08030e94 	.word	0x08030e94
 8021470:	20001ac4 	.word	0x20001ac4
 8021474:	08030ecc 	.word	0x08030ecc
 8021478:	08030ef4 	.word	0x08030ef4

0802147c <help_spindle>:
{
 802147c:	b538      	push	{r3, r4, r5, lr}
 802147e:	4604      	mov	r4, r0
    spindle_ptrs_t *spindle = gc_spindle_get();
 8021480:	f7ec f9be 	bl	800d800 <gc_spindle_get>
 8021484:	4605      	mov	r5, r0
    if(cmd[1] == 'R' && spindle->reset_data)
 8021486:	7863      	ldrb	r3, [r4, #1]
 8021488:	2b52      	cmp	r3, #82	@ 0x52
 802148a:	d004      	beq.n	8021496 <help_spindle+0x1a>
    if(cmd[1] == 'D' && spindle->get_data)
 802148c:	7863      	ldrb	r3, [r4, #1]
 802148e:	2b44      	cmp	r3, #68	@ 0x44
 8021490:	d00a      	beq.n	80214a8 <help_spindle+0x2c>
}
 8021492:	2000      	movs	r0, #0
 8021494:	bd38      	pop	{r3, r4, r5, pc}
    if(cmd[1] == 'R' && spindle->reset_data)
 8021496:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8021498:	2b00      	cmp	r3, #0
 802149a:	d0f7      	beq.n	802148c <help_spindle+0x10>
        hal.stream.write("$SR - reset spindle encoder data." ASCII_EOL);
 802149c:	4b07      	ldr	r3, [pc, #28]	@ (80214bc <help_spindle+0x40>)
 802149e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80214a2:	4807      	ldr	r0, [pc, #28]	@ (80214c0 <help_spindle+0x44>)
 80214a4:	4798      	blx	r3
 80214a6:	e7f1      	b.n	802148c <help_spindle+0x10>
    if(cmd[1] == 'D' && spindle->get_data)
 80214a8:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	d0f1      	beq.n	8021492 <help_spindle+0x16>
        hal.stream.write("$SD - output spindle encoder data." ASCII_EOL);
 80214ae:	4b03      	ldr	r3, [pc, #12]	@ (80214bc <help_spindle+0x40>)
 80214b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80214b4:	4803      	ldr	r0, [pc, #12]	@ (80214c4 <help_spindle+0x48>)
 80214b6:	4798      	blx	r3
 80214b8:	e7eb      	b.n	8021492 <help_spindle+0x16>
 80214ba:	bf00      	nop
 80214bc:	200018dc 	.word	0x200018dc
 80214c0:	08030f10 	.word	0x08030f10
 80214c4:	08030f34 	.word	0x08030f34

080214c8 <spindle_reset_data>:
{
 80214c8:	b510      	push	{r4, lr}
    spindle_ptrs_t *spindle = gc_spindle_get();
 80214ca:	f7ec f999 	bl	800d800 <gc_spindle_get>
 80214ce:	4604      	mov	r4, r0
    if(spindle->reset_data)
 80214d0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80214d2:	b103      	cbz	r3, 80214d6 <spindle_reset_data+0xe>
        spindle->reset_data();
 80214d4:	4798      	blx	r3
    return spindle->reset_data ? Status_OK : Status_InvalidStatement;
 80214d6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80214d8:	b10b      	cbz	r3, 80214de <spindle_reset_data+0x16>
 80214da:	2000      	movs	r0, #0
}
 80214dc:	bd10      	pop	{r4, pc}
    return spindle->reset_data ? Status_OK : Status_InvalidStatement;
 80214de:	2003      	movs	r0, #3
 80214e0:	e7fc      	b.n	80214dc <spindle_reset_data+0x14>
	...

080214e4 <rtc_action>:
{
 80214e4:	b508      	push	{r3, lr}
    if(args) {
 80214e6:	b149      	cbz	r1, 80214fc <rtc_action+0x18>
 80214e8:	4608      	mov	r0, r1
        struct tm *time = get_datetime(args);
 80214ea:	f7f4 fd33 	bl	8015f54 <get_datetime>
        if(time)
 80214ee:	b140      	cbz	r0, 8021502 <rtc_action+0x1e>
            hal.rtc.set_datetime(time);
 80214f0:	4a05      	ldr	r2, [pc, #20]	@ (8021508 <rtc_action+0x24>)
 80214f2:	f8d2 2110 	ldr.w	r2, [r2, #272]	@ 0x110
 80214f6:	4790      	blx	r2
    status_code_t retval = Status_OK;
 80214f8:	2000      	movs	r0, #0
}
 80214fa:	bd08      	pop	{r3, pc}
        retval = report_time();
 80214fc:	f7fa fdec 	bl	801c0d8 <report_time>
 8021500:	e7fb      	b.n	80214fa <rtc_action+0x16>
            retval = Status_BadNumberFormat;
 8021502:	2002      	movs	r0, #2
 8021504:	e7f9      	b.n	80214fa <rtc_action+0x16>
 8021506:	bf00      	nop
 8021508:	200018dc 	.word	0x200018dc

0802150c <pin_state>:
{
 802150c:	b508      	push	{r3, lr}
    return report_pin_states(state, args);
 802150e:	f7fa fbed 	bl	801bcec <report_pin_states>
}
 8021512:	bd08      	pop	{r3, pc}

08021514 <enumerate_pins>:
{
 8021514:	b508      	push	{r3, lr}
    return report_pins(state, args);
 8021516:	f7fa fb9b 	bl	801bc50 <report_pins>
}
 802151a:	bd08      	pop	{r3, pc}

0802151c <enumerate_alarms_grblformatted>:
{
 802151c:	b508      	push	{r3, lr}
    return report_alarm_details(true);
 802151e:	2001      	movs	r0, #1
 8021520:	f7fa f92e 	bl	801b780 <report_alarm_details>
}
 8021524:	bd08      	pop	{r3, pc}

08021526 <enumerate_alarms>:
{
 8021526:	b508      	push	{r3, lr}
    return report_alarm_details(false);
 8021528:	2000      	movs	r0, #0
 802152a:	f7fa f929 	bl	801b780 <report_alarm_details>
}
 802152e:	bd08      	pop	{r3, pc}

08021530 <enumerate_errors_grblformatted>:
{
 8021530:	b508      	push	{r3, lr}
    return report_error_details(true);
 8021532:	2001      	movs	r0, #1
 8021534:	f7fa f97a 	bl	801b82c <report_error_details>
}
 8021538:	bd08      	pop	{r3, pc}

0802153a <enumerate_errors>:
{
 802153a:	b508      	push	{r3, lr}
    return report_error_details(false);
 802153c:	2000      	movs	r0, #0
 802153e:	f7fa f975 	bl	801b82c <report_error_details>
}
 8021542:	bd08      	pop	{r3, pc}

08021544 <enumerate_groups>:
{
 8021544:	b508      	push	{r3, lr}
    return report_setting_group_details(true, NULL);
 8021546:	2100      	movs	r1, #0
 8021548:	2001      	movs	r0, #1
 802154a:	f7fa f9c5 	bl	801b8d8 <report_setting_group_details>
}
 802154e:	bd08      	pop	{r3, pc}

08021550 <enumerate_all>:
{
 8021550:	b508      	push	{r3, lr}
    report_alarm_details(false);
 8021552:	2000      	movs	r0, #0
 8021554:	f7fa f914 	bl	801b780 <report_alarm_details>
    report_error_details(false);
 8021558:	2000      	movs	r0, #0
 802155a:	f7fa f967 	bl	801b82c <report_error_details>
    report_setting_group_details(true, NULL);
 802155e:	2100      	movs	r1, #0
 8021560:	2001      	movs	r0, #1
 8021562:	f7fa f9b9 	bl	801b8d8 <report_setting_group_details>
    return report_settings_details(SettingsFormat_MachineReadable, Setting_SettingsAll, Group_All);
 8021566:	2200      	movs	r2, #0
 8021568:	f240 21e5 	movw	r1, #741	@ 0x2e5
 802156c:	4610      	mov	r0, r2
 802156e:	f7fa f849 	bl	801b604 <report_settings_details>
}
 8021572:	bd08      	pop	{r3, pc}

08021574 <enumerate_settings_halformatted>:
{
 8021574:	b508      	push	{r3, lr}
    return report_settings_details(SettingsFormat_grblHAL, Setting_SettingsAll, Group_All);
 8021576:	2200      	movs	r2, #0
 8021578:	f240 21e5 	movw	r1, #741	@ 0x2e5
 802157c:	2003      	movs	r0, #3
 802157e:	f7fa f841 	bl	801b604 <report_settings_details>
}
 8021582:	bd08      	pop	{r3, pc}

08021584 <enumerate_settings_grblformatted>:
{
 8021584:	b508      	push	{r3, lr}
    return report_settings_details(SettingsFormat_Grbl, Setting_SettingsAll, Group_All);
 8021586:	2200      	movs	r2, #0
 8021588:	f240 21e5 	movw	r1, #741	@ 0x2e5
 802158c:	2002      	movs	r0, #2
 802158e:	f7fa f839 	bl	801b604 <report_settings_details>
}
 8021592:	bd08      	pop	{r3, pc}

08021594 <enumerate_settings>:
{
 8021594:	b508      	push	{r3, lr}
    return report_settings_details(SettingsFormat_MachineReadable, Setting_SettingsAll, Group_All);
 8021596:	2200      	movs	r2, #0
 8021598:	f240 21e5 	movw	r1, #741	@ 0x2e5
 802159c:	4610      	mov	r0, r2
 802159e:	f7fa f831 	bl	801b604 <report_settings_details>
}
 80215a2:	bd08      	pop	{r3, pc}

080215a4 <set_startup_line>:
{
 80215a4:	b570      	push	{r4, r5, r6, lr}
 80215a6:	460b      	mov	r3, r1
 80215a8:	4615      	mov	r5, r2
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))))
 80215aa:	b118      	cbz	r0, 80215b4 <set_startup_line+0x10>
 80215ac:	f240 1103 	movw	r1, #259	@ 0x103
 80215b0:	4208      	tst	r0, r1
 80215b2:	d017      	beq.n	80215e4 <set_startup_line+0x40>
    if(args == NULL)
 80215b4:	b1c3      	cbz	r3, 80215e8 <set_startup_line+0x44>
    args = gc_normalize_block(args, NULL);
 80215b6:	2100      	movs	r1, #0
 80215b8:	4618      	mov	r0, r3
 80215ba:	f7ec f99b 	bl	800d8f4 <gc_normalize_block>
 80215be:	4604      	mov	r4, r0
    if(strlen(args) >= (sizeof(stored_line_t) - 1))
 80215c0:	f7e6 fd9e 	bl	8008100 <strlen>
 80215c4:	2844      	cmp	r0, #68	@ 0x44
 80215c6:	d902      	bls.n	80215ce <set_startup_line+0x2a>
        retval = Status_Overflow;
 80215c8:	260b      	movs	r6, #11
}
 80215ca:	4630      	mov	r0, r6
 80215cc:	bd70      	pop	{r4, r5, r6, pc}
    else if ((retval = gc_execute_block(args)) == Status_OK) // Execute gcode block to ensure block is valid.
 80215ce:	4620      	mov	r0, r4
 80215d0:	f7ec fa32 	bl	800da38 <gc_execute_block>
 80215d4:	4606      	mov	r6, r0
 80215d6:	2800      	cmp	r0, #0
 80215d8:	d1f7      	bne.n	80215ca <set_startup_line+0x26>
        settings_write_startup_line(lnr, args);
 80215da:	4621      	mov	r1, r4
 80215dc:	b2e8      	uxtb	r0, r5
 80215de:	f7fc f8bf 	bl	801d760 <settings_write_startup_line>
 80215e2:	e7f2      	b.n	80215ca <set_startup_line+0x26>
        return Status_IdleError;
 80215e4:	2608      	movs	r6, #8
 80215e6:	e7f0      	b.n	80215ca <set_startup_line+0x26>
        return Status_InvalidStatement;
 80215e8:	2603      	movs	r6, #3
 80215ea:	e7ee      	b.n	80215ca <set_startup_line+0x26>

080215ec <set_startup_line1>:
{
 80215ec:	b508      	push	{r3, lr}
    return set_startup_line(state, args, 1);
 80215ee:	2201      	movs	r2, #1
 80215f0:	f7ff ffd8 	bl	80215a4 <set_startup_line>
}
 80215f4:	bd08      	pop	{r3, pc}

080215f6 <set_startup_line0>:
{
 80215f6:	b508      	push	{r3, lr}
    return set_startup_line(state, args, 0);
 80215f8:	2200      	movs	r2, #0
 80215fa:	f7ff ffd3 	bl	80215a4 <set_startup_line>
}
 80215fe:	bd08      	pop	{r3, pc}

08021600 <output_startup_lines>:
{
 8021600:	b530      	push	{r4, r5, lr}
 8021602:	b093      	sub	sp, #76	@ 0x4c
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))))
 8021604:	4604      	mov	r4, r0
 8021606:	b150      	cbz	r0, 802161e <output_startup_lines+0x1e>
 8021608:	f240 1303 	movw	r3, #259	@ 0x103
 802160c:	4218      	tst	r0, r3
 802160e:	d017      	beq.n	8021640 <output_startup_lines+0x40>
 8021610:	2400      	movs	r4, #0
 8021612:	e004      	b.n	802161e <output_startup_lines+0x1e>
            report_startup_line(counter, line);
 8021614:	4669      	mov	r1, sp
 8021616:	4628      	mov	r0, r5
 8021618:	f7f8 fe7c 	bl	801a314 <report_startup_line>
    for (counter = 0; counter < N_STARTUP_LINE; counter++) {
 802161c:	3401      	adds	r4, #1
 802161e:	2c01      	cmp	r4, #1
 8021620:	d80b      	bhi.n	802163a <output_startup_lines+0x3a>
        if (!(settings_read_startup_line(counter, line)))
 8021622:	b2e5      	uxtb	r5, r4
 8021624:	4669      	mov	r1, sp
 8021626:	4628      	mov	r0, r5
 8021628:	f7fc f8be 	bl	801d7a8 <settings_read_startup_line>
 802162c:	2800      	cmp	r0, #0
 802162e:	d1f1      	bne.n	8021614 <output_startup_lines+0x14>
            grbl.report.status_message(Status_SettingReadFail);
 8021630:	4b04      	ldr	r3, [pc, #16]	@ (8021644 <output_startup_lines+0x44>)
 8021632:	689b      	ldr	r3, [r3, #8]
 8021634:	2007      	movs	r0, #7
 8021636:	4798      	blx	r3
 8021638:	e7f0      	b.n	802161c <output_startup_lines+0x1c>
    return Status_OK;
 802163a:	2000      	movs	r0, #0
}
 802163c:	b013      	add	sp, #76	@ 0x4c
 802163e:	bd30      	pop	{r4, r5, pc}
        return Status_IdleError;
 8021640:	2008      	movs	r0, #8
 8021642:	e7fb      	b.n	802163c <output_startup_lines+0x3c>
 8021644:	20001ac4 	.word	0x20001ac4

08021648 <settings_reset>:
{
 8021648:	b508      	push	{r3, lr}
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP))))
 802164a:	b118      	cbz	r0, 8021654 <settings_reset+0xc>
 802164c:	f240 1201 	movw	r2, #257	@ 0x101
 8021650:	4210      	tst	r0, r2
 8021652:	d022      	beq.n	802169a <settings_reset+0x52>
    else switch (*args) {
 8021654:	780b      	ldrb	r3, [r1, #0]
 8021656:	3b23      	subs	r3, #35	@ 0x23
 8021658:	2b07      	cmp	r3, #7
 802165a:	d820      	bhi.n	802169e <settings_reset+0x56>
 802165c:	e8df f003 	tbb	[pc, r3]
 8021660:	0f1f0409 	.word	0x0f1f0409
 8021664:	0c1f1f1f 	.word	0x0c1f1f1f
            restore.defaults = On;
 8021668:	f04f 0301 	mov.w	r3, #1
    if(retval == Status_OK && restore.mask) {
 802166c:	b2d8      	uxtb	r0, r3
 802166e:	b948      	cbnz	r0, 8021684 <settings_reset+0x3c>
}
 8021670:	bd08      	pop	{r3, pc}
            restore.parameters = On;
 8021672:	f04f 0302 	mov.w	r3, #2
    if(retval == Status_OK && restore.mask) {
 8021676:	e7f9      	b.n	802166c <settings_reset+0x24>
            restore.mask = settings_all.mask;
 8021678:	4b0a      	ldr	r3, [pc, #40]	@ (80216a4 <settings_reset+0x5c>)
 802167a:	781b      	ldrb	r3, [r3, #0]
    if(retval == Status_OK && restore.mask) {
 802167c:	e7f6      	b.n	802166c <settings_reset+0x24>
            restore.driver_parameters = On;
 802167e:	f04f 0310 	mov.w	r3, #16
    if(retval == Status_OK && restore.mask) {
 8021682:	e7f3      	b.n	802166c <settings_reset+0x24>
        settings_restore(restore);
 8021684:	4618      	mov	r0, r3
 8021686:	f7fc f975 	bl	801d974 <settings_restore>
        grbl.report.feedback_message(Message_RestoreDefaults);
 802168a:	4b07      	ldr	r3, [pc, #28]	@ (80216a8 <settings_reset+0x60>)
 802168c:	68db      	ldr	r3, [r3, #12]
 802168e:	2009      	movs	r0, #9
 8021690:	4798      	blx	r3
        mc_reset(); // Force reset to ensure settings are initialized correctly.
 8021692:	f7f3 fc05 	bl	8014ea0 <mc_reset>
 8021696:	2000      	movs	r0, #0
 8021698:	e7ea      	b.n	8021670 <settings_reset+0x28>
        retval = Status_IdleError;
 802169a:	2008      	movs	r0, #8
 802169c:	e7e8      	b.n	8021670 <settings_reset+0x28>
    else switch (*args) {
 802169e:	2003      	movs	r0, #3
 80216a0:	e7e6      	b.n	8021670 <settings_reset+0x28>
 80216a2:	bf00      	nop
 80216a4:	08030c08 	.word	0x08030c08
 80216a8:	20001ac4 	.word	0x20001ac4

080216ac <output_all_build_info>:
{
 80216ac:	b500      	push	{lr}
 80216ae:	b093      	sub	sp, #76	@ 0x4c
    settings_read_build_info(info);
 80216b0:	4668      	mov	r0, sp
 80216b2:	f7fc f839 	bl	801d728 <settings_read_build_info>
    report_build_info(info, true);
 80216b6:	2101      	movs	r1, #1
 80216b8:	4668      	mov	r0, sp
 80216ba:	f7f8 fe69 	bl	801a390 <report_build_info>
}
 80216be:	2000      	movs	r0, #0
 80216c0:	b013      	add	sp, #76	@ 0x4c
 80216c2:	f85d fb04 	ldr.w	pc, [sp], #4

080216c6 <build_info>:
{
 80216c6:	b510      	push	{r4, lr}
 80216c8:	b092      	sub	sp, #72	@ 0x48
 80216ca:	460c      	mov	r4, r1
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP|STATE_SLEEP|STATE_CHECK_MODE))))
 80216cc:	b118      	cbz	r0, 80216d6 <build_info+0x10>
 80216ce:	f240 1283 	movw	r2, #387	@ 0x183
 80216d2:	4210      	tst	r0, r2
 80216d4:	d014      	beq.n	8021700 <build_info+0x3a>
    if (args == NULL) {
 80216d6:	b154      	cbz	r4, 80216ee <build_info+0x28>
    else if (strlen(args) < (sizeof(stored_line_t) - 1))
 80216d8:	4620      	mov	r0, r4
 80216da:	f7e6 fd11 	bl	8008100 <strlen>
 80216de:	2844      	cmp	r0, #68	@ 0x44
 80216e0:	d810      	bhi.n	8021704 <build_info+0x3e>
        settings_write_build_info(args);
 80216e2:	4620      	mov	r0, r4
 80216e4:	f7fc f80e 	bl	801d704 <settings_write_build_info>
    return Status_OK;
 80216e8:	2000      	movs	r0, #0
}
 80216ea:	b012      	add	sp, #72	@ 0x48
 80216ec:	bd10      	pop	{r4, pc}
        settings_read_build_info(info);
 80216ee:	4668      	mov	r0, sp
 80216f0:	f7fc f81a 	bl	801d728 <settings_read_build_info>
        report_build_info(info, false);
 80216f4:	2100      	movs	r1, #0
 80216f6:	4668      	mov	r0, sp
 80216f8:	f7f8 fe4a 	bl	801a390 <report_build_info>
    return Status_OK;
 80216fc:	2000      	movs	r0, #0
 80216fe:	e7f4      	b.n	80216ea <build_info+0x24>
        return Status_IdleError;
 8021700:	2008      	movs	r0, #8
 8021702:	e7f2      	b.n	80216ea <build_info+0x24>
        return Status_InvalidStatement;
 8021704:	2003      	movs	r0, #3
 8021706:	e7f0      	b.n	80216ea <build_info+0x24>

08021708 <tool_probe_workpiece>:
{
 8021708:	b508      	push	{r3, lr}
    return tc_probe_workpiece();
 802170a:	f001 fa37 	bl	8022b7c <tc_probe_workpiece>
}
 802170e:	bd08      	pop	{r3, pc}

08021710 <enumerate_spindles_mr>:
{
 8021710:	b508      	push	{r3, lr}
    return report_spindles(true);
 8021712:	2001      	movs	r0, #1
 8021714:	f7fa fd26 	bl	801c164 <report_spindles>
}
 8021718:	bd08      	pop	{r3, pc}

0802171a <enumerate_spindles>:
{
 802171a:	b508      	push	{r3, lr}
    return report_spindles(false);
 802171c:	2000      	movs	r0, #0
 802171e:	f7fa fd21 	bl	801c164 <report_spindles>
}
 8021722:	bd08      	pop	{r3, pc}

08021724 <output_help>:
{
 8021724:	b508      	push	{r3, lr}
    return report_help(args);
 8021726:	4608      	mov	r0, r1
 8021728:	f7fa f938 	bl	801b99c <report_help>
}
 802172c:	bd08      	pop	{r3, pc}
	...

08021730 <check_mode>:
{
 8021730:	b508      	push	{r3, lr}
    if (state == STATE_CHECK_MODE) {
 8021732:	2802      	cmp	r0, #2
 8021734:	d009      	beq.n	802174a <check_mode+0x1a>
    } else if (state == STATE_IDLE) { // Requires idle mode.
 8021736:	b980      	cbnz	r0, 802175a <check_mode+0x2a>
        state_set(STATE_CHECK_MODE);
 8021738:	2002      	movs	r0, #2
 802173a:	f7fd fceb 	bl	801f114 <state_set>
        grbl.report.feedback_message(Message_Enabled);
 802173e:	4b08      	ldr	r3, [pc, #32]	@ (8021760 <check_mode+0x30>)
 8021740:	68db      	ldr	r3, [r3, #12]
 8021742:	2004      	movs	r0, #4
 8021744:	4798      	blx	r3
    return Status_OK;
 8021746:	2000      	movs	r0, #0
}
 8021748:	bd08      	pop	{r3, pc}
        mc_reset();
 802174a:	f7f3 fba9 	bl	8014ea0 <mc_reset>
        grbl.report.feedback_message(Message_Disabled);
 802174e:	4b04      	ldr	r3, [pc, #16]	@ (8021760 <check_mode+0x30>)
 8021750:	68db      	ldr	r3, [r3, #12]
 8021752:	2005      	movs	r0, #5
 8021754:	4798      	blx	r3
    return Status_OK;
 8021756:	2000      	movs	r0, #0
 8021758:	e7f6      	b.n	8021748 <check_mode+0x18>
        return Status_IdleError;
 802175a:	2008      	movs	r0, #8
 802175c:	e7f4      	b.n	8021748 <check_mode+0x18>
 802175e:	bf00      	nop
 8021760:	20001ac4 	.word	0x20001ac4

08021764 <disable_lock>:
{
 8021764:	b510      	push	{r4, lr}
 8021766:	b082      	sub	sp, #8
    if(state & (STATE_ALARM|STATE_ESTOP)) {
 8021768:	f240 1301 	movw	r3, #257	@ 0x101
 802176c:	4218      	tst	r0, r3
 802176e:	d037      	beq.n	80217e0 <disable_lock+0x7c>
        control_signals_t control_signals = hal.control.get_state();
 8021770:	4b1d      	ldr	r3, [pc, #116]	@ (80217e8 <disable_lock+0x84>)
 8021772:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8021774:	4798      	blx	r3
        if(sys.alarm == Alarm_SelftestFailed)
 8021776:	4b1d      	ldr	r3, [pc, #116]	@ (80217ec <disable_lock+0x88>)
 8021778:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802177c:	2b10      	cmp	r3, #16
 802177e:	d023      	beq.n	80217c8 <disable_lock+0x64>
        else if (control_signals.e_stop)
 8021780:	b2c4      	uxtb	r4, r0
 8021782:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8021786:	d121      	bne.n	80217cc <disable_lock+0x68>
        else if (control_signals.safety_door_ajar)
 8021788:	f014 0f08 	tst.w	r4, #8
 802178c:	d120      	bne.n	80217d0 <disable_lock+0x6c>
        else if(control_signals.reset)
 802178e:	f014 0401 	ands.w	r4, r4, #1
 8021792:	d11f      	bne.n	80217d4 <disable_lock+0x70>
        else if(settings.limits.flags.hard_enabled && settings.limits.flags.check_at_init && limit_signals_merge(hal.limits.get_state()).value)
 8021794:	4b16      	ldr	r3, [pc, #88]	@ (80217f0 <disable_lock+0x8c>)
 8021796:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 802179a:	f003 0305 	and.w	r3, r3, #5
 802179e:	2b05      	cmp	r3, #5
 80217a0:	d107      	bne.n	80217b2 <disable_lock+0x4e>
 80217a2:	4b11      	ldr	r3, [pc, #68]	@ (80217e8 <disable_lock+0x84>)
 80217a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80217a6:	4798      	blx	r3
 80217a8:	9001      	str	r0, [sp, #4]
 80217aa:	f7f1 fe49 	bl	8013440 <limit_signals_merge>
 80217ae:	b2c0      	uxtb	r0, r0
 80217b0:	b990      	cbnz	r0, 80217d8 <disable_lock+0x74>
        else if(limits_homing_required())
 80217b2:	f7f2 fa91 	bl	8013cd8 <limits_homing_required>
 80217b6:	b988      	cbnz	r0, 80217dc <disable_lock+0x78>
            grbl.report.feedback_message(Message_AlarmUnlock);
 80217b8:	4b0e      	ldr	r3, [pc, #56]	@ (80217f4 <disable_lock+0x90>)
 80217ba:	68db      	ldr	r3, [r3, #12]
 80217bc:	2003      	movs	r0, #3
 80217be:	4798      	blx	r3
            state_set(STATE_IDLE);
 80217c0:	2000      	movs	r0, #0
 80217c2:	f7fd fca7 	bl	801f114 <state_set>
 80217c6:	e00c      	b.n	80217e2 <disable_lock+0x7e>
            retval = Status_SelfTestFailed;
 80217c8:	2431      	movs	r4, #49	@ 0x31
 80217ca:	e00a      	b.n	80217e2 <disable_lock+0x7e>
            retval = Status_EStop;
 80217cc:	2432      	movs	r4, #50	@ 0x32
 80217ce:	e008      	b.n	80217e2 <disable_lock+0x7e>
            retval = Status_CheckDoor;
 80217d0:	240d      	movs	r4, #13
 80217d2:	e006      	b.n	80217e2 <disable_lock+0x7e>
            retval = Status_Reset;
 80217d4:	2412      	movs	r4, #18
 80217d6:	e004      	b.n	80217e2 <disable_lock+0x7e>
            retval = Status_LimitsEngaged;
 80217d8:	242d      	movs	r4, #45	@ 0x2d
 80217da:	e002      	b.n	80217e2 <disable_lock+0x7e>
            retval = Status_HomingRequired;
 80217dc:	242e      	movs	r4, #46	@ 0x2e
 80217de:	e000      	b.n	80217e2 <disable_lock+0x7e>
    status_code_t retval = Status_OK;
 80217e0:	2400      	movs	r4, #0
}
 80217e2:	4620      	mov	r0, r4
 80217e4:	b002      	add	sp, #8
 80217e6:	bd10      	pop	{r4, pc}
 80217e8:	200018dc 	.word	0x200018dc
 80217ec:	20001bbc 	.word	0x20001bbc
 80217f0:	200022f4 	.word	0x200022f4
 80217f4:	20001ac4 	.word	0x20001ac4

080217f8 <read_int>:
{
 80217f8:	b510      	push	{r4, lr}
 80217fa:	ed2d 8b02 	vpush	{d8}
 80217fe:	b082      	sub	sp, #8
 8021800:	460c      	mov	r4, r1
    uint_fast8_t counter = 0;
 8021802:	2300      	movs	r3, #0
 8021804:	9301      	str	r3, [sp, #4]
    if(!read_float(s, &counter, &parameter))
 8021806:	466a      	mov	r2, sp
 8021808:	a901      	add	r1, sp, #4
 802180a:	f7f4 fabb 	bl	8015d84 <read_float>
 802180e:	b1a8      	cbz	r0, 802183c <read_int+0x44>
    if(parameter - truncf(parameter) != 0.0f)
 8021810:	ed9d 8a00 	vldr	s16, [sp]
 8021814:	eeb0 0a48 	vmov.f32	s0, s16
 8021818:	f006 fa9e 	bl	8027d58 <truncf>
 802181c:	ee38 0a40 	vsub.f32	s0, s16, s0
 8021820:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8021824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021828:	d10a      	bne.n	8021840 <read_int+0x48>
    *value = (int32_t)parameter;
 802182a:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 802182e:	ed84 8a00 	vstr	s16, [r4]
    return Status_OK;
 8021832:	2000      	movs	r0, #0
}
 8021834:	b002      	add	sp, #8
 8021836:	ecbd 8b02 	vpop	{d8}
 802183a:	bd10      	pop	{r4, pc}
        return Status_BadNumberFormat;
 802183c:	2002      	movs	r0, #2
 802183e:	e7f9      	b.n	8021834 <read_int+0x3c>
        return Status_InvalidStatement;
 8021840:	2003      	movs	r0, #3
 8021842:	e7f7      	b.n	8021834 <read_int+0x3c>

08021844 <output_setting_description>:
    if(args) {
 8021844:	b189      	cbz	r1, 802186a <output_setting_description+0x26>
{
 8021846:	b500      	push	{lr}
 8021848:	b083      	sub	sp, #12
 802184a:	4608      	mov	r0, r1
        retval = read_int(args, &id);
 802184c:	a901      	add	r1, sp, #4
 802184e:	f7ff ffd3 	bl	80217f8 <read_int>
        if(retval == Status_OK && id >= 0)
 8021852:	b910      	cbnz	r0, 802185a <output_setting_description+0x16>
 8021854:	9901      	ldr	r1, [sp, #4]
 8021856:	2900      	cmp	r1, #0
 8021858:	da02      	bge.n	8021860 <output_setting_description+0x1c>
}
 802185a:	b003      	add	sp, #12
 802185c:	f85d fb04 	ldr.w	pc, [sp], #4
            retval = report_setting_description(SettingsFormat_MachineReadable, (setting_id_t)id);
 8021860:	b289      	uxth	r1, r1
 8021862:	2000      	movs	r0, #0
 8021864:	f7f9 ff34 	bl	801b6d0 <report_setting_description>
 8021868:	e7f7      	b.n	802185a <output_setting_description+0x16>
    status_code_t retval = Status_BadNumberFormat;
 802186a:	2002      	movs	r0, #2
}
 802186c:	4770      	bx	lr

0802186e <output_all_settings>:
{
 802186e:	b500      	push	{lr}
 8021870:	b083      	sub	sp, #12
    if(args) {
 8021872:	b171      	cbz	r1, 8021892 <output_all_settings+0x24>
 8021874:	460b      	mov	r3, r1
        retval = read_int(args, &id);
 8021876:	a901      	add	r1, sp, #4
 8021878:	4618      	mov	r0, r3
 802187a:	f7ff ffbd 	bl	80217f8 <read_int>
        if(retval == Status_OK && id >= 0)
 802187e:	b960      	cbnz	r0, 802189a <output_all_settings+0x2c>
 8021880:	9901      	ldr	r1, [sp, #4]
 8021882:	2900      	cmp	r1, #0
 8021884:	db09      	blt.n	802189a <output_all_settings+0x2c>
            retval = report_settings_details(SettingsFormat_HumanReadable, (setting_id_t)id, Group_All);
 8021886:	2200      	movs	r2, #0
 8021888:	b289      	uxth	r1, r1
 802188a:	2001      	movs	r0, #1
 802188c:	f7f9 feba 	bl	801b604 <report_settings_details>
 8021890:	e003      	b.n	802189a <output_all_settings+0x2c>
    } else if (state & (STATE_CYCLE|STATE_HOLD))
 8021892:	f010 0f18 	tst.w	r0, #24
 8021896:	d003      	beq.n	80218a0 <output_all_settings+0x32>
        retval = Status_IdleError; // Block during cycle. Takes too long to print.
 8021898:	2008      	movs	r0, #8
}
 802189a:	b003      	add	sp, #12
 802189c:	f85d fb04 	ldr.w	pc, [sp], #4
        report_grbl_settings(true, NULL);
 80218a0:	2100      	movs	r1, #0
 80218a2:	2001      	movs	r0, #1
 80218a4:	f7f8 f89c 	bl	80199e0 <report_grbl_settings>
    status_code_t retval = Status_OK;
 80218a8:	2000      	movs	r0, #0
 80218aa:	e7f6      	b.n	802189a <output_all_settings+0x2c>

080218ac <output_settings>:
{
 80218ac:	b500      	push	{lr}
 80218ae:	b083      	sub	sp, #12
    if(args) {
 80218b0:	b171      	cbz	r1, 80218d0 <output_settings+0x24>
 80218b2:	460b      	mov	r3, r1
        retval = read_int(args, &id);
 80218b4:	a901      	add	r1, sp, #4
 80218b6:	4618      	mov	r0, r3
 80218b8:	f7ff ff9e 	bl	80217f8 <read_int>
        if(retval == Status_OK && id >= 0)
 80218bc:	b960      	cbnz	r0, 80218d8 <output_settings+0x2c>
 80218be:	9901      	ldr	r1, [sp, #4]
 80218c0:	2900      	cmp	r1, #0
 80218c2:	db09      	blt.n	80218d8 <output_settings+0x2c>
            retval = report_settings_details(SettingsFormat_HumanReadable, (setting_id_t)id, Group_All);
 80218c4:	2200      	movs	r2, #0
 80218c6:	b289      	uxth	r1, r1
 80218c8:	2001      	movs	r0, #1
 80218ca:	f7f9 fe9b 	bl	801b604 <report_settings_details>
 80218ce:	e003      	b.n	80218d8 <output_settings+0x2c>
    } else if (state & (STATE_CYCLE|STATE_HOLD))
 80218d0:	f010 0f18 	tst.w	r0, #24
 80218d4:	d003      	beq.n	80218de <output_settings+0x32>
        retval = Status_IdleError; // Block during cycle. Takes too long to print.
 80218d6:	2008      	movs	r0, #8
}
 80218d8:	b003      	add	sp, #12
 80218da:	f85d fb04 	ldr.w	pc, [sp], #4
    report_grbl_settings(true, NULL);
 80218de:	2100      	movs	r1, #0
 80218e0:	2001      	movs	r0, #1
 80218e2:	f7f8 f87d 	bl	80199e0 <report_grbl_settings>
    status_code_t retval = Status_OK;
 80218e6:	2000      	movs	r0, #0
 80218e8:	e7f6      	b.n	80218d8 <output_settings+0x2c>

080218ea <output_ngc_parameters>:
{
 80218ea:	b510      	push	{r4, lr}
 80218ec:	b082      	sub	sp, #8
    if(args) {
 80218ee:	b189      	cbz	r1, 8021914 <output_ngc_parameters+0x2a>
 80218f0:	460c      	mov	r4, r1
        retval = read_int(args, &id);
 80218f2:	a901      	add	r1, sp, #4
 80218f4:	4620      	mov	r0, r4
 80218f6:	f7ff ff7f 	bl	80217f8 <read_int>
        if(retval == Status_OK && id >= 0)
 80218fa:	b910      	cbnz	r0, 8021902 <output_ngc_parameters+0x18>
 80218fc:	9801      	ldr	r0, [sp, #4]
 80218fe:	2800      	cmp	r0, #0
 8021900:	da04      	bge.n	802190c <output_ngc_parameters+0x22>
            retval = report_named_ngc_parameter(args);
 8021902:	4620      	mov	r0, r4
 8021904:	f7f8 f9ac 	bl	8019c60 <report_named_ngc_parameter>
}
 8021908:	b002      	add	sp, #8
 802190a:	bd10      	pop	{r4, pc}
            retval = report_ngc_parameter((ngc_param_id_t)id);
 802190c:	b280      	uxth	r0, r0
 802190e:	f7f8 f965 	bl	8019bdc <report_ngc_parameter>
 8021912:	e7f9      	b.n	8021908 <output_ngc_parameters+0x1e>
        report_ngc_parameters();
 8021914:	f7f8 f9e2 	bl	8019cdc <report_ngc_parameters>
    status_code_t retval = Status_OK;
 8021918:	2000      	movs	r0, #0
 802191a:	e7f5      	b.n	8021908 <output_ngc_parameters+0x1e>

0802191c <system_init_switches>:
{
 802191c:	b508      	push	{r3, lr}
    control_signals_t signals = hal.control.get_state();
 802191e:	4b0b      	ldr	r3, [pc, #44]	@ (802194c <system_init_switches+0x30>)
 8021920:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8021922:	4798      	blx	r3
    sys.flags.block_delete_enabled = signals.block_delete;
 8021924:	f3c0 1100 	ubfx	r1, r0, #4, #1
 8021928:	4b09      	ldr	r3, [pc, #36]	@ (8021950 <system_init_switches+0x34>)
 802192a:	7d9a      	ldrb	r2, [r3, #22]
 802192c:	f361 1204 	bfi	r2, r1, #4, #1
 8021930:	759a      	strb	r2, [r3, #22]
    sys.flags.single_block = signals.single_block;
 8021932:	f3c0 21c0 	ubfx	r1, r0, #11, #1
 8021936:	b2d2      	uxtb	r2, r2
 8021938:	f361 12c7 	bfi	r2, r1, #7, #1
 802193c:	759a      	strb	r2, [r3, #22]
    sys.flags.optional_stop_disable = signals.stop_disable;
 802193e:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8021942:	b2d2      	uxtb	r2, r2
 8021944:	f360 1286 	bfi	r2, r0, #6, #1
 8021948:	759a      	strb	r2, [r3, #22]
}
 802194a:	bd08      	pop	{r3, pc}
 802194c:	200018dc 	.word	0x200018dc
 8021950:	20001bbc 	.word	0x20001bbc

08021954 <control_interrupt_handler>:
{
 8021954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021956:	b083      	sub	sp, #12
 8021958:	4604      	mov	r4, r0
    if(signals.deasserted)
 802195a:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 802195e:	d153      	bne.n	8021a08 <control_interrupt_handler+0xb4>
    if(signals.value) {
 8021960:	b2a3      	uxth	r3, r4
 8021962:	2b00      	cmp	r3, #0
 8021964:	d04e      	beq.n	8021a04 <control_interrupt_handler+0xb0>
        sys.last_event.control.value = signals.value;
 8021966:	4a66      	ldr	r2, [pc, #408]	@ (8021b00 <control_interrupt_handler+0x1ac>)
 8021968:	f8a2 4080 	strh.w	r4, [r2, #128]	@ 0x80
        if((signals.reset || signals.e_stop || signals.motor_fault) && state_get() != STATE_ESTOP)
 802196c:	f240 1241 	movw	r2, #321	@ 0x141
 8021970:	4213      	tst	r3, r2
 8021972:	d151      	bne.n	8021a18 <control_interrupt_handler+0xc4>
            if(signals.safety_door_ajar && hal.signals_cap.safety_door_ajar) {
 8021974:	b2e6      	uxtb	r6, r4
 8021976:	f014 0f08 	tst.w	r4, #8
 802197a:	d010      	beq.n	802199e <control_interrupt_handler+0x4a>
 802197c:	4b61      	ldr	r3, [pc, #388]	@ (8021b04 <control_interrupt_handler+0x1b0>)
 802197e:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8021982:	f013 0f08 	tst.w	r3, #8
 8021986:	d00a      	beq.n	802199e <control_interrupt_handler+0x4a>
                if(settings.safety_door.flags.ignore_when_idle) {
 8021988:	4b5f      	ldr	r3, [pc, #380]	@ (8021b08 <control_interrupt_handler+0x1b4>)
 802198a:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 802198e:	f013 0f01 	tst.w	r3, #1
 8021992:	d149      	bne.n	8021a28 <control_interrupt_handler+0xd4>
                    system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 8021994:	4b5b      	ldr	r3, [pc, #364]	@ (8021b04 <control_interrupt_handler+0x1b0>)
 8021996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021998:	2140      	movs	r1, #64	@ 0x40
 802199a:	485c      	ldr	r0, [pc, #368]	@ (8021b0c <control_interrupt_handler+0x1b8>)
 802199c:	4798      	blx	r3
            if(signals.probe_overtravel) {
 802199e:	f3c4 2507 	ubfx	r5, r4, #8, #8
 80219a2:	462f      	mov	r7, r5
 80219a4:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 80219a8:	d052      	beq.n	8021a50 <control_interrupt_handler+0xfc>
                limit_signals_t overtravel = { .min.z = On};
 80219aa:	2300      	movs	r3, #0
 80219ac:	9301      	str	r3, [sp, #4]
 80219ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80219b2:	f043 0304 	orr.w	r3, r3, #4
 80219b6:	f88d 3004 	strb.w	r3, [sp, #4]
                hal.limits.interrupt_callback(overtravel);
 80219ba:	4b52      	ldr	r3, [pc, #328]	@ (8021b04 <control_interrupt_handler+0x1b0>)
 80219bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80219be:	9801      	ldr	r0, [sp, #4]
 80219c0:	4798      	blx	r3
            if(signals.block_delete)
 80219c2:	f016 0f10 	tst.w	r6, #16
 80219c6:	d007      	beq.n	80219d8 <control_interrupt_handler+0x84>
                sys.flags.block_delete_enabled = !signals.deasserted;
 80219c8:	43eb      	mvns	r3, r5
 80219ca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80219ce:	4a4c      	ldr	r2, [pc, #304]	@ (8021b00 <control_interrupt_handler+0x1ac>)
 80219d0:	7d91      	ldrb	r1, [r2, #22]
 80219d2:	f363 1104 	bfi	r1, r3, #4, #1
 80219d6:	7591      	strb	r1, [r2, #22]
            if(signals.single_block)
 80219d8:	f017 0f08 	tst.w	r7, #8
 80219dc:	d007      	beq.n	80219ee <control_interrupt_handler+0x9a>
                sys.flags.single_block = !signals.deasserted;
 80219de:	43eb      	mvns	r3, r5
 80219e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80219e4:	4a46      	ldr	r2, [pc, #280]	@ (8021b00 <control_interrupt_handler+0x1ac>)
 80219e6:	7d91      	ldrb	r1, [r2, #22]
 80219e8:	f363 11c7 	bfi	r1, r3, #7, #1
 80219ec:	7591      	strb	r1, [r2, #22]
            if(signals.stop_disable)
 80219ee:	f016 0f20 	tst.w	r6, #32
 80219f2:	d007      	beq.n	8021a04 <control_interrupt_handler+0xb0>
                sys.flags.optional_stop_disable = !signals.deasserted;
 80219f4:	43eb      	mvns	r3, r5
 80219f6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80219fa:	4a41      	ldr	r2, [pc, #260]	@ (8021b00 <control_interrupt_handler+0x1ac>)
 80219fc:	7d91      	ldrb	r1, [r2, #22]
 80219fe:	f363 1186 	bfi	r1, r3, #6, #1
 8021a02:	7591      	strb	r1, [r2, #22]
}
 8021a04:	b003      	add	sp, #12
 8021a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        signals.value &= onoff_signals.mask;
 8021a08:	b284      	uxth	r4, r0
 8021a0a:	f424 44ef 	bic.w	r4, r4, #30592	@ 0x7780
 8021a0e:	f424 44ef 	bic.w	r4, r4, #30592	@ 0x7780
 8021a12:	f024 044f 	bic.w	r4, r4, #79	@ 0x4f
 8021a16:	e7a3      	b.n	8021960 <control_interrupt_handler+0xc>
        if((signals.reset || signals.e_stop || signals.motor_fault) && state_get() != STATE_ESTOP)
 8021a18:	f7fd fb76 	bl	801f108 <state_get>
 8021a1c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8021a20:	d0a8      	beq.n	8021974 <control_interrupt_handler+0x20>
            mc_reset();
 8021a22:	f7f3 fa3d 	bl	8014ea0 <mc_reset>
 8021a26:	e7ed      	b.n	8021a04 <control_interrupt_handler+0xb0>
                    if(state_get() != STATE_IDLE && state_get() != STATE_JOG)
 8021a28:	f7fd fb6e 	bl	801f108 <state_get>
 8021a2c:	b930      	cbnz	r0, 8021a3c <control_interrupt_handler+0xe8>
                    if(settings.mode == Mode_Laser) // Turn off spindle immediately (laser) when in laser mode
 8021a2e:	4b36      	ldr	r3, [pc, #216]	@ (8021b08 <control_interrupt_handler+0x1b4>)
 8021a30:	7e1b      	ldrb	r3, [r3, #24]
 8021a32:	2b01      	cmp	r3, #1
 8021a34:	d1b3      	bne.n	802199e <control_interrupt_handler+0x4a>
                        spindle_all_off();
 8021a36:	f7fd f8e3 	bl	801ec00 <spindle_all_off>
 8021a3a:	e7b0      	b.n	802199e <control_interrupt_handler+0x4a>
                    if(state_get() != STATE_IDLE && state_get() != STATE_JOG)
 8021a3c:	f7fd fb64 	bl	801f108 <state_get>
 8021a40:	2820      	cmp	r0, #32
 8021a42:	d0f4      	beq.n	8021a2e <control_interrupt_handler+0xda>
                        system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 8021a44:	4b2f      	ldr	r3, [pc, #188]	@ (8021b04 <control_interrupt_handler+0x1b0>)
 8021a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021a48:	2140      	movs	r1, #64	@ 0x40
 8021a4a:	4830      	ldr	r0, [pc, #192]	@ (8021b0c <control_interrupt_handler+0x1b8>)
 8021a4c:	4798      	blx	r3
 8021a4e:	e7ee      	b.n	8021a2e <control_interrupt_handler+0xda>
            } else if(signals.probe_triggered) {
 8021a50:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8021a54:	d019      	beq.n	8021a8a <control_interrupt_handler+0x136>
                if(sys.probing_state == Probing_Off && (state_get() & (STATE_CYCLE|STATE_JOG))) {
 8021a56:	4b2a      	ldr	r3, [pc, #168]	@ (8021b00 <control_interrupt_handler+0x1ac>)
 8021a58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8021a5c:	b133      	cbz	r3, 8021a6c <control_interrupt_handler+0x118>
                    hal.probe.configure(false, false);
 8021a5e:	4b29      	ldr	r3, [pc, #164]	@ (8021b04 <control_interrupt_handler+0x1b0>)
 8021a60:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8021a64:	2100      	movs	r1, #0
 8021a66:	4608      	mov	r0, r1
 8021a68:	4798      	blx	r3
 8021a6a:	e7aa      	b.n	80219c2 <control_interrupt_handler+0x6e>
                if(sys.probing_state == Probing_Off && (state_get() & (STATE_CYCLE|STATE_JOG))) {
 8021a6c:	f7fd fb4c 	bl	801f108 <state_get>
 8021a70:	f010 0f28 	tst.w	r0, #40	@ 0x28
 8021a74:	d0f3      	beq.n	8021a5e <control_interrupt_handler+0x10a>
                    system_set_exec_state_flag(EXEC_STOP);
 8021a76:	4b23      	ldr	r3, [pc, #140]	@ (8021b04 <control_interrupt_handler+0x1b0>)
 8021a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021a7a:	4c24      	ldr	r4, [pc, #144]	@ (8021b0c <control_interrupt_handler+0x1b8>)
 8021a7c:	2110      	movs	r1, #16
 8021a7e:	4620      	mov	r0, r4
 8021a80:	4798      	blx	r3
                    sys.alarm_pending = Alarm_ProbeProtect;
 8021a82:	230d      	movs	r3, #13
 8021a84:	f804 3c34 	strb.w	r3, [r4, #-52]
 8021a88:	e79b      	b.n	80219c2 <control_interrupt_handler+0x6e>
            } else if(signals.probe_disconnected) {
 8021a8a:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8021a8e:	d108      	bne.n	8021aa2 <control_interrupt_handler+0x14e>
            } else if(signals.feed_hold)
 8021a90:	f016 0f02 	tst.w	r6, #2
 8021a94:	d019      	beq.n	8021aca <control_interrupt_handler+0x176>
                system_set_exec_state_flag(EXEC_FEED_HOLD);
 8021a96:	4b1b      	ldr	r3, [pc, #108]	@ (8021b04 <control_interrupt_handler+0x1b0>)
 8021a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021a9a:	2108      	movs	r1, #8
 8021a9c:	481b      	ldr	r0, [pc, #108]	@ (8021b0c <control_interrupt_handler+0x1b8>)
 8021a9e:	4798      	blx	r3
 8021aa0:	e78f      	b.n	80219c2 <control_interrupt_handler+0x6e>
                if(sys.probing_state == Probing_Active && state_get() == STATE_CYCLE) {
 8021aa2:	4b17      	ldr	r3, [pc, #92]	@ (8021b00 <control_interrupt_handler+0x1ac>)
 8021aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8021aa8:	b2db      	uxtb	r3, r3
 8021aaa:	2b01      	cmp	r3, #1
 8021aac:	d189      	bne.n	80219c2 <control_interrupt_handler+0x6e>
 8021aae:	f7fd fb2b 	bl	801f108 <state_get>
 8021ab2:	2808      	cmp	r0, #8
 8021ab4:	d185      	bne.n	80219c2 <control_interrupt_handler+0x6e>
                    system_set_exec_state_flag(EXEC_FEED_HOLD);
 8021ab6:	4b13      	ldr	r3, [pc, #76]	@ (8021b04 <control_interrupt_handler+0x1b0>)
 8021ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021aba:	4c14      	ldr	r4, [pc, #80]	@ (8021b0c <control_interrupt_handler+0x1b8>)
 8021abc:	2108      	movs	r1, #8
 8021abe:	4620      	mov	r0, r4
 8021ac0:	4798      	blx	r3
                    sys.alarm_pending = Alarm_ProbeProtect;
 8021ac2:	230d      	movs	r3, #13
 8021ac4:	f804 3c34 	strb.w	r3, [r4, #-52]
 8021ac8:	e77b      	b.n	80219c2 <control_interrupt_handler+0x6e>
            else if(signals.cycle_start) {
 8021aca:	f016 0f04 	tst.w	r6, #4
 8021ace:	f43f af78 	beq.w	80219c2 <control_interrupt_handler+0x6e>
                system_set_exec_state_flag(EXEC_CYCLE_START);
 8021ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8021b04 <control_interrupt_handler+0x1b0>)
 8021ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021ad6:	4c0d      	ldr	r4, [pc, #52]	@ (8021b0c <control_interrupt_handler+0x1b8>)
 8021ad8:	2102      	movs	r1, #2
 8021ada:	4620      	mov	r0, r4
 8021adc:	4798      	blx	r3
                sys.report.cycle_start = settings.status_report.pin_state;
 8021ade:	4b0a      	ldr	r3, [pc, #40]	@ (8021b08 <control_interrupt_handler+0x1b4>)
 8021ae0:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8021ae4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8021ae8:	f814 2c15 	ldrb.w	r2, [r4, #-21]
 8021aec:	f363 1286 	bfi	r2, r3, #6, #1
 8021af0:	f804 2c15 	strb.w	r2, [r4, #-21]
                gc_state.tool_change = false;
 8021af4:	4b06      	ldr	r3, [pc, #24]	@ (8021b10 <control_interrupt_handler+0x1bc>)
 8021af6:	2200      	movs	r2, #0
 8021af8:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8021afc:	e761      	b.n	80219c2 <control_interrupt_handler+0x6e>
 8021afe:	bf00      	nop
 8021b00:	20001bbc 	.word	0x20001bbc
 8021b04:	200018dc 	.word	0x200018dc
 8021b08:	200022f4 	.word	0x200022f4
 8021b0c:	20001c04 	.word	0x20001c04
 8021b10:	20001614 	.word	0x20001614

08021b14 <system_execute_startup>:
    if(hal.nvs.type != NVS_None) {
 8021b14:	4b11      	ldr	r3, [pc, #68]	@ (8021b5c <system_execute_startup+0x48>)
 8021b16:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 8021b1a:	b9cb      	cbnz	r3, 8021b50 <system_execute_startup+0x3c>
 8021b1c:	4770      	bx	lr
                report_execute_startup_message(line, Status_SettingReadFail);
 8021b1e:	2107      	movs	r1, #7
 8021b20:	4668      	mov	r0, sp
 8021b22:	f7f8 fc17 	bl	801a354 <report_execute_startup_message>
        for (n = 0; n < N_STARTUP_LINE; n++) {
 8021b26:	3401      	adds	r4, #1
 8021b28:	2c01      	cmp	r4, #1
 8021b2a:	d815      	bhi.n	8021b58 <system_execute_startup+0x44>
            if (!settings_read_startup_line(n, line))
 8021b2c:	4669      	mov	r1, sp
 8021b2e:	b2e0      	uxtb	r0, r4
 8021b30:	f7fb fe3a 	bl	801d7a8 <settings_read_startup_line>
 8021b34:	2800      	cmp	r0, #0
 8021b36:	d0f2      	beq.n	8021b1e <system_execute_startup+0xa>
            else if (*line != '\0')
 8021b38:	f89d 3000 	ldrb.w	r3, [sp]
 8021b3c:	2b00      	cmp	r3, #0
 8021b3e:	d0f2      	beq.n	8021b26 <system_execute_startup+0x12>
                report_execute_startup_message(line, gc_execute_block(line));
 8021b40:	4668      	mov	r0, sp
 8021b42:	f7eb ff79 	bl	800da38 <gc_execute_block>
 8021b46:	4601      	mov	r1, r0
 8021b48:	4668      	mov	r0, sp
 8021b4a:	f7f8 fc03 	bl	801a354 <report_execute_startup_message>
 8021b4e:	e7ea      	b.n	8021b26 <system_execute_startup+0x12>
{
 8021b50:	b510      	push	{r4, lr}
 8021b52:	b092      	sub	sp, #72	@ 0x48
        for (n = 0; n < N_STARTUP_LINE; n++) {
 8021b54:	2400      	movs	r4, #0
 8021b56:	e7e7      	b.n	8021b28 <system_execute_startup+0x14>
}
 8021b58:	b012      	add	sp, #72	@ 0x48
 8021b5a:	bd10      	pop	{r4, pc}
 8021b5c:	200018dc 	.word	0x200018dc

08021b60 <go_home>:
{
 8021b60:	b510      	push	{r4, lr}
 8021b62:	460c      	mov	r4, r1
    if(axes.mask && !settings.homing.flags.single_axis_commands)
 8021b64:	b2cb      	uxtb	r3, r1
 8021b66:	b12b      	cbz	r3, 8021b74 <go_home+0x14>
 8021b68:	4b39      	ldr	r3, [pc, #228]	@ (8021c50 <go_home+0xf0>)
 8021b6a:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8021b6e:	f013 0f02 	tst.w	r3, #2
 8021b72:	d069      	beq.n	8021c48 <go_home+0xe8>
    if(!(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP))))
 8021b74:	f7fd fac8 	bl	801f108 <state_get>
 8021b78:	bb40      	cbnz	r0, 8021bcc <go_home+0x6c>
    control_signals_t control_signals = hal.control.get_state();
 8021b7a:	4b36      	ldr	r3, [pc, #216]	@ (8021c54 <go_home+0xf4>)
 8021b7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8021b7e:	4798      	blx	r3
    if(sys.alarm == Alarm_SelftestFailed)
 8021b80:	4b35      	ldr	r3, [pc, #212]	@ (8021c58 <go_home+0xf8>)
 8021b82:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8021b86:	2b10      	cmp	r3, #16
 8021b88:	d02d      	beq.n	8021be6 <go_home+0x86>
    else if (control_signals.e_stop)
 8021b8a:	b2c3      	uxtb	r3, r0
 8021b8c:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8021b90:	d14d      	bne.n	8021c2e <go_home+0xce>
    else if(control_signals.motor_fault)
 8021b92:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8021b96:	d14f      	bne.n	8021c38 <go_home+0xd8>
    else if (!(settings.homing.flags.enabled && (sys.homing.mask || settings.homing.flags.single_axis_commands || settings.homing.flags.manual)))
 8021b98:	4a2d      	ldr	r2, [pc, #180]	@ (8021c50 <go_home+0xf0>)
 8021b9a:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 8021b9e:	f012 0f01 	tst.w	r2, #1
 8021ba2:	d04b      	beq.n	8021c3c <go_home+0xdc>
 8021ba4:	492c      	ldr	r1, [pc, #176]	@ (8021c58 <go_home+0xf8>)
 8021ba6:	7e89      	ldrb	r1, [r1, #26]
 8021ba8:	b911      	cbnz	r1, 8021bb0 <go_home+0x50>
 8021baa:	f012 0f12 	tst.w	r2, #18
 8021bae:	d047      	beq.n	8021c40 <go_home+0xe0>
    else if (control_signals.safety_door_ajar && !settings.safety_door.flags.ignore_when_idle)
 8021bb0:	f013 0f08 	tst.w	r3, #8
 8021bb4:	d005      	beq.n	8021bc2 <go_home+0x62>
 8021bb6:	4a26      	ldr	r2, [pc, #152]	@ (8021c50 <go_home+0xf0>)
 8021bb8:	f892 213c 	ldrb.w	r2, [r2, #316]	@ 0x13c
 8021bbc:	f012 0f01 	tst.w	r2, #1
 8021bc0:	d040      	beq.n	8021c44 <go_home+0xe4>
    else if(control_signals.reset)
 8021bc2:	f013 0f01 	tst.w	r3, #1
 8021bc6:	d009      	beq.n	8021bdc <go_home+0x7c>
        retval = Status_Reset;
 8021bc8:	2412      	movs	r4, #18
 8021bca:	e031      	b.n	8021c30 <go_home+0xd0>
    if(!(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP))))
 8021bcc:	f7fd fa9c 	bl	801f108 <state_get>
 8021bd0:	f240 1301 	movw	r3, #257	@ 0x101
 8021bd4:	4218      	tst	r0, r3
 8021bd6:	d1d0      	bne.n	8021b7a <go_home+0x1a>
        return Status_IdleError;
 8021bd8:	2408      	movs	r4, #8
 8021bda:	e02b      	b.n	8021c34 <go_home+0xd4>
        retval = mc_homing_cycle(axes); // Home axes according to configuration
 8021bdc:	4620      	mov	r0, r4
 8021bde:	f7f3 f9b7 	bl	8014f50 <mc_homing_cycle>
 8021be2:	4604      	mov	r4, r0
 8021be4:	e000      	b.n	8021be8 <go_home+0x88>
        retval = Status_SelfTestFailed;
 8021be6:	2431      	movs	r4, #49	@ 0x31
    if (retval == Status_OK && !sys.abort) {
 8021be8:	bb14      	cbnz	r4, 8021c30 <go_home+0xd0>
 8021bea:	4b1b      	ldr	r3, [pc, #108]	@ (8021c58 <go_home+0xf8>)
 8021bec:	781b      	ldrb	r3, [r3, #0]
 8021bee:	b9fb      	cbnz	r3, 8021c30 <go_home+0xd0>
        state_set(STATE_IDLE);  // Set to IDLE when complete.
 8021bf0:	2000      	movs	r0, #0
 8021bf2:	f7fd fa8f 	bl	801f114 <state_set>
        st_go_idle();           // Set steppers to the settings idle state before returning.
 8021bf6:	f7fd ffb1 	bl	801fb5c <st_go_idle>
        grbl.report.feedback_message(Message_None);
 8021bfa:	4b18      	ldr	r3, [pc, #96]	@ (8021c5c <go_home+0xfc>)
 8021bfc:	68db      	ldr	r3, [r3, #12]
 8021bfe:	2000      	movs	r0, #0
 8021c00:	4798      	blx	r3
        if (sys.homing.mask && (sys.homing.mask & sys.homed.mask) == sys.homing.mask)
 8021c02:	4b15      	ldr	r3, [pc, #84]	@ (8021c58 <go_home+0xf8>)
 8021c04:	7e9b      	ldrb	r3, [r3, #26]
 8021c06:	b123      	cbz	r3, 8021c12 <go_home+0xb2>
 8021c08:	4a13      	ldr	r2, [pc, #76]	@ (8021c58 <go_home+0xf8>)
 8021c0a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8021c0e:	4393      	bics	r3, r2
 8021c10:	d00a      	beq.n	8021c28 <go_home+0xc8>
        else if(limits_homing_required()) { // Keep alarm state active if homing is required and not all axes homed.
 8021c12:	f7f2 f861 	bl	8013cd8 <limits_homing_required>
 8021c16:	b158      	cbz	r0, 8021c30 <go_home+0xd0>
            sys.alarm = Alarm_HomingRequired;
 8021c18:	4b0f      	ldr	r3, [pc, #60]	@ (8021c58 <go_home+0xf8>)
 8021c1a:	220b      	movs	r2, #11
 8021c1c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            state_set(STATE_ALARM);
 8021c20:	2001      	movs	r0, #1
 8021c22:	f7fd fa77 	bl	801f114 <state_set>
 8021c26:	e003      	b.n	8021c30 <go_home+0xd0>
            system_execute_startup();
 8021c28:	f7ff ff74 	bl	8021b14 <system_execute_startup>
 8021c2c:	e000      	b.n	8021c30 <go_home+0xd0>
        retval = Status_EStop;
 8021c2e:	2432      	movs	r4, #50	@ 0x32
    return retval == Status_Unhandled ? Status_OK : retval;
 8021c30:	2c54      	cmp	r4, #84	@ 0x54
 8021c32:	d00b      	beq.n	8021c4c <go_home+0xec>
}
 8021c34:	4620      	mov	r0, r4
 8021c36:	bd10      	pop	{r4, pc}
        retval = Status_MotorFault;
 8021c38:	2433      	movs	r4, #51	@ 0x33
 8021c3a:	e7f9      	b.n	8021c30 <go_home+0xd0>
        retval = Status_HomingDisabled;
 8021c3c:	2405      	movs	r4, #5
 8021c3e:	e7f7      	b.n	8021c30 <go_home+0xd0>
 8021c40:	2405      	movs	r4, #5
 8021c42:	e7f5      	b.n	8021c30 <go_home+0xd0>
        retval = Status_CheckDoor;
 8021c44:	240d      	movs	r4, #13
 8021c46:	e7f3      	b.n	8021c30 <go_home+0xd0>
        return Status_HomingDisabled;
 8021c48:	2405      	movs	r4, #5
 8021c4a:	e7f3      	b.n	8021c34 <go_home+0xd4>
    return retval == Status_Unhandled ? Status_OK : retval;
 8021c4c:	2400      	movs	r4, #0
 8021c4e:	e7f1      	b.n	8021c34 <go_home+0xd4>
 8021c50:	200022f4 	.word	0x200022f4
 8021c54:	200018dc 	.word	0x200018dc
 8021c58:	20001bbc 	.word	0x20001bbc
 8021c5c:	20001ac4 	.word	0x20001ac4

08021c60 <home_z>:
{
 8021c60:	b508      	push	{r3, lr}
    return go_home(state, (axes_signals_t){Z_AXIS_BIT});
 8021c62:	f04f 0104 	mov.w	r1, #4
 8021c66:	f7ff ff7b 	bl	8021b60 <go_home>
}
 8021c6a:	bd08      	pop	{r3, pc}

08021c6c <home_y>:
{
 8021c6c:	b508      	push	{r3, lr}
    return go_home(state, (axes_signals_t){Y_AXIS_BIT});
 8021c6e:	f04f 0102 	mov.w	r1, #2
 8021c72:	f7ff ff75 	bl	8021b60 <go_home>
}
 8021c76:	bd08      	pop	{r3, pc}

08021c78 <home_x>:
{
 8021c78:	b508      	push	{r3, lr}
    return go_home(state, (axes_signals_t){X_AXIS_BIT});
 8021c7a:	f04f 0101 	mov.w	r1, #1
 8021c7e:	f7ff ff6f 	bl	8021b60 <go_home>
}
 8021c82:	bd08      	pop	{r3, pc}

08021c84 <home>:
{
 8021c84:	b508      	push	{r3, lr}
    return go_home(state, (axes_signals_t){0});
 8021c86:	f04f 0100 	mov.w	r1, #0
 8021c8a:	f7ff ff69 	bl	8021b60 <go_home>
}
 8021c8e:	bd08      	pop	{r3, pc}

08021c90 <_system_output_help>:
    commands->next = commands_root;
    commands_root = commands;
}

void _system_output_help (sys_commands_t *commands, bool traverse)
{
 8021c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021c94:	4606      	mov	r6, r0
 8021c96:	4688      	mov	r8, r1
    const char *help;
    uint_fast8_t idx;

    while(commands) {
 8021c98:	e039      	b.n	8021d0e <_system_output_help+0x7e>
                    if(*help != '$') {
                        hal.stream.write_char('$');
                        hal.stream.write(commands->commands[idx].command);
                        hal.stream.write(" - ");
                    }
                    hal.stream.write(help);
 8021c9a:	4f1f      	ldr	r7, [pc, #124]	@ (8021d18 <_system_output_help+0x88>)
 8021c9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8021ca0:	4628      	mov	r0, r5
 8021ca2:	4798      	blx	r3
                    hal.stream.write("." ASCII_EOL);
 8021ca4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8021ca8:	481c      	ldr	r0, [pc, #112]	@ (8021d1c <_system_output_help+0x8c>)
 8021caa:	4798      	blx	r3
        for(idx = 0; idx < commands->n_commands; idx++) {
 8021cac:	3401      	adds	r4, #1
 8021cae:	7833      	ldrb	r3, [r6, #0]
 8021cb0:	42a3      	cmp	r3, r4
 8021cb2:	d922      	bls.n	8021cfa <_system_output_help+0x6a>
            if(commands->commands[idx].help.str) {
 8021cb4:	6872      	ldr	r2, [r6, #4]
 8021cb6:	0127      	lsls	r7, r4, #4
 8021cb8:	eb02 1304 	add.w	r3, r2, r4, lsl #4
 8021cbc:	68dd      	ldr	r5, [r3, #12]
 8021cbe:	2d00      	cmp	r5, #0
 8021cc0:	d0f4      	beq.n	8021cac <_system_output_help+0x1c>
                if(commands->commands[idx].flags.help_fn)
 8021cc2:	7a1b      	ldrb	r3, [r3, #8]
 8021cc4:	f013 0f04 	tst.w	r3, #4
 8021cc8:	d002      	beq.n	8021cd0 <_system_output_help+0x40>
                    help = commands->commands[idx].help.fn(commands->commands[idx].command);
 8021cca:	59d0      	ldr	r0, [r2, r7]
 8021ccc:	47a8      	blx	r5
 8021cce:	4605      	mov	r5, r0
                if(help) {
 8021cd0:	2d00      	cmp	r5, #0
 8021cd2:	d0eb      	beq.n	8021cac <_system_output_help+0x1c>
                    if(*help != '$') {
 8021cd4:	782b      	ldrb	r3, [r5, #0]
 8021cd6:	2b24      	cmp	r3, #36	@ 0x24
 8021cd8:	d0df      	beq.n	8021c9a <_system_output_help+0xa>
                        hal.stream.write_char('$');
 8021cda:	f8df 903c 	ldr.w	r9, [pc, #60]	@ 8021d18 <_system_output_help+0x88>
 8021cde:	f8d9 30bc 	ldr.w	r3, [r9, #188]	@ 0xbc
 8021ce2:	2024      	movs	r0, #36	@ 0x24
 8021ce4:	4798      	blx	r3
                        hal.stream.write(commands->commands[idx].command);
 8021ce6:	f8d9 30b4 	ldr.w	r3, [r9, #180]	@ 0xb4
 8021cea:	6872      	ldr	r2, [r6, #4]
 8021cec:	59d0      	ldr	r0, [r2, r7]
 8021cee:	4798      	blx	r3
                        hal.stream.write(" - ");
 8021cf0:	f8d9 30b4 	ldr.w	r3, [r9, #180]	@ 0xb4
 8021cf4:	480a      	ldr	r0, [pc, #40]	@ (8021d20 <_system_output_help+0x90>)
 8021cf6:	4798      	blx	r3
 8021cf8:	e7cf      	b.n	8021c9a <_system_output_help+0xa>
                }
            }
        }
        commands = traverse && commands->next != &core_commands ? commands->next : NULL;
 8021cfa:	f1b8 0f00 	cmp.w	r8, #0
 8021cfe:	d005      	beq.n	8021d0c <_system_output_help+0x7c>
 8021d00:	68b6      	ldr	r6, [r6, #8]
 8021d02:	4b08      	ldr	r3, [pc, #32]	@ (8021d24 <_system_output_help+0x94>)
 8021d04:	429e      	cmp	r6, r3
 8021d06:	d102      	bne.n	8021d0e <_system_output_help+0x7e>
 8021d08:	2600      	movs	r6, #0
 8021d0a:	e000      	b.n	8021d0e <_system_output_help+0x7e>
 8021d0c:	2600      	movs	r6, #0
    while(commands) {
 8021d0e:	b10e      	cbz	r6, 8021d14 <_system_output_help+0x84>
        for(idx = 0; idx < commands->n_commands; idx++) {
 8021d10:	2400      	movs	r4, #0
 8021d12:	e7cc      	b.n	8021cae <_system_output_help+0x1e>
    }
}
 8021d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021d18:	200018dc 	.word	0x200018dc
 8021d1c:	08030ef0 	.word	0x08030ef0
 8021d20:	0802c154 	.word	0x0802c154
 8021d24:	200004a4 	.word	0x200004a4

08021d28 <system_command_help>:

    _system_output_help(&cmd, false);
}

void system_command_help (void)
{
 8021d28:	b510      	push	{r4, lr}
    _system_output_help(&core_commands, false);
 8021d2a:	4c06      	ldr	r4, [pc, #24]	@ (8021d44 <system_command_help+0x1c>)
 8021d2c:	2100      	movs	r1, #0
 8021d2e:	4620      	mov	r0, r4
 8021d30:	f7ff ffae 	bl	8021c90 <_system_output_help>
    if(commands_root != &core_commands)
 8021d34:	4b04      	ldr	r3, [pc, #16]	@ (8021d48 <system_command_help+0x20>)
 8021d36:	6818      	ldr	r0, [r3, #0]
 8021d38:	42a0      	cmp	r0, r4
 8021d3a:	d002      	beq.n	8021d42 <system_command_help+0x1a>
        _system_output_help(commands_root, true);
 8021d3c:	2101      	movs	r1, #1
 8021d3e:	f7ff ffa7 	bl	8021c90 <_system_output_help>
}
 8021d42:	bd10      	pop	{r4, pc}
 8021d44:	200004a4 	.word	0x200004a4
 8021d48:	200004a0 	.word	0x200004a0

08021d4c <system_execute_line>:

\param line pointer to the command string.
\returns \a status_code_t enum value; #Status_OK if successfully handled, another relevant status code if not.
*/
status_code_t system_execute_line (char *line)
{
 8021d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021d50:	b082      	sub	sp, #8
    if(line[1] == '\0') {
 8021d52:	7847      	ldrb	r7, [r0, #1]
 8021d54:	b12f      	cbz	r7, 8021d62 <system_execute_line+0x16>
 8021d56:	4604      	mov	r4, r0

    status_code_t retval = Status_Unhandled;

    char c, *s1, *s2;

    s1 = s2 = ++line;
 8021d58:	f100 0801 	add.w	r8, r0, #1
 8021d5c:	4643      	mov	r3, r8
 8021d5e:	4642      	mov	r2, r8

    c = *s1;
    while(c && c != '=') {
 8021d60:	e007      	b.n	8021d72 <system_execute_line+0x26>
        grbl.report.help_message();
 8021d62:	4b81      	ldr	r3, [pc, #516]	@ (8021f68 <system_execute_line+0x21c>)
 8021d64:	685b      	ldr	r3, [r3, #4]
 8021d66:	4798      	blx	r3
        return Status_OK;
 8021d68:	e060      	b.n	8021e2c <system_execute_line+0xe0>
        if(c != ' ')
            *s2++ = CAPS(c);
 8021d6a:	f803 7b01 	strb.w	r7, [r3], #1
        c = *++s1;
 8021d6e:	f812 7f01 	ldrb.w	r7, [r2, #1]!
    while(c && c != '=') {
 8021d72:	b16f      	cbz	r7, 8021d90 <system_execute_line+0x44>
 8021d74:	2f3d      	cmp	r7, #61	@ 0x3d
 8021d76:	d00b      	beq.n	8021d90 <system_execute_line+0x44>
        if(c != ' ')
 8021d78:	2f20      	cmp	r7, #32
 8021d7a:	d0f8      	beq.n	8021d6e <system_execute_line+0x22>
            *s2++ = CAPS(c);
 8021d7c:	f1a7 0161 	sub.w	r1, r7, #97	@ 0x61
 8021d80:	b2c9      	uxtb	r1, r1
 8021d82:	2919      	cmp	r1, #25
 8021d84:	d8f1      	bhi.n	8021d6a <system_execute_line+0x1e>
 8021d86:	f007 075f 	and.w	r7, r7, #95	@ 0x5f
 8021d8a:	e7ee      	b.n	8021d6a <system_execute_line+0x1e>
    }

    while((c = *s1++))
        *s2++ = c;
 8021d8c:	f803 1b01 	strb.w	r1, [r3], #1
    while((c = *s1++))
 8021d90:	f812 1b01 	ldrb.w	r1, [r2], #1
 8021d94:	2900      	cmp	r1, #0
 8021d96:	d1f9      	bne.n	8021d8c <system_execute_line+0x40>

    *s2 = '\0';
 8021d98:	2200      	movs	r2, #0
 8021d9a:	701a      	strb	r2, [r3, #0]

    if(!strncmp(line, "HELP", 4))
 8021d9c:	2204      	movs	r2, #4
 8021d9e:	4973      	ldr	r1, [pc, #460]	@ (8021f6c <system_execute_line+0x220>)
 8021da0:	4640      	mov	r0, r8
 8021da2:	f003 f8e4 	bl	8024f6e <strncmp>
 8021da6:	b160      	cbz	r0, 8021dc2 <system_execute_line+0x76>
        return report_help(&line[4]);

    char *args = strchr(line, '=');
 8021da8:	213d      	movs	r1, #61	@ 0x3d
 8021daa:	4640      	mov	r0, r8
 8021dac:	f003 f8d2 	bl	8024f54 <strchr>

    if(args)
 8021db0:	4681      	mov	r9, r0
 8021db2:	b110      	cbz	r0, 8021dba <system_execute_line+0x6e>
        *args++ = '\0';
 8021db4:	2300      	movs	r3, #0
 8021db6:	f809 3b01 	strb.w	r3, [r9], #1

    uint_fast8_t idx;
    sys_commands_t *cmd = commands_root;
 8021dba:	4b6d      	ldr	r3, [pc, #436]	@ (8021f70 <system_execute_line+0x224>)
 8021dbc:	681d      	ldr	r5, [r3, #0]
    status_code_t retval = Status_Unhandled;
 8021dbe:	2754      	movs	r7, #84	@ 0x54
 8021dc0:	e02e      	b.n	8021e20 <system_execute_line+0xd4>
        return report_help(&line[4]);
 8021dc2:	1d60      	adds	r0, r4, #5
 8021dc4:	f7f9 fdea 	bl	801b99c <report_help>
 8021dc8:	4607      	mov	r7, r0
 8021dca:	e02f      	b.n	8021e2c <system_execute_line+0xe0>
            if(!strcmp(line, cmd->commands[idx].command)) {
                if(sys.blocking_event && !cmd->commands[idx].flags.allow_blocking) {
                    retval = Status_NotAllowedCriticalEvent;
                    break;
                } else if(!cmd->commands[idx].flags.noargs || args == NULL) {
                    if((retval = cmd->commands[idx].execute(state_get(), args)) != Status_Unhandled)
 8021dcc:	6876      	ldr	r6, [r6, #4]
 8021dce:	f7fd f99b 	bl	801f108 <state_get>
 8021dd2:	4649      	mov	r1, r9
 8021dd4:	47b0      	blx	r6
 8021dd6:	4607      	mov	r7, r0
 8021dd8:	2854      	cmp	r0, #84	@ 0x54
 8021dda:	d11d      	bne.n	8021e18 <system_execute_line+0xcc>
        for(idx = 0; idx < cmd->n_commands; idx++) {
 8021ddc:	3401      	adds	r4, #1
 8021dde:	782b      	ldrb	r3, [r5, #0]
 8021de0:	42a3      	cmp	r3, r4
 8021de2:	d919      	bls.n	8021e18 <system_execute_line+0xcc>
            if(!strcmp(line, cmd->commands[idx].command)) {
 8021de4:	686a      	ldr	r2, [r5, #4]
 8021de6:	0123      	lsls	r3, r4, #4
 8021de8:	eb02 1604 	add.w	r6, r2, r4, lsl #4
 8021dec:	58d1      	ldr	r1, [r2, r3]
 8021dee:	4640      	mov	r0, r8
 8021df0:	f7e6 f926 	bl	8008040 <strcmp>
 8021df4:	2800      	cmp	r0, #0
 8021df6:	d1f1      	bne.n	8021ddc <system_execute_line+0x90>
                if(sys.blocking_event && !cmd->commands[idx].flags.allow_blocking) {
 8021df8:	4b5e      	ldr	r3, [pc, #376]	@ (8021f74 <system_execute_line+0x228>)
 8021dfa:	795b      	ldrb	r3, [r3, #5]
 8021dfc:	b11b      	cbz	r3, 8021e06 <system_execute_line+0xba>
 8021dfe:	7a33      	ldrb	r3, [r6, #8]
 8021e00:	f013 0f02 	tst.w	r3, #2
 8021e04:	d007      	beq.n	8021e16 <system_execute_line+0xca>
                } else if(!cmd->commands[idx].flags.noargs || args == NULL) {
 8021e06:	7a33      	ldrb	r3, [r6, #8]
 8021e08:	f013 0f01 	tst.w	r3, #1
 8021e0c:	d0de      	beq.n	8021dcc <system_execute_line+0x80>
 8021e0e:	f1b9 0f00 	cmp.w	r9, #0
 8021e12:	d1e3      	bne.n	8021ddc <system_execute_line+0x90>
 8021e14:	e7da      	b.n	8021dcc <system_execute_line+0x80>
                    retval = Status_NotAllowedCriticalEvent;
 8021e16:	274f      	movs	r7, #79	@ 0x4f
                        break;
                }
            }
        }
        cmd = retval == Status_Unhandled ? cmd->next : NULL;
 8021e18:	2f54      	cmp	r7, #84	@ 0x54
 8021e1a:	d103      	bne.n	8021e24 <system_execute_line+0xd8>
 8021e1c:	68ad      	ldr	r5, [r5, #8]
    } while(cmd);
 8021e1e:	b11d      	cbz	r5, 8021e28 <system_execute_line+0xdc>
        for(idx = 0; idx < cmd->n_commands; idx++) {
 8021e20:	2400      	movs	r4, #0
 8021e22:	e7dc      	b.n	8021dde <system_execute_line+0x92>
        cmd = retval == Status_Unhandled ? cmd->next : NULL;
 8021e24:	2500      	movs	r5, #0
 8021e26:	e7fa      	b.n	8021e1e <system_execute_line+0xd2>

    // deprecated, to be removed
    if(retval == Status_Unhandled && (cmd = grbl.on_get_commands ? grbl.on_get_commands() : NULL)) {
 8021e28:	2f54      	cmp	r7, #84	@ 0x54
 8021e2a:	d003      	beq.n	8021e34 <system_execute_line+0xe8>
        } else
            retval = Status_IdleError;
    }

    return retval;
}
 8021e2c:	4638      	mov	r0, r7
 8021e2e:	b002      	add	sp, #8
 8021e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(retval == Status_Unhandled && (cmd = grbl.on_get_commands ? grbl.on_get_commands() : NULL)) {
 8021e34:	4b4c      	ldr	r3, [pc, #304]	@ (8021f68 <system_execute_line+0x21c>)
 8021e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8021e3a:	b11b      	cbz	r3, 8021e44 <system_execute_line+0xf8>
 8021e3c:	4798      	blx	r3
 8021e3e:	4606      	mov	r6, r0
 8021e40:	2800      	cmp	r0, #0
 8021e42:	d162      	bne.n	8021f0a <system_execute_line+0x1be>
    if(retval == Status_Unhandled && grbl.on_unknown_sys_command) {
 8021e44:	2f54      	cmp	r7, #84	@ 0x54
 8021e46:	d1f1      	bne.n	8021e2c <system_execute_line+0xe0>
 8021e48:	4b47      	ldr	r3, [pc, #284]	@ (8021f68 <system_execute_line+0x21c>)
 8021e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021e4e:	b1ab      	cbz	r3, 8021e7c <system_execute_line+0x130>
        if(args)
 8021e50:	f1b9 0f00 	cmp.w	r9, #0
 8021e54:	d05f      	beq.n	8021f16 <system_execute_line+0x1ca>
            *(--args) = '=';
 8021e56:	f109 34ff 	add.w	r4, r9, #4294967295
 8021e5a:	233d      	movs	r3, #61	@ 0x3d
 8021e5c:	f809 3c01 	strb.w	r3, [r9, #-1]
        retval = grbl.on_unknown_sys_command(state_get(), line);
 8021e60:	4b41      	ldr	r3, [pc, #260]	@ (8021f68 <system_execute_line+0x21c>)
 8021e62:	f8d3 5084 	ldr.w	r5, [r3, #132]	@ 0x84
 8021e66:	f7fd f94f 	bl	801f108 <state_get>
 8021e6a:	4641      	mov	r1, r8
 8021e6c:	47a8      	blx	r5
 8021e6e:	4607      	mov	r7, r0
        if(args)
 8021e70:	2c00      	cmp	r4, #0
 8021e72:	d052      	beq.n	8021f1a <system_execute_line+0x1ce>
            *args++ = '\0';
 8021e74:	46a1      	mov	r9, r4
 8021e76:	2300      	movs	r3, #0
 8021e78:	f809 3b01 	strb.w	r3, [r9], #1
    if (retval == Status_Unhandled) {
 8021e7c:	2f54      	cmp	r7, #84	@ 0x54
 8021e7e:	d1d5      	bne.n	8021e2c <system_execute_line+0xe0>
        if(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))) {
 8021e80:	f7fd f942 	bl	801f108 <state_get>
 8021e84:	b128      	cbz	r0, 8021e92 <system_execute_line+0x146>
 8021e86:	f7fd f93f 	bl	801f108 <state_get>
 8021e8a:	f240 1303 	movw	r3, #259	@ 0x103
 8021e8e:	4218      	tst	r0, r3
 8021e90:	d067      	beq.n	8021f62 <system_execute_line+0x216>
            uint_fast8_t counter = 0;
 8021e92:	2300      	movs	r3, #0
 8021e94:	9300      	str	r3, [sp, #0]
            if(!read_float(line, &counter, &parameter))
 8021e96:	aa01      	add	r2, sp, #4
 8021e98:	4669      	mov	r1, sp
 8021e9a:	4640      	mov	r0, r8
 8021e9c:	f7f3 ff72 	bl	8015d84 <read_float>
 8021ea0:	2800      	cmp	r0, #0
 8021ea2:	d13c      	bne.n	8021f1e <system_execute_line+0x1d2>
                retval = Status_BadNumberFormat;
 8021ea4:	2702      	movs	r7, #2
 8021ea6:	e7c1      	b.n	8021e2c <system_execute_line+0xe0>
                        if((retval = cmd->commands[idx].execute(state_get(), args)) != Status_Unhandled)
 8021ea8:	f8da 7004 	ldr.w	r7, [sl, #4]
 8021eac:	f7fd f92c 	bl	801f108 <state_get>
 8021eb0:	4649      	mov	r1, r9
 8021eb2:	47b8      	blx	r7
 8021eb4:	4607      	mov	r7, r0
 8021eb6:	2854      	cmp	r0, #84	@ 0x54
 8021eb8:	d11f      	bne.n	8021efa <system_execute_line+0x1ae>
            for(idx = 0; idx < cmd->n_commands; idx++) {
 8021eba:	3401      	adds	r4, #1
 8021ebc:	7833      	ldrb	r3, [r6, #0]
 8021ebe:	42a3      	cmp	r3, r4
 8021ec0:	d91b      	bls.n	8021efa <system_execute_line+0x1ae>
                if(!strcmp(line, cmd->commands[idx].command)) {
 8021ec2:	6872      	ldr	r2, [r6, #4]
 8021ec4:	0123      	lsls	r3, r4, #4
 8021ec6:	eb02 1a04 	add.w	sl, r2, r4, lsl #4
 8021eca:	58d1      	ldr	r1, [r2, r3]
 8021ecc:	4640      	mov	r0, r8
 8021ece:	f7e6 f8b7 	bl	8008040 <strcmp>
 8021ed2:	2800      	cmp	r0, #0
 8021ed4:	d1f1      	bne.n	8021eba <system_execute_line+0x16e>
                    if(sys.blocking_event && !cmd->commands[idx].flags.allow_blocking) {
 8021ed6:	4b27      	ldr	r3, [pc, #156]	@ (8021f74 <system_execute_line+0x228>)
 8021ed8:	795b      	ldrb	r3, [r3, #5]
 8021eda:	b123      	cbz	r3, 8021ee6 <system_execute_line+0x19a>
 8021edc:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8021ee0:	f013 0f02 	tst.w	r3, #2
 8021ee4:	d008      	beq.n	8021ef8 <system_execute_line+0x1ac>
                    } else if(!cmd->commands[idx].flags.noargs || args == NULL) {
 8021ee6:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8021eea:	f013 0f01 	tst.w	r3, #1
 8021eee:	d0db      	beq.n	8021ea8 <system_execute_line+0x15c>
 8021ef0:	f1b9 0f00 	cmp.w	r9, #0
 8021ef4:	d1e1      	bne.n	8021eba <system_execute_line+0x16e>
 8021ef6:	e7d7      	b.n	8021ea8 <system_execute_line+0x15c>
                        retval = Status_NotAllowedCriticalEvent;
 8021ef8:	274f      	movs	r7, #79	@ 0x4f
            cmd = retval == Status_Unhandled && cmd->on_get_commands ? cmd->on_get_commands() : NULL;
 8021efa:	2f54      	cmp	r7, #84	@ 0x54
 8021efc:	d107      	bne.n	8021f0e <system_execute_line+0x1c2>
 8021efe:	68f3      	ldr	r3, [r6, #12]
 8021f00:	b13b      	cbz	r3, 8021f12 <system_execute_line+0x1c6>
 8021f02:	4798      	blx	r3
 8021f04:	4606      	mov	r6, r0
        } while(cmd);
 8021f06:	2e00      	cmp	r6, #0
 8021f08:	d09c      	beq.n	8021e44 <system_execute_line+0xf8>
            for(idx = 0; idx < cmd->n_commands; idx++) {
 8021f0a:	2400      	movs	r4, #0
 8021f0c:	e7d6      	b.n	8021ebc <system_execute_line+0x170>
            cmd = retval == Status_Unhandled && cmd->on_get_commands ? cmd->on_get_commands() : NULL;
 8021f0e:	462e      	mov	r6, r5
 8021f10:	e7f9      	b.n	8021f06 <system_execute_line+0x1ba>
 8021f12:	462e      	mov	r6, r5
 8021f14:	e7f7      	b.n	8021f06 <system_execute_line+0x1ba>
 8021f16:	464c      	mov	r4, r9
 8021f18:	e7a2      	b.n	8021e60 <system_execute_line+0x114>
 8021f1a:	46a1      	mov	r9, r4
 8021f1c:	e7ae      	b.n	8021e7c <system_execute_line+0x130>
            else if(!isintf(parameter))
 8021f1e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8021f22:	f7f3 ffa5 	bl	8015e70 <isintf>
 8021f26:	b1d0      	cbz	r0, 8021f5e <system_execute_line+0x212>
            else if(args)
 8021f28:	f1b9 0f00 	cmp.w	r9, #0
 8021f2c:	d00b      	beq.n	8021f46 <system_execute_line+0x1fa>
                retval = settings_store_setting((setting_id_t)parameter, args);
 8021f2e:	eddd 7a01 	vldr	s15, [sp, #4]
 8021f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021f36:	4649      	mov	r1, r9
 8021f38:	ee17 3a90 	vmov	r3, s15
 8021f3c:	b298      	uxth	r0, r3
 8021f3e:	f7fb ff77 	bl	801de30 <settings_store_setting>
 8021f42:	4607      	mov	r7, r0
 8021f44:	e772      	b.n	8021e2c <system_execute_line+0xe0>
                retval = report_grbl_setting((setting_id_t)parameter, NULL);
 8021f46:	eddd 7a01 	vldr	s15, [sp, #4]
 8021f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021f4e:	2100      	movs	r1, #0
 8021f50:	ee17 3a90 	vmov	r3, s15
 8021f54:	b298      	uxth	r0, r3
 8021f56:	f7f7 fd2f 	bl	80199b8 <report_grbl_setting>
 8021f5a:	4607      	mov	r7, r0
 8021f5c:	e766      	b.n	8021e2c <system_execute_line+0xe0>
                retval = Status_InvalidStatement;
 8021f5e:	2703      	movs	r7, #3
        if(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))) {
 8021f60:	e764      	b.n	8021e2c <system_execute_line+0xe0>
            retval = Status_IdleError;
 8021f62:	2708      	movs	r7, #8
 8021f64:	e762      	b.n	8021e2c <system_execute_line+0xe0>
 8021f66:	bf00      	nop
 8021f68:	20001ac4 	.word	0x20001ac4
 8021f6c:	08030f5c 	.word	0x08030f5c
 8021f70:	200004a0 	.word	0x200004a0
 8021f74:	20001bbc 	.word	0x20001bbc

08021f78 <system_convert_array_steps_to_mpos>:
          this function serves as a central place to compute the transformation.
\param position pointer to the target float array for the machine position.
\param steps pointer to the source step count array to transform.
 */
void system_convert_array_steps_to_mpos (float *position, int32_t *steps)
{
 8021f78:	b410      	push	{r4}
#ifdef KINEMATICS_API
    kinematics.transform_steps_to_cartesian(position, steps);
#else
    uint_fast8_t idx = N_AXIS;
 8021f7a:	2303      	movs	r3, #3
    do {
        idx--;
 8021f7c:	3b01      	subs	r3, #1
        position[idx] = steps[idx] / settings.axis[idx].steps_per_mm;
 8021f7e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8021f82:	4a0b      	ldr	r2, [pc, #44]	@ (8021fb0 <system_convert_array_steps_to_mpos+0x38>)
 8021f84:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8021f88:	edd2 6a0c 	vldr	s13, [r2, #48]	@ 0x30
 8021f8c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8021f90:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8021f94:	ee07 4a90 	vmov	s15, r4
 8021f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f9c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8021fa0:	ed82 7a00 	vstr	s14, [r2]
    } while(idx);
 8021fa4:	2b00      	cmp	r3, #0
 8021fa6:	d1e9      	bne.n	8021f7c <system_convert_array_steps_to_mpos+0x4>
#endif
}
 8021fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021fac:	4770      	bx	lr
 8021fae:	bf00      	nop
 8021fb0:	200022f4 	.word	0x200022f4

08021fb4 <system_xy_at_fixture>:
{
    bool ok = false;

    coord_data_t target, position;

    if(tolerance > 0.0f && settings_read_coord_data(id, &target.values)) {
 8021fb4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021fbc:	dc01      	bgt.n	8021fc2 <system_xy_at_fixture+0xe>
    bool ok = false;
 8021fbe:	2000      	movs	r0, #0
        system_convert_array_steps_to_mpos(position.values, sys.position);
        ok = hypot_f(position.x - target.x, position.y - target.y) <= tolerance;
    }

    return ok;
}
 8021fc0:	4770      	bx	lr
{
 8021fc2:	b500      	push	{lr}
 8021fc4:	ed2d 8b02 	vpush	{d8}
 8021fc8:	b087      	sub	sp, #28
 8021fca:	eeb0 8a40 	vmov.f32	s16, s0
    if(tolerance > 0.0f && settings_read_coord_data(id, &target.values)) {
 8021fce:	a903      	add	r1, sp, #12
 8021fd0:	f7fb fc40 	bl	801d854 <settings_read_coord_data>
 8021fd4:	b920      	cbnz	r0, 8021fe0 <system_xy_at_fixture+0x2c>
}
 8021fd6:	b007      	add	sp, #28
 8021fd8:	ecbd 8b02 	vpop	{d8}
 8021fdc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_convert_array_steps_to_mpos(position.values, sys.position);
 8021fe0:	490f      	ldr	r1, [pc, #60]	@ (8022020 <system_xy_at_fixture+0x6c>)
 8021fe2:	4668      	mov	r0, sp
 8021fe4:	f7ff ffc8 	bl	8021f78 <system_convert_array_steps_to_mpos>
        ok = hypot_f(position.x - target.x, position.y - target.y) <= tolerance;
 8021fe8:	ed9d 0a00 	vldr	s0, [sp]
 8021fec:	eddd 7a03 	vldr	s15, [sp, #12]
 8021ff0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8021ff4:	eddd 7a01 	vldr	s15, [sp, #4]
 8021ff8:	ed9d 7a04 	vldr	s14, [sp, #16]
 8021ffc:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return sqrtf(x * x + y * y);
 8022000:	ee20 0a00 	vmul.f32	s0, s0, s0
 8022004:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8022008:	ee30 0a27 	vadd.f32	s0, s0, s15
 802200c:	f005 fcec 	bl	80279e8 <sqrtf>
        ok = hypot_f(position.x - target.x, position.y - target.y) <= tolerance;
 8022010:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8022014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022018:	bfac      	ite	ge
 802201a:	2001      	movge	r0, #1
 802201c:	2000      	movlt	r0, #0
 802201e:	e7da      	b.n	8021fd6 <system_xy_at_fixture+0x22>
 8022020:	20001c44 	.word	0x20001c44

08022024 <system_raise_alarm>:

/*! \brief Raise and report a system alarm.
\param a #alarm_code_t enum representing the alarm code.
 */
void system_raise_alarm (alarm_code_t alarm)
{
 8022024:	b510      	push	{r4, lr}
 8022026:	4604      	mov	r4, r0
    if(state_get() == STATE_HOMING && !(sys.rt_exec_state & EXEC_RESET))
 8022028:	f7fd f86e 	bl	801f108 <state_get>
 802202c:	2804      	cmp	r0, #4
 802202e:	d011      	beq.n	8022054 <system_raise_alarm+0x30>
        system_set_exec_alarm(alarm);
    else if(sys.alarm != alarm) {
 8022030:	4b1c      	ldr	r3, [pc, #112]	@ (80220a4 <system_raise_alarm+0x80>)
 8022032:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8022036:	42a3      	cmp	r3, r4
 8022038:	d02e      	beq.n	8022098 <system_raise_alarm+0x74>
        sys.alarm = alarm;
 802203a:	4b1a      	ldr	r3, [pc, #104]	@ (80220a4 <system_raise_alarm+0x80>)
 802203c:	f883 407c 	strb.w	r4, [r3, #124]	@ 0x7c
        sys.blocking_event = sys.alarm == Alarm_HardLimit ||
 8022040:	1e63      	subs	r3, r4, #1
 8022042:	b2db      	uxtb	r3, r3
                              sys.alarm == Alarm_SoftLimit ||
                               sys.alarm == Alarm_EStop ||
 8022044:	2b01      	cmp	r3, #1
 8022046:	d912      	bls.n	802206e <system_raise_alarm+0x4a>
                              sys.alarm == Alarm_SoftLimit ||
 8022048:	2c0a      	cmp	r4, #10
 802204a:	d026      	beq.n	802209a <system_raise_alarm+0x76>
                               sys.alarm == Alarm_EStop ||
 802204c:	2c11      	cmp	r4, #17
 802204e:	d00c      	beq.n	802206a <system_raise_alarm+0x46>
 8022050:	2200      	movs	r2, #0
 8022052:	e00d      	b.n	8022070 <system_raise_alarm+0x4c>
    if(state_get() == STATE_HOMING && !(sys.rt_exec_state & EXEC_RESET))
 8022054:	4b13      	ldr	r3, [pc, #76]	@ (80220a4 <system_raise_alarm+0x80>)
 8022056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8022058:	f013 0f20 	tst.w	r3, #32
 802205c:	d1e8      	bne.n	8022030 <system_raise_alarm+0xc>
        system_set_exec_alarm(alarm);
 802205e:	4b12      	ldr	r3, [pc, #72]	@ (80220a8 <system_raise_alarm+0x84>)
 8022060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8022062:	4621      	mov	r1, r4
 8022064:	4811      	ldr	r0, [pc, #68]	@ (80220ac <system_raise_alarm+0x88>)
 8022066:	4798      	blx	r3
 8022068:	e016      	b.n	8022098 <system_raise_alarm+0x74>
                               sys.alarm == Alarm_EStop ||
 802206a:	2201      	movs	r2, #1
 802206c:	e000      	b.n	8022070 <system_raise_alarm+0x4c>
 802206e:	2201      	movs	r2, #1
        sys.blocking_event = sys.alarm == Alarm_HardLimit ||
 8022070:	4b0c      	ldr	r3, [pc, #48]	@ (80220a4 <system_raise_alarm+0x80>)
 8022072:	715a      	strb	r2, [r3, #5]
                                sys.alarm == Alarm_MotorFault;
        state_set(alarm == Alarm_EStop ? STATE_ESTOP : STATE_ALARM);
 8022074:	2c0a      	cmp	r4, #10
 8022076:	d012      	beq.n	802209e <system_raise_alarm+0x7a>
 8022078:	2001      	movs	r0, #1
 802207a:	f7fd f84b 	bl	801f114 <state_set>
        if(sys.driver_started || sys.alarm == Alarm_SelftestFailed)
 802207e:	4b09      	ldr	r3, [pc, #36]	@ (80220a4 <system_raise_alarm+0x80>)
 8022080:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8022084:	b923      	cbnz	r3, 8022090 <system_raise_alarm+0x6c>
 8022086:	4b07      	ldr	r3, [pc, #28]	@ (80220a4 <system_raise_alarm+0x80>)
 8022088:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802208c:	2b10      	cmp	r3, #16
 802208e:	d103      	bne.n	8022098 <system_raise_alarm+0x74>
            grbl.report.alarm_message(alarm);
 8022090:	4b07      	ldr	r3, [pc, #28]	@ (80220b0 <system_raise_alarm+0x8c>)
 8022092:	691b      	ldr	r3, [r3, #16]
 8022094:	4620      	mov	r0, r4
 8022096:	4798      	blx	r3
    }
}
 8022098:	bd10      	pop	{r4, pc}
                               sys.alarm == Alarm_EStop ||
 802209a:	2201      	movs	r2, #1
 802209c:	e7e8      	b.n	8022070 <system_raise_alarm+0x4c>
        state_set(alarm == Alarm_EStop ? STATE_ESTOP : STATE_ALARM);
 802209e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80220a2:	e7ea      	b.n	802207a <system_raise_alarm+0x56>
 80220a4:	20001bbc 	.word	0x20001bbc
 80220a8:	200018dc 	.word	0x200018dc
 80220ac:	20001c08 	.word	0x20001c08
 80220b0:	20001ac4 	.word	0x20001ac4

080220b4 <system_get_rt_report_flags>:
\return a #report_tracking_flags_t union containing the flags.
 */
report_tracking_flags_t system_get_rt_report_flags (void)
{
    return sys.report;
}
 80220b4:	4b01      	ldr	r3, [pc, #4]	@ (80220bc <system_get_rt_report_flags+0x8>)
 80220b6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80220b8:	4770      	bx	lr
 80220ba:	bf00      	nop
 80220bc:	20001bbc 	.word	0x20001bbc

080220c0 <system_add_rt_report>:

Fires the \ref grbl.on_rt_reports_added event.
\param report a #report_tracking_t enum containing the flag(s) to set or clear.
 */
void system_add_rt_report (report_tracking_t report)
{
 80220c0:	b508      	push	{r3, lr}
    switch(report) {
 80220c2:	2801      	cmp	r0, #1
 80220c4:	d010      	beq.n	80220e8 <system_add_rt_report+0x28>
 80220c6:	2808      	cmp	r0, #8
 80220c8:	d014      	beq.n	80220f4 <system_add_rt_report+0x34>
 80220ca:	b148      	cbz	r0, 80220e0 <system_add_rt_report+0x20>

        default:
            break;
    }

    sys.report.value |= (uint32_t)report;
 80220cc:	4a10      	ldr	r2, [pc, #64]	@ (8022110 <system_add_rt_report+0x50>)
 80220ce:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80220d0:	4303      	orrs	r3, r0
 80220d2:	6313      	str	r3, [r2, #48]	@ 0x30

    if(sys.report.value && grbl.on_rt_reports_added)
 80220d4:	b13b      	cbz	r3, 80220e6 <system_add_rt_report+0x26>
 80220d6:	4b0f      	ldr	r3, [pc, #60]	@ (8022114 <system_add_rt_report+0x54>)
 80220d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80220da:	b123      	cbz	r3, 80220e6 <system_add_rt_report+0x26>
        grbl.on_rt_reports_added((report_tracking_flags_t)((uint32_t)report));
 80220dc:	4798      	blx	r3
 80220de:	e002      	b.n	80220e6 <system_add_rt_report+0x26>
            sys.report.value = 0;
 80220e0:	4b0b      	ldr	r3, [pc, #44]	@ (8022110 <system_add_rt_report+0x50>)
 80220e2:	2200      	movs	r2, #0
 80220e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80220e6:	bd08      	pop	{r3, pc}
            if(!hal.driver_cap.mpg_mode)
 80220e8:	4b0b      	ldr	r3, [pc, #44]	@ (8022118 <system_add_rt_report+0x58>)
 80220ea:	f993 31d9 	ldrsb.w	r3, [r3, #473]	@ 0x1d9
 80220ee:	2b00      	cmp	r3, #0
 80220f0:	dbec      	blt.n	80220cc <system_add_rt_report+0xc>
 80220f2:	e7f8      	b.n	80220e6 <system_add_rt_report+0x26>
            sys.report.wco = settings.status_report.work_coord_offset;
 80220f4:	4b09      	ldr	r3, [pc, #36]	@ (802211c <system_add_rt_report+0x5c>)
 80220f6:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 80220fa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80220fe:	4a04      	ldr	r2, [pc, #16]	@ (8022110 <system_add_rt_report+0x50>)
 8022100:	f892 1031 	ldrb.w	r1, [r2, #49]	@ 0x31
 8022104:	f363 0100 	bfi	r1, r3, #0, #1
 8022108:	f882 1031 	strb.w	r1, [r2, #49]	@ 0x31
            break;
 802210c:	e7de      	b.n	80220cc <system_add_rt_report+0xc>
 802210e:	bf00      	nop
 8022110:	20001bbc 	.word	0x20001bbc
 8022114:	20001ac4 	.word	0x20001ac4
 8022118:	200018dc 	.word	0x200018dc
 802211c:	200022f4 	.word	0x200022f4

08022120 <set_tool_reference>:
{
 8022120:	b500      	push	{lr}
 8022122:	b083      	sub	sp, #12
    gc_get_plane_data(&plane, gc_state.modal.plane_select);
 8022124:	4b12      	ldr	r3, [pc, #72]	@ (8022170 <set_tool_reference+0x50>)
 8022126:	7999      	ldrb	r1, [r3, #6]
 8022128:	a801      	add	r0, sp, #4
 802212a:	f7eb fa93 	bl	800d654 <gc_get_plane_data>
    if(sys.flags.probe_succeeded) {
 802212e:	4b11      	ldr	r3, [pc, #68]	@ (8022174 <set_tool_reference+0x54>)
 8022130:	7d9b      	ldrb	r3, [r3, #22]
 8022132:	f013 0f02 	tst.w	r3, #2
 8022136:	d016      	beq.n	8022166 <set_tool_reference+0x46>
        sys.tlo_reference_set.mask |= bit(plane.axis_linear);
 8022138:	4a0e      	ldr	r2, [pc, #56]	@ (8022174 <set_tool_reference+0x54>)
 802213a:	79d1      	ldrb	r1, [r2, #7]
 802213c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8022140:	2001      	movs	r0, #1
 8022142:	4098      	lsls	r0, r3
 8022144:	4301      	orrs	r1, r0
 8022146:	71d1      	strb	r1, [r2, #7]
        sys.tlo_reference[plane.axis_linear] = sys.probe_position[plane.axis_linear];
 8022148:	f103 010e 	add.w	r1, r3, #14
 802214c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8022150:	3302      	adds	r3, #2
 8022152:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    system_add_rt_report(Report_TLOReference);
 8022156:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 802215a:	f7ff ffb1 	bl	80220c0 <system_add_rt_report>
}
 802215e:	2000      	movs	r0, #0
 8022160:	b003      	add	sp, #12
 8022162:	f85d fb04 	ldr.w	pc, [sp], #4
        sys.tlo_reference_set.mask = 0;
 8022166:	4b03      	ldr	r3, [pc, #12]	@ (8022174 <set_tool_reference+0x54>)
 8022168:	2200      	movs	r2, #0
 802216a:	71da      	strb	r2, [r3, #7]
 802216c:	e7f3      	b.n	8022156 <set_tool_reference+0x36>
 802216e:	bf00      	nop
 8022170:	20001614 	.word	0x20001614
 8022174:	20001bbc 	.word	0x20001bbc

08022178 <output_parser_state>:
{
 8022178:	b508      	push	{r3, lr}
    report_gcode_modes();
 802217a:	f7f7 feb1 	bl	8019ee0 <report_gcode_modes>
    system_add_rt_report(Report_Homed); // Report homed state on next realtime report
 802217e:	2004      	movs	r0, #4
 8022180:	f7ff ff9e 	bl	80220c0 <system_add_rt_report>
}
 8022184:	2000      	movs	r0, #0
 8022186:	bd08      	pop	{r3, pc}

08022188 <system_clear_tlo_reference>:
{
 8022188:	b510      	push	{r4, lr}
 802218a:	b082      	sub	sp, #8
 802218c:	4604      	mov	r4, r0
    gc_get_plane_data(&plane, gc_state.modal.plane_select);
 802218e:	4b0f      	ldr	r3, [pc, #60]	@ (80221cc <system_clear_tlo_reference+0x44>)
 8022190:	7999      	ldrb	r1, [r3, #6]
 8022192:	a801      	add	r0, sp, #4
 8022194:	f7eb fa5e 	bl	800d654 <gc_get_plane_data>
    if(homing_cycle.mask & (settings.mode == Mode_Lathe ? (X_AXIS_BIT|Z_AXIS_BIT) : bit(plane.axis_linear))) {
 8022198:	b2e4      	uxtb	r4, r4
 802219a:	4b0d      	ldr	r3, [pc, #52]	@ (80221d0 <system_clear_tlo_reference+0x48>)
 802219c:	7e1b      	ldrb	r3, [r3, #24]
 802219e:	2b02      	cmp	r3, #2
 80221a0:	d00a      	beq.n	80221b8 <system_clear_tlo_reference+0x30>
 80221a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80221a6:	2301      	movs	r3, #1
 80221a8:	4093      	lsls	r3, r2
 80221aa:	421c      	tst	r4, r3
 80221ac:	d002      	beq.n	80221b4 <system_clear_tlo_reference+0x2c>
        if(sys.tlo_reference_set.mask != 0) {
 80221ae:	4b09      	ldr	r3, [pc, #36]	@ (80221d4 <system_clear_tlo_reference+0x4c>)
 80221b0:	79db      	ldrb	r3, [r3, #7]
 80221b2:	b91b      	cbnz	r3, 80221bc <system_clear_tlo_reference+0x34>
}
 80221b4:	b002      	add	sp, #8
 80221b6:	bd10      	pop	{r4, pc}
    if(homing_cycle.mask & (settings.mode == Mode_Lathe ? (X_AXIS_BIT|Z_AXIS_BIT) : bit(plane.axis_linear))) {
 80221b8:	2305      	movs	r3, #5
 80221ba:	e7f6      	b.n	80221aa <system_clear_tlo_reference+0x22>
            sys.tlo_reference_set.mask = 0;  // Invalidate tool length offset reference
 80221bc:	4b05      	ldr	r3, [pc, #20]	@ (80221d4 <system_clear_tlo_reference+0x4c>)
 80221be:	2200      	movs	r2, #0
 80221c0:	71da      	strb	r2, [r3, #7]
            system_add_rt_report(Report_TLOReference);
 80221c2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80221c6:	f7ff ff7b 	bl	80220c0 <system_add_rt_report>
}
 80221ca:	e7f3      	b.n	80221b4 <system_clear_tlo_reference+0x2c>
 80221cc:	20001614 	.word	0x20001614
 80221d0:	200022f4 	.word	0x200022f4
 80221d4:	20001bbc 	.word	0x20001bbc

080221d8 <system_flag_wco_change>:
{
 80221d8:	b508      	push	{r3, lr}
    if(settings.status_report.sync_on_wco_change)
 80221da:	4b09      	ldr	r3, [pc, #36]	@ (8022200 <system_flag_wco_change+0x28>)
 80221dc:	f893 30fd 	ldrb.w	r3, [r3, #253]	@ 0xfd
 80221e0:	f013 0f01 	tst.w	r3, #1
 80221e4:	d108      	bne.n	80221f8 <system_flag_wco_change+0x20>
    if(grbl.on_wco_changed)
 80221e6:	4b07      	ldr	r3, [pc, #28]	@ (8022204 <system_flag_wco_change+0x2c>)
 80221e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80221ea:	b103      	cbz	r3, 80221ee <system_flag_wco_change+0x16>
        grbl.on_wco_changed();
 80221ec:	4798      	blx	r3
    system_add_rt_report(Report_WCO);
 80221ee:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80221f2:	f7ff ff65 	bl	80220c0 <system_add_rt_report>
}
 80221f6:	bd08      	pop	{r3, pc}
        protocol_buffer_synchronize();
 80221f8:	f7f5 feec 	bl	8017fd4 <protocol_buffer_synchronize>
 80221fc:	e7f3      	b.n	80221e6 <system_flag_wco_change+0xe>
 80221fe:	bf00      	nop
 8022200:	200022f4 	.word	0x200022f4
 8022204:	20001ac4 	.word	0x20001ac4

08022208 <change_completed>:
//    else error?
}

// Restore HAL pointers on completion or reset.
static void change_completed (void)
{
 8022208:	b538      	push	{r3, r4, r5, lr}
    if(enqueue_realtime_command) {
 802220a:	4b1c      	ldr	r3, [pc, #112]	@ (802227c <change_completed+0x74>)
 802220c:	681b      	ldr	r3, [r3, #0]
 802220e:	b17b      	cbz	r3, 8022230 <change_completed+0x28>
        while(spin_lock);
 8022210:	4b1b      	ldr	r3, [pc, #108]	@ (8022280 <change_completed+0x78>)
 8022212:	681b      	ldr	r3, [r3, #0]
 8022214:	2b00      	cmp	r3, #0
 8022216:	d1fb      	bne.n	8022210 <change_completed+0x8>
        hal.irq_disable();
 8022218:	4c1a      	ldr	r4, [pc, #104]	@ (8022284 <change_completed+0x7c>)
 802221a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802221c:	4798      	blx	r3
        hal.stream.set_enqueue_rt_handler(enqueue_realtime_command);
 802221e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 8022222:	4d16      	ldr	r5, [pc, #88]	@ (802227c <change_completed+0x74>)
 8022224:	6828      	ldr	r0, [r5, #0]
 8022226:	4798      	blx	r3
        enqueue_realtime_command = NULL;
 8022228:	2300      	movs	r3, #0
 802222a:	602b      	str	r3, [r5, #0]
        hal.irq_enable();
 802222c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 802222e:	4798      	blx	r3
    }

    if(control_interrupt_callback) {
 8022230:	4b15      	ldr	r3, [pc, #84]	@ (8022288 <change_completed+0x80>)
 8022232:	681b      	ldr	r3, [r3, #0]
 8022234:	b16b      	cbz	r3, 8022252 <change_completed+0x4a>
        while(spin_lock);
 8022236:	4b12      	ldr	r3, [pc, #72]	@ (8022280 <change_completed+0x78>)
 8022238:	681b      	ldr	r3, [r3, #0]
 802223a:	2b00      	cmp	r3, #0
 802223c:	d1fb      	bne.n	8022236 <change_completed+0x2e>
        hal.irq_disable();
 802223e:	4c11      	ldr	r4, [pc, #68]	@ (8022284 <change_completed+0x7c>)
 8022240:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8022242:	4798      	blx	r3
        hal.control.interrupt_callback = control_interrupt_callback;
 8022244:	4b10      	ldr	r3, [pc, #64]	@ (8022288 <change_completed+0x80>)
 8022246:	681a      	ldr	r2, [r3, #0]
 8022248:	66e2      	str	r2, [r4, #108]	@ 0x6c
        control_interrupt_callback = NULL;
 802224a:	2200      	movs	r2, #0
 802224c:	601a      	str	r2, [r3, #0]
        hal.irq_enable();
 802224e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8022250:	4798      	blx	r3
    }

    if(probe_toolsetter)
 8022252:	4b0e      	ldr	r3, [pc, #56]	@ (802228c <change_completed+0x84>)
 8022254:	781b      	ldrb	r3, [r3, #0]
 8022256:	b13b      	cbz	r3, 8022268 <change_completed+0x60>
        grbl.on_probe_toolsetter(&current_tool, NULL, true, false);
 8022258:	4b0d      	ldr	r3, [pc, #52]	@ (8022290 <change_completed+0x88>)
 802225a:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 802225e:	2300      	movs	r3, #0
 8022260:	2201      	movs	r2, #1
 8022262:	4619      	mov	r1, r3
 8022264:	480b      	ldr	r0, [pc, #44]	@ (8022294 <change_completed+0x8c>)
 8022266:	47a0      	blx	r4

    grbl.on_probe_completed = NULL;
 8022268:	2300      	movs	r3, #0
 802226a:	4a09      	ldr	r2, [pc, #36]	@ (8022290 <change_completed+0x88>)
 802226c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    gc_state.tool_change = probe_toolsetter = false;
 8022270:	4a06      	ldr	r2, [pc, #24]	@ (802228c <change_completed+0x84>)
 8022272:	7013      	strb	r3, [r2, #0]
 8022274:	4a08      	ldr	r2, [pc, #32]	@ (8022298 <change_completed+0x90>)
 8022276:	f882 307f 	strb.w	r3, [r2, #127]	@ 0x7f
}
 802227a:	bd38      	pop	{r3, r4, r5, pc}
 802227c:	20002ed0 	.word	0x20002ed0
 8022280:	20002f10 	.word	0x20002f10
 8022284:	200018dc 	.word	0x200018dc
 8022288:	20002ecc 	.word	0x20002ecc
 802228c:	20002f15 	.word	0x20002f15
 8022290:	20001ac4 	.word	0x20001ac4
 8022294:	20002ef8 	.word	0x20002ef8
 8022298:	20001614 	.word	0x20001614

0802229c <execute_warning>:
}

// Issue warning on cycle start event if touch off by $TPW is pending.
// Used in Manual and Manual_G59_3 modes ($341=1 or $341=2). Called from the foreground process.
static void execute_warning (void *data)
{
 802229c:	b508      	push	{r3, lr}
    grbl.report.feedback_message(Message_ExecuteTPW);
 802229e:	4b02      	ldr	r3, [pc, #8]	@ (80222a8 <execute_warning+0xc>)
 80222a0:	68db      	ldr	r3, [r3, #12]
 80222a2:	2014      	movs	r0, #20
 80222a4:	4798      	blx	r3
}
 80222a6:	bd08      	pop	{r3, pc}
 80222a8:	20001ac4 	.word	0x20001ac4

080222ac <set_probe_target>:
}

// Set and limit probe travel to be within machine limits.
static void set_probe_target (coord_data_t *target, uint8_t axis)
{
    target->values[axis] -= settings.tool_change.probing_distance;
 80222ac:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80222b0:	edd3 7a00 	vldr	s15, [r3]
 80222b4:	4a1d      	ldr	r2, [pc, #116]	@ (802232c <set_probe_target+0x80>)
 80222b6:	ed92 7a0a 	vldr	s14, [r2, #40]	@ 0x28
 80222ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80222be:	edc3 7a00 	vstr	s15, [r3]

    if(bit_istrue(sys.homed.mask, bit(axis)) && settings.axis[axis].max_travel < -0.0f)
 80222c2:	4b1b      	ldr	r3, [pc, #108]	@ (8022330 <set_probe_target+0x84>)
 80222c4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80222c8:	40cb      	lsrs	r3, r1
 80222ca:	f013 0f01 	tst.w	r3, #1
 80222ce:	d00b      	beq.n	80222e8 <set_probe_target+0x3c>
 80222d0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80222d4:	4b15      	ldr	r3, [pc, #84]	@ (802232c <set_probe_target+0x80>)
 80222d6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80222da:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80222de:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80222e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222e6:	d400      	bmi.n	80222ea <set_probe_target+0x3e>
        target->values[axis] = max(min(target->values[axis], sys.work_envelope.max.values[axis]), sys.work_envelope.min.values[axis]);
}
 80222e8:	4770      	bx	lr
        target->values[axis] = max(min(target->values[axis], sys.work_envelope.max.values[axis]), sys.work_envelope.min.values[axis]);
 80222ea:	f101 021a 	add.w	r2, r1, #26
 80222ee:	4b10      	ldr	r3, [pc, #64]	@ (8022330 <set_probe_target+0x84>)
 80222f0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80222f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80222f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80222fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022300:	d501      	bpl.n	8022306 <set_probe_target+0x5a>
 8022302:	eeb0 7a67 	vmov.f32	s14, s15
 8022306:	f101 0218 	add.w	r2, r1, #24
 802230a:	4b09      	ldr	r3, [pc, #36]	@ (8022330 <set_probe_target+0x84>)
 802230c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8022310:	edd3 7a01 	vldr	s15, [r3, #4]
 8022314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802231c:	d401      	bmi.n	8022322 <set_probe_target+0x76>
 802231e:	eeb0 7a67 	vmov.f32	s14, s15
 8022322:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8022326:	ed80 7a00 	vstr	s14, [r0]
}
 802232a:	e7dd      	b.n	80222e8 <set_probe_target+0x3c>
 802232c:	200022f4 	.word	0x200022f4
 8022330:	20001bbc 	.word	0x20001bbc

08022334 <on_toolchange_ack>:
    return drop;
}

// Trap cycle start command and control signal when tool change is acknowledged by sender.
ISR_CODE static void ISR_FUNC(on_toolchange_ack)(void)
{
 8022334:	b508      	push	{r3, lr}
    control_interrupt_callback = hal.control.interrupt_callback;
 8022336:	4b06      	ldr	r3, [pc, #24]	@ (8022350 <on_toolchange_ack+0x1c>)
 8022338:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 802233a:	4a06      	ldr	r2, [pc, #24]	@ (8022354 <on_toolchange_ack+0x20>)
 802233c:	6011      	str	r1, [r2, #0]
    hal.control.interrupt_callback = trap_control_cycle_start;
 802233e:	4a06      	ldr	r2, [pc, #24]	@ (8022358 <on_toolchange_ack+0x24>)
 8022340:	66da      	str	r2, [r3, #108]	@ 0x6c
    enqueue_realtime_command = hal.stream.set_enqueue_rt_handler(trap_stream_cycle_start);
 8022342:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8022346:	4805      	ldr	r0, [pc, #20]	@ (802235c <on_toolchange_ack+0x28>)
 8022348:	4798      	blx	r3
 802234a:	4b05      	ldr	r3, [pc, #20]	@ (8022360 <on_toolchange_ack+0x2c>)
 802234c:	6018      	str	r0, [r3, #0]

}
 802234e:	bd08      	pop	{r3, pc}
 8022350:	200018dc 	.word	0x200018dc
 8022354:	20002ecc 	.word	0x20002ecc
 8022358:	080224f9 	.word	0x080224f9
 802235c:	08022479 	.word	0x08022479
 8022360:	20002ed0 	.word	0x20002ed0

08022364 <on_probe_completed>:
{
 8022364:	b508      	push	{r3, lr}
    if(!sys.flags.probe_succeeded)
 8022366:	4b0f      	ldr	r3, [pc, #60]	@ (80223a4 <on_probe_completed+0x40>)
 8022368:	7d9b      	ldrb	r3, [r3, #22]
 802236a:	f013 0f02 	tst.w	r3, #2
 802236e:	d104      	bne.n	802237a <on_probe_completed+0x16>
        grbl.report.feedback_message(Message_ProbeFailedRetry);
 8022370:	4b0d      	ldr	r3, [pc, #52]	@ (80223a8 <on_probe_completed+0x44>)
 8022372:	68db      	ldr	r3, [r3, #12]
 8022374:	2013      	movs	r0, #19
 8022376:	4798      	blx	r3
}
 8022378:	bd08      	pop	{r3, pc}
    else if(sys.tlo_reference_set.mask & bit(plane.axis_linear))
 802237a:	4b0a      	ldr	r3, [pc, #40]	@ (80223a4 <on_probe_completed+0x40>)
 802237c:	79db      	ldrb	r3, [r3, #7]
 802237e:	4a0b      	ldr	r2, [pc, #44]	@ (80223ac <on_probe_completed+0x48>)
 8022380:	7891      	ldrb	r1, [r2, #2]
 8022382:	40cb      	lsrs	r3, r1
 8022384:	f013 0f01 	tst.w	r3, #1
 8022388:	d0f6      	beq.n	8022378 <on_probe_completed+0x14>
        gc_set_tool_offset(ToolLengthOffset_EnableDynamic, plane.axis_linear, sys.probe_position[plane.axis_linear] - sys.tlo_reference[plane.axis_linear]);
 802238a:	4b06      	ldr	r3, [pc, #24]	@ (80223a4 <on_probe_completed+0x40>)
 802238c:	f101 020e 	add.w	r2, r1, #14
 8022390:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8022394:	1c88      	adds	r0, r1, #2
 8022396:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802239a:	1ad2      	subs	r2, r2, r3
 802239c:	2002      	movs	r0, #2
 802239e:	f7eb f8f3 	bl	800d588 <gc_set_tool_offset>
}
 80223a2:	e7e9      	b.n	8022378 <on_probe_completed+0x14>
 80223a4:	20001bbc 	.word	0x20001bbc
 80223a8:	20001ac4 	.word	0x20001ac4
 80223ac:	20002ef0 	.word	0x20002ef0

080223b0 <reset>:
{
 80223b0:	b538      	push	{r3, r4, r5, lr}
    if(next_tool) { //TODO: move to gc_xxx() function?
 80223b2:	4b18      	ldr	r3, [pc, #96]	@ (8022414 <reset+0x64>)
 80223b4:	681c      	ldr	r4, [r3, #0]
 80223b6:	b1ec      	cbz	r4, 80223f4 <reset+0x44>
        if(current_tool.tool_id != next_tool->tool_id) {
 80223b8:	4b17      	ldr	r3, [pc, #92]	@ (8022418 <reset+0x68>)
 80223ba:	691a      	ldr	r2, [r3, #16]
 80223bc:	6923      	ldr	r3, [r4, #16]
 80223be:	429a      	cmp	r2, r3
 80223c0:	d010      	beq.n	80223e4 <reset+0x34>
            if(grbl.tool_table.n_tools)
 80223c2:	4b16      	ldr	r3, [pc, #88]	@ (802241c <reset+0x6c>)
 80223c4:	699b      	ldr	r3, [r3, #24]
 80223c6:	b1db      	cbz	r3, 8022400 <reset+0x50>
                memcpy(gc_state.tool, &current_tool, sizeof(tool_data_t));
 80223c8:	4b15      	ldr	r3, [pc, #84]	@ (8022420 <reset+0x70>)
 80223ca:	f8d3 50d0 	ldr.w	r5, [r3, #208]	@ 0xd0
 80223ce:	4c12      	ldr	r4, [pc, #72]	@ (8022418 <reset+0x68>)
 80223d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80223d2:	6028      	str	r0, [r5, #0]
 80223d4:	6069      	str	r1, [r5, #4]
 80223d6:	60aa      	str	r2, [r5, #8]
 80223d8:	60eb      	str	r3, [r5, #12]
 80223da:	6820      	ldr	r0, [r4, #0]
 80223dc:	6128      	str	r0, [r5, #16]
            system_add_rt_report(Report_Tool);
 80223de:	2080      	movs	r0, #128	@ 0x80
 80223e0:	f7ff fe6e 	bl	80220c0 <system_add_rt_report>
        gc_state.tool_pending = gc_state.tool->tool_id;
 80223e4:	4b0e      	ldr	r3, [pc, #56]	@ (8022420 <reset+0x70>)
 80223e6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80223ea:	6912      	ldr	r2, [r2, #16]
 80223ec:	679a      	str	r2, [r3, #120]	@ 0x78
        next_tool = NULL;
 80223ee:	4b09      	ldr	r3, [pc, #36]	@ (8022414 <reset+0x64>)
 80223f0:	2200      	movs	r2, #0
 80223f2:	601a      	str	r2, [r3, #0]
    change_completed();
 80223f4:	f7ff ff08 	bl	8022208 <change_completed>
    driver_reset();
 80223f8:	4b0a      	ldr	r3, [pc, #40]	@ (8022424 <reset+0x74>)
 80223fa:	681b      	ldr	r3, [r3, #0]
 80223fc:	4798      	blx	r3
}
 80223fe:	bd38      	pop	{r3, r4, r5, pc}
                memcpy(next_tool, &current_tool, sizeof(tool_data_t));
 8022400:	4d05      	ldr	r5, [pc, #20]	@ (8022418 <reset+0x68>)
 8022402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022404:	6020      	str	r0, [r4, #0]
 8022406:	6061      	str	r1, [r4, #4]
 8022408:	60a2      	str	r2, [r4, #8]
 802240a:	60e3      	str	r3, [r4, #12]
 802240c:	6828      	ldr	r0, [r5, #0]
 802240e:	6120      	str	r0, [r4, #16]
 8022410:	e7e5      	b.n	80223de <reset+0x2e>
 8022412:	bf00      	nop
 8022414:	20002ef4 	.word	0x20002ef4
 8022418:	20002ef8 	.word	0x20002ef8
 802241c:	20001ac4 	.word	0x20001ac4
 8022420:	20001614 	.word	0x20001614
 8022424:	20002ed4 	.word	0x20002ed4

08022428 <tool_select>:

// Set next and/or current tool. Called by gcode.c on on a Tn or M61 command (via HAL).
static void tool_select (tool_data_t *tool, bool next)
{
    next_tool = tool;
 8022428:	4b07      	ldr	r3, [pc, #28]	@ (8022448 <tool_select+0x20>)
 802242a:	6018      	str	r0, [r3, #0]
    if(!next)
 802242c:	b101      	cbz	r1, 8022430 <tool_select+0x8>
 802242e:	4770      	bx	lr
{
 8022430:	b430      	push	{r4, r5}
 8022432:	4604      	mov	r4, r0
        memcpy(&current_tool, tool, sizeof(tool_data_t));
 8022434:	4d05      	ldr	r5, [pc, #20]	@ (802244c <tool_select+0x24>)
 8022436:	6800      	ldr	r0, [r0, #0]
 8022438:	6861      	ldr	r1, [r4, #4]
 802243a:	68a2      	ldr	r2, [r4, #8]
 802243c:	68e3      	ldr	r3, [r4, #12]
 802243e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8022440:	6920      	ldr	r0, [r4, #16]
 8022442:	6028      	str	r0, [r5, #0]
}
 8022444:	bc30      	pop	{r4, r5}
 8022446:	4770      	bx	lr
 8022448:	20002ef4 	.word	0x20002ef4
 802244c:	20002ef8 	.word	0x20002ef8

08022450 <tc_on_homing_complete>:
{
 8022450:	b510      	push	{r4, lr}
 8022452:	4604      	mov	r4, r0
    if(on_homing_completed)
 8022454:	4b06      	ldr	r3, [pc, #24]	@ (8022470 <tc_on_homing_complete+0x20>)
 8022456:	681b      	ldr	r3, [r3, #0]
 8022458:	b103      	cbz	r3, 802245c <tc_on_homing_complete+0xc>
        on_homing_completed(homing_cycle, success);
 802245a:	4798      	blx	r3
    if(settings.tool_change.mode != ToolChange_Disabled)
 802245c:	4b05      	ldr	r3, [pc, #20]	@ (8022474 <tc_on_homing_complete+0x24>)
 802245e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8022462:	b903      	cbnz	r3, 8022466 <tc_on_homing_complete+0x16>
}
 8022464:	bd10      	pop	{r4, pc}
        system_clear_tlo_reference(homing_cycle);
 8022466:	4620      	mov	r0, r4
 8022468:	f7ff fe8e 	bl	8022188 <system_clear_tlo_reference>
}
 802246c:	e7fa      	b.n	8022464 <tc_on_homing_complete+0x14>
 802246e:	bf00      	nop
 8022470:	20002ec8 	.word	0x20002ec8
 8022474:	200022f4 	.word	0x200022f4

08022478 <trap_stream_cycle_start>:
{
 8022478:	b510      	push	{r4, lr}
    spin_lock++;
 802247a:	4a17      	ldr	r2, [pc, #92]	@ (80224d8 <trap_stream_cycle_start+0x60>)
 802247c:	6813      	ldr	r3, [r2, #0]
 802247e:	3301      	adds	r3, #1
 8022480:	6013      	str	r3, [r2, #0]
    if((drop = (c == CMD_CYCLE_START || c == CMD_CYCLE_START_LEGACY))) {
 8022482:	2881      	cmp	r0, #129	@ 0x81
 8022484:	d00b      	beq.n	802249e <trap_stream_cycle_start+0x26>
 8022486:	287e      	cmp	r0, #126	@ 0x7e
 8022488:	d009      	beq.n	802249e <trap_stream_cycle_start+0x26>
        drop = enqueue_realtime_command(c);
 802248a:	4b14      	ldr	r3, [pc, #80]	@ (80224dc <trap_stream_cycle_start+0x64>)
 802248c:	681b      	ldr	r3, [r3, #0]
 802248e:	4798      	blx	r3
 8022490:	4604      	mov	r4, r0
    spin_lock--;
 8022492:	4a11      	ldr	r2, [pc, #68]	@ (80224d8 <trap_stream_cycle_start+0x60>)
 8022494:	6813      	ldr	r3, [r2, #0]
 8022496:	3b01      	subs	r3, #1
 8022498:	6013      	str	r3, [r2, #0]
}
 802249a:	4620      	mov	r0, r4
 802249c:	bd10      	pop	{r4, pc}
        if(!execute_posted) {
 802249e:	4b10      	ldr	r3, [pc, #64]	@ (80224e0 <trap_stream_cycle_start+0x68>)
 80224a0:	781b      	ldrb	r3, [r3, #0]
 80224a2:	f003 04ff 	and.w	r4, r3, #255	@ 0xff
 80224a6:	2b00      	cmp	r3, #0
 80224a8:	d1f3      	bne.n	8022492 <trap_stream_cycle_start+0x1a>
            if(!block_cycle_start)
 80224aa:	4b0e      	ldr	r3, [pc, #56]	@ (80224e4 <trap_stream_cycle_start+0x6c>)
 80224ac:	781c      	ldrb	r4, [r3, #0]
 80224ae:	b974      	cbnz	r4, 80224ce <trap_stream_cycle_start+0x56>
                execute_posted = protocol_enqueue_foreground_task(settings.tool_change.mode == ToolChange_SemiAutomatic ? execute_probe : execute_restore, NULL);
 80224b0:	4b0d      	ldr	r3, [pc, #52]	@ (80224e8 <trap_stream_cycle_start+0x70>)
 80224b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80224b6:	2b03      	cmp	r3, #3
 80224b8:	d007      	beq.n	80224ca <trap_stream_cycle_start+0x52>
 80224ba:	480c      	ldr	r0, [pc, #48]	@ (80224ec <trap_stream_cycle_start+0x74>)
 80224bc:	2100      	movs	r1, #0
 80224be:	f7f5 fda7 	bl	8018010 <protocol_enqueue_foreground_task>
 80224c2:	4b07      	ldr	r3, [pc, #28]	@ (80224e0 <trap_stream_cycle_start+0x68>)
 80224c4:	7018      	strb	r0, [r3, #0]
 80224c6:	2401      	movs	r4, #1
 80224c8:	e7e3      	b.n	8022492 <trap_stream_cycle_start+0x1a>
 80224ca:	4809      	ldr	r0, [pc, #36]	@ (80224f0 <trap_stream_cycle_start+0x78>)
 80224cc:	e7f6      	b.n	80224bc <trap_stream_cycle_start+0x44>
                protocol_enqueue_foreground_task(execute_warning, NULL);
 80224ce:	2100      	movs	r1, #0
 80224d0:	4808      	ldr	r0, [pc, #32]	@ (80224f4 <trap_stream_cycle_start+0x7c>)
 80224d2:	f7f5 fd9d 	bl	8018010 <protocol_enqueue_foreground_task>
 80224d6:	e7dc      	b.n	8022492 <trap_stream_cycle_start+0x1a>
 80224d8:	20002f10 	.word	0x20002f10
 80224dc:	20002ed0 	.word	0x20002ed0
 80224e0:	20002f14 	.word	0x20002f14
 80224e4:	20002f16 	.word	0x20002f16
 80224e8:	200022f4 	.word	0x200022f4
 80224ec:	08022695 	.word	0x08022695
 80224f0:	080226d5 	.word	0x080226d5
 80224f4:	0802229d 	.word	0x0802229d

080224f8 <trap_control_cycle_start>:
{
 80224f8:	b508      	push	{r3, lr}
    spin_lock++;
 80224fa:	4a14      	ldr	r2, [pc, #80]	@ (802254c <trap_control_cycle_start+0x54>)
 80224fc:	6813      	ldr	r3, [r2, #0]
 80224fe:	3301      	adds	r3, #1
 8022500:	6013      	str	r3, [r2, #0]
    if(signals.cycle_start) {
 8022502:	f010 0f04 	tst.w	r0, #4
 8022506:	d018      	beq.n	802253a <trap_control_cycle_start+0x42>
        if(!execute_posted) {
 8022508:	4b11      	ldr	r3, [pc, #68]	@ (8022550 <trap_control_cycle_start+0x58>)
 802250a:	781b      	ldrb	r3, [r3, #0]
 802250c:	b9c3      	cbnz	r3, 8022540 <trap_control_cycle_start+0x48>
            if(!block_cycle_start)
 802250e:	4b11      	ldr	r3, [pc, #68]	@ (8022554 <trap_control_cycle_start+0x5c>)
 8022510:	781b      	ldrb	r3, [r3, #0]
 8022512:	b96b      	cbnz	r3, 8022530 <trap_control_cycle_start+0x38>
                execute_posted = protocol_enqueue_foreground_task(settings.tool_change.mode == ToolChange_SemiAutomatic ? execute_probe : execute_restore, NULL);
 8022514:	4b10      	ldr	r3, [pc, #64]	@ (8022558 <trap_control_cycle_start+0x60>)
 8022516:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 802251a:	2b03      	cmp	r3, #3
 802251c:	d006      	beq.n	802252c <trap_control_cycle_start+0x34>
 802251e:	480f      	ldr	r0, [pc, #60]	@ (802255c <trap_control_cycle_start+0x64>)
 8022520:	2100      	movs	r1, #0
 8022522:	f7f5 fd75 	bl	8018010 <protocol_enqueue_foreground_task>
 8022526:	4b0a      	ldr	r3, [pc, #40]	@ (8022550 <trap_control_cycle_start+0x58>)
 8022528:	7018      	strb	r0, [r3, #0]
 802252a:	e009      	b.n	8022540 <trap_control_cycle_start+0x48>
 802252c:	480c      	ldr	r0, [pc, #48]	@ (8022560 <trap_control_cycle_start+0x68>)
 802252e:	e7f7      	b.n	8022520 <trap_control_cycle_start+0x28>
                protocol_enqueue_foreground_task(execute_warning, NULL);
 8022530:	2100      	movs	r1, #0
 8022532:	480c      	ldr	r0, [pc, #48]	@ (8022564 <trap_control_cycle_start+0x6c>)
 8022534:	f7f5 fd6c 	bl	8018010 <protocol_enqueue_foreground_task>
        signals.cycle_start = Off;
 8022538:	e002      	b.n	8022540 <trap_control_cycle_start+0x48>
        control_interrupt_callback(signals);
 802253a:	4b0b      	ldr	r3, [pc, #44]	@ (8022568 <trap_control_cycle_start+0x70>)
 802253c:	681b      	ldr	r3, [r3, #0]
 802253e:	4798      	blx	r3
    spin_lock--;
 8022540:	4a02      	ldr	r2, [pc, #8]	@ (802254c <trap_control_cycle_start+0x54>)
 8022542:	6813      	ldr	r3, [r2, #0]
 8022544:	3b01      	subs	r3, #1
 8022546:	6013      	str	r3, [r2, #0]
}
 8022548:	bd08      	pop	{r3, pc}
 802254a:	bf00      	nop
 802254c:	20002f10 	.word	0x20002f10
 8022550:	20002f14 	.word	0x20002f14
 8022554:	20002f16 	.word	0x20002f16
 8022558:	200022f4 	.word	0x200022f4
 802255c:	08022695 	.word	0x08022695
 8022560:	080226d5 	.word	0x080226d5
 8022564:	0802229d 	.word	0x0802229d
 8022568:	20002ecc 	.word	0x20002ecc

0802256c <restore>:
{
 802256c:	b530      	push	{r4, r5, lr}
 802256e:	b08b      	sub	sp, #44	@ 0x2c
    plan_data_init(&plan_data);
 8022570:	4668      	mov	r0, sp
 8022572:	f7f4 fd95 	bl	80170a0 <plan_data_init>
    plan_data.condition.rapid_motion = On;
 8022576:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802257a:	f043 0301 	orr.w	r3, r3, #1
 802257e:	f88d 3014 	strb.w	r3, [sp, #20]
    target.values[plane.axis_linear] = tool_change_position;
 8022582:	4b3a      	ldr	r3, [pc, #232]	@ (802266c <restore+0x100>)
 8022584:	789b      	ldrb	r3, [r3, #2]
 8022586:	483a      	ldr	r0, [pc, #232]	@ (8022670 <restore+0x104>)
 8022588:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802258c:	4a39      	ldr	r2, [pc, #228]	@ (8022674 <restore+0x108>)
 802258e:	6812      	ldr	r2, [r2, #0]
 8022590:	601a      	str	r2, [r3, #0]
    mc_line(target.values, &plan_data);
 8022592:	4669      	mov	r1, sp
 8022594:	f7f1 fc20 	bl	8013dd8 <mc_line>
    if(!settings.flags.no_restore_position_after_M6) {
 8022598:	4b37      	ldr	r3, [pc, #220]	@ (8022678 <restore+0x10c>)
 802259a:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 802259e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80225a2:	d010      	beq.n	80225c6 <restore+0x5a>
    if(protocol_buffer_synchronize()) {
 80225a4:	f7f5 fd16 	bl	8017fd4 <protocol_buffer_synchronize>
 80225a8:	b9f0      	cbnz	r0, 80225e8 <restore+0x7c>
    if(protocol_buffer_synchronize()) {
 80225aa:	f7f5 fd13 	bl	8017fd4 <protocol_buffer_synchronize>
 80225ae:	2800      	cmp	r0, #0
 80225b0:	d145      	bne.n	802263e <restore+0xd2>
    return !ABORTED;
 80225b2:	4b32      	ldr	r3, [pc, #200]	@ (802267c <restore+0x110>)
 80225b4:	781b      	ldrb	r3, [r3, #0]
 80225b6:	2b00      	cmp	r3, #0
 80225b8:	d152      	bne.n	8022660 <restore+0xf4>
 80225ba:	4b30      	ldr	r3, [pc, #192]	@ (802267c <restore+0x110>)
 80225bc:	785b      	ldrb	r3, [r3, #1]
 80225be:	2b00      	cmp	r3, #0
 80225c0:	d051      	beq.n	8022666 <restore+0xfa>
 80225c2:	2000      	movs	r0, #0
 80225c4:	e04d      	b.n	8022662 <restore+0xf6>
        memcpy(&target, &previous, sizeof(coord_data_t));
 80225c6:	4b2a      	ldr	r3, [pc, #168]	@ (8022670 <restore+0x104>)
 80225c8:	4a2d      	ldr	r2, [pc, #180]	@ (8022680 <restore+0x114>)
 80225ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80225cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        target.values[plane.axis_linear] = tool_change_position;
 80225d0:	4a26      	ldr	r2, [pc, #152]	@ (802266c <restore+0x100>)
 80225d2:	7892      	ldrb	r2, [r2, #2]
 80225d4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80225d8:	4926      	ldr	r1, [pc, #152]	@ (8022674 <restore+0x108>)
 80225da:	6809      	ldr	r1, [r1, #0]
 80225dc:	6011      	str	r1, [r2, #0]
        mc_line(target.values, &plan_data);
 80225de:	4669      	mov	r1, sp
 80225e0:	4618      	mov	r0, r3
 80225e2:	f7f1 fbf9 	bl	8013dd8 <mc_line>
 80225e6:	e7dd      	b.n	80225a4 <restore+0x38>
        sync_position();
 80225e8:	f7f4 fce4 	bl	8016fb4 <plan_sync_position>
 80225ec:	4c25      	ldr	r4, [pc, #148]	@ (8022684 <restore+0x118>)
 80225ee:	4926      	ldr	r1, [pc, #152]	@ (8022688 <restore+0x11c>)
 80225f0:	4620      	mov	r0, r4
 80225f2:	f7ff fcc1 	bl	8021f78 <system_convert_array_steps_to_mpos>
        coolant_sync(gc_state.modal.coolant);
 80225f6:	f814 0c4f 	ldrb.w	r0, [r4, #-79]
 80225fa:	f7ea fd9b 	bl	800d134 <coolant_sync>
        spindle_restore(plan_data.spindle.hal, gc_state.modal.spindle.state, gc_state.spindle.rpm);
 80225fe:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8022602:	f814 1c4e 	ldrb.w	r1, [r4, #-78]
 8022606:	9804      	ldr	r0, [sp, #16]
 8022608:	f7fc f9ec 	bl	801e9e4 <spindle_restore>
        if(!settings.flags.no_restore_position_after_M6) {
 802260c:	4b1a      	ldr	r3, [pc, #104]	@ (8022678 <restore+0x10c>)
 802260e:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 8022612:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8022616:	d1c8      	bne.n	80225aa <restore+0x3e>
            previous.values[plane.axis_linear] += gc_get_offset(plane.axis_linear, false);
 8022618:	4c14      	ldr	r4, [pc, #80]	@ (802266c <restore+0x100>)
 802261a:	2100      	movs	r1, #0
 802261c:	78a0      	ldrb	r0, [r4, #2]
 802261e:	f7ea ff73 	bl	800d508 <gc_get_offset>
 8022622:	78a3      	ldrb	r3, [r4, #2]
 8022624:	4816      	ldr	r0, [pc, #88]	@ (8022680 <restore+0x114>)
 8022626:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802262a:	edd3 7a00 	vldr	s15, [r3]
 802262e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8022632:	edc3 7a00 	vstr	s15, [r3]
            mc_line(previous.values, &plan_data);
 8022636:	4669      	mov	r1, sp
 8022638:	f7f1 fbce 	bl	8013dd8 <mc_line>
 802263c:	e7b5      	b.n	80225aa <restore+0x3e>
        sync_position();
 802263e:	f7f4 fcb9 	bl	8016fb4 <plan_sync_position>
 8022642:	4911      	ldr	r1, [pc, #68]	@ (8022688 <restore+0x11c>)
 8022644:	480f      	ldr	r0, [pc, #60]	@ (8022684 <restore+0x118>)
 8022646:	f7ff fc97 	bl	8021f78 <system_convert_array_steps_to_mpos>
        memcpy(&current_tool, next_tool, sizeof(tool_data_t));
 802264a:	4b10      	ldr	r3, [pc, #64]	@ (802268c <restore+0x120>)
 802264c:	681d      	ldr	r5, [r3, #0]
 802264e:	4c10      	ldr	r4, [pc, #64]	@ (8022690 <restore+0x124>)
 8022650:	6828      	ldr	r0, [r5, #0]
 8022652:	6869      	ldr	r1, [r5, #4]
 8022654:	68aa      	ldr	r2, [r5, #8]
 8022656:	68eb      	ldr	r3, [r5, #12]
 8022658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802265a:	6928      	ldr	r0, [r5, #16]
 802265c:	6020      	str	r0, [r4, #0]
 802265e:	e7a8      	b.n	80225b2 <restore+0x46>
    return !ABORTED;
 8022660:	2000      	movs	r0, #0
}
 8022662:	b00b      	add	sp, #44	@ 0x2c
 8022664:	bd30      	pop	{r4, r5, pc}
    return !ABORTED;
 8022666:	2001      	movs	r0, #1
 8022668:	e7fb      	b.n	8022662 <restore+0xf6>
 802266a:	bf00      	nop
 802266c:	20002ef0 	.word	0x20002ef0
 8022670:	20002ee4 	.word	0x20002ee4
 8022674:	20002f0c 	.word	0x20002f0c
 8022678:	200022f4 	.word	0x200022f4
 802267c:	20001bbc 	.word	0x20001bbc
 8022680:	20002ed8 	.word	0x20002ed8
 8022684:	2000167c 	.word	0x2000167c
 8022688:	20001c44 	.word	0x20001c44
 802268c:	20002ef4 	.word	0x20002ef4
 8022690:	20002ef8 	.word	0x20002ef8

08022694 <execute_restore>:
{
 8022694:	b510      	push	{r4, lr}
    system_convert_array_steps_to_mpos(target.values, sys.position);
 8022696:	490a      	ldr	r1, [pc, #40]	@ (80226c0 <execute_restore+0x2c>)
 8022698:	480a      	ldr	r0, [pc, #40]	@ (80226c4 <execute_restore+0x30>)
 802269a:	f7ff fc6d 	bl	8021f78 <system_convert_array_steps_to_mpos>
    bool ok = restore();
 802269e:	f7ff ff65 	bl	802256c <restore>
 80226a2:	4604      	mov	r4, r0
    change_completed();
 80226a4:	f7ff fdb0 	bl	8022208 <change_completed>
    grbl.report.feedback_message(Message_None);
 80226a8:	4b07      	ldr	r3, [pc, #28]	@ (80226c8 <execute_restore+0x34>)
 80226aa:	68db      	ldr	r3, [r3, #12]
 80226ac:	2000      	movs	r0, #0
 80226ae:	4798      	blx	r3
    if(ok)
 80226b0:	b124      	cbz	r4, 80226bc <execute_restore+0x28>
        system_set_exec_state_flag(EXEC_CYCLE_START);
 80226b2:	4b06      	ldr	r3, [pc, #24]	@ (80226cc <execute_restore+0x38>)
 80226b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80226b6:	2102      	movs	r1, #2
 80226b8:	4805      	ldr	r0, [pc, #20]	@ (80226d0 <execute_restore+0x3c>)
 80226ba:	4798      	blx	r3
}
 80226bc:	bd10      	pop	{r4, pc}
 80226be:	bf00      	nop
 80226c0:	20001c44 	.word	0x20001c44
 80226c4:	20002ee4 	.word	0x20002ee4
 80226c8:	20001ac4 	.word	0x20001ac4
 80226cc:	200018dc 	.word	0x200018dc
 80226d0:	20001c04 	.word	0x20001c04

080226d4 <execute_probe>:
{
 80226d4:	b570      	push	{r4, r5, r6, lr}
 80226d6:	b08e      	sub	sp, #56	@ 0x38
    gc_parser_flags_t flags = {0};
 80226d8:	2400      	movs	r4, #0
    settings_read_coord_data(CoordinateSystem_G59_3, &offset.values);
 80226da:	a90b      	add	r1, sp, #44	@ 0x2c
 80226dc:	2008      	movs	r0, #8
 80226de:	f7fb f8b9 	bl	801d854 <settings_read_coord_data>
    plan_data_init(&plan_data);
 80226e2:	a801      	add	r0, sp, #4
 80226e4:	f7f4 fcdc 	bl	80170a0 <plan_data_init>
    plan_data.condition.rapid_motion = On;
 80226e8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80226ec:	f043 0301 	orr.w	r3, r3, #1
 80226f0:	f88d 3018 	strb.w	r3, [sp, #24]
    target.values[plane.axis_0] = offset.values[plane.axis_0];
 80226f4:	4961      	ldr	r1, [pc, #388]	@ (802287c <execute_probe+0x1a8>)
 80226f6:	780a      	ldrb	r2, [r1, #0]
 80226f8:	ab0e      	add	r3, sp, #56	@ 0x38
 80226fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80226fe:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 8022702:	4b5f      	ldr	r3, [pc, #380]	@ (8022880 <execute_probe+0x1ac>)
 8022704:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8022708:	6010      	str	r0, [r2, #0]
    target.values[plane.axis_1] = offset.values[plane.axis_1];
 802270a:	784a      	ldrb	r2, [r1, #1]
 802270c:	a90e      	add	r1, sp, #56	@ 0x38
 802270e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8022712:	f851 1c0c 	ldr.w	r1, [r1, #-12]
 8022716:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802271a:	6019      	str	r1, [r3, #0]
    if(probe_toolsetter)
 802271c:	4b59      	ldr	r3, [pc, #356]	@ (8022884 <execute_probe+0x1b0>)
 802271e:	781b      	ldrb	r3, [r3, #0]
 8022720:	b143      	cbz	r3, 8022734 <execute_probe+0x60>
        grbl.on_probe_toolsetter(next_tool, &target, false, true);
 8022722:	4b59      	ldr	r3, [pc, #356]	@ (8022888 <execute_probe+0x1b4>)
 8022724:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 8022728:	2301      	movs	r3, #1
 802272a:	4622      	mov	r2, r4
 802272c:	4954      	ldr	r1, [pc, #336]	@ (8022880 <execute_probe+0x1ac>)
 802272e:	4857      	ldr	r0, [pc, #348]	@ (802288c <execute_probe+0x1b8>)
 8022730:	6800      	ldr	r0, [r0, #0]
 8022732:	47a8      	blx	r5
    if((ok = mc_line(target.values, &plan_data))) {
 8022734:	a901      	add	r1, sp, #4
 8022736:	4852      	ldr	r0, [pc, #328]	@ (8022880 <execute_probe+0x1ac>)
 8022738:	f7f1 fb4e 	bl	8013dd8 <mc_line>
 802273c:	b918      	cbnz	r0, 8022746 <execute_probe+0x72>
    change_completed();
 802273e:	f7ff fd63 	bl	8022208 <change_completed>
}
 8022742:	b00e      	add	sp, #56	@ 0x38
 8022744:	bd70      	pop	{r4, r5, r6, pc}
        target.values[plane.axis_linear] = offset.values[plane.axis_linear];
 8022746:	4b4d      	ldr	r3, [pc, #308]	@ (802287c <execute_probe+0x1a8>)
 8022748:	789b      	ldrb	r3, [r3, #2]
 802274a:	aa0e      	add	r2, sp, #56	@ 0x38
 802274c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8022750:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 8022754:	484a      	ldr	r0, [pc, #296]	@ (8022880 <execute_probe+0x1ac>)
 8022756:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802275a:	601a      	str	r2, [r3, #0]
        ok = mc_line(target.values, &plan_data);
 802275c:	a901      	add	r1, sp, #4
 802275e:	f7f1 fb3b 	bl	8013dd8 <mc_line>
        if(ok && probe_toolsetter)
 8022762:	4605      	mov	r5, r0
 8022764:	b158      	cbz	r0, 802277e <execute_probe+0xaa>
 8022766:	4b47      	ldr	r3, [pc, #284]	@ (8022884 <execute_probe+0x1b0>)
 8022768:	781b      	ldrb	r3, [r3, #0]
 802276a:	b143      	cbz	r3, 802277e <execute_probe+0xaa>
            grbl.on_probe_toolsetter(next_tool, NULL, true, true);
 802276c:	4b46      	ldr	r3, [pc, #280]	@ (8022888 <execute_probe+0x1b4>)
 802276e:	f8d3 609c 	ldr.w	r6, [r3, #156]	@ 0x9c
 8022772:	2301      	movs	r3, #1
 8022774:	461a      	mov	r2, r3
 8022776:	2100      	movs	r1, #0
 8022778:	4844      	ldr	r0, [pc, #272]	@ (802288c <execute_probe+0x1b8>)
 802277a:	6800      	ldr	r0, [r0, #0]
 802277c:	47b0      	blx	r6
        plan_data.feed_rate = settings.tool_change.seek_rate;
 802277e:	4b44      	ldr	r3, [pc, #272]	@ (8022890 <execute_probe+0x1bc>)
 8022780:	6a1b      	ldr	r3, [r3, #32]
 8022782:	9301      	str	r3, [sp, #4]
        plan_data.condition.value = 0;
 8022784:	2300      	movs	r3, #0
 8022786:	9306      	str	r3, [sp, #24]
        plan_data.spindle.state.value = 0;
 8022788:	f88d 300c 	strb.w	r3, [sp, #12]
        set_probe_target(&target, plane.axis_linear);
 802278c:	4b3b      	ldr	r3, [pc, #236]	@ (802287c <execute_probe+0x1a8>)
 802278e:	7899      	ldrb	r1, [r3, #2]
 8022790:	483b      	ldr	r0, [pc, #236]	@ (8022880 <execute_probe+0x1ac>)
 8022792:	f7ff fd8b 	bl	80222ac <set_probe_target>
        if((ok = ok && mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found))
 8022796:	b135      	cbz	r5, 80227a6 <execute_probe+0xd2>
 8022798:	4622      	mov	r2, r4
 802279a:	a901      	add	r1, sp, #4
 802279c:	4838      	ldr	r0, [pc, #224]	@ (8022880 <execute_probe+0x1ac>)
 802279e:	f7f2 fa2b 	bl	8014bf8 <mc_probe_cycle>
 80227a2:	2801      	cmp	r0, #1
 80227a4:	d002      	beq.n	80227ac <execute_probe+0xd8>
    change_completed();
 80227a6:	f7ff fd2f 	bl	8022208 <change_completed>
    if(ok)
 80227aa:	e7ca      	b.n	8022742 <execute_probe+0x6e>
            system_convert_array_steps_to_mpos(target.values, sys.probe_position);
 80227ac:	4d34      	ldr	r5, [pc, #208]	@ (8022880 <execute_probe+0x1ac>)
 80227ae:	4939      	ldr	r1, [pc, #228]	@ (8022894 <execute_probe+0x1c0>)
 80227b0:	4628      	mov	r0, r5
 80227b2:	f7ff fbe1 	bl	8021f78 <system_convert_array_steps_to_mpos>
            plan_data.feed_rate = settings.tool_change.pulloff_rate;
 80227b6:	4b36      	ldr	r3, [pc, #216]	@ (8022890 <execute_probe+0x1bc>)
 80227b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80227ba:	9301      	str	r3, [sp, #4]
            target.values[plane.axis_linear] += TOOL_CHANGE_PROBE_RETRACT_DISTANCE;
 80227bc:	4b2f      	ldr	r3, [pc, #188]	@ (802287c <execute_probe+0x1a8>)
 80227be:	789b      	ldrb	r3, [r3, #2]
 80227c0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80227c4:	edd3 7a00 	vldr	s15, [r3]
 80227c8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80227cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80227d0:	edc3 7a00 	vstr	s15, [r3]
            if((ok = mc_line(target.values, &plan_data))) {
 80227d4:	a901      	add	r1, sp, #4
 80227d6:	4628      	mov	r0, r5
 80227d8:	f7f1 fafe 	bl	8013dd8 <mc_line>
 80227dc:	2800      	cmp	r0, #0
 80227de:	d0e2      	beq.n	80227a6 <execute_probe+0xd2>
                plan_data.feed_rate = settings.tool_change.feed_rate;
 80227e0:	4b2b      	ldr	r3, [pc, #172]	@ (8022890 <execute_probe+0x1bc>)
 80227e2:	69db      	ldr	r3, [r3, #28]
 80227e4:	9301      	str	r3, [sp, #4]
                target.values[plane.axis_linear] -= (TOOL_CHANGE_PROBE_RETRACT_DISTANCE + 2.0f);
 80227e6:	4b25      	ldr	r3, [pc, #148]	@ (802287c <execute_probe+0x1a8>)
 80227e8:	789b      	ldrb	r3, [r3, #2]
 80227ea:	4628      	mov	r0, r5
 80227ec:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80227f0:	edd3 7a00 	vldr	s15, [r3]
 80227f4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80227f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80227fc:	edc3 7a00 	vstr	s15, [r3]
                ok = mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found;
 8022800:	4622      	mov	r2, r4
 8022802:	a901      	add	r1, sp, #4
 8022804:	f7f2 f9f8 	bl	8014bf8 <mc_probe_cycle>
        if(ok) {
 8022808:	2801      	cmp	r0, #1
 802280a:	d1cc      	bne.n	80227a6 <execute_probe+0xd2>
            if(!(sys.tlo_reference_set.mask & bit(plane.axis_linear))) {
 802280c:	4b22      	ldr	r3, [pc, #136]	@ (8022898 <execute_probe+0x1c4>)
 802280e:	79db      	ldrb	r3, [r3, #7]
 8022810:	4a1a      	ldr	r2, [pc, #104]	@ (802287c <execute_probe+0x1a8>)
 8022812:	7891      	ldrb	r1, [r2, #2]
 8022814:	fa23 f201 	lsr.w	r2, r3, r1
 8022818:	f012 0f01 	tst.w	r2, #1
 802281c:	d121      	bne.n	8022862 <execute_probe+0x18e>
                sys.tlo_reference[plane.axis_linear] = sys.probe_position[plane.axis_linear];
 802281e:	4a1e      	ldr	r2, [pc, #120]	@ (8022898 <execute_probe+0x1c4>)
 8022820:	f101 000e 	add.w	r0, r1, #14
 8022824:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8022828:	1c88      	adds	r0, r1, #2
 802282a:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
                sys.tlo_reference_set.mask |= bit(plane.axis_linear);
 802282e:	2001      	movs	r0, #1
 8022830:	4088      	lsls	r0, r1
 8022832:	4303      	orrs	r3, r0
 8022834:	71d3      	strb	r3, [r2, #7]
                system_add_rt_report(Report_TLOReference);
 8022836:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 802283a:	f7ff fc41 	bl	80220c0 <system_add_rt_report>
                grbl.report.feedback_message(Message_ReferenceTLOEstablished);
 802283e:	4b12      	ldr	r3, [pc, #72]	@ (8022888 <execute_probe+0x1b4>)
 8022840:	68db      	ldr	r3, [r3, #12]
 8022842:	200f      	movs	r0, #15
 8022844:	4798      	blx	r3
            ok = restore();
 8022846:	f7ff fe91 	bl	802256c <restore>
 802284a:	4604      	mov	r4, r0
    change_completed();
 802284c:	f7ff fcdc 	bl	8022208 <change_completed>
    if(ok)
 8022850:	2c00      	cmp	r4, #0
 8022852:	f43f af76 	beq.w	8022742 <execute_probe+0x6e>
        system_set_exec_state_flag(EXEC_CYCLE_START);
 8022856:	4b11      	ldr	r3, [pc, #68]	@ (802289c <execute_probe+0x1c8>)
 8022858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802285a:	2102      	movs	r1, #2
 802285c:	4810      	ldr	r0, [pc, #64]	@ (80228a0 <execute_probe+0x1cc>)
 802285e:	4798      	blx	r3
}
 8022860:	e76f      	b.n	8022742 <execute_probe+0x6e>
                                    sys.probe_position[plane.axis_linear] - sys.tlo_reference[plane.axis_linear]);
 8022862:	4b0d      	ldr	r3, [pc, #52]	@ (8022898 <execute_probe+0x1c4>)
 8022864:	f101 020e 	add.w	r2, r1, #14
 8022868:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802286c:	1c88      	adds	r0, r1, #2
 802286e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
                gc_set_tool_offset(ToolLengthOffset_EnableDynamic, plane.axis_linear,
 8022872:	1ad2      	subs	r2, r2, r3
 8022874:	2002      	movs	r0, #2
 8022876:	f7ea fe87 	bl	800d588 <gc_set_tool_offset>
 802287a:	e7e4      	b.n	8022846 <execute_probe+0x172>
 802287c:	20002ef0 	.word	0x20002ef0
 8022880:	20002ee4 	.word	0x20002ee4
 8022884:	20002f15 	.word	0x20002f15
 8022888:	20001ac4 	.word	0x20001ac4
 802288c:	20002ef4 	.word	0x20002ef4
 8022890:	200022f4 	.word	0x200022f4
 8022894:	20001bf4 	.word	0x20001bf4
 8022898:	20001bbc 	.word	0x20001bbc
 802289c:	200018dc 	.word	0x200018dc
 80228a0:	20001c04 	.word	0x20001c04

080228a4 <tool_change>:

// Start a tool change sequence. Called by gcode.c on a M6 command (via HAL).
static status_code_t tool_change (parser_state_t *parser_state)
{
    if(next_tool == NULL)
 80228a4:	4b6f      	ldr	r3, [pc, #444]	@ (8022a64 <tool_change+0x1c0>)
 80228a6:	681b      	ldr	r3, [r3, #0]
 80228a8:	2b00      	cmp	r3, #0
 80228aa:	f000 80cd 	beq.w	8022a48 <tool_change+0x1a4>
{
 80228ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80228b0:	b08b      	sub	sp, #44	@ 0x2c
 80228b2:	4604      	mov	r4, r0
        return Status_GCodeToolError;

    if(current_tool.tool_id == next_tool->tool_id)
 80228b4:	4a6c      	ldr	r2, [pc, #432]	@ (8022a68 <tool_change+0x1c4>)
 80228b6:	6912      	ldr	r2, [r2, #16]
 80228b8:	691b      	ldr	r3, [r3, #16]
 80228ba:	429a      	cmp	r2, r3
 80228bc:	f000 80c6 	beq.w	8022a4c <tool_change+0x1a8>
  #else
    plane.axis_0 = X_AXIS;
    plane.axis_1 = Y_AXIS;
  #endif
#else
    gc_get_plane_data(&plane, parser_state->modal.plane_select);
 80228c0:	7981      	ldrb	r1, [r0, #6]
 80228c2:	486a      	ldr	r0, [pc, #424]	@ (8022a6c <tool_change+0x1c8>)
 80228c4:	f7ea fec6 	bl	800d654 <gc_get_plane_data>
#endif

    uint8_t homed_req = settings.tool_change.mode == ToolChange_Manual ? bit(plane.axis_linear) : (X_AXIS_BIT|Y_AXIS_BIT|Z_AXIS_BIT);
 80228c8:	4b69      	ldr	r3, [pc, #420]	@ (8022a70 <tool_change+0x1cc>)
 80228ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80228ce:	2b01      	cmp	r3, #1
 80228d0:	d07b      	beq.n	80229ca <tool_change+0x126>
 80228d2:	2207      	movs	r2, #7

    if((sys.homed.mask & homed_req) != homed_req)
 80228d4:	4967      	ldr	r1, [pc, #412]	@ (8022a74 <tool_change+0x1d0>)
 80228d6:	f891 1054 	ldrb.w	r1, [r1, #84]	@ 0x54
 80228da:	438a      	bics	r2, r1
 80228dc:	f040 80b9 	bne.w	8022a52 <tool_change+0x1ae>
        return Status_HomingRequired;

    if(settings.tool_change.mode != ToolChange_SemiAutomatic)
 80228e0:	2b03      	cmp	r3, #3
 80228e2:	d003      	beq.n	80228ec <tool_change+0x48>
        grbl.on_probe_completed = on_probe_completed;
 80228e4:	4a64      	ldr	r2, [pc, #400]	@ (8022a78 <tool_change+0x1d4>)
 80228e6:	4965      	ldr	r1, [pc, #404]	@ (8022a7c <tool_change+0x1d8>)
 80228e8:	f8c2 10a4 	str.w	r1, [r2, #164]	@ 0xa4

    block_cycle_start = settings.tool_change.mode != ToolChange_SemiAutomatic;
 80228ec:	3b03      	subs	r3, #3
 80228ee:	bf18      	it	ne
 80228f0:	2301      	movne	r3, #1
 80228f2:	4a63      	ldr	r2, [pc, #396]	@ (8022a80 <tool_change+0x1dc>)
 80228f4:	7013      	strb	r3, [r2, #0]

    // Stop spindle and coolant.
    spindle_all_off();
 80228f6:	f7fc f983 	bl	801ec00 <spindle_all_off>
    hal.coolant.set_state((coolant_state_t){0});
 80228fa:	4b62      	ldr	r3, [pc, #392]	@ (8022a84 <tool_change+0x1e0>)
 80228fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80228fe:	2500      	movs	r5, #0
 8022900:	4628      	mov	r0, r5
 8022902:	4798      	blx	r3

    execute_posted = false;
 8022904:	4b60      	ldr	r3, [pc, #384]	@ (8022a88 <tool_change+0x1e4>)
 8022906:	701d      	strb	r5, [r3, #0]
    probe_toolsetter = grbl.on_probe_toolsetter != NULL &&
 8022908:	4b5b      	ldr	r3, [pc, #364]	@ (8022a78 <tool_change+0x1d4>)
 802290a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 802290e:	2b00      	cmp	r3, #0
 8022910:	d061      	beq.n	80229d6 <tool_change+0x132>
                       (settings.tool_change.mode == ToolChange_Manual ||
 8022912:	4b57      	ldr	r3, [pc, #348]	@ (8022a70 <tool_change+0x1cc>)
 8022914:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
                         settings.tool_change.mode == ToolChange_Manual_G59_3 ||
 8022918:	3b01      	subs	r3, #1
 802291a:	b2db      	uxtb	r3, r3
    probe_toolsetter = grbl.on_probe_toolsetter != NULL &&
 802291c:	2b02      	cmp	r3, #2
 802291e:	d95c      	bls.n	80229da <tool_change+0x136>
 8022920:	462a      	mov	r2, r5
 8022922:	4b5a      	ldr	r3, [pc, #360]	@ (8022a8c <tool_change+0x1e8>)
 8022924:	701a      	strb	r2, [r3, #0]
                          settings.tool_change.mode == ToolChange_SemiAutomatic);

    // Save current position.
    system_convert_array_steps_to_mpos(previous.values, sys.position);
 8022926:	4d5a      	ldr	r5, [pc, #360]	@ (8022a90 <tool_change+0x1ec>)
 8022928:	4e5a      	ldr	r6, [pc, #360]	@ (8022a94 <tool_change+0x1f0>)
 802292a:	4629      	mov	r1, r5
 802292c:	4630      	mov	r0, r6
 802292e:	f7ff fb23 	bl	8021f78 <system_convert_array_steps_to_mpos>

    // Establish axis assignments.

    previous.values[plane.axis_linear] -= gc_get_offset(plane.axis_linear, false);
 8022932:	4f4e      	ldr	r7, [pc, #312]	@ (8022a6c <tool_change+0x1c8>)
 8022934:	2100      	movs	r1, #0
 8022936:	78b8      	ldrb	r0, [r7, #2]
 8022938:	f7ea fde6 	bl	800d508 <gc_get_offset>
 802293c:	78bb      	ldrb	r3, [r7, #2]
 802293e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8022942:	edd3 7a00 	vldr	s15, [r3]
 8022946:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802294a:	edc3 7a00 	vstr	s15, [r3]

    plan_line_data_t plan_data;

    plan_data_init(&plan_data);
 802294e:	4668      	mov	r0, sp
 8022950:	f7f4 fba6 	bl	80170a0 <plan_data_init>
    plan_data.condition.rapid_motion = On;
 8022954:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8022958:	f043 0301 	orr.w	r3, r3, #1
 802295c:	f88d 3014 	strb.w	r3, [sp, #20]
    // TODO: add?
    //if(!settings.homing.flags.force_set_origin && bit_istrue(settings.homing.dir_mask.value, bit(plane.axis_linear)))
    //    tool_change_position = ?
    //else

    tool_change_position = sys.home_position[plane.axis_linear]; // - settings.homing.flags.force_set_origin ? LINEAR_AXIS_HOME_OFFSET : 0.0f;
 8022960:	f897 c002 	ldrb.w	ip, [r7, #2]
 8022964:	3d88      	subs	r5, #136	@ 0x88
 8022966:	f10c 0316 	add.w	r3, ip, #22
 802296a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 802296e:	682d      	ldr	r5, [r5, #0]
 8022970:	4b49      	ldr	r3, [pc, #292]	@ (8022a98 <tool_change+0x1f4>)
 8022972:	601d      	str	r5, [r3, #0]

    // Rapid to home position of linear axis.
    memcpy(&target, &previous, sizeof(coord_data_t));
 8022974:	4b49      	ldr	r3, [pc, #292]	@ (8022a9c <tool_change+0x1f8>)
 8022976:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 802297a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    target.values[plane.axis_linear] = tool_change_position;
 802297e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8022982:	f8cc 5000 	str.w	r5, [ip]
    if(!mc_line(target.values, &plan_data))
 8022986:	4669      	mov	r1, sp
 8022988:	4618      	mov	r0, r3
 802298a:	f7f1 fa25 	bl	8013dd8 <mc_line>
 802298e:	2800      	cmp	r0, #0
 8022990:	d061      	beq.n	8022a56 <tool_change+0x1b2>
        return Status_Reset;

#if COMPATIBILITY_LEVEL <= 1
    if(settings.tool_change.mode == ToolChange_Manual_G59_3) {
 8022992:	4b37      	ldr	r3, [pc, #220]	@ (8022a70 <tool_change+0x1cc>)
 8022994:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8022998:	2b02      	cmp	r3, #2
 802299a:	d020      	beq.n	80229de <tool_change+0x13a>
        if(probe_toolsetter)
            grbl.on_probe_toolsetter(next_tool, NULL, true, true);
    }
#endif

    protocol_buffer_synchronize();
 802299c:	f7f5 fb1a 	bl	8017fd4 <protocol_buffer_synchronize>
    sync_position();
 80229a0:	f7f4 fb08 	bl	8016fb4 <plan_sync_position>
 80229a4:	4d3a      	ldr	r5, [pc, #232]	@ (8022a90 <tool_change+0x1ec>)
 80229a6:	4629      	mov	r1, r5
 80229a8:	483d      	ldr	r0, [pc, #244]	@ (8022aa0 <tool_change+0x1fc>)
 80229aa:	f7ff fae5 	bl	8021f78 <system_convert_array_steps_to_mpos>

    // Enter tool change mode, waits for cycle start to continue.
    parser_state->tool_change = true;
 80229ae:	2301      	movs	r3, #1
 80229b0:	f884 307f 	strb.w	r3, [r4, #127]	@ 0x7f
    system_set_exec_state_flag(EXEC_TOOL_CHANGE);   // Set up program pause for manual tool change
 80229b4:	4b33      	ldr	r3, [pc, #204]	@ (8022a84 <tool_change+0x1e0>)
 80229b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80229b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80229bc:	f1a5 0040 	sub.w	r0, r5, #64	@ 0x40
 80229c0:	4798      	blx	r3
    protocol_execute_realtime();                    // Execute...
 80229c2:	f7f5 f839 	bl	8017a38 <protocol_execute_realtime>

    return Status_OK;
 80229c6:	2000      	movs	r0, #0
 80229c8:	e041      	b.n	8022a4e <tool_change+0x1aa>
    uint8_t homed_req = settings.tool_change.mode == ToolChange_Manual ? bit(plane.axis_linear) : (X_AXIS_BIT|Y_AXIS_BIT|Z_AXIS_BIT);
 80229ca:	4a28      	ldr	r2, [pc, #160]	@ (8022a6c <tool_change+0x1c8>)
 80229cc:	7891      	ldrb	r1, [r2, #2]
 80229ce:	2201      	movs	r2, #1
 80229d0:	408a      	lsls	r2, r1
 80229d2:	b2d2      	uxtb	r2, r2
 80229d4:	e77e      	b.n	80228d4 <tool_change+0x30>
    probe_toolsetter = grbl.on_probe_toolsetter != NULL &&
 80229d6:	2200      	movs	r2, #0
 80229d8:	e7a3      	b.n	8022922 <tool_change+0x7e>
 80229da:	2201      	movs	r2, #1
 80229dc:	e7a1      	b.n	8022922 <tool_change+0x7e>
        settings_read_coord_data(CoordinateSystem_G59_3, &target.values);
 80229de:	4d2f      	ldr	r5, [pc, #188]	@ (8022a9c <tool_change+0x1f8>)
 80229e0:	4629      	mov	r1, r5
 80229e2:	2008      	movs	r0, #8
 80229e4:	f7fa ff36 	bl	801d854 <settings_read_coord_data>
        float tmp_pos = target.values[plane.axis_linear];
 80229e8:	78bb      	ldrb	r3, [r7, #2]
 80229ea:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80229ee:	682e      	ldr	r6, [r5, #0]
        target.values[plane.axis_linear] = tool_change_position;
 80229f0:	4b29      	ldr	r3, [pc, #164]	@ (8022a98 <tool_change+0x1f4>)
 80229f2:	681b      	ldr	r3, [r3, #0]
 80229f4:	602b      	str	r3, [r5, #0]
        if(probe_toolsetter)
 80229f6:	4b25      	ldr	r3, [pc, #148]	@ (8022a8c <tool_change+0x1e8>)
 80229f8:	781b      	ldrb	r3, [r3, #0]
 80229fa:	b143      	cbz	r3, 8022a0e <tool_change+0x16a>
            grbl.on_probe_toolsetter(next_tool, &target, false, true);
 80229fc:	4b1e      	ldr	r3, [pc, #120]	@ (8022a78 <tool_change+0x1d4>)
 80229fe:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 8022a02:	2301      	movs	r3, #1
 8022a04:	2200      	movs	r2, #0
 8022a06:	4925      	ldr	r1, [pc, #148]	@ (8022a9c <tool_change+0x1f8>)
 8022a08:	4816      	ldr	r0, [pc, #88]	@ (8022a64 <tool_change+0x1c0>)
 8022a0a:	6800      	ldr	r0, [r0, #0]
 8022a0c:	47a8      	blx	r5
        if(!mc_line(target.values, &plan_data))
 8022a0e:	4669      	mov	r1, sp
 8022a10:	4822      	ldr	r0, [pc, #136]	@ (8022a9c <tool_change+0x1f8>)
 8022a12:	f7f1 f9e1 	bl	8013dd8 <mc_line>
 8022a16:	b300      	cbz	r0, 8022a5a <tool_change+0x1b6>
        target.values[plane.axis_linear] = tmp_pos;
 8022a18:	4b14      	ldr	r3, [pc, #80]	@ (8022a6c <tool_change+0x1c8>)
 8022a1a:	789b      	ldrb	r3, [r3, #2]
 8022a1c:	481f      	ldr	r0, [pc, #124]	@ (8022a9c <tool_change+0x1f8>)
 8022a1e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8022a22:	601e      	str	r6, [r3, #0]
        if(!mc_line(target.values, &plan_data))
 8022a24:	4669      	mov	r1, sp
 8022a26:	f7f1 f9d7 	bl	8013dd8 <mc_line>
 8022a2a:	b1c0      	cbz	r0, 8022a5e <tool_change+0x1ba>
        if(probe_toolsetter)
 8022a2c:	4b17      	ldr	r3, [pc, #92]	@ (8022a8c <tool_change+0x1e8>)
 8022a2e:	781b      	ldrb	r3, [r3, #0]
 8022a30:	2b00      	cmp	r3, #0
 8022a32:	d0b3      	beq.n	802299c <tool_change+0xf8>
            grbl.on_probe_toolsetter(next_tool, NULL, true, true);
 8022a34:	4b10      	ldr	r3, [pc, #64]	@ (8022a78 <tool_change+0x1d4>)
 8022a36:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 8022a3a:	2301      	movs	r3, #1
 8022a3c:	461a      	mov	r2, r3
 8022a3e:	2100      	movs	r1, #0
 8022a40:	4808      	ldr	r0, [pc, #32]	@ (8022a64 <tool_change+0x1c0>)
 8022a42:	6800      	ldr	r0, [r0, #0]
 8022a44:	47a8      	blx	r5
 8022a46:	e7a9      	b.n	802299c <tool_change+0xf8>
        return Status_GCodeToolError;
 8022a48:	202f      	movs	r0, #47	@ 0x2f
}
 8022a4a:	4770      	bx	lr
        return Status_OK;
 8022a4c:	2000      	movs	r0, #0
}
 8022a4e:	b00b      	add	sp, #44	@ 0x2c
 8022a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return Status_HomingRequired;
 8022a52:	202e      	movs	r0, #46	@ 0x2e
 8022a54:	e7fb      	b.n	8022a4e <tool_change+0x1aa>
        return Status_Reset;
 8022a56:	2012      	movs	r0, #18
 8022a58:	e7f9      	b.n	8022a4e <tool_change+0x1aa>
            return Status_Reset;
 8022a5a:	2012      	movs	r0, #18
 8022a5c:	e7f7      	b.n	8022a4e <tool_change+0x1aa>
            return Status_Reset;
 8022a5e:	2012      	movs	r0, #18
 8022a60:	e7f5      	b.n	8022a4e <tool_change+0x1aa>
 8022a62:	bf00      	nop
 8022a64:	20002ef4 	.word	0x20002ef4
 8022a68:	20002ef8 	.word	0x20002ef8
 8022a6c:	20002ef0 	.word	0x20002ef0
 8022a70:	200022f4 	.word	0x200022f4
 8022a74:	20001bbc 	.word	0x20001bbc
 8022a78:	20001ac4 	.word	0x20001ac4
 8022a7c:	08022365 	.word	0x08022365
 8022a80:	20002f16 	.word	0x20002f16
 8022a84:	200018dc 	.word	0x200018dc
 8022a88:	20002f14 	.word	0x20002f14
 8022a8c:	20002f15 	.word	0x20002f15
 8022a90:	20001c44 	.word	0x20001c44
 8022a94:	20002ed8 	.word	0x20002ed8
 8022a98:	20002f0c 	.word	0x20002f0c
 8022a9c:	20002ee4 	.word	0x20002ee4
 8022aa0:	2000167c 	.word	0x2000167c

08022aa4 <tc_init>:

// Claim HAL tool change entry points and clear current tool offsets.
// TODO: change to survive a warm reset?
void tc_init (void)
{
 8022aa4:	b508      	push	{r3, lr}
    static bool on_homing_subscribed = false;

    if(hal.driver_cap.atc) // Do not override driver tool change implementation!
 8022aa6:	4b29      	ldr	r3, [pc, #164]	@ (8022b4c <tc_init+0xa8>)
 8022aa8:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 8022aac:	f013 0f02 	tst.w	r3, #2
 8022ab0:	d14a      	bne.n	8022b48 <tc_init+0xa4>
        return;

    if(!hal.stream.suspend_read) // Tool change requires support for suspending input stream.
 8022ab2:	4b26      	ldr	r3, [pc, #152]	@ (8022b4c <tc_init+0xa8>)
 8022ab4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8022ab8:	2b00      	cmp	r3, #0
 8022aba:	d045      	beq.n	8022b48 <tc_init+0xa4>
        return;

    if(sys.tlo_reference_set.mask != 0) {
 8022abc:	4b24      	ldr	r3, [pc, #144]	@ (8022b50 <tc_init+0xac>)
 8022abe:	79db      	ldrb	r3, [r3, #7]
 8022ac0:	2b00      	cmp	r3, #0
 8022ac2:	d130      	bne.n	8022b26 <tc_init+0x82>
        sys.tlo_reference_set.mask = 0;
        system_add_rt_report(Report_TLOReference);
    }

    gc_set_tool_offset(ToolLengthOffset_Cancel, 0, 0.0f);
 8022ac4:	2200      	movs	r2, #0
 8022ac6:	4611      	mov	r1, r2
 8022ac8:	4610      	mov	r0, r2
 8022aca:	f7ea fd5d 	bl	800d588 <gc_set_tool_offset>

    if(settings.tool_change.mode == ToolChange_Disabled || settings.tool_change.mode == ToolChange_Ignore) {
 8022ace:	4b21      	ldr	r3, [pc, #132]	@ (8022b54 <tc_init+0xb0>)
 8022ad0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8022ad4:	2b00      	cmp	r3, #0
 8022ad6:	d02e      	beq.n	8022b36 <tc_init+0x92>
 8022ad8:	2b04      	cmp	r3, #4
 8022ada:	d02c      	beq.n	8022b36 <tc_init+0x92>
        hal.tool.select = NULL;
        hal.tool.change = NULL;
        grbl.on_toolchange_ack = NULL;
    } else {
        hal.tool.select = tool_select;
 8022adc:	4b1b      	ldr	r3, [pc, #108]	@ (8022b4c <tc_init+0xa8>)
 8022ade:	4a1e      	ldr	r2, [pc, #120]	@ (8022b58 <tc_init+0xb4>)
 8022ae0:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
        hal.tool.change = tool_change;
 8022ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8022b5c <tc_init+0xb8>)
 8022ae6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        grbl.on_toolchange_ack = on_toolchange_ack;
 8022aea:	4b1d      	ldr	r3, [pc, #116]	@ (8022b60 <tc_init+0xbc>)
 8022aec:	4a1d      	ldr	r2, [pc, #116]	@ (8022b64 <tc_init+0xc0>)
 8022aee:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        if(!on_homing_subscribed) {
 8022af2:	4b1d      	ldr	r3, [pc, #116]	@ (8022b68 <tc_init+0xc4>)
 8022af4:	781b      	ldrb	r3, [r3, #0]
 8022af6:	b953      	cbnz	r3, 8022b0e <tc_init+0x6a>
            on_homing_subscribed = true;
 8022af8:	4b1b      	ldr	r3, [pc, #108]	@ (8022b68 <tc_init+0xc4>)
 8022afa:	2201      	movs	r2, #1
 8022afc:	701a      	strb	r2, [r3, #0]
            on_homing_completed = grbl.on_homing_completed;
 8022afe:	4b18      	ldr	r3, [pc, #96]	@ (8022b60 <tc_init+0xbc>)
 8022b00:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8022b04:	4a19      	ldr	r2, [pc, #100]	@ (8022b6c <tc_init+0xc8>)
 8022b06:	6011      	str	r1, [r2, #0]
            grbl.on_homing_completed = tc_on_homing_complete;
 8022b08:	4a19      	ldr	r2, [pc, #100]	@ (8022b70 <tc_init+0xcc>)
 8022b0a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        }
        if(driver_reset == NULL) {
 8022b0e:	4b19      	ldr	r3, [pc, #100]	@ (8022b74 <tc_init+0xd0>)
 8022b10:	681b      	ldr	r3, [r3, #0]
 8022b12:	b9cb      	cbnz	r3, 8022b48 <tc_init+0xa4>
            driver_reset = hal.driver_reset;
 8022b14:	4b0d      	ldr	r3, [pc, #52]	@ (8022b4c <tc_init+0xa8>)
 8022b16:	f8d3 1170 	ldr.w	r1, [r3, #368]	@ 0x170
 8022b1a:	4a16      	ldr	r2, [pc, #88]	@ (8022b74 <tc_init+0xd0>)
 8022b1c:	6011      	str	r1, [r2, #0]
            hal.driver_reset = reset;
 8022b1e:	4a16      	ldr	r2, [pc, #88]	@ (8022b78 <tc_init+0xd4>)
 8022b20:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
 8022b24:	e010      	b.n	8022b48 <tc_init+0xa4>
        sys.tlo_reference_set.mask = 0;
 8022b26:	4b0a      	ldr	r3, [pc, #40]	@ (8022b50 <tc_init+0xac>)
 8022b28:	2200      	movs	r2, #0
 8022b2a:	71da      	strb	r2, [r3, #7]
        system_add_rt_report(Report_TLOReference);
 8022b2c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8022b30:	f7ff fac6 	bl	80220c0 <system_add_rt_report>
 8022b34:	e7c6      	b.n	8022ac4 <tc_init+0x20>
        hal.tool.select = NULL;
 8022b36:	4a05      	ldr	r2, [pc, #20]	@ (8022b4c <tc_init+0xa8>)
 8022b38:	2300      	movs	r3, #0
 8022b3a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
        hal.tool.change = NULL;
 8022b3e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
        grbl.on_toolchange_ack = NULL;
 8022b42:	4a07      	ldr	r2, [pc, #28]	@ (8022b60 <tc_init+0xbc>)
 8022b44:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
        }
    }
}
 8022b48:	bd08      	pop	{r3, pc}
 8022b4a:	bf00      	nop
 8022b4c:	200018dc 	.word	0x200018dc
 8022b50:	20001bbc 	.word	0x20001bbc
 8022b54:	200022f4 	.word	0x200022f4
 8022b58:	08022429 	.word	0x08022429
 8022b5c:	080228a5 	.word	0x080228a5
 8022b60:	20001ac4 	.word	0x20001ac4
 8022b64:	08022335 	.word	0x08022335
 8022b68:	20002ec4 	.word	0x20002ec4
 8022b6c:	20002ec8 	.word	0x20002ec8
 8022b70:	08022451 	.word	0x08022451
 8022b74:	20002ed4 	.word	0x20002ed4
 8022b78:	080223b1 	.word	0x080223b1

08022b7c <tc_probe_workpiece>:
// Perform a probe cycle: set tool length offset and restart job if successful.
// Note: tool length offset is set by the on_probe_completed event handler.
// Called by the $TPW system command.
status_code_t tc_probe_workpiece (void)
{
    if(!(settings.tool_change.mode == ToolChange_Manual || settings.tool_change.mode == ToolChange_Manual_G59_3) || enqueue_realtime_command == NULL)
 8022b7c:	4b5d      	ldr	r3, [pc, #372]	@ (8022cf4 <tc_probe_workpiece+0x178>)
 8022b7e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8022b82:	3b01      	subs	r3, #1
 8022b84:	b2db      	uxtb	r3, r3
 8022b86:	2b01      	cmp	r3, #1
 8022b88:	f200 80ad 	bhi.w	8022ce6 <tc_probe_workpiece+0x16a>
 8022b8c:	4b5a      	ldr	r3, [pc, #360]	@ (8022cf8 <tc_probe_workpiece+0x17c>)
 8022b8e:	681b      	ldr	r3, [r3, #0]
 8022b90:	2b00      	cmp	r3, #0
 8022b92:	f000 80aa 	beq.w	8022cea <tc_probe_workpiece+0x16e>
{
 8022b96:	b530      	push	{r4, r5, lr}
 8022b98:	b08b      	sub	sp, #44	@ 0x2c
    bool ok;
    gc_parser_flags_t flags = {0};
    plan_line_data_t plan_data;

#if COMPATIBILITY_LEVEL <= 1
    if(probe_toolsetter)
 8022b9a:	4b58      	ldr	r3, [pc, #352]	@ (8022cfc <tc_probe_workpiece+0x180>)
 8022b9c:	781b      	ldrb	r3, [r3, #0]
 8022b9e:	b9fb      	cbnz	r3, 8022be0 <tc_probe_workpiece+0x64>
        grbl.on_probe_toolsetter(next_tool, NULL, system_xy_at_fixture(CoordinateSystem_G59_3, TOOLSETTER_RADIUS), true);
#endif

    // Get current position.
    system_convert_array_steps_to_mpos(target.values, sys.position);
 8022ba0:	4c57      	ldr	r4, [pc, #348]	@ (8022d00 <tc_probe_workpiece+0x184>)
 8022ba2:	4958      	ldr	r1, [pc, #352]	@ (8022d04 <tc_probe_workpiece+0x188>)
 8022ba4:	4620      	mov	r0, r4
 8022ba6:	f7ff f9e7 	bl	8021f78 <system_convert_array_steps_to_mpos>

    flags.probe_is_no_error = On;
 8022baa:	2510      	movs	r5, #16

    plan_data_init(&plan_data);
 8022bac:	4668      	mov	r0, sp
 8022bae:	f7f4 fa77 	bl	80170a0 <plan_data_init>
    plan_data.feed_rate = settings.tool_change.seek_rate;
 8022bb2:	4b50      	ldr	r3, [pc, #320]	@ (8022cf4 <tc_probe_workpiece+0x178>)
 8022bb4:	6a1b      	ldr	r3, [r3, #32]
 8022bb6:	9300      	str	r3, [sp, #0]

    set_probe_target(&target, plane.axis_linear);
 8022bb8:	4b53      	ldr	r3, [pc, #332]	@ (8022d08 <tc_probe_workpiece+0x18c>)
 8022bba:	7899      	ldrb	r1, [r3, #2]
 8022bbc:	4620      	mov	r0, r4
 8022bbe:	f7ff fb75 	bl	80222ac <set_probe_target>

    if((ok = mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found))
 8022bc2:	462a      	mov	r2, r5
 8022bc4:	4669      	mov	r1, sp
 8022bc6:	4620      	mov	r0, r4
 8022bc8:	f7f2 f816 	bl	8014bf8 <mc_probe_cycle>
 8022bcc:	2801      	cmp	r0, #1
 8022bce:	bf0c      	ite	eq
 8022bd0:	2401      	moveq	r4, #1
 8022bd2:	2400      	movne	r4, #0
 8022bd4:	d014      	beq.n	8022c00 <tc_probe_workpiece+0x84>
                ok = mc_line(target.values, &plan_data);
            }
        }
    }

    if(ok && protocol_buffer_synchronize()) {
 8022bd6:	2c00      	cmp	r4, #0
 8022bd8:	d16a      	bne.n	8022cb0 <tc_probe_workpiece+0x134>
        grbl.report.feedback_message(settings.tool_change.mode == ToolChange_Manual_G59_3
                                      ? Message_CycleStart2Continue
                                      : Message_TPCycleStart2Continue);
    }

    return ok ? Status_OK : Status_GCodeToolError;
 8022bda:	202f      	movs	r0, #47	@ 0x2f
}
 8022bdc:	b00b      	add	sp, #44	@ 0x2c
 8022bde:	bd30      	pop	{r4, r5, pc}
        grbl.on_probe_toolsetter(next_tool, NULL, system_xy_at_fixture(CoordinateSystem_G59_3, TOOLSETTER_RADIUS), true);
 8022be0:	4b4a      	ldr	r3, [pc, #296]	@ (8022d0c <tc_probe_workpiece+0x190>)
 8022be2:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 8022be6:	4b4a      	ldr	r3, [pc, #296]	@ (8022d10 <tc_probe_workpiece+0x194>)
 8022be8:	681d      	ldr	r5, [r3, #0]
 8022bea:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8022bee:	2008      	movs	r0, #8
 8022bf0:	f7ff f9e0 	bl	8021fb4 <system_xy_at_fixture>
 8022bf4:	4602      	mov	r2, r0
 8022bf6:	2301      	movs	r3, #1
 8022bf8:	2100      	movs	r1, #0
 8022bfa:	4628      	mov	r0, r5
 8022bfc:	47a0      	blx	r4
 8022bfe:	e7cf      	b.n	8022ba0 <tc_probe_workpiece+0x24>
        system_convert_array_steps_to_mpos(target.values, sys.probe_position);
 8022c00:	4c3f      	ldr	r4, [pc, #252]	@ (8022d00 <tc_probe_workpiece+0x184>)
 8022c02:	4944      	ldr	r1, [pc, #272]	@ (8022d14 <tc_probe_workpiece+0x198>)
 8022c04:	4620      	mov	r0, r4
 8022c06:	f7ff f9b7 	bl	8021f78 <system_convert_array_steps_to_mpos>
        plan_data.feed_rate = settings.tool_change.pulloff_rate;
 8022c0a:	4b3a      	ldr	r3, [pc, #232]	@ (8022cf4 <tc_probe_workpiece+0x178>)
 8022c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022c0e:	9300      	str	r3, [sp, #0]
        target.values[plane.axis_linear] += TOOL_CHANGE_PROBE_RETRACT_DISTANCE;
 8022c10:	4b3d      	ldr	r3, [pc, #244]	@ (8022d08 <tc_probe_workpiece+0x18c>)
 8022c12:	789b      	ldrb	r3, [r3, #2]
 8022c14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8022c18:	edd3 7a00 	vldr	s15, [r3]
 8022c1c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8022c20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022c24:	edc3 7a00 	vstr	s15, [r3]
        if((ok = mc_line(target.values, &plan_data))) {
 8022c28:	4669      	mov	r1, sp
 8022c2a:	4620      	mov	r0, r4
 8022c2c:	f7f1 f8d4 	bl	8013dd8 <mc_line>
 8022c30:	4604      	mov	r4, r0
 8022c32:	2800      	cmp	r0, #0
 8022c34:	d03f      	beq.n	8022cb6 <tc_probe_workpiece+0x13a>
            plan_data.feed_rate = settings.tool_change.feed_rate;
 8022c36:	4b2f      	ldr	r3, [pc, #188]	@ (8022cf4 <tc_probe_workpiece+0x178>)
 8022c38:	69db      	ldr	r3, [r3, #28]
 8022c3a:	9300      	str	r3, [sp, #0]
            target.values[plane.axis_linear] -= (TOOL_CHANGE_PROBE_RETRACT_DISTANCE + 2.0f);
 8022c3c:	4b32      	ldr	r3, [pc, #200]	@ (8022d08 <tc_probe_workpiece+0x18c>)
 8022c3e:	789b      	ldrb	r3, [r3, #2]
 8022c40:	482f      	ldr	r0, [pc, #188]	@ (8022d00 <tc_probe_workpiece+0x184>)
 8022c42:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8022c46:	edd3 7a00 	vldr	s15, [r3]
 8022c4a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8022c4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022c52:	edc3 7a00 	vstr	s15, [r3]
            if((ok = mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found)) {
 8022c56:	462a      	mov	r2, r5
 8022c58:	4669      	mov	r1, sp
 8022c5a:	f7f1 ffcd 	bl	8014bf8 <mc_probe_cycle>
 8022c5e:	2801      	cmp	r0, #1
 8022c60:	bf0c      	ite	eq
 8022c62:	2401      	moveq	r4, #1
 8022c64:	2400      	movne	r4, #0
 8022c66:	d1b6      	bne.n	8022bd6 <tc_probe_workpiece+0x5a>
                system_convert_array_steps_to_mpos(target.values, sys.probe_position);
 8022c68:	4c25      	ldr	r4, [pc, #148]	@ (8022d00 <tc_probe_workpiece+0x184>)
 8022c6a:	492a      	ldr	r1, [pc, #168]	@ (8022d14 <tc_probe_workpiece+0x198>)
 8022c6c:	4620      	mov	r0, r4
 8022c6e:	f7ff f983 	bl	8021f78 <system_convert_array_steps_to_mpos>
                plan_data.feed_rate = settings.tool_change.seek_rate;
 8022c72:	4b20      	ldr	r3, [pc, #128]	@ (8022cf4 <tc_probe_workpiece+0x178>)
 8022c74:	6a1b      	ldr	r3, [r3, #32]
 8022c76:	9300      	str	r3, [sp, #0]
                target.values[plane.axis_linear] += TOOL_CHANGE_PROBE_RETRACT_DISTANCE * 2.0f;
 8022c78:	4b23      	ldr	r3, [pc, #140]	@ (8022d08 <tc_probe_workpiece+0x18c>)
 8022c7a:	789b      	ldrb	r3, [r3, #2]
 8022c7c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8022c80:	edd4 7a00 	vldr	s15, [r4]
 8022c84:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8022c88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022c8c:	edc4 7a00 	vstr	s15, [r4]
                if(target.values[plane.axis_linear] > tool_change_position)
 8022c90:	4a21      	ldr	r2, [pc, #132]	@ (8022d18 <tc_probe_workpiece+0x19c>)
 8022c92:	ed92 7a00 	vldr	s14, [r2]
 8022c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022c9e:	dd01      	ble.n	8022ca4 <tc_probe_workpiece+0x128>
                    target.values[plane.axis_linear] = tool_change_position;
 8022ca0:	ed84 7a00 	vstr	s14, [r4]
                ok = mc_line(target.values, &plan_data);
 8022ca4:	4669      	mov	r1, sp
 8022ca6:	4816      	ldr	r0, [pc, #88]	@ (8022d00 <tc_probe_workpiece+0x184>)
 8022ca8:	f7f1 f896 	bl	8013dd8 <mc_line>
 8022cac:	4604      	mov	r4, r0
 8022cae:	e792      	b.n	8022bd6 <tc_probe_workpiece+0x5a>
    if(ok && protocol_buffer_synchronize()) {
 8022cb0:	f7f5 f990 	bl	8017fd4 <protocol_buffer_synchronize>
 8022cb4:	b910      	cbnz	r0, 8022cbc <tc_probe_workpiece+0x140>
    return ok ? Status_OK : Status_GCodeToolError;
 8022cb6:	b1d4      	cbz	r4, 8022cee <tc_probe_workpiece+0x172>
 8022cb8:	2000      	movs	r0, #0
 8022cba:	e78f      	b.n	8022bdc <tc_probe_workpiece+0x60>
        sync_position();
 8022cbc:	f7f4 f97a 	bl	8016fb4 <plan_sync_position>
 8022cc0:	4910      	ldr	r1, [pc, #64]	@ (8022d04 <tc_probe_workpiece+0x188>)
 8022cc2:	4816      	ldr	r0, [pc, #88]	@ (8022d1c <tc_probe_workpiece+0x1a0>)
 8022cc4:	f7ff f958 	bl	8021f78 <system_convert_array_steps_to_mpos>
        block_cycle_start = false;
 8022cc8:	4b15      	ldr	r3, [pc, #84]	@ (8022d20 <tc_probe_workpiece+0x1a4>)
 8022cca:	2200      	movs	r2, #0
 8022ccc:	701a      	strb	r2, [r3, #0]
        grbl.report.feedback_message(settings.tool_change.mode == ToolChange_Manual_G59_3
 8022cce:	4b0f      	ldr	r3, [pc, #60]	@ (8022d0c <tc_probe_workpiece+0x190>)
 8022cd0:	68db      	ldr	r3, [r3, #12]
 8022cd2:	4a08      	ldr	r2, [pc, #32]	@ (8022cf4 <tc_probe_workpiece+0x178>)
 8022cd4:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8022cd8:	2a02      	cmp	r2, #2
 8022cda:	d002      	beq.n	8022ce2 <tc_probe_workpiece+0x166>
 8022cdc:	2012      	movs	r0, #18
 8022cde:	4798      	blx	r3
 8022ce0:	e7e9      	b.n	8022cb6 <tc_probe_workpiece+0x13a>
 8022ce2:	2011      	movs	r0, #17
 8022ce4:	e7fb      	b.n	8022cde <tc_probe_workpiece+0x162>
        return Status_InvalidStatement;
 8022ce6:	2003      	movs	r0, #3
 8022ce8:	4770      	bx	lr
 8022cea:	2003      	movs	r0, #3
}
 8022cec:	4770      	bx	lr
    return ok ? Status_OK : Status_GCodeToolError;
 8022cee:	202f      	movs	r0, #47	@ 0x2f
 8022cf0:	e774      	b.n	8022bdc <tc_probe_workpiece+0x60>
 8022cf2:	bf00      	nop
 8022cf4:	200022f4 	.word	0x200022f4
 8022cf8:	20002ed0 	.word	0x20002ed0
 8022cfc:	20002f15 	.word	0x20002f15
 8022d00:	20002ee4 	.word	0x20002ee4
 8022d04:	20001c44 	.word	0x20001c44
 8022d08:	20002ef0 	.word	0x20002ef0
 8022d0c:	20001ac4 	.word	0x20001ac4
 8022d10:	20002ef4 	.word	0x20002ef4
 8022d14:	20001bf4 	.word	0x20001bf4
 8022d18:	20002f0c 	.word	0x20002f0c
 8022d1c:	2000167c 	.word	0x2000167c
 8022d20:	20002f16 	.word	0x20002f16

08022d24 <__assert_func>:
 8022d24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022d26:	4614      	mov	r4, r2
 8022d28:	461a      	mov	r2, r3
 8022d2a:	4b09      	ldr	r3, [pc, #36]	@ (8022d50 <__assert_func+0x2c>)
 8022d2c:	681b      	ldr	r3, [r3, #0]
 8022d2e:	4605      	mov	r5, r0
 8022d30:	68d8      	ldr	r0, [r3, #12]
 8022d32:	b954      	cbnz	r4, 8022d4a <__assert_func+0x26>
 8022d34:	4b07      	ldr	r3, [pc, #28]	@ (8022d54 <__assert_func+0x30>)
 8022d36:	461c      	mov	r4, r3
 8022d38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022d3c:	9100      	str	r1, [sp, #0]
 8022d3e:	462b      	mov	r3, r5
 8022d40:	4905      	ldr	r1, [pc, #20]	@ (8022d58 <__assert_func+0x34>)
 8022d42:	f002 f833 	bl	8024dac <fiprintf>
 8022d46:	f002 fa6d 	bl	8025224 <abort>
 8022d4a:	4b04      	ldr	r3, [pc, #16]	@ (8022d5c <__assert_func+0x38>)
 8022d4c:	e7f4      	b.n	8022d38 <__assert_func+0x14>
 8022d4e:	bf00      	nop
 8022d50:	2000062c 	.word	0x2000062c
 8022d54:	080317cb 	.word	0x080317cb
 8022d58:	0803179d 	.word	0x0803179d
 8022d5c:	08031790 	.word	0x08031790

08022d60 <calloc>:
 8022d60:	4b02      	ldr	r3, [pc, #8]	@ (8022d6c <calloc+0xc>)
 8022d62:	460a      	mov	r2, r1
 8022d64:	4601      	mov	r1, r0
 8022d66:	6818      	ldr	r0, [r3, #0]
 8022d68:	f000 b802 	b.w	8022d70 <_calloc_r>
 8022d6c:	2000062c 	.word	0x2000062c

08022d70 <_calloc_r>:
 8022d70:	b570      	push	{r4, r5, r6, lr}
 8022d72:	fba1 5402 	umull	r5, r4, r1, r2
 8022d76:	b93c      	cbnz	r4, 8022d88 <_calloc_r+0x18>
 8022d78:	4629      	mov	r1, r5
 8022d7a:	f000 f83f 	bl	8022dfc <_malloc_r>
 8022d7e:	4606      	mov	r6, r0
 8022d80:	b928      	cbnz	r0, 8022d8e <_calloc_r+0x1e>
 8022d82:	2600      	movs	r6, #0
 8022d84:	4630      	mov	r0, r6
 8022d86:	bd70      	pop	{r4, r5, r6, pc}
 8022d88:	220c      	movs	r2, #12
 8022d8a:	6002      	str	r2, [r0, #0]
 8022d8c:	e7f9      	b.n	8022d82 <_calloc_r+0x12>
 8022d8e:	462a      	mov	r2, r5
 8022d90:	4621      	mov	r1, r4
 8022d92:	f002 f8c8 	bl	8024f26 <memset>
 8022d96:	e7f5      	b.n	8022d84 <_calloc_r+0x14>

08022d98 <malloc>:
 8022d98:	4b02      	ldr	r3, [pc, #8]	@ (8022da4 <malloc+0xc>)
 8022d9a:	4601      	mov	r1, r0
 8022d9c:	6818      	ldr	r0, [r3, #0]
 8022d9e:	f000 b82d 	b.w	8022dfc <_malloc_r>
 8022da2:	bf00      	nop
 8022da4:	2000062c 	.word	0x2000062c

08022da8 <free>:
 8022da8:	4b02      	ldr	r3, [pc, #8]	@ (8022db4 <free+0xc>)
 8022daa:	4601      	mov	r1, r0
 8022dac:	6818      	ldr	r0, [r3, #0]
 8022dae:	f003 b88f 	b.w	8025ed0 <_free_r>
 8022db2:	bf00      	nop
 8022db4:	2000062c 	.word	0x2000062c

08022db8 <sbrk_aligned>:
 8022db8:	b570      	push	{r4, r5, r6, lr}
 8022dba:	4e0f      	ldr	r6, [pc, #60]	@ (8022df8 <sbrk_aligned+0x40>)
 8022dbc:	460c      	mov	r4, r1
 8022dbe:	6831      	ldr	r1, [r6, #0]
 8022dc0:	4605      	mov	r5, r0
 8022dc2:	b911      	cbnz	r1, 8022dca <sbrk_aligned+0x12>
 8022dc4:	f002 f9b8 	bl	8025138 <_sbrk_r>
 8022dc8:	6030      	str	r0, [r6, #0]
 8022dca:	4621      	mov	r1, r4
 8022dcc:	4628      	mov	r0, r5
 8022dce:	f002 f9b3 	bl	8025138 <_sbrk_r>
 8022dd2:	1c43      	adds	r3, r0, #1
 8022dd4:	d103      	bne.n	8022dde <sbrk_aligned+0x26>
 8022dd6:	f04f 34ff 	mov.w	r4, #4294967295
 8022dda:	4620      	mov	r0, r4
 8022ddc:	bd70      	pop	{r4, r5, r6, pc}
 8022dde:	1cc4      	adds	r4, r0, #3
 8022de0:	f024 0403 	bic.w	r4, r4, #3
 8022de4:	42a0      	cmp	r0, r4
 8022de6:	d0f8      	beq.n	8022dda <sbrk_aligned+0x22>
 8022de8:	1a21      	subs	r1, r4, r0
 8022dea:	4628      	mov	r0, r5
 8022dec:	f002 f9a4 	bl	8025138 <_sbrk_r>
 8022df0:	3001      	adds	r0, #1
 8022df2:	d1f2      	bne.n	8022dda <sbrk_aligned+0x22>
 8022df4:	e7ef      	b.n	8022dd6 <sbrk_aligned+0x1e>
 8022df6:	bf00      	nop
 8022df8:	20002f18 	.word	0x20002f18

08022dfc <_malloc_r>:
 8022dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022e00:	1ccd      	adds	r5, r1, #3
 8022e02:	f025 0503 	bic.w	r5, r5, #3
 8022e06:	3508      	adds	r5, #8
 8022e08:	2d0c      	cmp	r5, #12
 8022e0a:	bf38      	it	cc
 8022e0c:	250c      	movcc	r5, #12
 8022e0e:	2d00      	cmp	r5, #0
 8022e10:	4606      	mov	r6, r0
 8022e12:	db01      	blt.n	8022e18 <_malloc_r+0x1c>
 8022e14:	42a9      	cmp	r1, r5
 8022e16:	d904      	bls.n	8022e22 <_malloc_r+0x26>
 8022e18:	230c      	movs	r3, #12
 8022e1a:	6033      	str	r3, [r6, #0]
 8022e1c:	2000      	movs	r0, #0
 8022e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022e22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022ef8 <_malloc_r+0xfc>
 8022e26:	f000 f869 	bl	8022efc <__malloc_lock>
 8022e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8022e2e:	461c      	mov	r4, r3
 8022e30:	bb44      	cbnz	r4, 8022e84 <_malloc_r+0x88>
 8022e32:	4629      	mov	r1, r5
 8022e34:	4630      	mov	r0, r6
 8022e36:	f7ff ffbf 	bl	8022db8 <sbrk_aligned>
 8022e3a:	1c43      	adds	r3, r0, #1
 8022e3c:	4604      	mov	r4, r0
 8022e3e:	d158      	bne.n	8022ef2 <_malloc_r+0xf6>
 8022e40:	f8d8 4000 	ldr.w	r4, [r8]
 8022e44:	4627      	mov	r7, r4
 8022e46:	2f00      	cmp	r7, #0
 8022e48:	d143      	bne.n	8022ed2 <_malloc_r+0xd6>
 8022e4a:	2c00      	cmp	r4, #0
 8022e4c:	d04b      	beq.n	8022ee6 <_malloc_r+0xea>
 8022e4e:	6823      	ldr	r3, [r4, #0]
 8022e50:	4639      	mov	r1, r7
 8022e52:	4630      	mov	r0, r6
 8022e54:	eb04 0903 	add.w	r9, r4, r3
 8022e58:	f002 f96e 	bl	8025138 <_sbrk_r>
 8022e5c:	4581      	cmp	r9, r0
 8022e5e:	d142      	bne.n	8022ee6 <_malloc_r+0xea>
 8022e60:	6821      	ldr	r1, [r4, #0]
 8022e62:	1a6d      	subs	r5, r5, r1
 8022e64:	4629      	mov	r1, r5
 8022e66:	4630      	mov	r0, r6
 8022e68:	f7ff ffa6 	bl	8022db8 <sbrk_aligned>
 8022e6c:	3001      	adds	r0, #1
 8022e6e:	d03a      	beq.n	8022ee6 <_malloc_r+0xea>
 8022e70:	6823      	ldr	r3, [r4, #0]
 8022e72:	442b      	add	r3, r5
 8022e74:	6023      	str	r3, [r4, #0]
 8022e76:	f8d8 3000 	ldr.w	r3, [r8]
 8022e7a:	685a      	ldr	r2, [r3, #4]
 8022e7c:	bb62      	cbnz	r2, 8022ed8 <_malloc_r+0xdc>
 8022e7e:	f8c8 7000 	str.w	r7, [r8]
 8022e82:	e00f      	b.n	8022ea4 <_malloc_r+0xa8>
 8022e84:	6822      	ldr	r2, [r4, #0]
 8022e86:	1b52      	subs	r2, r2, r5
 8022e88:	d420      	bmi.n	8022ecc <_malloc_r+0xd0>
 8022e8a:	2a0b      	cmp	r2, #11
 8022e8c:	d917      	bls.n	8022ebe <_malloc_r+0xc2>
 8022e8e:	1961      	adds	r1, r4, r5
 8022e90:	42a3      	cmp	r3, r4
 8022e92:	6025      	str	r5, [r4, #0]
 8022e94:	bf18      	it	ne
 8022e96:	6059      	strne	r1, [r3, #4]
 8022e98:	6863      	ldr	r3, [r4, #4]
 8022e9a:	bf08      	it	eq
 8022e9c:	f8c8 1000 	streq.w	r1, [r8]
 8022ea0:	5162      	str	r2, [r4, r5]
 8022ea2:	604b      	str	r3, [r1, #4]
 8022ea4:	4630      	mov	r0, r6
 8022ea6:	f000 f82f 	bl	8022f08 <__malloc_unlock>
 8022eaa:	f104 000b 	add.w	r0, r4, #11
 8022eae:	1d23      	adds	r3, r4, #4
 8022eb0:	f020 0007 	bic.w	r0, r0, #7
 8022eb4:	1ac2      	subs	r2, r0, r3
 8022eb6:	bf1c      	itt	ne
 8022eb8:	1a1b      	subne	r3, r3, r0
 8022eba:	50a3      	strne	r3, [r4, r2]
 8022ebc:	e7af      	b.n	8022e1e <_malloc_r+0x22>
 8022ebe:	6862      	ldr	r2, [r4, #4]
 8022ec0:	42a3      	cmp	r3, r4
 8022ec2:	bf0c      	ite	eq
 8022ec4:	f8c8 2000 	streq.w	r2, [r8]
 8022ec8:	605a      	strne	r2, [r3, #4]
 8022eca:	e7eb      	b.n	8022ea4 <_malloc_r+0xa8>
 8022ecc:	4623      	mov	r3, r4
 8022ece:	6864      	ldr	r4, [r4, #4]
 8022ed0:	e7ae      	b.n	8022e30 <_malloc_r+0x34>
 8022ed2:	463c      	mov	r4, r7
 8022ed4:	687f      	ldr	r7, [r7, #4]
 8022ed6:	e7b6      	b.n	8022e46 <_malloc_r+0x4a>
 8022ed8:	461a      	mov	r2, r3
 8022eda:	685b      	ldr	r3, [r3, #4]
 8022edc:	42a3      	cmp	r3, r4
 8022ede:	d1fb      	bne.n	8022ed8 <_malloc_r+0xdc>
 8022ee0:	2300      	movs	r3, #0
 8022ee2:	6053      	str	r3, [r2, #4]
 8022ee4:	e7de      	b.n	8022ea4 <_malloc_r+0xa8>
 8022ee6:	230c      	movs	r3, #12
 8022ee8:	6033      	str	r3, [r6, #0]
 8022eea:	4630      	mov	r0, r6
 8022eec:	f000 f80c 	bl	8022f08 <__malloc_unlock>
 8022ef0:	e794      	b.n	8022e1c <_malloc_r+0x20>
 8022ef2:	6005      	str	r5, [r0, #0]
 8022ef4:	e7d6      	b.n	8022ea4 <_malloc_r+0xa8>
 8022ef6:	bf00      	nop
 8022ef8:	20002f1c 	.word	0x20002f1c

08022efc <__malloc_lock>:
 8022efc:	4801      	ldr	r0, [pc, #4]	@ (8022f04 <__malloc_lock+0x8>)
 8022efe:	f002 b968 	b.w	80251d2 <__retarget_lock_acquire_recursive>
 8022f02:	bf00      	nop
 8022f04:	20003060 	.word	0x20003060

08022f08 <__malloc_unlock>:
 8022f08:	4801      	ldr	r0, [pc, #4]	@ (8022f10 <__malloc_unlock+0x8>)
 8022f0a:	f002 b963 	b.w	80251d4 <__retarget_lock_release_recursive>
 8022f0e:	bf00      	nop
 8022f10:	20003060 	.word	0x20003060

08022f14 <mallinfo>:
 8022f14:	b510      	push	{r4, lr}
 8022f16:	4b03      	ldr	r3, [pc, #12]	@ (8022f24 <mallinfo+0x10>)
 8022f18:	4604      	mov	r4, r0
 8022f1a:	6819      	ldr	r1, [r3, #0]
 8022f1c:	f003 fb5c 	bl	80265d8 <_mallinfo_r>
 8022f20:	4620      	mov	r0, r4
 8022f22:	bd10      	pop	{r4, pc}
 8022f24:	2000062c 	.word	0x2000062c

08022f28 <_realloc_r>:
 8022f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022f2c:	4680      	mov	r8, r0
 8022f2e:	4615      	mov	r5, r2
 8022f30:	460c      	mov	r4, r1
 8022f32:	b921      	cbnz	r1, 8022f3e <_realloc_r+0x16>
 8022f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022f38:	4611      	mov	r1, r2
 8022f3a:	f7ff bf5f 	b.w	8022dfc <_malloc_r>
 8022f3e:	b92a      	cbnz	r2, 8022f4c <_realloc_r+0x24>
 8022f40:	f002 ffc6 	bl	8025ed0 <_free_r>
 8022f44:	2400      	movs	r4, #0
 8022f46:	4620      	mov	r0, r4
 8022f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022f4c:	f004 f83c 	bl	8026fc8 <_malloc_usable_size_r>
 8022f50:	4285      	cmp	r5, r0
 8022f52:	4606      	mov	r6, r0
 8022f54:	d802      	bhi.n	8022f5c <_realloc_r+0x34>
 8022f56:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8022f5a:	d8f4      	bhi.n	8022f46 <_realloc_r+0x1e>
 8022f5c:	4629      	mov	r1, r5
 8022f5e:	4640      	mov	r0, r8
 8022f60:	f7ff ff4c 	bl	8022dfc <_malloc_r>
 8022f64:	4607      	mov	r7, r0
 8022f66:	2800      	cmp	r0, #0
 8022f68:	d0ec      	beq.n	8022f44 <_realloc_r+0x1c>
 8022f6a:	42b5      	cmp	r5, r6
 8022f6c:	462a      	mov	r2, r5
 8022f6e:	4621      	mov	r1, r4
 8022f70:	bf28      	it	cs
 8022f72:	4632      	movcs	r2, r6
 8022f74:	f002 f937 	bl	80251e6 <memcpy>
 8022f78:	4621      	mov	r1, r4
 8022f7a:	4640      	mov	r0, r8
 8022f7c:	f002 ffa8 	bl	8025ed0 <_free_r>
 8022f80:	463c      	mov	r4, r7
 8022f82:	e7e0      	b.n	8022f46 <_realloc_r+0x1e>

08022f84 <sulp>:
 8022f84:	b570      	push	{r4, r5, r6, lr}
 8022f86:	4604      	mov	r4, r0
 8022f88:	460d      	mov	r5, r1
 8022f8a:	ec45 4b10 	vmov	d0, r4, r5
 8022f8e:	4616      	mov	r6, r2
 8022f90:	f003 fedc 	bl	8026d4c <__ulp>
 8022f94:	ec51 0b10 	vmov	r0, r1, d0
 8022f98:	b17e      	cbz	r6, 8022fba <sulp+0x36>
 8022f9a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8022f9e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8022fa2:	2b00      	cmp	r3, #0
 8022fa4:	dd09      	ble.n	8022fba <sulp+0x36>
 8022fa6:	051b      	lsls	r3, r3, #20
 8022fa8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8022fac:	2400      	movs	r4, #0
 8022fae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8022fb2:	4622      	mov	r2, r4
 8022fb4:	462b      	mov	r3, r5
 8022fb6:	f7e5 fa67 	bl	8008488 <__aeabi_dmul>
 8022fba:	ec41 0b10 	vmov	d0, r0, r1
 8022fbe:	bd70      	pop	{r4, r5, r6, pc}

08022fc0 <_strtod_l>:
 8022fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fc4:	b09f      	sub	sp, #124	@ 0x7c
 8022fc6:	460c      	mov	r4, r1
 8022fc8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8022fca:	2200      	movs	r2, #0
 8022fcc:	921a      	str	r2, [sp, #104]	@ 0x68
 8022fce:	9005      	str	r0, [sp, #20]
 8022fd0:	f04f 0a00 	mov.w	sl, #0
 8022fd4:	f04f 0b00 	mov.w	fp, #0
 8022fd8:	460a      	mov	r2, r1
 8022fda:	9219      	str	r2, [sp, #100]	@ 0x64
 8022fdc:	7811      	ldrb	r1, [r2, #0]
 8022fde:	292b      	cmp	r1, #43	@ 0x2b
 8022fe0:	d04a      	beq.n	8023078 <_strtod_l+0xb8>
 8022fe2:	d838      	bhi.n	8023056 <_strtod_l+0x96>
 8022fe4:	290d      	cmp	r1, #13
 8022fe6:	d832      	bhi.n	802304e <_strtod_l+0x8e>
 8022fe8:	2908      	cmp	r1, #8
 8022fea:	d832      	bhi.n	8023052 <_strtod_l+0x92>
 8022fec:	2900      	cmp	r1, #0
 8022fee:	d03b      	beq.n	8023068 <_strtod_l+0xa8>
 8022ff0:	2200      	movs	r2, #0
 8022ff2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022ff4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8022ff6:	782a      	ldrb	r2, [r5, #0]
 8022ff8:	2a30      	cmp	r2, #48	@ 0x30
 8022ffa:	f040 80b3 	bne.w	8023164 <_strtod_l+0x1a4>
 8022ffe:	786a      	ldrb	r2, [r5, #1]
 8023000:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8023004:	2a58      	cmp	r2, #88	@ 0x58
 8023006:	d16e      	bne.n	80230e6 <_strtod_l+0x126>
 8023008:	9302      	str	r3, [sp, #8]
 802300a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802300c:	9301      	str	r3, [sp, #4]
 802300e:	ab1a      	add	r3, sp, #104	@ 0x68
 8023010:	9300      	str	r3, [sp, #0]
 8023012:	4a8e      	ldr	r2, [pc, #568]	@ (802324c <_strtod_l+0x28c>)
 8023014:	9805      	ldr	r0, [sp, #20]
 8023016:	ab1b      	add	r3, sp, #108	@ 0x6c
 8023018:	a919      	add	r1, sp, #100	@ 0x64
 802301a:	f003 f80b 	bl	8026034 <__gethex>
 802301e:	f010 060f 	ands.w	r6, r0, #15
 8023022:	4604      	mov	r4, r0
 8023024:	d005      	beq.n	8023032 <_strtod_l+0x72>
 8023026:	2e06      	cmp	r6, #6
 8023028:	d128      	bne.n	802307c <_strtod_l+0xbc>
 802302a:	3501      	adds	r5, #1
 802302c:	2300      	movs	r3, #0
 802302e:	9519      	str	r5, [sp, #100]	@ 0x64
 8023030:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023032:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023034:	2b00      	cmp	r3, #0
 8023036:	f040 858e 	bne.w	8023b56 <_strtod_l+0xb96>
 802303a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802303c:	b1cb      	cbz	r3, 8023072 <_strtod_l+0xb2>
 802303e:	4652      	mov	r2, sl
 8023040:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8023044:	ec43 2b10 	vmov	d0, r2, r3
 8023048:	b01f      	add	sp, #124	@ 0x7c
 802304a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802304e:	2920      	cmp	r1, #32
 8023050:	d1ce      	bne.n	8022ff0 <_strtod_l+0x30>
 8023052:	3201      	adds	r2, #1
 8023054:	e7c1      	b.n	8022fda <_strtod_l+0x1a>
 8023056:	292d      	cmp	r1, #45	@ 0x2d
 8023058:	d1ca      	bne.n	8022ff0 <_strtod_l+0x30>
 802305a:	2101      	movs	r1, #1
 802305c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802305e:	1c51      	adds	r1, r2, #1
 8023060:	9119      	str	r1, [sp, #100]	@ 0x64
 8023062:	7852      	ldrb	r2, [r2, #1]
 8023064:	2a00      	cmp	r2, #0
 8023066:	d1c5      	bne.n	8022ff4 <_strtod_l+0x34>
 8023068:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802306a:	9419      	str	r4, [sp, #100]	@ 0x64
 802306c:	2b00      	cmp	r3, #0
 802306e:	f040 8570 	bne.w	8023b52 <_strtod_l+0xb92>
 8023072:	4652      	mov	r2, sl
 8023074:	465b      	mov	r3, fp
 8023076:	e7e5      	b.n	8023044 <_strtod_l+0x84>
 8023078:	2100      	movs	r1, #0
 802307a:	e7ef      	b.n	802305c <_strtod_l+0x9c>
 802307c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802307e:	b13a      	cbz	r2, 8023090 <_strtod_l+0xd0>
 8023080:	2135      	movs	r1, #53	@ 0x35
 8023082:	a81c      	add	r0, sp, #112	@ 0x70
 8023084:	f003 ff5c 	bl	8026f40 <__copybits>
 8023088:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802308a:	9805      	ldr	r0, [sp, #20]
 802308c:	f003 fb2a 	bl	80266e4 <_Bfree>
 8023090:	3e01      	subs	r6, #1
 8023092:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8023094:	2e04      	cmp	r6, #4
 8023096:	d806      	bhi.n	80230a6 <_strtod_l+0xe6>
 8023098:	e8df f006 	tbb	[pc, r6]
 802309c:	201d0314 	.word	0x201d0314
 80230a0:	14          	.byte	0x14
 80230a1:	00          	.byte	0x00
 80230a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80230a6:	05e1      	lsls	r1, r4, #23
 80230a8:	bf48      	it	mi
 80230aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80230ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80230b2:	0d1b      	lsrs	r3, r3, #20
 80230b4:	051b      	lsls	r3, r3, #20
 80230b6:	2b00      	cmp	r3, #0
 80230b8:	d1bb      	bne.n	8023032 <_strtod_l+0x72>
 80230ba:	f002 f85f 	bl	802517c <__errno>
 80230be:	2322      	movs	r3, #34	@ 0x22
 80230c0:	6003      	str	r3, [r0, #0]
 80230c2:	e7b6      	b.n	8023032 <_strtod_l+0x72>
 80230c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80230c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80230cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80230d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80230d4:	e7e7      	b.n	80230a6 <_strtod_l+0xe6>
 80230d6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8023254 <_strtod_l+0x294>
 80230da:	e7e4      	b.n	80230a6 <_strtod_l+0xe6>
 80230dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80230e0:	f04f 3aff 	mov.w	sl, #4294967295
 80230e4:	e7df      	b.n	80230a6 <_strtod_l+0xe6>
 80230e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80230e8:	1c5a      	adds	r2, r3, #1
 80230ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80230ec:	785b      	ldrb	r3, [r3, #1]
 80230ee:	2b30      	cmp	r3, #48	@ 0x30
 80230f0:	d0f9      	beq.n	80230e6 <_strtod_l+0x126>
 80230f2:	2b00      	cmp	r3, #0
 80230f4:	d09d      	beq.n	8023032 <_strtod_l+0x72>
 80230f6:	2301      	movs	r3, #1
 80230f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80230fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80230fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80230fe:	2300      	movs	r3, #0
 8023100:	9308      	str	r3, [sp, #32]
 8023102:	930a      	str	r3, [sp, #40]	@ 0x28
 8023104:	461f      	mov	r7, r3
 8023106:	220a      	movs	r2, #10
 8023108:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802310a:	7805      	ldrb	r5, [r0, #0]
 802310c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8023110:	b2d9      	uxtb	r1, r3
 8023112:	2909      	cmp	r1, #9
 8023114:	d928      	bls.n	8023168 <_strtod_l+0x1a8>
 8023116:	494e      	ldr	r1, [pc, #312]	@ (8023250 <_strtod_l+0x290>)
 8023118:	2201      	movs	r2, #1
 802311a:	f001 ff28 	bl	8024f6e <strncmp>
 802311e:	2800      	cmp	r0, #0
 8023120:	d032      	beq.n	8023188 <_strtod_l+0x1c8>
 8023122:	2000      	movs	r0, #0
 8023124:	462a      	mov	r2, r5
 8023126:	4681      	mov	r9, r0
 8023128:	463d      	mov	r5, r7
 802312a:	4603      	mov	r3, r0
 802312c:	2a65      	cmp	r2, #101	@ 0x65
 802312e:	d001      	beq.n	8023134 <_strtod_l+0x174>
 8023130:	2a45      	cmp	r2, #69	@ 0x45
 8023132:	d114      	bne.n	802315e <_strtod_l+0x19e>
 8023134:	b91d      	cbnz	r5, 802313e <_strtod_l+0x17e>
 8023136:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023138:	4302      	orrs	r2, r0
 802313a:	d095      	beq.n	8023068 <_strtod_l+0xa8>
 802313c:	2500      	movs	r5, #0
 802313e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8023140:	1c62      	adds	r2, r4, #1
 8023142:	9219      	str	r2, [sp, #100]	@ 0x64
 8023144:	7862      	ldrb	r2, [r4, #1]
 8023146:	2a2b      	cmp	r2, #43	@ 0x2b
 8023148:	d077      	beq.n	802323a <_strtod_l+0x27a>
 802314a:	2a2d      	cmp	r2, #45	@ 0x2d
 802314c:	d07b      	beq.n	8023246 <_strtod_l+0x286>
 802314e:	f04f 0c00 	mov.w	ip, #0
 8023152:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8023156:	2909      	cmp	r1, #9
 8023158:	f240 8082 	bls.w	8023260 <_strtod_l+0x2a0>
 802315c:	9419      	str	r4, [sp, #100]	@ 0x64
 802315e:	f04f 0800 	mov.w	r8, #0
 8023162:	e0a2      	b.n	80232aa <_strtod_l+0x2ea>
 8023164:	2300      	movs	r3, #0
 8023166:	e7c7      	b.n	80230f8 <_strtod_l+0x138>
 8023168:	2f08      	cmp	r7, #8
 802316a:	bfd5      	itete	le
 802316c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 802316e:	9908      	ldrgt	r1, [sp, #32]
 8023170:	fb02 3301 	mlale	r3, r2, r1, r3
 8023174:	fb02 3301 	mlagt	r3, r2, r1, r3
 8023178:	f100 0001 	add.w	r0, r0, #1
 802317c:	bfd4      	ite	le
 802317e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8023180:	9308      	strgt	r3, [sp, #32]
 8023182:	3701      	adds	r7, #1
 8023184:	9019      	str	r0, [sp, #100]	@ 0x64
 8023186:	e7bf      	b.n	8023108 <_strtod_l+0x148>
 8023188:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802318a:	1c5a      	adds	r2, r3, #1
 802318c:	9219      	str	r2, [sp, #100]	@ 0x64
 802318e:	785a      	ldrb	r2, [r3, #1]
 8023190:	b37f      	cbz	r7, 80231f2 <_strtod_l+0x232>
 8023192:	4681      	mov	r9, r0
 8023194:	463d      	mov	r5, r7
 8023196:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 802319a:	2b09      	cmp	r3, #9
 802319c:	d912      	bls.n	80231c4 <_strtod_l+0x204>
 802319e:	2301      	movs	r3, #1
 80231a0:	e7c4      	b.n	802312c <_strtod_l+0x16c>
 80231a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80231a4:	1c5a      	adds	r2, r3, #1
 80231a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80231a8:	785a      	ldrb	r2, [r3, #1]
 80231aa:	3001      	adds	r0, #1
 80231ac:	2a30      	cmp	r2, #48	@ 0x30
 80231ae:	d0f8      	beq.n	80231a2 <_strtod_l+0x1e2>
 80231b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80231b4:	2b08      	cmp	r3, #8
 80231b6:	f200 84d3 	bhi.w	8023b60 <_strtod_l+0xba0>
 80231ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80231bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80231be:	4681      	mov	r9, r0
 80231c0:	2000      	movs	r0, #0
 80231c2:	4605      	mov	r5, r0
 80231c4:	3a30      	subs	r2, #48	@ 0x30
 80231c6:	f100 0301 	add.w	r3, r0, #1
 80231ca:	d02a      	beq.n	8023222 <_strtod_l+0x262>
 80231cc:	4499      	add	r9, r3
 80231ce:	eb00 0c05 	add.w	ip, r0, r5
 80231d2:	462b      	mov	r3, r5
 80231d4:	210a      	movs	r1, #10
 80231d6:	4563      	cmp	r3, ip
 80231d8:	d10d      	bne.n	80231f6 <_strtod_l+0x236>
 80231da:	1c69      	adds	r1, r5, #1
 80231dc:	4401      	add	r1, r0
 80231de:	4428      	add	r0, r5
 80231e0:	2808      	cmp	r0, #8
 80231e2:	dc16      	bgt.n	8023212 <_strtod_l+0x252>
 80231e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80231e6:	230a      	movs	r3, #10
 80231e8:	fb03 2300 	mla	r3, r3, r0, r2
 80231ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80231ee:	2300      	movs	r3, #0
 80231f0:	e018      	b.n	8023224 <_strtod_l+0x264>
 80231f2:	4638      	mov	r0, r7
 80231f4:	e7da      	b.n	80231ac <_strtod_l+0x1ec>
 80231f6:	2b08      	cmp	r3, #8
 80231f8:	f103 0301 	add.w	r3, r3, #1
 80231fc:	dc03      	bgt.n	8023206 <_strtod_l+0x246>
 80231fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8023200:	434e      	muls	r6, r1
 8023202:	960a      	str	r6, [sp, #40]	@ 0x28
 8023204:	e7e7      	b.n	80231d6 <_strtod_l+0x216>
 8023206:	2b10      	cmp	r3, #16
 8023208:	bfde      	ittt	le
 802320a:	9e08      	ldrle	r6, [sp, #32]
 802320c:	434e      	mulle	r6, r1
 802320e:	9608      	strle	r6, [sp, #32]
 8023210:	e7e1      	b.n	80231d6 <_strtod_l+0x216>
 8023212:	280f      	cmp	r0, #15
 8023214:	dceb      	bgt.n	80231ee <_strtod_l+0x22e>
 8023216:	9808      	ldr	r0, [sp, #32]
 8023218:	230a      	movs	r3, #10
 802321a:	fb03 2300 	mla	r3, r3, r0, r2
 802321e:	9308      	str	r3, [sp, #32]
 8023220:	e7e5      	b.n	80231ee <_strtod_l+0x22e>
 8023222:	4629      	mov	r1, r5
 8023224:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8023226:	1c50      	adds	r0, r2, #1
 8023228:	9019      	str	r0, [sp, #100]	@ 0x64
 802322a:	7852      	ldrb	r2, [r2, #1]
 802322c:	4618      	mov	r0, r3
 802322e:	460d      	mov	r5, r1
 8023230:	e7b1      	b.n	8023196 <_strtod_l+0x1d6>
 8023232:	f04f 0900 	mov.w	r9, #0
 8023236:	2301      	movs	r3, #1
 8023238:	e77d      	b.n	8023136 <_strtod_l+0x176>
 802323a:	f04f 0c00 	mov.w	ip, #0
 802323e:	1ca2      	adds	r2, r4, #2
 8023240:	9219      	str	r2, [sp, #100]	@ 0x64
 8023242:	78a2      	ldrb	r2, [r4, #2]
 8023244:	e785      	b.n	8023152 <_strtod_l+0x192>
 8023246:	f04f 0c01 	mov.w	ip, #1
 802324a:	e7f8      	b.n	802323e <_strtod_l+0x27e>
 802324c:	080317e4 	.word	0x080317e4
 8023250:	080317cc 	.word	0x080317cc
 8023254:	7ff00000 	.word	0x7ff00000
 8023258:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802325a:	1c51      	adds	r1, r2, #1
 802325c:	9119      	str	r1, [sp, #100]	@ 0x64
 802325e:	7852      	ldrb	r2, [r2, #1]
 8023260:	2a30      	cmp	r2, #48	@ 0x30
 8023262:	d0f9      	beq.n	8023258 <_strtod_l+0x298>
 8023264:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8023268:	2908      	cmp	r1, #8
 802326a:	f63f af78 	bhi.w	802315e <_strtod_l+0x19e>
 802326e:	3a30      	subs	r2, #48	@ 0x30
 8023270:	920e      	str	r2, [sp, #56]	@ 0x38
 8023272:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8023274:	920f      	str	r2, [sp, #60]	@ 0x3c
 8023276:	f04f 080a 	mov.w	r8, #10
 802327a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802327c:	1c56      	adds	r6, r2, #1
 802327e:	9619      	str	r6, [sp, #100]	@ 0x64
 8023280:	7852      	ldrb	r2, [r2, #1]
 8023282:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8023286:	f1be 0f09 	cmp.w	lr, #9
 802328a:	d939      	bls.n	8023300 <_strtod_l+0x340>
 802328c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802328e:	1a76      	subs	r6, r6, r1
 8023290:	2e08      	cmp	r6, #8
 8023292:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8023296:	dc03      	bgt.n	80232a0 <_strtod_l+0x2e0>
 8023298:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802329a:	4588      	cmp	r8, r1
 802329c:	bfa8      	it	ge
 802329e:	4688      	movge	r8, r1
 80232a0:	f1bc 0f00 	cmp.w	ip, #0
 80232a4:	d001      	beq.n	80232aa <_strtod_l+0x2ea>
 80232a6:	f1c8 0800 	rsb	r8, r8, #0
 80232aa:	2d00      	cmp	r5, #0
 80232ac:	d14e      	bne.n	802334c <_strtod_l+0x38c>
 80232ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80232b0:	4308      	orrs	r0, r1
 80232b2:	f47f aebe 	bne.w	8023032 <_strtod_l+0x72>
 80232b6:	2b00      	cmp	r3, #0
 80232b8:	f47f aed6 	bne.w	8023068 <_strtod_l+0xa8>
 80232bc:	2a69      	cmp	r2, #105	@ 0x69
 80232be:	d028      	beq.n	8023312 <_strtod_l+0x352>
 80232c0:	dc25      	bgt.n	802330e <_strtod_l+0x34e>
 80232c2:	2a49      	cmp	r2, #73	@ 0x49
 80232c4:	d025      	beq.n	8023312 <_strtod_l+0x352>
 80232c6:	2a4e      	cmp	r2, #78	@ 0x4e
 80232c8:	f47f aece 	bne.w	8023068 <_strtod_l+0xa8>
 80232cc:	499b      	ldr	r1, [pc, #620]	@ (802353c <_strtod_l+0x57c>)
 80232ce:	a819      	add	r0, sp, #100	@ 0x64
 80232d0:	f003 f8d2 	bl	8026478 <__match>
 80232d4:	2800      	cmp	r0, #0
 80232d6:	f43f aec7 	beq.w	8023068 <_strtod_l+0xa8>
 80232da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80232dc:	781b      	ldrb	r3, [r3, #0]
 80232de:	2b28      	cmp	r3, #40	@ 0x28
 80232e0:	d12e      	bne.n	8023340 <_strtod_l+0x380>
 80232e2:	4997      	ldr	r1, [pc, #604]	@ (8023540 <_strtod_l+0x580>)
 80232e4:	aa1c      	add	r2, sp, #112	@ 0x70
 80232e6:	a819      	add	r0, sp, #100	@ 0x64
 80232e8:	f003 f8da 	bl	80264a0 <__hexnan>
 80232ec:	2805      	cmp	r0, #5
 80232ee:	d127      	bne.n	8023340 <_strtod_l+0x380>
 80232f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80232f2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80232f6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80232fa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80232fe:	e698      	b.n	8023032 <_strtod_l+0x72>
 8023300:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8023302:	fb08 2101 	mla	r1, r8, r1, r2
 8023306:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 802330a:	920e      	str	r2, [sp, #56]	@ 0x38
 802330c:	e7b5      	b.n	802327a <_strtod_l+0x2ba>
 802330e:	2a6e      	cmp	r2, #110	@ 0x6e
 8023310:	e7da      	b.n	80232c8 <_strtod_l+0x308>
 8023312:	498c      	ldr	r1, [pc, #560]	@ (8023544 <_strtod_l+0x584>)
 8023314:	a819      	add	r0, sp, #100	@ 0x64
 8023316:	f003 f8af 	bl	8026478 <__match>
 802331a:	2800      	cmp	r0, #0
 802331c:	f43f aea4 	beq.w	8023068 <_strtod_l+0xa8>
 8023320:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023322:	4989      	ldr	r1, [pc, #548]	@ (8023548 <_strtod_l+0x588>)
 8023324:	3b01      	subs	r3, #1
 8023326:	a819      	add	r0, sp, #100	@ 0x64
 8023328:	9319      	str	r3, [sp, #100]	@ 0x64
 802332a:	f003 f8a5 	bl	8026478 <__match>
 802332e:	b910      	cbnz	r0, 8023336 <_strtod_l+0x376>
 8023330:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023332:	3301      	adds	r3, #1
 8023334:	9319      	str	r3, [sp, #100]	@ 0x64
 8023336:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8023558 <_strtod_l+0x598>
 802333a:	f04f 0a00 	mov.w	sl, #0
 802333e:	e678      	b.n	8023032 <_strtod_l+0x72>
 8023340:	4882      	ldr	r0, [pc, #520]	@ (802354c <_strtod_l+0x58c>)
 8023342:	f001 ff61 	bl	8025208 <nan>
 8023346:	ec5b ab10 	vmov	sl, fp, d0
 802334a:	e672      	b.n	8023032 <_strtod_l+0x72>
 802334c:	eba8 0309 	sub.w	r3, r8, r9
 8023350:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8023352:	9309      	str	r3, [sp, #36]	@ 0x24
 8023354:	2f00      	cmp	r7, #0
 8023356:	bf08      	it	eq
 8023358:	462f      	moveq	r7, r5
 802335a:	2d10      	cmp	r5, #16
 802335c:	462c      	mov	r4, r5
 802335e:	bfa8      	it	ge
 8023360:	2410      	movge	r4, #16
 8023362:	f7e5 f817 	bl	8008394 <__aeabi_ui2d>
 8023366:	2d09      	cmp	r5, #9
 8023368:	4682      	mov	sl, r0
 802336a:	468b      	mov	fp, r1
 802336c:	dc13      	bgt.n	8023396 <_strtod_l+0x3d6>
 802336e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023370:	2b00      	cmp	r3, #0
 8023372:	f43f ae5e 	beq.w	8023032 <_strtod_l+0x72>
 8023376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023378:	dd78      	ble.n	802346c <_strtod_l+0x4ac>
 802337a:	2b16      	cmp	r3, #22
 802337c:	dc5f      	bgt.n	802343e <_strtod_l+0x47e>
 802337e:	4974      	ldr	r1, [pc, #464]	@ (8023550 <_strtod_l+0x590>)
 8023380:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8023384:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023388:	4652      	mov	r2, sl
 802338a:	465b      	mov	r3, fp
 802338c:	f7e5 f87c 	bl	8008488 <__aeabi_dmul>
 8023390:	4682      	mov	sl, r0
 8023392:	468b      	mov	fp, r1
 8023394:	e64d      	b.n	8023032 <_strtod_l+0x72>
 8023396:	4b6e      	ldr	r3, [pc, #440]	@ (8023550 <_strtod_l+0x590>)
 8023398:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802339c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80233a0:	f7e5 f872 	bl	8008488 <__aeabi_dmul>
 80233a4:	4682      	mov	sl, r0
 80233a6:	9808      	ldr	r0, [sp, #32]
 80233a8:	468b      	mov	fp, r1
 80233aa:	f7e4 fff3 	bl	8008394 <__aeabi_ui2d>
 80233ae:	4602      	mov	r2, r0
 80233b0:	460b      	mov	r3, r1
 80233b2:	4650      	mov	r0, sl
 80233b4:	4659      	mov	r1, fp
 80233b6:	f7e4 feb1 	bl	800811c <__adddf3>
 80233ba:	2d0f      	cmp	r5, #15
 80233bc:	4682      	mov	sl, r0
 80233be:	468b      	mov	fp, r1
 80233c0:	ddd5      	ble.n	802336e <_strtod_l+0x3ae>
 80233c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80233c4:	1b2c      	subs	r4, r5, r4
 80233c6:	441c      	add	r4, r3
 80233c8:	2c00      	cmp	r4, #0
 80233ca:	f340 8096 	ble.w	80234fa <_strtod_l+0x53a>
 80233ce:	f014 030f 	ands.w	r3, r4, #15
 80233d2:	d00a      	beq.n	80233ea <_strtod_l+0x42a>
 80233d4:	495e      	ldr	r1, [pc, #376]	@ (8023550 <_strtod_l+0x590>)
 80233d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80233da:	4652      	mov	r2, sl
 80233dc:	465b      	mov	r3, fp
 80233de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80233e2:	f7e5 f851 	bl	8008488 <__aeabi_dmul>
 80233e6:	4682      	mov	sl, r0
 80233e8:	468b      	mov	fp, r1
 80233ea:	f034 040f 	bics.w	r4, r4, #15
 80233ee:	d073      	beq.n	80234d8 <_strtod_l+0x518>
 80233f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80233f4:	dd48      	ble.n	8023488 <_strtod_l+0x4c8>
 80233f6:	2400      	movs	r4, #0
 80233f8:	46a0      	mov	r8, r4
 80233fa:	940a      	str	r4, [sp, #40]	@ 0x28
 80233fc:	46a1      	mov	r9, r4
 80233fe:	9a05      	ldr	r2, [sp, #20]
 8023400:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8023558 <_strtod_l+0x598>
 8023404:	2322      	movs	r3, #34	@ 0x22
 8023406:	6013      	str	r3, [r2, #0]
 8023408:	f04f 0a00 	mov.w	sl, #0
 802340c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802340e:	2b00      	cmp	r3, #0
 8023410:	f43f ae0f 	beq.w	8023032 <_strtod_l+0x72>
 8023414:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8023416:	9805      	ldr	r0, [sp, #20]
 8023418:	f003 f964 	bl	80266e4 <_Bfree>
 802341c:	9805      	ldr	r0, [sp, #20]
 802341e:	4649      	mov	r1, r9
 8023420:	f003 f960 	bl	80266e4 <_Bfree>
 8023424:	9805      	ldr	r0, [sp, #20]
 8023426:	4641      	mov	r1, r8
 8023428:	f003 f95c 	bl	80266e4 <_Bfree>
 802342c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802342e:	9805      	ldr	r0, [sp, #20]
 8023430:	f003 f958 	bl	80266e4 <_Bfree>
 8023434:	9805      	ldr	r0, [sp, #20]
 8023436:	4621      	mov	r1, r4
 8023438:	f003 f954 	bl	80266e4 <_Bfree>
 802343c:	e5f9      	b.n	8023032 <_strtod_l+0x72>
 802343e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023440:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8023444:	4293      	cmp	r3, r2
 8023446:	dbbc      	blt.n	80233c2 <_strtod_l+0x402>
 8023448:	4c41      	ldr	r4, [pc, #260]	@ (8023550 <_strtod_l+0x590>)
 802344a:	f1c5 050f 	rsb	r5, r5, #15
 802344e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8023452:	4652      	mov	r2, sl
 8023454:	465b      	mov	r3, fp
 8023456:	e9d1 0100 	ldrd	r0, r1, [r1]
 802345a:	f7e5 f815 	bl	8008488 <__aeabi_dmul>
 802345e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023460:	1b5d      	subs	r5, r3, r5
 8023462:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8023466:	e9d4 2300 	ldrd	r2, r3, [r4]
 802346a:	e78f      	b.n	802338c <_strtod_l+0x3cc>
 802346c:	3316      	adds	r3, #22
 802346e:	dba8      	blt.n	80233c2 <_strtod_l+0x402>
 8023470:	4b37      	ldr	r3, [pc, #220]	@ (8023550 <_strtod_l+0x590>)
 8023472:	eba9 0808 	sub.w	r8, r9, r8
 8023476:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 802347a:	e9d8 2300 	ldrd	r2, r3, [r8]
 802347e:	4650      	mov	r0, sl
 8023480:	4659      	mov	r1, fp
 8023482:	f7e5 f92b 	bl	80086dc <__aeabi_ddiv>
 8023486:	e783      	b.n	8023390 <_strtod_l+0x3d0>
 8023488:	4b32      	ldr	r3, [pc, #200]	@ (8023554 <_strtod_l+0x594>)
 802348a:	9308      	str	r3, [sp, #32]
 802348c:	2300      	movs	r3, #0
 802348e:	1124      	asrs	r4, r4, #4
 8023490:	4650      	mov	r0, sl
 8023492:	4659      	mov	r1, fp
 8023494:	461e      	mov	r6, r3
 8023496:	2c01      	cmp	r4, #1
 8023498:	dc21      	bgt.n	80234de <_strtod_l+0x51e>
 802349a:	b10b      	cbz	r3, 80234a0 <_strtod_l+0x4e0>
 802349c:	4682      	mov	sl, r0
 802349e:	468b      	mov	fp, r1
 80234a0:	492c      	ldr	r1, [pc, #176]	@ (8023554 <_strtod_l+0x594>)
 80234a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80234a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80234aa:	4652      	mov	r2, sl
 80234ac:	465b      	mov	r3, fp
 80234ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80234b2:	f7e4 ffe9 	bl	8008488 <__aeabi_dmul>
 80234b6:	4b28      	ldr	r3, [pc, #160]	@ (8023558 <_strtod_l+0x598>)
 80234b8:	460a      	mov	r2, r1
 80234ba:	400b      	ands	r3, r1
 80234bc:	4927      	ldr	r1, [pc, #156]	@ (802355c <_strtod_l+0x59c>)
 80234be:	428b      	cmp	r3, r1
 80234c0:	4682      	mov	sl, r0
 80234c2:	d898      	bhi.n	80233f6 <_strtod_l+0x436>
 80234c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80234c8:	428b      	cmp	r3, r1
 80234ca:	bf86      	itte	hi
 80234cc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8023560 <_strtod_l+0x5a0>
 80234d0:	f04f 3aff 	movhi.w	sl, #4294967295
 80234d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80234d8:	2300      	movs	r3, #0
 80234da:	9308      	str	r3, [sp, #32]
 80234dc:	e07a      	b.n	80235d4 <_strtod_l+0x614>
 80234de:	07e2      	lsls	r2, r4, #31
 80234e0:	d505      	bpl.n	80234ee <_strtod_l+0x52e>
 80234e2:	9b08      	ldr	r3, [sp, #32]
 80234e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234e8:	f7e4 ffce 	bl	8008488 <__aeabi_dmul>
 80234ec:	2301      	movs	r3, #1
 80234ee:	9a08      	ldr	r2, [sp, #32]
 80234f0:	3208      	adds	r2, #8
 80234f2:	3601      	adds	r6, #1
 80234f4:	1064      	asrs	r4, r4, #1
 80234f6:	9208      	str	r2, [sp, #32]
 80234f8:	e7cd      	b.n	8023496 <_strtod_l+0x4d6>
 80234fa:	d0ed      	beq.n	80234d8 <_strtod_l+0x518>
 80234fc:	4264      	negs	r4, r4
 80234fe:	f014 020f 	ands.w	r2, r4, #15
 8023502:	d00a      	beq.n	802351a <_strtod_l+0x55a>
 8023504:	4b12      	ldr	r3, [pc, #72]	@ (8023550 <_strtod_l+0x590>)
 8023506:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802350a:	4650      	mov	r0, sl
 802350c:	4659      	mov	r1, fp
 802350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023512:	f7e5 f8e3 	bl	80086dc <__aeabi_ddiv>
 8023516:	4682      	mov	sl, r0
 8023518:	468b      	mov	fp, r1
 802351a:	1124      	asrs	r4, r4, #4
 802351c:	d0dc      	beq.n	80234d8 <_strtod_l+0x518>
 802351e:	2c1f      	cmp	r4, #31
 8023520:	dd20      	ble.n	8023564 <_strtod_l+0x5a4>
 8023522:	2400      	movs	r4, #0
 8023524:	46a0      	mov	r8, r4
 8023526:	940a      	str	r4, [sp, #40]	@ 0x28
 8023528:	46a1      	mov	r9, r4
 802352a:	9a05      	ldr	r2, [sp, #20]
 802352c:	2322      	movs	r3, #34	@ 0x22
 802352e:	f04f 0a00 	mov.w	sl, #0
 8023532:	f04f 0b00 	mov.w	fp, #0
 8023536:	6013      	str	r3, [r2, #0]
 8023538:	e768      	b.n	802340c <_strtod_l+0x44c>
 802353a:	bf00      	nop
 802353c:	0803192e 	.word	0x0803192e
 8023540:	080317d0 	.word	0x080317d0
 8023544:	08031926 	.word	0x08031926
 8023548:	080319d6 	.word	0x080319d6
 802354c:	080317cb 	.word	0x080317cb
 8023550:	08031b38 	.word	0x08031b38
 8023554:	08031b10 	.word	0x08031b10
 8023558:	7ff00000 	.word	0x7ff00000
 802355c:	7ca00000 	.word	0x7ca00000
 8023560:	7fefffff 	.word	0x7fefffff
 8023564:	f014 0310 	ands.w	r3, r4, #16
 8023568:	bf18      	it	ne
 802356a:	236a      	movne	r3, #106	@ 0x6a
 802356c:	4ea9      	ldr	r6, [pc, #676]	@ (8023814 <_strtod_l+0x854>)
 802356e:	9308      	str	r3, [sp, #32]
 8023570:	4650      	mov	r0, sl
 8023572:	4659      	mov	r1, fp
 8023574:	2300      	movs	r3, #0
 8023576:	07e2      	lsls	r2, r4, #31
 8023578:	d504      	bpl.n	8023584 <_strtod_l+0x5c4>
 802357a:	e9d6 2300 	ldrd	r2, r3, [r6]
 802357e:	f7e4 ff83 	bl	8008488 <__aeabi_dmul>
 8023582:	2301      	movs	r3, #1
 8023584:	1064      	asrs	r4, r4, #1
 8023586:	f106 0608 	add.w	r6, r6, #8
 802358a:	d1f4      	bne.n	8023576 <_strtod_l+0x5b6>
 802358c:	b10b      	cbz	r3, 8023592 <_strtod_l+0x5d2>
 802358e:	4682      	mov	sl, r0
 8023590:	468b      	mov	fp, r1
 8023592:	9b08      	ldr	r3, [sp, #32]
 8023594:	b1b3      	cbz	r3, 80235c4 <_strtod_l+0x604>
 8023596:	f3cb 520a 	ubfx	r2, fp, #20, #11
 802359a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 802359e:	2b00      	cmp	r3, #0
 80235a0:	4659      	mov	r1, fp
 80235a2:	dd0f      	ble.n	80235c4 <_strtod_l+0x604>
 80235a4:	2b1f      	cmp	r3, #31
 80235a6:	dd55      	ble.n	8023654 <_strtod_l+0x694>
 80235a8:	2b34      	cmp	r3, #52	@ 0x34
 80235aa:	bfde      	ittt	le
 80235ac:	f04f 33ff 	movle.w	r3, #4294967295
 80235b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80235b4:	4093      	lslle	r3, r2
 80235b6:	f04f 0a00 	mov.w	sl, #0
 80235ba:	bfcc      	ite	gt
 80235bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80235c0:	ea03 0b01 	andle.w	fp, r3, r1
 80235c4:	2200      	movs	r2, #0
 80235c6:	2300      	movs	r3, #0
 80235c8:	4650      	mov	r0, sl
 80235ca:	4659      	mov	r1, fp
 80235cc:	f7e5 f9c4 	bl	8008958 <__aeabi_dcmpeq>
 80235d0:	2800      	cmp	r0, #0
 80235d2:	d1a6      	bne.n	8023522 <_strtod_l+0x562>
 80235d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80235d6:	9300      	str	r3, [sp, #0]
 80235d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80235da:	9805      	ldr	r0, [sp, #20]
 80235dc:	462b      	mov	r3, r5
 80235de:	463a      	mov	r2, r7
 80235e0:	f003 f8e8 	bl	80267b4 <__s2b>
 80235e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80235e6:	2800      	cmp	r0, #0
 80235e8:	f43f af05 	beq.w	80233f6 <_strtod_l+0x436>
 80235ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80235ee:	2a00      	cmp	r2, #0
 80235f0:	eba9 0308 	sub.w	r3, r9, r8
 80235f4:	bfa8      	it	ge
 80235f6:	2300      	movge	r3, #0
 80235f8:	9312      	str	r3, [sp, #72]	@ 0x48
 80235fa:	2400      	movs	r4, #0
 80235fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8023600:	9316      	str	r3, [sp, #88]	@ 0x58
 8023602:	46a0      	mov	r8, r4
 8023604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023606:	9805      	ldr	r0, [sp, #20]
 8023608:	6859      	ldr	r1, [r3, #4]
 802360a:	f003 f82b 	bl	8026664 <_Balloc>
 802360e:	4681      	mov	r9, r0
 8023610:	2800      	cmp	r0, #0
 8023612:	f43f aef4 	beq.w	80233fe <_strtod_l+0x43e>
 8023616:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023618:	691a      	ldr	r2, [r3, #16]
 802361a:	3202      	adds	r2, #2
 802361c:	f103 010c 	add.w	r1, r3, #12
 8023620:	0092      	lsls	r2, r2, #2
 8023622:	300c      	adds	r0, #12
 8023624:	f001 fddf 	bl	80251e6 <memcpy>
 8023628:	ec4b ab10 	vmov	d0, sl, fp
 802362c:	9805      	ldr	r0, [sp, #20]
 802362e:	aa1c      	add	r2, sp, #112	@ 0x70
 8023630:	a91b      	add	r1, sp, #108	@ 0x6c
 8023632:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8023636:	f003 fbf9 	bl	8026e2c <__d2b>
 802363a:	901a      	str	r0, [sp, #104]	@ 0x68
 802363c:	2800      	cmp	r0, #0
 802363e:	f43f aede 	beq.w	80233fe <_strtod_l+0x43e>
 8023642:	9805      	ldr	r0, [sp, #20]
 8023644:	2101      	movs	r1, #1
 8023646:	f003 f94b 	bl	80268e0 <__i2b>
 802364a:	4680      	mov	r8, r0
 802364c:	b948      	cbnz	r0, 8023662 <_strtod_l+0x6a2>
 802364e:	f04f 0800 	mov.w	r8, #0
 8023652:	e6d4      	b.n	80233fe <_strtod_l+0x43e>
 8023654:	f04f 32ff 	mov.w	r2, #4294967295
 8023658:	fa02 f303 	lsl.w	r3, r2, r3
 802365c:	ea03 0a0a 	and.w	sl, r3, sl
 8023660:	e7b0      	b.n	80235c4 <_strtod_l+0x604>
 8023662:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8023664:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8023666:	2d00      	cmp	r5, #0
 8023668:	bfab      	itete	ge
 802366a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 802366c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 802366e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8023670:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8023672:	bfac      	ite	ge
 8023674:	18ef      	addge	r7, r5, r3
 8023676:	1b5e      	sublt	r6, r3, r5
 8023678:	9b08      	ldr	r3, [sp, #32]
 802367a:	1aed      	subs	r5, r5, r3
 802367c:	4415      	add	r5, r2
 802367e:	4b66      	ldr	r3, [pc, #408]	@ (8023818 <_strtod_l+0x858>)
 8023680:	3d01      	subs	r5, #1
 8023682:	429d      	cmp	r5, r3
 8023684:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8023688:	da50      	bge.n	802372c <_strtod_l+0x76c>
 802368a:	1b5b      	subs	r3, r3, r5
 802368c:	2b1f      	cmp	r3, #31
 802368e:	eba2 0203 	sub.w	r2, r2, r3
 8023692:	f04f 0101 	mov.w	r1, #1
 8023696:	dc3d      	bgt.n	8023714 <_strtod_l+0x754>
 8023698:	fa01 f303 	lsl.w	r3, r1, r3
 802369c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802369e:	2300      	movs	r3, #0
 80236a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80236a2:	18bd      	adds	r5, r7, r2
 80236a4:	9b08      	ldr	r3, [sp, #32]
 80236a6:	42af      	cmp	r7, r5
 80236a8:	4416      	add	r6, r2
 80236aa:	441e      	add	r6, r3
 80236ac:	463b      	mov	r3, r7
 80236ae:	bfa8      	it	ge
 80236b0:	462b      	movge	r3, r5
 80236b2:	42b3      	cmp	r3, r6
 80236b4:	bfa8      	it	ge
 80236b6:	4633      	movge	r3, r6
 80236b8:	2b00      	cmp	r3, #0
 80236ba:	bfc2      	ittt	gt
 80236bc:	1aed      	subgt	r5, r5, r3
 80236be:	1af6      	subgt	r6, r6, r3
 80236c0:	1aff      	subgt	r7, r7, r3
 80236c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80236c4:	2b00      	cmp	r3, #0
 80236c6:	dd16      	ble.n	80236f6 <_strtod_l+0x736>
 80236c8:	4641      	mov	r1, r8
 80236ca:	9805      	ldr	r0, [sp, #20]
 80236cc:	461a      	mov	r2, r3
 80236ce:	f003 f9c7 	bl	8026a60 <__pow5mult>
 80236d2:	4680      	mov	r8, r0
 80236d4:	2800      	cmp	r0, #0
 80236d6:	d0ba      	beq.n	802364e <_strtod_l+0x68e>
 80236d8:	4601      	mov	r1, r0
 80236da:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80236dc:	9805      	ldr	r0, [sp, #20]
 80236de:	f003 f915 	bl	802690c <__multiply>
 80236e2:	900e      	str	r0, [sp, #56]	@ 0x38
 80236e4:	2800      	cmp	r0, #0
 80236e6:	f43f ae8a 	beq.w	80233fe <_strtod_l+0x43e>
 80236ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80236ec:	9805      	ldr	r0, [sp, #20]
 80236ee:	f002 fff9 	bl	80266e4 <_Bfree>
 80236f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80236f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80236f6:	2d00      	cmp	r5, #0
 80236f8:	dc1d      	bgt.n	8023736 <_strtod_l+0x776>
 80236fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80236fc:	2b00      	cmp	r3, #0
 80236fe:	dd23      	ble.n	8023748 <_strtod_l+0x788>
 8023700:	4649      	mov	r1, r9
 8023702:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023704:	9805      	ldr	r0, [sp, #20]
 8023706:	f003 f9ab 	bl	8026a60 <__pow5mult>
 802370a:	4681      	mov	r9, r0
 802370c:	b9e0      	cbnz	r0, 8023748 <_strtod_l+0x788>
 802370e:	f04f 0900 	mov.w	r9, #0
 8023712:	e674      	b.n	80233fe <_strtod_l+0x43e>
 8023714:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8023718:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 802371c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8023720:	35e2      	adds	r5, #226	@ 0xe2
 8023722:	fa01 f305 	lsl.w	r3, r1, r5
 8023726:	9310      	str	r3, [sp, #64]	@ 0x40
 8023728:	9113      	str	r1, [sp, #76]	@ 0x4c
 802372a:	e7ba      	b.n	80236a2 <_strtod_l+0x6e2>
 802372c:	2300      	movs	r3, #0
 802372e:	9310      	str	r3, [sp, #64]	@ 0x40
 8023730:	2301      	movs	r3, #1
 8023732:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023734:	e7b5      	b.n	80236a2 <_strtod_l+0x6e2>
 8023736:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8023738:	9805      	ldr	r0, [sp, #20]
 802373a:	462a      	mov	r2, r5
 802373c:	f003 f9ea 	bl	8026b14 <__lshift>
 8023740:	901a      	str	r0, [sp, #104]	@ 0x68
 8023742:	2800      	cmp	r0, #0
 8023744:	d1d9      	bne.n	80236fa <_strtod_l+0x73a>
 8023746:	e65a      	b.n	80233fe <_strtod_l+0x43e>
 8023748:	2e00      	cmp	r6, #0
 802374a:	dd07      	ble.n	802375c <_strtod_l+0x79c>
 802374c:	4649      	mov	r1, r9
 802374e:	9805      	ldr	r0, [sp, #20]
 8023750:	4632      	mov	r2, r6
 8023752:	f003 f9df 	bl	8026b14 <__lshift>
 8023756:	4681      	mov	r9, r0
 8023758:	2800      	cmp	r0, #0
 802375a:	d0d8      	beq.n	802370e <_strtod_l+0x74e>
 802375c:	2f00      	cmp	r7, #0
 802375e:	dd08      	ble.n	8023772 <_strtod_l+0x7b2>
 8023760:	4641      	mov	r1, r8
 8023762:	9805      	ldr	r0, [sp, #20]
 8023764:	463a      	mov	r2, r7
 8023766:	f003 f9d5 	bl	8026b14 <__lshift>
 802376a:	4680      	mov	r8, r0
 802376c:	2800      	cmp	r0, #0
 802376e:	f43f ae46 	beq.w	80233fe <_strtod_l+0x43e>
 8023772:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8023774:	9805      	ldr	r0, [sp, #20]
 8023776:	464a      	mov	r2, r9
 8023778:	f003 fa54 	bl	8026c24 <__mdiff>
 802377c:	4604      	mov	r4, r0
 802377e:	2800      	cmp	r0, #0
 8023780:	f43f ae3d 	beq.w	80233fe <_strtod_l+0x43e>
 8023784:	68c3      	ldr	r3, [r0, #12]
 8023786:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023788:	2300      	movs	r3, #0
 802378a:	60c3      	str	r3, [r0, #12]
 802378c:	4641      	mov	r1, r8
 802378e:	f003 fa2d 	bl	8026bec <__mcmp>
 8023792:	2800      	cmp	r0, #0
 8023794:	da46      	bge.n	8023824 <_strtod_l+0x864>
 8023796:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023798:	ea53 030a 	orrs.w	r3, r3, sl
 802379c:	d16c      	bne.n	8023878 <_strtod_l+0x8b8>
 802379e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80237a2:	2b00      	cmp	r3, #0
 80237a4:	d168      	bne.n	8023878 <_strtod_l+0x8b8>
 80237a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80237aa:	0d1b      	lsrs	r3, r3, #20
 80237ac:	051b      	lsls	r3, r3, #20
 80237ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80237b2:	d961      	bls.n	8023878 <_strtod_l+0x8b8>
 80237b4:	6963      	ldr	r3, [r4, #20]
 80237b6:	b913      	cbnz	r3, 80237be <_strtod_l+0x7fe>
 80237b8:	6923      	ldr	r3, [r4, #16]
 80237ba:	2b01      	cmp	r3, #1
 80237bc:	dd5c      	ble.n	8023878 <_strtod_l+0x8b8>
 80237be:	4621      	mov	r1, r4
 80237c0:	2201      	movs	r2, #1
 80237c2:	9805      	ldr	r0, [sp, #20]
 80237c4:	f003 f9a6 	bl	8026b14 <__lshift>
 80237c8:	4641      	mov	r1, r8
 80237ca:	4604      	mov	r4, r0
 80237cc:	f003 fa0e 	bl	8026bec <__mcmp>
 80237d0:	2800      	cmp	r0, #0
 80237d2:	dd51      	ble.n	8023878 <_strtod_l+0x8b8>
 80237d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80237d8:	9a08      	ldr	r2, [sp, #32]
 80237da:	0d1b      	lsrs	r3, r3, #20
 80237dc:	051b      	lsls	r3, r3, #20
 80237de:	2a00      	cmp	r2, #0
 80237e0:	d06b      	beq.n	80238ba <_strtod_l+0x8fa>
 80237e2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80237e6:	d868      	bhi.n	80238ba <_strtod_l+0x8fa>
 80237e8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80237ec:	f67f ae9d 	bls.w	802352a <_strtod_l+0x56a>
 80237f0:	4b0a      	ldr	r3, [pc, #40]	@ (802381c <_strtod_l+0x85c>)
 80237f2:	4650      	mov	r0, sl
 80237f4:	4659      	mov	r1, fp
 80237f6:	2200      	movs	r2, #0
 80237f8:	f7e4 fe46 	bl	8008488 <__aeabi_dmul>
 80237fc:	4b08      	ldr	r3, [pc, #32]	@ (8023820 <_strtod_l+0x860>)
 80237fe:	400b      	ands	r3, r1
 8023800:	4682      	mov	sl, r0
 8023802:	468b      	mov	fp, r1
 8023804:	2b00      	cmp	r3, #0
 8023806:	f47f ae05 	bne.w	8023414 <_strtod_l+0x454>
 802380a:	9a05      	ldr	r2, [sp, #20]
 802380c:	2322      	movs	r3, #34	@ 0x22
 802380e:	6013      	str	r3, [r2, #0]
 8023810:	e600      	b.n	8023414 <_strtod_l+0x454>
 8023812:	bf00      	nop
 8023814:	080317f8 	.word	0x080317f8
 8023818:	fffffc02 	.word	0xfffffc02
 802381c:	39500000 	.word	0x39500000
 8023820:	7ff00000 	.word	0x7ff00000
 8023824:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8023828:	d165      	bne.n	80238f6 <_strtod_l+0x936>
 802382a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802382c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8023830:	b35a      	cbz	r2, 802388a <_strtod_l+0x8ca>
 8023832:	4a9f      	ldr	r2, [pc, #636]	@ (8023ab0 <_strtod_l+0xaf0>)
 8023834:	4293      	cmp	r3, r2
 8023836:	d12b      	bne.n	8023890 <_strtod_l+0x8d0>
 8023838:	9b08      	ldr	r3, [sp, #32]
 802383a:	4651      	mov	r1, sl
 802383c:	b303      	cbz	r3, 8023880 <_strtod_l+0x8c0>
 802383e:	4b9d      	ldr	r3, [pc, #628]	@ (8023ab4 <_strtod_l+0xaf4>)
 8023840:	465a      	mov	r2, fp
 8023842:	4013      	ands	r3, r2
 8023844:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8023848:	f04f 32ff 	mov.w	r2, #4294967295
 802384c:	d81b      	bhi.n	8023886 <_strtod_l+0x8c6>
 802384e:	0d1b      	lsrs	r3, r3, #20
 8023850:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8023854:	fa02 f303 	lsl.w	r3, r2, r3
 8023858:	4299      	cmp	r1, r3
 802385a:	d119      	bne.n	8023890 <_strtod_l+0x8d0>
 802385c:	4b96      	ldr	r3, [pc, #600]	@ (8023ab8 <_strtod_l+0xaf8>)
 802385e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023860:	429a      	cmp	r2, r3
 8023862:	d102      	bne.n	802386a <_strtod_l+0x8aa>
 8023864:	3101      	adds	r1, #1
 8023866:	f43f adca 	beq.w	80233fe <_strtod_l+0x43e>
 802386a:	4b92      	ldr	r3, [pc, #584]	@ (8023ab4 <_strtod_l+0xaf4>)
 802386c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802386e:	401a      	ands	r2, r3
 8023870:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8023874:	f04f 0a00 	mov.w	sl, #0
 8023878:	9b08      	ldr	r3, [sp, #32]
 802387a:	2b00      	cmp	r3, #0
 802387c:	d1b8      	bne.n	80237f0 <_strtod_l+0x830>
 802387e:	e5c9      	b.n	8023414 <_strtod_l+0x454>
 8023880:	f04f 33ff 	mov.w	r3, #4294967295
 8023884:	e7e8      	b.n	8023858 <_strtod_l+0x898>
 8023886:	4613      	mov	r3, r2
 8023888:	e7e6      	b.n	8023858 <_strtod_l+0x898>
 802388a:	ea53 030a 	orrs.w	r3, r3, sl
 802388e:	d0a1      	beq.n	80237d4 <_strtod_l+0x814>
 8023890:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023892:	b1db      	cbz	r3, 80238cc <_strtod_l+0x90c>
 8023894:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023896:	4213      	tst	r3, r2
 8023898:	d0ee      	beq.n	8023878 <_strtod_l+0x8b8>
 802389a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802389c:	9a08      	ldr	r2, [sp, #32]
 802389e:	4650      	mov	r0, sl
 80238a0:	4659      	mov	r1, fp
 80238a2:	b1bb      	cbz	r3, 80238d4 <_strtod_l+0x914>
 80238a4:	f7ff fb6e 	bl	8022f84 <sulp>
 80238a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80238ac:	ec53 2b10 	vmov	r2, r3, d0
 80238b0:	f7e4 fc34 	bl	800811c <__adddf3>
 80238b4:	4682      	mov	sl, r0
 80238b6:	468b      	mov	fp, r1
 80238b8:	e7de      	b.n	8023878 <_strtod_l+0x8b8>
 80238ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80238be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80238c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80238c6:	f04f 3aff 	mov.w	sl, #4294967295
 80238ca:	e7d5      	b.n	8023878 <_strtod_l+0x8b8>
 80238cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80238ce:	ea13 0f0a 	tst.w	r3, sl
 80238d2:	e7e1      	b.n	8023898 <_strtod_l+0x8d8>
 80238d4:	f7ff fb56 	bl	8022f84 <sulp>
 80238d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80238dc:	ec53 2b10 	vmov	r2, r3, d0
 80238e0:	f7e4 fc1a 	bl	8008118 <__aeabi_dsub>
 80238e4:	2200      	movs	r2, #0
 80238e6:	2300      	movs	r3, #0
 80238e8:	4682      	mov	sl, r0
 80238ea:	468b      	mov	fp, r1
 80238ec:	f7e5 f834 	bl	8008958 <__aeabi_dcmpeq>
 80238f0:	2800      	cmp	r0, #0
 80238f2:	d0c1      	beq.n	8023878 <_strtod_l+0x8b8>
 80238f4:	e619      	b.n	802352a <_strtod_l+0x56a>
 80238f6:	4641      	mov	r1, r8
 80238f8:	4620      	mov	r0, r4
 80238fa:	f003 faef 	bl	8026edc <__ratio>
 80238fe:	ec57 6b10 	vmov	r6, r7, d0
 8023902:	2200      	movs	r2, #0
 8023904:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8023908:	4630      	mov	r0, r6
 802390a:	4639      	mov	r1, r7
 802390c:	f7e5 f838 	bl	8008980 <__aeabi_dcmple>
 8023910:	2800      	cmp	r0, #0
 8023912:	d06f      	beq.n	80239f4 <_strtod_l+0xa34>
 8023914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023916:	2b00      	cmp	r3, #0
 8023918:	d17a      	bne.n	8023a10 <_strtod_l+0xa50>
 802391a:	f1ba 0f00 	cmp.w	sl, #0
 802391e:	d158      	bne.n	80239d2 <_strtod_l+0xa12>
 8023920:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023922:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8023926:	2b00      	cmp	r3, #0
 8023928:	d15a      	bne.n	80239e0 <_strtod_l+0xa20>
 802392a:	4b64      	ldr	r3, [pc, #400]	@ (8023abc <_strtod_l+0xafc>)
 802392c:	2200      	movs	r2, #0
 802392e:	4630      	mov	r0, r6
 8023930:	4639      	mov	r1, r7
 8023932:	f7e5 f81b 	bl	800896c <__aeabi_dcmplt>
 8023936:	2800      	cmp	r0, #0
 8023938:	d159      	bne.n	80239ee <_strtod_l+0xa2e>
 802393a:	4630      	mov	r0, r6
 802393c:	4639      	mov	r1, r7
 802393e:	4b60      	ldr	r3, [pc, #384]	@ (8023ac0 <_strtod_l+0xb00>)
 8023940:	2200      	movs	r2, #0
 8023942:	f7e4 fda1 	bl	8008488 <__aeabi_dmul>
 8023946:	4606      	mov	r6, r0
 8023948:	460f      	mov	r7, r1
 802394a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 802394e:	9606      	str	r6, [sp, #24]
 8023950:	9307      	str	r3, [sp, #28]
 8023952:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023956:	4d57      	ldr	r5, [pc, #348]	@ (8023ab4 <_strtod_l+0xaf4>)
 8023958:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 802395c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802395e:	401d      	ands	r5, r3
 8023960:	4b58      	ldr	r3, [pc, #352]	@ (8023ac4 <_strtod_l+0xb04>)
 8023962:	429d      	cmp	r5, r3
 8023964:	f040 80b2 	bne.w	8023acc <_strtod_l+0xb0c>
 8023968:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802396a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 802396e:	ec4b ab10 	vmov	d0, sl, fp
 8023972:	f003 f9eb 	bl	8026d4c <__ulp>
 8023976:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802397a:	ec51 0b10 	vmov	r0, r1, d0
 802397e:	f7e4 fd83 	bl	8008488 <__aeabi_dmul>
 8023982:	4652      	mov	r2, sl
 8023984:	465b      	mov	r3, fp
 8023986:	f7e4 fbc9 	bl	800811c <__adddf3>
 802398a:	460b      	mov	r3, r1
 802398c:	4949      	ldr	r1, [pc, #292]	@ (8023ab4 <_strtod_l+0xaf4>)
 802398e:	4a4e      	ldr	r2, [pc, #312]	@ (8023ac8 <_strtod_l+0xb08>)
 8023990:	4019      	ands	r1, r3
 8023992:	4291      	cmp	r1, r2
 8023994:	4682      	mov	sl, r0
 8023996:	d942      	bls.n	8023a1e <_strtod_l+0xa5e>
 8023998:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802399a:	4b47      	ldr	r3, [pc, #284]	@ (8023ab8 <_strtod_l+0xaf8>)
 802399c:	429a      	cmp	r2, r3
 802399e:	d103      	bne.n	80239a8 <_strtod_l+0x9e8>
 80239a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80239a2:	3301      	adds	r3, #1
 80239a4:	f43f ad2b 	beq.w	80233fe <_strtod_l+0x43e>
 80239a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8023ab8 <_strtod_l+0xaf8>
 80239ac:	f04f 3aff 	mov.w	sl, #4294967295
 80239b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80239b2:	9805      	ldr	r0, [sp, #20]
 80239b4:	f002 fe96 	bl	80266e4 <_Bfree>
 80239b8:	9805      	ldr	r0, [sp, #20]
 80239ba:	4649      	mov	r1, r9
 80239bc:	f002 fe92 	bl	80266e4 <_Bfree>
 80239c0:	9805      	ldr	r0, [sp, #20]
 80239c2:	4641      	mov	r1, r8
 80239c4:	f002 fe8e 	bl	80266e4 <_Bfree>
 80239c8:	9805      	ldr	r0, [sp, #20]
 80239ca:	4621      	mov	r1, r4
 80239cc:	f002 fe8a 	bl	80266e4 <_Bfree>
 80239d0:	e618      	b.n	8023604 <_strtod_l+0x644>
 80239d2:	f1ba 0f01 	cmp.w	sl, #1
 80239d6:	d103      	bne.n	80239e0 <_strtod_l+0xa20>
 80239d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80239da:	2b00      	cmp	r3, #0
 80239dc:	f43f ada5 	beq.w	802352a <_strtod_l+0x56a>
 80239e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8023a90 <_strtod_l+0xad0>
 80239e4:	4f35      	ldr	r7, [pc, #212]	@ (8023abc <_strtod_l+0xafc>)
 80239e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80239ea:	2600      	movs	r6, #0
 80239ec:	e7b1      	b.n	8023952 <_strtod_l+0x992>
 80239ee:	4f34      	ldr	r7, [pc, #208]	@ (8023ac0 <_strtod_l+0xb00>)
 80239f0:	2600      	movs	r6, #0
 80239f2:	e7aa      	b.n	802394a <_strtod_l+0x98a>
 80239f4:	4b32      	ldr	r3, [pc, #200]	@ (8023ac0 <_strtod_l+0xb00>)
 80239f6:	4630      	mov	r0, r6
 80239f8:	4639      	mov	r1, r7
 80239fa:	2200      	movs	r2, #0
 80239fc:	f7e4 fd44 	bl	8008488 <__aeabi_dmul>
 8023a00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023a02:	4606      	mov	r6, r0
 8023a04:	460f      	mov	r7, r1
 8023a06:	2b00      	cmp	r3, #0
 8023a08:	d09f      	beq.n	802394a <_strtod_l+0x98a>
 8023a0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8023a0e:	e7a0      	b.n	8023952 <_strtod_l+0x992>
 8023a10:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8023a98 <_strtod_l+0xad8>
 8023a14:	ed8d 7b06 	vstr	d7, [sp, #24]
 8023a18:	ec57 6b17 	vmov	r6, r7, d7
 8023a1c:	e799      	b.n	8023952 <_strtod_l+0x992>
 8023a1e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8023a22:	9b08      	ldr	r3, [sp, #32]
 8023a24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8023a28:	2b00      	cmp	r3, #0
 8023a2a:	d1c1      	bne.n	80239b0 <_strtod_l+0x9f0>
 8023a2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8023a30:	0d1b      	lsrs	r3, r3, #20
 8023a32:	051b      	lsls	r3, r3, #20
 8023a34:	429d      	cmp	r5, r3
 8023a36:	d1bb      	bne.n	80239b0 <_strtod_l+0x9f0>
 8023a38:	4630      	mov	r0, r6
 8023a3a:	4639      	mov	r1, r7
 8023a3c:	f7e5 f884 	bl	8008b48 <__aeabi_d2lz>
 8023a40:	f7e4 fcf4 	bl	800842c <__aeabi_l2d>
 8023a44:	4602      	mov	r2, r0
 8023a46:	460b      	mov	r3, r1
 8023a48:	4630      	mov	r0, r6
 8023a4a:	4639      	mov	r1, r7
 8023a4c:	f7e4 fb64 	bl	8008118 <__aeabi_dsub>
 8023a50:	460b      	mov	r3, r1
 8023a52:	4602      	mov	r2, r0
 8023a54:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8023a58:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8023a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023a5e:	ea46 060a 	orr.w	r6, r6, sl
 8023a62:	431e      	orrs	r6, r3
 8023a64:	d06f      	beq.n	8023b46 <_strtod_l+0xb86>
 8023a66:	a30e      	add	r3, pc, #56	@ (adr r3, 8023aa0 <_strtod_l+0xae0>)
 8023a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a6c:	f7e4 ff7e 	bl	800896c <__aeabi_dcmplt>
 8023a70:	2800      	cmp	r0, #0
 8023a72:	f47f accf 	bne.w	8023414 <_strtod_l+0x454>
 8023a76:	a30c      	add	r3, pc, #48	@ (adr r3, 8023aa8 <_strtod_l+0xae8>)
 8023a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8023a80:	f7e4 ff92 	bl	80089a8 <__aeabi_dcmpgt>
 8023a84:	2800      	cmp	r0, #0
 8023a86:	d093      	beq.n	80239b0 <_strtod_l+0x9f0>
 8023a88:	e4c4      	b.n	8023414 <_strtod_l+0x454>
 8023a8a:	bf00      	nop
 8023a8c:	f3af 8000 	nop.w
 8023a90:	00000000 	.word	0x00000000
 8023a94:	bff00000 	.word	0xbff00000
 8023a98:	00000000 	.word	0x00000000
 8023a9c:	3ff00000 	.word	0x3ff00000
 8023aa0:	94a03595 	.word	0x94a03595
 8023aa4:	3fdfffff 	.word	0x3fdfffff
 8023aa8:	35afe535 	.word	0x35afe535
 8023aac:	3fe00000 	.word	0x3fe00000
 8023ab0:	000fffff 	.word	0x000fffff
 8023ab4:	7ff00000 	.word	0x7ff00000
 8023ab8:	7fefffff 	.word	0x7fefffff
 8023abc:	3ff00000 	.word	0x3ff00000
 8023ac0:	3fe00000 	.word	0x3fe00000
 8023ac4:	7fe00000 	.word	0x7fe00000
 8023ac8:	7c9fffff 	.word	0x7c9fffff
 8023acc:	9b08      	ldr	r3, [sp, #32]
 8023ace:	b323      	cbz	r3, 8023b1a <_strtod_l+0xb5a>
 8023ad0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8023ad4:	d821      	bhi.n	8023b1a <_strtod_l+0xb5a>
 8023ad6:	a328      	add	r3, pc, #160	@ (adr r3, 8023b78 <_strtod_l+0xbb8>)
 8023ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023adc:	4630      	mov	r0, r6
 8023ade:	4639      	mov	r1, r7
 8023ae0:	f7e4 ff4e 	bl	8008980 <__aeabi_dcmple>
 8023ae4:	b1a0      	cbz	r0, 8023b10 <_strtod_l+0xb50>
 8023ae6:	4639      	mov	r1, r7
 8023ae8:	4630      	mov	r0, r6
 8023aea:	f7e4 ffa5 	bl	8008a38 <__aeabi_d2uiz>
 8023aee:	2801      	cmp	r0, #1
 8023af0:	bf38      	it	cc
 8023af2:	2001      	movcc	r0, #1
 8023af4:	f7e4 fc4e 	bl	8008394 <__aeabi_ui2d>
 8023af8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023afa:	4606      	mov	r6, r0
 8023afc:	460f      	mov	r7, r1
 8023afe:	b9fb      	cbnz	r3, 8023b40 <_strtod_l+0xb80>
 8023b00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8023b04:	9014      	str	r0, [sp, #80]	@ 0x50
 8023b06:	9315      	str	r3, [sp, #84]	@ 0x54
 8023b08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8023b0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8023b10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023b12:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8023b16:	1b5b      	subs	r3, r3, r5
 8023b18:	9311      	str	r3, [sp, #68]	@ 0x44
 8023b1a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8023b1e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8023b22:	f003 f913 	bl	8026d4c <__ulp>
 8023b26:	4650      	mov	r0, sl
 8023b28:	ec53 2b10 	vmov	r2, r3, d0
 8023b2c:	4659      	mov	r1, fp
 8023b2e:	f7e4 fcab 	bl	8008488 <__aeabi_dmul>
 8023b32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8023b36:	f7e4 faf1 	bl	800811c <__adddf3>
 8023b3a:	4682      	mov	sl, r0
 8023b3c:	468b      	mov	fp, r1
 8023b3e:	e770      	b.n	8023a22 <_strtod_l+0xa62>
 8023b40:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8023b44:	e7e0      	b.n	8023b08 <_strtod_l+0xb48>
 8023b46:	a30e      	add	r3, pc, #56	@ (adr r3, 8023b80 <_strtod_l+0xbc0>)
 8023b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b4c:	f7e4 ff0e 	bl	800896c <__aeabi_dcmplt>
 8023b50:	e798      	b.n	8023a84 <_strtod_l+0xac4>
 8023b52:	2300      	movs	r3, #0
 8023b54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023b56:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8023b58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023b5a:	6013      	str	r3, [r2, #0]
 8023b5c:	f7ff ba6d 	b.w	802303a <_strtod_l+0x7a>
 8023b60:	2a65      	cmp	r2, #101	@ 0x65
 8023b62:	f43f ab66 	beq.w	8023232 <_strtod_l+0x272>
 8023b66:	2a45      	cmp	r2, #69	@ 0x45
 8023b68:	f43f ab63 	beq.w	8023232 <_strtod_l+0x272>
 8023b6c:	2301      	movs	r3, #1
 8023b6e:	f7ff bb9e 	b.w	80232ae <_strtod_l+0x2ee>
 8023b72:	bf00      	nop
 8023b74:	f3af 8000 	nop.w
 8023b78:	ffc00000 	.word	0xffc00000
 8023b7c:	41dfffff 	.word	0x41dfffff
 8023b80:	94a03595 	.word	0x94a03595
 8023b84:	3fcfffff 	.word	0x3fcfffff

08023b88 <_strtod_r>:
 8023b88:	4b01      	ldr	r3, [pc, #4]	@ (8023b90 <_strtod_r+0x8>)
 8023b8a:	f7ff ba19 	b.w	8022fc0 <_strtod_l>
 8023b8e:	bf00      	nop
 8023b90:	200004c0 	.word	0x200004c0

08023b94 <_strtol_l.constprop.0>:
 8023b94:	2b24      	cmp	r3, #36	@ 0x24
 8023b96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023b9a:	4686      	mov	lr, r0
 8023b9c:	4690      	mov	r8, r2
 8023b9e:	d801      	bhi.n	8023ba4 <_strtol_l.constprop.0+0x10>
 8023ba0:	2b01      	cmp	r3, #1
 8023ba2:	d106      	bne.n	8023bb2 <_strtol_l.constprop.0+0x1e>
 8023ba4:	f001 faea 	bl	802517c <__errno>
 8023ba8:	2316      	movs	r3, #22
 8023baa:	6003      	str	r3, [r0, #0]
 8023bac:	2000      	movs	r0, #0
 8023bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023bb2:	4834      	ldr	r0, [pc, #208]	@ (8023c84 <_strtol_l.constprop.0+0xf0>)
 8023bb4:	460d      	mov	r5, r1
 8023bb6:	462a      	mov	r2, r5
 8023bb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023bbc:	5d06      	ldrb	r6, [r0, r4]
 8023bbe:	f016 0608 	ands.w	r6, r6, #8
 8023bc2:	d1f8      	bne.n	8023bb6 <_strtol_l.constprop.0+0x22>
 8023bc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8023bc6:	d12d      	bne.n	8023c24 <_strtol_l.constprop.0+0x90>
 8023bc8:	782c      	ldrb	r4, [r5, #0]
 8023bca:	2601      	movs	r6, #1
 8023bcc:	1c95      	adds	r5, r2, #2
 8023bce:	f033 0210 	bics.w	r2, r3, #16
 8023bd2:	d109      	bne.n	8023be8 <_strtol_l.constprop.0+0x54>
 8023bd4:	2c30      	cmp	r4, #48	@ 0x30
 8023bd6:	d12a      	bne.n	8023c2e <_strtol_l.constprop.0+0x9a>
 8023bd8:	782a      	ldrb	r2, [r5, #0]
 8023bda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8023bde:	2a58      	cmp	r2, #88	@ 0x58
 8023be0:	d125      	bne.n	8023c2e <_strtol_l.constprop.0+0x9a>
 8023be2:	786c      	ldrb	r4, [r5, #1]
 8023be4:	2310      	movs	r3, #16
 8023be6:	3502      	adds	r5, #2
 8023be8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8023bec:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023bf0:	2200      	movs	r2, #0
 8023bf2:	fbbc f9f3 	udiv	r9, ip, r3
 8023bf6:	4610      	mov	r0, r2
 8023bf8:	fb03 ca19 	mls	sl, r3, r9, ip
 8023bfc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8023c00:	2f09      	cmp	r7, #9
 8023c02:	d81b      	bhi.n	8023c3c <_strtol_l.constprop.0+0xa8>
 8023c04:	463c      	mov	r4, r7
 8023c06:	42a3      	cmp	r3, r4
 8023c08:	dd27      	ble.n	8023c5a <_strtol_l.constprop.0+0xc6>
 8023c0a:	1c57      	adds	r7, r2, #1
 8023c0c:	d007      	beq.n	8023c1e <_strtol_l.constprop.0+0x8a>
 8023c0e:	4581      	cmp	r9, r0
 8023c10:	d320      	bcc.n	8023c54 <_strtol_l.constprop.0+0xc0>
 8023c12:	d101      	bne.n	8023c18 <_strtol_l.constprop.0+0x84>
 8023c14:	45a2      	cmp	sl, r4
 8023c16:	db1d      	blt.n	8023c54 <_strtol_l.constprop.0+0xc0>
 8023c18:	fb00 4003 	mla	r0, r0, r3, r4
 8023c1c:	2201      	movs	r2, #1
 8023c1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023c22:	e7eb      	b.n	8023bfc <_strtol_l.constprop.0+0x68>
 8023c24:	2c2b      	cmp	r4, #43	@ 0x2b
 8023c26:	bf04      	itt	eq
 8023c28:	782c      	ldrbeq	r4, [r5, #0]
 8023c2a:	1c95      	addeq	r5, r2, #2
 8023c2c:	e7cf      	b.n	8023bce <_strtol_l.constprop.0+0x3a>
 8023c2e:	2b00      	cmp	r3, #0
 8023c30:	d1da      	bne.n	8023be8 <_strtol_l.constprop.0+0x54>
 8023c32:	2c30      	cmp	r4, #48	@ 0x30
 8023c34:	bf0c      	ite	eq
 8023c36:	2308      	moveq	r3, #8
 8023c38:	230a      	movne	r3, #10
 8023c3a:	e7d5      	b.n	8023be8 <_strtol_l.constprop.0+0x54>
 8023c3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8023c40:	2f19      	cmp	r7, #25
 8023c42:	d801      	bhi.n	8023c48 <_strtol_l.constprop.0+0xb4>
 8023c44:	3c37      	subs	r4, #55	@ 0x37
 8023c46:	e7de      	b.n	8023c06 <_strtol_l.constprop.0+0x72>
 8023c48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8023c4c:	2f19      	cmp	r7, #25
 8023c4e:	d804      	bhi.n	8023c5a <_strtol_l.constprop.0+0xc6>
 8023c50:	3c57      	subs	r4, #87	@ 0x57
 8023c52:	e7d8      	b.n	8023c06 <_strtol_l.constprop.0+0x72>
 8023c54:	f04f 32ff 	mov.w	r2, #4294967295
 8023c58:	e7e1      	b.n	8023c1e <_strtol_l.constprop.0+0x8a>
 8023c5a:	1c53      	adds	r3, r2, #1
 8023c5c:	d108      	bne.n	8023c70 <_strtol_l.constprop.0+0xdc>
 8023c5e:	2322      	movs	r3, #34	@ 0x22
 8023c60:	f8ce 3000 	str.w	r3, [lr]
 8023c64:	4660      	mov	r0, ip
 8023c66:	f1b8 0f00 	cmp.w	r8, #0
 8023c6a:	d0a0      	beq.n	8023bae <_strtol_l.constprop.0+0x1a>
 8023c6c:	1e69      	subs	r1, r5, #1
 8023c6e:	e006      	b.n	8023c7e <_strtol_l.constprop.0+0xea>
 8023c70:	b106      	cbz	r6, 8023c74 <_strtol_l.constprop.0+0xe0>
 8023c72:	4240      	negs	r0, r0
 8023c74:	f1b8 0f00 	cmp.w	r8, #0
 8023c78:	d099      	beq.n	8023bae <_strtol_l.constprop.0+0x1a>
 8023c7a:	2a00      	cmp	r2, #0
 8023c7c:	d1f6      	bne.n	8023c6c <_strtol_l.constprop.0+0xd8>
 8023c7e:	f8c8 1000 	str.w	r1, [r8]
 8023c82:	e794      	b.n	8023bae <_strtol_l.constprop.0+0x1a>
 8023c84:	08031821 	.word	0x08031821

08023c88 <_strtol_r>:
 8023c88:	f7ff bf84 	b.w	8023b94 <_strtol_l.constprop.0>

08023c8c <swapfunc>:
 8023c8c:	2b02      	cmp	r3, #2
 8023c8e:	b510      	push	{r4, lr}
 8023c90:	d00a      	beq.n	8023ca8 <swapfunc+0x1c>
 8023c92:	0892      	lsrs	r2, r2, #2
 8023c94:	3a01      	subs	r2, #1
 8023c96:	6803      	ldr	r3, [r0, #0]
 8023c98:	680c      	ldr	r4, [r1, #0]
 8023c9a:	f840 4b04 	str.w	r4, [r0], #4
 8023c9e:	2a00      	cmp	r2, #0
 8023ca0:	f841 3b04 	str.w	r3, [r1], #4
 8023ca4:	dcf6      	bgt.n	8023c94 <swapfunc+0x8>
 8023ca6:	bd10      	pop	{r4, pc}
 8023ca8:	4402      	add	r2, r0
 8023caa:	780c      	ldrb	r4, [r1, #0]
 8023cac:	7803      	ldrb	r3, [r0, #0]
 8023cae:	f800 4b01 	strb.w	r4, [r0], #1
 8023cb2:	f801 3b01 	strb.w	r3, [r1], #1
 8023cb6:	1a13      	subs	r3, r2, r0
 8023cb8:	2b00      	cmp	r3, #0
 8023cba:	dcf6      	bgt.n	8023caa <swapfunc+0x1e>
 8023cbc:	e7f3      	b.n	8023ca6 <swapfunc+0x1a>

08023cbe <med3.constprop.0>:
 8023cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023cc0:	460f      	mov	r7, r1
 8023cc2:	4616      	mov	r6, r2
 8023cc4:	4604      	mov	r4, r0
 8023cc6:	461d      	mov	r5, r3
 8023cc8:	4798      	blx	r3
 8023cca:	2800      	cmp	r0, #0
 8023ccc:	4631      	mov	r1, r6
 8023cce:	4638      	mov	r0, r7
 8023cd0:	da0c      	bge.n	8023cec <med3.constprop.0+0x2e>
 8023cd2:	47a8      	blx	r5
 8023cd4:	2800      	cmp	r0, #0
 8023cd6:	da02      	bge.n	8023cde <med3.constprop.0+0x20>
 8023cd8:	463c      	mov	r4, r7
 8023cda:	4620      	mov	r0, r4
 8023cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023cde:	4631      	mov	r1, r6
 8023ce0:	4620      	mov	r0, r4
 8023ce2:	47a8      	blx	r5
 8023ce4:	2800      	cmp	r0, #0
 8023ce6:	daf8      	bge.n	8023cda <med3.constprop.0+0x1c>
 8023ce8:	4634      	mov	r4, r6
 8023cea:	e7f6      	b.n	8023cda <med3.constprop.0+0x1c>
 8023cec:	47a8      	blx	r5
 8023cee:	2800      	cmp	r0, #0
 8023cf0:	dcf2      	bgt.n	8023cd8 <med3.constprop.0+0x1a>
 8023cf2:	4631      	mov	r1, r6
 8023cf4:	4620      	mov	r0, r4
 8023cf6:	47a8      	blx	r5
 8023cf8:	2800      	cmp	r0, #0
 8023cfa:	daf5      	bge.n	8023ce8 <med3.constprop.0+0x2a>
 8023cfc:	e7ed      	b.n	8023cda <med3.constprop.0+0x1c>

08023cfe <qsort>:
 8023cfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d02:	b095      	sub	sp, #84	@ 0x54
 8023d04:	4606      	mov	r6, r0
 8023d06:	9300      	str	r3, [sp, #0]
 8023d08:	ea40 0302 	orr.w	r3, r0, r2
 8023d0c:	079b      	lsls	r3, r3, #30
 8023d0e:	4614      	mov	r4, r2
 8023d10:	d118      	bne.n	8023d44 <qsort+0x46>
 8023d12:	f1b2 0804 	subs.w	r8, r2, #4
 8023d16:	bf18      	it	ne
 8023d18:	f04f 0801 	movne.w	r8, #1
 8023d1c:	2300      	movs	r3, #0
 8023d1e:	9301      	str	r3, [sp, #4]
 8023d20:	fb04 f701 	mul.w	r7, r4, r1
 8023d24:	19f3      	adds	r3, r6, r7
 8023d26:	2906      	cmp	r1, #6
 8023d28:	eb06 0b04 	add.w	fp, r6, r4
 8023d2c:	9302      	str	r3, [sp, #8]
 8023d2e:	d828      	bhi.n	8023d82 <qsort+0x84>
 8023d30:	9b02      	ldr	r3, [sp, #8]
 8023d32:	459b      	cmp	fp, r3
 8023d34:	d310      	bcc.n	8023d58 <qsort+0x5a>
 8023d36:	9b01      	ldr	r3, [sp, #4]
 8023d38:	2b00      	cmp	r3, #0
 8023d3a:	f040 8117 	bne.w	8023f6c <qsort+0x26e>
 8023d3e:	b015      	add	sp, #84	@ 0x54
 8023d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d44:	f04f 0802 	mov.w	r8, #2
 8023d48:	e7e8      	b.n	8023d1c <qsort+0x1e>
 8023d4a:	4643      	mov	r3, r8
 8023d4c:	4622      	mov	r2, r4
 8023d4e:	4639      	mov	r1, r7
 8023d50:	4628      	mov	r0, r5
 8023d52:	f7ff ff9b 	bl	8023c8c <swapfunc>
 8023d56:	e00f      	b.n	8023d78 <qsort+0x7a>
 8023d58:	465d      	mov	r5, fp
 8023d5a:	e00e      	b.n	8023d7a <qsort+0x7c>
 8023d5c:	1b2f      	subs	r7, r5, r4
 8023d5e:	9b00      	ldr	r3, [sp, #0]
 8023d60:	4629      	mov	r1, r5
 8023d62:	4638      	mov	r0, r7
 8023d64:	4798      	blx	r3
 8023d66:	2800      	cmp	r0, #0
 8023d68:	dd09      	ble.n	8023d7e <qsort+0x80>
 8023d6a:	f1b8 0f00 	cmp.w	r8, #0
 8023d6e:	d1ec      	bne.n	8023d4a <qsort+0x4c>
 8023d70:	682b      	ldr	r3, [r5, #0]
 8023d72:	683a      	ldr	r2, [r7, #0]
 8023d74:	602a      	str	r2, [r5, #0]
 8023d76:	603b      	str	r3, [r7, #0]
 8023d78:	463d      	mov	r5, r7
 8023d7a:	42ae      	cmp	r6, r5
 8023d7c:	d3ee      	bcc.n	8023d5c <qsort+0x5e>
 8023d7e:	44a3      	add	fp, r4
 8023d80:	e7d6      	b.n	8023d30 <qsort+0x32>
 8023d82:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8023d86:	1b3f      	subs	r7, r7, r4
 8023d88:	2907      	cmp	r1, #7
 8023d8a:	fb04 6909 	mla	r9, r4, r9, r6
 8023d8e:	4437      	add	r7, r6
 8023d90:	d021      	beq.n	8023dd6 <qsort+0xd8>
 8023d92:	2928      	cmp	r1, #40	@ 0x28
 8023d94:	d944      	bls.n	8023e20 <qsort+0x122>
 8023d96:	08cd      	lsrs	r5, r1, #3
 8023d98:	4365      	muls	r5, r4
 8023d9a:	9b00      	ldr	r3, [sp, #0]
 8023d9c:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8023da0:	1971      	adds	r1, r6, r5
 8023da2:	4630      	mov	r0, r6
 8023da4:	f7ff ff8b 	bl	8023cbe <med3.constprop.0>
 8023da8:	4649      	mov	r1, r9
 8023daa:	eb09 0205 	add.w	r2, r9, r5
 8023dae:	9b00      	ldr	r3, [sp, #0]
 8023db0:	4682      	mov	sl, r0
 8023db2:	1b48      	subs	r0, r1, r5
 8023db4:	f7ff ff83 	bl	8023cbe <med3.constprop.0>
 8023db8:	463a      	mov	r2, r7
 8023dba:	9b00      	ldr	r3, [sp, #0]
 8023dbc:	4681      	mov	r9, r0
 8023dbe:	1b79      	subs	r1, r7, r5
 8023dc0:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8023dc4:	f7ff ff7b 	bl	8023cbe <med3.constprop.0>
 8023dc8:	4602      	mov	r2, r0
 8023dca:	4649      	mov	r1, r9
 8023dcc:	9b00      	ldr	r3, [sp, #0]
 8023dce:	4650      	mov	r0, sl
 8023dd0:	f7ff ff75 	bl	8023cbe <med3.constprop.0>
 8023dd4:	4681      	mov	r9, r0
 8023dd6:	f1b8 0f00 	cmp.w	r8, #0
 8023dda:	d124      	bne.n	8023e26 <qsort+0x128>
 8023ddc:	6833      	ldr	r3, [r6, #0]
 8023dde:	f8d9 2000 	ldr.w	r2, [r9]
 8023de2:	6032      	str	r2, [r6, #0]
 8023de4:	f8c9 3000 	str.w	r3, [r9]
 8023de8:	46d9      	mov	r9, fp
 8023dea:	46ba      	mov	sl, r7
 8023dec:	465d      	mov	r5, fp
 8023dee:	2300      	movs	r3, #0
 8023df0:	45b9      	cmp	r9, r7
 8023df2:	d857      	bhi.n	8023ea4 <qsort+0x1a6>
 8023df4:	9303      	str	r3, [sp, #12]
 8023df6:	4631      	mov	r1, r6
 8023df8:	9b00      	ldr	r3, [sp, #0]
 8023dfa:	4648      	mov	r0, r9
 8023dfc:	4798      	blx	r3
 8023dfe:	2800      	cmp	r0, #0
 8023e00:	9b03      	ldr	r3, [sp, #12]
 8023e02:	dc2c      	bgt.n	8023e5e <qsort+0x160>
 8023e04:	d10a      	bne.n	8023e1c <qsort+0x11e>
 8023e06:	f1b8 0f00 	cmp.w	r8, #0
 8023e0a:	d113      	bne.n	8023e34 <qsort+0x136>
 8023e0c:	682b      	ldr	r3, [r5, #0]
 8023e0e:	f8d9 2000 	ldr.w	r2, [r9]
 8023e12:	602a      	str	r2, [r5, #0]
 8023e14:	f8c9 3000 	str.w	r3, [r9]
 8023e18:	4425      	add	r5, r4
 8023e1a:	2301      	movs	r3, #1
 8023e1c:	44a1      	add	r9, r4
 8023e1e:	e7e7      	b.n	8023df0 <qsort+0xf2>
 8023e20:	463a      	mov	r2, r7
 8023e22:	46b2      	mov	sl, r6
 8023e24:	e7d1      	b.n	8023dca <qsort+0xcc>
 8023e26:	4643      	mov	r3, r8
 8023e28:	4622      	mov	r2, r4
 8023e2a:	4649      	mov	r1, r9
 8023e2c:	4630      	mov	r0, r6
 8023e2e:	f7ff ff2d 	bl	8023c8c <swapfunc>
 8023e32:	e7d9      	b.n	8023de8 <qsort+0xea>
 8023e34:	4643      	mov	r3, r8
 8023e36:	4622      	mov	r2, r4
 8023e38:	4649      	mov	r1, r9
 8023e3a:	4628      	mov	r0, r5
 8023e3c:	f7ff ff26 	bl	8023c8c <swapfunc>
 8023e40:	e7ea      	b.n	8023e18 <qsort+0x11a>
 8023e42:	d10b      	bne.n	8023e5c <qsort+0x15e>
 8023e44:	f1b8 0f00 	cmp.w	r8, #0
 8023e48:	d11e      	bne.n	8023e88 <qsort+0x18a>
 8023e4a:	683b      	ldr	r3, [r7, #0]
 8023e4c:	f8da 2000 	ldr.w	r2, [sl]
 8023e50:	603a      	str	r2, [r7, #0]
 8023e52:	f8ca 3000 	str.w	r3, [sl]
 8023e56:	ebaa 0a04 	sub.w	sl, sl, r4
 8023e5a:	2301      	movs	r3, #1
 8023e5c:	1b3f      	subs	r7, r7, r4
 8023e5e:	45b9      	cmp	r9, r7
 8023e60:	d820      	bhi.n	8023ea4 <qsort+0x1a6>
 8023e62:	9303      	str	r3, [sp, #12]
 8023e64:	4631      	mov	r1, r6
 8023e66:	9b00      	ldr	r3, [sp, #0]
 8023e68:	4638      	mov	r0, r7
 8023e6a:	4798      	blx	r3
 8023e6c:	2800      	cmp	r0, #0
 8023e6e:	9b03      	ldr	r3, [sp, #12]
 8023e70:	dae7      	bge.n	8023e42 <qsort+0x144>
 8023e72:	f1b8 0f00 	cmp.w	r8, #0
 8023e76:	d10e      	bne.n	8023e96 <qsort+0x198>
 8023e78:	f8d9 3000 	ldr.w	r3, [r9]
 8023e7c:	683a      	ldr	r2, [r7, #0]
 8023e7e:	f8c9 2000 	str.w	r2, [r9]
 8023e82:	603b      	str	r3, [r7, #0]
 8023e84:	1b3f      	subs	r7, r7, r4
 8023e86:	e7c8      	b.n	8023e1a <qsort+0x11c>
 8023e88:	4643      	mov	r3, r8
 8023e8a:	4622      	mov	r2, r4
 8023e8c:	4651      	mov	r1, sl
 8023e8e:	4638      	mov	r0, r7
 8023e90:	f7ff fefc 	bl	8023c8c <swapfunc>
 8023e94:	e7df      	b.n	8023e56 <qsort+0x158>
 8023e96:	4643      	mov	r3, r8
 8023e98:	4622      	mov	r2, r4
 8023e9a:	4639      	mov	r1, r7
 8023e9c:	4648      	mov	r0, r9
 8023e9e:	f7ff fef5 	bl	8023c8c <swapfunc>
 8023ea2:	e7ef      	b.n	8023e84 <qsort+0x186>
 8023ea4:	b9fb      	cbnz	r3, 8023ee6 <qsort+0x1e8>
 8023ea6:	9b02      	ldr	r3, [sp, #8]
 8023ea8:	459b      	cmp	fp, r3
 8023eaa:	f4bf af44 	bcs.w	8023d36 <qsort+0x38>
 8023eae:	465d      	mov	r5, fp
 8023eb0:	e015      	b.n	8023ede <qsort+0x1e0>
 8023eb2:	4643      	mov	r3, r8
 8023eb4:	4622      	mov	r2, r4
 8023eb6:	4639      	mov	r1, r7
 8023eb8:	4628      	mov	r0, r5
 8023eba:	f7ff fee7 	bl	8023c8c <swapfunc>
 8023ebe:	e00d      	b.n	8023edc <qsort+0x1de>
 8023ec0:	1b2f      	subs	r7, r5, r4
 8023ec2:	9b00      	ldr	r3, [sp, #0]
 8023ec4:	4629      	mov	r1, r5
 8023ec6:	4638      	mov	r0, r7
 8023ec8:	4798      	blx	r3
 8023eca:	2800      	cmp	r0, #0
 8023ecc:	dd09      	ble.n	8023ee2 <qsort+0x1e4>
 8023ece:	f1b8 0f00 	cmp.w	r8, #0
 8023ed2:	d1ee      	bne.n	8023eb2 <qsort+0x1b4>
 8023ed4:	682b      	ldr	r3, [r5, #0]
 8023ed6:	683a      	ldr	r2, [r7, #0]
 8023ed8:	602a      	str	r2, [r5, #0]
 8023eda:	603b      	str	r3, [r7, #0]
 8023edc:	463d      	mov	r5, r7
 8023ede:	42ae      	cmp	r6, r5
 8023ee0:	d3ee      	bcc.n	8023ec0 <qsort+0x1c2>
 8023ee2:	44a3      	add	fp, r4
 8023ee4:	e7df      	b.n	8023ea6 <qsort+0x1a8>
 8023ee6:	eba9 0b05 	sub.w	fp, r9, r5
 8023eea:	1baa      	subs	r2, r5, r6
 8023eec:	455a      	cmp	r2, fp
 8023eee:	bfa8      	it	ge
 8023ef0:	465a      	movge	r2, fp
 8023ef2:	b12a      	cbz	r2, 8023f00 <qsort+0x202>
 8023ef4:	4643      	mov	r3, r8
 8023ef6:	eba9 0102 	sub.w	r1, r9, r2
 8023efa:	4630      	mov	r0, r6
 8023efc:	f7ff fec6 	bl	8023c8c <swapfunc>
 8023f00:	9b02      	ldr	r3, [sp, #8]
 8023f02:	eba3 020a 	sub.w	r2, r3, sl
 8023f06:	ebaa 0507 	sub.w	r5, sl, r7
 8023f0a:	1b12      	subs	r2, r2, r4
 8023f0c:	42aa      	cmp	r2, r5
 8023f0e:	bf28      	it	cs
 8023f10:	462a      	movcs	r2, r5
 8023f12:	b12a      	cbz	r2, 8023f20 <qsort+0x222>
 8023f14:	9902      	ldr	r1, [sp, #8]
 8023f16:	4643      	mov	r3, r8
 8023f18:	1a89      	subs	r1, r1, r2
 8023f1a:	4648      	mov	r0, r9
 8023f1c:	f7ff feb6 	bl	8023c8c <swapfunc>
 8023f20:	9b02      	ldr	r3, [sp, #8]
 8023f22:	455d      	cmp	r5, fp
 8023f24:	465f      	mov	r7, fp
 8023f26:	eba3 0005 	sub.w	r0, r3, r5
 8023f2a:	d904      	bls.n	8023f36 <qsort+0x238>
 8023f2c:	4633      	mov	r3, r6
 8023f2e:	462f      	mov	r7, r5
 8023f30:	4606      	mov	r6, r0
 8023f32:	465d      	mov	r5, fp
 8023f34:	4618      	mov	r0, r3
 8023f36:	42a5      	cmp	r5, r4
 8023f38:	d921      	bls.n	8023f7e <qsort+0x280>
 8023f3a:	fbb5 f1f4 	udiv	r1, r5, r4
 8023f3e:	9b01      	ldr	r3, [sp, #4]
 8023f40:	2b07      	cmp	r3, #7
 8023f42:	d80d      	bhi.n	8023f60 <qsort+0x262>
 8023f44:	fbb7 f7f4 	udiv	r7, r7, r4
 8023f48:	aa14      	add	r2, sp, #80	@ 0x50
 8023f4a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8023f4e:	f843 6c40 	str.w	r6, [r3, #-64]
 8023f52:	f843 7c3c 	str.w	r7, [r3, #-60]
 8023f56:	9b01      	ldr	r3, [sp, #4]
 8023f58:	3301      	adds	r3, #1
 8023f5a:	9301      	str	r3, [sp, #4]
 8023f5c:	4606      	mov	r6, r0
 8023f5e:	e6df      	b.n	8023d20 <qsort+0x22>
 8023f60:	9b00      	ldr	r3, [sp, #0]
 8023f62:	4622      	mov	r2, r4
 8023f64:	f7ff fecb 	bl	8023cfe <qsort>
 8023f68:	42a7      	cmp	r7, r4
 8023f6a:	d80b      	bhi.n	8023f84 <qsort+0x286>
 8023f6c:	9b01      	ldr	r3, [sp, #4]
 8023f6e:	aa14      	add	r2, sp, #80	@ 0x50
 8023f70:	3b01      	subs	r3, #1
 8023f72:	9301      	str	r3, [sp, #4]
 8023f74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8023f78:	e953 0110 	ldrd	r0, r1, [r3, #-64]	@ 0x40
 8023f7c:	e7ee      	b.n	8023f5c <qsort+0x25e>
 8023f7e:	42a7      	cmp	r7, r4
 8023f80:	f67f aed9 	bls.w	8023d36 <qsort+0x38>
 8023f84:	fbb7 f1f4 	udiv	r1, r7, r4
 8023f88:	4630      	mov	r0, r6
 8023f8a:	e7e7      	b.n	8023f5c <qsort+0x25e>

08023f8c <__cvt>:
 8023f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023f90:	ec57 6b10 	vmov	r6, r7, d0
 8023f94:	2f00      	cmp	r7, #0
 8023f96:	460c      	mov	r4, r1
 8023f98:	4619      	mov	r1, r3
 8023f9a:	463b      	mov	r3, r7
 8023f9c:	bfbb      	ittet	lt
 8023f9e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8023fa2:	461f      	movlt	r7, r3
 8023fa4:	2300      	movge	r3, #0
 8023fa6:	232d      	movlt	r3, #45	@ 0x2d
 8023fa8:	700b      	strb	r3, [r1, #0]
 8023faa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023fac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8023fb0:	4691      	mov	r9, r2
 8023fb2:	f023 0820 	bic.w	r8, r3, #32
 8023fb6:	bfbc      	itt	lt
 8023fb8:	4632      	movlt	r2, r6
 8023fba:	4616      	movlt	r6, r2
 8023fbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8023fc0:	d005      	beq.n	8023fce <__cvt+0x42>
 8023fc2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8023fc6:	d100      	bne.n	8023fca <__cvt+0x3e>
 8023fc8:	3401      	adds	r4, #1
 8023fca:	2102      	movs	r1, #2
 8023fcc:	e000      	b.n	8023fd0 <__cvt+0x44>
 8023fce:	2103      	movs	r1, #3
 8023fd0:	ab03      	add	r3, sp, #12
 8023fd2:	9301      	str	r3, [sp, #4]
 8023fd4:	ab02      	add	r3, sp, #8
 8023fd6:	9300      	str	r3, [sp, #0]
 8023fd8:	ec47 6b10 	vmov	d0, r6, r7
 8023fdc:	4653      	mov	r3, sl
 8023fde:	4622      	mov	r2, r4
 8023fe0:	f001 f9b2 	bl	8025348 <_dtoa_r>
 8023fe4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8023fe8:	4605      	mov	r5, r0
 8023fea:	d119      	bne.n	8024020 <__cvt+0x94>
 8023fec:	f019 0f01 	tst.w	r9, #1
 8023ff0:	d00e      	beq.n	8024010 <__cvt+0x84>
 8023ff2:	eb00 0904 	add.w	r9, r0, r4
 8023ff6:	2200      	movs	r2, #0
 8023ff8:	2300      	movs	r3, #0
 8023ffa:	4630      	mov	r0, r6
 8023ffc:	4639      	mov	r1, r7
 8023ffe:	f7e4 fcab 	bl	8008958 <__aeabi_dcmpeq>
 8024002:	b108      	cbz	r0, 8024008 <__cvt+0x7c>
 8024004:	f8cd 900c 	str.w	r9, [sp, #12]
 8024008:	2230      	movs	r2, #48	@ 0x30
 802400a:	9b03      	ldr	r3, [sp, #12]
 802400c:	454b      	cmp	r3, r9
 802400e:	d31e      	bcc.n	802404e <__cvt+0xc2>
 8024010:	9b03      	ldr	r3, [sp, #12]
 8024012:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024014:	1b5b      	subs	r3, r3, r5
 8024016:	4628      	mov	r0, r5
 8024018:	6013      	str	r3, [r2, #0]
 802401a:	b004      	add	sp, #16
 802401c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024020:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8024024:	eb00 0904 	add.w	r9, r0, r4
 8024028:	d1e5      	bne.n	8023ff6 <__cvt+0x6a>
 802402a:	7803      	ldrb	r3, [r0, #0]
 802402c:	2b30      	cmp	r3, #48	@ 0x30
 802402e:	d10a      	bne.n	8024046 <__cvt+0xba>
 8024030:	2200      	movs	r2, #0
 8024032:	2300      	movs	r3, #0
 8024034:	4630      	mov	r0, r6
 8024036:	4639      	mov	r1, r7
 8024038:	f7e4 fc8e 	bl	8008958 <__aeabi_dcmpeq>
 802403c:	b918      	cbnz	r0, 8024046 <__cvt+0xba>
 802403e:	f1c4 0401 	rsb	r4, r4, #1
 8024042:	f8ca 4000 	str.w	r4, [sl]
 8024046:	f8da 3000 	ldr.w	r3, [sl]
 802404a:	4499      	add	r9, r3
 802404c:	e7d3      	b.n	8023ff6 <__cvt+0x6a>
 802404e:	1c59      	adds	r1, r3, #1
 8024050:	9103      	str	r1, [sp, #12]
 8024052:	701a      	strb	r2, [r3, #0]
 8024054:	e7d9      	b.n	802400a <__cvt+0x7e>

08024056 <__exponent>:
 8024056:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024058:	2900      	cmp	r1, #0
 802405a:	bfba      	itte	lt
 802405c:	4249      	neglt	r1, r1
 802405e:	232d      	movlt	r3, #45	@ 0x2d
 8024060:	232b      	movge	r3, #43	@ 0x2b
 8024062:	2909      	cmp	r1, #9
 8024064:	7002      	strb	r2, [r0, #0]
 8024066:	7043      	strb	r3, [r0, #1]
 8024068:	dd29      	ble.n	80240be <__exponent+0x68>
 802406a:	f10d 0307 	add.w	r3, sp, #7
 802406e:	461d      	mov	r5, r3
 8024070:	270a      	movs	r7, #10
 8024072:	461a      	mov	r2, r3
 8024074:	fbb1 f6f7 	udiv	r6, r1, r7
 8024078:	fb07 1416 	mls	r4, r7, r6, r1
 802407c:	3430      	adds	r4, #48	@ 0x30
 802407e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8024082:	460c      	mov	r4, r1
 8024084:	2c63      	cmp	r4, #99	@ 0x63
 8024086:	f103 33ff 	add.w	r3, r3, #4294967295
 802408a:	4631      	mov	r1, r6
 802408c:	dcf1      	bgt.n	8024072 <__exponent+0x1c>
 802408e:	3130      	adds	r1, #48	@ 0x30
 8024090:	1e94      	subs	r4, r2, #2
 8024092:	f803 1c01 	strb.w	r1, [r3, #-1]
 8024096:	1c41      	adds	r1, r0, #1
 8024098:	4623      	mov	r3, r4
 802409a:	42ab      	cmp	r3, r5
 802409c:	d30a      	bcc.n	80240b4 <__exponent+0x5e>
 802409e:	f10d 0309 	add.w	r3, sp, #9
 80240a2:	1a9b      	subs	r3, r3, r2
 80240a4:	42ac      	cmp	r4, r5
 80240a6:	bf88      	it	hi
 80240a8:	2300      	movhi	r3, #0
 80240aa:	3302      	adds	r3, #2
 80240ac:	4403      	add	r3, r0
 80240ae:	1a18      	subs	r0, r3, r0
 80240b0:	b003      	add	sp, #12
 80240b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80240b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80240b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80240bc:	e7ed      	b.n	802409a <__exponent+0x44>
 80240be:	2330      	movs	r3, #48	@ 0x30
 80240c0:	3130      	adds	r1, #48	@ 0x30
 80240c2:	7083      	strb	r3, [r0, #2]
 80240c4:	70c1      	strb	r1, [r0, #3]
 80240c6:	1d03      	adds	r3, r0, #4
 80240c8:	e7f1      	b.n	80240ae <__exponent+0x58>
	...

080240cc <_printf_float>:
 80240cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240d0:	b08d      	sub	sp, #52	@ 0x34
 80240d2:	460c      	mov	r4, r1
 80240d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80240d8:	4616      	mov	r6, r2
 80240da:	461f      	mov	r7, r3
 80240dc:	4605      	mov	r5, r0
 80240de:	f000 fff3 	bl	80250c8 <_localeconv_r>
 80240e2:	6803      	ldr	r3, [r0, #0]
 80240e4:	9304      	str	r3, [sp, #16]
 80240e6:	4618      	mov	r0, r3
 80240e8:	f7e4 f80a 	bl	8008100 <strlen>
 80240ec:	2300      	movs	r3, #0
 80240ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80240f0:	f8d8 3000 	ldr.w	r3, [r8]
 80240f4:	9005      	str	r0, [sp, #20]
 80240f6:	3307      	adds	r3, #7
 80240f8:	f023 0307 	bic.w	r3, r3, #7
 80240fc:	f103 0208 	add.w	r2, r3, #8
 8024100:	f894 a018 	ldrb.w	sl, [r4, #24]
 8024104:	f8d4 b000 	ldr.w	fp, [r4]
 8024108:	f8c8 2000 	str.w	r2, [r8]
 802410c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8024110:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8024114:	9307      	str	r3, [sp, #28]
 8024116:	f8cd 8018 	str.w	r8, [sp, #24]
 802411a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 802411e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024122:	4b9c      	ldr	r3, [pc, #624]	@ (8024394 <_printf_float+0x2c8>)
 8024124:	f04f 32ff 	mov.w	r2, #4294967295
 8024128:	f7e4 fc48 	bl	80089bc <__aeabi_dcmpun>
 802412c:	bb70      	cbnz	r0, 802418c <_printf_float+0xc0>
 802412e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024132:	4b98      	ldr	r3, [pc, #608]	@ (8024394 <_printf_float+0x2c8>)
 8024134:	f04f 32ff 	mov.w	r2, #4294967295
 8024138:	f7e4 fc22 	bl	8008980 <__aeabi_dcmple>
 802413c:	bb30      	cbnz	r0, 802418c <_printf_float+0xc0>
 802413e:	2200      	movs	r2, #0
 8024140:	2300      	movs	r3, #0
 8024142:	4640      	mov	r0, r8
 8024144:	4649      	mov	r1, r9
 8024146:	f7e4 fc11 	bl	800896c <__aeabi_dcmplt>
 802414a:	b110      	cbz	r0, 8024152 <_printf_float+0x86>
 802414c:	232d      	movs	r3, #45	@ 0x2d
 802414e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024152:	4a91      	ldr	r2, [pc, #580]	@ (8024398 <_printf_float+0x2cc>)
 8024154:	4b91      	ldr	r3, [pc, #580]	@ (802439c <_printf_float+0x2d0>)
 8024156:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802415a:	bf94      	ite	ls
 802415c:	4690      	movls	r8, r2
 802415e:	4698      	movhi	r8, r3
 8024160:	2303      	movs	r3, #3
 8024162:	6123      	str	r3, [r4, #16]
 8024164:	f02b 0304 	bic.w	r3, fp, #4
 8024168:	6023      	str	r3, [r4, #0]
 802416a:	f04f 0900 	mov.w	r9, #0
 802416e:	9700      	str	r7, [sp, #0]
 8024170:	4633      	mov	r3, r6
 8024172:	aa0b      	add	r2, sp, #44	@ 0x2c
 8024174:	4621      	mov	r1, r4
 8024176:	4628      	mov	r0, r5
 8024178:	f000 f9d2 	bl	8024520 <_printf_common>
 802417c:	3001      	adds	r0, #1
 802417e:	f040 808d 	bne.w	802429c <_printf_float+0x1d0>
 8024182:	f04f 30ff 	mov.w	r0, #4294967295
 8024186:	b00d      	add	sp, #52	@ 0x34
 8024188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802418c:	4642      	mov	r2, r8
 802418e:	464b      	mov	r3, r9
 8024190:	4640      	mov	r0, r8
 8024192:	4649      	mov	r1, r9
 8024194:	f7e4 fc12 	bl	80089bc <__aeabi_dcmpun>
 8024198:	b140      	cbz	r0, 80241ac <_printf_float+0xe0>
 802419a:	464b      	mov	r3, r9
 802419c:	2b00      	cmp	r3, #0
 802419e:	bfbc      	itt	lt
 80241a0:	232d      	movlt	r3, #45	@ 0x2d
 80241a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80241a6:	4a7e      	ldr	r2, [pc, #504]	@ (80243a0 <_printf_float+0x2d4>)
 80241a8:	4b7e      	ldr	r3, [pc, #504]	@ (80243a4 <_printf_float+0x2d8>)
 80241aa:	e7d4      	b.n	8024156 <_printf_float+0x8a>
 80241ac:	6863      	ldr	r3, [r4, #4]
 80241ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80241b2:	9206      	str	r2, [sp, #24]
 80241b4:	1c5a      	adds	r2, r3, #1
 80241b6:	d13b      	bne.n	8024230 <_printf_float+0x164>
 80241b8:	2306      	movs	r3, #6
 80241ba:	6063      	str	r3, [r4, #4]
 80241bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80241c0:	2300      	movs	r3, #0
 80241c2:	6022      	str	r2, [r4, #0]
 80241c4:	9303      	str	r3, [sp, #12]
 80241c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80241c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80241cc:	ab09      	add	r3, sp, #36	@ 0x24
 80241ce:	9300      	str	r3, [sp, #0]
 80241d0:	6861      	ldr	r1, [r4, #4]
 80241d2:	ec49 8b10 	vmov	d0, r8, r9
 80241d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80241da:	4628      	mov	r0, r5
 80241dc:	f7ff fed6 	bl	8023f8c <__cvt>
 80241e0:	9b06      	ldr	r3, [sp, #24]
 80241e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80241e4:	2b47      	cmp	r3, #71	@ 0x47
 80241e6:	4680      	mov	r8, r0
 80241e8:	d129      	bne.n	802423e <_printf_float+0x172>
 80241ea:	1cc8      	adds	r0, r1, #3
 80241ec:	db02      	blt.n	80241f4 <_printf_float+0x128>
 80241ee:	6863      	ldr	r3, [r4, #4]
 80241f0:	4299      	cmp	r1, r3
 80241f2:	dd41      	ble.n	8024278 <_printf_float+0x1ac>
 80241f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80241f8:	fa5f fa8a 	uxtb.w	sl, sl
 80241fc:	3901      	subs	r1, #1
 80241fe:	4652      	mov	r2, sl
 8024200:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8024204:	9109      	str	r1, [sp, #36]	@ 0x24
 8024206:	f7ff ff26 	bl	8024056 <__exponent>
 802420a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802420c:	1813      	adds	r3, r2, r0
 802420e:	2a01      	cmp	r2, #1
 8024210:	4681      	mov	r9, r0
 8024212:	6123      	str	r3, [r4, #16]
 8024214:	dc02      	bgt.n	802421c <_printf_float+0x150>
 8024216:	6822      	ldr	r2, [r4, #0]
 8024218:	07d2      	lsls	r2, r2, #31
 802421a:	d501      	bpl.n	8024220 <_printf_float+0x154>
 802421c:	3301      	adds	r3, #1
 802421e:	6123      	str	r3, [r4, #16]
 8024220:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8024224:	2b00      	cmp	r3, #0
 8024226:	d0a2      	beq.n	802416e <_printf_float+0xa2>
 8024228:	232d      	movs	r3, #45	@ 0x2d
 802422a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802422e:	e79e      	b.n	802416e <_printf_float+0xa2>
 8024230:	9a06      	ldr	r2, [sp, #24]
 8024232:	2a47      	cmp	r2, #71	@ 0x47
 8024234:	d1c2      	bne.n	80241bc <_printf_float+0xf0>
 8024236:	2b00      	cmp	r3, #0
 8024238:	d1c0      	bne.n	80241bc <_printf_float+0xf0>
 802423a:	2301      	movs	r3, #1
 802423c:	e7bd      	b.n	80241ba <_printf_float+0xee>
 802423e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8024242:	d9db      	bls.n	80241fc <_printf_float+0x130>
 8024244:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8024248:	d118      	bne.n	802427c <_printf_float+0x1b0>
 802424a:	2900      	cmp	r1, #0
 802424c:	6863      	ldr	r3, [r4, #4]
 802424e:	dd0b      	ble.n	8024268 <_printf_float+0x19c>
 8024250:	6121      	str	r1, [r4, #16]
 8024252:	b913      	cbnz	r3, 802425a <_printf_float+0x18e>
 8024254:	6822      	ldr	r2, [r4, #0]
 8024256:	07d0      	lsls	r0, r2, #31
 8024258:	d502      	bpl.n	8024260 <_printf_float+0x194>
 802425a:	3301      	adds	r3, #1
 802425c:	440b      	add	r3, r1
 802425e:	6123      	str	r3, [r4, #16]
 8024260:	65a1      	str	r1, [r4, #88]	@ 0x58
 8024262:	f04f 0900 	mov.w	r9, #0
 8024266:	e7db      	b.n	8024220 <_printf_float+0x154>
 8024268:	b913      	cbnz	r3, 8024270 <_printf_float+0x1a4>
 802426a:	6822      	ldr	r2, [r4, #0]
 802426c:	07d2      	lsls	r2, r2, #31
 802426e:	d501      	bpl.n	8024274 <_printf_float+0x1a8>
 8024270:	3302      	adds	r3, #2
 8024272:	e7f4      	b.n	802425e <_printf_float+0x192>
 8024274:	2301      	movs	r3, #1
 8024276:	e7f2      	b.n	802425e <_printf_float+0x192>
 8024278:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 802427c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802427e:	4299      	cmp	r1, r3
 8024280:	db05      	blt.n	802428e <_printf_float+0x1c2>
 8024282:	6823      	ldr	r3, [r4, #0]
 8024284:	6121      	str	r1, [r4, #16]
 8024286:	07d8      	lsls	r0, r3, #31
 8024288:	d5ea      	bpl.n	8024260 <_printf_float+0x194>
 802428a:	1c4b      	adds	r3, r1, #1
 802428c:	e7e7      	b.n	802425e <_printf_float+0x192>
 802428e:	2900      	cmp	r1, #0
 8024290:	bfd4      	ite	le
 8024292:	f1c1 0202 	rsble	r2, r1, #2
 8024296:	2201      	movgt	r2, #1
 8024298:	4413      	add	r3, r2
 802429a:	e7e0      	b.n	802425e <_printf_float+0x192>
 802429c:	6823      	ldr	r3, [r4, #0]
 802429e:	055a      	lsls	r2, r3, #21
 80242a0:	d407      	bmi.n	80242b2 <_printf_float+0x1e6>
 80242a2:	6923      	ldr	r3, [r4, #16]
 80242a4:	4642      	mov	r2, r8
 80242a6:	4631      	mov	r1, r6
 80242a8:	4628      	mov	r0, r5
 80242aa:	47b8      	blx	r7
 80242ac:	3001      	adds	r0, #1
 80242ae:	d12b      	bne.n	8024308 <_printf_float+0x23c>
 80242b0:	e767      	b.n	8024182 <_printf_float+0xb6>
 80242b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80242b6:	f240 80dd 	bls.w	8024474 <_printf_float+0x3a8>
 80242ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80242be:	2200      	movs	r2, #0
 80242c0:	2300      	movs	r3, #0
 80242c2:	f7e4 fb49 	bl	8008958 <__aeabi_dcmpeq>
 80242c6:	2800      	cmp	r0, #0
 80242c8:	d033      	beq.n	8024332 <_printf_float+0x266>
 80242ca:	4a37      	ldr	r2, [pc, #220]	@ (80243a8 <_printf_float+0x2dc>)
 80242cc:	2301      	movs	r3, #1
 80242ce:	4631      	mov	r1, r6
 80242d0:	4628      	mov	r0, r5
 80242d2:	47b8      	blx	r7
 80242d4:	3001      	adds	r0, #1
 80242d6:	f43f af54 	beq.w	8024182 <_printf_float+0xb6>
 80242da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80242de:	4543      	cmp	r3, r8
 80242e0:	db02      	blt.n	80242e8 <_printf_float+0x21c>
 80242e2:	6823      	ldr	r3, [r4, #0]
 80242e4:	07d8      	lsls	r0, r3, #31
 80242e6:	d50f      	bpl.n	8024308 <_printf_float+0x23c>
 80242e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80242ec:	4631      	mov	r1, r6
 80242ee:	4628      	mov	r0, r5
 80242f0:	47b8      	blx	r7
 80242f2:	3001      	adds	r0, #1
 80242f4:	f43f af45 	beq.w	8024182 <_printf_float+0xb6>
 80242f8:	f04f 0900 	mov.w	r9, #0
 80242fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8024300:	f104 0a1a 	add.w	sl, r4, #26
 8024304:	45c8      	cmp	r8, r9
 8024306:	dc09      	bgt.n	802431c <_printf_float+0x250>
 8024308:	6823      	ldr	r3, [r4, #0]
 802430a:	079b      	lsls	r3, r3, #30
 802430c:	f100 8103 	bmi.w	8024516 <_printf_float+0x44a>
 8024310:	68e0      	ldr	r0, [r4, #12]
 8024312:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024314:	4298      	cmp	r0, r3
 8024316:	bfb8      	it	lt
 8024318:	4618      	movlt	r0, r3
 802431a:	e734      	b.n	8024186 <_printf_float+0xba>
 802431c:	2301      	movs	r3, #1
 802431e:	4652      	mov	r2, sl
 8024320:	4631      	mov	r1, r6
 8024322:	4628      	mov	r0, r5
 8024324:	47b8      	blx	r7
 8024326:	3001      	adds	r0, #1
 8024328:	f43f af2b 	beq.w	8024182 <_printf_float+0xb6>
 802432c:	f109 0901 	add.w	r9, r9, #1
 8024330:	e7e8      	b.n	8024304 <_printf_float+0x238>
 8024332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024334:	2b00      	cmp	r3, #0
 8024336:	dc39      	bgt.n	80243ac <_printf_float+0x2e0>
 8024338:	4a1b      	ldr	r2, [pc, #108]	@ (80243a8 <_printf_float+0x2dc>)
 802433a:	2301      	movs	r3, #1
 802433c:	4631      	mov	r1, r6
 802433e:	4628      	mov	r0, r5
 8024340:	47b8      	blx	r7
 8024342:	3001      	adds	r0, #1
 8024344:	f43f af1d 	beq.w	8024182 <_printf_float+0xb6>
 8024348:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 802434c:	ea59 0303 	orrs.w	r3, r9, r3
 8024350:	d102      	bne.n	8024358 <_printf_float+0x28c>
 8024352:	6823      	ldr	r3, [r4, #0]
 8024354:	07d9      	lsls	r1, r3, #31
 8024356:	d5d7      	bpl.n	8024308 <_printf_float+0x23c>
 8024358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802435c:	4631      	mov	r1, r6
 802435e:	4628      	mov	r0, r5
 8024360:	47b8      	blx	r7
 8024362:	3001      	adds	r0, #1
 8024364:	f43f af0d 	beq.w	8024182 <_printf_float+0xb6>
 8024368:	f04f 0a00 	mov.w	sl, #0
 802436c:	f104 0b1a 	add.w	fp, r4, #26
 8024370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024372:	425b      	negs	r3, r3
 8024374:	4553      	cmp	r3, sl
 8024376:	dc01      	bgt.n	802437c <_printf_float+0x2b0>
 8024378:	464b      	mov	r3, r9
 802437a:	e793      	b.n	80242a4 <_printf_float+0x1d8>
 802437c:	2301      	movs	r3, #1
 802437e:	465a      	mov	r2, fp
 8024380:	4631      	mov	r1, r6
 8024382:	4628      	mov	r0, r5
 8024384:	47b8      	blx	r7
 8024386:	3001      	adds	r0, #1
 8024388:	f43f aefb 	beq.w	8024182 <_printf_float+0xb6>
 802438c:	f10a 0a01 	add.w	sl, sl, #1
 8024390:	e7ee      	b.n	8024370 <_printf_float+0x2a4>
 8024392:	bf00      	nop
 8024394:	7fefffff 	.word	0x7fefffff
 8024398:	08031921 	.word	0x08031921
 802439c:	08031925 	.word	0x08031925
 80243a0:	08031929 	.word	0x08031929
 80243a4:	0803192d 	.word	0x0803192d
 80243a8:	08031931 	.word	0x08031931
 80243ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80243ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80243b2:	4553      	cmp	r3, sl
 80243b4:	bfa8      	it	ge
 80243b6:	4653      	movge	r3, sl
 80243b8:	2b00      	cmp	r3, #0
 80243ba:	4699      	mov	r9, r3
 80243bc:	dc36      	bgt.n	802442c <_printf_float+0x360>
 80243be:	f04f 0b00 	mov.w	fp, #0
 80243c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80243c6:	f104 021a 	add.w	r2, r4, #26
 80243ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80243cc:	9306      	str	r3, [sp, #24]
 80243ce:	eba3 0309 	sub.w	r3, r3, r9
 80243d2:	455b      	cmp	r3, fp
 80243d4:	dc31      	bgt.n	802443a <_printf_float+0x36e>
 80243d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80243d8:	459a      	cmp	sl, r3
 80243da:	dc3a      	bgt.n	8024452 <_printf_float+0x386>
 80243dc:	6823      	ldr	r3, [r4, #0]
 80243de:	07da      	lsls	r2, r3, #31
 80243e0:	d437      	bmi.n	8024452 <_printf_float+0x386>
 80243e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80243e4:	ebaa 0903 	sub.w	r9, sl, r3
 80243e8:	9b06      	ldr	r3, [sp, #24]
 80243ea:	ebaa 0303 	sub.w	r3, sl, r3
 80243ee:	4599      	cmp	r9, r3
 80243f0:	bfa8      	it	ge
 80243f2:	4699      	movge	r9, r3
 80243f4:	f1b9 0f00 	cmp.w	r9, #0
 80243f8:	dc33      	bgt.n	8024462 <_printf_float+0x396>
 80243fa:	f04f 0800 	mov.w	r8, #0
 80243fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024402:	f104 0b1a 	add.w	fp, r4, #26
 8024406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024408:	ebaa 0303 	sub.w	r3, sl, r3
 802440c:	eba3 0309 	sub.w	r3, r3, r9
 8024410:	4543      	cmp	r3, r8
 8024412:	f77f af79 	ble.w	8024308 <_printf_float+0x23c>
 8024416:	2301      	movs	r3, #1
 8024418:	465a      	mov	r2, fp
 802441a:	4631      	mov	r1, r6
 802441c:	4628      	mov	r0, r5
 802441e:	47b8      	blx	r7
 8024420:	3001      	adds	r0, #1
 8024422:	f43f aeae 	beq.w	8024182 <_printf_float+0xb6>
 8024426:	f108 0801 	add.w	r8, r8, #1
 802442a:	e7ec      	b.n	8024406 <_printf_float+0x33a>
 802442c:	4642      	mov	r2, r8
 802442e:	4631      	mov	r1, r6
 8024430:	4628      	mov	r0, r5
 8024432:	47b8      	blx	r7
 8024434:	3001      	adds	r0, #1
 8024436:	d1c2      	bne.n	80243be <_printf_float+0x2f2>
 8024438:	e6a3      	b.n	8024182 <_printf_float+0xb6>
 802443a:	2301      	movs	r3, #1
 802443c:	4631      	mov	r1, r6
 802443e:	4628      	mov	r0, r5
 8024440:	9206      	str	r2, [sp, #24]
 8024442:	47b8      	blx	r7
 8024444:	3001      	adds	r0, #1
 8024446:	f43f ae9c 	beq.w	8024182 <_printf_float+0xb6>
 802444a:	9a06      	ldr	r2, [sp, #24]
 802444c:	f10b 0b01 	add.w	fp, fp, #1
 8024450:	e7bb      	b.n	80243ca <_printf_float+0x2fe>
 8024452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024456:	4631      	mov	r1, r6
 8024458:	4628      	mov	r0, r5
 802445a:	47b8      	blx	r7
 802445c:	3001      	adds	r0, #1
 802445e:	d1c0      	bne.n	80243e2 <_printf_float+0x316>
 8024460:	e68f      	b.n	8024182 <_printf_float+0xb6>
 8024462:	9a06      	ldr	r2, [sp, #24]
 8024464:	464b      	mov	r3, r9
 8024466:	4442      	add	r2, r8
 8024468:	4631      	mov	r1, r6
 802446a:	4628      	mov	r0, r5
 802446c:	47b8      	blx	r7
 802446e:	3001      	adds	r0, #1
 8024470:	d1c3      	bne.n	80243fa <_printf_float+0x32e>
 8024472:	e686      	b.n	8024182 <_printf_float+0xb6>
 8024474:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8024478:	f1ba 0f01 	cmp.w	sl, #1
 802447c:	dc01      	bgt.n	8024482 <_printf_float+0x3b6>
 802447e:	07db      	lsls	r3, r3, #31
 8024480:	d536      	bpl.n	80244f0 <_printf_float+0x424>
 8024482:	2301      	movs	r3, #1
 8024484:	4642      	mov	r2, r8
 8024486:	4631      	mov	r1, r6
 8024488:	4628      	mov	r0, r5
 802448a:	47b8      	blx	r7
 802448c:	3001      	adds	r0, #1
 802448e:	f43f ae78 	beq.w	8024182 <_printf_float+0xb6>
 8024492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024496:	4631      	mov	r1, r6
 8024498:	4628      	mov	r0, r5
 802449a:	47b8      	blx	r7
 802449c:	3001      	adds	r0, #1
 802449e:	f43f ae70 	beq.w	8024182 <_printf_float+0xb6>
 80244a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80244a6:	2200      	movs	r2, #0
 80244a8:	2300      	movs	r3, #0
 80244aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80244ae:	f7e4 fa53 	bl	8008958 <__aeabi_dcmpeq>
 80244b2:	b9c0      	cbnz	r0, 80244e6 <_printf_float+0x41a>
 80244b4:	4653      	mov	r3, sl
 80244b6:	f108 0201 	add.w	r2, r8, #1
 80244ba:	4631      	mov	r1, r6
 80244bc:	4628      	mov	r0, r5
 80244be:	47b8      	blx	r7
 80244c0:	3001      	adds	r0, #1
 80244c2:	d10c      	bne.n	80244de <_printf_float+0x412>
 80244c4:	e65d      	b.n	8024182 <_printf_float+0xb6>
 80244c6:	2301      	movs	r3, #1
 80244c8:	465a      	mov	r2, fp
 80244ca:	4631      	mov	r1, r6
 80244cc:	4628      	mov	r0, r5
 80244ce:	47b8      	blx	r7
 80244d0:	3001      	adds	r0, #1
 80244d2:	f43f ae56 	beq.w	8024182 <_printf_float+0xb6>
 80244d6:	f108 0801 	add.w	r8, r8, #1
 80244da:	45d0      	cmp	r8, sl
 80244dc:	dbf3      	blt.n	80244c6 <_printf_float+0x3fa>
 80244de:	464b      	mov	r3, r9
 80244e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80244e4:	e6df      	b.n	80242a6 <_printf_float+0x1da>
 80244e6:	f04f 0800 	mov.w	r8, #0
 80244ea:	f104 0b1a 	add.w	fp, r4, #26
 80244ee:	e7f4      	b.n	80244da <_printf_float+0x40e>
 80244f0:	2301      	movs	r3, #1
 80244f2:	4642      	mov	r2, r8
 80244f4:	e7e1      	b.n	80244ba <_printf_float+0x3ee>
 80244f6:	2301      	movs	r3, #1
 80244f8:	464a      	mov	r2, r9
 80244fa:	4631      	mov	r1, r6
 80244fc:	4628      	mov	r0, r5
 80244fe:	47b8      	blx	r7
 8024500:	3001      	adds	r0, #1
 8024502:	f43f ae3e 	beq.w	8024182 <_printf_float+0xb6>
 8024506:	f108 0801 	add.w	r8, r8, #1
 802450a:	68e3      	ldr	r3, [r4, #12]
 802450c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802450e:	1a5b      	subs	r3, r3, r1
 8024510:	4543      	cmp	r3, r8
 8024512:	dcf0      	bgt.n	80244f6 <_printf_float+0x42a>
 8024514:	e6fc      	b.n	8024310 <_printf_float+0x244>
 8024516:	f04f 0800 	mov.w	r8, #0
 802451a:	f104 0919 	add.w	r9, r4, #25
 802451e:	e7f4      	b.n	802450a <_printf_float+0x43e>

08024520 <_printf_common>:
 8024520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024524:	4616      	mov	r6, r2
 8024526:	4698      	mov	r8, r3
 8024528:	688a      	ldr	r2, [r1, #8]
 802452a:	690b      	ldr	r3, [r1, #16]
 802452c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8024530:	4293      	cmp	r3, r2
 8024532:	bfb8      	it	lt
 8024534:	4613      	movlt	r3, r2
 8024536:	6033      	str	r3, [r6, #0]
 8024538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802453c:	4607      	mov	r7, r0
 802453e:	460c      	mov	r4, r1
 8024540:	b10a      	cbz	r2, 8024546 <_printf_common+0x26>
 8024542:	3301      	adds	r3, #1
 8024544:	6033      	str	r3, [r6, #0]
 8024546:	6823      	ldr	r3, [r4, #0]
 8024548:	0699      	lsls	r1, r3, #26
 802454a:	bf42      	ittt	mi
 802454c:	6833      	ldrmi	r3, [r6, #0]
 802454e:	3302      	addmi	r3, #2
 8024550:	6033      	strmi	r3, [r6, #0]
 8024552:	6825      	ldr	r5, [r4, #0]
 8024554:	f015 0506 	ands.w	r5, r5, #6
 8024558:	d106      	bne.n	8024568 <_printf_common+0x48>
 802455a:	f104 0a19 	add.w	sl, r4, #25
 802455e:	68e3      	ldr	r3, [r4, #12]
 8024560:	6832      	ldr	r2, [r6, #0]
 8024562:	1a9b      	subs	r3, r3, r2
 8024564:	42ab      	cmp	r3, r5
 8024566:	dc26      	bgt.n	80245b6 <_printf_common+0x96>
 8024568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802456c:	6822      	ldr	r2, [r4, #0]
 802456e:	3b00      	subs	r3, #0
 8024570:	bf18      	it	ne
 8024572:	2301      	movne	r3, #1
 8024574:	0692      	lsls	r2, r2, #26
 8024576:	d42b      	bmi.n	80245d0 <_printf_common+0xb0>
 8024578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802457c:	4641      	mov	r1, r8
 802457e:	4638      	mov	r0, r7
 8024580:	47c8      	blx	r9
 8024582:	3001      	adds	r0, #1
 8024584:	d01e      	beq.n	80245c4 <_printf_common+0xa4>
 8024586:	6823      	ldr	r3, [r4, #0]
 8024588:	6922      	ldr	r2, [r4, #16]
 802458a:	f003 0306 	and.w	r3, r3, #6
 802458e:	2b04      	cmp	r3, #4
 8024590:	bf02      	ittt	eq
 8024592:	68e5      	ldreq	r5, [r4, #12]
 8024594:	6833      	ldreq	r3, [r6, #0]
 8024596:	1aed      	subeq	r5, r5, r3
 8024598:	68a3      	ldr	r3, [r4, #8]
 802459a:	bf0c      	ite	eq
 802459c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80245a0:	2500      	movne	r5, #0
 80245a2:	4293      	cmp	r3, r2
 80245a4:	bfc4      	itt	gt
 80245a6:	1a9b      	subgt	r3, r3, r2
 80245a8:	18ed      	addgt	r5, r5, r3
 80245aa:	2600      	movs	r6, #0
 80245ac:	341a      	adds	r4, #26
 80245ae:	42b5      	cmp	r5, r6
 80245b0:	d11a      	bne.n	80245e8 <_printf_common+0xc8>
 80245b2:	2000      	movs	r0, #0
 80245b4:	e008      	b.n	80245c8 <_printf_common+0xa8>
 80245b6:	2301      	movs	r3, #1
 80245b8:	4652      	mov	r2, sl
 80245ba:	4641      	mov	r1, r8
 80245bc:	4638      	mov	r0, r7
 80245be:	47c8      	blx	r9
 80245c0:	3001      	adds	r0, #1
 80245c2:	d103      	bne.n	80245cc <_printf_common+0xac>
 80245c4:	f04f 30ff 	mov.w	r0, #4294967295
 80245c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80245cc:	3501      	adds	r5, #1
 80245ce:	e7c6      	b.n	802455e <_printf_common+0x3e>
 80245d0:	18e1      	adds	r1, r4, r3
 80245d2:	1c5a      	adds	r2, r3, #1
 80245d4:	2030      	movs	r0, #48	@ 0x30
 80245d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80245da:	4422      	add	r2, r4
 80245dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80245e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80245e4:	3302      	adds	r3, #2
 80245e6:	e7c7      	b.n	8024578 <_printf_common+0x58>
 80245e8:	2301      	movs	r3, #1
 80245ea:	4622      	mov	r2, r4
 80245ec:	4641      	mov	r1, r8
 80245ee:	4638      	mov	r0, r7
 80245f0:	47c8      	blx	r9
 80245f2:	3001      	adds	r0, #1
 80245f4:	d0e6      	beq.n	80245c4 <_printf_common+0xa4>
 80245f6:	3601      	adds	r6, #1
 80245f8:	e7d9      	b.n	80245ae <_printf_common+0x8e>
	...

080245fc <_printf_i>:
 80245fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024600:	7e0f      	ldrb	r7, [r1, #24]
 8024602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024604:	2f78      	cmp	r7, #120	@ 0x78
 8024606:	4691      	mov	r9, r2
 8024608:	4680      	mov	r8, r0
 802460a:	460c      	mov	r4, r1
 802460c:	469a      	mov	sl, r3
 802460e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8024612:	d807      	bhi.n	8024624 <_printf_i+0x28>
 8024614:	2f62      	cmp	r7, #98	@ 0x62
 8024616:	d80a      	bhi.n	802462e <_printf_i+0x32>
 8024618:	2f00      	cmp	r7, #0
 802461a:	f000 80d2 	beq.w	80247c2 <_printf_i+0x1c6>
 802461e:	2f58      	cmp	r7, #88	@ 0x58
 8024620:	f000 80b9 	beq.w	8024796 <_printf_i+0x19a>
 8024624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802462c:	e03a      	b.n	80246a4 <_printf_i+0xa8>
 802462e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8024632:	2b15      	cmp	r3, #21
 8024634:	d8f6      	bhi.n	8024624 <_printf_i+0x28>
 8024636:	a101      	add	r1, pc, #4	@ (adr r1, 802463c <_printf_i+0x40>)
 8024638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802463c:	08024695 	.word	0x08024695
 8024640:	080246a9 	.word	0x080246a9
 8024644:	08024625 	.word	0x08024625
 8024648:	08024625 	.word	0x08024625
 802464c:	08024625 	.word	0x08024625
 8024650:	08024625 	.word	0x08024625
 8024654:	080246a9 	.word	0x080246a9
 8024658:	08024625 	.word	0x08024625
 802465c:	08024625 	.word	0x08024625
 8024660:	08024625 	.word	0x08024625
 8024664:	08024625 	.word	0x08024625
 8024668:	080247a9 	.word	0x080247a9
 802466c:	080246d3 	.word	0x080246d3
 8024670:	08024763 	.word	0x08024763
 8024674:	08024625 	.word	0x08024625
 8024678:	08024625 	.word	0x08024625
 802467c:	080247cb 	.word	0x080247cb
 8024680:	08024625 	.word	0x08024625
 8024684:	080246d3 	.word	0x080246d3
 8024688:	08024625 	.word	0x08024625
 802468c:	08024625 	.word	0x08024625
 8024690:	0802476b 	.word	0x0802476b
 8024694:	6833      	ldr	r3, [r6, #0]
 8024696:	1d1a      	adds	r2, r3, #4
 8024698:	681b      	ldr	r3, [r3, #0]
 802469a:	6032      	str	r2, [r6, #0]
 802469c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80246a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80246a4:	2301      	movs	r3, #1
 80246a6:	e09d      	b.n	80247e4 <_printf_i+0x1e8>
 80246a8:	6833      	ldr	r3, [r6, #0]
 80246aa:	6820      	ldr	r0, [r4, #0]
 80246ac:	1d19      	adds	r1, r3, #4
 80246ae:	6031      	str	r1, [r6, #0]
 80246b0:	0606      	lsls	r6, r0, #24
 80246b2:	d501      	bpl.n	80246b8 <_printf_i+0xbc>
 80246b4:	681d      	ldr	r5, [r3, #0]
 80246b6:	e003      	b.n	80246c0 <_printf_i+0xc4>
 80246b8:	0645      	lsls	r5, r0, #25
 80246ba:	d5fb      	bpl.n	80246b4 <_printf_i+0xb8>
 80246bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80246c0:	2d00      	cmp	r5, #0
 80246c2:	da03      	bge.n	80246cc <_printf_i+0xd0>
 80246c4:	232d      	movs	r3, #45	@ 0x2d
 80246c6:	426d      	negs	r5, r5
 80246c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80246cc:	4859      	ldr	r0, [pc, #356]	@ (8024834 <_printf_i+0x238>)
 80246ce:	230a      	movs	r3, #10
 80246d0:	e011      	b.n	80246f6 <_printf_i+0xfa>
 80246d2:	6821      	ldr	r1, [r4, #0]
 80246d4:	6833      	ldr	r3, [r6, #0]
 80246d6:	0608      	lsls	r0, r1, #24
 80246d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80246dc:	d402      	bmi.n	80246e4 <_printf_i+0xe8>
 80246de:	0649      	lsls	r1, r1, #25
 80246e0:	bf48      	it	mi
 80246e2:	b2ad      	uxthmi	r5, r5
 80246e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80246e6:	4853      	ldr	r0, [pc, #332]	@ (8024834 <_printf_i+0x238>)
 80246e8:	6033      	str	r3, [r6, #0]
 80246ea:	bf14      	ite	ne
 80246ec:	230a      	movne	r3, #10
 80246ee:	2308      	moveq	r3, #8
 80246f0:	2100      	movs	r1, #0
 80246f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80246f6:	6866      	ldr	r6, [r4, #4]
 80246f8:	60a6      	str	r6, [r4, #8]
 80246fa:	2e00      	cmp	r6, #0
 80246fc:	bfa2      	ittt	ge
 80246fe:	6821      	ldrge	r1, [r4, #0]
 8024700:	f021 0104 	bicge.w	r1, r1, #4
 8024704:	6021      	strge	r1, [r4, #0]
 8024706:	b90d      	cbnz	r5, 802470c <_printf_i+0x110>
 8024708:	2e00      	cmp	r6, #0
 802470a:	d04b      	beq.n	80247a4 <_printf_i+0x1a8>
 802470c:	4616      	mov	r6, r2
 802470e:	fbb5 f1f3 	udiv	r1, r5, r3
 8024712:	fb03 5711 	mls	r7, r3, r1, r5
 8024716:	5dc7      	ldrb	r7, [r0, r7]
 8024718:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802471c:	462f      	mov	r7, r5
 802471e:	42bb      	cmp	r3, r7
 8024720:	460d      	mov	r5, r1
 8024722:	d9f4      	bls.n	802470e <_printf_i+0x112>
 8024724:	2b08      	cmp	r3, #8
 8024726:	d10b      	bne.n	8024740 <_printf_i+0x144>
 8024728:	6823      	ldr	r3, [r4, #0]
 802472a:	07df      	lsls	r7, r3, #31
 802472c:	d508      	bpl.n	8024740 <_printf_i+0x144>
 802472e:	6923      	ldr	r3, [r4, #16]
 8024730:	6861      	ldr	r1, [r4, #4]
 8024732:	4299      	cmp	r1, r3
 8024734:	bfde      	ittt	le
 8024736:	2330      	movle	r3, #48	@ 0x30
 8024738:	f806 3c01 	strble.w	r3, [r6, #-1]
 802473c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8024740:	1b92      	subs	r2, r2, r6
 8024742:	6122      	str	r2, [r4, #16]
 8024744:	f8cd a000 	str.w	sl, [sp]
 8024748:	464b      	mov	r3, r9
 802474a:	aa03      	add	r2, sp, #12
 802474c:	4621      	mov	r1, r4
 802474e:	4640      	mov	r0, r8
 8024750:	f7ff fee6 	bl	8024520 <_printf_common>
 8024754:	3001      	adds	r0, #1
 8024756:	d14a      	bne.n	80247ee <_printf_i+0x1f2>
 8024758:	f04f 30ff 	mov.w	r0, #4294967295
 802475c:	b004      	add	sp, #16
 802475e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024762:	6823      	ldr	r3, [r4, #0]
 8024764:	f043 0320 	orr.w	r3, r3, #32
 8024768:	6023      	str	r3, [r4, #0]
 802476a:	4833      	ldr	r0, [pc, #204]	@ (8024838 <_printf_i+0x23c>)
 802476c:	2778      	movs	r7, #120	@ 0x78
 802476e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8024772:	6823      	ldr	r3, [r4, #0]
 8024774:	6831      	ldr	r1, [r6, #0]
 8024776:	061f      	lsls	r7, r3, #24
 8024778:	f851 5b04 	ldr.w	r5, [r1], #4
 802477c:	d402      	bmi.n	8024784 <_printf_i+0x188>
 802477e:	065f      	lsls	r7, r3, #25
 8024780:	bf48      	it	mi
 8024782:	b2ad      	uxthmi	r5, r5
 8024784:	6031      	str	r1, [r6, #0]
 8024786:	07d9      	lsls	r1, r3, #31
 8024788:	bf44      	itt	mi
 802478a:	f043 0320 	orrmi.w	r3, r3, #32
 802478e:	6023      	strmi	r3, [r4, #0]
 8024790:	b11d      	cbz	r5, 802479a <_printf_i+0x19e>
 8024792:	2310      	movs	r3, #16
 8024794:	e7ac      	b.n	80246f0 <_printf_i+0xf4>
 8024796:	4827      	ldr	r0, [pc, #156]	@ (8024834 <_printf_i+0x238>)
 8024798:	e7e9      	b.n	802476e <_printf_i+0x172>
 802479a:	6823      	ldr	r3, [r4, #0]
 802479c:	f023 0320 	bic.w	r3, r3, #32
 80247a0:	6023      	str	r3, [r4, #0]
 80247a2:	e7f6      	b.n	8024792 <_printf_i+0x196>
 80247a4:	4616      	mov	r6, r2
 80247a6:	e7bd      	b.n	8024724 <_printf_i+0x128>
 80247a8:	6833      	ldr	r3, [r6, #0]
 80247aa:	6825      	ldr	r5, [r4, #0]
 80247ac:	6961      	ldr	r1, [r4, #20]
 80247ae:	1d18      	adds	r0, r3, #4
 80247b0:	6030      	str	r0, [r6, #0]
 80247b2:	062e      	lsls	r6, r5, #24
 80247b4:	681b      	ldr	r3, [r3, #0]
 80247b6:	d501      	bpl.n	80247bc <_printf_i+0x1c0>
 80247b8:	6019      	str	r1, [r3, #0]
 80247ba:	e002      	b.n	80247c2 <_printf_i+0x1c6>
 80247bc:	0668      	lsls	r0, r5, #25
 80247be:	d5fb      	bpl.n	80247b8 <_printf_i+0x1bc>
 80247c0:	8019      	strh	r1, [r3, #0]
 80247c2:	2300      	movs	r3, #0
 80247c4:	6123      	str	r3, [r4, #16]
 80247c6:	4616      	mov	r6, r2
 80247c8:	e7bc      	b.n	8024744 <_printf_i+0x148>
 80247ca:	6833      	ldr	r3, [r6, #0]
 80247cc:	1d1a      	adds	r2, r3, #4
 80247ce:	6032      	str	r2, [r6, #0]
 80247d0:	681e      	ldr	r6, [r3, #0]
 80247d2:	6862      	ldr	r2, [r4, #4]
 80247d4:	2100      	movs	r1, #0
 80247d6:	4630      	mov	r0, r6
 80247d8:	f7e3 fc42 	bl	8008060 <memchr>
 80247dc:	b108      	cbz	r0, 80247e2 <_printf_i+0x1e6>
 80247de:	1b80      	subs	r0, r0, r6
 80247e0:	6060      	str	r0, [r4, #4]
 80247e2:	6863      	ldr	r3, [r4, #4]
 80247e4:	6123      	str	r3, [r4, #16]
 80247e6:	2300      	movs	r3, #0
 80247e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80247ec:	e7aa      	b.n	8024744 <_printf_i+0x148>
 80247ee:	6923      	ldr	r3, [r4, #16]
 80247f0:	4632      	mov	r2, r6
 80247f2:	4649      	mov	r1, r9
 80247f4:	4640      	mov	r0, r8
 80247f6:	47d0      	blx	sl
 80247f8:	3001      	adds	r0, #1
 80247fa:	d0ad      	beq.n	8024758 <_printf_i+0x15c>
 80247fc:	6823      	ldr	r3, [r4, #0]
 80247fe:	079b      	lsls	r3, r3, #30
 8024800:	d413      	bmi.n	802482a <_printf_i+0x22e>
 8024802:	68e0      	ldr	r0, [r4, #12]
 8024804:	9b03      	ldr	r3, [sp, #12]
 8024806:	4298      	cmp	r0, r3
 8024808:	bfb8      	it	lt
 802480a:	4618      	movlt	r0, r3
 802480c:	e7a6      	b.n	802475c <_printf_i+0x160>
 802480e:	2301      	movs	r3, #1
 8024810:	4632      	mov	r2, r6
 8024812:	4649      	mov	r1, r9
 8024814:	4640      	mov	r0, r8
 8024816:	47d0      	blx	sl
 8024818:	3001      	adds	r0, #1
 802481a:	d09d      	beq.n	8024758 <_printf_i+0x15c>
 802481c:	3501      	adds	r5, #1
 802481e:	68e3      	ldr	r3, [r4, #12]
 8024820:	9903      	ldr	r1, [sp, #12]
 8024822:	1a5b      	subs	r3, r3, r1
 8024824:	42ab      	cmp	r3, r5
 8024826:	dcf2      	bgt.n	802480e <_printf_i+0x212>
 8024828:	e7eb      	b.n	8024802 <_printf_i+0x206>
 802482a:	2500      	movs	r5, #0
 802482c:	f104 0619 	add.w	r6, r4, #25
 8024830:	e7f5      	b.n	802481e <_printf_i+0x222>
 8024832:	bf00      	nop
 8024834:	08031933 	.word	0x08031933
 8024838:	08031944 	.word	0x08031944

0802483c <_scanf_float>:
 802483c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024840:	b087      	sub	sp, #28
 8024842:	4617      	mov	r7, r2
 8024844:	9303      	str	r3, [sp, #12]
 8024846:	688b      	ldr	r3, [r1, #8]
 8024848:	1e5a      	subs	r2, r3, #1
 802484a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 802484e:	bf81      	itttt	hi
 8024850:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8024854:	eb03 0b05 	addhi.w	fp, r3, r5
 8024858:	f240 135d 	movwhi	r3, #349	@ 0x15d
 802485c:	608b      	strhi	r3, [r1, #8]
 802485e:	680b      	ldr	r3, [r1, #0]
 8024860:	460a      	mov	r2, r1
 8024862:	f04f 0500 	mov.w	r5, #0
 8024866:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 802486a:	f842 3b1c 	str.w	r3, [r2], #28
 802486e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8024872:	4680      	mov	r8, r0
 8024874:	460c      	mov	r4, r1
 8024876:	bf98      	it	ls
 8024878:	f04f 0b00 	movls.w	fp, #0
 802487c:	9201      	str	r2, [sp, #4]
 802487e:	4616      	mov	r6, r2
 8024880:	46aa      	mov	sl, r5
 8024882:	46a9      	mov	r9, r5
 8024884:	9502      	str	r5, [sp, #8]
 8024886:	68a2      	ldr	r2, [r4, #8]
 8024888:	b152      	cbz	r2, 80248a0 <_scanf_float+0x64>
 802488a:	683b      	ldr	r3, [r7, #0]
 802488c:	781b      	ldrb	r3, [r3, #0]
 802488e:	2b4e      	cmp	r3, #78	@ 0x4e
 8024890:	d864      	bhi.n	802495c <_scanf_float+0x120>
 8024892:	2b40      	cmp	r3, #64	@ 0x40
 8024894:	d83c      	bhi.n	8024910 <_scanf_float+0xd4>
 8024896:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 802489a:	b2c8      	uxtb	r0, r1
 802489c:	280e      	cmp	r0, #14
 802489e:	d93a      	bls.n	8024916 <_scanf_float+0xda>
 80248a0:	f1b9 0f00 	cmp.w	r9, #0
 80248a4:	d003      	beq.n	80248ae <_scanf_float+0x72>
 80248a6:	6823      	ldr	r3, [r4, #0]
 80248a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80248ac:	6023      	str	r3, [r4, #0]
 80248ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80248b2:	f1ba 0f01 	cmp.w	sl, #1
 80248b6:	f200 8117 	bhi.w	8024ae8 <_scanf_float+0x2ac>
 80248ba:	9b01      	ldr	r3, [sp, #4]
 80248bc:	429e      	cmp	r6, r3
 80248be:	f200 8108 	bhi.w	8024ad2 <_scanf_float+0x296>
 80248c2:	2001      	movs	r0, #1
 80248c4:	b007      	add	sp, #28
 80248c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248ca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80248ce:	2a0d      	cmp	r2, #13
 80248d0:	d8e6      	bhi.n	80248a0 <_scanf_float+0x64>
 80248d2:	a101      	add	r1, pc, #4	@ (adr r1, 80248d8 <_scanf_float+0x9c>)
 80248d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80248d8:	08024a1f 	.word	0x08024a1f
 80248dc:	080248a1 	.word	0x080248a1
 80248e0:	080248a1 	.word	0x080248a1
 80248e4:	080248a1 	.word	0x080248a1
 80248e8:	08024a7f 	.word	0x08024a7f
 80248ec:	08024a57 	.word	0x08024a57
 80248f0:	080248a1 	.word	0x080248a1
 80248f4:	080248a1 	.word	0x080248a1
 80248f8:	08024a2d 	.word	0x08024a2d
 80248fc:	080248a1 	.word	0x080248a1
 8024900:	080248a1 	.word	0x080248a1
 8024904:	080248a1 	.word	0x080248a1
 8024908:	080248a1 	.word	0x080248a1
 802490c:	080249e5 	.word	0x080249e5
 8024910:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8024914:	e7db      	b.n	80248ce <_scanf_float+0x92>
 8024916:	290e      	cmp	r1, #14
 8024918:	d8c2      	bhi.n	80248a0 <_scanf_float+0x64>
 802491a:	a001      	add	r0, pc, #4	@ (adr r0, 8024920 <_scanf_float+0xe4>)
 802491c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8024920:	080249d5 	.word	0x080249d5
 8024924:	080248a1 	.word	0x080248a1
 8024928:	080249d5 	.word	0x080249d5
 802492c:	08024a6b 	.word	0x08024a6b
 8024930:	080248a1 	.word	0x080248a1
 8024934:	0802497d 	.word	0x0802497d
 8024938:	080249bb 	.word	0x080249bb
 802493c:	080249bb 	.word	0x080249bb
 8024940:	080249bb 	.word	0x080249bb
 8024944:	080249bb 	.word	0x080249bb
 8024948:	080249bb 	.word	0x080249bb
 802494c:	080249bb 	.word	0x080249bb
 8024950:	080249bb 	.word	0x080249bb
 8024954:	080249bb 	.word	0x080249bb
 8024958:	080249bb 	.word	0x080249bb
 802495c:	2b6e      	cmp	r3, #110	@ 0x6e
 802495e:	d809      	bhi.n	8024974 <_scanf_float+0x138>
 8024960:	2b60      	cmp	r3, #96	@ 0x60
 8024962:	d8b2      	bhi.n	80248ca <_scanf_float+0x8e>
 8024964:	2b54      	cmp	r3, #84	@ 0x54
 8024966:	d07b      	beq.n	8024a60 <_scanf_float+0x224>
 8024968:	2b59      	cmp	r3, #89	@ 0x59
 802496a:	d199      	bne.n	80248a0 <_scanf_float+0x64>
 802496c:	2d07      	cmp	r5, #7
 802496e:	d197      	bne.n	80248a0 <_scanf_float+0x64>
 8024970:	2508      	movs	r5, #8
 8024972:	e02c      	b.n	80249ce <_scanf_float+0x192>
 8024974:	2b74      	cmp	r3, #116	@ 0x74
 8024976:	d073      	beq.n	8024a60 <_scanf_float+0x224>
 8024978:	2b79      	cmp	r3, #121	@ 0x79
 802497a:	e7f6      	b.n	802496a <_scanf_float+0x12e>
 802497c:	6821      	ldr	r1, [r4, #0]
 802497e:	05c8      	lsls	r0, r1, #23
 8024980:	d51b      	bpl.n	80249ba <_scanf_float+0x17e>
 8024982:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8024986:	6021      	str	r1, [r4, #0]
 8024988:	f109 0901 	add.w	r9, r9, #1
 802498c:	f1bb 0f00 	cmp.w	fp, #0
 8024990:	d003      	beq.n	802499a <_scanf_float+0x15e>
 8024992:	3201      	adds	r2, #1
 8024994:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024998:	60a2      	str	r2, [r4, #8]
 802499a:	68a3      	ldr	r3, [r4, #8]
 802499c:	3b01      	subs	r3, #1
 802499e:	60a3      	str	r3, [r4, #8]
 80249a0:	6923      	ldr	r3, [r4, #16]
 80249a2:	3301      	adds	r3, #1
 80249a4:	6123      	str	r3, [r4, #16]
 80249a6:	687b      	ldr	r3, [r7, #4]
 80249a8:	3b01      	subs	r3, #1
 80249aa:	2b00      	cmp	r3, #0
 80249ac:	607b      	str	r3, [r7, #4]
 80249ae:	f340 8087 	ble.w	8024ac0 <_scanf_float+0x284>
 80249b2:	683b      	ldr	r3, [r7, #0]
 80249b4:	3301      	adds	r3, #1
 80249b6:	603b      	str	r3, [r7, #0]
 80249b8:	e765      	b.n	8024886 <_scanf_float+0x4a>
 80249ba:	eb1a 0105 	adds.w	r1, sl, r5
 80249be:	f47f af6f 	bne.w	80248a0 <_scanf_float+0x64>
 80249c2:	6822      	ldr	r2, [r4, #0]
 80249c4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80249c8:	6022      	str	r2, [r4, #0]
 80249ca:	460d      	mov	r5, r1
 80249cc:	468a      	mov	sl, r1
 80249ce:	f806 3b01 	strb.w	r3, [r6], #1
 80249d2:	e7e2      	b.n	802499a <_scanf_float+0x15e>
 80249d4:	6822      	ldr	r2, [r4, #0]
 80249d6:	0610      	lsls	r0, r2, #24
 80249d8:	f57f af62 	bpl.w	80248a0 <_scanf_float+0x64>
 80249dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80249e0:	6022      	str	r2, [r4, #0]
 80249e2:	e7f4      	b.n	80249ce <_scanf_float+0x192>
 80249e4:	f1ba 0f00 	cmp.w	sl, #0
 80249e8:	d10e      	bne.n	8024a08 <_scanf_float+0x1cc>
 80249ea:	f1b9 0f00 	cmp.w	r9, #0
 80249ee:	d10e      	bne.n	8024a0e <_scanf_float+0x1d2>
 80249f0:	6822      	ldr	r2, [r4, #0]
 80249f2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80249f6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80249fa:	d108      	bne.n	8024a0e <_scanf_float+0x1d2>
 80249fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8024a00:	6022      	str	r2, [r4, #0]
 8024a02:	f04f 0a01 	mov.w	sl, #1
 8024a06:	e7e2      	b.n	80249ce <_scanf_float+0x192>
 8024a08:	f1ba 0f02 	cmp.w	sl, #2
 8024a0c:	d055      	beq.n	8024aba <_scanf_float+0x27e>
 8024a0e:	2d01      	cmp	r5, #1
 8024a10:	d002      	beq.n	8024a18 <_scanf_float+0x1dc>
 8024a12:	2d04      	cmp	r5, #4
 8024a14:	f47f af44 	bne.w	80248a0 <_scanf_float+0x64>
 8024a18:	3501      	adds	r5, #1
 8024a1a:	b2ed      	uxtb	r5, r5
 8024a1c:	e7d7      	b.n	80249ce <_scanf_float+0x192>
 8024a1e:	f1ba 0f01 	cmp.w	sl, #1
 8024a22:	f47f af3d 	bne.w	80248a0 <_scanf_float+0x64>
 8024a26:	f04f 0a02 	mov.w	sl, #2
 8024a2a:	e7d0      	b.n	80249ce <_scanf_float+0x192>
 8024a2c:	b97d      	cbnz	r5, 8024a4e <_scanf_float+0x212>
 8024a2e:	f1b9 0f00 	cmp.w	r9, #0
 8024a32:	f47f af38 	bne.w	80248a6 <_scanf_float+0x6a>
 8024a36:	6822      	ldr	r2, [r4, #0]
 8024a38:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8024a3c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8024a40:	f040 8108 	bne.w	8024c54 <_scanf_float+0x418>
 8024a44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8024a48:	6022      	str	r2, [r4, #0]
 8024a4a:	2501      	movs	r5, #1
 8024a4c:	e7bf      	b.n	80249ce <_scanf_float+0x192>
 8024a4e:	2d03      	cmp	r5, #3
 8024a50:	d0e2      	beq.n	8024a18 <_scanf_float+0x1dc>
 8024a52:	2d05      	cmp	r5, #5
 8024a54:	e7de      	b.n	8024a14 <_scanf_float+0x1d8>
 8024a56:	2d02      	cmp	r5, #2
 8024a58:	f47f af22 	bne.w	80248a0 <_scanf_float+0x64>
 8024a5c:	2503      	movs	r5, #3
 8024a5e:	e7b6      	b.n	80249ce <_scanf_float+0x192>
 8024a60:	2d06      	cmp	r5, #6
 8024a62:	f47f af1d 	bne.w	80248a0 <_scanf_float+0x64>
 8024a66:	2507      	movs	r5, #7
 8024a68:	e7b1      	b.n	80249ce <_scanf_float+0x192>
 8024a6a:	6822      	ldr	r2, [r4, #0]
 8024a6c:	0591      	lsls	r1, r2, #22
 8024a6e:	f57f af17 	bpl.w	80248a0 <_scanf_float+0x64>
 8024a72:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8024a76:	6022      	str	r2, [r4, #0]
 8024a78:	f8cd 9008 	str.w	r9, [sp, #8]
 8024a7c:	e7a7      	b.n	80249ce <_scanf_float+0x192>
 8024a7e:	6822      	ldr	r2, [r4, #0]
 8024a80:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8024a84:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8024a88:	d006      	beq.n	8024a98 <_scanf_float+0x25c>
 8024a8a:	0550      	lsls	r0, r2, #21
 8024a8c:	f57f af08 	bpl.w	80248a0 <_scanf_float+0x64>
 8024a90:	f1b9 0f00 	cmp.w	r9, #0
 8024a94:	f000 80de 	beq.w	8024c54 <_scanf_float+0x418>
 8024a98:	0591      	lsls	r1, r2, #22
 8024a9a:	bf58      	it	pl
 8024a9c:	9902      	ldrpl	r1, [sp, #8]
 8024a9e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8024aa2:	bf58      	it	pl
 8024aa4:	eba9 0101 	subpl.w	r1, r9, r1
 8024aa8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8024aac:	bf58      	it	pl
 8024aae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8024ab2:	6022      	str	r2, [r4, #0]
 8024ab4:	f04f 0900 	mov.w	r9, #0
 8024ab8:	e789      	b.n	80249ce <_scanf_float+0x192>
 8024aba:	f04f 0a03 	mov.w	sl, #3
 8024abe:	e786      	b.n	80249ce <_scanf_float+0x192>
 8024ac0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8024ac4:	4639      	mov	r1, r7
 8024ac6:	4640      	mov	r0, r8
 8024ac8:	4798      	blx	r3
 8024aca:	2800      	cmp	r0, #0
 8024acc:	f43f aedb 	beq.w	8024886 <_scanf_float+0x4a>
 8024ad0:	e6e6      	b.n	80248a0 <_scanf_float+0x64>
 8024ad2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024ad6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8024ada:	463a      	mov	r2, r7
 8024adc:	4640      	mov	r0, r8
 8024ade:	4798      	blx	r3
 8024ae0:	6923      	ldr	r3, [r4, #16]
 8024ae2:	3b01      	subs	r3, #1
 8024ae4:	6123      	str	r3, [r4, #16]
 8024ae6:	e6e8      	b.n	80248ba <_scanf_float+0x7e>
 8024ae8:	1e6b      	subs	r3, r5, #1
 8024aea:	2b06      	cmp	r3, #6
 8024aec:	d824      	bhi.n	8024b38 <_scanf_float+0x2fc>
 8024aee:	2d02      	cmp	r5, #2
 8024af0:	d836      	bhi.n	8024b60 <_scanf_float+0x324>
 8024af2:	9b01      	ldr	r3, [sp, #4]
 8024af4:	429e      	cmp	r6, r3
 8024af6:	f67f aee4 	bls.w	80248c2 <_scanf_float+0x86>
 8024afa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024afe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8024b02:	463a      	mov	r2, r7
 8024b04:	4640      	mov	r0, r8
 8024b06:	4798      	blx	r3
 8024b08:	6923      	ldr	r3, [r4, #16]
 8024b0a:	3b01      	subs	r3, #1
 8024b0c:	6123      	str	r3, [r4, #16]
 8024b0e:	e7f0      	b.n	8024af2 <_scanf_float+0x2b6>
 8024b10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024b14:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8024b18:	463a      	mov	r2, r7
 8024b1a:	4640      	mov	r0, r8
 8024b1c:	4798      	blx	r3
 8024b1e:	6923      	ldr	r3, [r4, #16]
 8024b20:	3b01      	subs	r3, #1
 8024b22:	6123      	str	r3, [r4, #16]
 8024b24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024b28:	fa5f fa8a 	uxtb.w	sl, sl
 8024b2c:	f1ba 0f02 	cmp.w	sl, #2
 8024b30:	d1ee      	bne.n	8024b10 <_scanf_float+0x2d4>
 8024b32:	3d03      	subs	r5, #3
 8024b34:	b2ed      	uxtb	r5, r5
 8024b36:	1b76      	subs	r6, r6, r5
 8024b38:	6823      	ldr	r3, [r4, #0]
 8024b3a:	05da      	lsls	r2, r3, #23
 8024b3c:	d530      	bpl.n	8024ba0 <_scanf_float+0x364>
 8024b3e:	055b      	lsls	r3, r3, #21
 8024b40:	d511      	bpl.n	8024b66 <_scanf_float+0x32a>
 8024b42:	9b01      	ldr	r3, [sp, #4]
 8024b44:	429e      	cmp	r6, r3
 8024b46:	f67f aebc 	bls.w	80248c2 <_scanf_float+0x86>
 8024b4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024b4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8024b52:	463a      	mov	r2, r7
 8024b54:	4640      	mov	r0, r8
 8024b56:	4798      	blx	r3
 8024b58:	6923      	ldr	r3, [r4, #16]
 8024b5a:	3b01      	subs	r3, #1
 8024b5c:	6123      	str	r3, [r4, #16]
 8024b5e:	e7f0      	b.n	8024b42 <_scanf_float+0x306>
 8024b60:	46aa      	mov	sl, r5
 8024b62:	46b3      	mov	fp, r6
 8024b64:	e7de      	b.n	8024b24 <_scanf_float+0x2e8>
 8024b66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8024b6a:	6923      	ldr	r3, [r4, #16]
 8024b6c:	2965      	cmp	r1, #101	@ 0x65
 8024b6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8024b72:	f106 35ff 	add.w	r5, r6, #4294967295
 8024b76:	6123      	str	r3, [r4, #16]
 8024b78:	d00c      	beq.n	8024b94 <_scanf_float+0x358>
 8024b7a:	2945      	cmp	r1, #69	@ 0x45
 8024b7c:	d00a      	beq.n	8024b94 <_scanf_float+0x358>
 8024b7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024b82:	463a      	mov	r2, r7
 8024b84:	4640      	mov	r0, r8
 8024b86:	4798      	blx	r3
 8024b88:	6923      	ldr	r3, [r4, #16]
 8024b8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8024b8e:	3b01      	subs	r3, #1
 8024b90:	1eb5      	subs	r5, r6, #2
 8024b92:	6123      	str	r3, [r4, #16]
 8024b94:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024b98:	463a      	mov	r2, r7
 8024b9a:	4640      	mov	r0, r8
 8024b9c:	4798      	blx	r3
 8024b9e:	462e      	mov	r6, r5
 8024ba0:	6822      	ldr	r2, [r4, #0]
 8024ba2:	f012 0210 	ands.w	r2, r2, #16
 8024ba6:	d001      	beq.n	8024bac <_scanf_float+0x370>
 8024ba8:	2000      	movs	r0, #0
 8024baa:	e68b      	b.n	80248c4 <_scanf_float+0x88>
 8024bac:	7032      	strb	r2, [r6, #0]
 8024bae:	6823      	ldr	r3, [r4, #0]
 8024bb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8024bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8024bb8:	d11c      	bne.n	8024bf4 <_scanf_float+0x3b8>
 8024bba:	9b02      	ldr	r3, [sp, #8]
 8024bbc:	454b      	cmp	r3, r9
 8024bbe:	eba3 0209 	sub.w	r2, r3, r9
 8024bc2:	d123      	bne.n	8024c0c <_scanf_float+0x3d0>
 8024bc4:	9901      	ldr	r1, [sp, #4]
 8024bc6:	2200      	movs	r2, #0
 8024bc8:	4640      	mov	r0, r8
 8024bca:	f7fe ffdd 	bl	8023b88 <_strtod_r>
 8024bce:	9b03      	ldr	r3, [sp, #12]
 8024bd0:	6821      	ldr	r1, [r4, #0]
 8024bd2:	681b      	ldr	r3, [r3, #0]
 8024bd4:	f011 0f02 	tst.w	r1, #2
 8024bd8:	ec57 6b10 	vmov	r6, r7, d0
 8024bdc:	f103 0204 	add.w	r2, r3, #4
 8024be0:	d01f      	beq.n	8024c22 <_scanf_float+0x3e6>
 8024be2:	9903      	ldr	r1, [sp, #12]
 8024be4:	600a      	str	r2, [r1, #0]
 8024be6:	681b      	ldr	r3, [r3, #0]
 8024be8:	e9c3 6700 	strd	r6, r7, [r3]
 8024bec:	68e3      	ldr	r3, [r4, #12]
 8024bee:	3301      	adds	r3, #1
 8024bf0:	60e3      	str	r3, [r4, #12]
 8024bf2:	e7d9      	b.n	8024ba8 <_scanf_float+0x36c>
 8024bf4:	9b04      	ldr	r3, [sp, #16]
 8024bf6:	2b00      	cmp	r3, #0
 8024bf8:	d0e4      	beq.n	8024bc4 <_scanf_float+0x388>
 8024bfa:	9905      	ldr	r1, [sp, #20]
 8024bfc:	230a      	movs	r3, #10
 8024bfe:	3101      	adds	r1, #1
 8024c00:	4640      	mov	r0, r8
 8024c02:	f7ff f841 	bl	8023c88 <_strtol_r>
 8024c06:	9b04      	ldr	r3, [sp, #16]
 8024c08:	9e05      	ldr	r6, [sp, #20]
 8024c0a:	1ac2      	subs	r2, r0, r3
 8024c0c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8024c10:	429e      	cmp	r6, r3
 8024c12:	bf28      	it	cs
 8024c14:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8024c18:	4910      	ldr	r1, [pc, #64]	@ (8024c5c <_scanf_float+0x420>)
 8024c1a:	4630      	mov	r0, r6
 8024c1c:	f000 f8f6 	bl	8024e0c <siprintf>
 8024c20:	e7d0      	b.n	8024bc4 <_scanf_float+0x388>
 8024c22:	f011 0f04 	tst.w	r1, #4
 8024c26:	9903      	ldr	r1, [sp, #12]
 8024c28:	600a      	str	r2, [r1, #0]
 8024c2a:	d1dc      	bne.n	8024be6 <_scanf_float+0x3aa>
 8024c2c:	681d      	ldr	r5, [r3, #0]
 8024c2e:	4632      	mov	r2, r6
 8024c30:	463b      	mov	r3, r7
 8024c32:	4630      	mov	r0, r6
 8024c34:	4639      	mov	r1, r7
 8024c36:	f7e3 fec1 	bl	80089bc <__aeabi_dcmpun>
 8024c3a:	b128      	cbz	r0, 8024c48 <_scanf_float+0x40c>
 8024c3c:	4808      	ldr	r0, [pc, #32]	@ (8024c60 <_scanf_float+0x424>)
 8024c3e:	f000 faeb 	bl	8025218 <nanf>
 8024c42:	ed85 0a00 	vstr	s0, [r5]
 8024c46:	e7d1      	b.n	8024bec <_scanf_float+0x3b0>
 8024c48:	4630      	mov	r0, r6
 8024c4a:	4639      	mov	r1, r7
 8024c4c:	f7e3 ff14 	bl	8008a78 <__aeabi_d2f>
 8024c50:	6028      	str	r0, [r5, #0]
 8024c52:	e7cb      	b.n	8024bec <_scanf_float+0x3b0>
 8024c54:	f04f 0900 	mov.w	r9, #0
 8024c58:	e629      	b.n	80248ae <_scanf_float+0x72>
 8024c5a:	bf00      	nop
 8024c5c:	08031955 	.word	0x08031955
 8024c60:	080317cb 	.word	0x080317cb

08024c64 <std>:
 8024c64:	2300      	movs	r3, #0
 8024c66:	b510      	push	{r4, lr}
 8024c68:	4604      	mov	r4, r0
 8024c6a:	e9c0 3300 	strd	r3, r3, [r0]
 8024c6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024c72:	6083      	str	r3, [r0, #8]
 8024c74:	8181      	strh	r1, [r0, #12]
 8024c76:	6643      	str	r3, [r0, #100]	@ 0x64
 8024c78:	81c2      	strh	r2, [r0, #14]
 8024c7a:	6183      	str	r3, [r0, #24]
 8024c7c:	4619      	mov	r1, r3
 8024c7e:	2208      	movs	r2, #8
 8024c80:	305c      	adds	r0, #92	@ 0x5c
 8024c82:	f000 f950 	bl	8024f26 <memset>
 8024c86:	4b0d      	ldr	r3, [pc, #52]	@ (8024cbc <std+0x58>)
 8024c88:	6263      	str	r3, [r4, #36]	@ 0x24
 8024c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8024cc0 <std+0x5c>)
 8024c8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8024c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8024cc4 <std+0x60>)
 8024c90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8024c92:	4b0d      	ldr	r3, [pc, #52]	@ (8024cc8 <std+0x64>)
 8024c94:	6323      	str	r3, [r4, #48]	@ 0x30
 8024c96:	4b0d      	ldr	r3, [pc, #52]	@ (8024ccc <std+0x68>)
 8024c98:	6224      	str	r4, [r4, #32]
 8024c9a:	429c      	cmp	r4, r3
 8024c9c:	d006      	beq.n	8024cac <std+0x48>
 8024c9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8024ca2:	4294      	cmp	r4, r2
 8024ca4:	d002      	beq.n	8024cac <std+0x48>
 8024ca6:	33d0      	adds	r3, #208	@ 0xd0
 8024ca8:	429c      	cmp	r4, r3
 8024caa:	d105      	bne.n	8024cb8 <std+0x54>
 8024cac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8024cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024cb4:	f000 ba8c 	b.w	80251d0 <__retarget_lock_init_recursive>
 8024cb8:	bd10      	pop	{r4, pc}
 8024cba:	bf00      	nop
 8024cbc:	08024e4d 	.word	0x08024e4d
 8024cc0:	08024e6f 	.word	0x08024e6f
 8024cc4:	08024ea7 	.word	0x08024ea7
 8024cc8:	08024ecb 	.word	0x08024ecb
 8024ccc:	20002f20 	.word	0x20002f20

08024cd0 <stdio_exit_handler>:
 8024cd0:	4a02      	ldr	r2, [pc, #8]	@ (8024cdc <stdio_exit_handler+0xc>)
 8024cd2:	4903      	ldr	r1, [pc, #12]	@ (8024ce0 <stdio_exit_handler+0x10>)
 8024cd4:	4803      	ldr	r0, [pc, #12]	@ (8024ce4 <stdio_exit_handler+0x14>)
 8024cd6:	f000 b87b 	b.w	8024dd0 <_fwalk_sglue>
 8024cda:	bf00      	nop
 8024cdc:	200004b4 	.word	0x200004b4
 8024ce0:	0802762d 	.word	0x0802762d
 8024ce4:	20000630 	.word	0x20000630

08024ce8 <cleanup_stdio>:
 8024ce8:	6841      	ldr	r1, [r0, #4]
 8024cea:	4b0c      	ldr	r3, [pc, #48]	@ (8024d1c <cleanup_stdio+0x34>)
 8024cec:	4299      	cmp	r1, r3
 8024cee:	b510      	push	{r4, lr}
 8024cf0:	4604      	mov	r4, r0
 8024cf2:	d001      	beq.n	8024cf8 <cleanup_stdio+0x10>
 8024cf4:	f002 fc9a 	bl	802762c <_fflush_r>
 8024cf8:	68a1      	ldr	r1, [r4, #8]
 8024cfa:	4b09      	ldr	r3, [pc, #36]	@ (8024d20 <cleanup_stdio+0x38>)
 8024cfc:	4299      	cmp	r1, r3
 8024cfe:	d002      	beq.n	8024d06 <cleanup_stdio+0x1e>
 8024d00:	4620      	mov	r0, r4
 8024d02:	f002 fc93 	bl	802762c <_fflush_r>
 8024d06:	68e1      	ldr	r1, [r4, #12]
 8024d08:	4b06      	ldr	r3, [pc, #24]	@ (8024d24 <cleanup_stdio+0x3c>)
 8024d0a:	4299      	cmp	r1, r3
 8024d0c:	d004      	beq.n	8024d18 <cleanup_stdio+0x30>
 8024d0e:	4620      	mov	r0, r4
 8024d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024d14:	f002 bc8a 	b.w	802762c <_fflush_r>
 8024d18:	bd10      	pop	{r4, pc}
 8024d1a:	bf00      	nop
 8024d1c:	20002f20 	.word	0x20002f20
 8024d20:	20002f88 	.word	0x20002f88
 8024d24:	20002ff0 	.word	0x20002ff0

08024d28 <global_stdio_init.part.0>:
 8024d28:	b510      	push	{r4, lr}
 8024d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8024d58 <global_stdio_init.part.0+0x30>)
 8024d2c:	4c0b      	ldr	r4, [pc, #44]	@ (8024d5c <global_stdio_init.part.0+0x34>)
 8024d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8024d60 <global_stdio_init.part.0+0x38>)
 8024d30:	601a      	str	r2, [r3, #0]
 8024d32:	4620      	mov	r0, r4
 8024d34:	2200      	movs	r2, #0
 8024d36:	2104      	movs	r1, #4
 8024d38:	f7ff ff94 	bl	8024c64 <std>
 8024d3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8024d40:	2201      	movs	r2, #1
 8024d42:	2109      	movs	r1, #9
 8024d44:	f7ff ff8e 	bl	8024c64 <std>
 8024d48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8024d4c:	2202      	movs	r2, #2
 8024d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024d52:	2112      	movs	r1, #18
 8024d54:	f7ff bf86 	b.w	8024c64 <std>
 8024d58:	20003058 	.word	0x20003058
 8024d5c:	20002f20 	.word	0x20002f20
 8024d60:	08024cd1 	.word	0x08024cd1

08024d64 <__sfp_lock_acquire>:
 8024d64:	4801      	ldr	r0, [pc, #4]	@ (8024d6c <__sfp_lock_acquire+0x8>)
 8024d66:	f000 ba34 	b.w	80251d2 <__retarget_lock_acquire_recursive>
 8024d6a:	bf00      	nop
 8024d6c:	20003061 	.word	0x20003061

08024d70 <__sfp_lock_release>:
 8024d70:	4801      	ldr	r0, [pc, #4]	@ (8024d78 <__sfp_lock_release+0x8>)
 8024d72:	f000 ba2f 	b.w	80251d4 <__retarget_lock_release_recursive>
 8024d76:	bf00      	nop
 8024d78:	20003061 	.word	0x20003061

08024d7c <__sinit>:
 8024d7c:	b510      	push	{r4, lr}
 8024d7e:	4604      	mov	r4, r0
 8024d80:	f7ff fff0 	bl	8024d64 <__sfp_lock_acquire>
 8024d84:	6a23      	ldr	r3, [r4, #32]
 8024d86:	b11b      	cbz	r3, 8024d90 <__sinit+0x14>
 8024d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024d8c:	f7ff bff0 	b.w	8024d70 <__sfp_lock_release>
 8024d90:	4b04      	ldr	r3, [pc, #16]	@ (8024da4 <__sinit+0x28>)
 8024d92:	6223      	str	r3, [r4, #32]
 8024d94:	4b04      	ldr	r3, [pc, #16]	@ (8024da8 <__sinit+0x2c>)
 8024d96:	681b      	ldr	r3, [r3, #0]
 8024d98:	2b00      	cmp	r3, #0
 8024d9a:	d1f5      	bne.n	8024d88 <__sinit+0xc>
 8024d9c:	f7ff ffc4 	bl	8024d28 <global_stdio_init.part.0>
 8024da0:	e7f2      	b.n	8024d88 <__sinit+0xc>
 8024da2:	bf00      	nop
 8024da4:	08024ce9 	.word	0x08024ce9
 8024da8:	20003058 	.word	0x20003058

08024dac <fiprintf>:
 8024dac:	b40e      	push	{r1, r2, r3}
 8024dae:	b503      	push	{r0, r1, lr}
 8024db0:	4601      	mov	r1, r0
 8024db2:	ab03      	add	r3, sp, #12
 8024db4:	4805      	ldr	r0, [pc, #20]	@ (8024dcc <fiprintf+0x20>)
 8024db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8024dba:	6800      	ldr	r0, [r0, #0]
 8024dbc:	9301      	str	r3, [sp, #4]
 8024dbe:	f002 fa99 	bl	80272f4 <_vfiprintf_r>
 8024dc2:	b002      	add	sp, #8
 8024dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8024dc8:	b003      	add	sp, #12
 8024dca:	4770      	bx	lr
 8024dcc:	2000062c 	.word	0x2000062c

08024dd0 <_fwalk_sglue>:
 8024dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024dd4:	4607      	mov	r7, r0
 8024dd6:	4688      	mov	r8, r1
 8024dd8:	4614      	mov	r4, r2
 8024dda:	2600      	movs	r6, #0
 8024ddc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024de0:	f1b9 0901 	subs.w	r9, r9, #1
 8024de4:	d505      	bpl.n	8024df2 <_fwalk_sglue+0x22>
 8024de6:	6824      	ldr	r4, [r4, #0]
 8024de8:	2c00      	cmp	r4, #0
 8024dea:	d1f7      	bne.n	8024ddc <_fwalk_sglue+0xc>
 8024dec:	4630      	mov	r0, r6
 8024dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024df2:	89ab      	ldrh	r3, [r5, #12]
 8024df4:	2b01      	cmp	r3, #1
 8024df6:	d907      	bls.n	8024e08 <_fwalk_sglue+0x38>
 8024df8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024dfc:	3301      	adds	r3, #1
 8024dfe:	d003      	beq.n	8024e08 <_fwalk_sglue+0x38>
 8024e00:	4629      	mov	r1, r5
 8024e02:	4638      	mov	r0, r7
 8024e04:	47c0      	blx	r8
 8024e06:	4306      	orrs	r6, r0
 8024e08:	3568      	adds	r5, #104	@ 0x68
 8024e0a:	e7e9      	b.n	8024de0 <_fwalk_sglue+0x10>

08024e0c <siprintf>:
 8024e0c:	b40e      	push	{r1, r2, r3}
 8024e0e:	b500      	push	{lr}
 8024e10:	b09c      	sub	sp, #112	@ 0x70
 8024e12:	ab1d      	add	r3, sp, #116	@ 0x74
 8024e14:	9002      	str	r0, [sp, #8]
 8024e16:	9006      	str	r0, [sp, #24]
 8024e18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8024e1c:	4809      	ldr	r0, [pc, #36]	@ (8024e44 <siprintf+0x38>)
 8024e1e:	9107      	str	r1, [sp, #28]
 8024e20:	9104      	str	r1, [sp, #16]
 8024e22:	4909      	ldr	r1, [pc, #36]	@ (8024e48 <siprintf+0x3c>)
 8024e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8024e28:	9105      	str	r1, [sp, #20]
 8024e2a:	6800      	ldr	r0, [r0, #0]
 8024e2c:	9301      	str	r3, [sp, #4]
 8024e2e:	a902      	add	r1, sp, #8
 8024e30:	f002 f93a 	bl	80270a8 <_svfiprintf_r>
 8024e34:	9b02      	ldr	r3, [sp, #8]
 8024e36:	2200      	movs	r2, #0
 8024e38:	701a      	strb	r2, [r3, #0]
 8024e3a:	b01c      	add	sp, #112	@ 0x70
 8024e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8024e40:	b003      	add	sp, #12
 8024e42:	4770      	bx	lr
 8024e44:	2000062c 	.word	0x2000062c
 8024e48:	ffff0208 	.word	0xffff0208

08024e4c <__sread>:
 8024e4c:	b510      	push	{r4, lr}
 8024e4e:	460c      	mov	r4, r1
 8024e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024e54:	f000 f95e 	bl	8025114 <_read_r>
 8024e58:	2800      	cmp	r0, #0
 8024e5a:	bfab      	itete	ge
 8024e5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8024e5e:	89a3      	ldrhlt	r3, [r4, #12]
 8024e60:	181b      	addge	r3, r3, r0
 8024e62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8024e66:	bfac      	ite	ge
 8024e68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8024e6a:	81a3      	strhlt	r3, [r4, #12]
 8024e6c:	bd10      	pop	{r4, pc}

08024e6e <__swrite>:
 8024e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024e72:	461f      	mov	r7, r3
 8024e74:	898b      	ldrh	r3, [r1, #12]
 8024e76:	05db      	lsls	r3, r3, #23
 8024e78:	4605      	mov	r5, r0
 8024e7a:	460c      	mov	r4, r1
 8024e7c:	4616      	mov	r6, r2
 8024e7e:	d505      	bpl.n	8024e8c <__swrite+0x1e>
 8024e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024e84:	2302      	movs	r3, #2
 8024e86:	2200      	movs	r2, #0
 8024e88:	f000 f932 	bl	80250f0 <_lseek_r>
 8024e8c:	89a3      	ldrh	r3, [r4, #12]
 8024e8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024e92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8024e96:	81a3      	strh	r3, [r4, #12]
 8024e98:	4632      	mov	r2, r6
 8024e9a:	463b      	mov	r3, r7
 8024e9c:	4628      	mov	r0, r5
 8024e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024ea2:	f000 b959 	b.w	8025158 <_write_r>

08024ea6 <__sseek>:
 8024ea6:	b510      	push	{r4, lr}
 8024ea8:	460c      	mov	r4, r1
 8024eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024eae:	f000 f91f 	bl	80250f0 <_lseek_r>
 8024eb2:	1c43      	adds	r3, r0, #1
 8024eb4:	89a3      	ldrh	r3, [r4, #12]
 8024eb6:	bf15      	itete	ne
 8024eb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8024eba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8024ebe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8024ec2:	81a3      	strheq	r3, [r4, #12]
 8024ec4:	bf18      	it	ne
 8024ec6:	81a3      	strhne	r3, [r4, #12]
 8024ec8:	bd10      	pop	{r4, pc}

08024eca <__sclose>:
 8024eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024ece:	f000 b8ff 	b.w	80250d0 <_close_r>

08024ed2 <memcmp>:
 8024ed2:	b510      	push	{r4, lr}
 8024ed4:	3901      	subs	r1, #1
 8024ed6:	4402      	add	r2, r0
 8024ed8:	4290      	cmp	r0, r2
 8024eda:	d101      	bne.n	8024ee0 <memcmp+0xe>
 8024edc:	2000      	movs	r0, #0
 8024ede:	e005      	b.n	8024eec <memcmp+0x1a>
 8024ee0:	7803      	ldrb	r3, [r0, #0]
 8024ee2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8024ee6:	42a3      	cmp	r3, r4
 8024ee8:	d001      	beq.n	8024eee <memcmp+0x1c>
 8024eea:	1b18      	subs	r0, r3, r4
 8024eec:	bd10      	pop	{r4, pc}
 8024eee:	3001      	adds	r0, #1
 8024ef0:	e7f2      	b.n	8024ed8 <memcmp+0x6>

08024ef2 <memmove>:
 8024ef2:	4288      	cmp	r0, r1
 8024ef4:	b510      	push	{r4, lr}
 8024ef6:	eb01 0402 	add.w	r4, r1, r2
 8024efa:	d902      	bls.n	8024f02 <memmove+0x10>
 8024efc:	4284      	cmp	r4, r0
 8024efe:	4623      	mov	r3, r4
 8024f00:	d807      	bhi.n	8024f12 <memmove+0x20>
 8024f02:	1e43      	subs	r3, r0, #1
 8024f04:	42a1      	cmp	r1, r4
 8024f06:	d008      	beq.n	8024f1a <memmove+0x28>
 8024f08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024f0c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024f10:	e7f8      	b.n	8024f04 <memmove+0x12>
 8024f12:	4402      	add	r2, r0
 8024f14:	4601      	mov	r1, r0
 8024f16:	428a      	cmp	r2, r1
 8024f18:	d100      	bne.n	8024f1c <memmove+0x2a>
 8024f1a:	bd10      	pop	{r4, pc}
 8024f1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024f20:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8024f24:	e7f7      	b.n	8024f16 <memmove+0x24>

08024f26 <memset>:
 8024f26:	4402      	add	r2, r0
 8024f28:	4603      	mov	r3, r0
 8024f2a:	4293      	cmp	r3, r2
 8024f2c:	d100      	bne.n	8024f30 <memset+0xa>
 8024f2e:	4770      	bx	lr
 8024f30:	f803 1b01 	strb.w	r1, [r3], #1
 8024f34:	e7f9      	b.n	8024f2a <memset+0x4>

08024f36 <strcat>:
 8024f36:	b510      	push	{r4, lr}
 8024f38:	4602      	mov	r2, r0
 8024f3a:	7814      	ldrb	r4, [r2, #0]
 8024f3c:	4613      	mov	r3, r2
 8024f3e:	3201      	adds	r2, #1
 8024f40:	2c00      	cmp	r4, #0
 8024f42:	d1fa      	bne.n	8024f3a <strcat+0x4>
 8024f44:	3b01      	subs	r3, #1
 8024f46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024f4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024f4e:	2a00      	cmp	r2, #0
 8024f50:	d1f9      	bne.n	8024f46 <strcat+0x10>
 8024f52:	bd10      	pop	{r4, pc}

08024f54 <strchr>:
 8024f54:	b2c9      	uxtb	r1, r1
 8024f56:	4603      	mov	r3, r0
 8024f58:	4618      	mov	r0, r3
 8024f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024f5e:	b112      	cbz	r2, 8024f66 <strchr+0x12>
 8024f60:	428a      	cmp	r2, r1
 8024f62:	d1f9      	bne.n	8024f58 <strchr+0x4>
 8024f64:	4770      	bx	lr
 8024f66:	2900      	cmp	r1, #0
 8024f68:	bf18      	it	ne
 8024f6a:	2000      	movne	r0, #0
 8024f6c:	4770      	bx	lr

08024f6e <strncmp>:
 8024f6e:	b510      	push	{r4, lr}
 8024f70:	b16a      	cbz	r2, 8024f8e <strncmp+0x20>
 8024f72:	3901      	subs	r1, #1
 8024f74:	1884      	adds	r4, r0, r2
 8024f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024f7a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8024f7e:	429a      	cmp	r2, r3
 8024f80:	d103      	bne.n	8024f8a <strncmp+0x1c>
 8024f82:	42a0      	cmp	r0, r4
 8024f84:	d001      	beq.n	8024f8a <strncmp+0x1c>
 8024f86:	2a00      	cmp	r2, #0
 8024f88:	d1f5      	bne.n	8024f76 <strncmp+0x8>
 8024f8a:	1ad0      	subs	r0, r2, r3
 8024f8c:	bd10      	pop	{r4, pc}
 8024f8e:	4610      	mov	r0, r2
 8024f90:	e7fc      	b.n	8024f8c <strncmp+0x1e>

08024f92 <strncpy>:
 8024f92:	b510      	push	{r4, lr}
 8024f94:	3901      	subs	r1, #1
 8024f96:	4603      	mov	r3, r0
 8024f98:	b132      	cbz	r2, 8024fa8 <strncpy+0x16>
 8024f9a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8024f9e:	f803 4b01 	strb.w	r4, [r3], #1
 8024fa2:	3a01      	subs	r2, #1
 8024fa4:	2c00      	cmp	r4, #0
 8024fa6:	d1f7      	bne.n	8024f98 <strncpy+0x6>
 8024fa8:	441a      	add	r2, r3
 8024faa:	2100      	movs	r1, #0
 8024fac:	4293      	cmp	r3, r2
 8024fae:	d100      	bne.n	8024fb2 <strncpy+0x20>
 8024fb0:	bd10      	pop	{r4, pc}
 8024fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8024fb6:	e7f9      	b.n	8024fac <strncpy+0x1a>

08024fb8 <strrchr>:
 8024fb8:	b538      	push	{r3, r4, r5, lr}
 8024fba:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8024fbe:	4603      	mov	r3, r0
 8024fc0:	d10e      	bne.n	8024fe0 <strrchr+0x28>
 8024fc2:	4621      	mov	r1, r4
 8024fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024fc8:	f7ff bfc4 	b.w	8024f54 <strchr>
 8024fcc:	1c43      	adds	r3, r0, #1
 8024fce:	4605      	mov	r5, r0
 8024fd0:	4621      	mov	r1, r4
 8024fd2:	4618      	mov	r0, r3
 8024fd4:	f7ff ffbe 	bl	8024f54 <strchr>
 8024fd8:	2800      	cmp	r0, #0
 8024fda:	d1f7      	bne.n	8024fcc <strrchr+0x14>
 8024fdc:	4628      	mov	r0, r5
 8024fde:	bd38      	pop	{r3, r4, r5, pc}
 8024fe0:	2500      	movs	r5, #0
 8024fe2:	e7f5      	b.n	8024fd0 <strrchr+0x18>

08024fe4 <strtok>:
 8024fe4:	4b16      	ldr	r3, [pc, #88]	@ (8025040 <strtok+0x5c>)
 8024fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024fea:	681f      	ldr	r7, [r3, #0]
 8024fec:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8024fee:	4605      	mov	r5, r0
 8024ff0:	460e      	mov	r6, r1
 8024ff2:	b9ec      	cbnz	r4, 8025030 <strtok+0x4c>
 8024ff4:	2050      	movs	r0, #80	@ 0x50
 8024ff6:	f7fd fecf 	bl	8022d98 <malloc>
 8024ffa:	4602      	mov	r2, r0
 8024ffc:	6478      	str	r0, [r7, #68]	@ 0x44
 8024ffe:	b920      	cbnz	r0, 802500a <strtok+0x26>
 8025000:	4b10      	ldr	r3, [pc, #64]	@ (8025044 <strtok+0x60>)
 8025002:	4811      	ldr	r0, [pc, #68]	@ (8025048 <strtok+0x64>)
 8025004:	215b      	movs	r1, #91	@ 0x5b
 8025006:	f7fd fe8d 	bl	8022d24 <__assert_func>
 802500a:	e9c0 4400 	strd	r4, r4, [r0]
 802500e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8025012:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8025016:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 802501a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 802501e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8025022:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8025026:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 802502a:	6184      	str	r4, [r0, #24]
 802502c:	7704      	strb	r4, [r0, #28]
 802502e:	6244      	str	r4, [r0, #36]	@ 0x24
 8025030:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8025032:	4631      	mov	r1, r6
 8025034:	4628      	mov	r0, r5
 8025036:	2301      	movs	r3, #1
 8025038:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802503c:	f000 b806 	b.w	802504c <__strtok_r>
 8025040:	2000062c 	.word	0x2000062c
 8025044:	0803195a 	.word	0x0803195a
 8025048:	08031971 	.word	0x08031971

0802504c <__strtok_r>:
 802504c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802504e:	4604      	mov	r4, r0
 8025050:	b908      	cbnz	r0, 8025056 <__strtok_r+0xa>
 8025052:	6814      	ldr	r4, [r2, #0]
 8025054:	b144      	cbz	r4, 8025068 <__strtok_r+0x1c>
 8025056:	4620      	mov	r0, r4
 8025058:	f814 5b01 	ldrb.w	r5, [r4], #1
 802505c:	460f      	mov	r7, r1
 802505e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8025062:	b91e      	cbnz	r6, 802506c <__strtok_r+0x20>
 8025064:	b965      	cbnz	r5, 8025080 <__strtok_r+0x34>
 8025066:	6015      	str	r5, [r2, #0]
 8025068:	2000      	movs	r0, #0
 802506a:	e005      	b.n	8025078 <__strtok_r+0x2c>
 802506c:	42b5      	cmp	r5, r6
 802506e:	d1f6      	bne.n	802505e <__strtok_r+0x12>
 8025070:	2b00      	cmp	r3, #0
 8025072:	d1f0      	bne.n	8025056 <__strtok_r+0xa>
 8025074:	6014      	str	r4, [r2, #0]
 8025076:	7003      	strb	r3, [r0, #0]
 8025078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802507a:	461c      	mov	r4, r3
 802507c:	e00c      	b.n	8025098 <__strtok_r+0x4c>
 802507e:	b915      	cbnz	r5, 8025086 <__strtok_r+0x3a>
 8025080:	f814 3b01 	ldrb.w	r3, [r4], #1
 8025084:	460e      	mov	r6, r1
 8025086:	f816 5b01 	ldrb.w	r5, [r6], #1
 802508a:	42ab      	cmp	r3, r5
 802508c:	d1f7      	bne.n	802507e <__strtok_r+0x32>
 802508e:	2b00      	cmp	r3, #0
 8025090:	d0f3      	beq.n	802507a <__strtok_r+0x2e>
 8025092:	2300      	movs	r3, #0
 8025094:	f804 3c01 	strb.w	r3, [r4, #-1]
 8025098:	6014      	str	r4, [r2, #0]
 802509a:	e7ed      	b.n	8025078 <__strtok_r+0x2c>

0802509c <strstr>:
 802509c:	780a      	ldrb	r2, [r1, #0]
 802509e:	b570      	push	{r4, r5, r6, lr}
 80250a0:	b96a      	cbnz	r2, 80250be <strstr+0x22>
 80250a2:	bd70      	pop	{r4, r5, r6, pc}
 80250a4:	429a      	cmp	r2, r3
 80250a6:	d109      	bne.n	80250bc <strstr+0x20>
 80250a8:	460c      	mov	r4, r1
 80250aa:	4605      	mov	r5, r0
 80250ac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80250b0:	2b00      	cmp	r3, #0
 80250b2:	d0f6      	beq.n	80250a2 <strstr+0x6>
 80250b4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80250b8:	429e      	cmp	r6, r3
 80250ba:	d0f7      	beq.n	80250ac <strstr+0x10>
 80250bc:	3001      	adds	r0, #1
 80250be:	7803      	ldrb	r3, [r0, #0]
 80250c0:	2b00      	cmp	r3, #0
 80250c2:	d1ef      	bne.n	80250a4 <strstr+0x8>
 80250c4:	4618      	mov	r0, r3
 80250c6:	e7ec      	b.n	80250a2 <strstr+0x6>

080250c8 <_localeconv_r>:
 80250c8:	4800      	ldr	r0, [pc, #0]	@ (80250cc <_localeconv_r+0x4>)
 80250ca:	4770      	bx	lr
 80250cc:	200005b0 	.word	0x200005b0

080250d0 <_close_r>:
 80250d0:	b538      	push	{r3, r4, r5, lr}
 80250d2:	4d06      	ldr	r5, [pc, #24]	@ (80250ec <_close_r+0x1c>)
 80250d4:	2300      	movs	r3, #0
 80250d6:	4604      	mov	r4, r0
 80250d8:	4608      	mov	r0, r1
 80250da:	602b      	str	r3, [r5, #0]
 80250dc:	f7e7 ff6a 	bl	800cfb4 <_close>
 80250e0:	1c43      	adds	r3, r0, #1
 80250e2:	d102      	bne.n	80250ea <_close_r+0x1a>
 80250e4:	682b      	ldr	r3, [r5, #0]
 80250e6:	b103      	cbz	r3, 80250ea <_close_r+0x1a>
 80250e8:	6023      	str	r3, [r4, #0]
 80250ea:	bd38      	pop	{r3, r4, r5, pc}
 80250ec:	2000305c 	.word	0x2000305c

080250f0 <_lseek_r>:
 80250f0:	b538      	push	{r3, r4, r5, lr}
 80250f2:	4d07      	ldr	r5, [pc, #28]	@ (8025110 <_lseek_r+0x20>)
 80250f4:	4604      	mov	r4, r0
 80250f6:	4608      	mov	r0, r1
 80250f8:	4611      	mov	r1, r2
 80250fa:	2200      	movs	r2, #0
 80250fc:	602a      	str	r2, [r5, #0]
 80250fe:	461a      	mov	r2, r3
 8025100:	f7e7 ff62 	bl	800cfc8 <_lseek>
 8025104:	1c43      	adds	r3, r0, #1
 8025106:	d102      	bne.n	802510e <_lseek_r+0x1e>
 8025108:	682b      	ldr	r3, [r5, #0]
 802510a:	b103      	cbz	r3, 802510e <_lseek_r+0x1e>
 802510c:	6023      	str	r3, [r4, #0]
 802510e:	bd38      	pop	{r3, r4, r5, pc}
 8025110:	2000305c 	.word	0x2000305c

08025114 <_read_r>:
 8025114:	b538      	push	{r3, r4, r5, lr}
 8025116:	4d07      	ldr	r5, [pc, #28]	@ (8025134 <_read_r+0x20>)
 8025118:	4604      	mov	r4, r0
 802511a:	4608      	mov	r0, r1
 802511c:	4611      	mov	r1, r2
 802511e:	2200      	movs	r2, #0
 8025120:	602a      	str	r2, [r5, #0]
 8025122:	461a      	mov	r2, r3
 8025124:	f7e7 ff28 	bl	800cf78 <_read>
 8025128:	1c43      	adds	r3, r0, #1
 802512a:	d102      	bne.n	8025132 <_read_r+0x1e>
 802512c:	682b      	ldr	r3, [r5, #0]
 802512e:	b103      	cbz	r3, 8025132 <_read_r+0x1e>
 8025130:	6023      	str	r3, [r4, #0]
 8025132:	bd38      	pop	{r3, r4, r5, pc}
 8025134:	2000305c 	.word	0x2000305c

08025138 <_sbrk_r>:
 8025138:	b538      	push	{r3, r4, r5, lr}
 802513a:	4d06      	ldr	r5, [pc, #24]	@ (8025154 <_sbrk_r+0x1c>)
 802513c:	2300      	movs	r3, #0
 802513e:	4604      	mov	r4, r0
 8025140:	4608      	mov	r0, r1
 8025142:	602b      	str	r3, [r5, #0]
 8025144:	f7e7 ff42 	bl	800cfcc <_sbrk>
 8025148:	1c43      	adds	r3, r0, #1
 802514a:	d102      	bne.n	8025152 <_sbrk_r+0x1a>
 802514c:	682b      	ldr	r3, [r5, #0]
 802514e:	b103      	cbz	r3, 8025152 <_sbrk_r+0x1a>
 8025150:	6023      	str	r3, [r4, #0]
 8025152:	bd38      	pop	{r3, r4, r5, pc}
 8025154:	2000305c 	.word	0x2000305c

08025158 <_write_r>:
 8025158:	b538      	push	{r3, r4, r5, lr}
 802515a:	4d07      	ldr	r5, [pc, #28]	@ (8025178 <_write_r+0x20>)
 802515c:	4604      	mov	r4, r0
 802515e:	4608      	mov	r0, r1
 8025160:	4611      	mov	r1, r2
 8025162:	2200      	movs	r2, #0
 8025164:	602a      	str	r2, [r5, #0]
 8025166:	461a      	mov	r2, r3
 8025168:	f7e7 ff16 	bl	800cf98 <_write>
 802516c:	1c43      	adds	r3, r0, #1
 802516e:	d102      	bne.n	8025176 <_write_r+0x1e>
 8025170:	682b      	ldr	r3, [r5, #0]
 8025172:	b103      	cbz	r3, 8025176 <_write_r+0x1e>
 8025174:	6023      	str	r3, [r4, #0]
 8025176:	bd38      	pop	{r3, r4, r5, pc}
 8025178:	2000305c 	.word	0x2000305c

0802517c <__errno>:
 802517c:	4b01      	ldr	r3, [pc, #4]	@ (8025184 <__errno+0x8>)
 802517e:	6818      	ldr	r0, [r3, #0]
 8025180:	4770      	bx	lr
 8025182:	bf00      	nop
 8025184:	2000062c 	.word	0x2000062c

08025188 <__libc_init_array>:
 8025188:	b570      	push	{r4, r5, r6, lr}
 802518a:	4d0d      	ldr	r5, [pc, #52]	@ (80251c0 <__libc_init_array+0x38>)
 802518c:	4c0d      	ldr	r4, [pc, #52]	@ (80251c4 <__libc_init_array+0x3c>)
 802518e:	1b64      	subs	r4, r4, r5
 8025190:	10a4      	asrs	r4, r4, #2
 8025192:	2600      	movs	r6, #0
 8025194:	42a6      	cmp	r6, r4
 8025196:	d109      	bne.n	80251ac <__libc_init_array+0x24>
 8025198:	4d0b      	ldr	r5, [pc, #44]	@ (80251c8 <__libc_init_array+0x40>)
 802519a:	4c0c      	ldr	r4, [pc, #48]	@ (80251cc <__libc_init_array+0x44>)
 802519c:	f004 f8ea 	bl	8029374 <_init>
 80251a0:	1b64      	subs	r4, r4, r5
 80251a2:	10a4      	asrs	r4, r4, #2
 80251a4:	2600      	movs	r6, #0
 80251a6:	42a6      	cmp	r6, r4
 80251a8:	d105      	bne.n	80251b6 <__libc_init_array+0x2e>
 80251aa:	bd70      	pop	{r4, r5, r6, pc}
 80251ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80251b0:	4798      	blx	r3
 80251b2:	3601      	adds	r6, #1
 80251b4:	e7ee      	b.n	8025194 <__libc_init_array+0xc>
 80251b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80251ba:	4798      	blx	r3
 80251bc:	3601      	adds	r6, #1
 80251be:	e7f2      	b.n	80251a6 <__libc_init_array+0x1e>
 80251c0:	08032078 	.word	0x08032078
 80251c4:	08032078 	.word	0x08032078
 80251c8:	08032078 	.word	0x08032078
 80251cc:	0803207c 	.word	0x0803207c

080251d0 <__retarget_lock_init_recursive>:
 80251d0:	4770      	bx	lr

080251d2 <__retarget_lock_acquire_recursive>:
 80251d2:	4770      	bx	lr

080251d4 <__retarget_lock_release_recursive>:
 80251d4:	4770      	bx	lr

080251d6 <strcpy>:
 80251d6:	4603      	mov	r3, r0
 80251d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80251dc:	f803 2b01 	strb.w	r2, [r3], #1
 80251e0:	2a00      	cmp	r2, #0
 80251e2:	d1f9      	bne.n	80251d8 <strcpy+0x2>
 80251e4:	4770      	bx	lr

080251e6 <memcpy>:
 80251e6:	440a      	add	r2, r1
 80251e8:	4291      	cmp	r1, r2
 80251ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80251ee:	d100      	bne.n	80251f2 <memcpy+0xc>
 80251f0:	4770      	bx	lr
 80251f2:	b510      	push	{r4, lr}
 80251f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80251f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80251fc:	4291      	cmp	r1, r2
 80251fe:	d1f9      	bne.n	80251f4 <memcpy+0xe>
 8025200:	bd10      	pop	{r4, pc}
 8025202:	0000      	movs	r0, r0
 8025204:	0000      	movs	r0, r0
	...

08025208 <nan>:
 8025208:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8025210 <nan+0x8>
 802520c:	4770      	bx	lr
 802520e:	bf00      	nop
 8025210:	00000000 	.word	0x00000000
 8025214:	7ff80000 	.word	0x7ff80000

08025218 <nanf>:
 8025218:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8025220 <nanf+0x8>
 802521c:	4770      	bx	lr
 802521e:	bf00      	nop
 8025220:	7fc00000 	.word	0x7fc00000

08025224 <abort>:
 8025224:	b508      	push	{r3, lr}
 8025226:	2006      	movs	r0, #6
 8025228:	f002 fae4 	bl	80277f4 <raise>
 802522c:	2001      	movs	r0, #1
 802522e:	f7e7 fe9d 	bl	800cf6c <_exit>

08025232 <quorem>:
 8025232:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025236:	6903      	ldr	r3, [r0, #16]
 8025238:	690c      	ldr	r4, [r1, #16]
 802523a:	42a3      	cmp	r3, r4
 802523c:	4607      	mov	r7, r0
 802523e:	db7e      	blt.n	802533e <quorem+0x10c>
 8025240:	3c01      	subs	r4, #1
 8025242:	f101 0814 	add.w	r8, r1, #20
 8025246:	00a3      	lsls	r3, r4, #2
 8025248:	f100 0514 	add.w	r5, r0, #20
 802524c:	9300      	str	r3, [sp, #0]
 802524e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025252:	9301      	str	r3, [sp, #4]
 8025254:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8025258:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802525c:	3301      	adds	r3, #1
 802525e:	429a      	cmp	r2, r3
 8025260:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8025264:	fbb2 f6f3 	udiv	r6, r2, r3
 8025268:	d32e      	bcc.n	80252c8 <quorem+0x96>
 802526a:	f04f 0a00 	mov.w	sl, #0
 802526e:	46c4      	mov	ip, r8
 8025270:	46ae      	mov	lr, r5
 8025272:	46d3      	mov	fp, sl
 8025274:	f85c 3b04 	ldr.w	r3, [ip], #4
 8025278:	b298      	uxth	r0, r3
 802527a:	fb06 a000 	mla	r0, r6, r0, sl
 802527e:	0c02      	lsrs	r2, r0, #16
 8025280:	0c1b      	lsrs	r3, r3, #16
 8025282:	fb06 2303 	mla	r3, r6, r3, r2
 8025286:	f8de 2000 	ldr.w	r2, [lr]
 802528a:	b280      	uxth	r0, r0
 802528c:	b292      	uxth	r2, r2
 802528e:	1a12      	subs	r2, r2, r0
 8025290:	445a      	add	r2, fp
 8025292:	f8de 0000 	ldr.w	r0, [lr]
 8025296:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802529a:	b29b      	uxth	r3, r3
 802529c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80252a0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80252a4:	b292      	uxth	r2, r2
 80252a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80252aa:	45e1      	cmp	r9, ip
 80252ac:	f84e 2b04 	str.w	r2, [lr], #4
 80252b0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80252b4:	d2de      	bcs.n	8025274 <quorem+0x42>
 80252b6:	9b00      	ldr	r3, [sp, #0]
 80252b8:	58eb      	ldr	r3, [r5, r3]
 80252ba:	b92b      	cbnz	r3, 80252c8 <quorem+0x96>
 80252bc:	9b01      	ldr	r3, [sp, #4]
 80252be:	3b04      	subs	r3, #4
 80252c0:	429d      	cmp	r5, r3
 80252c2:	461a      	mov	r2, r3
 80252c4:	d32f      	bcc.n	8025326 <quorem+0xf4>
 80252c6:	613c      	str	r4, [r7, #16]
 80252c8:	4638      	mov	r0, r7
 80252ca:	f001 fc8f 	bl	8026bec <__mcmp>
 80252ce:	2800      	cmp	r0, #0
 80252d0:	db25      	blt.n	802531e <quorem+0xec>
 80252d2:	4629      	mov	r1, r5
 80252d4:	2000      	movs	r0, #0
 80252d6:	f858 2b04 	ldr.w	r2, [r8], #4
 80252da:	f8d1 c000 	ldr.w	ip, [r1]
 80252de:	fa1f fe82 	uxth.w	lr, r2
 80252e2:	fa1f f38c 	uxth.w	r3, ip
 80252e6:	eba3 030e 	sub.w	r3, r3, lr
 80252ea:	4403      	add	r3, r0
 80252ec:	0c12      	lsrs	r2, r2, #16
 80252ee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80252f2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80252f6:	b29b      	uxth	r3, r3
 80252f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80252fc:	45c1      	cmp	r9, r8
 80252fe:	f841 3b04 	str.w	r3, [r1], #4
 8025302:	ea4f 4022 	mov.w	r0, r2, asr #16
 8025306:	d2e6      	bcs.n	80252d6 <quorem+0xa4>
 8025308:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802530c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025310:	b922      	cbnz	r2, 802531c <quorem+0xea>
 8025312:	3b04      	subs	r3, #4
 8025314:	429d      	cmp	r5, r3
 8025316:	461a      	mov	r2, r3
 8025318:	d30b      	bcc.n	8025332 <quorem+0x100>
 802531a:	613c      	str	r4, [r7, #16]
 802531c:	3601      	adds	r6, #1
 802531e:	4630      	mov	r0, r6
 8025320:	b003      	add	sp, #12
 8025322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025326:	6812      	ldr	r2, [r2, #0]
 8025328:	3b04      	subs	r3, #4
 802532a:	2a00      	cmp	r2, #0
 802532c:	d1cb      	bne.n	80252c6 <quorem+0x94>
 802532e:	3c01      	subs	r4, #1
 8025330:	e7c6      	b.n	80252c0 <quorem+0x8e>
 8025332:	6812      	ldr	r2, [r2, #0]
 8025334:	3b04      	subs	r3, #4
 8025336:	2a00      	cmp	r2, #0
 8025338:	d1ef      	bne.n	802531a <quorem+0xe8>
 802533a:	3c01      	subs	r4, #1
 802533c:	e7ea      	b.n	8025314 <quorem+0xe2>
 802533e:	2000      	movs	r0, #0
 8025340:	e7ee      	b.n	8025320 <quorem+0xee>
 8025342:	0000      	movs	r0, r0
 8025344:	0000      	movs	r0, r0
	...

08025348 <_dtoa_r>:
 8025348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802534c:	69c7      	ldr	r7, [r0, #28]
 802534e:	b099      	sub	sp, #100	@ 0x64
 8025350:	ed8d 0b02 	vstr	d0, [sp, #8]
 8025354:	ec55 4b10 	vmov	r4, r5, d0
 8025358:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802535a:	9109      	str	r1, [sp, #36]	@ 0x24
 802535c:	4683      	mov	fp, r0
 802535e:	920e      	str	r2, [sp, #56]	@ 0x38
 8025360:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025362:	b97f      	cbnz	r7, 8025384 <_dtoa_r+0x3c>
 8025364:	2010      	movs	r0, #16
 8025366:	f7fd fd17 	bl	8022d98 <malloc>
 802536a:	4602      	mov	r2, r0
 802536c:	f8cb 001c 	str.w	r0, [fp, #28]
 8025370:	b920      	cbnz	r0, 802537c <_dtoa_r+0x34>
 8025372:	4ba7      	ldr	r3, [pc, #668]	@ (8025610 <_dtoa_r+0x2c8>)
 8025374:	21ef      	movs	r1, #239	@ 0xef
 8025376:	48a7      	ldr	r0, [pc, #668]	@ (8025614 <_dtoa_r+0x2cc>)
 8025378:	f7fd fcd4 	bl	8022d24 <__assert_func>
 802537c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8025380:	6007      	str	r7, [r0, #0]
 8025382:	60c7      	str	r7, [r0, #12]
 8025384:	f8db 301c 	ldr.w	r3, [fp, #28]
 8025388:	6819      	ldr	r1, [r3, #0]
 802538a:	b159      	cbz	r1, 80253a4 <_dtoa_r+0x5c>
 802538c:	685a      	ldr	r2, [r3, #4]
 802538e:	604a      	str	r2, [r1, #4]
 8025390:	2301      	movs	r3, #1
 8025392:	4093      	lsls	r3, r2
 8025394:	608b      	str	r3, [r1, #8]
 8025396:	4658      	mov	r0, fp
 8025398:	f001 f9a4 	bl	80266e4 <_Bfree>
 802539c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80253a0:	2200      	movs	r2, #0
 80253a2:	601a      	str	r2, [r3, #0]
 80253a4:	1e2b      	subs	r3, r5, #0
 80253a6:	bfb9      	ittee	lt
 80253a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80253ac:	9303      	strlt	r3, [sp, #12]
 80253ae:	2300      	movge	r3, #0
 80253b0:	6033      	strge	r3, [r6, #0]
 80253b2:	9f03      	ldr	r7, [sp, #12]
 80253b4:	4b98      	ldr	r3, [pc, #608]	@ (8025618 <_dtoa_r+0x2d0>)
 80253b6:	bfbc      	itt	lt
 80253b8:	2201      	movlt	r2, #1
 80253ba:	6032      	strlt	r2, [r6, #0]
 80253bc:	43bb      	bics	r3, r7
 80253be:	d112      	bne.n	80253e6 <_dtoa_r+0x9e>
 80253c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80253c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80253c6:	6013      	str	r3, [r2, #0]
 80253c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80253cc:	4323      	orrs	r3, r4
 80253ce:	f000 854d 	beq.w	8025e6c <_dtoa_r+0xb24>
 80253d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80253d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 802562c <_dtoa_r+0x2e4>
 80253d8:	2b00      	cmp	r3, #0
 80253da:	f000 854f 	beq.w	8025e7c <_dtoa_r+0xb34>
 80253de:	f10a 0303 	add.w	r3, sl, #3
 80253e2:	f000 bd49 	b.w	8025e78 <_dtoa_r+0xb30>
 80253e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80253ea:	2200      	movs	r2, #0
 80253ec:	ec51 0b17 	vmov	r0, r1, d7
 80253f0:	2300      	movs	r3, #0
 80253f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80253f6:	f7e3 faaf 	bl	8008958 <__aeabi_dcmpeq>
 80253fa:	4680      	mov	r8, r0
 80253fc:	b158      	cbz	r0, 8025416 <_dtoa_r+0xce>
 80253fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025400:	2301      	movs	r3, #1
 8025402:	6013      	str	r3, [r2, #0]
 8025404:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025406:	b113      	cbz	r3, 802540e <_dtoa_r+0xc6>
 8025408:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802540a:	4b84      	ldr	r3, [pc, #528]	@ (802561c <_dtoa_r+0x2d4>)
 802540c:	6013      	str	r3, [r2, #0]
 802540e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8025630 <_dtoa_r+0x2e8>
 8025412:	f000 bd33 	b.w	8025e7c <_dtoa_r+0xb34>
 8025416:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802541a:	aa16      	add	r2, sp, #88	@ 0x58
 802541c:	a917      	add	r1, sp, #92	@ 0x5c
 802541e:	4658      	mov	r0, fp
 8025420:	f001 fd04 	bl	8026e2c <__d2b>
 8025424:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8025428:	4681      	mov	r9, r0
 802542a:	2e00      	cmp	r6, #0
 802542c:	d077      	beq.n	802551e <_dtoa_r+0x1d6>
 802542e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025430:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8025434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802543c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8025440:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8025444:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8025448:	4619      	mov	r1, r3
 802544a:	2200      	movs	r2, #0
 802544c:	4b74      	ldr	r3, [pc, #464]	@ (8025620 <_dtoa_r+0x2d8>)
 802544e:	f7e2 fe63 	bl	8008118 <__aeabi_dsub>
 8025452:	a369      	add	r3, pc, #420	@ (adr r3, 80255f8 <_dtoa_r+0x2b0>)
 8025454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025458:	f7e3 f816 	bl	8008488 <__aeabi_dmul>
 802545c:	a368      	add	r3, pc, #416	@ (adr r3, 8025600 <_dtoa_r+0x2b8>)
 802545e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025462:	f7e2 fe5b 	bl	800811c <__adddf3>
 8025466:	4604      	mov	r4, r0
 8025468:	4630      	mov	r0, r6
 802546a:	460d      	mov	r5, r1
 802546c:	f7e2 ffa2 	bl	80083b4 <__aeabi_i2d>
 8025470:	a365      	add	r3, pc, #404	@ (adr r3, 8025608 <_dtoa_r+0x2c0>)
 8025472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025476:	f7e3 f807 	bl	8008488 <__aeabi_dmul>
 802547a:	4602      	mov	r2, r0
 802547c:	460b      	mov	r3, r1
 802547e:	4620      	mov	r0, r4
 8025480:	4629      	mov	r1, r5
 8025482:	f7e2 fe4b 	bl	800811c <__adddf3>
 8025486:	4604      	mov	r4, r0
 8025488:	460d      	mov	r5, r1
 802548a:	f7e3 faad 	bl	80089e8 <__aeabi_d2iz>
 802548e:	2200      	movs	r2, #0
 8025490:	4607      	mov	r7, r0
 8025492:	2300      	movs	r3, #0
 8025494:	4620      	mov	r0, r4
 8025496:	4629      	mov	r1, r5
 8025498:	f7e3 fa68 	bl	800896c <__aeabi_dcmplt>
 802549c:	b140      	cbz	r0, 80254b0 <_dtoa_r+0x168>
 802549e:	4638      	mov	r0, r7
 80254a0:	f7e2 ff88 	bl	80083b4 <__aeabi_i2d>
 80254a4:	4622      	mov	r2, r4
 80254a6:	462b      	mov	r3, r5
 80254a8:	f7e3 fa56 	bl	8008958 <__aeabi_dcmpeq>
 80254ac:	b900      	cbnz	r0, 80254b0 <_dtoa_r+0x168>
 80254ae:	3f01      	subs	r7, #1
 80254b0:	2f16      	cmp	r7, #22
 80254b2:	d851      	bhi.n	8025558 <_dtoa_r+0x210>
 80254b4:	4b5b      	ldr	r3, [pc, #364]	@ (8025624 <_dtoa_r+0x2dc>)
 80254b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80254ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80254c2:	f7e3 fa53 	bl	800896c <__aeabi_dcmplt>
 80254c6:	2800      	cmp	r0, #0
 80254c8:	d048      	beq.n	802555c <_dtoa_r+0x214>
 80254ca:	3f01      	subs	r7, #1
 80254cc:	2300      	movs	r3, #0
 80254ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80254d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80254d2:	1b9b      	subs	r3, r3, r6
 80254d4:	1e5a      	subs	r2, r3, #1
 80254d6:	bf44      	itt	mi
 80254d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80254dc:	2300      	movmi	r3, #0
 80254de:	9208      	str	r2, [sp, #32]
 80254e0:	bf54      	ite	pl
 80254e2:	f04f 0800 	movpl.w	r8, #0
 80254e6:	9308      	strmi	r3, [sp, #32]
 80254e8:	2f00      	cmp	r7, #0
 80254ea:	db39      	blt.n	8025560 <_dtoa_r+0x218>
 80254ec:	9b08      	ldr	r3, [sp, #32]
 80254ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80254f0:	443b      	add	r3, r7
 80254f2:	9308      	str	r3, [sp, #32]
 80254f4:	2300      	movs	r3, #0
 80254f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80254f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80254fa:	2b09      	cmp	r3, #9
 80254fc:	d864      	bhi.n	80255c8 <_dtoa_r+0x280>
 80254fe:	2b05      	cmp	r3, #5
 8025500:	bfc4      	itt	gt
 8025502:	3b04      	subgt	r3, #4
 8025504:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8025506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025508:	f1a3 0302 	sub.w	r3, r3, #2
 802550c:	bfcc      	ite	gt
 802550e:	2400      	movgt	r4, #0
 8025510:	2401      	movle	r4, #1
 8025512:	2b03      	cmp	r3, #3
 8025514:	d863      	bhi.n	80255de <_dtoa_r+0x296>
 8025516:	e8df f003 	tbb	[pc, r3]
 802551a:	372a      	.short	0x372a
 802551c:	5535      	.short	0x5535
 802551e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8025522:	441e      	add	r6, r3
 8025524:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8025528:	2b20      	cmp	r3, #32
 802552a:	bfc1      	itttt	gt
 802552c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8025530:	409f      	lslgt	r7, r3
 8025532:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8025536:	fa24 f303 	lsrgt.w	r3, r4, r3
 802553a:	bfd6      	itet	le
 802553c:	f1c3 0320 	rsble	r3, r3, #32
 8025540:	ea47 0003 	orrgt.w	r0, r7, r3
 8025544:	fa04 f003 	lslle.w	r0, r4, r3
 8025548:	f7e2 ff24 	bl	8008394 <__aeabi_ui2d>
 802554c:	2201      	movs	r2, #1
 802554e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8025552:	3e01      	subs	r6, #1
 8025554:	9214      	str	r2, [sp, #80]	@ 0x50
 8025556:	e777      	b.n	8025448 <_dtoa_r+0x100>
 8025558:	2301      	movs	r3, #1
 802555a:	e7b8      	b.n	80254ce <_dtoa_r+0x186>
 802555c:	9012      	str	r0, [sp, #72]	@ 0x48
 802555e:	e7b7      	b.n	80254d0 <_dtoa_r+0x188>
 8025560:	427b      	negs	r3, r7
 8025562:	930a      	str	r3, [sp, #40]	@ 0x28
 8025564:	2300      	movs	r3, #0
 8025566:	eba8 0807 	sub.w	r8, r8, r7
 802556a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802556c:	e7c4      	b.n	80254f8 <_dtoa_r+0x1b0>
 802556e:	2300      	movs	r3, #0
 8025570:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025572:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025574:	2b00      	cmp	r3, #0
 8025576:	dc35      	bgt.n	80255e4 <_dtoa_r+0x29c>
 8025578:	2301      	movs	r3, #1
 802557a:	9300      	str	r3, [sp, #0]
 802557c:	9307      	str	r3, [sp, #28]
 802557e:	461a      	mov	r2, r3
 8025580:	920e      	str	r2, [sp, #56]	@ 0x38
 8025582:	e00b      	b.n	802559c <_dtoa_r+0x254>
 8025584:	2301      	movs	r3, #1
 8025586:	e7f3      	b.n	8025570 <_dtoa_r+0x228>
 8025588:	2300      	movs	r3, #0
 802558a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802558c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802558e:	18fb      	adds	r3, r7, r3
 8025590:	9300      	str	r3, [sp, #0]
 8025592:	3301      	adds	r3, #1
 8025594:	2b01      	cmp	r3, #1
 8025596:	9307      	str	r3, [sp, #28]
 8025598:	bfb8      	it	lt
 802559a:	2301      	movlt	r3, #1
 802559c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80255a0:	2100      	movs	r1, #0
 80255a2:	2204      	movs	r2, #4
 80255a4:	f102 0514 	add.w	r5, r2, #20
 80255a8:	429d      	cmp	r5, r3
 80255aa:	d91f      	bls.n	80255ec <_dtoa_r+0x2a4>
 80255ac:	6041      	str	r1, [r0, #4]
 80255ae:	4658      	mov	r0, fp
 80255b0:	f001 f858 	bl	8026664 <_Balloc>
 80255b4:	4682      	mov	sl, r0
 80255b6:	2800      	cmp	r0, #0
 80255b8:	d13c      	bne.n	8025634 <_dtoa_r+0x2ec>
 80255ba:	4b1b      	ldr	r3, [pc, #108]	@ (8025628 <_dtoa_r+0x2e0>)
 80255bc:	4602      	mov	r2, r0
 80255be:	f240 11af 	movw	r1, #431	@ 0x1af
 80255c2:	e6d8      	b.n	8025376 <_dtoa_r+0x2e>
 80255c4:	2301      	movs	r3, #1
 80255c6:	e7e0      	b.n	802558a <_dtoa_r+0x242>
 80255c8:	2401      	movs	r4, #1
 80255ca:	2300      	movs	r3, #0
 80255cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80255ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80255d0:	f04f 33ff 	mov.w	r3, #4294967295
 80255d4:	9300      	str	r3, [sp, #0]
 80255d6:	9307      	str	r3, [sp, #28]
 80255d8:	2200      	movs	r2, #0
 80255da:	2312      	movs	r3, #18
 80255dc:	e7d0      	b.n	8025580 <_dtoa_r+0x238>
 80255de:	2301      	movs	r3, #1
 80255e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80255e2:	e7f5      	b.n	80255d0 <_dtoa_r+0x288>
 80255e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80255e6:	9300      	str	r3, [sp, #0]
 80255e8:	9307      	str	r3, [sp, #28]
 80255ea:	e7d7      	b.n	802559c <_dtoa_r+0x254>
 80255ec:	3101      	adds	r1, #1
 80255ee:	0052      	lsls	r2, r2, #1
 80255f0:	e7d8      	b.n	80255a4 <_dtoa_r+0x25c>
 80255f2:	bf00      	nop
 80255f4:	f3af 8000 	nop.w
 80255f8:	636f4361 	.word	0x636f4361
 80255fc:	3fd287a7 	.word	0x3fd287a7
 8025600:	8b60c8b3 	.word	0x8b60c8b3
 8025604:	3fc68a28 	.word	0x3fc68a28
 8025608:	509f79fb 	.word	0x509f79fb
 802560c:	3fd34413 	.word	0x3fd34413
 8025610:	0803195a 	.word	0x0803195a
 8025614:	080319e0 	.word	0x080319e0
 8025618:	7ff00000 	.word	0x7ff00000
 802561c:	08031932 	.word	0x08031932
 8025620:	3ff80000 	.word	0x3ff80000
 8025624:	08031b38 	.word	0x08031b38
 8025628:	08031a38 	.word	0x08031a38
 802562c:	080319dc 	.word	0x080319dc
 8025630:	08031931 	.word	0x08031931
 8025634:	f8db 301c 	ldr.w	r3, [fp, #28]
 8025638:	6018      	str	r0, [r3, #0]
 802563a:	9b07      	ldr	r3, [sp, #28]
 802563c:	2b0e      	cmp	r3, #14
 802563e:	f200 80a4 	bhi.w	802578a <_dtoa_r+0x442>
 8025642:	2c00      	cmp	r4, #0
 8025644:	f000 80a1 	beq.w	802578a <_dtoa_r+0x442>
 8025648:	2f00      	cmp	r7, #0
 802564a:	dd33      	ble.n	80256b4 <_dtoa_r+0x36c>
 802564c:	4bad      	ldr	r3, [pc, #692]	@ (8025904 <_dtoa_r+0x5bc>)
 802564e:	f007 020f 	and.w	r2, r7, #15
 8025652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025656:	ed93 7b00 	vldr	d7, [r3]
 802565a:	05f8      	lsls	r0, r7, #23
 802565c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8025660:	ea4f 1427 	mov.w	r4, r7, asr #4
 8025664:	d516      	bpl.n	8025694 <_dtoa_r+0x34c>
 8025666:	4ba8      	ldr	r3, [pc, #672]	@ (8025908 <_dtoa_r+0x5c0>)
 8025668:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802566c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8025670:	f7e3 f834 	bl	80086dc <__aeabi_ddiv>
 8025674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025678:	f004 040f 	and.w	r4, r4, #15
 802567c:	2603      	movs	r6, #3
 802567e:	4da2      	ldr	r5, [pc, #648]	@ (8025908 <_dtoa_r+0x5c0>)
 8025680:	b954      	cbnz	r4, 8025698 <_dtoa_r+0x350>
 8025682:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8025686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802568a:	f7e3 f827 	bl	80086dc <__aeabi_ddiv>
 802568e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025692:	e028      	b.n	80256e6 <_dtoa_r+0x39e>
 8025694:	2602      	movs	r6, #2
 8025696:	e7f2      	b.n	802567e <_dtoa_r+0x336>
 8025698:	07e1      	lsls	r1, r4, #31
 802569a:	d508      	bpl.n	80256ae <_dtoa_r+0x366>
 802569c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80256a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80256a4:	f7e2 fef0 	bl	8008488 <__aeabi_dmul>
 80256a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80256ac:	3601      	adds	r6, #1
 80256ae:	1064      	asrs	r4, r4, #1
 80256b0:	3508      	adds	r5, #8
 80256b2:	e7e5      	b.n	8025680 <_dtoa_r+0x338>
 80256b4:	f000 80d2 	beq.w	802585c <_dtoa_r+0x514>
 80256b8:	427c      	negs	r4, r7
 80256ba:	4b92      	ldr	r3, [pc, #584]	@ (8025904 <_dtoa_r+0x5bc>)
 80256bc:	4d92      	ldr	r5, [pc, #584]	@ (8025908 <_dtoa_r+0x5c0>)
 80256be:	f004 020f 	and.w	r2, r4, #15
 80256c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80256c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80256ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80256ce:	f7e2 fedb 	bl	8008488 <__aeabi_dmul>
 80256d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80256d6:	1124      	asrs	r4, r4, #4
 80256d8:	2300      	movs	r3, #0
 80256da:	2602      	movs	r6, #2
 80256dc:	2c00      	cmp	r4, #0
 80256de:	f040 80b2 	bne.w	8025846 <_dtoa_r+0x4fe>
 80256e2:	2b00      	cmp	r3, #0
 80256e4:	d1d3      	bne.n	802568e <_dtoa_r+0x346>
 80256e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80256e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80256ec:	2b00      	cmp	r3, #0
 80256ee:	f000 80b7 	beq.w	8025860 <_dtoa_r+0x518>
 80256f2:	4b86      	ldr	r3, [pc, #536]	@ (802590c <_dtoa_r+0x5c4>)
 80256f4:	2200      	movs	r2, #0
 80256f6:	4620      	mov	r0, r4
 80256f8:	4629      	mov	r1, r5
 80256fa:	f7e3 f937 	bl	800896c <__aeabi_dcmplt>
 80256fe:	2800      	cmp	r0, #0
 8025700:	f000 80ae 	beq.w	8025860 <_dtoa_r+0x518>
 8025704:	9b07      	ldr	r3, [sp, #28]
 8025706:	2b00      	cmp	r3, #0
 8025708:	f000 80aa 	beq.w	8025860 <_dtoa_r+0x518>
 802570c:	9b00      	ldr	r3, [sp, #0]
 802570e:	2b00      	cmp	r3, #0
 8025710:	dd37      	ble.n	8025782 <_dtoa_r+0x43a>
 8025712:	1e7b      	subs	r3, r7, #1
 8025714:	9304      	str	r3, [sp, #16]
 8025716:	4620      	mov	r0, r4
 8025718:	4b7d      	ldr	r3, [pc, #500]	@ (8025910 <_dtoa_r+0x5c8>)
 802571a:	2200      	movs	r2, #0
 802571c:	4629      	mov	r1, r5
 802571e:	f7e2 feb3 	bl	8008488 <__aeabi_dmul>
 8025722:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025726:	9c00      	ldr	r4, [sp, #0]
 8025728:	3601      	adds	r6, #1
 802572a:	4630      	mov	r0, r6
 802572c:	f7e2 fe42 	bl	80083b4 <__aeabi_i2d>
 8025730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8025734:	f7e2 fea8 	bl	8008488 <__aeabi_dmul>
 8025738:	4b76      	ldr	r3, [pc, #472]	@ (8025914 <_dtoa_r+0x5cc>)
 802573a:	2200      	movs	r2, #0
 802573c:	f7e2 fcee 	bl	800811c <__adddf3>
 8025740:	4605      	mov	r5, r0
 8025742:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8025746:	2c00      	cmp	r4, #0
 8025748:	f040 808d 	bne.w	8025866 <_dtoa_r+0x51e>
 802574c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025750:	4b71      	ldr	r3, [pc, #452]	@ (8025918 <_dtoa_r+0x5d0>)
 8025752:	2200      	movs	r2, #0
 8025754:	f7e2 fce0 	bl	8008118 <__aeabi_dsub>
 8025758:	4602      	mov	r2, r0
 802575a:	460b      	mov	r3, r1
 802575c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8025760:	462a      	mov	r2, r5
 8025762:	4633      	mov	r3, r6
 8025764:	f7e3 f920 	bl	80089a8 <__aeabi_dcmpgt>
 8025768:	2800      	cmp	r0, #0
 802576a:	f040 828b 	bne.w	8025c84 <_dtoa_r+0x93c>
 802576e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025772:	462a      	mov	r2, r5
 8025774:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8025778:	f7e3 f8f8 	bl	800896c <__aeabi_dcmplt>
 802577c:	2800      	cmp	r0, #0
 802577e:	f040 8128 	bne.w	80259d2 <_dtoa_r+0x68a>
 8025782:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8025786:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802578a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802578c:	2b00      	cmp	r3, #0
 802578e:	f2c0 815a 	blt.w	8025a46 <_dtoa_r+0x6fe>
 8025792:	2f0e      	cmp	r7, #14
 8025794:	f300 8157 	bgt.w	8025a46 <_dtoa_r+0x6fe>
 8025798:	4b5a      	ldr	r3, [pc, #360]	@ (8025904 <_dtoa_r+0x5bc>)
 802579a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802579e:	ed93 7b00 	vldr	d7, [r3]
 80257a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80257a4:	2b00      	cmp	r3, #0
 80257a6:	ed8d 7b00 	vstr	d7, [sp]
 80257aa:	da03      	bge.n	80257b4 <_dtoa_r+0x46c>
 80257ac:	9b07      	ldr	r3, [sp, #28]
 80257ae:	2b00      	cmp	r3, #0
 80257b0:	f340 8101 	ble.w	80259b6 <_dtoa_r+0x66e>
 80257b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80257b8:	4656      	mov	r6, sl
 80257ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80257be:	4620      	mov	r0, r4
 80257c0:	4629      	mov	r1, r5
 80257c2:	f7e2 ff8b 	bl	80086dc <__aeabi_ddiv>
 80257c6:	f7e3 f90f 	bl	80089e8 <__aeabi_d2iz>
 80257ca:	4680      	mov	r8, r0
 80257cc:	f7e2 fdf2 	bl	80083b4 <__aeabi_i2d>
 80257d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80257d4:	f7e2 fe58 	bl	8008488 <__aeabi_dmul>
 80257d8:	4602      	mov	r2, r0
 80257da:	460b      	mov	r3, r1
 80257dc:	4620      	mov	r0, r4
 80257de:	4629      	mov	r1, r5
 80257e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80257e4:	f7e2 fc98 	bl	8008118 <__aeabi_dsub>
 80257e8:	f806 4b01 	strb.w	r4, [r6], #1
 80257ec:	9d07      	ldr	r5, [sp, #28]
 80257ee:	eba6 040a 	sub.w	r4, r6, sl
 80257f2:	42a5      	cmp	r5, r4
 80257f4:	4602      	mov	r2, r0
 80257f6:	460b      	mov	r3, r1
 80257f8:	f040 8117 	bne.w	8025a2a <_dtoa_r+0x6e2>
 80257fc:	f7e2 fc8e 	bl	800811c <__adddf3>
 8025800:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025804:	4604      	mov	r4, r0
 8025806:	460d      	mov	r5, r1
 8025808:	f7e3 f8ce 	bl	80089a8 <__aeabi_dcmpgt>
 802580c:	2800      	cmp	r0, #0
 802580e:	f040 80f9 	bne.w	8025a04 <_dtoa_r+0x6bc>
 8025812:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025816:	4620      	mov	r0, r4
 8025818:	4629      	mov	r1, r5
 802581a:	f7e3 f89d 	bl	8008958 <__aeabi_dcmpeq>
 802581e:	b118      	cbz	r0, 8025828 <_dtoa_r+0x4e0>
 8025820:	f018 0f01 	tst.w	r8, #1
 8025824:	f040 80ee 	bne.w	8025a04 <_dtoa_r+0x6bc>
 8025828:	4649      	mov	r1, r9
 802582a:	4658      	mov	r0, fp
 802582c:	f000 ff5a 	bl	80266e4 <_Bfree>
 8025830:	2300      	movs	r3, #0
 8025832:	7033      	strb	r3, [r6, #0]
 8025834:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025836:	3701      	adds	r7, #1
 8025838:	601f      	str	r7, [r3, #0]
 802583a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802583c:	2b00      	cmp	r3, #0
 802583e:	f000 831d 	beq.w	8025e7c <_dtoa_r+0xb34>
 8025842:	601e      	str	r6, [r3, #0]
 8025844:	e31a      	b.n	8025e7c <_dtoa_r+0xb34>
 8025846:	07e2      	lsls	r2, r4, #31
 8025848:	d505      	bpl.n	8025856 <_dtoa_r+0x50e>
 802584a:	e9d5 2300 	ldrd	r2, r3, [r5]
 802584e:	f7e2 fe1b 	bl	8008488 <__aeabi_dmul>
 8025852:	3601      	adds	r6, #1
 8025854:	2301      	movs	r3, #1
 8025856:	1064      	asrs	r4, r4, #1
 8025858:	3508      	adds	r5, #8
 802585a:	e73f      	b.n	80256dc <_dtoa_r+0x394>
 802585c:	2602      	movs	r6, #2
 802585e:	e742      	b.n	80256e6 <_dtoa_r+0x39e>
 8025860:	9c07      	ldr	r4, [sp, #28]
 8025862:	9704      	str	r7, [sp, #16]
 8025864:	e761      	b.n	802572a <_dtoa_r+0x3e2>
 8025866:	4b27      	ldr	r3, [pc, #156]	@ (8025904 <_dtoa_r+0x5bc>)
 8025868:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802586a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802586e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8025872:	4454      	add	r4, sl
 8025874:	2900      	cmp	r1, #0
 8025876:	d053      	beq.n	8025920 <_dtoa_r+0x5d8>
 8025878:	4928      	ldr	r1, [pc, #160]	@ (802591c <_dtoa_r+0x5d4>)
 802587a:	2000      	movs	r0, #0
 802587c:	f7e2 ff2e 	bl	80086dc <__aeabi_ddiv>
 8025880:	4633      	mov	r3, r6
 8025882:	462a      	mov	r2, r5
 8025884:	f7e2 fc48 	bl	8008118 <__aeabi_dsub>
 8025888:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802588c:	4656      	mov	r6, sl
 802588e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025892:	f7e3 f8a9 	bl	80089e8 <__aeabi_d2iz>
 8025896:	4605      	mov	r5, r0
 8025898:	f7e2 fd8c 	bl	80083b4 <__aeabi_i2d>
 802589c:	4602      	mov	r2, r0
 802589e:	460b      	mov	r3, r1
 80258a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80258a4:	f7e2 fc38 	bl	8008118 <__aeabi_dsub>
 80258a8:	3530      	adds	r5, #48	@ 0x30
 80258aa:	4602      	mov	r2, r0
 80258ac:	460b      	mov	r3, r1
 80258ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80258b2:	f806 5b01 	strb.w	r5, [r6], #1
 80258b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80258ba:	f7e3 f857 	bl	800896c <__aeabi_dcmplt>
 80258be:	2800      	cmp	r0, #0
 80258c0:	d171      	bne.n	80259a6 <_dtoa_r+0x65e>
 80258c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80258c6:	4911      	ldr	r1, [pc, #68]	@ (802590c <_dtoa_r+0x5c4>)
 80258c8:	2000      	movs	r0, #0
 80258ca:	f7e2 fc25 	bl	8008118 <__aeabi_dsub>
 80258ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80258d2:	f7e3 f84b 	bl	800896c <__aeabi_dcmplt>
 80258d6:	2800      	cmp	r0, #0
 80258d8:	f040 8095 	bne.w	8025a06 <_dtoa_r+0x6be>
 80258dc:	42a6      	cmp	r6, r4
 80258de:	f43f af50 	beq.w	8025782 <_dtoa_r+0x43a>
 80258e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80258e6:	4b0a      	ldr	r3, [pc, #40]	@ (8025910 <_dtoa_r+0x5c8>)
 80258e8:	2200      	movs	r2, #0
 80258ea:	f7e2 fdcd 	bl	8008488 <__aeabi_dmul>
 80258ee:	4b08      	ldr	r3, [pc, #32]	@ (8025910 <_dtoa_r+0x5c8>)
 80258f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80258f4:	2200      	movs	r2, #0
 80258f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80258fa:	f7e2 fdc5 	bl	8008488 <__aeabi_dmul>
 80258fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025902:	e7c4      	b.n	802588e <_dtoa_r+0x546>
 8025904:	08031b38 	.word	0x08031b38
 8025908:	08031b10 	.word	0x08031b10
 802590c:	3ff00000 	.word	0x3ff00000
 8025910:	40240000 	.word	0x40240000
 8025914:	401c0000 	.word	0x401c0000
 8025918:	40140000 	.word	0x40140000
 802591c:	3fe00000 	.word	0x3fe00000
 8025920:	4631      	mov	r1, r6
 8025922:	4628      	mov	r0, r5
 8025924:	f7e2 fdb0 	bl	8008488 <__aeabi_dmul>
 8025928:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802592c:	9415      	str	r4, [sp, #84]	@ 0x54
 802592e:	4656      	mov	r6, sl
 8025930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025934:	f7e3 f858 	bl	80089e8 <__aeabi_d2iz>
 8025938:	4605      	mov	r5, r0
 802593a:	f7e2 fd3b 	bl	80083b4 <__aeabi_i2d>
 802593e:	4602      	mov	r2, r0
 8025940:	460b      	mov	r3, r1
 8025942:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025946:	f7e2 fbe7 	bl	8008118 <__aeabi_dsub>
 802594a:	3530      	adds	r5, #48	@ 0x30
 802594c:	f806 5b01 	strb.w	r5, [r6], #1
 8025950:	4602      	mov	r2, r0
 8025952:	460b      	mov	r3, r1
 8025954:	42a6      	cmp	r6, r4
 8025956:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802595a:	f04f 0200 	mov.w	r2, #0
 802595e:	d124      	bne.n	80259aa <_dtoa_r+0x662>
 8025960:	4bac      	ldr	r3, [pc, #688]	@ (8025c14 <_dtoa_r+0x8cc>)
 8025962:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8025966:	f7e2 fbd9 	bl	800811c <__adddf3>
 802596a:	4602      	mov	r2, r0
 802596c:	460b      	mov	r3, r1
 802596e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025972:	f7e3 f819 	bl	80089a8 <__aeabi_dcmpgt>
 8025976:	2800      	cmp	r0, #0
 8025978:	d145      	bne.n	8025a06 <_dtoa_r+0x6be>
 802597a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802597e:	49a5      	ldr	r1, [pc, #660]	@ (8025c14 <_dtoa_r+0x8cc>)
 8025980:	2000      	movs	r0, #0
 8025982:	f7e2 fbc9 	bl	8008118 <__aeabi_dsub>
 8025986:	4602      	mov	r2, r0
 8025988:	460b      	mov	r3, r1
 802598a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802598e:	f7e2 ffed 	bl	800896c <__aeabi_dcmplt>
 8025992:	2800      	cmp	r0, #0
 8025994:	f43f aef5 	beq.w	8025782 <_dtoa_r+0x43a>
 8025998:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 802599a:	1e73      	subs	r3, r6, #1
 802599c:	9315      	str	r3, [sp, #84]	@ 0x54
 802599e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80259a2:	2b30      	cmp	r3, #48	@ 0x30
 80259a4:	d0f8      	beq.n	8025998 <_dtoa_r+0x650>
 80259a6:	9f04      	ldr	r7, [sp, #16]
 80259a8:	e73e      	b.n	8025828 <_dtoa_r+0x4e0>
 80259aa:	4b9b      	ldr	r3, [pc, #620]	@ (8025c18 <_dtoa_r+0x8d0>)
 80259ac:	f7e2 fd6c 	bl	8008488 <__aeabi_dmul>
 80259b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80259b4:	e7bc      	b.n	8025930 <_dtoa_r+0x5e8>
 80259b6:	d10c      	bne.n	80259d2 <_dtoa_r+0x68a>
 80259b8:	4b98      	ldr	r3, [pc, #608]	@ (8025c1c <_dtoa_r+0x8d4>)
 80259ba:	2200      	movs	r2, #0
 80259bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80259c0:	f7e2 fd62 	bl	8008488 <__aeabi_dmul>
 80259c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80259c8:	f7e2 ffe4 	bl	8008994 <__aeabi_dcmpge>
 80259cc:	2800      	cmp	r0, #0
 80259ce:	f000 8157 	beq.w	8025c80 <_dtoa_r+0x938>
 80259d2:	2400      	movs	r4, #0
 80259d4:	4625      	mov	r5, r4
 80259d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80259d8:	43db      	mvns	r3, r3
 80259da:	9304      	str	r3, [sp, #16]
 80259dc:	4656      	mov	r6, sl
 80259de:	2700      	movs	r7, #0
 80259e0:	4621      	mov	r1, r4
 80259e2:	4658      	mov	r0, fp
 80259e4:	f000 fe7e 	bl	80266e4 <_Bfree>
 80259e8:	2d00      	cmp	r5, #0
 80259ea:	d0dc      	beq.n	80259a6 <_dtoa_r+0x65e>
 80259ec:	b12f      	cbz	r7, 80259fa <_dtoa_r+0x6b2>
 80259ee:	42af      	cmp	r7, r5
 80259f0:	d003      	beq.n	80259fa <_dtoa_r+0x6b2>
 80259f2:	4639      	mov	r1, r7
 80259f4:	4658      	mov	r0, fp
 80259f6:	f000 fe75 	bl	80266e4 <_Bfree>
 80259fa:	4629      	mov	r1, r5
 80259fc:	4658      	mov	r0, fp
 80259fe:	f000 fe71 	bl	80266e4 <_Bfree>
 8025a02:	e7d0      	b.n	80259a6 <_dtoa_r+0x65e>
 8025a04:	9704      	str	r7, [sp, #16]
 8025a06:	4633      	mov	r3, r6
 8025a08:	461e      	mov	r6, r3
 8025a0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025a0e:	2a39      	cmp	r2, #57	@ 0x39
 8025a10:	d107      	bne.n	8025a22 <_dtoa_r+0x6da>
 8025a12:	459a      	cmp	sl, r3
 8025a14:	d1f8      	bne.n	8025a08 <_dtoa_r+0x6c0>
 8025a16:	9a04      	ldr	r2, [sp, #16]
 8025a18:	3201      	adds	r2, #1
 8025a1a:	9204      	str	r2, [sp, #16]
 8025a1c:	2230      	movs	r2, #48	@ 0x30
 8025a1e:	f88a 2000 	strb.w	r2, [sl]
 8025a22:	781a      	ldrb	r2, [r3, #0]
 8025a24:	3201      	adds	r2, #1
 8025a26:	701a      	strb	r2, [r3, #0]
 8025a28:	e7bd      	b.n	80259a6 <_dtoa_r+0x65e>
 8025a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8025c18 <_dtoa_r+0x8d0>)
 8025a2c:	2200      	movs	r2, #0
 8025a2e:	f7e2 fd2b 	bl	8008488 <__aeabi_dmul>
 8025a32:	2200      	movs	r2, #0
 8025a34:	2300      	movs	r3, #0
 8025a36:	4604      	mov	r4, r0
 8025a38:	460d      	mov	r5, r1
 8025a3a:	f7e2 ff8d 	bl	8008958 <__aeabi_dcmpeq>
 8025a3e:	2800      	cmp	r0, #0
 8025a40:	f43f aebb 	beq.w	80257ba <_dtoa_r+0x472>
 8025a44:	e6f0      	b.n	8025828 <_dtoa_r+0x4e0>
 8025a46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025a48:	2a00      	cmp	r2, #0
 8025a4a:	f000 80db 	beq.w	8025c04 <_dtoa_r+0x8bc>
 8025a4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025a50:	2a01      	cmp	r2, #1
 8025a52:	f300 80bf 	bgt.w	8025bd4 <_dtoa_r+0x88c>
 8025a56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025a58:	2a00      	cmp	r2, #0
 8025a5a:	f000 80b7 	beq.w	8025bcc <_dtoa_r+0x884>
 8025a5e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8025a62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025a64:	4646      	mov	r6, r8
 8025a66:	9a08      	ldr	r2, [sp, #32]
 8025a68:	2101      	movs	r1, #1
 8025a6a:	441a      	add	r2, r3
 8025a6c:	4658      	mov	r0, fp
 8025a6e:	4498      	add	r8, r3
 8025a70:	9208      	str	r2, [sp, #32]
 8025a72:	f000 ff35 	bl	80268e0 <__i2b>
 8025a76:	4605      	mov	r5, r0
 8025a78:	b15e      	cbz	r6, 8025a92 <_dtoa_r+0x74a>
 8025a7a:	9b08      	ldr	r3, [sp, #32]
 8025a7c:	2b00      	cmp	r3, #0
 8025a7e:	dd08      	ble.n	8025a92 <_dtoa_r+0x74a>
 8025a80:	42b3      	cmp	r3, r6
 8025a82:	9a08      	ldr	r2, [sp, #32]
 8025a84:	bfa8      	it	ge
 8025a86:	4633      	movge	r3, r6
 8025a88:	eba8 0803 	sub.w	r8, r8, r3
 8025a8c:	1af6      	subs	r6, r6, r3
 8025a8e:	1ad3      	subs	r3, r2, r3
 8025a90:	9308      	str	r3, [sp, #32]
 8025a92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025a94:	b1f3      	cbz	r3, 8025ad4 <_dtoa_r+0x78c>
 8025a96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025a98:	2b00      	cmp	r3, #0
 8025a9a:	f000 80b7 	beq.w	8025c0c <_dtoa_r+0x8c4>
 8025a9e:	b18c      	cbz	r4, 8025ac4 <_dtoa_r+0x77c>
 8025aa0:	4629      	mov	r1, r5
 8025aa2:	4622      	mov	r2, r4
 8025aa4:	4658      	mov	r0, fp
 8025aa6:	f000 ffdb 	bl	8026a60 <__pow5mult>
 8025aaa:	464a      	mov	r2, r9
 8025aac:	4601      	mov	r1, r0
 8025aae:	4605      	mov	r5, r0
 8025ab0:	4658      	mov	r0, fp
 8025ab2:	f000 ff2b 	bl	802690c <__multiply>
 8025ab6:	4649      	mov	r1, r9
 8025ab8:	9004      	str	r0, [sp, #16]
 8025aba:	4658      	mov	r0, fp
 8025abc:	f000 fe12 	bl	80266e4 <_Bfree>
 8025ac0:	9b04      	ldr	r3, [sp, #16]
 8025ac2:	4699      	mov	r9, r3
 8025ac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025ac6:	1b1a      	subs	r2, r3, r4
 8025ac8:	d004      	beq.n	8025ad4 <_dtoa_r+0x78c>
 8025aca:	4649      	mov	r1, r9
 8025acc:	4658      	mov	r0, fp
 8025ace:	f000 ffc7 	bl	8026a60 <__pow5mult>
 8025ad2:	4681      	mov	r9, r0
 8025ad4:	2101      	movs	r1, #1
 8025ad6:	4658      	mov	r0, fp
 8025ad8:	f000 ff02 	bl	80268e0 <__i2b>
 8025adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025ade:	4604      	mov	r4, r0
 8025ae0:	2b00      	cmp	r3, #0
 8025ae2:	f000 81cf 	beq.w	8025e84 <_dtoa_r+0xb3c>
 8025ae6:	461a      	mov	r2, r3
 8025ae8:	4601      	mov	r1, r0
 8025aea:	4658      	mov	r0, fp
 8025aec:	f000 ffb8 	bl	8026a60 <__pow5mult>
 8025af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025af2:	2b01      	cmp	r3, #1
 8025af4:	4604      	mov	r4, r0
 8025af6:	f300 8095 	bgt.w	8025c24 <_dtoa_r+0x8dc>
 8025afa:	9b02      	ldr	r3, [sp, #8]
 8025afc:	2b00      	cmp	r3, #0
 8025afe:	f040 8087 	bne.w	8025c10 <_dtoa_r+0x8c8>
 8025b02:	9b03      	ldr	r3, [sp, #12]
 8025b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025b08:	2b00      	cmp	r3, #0
 8025b0a:	f040 8089 	bne.w	8025c20 <_dtoa_r+0x8d8>
 8025b0e:	9b03      	ldr	r3, [sp, #12]
 8025b10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8025b14:	0d1b      	lsrs	r3, r3, #20
 8025b16:	051b      	lsls	r3, r3, #20
 8025b18:	b12b      	cbz	r3, 8025b26 <_dtoa_r+0x7de>
 8025b1a:	9b08      	ldr	r3, [sp, #32]
 8025b1c:	3301      	adds	r3, #1
 8025b1e:	9308      	str	r3, [sp, #32]
 8025b20:	f108 0801 	add.w	r8, r8, #1
 8025b24:	2301      	movs	r3, #1
 8025b26:	930a      	str	r3, [sp, #40]	@ 0x28
 8025b28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025b2a:	2b00      	cmp	r3, #0
 8025b2c:	f000 81b0 	beq.w	8025e90 <_dtoa_r+0xb48>
 8025b30:	6923      	ldr	r3, [r4, #16]
 8025b32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8025b36:	6918      	ldr	r0, [r3, #16]
 8025b38:	f000 fe86 	bl	8026848 <__hi0bits>
 8025b3c:	f1c0 0020 	rsb	r0, r0, #32
 8025b40:	9b08      	ldr	r3, [sp, #32]
 8025b42:	4418      	add	r0, r3
 8025b44:	f010 001f 	ands.w	r0, r0, #31
 8025b48:	d077      	beq.n	8025c3a <_dtoa_r+0x8f2>
 8025b4a:	f1c0 0320 	rsb	r3, r0, #32
 8025b4e:	2b04      	cmp	r3, #4
 8025b50:	dd6b      	ble.n	8025c2a <_dtoa_r+0x8e2>
 8025b52:	9b08      	ldr	r3, [sp, #32]
 8025b54:	f1c0 001c 	rsb	r0, r0, #28
 8025b58:	4403      	add	r3, r0
 8025b5a:	4480      	add	r8, r0
 8025b5c:	4406      	add	r6, r0
 8025b5e:	9308      	str	r3, [sp, #32]
 8025b60:	f1b8 0f00 	cmp.w	r8, #0
 8025b64:	dd05      	ble.n	8025b72 <_dtoa_r+0x82a>
 8025b66:	4649      	mov	r1, r9
 8025b68:	4642      	mov	r2, r8
 8025b6a:	4658      	mov	r0, fp
 8025b6c:	f000 ffd2 	bl	8026b14 <__lshift>
 8025b70:	4681      	mov	r9, r0
 8025b72:	9b08      	ldr	r3, [sp, #32]
 8025b74:	2b00      	cmp	r3, #0
 8025b76:	dd05      	ble.n	8025b84 <_dtoa_r+0x83c>
 8025b78:	4621      	mov	r1, r4
 8025b7a:	461a      	mov	r2, r3
 8025b7c:	4658      	mov	r0, fp
 8025b7e:	f000 ffc9 	bl	8026b14 <__lshift>
 8025b82:	4604      	mov	r4, r0
 8025b84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8025b86:	2b00      	cmp	r3, #0
 8025b88:	d059      	beq.n	8025c3e <_dtoa_r+0x8f6>
 8025b8a:	4621      	mov	r1, r4
 8025b8c:	4648      	mov	r0, r9
 8025b8e:	f001 f82d 	bl	8026bec <__mcmp>
 8025b92:	2800      	cmp	r0, #0
 8025b94:	da53      	bge.n	8025c3e <_dtoa_r+0x8f6>
 8025b96:	1e7b      	subs	r3, r7, #1
 8025b98:	9304      	str	r3, [sp, #16]
 8025b9a:	4649      	mov	r1, r9
 8025b9c:	2300      	movs	r3, #0
 8025b9e:	220a      	movs	r2, #10
 8025ba0:	4658      	mov	r0, fp
 8025ba2:	f000 fdc1 	bl	8026728 <__multadd>
 8025ba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025ba8:	4681      	mov	r9, r0
 8025baa:	2b00      	cmp	r3, #0
 8025bac:	f000 8172 	beq.w	8025e94 <_dtoa_r+0xb4c>
 8025bb0:	2300      	movs	r3, #0
 8025bb2:	4629      	mov	r1, r5
 8025bb4:	220a      	movs	r2, #10
 8025bb6:	4658      	mov	r0, fp
 8025bb8:	f000 fdb6 	bl	8026728 <__multadd>
 8025bbc:	9b00      	ldr	r3, [sp, #0]
 8025bbe:	2b00      	cmp	r3, #0
 8025bc0:	4605      	mov	r5, r0
 8025bc2:	dc67      	bgt.n	8025c94 <_dtoa_r+0x94c>
 8025bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025bc6:	2b02      	cmp	r3, #2
 8025bc8:	dc41      	bgt.n	8025c4e <_dtoa_r+0x906>
 8025bca:	e063      	b.n	8025c94 <_dtoa_r+0x94c>
 8025bcc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025bce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8025bd2:	e746      	b.n	8025a62 <_dtoa_r+0x71a>
 8025bd4:	9b07      	ldr	r3, [sp, #28]
 8025bd6:	1e5c      	subs	r4, r3, #1
 8025bd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025bda:	42a3      	cmp	r3, r4
 8025bdc:	bfbf      	itttt	lt
 8025bde:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8025be0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8025be2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8025be4:	1ae3      	sublt	r3, r4, r3
 8025be6:	bfb4      	ite	lt
 8025be8:	18d2      	addlt	r2, r2, r3
 8025bea:	1b1c      	subge	r4, r3, r4
 8025bec:	9b07      	ldr	r3, [sp, #28]
 8025bee:	bfbc      	itt	lt
 8025bf0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8025bf2:	2400      	movlt	r4, #0
 8025bf4:	2b00      	cmp	r3, #0
 8025bf6:	bfb5      	itete	lt
 8025bf8:	eba8 0603 	sublt.w	r6, r8, r3
 8025bfc:	9b07      	ldrge	r3, [sp, #28]
 8025bfe:	2300      	movlt	r3, #0
 8025c00:	4646      	movge	r6, r8
 8025c02:	e730      	b.n	8025a66 <_dtoa_r+0x71e>
 8025c04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025c06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8025c08:	4646      	mov	r6, r8
 8025c0a:	e735      	b.n	8025a78 <_dtoa_r+0x730>
 8025c0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025c0e:	e75c      	b.n	8025aca <_dtoa_r+0x782>
 8025c10:	2300      	movs	r3, #0
 8025c12:	e788      	b.n	8025b26 <_dtoa_r+0x7de>
 8025c14:	3fe00000 	.word	0x3fe00000
 8025c18:	40240000 	.word	0x40240000
 8025c1c:	40140000 	.word	0x40140000
 8025c20:	9b02      	ldr	r3, [sp, #8]
 8025c22:	e780      	b.n	8025b26 <_dtoa_r+0x7de>
 8025c24:	2300      	movs	r3, #0
 8025c26:	930a      	str	r3, [sp, #40]	@ 0x28
 8025c28:	e782      	b.n	8025b30 <_dtoa_r+0x7e8>
 8025c2a:	d099      	beq.n	8025b60 <_dtoa_r+0x818>
 8025c2c:	9a08      	ldr	r2, [sp, #32]
 8025c2e:	331c      	adds	r3, #28
 8025c30:	441a      	add	r2, r3
 8025c32:	4498      	add	r8, r3
 8025c34:	441e      	add	r6, r3
 8025c36:	9208      	str	r2, [sp, #32]
 8025c38:	e792      	b.n	8025b60 <_dtoa_r+0x818>
 8025c3a:	4603      	mov	r3, r0
 8025c3c:	e7f6      	b.n	8025c2c <_dtoa_r+0x8e4>
 8025c3e:	9b07      	ldr	r3, [sp, #28]
 8025c40:	9704      	str	r7, [sp, #16]
 8025c42:	2b00      	cmp	r3, #0
 8025c44:	dc20      	bgt.n	8025c88 <_dtoa_r+0x940>
 8025c46:	9300      	str	r3, [sp, #0]
 8025c48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025c4a:	2b02      	cmp	r3, #2
 8025c4c:	dd1e      	ble.n	8025c8c <_dtoa_r+0x944>
 8025c4e:	9b00      	ldr	r3, [sp, #0]
 8025c50:	2b00      	cmp	r3, #0
 8025c52:	f47f aec0 	bne.w	80259d6 <_dtoa_r+0x68e>
 8025c56:	4621      	mov	r1, r4
 8025c58:	2205      	movs	r2, #5
 8025c5a:	4658      	mov	r0, fp
 8025c5c:	f000 fd64 	bl	8026728 <__multadd>
 8025c60:	4601      	mov	r1, r0
 8025c62:	4604      	mov	r4, r0
 8025c64:	4648      	mov	r0, r9
 8025c66:	f000 ffc1 	bl	8026bec <__mcmp>
 8025c6a:	2800      	cmp	r0, #0
 8025c6c:	f77f aeb3 	ble.w	80259d6 <_dtoa_r+0x68e>
 8025c70:	4656      	mov	r6, sl
 8025c72:	2331      	movs	r3, #49	@ 0x31
 8025c74:	f806 3b01 	strb.w	r3, [r6], #1
 8025c78:	9b04      	ldr	r3, [sp, #16]
 8025c7a:	3301      	adds	r3, #1
 8025c7c:	9304      	str	r3, [sp, #16]
 8025c7e:	e6ae      	b.n	80259de <_dtoa_r+0x696>
 8025c80:	9c07      	ldr	r4, [sp, #28]
 8025c82:	9704      	str	r7, [sp, #16]
 8025c84:	4625      	mov	r5, r4
 8025c86:	e7f3      	b.n	8025c70 <_dtoa_r+0x928>
 8025c88:	9b07      	ldr	r3, [sp, #28]
 8025c8a:	9300      	str	r3, [sp, #0]
 8025c8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025c8e:	2b00      	cmp	r3, #0
 8025c90:	f000 8104 	beq.w	8025e9c <_dtoa_r+0xb54>
 8025c94:	2e00      	cmp	r6, #0
 8025c96:	dd05      	ble.n	8025ca4 <_dtoa_r+0x95c>
 8025c98:	4629      	mov	r1, r5
 8025c9a:	4632      	mov	r2, r6
 8025c9c:	4658      	mov	r0, fp
 8025c9e:	f000 ff39 	bl	8026b14 <__lshift>
 8025ca2:	4605      	mov	r5, r0
 8025ca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025ca6:	2b00      	cmp	r3, #0
 8025ca8:	d05a      	beq.n	8025d60 <_dtoa_r+0xa18>
 8025caa:	6869      	ldr	r1, [r5, #4]
 8025cac:	4658      	mov	r0, fp
 8025cae:	f000 fcd9 	bl	8026664 <_Balloc>
 8025cb2:	4606      	mov	r6, r0
 8025cb4:	b928      	cbnz	r0, 8025cc2 <_dtoa_r+0x97a>
 8025cb6:	4b84      	ldr	r3, [pc, #528]	@ (8025ec8 <_dtoa_r+0xb80>)
 8025cb8:	4602      	mov	r2, r0
 8025cba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8025cbe:	f7ff bb5a 	b.w	8025376 <_dtoa_r+0x2e>
 8025cc2:	692a      	ldr	r2, [r5, #16]
 8025cc4:	3202      	adds	r2, #2
 8025cc6:	0092      	lsls	r2, r2, #2
 8025cc8:	f105 010c 	add.w	r1, r5, #12
 8025ccc:	300c      	adds	r0, #12
 8025cce:	f7ff fa8a 	bl	80251e6 <memcpy>
 8025cd2:	2201      	movs	r2, #1
 8025cd4:	4631      	mov	r1, r6
 8025cd6:	4658      	mov	r0, fp
 8025cd8:	f000 ff1c 	bl	8026b14 <__lshift>
 8025cdc:	f10a 0301 	add.w	r3, sl, #1
 8025ce0:	9307      	str	r3, [sp, #28]
 8025ce2:	9b00      	ldr	r3, [sp, #0]
 8025ce4:	4453      	add	r3, sl
 8025ce6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025ce8:	9b02      	ldr	r3, [sp, #8]
 8025cea:	f003 0301 	and.w	r3, r3, #1
 8025cee:	462f      	mov	r7, r5
 8025cf0:	930a      	str	r3, [sp, #40]	@ 0x28
 8025cf2:	4605      	mov	r5, r0
 8025cf4:	9b07      	ldr	r3, [sp, #28]
 8025cf6:	4621      	mov	r1, r4
 8025cf8:	3b01      	subs	r3, #1
 8025cfa:	4648      	mov	r0, r9
 8025cfc:	9300      	str	r3, [sp, #0]
 8025cfe:	f7ff fa98 	bl	8025232 <quorem>
 8025d02:	4639      	mov	r1, r7
 8025d04:	9002      	str	r0, [sp, #8]
 8025d06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8025d0a:	4648      	mov	r0, r9
 8025d0c:	f000 ff6e 	bl	8026bec <__mcmp>
 8025d10:	462a      	mov	r2, r5
 8025d12:	9008      	str	r0, [sp, #32]
 8025d14:	4621      	mov	r1, r4
 8025d16:	4658      	mov	r0, fp
 8025d18:	f000 ff84 	bl	8026c24 <__mdiff>
 8025d1c:	68c2      	ldr	r2, [r0, #12]
 8025d1e:	4606      	mov	r6, r0
 8025d20:	bb02      	cbnz	r2, 8025d64 <_dtoa_r+0xa1c>
 8025d22:	4601      	mov	r1, r0
 8025d24:	4648      	mov	r0, r9
 8025d26:	f000 ff61 	bl	8026bec <__mcmp>
 8025d2a:	4602      	mov	r2, r0
 8025d2c:	4631      	mov	r1, r6
 8025d2e:	4658      	mov	r0, fp
 8025d30:	920e      	str	r2, [sp, #56]	@ 0x38
 8025d32:	f000 fcd7 	bl	80266e4 <_Bfree>
 8025d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025d38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025d3a:	9e07      	ldr	r6, [sp, #28]
 8025d3c:	ea43 0102 	orr.w	r1, r3, r2
 8025d40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025d42:	4319      	orrs	r1, r3
 8025d44:	d110      	bne.n	8025d68 <_dtoa_r+0xa20>
 8025d46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8025d4a:	d029      	beq.n	8025da0 <_dtoa_r+0xa58>
 8025d4c:	9b08      	ldr	r3, [sp, #32]
 8025d4e:	2b00      	cmp	r3, #0
 8025d50:	dd02      	ble.n	8025d58 <_dtoa_r+0xa10>
 8025d52:	9b02      	ldr	r3, [sp, #8]
 8025d54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8025d58:	9b00      	ldr	r3, [sp, #0]
 8025d5a:	f883 8000 	strb.w	r8, [r3]
 8025d5e:	e63f      	b.n	80259e0 <_dtoa_r+0x698>
 8025d60:	4628      	mov	r0, r5
 8025d62:	e7bb      	b.n	8025cdc <_dtoa_r+0x994>
 8025d64:	2201      	movs	r2, #1
 8025d66:	e7e1      	b.n	8025d2c <_dtoa_r+0x9e4>
 8025d68:	9b08      	ldr	r3, [sp, #32]
 8025d6a:	2b00      	cmp	r3, #0
 8025d6c:	db04      	blt.n	8025d78 <_dtoa_r+0xa30>
 8025d6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025d70:	430b      	orrs	r3, r1
 8025d72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025d74:	430b      	orrs	r3, r1
 8025d76:	d120      	bne.n	8025dba <_dtoa_r+0xa72>
 8025d78:	2a00      	cmp	r2, #0
 8025d7a:	dded      	ble.n	8025d58 <_dtoa_r+0xa10>
 8025d7c:	4649      	mov	r1, r9
 8025d7e:	2201      	movs	r2, #1
 8025d80:	4658      	mov	r0, fp
 8025d82:	f000 fec7 	bl	8026b14 <__lshift>
 8025d86:	4621      	mov	r1, r4
 8025d88:	4681      	mov	r9, r0
 8025d8a:	f000 ff2f 	bl	8026bec <__mcmp>
 8025d8e:	2800      	cmp	r0, #0
 8025d90:	dc03      	bgt.n	8025d9a <_dtoa_r+0xa52>
 8025d92:	d1e1      	bne.n	8025d58 <_dtoa_r+0xa10>
 8025d94:	f018 0f01 	tst.w	r8, #1
 8025d98:	d0de      	beq.n	8025d58 <_dtoa_r+0xa10>
 8025d9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8025d9e:	d1d8      	bne.n	8025d52 <_dtoa_r+0xa0a>
 8025da0:	9a00      	ldr	r2, [sp, #0]
 8025da2:	2339      	movs	r3, #57	@ 0x39
 8025da4:	7013      	strb	r3, [r2, #0]
 8025da6:	4633      	mov	r3, r6
 8025da8:	461e      	mov	r6, r3
 8025daa:	3b01      	subs	r3, #1
 8025dac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8025db0:	2a39      	cmp	r2, #57	@ 0x39
 8025db2:	d052      	beq.n	8025e5a <_dtoa_r+0xb12>
 8025db4:	3201      	adds	r2, #1
 8025db6:	701a      	strb	r2, [r3, #0]
 8025db8:	e612      	b.n	80259e0 <_dtoa_r+0x698>
 8025dba:	2a00      	cmp	r2, #0
 8025dbc:	dd07      	ble.n	8025dce <_dtoa_r+0xa86>
 8025dbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8025dc2:	d0ed      	beq.n	8025da0 <_dtoa_r+0xa58>
 8025dc4:	9a00      	ldr	r2, [sp, #0]
 8025dc6:	f108 0301 	add.w	r3, r8, #1
 8025dca:	7013      	strb	r3, [r2, #0]
 8025dcc:	e608      	b.n	80259e0 <_dtoa_r+0x698>
 8025dce:	9b07      	ldr	r3, [sp, #28]
 8025dd0:	9a07      	ldr	r2, [sp, #28]
 8025dd2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8025dd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025dd8:	4293      	cmp	r3, r2
 8025dda:	d028      	beq.n	8025e2e <_dtoa_r+0xae6>
 8025ddc:	4649      	mov	r1, r9
 8025dde:	2300      	movs	r3, #0
 8025de0:	220a      	movs	r2, #10
 8025de2:	4658      	mov	r0, fp
 8025de4:	f000 fca0 	bl	8026728 <__multadd>
 8025de8:	42af      	cmp	r7, r5
 8025dea:	4681      	mov	r9, r0
 8025dec:	f04f 0300 	mov.w	r3, #0
 8025df0:	f04f 020a 	mov.w	r2, #10
 8025df4:	4639      	mov	r1, r7
 8025df6:	4658      	mov	r0, fp
 8025df8:	d107      	bne.n	8025e0a <_dtoa_r+0xac2>
 8025dfa:	f000 fc95 	bl	8026728 <__multadd>
 8025dfe:	4607      	mov	r7, r0
 8025e00:	4605      	mov	r5, r0
 8025e02:	9b07      	ldr	r3, [sp, #28]
 8025e04:	3301      	adds	r3, #1
 8025e06:	9307      	str	r3, [sp, #28]
 8025e08:	e774      	b.n	8025cf4 <_dtoa_r+0x9ac>
 8025e0a:	f000 fc8d 	bl	8026728 <__multadd>
 8025e0e:	4629      	mov	r1, r5
 8025e10:	4607      	mov	r7, r0
 8025e12:	2300      	movs	r3, #0
 8025e14:	220a      	movs	r2, #10
 8025e16:	4658      	mov	r0, fp
 8025e18:	f000 fc86 	bl	8026728 <__multadd>
 8025e1c:	4605      	mov	r5, r0
 8025e1e:	e7f0      	b.n	8025e02 <_dtoa_r+0xaba>
 8025e20:	9b00      	ldr	r3, [sp, #0]
 8025e22:	2b00      	cmp	r3, #0
 8025e24:	bfcc      	ite	gt
 8025e26:	461e      	movgt	r6, r3
 8025e28:	2601      	movle	r6, #1
 8025e2a:	4456      	add	r6, sl
 8025e2c:	2700      	movs	r7, #0
 8025e2e:	4649      	mov	r1, r9
 8025e30:	2201      	movs	r2, #1
 8025e32:	4658      	mov	r0, fp
 8025e34:	f000 fe6e 	bl	8026b14 <__lshift>
 8025e38:	4621      	mov	r1, r4
 8025e3a:	4681      	mov	r9, r0
 8025e3c:	f000 fed6 	bl	8026bec <__mcmp>
 8025e40:	2800      	cmp	r0, #0
 8025e42:	dcb0      	bgt.n	8025da6 <_dtoa_r+0xa5e>
 8025e44:	d102      	bne.n	8025e4c <_dtoa_r+0xb04>
 8025e46:	f018 0f01 	tst.w	r8, #1
 8025e4a:	d1ac      	bne.n	8025da6 <_dtoa_r+0xa5e>
 8025e4c:	4633      	mov	r3, r6
 8025e4e:	461e      	mov	r6, r3
 8025e50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025e54:	2a30      	cmp	r2, #48	@ 0x30
 8025e56:	d0fa      	beq.n	8025e4e <_dtoa_r+0xb06>
 8025e58:	e5c2      	b.n	80259e0 <_dtoa_r+0x698>
 8025e5a:	459a      	cmp	sl, r3
 8025e5c:	d1a4      	bne.n	8025da8 <_dtoa_r+0xa60>
 8025e5e:	9b04      	ldr	r3, [sp, #16]
 8025e60:	3301      	adds	r3, #1
 8025e62:	9304      	str	r3, [sp, #16]
 8025e64:	2331      	movs	r3, #49	@ 0x31
 8025e66:	f88a 3000 	strb.w	r3, [sl]
 8025e6a:	e5b9      	b.n	80259e0 <_dtoa_r+0x698>
 8025e6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025e6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8025ecc <_dtoa_r+0xb84>
 8025e72:	b11b      	cbz	r3, 8025e7c <_dtoa_r+0xb34>
 8025e74:	f10a 0308 	add.w	r3, sl, #8
 8025e78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8025e7a:	6013      	str	r3, [r2, #0]
 8025e7c:	4650      	mov	r0, sl
 8025e7e:	b019      	add	sp, #100	@ 0x64
 8025e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025e86:	2b01      	cmp	r3, #1
 8025e88:	f77f ae37 	ble.w	8025afa <_dtoa_r+0x7b2>
 8025e8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025e8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025e90:	2001      	movs	r0, #1
 8025e92:	e655      	b.n	8025b40 <_dtoa_r+0x7f8>
 8025e94:	9b00      	ldr	r3, [sp, #0]
 8025e96:	2b00      	cmp	r3, #0
 8025e98:	f77f aed6 	ble.w	8025c48 <_dtoa_r+0x900>
 8025e9c:	4656      	mov	r6, sl
 8025e9e:	4621      	mov	r1, r4
 8025ea0:	4648      	mov	r0, r9
 8025ea2:	f7ff f9c6 	bl	8025232 <quorem>
 8025ea6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8025eaa:	f806 8b01 	strb.w	r8, [r6], #1
 8025eae:	9b00      	ldr	r3, [sp, #0]
 8025eb0:	eba6 020a 	sub.w	r2, r6, sl
 8025eb4:	4293      	cmp	r3, r2
 8025eb6:	ddb3      	ble.n	8025e20 <_dtoa_r+0xad8>
 8025eb8:	4649      	mov	r1, r9
 8025eba:	2300      	movs	r3, #0
 8025ebc:	220a      	movs	r2, #10
 8025ebe:	4658      	mov	r0, fp
 8025ec0:	f000 fc32 	bl	8026728 <__multadd>
 8025ec4:	4681      	mov	r9, r0
 8025ec6:	e7ea      	b.n	8025e9e <_dtoa_r+0xb56>
 8025ec8:	08031a38 	.word	0x08031a38
 8025ecc:	080319d3 	.word	0x080319d3

08025ed0 <_free_r>:
 8025ed0:	b538      	push	{r3, r4, r5, lr}
 8025ed2:	4605      	mov	r5, r0
 8025ed4:	2900      	cmp	r1, #0
 8025ed6:	d041      	beq.n	8025f5c <_free_r+0x8c>
 8025ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025edc:	1f0c      	subs	r4, r1, #4
 8025ede:	2b00      	cmp	r3, #0
 8025ee0:	bfb8      	it	lt
 8025ee2:	18e4      	addlt	r4, r4, r3
 8025ee4:	f7fd f80a 	bl	8022efc <__malloc_lock>
 8025ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8025f60 <_free_r+0x90>)
 8025eea:	6813      	ldr	r3, [r2, #0]
 8025eec:	b933      	cbnz	r3, 8025efc <_free_r+0x2c>
 8025eee:	6063      	str	r3, [r4, #4]
 8025ef0:	6014      	str	r4, [r2, #0]
 8025ef2:	4628      	mov	r0, r5
 8025ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025ef8:	f7fd b806 	b.w	8022f08 <__malloc_unlock>
 8025efc:	42a3      	cmp	r3, r4
 8025efe:	d908      	bls.n	8025f12 <_free_r+0x42>
 8025f00:	6820      	ldr	r0, [r4, #0]
 8025f02:	1821      	adds	r1, r4, r0
 8025f04:	428b      	cmp	r3, r1
 8025f06:	bf01      	itttt	eq
 8025f08:	6819      	ldreq	r1, [r3, #0]
 8025f0a:	685b      	ldreq	r3, [r3, #4]
 8025f0c:	1809      	addeq	r1, r1, r0
 8025f0e:	6021      	streq	r1, [r4, #0]
 8025f10:	e7ed      	b.n	8025eee <_free_r+0x1e>
 8025f12:	461a      	mov	r2, r3
 8025f14:	685b      	ldr	r3, [r3, #4]
 8025f16:	b10b      	cbz	r3, 8025f1c <_free_r+0x4c>
 8025f18:	42a3      	cmp	r3, r4
 8025f1a:	d9fa      	bls.n	8025f12 <_free_r+0x42>
 8025f1c:	6811      	ldr	r1, [r2, #0]
 8025f1e:	1850      	adds	r0, r2, r1
 8025f20:	42a0      	cmp	r0, r4
 8025f22:	d10b      	bne.n	8025f3c <_free_r+0x6c>
 8025f24:	6820      	ldr	r0, [r4, #0]
 8025f26:	4401      	add	r1, r0
 8025f28:	1850      	adds	r0, r2, r1
 8025f2a:	4283      	cmp	r3, r0
 8025f2c:	6011      	str	r1, [r2, #0]
 8025f2e:	d1e0      	bne.n	8025ef2 <_free_r+0x22>
 8025f30:	6818      	ldr	r0, [r3, #0]
 8025f32:	685b      	ldr	r3, [r3, #4]
 8025f34:	6053      	str	r3, [r2, #4]
 8025f36:	4408      	add	r0, r1
 8025f38:	6010      	str	r0, [r2, #0]
 8025f3a:	e7da      	b.n	8025ef2 <_free_r+0x22>
 8025f3c:	d902      	bls.n	8025f44 <_free_r+0x74>
 8025f3e:	230c      	movs	r3, #12
 8025f40:	602b      	str	r3, [r5, #0]
 8025f42:	e7d6      	b.n	8025ef2 <_free_r+0x22>
 8025f44:	6820      	ldr	r0, [r4, #0]
 8025f46:	1821      	adds	r1, r4, r0
 8025f48:	428b      	cmp	r3, r1
 8025f4a:	bf04      	itt	eq
 8025f4c:	6819      	ldreq	r1, [r3, #0]
 8025f4e:	685b      	ldreq	r3, [r3, #4]
 8025f50:	6063      	str	r3, [r4, #4]
 8025f52:	bf04      	itt	eq
 8025f54:	1809      	addeq	r1, r1, r0
 8025f56:	6021      	streq	r1, [r4, #0]
 8025f58:	6054      	str	r4, [r2, #4]
 8025f5a:	e7ca      	b.n	8025ef2 <_free_r+0x22>
 8025f5c:	bd38      	pop	{r3, r4, r5, pc}
 8025f5e:	bf00      	nop
 8025f60:	20002f1c 	.word	0x20002f1c

08025f64 <rshift>:
 8025f64:	6903      	ldr	r3, [r0, #16]
 8025f66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8025f6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025f6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8025f72:	f100 0414 	add.w	r4, r0, #20
 8025f76:	dd45      	ble.n	8026004 <rshift+0xa0>
 8025f78:	f011 011f 	ands.w	r1, r1, #31
 8025f7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8025f80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8025f84:	d10c      	bne.n	8025fa0 <rshift+0x3c>
 8025f86:	f100 0710 	add.w	r7, r0, #16
 8025f8a:	4629      	mov	r1, r5
 8025f8c:	42b1      	cmp	r1, r6
 8025f8e:	d334      	bcc.n	8025ffa <rshift+0x96>
 8025f90:	1a9b      	subs	r3, r3, r2
 8025f92:	009b      	lsls	r3, r3, #2
 8025f94:	1eea      	subs	r2, r5, #3
 8025f96:	4296      	cmp	r6, r2
 8025f98:	bf38      	it	cc
 8025f9a:	2300      	movcc	r3, #0
 8025f9c:	4423      	add	r3, r4
 8025f9e:	e015      	b.n	8025fcc <rshift+0x68>
 8025fa0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8025fa4:	f1c1 0820 	rsb	r8, r1, #32
 8025fa8:	40cf      	lsrs	r7, r1
 8025faa:	f105 0e04 	add.w	lr, r5, #4
 8025fae:	46a1      	mov	r9, r4
 8025fb0:	4576      	cmp	r6, lr
 8025fb2:	46f4      	mov	ip, lr
 8025fb4:	d815      	bhi.n	8025fe2 <rshift+0x7e>
 8025fb6:	1a9a      	subs	r2, r3, r2
 8025fb8:	0092      	lsls	r2, r2, #2
 8025fba:	3a04      	subs	r2, #4
 8025fbc:	3501      	adds	r5, #1
 8025fbe:	42ae      	cmp	r6, r5
 8025fc0:	bf38      	it	cc
 8025fc2:	2200      	movcc	r2, #0
 8025fc4:	18a3      	adds	r3, r4, r2
 8025fc6:	50a7      	str	r7, [r4, r2]
 8025fc8:	b107      	cbz	r7, 8025fcc <rshift+0x68>
 8025fca:	3304      	adds	r3, #4
 8025fcc:	1b1a      	subs	r2, r3, r4
 8025fce:	42a3      	cmp	r3, r4
 8025fd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8025fd4:	bf08      	it	eq
 8025fd6:	2300      	moveq	r3, #0
 8025fd8:	6102      	str	r2, [r0, #16]
 8025fda:	bf08      	it	eq
 8025fdc:	6143      	streq	r3, [r0, #20]
 8025fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025fe2:	f8dc c000 	ldr.w	ip, [ip]
 8025fe6:	fa0c fc08 	lsl.w	ip, ip, r8
 8025fea:	ea4c 0707 	orr.w	r7, ip, r7
 8025fee:	f849 7b04 	str.w	r7, [r9], #4
 8025ff2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8025ff6:	40cf      	lsrs	r7, r1
 8025ff8:	e7da      	b.n	8025fb0 <rshift+0x4c>
 8025ffa:	f851 cb04 	ldr.w	ip, [r1], #4
 8025ffe:	f847 cf04 	str.w	ip, [r7, #4]!
 8026002:	e7c3      	b.n	8025f8c <rshift+0x28>
 8026004:	4623      	mov	r3, r4
 8026006:	e7e1      	b.n	8025fcc <rshift+0x68>

08026008 <__hexdig_fun>:
 8026008:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 802600c:	2b09      	cmp	r3, #9
 802600e:	d802      	bhi.n	8026016 <__hexdig_fun+0xe>
 8026010:	3820      	subs	r0, #32
 8026012:	b2c0      	uxtb	r0, r0
 8026014:	4770      	bx	lr
 8026016:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802601a:	2b05      	cmp	r3, #5
 802601c:	d801      	bhi.n	8026022 <__hexdig_fun+0x1a>
 802601e:	3847      	subs	r0, #71	@ 0x47
 8026020:	e7f7      	b.n	8026012 <__hexdig_fun+0xa>
 8026022:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8026026:	2b05      	cmp	r3, #5
 8026028:	d801      	bhi.n	802602e <__hexdig_fun+0x26>
 802602a:	3827      	subs	r0, #39	@ 0x27
 802602c:	e7f1      	b.n	8026012 <__hexdig_fun+0xa>
 802602e:	2000      	movs	r0, #0
 8026030:	4770      	bx	lr
	...

08026034 <__gethex>:
 8026034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026038:	b085      	sub	sp, #20
 802603a:	468a      	mov	sl, r1
 802603c:	9302      	str	r3, [sp, #8]
 802603e:	680b      	ldr	r3, [r1, #0]
 8026040:	9001      	str	r0, [sp, #4]
 8026042:	4690      	mov	r8, r2
 8026044:	1c9c      	adds	r4, r3, #2
 8026046:	46a1      	mov	r9, r4
 8026048:	f814 0b01 	ldrb.w	r0, [r4], #1
 802604c:	2830      	cmp	r0, #48	@ 0x30
 802604e:	d0fa      	beq.n	8026046 <__gethex+0x12>
 8026050:	eba9 0303 	sub.w	r3, r9, r3
 8026054:	f1a3 0b02 	sub.w	fp, r3, #2
 8026058:	f7ff ffd6 	bl	8026008 <__hexdig_fun>
 802605c:	4605      	mov	r5, r0
 802605e:	2800      	cmp	r0, #0
 8026060:	d168      	bne.n	8026134 <__gethex+0x100>
 8026062:	49a0      	ldr	r1, [pc, #640]	@ (80262e4 <__gethex+0x2b0>)
 8026064:	2201      	movs	r2, #1
 8026066:	4648      	mov	r0, r9
 8026068:	f7fe ff81 	bl	8024f6e <strncmp>
 802606c:	4607      	mov	r7, r0
 802606e:	2800      	cmp	r0, #0
 8026070:	d167      	bne.n	8026142 <__gethex+0x10e>
 8026072:	f899 0001 	ldrb.w	r0, [r9, #1]
 8026076:	4626      	mov	r6, r4
 8026078:	f7ff ffc6 	bl	8026008 <__hexdig_fun>
 802607c:	2800      	cmp	r0, #0
 802607e:	d062      	beq.n	8026146 <__gethex+0x112>
 8026080:	4623      	mov	r3, r4
 8026082:	7818      	ldrb	r0, [r3, #0]
 8026084:	2830      	cmp	r0, #48	@ 0x30
 8026086:	4699      	mov	r9, r3
 8026088:	f103 0301 	add.w	r3, r3, #1
 802608c:	d0f9      	beq.n	8026082 <__gethex+0x4e>
 802608e:	f7ff ffbb 	bl	8026008 <__hexdig_fun>
 8026092:	fab0 f580 	clz	r5, r0
 8026096:	096d      	lsrs	r5, r5, #5
 8026098:	f04f 0b01 	mov.w	fp, #1
 802609c:	464a      	mov	r2, r9
 802609e:	4616      	mov	r6, r2
 80260a0:	3201      	adds	r2, #1
 80260a2:	7830      	ldrb	r0, [r6, #0]
 80260a4:	f7ff ffb0 	bl	8026008 <__hexdig_fun>
 80260a8:	2800      	cmp	r0, #0
 80260aa:	d1f8      	bne.n	802609e <__gethex+0x6a>
 80260ac:	498d      	ldr	r1, [pc, #564]	@ (80262e4 <__gethex+0x2b0>)
 80260ae:	2201      	movs	r2, #1
 80260b0:	4630      	mov	r0, r6
 80260b2:	f7fe ff5c 	bl	8024f6e <strncmp>
 80260b6:	2800      	cmp	r0, #0
 80260b8:	d13f      	bne.n	802613a <__gethex+0x106>
 80260ba:	b944      	cbnz	r4, 80260ce <__gethex+0x9a>
 80260bc:	1c74      	adds	r4, r6, #1
 80260be:	4622      	mov	r2, r4
 80260c0:	4616      	mov	r6, r2
 80260c2:	3201      	adds	r2, #1
 80260c4:	7830      	ldrb	r0, [r6, #0]
 80260c6:	f7ff ff9f 	bl	8026008 <__hexdig_fun>
 80260ca:	2800      	cmp	r0, #0
 80260cc:	d1f8      	bne.n	80260c0 <__gethex+0x8c>
 80260ce:	1ba4      	subs	r4, r4, r6
 80260d0:	00a7      	lsls	r7, r4, #2
 80260d2:	7833      	ldrb	r3, [r6, #0]
 80260d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80260d8:	2b50      	cmp	r3, #80	@ 0x50
 80260da:	d13e      	bne.n	802615a <__gethex+0x126>
 80260dc:	7873      	ldrb	r3, [r6, #1]
 80260de:	2b2b      	cmp	r3, #43	@ 0x2b
 80260e0:	d033      	beq.n	802614a <__gethex+0x116>
 80260e2:	2b2d      	cmp	r3, #45	@ 0x2d
 80260e4:	d034      	beq.n	8026150 <__gethex+0x11c>
 80260e6:	1c71      	adds	r1, r6, #1
 80260e8:	2400      	movs	r4, #0
 80260ea:	7808      	ldrb	r0, [r1, #0]
 80260ec:	f7ff ff8c 	bl	8026008 <__hexdig_fun>
 80260f0:	1e43      	subs	r3, r0, #1
 80260f2:	b2db      	uxtb	r3, r3
 80260f4:	2b18      	cmp	r3, #24
 80260f6:	d830      	bhi.n	802615a <__gethex+0x126>
 80260f8:	f1a0 0210 	sub.w	r2, r0, #16
 80260fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8026100:	f7ff ff82 	bl	8026008 <__hexdig_fun>
 8026104:	f100 3cff 	add.w	ip, r0, #4294967295
 8026108:	fa5f fc8c 	uxtb.w	ip, ip
 802610c:	f1bc 0f18 	cmp.w	ip, #24
 8026110:	f04f 030a 	mov.w	r3, #10
 8026114:	d91e      	bls.n	8026154 <__gethex+0x120>
 8026116:	b104      	cbz	r4, 802611a <__gethex+0xe6>
 8026118:	4252      	negs	r2, r2
 802611a:	4417      	add	r7, r2
 802611c:	f8ca 1000 	str.w	r1, [sl]
 8026120:	b1ed      	cbz	r5, 802615e <__gethex+0x12a>
 8026122:	f1bb 0f00 	cmp.w	fp, #0
 8026126:	bf0c      	ite	eq
 8026128:	2506      	moveq	r5, #6
 802612a:	2500      	movne	r5, #0
 802612c:	4628      	mov	r0, r5
 802612e:	b005      	add	sp, #20
 8026130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026134:	2500      	movs	r5, #0
 8026136:	462c      	mov	r4, r5
 8026138:	e7b0      	b.n	802609c <__gethex+0x68>
 802613a:	2c00      	cmp	r4, #0
 802613c:	d1c7      	bne.n	80260ce <__gethex+0x9a>
 802613e:	4627      	mov	r7, r4
 8026140:	e7c7      	b.n	80260d2 <__gethex+0x9e>
 8026142:	464e      	mov	r6, r9
 8026144:	462f      	mov	r7, r5
 8026146:	2501      	movs	r5, #1
 8026148:	e7c3      	b.n	80260d2 <__gethex+0x9e>
 802614a:	2400      	movs	r4, #0
 802614c:	1cb1      	adds	r1, r6, #2
 802614e:	e7cc      	b.n	80260ea <__gethex+0xb6>
 8026150:	2401      	movs	r4, #1
 8026152:	e7fb      	b.n	802614c <__gethex+0x118>
 8026154:	fb03 0002 	mla	r0, r3, r2, r0
 8026158:	e7ce      	b.n	80260f8 <__gethex+0xc4>
 802615a:	4631      	mov	r1, r6
 802615c:	e7de      	b.n	802611c <__gethex+0xe8>
 802615e:	eba6 0309 	sub.w	r3, r6, r9
 8026162:	3b01      	subs	r3, #1
 8026164:	4629      	mov	r1, r5
 8026166:	2b07      	cmp	r3, #7
 8026168:	dc0a      	bgt.n	8026180 <__gethex+0x14c>
 802616a:	9801      	ldr	r0, [sp, #4]
 802616c:	f000 fa7a 	bl	8026664 <_Balloc>
 8026170:	4604      	mov	r4, r0
 8026172:	b940      	cbnz	r0, 8026186 <__gethex+0x152>
 8026174:	4b5c      	ldr	r3, [pc, #368]	@ (80262e8 <__gethex+0x2b4>)
 8026176:	4602      	mov	r2, r0
 8026178:	21e4      	movs	r1, #228	@ 0xe4
 802617a:	485c      	ldr	r0, [pc, #368]	@ (80262ec <__gethex+0x2b8>)
 802617c:	f7fc fdd2 	bl	8022d24 <__assert_func>
 8026180:	3101      	adds	r1, #1
 8026182:	105b      	asrs	r3, r3, #1
 8026184:	e7ef      	b.n	8026166 <__gethex+0x132>
 8026186:	f100 0a14 	add.w	sl, r0, #20
 802618a:	2300      	movs	r3, #0
 802618c:	4655      	mov	r5, sl
 802618e:	469b      	mov	fp, r3
 8026190:	45b1      	cmp	r9, r6
 8026192:	d337      	bcc.n	8026204 <__gethex+0x1d0>
 8026194:	f845 bb04 	str.w	fp, [r5], #4
 8026198:	eba5 050a 	sub.w	r5, r5, sl
 802619c:	10ad      	asrs	r5, r5, #2
 802619e:	6125      	str	r5, [r4, #16]
 80261a0:	4658      	mov	r0, fp
 80261a2:	f000 fb51 	bl	8026848 <__hi0bits>
 80261a6:	016d      	lsls	r5, r5, #5
 80261a8:	f8d8 6000 	ldr.w	r6, [r8]
 80261ac:	1a2d      	subs	r5, r5, r0
 80261ae:	42b5      	cmp	r5, r6
 80261b0:	dd54      	ble.n	802625c <__gethex+0x228>
 80261b2:	1bad      	subs	r5, r5, r6
 80261b4:	4629      	mov	r1, r5
 80261b6:	4620      	mov	r0, r4
 80261b8:	f000 fee5 	bl	8026f86 <__any_on>
 80261bc:	4681      	mov	r9, r0
 80261be:	b178      	cbz	r0, 80261e0 <__gethex+0x1ac>
 80261c0:	1e6b      	subs	r3, r5, #1
 80261c2:	1159      	asrs	r1, r3, #5
 80261c4:	f003 021f 	and.w	r2, r3, #31
 80261c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80261cc:	f04f 0901 	mov.w	r9, #1
 80261d0:	fa09 f202 	lsl.w	r2, r9, r2
 80261d4:	420a      	tst	r2, r1
 80261d6:	d003      	beq.n	80261e0 <__gethex+0x1ac>
 80261d8:	454b      	cmp	r3, r9
 80261da:	dc36      	bgt.n	802624a <__gethex+0x216>
 80261dc:	f04f 0902 	mov.w	r9, #2
 80261e0:	4629      	mov	r1, r5
 80261e2:	4620      	mov	r0, r4
 80261e4:	f7ff febe 	bl	8025f64 <rshift>
 80261e8:	442f      	add	r7, r5
 80261ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80261ee:	42bb      	cmp	r3, r7
 80261f0:	da42      	bge.n	8026278 <__gethex+0x244>
 80261f2:	9801      	ldr	r0, [sp, #4]
 80261f4:	4621      	mov	r1, r4
 80261f6:	f000 fa75 	bl	80266e4 <_Bfree>
 80261fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80261fc:	2300      	movs	r3, #0
 80261fe:	6013      	str	r3, [r2, #0]
 8026200:	25a3      	movs	r5, #163	@ 0xa3
 8026202:	e793      	b.n	802612c <__gethex+0xf8>
 8026204:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8026208:	2a2e      	cmp	r2, #46	@ 0x2e
 802620a:	d012      	beq.n	8026232 <__gethex+0x1fe>
 802620c:	2b20      	cmp	r3, #32
 802620e:	d104      	bne.n	802621a <__gethex+0x1e6>
 8026210:	f845 bb04 	str.w	fp, [r5], #4
 8026214:	f04f 0b00 	mov.w	fp, #0
 8026218:	465b      	mov	r3, fp
 802621a:	7830      	ldrb	r0, [r6, #0]
 802621c:	9303      	str	r3, [sp, #12]
 802621e:	f7ff fef3 	bl	8026008 <__hexdig_fun>
 8026222:	9b03      	ldr	r3, [sp, #12]
 8026224:	f000 000f 	and.w	r0, r0, #15
 8026228:	4098      	lsls	r0, r3
 802622a:	ea4b 0b00 	orr.w	fp, fp, r0
 802622e:	3304      	adds	r3, #4
 8026230:	e7ae      	b.n	8026190 <__gethex+0x15c>
 8026232:	45b1      	cmp	r9, r6
 8026234:	d8ea      	bhi.n	802620c <__gethex+0x1d8>
 8026236:	492b      	ldr	r1, [pc, #172]	@ (80262e4 <__gethex+0x2b0>)
 8026238:	9303      	str	r3, [sp, #12]
 802623a:	2201      	movs	r2, #1
 802623c:	4630      	mov	r0, r6
 802623e:	f7fe fe96 	bl	8024f6e <strncmp>
 8026242:	9b03      	ldr	r3, [sp, #12]
 8026244:	2800      	cmp	r0, #0
 8026246:	d1e1      	bne.n	802620c <__gethex+0x1d8>
 8026248:	e7a2      	b.n	8026190 <__gethex+0x15c>
 802624a:	1ea9      	subs	r1, r5, #2
 802624c:	4620      	mov	r0, r4
 802624e:	f000 fe9a 	bl	8026f86 <__any_on>
 8026252:	2800      	cmp	r0, #0
 8026254:	d0c2      	beq.n	80261dc <__gethex+0x1a8>
 8026256:	f04f 0903 	mov.w	r9, #3
 802625a:	e7c1      	b.n	80261e0 <__gethex+0x1ac>
 802625c:	da09      	bge.n	8026272 <__gethex+0x23e>
 802625e:	1b75      	subs	r5, r6, r5
 8026260:	4621      	mov	r1, r4
 8026262:	9801      	ldr	r0, [sp, #4]
 8026264:	462a      	mov	r2, r5
 8026266:	f000 fc55 	bl	8026b14 <__lshift>
 802626a:	1b7f      	subs	r7, r7, r5
 802626c:	4604      	mov	r4, r0
 802626e:	f100 0a14 	add.w	sl, r0, #20
 8026272:	f04f 0900 	mov.w	r9, #0
 8026276:	e7b8      	b.n	80261ea <__gethex+0x1b6>
 8026278:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802627c:	42bd      	cmp	r5, r7
 802627e:	dd6f      	ble.n	8026360 <__gethex+0x32c>
 8026280:	1bed      	subs	r5, r5, r7
 8026282:	42ae      	cmp	r6, r5
 8026284:	dc34      	bgt.n	80262f0 <__gethex+0x2bc>
 8026286:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802628a:	2b02      	cmp	r3, #2
 802628c:	d022      	beq.n	80262d4 <__gethex+0x2a0>
 802628e:	2b03      	cmp	r3, #3
 8026290:	d024      	beq.n	80262dc <__gethex+0x2a8>
 8026292:	2b01      	cmp	r3, #1
 8026294:	d115      	bne.n	80262c2 <__gethex+0x28e>
 8026296:	42ae      	cmp	r6, r5
 8026298:	d113      	bne.n	80262c2 <__gethex+0x28e>
 802629a:	2e01      	cmp	r6, #1
 802629c:	d10b      	bne.n	80262b6 <__gethex+0x282>
 802629e:	9a02      	ldr	r2, [sp, #8]
 80262a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80262a4:	6013      	str	r3, [r2, #0]
 80262a6:	2301      	movs	r3, #1
 80262a8:	6123      	str	r3, [r4, #16]
 80262aa:	f8ca 3000 	str.w	r3, [sl]
 80262ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80262b0:	2562      	movs	r5, #98	@ 0x62
 80262b2:	601c      	str	r4, [r3, #0]
 80262b4:	e73a      	b.n	802612c <__gethex+0xf8>
 80262b6:	1e71      	subs	r1, r6, #1
 80262b8:	4620      	mov	r0, r4
 80262ba:	f000 fe64 	bl	8026f86 <__any_on>
 80262be:	2800      	cmp	r0, #0
 80262c0:	d1ed      	bne.n	802629e <__gethex+0x26a>
 80262c2:	9801      	ldr	r0, [sp, #4]
 80262c4:	4621      	mov	r1, r4
 80262c6:	f000 fa0d 	bl	80266e4 <_Bfree>
 80262ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80262cc:	2300      	movs	r3, #0
 80262ce:	6013      	str	r3, [r2, #0]
 80262d0:	2550      	movs	r5, #80	@ 0x50
 80262d2:	e72b      	b.n	802612c <__gethex+0xf8>
 80262d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80262d6:	2b00      	cmp	r3, #0
 80262d8:	d1f3      	bne.n	80262c2 <__gethex+0x28e>
 80262da:	e7e0      	b.n	802629e <__gethex+0x26a>
 80262dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80262de:	2b00      	cmp	r3, #0
 80262e0:	d1dd      	bne.n	802629e <__gethex+0x26a>
 80262e2:	e7ee      	b.n	80262c2 <__gethex+0x28e>
 80262e4:	080317cc 	.word	0x080317cc
 80262e8:	08031a38 	.word	0x08031a38
 80262ec:	08031a49 	.word	0x08031a49
 80262f0:	1e6f      	subs	r7, r5, #1
 80262f2:	f1b9 0f00 	cmp.w	r9, #0
 80262f6:	d130      	bne.n	802635a <__gethex+0x326>
 80262f8:	b127      	cbz	r7, 8026304 <__gethex+0x2d0>
 80262fa:	4639      	mov	r1, r7
 80262fc:	4620      	mov	r0, r4
 80262fe:	f000 fe42 	bl	8026f86 <__any_on>
 8026302:	4681      	mov	r9, r0
 8026304:	117a      	asrs	r2, r7, #5
 8026306:	2301      	movs	r3, #1
 8026308:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 802630c:	f007 071f 	and.w	r7, r7, #31
 8026310:	40bb      	lsls	r3, r7
 8026312:	4213      	tst	r3, r2
 8026314:	4629      	mov	r1, r5
 8026316:	4620      	mov	r0, r4
 8026318:	bf18      	it	ne
 802631a:	f049 0902 	orrne.w	r9, r9, #2
 802631e:	f7ff fe21 	bl	8025f64 <rshift>
 8026322:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8026326:	1b76      	subs	r6, r6, r5
 8026328:	2502      	movs	r5, #2
 802632a:	f1b9 0f00 	cmp.w	r9, #0
 802632e:	d047      	beq.n	80263c0 <__gethex+0x38c>
 8026330:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8026334:	2b02      	cmp	r3, #2
 8026336:	d015      	beq.n	8026364 <__gethex+0x330>
 8026338:	2b03      	cmp	r3, #3
 802633a:	d017      	beq.n	802636c <__gethex+0x338>
 802633c:	2b01      	cmp	r3, #1
 802633e:	d109      	bne.n	8026354 <__gethex+0x320>
 8026340:	f019 0f02 	tst.w	r9, #2
 8026344:	d006      	beq.n	8026354 <__gethex+0x320>
 8026346:	f8da 3000 	ldr.w	r3, [sl]
 802634a:	ea49 0903 	orr.w	r9, r9, r3
 802634e:	f019 0f01 	tst.w	r9, #1
 8026352:	d10e      	bne.n	8026372 <__gethex+0x33e>
 8026354:	f045 0510 	orr.w	r5, r5, #16
 8026358:	e032      	b.n	80263c0 <__gethex+0x38c>
 802635a:	f04f 0901 	mov.w	r9, #1
 802635e:	e7d1      	b.n	8026304 <__gethex+0x2d0>
 8026360:	2501      	movs	r5, #1
 8026362:	e7e2      	b.n	802632a <__gethex+0x2f6>
 8026364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026366:	f1c3 0301 	rsb	r3, r3, #1
 802636a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802636c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802636e:	2b00      	cmp	r3, #0
 8026370:	d0f0      	beq.n	8026354 <__gethex+0x320>
 8026372:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8026376:	f104 0314 	add.w	r3, r4, #20
 802637a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 802637e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8026382:	f04f 0c00 	mov.w	ip, #0
 8026386:	4618      	mov	r0, r3
 8026388:	f853 2b04 	ldr.w	r2, [r3], #4
 802638c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8026390:	d01b      	beq.n	80263ca <__gethex+0x396>
 8026392:	3201      	adds	r2, #1
 8026394:	6002      	str	r2, [r0, #0]
 8026396:	2d02      	cmp	r5, #2
 8026398:	f104 0314 	add.w	r3, r4, #20
 802639c:	d13c      	bne.n	8026418 <__gethex+0x3e4>
 802639e:	f8d8 2000 	ldr.w	r2, [r8]
 80263a2:	3a01      	subs	r2, #1
 80263a4:	42b2      	cmp	r2, r6
 80263a6:	d109      	bne.n	80263bc <__gethex+0x388>
 80263a8:	1171      	asrs	r1, r6, #5
 80263aa:	2201      	movs	r2, #1
 80263ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80263b0:	f006 061f 	and.w	r6, r6, #31
 80263b4:	fa02 f606 	lsl.w	r6, r2, r6
 80263b8:	421e      	tst	r6, r3
 80263ba:	d13a      	bne.n	8026432 <__gethex+0x3fe>
 80263bc:	f045 0520 	orr.w	r5, r5, #32
 80263c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80263c2:	601c      	str	r4, [r3, #0]
 80263c4:	9b02      	ldr	r3, [sp, #8]
 80263c6:	601f      	str	r7, [r3, #0]
 80263c8:	e6b0      	b.n	802612c <__gethex+0xf8>
 80263ca:	4299      	cmp	r1, r3
 80263cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80263d0:	d8d9      	bhi.n	8026386 <__gethex+0x352>
 80263d2:	68a3      	ldr	r3, [r4, #8]
 80263d4:	459b      	cmp	fp, r3
 80263d6:	db17      	blt.n	8026408 <__gethex+0x3d4>
 80263d8:	6861      	ldr	r1, [r4, #4]
 80263da:	9801      	ldr	r0, [sp, #4]
 80263dc:	3101      	adds	r1, #1
 80263de:	f000 f941 	bl	8026664 <_Balloc>
 80263e2:	4681      	mov	r9, r0
 80263e4:	b918      	cbnz	r0, 80263ee <__gethex+0x3ba>
 80263e6:	4b1a      	ldr	r3, [pc, #104]	@ (8026450 <__gethex+0x41c>)
 80263e8:	4602      	mov	r2, r0
 80263ea:	2184      	movs	r1, #132	@ 0x84
 80263ec:	e6c5      	b.n	802617a <__gethex+0x146>
 80263ee:	6922      	ldr	r2, [r4, #16]
 80263f0:	3202      	adds	r2, #2
 80263f2:	f104 010c 	add.w	r1, r4, #12
 80263f6:	0092      	lsls	r2, r2, #2
 80263f8:	300c      	adds	r0, #12
 80263fa:	f7fe fef4 	bl	80251e6 <memcpy>
 80263fe:	4621      	mov	r1, r4
 8026400:	9801      	ldr	r0, [sp, #4]
 8026402:	f000 f96f 	bl	80266e4 <_Bfree>
 8026406:	464c      	mov	r4, r9
 8026408:	6923      	ldr	r3, [r4, #16]
 802640a:	1c5a      	adds	r2, r3, #1
 802640c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8026410:	6122      	str	r2, [r4, #16]
 8026412:	2201      	movs	r2, #1
 8026414:	615a      	str	r2, [r3, #20]
 8026416:	e7be      	b.n	8026396 <__gethex+0x362>
 8026418:	6922      	ldr	r2, [r4, #16]
 802641a:	455a      	cmp	r2, fp
 802641c:	dd0b      	ble.n	8026436 <__gethex+0x402>
 802641e:	2101      	movs	r1, #1
 8026420:	4620      	mov	r0, r4
 8026422:	f7ff fd9f 	bl	8025f64 <rshift>
 8026426:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802642a:	3701      	adds	r7, #1
 802642c:	42bb      	cmp	r3, r7
 802642e:	f6ff aee0 	blt.w	80261f2 <__gethex+0x1be>
 8026432:	2501      	movs	r5, #1
 8026434:	e7c2      	b.n	80263bc <__gethex+0x388>
 8026436:	f016 061f 	ands.w	r6, r6, #31
 802643a:	d0fa      	beq.n	8026432 <__gethex+0x3fe>
 802643c:	4453      	add	r3, sl
 802643e:	f1c6 0620 	rsb	r6, r6, #32
 8026442:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8026446:	f000 f9ff 	bl	8026848 <__hi0bits>
 802644a:	42b0      	cmp	r0, r6
 802644c:	dbe7      	blt.n	802641e <__gethex+0x3ea>
 802644e:	e7f0      	b.n	8026432 <__gethex+0x3fe>
 8026450:	08031a38 	.word	0x08031a38

08026454 <L_shift>:
 8026454:	f1c2 0208 	rsb	r2, r2, #8
 8026458:	0092      	lsls	r2, r2, #2
 802645a:	b570      	push	{r4, r5, r6, lr}
 802645c:	f1c2 0620 	rsb	r6, r2, #32
 8026460:	6843      	ldr	r3, [r0, #4]
 8026462:	6804      	ldr	r4, [r0, #0]
 8026464:	fa03 f506 	lsl.w	r5, r3, r6
 8026468:	432c      	orrs	r4, r5
 802646a:	40d3      	lsrs	r3, r2
 802646c:	6004      	str	r4, [r0, #0]
 802646e:	f840 3f04 	str.w	r3, [r0, #4]!
 8026472:	4288      	cmp	r0, r1
 8026474:	d3f4      	bcc.n	8026460 <L_shift+0xc>
 8026476:	bd70      	pop	{r4, r5, r6, pc}

08026478 <__match>:
 8026478:	b530      	push	{r4, r5, lr}
 802647a:	6803      	ldr	r3, [r0, #0]
 802647c:	3301      	adds	r3, #1
 802647e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026482:	b914      	cbnz	r4, 802648a <__match+0x12>
 8026484:	6003      	str	r3, [r0, #0]
 8026486:	2001      	movs	r0, #1
 8026488:	bd30      	pop	{r4, r5, pc}
 802648a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802648e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8026492:	2d19      	cmp	r5, #25
 8026494:	bf98      	it	ls
 8026496:	3220      	addls	r2, #32
 8026498:	42a2      	cmp	r2, r4
 802649a:	d0f0      	beq.n	802647e <__match+0x6>
 802649c:	2000      	movs	r0, #0
 802649e:	e7f3      	b.n	8026488 <__match+0x10>

080264a0 <__hexnan>:
 80264a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264a4:	680b      	ldr	r3, [r1, #0]
 80264a6:	6801      	ldr	r1, [r0, #0]
 80264a8:	115e      	asrs	r6, r3, #5
 80264aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80264ae:	f013 031f 	ands.w	r3, r3, #31
 80264b2:	b087      	sub	sp, #28
 80264b4:	bf18      	it	ne
 80264b6:	3604      	addne	r6, #4
 80264b8:	2500      	movs	r5, #0
 80264ba:	1f37      	subs	r7, r6, #4
 80264bc:	4682      	mov	sl, r0
 80264be:	4690      	mov	r8, r2
 80264c0:	9301      	str	r3, [sp, #4]
 80264c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80264c6:	46b9      	mov	r9, r7
 80264c8:	463c      	mov	r4, r7
 80264ca:	9502      	str	r5, [sp, #8]
 80264cc:	46ab      	mov	fp, r5
 80264ce:	784a      	ldrb	r2, [r1, #1]
 80264d0:	1c4b      	adds	r3, r1, #1
 80264d2:	9303      	str	r3, [sp, #12]
 80264d4:	b342      	cbz	r2, 8026528 <__hexnan+0x88>
 80264d6:	4610      	mov	r0, r2
 80264d8:	9105      	str	r1, [sp, #20]
 80264da:	9204      	str	r2, [sp, #16]
 80264dc:	f7ff fd94 	bl	8026008 <__hexdig_fun>
 80264e0:	2800      	cmp	r0, #0
 80264e2:	d151      	bne.n	8026588 <__hexnan+0xe8>
 80264e4:	9a04      	ldr	r2, [sp, #16]
 80264e6:	9905      	ldr	r1, [sp, #20]
 80264e8:	2a20      	cmp	r2, #32
 80264ea:	d818      	bhi.n	802651e <__hexnan+0x7e>
 80264ec:	9b02      	ldr	r3, [sp, #8]
 80264ee:	459b      	cmp	fp, r3
 80264f0:	dd13      	ble.n	802651a <__hexnan+0x7a>
 80264f2:	454c      	cmp	r4, r9
 80264f4:	d206      	bcs.n	8026504 <__hexnan+0x64>
 80264f6:	2d07      	cmp	r5, #7
 80264f8:	dc04      	bgt.n	8026504 <__hexnan+0x64>
 80264fa:	462a      	mov	r2, r5
 80264fc:	4649      	mov	r1, r9
 80264fe:	4620      	mov	r0, r4
 8026500:	f7ff ffa8 	bl	8026454 <L_shift>
 8026504:	4544      	cmp	r4, r8
 8026506:	d952      	bls.n	80265ae <__hexnan+0x10e>
 8026508:	2300      	movs	r3, #0
 802650a:	f1a4 0904 	sub.w	r9, r4, #4
 802650e:	f844 3c04 	str.w	r3, [r4, #-4]
 8026512:	f8cd b008 	str.w	fp, [sp, #8]
 8026516:	464c      	mov	r4, r9
 8026518:	461d      	mov	r5, r3
 802651a:	9903      	ldr	r1, [sp, #12]
 802651c:	e7d7      	b.n	80264ce <__hexnan+0x2e>
 802651e:	2a29      	cmp	r2, #41	@ 0x29
 8026520:	d157      	bne.n	80265d2 <__hexnan+0x132>
 8026522:	3102      	adds	r1, #2
 8026524:	f8ca 1000 	str.w	r1, [sl]
 8026528:	f1bb 0f00 	cmp.w	fp, #0
 802652c:	d051      	beq.n	80265d2 <__hexnan+0x132>
 802652e:	454c      	cmp	r4, r9
 8026530:	d206      	bcs.n	8026540 <__hexnan+0xa0>
 8026532:	2d07      	cmp	r5, #7
 8026534:	dc04      	bgt.n	8026540 <__hexnan+0xa0>
 8026536:	462a      	mov	r2, r5
 8026538:	4649      	mov	r1, r9
 802653a:	4620      	mov	r0, r4
 802653c:	f7ff ff8a 	bl	8026454 <L_shift>
 8026540:	4544      	cmp	r4, r8
 8026542:	d936      	bls.n	80265b2 <__hexnan+0x112>
 8026544:	f1a8 0204 	sub.w	r2, r8, #4
 8026548:	4623      	mov	r3, r4
 802654a:	f853 1b04 	ldr.w	r1, [r3], #4
 802654e:	f842 1f04 	str.w	r1, [r2, #4]!
 8026552:	429f      	cmp	r7, r3
 8026554:	d2f9      	bcs.n	802654a <__hexnan+0xaa>
 8026556:	1b3b      	subs	r3, r7, r4
 8026558:	f023 0303 	bic.w	r3, r3, #3
 802655c:	3304      	adds	r3, #4
 802655e:	3401      	adds	r4, #1
 8026560:	3e03      	subs	r6, #3
 8026562:	42b4      	cmp	r4, r6
 8026564:	bf88      	it	hi
 8026566:	2304      	movhi	r3, #4
 8026568:	4443      	add	r3, r8
 802656a:	2200      	movs	r2, #0
 802656c:	f843 2b04 	str.w	r2, [r3], #4
 8026570:	429f      	cmp	r7, r3
 8026572:	d2fb      	bcs.n	802656c <__hexnan+0xcc>
 8026574:	683b      	ldr	r3, [r7, #0]
 8026576:	b91b      	cbnz	r3, 8026580 <__hexnan+0xe0>
 8026578:	4547      	cmp	r7, r8
 802657a:	d128      	bne.n	80265ce <__hexnan+0x12e>
 802657c:	2301      	movs	r3, #1
 802657e:	603b      	str	r3, [r7, #0]
 8026580:	2005      	movs	r0, #5
 8026582:	b007      	add	sp, #28
 8026584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026588:	3501      	adds	r5, #1
 802658a:	2d08      	cmp	r5, #8
 802658c:	f10b 0b01 	add.w	fp, fp, #1
 8026590:	dd06      	ble.n	80265a0 <__hexnan+0x100>
 8026592:	4544      	cmp	r4, r8
 8026594:	d9c1      	bls.n	802651a <__hexnan+0x7a>
 8026596:	2300      	movs	r3, #0
 8026598:	f844 3c04 	str.w	r3, [r4, #-4]
 802659c:	2501      	movs	r5, #1
 802659e:	3c04      	subs	r4, #4
 80265a0:	6822      	ldr	r2, [r4, #0]
 80265a2:	f000 000f 	and.w	r0, r0, #15
 80265a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80265aa:	6020      	str	r0, [r4, #0]
 80265ac:	e7b5      	b.n	802651a <__hexnan+0x7a>
 80265ae:	2508      	movs	r5, #8
 80265b0:	e7b3      	b.n	802651a <__hexnan+0x7a>
 80265b2:	9b01      	ldr	r3, [sp, #4]
 80265b4:	2b00      	cmp	r3, #0
 80265b6:	d0dd      	beq.n	8026574 <__hexnan+0xd4>
 80265b8:	f1c3 0320 	rsb	r3, r3, #32
 80265bc:	f04f 32ff 	mov.w	r2, #4294967295
 80265c0:	40da      	lsrs	r2, r3
 80265c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80265c6:	4013      	ands	r3, r2
 80265c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80265cc:	e7d2      	b.n	8026574 <__hexnan+0xd4>
 80265ce:	3f04      	subs	r7, #4
 80265d0:	e7d0      	b.n	8026574 <__hexnan+0xd4>
 80265d2:	2004      	movs	r0, #4
 80265d4:	e7d5      	b.n	8026582 <__hexnan+0xe2>
	...

080265d8 <_mallinfo_r>:
 80265d8:	b570      	push	{r4, r5, r6, lr}
 80265da:	4c16      	ldr	r4, [pc, #88]	@ (8026634 <_mallinfo_r+0x5c>)
 80265dc:	4605      	mov	r5, r0
 80265de:	4608      	mov	r0, r1
 80265e0:	460e      	mov	r6, r1
 80265e2:	f7fc fc8b 	bl	8022efc <__malloc_lock>
 80265e6:	6823      	ldr	r3, [r4, #0]
 80265e8:	b14b      	cbz	r3, 80265fe <_mallinfo_r+0x26>
 80265ea:	2100      	movs	r1, #0
 80265ec:	4630      	mov	r0, r6
 80265ee:	f7fe fda3 	bl	8025138 <_sbrk_r>
 80265f2:	1c42      	adds	r2, r0, #1
 80265f4:	bf18      	it	ne
 80265f6:	6822      	ldrne	r2, [r4, #0]
 80265f8:	4603      	mov	r3, r0
 80265fa:	bf18      	it	ne
 80265fc:	1a83      	subne	r3, r0, r2
 80265fe:	4a0e      	ldr	r2, [pc, #56]	@ (8026638 <_mallinfo_r+0x60>)
 8026600:	6811      	ldr	r1, [r2, #0]
 8026602:	2200      	movs	r2, #0
 8026604:	b991      	cbnz	r1, 802662c <_mallinfo_r+0x54>
 8026606:	4c0d      	ldr	r4, [pc, #52]	@ (802663c <_mallinfo_r+0x64>)
 8026608:	4630      	mov	r0, r6
 802660a:	6023      	str	r3, [r4, #0]
 802660c:	1a9b      	subs	r3, r3, r2
 802660e:	6222      	str	r2, [r4, #32]
 8026610:	61e3      	str	r3, [r4, #28]
 8026612:	f7fc fc79 	bl	8022f08 <__malloc_unlock>
 8026616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026618:	462e      	mov	r6, r5
 802661a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 802661c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802661e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8026620:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026624:	e886 0003 	stmia.w	r6, {r0, r1}
 8026628:	4628      	mov	r0, r5
 802662a:	bd70      	pop	{r4, r5, r6, pc}
 802662c:	6808      	ldr	r0, [r1, #0]
 802662e:	6849      	ldr	r1, [r1, #4]
 8026630:	4402      	add	r2, r0
 8026632:	e7e7      	b.n	8026604 <_mallinfo_r+0x2c>
 8026634:	20002f18 	.word	0x20002f18
 8026638:	20002f1c 	.word	0x20002f1c
 802663c:	20003064 	.word	0x20003064

08026640 <__ascii_mbtowc>:
 8026640:	b082      	sub	sp, #8
 8026642:	b901      	cbnz	r1, 8026646 <__ascii_mbtowc+0x6>
 8026644:	a901      	add	r1, sp, #4
 8026646:	b142      	cbz	r2, 802665a <__ascii_mbtowc+0x1a>
 8026648:	b14b      	cbz	r3, 802665e <__ascii_mbtowc+0x1e>
 802664a:	7813      	ldrb	r3, [r2, #0]
 802664c:	600b      	str	r3, [r1, #0]
 802664e:	7812      	ldrb	r2, [r2, #0]
 8026650:	1e10      	subs	r0, r2, #0
 8026652:	bf18      	it	ne
 8026654:	2001      	movne	r0, #1
 8026656:	b002      	add	sp, #8
 8026658:	4770      	bx	lr
 802665a:	4610      	mov	r0, r2
 802665c:	e7fb      	b.n	8026656 <__ascii_mbtowc+0x16>
 802665e:	f06f 0001 	mvn.w	r0, #1
 8026662:	e7f8      	b.n	8026656 <__ascii_mbtowc+0x16>

08026664 <_Balloc>:
 8026664:	b570      	push	{r4, r5, r6, lr}
 8026666:	69c6      	ldr	r6, [r0, #28]
 8026668:	4604      	mov	r4, r0
 802666a:	460d      	mov	r5, r1
 802666c:	b976      	cbnz	r6, 802668c <_Balloc+0x28>
 802666e:	2010      	movs	r0, #16
 8026670:	f7fc fb92 	bl	8022d98 <malloc>
 8026674:	4602      	mov	r2, r0
 8026676:	61e0      	str	r0, [r4, #28]
 8026678:	b920      	cbnz	r0, 8026684 <_Balloc+0x20>
 802667a:	4b18      	ldr	r3, [pc, #96]	@ (80266dc <_Balloc+0x78>)
 802667c:	4818      	ldr	r0, [pc, #96]	@ (80266e0 <_Balloc+0x7c>)
 802667e:	216b      	movs	r1, #107	@ 0x6b
 8026680:	f7fc fb50 	bl	8022d24 <__assert_func>
 8026684:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026688:	6006      	str	r6, [r0, #0]
 802668a:	60c6      	str	r6, [r0, #12]
 802668c:	69e6      	ldr	r6, [r4, #28]
 802668e:	68f3      	ldr	r3, [r6, #12]
 8026690:	b183      	cbz	r3, 80266b4 <_Balloc+0x50>
 8026692:	69e3      	ldr	r3, [r4, #28]
 8026694:	68db      	ldr	r3, [r3, #12]
 8026696:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802669a:	b9b8      	cbnz	r0, 80266cc <_Balloc+0x68>
 802669c:	2101      	movs	r1, #1
 802669e:	fa01 f605 	lsl.w	r6, r1, r5
 80266a2:	1d72      	adds	r2, r6, #5
 80266a4:	0092      	lsls	r2, r2, #2
 80266a6:	4620      	mov	r0, r4
 80266a8:	f7fc fb62 	bl	8022d70 <_calloc_r>
 80266ac:	b160      	cbz	r0, 80266c8 <_Balloc+0x64>
 80266ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80266b2:	e00e      	b.n	80266d2 <_Balloc+0x6e>
 80266b4:	2221      	movs	r2, #33	@ 0x21
 80266b6:	2104      	movs	r1, #4
 80266b8:	4620      	mov	r0, r4
 80266ba:	f7fc fb59 	bl	8022d70 <_calloc_r>
 80266be:	69e3      	ldr	r3, [r4, #28]
 80266c0:	60f0      	str	r0, [r6, #12]
 80266c2:	68db      	ldr	r3, [r3, #12]
 80266c4:	2b00      	cmp	r3, #0
 80266c6:	d1e4      	bne.n	8026692 <_Balloc+0x2e>
 80266c8:	2000      	movs	r0, #0
 80266ca:	bd70      	pop	{r4, r5, r6, pc}
 80266cc:	6802      	ldr	r2, [r0, #0]
 80266ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80266d2:	2300      	movs	r3, #0
 80266d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80266d8:	e7f7      	b.n	80266ca <_Balloc+0x66>
 80266da:	bf00      	nop
 80266dc:	0803195a 	.word	0x0803195a
 80266e0:	08031aa9 	.word	0x08031aa9

080266e4 <_Bfree>:
 80266e4:	b570      	push	{r4, r5, r6, lr}
 80266e6:	69c6      	ldr	r6, [r0, #28]
 80266e8:	4605      	mov	r5, r0
 80266ea:	460c      	mov	r4, r1
 80266ec:	b976      	cbnz	r6, 802670c <_Bfree+0x28>
 80266ee:	2010      	movs	r0, #16
 80266f0:	f7fc fb52 	bl	8022d98 <malloc>
 80266f4:	4602      	mov	r2, r0
 80266f6:	61e8      	str	r0, [r5, #28]
 80266f8:	b920      	cbnz	r0, 8026704 <_Bfree+0x20>
 80266fa:	4b09      	ldr	r3, [pc, #36]	@ (8026720 <_Bfree+0x3c>)
 80266fc:	4809      	ldr	r0, [pc, #36]	@ (8026724 <_Bfree+0x40>)
 80266fe:	218f      	movs	r1, #143	@ 0x8f
 8026700:	f7fc fb10 	bl	8022d24 <__assert_func>
 8026704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026708:	6006      	str	r6, [r0, #0]
 802670a:	60c6      	str	r6, [r0, #12]
 802670c:	b13c      	cbz	r4, 802671e <_Bfree+0x3a>
 802670e:	69eb      	ldr	r3, [r5, #28]
 8026710:	6862      	ldr	r2, [r4, #4]
 8026712:	68db      	ldr	r3, [r3, #12]
 8026714:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026718:	6021      	str	r1, [r4, #0]
 802671a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802671e:	bd70      	pop	{r4, r5, r6, pc}
 8026720:	0803195a 	.word	0x0803195a
 8026724:	08031aa9 	.word	0x08031aa9

08026728 <__multadd>:
 8026728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802672c:	690d      	ldr	r5, [r1, #16]
 802672e:	4607      	mov	r7, r0
 8026730:	460c      	mov	r4, r1
 8026732:	461e      	mov	r6, r3
 8026734:	f101 0c14 	add.w	ip, r1, #20
 8026738:	2000      	movs	r0, #0
 802673a:	f8dc 3000 	ldr.w	r3, [ip]
 802673e:	b299      	uxth	r1, r3
 8026740:	fb02 6101 	mla	r1, r2, r1, r6
 8026744:	0c1e      	lsrs	r6, r3, #16
 8026746:	0c0b      	lsrs	r3, r1, #16
 8026748:	fb02 3306 	mla	r3, r2, r6, r3
 802674c:	b289      	uxth	r1, r1
 802674e:	3001      	adds	r0, #1
 8026750:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026754:	4285      	cmp	r5, r0
 8026756:	f84c 1b04 	str.w	r1, [ip], #4
 802675a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802675e:	dcec      	bgt.n	802673a <__multadd+0x12>
 8026760:	b30e      	cbz	r6, 80267a6 <__multadd+0x7e>
 8026762:	68a3      	ldr	r3, [r4, #8]
 8026764:	42ab      	cmp	r3, r5
 8026766:	dc19      	bgt.n	802679c <__multadd+0x74>
 8026768:	6861      	ldr	r1, [r4, #4]
 802676a:	4638      	mov	r0, r7
 802676c:	3101      	adds	r1, #1
 802676e:	f7ff ff79 	bl	8026664 <_Balloc>
 8026772:	4680      	mov	r8, r0
 8026774:	b928      	cbnz	r0, 8026782 <__multadd+0x5a>
 8026776:	4602      	mov	r2, r0
 8026778:	4b0c      	ldr	r3, [pc, #48]	@ (80267ac <__multadd+0x84>)
 802677a:	480d      	ldr	r0, [pc, #52]	@ (80267b0 <__multadd+0x88>)
 802677c:	21ba      	movs	r1, #186	@ 0xba
 802677e:	f7fc fad1 	bl	8022d24 <__assert_func>
 8026782:	6922      	ldr	r2, [r4, #16]
 8026784:	3202      	adds	r2, #2
 8026786:	f104 010c 	add.w	r1, r4, #12
 802678a:	0092      	lsls	r2, r2, #2
 802678c:	300c      	adds	r0, #12
 802678e:	f7fe fd2a 	bl	80251e6 <memcpy>
 8026792:	4621      	mov	r1, r4
 8026794:	4638      	mov	r0, r7
 8026796:	f7ff ffa5 	bl	80266e4 <_Bfree>
 802679a:	4644      	mov	r4, r8
 802679c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80267a0:	3501      	adds	r5, #1
 80267a2:	615e      	str	r6, [r3, #20]
 80267a4:	6125      	str	r5, [r4, #16]
 80267a6:	4620      	mov	r0, r4
 80267a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80267ac:	08031a38 	.word	0x08031a38
 80267b0:	08031aa9 	.word	0x08031aa9

080267b4 <__s2b>:
 80267b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80267b8:	460c      	mov	r4, r1
 80267ba:	4615      	mov	r5, r2
 80267bc:	461f      	mov	r7, r3
 80267be:	2209      	movs	r2, #9
 80267c0:	3308      	adds	r3, #8
 80267c2:	4606      	mov	r6, r0
 80267c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80267c8:	2100      	movs	r1, #0
 80267ca:	2201      	movs	r2, #1
 80267cc:	429a      	cmp	r2, r3
 80267ce:	db09      	blt.n	80267e4 <__s2b+0x30>
 80267d0:	4630      	mov	r0, r6
 80267d2:	f7ff ff47 	bl	8026664 <_Balloc>
 80267d6:	b940      	cbnz	r0, 80267ea <__s2b+0x36>
 80267d8:	4602      	mov	r2, r0
 80267da:	4b19      	ldr	r3, [pc, #100]	@ (8026840 <__s2b+0x8c>)
 80267dc:	4819      	ldr	r0, [pc, #100]	@ (8026844 <__s2b+0x90>)
 80267de:	21d3      	movs	r1, #211	@ 0xd3
 80267e0:	f7fc faa0 	bl	8022d24 <__assert_func>
 80267e4:	0052      	lsls	r2, r2, #1
 80267e6:	3101      	adds	r1, #1
 80267e8:	e7f0      	b.n	80267cc <__s2b+0x18>
 80267ea:	9b08      	ldr	r3, [sp, #32]
 80267ec:	6143      	str	r3, [r0, #20]
 80267ee:	2d09      	cmp	r5, #9
 80267f0:	f04f 0301 	mov.w	r3, #1
 80267f4:	6103      	str	r3, [r0, #16]
 80267f6:	dd16      	ble.n	8026826 <__s2b+0x72>
 80267f8:	f104 0909 	add.w	r9, r4, #9
 80267fc:	46c8      	mov	r8, r9
 80267fe:	442c      	add	r4, r5
 8026800:	f818 3b01 	ldrb.w	r3, [r8], #1
 8026804:	4601      	mov	r1, r0
 8026806:	3b30      	subs	r3, #48	@ 0x30
 8026808:	220a      	movs	r2, #10
 802680a:	4630      	mov	r0, r6
 802680c:	f7ff ff8c 	bl	8026728 <__multadd>
 8026810:	45a0      	cmp	r8, r4
 8026812:	d1f5      	bne.n	8026800 <__s2b+0x4c>
 8026814:	f1a5 0408 	sub.w	r4, r5, #8
 8026818:	444c      	add	r4, r9
 802681a:	1b2d      	subs	r5, r5, r4
 802681c:	1963      	adds	r3, r4, r5
 802681e:	42bb      	cmp	r3, r7
 8026820:	db04      	blt.n	802682c <__s2b+0x78>
 8026822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026826:	340a      	adds	r4, #10
 8026828:	2509      	movs	r5, #9
 802682a:	e7f6      	b.n	802681a <__s2b+0x66>
 802682c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8026830:	4601      	mov	r1, r0
 8026832:	3b30      	subs	r3, #48	@ 0x30
 8026834:	220a      	movs	r2, #10
 8026836:	4630      	mov	r0, r6
 8026838:	f7ff ff76 	bl	8026728 <__multadd>
 802683c:	e7ee      	b.n	802681c <__s2b+0x68>
 802683e:	bf00      	nop
 8026840:	08031a38 	.word	0x08031a38
 8026844:	08031aa9 	.word	0x08031aa9

08026848 <__hi0bits>:
 8026848:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802684c:	4603      	mov	r3, r0
 802684e:	bf36      	itet	cc
 8026850:	0403      	lslcc	r3, r0, #16
 8026852:	2000      	movcs	r0, #0
 8026854:	2010      	movcc	r0, #16
 8026856:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802685a:	bf3c      	itt	cc
 802685c:	021b      	lslcc	r3, r3, #8
 802685e:	3008      	addcc	r0, #8
 8026860:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8026864:	bf3c      	itt	cc
 8026866:	011b      	lslcc	r3, r3, #4
 8026868:	3004      	addcc	r0, #4
 802686a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802686e:	bf3c      	itt	cc
 8026870:	009b      	lslcc	r3, r3, #2
 8026872:	3002      	addcc	r0, #2
 8026874:	2b00      	cmp	r3, #0
 8026876:	db05      	blt.n	8026884 <__hi0bits+0x3c>
 8026878:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802687c:	f100 0001 	add.w	r0, r0, #1
 8026880:	bf08      	it	eq
 8026882:	2020      	moveq	r0, #32
 8026884:	4770      	bx	lr

08026886 <__lo0bits>:
 8026886:	6803      	ldr	r3, [r0, #0]
 8026888:	4602      	mov	r2, r0
 802688a:	f013 0007 	ands.w	r0, r3, #7
 802688e:	d00b      	beq.n	80268a8 <__lo0bits+0x22>
 8026890:	07d9      	lsls	r1, r3, #31
 8026892:	d421      	bmi.n	80268d8 <__lo0bits+0x52>
 8026894:	0798      	lsls	r0, r3, #30
 8026896:	bf49      	itett	mi
 8026898:	085b      	lsrmi	r3, r3, #1
 802689a:	089b      	lsrpl	r3, r3, #2
 802689c:	2001      	movmi	r0, #1
 802689e:	6013      	strmi	r3, [r2, #0]
 80268a0:	bf5c      	itt	pl
 80268a2:	6013      	strpl	r3, [r2, #0]
 80268a4:	2002      	movpl	r0, #2
 80268a6:	4770      	bx	lr
 80268a8:	b299      	uxth	r1, r3
 80268aa:	b909      	cbnz	r1, 80268b0 <__lo0bits+0x2a>
 80268ac:	0c1b      	lsrs	r3, r3, #16
 80268ae:	2010      	movs	r0, #16
 80268b0:	b2d9      	uxtb	r1, r3
 80268b2:	b909      	cbnz	r1, 80268b8 <__lo0bits+0x32>
 80268b4:	3008      	adds	r0, #8
 80268b6:	0a1b      	lsrs	r3, r3, #8
 80268b8:	0719      	lsls	r1, r3, #28
 80268ba:	bf04      	itt	eq
 80268bc:	091b      	lsreq	r3, r3, #4
 80268be:	3004      	addeq	r0, #4
 80268c0:	0799      	lsls	r1, r3, #30
 80268c2:	bf04      	itt	eq
 80268c4:	089b      	lsreq	r3, r3, #2
 80268c6:	3002      	addeq	r0, #2
 80268c8:	07d9      	lsls	r1, r3, #31
 80268ca:	d403      	bmi.n	80268d4 <__lo0bits+0x4e>
 80268cc:	085b      	lsrs	r3, r3, #1
 80268ce:	f100 0001 	add.w	r0, r0, #1
 80268d2:	d003      	beq.n	80268dc <__lo0bits+0x56>
 80268d4:	6013      	str	r3, [r2, #0]
 80268d6:	4770      	bx	lr
 80268d8:	2000      	movs	r0, #0
 80268da:	4770      	bx	lr
 80268dc:	2020      	movs	r0, #32
 80268de:	4770      	bx	lr

080268e0 <__i2b>:
 80268e0:	b510      	push	{r4, lr}
 80268e2:	460c      	mov	r4, r1
 80268e4:	2101      	movs	r1, #1
 80268e6:	f7ff febd 	bl	8026664 <_Balloc>
 80268ea:	4602      	mov	r2, r0
 80268ec:	b928      	cbnz	r0, 80268fa <__i2b+0x1a>
 80268ee:	4b05      	ldr	r3, [pc, #20]	@ (8026904 <__i2b+0x24>)
 80268f0:	4805      	ldr	r0, [pc, #20]	@ (8026908 <__i2b+0x28>)
 80268f2:	f240 1145 	movw	r1, #325	@ 0x145
 80268f6:	f7fc fa15 	bl	8022d24 <__assert_func>
 80268fa:	2301      	movs	r3, #1
 80268fc:	6144      	str	r4, [r0, #20]
 80268fe:	6103      	str	r3, [r0, #16]
 8026900:	bd10      	pop	{r4, pc}
 8026902:	bf00      	nop
 8026904:	08031a38 	.word	0x08031a38
 8026908:	08031aa9 	.word	0x08031aa9

0802690c <__multiply>:
 802690c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026910:	4614      	mov	r4, r2
 8026912:	690a      	ldr	r2, [r1, #16]
 8026914:	6923      	ldr	r3, [r4, #16]
 8026916:	429a      	cmp	r2, r3
 8026918:	bfa8      	it	ge
 802691a:	4623      	movge	r3, r4
 802691c:	460f      	mov	r7, r1
 802691e:	bfa4      	itt	ge
 8026920:	460c      	movge	r4, r1
 8026922:	461f      	movge	r7, r3
 8026924:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8026928:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802692c:	68a3      	ldr	r3, [r4, #8]
 802692e:	6861      	ldr	r1, [r4, #4]
 8026930:	eb0a 0609 	add.w	r6, sl, r9
 8026934:	42b3      	cmp	r3, r6
 8026936:	b085      	sub	sp, #20
 8026938:	bfb8      	it	lt
 802693a:	3101      	addlt	r1, #1
 802693c:	f7ff fe92 	bl	8026664 <_Balloc>
 8026940:	b930      	cbnz	r0, 8026950 <__multiply+0x44>
 8026942:	4602      	mov	r2, r0
 8026944:	4b44      	ldr	r3, [pc, #272]	@ (8026a58 <__multiply+0x14c>)
 8026946:	4845      	ldr	r0, [pc, #276]	@ (8026a5c <__multiply+0x150>)
 8026948:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802694c:	f7fc f9ea 	bl	8022d24 <__assert_func>
 8026950:	f100 0514 	add.w	r5, r0, #20
 8026954:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8026958:	462b      	mov	r3, r5
 802695a:	2200      	movs	r2, #0
 802695c:	4543      	cmp	r3, r8
 802695e:	d321      	bcc.n	80269a4 <__multiply+0x98>
 8026960:	f107 0114 	add.w	r1, r7, #20
 8026964:	f104 0214 	add.w	r2, r4, #20
 8026968:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 802696c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8026970:	9302      	str	r3, [sp, #8]
 8026972:	1b13      	subs	r3, r2, r4
 8026974:	3b15      	subs	r3, #21
 8026976:	f023 0303 	bic.w	r3, r3, #3
 802697a:	3304      	adds	r3, #4
 802697c:	f104 0715 	add.w	r7, r4, #21
 8026980:	42ba      	cmp	r2, r7
 8026982:	bf38      	it	cc
 8026984:	2304      	movcc	r3, #4
 8026986:	9301      	str	r3, [sp, #4]
 8026988:	9b02      	ldr	r3, [sp, #8]
 802698a:	9103      	str	r1, [sp, #12]
 802698c:	428b      	cmp	r3, r1
 802698e:	d80c      	bhi.n	80269aa <__multiply+0x9e>
 8026990:	2e00      	cmp	r6, #0
 8026992:	dd03      	ble.n	802699c <__multiply+0x90>
 8026994:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8026998:	2b00      	cmp	r3, #0
 802699a:	d05b      	beq.n	8026a54 <__multiply+0x148>
 802699c:	6106      	str	r6, [r0, #16]
 802699e:	b005      	add	sp, #20
 80269a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80269a4:	f843 2b04 	str.w	r2, [r3], #4
 80269a8:	e7d8      	b.n	802695c <__multiply+0x50>
 80269aa:	f8b1 a000 	ldrh.w	sl, [r1]
 80269ae:	f1ba 0f00 	cmp.w	sl, #0
 80269b2:	d024      	beq.n	80269fe <__multiply+0xf2>
 80269b4:	f104 0e14 	add.w	lr, r4, #20
 80269b8:	46a9      	mov	r9, r5
 80269ba:	f04f 0c00 	mov.w	ip, #0
 80269be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80269c2:	f8d9 3000 	ldr.w	r3, [r9]
 80269c6:	fa1f fb87 	uxth.w	fp, r7
 80269ca:	b29b      	uxth	r3, r3
 80269cc:	fb0a 330b 	mla	r3, sl, fp, r3
 80269d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80269d4:	f8d9 7000 	ldr.w	r7, [r9]
 80269d8:	4463      	add	r3, ip
 80269da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80269de:	fb0a c70b 	mla	r7, sl, fp, ip
 80269e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80269e6:	b29b      	uxth	r3, r3
 80269e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80269ec:	4572      	cmp	r2, lr
 80269ee:	f849 3b04 	str.w	r3, [r9], #4
 80269f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80269f6:	d8e2      	bhi.n	80269be <__multiply+0xb2>
 80269f8:	9b01      	ldr	r3, [sp, #4]
 80269fa:	f845 c003 	str.w	ip, [r5, r3]
 80269fe:	9b03      	ldr	r3, [sp, #12]
 8026a00:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8026a04:	3104      	adds	r1, #4
 8026a06:	f1b9 0f00 	cmp.w	r9, #0
 8026a0a:	d021      	beq.n	8026a50 <__multiply+0x144>
 8026a0c:	682b      	ldr	r3, [r5, #0]
 8026a0e:	f104 0c14 	add.w	ip, r4, #20
 8026a12:	46ae      	mov	lr, r5
 8026a14:	f04f 0a00 	mov.w	sl, #0
 8026a18:	f8bc b000 	ldrh.w	fp, [ip]
 8026a1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8026a20:	fb09 770b 	mla	r7, r9, fp, r7
 8026a24:	4457      	add	r7, sl
 8026a26:	b29b      	uxth	r3, r3
 8026a28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8026a2c:	f84e 3b04 	str.w	r3, [lr], #4
 8026a30:	f85c 3b04 	ldr.w	r3, [ip], #4
 8026a34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8026a38:	f8be 3000 	ldrh.w	r3, [lr]
 8026a3c:	fb09 330a 	mla	r3, r9, sl, r3
 8026a40:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8026a44:	4562      	cmp	r2, ip
 8026a46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8026a4a:	d8e5      	bhi.n	8026a18 <__multiply+0x10c>
 8026a4c:	9f01      	ldr	r7, [sp, #4]
 8026a4e:	51eb      	str	r3, [r5, r7]
 8026a50:	3504      	adds	r5, #4
 8026a52:	e799      	b.n	8026988 <__multiply+0x7c>
 8026a54:	3e01      	subs	r6, #1
 8026a56:	e79b      	b.n	8026990 <__multiply+0x84>
 8026a58:	08031a38 	.word	0x08031a38
 8026a5c:	08031aa9 	.word	0x08031aa9

08026a60 <__pow5mult>:
 8026a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026a64:	4615      	mov	r5, r2
 8026a66:	f012 0203 	ands.w	r2, r2, #3
 8026a6a:	4607      	mov	r7, r0
 8026a6c:	460e      	mov	r6, r1
 8026a6e:	d007      	beq.n	8026a80 <__pow5mult+0x20>
 8026a70:	4c25      	ldr	r4, [pc, #148]	@ (8026b08 <__pow5mult+0xa8>)
 8026a72:	3a01      	subs	r2, #1
 8026a74:	2300      	movs	r3, #0
 8026a76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026a7a:	f7ff fe55 	bl	8026728 <__multadd>
 8026a7e:	4606      	mov	r6, r0
 8026a80:	10ad      	asrs	r5, r5, #2
 8026a82:	d03d      	beq.n	8026b00 <__pow5mult+0xa0>
 8026a84:	69fc      	ldr	r4, [r7, #28]
 8026a86:	b97c      	cbnz	r4, 8026aa8 <__pow5mult+0x48>
 8026a88:	2010      	movs	r0, #16
 8026a8a:	f7fc f985 	bl	8022d98 <malloc>
 8026a8e:	4602      	mov	r2, r0
 8026a90:	61f8      	str	r0, [r7, #28]
 8026a92:	b928      	cbnz	r0, 8026aa0 <__pow5mult+0x40>
 8026a94:	4b1d      	ldr	r3, [pc, #116]	@ (8026b0c <__pow5mult+0xac>)
 8026a96:	481e      	ldr	r0, [pc, #120]	@ (8026b10 <__pow5mult+0xb0>)
 8026a98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8026a9c:	f7fc f942 	bl	8022d24 <__assert_func>
 8026aa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8026aa4:	6004      	str	r4, [r0, #0]
 8026aa6:	60c4      	str	r4, [r0, #12]
 8026aa8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8026aac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026ab0:	b94c      	cbnz	r4, 8026ac6 <__pow5mult+0x66>
 8026ab2:	f240 2171 	movw	r1, #625	@ 0x271
 8026ab6:	4638      	mov	r0, r7
 8026ab8:	f7ff ff12 	bl	80268e0 <__i2b>
 8026abc:	2300      	movs	r3, #0
 8026abe:	f8c8 0008 	str.w	r0, [r8, #8]
 8026ac2:	4604      	mov	r4, r0
 8026ac4:	6003      	str	r3, [r0, #0]
 8026ac6:	f04f 0900 	mov.w	r9, #0
 8026aca:	07eb      	lsls	r3, r5, #31
 8026acc:	d50a      	bpl.n	8026ae4 <__pow5mult+0x84>
 8026ace:	4631      	mov	r1, r6
 8026ad0:	4622      	mov	r2, r4
 8026ad2:	4638      	mov	r0, r7
 8026ad4:	f7ff ff1a 	bl	802690c <__multiply>
 8026ad8:	4631      	mov	r1, r6
 8026ada:	4680      	mov	r8, r0
 8026adc:	4638      	mov	r0, r7
 8026ade:	f7ff fe01 	bl	80266e4 <_Bfree>
 8026ae2:	4646      	mov	r6, r8
 8026ae4:	106d      	asrs	r5, r5, #1
 8026ae6:	d00b      	beq.n	8026b00 <__pow5mult+0xa0>
 8026ae8:	6820      	ldr	r0, [r4, #0]
 8026aea:	b938      	cbnz	r0, 8026afc <__pow5mult+0x9c>
 8026aec:	4622      	mov	r2, r4
 8026aee:	4621      	mov	r1, r4
 8026af0:	4638      	mov	r0, r7
 8026af2:	f7ff ff0b 	bl	802690c <__multiply>
 8026af6:	6020      	str	r0, [r4, #0]
 8026af8:	f8c0 9000 	str.w	r9, [r0]
 8026afc:	4604      	mov	r4, r0
 8026afe:	e7e4      	b.n	8026aca <__pow5mult+0x6a>
 8026b00:	4630      	mov	r0, r6
 8026b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026b06:	bf00      	nop
 8026b08:	08031b04 	.word	0x08031b04
 8026b0c:	0803195a 	.word	0x0803195a
 8026b10:	08031aa9 	.word	0x08031aa9

08026b14 <__lshift>:
 8026b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026b18:	460c      	mov	r4, r1
 8026b1a:	6849      	ldr	r1, [r1, #4]
 8026b1c:	6923      	ldr	r3, [r4, #16]
 8026b1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8026b22:	68a3      	ldr	r3, [r4, #8]
 8026b24:	4607      	mov	r7, r0
 8026b26:	4691      	mov	r9, r2
 8026b28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026b2c:	f108 0601 	add.w	r6, r8, #1
 8026b30:	42b3      	cmp	r3, r6
 8026b32:	db0b      	blt.n	8026b4c <__lshift+0x38>
 8026b34:	4638      	mov	r0, r7
 8026b36:	f7ff fd95 	bl	8026664 <_Balloc>
 8026b3a:	4605      	mov	r5, r0
 8026b3c:	b948      	cbnz	r0, 8026b52 <__lshift+0x3e>
 8026b3e:	4602      	mov	r2, r0
 8026b40:	4b28      	ldr	r3, [pc, #160]	@ (8026be4 <__lshift+0xd0>)
 8026b42:	4829      	ldr	r0, [pc, #164]	@ (8026be8 <__lshift+0xd4>)
 8026b44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8026b48:	f7fc f8ec 	bl	8022d24 <__assert_func>
 8026b4c:	3101      	adds	r1, #1
 8026b4e:	005b      	lsls	r3, r3, #1
 8026b50:	e7ee      	b.n	8026b30 <__lshift+0x1c>
 8026b52:	2300      	movs	r3, #0
 8026b54:	f100 0114 	add.w	r1, r0, #20
 8026b58:	f100 0210 	add.w	r2, r0, #16
 8026b5c:	4618      	mov	r0, r3
 8026b5e:	4553      	cmp	r3, sl
 8026b60:	db33      	blt.n	8026bca <__lshift+0xb6>
 8026b62:	6920      	ldr	r0, [r4, #16]
 8026b64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026b68:	f104 0314 	add.w	r3, r4, #20
 8026b6c:	f019 091f 	ands.w	r9, r9, #31
 8026b70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8026b74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8026b78:	d02b      	beq.n	8026bd2 <__lshift+0xbe>
 8026b7a:	f1c9 0e20 	rsb	lr, r9, #32
 8026b7e:	468a      	mov	sl, r1
 8026b80:	2200      	movs	r2, #0
 8026b82:	6818      	ldr	r0, [r3, #0]
 8026b84:	fa00 f009 	lsl.w	r0, r0, r9
 8026b88:	4310      	orrs	r0, r2
 8026b8a:	f84a 0b04 	str.w	r0, [sl], #4
 8026b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8026b92:	459c      	cmp	ip, r3
 8026b94:	fa22 f20e 	lsr.w	r2, r2, lr
 8026b98:	d8f3      	bhi.n	8026b82 <__lshift+0x6e>
 8026b9a:	ebac 0304 	sub.w	r3, ip, r4
 8026b9e:	3b15      	subs	r3, #21
 8026ba0:	f023 0303 	bic.w	r3, r3, #3
 8026ba4:	3304      	adds	r3, #4
 8026ba6:	f104 0015 	add.w	r0, r4, #21
 8026baa:	4584      	cmp	ip, r0
 8026bac:	bf38      	it	cc
 8026bae:	2304      	movcc	r3, #4
 8026bb0:	50ca      	str	r2, [r1, r3]
 8026bb2:	b10a      	cbz	r2, 8026bb8 <__lshift+0xa4>
 8026bb4:	f108 0602 	add.w	r6, r8, #2
 8026bb8:	3e01      	subs	r6, #1
 8026bba:	4638      	mov	r0, r7
 8026bbc:	612e      	str	r6, [r5, #16]
 8026bbe:	4621      	mov	r1, r4
 8026bc0:	f7ff fd90 	bl	80266e4 <_Bfree>
 8026bc4:	4628      	mov	r0, r5
 8026bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026bca:	f842 0f04 	str.w	r0, [r2, #4]!
 8026bce:	3301      	adds	r3, #1
 8026bd0:	e7c5      	b.n	8026b5e <__lshift+0x4a>
 8026bd2:	3904      	subs	r1, #4
 8026bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8026bd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8026bdc:	459c      	cmp	ip, r3
 8026bde:	d8f9      	bhi.n	8026bd4 <__lshift+0xc0>
 8026be0:	e7ea      	b.n	8026bb8 <__lshift+0xa4>
 8026be2:	bf00      	nop
 8026be4:	08031a38 	.word	0x08031a38
 8026be8:	08031aa9 	.word	0x08031aa9

08026bec <__mcmp>:
 8026bec:	690a      	ldr	r2, [r1, #16]
 8026bee:	4603      	mov	r3, r0
 8026bf0:	6900      	ldr	r0, [r0, #16]
 8026bf2:	1a80      	subs	r0, r0, r2
 8026bf4:	b530      	push	{r4, r5, lr}
 8026bf6:	d10e      	bne.n	8026c16 <__mcmp+0x2a>
 8026bf8:	3314      	adds	r3, #20
 8026bfa:	3114      	adds	r1, #20
 8026bfc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8026c00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8026c04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8026c08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8026c0c:	4295      	cmp	r5, r2
 8026c0e:	d003      	beq.n	8026c18 <__mcmp+0x2c>
 8026c10:	d205      	bcs.n	8026c1e <__mcmp+0x32>
 8026c12:	f04f 30ff 	mov.w	r0, #4294967295
 8026c16:	bd30      	pop	{r4, r5, pc}
 8026c18:	42a3      	cmp	r3, r4
 8026c1a:	d3f3      	bcc.n	8026c04 <__mcmp+0x18>
 8026c1c:	e7fb      	b.n	8026c16 <__mcmp+0x2a>
 8026c1e:	2001      	movs	r0, #1
 8026c20:	e7f9      	b.n	8026c16 <__mcmp+0x2a>
	...

08026c24 <__mdiff>:
 8026c24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c28:	4689      	mov	r9, r1
 8026c2a:	4606      	mov	r6, r0
 8026c2c:	4611      	mov	r1, r2
 8026c2e:	4648      	mov	r0, r9
 8026c30:	4614      	mov	r4, r2
 8026c32:	f7ff ffdb 	bl	8026bec <__mcmp>
 8026c36:	1e05      	subs	r5, r0, #0
 8026c38:	d112      	bne.n	8026c60 <__mdiff+0x3c>
 8026c3a:	4629      	mov	r1, r5
 8026c3c:	4630      	mov	r0, r6
 8026c3e:	f7ff fd11 	bl	8026664 <_Balloc>
 8026c42:	4602      	mov	r2, r0
 8026c44:	b928      	cbnz	r0, 8026c52 <__mdiff+0x2e>
 8026c46:	4b3f      	ldr	r3, [pc, #252]	@ (8026d44 <__mdiff+0x120>)
 8026c48:	f240 2137 	movw	r1, #567	@ 0x237
 8026c4c:	483e      	ldr	r0, [pc, #248]	@ (8026d48 <__mdiff+0x124>)
 8026c4e:	f7fc f869 	bl	8022d24 <__assert_func>
 8026c52:	2301      	movs	r3, #1
 8026c54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8026c58:	4610      	mov	r0, r2
 8026c5a:	b003      	add	sp, #12
 8026c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026c60:	bfbc      	itt	lt
 8026c62:	464b      	movlt	r3, r9
 8026c64:	46a1      	movlt	r9, r4
 8026c66:	4630      	mov	r0, r6
 8026c68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8026c6c:	bfba      	itte	lt
 8026c6e:	461c      	movlt	r4, r3
 8026c70:	2501      	movlt	r5, #1
 8026c72:	2500      	movge	r5, #0
 8026c74:	f7ff fcf6 	bl	8026664 <_Balloc>
 8026c78:	4602      	mov	r2, r0
 8026c7a:	b918      	cbnz	r0, 8026c84 <__mdiff+0x60>
 8026c7c:	4b31      	ldr	r3, [pc, #196]	@ (8026d44 <__mdiff+0x120>)
 8026c7e:	f240 2145 	movw	r1, #581	@ 0x245
 8026c82:	e7e3      	b.n	8026c4c <__mdiff+0x28>
 8026c84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8026c88:	6926      	ldr	r6, [r4, #16]
 8026c8a:	60c5      	str	r5, [r0, #12]
 8026c8c:	f109 0310 	add.w	r3, r9, #16
 8026c90:	f109 0514 	add.w	r5, r9, #20
 8026c94:	f104 0e14 	add.w	lr, r4, #20
 8026c98:	f100 0b14 	add.w	fp, r0, #20
 8026c9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8026ca0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8026ca4:	9301      	str	r3, [sp, #4]
 8026ca6:	46d9      	mov	r9, fp
 8026ca8:	f04f 0c00 	mov.w	ip, #0
 8026cac:	9b01      	ldr	r3, [sp, #4]
 8026cae:	f85e 0b04 	ldr.w	r0, [lr], #4
 8026cb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8026cb6:	9301      	str	r3, [sp, #4]
 8026cb8:	fa1f f38a 	uxth.w	r3, sl
 8026cbc:	4619      	mov	r1, r3
 8026cbe:	b283      	uxth	r3, r0
 8026cc0:	1acb      	subs	r3, r1, r3
 8026cc2:	0c00      	lsrs	r0, r0, #16
 8026cc4:	4463      	add	r3, ip
 8026cc6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8026cca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8026cce:	b29b      	uxth	r3, r3
 8026cd0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8026cd4:	4576      	cmp	r6, lr
 8026cd6:	f849 3b04 	str.w	r3, [r9], #4
 8026cda:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026cde:	d8e5      	bhi.n	8026cac <__mdiff+0x88>
 8026ce0:	1b33      	subs	r3, r6, r4
 8026ce2:	3b15      	subs	r3, #21
 8026ce4:	f023 0303 	bic.w	r3, r3, #3
 8026ce8:	3415      	adds	r4, #21
 8026cea:	3304      	adds	r3, #4
 8026cec:	42a6      	cmp	r6, r4
 8026cee:	bf38      	it	cc
 8026cf0:	2304      	movcc	r3, #4
 8026cf2:	441d      	add	r5, r3
 8026cf4:	445b      	add	r3, fp
 8026cf6:	461e      	mov	r6, r3
 8026cf8:	462c      	mov	r4, r5
 8026cfa:	4544      	cmp	r4, r8
 8026cfc:	d30e      	bcc.n	8026d1c <__mdiff+0xf8>
 8026cfe:	f108 0103 	add.w	r1, r8, #3
 8026d02:	1b49      	subs	r1, r1, r5
 8026d04:	f021 0103 	bic.w	r1, r1, #3
 8026d08:	3d03      	subs	r5, #3
 8026d0a:	45a8      	cmp	r8, r5
 8026d0c:	bf38      	it	cc
 8026d0e:	2100      	movcc	r1, #0
 8026d10:	440b      	add	r3, r1
 8026d12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8026d16:	b191      	cbz	r1, 8026d3e <__mdiff+0x11a>
 8026d18:	6117      	str	r7, [r2, #16]
 8026d1a:	e79d      	b.n	8026c58 <__mdiff+0x34>
 8026d1c:	f854 1b04 	ldr.w	r1, [r4], #4
 8026d20:	46e6      	mov	lr, ip
 8026d22:	0c08      	lsrs	r0, r1, #16
 8026d24:	fa1c fc81 	uxtah	ip, ip, r1
 8026d28:	4471      	add	r1, lr
 8026d2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8026d2e:	b289      	uxth	r1, r1
 8026d30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8026d34:	f846 1b04 	str.w	r1, [r6], #4
 8026d38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026d3c:	e7dd      	b.n	8026cfa <__mdiff+0xd6>
 8026d3e:	3f01      	subs	r7, #1
 8026d40:	e7e7      	b.n	8026d12 <__mdiff+0xee>
 8026d42:	bf00      	nop
 8026d44:	08031a38 	.word	0x08031a38
 8026d48:	08031aa9 	.word	0x08031aa9

08026d4c <__ulp>:
 8026d4c:	b082      	sub	sp, #8
 8026d4e:	ed8d 0b00 	vstr	d0, [sp]
 8026d52:	9a01      	ldr	r2, [sp, #4]
 8026d54:	4b0f      	ldr	r3, [pc, #60]	@ (8026d94 <__ulp+0x48>)
 8026d56:	4013      	ands	r3, r2
 8026d58:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8026d5c:	2b00      	cmp	r3, #0
 8026d5e:	dc08      	bgt.n	8026d72 <__ulp+0x26>
 8026d60:	425b      	negs	r3, r3
 8026d62:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8026d66:	ea4f 5223 	mov.w	r2, r3, asr #20
 8026d6a:	da04      	bge.n	8026d76 <__ulp+0x2a>
 8026d6c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8026d70:	4113      	asrs	r3, r2
 8026d72:	2200      	movs	r2, #0
 8026d74:	e008      	b.n	8026d88 <__ulp+0x3c>
 8026d76:	f1a2 0314 	sub.w	r3, r2, #20
 8026d7a:	2b1e      	cmp	r3, #30
 8026d7c:	bfda      	itte	le
 8026d7e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8026d82:	40da      	lsrle	r2, r3
 8026d84:	2201      	movgt	r2, #1
 8026d86:	2300      	movs	r3, #0
 8026d88:	4619      	mov	r1, r3
 8026d8a:	4610      	mov	r0, r2
 8026d8c:	ec41 0b10 	vmov	d0, r0, r1
 8026d90:	b002      	add	sp, #8
 8026d92:	4770      	bx	lr
 8026d94:	7ff00000 	.word	0x7ff00000

08026d98 <__b2d>:
 8026d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026d9c:	6906      	ldr	r6, [r0, #16]
 8026d9e:	f100 0814 	add.w	r8, r0, #20
 8026da2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8026da6:	1f37      	subs	r7, r6, #4
 8026da8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8026dac:	4610      	mov	r0, r2
 8026dae:	f7ff fd4b 	bl	8026848 <__hi0bits>
 8026db2:	f1c0 0320 	rsb	r3, r0, #32
 8026db6:	280a      	cmp	r0, #10
 8026db8:	600b      	str	r3, [r1, #0]
 8026dba:	491b      	ldr	r1, [pc, #108]	@ (8026e28 <__b2d+0x90>)
 8026dbc:	dc15      	bgt.n	8026dea <__b2d+0x52>
 8026dbe:	f1c0 0c0b 	rsb	ip, r0, #11
 8026dc2:	fa22 f30c 	lsr.w	r3, r2, ip
 8026dc6:	45b8      	cmp	r8, r7
 8026dc8:	ea43 0501 	orr.w	r5, r3, r1
 8026dcc:	bf34      	ite	cc
 8026dce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8026dd2:	2300      	movcs	r3, #0
 8026dd4:	3015      	adds	r0, #21
 8026dd6:	fa02 f000 	lsl.w	r0, r2, r0
 8026dda:	fa23 f30c 	lsr.w	r3, r3, ip
 8026dde:	4303      	orrs	r3, r0
 8026de0:	461c      	mov	r4, r3
 8026de2:	ec45 4b10 	vmov	d0, r4, r5
 8026de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026dea:	45b8      	cmp	r8, r7
 8026dec:	bf3a      	itte	cc
 8026dee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8026df2:	f1a6 0708 	subcc.w	r7, r6, #8
 8026df6:	2300      	movcs	r3, #0
 8026df8:	380b      	subs	r0, #11
 8026dfa:	d012      	beq.n	8026e22 <__b2d+0x8a>
 8026dfc:	f1c0 0120 	rsb	r1, r0, #32
 8026e00:	fa23 f401 	lsr.w	r4, r3, r1
 8026e04:	4082      	lsls	r2, r0
 8026e06:	4322      	orrs	r2, r4
 8026e08:	4547      	cmp	r7, r8
 8026e0a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8026e0e:	bf8c      	ite	hi
 8026e10:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8026e14:	2200      	movls	r2, #0
 8026e16:	4083      	lsls	r3, r0
 8026e18:	40ca      	lsrs	r2, r1
 8026e1a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8026e1e:	4313      	orrs	r3, r2
 8026e20:	e7de      	b.n	8026de0 <__b2d+0x48>
 8026e22:	ea42 0501 	orr.w	r5, r2, r1
 8026e26:	e7db      	b.n	8026de0 <__b2d+0x48>
 8026e28:	3ff00000 	.word	0x3ff00000

08026e2c <__d2b>:
 8026e2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026e30:	460f      	mov	r7, r1
 8026e32:	2101      	movs	r1, #1
 8026e34:	ec59 8b10 	vmov	r8, r9, d0
 8026e38:	4616      	mov	r6, r2
 8026e3a:	f7ff fc13 	bl	8026664 <_Balloc>
 8026e3e:	4604      	mov	r4, r0
 8026e40:	b930      	cbnz	r0, 8026e50 <__d2b+0x24>
 8026e42:	4602      	mov	r2, r0
 8026e44:	4b23      	ldr	r3, [pc, #140]	@ (8026ed4 <__d2b+0xa8>)
 8026e46:	4824      	ldr	r0, [pc, #144]	@ (8026ed8 <__d2b+0xac>)
 8026e48:	f240 310f 	movw	r1, #783	@ 0x30f
 8026e4c:	f7fb ff6a 	bl	8022d24 <__assert_func>
 8026e50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8026e54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8026e58:	b10d      	cbz	r5, 8026e5e <__d2b+0x32>
 8026e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8026e5e:	9301      	str	r3, [sp, #4]
 8026e60:	f1b8 0300 	subs.w	r3, r8, #0
 8026e64:	d023      	beq.n	8026eae <__d2b+0x82>
 8026e66:	4668      	mov	r0, sp
 8026e68:	9300      	str	r3, [sp, #0]
 8026e6a:	f7ff fd0c 	bl	8026886 <__lo0bits>
 8026e6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8026e72:	b1d0      	cbz	r0, 8026eaa <__d2b+0x7e>
 8026e74:	f1c0 0320 	rsb	r3, r0, #32
 8026e78:	fa02 f303 	lsl.w	r3, r2, r3
 8026e7c:	430b      	orrs	r3, r1
 8026e7e:	40c2      	lsrs	r2, r0
 8026e80:	6163      	str	r3, [r4, #20]
 8026e82:	9201      	str	r2, [sp, #4]
 8026e84:	9b01      	ldr	r3, [sp, #4]
 8026e86:	61a3      	str	r3, [r4, #24]
 8026e88:	2b00      	cmp	r3, #0
 8026e8a:	bf0c      	ite	eq
 8026e8c:	2201      	moveq	r2, #1
 8026e8e:	2202      	movne	r2, #2
 8026e90:	6122      	str	r2, [r4, #16]
 8026e92:	b1a5      	cbz	r5, 8026ebe <__d2b+0x92>
 8026e94:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8026e98:	4405      	add	r5, r0
 8026e9a:	603d      	str	r5, [r7, #0]
 8026e9c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8026ea0:	6030      	str	r0, [r6, #0]
 8026ea2:	4620      	mov	r0, r4
 8026ea4:	b003      	add	sp, #12
 8026ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026eaa:	6161      	str	r1, [r4, #20]
 8026eac:	e7ea      	b.n	8026e84 <__d2b+0x58>
 8026eae:	a801      	add	r0, sp, #4
 8026eb0:	f7ff fce9 	bl	8026886 <__lo0bits>
 8026eb4:	9b01      	ldr	r3, [sp, #4]
 8026eb6:	6163      	str	r3, [r4, #20]
 8026eb8:	3020      	adds	r0, #32
 8026eba:	2201      	movs	r2, #1
 8026ebc:	e7e8      	b.n	8026e90 <__d2b+0x64>
 8026ebe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8026ec2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8026ec6:	6038      	str	r0, [r7, #0]
 8026ec8:	6918      	ldr	r0, [r3, #16]
 8026eca:	f7ff fcbd 	bl	8026848 <__hi0bits>
 8026ece:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8026ed2:	e7e5      	b.n	8026ea0 <__d2b+0x74>
 8026ed4:	08031a38 	.word	0x08031a38
 8026ed8:	08031aa9 	.word	0x08031aa9

08026edc <__ratio>:
 8026edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ee0:	b085      	sub	sp, #20
 8026ee2:	e9cd 1000 	strd	r1, r0, [sp]
 8026ee6:	a902      	add	r1, sp, #8
 8026ee8:	f7ff ff56 	bl	8026d98 <__b2d>
 8026eec:	9800      	ldr	r0, [sp, #0]
 8026eee:	a903      	add	r1, sp, #12
 8026ef0:	ec55 4b10 	vmov	r4, r5, d0
 8026ef4:	f7ff ff50 	bl	8026d98 <__b2d>
 8026ef8:	9b01      	ldr	r3, [sp, #4]
 8026efa:	6919      	ldr	r1, [r3, #16]
 8026efc:	9b00      	ldr	r3, [sp, #0]
 8026efe:	691b      	ldr	r3, [r3, #16]
 8026f00:	1ac9      	subs	r1, r1, r3
 8026f02:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8026f06:	1a9b      	subs	r3, r3, r2
 8026f08:	ec5b ab10 	vmov	sl, fp, d0
 8026f0c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8026f10:	2b00      	cmp	r3, #0
 8026f12:	bfce      	itee	gt
 8026f14:	462a      	movgt	r2, r5
 8026f16:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8026f1a:	465a      	movle	r2, fp
 8026f1c:	462f      	mov	r7, r5
 8026f1e:	46d9      	mov	r9, fp
 8026f20:	bfcc      	ite	gt
 8026f22:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8026f26:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8026f2a:	464b      	mov	r3, r9
 8026f2c:	4652      	mov	r2, sl
 8026f2e:	4620      	mov	r0, r4
 8026f30:	4639      	mov	r1, r7
 8026f32:	f7e1 fbd3 	bl	80086dc <__aeabi_ddiv>
 8026f36:	ec41 0b10 	vmov	d0, r0, r1
 8026f3a:	b005      	add	sp, #20
 8026f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026f40 <__copybits>:
 8026f40:	3901      	subs	r1, #1
 8026f42:	b570      	push	{r4, r5, r6, lr}
 8026f44:	1149      	asrs	r1, r1, #5
 8026f46:	6914      	ldr	r4, [r2, #16]
 8026f48:	3101      	adds	r1, #1
 8026f4a:	f102 0314 	add.w	r3, r2, #20
 8026f4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8026f52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8026f56:	1f05      	subs	r5, r0, #4
 8026f58:	42a3      	cmp	r3, r4
 8026f5a:	d30c      	bcc.n	8026f76 <__copybits+0x36>
 8026f5c:	1aa3      	subs	r3, r4, r2
 8026f5e:	3b11      	subs	r3, #17
 8026f60:	f023 0303 	bic.w	r3, r3, #3
 8026f64:	3211      	adds	r2, #17
 8026f66:	42a2      	cmp	r2, r4
 8026f68:	bf88      	it	hi
 8026f6a:	2300      	movhi	r3, #0
 8026f6c:	4418      	add	r0, r3
 8026f6e:	2300      	movs	r3, #0
 8026f70:	4288      	cmp	r0, r1
 8026f72:	d305      	bcc.n	8026f80 <__copybits+0x40>
 8026f74:	bd70      	pop	{r4, r5, r6, pc}
 8026f76:	f853 6b04 	ldr.w	r6, [r3], #4
 8026f7a:	f845 6f04 	str.w	r6, [r5, #4]!
 8026f7e:	e7eb      	b.n	8026f58 <__copybits+0x18>
 8026f80:	f840 3b04 	str.w	r3, [r0], #4
 8026f84:	e7f4      	b.n	8026f70 <__copybits+0x30>

08026f86 <__any_on>:
 8026f86:	f100 0214 	add.w	r2, r0, #20
 8026f8a:	6900      	ldr	r0, [r0, #16]
 8026f8c:	114b      	asrs	r3, r1, #5
 8026f8e:	4298      	cmp	r0, r3
 8026f90:	b510      	push	{r4, lr}
 8026f92:	db11      	blt.n	8026fb8 <__any_on+0x32>
 8026f94:	dd0a      	ble.n	8026fac <__any_on+0x26>
 8026f96:	f011 011f 	ands.w	r1, r1, #31
 8026f9a:	d007      	beq.n	8026fac <__any_on+0x26>
 8026f9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8026fa0:	fa24 f001 	lsr.w	r0, r4, r1
 8026fa4:	fa00 f101 	lsl.w	r1, r0, r1
 8026fa8:	428c      	cmp	r4, r1
 8026faa:	d10b      	bne.n	8026fc4 <__any_on+0x3e>
 8026fac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026fb0:	4293      	cmp	r3, r2
 8026fb2:	d803      	bhi.n	8026fbc <__any_on+0x36>
 8026fb4:	2000      	movs	r0, #0
 8026fb6:	bd10      	pop	{r4, pc}
 8026fb8:	4603      	mov	r3, r0
 8026fba:	e7f7      	b.n	8026fac <__any_on+0x26>
 8026fbc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8026fc0:	2900      	cmp	r1, #0
 8026fc2:	d0f5      	beq.n	8026fb0 <__any_on+0x2a>
 8026fc4:	2001      	movs	r0, #1
 8026fc6:	e7f6      	b.n	8026fb6 <__any_on+0x30>

08026fc8 <_malloc_usable_size_r>:
 8026fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026fcc:	1f18      	subs	r0, r3, #4
 8026fce:	2b00      	cmp	r3, #0
 8026fd0:	bfbc      	itt	lt
 8026fd2:	580b      	ldrlt	r3, [r1, r0]
 8026fd4:	18c0      	addlt	r0, r0, r3
 8026fd6:	4770      	bx	lr

08026fd8 <__ascii_wctomb>:
 8026fd8:	4603      	mov	r3, r0
 8026fda:	4608      	mov	r0, r1
 8026fdc:	b141      	cbz	r1, 8026ff0 <__ascii_wctomb+0x18>
 8026fde:	2aff      	cmp	r2, #255	@ 0xff
 8026fe0:	d904      	bls.n	8026fec <__ascii_wctomb+0x14>
 8026fe2:	228a      	movs	r2, #138	@ 0x8a
 8026fe4:	601a      	str	r2, [r3, #0]
 8026fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8026fea:	4770      	bx	lr
 8026fec:	700a      	strb	r2, [r1, #0]
 8026fee:	2001      	movs	r0, #1
 8026ff0:	4770      	bx	lr

08026ff2 <__ssputs_r>:
 8026ff2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026ff6:	688e      	ldr	r6, [r1, #8]
 8026ff8:	461f      	mov	r7, r3
 8026ffa:	42be      	cmp	r6, r7
 8026ffc:	680b      	ldr	r3, [r1, #0]
 8026ffe:	4682      	mov	sl, r0
 8027000:	460c      	mov	r4, r1
 8027002:	4690      	mov	r8, r2
 8027004:	d82d      	bhi.n	8027062 <__ssputs_r+0x70>
 8027006:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802700a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802700e:	d026      	beq.n	802705e <__ssputs_r+0x6c>
 8027010:	6965      	ldr	r5, [r4, #20]
 8027012:	6909      	ldr	r1, [r1, #16]
 8027014:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8027018:	eba3 0901 	sub.w	r9, r3, r1
 802701c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8027020:	1c7b      	adds	r3, r7, #1
 8027022:	444b      	add	r3, r9
 8027024:	106d      	asrs	r5, r5, #1
 8027026:	429d      	cmp	r5, r3
 8027028:	bf38      	it	cc
 802702a:	461d      	movcc	r5, r3
 802702c:	0553      	lsls	r3, r2, #21
 802702e:	d527      	bpl.n	8027080 <__ssputs_r+0x8e>
 8027030:	4629      	mov	r1, r5
 8027032:	f7fb fee3 	bl	8022dfc <_malloc_r>
 8027036:	4606      	mov	r6, r0
 8027038:	b360      	cbz	r0, 8027094 <__ssputs_r+0xa2>
 802703a:	6921      	ldr	r1, [r4, #16]
 802703c:	464a      	mov	r2, r9
 802703e:	f7fe f8d2 	bl	80251e6 <memcpy>
 8027042:	89a3      	ldrh	r3, [r4, #12]
 8027044:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8027048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802704c:	81a3      	strh	r3, [r4, #12]
 802704e:	6126      	str	r6, [r4, #16]
 8027050:	6165      	str	r5, [r4, #20]
 8027052:	444e      	add	r6, r9
 8027054:	eba5 0509 	sub.w	r5, r5, r9
 8027058:	6026      	str	r6, [r4, #0]
 802705a:	60a5      	str	r5, [r4, #8]
 802705c:	463e      	mov	r6, r7
 802705e:	42be      	cmp	r6, r7
 8027060:	d900      	bls.n	8027064 <__ssputs_r+0x72>
 8027062:	463e      	mov	r6, r7
 8027064:	6820      	ldr	r0, [r4, #0]
 8027066:	4632      	mov	r2, r6
 8027068:	4641      	mov	r1, r8
 802706a:	f7fd ff42 	bl	8024ef2 <memmove>
 802706e:	68a3      	ldr	r3, [r4, #8]
 8027070:	1b9b      	subs	r3, r3, r6
 8027072:	60a3      	str	r3, [r4, #8]
 8027074:	6823      	ldr	r3, [r4, #0]
 8027076:	4433      	add	r3, r6
 8027078:	6023      	str	r3, [r4, #0]
 802707a:	2000      	movs	r0, #0
 802707c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027080:	462a      	mov	r2, r5
 8027082:	f7fb ff51 	bl	8022f28 <_realloc_r>
 8027086:	4606      	mov	r6, r0
 8027088:	2800      	cmp	r0, #0
 802708a:	d1e0      	bne.n	802704e <__ssputs_r+0x5c>
 802708c:	6921      	ldr	r1, [r4, #16]
 802708e:	4650      	mov	r0, sl
 8027090:	f7fe ff1e 	bl	8025ed0 <_free_r>
 8027094:	230c      	movs	r3, #12
 8027096:	f8ca 3000 	str.w	r3, [sl]
 802709a:	89a3      	ldrh	r3, [r4, #12]
 802709c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80270a0:	81a3      	strh	r3, [r4, #12]
 80270a2:	f04f 30ff 	mov.w	r0, #4294967295
 80270a6:	e7e9      	b.n	802707c <__ssputs_r+0x8a>

080270a8 <_svfiprintf_r>:
 80270a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80270ac:	4698      	mov	r8, r3
 80270ae:	898b      	ldrh	r3, [r1, #12]
 80270b0:	061b      	lsls	r3, r3, #24
 80270b2:	b09d      	sub	sp, #116	@ 0x74
 80270b4:	4607      	mov	r7, r0
 80270b6:	460d      	mov	r5, r1
 80270b8:	4614      	mov	r4, r2
 80270ba:	d510      	bpl.n	80270de <_svfiprintf_r+0x36>
 80270bc:	690b      	ldr	r3, [r1, #16]
 80270be:	b973      	cbnz	r3, 80270de <_svfiprintf_r+0x36>
 80270c0:	2140      	movs	r1, #64	@ 0x40
 80270c2:	f7fb fe9b 	bl	8022dfc <_malloc_r>
 80270c6:	6028      	str	r0, [r5, #0]
 80270c8:	6128      	str	r0, [r5, #16]
 80270ca:	b930      	cbnz	r0, 80270da <_svfiprintf_r+0x32>
 80270cc:	230c      	movs	r3, #12
 80270ce:	603b      	str	r3, [r7, #0]
 80270d0:	f04f 30ff 	mov.w	r0, #4294967295
 80270d4:	b01d      	add	sp, #116	@ 0x74
 80270d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80270da:	2340      	movs	r3, #64	@ 0x40
 80270dc:	616b      	str	r3, [r5, #20]
 80270de:	2300      	movs	r3, #0
 80270e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80270e2:	2320      	movs	r3, #32
 80270e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80270e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80270ec:	2330      	movs	r3, #48	@ 0x30
 80270ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 802728c <_svfiprintf_r+0x1e4>
 80270f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80270f6:	f04f 0901 	mov.w	r9, #1
 80270fa:	4623      	mov	r3, r4
 80270fc:	469a      	mov	sl, r3
 80270fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027102:	b10a      	cbz	r2, 8027108 <_svfiprintf_r+0x60>
 8027104:	2a25      	cmp	r2, #37	@ 0x25
 8027106:	d1f9      	bne.n	80270fc <_svfiprintf_r+0x54>
 8027108:	ebba 0b04 	subs.w	fp, sl, r4
 802710c:	d00b      	beq.n	8027126 <_svfiprintf_r+0x7e>
 802710e:	465b      	mov	r3, fp
 8027110:	4622      	mov	r2, r4
 8027112:	4629      	mov	r1, r5
 8027114:	4638      	mov	r0, r7
 8027116:	f7ff ff6c 	bl	8026ff2 <__ssputs_r>
 802711a:	3001      	adds	r0, #1
 802711c:	f000 80a7 	beq.w	802726e <_svfiprintf_r+0x1c6>
 8027120:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027122:	445a      	add	r2, fp
 8027124:	9209      	str	r2, [sp, #36]	@ 0x24
 8027126:	f89a 3000 	ldrb.w	r3, [sl]
 802712a:	2b00      	cmp	r3, #0
 802712c:	f000 809f 	beq.w	802726e <_svfiprintf_r+0x1c6>
 8027130:	2300      	movs	r3, #0
 8027132:	f04f 32ff 	mov.w	r2, #4294967295
 8027136:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802713a:	f10a 0a01 	add.w	sl, sl, #1
 802713e:	9304      	str	r3, [sp, #16]
 8027140:	9307      	str	r3, [sp, #28]
 8027142:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8027146:	931a      	str	r3, [sp, #104]	@ 0x68
 8027148:	4654      	mov	r4, sl
 802714a:	2205      	movs	r2, #5
 802714c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027150:	484e      	ldr	r0, [pc, #312]	@ (802728c <_svfiprintf_r+0x1e4>)
 8027152:	f7e0 ff85 	bl	8008060 <memchr>
 8027156:	9a04      	ldr	r2, [sp, #16]
 8027158:	b9d8      	cbnz	r0, 8027192 <_svfiprintf_r+0xea>
 802715a:	06d0      	lsls	r0, r2, #27
 802715c:	bf44      	itt	mi
 802715e:	2320      	movmi	r3, #32
 8027160:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027164:	0711      	lsls	r1, r2, #28
 8027166:	bf44      	itt	mi
 8027168:	232b      	movmi	r3, #43	@ 0x2b
 802716a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802716e:	f89a 3000 	ldrb.w	r3, [sl]
 8027172:	2b2a      	cmp	r3, #42	@ 0x2a
 8027174:	d015      	beq.n	80271a2 <_svfiprintf_r+0xfa>
 8027176:	9a07      	ldr	r2, [sp, #28]
 8027178:	4654      	mov	r4, sl
 802717a:	2000      	movs	r0, #0
 802717c:	f04f 0c0a 	mov.w	ip, #10
 8027180:	4621      	mov	r1, r4
 8027182:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027186:	3b30      	subs	r3, #48	@ 0x30
 8027188:	2b09      	cmp	r3, #9
 802718a:	d94b      	bls.n	8027224 <_svfiprintf_r+0x17c>
 802718c:	b1b0      	cbz	r0, 80271bc <_svfiprintf_r+0x114>
 802718e:	9207      	str	r2, [sp, #28]
 8027190:	e014      	b.n	80271bc <_svfiprintf_r+0x114>
 8027192:	eba0 0308 	sub.w	r3, r0, r8
 8027196:	fa09 f303 	lsl.w	r3, r9, r3
 802719a:	4313      	orrs	r3, r2
 802719c:	9304      	str	r3, [sp, #16]
 802719e:	46a2      	mov	sl, r4
 80271a0:	e7d2      	b.n	8027148 <_svfiprintf_r+0xa0>
 80271a2:	9b03      	ldr	r3, [sp, #12]
 80271a4:	1d19      	adds	r1, r3, #4
 80271a6:	681b      	ldr	r3, [r3, #0]
 80271a8:	9103      	str	r1, [sp, #12]
 80271aa:	2b00      	cmp	r3, #0
 80271ac:	bfbb      	ittet	lt
 80271ae:	425b      	neglt	r3, r3
 80271b0:	f042 0202 	orrlt.w	r2, r2, #2
 80271b4:	9307      	strge	r3, [sp, #28]
 80271b6:	9307      	strlt	r3, [sp, #28]
 80271b8:	bfb8      	it	lt
 80271ba:	9204      	strlt	r2, [sp, #16]
 80271bc:	7823      	ldrb	r3, [r4, #0]
 80271be:	2b2e      	cmp	r3, #46	@ 0x2e
 80271c0:	d10a      	bne.n	80271d8 <_svfiprintf_r+0x130>
 80271c2:	7863      	ldrb	r3, [r4, #1]
 80271c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80271c6:	d132      	bne.n	802722e <_svfiprintf_r+0x186>
 80271c8:	9b03      	ldr	r3, [sp, #12]
 80271ca:	1d1a      	adds	r2, r3, #4
 80271cc:	681b      	ldr	r3, [r3, #0]
 80271ce:	9203      	str	r2, [sp, #12]
 80271d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80271d4:	3402      	adds	r4, #2
 80271d6:	9305      	str	r3, [sp, #20]
 80271d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 802729c <_svfiprintf_r+0x1f4>
 80271dc:	7821      	ldrb	r1, [r4, #0]
 80271de:	2203      	movs	r2, #3
 80271e0:	4650      	mov	r0, sl
 80271e2:	f7e0 ff3d 	bl	8008060 <memchr>
 80271e6:	b138      	cbz	r0, 80271f8 <_svfiprintf_r+0x150>
 80271e8:	9b04      	ldr	r3, [sp, #16]
 80271ea:	eba0 000a 	sub.w	r0, r0, sl
 80271ee:	2240      	movs	r2, #64	@ 0x40
 80271f0:	4082      	lsls	r2, r0
 80271f2:	4313      	orrs	r3, r2
 80271f4:	3401      	adds	r4, #1
 80271f6:	9304      	str	r3, [sp, #16]
 80271f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80271fc:	4824      	ldr	r0, [pc, #144]	@ (8027290 <_svfiprintf_r+0x1e8>)
 80271fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8027202:	2206      	movs	r2, #6
 8027204:	f7e0 ff2c 	bl	8008060 <memchr>
 8027208:	2800      	cmp	r0, #0
 802720a:	d036      	beq.n	802727a <_svfiprintf_r+0x1d2>
 802720c:	4b21      	ldr	r3, [pc, #132]	@ (8027294 <_svfiprintf_r+0x1ec>)
 802720e:	bb1b      	cbnz	r3, 8027258 <_svfiprintf_r+0x1b0>
 8027210:	9b03      	ldr	r3, [sp, #12]
 8027212:	3307      	adds	r3, #7
 8027214:	f023 0307 	bic.w	r3, r3, #7
 8027218:	3308      	adds	r3, #8
 802721a:	9303      	str	r3, [sp, #12]
 802721c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802721e:	4433      	add	r3, r6
 8027220:	9309      	str	r3, [sp, #36]	@ 0x24
 8027222:	e76a      	b.n	80270fa <_svfiprintf_r+0x52>
 8027224:	fb0c 3202 	mla	r2, ip, r2, r3
 8027228:	460c      	mov	r4, r1
 802722a:	2001      	movs	r0, #1
 802722c:	e7a8      	b.n	8027180 <_svfiprintf_r+0xd8>
 802722e:	2300      	movs	r3, #0
 8027230:	3401      	adds	r4, #1
 8027232:	9305      	str	r3, [sp, #20]
 8027234:	4619      	mov	r1, r3
 8027236:	f04f 0c0a 	mov.w	ip, #10
 802723a:	4620      	mov	r0, r4
 802723c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027240:	3a30      	subs	r2, #48	@ 0x30
 8027242:	2a09      	cmp	r2, #9
 8027244:	d903      	bls.n	802724e <_svfiprintf_r+0x1a6>
 8027246:	2b00      	cmp	r3, #0
 8027248:	d0c6      	beq.n	80271d8 <_svfiprintf_r+0x130>
 802724a:	9105      	str	r1, [sp, #20]
 802724c:	e7c4      	b.n	80271d8 <_svfiprintf_r+0x130>
 802724e:	fb0c 2101 	mla	r1, ip, r1, r2
 8027252:	4604      	mov	r4, r0
 8027254:	2301      	movs	r3, #1
 8027256:	e7f0      	b.n	802723a <_svfiprintf_r+0x192>
 8027258:	ab03      	add	r3, sp, #12
 802725a:	9300      	str	r3, [sp, #0]
 802725c:	462a      	mov	r2, r5
 802725e:	4b0e      	ldr	r3, [pc, #56]	@ (8027298 <_svfiprintf_r+0x1f0>)
 8027260:	a904      	add	r1, sp, #16
 8027262:	4638      	mov	r0, r7
 8027264:	f7fc ff32 	bl	80240cc <_printf_float>
 8027268:	1c42      	adds	r2, r0, #1
 802726a:	4606      	mov	r6, r0
 802726c:	d1d6      	bne.n	802721c <_svfiprintf_r+0x174>
 802726e:	89ab      	ldrh	r3, [r5, #12]
 8027270:	065b      	lsls	r3, r3, #25
 8027272:	f53f af2d 	bmi.w	80270d0 <_svfiprintf_r+0x28>
 8027276:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027278:	e72c      	b.n	80270d4 <_svfiprintf_r+0x2c>
 802727a:	ab03      	add	r3, sp, #12
 802727c:	9300      	str	r3, [sp, #0]
 802727e:	462a      	mov	r2, r5
 8027280:	4b05      	ldr	r3, [pc, #20]	@ (8027298 <_svfiprintf_r+0x1f0>)
 8027282:	a904      	add	r1, sp, #16
 8027284:	4638      	mov	r0, r7
 8027286:	f7fd f9b9 	bl	80245fc <_printf_i>
 802728a:	e7ed      	b.n	8027268 <_svfiprintf_r+0x1c0>
 802728c:	08031c00 	.word	0x08031c00
 8027290:	08031c0a 	.word	0x08031c0a
 8027294:	080240cd 	.word	0x080240cd
 8027298:	08026ff3 	.word	0x08026ff3
 802729c:	08031c06 	.word	0x08031c06

080272a0 <__sfputc_r>:
 80272a0:	6893      	ldr	r3, [r2, #8]
 80272a2:	3b01      	subs	r3, #1
 80272a4:	2b00      	cmp	r3, #0
 80272a6:	b410      	push	{r4}
 80272a8:	6093      	str	r3, [r2, #8]
 80272aa:	da08      	bge.n	80272be <__sfputc_r+0x1e>
 80272ac:	6994      	ldr	r4, [r2, #24]
 80272ae:	42a3      	cmp	r3, r4
 80272b0:	db01      	blt.n	80272b6 <__sfputc_r+0x16>
 80272b2:	290a      	cmp	r1, #10
 80272b4:	d103      	bne.n	80272be <__sfputc_r+0x1e>
 80272b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80272ba:	f000 b9df 	b.w	802767c <__swbuf_r>
 80272be:	6813      	ldr	r3, [r2, #0]
 80272c0:	1c58      	adds	r0, r3, #1
 80272c2:	6010      	str	r0, [r2, #0]
 80272c4:	7019      	strb	r1, [r3, #0]
 80272c6:	4608      	mov	r0, r1
 80272c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80272cc:	4770      	bx	lr

080272ce <__sfputs_r>:
 80272ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80272d0:	4606      	mov	r6, r0
 80272d2:	460f      	mov	r7, r1
 80272d4:	4614      	mov	r4, r2
 80272d6:	18d5      	adds	r5, r2, r3
 80272d8:	42ac      	cmp	r4, r5
 80272da:	d101      	bne.n	80272e0 <__sfputs_r+0x12>
 80272dc:	2000      	movs	r0, #0
 80272de:	e007      	b.n	80272f0 <__sfputs_r+0x22>
 80272e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80272e4:	463a      	mov	r2, r7
 80272e6:	4630      	mov	r0, r6
 80272e8:	f7ff ffda 	bl	80272a0 <__sfputc_r>
 80272ec:	1c43      	adds	r3, r0, #1
 80272ee:	d1f3      	bne.n	80272d8 <__sfputs_r+0xa>
 80272f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080272f4 <_vfiprintf_r>:
 80272f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80272f8:	460d      	mov	r5, r1
 80272fa:	b09d      	sub	sp, #116	@ 0x74
 80272fc:	4614      	mov	r4, r2
 80272fe:	4698      	mov	r8, r3
 8027300:	4606      	mov	r6, r0
 8027302:	b118      	cbz	r0, 802730c <_vfiprintf_r+0x18>
 8027304:	6a03      	ldr	r3, [r0, #32]
 8027306:	b90b      	cbnz	r3, 802730c <_vfiprintf_r+0x18>
 8027308:	f7fd fd38 	bl	8024d7c <__sinit>
 802730c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802730e:	07d9      	lsls	r1, r3, #31
 8027310:	d405      	bmi.n	802731e <_vfiprintf_r+0x2a>
 8027312:	89ab      	ldrh	r3, [r5, #12]
 8027314:	059a      	lsls	r2, r3, #22
 8027316:	d402      	bmi.n	802731e <_vfiprintf_r+0x2a>
 8027318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802731a:	f7fd ff5a 	bl	80251d2 <__retarget_lock_acquire_recursive>
 802731e:	89ab      	ldrh	r3, [r5, #12]
 8027320:	071b      	lsls	r3, r3, #28
 8027322:	d501      	bpl.n	8027328 <_vfiprintf_r+0x34>
 8027324:	692b      	ldr	r3, [r5, #16]
 8027326:	b99b      	cbnz	r3, 8027350 <_vfiprintf_r+0x5c>
 8027328:	4629      	mov	r1, r5
 802732a:	4630      	mov	r0, r6
 802732c:	f000 f9e4 	bl	80276f8 <__swsetup_r>
 8027330:	b170      	cbz	r0, 8027350 <_vfiprintf_r+0x5c>
 8027332:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8027334:	07dc      	lsls	r4, r3, #31
 8027336:	d504      	bpl.n	8027342 <_vfiprintf_r+0x4e>
 8027338:	f04f 30ff 	mov.w	r0, #4294967295
 802733c:	b01d      	add	sp, #116	@ 0x74
 802733e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027342:	89ab      	ldrh	r3, [r5, #12]
 8027344:	0598      	lsls	r0, r3, #22
 8027346:	d4f7      	bmi.n	8027338 <_vfiprintf_r+0x44>
 8027348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802734a:	f7fd ff43 	bl	80251d4 <__retarget_lock_release_recursive>
 802734e:	e7f3      	b.n	8027338 <_vfiprintf_r+0x44>
 8027350:	2300      	movs	r3, #0
 8027352:	9309      	str	r3, [sp, #36]	@ 0x24
 8027354:	2320      	movs	r3, #32
 8027356:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802735a:	f8cd 800c 	str.w	r8, [sp, #12]
 802735e:	2330      	movs	r3, #48	@ 0x30
 8027360:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8027510 <_vfiprintf_r+0x21c>
 8027364:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8027368:	f04f 0901 	mov.w	r9, #1
 802736c:	4623      	mov	r3, r4
 802736e:	469a      	mov	sl, r3
 8027370:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027374:	b10a      	cbz	r2, 802737a <_vfiprintf_r+0x86>
 8027376:	2a25      	cmp	r2, #37	@ 0x25
 8027378:	d1f9      	bne.n	802736e <_vfiprintf_r+0x7a>
 802737a:	ebba 0b04 	subs.w	fp, sl, r4
 802737e:	d00b      	beq.n	8027398 <_vfiprintf_r+0xa4>
 8027380:	465b      	mov	r3, fp
 8027382:	4622      	mov	r2, r4
 8027384:	4629      	mov	r1, r5
 8027386:	4630      	mov	r0, r6
 8027388:	f7ff ffa1 	bl	80272ce <__sfputs_r>
 802738c:	3001      	adds	r0, #1
 802738e:	f000 80a7 	beq.w	80274e0 <_vfiprintf_r+0x1ec>
 8027392:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027394:	445a      	add	r2, fp
 8027396:	9209      	str	r2, [sp, #36]	@ 0x24
 8027398:	f89a 3000 	ldrb.w	r3, [sl]
 802739c:	2b00      	cmp	r3, #0
 802739e:	f000 809f 	beq.w	80274e0 <_vfiprintf_r+0x1ec>
 80273a2:	2300      	movs	r3, #0
 80273a4:	f04f 32ff 	mov.w	r2, #4294967295
 80273a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80273ac:	f10a 0a01 	add.w	sl, sl, #1
 80273b0:	9304      	str	r3, [sp, #16]
 80273b2:	9307      	str	r3, [sp, #28]
 80273b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80273b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80273ba:	4654      	mov	r4, sl
 80273bc:	2205      	movs	r2, #5
 80273be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80273c2:	4853      	ldr	r0, [pc, #332]	@ (8027510 <_vfiprintf_r+0x21c>)
 80273c4:	f7e0 fe4c 	bl	8008060 <memchr>
 80273c8:	9a04      	ldr	r2, [sp, #16]
 80273ca:	b9d8      	cbnz	r0, 8027404 <_vfiprintf_r+0x110>
 80273cc:	06d1      	lsls	r1, r2, #27
 80273ce:	bf44      	itt	mi
 80273d0:	2320      	movmi	r3, #32
 80273d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80273d6:	0713      	lsls	r3, r2, #28
 80273d8:	bf44      	itt	mi
 80273da:	232b      	movmi	r3, #43	@ 0x2b
 80273dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80273e0:	f89a 3000 	ldrb.w	r3, [sl]
 80273e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80273e6:	d015      	beq.n	8027414 <_vfiprintf_r+0x120>
 80273e8:	9a07      	ldr	r2, [sp, #28]
 80273ea:	4654      	mov	r4, sl
 80273ec:	2000      	movs	r0, #0
 80273ee:	f04f 0c0a 	mov.w	ip, #10
 80273f2:	4621      	mov	r1, r4
 80273f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80273f8:	3b30      	subs	r3, #48	@ 0x30
 80273fa:	2b09      	cmp	r3, #9
 80273fc:	d94b      	bls.n	8027496 <_vfiprintf_r+0x1a2>
 80273fe:	b1b0      	cbz	r0, 802742e <_vfiprintf_r+0x13a>
 8027400:	9207      	str	r2, [sp, #28]
 8027402:	e014      	b.n	802742e <_vfiprintf_r+0x13a>
 8027404:	eba0 0308 	sub.w	r3, r0, r8
 8027408:	fa09 f303 	lsl.w	r3, r9, r3
 802740c:	4313      	orrs	r3, r2
 802740e:	9304      	str	r3, [sp, #16]
 8027410:	46a2      	mov	sl, r4
 8027412:	e7d2      	b.n	80273ba <_vfiprintf_r+0xc6>
 8027414:	9b03      	ldr	r3, [sp, #12]
 8027416:	1d19      	adds	r1, r3, #4
 8027418:	681b      	ldr	r3, [r3, #0]
 802741a:	9103      	str	r1, [sp, #12]
 802741c:	2b00      	cmp	r3, #0
 802741e:	bfbb      	ittet	lt
 8027420:	425b      	neglt	r3, r3
 8027422:	f042 0202 	orrlt.w	r2, r2, #2
 8027426:	9307      	strge	r3, [sp, #28]
 8027428:	9307      	strlt	r3, [sp, #28]
 802742a:	bfb8      	it	lt
 802742c:	9204      	strlt	r2, [sp, #16]
 802742e:	7823      	ldrb	r3, [r4, #0]
 8027430:	2b2e      	cmp	r3, #46	@ 0x2e
 8027432:	d10a      	bne.n	802744a <_vfiprintf_r+0x156>
 8027434:	7863      	ldrb	r3, [r4, #1]
 8027436:	2b2a      	cmp	r3, #42	@ 0x2a
 8027438:	d132      	bne.n	80274a0 <_vfiprintf_r+0x1ac>
 802743a:	9b03      	ldr	r3, [sp, #12]
 802743c:	1d1a      	adds	r2, r3, #4
 802743e:	681b      	ldr	r3, [r3, #0]
 8027440:	9203      	str	r2, [sp, #12]
 8027442:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8027446:	3402      	adds	r4, #2
 8027448:	9305      	str	r3, [sp, #20]
 802744a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8027520 <_vfiprintf_r+0x22c>
 802744e:	7821      	ldrb	r1, [r4, #0]
 8027450:	2203      	movs	r2, #3
 8027452:	4650      	mov	r0, sl
 8027454:	f7e0 fe04 	bl	8008060 <memchr>
 8027458:	b138      	cbz	r0, 802746a <_vfiprintf_r+0x176>
 802745a:	9b04      	ldr	r3, [sp, #16]
 802745c:	eba0 000a 	sub.w	r0, r0, sl
 8027460:	2240      	movs	r2, #64	@ 0x40
 8027462:	4082      	lsls	r2, r0
 8027464:	4313      	orrs	r3, r2
 8027466:	3401      	adds	r4, #1
 8027468:	9304      	str	r3, [sp, #16]
 802746a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802746e:	4829      	ldr	r0, [pc, #164]	@ (8027514 <_vfiprintf_r+0x220>)
 8027470:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8027474:	2206      	movs	r2, #6
 8027476:	f7e0 fdf3 	bl	8008060 <memchr>
 802747a:	2800      	cmp	r0, #0
 802747c:	d03f      	beq.n	80274fe <_vfiprintf_r+0x20a>
 802747e:	4b26      	ldr	r3, [pc, #152]	@ (8027518 <_vfiprintf_r+0x224>)
 8027480:	bb1b      	cbnz	r3, 80274ca <_vfiprintf_r+0x1d6>
 8027482:	9b03      	ldr	r3, [sp, #12]
 8027484:	3307      	adds	r3, #7
 8027486:	f023 0307 	bic.w	r3, r3, #7
 802748a:	3308      	adds	r3, #8
 802748c:	9303      	str	r3, [sp, #12]
 802748e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027490:	443b      	add	r3, r7
 8027492:	9309      	str	r3, [sp, #36]	@ 0x24
 8027494:	e76a      	b.n	802736c <_vfiprintf_r+0x78>
 8027496:	fb0c 3202 	mla	r2, ip, r2, r3
 802749a:	460c      	mov	r4, r1
 802749c:	2001      	movs	r0, #1
 802749e:	e7a8      	b.n	80273f2 <_vfiprintf_r+0xfe>
 80274a0:	2300      	movs	r3, #0
 80274a2:	3401      	adds	r4, #1
 80274a4:	9305      	str	r3, [sp, #20]
 80274a6:	4619      	mov	r1, r3
 80274a8:	f04f 0c0a 	mov.w	ip, #10
 80274ac:	4620      	mov	r0, r4
 80274ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80274b2:	3a30      	subs	r2, #48	@ 0x30
 80274b4:	2a09      	cmp	r2, #9
 80274b6:	d903      	bls.n	80274c0 <_vfiprintf_r+0x1cc>
 80274b8:	2b00      	cmp	r3, #0
 80274ba:	d0c6      	beq.n	802744a <_vfiprintf_r+0x156>
 80274bc:	9105      	str	r1, [sp, #20]
 80274be:	e7c4      	b.n	802744a <_vfiprintf_r+0x156>
 80274c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80274c4:	4604      	mov	r4, r0
 80274c6:	2301      	movs	r3, #1
 80274c8:	e7f0      	b.n	80274ac <_vfiprintf_r+0x1b8>
 80274ca:	ab03      	add	r3, sp, #12
 80274cc:	9300      	str	r3, [sp, #0]
 80274ce:	462a      	mov	r2, r5
 80274d0:	4b12      	ldr	r3, [pc, #72]	@ (802751c <_vfiprintf_r+0x228>)
 80274d2:	a904      	add	r1, sp, #16
 80274d4:	4630      	mov	r0, r6
 80274d6:	f7fc fdf9 	bl	80240cc <_printf_float>
 80274da:	4607      	mov	r7, r0
 80274dc:	1c78      	adds	r0, r7, #1
 80274de:	d1d6      	bne.n	802748e <_vfiprintf_r+0x19a>
 80274e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80274e2:	07d9      	lsls	r1, r3, #31
 80274e4:	d405      	bmi.n	80274f2 <_vfiprintf_r+0x1fe>
 80274e6:	89ab      	ldrh	r3, [r5, #12]
 80274e8:	059a      	lsls	r2, r3, #22
 80274ea:	d402      	bmi.n	80274f2 <_vfiprintf_r+0x1fe>
 80274ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80274ee:	f7fd fe71 	bl	80251d4 <__retarget_lock_release_recursive>
 80274f2:	89ab      	ldrh	r3, [r5, #12]
 80274f4:	065b      	lsls	r3, r3, #25
 80274f6:	f53f af1f 	bmi.w	8027338 <_vfiprintf_r+0x44>
 80274fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80274fc:	e71e      	b.n	802733c <_vfiprintf_r+0x48>
 80274fe:	ab03      	add	r3, sp, #12
 8027500:	9300      	str	r3, [sp, #0]
 8027502:	462a      	mov	r2, r5
 8027504:	4b05      	ldr	r3, [pc, #20]	@ (802751c <_vfiprintf_r+0x228>)
 8027506:	a904      	add	r1, sp, #16
 8027508:	4630      	mov	r0, r6
 802750a:	f7fd f877 	bl	80245fc <_printf_i>
 802750e:	e7e4      	b.n	80274da <_vfiprintf_r+0x1e6>
 8027510:	08031c00 	.word	0x08031c00
 8027514:	08031c0a 	.word	0x08031c0a
 8027518:	080240cd 	.word	0x080240cd
 802751c:	080272cf 	.word	0x080272cf
 8027520:	08031c06 	.word	0x08031c06

08027524 <__sflush_r>:
 8027524:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8027528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802752c:	0716      	lsls	r6, r2, #28
 802752e:	4605      	mov	r5, r0
 8027530:	460c      	mov	r4, r1
 8027532:	d454      	bmi.n	80275de <__sflush_r+0xba>
 8027534:	684b      	ldr	r3, [r1, #4]
 8027536:	2b00      	cmp	r3, #0
 8027538:	dc02      	bgt.n	8027540 <__sflush_r+0x1c>
 802753a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802753c:	2b00      	cmp	r3, #0
 802753e:	dd48      	ble.n	80275d2 <__sflush_r+0xae>
 8027540:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8027542:	2e00      	cmp	r6, #0
 8027544:	d045      	beq.n	80275d2 <__sflush_r+0xae>
 8027546:	2300      	movs	r3, #0
 8027548:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802754c:	682f      	ldr	r7, [r5, #0]
 802754e:	6a21      	ldr	r1, [r4, #32]
 8027550:	602b      	str	r3, [r5, #0]
 8027552:	d030      	beq.n	80275b6 <__sflush_r+0x92>
 8027554:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8027556:	89a3      	ldrh	r3, [r4, #12]
 8027558:	0759      	lsls	r1, r3, #29
 802755a:	d505      	bpl.n	8027568 <__sflush_r+0x44>
 802755c:	6863      	ldr	r3, [r4, #4]
 802755e:	1ad2      	subs	r2, r2, r3
 8027560:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8027562:	b10b      	cbz	r3, 8027568 <__sflush_r+0x44>
 8027564:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8027566:	1ad2      	subs	r2, r2, r3
 8027568:	2300      	movs	r3, #0
 802756a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802756c:	6a21      	ldr	r1, [r4, #32]
 802756e:	4628      	mov	r0, r5
 8027570:	47b0      	blx	r6
 8027572:	1c43      	adds	r3, r0, #1
 8027574:	89a3      	ldrh	r3, [r4, #12]
 8027576:	d106      	bne.n	8027586 <__sflush_r+0x62>
 8027578:	6829      	ldr	r1, [r5, #0]
 802757a:	291d      	cmp	r1, #29
 802757c:	d82b      	bhi.n	80275d6 <__sflush_r+0xb2>
 802757e:	4a2a      	ldr	r2, [pc, #168]	@ (8027628 <__sflush_r+0x104>)
 8027580:	410a      	asrs	r2, r1
 8027582:	07d6      	lsls	r6, r2, #31
 8027584:	d427      	bmi.n	80275d6 <__sflush_r+0xb2>
 8027586:	2200      	movs	r2, #0
 8027588:	6062      	str	r2, [r4, #4]
 802758a:	04d9      	lsls	r1, r3, #19
 802758c:	6922      	ldr	r2, [r4, #16]
 802758e:	6022      	str	r2, [r4, #0]
 8027590:	d504      	bpl.n	802759c <__sflush_r+0x78>
 8027592:	1c42      	adds	r2, r0, #1
 8027594:	d101      	bne.n	802759a <__sflush_r+0x76>
 8027596:	682b      	ldr	r3, [r5, #0]
 8027598:	b903      	cbnz	r3, 802759c <__sflush_r+0x78>
 802759a:	6560      	str	r0, [r4, #84]	@ 0x54
 802759c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802759e:	602f      	str	r7, [r5, #0]
 80275a0:	b1b9      	cbz	r1, 80275d2 <__sflush_r+0xae>
 80275a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80275a6:	4299      	cmp	r1, r3
 80275a8:	d002      	beq.n	80275b0 <__sflush_r+0x8c>
 80275aa:	4628      	mov	r0, r5
 80275ac:	f7fe fc90 	bl	8025ed0 <_free_r>
 80275b0:	2300      	movs	r3, #0
 80275b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80275b4:	e00d      	b.n	80275d2 <__sflush_r+0xae>
 80275b6:	2301      	movs	r3, #1
 80275b8:	4628      	mov	r0, r5
 80275ba:	47b0      	blx	r6
 80275bc:	4602      	mov	r2, r0
 80275be:	1c50      	adds	r0, r2, #1
 80275c0:	d1c9      	bne.n	8027556 <__sflush_r+0x32>
 80275c2:	682b      	ldr	r3, [r5, #0]
 80275c4:	2b00      	cmp	r3, #0
 80275c6:	d0c6      	beq.n	8027556 <__sflush_r+0x32>
 80275c8:	2b1d      	cmp	r3, #29
 80275ca:	d001      	beq.n	80275d0 <__sflush_r+0xac>
 80275cc:	2b16      	cmp	r3, #22
 80275ce:	d11e      	bne.n	802760e <__sflush_r+0xea>
 80275d0:	602f      	str	r7, [r5, #0]
 80275d2:	2000      	movs	r0, #0
 80275d4:	e022      	b.n	802761c <__sflush_r+0xf8>
 80275d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80275da:	b21b      	sxth	r3, r3
 80275dc:	e01b      	b.n	8027616 <__sflush_r+0xf2>
 80275de:	690f      	ldr	r7, [r1, #16]
 80275e0:	2f00      	cmp	r7, #0
 80275e2:	d0f6      	beq.n	80275d2 <__sflush_r+0xae>
 80275e4:	0793      	lsls	r3, r2, #30
 80275e6:	680e      	ldr	r6, [r1, #0]
 80275e8:	bf08      	it	eq
 80275ea:	694b      	ldreq	r3, [r1, #20]
 80275ec:	600f      	str	r7, [r1, #0]
 80275ee:	bf18      	it	ne
 80275f0:	2300      	movne	r3, #0
 80275f2:	eba6 0807 	sub.w	r8, r6, r7
 80275f6:	608b      	str	r3, [r1, #8]
 80275f8:	f1b8 0f00 	cmp.w	r8, #0
 80275fc:	dde9      	ble.n	80275d2 <__sflush_r+0xae>
 80275fe:	6a21      	ldr	r1, [r4, #32]
 8027600:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8027602:	4643      	mov	r3, r8
 8027604:	463a      	mov	r2, r7
 8027606:	4628      	mov	r0, r5
 8027608:	47b0      	blx	r6
 802760a:	2800      	cmp	r0, #0
 802760c:	dc08      	bgt.n	8027620 <__sflush_r+0xfc>
 802760e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027616:	81a3      	strh	r3, [r4, #12]
 8027618:	f04f 30ff 	mov.w	r0, #4294967295
 802761c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027620:	4407      	add	r7, r0
 8027622:	eba8 0800 	sub.w	r8, r8, r0
 8027626:	e7e7      	b.n	80275f8 <__sflush_r+0xd4>
 8027628:	dfbffffe 	.word	0xdfbffffe

0802762c <_fflush_r>:
 802762c:	b538      	push	{r3, r4, r5, lr}
 802762e:	690b      	ldr	r3, [r1, #16]
 8027630:	4605      	mov	r5, r0
 8027632:	460c      	mov	r4, r1
 8027634:	b913      	cbnz	r3, 802763c <_fflush_r+0x10>
 8027636:	2500      	movs	r5, #0
 8027638:	4628      	mov	r0, r5
 802763a:	bd38      	pop	{r3, r4, r5, pc}
 802763c:	b118      	cbz	r0, 8027646 <_fflush_r+0x1a>
 802763e:	6a03      	ldr	r3, [r0, #32]
 8027640:	b90b      	cbnz	r3, 8027646 <_fflush_r+0x1a>
 8027642:	f7fd fb9b 	bl	8024d7c <__sinit>
 8027646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802764a:	2b00      	cmp	r3, #0
 802764c:	d0f3      	beq.n	8027636 <_fflush_r+0xa>
 802764e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8027650:	07d0      	lsls	r0, r2, #31
 8027652:	d404      	bmi.n	802765e <_fflush_r+0x32>
 8027654:	0599      	lsls	r1, r3, #22
 8027656:	d402      	bmi.n	802765e <_fflush_r+0x32>
 8027658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802765a:	f7fd fdba 	bl	80251d2 <__retarget_lock_acquire_recursive>
 802765e:	4628      	mov	r0, r5
 8027660:	4621      	mov	r1, r4
 8027662:	f7ff ff5f 	bl	8027524 <__sflush_r>
 8027666:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8027668:	07da      	lsls	r2, r3, #31
 802766a:	4605      	mov	r5, r0
 802766c:	d4e4      	bmi.n	8027638 <_fflush_r+0xc>
 802766e:	89a3      	ldrh	r3, [r4, #12]
 8027670:	059b      	lsls	r3, r3, #22
 8027672:	d4e1      	bmi.n	8027638 <_fflush_r+0xc>
 8027674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027676:	f7fd fdad 	bl	80251d4 <__retarget_lock_release_recursive>
 802767a:	e7dd      	b.n	8027638 <_fflush_r+0xc>

0802767c <__swbuf_r>:
 802767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802767e:	460e      	mov	r6, r1
 8027680:	4614      	mov	r4, r2
 8027682:	4605      	mov	r5, r0
 8027684:	b118      	cbz	r0, 802768e <__swbuf_r+0x12>
 8027686:	6a03      	ldr	r3, [r0, #32]
 8027688:	b90b      	cbnz	r3, 802768e <__swbuf_r+0x12>
 802768a:	f7fd fb77 	bl	8024d7c <__sinit>
 802768e:	69a3      	ldr	r3, [r4, #24]
 8027690:	60a3      	str	r3, [r4, #8]
 8027692:	89a3      	ldrh	r3, [r4, #12]
 8027694:	071a      	lsls	r2, r3, #28
 8027696:	d501      	bpl.n	802769c <__swbuf_r+0x20>
 8027698:	6923      	ldr	r3, [r4, #16]
 802769a:	b943      	cbnz	r3, 80276ae <__swbuf_r+0x32>
 802769c:	4621      	mov	r1, r4
 802769e:	4628      	mov	r0, r5
 80276a0:	f000 f82a 	bl	80276f8 <__swsetup_r>
 80276a4:	b118      	cbz	r0, 80276ae <__swbuf_r+0x32>
 80276a6:	f04f 37ff 	mov.w	r7, #4294967295
 80276aa:	4638      	mov	r0, r7
 80276ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80276ae:	6823      	ldr	r3, [r4, #0]
 80276b0:	6922      	ldr	r2, [r4, #16]
 80276b2:	1a98      	subs	r0, r3, r2
 80276b4:	6963      	ldr	r3, [r4, #20]
 80276b6:	b2f6      	uxtb	r6, r6
 80276b8:	4283      	cmp	r3, r0
 80276ba:	4637      	mov	r7, r6
 80276bc:	dc05      	bgt.n	80276ca <__swbuf_r+0x4e>
 80276be:	4621      	mov	r1, r4
 80276c0:	4628      	mov	r0, r5
 80276c2:	f7ff ffb3 	bl	802762c <_fflush_r>
 80276c6:	2800      	cmp	r0, #0
 80276c8:	d1ed      	bne.n	80276a6 <__swbuf_r+0x2a>
 80276ca:	68a3      	ldr	r3, [r4, #8]
 80276cc:	3b01      	subs	r3, #1
 80276ce:	60a3      	str	r3, [r4, #8]
 80276d0:	6823      	ldr	r3, [r4, #0]
 80276d2:	1c5a      	adds	r2, r3, #1
 80276d4:	6022      	str	r2, [r4, #0]
 80276d6:	701e      	strb	r6, [r3, #0]
 80276d8:	6962      	ldr	r2, [r4, #20]
 80276da:	1c43      	adds	r3, r0, #1
 80276dc:	429a      	cmp	r2, r3
 80276de:	d004      	beq.n	80276ea <__swbuf_r+0x6e>
 80276e0:	89a3      	ldrh	r3, [r4, #12]
 80276e2:	07db      	lsls	r3, r3, #31
 80276e4:	d5e1      	bpl.n	80276aa <__swbuf_r+0x2e>
 80276e6:	2e0a      	cmp	r6, #10
 80276e8:	d1df      	bne.n	80276aa <__swbuf_r+0x2e>
 80276ea:	4621      	mov	r1, r4
 80276ec:	4628      	mov	r0, r5
 80276ee:	f7ff ff9d 	bl	802762c <_fflush_r>
 80276f2:	2800      	cmp	r0, #0
 80276f4:	d0d9      	beq.n	80276aa <__swbuf_r+0x2e>
 80276f6:	e7d6      	b.n	80276a6 <__swbuf_r+0x2a>

080276f8 <__swsetup_r>:
 80276f8:	b538      	push	{r3, r4, r5, lr}
 80276fa:	4b29      	ldr	r3, [pc, #164]	@ (80277a0 <__swsetup_r+0xa8>)
 80276fc:	4605      	mov	r5, r0
 80276fe:	6818      	ldr	r0, [r3, #0]
 8027700:	460c      	mov	r4, r1
 8027702:	b118      	cbz	r0, 802770c <__swsetup_r+0x14>
 8027704:	6a03      	ldr	r3, [r0, #32]
 8027706:	b90b      	cbnz	r3, 802770c <__swsetup_r+0x14>
 8027708:	f7fd fb38 	bl	8024d7c <__sinit>
 802770c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027710:	0719      	lsls	r1, r3, #28
 8027712:	d422      	bmi.n	802775a <__swsetup_r+0x62>
 8027714:	06da      	lsls	r2, r3, #27
 8027716:	d407      	bmi.n	8027728 <__swsetup_r+0x30>
 8027718:	2209      	movs	r2, #9
 802771a:	602a      	str	r2, [r5, #0]
 802771c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027720:	81a3      	strh	r3, [r4, #12]
 8027722:	f04f 30ff 	mov.w	r0, #4294967295
 8027726:	e033      	b.n	8027790 <__swsetup_r+0x98>
 8027728:	0758      	lsls	r0, r3, #29
 802772a:	d512      	bpl.n	8027752 <__swsetup_r+0x5a>
 802772c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802772e:	b141      	cbz	r1, 8027742 <__swsetup_r+0x4a>
 8027730:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8027734:	4299      	cmp	r1, r3
 8027736:	d002      	beq.n	802773e <__swsetup_r+0x46>
 8027738:	4628      	mov	r0, r5
 802773a:	f7fe fbc9 	bl	8025ed0 <_free_r>
 802773e:	2300      	movs	r3, #0
 8027740:	6363      	str	r3, [r4, #52]	@ 0x34
 8027742:	89a3      	ldrh	r3, [r4, #12]
 8027744:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8027748:	81a3      	strh	r3, [r4, #12]
 802774a:	2300      	movs	r3, #0
 802774c:	6063      	str	r3, [r4, #4]
 802774e:	6923      	ldr	r3, [r4, #16]
 8027750:	6023      	str	r3, [r4, #0]
 8027752:	89a3      	ldrh	r3, [r4, #12]
 8027754:	f043 0308 	orr.w	r3, r3, #8
 8027758:	81a3      	strh	r3, [r4, #12]
 802775a:	6923      	ldr	r3, [r4, #16]
 802775c:	b94b      	cbnz	r3, 8027772 <__swsetup_r+0x7a>
 802775e:	89a3      	ldrh	r3, [r4, #12]
 8027760:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8027764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8027768:	d003      	beq.n	8027772 <__swsetup_r+0x7a>
 802776a:	4621      	mov	r1, r4
 802776c:	4628      	mov	r0, r5
 802776e:	f000 f883 	bl	8027878 <__smakebuf_r>
 8027772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027776:	f013 0201 	ands.w	r2, r3, #1
 802777a:	d00a      	beq.n	8027792 <__swsetup_r+0x9a>
 802777c:	2200      	movs	r2, #0
 802777e:	60a2      	str	r2, [r4, #8]
 8027780:	6962      	ldr	r2, [r4, #20]
 8027782:	4252      	negs	r2, r2
 8027784:	61a2      	str	r2, [r4, #24]
 8027786:	6922      	ldr	r2, [r4, #16]
 8027788:	b942      	cbnz	r2, 802779c <__swsetup_r+0xa4>
 802778a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802778e:	d1c5      	bne.n	802771c <__swsetup_r+0x24>
 8027790:	bd38      	pop	{r3, r4, r5, pc}
 8027792:	0799      	lsls	r1, r3, #30
 8027794:	bf58      	it	pl
 8027796:	6962      	ldrpl	r2, [r4, #20]
 8027798:	60a2      	str	r2, [r4, #8]
 802779a:	e7f4      	b.n	8027786 <__swsetup_r+0x8e>
 802779c:	2000      	movs	r0, #0
 802779e:	e7f7      	b.n	8027790 <__swsetup_r+0x98>
 80277a0:	2000062c 	.word	0x2000062c

080277a4 <_raise_r>:
 80277a4:	291f      	cmp	r1, #31
 80277a6:	b538      	push	{r3, r4, r5, lr}
 80277a8:	4605      	mov	r5, r0
 80277aa:	460c      	mov	r4, r1
 80277ac:	d904      	bls.n	80277b8 <_raise_r+0x14>
 80277ae:	2316      	movs	r3, #22
 80277b0:	6003      	str	r3, [r0, #0]
 80277b2:	f04f 30ff 	mov.w	r0, #4294967295
 80277b6:	bd38      	pop	{r3, r4, r5, pc}
 80277b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80277ba:	b112      	cbz	r2, 80277c2 <_raise_r+0x1e>
 80277bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80277c0:	b94b      	cbnz	r3, 80277d6 <_raise_r+0x32>
 80277c2:	4628      	mov	r0, r5
 80277c4:	f000 f830 	bl	8027828 <_getpid_r>
 80277c8:	4622      	mov	r2, r4
 80277ca:	4601      	mov	r1, r0
 80277cc:	4628      	mov	r0, r5
 80277ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80277d2:	f000 b817 	b.w	8027804 <_kill_r>
 80277d6:	2b01      	cmp	r3, #1
 80277d8:	d00a      	beq.n	80277f0 <_raise_r+0x4c>
 80277da:	1c59      	adds	r1, r3, #1
 80277dc:	d103      	bne.n	80277e6 <_raise_r+0x42>
 80277de:	2316      	movs	r3, #22
 80277e0:	6003      	str	r3, [r0, #0]
 80277e2:	2001      	movs	r0, #1
 80277e4:	e7e7      	b.n	80277b6 <_raise_r+0x12>
 80277e6:	2100      	movs	r1, #0
 80277e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80277ec:	4620      	mov	r0, r4
 80277ee:	4798      	blx	r3
 80277f0:	2000      	movs	r0, #0
 80277f2:	e7e0      	b.n	80277b6 <_raise_r+0x12>

080277f4 <raise>:
 80277f4:	4b02      	ldr	r3, [pc, #8]	@ (8027800 <raise+0xc>)
 80277f6:	4601      	mov	r1, r0
 80277f8:	6818      	ldr	r0, [r3, #0]
 80277fa:	f7ff bfd3 	b.w	80277a4 <_raise_r>
 80277fe:	bf00      	nop
 8027800:	2000062c 	.word	0x2000062c

08027804 <_kill_r>:
 8027804:	b538      	push	{r3, r4, r5, lr}
 8027806:	4d07      	ldr	r5, [pc, #28]	@ (8027824 <_kill_r+0x20>)
 8027808:	2300      	movs	r3, #0
 802780a:	4604      	mov	r4, r0
 802780c:	4608      	mov	r0, r1
 802780e:	4611      	mov	r1, r2
 8027810:	602b      	str	r3, [r5, #0]
 8027812:	f7e5 fba3 	bl	800cf5c <_kill>
 8027816:	1c43      	adds	r3, r0, #1
 8027818:	d102      	bne.n	8027820 <_kill_r+0x1c>
 802781a:	682b      	ldr	r3, [r5, #0]
 802781c:	b103      	cbz	r3, 8027820 <_kill_r+0x1c>
 802781e:	6023      	str	r3, [r4, #0]
 8027820:	bd38      	pop	{r3, r4, r5, pc}
 8027822:	bf00      	nop
 8027824:	2000305c 	.word	0x2000305c

08027828 <_getpid_r>:
 8027828:	f7e5 bb96 	b.w	800cf58 <_getpid>

0802782c <__swhatbuf_r>:
 802782c:	b570      	push	{r4, r5, r6, lr}
 802782e:	460c      	mov	r4, r1
 8027830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027834:	2900      	cmp	r1, #0
 8027836:	b096      	sub	sp, #88	@ 0x58
 8027838:	4615      	mov	r5, r2
 802783a:	461e      	mov	r6, r3
 802783c:	da0d      	bge.n	802785a <__swhatbuf_r+0x2e>
 802783e:	89a3      	ldrh	r3, [r4, #12]
 8027840:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8027844:	f04f 0100 	mov.w	r1, #0
 8027848:	bf14      	ite	ne
 802784a:	2340      	movne	r3, #64	@ 0x40
 802784c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8027850:	2000      	movs	r0, #0
 8027852:	6031      	str	r1, [r6, #0]
 8027854:	602b      	str	r3, [r5, #0]
 8027856:	b016      	add	sp, #88	@ 0x58
 8027858:	bd70      	pop	{r4, r5, r6, pc}
 802785a:	466a      	mov	r2, sp
 802785c:	f000 f848 	bl	80278f0 <_fstat_r>
 8027860:	2800      	cmp	r0, #0
 8027862:	dbec      	blt.n	802783e <__swhatbuf_r+0x12>
 8027864:	9901      	ldr	r1, [sp, #4]
 8027866:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802786a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802786e:	4259      	negs	r1, r3
 8027870:	4159      	adcs	r1, r3
 8027872:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8027876:	e7eb      	b.n	8027850 <__swhatbuf_r+0x24>

08027878 <__smakebuf_r>:
 8027878:	898b      	ldrh	r3, [r1, #12]
 802787a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802787c:	079d      	lsls	r5, r3, #30
 802787e:	4606      	mov	r6, r0
 8027880:	460c      	mov	r4, r1
 8027882:	d507      	bpl.n	8027894 <__smakebuf_r+0x1c>
 8027884:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8027888:	6023      	str	r3, [r4, #0]
 802788a:	6123      	str	r3, [r4, #16]
 802788c:	2301      	movs	r3, #1
 802788e:	6163      	str	r3, [r4, #20]
 8027890:	b003      	add	sp, #12
 8027892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027894:	ab01      	add	r3, sp, #4
 8027896:	466a      	mov	r2, sp
 8027898:	f7ff ffc8 	bl	802782c <__swhatbuf_r>
 802789c:	9f00      	ldr	r7, [sp, #0]
 802789e:	4605      	mov	r5, r0
 80278a0:	4639      	mov	r1, r7
 80278a2:	4630      	mov	r0, r6
 80278a4:	f7fb faaa 	bl	8022dfc <_malloc_r>
 80278a8:	b948      	cbnz	r0, 80278be <__smakebuf_r+0x46>
 80278aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80278ae:	059a      	lsls	r2, r3, #22
 80278b0:	d4ee      	bmi.n	8027890 <__smakebuf_r+0x18>
 80278b2:	f023 0303 	bic.w	r3, r3, #3
 80278b6:	f043 0302 	orr.w	r3, r3, #2
 80278ba:	81a3      	strh	r3, [r4, #12]
 80278bc:	e7e2      	b.n	8027884 <__smakebuf_r+0xc>
 80278be:	89a3      	ldrh	r3, [r4, #12]
 80278c0:	6020      	str	r0, [r4, #0]
 80278c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80278c6:	81a3      	strh	r3, [r4, #12]
 80278c8:	9b01      	ldr	r3, [sp, #4]
 80278ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80278ce:	b15b      	cbz	r3, 80278e8 <__smakebuf_r+0x70>
 80278d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80278d4:	4630      	mov	r0, r6
 80278d6:	f000 f81d 	bl	8027914 <_isatty_r>
 80278da:	b128      	cbz	r0, 80278e8 <__smakebuf_r+0x70>
 80278dc:	89a3      	ldrh	r3, [r4, #12]
 80278de:	f023 0303 	bic.w	r3, r3, #3
 80278e2:	f043 0301 	orr.w	r3, r3, #1
 80278e6:	81a3      	strh	r3, [r4, #12]
 80278e8:	89a3      	ldrh	r3, [r4, #12]
 80278ea:	431d      	orrs	r5, r3
 80278ec:	81a5      	strh	r5, [r4, #12]
 80278ee:	e7cf      	b.n	8027890 <__smakebuf_r+0x18>

080278f0 <_fstat_r>:
 80278f0:	b538      	push	{r3, r4, r5, lr}
 80278f2:	4d07      	ldr	r5, [pc, #28]	@ (8027910 <_fstat_r+0x20>)
 80278f4:	2300      	movs	r3, #0
 80278f6:	4604      	mov	r4, r0
 80278f8:	4608      	mov	r0, r1
 80278fa:	4611      	mov	r1, r2
 80278fc:	602b      	str	r3, [r5, #0]
 80278fe:	f7e5 fb5c 	bl	800cfba <_fstat>
 8027902:	1c43      	adds	r3, r0, #1
 8027904:	d102      	bne.n	802790c <_fstat_r+0x1c>
 8027906:	682b      	ldr	r3, [r5, #0]
 8027908:	b103      	cbz	r3, 802790c <_fstat_r+0x1c>
 802790a:	6023      	str	r3, [r4, #0]
 802790c:	bd38      	pop	{r3, r4, r5, pc}
 802790e:	bf00      	nop
 8027910:	2000305c 	.word	0x2000305c

08027914 <_isatty_r>:
 8027914:	b538      	push	{r3, r4, r5, lr}
 8027916:	4d06      	ldr	r5, [pc, #24]	@ (8027930 <_isatty_r+0x1c>)
 8027918:	2300      	movs	r3, #0
 802791a:	4604      	mov	r4, r0
 802791c:	4608      	mov	r0, r1
 802791e:	602b      	str	r3, [r5, #0]
 8027920:	f7e5 fb50 	bl	800cfc4 <_isatty>
 8027924:	1c43      	adds	r3, r0, #1
 8027926:	d102      	bne.n	802792e <_isatty_r+0x1a>
 8027928:	682b      	ldr	r3, [r5, #0]
 802792a:	b103      	cbz	r3, 802792e <_isatty_r+0x1a>
 802792c:	6023      	str	r3, [r4, #0]
 802792e:	bd38      	pop	{r3, r4, r5, pc}
 8027930:	2000305c 	.word	0x2000305c

08027934 <atan2>:
 8027934:	f000 ba30 	b.w	8027d98 <__ieee754_atan2>

08027938 <powf>:
 8027938:	b508      	push	{r3, lr}
 802793a:	ed2d 8b04 	vpush	{d8-d9}
 802793e:	eeb0 8a60 	vmov.f32	s16, s1
 8027942:	eeb0 9a40 	vmov.f32	s18, s0
 8027946:	f000 fe0f 	bl	8028568 <__ieee754_powf>
 802794a:	eeb4 8a48 	vcmp.f32	s16, s16
 802794e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027952:	eef0 8a40 	vmov.f32	s17, s0
 8027956:	d63e      	bvs.n	80279d6 <powf+0x9e>
 8027958:	eeb5 9a40 	vcmp.f32	s18, #0.0
 802795c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027960:	d112      	bne.n	8027988 <powf+0x50>
 8027962:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8027966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802796a:	d039      	beq.n	80279e0 <powf+0xa8>
 802796c:	eeb0 0a48 	vmov.f32	s0, s16
 8027970:	f000 f90e 	bl	8027b90 <finitef>
 8027974:	b378      	cbz	r0, 80279d6 <powf+0x9e>
 8027976:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802797a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802797e:	d52a      	bpl.n	80279d6 <powf+0x9e>
 8027980:	f7fd fbfc 	bl	802517c <__errno>
 8027984:	2322      	movs	r3, #34	@ 0x22
 8027986:	e014      	b.n	80279b2 <powf+0x7a>
 8027988:	f000 f902 	bl	8027b90 <finitef>
 802798c:	b998      	cbnz	r0, 80279b6 <powf+0x7e>
 802798e:	eeb0 0a49 	vmov.f32	s0, s18
 8027992:	f000 f8fd 	bl	8027b90 <finitef>
 8027996:	b170      	cbz	r0, 80279b6 <powf+0x7e>
 8027998:	eeb0 0a48 	vmov.f32	s0, s16
 802799c:	f000 f8f8 	bl	8027b90 <finitef>
 80279a0:	b148      	cbz	r0, 80279b6 <powf+0x7e>
 80279a2:	eef4 8a68 	vcmp.f32	s17, s17
 80279a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80279aa:	d7e9      	bvc.n	8027980 <powf+0x48>
 80279ac:	f7fd fbe6 	bl	802517c <__errno>
 80279b0:	2321      	movs	r3, #33	@ 0x21
 80279b2:	6003      	str	r3, [r0, #0]
 80279b4:	e00f      	b.n	80279d6 <powf+0x9e>
 80279b6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80279ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80279be:	d10a      	bne.n	80279d6 <powf+0x9e>
 80279c0:	eeb0 0a49 	vmov.f32	s0, s18
 80279c4:	f000 f8e4 	bl	8027b90 <finitef>
 80279c8:	b128      	cbz	r0, 80279d6 <powf+0x9e>
 80279ca:	eeb0 0a48 	vmov.f32	s0, s16
 80279ce:	f000 f8df 	bl	8027b90 <finitef>
 80279d2:	2800      	cmp	r0, #0
 80279d4:	d1d4      	bne.n	8027980 <powf+0x48>
 80279d6:	eeb0 0a68 	vmov.f32	s0, s17
 80279da:	ecbd 8b04 	vpop	{d8-d9}
 80279de:	bd08      	pop	{r3, pc}
 80279e0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80279e4:	e7f7      	b.n	80279d6 <powf+0x9e>
	...

080279e8 <sqrtf>:
 80279e8:	b508      	push	{r3, lr}
 80279ea:	ed2d 8b02 	vpush	{d8}
 80279ee:	eeb0 8a40 	vmov.f32	s16, s0
 80279f2:	f000 f904 	bl	8027bfe <__ieee754_sqrtf>
 80279f6:	eeb4 8a48 	vcmp.f32	s16, s16
 80279fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80279fe:	d60c      	bvs.n	8027a1a <sqrtf+0x32>
 8027a00:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8027a20 <sqrtf+0x38>
 8027a04:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8027a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a0c:	d505      	bpl.n	8027a1a <sqrtf+0x32>
 8027a0e:	f7fd fbb5 	bl	802517c <__errno>
 8027a12:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8027a16:	2321      	movs	r3, #33	@ 0x21
 8027a18:	6003      	str	r3, [r0, #0]
 8027a1a:	ecbd 8b02 	vpop	{d8}
 8027a1e:	bd08      	pop	{r3, pc}
 8027a20:	00000000 	.word	0x00000000

08027a24 <cosf>:
 8027a24:	ee10 3a10 	vmov	r3, s0
 8027a28:	b507      	push	{r0, r1, r2, lr}
 8027a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8027aa4 <cosf+0x80>)
 8027a2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8027a30:	4293      	cmp	r3, r2
 8027a32:	d806      	bhi.n	8027a42 <cosf+0x1e>
 8027a34:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8027aa8 <cosf+0x84>
 8027a38:	b003      	add	sp, #12
 8027a3a:	f85d eb04 	ldr.w	lr, [sp], #4
 8027a3e:	f000 bc13 	b.w	8028268 <__kernel_cosf>
 8027a42:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8027a46:	d304      	bcc.n	8027a52 <cosf+0x2e>
 8027a48:	ee30 0a40 	vsub.f32	s0, s0, s0
 8027a4c:	b003      	add	sp, #12
 8027a4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8027a52:	4668      	mov	r0, sp
 8027a54:	f001 f858 	bl	8028b08 <__ieee754_rem_pio2f>
 8027a58:	f000 0003 	and.w	r0, r0, #3
 8027a5c:	2801      	cmp	r0, #1
 8027a5e:	d009      	beq.n	8027a74 <cosf+0x50>
 8027a60:	2802      	cmp	r0, #2
 8027a62:	d010      	beq.n	8027a86 <cosf+0x62>
 8027a64:	b9b0      	cbnz	r0, 8027a94 <cosf+0x70>
 8027a66:	eddd 0a01 	vldr	s1, [sp, #4]
 8027a6a:	ed9d 0a00 	vldr	s0, [sp]
 8027a6e:	f000 fbfb 	bl	8028268 <__kernel_cosf>
 8027a72:	e7eb      	b.n	8027a4c <cosf+0x28>
 8027a74:	eddd 0a01 	vldr	s1, [sp, #4]
 8027a78:	ed9d 0a00 	vldr	s0, [sp]
 8027a7c:	f000 fc4c 	bl	8028318 <__kernel_sinf>
 8027a80:	eeb1 0a40 	vneg.f32	s0, s0
 8027a84:	e7e2      	b.n	8027a4c <cosf+0x28>
 8027a86:	eddd 0a01 	vldr	s1, [sp, #4]
 8027a8a:	ed9d 0a00 	vldr	s0, [sp]
 8027a8e:	f000 fbeb 	bl	8028268 <__kernel_cosf>
 8027a92:	e7f5      	b.n	8027a80 <cosf+0x5c>
 8027a94:	eddd 0a01 	vldr	s1, [sp, #4]
 8027a98:	ed9d 0a00 	vldr	s0, [sp]
 8027a9c:	2001      	movs	r0, #1
 8027a9e:	f000 fc3b 	bl	8028318 <__kernel_sinf>
 8027aa2:	e7d3      	b.n	8027a4c <cosf+0x28>
 8027aa4:	3f490fd8 	.word	0x3f490fd8
 8027aa8:	00000000 	.word	0x00000000

08027aac <sinf>:
 8027aac:	ee10 3a10 	vmov	r3, s0
 8027ab0:	b507      	push	{r0, r1, r2, lr}
 8027ab2:	4a1f      	ldr	r2, [pc, #124]	@ (8027b30 <sinf+0x84>)
 8027ab4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8027ab8:	4293      	cmp	r3, r2
 8027aba:	d807      	bhi.n	8027acc <sinf+0x20>
 8027abc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8027b34 <sinf+0x88>
 8027ac0:	2000      	movs	r0, #0
 8027ac2:	b003      	add	sp, #12
 8027ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8027ac8:	f000 bc26 	b.w	8028318 <__kernel_sinf>
 8027acc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8027ad0:	d304      	bcc.n	8027adc <sinf+0x30>
 8027ad2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8027ad6:	b003      	add	sp, #12
 8027ad8:	f85d fb04 	ldr.w	pc, [sp], #4
 8027adc:	4668      	mov	r0, sp
 8027ade:	f001 f813 	bl	8028b08 <__ieee754_rem_pio2f>
 8027ae2:	f000 0003 	and.w	r0, r0, #3
 8027ae6:	2801      	cmp	r0, #1
 8027ae8:	d00a      	beq.n	8027b00 <sinf+0x54>
 8027aea:	2802      	cmp	r0, #2
 8027aec:	d00f      	beq.n	8027b0e <sinf+0x62>
 8027aee:	b9c0      	cbnz	r0, 8027b22 <sinf+0x76>
 8027af0:	eddd 0a01 	vldr	s1, [sp, #4]
 8027af4:	ed9d 0a00 	vldr	s0, [sp]
 8027af8:	2001      	movs	r0, #1
 8027afa:	f000 fc0d 	bl	8028318 <__kernel_sinf>
 8027afe:	e7ea      	b.n	8027ad6 <sinf+0x2a>
 8027b00:	eddd 0a01 	vldr	s1, [sp, #4]
 8027b04:	ed9d 0a00 	vldr	s0, [sp]
 8027b08:	f000 fbae 	bl	8028268 <__kernel_cosf>
 8027b0c:	e7e3      	b.n	8027ad6 <sinf+0x2a>
 8027b0e:	eddd 0a01 	vldr	s1, [sp, #4]
 8027b12:	ed9d 0a00 	vldr	s0, [sp]
 8027b16:	2001      	movs	r0, #1
 8027b18:	f000 fbfe 	bl	8028318 <__kernel_sinf>
 8027b1c:	eeb1 0a40 	vneg.f32	s0, s0
 8027b20:	e7d9      	b.n	8027ad6 <sinf+0x2a>
 8027b22:	eddd 0a01 	vldr	s1, [sp, #4]
 8027b26:	ed9d 0a00 	vldr	s0, [sp]
 8027b2a:	f000 fb9d 	bl	8028268 <__kernel_cosf>
 8027b2e:	e7f5      	b.n	8027b1c <sinf+0x70>
 8027b30:	3f490fd8 	.word	0x3f490fd8
 8027b34:	00000000 	.word	0x00000000

08027b38 <tanf>:
 8027b38:	ee10 3a10 	vmov	r3, s0
 8027b3c:	b507      	push	{r0, r1, r2, lr}
 8027b3e:	4a12      	ldr	r2, [pc, #72]	@ (8027b88 <tanf+0x50>)
 8027b40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8027b44:	4293      	cmp	r3, r2
 8027b46:	d807      	bhi.n	8027b58 <tanf+0x20>
 8027b48:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8027b8c <tanf+0x54>
 8027b4c:	2001      	movs	r0, #1
 8027b4e:	b003      	add	sp, #12
 8027b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8027b54:	f000 bc28 	b.w	80283a8 <__kernel_tanf>
 8027b58:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8027b5c:	d304      	bcc.n	8027b68 <tanf+0x30>
 8027b5e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8027b62:	b003      	add	sp, #12
 8027b64:	f85d fb04 	ldr.w	pc, [sp], #4
 8027b68:	4668      	mov	r0, sp
 8027b6a:	f000 ffcd 	bl	8028b08 <__ieee754_rem_pio2f>
 8027b6e:	0040      	lsls	r0, r0, #1
 8027b70:	f000 0002 	and.w	r0, r0, #2
 8027b74:	eddd 0a01 	vldr	s1, [sp, #4]
 8027b78:	ed9d 0a00 	vldr	s0, [sp]
 8027b7c:	f1c0 0001 	rsb	r0, r0, #1
 8027b80:	f000 fc12 	bl	80283a8 <__kernel_tanf>
 8027b84:	e7ed      	b.n	8027b62 <tanf+0x2a>
 8027b86:	bf00      	nop
 8027b88:	3f490fda 	.word	0x3f490fda
 8027b8c:	00000000 	.word	0x00000000

08027b90 <finitef>:
 8027b90:	ee10 3a10 	vmov	r3, s0
 8027b94:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8027b98:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8027b9c:	bfac      	ite	ge
 8027b9e:	2000      	movge	r0, #0
 8027ba0:	2001      	movlt	r0, #1
 8027ba2:	4770      	bx	lr

08027ba4 <lroundf>:
 8027ba4:	ee10 1a10 	vmov	r1, s0
 8027ba8:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 8027bac:	2900      	cmp	r1, #0
 8027bae:	f1a3 027f 	sub.w	r2, r3, #127	@ 0x7f
 8027bb2:	bfb4      	ite	lt
 8027bb4:	f04f 30ff 	movlt.w	r0, #4294967295
 8027bb8:	2001      	movge	r0, #1
 8027bba:	2a1e      	cmp	r2, #30
 8027bbc:	dc1a      	bgt.n	8027bf4 <lroundf+0x50>
 8027bbe:	2a00      	cmp	r2, #0
 8027bc0:	da03      	bge.n	8027bca <lroundf+0x26>
 8027bc2:	3201      	adds	r2, #1
 8027bc4:	bf18      	it	ne
 8027bc6:	2000      	movne	r0, #0
 8027bc8:	4770      	bx	lr
 8027bca:	2a16      	cmp	r2, #22
 8027bcc:	bfd8      	it	le
 8027bce:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 8027bd2:	f3c1 0116 	ubfx	r1, r1, #0, #23
 8027bd6:	bfd8      	it	le
 8027bd8:	4113      	asrle	r3, r2
 8027bda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8027bde:	bfcd      	iteet	gt
 8027be0:	3b96      	subgt	r3, #150	@ 0x96
 8027be2:	185b      	addle	r3, r3, r1
 8027be4:	f1c2 0217 	rsble	r2, r2, #23
 8027be8:	fa01 f303 	lslgt.w	r3, r1, r3
 8027bec:	bfd8      	it	le
 8027bee:	40d3      	lsrle	r3, r2
 8027bf0:	4358      	muls	r0, r3
 8027bf2:	4770      	bx	lr
 8027bf4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8027bf8:	ee17 0a90 	vmov	r0, s15
 8027bfc:	4770      	bx	lr

08027bfe <__ieee754_sqrtf>:
 8027bfe:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8027c02:	4770      	bx	lr

08027c04 <ceilf>:
 8027c04:	ee10 3a10 	vmov	r3, s0
 8027c08:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8027c0c:	3a7f      	subs	r2, #127	@ 0x7f
 8027c0e:	2a16      	cmp	r2, #22
 8027c10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8027c14:	dc2a      	bgt.n	8027c6c <ceilf+0x68>
 8027c16:	2a00      	cmp	r2, #0
 8027c18:	da11      	bge.n	8027c3e <ceilf+0x3a>
 8027c1a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8027c80 <ceilf+0x7c>
 8027c1e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8027c22:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8027c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c2a:	dd05      	ble.n	8027c38 <ceilf+0x34>
 8027c2c:	2b00      	cmp	r3, #0
 8027c2e:	db23      	blt.n	8027c78 <ceilf+0x74>
 8027c30:	2900      	cmp	r1, #0
 8027c32:	bf18      	it	ne
 8027c34:	f04f 537e 	movne.w	r3, #1065353216	@ 0x3f800000
 8027c38:	ee00 3a10 	vmov	s0, r3
 8027c3c:	4770      	bx	lr
 8027c3e:	4911      	ldr	r1, [pc, #68]	@ (8027c84 <ceilf+0x80>)
 8027c40:	4111      	asrs	r1, r2
 8027c42:	420b      	tst	r3, r1
 8027c44:	d0fa      	beq.n	8027c3c <ceilf+0x38>
 8027c46:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8027c80 <ceilf+0x7c>
 8027c4a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8027c4e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8027c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c56:	ddef      	ble.n	8027c38 <ceilf+0x34>
 8027c58:	2b00      	cmp	r3, #0
 8027c5a:	bfc2      	ittt	gt
 8027c5c:	f44f 0000 	movgt.w	r0, #8388608	@ 0x800000
 8027c60:	fa40 f202 	asrgt.w	r2, r0, r2
 8027c64:	189b      	addgt	r3, r3, r2
 8027c66:	ea23 0301 	bic.w	r3, r3, r1
 8027c6a:	e7e5      	b.n	8027c38 <ceilf+0x34>
 8027c6c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8027c70:	d3e4      	bcc.n	8027c3c <ceilf+0x38>
 8027c72:	ee30 0a00 	vadd.f32	s0, s0, s0
 8027c76:	4770      	bx	lr
 8027c78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8027c7c:	e7dc      	b.n	8027c38 <ceilf+0x34>
 8027c7e:	bf00      	nop
 8027c80:	7149f2ca 	.word	0x7149f2ca
 8027c84:	007fffff 	.word	0x007fffff

08027c88 <floorf>:
 8027c88:	ee10 3a10 	vmov	r3, s0
 8027c8c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8027c90:	3a7f      	subs	r2, #127	@ 0x7f
 8027c92:	2a16      	cmp	r2, #22
 8027c94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8027c98:	dc2b      	bgt.n	8027cf2 <floorf+0x6a>
 8027c9a:	2a00      	cmp	r2, #0
 8027c9c:	da12      	bge.n	8027cc4 <floorf+0x3c>
 8027c9e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8027d04 <floorf+0x7c>
 8027ca2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8027ca6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8027caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027cae:	dd06      	ble.n	8027cbe <floorf+0x36>
 8027cb0:	2b00      	cmp	r3, #0
 8027cb2:	da24      	bge.n	8027cfe <floorf+0x76>
 8027cb4:	2900      	cmp	r1, #0
 8027cb6:	4b14      	ldr	r3, [pc, #80]	@ (8027d08 <floorf+0x80>)
 8027cb8:	bf08      	it	eq
 8027cba:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8027cbe:	ee00 3a10 	vmov	s0, r3
 8027cc2:	4770      	bx	lr
 8027cc4:	4911      	ldr	r1, [pc, #68]	@ (8027d0c <floorf+0x84>)
 8027cc6:	4111      	asrs	r1, r2
 8027cc8:	420b      	tst	r3, r1
 8027cca:	d0fa      	beq.n	8027cc2 <floorf+0x3a>
 8027ccc:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8027d04 <floorf+0x7c>
 8027cd0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8027cd4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8027cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027cdc:	ddef      	ble.n	8027cbe <floorf+0x36>
 8027cde:	2b00      	cmp	r3, #0
 8027ce0:	bfbe      	ittt	lt
 8027ce2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8027ce6:	fa40 f202 	asrlt.w	r2, r0, r2
 8027cea:	189b      	addlt	r3, r3, r2
 8027cec:	ea23 0301 	bic.w	r3, r3, r1
 8027cf0:	e7e5      	b.n	8027cbe <floorf+0x36>
 8027cf2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8027cf6:	d3e4      	bcc.n	8027cc2 <floorf+0x3a>
 8027cf8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8027cfc:	4770      	bx	lr
 8027cfe:	2300      	movs	r3, #0
 8027d00:	e7dd      	b.n	8027cbe <floorf+0x36>
 8027d02:	bf00      	nop
 8027d04:	7149f2ca 	.word	0x7149f2ca
 8027d08:	bf800000 	.word	0xbf800000
 8027d0c:	007fffff 	.word	0x007fffff

08027d10 <roundf>:
 8027d10:	ee10 0a10 	vmov	r0, s0
 8027d14:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8027d18:	3a7f      	subs	r2, #127	@ 0x7f
 8027d1a:	2a16      	cmp	r2, #22
 8027d1c:	dc15      	bgt.n	8027d4a <roundf+0x3a>
 8027d1e:	2a00      	cmp	r2, #0
 8027d20:	da08      	bge.n	8027d34 <roundf+0x24>
 8027d22:	3201      	adds	r2, #1
 8027d24:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8027d28:	d101      	bne.n	8027d2e <roundf+0x1e>
 8027d2a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8027d2e:	ee00 3a10 	vmov	s0, r3
 8027d32:	4770      	bx	lr
 8027d34:	4907      	ldr	r1, [pc, #28]	@ (8027d54 <roundf+0x44>)
 8027d36:	4111      	asrs	r1, r2
 8027d38:	4201      	tst	r1, r0
 8027d3a:	d0fa      	beq.n	8027d32 <roundf+0x22>
 8027d3c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8027d40:	4113      	asrs	r3, r2
 8027d42:	4403      	add	r3, r0
 8027d44:	ea23 0301 	bic.w	r3, r3, r1
 8027d48:	e7f1      	b.n	8027d2e <roundf+0x1e>
 8027d4a:	2a80      	cmp	r2, #128	@ 0x80
 8027d4c:	d1f1      	bne.n	8027d32 <roundf+0x22>
 8027d4e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8027d52:	4770      	bx	lr
 8027d54:	007fffff 	.word	0x007fffff

08027d58 <truncf>:
 8027d58:	ee10 0a10 	vmov	r0, s0
 8027d5c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8027d60:	3a7f      	subs	r2, #127	@ 0x7f
 8027d62:	2a16      	cmp	r2, #22
 8027d64:	dc0e      	bgt.n	8027d84 <truncf+0x2c>
 8027d66:	2a00      	cmp	r2, #0
 8027d68:	bfa4      	itt	ge
 8027d6a:	4909      	ldrge	r1, [pc, #36]	@ (8027d90 <truncf+0x38>)
 8027d6c:	fa41 f202 	asrge.w	r2, r1, r2
 8027d70:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8027d74:	bfa5      	ittet	ge
 8027d76:	4002      	andge	r2, r0
 8027d78:	4313      	orrge	r3, r2
 8027d7a:	ee00 3a10 	vmovlt	s0, r3
 8027d7e:	ee00 3a10 	vmovge	s0, r3
 8027d82:	4770      	bx	lr
 8027d84:	2a80      	cmp	r2, #128	@ 0x80
 8027d86:	bf08      	it	eq
 8027d88:	ee30 0a00 	vaddeq.f32	s0, s0, s0
 8027d8c:	4770      	bx	lr
 8027d8e:	bf00      	nop
 8027d90:	ff800000 	.word	0xff800000
 8027d94:	00000000 	.word	0x00000000

08027d98 <__ieee754_atan2>:
 8027d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027d9c:	ec57 6b11 	vmov	r6, r7, d1
 8027da0:	4273      	negs	r3, r6
 8027da2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8027f20 <__ieee754_atan2+0x188>
 8027da6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8027daa:	4333      	orrs	r3, r6
 8027dac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8027db0:	4543      	cmp	r3, r8
 8027db2:	ec51 0b10 	vmov	r0, r1, d0
 8027db6:	4635      	mov	r5, r6
 8027db8:	d809      	bhi.n	8027dce <__ieee754_atan2+0x36>
 8027dba:	4244      	negs	r4, r0
 8027dbc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8027dc0:	4304      	orrs	r4, r0
 8027dc2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8027dc6:	4544      	cmp	r4, r8
 8027dc8:	468e      	mov	lr, r1
 8027dca:	4681      	mov	r9, r0
 8027dcc:	d907      	bls.n	8027dde <__ieee754_atan2+0x46>
 8027dce:	4632      	mov	r2, r6
 8027dd0:	463b      	mov	r3, r7
 8027dd2:	f7e0 f9a3 	bl	800811c <__adddf3>
 8027dd6:	ec41 0b10 	vmov	d0, r0, r1
 8027dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027dde:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8027de2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8027de6:	4334      	orrs	r4, r6
 8027de8:	d103      	bne.n	8027df2 <__ieee754_atan2+0x5a>
 8027dea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027dee:	f000 b89b 	b.w	8027f28 <atan>
 8027df2:	17bc      	asrs	r4, r7, #30
 8027df4:	f004 0402 	and.w	r4, r4, #2
 8027df8:	ea53 0909 	orrs.w	r9, r3, r9
 8027dfc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8027e00:	d107      	bne.n	8027e12 <__ieee754_atan2+0x7a>
 8027e02:	2c02      	cmp	r4, #2
 8027e04:	d05f      	beq.n	8027ec6 <__ieee754_atan2+0x12e>
 8027e06:	2c03      	cmp	r4, #3
 8027e08:	d1e5      	bne.n	8027dd6 <__ieee754_atan2+0x3e>
 8027e0a:	a141      	add	r1, pc, #260	@ (adr r1, 8027f10 <__ieee754_atan2+0x178>)
 8027e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027e10:	e7e1      	b.n	8027dd6 <__ieee754_atan2+0x3e>
 8027e12:	4315      	orrs	r5, r2
 8027e14:	d106      	bne.n	8027e24 <__ieee754_atan2+0x8c>
 8027e16:	f1be 0f00 	cmp.w	lr, #0
 8027e1a:	da5f      	bge.n	8027edc <__ieee754_atan2+0x144>
 8027e1c:	a13e      	add	r1, pc, #248	@ (adr r1, 8027f18 <__ieee754_atan2+0x180>)
 8027e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027e22:	e7d8      	b.n	8027dd6 <__ieee754_atan2+0x3e>
 8027e24:	4542      	cmp	r2, r8
 8027e26:	d10f      	bne.n	8027e48 <__ieee754_atan2+0xb0>
 8027e28:	4293      	cmp	r3, r2
 8027e2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8027e2e:	d107      	bne.n	8027e40 <__ieee754_atan2+0xa8>
 8027e30:	2c02      	cmp	r4, #2
 8027e32:	d84c      	bhi.n	8027ece <__ieee754_atan2+0x136>
 8027e34:	4b34      	ldr	r3, [pc, #208]	@ (8027f08 <__ieee754_atan2+0x170>)
 8027e36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8027e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027e3e:	e7ca      	b.n	8027dd6 <__ieee754_atan2+0x3e>
 8027e40:	2c02      	cmp	r4, #2
 8027e42:	d848      	bhi.n	8027ed6 <__ieee754_atan2+0x13e>
 8027e44:	4b31      	ldr	r3, [pc, #196]	@ (8027f0c <__ieee754_atan2+0x174>)
 8027e46:	e7f6      	b.n	8027e36 <__ieee754_atan2+0x9e>
 8027e48:	4543      	cmp	r3, r8
 8027e4a:	d0e4      	beq.n	8027e16 <__ieee754_atan2+0x7e>
 8027e4c:	1a9b      	subs	r3, r3, r2
 8027e4e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8027e52:	ea4f 5223 	mov.w	r2, r3, asr #20
 8027e56:	da1e      	bge.n	8027e96 <__ieee754_atan2+0xfe>
 8027e58:	2f00      	cmp	r7, #0
 8027e5a:	da01      	bge.n	8027e60 <__ieee754_atan2+0xc8>
 8027e5c:	323c      	adds	r2, #60	@ 0x3c
 8027e5e:	db1e      	blt.n	8027e9e <__ieee754_atan2+0x106>
 8027e60:	4632      	mov	r2, r6
 8027e62:	463b      	mov	r3, r7
 8027e64:	f7e0 fc3a 	bl	80086dc <__aeabi_ddiv>
 8027e68:	ec41 0b10 	vmov	d0, r0, r1
 8027e6c:	f000 f9f4 	bl	8028258 <fabs>
 8027e70:	f000 f85a 	bl	8027f28 <atan>
 8027e74:	ec51 0b10 	vmov	r0, r1, d0
 8027e78:	2c01      	cmp	r4, #1
 8027e7a:	d013      	beq.n	8027ea4 <__ieee754_atan2+0x10c>
 8027e7c:	2c02      	cmp	r4, #2
 8027e7e:	d015      	beq.n	8027eac <__ieee754_atan2+0x114>
 8027e80:	2c00      	cmp	r4, #0
 8027e82:	d0a8      	beq.n	8027dd6 <__ieee754_atan2+0x3e>
 8027e84:	a318      	add	r3, pc, #96	@ (adr r3, 8027ee8 <__ieee754_atan2+0x150>)
 8027e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027e8a:	f7e0 f945 	bl	8008118 <__aeabi_dsub>
 8027e8e:	a318      	add	r3, pc, #96	@ (adr r3, 8027ef0 <__ieee754_atan2+0x158>)
 8027e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027e94:	e014      	b.n	8027ec0 <__ieee754_atan2+0x128>
 8027e96:	a118      	add	r1, pc, #96	@ (adr r1, 8027ef8 <__ieee754_atan2+0x160>)
 8027e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027e9c:	e7ec      	b.n	8027e78 <__ieee754_atan2+0xe0>
 8027e9e:	2000      	movs	r0, #0
 8027ea0:	2100      	movs	r1, #0
 8027ea2:	e7e9      	b.n	8027e78 <__ieee754_atan2+0xe0>
 8027ea4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8027ea8:	4619      	mov	r1, r3
 8027eaa:	e794      	b.n	8027dd6 <__ieee754_atan2+0x3e>
 8027eac:	a30e      	add	r3, pc, #56	@ (adr r3, 8027ee8 <__ieee754_atan2+0x150>)
 8027eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027eb2:	f7e0 f931 	bl	8008118 <__aeabi_dsub>
 8027eb6:	4602      	mov	r2, r0
 8027eb8:	460b      	mov	r3, r1
 8027eba:	a10d      	add	r1, pc, #52	@ (adr r1, 8027ef0 <__ieee754_atan2+0x158>)
 8027ebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027ec0:	f7e0 f92a 	bl	8008118 <__aeabi_dsub>
 8027ec4:	e787      	b.n	8027dd6 <__ieee754_atan2+0x3e>
 8027ec6:	a10a      	add	r1, pc, #40	@ (adr r1, 8027ef0 <__ieee754_atan2+0x158>)
 8027ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027ecc:	e783      	b.n	8027dd6 <__ieee754_atan2+0x3e>
 8027ece:	a10c      	add	r1, pc, #48	@ (adr r1, 8027f00 <__ieee754_atan2+0x168>)
 8027ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027ed4:	e77f      	b.n	8027dd6 <__ieee754_atan2+0x3e>
 8027ed6:	2000      	movs	r0, #0
 8027ed8:	2100      	movs	r1, #0
 8027eda:	e77c      	b.n	8027dd6 <__ieee754_atan2+0x3e>
 8027edc:	a106      	add	r1, pc, #24	@ (adr r1, 8027ef8 <__ieee754_atan2+0x160>)
 8027ede:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027ee2:	e778      	b.n	8027dd6 <__ieee754_atan2+0x3e>
 8027ee4:	f3af 8000 	nop.w
 8027ee8:	33145c07 	.word	0x33145c07
 8027eec:	3ca1a626 	.word	0x3ca1a626
 8027ef0:	54442d18 	.word	0x54442d18
 8027ef4:	400921fb 	.word	0x400921fb
 8027ef8:	54442d18 	.word	0x54442d18
 8027efc:	3ff921fb 	.word	0x3ff921fb
 8027f00:	54442d18 	.word	0x54442d18
 8027f04:	3fe921fb 	.word	0x3fe921fb
 8027f08:	08031c30 	.word	0x08031c30
 8027f0c:	08031c18 	.word	0x08031c18
 8027f10:	54442d18 	.word	0x54442d18
 8027f14:	c00921fb 	.word	0xc00921fb
 8027f18:	54442d18 	.word	0x54442d18
 8027f1c:	bff921fb 	.word	0xbff921fb
 8027f20:	7ff00000 	.word	0x7ff00000
 8027f24:	00000000 	.word	0x00000000

08027f28 <atan>:
 8027f28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f2c:	ec55 4b10 	vmov	r4, r5, d0
 8027f30:	4bbf      	ldr	r3, [pc, #764]	@ (8028230 <atan+0x308>)
 8027f32:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8027f36:	429e      	cmp	r6, r3
 8027f38:	46ab      	mov	fp, r5
 8027f3a:	d918      	bls.n	8027f6e <atan+0x46>
 8027f3c:	4bbd      	ldr	r3, [pc, #756]	@ (8028234 <atan+0x30c>)
 8027f3e:	429e      	cmp	r6, r3
 8027f40:	d801      	bhi.n	8027f46 <atan+0x1e>
 8027f42:	d109      	bne.n	8027f58 <atan+0x30>
 8027f44:	b144      	cbz	r4, 8027f58 <atan+0x30>
 8027f46:	4622      	mov	r2, r4
 8027f48:	462b      	mov	r3, r5
 8027f4a:	4620      	mov	r0, r4
 8027f4c:	4629      	mov	r1, r5
 8027f4e:	f7e0 f8e5 	bl	800811c <__adddf3>
 8027f52:	4604      	mov	r4, r0
 8027f54:	460d      	mov	r5, r1
 8027f56:	e006      	b.n	8027f66 <atan+0x3e>
 8027f58:	f1bb 0f00 	cmp.w	fp, #0
 8027f5c:	f340 812b 	ble.w	80281b6 <atan+0x28e>
 8027f60:	a597      	add	r5, pc, #604	@ (adr r5, 80281c0 <atan+0x298>)
 8027f62:	e9d5 4500 	ldrd	r4, r5, [r5]
 8027f66:	ec45 4b10 	vmov	d0, r4, r5
 8027f6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027f6e:	4bb2      	ldr	r3, [pc, #712]	@ (8028238 <atan+0x310>)
 8027f70:	429e      	cmp	r6, r3
 8027f72:	d813      	bhi.n	8027f9c <atan+0x74>
 8027f74:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8027f78:	429e      	cmp	r6, r3
 8027f7a:	d80c      	bhi.n	8027f96 <atan+0x6e>
 8027f7c:	a392      	add	r3, pc, #584	@ (adr r3, 80281c8 <atan+0x2a0>)
 8027f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027f82:	4620      	mov	r0, r4
 8027f84:	4629      	mov	r1, r5
 8027f86:	f7e0 f8c9 	bl	800811c <__adddf3>
 8027f8a:	4bac      	ldr	r3, [pc, #688]	@ (802823c <atan+0x314>)
 8027f8c:	2200      	movs	r2, #0
 8027f8e:	f7e0 fd0b 	bl	80089a8 <__aeabi_dcmpgt>
 8027f92:	2800      	cmp	r0, #0
 8027f94:	d1e7      	bne.n	8027f66 <atan+0x3e>
 8027f96:	f04f 3aff 	mov.w	sl, #4294967295
 8027f9a:	e029      	b.n	8027ff0 <atan+0xc8>
 8027f9c:	f000 f95c 	bl	8028258 <fabs>
 8027fa0:	4ba7      	ldr	r3, [pc, #668]	@ (8028240 <atan+0x318>)
 8027fa2:	429e      	cmp	r6, r3
 8027fa4:	ec55 4b10 	vmov	r4, r5, d0
 8027fa8:	f200 80bc 	bhi.w	8028124 <atan+0x1fc>
 8027fac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8027fb0:	429e      	cmp	r6, r3
 8027fb2:	f200 809e 	bhi.w	80280f2 <atan+0x1ca>
 8027fb6:	4622      	mov	r2, r4
 8027fb8:	462b      	mov	r3, r5
 8027fba:	4620      	mov	r0, r4
 8027fbc:	4629      	mov	r1, r5
 8027fbe:	f7e0 f8ad 	bl	800811c <__adddf3>
 8027fc2:	4b9e      	ldr	r3, [pc, #632]	@ (802823c <atan+0x314>)
 8027fc4:	2200      	movs	r2, #0
 8027fc6:	f7e0 f8a7 	bl	8008118 <__aeabi_dsub>
 8027fca:	2200      	movs	r2, #0
 8027fcc:	4606      	mov	r6, r0
 8027fce:	460f      	mov	r7, r1
 8027fd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8027fd4:	4620      	mov	r0, r4
 8027fd6:	4629      	mov	r1, r5
 8027fd8:	f7e0 f8a0 	bl	800811c <__adddf3>
 8027fdc:	4602      	mov	r2, r0
 8027fde:	460b      	mov	r3, r1
 8027fe0:	4630      	mov	r0, r6
 8027fe2:	4639      	mov	r1, r7
 8027fe4:	f7e0 fb7a 	bl	80086dc <__aeabi_ddiv>
 8027fe8:	f04f 0a00 	mov.w	sl, #0
 8027fec:	4604      	mov	r4, r0
 8027fee:	460d      	mov	r5, r1
 8027ff0:	4622      	mov	r2, r4
 8027ff2:	462b      	mov	r3, r5
 8027ff4:	4620      	mov	r0, r4
 8027ff6:	4629      	mov	r1, r5
 8027ff8:	f7e0 fa46 	bl	8008488 <__aeabi_dmul>
 8027ffc:	4602      	mov	r2, r0
 8027ffe:	460b      	mov	r3, r1
 8028000:	4680      	mov	r8, r0
 8028002:	4689      	mov	r9, r1
 8028004:	f7e0 fa40 	bl	8008488 <__aeabi_dmul>
 8028008:	a371      	add	r3, pc, #452	@ (adr r3, 80281d0 <atan+0x2a8>)
 802800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802800e:	4606      	mov	r6, r0
 8028010:	460f      	mov	r7, r1
 8028012:	f7e0 fa39 	bl	8008488 <__aeabi_dmul>
 8028016:	a370      	add	r3, pc, #448	@ (adr r3, 80281d8 <atan+0x2b0>)
 8028018:	e9d3 2300 	ldrd	r2, r3, [r3]
 802801c:	f7e0 f87e 	bl	800811c <__adddf3>
 8028020:	4632      	mov	r2, r6
 8028022:	463b      	mov	r3, r7
 8028024:	f7e0 fa30 	bl	8008488 <__aeabi_dmul>
 8028028:	a36d      	add	r3, pc, #436	@ (adr r3, 80281e0 <atan+0x2b8>)
 802802a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802802e:	f7e0 f875 	bl	800811c <__adddf3>
 8028032:	4632      	mov	r2, r6
 8028034:	463b      	mov	r3, r7
 8028036:	f7e0 fa27 	bl	8008488 <__aeabi_dmul>
 802803a:	a36b      	add	r3, pc, #428	@ (adr r3, 80281e8 <atan+0x2c0>)
 802803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028040:	f7e0 f86c 	bl	800811c <__adddf3>
 8028044:	4632      	mov	r2, r6
 8028046:	463b      	mov	r3, r7
 8028048:	f7e0 fa1e 	bl	8008488 <__aeabi_dmul>
 802804c:	a368      	add	r3, pc, #416	@ (adr r3, 80281f0 <atan+0x2c8>)
 802804e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028052:	f7e0 f863 	bl	800811c <__adddf3>
 8028056:	4632      	mov	r2, r6
 8028058:	463b      	mov	r3, r7
 802805a:	f7e0 fa15 	bl	8008488 <__aeabi_dmul>
 802805e:	a366      	add	r3, pc, #408	@ (adr r3, 80281f8 <atan+0x2d0>)
 8028060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028064:	f7e0 f85a 	bl	800811c <__adddf3>
 8028068:	4642      	mov	r2, r8
 802806a:	464b      	mov	r3, r9
 802806c:	f7e0 fa0c 	bl	8008488 <__aeabi_dmul>
 8028070:	a363      	add	r3, pc, #396	@ (adr r3, 8028200 <atan+0x2d8>)
 8028072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028076:	4680      	mov	r8, r0
 8028078:	4689      	mov	r9, r1
 802807a:	4630      	mov	r0, r6
 802807c:	4639      	mov	r1, r7
 802807e:	f7e0 fa03 	bl	8008488 <__aeabi_dmul>
 8028082:	a361      	add	r3, pc, #388	@ (adr r3, 8028208 <atan+0x2e0>)
 8028084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028088:	f7e0 f846 	bl	8008118 <__aeabi_dsub>
 802808c:	4632      	mov	r2, r6
 802808e:	463b      	mov	r3, r7
 8028090:	f7e0 f9fa 	bl	8008488 <__aeabi_dmul>
 8028094:	a35e      	add	r3, pc, #376	@ (adr r3, 8028210 <atan+0x2e8>)
 8028096:	e9d3 2300 	ldrd	r2, r3, [r3]
 802809a:	f7e0 f83d 	bl	8008118 <__aeabi_dsub>
 802809e:	4632      	mov	r2, r6
 80280a0:	463b      	mov	r3, r7
 80280a2:	f7e0 f9f1 	bl	8008488 <__aeabi_dmul>
 80280a6:	a35c      	add	r3, pc, #368	@ (adr r3, 8028218 <atan+0x2f0>)
 80280a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80280ac:	f7e0 f834 	bl	8008118 <__aeabi_dsub>
 80280b0:	4632      	mov	r2, r6
 80280b2:	463b      	mov	r3, r7
 80280b4:	f7e0 f9e8 	bl	8008488 <__aeabi_dmul>
 80280b8:	a359      	add	r3, pc, #356	@ (adr r3, 8028220 <atan+0x2f8>)
 80280ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80280be:	f7e0 f82b 	bl	8008118 <__aeabi_dsub>
 80280c2:	4632      	mov	r2, r6
 80280c4:	463b      	mov	r3, r7
 80280c6:	f7e0 f9df 	bl	8008488 <__aeabi_dmul>
 80280ca:	4602      	mov	r2, r0
 80280cc:	460b      	mov	r3, r1
 80280ce:	4640      	mov	r0, r8
 80280d0:	4649      	mov	r1, r9
 80280d2:	f7e0 f823 	bl	800811c <__adddf3>
 80280d6:	4622      	mov	r2, r4
 80280d8:	462b      	mov	r3, r5
 80280da:	f7e0 f9d5 	bl	8008488 <__aeabi_dmul>
 80280de:	f1ba 3fff 	cmp.w	sl, #4294967295
 80280e2:	4602      	mov	r2, r0
 80280e4:	460b      	mov	r3, r1
 80280e6:	d148      	bne.n	802817a <atan+0x252>
 80280e8:	4620      	mov	r0, r4
 80280ea:	4629      	mov	r1, r5
 80280ec:	f7e0 f814 	bl	8008118 <__aeabi_dsub>
 80280f0:	e72f      	b.n	8027f52 <atan+0x2a>
 80280f2:	4b52      	ldr	r3, [pc, #328]	@ (802823c <atan+0x314>)
 80280f4:	2200      	movs	r2, #0
 80280f6:	4620      	mov	r0, r4
 80280f8:	4629      	mov	r1, r5
 80280fa:	f7e0 f80d 	bl	8008118 <__aeabi_dsub>
 80280fe:	4b4f      	ldr	r3, [pc, #316]	@ (802823c <atan+0x314>)
 8028100:	4606      	mov	r6, r0
 8028102:	460f      	mov	r7, r1
 8028104:	2200      	movs	r2, #0
 8028106:	4620      	mov	r0, r4
 8028108:	4629      	mov	r1, r5
 802810a:	f7e0 f807 	bl	800811c <__adddf3>
 802810e:	4602      	mov	r2, r0
 8028110:	460b      	mov	r3, r1
 8028112:	4630      	mov	r0, r6
 8028114:	4639      	mov	r1, r7
 8028116:	f7e0 fae1 	bl	80086dc <__aeabi_ddiv>
 802811a:	f04f 0a01 	mov.w	sl, #1
 802811e:	4604      	mov	r4, r0
 8028120:	460d      	mov	r5, r1
 8028122:	e765      	b.n	8027ff0 <atan+0xc8>
 8028124:	4b47      	ldr	r3, [pc, #284]	@ (8028244 <atan+0x31c>)
 8028126:	429e      	cmp	r6, r3
 8028128:	d21c      	bcs.n	8028164 <atan+0x23c>
 802812a:	4b47      	ldr	r3, [pc, #284]	@ (8028248 <atan+0x320>)
 802812c:	2200      	movs	r2, #0
 802812e:	4620      	mov	r0, r4
 8028130:	4629      	mov	r1, r5
 8028132:	f7df fff1 	bl	8008118 <__aeabi_dsub>
 8028136:	4b44      	ldr	r3, [pc, #272]	@ (8028248 <atan+0x320>)
 8028138:	4606      	mov	r6, r0
 802813a:	460f      	mov	r7, r1
 802813c:	2200      	movs	r2, #0
 802813e:	4620      	mov	r0, r4
 8028140:	4629      	mov	r1, r5
 8028142:	f7e0 f9a1 	bl	8008488 <__aeabi_dmul>
 8028146:	4b3d      	ldr	r3, [pc, #244]	@ (802823c <atan+0x314>)
 8028148:	2200      	movs	r2, #0
 802814a:	f7df ffe7 	bl	800811c <__adddf3>
 802814e:	4602      	mov	r2, r0
 8028150:	460b      	mov	r3, r1
 8028152:	4630      	mov	r0, r6
 8028154:	4639      	mov	r1, r7
 8028156:	f7e0 fac1 	bl	80086dc <__aeabi_ddiv>
 802815a:	f04f 0a02 	mov.w	sl, #2
 802815e:	4604      	mov	r4, r0
 8028160:	460d      	mov	r5, r1
 8028162:	e745      	b.n	8027ff0 <atan+0xc8>
 8028164:	4622      	mov	r2, r4
 8028166:	462b      	mov	r3, r5
 8028168:	4938      	ldr	r1, [pc, #224]	@ (802824c <atan+0x324>)
 802816a:	2000      	movs	r0, #0
 802816c:	f7e0 fab6 	bl	80086dc <__aeabi_ddiv>
 8028170:	f04f 0a03 	mov.w	sl, #3
 8028174:	4604      	mov	r4, r0
 8028176:	460d      	mov	r5, r1
 8028178:	e73a      	b.n	8027ff0 <atan+0xc8>
 802817a:	4b35      	ldr	r3, [pc, #212]	@ (8028250 <atan+0x328>)
 802817c:	4e35      	ldr	r6, [pc, #212]	@ (8028254 <atan+0x32c>)
 802817e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8028182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028186:	f7df ffc7 	bl	8008118 <__aeabi_dsub>
 802818a:	4622      	mov	r2, r4
 802818c:	462b      	mov	r3, r5
 802818e:	f7df ffc3 	bl	8008118 <__aeabi_dsub>
 8028192:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8028196:	4602      	mov	r2, r0
 8028198:	460b      	mov	r3, r1
 802819a:	e9d6 0100 	ldrd	r0, r1, [r6]
 802819e:	f7df ffbb 	bl	8008118 <__aeabi_dsub>
 80281a2:	f1bb 0f00 	cmp.w	fp, #0
 80281a6:	4604      	mov	r4, r0
 80281a8:	460d      	mov	r5, r1
 80281aa:	f6bf aedc 	bge.w	8027f66 <atan+0x3e>
 80281ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80281b2:	461d      	mov	r5, r3
 80281b4:	e6d7      	b.n	8027f66 <atan+0x3e>
 80281b6:	a51c      	add	r5, pc, #112	@ (adr r5, 8028228 <atan+0x300>)
 80281b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80281bc:	e6d3      	b.n	8027f66 <atan+0x3e>
 80281be:	bf00      	nop
 80281c0:	54442d18 	.word	0x54442d18
 80281c4:	3ff921fb 	.word	0x3ff921fb
 80281c8:	8800759c 	.word	0x8800759c
 80281cc:	7e37e43c 	.word	0x7e37e43c
 80281d0:	e322da11 	.word	0xe322da11
 80281d4:	3f90ad3a 	.word	0x3f90ad3a
 80281d8:	24760deb 	.word	0x24760deb
 80281dc:	3fa97b4b 	.word	0x3fa97b4b
 80281e0:	a0d03d51 	.word	0xa0d03d51
 80281e4:	3fb10d66 	.word	0x3fb10d66
 80281e8:	c54c206e 	.word	0xc54c206e
 80281ec:	3fb745cd 	.word	0x3fb745cd
 80281f0:	920083ff 	.word	0x920083ff
 80281f4:	3fc24924 	.word	0x3fc24924
 80281f8:	5555550d 	.word	0x5555550d
 80281fc:	3fd55555 	.word	0x3fd55555
 8028200:	2c6a6c2f 	.word	0x2c6a6c2f
 8028204:	bfa2b444 	.word	0xbfa2b444
 8028208:	52defd9a 	.word	0x52defd9a
 802820c:	3fadde2d 	.word	0x3fadde2d
 8028210:	af749a6d 	.word	0xaf749a6d
 8028214:	3fb3b0f2 	.word	0x3fb3b0f2
 8028218:	fe231671 	.word	0xfe231671
 802821c:	3fbc71c6 	.word	0x3fbc71c6
 8028220:	9998ebc4 	.word	0x9998ebc4
 8028224:	3fc99999 	.word	0x3fc99999
 8028228:	54442d18 	.word	0x54442d18
 802822c:	bff921fb 	.word	0xbff921fb
 8028230:	440fffff 	.word	0x440fffff
 8028234:	7ff00000 	.word	0x7ff00000
 8028238:	3fdbffff 	.word	0x3fdbffff
 802823c:	3ff00000 	.word	0x3ff00000
 8028240:	3ff2ffff 	.word	0x3ff2ffff
 8028244:	40038000 	.word	0x40038000
 8028248:	3ff80000 	.word	0x3ff80000
 802824c:	bff00000 	.word	0xbff00000
 8028250:	08031c48 	.word	0x08031c48
 8028254:	08031c68 	.word	0x08031c68

08028258 <fabs>:
 8028258:	ec51 0b10 	vmov	r0, r1, d0
 802825c:	4602      	mov	r2, r0
 802825e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8028262:	ec43 2b10 	vmov	d0, r2, r3
 8028266:	4770      	bx	lr

08028268 <__kernel_cosf>:
 8028268:	ee10 3a10 	vmov	r3, s0
 802826c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8028270:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8028274:	eef0 6a40 	vmov.f32	s13, s0
 8028278:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802827c:	d204      	bcs.n	8028288 <__kernel_cosf+0x20>
 802827e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8028282:	ee17 2a90 	vmov	r2, s15
 8028286:	b342      	cbz	r2, 80282da <__kernel_cosf+0x72>
 8028288:	ee26 7aa6 	vmul.f32	s14, s13, s13
 802828c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80282f8 <__kernel_cosf+0x90>
 8028290:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80282fc <__kernel_cosf+0x94>
 8028294:	4a1a      	ldr	r2, [pc, #104]	@ (8028300 <__kernel_cosf+0x98>)
 8028296:	eea7 6a27 	vfma.f32	s12, s14, s15
 802829a:	4293      	cmp	r3, r2
 802829c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8028304 <__kernel_cosf+0x9c>
 80282a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80282a4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8028308 <__kernel_cosf+0xa0>
 80282a8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80282ac:	eddf 7a17 	vldr	s15, [pc, #92]	@ 802830c <__kernel_cosf+0xa4>
 80282b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80282b4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8028310 <__kernel_cosf+0xa8>
 80282b8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80282bc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80282c0:	ee26 6a07 	vmul.f32	s12, s12, s14
 80282c4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80282c8:	eee7 0a06 	vfma.f32	s1, s14, s12
 80282cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80282d0:	d804      	bhi.n	80282dc <__kernel_cosf+0x74>
 80282d2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80282d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80282da:	4770      	bx	lr
 80282dc:	4a0d      	ldr	r2, [pc, #52]	@ (8028314 <__kernel_cosf+0xac>)
 80282de:	4293      	cmp	r3, r2
 80282e0:	bf9a      	itte	ls
 80282e2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80282e6:	ee07 3a10 	vmovls	s14, r3
 80282ea:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80282ee:	ee30 0a47 	vsub.f32	s0, s0, s14
 80282f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80282f6:	e7ec      	b.n	80282d2 <__kernel_cosf+0x6a>
 80282f8:	ad47d74e 	.word	0xad47d74e
 80282fc:	310f74f6 	.word	0x310f74f6
 8028300:	3e999999 	.word	0x3e999999
 8028304:	b493f27c 	.word	0xb493f27c
 8028308:	37d00d01 	.word	0x37d00d01
 802830c:	bab60b61 	.word	0xbab60b61
 8028310:	3d2aaaab 	.word	0x3d2aaaab
 8028314:	3f480000 	.word	0x3f480000

08028318 <__kernel_sinf>:
 8028318:	ee10 3a10 	vmov	r3, s0
 802831c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8028320:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8028324:	d204      	bcs.n	8028330 <__kernel_sinf+0x18>
 8028326:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802832a:	ee17 3a90 	vmov	r3, s15
 802832e:	b35b      	cbz	r3, 8028388 <__kernel_sinf+0x70>
 8028330:	ee20 7a00 	vmul.f32	s14, s0, s0
 8028334:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802838c <__kernel_sinf+0x74>
 8028338:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8028390 <__kernel_sinf+0x78>
 802833c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8028340:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8028394 <__kernel_sinf+0x7c>
 8028344:	eee6 7a07 	vfma.f32	s15, s12, s14
 8028348:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8028398 <__kernel_sinf+0x80>
 802834c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8028350:	eddf 7a12 	vldr	s15, [pc, #72]	@ 802839c <__kernel_sinf+0x84>
 8028354:	ee60 6a07 	vmul.f32	s13, s0, s14
 8028358:	eee6 7a07 	vfma.f32	s15, s12, s14
 802835c:	b930      	cbnz	r0, 802836c <__kernel_sinf+0x54>
 802835e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80283a0 <__kernel_sinf+0x88>
 8028362:	eea7 6a27 	vfma.f32	s12, s14, s15
 8028366:	eea6 0a26 	vfma.f32	s0, s12, s13
 802836a:	4770      	bx	lr
 802836c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8028370:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8028374:	eee0 7a86 	vfma.f32	s15, s1, s12
 8028378:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802837c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80283a4 <__kernel_sinf+0x8c>
 8028380:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8028384:	ee30 0a60 	vsub.f32	s0, s0, s1
 8028388:	4770      	bx	lr
 802838a:	bf00      	nop
 802838c:	2f2ec9d3 	.word	0x2f2ec9d3
 8028390:	b2d72f34 	.word	0xb2d72f34
 8028394:	3638ef1b 	.word	0x3638ef1b
 8028398:	b9500d01 	.word	0xb9500d01
 802839c:	3c088889 	.word	0x3c088889
 80283a0:	be2aaaab 	.word	0xbe2aaaab
 80283a4:	3e2aaaab 	.word	0x3e2aaaab

080283a8 <__kernel_tanf>:
 80283a8:	b508      	push	{r3, lr}
 80283aa:	ee10 3a10 	vmov	r3, s0
 80283ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80283b2:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 80283b6:	eef0 7a40 	vmov.f32	s15, s0
 80283ba:	d217      	bcs.n	80283ec <__kernel_tanf+0x44>
 80283bc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80283c0:	ee17 1a10 	vmov	r1, s14
 80283c4:	bb41      	cbnz	r1, 8028418 <__kernel_tanf+0x70>
 80283c6:	1c43      	adds	r3, r0, #1
 80283c8:	4313      	orrs	r3, r2
 80283ca:	d108      	bne.n	80283de <__kernel_tanf+0x36>
 80283cc:	f000 fccc 	bl	8028d68 <fabsf>
 80283d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80283d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80283d8:	eeb0 0a67 	vmov.f32	s0, s15
 80283dc:	bd08      	pop	{r3, pc}
 80283de:	2801      	cmp	r0, #1
 80283e0:	d0fa      	beq.n	80283d8 <__kernel_tanf+0x30>
 80283e2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80283e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80283ea:	e7f5      	b.n	80283d8 <__kernel_tanf+0x30>
 80283ec:	494c      	ldr	r1, [pc, #304]	@ (8028520 <__kernel_tanf+0x178>)
 80283ee:	428a      	cmp	r2, r1
 80283f0:	d312      	bcc.n	8028418 <__kernel_tanf+0x70>
 80283f2:	2b00      	cmp	r3, #0
 80283f4:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8028524 <__kernel_tanf+0x17c>
 80283f8:	bfb8      	it	lt
 80283fa:	eef1 7a40 	vneglt.f32	s15, s0
 80283fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8028402:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8028528 <__kernel_tanf+0x180>
 8028406:	bfb8      	it	lt
 8028408:	eef1 0a60 	vneglt.f32	s1, s1
 802840c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8028410:	eddf 0a46 	vldr	s1, [pc, #280]	@ 802852c <__kernel_tanf+0x184>
 8028414:	ee77 7a87 	vadd.f32	s15, s15, s14
 8028418:	ee67 6aa7 	vmul.f32	s13, s15, s15
 802841c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8028530 <__kernel_tanf+0x188>
 8028420:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8028534 <__kernel_tanf+0x18c>
 8028424:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8028538 <__kernel_tanf+0x190>
 8028428:	493d      	ldr	r1, [pc, #244]	@ (8028520 <__kernel_tanf+0x178>)
 802842a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 802842e:	428a      	cmp	r2, r1
 8028430:	eea7 6a25 	vfma.f32	s12, s14, s11
 8028434:	eddf 5a41 	vldr	s11, [pc, #260]	@ 802853c <__kernel_tanf+0x194>
 8028438:	eee6 5a07 	vfma.f32	s11, s12, s14
 802843c:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8028540 <__kernel_tanf+0x198>
 8028440:	eea5 6a87 	vfma.f32	s12, s11, s14
 8028444:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8028544 <__kernel_tanf+0x19c>
 8028448:	eee6 5a07 	vfma.f32	s11, s12, s14
 802844c:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8028548 <__kernel_tanf+0x1a0>
 8028450:	eea5 6a87 	vfma.f32	s12, s11, s14
 8028454:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 802854c <__kernel_tanf+0x1a4>
 8028458:	eee7 5a05 	vfma.f32	s11, s14, s10
 802845c:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8028550 <__kernel_tanf+0x1a8>
 8028460:	eea5 5a87 	vfma.f32	s10, s11, s14
 8028464:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8028554 <__kernel_tanf+0x1ac>
 8028468:	eee5 5a07 	vfma.f32	s11, s10, s14
 802846c:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8028558 <__kernel_tanf+0x1b0>
 8028470:	eea5 5a87 	vfma.f32	s10, s11, s14
 8028474:	eddf 5a39 	vldr	s11, [pc, #228]	@ 802855c <__kernel_tanf+0x1b4>
 8028478:	eee5 5a07 	vfma.f32	s11, s10, s14
 802847c:	eeb0 7a46 	vmov.f32	s14, s12
 8028480:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8028484:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8028488:	eeb0 6a60 	vmov.f32	s12, s1
 802848c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8028490:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8028560 <__kernel_tanf+0x1b8>
 8028494:	eee6 0a26 	vfma.f32	s1, s12, s13
 8028498:	eee5 0a07 	vfma.f32	s1, s10, s14
 802849c:	ee37 6aa0 	vadd.f32	s12, s15, s1
 80284a0:	d31d      	bcc.n	80284de <__kernel_tanf+0x136>
 80284a2:	ee07 0a10 	vmov	s14, r0
 80284a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80284aa:	ee26 5a06 	vmul.f32	s10, s12, s12
 80284ae:	ee36 6a07 	vadd.f32	s12, s12, s14
 80284b2:	179b      	asrs	r3, r3, #30
 80284b4:	eec5 5a06 	vdiv.f32	s11, s10, s12
 80284b8:	f003 0302 	and.w	r3, r3, #2
 80284bc:	f1c3 0301 	rsb	r3, r3, #1
 80284c0:	ee06 3a90 	vmov	s13, r3
 80284c4:	ee35 6ae0 	vsub.f32	s12, s11, s1
 80284c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80284cc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80284d0:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80284d4:	eea7 7ac6 	vfms.f32	s14, s15, s12
 80284d8:	ee66 7a87 	vmul.f32	s15, s13, s14
 80284dc:	e77c      	b.n	80283d8 <__kernel_tanf+0x30>
 80284de:	2801      	cmp	r0, #1
 80284e0:	d01b      	beq.n	802851a <__kernel_tanf+0x172>
 80284e2:	4b20      	ldr	r3, [pc, #128]	@ (8028564 <__kernel_tanf+0x1bc>)
 80284e4:	ee16 2a10 	vmov	r2, s12
 80284e8:	401a      	ands	r2, r3
 80284ea:	ee05 2a90 	vmov	s11, r2
 80284ee:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80284f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80284f6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80284fa:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80284fe:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8028502:	ee16 2a90 	vmov	r2, s13
 8028506:	4013      	ands	r3, r2
 8028508:	ee07 3a90 	vmov	s15, r3
 802850c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8028510:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8028514:	eee7 7a26 	vfma.f32	s15, s14, s13
 8028518:	e75e      	b.n	80283d8 <__kernel_tanf+0x30>
 802851a:	eef0 7a46 	vmov.f32	s15, s12
 802851e:	e75b      	b.n	80283d8 <__kernel_tanf+0x30>
 8028520:	3f2ca140 	.word	0x3f2ca140
 8028524:	3f490fda 	.word	0x3f490fda
 8028528:	33222168 	.word	0x33222168
 802852c:	00000000 	.word	0x00000000
 8028530:	b79bae5f 	.word	0xb79bae5f
 8028534:	38a3f445 	.word	0x38a3f445
 8028538:	37d95384 	.word	0x37d95384
 802853c:	3a1a26c8 	.word	0x3a1a26c8
 8028540:	3b6b6916 	.word	0x3b6b6916
 8028544:	3cb327a4 	.word	0x3cb327a4
 8028548:	3e088889 	.word	0x3e088889
 802854c:	3895c07a 	.word	0x3895c07a
 8028550:	398137b9 	.word	0x398137b9
 8028554:	3abede48 	.word	0x3abede48
 8028558:	3c11371f 	.word	0x3c11371f
 802855c:	3d5d0dd1 	.word	0x3d5d0dd1
 8028560:	3eaaaaab 	.word	0x3eaaaaab
 8028564:	fffff000 	.word	0xfffff000

08028568 <__ieee754_powf>:
 8028568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802856c:	ee10 4a90 	vmov	r4, s1
 8028570:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8028574:	ed2d 8b02 	vpush	{d8}
 8028578:	ee10 6a10 	vmov	r6, s0
 802857c:	eeb0 8a40 	vmov.f32	s16, s0
 8028580:	eef0 8a60 	vmov.f32	s17, s1
 8028584:	d10c      	bne.n	80285a0 <__ieee754_powf+0x38>
 8028586:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 802858a:	0076      	lsls	r6, r6, #1
 802858c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8028590:	f240 829c 	bls.w	8028acc <__ieee754_powf+0x564>
 8028594:	ee38 0a28 	vadd.f32	s0, s16, s17
 8028598:	ecbd 8b02 	vpop	{d8}
 802859c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80285a0:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80285a4:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80285a8:	d802      	bhi.n	80285b0 <__ieee754_powf+0x48>
 80285aa:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80285ae:	d908      	bls.n	80285c2 <__ieee754_powf+0x5a>
 80285b0:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80285b4:	d1ee      	bne.n	8028594 <__ieee754_powf+0x2c>
 80285b6:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80285ba:	0064      	lsls	r4, r4, #1
 80285bc:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80285c0:	e7e6      	b.n	8028590 <__ieee754_powf+0x28>
 80285c2:	2e00      	cmp	r6, #0
 80285c4:	da1e      	bge.n	8028604 <__ieee754_powf+0x9c>
 80285c6:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80285ca:	d22b      	bcs.n	8028624 <__ieee754_powf+0xbc>
 80285cc:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80285d0:	d332      	bcc.n	8028638 <__ieee754_powf+0xd0>
 80285d2:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80285d6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80285da:	fa49 f503 	asr.w	r5, r9, r3
 80285de:	fa05 f303 	lsl.w	r3, r5, r3
 80285e2:	454b      	cmp	r3, r9
 80285e4:	d126      	bne.n	8028634 <__ieee754_powf+0xcc>
 80285e6:	f005 0501 	and.w	r5, r5, #1
 80285ea:	f1c5 0502 	rsb	r5, r5, #2
 80285ee:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80285f2:	d122      	bne.n	802863a <__ieee754_powf+0xd2>
 80285f4:	2c00      	cmp	r4, #0
 80285f6:	f280 826f 	bge.w	8028ad8 <__ieee754_powf+0x570>
 80285fa:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80285fe:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8028602:	e7c9      	b.n	8028598 <__ieee754_powf+0x30>
 8028604:	2500      	movs	r5, #0
 8028606:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 802860a:	d1f0      	bne.n	80285ee <__ieee754_powf+0x86>
 802860c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8028610:	f000 825c 	beq.w	8028acc <__ieee754_powf+0x564>
 8028614:	d908      	bls.n	8028628 <__ieee754_powf+0xc0>
 8028616:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8028978 <__ieee754_powf+0x410>
 802861a:	2c00      	cmp	r4, #0
 802861c:	bfa8      	it	ge
 802861e:	eeb0 0a68 	vmovge.f32	s0, s17
 8028622:	e7b9      	b.n	8028598 <__ieee754_powf+0x30>
 8028624:	2502      	movs	r5, #2
 8028626:	e7ee      	b.n	8028606 <__ieee754_powf+0x9e>
 8028628:	2c00      	cmp	r4, #0
 802862a:	f280 8252 	bge.w	8028ad2 <__ieee754_powf+0x56a>
 802862e:	eeb1 0a68 	vneg.f32	s0, s17
 8028632:	e7b1      	b.n	8028598 <__ieee754_powf+0x30>
 8028634:	2500      	movs	r5, #0
 8028636:	e7da      	b.n	80285ee <__ieee754_powf+0x86>
 8028638:	2500      	movs	r5, #0
 802863a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 802863e:	d102      	bne.n	8028646 <__ieee754_powf+0xde>
 8028640:	ee28 0a08 	vmul.f32	s0, s16, s16
 8028644:	e7a8      	b.n	8028598 <__ieee754_powf+0x30>
 8028646:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 802864a:	d109      	bne.n	8028660 <__ieee754_powf+0xf8>
 802864c:	2e00      	cmp	r6, #0
 802864e:	db07      	blt.n	8028660 <__ieee754_powf+0xf8>
 8028650:	eeb0 0a48 	vmov.f32	s0, s16
 8028654:	ecbd 8b02 	vpop	{d8}
 8028658:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802865c:	f7ff bacf 	b.w	8027bfe <__ieee754_sqrtf>
 8028660:	eeb0 0a48 	vmov.f32	s0, s16
 8028664:	f000 fb80 	bl	8028d68 <fabsf>
 8028668:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 802866c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8028670:	4647      	mov	r7, r8
 8028672:	d002      	beq.n	802867a <__ieee754_powf+0x112>
 8028674:	f1b8 0f00 	cmp.w	r8, #0
 8028678:	d117      	bne.n	80286aa <__ieee754_powf+0x142>
 802867a:	2c00      	cmp	r4, #0
 802867c:	bfbc      	itt	lt
 802867e:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8028682:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8028686:	2e00      	cmp	r6, #0
 8028688:	da86      	bge.n	8028598 <__ieee754_powf+0x30>
 802868a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 802868e:	ea58 0805 	orrs.w	r8, r8, r5
 8028692:	d104      	bne.n	802869e <__ieee754_powf+0x136>
 8028694:	ee70 7a40 	vsub.f32	s15, s0, s0
 8028698:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 802869c:	e77c      	b.n	8028598 <__ieee754_powf+0x30>
 802869e:	2d01      	cmp	r5, #1
 80286a0:	f47f af7a 	bne.w	8028598 <__ieee754_powf+0x30>
 80286a4:	eeb1 0a40 	vneg.f32	s0, s0
 80286a8:	e776      	b.n	8028598 <__ieee754_powf+0x30>
 80286aa:	0ff0      	lsrs	r0, r6, #31
 80286ac:	3801      	subs	r0, #1
 80286ae:	ea55 0300 	orrs.w	r3, r5, r0
 80286b2:	d104      	bne.n	80286be <__ieee754_powf+0x156>
 80286b4:	ee38 8a48 	vsub.f32	s16, s16, s16
 80286b8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80286bc:	e76c      	b.n	8028598 <__ieee754_powf+0x30>
 80286be:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80286c2:	d973      	bls.n	80287ac <__ieee754_powf+0x244>
 80286c4:	4bad      	ldr	r3, [pc, #692]	@ (802897c <__ieee754_powf+0x414>)
 80286c6:	4598      	cmp	r8, r3
 80286c8:	d808      	bhi.n	80286dc <__ieee754_powf+0x174>
 80286ca:	2c00      	cmp	r4, #0
 80286cc:	da0b      	bge.n	80286e6 <__ieee754_powf+0x17e>
 80286ce:	2000      	movs	r0, #0
 80286d0:	ecbd 8b02 	vpop	{d8}
 80286d4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80286d8:	f000 bbd4 	b.w	8028e84 <__math_oflowf>
 80286dc:	4ba8      	ldr	r3, [pc, #672]	@ (8028980 <__ieee754_powf+0x418>)
 80286de:	4598      	cmp	r8, r3
 80286e0:	d908      	bls.n	80286f4 <__ieee754_powf+0x18c>
 80286e2:	2c00      	cmp	r4, #0
 80286e4:	dcf3      	bgt.n	80286ce <__ieee754_powf+0x166>
 80286e6:	2000      	movs	r0, #0
 80286e8:	ecbd 8b02 	vpop	{d8}
 80286ec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80286f0:	f000 bbc2 	b.w	8028e78 <__math_uflowf>
 80286f4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80286f8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80286fc:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8028984 <__ieee754_powf+0x41c>
 8028700:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8028704:	eee0 6a67 	vfms.f32	s13, s0, s15
 8028708:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802870c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8028710:	ee20 7a00 	vmul.f32	s14, s0, s0
 8028714:	ee27 7a27 	vmul.f32	s14, s14, s15
 8028718:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8028988 <__ieee754_powf+0x420>
 802871c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8028720:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 802898c <__ieee754_powf+0x424>
 8028724:	eee0 7a07 	vfma.f32	s15, s0, s14
 8028728:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8028990 <__ieee754_powf+0x428>
 802872c:	eef0 6a67 	vmov.f32	s13, s15
 8028730:	eee0 6a07 	vfma.f32	s13, s0, s14
 8028734:	ee16 3a90 	vmov	r3, s13
 8028738:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 802873c:	f023 030f 	bic.w	r3, r3, #15
 8028740:	ee06 3a90 	vmov	s13, r3
 8028744:	eee0 6a47 	vfms.f32	s13, s0, s14
 8028748:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802874c:	3d01      	subs	r5, #1
 802874e:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8028752:	4305      	orrs	r5, r0
 8028754:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028758:	f024 040f 	bic.w	r4, r4, #15
 802875c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8028760:	bf18      	it	ne
 8028762:	eeb0 8a47 	vmovne.f32	s16, s14
 8028766:	ee07 4a10 	vmov	s14, r4
 802876a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 802876e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8028772:	ee07 3a90 	vmov	s15, r3
 8028776:	eee7 0a27 	vfma.f32	s1, s14, s15
 802877a:	ee07 4a10 	vmov	s14, r4
 802877e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8028782:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8028786:	ee17 1a10 	vmov	r1, s14
 802878a:	2900      	cmp	r1, #0
 802878c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8028790:	f340 80dd 	ble.w	802894e <__ieee754_powf+0x3e6>
 8028794:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8028798:	f240 80ca 	bls.w	8028930 <__ieee754_powf+0x3c8>
 802879c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80287a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80287a4:	bf4c      	ite	mi
 80287a6:	2001      	movmi	r0, #1
 80287a8:	2000      	movpl	r0, #0
 80287aa:	e791      	b.n	80286d0 <__ieee754_powf+0x168>
 80287ac:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80287b0:	bf01      	itttt	eq
 80287b2:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8028994 <__ieee754_powf+0x42c>
 80287b6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80287ba:	f06f 0317 	mvneq.w	r3, #23
 80287be:	ee17 7a90 	vmoveq	r7, s15
 80287c2:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80287c6:	bf18      	it	ne
 80287c8:	2300      	movne	r3, #0
 80287ca:	3a7f      	subs	r2, #127	@ 0x7f
 80287cc:	441a      	add	r2, r3
 80287ce:	4b72      	ldr	r3, [pc, #456]	@ (8028998 <__ieee754_powf+0x430>)
 80287d0:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80287d4:	429f      	cmp	r7, r3
 80287d6:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80287da:	dd06      	ble.n	80287ea <__ieee754_powf+0x282>
 80287dc:	4b6f      	ldr	r3, [pc, #444]	@ (802899c <__ieee754_powf+0x434>)
 80287de:	429f      	cmp	r7, r3
 80287e0:	f340 80a4 	ble.w	802892c <__ieee754_powf+0x3c4>
 80287e4:	3201      	adds	r2, #1
 80287e6:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80287ea:	2600      	movs	r6, #0
 80287ec:	4b6c      	ldr	r3, [pc, #432]	@ (80289a0 <__ieee754_powf+0x438>)
 80287ee:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80287f2:	ee07 1a10 	vmov	s14, r1
 80287f6:	edd3 5a00 	vldr	s11, [r3]
 80287fa:	4b6a      	ldr	r3, [pc, #424]	@ (80289a4 <__ieee754_powf+0x43c>)
 80287fc:	ee75 7a87 	vadd.f32	s15, s11, s14
 8028800:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8028804:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8028808:	1049      	asrs	r1, r1, #1
 802880a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 802880e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8028812:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8028816:	ee37 6a65 	vsub.f32	s12, s14, s11
 802881a:	ee07 1a90 	vmov	s15, r1
 802881e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8028822:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8028826:	ee15 7a10 	vmov	r7, s10
 802882a:	401f      	ands	r7, r3
 802882c:	ee06 7a90 	vmov	s13, r7
 8028830:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8028834:	ee37 7a65 	vsub.f32	s14, s14, s11
 8028838:	ee65 7a05 	vmul.f32	s15, s10, s10
 802883c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8028840:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80289a8 <__ieee754_powf+0x440>
 8028844:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80289ac <__ieee754_powf+0x444>
 8028848:	eee7 5a87 	vfma.f32	s11, s15, s14
 802884c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80289b0 <__ieee754_powf+0x448>
 8028850:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8028854:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8028984 <__ieee754_powf+0x41c>
 8028858:	eee7 5a27 	vfma.f32	s11, s14, s15
 802885c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80289b4 <__ieee754_powf+0x44c>
 8028860:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8028864:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80289b8 <__ieee754_powf+0x450>
 8028868:	ee26 6a24 	vmul.f32	s12, s12, s9
 802886c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8028870:	ee35 7a26 	vadd.f32	s14, s10, s13
 8028874:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8028878:	ee27 7a06 	vmul.f32	s14, s14, s12
 802887c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8028880:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8028884:	eef0 5a67 	vmov.f32	s11, s15
 8028888:	eee6 5aa6 	vfma.f32	s11, s13, s13
 802888c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8028890:	ee15 1a90 	vmov	r1, s11
 8028894:	4019      	ands	r1, r3
 8028896:	ee05 1a90 	vmov	s11, r1
 802889a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 802889e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80288a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80288a6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80288aa:	eee6 7a25 	vfma.f32	s15, s12, s11
 80288ae:	eeb0 6a67 	vmov.f32	s12, s15
 80288b2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80288b6:	ee16 1a10 	vmov	r1, s12
 80288ba:	4019      	ands	r1, r3
 80288bc:	ee06 1a10 	vmov	s12, r1
 80288c0:	eeb0 7a46 	vmov.f32	s14, s12
 80288c4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80288c8:	493c      	ldr	r1, [pc, #240]	@ (80289bc <__ieee754_powf+0x454>)
 80288ca:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80288ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80288d2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80289c0 <__ieee754_powf+0x458>
 80288d6:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80289c4 <__ieee754_powf+0x45c>
 80288da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80288de:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80289c8 <__ieee754_powf+0x460>
 80288e2:	eee6 7a07 	vfma.f32	s15, s12, s14
 80288e6:	ed91 7a00 	vldr	s14, [r1]
 80288ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80288ee:	ee07 2a10 	vmov	s14, r2
 80288f2:	eef0 6a67 	vmov.f32	s13, s15
 80288f6:	4a35      	ldr	r2, [pc, #212]	@ (80289cc <__ieee754_powf+0x464>)
 80288f8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80288fc:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8028900:	ed92 5a00 	vldr	s10, [r2]
 8028904:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8028908:	ee76 6a85 	vadd.f32	s13, s13, s10
 802890c:	ee76 6a87 	vadd.f32	s13, s13, s14
 8028910:	ee16 2a90 	vmov	r2, s13
 8028914:	4013      	ands	r3, r2
 8028916:	ee06 3a90 	vmov	s13, r3
 802891a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 802891e:	ee37 7a45 	vsub.f32	s14, s14, s10
 8028922:	eea6 7a65 	vfms.f32	s14, s12, s11
 8028926:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802892a:	e70f      	b.n	802874c <__ieee754_powf+0x1e4>
 802892c:	2601      	movs	r6, #1
 802892e:	e75d      	b.n	80287ec <__ieee754_powf+0x284>
 8028930:	d152      	bne.n	80289d8 <__ieee754_powf+0x470>
 8028932:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80289d0 <__ieee754_powf+0x468>
 8028936:	ee37 7a67 	vsub.f32	s14, s14, s15
 802893a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 802893e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8028942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028946:	f73f af29 	bgt.w	802879c <__ieee754_powf+0x234>
 802894a:	2386      	movs	r3, #134	@ 0x86
 802894c:	e048      	b.n	80289e0 <__ieee754_powf+0x478>
 802894e:	4a21      	ldr	r2, [pc, #132]	@ (80289d4 <__ieee754_powf+0x46c>)
 8028950:	4293      	cmp	r3, r2
 8028952:	d907      	bls.n	8028964 <__ieee754_powf+0x3fc>
 8028954:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8028958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802895c:	bf4c      	ite	mi
 802895e:	2001      	movmi	r0, #1
 8028960:	2000      	movpl	r0, #0
 8028962:	e6c1      	b.n	80286e8 <__ieee754_powf+0x180>
 8028964:	d138      	bne.n	80289d8 <__ieee754_powf+0x470>
 8028966:	ee37 7a67 	vsub.f32	s14, s14, s15
 802896a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 802896e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028972:	dbea      	blt.n	802894a <__ieee754_powf+0x3e2>
 8028974:	e7ee      	b.n	8028954 <__ieee754_powf+0x3ec>
 8028976:	bf00      	nop
 8028978:	00000000 	.word	0x00000000
 802897c:	3f7ffff3 	.word	0x3f7ffff3
 8028980:	3f800007 	.word	0x3f800007
 8028984:	3eaaaaab 	.word	0x3eaaaaab
 8028988:	3fb8aa3b 	.word	0x3fb8aa3b
 802898c:	36eca570 	.word	0x36eca570
 8028990:	3fb8aa00 	.word	0x3fb8aa00
 8028994:	4b800000 	.word	0x4b800000
 8028998:	001cc471 	.word	0x001cc471
 802899c:	005db3d6 	.word	0x005db3d6
 80289a0:	08031c98 	.word	0x08031c98
 80289a4:	fffff000 	.word	0xfffff000
 80289a8:	3e6c3255 	.word	0x3e6c3255
 80289ac:	3e53f142 	.word	0x3e53f142
 80289b0:	3e8ba305 	.word	0x3e8ba305
 80289b4:	3edb6db7 	.word	0x3edb6db7
 80289b8:	3f19999a 	.word	0x3f19999a
 80289bc:	08031c88 	.word	0x08031c88
 80289c0:	3f76384f 	.word	0x3f76384f
 80289c4:	3f763800 	.word	0x3f763800
 80289c8:	369dc3a0 	.word	0x369dc3a0
 80289cc:	08031c90 	.word	0x08031c90
 80289d0:	3338aa3c 	.word	0x3338aa3c
 80289d4:	43160000 	.word	0x43160000
 80289d8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80289dc:	d971      	bls.n	8028ac2 <__ieee754_powf+0x55a>
 80289de:	15db      	asrs	r3, r3, #23
 80289e0:	3b7e      	subs	r3, #126	@ 0x7e
 80289e2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80289e6:	4118      	asrs	r0, r3
 80289e8:	4408      	add	r0, r1
 80289ea:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80289ee:	4a3c      	ldr	r2, [pc, #240]	@ (8028ae0 <__ieee754_powf+0x578>)
 80289f0:	3b7f      	subs	r3, #127	@ 0x7f
 80289f2:	411a      	asrs	r2, r3
 80289f4:	4002      	ands	r2, r0
 80289f6:	ee07 2a10 	vmov	s14, r2
 80289fa:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80289fe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8028a02:	f1c3 0317 	rsb	r3, r3, #23
 8028a06:	4118      	asrs	r0, r3
 8028a08:	2900      	cmp	r1, #0
 8028a0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028a0e:	bfb8      	it	lt
 8028a10:	4240      	neglt	r0, r0
 8028a12:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8028a16:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8028ae4 <__ieee754_powf+0x57c>
 8028a1a:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8028ae8 <__ieee754_powf+0x580>
 8028a1e:	ee17 3a10 	vmov	r3, s14
 8028a22:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8028a26:	f023 030f 	bic.w	r3, r3, #15
 8028a2a:	ee07 3a10 	vmov	s14, r3
 8028a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8028a32:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8028a36:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8028a3a:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8028aec <__ieee754_powf+0x584>
 8028a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028a42:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8028a46:	eef0 6a67 	vmov.f32	s13, s15
 8028a4a:	eee7 6a06 	vfma.f32	s13, s14, s12
 8028a4e:	eef0 5a66 	vmov.f32	s11, s13
 8028a52:	eee7 5a46 	vfms.f32	s11, s14, s12
 8028a56:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8028a5a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8028a5e:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8028af0 <__ieee754_powf+0x588>
 8028a62:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8028af4 <__ieee754_powf+0x58c>
 8028a66:	eea7 6a25 	vfma.f32	s12, s14, s11
 8028a6a:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8028af8 <__ieee754_powf+0x590>
 8028a6e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8028a72:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8028afc <__ieee754_powf+0x594>
 8028a76:	eea5 6a87 	vfma.f32	s12, s11, s14
 8028a7a:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8028b00 <__ieee754_powf+0x598>
 8028a7e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8028a82:	eeb0 6a66 	vmov.f32	s12, s13
 8028a86:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8028a8a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8028a8e:	ee66 5a86 	vmul.f32	s11, s13, s12
 8028a92:	ee36 6a47 	vsub.f32	s12, s12, s14
 8028a96:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8028a9a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8028a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8028aa2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8028aa6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8028aaa:	ee10 3a10 	vmov	r3, s0
 8028aae:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8028ab2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8028ab6:	da06      	bge.n	8028ac6 <__ieee754_powf+0x55e>
 8028ab8:	f000 f95e 	bl	8028d78 <scalbnf>
 8028abc:	ee20 0a08 	vmul.f32	s0, s0, s16
 8028ac0:	e56a      	b.n	8028598 <__ieee754_powf+0x30>
 8028ac2:	2000      	movs	r0, #0
 8028ac4:	e7a5      	b.n	8028a12 <__ieee754_powf+0x4aa>
 8028ac6:	ee00 3a10 	vmov	s0, r3
 8028aca:	e7f7      	b.n	8028abc <__ieee754_powf+0x554>
 8028acc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8028ad0:	e562      	b.n	8028598 <__ieee754_powf+0x30>
 8028ad2:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8028b04 <__ieee754_powf+0x59c>
 8028ad6:	e55f      	b.n	8028598 <__ieee754_powf+0x30>
 8028ad8:	eeb0 0a48 	vmov.f32	s0, s16
 8028adc:	e55c      	b.n	8028598 <__ieee754_powf+0x30>
 8028ade:	bf00      	nop
 8028ae0:	ff800000 	.word	0xff800000
 8028ae4:	3f317218 	.word	0x3f317218
 8028ae8:	3f317200 	.word	0x3f317200
 8028aec:	35bfbe8c 	.word	0x35bfbe8c
 8028af0:	b5ddea0e 	.word	0xb5ddea0e
 8028af4:	3331bb4c 	.word	0x3331bb4c
 8028af8:	388ab355 	.word	0x388ab355
 8028afc:	bb360b61 	.word	0xbb360b61
 8028b00:	3e2aaaab 	.word	0x3e2aaaab
 8028b04:	00000000 	.word	0x00000000

08028b08 <__ieee754_rem_pio2f>:
 8028b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028b0a:	ee10 6a10 	vmov	r6, s0
 8028b0e:	4b88      	ldr	r3, [pc, #544]	@ (8028d30 <__ieee754_rem_pio2f+0x228>)
 8028b10:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8028b14:	429d      	cmp	r5, r3
 8028b16:	b087      	sub	sp, #28
 8028b18:	4604      	mov	r4, r0
 8028b1a:	d805      	bhi.n	8028b28 <__ieee754_rem_pio2f+0x20>
 8028b1c:	2300      	movs	r3, #0
 8028b1e:	ed80 0a00 	vstr	s0, [r0]
 8028b22:	6043      	str	r3, [r0, #4]
 8028b24:	2000      	movs	r0, #0
 8028b26:	e022      	b.n	8028b6e <__ieee754_rem_pio2f+0x66>
 8028b28:	4b82      	ldr	r3, [pc, #520]	@ (8028d34 <__ieee754_rem_pio2f+0x22c>)
 8028b2a:	429d      	cmp	r5, r3
 8028b2c:	d83a      	bhi.n	8028ba4 <__ieee754_rem_pio2f+0x9c>
 8028b2e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8028b32:	2e00      	cmp	r6, #0
 8028b34:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8028d38 <__ieee754_rem_pio2f+0x230>
 8028b38:	4a80      	ldr	r2, [pc, #512]	@ (8028d3c <__ieee754_rem_pio2f+0x234>)
 8028b3a:	f023 030f 	bic.w	r3, r3, #15
 8028b3e:	dd18      	ble.n	8028b72 <__ieee754_rem_pio2f+0x6a>
 8028b40:	4293      	cmp	r3, r2
 8028b42:	ee70 7a47 	vsub.f32	s15, s0, s14
 8028b46:	bf09      	itett	eq
 8028b48:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8028d40 <__ieee754_rem_pio2f+0x238>
 8028b4c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8028d44 <__ieee754_rem_pio2f+0x23c>
 8028b50:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8028d48 <__ieee754_rem_pio2f+0x240>
 8028b54:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8028b58:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8028b5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028b60:	ed80 7a00 	vstr	s14, [r0]
 8028b64:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8028b68:	edc0 7a01 	vstr	s15, [r0, #4]
 8028b6c:	2001      	movs	r0, #1
 8028b6e:	b007      	add	sp, #28
 8028b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028b72:	4293      	cmp	r3, r2
 8028b74:	ee70 7a07 	vadd.f32	s15, s0, s14
 8028b78:	bf09      	itett	eq
 8028b7a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8028d40 <__ieee754_rem_pio2f+0x238>
 8028b7e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8028d44 <__ieee754_rem_pio2f+0x23c>
 8028b82:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8028d48 <__ieee754_rem_pio2f+0x240>
 8028b86:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8028b8a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8028b8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028b92:	ed80 7a00 	vstr	s14, [r0]
 8028b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028b9a:	edc0 7a01 	vstr	s15, [r0, #4]
 8028b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8028ba2:	e7e4      	b.n	8028b6e <__ieee754_rem_pio2f+0x66>
 8028ba4:	4b69      	ldr	r3, [pc, #420]	@ (8028d4c <__ieee754_rem_pio2f+0x244>)
 8028ba6:	429d      	cmp	r5, r3
 8028ba8:	d873      	bhi.n	8028c92 <__ieee754_rem_pio2f+0x18a>
 8028baa:	f000 f8dd 	bl	8028d68 <fabsf>
 8028bae:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8028d50 <__ieee754_rem_pio2f+0x248>
 8028bb2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8028bb6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8028bba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8028bc2:	ee17 0a90 	vmov	r0, s15
 8028bc6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8028d38 <__ieee754_rem_pio2f+0x230>
 8028bca:	eea7 0a67 	vfms.f32	s0, s14, s15
 8028bce:	281f      	cmp	r0, #31
 8028bd0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8028d44 <__ieee754_rem_pio2f+0x23c>
 8028bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028bd8:	eeb1 6a47 	vneg.f32	s12, s14
 8028bdc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8028be0:	ee16 1a90 	vmov	r1, s13
 8028be4:	dc09      	bgt.n	8028bfa <__ieee754_rem_pio2f+0xf2>
 8028be6:	4a5b      	ldr	r2, [pc, #364]	@ (8028d54 <__ieee754_rem_pio2f+0x24c>)
 8028be8:	1e47      	subs	r7, r0, #1
 8028bea:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8028bee:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8028bf2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8028bf6:	4293      	cmp	r3, r2
 8028bf8:	d107      	bne.n	8028c0a <__ieee754_rem_pio2f+0x102>
 8028bfa:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8028bfe:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8028c02:	2a08      	cmp	r2, #8
 8028c04:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8028c08:	dc14      	bgt.n	8028c34 <__ieee754_rem_pio2f+0x12c>
 8028c0a:	6021      	str	r1, [r4, #0]
 8028c0c:	ed94 7a00 	vldr	s14, [r4]
 8028c10:	ee30 0a47 	vsub.f32	s0, s0, s14
 8028c14:	2e00      	cmp	r6, #0
 8028c16:	ee30 0a67 	vsub.f32	s0, s0, s15
 8028c1a:	ed84 0a01 	vstr	s0, [r4, #4]
 8028c1e:	daa6      	bge.n	8028b6e <__ieee754_rem_pio2f+0x66>
 8028c20:	eeb1 7a47 	vneg.f32	s14, s14
 8028c24:	eeb1 0a40 	vneg.f32	s0, s0
 8028c28:	ed84 7a00 	vstr	s14, [r4]
 8028c2c:	ed84 0a01 	vstr	s0, [r4, #4]
 8028c30:	4240      	negs	r0, r0
 8028c32:	e79c      	b.n	8028b6e <__ieee754_rem_pio2f+0x66>
 8028c34:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8028d40 <__ieee754_rem_pio2f+0x238>
 8028c38:	eef0 6a40 	vmov.f32	s13, s0
 8028c3c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8028c40:	ee70 7a66 	vsub.f32	s15, s0, s13
 8028c44:	eee6 7a25 	vfma.f32	s15, s12, s11
 8028c48:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8028d48 <__ieee754_rem_pio2f+0x240>
 8028c4c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8028c50:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8028c54:	ee15 2a90 	vmov	r2, s11
 8028c58:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8028c5c:	1a5b      	subs	r3, r3, r1
 8028c5e:	2b19      	cmp	r3, #25
 8028c60:	dc04      	bgt.n	8028c6c <__ieee754_rem_pio2f+0x164>
 8028c62:	edc4 5a00 	vstr	s11, [r4]
 8028c66:	eeb0 0a66 	vmov.f32	s0, s13
 8028c6a:	e7cf      	b.n	8028c0c <__ieee754_rem_pio2f+0x104>
 8028c6c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8028d58 <__ieee754_rem_pio2f+0x250>
 8028c70:	eeb0 0a66 	vmov.f32	s0, s13
 8028c74:	eea6 0a25 	vfma.f32	s0, s12, s11
 8028c78:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8028c7c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8028d5c <__ieee754_rem_pio2f+0x254>
 8028c80:	eee6 7a25 	vfma.f32	s15, s12, s11
 8028c84:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8028c88:	ee30 7a67 	vsub.f32	s14, s0, s15
 8028c8c:	ed84 7a00 	vstr	s14, [r4]
 8028c90:	e7bc      	b.n	8028c0c <__ieee754_rem_pio2f+0x104>
 8028c92:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8028c96:	d306      	bcc.n	8028ca6 <__ieee754_rem_pio2f+0x19e>
 8028c98:	ee70 7a40 	vsub.f32	s15, s0, s0
 8028c9c:	edc0 7a01 	vstr	s15, [r0, #4]
 8028ca0:	edc0 7a00 	vstr	s15, [r0]
 8028ca4:	e73e      	b.n	8028b24 <__ieee754_rem_pio2f+0x1c>
 8028ca6:	15ea      	asrs	r2, r5, #23
 8028ca8:	3a86      	subs	r2, #134	@ 0x86
 8028caa:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8028cae:	ee07 3a90 	vmov	s15, r3
 8028cb2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8028cb6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8028d60 <__ieee754_rem_pio2f+0x258>
 8028cba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8028cbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028cc2:	ed8d 7a03 	vstr	s14, [sp, #12]
 8028cc6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8028cca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8028cce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8028cd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028cd6:	ed8d 7a04 	vstr	s14, [sp, #16]
 8028cda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8028cde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8028ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028ce6:	edcd 7a05 	vstr	s15, [sp, #20]
 8028cea:	d11e      	bne.n	8028d2a <__ieee754_rem_pio2f+0x222>
 8028cec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8028cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028cf4:	bf0c      	ite	eq
 8028cf6:	2301      	moveq	r3, #1
 8028cf8:	2302      	movne	r3, #2
 8028cfa:	491a      	ldr	r1, [pc, #104]	@ (8028d64 <__ieee754_rem_pio2f+0x25c>)
 8028cfc:	9101      	str	r1, [sp, #4]
 8028cfe:	2102      	movs	r1, #2
 8028d00:	9100      	str	r1, [sp, #0]
 8028d02:	a803      	add	r0, sp, #12
 8028d04:	4621      	mov	r1, r4
 8028d06:	f000 f8c3 	bl	8028e90 <__kernel_rem_pio2f>
 8028d0a:	2e00      	cmp	r6, #0
 8028d0c:	f6bf af2f 	bge.w	8028b6e <__ieee754_rem_pio2f+0x66>
 8028d10:	edd4 7a00 	vldr	s15, [r4]
 8028d14:	eef1 7a67 	vneg.f32	s15, s15
 8028d18:	edc4 7a00 	vstr	s15, [r4]
 8028d1c:	edd4 7a01 	vldr	s15, [r4, #4]
 8028d20:	eef1 7a67 	vneg.f32	s15, s15
 8028d24:	edc4 7a01 	vstr	s15, [r4, #4]
 8028d28:	e782      	b.n	8028c30 <__ieee754_rem_pio2f+0x128>
 8028d2a:	2303      	movs	r3, #3
 8028d2c:	e7e5      	b.n	8028cfa <__ieee754_rem_pio2f+0x1f2>
 8028d2e:	bf00      	nop
 8028d30:	3f490fd8 	.word	0x3f490fd8
 8028d34:	4016cbe3 	.word	0x4016cbe3
 8028d38:	3fc90f80 	.word	0x3fc90f80
 8028d3c:	3fc90fd0 	.word	0x3fc90fd0
 8028d40:	37354400 	.word	0x37354400
 8028d44:	37354443 	.word	0x37354443
 8028d48:	2e85a308 	.word	0x2e85a308
 8028d4c:	43490f80 	.word	0x43490f80
 8028d50:	3f22f984 	.word	0x3f22f984
 8028d54:	08031ca0 	.word	0x08031ca0
 8028d58:	2e85a300 	.word	0x2e85a300
 8028d5c:	248d3132 	.word	0x248d3132
 8028d60:	43800000 	.word	0x43800000
 8028d64:	08031d20 	.word	0x08031d20

08028d68 <fabsf>:
 8028d68:	ee10 3a10 	vmov	r3, s0
 8028d6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8028d70:	ee00 3a10 	vmov	s0, r3
 8028d74:	4770      	bx	lr
	...

08028d78 <scalbnf>:
 8028d78:	ee10 3a10 	vmov	r3, s0
 8028d7c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8028d80:	d02b      	beq.n	8028dda <scalbnf+0x62>
 8028d82:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8028d86:	d302      	bcc.n	8028d8e <scalbnf+0x16>
 8028d88:	ee30 0a00 	vadd.f32	s0, s0, s0
 8028d8c:	4770      	bx	lr
 8028d8e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8028d92:	d123      	bne.n	8028ddc <scalbnf+0x64>
 8028d94:	4b24      	ldr	r3, [pc, #144]	@ (8028e28 <scalbnf+0xb0>)
 8028d96:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8028e2c <scalbnf+0xb4>
 8028d9a:	4298      	cmp	r0, r3
 8028d9c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8028da0:	db17      	blt.n	8028dd2 <scalbnf+0x5a>
 8028da2:	ee10 3a10 	vmov	r3, s0
 8028da6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8028daa:	3a19      	subs	r2, #25
 8028dac:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8028db0:	4288      	cmp	r0, r1
 8028db2:	dd15      	ble.n	8028de0 <scalbnf+0x68>
 8028db4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8028e30 <scalbnf+0xb8>
 8028db8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8028e34 <scalbnf+0xbc>
 8028dbc:	ee10 3a10 	vmov	r3, s0
 8028dc0:	eeb0 7a67 	vmov.f32	s14, s15
 8028dc4:	2b00      	cmp	r3, #0
 8028dc6:	bfb8      	it	lt
 8028dc8:	eef0 7a66 	vmovlt.f32	s15, s13
 8028dcc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8028dd0:	4770      	bx	lr
 8028dd2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8028e38 <scalbnf+0xc0>
 8028dd6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8028dda:	4770      	bx	lr
 8028ddc:	0dd2      	lsrs	r2, r2, #23
 8028dde:	e7e5      	b.n	8028dac <scalbnf+0x34>
 8028de0:	4410      	add	r0, r2
 8028de2:	28fe      	cmp	r0, #254	@ 0xfe
 8028de4:	dce6      	bgt.n	8028db4 <scalbnf+0x3c>
 8028de6:	2800      	cmp	r0, #0
 8028de8:	dd06      	ble.n	8028df8 <scalbnf+0x80>
 8028dea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8028dee:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8028df2:	ee00 3a10 	vmov	s0, r3
 8028df6:	4770      	bx	lr
 8028df8:	f110 0f16 	cmn.w	r0, #22
 8028dfc:	da09      	bge.n	8028e12 <scalbnf+0x9a>
 8028dfe:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8028e38 <scalbnf+0xc0>
 8028e02:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8028e3c <scalbnf+0xc4>
 8028e06:	ee10 3a10 	vmov	r3, s0
 8028e0a:	eeb0 7a67 	vmov.f32	s14, s15
 8028e0e:	2b00      	cmp	r3, #0
 8028e10:	e7d9      	b.n	8028dc6 <scalbnf+0x4e>
 8028e12:	3019      	adds	r0, #25
 8028e14:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8028e18:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8028e1c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8028e40 <scalbnf+0xc8>
 8028e20:	ee07 3a90 	vmov	s15, r3
 8028e24:	e7d7      	b.n	8028dd6 <scalbnf+0x5e>
 8028e26:	bf00      	nop
 8028e28:	ffff3cb0 	.word	0xffff3cb0
 8028e2c:	4c000000 	.word	0x4c000000
 8028e30:	7149f2ca 	.word	0x7149f2ca
 8028e34:	f149f2ca 	.word	0xf149f2ca
 8028e38:	0da24260 	.word	0x0da24260
 8028e3c:	8da24260 	.word	0x8da24260
 8028e40:	33000000 	.word	0x33000000

08028e44 <with_errnof>:
 8028e44:	b510      	push	{r4, lr}
 8028e46:	ed2d 8b02 	vpush	{d8}
 8028e4a:	eeb0 8a40 	vmov.f32	s16, s0
 8028e4e:	4604      	mov	r4, r0
 8028e50:	f7fc f994 	bl	802517c <__errno>
 8028e54:	eeb0 0a48 	vmov.f32	s0, s16
 8028e58:	ecbd 8b02 	vpop	{d8}
 8028e5c:	6004      	str	r4, [r0, #0]
 8028e5e:	bd10      	pop	{r4, pc}

08028e60 <xflowf>:
 8028e60:	b130      	cbz	r0, 8028e70 <xflowf+0x10>
 8028e62:	eef1 7a40 	vneg.f32	s15, s0
 8028e66:	ee27 0a80 	vmul.f32	s0, s15, s0
 8028e6a:	2022      	movs	r0, #34	@ 0x22
 8028e6c:	f7ff bfea 	b.w	8028e44 <with_errnof>
 8028e70:	eef0 7a40 	vmov.f32	s15, s0
 8028e74:	e7f7      	b.n	8028e66 <xflowf+0x6>
	...

08028e78 <__math_uflowf>:
 8028e78:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8028e80 <__math_uflowf+0x8>
 8028e7c:	f7ff bff0 	b.w	8028e60 <xflowf>
 8028e80:	10000000 	.word	0x10000000

08028e84 <__math_oflowf>:
 8028e84:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8028e8c <__math_oflowf+0x8>
 8028e88:	f7ff bfea 	b.w	8028e60 <xflowf>
 8028e8c:	70000000 	.word	0x70000000

08028e90 <__kernel_rem_pio2f>:
 8028e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e94:	ed2d 8b04 	vpush	{d8-d9}
 8028e98:	b0d9      	sub	sp, #356	@ 0x164
 8028e9a:	4690      	mov	r8, r2
 8028e9c:	9001      	str	r0, [sp, #4]
 8028e9e:	4ab9      	ldr	r2, [pc, #740]	@ (8029184 <__kernel_rem_pio2f+0x2f4>)
 8028ea0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8028ea2:	f118 0f04 	cmn.w	r8, #4
 8028ea6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8028eaa:	460f      	mov	r7, r1
 8028eac:	f103 3bff 	add.w	fp, r3, #4294967295
 8028eb0:	db27      	blt.n	8028f02 <__kernel_rem_pio2f+0x72>
 8028eb2:	f1b8 0203 	subs.w	r2, r8, #3
 8028eb6:	bf48      	it	mi
 8028eb8:	f108 0204 	addmi.w	r2, r8, #4
 8028ebc:	10d2      	asrs	r2, r2, #3
 8028ebe:	1c55      	adds	r5, r2, #1
 8028ec0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8028ec2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8029194 <__kernel_rem_pio2f+0x304>
 8028ec6:	00e8      	lsls	r0, r5, #3
 8028ec8:	eba2 060b 	sub.w	r6, r2, fp
 8028ecc:	9002      	str	r0, [sp, #8]
 8028ece:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8028ed2:	eb0a 0c0b 	add.w	ip, sl, fp
 8028ed6:	ac1c      	add	r4, sp, #112	@ 0x70
 8028ed8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8028edc:	2000      	movs	r0, #0
 8028ede:	4560      	cmp	r0, ip
 8028ee0:	dd11      	ble.n	8028f06 <__kernel_rem_pio2f+0x76>
 8028ee2:	a91c      	add	r1, sp, #112	@ 0x70
 8028ee4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8028ee8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8028eec:	f04f 0c00 	mov.w	ip, #0
 8028ef0:	45d4      	cmp	ip, sl
 8028ef2:	dc27      	bgt.n	8028f44 <__kernel_rem_pio2f+0xb4>
 8028ef4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8028ef8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8029194 <__kernel_rem_pio2f+0x304>
 8028efc:	4606      	mov	r6, r0
 8028efe:	2400      	movs	r4, #0
 8028f00:	e016      	b.n	8028f30 <__kernel_rem_pio2f+0xa0>
 8028f02:	2200      	movs	r2, #0
 8028f04:	e7db      	b.n	8028ebe <__kernel_rem_pio2f+0x2e>
 8028f06:	42c6      	cmn	r6, r0
 8028f08:	bf5d      	ittte	pl
 8028f0a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8028f0e:	ee07 1a90 	vmovpl	s15, r1
 8028f12:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8028f16:	eef0 7a47 	vmovmi.f32	s15, s14
 8028f1a:	ece4 7a01 	vstmia	r4!, {s15}
 8028f1e:	3001      	adds	r0, #1
 8028f20:	e7dd      	b.n	8028ede <__kernel_rem_pio2f+0x4e>
 8028f22:	ecfe 6a01 	vldmia	lr!, {s13}
 8028f26:	ed96 7a00 	vldr	s14, [r6]
 8028f2a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8028f2e:	3401      	adds	r4, #1
 8028f30:	455c      	cmp	r4, fp
 8028f32:	f1a6 0604 	sub.w	r6, r6, #4
 8028f36:	ddf4      	ble.n	8028f22 <__kernel_rem_pio2f+0x92>
 8028f38:	ece9 7a01 	vstmia	r9!, {s15}
 8028f3c:	f10c 0c01 	add.w	ip, ip, #1
 8028f40:	3004      	adds	r0, #4
 8028f42:	e7d5      	b.n	8028ef0 <__kernel_rem_pio2f+0x60>
 8028f44:	a908      	add	r1, sp, #32
 8028f46:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8028f4a:	9104      	str	r1, [sp, #16]
 8028f4c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8028f4e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8029190 <__kernel_rem_pio2f+0x300>
 8028f52:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 802918c <__kernel_rem_pio2f+0x2fc>
 8028f56:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8028f5a:	9203      	str	r2, [sp, #12]
 8028f5c:	4654      	mov	r4, sl
 8028f5e:	00a2      	lsls	r2, r4, #2
 8028f60:	9205      	str	r2, [sp, #20]
 8028f62:	aa58      	add	r2, sp, #352	@ 0x160
 8028f64:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8028f68:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8028f6c:	a944      	add	r1, sp, #272	@ 0x110
 8028f6e:	aa08      	add	r2, sp, #32
 8028f70:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8028f74:	4694      	mov	ip, r2
 8028f76:	4626      	mov	r6, r4
 8028f78:	2e00      	cmp	r6, #0
 8028f7a:	f1a0 0004 	sub.w	r0, r0, #4
 8028f7e:	dc4c      	bgt.n	802901a <__kernel_rem_pio2f+0x18a>
 8028f80:	4628      	mov	r0, r5
 8028f82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8028f86:	f7ff fef7 	bl	8028d78 <scalbnf>
 8028f8a:	eeb0 8a40 	vmov.f32	s16, s0
 8028f8e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8028f92:	ee28 0a00 	vmul.f32	s0, s16, s0
 8028f96:	f7fe fe77 	bl	8027c88 <floorf>
 8028f9a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8028f9e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8028fa2:	2d00      	cmp	r5, #0
 8028fa4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8028fa8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8028fac:	ee17 9a90 	vmov	r9, s15
 8028fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028fb4:	ee38 8a67 	vsub.f32	s16, s16, s15
 8028fb8:	dd41      	ble.n	802903e <__kernel_rem_pio2f+0x1ae>
 8028fba:	f104 3cff 	add.w	ip, r4, #4294967295
 8028fbe:	a908      	add	r1, sp, #32
 8028fc0:	f1c5 0e08 	rsb	lr, r5, #8
 8028fc4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8028fc8:	fa46 f00e 	asr.w	r0, r6, lr
 8028fcc:	4481      	add	r9, r0
 8028fce:	fa00 f00e 	lsl.w	r0, r0, lr
 8028fd2:	1a36      	subs	r6, r6, r0
 8028fd4:	f1c5 0007 	rsb	r0, r5, #7
 8028fd8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8028fdc:	4106      	asrs	r6, r0
 8028fde:	2e00      	cmp	r6, #0
 8028fe0:	dd3c      	ble.n	802905c <__kernel_rem_pio2f+0x1cc>
 8028fe2:	f04f 0e00 	mov.w	lr, #0
 8028fe6:	f109 0901 	add.w	r9, r9, #1
 8028fea:	4670      	mov	r0, lr
 8028fec:	4574      	cmp	r4, lr
 8028fee:	dc68      	bgt.n	80290c2 <__kernel_rem_pio2f+0x232>
 8028ff0:	2d00      	cmp	r5, #0
 8028ff2:	dd03      	ble.n	8028ffc <__kernel_rem_pio2f+0x16c>
 8028ff4:	2d01      	cmp	r5, #1
 8028ff6:	d074      	beq.n	80290e2 <__kernel_rem_pio2f+0x252>
 8028ff8:	2d02      	cmp	r5, #2
 8028ffa:	d07d      	beq.n	80290f8 <__kernel_rem_pio2f+0x268>
 8028ffc:	2e02      	cmp	r6, #2
 8028ffe:	d12d      	bne.n	802905c <__kernel_rem_pio2f+0x1cc>
 8029000:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8029004:	ee30 8a48 	vsub.f32	s16, s0, s16
 8029008:	b340      	cbz	r0, 802905c <__kernel_rem_pio2f+0x1cc>
 802900a:	4628      	mov	r0, r5
 802900c:	9306      	str	r3, [sp, #24]
 802900e:	f7ff feb3 	bl	8028d78 <scalbnf>
 8029012:	9b06      	ldr	r3, [sp, #24]
 8029014:	ee38 8a40 	vsub.f32	s16, s16, s0
 8029018:	e020      	b.n	802905c <__kernel_rem_pio2f+0x1cc>
 802901a:	ee60 7a28 	vmul.f32	s15, s0, s17
 802901e:	3e01      	subs	r6, #1
 8029020:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8029024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8029028:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802902c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8029030:	ecac 0a01 	vstmia	ip!, {s0}
 8029034:	ed90 0a00 	vldr	s0, [r0]
 8029038:	ee37 0a80 	vadd.f32	s0, s15, s0
 802903c:	e79c      	b.n	8028f78 <__kernel_rem_pio2f+0xe8>
 802903e:	d105      	bne.n	802904c <__kernel_rem_pio2f+0x1bc>
 8029040:	1e60      	subs	r0, r4, #1
 8029042:	a908      	add	r1, sp, #32
 8029044:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8029048:	11f6      	asrs	r6, r6, #7
 802904a:	e7c8      	b.n	8028fde <__kernel_rem_pio2f+0x14e>
 802904c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8029050:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8029054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029058:	da31      	bge.n	80290be <__kernel_rem_pio2f+0x22e>
 802905a:	2600      	movs	r6, #0
 802905c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8029060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029064:	f040 8098 	bne.w	8029198 <__kernel_rem_pio2f+0x308>
 8029068:	1e60      	subs	r0, r4, #1
 802906a:	2200      	movs	r2, #0
 802906c:	4550      	cmp	r0, sl
 802906e:	da4b      	bge.n	8029108 <__kernel_rem_pio2f+0x278>
 8029070:	2a00      	cmp	r2, #0
 8029072:	d065      	beq.n	8029140 <__kernel_rem_pio2f+0x2b0>
 8029074:	3c01      	subs	r4, #1
 8029076:	ab08      	add	r3, sp, #32
 8029078:	3d08      	subs	r5, #8
 802907a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802907e:	2b00      	cmp	r3, #0
 8029080:	d0f8      	beq.n	8029074 <__kernel_rem_pio2f+0x1e4>
 8029082:	4628      	mov	r0, r5
 8029084:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8029088:	f7ff fe76 	bl	8028d78 <scalbnf>
 802908c:	1c63      	adds	r3, r4, #1
 802908e:	aa44      	add	r2, sp, #272	@ 0x110
 8029090:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8029190 <__kernel_rem_pio2f+0x300>
 8029094:	0099      	lsls	r1, r3, #2
 8029096:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802909a:	4623      	mov	r3, r4
 802909c:	2b00      	cmp	r3, #0
 802909e:	f280 80a9 	bge.w	80291f4 <__kernel_rem_pio2f+0x364>
 80290a2:	4623      	mov	r3, r4
 80290a4:	2b00      	cmp	r3, #0
 80290a6:	f2c0 80c7 	blt.w	8029238 <__kernel_rem_pio2f+0x3a8>
 80290aa:	aa44      	add	r2, sp, #272	@ 0x110
 80290ac:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80290b0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8029188 <__kernel_rem_pio2f+0x2f8>
 80290b4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8029194 <__kernel_rem_pio2f+0x304>
 80290b8:	2000      	movs	r0, #0
 80290ba:	1ae2      	subs	r2, r4, r3
 80290bc:	e0b1      	b.n	8029222 <__kernel_rem_pio2f+0x392>
 80290be:	2602      	movs	r6, #2
 80290c0:	e78f      	b.n	8028fe2 <__kernel_rem_pio2f+0x152>
 80290c2:	f852 1b04 	ldr.w	r1, [r2], #4
 80290c6:	b948      	cbnz	r0, 80290dc <__kernel_rem_pio2f+0x24c>
 80290c8:	b121      	cbz	r1, 80290d4 <__kernel_rem_pio2f+0x244>
 80290ca:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80290ce:	f842 1c04 	str.w	r1, [r2, #-4]
 80290d2:	2101      	movs	r1, #1
 80290d4:	f10e 0e01 	add.w	lr, lr, #1
 80290d8:	4608      	mov	r0, r1
 80290da:	e787      	b.n	8028fec <__kernel_rem_pio2f+0x15c>
 80290dc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80290e0:	e7f5      	b.n	80290ce <__kernel_rem_pio2f+0x23e>
 80290e2:	f104 3cff 	add.w	ip, r4, #4294967295
 80290e6:	aa08      	add	r2, sp, #32
 80290e8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80290ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80290f0:	a908      	add	r1, sp, #32
 80290f2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80290f6:	e781      	b.n	8028ffc <__kernel_rem_pio2f+0x16c>
 80290f8:	f104 3cff 	add.w	ip, r4, #4294967295
 80290fc:	aa08      	add	r2, sp, #32
 80290fe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8029102:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8029106:	e7f3      	b.n	80290f0 <__kernel_rem_pio2f+0x260>
 8029108:	a908      	add	r1, sp, #32
 802910a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802910e:	3801      	subs	r0, #1
 8029110:	430a      	orrs	r2, r1
 8029112:	e7ab      	b.n	802906c <__kernel_rem_pio2f+0x1dc>
 8029114:	3201      	adds	r2, #1
 8029116:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 802911a:	2e00      	cmp	r6, #0
 802911c:	d0fa      	beq.n	8029114 <__kernel_rem_pio2f+0x284>
 802911e:	9905      	ldr	r1, [sp, #20]
 8029120:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8029124:	eb0d 0001 	add.w	r0, sp, r1
 8029128:	18e6      	adds	r6, r4, r3
 802912a:	a91c      	add	r1, sp, #112	@ 0x70
 802912c:	f104 0c01 	add.w	ip, r4, #1
 8029130:	384c      	subs	r0, #76	@ 0x4c
 8029132:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8029136:	4422      	add	r2, r4
 8029138:	4562      	cmp	r2, ip
 802913a:	da04      	bge.n	8029146 <__kernel_rem_pio2f+0x2b6>
 802913c:	4614      	mov	r4, r2
 802913e:	e70e      	b.n	8028f5e <__kernel_rem_pio2f+0xce>
 8029140:	9804      	ldr	r0, [sp, #16]
 8029142:	2201      	movs	r2, #1
 8029144:	e7e7      	b.n	8029116 <__kernel_rem_pio2f+0x286>
 8029146:	9903      	ldr	r1, [sp, #12]
 8029148:	f8dd e004 	ldr.w	lr, [sp, #4]
 802914c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8029150:	9105      	str	r1, [sp, #20]
 8029152:	ee07 1a90 	vmov	s15, r1
 8029156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802915a:	2400      	movs	r4, #0
 802915c:	ece6 7a01 	vstmia	r6!, {s15}
 8029160:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8029194 <__kernel_rem_pio2f+0x304>
 8029164:	46b1      	mov	r9, r6
 8029166:	455c      	cmp	r4, fp
 8029168:	dd04      	ble.n	8029174 <__kernel_rem_pio2f+0x2e4>
 802916a:	ece0 7a01 	vstmia	r0!, {s15}
 802916e:	f10c 0c01 	add.w	ip, ip, #1
 8029172:	e7e1      	b.n	8029138 <__kernel_rem_pio2f+0x2a8>
 8029174:	ecfe 6a01 	vldmia	lr!, {s13}
 8029178:	ed39 7a01 	vldmdb	r9!, {s14}
 802917c:	3401      	adds	r4, #1
 802917e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8029182:	e7f0      	b.n	8029166 <__kernel_rem_pio2f+0x2d6>
 8029184:	08032064 	.word	0x08032064
 8029188:	08032038 	.word	0x08032038
 802918c:	43800000 	.word	0x43800000
 8029190:	3b800000 	.word	0x3b800000
 8029194:	00000000 	.word	0x00000000
 8029198:	9b02      	ldr	r3, [sp, #8]
 802919a:	eeb0 0a48 	vmov.f32	s0, s16
 802919e:	eba3 0008 	sub.w	r0, r3, r8
 80291a2:	f7ff fde9 	bl	8028d78 <scalbnf>
 80291a6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 802918c <__kernel_rem_pio2f+0x2fc>
 80291aa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80291ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80291b2:	db19      	blt.n	80291e8 <__kernel_rem_pio2f+0x358>
 80291b4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8029190 <__kernel_rem_pio2f+0x300>
 80291b8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80291bc:	aa08      	add	r2, sp, #32
 80291be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80291c2:	3508      	adds	r5, #8
 80291c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80291c8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80291cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80291d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80291d4:	ee10 3a10 	vmov	r3, s0
 80291d8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80291dc:	ee17 3a90 	vmov	r3, s15
 80291e0:	3401      	adds	r4, #1
 80291e2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80291e6:	e74c      	b.n	8029082 <__kernel_rem_pio2f+0x1f2>
 80291e8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80291ec:	aa08      	add	r2, sp, #32
 80291ee:	ee10 3a10 	vmov	r3, s0
 80291f2:	e7f6      	b.n	80291e2 <__kernel_rem_pio2f+0x352>
 80291f4:	a808      	add	r0, sp, #32
 80291f6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80291fa:	9001      	str	r0, [sp, #4]
 80291fc:	ee07 0a90 	vmov	s15, r0
 8029200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8029204:	3b01      	subs	r3, #1
 8029206:	ee67 7a80 	vmul.f32	s15, s15, s0
 802920a:	ee20 0a07 	vmul.f32	s0, s0, s14
 802920e:	ed62 7a01 	vstmdb	r2!, {s15}
 8029212:	e743      	b.n	802909c <__kernel_rem_pio2f+0x20c>
 8029214:	ecfc 6a01 	vldmia	ip!, {s13}
 8029218:	ecb5 7a01 	vldmia	r5!, {s14}
 802921c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8029220:	3001      	adds	r0, #1
 8029222:	4550      	cmp	r0, sl
 8029224:	dc01      	bgt.n	802922a <__kernel_rem_pio2f+0x39a>
 8029226:	4282      	cmp	r2, r0
 8029228:	daf4      	bge.n	8029214 <__kernel_rem_pio2f+0x384>
 802922a:	a858      	add	r0, sp, #352	@ 0x160
 802922c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8029230:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8029234:	3b01      	subs	r3, #1
 8029236:	e735      	b.n	80290a4 <__kernel_rem_pio2f+0x214>
 8029238:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802923a:	2b02      	cmp	r3, #2
 802923c:	dc09      	bgt.n	8029252 <__kernel_rem_pio2f+0x3c2>
 802923e:	2b00      	cmp	r3, #0
 8029240:	dc2b      	bgt.n	802929a <__kernel_rem_pio2f+0x40a>
 8029242:	d044      	beq.n	80292ce <__kernel_rem_pio2f+0x43e>
 8029244:	f009 0007 	and.w	r0, r9, #7
 8029248:	b059      	add	sp, #356	@ 0x164
 802924a:	ecbd 8b04 	vpop	{d8-d9}
 802924e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029252:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8029254:	2b03      	cmp	r3, #3
 8029256:	d1f5      	bne.n	8029244 <__kernel_rem_pio2f+0x3b4>
 8029258:	aa30      	add	r2, sp, #192	@ 0xc0
 802925a:	1f0b      	subs	r3, r1, #4
 802925c:	4413      	add	r3, r2
 802925e:	461a      	mov	r2, r3
 8029260:	4620      	mov	r0, r4
 8029262:	2800      	cmp	r0, #0
 8029264:	f1a2 0204 	sub.w	r2, r2, #4
 8029268:	dc52      	bgt.n	8029310 <__kernel_rem_pio2f+0x480>
 802926a:	4622      	mov	r2, r4
 802926c:	2a01      	cmp	r2, #1
 802926e:	f1a3 0304 	sub.w	r3, r3, #4
 8029272:	dc5d      	bgt.n	8029330 <__kernel_rem_pio2f+0x4a0>
 8029274:	ab30      	add	r3, sp, #192	@ 0xc0
 8029276:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8029194 <__kernel_rem_pio2f+0x304>
 802927a:	440b      	add	r3, r1
 802927c:	2c01      	cmp	r4, #1
 802927e:	dc67      	bgt.n	8029350 <__kernel_rem_pio2f+0x4c0>
 8029280:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8029284:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8029288:	2e00      	cmp	r6, #0
 802928a:	d167      	bne.n	802935c <__kernel_rem_pio2f+0x4cc>
 802928c:	edc7 6a00 	vstr	s13, [r7]
 8029290:	ed87 7a01 	vstr	s14, [r7, #4]
 8029294:	edc7 7a02 	vstr	s15, [r7, #8]
 8029298:	e7d4      	b.n	8029244 <__kernel_rem_pio2f+0x3b4>
 802929a:	ab30      	add	r3, sp, #192	@ 0xc0
 802929c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8029194 <__kernel_rem_pio2f+0x304>
 80292a0:	440b      	add	r3, r1
 80292a2:	4622      	mov	r2, r4
 80292a4:	2a00      	cmp	r2, #0
 80292a6:	da24      	bge.n	80292f2 <__kernel_rem_pio2f+0x462>
 80292a8:	b34e      	cbz	r6, 80292fe <__kernel_rem_pio2f+0x46e>
 80292aa:	eef1 7a47 	vneg.f32	s15, s14
 80292ae:	edc7 7a00 	vstr	s15, [r7]
 80292b2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80292b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80292ba:	aa31      	add	r2, sp, #196	@ 0xc4
 80292bc:	2301      	movs	r3, #1
 80292be:	429c      	cmp	r4, r3
 80292c0:	da20      	bge.n	8029304 <__kernel_rem_pio2f+0x474>
 80292c2:	b10e      	cbz	r6, 80292c8 <__kernel_rem_pio2f+0x438>
 80292c4:	eef1 7a67 	vneg.f32	s15, s15
 80292c8:	edc7 7a01 	vstr	s15, [r7, #4]
 80292cc:	e7ba      	b.n	8029244 <__kernel_rem_pio2f+0x3b4>
 80292ce:	ab30      	add	r3, sp, #192	@ 0xc0
 80292d0:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8029194 <__kernel_rem_pio2f+0x304>
 80292d4:	440b      	add	r3, r1
 80292d6:	2c00      	cmp	r4, #0
 80292d8:	da05      	bge.n	80292e6 <__kernel_rem_pio2f+0x456>
 80292da:	b10e      	cbz	r6, 80292e0 <__kernel_rem_pio2f+0x450>
 80292dc:	eef1 7a67 	vneg.f32	s15, s15
 80292e0:	edc7 7a00 	vstr	s15, [r7]
 80292e4:	e7ae      	b.n	8029244 <__kernel_rem_pio2f+0x3b4>
 80292e6:	ed33 7a01 	vldmdb	r3!, {s14}
 80292ea:	3c01      	subs	r4, #1
 80292ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80292f0:	e7f1      	b.n	80292d6 <__kernel_rem_pio2f+0x446>
 80292f2:	ed73 7a01 	vldmdb	r3!, {s15}
 80292f6:	3a01      	subs	r2, #1
 80292f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80292fc:	e7d2      	b.n	80292a4 <__kernel_rem_pio2f+0x414>
 80292fe:	eef0 7a47 	vmov.f32	s15, s14
 8029302:	e7d4      	b.n	80292ae <__kernel_rem_pio2f+0x41e>
 8029304:	ecb2 7a01 	vldmia	r2!, {s14}
 8029308:	3301      	adds	r3, #1
 802930a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802930e:	e7d6      	b.n	80292be <__kernel_rem_pio2f+0x42e>
 8029310:	edd2 7a00 	vldr	s15, [r2]
 8029314:	edd2 6a01 	vldr	s13, [r2, #4]
 8029318:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802931c:	3801      	subs	r0, #1
 802931e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8029322:	ed82 7a00 	vstr	s14, [r2]
 8029326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802932a:	edc2 7a01 	vstr	s15, [r2, #4]
 802932e:	e798      	b.n	8029262 <__kernel_rem_pio2f+0x3d2>
 8029330:	edd3 7a00 	vldr	s15, [r3]
 8029334:	edd3 6a01 	vldr	s13, [r3, #4]
 8029338:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802933c:	3a01      	subs	r2, #1
 802933e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8029342:	ed83 7a00 	vstr	s14, [r3]
 8029346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802934a:	edc3 7a01 	vstr	s15, [r3, #4]
 802934e:	e78d      	b.n	802926c <__kernel_rem_pio2f+0x3dc>
 8029350:	ed33 7a01 	vldmdb	r3!, {s14}
 8029354:	3c01      	subs	r4, #1
 8029356:	ee77 7a87 	vadd.f32	s15, s15, s14
 802935a:	e78f      	b.n	802927c <__kernel_rem_pio2f+0x3ec>
 802935c:	eef1 6a66 	vneg.f32	s13, s13
 8029360:	eeb1 7a47 	vneg.f32	s14, s14
 8029364:	edc7 6a00 	vstr	s13, [r7]
 8029368:	ed87 7a01 	vstr	s14, [r7, #4]
 802936c:	eef1 7a67 	vneg.f32	s15, s15
 8029370:	e790      	b.n	8029294 <__kernel_rem_pio2f+0x404>
 8029372:	bf00      	nop

08029374 <_init>:
 8029374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029376:	bf00      	nop
 8029378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802937a:	bc08      	pop	{r3}
 802937c:	469e      	mov	lr, r3
 802937e:	4770      	bx	lr

08029380 <_fini>:
 8029380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029382:	bf00      	nop
 8029384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029386:	bc08      	pop	{r3}
 8029388:	469e      	mov	lr, r3
 802938a:	4770      	bx	lr
